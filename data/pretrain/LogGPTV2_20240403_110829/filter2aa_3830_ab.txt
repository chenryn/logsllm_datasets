:0001.00E7 2AE4                   sub ah, ah
:0001.00E9 0386A2FE               add ax, [bp+FEA2]
:0001.00ED 2D5443                 sub ax, 4354
:0001.00F0 03D0                   add dx, ax
:0001.00F2 83D100                 adc cx, 0000
:0001.00F5 1E                     push ds
:0001.00F6 8DBEACFE               lea di, [bp+FEAC]
:0001.00FA 8BF2                   mov si, dx
:0001.00FC 8CD0                   mov ax, ss
:0001.00FE 8EC0                   mov es, ax
:0001.0100 8ED9                   mov ds, cx
:0001.0102 B98000                 mov cx, 0080
:0001.0105 F3                     repz
:0001.0106 A5                     movsw
:0001.0107 1F                     pop ds
* Possible StringData Ref from Data Seg 002 ->"Sending key.."
                                  |
:0001.0108 688800                 push 0088
:0001.010B 0E                     push cs
:0001.010C E83DFF                 call 004C
:0001.010F 83C402                 add sp, 0002
* Possible StringData Ref from Data Seg 002 ->"Sending Magic Byte.."
                                  |
:0001.0112 689800                 push 0098
:0001.0115 0E                     push cs
:0001.0116 E833FF                 call 004C
:0001.0119 83C402                 add sp, 0002
:0001.011C 689100                 push 0091
:0001.011F FF7606                 push word ptr [bp+06]
:0001.0122 E8CD0E                 call 0FF2
:0001.0125 83C404                 add sp, 0004
:0001.0128 8D86ACFE               lea ax, [bp+FEAC]
:0001.012C 8946FE                 mov [bp-02], ax
:0001.012F 8BF0                   mov si, ax
:0001.0131 8B7E06                 mov di, [bp+06]
* Referenced by a (U)nconditional or (C)onditional Jump at Address:
|:0001.0164(C)
|
:0001.0134 8A04                   mov al , [si]
:0001.0136 2AE4                   sub ah, ah
:0001.0138 50                     push ax
* Possible StringData Ref from Data Seg 002 ->"%02X"
                                  |
:0001.0139 68AF00                 push 00AF
:0001.013C 8D46AC                 lea ax, [bp-54]
:0001.013F 50                     push ax
:0001.0140 9A402D2802             call 0001.2D40
:0001.0145 83C406                 add sp, 0006
:0001.0148 8A46AC                 mov al , [bp-54]
:0001.014B 50                     push ax
:0001.014C 57                     push di
:0001.014D E8A20E                 call 0FF2
:0001.0150 83C404                 add sp, 0004
:0001.0153 8A46AD                 mov al , [bp-53]
:0001.0156 50                     push ax
:0001.0157 57                     push di
:0001.0158 E8970E                 call 0FF2
:0001.015B 83C404                 add sp, 0004
:0001.015E 46                     inc si
:0001.015F 8D46AC                 lea ax, [bp-54]
:0001.0162 3BF0                   cmp si, ax
:0001.0164 72CE                   jb 0134
* Possible StringData Ref from Data Seg 002 ->"Done. bye"
                                  |
:0001.0166 68B400                 push 00B4
:0001.0169 0E                     push cs
:0001.016A E8DFFE                 call 004C
:0001.016D 83C402                 add sp, 0002
:0001.0170 5E                     pop si
:0001.0171 5F                     pop di
:0001.0172 C9                     leave
:0001.0173 CB                     retf
```
Even without diving into all the details, we can make a few basic observations:
* `call 004C` looks like the "Print" function, since before calling it, we can see the program push the strings that appeared in the program output
* `call 0FF2` looks like the "Send" function. It's called once with a parameter of 0x91 (the magic byte?) and then in a loop (the key?). The sending loop seems to use a format specifier of "%02X" to extract bytes before sending them.
How is the data being sent? Here's the function at 0xFF2:
```assembly
* Referenced by a CALL at Addresses:
|:0001.0122, :0001.014D, :0001.0158, :0001.0CDE
|
:0001.0FF2 55                     push bp
:0001.0FF3 8BEC                   mov bp, sp
:0001.0FF5 56                     push si
:0001.0FF6 FF7604                 push word ptr [bp+04]
:0001.0FF9 6A00                   push 0000
:0001.0FFB 9A2C100000             call USER.GETWINDOWWORD
:0001.1000 8BF0                   mov si, ax
:0001.1002 0BF0                   or si, ax
:0001.1004 7506                   jne 100C
:0001.1006 33C0                   xor ax, ax
:0001.1008 5E                     pop si
:0001.1009 C9                     leave
:0001.100A C3                     ret
:0001.100B 90                     nop
* Referenced by a (U)nconditional or (C)onditional Jump at Address:
|:0001.1004(C)
|
:0001.100C FF34                   push word ptr [si]
:0001.100E 8D4606                 lea ax, [bp+06]
:0001.1011 16                     push ss
:0001.1012 50                     push ax
:0001.1013 6A01                   push 0001
:0001.1015 9AFFFF0000             call USER.WRITECOMM
:0001.101A B80100                 mov ax, 0001
:0001.101D 5E                     pop si
:0001.101E C9                     leave
:0001.101F C3                     ret
```
It is calling `WRITECOMM`, which is used for serial communication. And the strings window mentioned COM1, which is referenced by:
```assembly
* Possible StringData Ref from Data Seg 002 ->"COM1"
                                  |
:0001.0D32 680301                 push 0103
:0001.0D35 680010                 push 1000
:0001.0D38 680010                 push 1000
:0001.0D3B 9AFFFF0000             call USER.OPENCOMM
```
So it looks like COM1 is used for the communication.
Let's setup COM1 and allow the programs to communicate.
DOSBox supports serial communication, we just need to open the DOSBox configuration file (`dosbox.conf`) and change `serial1=dummy` to `serial1=directserial realport:com1`. Now the DOSBox COM1 port is connected to the physical COM1 port on our host. 
Wait, what? This is 2019, we don't have a physical COM1 port on our host. We can download software to create a virtual COM1 port, but let's just use something we already have installed - VirtualBox. We just need to copy DOSBox into an existing virtual machine and configure the serial connection.
VirtualBox has several options to configure a COM port (see [here](https://www.virtualbox.org/manual/ch03.html#serialports)).
We'll use the TCP Socket:
>  TCP Socket: Useful for forwarding serial traffic over TCP/IP, acting as a server, or it can act as a TCP client connecting to other servers. This option enables a remote machine to directly connect to the guest's serial port using TCP.
> 
> *    TCP Server: Deselect the Connect to Existing Pipe/Socket check box and specify the port number in the Path/Address field. This is typically 23 or 2023. Note that on UNIX-like systems you will have to use a port a number greater than 1024 for regular users. The client can use software such as PuTTY or the telnet command line tool to access the TCP Server.
> 
> *    TCP Client: To create a virtual null-modem cable over the Internet or LAN, the other side can connect using TCP by specifying hostname:port in the Path/Address field. The TCP socket will act in client mode if you select the Connect to Existing Pipe/Socket check box. 
First, we'd like client to send us the key, so we'll setup a virtual COM port as a client and implement a TCP server. 
The implementation:
```python