title:On the Design and Use of Internet Sinks for Network Abuse Monitoring
author:Vinod Yegneswaran and
Paul Barford and
David Plonka
On the Design and Use of Internet Sinks
for Network Abuse Monitoring
Vinod Yegneswaran1, Paul Barford1, and Dave Plonka2
1 Dept. of Computer Science, University of Wisconsin, Madison
2 Dept. of Information Technology, University of Wisconsin, Madison
Abstract. Monitoring unused or dark IP addresses offers opportunities to sig-
niﬁcantly improve and expand knowledge of abuse activity without many of the
problems associated with typical network intrusion detection and ﬁrewall sys-
tems. In this paper, we address the problem of designing and deploying a system
for monitoring large unused address spaces such as class A telescopes with 16M
IP addresses. We describe the architecture and implementation of the Internet
Sink (iSink) system which measures packet trafﬁc on unused IP addresses in an
efﬁcient, extensible and scalable fashion. In contrast to traditional intrusion de-
tection systems or ﬁrewalls, iSink includes an active component that generates
response packets to incoming trafﬁc. This gives the iSink an important advan-
tage in discriminating between different types of attacks (through examination
of the response payloads). The key feature of iSink’s design that distinguishes it
from other unused address space monitors is that its active response component
is stateless and thus highly scalable. We report performance results of our iSink
implementation in both controlled laboratory experiments and from a case study
of a live deployment. Our results demonstrate the efﬁciency and scalability of
our implementation as well as the important perspective on abuse activity that is
afforded by its use.
Keywords: Intrusion Detection; Honeypots; Deception Systems
1
Introduction
Network abuse in the form of intrusions by port scanning or self propagating worms is a
signiﬁcant, on-going threat in the Internet. Clever new scanning methods are constantly
being developed to thwart identiﬁcation by standard ﬁrewalls and network intrusion de-
tection systems (NIDS). Work by Staniford et al. [27] and by Moore et al. [18] project
and evaluate the magnitude of the threat of new classes of worms and the difﬁculty of
containing such worms. The conclusions of both papers is that addressing these threats
presents the research and operational communities with serious challenges. An impor-
tant step in protecting networks from malicious intrusions is to improve measurement
and detection capabilities.
One means for improving the perspective and effectiveness of detection tools is to
monitor both used and unused address space in a given network. Monitoring the un-
used addresses is not typically done since packets destined for those addresses are often
dropped by a network’s gateway or border router. However, tracking packets sent to
unused addresses offers two important advantages. First, other than misconﬁgurations,
packets destined to unused addresses are almost always malicious, thus false positives
E. Jonsson et al. (Eds.): RAID 2004, LNCS 3224, pp. 146–165, 2004.
© Springer-Verlag Berlin Heidelberg 2004
On the Design and Use of Internet Sinks for Network Abuse Monitoring
147
– a signiﬁcant problem in NIDS – are minimized. Second, unlike NIDS that monitor
trafﬁc passively, a detection tool that monitors unused addresses can actively respond
to connection requests, thus enabling the capture of data packets with attack-speciﬁc
information. The possibility for unused address space monitoring is perhaps most sig-
niﬁcant in class A and class B networks where the number of unused addresses is often
substantial. The idea of monitoring unused address space has been adopted in a num-
ber of different studies and on-going projects including the DOMINO project [31], the
Honeynet project [29], LaBrea tarpits [14] and in the backscatter analysis conducted by
Moore et al. in [19].
This paper makes two contributions. The ﬁrst is our description of a new system
architecture and implementation for measuring IP trafﬁc. An Internet Sink or iSink, is
a system we developed for monitoring abuse trafﬁc by both active and passive means.
The key design requirements of an iSink are extensibility of features and scalability
of performance since it is meant to be used to monitor potentially large amounts of IP
address space.
Our design of an iSink includes capabilities to trace packets, to actively respond
to connection requests, to masquerade as several different application types, to ﬁnger-
print source hosts and to sample packets for increased scalability. The passive compo-
nent of our implementation (which we call Passive Monitor) is based on Argus [3] – a
freely available IP ﬂow measurement tool. The active component of our implementation
(which we call Active Sink) is based on the Click modular router platform [12]. Click is
an open-source toolkit for building high performance network systems on commodity
hardware. The focus of Active Sink’s development was to build a set of stateless respon-
der elements which generate the appropriate series of application level response packets
for connections that target different network services including HTTP, NetBIOS/SMB
and DCERPC (Windows RPC Service).
The second contribution of this paper is a measurement and evaluation case study
of our iSink implementation. We use the results from the case study to demonstrate the
scale and diversity of trafﬁc characteristics exposed by iSink-based monitoring. These
results provide validation of our architectural requirements and rationale for subsequent
evaluation criteria. We also deployed the iSink in situ to monitor four class B address
spaces within our campus network for a period of 4 months and one entire class A ad-
dress space to which we have access. From these data sets we report results that demon-
strate the iSink’s capabilities and the unique information that can be extracted from this
measurement tool. One example is that since the trafﬁc characteristics from our class
B monitor are substantially different from those on the class A monitor, we conclude
that the location of the iSink in IP address space is important. Another example is that
we see strong evidence of periodic probing in our class A monitor which we were able
to isolate to the LovGate worm [2]. We also uncovered an SMTP hot-spot within the
class A network that has been unreported prior to our study. We were able to attribute
that anomaly to misconﬁgured wireless routers from a major vendor. Finally, we assess
basic performance of the iSink in controlled laboratory experiments and show that our
implementation has highly scalable response capability.
These results demonstrate that our iSink architecture is able to support a range of
capabilities while providing scalable performance. The results also demonstrate that
148
Vinod Yegneswaran, Paul Barford, and Dave Plonka
Active iSinks are a simple and very useful way to extend basic intrusion monitoring
capabilities in individual networks or in the Internet as a whole.
2 Related Work
The notion of monitoring unused IP addresses as a source of information on intrusions
has been in use in various forms for some time. While we coin the terms “Internet Sink”
and “iSink”, these monitors have variously been referred to as “Internet Sink-holes”
[8], “Blackhole Routers” [9] and “Network Telescopes” [15]. Traditional Honeypots
are deﬁned as systems with no authorized activity that are deployed with the sole pur-
pose of monitoring intrusions. Honeynets are network of honeypots (typically set up as
VMware hosts). Their deployment is often associated with signiﬁcant management and
scalability challenges [29]. In [15], Moore raises the challenges of deploying honeypots
in a class A network telescope. The systems that are perhaps most similar to the Active
Sink have been developed in the Honeyd [10] and Labrea Tarpit projects [14]. Active
Sink’s design differs in signiﬁcant ways from these two systems. Much like the Ac-
tive Sink, Honeyd is designed to simulate virtual honeypots over unused IP addresses,
with the potential for a diverse set of interactive response capabilities. However, Hon-
eyd’s stateful active responder design has signiﬁcant scalability constraints that make it
inappropriate for monitoring large IP address ranges which is one of iSinks primary ob-
jectives. LaBrea’s primary design objective is to slow the propagation of Internet worms
(i.e., a sticky honeypot), and as such, it lacks the richness of interaction capabilities that
is required to gather important response information. In addition to a richer response
set, our Active Sink’s performance greatly exceeds that of LaBrea as will be seen in
Section 5.
There are a number of empirical studies of intrusion and attack activity that moti-
vate and inform our work. In [33], the authors explore the statistical characteristics of
Internet intrusion activity from a global perspective. That study is based on the use of
intrusion logs from NIDS and ﬁrewalls located broadly across the Internet. Moore et al.
examined the global prevalence of denial-of-service attacks using backscatter analysis
in [19]. That work was conducted by gathering packet traces from a relatively quies-
cent class A network. Characteristics of the Code Red worm have been analyzed in a
number of studies. In [17] the authors investigate the details of the Code Red outbreak
and provide important perspective on the speed of worm propagation. Moore et al. pro-
vide further insights on the speed at which countermeasures would have to be installed
to inhibit worms propagation [18]. While the prospects for successful containment are
rather grim, it is clear that rapid detection will be a key component in any quarantine
strategy.
Intrusion detection systems are a standard component in network security architec-
tures. These tools typically monitor packet trafﬁc at network ingress/egress points and
identify potential intrusions using a variety of techniques. Standard methods for intru-
sion identiﬁcation include misuse detection (eg. [21, 25]), statistical anomaly detection
(eg. [26]), information retrieval (eg. [1]), data mining (eg. [13]), and inductive learning
(eg. [28]). Our work is distinguished from general NIDS in that they operate on active
IP addresses and must deal with the problem of identifying the nefarious trafﬁc mixed
On the Design and Use of Internet Sinks for Network Abuse Monitoring
149
in with all of the legitimate trafﬁc. We expect iSinks and NIDS to complement each
other in future operational environment.
High performance packet monitors have been used for collecting packet traces in
the Internet for years. These systems relate directly to our iSink design in that they
must scale to reliably log packets on very high speed links. Examples of these include
systems that have been developed with a variety of commodity and special purpose
hardware such as [4, 7, 11]. Our iSink differs signiﬁcantly from these systems (as well
as the NIDS mentioned above) in that it not only passively monitors and logs packets,
but it also actively responds to incoming TCP connection requests and has application
level response capability.
Internet Sink Architecture
3
In this section we describe the iSink requirements, architecture and implementation.
The implementation is described within the context of deployments on two different
sets of address spaces.
3.1 Design Requirements
The general requirements for an iSink system are that it possess scalable capability
for both passive and active monitoring and that it be secure. We discuss the issues of
security in more detail in [32].
Passive monitoring capability must be able to capture packet header and payload
information accurately. While there are many standard tools and method for packet
capture, if either these or new tools are employed, they should be ﬂexible and efﬁcient
in the ways in which data is captured and logged.
Active response capability is included in iSink’s design as a means to gather more
detailed information on abuse activity. This capability is enabled by generating appro-
priate response packets (at both transport and application levels) to a wide range of
intrusion trafﬁc. While active responses also have the potential to interfere with mali-
cious trafﬁc in beneﬁcial ways such as tarpitting, this is not a focus of iSink’s design.
We expect Internet Sinks to measure abuse activity over potentially vast unused
IP address spaces. For example, in our experimental setup, we needed the ability to
scale to an entire class A network (16 million addresses). With the continued growth
in malicious Internet trafﬁc, and transition to IPv6, we expect the scalability needs to
grow signiﬁcantly for both the active and passive components of our system. Our basic
approach to scalability is to maintain as little state as possible in our active responders.
Another means for increasing scalability is through the use of sampling techniques in
both active and passive components of the system. If sampling is employed, then the
measurement results must not be substantially altered through their use.
Finally, our intent is to develop iSink as an open platform, thus any systems that are
used as foundational components must be open source.
3.2 Active Response: The Design Space
In this section we explore the architectural alternatives for sink-hole response systems.
The choices we consider are LaBrea, Honeyd, Honeynets and Active Sink (iSink’s ac-
tive response system) as shown in Table 1. We compare these systems based on the
following characteristics.
150
Vinod Yegneswaran, Paul Barford, and Dave Plonka
Table 1. Design Space of Sink-Hole Responders
Conﬁgurability Modularity Flexibility Interactivity Scalability
Active Sink
Honeyd
Honeynet
LaBrea
High
High
Low
Low
High
High
Low-Medium High
Medium
Medium
Low-Medium
Low-Medium Low-Medium
Low-Medium
High
High
Low
Low
Limited
High
1. Conﬁgurability describes the ability of the conﬁguration language to deﬁne the
layout and components of response networks. Honeyd’s strengths are in ﬁne-
grained control of virtual network topologies and network protocol stacks. How-
ever Honeyd’s language does not provide support for assigning large blocks of IP
addresses to templates (except for the default template)1. Active Sink’s conﬁgura-
tion language (inherited from Click) uses a BPF like language and provides excel-
lent support for both ﬁne-grained and coarse-grained control of a virtual network
topology. Active Sink’s design is stateless and hence does not replicate network
stack retransmission timers. LaBrea and Honeynets only allow for limited conﬁg-
urability.
2. Flexibility relates to the ability to mix and match services with operating systems.
For example, the ability to deﬁne two types of Windows Servers: one with a telnet
service and FTP service and another with NetBIOS Service and a Web server. The
design of Honeyd and Active Sink both provide a high degree of ﬂexibility. It is
somewhat harder to do the same with Honeynets. LaBrea’s ﬂexibility in this regard
is limited as it was designed with a different objective.
3. Modularity describes the ability to compose and layer services on top of one an-
other. For example, layering Server Message Block (SMB) service over NetBIOS
or layering Web services over SSL. Active Sink’s design is inherently modular
which directly facilitates service composition. In contrast, Honeyd’s design is more
monolithic and hence less straightforward to layer services.
4. Interactivity refers to the scope of response capability. The levels of interactivity
of Honeyd and Active Sink are comparable. Obviously, Honeynets could provide
more complete response capabilities. However, to mitigate the risk of Honeynets
being used as a stepping-stone for additional attacks, data controls are required to
be placed which limit interactivity. There are other practical conﬁguration issues
that also could limit interactivity. For example, Active Sink’s NetBIOS responder
grants session requests for all NetBIOS names and all user/password combinations,
while a Honeynet Windows monitor would only allow NetBIOS session requests if
it matches its list of valid names. Hence, the realized degree of interaction in Active
Sinks are often higher than honeynets.
5. Scalability refers to the number of connections that can be handled in a given time
period. In our monitoring environment we typically see hundreds of thousands of
connection attempts per minute. Active Sink’s stateless kernel module design pro-
vides high degree of scalability by eliminating unnecessary system calls and inter-
1 This feature is particularly necessary for large network sinks.
On the Design and Use of Internet Sinks for Network Abuse Monitoring
151
ISP Backbone/Core
monitor
port
ISP router
advertises "dark" IP
networks/prefixes via iBGP
SNMP−capable
ethernet switch
with port monitoring
IP nexthop
NAT Filter
Passive Monitor
Poll Device
Classifier
MarkIPHeader
IP Classifier
  Windows Responder
ARP Responder
ICMP Ping Responder
HTTP Responder
NetBIOS Responder
Round Robin Scheduler
SetIPChecksum
 SetTCPChecksum
SMB Responder
Active Sink
NIDS
VMware Honeynet
Queue
ToDevice
Fig. 1. Internet Sink Implementation.
In our current
implementation the
NIDS is run ofﬂine
Fig. 2. Active Sink Conﬁguration based on Click’s mod-
ular design. Shaded elements are iSink extensions
rupt handling overheads2. LaBrea’s stateless design also provides reasonable scal-
ing properties, however its user level implementation makes it inferior to the Active
Sink. A weakness of Honeyd’s design is its inherent statefulness that limits its scal-
ability3. Our experience suggests that Honeyd works well in environments that see
tens of connection attempts per minute. The scalability of Honeynet systems vary
from low to medium depending on the service and licensing issues.
3.3 Implementation
The objective of our monitoring infrastructure implementation was to create a highly
scalable backplane with sufﬁcient interactivity to ﬁlter out known worms, attacks and
misconﬁguration. To accomplish this, the iSink design includes a Passive Monitor, an
Active Sink and a Honeynet component. Unsolicited trafﬁc can be directed to each of
these components which provide unique measurement capabilities. These components,
in addition to MRTG [20] and FlowScan [23], were run on Linux-based commodity
PCs. Details of our implementation as illustrated in Figure 1 and include:
1. Passive Monitor – This component is based on Argus which is a generic libpcap
based IP network auditing tool. It allows for ﬂow level monitoring of sink trafﬁc and
can be interfaced with FlowScan which is a ﬂow level network trafﬁc visualization
tool.
2. Active Sink – The standard collection of elements provided with Click enabled
many of the basic capabilities required for building active responses in iSink. Fig-
ure 2 illustrates iSink’s conﬁguration based on Click’s modular design. Some of the
fundamental elements include: (i) Poll Device which constantly polls the interface
for new packets; (ii) IP Classiﬁer which routes ARP packets to the ARP Respon-
der, ICMP ping packets to the Ping Responder and TCP packets to the Windows
2 Click also provides the ﬂexibility to be run as a userlevel module which greatly simpliﬁes
debugging and development.
3 Honeyd forks a process per connection attempt. A more recent version of Honeyd includes
support for python threads. However, scalability improvements are limited by the overhead of
the python interpreter.
152
Vinod Yegneswaran, Paul Barford, and Dave Plonka
Responder (all other packets are discarded); (iii) Windows Responder which re-
sponds to connection attempts on open ports and forwards HTTP requests to the
Web Responder and SMB data packets to the NetBIOS Responder. The applica-
tion responders developed speciﬁcally for iSink are shaded. As far as we know, we
are the ﬁrst non-commercial Honeypot system to provide emulation capabilities for
Windows Networking(NetBIOS/SMB/CIFS) and DCERPC. The current suite of
responders that are available also includes an HTTP responder, an SMTP respon-
der, an IRC responder, Dameware responder and a responder for backdoor ports
such as MyDoom and Beagle.
Stateless responders are enabled by the following two observations:
(a) It is almost always possible to concoct a suitable response just by looking at
the contents of the request packet from the client – even for complex protocols
like SMB. Knowledge of prior state is not compulsory.
(b) We need to continue the packet exchange only until the point where we can
reliably identify the worm/virus.
3. NAT Filter – The motivation behind ﬁltering is to reduce the volume of trafﬁc gen-
erated by active responders. This module serves two purposes. It routes requests to
appropriate responders (Active Sink or Honeynets) through network address trans-
lation. It also ﬁlters requests that attempt to exploit known vulnerabilities or mis-
conﬁguration. This makes mapping of iSinks more difﬁcult and increases scala-
bility of analysis daemons that have to process large volumes of data. We experi-
mented with several ﬁltering strategies:
For each source IP allow only:
(a) ﬁrst N connections
(b) ﬁrst N connections per 
(c) connections to ﬁrst N destinations IPs targeted by the source
Of the three strategies, option (c) [N destination IPs per source IP] seemed the
most attractive. The performance of options (a) and (c) were comparable. They
both provided two orders of reduction in the volume of packets and bytes) and were
signiﬁcantly better than option(b). We chose option (c) because it has the additional
advantage of providing a consistent view of the network to the scan sources thus
allowing the iSink to appear as if it were a subnet with N live hosts4.
4. VMware Honeynets – These are, quite simply, commodity operating systems run-
ning on VMware. Currently, we route packets of services for which we don’t have
complete responders to fully patched Windows systems.
5. NIDS – This system can be used to evaluate the packet logs collected at the ﬁlter.
We plan to implement support for NIDS rules that can communicate with the ﬁl-
ter and implement real time ﬁltering decisions. For example, the decision to route
packets or migrate connection to VMware Honeynet could be triggered upon the
absence of a signature in the NIDS ruleset for the connection.
For this study, we built and deployed two separate iSinks: a “campus-enterprise”
iSink and a “service-provider” iSink. These were used to assess our iSink design and
demonstrate its capabilities.
4 The set of N destination hosts varies with each source depending on the order in which the
source scans the address space.
On the Design and Use of Internet Sinks for Network Abuse Monitoring
153
3.4 Deployment: Campus-Enterprise Sink
The campus iSink received unsolicited trafﬁc destined for approximately 100,000 un-
used IPv4 addresses within 4 sparsely-to-moderately utilized class-B networks that are
in use at our campus. Essentially, these unused addresses are in the “holes” between
active subnets, each of which typically contains 128 to 1024 contiguous host addresses
(i.e., 25 through 22-bit netmasks, respectively).
A so called “black-hole” intra-campus router was conﬁgured to also advertise the
class B aggregate /16 routes into the intra-campus OSPF. The result was that there were
persistent less-speciﬁc (16 bit netmask) routes for every campus address. Unsolicited
trafﬁc, whether from campus or outside sources, destined for unused campus IP ad-
dresses always “falls through” to those less-speciﬁc /16 routes, and therefore is routed
to the iSink and measured. Furthermore, occasionally trafﬁc destined for campus ad-
dresses that are normally in use can fall through to the iSink if its subnet’s more speciﬁc
route disappears. Typically, this only happens during network outages, making the iSink
a potential warning system of problems because it can passively detect routing failures.
Whenever trafﬁc that was destined for a campus IP address known to be in use reaches
the iSink instead, the operators know that there is a problem.
It was important in our environment that the iSink machine was not capable of
actively participating in the intra-campus routing, other than to respond via ARP as
the IP nexthop on its transit link. The iSink is not an OSPF router, but instead is the
destination of a static route. This limits the possible damage that could be caused if
ever the iSink system was compromised and was attempted to be used maliciously.
3.5 Deployment: Service-Provider Sink
The service-provider iSink received unsolicited trafﬁc destined for 16 million IPv4 ad-
dresses in one class A network. An ISP router, located at our campus’ service-provider,
served as the gateway for the service-provider iSink. The service-provider was respon-
sible for advertising the class A network via BGP to our service provider’s commercial
transit providers, Internet2’s Abilene network, and to various other peers. SNMP-based
measurements at the Ethernet switch’s ports were used to compute any packet loss by
the libpcap-based Argus software.
4 Experiences with Internet Sink
Investigating Unique Periodic Probes. The periodicity observed in the service
provider iSink data is an excellent example of the perspective on intrusion trafﬁc af-
forded by iSink. The ﬁrst step in our analysis of this periodicity was to understand the
services that contributed to this phenomenon. We found that most of the periodicity