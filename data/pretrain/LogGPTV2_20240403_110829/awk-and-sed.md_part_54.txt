被
BEGIN模式在第一个输入行被读取之前应用，END 模式在最后一个输入行
的详细讨论。请参阅第三章“了解正则表达式语法”
正则表达式使用元字符的扩展集并且必须用斜杠包围。对于正则表达式
中
使
外，C的条件操作符？：
以防问若干行，
用！可以召
读取之后应
系表达式使用关系操作符，
逻辑与
了BEGIN和 END 外，
它们在被应用前被合成一个规则。
QQ群：
否定
应用。
匹西
和在 sed 中一样：
配，
50192241
其他模式都可以使用下面的操作符来进行组合：
也就是处理与模式不匹配的行。
(pattern？ pattern:pattern)可以用模式
- 417 -
1I /+se+/, Y α/+aams/8g/aano/,
列在本章“表达式”的后面。
附录二
awk 的快速参考
---
## Page 400
[:alpha:]
[:alnum:]
[:class :]
符
表 B-2：POSIX字符列表工具
它们进行了描述。
在 POSIX中，
序列”一节定义的一样。
正则表达式也可以使用转义序列来访问特殊的字符，和在本附录后面的“转义
特殊字符
[=equiv=]
表b-1：正则表达式元字符
表 b-1总结了在第三章中描述的正则表达式。元字符按照优先级列出。
正则表达式
号
(r1) (r2)
r1lr2
*→
[...
S
C
允许在一对方括号中用特殊符号匹配非英语字符。在表B-2中对
用于正则表达式的分组
与前面正则表达式的0个或1个出现匹配
与前面正则表达式的一个或多个出现匹配
与前面的任意个（包括0个）正则表达式匹配
用于连接正则表达式
允许与正则表达式r1或r2中的任何一个匹配
号(])在作为类中第一个字符表示是这个类的成员。当其他的
字符以外的字符，连字符(-)用于表示一个字符范围。右方括
和用方括号包围起来的字符类中的任何一个字符匹配、脱字符
和任意单个字符匹配，
将前面的正则表达式定位在字符串的末端
可以用来转义］，即使没有用在第一位。
将后面的正则表达式定位在字符串的开始处
转义它后面的任意元字符，
和不是元字符的任何字符C匹配
元
用法
QQ群：
字母字符
字母数字字符
控制字符等等
字符类。字符类关键词表示不同的字符类。例如字母字符，
是相等的，
等价类。一个等价类列出了一组字符，这组字符应该被看做
比较符号。比较符号是一个多字符序列，应将它看作为一个
单
功
字符作为类的成员时将失去它们原来的含义。但\除外，它
）作为方括号中的第一个字符表示将匹配所有列在类中的
元来处理
能
50192241
例如“e”
- 418 -
包括换行符
和
包括它自己
“é”
附录二
awk 的快速参考
---
## Page 401
ppp\
八
b
Ic
xhex
#
b
序列
表B-3：转义序列
表B-3描述了可以用在字符串和正则表达式中的转义序列。
转义序列
来
有两种类型的常量，
常量
信息，返回一个特定数值或字符串的值。
一个表达式可以由常量、
表达式
注
[: xdigit:]
[: space:]
[:punct:]
[:print:]
[: lower :]
[: graph:]
[:upper :]
[:digit:]
[:cntrl:]
[:blank:]
#
意
时，POSIX保留这些字符为未定义。在大多数版本的 awk 中，你就会直接
和ANSIC一样，当你在没有列在这个表中的任意字符前放置一个反斜杠
POSIX不提供“\x”
而数值常量
这些工具（上面所写的）一直没有被广泛的应用。
任何需要字面表示的字符C（例如：\"for"）b
量不需要。
将字符表示为十六进制值
将字符表示为1到3位八进制值
垂直制表符
水平制表
回车符
换行符
走纸符
退格符
报警字符，通常是ASCIIBEL字符
描述
QQ群：
十六进制数字
大写字符
空
标点符号字符
可打印的字符
小写字符
可打印的和可见的（非空格）字符
数字字符
控制字符
空格和制表符
即字符串常量或数值常量。字符串常量必须用引号括起
白字符
符
、变量、操作符和函数组成。常量要么是字符串（字符
但它通常是可用的。
50192241
附录二
awk 的快速参考
---
## Page 402
样按特定的的顺序存储。
关联数组在数组的下标和元素之间建立一种“联系
一个字符串也可以是一个数字。
在 awk 中，
数组是-
数组
一个字段。
为一个变量，
参见后面的“系统变量”一节了解内置变量的信息。
以上语句打印变量×的值，
使用变量的名字可以访问它的值：
它将表达式的值赋给 var。下面的表达式将值1 赋给变量x。
变量的赋值形式为：
据操作来解决定一个值是作为字符串还是数值来处理。
母的大小写是很重要的。
变量的名字不能以数字开头，而是由字母，数字和下划线组成，在变量名中字
始
变
有
变量
台化的变量将空串（“”）
量不需要声明或初始化。
3种类型的变量：自定义变量，
array [index] = value
这里的n是O到 NF 之间的任意一个数，
x=1
var=expr
得到那个字符。
{print x}
一个可以用来存储一组值的变量。下面的语句为数组的元素赋一个值：
所有的数组都是关联数组。
，例如$NF表示最后一个字段，或表示为一个常量，例如$1表示第
QQ群：
）作为它的字符串值，
50192241
本例可以得到1.
一个变量可以包含一个字符串或数值。对于未被初
的值。关联数组的元素不像传统数组的元素那
内置变量和字段。按照惯例，内置或系统变
- 420 -
，使得关联数组独特的是它的下标可以是
，用于按位置访问字段。也可以表示
将0作为它的数值。awk会根
附录二
系
”
。利用$n 可以访问字段变
对于数组中的每个元素
 awk 的快速参考
---
## Page 403
操作符
表B-5:操作符
在表 B-5中按优先顺序列出了可在 awk 中应用的操作符。
操作符
SUBSEP
RSTART
RS
RLENGTH
ORS
OFS
OFMT
3
FNR
FILENAME
ENVIRON
CONVFMT
ARGV
ARGC
变量
表 b-4:awk 的系统变量
示（默认值列在括号中）
awk 定义了许多特殊的变量，
系统变量
测式这个元素的值。也可以使用 delete 语句从数组中删除一个元素。
这里数组的下标由变量item来指定，数组元素的值可以利用 array［item]来
可以使用for 循环来读取关联数组中的所有元素。
+=-=*=/=%=^=**=
for (item in array)
数组下标的分隔字符（\034）
和函数match（)匹配的字符串的第一个位置
记录分隔符（一个换行符）
和函数match（）匹配的字符串的长度
输出记录分隔符（
输出字段分隔符(一个空行)
数字的输出格式（%.6g）
当前记录的个数
当前记录中的字段个数
字段分隔符（一个空行）
和NR类似，
环境变量的关联数组
用于数字的字符串转换格式（%.6g）（POSIX)
包含命令行参数的数组
命令行中的参数个数
描述
前文件名
QQ 群:
50192241
但和当前文件相关
它们可以在程序中访问或重新设置，如表B-4所
匹配正则表达式与不匹配
C语言的条件表达式
逻辑与
逻辑或
赋值操作符
（一个换行符）
描述
附录二
awk 的快速参考
---
## Page 404
close()
break
atan2()
量的不同实现。
中所有可用的语句和参数。参阅第十一章“awk的系列产品”，介绍了扩展变
下面是依字母的顺序列出的语句和函数，其中包含了 POSIX awk，gawk或 nawk 
awk 的命令汇总
在函数名和括号之间允许有一个空格）。
自变量是用逗号分隔的一个列表。左圆括号跟在函数名后面（对于内置函数，
这里的 return 是一个变量，
awk 有许多预定义的算术函数和字符串函数。函数经常按下面的方式调用：
在圆括号中;getline 是一个函数，但它没有使用括号）。
一定严格按照语法规定：printf 被看做是一个语句，而它的参数列表可以包含
包含在大括号中的动作，
语句和函数
成部分。
形
11++
(blank)
值
的
可以用在表达式的任何位置，而不仅仅只出现在赋值语句的右边）。函数的
区别是函数将返加一个值，并且它的参数列表在圆括号中给出（在形式上不
**
retur n = function(ar g1,ar g2)
个=
%
这里的“**”和“**=”是共同的扩展，它们不是 POSIXawk 组
QQ群：
close (command-expr)
close (filename-expr)
从while、for 或 do 循环中退出。
返
atan2(y，
和/或管道。因此，awk 提供了一个close（)函数，利用这
在大多数awk 的实现中，你只能同时打开一定数量的文件
回y/x的反正切，
T
由一个或多个语句和/或表达式组成。语句和函数之间
!
50192241
用于保存函数的返回值（实际上，
字段引用
递增和递减，作为前缀或后缀
求幂
片
乘法，除法，
加法，
连接符
关系操作符
- 422 -
负，逻辑非
减法
单位是弧度。
取模
附录二
awk 的快速参考
一个函数的返回
---
## Page 405
gsub（)
 getline
exp（）
exit
for
do
delete
cont inue
QQ群：
全局替换字符串s 中与字符串t中的正则表达式r匹配的所
gsub(r,
getline[var][<file]
读取下一个输入行
statement 都被执行;可以利用 array [item]的形式来访问元
C语言风格的循环结构。
有字符串。
for (item in array) statement 
用来在每次循环中递增计数器变量。
计算它的值。当test-expr 为假时，
for (init-expr; test-expr; incr-expr) statement
exp (x)