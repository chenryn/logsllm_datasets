IP addresses. IPsec can be used in two modes: transport
or tunnel, and has two security protocols ESP, providing
encryption and optional authentication, and AH, providing
authentication. IPsec employs an anti-replay window to en-
sure performance by preventing duplicates, i.e., replays of
the communication exchanged by the legitimate parties, by
discarding duplicate segments at the receiver. In a replay
attack an adversary sends a copy of previously transmit-
ted, legitimate message between a sender and a receiver, see
[39] for more details. When the replayed packet reaches the
destination, it will be passed to the transport layer buffer.
Duplicate messages degrade performance and is an obvious
motivation for anti-replay window. Maintaining and man-
aging an anti-replay window can require signiﬁcant mem-
ory resources,; optimisation of anti-replay mechanism, e.g.,
[24, 17, 43] try to come with more efﬁcient implementa-
tions. Yet some solutions, e.g., [17], that attempt to save
resources by decreasing window size are susceptible to at-
tacks, which may result in more damage than not using an
anti-replay window at all. According to [27, 24, 17, 43], the
anti-replay mechanism of IPsec is used to secure IP against
an adversary that can insert possibly replayed messages in
the message stream, and as a result prevent denial of service
attacks. In particular, the authors of [43] present robustness
to DoS attacks as one of the requirements of anti-replay
mechanism, and claim that the possibility that packets will
be dropped is traded with the prevention of replay attack.
We show that even large enough anti-replay window cannot
prevent DoS attacks, and in Section 5 we present a new type
of low-rate TCP attacks, the reordering attacks, which sig-
niﬁcantly degrade performance even when sufﬁciently large
IPsec window is used.
1.3. Contributions
We show that IPsec alone cannot provide protection
against DoS. The contributions of this work can be sum-
marised as follows:
• We identify an important attack model, the stealth at-
tack, which was not explicitly deﬁned prior to this
work.
• We justify and analyse IPsec’s anti-replay mechanism,
Section 3, and show how to compute optimal IPsec
anti-replay window to prevent packets loss due to re-
ordering attacks in Section 4.
• We present degradation of service attacks on TCP
when running over IPsec, which work even when a
large IPsec anti-replay window is employed, Section 5.
We analyse our results with a simple analytical model
of TCP performance degradation.
• We propose a ﬁx to TCP in IPsec gateways, Section
5.3, to prevent the stealth reordering attacks.
• Conceptual contribution: we initiate investigation of
the performance properties that secure channel proto-
cols should provide.
2. Model
In this section we present the scenario which we consider
in the paper, we model and motivate the attacker, and give
assumptions on the communication.
2.1. Scenario and Attack Model
Consider the scenario presented in Figure 1, with a vir-
tual private network between two branches, both connected
via gateways GW 1, GW 2 to the Internet. All the commu-
nication between the branches is over IPsec, using IPsec’s
ESP mode with authentication. For simplicity, we assume
(ρ, σ)-limited stealth attacker can create a σ−burst which
is a burst of σ segments. We show that even this weaker
attacker can dramatically degrade performance, even when
communication is protected by IPsec.
We consider stealth (i.e., weak MITM) attackers, and
packets they inject can depend on the packets they eaves-
drop.
In fact, since the communication between the two
gateways is authenticated (using IPsec), it follows that the
adversary can effectively only duplicate packets, and possi-
bly ‘speed up’ delivery of a duplicate so it will arrive before
the regularly-sent packet, e.g., via an alternative path. Note
that the attacker may be limited in the direction in which it
can inject spoofed segments, e.g., can only duplicate seg-
ments sent from NYC site to LA site in Figure 1, but cannot
duplicate segments in the other direction.
In each attack we present we use a slightly different
variant of the (ρ, σ)-limited stealth attacker; the different
variants of the attacker model are illustrated in Figures 2,
and 3 and deﬁned below; The weakest stealth adversary
(Figure 2) can duplicate packets. A stealth attacker in
Figure 3, can also reorder packets1 by speeding them
up, e.g., via a faster route, in addition to its ability to
duplicate packets. We now model the attackers based on
the deﬁnitions above:
σ-Duplicating stealth attacker (Figure 2): this is the
weakest adversary model we consider. As the name im-
plies, the duplicating attacker can duplicate packets, so they
are received σ number of times instead of once. Speciﬁ-
cally, let i be a sequence number of some packet. Packet i
was duplicated if σ identical copies of packet i arrived (in
addition to the original packet i) with sequence duplicate
packets.
We use the duplicating attacker to motivate the use of
anti-replay window mechanism in IPsec; for this attack, we
only need to send σ = 3 duplicates of a few packets.
s-Reordering attacker (Figure 3): our next attacker
can duplicate σ packets and cause the duplicate(s) to be
delivered via a faster route to the destination, i.e.
faster
than the delay of other packets (including the original du-
plicated packet). Let 1, 2, 3, ... be a sequence of transmit-
ted packets (bounded by the maximal number of packets
in transit, see Claim 4). An s-reordering occurs if packet
with sequence number i arrives before packet with sequence
number i − s. We later show how such an attacker can
disrupt communication over IPsec implementations which
use an insufﬁciently-large anti-replay window. We believe
that such reordering capability may often be available to
attackers and is therefore a reasonable model, e.g., an at-
1Further research should be conducted to consider the damage that at-
tackers without speed-up capabilities, i.e., with the same delay as the legit-
imate communicating parties, can inﬂict.
Figure 1: Virtual private network behind gateway GW 1 with
users accessing servers located behind GW 2. IPsec is used for
protection, and a stealth adversary is located on the Internet, and
attacking a Virtual Private Network (VPN) between two sites.
that the clients are located behind GW 1, and the servers are
located behind GW 2. The clients send requests to down-
load ﬁles from servers, and servers send the requested ﬁles
in response. We assume that all communication is over TCP,
and upon each correctly received data segment, a client gen-
erates and sends an acknowledgment (ACK). An attacker
located on the Internet between the two gateways, GW 1
and GW 2, in Figure 1, is able to eavesdrop on the commu-
nication and inject (a limited number of) packets into the
message stream, but cannot drop legitimate packets. More
details on the attacker are presented in the next subsection.
2.2. Stealth Adversary Model
In this work, we deﬁne and consider the stealth adversary
model that can eavesdrop on communication, and spoof
packets (based on packets it observed), but cannot delay or
drop packets; the ‘classical’ man-in-the-middle (MITM) ad-
versary can eavesdrop, intercept communication, drop and
inject spoofed packets into the message stream. Attacker
that drops packets, i.e., MITM, can disrupt communication
and mount a denial of service attack, e.g., by blocking all
communication, yet we are interested in sophisticated am-
pliﬁcation attacks where attacker spends considerably less
resources w.r.t. the resulting damage. In addition, in real-
ity attackers often do not have MITM capabilities; and even
when attackers can drop packets they often prefer to refrain
when an alternative exists, in order to avoid detection.
Like in low rate attacks [29], we restrict the attacker’s
ability to send (inject) spoofed and/or duplicated packets.
Speciﬁcally, we believe a realistic model would be to deﬁne
a quantiﬁed, (ρ, σ)-limited stealth adversary following the
‘leaky bucket’ approach. Namely, an (ρ, σ)-limited stealth
adversary is one who can send, during any interval of length
T , at most ρ · T + σ spoofed and/or duplicated packets.
These limitations are weaker compared to those of low-rate
attacks, e.g., [29, 19, 32], since the attacker is not just lim-
ited in the amortised trafﬁc, but also cannot create bursts
of trafﬁc. In particular, the bursts are limited by σ, i.e., an
NYC siteWeb ServerGW1GW2attackerPublic InternetLA siteFTP ServerMail ServerFigure 2: Duplicating stealth adversary.
Figure 3: Reordering stealth adversary.
tacker may receive services from a better ISP that provides
a faster communication channel than the channel used by
the communicating parties, thus attacker can reorder pack-
ets by sending duplicates over a faster route; or attacker
may control zombie computers that will send more trafﬁc
on the route between the two gateways, causing signiﬁcant
queuing delays there, while the attacker speeds-up the du-
plicate packet via a different path to the destination gateway.
We assume that attacker has some non-zero delay, which is
smaller than that of the legitimate parties. Speciﬁcally, ad-
versary is said to be an s-reordering stealth attacker, if it can
cause delivery of the duplicate packet with sequence num-
ber i, before packet with sequence number i − s (before the
delivery of the original packet i). The reordering parameter
is a function of attacker’s delay and the delay of the legiti-
mate parties. The justiﬁcation of our adversarial model, is
that we focus on the use of IPsec, and IPsec is necessary
only when there is concern about MITM. In particular, the
anti-replay mechanism that IPsec employs is used to prevent
injection of duplicate segments, by identifying and discard-
ing replayed packets. This type of attack can be performed
by attacker that can eavesdrop and inject spoofed packets,
i.e., a MITM attacker.
As we mentioned before, we are not interested in triv-
ial ‘ﬂooding’ attacks where the attacker achieves degrada-
tion by spending resources proportional to the performance
degradation achieved, e.g., attacker injected two packets
thus the link carries additional load, and IPsec has to in-
spect two more packets, resulting in some degradation per-
formance but also attacker’s ‘cost’ is proportional. We are
focus on ampliﬁcation attacks where the attacker pays min-
imal resources with respect to the inﬂicted damage, e.g.,
injects three packets, but with a devastating result on the
attacked ﬂows.
2.3. Communication Model
We assume that packets arrival is organised in FIFO (ﬁrst
in ﬁrst out) and that they are delivered with ﬁxed latency
which is known to the attacker. The delay of packets is be-
tween delayM IN and delayM AX (if a packet does not ar-
rive within delayM AX seconds it is assumed to have been
loast) which the attacker can choose. Delivery of attacker’s
packets may not be in FIFO but their but the delay is at
least delayM IN . In addition, we assume that the attacker
(similarly to other network entities) is subject to some non-
zero network delay, which may be smaller than that of the
legitimate parties, and which the attacker cannot change.
Throughout the paper we denote by RTT (Round Trip Time)
the time it takes to transmit a segment from a client into the
network and to receive an acknowledgment (ACK) for it in
response. Namely, RTT is the sum of segment’s transmis-
sion time, propagation delay, transmission of ACK and its
propagation delay back to the sender, including any queu-
ing and processing delays involved. The attacks we present
apply to standard TCP implementations [35]; TCP state
machine is in Figure 5 (from [28]). We assume that the
connection is always open, and that the sender sends full
sized segments as fast as its congestion window allows. For
simplicity (only), assume that the recipient acknowledges
every segment received from the sender, i.e., no delayed
ACKs2. For ease of exposition, we work with segments in-
stead of bytes (which is what TCP actually sends). We also
assume that ﬂow control does not restrict congestion win-
dow growth. Let cwnd(t) be the congestion window size at
time t. We analyse TCP throughput in terms of transmission
rounds, each round starting with the sender transmitting the
ﬁrst segment in a window of size cwnd(t) at time t. Each
round ends when the sender receives an ACK for one of
the segments in a window. In this model, the duration of a
round is the round trip time (RTT), and is independent of
the window size. Notice that at any time t holds that the
number of ‘pending’ packets in transit at time t is smaller
(or equal) to congestion window size at time t (unless the
sender is in ‘fast recovery’ phase at time t).
3. Motivating Anti-Replay Window
In this section we consider a general question of anti-
replay mechanism. More speciﬁcally, should a secure chan-
nel protocol that aims to protect against denial/degradation-
of-service (DoS) attacks, employ an anti-replay mechanism.
IPsec employs an anti-replay mechanism although replay
sensitive protocols over IP are typically robust to replay,
e.g., TCP. Our answer to this question is positive: we claim
2When receiver sends an ACK for every other segment, i.e., uses de-
layed ACK, the congestion window grows in less than one segment per
RTT; this does not signiﬁcantly change our results.
123nn-1444123nn-1nFigure 5: TCP congestion control state machine of the sender (based on [28]).
that anti-replay mechanism is essential to counter DoS at-
tacks, and we show that protocols that provide only conﬁ-
dentiality and authentication are vulnerable to DoS attacks.
In particular, we focus on IPsec, which is often used to pro-
vide solutions at the channel layer.
IPsec standard, [26],
requires anti-replay mechanism to identify and discard re-
played packets in order to prevent DoS attacks, e.g., [43],
claim that the reason for anti-replay mechanism is to save
CPU cycles which will be wasted on replayed packets, as
well as to prevent incorrect billing information. Yet to ob-
tain access to a service or resource, attacker will have to
obtain secret keys used to encrypt (and possibly authen-
ticate) the communication, and it will not gain much by
merely replaying already sent messages. In addition, typ-
ically, replay-sensitive applications check for freshness of
messages and discard (or ignore) replayed messages. We
present an additional motivation for IPsec anti-replay win-
dow; more speciﬁcally, we show that without the anti-replay
window, (ampliﬁcation) degradation of service attacks on
congestion control of TCP can be launched with signiﬁ-
cant performance damages.
In what follows we describe
the attacks that could be launched if no anti-replay mecha-
nism were used. These attacks require merely a duplicating
stealth attacker (see Figure 2).
3.1. ACK Duplication Attack: Stealth DoS on
Channel without Anti-Replay Mechanism
Client behind GW 1 requests to download a ﬁle from
server behind GW 2, as in Figure 1. The attack is presented
in Figure 6. The main idea of the attack is to duplicate a
legitimate ACK sent by the client in response to some seg-
ment, and retransmit three duplicate copies of that ACK.
TCP considers the receipt of three duplicate ACKs as an
indication of lost segment, which in turn can be a sign of
congestion (see Figure 5). As a result, TCP at the sender
halves its congestion-control window. Furthermore, if prior
to the attack TCP connection were in ‘slow start’ phase
(where the congestion window grows exponentially), TCP
also moves to the linearly-growing ‘congestion avoidance’
(CA) mode, thus prematurely aborting the slow-start phase.
As a result, connection uses a small congestion window,
which results in severe bandwidth underutilisation. By re-
peating this attack periodically, attacker can ensure that the
connection continuously uses very small, suboptimal win-
dow. In Figure 6 we present an attack on a TCP connec-
tion in CA mode. For simplicity assume that the congestion
window at the beginning of ﬁrst attack epoch at time t0 is
cwnd(t0) > 4 ∗ M SS. Since this is the ﬁrst attack, ad-
versary did not inject any duplicate packets in the interval
(t0−T, t0) (and hence can send three packets at any interval
beginning from t0). Assume that the server sends a window
of k + 1 segments i, ..., i + k, and the client upon receipt,
transmits k + 1 ACKs such that ACK on segment i + k is
Slow startCongestion avoidanceFast recovery(1.e) dupACKcnt==3thresh = cwnd/2cwnd   = thresh+3retransmit missing segment(1.d) timeoutssthresh  = cwnd/2cwnd      = 1MSSdupACKcnt = 0retransmit missing segment(3.b) timeoutthresh    = cwnd/2cwnd      = 1dupACKcnt = 0 retransmit missing segment(3.c) new ACKcwnd      = threshdupACKcnt = 0(2.c) timeoutthresh    = cwnd/2cwnd      = 1MSSdupACKcnt = 0retransmit missing segment(3.a) duplicate ACKcwnd=cwnd+MSSSend (cwnd-unACKed) new bytes(2.d) dupACKcnt==3thresh = cwnd/2cwnd   = thresh+3retransmit missing segment(2.b) duplicate ACKdupACKcnt++(1.f) cwnd ≥ threshᴧ(2.a) new ACKcwnd      = cwnd+MSS(MSS/cwnd)dupACKcnt = 0Send (cwnd-unACKed) new bytes(1.b) new ACKcwnd      = cwnd+MSSdupACKcnt = 0Send (cwnd-unACKed) new bytes(1.c) duplicate ACKdupACKcnt++(1.a)  ᴧcwnd     = 1MSSThresh   = 64KBdupACKcnt= 0Figure 6: ACK duplication attack on TCP congestion control mechanism when no IPsec anti-replay window is employed (Section 3.1).
The attacker duplicates a legitimate ACK segment (sent by the client to the server in response to receipt of a data segment) and sends three
duplicate copies of that ACK to the server. The server takes the three duplicate ACKs as an indication of network congestion, retransmits
‘missing segment’ and reduces its sending rate.
last in the window. The attack begins when the attacker cre-
ates three duplicate copies of last ACK (for segment i + k)
sent by the receiver in recently transmitted window of ACK
segments. At time t0 (in Figure 6) the server receives three
duplicate ACK copies injected by the attacker. Since we ig-
nore transmission delays, three duplicate ACKs arrive at the
same time, with no other ACK segment arriving between
the most recently transmitted legitimate ACK and the re-
ceipt of three duplicates of that ACK, that were injected by
the attacker. This deceives the server into believing that the
three duplicate ACKs are transmitted as a result of a lost
segment in last transmitted window of segments. Receipt
of three consecutive ACKs for segment i + k is taken as
an indication of congestion which resulted in loss of seg-
ment i + k. As a result, once the server receives three con-
secutive duplicate ACKs, (according to step (2.d) in Figure
5, if the TCP at the sender is in CA, or step (1.e) if the
TCP is in slow-start) it performs fast retransmit of the seg-
ment which it believes to have been lost (step (2.d), Fig-
ure 5), i.e., transmits the ‘lost’ segment for which duplicate