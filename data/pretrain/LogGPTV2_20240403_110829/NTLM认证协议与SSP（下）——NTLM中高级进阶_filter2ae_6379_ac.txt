**密钥交换（Key exchange）**
如果设置了”Negotiate Key exchange”Flags，则客户端将使用新的Master Key（使用先前选择的Master
Key进行RC4加密）填充Type 3消息中的”Session Key”字段。服务器将解密该值以接收新的Master Key。
例如，假定客户端选择随机Master Key” 0xf0f0aabb00112233445566778899aabb
“。客户端将使用先前Negotiate的Master Key（” 0x3f373ea8e4af954f14faa506f8eebdc4
“）做为Key使用RC4加密此随机Master Key，以获取该值：
0x1d3355eb71c82850a9a2d65c2952e6f3
它在Type 3消息的”Session Key”字段中发送到服务器。服务器RC4-使用旧的Master Key对该值解密，以恢复客户端选择的新的Master
Key（” 0xf0f0aabb00112233445566778899aabb “）。
**弱化Key（Key Weakening）**
最后，关键是要弱化以遵守出口限制。NTLM1支持40位和56位Key。如果设置了” Negotiate 56” NTLMFlags，则128位Master
Key将减弱为56位；如果不设置，它将被削弱到40位。请注意，仅在使用Lan Manager Session Key（设置了”NegotiateLan
ManagerKey”）时，才在NTLM1下采用Key弱化功能。LM和NTLM 的 User Session
Key基于密码散列，而不是响应。给定的密码将始终导致NTLM1下具有相同的用户Session
Key。显然不需要弱化，因为给定用户的密码哈希可以轻松恢复User Session Key。
NTLM1下的Key弱化过程如下：
  * 要生成56位Key，Master Key将被截断为7个字节（56位），并附加字节值” 0xa0 “。
  * 要生成40位Key，Master Key将被截断为5个字节（40位），并附加三个字节的值” 0xe538b0 “。
以Master Key” 0x0102030405060708090a0b0c0d0e0f00 “为例，用于签名和Sealing的40位Key为”
0x0102030405e538b0 “。如果Negotiate了56位Key，则最终Key将为” 0x01020304050607a0 “。
###  签名
一旦协商了Key，就可以使用它来生成数字签名，从而提供消息完整性。通过存在”Negotiate Flags” NTLMFlags来指示对签名的支持。
NTLM1签名（由SSPI MakeSignature函数完成）如下：
  1. 使用先前Negotiate的Key初始化RC4密码。只需执行一次（在第一次签名操作之前），并且Key流永远不会重置。
  2. 计算消息的CRC32校验和；它表示为长整数（32位Little-Endian值）。
  3. 获得序列号；它从零开始，并在每条消息签名后递增。该数字表示为长号。
  4. 将四个零字节与CRC32值和序列号连接起来，以获得一个12字节的值（” 0x00000000 “ + CRC32（message）+ sequenceNumber）。
  5. 使用先前初始化的RC4密码对该值进行加密。
  6. 密文结果的前四个字节被伪随机计数器值覆盖（使用的实际值无关紧要）。
  7. 将版本号（” 0x01000000 “）与上一步的结果并置以形成签名。
例如，假设我们使用上一个示例中的40位Key对消息” jCIFS “（十六进制” 0x6a43494653 “）进行签名：
  1. 计算CRC32校验和（使用小端十六进制” 0xa0310宝宝7 “）。
  2. 获得序列号。由于这是我们签名的第一条消息，因此序列号为零（” 0x00000000 “）。
  3. 将四个零字节与CRC32值和序列号连接起来，以获得一个12字节的值（” 0x00000000a0310宝宝700000000 “）。
  4. 使用我们的Key（” 0x0102030405e538b0 “）对这个值进行RC4加密；这将产生密文” 0xecbf1ced397420fe0e5a0f89 “。
  5. 前四个字节被计数器值覆盖；使用” 0x78010900 “给出” 0x78010900397420fe0e5a0f89 “。
  6. 将版本图章与结果连接起来以形成最终签名：  
0x0100000078010900397420fe0e5a0f89
下一条签名的消息将接收序列号1；同样，再次注意，用第一个签名初始化的RC4Key流不会为后续签名重置。
###  Sealing
除了消息完整性之外，还通过Sealing来提供消息机密性。”Negotiate Sealing”
NTLMFlags表示支持Sealing。在具有NTLM提供程序的SSPI下，Sealing总是与签名结合进行（Sealing消息会同时生成签名）。相同的RC4Key流用于签名和Sealing。
NTLM1Sealing（由SSPI EncryptMessage函数完成）如下：
  1. 使用先前Negotiate的Key初始化RC4密码。只需执行一次（在第一次Sealing操作之前），并且Key流永远不会重置。
  2. 使用RC4密码对消息进行加密；这将产生Sealing的密文。
  3. 如前所述，将生成消息的签名，并将其放置在安全尾部缓冲区中。
例如，考虑使用40位Key” 0x0102030405e538b0 “ 对消息” jCIFS “（” 0x6a43494653 “）进行Sealing：
  1. 使用我们的Key（” 0x0102030405e538b0 “）初始化RC4密码。
  2. 我们的消息通过RC4密码传递，并产生密文” 0x86fc55abca “。这是Sealing消息。
  3. 我们计算出消息的CRC32校验和（使用小尾数十六进制” 0xa0310宝宝7 “）。
  4. 获得序列号。由于这是第一个签名，因此序列号为零（” 0x00000000 “）。
  5. 将四个零字节与CRC32值和序列号连接起来，以获得一个12字节的值（” 0x00000000a0310宝宝700000000 “）。
  6. 该值是使用来自密码的Key流进行RC4加密的；这将产生密文” 0x452b490efa3e828bcc8affc3 “。
  7. 前四个字节被计数器值覆盖；使用” 0x78010900 “给出” 0x78010900fa3e828bcc8affc3 “。
  8. 版本标记与结果串联在一起，以形成最终签名，并将其放置在安全尾部缓冲区中：  
0x0100000078010900fa3e828bcc8affc3整个Sealing结构的十六进制转储为：0x86fc55abca0100000078010900fa3e828bcc8affc3
## NTLM2会话安全
NTLM2是更新的签名和Sealing方案，在建立”NegotiateNTLM2Key”Flags时使用。此方案中的Key派生由以下NTLMFlags驱动：
Flags | 说明  
---|---  
Negotiate NTLM2 Key | 表示支持NTLM2会话安全性。  
Negotiate56 | 表示支持56位Key。如果既未指定此Flags也未指定”Negotiate128”，则将使用40位Key。  
Negotiate128 | 表示支持128位Key。如果既未指定此Flags也未指定”Negotiate56”，则将使用40位Key。  
NegotiateKey交换 | 表示将执行Key交换以Negotiate用于签名和Sealing的辅助基本Key。  
###  NTLM2Key派生
NTLM2中的Key派生分为四个步骤：
  1. Master Key Negotiate
  2. Key exchange
  3. Key weakening
  4. Subkey generation
**Master Key Negotiate**
用户Session Key在NTLM2签名和Sealing中始终用作基本Master
Key。使用NTLMv2身份验证时，LMv2或NTLMv2用户Session Key将用作Master
Key。当NTLMv1身份验证与NTLM2会话安全一起使用时，NTLM2会话响应用户Session Key将用作Master
Key。请注意，NTLM2中使用的用户Session Key比NTLM1对应的用户Session Key或Lan Manager Session
Key要强得多，因为它们同时包含服务器质询和client nonce。
**Key交换**
如先前针对NTLM1所讨论的那样执行Key交换。客户端选择一个辅助Master Key，RC4用基本Master Key对其进行加密，然后在Type
3”Session Key”字段中将密文值发送到服务器。这由”Negotiate Key exchange”Flags的存在指示。
**弱化Key**
NTLM2中的Key弱化仅通过将Master Key（或辅助Master Key，如果执行了Key交换）截短到适当的长度即可完成；例如，Master
Key” 0xf0f0aabb00112233445566778899aabb “将减弱为40位，如” 0xf0f0aabb00 “和56位为”
0xf0f0aabb001122 “。请注意，NTLM2支持128位Key。在这种情况下，Master Key直接用于生成子Key（不执行弱化操作）。
仅当生成Sealing子Key时，Master Key才会在NTLM2下减弱。完整的128位Master Key始终用于生成签名Key。
**子项生成**
在NTLM2下，最多可以建立四个子项。Master Key实际上从未用于Signing或Sealing消息。子项生成如下：
  1. 128位（无弱点）Master Key与以空值终止的ASCII常量字符串连接：  
客户端到服务器签名的Session Key魔术常数以十六进制表示，此常数是：0x73657373696f6e206b657920746f2063  
6c69656e742d746f2d73657276657220  
7369676e696e67206b6579206d616769  
6320636f6e7374616e7400  
上面的换行符仅用于显示目的。将MD5消息摘要算法应用于此算法，从而得到一个16字节的值。这是客户端Signing Key，客户端使用它来为消息创建签名。
  2. 原生的128位Master Key与以空值终止的ASCII常量字符串连接：  
服务器到客户端签名的Session Key魔术常数以十六进制表示，此常数是：0x73657373696f6e206b657920746f2073  
65727665722d746f2d636c69656e7420  
7369676e696e67206b6579206d616769  
6320636f6e7374616e7400  
将使用此内容的MD5摘要，从而获得16字节的服务器Signing Key。服务器使用它来创建消息的签名。
  3. 弱化的Master Key（取决于Negotiate的是40位，56位还是128位加密）与以空值结尾的ASCII常量字符串连接：  
客户端到服务器的Session
KeySealingKey魔术常数以十六进制表示，此常数是：0x73657373696f6e206b657920746f2063  
6c69656e742d746f2d73657276657220  
7365616c696e67206b6579206d616769  
6320636f6e7374616e7400  
使用MD5摘要来获取16字节的客户端Sealing Key。客户端使用它来加密消息。
  4. 弱化的主键与以空值终止的ASCII常量字符串连接：  
服务器到客户端的Session
KeySealingKey魔术常数以十六进制表示，此常数是：0x73657373696f6e206b657920746f2073  
65727665722d746f2d636c69656e7420  
7365616c696e67206b6579206d616769  
6320636f6e7374616e7400  
应用MD5摘要算法，产生16字节的服务器Sealing Key。服务器使用此Key来加密消息。
**签名（Signing）**
签名支持再次由”Negotiate Signing”
NTLMFlags指示。客户端签名是使用客户端签名Key完成的；服务器使用服务器签名Key对消息进行签名。签名Key是从无损的Master