input generator, the accepting probability of A (ACC) is defined as
$← IG;(h1, . . . , hqF ) $← H;(J , σ) $←
the probability that J ≥ 1 in x
A(x, h1, . . . , hqF ).
The forking algorithm ForkA associated with A is a randomized
$←
algorithm that behaves as in Algorithm 2. For FRK = Pr[b = 1 : x
IG;(b, σ , σ ′) $← ForkA(x)], then FRK ≥ ACC · ( ACC
2.3 Generalized Compact Knapsack
Our scheme uses the generalized compact knapsack (GCK) function
family, introduced by Micciancio [44].
− 1
hF
).
qF
Definition 2.2. Existential Unforgeability under Chosen Message
Attack (EU-CMA) [32] (in the random oracle model [8]) is defined in
Definition 2.3 ([44]). For a ring R, and a small integer µ > 1, the
generalized compact knapsack function family is the set of functions
3
Algorithm 2 Forking algorithm ForkA for the forking lemma.
1: Pick coins ρ for A at random.
2: (h1, . . . , hqF ) $← H
3: (I , σ) ← A(x, h1, . . . , hqF
; ρ)
4: If I = 0 then return (0, 0, 0)
qF ) $← H
5: (h′
6: (I′, σ ′) ← A(x, h1, . . . , hI−1, h′
7: If (I = I′ and hI (cid:44) h′
8: Else, return (0, 0, 0)
I , . . . , h′
qF
, return (1, σ , σ ′)
1, . . . , h′
; ρ)
I
of the form FA : Rµ → R, where:
FA(b1, . . . , bµ) =
µ
i =1
bi · ai
An instance of this family is specified by µ fixed elements A =
(a1, . . . , aµ) ∈ Rµ . These elements are to be chosen randomly and
independently. The inputs b1, . . . , bµ are polynomials over R where
∥bi ∥∞ ≤ β for i ∈ {1, . . . , µ} and some positive integer β.
For the detailed security analysis of GCK function, we refer an
interested reader to [40, 44, 45, 48]. We give the required parameters
to securely instantiate GCK function in TACHYON in Subsection 4.1.
2.4 Bos-Chaum signatures
Since TACHYON is inspired by the construction of Bos and Chaum
(BC) signature scheme which uses a bijective function S(·) and
a one-way function (OWF) f (·) [13], we briefly explain about a
simple generalization of their construction in the following.
BC = (Kg,Sig,Ver) defined as follow.
Definition 2.4. BC signature scheme consists of three algorithms
- (sk, PK) ← BC.Kg(1κ) Given the security parameter 1κ it
sets t, k and l and generate t random l−bit values for the
private key (x1, . . . , xk) and compute the public key com-
ponents (yi) as the image of the private key components xi
with respect to a one-way function f (·), i.e., yi ← f (xi)
where i ∈ {1, . . . , t}. Finally set sk ← (x1, . . . , xt) and
PK ← (t, k, ⟨y1, . . . , yt⟩).
- σ ← BC.Sig(M, sk): Given a b-bit message M and sk, inter-
pret M as an integer between 0 and 2b − 1 and set (i1 . . . , ik)
as the M−th k−element subset of set (1, 2, . . . , t), computed
as S(M). Output the signature as σ ← (xi1 , . . . , xik ).
– {0, 1} ← BC.Ver(M, σ , PK): Given a message-signature pair
(M, σ = ⟨x′
k⟩), interpret M as an integer between
0 and 2b −1 and set (i1 . . . , ik) as the M−th k−element subset
of set (1, 2, . . . , t), computed as S(M). It the checks if {yij
f (x′
j =1 holds, it outputs 1, else it outputs 0.
2, . . . , x′
j)}j=k
1, x′
=
3 PROPOSED SCHEME
3.1 TACHYON
Our conceptual starting point is the HORS construction [51], which
itself is a variant of the Bos and Chaum scheme [13]. The private
key consists of many random values xi, and the public key consists
of corresponding images yi = F(xi), where F is a one-way function.
4
,
.
j xij
j xij
j yij
Of course, the xi values can be derived from a small seed using a
PRF (this feature is preserved by TACHYON, and leads to a minimal
signing key). To sign a message M, the signer first computes H2(M)
and interprets it as a sequence of indices (i1, . . . , ik). The signature
then consists of xi1 , . . . , xik
. To verify, one can simply compare
F(xj) to the public key value yj, for each relevant j.
Our novel departure from this paradigm is to use an additively
homomorphic OWF F. Specifically, we choose the generalized
compact knapsack (GCK) function family of Micciancio [44]. This al-
lows the signature to be compressed, as follows. Instead of xi1 , . . . , xik
. The verifier can then
the signature can contain only s =
check that F(s) =
signature consists of s =
tion. This makes it challenging to mask the sensitive sum

However, this approach leaks a linear combination of the secret
key material. After a moderate number of signatures, it would be
possible to solve for the entire secret key via a system of linear
equations. To thwart this, we add some “noise”. Specifically, the
+ r′ for a suitably distributed r′.
There are two challenges when adding this noise. First, we must
make sure the verifier can still verify such a signature. This can be
achieved by giving out F(r′) in the signature. Since the output of F
is long, we instead give out a short hash H1(F(r′)).
Second, the GCK-OWF is defined over some ring but can only
accept inputs that are “short” — i.e., the inputs come from a sub-
set of the ring that are not closed under the homomorphic opera-
.
j xij
We use the following rejection-sampling approach proposed by
Lyubashevsky [37]. Sample the noise r′ from a suitable uniform
distribution, and restart the entire signing algorithm if the result
+ r′ is “too large” or “too small”. More details about this
j xij
rejection sampling process are given in Subsection 3.2.
Finally, instead of choosing indices i1, . . . , ik as H2(M) as in
HORS, we choose them as H2(M∥h) where h = H1(F(r′)). Intu-
itively, this ensures that the value r′ is “committed” before the rest
of the signature is generated. This aspect of the scheme is used in
the security proof, specifically in our use of the generalized forking
lemma (Lemma 2.1). The rewinding argument of the forking lemma
implies that any adversary generating a forgery in our scheme can
be rewound to output two forgeries with the same h. From these
two forgeries, we can break the one-wayness of F.
in Algorithm 3.
Details. The formal description of the TACHYON scheme is given
FA refers to the GCK one-way function discussed in Subsec-
tion 2.3. Its input is a vector from Rµ and its output is a vector
in R, where R is a suitable ring and µ is a small integer. The GCK
function is parameterized by a public value A, which is to be cho-
sen randomly. The random choice of A ensures the one-wayness
of FA [37, 44]. As such, it may be a global parameter (i.e., shared
among all users).
Samp(γ) samples a uniform distribution over vectors in Rµ with
all entries in the range [−γ , γ]. This function can easily be imple-
mented with a PRF or PRG, similar to other lattice-based construc-
tions that uses uniform sampling (e.g., Dilithium [20]).
PRF refers to a pseudorandom function whose output is inter-
preted as a binary (0/1) vector of Rµ (i.e., an input to FA).
ξ and ρ are parameters related to both the security of the GCK-
OWF (controlling the weight of its inputs) as well as the probabili-
ties surrounding rejection sampling (discussed further in Subsec-
tion 3.2).
H1 is a random oracle with output length l1, used to commit the
signature to r′ before choosing the HORS indices. H2 is a random
oracle with output length l2 = k|t| used to choose HORS indices.
We write ⟨i1∥ · · · ∥ik⟩ ← H2(M∥h) to mean that the output of H2
is interpreted as a sequence of k indices, each |t| bits long.
Algorithm 3 TACHYON signature scheme
TACHYON.Kg(1κ):
$← {0, 1}κ
1: sk
2: xi ← PRF(sk, i), for i = 1, . . . , t
3: yi ← FA(xi), for i = 1, . . . , t
4: return sk, PK ← (t, k, ⟨y1, . . . , yt⟩)
TACHYON.Sig(M, sk):
1: r′ $← Samp(ξ − 1), r ← FA(r′)
2: h ← H1(r)
3: ⟨i1∥ · · · ∥ik⟩ ← H2(M∥h)
4: xij ← PRF(sk, ij), for j = 1, . . . , k
j=1 xij) + r′
6: if ∥s∥∞ ≥ (ξ − ρ) then goto step 1
7: return σ ← (s, h)
5: s ← (k
TACHYON.Ver(M, σ , PK):
4: ˜r ← FA(s) −k
1: parse σ as (s, h), and PK as (t, k, ⟨y1, . . . , yt⟩)
2: if ∥s∥∞ ≥ (ξ − ρ) then return 0
3: ⟨i1∥ · · · ∥ik⟩ ← H2(M∥h)
5: if H1(˜r) = h then return 1 else return 0.
j=1 yij
Correctness: TACHYON algorithm is correct in the sense that a
signature generated via TACHYON.Sig(·) will always be verified by
TACHYON.Ver(·). This can be shown as follows:
Given a message-signature pair (M, σ = ⟨s, h⟩), due to the deter-
ministic property of the hash oracle H2(·) the indexes created in
TACHYON.Sig(·) by computing ⟨i1∥ · · · ∥ik⟩ ← H2(M∥h) are identi-
cal to those created in TACHYON.Ver(·). Therefore, given the public
key PK ← (t, k, ⟨y1, . . . , yt⟩),
FA(s) − k
yij
j=1
xij) + r′) − k
xij) + FA(r′) − k
j=1
yij
= FA(( k
= FA( k
j=1
j =1
= FA(r′)
FA(xij)
j=1
Therefore, for a valid message-signature pair (M, σ = ⟨s, h⟩), Step
5 in Algorithm 3 will always return 1.
5
our scheme, we need to mask the summation of secret keys (
summation is hidden. However, the verifier must use s =
3.2 Rejection Sampling
The idea of rejection sampling in lattices was first proposed by
Lyubashevsky [37] in the construction of identification schemes. In
)
j xij
with a random r′. If r′ is uniform over the entire ring (on which
the summation is defined), then clearly all information about the
+r′
as input to FA, which is only possible if s is small. Hence, r′ must
be chosen from some bounded distribution. We now discuss how
that distribution is determined.
The xi vectors are chosen with coefficients from {0, 1}. One can
easily compute a bound ρ such that
Pr(cid:2)for all subsets S with |S| ≤ k: ∥
i∈S xi ∥∞ < ρ(cid:3)
j xij
j xij
j xij
is in the range a ∈ [−(ρ − 1), ρ − 1].
coefficient a of
[−(ξ − 1), ξ − 1] and set s =
is very high, over the choice of the xi values. The rest of the analysis
conditions on this highly likely event, and we assume that each
Now we choose r′ uniformly with each coefficient in the range
+ r′. This causes each coefficient
of s to be uniform in a range [a − (ξ − 1), a + ξ − 1] for some a ∈
[−(ρ−1), ρ−1], which depends on the signing key. No matter what a
is, the range[a−(ξ−1), a+ξ−1] always contains[−(ξ−ρ−1), ξ−ρ−1]
as a subrange. Therefore if we condition on all coefficients falling
in this subrange, the resulting value is uniform and independent
of the signing key. We can achieve this conditioning by rejection
sampling, and simply retrying if ∥s∥ ≥ ξ − ρ.
The parameter ξ must be chosen carefully, since larger ξ leads to
larger signatures, but smaller ξ leads to more failures/retries during
rejection sampling. We can compute the probability of rejection
by considering each component of s in isolation. The coefficient is
chosen uniformly from some range [a−(ξ −1), a + ξ −1], which has
2ξ−1 values. The “permissible” outcomes are[−(ξ−ρ−1), ξ−ρ−1], a
range of 2(ξ−ρ)−1 values. Hence the probability that this coefficient
is permissible is 2(ξ−ρ)−1
2ξ−1. With µN coefficients in s,
2ξ−1
the sampling success probability is therefore
= 1 − 2ρ
(cid:18)
1 − 2ρ
2ξ − 1
(cid:19) µ N ≈ e−N µ ρ/ξ
3.3 Comparison with the Existing Designs
While the approach in obtaining TACHYON is completely different,
one can see that TACHYON construction is similar to the line of
schemes proposed following the work in [39]. More specifically,
the scheme in [39], and all the following works (e.g., [5, 20, 27]),
are based on the Fiat-Shamir transform (along with a rejection
sampling) while in TACHYON, the goal is to efficiently achieve a
(polynomially-bounded) multiple-time signature from the one-time
scheme proposed in [13]. Here, we highlight a few differences of
TACHYON with the schemes proposed in this line of work.
The user’s public key in [39] consists of a matrix A. To avoid a
larger public key size in [20], this matrix is deterministically regen-
erated during the signature generation and verification algorithms.
In TACHYON this is avoided since this matrix is treated as a system
wide parameter relating to the specification of the one-way function
(i.e., GCK) and it is not user specific. Next, the message encoding
in TACHYON results in a selection of k vectors to be added, however
in [39] this increases to the selection of lc vectors, where lc is the
domain of the hash function in [20, 39]. Moreover, the challenge in
[20, 39] has coefficients in {−1, 0, 1} while in TACHYON, similar to
conventional hash functions, the output of the hash function has
coefficients in {0, 1}. There has been a number of follow up works
(e.g., [5, 20, 27] ) which significantly improved the efficiency and
storage of the original scheme proposed in [39]. Therefore, we note
that the attempts to further improve TACHYON should consider all
the prior works following [39].
4 SECURITY ANALYSIS
In the random oracle model [8], we prove that TACHYON is EU-CMA
in Theorem 4.1 below. Note that in our proof, we ignore terms that
are negligible in terms of our security parameter.
Theorem 4.1. In the random oracle model, if there exists an ad-
versary A that can (tA, qS , qH , ϵA)-break the EU-CMA security of
TACHYON, then one can build another algorithm B, that can break the
one-wayness of the GCK function family (as defined in Definition 2.3)
with success probability of at least
(cid:19)(cid:18) ϵA
(cid:20)(cid:18)
ϵA − qH(qS + qH)
O(cid:0)2tA + t(tRNG + tFA) + qS(2tRNG + tFA
and running in time at most
1
t
2l1