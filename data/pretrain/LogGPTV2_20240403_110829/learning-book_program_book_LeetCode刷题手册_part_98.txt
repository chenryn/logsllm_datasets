dfsBuildPreorderTree(s, &index, &level, cur)
return root.Right
func dfsBuildPreorderTree(S string, index, level *int, cur *TreeNode)
(newIndex *int){
if *index ==len(s){
return index
F
if *index == 0 && *level == 0{
i := 0
for i =*index;i 8 for one move to finish the game.
Or, we can move 9 -> 5, 4 -> 6 for two moves to finish the game.
Example 2:
Input: [6,5,4,3,10]
output: [2,3]
we can move 3 -> 8 then 10 -> 7 to finish the game.
Or, we can move 3 -> 7, 4 -> 8, 5 -> 9 to finish the game.
Notice we cannot move 10 -> 2 to finish the game, because that would be an
i1legal move.
Example 3:
Input: [100, 101,104 ,102,103]
output: [0,0]
Note:
1.3 =n 的边界点，肯定再
也找不到了。
代码
---
## Page 997
package leetcode
import (
"math"
"sort"
func numMovesStonesII(stones []int) []int {
if len(stones) == 0{
return []int{0, 0}
sort.Ints(stones)
n := len(stones)
maxStep, minStep, left, right := max(stones[n-1]-stones[1]-n+2, stones[n-2]-
stones[0]-n+2), math.MaxInt64, 0, 0
for left = n{
right--
if right-left+] == n-1 && stones[right]-stones[left]+] == n-1 {
minStep = min(minStep, 2)
}else {
minStep = min(minStep, n-(right-1eft+1))
if right == n-1 && stones[right]-stones[1eft] 0 && stack[len(stack)-1] != s {
stack = append(stack, s)
}else{
stack = stack[:len(stack)-1]
return string(stack)
---
## Page 999
1049.LastStoneWeightll
题目
We have a collection of rocks, each rock has a positive integer weight.
Each turn, we choose any two rocks and smash them together. Suppose the stones have
weights x and y with × = stones[i]; j-- {
dp[j] = max(dp[j], dp[j=stones[i]]+stones[i])
return sum - 2*dp[c]
1051.HeightChecker
题目
Students are asked to stand in non-decreasing order of heights for an annual photo.
Return the minimum number of students that must move in order for allstudents to be standing
in non-decreasing order of height.
aamaq Aem alqissod Aue ul apoau ueo au paalas s squapns jo dnoi e uaum jeu arlno
themselves and the non selected students remain on their seats.
---
## Page 1001
Example 1:
Input: heights = [1,1,4,2,1,3]
Output: 3
Explanation:
Current array : [1,1,4,2,1,3]
Target array : [1,1,1,2,3,4]
On index 2 (0-based) we have 4 vs 1 so we have to move this student.