title:A Comparative Study of Android and iOS for Accessing Internet Streaming
Services
author:Yao Liu and
Fei Li and
Lei Guo and
Bo Shen and
Songqing Chen
A Comparative Study of Android and iOS
for Accessing Internet Streaming Services
Yao Liu1, Fei Li1, Lei Guo2, Bo Shen3, and Songqing Chen1
1 Dept. of Computer Science, George Mason University
{yliud,lifei,sqchen}@cs.gmu.edu
2 Dept. of CSE, Ohio State University
PI:EMAIL
3 Vuclip
PI:EMAIL
Abstract. Android and iOS devices are leading the mobile device market. While
various user experiences have been reported from the general user community
about their differences, such as battery lifetime, display, and touchpad control,
few in-depth reports can be found about their comparative performance when
receiving the increasingly popular Internet streaming services.
Today, video trafﬁc starts to dominate the Internet mobile data trafﬁc. In this
work, focusing on Internet streaming accesses, we set to analyze and compare
the performance when Android and iOS devices are accessing Internet streaming
services. Starting from the analysis of a server-side workload collected from a
top mobile streaming service provider, we ﬁnd Android and iOS use different ap-
proaches to request media content, leading to different amounts of received trafﬁc
on Android and iOS devices when a same video clip is accessed. Further studies
on the client side show that different data requesting approaches (standard HTTP
request vs. HTTP range request) and different buffer management methods (static
vs. dynamic) are used in Android and iOS mediaplayers, and their interplay has
led to our observations. Our empirical results and analysis provide some insights
for the current Android and iOS users, streaming service providers, and mobile
mediaplayer developers.
1 Introduction
Mobile devices are gaining increasing popularity among common users. While the
market competition between different devices has been intense, iOS devices (such as
iPhone, iPad, and iPod Touch) and Android devices (such as Galaxy Nexus, Motorola
Droid, and Kindle Fire) are most popular today. It is reported that iOS and Android
devices comprise more than 79% of all existing mobile devices [1].
Today more and more mobile users use their devices for Internet streaming accesses.
While various streaming protocols are supported, Pseudo Streaming [2] is the most
popular among mobile devices. Both iOS and Android have native support for Pseudo
Streaming from the very beginning. YouTube [3], Dailymotion [4], and Veoh [5] all
support Pseudo Streaming for mobile devices to access their video content.
As streaming accesses typically involve a large amount of data transferring in a con-
tinuous fashion for a relatively long duration, two aspects are of particular concerns to a
mobile device user. The ﬁrst is about the battery power consumption. Today the limited
M. Roughan and R. Chang (Eds.) PAM 2013, LNCS 7799, pp. 104–114, 2013.
© Springer-Verlag Berlin Heidelberg 2013
A Comparative Study of Android and iOS
105
battery power supply is still the Achilles’ heel of all mobile devices, and a breakthrough
of the battery technology is still not on the horizon yet. On the other hand, for most com-
mon mobile users, their mobile trafﬁc amount is closely related to the monetary cost that
they need to pay to the cellular service provider. Streaming accesses often involve bulk
data transmission, resulting in more trafﬁc than other routine activities. Thus it is of a
user’s greatest interest if a less amount of trafﬁc is delivered while the service quality
remains unchanged.
In this work, focusing on Internet streaming accesses, we set to analyze and compare
the performance when Android and iOS devices are accessing Internet streaming ser-
vices. We start with the analysis of a server-side workload collected from a top mobile
streaming service provider. In this workload, about 26,713,708 HTTP requests were
observed to access 15,725 video clips in 28 days, generating a total of 27.4 TB video
trafﬁc. Analyzing this workload, we ﬁnd that Android and iOS devices use different
approaches to request media content, leading to a different amount of received trafﬁc
on Android and iOS devices when a same video clip is accessed.
To ﬁgure out the underlying causes, we further conduct client-side experiments with
the state-of-the-art iOS and Android devices. Through extensive experiments and by
delving into the source code of the Android mediaplayer, we ﬁnd that the current
Android and iOS mediaplayers employ different data requesting approaches (standard
HTTP request vs. HTTP range request) and different playout buffer management meth-
ods (static vs. dynamic). These contrasting approaches and methods lead to a signiﬁcant
amount of redundant trafﬁc received on iOS devices but not on Android devices. Intu-
itively, this causes more battery power consumption on iOS devices and potentially
results in more monetary cost to iOS users.
Our study provides some insights for common users when they access online stream-
ing services. In addition, our experiments and analysis show that different mediaplayer
frameworks have been used in Android and iOS with different media content requesting
approaches and playout buffer management methods. These insights can help the future
mediaplayer development as well as streaming service providers. The client-side trace
is available for download at [6].
2 Server-Side Observations
The server log we have collected is from a top mobile streaming video site, Vuclip,
which serves worldwide mobile users. The workload is collected from Feb 1st to Feb
28th, 2011. In this workload, about 26,713,708 HTTP requests are observed to access
15,725 video clips in 28 days, generating a total of 27.4 TB video trafﬁc.
Vuclip supports both iOS and Android. Users can install an application [7] on their
mobile devices from iOS AppStore or Google Play. The application provides the same
user interface to both iOS and Android users, and allows them to access the same pool
of videos via WiFi or cellular connections. Thus, it provides a good base for our study.
Vuclip allows users to watch videos on their mobile devices using Pseudo Streaming.
With Pseudo Streaming, a client can download the video ﬁle via HTTP requests, and
can start video playback without waiting for the ﬁle being completely downloaded. It
can also support a user’s request to jump to a certain position for playback by down-
loading the desired part of the ﬁle directly via HTTP range requests – HTTP requests
106
Y. Liu et al.
with properly speciﬁed range headers. In order to provision for the variance of network
speed during playback, Pseudo Streaming usually requires a buffer, often referred to as
playout buffer, on the client side to store video data to be played. Typically, download-
ing should be faster than the playback for good user experience, and it is very common
that the entire video ﬁle has been downloaded while the playback just proceeds to an
earlier part of the video.
We use
the User-Agent
string to exam-
ine whether a request comes
from an iOS
device or an Android device. For example,
when sending HTTP requests, iOS devices use
AppleCoreMedia/1.0.0 for its User-Agent
string, while Android devices identify themselves
with stagefright/1.x (Linux;Android
x.x.x). In the workload, we extract 397,940
unique video sessions from iOS devices and
884,648 unique video sessions from Android de-
vices. Each session may consist of multiple HTTP
requests. In these sessions, the users do not neces-
sarily watch the entire video from the beginning to
the end. Users may ﬁnd the video uninteresting, and
terminate the playback in the middle.
(cid:20)(cid:17)(cid:19)
(cid:81)
(cid:82)
(cid:76)
(cid:87)
(cid:70)
(cid:68)
(cid:85)
(cid:41)
(cid:3)
(cid:72)
(cid:89)
(cid:76)
(cid:87)
(cid:68)
(cid:88)
(cid:80)
(cid:88)
(cid:38)
(cid:79)
(cid:19)(cid:17)(cid:27)
(cid:19)(cid:17)(cid:25)
(cid:19)(cid:17)(cid:23)
(cid:19)(cid:17)(cid:21)
(cid:19)(cid:17)(cid:27)
(cid:19)(cid:17)(cid:25)
(cid:19)(cid:17)(cid:23)
(cid:81)
(cid:82)
(cid:76)
(cid:87)
(cid:70)
(cid:68)
(cid:85)
(cid:41)
(cid:3)
(cid:72)
(cid:89)
(cid:76)
(cid:87)
(cid:68)
(cid:88)
(cid:80)
(cid:88)
(cid:38)
(cid:79)
(cid:19)(cid:17)(cid:19)
(cid:19)(cid:17)(cid:19)
(cid:19)(cid:17)(cid:24)
(cid:20)(cid:17)(cid:19)
(cid:20)(cid:17)(cid:24)
(cid:21)(cid:17)(cid:19)
(cid:86)(cid:72)(cid:86)(cid:86)(cid:76)(cid:82)(cid:81)(cid:66)(cid:71)(cid:88)(cid:85)(cid:68)(cid:87)(cid:76)(cid:82)(cid:81)(cid:18)(cid:89)(cid:76)(cid:71)(cid:72)(cid:82)(cid:66)(cid:71)(cid:88)(cid:85)(cid:68)(cid:87)(cid:76)(cid:82)(cid:81)
(cid:76)(cid:50)(cid:54)
(cid:36)(cid:81)(cid:71)(cid:85)(cid:82)(cid:76)(cid:71)
(cid:21)(cid:17)(cid:24)
(cid:22)(cid:17)(cid:19)
Fig. 1. Ratio Between Session Dura-
tion and Video Duration (CDF)
(cid:20)(cid:17)(cid:19)
(cid:19)(cid:17)(cid:21)
Figure 2 shows the distribution of download-
ing session duration for both iOS and Android ac-
cesses1. Note that the downloading session duration
may be shorter than the user’s actual viewing dura-
tion, because in Pseudo Streaming, the download-
ing is often faster than the playback. Comparing the
accesses from iOS with these from Android devices, we ﬁnd that the patterns of session
duration as opposed to the video duration are quite similar (although Android devices
generally have a slightly longer session duration than that of iOS devices). This indi-
cates similar accessing behaviors of Android and iOS devices to this streaming service.
Fig. 2. # of HTTP Requests per Ses-
sion (CDF)
(cid:20)(cid:19)(cid:19) (cid:20)(cid:19)(cid:20) (cid:20)(cid:19)(cid:21) (cid:20)(cid:19)(cid:22) (cid:20)(cid:19)(cid:23) (cid:20)(cid:19)(cid:24)
(cid:6)(cid:3)(cid:82)(cid:73)(cid:3)(cid:53)(cid:72)(cid:84)(cid:88)(cid:72)(cid:86)(cid:87)(cid:86)(cid:3)(cid:83)(cid:72)(cid:85)(cid:3)(cid:54)(cid:72)(cid:86)(cid:86)(cid:76)(cid:82)(cid:81)
(cid:76)(cid:50)(cid:54)
(cid:36)(cid:81)(cid:71)(cid:85)(cid:82)(cid:76)(cid:71)
(cid:19)(cid:17)(cid:19)
More Requests Are Sent Out by iOS Devices. Figure 2 shows the distribution of the #
of HTTP requests that were sent to the server from mobile devices in these sessions. We
ﬁnd that more than 80% of Android sessions consist of only one single HTTP request,
and only less than 2% sessions consist of more than 10 HTTP requests. On the contrary,
iOS devices always send more HTTP requests. The median number is 13 HTTP requests
per iOS session. This is quite surprising because intuitively, only one HTTP request is
needed, which happened to most Android sessions. We are interested in why so many
more HTTP requests have been used in iOS sessions.
Based on the log, we ﬁnd that the MediaPlayer on a mobile device can request the
video ﬁle in two ways: (1) it requests the entire video ﬁle with a standard HTTP request,
and the server responds with HTTP 200 OK, or (2) it requests a portion of the video
ﬁle using an HTTP range request, and the server responds with HTTP 206 Partial
1 iOS and Android accesses (or sessions) refer to accesses (or sessions) originated from an iOS
or Android device. They are used for brevity.
A Comparative Study of Android and iOS
107
Content. Typically an HTTP range request is used when a user wants to skip part
of the video, and jump to the desired content directly. However, in this server log, we
ﬁnd that iOS devices always use HTTP range requests, even for the ﬁrst request. But
Android devices always use standard HTTP requests, and only use HTTP range requests
to fetch desired content directly if the user decides to jump to another part of the video.
Table 1 shows the percentage of different types of HTTP requests that have been used by
iOS and Android devices, respectively. As shown in the table, more than 80% Android
trafﬁc is delivered using standard HTTP responses (200), while almost all iOS trafﬁc is
delivered using HTTP partial content response (206). Note that although the percentage
of HTTP range requests in Android sessions seems also high, it is mainly because once
a user starts to use interactive functions, a sequence of range requests often have to
be used. Nevertheless, over 80% of Android trafﬁc is delivered via standard HTTP
connections.
More Trafﬁc Is Received at iOS Devices. We
further sum up the size of HTTP responses that
belong to the same video session, and examine
if such different content requesting approaches
on Android and iOS devices have any impact on
the trafﬁc delivered to them. Figure 3 shows the
result. As we can observe from this ﬁgure, for
Android devices, about 55% Android sessions
downloaded the same amount of trafﬁc as the
video ﬁle size, and only a very small percentage of
the sessions downloaded more data than the video
ﬁle size. This could be caused by user re-watching
the video. The rest (about 43%) only downloaded
partial video content and terminated earlier.
Table 1. HTTP Request/Reply (Num-
ber and Trafﬁc Amount)
HTTP 200
Name
iOS
Android
#Requests Trafﬁc Amount
0.001%
80.594%
0.01%
27.30%
HTTP 206
Name
iOS
Android
#Requests Trafﬁc Amount
99.999%
19.406%
99.99%
72.70%
(cid:20)(cid:17)(cid:19)
(cid:81)
(cid:82)
(cid:76)
(cid:87)
(cid:70)
(cid:68)
(cid:85)
(cid:41)
(cid:3)
(cid:72)
(cid:89)
(cid:76)
(cid:87)
(cid:68)
(cid:88)
(cid:80)
(cid:88)
(cid:38)
(cid:79)
(cid:19)(cid:17)(cid:27)
(cid:19)(cid:17)(cid:25)
(cid:19)(cid:17)(cid:23)
(cid:19)(cid:17)(cid:21)
On the other hand, for iOS devices, about 72%
iOS sessions terminated earlier before the entire
ﬁle is downloaded. But the most surprising re-
sult is that for about 28% iOS sessions, the down-
loaded trafﬁc is larger than the video ﬁle size. Be-
cause we are comparing the requests of Android
and iOS devices from a same streaming service,
it is reasonable to assume that the users’ interest
and access patterns are similar. Thus, among the 28% sessions that iOS devices down-
loaded more data than the actual video ﬁle size, only a very smaller portion is likely due
to users’ real re-watching activities. We are interested in about 28% iOS sessions that
have received extra trafﬁc (than the actual ﬁle size).
Fig. 3. Ratio Between Received Trafﬁc
and File Size (CDF)
(cid:87)(cid:85)(cid:68)(cid:81)(cid:86)(cid:73)(cid:72)(cid:85)(cid:85)(cid:72)(cid:71)(cid:66)(cid:86)(cid:76)(cid:93)(cid:72)(cid:18)(cid:73)(cid:76)(cid:79)(cid:72)(cid:66)(cid:86)(cid:76)(cid:93)(cid:72)
(cid:76)(cid:50)(cid:54)
(cid:36)(cid:81)(cid:71)(cid:85)(cid:82)(cid:76)(cid:71)
(cid:19)(cid:17)(cid:19)
(cid:19)(cid:17)(cid:19)
(cid:19)(cid:17)(cid:24)
(cid:20)(cid:17)(cid:19)
(cid:20)(cid:17)(cid:24)
(cid:21)(cid:17)(cid:19)
3 Analysis of Android and iOS Mediaplayers
While the server-side workload has provided us a high-level overview of different con-
tent requesting approaches of iOS and Android devices when accessing Internet stream-
ing services as well as different amounts of trafﬁc received, the workload cannot provide
108
Y. Liu et al.
Table 2. Devices Used
Table 3. iOS Devices Accessing a 36.7 MB
YouTube Video
Name
iPod Touch iOS 3.1.2
iPhone 3G iOS 4.2.1
iPhone 3GS iOS 5.0.1
iPhone 4S iOS 5.1
Nexus One Android 2.3.4
Kindle Fire Android 2.3.4
OS version Memory Size
128 MB
128 MB