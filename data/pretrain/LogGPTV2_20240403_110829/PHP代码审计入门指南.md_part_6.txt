会全部出来（x前面操作一大顿毫无卵用
注：有保护方案也使用了call_user_func或call_user_func_array间接调用eval
76
---
## Page 77
dy.pro >www> 
return *2";
A出无柔
Fel
bi1 1414. 199. 109. 10099, 10999. 1009969. 1069699. 500909099. :09069000
see
strrstr = basedecode(“c3kydHI-");
N1", "cnRfn")1
-- = basedecode("xUSDVyFGH1D(CUUFyRkFER4(k=*,*zDIVeyx")
99999999spxu
Marming: Failed loadirg zend extension *zzdecrypt'* (tried: o:\phpstudy_pn
onsphppp7.4.3ntsextpp_zdecrypt.d1（民不到盘实的横块。））in unkn
hp7-4.3nts\extzzdecrypt[线不到指家的模
0 OUTT UO UROL
udy_proy
(a/\tunne1-1-php:491
unza)aTp(c]au
42aktothi5vtcijiroEERykrcx5t1i1xqzhhghizqkPI6aqdrd
fwc+ct13rR9mLz8
93cdda4+6+00
S菜同
ofe spuow 6 pmq on
Optlieni t Aboul / Support
Recipe
Input
+口
II
eodkE0gjAPxsH2]yb4CBeheybaFDEthFCzvxses5kejCfx73dYf.bdBse
29fqLP16c8q]d0G6ic8q5Qfuc+t13rRL28q2/07GLrP05JOF7ELovHo4hc2A
SuRBektgRXgnCbCsl(pxgioKi5HU7i5aPZpK5s42aKIEothi5vEC1ijirTGE[Ry/dinGxSI1gi1Xqrvh1MLBhgh
A·2a-20-9+/=
on-alphabet chars
Zlib Inflate
1I
esize buffer after
 verify result
Output
;7>......inu
成功还原源代码
自动化通用解密
PHP提供了强大的扩展功能可以直接通过编写php扩展hookeval相关函数获取执行的源代码
HOOKphp zend引l擎的zend_compile_stringzend_include_or_eval函数达到目的
77
---
## Page 78
这里演示的是hookzend_compile_string函数
8L
---
## Page 79
C
复制代码
1
/*$Id$ */
2
3 
#include "php.h"
4
#include "ext/standard/info.h"
L^
6
7
8
9
static zend_op_array* (*old_compile_string)(zval *source_string, char
*filename TSRMLS_DC) ;
10
11
1.2
static zend_op_array* evalhook_compile_string(zval *source_string, char
*filename TSRMLS_DC)
13
14
15 
if(strstr(filename, "eval() 'd code")) {
16
17
printf("\n
eval
\n&s\n
eval
n", Z_STRVAL_P(source_string)) ;
18
19
return old_compile_string(source_string, filename TSRMLS_CC);
20
21
22
23
PHP_MINIT_FUNCTION(evalhook)
24 
{
25
return SUCCESS;
26
27
28
PHP_MSHUTDOwN_FUNCTION(eVa Lhook)
29 
30
return SUCCESS;
31
32
33
PHP_RINIT_FUNCTION(evaLhook)
35
old_compile_string = zend_compile_string;
36
zend_compile_string = evalhook_compile_string;
37
return SUCCESS;
38
39
40
PHP_RSHUTDOwN_FUNCTION( eVa Lhook)
41 
{
4 2
zend_compile_string = old_compile_string;
79
---
## Page 80
43
return SUCCESS;
44
1
45
46
PHP_MINFO_FUNCTION(eva Lhook)
47 
48
php_info_print_table_start() ;
49
php_info_print_table_row(2, "eval hooking", "enabled");
50
php_info_print_table_end() ;
51
1
52
53
54 
zend_function_entry evaLhook_functions [] = {
55
ZEND_FE_END
56
};
57
58 
zend_module_entry evaLhook_module_entry = {
59
STANDARD_MODULE_HEADER,
60
"evaLhook",
61
evalhook_functions,
62
PHP_MINIT (eva Lhook) ,
63
PHP_MSHUTDOwN( eVa Lhook),
64
PHP_RINIT(evaLhook),
65
PHP_RSHUTDOwN( evaLhook),
66
PHP_MINFO (eva Lhook) ,
67
"0.0.1-dev",
68
STANDARD_MODULE_PROPERTIES
69
};
70
71
ZEND_GET_MODULE(evalhook)
72
e.j60:166
80
---
## Page 81
成功还原源代码
PHP扩展方案
源代码混淆
使用php扩展的代码混淆和无扩展代码混淆比较相似，只不过是把代码还原过程从php代码转到了php扩
展。
同样是使用aesdes异或等加密方法直接加密php代码，HOOK翻译php的函数在翻译PHP文件前对文件
进行解密操作。这种方案也可以完全还原出源代码。在无其他混淆和压缩时甚至还会保留注释。
典型开源项目：php-beasttonyencscrew-plus
手工解密
这里以beast为例
首先在php的扩展目录下找到beast.so
beast的加密方案会把加密key编译进扩展中.我们只需要寻找key就可以完成解密
beast由于是开源项目.有现成的符号表和源码这使得反编译寻找key变得非常简单，
但这样有点太简单了.所以这里演示的是在没有源码的情况下使用IDA分析解密流程
55%+×94d2 * uX> 00 s
  le ub Io Fe1 ste nar0arStrislspet0
im I Orts Il Ieelerei  Itermal rao E Lains fmctir
 000000000
end conple.S
ire 1el
首先在导入表找到zend_compile_file
这个函数会将php文件翻译成opcode
因此大部分php加密扩展都需要hook这个函数达到拦截php文件载入和替换php文件的功能
81
---
## Page 82
8592008
 let fflush(FILE *strean)
DATAJREF:.eot-plt:off_29M
20CB5E
extrn fflus
COot XREF: _fflushtj
NCB5
: DATA xREF: est:rend_conplle_fle_ptrto
DATA xREF1got.plt1of_DC39Bt
: COot xREF: _php_enror_docnefetj
口
Lne 1 of 1
Help
DATARTF:eot.plt:off
crypt_file_her
DATAXREF:zif_best_Tle
snd_conpile dile_pte
dq offset zerd_o
mpilefile_pt
pile_file_pb
1of2
继续跟入
发现有两个函数
般在这种php加密扩展设计时会对这个函数有两次操作：
个是在启动时hook这个函数，一个是在停止时恢复这个函数。
继续跟入启动hook
118
return -1;
18
else
122
TZT
备份原函数地址
124
syscnf(84):
?
125
 12f
127
1f （v17
vl=v7
0)
128
129
best_npe = viE
138
131
Dend_register_long_conste
oend_register_long_consten
EAST_EICRYPT_TYPE_AES*,
oer):
eturm @;
L3
一种加离方式对应一个整数
137
1.38
else
显然文件处理逻辑在cgi_compile_file内
82
---
## Page 83
zend_op_array *_fastcall cgi_conpil_file(zend_file_hardle *f.。 Int tyee)
const char *filenane; / dI
FILE *v4; // rox
FILE *v5; // rbp
T// EA 
x//fetjug
beast_ops *ops: // [rsp+Bh] [rbp-s2h] BrREF
beast_free_buf_t *free) // rax
 >flleme]
fre_.buf
LL;
=8;
sf ( lv )
gote final;
7  decryt_fillefllenane, v6, ouf, size, &free_buffer, bops))
php_error_docrefe(eLL, ILL, *thds progran vas eopdred, please contact adsindstrator");
retun eLL;
4 f v7 =* -1 1
跟踪文件句柄
decrypt_file函数的参数存在文件句柄所以这个函数应该就是文件解密函数
tin  3ass  (oelsred  Eeterss1 spab1  Ltina fusctite
Ina vier-a 
Feeudocde- FreudscdeE 
Fcsdees Ti  strasta Isas
p] ) 
ncrypt_file_header_length) )
if ( log_normal_file )
70
beast_write_log(beast_log_error_0, "File *Ss* isn*t a encrypted file*, fileran
return -1;
retun -1;
16 - *(DwoRo *)healer[encrypt_file_header_length];
CSOnO]= B[A
17 = *(_DWORD
*)header[encrypt_file_heeder_length + 8];
*J&neadei
[encrypt_file_header_length + 4];
( beast nsx filesize > 0 && v19 > beast nax filesize )
exFFee)  0 B v20 > B) 1 ((v18 6 0xFFee) > (00420 9T)) (9 >TA) =
If ( beast_eax_fllesize > 8 88 vi9 > beast_naox_filesize )
beest_write_log
r_o,
-PHP
return -1;
if ( v20 > e 8& v20  : *aes-algo*
84
---
## Page 85
fastcall aes_encrypt_handler(char
Inbuf,int len, char
outbuf, int *outlen)
int v4; // er13
thar *v5;//r14
char in[16]; // [rsp30h] [rtp-43b] EYREF
1f ( (len & xF) [=  )
- 1en / 16;
v11  16 *
v4 = 1m / 16 + 1;
if ( 5 }
sf (v4>9)
v7 = e;
6 = BLL;
if (vl
v8 - 144L;
W-（vintit)4v5[v];
epy_chk(l, &lsbuf[6],v8, 16LL);
使用了AES128ECB加密模式
直接提取key参数内容
长度刚好16位
828C548
align 10f
e28C554
02MC550
 2Ch, 6Eh, 13h, 58h, 88h, 10h, 0E2h, 0F6h, 1Ch, 0E7h
20C558
db 33h, 55h, 3, 0EFh, 46h, 3Ch
到这一步就成功拿到了加密秘钥
AES Deoypt
SⅡI
[1 06 B2 07 86 04 F8 61 51 3A 48 90 F0 E6 4F EC
D6 8 63 8 BS 1 0B 00 8 [9 30 Y 0 D8 Z6 30
6 88 1E E2 F6 1C E7 33 55 83 EF 46 3C
15 4A
93 CD 4
 89 3+ 82. 60 05
00 32 32 33 60 36 89 22
88 7F
5F 02
F
3S 30 36 13 62 29 09 YB 1 03 [C 65
38 4E E6
B0 C6
12 90
21 DE
EB 87
39 10 08 0A
87 38 8C 43 03 C7 5C 61 50 A8 13 68 09 73 A2 D4
82 6
90 97 47 06 2E 76 8C 63 93 6A E3 F2 C7 F6 87 07
F
9WV tE 39 11 86 3t 6Z 0E ZC 19 SZ 33 v8
43 58
indno
c?php
cal1_user_func(function () {
require_once 1db_ext_root()-
/bin
Idb_1oad_extension(*s1og(s1og°);
使用拿到的KEY就可以解密PHP文件
85
---
## Page 86
自动化通用解密
编写php扩展HOOKzend_compile_file函数
0.2人
l0.tk)0
Licen
php注释和原格式都会保留
注意：这里扩展加载顺序问题建议直接修改php源码
Zendzend_language_scanner.c
ZEND_API zend_op_array *compile_file
opcode
php会将源代码翻译成类似汇编的二进制中间操作码再交给zend引擎执行。
之前的介绍的都是编译之前对php源代码的直接操作。这里是对opcode的操作，跳过翻译过程，直接把
现成的opcode交给zend引擎执行（不同版本PHP引|擎编译出的opcode可能会有兼容性问题）。
这种php代码防护方法只能hookzend_execute拿到opcode。不可能直接得到原本的源码，只能通过
反编译尽可能的还原源代码。
大部分商业php保护方案都使用这种可靠的方案为基础ZendGuard(zend)SourceGuardian（SG）
lonCube (IC) Swoole Compiler
上面的方案有的还对zend引擎进行了魔改，使翻译出的opcode只能在修改后的引擎执行，进一步增强了
安全性。
还原代码
hook zend_execute 拿到opcode
使用对应版本的php操作码反推php代码
太菜子不会反编译）
86
---
## Page 87
附录
PHP扩展编译
Bash
复制代码