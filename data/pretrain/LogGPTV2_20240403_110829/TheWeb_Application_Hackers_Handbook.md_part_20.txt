When you attempt to intercept and modify server responses, you may fi nd
that the relevant message displayed in your proxy looks like this:
HTTP/1.1 304 Not Modified
Date: Wed, 6 Jul 2011 22:40:20 GMT
Etag: “6c7-5fcc0900”
Expires: Thu, 7 Jul 2011 00:40:20 GMT
Cache-Control: max-age=7200
This response arises because the browser already possesses a cached copy
of the resource it requested. When the browser requests a cached resource,
it typically adds two headers to the request — If-Modified-Since and
If-None-Match:
GET /scripts/validate.js HTTP/1.1
Host: wahh-app.com
If-Modified-Since: Sat, 7 Jul 2011 19:48:20 GMT
If-None-Match: “6c7-5fcc0900”
These headers tell the server when the browser last updated its cached copy.
The Etag string, which the server provided with that copy of the resource,
is a kind of serial number that the server assigns to each cacheable resource.
cc0055..iinndddd 112288 88//1199//22001111 1122::0055::4411 PPMM
Stuttard c05.indd V3 - 07/22/2011 Page 129
Chapter 5 n Bypassing Client-Side Controls 129
It updates each time the resource is modifi ed. If the server possesses a newer
version of the resource than the date specifi ed in the If-Modified-Since
header, or if the Etag of the current version matches the one specifi ed in the
If-None-Match header, the server responds with the latest version of the
resource. Otherwise, it returns a 304 response, as shown here, informing the
browser that the resource has not been modifi ed and that the browser should
use its cached copy.
When this occurs, and you need to intercept and modify the resource that
the browser has cached, you can intercept the relevant request and remove
the If-Modified-Since and If-None-Match headers. This causes the server
to respond with the full version of the requested resource. Burp Proxy con-
tains an option to strip these headers from every request, thereby overriding
all cache information sent by the browser.
HACK STEPS
1. Look for form elements containing a maxlength attribute. Submit data
that is longer than this length but that is formatted correctly in other
respects (for example, it is numeric if the application expects a number).
2. If the application accepts the overlong data, you may infer that the client-
side validation is not replicated on the server.
3. Depending on the subsequent processing that the application performs
on the parameter, you may be able to leverage the defects in validation to
exploit other vulnerabilities, such as SQL injection, cross-site scripting, or
buffer overflows.
Script-Based Validation
The input validation mechanisms built into HTML forms themselves are extremely
simple and are insuffi ciently fi ne-grained to perform relevant validation of
many kinds of input. For example, a user registration form might contain fi elds
for name, e-mail address, telephone number, and zip code, all of which expect
different types of input. Therefore, it is common to see customized client-side
input validation implemented within scripts. Consider the following variation
on the original example:
Product: Samsung Multiverse 
Price: 399 
cc0055..iinndddd 112299 88//1199//22001111 1122::0055::4411 PPMM
Stuttard c05.indd V3 - 07/22/2011 Page 130
130 Chapter 5 n Bypassing Client-Side Controls
Quantity:  (Maximum quantity is 50)
function validateForm(theForm)
{
var isInteger = /^\d+$/;
var valid = isInteger.test(quantity) &&
quantity > 0 && quantity 
TRY IT!
http://mdsec.net/shop/139/
The onsubmit attribute of the form tag instructs the browser to execute the
ValidateForm function when the user clicks the Submit button, and to submit
the form only if this function returns true. This mechanism enables the client-
side logic to intercept an attempted form submission, perform customized
validation checks on the user’s input, and decide whether to accept that input.
In the preceding example, the validation is simple; it checks whether the data
entered in the amount fi eld is an integer and is between 1 and 50.
Client-side controls of this kind are usually easy to circumvent. Usually
it is suffi cient to disable JavaScript within the browser. If this is done, the
onsubmit attribute is ignored, and the form is submitted without any custom
validation.
However, disabling JavaScript may break the application if it depends on
client-side scripting for its normal operation (such as constructing parts of the
user interface). A neater approach is to enter a benign (known good) value into
the input fi eld in the browser, intercept the validated submission with your
proxy, and modify the data to your desired value. This is often the easiest and
most elegant way to defeat JavaScript-based validation.
Alternatively, you can intercept the server’s response that contains the
JavaScript validation routine and modify the script to neutralize its effect — in
the previous example, by changing the ValidateForm function to return true
in every case.
cc0055..iinndddd 113300 88//1199//22001111 1122::0055::4422 PPMM
Stuttard c05.indd V3 - 07/22/2011 Page 131
Chapter 5 n Bypassing Client-Side Controls 131
HACK STEPS
1. Identify any cases where client-side JavaScript is used to perform input
validation prior to form submission.
2. Submit data to the server that the validation ordinarily would have
blocked, either by modifying the submission request to inject invalid data
or by modifying the form validation code to neutralize it.
3. As with length restrictions, determine whether the client-side controls are
replicated on the server and, if not, whether this can be exploited for any
malicious purpose.
4. Note that if multiple input fields are subjected to client-side validation
prior to form submission, you need to test each field individually with
invalid data while leaving valid values in all the other fields. If you submit
invalid data in multiple fields simultaneously, the server might stop pro-
cessing the form when it identifies the first invalid field. Therefore, your
testing won’t reach all possible code paths within the application.
NOTE Client-side JavaScript routines to validate user input are common in
web applications, but do not conclude that every such application is vulner-
able. The application is exposed only if client-side validation is not replicated
on the server, and even then only if crafted input that circumvents client-side
validation can be used to cause some undesirable behavior by the application.
In the majority of cases, client-side validation of user input has benefi cial effects
on the application’s performance and the quality of the user experience. For
example, when fi lling out a detailed registration form, an ordinary user might
make various mistakes, such as omitting required fi elds or formatting his tele-
phone number incorrectly. In the absence of client-side validation, correcting
these mistakes may entail several reloads of the page and round-trip messages
to the server. Implementing basic validation checks on the client side makes
the user’s experience much smoother and reduces the load on the server.
Disabled Elements
If an element on an HTML form is fl agged as disabled, it appears on-screen
but is usually grayed out and cannot be edited or used in the way an ordinary
control can be. Also, it is not sent to the server when the form is submitted. For
example, consider the following form:
Product: Blackberry Rude 
Price: 
cc0055..iinndddd 113311 88//1199//22001111 1122::0055::4422 PPMM
Stuttard c05.indd V3 - 07/22/2011 Page 132
132 Chapter 5 n Bypassing Client-Side Controls
Quantity:  (Maximum quantity is 50)
This includes the price of the product as a disabled text fi eld and appears
on-screen as shown in Figure 5-4.
Figure 5-4: A form containing a disabled input field
When this form is submitted, only the quantity parameter is sent to the
server. However, the presence of a disabled fi eld suggests that a price parameter
may originally have been used by the application, perhaps for testing purposes
during development. This parameter would have been submitted to the server
and may have been processed by the application. In this situation, you should
defi nitely test whether the server-side application still processes this parameter.
If it does, seek to exploit this fact.
TRY IT!
http://mdsec.net/shop/104/
HACK STEPS
1. Look for disabled elements within each form of the application. Whenever
you find one, try submitting it to the server along with the form’s other
parameters to determine whether it has any effect.
2. Often, submit elements are flagged as disabled so that buttons appear
as grayed out in contexts when the relevant action is unavailable. You
should always try to submit the names of these elements to determine
whether the application performs a server-side check before attempting
to carry out the requested action.
cc0055..iinndddd 113322 88//1199//22001111 1122::0055::4422 PPMM
Stuttard c05.indd V3 - 07/22/2011 Page 133
Chapter 5 n Bypassing Client-Side Controls 133
3. Note that browsers do not include disabled form elements when forms
are submitted. Therefore, you will not identify these if you simply walk
through the application’s functionality, monitoring the requests issued
by the browser. To identify disabled elements, you need to monitor the
server’s responses or view the page source in your browser.
4. You can use the HTML modification feature in Burp Proxy to automatically
re-enable any disabled fields used within the application.
Capturing User Data: Browser Extensions
Besides HTML forms, the other main method for capturing, validating, and
submitting user data is to use a client-side component that runs in a browser
extension, such as Java or Flash. When fi rst employed in web applications, browser
extensions were often used to perform simple and often cosmetic tasks. Now,
companies are increasingly using browser extensions to create fully functional
client-side components. These run within the browser, across multiple client
platforms, and provide feedback, fl exibility, and handling of a desktop appli-
cation. A side effect is that processing tasks that previously would have taken
place on the server may be offl oaded onto the client for reasons of speed and
user experience. In some cases, such as online trading applications, speed is so
critical that much of the key application logic takes place on the client side. The
application design may deliberately sacrifi ce security in favor of speed, perhaps
in the mistaken belief that traders are trusted users, or that the browser exten-
sion includes its own defenses. Recalling the core security problem discussed
in Chapter 2, and the earlier sections of this chapter, we know that the concept
of a client-side component defending its business logic is impossible.
Browser extensions can capture data in various ways — via input forms
and in some cases by interacting with the client operating system’s fi lesystem
or registry. They can perform arbitrarily complex validation and manipula-
tion of captured data before submission to the server. Furthermore, because
their internal workings are less transparent than HTML forms and JavaScript,
developers are more likely to assume that the validation they perform cannot
be circumvented. For this reason, browser extensions are often a fruitful target
for discovering vulnerabilities within web applications.
A classic example of a browser extension that applies controls on the client
side is a casino component. Given what we have observed about the fallible
nature of client-side controls, the idea of implementing an online gambling
application using a browser extension that runs locally on a potential attacker’s
cc0055..iinndddd 113333 88//1199//22001111 1122::0055::4422 PPMM
Stuttard c05.indd V3 - 07/22/2011 Page 134
134 Chapter 5 n Bypassing Client-Side Controls
machine is intriguing. If any aspect of the game play is controlled within the
client instead of by the server, an attacker could manipulate the game with
precision to improve the odds, change the rules, or alter the scores submitted
to the server. Several kinds of attacks could occur in this scenario:
n The client component could be trusted to maintain the game state. In this
instance, local tampering with the game state would give an attacker an
advantage in the game.
n An attacker could bypass a client-side control and perform an illegal action
designed to give himself an advantage within the game.
n An attacker could fi nd a hidden function, parameter, or resource that,
when invoked, allows illegitimate access to a server-side resource.
n If the game involves any peers, or a house player, the client component
could be receiving and processing information about other players that,
if known, could be used to the attacker’s advantage.
Common Browser Extension Technologies
The browser extension technologies you are most likely to encounter are Java
applets, Flash, and Silverlight. Because these are competing to achieve similar
goals, they have similar properties in their architecture that are relevant to
security:
n They are compiled to an intermediate bytecode.
n They execute within a virtual machine that provides a sandbox environ-
ment for execution.
n They may use remoting frameworks employing serialization to transmit
complex data structures or objects over HTTP.
Java
Java applets run in the Java Virtual Machine (JVM) and are subject to the sand-
boxing applied by the Java Security Policy. Because Java has existed since early
in the web’s history, and because its core concepts have remained relatively
unchanged, a large body of knowledge and tools are available for attacking and
defending Java applets, as described later in this chapter.
Flash
Flash objects run in the Flash virtual machine, and, like Java applets, are sand-
boxed from the host computer. Once used largely as a method of delivering
animated content, Flash has moved on. With newer versions of ActionScript,
cc0055..iinndddd 113344 88//1199//22001111 1122::0055::4422 PPMM
Stuttard c05.indd V3 - 07/22/2011 Page 135
Chapter 5 n Bypassing Client-Side Controls 135
Flash is now squarely billed as capable of delivering full-blown desktop applica-
tions. A key recent change in Flash is ActionScript 3 and its remoting capability
with Action Message Format (AMF) serialization.
Silverlight
Silverlight is Microsoft’s alternative to Flash. It is designed with the similar goal
of enabling rich, desktop-like applications, allowing web applications to provide
a scaled-down .NET experience within the browser, in a sandboxed environment.
Technically, Silverlight applications can be developed in any .NET-compliant
language from C# to Python, although C# is by far the most common.
Approaches to Browser Extensions
You need to employ two broad techniques when targeting applications that use
browser extension components.
First, you can intercept and modify the requests made by the component
and the responses received from the server. In many cases, this is the quickest
and easiest way to start testing the component, but you may encounter several
limitations. The data being transmitted may be obfuscated or encrypted, or may
be serialized using schemes that are specifi c to the technology being used. By
looking only at the traffi c generated by the component, you may overlook some
key functionality or business logic that can be discovered only by analyzing
the component itself. Furthermore, you may encounter obstacles to using your
intercepting proxy in the normal way; however, normally these can be circum-
vented with some careful confi guration, as described later in this chapter.
Second, you can target the component itself directly and attempt to decom-
pile its bytecode to view the original source, or interact dynamically with the
component using a debugger. This approach has the advantage that, if done
thoroughly, you identify all the functionality that the component supports or
references. It also allows you to modify key data submitted in requests to the
server, regardless of any obfuscation or encryption mechanisms used for data
in transit. A disadvantage of this approach is that it can be time-consuming
and may require detailed understanding of the technologies and programming
languages used within the component.
In many cases, a combination of both these techniques is appropriate. The
following sections look at each one in more detail.
Intercepting Traffi c from Browser Extensions
If your browser is already confi gured to use an intercepting proxy, and the
application loads a client component using a browser extension, you may see
requests from this component passing through your proxy. In some cases, you
cc0055..iinndddd 113355 88//1199//22001111 1122::0055::4422 PPMM
Stuttard c05.indd V3 - 07/22/2011 Page 136
136 Chapter 5 n Bypassing Client-Side Controls
don’t need to do anything more to begin testing the relevant functionality,
because you can intercept and modify the component’s requests in the usual way.
In the context of bypassing client-side input validation that is implemented in
a browser extension, if the component submits the validated data to the server
transparently, this data can be modifi ed using an intercepting proxy in the same
way as already described for HTML form data. For example, a browser exten-
sion supporting an authentication mechanism might capture user credentials,
perform some validation on these, and submit the values to the server as plain-
text parameters within the request. The validation can be circumvented easily
without performing any analysis or attack on the component itself.
In other cases, you may encounter various obstacles that make your testing
diffi cult, as described in the following sections.
Handling Serialized Data
Applications may serialize data or objects before transmitting them within HTTP