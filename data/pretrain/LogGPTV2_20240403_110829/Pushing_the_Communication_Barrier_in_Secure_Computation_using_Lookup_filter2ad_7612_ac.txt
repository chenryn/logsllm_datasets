i ),
i )j ⊕ G(k1
qi =
i ),
1
Overall, this enables us to further reduce the communication
(cid:1) OT by log2 N bits. Furthermore, this can be combined
(cid:1) R-OT to further reduce the communication overhead.
for(cid:0)N
with(cid:0)N
1
1
D. Pipelined AES-256
1
1
In OT extension [IKNP03], [KK13], both parties process
several value tuples that are correlated by a constant XOR off-
set using a correlation-robust function (CRF ) (cf. H in Step 5
and Step 6 in Prot. 1). While the CRF has traditionally
been instantiated with a hash function, more efﬁcient AES-
based constructions have been used to replace it [KSS12],
[BHKR13], [GLNP15]. When using the most efﬁcient, ﬁxed-
key AES instantiation [BHKR13], the input is restricted to
the block-length of AES, i.e., 128-bit, which sufﬁces for the
to process codewords of size ρ > 128 bits for N > 2,
which prevents the use of ﬁxed-key AES. Falling back to a
hash function or AES-256 with key schedule [KSS12] greatly
decreases performance by about an order of magnitude, as
(cid:0)2
(cid:1) OT extension protocol of [IKNP03] when κ = 128-
(cid:1) OT extension of [KK13], we need
bit. However, in the (cid:0)N
(cid:1) OT protocol requires
depicted in Tab. II. Furthermore, the(cid:0)N
(cid:1) OT. In particular, for our protocols in §IV
when using (cid:0)2
using (cid:0)N
(cid:1) OT compared to 16 invocations when using (cid:0)2
(cid:1)
OT. Using AES-256 with key schedule instantiation for (cid:0)N
(cid:1)
(cid:1) OT, this results in a computational overhead of 480x.
(cid:0)2
N invocations of an expensive CRF (instantiated via AES-
256 with key schedule or SHA-256) as opposed to 2 log N
invocations of a cheaper CRF (instantiated via AES-128)
we use N = 256, which requires 256 CRF invocations when
OT and the pipelined AES-128 instantiation of [GLNP15] for
1
1
1
1
1
1
Primitive
AES-128 [BHKR13]
AES-128+KS [GLNP15]
AES-256+KS [KSS12]
SHA-256
Width
128
128
256
arbitrary
Time [ms]
Pipe-Time [ms]
158
1,460
1,625
2,487
54
358
476
-
TABLE II.
INSTANTIATIONS OF A CORRELATION-ROBUST FUNCTION
WITH INPUT WIDTH IN BITS AND (PIPELINED) RUN-TIME FOR 107
INVOCATIONS.
1
1
1
(cid:1) OT107
(cid:1) OT to 140x.
We improve the performance of the CRF instantiation
based on AES-256 with key schedule by pipelining the AES-
256 key expansion and encryption routines as well as pipelin-
ing multiple invocations of AES, similar to the approach of
[GLNP15] for AES-128. Thereby, we manage to decrease the
computation time for AES-256 by factor 4, which reduces
the computational overhead compared to (cid:0)2
When evaluating a (cid:0)256
using the [KK13] protocol,
this reduces the evaluation time from 79 s to 22 s. For ρ > 256,
we instantiate the CRF with SHA-256.
A promising line of research is given in [GM16], which
outlines how to obtain cryptographic permutations with larger
block sizes based on ﬁxed-key AES-128. Due to security
concerns, however, we refrain from using their instantiations
but point it out as a future alternative to explore.
E. Multiplication Triples from(cid:0)N
(cid:1) OT
the work of [KK13] proposed to use their (cid:0)N
(cid:1) OT protocol
log2 N to (cid:0)2
to reduce (cid:0)N
(cid:1) OTlog2 N
(cid:1) OT2
communication saving of up to 1.6x per (cid:0)2
. They achieved a
1, from 256
bits to 160 bits, when setting κ = 128 and N = 16. In this
To improve the communication in secure computation,
(cid:1) OT1
1
1
1
1
1
1
5
1
(cid:1) OT1
work, we further improve on their communication savings by
using our optimized (cid:0)N
(cid:1) OT protocol to directly compute a
multiplication triple (MT), which corresponds to a (cid:0)4
(cid:1) OT1
For this reduction, we evaluate(cid:0)N
directly transform to(cid:0)4
(cid:1) OTlog4(N )
1.
log4(N ) which we can
. We vary possible choices
for N in Tab. III and observe that the highest improvement
of 1.9x is obtained for N = 16, where one MT can be
computed at the cost of 134 bits in the setup phase, and 2
MTs at the cost of 268 bits as shown in Tab. III. Compared
to the protocol in [KK13], our N-MT protocol reduces the
communication by factor 1.2x from 160 bits to 134 bits.
Adding the 4 bits for the evaluation in the online phase, the
total communication is now as low as 138 bits per AND gate.
1
1
1
1
N
#Triples
2-MT
N-MT
Improvem.
TRIPLES USING(cid:0)2
TABLE III.
1
16
2
512
268
1.91
8
1.5
384
223
1.72
4
1
256
194
1.32
COMMUNICATION FOR GENERATING MULTIPLICATION
(cid:1) R-OT [ALSZ13] (2-MT) AND(cid:0)N
(cid:1) OT [KK13] WITH
32
2.5
640
339
1.89
64
3
768
438
1.75
128
3.5
896
759
1.18
1,024
1,271
0.81
256
4
OUR OPTIMIZATIONS (N -MT). BEST RESULTS MARKED IN bold.
1
IV. LUT-BASED SECURE COMPUTATION
In this section, we discuss how to model the functionality
as network of interconnected LUTs with multiple input bits
that can be evaluated in a constant number of rounds per
layer of LUTs (§IV-A). We ﬁrst summarize the one-time truth
table (OTTT) approach of [IKM+13] with pre-computation of
[DZ16] (§IV-B). We then present our Online-LUT (OP-LUT)
scheme, which is optimized for an efﬁcient online phase but
has high communication in the setup phase (§IV-C). Next,
we give the Setup-LUT (SP-LUT) protocol that dramatically
reduces the communication in the setup phase but slightly
increases the communication in the online phase (§IV-D).
Finally, we show how to optimize the online phase of the
SP-LUT protocol to achieve better round and communication
complexity and how to compute LUTs with overlapping inputs
more efﬁciently (§IV-E). We give a summary of the commu-
nication costs for these protocols in Tab. IV.
A. Lookup-Tables
For our protocols in this section, we assume that the parties
have XOR secret-shared their private inputs and represent
the functionality as network of LUTs and XOR gates. In
our context, a δ-input bit LUT with σ output bits is a table
that maps an δ-bit secret-shared input to σ-bit secret-shared
output and can thereby be used to represent any function
f : {0, 1}δ (cid:55)→ {0, 1}σ. In contrast to Boolean circuits based
on 2-input gates, LUT-based circuits do not use internal logic
operations to map inputs to outputs and their evaluation costs
depend only on the number of inputs and outputs. We show
how to pre-compute and evaluate a δ-bit input LUT in the next
sections. As in GMW, XOR gates can be evaluated locally
by both parties XORing their respective shares. Moreover, we
can reduce the number of output bits if one output bit can be
computed as a linear combination of other outputs.
is that two parties hold secret shares T 0 and T 1 of a lookup
table T , whose entries were randomly rotated across both
dimensions using r, s such that T 0[i] ⊕ T 1[i] = T [r ⊕ s ⊕ i],
for all 0 ≤ i < 2δ. Each of the parties knows a secret share
of the truth-table as well as the rotation value, i.e., P0 knows
(T 0, r) and P1 knows (T 1, s).
Pre-Computation. During the setup phase, the truth-table T
needs to be shared such that P0 holds (T 0, r) and P1 holds
(T 1, s). A possible method for pre-computing the table was
outlined in [DZ16]: Both parties evaluate a Boolean circuit
representing the table once for every possible input, resulting
in an overhead of factor 2δ compared to a Boolean circuit
evaluation.1 In more detail, the parties represent the table T
as Boolean circuit C : {0, 1}δ (cid:55)→ {0, 1}σ. Then, P0 and P1
choose their random rotations values r, s ∈R {0, 1}δ, securely
evaluate C(r⊕s⊕i) = z0
i and T 1[i] =
i for all i ∈ [0...2δ − 1]. Assuming the upper bound of δ − 1
z1
AND gates for a Boolean circuit with δ inputs from §II-F and
the optimized multiplication triple generation at 138 bits per
AND gate from §III-E, this results in an overall communication
of at most 138(δ − 1)2δ bits.
Online Evaluation. In the online phase, the OTTT protocol
of [IKM+13] takes as input two δ-bit share values x0 and x1
such that x = x0 ⊕ x1 and evaluates a function f, represented
as a lookup table T . The parties hold shares (T 0, r) and (T 1, s)
of a permuted lookup table T such that T 0[i]⊕ T 1[i] = T [r ⊕
s ⊕ i], where r, s ∈R {0, 1}δ and for all 0 ≤ i < 2δ. To
evaluate T , the parties exchange u = x0⊕r and v = x1⊕s and
compute the shared result z0 = T 0[u⊕ v] and z1 = T 1[u⊕ v].
To see that z = T [x] = z0 ⊕ z1, observe that z0 ⊕ z1 =
T 0[u⊕ v]⊕ T 1[u⊕ v] = T 0[r⊕ s⊕ x]⊕ T 1[r⊕ s⊕ x] = T [x].
PROTOCOL 2 (OTTT Evaluation [IKM+13], [DZ16]):
i and set T 0[i] = z0
i ⊕z1
Common Input: Input bit-size δ; Output bit-size σ; N = 2δ;
Truth-table T : {0, 1}δ (cid:55)→ {0, 1}σ.
Input of P0: x0 ∈ {0, 1}δ.
Input of P1: x1 ∈ {0, 1}δ.
Pre-Computation [DZ16]:
•
•
•
1)
2)
3)
4)
1)
2)
3)
The parties represent T as circuit C : {0, 1}δ (cid:55)→ {0, 1}σ.
P0 chooses r ∈R {0, 1}δ and P1 chooses s ∈R {0, 1}δ.
P0 and P1 compute z0
and T 1[i] = z1
Output: P0 outputs (T 0, r); P1 outputs (T 1, s).
Note: ∀i with 0 ≤ i < N it holds that T 0[i]⊕T 1[i] = T [r⊕s⊕i].
i = C(s ⊕ r ⊕ i) and set T 0[i] = z0
i for all 0 ≤ i < N.
i ⊕ z1
i
P0 sends u = x0 ⊕ r to P1; P1 sends v = x1 ⊕ s to P0.
P0 sets z0 = T 0[u ⊕ v]; P1 sets z1 = T 1[u ⊕ v].
Output: P0 outputs z0; P1 outputs z1, s.t. z0⊕z1 = T [x0⊕x1].
Online Evaluation [IKM+13]:
C. Online-LUT (OP-LUT)
We propose another method for pre-computing the shared
permuted table, which performs better for small number of in-
puts δ. Instead of evaluating a circuit on all possible inputs, one
can directly transfer all possible choices of the rotated truth-
(cid:1) OT protocol described in §III. We
table via our optimized(cid:0)N
call this protocol OP-LUT and describe it in Prot. 3.
1
B. One-Time Truth Tables (OTTT)
In this section we describe the OTTT protocol of [IKM+13]
with circuit-based pre-computation from [DZ16], which is
given in Prot. 2. The high-level idea behind the OTTT protocol
1Note that the evaluated circuit can be optimized by removing duplicate
gates [KSS12]. Assuming that the last gate in the circuit is an AND gate
(otherwise, one could remove that last gate from the LUT), we expect the
circuit after the duplicate removal to have at least one AND gate per instance,
i.e., 2δ AND gates for the 2δ parallel evaluations.
6
≤ 2,208σ
64σ + 221
3
2
190
≤ 552σ
16σ + 190
# Inputs δ
Setup Communication [bits]
OTTT [IKM+13]
OP-LUT (§IV-C)
SP-LUT (§IV-D)
Online Communication [bits]
OTTT / OP-LUT
4
SP-LUT
Total Communication (Setup + Online) [bits]
OTTT [IKM+13]
OP-LUT (§IV-C)
SP-LUT (§IV-D)
TABLE IV.
≤ 554σ
16σ + 194
4σ + 192
4σ + 2
221
6
8σ + 3
≤ 2,214σ
64σ + 227
8σ + 224
4