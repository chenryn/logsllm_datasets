title:Inspector Gadget: Automated Extraction of Proprietary Gadgets from
Malware Binaries
author:Clemens Kolbitsch and
Thorsten Holz and
Christopher Kruegel and
Engin Kirda
Automated Extraction of Proprietary Gadgets from Malware Binaries
Inspector Gadget:
Clemens Kolbitsch
Secure Systems Lab
Thorsten Holz
Secure Systems Lab
Vienna University of Technology
Vienna University of Technology
Vienna, Austria
PI:EMAIL
Vienna, Austria
PI:EMAIL
Christopher Kruegel
University of California
Santa Barbara, USA
PI:EMAIL
Engin Kirda
Institute Eurecom
Sophia-Antipolis, France
PI:EMAIL
Abstract—Unfortunately, malicious software is still an un-
solved problem and a major threat on the Internet. An impor-
tant component in the ﬁght against malicious software is the
analysis of malware samples: Only if an analyst understands
the behavior of a given sample, she can design appropriate
countermeasures. Manual approaches are frequently used to
analyze certain key algorithms, such as downloading of encoded
updates, or generating new DNS domains for command and
control purposes.
In this paper, we present a novel approach to automatically
extract, from a given binary executable, the algorithm related
to a certain activity of the sample. We isolate and extract these
instructions and generate a so-called gadget, i.e., a stand-alone
component that encapsulates a speciﬁc behavior. We make sure
that a gadget can autonomously perform a speciﬁc task by
including all relevant code and data into the gadget such that
it can be executed in a self-contained fashion.
Gadgets are useful entities in analyzing malicious software:
In particular, they are valuable for practitioners, as under-
standing a certain activity that is embedded in a binary
sample (e.g., the update function) is still largely a manual and
complex task. Our evaluation with several real-world samples
demonstrates that our approach is versatile and useful
in
practice.
I. INTRODUCTION
Malicious software (malware) is the driving force behind
many of the attacks on the Internet today. For example, spam
e-mails are commonly sent via spambots, denial-of-service
attacks caused by botnets threaten the availability of hosts
on the Internet, and keyloggers steal conﬁdential information
from infected machines.
Although malware has been around for a long time, it
has been signiﬁcantly evolving in its nature. For exam-
ple, whereas malware was largely distributed as individual,
stand-alone programs ten years ago (e.g., viruses, worms), it
is now being increasingly deployed as software that can be
remotely controlled by its creators. Most malware instances
implement some kind of communication channel between
the running instance and the attacker. Typically, this channel
is used to update, control, and communicate with malicious
software. For example, the attacker can use the channel to
send a malware instance new URLs that should be advertised
via spam e-mails, new binary ﬁles that should be executed
on the compromised host, or a list of targets for logging
keystrokes. This remote conﬁguration mechanism gives an
attacker ﬂexible control over the infected machine. Hence,
she can arbitrarily conﬁgure the compromised host to carry
out her malicious deeds.
Understanding what actions a given sample performs is
important to be able to design corresponding countermea-
sures and mitigation techniques. For a security analyst, un-
derstanding the remote control mechanisms is especially in-
teresting as these provide valuable clues about the malware.
Unfortunately, analyzing the conﬁguration mechanisms (and
also all
the other activities of a malware binary) is a
challenging and complex task. Typically, the analyst does not
have access to the source code of the malware sample. As a
result, the analysis needs to operate on the binary executable.
Furthermore, the analysis is complicated by the fact that
the adversary can arm the binary with different kinds of
obfuscation and evasion techniques (e.g., [1], [2]) to hamper
and resist analysis. Thus, there is general consensus among
practitioners that the static analysis of malware is generally
a difﬁcult task [3].
Because of the shortcomings of static techniques, dynamic
analysis techniques are often used in practice. However, dy-
namic analysis also has some limitations (e.g., execution of
a single path, identiﬁcation of virtual environments, etc.) [4],
[5]. Furthermore, such systems do not provide support for
automatically extracting the conﬁguration mechanism or
other aspects of a sample under analysis.
In practice, a human analyst often needs to spend a consid-
erable amount of time manually decoding and analyzing the
malware sample in order to understand the key algorithms
embedded in the sample. An example for such a key
algorithm is the domain generation algorithm of malware
samples that use domain ﬂux [6]. With domain ﬂux, each bot
periodically generates a list of domains that are then used
to contact the attacker. As the attacker knows the domain
generation algorithm, she can set up an infrastructure and
register these domains in advance. During the analysis, the
analyst is interested in extracting these embedded algorithms
such that she can also precompute the domains that will be
used in the future [7].
Another example of a key algorithm that needs to be man-
ually analyzed is the decoding function that is embedded in a
sample. The malware uses this function to decode obfuscated
conﬁguration ﬁles [8]. With the decoding function at hand,
the analyst can decode and analyze spam templates that are
sent to the malware.
In this paper, we aim at improving the state of the art by
presenting a novel approach to automatically extract from a
given malware binary the instructions that are responsible for
a certain activity of the sample. We term these instructions
a gadget since they encapsulate a speciﬁc behavior that
can autonomously perform a particular task. The key idea
behind our approach is that the malware binary itself has to
contain all necessary instructions to perform the malicious
operations that we are interested in. Hence, if we are able to
isolate and extract these instructions (i.e., gadgets) in such a
way that we can reuse them again in another application, we
can perform a speciﬁc task of the malware (e.g., download
the current set of URLs that should be advertised in spam
mails) in a self-contained way, without the need of executing
the whole malware binary. Note that we do not need to
understand the behavior of the malware. We can simply
reuse the code extracted from the sample.
To achieve this goal, we have implemented a tool called
INSPECTOR (abbreviation for Inspector Gadget) that au-
tomatically extracts gadgets from a given malware binary.
In a ﬁrst phase, INSPECTOR performs dynamic program
slicing [9] on the malware binary to extract a slice (i.e.,
an algorithm) with “interesting” behavior. This could be,
for example, a slice that downloads a piece of binary data
from the Internet, deobfuscates this data to obtain a binary
executable, and then writes this ﬁle to the hard disk.
Clearly, applying program slicing to malicious input is
a difﬁcult task. However, we show in several case studies
that INSPECTOR can indeed handle common obfuscation
techniques such as binary packing or self-modifying code
found in real-world malware. Note that we extract com-
plete algorithms from the binary. This is more complex
and difﬁcult than only extracting speciﬁc functions (such
as in [10]) since we need to consider all dependencies
between functions, their side-effects, and relevant auxiliary
instructions (e.g., stack manipulation, or loops).
In a second phase, INSPECTOR generates a stand-alone
gadget based on the extracted algorithm. This gadget can
then be executed to perform the speciﬁc task that was
embedded into the malware binary. During the gadget gen-
eration process, we recursively include all intermediate code
and additional data regions such as global variables into the
gadget (i.e., closure analysis). All extracted memory regions
are relocated such that we can later on execute the extracted
code in another environment, the so called gadget player.
The gadgets we generate can perform all necessary actions
that the original function embedded in the malware sample
is to perform. That is, we do not need additional helper
applications to relay the trafﬁc between the extracted code
and the network (e.g., such as network proxies as in [10]).
The case studies we used in our evaluation demonstrate
that the gadgets we automatically generate provide the same
malicious functionalities that were originally embedded into
the malware samples. For example, we show that we can
generate a gadget that autonomously downloads data from
the network, and decodes it using a proprietary algorithm to
obtain an executable. Another gadget we extracted enables
us to decode encrypted network trafﬁc. Furthermore, our
transformation enables an analyst to inﬂuence the behavior
of a given gadget by manipulating the function calls invoked
by the extracted code. Using this feature, the analyst can
perform a deeper analysis of the malicious functionality
provided by the gadget. For example, she can intercept date
checks, and return arbitrary values to the gadget to determine
the effect on the execution.
In practice, executing extracted gadgets instead of the
original malware has the following important advantages:
• Since we are dealing with malicious software,
the
sample is potentially harmful. If we can extract only
the parts relevant to a certain computation and execute
them in a stand-alone fashion, we reduce our exposure
to the malicious code.
• We can immediately carry out a certain operation the
malware performs, instead of requiring to wait for time-
outs, sleep operations, or commands that are sent over
the command and control server.
• We can identify in-memory buffers that hold decrypted
data. These can be extracted easily with the help of the
gadget compared to running the sample in a debugging
environment, and manually inspecting memory.
Further, we also show how some gadgets can be inverted.
That is, we can use a gadget as a black box to compute what
speciﬁc input causes a given output. Inverting gadgets is use-
ful in many real-world scenarios. For example, inversion can
be invaluable for automatically decoding a network trace that
was encoded by a speciﬁc malware sample under analysis.
In this work, we show how INSPECTOR can use optimized
brute-forcing techniques to compute these inverse gadgets,
and demonstrate with the help of a practical example the
usefulness of this technique.
In summary, we make the following contributions:
• We propose and implement a novel approach to en-
hance malware analysis. The core idea is to automati-
cally extract self-contained, proprietary algorithms from
a malware sample that can then be reused to execute
the speciﬁc malicious functionality embedded in the
sample.
• We introduce a technique to transform the extracted
algorithm into a stand-alone executable (that we denote
a gadget). This is a challenging task since we need
to handle all dependencies (e.g., global variables and
auxiliary instructions), and also relocate all code.
• We discuss how gadgets can be inverted. That is, we
show how we can use a given gadget to compute the
input for an observed output. This technique is useful,
for example, for automatically decrypting an obfuscated
network trace that the malware generates.
• To demonstrate the practical feasibility of our approach,
we present several case studies with real-world malware
samples from different families (e.g., spam bots, key-
loggers, etc.). The experiments support our thesis that
gadget code can be reused, while only requiring a very
limited amount of manual analysis.
II. SYSTEM OVERVIEW
In this section, we ﬁrst brieﬂy review the problem we
are attacking, and provide a high-level overview of our
approach.
A. Problem Deﬁnition
The problem of gadget extraction is deﬁned as follows:
Given a binary of a malicious sample and an interesting
behavior that we have identiﬁed during its execution, we
would like to extract this behavior as a stand-alone code
fragment with all its instructions and data dependencies.
Furthermore, when starting the code execution of this self-
contained application, care needs to be taken to isolate the
gadget from the rest of the system so that it cannot exhibit
any unexpected and unforeseen malicious behavior (e.g.,
such as attacking the analysis environment).
B. System Overview
The gadget extraction process implemented by INSPEC-
TOR consists of three consecutive phases: Dynamic analysis,
gadget extraction, and gadget playback. The overall process
is illustrated in Figure 1 in a schematic way.
In order to obtain an initial overview of the behavior
exhibited by the malware sample, in a ﬁrst step, we execute
the sample in an analysis environment, speciﬁcally in a
dynamic analysis sandbox [11]. This step provides us with
a detailed overview of the actions performed by the sample.
Besides logging all system activity such as network commu-
nication, ﬁle activities (such as created or modiﬁed ﬁles), and
process interaction, the sandbox also performs detailed taint
tracking analysis [12]. At the end of the dynamic analysis
phase, we obtain a set of log ﬁles that contain all collected
information. Using these log ﬁles as a starting point, we can
then query the execution run for “interesting” behavior. In
this work, we focus on conﬁguration mechanisms of modern
malware. Hence, a behavior that is interesting from our point
of view would be the download and subsequent decoding
of a malware binary. Also, the generation of domains that
are relevant
to the communication channel between the
malware and the attacker would be worth analyzing. Besides
the semi-manual, guided ﬁnding of starting points for the
extraction of gadgets, we also implemented two heuristics
to automatically identify these interesting behaviors (see
Section III-C2 for details).
In a second step, our tool automatically extracts all the
code responsible for the interesting behavior exhibited by the
analyzed binary. The starting point of the extraction process
is a sink that speciﬁes when an interesting behavior has
been observed. Commencing at this position, we perform
backward binary program slicing and forward searching [9],
[13]. For example, writing tainted data to the hard disk and
then executing this data indicates an update process of the