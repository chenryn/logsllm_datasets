CyberArk实验室研究人员发现了开源自动化服务器Jenkins的一些漏洞。本文介绍其中两个漏洞。
# CVE-2018-1999001
CVE-2018-1999001的CVSS评分是`3.0`，属于高危漏洞。
当非授权的攻击者从Jenkins主文件系统移除文件时会导致Jenkins修改其主安全开关，有时甚至会完全放弃所有的安全防护，包括防数据泄露的安全措施，并允许非授权的用户以admin权限访问Jenkins。
## 工作原理
不管是Jenkins的用户数据库还是其他用户数据库，每当Jenkins有新用户产生，都会为每个用户名创建一个新的目录和`config.xml`文件，`config.xml`文件中的内容就是与用户相关的信息，比如加密API
token、用户邮件地址和全名。加密的API token是随机生成的token，用于使脚本客户端模仿新用户并调用需要认证的操作。
对每个新用户，Jenkins都会在硬盘上预留空间来保存新用户的详细信息。database有一点误导性，因为Jenkins会把新用户的信息保存在名为`users`的特殊目录中：
图1: Jenkins用户目录
每个用户名在`JENKINS_HOME/users/`目录下都有一个对应的文件夹，里面有一个`config.xml`文件。如果Jenkins被设置为使用自己用户的数据库，那么`config.xml`文件就含有哈希后的用户密码、加密的API
token、全名等信息。
## Jenkins主要安全防护
因为该漏洞主要是滥用Jenkins认证机制来绕过
Jenkins的安全防护，最终使任意用户都可以admin访问。因此，本节介绍Jenkins的主要安全防护措施。
Jenkins Global Security Configuration（全局安全配置）页打开了一个`enable
security`选择框。从Jenkins 2.0开始，该选择框默认是选择的：
图2: Jenkins Configure Global Security页
Jenkins的`enable security`选择框web
UI允许管理员开启、配置、关闭Jenkins所有的安全特征，包括用户认证和授权在内的特征。不选择`enable
security`，管理员就可以让所有匿名和非认证的用户访问Jenkins。  
Jenkins master的`enable security`状态保存在`JENKINS_HOME`目录的`Jenkins
master`配置文件中。配置文件也叫做`config.xml`。
## 移除主config.xml文件
每个Jenkins用户都可以用密码进行认证，使用API token会使认证过程有一点复杂，因为需要双重认证。  
双重认证机制是在`Hudson.Security.BasicAuthenticationFilter.java`中实现的。
为什么是双重认证机制呢？Jenkins支持两种类型的认证：HTTP基本认证和基于form的认证。HTTP基本认证是为脚本客户端预留的，而基于form的认证是为通过web
UI以用户名和密码登陆的用户准备的。
使用HTTP基本认证的话，客户端会用用户名和密码或API token组合来认证Jenkins master。在基本认证中，客户端的用户名和密码/API
token组合应该是连接在一起、base64编码的，并且在认证的HTTP header中传递：  
`Authorization: Basic dm9yZGVsOnZvcmRlbA==`
Jenkins
master会用用户数据库来认证用户，比如验证`username:password`的组合，或与保存在用户`config.xml`文件中的本地用户的API
token进行比较，即`username:APItoken`认证。
如果`HTTP GET header`是`Authorization:
Basic`，就会调用`Hudson.Security.BasicAuthenticationFilter`module中的`doFilter`函数，见代码段1第3行。该函数会提取出代码段1第6行的`Authorization
header`，并调用第29行来解码base 64信息。
    String uidpassword = Scrambler.descramble(authorization.substring(6));
`uidpassword`中的字符串现在含有解码的base64字符串，格式如`username:password`。  
然后填充用户名和密码变量（代码段1，第32和33行）  
然后，Jenkins调用第45行的`getById`函数：
    User u = User.getById(username, true);
函数的调用有2个参数：`username`是从`authorization HTTP header`提取的，`true`随后进行介绍。
    public class BasicAuthenticationFilter implements Filter {  
        private ServletContext servletContext;  
        public void doFilter(ServletRequest request, ServletResponse response, FilterChain chain) throws IOException, ServletException {  
            HttpServletRequest req = (HttpServletRequest) request;  
            HttpServletResponse rsp = (HttpServletResponse) response;  
            String authorization = req.getHeader("Authorization");  
            String path = req.getServletPath();  
            if(authorization==null || req.getUserPrincipal() !=null || path.startsWith("/secured/")  
            || !Jenkins.getInstance().isUseSecurity()) {  
                // normal requests, or security not enabled  
                if(req.getUserPrincipal()!=null) {  
                    // before we route this request, integrate the container authentication  
                    // to Acegi. For anonymous users that doesn't have user principal,  
                    // AnonymousProcessingFilter that follows this should create  
                    // an Authentication object.  
                    SecurityContextHolder.getContext().setAuthentication(new ContainerAuthentication(req));  
                }  
                try {  
                    chain.doFilter(request,response);  
                } finally {  
                    SecurityContextHolder.clearContext();  
                }  
                return;  
            }  
            // authenticate the user  
            String username = null;  
            String password = null;  
            String uidpassword = Scrambler.descramble(authorization.substring(6));  
            int idx = uidpassword.indexOf(':');  
            if (idx >= 0) {  
                username = uidpassword.substring(0, idx);  
                password = uidpassword.substring(idx+1);  
            }  
            if(username==null) {  
                rsp.setStatus(HttpServletResponse.SC_UNAUTHORIZED);  
                rsp.setHeader("WWW-Authenticate","Basic realm=\"Jenkins user\"");  
                return;  
            }  
            {// attempt to authenticate as API token  
                // create is true as the user may not have been saved and the default api token may be in use.  
                // validation of the user will be performed against the underlying realm in impersonate.  
                User u = User.getById(username, true);  
                ApiTokenProperty t = u.getProperty(ApiTokenProperty.class);  
                if (t!=null && t.matchesPassword(password)) {  
                    UserDetails userDetails = u.getUserDetailsForImpersonation();  
                    Authentication auth = u.impersonate(userDetails);  
                    SecurityListener.fireAuthenticated(userDetails);  
                    SecurityContextHolder.getContext().setAuthentication(auth);  
                    try {  
                        chain.doFilter(request,response);  
                    } finally {  
                        SecurityContextHolder.clearContext();  
                    }  
                    return;  
                }  
            }  
            path = req.getContextPath()+"/secured"+path;  
            String q = req.getQueryString();  
            if(q!=null)  
                path += '?'+q;  
            // prepare a redirect  
            rsp.setStatus(HttpServletResponse.SC_MOVED_TEMPORARILY);  
            rsp.setHeader("Location",path);  
            // ... but first let the container authenticate this request  
            RequestDispatcher d = servletContext.getRequestDispatcher("/j_security_check?j_username="+  
                URLEncoder.encode(username,"UTF-8")+"&j_password="+URLEncoder.encode(password,"UTF-8"));  
            d.include(req,rsp);  
        }
代码段1: Hudson.Security.BasicAuthenticationFilter.java
分析`Hudson.model.User`模块，发现`Hudson.model.User`中的`GetById`函数调用了另一个函数：