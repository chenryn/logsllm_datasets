# 【技术分享】堆之House of Spirit
##### 译文声明
本文是翻译文章，文章来源：安全客
译文仅供参考，具体内容表达以及含义原文为准。
作者：[ray_cp](http://bobao.360.cn/member/contribute?uid=2796348634)
预估稿费：300RMB
投稿方式：发送邮件至[linwei#360.cn](mailto:PI:EMAIL)，或登陆[网页版](http://bobao.360.cn/contribute/index)在线投稿
**前言**
终于做到了这里，一直听说什么house of lore、house of
spirit什么的，之前一直不会，只是听听。到湖湘杯的时候里面有一题note，最后是用这个house of
spirit解决掉的，比赛结束以后决定花时间把这个给好好的看看，也拿一道题做例子来实践实践，题是l-ctf2016的题，分析了堆的部分源码，看了几篇大牛的文章，最后pwn成功了，于是就有了这篇总结。掌握这个技巧前提是对堆的结构以及管理需要一定的了解，不懂的可以在网上找一些资料去补补。
**House of Spirit原理**
House of
Spirit（下面称为hos）算是一个组合型漏洞的利用，是变量覆盖和堆管理机制的组合利用，关键在于能够覆盖一个堆指针变量，使其指向可控的区域，只要构造好数据，释放后系统会错误的将该区域作为堆块放到相应的fast
bin里面，最后再分配出来的时候，就有可能改写我们目标区域。还是像以前一样，先上一段代码给大家一个直观印象再具体解释，这段代码是shellfish的github里面的[源码](https://github.com/shellphish/how2heap/blob/master/house_of_spirit.c)。
      #include 
      #include 
      int main()
      {
             printf("This file demonstrates the house of spirit attack.n");
             printf("Calling malloc() once so that it sets up its memory.n");
             malloc(1);
            printf("We will now overwrite a pointer to point to a fake 'fastbin' region.n");
            unsigned long long *a;
            unsigned long long fake_chunks[10] __attribute__ ((aligned (16)));
            printf("This region must contain two chunks. The first starts at %p and the second at %p.n", &fake_chunks[1], &fake_chunks[7]);
            printf("This chunk.size of this region has to be 16 more than the region (to accomodate the chunk data) while still falling into the fastbin category (system_mem (128kb by default for the main arena) to pass the nextsize integrity checks .n");
            fake_chunks[9] = 0x2240; // nextsize
            printf("Now we will overwrite our pointer with the address of the fake region inside the fake first chunk, %p.n", &fake_chunks[1]);
            printf("... note that the memory address of the *region* associated with this chunk must be 16-byte aligned.n");
            a = &fake_chunks[2];
            printf("Freeing the overwritten pointer.n");
            free(a);
            printf("Now the next malloc will return the region of our fake chunk at %p, which will be %p!n", &fake_chunks[1], &fake_chunks[2]);
            printf("malloc(0x30): %pn", malloc(0x30));
     }
**A、hos的经典利用场景的条件如下** **  
**
（1）想要控制的目标区域的前段空间与后段空间都是可控的内存区域
一般来说想要控制的目标区域多为返回地址或是一个函数指针，正常情况下，该内存区域我们输入的数据是无法控制的，想要利用hos攻击技术来改写该区域，首先需要我们可以控制那片目标区域的前面空间和后面空间，示意图如下。
（2）存在可将堆变量指针覆盖指向为可控区域，即上一步中的区域
**B、利用思路**
（1）伪造堆块
看了上面的两个情景，反应快的人可能明白了hos的主要意图了，那就是，在可控1及可控2构造好数据，将它伪造成一个fastbin。
（2）覆盖堆指针指向上一步伪造的堆块。
（3）释放堆块，将伪造的堆块释放入fastbin的单链表里面。
（4）申请堆块，将刚刚释放的堆块申请出来，最终使得可以往目标区域中写入数据，实现目的。
需要说明的是第一步中的伪造堆块的过程，fastbin是一个单链表结构，遵循FIFO的规则，32位系统中fastbin的大小是在16~64字节之间，64位是在32~128字节之间。释放时会进行一些检查，所以需要对伪堆块中的数据进行构造，使其顺利的释放进到fastbin里面，看堆free过程中相关的源代码。
      void
      public_fREe(Void_t* mem)
      {
        mstate ar_ptr;
        mchunkptr p;                          /* chunk corresponding to mem */
        [...]
        p = mem2chunk(mem);
     #if HAVE_MMAP
       if (chunk_is_mmapped(p))                       /*首先M标志位不能被置上才能绕过。release mmapped memory. */
       {
         munmap_chunk(p);
         return;
       }
     #endif
       ar_ptr = arena_for_chunk(p);
       [...]
       _int_free(ar_ptr, mem);
首先mmap标志位不能被置上，否则会直接调用munmap_chunk函数去释放堆块。
      void
      _int_free(mstate av, Void_t* mem)
      {
        mchunkptr       p;           /* chunk corresponding to mem */
        INTERNAL_SIZE_T size;        /* its size */
        mfastbinptr*    fb;          /* associated fastbin */
        [...]
       p = mem2chunk(mem);
       size = chunksize(p);
       [...]
       /*
         If eligible, place chunk on a fastbin so it can be found
         and used quickly in malloc.
       */
       if ((unsigned long)(size) max_fast)   /*其次，size的大小不能超过fastbin的最大值*/
     #if TRIM_FASTBINS
           /*
            If TRIM_FASTBINS set, don't place chunks
            bordering top into fastbins
           */
           && (chunk_at_offset(p, size) != av->top)
     #endif
           ) {
         if (__builtin_expect (chunk_at_offset (p, size)->size = av->system_mem, 0))                        /*最后是下一个堆块的大小，要大于2*SIZE_ZE小于system_mem*/
           {
            errstr = "free(): invalid next size (fast)";
            goto errout;
           }