in two diﬀerent tables. This is because if hi(S(x)) appears
in the ith subtable we will never have hj(S(x)) appear in
the jth subtable; since hi(S(x)) is in the ith subtable, if
some other element y attempts to put hj (S(x)) in the jth
subtable, we must have that S(x) = S(y) (since we are using
a permutation). Hence hi(S(y)) = hi(S(x)), and instead of
inserting anything into the table for item y, we will sim-
ply increment the counter associated with the ﬁngerprint
hi(S(x)). Because the probability of matching ﬁngerprints
are small, a small counter (2 bits) is suﬃcient with very
high probability. Moreover, d-left hashing oﬀers very high
utilizations of table cells, giving very good space usage.
As an example, for n items, using d = 3 choices, h =
6 cells per bucket, b = n/12 buckets per subtable, f =
11 bit ﬁngerprints, and 2 bits per counter gives an overall
cost of (11 + 2) · 3/2 = 19.5 bits per item using a d-hash
CBF. (We have used that the utilization is 2/3.) The false
−f ) ≈
positive probability is approximately n2
0.59%. In contrast, a standard counting Bloom ﬁlter using 4
bits per counter (recommended to avoid overﬂow with high
probability) and 10 counters per item uses 40 bits per item
and obtains a false positive probability of about 0.82%.
−f +z = 12(2
The only real downside to the d-left CBF is that the hash-
ing cannot all be done entirely in parallel; the hash function
must be applied before the permutations. Also, there is per-
haps slightly more work to match the ﬁngerprint among the
items in the buckets. However, the permutations can be
computationally simple, the lookups remain very fast, and
the space savings is certainly substantial.
Further analysis and examples can be found in [6].
5. EXPERIMENTAL EVALUATION
We divide the experimental section into two parts:
Comparing ACSM implementations: While the the-
oretical analysis given earlier provides considerable insight
into the relative merits of our three ACSM implementations,
it also has drawbacks. The theoretical models are necessarily
simpliﬁed, because a complete study would need models of
timers, deletions, and other eﬀects. While simpliﬁed models
(e.g., random deletion) are tenable, it seems better to use
simulation to study real behavior. We provide a simulation
comparison on a simple state machine in Section 5.1.
Evaluating real applications: While our simulations
in Section 5.1 provide insight into whether ACSMs are im-
plementable in real routers, it does not shed enough light
on whether they are useful. In this context, the simulations
have two drawbacks. First, the simulations in Section 5.1
use a contrived state machine, chosen to be suﬃciently large
but still simple. It is more useful to see what the ﬁgures of
merit (false positive and negative probabilities, memory) are
for more realistic state machines, and how much leverage one
obtains by using ACSMs instead of full state machines for
these applications, for a given loss of ﬁdelity.
Second, the metrics of goodness for an ACSM (e.g., false
positive rate) do not necessarily translate into application
level metrics (which is what users ultimately care about) in
straightforward ways. For example, in the case of the video
congestion application described in Section 5.2, the relation
between erroneous dropping of frames and video quality can-
not easily be captured analytically. Thus, we provide a very
brief study of application level performance for two appli-
cations (video congestion control and P2P identiﬁcation) in
Section 5.2.
5.1 Simulation
We give an example comparing performance of the various
ACSMs on a simple state machine.
Experimental setup: We performed simulations using
the three diﬀerent algorithms to monitor ≈ 60, 000 ﬂows
with a state machine of 10 states. A simple sequential state
machine was used for the experiment with synthetically gen-
erated packets for the ﬂows. The state machine used was the
simplest possible:
1 → 2 → 3 → 4.... → 10.
Certain packets were encoded with state transition events.
Packet Generator: The packets for the diﬀerent ﬂows
were generated using the following parameters
1. There are n ≈ 60, 000 active ﬂows in the system.
2. Each ﬂow is made up of m ≈ 100 ± 40 packets.
3. Some packets contain triggers, which correspond to
state transitions. For instance a certain packet could
trigger the “transition from state 3 to 4” event.
4. The packet generator sequentially generates packets,
randomly selecting one of the n active ﬂows from which
to transmit. When a ﬂow terminates,
i.e., has ex-
hausted all its packets, a new ﬂow is created with
packets containing state transition events depending
on the type of the ﬂow as explained next.
The ﬂows are divided into three types:
1. Interesting Flows :- (30%) These ﬂow have the correct
sequence of triggers embedded in them. These triggers
should lead to complete execution of the state machine
from start to ﬁnish, unless there is some sort of error.
The goal of the experiment is to identify these ﬂows.
2. Noise Flows :- (30%) These ﬂows have random triggers
embedded in them. The triggers are guaranteed to
not execute the state machine to completion; the ﬁnal
trigger from state 9 to 10 is never used.
3. Random Flows:- (Remaining) These ﬂows have no trig-
ger embedded in them. These ﬂows are used to create
temporal diversity in the traﬃc.
The packet generator was tested with all three ACSM
schemes, and was allowed to run for the life of approximately
1 Million ﬂows. The performance of the ACSM in terms of
false positives/false negatives was recorded. Note that the
deﬁnitions of failure probabilities are slightly diﬀerent from
the deﬁnitions in Section 3; here we deﬁne failure from the
point of view of detecting interesting ﬂows. The experiment
records as a false positive cases when the ACSM ﬁnds a not-
interesting (i.e., a random or noise ﬂow) that has executed
the state machine to completion. The experiment records
as a false negative cases when the ACSM ﬁnds (at the end
of the experiment) an Interesting ﬂow whose state machine
does not run to completion.
If the ACSM ever returns a
don’t know state for a ﬂow, the experiment records it as a
don’t know for that ﬂow.
Algorithm Parameters: We describe the parameters
we varied for each of the three ACSM implementations.
The timer task resets periodically; the period is set of
about 10 times the average ﬂow life time ( ≈ 100 packets),
multiplied by the number of active ﬂows, for a period of 6
million packets.
Direct Bloom Filter: Each cell entry contains 2 bit for a
counter plus 1 bit for a timer. The implementation used only
provides for false positives and false negatives; that is, the
desired state transition is given, so a don’t know need never
be returned. For a given memory size, the number of cells
and the number of hash functions are varied to determine
the optimal values for false positives and false negatives.
Stateful Bloom Filter: Each cell entry uses 4 bits for state
plus 1 bit for a timer. This is suﬃcient for 10 states as
well as a don’t know and empty state. We use no counter;
instead we use timers to delete entries. For a given memory
size, the numbers of cells and hash functions are varied to
obtain the optimal values for false positive, false negative,
and don’t know probabilities.
Fingerprint Compressed Filter: Again for a given memory
size, the table size, the number of hash functions, cells per
bucket, and ﬁngerprint size are all varied to obtain the op-
timal values for false positives, false negatives, and don’t
know probabilities.
Simulation Results: The simulation results are sum-
marized in Table 1. The table shows that the FCF scheme
performed the best among the the three ACSM implemen-
tations, and the DBF performed the worst. Even with as
small as 0.5 Mb of memory, the FCF had total error prob-
ability of under 10%, where as with about 2 Mb the total
error probability was under 0.01%. By contrast, with 2Mb,
the SBF had a don’t know probability of 1.64% with much
smaller values for the other error probabilities. While we
did several other experiments that we do not describe for
lack of space, we found the FCF to be uniformly superior.
5.2 The Impact of ACSMs on Application Level
Performance
Earlier in the introduction, we suggested that routers and
switches are likely to evolve to be more application aware.
Many existing routers and switches have intelligence to mon-
itor traﬃc ﬂows for security violations and to steer traﬃc
based on cues in packet content. This trend is likely to
continue. When the corresponding applications can toler-
ate some loss of ﬁdelity caused by false positives and false
negatives (in return for better performance), ACSMs can be
useful. This is particularly true in Application Level QoS
(for example, the kind of service provided by devices such
as Packeteer and P-Cube) where the network provides QoS
by doing a limited amount of application level parsing to
understand the relation between packets and applications,
and the relative importance of each packet.
We illustrate this thesis by brieﬂy describing and evalu-
ating two applications: video congestion control and P2P
identiﬁcation. We emphasize that neither of these applica-
tions is new: there is much work that is in the literature in
these two areas, but existing work uses full state machines
which can be hard to implement in routers. We also em-
phasize that our evaluation is only meant to provide initial
insight into application level beneﬁts that accrue from us-
ing ACSMs. Much deeper and broader experimental study
(which we leave to later work) is needed to fully explore the
use of ACSMs in application aware networking.
5.2.1 Video Congestion Control
Despite failed past predictions about video over the In-
ternet, the playing of video clips and video conferencing has
increased substantially in recent years. If the history of voice
is any guide, Internet video may soon be commonly used for
video on demand, video conferencing, and even broadcast
TV. If so, the problem of video congestion in the Internet
will become signiﬁcant.
McCanne’s thesis [1, 14] suggested encoding video using
various enhancement layers that can be discarded during
times of congestion. However, this requires changes in stan-
dards and implementations. Meanwhile, video continues to
ﬂourish using the popular MPEG formats for video stream-
ing. MPEG encodes video using 3 types of frames: I frames
provide complete scene information, P frames show diﬀeren-
tial information with respect to the previous reference I or P
frame, and B frames show diﬀerential information between
the prior and following reference frames (the previous I or
P before the B, and the next I or P after the B).
Intuitively, dropping an I frame or P frame corrupts the
reference plane, making the following frames until the next
I frames useless. Dropping B frames is less harmful because
the following frames are not dependent on the B frame. B
frames only contain temporal information and so their loss
only causes motion artifacts which, up to a point, is diﬃ-
cult to notice. On the other hand random frame loss can
cause artifacts randomly in both the temporal and spatial
dimensions which are more observable at lower loss rates.
The fact that selective dropping of B frames can help dur-
ing periods of congestion is well known (e.g., [9]) but its
implementation in today’s routers is problematic. Assum-
ing each video stream is run over UDP, and there are several
hundred thousand UDP ﬂows concurrently through a router,
to do any eﬀective video congestion policy requires keeping
state about frame boundaries for each active ﬂow. This is
Scheme
Memory
Size (bits) Positive
False
False
Don’t
negative Know
Other Parameters
Direct
Bloom
Filter
Stateful
Bloom
Filter
786432
1572864
3145728
524288
1048576
2097152
9%
1.20%
0.03%
0.27%
0.04%
0.00%
19%
4.70%
0.34%
5.96%
1.12%
0.03%
Fingerprint
Compressed
Filter
516096
1081344
2162688
0.187% 4.278%
0.001% 0.011%
0.000% 0.005%
-
-
-
functions
num hash
cells
256K 3
512K 4
1M
5
num hash
cells
functions
42.64% 128K 3
14.45% 256K 4
512K 5
1.64%
table
size
3.205% 6K
0.010% 8K
0.003% 16K
hash
functions
3
4
4
cells per
bucket
6
6
6
ﬁngerprint
size (bits)
10
10
18
Table 1: Simulation Results: Comparing the various ACSMs on a simple state machine.
because each of the I, B, and P frames are identiﬁed by
a unique string at the start of the frame, frames can span
packets, and the end of a previous frame is only signaled by
the string indicating the start of the next frame.
Thus to do some form of discriminate dropping of video
frames one has to maintain a small amount of state (mini-
mally the current frame type) for all concurrent video streams.
Some authors have suggested marking packets[9] to indicate
priority levels in which case B frame packets can be marked
as low priority. However, such marking requires standard
changes (as is the case for layered encoding proposals).
Priority marking also cannot implement the full range
of state machines one could envision for video congestion
control. For example, one (somewhat dated) drop policy
in ATM switches is “tail-dropping” which essentially con-
verts the loss of a cell in an ATM packet to the loss of the
packet [18]. A natural generalization to video is to drop all
packets till the next I-frame after the loss of a signiﬁcant
packet within an I-frame. It does not appear to be possi-
ble to implement such a policy (which we implement using
ACSMs and evaluate below) using priority marking.
To investigate the application of ACSMs to discriminate
dropping of video packets within MPEG frames, we followed
the approach of earlier papers in video congestion [9] and