be granted. Furthermore, if a malicious user tries to simply
copy the entire information onto a new tag, the signature on
the new tag would not pass veriﬁcation because the TagID
is diﬀerent. Only the owner of the private key (i.e. the IT
department of a company) used to create the digital signa-
ture will be able to create NFC tags that are accepted by
DR BACA.
4.5 Policy Conﬁgurator
The Policy Conﬁgurator is part of the DR BACA Android
application and allows users or administrators to conﬁgure
DR BACA. This application can either receive policy in-
formation from an external server (see next subsection) or
deﬁne them locally. The application can be protected, in
order to prevent normal users from changing the DR BACA
security policy.
4.6 Conﬁguration Server
DR BACA comes with a stand-alone Conﬁguration Server
oﬀering a simple-to-use user interface through which an ad-
ministrator can create and alter the security policy. This
policy can then be retrieved by any DR BACA-enabled mo-
bile device through the Policy Provider on the server. While
optional, the Conﬁguration Server oﬀers scalability in envi-
ronments with dozens or hundreds of mobile devices.
5.
IMPLEMENTATION
DR BACA was developed on Android version 4.0.4 (Ice
Cream Sandwich). We used a Galaxy Nexus and a Nexus S
for testing purposes. The experiments in section 7 were con-
ducted on the Nexus S. DR BACA consists of about 15,000
lines of code, the majority of it written in Java. One of our
goals in developing DR BACA was to minimize the changes
to the existing Android code. Therefore, only 139 lines of
actual Android framework code had to be modiﬁed. This
simpliﬁes the porting of DR BACA to newer versions of
Android. A complete discussion of DR BACA’s implemen-
tation is outside of the scope of this paper. More details can
be found in [24].
DR BACA modiﬁes and extends the existing Android
framework. This provides unrestricted access to any kind
of permission and execution request. As brieﬂy mentioned
before, these requests are intercepted by DR BACA through
hooks in the framework code. For example, the Activity-
Manager service checks application permission requests in
its checkComponentPermission() method.
If that method
grants the permission request, the DR BACA system will
get notiﬁed and consults its security policy before making
the ultimate decision of granting or rejecting the request.
The disadvantage of directly modifying the Android operat-
ing system is that in order to use DR BACA, the Android
device needs to be rooted and ﬂashed with the modiﬁed
operating system. Fortunately, rooting and ﬂashing an An-
droid device is well documented and does not require a lot
of time.
Another important goal of DR BACA was to identify all
execution paths that deal with permission and execution
checks. The Android code base is very extensive and de-
pending on the actual request, diﬀerent services will deal
with it. Through code inspection, experimentation and test-
ing, we are conﬁdent to have identiﬁed the majority of paths
where such checks occur. All identiﬁed execution paths were
then hooked up with DR BACA in order to provide a com-
prehensive security solution for Android.
6. SCENARIOS
This section provides a scenario that illustrate how DR
BACA can be used in a real world environment. This sce-
nario takes place in a hospital environment.
In order to
support the hospital staﬀ in their daily work, the IT depart-
ment acquired dozens of Android devices. Most employees
are given their own personal Android device. In addition,
the hospital acquired Android tablets. These tablets are
assigned to the current patients. The tablets serve both
as an entertainment platform for the patients as well as a
source for sensitive patient information for the hospital staﬀ.
Since dealing with sensitive medical information, these de-
vices need to be appropriately secured. For this reason, the
IT department installed DR BACA on all acquired devices.
The security policy applied to the mobile devices consists
(among others) of the following rules:
1. The patient role allows the execution of certain games
(Scrabble, Chess, etc.) and video conferencing appli-
cations. .
2. Patients (users assigned the patient role) are never al-
lowed to execute the hospital application ”MedInfo”.
.
3. The doctor and nurse role contains a rule which al-
lows the retrieval of medical information through the
hospital application ”MedInfo”.
Access To Sensitive Application: This setup allows
patients to pass their time playing games, listening to mu-
sic and chatting with friends and family using the Android
tablet. On the other hand, nurses can make use of the same
tablet by retrieving or updating the patient’s information.
If a patient attempted to start the MedInfo application,
an error message such as the one shown in Figure 4 would
pop up and reject the execution request.
Figure 4: Execution request denied
However, patients are allowed to inspect their own medical
record under HIPAA [20]. Using DR BACA’s dynamic ap-
proach, a doctor can grant a patient temporary access to
their own medical records. This can be achieved by sharing
304
the appropriate rule from their own mobile device to the
patients tablet. To minimize the risk of information leak-
age, this rule will only be granted for a short amount of
time, just enough for the patient to review his/her medical
records. Listing 3 shows, how this rule would have to be
deﬁned as part of the security policy. Note that the rule is
shareable in order for the doctor to temporarily grant it to
the patient.
{ "apps": ["MEDINFO"],
"roles": ["DOCTOR", "NURSE"],
"rulename": "MEDINFO_ACCESS",
"allowed": true,
"shareable": true,
"contexts": ["HOSPITAL_LOC"] }
Listing 3: Shareable rule Example
Minimizing Risk of Malware: In recent months, there
have been many malicious applications with the primary
goal of periodically sending messages to premium numbers.
Many of these applications are based on the very widespread
Android.FakeInstaller malware family, according to a report
from McAfee [25]. The report states that this malware fam-
ily consists of several variants that all spoof popular appli-
cations such as Skype and Flash Player and upload them to
third-party App-Markets. The IT department of the hos-
pital is worried, that the mobile devices provided to the
employees will get infected with the Android.FakeInstaller
malware. It assigns the rule shown in Listing 4 to the em-
ployee role. This prevents anyone from ever sending SMS.
{ "roles": ["EMPLOYEE"],
"rulename": "NO_SMS",
"permissions": ["SEND_SMS"],
"allowed": false,
"shareable": false }
Listing 4: Denied SEND SMS rule
Not allowing to send SMS might be too restrictive for the
hospital’s employees. One way to solve this and still ad-
here to the principle of least privilege is to provide each
employee with an NFC tag which temporarily permits dan-
gerous permissions such as SEND SMS. While this approach
is less convenient for employees, it eﬀectively reduces the
potential cost incurred by malicious software such as the
Android.FakeInstaller malware family.
7. EVALUATION
7.1 Effectiveness
costs for the mobile device user by sending SMS to premium
numbers. By deﬁning rules similar to the ones created in sec-
tion 6, these types of malware suddenly become much less
powerful. Also, a lot of malware attempts to steal contact in-
formation. A rule that only grants the READ CONTACTS
to trusted applications will mitigate the risks posed by these
particular malicious applications.
7.2 Efﬁciency
Added security always comes with a price, be it through
performance degradation, slowed down user experience, higher
battery life consumption or a combination of all. With the
current mobile devices on the market, one of the most im-
portant performance factors is the battery life time. This is
illustrated by the fact that the Galaxy Nexus battery takes
up about 1
3 of the entire internal hardware. All tests in this
chapter were performed with the same user who has the fol-
lowing restrictions:
• Internet denied (all applications) during work days,
• Send SMS denied (all applications) during work days;
• Execute music application denied during work days
• Execute performance application denied;
• Execute settings application denied during work days;
• Execute camera application denied during work days,
• Internet allowed for email application;
• Internet allowed for performance application;
• Execute performance application allowed.
oﬃce hours and at oﬃce location;
oﬃce hours and at oﬃce location;
and oﬃce hours;
While the here chosen security policy is rather small, the
provided results are also representative for larger environ-
ments (with dozens of roles and rules) for the following rea-
sons:
• Once a user is logged in, only the roles, rules and con-
texts of that particular user are loaded into memory
and used by DR BACA to make access decisions. This
means that the number of roles, rules and contexts DR
BACA needs to check to make access decisions does
not increase when more users are involved.
• Roles, rules and contexts are stored in Array-Lists. In
Java, Array-Lists have a random access time complex-
ity of O(n), where n is the number of elements in the
Array-List. This means that only for a very large n will
the results shown in this chapter be distorted. Based
on the fact that the Android operating system cur-
rently contains 130 permissions [12], we expect that
normal DR BACA users will have limited amounts
of roles, rules and contexts, unlikely to exceed a few
dozens.
The eﬀectiveness of DR BACA depends on the security
policy used. However, a stringent security policy can severely
limit the harm caused by malicious and vulnerable non-
malicious, applications.
While Table 5 is not exhaustive, it shows that the majority
of current Android malware contains similar functionality.
Because of this, adding only a few restrictive rules to DR
BACA is enough to improve the security on Android mobile
device. For example: most malware has the ability to impose
7.3 Permission Checking Overhead
This ﬁrst test evaluates individual permission requests and
the time overhead introduced for checking them with DR
BACA. Figure 5 shows the performance test results for the
READ SMS permission.
The timing was performed by comparing two nanoTime()
timestamps. Since Java’s nanoTime() method can vary de-
pending on the current system load, we performed a total of
305
Malicious activity
Send costly SMS
Name
Bill Shocker [26]
Android.DDoS.1.origin [22] Botnet (DDoS) & Send costly SMS
Android.Enesoluty [32]
Android.Jifake [4]
Android.Ackposts [31]
Android.Mobiletx [1]
Steal personal info
Send costly SMS
Steal contact info
Steal personal info & Send costly SMS
Discovered date
January 2013
December 2012
September 2012
July 2012
July 2012
May 2012
Table 5: Recent Android malware
]
s
u
[
n
o
i
t
a
r
u
D
0
0
8
0
0
6
0
0
4
0
0
2
0
Mean:
307.83
585.30
Std. deviation:
103.43
74.27
Android
DR BACA
0
10
20
30
40
50
60
70
80
90
100
Figure 5: READ SMS request time overhead
Number of tests [#]
110 READ SMS requests and removed the top and bottom 5
results, leaving 100 time values for comparison between An-
droid’s reference monitor and DR BACA. Each red square in
the ﬁgure indicates an individual permission request check
performed by DR BACA. Likewise, each blue circle indicates
the time required for Android’s reference monitor to make an
access decision for the same request. The result shows that
DR BACA’s permission checking function takes on average
twice as long as Androids own reference monitor. Research
such as [16], [30] and [19] has shown, that users who interact
with a computer system ﬁnd a response time of one to two
seconds acceptable and a response time of 0.1 seconds or
less is considered instantaneous. The time overhead intro-
duced by DR BACA ranges from 400 to 800 μs. Adding this
to Android’s own (highest) permission checking overhead of
630 μs, the overall overhead for a single permission check
results in around 1430 μs or 1.43 ms. This response time is
well below the 0.1 seconds that users perceive as an instan-
taneous response. DR BACA’s overhead will therefore not
negatively aﬀect the user experience.
7.4 Long-term DR BACA Test
As previously mentioned, the battery life time is a cru-
cial aspect of today’s mobile devices. With the purpose of
understanding how much of an impact DR BACA has on
battery life time, we ran a long-term performance test. In
order to automate testing and generate reproducible results,
we created a user simulation application that starts and
continues predeﬁned applications in given intervals. This
simulation is an approximation of an actual user and pro-
vides some estimates of how much DR BACA aﬀects the
mobile device’s battery life time. The following list contains
the applications and their starting time (in minutes), which
is repeated every 30 minutes: Browser(0), Email(2), Cam-
era(3), Calendar(5), Setting(8), Camera(11), Browser(13),