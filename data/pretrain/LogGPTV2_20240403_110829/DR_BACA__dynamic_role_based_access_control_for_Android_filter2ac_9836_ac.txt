### Granting and Verification of Digital Signatures
To ensure security, if a malicious user attempts to copy the entire information onto a new tag, the signature on the new tag will not pass verification due to the different TagID. Only the owner of the private key (e.g., the IT department of a company) can create NFC tags that are accepted by DR BACA.

### 4.5 Policy Configurator
The Policy Configurator is an integral part of the DR BACA Android application, allowing users or administrators to configure DR BACA. This application can either receive policy information from an external server (see next subsection) or define policies locally. To prevent unauthorized changes, the application can be protected, ensuring that only authorized users can modify the DR BACA security policy.

### 4.6 Configuration Server
DR BACA includes a standalone Configuration Server that provides a user-friendly interface for administrators to create and modify security policies. These policies can then be retrieved by any DR BACA-enabled mobile device through the Policy Provider on the server. Although optional, the Configuration Server enhances scalability in environments with numerous mobile devices, making it suitable for organizations with dozens or hundreds of devices.

### 5. Implementation
DR BACA was developed for Android version 4.0.4 (Ice Cream Sandwich). For testing purposes, we used a Galaxy Nexus and a Nexus S, with the experiments conducted on the Nexus S. The system consists of approximately 15,000 lines of code, primarily written in Java. Our goal was to minimize changes to the existing Android code, resulting in only 139 lines of actual Android framework code being modified. This approach simplifies the porting of DR BACA to newer versions of Android. A detailed discussion of DR BACA’s implementation is beyond the scope of this paper; more information can be found in [24].

#### Modifying and Extending the Android Framework
DR BACA modifies and extends the existing Android framework to provide unrestricted access to any kind of permission and execution request. These requests are intercepted by DR BACA through hooks in the framework code. For example, the ActivityManager service checks application permission requests in its `checkComponentPermission()` method. If the method grants the permission request, DR BACA is notified and consults its security policy before making the final decision to grant or reject the request.

The disadvantage of directly modifying the Android operating system is that the device needs to be rooted and flashed with the modified operating system to use DR BACA. However, rooting and flashing an Android device is well-documented and does not require extensive time.

Another key objective of DR BACA was to identify all execution paths related to permission and execution checks. Through code inspection, experimentation, and testing, we have identified the majority of these paths, which were then integrated with DR BACA to provide a comprehensive security solution for Android.

### 6. Scenarios
This section illustrates how DR BACA can be used in a real-world environment, specifically in a hospital setting.

#### Hospital Environment
To support the hospital staff in their daily work, the IT department acquired several Android devices. Most employees received personal Android devices, and the hospital also acquired Android tablets for patients. These tablets serve as both entertainment platforms and sources of sensitive patient information for the hospital staff. Given the sensitivity of medical information, these devices need to be appropriately secured. Therefore, the IT department installed DR BACA on all acquired devices.

The security policy applied to the mobile devices includes the following rules:
1. Patients can execute certain games (Scrabble, Chess, etc.) and video conferencing applications.
2. Patients are not allowed to execute the hospital application "MedInfo."
3. Doctors and nurses can retrieve medical information through the "MedInfo" application.

**Access to Sensitive Applications:**
This setup allows patients to use the Android tablet for entertainment, while nurses can use the same tablet to retrieve or update patient information. If a patient attempts to start the MedInfo application, an error message will appear, rejecting the execution request.

**Dynamic Access:**
Using DR BACA's dynamic approach, a doctor can temporarily grant a patient access to their own medical records. This can be achieved by sharing the appropriate rule from the doctor's mobile device to the patient's tablet. The rule will be granted for a short period, sufficient for the patient to review their medical records. Listing 3 shows an example of such a shareable rule.

```json
{
  "apps": ["MEDINFO"],
  "roles": ["DOCTOR", "NURSE"],
  "rulename": "MEDINFO_ACCESS",
  "allowed": true,
  "shareable": true,
  "contexts": ["HOSPITAL_LOC"]
}
```

**Minimizing Risk of Malware:**
In recent months, there have been many malicious applications designed to send messages to premium numbers. The IT department is concerned about the potential infection of employee devices with malware like Android.FakeInstaller. To mitigate this risk, they assigned a rule (Listing 4) to the employee role, preventing anyone from sending SMS.

```json
{
  "roles": ["EMPLOYEE"],
  "rulename": "NO_SMS",
  "permissions": ["SEND_SMS"],
  "allowed": false,
  "shareable": false
}
```

Not allowing SMS might be too restrictive for employees. An alternative is to provide each employee with an NFC tag that temporarily permits dangerous permissions like `SEND_SMS`. While less convenient, this approach effectively reduces the potential cost incurred by malicious software.

### 7. Evaluation

#### 7.1 Effectiveness
By defining rules similar to those created in Section 6, DR BACA significantly reduces the power of malware that sends costly SMS or steals contact information.

#### 7.2 Efficiency
Added security often comes with performance trade-offs, such as degraded performance, slower user experience, or higher battery consumption. With current mobile devices, battery life is a critical factor. All tests in this chapter were performed under the following restrictions:
- Internet denied (all applications) during workdays.
- Send SMS denied (all applications) during workdays.
- Execute music application denied during workdays.
- Execute performance application denied.
- Execute settings application denied during workdays.
- Execute camera application denied during workdays.
- Internet allowed for email application.
- Internet allowed for performance application.
- Execute performance application allowed during office hours and at office location.

While the chosen security policy is small, the results are representative of larger environments due to the following reasons:
- Once a user is logged in, only the roles, rules, and contexts relevant to that user are loaded into memory.
- Roles, rules, and contexts are stored in ArrayLists, which have a random access time complexity of O(n). Given that the Android operating system currently contains 130 permissions, normal DR BACA users are unlikely to exceed a few dozen roles, rules, and contexts.

#### 7.3 Permission Checking Overhead
This test evaluates the time overhead introduced by DR BACA for individual permission requests. Figure 5 shows the performance test results for the `READ_SMS` permission. The timing was performed by comparing two `nanoTime()` timestamps. We conducted 110 `READ_SMS` requests, removed the top and bottom 5 results, and compared the remaining 100 time values between Android’s reference monitor and DR BACA.

The results show that DR BACA’s permission checking function takes, on average, twice as long as Android’s own reference monitor. Research indicates that users find a response time of one to two seconds acceptable and a response time of 0.1 seconds or less as instantaneous. The overhead introduced by DR BACA ranges from 400 to 800 μs, resulting in an overall overhead of around 1430 μs or 1.43 ms. This response time is well below the 0.1 seconds that users perceive as instantaneous, indicating that DR BACA’s overhead will not negatively affect the user experience.

#### 7.4 Long-term DR BACA Test
Battery life is a crucial aspect of modern mobile devices. To understand the impact of DR BACA on battery life, we conducted a long-term performance test. We created a user simulation application that starts and continues predefined applications in given intervals. The following list contains the applications and their starting times (in minutes), repeated every 30 minutes: Browser(0), Email(2), Camera(3), Calendar(5), Settings(8), Camera(11), Browser(13).

This simulation approximates actual user behavior and provides estimates of how much DR BACA affects the mobile device’s battery life.