Constraints
x ∈ (1|2|3)
x ∈ (10|20)
x = 20
len(x) ≤ 10
x = 20
Table 2: Constraints imposed by HTML form controls.
Step 2: JavaScript symbolic evaluator.
The key observa-
tion for extracting parameter validation constraints from a given
JavaScript snippet is that form submission only occurs if that code
returns true.
In the simplest case, the code includes the state-
ment return true or return , where 
is a boolean expression. In theory, the code could return any value
that JavaScript casts to true, but in our experience the ﬁrst two
cases are far more common. This observation leads to the key in-
sight for extracting constraints: determine all the program condi-
tions that lead to true return values from all event handler func-
tions.
To extract validation constraints, the symbolic analyzer begins
by executing the validation code concretely. When a boolean ex-
pression with symbolic variables is encountered, the execution forks:
one assuming the boolean expression is true and the other assum-
ing it is false. Both executions replicate the existing variable
values (program state) except for those affected by assuming the
boolean expression is true or false. Concrete execution then
resumes. Supported DOM modiﬁcation APIs act on the DOM spe-
ciﬁc to a fork.
For a given program location, the program condition is the
set of conditions that must be satisﬁed for control to reach that
point. If a fork returns false, it is stopped and discarded. If a fork
returns true, it is stopped and the program conditions to reach that
point are noted. Further, the DOM representation at this point re-
ﬂects state of the HTML input controls while submitting the form
including any modiﬁcations done by the JavaScript as well. The
constraints checked on this fork are then computed by combining
constraints of enabled controls in the DOM representation and pro-
gram conditions using a conjunction (∧).
Once all forks have been stopped, fclient is computed by com-
bining formulas for each path that returned true with disjunction
(∨).
For the running example one control path succeeds in returning
true, resulting in the following formula.
^ ¬(copies ) = len()  ⊗ 
 (cid:54)= 
 (cid:54)= len()
len() (cid:54)= len()  ⊕ 
 ⊗ len()
len() ⊗ len()
Table 3: The reduced constraint language: ∧ and ∨ over the
above atoms. ⊗ is one of ,≤,≥. ⊕ is either ∈ or (cid:54)∈.
with the user-provided constraints σ and required-variable and type
constraints, and ﬁnds one solution per disjunct.
In the running example, suppose fclient is the formula
(copies > 0 ∨ copies = 0) ∧ (directions ∈ [a-zA-Z]*).
NOTAMPER ﬁnds one solution for copies > 0 ∧ directions ∈
[a-zA-Z]* and another for copies = 0∧directions ∈ [a-zA-Z]*.
If the type of copies is [0-9]+ and the type of directions is
[a-zA-Z0-9]*, NOTAMPER includes the constraints copies ∈
[0-9]+ and directions ∈ [a-zA-Z0-9]*. If the variable name
is required and has type [a-zA-Z]*, NOTAMPER includes the con-
straint name ∈ [a-zA-Z]*. If σ is nonempty, NOTAMPER in-
cludes it as well.
Satisfying the unique variable constraint is accomplished by keep-
ing track of the values assigned to each variable for each generated
input and adding constraints that ensure the next value generated
for each unique variable is distinct from those previously gener-
ated.
Hostile inputs. To generate hostile inputs, NOTAMPER starts
with ¬fclient instead of fclient and then proceeds as for the benign
case with one exception: ﬁlling in values for required variables.
Consider any disjunct δ in the DNF of ¬fclient. If all the required
variables occur within δ, NOTAMPER simply ﬁnds a variable as-
signment satisfying δ and returns the result; otherwise, NOTAMPER
augments that assignment with values for the required variables not
appearing in δ. To do so, it ﬁnds values that satisfy fclient. The
hope is that if the server rejects the input it is because of the vari-
ables appearing in δ, not the remaining variables; otherwise, it is
unclear whether or not the server performs sufﬁcient validation to
avoid the potential vulnerability δ.
In the example above, the disjunctive normal form of ¬fclient
produces a formula with two disjuncts.
_ ¬(copies > 0) ∧ ¬(copies = 0)
¬(directions ∈ [a-zA-Z]*)
Suppose that both copies and directions are required. The ﬁrst
disjunct does not include directions, and the second does not in-
clude copies. After solving the ﬁrst disjunct with, for example,
copies = −1, NOTAMPER assigns directions a value that satis-
ﬁes the original formula, i.e., that satisﬁes directions ∈ [a-zA-Z]*.
Likewise, after solving the second disjunct producing a value for
directions, NOTAMPER assigns copies a value that satisﬁes the
original formula, e.g., copies = 1.
4.4 Constraint Solving
To solve formulas in the constraint language, NOTAMPER uses
a custom-written constraint solver built on top of HAMPI [13], a
solver that handles a conjunction of regular language constraints on
a single variable of a ﬁxed length. Our formula involves multiple
variables, and therefore we developed our own procedure that uses
HAMPI as described below.
NOTAMPER handles disjunction by converting a given formula
to DNF 1 and solving each disjunct independently. For a given
613Algorithm 1 SOLVE(vars, φ, asgn, BOUNDS)
1: if vars = ∅ then return asgn
2: values := ∅
3: var := CHOOSE(vars, φ, asgn, BOUNDS)
4: for all i in LOW(BOUNDS(var)) .. HIGH(BOUNDS(var)) do
5:
6:
7:
if SAT(φ, asgn ∪ {var → i}) then
if NUMERIC-VAR(var) then
newasgn := SOLVE(vars–{var}, φ, asgn ∪ {var→ i},
BOUNDS)
if newasgn (cid:54)= unsat then return newasgn
else
if not SAT(φ∧ len(var)=i, asgn) then goto next i
loop
val := HAMPI(φ|var ∧ var (cid:54)∈ values, i)
if val = unsat then goto next i
values := values ∪ {val}
if SAT(φ, asgn ∪ {var → val}) then
:= SOLVE(vars–{var}, φ,
newasgn
{var→val}, BOUNDS)
if newasgn (cid:54)= unsat then return newasgn
asgn ∪
8:
9:
10:
11:
12:
13:
14:
15:
16:
17:
18: return unsat
disjunct (which is a conjunction), NOTAMPER performs type in-
ference to determine which variables are numeric and which are
strings, extracts bounds on the size of all variables, and simpliﬁes
the disjunct to produce a conjunction of atoms from Table 3. Then
applies Algorithm 1 to search for a variable assignment satisfying
the resulting conjunction.
Algorithm 1 takes as input a list of variables that require val-
ues, a logical formula, a partial variable assignment, and a function
that maps each variable to that variable’s bounds. It either returns
unsat (denoting that no satisﬁable assignment is possible) or an
extension of the given variable assignment that satisﬁes the logical
formula.
The ﬁrst step of the algorithm is choosing a variable to assign.
Currently, NOTAMPER chooses the variable with the smallest range
of possible lengths. Then search commences. String variables and
numeric variables are treated differently. For numeric variables,
NOTAMPER loops over possible values and for each one checks
that assigning the variable the current loop value satisﬁes the con-
straints.
If satisfaction holds, the variable is assigned the loop
value.
For strings, NOTAMPER loops over possible lengths (as opposed
to possible values), and for each one satisfying the length con-
straints invokes HAMPI to generate a variable assignment. HAMPI
takes as input a logical formula with one variable and a length for
that variable. It either returns unsat or a value satisfying the for-
mula. Reducing the given formula φ with multiple-variables to
a formula with just the chosen variable, denoted φ|var, is per-
formed by selecting the subset of constraints where only the chosen
variable occurs. If HAMPI ﬁnds a satisfying value, the algorithm
checks that the value satisﬁes the relevant constraints HAMPI does
not check: those constraining multiple variables. Additionally, the
algorithm keeps a list of values HAMPI returns so that if the search
fails at a later point in the search, and another value needs to be gen-
erated for the current variable, we can augment the logical formula
given to HAMPI to require a value not already chosen.
Once a variable has been assigned a value, Algorithm 1 recurses
on the original variable list after having removed the chosen vari-
able, the original logical formula, the original variable assignments
augmented with the chosen variable’s assignment, and the origi-
nal variable bounds. When the variable list becomes empty, the
algorithm returns the given variable assignment, indicating that all
constraints are satisﬁed by that assignment. If no such assignment
can be found, the algorithm returns unsat.
4.5 HTML Response Comparison
In order to determine whether hostile inputs were accepted by
the server, our approach compares the server’s response against a
response that is known to have been generated by benign (valid)
inputs. Since the server’s responses are in HTML, we have to em-
ploy HTML similarity detection. There are many similarity detec-
tion algorithms for HTML responses in the literature, the most no-
table being algorithms for computing tree edit distance (ref.
[5]).
These are especially useful in case of documents derived from a
variety of sources that may contain similar content (e.g., news arti-
cles from various newspapers). In our case, since the HTML doc-
uments are produced by a single web application, it is very likely
that these responses are structurally more aligned than documents
from different sources, and therefore we use a home-brewed doc-
ument comparison strategy based on the Ratcliff and Obsershelp
algorithm [16] on approximate string matching.
Approximate matching. An important issue to be addressed
in response comparison is that the contents of a HTML response
will frequently include a number of variable elements that are not
dependent on the server inputs, e.g., time stamps, user names, num-
ber of people logged in. A large number of such elements introduce
differences in benign responses, even when the inputs are identical;
therefore, we resort to an approximate matching strategy that ﬁlters
out such noise from benign responses before comparing to hostile
responses.
Suppose we have just two benign responses B1 and B2. Analyz-
ing these responses and extracting their differences will often iso-
late the noisy elements in the page. These noisy elements can then
be removed. For this purpose, we developed a utility that analyzes
these two responses and returns the following: (1) the common se-
quences in B1 and B2 (2) content in B1 that is not in B2, and (3)
content in B2 that is not in B1. Elements (2) and (3) comprise the
noise, and once eliminated from B1 and B2 respectively, we arrive
at the same HTML document C1.
To analyze hostile response hi, we repeat the noise elimination
procedure, only this time with ﬁles B1 and Hi. The resulting
HTML, C2, produces two possibilities, depending on whether the
input hi was accepted or not. If the input was accepted, based on
our observation above, the server response Hi is likely to be sim-
ilar (modulo noise) to B1, and therefore the result C2 is likely to
be structurally the same as C1. In case the input was rejected, the
server returns a response that is likely to be structurally dissimilar,
and therefore C2 will be less similar to C1.
The ﬁnal step is the comparison between C1 and C2. Again, a
naive comparison will not work because of the possibility that not
all noise causing elements were removed during the earlier step.
For example, page generation times are often embedded in the page
itself, if the times were the same for B1 and B2, but different for
H1, then C1 and C2 will not be strictly structurally the same. In-
stead, we again use our approximate matching strategy on C1 and
C2 as inputs. Only this time, we compute the edit distance between
the two structures, resulting in a numeric value (that we call differ-
ence rank) for each hostile input. The higher the rank for a given
hostile input, the less likely it is that the input points to a potential
vulnerability.
Complexity. Our comparison strategy for HTML ﬁles is based
on the gestalt pattern matching procedure [16], which itself ﬁnds
the longest common subsequence between HTML ﬁles, and then
recursively ﬁnds the common elements to the left and right of the
614Application
SMF
Ezybiz
OpenDB
MyBloggie
B2evolution