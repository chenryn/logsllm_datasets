# Trapped by the UI: The Android Case

## 1. Introduction
Android activities are a fundamental building block of Android applications, and they play a crucial role in intra- and inter-app navigation. Activities can be launched from other apps using intents, a special Android mechanism that enables communication between applications through asynchronous messages. This paper explores how Android UI elements interact with each other, both within and outside the scope of an app, and the potential security implications of these interactions.

### 1.1 Interaction of Android UI Elements
A dialog window typically cannot appear outside the scope of its calling app unless it is granted the `SYSTEM_ALERT_WINDOW` permission. This permission is a signature-level permission, more stringent than dangerous permissions, and allows an application to create windows that appear on top of all other apps. According to Google Developer resources, very few apps should use this permission, as it is intended for system-level interaction with the user. 

On the other hand, a newly launched activity can, by default, appear on top of another app without requiring any special permissions. This is the usual way of interaction in the Android OS, where apps are stacked on top of each other, often as a result of user actions. The Android Intent mechanism supports this behavior, allowing activities to launch other activities or even return results.

### 1.2 Recent Changes in Android UI
Recently, new features such as messaging apps' "chatheads" and Multi-Window have introduced more complex stacking behaviors. These features allow for more sophisticated UI interactions but also introduce new security challenges.

## 2. Attacks on the User Interface
Malware often aims to perform unauthorized actions on victims' devices. If an adversary cannot find a vulnerability to penetrate the device, they may try to trick the user into performing the malicious action. Social engineering methods, such as convincing the user to install a malicious application or change specific OS settings, are common tactics.

### 2.1 Transparent Layer Attacks
One method used by malicious applications is to provide a transparent layer on top of a legitimate application to steal sensitive user input. This type of attack is particularly effective on mobile devices due to their UI characteristics.

### 2.2 Documented Attacks
Several attacks targeting Android have been documented in literature. For example, Niemietz and Schwenk [30] created an overlay that was "touch transitive," meaning clicks were transferred to the underlying application. This allowed them to trick users into making unauthorized calls to premium numbers.

Chen et al. [18] used a side-channel attack to infer the foreground activity based on memory consumption patterns. By monitoring network traffic, they could determine when the user was presented with a login screen or payment details, allowing them to bring a malicious app to the foreground and trick the user into disclosing sensitive information.

Bianchi et al. [16] categorized Android UI attacks under the umbrella of GUI confusion attacks. They discussed the leakage of the foreground application via `/proc/[pid]/cgroups` and how this can be exploited by monitoring binder IPC calls. Fernandes et al. [21] provided a more advanced mechanism to mitigate such attacks.

Ying et al. [41] focused on custom ROMs, exploiting the `SYSTEM_ALERT_WINDOW` permission. Using Tacyt, they identified numerous versions of apps in Google Play and outside it that use this permission. However, for Android AOSP, their attack is not valid as major corporations would not risk their business by exploiting this permission.

### 2.3 Countermeasures
Several countermeasures to UI redressing attacks have been proposed. The latest version of Android AOSP (7.1.1 at the time of writing) includes several security features to tackle these attacks. Despite these defenses, many attacks can still be launched on a wide range of Android versions, indicating that the defense mechanisms are not yet robust enough.

## 3. The Attacks
This section presents the backbone of our attacks, including the threat model, technical details, and research findings that enable the realization of these attacks.

### 3.1 Threat Model
We assume that the victim has been tricked into installing a malicious app. To minimize the risk of alerting the user, we request only the Internet permission, which is considered a normal permission in Android 6. Our threat model assumes the device has not been compromised via a root exploit. We use Firebase for stealthy communication, as it is considered secure and trustworthy.

### 3.2 Drawing over Other Activities
We exploit Android's UI and side-channel information to steal or interfere with user input. This involves two cases: one where a transparent overlay activity covers another, and one where non-transparent activities partially cover other activities.

For the former, we use the `Theme.Translucent.NoTitleBar` parameter to make an activity transparent and extend it to full screen. For the latter, we define Application Theme styles and override the `onCreate()` method to fine-tune the layout parameters. These properties can be used to create arbitrary stacks of activities, allowing an adversary to create interfaces that pass user interactions to underlying activities.

### 3.3 Tricking Users to Open Apps
Google introduced notifications in API level 4. As of API level 23, developers can fetch all notification content from the Internet, allowing for dynamic content. Shortcuts, created using intents, can also be dynamically set, providing another vector for attacks.

### 3.4 Sniffing PIN/Pattern
Modern smartphones use various authentication methods, such as PINs and patterns. Patterns are stored as unsalted SHA-1 hashes in the `gesture.key` file, while PINs and passphrases are stored in the `password.key` file. We discuss how these can be targeted in attacks.

## 4. Conclusion
This paper provides an overview of how Android UI elements interact and the potential security risks associated with these interactions. We present several documented attacks and discuss the current state of countermeasures. Our research highlights the need for more robust defense mechanisms to protect against UI-based attacks.

---

This revised text is more structured, clear, and professional, making it easier to understand the key points and the overall context of the topic.