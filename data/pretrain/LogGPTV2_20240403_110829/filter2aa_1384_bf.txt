print the words “Hello world” to the screen. To do this, you use a text editor such as
Vim. Create a new, blank script by typing vim hello.rb. 
TIP
You should already have Vim installed. If you don’t, type the following
command at the prompt: sudo apt install vim. 
HELLO WORLD IN TWO LINES OF CODE
You may have tried to use Vim or Vi before: opened a file, tried to edit it and couldn’t,
closed Vim, and decided it wasn’t for you. This is most likely because you were stuck in
the wrong mode. Vim has different modes that allow you to do different things. One of
the reasons I recommend using Vim is the power-line status bar, which lets you know
which mode you’re in. By default, Vim opens in Normal mode. 
 To edit the hello.rb file, you need to change to Insert mode, which you do by press-
ing the letter I for insert. When you’re in Insert mode—indicated by -- INSERT -- in
the status bar—type the following two lines of code (see figure A.1):
#!/usr/bin/env ruby
puts "Hello world"
Figure A.1
Switching to Insert mode to add two lines of code
231
APPENDIX A
Building a virtual pentest platform
To save these changes to the file, exit from Insert mode back into Normal mode by
pressing the Esc key. Once you’re back in Normal mode, type :x, which is shorthand
for exiting and saving the current file. Now you can run your Ruby program by typing
ruby hello.rb from within the directory where the file you just created resides:
~$ ruby hello.rb 
Hello world
USING METHODS
You’ve just written your first Ruby program, but it doesn’t do much. Let’s expand it a
little. First, you can wrap the call to puts "Hello world" in its own method and call it
that way. A method or function is a snippet of code wrapped in a block that can then be
called multiple times by other sections of code in the same program. Open your
hello.rb file again with Vim. Switch into Insert mode, and then make the following
modifications to your code:
#!/usr/bin/env ruby
def sayhello()
  puts "Hello World!"
end
sayhello()
In case it’s not obvious to you, you’ve defined a method named sayhello() and
placed the call to puts "Hello World" in the method. Then you call the method. If
you exit and save, the program does exactly the same thing as before; it’s just using a
method call to do it. 
COMMAND-LINE ARGUMENTS
How about changing the program output to an argument that is passed at runtime?
That’s easy enough—open the hello.rb file again with Vim, switch into Insert mode,
and make the following modifications to the code:
1
Change def sayhello() to def sayhello(name). You’re modifying this method
to take in a parameter variable called name when it’s called.
2
Change puts "Hello world" to puts "Hello #{name.to_s}" to pass in the
name variable as input to the puts method. The .to_s is a special Ruby method
that stands for to string. This ensures that only a string value is passed to the
puts method even if a non-ASCI string was provided.
3
Add the new line name = ARGV[0] to create a variable called name and assign it
the value ARGV[0], which is a special Ruby array containing all arguments
passed to the program when it was run from the command line. The [0] says
the program is only interested in the first argument. If more than one argu-
ment was provided, the remaining arguments will be ignored. 
4
Change the call to sayhello() to sayhello(name) to pass in the name variable
as a parameter to the sayhello() method.
232
APPENDIX A
Building a virtual pentest platform
Here’s the revised hello.rb file:
#!/usr/bin/env ruby
def sayhello(name)
  puts "Hello #{name.to_s}!"
end
name = ARGV[0]
sayhello(name)
After you exit and save the file, you can run it with ruby hello.rb Pentester. The
program should output “Hello Pentester” to your terminal.
CODE BLOCK ITERATIONS
Iterating through a block of code is easy in Ruby. Ruby uses curly braces: the { and }
keys on your keyboard. Here is a quick example. Open the hello.rb file one last time,
and make the following adjustments:
1
Change def sayhello(name) to def sayhello(name, number), adding a second
parameter variable called number as input to this method.
2
Change puts "Hello #{name.to_s}!" to puts "Hello #{name.to_s} #{num-
ber.to_s}!", adding in the new variable to the end of the string.
3
Change sayhello(name) to 10.times { |num| sayhello(name, num) }.
The last line probably looks a little strange to you if you’ve never written Ruby
before, but it’s actually pretty intuitive. First you we have a numeric integer 10
that’s easy enough to understand. Next you call the Ruby .times method on that
integer, which takes in a code block that’s placed in { and } to be executed that
many times. Each time the code block is executed, the variable placed in | and |
(num, in this case) will increment until the block has been executed 10 times. 
Here’s the revised hello.rb file:
#!/usr/bin/env ruby
def sayhello(name, number)
  puts "Hello #{name.to_s} #{number.to_s}!"
end
name = ARGV[0]
10.times { |num| sayhello(name, num) }
If you now run the script with ruby hello.rb Royce, you should see the following
output:
~$ ruby hello.rb Royce
Hello Royce 0!
Hello Royce 1!
Hello Royce 2!
233
APPENDIX A
Building a virtual pentest platform
Hello Royce 3!
Hello Royce 4!
Hello Royce 5!
Hello Royce 6!
Hello Royce 7!
Hello Royce 8!
Hello Royce 9!
That’s enough Ruby for now; I only wanted you to get a feel for it because you’ll use it
to script some automated pentest workflows in this book. This section also serves a
dual purpose because installing RVM is a prerequisite for getting up and running with
the Metasploit framework, which is one of the most awesome hacker tool kits used by
pentesters today.
A.5
The Metasploit framework
Metasploit is another popular and useful suite of tools made for and by information
security professionals. Although its primary use is a software exploitation framework,
several of its auxiliary scan modules are useful on a network pentest. Combined with
Ruby skills beyond what I have introduced here, Metasploit can also be a powerful
automation framework for developing custom pentest workflows that are limited by
only your imagination.
 You learn how to use several components of the Metasploit framework throughout
many of the chapters in this book, but for now let’s focus on the installation process
and navigating the msfconsole. In this book, you use some of the auxiliary modules to
detect vulnerable systems and some of the exploit modules to compromise a vulnera-
ble target. You also become familiar with the powerful Meterpreter payload, for which
Metasploit is loved by pentesters.
A.5.1
Operating system dependencies
There are quite a few OS dependencies here. You should assume that some of those
listed in this appendix are already obsolete or replaced by later versions. I’m going to
provide the command for the sake of completeness, but I recommend going to the
rapid7 GitHub page to grab the latest dependencies: http://mng.bz/MowQ.
 To install the dependencies in your Ubuntu VM, run the following command:
~$ sudo apt-get install gpgv2 autoconf bison build-essential curl git-core
libapr1 libaprutil1 libcurl4-openssl-dev libgmp3-dev libpcap-dev libpq-dev
libreadline6-dev libsqlite3-dev libssl-dev libsvn1 libtool libxml2 libxml2
dev libxslt-dev libyaml-dev locate ncurses-dev openssl postgresql
postgresql-contrib wget xsel zlib1g zlib1g-dev
Once that’s finished, get the source code from GitHub and check out the latest repos-
itory to your Ubuntu VM:
~$ git clone https://github.com/rapid7/metasploit-framework.git
234
APPENDIX A
Building a virtual pentest platform
A.5.2
Necessary Ruby gems
Now that you’ve checked out the Metasploit code, run the following command at the
prompt to navigate to the newly created Metasploit directory:
~$ cd metasploit-framework
If you run the ls command while in this directory, you’ll notice a file called Gemfile;
this is a special file among Ruby applications that contains information about all of
the external third-party libraries that need to be installed and included for the appli-
cation to function properly. In the Ruby world, these libraries are called gems. Nor-
mally you would use the gem command to install a particular library, such as gem
install nokogiri. But when an application requires lots of gems—and Metasploit
certainly does—a Gemfile is often provided by the developers so you can install all the
gems in the file using bundler (which is itself a Ruby gem—you installed it when you
set up RVM). 
 Speaking of RVM, here’s an example of why it is so useful. In the metasploit-
framework directory, notice the file named .ruby-version. Go ahead and cat out that
file: cat .ruby-version. This is the version of Ruby that is required to run the
framework properly. At the time of writing, it’s version 2.6.2, which is separate from the
2.6.0 version that you installed with RVM. Don’t worry—you can install the required
version by running the following command at the prompt, substituting the required
version number for 2.6.2:
~$ rvm --install 2.6.2   
With the proper version of Ruby installed, you can install all of the necessary
Metasploit gems by typing the bundle command as follows within the same directory
where the Gemfile is located.
~$ bundle
Fetching gem metadata from https://rubygems.org/................
Fetching rake 12.3.3
Installing rake 12.3.3
Using Ascii85 1.0.3
Using concurrent-ruby 1.0.5
Using i18n 0.9.5
Using minitest 5.11.3
Using thread_safe 0.3.6
Using tzinfo 1.2.5
Using activesupport 4.2.11.1
Using builder 3.2.3
Using erubis 2.7.0
Using mini_portile2 2.4.0
Fetching nokogiri 1.10.4
Listing A.4
Installing the necessary Ruby gems using bundle
Replace 2.6.2 with the 
required version number.
235
APPENDIX A
Building a virtual pentest platform
Installing nokogiri 1.10.4 with native extensions
Using rails-deprecated_sanitizer 1.0.3
Using rails-dom-testing 1.0.9
.... [OUTPUT TRIMMED] ....
Installing rspec-mocks 3.8.1
Using rspec 3.8.0
Using rspec-rails 3.8.2
Using rspec-rerun 1.1.0
Using simplecov-html 0.10.2
Fetching simplecov 0.17.0
Installing simplecov 0.17.0
Using swagger-blocks 2.0.2
Using timecop 0.9.1
Fetching yard 0.9.20
Installing yard 0.9.20
Bundle complete! 14 Gemfile dependencies, 144 gems now installed.
Use `bundle info [gemname]` to see where a bundled gem is installed.
When the bundler gem has finished installing all of the necessary Ruby gems from
your Gemfile, you should see output similar to listing A.4.
A.5.3
Setting up PostgreSQL for Metasploit
The final step in setting up Metasploit is to create a PostgreSQL database and popu-
late the YAML configuration file with the necessary login information. You should
already have PostgreSQL installed in your Ubuntu VM, but if you don’t, run the fol-
lowing command to install it:
~$ sudo apt install postgresql postgresql-contrib
Now that the server is installed, you can get your database up and running with the
following five commands, run sequentially:
1
Switch to the postgres user account:
~$ sudo su postgres
2
Create a postgres role to be used with Metasploit:
~$ createuser msfuser -S -R -P
3
Create the Metasploit database in the PostgreSQL server:
~$ createdb msfdb -O msfuser
4
Exit the postgres user session:
~$ exit
5
Enable PostgreSQL to start automatically:
~$ sudo update-rc.d postgresql enable
236
APPENDIX A
Building a virtual pentest platform
All right, you’ve created a database and user account just for Metasploit, but you need
to tell the framework how to access them. This is accomplished using a YAML file.
Create a directory called .msf4 in your home directory with the following command:
mkdir ~/.msf4
If you were impatient and already launched the msfconsole, then this directory exists.
In that case, change into it. Now, create a file named database.yml with the contents
shown in listing A.5. 
NOTE
Be sure to change [PASSWORD] to match the password you used when
you created the msfuser postgres account.
# Development Database
development: &pgsql
 adapter: postgresql   
 database: msfdb    
 username: msfuser    
 password: [PASSWORD]   
 host: localhost    
 port: 5432    
 pool: 5    
 timeout: 5    
# Production database -- same as dev
production: &production
  search invoker 
Matching Modules
================
   #  Name                                    Disclosure Date  Rank      
Check  Description
   -  ----                                    ---------------  ----       
----  -----------
exploit/multi/http/jboss_invoke_deploy  2007-02-20             JBoss
DeploymentFileRepository WAR Deployment (via JMXInvokerServlet)  