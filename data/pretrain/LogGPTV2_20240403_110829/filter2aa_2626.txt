Abusing 
Sast Tools 
@DEFCON
When scanners do more than just scanning
Who am I?
Rotem Bar
Head of Marketplace @ Cider Security
-
Bug Bounty Researcher
-
Cyber Paladin
@rotembar
Security Engineers
A person that tells others where 
they have problems, and helps them 
fix them.
DevOps
Engineers who are in charge 
of large scale deployments.
SAST Builders
Developers who have decided 
to automate their efforts for 
finding security bugs.
Bad Guys
People who have decided to 
harm other people for a living.
Target Audience
SAST 101
01
How Scanners Work
02
Hacking Time
04
What is the Impact
05
Previous Research
03
Conclusions
06
Table of Contents
SAST 101
01.
Static Application Security Testing
Static program analysis is the 
analysis of computer software that is 
performed without actually 
executing programs
—Wikipedia
https://en.wikipedia.org/wiki/Static_program_analysis
Why do we Run SAST?
1. Stop bad security practices
2. Prevent infrastructure mistakes 
3. Assess code security
4. Create Standardization and 
consistency
SAST Pros VS Cons
FAST
Can run on source code without 
any need to compile
False Positives
Cannot validate findings
SAFE
Does not execute code
Hard to track flow control
Some languages are almost 
impossible to track statically
EASY
Can be run on code, without the 
need for more resources
How Scanners 
Work
02.
High Level Overview
Code
Parses files in folder 
and searches for 
matching 
extensions
AST
Converts code 
into AST 
structures
Processing
Runs predefined 
rules on AST
with flow control 
analysis
Results
Creates results 
based on user 
configuration
01
02
03
04
Log(1 + 2* 3)
Sample AST
BASIC Rule
if 
typeof expression = CallExpression 
and
expression.callee.name = log
and
expression.arguments.length > 0
Then
“Found a log function with more than one 
argument”
Can Get Complex
if 
typeof expression = CallExpression 
and
expression.callee.name = log
and
expression.arguments.length > 0
Then
SOURCE = express.arguments[0]
if 
typeof expression = CallExpression 
and
expression.callee.name = eval
and
Expression.arguments.length > 0
SINK = express.arguments[0]
If path between SINK and SOURCE then
Report findings
Static program analysis is the 
analysis of computer software that is 
performed without actually 
executing programs
—Wikipedia
https://en.wikipedia.org/wiki/Static_program_analysis
What If?
I could write code that will intentionally 
abuse a SAST scanner’s behavior when 
being statically scanned 
Previous 
Research
03.
CHECKOV RCE
https://security.paloaltonetworks.com/CVE-2021-3035
KIBIT
Terraform?
SNYK
TERRASCAN
Terraform Plan
https://github.com/rung/terraform-provider-cmdexec
terraform-provider-cmdexec provides command execution from Terraform Configuration.
Terraform has local-exec provisioner by default. but provisioner is executed when terraform apply. On the 
other hand, terraform-provider-cmdexec execute a command when terraform plan.
This provider was originally created for 
penetration testing of CI/CD pipeline.
By Hiroki Suezawa
See also for detailed execution => https://alex.kaskaso.li/post/terraform-plan-rce
Hacking Time
04.
Disclaimer
Open source is awesome
I believe in building and using open source software.
Open source software has made, and continues to make, our lives much easier and 
our world much more secure. 
We need to use it responsibly
When we expose OSS to our sensitive code and environments, we are obligated to 
do it responsibly;
We should not expect OSS to provide the same level of security as their commercial 
alternatives. 
We should assume the OSS could potentially contain security flaws and make sure it 
is properly configured and running in a safe environment. 
Setting up the Experiment
Working 
Directory
Observe Outcome
Execute 
Scanner
Clone Repo
Add “evil” files
Experiment #1
Checkov is a static code analysis tool for infrastructure-as-code.
CI Configuration Hijacking
Repo Clone
Scan
Does 
.checkov.yml 
exist?
Load 
configuration
check: 
-
NONE
Demo
Scanner
Config
PHPSTAN
phpstan.neon
TFSEC
.tfsec/config.json
KICS
kics.config
BANDIT
.bandit
BRAKEMAN
config/brakeman.yml
CHECKOV
.checkov.yaml
SEMGREP
.semgrep.yml
Scanners Config Hijack Table
4.9k
2.9k
6.2k
3.3K
0.6K
2.9k
10k
Scanner 
Hijacking
Altering source code in a manner that is 
intended to manipulate and abuse the 
scanner behavior
Experiment #2
CI Configuration Execution
Repo Clone
Scan
Does 
.checkov.yml 
exist?
Load 
configuration
external-checks: 
-
checks
Does 
checks/__init__.py 
exist?
Load all files 
in checks and 
execute them
Demo
Experiment
 #3
KIBIT
kibit is a static code analyzer for Clojure, ClojureScript, cljx and other 
Clojure variants. It uses core.logic to search for patterns of code that could 
be rewritten with a more idiomatic function or macro.
Will it Execute?
Experiment #4
Experiment #5
PMD_JAVA_OPTS="-jar EvilJar.jar"
Scanner
Config
ENV
Code
Checkov
PHPSTAN
RUBOCOP
KIBIT
PMD
CDXGEN
DEP-SCAN
Scanners Config Execution Table
And growing...
16
1.7k
11.4k
3.5k
10k
2.9k
74
Static program analysis is the 
analysis of computer software that is 
performed without actually 
executing programs
—Wikipedia
https://en.wikipedia.org/wiki/Static_program_analysis
Your Code will 
probably be 
able to execute 
other programs 
What is the 
Impact?
05.
SAST Tool Environments
Developer
Machines
Security
Researchers
CI/CD
Developer
Machines
Security
Researchers
CI/CD
SAST Tool Environments
CI/CD Whole Flow
Commit & Push to 
Dev Branch
CI Checks
Pull Request 
Created
Merge into 
Production
Commit & Push to 
Master Branch
CI Checks
CD Deployments
CI Checks
CI/CD Implications
Bypass 
Protections
Configure ourselves 
the “Policy” for 
security
Extract 
Sensitive Data
We can extract data which 
resides in our CI/CD 
Environment
Deploy Assets to 
Production
Infiltrate the 
Network
By executing code we can 
insert ourselves into 
restricted environments
Command
Execution
Conclusions
06.
Assume Code will Execute
When repo will be scanned by scanner, 
script will execute
Sample Attack Flow
Commit & Push to 
Dev Branch
CI Checks
Pull Request 
Created
Merge into 
Production
Commit & Push to 
Master Branch
CI Checks
CD Deployments
1.
Add code execution script to scanner 
config file
2.
Push new commit into branch
3.
Create a PR Request
Script will override CI Checks, Tell scanner all is 
good and will attempt to steal credentials
CI Checks
High Level Possible Resolutions
Network:
●
Isolate all activities to needed resources only
●
Ensure egress filters are blocking traffic
Host:
●
Ensure scan runs in unprivileged 
containers/systems
●
Verify pods are deleted after scanning finishes
Monitor:
●
Log abnormal behavior:
○
Tool output
○
Running time
○
File system
○
Network access
Education:
●
Understand the risks when running unverified code 
in your CI/CD environments or development 
laptops
Execution:
●
Verify tool is executed with wanted configuration
●
Create a clean environment where the tool would  
be executed
●
Ensure to cap processing power and activity time
Configuration:
●
Ensure tool is not picking up or executing code
Conclusions
The security needs of this world are getting bigger every day.
This generated growing amounts of security automation 
We need to be proactive and start thinking about how the next 
generation of attackers can abuse the automations we are building to 
attack our infrastructure.
What’s next?
What’s Next?
The research has just begun!
●
Understand and deep dive into additional SAST scanners
●
Assess additional automation tools out there - Linters, Code 
Coverage, Testing Frameworks, ....
●
Analyze Wrappers for tools - GitHub Actions, Orbs, ...
●
Create standard for securely working with code analysis 
tools of any kind
Thanks
@rotembar
Community => https://rebrand.ly/security-tools-defcon
POC => https://github.com/cider-rnd/cicd-lamb
I want to thank all of the 
open source developers out 
there for creating these 
awesome security tools.