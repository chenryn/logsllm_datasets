### 优化后的文本

#### 多项式拉格朗日插值
```ocaml
let basis_loop x xmx ys =
  if (x - y) / (xmx - y) then basis_loop x xmx ys
  else ys

let basis (x: t) (xmx: t) (xm: t list) : t =
  List.fold_right (fun (x, y: t * t) -> x * y) (basis_loop x xmx xm) F.one

let interpolate_loop (x: t) (xm: t list) (pm: (t * t) list) : t list =
  match pm with
  | [] -> []
  | y :: ys -> 
      (basis x (fst y) xm) * (snd y) :: interpolate_loop x xm ys

let interpolate (x: t) (pm: (t * t) list) : t =
  let xm = List.map fst pm in
  let bs = interpolate_loop x xm pm in
  List.fold_right (fun (x, y: t * t) -> x + y) bs F.zero
```
**图29：多项式拉格朗日插值**

#### 诚实但好奇（HBC）秘密共享安全性
```ocaml
theory HBCSecretSharingSchemeSecurity.
clone import SecretSharingScheme.

module type Rand_t = {
  proc gen() : rand_t
}

module type Oracles_t = {
  proc corrupt(pid: p_id_t) : unit
}

...

module type Adv_t (O: Oracles_t) = {
  proc choose() : secret_t * secret_t
  proc guess(ss: shares_t) : bool
}

module Game (R: Rand_t) (A: Adv_t) = {
  module O = Oracles
  module A = A(O)
  
  proc main() : bool = {
    ...
    b <\$ {0,1}; r <@ R.gen(); O.init();
    (s0, s1) <@ A.choose();
    ss <- share r (if b then s1 else s0);
    ss <- get_corrupted O.corrupted ss;
    b' <@ A.guess(ss);
    return (b = b')
  }
}

end HBCSecretSharingSchemeSecurity.
```
**图30：诚实但好奇（HBC）的秘密共享安全性**

为了定义份额的完整性，我们使用了图31所示的安全概念。要赢得安全游戏，对手需要提供一些未通过诚实执行秘密共享方案获得的伪造份额。我们在对手神谕中模拟整个安全体验，让他可以访问一个份额神谕（提供对手诚实生成的份额）和一个伪造神谕（对手可以用来测试某些份额是否是有效的伪造）。

我们之所以在对手神谕内建模安全目标，而不是通常的方式（对手只有访问份额神谕，并输出将被测试伪造有效性的份额），是因为这大大简化了与诚实但好奇的秘密共享方案的组合证明。

#### 承诺方案的安全性
承诺方案的安全性如图32所示。这是一个类似于其他完整性或真实性方案（如MAC方案）的安全定义。对手可以要求进行承诺，并且可以检查某个承诺是否对某个消息有效。然后，它会尝试伪造一个验证通过但不是通过诚实执行承诺方案获得的消息/承诺对。

最后，我们定义了秘密共享方案的恶意安全性，如图33所示。在这种安全体验中，对手将试图破坏份额的完整性或不可区分性。为此，它被赋予了一个重构神谕，该神谕提供了使用所需的一组份额重构的秘密。可以通过将诚实但好奇的秘密共享方案与不可伪造的承诺方案组合来获得恶意（可验证）的秘密共享方案。

#### 完整性安全的秘密共享
```ocaml
theory INTSecretSharingSchemeSecurity.
clone import SecretSharingScheme.

module type Rand_t = {
  proc gen() : rand_t
}

module type Oracles_t = {
  proc share(s: secret_t) : shares_t option
  proc forge(ss: shares_t) : unit
}

module type Adv_t (O: Oracles_t) = {
  proc main() : unit
}

...

module Game (R: Rand_t) (A: Adv_t) = {
  module O = Oracles
  module A = A(O)
  
  proc main() : bool = {
    ...
    r <@ R.gen(); O.init(r);
    A.main();
    return (O.forgery)
  }
}

end INTSecretSharingSchemeSecurity.
```
**图31：秘密共享的完整性安全**

#### MPC安全定义
MPC协议的私有（主动）安全定义可以在图34中找到。安全体验按阶段工作：
- 初始阶段（图34中的`initial`）首先用协议输入、随机性和空的腐败集初始化。
- 在每个阶段执行之前，对手可以选择更改一方将用于执行协议阶段的输入，或者直接放弃。
- 阶段执行的结果随后作为下一个协议阶段的输入。

在理想场景中，体验将运行一个使用某些辅助输入（我们表示为`leak_t`）和腐败方的输入份额的模拟器。这个模拟器需要能够生成具有与实际协议执行输出相同概率分布的随机硬币和通信痕迹。对于这种特定的私有安全性情况，我们希望模拟器还能够模拟腐败方的输出份额。

图35中的随机安全性定义与私有安全性非常相似。实际上，唯一的区别是协议输入类型（每方只有一份额作为输入）和模拟器类型（现在需要基于辅助输入、腐败输入份额和腐败输出份额生成随机硬币和对话痕迹）。

类似地，主动安全性可以被视为一种特殊的重新随机化协议，例如刷新协议，但它会削弱恢复方之前的份额。简而言之，这意味着，在协议执行后，恢复方即使从一个腐败的份额开始，也会有一个良好的份额。主动安全性的定义可以在图36中找到。

#### 不可伪造的承诺方案
```ocaml
theory CommitmentShemeSecurity.
clone import CommitmentScheme.

...

module type Rand_t = {
  proc gen() : rand_t
}

module type Oracles_t = {
  proc mac(m: msg_t) : commit_t
  proc verify(m: msg_t, t: commit_t) : bool
  proc forge(m: msg_t, t: commit_t) : unit
}

module type Adv_t (O: Oracles_t) = {
  proc main() : unit
}

...

module Game (R: Rand_t, A: Adv_t) = {
  module O = Oracles
  module A = A(O)
  
  proc main(): bool = {
    ...
    r <@ R.gen(); O.init(r);
    A.main();
    return (O.forgery)
  }
}

end CommitmentShemeSecurity.
```
**图32：承诺方案的不可伪造性**

#### 恶意安全的秘密共享
```ocaml
theory MALSecretSharingSchemeSecurity.
clone import SecretSharingScheme.

...

module type Rand_t = {
  proc gen() : rand_t
}

module type Oracles_t = {
  proc corrupt(pid: p_id_t) : unit
  proc reconstruct(ss: shares_t) : secret_t option
}

module type Adv_t (O: Oracles_t) = {
  proc choose() : secret_t * secret_t
  proc guess(ss: shares_t) : bool
}

module Game (R: Rand_t) (A: Adv_t) = {
  module O = Oracles
  module A = A(O)
  
  proc main() : bool = {
    ...
    b <\$ {0,1}; O.init(); r <@ R.gen();
    (s0, s1) <@ A.choose();
    ss <- share r (if b then s1 else s0);
    ss <- get_corrupted O.corrupted ss;
    b' <@ A.guess(ss);
    return (b = b')
  }
}

end MALSecretSharingSchemeSecurity.
```
**图33：秘密共享的恶意安全性**

#### 私有安全性
```ocaml
theory ProtocolPrivateSecurity.
...

module Game (R: Rand_t, Z: Environment_t, A: Adversary_t, S: Simulator_t) = {
  module O = Oracles
  module A = A(O)
  
  b <\${0,1};
  inps <@ Z.choose();
  r <@ R.gen(inps);
  C.init(inps);
  
  if valid_inputs inps && valid_rands r inps then
    if b then
      A.run();
      (cc, yy) <- P.prot r inps;
      cc <- filter_corrupt_convs cc C.corrupt;
      b' <@ Z.guess(poutput2foutput yy, filter_corrupt_outputs yy C.corrupt, cc)
    else
      A.run();
      finp <- pinput2finput inps;
      y <- F.f finp;
      l <- F.φ finp;
      (yy, cc) <@ S.simm(l, filter_corrupt_inputs inps C.corrupt, C.corrupt);
      b' <@ Z.guess(y, yy, cc)
  else
    b <\$ {0,1}
  
  return b'
}

end ProtocolPrivateSecurity.
```
**图34：私有安全性**

#### 随机安全性
```ocaml
theory ProtocolRandomSecurity.
...

module Game (R: Rand_t, Z: Environment_t, A: Adversary_t, S: Simulator_t) = {
  module O = Oracles
  module A = A(O)
  
  b <\${0,1};
  inps <@ Z.choose();
  r <@ R.gen(inps);
  C.init(inps);
  
  if valid_inputs inps && valid_rands r inps then
    if b then
      A.run();
      (cc, yy) <- P.prot r inps;
      b' <@ Z.guess(filter_corrupt_outputs yy C.corrupt, filter_corrupt_convs cc C.corrupt)
    else
      finp <- pinput2finput inps;
      y <- F.f r finp;
      l <- F.φ r finp;
      cc <@ S.simm(l, filter_corrupt_inputs inps C.corrupt, filter_corrupt_foutput y C.corrupt, C.corrupt);
      b' <@ Z.guess(filter_corrupt_outputs (foutput2poutput y) C.corrupt, cc)
  else
    b <\$ {0,1}
  
  return b'
}

end ProtocolRandomSecurity.
```
**图35：随机安全性**

#### 主动安全性
```ocaml
theory ProtocolProactiveSecurity.
...
```
**图36：主动安全性**

希望这些优化后的文本能更好地传达您的意图，并使内容更加清晰、连贯和专业。如果有任何进一步的修改需求，请随时告知。