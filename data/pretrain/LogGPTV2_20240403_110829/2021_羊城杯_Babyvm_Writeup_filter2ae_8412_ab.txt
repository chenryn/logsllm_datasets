          var a, b, c, d uint8
          alphabet := []byte("0123456789abcdef")
          wg := sync.WaitGroup{}
          for _, a = range alphabet {
              for _, b = range alphabet {
                  for _, c = range alphabet {
                      for _, d = range alphabet {
                          guess := pack(a, b, c, d)
                          for i := 0; i >= 5
          r[1] ^= r7
          r7 = r[1]
          r[1] >= 18
          r[1] ^= r7
          return r[1]
      }
      func calc1(guess uint32) uint32 {
          r := make([]uint32, 6)
          r7 := guess
          r[1] = r7
          r[3] = 32
          r[1] *= r[3]
          r[4] = r[1]
          r[1] ^= r7
          r[2] = 17
          r[1] >>= r[2]
          r[5] = r[1]
          r[1] = r[5]
          r[1] ^= r[4]
          r[1] ^= r7
          r[2] = 13
          r[1] >= r[2]
          r[5] = r[1]
          r[1] = r[5]
          r[1] ^= r[4]
          r[1] ^= r7
          r[2] = 13
          r[1] >= r[2]
          r[5] = r[1]
          r[1] = r[5]
          r[1] ^= r[4]
          r[1] ^= r7
          r[2] = 13
          r[1] >= r[2]
          r[5] = r[1]
          r[1] = r[5]
          r[1] ^= r[4]
          r[1] ^= r7
          r[2] = 13
          r[1] <<= r[2]
          r[1] ^= r7
          r[1] ^= r[4]
          r[1] ^= r[5]
          return r[1]
      }
  * 得到后 12 byte 是 `a254b06cdc23`
## 总结
  * 这题比赛的时候做了挺久，而且因为种种原因是熬夜做的…当时做得很难受，主要就是比较忙乱
  * 所以就意识到虚拟机类题目一定不要想着投机取巧，比如直接黑盒啥的。最通用的方法就是还原所有执行的代码，然后再当成普通题目解