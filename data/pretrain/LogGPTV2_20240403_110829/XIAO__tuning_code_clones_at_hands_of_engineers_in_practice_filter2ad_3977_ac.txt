Then  the  code  is  parameterized  and  indexed  similar  to  the 
preprocessing techniques of CP-Miner [21]. 
In the coarse-matching step, for each function f in the codebase, a 
list  of  its  clone-candidate  functions  (cid:4668)(cid:6)(cid:9)(cid:2916)(cid:4669)  is  detected.  Each 
candidate function has a sufficient number of statements with the 
same  hash  value  as  at  least  one  statement  in  f.  This  step  helps 
reduce the search space of the fine-matching step. 
In the fine-matching step, we identify all clone pairs between each 
function  f  and  each  of  its  clone-candidate  functions (cid:4668)(cid:6)(cid:9)(cid:2916)(cid:4669) using 
the metric in Definition 6, with (cid:573) (cid:3404) (cid:581) (cid:3404) (cid:882). The setting of α = 0 
enables us to use the hash values of the parameterized statements 
to  easily  verify  the  matching  relationship;  θ  =  0  enables  us  to 
easily calculate the similarity using Equation (2). 
In the pruning step, we recalculate the similarity of the clone pairs 
obtained in the fine-matching step, using the user-specified non-
zero  values  of  α  and  θ,  and  thus  prune  the  clone  pairs  with  a 
similarity that is less than the similarity threshold γ. We next give 
the details of the last three steps in this section. 
3.1  Coarse Matching 
Given a function f and a statement-hash dictionary D, the coarse-
matching  algorithm  returns  a  list  of  candidate  functions (cid:4668)(cid:6)(cid:9)(cid:2916)(cid:4669) so 
that at least a minimum and sufficient number of statements in f 
and  any  function  in (cid:4668)(cid:6)(cid:9)(cid:2916)(cid:4669) have  the  same  hash  values.  Doing  so 
ensures  that  only  functions  sharing  a  minimum  and  sufficient 
number  of  statements  are  searched  for  code  clones.  In  this  way, 
the search space is reduced from the whole input codebase to just 
(cid:4668)(cid:6)(cid:9)(cid:2916)(cid:4669).  All possible  function  pairs  that  potentially  contain  cloned 
code snippets are identified by performing the coarse matching on 
all the functions in the input codebase. The steps of fine matching 
and  pruning  are  then  performed  between  f  and  each  function  in 
(cid:4668)(cid:6)(cid:9)(cid:2916)(cid:4669) to obtain actual clones. 
We  next  define  the  concepts  of  the  Hit  Function  and  Clone 
Candidate  Function 
the  coarse-matching 
algorithm. 
Definition  8  (Hit  Function)  Let (cid:1834)(cid:483) (cid:963)(cid:1499) (cid:1372) (cid:1331) be  a  hash  function, 
and (cid:1846)(cid:1499)(cid:483) (cid:963)(cid:1499) (cid:1372) (cid:963)(cid:1499) be the extension of the token-mapping function 
T (see Definition 2) to whole statements. A function (cid:1832)(cid:3035)(cid:3036)(cid:3047) is named 
as a Hit Function of a function f if there exist a statement s in f and 
a statement (cid:1871)(cid:3035) in (cid:1832)(cid:3035)(cid:3036)(cid:3047) that satisfy (cid:1834)(cid:4666)(cid:1846)(cid:1499)(cid:4666)(cid:1871)(cid:4667)(cid:4667)(cid:4667) (cid:3404) (cid:1834)(cid:4666)(cid:1846)(cid:1499)(cid:4666)(cid:1871)(cid:3035)(cid:4667)(cid:4667)(cid:4667). 
Definition  9  (Clone-Candidate  Function)  A  function (cid:1829)(cid:1832)(cid:3033) is  a 
Clone-Candidate  Function  of  a  function  f  if  there  exist  at  least 
nmatch statements in f with (cid:1829)(cid:1832)(cid:3033) as one of its Hit Functions and  
(cid:2011) (cid:942) (cid:1839)(cid:1861)(cid:1866)(cid:1845)(cid:3440)(cid:3)(cid:3)(cid:3)(cid:3)(cid:3)(cid:3)(cid:3)(cid:3)(cid:3)(cid:3)(cid:3)(cid:3)(cid:3)(cid:3)(cid:3)(cid:3)(cid:3)(cid:3)(cid:3)(cid:3)(cid:3)(cid:3)(cid:3)(cid:3)(cid:4666)(cid:885)(cid:4667) 
illustrate 
to  help 
(cid:1866)(cid:3040)(cid:3028)(cid:3047)(cid:3030)(cid:3035) (cid:3410) (cid:143)(cid:139)(cid:144) (cid:3436)
(cid:942) (cid:1838)(cid:481)
(cid:2011)
(cid:884) (cid:3398) (cid:2011)
where  L  is  the  number  of  the  statements  in  f, (cid:2011) is  the  clone-
similarity  threshold  in  Definition  7,  and  MinS  is  the  minimal 
number of statements that a cloned snippet should have. 
Intuitively,  a  Hit  Function  (cid:1832)(cid:3035)(cid:3036)(cid:3047) has  at  least  one  parameterized 
statement  in  common  with  function  f.  (cid:1829)(cid:1832)(cid:3033) has  at  least  nmatch 
common parameterized statements with f. 
Suppose  that (cid:1830) is  the  hash  dictionary  of  an  input  codebase.  For 
every  statement  s  in  function  f,  the  coarse-matching  algorithm 
uses  D  to  generate  a  list  of  Hit  Functions (cid:4668)(cid:1832)(cid:3035)(cid:3036)(cid:3047)(cid:4669) by  retrieving 
functions each of which contains a parameterized statement with 
372
the  same  hash  value  as  that  of  the  parameterized  form  of  s. 
(cid:1771)(cid:1834)(cid:1861)(cid:1872)(cid:4666)(cid:1858)(cid:4667) is  the  multiset  union  of  all  the  functions  in  the  Hit 
Function lists for every statement of f. The total hit count of each 
function  in  (cid:1771)(cid:1834)(cid:1861)(cid:1872)(cid:4666)(cid:1858)(cid:4667)  is  equal  to  the  function’s  multiplicity  in 
(cid:1771)(cid:1834)(cid:1861)(cid:1872)(cid:4666)(cid:1858)(cid:4667). We then identify a list of Clone-Candidate Functions of 
f  as  those  functions  in  (cid:1771)(cid:11)(cid:139)(cid:150)(cid:4666)(cid:1858)(cid:4667)  with  no  less  than  nmatch 
occurrences. 
3.2  Fine Matching 
The  coarse  matching 
list  of  Clone-Candidate 
Functions for each function f in the input codebase. There may not 
be clone pairs between f and (cid:1829)(cid:1832)(cid:3033) for the following reasons: 
(a) 
the matched parameterized statements may be so scattered in 
f  and (cid:1829)(cid:1832)(cid:3033)that  the  similarity  between  the  snippets  in  f  and 
(cid:1829)(cid:1832)(cid:3033)is not high enough;  
identifies  a 
(b)  multiple  parameterized  statements  in  f  or  (cid:1829)(cid:1832)(cid:3033) may  be 
mapped to the same tokenized statement in (cid:1829)(cid:1832)(cid:3033)or f, causing 
that the number of one-to-one matched statements between f 
and (cid:1829)(cid:1832)(cid:3033)is not high enough; 
two  statements  are  not  necessarily  α-Transformed-Match-
related even if they have the same hash value;  
there might be mismatched statements between f and (cid:1829)(cid:1832)(cid:3033)due 
to hash collisions, although the probability of hash collision 
is quite low;  
(e)  some  matched  statements  could  be  instances  of  disordered 
matches and the penalty to the disordered match in Equation 
(2) would cause that the similarity is not high enough.   
We address issues (a) and (b) in the fine-matching step and issues 
(c), (d), and (e) in the pruning step.  
The goal of the fine-matching step is to identify all snippet pairs 
(between f and (cid:1829)(cid:1832)(cid:3033)) whose Transformed Similarity (Definition 6) 
is not less than a specified threshold. We formulate this problem 
as finding code snippets (cid:1845)(cid:2869)and (cid:1845)(cid:2870) in f and (cid:1829)(cid:1832)(cid:3033), respectively, that 
satisfy 
(cid:1834) (cid:4672)(cid:1846)(cid:1499)(cid:3435)(cid:1871)(cid:2869)(cid:481)(cid:3036)(cid:3439)(cid:4673) (cid:3404) (cid:1834) (cid:4672)(cid:1846)(cid:1499)(cid:3435)(cid:1871)(cid:2870)(cid:481)(cid:3036)(cid:3439)(cid:4673)
(d) 
(c) 
(cid:4666)(cid:1853)(cid:4667)
(cid:2870)(cid:3040)
(cid:513)(cid:3020)(cid:3117)(cid:513)(cid:2878)(cid:513)(cid:3020)(cid:3118)(cid:513)
(cid:3410) (cid:2011)
(cid:4666)(cid:1854)(cid:4667)
(cid:4689)                    (4) 
where (cid:1871)(cid:2869)(cid:481)(cid:3036) and (cid:1871)(cid:2870)(cid:481)(cid:3036),  (i  =  1,  …  ,  m)  are  m  statements  in (cid:1845)(cid:2869)and (cid:1845)(cid:2870), 
respectively.  Equation  (4.a)  ensures  that  there  are  m  matching 
parameterized  statements;  Equation  (4.b)  ensures  that  the  α-
Transformed Similarity of (cid:1845)(cid:2869)and (cid:1845)(cid:2870) is not less than the similarity 
threshold (cid:2011) given the values of α and (cid:2016) in Equation (2) are equal 
to 0. 
We  next  first  present  how  to  determine  whether  a  given  snippet 
pair  (cid:1845)(cid:2869) and  (cid:1845)(cid:2870)  satisfies  equation  (4),  and  then  present  how  to 
efficiently scan f and (cid:1829)(cid:1832)(cid:3033) to find all the possible pairs of (cid:1845)(cid:2869)and (cid:1845)(cid:2870) 
in f and (cid:1829)(cid:1832)(cid:3033). 
To determine whether (cid:1845)(cid:2869)and (cid:1845)(cid:2870) satisfy Equation (4), we calculate 
the  value  of  m  as  follows.  Suppose  that  (1) (cid:4668)(cid:1848)(cid:3036)(cid:513)(cid:1861) (cid:3404) (cid:883)(cid:481)(cid:884)(cid:481) (cid:1710) (cid:481) (cid:1872)(cid:4669) is 
the list of the hash values for which at least one statement in (cid:1845)(cid:2869) 
and one  statement  in (cid:1845)(cid:2870) are  mapped  to (cid:1848)(cid:3036),  and  (2)  there  are  also 
n1,i  and  n2,i  statements  with  the  hash  value  Vi  in  (cid:1845)(cid:2869) and  (cid:1845)(cid:2870) , 
respectively.  It  easily  follows  that  there  are  ni  =  min(n1,i,  n2,i) 
matched  parameterized  statements  in (cid:1845)(cid:2869)and (cid:1845)(cid:2870).  Therefore,  m  can 
be easily calculated as 
 (cid:1865) (cid:3404) (cid:963) (cid:1866)(cid:3036)
Accordingly, we determine whether (cid:1845)(cid:2869)and (cid:1845)(cid:2870) satisfy Equation (4). 
The next subtask is to scan all the possible snippet pairs in f and 
(cid:1829)(cid:1832)(cid:3033). We take a two-step procedure. First, given a snippet (cid:1845)(cid:2869) in f, 
                                                            (5) 
(cid:3047)
(cid:3036)(cid:2880)(cid:2869)
(cid:2870)(cid:2879)(cid:3082)
(cid:3082)
(cid:3082)
(cid:2870)(cid:2879)(cid:3082)
(cid:513)(cid:1845)(cid:2869)(cid:513), (cid:1863)(cid:3040)(cid:3028)(cid:3051) (cid:3404)
we  scan  all  the  possible (cid:1845)(cid:2870) in (cid:1829)(cid:1832)(cid:3033) and  determine  whether (cid:1845)(cid:2869)and 
(cid:1845)(cid:2870)satisfy Equation (4). Second, we enumerate all the possible (cid:1845)(cid:2869)in 
f and repeat the first step. 
During  the  first  step,  we  use  a  sliding  window  on  top  of  the 
statement  sequence  of (cid:1829)(cid:1832)(cid:3033)to  enumerate  all  the  code  snippets  in 
(cid:1829)(cid:1832)(cid:3033).  The  statement  sequence  inside  the  window  is  the  current 
code snippet S2. To satisfy Equation (4), the number of statements 
of S2 in (cid:1829)(cid:1832)(cid:3033) should satisfy the following constraint:  
(cid:1863)(cid:3040)(cid:3036)(cid:3041) (cid:3409) (cid:513)(cid:1845)(cid:2870)(cid:513) (cid:3409) (cid:1863)(cid:3040)(cid:3028)(cid:3051) 
                 (6) 
(cid:513)(cid:1845)(cid:2869)(cid:513).  Therefore,  we  need  to 
where (cid:1863)(cid:3040)(cid:3036)(cid:3041) (cid:3404)
use  a  set  of  sliding  windows  with  sizes  ranging  from (cid:1863)(cid:3040)(cid:3028)(cid:3051)  to 
(cid:1863)(cid:3040)(cid:3036)(cid:3041) to  enumerate  all  possible  snippets  in (cid:1829)(cid:1832)(cid:3033).  Given  a  sliding 
window size k, the window starts from position 1 ((cid:1849)(cid:2869)) that covers 
the first k statements in (cid:1829)(cid:1832)(cid:3033). After checking whether the snippet 
inside the window and (cid:1845)(cid:2869) satisfy Equation (4), the window moves 
one step further to position 2 ((cid:1849)(cid:2870)), and so on. Compared with the 
code snippet covered by (cid:1849)(cid:2869), the code snippet covered by (cid:1849)(cid:2870) has 
only  the  first  statement  of  (cid:1829)(cid:1832)(cid:3033)  removed  and  the  statement  in 
position k+1 added. Therefore, we calculate the value of m for the 
code  snippet  in (cid:1849)(cid:2870) by  just  updating  the  value  of  m  for  the  code 
snippet  in  (cid:1849)(cid:2869) ,  i.e.,  by  removing  the  contribution  of  the  first 
statement  and  adding  the  contribution  of  the  added  statement  in 
Equation (5). 
During the second step, we use a sliding window to enumerate all 
the possible snippets (cid:1845)(cid:2869) in f, and repeat the first step. The size of 
this  sliding  window  ranges  from  (cid:3627)(cid:1829)(cid:1832)(cid:3033)(cid:3627)  (the  total  number  of 
statements  in (cid:1829)(cid:1832)(cid:3033))  to  MinS  (the  minimal  number  of  statements 
that a cloned snippet should have). 
We  further  optimize  the  algorithm  in  a  number  of  ways.  For 
example, the sliding windows in the first step could directly move 
to the next statement that matches at least one statement in f. In 
addition,  once  a  snippet  pair  is  identified  as  passing  the  fine 
matching, we further execute the pruning step against the pair to 
determine whether it is an actual clone pair or not. Once a snippet 
pair passes the pruning, we continue to perform the fine matching 
in the remaining parts of f and (cid:1829)(cid:1832)(cid:3033); in this way we avoid getting 
overlapped clone pairs. 
3.3  Pruning 
In  the  pruning  step,  we  prune  the  snippet  pairs  obtained  in  the 
fine-matching step to get code clones that satisfy our code-clone 
definition  with  the  specified  non-zero  values  for  α  and  θ  in 
Equation (2). This step addresses issues (c), (d) and (e) mentioned 
at the beginning of Section 3.2.  
To address these three issues, we need to get the α-Transformed-
Match-related statements (Definition 2) in the two code snippets 
in 
the  Disordered-Match-Score  (DMS) 
(Definition 4) of the two snippets is minimized. We then calculate 
the  α-Transformed-Similarity  based  on  Equation  (2)  and  discard 
the snippet pair if its α-Transformed-Similarity value is lower than 
the threshold.  
We  use  a  greedy  technique  called  Karp-Rabin  Matching  and 
Greedy  String  Tiling  [30]  to  get  the  matched  statements.  The 
basic idea is to use a dynamic-programming algorithm to find the 
maximal consecutive statement sub-sequences (cid:22)(cid:2869)(cid:481)(cid:2869) in S1, and (cid:1845)(cid:2870)(cid:481)(cid:2869) 
in S2, with the same number of statements, and each statement in 
(cid:1845)(cid:2869)(cid:481)(cid:2869)  α-Transformed-Match-related  with  the  statement  at  the 
the  pair  such  that 
corresponding  position  in (cid:1845)(cid:2870)(cid:481)(cid:2869).  The  next  step  is  to  exclude  the 
statements in (cid:1845)(cid:2869)(cid:481)(cid:2869) and (cid:1845)(cid:2870)(cid:481)(cid:2869) from S1 and S2, respectively, and repeat 
the  step  on (cid:1845)(cid:2869)(cid:819)(cid:1845)(cid:2869)(cid:481)(cid:2869) and (cid:1845)(cid:2870)(cid:819)(cid:1845)(cid:2870)(cid:481)(cid:2869).  By  reiterating  this  process  until 
there  are  no  further  matches,  we  get  a  set  of  statement-sub-
sequence  pairs  in  S1  and  S2,  which  are  α-Transformed-Match-
related  to  each  other.  The  matched  statements  that  we  need  to 
obtain are the union of all the sub-sequence pairs. At this point, 
we calculate the α-Transformed Similarity and determine whether 
S1 and S2 are a clone pair based on Definition 7. 