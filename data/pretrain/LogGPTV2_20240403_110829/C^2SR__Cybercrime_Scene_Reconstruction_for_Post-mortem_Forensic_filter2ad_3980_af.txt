5.5M
81 (0.001%)
4.1M
2.3K (0.04%)
1.6M
2.3K (0.04%)
3.3M
Firefox [31]∗
Midori [12]∗
arora [9]∗
qupzilla [85]∗
lynx [61]∗
Apache [8]∗∗
nginx [76]∗∗
lighttpd [58]∗∗
InspIRCd [40]∗∗
proftpd [83]∗∗
*: Client programs, **: Server programs, α: Syscalls on timing-dependent resources,
β: # of execution reconstruction retrials, γ: # of syscalls with alternative time zone assign.
Timing-dep.α
32.5M (6.7%)
59.6M (22.7%)
7.9M (10.4%)
13.6M (26.2%)
480.2K (8.6%)
620M (8.9%)
568K (10.1%)
206K (4.92%)
8.3K (0.5%)
10K (0.29%)
14
6
9
6
5
3
2
2
0
0
21
10
14
8
7
4
4
2
0
0
D. Case Study
We present
two case studies to show how C2SR can
effectively reconstruct attacks and allow forensic analysts to
use program analysis tools to facilitate the analysis.
12
0%10%20%30%40%50%60%70%80%90%100%perlbenchgccmcfomnetppxalanbmkx264deepsjengleelaexchange2xzNon I/OInputOutputCase 1: Investigation of a Fileless JavaScript Attack. We use
a ﬁleless JavaScript attack to show how C2SR can reconstruct
an interactable partial execution for forensic analysts. The
attack is created based on an existing literature [88]. We only
use a single browser tab, in this case, to focus on demonstrating
the effectiveness of interactable reconstructed execution.
Fig. 13.
Investigating a Fileless Attack via JavaScript.
1) Experimental Setup: The victim uses Firefox to navigate
a web page that contains a malicious JavaScript ﬁle, which
fetches another malicious payload that eventually downloads
malware. From the malicious ﬁle downloading, a forensic
analyst tries to trace back to the origin of the attack and how
the code that downloads the malware binary was delivered.
2) Investigation: With the reconstructed execution by
C2SR, the forensic analyst identiﬁes that malware is down-
loaded from a web page, including a JavaScript code snippet
shown in Fig. 13. Speciﬁcally, the script code block (Lines
14-16) is added dynamically to download malware. Using
DevTools [30], the analyst sets a breakpoint at line 15 ( B ).
She realizes that the script code block is dynamically added
by comparing the HTML ﬁle content delivered through the
network. She then restarts the execution and uses DevTools
to set breakpoints on DOM element change events in order
to identify how the code block is dynamically added. The
breakpoint stops at line 11, showing the malicious code. She
further traces back to the origin. The script code was injected
at line 9. Note that the variables (e.g., mal at line 9) and
DOM elements (e.g., sc at line 11) related to the malicious
payload delivery are only available at runtime, requiring the
analyst to use DevTools for inspection. The user interactions
required to set breakpoints and inspect the variables incur
additional instructions and syscalls. C2SR tolerates them as
additional syscalls do not access completely unobserved ex-
ternal resources, hence consistently reproducible.
To this end, she realized that the HTML ﬁle is compro-
mised that line 8 ( C ) was disabled and line 9 was added by the
attack to inject the DOM element containing malicious code.
Finally, she follows the mal variable which contains malicious
code, eventually discovering that it receives the malicious code
via WebSocket at lines 1-4.
Case 2: Attack Delivery Analysis in a Channel (Single
Autonomous Task) of HexChat. HexChat is an IRC client
program that supports multiple channels (i.e., chatting ses-
sions) concurrently. We choose this program to demonstrate
an example of an application that runs multiple autonomous
tasks concurrently besides previous web browser cases. The
program has a directory traversal vulnerability [23] that can be
exploited to modify arbitrary ﬁles on the client’s ﬁle system.
1) Experimental Setup: The victim uses HexChat and
opens 10 channels for 2 days. Even though the user did not
actively chat, the program constantly received messages from
other users and displays them. For the 2 days, it received
63,738 messages from 10 servers, and it receives a malicious
message from the channel 10, and the message exploited the
vulnerability to corrupt the apache web server’s conﬁguration
ﬁle. The corrupted conﬁguration ﬁle may break the web server
or make it use the insecure default conﬁguration.
2) Result and Analysis: C2SR reconstructs a part of the
single exploited channel 10 ( B ) as shown in Fig. 14. From
the entire trace, we identify the malicious write() syscall
that corrupts the apache conﬁguration ﬁle (i.e., apache2.conf).
From the malicious ﬁle write, we trace back the socket that
received the malicious payload and the channel that the socket
belongs to, which is the channel 10. To this end, we use the
ﬁrst getaddrinfo() API of the channel as the beginning of
partial execution (SBEGIN).
Fig. 14. Reconstructed partial execution of HexChat.
C2SR starts an execution from with the collected trace.
Once the execution starts, we open a new connection window
and type the channel name. Note that
in the channel 10,
there are three executions ( 1 , B , and 2 ) that connect to
the same server. C2SR asks the investigator to choose the
execution from them. If the analyst mistakenly chooses 1 or
2 , SEND (the malicious syscall) cannot be reached, and thus
the reconstruction will fail. If the second execution ( B ) is
chosen, C2SR will reproduce the entire attack delivery process
including the exploitation process.
To analyze the incident, we use Taintgrind [48] (a taint
analysis plug-in for Valgrind [74]) on the reconstructed execu-
tion. It supports reverse taint analysis (rtaint [24]), that trace
back to the origin of a certain value. In this example, we ﬁrst
trace back to the ﬁle handler used in the malicious write()
(line 17), and then identify how the ﬁlename was composed
13
BCWS=newWebSocket('.../mal.js');WS.onmessage=function(e){mal =atob(e.data);};functionbenign_compromised(){varsc=document.createElement('script');...//sc.src="http://.../benign.js";sc.appendChild(document.createTextNode( mal ));...document.getElementsByTagName('head')[0].appendChild(sc);}...12345678910111213141516LegendCBCode Changed by the Malicious AttackerBreakpoint to Inspect Program States (e.g., Variables)B48 hours24 hoursTimeChannels123456789100ABLegendAWindow of Suspicious ActivitiesBReconstructed ExecutionSBEGIN=getaddrinfo(Channel10)Directory Traversal Vulnerability SEND=write(apache2.conf, ...)Vulnerability (Directory Traversal)Corrupted Configuration FileActive Execution (Finished)Active Execution (Continuing)12and used to create the ﬁle. Fig. 15 shows how the reverse taint
analysis identiﬁes the source of the message and its content,
from the suspicious ﬁlename at line 15.
Fig. 15. Reconstructed partial execution of HexChat.
Note that
there exist record-and-replay techniques that
allow to integrate with existing program analysis infrastruc-
tures such as Pin [60] and gdb [34]. Such tools can analyze
replayed executions. However, they require the existing pro-
gram analysis tools to interact with the replayed execution
through the replayer. As a result, limited program analysis
infrastructures and plug-ins are often supported and analysis
results may need to be adjusted as the tools are not directly
applied. Unlike them, C2SR allows existing program analysis
techniques to directly interact with the reconstructed execution.
Hence, diverse analysis tools such as Taintgrind with rtaint [24]
can be directly used. In addition, C2SR can reconstruct only a
small part of the channel 10 execution without reconstructing
80% of the messages that are irrelevant to the attack.
VI. DISCUSSION
Reconstructing Non-deterministic Executions. C2SR is not
a deterministic replay technique and it might not be able to
reconstruct a highly non-deterministic execution at the ﬁrst
attempt. To mitigate this issue, we propose an algorithm,
called Timeline Projection Adjustment (see § IV-E), to sys-
temically search for the correct order of non-deterministic
events. We demonstrate that it can successfully reconstruct the
complete execution of the attack delivery process. Highly non-
deterministic executions, such as concurrency bugs that require
to reproduce the exact execution states of each thread (e.g.,
replay each instruction in the same order of the recording) are
out of the scope. Instead, we focus on reproducing a determin-
istic attack delivery process. However, while C2SR does not
guarantee to reproduce the non-deterministic behaviors, they
may occur in the reconstructed execution, if the behaviors are
not rare. In practice, a forensic analyst may try to reconstruct
a non-deterministic execution multiple times to successfully
reproduce the execution.
Inconsistent Resource Access. User interactions for inspec-
tions may cause new resource accesses that were not observed
during recording. For instance, users can directly execute
JavaScript code snippets on the DevTools’s console to access
new external resources. We handle such cases as follows. If it is
14
an available resource in the reconstruction time, (e.g., reading
a local conﬁguration ﬁle of an analysis tool), we allow to do
and resume the reconstruction process. If the resource is not
available (e.g., accessing external resources such as loading
a webpage), we consider it as inconsistent resource access,
leading to a reconstruction failure.
Attacks against C2SR. It is possible that an attacker can pur-
posefully create malicious payloads (e.g., JavaScript programs)
that make the execution reconstruction by C2SR difﬁcult. In
particular, since C2SR runs a searching algorithm (Timeline
Projection Adjustment algorithm in § IV-E) when it fails
to provide correct values for timing-dependent syscalls (e.g.,
time()), attackers can craft payloads that make the algorithm
run for a long time, hindering execution reconstruction and
forensic analysis. For instance, assume that
there are two
syscalls: tx for a timing dependent syscall (e.g., time())
and sy for a non-timing dependent syscall (e.g., read()).
If sy uses the return value of tx as one of the arguments,
then the execution of sy is dependent on tx, meaning that
reconstructing the correct value for tx is required for successful
execution of sy. If an attacker creates a program that has
many timing dependent syscalls between tx and sy, it causes
a large searching space for our TPA (Timeline Projection
Adjustment) algorithm (§ IV-E). For example, consider the
original program contains “tx, sy”. A possible code that can
impose challenges to C2SR is “tx, t1, t2, t3, ..., tn, sy”, where
n is the number of added timing-dependent syscalls. It can
exploit the fact that C2SR does not try to reconstruct values
for timing-dependent resources faithfully. However, while it
might delay the reconstruction signiﬁcantly, this does not break
our analysis and it is still possible to reconstruct the correct
execution.
Log Integrity. In this paper, we assume that our event logger
and logs generated are not compromised and tampered. We
focus on algorithms and systems to reconstruct an exploit
execution from the log. Protecting the integrity of the recorder
and logs is an orthogonal problem that we can leverage existing
solutions to mitigate [3], [4], [28], [86], [19], [63], [100], [89],
[79], [46].
Generality. C2SR is applicable to diverse applications. In
particular, it can effectively reconstruct a partial execution
when a target program execution is consisting of multiple
autonomous tasks (i.e., tasks that are supposed to be inde-
pendent of other tasks). For example, a document or window
in multi-document/window applications (e.g., tab-based web
browsers, messaging programs, and multi-tab text editors) is
an autonomous task. Among them, web browsers are a popular
target in cyberattacks. Hence, we focus on web browsers in this
paper. However, our design is not limited to them.
Identifying a Task to Reconstruct. In this paper, we focus
on the effective and efﬁcient reconstruction of the cybercrime
scene. Detecting a malicious task or identifying a cybercrime
scene is out of the scope of this work. In practice, a forensic
analyst can typically narrow down a part of execution (e.g.,
a tab executing malicious payload), while she spends a sig-
niﬁcant amount of time and effort to analyze the suspicious
execution repeatedly for hypothesis testing. while pinpointing
a malicious task can be difﬁcult, it can be done by ruling out
obviously benign network connections/system events.
123456789101112131415161718file = “/home/.../../…/apache2.conf”chan= “/../…/apache2.conf”from recv()voidinbound_ujoin(...,char*chan,...){...safe_strcpy(sess->channel,chan,CHANLEN);...}staticvoidlog_open(session*sess){...sess->logfd=log_open_file(...,sess->channel,...);...}staticintlog_open_file(...,char*channame,...){...file=log_create_pathname(...,channame,...);...fd=g_open(file,...);...write(fd,buf,g_snprintf(buf,sizeof(buf),_("****BEGINLOGGINGAT%s\n"),...));}LegendVariable ValueVariable/Input SourceData Origin (Reverse Data Flow)Space Overhead. The current implementation of C2SR uses
zlib library [105] to compress execution traces. While the log
size is reasonable, it can be further reduced by leveraging
recent studies [99], [38], [64].
Debugging Capability. There are approaches [45], [37] that
aim to provide a replay of a recorded execution for debugging
purposes. While effective, [45] requires modiﬁcations to the
target program. [37] aims to handle additional code inserted for
debugging by developers. It also requires modiﬁcations to the
target program. C2SR differs from them because (1) it allows
users to apply interactive debugging tools (e.g., DevTools [30])
and (2) it does not require modiﬁcation of the target program.
[13] also supports interactive debugging, while it only supports
web browsers and requires modiﬁcations of the web browsers,
as discussed in § II-D.
VII. RELATED WORK
In addition to our earlier discussion (§ II-D), we discuss other
related work in this section.
A. Record-and-replay Techniques
1) RR [77]: State-of-the-art Record-and-replay Technique:
We compare C2SR with RR [77], the state-of-the-art record-
and-replay technique for debugging. In particular, we use the
same set of benchmark programs used by RR with the similar
conﬁgurations: cp, make, octane, htmltest, and sambatest. Note
that the cp benchmark in [77] uses 15,200 ﬁles constituting
732MB of data. Since the ﬁles are not publicly available, we
use 720MB of data consisting of 37,356 ﬁles.
Recording Overhead. The average recording overhead of
C2SR is 5.74% which is signiﬁcantly lower than the RR, which
incurs 2.54x overhead (according to [77]). This is because RR
enforces various changes in the software and environment. For
instance, it forces to use a single thread, causing signiﬁcant
overhead (7.85x) on the make benchmark which originally uses
8 threads. C2SR does not have such restrictions, resulting in
a near native speed in the recording.
Side-effects. To reduce the sources of non-determinism, RR