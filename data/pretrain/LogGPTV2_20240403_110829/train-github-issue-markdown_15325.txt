We have encountered several issues regarding the definition of output types based on given inputs. In my opinion, these challenges highlight limitations within our current promotion system. To address this, I propose defining arithmetic operations for types. Here are some example rules that could be implemented:

- `Int * Int = Int`
- `Int + Int = Int`
- `Meter{Float64} + Meter{Float64} = Meter{Float64}`
- `Meter{Float64} * Meter{Float64} = Meter{Float64}^2`
- `Meter{Float64} / Meter{Float64} = Float64`
- `Matrix{Int} + Matrix{Float64} = Matrix{Float64}`

This approach would provide a more systematic and consistent way to handle type promotions and arithmetic operations.