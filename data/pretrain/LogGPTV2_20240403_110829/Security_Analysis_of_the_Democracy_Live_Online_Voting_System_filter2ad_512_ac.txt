ballots) before scanning them. An effective alternative would
be to perform a risk-limiting audit [36] (which is necessary
in any case to protect against other kinds of error and fraud),
but Delaware, West Virginia, and New Jersey do not conduct
state-wide RLAs.
Ballot misdirection. Another way to attack blank ballot
delivery would be to modify the ballot return instructions,
rather than the ballot itself, in order to cause voted ballots to
be sent to the wrong place or be delayed until too late to count.
In Delaware, OmniBallot included the return instructions and
a printable envelope in the same PDF ﬁle as the ballot. The
attacker could replace the entire delivery address or simply
change the zip code or postal bar code to route the ballot to a
distant sorting facility. Since OmniBallot veriﬁes the voter’s
identity before providing the return package, an attacker could
decide which ballots to misdirect based on the voter’s place
of residence or party afﬁliation.
Voters might detect that their ballots have been misdirected
if the jurisdiction provides a ballot tracking service. However,
the attacker could simultaneously mail a different ballot in
USENIX Association
30th USENIX Security Symposium    3083
Conﬁguration
Attacker Capability
Manipulate
Ballot Design
Compromise
Ballot Secrecy
Invisibly
Change Votes
Blank Ballot Printing
Marked Ballot Printing
Online Ballot Return
C S T
C S T
C S T
C S T
C S T
Risk
Moderate
High
C S T
Severe
Table 1: OmniBallot risks. We show what kinds of attacks are possible when OmniBallot is used in different modes, if an attacker
compromises the voter’s client (C), Democracy Live’s services (S), or third-party infrastructure (T). Ballot designs can be manipulated in
all cases. When ballots are marked online, Democracy Live servers see the voter’s identity and selections. When ballots are returned online,
attackers could potentially change votes without being detected.
the voter’s name—but with votes for the attacker’s preferred
candidates—reusing the voter’s identity information taken
from the web app. This would make it appear to voters that
their ballots had been received.
Ofﬁcials can partially defend against misdirection by pro-
viding correct ballot return instructions through prominent
channels other than OmniBallot, such as on other ofﬁcial sites
and in the media. We also recommend that states coordinate
with the Postal Service to ensure that postal workers are on
the lookout for misdirected ballots.
4.2 Risks of Online Ballot Marking
Using OmniBallot to mark ballots online, print them, and
return them physically raises greater risks than blank bal-
lot delivery. (Again, marking ballots online and returning
them via email or fax leads to severe risks, which we discuss
separately.) Some of the risks can be mitigated with care-
ful procedures, but others are difﬁcult to avoid, especially if
online ballot marking is widely used.
Enhanced ballot misdirection and manipulation. Omni-
Ballot’s online ballot marking conﬁguration could allow at-
tackers to see the voter’s selections before the ballot is gen-
erated, allowing them to surgically suppress votes for a par-
ticular candidate by misdirecting or modifying only those
ballots. The attacker could also reorder the candidates, move
the selection targets or timing marks, or encode false votes
within barcodes, so that the ballot appears (to a human) to be
marked for the voter’s selected candidate but will be counted
by an optical scanner as a vote for a different candidate. These
risks make the procedural defenses discussed in § 4.1 even
more crucial when jurisdictions offer online ballot marking.
However, “remaking” the ballot by reading the votes from a
barcode, as some jurisdictions do, introduces further security
risks, since attackers could change the barcodes without de-
tection. Instead, absent a risk-limiting audit, ofﬁcials must
manually transcribe the human-readable selections to a pre-
printed ballot.
Ballot mismarking. Online marking enables a simpler style
of ballot manipulation that may be impossible to procedurally
mitigate: mismark the ballot so that one or more races reﬂect
the attacker’s choices instead of the voter’s.
Of course, voters could detect this by carefully reviewing
their ballots before returning them. However, recent research
involving ballot marking devices—which are susceptible to
analogous attacks—ﬁnds that the vast majority of voters fail
to detect errors on machine-marked paper ballots [10]. Omni-
Ballot users who did notice a problem would likely discard
the erroneous ballot and use the system to mark another; the
attacker could recognize this repeat attempt and mark the new
ballot correctly. Even if a few voters alerted election ofﬁcials,
the voters would have no way to prove that the system mis-
behaved, so ofﬁcials would have difﬁculty distinguishing an
attack from isolated human error [7].
Prompting voters to carefully review their ballots may in-
crease error detection to a limited extent. However, modeling
suggests that the improvement may not be sufﬁcient to detect
outcome-changing fraud in close elections unless use of elec-
tronic ballot marking is limited to a small subset of voters [10].
Compromising ballot secrecy. Online ballot marking
carries an elevated risk that attackers could compromise
the voter’s secret ballot. Attackers with the ability to
alter or inject code into the web app could exﬁltrate the
voter’s identity and ballot choices. Moreover, since the
web app sends the voter’s identity and ballot choices to
lambda.omniballot.us in order to generate the marked
ballot PDF ﬁle, an attacker with only passive access to
the data processed by this service can learn voters’ ballot
selections, even when the ballot is returned physically.
Furthermore, the ballot return package, including the
voter’s identity and marked ballot, is saved locally to the
voter’s computer before being printed. This creates a risk
that client-side attackers, including other local users, could
gain access to the ﬁle. Even if voters delete the ﬁles, forensic
tools may allow adversaries to recover the ballots long into
the future [25].
3084    30th USENIX Security Symposium
USENIX Association
4.3 Risks of Online Ballot Return
OmniBallot’s online ballot return mode carries similar risks
to online ballot marking as well as severe additional risk that
cast votes could be changed at large scale without detection.
These risks cannot be adequately mitigated with procedural
changes or readily available technology.
Lack of end-to-end veriﬁability. Computer scientists have
been working for more than 30 years to develop principled
techniques for secure remote voting [8]. These protocols use
an approach called “end-to-end veriﬁability” (E2E-V), which
(among other properties) allows each voter to independently
check that their vote is correctly recorded and included in the
election result [9]. Cryptographic E2E-V protocols such as
Helios [2] accomplish this without requiring the voter to trust
a particular client device or the ofﬁcial election software or
servers. These technologies are promising—both for remote
voting and as an added layer of protection for traditional vot-
ing [37]—but they are also complex and difﬁcult to implement
correctly [29]. For this reason, although experts hold that E2E-
V should be a requirement for any Internet voting system, they
simultaneously caution that “no Internet voting system of any
kind should be used for public elections before end-to-end ver-
iﬁable in-person voting systems have been widely deployed
and experience has been gained from their use” [21].
OmniBallot does not attempt to achieve E2E veriﬁability.
Instead, it uses a protocol that provides no way for voters,
ofﬁcials, or Democracy Live itself to verify that the ballot se-
lections a voter chooses are the same as what ofﬁcials receive.
Consequently, an attacker with control of the voter’s client, of
Democracy Live’s infrastructure, or of any of the third-party
services from which the client loads JavaScript, could change
recorded votes. Unlike ballot marking with physical return,
where the voter has a chance to review the printed ballot that
is sent for tabulation, voters have no practical ability to detect
vote-changing attacks involving online ballot return. Nor do
election ofﬁcials. Democracy Live itself would have little op-
portunity to detect attacks that were perpetrated by client-side
malware or third-party infrastructure.
Vote-changing attacks. Recall that OmniBallot’s online
voting is accomplished by making two API calls to
lambda.omniballot.us: one that submits the voter’s iden-
tity and selections and receives a ballot ID and a URL for the
marked ballot PDF ﬁle, and another that submits the ballot
ID and causes the ballot to be delivered to election ofﬁcials.
Both requests are authenticated with a bearer token that is
provided after checking the voter’s identity.
One way to subvert this process would be to inject mali-
cious code into the web app. This could be accomplished
with local malware (such as a malicious browser extension)
or by delivering malicious code as part of the JavaScript that
OmniBallot loads from Amazon, Google, and Cloudﬂare
servers. Insiders at these companies or at Democracy Live
could attempt such an attack, as could external attackers who
compromised any of the companies’ infrastructure.
Once in control of the client, the attacker could cause the
web app to substitute ballot selections of the attacker’s choos-
ing. To hide the changes from the voter, the attacker would
simply have to generate a separate ballot PDF ﬁle to display
to the voter that did match the voter’s selections. This could
be accomplished by modifying the real ballot PDF ﬁle using
client-side code. As a result, the web app would show a ballot
containing the selections the voter intended, but the ballot that
got cast would have selections chosen by the attacker. The at-
tack would execute on the client, with no unusual interactions
with Democracy Live, so there would be no reliable way for
the company (or election ofﬁcials) to discover it.
Attackers with control of the lambda.omniballot.us
service—such as malicious insiders at Democracy Live or
at Amazon, or external attackers who penetrated either com-
pany’s systems—would have a separate way of changing
votes. Malicious code on this server could return one PDF to
the voter and store a different one for delivery and counting.
Voters would have no way to notice the change.
Insufﬁcient controls. Available documents give us some
visibility into Democracy Live’s server-side defenses and
internal controls. These controls appear to have either limited
or no ability to prevent the attacks we have described.
The company says that voted ballots are stored immutably
in Amazon S3 using AWS Object Lock [16].3 While an im-
mutable store does provide some security beneﬁts, it cannot
prevent the attacks described above. Object Lock can only
protect ﬁles from modiﬁcation after they are stored, so it can-
not prevent attacks that modify the ballot before it is placed
in S3. It also cannot protect ballots from modiﬁcation by
insiders at Amazon with internal access to the storage system.
Moreover, Democracy Live appears to use Object Lock in
“governance mode,” which means the protections can be by-
passed by the root user or other insider accounts with special
permissions [17].
Following a pilot of electronic ballot return during a Jan-
uary 2020 election held by Washington State’s King Conser-
vation District, Democracy Live conducted what it called a
“post election security audit” in order to “verif[y] the integrity
of the [. . . ] election” and “identify potential malfeasance on
the part of Democracy Live employees.” An unpublished re-
port by the company [17] explains that the “audit” consisted
of a review of log entries created by Amazon’s AWS Cloud-
Trail log service [6], and it lists ten speciﬁc log queries that
were performed. We note that these queries did not cover all
vectors by which insiders or other attackers could have modi-
ﬁed votes. For instance, although the audit included looking
for log entries that would occur if an employee logged in
under the root account or attempted to remove a restriction
3Object Lock refers to a conﬁguration of Amazon’s S3 storage service that
allows the developer to designate certain classes of information unmodiﬁable
for various retention periods and conﬁgurations [4].
USENIX Association
30th USENIX Security Symposium    3085
Voter Private Information
IP address/coarse physical location
Delaware voter ID number
Name, address, and date of birth
Party afﬁliation
Partial social security number
Vote selections
Browser ﬁngerprint
Blank Ballot
Delivery
Conﬁguration
Online Ballot
Marking
Online Ballot
Return
+
+
*
*
+
+
*
*
+
+
*
*
Table 2: Access to privacy-sensitive data. We show what data is shared with Democracy Live when using OmniBallot in each mode offered
in Delaware. A + indicates that the information is also sent to Google; a * indicates that Google can infer it. All data is implicitly sent to AWS.
on bypassing Object Lock, it apparently did not search for
attempts to modify the software downloaded by clients or the
software running the lambda service. As we have explained,
changing either piece of software would be sufﬁcient to allow
an attacker to view and alter votes.
Such a limited analysis is insufﬁcient to verify the integrity
of an election, as it cannot detect the full range of sophis-
ticated threats that public elections face. No matter how
comprehensive, server-side logs cannot protect against client-
side attacks or attacks conducted through third-party services,
since such events would occur outside of Democracy Live’s
control. Likewise, no level of auditing or procedural controls
can eliminate the threat that attackers will introduce malicious
functionality into software without detection, and deliberate
vulnerabilities can be extremely subtle and difﬁcult to detect
(e.g., [12, 23]). Internal audits also provide little assurance
against the threat that the employees who conduct them are
themselves malicious. Finally, reviewing logs is necessarily
retrospective, so, even if a vote-changing attack was uncov-
ered, detection would likely occur only after the election.
Since Internet voting lacks voter-veriﬁed paper records from
which the correct votes could be recovered, ofﬁcials might be
forced to rerun the election.
4.4 Risks of Email-Based Ballot Return
Like other modes of online voting, email-based ballot re-
turn faces severe security risks that cannot be adequately
mitigated with available technology or controls. Different
OmniBallot jurisdictions use widely varying procedures for
email-based return; here we focus on the way it is imple-
mented in Delaware. Even after discontinuing OmniBallot,
Delaware allowed voters to return ballots by email.
Delaware voters who choose to return their ballots by email
are instructed to use Egress Switch [54], a “secure email” plat-
form produced by U.K.-based Egress Software Technologies,
Ltd. Rather than directly emailing the ballot, voters visit
https://switch.egress.com and sign up for accounts using their
email addresses. After proving that they have received a con-
ﬁrmation code sent to that address, the voter can log in to a
webmail interface, compose a message to a Delaware elec-
tions email address, and attach the voted ballot as a PDF ﬁle.
The recipient receives an email notiﬁcation that the message
is available and can log in to the same system to retrieve it.
A full analysis of Egress Switch is beyond the scope of this