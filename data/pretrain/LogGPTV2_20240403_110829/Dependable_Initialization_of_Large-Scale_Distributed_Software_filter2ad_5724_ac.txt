Component
Component
Component
Component
Component
Component
Process
Process
Process
Component
Component
Component
P1
P1
P1
A
A
A
B
B
B
P2
P2
P2
C
C
C
(b) Recovery graph
(b) Recovery graph
(b) Recovery graph
Figure 4: Component A failure example
Consider  the  interdependency  graph  shown  in
Figure 4(a).  The failure of component A is detected at 
9:10  minutes, five  seconds  after  the failure  occurs.    If
recovery  actions  are  started  immediately,  process  P1 
will  be  terminated  and  then restarted. Since  task  C1
operationally depends on task B1, C1 must be stopped,
and will  be  re-executed once  task  B1  has  re-executed.
The  shaded ovals  identify  what  tasks were being
executed when the failure of component A occurred.
Figure 4(b)  shows  the recovery  graph  for  this
scenario.  This leads to an overall initialization time of
19:20  minutes.    Deferring recovery  activities  until  C1
finishes utilizing B’s services at 10:10 minutes leads to 
an overall  initialization  time  of 12:20  minutes,  seven
minutes 
time  with
immediate  recovery.    The  shaded ovals  in  the  figure
identify the set of tasks that must be re-executed as part
of recovering from the failure of component A.
initialization 
total 
than 
less 
illustrates 
The  above  example 
that  deferring
recovery  actions  may  in  some  cases  lead  to  faster
system initialization  times  than  if  recovery  actions  are 
undertaken  immediately.    Intuitively,  this makes  sense
in cases where multiple components co-exist within the
same  process,  some  but  not  all  of  these  components
fail, 
fault-free
components within this process, and execution times of
and/or 
currently 
already-executed
initialization 
fault-free  components  are
(relatively)  long  duration.    As  these  tasks  must  be  re-
executed  during  recovery;  immediate  recovery  would 
delay progress of other initialization tasks.
executing 
tasks  of 
are  dependencies  on 
there
the 
To  achieve  the  fastest  possible  initialization  time
for  a  system at  any  given time,  it  is  important  to
determine which recovery scheme to use. We introduce
a recovery decision function that dynamically assesses, 
based on  current  initialization  conditions,  whether or
Proceedings of the 2004 International Conference on Dependable Systems and Networks (DSN’04) 
0-7695-2052-9/04 $ 20.00 © 2004 IEEE 
Authorized licensed use limited to: Tsinghua University. Downloaded on March 20,2021 at 11:51:18 UTC from IEEE Xplore.  Restrictions apply. 
initialization 
not  recovery actions  should  be  taken  immediately  or 
deferred.  Given apriori  knowledge  of  the  execution
time of each task Ti, when a failure occurs, the recovery
decision  function  is  invoked to  estimate  the  remaining
initialization times needed for each of the two schemes,
then  selects  the  one  that  provides  the  smaller  expected 
remaining  initialization  time4.  The  recovery  decision 
algorithm  is  shown  in  Figure  5,  where Timm  represents
the  expected remaining  initialization  time  using  the
immediate  recovery  scheme  and  Tdef  represents  the
expected remaining 
the 
deferred  recovery  scheme.  If  Timm (cid:100)  Tdef,  immediate
recovery  is  chosen;  otherwise,  deferred  recovery  is
selected. For both schemes, the remaining initialization
time  includes  the  time  spent recovering  failed  entities,
the  time  spent  re-executing  impacted  tasks  in  the  non-
faulty components and the time spent on the remaining
initialization  tasks for  the non-faulty  components.  The
time required to execute each component’s task can be
determined  either from  the task  execution  history  or 
from  application  developers' 
specifications.  The
estimation  of  the  remaining  initialization  time  is  based
on the recovery graph constructed from the dependable
initialization model.
time using 
ComputeRecoveryDecision({FailedEntities})
// FailedEntities: set of failed entities 
// Tdef: remaining init time deferred recovery 
// Timm: remaining init time immediate 
// recovery 
1. estimate Tdef for {FailedEntities};
2. estimate Timm for {FailedEntities}; 
3. if (Timm (cid:100) Tdef) 
choose immediate recovery;
else 
choose deferred recovery;
Figure 5: Recovery decision algorithm
time
t(ni) 
(by 
remaining 
initialization 
To  estimate Timm,  a  recovery  graph  Gimm  is
constructed 
invoking  our  previously-defined
ComputeRecoveryGraph  algorithm).  We  then  calculate
the 
for  each
component ni  in Gimm  and  assign  the  maximum t(ni)  to
Timm.  That  is Timm  =  max(t(ni),(cid:5) ni (cid:143)  Gimm). To
determine Tdef, we first identify tasks that are currently
using  services  provided by  non-faulty  components  in
processes 
faulty
components. We refer  to  these  tasks  as  clients  of  the
faulty  processes  {Pf}. For each  client,  denoted  ci,  we
determine the remaining time t(ci) for ci to complete the
execution of  its  current  tasks.  Assuming  that  recovery
actions are taken once all clients have finished using the
as  {Pf})  containing 
(denoted
4
This apriori  knowledge  will  typically  be  estimates of  execution 
times  for  each  task,  as  there  are  a  number  of factors  in  real  systems
that make  it  difficult  to  guarantee  actual  execution  time.    The
estimates may be updated based on a history of past execution times.
services  provided  by  {Pf},  a  corresponding  recovery
graph Gdef  is  constructed.  The  remaining  initialization
time t(ni) for each component ni in Gdef is computed and
Tdef  =  max( t(ni), (cid:5) ni (cid:143)  Gdef )  +  max( t(ci), (cid:5) ci (cid:143)
clients  of {Pf}).    Note  that  the  recovery  decision  itself 
takes negligible time to compute.
We  now  illustrate  the  recovery  decision-making
process by  applying  it  to  the  example  illustrated  in 
Figure 4.    The  recovery decision function  is  invoked
when  the failure  of  component  A  is  detected  at  9:10
minutes. Timm  evaluates  to  10:10  minutes,  and Tdef
evaluates to 3:10 minutes.  Thus, the deferred recovery
scheme should be chosen.
2.6.  Dependable Initialization Algorithm
In 
this  section,  we 
introduce  a  dependable
initialization algorithm  (Figure 6)  that  takes  into
account both  the  dependable  initialization model  and 
the recovery  decision function.  The  algorithm first
constructs  the  interdependency  graph G by  using  the
dependable  initialization  model  described  in  Section
2.2.  It  then triggers  and coordinates  initialization
activities among system initialization tasks. Whenever a
failure is reported (by invoking the FailureNotification
function), ComputeRecoveryDecision 
to
determine  the  recovery  scheme  that  would  minimize
overall  initialization  time.  If  immediate  recovery  is 
preferred,  processes associated  with  failed components
are  terminated,  the  recovery  graph  is  computed,  and 
initialization  continues using  the  recovery  graph. If
recovery  is  deferred,  the algorithm  will  place  certain
tasks ‘on hold’ (i.e., WAIT_FOR_RECOVERY), and will 
re-evaluate  whether  or  not  to  continue  deferring
recovery actions each and every time an executing task
completes.  In this way, the algorithm can dynamically
assess when to trigger recovery actions based on current
and remaining system initialization tasks.
is  called 
// Dependable initialization algorithm 
// entry point 
//
// G = G(v,e): interdependency graph 
// Ei: an entity that has failed.  Could be 
//     a processor, process, or component 
// Pj: a process 
// Failed: set of failed entities 
DependableInitialization()
1.
construct interdependency graph G; 
// Typically achieved through some form 
// of configuration file describing 
// application software architecture, 
// initialization tasks, and 
// dependencies 
(cid:5) tasks Ti that have no dependencies 
trigger execution of Ti; 
2.
2.1.
// Task completion notification: invoked when 
// task Ti completes 
TaskCompletionNotification(Tj)
Proceedings of the 2004 International Conference on Dependable Systems and Networks (DSN’04) 
0-7695-2052-9/04 $ 20.00 © 2004 IEEE 
Authorized licensed use limited to: Tsinghua University. Downloaded on March 20,2021 at 11:51:18 UTC from IEEE Xplore.  Restrictions apply. 
G(v) := G(v) – Tj; 
G(e) := G(e) – outgoing arcs from Tj; 
if G(v) = (cid:73)
initialization is complete; 
(cid:5) tasks Ti that have no dependencies 
if (Ti.State = WAIT_FOR_RECOVERY) 
1.
2.
3.
3.1.
4.
4.1.
4.1.1. 
decision :=
ComputeRecoveryDecision(Failed);
if (decision = immediate recovery) 
kill Pj corresponding to Ti; 
FailureNotification(Pj); 
else 
// No need to wait for recovery 
trigger execution of Ti; 
4.1.2.
4.1.2.1.
4.1.2.2. 
4.2. 
4.2.1.
4.2.2.
FailureNotification(Ei)
1.
Failed := Failed (cid:137) Ei and all sub-
entities;
decision :=
ComputeRecoveryDecision(Failed);
if (decision = immediate recovery) 
if Ei is a component, kill Pj 
corresponding to Ei; 
G := ComputeRecoveryGraph(G,Failed); 
(cid:5) tasks Ti (cid:143) G that have no 
dependencies
trigger execution of Ti; 
2. 
3.
3.1.
3.2.
3.3.
else 
3.3.1.
4. 
4.1.
4.2.
4.2.1.
// Defer recovery. 
(cid:5) tasks Ti (cid:143) Ei 
Ti.State := WAIT_FOR_RECOVERY; 
Figure 6: Dependable initialization algorithm
3.  Experimental Evaluation
In this section, we present experimental results for
a  prototype 
implementation  of  our  dependable
distributed  initialization  algorithm.    We  first  describe
the application’s initialization tasks, then present results
comparing 
dependable
initialization algorithm  to  that  of  a  “conventional”
initialization algorithm.
the  performance  of  our
3.1.  An Example Application
Our  example  application  is  based  on  an  actual 
distributed  call  processing  system  comprising  several
thousand  components  housed  within  several  tens  of
processes  spread  across  about  a  dozen  processors.
Figure 7  illustrates  the  set  of  initialization  tasks  and 
their  dependencies  from  the  view of  two  application
components that exist within different processes (we've
reduced  the number  of  initialization  steps  to  simplify
the discussion).  Task CreateProcess starts an operating 
system process.  There is one such task for each of the 
processes in our distributed call processing system. All 
processes 
  A
CreateComponent  task  creates  a  specific  application 
component;  all  application  components  can be created
  The SetupCommunication  task  for  a
in  parallel.
component  establishes  communication  channels with
parallel. 
started 
can 
be 
in 
task,
recovery. When  a  component  executes 
other components in the system.  This task must be re-
executed on failure of other components to re-establish
communication channels with these components as part
of
its
SetupConfiguration 
it  obtains  configuration
information  from  other  components  in  the  system  by 
exchanging  messages  with  them.    The  LocalInitialize
its
task 
SetupConfiguration 
the
LocalInitialize task, a component executes operations to 
configure 
  This may  require
interacting with other components and may require that
other  components  have
their
LocalInitialize tasks. Once LocalInitialize completes, a
component  executes  the Done  task,  at  which  point  the
component is considered initialized.
is  executed  once 
completes. 
for  a  component 
task 
already  completed 
internal  state. 
its 
In 
Done
DoneDone
Done
Done
DoneDone
O
O
Local
Local
Local
Initialize
Initialize
Initialize
S
S
Setup
Setup
Setup
Configuration
Configuration
Configuration
S
S
O
O
O
O
O or S
O or S
O
O
O
O or S
O or S
Local
Local
Local
Local
Initialize
Initialize
Initialize
Initialize
S
S
S
Setup
Setup
Setup
Setup
Configuration
Configuration
Configuration
Configuration
S
S
S
O
O
O
O
O
O
Setup
Setup
Setup
Communication
Communication
Communication
S
S
Create
Create
Create
Component
Component
Component
Component A
Component A
O
O
Create
Create
Create
Process
Process
Process
Process P1
Process P1
Setup
Setup
Setup
Setup
Communication
Communication
Communication
Communication
S
S
S
Create
Create
Create
Create
Component
Component
Component
Component
Component B
Component B
Component B
O
O
O
O
O
Create
Create
Create
Create
Process
Process
Process
Process
Process P2
Process P2
Process P2
Figure 7: Example application 
to 
be 
re-establish 
re-executed 
Note that a component’s SetupCommunication task 
must 
broken
communication  channels  resulting from  failures  of
other  components.
For  components  in  the  middle  of
executing their LocalInitialize tasks, this means that the