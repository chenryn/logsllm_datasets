### Deobfuscation of Obfuscated PE Files

To demonstrate the capability of our method to break Vigen√®re-based obfuscations, we applied Kandi to 152,960 obfuscated PE files. The probable plaintexts for this experiment were retrieved as described in Section 3.1 without further refinements. Figure 5(a) shows the results, where the key length is plotted against the deobfuscation success rate. For key lengths up to 13 bytes, the obfuscation can be reliably broken with a success rate of 93% or higher. This highlights Kandi's potential for automatically deobfuscating malware. However, the performance drops for keys longer than 13 bytes. While Kandi is not limited by key length, the limiting factor here is the collection and length of the plaintexts.

To study the impact of the plaintext length, we also applied Kandi with different values for the overlap ratio \( r \), as introduced in Section 3.3. The corresponding deobfuscation rates are visualized in Figure 5(b). A high value of \( r \) potentially increases performance but reduces the number of usable plaintexts. If there are too few usable plaintexts, it becomes difficult to estimate the correct key. As a result, Kandi achieves a deobfuscation performance of almost 100% for \( r = 1.0 \) with short keys, but struggles with longer keys.

### Runtime Performance

We additionally examined the runtime performance of Kandi. For this, we randomly selected 1,000 samples from the obfuscated PE files for each key length and repeated the previous experiment single-threaded on an Intel Core i7-2600K CPU at 3.40GHz running Ubuntu 12.04. As a baseline, we implemented a generic brute-force attack that was applied to the first 256 bytes of each file. Due to the defined starting point and the typical header structure of PE files, 256 bytes are sufficient to reliably break the obfuscation in this setting. Note that this may not be the case for embedded malware.

The results are shown in Figure 6, where the runtime and throughput of each approach are plotted against the key length. The brute-force attack is only feasible for keys up to 3 bytes. In contrast, Kandi's runtime is independent of key length, achieving an average throughput of 16.46 Mbit/s, which corresponds to analyzing 5 files of approximately 400 kB per second. Thus, Kandi's runtime is not only superior to brute-force attacks but also significantly faster than dynamic approaches like OmniUnpack [17] or PolyUnpack [18], making it beneficial for large-scale analysis of embedded malware.

### Deobfuscation of Injected PE Files

In our final controlled experiment, we studied the deobfuscation performance of Kandi on obfuscated PE files injected into Word documents. Figure 7(a) shows the results. For keys up to 8 bytes, our method deobfuscates most of the injected PE files without requiring the document to be parsed. We also inspected the influence of the overlap ratio \( r \) in this setting. Similar to the previous experiment, a larger value of \( r \) benefits short keys, with keys up to 8 bytes being broken with a success rate of 81% or higher. This effect is evident for keys between 4 and 8 bytes, as illustrated in Figure 7(b). For keys of length 8 bytes, a high value of \( r \) even doubles the deobfuscation performance compared to the default setting.

Based on these findings, we use an overlap ratio of \( r = 1.0 \) for subsequent experiments on real-world malware. We expect embedded malware found in the wild to primarily use keys of 1 to 8 bytes, as such keys fit into CPU registers, making implementations more compact. Additionally, 4-byte keys are already intractable for brute-force attacks.

### Real-World Experiments

To complete our evaluation, we demonstrated Kandi's ability to deobfuscate and extract malware from real-world samples. We acquired four datasets of real-world malware embedded in documents and images with different characteristics, as summarized in Table 2.

| **Dataset Name** | **Type** | **Formats** | **Samples** |
|------------------|----------|-------------|-------------|
| Exploits 1       | Documents | DOC, PPT, RTF | 992         |
| Exploits 2       | Documents | DOC, PPT, RTF | 237         |
| Dropper 1        | Documents | DOC, PPT, RTF | 336         |
| Dropper 2        | Images    | PNG, GIF, JPG, BMP | 52  |
| **Total**        |          |             | 1,617       |

Embedded malware is typically executed by exploiting vulnerabilities in document viewers. For the first dataset (Exploits 1), we retrieved all available Word, PowerPoint, and RTF documents from VirusTotal that are detected by an anti-virus scanner and labeled with exploit-related terms. Similarly, the second dataset (Exploits 2) was constructed by downloading documents tagged with specific CVE numbers. 

For the third and fourth datasets, we targeted malware droppers. The first set (Dropper 1) contains documents labeled as droppers, while the second set (Dropper 2) includes malicious images. An overview of the deobfuscation performance on these datasets is provided in Table 3.

| **Dataset**      | **Not Obfuscated** | **Obfuscated** | **Deobfuscated by Kandi** |
|------------------|--------------------|----------------|---------------------------|
| Exploits 1       | 211                | -              | -                         |
| Exploits 2       | 35                 | -              | -                         |
| Dropper 1        | 86                 | -              | -                         |
| Dropper 2        | 27                 | -              | -                         |
| **Total**        | 359                | -              | -                         |

We deliberately excluded malicious PDF files from our analysis, as this format often uses JavaScript encoding functions like Base64 and URI encoding, which are not natively available in other formats.