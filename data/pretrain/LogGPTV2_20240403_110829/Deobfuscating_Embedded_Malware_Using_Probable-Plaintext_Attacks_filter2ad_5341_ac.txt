n
i
e
t
a
r
n
o
i
t
a
c
s
u
f
b
o
e
D
r = 0.0
r = 0.5
r = 1.0
0
2
4
6
8
10
12
Key length
(a) Obfuscated PE ﬁles
(b) Inﬂuence of the overlap ratio
Fig. 5. Deobfuscation performance of Kandi on obfuscated PE ﬁles. Figure (b) shows
the performance for diﬀerent overlap ratios.
Deobfuscation of Obfuscated PE Files. To demonstrate the capability of
our method to break Vigen`ere-based obfuscations, we ﬁrst apply Kandi to the
152,960 obfuscated PE ﬁles. The probable plaintexts for this experiment are
retrieved as described in Section 3.1 without further reﬁnements. Figure 5(a)
shows results for this experiment, where the key length is plotted against the
rate of deobfuscated PE ﬁles. For key lengths up to 13 bytes, the obfuscation can
be reliably broken with a success rate of 93% and more. This nicely illustrates
the potential of Kandi to automatically deobfuscate malware. We also observe
that the performance for keys longer than 13 bytes drops. While our approach
is not capped to a speciﬁc key length, the limiting factor at this point is the
collection of plaintexts and in particular the length of those.
To study the impact of the plaintext length, we additionally apply Kandi
with diﬀerent values for the overlap ratio r as introduced in Section 3.3. The
corresponding deobfuscation rates are visualized in Figure 5(b). Although a high
value of r potentially increases the performance, it also reduces the number
of plaintexts that can be used. If there are too few usable plaintexts, it gets
diﬃcult to estimate the correct key. As a result, Kandi attains a deobfuscation
performance of almost 100% for r = 1.0 if the keys are short, but is not able to
reliably break obfuscations with longer keys.
Runtime Performance. We additionally examine the runtime performance of
Kandi. For this purpose, we randomly draw 1,000 samples from the obfuscated
PE ﬁles for each key length and repeat the previous experiment single-threaded
on an Intel Core i7-2600K CPU at 3.40GHz running Ubuntu 12.04. As baseline
for this experiment, we implement a generic brute-force attack that is applied to
176
C. Wressnegger, F. Boldewin, and K. Rieck
64.3 seconds
Brute-force
Kandi (r = 0.0)
Kandi (r = 1.0)
2
10
1
10
0
10
-1
10
-2
10
s
d
n
o
c
e
s
n
i
e
m
i
t
n
u
R
-3
10
0
5
10
15
20
Key length
25
30
s
/
b
M
n
i
t
u
p
h
g
u
o
r
h
T
35
30
25
20
15
10
5
0
0
Brute-force
Kandi (r= 0.0)
Kandi (r= 1.0)
5
10
15
20
Key length
25
30
(a) Average runtime per ﬁle
(b) Average throughput
Fig. 6. Runtime performance of Kandi in comparison to a brute-force attack on a
batch of 1,000 randomly drawn obfuscated PE ﬁles
the ﬁrst 256 bytes of each ﬁle. Due to the deﬁned starting point and the typical
header structure of PE ﬁles 256 bytes are already suﬃcient to reliably break the
obfuscation in this setting. Note that this would not be necessarily the case for
embedded malware.
The results of this experiment are shown in Figure 6 where the runtime and
throughput of each approach are shown on the y-axis and the key length on the
x-axis. Obviously, the brute-force attack is only tractable for keys of at most 3
bytes. By contrast, the runtime of Kandi does not depend on the key length and
the method attains a throughput of 16.46 Mbit/s on average, corresponding to an
analysis speed of 5 ﬁles of ∼400 kB per second. Consequently, Kandi’s runtime
is not only superior to brute-force attacks but also signiﬁcantly below dynamic
approaches like OmniUnpack [17] or PolyUnpack [18] and thus beneﬁcial for
analyzing embedded malware at large scales.
Deobfuscation of Injected PE Files. As last controlled experiment, we study
the deobfuscation performance of Kandi when being operated on obfuscated PE
ﬁles that have been injected into Word documents. Figure 7(a) shows the results
of this experiment. For keys with up to 8 bytes, our method deobfuscates most of
the injected PE ﬁles—without requiring the document to be parsed. Moreover,
we again inspect the inﬂuence of the overlap ratio r in this setting. Similar to
the previous experiment, a larger value of r proves beneﬁcial for short keys, such
that keys up to 8 bytes are broken with a success rate of 81% and more. This
inﬂuence of the overlap ratio gets evident for keys between 4 and 8 bytes as
illustrated Figure7(b). For keys of length l = 8 a high value of r even doubles
the deobfuscation performance in comparsion to the default setting.
Due to this, we use an overlap ratio of r = 1.0 for the following experiments on
real-world malware. We expect embedded malware found in the wild to mainly
use keys of 1 to 8 bytes. The reasons for this assumption is that such keys ﬁt into
CPU registers and therefore implementations are more compact. Furthermore,
4-byte keys are already intractable for brute-force attacks.
Deobfuscating Embedded Malware Using Probable-Plaintext Attacks
177
100
80
60
40
20
t
n
e
c
r
e
p
n
i
e
t
a
r
n
o
i
t
a
c
s
u
f
b
o
e
D
Kandi (r = 1.0)
100
90
80
70
60
50
40
t
n
e
c
r
e
p
n
i
e
t
a
r
n
o
i
t
a
c
s
u
f
b
o
e
D
r = 0.0
r = 0.5
r = 1.0
0
0
2
4
8
6
10
Key length
12
14
16
4
5
6
7
8
Key length
(a) Obfuscated PE ﬁles
(b) Inﬂuence of the overlap ratio
Fig. 7. Deobfuscation performance of Kandi on Word documents containing obfus-
cated PE ﬁles. Figure (b) shows the performance for diﬀerent overlap ratios.
4.2 Real-World Experiments
To top oﬀ our evaluation we proceed to demonstrate how Kandi is able to
deobfuscate and extract malware from samples seen in the wild. To this end, we
have acquired four datasets of real-world malware embedded in documents and
images with diﬀerent characteristics.
Table 2. Overview of the four datasets of malicious documents and images
Dataset name Type
Formats
Samples
Exploits 1
Exploits 2
Dropper 1
Dropper 2
Total
Documents
Documents
Documents
Images
DOC, PPT, RTF
DOC, PPT, RTF
DOC, PPT, RTF
PNG, GIF, JPG, BMP
992
237
336
52
1,617
Malware Datasets. Embedded malware is typically executed by exploiting
vulnerabilities in document viewers. For the ﬁrst dataset (Exploits 1 ) we thus
retrieve all available Word, Powerpoint and RTF documents from VirusTotal
that are detected by an anti-virus scanner and whose label indicates the presence
of an exploit, such as exploit.msword or exploit.ole2. Similarly, we construct
the second dataset (Exploits 2 ) by downloading all documents that are tagged
with one of the following CVE numbers: 2003-0820, 2006-2492, 2010-3333,
2011-0611, 2012-0158 and 2013-0634.
As our method speciﬁcally targets PE ﬁles embedded in documents, we ad-
ditionally compose two datasets of malware droppers. The ﬁrst set (Dropper 1 )
contains all available Word, Powerpoint and RTF documents that are detected
by an anti-virus scanner and whose label contains the term dropper. The second
dataset (Dropper 2 ) is constructed similarly by retrieving all malicious images
178
C. Wressnegger, F. Boldewin, and K. Rieck
labeled as dropper. An overview of all four datasets is given in Table 3. We
deliberately exclude malicious PDF ﬁles from our analysis, as this ﬁle format al-
lows to incorporate JavaScript code. Consequently, the ﬁrst layer of obfuscation
is often realized using JavaScript encoding functions, such as Base64 and URI
encoding. Such encodings are not available natively for other formats and hence
we do not consider PDF ﬁles in this work.
Table 3. Deobfuscation performance of Kandi on real-world malware. The last
columns detail the number of samples that were successfully deobfuscated.
Dataset Not Obfuscated Obfuscated Deobfuscated by Kandi
Exploits 1
Exploits 2
Dropper 1
Dropper 2
Total
211
35
86
27
359