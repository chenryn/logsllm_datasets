(mod n)
The choice of parameters: k, c, and the fi’s is discussed
in section 3.4. Note that, assuming that it is computation-
ally diﬃcult to “break” RSA, parameter selection should not
introduce any attacks that compromise the security of the
above computation by the server, namely xd (mod n). An
attacker can attempt to exhaust all possible vector values fi
thereby deriving d. Thus, a minimal requirement for c and
k is that a brute force attack (which requires 2c×k steps)
should be as diﬃcult as breaking underlying RSA4.
3.1.2 CA-RSA
CA-RSA improves upon the performance of the basic scheme
by taking advantage of the Chinese Remainder Theorem
(CRT). Quisquater and Couvreur [7] demonstrated how RSA
secret key exponentiations could be sped up with CRT.
The technique works as follows: Let dp = d mod (p − 1)
and dq = d mod (q − 1). For Mp = M dp (mod p) and
Mq = M dq (mod q), we have M d = Mp × np + Mq × nq
(mod n), where np = q × (q−1 (mod p)) and nq = p × (p−1
(mod q)). Because np and nq can be pre-computed, and,
since exponentiations mod p or q are more eﬃcient to com-
pute than those mod n, we can expect an approximate factor
of 4 speed-up of private-key operations [8] when using the
CRT.
In CA-RSA, the server initially pre-computes dp, dq, np
and nq, where np and nq are derived as described above:
dp =
k
X
i=1
fidi mod (p − 1), dq =
k
X
i=1
gidi mod (q − 1)
All fi’s and gi’s are random c-bit values.
The following takes place when a server wants to oﬄoad
the computation of xd (mod n) to a client:
1. Server sends vector D = (d1, d2, ..., dk) to the Client.
2. Client computes vector Z = (z1, z2, ..., zk), where zi =
xdi (mod n), and sends it back to server.
3. Server computes intermediary values Mp = Qk
i=1 zfi
i
(mod q). Finally, xd =
(mod p) and Mq = Qk
Mpnp + Mqnq (mod n).
i=1 zgi
i
3.2 Incorporating CA-RSA into the SSL Hand-
shake
We now describe the modiﬁcations to the SSL Handshake
protocol necessary to incorporate CA-RSA. The client hello
and server hello messages remain unchanged, although the
server’s certiﬁcate (which is sent as part of the server hello
message) now includes the vector D = (d1, d2, ..., dk). The
client chooses a random value x, which is then used to derive
the SSL session key, and uses the server’s public exponent
to encrypt it: y = xe (mod n). Next, the client uses D
to construct a vector Z by computing the individual vector
elements zi = ydi (mod n), for 1 ≤ i ≤ k. This vector
is included in the client key exchange message. The server,
upon receiving this message, performs its CRT computations
and derives yd = (xe)d = x (mod n). The remainder of the
handshake remains unchanged. Figure 2 shows the modiﬁed
protocol.
4Actually, only 2c×k/2 steps are needed to break this ba-
sic scheme via the classical meet-in-the-middle attack [2].
However, the attack in [2] does not apply to the CA-RSA
protocol described in the following section.

Client
SSL Server
rc, cipher-specs
client hello
−−−−−−−−−−−−−−−−−−−−−−−→
server hello
rs, cipherspecs
←−−−−−−−−−−−−−−−−−−−−−−
x ∈R {0, 1}48
k = f (x, rc, rs)
y = xe (mod n)
zi = ydi (mod n)
Z = (z1, ..., zk)
client key exchange
−−−−−−−−−−−−−−−−−−−−−−−→
Mp = Qk
Mq = Qk
(mod p)
(mod q)
x = yd = Mpnp + Mqnq (mod n)
k = f (x, rc, rs)
i
i=1 zfi
i=1 zgi
i
server ﬁnish
←−−−−−−−−−−−−−−−−−−−−−−
Figure 2: Incorporating CA-RSA into the SSL handshake protocol
3.3 Security and Parameter Selection
This section discusses security considerations and param-
eter selection issues for CA-RSA.
Two Server-Aided RSA schemes were originally proposed
by Matsumoto et al.
[1]: RSA-S1 and RSA-S2. They cor-
respond to “Simple CA-RSA” and CA-RSA algorithms, re-
spectively. In fact, CA-RSA is almost identical to RSA-S2,
except the roles of the client and server are reversed.
Initially, RSA-S1 and RSA-S2 used binary exponent val-
ues for fi and gi. These versions of Server-Aided RSA were
soon subject to attacks. Recall that, in RSA-S1, the private
exponent d is represented as d = Pk
i=1 fidi (mod φ(n)),
where the fi’s are randomly selected c-bit elements (c = 1
when binary exponents are used). Once vector D = (d1, d2, ..., dk)
is sent to the client (as part of the protocol), the secrecy of
private exponent d relies upon the secrecy of the fi’s. Us-
ing binary values for the fi’s allows for simple, but eﬀective,
attacks [9, 10].
Subsequent incarnations (RSA-S1M and RSA-S2M) by
Matsumoto, et al.
[11] were also attacked by Lim and Lee
[12]. This led to the development of parameter selection
guidelines for RSA-S1 and RSA-S2 [13, 14]. The goals of
these guidelines were to protect against known vulnerabili-
ties and to suggest parameter values that would withstand
brute force attacks aimed at ﬁnding the server’s private RSA
exponent d. In summary, when used together with the sug-
gested parameter guidelines, CA-RSA (i.e., RSA-S2) has not
been successfully attacked.5
For CA-RSA, the guidelines required for it to be infea-
sible to deduce values dp or dq via brute force, since an
attacker with knowledge of either one would be able to
factor modulus n and thereby break RSA. Given a vector
D = (d1, d2, ..., dk), a search through all possible values of F
(respectively G) would reveal dp (respectively dq). Because
5Certain other variations of Server-Aided RSA [15, 16] were
later found suspectible to lattice reduction attacks [17, 18].
there are k c-bit vector elements, the guidelines mandated
that the search space of 2c×k values be large enough to pre-
vent such an exhaustive search.
When choosing CA-RSA parameters, we speciﬁcally se-
lected the values c and k such as to meet the requirements
set forth in the guidelines while making the diﬃculty of ex-
hausting the resulting search space at least equivalent to (or
harder than) breaking the underlying RSA cryptosystem.
As is well-known, the strength of the RSA cryptosystem,
when correctly instantiated, depends upon the key (mod-
ulus) size. Currently, 1024-bit keys are common, however,
based upon projected advances in computing power, experts
in the cryptography research community recommend using
larger values for longer-term security.
Exhaustive search of 2c×k values is equivalent to search-
ing for all possible keys in a symmetric-key cryptosystem
(for example DES, AES or Blowﬁsh). Thus, based upon the
RSA key size used, we need to determine symmetric key size
that would provide equivalent security. Lenstra and Verheul
give formulas for determining such keys in their well-known
work on cryptographic key size selection [19]. They use his-
torical cryptanalysis developments and projected computing
powers to develop hypotheses and create formulas for choos-
ing cryptographic key sizes, depending upon how far into the
future the cryptosystems are to remain secure. Since their
formulas cover both symmetric and asymmetric cryptosys-
tems, the results are applicable for our purposes. Based on
their formulas, RSA with 1024- and 1536-bit keys would be
roughly equal in strength to a symmetric-key cryptosystem
with 72- and 80-bit keys, respectively.
3.4 Performance
This subsection describes our experimental results
3.4.1 Experiment set-up
We measured the speedup in the execution time of RSA
decryptions when using CA-RSA instead of plain RSA (with

CRT). As noted in section 2, the most computationally
expensive operation in the SSL handshake protocol is the
server’s private key decryption. Therefore, we determine an
upper bound on the number of SSL requests by measuring
the number of RSA decryptions a server can perform within
a given time frame. Our hardware platform was a 1.7 Ghz
Intel Celeron with 256 MB RAM running Red Hat 9.0 Linux.
The scripts were written using the OpenSSL cryptographic
library (version 0.9.7). RSA keys of 1024, 1536 and 2048
bits were used so as to test CA-RSA performance with both
current and future security parameters.
3.4.2 Results
Table 1 lists the average decryption time (in msecs) for
the three moduli with both plain RSA and CA-RSA.
Table 1: Average decryption time (msec):
Key size
1024
1536
2048
RSA CA-RSA c × k
7.05
19.79
44.22
0.62
1.25
2.31
72
80
88
Improvement
11.33
15.76
19.12
These results show CA-RSA speedups of 11.3, 15.8 and
19.1 times (as opposed to plain RSA) for 1024-, 1536- and
2048-bit keys, respectively. Expected theoretical speed-ups
are 13, 17.8 and 21.7, respectively. These results compare
favorably with another technique aimed at speeding up RSA
decryptions – SSL batching proposed by Shacham and Boneh
[20] – which achieves a factor of 2.5 speed-up for 1024-bit
RSA keys.
As described in section 3.3, the CA-RSA values c and k
were selected based upon key size formulas in [19], such that
c×k corresponds to a symmetric key comparable in strength
to the corresponding RSA key. Speciﬁcally, for 1024-, 1536-
and 2048-bit keys, c×k was set to 72, 80 and 88 bits, respec-
tively. The results mean that a server with a 1024-bit RSA
key can perform approximately 11 times as many decryption
operations per second. A secure web server achieving such
speedups (of one order in magnitude) becomes comparable
to hardware-accelerated SSL servers when using CA-RSA as
opposed to plain RSA.
For CA-RSA, the optimal parameter selection strategy
is to minimize k and thereby maximize c. The parameter
selection guidelines (section 3.3) specify the smallest possible
value of k to be 2, and c is therefore set to 36, 40 and 44 bits
for the 72, 80 and 88 bit keys, respectively. Figure 3 shows
how decryption time varies depending on the distribution
of bits between parameters c and k, while maintaining the
property that c × k = 72, 80 and 88 for the RSA keys of
equivalent strength.
3.5 Discussion
It is important to understand the eﬀect of the CA-RSA
speedup technique in terms of improvement in the number
of SSL transactions that can be handled by a secure web
server. In [21] Coarfa et al. dissected SSL transactions such
as to measure the inﬂuence of the individual computations
involved. These include, amongst others, operations such as
the RSA private-key computation, hash function evaluation
and bulk encryption of payload data with symmetric key
algorithms. One aspect that stands out is that the impor-
0
)
c
e
s
m
(
i
e
m
T
n
o
i
t
p
y
r
c
e
D
e
g
a