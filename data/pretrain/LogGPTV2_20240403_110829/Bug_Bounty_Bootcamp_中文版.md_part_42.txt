您可以尝试将相同的请求作为GET请求发送，看一下是否可以免费提供CSRF令牌：
    GET /password_change?new_password=abc123
    Host: email.example.com
    Cookie: session_cookie=YOUR_SESSION_COOKIE
In this case, your malicious HTML page could simply look like this:
在这种情况下，你的恶意 HTML 页面可能看起来很简单，就像这样：
[ ]{#c09.xhtml#Page_165 .pagebreak title="165"} The HTML
`           ` tag loads images from external sources. It will send
a GET request to the URL specified in its `      src     ` attribute.
HTML \ 标签从外部源加载图像。它将向其 src 属性中指定的 URL 发送
GET 请求。
If the password change occurs after you load this HTML page, you can
confirm that the endpoint is vulnerable to CSRF via a GET request. On
the other hand, if the original action normally uses a GET request, you
can try converting it into a POST request instead.
如果在加载此HTML页面后密码更改发生，则可以通过GET请求确认该端点容易受到CSRF攻击。另一方面，如果原始操作通常使用GET请求，则可以尝试将其转换为POST请求。
### Bypass CSRF Tokens Stored on the Server {#c09.xhtml#h2-501546c09-0006}
But what if neither clickjacking nor changing the request method works?
If the site implements CSRF protection via tokens, here are a few more
things that you can try.
但如果既不能进行点击劫持，也不能更改请求方法，如果网站通过令牌实现了
CSRF 保护，那么你可以尝试以下几件事情。
Just because a site uses CSRF tokens doesn't mean it is validating them
properly. If the site isn't validating CSRF tokens in the right way, you
can still achieve CSRF with a few modifications of your malicious HTML
page.
仅仅因为一个站点使用CSRF令牌并不意味着它正确地验证了它们。如果该站点没有以正确方式验证CSRF令牌，则您仍然可以通过一些恶意HTML页面的修改来实现CSRF。
First, try deleting the token parameter or sending a blank token
parameter. For example, this will send the request without a
`      csrf_token     ` parameter:
首先，尝试删除令牌参数或发送空令牌参数。例如，这将发送没有csrf_token参数的请求。
    POST /password_change
    Host: email.example.com
    Cookie: session_cookie=YOUR_SESSION_COOKIE
    (POST request body)
    new_password=abc123
You can generate this request with an HTML form like this:
你可以使用以下 HTML 表单来生成此请求：
This next request will send a blank `      csrf_token     ` parameter:
这个下一个请求会发送一个空的csrf_token参数。
    POST /password_change
    Host: email.example.com
    Cookie: session_cookie=YOUR_SESSION_COOKIE
    (POST request body)
    new_password=abc123&csrf_token=
You can generate a payload like this by using an HTML form like the
following:
通过使用以下HTML表单，您可以生成类似于这样的有效载荷：
Deleting the token parameter or sending a blank token often works
because of a common application logic mistake. Applications sometimes
check the validity of the token only *if* the token exists, or if the
token parameter is not blank. The code for an insecure application's
validation mechanism might look roughly like this:
删除令牌参数或发送空令牌通常有效，因为存在常见的应用程序逻辑错误。应用程序有时仅在令牌存在或令牌参数不为空时才检查令牌的有效性。不安全应用程序的验证机制代码可能大致如下：
    def validate_token():
    1 if (request.csrf_token == session.csrf_token):
        pass
      else:
    2 throw_error("CSRF token incorrect. Request rejected.")
    [...]
    def process_state_changing_action():
      if request.csrf_token:
        validate_token()
    3 execute_action()
This fragment of Python code first checks whether the CSRF token exists
[ 1 ]{.CodeAnnotation aria-label="annotation1"} . If it exists, the code
will proceed to validate the token. If the token is valid, the code will
continue. If the token is invalid, the code will stop the execution and
produce an error [ 2 ]{.CodeAnnotation aria-label="annotation2"} . On
the other hand, if the token does not exist, the code will skip
validation and jump to executing the action right away [ 3
]{.CodeAnnotation aria-label="annotation3"} . In this case, sending a
request without the token, or a blank value as the token, may mean the
server won't attempt to validate the token at all.
这段 Python 代码首先检查 CSRF
令牌是否存在。如果存在，代码将进一步验证令牌。如果令牌有效，代码将继续执行。如果令牌无效，代码将停止执行并产生错误。另一方面，如果令牌不存在，代码将跳过验证，直接执行动作。在这种情况下，发送没有令牌或空值作为令牌的请求可能意味着服务器根本不会尝试验证令牌。
You can also try submitting the request with another session's CSRF
token. This works because some applications might check only whether the
token is valid, without confirming that it belongs to the current user.
Let's say the victim's token is
`      871caef0757a4ac9691aceb9aad8b65b     ` , and yours is
`      YOUR_TOKEN     `{.variable} . Even though it's hard to get the
victim's token, you can obtain your own token easily, so try providing
your own token in the place of the legitimate token. You can also create
another test account to generate tokens if you don't want to use your
own tokens. For example, your exploit code might look like this:
您也可以尝试使用另一个会话的 CSRF
令牌来提交请求。这是因为一些应用程序可能仅检查令牌是否有效，而不确认它属于当前用户。假设受害者的令牌是871caef0757a4ac9691aceb9aad8b65b，您的令牌是YOUR_TOKEN。即使很难获取受害者的令牌，您可以轻松获得自己的令牌，因此请尝试在合法令牌的位置提供您自己的令牌。如果您不想使用自己的令牌，还可以创建另一个测试帐户来生成令牌。例如，您的利用代码可能如下所示：
    POST /password_change
    Host: email.example.com
    Cookie: session_cookie=YOUR_SESSION_COOKIE
    (POST request body)
    new_password=abc123&csrf_token=YOUR_TOKEN
The faulty application logic might look something like this:
有缺陷的应用逻辑可能类似于这样：
    def validate_token():
      if request.csrf_token:
    1  if (request.csrf_token in valid_csrf_tokens):
        pass
      else:
        throw_error("CSRF token incorrect. Request rejected.")
    [...]
    def process_state_changing_action():
      validate_token()
    2 execute_action()
The Python code here first validates the CSRF token. If the token is in
a list of current valid tokens [ 1 ]{.CodeAnnotation
aria-label="annotation1"} , execution continues and the state-changing
action is executed [ 2 ]{.CodeAnnotation aria-label="annotation2"} .
Otherwise, an error is generated and execution halts. If this is the
case, you can insert your own CSRF token into the malicious request!
这段 Python 代码首先验证 CSRF
令牌。如果该令牌在当前有效令牌列表之内，则进入执行第1步的状态，并执行状态变更的操作2。否则，将产生错误并停止执行。如果是这样的话，您可以将自己的
CSRF 令牌插入到恶意请求中！
### Bypass Double-Submit CSRF Tokens {#c09.xhtml#h2-501546c09-0007}
Sites also commonly use a *double-submit cookie* as a defense against
CSRF. In this technique, the state-changing request contains the same
random token as both a cookie and a request parameter, and the server
checks whether the two values are equal. If the values match, the
request is seen as legitimate. Otherwise, the application rejects it.
For example, this request would be deemed valid, because the
`      csrf_token     ` in the user's cookies matches the
`      csrf_token     ` in the POST request parameter:
网站也通常使用双重提交 cookie 作为防范 CSRF
的一种方法。在这种技术中，改变状态的请求包含相同的随机令牌，既是一个
cookie，也是一个请求参数，服务器会检查这两个值是否相等。如果这些值相匹配，则请求被视为合法，在其他情况下，应用程序将拒绝该请求。例如，如果用户
cookies 中的 csrf_token 与 POST 请求参数中的 csrf_token
匹配，则此请求将被视为有效。
    POST /password_change
    Host: email.example.com
    Cookie: session_cookie=YOUR_SESSION_COOKIE; csrf_token=871caef0757a4ac9691aceb9aad8b65b
    (POST request body)
    new_password=abc123&csrf_token=871caef0757a4ac9691aceb9aad8b65b
And the following one would fail. Notice that the
`      csrf_token     ` in the user's cookies is different from the
`      csrf_token     ` in the POST request parameter. In a
double-submit token validation system, it does not matter whether the
tokens themselves are valid. The server checks only whether the token in
the cookies is the same as the token in the request parameters:
而下一个则会失败。注意，在用户的Cookie中的csrf_token与POST请求参数中的csrf_token不同。在双重提交令牌验证系统中，令牌本身是否有效并不重要。服务器只检查Cookie中的令牌是否与请求参数中的令牌相同。
    POST /password_change
    Host: email.example.com
    Cookie: session_cookie=YOUR_SESSION_COOKIE; csrf_token=1aceb9aad8b65b871caef0757a4ac969
    (POST request body)
    new_password=abc123&csrf_token=871caef0757a4ac9691aceb9aad8b65b
If the application uses double-submit cookies as its CSRF defense
mechanism, it's probably not keeping records of the valid token
server-side. If the server were keeping records of the CSRF token
server-side, it could simply validate the token when it was sent over,
and the application would not need to use double-submit cookies in the
first place.
如果应用程序使用双重提交 cookie 作为其 CSRF
防御机制，则其可能没有在服务器端保留有效令牌的记录。如果服务器在服务器端保留
CSRF
令牌的记录，则可以在发送令牌时简单地验证令牌，并且应用程序不需要首先使用双重提交
cookie。
[ ]{#c09.xhtml#Page_168 .pagebreak title="168"} The server has no way of
knowing if any token it receives is actually legitimate; it's merely
checking that the token in the cookie and the token in the request body
is the same. In other words, this request, which enters the same bogus
value as both the cookie and request parameter, would also be seen as
legitimate:
服务器无法知道它收到的任何令牌是否真实合法；它仅检查Cookie中的令牌和请求正文中的令牌是否相同。换句话说，发送相同伪造值作为Cookie和请求参数的此请求也将被视为合法的：
    POST /password_change
    Host: email.example.com
    Cookie: session_cookie=YOUR_SESSION_COOKIE; csrf_token=not_a_real_token
    (POST request body)
    new_password=abc123&csrf_token=not_a_real_token
Generally, you shouldn't have the power to change another user's
cookies. But if you can find a way to make the victim's browser send
along a fake cookie, you'll be able to execute the CSRF.
一般情况下，你不应该有更改其他用户的 cookies
的权力。但是，如果你能找到一种方法使受害者的浏览器发送一个虚假的
cookie，你就能执行 CSRF 攻击。
The attack would then consist of two steps: first, you'd use a
session-fixation technique to make the victim's browser store whatever
value you choose as the CSRF token cookie. *Session fixation* is an
attack that allows attackers to select the session cookies of the
victim. We do not cover session fixations in this book, but you can read
about them on Wikipedia (
[https://en.wikipedia.org/wiki/Session_fixation](https://en.wikipedia.org/wiki/Session_fixation){.LinkURL}
). Then, you'd execute the CSRF with the same CSRF token that you chose
as the cookie.
攻击将包括两个步骤：首先，您将使用会话固定技术使受害者的浏览器存储您选择的CSRF令牌cookie的任何值。会话固定是一种攻击，允许攻击者选择受害者的会话cookie。我们不在本书中涵盖会话固定，但可以在维基百科上阅读有关它们的内容（https://en.wikipedia.org/wiki/Session_fixation）。然后，您将使用与您选择的CSRF令牌相同的CSRF令牌执行CSRF。