## SQL 审查基础插件 pg_query , 识别风险SQL等, Introducing pg_query 2.0: The easiest way to parse Postgres queries  
### 作者  
digoal  
### 日期  
2021-03-20   
### 标签  
PostgreSQL , parser , SQL 审查    
----  
## 背景   
SQL 审查, 例如开发人员提交变更SQL, DBA负责检查SQL有无风险, 人肉.  
我们可以通过定义一些规则自动化识别风险, SQL 审查! parser是基本功.    
除此以外, 还可以被用于SQL语法兼容, SQL监控, 高亮语法, SQL debug等场景.    
https://pganalyze.com/blog/pg-query-2-0-postgres-query-parser  
https://github.com/pganalyze/libpg_query  
https://github.com/pganalyze  
![pic](20210320_03_pic_001.png)  
The query parser is a core component of Postgres: the database needs to understand what data you're asking for in order to return the right results. But this functionality is also useful for all sorts of other tools that work with Postgres queries. A few years ago, we released pg_query to support this functionality in a standalone C library.  
pganalyze uses pg_query to parse and analyze every SQL query that runs on your Postgres database. Our initial motivation was to create pg_query for checking which tables a query references, or what kind of statement it is. Since then we've expanded its use in pganalyze itself. pganalyze now truncates query text in a smart manner in the query overview. The pganalyze-collector supports collecting EXPLAIN plans, and uses pg_query to support log-based EXPLAIN. And we link together pg_stat_statements and auto_explain data in pganalyze using query fingerprints (another pg_query feature we'll discuss in detail in a later section).  
## Postgres community tools build on pg_query  
But, what we didn't expect at the time, was the tremendous interest we've seen from the community. The Ruby library alone has received over 3.5 million downloads in its lifetime.  
Thanks to many contributors, pg_query now has bindings for other languages beyond Ruby and Go, such as Python (pglast, maintained by Lele Gaifax), Node.js (pgsql-parser, maintained by Dan Lynch) and even OCaml. There are also many notable third-party projects that use pg_query to parse Postgres queries. Here are some of our favorites:  
- sqlc provides type safe SQL-based databases access in Go  
- pgdebug lets you debug complex CTEs and execute parts as a standalone query  
- Google's HarbourBridge uses pg_query for helping customers trial Spanner from Postgres sources  
- DuckDB uses a forked version of pg_query for their parsing layer  
- GitLab uses pg_query for normalizing queries in their internal error reporting  
- Splitgraph uses pg_query via the pglast Python binding to parse the SQL statements in Splitfiles  
- sqlint lints your SQL files for correctness  
Today, it's time to bring pg_query to the next level.  
## Announcing pg_query 2.0: Better & faster parsing, with Postgres 13 support  
We're excited to announce the next major version of pg_query, pg_query 2.0.  
In this version, you'll find support for:  
- Parsing the PostgreSQL 13 query syntax  
- Deparser as part of the core C library, to turn modified parse trees back into SQL  
- New parse tree format based on Protocol Buffers (Protobuf)  
- Improved, faster query fingerprinting mechanism  
- And much more!  
To start, let's revisit how pg_query actually works.  
## How pg_query turns a Postgres statement into a parse tree  
There are many ways to parse SQL, but the scope for pg_query is very specific. That is, to be able to parse the full Postgres query syntax, the same way as Postgres does. The only reliable way to do this, is to use the Postgres parser itself.  
pg_query isn't the first project to do this, for example pgpool has a copy of the Postgres parser as well. But we needed an easily maintainable, self-contained version of the parser in a standalone C library. This would let us, and the Postgres community, use the parser from almost any language by writing a simple wrapper.  
How did we do this? We started by looking at the Postgres source. Looking at the source, you will find the function called raw_parser:  
```  
/*  
 * raw_parser  
 *		Given a query in string form, do lexical and grammatical analysis.  
 *  
 * Returns a list of raw (un-analyzed) parse trees.  The immediate elements  
 * of the list are always RawStmt nodes.  
 */  
List *  
raw_parser(const char *str)  
{  
    ...  
```  
After raw parsing, Postgres goes into parse analysis. In that phase Postgres identifies the types of columns, maps table names to the schema and more. After that, Postgres does planning (see our introduction to Postgres query planning), and then executes the query based on the query plan.  
For pg_query, all we need is the raw parser. Looking at the code, we discovered a problem. The parser code still depends on a lot of Postgres code, such as for memory management or error handling. We needed a repeatable way to extract just enough source code to compile and run the parser.  
Thus the idea was born to automatically extract the Postgres parser code and its dependencies.  
## Using LibClang to extract C source code from Postgres  
Our goal: A set of self-contained C files that represent a copy of Postgres' raw_parser function. But we don't want to copy the code manually. Luckily we can use LibClang to parse C code, and understand its dependencies.  
The details of this could fill many pages, but here is a simplified version of how this works:  
### 1. Each translation unit (.c file) in the source is analyzed via LibClang's Ruby binding:  
```  
require 'ffi/clang'  
index = FFI::Clang::Index.new(true, true)  
translation_unit = index.parse_translation_unit(file, ['... CFLAGS ...'])  
```  
### 2. The analysis walks through the file and marks each C method, as well as the symbols it references:  
```  
translation_unit.cursor.visit_children do |cursor, parent|  
  @file_to_symbol_positions[cursor.location.file] ||= {}  
  @file_to_symbol_positions[cursor.location.file][cursor.spelling] = [cursor.extent.start.offset, cursor.extent.end.offset]  
  cursor.visit_children do |child_cursor, parent|  
    if child_cursor.kind == :cursor_decl_ref_expr || child_cursor.kind == :cursor_call_expr  
      @references[cursor.spelling] ||= []  
      (@references[cursor.spelling] << child_cursor.spelling).uniq!  
    end  
    :recurse  
  end  
end  
```  
### 3. We resolve required C methods and their code, based on the top-level method we are looking for:  
```  
def deep_resolve(method_name, depth: 0, trail: [], global_resolved_by_parent: [], static_resolved_by_parent: [], static_base_filename: nil)  
  ...  
  global_dependents = (@references[method_name] || []  
  global_dependents.each do |symbol|  
    deep_resolve(symbol, depth: depth + 1, trail: trail + [method_name], global_resolved_by_parent: global_resolved_by_parent + global_dependents)  
  end  
  ...  
end  
deep_resolve('raw_parser')  
```  
### 4. We write out just the portions of the C code that are required (see details here)  
With this, we have a working Postgres parser!  
You can find the full details in the pg_query source.  
Once we can call the Postgres parser in our standalone library, we can get the result as a parse tree, represented as Postgres parser C structs. But now we needed to make this useful in other languages, such as Ruby or Go.  
## Turning Postgres parser C structs into JSON and Protobufs  
It's a little known fact, but Postgres actually has a text representation of a query parse tree. Its rarely used directly, being reserved for internal communication and debugging. The easiest way to see an example is by looking at the adbin field in pg_attref, which shows the internal representation for an expression of an column default value (to contrast, pg_get_expr shows the expression in SQL):  
```  
SELECT adbin, pg_get_expr(adbin, adrelid) FROM pg_attrdef WHERE adrelid = 'mytable'::regclass AND adnum = 1;  
-[ RECORD 1 ]-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------  
adbin       | {FUNCEXPR :funcid 480 :funcresulttype 23 :funcretset false :funcvariadic false :funcformat 2 :funccollid 0 :inputcollid 0 :args ({FUNCEXPR :funcid 1574 :funcresulttype 20 :funcretset false :funcvariadic false :funcformat 0 :funccollid 0 :inputcollid 0 :args ({CONST :consttype 2205 :consttypmod -1 :constcollid 0 :constlen 4 :constbyval true :constisnull false :location 68 :constvalue 4 [ -27 10 -122 1 0 0 0 0 ]}) :location 60}) :location -1}  
pg_get_expr | nextval('mytable_id_seq'::regclass)  
```  
This text format is not useful for working with a parse tree in other languages. Thus, we needed a more portable format to export the parse tree from C, and import it in another language such as Ruby.  
The initial version of pg_query used JSON for this. JSON is great, since you can parse it in pretty much any programming language. Thus, in this new pg_query release, we still support JSON.  
We're also introducing support for a new schema-based format, using Protocol Buffers (Protobuf).  