## Python源码剖析与编译

### 0.3 Windows环境下编译Python

在Windows环境下编译Python时，首先需要更改以下子工程的设置：

- `pvexpat`
- `make_versioninfo`
- `make_buildinfo`
- `bz2`
- `_elementtree`
- `_ctypes_test`
- `_ctypes`
- `bsddb`
- `tkinter`
- `_testcapi`
- `sqlite3`
- `_socket`
- `msi`
- `winsound`
- `uadodxem`
- `unicodedata`
- `pythonw`
- `pythoncore`
- `nvthon`

确保选中`make_versioninfo`和`make_buildinfo`，并取消其他不必要的子工程。具体步骤如下：

1. **改变Startup Project**：
   - 右键点击解决方案资源管理器中的“解决方案”。
   - 选择“属性”以调出设置属性对话框。
   - 在“配置属性”中选择“单个启动项目”。

2. **编译子工程**：
   - 保留`pythoncore`和`python`的选中状态（如图0-6所示）。
   - 编译`make_buildinfo`和`make_versioninfo`两个子工程（如图0-8所示）。

如果编译失败（如图0-7所示），可能是因为缺少必要的文件。确保所有必需的文件都已存在，并重新编译。

### 0.4 Unix/Linux环境下编译Python

在Unix/Linux环境下编译Python相对简单，只需按照标准的tarball安装软件流程进行：

1. **配置**：
   - 运行`./configure --prefix=<安装路径> enable-shared`以启用动态链接库。

2. **编译**：
   - 运行`make`以编译源代码。

3. **安装**：
   - 运行`make install`以安装编译结果。

### 0.5 修改Python源代码

在修改Python源代码时，需要注意以下几点：

1. **输出信息**：
   - 使用`print`函数输出信息。例如，在`int_print`函数中可以添加输出代码：
     ```c
     static int int_print(PyIntObject *v, FILE *fp, int flags) {
         fprintf(fp, "i am in int print\n");
         // 其他代码
     }
     ```

2. **重定向标准输出**：
   - 可以将标准输出重定向到文件。例如，将`sys.stdout`重定向到`my_stdout.txt`：
     ```python
     import sys
     sys.stdout = open('my_stdout.txt', 'w')
     ```

3. **调试**：
   - 使用VS自带的debugger或其他调试工具来观察Python执行过程中的动态行为。

### 0.6 通往Python之路

本书将对Python源码的剖析分为三个部分：

1. **第1部分：Python内建对象**：
   - 简要介绍Python对象模型。
   - 剖析主要内建对象，包括整数、字符串、列表和字典。

2. **第2部分：Python虚拟机**：
   - 分析Python虚拟机执行字节码指令的过程。
   - 深入探讨表达式、控制流、异常处理等机制。

3. **第3部分：Python高级话题**：
   - 剖析Python运行环境。
   - 探讨动态加载机制、多线程机制和内存管理机制。

### 0.7 注意事项

在阅读和理解Python源码时，需注意以下几点：

1. **内存管理**：
   - Python有一套复杂的内存管理机制，但我们可以简化为常见的内存管理接口。
   - 内存管理机制将在第3部分详细讨论。

2. **数值类型**：
   - 在Python 2.4和Python 2.5中，数值类型的实现有所不同。对于非Python开发者，可以暂时忽略这些差异。

通过以上步骤和注意事项，可以更好地理解和编译Python源码。