中
S
Solution E...
首先要做的就是更改
pvexpat
make_versioninfo
make_buildinfo
bz2
_elementtree
_ctypes_test
_ctypes
bsddb
tkinter
_testcapi
sqlite3
_socket
msi
回
winsound
uadodxem
unicodedata
pythonw
pythoncore
nvthon
make_versioninfo
make_buildinfo
select
python
testcapi
salite3
tkinter
ssl
Single Startup Project
pehuild'
四
0-4
0-5
（如图0-5所示）。
图
改变startupproject
调出设置属性对话框
Clas
改
0.3
Python源码剖析
Startup
opnosping
Properties
Rename
SaveAlI
Savepcbuild.sn
Debug
Set.
ProjectBuld Order....
ProjectDependencies...
ConifiguirationManager..
Batch Build....
Clean Solution
Bebuild Solltion
Add
as6
Windows环境下编译Python
tStartUp Projects....
Project,
Python2.5中默认设置的是
一深度探索动态语言核心技术
None.
2
1
---
## Page 36
Python源码剖析
会被拷贝到C:1Windowssystem32下。
全部代码都在python25.dl中。对于WinXP操作系统，在安装python时，这个python25.dll
有两个：python25.dn和python.exe。可以看到python.exe非常小，实际上Python解释器的
须要通过编译make_buildinfo和make_versioninfo子工程（如图0-8所示）才能生成：
还是会失败（如图0-7所示）：
保留pythoncore和python的选中状态（如图0-6所示）。
Properies”后，会出现当前配置为需要编译的子工程，取消多余的子工程的选中状态，只
pythonw
pythonicore
pyexpat
make_versioninfo
make buildinfo
Projeot
福
salect
python
bz2
_tkinter
make_buildinfo P
Properties
Solution E.
好了，
原因是我们还需要一个必要的文件，这个文件在Pyhon2.5的源码包中没有提供，
fatal error C1083: Cannot open precompiled header file:.\x86-temp
需要进行的改动就是这么多了，但是完成这些改动后，如果马上开始编译，那么编译
Python源码剖析
Description
make_versiol
malre_buiIdir
现在再编译，
一深度探索动态语言核心技术
图0-8
编译make_buidinfo和makeversioninfo两个子工程
一切都会顺利完成了。编译的结果都放在build文件夹下，主要
编译Python
Project Dependencies...
Project Only
Clean
Rebuild
Build
图0-6取消不相关子工程
Dehuio
Debug
Debug
Debug
Debug
Debuig
Debug
Debug
Configuration
Debug
图0-7
task
编译失败
win32
Win32
Win32
Platform
Win32
Win32
Win32
Win32
Win32
Win32
Clean Only make_buildinfo
Bebuild Onlymake_buildinfo
Build Onlymake_buildinfo
.\python25_d.lib
Build
口
口
四
---
## Page 37
0.4Unix/Linux环境下编译Python
0.5
过有一些以后修改源代码时需要注意的事项，这里先提一下。
环境），冲上去一顿敲打键盘不就OK了吗。确实，修改源代码其实没有什么好说的，不
修改Python源代码
要输出Pyhon中的某个对象却不是那么方便，幸好Python的CAPI中提供了一个输出对
过有时候也需要在其中输出一些信息。对于输出信息，使用print最简单。但是printi
编译并运行。
代码都没有平台相关性问题，无论是Windows环境，还是Unix/Linux环境，都可以正常
入“enable-shared”这个指令，从而编译后得到的ibpython2.5.so就会出现在lib目录下。
如果想要编译成动态链接的，即编译的结果中出现libpy山on2.5.so，那么需要在第一步加
下存放的是libpython2.5.a，用C语言对Python进行扩展时需要用到这个静态库。
目录bin下存放的是可执行文件：目录lib下存放的是Python的标准库；ib/python2.5/config
顺序使用下列三个命令，即可完成Python的安装与编译：
Int Pyobjeot_Print(PyObject *, FILE *,int);
象的接口：
V
statie Int int print(PyIntobject *v, FILE *fp, int lags)
[intobject.c]
[object.h]
比如我们在int_print中输出一个整数，可以将int_print修改成如下的函数：
如果要观察Python执行过程中的动态的行为，当然可以使用VS自带的debugger，不
需要注意的是，这样编译之后的结果，bin目录下的Pyhon可执行文件是静态链接的。
//add by Rohert
以后我们在对Pyhon源码进行修改时，都不会使用系统相关的API.所以我们添加的
/configure-prefix=
在Linux环境下编译Python就没有那么麻烦了，按照标准的tarball安装软件的流程，
修改源代码？这还有什么好说的吗？打开VS2003（Windows环境）或者vi（Linux
经过这三个步骤，我们在第一步中指定的安装路径下就会显示Pyhon安装的结果。
make install
make
Python源码剖析
0.5修改Python源代码
深度探素动态语言核心技术
---
## Page 38
Python源码剖析
内容已经到my_stdout.txt中，在图0-11中显示了my_stdout.txt中的内容：
时，我们发现屏幕上没有任何输出了，因为这时标准输出已经被重定向，所以现在输出的
随后，我们将Python的标准输出定向到了my_stdout.txt中。当再次输入“sys.staout”
stdout了，说明加入的输出代码失效了。
果使用IDLE的话，就会发现，输出的信息没有了。原因是IDLE的输出目标已经不是
指定了输出目标为标准输出，当我们从命令行环境中激活Python时，没有问题，但是如
那个python25.dl，我们就可以从Python运行时看到希望输出的结果如图0-9所示：
现在我们先不关心，只需要了解它的功能就OK了。
API，用于从C中的原生字符数组创建出Pyhon中的字符串对象。具体它是如何实现的，
开始时，标准输出是，这也是C中stdout所代表的那个系统的标准输出
return 0;
fprintf(fp)
Pyobject* atr = PyString_FromString(#i am in int print");
在Python中，有一个特性一
在pyobject_Print中，第二个参数指明的是输出目标。上面的例子使用了staout，
将Python重新编译后，得到新的python25.dll，用这个all去替换system32目录下的
其中粗体部分为我们加入的代码，Pystring_Fromstring是Python提供的另一个c
Python源码剖析
my_stdout.txt
一深度探索动态语言核心技术
Print(str,stdout,o);
',
>>
sys.stdout
"s1a"v->ob_ival);
图0-11重定向后的标准输出
10
>>print100
00
iam in int print
一编译Python
图0-9在Python源码中输出额外信息
图0-10重定向标准输出
一可以自己重定向标准输出，考虑图0-10所示的例子：
20
IDLE1.2
Print(str,
sys.stdout
PySys_Getobject(#stdout#);
PyString_Fromstring(i am in int_repr"):
图0-12在IDLE中输出信息
(666-
sys
stdout,0）
一设置条件，这个技巧不论是在通过输出查看
Python源码剖析
0.6通往Python之路
深度探索动态语言核心技术
---
## Page 40
Python源码剖析
0.7
运行时行为，那么对于如何利用Python的CAPI来编写Python扩展，如何在C中内嵌Python
结合起来
节码指令
关，而跟Pyhon的编译过程没有太大的关系。不过，Python编译的结果，编译所得的字
解析和编译，本书将不完全涉及。因为对于Pyton运行时行为的理解，与虚拟机非常相
外部库，我们将在需要的时候进行剖析。
解释器等，都变得水到渠成。
一些注意事项
下：
本书将剖析的重点放在Pyhon解释器和Python运行时环境上，对于Python的大量的
在正式进入对Pybon的剖析之前，有一些在阅读代码时需要注意的事项，这里先提
在Pyuon解释器中，我们将大量的精力放在虚拟机这一部分。对于词法解析，语法
Python源码剖析
所以我们在这里需要对这些内存管理接口进行一下概念上的简化，简化成大家熟悉的
对内存管理接口的使用。因为创建对象必先分配内存，而它必须通过内存管理接口，
所以我们把对内存管理机制的析放到了第3部分。但是，在第1部分中你就会看到
的内存管理接口。如果在一开始就剖析其内存管理机制，我想就会令读者望而却步，
Pyhon有一套相当复杂的内存管理机制。同时，由于历史的原因，也有一套相当混乱
以以int视之。对于非Python开发者阅读代码和理解Pyton来说，不需要在意其间
在Python2.4的源码中，许多数值的类型都是int或long，而在Pyhon2.5的源码中，
内容包括：Python运行环境的初始化、动态加载机制、多线程机制和内存管理机制。
第3部分：Python高级话题。主要内容是剖析Python的运行环境以及一些高级话题。
在这一部分中，我们将看到Py山on是如何通过虚拟机实现各种表达式、控制流、异
第2部分：Pyhon虚拟机。主要内容是分析Python虚拟机执行字节码指令的过程。
实现，细致地分析各种对象在C一级是如何被构建起来的。
内建对象，包括整数、字符串、List和dict。在对内建对象的剖析中，我们会深入其
第1部分：Python内建对象。主要内容是简要介绍Pyhon对象模型，以及剖析主要
本书将对Python源码的剖析分为下面三个部分：
的差别。
常机制、函数机制及类机制。
对于运行时行为则大有影响。所以书中会将Pyton编译结果和Python虚拟机
深度探索动态语言核心技术
一起进行部析。
编译Python
---