# 漏洞概述

本报告详细描述了如何通过应用内重定向登录/开放式重定向、HTML或JavaScript注入，在Slack桌面应用程序中执行任意代码。本文档提供了一些攻击思路，包括HTML注入、绕过安全控制以及RCE JavaScript payload。经测试，此exploit适用于最新的Slack Desktop版本（4.2和4.3.2）在Mac、Windows和Linux上。

为了更好地展示该RCE漏洞的影响，我们提出了一种新的攻击方法（HTML注入与有效负载），因为先前的exploit（见[#738229](https://hackerone.com/reports/738229)）已经失效。

# 技术细节及复现步骤

## 利用流程
1. 在启用HTTPS的服务器上上传包含RCE有效负载的文件。
2. 准备一个带有HTML注入的Slack消息。
3. 将该消息分享至频道或特定用户。

## 用户操作
- 点击PC端上的共享链接。

## 后续影响
点击后，HTML将引导用户的Slack桌面应用程序重定向至攻击者控制的网站。该站点使用RCE JavaScript进行响应，利用跳转漏洞绕过Slack桌面环境的安全限制，泄露Electron对象并允许执行任意命令于用户PC上。这种攻击也可以通过其他XSS漏洞或内部重定向漏洞来实现。

# HTML注入 - 直接编辑Slack POST结构

### 创建新Slack消息
创建新消息时会生成具有以下JSON结构的新文件：
```json
{
  "full": "content",
  "preview": "content"
}
```
私有文件链接可通过`/api/files.info`调用返回，并遵循如下格式：`https://files.slack.com/files-pri/{TEAM_ID}-{FILE_ID}/TITLE`。

### 注入HTML Payload
尽管存在内容安全策略(CSP)和其他安全措施限制了某些标签（如`iframe`, `applet`, `meta`, `script`, `form`等），但仍可利用`area`和`map`标签达成一键RCE。可以通过访问以下URL直接编辑JSON结构：
```
https://{YOUR-TEAM-HOSTNAME}.slack.com/files/{YOUR-MEMBER-ID}/{FILE-ID}/title/edit
```

或者，通过HTTP代理修改filetype参数为docs来上传含有恶意脚本的JSON片段。

### 示例Payload
```json
{
  "full": "asd",
  "preview": ""
}
```
需要事先上传图片到Slack平台以供引用。

# RCE Exploit Code
托管于攻击者服务器上的area标签内的URL指向针对Slack Desktop应用程序的HTML/JS利用漏洞，能够执行任意命令。例如，在Windows系统下可以打开计算器程序。

### 测试方法
只需在任何Slack Desktop应用的开发者工具中粘贴相应的JavaScript代码即可验证其有效性。

# 访问私有数据
通过调整payload，攻击者能够轻易获取所有私人对话、文件、令牌等敏感信息，从而完全远程控制目标用户的Slack桌面客户端。

# files.slack.com作为备用存储
研究过程中发现，未经过滤的电子邮件内容会被存储在`https://files.slack.com`上，并且可以直接以文本/HTML形式查看而无需下载。这一特性可用于存储RCE有效负载。

### 如何上传HTML至files.slack.com
- 使用任一邮件客户端发送纯文本邮件。
- 复制粘贴RCE payload。
- 依据[官方指南](https://slack.com/intl/en-lv/slack-tips/send-email-to-slack)将其嵌入到Slack消息中。

之后，可以通过“open original”选项或API请求获得这些上传文件的具体位置。

# 总结
- 利用Web UI路径进行HTML注入 – 直接编辑POST文件结构。
- 或者通过文件类型转换实现HTML注入 – 实现直接编辑POST结构。
- 新型纯HTML有效载荷能够重定向Slack桌面应用程序。
- 跳转漏洞导致RCE。
- 无限制地通过电子邮件在Files.slack.com上实施XSS攻击。
- 所有文件必须通过常规渠道共享给接收者才能被访问。

# 影响范围
- 远程代码执行于Slack桌面应用程序中。
- 访问私密文件、密钥、密码、机密信息及内部网络资源。
- 控制Slack中的私人交流与文档。
- 可配置为蠕虫式传播以重复利用。
- 在`*.slack.com`域名下的任意HTML内容均被视为可信来源，可用于钓鱼及其他恶意活动。
- [更多详情请参阅完整报告](https://hackerone.com/reports/783877)。