在Linux系统中，我们处理的一切都是文件，并且绝大多数都是文本文件；举个例子，在Linux系统中，所有的配置文件都是文本文件。所以我们只需要打开文件，更改文件的内容，保存文件，再重新启动应用就可以更改应用配置。
由于存在大量文本文件，操作文本在Linux系统管理和Linux应用中显得尤为重要。在这一章节，
你可以通过一些命令和技巧，实现在Linux系统下操作文本。
为了方便演示，我将使用世界顶尖的网络入侵检测系统（NIDS）Snort的文件，Snort
最早由Marty Roesch
开发，现在属于Cisco。NIDS经常被用于检测黑客入侵，所以如果你想成为成功的黑客，你必须了解
NIDS如何检测攻击和绕过检测的方法。
![](media/dbe9da136b68e46a69a46917a5877cf1.png)
### 查看文件
如第1章所示，最基本的打印文本命令是**cat**，但是它有它的限制，使用**cat**命令打印位于/etc/snort的Snort
配置文件（snort.conf）（参见文本清单2-1）
kali \>cat /etc/snort/snort.conf
*清单 2-1: 在终端中打印snort.conf*
现在你的屏幕上应该显示了整个snort.conf文件，但这并不是最方便或最实际的使用这个文件的方法。
\# include \$SO_RULE_PATH/exploit.rules
\# include \$SO_RULE_PATH/exploit.rules
\# include \$SO_RULE_PATH/exploit.rules
\# include \$SO_RULE_PATH/exploit.rules
\# include \$SO_RULE_PATH/exploit.rules
\--*snip*--
\# event thresholding or suppressions commands...
kali \>
在接下来的两个小章节，我将向你展示**head** 和**tail**
命令。这是两种只显示部分文件内容的方法，用来更简单地查看关键点。
#### *查看开头*
如果你只是想查看文件开头，你可以使用**head**命令，这个命令默认打印文件的前10行。例如，下面这条命令会打印snort.conf的前10行。
kali \>head /etc/snort/snort.conf
\#----------------------------------------------
\# VRT Rules Packages Snort.conf
\#
\# For more information visit us at:
\--*snip*--
\#Snort bugs:bugs\@snort.org
如果你想看多于或少于默认的10行，在**head**命令后和文件前输入连接符（**-**）和你想要的数量。例如，如果你想看文件的前20行，你需要输入如清单
2-2 上面的命令。
kali \>head -20 /etc/snort/snort.conf
\#--------------------------------------------
\#VRT Rule Packages Snort.conf
\#
\#For more information visit us at:
\#.
\#.
\#.
\#Options : ­­enable­gre ­­enable­mpls ­­enable­targetbased
­­enable­ppm ­­enable­perfprofiling enable­zlib ­­enable­act live­response
­­enable­normalizer ­­enable­reload ­­enable­react
*清单 2-2: 在终端中打印snort.conf 的前20行*
你应该能在终端中看到snort.conf的前20行。
#### *查看结尾*
**tail**命令
和**head**命令相似。只是**tail**命令用于查看文件最后几行。使用**tail**查看snort.conf：
kali \>tail /etc/snort/snort.conf
\#include \$SO_RULE_PATH/smtp.rules
\#include \$SO_RULE_PATH/specific¬threats.rules
\#include \$SO_RULE_PATH/web¬activex.rules
\#include \$SO_RULE_PATH/web¬client.rules
\#include \$SO_RULE_PATH/web¬iis.rules
\#include \$SO_RULE_PATH/web¬miscp.rules
\#Event thresholding and suppression commands. See threshold.conf
注意这个命令打印了最后的一些include行，但没有打印所有的include行。因为和head相似，tail默认也是打印10行。你可以打印更多行如snort.conf最后20行。和使用head命令一样，你可以在tail命令和文件之间输入连接符（-）和你想要的行数。如以下清单
2-3
kali \>tail -20 /etc/snort/snort.conf
\#include \$SO_RULE_PATH/chat.rules
\#include \$SO_RULE_PATH/chat.rules \#include \$SO_RULE_PATH/chat.rules
­­snip­­
\#Event thresholding or suppression commands. See theshold.conf
*清单 2¬3: 在终端中打印snort.conf 的后20行*
现在我们可以一次性看到几乎所有的include行。
#### *标显行数*
有时-尤其是处理非常长的文件的时候-我们可能希望打印文件行号。因为snort.conf
超过600行，标上行号会有很大帮助，这样可以更容易地引用修改的位置并在以后返回到那个位置。
我们使用**nl**（number lines）命令打印行号。输入清单 2-4里的命令。
kali \>nl /etc/snort/snort.conf
612
\#\#\#\#\#\#\#\#\#\#\#\#\#\#\#\#\#\#\#\#\#\#\#\#\#\#\#\#\#\#\#\#\#\#\#\#\#\#\#\#\#\#\#\#\#\#\#\#\#\#\#\#\#\#\#\#\#\#\#\#\#\#\#\#\#
613 \#dynamic library rules
614 \#include \$SO_RULE_PATH/bad¬traffic.rules
615 \#include \$SO_RULE_PATH/chat.rules
­­snip­­
630 \#include \$SO_RULE_PATH/web¬iis.rules
631 \#include \$SO_RULE_PATH/web¬misc.rules
*清单 2¬4: 在终端输出中显示行号*
现在每一行都有一个数字（代表行号），引用起来更方便。
### 使用GREP过滤文本
命令**grep**
大概是使用最广泛的文本操作命令。它可以让你过滤打印出来的文件内容。例如，如果你想查看snort.conf文件里面所有带有output单词的行，你可以使用**cat**
然后要求只打印那些行。(参见清单 2-5)。
kali \>cat /etc/snort/snort.conf \| grep output
\# 6) Con图 output plugins
\# Step \#6: Con图 output plugins
\# output unified2: filename merged.log, limit 128, nostamp, mpls_event_types,
vlan_event_types
output unified2: filename merged.log, limit 128, nostamp, mpls_event_types,
vlan_event_types
\# output alert_unified2: filename merged.log, limit 128, nostamp
\# output log_unified2: filename merged.log, limit 128, nostamp
\# output alert_syslog: LOG_AUTH LOG_ALERT
\# output log_tcpdump: tcpdump.log
*清单 2¬5: 打印被grep规定含有关键词或段落的行*
这个命令或先查看snort.conf 然后使用管道 (\|) 将它传递给 grep,
它将会把文件作为输入，寻找出现单词output的行，然后只打印这些行。**grep**命令是使用Linux中的一个非常强大和必要的命令，因为它可以节约搜索文件中每一个词或命令的时间。
#### *挑战: 使用grep，nl，tail，and head*
假设你想使用至少4个之前学过的命令打印 \# Step \#6: Con图 output plugins
前面5行，你该怎么做？（提示：除了我们学过的命令，还有很多其他选择。你可以使用Linux内置命令man来学习更多命令。例如，man
tail 会显示tail命令的帮助文档）。
有很多方法可以解决这个问题，我将向你展示通过更改那几行来实现其中一个方法，然后你需要寻找其他方法。
##### 第一步
kali \>nl/etc/snort.conf \| grep output
34 \# 6) Con图 output plugins
512 \# Step \#6: Con图 output plugins
518 \# output unified2: filename merged.log, limit 128, nostamp,
mpls_event_types, vlan_event_types
521 \# output alert_unified2: filename snort.alert, limit 128, nostamp
522 \# output log_unified2: filename snort.log, limit 128, nostamp
525 \# output alert_syslog: LOG_AUTH LOG_ALERT
528 \# output log_tcpdump: tcpdump.log
我们可以看到行 \# Step \#6: Con图 output plugins
是第512行，然后我们知道我们想要第512行前面的5行和第512行本身 (就是第507 到
512行)。
##### 第二步
kali \>tail -n+507 /etc/snort/snort.conf \| head -n 6
nested_ip inner, \\
whitelist \$WHITE_LIST_PATH/white_list.rules, \\ blacklist
\$BLACK_LIST_PATH/black_list.rules
\#\#\#\#\#\#\#\#\#\#\#\#\#\#\#\#\#\#\#\#\#\#\#\#\#\#\#\#\#\#\#\#\#\#\#\#\#\#\#\#\#\#\#\#\#\#\#\#\#\#\#
\# Step \#6: Con图 output plugins
在这里，我们使用**tail**使文本从第507行开始，再把文本输出到head，然后我们返回文本开头的6行，从而获得Step
\#6 那行前的5行和Step \#6那行本身。
### 使用SED查找和替换
**sed**命令让你可以搜索出现的单词或字段然后在这些字段上做些什么。命令的名字是stream
editor（流编辑器）的缩写，因为它的概念和流编辑器是一致的。sed最基本的形式就像Windows系统里的查找和替换功能。
使用**grep**在snort.conf 里查找单词mysql，像这样：