    * 限制通信端口范围
    * 第三方依赖性安全
    * 静态代码分析
    * 动态探测攻击(黑盒)
## Kubernetes架构常见问题
###  Kubernetes ATTACK 矩阵
###  信息泄漏
**云账号AK泄露**
API凭证（即阿里云AccessKey）是用户访问内部资源最重要的身份凭证。用户调用API时的通信加密和身份认证会使用API凭证.
API凭证是云上用户调用云服务API、访问云上资源的唯一身份凭证。
API凭证相当于登录密码，用于程序方式调用云服务API.
**k8s configfile泄露**
kubeconfig文件所在的位置: `$HOME/.kube/config`
Kubeconfig文件包含有关Kubernetes集群的详细信息，包括它们的位置和凭据。
云厂商会给用户提供该文件,以便于用户可以通过kubectl对集群进行管理.
如果攻击者能够访问到此文件（如办公网员工机器入侵、泄露到Github的代码等），就可以直接通过API Server接管K8s集群，带来风险隐患。
**Master节点SSH登录泄露**
常见的容器集群管理方式是通过登录Master节点或运维跳板机，然后再通过kubectl命令工具来控制k8s。
云服务器提供了通过ssh登陆的形势进行登陆master节点.
若Master节点SSH连接地址泄漏,攻击者可对ssh登陆进行爆破,从而登陆上ssh,控制集群.
###  容器组件未鉴权服务
Kubernetes架构下常见的开放服务指纹如下:
  * kube-apiserver: 6443, 8080
  * kubectl proxy: 8080, 8081
  * kubelet: 10250, 10255, 4149
  * dashboard: 30000
  * docker api: 2375
  * etcd: 2379, 2380
  * kube-controller-manager: 10252
  * kube-proxy: 10256, 31442
  * kube-scheduler: 10251
  * weave: 6781, 6782, 6783
  * kubeflow-dashboard: 8080
注:前六个重点关注: 一旦被控制可以直接获取相应容器、相应节点、集群权限的服务
**了解各个组件被攻击时所造成的影响**
组件分工图:
假如用户想在集群里面新建一个容器集合单元, 流程如下:
  1. 用户与 kubectl进行交互,提出需求(例: kubectl create -f pod.yaml)
  2. kubectl 会读取 ~/.kube/config 配置，并与 apiserver 进行交互，协议：http/https
  3. apiserver 会协同 ETCD, kube-controller-manager, scheduler 等组件准备下发新建容器的配置给到节点，协议：http/https
  4. apiserver 与 kubelet 进行交互，告知其容器创建的需求，协议：http/https；
  5. kubelet 与Docker等容器引擎进行交互，创建容器，协议：http/unix socket.
  6. 容器已然在集群节点上创建成功
###  攻击apiserver
apiserver介绍:  
在Kubernetes中,对于未鉴权对apiserver, 能访问到 apiserver 一般情况下就能获取了集群的权限.
在攻击者眼中Kubernetes APIServer
  * 容器编排K8S总控组件
  * pods, services, secrets, serviceaccounts, bindings, componentstatuses, configmaps,
  * endpoints, events, limitranges, namespaces, nodes, persistentvolumeclaims,
  * persistentvolumes, podtemplates, replicationcontrollers, resourcequotas …
  * 可控以上所有k8s资源
  * 可获取几乎所有容器的交互式shell
  * 利用一定技巧可获取所有容器母机的交互式shell
默认情况下apiserver都有鉴权:
未鉴权配置如下:
对于这类的未鉴权的设置来说，访问到 apiserver 一般情况下就获取了集群的权限：
如何通过apiserver来进行渗透,可参考:
###  攻击kubelet
每一个Node节点都有一个kubelet(每个节点上运行的代理)服务，kubelet监听了10250，10248，10255等端口。
10250端口,是kubelet与apiserver进行通信对主要端口,
通过该端口,kubelet可以知道当前应该处理的任务.该端口在最新版Kubernetes是有鉴权的,
但在开启了接受匿名请求的情况下，不带鉴权信息的请求也可以使用10250提供的能力, 在Kubernetes早期,很多挖矿木马基于该端口进行传播.
在`/var/bin/kubulet/config/yaml`配置文件中,若进行如下配置,则可能存在未授权访问漏洞.
若10250端口存在未授权访问漏洞,我们可以直接访问/pods进行查看
根据在pods中获取的信息,我们可以在容器中执行命令
    curl -Gks https://host:10250/exec/{namespace}/{podname}/{containername} \
    -d 'input=1' -d 'output=1' -d 'tty=1' \
    -d 'command=whoami'
上述命令得到websocket地址，连接websocket得到命令结果：
使用wscat工具连接websocket
    wscat -c “https://X.X.X.X:10250/{websocket}” --no-check
即可得到我们执行命令的结果.
获取token
    /var/run/secrets/kubernetes.io/serviceaccount
然后即可访问kube-api server,获取集群权限
    curl -ks -H "Authorization: Bearer " \
      ttps://master:6443/api/v1/namespaces/{namespace}/secrets
攻击kubelet总体步骤如下:
  * 访问pods获取信息
  * 获取namespace、podsname、containername
  * 执行exec获取token
  * /var/run/secrets/kubernetes.io/serviceaccount
  * 利用Token访问API Server进行对pods操作。
###  攻击dashboard
dashboard登陆链接如下: `http://xxx.xxx.xxx.xxx:xxxx/api/v1/namespaces/kubernetes-dashboard/services/https:kubernetes-dashboard:/proxy/#/login`
dashboard界面如下:
dashboard是Kubernetes官方推出的控制Kubernetes的图形化界面.在Kubernetes配置不当导致dashboard未授权访问漏洞的情况下，通过dashboard我们可以控制整个集群。
默认情况下, dashboard是需要进行鉴权操作的,当用户开启了enable-skip-login时可以在登录界面点击Skip跳过登录进入dashboard.
通过skip登陆的dashboard默认是没有操作集群的权限,因为Kubernetes使用RBAC(Role-based access
control)机制进行身份认证和权限管理，不同的serviceaccount拥有不同的集群权限。
但有些开发者为了方便或者在测试环境中会为Kubernetes-dashboard绑定cluster-admin这个ClusterRole（cluster-admin拥有管理集群的最高权限）.
为Kubernetes-dashboard绑定cluster-admin 设置如下:
  1. 新建dashboard-admin.yaml内容 
        apiVersion: rbac.authorization.k8s.io/v1
    kind: ClusterRoleBinding
    metadata:
     name: kubernetes-dashboard
    roleRef:
     apiGroup: rbac.authorization.k8s.io
     kind: ClusterRole
     name: cluster-admin
    subjects :
     kind: ServiceAccount
     name: kubernetes-dashboard
     namespace: kubernetes-dashboard
  2. 执行kubectl create -f dashboard-admin.yaml
后通过skip登陆dashboard便有了管理集群的权限.
创建Pod控制node节点,该pod主要是将宿主机根目录挂载到容器tmp目录下。
新建一个Pod如下:
通过该容器的tmp目录管理node节点的文件
###  攻击etcd
Kubernetes默认使用了etcd v3来存储数据, 若能na  
etcd对内暴露2379端口，本地127.0.0.1可免认证访问. 其他地址要带—endpoint参数和cert进行认证。
未授权访问流程:
  * 检查是否正常链接`etcdctl endpoint health`
  * 读取service account token `etcdctl get / --prefix --keys-only | grep /secrets/kube-system/clusterrole`
  * 通过token认证访问API-Server端口6443，接管集群：
  * `kubectl --insecure-skip-tls-verify -s https://127.0.0.1:6443/ --token="[ey...]" -n kube-system get pods`
###  攻击docker remote api(Docker daemon公网暴露)
2375是docker远程操控的默认端口，通过这个端口可以直接对远程的docker 守护进程进行操作。Docker 守护进程默认监听2375端口且未鉴权.
当机器以`docker daemon -H=0.0.0.0:2375`方式启动daemon时，可以在外部机器对该机器的docker
daemon进行直接操作：
之后依次执行systemctl daemon-reload、systemctl restart docker
外部主机使用`-H` 即可操作暴露2375端口的主机.
因此当你有访问到目标Docker API 的网络能力或主机能力的时候，你就拥有了控制当前服务器的能力。我们可以利用Docker
API在远程主机上创建一个特权容器，并且挂载主机根目录到容器.
检测目标是否存在docker
api未授权访问漏洞的方式也很简单，访问http://[host]:[port]/info路径是否含有ContainersRunning、DockerRootDir等关键字。
###  攻击kubectl proxy
**二次开发所产生的问题**
管理Kubernetes无论是使用 kubectl 或 Kubernetes dashboard 的UI功能，其实都是间接在和 APIServer 做交互.
如果有需求对k8s进行二次开发的话,大部分的开发功能请求了 APIServer 的 Rest API 从而使功能实现的。
例如:
  * 给用户销毁自己POD的能力 
    * `DELETE https://apiserver:8443/api/v1/namespaces/default/pods/sleep-75c6fd99c-g5kss`
类似于这样去调用apiserver, 攻击者若修改namespace、pod和容器名, 那么即可造成越权.
## 推荐工具
###  Kube-Hunter扫描漏洞
kube-hunter是一款用于寻找Kubernetes集群中的安全漏洞扫描器
下载地址: 
###  CDK(强推)
CDK是一款为容器环境定制的渗透测试工具，在已攻陷的容器内部提供零依赖的常用命令及PoC/EXP。集成Docker/K8s场景特有的
逃逸、横向移动、持久化利用方式，插件化管理。
下载地址: 
## 参考链接