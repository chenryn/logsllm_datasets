毋庸置疑，生日信息在各种密码中占有重要一席，尤其是万恶的银行卡密码。因此，我们在构造高效破解字典的时候，决不能忽略这个重要密码属性。最常用的生日密码格式就是“yyyymmdd”，当然也可能是其他格式，比如欧美常用的“mmddyyyy”，考虑到中国人的习惯，我们只选择第一种格式。同样，我们也是基于crunch来生成字典的，当然我们通过一个shell脚本，控制了字典生成的过程，防止生成“yyyy13dd”以及“yyyymm99“这样的无效数据。
考虑到可能的后期大规模使用（包括与其他密码破解的混合使用），我们写了一个很简单的脚本来约束字典的生成，尽可能减少不必要的生日数据，从1900年到2020年，整个字典大小为396KB，非常小，甚至可以用作WiFi的在线破解（WiFi在线破解成功的概率极小）。此外，还可以结合社工手段收集的信息，在这个字典的各条密码前面（后面）增加姓氏拼音的首字符（大/小）写，姓名所需的拼音首字符（大/小写），从而衍生出更多、更复杂的字典。
【CODE】  
Birth_dict_gen.sh
###  5\. 基于泄露数据库构建字典
将泄露数据库作为字典构建的一个来源，其实并没有一个综合的测试作为支撑的，我们之所以这么做很大程度上是因为两个原因：第一，泄露字典是真实密码，其效果是优于字典工具生成的密码的，比如
“aaaa1111”；第二，个人密码是具有“粘连性”的，比如同为6位的数字密码，银行卡密码很可能与个人社保密码是一样的。同理，各类网站和应用的密码很有可能也是相同的。按照这一逻辑，我们认为泄露数据库密码是一类有加大加之的WiFi破解密码。当然，我们在抽取密码的后，必须过滤掉那些长度小于8位的密码。此外，考虑到有限的计算资源，我们只使用那些包含明文密码的泄露数据库，而不会去破解和使用泄露的加密密码。
为了避免被请喝茶，我们就不去详细介绍收集了哪些泄露的数据库了，百度一搜还是有那么多的。至于数据的清洗和入库，我们依然是采用的shell脚本来完成，尝试过物理机和虚拟机，感觉处理效率相差不大，估计是shell脚本在读写硬盘的时候出现了瓶颈。如果把数据分片读取到内存中处理，然后整块写入，估计效率要高许多。
## 0x04：实测和对比
###  1、WiFi握手包抓取
为了延续基于Android设备的pHacking这一系列，我们所有的抓包操作都是在Google系列手机上操作的，当然我们会通过shell脚本简化繁琐操作（通过触屏搞机真的好痛苦）或者通过SSH远程连接手机（很幸福）。
由于抓包时长不同以及抓取到的握手包数量不同，各个ivs文件大小不一。当然，有一点是肯定的，如果ivs文件大小不足100字节，那么这个文件时肯定没有握手包的，具体情况如下：
-rw-r—r— 1 1.9K 9 23 22:11 106.ivs  
-rw-r—r— 1 1.1K 9 30 11:12 104-02.ivs  
-rw-r—r— 1 3.7K 9 23 20:50 304.ivs  
-rw-r—r— 1 3.0K 9 28 22:13 211-01.ivs  
-rw-r—r— 1 1.9K 9 21 21:59 王二娃是猪.ivs  
-rw-r—r— 1 1.1K 9 27 10:52 xiaoyuyu-01.ivs  
-rw-r—r— 1 4.5K 9 29 13:32 iPhone7X-01.ivs  
-rw-r—r— 1 1.9K 9 29 13:33 204.ivs  
-rw-r—r— 1 1.8K 9 30 23:16 miaomiao.ivs
###  2、破解软硬件
硬件：Intel i5，16GB，500GBHD，集成显卡  
软件：Aircrack-ng  
PS：由于实验期间正值三伏天，全速跑EWSA会导致发热量过大，进而死机，因此换为了aircrack-ng。每次运行8个aircrack-ng进程，每秒钟能够跑的密码总数在2000个左右。
###  3、破解字典的选择与使用
基于之前搜集到的字典，我们做了如下的排列：
1) 弱口令字典：200MB  
2) 生日字典：396KB  
3) 全川手机号字典：1GB  
4) 成都座机号字典：200MB  
5) 泄露数据库字典：20GB
###  4、破解情况
针对前面抓取到的WiFi握手包，我们按照上述破解顺序逐一破解，大致情况如下：
106: unknown  
104: unknown  
304: 99xx1299xx12  
211: unknown  
王二娃是猪: 199xxxx2546  
xiaoyuyu: 191006xx  
iPhoneX: 12345678x  
204: unknown  
miaomiao: zk200106xx
目前，我们只针对这些wifi握手包进行了破解（其中x表示不便公开的字符或数字），这些wifi之所以能破解出来很大程度上都是通过“弱口令字典”搞定的。至于4个没有跑出来的wifi密码，我们尝试了截止目前构造的所有字典，全部失败，包括泄露密码库字典。确切地说，没有一个wifi密码是通过泄露数据库跑出来的，这让我们很疑惑，甚至倍感受挫，曾多次尝试分析原因，未能找到具有说服力的结论吧。当然，我们的泄露密码字典仍在不断增长。
## 0x05：方法评估
根据前面的实验情况来看，目前要想通过单一方法破解WiFi密码难度越来越大，究其原因包括WiFi所有者安全性的提高，设备安全性的提高以及软硬件开发人员对安全的重视程度越来越高。然而，WiFi密码的安全性仍有待提高。但从前面的测试情况来看，我们基本可以得出以下结论：
###  1、 由于WiFi所有者的社会属性，导致WiFi被攻击的可能性增大
比如，许多用户仍然会选择与个人社会属性息息相关的信息作为WiFi密码，这些密码但从长度来说看似“很强”，但是经不起精心构造的WiFi密码破解字典的攻击。
###  2、 仅从当前样本看，破解成功率较高
抛开抓取握手包失败的情况来看（抓包成功的情况下），从目前的测试数据来看，破解成功率已经超过60%，这已经是一个很好的实验结果了。
###  3、 预期之外的情况
在实验之初，我们认为泄露密码库与WiFi密码应该存在较强的正相关性，但从目前的情况来看，没有一个WiFi密码是由泄漏密码库实现破解的。由于该项目尚未结束，我们会不断积累泄漏密码，期望能够得到更好的效果。
## 0x06：写在最后
由于IoT设备的迅猛增长，加之应用场景和网络建设和升级的经费限制，802.11系列协议应用越来越广泛，当然随着也引入了一个越来越无法忽视的“无线攻击面”。本文在前期观察和测试的基础上，提出了一个构件高效WiFi破解字典的方法，以期帮助各位白帽子更好的进行IoT环境下的渗透测试。
后期，我们会开源整个项目，包括收集的弱口令，构建字典的各种脚本，数据抽取和清洗的脚本以及各种软硬件平台下WiFi破解的各种实验数据及对比分析结果。但是，考虑到个人信息安全，我们不会公布收集和积累的泄露密码库！
Ref：
1、 刘亮等,《基于 Fluxion 的 WIFI 密码防窃取研究 》，科技经济导刊 2019，27(33) 。  
2、 《私人电脑引发企业安全风险》， 。  
3、 Ang010ela,《2019弱密码top 200，12345登顶》，