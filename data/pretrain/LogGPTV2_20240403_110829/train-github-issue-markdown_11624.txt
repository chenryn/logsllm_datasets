 **marc schipperheyn** opened **SPR-9538** and commented
When you Cache a Collection of elements, you are caching the entire collection
as an entry.
The underlying elements can also be part of other `@Cacheable` entries,
leading to duplicates and unnecessary memory consumption. Let's take the
scenario of a Facebook Wall where a WallPost can be shared across hundreds of
Walls with each Wall being a different collection of elements. Caching each
collection would quickly become impossible or inefficient with high memory use
and high numbers of cache refreshes.
If the item to be cached is a collection, it could be considered to cache each
individual element separately and cache the collection as a collection of
references to the individual entries.
EhCache supports this with the putAll method.
Ideally you should be able to configure this so that the following
`@Cacheable` methods
mgr.getItem(Long id);  
mgr.getItems();  
mgr.getItems(Long userId);
all take their items from the same pool.
When a collection requests items that are not available in the pool, even more
ideally, a dao request would be made for the missing items.
* * *
**Affects:** 3.1.1
**Issue Links:**
  * #17326 Caching strategy ( _ **"duplicates"**_ )