approach. Finally, §7 shows potential applications of our algorithm,
and §8 outlines future work. Table 1 summarizes the definitions we
use in this work.
2 BACKGROUND AND RELATED WORK
2.1 Regular Expressions: Crash Course
A regex defines a pattern that can be applied to a string to check
if the string conforms to the structure expressed in the pattern.
The regex ^[a-z]+\.foo\.com$ applied to bar.foo.com would match,
because bar consists solely of letters between a and z, and the
remainder of the string is .foo.com. This work uses the regex syntax
capabilities provided by the Perl Compatible Regular Expressions
(PCRE) library [9]. This section covers the small portion of PCRE
syntax that we use.
Learning Regexes to Extract Router Names from Hostnames
IMC ’19, October 21–23, 2019, Amsterdam, Netherlands
Patterns within a regex may be expressed as literals (e.g., foo)
or as character classes. .+ matches any sequence of characters.
\d* matches zero or more digits, \d+ matches at least one digit,
\d matches one digit, and \d{4} matches exactly four digits. [a-z]+
matches at least one alphabetic character, [a-z\d]+ matches alphanu-
meric characters, and [a-z]+\d+ matches a sequence of alphabetic
characters followed by a sequence of digits. Patterns may specify
what they cannot contain. [^-]+ matches a sequence of characters
that does not contain a hyphen; foo matches but foo-bar does not.
A regex may be anchored so that the pattern expressed must
begin at the start of a string with ^ and/or end at the last character
of a string with $. All of our regexes use anchors at the end of the
string, as the suffix to which they apply is at the end of the string.
A regex may extract portions of a string by including the portion of
interest in parentheses. The regex ^([a-z]+)\.foo\.com$ extracts bar
from bar.foo.com. Our regexes use parentheses to extract portions
of the hostname that could contain a router name. Some characters
in a regex must be escaped with a backslash (\) to match the char-
acter, rather than be interpreted as a control sequence. Ordinarily,
a dot (.) matches any character; \. matches a dot. Finally, a regex
may contain a logical-or statement that matches one of a series
of possible patterns. The pattern (?:foo\d+|bar\d*|baz) will match
either (1) foo followed by at least one digit, (2) bar followed by
digits, if any are present, or (3) baz.
2.2 Grammar Induction
Learning structure from example text is known as grammar in-
duction in machine learning. Methods in the literature range in
complexity from trial and error approaches like the one we describe
in §5, to genetic algorithms to address more complex examples. We
chose a heuristic-guided trial and error approach, as the implemen-
tation of the algorithm is simple to explain and understand, we can
make use of domain knowledge to constrain the set of candidates,
and the execution time of the algorithm is reasonable because the
set of regexes we evaluate for each suffix is relatively small. Gram-
mar induction methods usually produce a parse tree to represent
valid grammatical constructs, but our method produces practical
regexes that researchers can use to analyze Internet topology.
In 2008, Li et al. built ReLIE to reduce the manual effort in build-
ing a regex [14]. The approach relied on a human providing a
starting regex and input data, which their method would then im-
prove. In 2010, Babbar et al. [2] introduced a technique that could
learn regexes even when a human with lower domain expertise
than assumed in [14] provided the starting regex. In 2012, Murthy
et al. [21] presented a technique to improve recall of regexes that
involved human feedback. All techniques were able to improve in-
put regexes for identifying patterns such as software names, phone
numbers, and university course numbers. In 2016, Bartoli et al. built
RegexGenerator, which instead relied on a human to provide exam-
ples of valid extractions from a set of input data, for which their
method would then build a regex [3]. In our work, we do not have
a set of starting regexes or valid extractions for each suffix to learn
from, so we assess the extractions we make through trial-and-error
for correctness against an input set of router aliases.
2.3 Extracting Information from DNS
Researchers have used information encoded in DNS to understand
router-level properties of the Internet for at least 20 years. To iden-
tify the hostnames corresponding to routers, researchers query the
DNS for pointer (PTR) records for router interface IP addresses
observed by traceroute in a path toward a destination.
In 2013, Ferguson et al. studied the interconnection, capacity,
geography, and growth of Cogent’s network. They continuously
resolved the hostnames of address space used by Cogent to num-
ber their routers, and then applied a regex that they manually
constructed to Cogent’s hostnames to extract interface speeds, loca-
tions, and names of Cogent’s routers [7]. They found that Cogent’s
network grew by 11 routers per week between 2012 and 2013.
Rocketfuel’s undns tool [27] released in 2002 contained a list of
manually assembled regexes that extracted geographic locations
from hostnames to reason about POP-level ISP topology. In 2014,
Huffaker et al. developed the DNS-based Router Positioning (DRoP)
tool [10], which learned geographic components of router host-
names by identifying the position of a geographic label in a host-
name relative to punctuation from the end of the hostname. They
assembled a dictionary of known airport, CLLI, UN, and city names,
which they used to identify candidate locations within hostnames.
Their method learned a geolocation convention if the majority of
inferred router locations for a suffix did not violate delay-based con-
straints given the position of known landmarks, and automatically
built regexes to extract geolocation information from hostnames.
In 2013, Chabarek et al. developed a parser to extract interface
types, speeds, and manufacturer information using information en-
coded in hostnames and a manually-assembled dictionary [6]. They
also conducted a NANOG survey, which received 22 responses;
5 of the operators had automatic name generation, and 2 used a
script to build their zones. Their dictionary contained 5 known IPv4
address format strings, 26 common interface type strings, and 19
common router role strings covering core, peering, and access roles.
They used clustering to group hostnames with similar structures,
and inspected the clusters to extract information, congruent with
their dictionary. Our method does not use a manually-assembled
dictionary to guide regex building, because we cannot assume op-
erators use the common interface types in their hostnames, and a
dictionary will become out of date over time. We instead rely on
the ability of our method to learn the substrings used by operators
and embed them into a regex using available training data.
2.4 Building Router Graphs
Researchers have put considerable effort into alias resolution tech-
niques that can infer if two IP addresses are assigned to the same
router, a critical part of building a router-level graph [28], because
traceroute returns a sequence of interface IP addresses, rather than a
unique identifier for each router. There are two common approaches
to alias resolution: probe-based active methods that reveal signa-
tures that imply two IP addresses are aliases, and passive approaches
that infer router aliases using graph analysis techniques.
In 2000, Govindan et al. developed Mercator [8], which sends
active probes to an unused port to solicit port unreachable responses
for each candidate alias, and infers two probed addresses are aliases
when the same source address is in the responses. In 2002, Spring et
IMC ’19, October 21–23, 2019, Amsterdam, Netherlands
Matthew Luckie, Bradley Huffaker, and k claffy
al. developed Ally as part of the Rocketfuel ISP mapping system [27].
Ally infers two addresses are aliases if IP-ID values in responses to
interleaved probes it sent to each candidate appear to be assigned
from a single counter. Because probes are sent to pairs of interfaces,
resolving a graph of N interfaces requires O(N 2) probes.
In 2004, Spring et al. discussed additional heuristics for resolving
aliases [26], including the first passive approaches based on graph
analysis: interface addresses immediately preceding a common suc-
cessor are likely aliases when routers interconnect with point-to-
point links, and interface addresses observed in a single traceroute
cannot be aliases if there are no forwarding loops. They also ex-
tended Rocketfuel’s undns tool [27], which previously focused on
extracting geolocation information from hostnames (§2.3), to also
extract fragments of hostnames that uniquely identify a router us-
ing regexes. They built 16 conventions by hand through observing
patterns in interface hostnames they clustered using aliases inferred
with active probing from Mercator [8] and Ally [27]. In this work,
we build an algorithm to automatically derive conventions for 2550
suffixes in 16 sets of training data across 9 years.
In 2008, Sherwood et al. developed Discarte [25], which used
the IP Record Route option in traceroute probes, as well as graph
analysis, to resolve IP aliases and identify hops where routers do
not respond to traceroute probes. Both Sherry et al. (2010) and
Marchetta et al. (2013) developed techniques that use the IP pre-
specified timestamp option to infer aliases using timestamp patterns
in packets. Because only 40 bytes of IP options can be contained in
a single packet, these techniques can only test pairs or small (up to
4) sets of IP addresses at a time [19, 24].
Recent work has focused on improving the scaling of alias reso-
lution, in order to build more accurate and complete router-level
maps. In 2008, Bender et al. showed it was possible to solicit IP-
ID values from multiple candidate aliases in parallel, and evaluate
candidate alias pairs offline, using the RadarGun [4] tool. They
demonstrated RadarGun on 9,056 candidate aliases. In 2013, Keys
et al. [12] and Luckie et al. [16] built on the RadarGun approach
to build techniques capable of scalably probing millions of candi-
date addresses for aliases in parallel – MIDAR for resolving IPv4
aliases [12], and Speedtrap for resolving IPv6 aliases [16].
Both Keys et al. [12] and Luckie et al. [16] used regexes that
they manually constructed to extract router names, which they
confirmed with network operators, and then used those regexes to
validate their alias resolution techniques. While both papers noted
some apparent errors in the ISP’s hostnames, the operator-validated
regexes validated the aliases they inferred. In this work, we learn
the router name component of hostnames by evaluating candidate
regexes against previously inferred alias sets.
2.5 CAIDA’s Internet Topology Data Kit
In this work, we use CAIDA’s Internet Topology Data Kit (ITDK [5])
as training data to learn router naming conventions. We use the
16 ITDKs CAIDA built between July 2010 and April 2019, all of
which collected IP paths using scamper’s implementation [15] of
Paris traceroute [1], and performed alias resolution using Merca-
tor [8] and MIDAR [12]. Each ITDK contains an inferred router
level graph constructed using traceroutes collected towards every
routed IPv4/24 prefix from a globally distributed team of 45 – 153
vantage points (VPs) over the course of two weeks. Most ITDKs
also contain a file recording the hostnames associated with each
interface IP address; we obtained the hostnames for the 5 ITDKs
that did not include this file from archives of CAIDA’s ongoing DNS
lookups that correspond to when CAIDA constructed the graph.
The number of router interfaces varied with the number of VPs
that CAIDA used to collect traceroute paths, from 1.52M interfaces
in 2010 to 2.75M in 2019. A consistent fraction (55.9% – 60.4%) of
these interfaces had a hostname recorded. Due to visibility limita-
tions in traceroute [13] and coverage limitations in alias resolution
techniques [11], only 4.9% – 10.2% of routers in the ITDKs have
more than one interface recorded. Our technique relies on routers
with more than one recorded interface to evaluate the consistency
and uniqueness of names inferred within a given suffix.
3 INTUITION AND CHALLENGES
Our algorithm learns if a network uses a naming convention that
includes a router name by evaluating automatically generated can-
didate regexes using a set of routers that other alias resolution
techniques previously inferred. Conceptually, we infer the regex is
extracting a router name if three conditions hold: (1) if the regex
extracts the same value from a set of hostnames associated with
each IP address on the router, (2) the value is unique to that router,
and (3) the regex behaves this way for all of the ISP’s routers. This
inference algorithm is challenging for three key reasons.