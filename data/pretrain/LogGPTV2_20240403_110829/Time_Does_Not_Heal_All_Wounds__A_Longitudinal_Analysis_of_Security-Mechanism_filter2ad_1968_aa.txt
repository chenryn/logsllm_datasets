title:Time Does Not Heal All Wounds: A Longitudinal Analysis of Security-Mechanism
Support in Mobile Browsers
author:Meng Luo and
Pierre Laperdrix and
Nima Honarmand and
Nick Nikiforakis
Time Does Not Heal All Wounds:
A Longitudinal Analysis of Security-Mechanism
Support in Mobile Browsers
Meng Luo
Stony Brook University
PI:EMAIL
Pierre Laperdrix
Stony Brook University
Nima Honarmand
Stony Brook University
PI:EMAIL
PI:EMAIL
Nick Nikiforakis
Stony Brook University
PI:EMAIL
Abstract—Recent market share statistics show that mobile
device trafﬁc has overtaken that of traditional desktop computers.
Users spend an increasing amount of time on their smartphones
and tablets, while the web continues to be the platform of choice
for delivering new applications to users. In this environment, it
is necessary for web applications to utilize all the tools at their
disposal to protect mobile users against popular web application
attacks. In this paper, we perform the ﬁrst study of the support
of popular web-application security mechanisms (such as the
Content-Security Policy, HTTP Strict Transport Security, and
Referrer Policy) across mobile browsers. We design 395 individual
tests covering 8 different security mechanisms, and utilize them to
evaluate the security-mechanism support in the 20 most popular
browser families on Android. Moreover, by collecting and testing
browser versions from the last seven years, we evaluate a total
of 351 unique browser versions against the aforementioned tests,
collecting more than 138K test results.
By analyzing these results, we ﬁnd that, although mobile
browsers generally support more security mechanisms over time,
not all browsers evolve in the same way. We discover popular
browsers, with millions of downloads, which do not support the
majority of the tested mechanisms, and identify design choices,
followed by the majority of browsers, which leave hundreds
of popular websites open to clickjacking attacks. Moreover,
we discover the presence of multi-year vulnerability windows
between the time when popular websites start utilizing a security
mechanism and when mobile browsers enforce it. Our ﬁndings
highlight the need for continuous security testing of mobile web
browsers, as well as server-side frameworks which can adapt to
the level of security that each browser can guarantee.
I.
INTRODUCTION
The web continues to be the platform of choice for de-
livering applications to users. The ever-increasing capabilities
of modern web browsers and ofﬂoading of computation and
storage to the cloud allow the development of powerful web
applications ranging from banking, ofﬁce automation, and
word processors to spreadsheets, photo editors, and peer-to-
peer video conferencing.
Web applications have historically been vulnerable to a
wide range of client-side attacks, including Cross-Site Script-
Network and Distributed Systems Security (NDSS) Symposium 2019
24-27 February 2019, San Diego, CA, USA
ISBN 1-891562-55-X
https://dx.doi.org/10.14722/ndss.2019.23149
www.ndss-symposium.org
ing (XSS) [31], Cross-Site Request Forgery (CSRF) [10],
SSL stripping [25], and clickjacking [1, 34]. To help defend
against these attacks, browser vendors, from early on, started
adding support for security mechanisms to protect the users of
vulnerable web applications. These mechanisms include simple
access control ﬂags for HTTP cookies (e.g., HttpOnly and
secure ﬂags making cookies inaccessible to JavaScript and
non-HTTPS content [9, 50]) as well as complicated whitelist-
based mechanisms such as the Content Security Policy through
which websites can denote the allowed sources of remote
resources [27]. All of these security mechanisms are re-
quested by web applications, typically through HTTP response
headers, and enforced by web browsers. Previous research
has quantiﬁed the adoption of these mechanisms by popular
websites, ﬁnding that, in general, the adoption of security
mechanisms and their conﬁguration complexity are inversely
correlated [20, 26, 49].
In this paper, we analyze the support of these mechanisms
in mobile browsers in order to understand whether mobile
browsers are capable of properly enforcing them. We focus
on mobile browsers for the following two reasons: First,
unlike desktop environments, there exist hundreds of fami-
lies of mobile browsers—each advertising a unique set of
features, such as increased performance, voice control, and
built-in anti-tracking capabilities [22]. All of these browsers
are downloaded millions of times and there is currently no
quantiﬁcation of their security-mechanism support. As such,
two users browsing the same website at the same time may
have substantially different security guarantees depending on
the mobile browsers that they utilize. Second, market research
shows that an increasing number of users rely more and more
on mobile devices for their daily computing needs. A 2017
study of comScore found that users around the world spent
the majority of their online time on mobile devices, with users
from the U.S. spending 71% of their “digital minutes” on a
mobile device [12].
To perform our analysis, we create a set of 395 tests
that precisely quantify the support of eight different security
mechanisms in browsers, and expose the 20 most popular
Android mobile browsers to these tests. Moreover, we perform
a longitudinal analysis of this support since 2011, exposing a
total of 351 unique browser versions to the 395 tests, thereby
performing over 138K tests against mobile browsers.
Through our experiments, we ﬁnd that although mobile
browsers, in general, support more security mechanisms with
each passing year, the rate of adoption varies by browser
family. For example, Mozilla Firefox’s support of security
mechanisms is signiﬁcantly better than the UC Mobile browser
even though UC Mobile is downloaded by more users than
Firefox. Similarly, we ﬁnd multiple popular browsers that have
not been updated since 2016 and others that, despite their
updates, remain vulnerable to the majority of our tests.
We demonstrate the need for thorough testing of security
mechanisms by showing that Chrome’s decision to not sup-
port the ALLOW-FROM directive of the X-Frame-Options
mechanism [34] in favor of the equivalent CSP directive, cur-
rently leaves hundreds of popular websites belonging to banks,
governments, and telecommunication providers, vulnerable to
clickjacking attacks. Unfortunately, this decision also affects
the majority of the evaluated web browsers which utilize
WebView as their rendering engine.
Next to differences among browser families, we discover
that some security mechanisms are adopted signiﬁcantly faster
than others. For example, we ﬁnd that browser vendors added
support for the HTTP Strict Transport Security (HSTS) mech-
anism [20] much faster than other types of mechanisms, such
as CSP and the SameSite cookie ﬂag [33] for protecting
against CSRF attacks. In fact, by using the Internet Archive [7]
to retrieve stored HTTP headers of older versions of websites,
we ﬁnd that there is often a multi-year window of vulnerability
between the date when a given mechanism was ﬁrst requested
by a popular website, and the date when at least half of the
evaluated mobile browsers supported it.
Finally, we discover that, due to many browsers’ reliance
on WebView, the support of security mechanisms is inherently
tied to the Android version on which a browser is executing.
By evaluating the most recent versions of mobile browsers on
three popular Android versions, we ﬁnd that users of the same
version of the same browser are experiencing vastly different
levels of security, something that is both counter-intuitive as
well as difﬁcult to account for by web developers.
Overall, our main contributions are the following:
• We systematically collect information about security
mechanisms currently recommended for mobile web
browsers, and develop 395 tests to evaluate whether
a browser correctly implements all security-related
directives of each mechanism.
• We conduct a total of 138,645 tests against 351
individual browser versions belonging to 20 different
families released in the last seven years, and quantify
the differences in security-mechanism support and the
implications of the discovered differences for website
developers.
• We quantify the window of time between the request
of a security mechanism by a popular website and the
time when mobile browsers support that mechanism,
ﬁnding multi-year windows of vulnerability.
• We discover that, for WebView-based browsers, the
same browser version can exhibit different security
traits depending on the Android version on which it
executes.
# Tests
33
Content
DOM access, cookie scope, XML-
HttpRequest and worker
Secure, HttpOnly and SameSite ﬂag
Deny, SameOrigin and Allow-From
values
Script snifﬁng opt-out
TABLE I: Overview of the tested security mechanisms.
Category
Same-Origin
Policy
Cookie
X-Frame-
Options header
X-Content-
Type-Options
header
Iframe sandbox
attribute
Content
Security Policy
11
30
253
(e.g.
(e.g.,
JavaScript execution, form submis-
sion and top-level navigation
script-src)
Fetch directives
and other directives
form-
action, frame-ancestors and upgrade-
insecure-requests)
no-referrer-when-downgrade
(default) and other values
(e.g.,
no-referrer, origin, same-origin and
strict-origin)
Basic and includeSubDomains value
1
3
62
2
395
Referrer policy
Strict-
Transport-
Security header
Total
•
To tackle this complex security scene, we argue that
there is a need for developing a server-side framework
that can adapt to a user’s mobile environment and
employ proper security mechanisms (such as HTTP
response headers, HTML tags or JavaScript coding
techniques) according to the particular browser and OS
version of the mobile device, hiding this complexity
from web developers.
II. BACKGROUND AND SECURITY-MECHANISM TEST
SUITE
Table I lists the security mechanisms evaluated in this
paper. We compiled this list by reviewing prior work which
quantiﬁed the use of these mechanisms in popular and regional
websites [49, 20, 26, 43, 48], as well guides on securing
modern web applications [2, 18, 32]. Six out of the eight
presented mechanisms are typically activated via HTTP re-
sponse headers, although most of them can also be utilized
through  HTML tags. The Same-Origin Policy is, by
default, active in all web browsers whereas iframe sandboxing
is activated via the setting of the sandbox attribute in an
iframe HTML tag. Note that some of the security mecha-
nisms take boolean values (e.g., the Secure and HttpOnly
cookie attributes) while others, such as the Content Security
Policy, allow web developers to author complicated policies.
We made an effort to be as comprehensive as possible re-
garding the evaluated security mechanisms. We only excluded
mechanisms that are currently being deprecated (such as
HPKP [21]) and very recent mechanisms (such as the Feature
Policy [11]) which were proposed in 2018 and therefore cannot
yet be used for a longitudinal study.
A primary concept common to many security mechanisms
is that of a web origin. With the exception of browser cookies,
a web origin is deﬁned as the triplet of  [8]. As we discuss below, many security mechanisms
2
(a) Firefox v59.0 on Android 7.1 (secure)
(b) UC Mini v11.0.6 on Android 7.1 (vulnerable)
Fig. 1: The UC Mini browser is ignoring the HttpOnly
directive for sensitive cookies.
make decisions based on the origin of two parties that are
trying to communicate.
A. Same-Origin Policy [#Tests: 33]
The Same-Origin Policy (SOP) is a core security mech-
anism in modern browsers that isolates interactions between
components belonging to different web origins. Given the
importance of the SOP, a browser that shows vulnerabilities in
its SOP implementation is likely to be showing vulnerabilities
in all other security mechanisms.
Similarly to the work by Hothersall-Thomas et al. [19]
and Schwenk et al. [35], we develop a number of SOP tests
where content from an origin attempts to communicate with
other origins in a variety of ways. Examples include a parent
page trying to access resources of a cross-origin iframe, or
a child iframe accessing a cross-origin parent. Our SOP tests
cover interactions under multiple scopes, such as, DOM access,
cookies, XMLHttpRequest and web workers.
tests include various types of domain
Moreover, our
through the appropriate setting of the
relaxations where,
document.domain attribute, two different origins attempt
to relax to a common origin and then communicate with each
other [28]. Note that, because we are interested in the security
implications of not properly supporting SOP, all our test cases
(both for SOP as well as for all other mechanisms) involve
scenarios that should be blocked if the security mechanism is
properly supported. Overall, our framework tests a browser’s
SOP implementation against 33 different tests.
B. Protecting HTTP cookies [#Tests: 11]
Since web applications typically store session identiﬁers
in browser cookies, attackers often seek to steal user cookies
to perform session hijacking attacks. Moreover, Cross-Site
Request Forgery (CSRF) attacks abuse the ambient authority
of an authenticated user’s cookies to conduct cross-origin
authenticated requests. Given the sensitive nature of cookies,
browsers support attributes which make it harder for attackers
to steal cookies or weaponize a user’s authenticated cookies.
(a) Firefox v59.0 on Android 7.1
(secure)
(b) Chrome v65.0.3325 on An-
droid 7.1 (vulnerable)
Fig. 2: Chrome does not recognize the X-Frame-Options:
ALLOW-FROM http://webvisor.com sent by a Russian
bank (alfabank.ru) and allows the framing of the website
by any origin.
Speciﬁcally, by marking a cookie as Secure, a browser
is instructed to never send that cookie over unencrypted
communications, thereby stopping man-in-the-middle attackers
from capturing a user’s session identiﬁers. Similarly, cookies
marked as HttpOnly are never made available to JavaScript
code running in a page’s origin. As such, even if attackers
manage to conduct an XSS attack, sensitive cookies are
not available through the document.cookie attribute and
therefore cannot be exﬁltrated. Figure 1 shows screenshots
of the Firefox and UC Mini browsers on a page that marks
sensitive cookies as HttpOnly. Through the experiments
described in the rest of this paper, we discovered that UC
Mini ignores the HttpOnly attribute, and makes the cookie
available to JavaScript.
To defend against CSRF, web browsers recently started
supporting the SameSite ﬂag that controls the sending
of browser cookies in cross-origin requests. When a web
application uses the attribute samesite=strict, browsers
never send cookies in any cross-domain requests. Alternatively,
web applications can use the samesite=lax attribute where
cookies are sent in cross-origin requests, as long as these
requests utilize the GET method and cause a top-level nav-
igation. Our framework utilizes eleven tests to evaluate the
support of all three attributes, in different situations.
C. X-Frame-Options Header [#Tests: 30]
In clickjacking attacks, attackers set up malicious pages
where benign websites are loaded into transparent iframes and
super-imposed over the attackers’ websites. By carefully align-
ing controls between the two websites and taking advantage
of the ambient authority of browser cookies, attackers can use
clickjacking attacks to convince users to perform malicious
or unwanted actions, such as, deleting all
their emails or
following someone on a social network. To protect against such
attacks, websites can utilize the X-Frame-Options header
3
to instruct browsers as to whether they want to be framed and,
if so, which websites are allowed to frame them. Speciﬁcally,
the X-Frame-Options header can be set to DENY (framing
is not allowed), SAMEORIGIN (framing is allowed as long as
the parent page belongs to the same origin) and ALLOW-FROM
URL1, URL2,..., URLN (framing is only allowed if a
website is in the speciﬁed whitelist). The support of these
values is tested by trying to frame a website in another
website that
is not permitted in the X-Frame-Options
header. Figure 2 shows another real example uncovered via
our experiments where the Chrome browser does not rec-
ognize the ALLOW-FROM directive and discards the entire
X-Frame-Options mechanism, thereby making websites
vulnerable to clickjacking attacks.
D. X-Content-Type-Options Header [#Tests: 1]
Some browsers have MIME-snifﬁng capabilities that enable
them to attempt to determine the content type of each down-
loaded resource. This feature can lead to security problems
for servers hosting untrusted content (e.g., a user uploading
a malicious HTML page when the server expects the upload
of a picture and later abusing that page to conduct session-
hijacking attacks). To prevent browsers from MIME-snifﬁng,
thus reducing exposure to such attacks, a web server can send
the X-Content-Type-Options response header with a
value set to nosniff. To measure whether nosniff is
honored by browsers, we test whether a script, when non-script
content is expected, has its type determined and executed.
E. Iframe Sandbox Attribute [#Tests: 3]
The sandbox attribute allows developers to make use of
the least-privilege principle for content loaded inside iframes.
Using this attribute, a page can take some capabilities away
from the framed content, such as the ability to execute scripts
and navigate the top-level webpage. Developers can then
selectively enable the capabilities that are absolutely necessary
for the framed content. In our tests we measure whether the
script execution, form submission, and top-level navigation are
blocked, when an iframe is sandboxed.
F. Content Security Policy [#Tests: 253]
The Content Security Policy (CSP) is a mechanism through
the loading
which websites can instruct browsers to limit
of