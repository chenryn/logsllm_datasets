==== SNMP 采集配置中心管理
日志易支持通过调用snmpwalk的方式，采集 SNMP 性能和事件数据。在多数环境下，SNMP 需要采集的对象较多，OID 较为复杂，因此，需要单独进行采集配置的管理。本节介绍一种方案，巧妙的利用日志易的自定义指令和定时任务功能，完成 SNMP 采集配置的中心化管理。
注意：本方案在日志易 4.5 版本之后失效。
[NOTE]
====
有完备的 MIB 库，而非单一的 OID 时，建议采用 SNMP exporter 方式进行采集，请参阅相关章节介绍。
====
===== 准备步骤
首先使用日志易自带Python库进行PyMongodb的安装，将获取好的文件pymongo-3.11.0-cp27-cp27m-manylinux1_x86_64.whl上传至日志易SPLSERVER所在所有机器，使用如下命令进行安装:
 /opt/rizhiyi/python/bin/pip install pymongo-3.11.0-cp27-cp27m-manylinux1_x86_64.whl
然后部署相关的Lookup2程序：
1. 联系日志易技术支持，获取到文件SnmpConfigIssued.py，并上传至所有SPLSERVER所在机器的目录/data/rizhiyi/spldata/lookup/script/下
2. 打开SnmpConfigIssued.py修改以下配置，按实际情况填写：
+
[source,ini]
----
MYSQL_HOST = "192.168.1.128"
MYSQL_PORT = "3306"
MYSQL_USER = "root"
MYSQL_PSWD = "rizhiyi&2014"
MONGO_HOST = "192.168.1.128"
MONGO_PORT = "27017"
MONGO_USER = "rizhiyi"
MONGO_PSWD = "rizhiyi&2018"
RIZHIYI_USER = "admin"
RIZHIYI_TOKEN = "9b306beeca528063b57b487bc34f85a6"
----
+
3. 修改配置文件/data/rizhiyi/spldata/lookup/script/lookup_external.cfg，在最上方的lookup_script_names中追加"snmp_issued"配置，在下方的lookup_scripts中追加如下内容：
+
[source,]
----
snmp_issued {
external_file = "SnmpConfigIssued.py"
input_fields = "timestamp"
join_fields = "timestamp"
output_fields = "timestamp,ret"
}
----
4. 如果客户使用的不是SNMP v1的版本，需要修改 SnmpConfigIssued.py 中，`__addhekaconfig` 方法的 `request['args']` 定义，可修改的值包括：1、2c、3。
最后创建一个定时任务，对应的SPL语句为：`|makeresults count=1 |lookup2 snmp_issued outputfields timestamp,ret`；对应执行周期为5分钟执行一次。也就是说，当修改配置时，最长5分钟生效。
===== 操作说明
准备完成后，采集配置即可通过日志易系统自带的字典功能完成。程序默认读取的采集agent字典名为：`SNMP_AGENT_列表.csv`，默认读取的采集配置字典名为：`SNMP_COLLECT_客户名称.csv`。
新增 SNMP 采集代理，新增 SNMP 采集对象和 OID 设置，分别通过上述两个字典表完成。agent 字典表只需要一列，即 agent 运行的 IP 地址。采集配置字典表的格式举例如下：
[source,csv]
----
AGENT_IP,AGENT_PORT,DEVICEIP,OID,APPNAME,TAG,TYPE,PARAM
192.168.1.128,10001,192.168.1.1,1.3.4.2.4.2.1.3.4.6.2.3.4.5.6.1,switch,mem,snmpget,-v 1 -c public
192.168.1.128,10001,192.168.1.1,1.3.4.2.4.2.1.3.4.6.2.3.4.5.6.2,switch,cpu,snmpget,-v 1 -c public
192.168.1.128,10001,192.168.1.1,1.3.4.2.4.2.1.3.4.6.2.3.4.5.6.3,switch,network,snmpget,-v 1 -c public
192.168.1.128,10001,192.168.1.1,1.3.4.2.4.2.1.3.4.6.2.3.4.5.6.4,switch,io,snmpget,-v 1 -c public
192.168.1.128,10001,192.168.1.1,1.3.4.2.4.2.1.3.4.6.2.3.4.5.6.5,switch,thread,snmpget,-v 1 -c public
192.168.1.128,10001,192.168.1.1,1.3.4.2.4.2.1.3.4.6.2.3.4.5.6.1,switch,mem,snmpwalk,-v 1 -c public
192.168.1.128,10001,192.168.1.1,1.3.4.2.4.2.1.3.4.6.2.3.4.5.6.2,switch,cpu,snmpwalk,-v 1 -c public
192.168.1.128,10001,192.168.1.1,1.3.4.2.4.2.1.3.4.6.2.3.4.5.6.3,switch,network,snmpwalk,-v 1 -c public
192.168.1.128,10001,192.168.1.1,1.3.4.2.4.2.1.3.4.6.2.3.4.5.6.4,switch,io,snmpwalk,-v 1 -c public
192.168.1.128,10001,192.168.1.1,1.3.4.2.4.2.1.3.4.6.2.3.4.5.6.5,switch,thread,snmpwalk,-v 1 -c public
----
当该字典表发生内容变化，即重新上传，或通过页面编辑后，5 分钟内，定时任务会自动调用一次程序，自动检测文件是否存在以及文件的变更时间，发生变化后，使用文件中的配置和相关 AGENT_IP 中的现行配置进行一一比对，并且产生变化的类型，后续根据不同的变更类型进行处理，要么进行新增、要么进行删除。
额外的，脚本在处理过程中会产生详细的日志记录，日志文件为/data/rizhiyi/logs/splserver/snmp_issued.log，可通过该文件进行相关问题的确认。
===== SnmpConfigIssued.py 示例
本节中使用的程序示例如下，用户可按需修改：
[source,python]
----
include::SnmpConfigIssued.py[]
----