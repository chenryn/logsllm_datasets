# 字符串类
---
- https://www.kancloud.cn/imxieke/ruby-base/107302
---
# 字符串的创建
最简单的字符创建方法就是把字符的集合用 `" "` 或者 `' '` 括起来并直接写到程序中。
```ruby
str1 = "这也是字符串"
str2 = ' 那也是字符串'
```
使用 `" "` 时还可以执行用 `#{}` 括起来的 Ruby 式子，并将执行结果嵌入到字符串中。这个 `#{}` 就称为内嵌表达式（embedded expressions）。
```ruby
moji = "字符串"
str1 = "那也是#{moji}"
p str1    #=> "那也是字符串"
str2 = ' 那也是#{moji}'
p str2    #=> "那也是\#{moji}"
```
使用 `" "` 时，可以显示使用 `\`转义的特殊字符。
使用 \ 转义的特殊字符
特殊字符	| 意义
- | -
\t	        | 水平制表符（0x09）
\n	        | 换行符（0x0a）
\r	        | 回车（0x0d）
\f	        | 换页（0x0c）
\b	        | 退格（0x08）
\a	        | 响铃（0x07）
\e	        | 溢出（0x1b）
\s	        | 空格（0x20）
\v	        | 垂直制表符（0x0b）
\nnn	    | 8 进制表示方式（n 为 0～ 7）
\Xnn	    | 16 进制表示方式（n 为 0 ～ 9、a ～ f、A ～ F）
\Cx、\C-x	| Control + x\M-x	Meta(Alt) + x
\M-\C-x	    | Meta(Alt) + Control + x
\x	        | 示 x 字符本身（x 为除以上字符外的字符）
\Unnnn	    | Unicode 字符的 16 进制表示方式（n 为 0 ～ 9、a ～ f、A ～ F）
下面我们来看看不用 `" "`、`' '` 时应如何创建字符串。
**使用 %Q 与 %q**
当创建包含 `"` 或者 `'` 的字符串时，比起使用 `\"`、`\'` 进行转义，使用 `%Q` 或者 `%q` 会更简单。
```ruby
desc = %Q{Ruby 的字符串中也可以使用'' 和""。}
str = %q|Ruby said, 'Hello world!'|
```
使用 `%Q` 相当于用 `" "` 创建字符串，使用 `%q` 则相当于用 `' '` 创建字符串。
**使用 Here Document**
Here Document 是源自于 Unix 的 shell 的一种程序写法，使用 ` irb --simple-prompt
>> `ls -l /etc/hosts`
=> "-rw-r--r--  1 root  root  158 Jan 12 2010 /etc/hosts\n"
>> puts `cat /etc/hosts`
# Host Database
#
127.0.0.1    localhost
255.255.255.255    broadcasthost
::1             localhost
fe80::1%lo0    localhost
=> nil
```
**printf 方法与 sprintf 方法**
虽然 `printf` 方法与 `sprintf` 方法都不是 `String` 类的方法，但在处理字符串时会经常用到它们。下面我们就来看看它们的用法。
- 关于 `printf` 方法
    `printf` 方法可以按照某种格式输出字符串。例如在输出数值时，有时我们会需要在数值前补零，或者限定小数点显示的位数等，在这些情况下，用 `printf` 方法都能非常轻松地实现。
    ```
    1: n = 123
    2: printf("%d\n", n)
    3: printf("%4d\n", n)
    4: printf("%04d\n", n)
    5: printf("%+d\n", n)
    ```
    执行结果如下。
    ```
    123
    123
    0123
    +123
    ```
    `printf` 方法的第 1 个参数表示字符串的输出格式。而从第 2 个参数开始，往后的参数都会被依次嵌入到格式中 `%` 所对应的位置。
    在本例中，第 2 行的 `printf` 方法被指定为了 `%d`，这表示输出的字符是整数。
    `%` 与 `d` 之间还能插入字符。第 3 行的 `printf` 方法里插入了 4，这表示按照 4 位整数的格式输出。我们发现，执行结果中出现了 123 这种开头有 1 个空格的情况，这是因为要把 3 位整数以 4 位的格式输出，因此就多输出了 1 个空格。
    在第 4 行中，`%` 与 `d` 中间插入了 `04`，这表示若输出的整数位数不足，整数的开头就会做补零处理。
    第 5 行中指定了 `+`，这表示输出的结果一定会包含 `+` 或者 `-`。
    上面是关于数值格式的指定方法，同样，我们也可以指定字符串格式。
    ```ruby
    1: n = "Ruby"
    2: printf("Hello,%s!\n", n)
    3: printf("Hello,%8s!\n", n)
    4: printf("Hello,%-8s!\n", n)
    ```
    执行结果如下：
    ```
    Hello,Ruby!
    Hello,    Ruby!
    Hello,Ruby    !
    ```
    本例的第 2 行程序中指定了 `%s`，这表示将参数解析为字符串。参数 `n` 的值为 Ruby，因此输出的字符串为 `Hello,Ruby!`。
    在第 3 行中，`%` 与 `s` 之间插入了数字 `8`，这表示将 `Ruby` 输出为 8 位字符串。
    在第 4 行中，插入的内容为 `-8`，这表示按靠左对齐的方式输出 8 位字符串。
- 关于 `sprintf` 方法
    `printf` 方法会把内容输出到控制台，而 `sprintf` 方法则是把同样的输出内容转换为字符串对象。开头的 `s` 指的就是 `String`。
    ```ruby
    p sprintf("%d", 123)            #=> "123"
    p sprintf("%04d", 123)          #=> "0123"
    p sprintf("%+d", 123)           #=> "+123"
    p sprintf("Hello,%s!\n", n)     #=> "Hello,Ruby!"
    p sprintf("Hello,%8s!\n", n)    #=> "Hello,    Ruby!"
    p sprintf("Hello,%-8s!\n", n)   #=> "Hello,Ruby    !"
    ```
# 获取字符串的长度
我们用 `length` 方法和 `size` 方法获取字符串的长度。两者都返回相同的结果，大家根据自己的习惯选用即可。
```ruby
p "just another ruby hacker,".length    #=> 25
p "just another ruby hacker,".size      #=> 25
```
若是中文字符串，则返回字符数。
```ruby
p ' 面向对象编程语言'.length #=> 8
```
如果想获取的不是字符数，而是字节数，可以用 `bytesize` 方法。
```ruby
p ' 面向对象编程语言'.bytesize #=> 24
```
想知道字符串的长度是否为 0 时，可以使用 `empty?` 方法，该方法常被用于在循环等处理中判断字符串是否为空。
```ruby
p "".empty?    #=> true
p "foo".empty? #=> false
```