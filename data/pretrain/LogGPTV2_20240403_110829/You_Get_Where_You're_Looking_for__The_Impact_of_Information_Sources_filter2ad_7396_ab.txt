so that remaining tasks would still work, even if a previous
task had not been successfully completed.
Drawing on related work (as discussed in Section II), we
selected four general areas that typically result in security
or privacy errors on Android: (1) Mistakes in TLS and
cryptographic API handling; (2) storing sensitive user data
insecurely, such that it can be accessed by other (unauthorized)
apps; (3) using inter-component communications (ICC) in a
way that violates least privilege principles; and (4) requesting
unneeded permissions. We designed four tasks, detailed below,
to exercise these areas respectively.
Secure Networking Task.
This task addressed correct usage
of HTTPS and TLS in the presence of X.509 certiﬁcate errors.
The skeleton app connected to a website via HTTP; partici-
pants were asked to convert the connection to HTTPS. This
required making a minor adjustment to the connection object.
More interestingly, we created a certiﬁcate for secure.location-
tracker.org (a server we conﬁgured speciﬁcally for this study),
but
to location-
tracker.org, and a matching DNS entry for secure.location-
tracker.org did not exist. As a result, participants received
a HostnameVeriﬁer exception indicating the certiﬁcate name
and domain were mismatched. Secure solutions would include
creating a custom HostnameVeriﬁer to handle this case or
pinning the certiﬁcate (although we expected pinning to be
too time-consuming for most participants to implement in
the study) 4. We also accepted a participant arguing that the
location tracker app should obtain a correct X.509 certiﬁcate
rather than working around the problem as a secure solution.
Insecure solutions that allow a connection to be established
the participant was requested to connect
4Implementing it correctly requires inspecting the server’s certiﬁcate and
using a third-party tool such as the OpenSSL command-line client to generate
the pinning information
include using a HostnameVeriﬁer that accepts all hostnames,
or simply accepting all certiﬁcates without validation.
ICC Task.
This task addressed secure inter-component
communication. Participants were asked to modify a service
within the skeleton app, in order to make the service callable
by other apps. However, participants were asked to limit this
access to apps created by the same developer. To accomplish
this, participants needed to modify the Android Manifest. An
insecure solution would expose the service to be called by any
app; this could happen by setting the ﬂag android:exported
to true or by declaring intent ﬁlters, which set the exported
ﬂag to true by default. A secure solution for this task is to
deﬁne an own permission with protection level ‘signature’ or
‘signatureOrSystem’ and assign it as required for the service.
A second possible secure solution is to use a sharedUserId
among all apps from the same developer, which allows the
apps to share resources.
Secure Storage Task.
This task focused on secure storage
of the user’s login ID and password for the remote server. The
skeleton app contained empty store and load functions for the
participant to ﬁll in; the directions asked the participant to
store the credentials persistently and locally on the device. A
secure solution would be to limit access only to this app, for
example using Android’s shared preferences API in private
mode. An insecure solution would make the data accessible
to third parties, for example by storing it world-readable on
the SD card.
Least Permissions Task.
In this task, participants were
asked to add functionality to dial a hard-coded customer
support telephone number. The skeleton app contained a non-
functional call button, to which the dialing functionality was to
be applied. To solve this problem, the participant needed to use
an intent to open the phone’s dialing app. One option is to use
the ACTION_DIAL intent, which requires no permissions; it
opens the phone’s dialer with a preset number but requires the
user to actively initiate the call. Another option is to use the
ACTION_CALL intent, which initiates the call automatically
but requires the CALL_PHONE permission. We consider the
second solution less appropriate because it requires unneces-
sary permissions, violating the principle of least privilege.
D. Exit Interview
After completing each task (or running out of time), partici-
pants were given a short exit interview about their experience.
Using a ﬁve-point Likert scale, we asked whether each task
was fun, difﬁcult, and whether the participant was conﬁdent
they got the right answer. We also asked whether the docu-
mentation and resources participants had access to were easy
to use, helpful, and correct. We asked free-response questions
about whether the participant had used that documentation
source before and how they felt the documentation restriction
(where applicable) and time crunch affected their performance.
We also asked whether and how participants had considered
security or privacy during each task. Finally, we asked a series
294294
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:10:53 UTC from IEEE Xplore.  Restrictions apply. 
of demographic and programming-experience questions that
matched those in our initial developer survey (see Section III).
Ofﬁcial: 13
Assigned condition
SO: 13
Book: 14
United States: 12 (22.2%)
Male: 46 (85.2%)
United States: 6 (11.1%)
India: 5 (9.3%)
Location of Study
Gender
Country of Origin
Free: 14
Germany: 42 (77.8%)
Female: 8 (14.8%)
Germany: 28 (51.9%)
Others: 15 (27.8%)
E. Data Collection and Analysis
In addition to each participant’s code, think-aloud responses,
and exit interview responses, we collected browser activity
during the session (for participants in all but the book condi-
tion) using the History Export5 extension for Chrome, which
stores all visited URLs in a JSON ﬁle.
Scoring the Programming Tasks.
For each programming
task, we assigned the participant a functionality score of 1 (if
the participant’s code compiled and completed the assigned
task) or 0 (if not). To provide a security score for each task,
we considered only those participants who had functional
solutions to that task. We manually coded each participant’s
code to one of several possible strategies for solving the task,
each of which was then labeled secure or insecure. Based
on these categories, each participant who completed a task
was assigned a security score of 0 (insecure approach) or 1
(secure approach) for that task. Manual coding was done by
two independent coders, who then met to review the assigned
codes and resolve any mismatches. All conﬂicts were resolved
by discussions that resulted in agreement. Example secure and
insecure approaches for each task are detailed in Table I.
Prior to the conducting the lab study, we veriﬁed that
functional and secure solutions for each task, such as those
described in Table I, were available in each of the ofﬁcial
Android documentation, Stack Overﬂow, and the selected
books. This ensured that it was possible (if not necessarily
easy) for participants in all conditions to locate a correct and
secure answer.
Statistical Methods.
For ordinal and numeric data, we used
the non-parametric Kruskal-Wallis test to compare multiple
samples and Wilcoxon Signed-Rank test
to compare two
samples. For categorical data, we used Fisher’s Exact test.
In cases of multiple testing, we report tests as signiﬁcant if
the p-values are signiﬁcant after applying the Bon Ferroni-
Holm correction. To examine correlation between two sets of
binary outcomes, we the use Cohen’s κ measure of inter-rater
reliability.
To examine functional correctness and security across
tasks and conditions, while accounting for multiple tasks per
participant, we used a cumulative-link (logit) mixed model
(CLMM) [45]. As is standard, we include random effects to
group each participant’s tasks together. For the CLMM, we
tested models with and without the participant’s status as a
professional developer as an explanatory factor, as well as with
and without interactions among task, condition, and developer
status. In each case, we selected the model with the lowest
Akaike information criterion (AIC) [7].
V. LAB STUDY RESULTS
In this section, we discuss our lab study results in terms
of functional correctness, security, and participants’ use of
5https://chrome.google.com/webstore/detail/history-
export/lpmoaclacdaofhlijejogﬂdmgkdlglj
295295
Yes: 14
mean = 26.0
Professional Android Experience
Ages
median = 25
TABLE II
PARTICIPANT DEMOGRAPHICS.
No: 40
sd = 4.7
their assigned resources. We ﬁnd that while Stack Overﬂow
is easier to use and results in more functional correctness, it
also results in less security than the less accessible ofﬁcial API
documentation.
A. Participants
A total of 56 people participated in our lab study (13 in
the U.S. and 43 in Germany). Two participants (one from the
U.S. and one from Germany) were removed, one due to an
error assigning the condition and one because of their refusal
to work on the tasks. We report results for the remaining 54.
Our participants were aged between 18 and 40 (mean =
26, sd = 4.70), 85.2% were male (46 participants), and most
of them (88.9%, 48) were students. Several were part-time
students and part-time professional developers. More than half
of participants said they grew up in Germany (51.9%, 28). The
next most popular countries of origin were the U.S. (11.1%, 6)
and India (9.3%, 5). Table II shows demographic information
for the participants recruited in each country. Using Fisher’s
exact test, we did not ﬁnd differences in gender (p = 0.400),
occupation (p = 1.00) or country of origin (p = 0.81) between
the randomly assigned conditions. Using the Kruskal-Wallis
test, we could not ﬁnd a difference in ages across the randomly
assigned conditions (X 2 = 2.22, p = 0.528). Both in the U.S.
and in Germany, participants were distributed evenly across
the four conditions.
Every lab study participant but one (98.1%) had been
programming in general for more than two years; 51.9% (28)
had been speciﬁcally developing Android apps for more than
two years. About half of the participants (53.7%, 29) had
developed between two and ﬁve Android apps, and 18.5%
(10) had developed 10 or more apps. Most participants (85.2%,
46) were not developing Android apps as their primary job,
but eight participants were employed as Android app pro-
grammers. Using the Kruskal-Wallis test, we did not ﬁnd
a difference in years of Android experience or in number
of apps developed across the randomly assigned conditions
(X 2 = 5.06, 4.46 and p = 0.409, 0.485 respectively). As
shown in Figure 3, our lab-study participants had roughly
similar experience to the developers in our online survey.
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:10:53 UTC from IEEE Xplore.  Restrictions apply. 
s
i
o
n
s
L
e
a
s
t
P
e
r
m
i
s
-
n
e
w
I
n
t
e
n
t
(
a
c
t
i
o
n
,
u
r
i
)
A
c
t
i
v
i
t
y
.
g
e
t
P
r
e
f
e
r
e
n
c
e
s
(
m
o
d
e
)
C
o
n
t
e
x
t
.
g
e
t
S
h
a
r
e
d
P
r
e
f
e
r
e
n
c
e
s
(
n
a
m
e
,
m
o
d
e
)
C
o
n
t
e
x
t
.
o
p
e
n
O
r
C
r
e
a
t
e
D
a
t
a
b
a
s
e
(
n
a
m
e
,
m
o
d
e
,
.
.
.
)
T
A
S
K
R
E
L
A
T
E
D
A
P
I
C
A
L
L
S
A
N
D
T
H
E
I
R
P
A
R
A
M
E
T
E
R
S
.
W
I
T
H
T
A
B
L
E
I
S
E
C
U
R
I
T
Y
R
A
T
I
N
G
P
A
R
A
M
E
T
E
R
S
H
E
L
P
C
L
A
S
S
I
F
Y
W
H
E
T
H
E
R
A
S
O
L
U
T
I
O
N
I
S
S
E
C
U
R
E
.
=
w
e
r
a
t
e
d
t
h
i
s
s
o
l
u
t
i
o
n
a
s
s
e
c
u
r
e
,
=
w
e
r
a
t
e
d
t
h
i
s
s
o
l
u
t
i
o
n
a
s
i
n
s
e
c
u
r
e
a
n
d
r
o
i
d
:
n
a
m
e
=
’
a
n
d
r
o
i
d
.
p
e
r
m
i
s
s
i
o
n
.
C
A
L
L
_
P
H
O
N
E
’
s
e
s
s
i
o
n
)
I
C
C
.
.
.
C
o
n
t
e
x
t
.
g
e
t
D
i
r
(
n
a
m
e
,
m
o
d
e
)
C
o
n
t
e
x
t