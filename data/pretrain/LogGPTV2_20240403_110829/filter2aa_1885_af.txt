任者看的，使其能够快速接替自己的工作。 
10. 【参考】好的命名、代码结构是自解释的，注释力求精简准确、表达到位。避免出现注释的
一个极端：过多过滥的注释，代码的逻辑一旦修改，修改注释是相当大的负担。 
Java 开发手册 
  22/44 
  反例： 
// put elephant into fridge  
put(elephant, fridge);    
   方法名 put，加上两个有意义的变量名 elephant 和 fridge，已经说明了这是在干什么，语义清晰的代
码不需要额外的注释。 
11. 【参考】特殊注释标记，请注明标记人与标记时间。注意及时处理这些标记，通过标记扫
描，经常清理此类标记。线上故障有时候就是来源于这些标记处的代码。 
 1） 待办事宜（TODO）:（标记人，标记时间，[预计处理时间]） 
   表示需要实现，但目前还未实现的功能。这实际上是一个 Javadoc 的标签，目前的 Javadoc 还没 
 有实现，但已经被广泛使用。只能应用于类，接口和方法（因为它是一个 Javadoc 标签）。 
 2） 错误，不能工作（FIXME）:（标记人，标记时间，[预计处理时间]） 
   在注释中用 FIXME 标记某代码是错误的，而且不能工作，需要及时纠正的情况。 
(九) 其它 
1. 【强制】在使用正则表达式时，利用好其预编译功能，可以有效加快正则匹配速度。 
说明：不要在方法体内定义：Pattern pattern = Pattern.compile(“规则”); 
2. 【强制】velocity 调用 POJO 类的属性时，直接使用属性名取值即可，模板引擎会自动按规范
调用 POJO 的 getXxx()，如果是 boolean 基本数据类型变量（boolean 命名不需要加 is 前
缀），会自动调用 isXxx()方法。 
说明：注意如果是 Boolean 包装类对象，优先调用 getXxx()的方法。 
3. 【强制】后台输送给页面的变量必须加$!{var}——中间的感叹号。 
说明：如果 var 等于 null 或者不存在，那么${var}会直接显示在页面上。 
4. 【强制】注意 Math.random() 这个方法返回是 double 类型，注意取值的范围 0≤x  
7. 【强制】异常信息应该包括两类信息：案发现场信息和异常堆栈信息。如果不处理，那么通
过关键字 throws 往上抛出。 
正例：logger.error(各类参数或者对象 toString() + "_" + e.getMessage(), e); 
8. 【推荐】谨慎地记录日志。生产环境禁止输出 debug 日志；有选择地输出 info 日志；如果使
用 warn 来记录刚上线时的业务行为信息，一定要注意日志输出量的问题，避免把服务器磁盘
撑爆，并记得及时删除这些观察日志。 
说明：大量地输出无效日志，不利于系统性能提升，也不利于快速定位错误点。记录日志时请思考：这些
日志真的有人看吗？看到这条日志你能做什么？能不能给问题排查带来好处？ 
9. 【推荐】可以使用 warn 日志级别来记录用户输入参数错误的情况，避免用户投诉时，无所
适从。如非必要，请不要在此场景打出 error 级别，避免频繁报警。  
说明：注意日志输出的级别，error 级别只记录系统逻辑出错、异常或者重要的错误信息。 
10. 【推荐】尽量用英文来描述日志错误信息，如果日志中的错误信息用英文描述不清楚的话使
用中文描述即可，否则容易产生歧义。【强制】国际化团队或海外部署的服务器由于字符集
问题，使用全英文来注释和描述日志错误信息。 
Java 开发手册 
  28/44 
三、单元测试 
1. 【强制】好的单元测试必须遵守 AIR 原则。 
说明：单元测试在线上运行时，感觉像空气（AIR）一样并不存在，但在测试质量的保障上，却是非常关
键的。好的单元测试宏观上来说，具有自动化、独立性、可重复执行的特点。 