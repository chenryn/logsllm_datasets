would just indicate that the API needs permission CONNECTIVITY_
INTERNAL. An app may invoke the API without the permission
when it updates its own network setting, which is completely legit-
imate. But using Axplorer’s map, a developer will unnecessarily
request CONNECTIVITY_INTERNAL, thus violating the principle of
least privilege. Furthermore, our analysis have identified many
APIs that do not require any explicit permissions, but rather just
UID checks. We believe that it is important to provide a protec-
tion mapping for these APIs as well, as they may be invoked by
app developers and lead to component hijacking if not correctly
protected.
User Checks. With the introduction of the Android multi-user
feature, Android APIs have been incrementally updated to include
User checks to separate the functionalities and privileges of multiple
users. Under the multi-user scenario, two access control aspects
are usually implemented. First, a user should be able to perform op-
erations in her own context. For example, a user can only uninstall
her own apps. Second, a user in the background should not be able
to affect active users. For instance, a background user cannot turn
on/off wifi while another user is logged in.
We believe that physical user check should be considered in
the generation of APIs protection mapping. In fact, one of the top
conditional access control enforcement pattern is adopted to enforce
users separation. Prominently, the permission INTERACT_ACROSS_
USERS is usually checked in disjunction with a user id check. That
is, when the user is attempting to perform an operation for another
user, the above permission is enforced.
Existing statically-derived efforts present a permission map as a
set of permissions. Using the map in security analysis is straight-
forward as the analysis only needs to compare the map of the APIs
invoked with the permissions requested (for overprivilege detec-
tion) or enforced (for component hijacking detection). Considering
path sensitivity and the additional dimension of checks requires
not only novel techniques to model access control behaviors on the
framework side, but also sophisticated analysis on the app side as
we can no longer use simple set comparison.
We aim to build a protection specification for Android APIs. We
call it protection map, to differentiate from the permission map by
existing works, indicating it is much more than just permissions. We
also aim to develop techniques to use protection maps in security
analysis.
3 SYSTEM DESIGN
Figure 5 presents the high level work-flow of our proposed sys-
tem, Arcade. As depicted, it consists of two modules: a framework
analysis component and an application analysis component.
The framework analysis module statically analyzes the Android
framework in order to construct a precise and path-sensitive API
protection mapping. Specifically, It first identifies the public entry
points (or APIs) in the exposed interfaces of the framework system
services. Then, for each identified API, it builds the Control Flow
Graph (CFG). Depending on the API’s code complexity, the CFG
could be quite complex. Since the CFG contains a lot of nodes irrel-
evant to enforcing access control (e.g., nodes performing the actual
functionality of the API), Our analysis transforms the CFG to an
Access-Control Flow Graph (AFG) which preserves the access con-
trol logic while respecting the original control flow and abstracting
away implementation details irrelevant to access control. Finally,
the AFG is processed to produce a succinct representation of the
access control conditions enforced by the API, taking the form of a
Figure 5: Arcade Design Overview
first-order logic formula on API call arguments and other contex-
tual information. We call the mapping from each API call to such a
first-order logic formula the protection map.
Our application analysis module leverages the constructed protec-
tion map to address two well-known security problems: permission
over-privilege and component hijacking. The protection map are rep-
resented using first-order logic formulas, which is not straightfor-
ward to use. To this end, the application analysis module proceeds
as follows:
To tackle permission overprivilege, it first extracts the app’s
invoked APIs and the corresponding contextual information (e.g.
UIDs and arguments values) for each API invocation. Then, based
on the API invocation information and our protection map, it con-
ducts boolean satisfiability reasoning to extract the least privileged
permission(s) the app needs to hold. Detecting overprivileges is
then possible through comparing the app’s requested permissions
to the generated permissions.
Detecting component hijacking is similarly performed through
logical reasoning. The application analysis first extracts the pro-
tection configuration a component applies at its declaration site. It
then conducts reachability analysis to extract the APIs invoked by it
(as well as other contextual information). Last, detecting hijacking
vulnerability translates into testing whether the enforced protec-
tion configuration satisfies our generated map for the invoked APIs.
If not, a malicious app could invoke the component with weak
protection to invoke APIs requiring stronger permissions.
Build CFGAbstract CFG to AFGGenerate Path ConditionsM = {Perm= A v B ^ UID = 1000}Input APIProtectionMappingInvoked APISecurity AnalysisContextual ConstraintExtract Contextual InformationApp AnalysisFrameworkAnalysisSolutionConﬁgurationAlgorithm 1 Constructing AFG.
Require:
1: CFG = (N , E) where N is a set of nodes and E is a set of edges.
2: isSec(n) = function that checks if a given node n is a security check
3: isSecRelated(n) = check if n is a node on which some security check is dependent.
4: isPred(n) = check if n is a predicate statement.
5: pathExists(n , m, G, N ) = check if there exists a path from n to m in G that does
not include any node in N other than n and m.
Ensure:
6: AFG = (N ′, E′) where N ′ is node set and E′ edge set.
7: function constructAFG
8:
N ′ = {Granted, Exception}
for all each node n ∈ N do
▷ Step I: Adding nodes
if isSec(n) then
N ′ = N ′ ∪ {n}
if isPred(n) and there is a path from n to an exception m along which
if isSecRelated(n) then
there is no security check then
continue
N ′ = N ′ ∪ {n}
for all each pair (n, m) ∈ N ′ do
if pathExists(n, m, CFG, N ′) then
E′ = E′ ∪ {(n, m)}
▷ Step II: Adding edges
for all each node n ∈ N ′ do
if isPred(n) and n has less than two edges in AFG then
▷ Step III: Adding edges to the two special nodes
if isSec(n) then
E′ = E′ ∪ {(n, Gr anted)}
E′ = E′ ∪ {(n, Exception)}
E′ = E′ ∪ {(n, Gr anted)}
if isSec(n) and n has less than two edges then
9:
10:
11:
12:
13:
14:
15:
16:
17:
18:
19:
20:
21:
22:
23:
24:
25:
4 EXTRACTING FRAMEWORK ACCESS
CONTROL
In the following, we explain the details of the individual steps, using
the public API setComponentEnabledSetting from the Package
ManagerService as an illustrative example.
4.1 Abstracting CFG to Access-Control Flow
Graph (AFG):
Given the CFG for an API function, not all of the nodes in the
CFG are of interest in the construction of protection map. For
instance, the CFG of setComponentEnabledSetting contains a
huge number of nodes and edges as its implementation is fairly
complicated. To extract the precise protection, we are interested in
the instructions that perform security checks, and the instructions
that change the values of variables that are used in the security
checks. Dependencies of security checks are important because
different access control may be enforced depending on different
input conditions. Figure 1 in Section 2 depicts such a case: different
permissions are enforced depending on the supplied input events.
We want to point out that simply performing backward program
slicing to extract the data/control dependence transitive closure
starting from the permission checks results in the inclusion of
code unnecessary for building the protection map. For instance,
the backward slice would include all code that could affect the
control flow before reaching the access control related logic, such
as input validation checks, which can be quite complex. Since such
code is not part of the access control logic, we need to exclude it
through our analysis. Moreover, tracking data dependencies alone
is not sufficient because conditionals that determine the different
permissions along different paths need to be included.
To precisely capture the access control logic, we introduce the
concept of Access-Control Flow Graph (AFG), which contains only
the instructions and control structures needed for building the
protection map. AFG is defined as follows.
Definition 4.1. An Access-Control Flow Graph (AFG) is an ab-
stracted Control Flow Graph. A node in an AFG is a security check
instruction or an instruction that is along a program dependence
path leading from some API parameter to a security check, preclud-
ing those performing input validation. There are also two special
nodes Exception and Granted used to denote the possible exits of an
AFG: security exception and access granted. An edge from node n
to m is introduced to abstract a control flow path between the two
nodes in the program. If n is a conditional statement, the edge also
has an annotation (T / F) to distinguish the branch outcome.
Example. Figure 6(A) depicts a code snippet extracted from
setComponentEnabledSetting’s implementation. This API is for
setting the enabled-setting for a package or its component (such as
an activity, receiver, etc). The implementation is as follows. Line
2 ensures that the supplied user id exists. Then, lines 5 to 6 ver-
ify whether it is dealing with a package level or component level
state update. The subsequent lines enforce various security checks.
If the caller is trying to update the given component for another
user and the caller is not SYSTEM, the code enforces the permission
INTERACT_ACROSS_USERS (lines 7 to 9). Then, the code enforces
another layer of access control: if the caller does not own the given
component, it enforces the permission CHANGE_COMPONENT_ENABLED
_STATE (lines 10 to 12). Once the security checks succeed, the actual
functionalities of the API are carried out (lines 13 and onward).
The actual CFG of the code for setComponentEnabledSetting
is quite complicated due to its implementation complexity. For sim-
plicity, we construct the CFG for the code snippet (Figure 6(A)).
Figure 6(B) depicts the constructed CFG. We label each node with a
number indicating the corresponding line number in the code snip-
pet. For instance, node 2 corresponds to the user id input validation.
Nodes 7 to 12 represent the access control enforcement logic and
may lead to the raise of an exception (the red node on the left) if
the enforcement does not hold.
Figure 6(C) depicts our constructed AFG for the same API. It only
contains the security enforcement nodes (e.g., nodes 9 and 12) and
those providing values to be used in the enforcement (e.g., nodes 7
and 10). The input validation node (node 2) and other nodes which
do not affect the security enforcements (nodes 5 and 6) are pruned
and abstracted with a single edge (linking node 1 to 7). Observe
that although node 2 is in the program slice of the security checks
(nodes 9 and 12) as the checks are transitively control dependent
on node 2, it is not part of the AFG as there is no data dependency
on node 2. Nodes 13 and 14 are also removed and abstracted with
an edge to the special node Granted. Intuitively, they belong to the
situation in which the access is granted. Clearly, the abstracted AFG
is much more concise and depicts the access control mechanism. 2
Algorithm 1 outlines our process for constructing the AFG from
a given CFG. It takes the CFG(N , E) and produces the correspond-
ing AFG denoted by (N ′, E′). To facilitate discussion, we define a
Figure 6: Proposed Approach for Extracting a Protection Map for an API; Blue Nodes Denote Security Checks
number of auxiliary functions in lines 1-5. The algorithm consists
of three steps.
It first initializes the AFG with the two special nodes (line 8). In
lines (9-15), it adds nodes to the AFG. Lines 10-11 adds all nodes
that perform security check (i.e., UID check, User id check, and
permission enforcement). Lines 12-15 add the nodes on which se-
curity checks depend. Line 13 excludes input validation checks.
Specifically, given a predicate n that some security check directly/-
transitively depends on, if there is a path from n to some exception
(including return with error code), and there is not any security
check along the path. It must be an input validation check. In-
tuitively, the exception must be caused by something other than
security checks (such as line 2 in Figure 6(A)). In contrast, if the
path from n to exception has some security check (e.g., lines 8 and
11 in Figure 6(A)), n is access control related and hence added to
AFG. Note that nodes on which security checks are data dependent
on (e.g., line 7 in Figure 6(A)) are always included.
In the second step, the algorithm adds edges to AFG to abstract
the original control flow. Specifically, lines 16-18 connect each pair
of nodes in AFG as long as there exists a path in the original CFG
and along the path, there are no other AFG nodes. That is, there is
reachability between the two and they are the closest. For example,
the paths between lines 1 and 7 are abstracted as an edge.
In the third step, the algorithm connects nodes to the two special
nodes Exception and Granted (lines 19-25). Particularly, lines 20-21
add an edge from a predicate n to Granted if n currently has only
one edge in the AFG. Specifically, the presence of n in the AFG
indicates that it must have a path to some security check in the
AFG. Therefore, the other (missing) branch of n must correspond to
cases in which access is granted. For example, after steps one and
two, line 11 in Figure 6(A) is added to the AFG and it has only one
edge to line 12. The other branch corresponds to that the access
is granted so that the API can proceed with its functionalities. As
such, we add an edge from line 11 to Granted. Since each security
check itself is essentially a predicate, lines 22-25 add edges from
security checks to the special nodes.
In our algorithm, statements that perform normal functionalities
such as lines 13-14 in Figure 6(A) are completely abstracted away.
Also observe that an AFG is a well-formed control flow graph (i.e.,
each predicate has two edges). Intuitively, one can think of it as a
simplified version of the original API code.
Construct Access Control Flow Graph (AFG)Generate Protection MapA. Input APIC. AFGD. First Order Logic Representation of Protection MapB. Control Flow Graph of API Construct Control FlowGraphpkgSetting.getEnabled(x4) == x3pkgSetting.setEnabled(..)FSetComponentEnableSettingsUserManager.exists(x4)x1.getClassName == nullx4== UserHandle.getUserId(uid)uid==  SYSTEM_UIDuid= Binder.getCallingUid()Enforce(INTERACT_ACROSS_USERS)packageSetting= mPackage.get(x1)FFFTTTuid== packageSetting.uidFFEnforce(CHANGE..STATE)TTFFTTisApp= TrueF256781012131198141SetComponentEnableSettingx4== UserHandle.getUserId(uid)uid==  SYSTEM_UIDuid= Binder.getCallingUid()Enforce(INTERACT_ACROSS_USERS)packageSetting= mPackage.get(x1)uid== packageSetting.uidFFFFFEnforce(CHANGE..STATE)TTTTTSuccessException78891011121Grantedif n == Granted then
Algorithm 2 Generating Protection Map.
Require:
1: AFG = (N , E) with N the node set and E the edge set.
2: isPred(n)= checks if n is a predicate.
3: isSec(n)= checks if n is a security check.
4:
Ensure:
5: p = the current path condition
6: M = the protection map
7:
8: function DFS(n, p)
9:
M = M ∨ p
10:
if isPred(n) or isSec(n) then
11:
for all ⟨n, m⟩ ∈ E do
12:
13:
14:
15:
16:
17:
18:
19:
20:
21:
22:
if ⟨n, m⟩ denotes the true branch then
p = p ∧ {the condition denoted by n}
if ⟨n, m⟩ denotes the false branch then
p = p ∧ ¬ {the condition denoted by n}
Let n be an assignment x = e with e an expression
p = (p ∧ x = e)
Let m be the successor of n
DFS(m, p)
DFS(m, p)
else
▷ Must be an assignment
DFS(AFG.root, f alse)
M = LogicalFormulaReduction((M))
4.2 Generating Protection Map
Given the AFG of an API, its protection map is constructed by
extracting the path conditions of all the paths from the entry to
the Granted node. Specifically, each path denotes a way to acquire
the needed access. Hence, the protection map is a first-order logic
formula formed by the disjunction of all these path conditions.
Algorithm 2 outlines our process for generating protection map.
It takes the AFG and produces a protection map M that is a first-
order logic formula.
The algorithm performs a depth first traversal of the AFG starting
from the root ( i.e. function entry) to node Granted. It collects
a condition p along each path. The map M is the disjunction of
the p of individual paths (lines 9-10). During the traversal of each
distinct path, if the node n is a predicate or a security check which is
essentially a predicate as well (line 11), the current path condition is
conjoined with the condition denoted by n or its negation (lines 13-
16). Otherwise, n must be an assignment. In this case, p is conjoined
with an assertion denoting the assignment (line 20). Then, the
traversal is conducted recursively (lines 17 and 22).
After recursion, M is in the following logical form.
M :=
[p1 ∨ ... ∨ pk];
where each pi is represented as follows:
pi
:=
[(y1 = e1) ∧ ... ∧ (yn = et)]
While the above generated logical formula suffices for precise
representation of the access control semantics, it might have an
arbitrary complicated structure and could be difficult for develop-
ers to understand. Thus, we further simplify the logical formula
through reducing its number of terms and clauses (function call
LoдicalFormulaReduction in Algorithm 2). This is done using the
Quine–McCluskey algorithm [30].
M :=
:=
p1
Example. To generate the protection map for the sample API set
ComponentEnabledSetting, we perform a DFS traversal of the