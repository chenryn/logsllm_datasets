                    layer_list = [(layer.name, layer) for layer in model.layers]
                print("number of feature " + str(idxx))
                index = int(interested_indice[idxx])
                fl = [rand_seed1[idxx], rand_seed2[idxx]]
                adv_list = fn(index, fl, model, layer_list, idxx, 1)
                tmp_list.append(adv_list)
                for ele in adv_list:
                    ele0 = [str(el) for el in ele[0]]
                    ele1 = [str(int(el)) for el in ele[1]]
                    ele2 = ele[2]
                    f.write(",".join(ele0) + '|' + ",".join(ele1) + '|' + ele2 + "\n")
这里我们输入了三个参数：
  * model：训练好的网络模型
  * edge_num：边的数量
  * sign：信号
    # select seeds
    print("#######debug" + str(round_cnt))
    if round_cnt == 0:
        new_seed_list = seed_list
    else:
        new_seed_list = new_seeds
    if len(new_seed_list) = len(tmp2):
                lenn = len(tmp2)
                head = tmp2
                tail = tmp1
            else:
                lenn = len(tmp1)
                head = tmp1
                tail = tmp2
            f_diff = 0
            l_diff = 0
            for i in range(lenn):
                if tmp1[i] != tmp2[i]:
                    f_diff = i
                    break
            for i in reversed(range(lenn)):
                if tmp1[i] != tmp2[i]:
                    l_diff = i
                    break
            if f_diff >= 0 and l_diff > 0 and (l_diff - f_diff) >= 2:
                splice_at = f_diff + random.randint(1, l_diff - f_diff - 1)
                head = list(head)
                tail = list(tail)
                tail[:splice_at] = head[:splice_at]
                with open('./splice_seeds/tmp_' + str(idxx), 'wb') as f:
                    f.write(bytearray(tail))
                ret = 0
            print(f_diff, l_diff)
            randd = random.choice(seed_list)
###  3.9 vectorize_file
获取输入的矢量表示
    # get vector representation of input
    def vectorize_file(fl):
        seed = np.zeros((1, MAX_FILE_SIZE))
        tmp = open(fl, 'rb').read()
        ln = len(tmp)
        if ln < MAX_FILE_SIZE:
            tmp = tmp + (MAX_FILE_SIZE - ln) * b'\x00'
        seed[0] = [j for j in bytearray(tmp)]
        seed = seed.astype('float32') / 255
        return seed