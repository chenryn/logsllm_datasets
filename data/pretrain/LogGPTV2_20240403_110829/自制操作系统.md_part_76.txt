RET
23
_api_free: ; void api_free(char *addr, int size);
PUSH EBX
MOV EDX,10 23
MOV EBX,[CS:0x0020]
MOV EAX,[ESP+ 8] ; addr
MOV ECX,[ESP+12] ; size
INT 0x40 9
POP EBX
RET
10
本次的winhelo3.c
int api_openwin(char *buf, int xsiz, int ysiz, int col_inv, char *title); 11
void api_putstrwin(int win, int x, int y, int col, int len, char *str);
void api_boxfilwin(int win, int x0, int y0, int x1, int y1, int col);
void api_initmalloc(void);
char *api_malloc(int size); 12
void api_end(void);
void HariMain(void)
13
{
char *buf;
int win;
14
api_initmalloc();
buf = api_malloc(150 * 50);
win = api_openwin(buf, 150, 50, -1, "hello");
14
api_boxfilwin(win, 8, 36, 141, 43, 6 /*浅蓝色*/);
api_putstrwin(win, 28, 28, 0 /*黑色*/, 12, "hello, world");
api_end();
} 16
图灵社区会员 metorm 专享 尊重版权
472 …… 第23天：图形处理相关
应该没有什么难点，不过，有一个地方需要注意：malloc用来管理内存的结构（struct
MEMMAN）存放在malloc内存空间最开始的地方，因此要多申请出一些malloc所需的空间用于存
放这个结构。那么，在winhelo3.hrb中总共申请了40k的空间（32+8=40）。
■■■■■
又到了“make run”的时间，在运行之前我们先用dir来看一下文件的大小。现在只有387个
字节了，太好了！然后我们来运行程序……运行成功！
只有387个字节却运行成功了哦
当然，如果用nask来编写的话程序应该会更小，不过那实在能累死人，还是免了吧。
22 画点（harib20b）
终于进入今天的正题——图形处理了。虽然我们已经可以描绘字符和方块了，但现在却还不
能画点呢。其实仔细想想，只要能画点就可以画出任何图形，画点简直是基本中的基本。然而就
是这最基本的东西到现在都还没有实现，这是怎么搞的嘛！好了，我们马上来编写。
编写画点的API太麻烦了，笔者想要不就用画方块的API画一个1像素见方的小方块来代替好
了……不过这样一来各位读者肯定会发飙的，还是不耍小聪明了，认认真真来编写这个API吧
（笑）。
在窗口中画点
EDX =11
EBX =窗口句柄
ESI =显示位置的x坐标
EDI =显示位置的y坐标
EAX =色号
嗯，看上去挺简单的，三两下就能写出来了。
图灵社区会员 metorm 专享 尊重版权
2 画点（harib20b） …… 473
本次的console.c节选
1
int *hrb_api(int edi, int esi, int ebp, int esp, int ebx, int edx, int ecx, int eax)
{
（中略） 18
} else if (edx == 11) {
sht = (struct SHEET *) ebx;
sht->buf[sht->bxsize * edi + esi] = eax;
3
sheet_refresh(sht, esi, edi, esi + 1, edi + 1);
}
return 0;
} 20
好，完工啦。
21
■■■■■
22
我们写一个什么样的应用程序好呢？可以画点的确意味着可以画出任何图形，不过这样一来
就更不知道该干啥了。要不就在黑色的背景上画一个黄色的点吧，题曰“最亮的星”。
23
本次的a_nask.nas节选
_api_point: ; void api_point(int win, int x, int y, int col); 23
PUSH EDI
PUSH ESI
PUSH EBX
9
MOV EDX,11
MOV EBX,[ESP+16] ; win
MOV ESI,[ESP+20] ; x
MOV EDI,[ESP+24] ; y 10
MOV EAX,[ESP+28] ; col
INT 0x40
POP EBX
11
POP ESI
POP EDI
RET
12
本次的star1.c
13
int api_openwin(char *buf, int xsiz, int ysiz, int col_inv, char *title);
void api_boxfilwin(int win, int x0, int y0, int x1, int y1, int col);
void api_initmalloc(void);
char *api_malloc(int size); 14
void api_point(int win, int x, int y, int col);
void api_end(void);
14
void HariMain(void)
{
char *buf;
16
int win;
图灵社区会员 metorm 专享 尊重版权
474 …… 第23天：图形处理相关
api_initmalloc();
buf = api_malloc(150 * 100);
win = api_openwin(buf, 150, 100, -1, "star1");
api_boxfilwin(win, 6, 26, 143, 93, 0 /*黑色*/);
api_point(win, 75, 59, 3 /*黄色*/);
api_end();
}
和之前一样，这个程序也相当简单，不过貌似光看名字就让人感觉这个程序很有料啊（笑）。
我们来“make run”，运行成功，意料之中。不过说起来，要是这么简单的程序还出错的话
也太对不起笔者的实力了。
最亮的星星找到了！
■■■■■
做这种小程序当然会成功啦，所以没有以往的那种成就感啊，最好能再锦上添花一下。对了，
我们就多画些星星吧，就画30个左右。
本次的stars.c
int api_openwin(char *buf, int xsiz, int ysiz, int col_inv, char *title);
void api_boxfilwin(int win, int x0, int y0, int x1, int y1, int col);
void api_initmalloc(void);
char *api_malloc(int size);
void api_point(int win, int x, int y, int col);
void api_end(void);
int rand(void); /*产生0～32767之间的随机数*/
void HariMain(void)
{
char *buf;
int win, i, x, y;
api_initmalloc();
buf = api_malloc(150 * 100);
图灵社区会员 metorm 专享 尊重版权
3 刷新窗口（harib20c） …… 475
win = api_openwin(buf, 150, 100, -1, "stars");
1
api_boxfilwin(win, 6, 26, 143, 93, 0 /*黑色*/);
for (i = 0; i buf, sht->bxsize, esi, edi, eax, (char *) ebp + ds_base);
if ((ebx & 1) == 0) {
sheet_refresh(sht, esi, edi, esi + ecx * 8, edi + 16);
}
} else if (edx == 7) {
sht = (struct SHEET *) (ebx & 0xfffffffe);
boxfill8(sht->buf, sht->bxsize, ebp, eax, ecx, esi, edi);
if ((ebx & 1) == 0) {
sheet_refresh(sht, eax, ecx, esi + 1, edi + 1);
}
} else if (edx == 8) {
（中略）
} else if (edx == 9) {
（中略）
} else if (edx == 10) {
（中略）
} else if (edx == 11) {
sht = (struct SHEET *) (ebx & 0xfffffffe);
sht->buf[sht->bxsize * edi + esi] = eax;
图灵社区会员 metorm 专享 尊重版权
3 刷新窗口（harib20c） …… 477
if ((ebx & 1) == 0) {
1
sheet_refresh(sht, esi, edi, esi + 1, edi + 1);
}
} else if (edx == 12) {
sht = (struct SHEET *) ebx; 18
sheet_refresh(sht, eax, ecx, esi, edi);
}
return 0;
3
}
在计算sht的地方，我们将ebx和0xfffffffe做了一个AND运算，即对其按2的倍数取整。然后在 20
判断是否需要刷新的if语句中，我们将ebx最低的一个比特用AND取出，判断其是否为0，如为0
则表示其除以2的余数为0，也就是偶数。
21
■■■■■
22
用上面的功能，我们来编写stars2.c。
本次的a_nask.nas节选 23
_api_refreshwin: ; void api_refreshwin(int win, int x0, int y0, int x1, int y1);
PUSH EDI
23
PUSH ESI
PUSH EBX