m contained
1,m,i. The tally ti for
candidate i is produced by decrypting Ti with the GS
extraction key ξ = sk.
b∈BB C (b)
– Produce the result r = (t1, . . . , tk) and Πd, a Fiat-
Shamir proof of correct extraction.
– Output (r, PBB, Πd).
Verify(PBB, r, Πσ, Πd) veriﬁes Πσ w.r.t. crs and Πd w.r.t.
PBB and the result r.
4.2 Receipt-Freeness
We now show that BeleniosRF satisﬁes strong receipt-
freeness, as deﬁned in Deﬁnition 1. Note that this in particular
implies vote privacy of BeleniosRF.
T h e o r e m 3. V BeleniosRF is strongly receipt-free under the
SXDH assumption in the random-oracle model.
P ro o f . The proof uses the ideas of that of Theorem 2.
The main one is again to use hash-function programmability
and to decrypt a ciphertext (c1, c2, c3) using components
c2 and c3 instead of the GS commitments. This will allow
us to switch to a hiding CRS, for which the commitments
would not be extractable. By randomizability of our SCR
scheme and of Groth-Sahai proofs, instead of re-randomizing
the ballots in PBB, we can simply recompute them. Finally,
having switched to a hiding CRS and a simulated ROM
proof thereof, we are able to replace the adversary’s view
with uniformly distributed values, irrespective of β.
We proceed by a sequence of hybrid games, which we show
are indistinguishable:
Hybrid (β,0) is the sRF game Expsrf,βA,V (Deﬁnition 1 and
Figure 1).
Hybrid (β,1) is the same game as Hybrid (β,0) for β = 1;
for β = 0 the diﬀerence is that the Fiat-Shamir proofs for
the CRS and the tally are simulated.
Hybrid (β,0) → Hybrid (β,1): Since ROM proofs can be
perfectly simulated by using random-oracle programmability,
the two hybrid games are distributed equivalently.
Hybrid (β,2) is deﬁned as Hybrid (β,1), except for how h
is chosen. For a, b ←$ Zp we deﬁne h1 = gb
1 and h2 = P a (as
in Theorem 2 but setting H(cid:48)(vk∗) := 0).
Hybrid (β,1) → Hybrid (β,2): It is immediate that both
games are distributed equivalently.
Hybrid (β,3) is deﬁned as Hybrid (β,2), but the result is
computed diﬀerently: each ballot bi = (idi, upki, ci, σi) is
decrypted as Fi = ci,2 · (ci,3 · c
−b
i,1 )−1/(a·upki) and vote vi is
deﬁned as the smallest vi ∈ {0, 1}k satisfying F(vi) = Fi.
The result is r = (t1, . . . , tk) with tj =(cid:80)
Hybrid (β,2) → Hybrid (β,3): Perfect soundness of the GS
proofs contained in ci guarantees that this alternative way
of decryption leads to the same result as extracting the bits
of vi from the commitments (we ignore collisions in F which
only occur with negligible probability).
i vi,j.
Hybrid (β,4) is deﬁned as Hybrid (β,3), except that PBB is
computed diﬀerently: for ballot bi, after extracting vi, instead
of re-randomizing bi, we freshly compute ˆbi for user i with
uski = (pp, Yi) as follows: we pick ri, si ←$ Zp to set
σi,1 = csi
1
σi,4 = gsi
2
πi,r, πi,m. We set ˆbi =(cid:0)upki, (ci,1, ci,2, Ci,m, Ci,r, πi,r, πi,m),
(σi,1, σi,2, σi,3, σi,4)(cid:1).
and using witnesses ri and vi, we compute Ci,m, Ci,r and
ci,2 = F(vi) · P ri
σi,3 = gsi
1
ci,1 = gri
1
σi,2 = Yi · csi
2
Hybrid (β,3) → Hybrid (β,4): By re-randomizability of our
SCR scheme and GS proofs, re-randomized ciphertexts, signa-
tures and proofs are distributed exactly as freshly computed
ones. The two hybrids are thus equally distributed.
Hybrid (β,5) is deﬁned as Hybrid (β,4), except that the
CRS contained in pk is set up in hiding mode, i.e., computed
via Setup(h)
g s .
Hybrid (β,4) → Hybrid (β,5): By the properties of GS proofs,
the two hybrids are indistinguishable under the SXDH as-
sumption.
Hybrid (β,6) is deﬁned as Hybrid (β,5), except that the
commitments and proofs published in PBB are simulated.
Hybrid (β,5) → Hybrid (β,6): By the properties of GS proofs,
under a hiding CRS regularly computed proofs and simulated
proofs are distributed equivalently; the two hybrids are thus
equally distributed.
1
for wi ←$ Zp.
Hybrid (β,7) is deﬁned as Hybrid (β,6), except that for
every i, when computing PBB entry ˆbi, ci,2 is computed as
ci,2 = F(vi) · gwi
Hybrid (β,6) → Hybrid (β,7): The two hybrids are indistin-
guishable under the DDH assumption in G1, which is proved
as follows: we ﬁrst note that in Hybrid (β,6), d (the decryp-
tion key with P = gd
1 ) is not used anywhere, and ri is only
used to compute ci,1 and ci,2 (since the GS commitments
and proofs are simulated).
1 , R = gr
We give a reduction from DDH to distinguishing Hybrids 6
and 7. Let (P = gd
1, W ) be a DDH instance, where ei-
ther W is random or W = gd·r
1 . By random self-reducibility of
DDH [6] we can create arbitrarily many instances (P, Ri, Wi),
where Ri = gri
for some uniformly random ri, and Wi is
1
independently random if W was, or Wi = gd·ri
if W = gd·r
1 .
The simulator now sets pk = (pp, crs, P ), with P from the
instance, and ci,1 = Ri and ci,2 = F(vi) · Wi. If Wi = P ri
then this is distributed as in Hybrid (β,6), whereas if Wi is
random, this is distributed as in Hybrid (β,7).
1
Observe that Hybrid (0,7) and Hybrid (1,7) are equally dis-
tributed, since in both games every ciphertext (ci,1, ci,2) is a
uniformly random pair. We have thus constructed a sequence
of hybrid games Hybrid (0,0), . . . , Hybrid (0,7), Hybrid (1,7),
. . . , Hybrid (1,0) which are indistinguishable under SXDH
and of which the ﬁrst one corresponds to the sRF game
with β = 0 and the last is the sRF game with β = 1. This
concludes the proof of strong receipt-freeness.
R e m a r k 3. We note that our scheme can be easily mod-
iﬁed and proven secure in the standard model if we assume a
trusted CRS: drop Πσ in Setup and use GS proofs fro Πd.
4.3 Veriﬁability
We consider strong veriﬁability from [22], which intuitively
ensures that the result of the election reﬂects the votes of:
• All voters who properly checked that their ballot ap-
pears in the bulletin board at the end of the election.
In BeleniosRF, a voter should check that one ballot in
PBB is signed with her credential.
• A subset of the voters who did not perform that ﬁnal
check. A voters may stop after casting her vote, thus
there is no guarantee that her ballot made it into the
ballot box. However, if the ballot is present, it should
not be possible to modify the corresponding vote.
• At most all corrupted voters. In particular, an adversary
should not be able to add more votes than the number
of voters he controls.
We refer the reader to [22] for the formal deﬁnition and point
out that strong veriﬁability assumes that voting devices are
honest. We ﬁrst note that BeleniosRF cannot be strongly
veriﬁable if revoting is allowed. Indeed, if a voter ﬁrst casts
a ballot b1 for a candidate v1, but later changes her mind
and votes for v2, casting a new ballot b2, a malicious voting
server may force the voter to keep the initial vote v1 by
re-randomizing b1 instead of b2, and the voter would not be
able to detect it. Therefore, in what follows, we assume that
a no-revote policy is applied. We believe that no-revoting is
not a real restriction since, as discussed in the introduction,
this actually corresponds to the most common setting used
in practice. By slightly generalizing the strong-veriﬁability
transformation in [22, Section 4], we are able to show:
T h e o r e m 4. BeleniosRF is strongly veriﬁable if the un-
derlying signature on randomizable ciphertexts scheme is
unforgeable.
The transformation to strong veriﬁability in [22] consists
in the voter signing with her private signing key usk a bal-
lot b obtained via an existing voting protocol that is weakly
veriﬁable (roughly speaking, weak veriﬁability assumes that
the voting server is honest, e.g., it does not modify nor erase
ballots). Next, the voter sends the triple (upk, b, σ) to the
voting server. The latter, after validating the ballot b and
verifying its signature σ, adds the triple (upk, b, σ) to the
ballot box. At the end of the election, the voter checks that
her ballot (upk, b, σ) appears in PBB by a simple search.
We generalize this transformation by allowing the voting
server to add a transformed triple (upk, b(cid:48), σ(cid:48)) to the ballot
box on input the voter’s ballot (upk, b, σ), such that poten-
tially b (cid:54)= b(cid:48) and σ (cid:54)= σ(cid:48) (in the original construction, one
simply sets b(cid:48) = b and σ(cid:48) = σ). In our generalized transfor-
mation, the voter on input her cast ballot (upk, b, σ) checks
whether there exists an entry (upk, b(cid:48), σ(cid:48)) in PBB such that
(b(cid:48), σ(cid:48)) veriﬁes under her key upk. Due to unforgeability of
randomizable signatures on ciphertexts (cf. Section 3.3) and
because of the no-revoting policy, this check guarantees that
the new ballot b(cid:48) displayed in the bulletin board contains the
same vote as the original ballot b cast by the voter.
Strong veriﬁability assumes that either the ballot box (i.e.
the re-randomization server) or the registrar is honest. As
pointed out in Section 1.2, the security of the generalized
transformation described in the previous paragraph is jeopar-
dized if this trust assumption is violated, as the existence of
an entry (upk, b(cid:48), σ(cid:48)) in PBB would no longer guarantee that
b(cid:48) contains the choice cast by the voter. In fact, an attacker
controlling both the registrar and the voting server can insert
entries (upk, b(cid:48), σ(cid:48)) in PBB that pass all tests but modiﬁed
the voter’s choice. This is due to the fact that the registrar
knows each voter’s private signing key. An obvious counter-
measure is to let each voter generate their own signing key
pair and simply ask the registrar to include the corresponding
veriﬁcation key in the list of eligible keys for the election.
Alternatively, one can thresholdize the role of the registrar
(who simply sends a private signing key to each voter) so it
becomes less likely for the attacker to obtain a voter’s private
key.
5. EFFICIENCY OF BE L E N I O SRF
The ballot encryption scheme we introduced is somewhat
involved, especially since we use bit-by-bit Groth-Sahai proofs.
For this reason, we benchmarked ballot creation on a number
of potential client devices. We built a JavaScript implementa-
tion [2] of the voting process (encrypt, sign, prove) using the
CertiVox IoT Crypto Library [17]. We used a BN curve on a
254-bit prime ﬁeld. We considered the values k = 1, 5, 10 and
25. For homomorphic tallying, as used in Section 4, k repre-
sents the number of candidates in an election. If we switch to
shuﬄe-based tallying, k is the length of the message, which
means we can support up to 2k candidates.
As seen in Table 1, recent devices can complete the required
cryptographic operations in reasonable time for small values
of k. We see that while the linear cost associated with the
message size is the dominant factor, the constant factor is not
negligible for low-end devices. While slower than the current
Helios or Belenios implementation (which do not use elliptic
curves), performance is acceptable, especially for modern de-
vices. Moreover, our implementation is single-threaded with
only rudimentary optimizations. By constructing proofs in-
crementally as the ballot is ﬁlled, we could amortize the linear
part of the cost. Alternatively, we may increase performance
by coding a native client, e.g. a smartphone app.
We expect that server performance for BeleniosRF will be
less of a bottleneck. Compared to Helios, the main additional
Device
2013 Laptop –i7-4650U
2010 Desktop –i3-530
2014 Tablet –Exynos 5420
2016 Phone –SD 810
2014 Phone –SD 801
2012 Phone –A6
k = 1
1.00s
1.49s
6.97s
2.75s
5.55s
9.04s
k = 5
2.43s
3.46s
12.91s
6.26s
13.12s
18.65s
k = 10
4.02s
5.92s
21.92s
10.39s
22.70s
29.96s
k = 25
9.24s
13.62s
47.26s
22.19s
48.06s
63.77s
Table 1: Time to encrypt, sign and perform GS proofs
for ballots with a k-bit payload. This allows for up to k
candidates with homomorphic tallying, or 2k using shuﬄes.