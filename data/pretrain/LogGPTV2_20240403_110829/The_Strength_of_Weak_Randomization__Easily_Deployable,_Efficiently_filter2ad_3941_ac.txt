while total  τ|X ∼ Exp(λ))
=e
−λτ
Thus the probability of the adversary distinquishing
between the capped exponential and exponential distribu-
tions is negligible in λ, which is the goal of our security
deﬁnition.
If we let τ = maxm PM (m) be the smallest plaintext
frequency, then by increasing λ relative to τ, we can
make this probability arbitrarily small. Furthermore, we
can calculate the Poisson rate parameter λ that is re-
quired to achieve a desired security parameter ω, where
ω ≤ P r(X > τ )).
λ ≥ log ω
τ
Limitations. When the adversary has the frequencies
of all search tags and knows PM , Lacharite and Paterson
[43] pointed out another possible attack, wherein the
adversary ﬁnds a set of search tags whose counts sum
up to the expected count for a (set of) target plaintext(s).
The adversary might then reasonably conclude that those
search tags all represent encryptions of the given plain-
text(s).
When the adversary targets a single plaintext, it must
solve an instance of the subset sum problem (SSP).
When targeting multiple plaintexts simultaneously, the
adversary must solve an instance of the multiple knap-
sack problem (MKP). While both problems are NP, there
exist efﬁcient approximation algorithms, for example
[13].
However, even if the adversary can ﬁnd a solution to
the computational problem, this does not guarantee that
the matching that it ﬁnds will be correct. To see that this
is true, consider the case where each search tag occurs
exactly once. Then all possible plaintext-to-search-tag
matchings give equally valid solutions to the problem,
and the adversary can do no better than random guessing.
We leave a more detailed exploration of the efﬁcacy of
such attacks for future work. Instead, in the following
section, we present an improved WRE construction using
bucketization to eliminate the attack entirely.
1) Bucketized Poisson Random Frequencies: The
Poisson WRE approach above generated randomized
search tags for each plaintext. Doing so makes any one
search tag equally likely under all possible plaintexts, so
the adversary learns nothing by examining a single tag.
Unfortunately, that does not guarantee security against
an adversary who considers the combined frequencies
of several tags at once. In this section, we show how a
simple extension of the Poisson WRE approach, using
bucketization, can protect against the matching attacks
described in the previous section.
Figure 3 illustrates the difference in the two schemes.
In the (non-bucketized) Poisson WRE, we sample a set
of points from a Poisson process for each plaintext m,
over the interval [0, PM (m)]. We then use the inter-
arrivals between the points to determine the frequencies
of the search tags for m. This is equivalent to starting
with the set of points {FM (m) : m ∈ M} and then
sampling more points from the Poisson process over the
interval [0, 1].
In the Bucketized Poisson approach, we omit
the
points from FM (m), and we simply sample from the
Poisson process, independent of the plaintext frequen-
cies. As a result, some inter-arrival intervals will overlap
with the intervals for more than one plaintext. Notice that
in Figure 3 with the bucketized construction, the tag t3
can represent either plaintext m1 or m2.
• Search: on input keys k0, k1, parameter X , and a
message m, let (S, SM ) ← getSalts(PM ,X )} s =
S(m). Output search query for
q ← Tt = Fk1 (s1)∨Tt = Fk1 (s2)∨...∨Tt = Fk1 (s|s|)
This additional ambiguity completely removes the
small advantage that an adversary might obtain from
the imperfection of the capped exponential distribution.
It also negates any kind of frequency-based matching
The Bucketized Poisson also makes a slight modiﬁca-
tion to the encryption and search algorithms from Figure
1. Instead of inputting the plaintext appended to a salt
to the PRF, just the salt is given.
• Enc: on input keys k0, k1, security parameter X ,
plaintext distribution PM and a message m, choose
a uniform salt
(S, SM ) ← getSalts(PM ,X )}
$← sample(S(m), SM (m))
s
Output the (search tag, ciphertext):
(cid:4)
k0 (m)
(t, c) ← (cid:4)
Fk1 (s), Enc
(cid:5)
524
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 10:57:27 UTC from IEEE Xplore.  Restrictions apply. 
Algorithm 2 Bucketized Poisson
1: function GETSALTS-POISSON(PM ,M,m, k, λ)
2:
3:
4:
5:
6:
7:
8:
9:
s = 0
wordF r = [], salts = []
E = Exponential(λ)
total = 0
while total  (f r + PM (m)) then
dif ← (f r + PM (m)) − cdf
(cid:6)
f r
(cid:7)
weights[i]−dif
f r
wordF r.append
salts.append(i)
10:
11:
12:
13:
14:
15:
16:
17:
18:
19:
20:
21:
22:
23:
24:
25:
26:
27:
Fig. 3: Poisson Search Tag Frequency Example
attack, because the tag frequencies and the plaintext
frequencies are independent. The downside is that with
the bucketized WRE, query results will contain a small
number of false positives. The false positive rate is con-
trolled by parameter λ: increasing λ (thus decreasing the
expected frequency of each tag) decreases the expected
number of false positives.
Theorem V.1 (Single-Column Security for Bucketized
Poisson WRE). A Bucketized Poisson WRE scheme with
parameters (λ, n0, n1), is IND-CUDA secure.
Proof sketch. With the Bucketized Poisson algorithm,
the actual ciphertext search tags will have exactly the
same values and the same frequency, no matter which
M0 or M1 is encrypted. The only difference will be
the ordering of these search tags. Since the ordering is
determined by the output of a pseudo-random shufﬂe,
the adversary cannot learn anything from this ordering
either. The security of this construction also does not
depend on λ like the ﬁrst Poisson approach. The λ value
will affect the false positive rate and performance, but
not the security.
VI. PERFORMANCE EVALUATION
We implemented several ﬂavors of weakly randomized
encryption, including the ﬁxed salts method and Poisson
salt allocation, in the Haskell programming language. To
evaluate the performance of our prototype on realistic
data and queries at a variety of scales, we used the
SPARTA [48] framework from MIT-LL.
The SPARTA test framework includes a data generator
and a query generator. The data generator builds artiﬁcial
data sets with realistic statistics based on real data
from the US Census and Project Gutenberg. The query
generator creates queries for this test database based on
the desired query types and number of return results.
return (salts, wordF r)
A. Experimental Setup
We used the database generator to generate databases
with 100,000 records, 1 million records and 10 mil-
lion records. We generated over 1,000 queries for each
database, consisting of a mix of queries that returned
result sizes between 1 and 10,000 records.
We encrypted the columns fname, lname, ssn,
city, and zip with WRE. The rest of the SPARTA
columns were inserted into the test database in plaintext.
Each encrypted column is expanded into two columns:
one 64 bit Integer column for the WRE search tag and
another column to hold the (strongly randomized) AES-
encrypted data. The plaintext table contains 23 columns.
Therefore the ciphertext table contains the 23 encrypted
data columns, plus the 5 additional search tag columns.
We tested the performance of the ﬁxed salt method
with 100 and 1,000 salts, and we tested Poisson salt
allocation using λ of 100, 1,000, and 10,000.
525
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 10:57:27 UTC from IEEE Xplore.  Restrictions apply. 
We performed the tests with the client and the database
server located on the same local network via a 1 Gbps
Ethernet switch. The server has 12 CPU cores (dual
Xeon E5645), 64GB of RAM, and an array of 10k RPM
hard drives. It runs the Ubuntu Server 14.04 operating
system and Postgres 9.6 as the DBMS.
B. Experimental Results
Ciphertext Expansion. Table I shows the overall
ciphertext expansion, including the ciphertext expansion
from the AES encrypted data,
the additional search
tag columns and the additional indexes on the search
columns. Note that the number of salts used and whether
a ﬁxed salt or a Poisson Salt Distribution do not affect
the database size. The database ciphertext expansion
is directly related to the number and type of columns
encrypted.
DB + Indexes Size
Encryption Type
100k Plaintext
100k Encrypted
1M Plaintext
1M Encrypted
10M Plaintext
10M Encrypted
DB Size
112 MB
156 MB
1116 MB
1558 MB
11 GB
15 GB
136 MB
244 MB
1365 MB
2447 MB
13 GB
24 GB
TABLE I: Ciphertext Expansion
Database Creation.
Inserting 10 million plaintext
records took a total 6,356 seconds on average. Inserting
10 million ciphertext records took 58,604 seconds on
average. Because the database must only be initialized