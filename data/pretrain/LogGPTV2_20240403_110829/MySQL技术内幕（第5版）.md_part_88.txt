if（$title!=
print("\n");
print("\n");
print("$header\n");
print("$title\n");
第9章用PHP语言编写MySQL 程序
sampdb_connect ();
("\n");
后面编写的每一个Web脚本，都需要在页面的开头和结尾分别生成一组非
下面是改写后的脚本（名字为 index3.php）：
我
为
便
---
## Page 383
php脚本并没有包含任何用来处理异常的try/catch语句块。万一出现错误，会发生什么事情
HTML表格中。下面是脚本的完整代码：
分隔的文本。为了把行和列整齐地显示出来，
合于在命令行运行。正因如此，这个PHP脚本会输出HTML格式的内容，而不是输出以制表符
脚本与8.2.2节所开发的DBI脚本dump_members.p1类似，因此可以将其命名为
查询。下一个脚本将演示如何处理由多个行构成的结果集（如member表的全部内容）。这个PHP
9.1.3简单的数据检索页面
到像html_end（）这样的页尾函数里即可轻松实现。
外观更改为另一种风格，则只需修改相关的函数即可，而所有使用了它们的脚本都会自动生效。
换原有的同名文件。
利用函数来生成页面的开头和结尾，其实是一项很重要的功能。如果想要把页头或页脚的
其中，sampdb_connect（）函数启用了针对 PDO 错误的异常处理机制，但 dump_members.
我们在美史联盟主页里嵌入了一个脚本，它会运行一个只返回一个行（即成员总人数）的
html_end ();
$dbh=NULL;#关闭连接
print("\n"）;
print("\n");
$stmt="SELECT last_name,first_name,
#执行语句
$dbh=sampdb_connect（);
html_begin (Stitle,Stitle);
stitle="U.s. Historical League Member List";
require_once "sampdb_pdo.php";
#dump_members.php－将美史联盟成员信息填入HTML表格
dude>
请注意，PHP代码被分成了两个部分，介于其间的是网站欢迎信息的 HTML文本。
while（SroW=Ssth->fetch （PDO::FETCH_NUM))
$sth=
html_end(）;
读取语句的结果，
print("\n");
print("\n");
print(""
#对特殊字符进行转义，并输出表格单元
street,city，
然后进行清理
.htmlspecialchars ($row[$i])."\n");
state, zip,phone FROM member ORDER BY last_name";
#表格结束
#表格行结束
#表格行开始
#表格开始
dump_members.php脚本会把各成员行写到一个
email,"
9.1PHP概述
请把
363
---
## Page 384
重新命名为index.php，以替换原有的那个同名文件。
向它的链接。下面是修改后的主页脚本（即-index4.php）：
然后再使用下面这个URL通过Web浏览器来访问它：
的值进行编码，则需要使用urlencode（）函数。）这两个 PHP 编码函数与Perl的CGI.pm 模块
函数对HTML语言里的特殊字符（如“”或“&"）进行了转义处理。（如果要对URL里
果集里的下一个行；如果已经到达结果集的末尾，则返回FLASE。PDO：：FETCH_NUM参数的作
询结果时，则应该给出一条出错信息，以表明发生了什么样的错误。
脚本而言，其意义在于显示从数据库查询出来的结果，因此当它因某种原因无法显示数据库查
的错误。对于那个主页而言，向访问者显示欢迎信息是其主要的用途，而显示现有成员总人数
盟主页脚本里使用的办法有所不同，当时我们使用了一个空的异常处理例程来捕获并忽略所有
呢？此时，PHP的默认行为是终止脚本的执行，并输出一条问题描述消息。这与我们在美史联
汇
364
这个 dump_members.php 脚本演示了，如何利用 PHP脚本检索 MySQL数据库里的信息，
是，告诉fetch（)返回一个行，其中的各列是按数字索引的。
是一个附加功能，因此在检索不到总人数时不需要输出出错信息。对于dump_members.php
参考之前的主页修订，将index4.php 复制到Web服务器文档树的 ush1目录下，并将其
html_end ();
catch（PDOException Se）（）#清空处理器（进行错误捕捉，但将其忽略掉）
Welcome to the U.s. Historical League Web Site.
$title = "U.s.Historical League";
为了让人知道 dump_members.php 脚本，我们还需要在美史联盟的主页脚本里添加一个指
http://localhost/ush1/dump_members.php
如果想试用dump_members.php脚本，需要先把它安装到Web服务器文档树的ushl目录，
在执行查询，从 member 表查询到各行之后，此脚本会调用fetch（）方法一
2>
dyde>
V
try
dude>
>
html_begin($title,$title);
$dbh = sampdb_connect ();
u can view the directory of members here.
sth=$dbh
第9章用PHP语言编写MySQL程序
$sth->fetchColumn
>query
（0）;
一它会返回结
---
## Page 385
9.1.4处理语句结果
待，即如果它的值不为空，就输出一个超链接：
异。原有的那循环语句如下所示：
到这一点。它与dump_members.php脚本只是在那个用于获取和显示成员条目的循环里存在差
能够更容易地向联盟成员发送电子邮件。sampdb发行版里的dump_members2.php脚本可以做
结果。例如，你可以把来自email列的值显示为超链接，而不是静态文本，从而让站点访问者
并将其转换成Web页面的内容。如果你原意，也可以自行修改这个脚本，让它输出更为详尽的
PDO对象有两个方法：exec（）和query（）。
PDO提供了以下几种执行 SQL语句的方式。
while（$row=$sth->fetch（PDO::FETCH_NUM)）
电子邮件地址处于查询结果的第4列，因此 ump_members2.php 脚本需要对这个列特别对
while ($row = $sth->fetch (PDO::FETCH_NUM）)
print("\n");
print("\n");
print（"\n");
执行该语句，并返回结果。
for（$i=0;$icolumnCount(）:$i++)
for（$i=O;$icolumnCount（）;$i++)
print("\n");
■对于那些诸如DELETE、
print（"\n");
print("");
print（""
if（Si==3&& $row[Si]!=
#对特殊字符进行转义，并输出表格单元
明结果集里的有多少个列。
可以调用fetch（）方法来检索结果集里的各个行；可以调用columnCount（）方法来查
返回一个PDOStatement 语句句柄对象。通过这个对象可以访问结果集的信息。例如，
诸如 SELECT这种会生成结果集的语句，
人、替换或更新）了多少个行。
要调用éxec（）来执行，这个方法会返回一个计数值，表明语句实际更改（删除、
print(htmlspecialchars ($row[$i]));
Ise
printf("%s"
电子邮件处于结果集里的第4列（即索引3）
对特殊字符进行转义，
htmlspecialchars ($row[$i]));
$row[$i],
并输出表格单元；
、INSERT、REPLACE 和UPDATE之类的用于修改行的语句，
#表格行开始
#表格行结束
#表格行开始
#表格行结束
“）
，需要调用query（)方法来执行，这个方法将
。它们都接受一个SQL语句参数，然后立刻
."\n");
9.1PHP概述
365
---
## Page 386
法来获得一个单值结果。当你希望获得包含多个列的多个行时，常用的做法是在循环里多次调
如下所示。
个可用于访问结果集的 PDOStatement 语句句柄对象。这种语句句柄有多个非常有用的方法，
这
用
9.1.4.2处理那些返回结果集的语句
结果。下面这个示例演示了如何确定该语句是否真的删除了行：
以表明有多少个行受到影响。假设，你需要删除member 表里编号为149的成员，并报告操作
9.1.4.1处理那些修改行的语句
时抛出异常的机制。
366
这些行进行计数，以确定总共有多少个行。
月fetch（)来获得这些结果。下面的这个示例演示了一种具体的做法。在获取行时，它也会对
对于那些会生成结果集的语句，需要使用数据库句柄的 query（)方法。这个方法会返回一
fetch（)方法有一个参数，
printf ("Number of rows returned: %d\n", $count);
在前面讨论美史联盟主页时给出的那几个示例，演示了如何只调用一次fetchColumn（）方
$count = $dbh->exec ("DELETE FROM member WHERE member_id = 149");
对于修改行的语句，需要使用数据库句柄的exec（）方法。
while ($row = $sth->fetch (PDO::FETCH_NUM))
fetch（)方法。如果还有更多的行，那么它返回结果集里的下一行；否则，返回FALSE。
else
接下来的几节，将更加详细地讨论PDO的语句执行功能。所用示例程序会假定启用了出错
口 PDO 还支持通过预处理语句的方式分两个阶段执行语句。PDO 对象有一个 prepare（)
口
$count++;
#输出行里的各个值，并以逗号进行分隔
获取结果集里每一个行
fetchColumn（）方法。
print ("No record for member 149 was found\n");
print ("Member 149 was deleted\n");
for
先获取行，再对它们进行计数。）
columnCount（）方法。
处理数据值里的特殊字符。更多相关信息请参考9.1.6节。
预处理语句还提供了两种重要的功能：一是通过反复多次地执行来改善性能；二是可以
句，或只会返回行的语句。
句的 execute（)方法，还有一些用于处理结果集的其他方法。
处理，并返回一个 PDOStatement 语句句柄对象。这个语句句柄有一个可用于执行该语
方法，它可以接受一个SQL语句参数，但是不会立刻执行这条语句，它会做一些初始化
print
第9章用PHP语言编写MySQL程序
($i
($row[$i]
=0；
$i
columnCount();$i++)
.（$i columnCount（）=1？","："\n"））;
，能指定返回值的类型。表9-1列出的是一些常用的获取模式。
它会
，它与fetch（)方法相似，但只会返回每一个行的一个列值。
会返回结果集里的列数。（没有与之对应的行统计方法。必须
。该方法会返回一个行计数值，用
---
## Page 387
达式的计算结果：
而其属性需要使用$row->col_name语法来访问：
组合。
字索引来访问，也可以通过列名来访问。这相当于PDO：：FETCH_ASSOC和PDO：：FETCH_NUM的
它们的值：
columnCount（)方法来确定。下面这个简单的循环将获取各个行，并以制表符分隔的格式输出
其中的元素需要通过从0开始的数字索引来访问。结果集里的列个数可以通过调用语句句柄的
检索last_name 和 first_name的值，则可以像下面这样访问这些列：
关联数组。其中的元素名即为查询命令里选取的那些列的名字。例如，如果从president 表里
PDO：：FETCH_NUM，从而对随后的结果集检索操作产生影响：
以调用语句句柄的setFetchMode（）方法。
可通过列名来访问，也可以通过数字下标来访问。
否则其默认值为PDO：：FETCH_BOTH，表示fetch（）将把每一个行返回为一个数组，而其元素既
如果获取模式为 PDO:：FETCH_OBJ，则 fetch（）将把结果集里的下一个行返回为一个对象，
如果想在获取行之前设置默认获取模式，那么可以向query（)方法多传递一个参数，也可
SELECT CONCAT(first_name, '', last_name) FROM president
如果查询里包含计算列，那该怎么办？例如，你可能要执行一条查询，其返回值为某个表
while ($row= $sth->fetch（PDO::FETCH_OBJ))
如果获取模式为 PDO：：FETCH_BOTH，则fetch（）将返回一个数组，而其元素既可以通过数
如果获取模式是PDO：：FETCH_NUM，则fetch（）将把结果集里的下一个行返回为一个数组
while($row = $sth->fetch (PDO::FETCH_ASSOC))
如果获取模式为PDO：：FETCH_ASSOC，那么fetch（)将把结果集里的下一个行返回为一个
$sth=$dbh->query ($stmt,PDO::FETCH_NUM);
fetch（)方法的参数是可选的。如果未提供参数，则使用默认模式。除非重置了默认设置，
while ($row = $sth->fetch (PDO::FETCH_NUM))
ssth
printf ("%s %s\n", $row["first_name"], $row["last_name"]);
$sth=$dbh->query （$stmt);
$stmt="SELECT last_name,
ssth->setFetchMode(PDO::FETCH_NUM);
for（$i=0;$icolumnCount（）;$i++）
print ($row[$i]