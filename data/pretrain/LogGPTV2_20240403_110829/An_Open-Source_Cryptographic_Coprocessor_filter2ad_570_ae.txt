accelerator vendors, which may be stated as a
derivation of  Moore’s law: Intel can make it faster
cheaper than you can.  In other words, putting a lot of
effort into designing an ASIC for a crypto accelerator is
a risky investment because, aside from the usual
flexibility problems caused by the use of an ASIC, it’ll
be rendered obsolete by general-purpose CPU’s within
a few years.  This problem is demonstrated by several
products currently sold as crypto hardware accelerators
which in fact act as crypto handbrakes since, when
plugged in or enabled, performance slows down.
For pure acceleration purposes, the optimal
price/performance  tradeoff appears to be to populate a
daughterboard with a collection of cheap CPU’s
attached to a small amount of memory and just enough
glue logic to support the CPU (this approach is used by
nCipher, who use a cluster of ARM CPU’s in their SSL
accelerators [57]).  The mode of operation of this CPU
farm would be for the crypto coprocessor to halt the
CPU’s, load the control firmware (a basic protected-
mode kernel and appropriate code to implement the
required  bignum operation(s)) into the memory, and
restart the CPU running as a special-purpose 
engine.  For x86 CPU’s, there are a number of very
minimal open-source protected-mode kernels which
were originally designed as DOS extenders for games
programming available, these ignore virtual memory,
bignum
page protection, and other issues and run the CPU as if
it were very fast a 32-bit real-mode 8086.  By using a
processor like a K6-2 3D/333 (currently selling for
around $35) which contains 32+32K of onboard cache,
the control code can be loaded initially from slow,
cheap external memory but will execute from cache at
the full CPU speed from then on.  Each of these
dedicated bignum units should be capable of ~200 512-
bit RSA operations per second at a cost of around $100
each.
Unfortunately the use of commodity x86 CPU’s of this
kind has several disadvantages.  The first is that they
are designed for use in systems with a certain fixed
configuration (for example SDRAM, PCI and AGP
busses, a 64-bit bus interface, and other high-
performance options) which means that using them with
a single cheap 8-bit memory chip requires a fair amount
of glue logic to fake out the control signals from the
external circuitry which is expected to be present.  The
second problem is that these CPU’s consume significant
amounts of power and dissipate a large amount of heat,
with current drains of 10-15A and dissipations of 20-
40W being common for the range of low-end
processors which might be used as cheap accelerator
engines.  Adding more CPU’s to improve performance
only serves to exacerbate this problem, since the power
supplies and enclosures designed for embedded
controllers are completely overwhelmed by the
requirements of a cluster of these CPU’s.  Although the
low-cost processing power offered by general-purpose
CPU’s appears to make them ideal for this situation, the
practical problems they present rules them out as a
solution.
bignum
A final alternative is offered by digital signal processors
(DSP’s), which require virtually no external circuitry
since most newer ones contain enough onboard memory
to hold all data and control code, and don’t expect to
find sophisticated external control logic present.  The
fact that  DSP’s are optimised for embedded signal-
processing tasks makes them ideal for use as 
accelerators, since a typical configuration contains two
32-bit single-cycle multiply-accumulate (MAC) units
which provide in one instruction the most common
basic operation used in  bignum calculations.  The best
DSP choice appears to be the ADSP-21160, which
consumes only 2 watts and contains built-in
multiprocessor support allowing up to 6  DSP’s to be
combined into one cluster [ 58].  The aggregate 3,600
MFLOPS processing power provided by one of these
clusters should prove sufficient (in its integer
equivalent) to accelerate 
bignum calculations.  The
feasibility of using  DSP’s as low-cost accelerators is
currently under consideration and may be the subject of
a future paper.
5.3. Other Functionality
In addition to pure acceleration purposes, it’s possible
to use a PC104 add-on card to handle a number of other
functions.  The most important of these is a hardware
random number generator (RNG), since the
effectiveness of the standard entropy-polling RNG
using by cryptlib [ 59] is somewhat impaired by its use
in an embedded environment.  A typical RNG would
take advantage of several physical randomness sources
(typically thermal noise in semiconductor junctions) fed
into a  Schmitt trigger with the output mixed into the
standard cryptlib RNG.  The use of multiple
independent sources ensures that even if one fails the
others will still provide entropy, and feeding the RNG
output into the cryptlib PRNG ensures that any possible
bias is removed from the RNG output bits.
A second function which can be performed by the add-
on card is to act as a more general I/O channel than the
basic LED-and-pushbutton interface described earlier,
providing the user with more information (perhaps via
an LCD display) on what it is they’re authorising.
6. Conclusion
This paper has presented a design for an inexpensive,
general-purpose crypto coprocessor capable of keeping
crypto keys and crypto processing operations safe even
in the presence of malicious software on the host which
it is controlled from.  Extended security functionality is
provided by taking advantage of the presence of trusted
I/O channels to the coprocessor.  Although sufficient
for most purposes, the coprocessors processing power
may be augmented through the addition of additional
modules based on  DSP’s which should bring the
performance into line with considerably more expensive
commercial equivalents.  Finally, the open-source
nature of the design and use of COTS components
means that anyone can easily reassure themselves of the
security of the implementation and can obtain a
coprocessor in any required location by refraining from
combining the hardware and software components until
they’re at their final destination.
Acknowledgements
The author would like to thank Paul 
Karger, Sean
Smith, Brian Oblivion, Jon  Tidswell, Steve  Weingart,
Chris  Zimman, and the referees for their feedback and
comments on this paper.
References
[1] “Inside Windows NT”, Helen Custer, Microsoft
Press, 1993.
[2]
“Playing Hide and Seek with Stored Keys”, Nicko van
Someren and Adi Shamir, 22 September 1998, presented
at Financial Cryptography 1999.
[3] Eric Heimburg, “Monitoring System Events by
[4]
[5]
[6]
[7]
[8]
[9]
Subclassing the Shell”, Windows Developers Journal,
Vol.9, No.2 (February 1998), p.35.
“Windows NT System-Call Hooking”, Mark
Russinovich and Bryce Cogswell, Dr.Dobbs Journal,
January 1997, p.42.
“In Memory Patching”, Stone / UCF & F4CG, 1998
“A *REAL* NT Rootkit, Patching the NT Kernel”, Greg
Hoglund, Phrack, Vol.9, Issue 55.
“Securing Java and ActiveX”, Ted Julian, Forrester
Report, Network Strategies, Vol.12, No.7 (June 1998).
“Death, Taxes, and Imperfect Software: Surviving the
Inevitable”, Crispin Cowan and Castor Fu, Proceedings
of the ACM New Security Paradigms Workshop‘98,
September 1998.
“User Friendly, 6 March 1998”, Illiad, 6 March 1998,
http://www.userfriendly.org/cartoons/a
rchives/98mar/19980306.html.
[10] “The Inevitability of Failure: The Flawed Assumption of
Security in Modern Computing Environments”, Peter
Loscocco, Stephen Smalley, Patrick Muckelbauer, Ruth
Taylor, S.Jeff Turner, and John Farrell, Proceedings of
the 21st National Information Systems Security
Conference, October 1998.
[11] “The Importance of High Assurance Computers for
Command, Control, Communications, and Intelligence
Systems”, W. Shockley, R. Schell, and M.Thompson,
Proceedings of the 4th Aerospace Computer Security
Applications Conference, December 1988, p.331.
[12] Jeff Schiller, quoted in Communications of the ACM,
Vol.42, No.9 (September 1999), p.10.
[13] “Software Security in an Internet World: An Executive
Summary”, Timothy Shimeall and John McDermott,
IEEE Software, Vol.16, No.4 (July/August 1999), p.58.
[14] “Formal Methods and Testing: Why the State-of-the-Art
is Not the State-of-the-Practice”, David Rosenblum,
ACM SIGSOFT Software Engineering Notes, Vol21,
No.4 (July 1996), p.64.
[15] “How to bypass those pesky firewalls”, Mark Jackson,
in Risks Digest, Vol.20, No.1, 1 October 1998.
[16] “FIPS PUB 46, Data Encryption Standard”, National
Institute of Standards and Technology, 22 January 1988.
[17] “Federal Standard 1027, Telecommunications’ General
Security Requirements for Equipment Using the Data
Encryption Standard”, National Bureau of Standards, 14
April 1982.
[18] “FIPS PUB 46-2, Data Encryption Standard”, National
Institute of Standards and Technology, 30 December
1993.
[19] “Security Requirements for Cryptographic Modules”,
National Institute of Standards and Technology, 11
January 1994.
[20] “Building a High-Performance Programmable, Secure
Coprocessor”, Sean Smith and Steve Weingart,
Computer Networks and ISDN Systems, Issue 31 (April
1999), p.831.
[21] “Fortezza Program Overview, Version 4.0a”, National
Security Agency, February 1996.
[22] “iButton Home Page”, http://www.ibutton.com.
[23] “A Tentative Approach to Constructing Tamper-
Resistant Software”, Masahiro Mambo, Takanori
Murayama, and Eiji Okamoto, Proceedings of the ACM
New Security Paradigms Workshop‘97, September
1997.
[24] “Common Data Security Architecture”, Intel
Corporation, 2 May 1996.
[25] “The Giant Black Book of Computer Viruses (2nd ed)”,
Mark Ludwig, American Eagle Publications, 1998.
[26] “Understanding and Managing Polymorphic Viruses”,
Symantec Corporation, 1996.
[27] “Fravia’s Page of Reverse Engineering”,
http://www.fravia.org.
[28] “Phrozen Crew Official Site”,
http://www.phrozencrew.com/index2.htm.
[29] “Stone’s Webnote”,
http://www.users.one.se/~stone/.
[30] “Common Security: CDSA and CSSM, Version 2”,
CAE specification, The Open Group, November 1999.
[31] “Common Security Protocol (CSP)”, ACP 120, 8 July
1998.
[32] “Cryptographic API’s”, Dieter Gollman, Cryptography:
Policy and Algorithms, Springer-Verlag Lecture Notes
in Computer Science No.1029, July 1995, p.290.
[33] “The VMEbus Handbook”, VMEbus International Trade
Association, 1989.
[34] “PC/104 Specification, Version 2.3”, PC/104
Consortium, June 1996.
[35] “PC/104-Plus Specification, Version 1.1”, PC/104
Consortium, June 1997.
[36] “EZ Dos Web Site”,
http://members.aol.com/RedHtLinux/.
[37] “The FreeDOS Project”,
http://www.freedos.org.
[38] “OpenDOS Unofficial Home Page”,
http://www.deltasoft.com/opendos.htm.
[39] “PicoBSD, the Small BSD”,
http://www.freebsd.org/~picobsd/picobs
d.html.
[40] “Embedded Linux”,
http://www.linuxembedded.com/.
[41] “DiskOnChip 2000: MD2200, MD2201 Data Sheet,
Rev.2.3”, M-Systems Inc, May 1999.
[42] “Secure Deletion of Data from Magnetic and Solid-State
Memory”, Peter Gutmann, Proceedings of the 6th Usenix
Security Symposium, July 1996.
[43] “The Design of a Cryptographic Security Architecture”,
Peter Gutmann, Proceedings of the 8th Usenix Security
Symposium, August 1999.
[44] “IEEE Std.1284-1994: Standard Signaling Method for a
Bi-Directional Parallel Peripheral Interface for Personal
Computers”, IEEE, March 1994.
[45] “PCI-ISA Passive Backplace: PICMG 1.0 R2.0”, PCI
Industrial Computer Manufacturers Group, 10 October
1994.
[46] “Wer ist der befugte Vierte?  Geheimdienste
unterwandern den Schutz von Verschlüsselungsgeräten”,
Der Spiegel, No.36, 1996, p.206.
[47] “Verschlüsselt: Der Fall Hans Buehler”, Res Strehle,
Werd Verlag, Zurich, 1994.
[48] “No Such Agency, Part 4: Rigging the Game”, Scott
Shane and Tom Bowman, The Baltimore Sun, 4
December 1995, p.9.
[49] “A Retrospective on the VAX VMM Security Kernel”,
Paul Karger, Mary Ellen Zurko, Douglas Bonin, Andrew
Mason, and Clifford Kahn, IEEE Transactions on
Software Engineering, Vol.17, No.11 (November 1991),
p1147.
[50] “The Design and Analysis of Graphical Passwords”, Ian
Jermyn, Alain Mayer, Fabian Monrose, Michael Reiter,
and Aviel Rubin, Proceedings of the 8th Usenix Security
Symposium, August 1999.
[51] “Design and Verification of Secure Systems”, John
Rushby, ACM Operating Systems Review, Vol.15, No.5
(December 1981), p12.
[52] “Proof of Separability — a verification technique for a
class of security kernels”, John Rushby, Proceedings of
the 5th International Symposium on Programming,
Springer-Verlag Lecture Notes in Computer Science
No.137 (April 1982), p.352.
[53] “Pijnenburg Product Specification: Large Number
Modular Arithmetic Coprocessor, Version 1.04”,
Pijnenburg Custom Chips B.V., 12 March 1998.
[54] “Modular Exponentiation on Reconfigurable Hardware”,
Thomas Blum, MSc thesis, Worcester Polytechnic
Institute, 8 April 1999.
[55] “XC4000XLA/XV Field Programmable Gate Arrays,
v1.3”, Xilinx, Inc, 18 October 1999.
[56] “Apache e-Commerce Solutions”, Mark Cox and Geoff
Thorpe, ApacheCon 2000, March 2000.
[57] nCipher, http://www.ncipher.com.
[58] “ADSP-21160 SHARC DSP Hardware
Reference”, Analog Devices Inc, November 1999.
[59] “Software Generation of Practically Strong
Random Numbers”, Peter Gutmann, Proceedings
of the 7th Usenix Security Symposium, January
1998.