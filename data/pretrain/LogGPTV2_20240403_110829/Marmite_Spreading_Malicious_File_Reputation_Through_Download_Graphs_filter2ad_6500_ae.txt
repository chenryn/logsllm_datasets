ample of the false positives reported by Marmite, and shows
that many false positives are systematic. Figure 6 shows part of
a download graph built by Marmite, illustrating a typical case
that PUPs drop both benign dlls and further PUPs. As we can
see in the (cid:128)gure, (cid:128)le AddonsUI.exe with SHA2 5CD12... is iden-
ti(cid:128)ed as PUP Bubbledock and dropped two other PUPs, respec-
tively (cid:128)le OneSystemCare.exe with SHA2 B9BEE... (identi(cid:128)ed as
PUP OneSystemCare) and (cid:128)le 7d27aa...exe with SHA2 6307C...
(identi(cid:128)ed as Adware ConvertAd), and three benign DLLs, respec-
tively (cid:128)le WmiInspector.dll with SHA2 A9347..., nsdialogs.dll
with SHA2 1DEC2..., and HttpRequest.dll with SHA2 97CE1....
Even though these DLLs are legitimate (we speculate that they are
dropped as part of the dependencies used by (cid:128)le AddonsUI.exe),
these three DLLs are wrongly classi(cid:128)ed as malicious due to the over-
whelming evidence surrounding them. In this paper, we showed
that benign (cid:128)les marked as malicious by Marmite do not change
quickly over time, and can therefore be prevented by applying a
static blacklist.
7.2 Legitimate content delivery networks are
used to deliver malware.
Figure 7 illustrates a typical false positive case by Marmite. IP ad-
dress 23.77.202.16 serves four di(cid:130)erent URLs from very di(cid:130)erent
domains, including an Apple domain. We inspected this IP address,
and discovered that it belongs to Akamai, a well-established content
delivery network serving between 15 and 30 percent of all web traf-
(cid:128)c. Both http://files4.fastdownload6.com/dl-pure/... and
http://download.cdn.sharelive.net/cdn/... host a number
010203040506070809101112131415161718192021222324252627282930Date (June)246810121416Early Detection (days)050010001500200025003000No. of MalwareEarly Detection (days)No. of Early Detected Malware98Figure 6: Example of a PUP dropping benign DLLs.
Figure 8: Malware case study before label propagation. At
the beginning, only two (cid:128)les are labeled as malware.
Figure 7: Case study in which a legitimate content delivery
network is used to deliver both benign and malicious (cid:128)les.
of malicious (cid:128)les/PUPs (shown as red blocks in Figure 7). For ex-
ample, iLividSetup-r612-n-bc.exe is identi(cid:128)ed as the Bandoo
adware, and update 33.exe is identi(cid:128)ed as PUP DownloadAdmin.
When running Marmite, the malicious reputation of these (cid:128)les
gets propagated to AppleSoftwareUpdate.msi and iTunes.msi,
which end up being wrongly detected as malware. (cid:140)e issue here
is that the CDN is both serving benign and malicious content. In
Section 8 we discuss how we could deal with this type of false
positives to decrease the false positive rate of Marmite.
7.3 Malware operation.
In this section, we carry out a detailed malware distribution case
study. Figure 8 shows part of a download graph built by Marmite
on January 11, 2016. Nodes connected by dash lines are veri(cid:128)ed
to be benign sites and nodes connected with solid lines are the
focus of our discussion. (cid:140)ere are three IP addresses that belong to
three di(cid:130)erent hosting infrastructures, respectively GoDaddy.com,
Arvixe and Beyond Hosting. Before running Marmite, (cid:128)les
BridgectrlSpl.dll with SHA2 1F771... and 2653992.exe with
SHA2 D6D45... were known to belong to the Razy and Diple
malware families respectively. All the other (cid:128)les had unknown
reputations. A(cid:137)er running Marmite, the rest of the (cid:128)les were
identi(cid:128)ed as malicious (shown in Figure 9), and were accordingly
con(cid:128)rmed by VirusTotal, either on that same day (7456933.exe)
or several days later (4393841.exe, 5315672.exe, 5315671.exe
and kinnect.dll). It is worth noting that (cid:128)le 7456931.exe with
SHA2 A8CF2... remains unknown to VirusTotal at the moment of
writing.
(cid:140)e identi(cid:128)ed malware samples belong to four di(cid:130)erent families:
(Radamcrypt, Kovter, Zusy, and Kazy). Note that We collect the
Figure 9: Malware case study a(cid:133)er label propagation. At the
end of the process, six additional samples are discovered.
tags used by di(cid:130)erent vendors, remove general words like “trojan,”
“backdoor,” “malware,” etc., and choose the most frequent token as
the malware family name. Adding the two malware samples that
were provided as ground truth, these three sites dropped malware
from 6 di(cid:130)erent families during a single day. When we look at
the URLs that host the (cid:128)les closely, they share the same URL path
pa(cid:138)ern - a simple path ‘/counter/’. All the (cid:128)les directly hosted
by these three URLs also share similar naming pa(cid:138)ern - a (cid:128)le name
with 7 digits. (cid:140)is leads us to believe that these sites were part of
an exploit kit deployment. We also carried out a case study on PUP
operation, which can be found in Appendix A.
7.4 Combined malware and PUP operation.
In this section, we study a case that demonstrates that Marmite’s
label propagation can enable us to detect PUPs starting from mal-
ware labels. (cid:140)is case study shows that malicious operations in
which malware downloads PUP or vice versa exist, although re-
cent research showed that they are rare [17]. Figure 10 shows part
of a download graph built by Marmite on June 1, 2016. Before
running Marmite, (cid:128)les N1NBGXOOKAQD.EXE with SHA2 20749...,
YhLGsb1eNlqf.exe with SHA2 D1AFB... and coi1.exe with SHA2
63B2A... were known to belong to the Kryptik, SelfDel and
Trojan.Skeeyah malware families respectively. All the other (cid:128)les
had unknown reputations. A(cid:137)er running Marmite, (cid:128)les EITVU...
with SHA2 E413D... and ts 10051.exe with SHA2 D530D...
were detected as malicious. (cid:140)ese (cid:128)les were further identi(cid:128)ed as
PUP by VirusTotal, respectively as PUP.SearchGo and PUP.Neobar.
As pointed out in [17], there is a fundamental di(cid:130)erence between
malware distribution and PUP, as malware is mostly delivered
through drive-by downloads while users actively install PUP through
deception. (cid:140)is case is therefore very interesting since we see the
52.84.13.223AddonsUI.exeSHA2: 5CD12…http://us-cdn.winapp.netAmazon AWS Network Operations,Amazon Technologies Inc. PUP BubbledockOneSystemCare.exeSHA2: B9BEE…PUP OneSystemCare7d27aa…exeSHA2: 6307C…Adware ConvertAdWmiInspector.dllSHA2: A9347…nsdialogs.dllSHA2: 1DEC2…HttpRequest.dllSHA2: 97CE1…AppleSoftwareUpdate.msiSHA2: D462A…23.77.202.16http://swcdn.apple.com/content/downloads/10/43…http://swcdn.apple.com/content/downloads/52/40…iTunes.msiSHA2: C1676…http://ﬁles4.fastdownload6.com/dl-pure/1126566/……multiple update_33.exewith diﬀerentSHA2shttp://download.cdn.sharelive.net/cnd/r/612/…iLividSetup-r612-n-bc.exeSHA2: 91539…onesystemcare.exeSHA2: 7523B…Akamai CDNBandooDownloadAdmin173.201.247.1http://g1inc.net/counter7456931.exeSHA2: A8CF2…7456933.exeSHA2: A8CF2…198.252.64.124http://avirivi.co.il/counter4393841.exeSHA2: 7EA66…5315672.exeSHA2: 6F196…BridgectrlSpl.dllSHA2: 1F771…8.36.40.312653992.exeSHA2: C6FC2…5315671.exeSHA2: ED4F6…http://hellointerviewer.com/counterhttp://www.lauracandler.com/filecabinet/…http://www.mgtsolution.com/…GoDaddy.com, LLCArvixe, LLCBeyond Hosting, LLCkinnect.dllSHA2: D6D45…RazyDiple173.201.247.1http://g1inc.net/counter7456931.exeSHA2: A8CF2…7456933.exeSHA2: A8CF2…198.252.64.124http://avirivi.co.il/counter4393841.exeSHA2: 7EA66…5315672.exeSHA2: 6F196…BridgectrlSpl.dllSHA2: 1F771…8.36.40.312653992.exeSHA2: C6FC2…5315671.exeSHA2: ED4F6…http://hellointerviewer.com/counterhttp://www.lauracandler.com/filecabinet/…http://www.mgtsolution.com/…GoDaddy.com, LLCArvixe, LLCBeyond Hosting, LLCkinnect.dllSHA2: D6D45…RadamcryptZusy/Kovterremains unknownto VirusTotalKazyKovterZusy99malicious group delivers both PUPs and malware via the same
infrastructure.
Figure 10: Operation consisting of both PUP and malware.
8 DISCUSSION
Possible practical deployments of Marmite. We showed that
Marmite can e(cid:129)ciently increase the knowledge of malware sam-
ples, identifying malware that was not detected by VirusTotal
months a(cid:137)er it was observed in the wild. We mainly envision
Marmite as a method that security companies can use to improve
their internal knowledge of millions of malicious (cid:128)les they collect
on a daily basis. (cid:140)e blacklists generated could then be integrated
with existing end-user protection programs, such as antivirus tools
and browser blacklists [28].
Limitations. Although Marmite is a useful tool for detecting
malicious (cid:128)les, it has some limitations. First of all, Marmite relies
on an initial set of labeled nodes to infer the probabilistic labels
of other unlabeled nodes in the download graph. As we showed,
Marmite needs a minimal number of labeled nodes to be e(cid:130)ective,
but this could be a problem in some se(cid:138)ings. Another limitation is
that Marmite only infers probabilistic labels of unlabeled nodes in
the download graph and does not update the labels of seed nodes
during the inference process. (cid:140)is is typically not a problem because
AV vendors are conservative in the way they assign labels, but it is
a limitation to keep in mind.
Evasion. Marmite does not make any assumptions on how ma-
licious (cid:128)les are delivered, or on the structure of these malware
delivery networks. (cid:140)e only assumption that is made is that cyber-
criminal are either delivering the same (cid:128)le over di(cid:130)erent servers or
are reusing parts of their infrastructure to serve multiple malware
samples. (cid:140)is design choice makes Marmite less prone to evasion
than previous systems. Assuming Marmite is known to cybercrim-
inals, there are three possible ways that they could try to evade
Marmite. (cid:140)ey could try to compartmentalize their infrastructures,
and serve a single malware sample with unique SHA2 from each
malicious server. Although this could be e(cid:130)ective in evading our
system, we argue that it would not make sense for the malware
ecosystem in general, as it would make malware delivery much
more expensive (due to the need of se(cid:138)ing up a higher number of
servers) and it would ultimately break the pay-per-install ecosys-
tem, since these networks would not be able to provide malware
samples from multiple customers anymore. (cid:140)ey could also try
to evade Marmite by dropping more benign (cid:128)les together with
malicious binaries, causing our system to potentially (cid:131)ag those
benign (cid:128)les as malware. Again, even though this could be e(cid:130)ective
in evading our system, we argue that this approach would also
make malware delivery much more di(cid:129)cult (due to the need of
binding a high number of benign (cid:128)les into the payload, leading to
increased payload size, etc). As a third and (cid:128)nal option, malware
operators could start using CDNs exclusively to deliver their mali-
cious (cid:128)les. While Marmite would (cid:128)nd it di(cid:129)cult to keep track of
such (cid:128)les due to the whitelisting process, this would make malware
operators more visible to the CDNs themselves, who could track
such malicious activity and terminate their accounts.
9 RELATED WORK
In 2011, Caballero et
Studying malware delivery networks.
al. [5] provided the (cid:128)rst large scale measurement of pay-per-install
services in the wild. (cid:140)is work con(cid:128)rmed the previous observations
that cybercriminals are commonly using other botnets (known as
droppers) to deliver their malicious payloads [33, 34]. In 2012, Grier
et al. [8] studied the phenomenon of exploit kits, which are an
alternative way to distribute malware. Nelms et al. [24] proposed
Webwitness, a system that automatically builds the sequence of
events followed by users before downloading a malware sample.
More recently, researchers have been studying the ecosystem of
potentially unwanted so(cid:137)ware (PUP), which includes toolbars and
adware. (cid:140)omas et al. [37] performed a systematic study of PUP
and its prevalence and its distribution through pay-per-install ser-
vices. Kotzias et al. [17] identify PUP publishers and then study PPI
publishers and their involvement in PUP.
Leveraging malware delivery networks for malware detec-
Invernizzi et al. [11] proposed Nazca, a system to detect
tion.
malware in large-scale networks. (cid:140)e system builds malware dis-
tribution networks using the HTTP tra(cid:129)c data generated when
shellcode downloads the actual malware binary and launches it,
and uses this graph to gain insights of various malicious activities
associated with the graphs and train a decision tree classi(cid:128)er to de-
tect malicious candidates.Nazca reports 70.59% precision and 100%
recall. Marmite favors lowering the number of false detections,
and reports 93% TPR for 3.5% TPR in similar se(cid:138)ings.
Abu Rajab et al. [28] proposed CAMP, a content-agnostic mal-
ware detection system which utilizes reputation-based detection to
protect users. Leveraging aggregated data sources, CAMP predicts
the likelihood that this downloaded binary is malicious. CAMP
reports a TPR of 70% and a FPR of around 2%. Accepting a similar
FPR, Marmite achieves a TPR of over 90%. Rabharinia et al. [27]
presented Mastino, a system that performs classi(cid:128)cation over be-
havioral characteristics of how malicious (cid:128)les are downloaded by
machines on the Internet. Mastino uses domain-speci(cid:128)c features
such as characteristics of the URLs that (cid:128)les are downloaded from
and characteristics of the (cid:128)les themselves. By using this domain-
speci(cid:128)c information, Mastino reaches 95% TPR with 0.5% FPs. As
we mentioned, Marmite does not use any contextual information,
and as we show this has the advantage that the system is still capa-
ble of e(cid:129)ciently detect malware six months a(cid:137)er it was trained. For
fairness though, Mastino reaches be(cid:138)er results in the short term.
Including the whitelisting e(cid:130)ort, Marmite reports 1.9% FPs for
93% TPR. Nachenberg et al. [23] presented Polonium, a system that
builds bipartite graphs of (cid:128)les and machines on which these (cid:128)les
are installed and performs belief propagation to detect malware.
(cid:140)e pervasiveness of polymorphism and the subsequent di(cid:130)usion
52.31.98.154pwd se9 1 rus.exeSHA2: BF990…http://waitressdetail.ruAmazon AWS Network Operations,Amazon Technologies Inc. EITVUYTPB63C.EXESHA2: E413D…N1NBGXOOKAQD.EXESHA2: 20749…YhLGsb1eNlqf.exeSHA2: D1AFB…http://whoeverkill.ruhttp://hissbowth.ruts_10051.exeSHA2: D530D…coi1.exeSHA2: 63B2A…KryptikPUP.NeobarPUP.SearchGoTrojan.SkeeyahSelfDelhttp://lcorani.ashsliceheat.ru46.28.67.145UAServers Network100of singleton (cid:128)les might limit the e(cid:130)ectiveness of this system in
modern malware delivery. Polonium reported a TPR of 84% and a
FPR of 1% over 2011 malware data. (cid:140)is is in line with what was
obtained with 2016 malware by Marmite during the validation
stage.
(cid:140)e closest work to this paper is [19]. (cid:140)e authors reconstructed
and analyzed 19 million downloader graphs from 5 million real
hosts, then identi(cid:128)ed several strong indicators of malicious activ-
ity including growth rate, the diameter, and the Internet access
pa(cid:138)erns of downloader graphs. Building on top of these insights,
the authors implemented and evaluated a machine learning system
using random forest for malware detection, and proved to achieve
high true positive rate and low false positive in detecting malware.
(cid:140)is system has the limitation of only taking into account local
visibility for single hosts. Marmite, on the other hand, is able to
leverage a global view of malware delivery networks.
We showed that Marmite can operate e(cid:130)ectively without any
re-tuning even six months a(cid:137)er the parameters were trained. For a
high level comparison, [19] reports 98% TPR with 2% FPR with the
full feature set, and 81% TPR and 21% FPR with only the features
that are related to the local download graph, and therefore do not
take domain-speci(cid:128)c information into account. Marmite performs