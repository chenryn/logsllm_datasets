### False Positives in Marmite: Systematic Analysis and Case Studies

#### 7.1 Systematic False Positives
Figure 6 illustrates an example of false positives reported by Marmite, highlighting that many such cases are systematic. The figure shows a download graph constructed by Marmite, which demonstrates a typical scenario where Potentially Unwanted Programs (PUPs) drop both benign DLLs and additional PUPs.

In the graph, the file `AddonsUI.exe` with SHA2 `5CD12...` is identified as PUP Bubbledock. This file drops two other PUPs: `OneSystemCare.exe` with SHA2 `B9BEE...` (identified as PUP OneSystemCare) and `7d27aa...exe` with SHA2 `6307C...` (identified as Adware ConvertAd). Additionally, it drops three benign DLLs: `WmiInspector.dll` with SHA2 `A9347...`, `nsdialogs.dll` with SHA2 `1DEC2...`, and `HttpRequest.dll` with SHA2 `97CE1...`.

Despite these DLLs being legitimate (likely dropped as part of the dependencies used by `AddonsUI.exe`), they are incorrectly classified as malicious due to the overwhelming evidence surrounding them. Our study shows that benign files marked as malicious by Marmite do not change quickly over time, and thus can be prevented by applying a static blacklist.

#### 7.2 Legitimate Content Delivery Networks Used for Malware Distribution
Figure 7 illustrates another typical false positive case by Marmite. The IP address `23.77.202.16` serves four different URLs from various domains, including an Apple domain. Upon inspection, we found that this IP address belongs to Akamai, a well-established content delivery network (CDN) that serves between 15% and 30% of all web traffic.

The URLs `http://files4.fastdownload6.com/dl-pure/...` and `http://download.cdn.sharelive.net/cdn/...` host several malicious files/PUPs (shown as red blocks in Figure 7). For instance, `iLividSetup-r612-n-bc.exe` is identified as the Bandoo adware, and `update 33.exe` is identified as PUP DownloadAdmin. When Marmite runs, the malicious reputation of these files propagates to `AppleSoftwareUpdate.msi` and `iTunes.msi`, which are then wrongly detected as malware.

The issue here is that the CDN is serving both benign and malicious content. In Section 8, we discuss potential solutions to reduce the false positive rate of Marmite in such scenarios.

#### 7.3 Detailed Malware Distribution Case Study
In this section, we present a detailed case study of malware distribution. Figure 8 shows part of a download graph built by Marmite on January 11, 2016. Nodes connected by dashed lines are verified to be benign sites, while nodes connected with solid lines are the focus of our discussion.

Three IP addresses, belonging to GoDaddy.com, Arvixe, and Beyond Hosting, were involved. Before running Marmite, the files `BridgectrlSpl.dll` with SHA2 `1F771...` and `2653992.exe` with SHA2 `D6D45...` were known to belong to the Razy and Diple malware families, respectively. All other files had unknown reputations.

After running Marmite, the remaining files were identified as malicious (as shown in Figure 9) and confirmed by VirusTotal, either on the same day (`7456933.exe`) or several days later (`4393841.exe`, `5315672.exe`, `5315671.exe`, and `kinnect.dll`). Notably, `7456931.exe` with SHA2 `A8CF2...` remains unknown to VirusTotal at the time of writing.

The identified malware samples belong to four different families: Radamcrypt, Kovter, Zusy, and Kazy. We collect the tags used by different vendors, remove general words like "trojan," "backdoor," and "malware," and choose the most frequent token as the malware family name. Adding the two malware samples provided as ground truth, these three sites dropped malware from six different families in a single day.

The URLs hosting these files share the same URL path pattern, such as `/counter/`. The files directly hosted by these URLs also share similar naming patterns, typically consisting of a seven-digit filename. This suggests that these sites were part of an exploit kit deployment.

#### 7.4 Combined Malware and PUP Operation
This section examines a case study demonstrating that Marmite's label propagation can detect PUPs starting from malware labels. This case study shows that operations involving both malware and PUPs exist, although recent research indicates they are rare [17].

Figure 10 shows part of a download graph built by Marmite on June 1, 2016. Before running Marmite, the files `N1NBGXOOKAQD.EXE` with SHA2 `20749...`, `YhLGsb1eNlqf.exe` with SHA2 `D1AFB...`, and `coi1.exe` with SHA2 `63B2A...` were known to belong to the Kryptik, SelfDel, and Trojan.Skeeyah malware families, respectively. All other files had unknown reputations.

After running Marmite, the files `EITVU...` with SHA2 `E413D...` and `ts 10051.exe` with SHA2 `D530D...` were detected as malicious. These files were further identified as PUP by VirusTotal, specifically as PUP.SearchGo and PUP.Neobar.

As noted in [17], there is a fundamental difference between malware distribution and PUP, as malware is often delivered through drive-by downloads, while users actively install PUPs through deception. This case is particularly interesting because it shows that the malicious group delivers both PUPs and malware via the same infrastructure.

### Discussion

#### Practical Deployments of Marmite
We demonstrated that Marmite can efficiently increase the knowledge of malware samples, identifying malware undetected by VirusTotal months after it was observed in the wild. Marmite can be used by security companies to improve their internal knowledge of millions of malicious files collected daily. The generated blacklists can be integrated with existing end-user protection programs, such as antivirus tools and browser blacklists [28].

#### Limitations
While Marmite is a useful tool for detecting malicious files, it has some limitations. First, Marmite relies on an initial set of labeled nodes to infer the probabilistic labels of other unlabeled nodes in the download graph. A minimal number of labeled nodes is required for effectiveness, which may be a challenge in some settings. Additionally, Marmite only infers probabilistic labels of unlabeled nodes and does not update the labels of seed nodes during the inference process. This is generally not a problem since AV vendors are conservative in assigning labels, but it is a limitation to consider.

#### Evasion
Marmite does not make assumptions about how malicious files are delivered or the structure of malware delivery networks. The only assumption is that cybercriminals either deliver the same file over different servers or reuse parts of their infrastructure to serve multiple malware samples. This design choice makes Marmite less prone to evasion than previous systems.

If Marmite is known to cybercriminals, they might try to evade it by compartmentalizing their infrastructures, serving a single malware sample with a unique SHA2 from each malicious server. While effective, this would make malware delivery more expensive and break the pay-per-install ecosystem. Another approach could be to drop more benign files with malicious binaries, causing Marmite to flag those benign files as malware. This would also make malware delivery more difficult due to increased payload size. Finally, malware operators could use CDNs exclusively to deliver malicious files, making them more visible to CDNs who could track and terminate their accounts.

### Related Work

#### Studying Malware Delivery Networks
In 2011, Caballero et al. [5] provided the first large-scale measurement of pay-per-install services in the wild, confirming that cybercriminals commonly use botnets (droppers) to deliver malicious payloads [33, 34]. In 2012, Grier et al. [8] studied exploit kits as an alternative way to distribute malware. Nelms et al. [24] proposed Webwitness, a system that automatically builds the sequence of events followed by users before downloading a malware sample.

More recently, researchers have studied the ecosystem of potentially unwanted software (PUP), including toolbars and adware. Thomas et al. [37] performed a systematic study of PUP and its prevalence, while Kotzias et al. [17] identified PUP publishers and their involvement in pay-per-install services.

#### Leveraging Malware Delivery Networks for Detection
Invernizzi et al. [11] proposed Nazca, a system to detect malware in large-scale networks. Nazca builds malware distribution networks using HTTP traffic data and trains a decision tree classifier to detect malicious candidates, reporting 70.59% precision and 100% recall. Marmite, on the other hand, prioritizes lowering the number of false detections and reports 93% true positive rate (TPR) with a 3.5% false positive rate (FPR).

Abu Rajab et al. [28] proposed CAMP, a content-agnostic malware detection system using reputation-based detection, reporting a TPR of 70% and FPR of around 2%. Marmite achieves a TPR of over 90% with a similar FPR. Rabharinia et al. [27] presented Mastino, a system that classifies behavioral characteristics of how malicious files are downloaded, achieving 95% TPR with 0.5% FPs. Marmite, without using contextual information, still effectively detects malware six months after training, with 1.9% FPs for 93% TPR.

Nachenberg et al. [23] introduced Polonium, a system that builds bipartite graphs of files and machines, performing belief propagation to detect malware. Polonium reported a TPR of 84% and FPR of 1% over 2011 malware data, which aligns with Marmite's performance on 2016 malware data.

The closest work to this paper is [19], where the authors reconstructed and analyzed 19 million downloader graphs from 5 million real hosts, identifying strong indicators of malicious activity. They implemented a machine learning system using random forest for malware detection, achieving high TPR and low FPR. However, this system only considers local visibility for single hosts, whereas Marmite leverages a global view of malware delivery networks.

Marmite operates effectively without re-tuning even six months after parameter training. For a high-level comparison, [19] reports 98% TPR with 2% FPR using the full feature set, and 81% TPR with 21% FPR using only local download graph features. Marmite performs with 93% TPR and 1.9% FPR, showcasing its robustness and effectiveness.