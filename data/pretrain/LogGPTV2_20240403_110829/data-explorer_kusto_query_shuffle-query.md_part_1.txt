---
title:  Shuffle query
description: This article describes Shuffle query in Azure Data Explorer.
ms.reviewer: alexans
ms.topic: reference
ms.date: 05/01/2023
---
# shuffle query
The `shuffle` query is a semantic-preserving transformation used with a set of operators that support the `shuffle` strategy. Depending on the data involved, querying with the `shuffle` strategy can yield better performance. It's better to use the shuffle query strategy when the `shuffle` key (a `join` key, `summarize` key, `make-series` key or `partition` key) has a high cardinality and the regular operator query hits query limits.
You can use the following operators with the shuffle command:
* [join](join-operator.md)
* [summarize](summarize-operator.md)
* [make-series](make-series-operator.md)
* [partition](partition-operator.md)
To use the `shuffle` query strategy, add the expression `hint.strategy = shuffle` or `hint.shufflekey = `. When you use `hint.strategy=shuffle`, the operator data will be shuffled by all the keys. Use this expression when the compound key is unique but each key isn't unique enough, so you'll shuffle the data using all the keys of the shuffled operator.
When partitioning data with the shuffle strategy, the data load is shared on all cluster nodes. Each node processes one partition of the data. The default number of partitions is equal to the number of cluster nodes.
The partition number can be overridden by using the syntax `hint.num_partitions = total_partitions`, which will control the number of partitions. This is useful when the cluster has a small number of cluster nodes and the default partitions number will be small, and the query fails or takes a long execution time.
> [!NOTE]
> Using many partitions may consume more cluster resources and degrade performance. Choose the partition number carefully by starting with the `hint.strategy = shuffle` and start increasing the partitions gradually.
In some cases, the `hint.strategy = shuffle` is ignored, and the query won't run in `shuffle` strategy. This can happen when:
* The `join` operator has another `shuffle`-compatible operator (`join`, `summarize`, `make-series` or `partition`) on the left side or the right side.
* The `summarize` operator appears after another `shuffle`-compatible operator (`join`, `summarize`, `make-series` or `partition`) in the query.
## Syntax
### With `hint.strategy` = `shuffle`
*T* `|` *DataExpression* `|` `join`  `hint.strategy` = `shuffle` `(` *DataExpression* `)`
*T* `|` `summarize` `hint.strategy` = `shuffle` *DataExpression*
*T* `|` *Query* `|` partition `hint.strategy` = `shuffle`  `(` *SubQuery* `)`
### With `hint.shufflekey` = *key*
*T* `|` *DataExpression* `|` `join`  `hint.shufflekey` = *key* `(` *DataExpression* `)`
*T* `|` `summarize` `hint.shufflekey` = *key* *DataExpression*
*T* `|` `make-series` `hint.shufflekey` = *key* *DataExpression*
*T* `|` *Query* `|` partition  `hint.shufflekey` = *key* `(` *SubQuery* `)`
[!INCLUDE [syntax-conventions-note](../../includes/syntax-conventions-note.md)]
## Parameters
| Name | Type | Required | Description |
|--|--|--|--|
| *T* | `string` |  :heavy_check_mark: | The tabular source whose data is to be processed by the operator.|
| *DataExpression*| `string` | | An implicit or explicit tabular transformation expression.|
| *Query* | `string` | | A transformation expression run on the records of *T*.|
| *key*| `string` | | Use a `join` key, `summarize` key, `make-series` key or `partition` key.|
| *SubQuery*| `string` | | A transformation expression.|
> [!NOTE]
> Either *DataExpression* or *Query* must be specified depending on the chosen syntax.
## Examples
## Use summarize with shuffle
The `shuffle` strategy query with `summarize` operator shares the load on all cluster nodes, where each node processes one partition of the data.
> [!div class="nextstepaction"]
> Run the query
```kusto
StormEvents
| summarize hint.strategy = shuffle count(), avg(InjuriesIndirect) by State
| count 
```
**Output**
|Count|
|---|
|67|
## Use join with shuffle
> [!div class="nextstepaction"]
> Run the query
```kusto
StormEvents
| where State has "West"
| where EventType has "Flood"
| join hint.strategy=shuffle 
    (
    StormEvents
    | where EventType has "Hail"
    | project EpisodeId, State, DamageProperty
    )
    on State
| count
```
**Output**
|Count|
|---|
|103|
## Use make-series with shuffle
> [!div class="nextstepaction"]
> Run the query
```kusto
StormEvents
| where State has "North"
| make-series hint.shufflekey = State sum(DamageProperty) default = 0 on StartTime in range(datetime(2007-01-01 00:00:00.0000000), datetime(2007-01-31 23:59:00.0000000), 15d) by State
```
**Output**
|State|sum_DamageProperty|StartTime|
|---|---|---|---|
|NORTH DAKOTA|[60000,0,0]|["2006-12-31T00:00:00.0000000Z","2007-01-15T00:00:00.0000000Z","2007-01-30T00:00:00.0000000Z"]|
|NORTH CAROLINA|[20000,0,1000]|["2006-12-31T00:00:00.0000000Z","2007-01-15T00:00:00.0000000Z","2007-01-30T00:00:00.0000000Z"]|
|ATLANTIC NORTH|[0,0,0]|["2006-12-31T00:00:00.0000000Z","2007-01-15T00:00:00.0000000Z","2007-01-30T00:00:00.0000000Z"]|
### Use partition with shuffle
> [!div class="nextstepaction"]
> Run the query
```kusto
StormEvents
| partition hint.strategy=shuffle by EpisodeId
(
    top 3 by DamageProperty
    | project EpisodeId, State, DamageProperty
)
| count
```
**Output**
|Count|
|---|
|22345|
### Compare hint.strategy=shuffle and hint.shufflekey=key
When you use `hint.strategy=shuffle`, the shuffled operator will be shuffled by all the keys. In the following example, the query shuffles the data using both `EpisodeId` and `EventId` as keys:
> [!div class="nextstepaction"]
> Run the query
```kusto
StormEvents
| where StartTime > datetime(2007-01-01 00:00:00.0000000)
| join kind = inner hint.strategy=shuffle (StormEvents | where DamageCrops > 62000000) on EpisodeId, EventId
| count
```
**Output**
|Count|
|---|
|14|