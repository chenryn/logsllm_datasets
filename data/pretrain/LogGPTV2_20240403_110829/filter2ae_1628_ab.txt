    // ...
**所有权维护的缺失**
* * *
前面，我们已经考察了用于设置过滤程序的相关代码，现在，让我们来看看使用过滤程序的那些代码。当进程针对有效的bpf设备调用write()系统调用时，系统就会调用函数bpfwrite()。这一点，可以从bpf的cdevsw结构的函数表看出来：
    static struct cdevsw bpf_cdevsw = {
        .d_version =    D_VERSION,
        .d_open =       bpfopen,
        .d_read =       bpfread,
        .d_write =      bpfwrite,
        .d_ioctl =      bpfioctl,
        .d_poll =       bpfpoll,
        .d_name =       "bpf",
        .d_kqfilter =   bpfkqfilter,
    };
用户可以通过bpfwrite()函数将数据包写入接口。并且，对于传递给bpfwrite()函数的所有数据包，都需要接受为该接口设置的写入过滤程序的相应检查。而该过滤程序则是通过IOCTL进行设置的，具体详情请见下文。
首先，该过滤程序会进行权限检查（在这里用处不大，因为在PS4上，任何不受信任的进程都可以成功执行写操作，毕竟所有人都有读写该设备的权限），并在调用bpf_movein()之前设置一些缓冲区。
    bzero(&dst, sizeof(dst));
    m = NULL;
    hlen = 0;
    error = bpf_movein(uio, (int)d->bd_bif->bif_dlt, ifp, &m, &dst, &hlen, d->bd_wfilter);
    if (error) {
        d->bd_wdcount++;
        return (error);
    }
    d->bd_wfcount++;
下面，我们再来看看bpf_movein()函数。
    *mp = m;
    if (m->m_len k的值，从而可以在堆栈上实现溢出攻击了。
**释放过滤程序**
* * *
我们需要这样一个函数，要求它在运行的过程中触发UAF漏洞的，同时，还能够利用另一个线程释放该过滤程序。为此，可以查看bpf_setf()函数的代码，请注意，在为过滤程序指令分配新缓冲区之前，该函数首先会检查是否存在旧的缓冲区——如果存在则会将其销毁。
    static int bpf_setf(struct bpf_d *d, struct bpf_program *fp, u_long cmd) {
        struct bpf_insn *fcode, *old;
        // ...
        if (cmd == BIOCSETWF) {
            old = d->bd_wfilter;
            wfilter = 1;
            // ...
        } else {
            wfilter = 0;
            old = d->bd_rfilter;
            // ...
        }
        // ...
        if (old != NULL)
            free((caddr_t)old, M_BPF);
        // ...
        fcode = (struct bpf_insn *)malloc(size, M_BPF, M_WAITOK);
        // ...
        if (wfilter)
            d->bd_wfilter = fcode;
        else {
            d->bd_rfilter = fcode;
            // ...
            if (cmd == BIOCSETF)
                reset_d(d);
            }
        }
        // ...
    }
因为bpf_filter()复制了一份d->bd_wfilter，所以，当在一个线程中为替换该过滤程序而调用free()函数释放其空间后，第二个线程还在使用相同的指针(现在已经调用过free()函数了)，从而导致UAF漏洞。因此，试图设置无效过滤程序的线程实际上在进行堆喷射，并最终分配到相同的地址。我们的三个线程将执行以下操作:
  * 不断地设置含有有效指令的过滤程序，并可以通过验证检查。
  * 不断地设置含有用无效指令的另一个过滤程序，释放旧指令内存空间并用新指令（我们的恶意指令）替换旧指令。
  * 不断地对bpf结构执行写操作。最终，“有效”过滤程序将被无效的过滤程序所破坏，但是这个过程是在过滤程序经过验证检查后发生的，所以write()使用它时就会出现内存损坏错误。通过精心制作的指令，可以覆盖堆栈上的返回地址，这样就能够控制内核模式下的代码执行流程了。
**小结**
* * *
在本文的上篇中，我们介绍了竞争条件的概念，以及数据包过滤程序的相关知识。同时，还介绍了引发竞争条件方法，以及如何替换经过验证的数据的准备知识，在下篇中，我们将为读者进一步介绍利用该内核漏洞的详细方法。