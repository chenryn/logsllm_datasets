yes
no
yes
yes
yes
yes
yes
Table 2: Eﬀectiveness of sandboxing environments.
from tElock, the CERT-LEXSI sample, Armadillo, Obsid-
ium, and Themida because it does not rely on correct CPU
emulation, and instead utilizes native hardware for instruc-
tion execution. Ether was also able to trace the PCPri-
vacyTool and our synthetic QEMU detection sample with-
out issue. Since it is inherently impossible to ensure the
equivalence of an emulated processor to a real processor,
more emulation inconsistencies are likely present in QEMU.
Therefore, as an alternative to QEMU, we propose the use
of hardware virtualization-based approaches such as Ether.
5.2 Coarse-Grained Tracing: System Calls
In contrast to automated unpacking, system call tracing
represents a more coarse-grained type of tracing, wherein
discrete system calls represent easily identiﬁable actions such
as ﬁle and registry access, process and thread creation, and
network activity. System call behavior is useful to malware
analysis because it can be used to identify malware startup
mechanisms, command and control channels, and access to
or theft of sensitive information. To evaluate Ether’s ability
to perform coarse-grained tracing, we created EtherTrace,
a tool for tracing Windows native API functions, which are
the Windows equivalent of Unix system calls.
5.2.1 Effectiveness
To assess the completeness of EtherTrace’s functionality
we created a synthetic sample that performs a set of ﬁle and
registry operations. These operations were chosen because
of their direct mapping to the Windows native API; that
is, they could be used to easily conﬁrm EtherTrace’s ability
to perform successful tracing. To determine how EtherTrace
would perform against modern malware, we packed our syn-
thetic sample with the 15 most popular obfuscation tools
identiﬁed from our malware survey. We compared Ether-
Trace against Anubis and Norman Sandbox; the results ap-
pear in Table 2.
To conﬁrm that EtherTrace successfully traced a given
sample, we ran the sample in the guest and inspected the
trace logs that were generated. For testing Anubis and Nor-
man Sandbox, we uploaded the samples to their web sub-
mission forms and examined the output. In examining the
Benchmark
HTMLRender
FileDecrypt
HDD
TextEdit
Image
FileCompress
FileEncrypt
VirusScan
MemLatency
RARTime
Untraced
0.97 pg/s
64.87 MB/s
11.34 MB/s
68.83 pg/s
Traced
0.62 pg/s
64.09 MB/s
8.14 MB/s
19.37 pg/s
14.86 MPix/s
14.69 MPix/s
2.7 MB/s
16.07 MB/s
11.14 MB/s
7.75 MAcc/s
40.87 s
2.66 MB/s
15.53 MB/s
11.09 MB/s
3.12 MAcc/s
45.29 s
Change
35.95%
1.19%
28.29%
71.86%
1.12%
1.67%
3.39%
0.41%
59.8%
10.81%
Table 3: Performance of EtherTrace on application
benchmarks.
results, all samples performed either all or none of the ex-
pected ﬁle and registry operations.
The results indicate once again that Armadillo, which
is quite popular in current malware, provides strong anti-
analysis protections and detected both Anubis and Norman
Sandbox. Besides Armadillo, Anubis failed to trace tElock,
which crashed after reporting failure of an internal CRC
check. Reasons why Anubis failed to trace ASProtect or
why Norman Sandbox failed to trace yoda’s Protector are
unclear.
In contrast to both Anubis and Norman, Ether-
Trace successfully traced all samples.
5.2.2 Performance
As a ﬁnal experiment, we measured the performance of
EtherTrace’s system call tracing where return values are not
needed. This type of tracing can serve as input to a wide
variety of applications, ranging from host based intrusion
detection systems to ﬁle and registry access monitors. To
perform our tests, we selected two tools: PCMark ’05, an
industry standard benchmarking application and WinRAR
3.71. Using PCMark ’05, we performed a standard series of
tests provided by the application. To test using WinRAR,
we compressed every ﬁle in the Program Files directory of
a default Windows XP installation; we selected this bench-
mark due to its mix of system calls, I/O, and CPU Utiliza-
tion. The results of testing appear in Table 3.
Tracing, as expected, adds extra latency to system calls.
Benchmarks which are sensitive to latency, such as web
browsing, incur a higher performance penalty. However, the
majority of this latency is due to notiﬁcation of the Ether
userspace component; a full in-hypervisor implementation
would have much lower latencies. In addition, even in the
current implementation, system calls which require I/O ac-
cess are relatively unaﬀected by the extra latency.
6. CONCLUSION
In this paper we have presented Ether, a transparent and
external malware analyzer that is based on hardware virtu-
alization extensions such as Intel VT. Ether does not induce
any unconditionally detectable side-eﬀects by completely re-
siding outside of the target OS environment. As a result,
malware cannot detect the presence of Ether. In our experi-
ments, we evaluated Ether and several other state-of-the-art
analyzers on the obfuscation techniques used to obfuscate
25,000 recent malware samples. The results show that Ether
remains transparent and defeats the obfuscation tools that
evade the existing approaches.
In future work, we will focus on improving resistance to
timing attacks and memory hierarchy detection attacks.
7. ACKNOWLEDGMENTS
The authors would like to thank Jonathon Giﬃn and Jon
Larimer their insightful feedback. Additional thanks go to
Robert Edmonds for his assistance in performing the mal-
ware survey and CERT-LEXSI for providing us with the
in-the-wild malware sample that checks for the presence of
emulated hardware.
This material is based upon work supported in part by
the National Science Foundation under Grant No. 0716570
and the Department of Homeland Security under Contract
No. FA8750-08-2-0141. Any opinions, ﬁndings, and con-
clusions or recommendations expressed in this material are
those of the authors and do not necessarily reﬂect the views
of the National Science Foundation and the Department of
Homeland Security.
8. REFERENCES
[1] Anubis: Analyzing Unknown Binaries.
http://anubis.seclab.tuwien.ac.at.
[2] Armadillo. http://www.siliconrealms.com.
[3] BitBlaze Binary Analysis Platform.
http://bitblaze.cs.berkeley.edu.
[4] DYNINST API. http://www.dyninst.org.
[5] FileMon for Windows. http://technet.microsoft
.com/en-us/sysinternals/bb896642.aspx.
[6] Intel Virtualization Technology.
http://www.intel.com/technology/virtualization.
[7] PEiD. http://www.peid.info.
[8] PEiDSO.
http://handlers.sans.org/jclausing/userdb.txt.
[9] RegMon for Windows. http://technet.microsoft
.com/en-us/sysinternals/bb896652.aspx.
[10] Themida. http://www.oreans.com/themida.php.
[11] VirtualPC. http://www.microsoft.com/windows/
products/winfamily/virtualpc/.
[12] VMWare. http://www.vmware.com.
[13] Norman Sandbox Whitepaper. http://www.norman
.com/documents/wp sandbox.pdf, 2003.
[14] AMD64 Architecture Programmer’s Manual, Volume
2: System Programming, 2007.
[15] TEMU: The BitBlaze Dynamic Analysis Component.
http://bitblaze.cs.berkeley.edu/temu.html, 2007.
[16] P. Bacher, T. Holz, M. Kotter, and G. Wicherski.
Know your enemy: Tracking botnets.
http://www.honeynet.org/papers/bots, 2005.
[17] M. Bailey, J. Oberheide, J. Andersen, Z. M. Mao,
F. Jahanian, and J. Nazario. Automated Classiﬁcation
and Analysis of Internet Malware. In RAID, 2007.
[18] P. Barham, B. Dragovic, K. Fraser, S. Hand,
T. Harris, A. Ho, R. Neugebauer, I. Pratt, and
A. Warﬁeld. Xen and the Art of Virtualization. In
SOSP, pages 164–177, 2003.
[19] U. Bayer, C. Kruegel, and E. Kirda. TTanalyze: A
Tool for Analyzing Malware. In EICAR, pages
180–192, 2006.
[20] F. Bellard. QEMU, a Fast and Portable Dynamic
Translator. In ATEC, pages 41–41, 2005.
[21] M. Bishop. Computer Security: Art and Science.
[42] P. Szor. The Art of Computer Virus Research and
Addison-Wesley Professional, 2003.
Defense. Addison-Wesley Professional, 2005.
[22] K. Borders, X. Zhao, and A. Prakash. Siren: Catching
[43] A. Vasudevan and R. Yerraballi. Stealth Breakpoints.
Evasive Malware (Short Paper). In S&P (Oakland),
pages 78–85, 2006.
[23] J. Caballero, H. Yin, Z. Liang, and D. Song. Polyglot:
Automatic Extraction of Protocol Message Format
using Dynamic Binary Analysis. In CCS, 2007.
[24] M. Christodorescu, S. Jha, S. A. Seshia, D. Song, and
R. E. Bryant. Semantics-Aware Malware Detection. In
S&P (Oakland), pages 32–46, 2005.
[25] M. Christodorescu, C. Kruegel, and S. Jha. Mining
Speciﬁcations of Malicious Behavior. In ESEC/FSE,
pages 5–14, 2007.
[26] P. Ferrie. Attacks on Virtual Machine Emulators.
Symantec Advanced Threat Research, 2006.
[27] P. Ferrie. Attacks on More Virtual Machines.
http://pferrie.tripod.com/papers/attacks2.pdf, 2007.
[28] T. Garﬁnkel and M. Rosenblum. A Virtual Machine
Introspection Based Architecture for Intrusion
Detection. In NDSS, 2003.
[29] G. Hunt and D. Brubacher. Detours: Binary
Interception of Win32 Functions. In WINSYM, pages
135–143, 1999.
[30] X. Jiang, X. Wang, and D. Xu. Stealthy Malware
Detection Through VMM-Based ”Out-of-the-Box”
Semantic View Reconstruction. In CCS, pages
128–138, 2007.
[31] X. Jiang, D. Xu, H. J. Wang, and E. H. Spaﬀord.
Virtual Playgrounds for Worm Behavior Investigation.
In RAID, pages 1–21, 2005.
[32] M. G. Kang, P. Poosankam, and H. Yin. Renovo: A
Hidden Code Extractor for Packed Executables. In
WORM, 2007.
[33] C. Kruegel, W. Robertson, and G. Vigna. Detecting
Kernel-Level Rootkits Through Binary Analysis. In
ACSAC, pages 91–100, 2004.
[34] L. Martignoni, M. Christodorescu, and S. Jha.
OmniUnpack: Fast, Generic, and Safe Unpacking of
Malware. In ACSAC, pages 431–441, 2007.
[35] F. Perigaud. New Pill? http://cert.lexsi.com/weblog/
index.php/2008/03/21/223-new-pill, 2008.
In ACSAC, pages 381–392, 2005.
[44] A. Vasudevan and R. Yerraballi. Cobra: Fine-grained
Malware Analysis using Stealth Localized-executions.
In S&P (Oakland), pages 264–279, 2006.
[45] C. Wang and S. Ju. The Dilemma of Covert Channels
Searching. In ICISC, pages 169–174, 2005.
[46] Y.-M. Wang, D. Beck, X. Jiang, R. Roussev,
C. Verbowski, S. Chen, and S. T. King. Automated
Web Patrol with Strider HoneyMonkeys: Finding Web
Sites That Exploit Browser Vulnerabilities. In NDSS,
2006.
[47] C. Willems, T. Holz, and F. Freiling. Toward
Automated Dynamic Malware Analysis Using
CWSandbox. IEEE Security and Privacy, 5(2), 2007.
[48] H. Yin, D. Song, M. Egele, C. Kruegel, and E. Kirda.
Panorama: Capturing system-wide information ﬂow
for malware detection and analysis. In CCS, 2007.
APPENDIX
A. QEMU DETECTION CODE
#include 
#include 
#include 
int seh handler(
struct EXCEPTION RECORD ∗exception record,
void ∗established frame,
struct CONTEXT ∗context recorcd,
void ∗dispatcher context)
{
}
printf("Not QEMU!\n");
exit(0);
int main(int argc, char ∗argv[])
{
uint32 t handler = (uint32 t)seh handler;
[36] N. Provos and T. Holz. Virtual Honeypots: From
printf("Attempting detection\n");
Botnet Tracking to Intrusion Detection.
Addison-Wesley Professional, Reading, 2007.
[37] T. Ptacek. Side-Channel Detection Attacks Against
Unauthorized Hypervisors.
http://www.matasano.com/log/930/side-channel-
detection-attacks-against-unauthorized-hypervisors/,
2007.
[38] D. Quist and Valsmith. Covert Debugging:
Circumventing Software Armoring. In Black Hat USA,
2007.
[39] T. Raﬀetseder, C. Kruegel, and E. Kirda. Detecting
System Emulators. In ISC, pages 1–18, 2007.
[40] P. Royal, M. Halpin, D. Dagon, R. Edmonds, and
W. Lee. PolyUnpack: Automating the Hidden-Code
Extraction of Unpack-Executing Malware. In ACSAC,
pages 289–300, 2006.
[41] M. Sipser. Introduction to the Theory of Computation.
International Thomson Publishing, 1996.
asm("movl %0, %%eax\n\t"
"pushl %%eax\n\t"::
"r" (handler): "%eax");
asm("pushl %fs:0\n\t"
"movl %esp, %fs:0\n\t");
asm(".byte 0xf3,0xf3,0xf3,0xf3,0xf3,0xf3,"
"0xf3,0xf3,0xf3,0xf3,0xf3,0xf3,"
"0xf3,0xf3,0xf3,0x90");
asm("movl %esp, %eax");
asm("movl %eax, %fs:0");
asm("addl $8, %esp");
printf("QEMU Detected!\n");
return EXIT SUCCESS;
}