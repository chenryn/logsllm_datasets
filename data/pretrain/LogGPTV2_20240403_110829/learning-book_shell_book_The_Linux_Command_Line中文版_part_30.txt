来表示标准输入/输出的惯例，也被大量的其它程序使用）。这个-file-from选项（也可以用
-T来指定）导致tar命令从一个文件而不是命令行来读入它的路径名列表。最后，这个由tar
命令产生的归档文件被管道到gzip 命令中，然后创建了压缩归档文件playground.tgz。此.tgz
扩展名是命名由gzip压缩的tar文件的常规扩展名。有时候也会使用.tar.gz这个扩展名。
虽然我们使用gzip程序来制作我们的压缩归档文件，但是现在的GUN版本的tar命令，
gzip和bzip2压缩两者都直接支持。各自使用z和j选项。以我们之前的例子为基础，我们可
以这样简化它：
[ne@linuxbox -]$ find playground -nane ‘file-A′ I tar czf playground.tgz -T -
如果我们本要创建一个由bzip2压缩的归档文件，我们可以这样做：
[nellinuxbox -]$ find playground =nane *file-A’ I tar cjf playgzround.tbz -T -
通过简单地修改压缩选项，把z改为j（并且把输出文件的扩展名改为.tbz，来指示一个
bzip2压缩文件），就使bzip2命令压缩生效了。另一个tar命令与标准输入和输出的有趣使用
涉及到在系统之间经过网络传输文件。假定我们有两台机器，每台都运行着类Unix，且装备着
tar和ssh工具的操作系统。在这种情景下，我们可以把一个目录从远端系统（名为remote-sys
传输到我们的本地系统中：
[ne@linuxbox -]$ mkdir renote-stuff
[neglinuzbox -]$ cd renote-stuff
 1 - x,  ]
pzonssed s sfs-opouoaou
[ne@linuxbox renote-stuff]s 1s
Docunents
这里我们能够从远端系统remote-sys中复制目录Documents到本地系统名为remote-stuff
目录中。我们怎样做的呢？首先，通过使用ssh命令在远端系统中启动tar程序。你可记得ssh
允许我们在远程联网的计算机上执行程序，并且在本地系统中看到执行结果一远端系统中产
生的输出结果被发送到本地系统中查看。我们可以利用。在本地系统中，我们执行tar命令，
241
---
## Page 243
19.2.2zip
这个zip程序既是压缩工具，也是一个打包工具。这程序使用的文件格式，Windows用户比较
熟悉，因为它读取和写入.zip文件。然而，在Linux中gzip是主要的压缩程序，而bzip2则位
居第二。
在zip命令最基本的使用中，可以这样唤醒zip命令：
zip options zipfile file...
例如，制作一个playground 的zip版本的文件包，这样做：
punox8Kerd drz pumox8Kerd x dtz s[- zoqznustoou]
除非我们包含-r选项，要不然只有playground目录（没有任何它的内容）被存储。虽然会
自动添加.zip扩展名，但为了清晰起见，我们还是包含文件扩展名。
在创建zip版本的文件包时，zip命令通常会显示一系列的信息：
adding: playground/dir-020/fi1e-Z (stored 0%)
adding: playground/dir-020/file-Y (stored 0%)
adding: playgzound/dir-020/fi1eI (stored 0%)
adding: playgzound/dir-087/ (stored 0%)
adding: playground/dir=087/fi1e=S (stored 0%)
这些信息显示了添加到文件包中每个文件的状态。zip命令会使用两种存储方法之一，来添
加文件到文件包中：要不它会“store”没有压缩的文件，正如这里所示，或者它会“deHlate”文
件，执行压缩操作。在存储方法之后显示的数值表明了压缩量。因为我们的playground目录
只是包含空文件，没有对它的内容执行压缩操作。
使用unzip程序，来直接抽取一个zip文件的内容。
[ne@linuxbox -]$ cd foo
[ne@linuxbox foo]$ unzip -./playground.zip
242
---
## Page 244
对于zip命令（与tar命令相反）要注意一点，就是如果指定了一个已经存在的文件包，其
被更新而不是被替代。这意味着会保留此文件包，但是会添加新文件，同时替换匹配的文件。
可以列出文件或者有选择地从一个zip文件包中抽取文件，只要给unzip命令指定文件名：
Z-os//8-zrp/punox8fetd drzpumox8ed t- dtzun s[- xoqxnustgou]
Archive:  ./playground .zip
Length
Date
Tine
Nane
10-05-08 09:25playgzound/dir-87/fi1e-2
0
1 file
[neglinuxbox -]$ cd foo
[ne@linuxbox foo]$ unzip - /playground.zip playgzound/dir-87/file-Z
Archive: .  /playground.zip
replace playgzound/dir-87/file2? [y]es, [a]o, [A]ll, [N]one,
[x]enase: y
extracting: playground/dir-87/fi1e-Z
使用-1选项，导致unzip命令只是列出文件包中的内容而没有抽取文件。如果没有指定文
件，unzip程序将会列出文件包中的所有文件。添加这个-v选项会增加列表的冗余信息。注意
当抽取的文件与已经存在的文件冲突时，会在替代此文件之前提醒用户。
像tar命令一样，zip命令能够利用标准输入和输出，虽然它的实施不大有用。通过-@选
项，有可能把一系列的文件名管道到zip命令。
[neglinuxbox foo]$ cd
dzy- -dz 1 -oy, oueu- puoxed pu s[- xoqxnuou]
这里我们使用find命令产生一系列与“file-A”相匹配的文件列表，并且把此列表管道到
zip 命令，然后创建包含所选文件的文件包file-A.zip。
zip命令也支持把它的输出写入到标准输出，但是它的使用是有限的，因为很少的程序能利
用输出。不幸地是，这个unzip程序，不接受标准输入。这就阻正了zip和unzip一块使用
像tar命令那样，来复制网络上的文件。
然而，zip命令可以接受标准输入，所以它可以被用来压缩其它程序的输出：
243
---
## Page 245
z- dz1// s[xoqxou]
adding: - (deflated 80%)
在这个例子里，我们把ls命令的输出管道到zip命令。像tar命令，zip命令把末尾的横杠
解释为“使用标准输入作为输入文件”
这个unzip程序允许它的输出发送到标准输出，当指定了-p选项之后
sso 1 dtzso-st d- dzum s[-xoqxnusoou]
我们讨论了一些zip/umzip可以完成的基本操作。它们两个都有许多选项，其增加了命令的
灵活性，虽然一些选项只针对于特定的平台°zip和unzip命令的说明手册都相当不错，并且
包含了有用的实例。然而，这些程序的主要用途是为了和Windows系统交换文件，而不是在
Linux系统中执行压缩和打包操作，tar和gzip程序在Linux系统中更受欢迎。
19.3同步文件和目录
维护系统备份的常见策略是保持一个或多个目录与另一个本地系统（通常是某种可移动的存储
设备）或者远端系统中的目录（或多个目录）同步。我们可能，例如有一个正在开发的网站的
本地备份，需要时不时的与远端网络服务器中的文件备份保持同步。在类Unix系统的世界里，
能完成此任务且备受人们喜爱的工具是rsync。这个程序能同步本地与远端的目录，通过使用
rsync远端更新协议，此协议允许rsync快速地检测两个目录的差异，执行最小量的复制来达
到目录间的同步。比起其它种类的复制程序，这就使rsync命令非常快速和高效。
rsync被这样唤醒：
rsync options source destination
这里source和destination 是下列选项之一：
·一个本地文件或目录
·一个远端文件或目录，以[user@]host:path的形式存在
244
---
## Page 246
一个远端rsync服务器，由rsync://[user@]host[：port]/path指定
注意source和destination两者之一必须是本地文件。rsync不支持远端到远端的复制
让我们试着对一些本地文件使用rsync命令。首先，清空我们的foo目录：
[ne@linuxbox -]$ rn -rf foo/*
下一步，我们将同步playground目录和它在foo目录中相对应的副本
oog pumox8fetd ae- sufsx s[- xoqxnustgou]
我们包括了-a选项（递归和保护文件属性）和-v选项（冗余输出），来在foo目录中制作一
个plavground目录的镜像。当这个命令执行的时候，我们将会看到一系列的文件和目录被复
制。在最后，我们将看到一条像这样的总结信息：
sent 135759 bytes received 57870 bytes 387258.00 bytes/sec
total size is 3230 speedup is 0.02
说明复制的数量。如果我们再次运行这个命令，我们将会看到不同的结果：
oog pumogfetd ae- sufex $[- xoqxnutyou]
building file list ... done
sent 22635 bytes received 20 bytes
total size is 3230 speedup is 0.14
45310.00 bytes/sec
注意到没有文件列表。这是因为rsync程序检测到在目录～/playground和～/foo/
playground之间不存在差异，因此它不需要复制任何数据。如果我们在playground目录中修
改一个文件，然后再次运行rsync命令：
245
---
## Page 247
[ne@linuxbox -]$ touch playground/dir-099/fileZ
[ne@linuxbox -]$ rsync -av playground foo
building file list -.. done
playground/dir-099/fi1e2
sent 22685 bytes received 42 bytes 45454.00 bytes/sec
我们看到rsync命令检测到更改，并且只是复制了更新的文件。作为一个实际的例子，让我
们考虑一个假想的外部硬盘，之前我们在tar命令中用到过的。如果我们再次把此硬盘连接到
我们的系统中，它被挂载到/media/BigDisk目录下，我们可以执行一个有用的系统备份了，首
先在外部硬盘上创建一个目录，名为/backup，然后使用rsync程序从我们的系统中复制最重要
的数据到此外部硬盘上：
[ne@linuxbox -]$ mkdir /media/BigDisk/backup
[ne@linuxbox -]$ sudo rsync -av --delete /etc /hone /usr/local /media/BigDisk/backup
在这个例子里，我们把/etc，/home，和/usr/local目录从我们的系统中复制到假想的存储
设备中。我们包含了-delete这个选项，来删除可能在备份设备中已经存在但却不再存在于源设
备中的文件，（这与我们第一次创建备份无关，但是会在随后的复制操作中有用途）。挂载外部
驱动器，运行rsync命令，不断重复这个过程，是一个不错的（虽然不理想）方式来保存少量
的系统备份文件。当然，别名会对这个操作更有帮助些。我们将会创建一个别名，并把它添加
到.bashrc文件中，来提供这个特性：
alias backup=′sudo rsync -av =-delete /etc /hone /usr/local /media/BigDisk/backup*
现在我们所做的事情就是连接外部驱动器，然后运行backup命令来完成工作。
19.3.1在网络间使用rsync命令
rsync程序的真正好处之一，是它可以被用来在网络间复制文件。毕竟，rsync中的“r”象征着
“remote”。远程复制可以通过两种方法完成。第一个方法要求另一个系统已经安装了rsync程
序，还安装了远程shell程序，比如ssh。比方说我们本地网络中的一个系统有大量可用的硬盘
246
---
## Page 248
空间，我们想要用远程系统来代替一个外部驱动器，来执行文件备份操作。假定远程系统中有
一个名为/backup的目录，其用来存放我们传送的文件，我们这样做：
[ne@linuxbox -]$ sudo rsync -av --delete --rsh=ssh /etc /hone /usr/local renote-sys:/backup
我们对命令做了两处修改，来方便网络间文件复制。首先，我们添加了--rsh=ssh选项，其
指示rsync使用ssh程序作为它的远程shell。以这种方式，我们就能够使用一个ssh加密通道，
把数据安全地传送到远程主机中。其次，通过在目标路径名前加上远端主机的名字（在这种情
况下，远端主机名为remote-sys），来指定远端主机。
rsync可以被用来在网络间同步文件的第二种方式是通过使用rsync服务器。rsync可以被
操作。例如，RedHat软件中心为它的Fedora发行版，维护着一个巨大的正在开发中的软件
包的仓库。对于软件测试人员，在发行周期的测试阶段，定期镜像这些软件集合是非常有帮助
的。因为仓库中的这些文件会频累地（通常每天不止一次）改动，定期同步本地镜像而不是大
量地拷贝软件仓库，这是更为明智的。这些软件库之一被维护在乔治亚理工大学；我们可以使
用本地rsync程序和它们的rsync服务器来镜像它。
[ne@linuxbox -]$ mkdir fedora-deve]
[ne@linuxbox -]$ rsync -av -delete rsync://rsync.gtlib.gatech.edu/fedora-linux
core/development/i386/os fedora-devel
在这个例子里，我们使用了远端rsync服务器的URI，其由协议（rsync://），远端主机名
（rsync.gtlib.gatech.edu），和软件仓库的路径名组成。
19.4拓展阅读
·在这里讨论的所有命令的手册文档都相当清楚明白，并且包含了有用的例子。另外，GNU
版本的tar命令有一个不错的在线文档。可以在下面链接处找到：
http:/www.gnu.org/software/tar/manual/index.html
247
---
## Page 249
20
正则表达式
接下来的几章中，我们将会看一下一些用来操作文本的工具。正如我们所见到的，在类Unix
的操作系统中，比如Linux中，文本数据起着举足轻重的作用。但是在我们能完全理解这些工
具提供的所有功能之前，我们不得不先看看，经常与这些工具的高级使用相关联的一门技术
一正则表达式。
我们已经浏览了许多由命令行提供的功能和工具，我们遇到了一些真正神秘的shell功能和
命令，比如shell展开和引用、键盘快捷键和命令历史，更不用说vi编辑器了。正则表达式延
续了这种“传统”，而且有可能（备受争议地）是这些“神秘功能”中最神秘的那个。这并不
是说花费时间来学习它们是不值得的，而是恰恰相反。虽然它们的全部价值可能不能立即显现，
但是较强理解这些功能使我们能够表演令人惊奇的技艺。什么是正则表达式？
简而言之，正则表达式是一种符号表示法，被用来识别文本模式。在某种程度上，它们与匹
配文件和路径名的shell通配符比较相似，但其规模更庞大。许多命令行工具和大多数的编程
语言都支持正则表达式，以此来帮助解决文本操作问题。然而，并不是所有的正则表达式都是
一样的，这就进一步混淆了事情；不同工具以及不同语言之间的正则表达式都略有差异。我们
将会限定POSIX标准中描述的正则表达式（其包括了大多数的命令行工具），供我们讨论，与
许多编程语言（最著名的Perl语言）相反，它们使用了更多和更丰富的符号集。
20.1 grep
我们将使用的主要程序是我们的老朋友，grep程序，它会用到正则表达式。实际上，“grep”这
个名字来自于短语“globalregular expression print”，所以我们能看出grep程序和正则表达式
有关联。本质上，grep程序会在文本文件中查找一个指定的正则表达式，并把匹配行输出到标
准输出。
到目前为止，我们已经使用grep程序查找了固定的字符申，就像这样：
[netlinuxbox -]$ 1s /usr/bin 1 grep zip
248
---
## Page 250
grep程序以这样的方式来接受选项和参数：
grep [options]regex [file..-]
这里的regex是指一个正则表达式。
这是一个常用的grep选项列表：
选项
描远
-i
忽略大小写。不会区分大小写字符。也可用-ignore-case来
指定。
-V
不匹配。通常，grep程序会打印包含匹配项的文本行。这
个选项导致grep程序只会打印不包含匹配项的文本行。也
可用--invert-match来指定。
打印匹配的数量（或者是不匹配的数目.若指定了-v选项），
而不是文本行本身。也可用--count选项来指定。
I-
打印包含匹配项的文件名，而不是文本行本身，也可用一
files-with-matches选项来指定。
-L
相似于-1选项，但是只是打印不包含匹配项的文件名。也可
用--files-without-match来指定。
-11
在每个匹配行之前打印出其位于文件中的相应行号。也可
用--line-number选项来指定。
应用于多文件搜索，不输出文件名。也可用--no-filename选
项来指定。
表20-1:grep选项
为了更好的探究grep程序，让我们创建一些文本文件来搜寻：
[nedlinuxbox -]$ ls /bin > dirlist-bin.txt
[nedlinuxbox -]$ ls /usr/bin > dirlist-usr-bin.txt
[nedlinuxbox -]$ ls /sbin > dirlist-sbin.txt
[neglinuzbox -]$ ls /usr/sbin > dirlist-usr-sbin.txt
[ne@linuxbox -]$ ls dirlist*,txt
249
---
## Page 251
dirlist-bin.txt
dirlist-sbin.txt
dirlist-usr-sbin.txt
dirlist-usr-bin.txt
我们能够对我们的文件列表执行简单的搜索，像这样：
[ne@linuxbox -]$ grep bzip dirlist*.txt
dirlist-bin.txt :bzip2
dirlist-bin.txt :bzip2recover
在这个例子里，grep程序在所有列出的文件中搜索字符串bzip，然后找到两个匹配项，其
都在文件dirlist-bin.txt中。如果我们只是对包含匹配项的文件列表，而不是对匹配项本身感兴
趣的话，我们可以指定-1选项：
[ne@linuxbox -]$ grep -1 bzip dirlist*,txt