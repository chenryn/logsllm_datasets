8Although it clearly needs to be mentioned that these are not immune against
attacks (cf. [62] for recent timing side-channels in TPMs.)
9Note that this can never be prevented by the core device and in practice it is
more likely that malware running on the helper device will use this approach to leak
private information about the user than breaking the actual cryptographic scheme.
of a credential at the helper, the core needs to be involved in order
to result in a valid showing of the credential and even a malicious
helper cannot succeed.
High-level overview of our CHAC approach. We are now ready
to provide a high-level overview of our core/helper anonymous
credentials (CHAC) approach (cf. Figure 1). Initially, the core gen-
erates a secret key 1○ which never leaves the core; the user can
now obtain multiple credentials from an issuer by 2○ sending a
request, which is then 3○ passed to the core (ensuring that core
needs to be involved in obtaining credentials) and after the issuing
4○ is finished, the credentials are stored at the helper 5○. For a
showing, the helper first triggers a request 6○, which is then passed
to the core 7○ (again ensuring that core needs to be involved). Then,
depending on the attributes that need to be selectively shown (all
other remain undisclosed) the helper can aggregate them from po-
tentially different credentials into a compact showing token 8○.
Note that while for certain applications (e.g., the core being a SIM
card in the smartphone) batching may not be so important, but if
we for instance consider a standalone NFC based smart card, the
communication between the core and the smartphone is limited
because of the way the user has to physically interface both devices.
Therefore some kind of batching (aggregation) is desirable, i.e., the
Figure 1: High-level overview of our approach.
helper device should be able to accumulate many showing tokens
for the core into a single compact one. Finally, the helper sends the
resulting showing token to the verifier 9○ who either accepts or
rejects. Showings can be performed with different verifiers and an
arbitrary number of times without the showings being linkable to
each other.
Previous work in the core/helper setting. In order to put our
CHAC approach into context, we will look at one well known ex-
ample for the core/helper setting. Namely, the direct anonymous
attestation (DAA) protocol [20, 22] designed for privacy-preserving
remote attestation of platforms. Here the core device is the Trusted
Platform Module (TPM), a specialized chip supporting DAA, and
the helper is a PC. Technically, DAA is not an AC system, but rather
a group signature scheme [34] (without the anonymity revocation
capability), but with a mechanism to detect rogue members and op-
tional linkability. It can be considered as the most widely deployed
protocol for anonymous authentication in practice10. Previously,
there have been informal discussions on how a TPM can be used to-
gether with CL-credentials in [21] as well as explicit constructions
10An enhanced DAA with revocation capabilities is called Enhanced Privacy ID
(EPID) [19] and revocation was later also adopted for existing DAA [22, 25]. EPID,
however, is not designed for the core/helper setting.
  Session 6D: Authentication and Privacy CCS ’21, November 15–19, 2021, Virtual Event, Republic of Korea2006Show (Core/Helper)
Scheme
[25] (DAA-A)
[22] (DAA-A)
[26] (DAA-A)a
CHAC
a This LRSW based DAA scheme is supported in FIDO. Though it does not support attributes, for completeness we include a projection of
its complexity if realized as DAA-A based on the LRSW based DAA-A in [35].
O(𝑈 Z𝑝) + 4G1
O(𝑈 Z𝑝) + 4G1
O(𝐿(G1 + Z𝑝))
6G1 + 3G2
3G1 / O(𝑈 G1)
3G1 / O(𝑈 G1)
3G1 / O(𝐿G1)
1G1 / O(𝐷(G1 + G2))
Verify
O(𝐿G1) + 2𝑃
O(𝐿G1) + 2𝑃
O(𝐿G1) + 4𝑃
O(𝐷𝑃)
|Cred|
2Z𝑝 + 2G1
2Z𝑝 + 2G1
O(𝐿G1)
O(𝐿(G1 + G2))
|Show|
Table 1: Comparison of CHAC with existing DAA-A constructions. | · | denotes sizes and otherwise computational effort. For
Type-3 pairings and the BN-256 curve we have in bits |G2| = 2 · |G1|, |G1| = 2 · |Z𝑝|, and |Z𝑝| = 256.
that extend DAA with attributes (DAA-A) and selective attribute
disclosure [22, 25, 35], bringing it closer to AC systems. DAA(-A)
constructions however are proven secure in a formal model that
exactly captures DAA(-A), with a long line of failed security no-
tions [22, 26], and a design tailored towards a specific core device
being the TMP (2.0). With CHAC, our aim is to have a simpler and
much more general model not tailored to a specific core device.
We note that CHAC can be an alternative to DAA in some of its
use-cases, but due to DAA(-A)’s focus on specific features, e.g.,
linkability, it is not intended to be a replacement.
Since all aforementioned DAA constructions follow the same
template, they all have the same inherent performance drawbacks.
In Table 1 we compare our CHAC construction to the recent DAA-A
proposals, where we denote 𝑘 exponentiations in group G𝑖 in a
bilinear group (G1, G2, G𝑇 , 𝑒, 𝑝) with pairing 𝑒 : G1 × G2 → G𝑇
by 𝑘G𝑖 and 𝑘𝑃 denotes 𝑘 pairing operations. Moreover, we denote
by 𝐿 the number of attributes and by 𝐷 and 𝑈 the number of se-
lectively disclosed and undisclosed attributes respectively. We see
that CHAC asymptotically improves over DAA-A and concretely
we improve significantly on the core (the most critical part) and
size of the showing token. For practical applications, where one
can assume that 𝐷 ≪ 𝑈 as this is the main use-case of a selective
disclosure tool for privacy, we also improve significantly (cf. Sec-
tion 5 for a detailed discussion). We note that while our credentials
are larger compared to other work, they are stored on the helper
device where storage space is not an issue. Moreover, for practical
numbers of attributes the credentials are still relatively small, i.e.,
around 200KB for 100 attributes.
|Cred|
O(1)
O(1)
O(1)
O(𝐿)
O(𝐿)
|Show|
O(1)
O(1)
O(1)
O(1)
O(1)
Scheme
[45, 48]
[27]
[69]
[49]
CHAC
|Params|
O(𝐿)
O(𝐿)
O(𝐿2)
O(𝐿)
O(𝐿)
Show Verify
O(𝑈)
O(𝐷)
O(𝑈)
O(𝐷)
O(𝐷)
O(𝑈)
O(1)
O(𝐷)
O(𝐷)
O(𝐷)
Table 2: Comparison of CHAC (merging core and helper)
with conventional ACs designed for selective disclosure.
Comparing core/helper ACs to conventional ACs. Finally, for
the sake of completeness we want to put our CHAC approach into
context of existing conventional state-of-the-art AC systems that
do not consider this core and helper separation. We focus on ACs
that like our approach provide constant-size selective showing of
attributes [27, 45, 48, 49, 69, 73]. Since this is not our main focus of
the paper, in Table 2 we only provide an asymptotic comparison of
the characteristics when using our CHAC approach as a conven-
tional AC system by merging the core and helper functionality into
a single entity. A rough comparison based on expensive operations,
i.e., group exponentiations and pairings,11 and for fairness assum-
ing that 𝐷 = 𝑈 < 𝐿 yields that for [45, 48] showing and verification
are equivalent. [69] has comparable verification efficiency but less
efficient showings. In the recent concurrent and independent work
in [49], which also uses an aggregatable approach as in our construc-
tion, verification is equivalent, but their showing is more efficient
and requires only a constant number of expensive operations. Fi-
nally, the showing of the most compact scheme from [27] includes
around 100 group elements and the computational costs are not
even evaluated, but can be assumed too high in practice (especially
for constrained devices).
Note, however, that vice versa it is not straightforwardly possible
for the other AC approaches to achieve our core/helper separation.
As can be seen, while our CHAC approach has larger credentials,
which as discussed above is not really an issue, we outperform all
existing approaches in that the computation within showing and
verification is in the number 𝐷 of disclosed attributes, a number
that is typically very small compared to 𝑈 and 𝐿 in practical privacy-
preserving applications. Consequently, our CHAC approach also
yields an interesting alternative when not requiring this core/helper
separation.
1.1 Our Contribution and Technical Overview
Our contributions can be summarized in points as follows:
Formal framework for CHAC. We formalize a cryptographic
primitive called core/helper anonymous credentials (CHAC). The
key idea is that the core device performs operations that do not
depend on the size of the credential or the number of attributes.
While we cannot guarantee privacy in front of a malicious helper
device, we however require that even a malicious helper device is
not able to perform a credential showing without the help of the
core. In particular, after 𝑛 showings by the core, even a malicious
helper is not able to produce more than 𝑛 valid showings. We call
the later property dependability. Besides the usual unforgeability
and anonymity, which are defined similarly to previous work on
ACs, we also consider a property called compactness. It states that
the size of showing of a credential (called show token) should be
independent of the number of disclosed/undisclosed attributes.
Generic construction. We provide a construction of CHACs in-
spired by the approach to construct single-attribute credentials
11A comparison based on implementations would be very interesting, but for most
schemes no open implementations are available.
Session 6D: Authentication and Privacy CCS ’21, November 15–19, 2021, Virtual Event, Republic of Korea2007from self-blindable certificates [6]. However, instead of using Ver-
heul’s scheme [74], we instantiate self-blindable credentials us-
ing the approach by Backes et. al. [1]. They introduced signa-
tures with flexible public keys (SFPK) and showed that they can
be efficiently combined with signatures on equivalence classes
(SPS-EQ) [43, 45, 48, 53, 59]. In brief, SFPK are signatures where
the key space is partitioned into equivalence classes and a signer
can efficiently change a key pair to a different representative of the
same class that is indistinguishable from a newly generated one.
SPS-EQ are signatures where the message space is partitioned into
equivalence classes and everyone can update a signature to another
representative of the message class, where the resulting signature
is indistinguishable from a fresh one. We will usually denote this
update operation (the change of representative) by adapt.
The starting point for our generic construction is to represent a
credential as a SPS-EQ signature on a SFPK public key and the core
device just generates a SFPK signature. The helper device adapts
the SFPK public key, randomizes the SFPK signature and adapts
the SPS-EQ signature to the updated SFPK public key. Unfortu-
nately, similar to [6], this only yields a single-attribute credential.
To overcome this limitation, we build upon the notion of SPS-EQ
and introduce two cryptographic primitives that are of indepen-
dent interest: tag-based equivalence class signatures (TBEQ) and
aggregatable attribute-based equivalence class signatures (AAEQ).
In contrary to standard equivalence class signatures, TBEQ allow
to additionally include a tag (an attribute value) when signing a
message (class). AAEQ then allow to aggregate multiple TBEQ
signatures under different keys (representing attributes) and tags
(representing attribute values) on the same message (representa-
tive). In our construction, we then use AAEQ instead of SPS-EQ
in the above template, which allows us to aggregate multiple cer-
tificates to different attributes and attribute values into a single
one. In other words, during the show procedure the helper device
randomizes the SFPK signature and adapts the public key, chooses
the certificates corresponding to the disclosed attributes, aggre-
gates them into a single compact AAEQ signature and adapts it to
the updated SFPK public key. The core device still only generates
the SFPK signature and thus the helper device is unable to use the
credential without a valid SFPK signature from the core device.
Efficient CHAC instantiation. We instantiate the construction
described above using schemes that are secure in the generic group
model [72] and in addition use random oracles [8]. We note that
both are idealized assumptions and it would be more favorable to
have a scheme secure only in the ROM or even in the standard
model. Unfortunately, we do not yet have building blocks available
that are efficient and do not require such assumptions. As our main
motivation is a highly practical solution, we opted for efficiency at
the cost of idealized assumptions.
Our SFPK signature builds upon the one by Backes et. al. [2],
but we replace the programmable Waters hash function [75] with
a random oracle. We instantiate our primitives in Type-3 bilinear
groups BG = (G1, G2, G𝑇 , 𝑒, 𝑝) using the popular BN-256 curve
[4] and the optimal ate pairing 𝑒 : G1 × G2 → G𝑇 . The signing
process involves operations in G2 = 𝐸(F𝑝2) which are not natively
supported by smart cards and should be avoided. Therefore, we
show how to securely split the signing process into three steps: a pre-
computation step that is performed only once, the main part that
only involves operations in G1, natively supported by smart cards,
and a finalization step that can be performed without the secret
key. This allows for the core device to pre-compute certain data
once and then only sign using operations in G1 where the helper
device will finalize the SFPK signature and perform operations in
G2. We call this extension SFPK with split signing.
Our tag-based equivalence class signature (TBEQ) is based upon
the SPS-EQ scheme from [44] extended with one component repre-
senting a one-time BLS signature [16] on the tag in group G2 using
the randomness of the SPS-EQ scheme as a one-time signing key.
The corresponding verification key is already part of the SPS-EQ
scheme from [44]. Similar to [44] we analyze its security in the