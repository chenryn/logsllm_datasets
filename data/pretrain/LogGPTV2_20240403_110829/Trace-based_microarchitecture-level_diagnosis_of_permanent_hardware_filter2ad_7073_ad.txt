narrows 89% of the faults down to a single non-array
structure (e.g., ALU) or a specific entry in an array structure
(e.g., physical register # 15) and 92% of the faults down
to two structures or entries. Assuming other techniques are
available for testing array structures, diagnosis only needs
to narrow the fault down to the array structure (e.g., RAT)
instead of the array entry (e.g., RAT entry # 10). In this
case, additional 5% of the faults can be correctly diagnosed.
Overall, TBFD is able to narrow 98% of the detected
permanent faults down to one, or two potentially faulty
structures or array entries, and the faulty array structure.
5.1. Uniquely Diagnosed Faulty Structures
When TBFD correctly narrows a detected fault down
to a single unit or array entry, we categorize the fault as
uniquely diagnosed. While 89% of all detected faults can
be uniquely diagnosed, from Figure 4, we see that differ(cid:173)
ent microarchitectural structures have varying amounts of
uniquely diagnosed faults.
For 5 (all except INT ALU and RAT) out of 7 structures,
over 97% (up to 100%) of the detected faults are uniquely
diagnosed;
this shows TBFD is highly effective for di(cid:173)
agnosing faults in these structures. In particular, virtually
all the faults in Decoder can be uniquely diagnosed. This
high percentage is likely due to the specific instruction
word check in the first part of the diagnosis algorithm.
Furthermore, over 99.6% of the ROB faults are uniquely
diagnosed. This shows TBFD's meta-datapath check is
essential for correct diagnoses.
For INT ALU, only 79% of the faults are uniquely
diagnosed. The lower percentage is mainly due to the
correlations with other structures (discussed in Section 5.2).
For RAT, however, only 45°A> of the faults can be
uniquely diagnosed. While TBFD seems less effective for
diagnosing faults in RAT, we note that without checking for
faults in the meta-datapath, all of the RAT faults cannot be
correctly diagnosed. Also, for array structures like RAT,
there are existing testing techniques such as BIST in the
processor. Thus, TBFD may not need to diagnose the fault
down to a single RAT entry, as long as it identifies the RAT
as the source of the fault (discussed in Section 5.3).
5.2. Non-Uniquely Identified Faulty Structures
Since the diagnosis only analyzes the faulty core's
test trace and does not reconfigure the faulty core, if a
correlation among two structures exists during execution,
the diagnosis may not be able to uniquely diagnose the
faulty component. The Among 2 category reflects such
1-4244-2398-9/08/$20.00 ©2008 IEEE
29
DSN 2008: Li et al.
Authorized licensed use limited to: Tsinghua University. Downloaded on March 20,2021 at 13:17:28 UTC from IEEE Xplore.  Restrictions apply. 
International Conference on Dependable Systems & Networks: Anchorage, Alaska, June 24-27 2008
cases where the diagnosis diagnoses 2 suspects that are
potentially faulty, with one of the suspects being the
structure with the fault.
Overall, only 3% of the diagnosed faults fall
into the
Among 2 category. Most of them are faults in INT ALU
(18% of INT ALU faults). A closer look at the Among 2
cases shows that all mismatching instructions that use ALU
1 always write to their registers using Reg DBus 1. It is
therefore virtually impossible to separate ALUI from Reg
DBus 1 for the purpose of high-level diagnosis.
However, by narrowing down the faults down to 2 non(cid:173)
array structures or array entries, TBFD gives clues to
where the fault may be. Then, by disabling suspected faulty
components one at a time and running TBFD, the faulty
unit/entry can be uniquely diagnosed. Another alternative
to reduce faults in the Among 2 category is to break the
correlations among resources by explicitly changing the
scheduling algorithm in the processor (proposed by Bower
et. al [2]).
5.3. Faults Diagnosed in Higher Granularity
While TBFD is able to narrow down most of the faults
correctly to one or two structures/array entries, only 45%
of the detected RAT faults fall
into Unique and Among
2 categories. Such low percentage is mainly due to the
reasons discussed in Section 3.4.2.
However, as BIST based techniques that test array struc(cid:173)
tures are increasingly common in modem processors (for
manufacturing testing), it is useful to use TBFD to diagnose
the RAT (instead of a particular RAT entry) as potentially
faulty and track down the actual faulty RAT entry using
BIST. If we assume that it is sufficient to diagnose faults
at the granularity of an array structure, TBFD can diagnose
additional 44% of detected RAT faults to be in the RAT.
5.4. Undiagnosed Faults
Undiagnosed faults fall under two categories - No Mis(cid:173)
match and Incorrect in Figure 4. In both these cases, the
diagnosis algorithm is unable to accurately attribute the
location of the fault that was detected.
2°A> fall
Of all detected faults,
in the No Mismatch
category, where the instruction traces of the faulty and
the fault-free cores do not differ. These faults may be
diagnosed by collecting a longer execution trace (currently
a maximum of 30 million instructions are analyzed) or by
using existing deterministic replay schemes [11], [21] to
re-create the fault effect that lead to its detection.
On the other hand, only 0.9% of the detected faults
in fault-free
are mis-diagnosed by TBFD to be a fault
structures. Further, from Figure 4, we see that most of
these faults are in the RAT. We observe that these RAT
faults cause data corruptions and mislead the diagnosis to
diagnose the datapath components as faulty. However, by
100%
~80%
::::I
C'Cl
LL
"C
Q)
CI)'2 60%
c....o
.Bc
~40%
CI)
~
~20%
0%
Decoder INT ALU
Reg
Dbus
Int Reg
ROB
RAT
AGEN
Avg
Figure 5. Diagnosis latency in number of instructions
between the start of diagnosis and the point when the fault is
diagnosed. The figure shows that over 90% of the faults can
be diagnosed within 1 million instructions.
disabling the suspected units and re-generating a test-trace,
TBFD is more likely to diagnose these faults correctly.
While further investigation to evaluate the best
tech(cid:173)
niques to reduce, or eliminate, these undiagnosed faults is
necessary to make a fool-proof diagnosis algorithm, even
with these limitations, TBFD presents impressive results
for microarchitecture-Ievel fault diagnosis.
5.5. Diagnosis Latency
Besides the percentage of diagnosable faults, another
metric that measures the effectiveness of our diagnosis is
the latency. If the latency is too long (e.g., billions or
trillions of instructions), the processors' (both the faulty and
fault-free cores) down time may make TBFD unattractive
when compared to other simpler techniques, such as core
decommissioning.
Our simulation infrastructure does not have enough detail
to determine the latency in terms of the execution
yet
time of the entire diagnosis module. Instead, as a proxy,
we report here the latency in terms of the number of
instructions that the faulty core executes between the start
of our diagnosis (i.e., after the core is rolled back to
the previous checkpoint) to the point where the fault
is
identified. Figure 5 shows this latency. The figure includes
all the faults in the Unique, Among 2, and Correct Type
categories in Figure 4.
Of all
the diagnosed faults, 56% take fewer than lk
instructions and over 90% take fewer than 1M to diagnose.
From Figure 5, we see that the latency for faults in
different structures varies widely. Over 99% of faults in
Decoder and ROB take fewer than 1M to be diagnosed. The
explicit check for front-end faults in TBFD helps shorten
the diagnosis latency for Decoder faults. For ROB faults,
the short latency is due to the fact that they usually cause a
break in dependency and quickly lead to hardware hangs.
1-4244-2398-9/08/$20.00 ©2008 IEEE
30
DSN 2008: Li et al.
Authorized licensed use limited to: Tsinghua University. Downloaded on March 20,2021 at 13:17:28 UTC from IEEE Xplore.  Restrictions apply. 
International Conference on Dependable Systems &Networks: Anchorage, Alaska, June 24-27 2008
On the other hand, only 77% of Int Reg faults and 61 % of
RAT faults are diagnosed within 1M instructions. A general
observation for these two types of faults is that they are
activated relatively infrequently, causing fewer mismatches
and taking longer for TBFD to narrow the faults down to
particular unites).
Overall, by being able to narrow most of the faults
down to one or a few locations within reasonable latency,
TBFD shows that it is highly effective and incurs limited
performance overhead during diagnosis.
6. Conclusions
As CMOS continues to scale according to Moore's
law, hardware failures caused by permanent faults due
to phenomena such as wear-out and infant morality are
expected to increase. As this problem pervades the broad
computing market, traditional processor-level redundancy(cid:173)
based solutions will be too costly to be broadly deploy(cid:173)
able. One approach is to use low-overhead fault detection
techniques (which need to be "always-on"), but backed up
by more expensive diagnosis techniques that need to be
invoked only in the rare event of a fault.
While several microarchitecture-Ievel schemes for de(cid:173)
tecting permanent faults have been devised in the past,
fault diagnosis has been less explored. Nevertheless, fault
diagnosis is crucial for tolerating permanent faults as it
needs to correctly identify faulty component for repair or
reconfiguration.
In this paper, we presented a diagnosis algorithm that
robustly identifies faults in microarchitectural structures
of different domains of a processor
(front-end, datap(cid:173)
ath or meta-datapath). This technique relies on recovery(cid:173)
motivated checkpoint/replay mechanisms and a fault-free
core in a multi-core system that can generate a fault-free
trace for comparison with the faulty trace. The technique
compares the faulty and fault-free execution trace, analyzes
the points of differences, and reasons about the location of
the fault through an intelligent diagnostic procedure.
We evaluated this diagnosis framework with fault injec(cid:173)
tion experiments in a simulated system. Our results show
that
this approach is promising, being able to correctly
identify the faulty unit in 98°A> of the detected faults. In
89% of the detected faults, the specific entry in an array
structure was also correctly identified. Overall, with no as(cid:173)
sumptions made about detection and repair/reconfiguration
mechanisms, trace-based fault diagnosis is a highly flex(cid:173)
ible framework that effectively addresses permanent fault
diagnosis.
In future work, we propose to expand the diagnosis algo(cid:173)
rithm to diagnose faults in other structures both in the core
and off the core. We would also like to couple this diagnosis
framework with other lower-level diagnosis techniques such
as BIST, to further refine the granularity at which diagnosis
is performed. Finally, we are also exploring detection and
diagnosis for multithreaded applications.
References
[1] T. M. Austin.
Submicron Microarchitecture Design.
Microarchitecture, 1998.
DIVA: A Reliable Substrate for Deep
In Int!' Symp. on
[2] F. A. Bower, D. Sorin, and S. Ozev. Online Diagnosis
of Hard Faults in Microprocessors. ACM Transactions on
Architecture and Code Optimization, 4(2), 2007.
[3] K. Cheng and W. Lai.
Instruction-Level DFT for Testing
Processor and IP Cores in System-on-A-Chip. In Int!. Design
Automation Conference, 2001.
[4] K. Constantinides et al. Software-Based On-Line Detection
of Hardware Defects: Mechanisms, Architectural Support,
and Evaluation. In Inti. Symp. on Microarchitecture, 2007.
[5] M. Dimitrov and H. Zhou. Unified Architectural Support
for Soft-Error Protection or Software Bug Detection. In Int!.
Conf on Parallel Archtectures and Compilation Techniques,
2007.
[6] M. Li et al. Understanding the Propagation of Hard Errors
to Software and Implications for Resilient Systems Design.
In Int!. Conf on Architectural Support for Programming
Languages and Operating Systems, 2008.
[7] M. Martin et al. Multifacet's General Execution-Driven Mul(cid:173)
tiprocessor Simulator (GEMS) Toolset. SIGARCH Computer
Architecture News, 33(4), 2005.
[8] C. Mauer, M. Hill, and D. Wood. Full-System Timing-First
Simulation. SIGMETRICS Perf EvaI. Rev., 30(1), 2002.
[9] A. Meixner, M. E. Bauer, and D. Sorin. Argus: Low-Cost,
In Inti.
Comprehensive Error Detection in Simple Cores.
Symp. on Microarchitecture, 2007.
[10] M. Mueller et al. RAS Strategy for IBM S/390 G5 and
IBM Journal on Research and Development, 43(5/6),
G6.
SeptlNov 1999.
[11] S. Narayanasamy, G. Pokam, and B. Calder. BugNet: Con(cid:173)
tinuously Recording Program Execution for Deterministic
Replay Debugging. In Int!. Symp. on Computer Architecture,
2005.
[12] P. Parvathala, K. Maneparambil, and W. Lindsay. FRITS:
In Int!. Test
A Microprocessor Functional BIST Method.
Conference, 2002.
[13] M. Prvulovic et al. ReVive: Cost-Effective Architectural
Support for Rollback Recovery in Shared-Memory Multi(cid:173)
processors. In Inti. Symp. on Computer Architecture, 2002.
[14] P. Racunas et al. Perturbation-based Fault Screening. In Inti.
Symp. on High Performance Computer Architecture, 2007.
[15] S. Sahoo et al. Using Likely Program Invariants to Detect
Hardware Errors. In Inti. Conf on Dependable Systems and
Networks, 2008.
[17] D. Sorin et al.
[16] S. Shyam et al. Ultra Low-Cost Defect Protection for Micro(cid:173)
processor Pipelines. In Inti. Conf on Architectural Support
for Programming Languages and Operating Systems, 2006.
Improving the Availability
of Shared Memory Multiprocessors with Global Check(cid:173)
point/Recovery.
In Int!. Symp. on Computer Architecture,
2002.
SafetyNet:
[18] Virtutech. Simics Full System Simulator. Website, 2006.
http://www.simics.net.
[19] N. Wang and S. Patel. ReStore: Symptom-Based Soft
Error Detection in Microprocessors. IEEE Transactions on
Dependable and Secure Computing, 3(3), July-Sept 2006.
[20] E. Weglarz et al. Testing of Hard Faults in Simultaneous
Multithreaded Processors. In Inti. Online Test Symp., 2004.
[21] M. Xu, R. Bodik, and M. Hill. A "flight data recorder" for
enabling full-system multiprocessor deterministic replay. In
Int!. Symp. on Computer Architecture, 2003.
1-4244-2398-9/08/$20.00 ©2008 IEEE
31
DSN 2008: Li et al.
Authorized licensed use limited to: Tsinghua University. Downloaded on March 20,2021 at 13:17:28 UTC from IEEE Xplore.  Restrictions apply.