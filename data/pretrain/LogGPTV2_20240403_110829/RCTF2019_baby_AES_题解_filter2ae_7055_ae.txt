            self.tmp = [[reduce(lambda x,y: x^y,[FFmul(lst[i][k],self.tmp[k][j]) for k in range(4)]) for j in range(4)] for i in range(4)]
            return
        def MixColumnsInv(self):
            lst = [[8,5,7,9],[9,8,5,7],[7,9,8,5],[5,7,9,8]]
            def FFmul(a,b):
                rr = [a]
                def xtime(x):
                    return x> i) & 0x01) * rr[i])
                return t
            self.tmp = ggwp(self.tmp)
        def AddRoundKey(self,rd):
            self.tmp = [lst_xor(self.tmp[i], [self.subkey[4*rd + j][i] for j in range(4)]) for i in range(4)]
            return
        def aes_encipher(self,m):
            self.tmp = [[ord(m[i+4*j]) for j in range(4)] for i in range(4)]
            self.AddRoundKey(0)
            for i in range(1,10):
                self.SubBytes()
                self.ShiftRows()
                self.MixColumns()
                self.AddRoundKey(i)
            self.SubBytes()
            self.ShiftRows()
            self.AddRoundKey(10)
            self.tmp = [hex(self.tmp[j][i])[2:].zfill(2) for i in range(4) for j in range(4)]
            return self.tmp
        def aes_decipher(self,m):
            self.tmp = [[ord(m[i+4*j]) for j in range(4)] for i in range(4)]
            self.AddRoundKey(10)
            self.ShiftRowsInv()
            self.SubBytesInv()
            for i in range(9,0,-1):
                self.AddRoundKey(i)
                self.MixColumnsInv()
                self.ShiftRowsInv()
                self.SubBytesInv()
            self.AddRoundKey(0)
            self.tmp = [hex(self.tmp[j][i])[2:].zfill(2) for i in range(4) for j in range(4)]
            return self.tmp
    k = "x01x23x45x67x89xabxcdxefxfexdcxbax98x76x54x32x10"
    A = AES128(k)
    c = 'NxcbI{q;xe6]x82kxedxaf0&xd9xaa'
    m = A.aes_decipher(c)
    m = bytes([int(i,16) for i in m])
    print(m)
解密得到`key = b'xc3x81Axa8x84xf9x0b{xb7xe4xf4x14D,xdds'`
然后解密flag:
    flag = '7f015db80352a325cacdac4bb25d8ac9494e468fb0aa514d6c916df1b8a0fafe46e9c3aad6fca5f109c414f2f99ffb81'
    key = b'xc3x81Axa8x84xf9x0b{xb7xe4xf4x14D,xdds'
    iv = b'NxcbI{q;xe6]x82kxedxaf0&xd9xaa'
    cipher = Cipher(algorithms.AES(key), modes.CBC(iv), backend=backend)
    ciphertext = binascii.unhexlify(flag)
    decryptor = cipher.decryptor()
    plaintext = decryptor.update(ciphertext) + decryptor.finalize()
    print(plaintext)
    # Out:b'RCTF{88358abe-e571-4bdf-95a3-93e9d8ddf558}x06x06x06x06x06x06'
## FLAG值
  * RCTF{88358abe-e571-4bdf-95a3-93e9d8ddf558}
## 结语
做题的时候浪费了太多时间在求列混淆矩阵的逆，结果发现很多时候还是暴破靠谱。
## 参考
  1. 
  2. 
  3. 
  4. 《深入浅出密码学——常用加密技术原理与应用》