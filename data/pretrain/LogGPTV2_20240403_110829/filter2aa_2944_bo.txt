Listing 9.7
Enforcing consistent permissions
Create additional
capability URIs
with restricted
permissions.
Return the 
additional 
capabilities.
Look up the permissions 
from the current request.
Remove any permissions 
that are not applicable.
Create new capabilities using
the revised permissions.
311
Capabilities and REST
Update the remaining methods in the SpaceController.java file to return appropriate
capability URIs, remembering to follow POLA. The GitHub repository accompanying
the book (https://github.com/NeilMadden/apisecurityinaction) has completed source
code if you get stuck, but I’d recommend trying this yourself first.
TIP
You can use the ability to specify different expiry times for links to imple-
ment useful functionality. For example, when a user posts a new message, you
can return a link that lets them edit it for a few minutes only. A separate link
can provide permanent read-only access. This allows users to correct mistakes
but not change historical messages.
9.2.4
Capability URIs for browser-based clients
In section 9.2.1, I mentioned that putting the token in the URI path or query parame-
ters is less than ideal because these can leak in audit logs, Referer headers, and
through your browser history. These risks are limited when capability URIs are used in
an API but can be a real problem when these URIs are directly exposed to users in a
web browser client. If you use capability URIs in your API, browser-based clients will
need to somehow translate the URIs used in the API into URIs used for navigating the
UI. A natural approach would be to use capability URIs for this too, reusing the
tokens from the API URIs. In this section, you’ll see how to do this securely.
 One approach to this problem is to put the token in a part of the URI that is not
usually sent to the server or included in Referer headers. The original solution was
Pop quiz
3
The capability URIs for each space use never-expiring database tokens. Over
time, this will fill the database with tokens. Which of the following are ways you
could prevent this?
a
Hashing tokens in the database
b
Using a self-contained token format such as JWTs
c
Using a cloud-native database that can scale up to hold all the tokens
d
Using the HmacTokenStore in addition to the DatabaseTokenStore
e
Reusing an existing token when the same capability has already been issued
4
Which is the main reason why HATEOAS is an important design principle when
using capability URIs? Pick one answer.
a
HATEOAS is a core part of REST.
b
Capability URIs are hard to remember.
c
Clients can’t be trusted to make their own URIs.
d
Roy Fielding, the inventor of REST, says that it’s important.
e
A client can’t make their own capability URIs and so can only access other
resources through links.
The answers are at the end of the chapter.
312
CHAPTER 9
Capability-based security and macaroons
developed for the Waterken server that used capability URIs extensively, under the
name web-keys (http://waterken.sourceforge.net/web-key/). In a web-key, the unguess-
able token is stored in the fragment component of the URI; that is, the bit after a #
character at the end of the URI. The fragment is normally used to jump to a particular
location within a larger document, and has the advantage that it is never sent to the
server by clients and never included in a Referer header or window.referrer field in
JavaScript, and so is less susceptible to leaking. The downside is that because the
server doesn’t see the token, the client must extract it from the URI and send it to the
server by other means.
 In Waterken, which was designed for web applications, when a user clicked a web-
key link in the browser, it loaded a simple template JavaScript page. The JavaScript
then extracted the token from the query fragment (using the window.location.hash
variable) and made a second call to the web server, passing the token in a query
parameter. The flow is shown in figure 9.3. 
 Because the JavaScript template itself contains no sensitive data and is the same for
all URIs, it can be served with long-lived cache-control headers and so after the
browser has loaded it once, it can be reused for all subsequent capability URIs without
an extra call to the server, as shown in the lower half of figure 9.3. This approach
works well with single-page apps (SPAs) because they often already use the fragment
in this way to permit navigation in the app without causing the page to reload while
still populating the browser history.
WARNING
Although the fragment component is not sent to the server, it will
be included if a redirect occurs. If your app needs to redirect to another site,
you should always explicitly include a fragment component in the redirect
URI to avoid accidentally leaking tokens in this way.
Listing 9.8 shows how to parse and load a capability URI in this format from a Java-
Script API client. It first parses the URI using the URL class and extracts the token from
the hash field, which contains the fragment component. This field include the literal
“#” character at the start, so use hash.substring(1) to remove this. You should then
remove this component from the URI to send to the API and instead add the token
back as a query parameter. This ensures that the CapabilityController will see the
token in the expected place. Navigate to src/main/resources/public and create a new
file named capability.js with the contents of the listing.
NOTE
This code assumes that UI pages correspond directly to URIs in your
API. For an SPA this won’t be true, and there is (by definition) a single UI page
that handles all requests. In this case, you’ll need to encode the API path
and the token into the fragment together in a form such as #/spaces/1/
messages&tok=abc123. Modern frameworks such as Vue or React can use the
HTML 5 history API to make SPA URIs look like normal URIs (without the
fragment). When using these frameworks, you should ensure the token is in
the real fragment component; otherwise, the security benefits are lost.
313
Capabilities and REST
function getCap(url, callback) {
    let capUrl = new URL(url);             
    let token = capUrl.hash.substring(1);  
    capUrl.hash = '';    
    capUrl.search = '?access_token=' + token;    
    return fetch(capUrl.href)           
    .then(response => response.json())
    .then(callback)
    .catch(err => console.error('Error: ', err));
}
Listing 9.8
Loading a capability URI from JavaScript
JavaScript template
Web server
API
The browser loads
a capability URI.
The JavaScript extracts the
token from the fragment and
makes an Ajax request to the
server with the token this time.
Browser
https://example.com/foo#abc123...
GET /foo
GET /foo?s=abc123..
The initial request to
the server loads a static
JavaScript template,
ignoring the fragment.
API
Browser
https://example.com/foo#abc123...
On subsequent requests, the
JavaScript template will already
be in the browser’s cache.
GET /foo?s=abc123..
Figure 9.3
In the Waterken web-key design for capability URIs, the token is 
stored in the fragment of the URI, which is never sent to the server. When a 
browser loads such a URI, it will initially load a static JavaScript page that then 
extracts the token from the fragment and uses it to make Ajax requests to the 
API. The JavaScript template can be cached by the browser, avoiding the extra 
roundtrip for subsequent requests.
Parse the URL and extract 
the token from the fragment 
(hash) component.
Blank
out the
fragment.
Add the token to 
the URI query 
parameters.
Now fetch the URI to call 
the API with the token.
314
CHAPTER 9
Capability-based security and macaroons
9.2.5
Combining capabilities with identity
All calls to the Natter API are now authorized purely using capability tokens, which
are scoped to an individual resource and not tied to any user. As you saw with the sim-
ple message browser example in the last section, you can even hard-code read-only
capability URIs into a web page to allow completely anonymous browsing of messages.
Some API calls still require user authentication though, such as creating a new space
or posting a message. The reason is that those API actions involve claims about who
the user is, so you still need to authenticate those claims to ensure they are genuine,
for accountability reasons rather than for authorization. Otherwise, anybody with a
capability URI to post messages to a space could use it to impersonate any other user.
 You may also want to positively identify users for other reasons, such as to ensure
you have an accurate audit log of who did what. Because a capability URI may be
shared by lots of users, it is useful to identify those users independently from how
their requests are authorized. Finally, you may want to apply some identity-based
access controls on top of the capability-based access. For example, in Google Docs
(https://docs.google.com) you can share documents using capability URIs, but you
can also restrict this sharing to only users who have an account in your company’s
domain. To access the document, a user needs to both have the link and be signed
into a Google account linked to the same company.
 There are a few ways to communicate identity in a capability-based system:
 You can associate a username and other identity claims with each capability
token. The permissions in the token are still what grants access, but the token
additionally authenticates identity claims about the user that can be used for
audit logging or additional access checks. The major downside of this approach
is that sharing a capability URI lets the recipient impersonate you whenever
they make calls to the API using that capability. Nevertheless, this approach can
be useful when generating short-lived capabilities that are only intended for a
single user. The link sent in a password reset email can be seen as this kind of
capability URI because it provides a limited-time capability to reset the pass-
word tied to one user’s account.
Pop quiz
5
Which of the following is the main security risk when including a capability token
in the fragment component of a URI?
a
URI fragments aren’t RESTful.
b
The random token makes the URI look ugly.
c
The fragment may be leaked in server logs and the HTTP Referer header.
d
If the server performs a redirect, the fragment will be copied to the new URI.
e
The fragment may already be used for other data, causing it to be overwritten.
The answer is at the end of the chapter.
315
Capabilities and REST
 You could use a traditional authentication mechanism, such as a session cookie,
to identify the user in addition to requiring a capability token, as shown in fig-
ure 9.4. The cookie would no longer be used to authorize API calls but would
instead be used to identify the user for audit logging or for additional checks.
Because the cookie is no longer used for access control, it is less sensitive and so
can be a long-lived persistent cookie, reducing the need for the user to fre-
quently log in.
When developing a REST API, the second option is often attractive because you can
reuse traditional cookie-based authentication technologies such as a centralized
OpenID Connect identity provider (chapter 7). This is the approach taken in the Nat-
ter API, where the permissions for an API call come from a capability URI, but some
API calls need additional user authentication using a traditional mechanism such as
HTTP Basic authentication or an authentication token or cookie. 
 To switch back to using cookies for authentication, open the Main.java file in your
editor and find the lines that create the TokenController object. Change the token-
Store variable to use the CookieTokenStore that you developed back in chapter 4:
SecureTokenStore tokenStore = new CookieTokenStore();
var tokenController = new TokenController(tokenStore);
9.2.6
Hardening capability URIs
You may wonder if you can do away with the anti-CSRF token now that you’re using
capabilities for access control, which are immune to CSRF. This would be a mistake,
because an attacker that has a genuine capability to access the API can still use a CSRF
attack to make their requests appear to come from a different user. The authority to
API
Client
POST /abc?tok=sjkhfDF...
Cookie: user=alice
The capability URI grants access.
A cookie identiﬁes the
user for audit logs.
Figure 9.4
By combining capability URIs with a traditional 
authentication mechanism such as cookies, the API can enforce 
access using capabilities while authenticating identity claims 
using the cookie. The same capability URI can be shared between 
users, but the API is still able to positively identify each of them.
316
CHAPTER 9
Capability-based security and macaroons
access the API comes from the attacker’s capability URI, but the identity of the user
comes from the cookie. If you keep the existing anti-CSRF token though, clients are
required to send three credentials on every request:
 The cookie identifying the user
 The anti-CSRF token
 The capability token authorizing the specific request
This is a bit excessive. At the same time, the capability tokens are vulnerable to being
stolen. For example, if a capability URI meant for a moderator is stolen, then it can be
used by anybody to delete messages. You can solve both problems by tying the capabil-
ity tokens to an authenticated user and preventing them being used by anybody else.
This removes one of the benefits of capability URIs—that they are easy to share—but
improves the overall security:
 If a capability token is stolen, it can’t be used without a valid login cookie for
the user. If the cookie is set with the HttpOnly and Secure flags, then it becomes
much harder to steal.
 You can now remove the separate anti-CSRF token because each capability URI
effectively acts as an anti-CSRF token. The cookie can’t be used without the
capability and the capability can’t be used without the cookie.
Listing 9.9 shows how to associate a capability token with an authenticated user by
populating the username attribute of the token that you previously left blank. Open
the CapabilityController.java file in your editor and add the highlighted lines of code.
public URI createUri(Request request, String path, String perms,
                     Duration expiryDuration) {
    var subject = (String) request.attribute("subject");          
    var token = new Token(now().plus(expiryDuration), subject);     
    token.attributes.put("path", path);
    token.attributes.put("perms", perms);
    var tokenId = tokenStore.create(request, token);
    var uri = URI.create(request.uri());
    return uri.resolve(path + "?access_token=" + tokenId);
}
You can then adjust the lookupPermissions method in the same file to return no per-
missions if the username associated with the capability token doesn’t match the
authenticated user, as shown in listing 9.10. This ensures that the capability can’t be
used without an associated session for the user and that the session cookie can only
be used when it matches the capability token, effectively preventing CSRF attacks too.
Listing 9.9
Linking a capability with a user
Look up the 
authenticated 
user.
Associate 
the capability 
with the user.
317
Capabilities and REST
public void lookupPermissions(Request request, Response response) {
    var tokenId = request.queryParams("access_token");
    if (tokenId == null) { return; }
    tokenStore.read(request, tokenId).ifPresent(token -> {
        if (!Objects.equals(token.username,           
                request.attribute("subject"))) {      
            return;                                   
        }                                             
        var tokenPath = token.attributes.get("path");
        if (Objects.equals(tokenPath, request.pathInfo())) {
            request.attribute("perms",
                    token.attributes.get("perms"));
        }
    });
}
You can now delete the code that checks the anti-CSRF token in the CookieToken-
Store if you wish and rely on the capability code to protect against CSRF. Refer to
chapter 4 to see how the original version looked before CSRF protection was added.
You’ll also need to adjust the TokenController.validateToken method to not
reject a request that doesn’t have an anti-CSRF token. If you get stuck, check out
chapter09-end of the GitHub repository accompanying the book, which has all the
required changes.
SHARING ACCESS
Because capability URIs are now tied to individual users, you need a new mechanism
to share access to social spaces and individual messages. Listing 9.11 shows a new oper-
ation to allow a user to exchange one of their own capability URIs for one for a differ-
ent user, with an option to specify a reduced set of permissions. The method reads a
capability URI from the input and looks up the associated token. If the URI matches
the token and the requested permissions are a subset of the permissions granted by
the original capability URI, then the method creates a new capability token with the
new permissions and user and returns the requested URI. This new URI can then be
safely shared with the intended user. Open the CapabilityController.java file and add
the new method.
public JSONObject share(Request request, Response response) {
    var json = new JSONObject(request.body());
    var capUri = URI.create(json.getString("uri"));         
    var path = capUri.getPath();                            
    var query = capUri.getQuery();                          
    var tokenId = query.substring(query.indexOf('=') + 1);  
Listing 9.10
Verifying the user
Listing 9.11
Sharing capability URIs
If the authenticated 
user doesn’t match the 
capability, it returns no 
permissions.
Parse the original 
capability URI and 
extract the token.
318
CHAPTER 9
Capability-based security and macaroons
    var token = tokenStore.read(request, tokenId).orElseThrow();  
    if (!Objects.equals(token.attributes.get("path"), path)) {    
        throw new IllegalArgumentException("incorrect path");     
    }                                                             
    var tokenPerms = token.attributes.get("perms");    
    var perms = json.optString("perms", tokenPerms);   
    if (!tokenPerms.contains(perms)) {                 
        Spark.halt(403);                               
    }                                                  
    var user = json.getString("user");
    var newToken = new Token(token.expiry, user);           
    newToken.attributes.put("path", path);                  
    newToken.attributes.put("perms", perms);                
    var newTokenId = tokenStore.create(request, newToken);  
    var uri = URI.create(request.uri());                  
    var newCapUri = uri.resolve(path + "?access_token="   
            + newTokenId);                                
    return new JSONObject()                               
            .put("uri", newCapUri);                       
}
You can now add a new route to the Main class to expose this new operation. Open the
Main.java file and add the following line to the main method:
post("/capabilities", capController::share);
You can now call this endpoint to exchange a privileged capability URI, such as the
messages-rwd URI returned from creating a space, as in the following example:
curl -H 'Content-Type: application/json' \
  -d '{"uri":"/spaces/1/messages?access_token=
➥ 0ed8-IohfPQUX486d0kr03W8Ec8", "user":"demo2", "perms":"r"}' \