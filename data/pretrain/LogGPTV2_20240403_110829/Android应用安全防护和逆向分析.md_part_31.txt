·注意方法的返回值，条件判断等比较显眼的代码。
有些apk中的源码可能有自己的加密算法，这时候需要获取到这个加密方法，如果加密方法比较复杂，就需要大批的测试数据来获取这个加密方法的逻辑，一般是输入和输出作为一个测试用例。
对于System.loadLibrary加载so文件的代码，只需要找到这个so文件，然后用IDA打开进行静态分析，因为有些apk中把加密算法放到了so中了，这时候也可以通过测试数据来获取加密算法。
通过上面的例子，可以得出一个经验，就是现在很多apk会做一些校验工作，因为一般在代码中包含"signature"字符串信息，所以可以全局搜索一下，也许能获取一些重要信息，如图20-13所示。
::: bodypic-c
![](OEBPS/Images/20a13-i.jpg){.calibre725}
:::
图20-13 签名校验关键字搜索结果
[]{#126.xhtml}
#### 20.6 本章小结 {.bodycontent-title2}
本章主要介绍了如何通过静态分析方式进行破解，介绍了一些工具的使用，以及破解流程、破解技巧。最常用的就是代码注入技术和全局搜索关键字符串等方式。可以看到，现在市面上的很多apk，仅通过静态分析是无法满足破解需求了，所以动态分析方式就来了，而且动态方式破解难度会很大，需要掌握的东西也很多，后面篇章会一一介绍动态破解的技巧和常见的问题。而静态方式破解也很重要，是动态分析的前提，所以这两种技术都必须很好地掌握。
[]{#127.xhtml}
### 第21章 动态调试smali源码 {.bodycontent-title4}
本章开始介绍另外一种破解apk方式：动态方式。动态方式相对于静态方式来说难度大一点，但是它比静态方式高效，能够针对更多的破解范围。破解一般的apk没有任何问题，不过不能代表能够破解所有的apk，因为没有绝对的安全，也是没有绝对的破解，双方都在进步，只能具体问题具体分析。
首先需要解释一下，为什么调试smali源码，而不是Java源码，因为进行过反编译的人知道，使用apktool反编译apk之后，会有一个smali文件夹，这里存放了apk对应的smali源码。
[]{#128.xhtml}
#### 21.1 动态调试步骤 {.bodycontent-title2}
###### 第一步：反编译apk {.section-subtitle}
通过apktool工具进行apk的反编译，得到smali源码和AndroidManifest.xml，然后修改AndroidManifest.xml中的debug属性为true，同时在入口处加上waitForDebug代码，进行debug等待。一般入口都是先找到入口Activity的onCreate方法中的第一行处，这里需要注意的是，apktool工具一定要加上-d参数，这样反编译得到的文件是Java文件，这样才能够被Eclipse识别，进行调试。
###### 第二步：回编译apk {.section-subtitle}
修改完成AndroidManifest.xml和添加waitForDebug之后，需要使用apktool进行回编译，回编译之后得到的是一个没有签名的apk，还需要使用signapk.jar来进行签名，签名文件直接使用测试程序的签名文件就可以，最后进行安装。
###### 第三步：将反编译smali工程导入Eclipse {.section-subtitle}
将反编译之后的smali源码导入到Eclipse工程中，找到关键点，进行下断点。这里的关键点，一般是先大致了解程序运行的结构，然后找到需要破解的地方，使用View分析工具，或者使用jd-gui工具直接查看apk源码（使用dex2jar将dex文件转化成jar文件，然后用jd-gui进行查看），找到代码的大体位置，然后下断点。这里可以借助Eclipse的DDMS自带的View分析工具找到对应控件的resid，然后全局搜索这个控件的resid，或者直接在values/public.xml中查找，最终定位到这个控件位置，再查看它的点击事件即可。
###### 第四步：设置远程调试 {.section-subtitle}
设置远程调试工程，首先运行需要调试程序，然后在DDMS中找到对应的调试服务端的端口号，然后在Debug
Configurations中设置远程调试项目，设置对应的调试端口和ip地址（一般都是本机pc，那就是localhost），然后红色小蜘蛛变成绿色的，表示远程调试项目连接关联上了调试程序。这里需要注意的是，一定需要关联正确，不然是没有任何效果的，关联成功之后，就可以进行操作。
###### 第五步：调试apk程序 {.section-subtitle}
操作的过程中，会进入到关键的断点处，通过F6单步，F5单步进入，F7单步跳出，进行调试。找到关键方法，然后通过分析smali语法了解逻辑，如果逻辑复杂的，可以通过查看具体的环境变量的值来观察，这里也是最重要的，也是最复杂的，同时这里也是没有规章可寻的，这与每个人的逻辑思维以及破解能力有关系。分析关键的加密方法是需要功底的，当然这里还需要注意一个信息，就是Log日志，这有时候也是很重要的一个信息。
###### 第六步：编写代码实现核心逻辑 {.section-subtitle}
当知道了核心方法的逻辑，要想得到正确的密码，还是需要自己用语言去实现逻辑的，需要手动编写代码才能得到正确的密码。
[]{#129.xhtml}
#### 21.2 案例分析 {.bodycontent-title2}
因为逆向是动手操作的过程，所以这里用一个例子来介绍如何操作。本节用阿里2014年安全挑战赛的第一题：AliCrack_one.apk，如图21-1所示。
::: bodypic-c
![](OEBPS/Images/21a1-i.jpg){.calibre726}
:::
图21-1 破解样本\
这个题目输入密码就可以破解了，下面就来看看如何获取这个密码。
###### 第一步：使用apktool来破解apk {.section-subtitle}
命令如下：
::: bodypic-c
![](OEBPS/Images/305-i.jpg){.calibre633}
:::
::: bodypic-c
![](OEBPS/Images/306-i.jpg){.calibre727}
:::
命令不做解释了，但是有一个参数必须带上，那就是：-d。因为这个参数代表反编译得到的smali是Java文件，这里指文件后缀名是Java，如果不带这个参数，后缀名是smali的，但是Eclipse中是不会识别smali文件的，而能识别Java文件，所以这里一定要记得加上这个参数。
反编译成功之后，我们得到了一个out目录，如图21-2所示。
::: bodypic-c
![](OEBPS/Images/21a2-i.jpg){.calibre728}
:::
图21-2 反编译之后的目录\
源码都放在smali文件夹中，如图21-3所示，进入查看一下文件。
::: bodypic-c
![](OEBPS/Images/21a3-i.jpg){.calibre729}
:::
图21-3 smali代码目录\
这里全是Java文件，其实只是后缀名为Java了，内容还是smali文件：
::: bodypic-c
![](OEBPS/Images/306-2-i.jpg){.calibre303}
:::
::: bodypic-c
![](OEBPS/Images/307-i.jpg){.calibre157}
:::
###### 第二步：修改AndroidManifest.xml中的debug属性 {.section-subtitle}
上面反编译成功了，下面为了后续的调试工作，所以还是需要做两件事：
1）修改AndroidManifest.xml中的android：debuggable="true"。
::: bodypic-c
![](OEBPS/Images/307-2-i.jpg){.calibre95}
:::
这个属性在前面介绍run-as命令的时候也提到了，它标识这个应用是否是debug版本，这将会影响到这个应用是否可以被调试，所以这里必须设置成true。
2）在入口处添加waitForDebugger代码进行调试等待。
这里说的入口处就是程序启动的地方，就是一般的入口Activity。查找这个Activity的方法太多了，比如这里直接从上面得到的AndroidManifest.xml中找到，因为入口Activity的action和category是固定的：
::: bodypic-c
![](OEBPS/Images/307-3-i.jpg){.calibre730}
:::
当然还有其他方式，比如用aapt查看apk的内容方式，或者安装apk之后用adb
dumpsys activity
top命令查看。找到入口Activity之后，直接在它的onCreate方法的第一行加上waitForDebugger代码即可，找到对应的MainActivity的smali源码，然后添加一行代码：
::: bodypic-c
![](OEBPS/Images/307-4-i.jpg){.calibre147}
:::
这个是smali语法的，其实对应的Java代码就是：
::: bodypic-c
![](OEBPS/Images/307-5-i.jpg){.calibre731}
:::
::: bodypic-c
![](OEBPS/Images/308-i.jpg){.calibre732}
:::
[注意：]{.yanse}其实还有一种更方便的方式，就是使用am命令，以debug模式启动一个应用：
::: bodypic-c
![](OEBPS/Images/308-2-i.jpg){.calibre93}
:::
后面再进行调试的时候都会采用这种方式了。
###### 第三步：回编译apk并且进行签名安装 {.section-subtitle}
代码如下：
::: bodypic-c
![](OEBPS/Images/308-3-i.jpg){.calibre733}
:::
还是使用apktool进行回编译：
::: bodypic-c
![](OEBPS/Images/308-4-i.jpg){.calibre655}
:::
编译完成之后，将得到debug.apk文件，但是这个apk是没有签名的，所以是不能安装的，那么下面需要进行签名。这里使用Android中的测试程序的签名文件和sign.jar工具进行签名，如图21-4所示。
::: bodypic-c
![](OEBPS/Images/21a4-i.jpg){.calibre734}
:::
图21-4 签名工具signapk.jar
命令如下：
::: bodypic-c
![](OEBPS/Images/309-i.jpg){.calibre102}
:::
签名之后，就可以进行安装了。
###### 第四步：将smali源码导入到Eclipse中 {.section-subtitle}
这里新建一个Java项目，记住不是Android项目，因为最后的调试工作其实是借助于Java的调试器，然后勾选"Use
default
location"选项，选择smali源码目录，也就是上面反编译之后的out目录，点击完成，如图21-5所示。
::: bodypic-c
![](OEBPS/Images/21a5-i.jpg){.calibre735}
:::
图21-5 Eclipse中导入smali项目\
导入源码之后的项目工程结构如图21-6所示。
主要看MainActivity类，如图21-7所示。
###### 第五步：找到关键点，然后打断点 {.section-subtitle}
这一步要具体问题具体分析。比如这个例子中，当输入密码之后，肯定要点击按钮，然后触发密码的校验过程，那么要找到这个button的定义的地方，然后进入它的点击事件中就可以了。这里分为三步走：
1）使用Eclipse自带的View分析工具找到Button的ResId，如图21-8所示。点击之后，需要等待一会，分析View之后的结果，如图21-9所示。
这里能够看到整个当前页面的全部布局，以及每个控件的属性值，需要找到button的resource-id，这里看到定义是@+id/button这个值。
2）得到这个ResId之后，能否在smali项目中全局搜索这个值，就可以定位到这个button的定义的地方呢？如图21-10所示。然后看看搜到的结果，如图21-11所示。
是在资源文件中搜到了这个id的定义，这个id值对应的是0x7F05003E。当然除了这种方式，还有一种方式能快速找到这个id对应的整型值，那就是在反编译之后的values/public.xml文件中，如图21-12所示。
这个文件很有用，它是整个apk中所有资源文件定义的映射内容，比如drawable/string/anim/attr/id等这些资源文件定义的值、名字和整型值对应的地方，如图21-13所示。
::: bodypic-c
![](OEBPS/Images/21a6-i.jpg){.calibre736}
:::
图21-6 导入成功效果图
::: bodypic-c
![](OEBPS/Images/21a7-i.jpg){.calibre737}
:::
图21-7 入口类代码
::: bodypic-c
![](OEBPS/Images/21a8-i.jpg){.calibre738}
:::
图21-8 view分析工具按钮
::: bodypic-c
![](OEBPS/Images/21aa9-i.jpg){.calibre739}
:::
图21-9 分析工具效果图
::: bodypic-c
![](OEBPS/Images/21a10-i.jpg){.calibre740}
:::
图21-10 全局搜索关键字
::: bodypic-c
![](OEBPS/Images/21a11-i.jpg){.calibre741}
:::
图21-11 全局搜索结果
::: bodypic-c
![](OEBPS/Images/21aa12-i.jpg){.calibre742}
:::
图21-12 public.xml文件
::: bodypic-c
![](OEBPS/Images/21a13-i.jpg){.calibre743}
:::
图21-13 public.xml内容
这个文件很重要，是寻找突破口的关键点，比如有时候需要通过字符串内容来定位关键点，这里就可以通过string的定义来找到对应的整型值即可。
当找到了button对应的id值了之后，就可以用这个id值再一次全局搜索一下，因为Android中编译之后的apk，在代码中用到的ResId都是用一个整型值代替的，这个整型值就是在R文件中做了定义，将资源的id和一个值对应起来，然后代码里面一般使用R.id.button这样的值，再编译出apk的时候，这个值就会被替换成对应的整型值，所以再全局搜索0x7F05003E，如图21-14所示。搜索的结果如图21-15所示。
这里就定位到了代码中用到的这个button。进入代码看看，如图21-16所示。在这里看到使用了findViewById的方式定义Button，再简单分析一下smali语法，下面是给button添加一个按钮事件，这里用的是内部类MainActivity\$1，到这个类看看，它肯定实现了OnClickListener接口，那么直接搜onClick方法，如图21-17所示。
::: bodypic-c
![](OEBPS/Images/21a14-i.jpg){.calibre740}
:::
图21-14 全局搜索id值
::: bodypic-c
![](OEBPS/Images/21a15-i.jpg){.calibre744}
:::
图21-15 全局搜索id结果值
::: bodypic-c
![](OEBPS/Images/21a16-i.jpg){.calibre745}
:::
图21-16 定位代码位置
::: bodypic-c
![](OEBPS/Images/21a17-i.jpg){.calibre746}
:::
图21-17 点击事件方法