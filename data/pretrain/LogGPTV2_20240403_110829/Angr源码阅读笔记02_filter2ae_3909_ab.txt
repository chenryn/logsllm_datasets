​ 我们还可以定向查看具体对应的共享库的导入或者导出符号表
    # Relocations don't have a good pretty-printing, so those addresses are python-internal, unrelated to our program
    >>> proj.loader.shared_objects['libc.so.6'].imports
    {u'__libc_enable_secure': ,
     u'__tls_get_addr': ,
     u'_dl_argv': ,
     u'_dl_find_dso_for_object': ,
     u'_dl_starting_up': ,
     u'_rtld_global': ,
     u'_rtld_global_ro': }
###  1.2 CLE源码分析
####  1.2.1 loader类
​
CLE源码文件里的`__init__.py`没有什么值得分析的点，分析CLE包，关键是分析CLE的loader类，这就是源码文件里的`loader.py`
​ 我们当然首先关注loader类的初始化方法
     def __init__(self, main_binary, auto_load_libs=True, concrete_target = None,
                     force_load_libs=(), skip_libs=(),
                     main_opts=None, lib_opts=None, ld_path=(), use_system_libs=True,
                     ignore_import_version_numbers=True, case_insensitive=False, rebase_granularity=0x100000,
                     except_missing_libs=False, aslr=False, perform_relocations=True, load_debug_info=False,
                     page_size=0x1, preload_libs=(), arch=None):
​ 其中的说明文档如下：
        """
        The loader loads all the objects and exports an abstraction of the memory of the process. What you see here is an address space with loaded and rebased binaries.
        :param main_binary:         The path to the main binary you're loading, or a file-like object with the binary in it.The following parameters are optional.
        :param auto_load_libs:      Whether to automatically load shared libraries that loaded objects depend on.
        :param load_debug_info:     Whether to automatically parse DWARF data and search for debug symbol files.
        :param concrete_target:     Whether to instantiate a concrete target for a concrete execution of the process.if this is the case we will need to instantiate a SimConcreteEngine that wraps the ConcreteTarget provided by the user.
        :param force_load_libs:     A list of libraries to load regardless of if they're required by a loaded object.
        :param skip_libs:           A list of libraries to never load, even if they're required by a loaded object.
        :param main_opts:           A dictionary of options to be used loading the main binary.
        :param lib_opts:            A dictionary mapping library names to the dictionaries of options to be used when loading them.
        :param ld_path:      A list of paths in which we can search for shared libraries.
        :param use_system_libs:     Whether or not to search the system load path for requested libraries. Default True.
        :param ignore_import_version_numbers:
                                    Whether libraries with different version numbers in the filename will be considered equivalent, for example libc.so.6 and libc.so.0
        :param case_insensitive:    If this is set to True, filesystem loads will be done case-insensitively regardless of the case-sensitivity of the underlying filesystem.
        :param rebase_granularity:  The alignment to use for rebasing shared objects
        :param except_missing_libs: Throw an exception when a shared library can't be found.
        :param aslr:                Load libraries in symbolic address space. Do not use this option.
        :param page_size:           The granularity with which data is mapped into memory. Set to 1 if you are working in a non-paged environment.
        :param preload_libs:        Similar to `force_load_libs` but will provide for symbol resolution, with precedence over any dependencies.
        :ivar memory:               The loaded, rebased, and relocated memory of the program.
        :vartype memory:            cle.memory.Clemory
        :ivar main_object:          The object representing the main binary (i.e., the executable).
        :ivar shared_objects:       A dictionary mapping loaded library names to the objects representing them.
        :ivar all_objects:          A list containing representations of all the different objects loaded.
        :ivar requested_names:      A set containing the names of all the different shared libraries that were marked as a dependency by somebody.
        :ivar initial_load_objects: A list of all the objects that were loaded as a result of the initial load request.
        When reference is made to a dictionary of options, it requires a dictionary with zero or more of the following keys:
        - backend :             "elf", "pe", "mach-o", "blob" : which loader backend to use
        - arch :                The archinfo.Arch object to use for the binary
        - base_addr :           The address to rebase the object at
        - entry_point :         The entry point to use for the object
        More keys are defined on a per-backend basis.
        """
参数的解析主要如下：
  * main_binary：要加载主要二进制文件的路径，或者一个带有二进制文件的对象
  * auto_load_libs：是否自动加载加载对象所依赖的共享库
  * force_load_libs：要加载的库列表，无论加载的对象是否需要它们
  * skip_libs：永不加载的库列表，即使加载对象需要它们也是如此
  * main_opts：加载主二进制文件的选项字典
  * lib_opts：字典映射库名称到加载它们时要使用的选项的字典
  * custom_ld_path：我们可以在其中搜索共享库的路径列表
  * use_system_libs：是否搜索所请求库的系统加载路径。默认为True
  * ignore_import_version_numbers：文件名中具有不同版本号的库是否会被视为等效，例如libc.so.6和libc.so.0
  * case_insensitive：如果将其设置为True，则无论基础文件系统的区分大小写如何，文件系统加载都将以区分大小写的方式完成
  * rebase_granularity：用于重新定位共享对象的对齐方式
  * except_missing_libs：无法找到共享库时抛出异常
  * aslr：在符号地址空间中加载库（我觉得是指开启ASLR机制）。不要使用此选项
  * page_size：数据映射到内存的粒度。如果在非分页环境中工作，请设置为1
还有一些变量的解释：
  * memory：程序的加载，重新定位和重定位的内存
  * main_object：表示主二进制文件的对象（即可执行文件）
  * shared_objects：将加载的库名称映射到表示它们的对象的字典
  * all_objects：包含加载的所有不同对象的表示的列表
  * requested_names：包含由某人标记为依赖项的所有不同共享库的名称的集合
  * initial_load_objects：由于初始加载请求而加载的所有对象的列表
​ 在加载二进制文件时可以设置特定的参数，使用 `main_opts` 和 `lib_opts` 参数进行设置，例如：
  * `backend`：指定 backend
  * `base_addr` ：指定基址
  * `entry_point` ：指定入口点
  * `arch` ：指定架构
    >>> angr.Project('examples/fauxware/fauxware', main_opts={'backend': 'blob', 'arch': 'i386'}, lib_opts={'libc.so.6': {'backend': 'elf'}})
​ 我们来看看源码
    if hasattr(main_binary, 'seek') and hasattr(main_binary, 'read'):
                self._main_binary_path = None
                self._main_binary_stream = main_binary
            else:
                self._main_binary_path = os.path.realpath(str(main_binary))
                self._main_binary_stream = None
            # whether we are presently in the middle of a load cycle
            self._juggling = False
            # auto_load_libs doesn't make any sense if we have a concrete target.
            if concrete_target:
                auto_load_libs = False
            self._auto_load_libs = auto_load_libs
            self._load_debug_info = load_debug_info
            self._satisfied_deps = dict((x, False) for x in skip_libs)
            self._main_opts = {} if main_opts is None else main_opts
            self._lib_opts = {} if lib_opts is None else lib_opts
            self._custom_ld_path = [ld_path] if type(ld_path) is str else ld_path
            force_load_libs = [force_load_libs] if type(force_load_libs) is str else force_load_libs
            preload_libs = [preload_libs] if type(preload_libs) is str else preload_libs
            self._use_system_libs = use_system_libs
            self._ignore_import_version_numbers = ignore_import_version_numbers
            self._case_insensitive = case_insensitive
            self._rebase_granularity = rebase_granularity
            self._except_missing_libs = except_missing_libs
            self._relocated_objects = set()
            self._perform_relocations = perform_relocations
            # case insensitivity setup
            if sys.platform == 'win32': # TODO: a real check for case insensitive filesystems
                if self._main_binary_path: self._main_binary_path = self._main_binary_path.lower()
                force_load_libs = [x.lower() if type(x) is str else x for x in force_load_libs]
                for x in list(self._satisfied_deps): self._satisfied_deps[x.lower()] = self._satisfied_deps[x]
                for x in list(self._lib_opts): self._lib_opts[x.lower()] = self._lib_opts[x]
                self._custom_ld_path = [x.lower() for x in self._custom_ld_path]
            self.aslr = aslr
            self.page_size = page_size
            self.memory = None
            self.main_object = None
            self.tls = None
            self._kernel_object = None # type: Optional[KernelObject]
            self._extern_object = None # type: Optional[ExternObject]
            self.shared_objects = OrderedDict()
            self.all_objects = []  # type: List[Backend]
            self.requested_names = set()
            if arch is not None:
                self._main_opts.update({'arch': arch})
            self.preload_libs = []
​ 到这里为止都是在使用传入的参数进行对象的初始化，然后
    self.initial_load_objects = self._internal_load(main_binary, *preload_libs, *force_load_libs, preloading=(main_binary, *preload_libs))
​ 这里是在调用内部函数 `_internal_load(main_binary, *force_load_libs)`
加载对象文件。该函数返回一个所加载对象的列表（需要注意的是如果其中有任意一个不能正确加载，函数将会退出）
​ 接下来我们来分析这个内部函数
    def _internal_load(self, *args, preloading=()):
            """
            Pass this any number of files or libraries to load. If it can't load any of them for any reason, it will except out. Note that the semantics of ``auto_load_libs`` and ``except_missing_libs`` apply at all times.
            It will return a list of all the objects successfully loaded, which may be smaller than the list you provided if any of them were previously loaded.
            The ``main_binary`` has to come first, followed by any additional libraries to load this round. To create the effect of "preloading", i.e. ensuring symbols are resolved to preloaded libraries ahead of any others, pass ``preloading`` as a list of identifiers which should be considered preloaded. Note that the identifiers will be compared using object identity.
            """
            # ideal loading pipeline:
            # - load everything, independently and recursively until dependencies are satisfied
            # - resolve symbol-based dependencies
            # - layout address space, including (as a prerequisite) coming up with the layout for tls and externs
            # - map everything into memory
            # - perform relocations
​
开头的语句的意思就是我们可以传递给任意数量的文件或库给这个函数进行加载的处理，需要注意的是如果其中有任意一个不能正确加载，函数将会退出。`auto_load_libs`和`except_missing_libs`参数也将对这个函数对于传入的对象处理产生影响
​
它将返回所有成功加载的对象的列表，该列表可能小于我们提供的希望加载对象的列表。之后的意义大概就是要注意传入列表的顺序，应该首先传入我们希望分析的程序，然后是其它库，在其它库中也应该优先加载符号解析
​ 一个理想完美的加载器应该包含以下内容：
  * 可以独立且递归地加载所有内容，直到满足依赖关系为止
  * 可以解决基于符号的依赖性
  * 拥有完善的布局地址空间，包括能兼容tls和extern的布局空间（作为先决条件）
  * 可以将所有内容映射到内存中
  * 可以完美执行重定位
​
我们的`CLE.loader`也的确是这样设计并这样做的，首先加载所有内容，对于每个二进制文件，独立分别加载，以便我们得到一个Backend实例。如果`auto_load_libs`处于打开状态，则迭代执行此操作，直到满足所有依赖关系为止
     for main_spec in args:
                is_preloading = any(spec is main_spec for spec in preloading)
                if self.find_object(main_spec, extra_objects=objects) is not None:
                    l.info("Skipping load request %s - already loaded", main_spec)
                    continue
                obj = self._load_object_isolated(main_spec)
​ 这里是首先遍历传入的参数，并判断对应的文件是否已经被加载，如果是，则跳过，否则调用函数 `_load_object_isolated()`
加载单个文件。这里我们又要跟进到`_load_object_isolated`函数中，该函数给定一个依赖关系的部分规范，这会将加载的对象作为后端实例返回。它不会触及
Loader 的任何全局数据
​ 我们先来看看这个函数的源码
    def _load_object_isolated(self, spec):
            """
            Given a partial specification of a dependency, this will return the loaded object as a backend instance.
            It will not touch any loader-global data.
            """
            # STEP 1: identify file
            if isinstance(spec, Backend):
                return spec
            elif hasattr(spec, 'read') and hasattr(spec, 'seek'):
                binary_stream = spec
                binary = None
                close = False
            elif type(spec) in (bytes, str):
                binary = self._search_load_path(spec) # this is allowed to cheat and do partial static loading
                l.debug("... using full path %s", binary)
                binary_stream = open(binary, 'rb')
                close = True
            else:
                raise CLEError("Bad library specification: %s" % spec)
            try:
                # STEP 2: collect options