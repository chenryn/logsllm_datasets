iframe.
In an attack known as drag ‘n’ drop clickjacking, 
the attacker loads a JSON response into a hidden 
iframe and tricks a user into dragging the data into 
a frame controlled by the attacker, potentially 
revealing sensitive information. This header pre-
vents this attack in older browsers but has been 
replaced by Content Security Policy in newer 
browsers (see below). It is worth setting both 
headers for now.
58
CHAPTER 2
Secure API development
Modern web browsers also support the Content-Security-Policy header (CSP) that
can be used to reduce the scope for XSS attacks by restricting where scripts can be
loaded from and what they can do. CSP is a valuable defense against XSS in a web
application. For a REST API, many of the CSP directives are not applicable but it is
worth including a minimal CSP header on your API responses so that if an attacker
does manage to exploit an XSS vulnerability they are restricted in what they can do.
Table 2.2 lists the directives I recommend for a HTTP API. The recommended header
for a HTTP API response is:
Content-Security-Policy: default-src 'none'; 
➥  frame-ancestors 'none'; sandbox
2.6.3
Implementing the protections
You should now update the API to implement these protections. You’ll add some filters
that run before and after each request to enforce the recommended security settings. 
 First, add a before() filter that runs before each request and checks that any
POST body submitted to the API has a correct Content-Type header of application/
json. The Natter API only accepts input from POST requests, but if your API handles
other request methods that may contain a body (such as PUT or PATCH requests),
then you should also enforce this filter for those methods. If the content type is incor-
rect, then you should return a 415 Unsupported Media Type status, because this is the
Cache-Control 
and Expires
Controls whether brows-
ers and proxies can 
cache content in the 
response and for 
how long.
These headers should always be set correctly to 
avoid sensitive data being retained in the browser 
or network caches. It can be useful to set default 
cache headers in a before() filter, to allow spe-
cific endpoints to override it if they have more 
specific caching requirements. The safest default is 
to disable caching completely using the no-store 
directive and then selectively re-enable caching for 
individual requests if necessary. The Pragma: 
no-cache header can be used to disable caching 
for older HTTP/1.0 caches.
Table 2.2
Recommended CSP directives for REST responses
Directive
Value
Purpose
default-src
'none'
Prevents the response from loading any scripts or resources.
frame-ancestors
'none'
A replacement for X-Frame-Options, this prevents the response 
being loaded into an iframe.
sandbox
n/a
Disables scripts and other potentially dangerous content from being 
executed.
Table 2.1
Useful security headers (continued)
Security header
Description
Comments
59
Producing safe output
standard status code for this case. You should also explicitly indicate the UTF-8 character-
encoding in the response, to avoid tricks for stealing JSON data by specifying a different
encoding such as UTF-16BE (see https://portswigger.net/blog/json-hijacking-for-the-
modern-web for details).
 Secondly, you’ll add a filter that runs after all requests to add our recommended
security headers to the response. You’ll add this as a Spark afterAfter() filter, which
ensures that the headers will get added to error responses as well as normal responses.
 Listing 2.11 shows your updated main method, incorporating these improve-
ments. Locate the Main.java file under natter-api/src/main/java/com/manning/
apisecurityinaction and open it in your editor. Add the filters to the main() method
below the code that you’ve already written.
public static void main(String... args) throws Exception {
  ..
  before(((request, response) -> {  
    if (request.requestMethod().equals("POST") &&             
        !"application/json".equals(request.contentType())) {  
      halt(415, new JSONObject().put(                
          "error", "Only application/json supported"
      ).toString());
    }
  }));
  afterAfter((request, response) -> {                    
    response.type("application/json;charset=utf-8");
    response.header("X-Content-Type-Options", "nosniff");
    response.header("X-Frame-Options", "DENY");
    response.header("X-XSS-Protection", "0");
    response.header("Cache-Control", "no-store");
    response.header("Content-Security-Policy",
        "default-src 'none'; frame-ancestors 'none'; sandbox");
    response.header("Server", "");
  });
  internalServerError(new JSONObject()
      .put("error", "internal server error").toString());
  notFound(new JSONObject()
      .put("error", "not found").toString());
  exception(IllegalArgumentException.class, Main::badRequest);
  exception(JSONException.class, Main::badRequest);
}
private static void badRequest(Exception ex,
    Request request, Response response) {
  response.status(400);
  response.body(new JSONObject()           
      .put("error", ex.getMessage()).toString());
}
Listing 2.11
Hardening your REST endpoints
Enforce a correct 
Content-Type on 
all methods that 
receive input in 
the request body.
Return a standard 415 
Unsupported Media Type 
response for invalid 
Content-Types.
Collect all your standard 
security headers into a 
filter that runs after 
everything else.
Use a proper JSON 
library for all outputs.
60
CHAPTER 2
Secure API development
You should also alter your exceptions to not echo back malformed user input in any
case. Although the security headers should prevent any bad effects, it’s best practice
not to include user input in error responses just to be sure. It’s easy for a security
header to be accidentally removed, so you should avoid the issue in the first place by
returning a more generic error message:
    if (!owner.matches("[a-zA-Z][a-zA-Z0-9]{0,29}")) {
      throw new IllegalArgumentException("invalid username");
    }
If you must include user input in error messages, then consider sanitizing it first using
a robust library such as the OWASP HTML Sanitizer (https://github.com/OWASP/
java-html-sanitizer) or JSON Sanitizer. This will remove a wide variety of potential XSS
attack vectors.
Answers to pop quiz questions
1
e. Cross-Site Request Forgery (CSRF) was in the Top 10 for many years but has
declined in importance due to improved defenses in web frameworks. CSRF
attacks and defenses are covered in chapter 4.
2
g. Messages from John and all users’ passwords will be returned from the query.
This is known as an SQL injection UNION attack and shows that an attacker is
not limited to retrieving data from the tables involved in the original query but
can also query other tables in the database.
Pop quiz
4
Which security header should be used to prevent web browsers from ignoring the
Content-Type header on a response?
a
Cache-Control
b
Content-Security-Policy
c
X-Frame-Options: deny
d
X-Content-Type-Options: nosniff
e
X-XSS-Protection: 1; mode=block
5
Suppose that your API can produce output in either JSON or XML format, accord-
ing to the Accept header sent by the client. Which of the following should you
not do? (There may be more than one correct answer.)
a
Set the X-Content-Type-Options header.
b
Include un-sanitized input values in error messages.
c
Produce output using a well-tested JSON or XML library.
d
Ensure the Content-Type is correct on any default error responses.
e
Copy the Accept header directly to the Content-Type header in the response.
The answers are at the end of the chapter.
61
Summary
3
b. The attacker can get the program to allocate large byte arrays based on user
input. For a Java int value, the maximum would be a 2GB array, which would
probably allow the attacker to exhaust all available memory with a few requests.
Although passing invalid values is an annoyance, recall from the start of sec-
tion 2.5 that Java is a memory-safe language and so these will result in excep-
tions rather than insecure behavior.
4
d. X-Content-Type-Options: nosniff instructs browsers to respect the Con-
tent-Type header on the response.
5
b and e. You should never include unsanitized input values in error messages,
as this may allow an attacker to inject XSS scripts. You should also never copy
the Accept header from the request into the Content-Type header of a response,
but instead construct it from scratch based on the actual content type that was
produced.
Summary
 SQL injection attacks can be avoided by using prepared statements and param-
eterized queries.
 Database users should be configured to have the minimum privileges they need
to perform their tasks. If the API is ever compromised, this limits the damage
that can be done.
 Inputs should be validated before use to ensure they match expectations. Regu-
lar expressions are a useful tool for input validation, but you should avoid
ReDoS attacks.
 Even if your API does not produce HTML output, you should protect web
browser clients from XSS attacks by ensuring correct JSON is produced with
correct headers to prevent browsers misinterpreting responses as HTML.
 Standard HTTP security headers should be applied to all responses, to ensure
that attackers cannot exploit ambiguity in how browsers process results. Make
sure to double-check all error responses, as these are often forgotten.
62
Securing the Natter API
In the last chapter you learned how to develop the functionality of your API while
avoiding common security flaws. In this chapter you’ll go beyond basic functional-
ity and see how proactive security mechanisms can be added to your API to ensure
all requests are from genuine users and properly authorized. You’ll protect the Nat-
ter API that you developed in chapter 2, applying effective password authentication
using Scrypt, locking down communications with HTTPS, and preventing denial of
service attacks using the Guava rate-limiting library.
This chapter covers
 Authenticating users with HTTP Basic 
authentication
 Authorizing requests with access control lists
 Ensuring accountability through audit logging
 Mitigating denial of service attacks with rate-
limiting
63
Addressing threats with security controls
3.1
Addressing threats with security controls
You’ll protect the Natter API against common threats by applying some basic security
mechanisms (also known as security controls). Figure 3.1 shows the new mechanisms
that you’ll develop, and you can relate each of them to a STRIDE threat (chapter 1)
that they prevent:
 Rate-limiting is used to prevent users overwhelming your API with requests, limit-
ing denial of service threats.
 Encryption ensures that data is kept confidential when sent to or from the API
and when stored on disk, preventing information disclosure. Modern encryp-
tion also prevents data being tampered with.
 Authentication makes sure that users are who they say they are, preventing spoof-
ing. This is essential for accountability, but also a foundation for other security
controls.
 Audit logging is the basis for accountability, to prevent repudiation threats. 
 Finally, you’ll apply access control to preserve confidentiality and integrity, pre-
venting information disclosure, tampering and elevation of privilege attacks.
NOTE
An important detail, shown in figure 3.1, is that only rate-limiting and
access control directly reject requests. A failure in authentication does not
User
Clients
Web browser
Your API
Audit log
Authentication
Application
logic
Access control
Rate-limiting
Mobile app
Security controls
Rate-limiting
rejects requests
when the API
is overloaded.
Authentication
ensures users
are who they say
they are.
An audit
log records
who did what
and when.
Access control decides
whether a request is
allowed or denied.
Encryption protects data
in transit and at rest.
HTTPS
Figure 3.1
Applying security controls to the Natter API. Encryption prevents information disclosure. 
Rate-limiting protects availability. Authentication is used to ensure that users are who they say they 
are. Audit logging records who did what, to support accountability. Access control is then applied to 
enforce integrity and confidentiality.
64
CHAPTER 3
Securing the Natter API
immediately cause a request to fail, but a later access control decision may
reject a request if it is not authenticated. This is important because we want to
ensure that even failed requests are logged, which they would not be if the
authentication process immediately rejected unauthenticated requests.
Together these five basic security controls address the six basic STRIDE threats of
spoofing, tampering, repudiation, information disclosure, denial of service, and eleva-
tion of privilege that were discussed in chapter 1. Each security control is discussed
and implemented in the rest of this chapter.
3.2
Rate-limiting for availability
Threats against availability, such as denial of service (DoS) attacks, can be very difficult
to prevent entirely. Such attacks are often carried out using hijacked computing
resources, allowing an attacker to generate large amounts of traffic with little cost to
themselves. Defending against a DoS attack, on the other hand, can require signifi-
cant resources, costing time and money. But there are several basic steps you can take
to reduce the opportunity for DoS attacks.
DEFINITION
A Denial of Service (DoS) attack aims to prevent legitimate users
from accessing your API. This can include physical attacks, such as unplug-
ging network cables, but more often involves generating large amounts of
traffic to overwhelm your servers. A distributed DoS (DDoS) attack uses many
machines across the internet to generate traffic, making it harder to block
than a single bad client.
Many DoS attacks are caused using unauthenticated requests. One simple way to limit
these kinds of attacks is to never let unauthenticated requests consume resources on
your servers. Authentication is covered in section 3.3 and should be applied immedi-
ately after rate-limiting before any other processing. However, authentication itself
can be expensive so this doesn’t eliminate DoS threats on its own.
NOTE
Never allow unauthenticated requests to consume significant resources
on your server.
Many DDoS attacks rely on some form of amplification so that an unauthenticated
request to one API results in a much larger response that can be directed at the real tar-
get. A popular example are DNS amplification attacks, which take advantage of the unau-
thenticated Domain Name System (DNS) that maps host and domain names into IP
addresses. By spoofing the return address for a DNS query, an attacker can trick the
DNS server into flooding the victim with responses to DNS requests that they never sent.
If enough DNS servers can be recruited into the attack, then a very large amount of
traffic can be generated from a much smaller amount of request traffic, as shown in
figure 3.2. By sending requests from a network of compromised machines (known as a
botnet), the attacker can generate very large amounts of traffic to the victim at little cost
to themselves. DNS amplification is an example of a network-level DoS attack. These
65
Rate-limiting for availability
attacks can be mitigated by filtering out harmful traffic entering your network using a
firewall. Very large attacks can often only be handled by specialist DoS protection ser-
vices provided by companies that have enough network capacity to handle the load.
TIP
Amplification attacks usually exploit weaknesses in protocols based on
UDP (User Datagram Protocol), which are popular in the Internet of Things
(IoT). Securing IoT APIs is covered in chapters 12 and 13.
Network-level DoS attacks can be easy to spot because the traffic is unrelated to legiti-
mate requests to your API. Application-layer DoS attacks attempt to overwhelm an API by
sending valid requests, but at much higher rates than a normal client. A basic defense
against application-layer DoS attacks is to apply rate-limiting to all requests, ensuring
that you never attempt to process more requests than your server can handle. It is bet-
ter to reject some requests in this case, than to crash trying to process everything. Gen-
uine clients can retry their requests later when the system has returned to normal.
DEFINITION
Application-layer DoS attacks (also known as layer-7 or L7 DoS) send
syntactically valid requests to your API but try to overwhelm it by sending a
very large volume of requests.
Rate-limiting should be the very first security decision made when a request reaches
your API. Because the goal of rate-limiting is ensuring that your API has enough
resources to be able to process accepted requests, you need to ensure that requests
that exceed your API’s capacities are rejected quickly and very early in processing.
Other security controls, such as authentication, can use significant resources, so rate-
limiting must be applied before those processes, as shown in figure 3.3.
Attacker
Victim
DNS server
DNS server
DNS server
Attacker sends
small requests to
multiple DNS servers,
spooﬁng the return
IP address.
The DNS servers
reply with much
larger responses to
the victim’s machine.
Figure 3.2
In a DNS amplification attack, the attacker sends the same DNS query to many DNS 
servers, spoofing their IP address to look like the request came from the victim. By carefully 
choosing the DNS query, the server can be tricked into replying with much more data than was in 
the original query, flooding the victim with traffic.
66
CHAPTER 3
Securing the Natter API
TIP