title:EagleEye: Towards mandatory security monitoring in virtualized datacenter
environment
author:Yu-Sung Wu and
Pei-Keng Sun and
Chun-Chi Huang and
Sung-Jer Lu and
Syu-Fang Lai and
Yi-Yung Chen
EagleEye: Towards Mandatory Security Monitoring 
in Virtualized Datacenter Environment 
Yu-Sung Wu*, Pei-Keng Sun, Chun-Chi Huang, Sung-Jer Lu, Syu-Fang Lai and Yi-Yung Chen 
Department of Computer Science 
National Chiao Tung University, Taiwan 
PI:EMAIL, PI:EMAIL, PI:EMAIL,  
 PI:EMAIL, PI:EMAIL,  PI:EMAIL 
cloud 
computing. 
infrastructure-as-a-service 
Virtualized datacenter (VDC) has become a popular approach 
to  large-scale  system  consolidation  and  the  enabling  technology 
for 
The 
consolidation  inevitably  aggregates  the  security  threats  once 
faced by individual systems towards a VDC, and a VDC operator 
should remain vigilant of the threats at all times. We envision the 
need  for  on-demand  mandatory  security  monitoring  of  critical 
guest systems as a means to track and deter security threats that 
could jeopardize the operation of a VDC. Unfortunately, existing 
VDC  security  monitoring  mechanisms  all  require  pre-installed 
guest  components  to  operate.  The  security  monitoring  would 
either  be  up  to  the  discretion  of  individual  tenants  or  require 
costly direct management of guest systems by the VDC operator. 
We  propose  the  EagleEye  approach  for  on-demand  mandatory 
security monitoring in VDC environment, which does not depend 
on pre-installed guest components. We implement a prototype on-
access  anti-virus  monitor  to  demonstrate  the  feasibility  of  the 
EagleEye approach. We also identify challenges particular to this 
approach,  and  provide  a  set  of  solutions  meant  to  strengthen 
future research in this area. 
I. 
INTRODUCTION 
Virtualization is a generic approach to achieve system-level 
consolidation  in  datacenter  environments.  It  brings  together 
systems  running  diverse  applications  and 
transforms  a 
datacenter  into  a  so-called  virtualized  datacenter  (VDC).  A 
VDC naturally inherits all the security threats faced by each of 
the  hosted  systems.  In  addition,  the  diverse  composition  of 
systems  in  a  VDC  implies  a  high  likelihood  of  inconsistent 
and/or ineffective security policy implementation, which makes 
it difficult to ascertain if a given security threat has indeed be 
ruled  out  per  the  built-in  security  isolation  mechanism  at  the 
VDC infrastructure layer. It is therefore important that a VDC 
operator  should  remain  vigilant  of  the  security  threats  at  all 
times  and  have  the  ability  to  apply  security  monitoring  on 
critical  systems  in  the  environment  as  a  means  to  track  and 
deter the threats that could jeopardize the operation of the VDC.  
Security monitoring in VDC environment can be intuitively 
implemented through deploying security monitors such as anti-
virus scanners within each virtual machine (VM) (also referred 
to  as  a  guest  system)  hosted  by  the  VDC.  However,  with 
thousands or even more number of customized VMs in a VDC  
[1], it will be a quite expensive process for a VDC operator to 
deploy  and  manage  security  monitors  in each  of  the  VMs.  In 
addition,  VMs  in  a  large-scale  VDC  are  often  managed  by 
individual tenants and not by the datacenter operator. One will 
have  to  rely  on  individual  tenants  to  deploy  and  manage  the 
978-1-4799-0181-4/13/$31.00 Â©2013 IEEE
security  monitors  in  their  respective  VMs.  Obviously,  this 
approach 
tenant  can 
inadvertently  disable  the  security  monitor,  and  a  malicious 
tenant may even attempt to tamper with the security monitor. 
is  problematic  since  a  negligent 
Motivated  by  the  above  difficulties,  we  propose  the 
EagleEye  mandatory  security  monitoring  approach  for  VDC 
environment.  In  the  approach,  security  monitors  are  placed 
externally  to  the  guest  VMs.  There  is  no  requirement  for 
installing guest components in the VMs. It requires no attention 
or cooperation from the VM tenants. The approach also allows 
automated deployment and management of security monitors in 
a  VDC  environment.  To  demonstrate  the  feasibility  of  the 
proposed  approach,  we  built  a  prototype  on-access  malware 
detection system for guest VMs in a VDC.  
Contributions.  We  propose  the  EagleEye  approach  for 
mandatory  security  monitoring  in  VDC  environment.  The 
approach  requires  neither  modification  to  guest  system  nor 
cooperation  from  the  VM  tenants.  The  EagleEye  prototype 
system is the first system to demonstrate the feasibility of on-
demand mandatory security monitoring for VDC environment 
with  respect  to  a  real-world  security  monitoring  application. 
The  approach  depends  on  novel  techniques  for  achieving 
resolving 
transparent  guest 
inconsistent  guest 
security 
monitoring,  bridging  the  semantic  gap  across  complex  black-
box  guest  system  models,  and  reducing  the  performance 
overhead of blocking-wait in the synchronous monitoring mode.   
system  event 
states  during 
interception, 
synchronous 
II.  BACKGROUND 
Due  to  the  aggregation  of  systems  and  its  abundant 
computing  resources, a  VDC is  both a  conspicuous  target  for 
security  attacks  and  a  powerful  platform  for  carrying  out 
attacks.  Real-world  incidents  such  as  Amazon  EC2  being 
leveraged  for  running  Zeus  botnet  [2]  and  fueling  the  attack 
against  Sony  PlayStation  Network  [3]  are  examples  of  why 
security monitoring for VDC environment is an important issue 
to look at.  
The conventional approach for security monitoring in VDC 
environment  is  through  installing  security  monitors  on  each 
VM as shown in Figure 1 (a). Installing the same set of security 
monitors on every VM is no doubt a waste of storage space. It 
can  also  lead  to  unwanted  resource  contention  (e.g.  the  anti-
virus storm effect [4]). And, if the VMs are not managed by the 
VDC operator, it will also require cooperation of the tenants for 
the deployment and management of the security monitors. 
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 07:57:09 UTC from IEEE Xplore.  Restrictions apply. 
The  para-virtualization  approach  (Figure  1  (b))  aims  at 
consolidating  security  monitors  into  a  dedicated  VM  (often 
referred  to  as  the  security  VM  [5,  6]).    Only  a  tiny  guest 
component  (e.g.  a  light-weight  agent  program  or  a  driver)  is 
required to be pre-installed in each VM. The guest component 
can attach hooks in the guest system to intercept system events 
and leverage  the  guest  APIs to inspect  the  system  states. The 
guest event and state information will then be forwarded to the 
external  monitor  for  analysis  and  attack  detection.  The  para-
virtualization  approach  allows  VMs  on  a  hypervisor  to  share 
the  same  security  monitor  backend 
thereby  avoiding 
overlapping resource usages. The approach has been adopted in 
commercial  datacenter  security  solutions  such  as  VMware 
VMsafe  [7],  McAfee  MOVE  [8]  ,  and  TrendMicro  Deep 
Security [9].  
Security 
VM
Guest VM
User Space
Monitor
Hook
API
Kernel
Security 
VM
Guest VM
User Space
Kernel
Monitor
Hook
API
VMM
(a) conventional
(introspection)
VMM
(b) para-virtualization
Figure 1. Security Monitoring in VDC 
III.  THE EAGLEEYE APPROACH 
Both the conventional approach and the para-virtualization 
approach  require  modification  to  the  guest  VMs  and,  by 
extension, would depend on the cooperation of VM tenants. For 
a sizable VDC, both requirements are difficult to achieve. The 
outcome  will  be  an 
security  monitoring 
infrastructure by design.  
incomplete 
In view of the difficulties with the existing approaches, we 
the  EagleEye  approach  of  mandatory  security 
propose 
monitoring for VDC environment. We set the following goals 
in the design of EagleEye:  
1.  Security monitoring should not depend on pre-installed 
guest components 
2.  Isolation of security monitor from the guest VMs  
3.  Applicable 
real-world 
security  monitoring 
to 
applications  
4.  Synchronous response to security threats  
Following  the  first  and  the  second  requirements,  the 
architecture  of  EagleEye  is  illustrated  in  Figure  2.  The 
architecture  consists  of  two  key  components.  The  first  key 
component  is  the  EagleEye  hypervisor  module  (E2D)  for 
intercepting  code  execution  and  memory  events  and  for  the 
introspection of guest memory. The other key component is the 
EagleEye  daemon  (E2D)  running  in  the  security  domain.  The 
daemon  exposes  an  interface  to  extensible  detection  engine 
modules,  which  implement  respective  security  monitoring 
logics such as malware detection, network intrusion detection, 
and etc. On the other hand, E2D will interact with E2H to carry 
out  the  monitoring  of  guest  events  and  states.  The  stealthy 
hooks (SH) will be installed at runtime, and the idle loops are a 
optional  component  used  for  improving  performance  (Sec. 
III.F).  
SH
Stealthy Hook
Event 
Interception
Security VM
Detection Engine #1
Detection Engine #2
Introspection
Guest VM
EagleEye Daemon
Replication of High-
Level Representations
User 
process
SH
User 
process
Memory 
Introspection
Disk 
Introspection
Event 
Handler
Device I/O 
Event Hook
Device Models
Idle Loops
SH
Guest OS  
Kernel
Hypervisor
EagleEye 
Hypervisor Module
Memory Event Hook
Deferred 
Introspection
Figure 2. EagleEye Architecture 
Following  the  third  requirement,  EagleEye  has  to  provide 
the  information  needed  by  the  detection  engines.  Security 
monitoring  applications  generally  operate  on  the  basis  of 
detecting malicious or anomalous patterns in the system states 
as  indications  of  security  threats.  The  system  states  can  be 
boiled  down  to  memory  state,  disk  state,  and  CPU  state. 
EagleEye  leverages  existing  VM  introspection  techniques  [6, 
10] to extract CPU and memory states of a VM. And, through a 
modified  QEMU  device  model  module,  EagleEye  also  has 
access to a VMâs disk content down to the block level on the 
Xen  virtualization  platform.  However,  both  the  memory  data 
and  disk  contents  can  be  inconsistent  at  the  time  of  VM 
introspection.    EagleEye  employs  two  novel  techniques  to 
address the inconsistency in memory data (Sec. III.D) and the 
inconsistency in disk content (Sec. III.E) respectively. 
For the fourth requirement, EagleEye supports synchronous 
inspection  of  guest  states  by  allowing  execution  hooks  to  be 
placed in both the guest kernel and the guest user process text 
segments.  The  hook  does  not  depend  on  pre-installed  guest 
components and are hidden from the guest system (Sec. III.C). 
A.  Threat Model 
EagleEye  targets  the  threats  posed  by  the  inability  to 
implement mandatory security monitoring for guest VMs in an 
VDC environment. The threats are real because the VM tenants 
are  not  necessarily  security-conscious.  And,  a  security-
conscious tenant can make mistakes (e.g. forgot to re-enable a 
monitor driver after a system upgrade). It is also likely that a 
tenant may be non-cooperating or be malicious.  
EagleEye is designed to be operated by datacenter operators 
for the purpose of monitoring security threats in the guest VMs. 
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 07:57:09 UTC from IEEE Xplore.  Restrictions apply. 
As such, we assume that the datacenter operators are trusted. A 
malicious datacenter operator can possibly use EagleEye to spy 
on the guest VMs. 
EagleEye  runs  in  dom0  and  the  hypervisor  layer.  We 
assume  both  the  management  VM (dom0)  and the  hypervisor 
are trusted. One may leverage work such as Hypersafe [11] that 
enforces  hypervisor  control-flow  integrity  and  work  such  as 
CloudVisor  [12]  that  reduces  the  TCB  of  a  hypervisor  to 
strengthen the assumption. 
EagleEye,  by  itself,  does  not  decide  whether  a  security 
threat  is  present or  not. The decision is  made  by  the attached 
detection engines based on the guest system states and events 
supplied by EagleEye. Evasion attacks targeting blind spots of 
a  detection  engine  will  also  succeed  under  EagleEye.  For 
instance,  if  a  security  threat  uses  a  non-standard  system  call 
invocation  that  the  detection  engine  is  unaware  of,  then  that 
threat will evade the detection under EagleEye as well. It is up 
to the detection engine to set up extra event interception points 
with EagleEye to track the non-standard system call invocation. 
B.  Event Interception for Synchronous Security Monitoring 
Aside from allowing a detection engine to passively inspect 
the memory and disk states of a VM through VM introspection, 
EagleEye  also  support  synchronous  security  monitoring  by 
allowing the interception of guest system events, which include 
block  device  I/O  events,  memory  access  events,  and  code 
execution events.  
intercepting  code  execution  event 
Different  from  existing  approaches  [8,  9,  13,  14  ],  event 
interception in EagleEye does not depend on pre-installed guest 
components  (e.g.  a  PV-driver).  For  device  I/O  event,  the 
interception  points  can  be  implemented  at  the  device  model 
layer  (Sec.  IV.B).  For  memory  access  event,  the  interception 
points can be implemented at the hardware layer (Sec. IV.B). 
Both  can  be  achieved  without  relying  on  a  guest  component. 
However, 
is  not  as 
straightforward. We need a mechanism to divert code execution 
in the VM to an external security monitor when a condition on 
the  code  execution  is  met.  The  most  primitive  condition  is 
when an instruction at a specific memory address is about to be 
executed.    On  top  of  that,  one  can  further  check  for  specific 
register values or memory fields to construct a more complex 
code  execution  event.  Early  work  on  code  execution  event 
interception either requires a PV-driver [5] or is restricted to the 
interception of system calls (e.g. setting MSR.EIP to an invalid 
virtual address) or is too heavy-weight to be used for security 
monitoring in production systems (e.g. single-stepping through 
every guest VM instruction [15]).  
In EagleEye, we designed a general purpose code execution 
interception  mechanism  that  allows  hooks  to  be  placed  at 
arbitrary  code  execution  points  in  the  guest  (Sec.  III.C).  It  is 
important  that  the  hooks  should  not  interfere  with  guest 
functionalities. Ideally, the hooks should be stealthy so that the 
guest  is  completely  unaware  of  its  existence.  Also,  the  hooks 
should incur minimal overhead, which turns out to be a difficult 
challenge because EagleEye has no access to the guest kernel 
scheduler (Sec. III.F).  
C.  Stealthy Hook 
The  code  execution  event  interception  in  EagleEye  is 
achieved through  the  stealthy  hook  mechanism.  Each  stealthy 
hook is essentially a CPUID instruction (machine code 0F A2), 
which  occupies  only  two  bytes  of  memory  space.  The 
execution of the CPUID instruction in the guest will trigger a 
VMEXIT event into the hypervisor, which gives EagleEye the 
chance to invoke the corresponding security monitoring process 
flow. From a practical point of view, the stealthy hook can be 
placed at any code location in the guest. The only restriction is 
that the location has to have a contiguous block of at least two 
bytes in length and the code execution on the block has to be 
sequential (i.e. there is no jump / branch into the middle of the 
block). 
 An  example  of  the  CPUID-based  hook  is  presented  in 
Figure 3. In the example, we place a hook at offset 0x000 right 
on top of the SWAPGS instruction. As SWAPGS has a machine 
code length of three bytes, a residual CLC instruction (machine 
code F8) is left right behind the CPUID instruction. When the 
guest  code  execution  reaches  the  hook  location  (i.e.  offset 
0x000), a VMEXIT event will be triggered due to the execution 
of the CPUID instruction. Control flow will be diverted into the 
hypervisor (Step 1), where EagleEye will check if the CPUID 
is  due  to  a  stealthy  hook  previously  installed.  If  not,  it  will 
leave it to the hypervisor to emulate the effect of running the 
CPUID  instruction  and  initiate  a  VMENTER  to  return  to  the 
next instruction following the CPUID in the guest (Step 2). If 
the CPUID is due to a stealthy hook, EagleEye will invoke the 
security  monitor  (and  the  corresponding  detection  engines) 
(Step  3).  Once  the  security  monitor  check  finishes  with  a 
positive  acknowledgement,  EagleEye  will  then  emulate  the 
overwritten  instruction  for  the  guest  (Step  4)  and  initiate  a 
VMENTER to return back to the next instruction following the 
overwritten  instruction  in  the  guest  (Step  5).  If  the  security 
monitor 
positive 
acknowledgement),  there  are  various  ways  to  abort  the  code 
execution. The most extreme way is to kill the whole VM. A 