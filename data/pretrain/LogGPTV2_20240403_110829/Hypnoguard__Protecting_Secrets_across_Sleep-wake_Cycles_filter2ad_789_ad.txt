TION AND DECRYPTION
The adoptability of the primary Hypnoguard variant based
on full memory encryption/decryption mandates a minimal
impact on user experience. Below, we discuss issues related
to our implementation of quick memory encryption.
For all our modes of operation with AES-NI, the process-
ing is 16-byte-oriented (i.e., 128-bit AES blocks) and han-
dled in XMM registers.
In-place memory encryption/de-
cryption is intrinsically supported by taking an input block
at a certain location, and overwriting it with the output of
the corresponding operation. Therefore, no extra memory
needs to be reserved, and thus no performance overhead for
data transfer is incurred.
5.1 Enabling techniques
Native execution. We cannot perform in-place memory
encryption when the OS is active, due to OS memory pro-
tection and memory read/write operations by the OS. Thus,
the OS must be inactive when we start memory encryption.
Likewise, at wakeup-time in TXT, there is no OS run-time
support for decryption. We need to perform a single-block
RSA decryption using HGpriv to decrypt the 128-bit AES
memory encryption key SK. On the other hand, we need fast
AES implementation to encrypt the whole memory (e.g.,
8GB), and thus, we leverage new AES instructions in mod-
ern CPUs (e.g., Intel AES-NI). AES-NI oﬀers signiﬁcant per-
formance boost (e.g., about six times in one test [8]). Al-
though several crypto libraries now enable easy-to-use sup-
port for AES-NI, we cannot use such libraries, or the kernel-
shipped library, as we do not have the OS/run-time sup-
port. We use Intel’s AES-NI library [52], with minor but
non-trivial modiﬁcations (discussed in our tech report [71]).
OS-less multi-core processing. Outside the OS, no easy-
to-use parallel processing interface is available. With one
processor core, we achieved 3.3–4GB/s with AES-NI, which
would require more than 2 seconds for 8GB RAM (still less
satisfactory, considering 3 cores being idle). Thus, to lever-
age multiple cores, we develop our own multi-core processing
engine, mostly following the Intel MultiProcessor Speciﬁca-
tion [32]. Our choice of decrypting in TXT is non-essential,
as SK is generated per sleep-wake cycle and requires no TXT
protection; however, the current logic is simpler and requires
no post-TXT cleanup for native multi-core processing.
Modes of operation. Intel’s AES-NI library oﬀers ECB,
CTR and CBC modes. We use AES in CTR mode as the
default option (with a random value as the initial counter);
compared to CBC, CTR’s performance is better, and sym-
metric between encryption and decryption speeds (recall
that CBC encryption cannot be parallelized due to chain-
ing). In our test, CBC achieves 4.5GB/s for encryption and
8.4GB/s for decryption.
In CTR mode, a more satisfac-
tory performance is achieved: 8.7GB/s for encryption and
8.5GB/s for decryption (approximately).
When ciphertext integrity is required to address content
modiﬁcation attacks, AES-GCM might be a better trade-oﬀ
between security and performance. We have implemented a
Hypnoguard variant with a custom, performance-optimized
AES-GCM mode; for implementation details and challenges,
see our tech report [71].
5.2 Performance analysis
Relationship between number of CPU cores and per-
formance. For AES-CTR, we achieved 3.3–4GB/s (3.7GB/s
on average), using a single core. After a preliminary evalua-
tion, we found the performance is not linear to the number
of processor cores, i.e., using 4 cores does not achieve the
speed of 16GB/s, but at most 8.7GB/s (8.3GB/s on 3 cores
and 7.25GB/s on 2 cores).
A potential cause could be Intel Turbo Boost [9] that
temporarily increases the CPU frequency when certain lim-
its are not exceeded (possibly when a single core is used).
Suspecting the throughput of the system RAM to be the
primary bottleneck (DDR3), we performed benchmark tests
with user-space tools, e.g., mbw [28], which simply measures
memcpy and variable assignment for an array of arbitrary
size. The maximum rate did not surpass 8.3GB/s, possibly
due to interference from other processes.
During the tests with GCM mode, our observation demon-
strates the incremental improvement of our implementation:
2.5GB/s (1-block decryption in C using one core), 3.22GB/s
(1-block decryption in C using four cores), 3.3GB/s (4-block
decryption in C using four cores), 5GB/s (4-block decryp-
tion in assembly using four cores), and 6.8GB/s (4-block
decryption in assembly with our custom AES-GCM [71]).
The encryption function in assembly provided by Intel al-
ready works satisfactorily, which we do not change further.
The performance numbers are listed in Table 1.
At the end, when ciphertext integrity is not considered
(the default option), 8.7GB/s in CTR mode satisﬁes our
requirement of not aﬀecting user experience, speciﬁcally, for
systems up to 8GB RAM. When GCM is used for ciphertext
integrity, we achieve 7.4GB/s for encryption and 6.8GB/s
for decryption (i.e., 1.08 seconds for entering sleep and 1.18
seconds for waking up, which is very close to our 1-second
delay limit). Note that, we have zero run-time overhead,
after the OS is resumed.
6. VARIANTS
For systems with larger RAM (e.g., 32GB), Hypnoguard
may induce noticeable delays during sleep-wake cycles, if the
whole memory is encrypted. For example, according to our
current performance (see Section 5), if a gaming system has
32GB RAM, it will take about four seconds for both enter-
ing sleep and waking up (in CTR mode), which might be
unacceptable. To accommodate such systems, we propose
two variants of Hypnoguard, where we protect (i) all mem-
ory pages of selected processes—requires no modiﬁcations
to applications; and (ii) selected security-sensitive memory
pages of certain processes—requires modiﬁcations. Note
that, these variants require changes in HypnoOSService, but
HypnoCore and HypnoDrivers remain unchanged (i.e., un-
aﬀected by the OS-level implementation mechanisms).
(i) Per-process memory encryption. Compared to the
design in Section 3, this variant diﬀers only at the choice
of the encryption scope.
It accepts a process list (e.g.,
supplied by the user) and traverses all memory pages al-
located to those processes to determine the scope of encryp-
tion. We retrieve the virtual memory areas (VMA, of type
vm area struct) from task −−> mm −−> mmap of each pro-
cess. Then we break the areas down into memory pages (in
our case, 4K-sized) before converting them over to physical
addresses. This is necessary even if a region is continuous
as VMAs, because the physical addresses of corresponding
pages might not be continuous. We store the page list in
Hypnoguard-reserved memory.
Our evaluation shows that the extra overhead of mem-
ory traversal is negligible. This holds with the assumption
that the selected apps are allocated a small fraction of a
large memory; otherwise, the full memory or mmap-based
variant might be a better choice. For smaller apps such as
bash (38 VMAs totaling 1,864 pages, approximately 7MB),
it takes 5 microseconds to traverse through and build the
list. For large apps such as Firefox (723 VMAs totaling
235,814 pages, approximately 1GB), it takes no more than
253 microseconds. Other apps we tested are Xorg (167 mi-
croseconds) and gedit (85 microseconds). We are yet to fully
integrate this variant into our implementation (requires a
more complex multi-core processing engine).
(ii) Hypnoguard-managed memory pages via mmap().
There are also situations where a memory-intensive appli-
cation has only a small amount of secret data to protect.
Assuming per-application changes are acceptable, we imple-
ment a second variant of Hypnoguard that exposes a ﬁle
system interface compliant with the POSIX call mmap(),
allowing applications to allocate pages from a Hypnoguard-
managed memory region.
The mmap() function is deﬁned in the ﬁle operations struc-
ture, supported by kernel drivers exposing a device node in
the ﬁle system. An application can request a page to be
mapped to its address space on each mmap call, e.g., instead
of calling malloc(). On return, a virtual address mapped
CTR (1-core)
Encryption
Decryption
3.7GB/s
3.7GB/s
CTR
8.7GB/s
8.7GB/s
CBC
GCM-C1 (1-core) GCM-C1 GCM-C4 GCM-A4 GCM-A4T
4.5GB/s
8.4GB/s
—
—
—
—
2.5GB/s
3.22GB/s
3.3GB/s
5GB/s
7.4GB/s
6.8GB/s
Table 1: A comparative list of encryption/decryption performance. Column headings refer to various modes of operation,
along with the source language (when applicable; A represents assembly); the trailing number is the number of blocks processed
at a time. A4T is our adapted GCM implementation in assembly processing 4 blocks at a time, with delayed tag veriﬁcation
(see [71]); — means not evaluated.
into the application’s space is generated by Hypnoguard us-
ing remap pfn range(). An application only needs to call
mmap(), and use the returned memory as its own, e.g., to
store its secrets. Then the page is automatically protected
by Hypnoguard the same way as the full memory encryption,
i.e., encrypted before sleep and decrypted at wakeup. The
application can use multiple pages as needed. We currently
do not consider releasing such pages (i.e., no unmap()), as
we consider a page to remain sensitive once it has been used
to store secrets. Note that, no kernel patch is required to
support this variant. We tested it with our custom appli-
cation requesting pages to protect its artiﬁcial secrets. We
observed no latency or other anomalies.
7. SECURITY ANALYSIS
Below, we discuss potential attacks against Hypnoguard;
see also Sections 2.3 and 3.3 for related discussion.
(a) Cold-boot and DMA attacks. As no plaintext se-
crets exist in memory after the system switches to sleep
mode, cold-boot or DMA attacks cannot compromise mem-
ory conﬁdentiality; see Section 3.3, under G1. Also, the
password evaluation process happens inside the TPM (as
TPM receives it through one command and compares with
its preconﬁgured value; see Section 3.2), and thus the cor-
rect password is not revealed in memory for comparison.
At wakeup-time, DMA attacks will also fail due to memory
access restrictions (TXT/VT-d).
(b) Reboot-and-retrieve attack. The adversary can
simply give up on waking back to the original OS session,
and soft-reboot the system from any media of his choice, to
dump an arbitrary portion of the RAM, with most content
unchanged (the so-called warm boot attacks, e.g., [10, 66,
65]). Several such tools exist, some of which are applicable
to locked computers, see e.g., [16]. With Hypnoguard, as
the whole RAM is encrypted, this is not a threat any more.
(c) Consequence of key deletion. The deletion of HGpriv
severely restricts guessing attacks on lost/stolen computers.
For coercive situations, deletion is needed so that an attacker
cannot force users to reveal the Hypnoguard password after
taking a memory dump of the encrypted content. Although
we use a random AES key SK for each sleep-wake cycle,
simply rebooting the machine without key deletion may not
suﬃce, as the attacker can store all encrypted memory con-
tent, including SK encrypted by HGpub. If HGpriv can be
learned afterwards (e.g., via coercion of the user password),
the attacker can then decrypt SK, and reveal memory con-
tent for the target session.
If a boot-time anti-coercion tool, e.g., Gracewipe [70] is
integrated with Hypnoguard, the deletion of HGpriv may
also require triggering the deletion of Gracewipe secrets.
Hypnoguard can easily trigger such deletion by overwrit-
ing TPM NVRAM indices used by Gracewipe, which we
have veriﬁed in our installation. From a usability perspec-
tive, the consequence of key deletion in Hypnoguard is to
reboot and rebuild the user secrets in RAM, e.g., unlock-
ing an encrypted disk, password manager, or logging back
into security-sensitive websites. With Gracewipe integra-
tion, triggering deletion will cause loss of access to disk data.
(d) Compromising the S3 resume path. We are un-
aware of any DMA attacks that can succeed when the system
is in sleep, as such attacks require an active protocol stack
(e.g., that of FireWire). Even if the adversary can use DMA
attacks to alter RAM content in sleep, bypassing Hypno-
guard still reveals no secrets, due to full memory encryption
and the unforgeability of TPM measurements. Similarly,
replacing the Hypnoguard waking vector with an attacker
chosen one (as our waking vector resides in memory unen-
crypted), e.g., by exploiting vulnerabilities in UEFI resume
boot script [33, 67] (if possible), also has no eﬀect on memory
conﬁdentiality. Any manipulation attack, e.g., insertion of
malicious code via a custom DRAM interposer, on the en-
crypted RAM content to compromise the OS/applications
after wakeup is addressed by our GCM mode implementa-
tion (out of scope for the default CTR implementation).
(e) Interrupting the key deletion. There have been a
few past attacks about tapping TPM pins to detect the dele-
tion when it is triggered (for guessing without any penalty).
Such threats are discussed elsewhere (e.g., [70]), and can be
addressed, e.g., via redundant TPM write operations.
(f ) Other hardware attacks. Ad-hoc hardware attacks
to sniﬀ the system bus for secrets (e.g., [7]) are generally