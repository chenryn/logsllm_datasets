714 
逆向工程权威指南（下册） 
; ECX=SystemSuperfetchInformation 
                 call     cs:__imp_NtQuerySystemInformation ; not zero 
出现这种指令的具体原因不明。但是 MSVC 编译器还是经常如此分配指令。或许 LEA 指令会带来速
度或性能方面的好处吧。 
您还可以在指令清单 64.7（64.5.1 节）里看到这种情况。 
异步社区会员 dearfuture(15918834820) 专享 尊重版权
第
第 7755 章
章    修
修改
改彩
彩球
球游
游戏
戏  
彩球游戏有多个衍生版本。本章采用的是 1997 年发布的 BallTrix 版。这款程序可从 http://go.yurichev. 
com/17311 公开下载。它的图形界面如图 75.1 所示。 
图 75.1  游戏界面 
本章关注它的随机生成器，以及修改这个组件的具体方法。IDA 在 balltrix.exe 里识别出了标准函数
_rand。这个函数的地址是 0x00403DA0。不仅如此，IDA 还判断出该函数只会被这一处调用。 
.text:00402C9C sub_402C9C   
proc near    
; CODE XREF: sub_402ACA+52 
.text:00402C9C                         
; sub_402ACA+64 ... 
.text:00402C9C 
.text:00402C9C arg_0        
= dword ptr  8 
.text:00402C9C             
.text:00402C9C             
push     ebp 
.text:00402C9D             
mov      ebp, esp 
.text:00402C9F             
push     ebx 
.text:00402CA0             
push     esi 
.text:00402CA1             
push     edi 
.text:00402CA2             
mov      eax, dword_40D430 
.text:00402CA7             
imul     eax, dword_40D440 
.text:00402CAE             
add      eax, dword_40D5C8 
.text:00402CB4             
mov      ecx, 32000 
.text:00402CB9             
cdq 
.text:00402CBA             
idiv     ecx 
.text:00402CBC             
mov      dword_40D440, edx 
.text:00402CC2             
call     _rand 
.text:00402CC7             
cdq 
.text:00402CC8             
idiv     [ebp+arg_0] 
.text:00402CCB             
mov      dword_40D430, edx 
.text:00402CD1             
mov     eax, dword_40D430 
.text:00402CD6             
jmp     $+5 
.text:00402CDB             
pop     edi 
.text:00402CDC             
pop     esi 
.text:00402CDD             
pop     ebx 
.text:00402CDE             
leave 
.text:00402CDF             
retn   
.text:00402CDF sub_402C9C   
endp 
异步社区会员 dearfuture(15918834820) 专享 尊重版权
716 
逆向工程权威指南（下册） 
为了便于讨论，我们把_rand 函数的调用方函数叫作“random”。在程序里有三处的代码调用了 random 函数。 
调用 random 函数的前两处代码是： 
.text:00402B16     
mov      eax, dword_40C03C ; 10 here 
.text:00402B1B     
push     eax 
.text:00402B1C     
call     random 
.text:00402B21     
add      esp, 4 
.text:00402B24     
inc      eax 
.text:00402B25     
mov      [ebp+var_C], eax 
.text:00402B28     
mov      eax, dword_40C040 ; 10 here 
.text:00402B2D     
push     eax 
.text:00402B2E     
call     random 
.text:00402B33     
add      esp, 4 
调用 random 函数的第三处代码是： 
.text:00402BBB     
mov      eax, dword_40C058 ; 5 here 
.text:00402BC0     
push     eax 
.text:00402BC1     
call     random 
.text:00402BC6     
add      esp, 4 
.text:00402BC9     
inc      eax 
综合上述代码，我们可以判定该函数只有一个参数。前两处传递的参数是 10，第三处传递的参数是 5。
在观察游戏的界面后，可知棋盘是 10×10 的方阵，而彩球的颜色总共有 5 种。这三处调用 random 的指令，
必定是坐标和颜色的生成指令。标准的随机函数 rand()函数会生成一个在 0～0x7FFF 之间的返回值，用起
来并不方便。实际上，编程人员会编写自己的随机函数以获取特定区间之内的随机返回值。本例需要的随
机数是 0～(n−1)之间的整数，n 就是函数所需的唯一参数。这一假设可由任意一种 debugger 验证。 
本章将修改第三处调用指令，让它的第三次返回值永远是 0。为此，我们可把 PUSH/CALL/ADD 这三
条指令改为 NOP，然后再添加 XOR EAX,EAX 指令，以清空 EAX 寄存器。 
.00402BB8: 83C410          add    
   esp,010 
.00402BBB: A158C04000      mov    
   eax,[00040C058] 
.00402BC0: 31C0            
xor    
   eax,eax 
.00402BC2: 90              
nop 
.00402BC3: 90              
nop 
.00402BC4: 90              
nop 
.00402BC5: 90              
nop 
.00402BC6: 90              
nop 
.00402BC7: 90              
nop 
.00402BC8: 90              
nop 
.00402BC9: 40              
inc    
   eax 
.00402BCA: 8B4DF8          mov    
   ecx,[ebp][-8] 
.00402BCD: 8D0C49          lea    
   ecx,[ecx][ecx]*2 
.00402BD0: 8B15F4D54000   mov    
   edx,[00040D5F4] 
也就是说，我们修改调用 random()函数的有关指
令，让它的返回值固定为 0。 
修改程序后，它的运行界面如图 75.2 所示。 
不得不说我们修改得很成功。我在当初修改这个
游戏的时候，希望我的同事明白“没有必要执迷于你
肯定会赢的游戏”。可惜我的劝阻没能成功。 
另外还有一个问题：为什么 random()函数的参数
会是全局变量？这是因为棋盘大小是可调整的变量，
不能在程序里把它写成常量。本例中的 5 和 10 只是它
的默认值。 
图 75.2  作弊成功 
异步社区会员 dearfuture(15918834820) 专享 尊重版权
第
第 7766 章
章    扫
扫雷
雷（
（W
Wiinnddoowwss  XXPP）
）  
我的扫雷水平不高，所以干脆用 debugger 把雷都显示出来吧！ 
因为地雷的具体位置是随机的，所以扫雷程序里肯定会用随机函数安置地雷。这种随机函数不是某种
自制的随机数生成函数，就是标准的 C 函数 rand()。最为美妙的事情是，微软不仅公开了其产品的 PDB 文
件，而且在 PDB 文件里提供了全部的函数名等符号信息。所以，当我们用 IDA 打开 winmine.exe 程序时，
它会从微软下载 PDB 文件并且显示所有函数名称。 
在 IDA 里可以看到，调用 rand()函数的指令只有一处： 
.text:01003940 ; __stdcall Rnd(x) 
.text:01003940 _Rnd@4    
     proc near     
; CODE XREF: StartGame()+53 
.text:01003940                        
; StartGame()+61 
.text:01003940 
.text:01003940 arg_0     
     = dword ptr 4 
.text:01003940 
.text:01003940           
     call     ds:__imp__rand 
.text:01003946           
     cdq 
.text:01003947           
     idiv     [esp+arg_0] 
.text:0100394B           
     mov      eax, edx 
.text:0100394D           
     retn     4 
.text:0100394D _Rnd@4    
     endp 
IDA 把这个函数显示为 rnd() 函数，那就是说扫雷游戏的开发人员给它起的名字就是 rnd。这个函数非
常简单： 
int Rnd(int limit) 
{ 
     return rand() % limit; 
}; 
微软的 PDB 文件没有把参数命名为 limit。为了便于讨论，本文给它起名为 limit。可见，rnd()函数返
回值是介于 0～limit 之间的整数。 
rand()函数的调用方函数也只有一个 StartGame()函数。而且 StartGame()函数应当就是安放地雷的函数： 
.text:010036C7     
     push     _xBoxMac 
.text:010036CD     
     call     _Rnd@4           
; Rnd(x) 
.text:010036D2     
     push     _yBoxMac 
.text:010036D8     
     mov      esi, eax 
.text:010036DA     
     inc      esi 
.text:010036DB     
     call     _Rnd@4           
; Rnd(x) 
.text:010036E0     
     inc      eax 
.text:010036E1     
     mov      ecx, eax 
.text:010036E3     
     shl      ecx, 5           
; ECX=ECX*32 
.text:010036E6     
     test     _rgBlk[ecx+esi], 80h 
.text:010036EE     
     jnz      short loc_10036C7 
.text:010036F0     
     shl      eax, 5           
; EAX=EAX*32 
.text:010036F3     
     lea      eax, _rgBlk[eax+esi] 
.text:010036FA     
     or       byte ptr [eax], 80h 
.text:010036FD     
     dec      _cBombStart 
.text:01003703     
     jnz      short loc_10036C7 
因为扫雷游戏允许用户设置棋盘大小，所以棋盘的 X(xBoxMac)和 Y(yBoxMac)都是全局变量。Rnd()
函数根据这两个参数生成随机坐标，而后 0x10036FA 处的 OR 指令设置地雷。如果这个坐标在以前已经设
置过地雷了，那么 0x010036E6 的 TEST 和 JNZ 指令将再次生成一次坐标。 
异步社区会员 dearfuture(15918834820) 专享 尊重版权
718 
逆向工程权威指南（下册） 
变量 cBombStart 不仅是设置地雷总数的全局变量，还是循环控制变量。 
SHL/左移指令意味着棋盘宽度是 32。 
全局数组 rgBlk 的容量可通过数据段里 rgBlk 标签的地址与下一个数据的地址推算出来。数组容量应当
是这两个地址之间的差值，即 0x360（864）。 
.data:01005340 _rgBlk     
     db 360h dup(?)   
; DATA XREF: MainWndProc(x,x,x,x)+574 
.data:01005340                            
; DisplayBlk(x,x)+23 
.data:010056A0 _Preferences  
     dd  ?      
; DATA XREF: FixMenus()+2 
... 
数组的元素数量为：864（总容量）/32＝27。 
那么，rgBlk 是否就是 27×32 的数组呢？当我们把棋盘设置为 100×100 的矩阵时，它会自动回滚为 24×30
的棋盘。所以棋盘盘面的最大值就是这个值，而且无论棋盘有多大，程序都把棋盘数据存储在这个数组里。 
接下来，我们使用OllyDbg进行观察。在OllyDbg中运行扫雷游戏，然后在内存窗口里观察rgBlk数组（地
址为 0x1005340）。
①
与其他的 16 进制编辑程序相似，OllyDbg 也采取了每行 16 字节的显示风
格。因此，一个 32 字节的数组对应着 OllyDbg 窗口里的两行数据。 
与这个数组有关的内存数据如下： 
Address    Hex dump 
01005340  10 10 10 10|10 10 10 10|10 10 10 0F|0F 0F 0F 0F| 
01005350  0F 0F 0F 0F|0F 0F 0F 0F|0F 0F 0F 0F|0F 0F 0F 0F| 
01005360  10 0F 0F 0F|0F 0F 0F 0F|0F 0F 10 0F|0F 0F 0F 0F| 
01005370  0F 0F 0F 0F|0F 0F 0F 0F|0F 0F 0F 0F|0F 0F 0F 0F| 
01005380  10 0F 0F 0F|0F 0F 0F 0F|0F 0F 10 0F|0F 0F 0F 0F| 
01005390  0F 0F 0F 0F|0F 0F 0F 0F|0F 0F 0F 0F|0F 0F 0F 0F| 
010053A0  10 0F 0F 0F|0F 0F 0F 0F|8F 0F 10 0F|0F 0F 0F 0F| 
010053B0  0F 0F 0F 0F|0F 0F 0F 0F|0F 0F 0F 0F|0F 0F 0F 0F| 
010053C0  10 0F 0F 0F|0F 0F 0F 0F|0F 0F 10 0F|0F 0F 0F 0F| 
010053D0  0F 0F 0F 0F|0F 0F 0F 0F|0F 0F 0F 0F|0F 0F 0F 0F| 
010053E0  10 0F 0F 0F|0F 0F 0F 0F|0F 0F 10 0F|0F 0F 0F 0F| 
010053F0  0F 0F 0F 0F|0F 0F 0F 0F|0F 0F 0F 0F|0F 0F 0F 0F| 
01005400  10 0F 0F 8F|0F 0F 8F 0F|0F 0F 10 0F|0F 0F 0F 0F| 
01005410  0F 0F 0F 0F|0F 0F 0F 0F|0F 0F 0F 0F|0F 0F 0F 0F| 
01005420  10 8F 0F 0F|8F 0F 0F 0F|0F 0F 10 0F|0F 0F 0F 0F| 
01005430  0F 0F 0F 0F|0F 0F 0F 0F|0F 0F 0F 0F|0F 0F 0F 0F| 
01005440  10 8F 0F 0F|0F 0F 8F 0F|0F 8F 10 0F|0F 0F 0F 0F| 
01005450  0F 0F 0F 0F|0F 0F 0F 0F|0F 0F 0F 0F|0F 0F 0F 0F| 
01005460  10 0F 0F 0F|0F 8F 0F 0F|0F 8F 10 0F|0F 0F 0F 0F| 
01005470  0F 0F 0F 0F|0F 0F 0F 0F|0F 0F 0F 0F|0F 0F 0F 0F| 
01005480  10 10 10 10|10 10 10 10|10 10 10 0F|0F 0F 0F 0F| 
01005490  0F 0F 0F 0F|0F 0F 0F 0F|0F 0F 0F 0F|0F 0F 0F 0F| 
010054A0  0F 0F 0F 0F|0F 0F 0F 0F|0F 0F 0F 0F|0F 0F 0F 0F| 
010054B0  0F 0F 0F 0F|0F 0F 0F 0F|0F 0F 0F 0F|0F 0F 0F 0F| 
010054C0  0F 0F 0F 0F|0F 0F 0F 0F|0F 0F 0F 0F|0F 0F 0F 0F| 
启动程序的时候，我们把游戏设置为了“入门级”难度，所以棋盘大小是 9×9。
现在我们可以在每行 0×10 个字节的数据里观测到这种正方形结构。 
接下来在 OllyDbg 单击“Run”以运行扫雷程序，然后随意点击、直到触碰
地雷为止。此时即可看到棋盘中的全部地雷了，如图 76.1 所示。 
在比较内存数据之后，我们可得出下列结论： 
 0x10 代表边界。 
 0x0F 代表空白地段。 
 0x8F 代表雷区。 
现在我们可对内存数据进行标注了。然后我们再用方括号标注地雷： 
① 本章以英文版 Windows XP SP3 中的扫雷游戏为例。如果调试的是其他版本的扫雷游戏，那么内存地址会与本例不同。 
图 76.1  地雷 
异步社区会员 dearfuture(15918834820) 专享 尊重版权
第 76 章  扫雷（Windows XP） 
719 
border: 
01005340  10 10 10 10 10 10 10 10 10 10 10 0F 0F 0F 0F 0F 
01005350  0F 0F 0F 0F 0F 0F 0F 0F 0F 0F 0F 0F 0F 0F 0F 0F 
line #1: 
01005360  10 0F 0F 0F 0F 0F 0F 0F 0F 0F 10 0F 0F 0F 0F 0F 
01005370  0F 0F 0F 0F 0F 0F 0F 0F 0F 0F 0F 0F 0F 0F 0F 0F 