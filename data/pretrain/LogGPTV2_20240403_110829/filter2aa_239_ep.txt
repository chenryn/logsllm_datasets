IFormatProvider参数的重载方法，表示所使用的是当前线程的区域性：
    public static void DateFormatDemo()
    {
      var d = new DateTime(2015, 09, 27);
      // current culture
      WriteLine(d.ToLongDateString());
      // use IFormatProvider
      WriteLine(d.ToString("D", new CultureInfo("fr-FR")));
      // use current culture
      WriteLine($"{CultureInfo.CurrentCulture}: {d:D}");
      CultureInfo.CurrentCulture = new CultureInfo("es-ES");
      WriteLine($"{CultureInfo.CurrentCulture}: {d:D}");
    }
这个示例程序的结果说明了使用线程的当前区域性的ToLongDateString（）方法，其
中给ToString（）方法传递一个CultureInfo实例，则显示其法国版本；把线程的
CurrentCulture属性改为es-ES，则显示其西班牙版本，如下所示。
    Sunday, September 27, 2015
    dimanche 27 septembre 2015
    en-US: Sunday, September 27, 2015
    es-ES: domingo, 27 de septiembre de 2015
28.2.3 使用区域性
为了全面介绍区域性，下面使用一个WPF应用程序示例，该应用程序列出所有的区
域性，描述区域性属性的不同特征。图28-5显示了该应用程序在Visual Studio 2015 WPF设
计器中的用户界面。
图28-5
在应用程序的初始化阶段，所有可用的区域性都添加到应用程序左边的TreeView控件
中。这个初始化工作在SetupCultures（）方法中进行，该方法在MainWindow类的
CultureDemoForm的构造函数中调用（代码文件
WPFCultureDemo/MainWindow.xaml.cs）：
    public MainWindow()
    {
      InitializeComponent();
      SetupCultures();
    }
对于在用户界面上显示的数据，创建自定义类CultureData。这个类可以绑定到
TreeView控件上，因为它的SubCultures属性包含一列CultureData。因此TreeView控件可以
遍历这个树状结构。CultureData不包含子区域性，而包含数字、日期和时间的CultureInfo
类型以及示例值。数字以适用于特定区域性的数字格式返回一个字符串，日期和时间也以
特定区域性的格式返回字符串。CultureData包含一个RegionInfo类来显示区域。对于一些
中立区域性（例如English），创建RegionInfo会抛出一个异常，因为某些区域有特定的区
域性。但是，对于其他中立区域性（例如German），可以成功创建RegionInfo，并映射到
默认的区域上。这里抛出的异常应这样处理（代码文件
WPFCultureDemo/CultureData.cs）：
    public class CultureData
    {
      public CultureInfo CultureInfo { get; set; }
      public List SubCultures { get; set; }
      double numberSample = 9876543.21;
      public string NumberSample => numberSample.ToString("N", CultureInfo);
      public string DateSample => DateTime.Today.ToString("D", CultureInfo);
      public string TimeSample => DateTime.Now.ToString("T", CultureInfo);
      public RegionInfo RegionInfo
      {
        get
        {
          RegionInfo ri;
          try
          {
          ri = new RegionInfo(CultureInfo.Name);
          }
          catch (ArgumentException)
          {
          // with some neutral cultures regions are not available
          return null;
          }
          return ri;
        }
      }
    }
在SetupCultures（）方法中，通过静态方法CultureInfo.GetCultures（）获取所有区域
性。给这个方法传递CultureTypes.AllCultures，就会返回所有可用区域性的未排序数组。
该数组按区域性名称来排序。有了排好序的区域性，就创建一个CultureData对象的集合，
并分配CultureInfo和SubCultures属性。之后，创建一个字典，以快速访问区域性名称。
对于应绑定的数据，创建一个CultureData对象列表，在执行完foreach语句后，该列表
将包含树状视图中的所有根区域性。可以验证根区域性，以确定它们是否把不变的区域性
作为其父区域性。不变的区域性把LCID（Locale Identifier）设置为127，每个区域性都有
自己的唯一标识符，可用于快速验证。在代码段中，根区域性在if语句块中添加到
rootCultures集合中。如果一个区域性把不变的区域性作为其父区域性，它就是根区域性。
如果区域性没有父区域性，它就会添加到树的根节点上。要查找父区域性，必须把所
有区域性保存到一个字典中。相关内容参见前面章节，其中第11章介绍了字典，第9章介
绍了lambda表达式。如果所迭代的区域性不是根区域性，它就添加到父区域性的
SubCultures集合中。使用字典可以快速找到父区域性。在最后一步中，把根区域性赋予窗
口的DataContext，使根区域性可用于UI（代码文件
WPFCultureDemo/MainWindow.xaml.cs）：
    private void SetupCultures()
    {
      var cultureDataDict = CultureInfo.GetCultures(CultureTypes.AllCultures)
        .OrderBy(c => c.Name)
        .Select(c => new CultureData
        {
        CultureInfo = c,
        SubCultures = new List()
        })
        .ToDictionary(c => c.CultureInfo.Name);
      var rootCultures = new List();
      foreach (var cd in cultureDataDict.Values)
      {
        if (cd.CultureInfo.Parent.LCID == 127)
        {
        rootCultures.Add(cd);
        }
        else
        {
        CultureData parentCultureData;
        if (cultureDataDict.TryGetValue(cd.CultureInfo.Parent.Name,
          out parentCultureData))
        {
          parentCultureData.SubCultures.Add(cd);
        }
        else
        {
          throw new ParentCultureException(
          "unexpected error-parent culture not found");
        }
        }
      }
      this.DataContext = rootCultures.OrderBy(cd =>
        cd.CultureInfo.EnglishName);
    }
在用户选择树中的一个节点时，就会调用TreeView类的SelectedItemChanged事件的处
理程序。在这里，这个处理程序在treeCultures_SelectedItemChanged（）方法中实现。在
这个方法中，把Grid控件的DataContext设置为选中的CultureData对象。在XAML逻辑树
中，这个Grid控件是显示所选区域性信息的所有控件的父控件。
    private void treeCultures_SelectedItemChanged(object sender,
      RoutedPropertyChangedEventArgs e)
    {
      itemGrid.DataContext = e.NewValue as CultureData;
    }
现在看看显示内容的XAML代码。一个树型视图用于显示所有的区域性。对于在树型
视图内部显示的项，使用项模板。这个模板使用一个文本块，该文本框绑定到CultureInfo
类的EnglishName属性上。为了绑定树型视图中的项，应使用HierarchicalDataTemplate来
递归地绑定CultureData类型的SubCultures属性（代码文件CultureDemo/
MainWindow.xaml）：
为了显示所选项的值，使用了几个TextBlock控件，它们绑定到CultureData类的
CultureInfo属性上，从而绑定到从CultureInfo返回的CultureInfo类型的属性上，例如
Name、IsNeutralCulture、EnglishName和NativeName等。要把从IsNeutralCulture属性返回
的布尔值转换为Visiblility枚举值，并显示日历名称，应使用转换器：
把布尔值转换为Visiblility枚举值的转换器在BooleanToVisiblilityConverter类中定义
（代码文件WPFCultureDemo\ Converters\ BooleanToVisiblilityConverter.cs）：
    using System;
    using System.Globalization;
    using System.Windows;
    using System.Windows.Data;
    namespace CultureDemo.Converters
    {
      public class BooleanToVisibilityConverter: IValueConverter
      {
        public object Convert(object value, Type targetType, object parameter,
        CultureInfo culture)
        {
        bool b = (bool)value;
        if (b)
          return Visibility.Visible;
        else
          return Visibility.Collapsed;
        }
        public object ConvertBack(object value, Type targetType,
        object parameter, CultureInfo culture)
        {
        throw new NotImplementedException();
        }
      }
    }
转换日历文本以进行显示的转换器有点复杂。下面是
CalendarTypeToCalendarInformationConverter类中Convert方法的实现代码，该实现代码使
用类名和日历类型名称，给日历返回一个有用的值（代码文件
WPFCultureDemo/Converters/CalendarTypeToCalendarInformationConverter.cs）：
    public object Convert(object value, Type targetType, object parameter,
      CultureInfo culture)
    {
      var c = value as Calendar;
      if (c == null) return null;
      var calText = new StringBuilder(50);
      calText.Append(c.ToString());
      calText.Remove(0, 21); // remove the namespace
      calText.Replace("Calendar", "");
      GregorianCalendar gregCal = c as GregorianCalendar;
      if (gregCal ! = null)
      {
        calText.Append($" {gregCal.CalendarType}");
      }
      return calText.ToString();
    }
CultureData类包含的属性可以为数字、日期和时间格式显示示例信息，这些属性用下
面的TextBlock元素绑定：
区域的信息用XAML代码的最后一部分显示。如果RegionInfo不可用，就隐藏整个
GroupBox。TextBlock元素绑定了RegionInfo类型的DisplayName、CurrencySymbol、
ISOCurrencySymbol和IsMetric属性：
启动应用程序，在树型视图中就会看到所有的区域性，选择一个区域性后，就会列出
该区域性的特征，如图28-6所示。
图28-6
28.2.4 排序
SortingDemo示例使用如下依赖项和名称空间：
依赖项：
    NETStandard.Library
    System.Collections.NonGeneric
名称空间：
    System
    System.Collections
    System.Collections.Generic
    System.Globalization
    static System.Console
排序字符串取决于区域性。在默认情况下，为排序而比较字符串的算法依赖于区域
性。例如在芬兰，字符V和W就是相同的。为了说明芬兰的排序方式，下面的代码创建一
个小型控制台应用程序示例，其中对数组中尚未排序的一些美国州名进行排序。
下面的DisplayName（）方法用于在控制台上显示数组或集合中的所有元素（代码文
件SortingDemo/Program.cs）：
    public static void DisplayNames(string title, IEnumerable e)
    {