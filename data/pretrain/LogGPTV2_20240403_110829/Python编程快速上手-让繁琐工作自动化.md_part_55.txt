安装第三方模块请见附录A。
17.1.1 颜色和 RGBA 值
计算机程序通常将图像中的颜色表示为RGBA值。RGBA值是一组数字，指定
颜色中的红、绿、蓝和alpha（透明度）的值。这些值是从0（根本没有）到255（最
高）的整数。这些RGBA值分配给单个像素，像素是计算机屏幕上能显示一种颜色
的最小点（你可以想到，屏幕上有几百万像素）。像素的RGB设置准确地告诉它应
该显示哪种颜色的色彩。图像也有一个alpha值，用于生成RGBA值。如果图像显
示在屏幕上，遮住了背景图像或桌面墙纸，alpha 值决定了“透过”这个图像的象
素，你可以看到多少背景。
在Pillow中，RGBA值表示为四个整数值的元组。例如，红色表示为（255，0，
0，255）。这种颜色中红的值为最大，没有绿和蓝，并且alpha值最大，这意味着它完
全不透明。绿色表示为（0，255，0，255），蓝色是（0，0，255，255）。白色是各种
颜色的组合，即（255，255，255，255），而黑色没有任何颜色，是（0，0，0，255）。
如果颜色的alpha值为0，不论RGB值是什么，该颜色是不可见的。毕竟，不
可见的红色看起来就像不可见的黑色一样。
Pillow 使用了 HTML 使用的标准颜色名称。表 17-1 列出了一些标准颜色的名
称和值。
表17-1 标准颜色名称及其RGB值
名称 RGBA值 名称 RGBA值
White (255, 255, 255, 255) Red (255, 0, 0, 255)
Green (0, 128, 0, 255) Blue (0, 0, 255, 255)
Gray (128, 128, 128, 255) Yellow (255, 255, 0, 255)
Black (0, 0, 0, 255) Purple (128, 0, 128, 255)
Pillow提供ImageColor.getcolor()函数，所以你不必记住想用的颜色的RGBA值。
该函数接受一个颜色名称字符串作为第一个参数，字符串'RGBA'作为第二个参数，
返回一个RGBA元组。
要了解该函数的工作方式，就在交互式环境中输入以下代码：
 >>> from PIL import ImageColor
 >>> ImageColor.getcolor('red', 'RGBA')
(255, 0, 0, 255)
 >>> ImageColor.getcolor('RED', 'RGBA')
(255, 0, 0, 255)
>>> ImageColor.getcolor('Black', 'RGBA')
(0, 0, 0, 255)
>>> ImageColor.getcolor('chocolate', 'RGBA')
(210, 105, 30, 255)
>>> ImageColor.getcolor('CornflowerBlue', 'RGBA')
(100, 149, 237, 255)
首先，你需要从PIL导入ImageColor模块（不是从Pillow，稍后你就会明白
328 Python编程快速上手——让繁琐工作自动化
为什么）。传递给 ImageColor.getcolor()的颜色名称字符串是不区分大小写的，所以
传入'red'和传入'RED'将得到同样的RGBA元组。还可以传递更多的不常见的颜
色名称，如'chocolate'和'Cornflower Blue'。
Pillow 支持大量的颜色名称，从'aliceblue'到'whitesmoke'。在 http://nostarch.
com/automatestuff/的资源中，可以找到超过100种标准颜色名称的完整列表。
17.1.2 坐标和 Box元组
图像像素用x和y坐标指定，分别指定像素在图像中的水平和垂直位置。原点
是位于图像左上角的像素，用符号（0，0）指定。第一个0表示x坐标，它以原点
处为 0，从左至右增加。第二个 0 表示 y 坐标，它以原点处为 0，从上至下增加。
这值得重复一下：y坐标向下走增加，你可能还记得数学课上使用的 y坐标，与此
相反。图17-1展示了这个坐标系统的工作方式。
图17-1 27×26的图像的x和y坐标，某种古老的数据存储装置
CMYK和RGB着色
上小学时你学过，混合红、黄、蓝三种颜料可以得到其他颜色。例如，可以
混合蓝色和黄色，得到绿色颜料。这就是所谓的减色模型，它适用于染料、油墨
和颜料。这就是为什么彩色打印机有的CMYK墨盒：青色（蓝色）、品红色（红
色）、黄色和黑色墨水可以混合在一起，形成任何颜色。
然而，光的物理使用所谓的加色模型。如果组合光（例如由计算机屏幕发出
的光），红、绿和蓝光可以组合形成其他颜色。这就是为什么在计算机程序中使
用RGB值表示颜色。
许多 Pillow函数和方法需要一个矩形元组参数。这意味着 Pillow需要一个
四个整坐标的元组，表示图像中的一个矩形区域。四个整数按顺序分别是：
• 左：该矩形的最左边的x坐标。
• 顶：该矩形的顶边的y坐标。
第17章 操作图像 329
• 右：该矩形的最右边右面一个像素的x坐标。此整数必须比左边整数大。
• 底：该矩形的底边下面一个像素的y坐标。此整数必须比顶边整数大。
注意，该矩形包括左和顶坐标，直到但不包括右和底坐标。例如，矩形元组（3,
1, 9, 6）表示图17-2中黑色矩形的所有像素。
图17-2 由矩形元组（3, 1, 9, 6）表示的区域
17.2 用 Pillow 操作图像
既然知道了 Pillow 中颜色和坐标的工作方式，就让我们用 Pillow 来处理图
像。图 17-3 中的图像将用于本章中所有交互式环境的例子。你可以从 http://nostarch.
com/automatestuff/下载它。
图17-3 我的猫Zophie。照片上看起来增加了10磅（对猫来说很多）
330 Python编程快速上手——让繁琐工作自动化
将图像文件 Zophie.png 放在当前工作目录中，你就可以将 Zophie 的图像加载
到Python中，像这样：
>>> from PIL import Image
>>> catIm = Image.open('zophie.png')
要加载图像，就从Pillow导入Image 模块，并调用Image.open()，传入图像的
文件名。然后，可以将加载图像保存在CatIm这样的变量中。Pillow的模块名称是PIL，
这保持与老模块Python Imaging Library向后兼容，这就是为什么必须from PIL import
Image，而不是from Pillow import Image。由于Pillow的创建者设计Pillow模块的方式，
你必须使用from PIL import Image形式的import语句，而不是简单地import PIL。
如果图像文件不在当前工作目录，就调用os.chdir()函数，将工作目录变为包含
图像文件的文件夹。
>>> import os
>>> os.chdir('C:\\folder_with_image_file')
Image.open()函数的返回值是 Image 对象数据类型，它是 Pillow 将图像表示为
Python值的方法。可以调用Image.open()，传入文件名字符串，从一个图像文件（任
何格式）加载一个 Image 对象。通过 save()方法，对 Image 对象的所有更改都可以
保存到图像文件中（也是任何格式）。所有的旋转、调整大小、裁剪、绘画和其他
图像操作，都通过这个Image对象上的方法调用来完成。
为了让本章的例子更简短，我假定你已导入了Pillow的Image模块，并将Zophie
的图像保存在变量catIm 中。要确保zophie.png 文件在当前工作目录中，让 Image.open()
函数能找到它。否则，必须在Image.open()的字符串参数中指定完整的绝对路径。
17.2.1 处理Image数据类型
Image 对象有一些有用的属性，提供了加载的图像文件的基本信息：它的宽度
和高度、文件名和图像格式（如JPEG、GIF或PNG）。
例如，在交互式环境中输入以下代码：
>>> from PIL import Image
>>> catIm = Image.open('zophie.png')
>>> catIm.size
 (816, 1088)
 >>> width, height = catIm.size
 >>> width
816
 >>> height
1088
>>> catIm.filename
'zophie.png'
>>> catIm.format
'PNG'
>>> catIm.format_description
'Portable network graphics'
 > >> catIm.save('zophie.jpg')
第17章 操作图像 331
从Zophie.png得到一个Image对象并保存在catIm中后，我们可以看到该对象
的size属性是一个元组，包含该图像的宽度和高度的像素数。我们可以将元组中
的值赋给width和height变量，以便分别访问宽度和高度。filename属性描述
了原始文件的名称。format和format_description属性是字符串，描述了原始文件的图
像格式（format_description比较详细）。
最后，调用save()方法，传入'zophie.jpg’，将新图像以文件名zophie.jpg保存到
硬盘上。Pillow看到文件扩展名是jpg，就自动使用JPEG图像格式来保存图像。
现在硬盘上应该有两个图像，zophie.png和zophie.jpg。虽然这些文件都基于相同的
图像，但它们不一样，因为格式不同。
Pillow 还提供了 Image.new()函数，它返回一个 Image 对象。这很像Image.open()，
不过Image.new()返回的对象表示空白的图像。Image.new()的参数如下：
• 字符串'RGBA'，将颜色模式设置为RGBA（还有其他模式，但本书没有涉及）。
• 大小，是两个整数元组，作为新图像的宽度和高度。
• 图像开始采用的背景颜色，是一个表示 RGBA 值的四整数元组。你可以用
ImageColor.getcolor()函数的返回值作为这个参数。另外，Image.new()也支持传
入标准颜色名称的字符串。
例如，在交互式环境中输入以下代码：
>>> from PIL import Image
 >>> im = Image.new('RGBA', (100, 200), 'purple')
>>> im.save('purpleImage.png')
 >>> im2 = Image.new('RGBA', (20, 20))
>>> im2.save('transparentImage.png')
这里，我们创建了一个Image 对象，它有100 像素宽、200像素高，带有紫色
背景。然后，该图像存入文件purpleImage.png中。我们再次调用Image.new()，创建
另一个Image对象，这次传入（20, 20）作为大小，没有指定背景色。如果未指定
颜色参数，默认的颜色是不可见的黑色（0，0，0，0），因此第二个图像具有透明
背景，我们将这个20×20的透明正方形存入transparentImage.png。
17.2.2 裁剪图片
裁剪图像是指在图像内选择一个矩形区域，并删除矩形之外的一切。Image 对
象的crop()方法接受一个矩形元组，返回一个Image对象，表示裁剪后的图像。裁剪
不是在原图上发生的，也就是说，原始的 Image 对象原封不动，crop()方法返回一
个新的Image对象。请记住，矩形元组（这里就是要裁剪的区域）包括左列和顶行
的像素，直至但不包括右列和底行的像素。
在交互式环境中输入以下代码：
>>> croppedIm = catIm.crop((335, 345, 565, 560))
>>> croppedIm.save('cropped.png')
332 Python编程快速上手——让繁琐工作自动化
这得到一个新的Image 对象，是剪裁后的图像，保存在croppedIm中，然后调
用croppedIm的save()，将裁剪后的图像存入cropped.png。新文件 cropped.png从原
始图像创建，如图17-4所示。
图17-4 新图像只有原始图像剪裁后的部分
17.2.3 复制和粘贴图像到其他图像
copy()方法返回一个新的Image对象，它和原来的Image对象具有一样的图像。
如果需要修改图像，同时也希望保持原有的版本不变，这非常有用。例如，在交互
式环境中输入以下代码：
>>> catIm = Image.open('zophie.png')
>>> catCopyIm = catIm.copy()
catIm 和 catCopyIm 变量包含了两个独立的 Image 对象，它们的图像相同。既然
catCopyIm中保存了一个Image对象，你可以随意修改catCopyIm，将它存入一个新的
文件名，而zophie.png没有改变。例如，让我们尝试用paste()方法修改catCopyIm。
paste()方法在 Image 对象调用，将另一个图像粘贴在它上面。我们继续交互式
环境的例子，将一个较小的图像粘贴到catCopyIm。
>>> faceIm = catIm.crop((335, 345, 565, 560))
>>> faceIm.size
(230, 215)
>>> catCopyIm.paste(faceIm, (0, 0))
>>> catCopyIm.paste(faceIm, (400, 500))
>>> catCopyIm.save('pasted.png')
首先我们向 crop()传入一个矩形元组，指定 zophie.png 中的一个矩形区域，包
含Zophie的脸。这将创建一个Image对象，表示230×215的剪裁区域，保存在faceIm
中。现在，我们可以将faceIm粘贴到catCopyIm。paste()方法有两个参数：一个“源”
第17章 操作图像 333
Image 对象，一个包含x和y坐标的元组，指明源Image 对象粘贴到主Image 对象
时左上角的位置。这里，我们在catCopyIm上两次调用paste()，第一次传入(0, 0)，
第二次传入(400, 500)。这将faceIm两次粘贴到catCopyIm：一次 faceIm的左上角在
(0, 0)，一次faceIm的左上角在(400, 500)。最后，我们将修改后的catCopyIm存入
pasted.png。pasted.png如图17-5所示。
图17-5 Zophie猫，包含两次粘贴她的脸
注意 尽管名称是copy()和paste()，但Pillow中的方法不使用计算机的剪贴板。
请注意，paste()方法在原图上修改它的 Image 对象，它不会返回粘贴后图像的
Image 对象。如果想调用 paste()，但还要保持原始图像的未修改版本，就需要先复
制图像，然后在副本上调用paste()。
假定要用Zophie的头平铺整个图像，如图17-6所示。可以用两个for循环来实
现这个效果。继续交互式环境的例子，输入以下代码：
>>> catImWidth, catImHeight = catIm.size
>>> faceImWidth, faceImHeight = faceIm.size
 >>> catCopyTwo = catIm.copy()
 >>> for left in range(0, catImWidth, faceImWidth):
 for top in range(0, catImHeight, faceImHeight):
print(left, top)
catCopyTwo.paste(faceIm, (left, top))
0 0
0 215
0 430
0 645
0 860
334 Python编程快速上手——让繁琐工作自动化
0 1075
230 0
230 215
--snip--