title:Content Security Problems?: Evaluating the Effectiveness of Content
Security Policy in the Wild
author:Stefano Calzavara and
Alvise Rabitti and
Michele Bugliesi
CONTENT SECURITY POLICY BEST PRACTICES 
Jake Meredith – jmeredith[at]isecpartners[dot]com 
iSEC Partners, Inc 
123 Mission Street, Suite 1020 
San Francisco, CA 94105 
https://www.isecpartners.com 
July 14, 2013 
Abstract 
Content  Security  Policy  is  an  HTTP  header  that  provides  client-side  defense-in-depth 
against content injection attacks. This document describes the nuances of Content Security 
Policy, provides guidance on testing and deploying, and proposes a list of best practices for 
its secure use. 
1 
INTRODUCTION 
Content  Security  Policy  1.0  is  a  mechanism  that  allows  developers  to  whitelist  the  locations  from  which 
applications can load resources. It does this through use of directives which restrict various web resources for 
the  web  application.  The  main  purpose  behind  Content  Security  Policy  is  to  mitigate  content  injection 
vulnerabilities. Cross-site scripting (XSS) vulnerabilities tend to be the most prevalent and harmful form of 
these vulnerabilities. Web applications can use this feature by supplying a Content-Security-Policy HTTP 
header  that specifies valid script  locations.  If  the web application  is attempting  to  load a script,  the  client 
browser  matches  the  source  of  the  script  against  the  Content  Security  Policy  directives  before  loading  it. 
Content  Security  Policy  extends  beyond  script  origins,  allowing  web  applications  to  control  the  source  of 
images,  frames,  styles,  and  other  elements.  It  is  important  to  note  that  CSP  is  a  second-line  defense 
mechanism.    Application  authors  should  always  take  standard  precautions  to  prevent  injections  such  as 
output encoding of user-controlled content.  
Content Security Policy can be deployed in a Report-Only mode. In this mode, the web application’s behavior 
does not change, but any violations of the policy are reported to a specified URI for logging. This  makes it 
possible to test different policies or directives before deploying them. 
Content Security Policy is a very granular control system and can therefore be easily implemented incorrectly. 
The best practices will enable server administrators and developers to avoid common Content Security Policy 
deployment  mistakes  and  help  secure  their  environment.  This  paper  will  describe  the  details  of  Content 
Security Policy, give implementation specifics, and then propose a list of best practices for its use. 
2  CONTENT SECURITY POLICY 
Content  Security  Policy  is  defined  by  a  list  of  semicolon  (;)  delimited  directives.  A  directive  is  defined  by 
specifying a resource and a list of allowable URIs. This list of URIs defines a whitelist for the only locations 
HTTPS://WWW.ISECPARTNERS.COM 
1/13 
from  which  the  client  browser  can  load  resources  for  the  page.    Content  Security  Policy  has  numerous 
directives, schemes, and keywords that can be defined as part of the header. Since CSP is enforced by the web 
application client, we will end this section by summarizing how the most popular web browsers support CSP. 
2.1  DIRECTIVES 
2.1.1    DEFAULT-SRC 
The  default-src  directive  is  exactly  as  it  sounds:  a  directive  that  specifies  the  default  rules  governing 
resources when a resource-specific directive is not defined. If other directives  (see below) are not explicitly 
defined, then  the  default-src directive will  be used  for that resource. A typical  policy using this directive 
would be: 
Content-Security-Policy: default-src ‘self’ 
This  policy  contains  one  directive,  default-src,  which  permits  all  resources  to  be  loaded  only  from  the 
applications own origin, see section 2.13.1 for details on the keyword self. 
If  any  resource-  specific  directive  is  defined  in  the  Content-Security-Policy  header  after  the  default-src, 
that directive will overwrite the default-src directive for that particular resource completely. The following 
example demonstrates this behavior: 
Content-Security-Policy: default-src ‘none’; script-src js.csp.com; 
The  default-src  directive  specifies  that  no  resources  are  permitted;  see  section  2.13.2  for  details  on  the 
keyword  none.  The  subsequent  script-src  directive  overwrites  the  default-src  directive  for  script 
resources, such as JavaScript. The end result of this directive would allow the web application to load scripts 
from js.csp.com and forbid all other resources. 
2.1.2    SCRIPT-SRC 
The  script-src  directive  controls  the  allowable  locations  from  where  an  application  is  allowed  to  load 
scripts. This directive  may  be given  multiple sources separated  by a space as permitted  locations. A simple 
policy using this directive would be: 
Content-Security-Policy: default-src ‘self’; script-src scripts.csp.com 
This policy  permits the client  browser to  load scripts  from script.csp.com and all other resources  from the 
host domain. 
There  are  a  two  other  directives  that  can  apply  to  script-src  control  on  script  source  locations:  unsafe-
inline  and  unsafe-eval.  The  unsafe-inline  directive  instructs  the  browser  to  execute  inline  scripts.  The 
unsafe-eval  directive  allows  the  browser  to  execute  certain  JavaScript  functions  otherwise  disallowed  by 
Content Security Policy. These directives exist in order to facilitate adoption of Content Security Policy. The 
removal of inline scripts and unsafe methods is a non-trivial task detailed in section 3.1.2 and 3.1.3, so these 
directives allow more applications to begin using and  benefitting from Content  Security Policy before they 
can be completely stripped of inline scripts or unsafe methods. An example of their basic use is: 
Content-Security-Policy: default-src ‘self’; script-src scripts.csp.com ‘unsafe-inline’ 
‘unsafe-eval’ 
This policy would have the same effect as the previous policy except that inline scripts would be allowed and 
the  client  browser  would  not  prohibit  the  dangerous  JavaScript  methods,  such  as  eval  and  Funtion.The 
HTTPS://WWW.ISECPARTNERS.COM 
2/13 
unsafe-inline and unsafe-eval directives have to be applied to either a script-src or default-src directive 
in  order  to  provide  functionality.  The  inclusion  of  these  directives  limits  the  effectiveness  of  preventing 
Cross-site Scripting. 
2.1.3    OBJECT-SRC 
The security model of the most common plugins allows full DOM access, so restricting object resources is as 
important to preventing content injection as restricting script resources.  The  object-src directive controls 
the source locations of embedded elements, applets, and plugins. This directive may be given a list of sources 
from which to load object resources. A simple policy using this directive would be: 
Content-Security-Policy: default-src ‘none’; object-src plugins.csp.com 
This  policy  begins  by  specifying  a  default  policy  where  no  resources  are  allowed.  The  second  part  of  the 
policy allows the client browser to load object data from plugins.csp.com, overwriting the default policy for 
this particular resource. The end result of this policy is that object data is the only permitted resource on this 
page and can only be loaded from plugins.csp.com.  
2.1.4    STYLE-SRC 
The style-src directive dictates the locations from which the client browser can load stylesheets. As style, 
can  be  specified  inline,  Content  Security  Policy  applies  similar  restrictions  on  style  as  the  script-src 
directive does with scripts. If a web application requires inline style the policy must specify  unsafe-inline. 
The  same  security  concerns  occur  in  the  use  of  unsafe-inline  for  style  as  they  do  for  scripts.  Many  web 
applications depend upon inline style and externalizing these styles is non-trivial, see sections 3.1.2 and 3.1.3 
for detailed descriptions. A policy involving the style-src is: 
Content-Security-Policy: default-src ‘none’; style-src *.csp.com ‘unsafe-inline’ 
This policy first declares a default policy of  none which disallows all resources. The style-src directive lists 
any subdomain of csp.com and specifies the allowance of inline style. 
2.1.5   IMAGE-SRC 
The  image-src directive  limits the  locations  from which the client  browser can  load  image resources. This 
directive takes a list of allowed image sources. An example of its use is: 
Content-Security-Policy: default-src ‘self’; image-src img.csp.com images.csp.com 
This policy dictates a standard default-src directive and then specifies two valid locations for images to be 
loaded from.  
2.1.6   MEDIA-SRC 
The media-src directive allows video and audio sources for the web application. A simple example of its use 
would be: 
Content-Security-Policy: default-src ‘none’; media-src videos.csp.com media.other.com 
This policy only permits media sources from the two stated domains and disallows all other resources. 
HTTPS://WWW.ISECPARTNERS.COM 
3/13 
2.1.7    FRAME-SRC 
The frame-src directive permits frames from certain URIs to be present in the application, it does not control 
the  ability  of  the  application  to  be  framed  on  other  pages  (for  this  look  to  X-Frame-Options).  Many  web 
applications use frames to bring in additional features from external sources. An example would be: 
Content-Security-Policy: default-src ‘self’; frame-src youtube.com 
This directive would allow frames from youtube.com but all other resources would have to come from its own 
origin.  
2.1.8  FONT-SRC 
The font-src directive controls access to font resources, such as Google Web Fonts. A simple example of its 
usage is: 
Content-Security-Policy: default-src ‘self’; font-src 
https://themes.googleusercontent.com; 
This directive would allow fonts to come from  Google Web Fonts and all other resources could be accessed 
only from the origin. 
2.1.9    CONNECT-SRC 
The connect-src directive permits connections, via XML HTTP Request(XHR)/WebSockets/EventSource, to 
other origins. An example of this is: 
Content-Security-Policy: default-src ‘none’; connect-src xhr.csp.com 
This directive would only allow outgoing connections  (such as XHR) to xhr.csp.com and would  not  permit 
any other resources to be loaded into the application.  
2.1.10  REPORT URI 
Content Security Policy has the ability to not only block offending resources, but also to report the offense to 
the  server  through  the  use  of  a  report-uri  directive.  To  use  the  report-uri  directive,  simply  add  the 
directive to the end of the policy followed by location for the reports to go: 
Content-Security-Policy: default-src ‘self’; script-src js.csp.com; report-uri 
reports.csp.com/cspReport.cgi 
 The violation reports will be sent via POST as a JSON blob that will look like this: 
{ 
} 
“csp-report”: { 
“document-uri”: “http://csp.com/index.html”, 
“referrer”: “http://notorigin.com”, 
“blocked-uri”: “http://notorigin.com/attack.js”, 
“violated directive”: “script-src ‘none’” , 
“original-policy”: “default-src ‘self’; script-src ‘none’; report-uri       
/uri_parser” 
} 
HTTPS://WWW.ISECPARTNERS.COM 
4/13 
The parts of the JSON blob are fairly self-explanatory and give a lot of information about the violation.  
Table 1 report-uri 
2.1.11  SANDBOX 
When the sandbox directive is used, the browser will treat the page as though it were loaded into an iframe 
with the sandbox attribute. This will effectively remove this frame from associating with the main application 
in  terms  of  the  Same  Origin  Policy.  This  will  prevent  the  page  from  performing  certain  actions,  such  as 
submitting forms and many others. This attribute is best applied to pages that contain untrusted content and 
those which do not need to submit information. 
The sandbox directive has several keywords to alter its restrictions. If the sandbox directive is stated without 
any additional values: 
Content-Security-Policy: sandbox 
The header will enforce a Same Origin Policy, prevent popups, and prevent plugin and script execution on the 
associated  page. All of these restrictions can  be removed  by adding additional parameters to the directive. 
The additional parameters are: allow-forms, allow-same-origin, allow-scripts, and allow-top-navigation. Each 
of these values can be added to the sandbox attribute in order to fit an application’s needs. An example of the 
use of sandbox to only restrict scripts is: 
Content-Security-Policy: sandbox allow-forms allow-same-origin allow-top-navigation 