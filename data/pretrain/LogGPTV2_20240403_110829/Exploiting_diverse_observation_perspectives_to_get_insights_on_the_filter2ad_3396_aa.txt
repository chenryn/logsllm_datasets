# Exploiting Diverse Observation Perspectives to Gain Insights on the Malware Landscape

**Authors:**
- Corrado Leita, Symantec Research Labs, Sophia Antipolis, France
- Ulrich Bayer, Technical University of Vienna, Austria
- Engin Kirda, Eurecom, Sophia Antipolis, France

**Abstract:**

The complexity and volume of malware are increasing, with an estimated 30,000 new samples appearing daily. This growth is partly due to the ease with which malware authors can generate new variants through polymorphic techniques, code obfuscation, and repacking. These methods make it difficult to distinguish between new and known malware, complicating the task of security analysts. Additionally, the use of polymorphic techniques, such as those employed by worms like Allaple, further complicates the analysis by mutating the binary content during each propagation attempt.

This paper presents an empirical study that leverages diverse observation perspectives to gain deeper insights into the malware landscape. By combining data from a distributed honeypot deployment (SGNET) with clustering and behavioral analysis, we demonstrate the value of a multi-faceted approach. We show how this combination helps in detecting relationships among different malware families, understanding the "economy" of malware, and evaluating the impact of patching and code sharing. Our results highlight the importance of contextual information in discerning the characteristics and evolution of malware samples.

## 1. Introduction

The malware landscape is becoming increasingly complex, with malware authors using sophisticated techniques to generate and propagate new variants. A complete understanding of this landscape requires not only the identification of new variants but also an analysis of the interrelations among different malware families and the extent to which they share code and produce patches for known variants.

This paper presents an empirical study based on one year of data collected by a distributed honeypot deployment, SGNET. The dataset includes samples that propagate via code injection attacks. By leveraging the rich, structured information generated by SGNET, we combine clustering and behavioral analysis to provide a more comprehensive view of the malware landscape.

## 2. Related Work

Previous approaches to malware clustering have primarily focused on static or dynamic analysis. Static methods, such as peHash [26], group malware based on similarities in their PE headers. Dynamic methods, such as system call traces [15] and more abstract behavior descriptions [3], have also been used. However, these approaches often suffer from scalability issues and the inability to precisely describe the behavior of malware.

In this paper, we utilize a publicly accessible dynamic analysis platform called Anubis [1, 6] to complement our static analysis. This combined approach allows us to detect anomalies and relationships among malware samples that would be invisible to single-feature clustering techniques.

## 3. SGNET and EPM Clustering

### 3.1. The SGNET Dataset

SGNET is a distributed honeypot deployment that focuses on the study of code injection attacks. It collects detailed information about the sources of attacks, the evolution of the attack over time, and the structure of the injected code. The dataset is enriched with contextual information from tools such as VirusTotal [25] and Anubis [1, 6].

### 3.2. SGNET Architecture

SGNET is composed of multiple low-cost sensors, a sample factory, and a central gateway. The sensors model protocol conversations using Finite State Machines (FSMs) and proxy interactions to the real service when a new/unknown activity is detected. The sample factory refines the FSM knowledge and provides the necessary information to handle future instances of the same activity.

## 4. Methodology

Our methodology involves combining static and dynamic analysis techniques to cluster and analyze malware samples. We use static features such as PE header information and dynamic features such as behavior traces to detect patterns and relationships among different malware families.

## 5. Results and Discussion

Our results show that combining diverse observation perspectives provides a more comprehensive understanding of the malware landscape. We are able to detect clustering anomalies and relationships among malware samples that would be invisible to single-feature clustering techniques. This approach also helps in understanding the "economy" of malware and the modus operandi of malware authors.

## 6. Conclusion

This paper demonstrates the value of leveraging diverse observation perspectives to gain deeper insights into the malware landscape. By combining static and dynamic analysis, we are able to provide a more comprehensive view of the characteristics and evolution of malware samples. Future work will focus on further refining our clustering and analysis techniques to better understand the complexities of the malware ecosystem.

**References:**
- [1] Anubis: A Publicly Accessible Dynamic Analysis Platform.
- [3] Bailey, M., et al. "Automated Classification and Analysis of Internet Malware."
- [5] Polymorphic Techniques in Malware.
- [7] Malware Analysis and Classification.
- [9] EGPM Model for Code Injection Attacks.
- [10] Allaple Worm: A Case Study.
- [11] Ghorghescu, A. "Clustering Malware Binaries."
- [14] Basic Block Comparison for Malware Clustering.
- [15] System Call Traces for Malware Classification.
- [16] Detailed Information on SGNET.
- [17] SGNET: A Distributed Honeypot Deployment.
- [18] Contextual Information Enrichment.
- [19] ScriptGen: Modeling Protocol Conversations.
- [20] Reducing Resource Costs in Honeypot Deployments.
- [22] Code Obfuscation Techniques.
- [23] Argos: An Oracle for FSM Knowledge.
- [25] VirusTotal: A Popular Virus Scanning Platform.
- [26] peHash: Hashing PE Binaries.
- [27] Malware Writers' Tools and Techniques.

**Copyright Notice:**
Â©2010 IEEE
978-1-4244-7501-8/10/$26.00

**Authorized Use:**
Limited to Tsinghua University. Downloaded on March 18, 2021, at 14:00:10 UTC from IEEE Xplore. Restrictions apply.