压力测试工具
压力测试工具
 http://www.postgresql.org/docs/9.3/static/pgbench.html
 contrib/pgbench/pgbench.c
 pgbench是PostgreSQL自带的一个数据库压力测试工具,
 支持TPC-B测试模型, 或自定义测试模型.
 自定义测试模型支持元命令, 调用shell脚本, 设置随机数, 变量等等.
 支持3种异步接口.
 int PQsendQuery(PGconn *conn, const char *command); // 简单调用, -M simple
 int PQsendQueryParams(PGconn *conn, // 带参数的扩展调用, -M extended
 const char *command,
 int nParams,
 const Oid *paramTypes,
 const char * const *paramValues,
 const int *paramLengths,
 const int *paramFormats,
 int resultFormat);
 PGresult *PQprepare(PGconn *conn, // 生成prepare使用同步接口.
 const char *stmtName,
 const char *query,
 int nParams,
 const Oid *paramTypes);
 int PQsendQueryPrepared ( ... ) // prepared 调用, -M prepared
压力测试工具
 -M simple
 if (querymode == QUERY_SIMPLE)
 {
 char *sql;
 sql = pg_strdup(command->argv[0]);
 sql = assignVariables(st, sql);
 if (debug)
 fprintf(stderr, "client %d sending %s\n", st->id, sql);
 r = PQsendQuery(st->con, sql);
 free(sql);
 }
压力测试工具
 -M extended
 else if (querymode == QUERY_EXTENDED)
 {
 const char *sql = command->argv[0];
 const char *params[MAX_ARGS];
 getQueryParams(st, command, params);
 if (debug)
 fprintf(stderr, "client %d sending %s\n", st->id, sql);
 r = PQsendQueryParams(st->con, sql, command->argc - 1,
 NULL, params, NULL, NULL, 0);
 }
压力测试工具
 -M prepared
 else if (querymode == QUERY_PREPARED)
 {
 char name[MAX_PREPARE_NAME];
 const char *params[MAX_ARGS];
 if (!st->prepared[st->use_file])
 {
 int j;
 for (j = 0; commands[j] != NULL; j++)
 {
 PGresult *res;
 char name[MAX_PREPARE_NAME];
 if (commands[j]->type != SQL_COMMAND)
 continue;
 preparedStatementName(name, st->use_file, j);
 res = PQprepare(st->con, name,
 commands[j]->argv[0], commands[j]->argc - 1, NULL);
压力测试工具
 if (PQresultStatus(res) != PGRES_COMMAND_OK)
 fprintf(stderr, "%s", PQerrorMessage(st->con));
 PQclear(res);
 }
 st->prepared[st->use_file] = true;
 }
 getQueryParams(st, command, params);
 preparedStatementName(name, st->use_file, st->state);
 if (debug)
 fprintf(stderr, "client %d sending %s\n", st->id, name);
 r = PQsendQueryPrepared(st->con, name, command->argc - 1,
 params, NULL, NULL, 0);
 }
压力测试工具
 默认的测试模型 : TPC-B测试模型 :
 /* default scenario */
 static char *tpc_b = {
 "\\set nbranches " CppAsString2(nbranches) " * :scale\n"
 "\\set ntellers " CppAsString2(ntellers) " * :scale\n"
 "\\set naccounts " CppAsString2(naccounts) " * :scale\n"
 "\\setrandom aid 1 :naccounts\n" // 每个会话独立, 所以每个会话将得到不一样的随机数.
 "\\setrandom bid 1 :nbranches\n"
 "\\setrandom tid 1 :ntellers\n"
 "\\setrandom delta -5000 5000\n"
 "BEGIN;\n"
 "UPDATE pgbench_accounts SET abalance = abalance + :delta WHERE aid = :aid;\n"
 "SELECT abalance FROM pgbench_accounts WHERE aid = :aid;\n"
 "UPDATE pgbench_tellers SET tbalance = tbalance + :delta WHERE tid = :tid;\n"
 "UPDATE pgbench_branches SET bbalance = bbalance + :delta WHERE bid = :bid;\n"
 "INSERT INTO pgbench_history (tid, bid, aid, delta, mtime) VALUES (:tid, :bid, :aid, :delta, CURRENT_TIMESTAMP);\n"
 "END;\n"
 };
压力测试工具
 TPC-B测试模型减掉两条更新SQL. 使用-N 参数
 /* -N case */
 static char *simple_update = {
 "\\set nbranches " CppAsString2(nbranches) " * :scale\n"
 "\\set ntellers " CppAsString2(ntellers) " * :scale\n"
 "\\set naccounts " CppAsString2(naccounts) " * :scale\n"
 "\\setrandom aid 1 :naccounts\n"
 "\\setrandom bid 1 :nbranches\n"
 "\\setrandom tid 1 :ntellers\n"
 "\\setrandom delta -5000 5000\n"
 "BEGIN;\n"
 "UPDATE pgbench_accounts SET abalance = abalance + :delta WHERE aid = :aid;\n"
 "SELECT abalance FROM pgbench_accounts WHERE aid = :aid;\n"
 "INSERT INTO pgbench_history (tid, bid, aid, delta, mtime) VALUES (:tid, :bid, :aid, :delta, CURRENT_TIMESTAMP);\n"
 "END;\n"
 };
压力测试工具
 仅仅包含查询的SQL. 使用-S 参数
 /* -S case */
 static char *select_only = {
 "\\set naccounts " CppAsString2(naccounts) " * :scale\n"
 "\\setrandom aid 1 :naccounts\n"
 "SELECT abalance FROM pgbench_accounts WHERE aid = :aid;\n"
 };
压力测试工具
 使用TPC-B 进行测试
 首先要初始化数据.
 int scale = 1; // 通过-s 指定 scale的值, 产生3个表的测试数据(以下的倍数, 例如-s 10 则产生10条branches记录.).
 #define nbranches 1 /* Makes little sense to change this. Change -s instead */ // 1条记录.
 #define ntellers 10 // 10条记录.
 #define naccounts 100000 // 10万条记录.
 for (i = 0; i  pgbench -i --foreign-keys --unlogged-tables -s 32 -h $PGDATA -p $PGPORT -U $PGUSER $PGDATABASE
 // 指定scale=32, 产生32条branch记录.
 // 还可以指定表空间以及索引表空间. --tablespace=, --index-tablespace=
 creating tables...
 100000 of 3200000 tuples (3%) done (elapsed 0.15 s, remaining 4.74 s).
 ...
 3200000 of 3200000 tuples (100%) done (elapsed 5.59 s, remaining 0.00 s).
 vacuum...
 set primary keys...
 set foreign keys...
 done.
 public | pgbench_accounts | table | postgres | 403 MB |
 public | pgbench_branches | table | postgres | 160 kB |
 public | pgbench_history | table | postgres | 0 bytes |
 public | pgbench_tellers | table | postgres | 160 kB |
 // 另外两个初始化参数
 -F NUM fill factor // 指定建表的fill_factor.(heap page的保留空间, 对于更新频繁的表, 可以产生HOT, 有利于降低索引膨胀以及索引更新的可能
性)
 -n do not run VACUUM after initialization // 数据初始化后不执行vacuum
压力测试工具
 TPC-B测试, 使用8个数据库长连接, 2个工作线程, prepared接口, 报告每条语句的平均执行延迟, 测试时长10秒.
 pg93@db-172-16-3-150-> pgbench -M prepared -r -c 8 -j 2 -T 10 -h $PGDATA -p $PGPORT -U $PGUSER $PGDATABASE
 starting vacuum...end.
 transaction type: TPC-B (sort of)
 scaling factor: 32
 query mode: prepared
 number of clients: 8
 number of threads: 2
 duration: 10 s
 number of transactions actually processed: 39448
 tps = 3943.580251 (including connections establishing) // TPS指整个测试文本的统计, 例如这里的测试文本包含以下所有的元命令和SQL. 即使这里包
含了多个begin和end, 也统计为一个"transaction".
 tps = 3949.696241 (excluding connections establishing)
 statement latencies in milliseconds:
 0.003896 \set nbranches 1 * :scale
 0.001069 \set ntellers 10 * :scale
 0.001076 \set naccounts 100000 * :scale
 0.001242 \setrandom aid 1 :naccounts
 0.000907 \setrandom bid 1 :nbranches
压力测试工具
 0.000975 \setrandom tid 1 :ntellers
 0.000911 \setrandom delta -5000 5000
 0.128683 BEGIN;
 0.288973 UPDATE pgbench_accounts SET abalance = abalance + :delta WHERE aid = :aid;
 0.178117 SELECT abalance FROM pgbench_accounts WHERE aid = :aid;
 0.222753 UPDATE pgbench_tellers SET tbalance = tbalance + :delta WHERE tid = :tid;
 0.271114 UPDATE pgbench_branches SET bbalance = bbalance + :delta WHERE bid = :bid;
 0.367600 INSERT INTO pgbench_history (tid, bid, aid, delta, mtime) VALUES (:tid, :bid, :aid, :delta, CURRENT_TIMESTAMP);
 0.541556 END;
压力测试工具
 pgbench用法以及所有参数
 Usage:
 pgbench [OPTION]... [DBNAME]
 // TPC-B测试模型的初始化数据参数.
 Initialization options:
 -i invokes initialization mode
 -F NUM fill factor
 -n do not run VACUUM after initialization // 使用自定义测试模型时, 请带上这个参数.
 -q quiet logging (one message each 5 seconds)
 -s NUM scaling factor
 --foreign-keys
 create foreign key constraints between tables
 --index-tablespace=TABLESPACE
 create indexes in the specified tablespace
 --tablespace=TABLESPACE
 create tables in the specified tablespace
 --unlogged-tables
 create tables as unlogged tables
压力测试工具
 // 压力测试相关参数
 Benchmarking options:
 -c NUM number of concurrent database clients (default: 1) // 指定pgbench连接到数据库的连接数
 -C establish new connection for each transaction // 是否使用短连接
 -D VARNAME=VALUE // 设置变量, 在自定义脚本中使用 :varname 引用. 可使用多个-D设置多个变量.
 define variable for use by custom script
 -f FILENAME read transaction script from FILENAME // 指定自定义的测试文件 (由元命令和SQL组成), 可使用多个-f 指定多个文件, 每个文件
作为一个事务, 每次执行事务时随机选择一个文件执行.
 -j NUM number of threads (default: 1) // pgbench的工作线程.
 -l write transaction times to log file // 开启事务统计, 输出文件名格式 pgbench_log.$PID.$threadID , (当-j >= 2时 , threadID从1开始)
 -M simple|extended|prepared // libpq接口
 protocol for submitting queries to server (default: simple)
 -n do not run VACUUM before tests // vacuum开关, 使用自定义文件时, 使用-n关闭vacuum.
 -N do not update tables "pgbench_tellers" and "pgbench_branches" // TPC-B 非默认测试模式, 少两个表的更新.
 -r report average latency per command // 报告测试文件中每条命令(包括元命令和SQL)的平均执行延迟.
 -s NUM report this scale factor in output // 使用自定义脚本测试时, 指定scale的输出. 没有实质意义.
 -S perform SELECT-only transactions // TPC-B 非默认测试模式, 只查询.
压力测试工具
 -t NUM number of transactions each client runs (default: 10) // 指定每个连接的执行事务数.