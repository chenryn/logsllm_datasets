# servlet-4
---
## 页面重定向
当文档移动到一个新的位置时，通常会使用页面重定向，我们需要将客户端发送到这个新位置或者也可能是由于负载均衡，或者只是为了简单的随机。
重定向请求到另一个页面的最简单的方式是使用 response 对象的 `sendRedirect()` 方法。下面是该方法的特征：
```java
public void HttpServletResponse.sendRedirect(String location)
throws IOException
```
该方法将响应和状态码及新的页面位置发送回浏览器。你也可以通过一起使用 `setStatus()` 和 `setHeader()` 方法来达到同样的效果：
```java
....
String site = "http://www.newpage.com" ;
response.setStatus(response.SC_MOVED_TEMPORARILY);
response.setHeader("Location", site);
....
```
这个例子显示了 servlet 如何将页面重定向到另一个位置：
```java
import java.io.*;
import java.sql.Date;
import java.util.*;
import javax.servlet.*;
import javax.servlet.annotation.WebServlet;
import javax.servlet.http.*;
@WebServlet(urlPatterns = "/PageRedirect")
public class PageRedirect extends HttpServlet{
  public void doGet(HttpServletRequest request,
                    HttpServletResponse response)
            throws ServletException, IOException
  {
      // Set response content type
      response.setContentType("text/html");
      // New location to be redirected
      String site = new String("http://www.ffffffff0x.com");
      response.setStatus(response.SC_MOVED_TEMPORARILY);
      response.setHeader("Location", site);
    }
}
```
现在使用 URL http://localhost:8080/PageRedirect 来调用这个 servlet。这将使你跳转到给定的 URL http://www.ffffffff0x.com 中。
![](../../../../../../assets/img/Develop/Java/笔记/Web/servlet/servlet-4/1.png)
---
## 点击计数器
### Web 页面的点击计数器
很多时候，你可能有兴趣知道你网站的某个特定页面上的总点击量。使用 servlet 来计算这些点击量是非常简单的，因为一个 servlet 的生命周期是由它运行的容器控制的。
以下是基于 Servlet 生命周期实现一个简单的页面点击计数器需要的步骤：
* 在 `init()` 方法中初始化一个全局变量。
* 每次调用 `doGet()` 或 `doPost()` 方法时，增加全局变量。
* 如果需要，你可以使用一个数据库表来存储 `destroy()` 方法中的全局变量。在下次初始化 servlet 时，这个值可以在 `init()` 方法内被读取。这一步是可选的。
* 如果你想计算一个会话内一个页面的点量击，那么你可以使用 `isNew()` 方法来查看该会话内是否已点击过相同的页面。这一步是可选的。
* 你可以显示全局计数器的值来显示网站中的总点击量。这一步是可选的。
在这里我假设 web 容器不会被重新启动。如果 web 容器被重新启动或 servlet 被销毁，计数器将被重置。
这个例子演示了如何实现一个简单的页面点击计数器：
```java
import java.io.*;
import java.sql.Date;
import java.util.*;
import javax.servlet.*;
import javax.servlet.annotation.WebServlet;
import javax.servlet.http.*;
@WebServlet(urlPatterns = "/PageHitCounter")
public class PageHitCounter extends HttpServlet{
  private int hitCount;
  public void init()
  {
     // Reset hit counter.
     hitCount = 0;
  }
  public void doGet(HttpServletRequest request,
                    HttpServletResponse response)
            throws ServletException, IOException
  {
      // Set response content type
      response.setContentType("text/html");
      // This method executes whenever the servlet is hit
      // increment hitCount
      hitCount++;
      PrintWriter out = response.getWriter();
      String title = "Total Number of Hits";
      String docType =
      "\n";
      out.println(docType +
        "\n" +
        "" + title + "\n" +
        "\n" +
        "" + title + "\n" +
        "" + hitCount + "\n" +
        "");
  }
  public void destroy()
  {
      // This is optional step but if you like you
      // can write hitCount value in your database.
  }
}
```
现在使用 URL http://localhost:8080/PageHitCounter 来调用这个 servlet。每次页面刷新时，计数器的值都会加 1，这将产生如下所示的结果：
![](../../../../../../assets/img/Develop/Java/笔记/Web/servlet/servlet-4/2.png)
### 网站点击计数器
很多时候，你可能有兴趣知道你整个网站的总点击量。在 Servlet 中，这也是非常简单的，我们可以使用过滤器实现这一点。
以下是实现一个基于过滤器生命周期的简单的网站点击计数器需要的步骤：
* 在过滤器的 init() 方法中初始化一个全局变量。
* 每次调用 doFilter 方法时，增加全局变量。
* 如果需要，你可以使用一个数据库表来存储过滤器的 destroy() 方法中的全局变量的值。在下次初始化过滤器时，该值可以在 init() 方法内被读取。这一步是可选的。
在这里我假设 web 容器不会被重新启动。如果 web 容器被重新启动或 servlet 被销毁，点击计数器将被重置。
这个例子演示了如何实现一个简单的网站点击计数器：
```java
// Import required java libraries
import java.io.*;
import javax.servlet.*;
import javax.servlet.http.*;
import java.util.*;
public class SiteHitCounter implements Filter{
  private int hitCount;
  public void  init(FilterConfig config)
                    throws ServletException{
     // Reset hit counter.
     hitCount = 0;
  }
  public void  doFilter(ServletRequest request,
              ServletResponse response,
              FilterChain chain)
              throws java.io.IOException, ServletException {
      // increase counter by one
      hitCount++;
      // Print the counter.
      System.out.println("Site visits count :"+ hitCount );
      // Pass request back down the filter chain
      chain.doFilter(request,response);
  }
  public void destroy()
  {
      // This is optional step but if you like you
      // can write hitCount value in your database.
  }
}
```
现在让我们来编译上述 servlet 并在 web.xml 文件中创建以下条目：
```xml
....
   SiteHitCounter
   SiteHitCounter
   SiteHitCounter
   /*
....
```
现在调用任意 URL 如 URLhttp://localhost:8080/。每次任意页面被点击时，计数器的值都会加 1 并且会在日志中显示如下所示的消息：
![](../../../../../../assets/img/Develop/Java/笔记/Web/servlet/servlet-4/3.png)
---
## 自动刷新页面
假设一个 web 页面，显示了现场比赛得分或股票市场状况或货币兑换率。对于所有这些类型的页面，你都需要使用你浏览器中的 refresh 或 reload 按钮来定期刷新 web 页面。
Java Servlet 提供给你一个机制使这项工作变得简单，可以使得 web 页面在给定的时间间隔自动刷新。
刷新一个 web 页面最简单的方式是使用响应对象的方法 `setIntHeader()`。以下是这种方法的特征：
```java
public void setIntHeader(String header, int headerValue)
```
此方法将头信息 “Refresh” 和一个表示时间间隔的整数值（以秒为单位）发送回浏览器。
---
## 包
涉及到 WEB-INF 子目录的 web 应用程序结构是所有的 Java web 应用程序的标准，并且是由 servlet API 规范指定的。给定一个 myapp 的顶级目录名，这里是目录结构，如下所示：
```
/myapp
    /images
    /WEB-INF
        /classes
        /lib
```
WEB-INF 子目录包含了应用程序的部署描述符，命名为 web.xml。所有的 HTML 文件都位于顶级目录 myapp 下。对于管理员用户，你会发现 ROOT 目录是和 myApp 一样的父目录。
### 创建包中的 Servlets
WEB-INF/classes 目录在与它们的包名称匹配的结构中包含了所有的 servlet 类和其他的类文件。例如，如果你有一个完全合格的类名称 com.myorg.MyServlet，那么这个 servlet 类必须被放置在如下所示的目录中：
```
/myapp/WEB-INF/classes/com/myorg/MyServlet.class
```
下面是创建包名为 com.myorg 的 MyServlet 类的例子
```java
// Name your package
package com.myorg;
// Import required java libraries
import java.io.*;
import javax.servlet.*;
import javax.servlet.http.*;
public class MyServlet extends HttpServlet {
  private String message;
  public void init() throws ServletException
  {
      // Do required initialization
      message = "Hello World";
  }
  public void doGet(HttpServletRequest request,
                    HttpServletResponse response)
            throws ServletException, IOException
  {
      // Set response content type
      response.setContentType("text/html");
      // Actual logic goes here.
      PrintWriter out = response.getWriter();
      out.println("" + message + "");
  }
  public void destroy()
  {
      // do nothing.
  }
}
```
### 编译包中的 Servlets
编译包中可用的类没有什么大的不同。最简单的方法是将你的 java 文件保存在完全限定路径中，正如上面所提到的一样，类将被保存在 com.myorg 中。你还需要将该目录添加到 CLASSPATH 中。
假设你的环境已正确设置，进入 `/webapps/ROOT/WEB-INF/classes` 目录并编译 MyServlet.java，如下所示：
```
$ javac MyServlet.java
```
如果 servlet 依赖于任何其他的库，那么你必须在你的 CLASSPATH 中包含那些 JAR 文件。我只包含了 servlet-api.jar JAR 文件，因为我在 Hello World 程序中没有使用任何其他的库。
该命令行使用来自 Sun Microsystems Java 软件开发工具包（JDK）内置的 javac 编译器。为了让该命令正常工作，必须包括你在 PATH 环境变量中所使用的 Java SDK 的位置。
如果一切顺利，上述编译会在相同的目录下生成 MyServlet.class 文件。下一节将解释如何在生产中部署一个已编译的 servlet。
### 打包的 Servlet 部署
默认情况下，servlet 应用程序位于路径 `/webapps/ROOT` 下且类文件放在 `/webapps/ROOT/WEB-INF/classes` 中。
如果你有一个完全合格的类名称 com.myorg.MyServlet，那么这个 servlet 类必须位于 `WEB-INF/classes/com/myorg/MyServlet.class` 中，你需要在位于 `/webapps/ROOT/WEB-INF/` 的 web.xml 文件中创建以下条目：
```xml
   MyServlet
   com.myorg.MyServlet
   MyServlet
   /MyServlet
```
上述条目要被创建在 web.xml 文件中的 `...` 标签内。在该文件中可能已经有各种可用的条目，但没有关系。
你基本上已经完成了，现在让我们使用 `\bin\startup.bat`（Windows 操作系统中）或 `/bin/startup.sh`（Linux/Solaris 等操作系统中）启动 tomcat 服务器，最后在浏览器的地址栏中输入 http://localhost:8080/MyServlet
---
## 调试
测试/调试 servlet 始终是困难的。Servlets 往往涉及大量的客户端/服务器交互，可能会出现错误但是又难以重现。
这里有一些提示和建议，可以帮助你调试。
### System.out.println()
`System.out.println()` 作为一个标记用来测试某一代码片段是否被执行，使用方法非常简单。我们也可以输出变量值。另外：
由于 System 对象是核心 Java 对象的一部分，它可以用于任何不需要安装任何额外类的地方。这包括 Servlets、JSP、RMI、EJB's、普通的 Beans 和类，以及独立的应用程序。
与在断点处停止相比，写入 System.out 不会对应用程序的正常执行流程有太多干扰，这使得它在时序重要的时候显得非常有价值。
以下使用 `System.out.println()` 的语法：
```
System.out.println("Debugging message");
```
通过上述语法生成的所有消息将被记录在 web 服务器的日志文件中。
### 消息记录
利用标准日志记录方法，使用适当的日志记录方法来记录所有调试、警告和错误消息是非常好的想法，我使用的是 log4J 来记录所有的消息。