# Checkpointing of Control Structures in Main Memory Database Systems

## Authors
- Long Wang
- Zbigniew Kalbarczyk
- Ravishankar K. Iyer
- H. Vora
- T. Chahande

### Affiliations
- **L. Wang, Z. Kalbarczyk, R. K. Iyer**
  - Center for Reliable and High-Performance Computing
  - Coordinated Science Laboratory
  - University of Illinois at Urbana-Champaign
  - 1308 W. Main Street, Urbana, IL 61801
  - Email: {longwang, kalbar, iyer}@crhc.uiuc.edu
- **H. Vora, T. Chahande**
  - Mascon IT Ltd.
  - 1699 E. Woodfield Road, Schaumburg, IL 60173
  - Email: {hvora, takshak}@masconit.com

## Abstract
This paper proposes an application-transparent, low-overhead checkpointing strategy for maintaining the consistency of control structures in a commercial main memory database (MMDB) system, leveraging the ARMOR (Adaptive Reconfigurable Mobile Object of Reliability) infrastructure. Performance measurements and availability estimates demonstrate that the proposed checkpointing scheme significantly enhances database availability (an extra nine in improvement compared with major-recovery-based solutions) while incurring only a small performance overhead (less than 2% in a typical workload of real applications).

## 1. Introduction
Main memory database (MMDB) systems store data permanently in main memory, enabling high-speed access to shared data for applications such as real-time billing and high-performance web servers. However, this also makes the database highly vulnerable to application errors or failures, as the database is directly mapped into the application's address space.

In addition to user data, the database maintains control structures (e.g., lock/mutex tables and file tables) necessary for data operations. A database management system (DBMS) ensures data integrity, including recovery from errors or failures. However, the integrity of control structures is often not well maintained due to less uniform interfaces compared to user data. As a result, errors in control structures can lead to significant system downtime and reduced availability.

This paper introduces and evaluates an application-transparent, low-overhead checkpointing strategy for maintaining the consistency of control structures in a commercial MMDB. The solution is based on the ARMOR architecture and runtime infrastructure, which significantly reduces or eliminates the need for major recovery, a lengthy process that can take tens of seconds and adversely impact availability. The approach can be adapted to other applications, and the ARMOR runtime support provides a foundation for system-wide error detection and recovery. The key contributions of this work are:
- A framework for checkpointing MMDB control structures.
- Design and implementation of two checkpointing algorithms: incremental and delta checkpointing.
- Performance evaluation of the proposed checkpointing algorithms, showing a performance overhead range of 1% to 10% for a workload of 60% write transactions.
- Estimation of database availability under different frequencies of crashes requiring major recovery, demonstrating that a checkpointing-based solution provides about five nines of availability, one nine more than the baseline system.

## 2. Target System Overview
The target system is a commercial relational MMDB designed to support high-performance, fault-resilient applications requiring concurrent access to shared data. The processes accessing the shared data can be either clients or database services. Services perform functions to assist in transaction processing, such as the cleanup service, which detects client/service failures and performs recovery, including major recoveries.

The database supports control structures (SysDB) necessary for correct operation, including:
- **Process Table:** Maintains process IDs, mutex lists, and information on database mapping into the process address space.
- **Transaction Table:** Maintains logs and locks for active transactions.
- **File Table:** Keeps user database files.

Each client/service process maps SysDB into its own address space before accessing the database. The reliability problem addressed in this paper is the inconsistency of control structures due to the abnormal termination (crash) of a client or service. Upon such a crash, the system denies services to all other processes and restarts the entire database, a process known as major recovery. This can take tens of seconds and significantly degrade system availability, especially for critical applications.

## 3. ARMOR High-Availability Infrastructure
The ARMOR infrastructure is designed to manage redundant resources, detect errors in both user applications and infrastructure components, and recover quickly from failures. ARMORs are multithreaded processes structured around elements that contain private data and provide elementary functions or services. Key components include:
- **Reliable Point-to-Point Communication:** Between ARMORs.
- **Heartbeat Mechanism:** To ensure liveness.
- **State Capture:** For fault tolerance.

ARMORs communicate through message-passing, with the ARMOR microkernel managing message distribution. The modular, event-driven architecture allows customization by selecting specific elements. Fundamental components include the Fault Tolerance Manager (FTM), Heart Beat ARMOR (HB), and Daemons.

## 4. ARMOR-based Checkpointing
### Embedded ARMORs
In most cases, an ARMOR launches and monitors the application. In the embedded ARMOR solution, the application links the ARMOR microkernel and uses the ARMOR API to interface with the underlying element structure. The embedded ARMOR process appears as a full-fledged ARMOR to other ARMORs and as a native application process to non-ARMOR processes. This allows the application to use ARMOR services without significant changes.

### ARMOR-based Checkpointing
To expose ARMOR services, the database is instrumented in two ways:
1. **ARMOR Stubs:** Embedded in database processes to facilitate communication between the database server and the ARMOR infrastructure.
2. **Checkpointing Functionality:** Embedded for checkpointing SysDB data structures, modifying selected library functions while preserving function interfaces.

Figure 2 illustrates the basic architecture of the ARMOR infrastructure integrated with the target database. The FTM, FTM daemon, HB, and Daemon form the skeleton of the ARMOR infrastructure. An ARMOR element called the image keeper maintains the checkpoint of SysDB data structures. When a client or service opens the database, an Embedded ARMOR (EA) stub is created within the process, establishing a communication channel with the Daemon. Checkpoint data is then transmitted to the destination ARMOR, which maintains the image in memory and stores it on disk.

### Data Flow
During system operation, each client or service sends the related checkpoint to the image keeper when it acquires or releases a mutex, depending on the checkpointing strategy. If there is no error, the checkpoint reflects the latest consistent state of SysDB. In case of a client/service crash while holding a mutex, the cleanup service requests the saved correct copy of the relevant data structures from the image keeper. Successful restoration allows the system to continue normal execution without invoking a major recovery.

## 5. Checkpointing Algorithms
This section discusses two algorithms for checkpointing control structures: incremental checkpointing and delta checkpointing.

### Incremental Checkpointing
In the incremental checkpointing scheme, only updates (incremental changes) to data are sent to the image keeper. The basic algorithm is as follows:

[Algorithm details to be provided here]

### Delta Checkpointing
In the delta checkpointing scheme, the pre-transaction state of the control structures accessed by a given transaction (both write or read-only) is preserved as the current checkpoint. At recovery time, the current state of control structures in shared memory is merged with the delta checkpoint to restore the state.

[Algorithm details to be provided here]

---

This revised version aims to improve the clarity, coherence, and professionalism of the original text.