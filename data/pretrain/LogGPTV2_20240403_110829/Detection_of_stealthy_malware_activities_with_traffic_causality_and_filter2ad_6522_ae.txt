tional binary classiﬁcation problem.
Our triggering relation discovery problem may bear super-
ﬁcial similar to the link prediction problem in the context
of mining social network data [5, 16, 21, 28]. Liben-Nowel
and Kleinbergz [28] formalized the link prediction problem
and surveyed an array of methods on measuring the prox-
imity of nodes in a network. Follow-up works applied ad-
vanced machine learning methods to social network data.
These advanced methods include logistic regression, deci-
sion tree, and naive Bayesian [21] as well as supervised ran-
dom walks [5]. Besides the obvious semantic diﬀerences in
the two problems, our work diﬀers from social network link
prediction.
• Links in social networks connect nodes that are consid-
ered equivalent by a given logical relationship. While,
in our model, links are triggered by a hierarchical re-
lationship between nodes. This conceptual diﬀerence
makes it possible for our model to create pairwise fea-
tures for ﬁnding the semantic relations, rather than an-
alyzing the similarity of the nodes, or the link strength
in a network.
• Our TRG construction operation and root-trigger se-
curity analysis are unique and beyond the link predic-
tion type of inference problem.
Malware analysis studies build similar dependency graphs
to generalize the malware behaviors [4, 25]. Kolbitsch et
al. [25] analyzed malware programs and extract the depen-
dency between the system calls. Besides the research do-
main, diﬀerences between their work and ours are signiﬁcant.
We adopted the machine learning tools to draw the TRG,
while they used speciﬁcation construction algorithm to gen-
erate the behavior graphs. In addition, we use the vagabonds
in the TRG to identify the malicious network requests, while
they use malicious behavior graphs to match the behavior of
unknown programs. Similarly, Babic et al. [4] continued that
line of research and built data-ﬂow dependency graph based
on their inference algorithm. Therefore, the construction
mechanism and application of the dependency graphs in our
work diﬀer from those in the aforementioned approaches.
6. CONCLUSIONS AND FUTURE WORK
We presented a new traﬃc-reasoning technique for detect-
ing the network activities of stealthy malware. The analysis
approach exploring request-level traﬃc structures and se-
mantic triggering relations is new. We demonstrated the
use of triggering relation discovery as a useful security anal-
ysis approach, and showed its eﬀectiveness against browser
spyware, DNS bot, and data exﬁltrating malware. Our eval-
uation showed high accuracy of the triggering relation pre-
diction. Our analysis identiﬁed several types of network
anomalies caused by traﬃc to malicious or misconﬁgured
servers. For future work, we plan to design more complex
security deﬁnitions and models for utilizing the triggering
relation graphs to detect stealthy malware activities. We
also plan to investigate the model retraining for practical
deployment.
7. ACKNOWLEDGMENTS
We are grateful to the anonymous reviews for their in-
sightful comments. This work has been supported in part
by NSF grant CAREER CNS-0953638.
8. REFERENCES
[1] DNScat. A tool to tunnel traﬃc through DNS servers.
http://tadek.pietraszek.org/projects/DNScat/.
[2] Tlogger. An Firefox extension.
http://dubroy.com/tlogger/.
48[3] H. Almohri, D. Yao, and D. Kafura. Process authentication
[23] A. Keller, U. Blumenthal, and G. Kar. Classiﬁcation and
for high system assurance. IEEE Transaction on
Dependable and Secure Computing (TDSC), 2014.
[4] D. Babi´c, D. Reynaud, and D. Song. Malware analysis with
tree automata inference. In Computer Aided Veriﬁcation,
pages 116–131. Springer, 2011.
[5] L. Backstrom and J. Leskovec. Supervised random walks:
predicting and recommending links in social networks. In
Proceedings of the fourth ACM international conference on
Web search and data mining, pages 635–644. ACM, 2011.
[6] R. Baeza-Yates, B. Ribeiro-Neto, et al. Modern information
retrieval, volume 463. ACM press New York, 1999.
[7] P. V. Bahl, R. Chandra, A. Greenberg, S. Kandula,
D. Maltz, and M. Zhang. Towards highly reliable enterprise
network services via inference of multi-level dependencies.
In Proceedings of ACM SIGCOMM, August 2007.
[8] L. Bilge, E. Kirda, C. Kruegel, and M. Balduzzi.
EXPOSURE: Finding malicious domains using passive
DNS analysis. In Proceedings of the 18th Annual Network
and Distributed System Security Symposium (NDSS),
February 2011.
[9] X. Chen, M. Zhang, Z. M. Mao, and P. Bahl. Automating
network application dependency discovery: Experiences,
limitations, and new solutions. In Proceedings of OSDI,
pages 117–130, 2008. USENIX Association.
[10] H.-K. Choi and J. O. Limb. A behavioral model of web
traﬃc. In Network Protocols, 1999.(ICNP’99) Proceedings.
Seventh International Conference on, pages 327–334.
[11] M. Christodorescu, S. Jha, and C. Kruegel. Mining
speciﬁcations of malicious behavior. In ISEC, pages 5–14,
2008.
[12] C. Cortes and V. Vapnik. Support-vector networks.
Machine learning, 20(3):273–297, 1995.
[13] M. Cova, C. Kruegel, and G. Vigna. Detection and analysis
of drive-by-download attacks and malicious JavaScript
code. In Proceedings of 19th International World Wide
Web Conference, 2010.
[14] W. Cui, Y. H. Katz, and W. tian Tan. BINDER: An
Extrusion-based Break-In Detector for Personal
Computers. In Proceedings: USENIX Annual Technical
Conference, page 4, 2005.
[15] C. Elkan. The foundations of cost-sensitive learning. In
International joint conference on artiﬁcial intelligence,
volume 17, pages 973–978, 2001.
[16] L. Getoor and C. P. Diehl. Link mining: a survey. SIGKDD
Explor. Newsl., 7(2):3–12, Dec. 2005.
[17] T. M. Green, W. Ribarsky, and B. Fisher. Visual analytics
for complex concepts using a human cognition model. In
Visual Analytics Science and Technology, 2008. VAST’08.
IEEE Symposium on, pages 91–98. IEEE, 2008.
[18] G. Gu, R. Perdisci, J. Zhang, and W. Lee. BotMiner:
Clustering analysis of network traﬃc for protocol- and
structure-independent botnet detection. In Proceedings of
the 17th USENIX Security Symposium, 2008.
[19] R. Gummadi, H. Balakrishnan, P. Maniatis, and
S. Ratnasamy. Not-a-Bot: Improving service availability in
the face of botnet attacks. In Proceedings of the 6th
USENIX Symposium on Networked Systems Design and
Implementation (NDSI), 2009.
[20] G. John and P. Langley. Estimating continuous
distributions in Bayesian classiﬁers. In Proceedings of the
Eleventh Conference on Uncertainty in Artiﬁcial
Intelligence, pages 338–345. Morgan Kaufmann, 1995.
[21] I. Kahanda and J. Neville. Using transactional information
to predict link strength in online social networks. In
Proceedings of the Third International Conference on
Weblogs and Social Media (ICWSM), 2009.
[22] S. Kandula, R. Chandra, and D. Katabi. What’s going on?
Learning communication rules in edge networks. In
Proceedings of ACM SIGCOMM, August 2008.
computation of dependencies for distributed management.
In Proceedings of International Symposium on Computers
and Communications, pages 78–83, 2000.
[24] S. T. King, Z. M. Mao, D. G. Lucchetti, and P. M. Chen.
Enriching intrusion alerts through multi-host causality. In
Proceedings of Network and Distributed System Security
(NDSS), 2005.
[25] C. Kolbitsch, P. M. Comparetti, C. Kruegel, E. Kirda, X.-y.
Zhou, and X. Wang. Eﬀective and eﬃcient malware
detection at the end host. In USENIX Security Symposium,
pages 351–366, 2009.
[26] W. Lee, S. J. Stolfo, and K. W. Mok. A data mining
framework for building intrusion detection models. In
Security and Privacy, 1999. Proceedings of the 1999 IEEE
Symposium on, pages 120–132. IEEE, 1999.
[27] Z. Li, M. Zhang, Z. Zhu, Y. Chen, A. G. Greenberg, and
Y.-M. Wang. WebProphet: Automating performance
prediction for web services. In NSDI, volume 10, 2010.
[28] D. Liben-Nowell and J. Kleinberg. The link-prediction
problem for social networks. Journal of the American
society for information science and technology,
58(7):1019–1031, 2007.
[29] P. Likarish, E. E. Jung, and I. Jo. Obfuscated malicious
JavaScript detection using classiﬁcation techniques. In
Proceedings of 4th International Conference on Malicious
and Unwanted Software, 2009.
[30] C. Livadas, R. Walsh, D. Lapsley, and W. T. Strayer. Using
machine learning techniques to identify botnet traﬃc. In
2nd IEEE LCN Workshop on Network Security (WoNS)
2006, pages 967–974, 2006.
[31] A. Natarajan, P. Ning, Y. Liu, S. Jajodia, and S. E.
Hutchinson. NSDMiner: Automated discovery of network
service dependencies. In INFOCOM, pages 2507–2515,
2012.
[32] T. T. T. Nguyen and G. J. Armitage. A survey of
techniques for internet traﬃc classiﬁcation using machine
learning. IEEE Communications Surveys and Tutorials,
10(1-4):56–76, 2008.
[33] Panda Security Report. 2013.
http://press.pandasecurity.com/press-room/reports/.
[34] Botnet Pony 1.9 Malware. http://laboratoriomalware.
blogspot.com/2013/01/botnet-pony-19-malware.html.
[35] A. Srivastava, S. Sural, and A. Majumdar. Database
intrusion detection using weighted sequence mining.
Journal of Computers, 1(4):8–17, 2006.
[36] D. Stefan, C. Wu, D. Yao, and G. Xu. Cryptographic
provenance veriﬁcation for the integrity of keystrokes and
outbound network traﬃc. In Proceedings of the 8th
International Conference on Applied Cryptography and
Network Security (ACNS), June 2010.
[37] H. Tan, N. Goharian, and M. Sherr. $100,000 prize jackpot.
Call now!: Identifying the pertinent features of SMS spam.
In Proceedings of the 35th international ACM SIGIR
conference on Research and development in information
retrieval, pages 1175–1176. ACM, 2012.
[38] N. Williams, S. Zander, and G. Armitage. A preliminary
performance comparison of ﬁve machine learning algorithms
for practical IP traﬃc ﬂow classiﬁcation. SIGCOMM
Comput. Commun. Rev., 36(5):5–16, Oct. 2006.
[39] P. Xie, J. H. Li, X. Ou, P. Liu, and R. Levy. Using Bayesian
networks for cyber security analysis. In Dependable Systems
and Networks (DSN), 2010 IEEE/IFIP International
Conference on, pages 211–220. IEEE, 2010.
[40] K. Xu, P. Butler, S. Saha, and D. Yao. DNS for
massive-scale command and control. IEEE Trans.
Dependable Sec. Comput., 10(3):143–153, 2013.
[41] K. Xu, H. Xiong, C. Wu, D. Stefan, and D. Yao.
Data-provenance veriﬁcation for secure hosts. IEEE Trans.
Dependable Sec. Comput., 9(2):173–183, 2012.
49[42] C. Yang, R. C. Harkreader, and G. Gu. Die free or live
hard? Empirical evaluation and new design for ﬁghting
evolving twitter spammers. In Recent Advances in
Intrusion Detection, pages 318–337. Springer, 2011.
[43] A. Zand, G. Vigna, R. Kemmerer, and C. Kruegel. Rippler:
Delay injection for service dependency detection. Technical
report, UCSB, 2013.
[44] H. Zhang, W. Banick, D. Yao, and N. Ramakrishnan. User
intention-based traﬃc dependence analysis for anomaly
detection. In Security and Privacy Workshops (SPW),
2012 IEEE Symposium on, pages 104–112. IEEE, 2012.
APPENDIX
Figure 4: The illustration of various cases where B’s
predicted root trigger is correct (a-c) or wrong (d-
g) on the triggering relation graph constructed from
pairwise triggering relations. Let the ground truth
of B’s root trigger be A. Case (a) is where B’s parent
is also B’s root. Cases (b) and (c) are where there
is one or more paths from the single root A to B,
respectively. Cases (d), (e), and (f ) are where the
predicted root of B is or includes a node other than
A (e.g., E). Case (g) is where the predicted root of
B is null, i.e., no root trigger.
By the deﬁnition of triggering relation graph (TRG) in
Section 2, each node on a valid TRG should have at most
one parent and thus at most one root trigger. In reality, we
relax the deﬁnition in that this property may not hold in the
TRGs constructed from pairwise classiﬁcation results, e.g.,
a node may have multiple paths leading to the same root,
or multiple paths leading to diﬀerent roots. Therefore, our
TRG construction algorithm needs to ﬁnd all the root trig-
gers of a network event, which makes the problem equivalent
to compute the transitive reduction of a direct graph.
We illustrate the various cases where an event’s predicted
root trigger is correct (a-c) or wrong (d-g) on the triggering
relation graph constructed from pairwise triggering relations
in Figure 4. Our root-trigger deﬁnition allows the existence
of multiple intermediate parents for a node, as long as the
root trigger is correct, e.g., Figure 4 (c).
Feature
Rank
IG GR
Brief Deﬁnition
HTTPRank
QueryHostSim
QueryDomainSim
TimeDiﬀ
QueryRefSim
MissingRef
HTTPType
DuplicatedDNS
PIDDiﬀ
1
2
3
4
5
6
7
8
9
1
2
3
4
7
5
6
8
9
Rank of B in HTTP.
Sim(A.query, B.host).
Sim(A.query, Dom(B.host)).
Time diﬀerence (ms).
Sim(A.query, Dom(B.ref )).
If B.ref is null.
If B is IPv4 or IPv6.
# of same DNS after A.
If both PIDs are equal.
Table 9: Feature ranking by InfoGain (IG) and
GainRatio (GR) Selection on dataset II. Denote
DNS and HTTP requests as A and B, and deﬁne
Dom(U RL) to get the domain of a URL.
Feature
Rank
IG GR
DiﬀAck2Seq1
ExpectedAck
TimeDiﬀ
Flag1
Len1Zero
Len1Large
MatchAck1Seq2
Flag2
MissingAck1
1
2
3
4
5
6
7
8
9
2
1
7
3
5
4
8
9
6
Brief Deﬁnition
Calculate B.ack − A.seq.
If B.ack = A.seq + A.len.
Time diﬀerence (ms).
Control bits in A.
If A.len is 0.
If A.len ≥ MSS.
If A.ack = B.seq.
Control bits in B.
If A.ack is null.
Table 10: Feature ranking by InfoGain (IG) and
GainRatio (GR) Selection on dataset III. Two TCP
packets are A and B, which B follows A.
ABAAXBXYBEABXBE(a)(b)(c)(d)(e)ABXEY(f)(g)nullBX......50