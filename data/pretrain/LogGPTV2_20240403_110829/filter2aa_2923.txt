# Watching the Watchers: Target Exploitation via Public Search Engines

## Introduction
This document explores how search engines, particularly Google, can be used to uncover and exploit vulnerabilities on the web. It covers various techniques for identifying targets, bypassing security, and automating the process.

### What’s This About?
- **Using Search Engines**: Leveraging search engines to perform unintended or interesting actions.
- **Hacking Terminology**: Understanding the lingo of hackers (e.g., "sp3ak l1ke l33to hax0rs").
- **Transparent Proxy Servers**: Using search engines as proxy servers to bypass security.
- **Finding Development Sites**: Locating development sites that may contain sensitive data.
- **Automating the Process**: Tools like Googlescan for automating the exploitation process.

## Requirements from a Search Engine
- **Advanced Search Options**: Beyond basic AND and OR operators.
- **Caching**: Browsing down or changed pages.
- **Instant Response**: Zero-wait results.
- **Translations**: Document and language translations.
- **Multi-Type Searches**: Web, news, image, and FTP searches.

### The Obvious Choice: Google
Google is the preferred choice due to its advanced features and extensive index.

## Historical Context
- **Vincent GAILLOT**: Posted about these techniques on BUGTRAQ nearly two years ago.
- **Google Hacks**: Techniques such as "Google hacks," proxy, auth bypass, and finding development sites.

## Hacking with Google
### Proxy Usage
- **Language Translation Service**: Google offers a language translation service.
- **Example**: Translating from English to Spanish.
- **Proxy Bouncing**: Using Google's translation service to create an English-to-English translation, effectively using it as a proxy.
  - **URL Example**: `http://translate.google.com/translate?u=http://www.defcon.org&langpair=en|en`

### Finding Development Sites
- **Technique**: Use unique phrases from an existing site to find mirrors or development servers hosting the same page.
- **Trolling**: Further searches can reveal more files on the server.
- **Pay Dirt**: Creative searching can lead to source code dumps.

### Authentication Bypass
- **Example**: An attacker interested in a password-protected page (e.g., `www.thin-ice.com`).
- **Steps**:
  1. Initial search provides insight into the site structure.
  2. Cache link reveals the cached version of the page without needing a password.
  3. Further clicks lead to the site's source code.

### Evil Searching: The Basics
- **Tools of the Trade**: Understanding Google's search syntax.
- **Documentation**: Detailed information available at `http://www.google.com/apis/reference.html`.

### Simple Word Search
- **Example**: Searching for `.bash_history` files can reveal live contents.
- **Further Crawling**: Reveals firewall configuration files with usernames and passwords, and SSH known hosts files.

### Simple Phrase Search
- **Creativity**: Using quotes and specific phrases can reveal error messages and other revealing information.
- **Example**: Searching for "Cold Fusion error message" can provide useful details.

### Special Characters and Syntax
- **AND, NOT, Wildcards**: Using special characters and operators to refine searches.
- **Site-Specific Search**: Using `site:` to limit results to a specific domain.
- **Date Restricted Search**: Using `daterange:` to limit results to a specific date range.
- **Title Search**: Using `intitle:` and `allintitle:` to search within page titles.
- **URL Search**: Using `inurl:` to find specific terms within URLs.
- **File Type Search**: Using `filetype:` to find specific file types.

### Finding OS and Web Server Versions
- **Windows-Based Default Servers**: Using specific title searches to identify Windows-based servers.
- **Apache Versions**: Identifying different versions of Apache and their prevalence.

### Vulnerability Trolling
- **Finding 0-Day Targets**: Identifying new vulnerabilities and locating vulnerable targets.
- **Example**: A new vulnerability in a CGI script called `normal_html.cgi` led to 212 sites being found with the vulnerable script on the day the exploit was released.

### Directory Listings
- **Misconfigurations**: Directory listings often reveal misconfigured web servers.
- **Useful Information**: Directory listings can provide a list of files, which can be very useful.
- **Example**: Using `intitle:"Index of"` to find directory listings and combining with other searches to find specific files.

### Automation: Googlescan
- **Vulnerability Scanner**: Using a known set of file-based web vulnerabilities to create a vulnerability scanner.
- **Script Example**: A shell script (`googlescan.sh`) to automate the process and output a list of potentially vulnerable servers.

### Rise of the Robots
- **Autonomous Malicious Robots**: Powered by public search engines, these robots can follow malicious links and actively exploit targets.
- **Example Links**: Various example links that can be used to exploit targets.
- **Results**: Robots followed all links, including non-http ports, and performed attacks unawares.

### Prevention
- **Google’s Advice**: Google is willing to remove references and provides webmaster advice.
- **Personal Advice**: Keep sensitive data off the web, scan yourself, and be proactive.

### Final Words
- **Additional Resources**: Links to further reading and resources.
- **Contact Information**: Contact details for the author.

---

For more information and additional examples, visit [Johnny Long's website](http://johnny.ihackstuff.com) or contact the author at [PI:EMAIL].