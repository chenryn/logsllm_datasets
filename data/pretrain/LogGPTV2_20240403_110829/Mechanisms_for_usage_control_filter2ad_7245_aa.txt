title:Mechanisms for usage control
author:Alexander Pretschner and
Manuel Hilty and
David A. Basin and
Christian Schaefer and
Thomas Walter
Mechanisms for Usage Control
A. Pretschner, M. Hilty, D. Basin
Information Security, ETH Zurich, Switzerland
{pretscha,hiltym,basin}@inf.ethz.ch
ABSTRACT
Usage control is a generalization of access control that also
addresses how data is used after it is released. We present
a formal model for diﬀerent mechanisms that can enforce
usage control policies on the consumer side.
Categories and Subject Descriptors:
D.2.4 [Software Engineering]: SW/Program Veriﬁcation
General Terms: Access Control
Keywords: Usage Control, DRM
1.
INTRODUCTION
Usage control [4] generalizes access control by controlling
not only who may access which data, but also how the data
may be used or distributed afterwards. We consider dis-
tributed settings, where processes act in the roles of data
providers and data consumers. A data provider gives sensi-
tive data to a data consumer based on conditions both on
the past (which we ignore in this paper) and the future. The
latter requirements come as obligations that restrict the fu-
ture usage of data. When data providers release data, they
would like mechanisms on the consumer’s side to enforce
their requirements. They would also like to check consis-
tency of policies, and if mechanisms are capable of enforc-
ing them. To this end, we present a model of usage control
mechanisms that formalizes the problem domain at a real-
istic level of complexity. Mechanisms are modeled as trace
transformers that map attempted events into actual usage-
controlled events. Our model allows the speciﬁcation of a
wide range of usage control mechanisms—inhibition, execu-
tion, delay, modiﬁcation, and signaling—which includes all
those found in practice. Moreover, it caters for concurrent
and ongoing usages. We assume some familiarity with the
Z language, the formalism employed in this paper.
2. SETUP AND POLICY LANGUAGE
Usage control requirements are negotiated between data
providers and consumers, and enforced using consumer-side
mechanisms. Data consumers request data. Using negotia-
Permission to make digital or hard copies of all or part of this work for
personal or classroom use is granted without fee provided that copies are
not made or distributed for proﬁt or commercial advantage and that copies
bear this notice and the full citation on the ﬁrst page. To copy otherwise, to
republish, to post on servers or to redistribute to lists, requires prior speciﬁc
permission and/or a fee.
ASIACCS ’08, March 18-20, Tokyo, Japan
Copyright 2008 ACM 978-1-59593-979-1/08/0003 ...$5.00.
C. Schaefer, T. Walter
DoCoMo Euro-Labs, Munich, Germany
{schaefer,walter}@docomolab-euro.com
tors, the consumer and provider negotiate the usage request,
a topic not treated in this paper. Upon successful negotia-
tion, data is transferred from the provider to the consumer
and the usage control requirements are activated. From this
point onward, mechanisms on the consumer’s side will en-
force the requirements (which is, in general, not fully pos-
sible for all requirements: taking photographs of a monitor
will always be an option). We assume the consumer pos-
sesses a secure data store and that, prior to usage, all data is
routed through usage control mechanisms whenever it leaves
the store. This paper’s sole focus is on the mechanisms.
Semantic Model. Our model is based on classes of pa-
rameterized events. The event classes include usage and
other, with the latter including activation events. An event
consists of the event name and parameters, represented as
a partial function from names to values. We will describe
instantiated event parameters as (name, value) pairs. An
example is the event (play,{(obj , o)}), where play is the
name of the event and the parameter obj has the value o.
The deﬁnition of events in the Z language is shown below.
EName, PName, and PVal deﬁne disjoint basic types for
event names, parameter names, and parameter values.
getclass : EName → EClass
[EName, PName, PVal]; Ev == EName × (PName (cid:55)→ PVal)
EClass ::= usage | other ;
Events are ordered via a reﬁnement relation reﬁnesEv.
Event e2 reﬁnes event e1 iﬀ e2 has the same event name as
e1 and all parameters of e1 have the same value in e2. e2 can
also have additional parameters speciﬁed; see [1] for a for-
malization. The idea is that when specifying usage control
requirements, we do not want to specify all parameters. For
instance, if the event (play,{(obj , o)}) is prohibited, then
the event (play,{(obj , o), (device, d )}) should also be pro-
hibited. The event (nil , ∅) is reserved and denotes no event.
We need a language to deﬁne obligations. Its semantics
will be deﬁned over traces: mappings from abstract points
in time—represented by the natural numbers—to possibly
empty sets of maximally reﬁned events. We cater for us-
age events that execute over a time interval, e.g., watching
a movie. For example, if a time step lasts 1 minute and
a user plays a movie for 3 minutes, there will be 3 consec-
utive events indexed with start and ongoing, respectively:
((play,{(obj , mov )}), start), and twice ((play,{(obj , mov )}),
ongoing). The data type IndEv deﬁnes such indexed events.
We also need to express that usage is desired by a user
(DesIndEv ): not every attempted usage is executed.
Index ::= start | ongoing;
DesIndEv ::= TRY (cid:104)(cid:104)IndEv(cid:105)(cid:105); Trace : N → P(IndEv ∪ DesIndEv )
We use the temporal logic OSL [1] as language for usage
IndEv == Ev × Index
240
control requirements. Its syntax is provided by Φ+ (+ for
future; we slightly deviate from the Z syntax).
Φ+ ::= Efst(cid:104)(cid:104)Ev(cid:105)(cid:105) | Eall(cid:104)(cid:104)Ev(cid:105)(cid:105) | Tfst(cid:104)(cid:104)Ev(cid:105)(cid:105) | Tall(cid:104)(cid:104)Ev(cid:105)(cid:105) |
¬Φ+ | Φ+ ∧ Φ+ | Φ+ ∨ Φ+ | Φ+ ⇒ Φ+ | until(cid:104)(cid:104)Φ+ × Φ+(cid:105)(cid:105) |
always(cid:104)(cid:104)Φ+(cid:105)(cid:105) | after(cid:104)(cid:104)N × Φ+(cid:105)(cid:105) | within(cid:104)(cid:104)N × Φ+(cid:105)(cid:105) |
during(cid:104)(cid:104)N × Φ+(cid:105)(cid:105) | repmax(cid:104)(cid:104)N × Φ+(cid:105)(cid:105) |
replim(cid:104)(cid:104)N × N × N × Φ+(cid:105)(cid:105) | repuntil(cid:104)(cid:104)N × Φ+ × Φ+(cid:105)(cid:105)
We distinguish between the start of an action (syntacti-
cally: Efst ; semantically: an indexed event with index start)
and any lasting action (syntactically: Eall ; semantically: in-
dexed events with any index). Tfst and Tall refer to the re-
spective attempted actions drawn from set DesIndEv. When
specifying events in obligations, by virtue of the reﬁnement
relation reﬁnesEv, there is an implicit universal quantiﬁ-
cation over unmentioned parameters. ¬,∧,∨,⇒ have the
usual semantics. Our until operator is the weak-until oper-
ator from LTL. after (n) refers to the time after n time steps.
during speciﬁes that something must constantly hold dur-
ing a speciﬁed time interval and within requires something
to hold at least once during a speciﬁed time interval.
Cardinality operators restrict the number of occurrences
or the duration of an action. The replim operator speciﬁes
lower and upper bounds of time steps within a ﬁxed time
interval in which a given formula holds. The repuntil oper-
ator is independent of any time interval: it limits the maxi-
mal number of times a formula holds until another formula
holds (e.g., the occurrence of some event). repmax deﬁnes
the maximal number of times a formula may hold in the in-
deﬁnite future. These cardinality operators are also used to
express limits on the accumulated usage time, e.g., by using
Eall (e) as an argument for limiting the accumulated time
of usage e. E.g., replim(20 , 0 , 5 , Eall (play,{(obj , mA)}))
speciﬁes that movie mA may be played for at most ﬁve
time units during the next twenty time units. Similarly,
¬replim(20 , 0 , 2 , Efst (play,{(obj , mB )})) ⇒ after (25 ,
Efst (notify,{(rcv , subA)})) speciﬁes that if the movie mB is
started more than twice during the next 20 time units, then
subject subA will be notiﬁed after 25 time units. We omit a
formalization of the semantics, |=f , for brevity’s sake [1, 2].
Obligations represent usage control requirements (“delete
after 30 days”; “do not distribute”). Each obligation has a
name that indexes respective activation events, and a for-
mula from Φ+ that must hold after its activation. A trace
satisﬁes an obligation iﬀ the obligations’s formula holds at
the moment of the obligation’s activation, which is captured
by a dedicated event.
3. MECHANISMS
Mechanisms are the means by which usage can be con-
trolled. They are installed on the consumer’s side and may
be conﬁgured by the provider. Mechanisms consist of two
parts: a description of when they are applicable, often in-
cluding a triggering event, and the respective actions to be
taken. We have already introduced the distinction between
desired and actual usages. Mechanisms are triggered by de-
sired events. If the mechanism’s condition holds, the mech-
anism’s actions are executed. Otherwise, the overall system
guarantees that the desired usage is transformed into the
respective actual usage. We will later model the eﬀect of
a set of mechanisms (not the mechanisms themselves) as a
function that maps possible traces—including desired usages
and activations only—to usage-controlled traces.
Since enforcement mechanisms can only make decisions
based on their current knowledge, we use a temporal logic of
the past, Φ−, to describe the conditions under which mech-
anisms perform their tasks. This is done by dualizing the
respective future operators in Φ+. The straightforward se-
mantics, |=f − , is deﬁned elsewhere [2]. To express the past
nature of all operators, we superscript them with a −.
Because mechanisms can be conﬁgured, we allow for vari-
ables in the deﬁnition of conditions and triggering actions.
The latter are then events where either some parameter val-
ues or the name of the event is left unspeciﬁed. The re-
spective language is called Φ−
v which introduces a syntactic
category for variables (and events with variables, VarEv ).
Elements from Φ−
v can be straightforwardly instantiated to
elements from Φ− by means of a substitution function called
subst f . Finally, to describe the overall functionality of mech-
anisms, we will use mixed formulae, Φ±, which combine
both future and past formulae in a restricted manner, as in
schema Mechanism below (see [2] for the semantics, |=f ± ).
Mechanism
ϕp : Φ−
uap : VarEv ; ua : Ev ; σ : Var (cid:55)→ (PVal ∪ EName)
ϕ = substf (ϕp , σ) ∧ ua = subst(uap , σ)
∀ s : Trace; t : N • (s, t) |=f − ϕ ⇔ (rmTry(s), t) |=f − ϕ
ψ =
v ; ϕ : Φ−; α : Φ+; ψ : Φ±; m : Mode
(cid:94)
(cid:161)
Tm (e) ∧± (Em (e) ⇒± ϕ)
(cid:162) ⇒± α
e∈maxRefs(ua)
The general form of mechanisms is deﬁned by the schema