title:Barbarians in the Gate: An Experimental Validation of NIC-based Distributed
Firewall Performance and Flood Tolerance
author:Michael Ihde and
William H. Sanders
An Experimental Validation of NIC-based Distributed Firewall Performance and
Barbarians in the Gate:
Flood Tolerance
Michael Ihde and William H. Sanders
Department of Electrical and Computer Engineering,
University of Illinois at Urbana-Champaign
Urbana, IL 61801, U.S.A.
Telephone: (217)333-0345 / Fax: (217)244-3359
Email: {ihde,whs}@crhc.uiuc.edu
Abstract
This paper presents our experience validating the ﬂood tol-
erance of two network interface card (NIC)-based embedded
ﬁrewall solutions, the Embedded Firewall (EFW) and the Au-
tonomic Distributed Firewall (ADF). Experiments were per-
formed for both embedded ﬁrewall devices to determine their
ﬂood tolerance and performance characteristics. The results
show that both are vulnerable to packet ﬂood attacks on a 100
Mbps network. In certain conﬁgurations, we found that both
embedded ﬁrewall devices can have a signiﬁcant, negative
impact on bandwidth and application performance. These re-
sults imply ﬁrst that, ﬁrewall rule-sets should be optimized for
performance-sensitive applications, and second, that proper
consideration must be given to attack risks and mitigations
before either the EFW or ADF is deployed. Finally, we be-
lieve that future embedded ﬁrewall implementations should
be vetted in a manner similar to that presented in this paper.
Our experience shows that when their limitations are properly
considered, both the EFW and ADF can be safely deployed to
enhance network security without undue risk.
1. Introduction
With the increasing popularity of the Internet, the threat
of cyber-attacks has become a signiﬁcant problem. Many of
the old maxims of network security are no longer effective
against modern threats. Recent experience with worms, such
as MyDoom and Sobig, have shown that standard ﬁrewalls
provide inadequate protection for threats that can bypass the
perimeter protection either through allowed communications,
like e-mail, or through mobile hosts that temporarily leave
the safety of a ﬁrewall only to bring a worm into the network
behind the ﬁrewall.
The effects of these worms, which bypass the external
ﬁrewall and then spread unchecked behind the ﬁrewall, have
made it clear that traditional ﬁrewalls at the network perime-
ter no longer provide sufﬁcient protection. Effective network
security requires defense-in-depth, with security mechanisms
at both the network perimeter and the network end-points.
Distributed ﬁrewalls are one mechanism that can be used
to enhance the depth of the defense. With distributed ﬁre-
walls, each host is protected by its own ﬁrewall, preventing
any single vulnerability from affecting all hosts.
Although distributed ﬁrewalls provide enhanced network
protection, we believe that it is dangerous to simply trust the
implementation of any security mechanism. Security devices
(software or hardware), especially those that have been re-
cently developed, can harbor hidden vulnerabilities that an
attacker may exploit, thus negating the usefulness of any ad-
ditional security gained and providing a false sense of secu-
rity. The prudent decision is to ensure that all security devices
undergo a suitable level of validation to ensure that the device
is free of vulnerabilities.
This paper presents our experience validating the ﬂood tol-
erance of two NIC-based embedded ﬁrewall solutions, the
EFW and the ADF. The EFW is a commercially available
device from 3COM, while the ADF is a derivative of the
EFW being developed by Adventium Labs. This validation
was carried out during the validation of a survivable publish,
subscribe, and query (PSQ) system developed in response to
a DARPA challenge. In the candidate system, called Design-
ing Protection and Adaptation into a Survivability Architec-
ture (DPASA), the ADF was used as part of the defense-in-
depth strategy. The ADF was employed to protect the con-
tents of all host-to-host communication via encrypted data
channels (called virtual private groups (VPGs)) while also
preventing unauthorized communications. Guided by the fol-
lowing warning found in RFC2647, our validation effort fo-
cused on testing the ﬁrewalls’ ﬂood tolerance.
Further, certain forms of attack may degrade per-
formance. One common form of denial-of-service
(DoS) attack bombards a ﬁrewall with so much re-
jected trafﬁc that it cannot forward allowed trafﬁc.
DoS attacks do not always involve heavy loads; by
Proceedings of the 2006 International Conference on Dependable Systems and Networks (DSN’06) 
0-7695-2607-1/06 $20.00 © 2006 IEEE 
Authorized licensed use limited to: Tsinghua University. Downloaded on March 22,2021 at 04:20:47 UTC from IEEE Xplore.  Restrictions apply. 
deﬁnition, DoS describes any state in which a ﬁre-
wall is offered rejected trafﬁc that prohibits it from
forwarding some or all allowed trafﬁc. Even a small
amount of trafﬁc may signiﬁcantly degrade ﬁrewall
performance, or stop the ﬁrewall altogether. Fur-
ther, the safeguards in ﬁrewalls to guard against
such attacks may have a signiﬁcant negative impact
on performance [17].
Surprisingly, we found that a successful denial-of-service
attack could be launched against either the EFW or ADF with
the smallest “default allow all” rule-set using only 30% of
the maximum frame rate on a 100 Mbps Ethernet network.
Although we were speciﬁcally looking for denial-of-service
vulnerabilities, this paper also presents the performance char-
acteristics of the EFW and ADF. Our results show that, un-
like modern software-based ﬁrewalls or standard NICs, both
the EFW and ADF had a signiﬁcant impact on network per-
formance, even when enforcing small rule-sets.
As was shown with DPASA, the EFW/ADF can be de-
ployed with low risk when the proper safeguards are imple-
mented. The continual gain in support for embedded ﬁrewall
solutions [2] indicates that the results in this paper are appli-
cable outside of the DPASA project. In addition, the method-
ology presented in this paper is ﬂexible enough to be applied
to other host-based, distributed ﬁrewalls as they become avail-
able.
2. Related Work
The distributed ﬁrewall concept, ﬁrst
introduced by
Bellovin in 1999 [4], provides ﬁrewall protection at the net-
work end-points via a centrally deﬁned policy. Unlike tra-
ditional ﬁrewalls, which only provide protection at the net-
work perimeter, distributed ﬁrewalls can provide host protec-
tion for internal threats. Distributed ﬁrewalls are topology-
independent, provide ﬁne-grained access control, and reduce
global performance bottlenecks.
Distributed ﬁrewalls are available as either software or
hardware solutions. Early software-based distributed ﬁrewall
implementations existed as research projects; a preliminary
OpenBSD implementation [12] based on Bellovin’s original
concept, and later the StrongMan [13] framework, are two
such examples. There also exist a few commercial software
implementations by Green Bow and FSecure. We are only
aware of two hardware solutions, the 3Com EFW and the
ADF.
The EFW and ADF are hardware-based distributed ﬁre-
walls that enforce the rule-set on the NIC [16, 18]. Both im-
plementations share a common ancestral code-base and simi-
lar underlying hardware. The EFW was developed ﬁrst, pro-
viding stateless packet ﬁltering and a central policy server.
The ADF later added the ability to create encrypted commu-
nication channels, called VPGs [6,15,16], which provide con-
ﬁdentiality, integrity, and sender authentication.
One of the primary goals of the EFW project was to re-
main cost-effective for large networks. To achieve this the
device must be “fast, simple, and cheap” [18]. By imple-
menting the EFW functionality on top of an inexpensive ex-
isting network card (3CR990) the hardware costs were kept
low enough for normal deployment. Although more expen-
sive, hardware designed especially for packet ﬁltering may
have provided higher performance and possibly would have
been able to withstand a packet ﬂood attack.
Performance data, similar to that found in this paper, has
been presented for the two most common open-source ﬁre-
wall software packages in [10] and [8]. The results in both
papers can be used to compare the performance of NIC-based
ﬁrewalls to software ﬁrewalls. In [14] the Linux TIS ﬁrewall
toolkit performance is assessed using HTTP and FTP scenar-
ios. Unlike NIC-based ﬁrewalls, the performance of software-
based ﬁrewalls is directly related to the computational perfor-
mance of the underlying host.
For the EFW (but not the ADF), basic performance data
has been presented in [20]. Unlike [20], our methodology
directly measures ﬂood tolerance by initiating a packet ﬂood,
much like an attacker would. This difference in perspective
allowed us to identify the denial-of-service vulnerability, that
was not identiﬁed in [20], during the DPASA validation effort.
Two request for comments (RFC) papers [5, 9] provide
recommendations for analyzing network interconnect devices
and ﬁrewalls. Whenever possible we attempted to follow the
guidelines in each RFC paper, deviating only when the par-
ticular nature of the EFW and ADF ﬁrewalls demanded such
modiﬁcations.
As previously mentioned, the experiments in this paper
were carried out in the context of a larger validation ef-
fort that aimed to validate a survivable PSQ system in re-
sponse to a 2002 DARPA challenge. The candidate solution,
called DPASA, was designed and developed by a team led
by BBN Technologies. The DPASA system is documented
in [3, 7, 19, 21].
3. Experimental Methodology
All experiments were performed on an isolated network,
eliminating extraneous packets and thus preventing the re-
sults from being skewed. Our conﬁguration required four
hosts connected via a standard 100 Mbps switch (3COM
3C16734A): the EFW policy server, ﬂood generator (i.e., at-
tacker), client, and target. We assumed that the Ethernet
switch itself would not affect the results in any signiﬁcant
manner, and veriﬁed the assumption by performing identical
tests against a standard non-ﬁltering NIC (Intel EEPro 100).
The performance loss, if any, for the standard non-ﬁltering
NIC would be attributed to the network switch and infrastruc-
ture. In all of our tests the EFW and ADF experienced much
greater losses than those found with the standard NIC. Thus
we were conﬁdent that the switch was not causing the perfor-
mance loss.
The hosts in our experiment used 1 GHz Pentium III pro-
cessors with 256MB of RAM. Except for the policy server,
which required Microsoft Windows 2000, the hosts ran Red-
hat Linux. For the EFW host, a 2.4 Linux kernel was used
instead of the more recent 2.6 kernel because the EFW lacked
It was as-
ofﬁcial driver support for the 2.6 Linux kernel.
Proceedings of the 2006 International Conference on Dependable Systems and Networks (DSN’06) 
0-7695-2607-1/06 $20.00 © 2006 IEEE 
Authorized licensed use limited to: Tsinghua University. Downloaded on March 22,2021 at 04:20:47 UTC from IEEE Xplore.  Restrictions apply. 
4. Results
4.1. Available bandwidth
Our ﬁrst experiment measured the maximum bandwidth
supported by the embedded ﬁrewalls. In DPASA, it was as-
sumed that the embedded ﬁrewalls would support the full
network bandwidth because, in general, NICs do not signif-
icantly impact network performance. If it were shown that
embedded ﬁrewalls did not support full network bandwidth,
then it would be possible to packet-ﬂood an embedded ﬁre-
wall to initiate a denial-of-service attack. In other words, if
the maximum throughput of the embedded ﬁrewall was less
than the theoretical maximum packet rate of the network, then
the host would be vulnerable to a denial-of-service attack.
Ideally, we would have measured maximum throughput di-
rectly via the methods detailed in RFC2544 [5]. However,
the methods in RFC2544 are better-suited to traditional ﬁre-
walls, which have separate incoming and outgoing interfaces.
Attempting to use the same measurement techniques for dis-
tributed ﬁrewalls would have required that the EFW/ADF
host forward packets out of a second interface, adding ad-
ditional overhead and potential complications in the exper-
iment. As an alternative, available bandwidth can be mea-
sured using only a single network interface with no packet for-
warding. If there is bandwidth loss the maximum throughput
can be calculated with the simple relation Max.T hroughput =
BW /FrameSize. If no bandwidth loss is measured, it does not
imply that the maximum throughput of the ﬁrewall is greater
than the maximum frame rate of the network. It only means
that the ﬁrewall can support the maximum packet rate for
large packets. Smaller packets, which can be transmitted at
a higher rate, may still cause a denial-of-service.
During the available bandwidth tests the frames were the
maximum size supported by Ethernet (1518 bytes per frame);
thus, the EFW/ADF was only able to process approximately
4100 packets/s when the policy contained 64 rules. For
smaller policies, it was impossible to determine whether a
smaller, higher-rate packet stream would overload the ﬁrewall
card. With one rule the EFW/ADF was able to support the full
network bandwidth. However, the frame rate was much lower
than the maximum frame rate achievable with smaller frames
(but lower bandwidth). Thus, the maximum throughput of the
ﬁrewall could not be determined from the bandwidth experi-
ments for all rule-set conﬁgurations.
The results are presented in Figure 2. We anticipated that
as the rule-set size was increased the EFW/ADF would suf-
fer some performance loss. The amount of performance loss,
however, was surprising. When conﬁgured with the largest
possible rule-set the EFW and ADF respectively lost 45% and
65% of nominal bandwidth capacity. However, when con-
ﬁgured with smaller rule-sets (those with less than 20 rules)
there was no signiﬁcant performance loss. Based on this ex-
periment alone, it seems wise to limit rule-set depth or place
bandwidth-sensitive trafﬁc early in the rule-set.
For comparison purposes, we performed identical tests
against iptables. Our results were identical to Hoffman et
al.’s [10] results. We found iptables had no bandwidth loss
Figure 1. Experimental Network Setup
sumed that no major performance differences existed between
the 2.4 and 2.6 kernels.
The rule-sets used in the experiments were conﬁgured to
act on the packets at a particular rule in the rule-set, which
we call the “action rule.” We found that any rules following
the “action rule” did not affect the ﬂood tolerance or perfor-
mance. This was expected, because as soon as a matching
rule is found for an incoming packet, no further processing
is required. Therefore, when we refer to rule-set length (or
depth) we are technically referring to the number of rules up
to and including the “action rule.”
For VPGs, the “action rule” is the pair of rules that fully
deﬁne one VPG. The depth of the rule-set is increased
by adding additional non-matching VPGs above the “action
rule”; thus, a rule-set with four VPGs has three VPGs that do
not match the desired incoming trafﬁc and one VPG that does
match the incoming trafﬁc.
We measured bandwidth between two hosts using iperf ,a
cross-platform client-server software tool capable of measur-