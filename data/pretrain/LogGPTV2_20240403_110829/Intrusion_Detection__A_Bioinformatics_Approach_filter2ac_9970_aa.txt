title:Intrusion Detection: A Bioinformatics Approach
author:Scott E. Coull and
Joel W. Branch and
Boleslaw K. Szymanski and
Eric Breimer
Intrusion Detection: A Bioinformatics Approach 
Scott Coull1
PI:EMAIL 
Joel Branch1
PI:EMAIL 
Boleslaw Szymanski1
PI:EMAIL 
Eric Breimer2
PI:EMAIL 
1Rensselaer Polytechnic Institute 
110 Eighth Street 
Troy, NY 12180 
(518) 276-8326 
2Siena College 
515 Loudon Road 
Loudonville, NY 12211 
(518) 786-5084 
Abstract 
the 
identity  of  a 
This  paper  addresses 
the  problem  of  detecting 
masquerading,  a  security  attack  in  which  an  intruder 
assumes 
legitimate  user.  Many 
approaches based on Hidden Markov Models and various 
forms  of  Finite  State  Automata  have  been  proposed  to 
solve  this  problem.  The  novelty  of  our  approach  results 
from the application of techniques used in bioinformatics 
for  a  pair-wise  sequence  alignment  to  compare  the 
monitored session with past user behavior.  Our algorithm 
uses a semi-global alignment and a unique scoring system 
to  measure  similarity  between  a  sequence  of  commands 
produced  by  a  potential  intruder  and  the  user  signature, 
which  is  a  sequence  of  commands  collected  from  a 
legitimate user.  We tested this algorithm on the standard 
intrusion  data  collection  set.  As  discussed  in  the  paper, 
the results of the test showed that the described algorithm 
yields a promising combination of intrusion detection rate 
and  false  positive  rate,  when  compared  to  published 
intrusion detection algorithms. 
Keywords 
Intrusion  detection,  sequence  alignment,  bioinformatics, 
masquerade detection, pattern matching 
1. Introduction 
In  the  field  of  computer  security,  one  of  the  most 
damaging  attacks  is  masquerading,  in  which  an  attacker 
assumes  the  identity  of  a  legitimate  user  in  a  computer 
system.    Masquerade  attacks  typically  occur  when  an 
intruder  obtains  a  legitimate  user’s  password  or  when  a 
user leaves their workstation unattended without any sort 
of locking mechanism in place.  It is difficult to detect this 
type  of  security  breach  at  its  initiation  because  the 
attacker appears to be a normal user with valid authority 
and  privileges.  This  difficulty  underlines  the  importance 
of  equipping  computer  systems  with  the  ability  to 
distinguish masquerading attacker actions from legitimate 
user activities.  
The  detection  of  a  masquerader  relies  on  a  user 
signature,  a  sequence  of  commands  collected  from  a 
legitimate user. This signature is compared to the current 
user’s session.  The underlying assumption is that the user 
signature captures detectable patterns in a user’s sequence 
of commands. A sequence of commands produced by the 
legitimate  user  should  match  well  with  patterns  in  the 
user’s  signature,  whereas  a  sequence  of  commands 
entered  by  a  masquerader  should  match  poorly  with  the 
user’s  signature.  Designing  algorithms  to  distinguish 
legitimate  users  and  masqueraders  based  on  user 
signatures has been extensively studied [12][14]. 
In  this  paper,  we  propose  a  new  algorithm  that  uses 
pair-wise  sequence  alignment  to  characterize  similarity 
between  sequences  of  commands.    Sequence  alignment 
has been extensively applied in the field of bioinformatics 
as  a  tool  for  comparing  genetic  material  [3][4].  Our 
algorithm,  which  is  a  unique  variation  of  the  classic 
Smith-Waterman  algorithm  [17],  uses  a  novel  scoring 
scheme  to  construct  a  semi-global  alignment.    The 
algorithm produces an effective metric for distinguishing 
a legitimate user from a masquerader.   
the 
To  provide  a  self-contained  paper,  we  describe  the 
details  of  the  intrusion  detection  problem  and  we 
introduce 
sequence 
alignment.  In subsequent sections, we describe the semi-
global  alignment algorithm,  the  scoring  scheme, and  the 
experimental results.    We  conclude  with a  discussion  of 
future work and improvements. 
fundamental  concepts  of 
Proceedings of the 19th Annual Computer Security Applications Conference (ACSAC 2003) 
1063-9527/03 $17.00 © 2003 IEEE
Authorized licensed use limited to: Tsinghua University. Downloaded on March 25,2021 at 07:52:05 UTC from IEEE Xplore.  Restrictions apply. 
2. Background 
2.1 Intrusion Detection 
Standard  security  deployments  such  as  firewalls, 
patched  operating  systems  and  password  protection  are 
limited  in  their  effectiveness  because  of  the  evolving 
sophistication  of  intrusion  methods  and  their  increasing 
ability  to  break  through  entry  points  of  a  guarded 
infrastructure  [10].  An  intrusion  detection  system  (IDS) 
addresses the layer of security following the failure of the 
prior devices. This layer usually monitors any number of 
data sources (i.e., audit logs, keystrokes, network traffic) 
for  signs  of  inappropriate  or  anomalous  behavior.  Since 
attacks occurring at this level are sophisticated enough to 
bypass  entry  point  protection,  advanced  algorithms  and 
frameworks  for  detection  are  required  to  prevent  total 
subversion  of  critical  resources.  While  no  computer  or 
network is entirely secure, intrusion detection is essential 
for any computer-based infrastructure, in which the value 
of  its  assets  draws  the  attention  of  potential  attackers.  
Traditionally, there have been two main classes of IDSs: 
host-based and network-based systems. A host-based IDS 
monitors  the  detailed  activity  of  a  particular  host. 
Depending  on  the  specific  IDS  implementation,  any 
number  of  data  sources  can  be  used  to  search  for 
malicious activity. Solaris Basic Security Module (BSM) 
provides  system  call  traces  which  are  typically  used  as 
datasets for host-based IDSs [15]. For instance, when an 
analysis of the BSM data shows signs of an intrusion, the 
IDS alerts the system administrator of an attack. In other 
implementations,  host-based  systems  also  use  such 
identifying  information  as  a  user’s  keystrokes  and 
command execution patterns. 
Network-based  IDSs  monitor  networks  of  computers 
and  other  devices  (i.e.,  routers  and  gateways)  that  are 
normally  subject  to  attacks.  Subsequently,  rather  than 
using  machine  and  process-oriented  data,  such  as  that 
from BSM, network-based IDSs primarily use data from 
network traffic in detecting intrusions. The most popular 
program  used  to  capture  network  traffic  is  tcpdump, 
which can display or store every field belonging to a TCP 
packet  [7].  Different  implementations  of  network-based 
IDSs  may  serve  different  functions.  For  instance,  some 
network-based  systems  may  monitor  only  the  traffic 
activity  of  a  single  host,  while  distributed  tools  may 
analyze the aggregate traffic information from a range of 
devices  on  the  same  network.  To  prevent  confusion,  we 
use data-centric definitions in distinguishing between host 
and network-based IDSs. 
Network  and  host-based  IDSs,  can  be 
further 
classified  based  on  two  methods  of  detection:  anomaly 
detection  and  penetration  identification.  The  former 
method  attempts  to  differentiate  “anomalous”  activity 
from  the  established  normal  operating  behavior  of  a 
computer  system,  application,  or  user.  Thus,  in  general, 
the  IDS  must  first  train  on  data  representing  normal 
behavior  before  it  can  be  deployed  in  an  operative 
detection  mode.  The  principle  advantage  of  an  anomaly 
detection system is that it can detect previously unknown 
attacks [8]. Considering this, anomaly-based systems are 
strongly applicable to masquerade detection, which is the 
problem of  focus in this paper. Penetration identification 
(often referred to as misuse detection) is the second major 
detection  technique.  After  a  “signature”  is  defined  that 
identifies  a  manifestation  of  an attack, the  attack  can  be 
discovered  in  either  monitored  network  traffic  or  host-
based  audit  trails.  Penetration  identification  systems 
typically  yield fewer false alarms; however, they require 
continuous  updates,  as  their  signature  databases  may 
become outdated fairly quickly. 
There  are  many  types  of  host  and  network  intrusion 
attacks.  Intrusion  classifications  can  be  based  on  intent. 
For  instance,  the  denial-of-service  attack  aims  to  either 
completely  shut  down  or  degrade  the  performance  of  a 
network, computer or process. Remote-to-local attacks are 
used by assailants who attempt to illegally gain access to 
a machine on which they have no account. These attacks 
target  one  specific  resource.  On 
the  other  hand, 
surveillance  (or  scan) attacks  use  distributed  software  to 
find vulnerabilities across hundreds of machines. In 1998, 
a  seminal  study  was  performed  by  DARPA  to  evaluate 
the  performance  of  various  IDSs  in  detecting  these 
attacks.  Specific  details  about  the  attacks  and  IDS 
evaluation are available in [9]. 
to 
this 
In our work, we focus on masquerade attacks in which 
an assailant attempts to impersonate a legitimate user after 
gaining  access 
legitimate  user’s  account. 
Masquerade attacks often arise after a successful remote-
to-local  attack;  however,  masquerading  can  also  result 
from  far  simpler  means.  An  example  is  a  temporarily 
unattended  workstation  with  a  legitimate  user  logon 
session still active and unlocked. Anyone can access such 
a  workstation  and  all  resources  accessible  through  the 
logon  account.  The  broad  range  of  damage  that  can  be 
performed via masquerade attacks (i.e., stolen documents, 
data, or email) makes them one of the most serious threats 
to computer and network infrastructure. 
Matching 
the  potentially  devastating  costs  of 
masquerade  attacks  is  the  difficulty  in  successfully 
detecting 
them.  As  stated  previously,  masquerade 
detection  falls  under  the  cover  of  anomaly  detection, 
which already poses a challenge in implementation alone. 
Masquerade detection adds another layer of complexity to 
the problem. A masquerader may happen to have similar 
behavioral patterns as the legitimate user of an account to 
which  he  or  she  is  currently  logged  therefore  escaping 
detection  and  successfully  causing  damage  under  the 
cover of seemingly normal behavior. Another problem is 
Proceedings of the 19th Annual Computer Security Applications Conference (ACSAC 2003) 
1063-9527/03 $17.00 © 2003 IEEE
Authorized licensed use limited to: Tsinghua University. Downloaded on March 25,2021 at 07:52:05 UTC from IEEE Xplore.  Restrictions apply. 
caused  by  computer  users’  tendency  toward  concept 
drift—a change in activity that is not captured strongly in 
the  original  user  signature.  As  a  result  legitimate  user 
command  sequences  may  differ  enough  from 
the 
signature  to  appear  to  be  an  intrusion.  In  the  following, 
we  will refer  to  missed  attacks  as  false negatives  and  to 
false alarms as false positives. 
attacks 
(minimizing 
There  have  been  numerous  attempts  at  successfully 
detecting  masquerade 
false 
negatives)  without  degrading  the  quality  of  a  user’s 
session  (minimizing  false  positives).  A  seminal  work  by 
Schonlau et al. [14] analyzes the performance of  various 
masquerade  detection  methods.  Results  showed  that  the 
method  yielding  the  lowest  number  of  false  alarms  was 
uniqueness,  which  had  a  false  positive  rate  of  1.4%. 
However, it had a false–negative rate of 60.0%. Another 
good  performer  was  the  Bayes  one-step  Markov  with  a 
false  positive  rate  of  6.7%  and  a  false  negative  rate  of 
30.7%.  In  another  paper  [12],  Maxion  and  Townsend 
analyzed  the  sources  of  error  made  by  the  detection 
mechanisms  covered  by  Schonlau  et  al.  and  proposed 
several improved methods, among which the Naïve Bayes 
with updates yielded excellent 1.3% of false positive rate 
with a respectable 38.5% of false negative rate. 
We  choose  to  depart  from  Schonlau  and  Maxion’s 
approach  in  trying  to  detect  masquerade  attacks  with 
greater  accuracy  by  unconventional  methods.  Most 
masquerade detection attempts begin with an analysis of a 
user’s command sequences, which is a logical step. This 
type  of  data  represents  a  user  feature  often  termed  as 
biometric  [1].  The  behavioral  features  of  biometrics,  in 
general,  include  such  characteristics  as  handwriting  and 
speech patterns, inapplicable for computer masquerading. 
The  physiological  features  include  fingerprints  and  eye 
color—things  that  do  not  change  over  time  but  are  not 
available for remote computer sessions. User’s command 
sequences  on  a  computer  system  will  of  course  change 
over  time,  but  an  adequate  record  of  his  or  her  normal 
behavior  will  capture  most 
sequence  variations. 
Nonetheless,  the  classification  of  the  data  used  for 
detection led us to an appropriate class of algorithms and 
mechanisms for effective detection: bioinformatics. 
2.2 Sequence Alignment 
Sequence  alignment  is  a  well-studied  tool  used  to 
quantify  and  visualize  similarity  between  sequences.  
Sequence alignment has been most prominently applied in 
the  comparison  of  genetic  material  such  as  DNA,  RNA, 
and  protein  sequences  [4].  The  applications  of  sequence 
alignment  include  searching  sequence  databases  for 
specific  genes  or  patterns 
[3],  and  discovering 
phylogenetic  relationships  through  the  use  of  multiple 
alignments [2]. 
Sequence  alignment  is  a  generalization  of  the  classic 
longest  common  subsequence  problem  (lcs).  Given  two 
strings A = a1a2...am and B = b1b2...bn, with m <= n, over 
some  alphabet  Σ of  size  s,  the  lcs-problem  is  to  find  a 
sequence of greatest possible length that can be obtained 
from  both  A  and  B  by  deleting  zero  or  more  (not 
necessarily  adjacent)  characters.  Alternatively,  the  lcs-
problem can be described as the problem of aligning two 
strings  in  order  to  maximize  the  number  of  matching 
characters by inserting gaps into either string in order to 
shift the characters into matching alignment. 