### Table 8: Average and Error Interval of AES Circuit Execution Times (in seconds)
- **Number of Nodes**: Represents the degree of parallelism on each side.
- **"–"**: Indicates that the time is less than 0.05 seconds.
- **Inter-com**: Communication between the two parties.
- **Intra-com**: Communication between nodes for a single party.

**Malicious Setting**:
Based on the preliminary results presented in Table 5, we estimate a 20% improvement in the performance of garbled circuit generation when the AES-NI instruction set becomes ubiquitous.

**Analysis of Table 8**:
Table 8 demonstrates the significant benefits of circuit-level parallelization in the Yao protocol. As the number of processes per side increases from 1 to 256, the total execution time decreases proportionally. Specifically, as the degree of parallelism quadruples, the total time reduces to one-fourth. Note that the communication costs between the generator and evaluator remain constant, as shown in Table 7. The apparent reduction in communication costs with an increase in the number of processes can be attributed to the decrease in "waiting time."

**Key Observations**:
- As the number of processes increases, the ratio of the time the generator spends in the construction and evaluation stages decreases from 5:2 to 1:1. This is because each process handles a smaller portion of the garbled circuits.
- Eventually, the system reaches a point where each process deals with a single copy of the garbled circuit, leading to equal times for both the generation and evaluation stages.

**Performance Comparison**:
To the best of our knowledge, completing a secure AES execution in the malicious model within 1.4 seconds is the best result reported. The next best result by Nielsen et al. [28] is 1.6 seconds, which is an amortized result (85 seconds for 54 blocks of AES encryption in parallel) in the random oracle model. However, this comparison is crude, as our experimental setup uses a cluster computer, while Nielsen et al. used only two desktops. A more accurate comparison would require a parallel implementation of Nielsen et al.'s system.

### Large Circuits
In this experiment, we ran a 4095-bit edit distance circuit, defined as \((x, y) \mapsto (\bot, \text{EDT}(x, y))\), where \(x, y \in \{0, 1\}^{4095}\). We used the I + C approach, which reduces computation time by approximately half compared to the I + 2C approach, at the cost of not using the random-seed technique. In the I + C approach, the cut-and-choose process is conducted such that the generator does not know the check circuits until all garbled circuits are transferred. Both parties then run the circuit generation and evaluation in a pipelined manner, with one party generating and transferring garbled gates while the other evaluates and checks them simultaneously.

**Results (Table 9)**:
- **Gen (sec)**: 19.73 ± 0.5%, 1.1 ± 6%, 1.1 ± 0.8%
- **Eval (sec)**: 5.26 ± 0.4%, 15.6 ± 0.6%, 1.5 ± 2%
- **Comm (Byte)**: 1.7 × 10^8, 6.5 × 10^7, 1.8 × 10^13, 8.5 × 10^6, 1.8 × 10^13

Each party in the experiment consists of 256 cores in a cluster. The table shows results from six invocations of the system. The upper row in each stage represents computation time, while the lower row represents communication time.

**Circuit Details**:
The circuit generated by our compiler has 5.9 billion gates, with 2.4 billion non-XOR gates. Without the random-seed technique, the communication cost can be estimated as \(256 \times 2.4 \times 10^9 \times 3 \times 10 = 1.8 \times 10^{13}\) bytes, considering 256 copies of the garbled circuits, each with 2.4 billion non-free gates, each non-free gate having three entries, and each entry being 80 bits.

**Performance Highlights**:
- Our system is capable of handling the largest circuits ever reported.
- We achieved a speed in the malicious setting comparable to those in the semi-honest setting.
- We completed a single execution of the 4095-bit edit distance circuit in less than 8.2 hours, with a rate of 82,000 (non-XOR) gates per second. Huang et al. [13] reported a rate of over 96,000 (non-XOR) gates per second for an edit-distance circuit in the semi-honest setting.

### Conclusion
We have presented a general-purpose secure two-party computation system that offers security against malicious adversaries and can efficiently evaluate circuits with hundreds of millions and even billions of gates on affordable hardware. Our compiler generates large circuits using fewer computational resources and offers improved flexibility. Our evaluator leverages parallel computing resources, which are becoming increasingly common and affordable. Future work includes further improvements to our compiler and language, as well as experiments on systems other than Ranger.

**Source Code**:
The source code for this system, along with example functions, can be downloaded from the authors' website: [http://crypto.cs.virginia.edu/](http://crypto.cs.virginia.edu/).

### Acknowledgements
We thank Benny Pinkas, Thomas Schneider, Nigel Smart, and Stephen Williams for providing their optimized AES circuit. We also thank Gabriel Robins for his advice on minimizing circuits in VLSI systems and Ian Goldberg for his helpful comments. This work is supported by the Defense Advanced Research Projects Agency (DARPA) and the Air Force Research Laboratory (AFRL) under contract FA8750-11-2-0211. The views and conclusions in this document are those of the authors and do not represent the official policies of DARPA or the US government.

### References
[References listed as provided]

This revised version aims to improve clarity, coherence, and professionalism, making the text more accessible and understandable.