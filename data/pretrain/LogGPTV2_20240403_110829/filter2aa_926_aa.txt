Offensive Windows IPC Internals 1:
Named Pipes
Contents:
Introduction
Named Pipe Messaging
Data Transfer Modes
Overlapping Pipe I/O, Blocking mode & In-/Out Buffers
Named Pipe Security
Impersonation
Impersonating a Named Pipe Client
Attack Surface
Client Impersonation
Attack scenario
Prerequisites
Misleading Documentation
Implementation
Instance Creation Race Condition
Attack scenario
Prerequisites
Implementation
Instance Creation Special Flavors
Unanswered Pipe Connections
Killing Pipe Servers
PeekNamedPipe
Prerequisites
Implementation
References
The Series: Part 2
Introduction
This post marks the start of a series of posts about the internals and interesting bits of various 
Windows based Inter-Process-Communication (IPC) technology components. Initially this series 
will cover the following topics:
Named Pipes
LPC
ALPC
RPC
A few IPC technology components are therefore left out, but I might append this series sometime 
and include for example some of these:
Window Messages
DDE (which is based on Window Messages)
Windows Sockets
Mail Slots
Alright so let’s get down to it with Named Pipes…
Although the name might sound a bit odd pipes are a very basic and simple technology to enable 
communication and share data between two processes, where the term pipe simply describes a 
section of shared memory used by these two processes. 
To term this correctly right from the beginning, the IPC technology we’re speaking about is called 
‘pipes’ and there are two types of pipes:
Named Pipes
Anonymous Pipes
Most of the time when speaking about pipes you’re likely referring to Named Pipes as these offer 
the full feature set, where anonymous pipes are mostly used for child-parent communications. 
This also implies: Pipe communication can be between two processes on the same system (with 
named and anonymous pipes), but can also be made across machine boundaries (only named 
pipes can talk across machine boundaries). As Named Pipes are most relevant and support the 
full feature set, this post will focus only on Named Pipes.
To add some historical background for Named Pipes: Named Pipes originated from the OS/2 
times. It’s hart to pin down the exact release date named pipes were introduced to Windows, but 
at least it can be said that it must have been supported in Windows 3.1 in 1992 - as this support is 
stated in the Windows/DOS Developer’s Journal Volume 4, so it’s fair to assume named pipes have 
been added to Windows in the early 1990’s.
Before we dive into the Named Pipe internals, please take note that a few code snippets will 
follow that are taken from my public Named Pipe Sample Implementation. Whenever you feel you 
want some more context around the snippets head over to the code repo and review the bigger 
picture.
Named Pipe Messaging
Alright so let’s break things down to get a hold of Named Pipe internals. When you’ve never heard 
of Named Pipes before imaging this communication technology like a real, steel pipe - you got a 
hollow bar with two ends and if you shout something into one end a listener will hear your words 
on the other end. That’s all a Named Pipe does, it transports information from one end to 
another. 
If you’re a Unix user you sure have used pipes before (as this is not a pure Windows technology) 
with something like this: cat file.txt | wc -l . A command that outputs the contents of 
file.txt , but instead of displaying the output to STDOUT (which could be your terminal window) 
the output is redirected (“piped”) to the input of your second command wc -l , which thereby 
counts the lines of your file. That’s an example of an anonymous pipe.
A Windows based Named Pipe is as easily understood as the above example. To enable us to use 
the full feature set of pipes, we’ll move away from Anonymous Pipes and create a Server and a 
Client that talk to each other. 
A Named Pipe simply is an Object, more specifically a FILE_OBJECT, that is managed by a special 
file system, the Named Pipe File System (NPFS):
When you create a Named Pipe, let’s say we call it ‘fpipe’, under the hood you’re creating a 
FILE_OBJECT with your given name of ‘fpipe’ (hence: named pipe) on a special device drive called 
‘pipe’. 
Let’s wrap that into a something practical. A named pipe is created by calling the WinAPI function 
CreateNamedPipe, such as with the below [Source]:
For now the most interesting part of this call is the \\\\.\\pipe\\fpipe . 
C++ requires escaping of slashes, so language independent this is equal to \\.\pipe\fpipe . The 
leading ‘.’ refers to your machines global root directory, where the term ‘pipe’ is a symbolic link to 
the NamedPipe Device.
HANDLE serverPipe = CreateNamedPipe(
    L"\\\\.\\pipe\\fpipe",  // name of our pipe, must be in the form of 
\\.\pipe\
    PIPE_ACCESS_DUPLEX, // open mode, specifying a duplex pipe so server and 
client can send and receive data
    PIPE_TYPE_MESSAGE,  // MESSAGE mode to send/receive messages in discrete 
units (instead of a byte stream)
    1,          // number of instanced for this pipe, 1 is enough for our use 
case
    2048,       // output buffer size
    2048,       // input buffer size
    0,          // default timeout value, equal to 50 milliseconds
    NULL        // use default security attributes
);
Since a Named Pipe Object is a FILE_OBJECT, accessing the named pipe we just created is equal to 
accessing a “normal” file. 
Therefore connecting to a named pipe from a client is therefore as easy as calling 
CreateFile [Source]:
Once connected reading from a pipe just needs a call to ReadFile [Source]:
Before you can read some data off a pipe, you want your server to write some data to it (which 
you can read.). That is done by calling - who would have guessed it - WriteFile [Source]:
But what actually happens when you “write” to a pipe? 
Once a client connects to your server pipe, the pipe that you created is no longer in a listening 
state and data can be written to it. The user land call to WriteFile  is dispatched to kernel land, 
where NtWriteFile  is called, which determines all the bits and pieces about the Write-Operation, 
e.g. which device object is associated with the given file, whether or not the Write-Operation 
should be made synchronous (see section Overlapping Pipe I/O, Blocking mode & In-/Out 
Buffers), the I/O Request Packet (IRP) is set up and eventually NtWriteFile takes care that your data 
is written to the file. In our case the specified data is not written to an actual file on disk, but to a 
shared memory section that is referenced by the file handle return from CreateNamedPipe .
Finally - as mentioned in the introduction - Named Pipes can also be used over a network 
connection across system boundaries. 
There are no additional implementations needed to call a remote Named Pipe server, just make 
sure that your call to CreateFile specifies an IP or hostname (as with the example above). 
Let’s make a guess: What network protocol will be used when calling a remote pipe server? …. 
drum rolls … absolutely unsurprising it is SMB. 
An SMB connection is made to the remote server, which is by default initialized by a negotiation 
request to determine the network authentication protocol. Unlike with other IPC mechanisms, 
such as with RPC, you as a server developer can not control the network authentication protocol 
as this is always negotiated through SMB. Since Kerberos is the preferred authentication scheme 
since Windows 2000, Kerberos will be negotiated if possible. 
HANDLE hPipeFile = CreateFile(L"\\\\127.0.0.1\\pipe\\fpipe", GENERIC_READ | 
GENERIC_WRITE, 0, NULL, OPEN_EXISTING, 0, NULL);
ReadFile(hPipeFile, pReadBuf, MESSAGE_SIZE, pdwBytesRead, NULL);
WriteFile(serverPipe, message, messageLenght, &bytesWritten, NULL);
Note: From a client perspective you can effectively choose the authentication protocol by 
choosing to connect to a hostname or to an IP. Due to the design of Kerberos it cannot handle IPs 
very well and as such if you choose to connect to an IP address the result of the negotiation will 
always be NTLM(v2). Whereas when you connect to a hostname you will most likely always end up 
using Kerberos.
Once the authentication is settled, the actions that client and server want to perform are once 
again just classic file actions, that are handled by SMB just as any other file operation, e.g. by 
starting a ‘Create Request File’ request as shown below:
Data Transfer Modes
Named pipes offer two basic communication modes: byte mode and message mode.
In byte mode, messages travel as a continuous stream of bytes between the client and the 
server. This means that a client application and a server application do not know precisely how 
many bytes are being read from or written to a pipe at any given moment. Therefore a write on 
one side will not always result in a same-size read on the other. This allows a client and a server to 
transfer data without caring about the size of the data.
In message mode, the client and the server send and receive data in discrete units. Every time a 
message is sent on the pipe, it must be read as a complete message. If you read from a server 
pipe in message mode, but your read buffer is too small to hold all of the data then the portion of 
data that fits in your buffer will be copied over to it, the remaining data stays in the server’s 
shared memory section and you’ll get an error 234 (0xEA, ERROR_MORE_DATA) to indicate that 
there is more data to fetch.
A visual comparison of the messages modes is shown below, taken from “Network programming 
for Microsoft Windows” (1999):
Overlapping Pipe I/O, Blocking mode & In-/Out Buffers
Overlapping I/O, Blocking mode and In-/Out Buffers are not amazingly important from a security 
standpoint, but being aware that these exists and what they mean can aid understanding, 
communication, building and debugging named pipes. Therefore I will add these concepts here 
briefly.
Overlapping I/O 
Several Named Pipe related functions, such as ReadFile, WriteFile, TransactNamedPipe, and 
ConnectNamedPipe can perform pipe operations either synchronous, meaning the executing 
thread is waiting for the operation to complete before continuing, or asynchronous, meaning the 
executing thread fires the action and continues without waiting for its completion. 
It’s important to note that asynchronous pipe operations can only be made on a pipe (server) that 
allows overlapped I/O by setting the FILE_FLAG_OVERLAPPED within the CreateNamedPipe call.
Asynchronous calls can be made either by specifying an OVERLAPPED structure as the last 
parameter to each of the above mentioned ‘standard’ pipe actions. such as ReadFile, or by 
specifying a COMPLETION_ROUTINE as the last parameter to the ‘extended’ pipe actions, such as 
ReadFileEx. The former, OVERLAPPED structure, method is event based, meaning an event object 
must be created and is signaled once the operation is completed, while the 
COMPLETION_ROUTINE method is callback based, meaning a callback routine is passed to the 
executing thread, which is queued and executed once signaled. More details on this can be found 
here with a sample implementation by Microsoft here.
Blocking mode
The blocking mode behavior is defined when setting up a named pipe server with 
CreateNamedPipe by using (or omitting) a flag in the dwPipeMode parameter. The following two 
dwPipeMode flags define the blocking mode of the server:
PIPE_WAIT (default): Blocking mode enabled. When using named pipe operations, such as 
ReadFile on a pipe that enabled blocking mode the operation waits for completion. Meaning 
that a read operation on such a pipe would wait until there is data to read, a write operation 
would wait until all data is written. This can of course cause an operation to wait indefinitely 
in some situations.
PIPE_NOWAIT: Blocking mode disabled. Named pipe operations, such as ReadFile, return 
immediately. You need routines, such as Overlapping I/O, to ensure all data is read or 
written.
In-/Out Buffers
By In-/Out Buffers I’m referring to the input and output buffers of the named pipe server that you 
create when calling CreateNamedPipe and more precisely to the sizes of these buffers in the 
nInBufferSize and nOutBufferSize parameters. 
When performing read and write operations your named pipe server uses non-paged memory 
(meaning physical memory) to temporarily store data which is to be read or written. An attacker 
who is allowed to influence these values for a created server can abuse these to potentially cause 
a system crash by choosing large buffers or to delay pipe operations by choosing a small buffer 
(e.g. 0):
Large buffers: As the In-/Out Buffers are non-paged the server will run out of memory if 
they are chosen too big. However, the nInBufferSize and nOutBufferSize parameters are not 
‘blindly’ accepted by the system. The upper limit is defined by a system depended constant; I 