字符序列定义简写并在你的程序中使用该简写，宏处理器将会认出你的简写并将它们替
换成展开后的形式。虽然你可以把makefile的变量想成传统程序语言的变量，不过宏变
量和传统变量之间是有差别的。宏变量会被“就地”扩展，其所产生的文本字符串还可
以做进一步的扩展。继续读下去，这个差别将会变得更加明显。
一个变量名称几乎可以由任何字符组成，包括大部分的标点符号。即使空格也可以使用，
但如果你自认精神正常，就应该避免这么做。事实上只有：、#和=等字符不允许使用在
变量名称中。
变量名称是区分大小写的，所以cc和cC所指的是不同的变量。要取得某个变量的值，
请用s（)括住该变量的名称。有一个特例：变量名称若为单一字母（letter）则可以省略
圆括号，所以请直接使用sletter。这就是为何自动变量的指定不必使用圆括号。一
个原则是：指定变量名称时应该加上圆括号，避免使用单一字母的变量名称。
你还可以使用花括号来扩展变量，例如S（CC）。事实上，你将会经常看到这种做法，尤
其是在比较旧的makefile文件中。很难说使用哪个会比较好，所以请择一使用，选定后
务必维持其一致性。有些人的做法会像shell那样，将花括号用于变量的引用，将圆括号
用于函数的调用。现代化的makefile多半会使用圆括号，这也是本书将采用的方法。
52
---
## Page 63
变量与宏
53
当变量用来表示用户在命令行上或环境中所自定义的常数时，习惯上会全部以大写来编
写其名称，单词之间以下划线符号（_）隔开。至于只在makefile文件中出现的变量，则
会全部以小写来编写其名称，单词之间以下划线符号隔开。最后，在本书中，内含用户
自定义函数的变量以及宏都会以小写来编写其名称，单词之间以破折号（一）隔开。其
他的命名习惯将会适时加以说明（接下来的范例用到了我们尚未说明的功能。我准备用
它们来解说变量的命名习惯，读者现在不必太在意赋值符号右边的部分）。
常数
CC
：=gcc
MKDIR:=mkdir-p
内部变量
sources=*.c
objects =$（subst.c,.o,S（sources))
#函数
maybe-make-dir=$(if $（wildcard $1),,S(MKDIR）$1)
assert-not-null =$（if $l,,S（error Illegal nullvaiue.）)
一个变量的值由赋值符号（assignmentsymbol）右边已删除前导空格（leadingspace）
的所有字组成。跟在所有字之后的空格（trailingspaces）则不会被删除。这有时会导致
问题，举例来说，如果变量的值包含了跟在后面的空格，而且随后被使用在命令脚本中：
LIBRARY=1ibio.a#LIBRARY的值包含了一个跟在后面的空格
missing_file:
touch $(LIBRARY)
.
变量的值后面跟着一个空格，加上注释符号之后，这会变得显而易见（即使未加上注释
符号，也并不代表这个跟在后面的空格不存在）。对这个makefile运行make，将会得到
如下的结果：
Smake
touch 1ibio.a
1s-1|grep'libio.a
make:***[missing_file]Error 1
因为grep的搜索字符串也包含了跟在后面的空格，所以无法在ls的输出中找到该文件
的名称。稍后我们将会深入探讨空格（whitespace）的相关细节。现在让我们进一步讨
论变量。
变量的用途
一般来说，以变量来代表外部程序是一个不错的主意，这让makefile的用户较容易针对
他们特有的环境来改写makefile。举例来说，一个系统上常常会包含awk的各种版本：
---
## Page 64
54
第三章
awk、nawk、gawk。这个时候，你可以建立一个AwK变量来保存awk程序的名称，让
makefile较容易使用。此外，如果你的环境以安全为主，那么你最好通过绝对路径来取
用外部程序，以避免用户搜索路径所带来的安全问题。如果特洛伊木马（trojanhorse）
当然，绝对路经也会同时降低makefile的可移植性。你可以依照需求自己决定要怎么做。
变量可用来保存简单的常数，也可用来存放用户自定义的命令序列。例如，下面的设定
可用来汇报尚未使用的磁盘空间：（注1）
DF=df
AWK = awk
free-Space := S（DF).1$（AwK)'NR ==2(print S$4}
变量的用途不止这两种，还有很多，稍后我们就会看到。
变量的类型
make的变量有两种类型：经简单扩展的变量（simplyexpandedvariable）以及经递归
扩展的变量（recursivelyexpandedvariable）。你可以用：=赋值运算符来定义一个经简
单扩展的变量（或称简单变量）：
之所以称此变量为“经简单扩展”是因为，一旦make从makefile读进该变量的定义语
句，赋值运算符的右边部分会立刻被扩展。赋值运算符的右边部分只要出现make变量的
引用就会被扩展，而扩展后所产生的文本则会被存储成该变量的值。此行为跟大多数的
程序和脚本语言相同。举例来说，此变量被扩展之后一般会变成下面这样：
gcc-M
然而，如果上面的CC变量尚未定义，则此变量被扩展后一般会变成这样：
-M
$（CC）会被扩展成它的值（并未包含任何字符），也就是空无一物（即空值）。变量没有
定义并不算错误。事实上，此特性相当有用。大多数的隐含命令（implicitcommand）都
注1：dF命令会返回每个已挂载的文件系统的统计信息，包括文件系统的容量以及用量。通过
第一个参数让Cf输出特定文件系统的统计信息。此输出的第一行是一串栏标题（column
litle）.接着由awk读取此输出，只查看第二行。此输出的第四行就是尚有多少空间可用
的统计信息（以块为单位）。
---
## Page 65
变量与宏
55
会包含未定义的变量，以作为用户自定义变量的占位符（placeholder）。如果用户并未
自定义该变量，它就会变成空无一物。现在注意前导的空格。make首先会分析赋值运算
符右边的部分，也就是S（CC）-M这个字符串。当变盘引用被扩展成空无一物时，make
不会重新扫描该值以及删除前导的空格，于是前导的空格就被保留了下来。
第二种变量类型称为经递归扩展的变量。你可以用=赋值运算符来定义一个经递归扩展
的变量（或称递归变量）：
MAKE_DEPEND=S(CC)-M
之所以称此变量为“经递归扩展”是因为，make只会读进赋值运算符右边的部分，并将
之存储成该变量的值，但不会进行任何扩展的动作，扩展的动作会被延迟到该变量被使
用的时候才进行。将此变量称为延后扩展的变量（lazilyexpandedvariable）或许比较
恰当，因为扩展的动作会延迟到该变量实际被使用的时候才进行。这种扩展方式将会导
致令人意外的结果，即变量的值可能会变得混乱：
MAKE_DEPEND=$(CC)-M
#稍后
cC=gcc
这样，当MAKE_DEPEND被使用的时候，即使CC并未定义，MAKE_DEPEND在脚本中
的值也会被扩展成gcc-M。
事实上，对递归变量所进行的并非真的是延后赋值的动作（至少不是一般的延后赋值动
作）。每当递归变量被使用时，make就会对它的右边部分进行重新求值的动作。如果变
量被定义成简单的常数，比如前面的MAKE_DEPEND，做此区别是毫无意义的，因为右
边部分的变量也都是简单的常数。但试想，如果右边部分的某个变量被用来代表一个所
要运行的程序，例如date，那么每当递归变量被扩展，date程序就会被运行，而且每
次变量扩展后所产生的值也不一样（假设date的每次运行前后间隔至少一秒）。有的时
候这个特性可能非常有用，有的时候这个特性可能非常烦人！
其他的赋值类型
我们在前面的范例中看到了两种赋值类型，其中=用来创建递归变量，而：=用来创建简
单变量。此外，make还另外提供了两种赋值运算符：？=和+=。
?=运算符称为附带条件的变量赋值运算符（conditionalvariableassignmentoperator）。
这相当长难念，所以我们会把它简称为条件赋值（conditionalassignment）。此运算
符只会在变量的值尚不存在的状况下进行变量要求赋值的动作。
---
## Page 66
56
第三章
将所产生的每个文件放到S（PROJECT_DIR）/Out目录中。
OUTPUT_DIR ?=$(PROJECT_DIR)/Out
此处，我们只会在输出目录变量OUTPUT_DIR的值尚不存在的状况下对它进行赋值的
动作。这个功能可以跟环境变量有很好的交互。稍后我们将会在“变量来自何处”一节
中探讨这个议题。
+=运算符通常被称为附加运算符（appendoperator）。正如其名，此运算符会将文本附
加到变量里。这似乎没有什么特别的，但是当递归变量被使用时，它却是一个重要的特
征。尤其是，赋值运算符右边部分的值会在“不影响变量中原有值的状况下”被附加到
变量里。你可能会说：“这有什么大不了的，“附加”的功能不就是在做这件事吗？”。没
错，不过少安母躁，事实会有细微的差异。
对简单变量进行附加的动作，事情就会变得更加明显。+=运算符可以被实现成这样：
simple := S(simple) new stuff
因为简单变量中的值会被立即扩展，所以make会扩展S（simple），附加因此而产生的
文本，最后进行赋值的动作。但是递归变量会导致一个问题。如果将+=运算符实现成
下面这样，是不充许的。
recursive=S（recursive)new stuff
这是一个错误，因为make没有办法妥善地加以处理。如果make存储recursive当前
的定义加上newstuff，则make就不能在运行时再次扩展它。此外，试图扩展一个
自我引用的递归变量将会产生一个无限循环。
$make
makefile:2:***Recursive variablerecursive′references itself(eventually).Stop.
所以，+=被特别实现成可将文本附加到递归变量中并做正确的事。此运算符对于想将所
收集到的值递增给变量的人来说特别有用。
宏
变量适合用来存储单行形式的值，可是对于多行形式的值，例如命令脚本，如果我们想
在不同的地方执行它，该怎么办？例如，下面这个从Java类文件创建Java程序库（Java
archive或简称jar）的命令序列：
echo Creating s@...
S（RM）$（TMP_JAR_DIR)
S(MKDIR)S（TMP_JAR_DIR)
S(CP）-r$^S（TMP_JAR_DIR)
cd S（TMP_JAR_DIR)&& $(JAR）S（JARFLAGS）S@
---
## Page 67
变量与宏
57
S(JAR)-ufm $@S(MANIFEST）
S (RM)S(TMP_JAR_DIR)
像这样长的命令序列，我们都喜欢在开始的地方输出一个简短的信息，这样可让make
的输出较容易阅读。这个信息之后，我们会把类文件收集到一个新的临时目录中。所以，
如果该临时目录原本就存在的话就会被我们删除（注2），然后我们会创建一个新的临时
目录。接下来我们会把必要条件文件（以及它们的所有子目录）复制到该临时目录中并
切换到该临时目录，再创建jar并以工作目标作为其文件名。我们还会把清单文件
（manifestfile）加人jar并且在最后做清理的工作。毫无疑问，我们并不想让这个命令
序列重复出现在makefile文件中，因为这会给将来的维护带来问题。虽然我们可以把这
个命令序列全都塞进一个递归变量，不过这会给维护造成麻烦，而且当make输出命令
行（整个命令序列会被输出成一大串文本行）时，这会造成make的输出难以阅读。
在GNUmake中，我们可以通过define指令以创建“封装命令序列”（cannedsequence）
们将会称它为宏（macro）。在make中，宏只是用来定义变量的另一种方式，此变量还
可以包含内置的换行符号（embeddednewlines）！GNUmake的在线使用手册似平把
变量（variable）和宏（macro）这两个词混用了。在本书中，我们将会使用“宏”这个
词来指称由define指令所定义的变量，而“变量”这个词仅用来指称由赋值运算符所
定义的变量。
define create-jar
@echo Creating $@...
S（RM)$(TMP_JAR_DIR)
S(MKDIR)S(TMP_JAR_DIR)
$（CP)-r $~S（TMP_JAR_DIR)
Cd $（TMP_JAR_DIR）&&$（JAR）S（JARFLAGS）$@.
$(JAR)-ufm S@S(MANIFEST)
S（RM)$（TMP_JAR_DIR）
endef
define指令后面跟着变量名称以及一个换行符号。变量的主体包含了所有的命令序列
（每一行命令都必须前置一个跳格符号）直到endef关键字出现为止，endef关键字必
须自成一行。一个由define创建的变量，就像任何其他的变量一样，会被扩展许多次，
除非它被使用在命令脚本的语境中。下面是宏的使用范例：
S(UI_JAR):$(UI_CLASSES)
s(create-jar)
请注意，我们为echo命令前置了一个@字符。当执行命令脚本时，前置@字符的命令
注2：为了得到最好的结果，应该将RM变量定义成rm-rf。事实上，RM变量的默认值是rm
-f，虽然比较安全可是不好使用。此外，MKDIR应该定义成mkdir-P。
---
## Page 68
58
第三章
行不会被make输出。因此，当我们运行make时，它不会输出echo命令本身，只会输
出该命令的输出。如果在宏内部使用@前缀，这个前缀字符（prefixcharacter）只会影
响使用到它的命令行。然而，如果将这个前缀字符用在宏引l用（macroreference）上，
则整个宏主体（macrobody）都会被隐藏起来：
S(UI_JAR):$(UI_CLASSES)
@s(create-jar)
当make运行时只会显示：
$make
Creating ui.jar...
何时扩展变量
稍早我们看到了变量扩展过程的细微差异，这多半取决于变量之前的定义方式以及定义
的位置。即使make无法找到任何错误，获得预期以外的结果仍是常有的事。所以，你可
能想知道，扩展变量的规则是什么？这些规则真的有用吗？
当make运行时，它会以两个阶段来完成它的工作。第一个阶段，make会读进makefile
以及被引l入的任何其他makefile。这个时候，其中所定义的变量和规则会被加载进make
的内部数据库，而且依存图也会被建立起来。第二个阶段，make会分析依存图并且判断
需要更新的工作目标，然后执行脚本以完成所需要的更新动作。
当make在处理递归变量或define指令的时候，会将变量里的每一行或宏的主体存储
起来，包括换行符号，但不会予以扩展。宏定义里的最后一个换行符号并不会被存储成
宏的一部分：否则，宏被扩展时make会读进一个额外的换行符号。
当宏被扩展时，make会立即扫描被扩展的文本中是否存在宏或变量的引用，如果存在就
予以扩展，如此递归进行下去。如果宏是在命令脚本的语境中被扩展的，则宏主体的每
一行都会被插人一个前导的跳格符。
下面是用来处理“makefile中的元素何时被扩展”的准则：
·对于变量赋值（variableassignment），make会在第一阶段读进该行时，立即扩展
赋值运算符左边的部分。
·=和？=的右边部分会被延后到它们被使用的时候扩展，并且在第二阶段进行。
·：=的右边部分会被立即扩展。
---
## Page 69
变量与宏
59
如果+=的左边部分原本被定义成一个简单变量，+=的右边部分就会被立即扩展，
否则，它的求值动作会被延后。
对于宏定义（使用define指令），宏的变量名称会被立即扩展，宏的主体会被延
后到被使用的时候扩展。
对于规则，工作目标和必要条件总是会被立即扩展，然而命令总是会延后扩展。
表3-1列出了当变量被扩展时会发生什么事。
表3-1：立即和延后扩展的规则
定义
何时扩展a