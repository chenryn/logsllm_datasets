-   ::: para
    如果系统有多个驱动器设备，在 BIOS
    里设置引导顺序就很重要。如果系统只有 IDE 或 SCSI
    驱动器，这当然很简单，但是如果两种设备都有的话，使存放引导分区的驱动器先被访问就很关键了。
    :::
:::
:::
::: section
::: titlepage
## [⁠]{#ch-grub.html#s2-grub-terminology-files}E.5.2. 文件名和块列表（Blocklist） {.title}
:::
[]{#ch-grub.html#idm139817192216736 .indexterm}
::: para
当在 GRUB
里输入命令来引用文件时（如菜单列表），必须在设备和分区号码后面紧接着指定绝对文件路径。
:::
::: para
下面演示了这样的命令的结构：
:::
::: para
`(,) `{.command}
:::
::: para
在这个示例里，用 `hd`{.command}，`fd`{.command} 或 `nd`{.command} 替换
*\*。用整数来替换设备的
*\*。用相对于设备顶层的绝对路径来替换
*\*。
:::
::: para
也可能在 GRUB
中指定实际上并不在文件系统里的文件，如出现在分区的初始化块里的 chain
安装程序。要安装这样的文件，可以使用指定文件在分区里所在的块的
*blocklist*。既然文件通常由几个不同块的集合组成，块列表使用了特殊的语法。每个包含文件的块都由块的位移量来指定，后面跟着基于这个位移点的块的数量。块位移用逗号隔开的列表中依次列出。
:::
::: para
以下是一个块列表的示例：
:::
``` screen
0+50,100+25,200+1
```
::: para
这个示例指定了从分区的第一个块开始的文件，它使用了块 0 到 49、100 到 124
以及 200。
:::
::: para
了解在使用需要链载入的 GRUB
载入操作系统时如何写入黑名单是很有帮助的。如果从块 0
开始，则可以忽略块的位移量。例如，第一个硬盘里的第一分区的 chain
安装文件会有下面的名字：
:::
``` screen
(hd0,0)+1
```
::: para
下面是在 GRUB 命令行上以 root 用户设置正确设备和分区之后指定块列表的
`chainloader`{.command} 命令：
:::
``` screen
chainloader +1
```
:::
::: section
::: titlepage
## [⁠]{#ch-grub.html#s2-grub-terminology-rootfs}E.5.3.  root 文件系统和 GRUB {.title}
:::
[]{#ch-grub.html#idm139817192257984 .indexterm}
::: para
术语 [*root 文件系统*]{.emphasis} 的使用与在 GRUB
里有不同的含义。请记住：GRUB 的 root 文件系统和 Linux 的 root
文件系统毫无关系。
:::
::: para
GRUB root 文件系统是指定设备的最顶层。例如，映像文件
`(hd0,0)/grub/splash.xpm.gz`{.command} 位于 `(hd0,0)`{.command}
分区（实际上是系统的 `/boot/`{.filename} 分区）的顶层（或 root ）的
`/grub/`{.filename} 目录。
:::
::: para
然后，以内核文件的位置为选项的 `kernel`{.command} 命令被执行。引导 Linux
内核后，它会设置 Linux 用户所熟悉的 root 文件系统。之前的 GRUB root
文件系统和它所挂载的文件系统都不再被使用；它们只在引导内核文件时存在。
:::
::: para
详情请参考 [第 E.7 节 "GRUB
命令"](#ch-grub.html#s1-grub-commands){.xref} 中的 `root`{.command} 和
`kernel`{.command} 命令。
:::
:::
:::
::: section
::: titlepage
# [⁠]{#ch-grub.html#s1-grub-interfaces}E.6. GRUB 界面 {.title}
:::
[]{#ch-grub.html#idm139817119359888
.indexterm}[]{#ch-grub.html#idm139817181797328
.indexterm}[]{#ch-grub.html#idm139817176704096
.indexterm}[]{#ch-grub.html#idm139817198164960
.indexterm}[]{#ch-grub.html#idm139817187620816
.indexterm}[]{#ch-grub.html#idm139817190171280 .indexterm}
::: para
GRUB 提供三个具有不同层次的功能的界面。每个界面都允许用户引导 Linux
内核或者其他操作系统。
:::
::: para
这些界面如下所示：
:::
::: {.note xmlns:d="http://docbook.org/ns/docbook"}
::: admonition_header
**注意**
:::
::: admonition
::: para
只有在 GRUB 菜单消失前的 3 秒之内按任意键，才可以进入下面的 GRUB 界面。
:::
:::
:::
::: variablelist
[[*菜单界面*]{.emphasis}]{.term}
:   ::: para
    这是安装程序分配 GRUB
    时显示的默认界面。操作系统或者预分配内核的列表会出现并按名字排序。用箭头键可以选择默认选项之外的其他选项，然后按
    [**Enter**]{.keycap} 键引导。如果什么都不做，在超过预定时间后 GRUB
    会安装默认选项。
    :::
    ::: para
    按 [**e**]{.keycap} 键来进入项目编辑器界面，或者按 [**c**]{.keycap}
    键来安装命令行界面。
    :::
    ::: para
    有关配置这个界面的详情请参考 [第 E.8 节 "GRUB
    菜单配置文件"](#ch-grub.html#s1-grub-configfile){.xref}。
    :::
[[*菜单条件编辑器界面*]{.emphasis}]{.term}
:   ::: para
    要访问菜单项目编辑器，可以在引导装载程序中按 [**e**]{.keycap}
    键。然后屏幕会显示项目的 GRUB
    命令行，引导操作系统前，用户可以修改这些命令行，例如添加命令行（[**o**]{.keycap}
    在当前行之后插入新的一行，而 [**O**]{.keycap}
    则在当前行之前插入新命令行）、编辑命令行（[**e**]{.keycap}）或者删除命令行（[**d**]{.keycap}）。
    :::
    ::: para
    在完成了所有的修改后，按 [**b**]{.keycap}
    键可以执行该命令行并引导作业系统。按 [**Esc**]{.keycap}
    可以取消所有的修改并重新装入标准的菜单界面。按 [**c**]{.keycap}
    键可以安装命令行界面。
    :::
    ::: {.note xmlns:d="http://docbook.org/ns/docbook"}
    ::: admonition_header
    **注意**
    :::
    ::: admonition
    ::: para
    关于使用 GRUB 菜单条目编辑器修改运行级别的详情请参考 [第 E.9 节
    "在引导时改变运行级别"](#ch-grub.html#s1-grub-runlevels){.xref}。
    :::
    :::
    :::
[[*命令行界面*]{.emphasis}]{.term}
:   ::: para
    命令行界面是最基本的 GRUB
    界面，但也可以进行最大限度控制的界面。可输入任何相关的 GRUB
    命令，并按 [**Enter**]{.keycap} 键执行。这个界面提供一些高级的类似于
    shell 的特征，包括按 [**Tab**]{.keycap}
    键依据上下文自动完成命令，[**Ctrl**]{.keycap} 键组合如
    [**Ctrl**]{.keycap}+[**a**]{.keycap} 移动到一行的开头、以及
    [**Ctrl**]{.keycap}+[**e**]{.keycap} 移动到一行的末尾。此外，就象在
    `bash`{.command} shell
    中一样，也可以使用箭头键、[**Home**]{.keycap}、[**End**]{.keycap} 和
    [**Delete**]{.keycap} 键。
    :::
    ::: para
    常用命令列表请参考 [第 E.7 节 "GRUB
    命令"](#ch-grub.html#s1-grub-commands){.xref}。
    :::
:::
::: section
::: titlepage
## [⁠]{#ch-grub.html#s2-grub-interfaces-orderofuse}E.6.1. 界面载入顺序 {.title}
:::
[]{#ch-grub.html#idm139817121071264 .indexterm}
::: para
GRUB
安装其第二阶段引导装载程序时，首先会搜索配置文件。找到后，会显示菜单界面绕过页面（bypass
screen）。如果在 3 秒以内按了任何键，GRUB
将创建一个菜单列表，并显示菜单界面。如果没有按任何键，将使用 GRUB
菜单中的默认内核条目。
:::
::: para
如果没有找到配置文件，或者配置文件是不可读的，GRUB
将安装命令行界面，这允许用户输入命令来完成引导过程。
:::
::: para
如果配置文件无效，GRUB
会显示出错信息，并要求输入。这可以帮助用户找到问题的确切原因。按任意键重新装入菜单界面，可以编辑菜单选项，并根据
GRUB 报告的错误进行更正。如果更正失败，GRUB
会再次报告错误，并重新装入菜单界面。
:::
:::
:::
::: section
::: titlepage
# [⁠]{#ch-grub.html#s1-grub-commands}E.7. GRUB 命令 {.title}
:::
[]{#ch-grub.html#idm139817119993648 .indexterm}
::: para
GRUB
在它的命令行界面里提供大量的有用的命令。有些命令接受参数选项；这些选项应该和命令以及其他选项用白字符分隔开。
:::
::: para
下面是一个有用的命令的列表：
:::
::: {.itemizedlist xmlns:d="http://docbook.org/ns/docbook"}
-   ::: para
    `boot`{.command} --- 引导操作系统或者最后被安装的 chain 安装程序。
    :::
-   ::: para
    `chainloader `{.command} --- 将指定的文件安装为 chain
    安装程序。如果这个文件位于指定分区的第一个扇区，则使用块列表记号
    `+1`{.command} 来代替文件名。
    :::
    ::: para
    下面是 `chainloader`{.command} 命令的一个示例：
    :::
    ``` screen
    chainloader +1
    ```
-   ::: para
    `displaymem`{.command} --- 根据 BIOS
    信息，显示当前的内存使用情况。这对在引导前确认系统有多少内存很有用。
    :::
-   ::: para
    `initrd `{.command} ---
    使用户可以指定在引导时所用的初始 RAM
    磁盘文件。当内核需要某种模块才能正常引导时就需要
    `initrd`{.filename}，比如当使用 ext3 或者 ext4 文件系统格式化 root
    分区时。
    :::
    ::: para
    下面是 `initrd`{.command} 命令的一个示例：
    :::
    ``` screen
    initrd /initrd-2.6.8-1.523.img
    ```
-   ::: para
    `install    p`{.command}
    *config-file*``{=html} --- 将 GRUB 安装到系统的主引导分区里。
    :::
    ::: itemizedlist
    -   ::: para
        ``{.command} ---
        指定可以找到第一阶段引导装载程序映像的设备、分区和文件，如`(hd0,0)/grub/stage1`{.command}。
        :::
    -   ::: para
        ``{.command} ---
        指定用来安装第一阶段引导装载程序映像应该的磁盘，如
        `(hd0)`{.command}。
        :::
    -   ::: para
        ``{.command} ---
        将第二阶段引导装载程序的位置传递给第一阶段引导装载程序，如
        `(hd0,0)/grub/stage2`{.command}。
        :::
    -   ::: para
        `p`{.option} ``{.command} --- 这个选项告诉
        `install`{.command} 命令来寻找 ``{.command}
        所指定的菜单配置文件，如 `(hd0,0)/grub/grub.conf`{.command}。
        :::
    :::
    ::: warning
    ::: admonition_header
    **警告**
    :::
    ::: admonition
    ::: para
    `install`{.command} 命令覆盖主引导分区里任何已有的信息。
    :::
    :::
    :::
-   ::: para
    `kernel   `{.command} \... ---
    指定引导操作系统时要载入的内核文件。使用 root
    命令所指定分区的绝对路径替换 *\*。使用 Linux
    内核选项替换 *\*，比如使用
    `root=/dev/VolGroup00/LogVol00`{.command} 指定该系统 root
    分区所在位置。可采用以空格分开的列表为内核提供多个选项。
    :::
    ::: para
    下面是 `kernel`{.command} 命令的一个示例：
    :::
    ``` screen
    kernel /vmlinuz-2.6.8-1.523 ro root=/dev/VolGroup00/LogVol00
    ```
    ::: para
    前面示例里的选项指定了 Linux 的 root 文件系统位于 `hda5`{.command}
    分区。
    :::
-   ::: para
    `root (,)`{.command} --- 分配
    GRUB 的 root 分区，如 `(hd0,0)`{.command}，并挂载这个分区。
    :::
    ::: para
    下面是 `root`{.command} 命令的一个示例：
    :::
    ``` screen
    root (hd0,0)
    ```
-   ::: para
    `rootnoverify (,)`{.command}
    --- 分配 GRUB 的 root 分区，就象 `root`{.command}
    命令一样，但不挂载此分区。
    :::
:::
::: para
还可以找到其他一些可用的命令；键入 `help --all`{.command}
获取命令的完整列表。关于所有 GRUB 命令的说明，请参考
 在线文件。
:::
:::
::: section
::: titlepage