try:
not options.quiet:
memory = int(session.query()[o])/1024
results[ipAddr]= output
memory = None
print output
#allow printing to standard out
results[ipAddr]= output
www.TopSage.com
print "%s returns %s" % (ipAddr,output)
a valid response
DestHost =ipAddr,
---
## Page 235
具。如果需要查询数千台机器，那么这个工具会花去一天多的时间来进行处理。这或许
至少1800MB或者说大约2GB的内存，它的信息会出现在报告中。下面是查询的输出结
保险起见，我们使用数据值1800，这大约相当于1800MB的内存。如果一台主机不具有
小于2GB内存的主机。正如之前所提及的，不同主机在计算RAM时存在差异，因此为了
正如你所看到的，结果来自子网10.0.1.0/24中的主机。让我们使用阈值标志来模拟寻找
下面看一下示例中这个工具的输出结果：
义的结果，并且兼容由于不同主机对内存计算方式的差异而引起的不同。
值。这表示将它设置为仅当数值小于指定阈值时才返回。通过使用阔值，可以返回有意
这里使用了一个技巧，在最后返回结果不为空时创建一些逻辑，并且额外侦听一个阔
回一个由IP地址和SNMP值组成的字典。
可以放入一些IP地址或是一个子网范围进行处理，我们的模块会寻找SNMP查询，并返
理选项操作。IPy模块（这是我们一遍一遍地引用的模块）将自动处理IP地址参数。现在
尽管现在的脚本可以胜任这一工作，但是我们还是可以做一些事情来进一步优化这个工
有的类，并将其放到新模块中。接下来创建了一个控制类，该类通过optparse模块来处
好了，让我们看一下这段代码，并观察代码是怎样执行的。这里使用了前一个示例中所
果：
{'10.0.1.2':1978,
[ngift@ng-lep-lap][H:6518][J:0]> ./memory_tool_netsnmp.py 10.0.1.2 10.0.1.20
_main()
{'10.0.1.20':372}
Running snmp query for: 10.0.1.2
[ngift@ng-lep-lap][H:6519][]:0]>
Results from SNMP Query hrMemorySize for ['10.0.1.2', '10.0.1.20']:
372
Running snmp query for:10.0.1.20
1978
Runningsnmpqueryfor:10.0.1.2
hrMemorySize=
hrMemorySize=None（None)
hrMemorySize = None （None )
except:
try:
 print “Please install the IPy module to use this tool"
import IPy
Query hrMemorySize for ['10.0.1.2','10.0.1.20']:
：None（None)
for:
'10.0.1.20':372}
10.0.1.20
www.TopSage.com
SNMP|221
---
## Page 236
询任何OID，而不是专门用来进行内存计算的。因此我们现在不仅拥有了计算内存的工
些任务自动化之前，给你看一个你可能没有注意的另一个优点。代码编写的方式允许查
库来fork每一个查询。我们可以做的另一项改进是从字典中自动产生CSV报告。在将这
会也能满足需要，但是如果希望很快就能看到结果，就需要添加并发处理并使用第三方
有一个被称为snmpstatus的非常有用的工具，可以获得一些不同的snmp查询，并且可以
建一些更高级的工具。让我们从创建一个完整的一次性工具开始，然后再在更大的脚本
创建混合的SNMP工具
的大量时间相比，30分钟只相当于桶中的一滴水。
为通用呢？你或许会发现自己又有了一个可以一遍又一遍重复使用的工具与将来会省下
当写一些一次性的工具时，记住这一观点非常实用。为什么不再多花30分钟来使代码更
下面看一个实现我们意图的示例：
具，还有了一个通用工具，可以实现SNMP查询，而这一切实现得又是如此简便。
222
将其合并到“状态”中：
中使用这些技术。
至此我们已经分别演示了一些工具的示例，
import subprocess
10.0.1.2 returns (
[ngift@ng-lep-lap][H:6522][J:0]> ./memory_tool_netsnmp.py -o sysDescr 10.0.1.2
class Snmpdf(object):
Running snmp query
'Linux localhost.localdomain 2.6.18-8.1.14.el5 #1 SMP
hu
Rest
Thu Sep 27 19:05:32 EDT 2007 x86_64',)}
Linux 1ocalhost.localdomain 2.6.18-8.1.14.el5 #1 SMP
huSep2719:05:32EDT
sysDescr = None
0.1.20returns(
ults from
第7章
2.6.18-8
DestHost="localhost",
Version="-v2c",
('Linux cent 2.6.18-8.1.14.el5 #1 SMP
('Linux 1ocalhost.localdomain 2.6.18-8.1.14.el5 #1 SMP
for:10.0.1.20
（None）
（None
.1.14.el5
2007 x86_64',)
www.TopSage.com
，需要注意的是，这些技术可以被合并起来创
'10.0.1.20':
'10.0.1.20'];
---
## Page 237
续，启动IPython，然后尝试一下：
ARP非常容易被整合到脚本中，因此最好通过交互地使用Ipython来演示示例。现在继
这样的一个工具。
另外一个与SNMP相关的工具是ARP。ARP使用ARP协议。如果物理上是在同一个网络
来处理所有的模板代码，我们的新脚本会仅有几行长。记住这一点，稍后会再次提到。
小。创建另一级别的抽象并复用通用组件，这是一个非常棒的示例。如果创建一个模块
希望你能注意到这一事实：除了名称不同之外，该脚本与snmpdf命令之间的差异非常
上，那么通过使用ARP协议，可以基于IP地址获得设备的Mac地址。稍后让我们也编写
if
def
ARP=
#some variables
import subprocess
import re
def query(self):
print result
result = snmpstatus.query()
snmpstatus = Snmpdf()
_main():
Community = self.Community
DestHost= self.DestHost
Version = self.Version
self.verbose=verbose
self.Community=Community
self.DestHost = DestHost
self.Version =Version
except:
try:
verbose
if verbose:
snmpstatus = "snmpstatus %s -c %s %s" % (Version, Community, DestHost)
shzensdmus % us% Busuunz xoiia., ‘iiaps'sKs << qutid
import sys
return out
out = p.stdout.read()
=self.verbose
verbose=True):
Community="public",
www.TopSage.com
stdout=subprocess.PIPE)
shell=True,
SNMP | 223
---
## Page 238
224
以这样使用：
接下来需要告诉snmpd重新读取配置文件。我们有三种不同的处理方法。在Red Hat上可
rocommunity public
syslocation "o'Reilly"
例7-4：HelloWorld的SNMP配置文件
在Python中执行我们的Hello world程序。例7-4演示了在Red Hat主机上的运行过程。
始，该程序由snmp来进行查询。第一步是创建一个非常简单的snmpd.conf文件，该文件
Net-SNMP提供了一些方法来扩展它的代理，但是我们将从编写一个HelloWorld程序开
件进行内部响应。
许开发者通过编写代码来监测想查看的内容，并且可以额外地让代理对你指定给它的条
对于一名Python程序员，扩展Net-SNMP是使用SNMP最令人激动的一个方面，因为它允
学习如何扩展代理，前面介绍的两种方式都是获得相关信息的非常不错的途径。
SNMP中。可以对snmpd.conf使用man命令以获得API文档的详细信息。如果希望进一步
EXAMPLE.conf文件是获取扩展Net-SNMP相关信息的最好的地方，它被包括在Net-
了当的方式是，写一个代理来收集需要的信息，然后通过SNMP协议返回结果集。
可以返回的默认的信息集，但是对主机上的代理进行扩展也是可行的。一个合理且直接
正如之前讨论的，Net-SNMP在大多数*nix主机中是作为代理被安装的。虽然代理有一个
Net-SNMP扩展
数据中心查找库的一部分。
这个代码段还无法构成一个可复用的工具，但是可以简单地采纳这一思想，并将其作为
def getMac():
IP = "10.0.1.1"
第7章
print macAddr
p = subprocess.Popen(CMD, shell=True, stdout=subprocess.PIPE)
for
if re.search(macPattern, chunk):
return chunk
_main_
www.TopSage.com
PDG
---
## Page 239
一下查询时会是什么样子：
解析Apache日志中点击Firefox的总数，然后返回自定义的企业编码。这次让我们向后看
从单行获得输出不是Python的长处，而且这显得有些笨拙。下面是一个脚本示例，它会
一的名字空间，避免与其他将来会遇到的提供商出现编码冲突。
码。可以使用这一代码来创建自定义的对代理的查询。这么做的主要原因是保持一个统
微有些复杂。实现这一目标的常规做法是使用iana.org填写一个请求，然后获得一个企业
会将该值指定给OID。如果你希望查询一个由自己创建的自定义的OID，处理起来会稍
的1.3.6.1.4.1.2021.8。这个OID是ucdavis.extTable。在创建一个snmpd.conf扩展时，它
对本查询需要做进一步解释，因为一些观察力比较强的读者可能会奇怪我们从哪里获得
snmpwalk命令的执行结果：‘
使用snmpwalk命令或是绑定到IPython中的Net-SNMP来查询我们的主机。下面是使用
现在已经修改了snmpd.conf文件，并且告诉snmpd重读配置文件。我们可以继续通过
告诉snmpd重读配置文件。
最后，snmpset命令可以给UCD-SNMPMIB::versionUpdateConfig.0指定一个整数（1），
然后，将其发送出去：
或者可以这样做：
UCD-SNMP-MIB::ucdaVis.28664.100.3.1 = STRING:
UCD-SNMP-MIB: :ucdavis.28664.100.1.1 :
82029 450501 91d 3- 1- s <[0]06:][2010x]
kill -HUP 12345
00:00:30 /usr/sbin/snmpd -Lsd -Lf /dev/null -p /var/run/snmpd.pid -a
root
service snmpd reload
/usr/bin/python /opt/local/snmp_scripts/agent_ext_logs.py"
-c"print‘
1234510Apr14?
=STRING:helloworld
: STRING: hello world from Python
INTEGER:1
www.TopSage.com
INTEGER:1
SNMP|225
---
## Page 240
def grep(lines,pattern="Firefox"):
importre
为了使查询操作在第一时间里就能起作用，需要告诉snmpd.conf这个脚本的相关信息。
def increment(lines):
"""Returns Hit Count for Firefox"""
例7-5：查询Apache日志文件中firefox的点击数
例7-5是查询这个OID时执行的脚本。
志并在日志中查找所有的Firefox点击数，然后，对其进行总计并通过SNMP返回结果。
如果查找数值100.101.1，你会看到脚本的输出。脚本使用gnerator管道来解析Apache日
一。自定义的Net-SNMP对处理许多事务都非常有帮助，并且如果细心地使用SNMPv3,
我们希望在即将完成介绍时，能够确立这样的事实：SNMP是这本书最吸引人的主题之
通过snmpset进行修改，可以避免引起破坏。
企业编码是非常重要的。主要原因是，如果决定使用一个已经被别人占用的范围值，并
下面是这部分代码的内容：
226
编码，100是希望使用的预定的值。如果计划扩展SNMP，遵循最好的经验并使用我们的
关键是最后一行，在这一行中的1.3.6.1.4.1.2021是ucdavis企业编码，28664是我们的企业
count
natch
UCD-SNMP-MIB::ucdavis.28664.100.103.1=
UCD-SNMP-MIB: :ucdavis.28664.100.101.1 = STRING:
syscontact PI:EMAIL
Syslocation "o'Reilly"
return num
for line in lines:
0=wnu
pat=re.compile(pattern)
/opt/local/snmp_scripts/agent_ext_logs.py
num+=1
第7章
www.TopSage.com
---
## Page 241
import netsnmp
自1988年就被提出。未来或许会针对SNMPv3版本出现更有意义的应用。
实是非常棒的通过编程来控制数据中心设备的方法。因为它作为设备控制的统一规范，
最后需要指出的一点是，SNMP经常不被认为是一种用来实现设备控制的工具，但它确
础。书中的所有代码，应该首先在非产品环境中被检测，以免引起破坏。
新的IOS镜像文件。这或许是为数据中心的每一台交换机实现IOS一次性升级的脚本的基
这个示例使用Net-SNMP的VarList来首先给交换机发出删除闪存的指令，然后加载一个
result = netsnmp.snmpset(vars,
例7-6：上传新的配置
并且路由器必须被配置成允许通过SNMP进行读写操作。例7-6是Python代码的实现过
其控制的绝佳的选择。在这个示例中，必须从下载IOS文件的路由器上运行TFTP服务，
通过SNMP重新加载Cisco配置是非常吸引人的方法，看起来像是与设备进行通信及实现
以及进行基本配置的相关内容。
Cookbook》，那么最好多参看这些书。书中包括了如何通过SNMP与Cisco设备进行通信
买了由Kevin Dooley和 Ian J.Brown(O'Reilly)编著的《Essential SNMP》和《Cisco IOS
一个设备进行通信，应该使用sNMPv3。在本节，如果你有一个Safari账号或是已经购
出于简洁的原因，我们仅在示例中介绍SNMPv1，但是如果通过一个不安全的网络与
pexpect/）更大的优势。最主要的原因在于它更简单。
由器方面，SNMP具有比其他一些工具，如Pyexpect（http://sourceforge.net/projects)
使用SNMP的最有意义的一件事情是通过SNMP对设备进行控制。很明显，在控制路
SNMP设备控制
socket.
你可以通过SNMP协议很容易地做一些令人吃惊的事情。但通常人们会选择ssh或
程：
Community='readwrite')
DestHost='cisco.example.com',
Version = 1,
"iso-config.bin")
www.TopSage.com
SNMP |227
---
## Page 242
使用XML-RPC：
使用ReST:
你也可以通过XML-RPCAPI与Zenoss直接通信，添加或删除设备。下面是两个示例。
设备API
你可以打开一个自定义的shell，然后直接运行Zenoss命令。
Zenoss不仅是一个强大的SNMP监测与发现系统，它也包括了称为zendmd的高级API。
使用Zendmd
要获得ZenossAPI的最新信息，请访问以下网址：http://www.zenoss.com/communityldocs/
Zenoss API
后，如果希望参与开发Zenoss，可以贡献你编写的补丁。
或是ReST API实现了极为强大的功能及可扩展性。要查看与ReST相关的更多信息，可以
放源代码的工具，由纯Python语言编写。Zenoss是一个新的企业级应用，通过XML-RPC
Zenoss是一个对于企业级SNMP管理系统非常有吸引力的新选择。Zenoss是一个完全开