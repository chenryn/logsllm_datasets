### Alice and Bob: Navigating the World of Cryptography

**David Huerta - DEF CON 23**
*Photo credit: Robert Young*

Alice and Bob are often used as placeholders in cryptography discussions. However, they find themselves in a confusing world where Eve (the eavesdropper) is always trying to intercept their communications.

#### Introduction to Crypto Parties
Crypto parties are events where people gather to learn about and use cryptographic tools. These events have gained popularity, especially in New York City, where various communities with different skill levels participate. As of July 2015, there have been over 24 crypto parties in NYC, held in diverse locations such as hackerspaces, libraries, art galleries, co-working spaces, and universities.

**Locations:**
- **Hackerspaces:** Alpha One Labs, Fat Cat Fab Lab, NYC Resistor
- **Libraries:** Brooklyn Public Library, Verso Books
- **Art Galleries:** Calyx Institute, Babycastles
- **Co-working Spaces:** Harlem Creative Space
- **Universities:** CUNY Graduate Center, Columbia

*Photo credit: Roman Kruglov*

### Key Lessons from 1992

1. **Modelessness:**
   - CAD software is often criticized for its complex modes. In cryptography, it's important to limit the number of modes users need to remember. However, private and un-private situations must be handled carefully.
   
2. **Perceived Stability:**
   - A solid back-end is crucial, but if the front-end appears unstable, users will assume the entire system is broken. This can lead to a loss of trust.

3. **User Testing:**
   - Prototype your software and ask people to try it out. Use their feedback to make necessary design changes.

4. **Metaphors:**
   - Avoid using real-world metaphors that don't translate well to digital contexts. For example, no one uses a key to unlock another key in the real world.

### Key Lessons from 2015

1. **Forgiveness:**
   - User experience (UX) often focuses on allowing users to undo actions or revert to an original state. In cryptography, mistakes are often irreversible, so the interface should reflect this.

2. **Too Many Tools:**
   - If a chain of tools needs to be installed in a specific order, many users will not follow through. Simplify the process by reducing the number of steps and tools required.

3. **False Hope:**
   - If there's any chance something could go wrong or a feature might not be available, warn the user. Transparency builds trust.

4. **Confusion Through Curiosity:**
   - Even if you perfectly illustrate a mental model, the internet can still cause confusion. Be prepared to address and clarify misconceptions.

*Photo credit: Tambako the Jaguar*

### Constructive Criticism

#### Telegram
- **Disclaimer:** While Telegram is popular, it's important to note that it does not offer out-of-band verification like OTR. Additionally, rolling your own cryptographic solutions is generally not recommended.
- **Feature:** Telegram alerts the other party when a screenshot is taken, which is a useful security feature.
- **Issue:** It can be difficult to determine whether a chat is encrypted, which is a significant problem.

#### Signal
- **Improvements:**
  - The mystery blue button has been fixed.
  - Selecting a contact no longer immediately calls them.
  - The app now works on iPod Touch devices.
  
- **Remaining Issues:**
  - The call button (corded phone handset icon) is still unlabeled, which may be a generational issue.
  - The Privacy Settings screen remains somewhat cryptic, with unclear terms like "Screen security" and the inability to view the full fingerprint.

#### Peerio
- **Design:**
  - Peerio is designed to work only in end-to-end encrypted mode, eliminating the risk of accidentally using an insecure mode.
  - Human memory is better at memorizing strings of words, but not if they are typed only once. Using a short PIN is more practical.
  - The UI needs to clearly communicate that the person you are trying to contact must approve your request.

### Interoperability Issues

- **Axolotl:** Used by Signal.
- **Minilock:** Used by Peerio.
- **OTR:** Used by some desktop applications.
- **PGP:** Used by other applications.

**OTR:**
- **Description:** OTR is typically used with Pidgin or Adium on desktops, with the OTR add-on or plugin. For Android, ChatSecure is used, and a Jabber or XMPP account is required.
- **XMPP Accounts:** Often come from the Chaos Computer Club (CCC) and may use unsigned certificates, which can be concerning.

*Photo credit: Yves Roy*

### Pidgin

- **Onboarding:** Unlike Thunderbird with gandi.net, Pidgin lacks an onboarding process for creating new accounts. Users must add pre-existing accounts.
- **Terminology:** People will call it Jabber, while Pidgin refers to it as XMPP.
- **UI Issues:**
  - The "Create this new account" checkbox is confusing and needs explanation.
  - There is no clear way to change existing account passwords.
  - SSL/TLS encryption is not differentiated from OTR encryption in the UI.
  - OTR settings are buried in plugin configuration options.

*Photo credit: Gamerscore Blog*

### Lessons from 1999

- **Reading Material:** "Why Johnny Canâ€™t Encrypt" by Alma Whitten and J.D. Tygar.
- **User Testing:** Users in 1999 faced similar issues as those at crypto parties in 2015.

*Photo credit: K W Reinsch*

### Implementation Problems

- **Too Many Tools:** On macOS, the fully open-source setup includes GPG Tools, Thunderbird, and Enigmail.
- **Order of Installation:** The order in which these tools are installed must be explicitly explained.
- **New Internet Users:** Many new users have never used email outside of webmail services. Managing decades-old email accounts via IMAP can be challenging.
- **Thunderbird Issues:** The latest updates are mostly bug fixes, and the interface is becoming increasingly outdated. Tiny text and overlapping PGP and S/MIME settings add to the confusion.

### PGP in the Browser

- **Advantages:**
  - Users are already familiar with webmail interfaces.
  - Everyone has a web browser installed.
  - Chromebooks are the fastest-growing segment of the PC market.

- **Disadvantages:**
  - PGP in the browser can be less secure due to the potential for browser plugins to hold private keys.

*Photo credit: Sasquatch I*

### Sensible Design for 1991 vs. Challenging Design for 2015

- **Private Keys as Files:**
  - **1991:** One user, one computer, inside a locked house. No automatic cloud backup software.
  - **2015:** Backup software can accidentally copy private keys to the cloud. Laptops are frequently lost or stolen, and migrating keys between machines is not well-thought-out.

- **Key Servers:**
  - **1991:** No HTTPS-encrypted sites to post public keys. Limited encrypted communication.
  - **2015:** Many PGP use cases involve sending emails to individuals known only through social media. Directories like Keybase provide a contemporary solution for verifying identity.

- **RSA-Based Keys:**
  - **1991:** Public keys were long and fingerprints were used for verification. Encryption was slow but manageable in C.
  - **2015:** In-browser PGP means JavaScript PGP, which performs significantly slower than ECC-based alternatives like NaCL. Slowness can lead to user frustration.

### Following Up

- **Twitter:** @huertanix and @cryptopartynyc
- **Web:** [http://www.davidhuerta.me](http://www.davidhuerta.me)
- **Peerio:** huertanix
- **PGP Public Key ID (Fingerprint):** 1482 F3BF 3F16 6BD4 3525 D55E 35D7 26BD AE09 F328
- **In Person:** Join us at the next NYC crypto party!