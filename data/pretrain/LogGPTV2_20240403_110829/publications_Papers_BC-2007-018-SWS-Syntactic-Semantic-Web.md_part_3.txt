Figure 6: Semantic Web layered architecture (Berners-Lee, Hendler et al. 2001)
In the following sections we will briefly describe these layers. While the notions
presented have been simplified, they provide a reasonable conceptualization of the
various components of the semantic Web.
©2006 copyrights. All rights reserved. No part of this chapter may be reproduced, stored in a retrieval system or 10
transmitted in any form or by any means, without the prior written permission of the publisher. Do not redistribute
this material.
Cardoso, J. (Ed.) "Semantic Web Services: Theory, Tools and Applications", Idea Group. Hard cover:978-1-59904-
045-5, e-Book:978-1-59904-047-9, 2007.
5.1 URI and Unicode
A Universal Resource Identifier (URI) is a formatted string that serves as a means of
identifying abstract or physical resource. A URI can be further classified as a locator, a
name, or both. Uniform Resource Locator (URL) refers to the subset of URI that
identifies resources via a representation of their primary access mechanism. An Uniform
Resource Name (URN) refers to the subset of URI that is required to remain globally
unique and persistent even when the resource ceases to exist or becomes unavailable.
For example,
• The URL http://dme.uma.pt/jcardoso/index.htm identifies the location from
where a Web page can be retrieved
• The URN urn:isbn:3-540-24328-3 identifies a book using its ISBN
Unicode provides a unique number for every character, independently of the
underlying platform, program, or language. Before the creation of unicode, there were
various different encoding systems. The diverse encoding made the manipulation of
data complex. Any given computer needed to support many different encodings. There
was always the risk of encoding conflict, since two encodings could use the same
number for two different characters, or use different numbers for the same character.
Examples of older and well known encoding systems include ASCII and EBCDIC.
5.2 XML
XML is accepted as a standard for data interchange on the Web allowing the structuring
of data on the Web but without communicating the meaning of the data. It is a language
for semi-structured data and has been proposed as a solution for data integration
problems, because it allows a flexible coding and display of data, by using metadata to
describe the structure of data (using DTD or XSD).
In contrast to HTML, with XML it is possible to create new markup tags, such as
, which carry some semantics. However, from a computational
perspective, a tag like  is very similar to the HTML tag . While XML
is highly helpful for a syntactic interoperability and integration, it carries as much
semantics as HTML. Nevertheless, XML solved many problems which have earlier
been impossible to solve using HTML, i.e. data exchange and integration.
A well-formed XML document creates a balanced tree of nested sets of open and
closed tags, each of which can include several attribute-value pairs. The following
structure shows an example of an XML document identifying a ‘Contact’ resource. The
document includes various metadata markup tags, such as , ,
and , which provide various details about a contact.
 Jorge 
 Cardoso 
 University of Madeira 
 PI:EMAIL 
 +351 291 705 156 
While XML has gained much of the world’s attention it is important to recognize
that XML is simply a way of standardizing data formats. But from the point of view of
semantic interoperability, XML has limitations. One significant aspect is that there is no
way to recognize the semantics of a particular domain because XML aims at document
structure and imposes no common interpretation of the data (Decker, Melnik et al.
©2006 copyrights. All rights reserved. No part of this chapter may be reproduced, stored in a retrieval system or 11
transmitted in any form or by any means, without the prior written permission of the publisher. Do not redistribute
this material.
Cardoso, J. (Ed.) "Semantic Web Services: Theory, Tools and Applications", Idea Group. Hard cover:978-1-59904-
045-5, e-Book:978-1-59904-047-9, 2007.
2000). Another problem is that XML has a weak data model incapable of capturing
semantics, relationships, or constraints. While it is possible to extend XML to
incorporate rich metadata, XML does not allow for supporting automated
interoperability of system without human involvement. Even though XML is simply a
data-format standard, it is part of the set of technologies that constitute the foundations
of the semantic Web.
5.3 RDF
At the top of XML, the World Wide Web Consortium (W3C) has developed the
Resource Description Framework (RDF) (RDF 2002) language to standardize the
definition and use of metadata. Therefore, XML and RDF each have their merits as a
foundation for the semantic Web, but RDF provides more suitable mechanisms for
developing ontology representation languages like OIL (Horrocks, Harmelen et al.
2001).
RDF uses XML and it is at the base of the semantic Web, so that all the other
languages corresponding to the upper layers are built on top of it. RDF is a formal data
model for machine understandable metadata used to provide standard descriptions of
Web resources. By providing a standard way of referring to metadata elements, specific
metadata element names, and actual metadata content, RDF builds standards for XML
applications so that they can interoperate and intercommunicate more easily, facilitating
data and system integration and interoperability. At first glance it may seem that RDF is
very similar to XML, but a closer analysis reveals that they are conceptually different. If
we model the information present in a RDF model using XML, human readers would
probably be able to infer the underlying semantic structure, but general purpose
applications would not.
RDF is a simple general-purpose metadata language for representing information in
the Web and provides a model for describing and creating relationships between
resources. A resource can be a thing such as a person, a song, or a Web page. With RDF
it is possible to add pre-defined modeling primitives for expressing semantics of data to
a document without making any assumptions about the structure of the document. RDF
defines a resource as any object that is uniquely identifiable by a Uniform Resource
Identifier (URI). Resources have properties associated to them. Properties are identified
by property-types, and property-types have corresponding values. Property-types
express the relationships of values associated with resources. The basic structure of
RDF is very simple and basically uses RDF triples in the form of subject, predicate,
object.
• subject: a thing identified by its URL
• predicate: the type of metadata, also identified by a URL (also called the
property)
• object: the value of this type of metadata
RDF has a very limited set of syntactic constructs, no other constructs except for
triples is allowed. Every RDF document is equivalent to an unordered set of triples. The
example from Figure 7 describes the following statement using a RDF triple:
“Jorge Cardoso created the Jorge Cardoso Home Page.”
©2006 copyrights. All rights reserved. No part of this chapter may be reproduced, stored in a retrieval system or 12
transmitted in any form or by any means, without the prior written permission of the publisher. Do not redistribute
this material.
Cardoso, J. (Ed.) "Semantic Web Services: Theory, Tools and Applications", Idea Group. Hard cover:978-1-59904-
045-5, e-Book:978-1-59904-047-9, 2007.
The ‘Jorge Cardoso Home Page’ is a resource. This resource has a URI:
http://dme.uma.pt/jcardoso/ and It has a property, ‘creator’, with the value ‘Jorge
Cardoso’.
Creator>
(subject, predicate, object)
Creator
http://dme.uma.pt/jcardoso/ Jorge Cardoso
 Jorge Cardoso 
The first lines of this example use namespaces to explicitly define the meaning of the
notions that are used. The first namespace xmlns:rdf=”http://w3.org/TR/1999/PR-rdf-
syntax-19990105#” refers to the document describing the syntax of RDF. The second
namespace http://dublincore.org/2003/03/24/dces# refers to the description of the
Dublin Core (DC), a basic ontology about authors and publications.
The Dublin Core (DC 2005) is a fifteen element metadata set that was originally
developed to improve resource discovery on the Web. To this end, the DC elements
were primarily intended to describe Web-based documents. Examples of the Dublin
Core metadata include:
• Title – the title of the resource
• Subject – simple keywords or terms taken from a list of subject headings
• Description – a description or abstract
• Creator – the person or organization primarily responsible for the intellectual
content of the resource
• Publisher – the publisher
• Contributor – a secondary contributor to the intellectual content of the resource
The following example shows a more real and complete scenario using the DC
metadata. It can be observed that more than one predicate-value pair can be indicated
for a resource. Basically, it expresses that the resource ‘http://dme.uma.pt/jcardoso’ has
the title ‘Jorge Cardoso Web Page’, its subject is ‘Home Page’, and was created by
‘Jorge Cardoso’.
©2006 copyrights. All rights reserved. No part of this chapter may be reproduced, stored in a retrieval system or 13
transmitted in any form or by any means, without the prior written permission of the publisher. Do not redistribute
this material.
Cardoso, J. (Ed.) "Semantic Web Services: Theory, Tools and Applications", Idea Group. Hard cover:978-1-59904-
045-5, e-Book:978-1-59904-047-9, 2007.
Property type Property value
DC:Title
Jorge Cardoso Web Page
Resource
DC:Subject
http://dme.uma.pt/jcardoso/ Home Page
DC:Creator
Jorge Cardoso
Figure 8. Graphic Representation of a RDF statement
The graphic representation of Figure 8 is expressed in RDF using the DC namespace
with the following statements:
 Jorge Cardoso Home Page 
 Jorge Cardoso 
 2005-07-23 
Very good examples of real world systems that use RDF are the applications
developed under the Mozilla project (Mozilla 2005). Mozilla software applications use
various different pieces of structured data, such as bookmarks, file systems, documents,
and sitemaps. The creation, access, query, and manipulation code for these resources is
completely independent. While the code is completely independent, there is
considerable overlap in the data model used by all these different structures. Therefore,
Mozilla uses RDF to build a common data model shared by various applications, such
as viewers, editors, and query mechanisms.
5.4 RDF Schema
The RDF Schema (RDFS 2004) provides a type system for RDF. The RDFS is
technologically advanced compared to RDF since it provides a way of building an
object model from which the actual data is referenced and which tells us what things
really mean.
Briefly, the RDF Schema (RDFS) allows users to define resources with classes,
properties, and values. The concept of RDF class is similar to the concept of class in
object-oriented programming languages such as Java and C++. A class is a structure of
similar things and inheritance is allowed. This allows resources to be defined as
instances of classes, and subclasses of classes. For example, the RDF Schema allows
resources to be defined as instances of one or more classes. In addition, it allows classes
to be organized in a hierarchical fashion. For example the class First_Line_Manager
might be defined as a subclass of Manager which is a subclass of Staff, meaning that
any resource which is in class Staff is also implicitly in class First_Line_Manager as
well.
An RDFS property can be viewed as an attribute of a class. RDFS properties may
inherit from other properties, and domain and range constraints can be applied to focus
©2006 copyrights. All rights reserved. No part of this chapter may be reproduced, stored in a retrieval system or 14
transmitted in any form or by any means, without the prior written permission of the publisher. Do not redistribute
this material.
Cardoso, J. (Ed.) "Semantic Web Services: Theory, Tools and Applications", Idea Group. Hard cover:978-1-59904-
045-5, e-Book:978-1-59904-047-9, 2007.
their use. For example, a domain constraint is used to limit what class or classes a
specific property may have and a range constraint is used to limit its possible values.
With these extensions, RDFS comes closer to existing ontology languages. RDFS is
used to declare vocabularies, the sets of semantics property-types defined by a particular
community. As with RDF, the XML namespace mechanism serves to identify RDFS.
The following statements illustrate a very simple example of RDFS where classes and
inheritance are used.
 class
 subclass of
 class
The rdfs:Class is similar to the notion of a class in object-oriented programming