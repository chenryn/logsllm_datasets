### Figure 6: Semantic Web Layered Architecture (Berners-Lee, Hendler et al. 2001)

In the following sections, we will provide a brief overview of these layers. Although the concepts have been simplified, they offer a reasonable conceptual framework for understanding the various components of the Semantic Web.

**Copyright Notice:**
Â©2006 All rights reserved. No part of this chapter may be reproduced, stored in a retrieval system, or transmitted in any form or by any means without the prior written permission of the publisher. Do not redistribute this material.
- **Source:** Cardoso, J. (Ed.) "Semantic Web Services: Theory, Tools and Applications", Idea Group. Hard cover: 978-1-59904-045-5, e-Book: 978-1-59904-047-9, 2007.

### 5.1 URI and Unicode

A Universal Resource Identifier (URI) is a formatted string used to identify abstract or physical resources. URIs can be further classified as locators, names, or both. A Uniform Resource Locator (URL) is a subset of URI that identifies resources via their primary access mechanism. A Uniform Resource Name (URN) is a subset of URI that remains globally unique and persistent even if the resource ceases to exist or becomes unavailable.

**Examples:**
- The URL `http://dme.uma.pt/jcardoso/index.htm` identifies the location from which a web page can be retrieved.
- The URN `urn:isbn:3-540-24328-3` identifies a book using its ISBN.

Unicode provides a unique number for every character, independent of the underlying platform, program, or language. Before Unicode, various encoding systems existed, making data manipulation complex. Each computer needed to support multiple encodings, leading to potential conflicts. Examples of older encoding systems include ASCII and EBCDIC.

### 5.2 XML

XML is a standard for data interchange on the Web, allowing the structuring of data without conveying its meaning. It is a language for semi-structured data and is proposed as a solution for data integration problems due to its flexible coding and display capabilities, using metadata to describe the structure of data (e.g., DTD or XSD).

Unlike HTML, XML allows the creation of new markup tags, such as `<contact>`, which carry some semantics. However, from a computational perspective, a tag like `<contact>` is similar to an HTML tag. While XML is highly useful for syntactic interoperability and integration, it carries as much semantics as HTML. Nevertheless, XML solved many problems previously unsolvable with HTML, such as data exchange and integration.

A well-formed XML document creates a balanced tree of nested open and closed tags, each of which can include several attribute-value pairs. The following example shows an XML document identifying a 'Contact' resource:

```xml
<contact>
    <name>Jorge Cardoso</name>
    <affiliation>University of Madeira</affiliation>
    <email>PI:EMAIL</email>
    <phone>+351 291 705 156</phone>
</contact>
```

While XML has gained significant attention, it is important to recognize that it is primarily a way of standardizing data formats. From the perspective of semantic interoperability, XML has limitations. For instance, XML does not provide a way to recognize the semantics of a particular domain because it focuses on document structure and imposes no common interpretation of the data (Decker, Melnik et al. 2000). Additionally, XML has a weak data model, incapable of capturing semantics, relationships, or constraints. Although XML can be extended to incorporate rich metadata, it does not support automated interoperability without human involvement. Despite these limitations, XML is a foundational technology for the Semantic Web.

### 5.3 RDF

The World Wide Web Consortium (W3C) developed the Resource Description Framework (RDF) to standardize the definition and use of metadata. RDF uses XML and forms the base of the Semantic Web, with other languages built on top of it. RDF is a formal data model for machine-understandable metadata, providing standard descriptions of Web resources. By standardizing metadata elements, RDF facilitates data and system integration and interoperability.

RDF is a simple, general-purpose metadata language for representing information on the Web. It provides a model for describing and creating relationships between resources, such as people, songs, or web pages. RDF defines a resource as any object uniquely identifiable by a URI. Resources have properties, identified by property types, which have corresponding values. Property types express the relationships between values associated with resources. The basic structure of RDF uses triples in the form of subject, predicate, and object.

**Example:**
- Subject: `http://dme.uma.pt/jcardoso/`
- Predicate: `creator`
- Object: `Jorge Cardoso`

RDF has a limited set of syntactic constructs, with only triples allowed. Every RDF document is equivalent to an unordered set of triples. The example below describes the statement "Jorge Cardoso created the Jorge Cardoso Home Page" using an RDF triple:

```xml
<rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#"
         xmlns:dc="http://purl.org/dc/elements/1.1/">
    <rdf:Description rdf:about="http://dme.uma.pt/jcardoso/">
        <dc:creator>Jorge Cardoso</dc:creator>
    </rdf:Description>
</rdf:RDF>
```

The Dublin Core (DC) is a fifteen-element metadata set originally developed to improve resource discovery on the Web. DC elements are primarily intended to describe web-based documents. Examples of Dublin Core metadata include:
- Title: The title of the resource
- Subject: Simple keywords or terms from a list of subject headings
- Description: A description or abstract
- Creator: The person or organization primarily responsible for the intellectual content
- Publisher: The publisher
- Contributor: A secondary contributor to the intellectual content

The following example shows a more complete scenario using DC metadata:

```xml
<rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#"
         xmlns:dc="http://purl.org/dc/elements/1.1/">
    <rdf:Description rdf:about="http://dme.uma.pt/jcardoso/">
        <dc:title>Jorge Cardoso Web Page</dc:title>
        <dc:subject>Home Page</dc:subject>
        <dc:creator>Jorge Cardoso</dc:creator>
    </rdf:Description>
</rdf:RDF>
```

Real-world systems that use RDF include applications developed under the Mozilla project. Mozilla software applications use various structured data, such as bookmarks, file systems, documents, and sitemaps. RDF helps build a common data model shared by different applications, such as viewers, editors, and query mechanisms.

### 5.4 RDF Schema

RDF Schema (RDFS) provides a type system for RDF, offering a way to build an object model from which actual data is referenced. RDFS allows users to define resources with classes, properties, and values. The concept of RDF class is similar to classes in object-oriented programming languages like Java and C++. Classes can be organized hierarchically, and inheritance is supported.

An RDFS property can be viewed as an attribute of a class. Properties can inherit from other properties, and domain and range constraints can be applied to focus their use. For example, a domain constraint limits what class or classes a specific property can have, and a range constraint limits its possible values.

**Example:**
```xml
<rdfs:Class rdf:ID="Manager"/>
<rdfs:Class rdf:ID="First_Line_Manager">
    <rdfs:subClassOf rdf:resource="#Manager"/>
</rdfs:Class>
```

With these extensions, RDFS comes closer to existing ontology languages and is used to declare vocabularies, the sets of semantic property types defined by a particular community. The XML namespace mechanism identifies RDFS, similar to RDF.

**Example:**
```xml
<rdfs:Class rdf:ID="Person"/>
<rdfs:Class rdf:ID="Employee">
    <rdfs:subClassOf rdf:resource="#Person"/>
</rdfs:Class>
```

The `rdfs:Class` is similar to the notion of a class in object-oriented programming.