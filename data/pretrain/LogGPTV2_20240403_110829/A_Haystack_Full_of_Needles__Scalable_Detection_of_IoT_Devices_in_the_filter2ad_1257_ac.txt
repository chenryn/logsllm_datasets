5
Figure 7: IoT Tra(cid:129)c detection methodology overview.
A naive approach for identifying the backend infrastructure
would be to use the ground truth tra(cid:129)c to identify which domains,
and as a consequence, which service IPs are being contacted by each
device. However this is not su(cid:129)cient for the following reasons:
Limited relevance of some domains: Not all domains are es-
sential to support the services, or are useful for classi(cid:128)cation; for
example, some domains may be used for advertisements or generic
services, e.g., time.microsoft.com or wikipedia.org, see Sec-
tion 4.1.
Limited visibility of IP addresses: Since the ground truth data
is captured at a single subscriber line only and DNS to IP mapping
is rather dynamic, just looking at this tra(cid:129)c is not su(cid:129)cient, see
Section 4.2.1.
Usage of shared infrastructure: Not all IoT services are sup-
ported by a dedicated backend infrastructure. Some rely on shared
ones, such as CDNs. In the former case they can still have dedicated
IP addresses; in the la(cid:138)er cases they use shared IP addresses, see
Section 4.2.1.
Churn: DNS domain to IP address mappings are dynamic, see
Section 4.2.1.
Common programming APIs: Multiple IoT services may use
the same common programming API or may be used by di(cid:130)erent
manufacturers; as a result, they o(cid:137)en rely on the same infrastruc-
ture. (cid:140)is is the case for relatively generic IoT services such as
Alexa voice service. While this IoT service is available on ded-
icated devices, e.g., Amazon Echo, it can also be integrated into
third-party hardware, e.g., fridges and alarm clocks [13]. We cannot
easily distinguish these from network tra(cid:129)c observations.
Below we tackle these challenges one by one. (cid:140)e outcome is an
IoT dictionary that contains mappings for individual IoT services
to sets of domains, IP addresses, and ports. Based on IoT services,
we generate rules for IoT device detection. For an overview of the
resulting methodology, see Figure 7.
4.1 Classifying IoT Domains
(cid:140)e amount and frequency of network tra(cid:129)c that an IoT device
exchanges with its backend infrastructure varies from device to
device, depending on the complexity of its services, its implemen-
tation speci(cid:128)cs, and the usage of the device. (cid:140)is is highlighted in
Figure 8, where we show the average number of packets per device
and per domain (using a log y-scale) for 13 di(cid:130)erent devices (subset
of devices) in their idle mode. (cid:140)e (cid:128)rst observation is that most
devices are supported by their own set of domains and for many
IoT services, this is a small set containing less than 10 domains. We
refer to these as small domain sets as they correspond to laconic
devices. Other devices gossip and have sizable domain sets. Figure 8
Build a Hitlist of IoT-Domains, IPs & Port Numbers +  Detection Rules IoT DomainsDNSDB data  Censys DatasetSection 4.1Section 4.2.1Section 4.2.2Generic Domain?NoDedicated, Shared, or No RecordMatch criteria?NoRec.DedicatedYesRemove shared dom. Enough Primarydomains?Section 4.2.3Section 4.3Detection LevelGenerate  Detection RulesDaily Hitlist &Detection RulesYesFigure 9: Home-VP: ECDF of average # of packets/hour for all IoT-
Speci(cid:128)c domains, per device, (idle and active experiments).
for both the idle and the active experiments. First, we note that
almost all devices and domains , except for one device in its idle
mode, are exchanging at least 100 packets per hour, and this may
not su(cid:129)ce for detecting them in any given hour in the wild due to
sampling. However, during the active experiments, we see that
some domains are only used when the device is active or other
domains receive signi(cid:128)cantly more tra(cid:129)c, up to and exceeding 10K
packets, which may su(cid:129)ce for detection. (cid:140)ese la(cid:138)er domains may
be ideal candidates for detecting such devices in the wild.
4.2 Identifying Dedicated Infrastructures
Once we have a list of IoT-Speci(cid:128)c domains (FQDNs) with their
associated service IP addresses and port mappings from the ground
truth experiments, we need to understand whether they have a
shared or dedicated backend infrastructure. (cid:140)e reason is that, if
we want to identify IoT services and consequently IoT devices in
the wild by using network traces such as NetFlow, we can only
observe standard network level features such as src/dst IP and port
numbers without packet payload. (cid:140)erefore, if a service IP belongs
to a shared infrastructure such as a CDN or a generic web hosting
service, this service IP can serve many domains, and it is impossible
for us to exactly know which domain was actually contacted. To
this end, the purpose of this section is two-fold. First, to expand the
candidate service IPs beyond those directly observed in the ground
truth experiments (to mitigate that we are focusing on a single
subscriber line). Second, to classify domains into those that use
backend services hosted on dedicated infrastructure service IPs vs.
those that rely on shared infrastructure service IPs. We do this by
relying on DNSDB [16], Censys [9], and applying additional (cid:128)lters.
From IoT-Specific Domains to Service IPs: DNSDB. We use
IoT-Speci(cid:128)c domains to identify the backend infrastructure that
is hosting them. To this end, we leverage the technique in [17],
and use these domain names to identify all associated service IPs
on which these domains are hosted during the time period of our
experiments. We use both the ground truth experiments, and ex-
ternal DNS databases, including DNSDB [18]. We found that the
speci(cid:128)c IP addresses mapping to speci(cid:128)c domains can change o(cid:137)en.
However, DNSDB provides information for all domains served by
an IP address in a given time period and vice versa, hence it mit-
igates the issues caused by this churn. DNSDB also provides all
records, including CNAMEs that may have been returned in the
DNS response, for a given domain. (cid:140)us, we use DNSDB to check
if a service IP address is exclusively used for a speci(cid:128)c IoT service,
4.2.1
6
Figure 8: Home-VP: Circular bar plot of average # of packets/hour
per domain (log y-scale). (cid:135)e domains belong to 13 IoT devices and
separated into three groups: one for laconic and two for gossiping
devices (Echo Dot and Apple TV).
shows the domains of two example gossip devices (Apple TV in
gray and Echo Dot in orange) and several laconic devices (rest of
the colors).
Having a sizable domain set o(cid:137)en indicates the usage of a larger
infrastructure, which may not be dedicated to a speci(cid:128)c IoT ser-
vice. We (cid:128)nd that most of these domains are mapped via CNAMEs
to other domains. For the two gossiping examples considered in
Figure 8, the domains of Echo Dot are mostly mapped to its own
infrastructure. However, the ones of Apple TV are mainly mapped
to a CDN—in this case, Akamai—that o(cid:130)ers a variety of services.
Based on these observations from our ground truth data, we
classify the domains as follows:
IoT-Speci(cid:128)c domains. Grouped into (i) Primary domains: reg-
istered to an IoT device manufacturer or an IoT service operator;
and (ii) Support domains: that are not necessarily registered to IoT
device manufacturers or service operators, but o(cid:130)ering complemen-
tary services for IoT devices, i.e., samsung-*.whisk.com for Samsung
Fridges, here whisk.com is a service that provides food recipes and
images of food.
Generic domains. Domains registered to generic service providers
that are heavily used by non-IoT devices as well, e.g., net(cid:131)ix.com,
wikipedia.org, and public NTP servers.
We classify each domain name from our idle and active experi-
ments using pa(cid:138)ern matching, manual inspection, and by visiting
their websites and those of the device manufacturers. Since the
Generic domains cover non-IoT tra(cid:129)c, we do not further consider
them. Rather, we focus on the IoT-Speci(cid:128)c domains. As a result, we
classify 415 out of the 524 domains as Primary and 19 as Support
domains.
Next, we explore the volume of tra(cid:129)c that the IoT devices ex-
change with all domains. Figure 9 shows the ECDF of the average
number of packets per hour per domain for all IoT-Speci(cid:128)c domains
1101001kAvg # Packet/H(log10)amazon domain23amazon domain18amazon domain14amazon domain17amazon domain11amazon domain20amazon domain3amazon domain5amazon domain9amazon domain13amazon domain21amazon domain7amazon domain10amazon domain22amazon domain15amazon domain19amazon domain2amazon domain8amazon domain16amazon domain1amazon domain12amazon domain4amazon domain6apple domain7apple domain6apple domain3apple domain4apple domain8apple domain10apple domain9apple domain11apple domain1apple domain2apple domain5blink domain1blink domain2meross domain1netatmo domain1philips domain4philips domain1philips domain2philips domain3platform2 domain1platform1 domain2platform1 domain1smartthings domain1smartthings domain2smartthings domain3sousvide domain1tplink domain1xiaomi domain1xiaomi domain2yi camera domain3yi camera domain1yi camera domain2GossipingDevicesGossipingDevicesLaconicDevicesDeviceApple TVBlink HubEcho DotMerossDoor OpenerNetatmoWeatherStationPhilips HubSmarter BrewerSmartlife BulbSmartthings HubSous videTP−Link BulbXiaomi HubYi Cameralllllllllllllllllllllllllllllllllllllllllllll0.000.250.500.751.001101001k10kAvg # of packets/h per device and domain(log10)ECDFExperimentlActiveIdleor if it hosts additional domains. We say a service IP is exclusively
used if it only serves domains from a single “second-level” domain
(SLD) and its CNAMEs. However, we note that the CNAMEs may
not involve the same second-level domain. Let us consider an exam-
ple: the domain devA.com is mapped via a chain of CNAMEs such
as devA-VM.ec2compute.amazonaws.com to IP a.b.c.d. (cid:140)is IP
only reverse maps to devA-VM.ec2compute.amazonaws.com and
its associated CNAME devA.com. Since this is the only CNAME
associated with the IP, we may consider this IP a direct mapping
for the domain. Yet, at the same time, we (cid:128)nd support that public
IP addresses assigned to a cloud resource such as a virtual machine
in AWS EC2, that is occupied by a tenant, is not shared with other
tenants unless the current resource is released. (cid:140)is is a popular ser-
vice o(cid:130)ered by multiple platforms [19–21]. Let us consider a second
example: domain devB.com. It may use the Akamai CDN. (cid:140)us, the
domain devB.com is a CNAME for devB.com.akadns.net. (cid:140)is
domain then maps to IP a.b.c.d. However, in this case, many
other domains, e.g., anothersite.com.akadns.net, also map to
this IP. (cid:140)us, we may conclude that this domain is hosted on a
shared infrastructure.
Once we understand if an IP is exclusively used for a speci(cid:128)c IoT
service, we can also classify the domains as either using a dedicated
or shared infrastructure. For the former, all service IPs have to be
dedicated to this domain for all days, otherwise we presume that
the domain relies on a shared infrastructure.
Once we apply this methodology to all 434 domain names, we
(cid:128)nd that 217 are hosted on dedicated service IPs, while 202 are
relying on a shared backend infrastructure. For 15 of the domains
we did not have su(cid:129)cient information in DNSDB. We handle them
in the next step.
4.2.2
From IoT-Specific Domains to Service IPs: Censys. Among
the reasons that DNSDB may not su(cid:129)ce for mapping some domains
to service IPs is that (a) frequent remapping of domains to IPs or, (b)
missing data since the requests for the domains may not have been
recorded by DNSDB, which intercepts requests for a subset of the
DNS hierarchy. To overcome this limitation, we rely on the certi(cid:128)-
cate and banner datasets from Censys [9], to infer the ownership of
the domains and the corresponding IPs, as long as these are using
HTTPS. For example, we did not (cid:128)nd any record for the domain
c.devE.com in the DNSDB dataset. We then check if device E uses
HTTPS to communicate with this domain. (cid:140)is allows us to query
for all service IPs that potentially o(cid:130)er the same web certi(cid:128)cate as
the hosts in this domain. For a certi(cid:128)cate to be associated with a
domain, we require that the domain name and the Name (cid:128)eld entry
in the certi(cid:128)cate match at least the SLD or higher, i.e. the Name (cid:128)eld
of the certi(cid:128)cates matches the pa(cid:138)ern c.devE.com or *.devE.com
and that there is no other Subject Alternative Name (SAN) in the
certi(cid:128)cate. Next, we query the Censys dataset for all IPs with the
same certi(cid:128)cate and HTTPS banner checksum for the domain from
our ground truth dataset within the same period. (cid:140)is allows us
to identify data for 8 out of 15 of the domains which belong to 5
devices.
4.2.3 Removal of Shared IoT Backend Infrastructures. In the last
step of our methodology we (cid:128)lter out devices that use shared back-
end infrastructures. We (cid:128)nd that Google Home, Google Home Mini,
Apple TV, and Lefun camera, all have a shared backend infrastruc-
ture. For LG TV, we are le(cid:137) with only one out of 4 domains; for
Wemo Plug and Wink-hub, we could not identify su(cid:129)cient informa-
tion. Because of this, we have excluded these devices from further
consideration.
(cid:140)e result forms our daily list of dedicated IoT services, along
with their associated domains, service IPs and port combinations.
4.3 IoT Services to Device Detection Rules
Once we identi(cid:128)ed the set of IoT services that can be monitored,
we generate the rules for detecting IoT devices. Depending on the
set of IoT services contacted by the devices we can generate device
detection rules at three granularity levels: (i) Platform-level, (ii)
Manufacturer-level, and (iii) Product-level, from the most coarse-
grained to the most (cid:128)ne-grained, respectively. In this section, (cid:128)rst,
we show how we determine the detection level for each device.
(cid:140)en, we explain how we generate the detection rules for each IoT
device for the detection level that can be supported.
4.3.1 Determining IoT Detection Level.
Platform-level: Some manufacturers use o(cid:130)-the-shelf (cid:128)rmware,
or outsource their backend infrastructure to IoT platform solu-
tion companies such as Tuya [22], electricimp [23], AWS IoT Plat-
form [24]. (cid:140)ese IoT platforms can have several customers/manufacturers
that rely on their infrastructure. (cid:140)erefore, we may not be able to
distinguish between di(cid:130)erent manufacturers from their network
tra(cid:129)c.
Manufacturer-level: (cid:140)e majority of our studied IoT services
rely on dedicated backend infrastructures that are operated by the
manufacturers themselves. We also observe that many manufac-
turers rely on similar APIs and backend infrastructures to support
their di(cid:130)erent products and services. (cid:140)is makes distinguishing
individual IoT products from their network tra(cid:129)c more challenging.
Product-level: (cid:140)is is the most (cid:128)ne-grained detection level, where