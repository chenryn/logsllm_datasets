### Suggestion for Specification Change

#### Problem
In some scenarios, the members of a type may only be applicable under certain restrictions on the enclosing type's generic parameters (generic type constraints). For example, in RxJS:

```typescript
var xs: Observable<Observable<number>>;
xs.mergeAll();  // mergeAll is applicable here

var ys: Observable<number>;
ys.mergeAll();  // mergeAll is NOT applicable here
```

In the original Rx.NET implementation, the `Merge` method is implemented as an extension method on the `IObservable<IObservable<T>>` type. In RxJS, it is implemented as an instance method. The current TypeScript definition for RxJS uses an unsafe trick to define `mergeAll`:

```typescript
export interface Observable<T> {
  ...
  mergeAll(): Observable<T>;
  ...
}
```

However, this approach allows `mergeAll` to be called on any `Observable`, which can lead to runtime errors.

#### Possible Solutions

1. **Extension Methods**
   Similar to C# extension methods, but they may not be as useful in this context.

   ```typescript
   declare extensions {
     mergeAll(this: Observable<Observable<T>>, source: Observable<Observable<T>>): Observable<T>;
   }
   ```

   Extension methods could be a valuable feature in other contexts, as they change the call method from instance-like to static-like.

2. **Multiple Interface Definitions with Different Constraints**

   ```typescript
   interface A<T> { x(): void; }
   interface A<T extends B> { y(): void; }

   var a: A<number>;
   var b: A<B>;

   a.x(); b.x(); // ok
   b.y(); // ok
   a.y(); // error
   ```

3. **Member-level Constraints with Reference to Enclosing Type Arguments**

   ```typescript
   interface A<T> {
     x(): void;
     y(): void; // only applicable if T extends B
     z: number; // for any property
     // alternative syntax options:
     z: number;  // 1
     z: number where T extends B;  // 2
     y(): void where T extends B;
   }
   ```

   I suggest this option, as it provides a more flexible and precise way to apply constraints. The previous solutions can be seen as special cases of this one, where incompatible constraints are merged at the member level.

This approach ensures that the `mergeAll` method is only callable when the generic type parameter meets the required constraints, enhancing type safety and reducing potential runtime errors.