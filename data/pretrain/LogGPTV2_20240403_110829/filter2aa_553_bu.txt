也可以放在主调函数里面。例如，重写lesser.c（程序清单9.3）的开头部
分：
#include 
int main(void)
{
int imin(int, int); /* 声明imin()函数的原型*/
int evil1, evil2, lesser;
注意在这两种情况中，函数原型都声明在使用函数之前。
ANSI 
C标准库中，函数被分成多个系列，每一系列都有各自的头文
件。这些头文件中除了其他内容，还包含了本系列所有函数的声明。例如，
stdio.h 头文件包含了标准 I/O 库函数（如，printf()和scanf()）的声明。math.h
583
头文件包含了各种数学函数的声明。例如，下面的声明：
double sqrt(double);
告知编译器sqrt()函数有一个double类型的形参，而且返回double类型的
值。不要混淆函数的声明和定义。函数声明告知编译器函数的类型，而函数
定义则提供实际的代码。在程序中包含 math.h 头文件告知编译器：sqrt()返
回double类型，但是sqrt()函数的代码在另一个库函数的文件中。
584
9.2 ANSI C函数原型
在ANSI 
C标准之前，声明函数的方案有缺陷，因为只需要声明函数的
类型，不用声明任何参数。下面我们看一下使用旧式的函数声明会导致什么
问题。
下面是ANSI之前的函数声明，告知编译器imin()返回int类型的值：
int imin();
然而，以上函数声明并未给出imin()函数的参数个数和类型。因此，如
果调用imin()时使用的参数个数不对或类型不匹配，编译器根本不会察觉出
来。
9.2.1 问题所在
我们看看与imax()函数相关的一些示例，该函数与imin()函数关系密
切。程序清单9.4演示了一个程序，用过去声明函数的方式声明了imax()函
数，然后错误地使用该函数。
程序清单9.4 misuse.c程序
/* misuse.c -- 错误地使用函数 */
#include 
int imax();   /* 旧式函数声明 */
int main(void)
{
printf("The maximum of %d and %d is %d.\n",3, 5, imax(3));
printf("The maximum of %d and %d is %d.\n",3, 5, 
585
imax(3.0, 5.0));
return 0;
}
int imax(n, m)
int n, m;
{
return (n > m ? n : m);
}
第1次调用printf()时省略了imax()的一个参数，第2次调用printf()时用两
个浮点参数而不是整数参数。尽管有些问题，但程序可以编译和运行。
下面是使用Xcode 4.6运行的输出示例：
The maximum of 3 and 5 is 1606416656.
The maximum of 3 and 5 is 3886.
使用gcc运行该程序，输出的值是1359379472和1359377160。这两个编
译器都运行正常，之所以输出错误的结果，是因为它们运行的程序没有使用
函数原型。
到底是哪里出了问题？由于不同系统的内部机制不同，所以出现问题的
具体情况也不同。下面介绍的是使用P C和VA X的情况。主调函数把它的参
数储存在被称为栈（stack）的临时存储区，被调函数从栈中读取这些参数。
对于该例，这两个过程并未相互协调。主调函数根据函数调用中的实际参数
决定传递的类型，而被调函数根据它的形式参数读取值。因此，函数调用
imax(3)把一个整数放在栈中。当imax()函数开始执行时，它从栈中读取两个
586
整数。而实际上栈中只存放了一个待读取的整数，所以读取的第 2 个值是当
时恰好在栈中的其他值。
第2次使用imax()函数时，它传递的是float类型的值。这次把两个double
类型的值放在栈中（回忆一下，当float类型被作为参数传递时会被升级为
double类型）。在我们的系统中，两个double类型的值就是两个64位的值，
所以128位的数据被放在栈中。当imax()从栈中读取两个int类型的值时，它
从栈中读取前64位。在我们的系统中，每个int类型的变量占用32位。这些数
据对应两个整数，其中较大的是3886。
9.2.2 ANSI的解决方案
针对参数不匹配的问题，ANSI 
C标准要求在函数声明时还要声明变量
的类型，即使用函数原型（function 
prototype）来声明函数的返回类型、参
数的数量和每个参数的类型。未标明 imax()函数有两个 int 类型的参数，可
以使用下面两种函数原型来声明：
int imax(int, int);
int imax(int a, int b);
第1种形式使用以逗号分隔的类型列表，第2种形式在类型后面添加了变
量名。注意，这里的变量名是假名，不必与函数定义的形式参数名一致。
有了这些信息，编译器可以检查函数调用是否与函数原型匹配。参数的
数量是否正确？参数的类型是否匹配？以 imax()为例，如果两个参数都是数
字，但是类型不匹配，编译器会把实际参数的类型转换成形式参数的类型。
例如，imax(3.0, 5.0)会被转换成imax(3, 5)。我们用函数原型替换程序清单9.4
中的函数声明，如程序清单9.5所示。
程序清单9.5 proto.c程序
/* proto.c -- 使用函数原型 */
587
#include 
int imax(int, int);    /* 函数原型 */
int main(void)
{
printf("The maximum of %d and %d is %d.\n",
3, 5, imax(3));
printf("The maximum of %d and %d is %d.\n",
3, 5, imax(3.0, 5.0));
return 0;
}
int imax(int n, int m)
{
return (n > m ? n : m);
}
编译程序清单9.5时，我们的编译器给出调用的imax()函数参数太少的错
误消息。
如果是类型不匹配会怎样？为探索这个问题，我们用imax(3, 
5)替换
imax(3)，然后再次编译该程序。这次编译器没有给出任何错误信息，程序
的输出如下：
The maximum of 3 and 5 is 5.
588
The maximum of 3 and 5 is 5.
如上文所述，第2次调用中的3.0和5.0被转换成3和5，以便函数能正确地
处理输入。
虽然没有错误消息，但是我们的编译器还是给出了警告：double转换成
int可能会导致丢失数据。例如，下面的函数调用：
imax(3.9, 5.4)
相当于:
imax(3, 5)
错误和警告的区别是：错误导致无法编译，而警告仍然允许编译。一些
编译器在进行类似的类型转换时不会通知用户，因为C标准中对此未作要
求。不过，许多编译器都允许用户选择警告级别来控制编译器在描述警告时
的详细程度。
9.2.3 无参数和未指定参数
假设有下面的函数原型：
void print_name();
一个支持ANSI 
C的编译器会假定用户没有用函数原型来声明函数，它
将不会检查参数。为了表明函数确实没有参数，应该在圆括号中使用void关
键字：
void print_name(void);
支持ANSI C的编译器解释为print_name()不接受任何参数。然后在调用
该函数时，编译器会检查以确保没有使用参数。
一些函数接受（如，printf()和scanf()）许多参数。例如对于printf()，第1
589
个参数是字符串，但是其余参数的类型和数量都不固定。对于这种情况，
ANSI C允许使用部分原型。例如，对于printf()可以使用下面的原型：
int printf(const char *, ...);
这种原型表明，第1个参数是一个字符串（第11章中将详细介绍），可
能还有其他未指定的参数。
C库通过stdarg.h头文件提供了一个定义这类（形参数量不固定的）函数
的标准方法。第16章中详细介绍相关内容。
9.2.4 函数原型的优点
函数原型是C语言的一个强有力的工具，它让编译器捕获在使用函数时
可能出现的许多错误或疏漏。如果编译器没有发现这些问题，就很难觉察出
来。是否必须使用函数原型？不一定。你也可以使用旧式的函数声明（即不
用声明任何形参），但是这样做的弊大于利。
有一种方法可以省略函数原型却保留函数原型的优点。首先要明白，之
所以使用函数原型，是为了让编译器在第1次执行到该函数之前就知道如何
使用它。因此，把整个函数定义放在第1次调用该函数之前，也有相同的效
果。此时，函数定义也相当于函数原型。对于较小的函数，这种用法很普
遍：
// 下面这行代码既是函数定义，也是函数原型
int imax(int a, int b) { return a > b ? a : b; }
int main()
{
int x, z;
...
590
z = imax(x, 50);
...
}
591
9.3 递归
C允许函数调用它自己，这种调用过程称为递归（recursion）。递归有
时难以捉摸，有时却很方便实用。结束递归是使用递归的难点，因为如果递
归代码中没有终止递归的条件测试部分，一个调用自己的函数会无限递归。
可以使用循环的地方通常都可以使用递归。有时用循环解决问题比较
好，但有时用递归更好。递归方案更简洁，但效率却没有循环高。
9.3.1 演示递归
我们通过一个程序示例，来学习什么是递归。程序清单 9.6 中的 main()
函数调用 
up_and_down()函数，这次调用称为“第1级递归”。然后
up_and_down()调用自己，这次调用称为“第2级递归”。接着第2级递归调用
第3级递归，以此类推。该程序示例共有4级递归。为了进一步深入研究递归
时发生了什么，程序不仅显示了变量n的值，还显示了储存n的内存地址
&n（。本章稍后会详细讨论&运算符，printf()函数使用%p转换说明打印地
址，如果你的系统不支持这种格式，请使用%u或%lu代替%p）。
程序清单9.6 recur.c程序
/* recur.c -- 递归演示 */
#include 
void up_and_down(int);
int main(void)
{
up_and_down(1);
return 0;
592
}
void up_and_down(int n)
{
printf("Level %d: n location %p\n", n, &n); // #1
if (n < 4)
up_and_down(n + 1);
printf("LEVEL %d: n location %p\n", n, &n); // #2
}
下面是在我们系统中的输出：
Level 1: n location 0x0012ff48
Level 2: n location 0x0012ff3c
Level 3: n location 0x0012ff30
Level 4: n location 0x0012ff24
LEVEL 4: n location 0x0012ff24
LEVEL 3: n location 0x0012ff30
LEVEL 2: n location 0x0012ff3c
LEVEL 1: n location 0x0012ff48
我们来仔细分析程序中的递归是如何工作的。首先，main()调用了带参
数1的up_and_down()函数，执行结果是up_and_down()中的形式参数n的值是
1，所以打印语句#1打印Level 
1。然后，由于n小于4，up_and_down()（第1
593
级）调用实际参数为n + 1（或2）的up_and_down()（第2级）。于是第2级调
用中的n的值是2，打印语句#1打印Level 2。与此类似，下面两次调用打印的
分别是Level 3和Level 4。
当执行到第4级时，n的值是4，所以if测试条件为假。up_and_down()函
数不再调用自己。第4级调用接着执行打印语句#2，即打印LEVEL 4，因为n
的值是4。此时，第4级调用结束，控制被传回它的主调函数（即第3级调
用）。在第3级调用中，执行的最后一条语句是调用if语句中的第4级调用。
被调函数（第4级调用）把控制返回在这个位置，因此，第3级调用继续执行
后面的代码，打印语句#2打印LEVEL 
3。然后第3级调用结束，控制被传回
第2级调用，接着打印LEVEL 2，以此类推。
注意，每级递归的变量 n 都属于本级递归私有。这从程序输出的地址值
可以看出（当然，不同的系统表示的地址格式不同，这里关键要注意，
Level 1和LEVEL 1的地址相同，Level 2和LEVEL 2的地址相同，等等）。
如果觉得不好理解，可以假设有一条函数调用链——fun1()调用
fun2()、fun2()调用 
fun3()、fun3()调用fun4()。当 
fun4()结束时，控制传回
fun3()；当fun3()结束时，控制传回 
fun2()；当fun2()结束时，控制传回
fun1()。递归的情况与此类似，只不过fun1()、fun2()、fun3()和fun4()都是相同
的函数。
9.3.2 递归的基本原理
初次接触递归会觉得较难理解。为了帮助读者理解递归过程，下面以程
序清单9.6为例讲解几个要点。
第1，每级函数调用都有自己的变量。也就是说，第1级的n和第2级的n
不同，所以程序创建了4个单独的变量，每个变量名都是n，但是它们的值各
不相同。当程序最终返回 up_and_down()的第1 级调用时，最初的n仍然是它
的初值1（见图9.4）。
594
图9.4 递归中的变量
第2，每次函数调用都会返回一次。当函数执行完毕后，控制权将被传
回上一级递归。程序必须按顺序逐级返回递归，从某级up_and_down()返回
上一级的up_and_down()，不能跳级回到main()中的第1级调用。
第3，递归函数中位于递归调用之前的语句，均按被调函数的顺序执
行。例如，程序清单9.6中的打印语句#1位于递归调用之前，它按照递归的
顺序：第1级、第2级、第3级和第4级，被执行了4次。
第4，递归函数中位于递归调用之后的语句，均按被调函数相反的顺序
执行。例如，打印语句#2位于递归调用之后，其执行的顺序是第4级、第3
级、第2级、第1级。递归调用的这种特性在解决涉及相反顺序的编程问题时
很有用。稍后将介绍一个这样的例子。
第5，虽然每级递归都有自己的变量，但是并没有拷贝函数的代码。程