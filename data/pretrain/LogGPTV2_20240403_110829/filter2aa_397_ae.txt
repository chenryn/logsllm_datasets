事实上，如果没有对跨站请求伪造攻击进行特意防范的话，你的应用很有可能是
有漏洞的。 
请看下面一个简单的应用，它允许用户购买钢笔或铅笔。界面上包含下面的
表单：  
Item: 
pen 
pencil 
Quantity:  
一个攻击者会首先使用你的应用以收集一些基本信息。例如，攻击者首先访
问表单并发现两个表单元素 item 及 quantity，他也同时知道了 item 的值会是铅笔
或是钢笔。 
下面的 buy.php 程序处理表单的提交信息： 
Thanks for your purchase.'; 
} 
else 
{ 
echo 'There was a problem with your order.'; 
《PHP 安全基础详解》        www.528163.cn 提供 
} 
} 
?> 
攻击者会首先使用这个表单来观察它的动作。例如，在购买了一支铅笔后，
攻击者知道了在购买成功后会出现感谢信息。注意到这一点后，攻击者会尝试通
过访问下面的 URL 以用 GET 方式提交数据是否能达到同样的目的： 
http://store.example.org/buy.php?item=pen&quantity=1 
如果能成功的话，攻击者现在就取得了当合法用户访问时，可以引发购买的
URL 格式。在这种情况下，进行跨站请求伪造攻击非常容易，因为攻击者只要
引发受害者访问该 URL 即可。 
虽然有多种发起跨站请求伪造攻击的方式，但是使用嵌入资源如图片的方式
是最普遍的。为了理解这个攻击的过程，首先有必要了解浏览器请求这些资源的
方式。 
当你访问 http://www.google.com (图 2-1)，你的浏览器首先会请求这个 URL
所标识的资源。你可以通过查看该页的源文件（HTML）的方式来看到该请求的
返回内容。在浏览器解析了返回内容后发现了 Google 的标志图片。这个图片是
以 HTML 的 img 标签表示的，该标签的 src 属性表示了图片的 URL。浏览器于
是再发出对该图片的请求，以上这两次请求间的不同点只是 URL 的不同。 
图 2-1. Google 的首页 
A CSRF attack can use an img tag to leverage this behavior. Consider visiting a 
web site with the following image identified in the source: 
根据上面的原理，跨站请求伪造攻击可以通过 img 标签来实现。考虑一下如
果访问包括下面的源代码的网页会发生什么情况： 
由于 buy.php 脚本使用$_REQUEST 而不是$_POST，这样每一个只要是登录
在 store.example.org 商店上的用户就会通过请求该 URL 购买 50 支铅笔。 
跨站请求伪造攻击的存在是不推荐使用$_REQUEST 的原因之一。 
完整的攻击过程见图 2-2。 
图 2-2. 通过图片引发的跨站请求伪造攻击 
当请求一个图片时，某些浏览器会改变请求头部的 Accept 值以给图片类型
以一个更高的优先权。需要采用保护措施以防止这种情况的发生。 
《PHP 安全基础详解》        www.528163.cn 提供 
你需要用几个步骤来减轻跨站请求伪造攻击的风险。一般的步骤包括使用
POST 方式而不是使用 GET 来提交表单，在处理表单提交时使用$_POST 而不是
$_REQUEST，同时需要在重要操作时进行验证（越是方便，风险越大，你需要
求得方便与风险之间的平衡）。 
任何需要进行操作的表单都要使用 POST 方式。在 RFC 2616(HTTP/1.1 传送
协议，译注)的 9.1.1 小节中有一段描述： 
“特别需要指出的是，习惯上 GET 与 HEAD 方式不应该用于引发一个操作，
而只是用于获取信息。这些方式应该被认为是‘安全’的。客户浏览器应以特殊
的方式，如 POST，PUT 或 DELETE 方式来使用户意识到正在请求进行的操作
可能是不安全的。” 
最重要的一点是你要做到能强制使用你自己的表单进行提交。尽管用户提交
的数据看起来象是你表单的提交结果，但如果用户并不是在最近调用的表单，这
就比较可疑了。请看下面对前例应用更改后的代码： 
" /> 
Item: 
pen 
pencil 
Quantity:  
通过这些简单的修改，一个跨站请求伪造攻击就必须包括一个合法的验证码
以完全模仿表单提交。由于验证码的保存在用户的 session 中的，攻击者必须对
每个受害者使用不同的验证码。这样就有效的限制了对一个用户的任何攻击，它
要求攻击者获取另外一个用户的合法验证码。使用你自己的验证码来伪造另外一
个用户的请求是无效的。 
《PHP 安全基础详解》        www.528163.cn 提供 
该验证码可以简单地通过一个条件表达式来进行检查： 
你还能对验证码加上一个有效时间限制，如 5 分钟： 
通过在你的表单中包括验证码，你事实上已经消除了跨站请求伪造攻击的风
险。可以在任何需要执行操作的任何表单中使用这个流程。 
尽管我使用 img 标签描述了攻击方法，但跨站请求伪造攻击只是一个总称，
它是指所有攻击者通过伪造他人的 HTTP 请求进行攻击的类型。已知的攻击方法
同时包括对 GET 和 POST 的攻击，所以不要认为只要严格地只使用 POST 方式
就行了。  
2.6. 欺骗表单提交
欺骗表单提交
欺骗表单提交
欺骗表单提交 
制造一个欺骗表单几乎与假造一个 URL 一样简单。毕竟，表单的提交只是
浏览器发出的一个 HTTP 请求而已。请求的部分格式取决于表单，某些请求中的
数据来自于用户。 
大多数表单用一个相对 URL 地址来指定 action 属性： 
当表单提交时，浏览器会请求 action 中指定的 URL，同时它使用当前的 URL
地址来定位相对 URL。例如，如果之前的表单是对
http://example.org/path/to/form.php 请求的回应所产生的，则在用户提交表单后会
请求 URL 地址 http://example.org/path/to/process.php。 
知道了这一点，很容易就能想到你可以指定一个绝对地址，这样表单就可以
放在任何地方了： 
《PHP 安全基础详解》        www.528163.cn 提供 
这个表单可以放在任何地方，并且使用这个表单产生的提交与原始表单产生
的提交是相同的。意识到这一点，攻击者可以通过查看页面源文件并保存在他的
服务器上，同时将 action 更改为绝对 URL 地址。通过使用这些手段，攻击者可
以任意更改表单，如取消最大字段长度限制，取消本地验证代码，更改隐藏字段
的值，或者出于更加灵活的目的而改写元素类型。这些更改帮助攻击者向服务器
提交任何数据，同时由于这个过程非常简便易行，攻击者无需是一个专家即可做
到。 
欺骗表单攻击是不能防止的，尽管这看起来有点奇怪，但事实上如此。不过
这你不需要担心。一旦你正确地过滤了输入，用户就必须要遵守你的规则，这与
他们如何提交无关。 
如果你试验这个技巧时，你可能会注意到大多数浏览器会在 HTTP 头部包括
一个 Referer 信息以标识前一个页面的地址。在本例中，Referer 的值是表单的
URL 地址。请不要被它所迷惑而用它来区分你的表单提交还是欺骗表单提交。
在下一节的演示中，可以看到 HTTP 头部的也是非常容易假造的，而使用 Referer
来判定的方式又是众所周知的。 
2.7. HTTP 请求欺骗
请求欺骗
请求欺骗
请求欺骗 
一个比欺骗表单更高级和复杂的攻击方式是 HTTP 请求欺骗。这给了攻击者
完全的控制权与灵活性，它进一步证明了不能盲目信任用户提交的任何数据。 
为了演示这是如何进行的，请看下面位于 http://example.org/form.php的表单： 
Please select a color: 
Red 
Green 
Blue 
如果用户选择了 Red 并点击了 Select 按钮后，浏览器会发出下面的 HTTP
请求： 
POST /process.php HTTP/1.1 
Host: example.org 
User-Agent: Mozilla/5.0 (X11; U; Linux i686) 
Referer: http://example.org/form.php 
《PHP 安全基础详解》        www.528163.cn 提供 
Content-Type: application/x-www-form-urlencoded 
Content-Length: 9 
color=red 
 . 
看到大多数浏览器会包含一个来源的 URL 值，你可能会试图使用
$_SERVER['HTTP_REFERER']变量去防止欺骗。确实，这可以用于对付利用标
准浏览器发起的攻击，但攻击者是不会被这个小麻烦给挡住的。通过编辑 HTTP
请求的原始信息，攻击者可以完全控制 HTTP 头部的值，GET 和 POST 的数据，
以及所有在 HTTP 请求的内容。 
攻击者如何更改原始的 HTTP 请求？过程非常简单。通过在大多数系统平台
上都提供的 Telnet 实用程序，你就可以通过连接网站服务器的侦听端口（典型的
端口为 80）来与 Web 服务器直接通信。下面就是使用这个技巧请求
http://example.org/页面的例子： 
$ telnet example.org 80 
Trying 192.0.34.166... 
Connected to example.org (192.0.34.166). 