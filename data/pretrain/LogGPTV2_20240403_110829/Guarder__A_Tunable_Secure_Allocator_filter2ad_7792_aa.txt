title:Guarder: A Tunable Secure Allocator
author:Sam Silvestro and
Hongyu Liu and
Tianyi Liu and
Zhiqiang Lin and
Tongping Liu
Guarder: A Tunable Secure Allocator
Sam Silvestro, Hongyu Liu, and Tianyi Liu, University of Texas at San Antonio;  
Zhiqiang Lin, Ohio State University; Tongping Liu, University of Texas at San Antonio
https://www.usenix.org/conference/usenixsecurity18/presentation/silvestro
This paper is included in the Proceedings of the 
27th USENIX Security Symposium.
August 15–17, 2018 • Baltimore, MD, USA
ISBN 978-1-939133-04-5
Open access to the Proceedings of the 27th USENIX Security Symposium is sponsored by USENIX.GUARDER: A Tunable Secure Allocator
Sam Silvestro∗ Hongyu Liu∗
Tianyi Liu∗
∗University of Texas at San Antonio
†The Ohio State University
Zhiqiang Lin†
Tongping Liu∗
Abstract
Due to the on-going threats posed by heap vulnerabili-
ties, we design a novel secure allocator — GUARDER—
to defeat these vulnerabilities. GUARDER is different
from existing secure allocators in the following aspects.
Existing allocators either have low/zero randomization
entropy, or cannot provide stable security guarantees,
where their entropies vary by object size classes, exe-
cution phases, inputs, or applications. GUARDER en-
sures the desired randomization entropy, and provides an
unprecedented level of security guarantee by combining
all security features of existing allocators, with overhead
that is comparable to performance-oriented allocators.
Compared to the default Linux allocator, GUARDER’s
performance overhead is less than 3% on average. This
overhead is similar to the previous state-of-the-art, Free-
Guard, but comes with a much stronger security guaran-
tee. GUARDER also provides an additional feature that
allows users to customize security based on their perfor-
mance budget, without changing code or even recompil-
ing. The combination of high security and low overhead
makes GUARDER a practical solution for the deployed
environment.
1
Introduction
A range of heap vulnerabilities, such as heap over-
reads, heap over-writes, use-after-frees,
invalid-frees,
and double-frees, still plague applications written in
C/C++ languages. They not only cause unexpected pro-
gram behavior, but also lead to security breaches, includ-
ing information leakage and control ﬂow hijacking [34].
For instance, the Heartbleed bug, a buffer over-read prob-
lem in the OpenSSL cryptography library, results in the
leakage of sensitive private data [1]. Another example
of a recent buffer overﬂow is the WannaCry ransomware
attack, which takes advantage of a vulnerability inside
Server Message Block [17], affecting a series of Win-
Vulnerability
Heap Overﬂow
Heap Over-read
Invalid-free
Double-free
Use-after-free
Occurrences (#)
673
125
35
33
264
Table 1: Heap vulnerabilities reported in 2017.
dows versions [12]. Heap vulnerabilities still widely ex-
ist in different types of in-production software, where Ta-
ble 1 shows those reported in the past year at NVD [29].
Secure memory allocators typically serve as the ﬁrst
line of defense against heap vulnerabilities. How-
ever, existing secure allocators, including the OpenBSD
allocator
to as
“OpenBSD”), DieHarder [30], Cling [2], and Free-
Guard [33], possess their own strong deﬁciencies.
(which we will simply refer
[28]
First, these allocators provide either low randomiza-
tion entropy, or cannot support a stable randomization
guarantee, which indicates they may not effectively de-
fend against heap overﬂows and use-after-free attacks.
Cling does not provide any randomization, while Free-
Guard only provides two bits of entropy. Although
OpenBSD and DieHarder supply higher entropy levels,
their entropies are not stable, and vary across different
size classes, execution phases, inputs, and applications.
Typically, their entropies are inversely proportional to an
object’s size class. For instance, OpenBSD has the high-
est entropy for 16 byte objects, with as many as 10 bits,
while the entropy for objects with 2048 bytes is at most 3
bits. Therefore, attackers may exploit this fact to breach
security at the weakest point.
Second, existing allocators cannot easily change their
security guarantees, which prevents users from choos-
ing protection based on their budget for performance or
memory consumption. For instance, their randomization
entropy is primarily limited by bag size (e.g. DieHarder
and OpenBSD), or the number of free lists (e.g. Free-
Guard). For instance, simply incrementing FreeGuard’s
USENIX Association
27th USENIX Security Symposium    117
entropy by a single bit may signiﬁcantly increase mem-
ory consumption, due to doubling its number of free lists.
Third, existing secure allocators have other problems
that may affect their adoption. Both OpenBSD and Die-
Harder impose large performance overhead, with 31%
and 74% on average. Also, they may slow down some
applications by 4× and 9× respectively, as shown in
Figure 3. This prohibitively high overhead may prevent
their adoption in performance-sensitive scenarios. On
the other hand, although FreeGuard is very efﬁcient, its
low entropy and deterministic memory layout make it an
easier target to attack.
This paper presents GUARDER, a novel allocator that
provides an unprecedented security guarantee, but with-
out compromising its performance. GUARDER supports
all necessary security features of existing secure alloca-
tors, and offers the highest level of randomization en-
tropy stably. In addition, GUARDER is also the ﬁrst se-
cure allocator to allow users to specify their desired se-
curity guarantee, which is inspired by tiered Internet ser-
vices [8].
Existing allocators provide unstable randomization
entropies because they randomly select an object from
those that remain available within a bag (e.g. OpenBSD),
or among multiple bags belonging to the same size class
(e.g. DieHarder). However, the number of available ob-
jects is reduced with every allocation, unless immedi-
ately offset by a deallocation, thus decreasing entropy.
Also, their entropies greatly depend on the bag size,
which limits the total number of available objects inside.
GUARDER proposes an allocation buffer to track avail-
able objects for each size class, then randomly chooses
one object from the buffer upon each allocation. The al-
location buffer will be dynamically ﬁlled using both new
and recently-freed objects on-demand, avoiding this de-
crease of entropy. The allocation buffer will simultane-
ously satisfy the following properties: (1) The buffer size
can be easily adjusted, where a larger size will provide a
higher randomization entropy; (2) The buffer size is de-
ﬁned independently from any size class in order to pro-
vide stable entropy for objects of different size classes;
(3) It is very efﬁcient to locate an item inside the buffer,
even when given an index randomly; (4) It is more efﬁ-
cient to search for an available object by separating avail-
able objects from the large amount of in-use ones.
However, although it is possible to place deallocated
objects into the allocation buffer directly, it can be very
expensive to search for an empty slot in which to do so.
In addition, it is difﬁcult to handle a freed object when
Instead, GUARDER pro-
the allocation buffer is full.
poses a separate deallocation buffer to track freed ob-
jects: freed objects will be recorded into the deallocation
buffer sequentially, which will be more efﬁcient due to
avoiding the need for searching; these freed objects will
Figure 1: Comparing to performance vs. security of
existing work
be moved to the allocation buffer upon each allocation,
and in a batched mode when the allocation buffer is re-
duced to half-full. More implementation details are de-
scribed in Section 4.
The combination of allocation and deallocation
buffers also seamlessly integrates with other customiza-
tion mechanisms,
such as guard pages and over-
provisioning. When ﬁlling the allocation buffer with new
heap objects, GUARDER maintains a bump pointer that
always refers to the next new object at the top of the
heap. It will skip all objects tied to randomly-selected
guard pages (and set them as non-accessible), and ran-
domly skip objects in proportion to the user-deﬁned
over-provisioning factor. This mechanism ensures these
skipped objects will never participate in future alloca-
tions and deallocations. In contrast, DieHarder is unable
to place guard pages within the interior of a bag, since
every object has a chance of being allocated in the fu-
ture. For this same reason, DieHarder may incur a larger
memory footprint or additional cache misses.
GUARDER designs multiple mechanisms to further
improve its performance. First, it designs a novel heap
layout to quickly locate the metadata of each freed ob-
ject in order to detect double and invalid frees. Second, it
minimizes lock acquisitions to further improve scalabil-
ity and performance. Third, it manages pointers to avail-
able objects directly within the allocation buffer, remov-
ing a level of indirection compared to existing bitmap-
based (e.g. DieHarder or OpenBSD) or free-list-based
(e.g. FreeGuard) approaches. GUARDER also overcomes
the obvious shortcoming of FreeGuard’s deterministic
layout by constructing per-thread heaps randomly. Com-
pared to existing work, as shown in Figure 1, GUARDER
achieves the highest security, while also imposing small
performance overhead.
Overall, GUARDER makes the following contributions.
Supporting a stable and tunable security guarantee.
It is the ﬁrst allocator to support customizable security
guarantees on randomization entropy, guard pages, and
118    27th USENIX Security Symposium
USENIX Association
Performance Security FreeGuard OpenBSD DieHarder Linux GUARDER over-provisioning, which allows users to choose the ap-
propriate security level based on their performance or
memory budget. GUARDER implements a combination
of allocation and deallocation buffers to support its cus-
tomizable security.
Supporting the highest degree of security, but with
reasonable overhead. GUARDER implements all neces-
sary security features of existing secure allocators, and
provides around 9.89 bits of entropy, while only impos-
ing less than 3% performance overhead and 27% mem-
ory overhead when compared to the default Linux allo-
cator. GUARDER achieves similar performance overhead
to the state-of-the-art (FreeGuard), with less memory
overhead, and while substantially improving randomiza-
tion by providing over 200 times more objects (per each
thread and size class) to randomly choose between. For
example, where FreeGuard selects one out of ∼ 4 ob-
jects, GUARDER chooses from over 948 objects.
Substantial evaluation of GUARDER and other secure
allocators. The paper performs substantial evaluation
of the performance and effectiveness of GUARDER and
other existing allocators. Investigations were conducted
through direct examination of source code and by per-
forming extensive experiments. GUARDER is the ﬁrst
work to experimentally evaluate the randomization en-
tropy and search trials of existing allocators.
2 Background
2.1 Heap Vulnerabilities
Heap vulnerabilities that can be defended or reduced by
GUARDER include buffer overﬂows, use-after-frees, and
double/invalid frees. These memory vulnerabilities can
result in information leakage, denial-of-service, illegiti-
mate privilege elevation, or execution of arbitrary code.
A buffer overﬂow occurs when a program reads or
writes outside the boundaries of an allocated object,
which further includes buffer underﬂows. Use-after-free
occurs when an application accesses memory that has
previously been deallocated, and has possibly been re-
utilized for other live objects [37, 10, 6]. A double-free
problem takes place when an object is freed more than
once. Finally, an invalid-free occurs when an invalid
pointer is passed to heap deallocation functions.
2.2 Existing Secure Heap Allocators
There are multiple existing secure allocators, including
OpenBSD [28], Cling [2], DieHarder [30], and Free-
Guard [33]. Among these, Cling is an exception that
does not support randomization, the most important fea-
ture of secure allocators. Cling only mitigates use-after-
free vulnerabilities through constraining memory reuses
to objects of the same type.
Based on our understanding, OpenBSD, DieHarder,
and FreeGuard share many common design elements.
(1) All employ the BIBOP style — “Big Bag of
Pages” [14]. For BIBOP-style allocators, one or mul-
tiple continuous pages are treated as a “bag” that holds
objects of the same size class. The metadata of each heap
object, such as its size and availability information, is
typically stored in a separate area. Thus, BIBOP-style
allocators improve security by avoiding many metadata-
based attacks. (2) They all distinguish between the man-
agement of “small” and “large” objects, but with differ-
ent size thresholds. (3) These secure allocators manage
small objects using power-of-two size classes. Further,
they do not perform object splitting or coalescing, which
is different from general purpose allocators, such as the
default Linux allocator.
These allocators also have their own unique designs,
which are discussed brieﬂy as follows.
OpenBSD. OpenBSD utilizes a bitmap to maintain the
status of heap objects, with each bag having a size of
4 kilobytes that is directly allocated from the kernel via
an mmap system call. For small objects, one out of four
lists will be chosen randomly upon each allocation. If no
available objects exist in the ﬁrst bag of the selected list,
a new bag is then allocated and added to the current list.
Otherwise, an index will be computed randomly, which
will serve as the starting point to search for an available
object. It will ﬁrst check the remaining bits of the current
bitmap word. If no available objects exist, it will move
forward until ﬁnding one with available objects. Then, it
performs a bit-by-bit search to identify the location of the
ﬁrst available object. For large objects, deﬁned as those
larger than 2 kilobytes, OpenBSD maintains a cache of
at most 64 pages in order to reduce mmap system calls.
DieHarder. In DieHarder, the bag size is initially set to
64 kilobytes, and will be doubled each time a new bag
is required. Similarly, a bitmap is used to manage the
status of each small object, deﬁned as less than 64 kilo-
bytes, and the same bags may be used to satisfy requests
from multiple different threads. DieHarder allocates ob-
jects randomly from among the available objects of all
bags serving a given size class. If the chosen object is
unavailable, it will then compute another random place-
ment. To our understanding, this design may hurt perfor-
mance (compared to OpenBSD), as it may unnecessarily
load bitmap words from different cache lines.
DieHarder utilizes the over-provisional mechanism to
help tolerate buffer overﬂows. A portion of objects will
never be allocated; therefore, a bug overﬂowing into a
non-used object will not harm the application.
USENIX Association
27th USENIX Security Symposium    119
Large objects will be allocated directly via mmap, with
entropy supplied by the underlying OS’s ASLR mecha-
nism. Upon deallocation, any accesses to these objects
can thus cause a segmentation fault. That is, DieHarder
can strongly defend against use-after-free vulnerabilities
in large objects.
FreeGuard. FreeGuard is the previous state-of-the-art
secure allocator, but contains some compromise to its se-
curity guarantee.
It adopts a deterministic layout and utilizes shadow
memory to directly map objects to their metadata. While
this design avoids search-related overhead on dealloca-
tions, it will also sacriﬁce security, as the mapping be-
tween objects and metadata is computable.
FreeGuard implements multiple security mechanisms,
such as guard pages and canaries. However, it provides
only 2.01 bits of entropy by randomly choosing one-out-
of-four free lists (and also rarely from new objects) on
allocations.
2.2.1 Problems of Existing Secure Allocators
The problems of these secure allocators are summarized
as follows.
Security Guarantee. The following problems exist
in these secure allocators.
(1) These allocators either
have very limited randomization entropy (such as 2.01
bits for FreeGuard), or have unstable entropies that
can vary greatly across different size classes, execution
phases, executions, and applications. For OpenBSD and
DieHarder, their entropies are inversely proportional to
size class, and may change during execution or when ex-
ecuted using different inputs. For example, DieHarder’s
entropy for 1 kilobyte objects falls between 4.8 bits (e.g.
bodytrack) and 13.3 bits (e.g. ﬂuidanimate). (2) Their se-
curity guarantee is determined by their design, which is
difﬁcult to change for different requirements. OpenBSD
and DieHarder’s entropies are determined by their bag
size, while FreeGuard’s entropy is determined by its four
free lists. (3) FreeGuard’s metadata is unprotected, and
the relationship between heap objects and metadata is
deterministic. Thus, if an attacker were able to modify
them, he may take control of the allocator and issue suc-
cessful attacks afterwards. (4) OpenBSD has very lim-
ited countermeasures for protecting large objects (those
with sizes larger than 2 kilobytes). Since its cache only
maintains a maximum of 64 pages, its entropy should be
less than 6 bits if an object can be allocated from the
cache.
Performance and Scalability Issues. OpenBSD and
DieHarder also have signiﬁcant performance and scal-
ability issues: (1) Their runtime overhead is too heavy
for performance-sensitive applications, with 31% for
OpenBSD and 74% for DieHarder (see Section 5.1).
Based on our evaluation (as shown in Figure 3),
OpenBSD can slow down a program up to 4× (e.g.,
swaptions), and DieHarder may reduce performance by
more than 9× (e.g., freqmine). (2) They have a signiﬁ-
cant scalability problem, due to utilizing the same heap
to satisfy requests from multiple threads [5].
3 Overview
This section discusses the threat model and basic idea of
GUARDER.
3.1 Threat Model
Our threat model is similar to many existing works [9,
24]. First, we assume the underlying OS (e.g., Linux) is
trusted. However, the ASLR mechanism is not necessar-
ily required to be valid, since GUARDER manages mem-
ory allocations using a separate randomization mecha-
nism, making its layout difﬁcult to predict even if ASLR
in the underlying OS is broken. Second, we also assume