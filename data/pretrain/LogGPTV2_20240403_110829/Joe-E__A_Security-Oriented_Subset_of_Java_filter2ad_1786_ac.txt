can be used to read, write, or delete the named ﬁle. Ab-
sent explicit access control by the Java security manager or
the operating system, this allows any Java code full con-
trol over the ﬁlesystem. In Joe-E, we wish to ensure that
code can only have access to a ﬁle if a capability for the ﬁle
(or a superdirectory) is within that code’s dynamic scope.
Consequently, we must not allow the aforementioned File
constructor in Joe-E’s global scope.
We deﬁne a subset of the Java libraries that includes only
those constructors, methods, and ﬁelds that are compatible
with the principle that all privileges must be granted via a
capability. We call this activity taming, because it turns an
unruly class library into a capability-secure subset. The Joe-
E veriﬁer allows Joe-E programs to mention only classes,
constructors, methods, and ﬁelds in this tamed subset. If
the source code mentions anything outside of this subset,
the Joe-E veriﬁer ﬂags this as an error.
Taming helps eliminate ambient authority, because it en-
sures library methods that provide ambient authority are not
accessible to Joe-E programs. We also use taming to expose
only that subset of the Java library that provides capabil-
ity discipline. Intuitively, we’d expect that a reference to a
File object would provide access to the ﬁle that the object
represents (or, in case it represents a directory, access to the
directory and all ﬁles/subdirectories within that subtree of
the ﬁlesystem hierarchy), and nothing more. Unfortunately,
the getParentFile() method on File violates this ex-
pectation: it can be used to walk up the directory hierarchy
to obtain a capability for the root directory, so access to any
one File would grant access to the entire ﬁlesystem. This
prevents ﬁne-grained control over delegation of ﬁle capabil-
ities, so we exclude methods, such as getParentFile(),
that violate capability discipline.
In some cases, due to the design of the Java libraries,
there are methods with important functionality that are not
safe to expose. For instance, consider the File(File dir,
String child) constructor. This constructor gives a way
to access a ﬁle with a speciﬁed name within a speciﬁed di-
rectory. This pattern of obtaining a speciﬁed subﬁle is a
capability-compatible method for attenuating existing au-
thority, but Java happens to specify this constructor to have
additional behavior that is not compatible with our security
model: if the dir argument is null, the constructor treats
the child argument as an absolute rather than relative path.
This means that new File(null, path) can be used to
access any ﬁle on the ﬁlesystem, so this constructor must
not be exposed to Joe-E code. Joe-E programmers still need
some way to traverse the directory hierarchy, and unfortu-
nately there is no other constructor in the Java library that
provides this important functionality. While we can’t al-
low Joe-E code to call the unsafe constructor directly, we
provide a wrapper method in the Joe-E library with the de-
sired functionality. The wrapper checks at runtime that the
dir argument is non-null before invoking the original con-
structor2. In general, our strategy is to tame away all unsafe
methods from the Java libraries, then add wrappers to the
Joe-E library if important functionality has been lost.
Taming a library is unfortunately a time-consuming and
difﬁcult task, and a place where a mistake could violate
soundness of our security goals. The security review of
the DarpaBrowser, which included a review of the taming
database provided by the E language, found that a num-
ber of methods violating capability discipline had been in-
advertently allowed [22]. While we have attempted to be
more conservative when taming Joe-E code, checking each
method for safety before enabling it and erring on the side
of caution when unsure, it is possible that we also enabled
some method that we should not have. We consider the dif-
ﬁcult and critical nature of this process to be a substantial
weakness in our approach, and an area in which there is
substantial room for improvement in future work. In partic-
ular, tools to validate or safely automate taming decisions
would be very helpful. (We anticipate that a relatively small
fraction of classes in a typical Java classpath implementa-
tion are valid Joe-E in their current form, but those that are
would be safe to permit.)
4.2.2 Mutable state
In addition to being able to observe or affect external state
outside the JVM, ambient authority to modify program state
can also be problematic. Untrusted extensions could corrupt
critical internal data structures if the global scope provides
the ability to do so. For the purposes of security audits, such
exposure means that every line of code in the program must
be examined to ensure that security properties on globally
accessible state are maintained.
In Java, this risk arises with ﬁelds declared static,
since these ﬁelds are not associated with an object instance
and thus access is not governed by a capability. For this
reason, Joe-E requires all static state to be transitively im-
mutable. In particular, all static ﬁelds declared in Joe-E
code must be of a type that is statically known not to pro-
vide access to any mutable objects: the object itself and all
objects it transitively points to must be immutable.
To facilitate this goal, we provide a marker interface,
2Portions of the Joe-E library are written in unrestricted Java rather than
Joe-E and thus can call arbitrary Java methods. This gives us the ability to
write such wrappers.
org.joe e.Immutable, to identify classes claimed to be
transitively immutable. The Joe-E veriﬁer checks that any
class that is a subtype of Immutable satisﬁes the following
rule: all instance ﬁelds must be final and their declared
type must be either a primitive type or a reference type that
also implements Immutable. All other classes are assumed
to be potentially mutable.
We make no attempt to infer immutability types. Joe-E’s
philosophy is to require programmers to explicitly declare
the properties of their code. The Joe-E veriﬁer is respon-
sible solely for verifying these properties, and performs no
inference. This design decision is intended to make the be-
havior of the Joe-E veriﬁer more intuitive and predictable
for programmers.
Some classes from the Java library, like String, are
immutable but we cannot rewrite them to implement the
Immutable interface, because we do not modify the Java
libraries. The veriﬁer treats these classes as if they imple-
ment the interface.
4.3 Exceptions and Errors
Exceptions introduce a number of complications for an
object-capability language. They provide a potentially un-
expected means of transferring control and references be-
tween objects. In particular, objects reachable from the ex-
ception itself are implicitly passed up the stack from where
the exception is thrown to where the exception is caught. If
the exception contains a capability, this can lead to propaga-
tion of privileges that a developer might not expect, which
might introduce unexpected security vulnerabilities.
To see how this can cause unpleasant surprises, suppose
Alice calls Bob. Bob has some special capability that she
lacks, and Bob wants to avoid leaking this to her. At some
point, Bob might need to invoke Chuck to perform some op-
eration, passing this capability to Chuck. If (unbeknownst
to Bob) Chuck can throw an exception that Bob doesn’t
catch, this exception might propagate to Alice. If this ex-
ception contains Bob’s precious capability, this might cause
the capability to leak to Alice, against Bob’s wishes and de-
spite Chuck’s good intentions. See Fig. 6 for an example.
The problem is that it is hard to tell, just by looking at
the code of Bob, that Bob’s private capability can leak to
the caller of m(). This is a barrier to local reasoning about
the ﬂow of capabilities. To avoid these kinds of problems,
Joe-E requires all exception types to be immutable.3 This
prevents storing capabilities in exceptions, precluding at-
tacks like the one described above.
An important guarantee provided by Joe-E is that no
code is able to execute once an error is thrown. This is
3The Throwable class provides a little-used facility to rewrite the stack
trace in an exception, preventing exceptions from being truly immutable.
This facility is disabled in Joe-E via the taming mechanism.
class E extends RuntimeException {
public Object o;
public E(Object o) { this.o = o; }
}
class Bob {
// cap was intended to be closely held
private Capability cap;
void m() {
new Chuck().f(cap);
}
}
class Chuck {
void f(Capability cap) {
... do some work ...
throw new E(cap);
}
}
class Alice {
void attack() {
Bob bob = ...;
try {
bob.m();
} catch (E e) {
Capability stolen = (Capability) e.o;
doSomethingEvil(stolen);
}
}
}
Figure 6. There is a security risk, if exceptions
can contain capabilities.
necessary for two reasons. First, the behavior of the JVM
after a VirtualMachineError is technically undeﬁned [9,
§6.3]. Second, continuing to execute after an error has been
thrown can have hard-to-predict consequences. For exam-
ple, an object’s invariants can be violated if an error (such
as running out of memory) is encountered during execution
right when the object is in a temporarily inconsistent state.
In many cases, these errors can be intentionally triggered
by the invoking software component, for example by allo-
cating a lot of memory or recursing deeply to use up stack
space before invoking the object under attack.
If a mali-
cious caller could catch such an error, the caller would be
well-positioned to exploit the violated invariant. Preventing
Joe-E code from executing after any error is thrown prevents
such attacks. Without such a guarantee, it would be unrea-
sonably difﬁcult to build secure abstractions and maintain
object invariants in the face of attack.
We prohibit Joe-E code from including any catch
block that could catch an error: for the syntactic construct
catch (T e) { ... }, we check that the type T is not
Throwable, Error, or any subtype of Error.
In addition, we prohibit finally clauses, as code in a
finally clause can execute after an error is thrown. The
finally clause could exploit the inconsistent state directly,
or it could throw its own exception that masks the pending
InputStream in = ...
try {
// use the stream
} finally {
in.close();
}
InputStream in = ...
Exception e = null;
try {
// use the stream
} catch (Exception e2) {
e = e2;
}
in.close();
if (e != null) { throw e; }
InputStream in = ...
try {
// use the stream
} catch (Exception e) {
try { in.close(); }
catch (Exception e2) {}
throw e;
}
in.close();
Figure 7. Transformation to avoid the use of the finally keyword. On the left is Java code that
uses finally. The middle shows a transformed version with the same semantics that can be used
in Joe-E. The right shows an alternative, with different semantics, that we have found useful in our
experience.
error, effectively catching and suppressing the error. Tech-
nically, the lack of finally clauses does not limit expres-
sivity, as one can explicitly catch Exception to ensure that
an action takes place whenever any non-error throwable dis-
rupts normal control ﬂow. See the middle of Fig. 7 for an
example4. In our experience writing Joe-E code for the Wa-
terken server, the prohibition on finally clauses was not
a serious problem, and in retrospect the replacement code
used in Waterken (shown on the right side of Fig. 7) is
arguably better anyway, as it avoids masking the original
exception in case the finally clause throws its own ex-
ception. The Joe-E speciﬁcation [10, §4.8] contains further
discussion and analysis of these workarounds.
from them. A substantial advantage of object-capability
languages over basic capability systems is the ability to
attenuate authorities via encapsulated reference monitors,
which allow only partial access to the ultimate capability.
In practice, programmers can incrementally reﬁne the crude
bounds obtained through naive reachability analysis by tak-
ing into account the behavior of classes along this path. We
have found that, in well-designed systems, this style of rea-
soning is effective at enabling code reviewers to focus their
attention on a small fraction of the code at a time. We made
use of it during a security review of Waterken when check-
ing the capabilities the infrastructure makes available to ap-
plication code.
5 Programming Patterns
5.2 Leveraging Static Typing
To facilitate our goal of “design for review”, Joe-E was
designed speciﬁcally to enable several powerful patterns of
reasoning about security.
5.1 Reachability and Object Graph analysis
The basic rule for reasoning in capability systems is that
a capability can only be accessed from dynamic scopes to
which it was passed.
In order to bound the possible risk
posed by bugs or malicious behavior in any given part of
the program, we can consider the graph of objects reachable
from the scope at that program point. This can be deter-
mined by constructing a graph with a node for each object
in the program, and an edge for each ﬁeld pointer. The au-
thority of a point of execution is bounded by the subset of
the graph reachable from the variables in scope at the time.
The graph generated by this technique is very conser-
vative, as it ignores the behavior of classes on the path
from the variables in scope to the capabilities reachable
4Elaborations on this idiom can handle more complex use cases, e.g.,
where the original code also contains one or more catch blocks, and when
the original exception signature must be maintained. This idiom does not
require duplicating code.
Type safety, as provided by Java and other statically
type-safe languages, can also be of use in reasoning about
programs and the distribution of authorities to parts of a pro-
gram.
Because the capabilities granted to a method are speci-
ﬁed by its arguments (including any associated instance or
enclosing object), the signature of a method serves as a se-
curity policy. Since the method can be invoked only with
capabilities that satisfy its method signature, it can subse-
quently obtain access only to capabilities reachable from
these arguments, or new objects it can create through public
constructors and static methods. Hence, the set of methods
exposed by an interface or class can serve as a complete se-
curity policy for the objects that implement it, provided that
other components of the system are veriﬁed to interact with
the object solely through this interface. The image decoding
example in Fig. 2 is an example of this type of reasoning.
When analyzing code of a class to verify it meets its se-
curity goals, it is necessary not only to examine the textual
code of the class itself, but also to understand the behavior
of any external methods that it invokes. This often requires
identifying what classes those method invocations might re-
solve to. Static method calls are easy: static methods can-
not be overridden, so it each static method maps directly to
a speciﬁc implementation. The static method’s documenta-
tion can be consulted and its source code can be examined.
In comparison, instance methods are more difﬁcult, as they
can be overridden. There are two basic approaches to jus-
tify trust placed in instance methods: based on the object’s
provenance, or based on its type.
1. Provenance. In the ﬁrst approach, we justify relying
upon the behavior of methods of an external object
based on the external object’s provenance or origin.
For example, an object that the code constructs itself
is known to have behavior consistent with its known
concrete type. Provenance-based reasoning can also
arise from transitive trust relationships. For example,
consider an object O that calls a method on object P
that it trusts to return an object Q with speciﬁed behav-
ior. The provenance of Q then makes it safe for O to
invoke its methods regardless of its type.
2. Type. If we know the declared type of the external ob-
ject, then in some cases this typing information makes
it possible to rely upon the behavior of that object.
The simplest example of using trusted types to ensure
desired behavior is calling an instance method on an
object belonging to a ﬁnal class. Like static methods,
it is in this case possible to map the method called to
a single implementation that can be reviewed. Regard-
less of the origin of the object, the code being executed
is known to come from the declared class. For exam-
ple, because the String class is ﬁnal, code that uses
strings can rely on String objects to fulﬁll their spec-
iﬁed contracts; it does not need to defend against some
maliciously-deﬁned object that impersonates a String
but misbehaves in a devious way to violate security or
privacy.
Instance methods from non-ﬁnal classes are trickier.
In general, it is not possible to guarantee behavioral
properties of methods belonging to such a class C, as
one could be dealing with an arbitrary subclass which
may fail to meet the documented semantics of the orig-
inal declarer of the method. In order to avoid this risk,
it is necessary to prevent arbitrary subclassing of C.
One way to achieve this in Java is to deﬁne C and its
subtypes to have only package-scope constructors, but
no public constructors. To allow instantiation by code
outside the package, these classes can provide public