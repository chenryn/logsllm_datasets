𝑞[𝑎,𝑏] is associated with an interval [𝑎, 𝑏] for 1 ≤ 𝑎 ≤ 𝑏 ≤ 𝑁 such
that 𝑞[𝑎,𝑏](𝑐) = 1 iff 𝑐 ∈ [𝑎, 𝑏] for all 𝑐 ∈ X. The equivalent SQL
query is:
SELECT * FROM table WHERE attribute BETWEEN a AND b;
Point queries Here X is arbitrary and a query predicate 𝑞𝑎 is
associated with an element 𝑎 ∈ X such that 𝑞𝑎(𝑏) = 1 iff 𝑎 = 𝑏.
In an ordered domain, point queries are degenerate range queries.
The equivalent SQL query is:
SELECT * FROM table WHERE attribute = a;
𝑛 , SK𝑛)} and let 𝑛1 =𝑛
3.3 Measuring Efficiency
We define two basic efficiency measures for a CDP-ODB.
Storage efficiency is defined as the sum of the bit-lengths of the
records in a database relative to the bit-length of a corresponding
encrypted database. Specifically, we say that an outsourced database
system has storage efficiency of (𝑎1, 𝑎2) if the following holds. Fix
𝑖=1|𝑟𝑖|.
any D = {(𝑟1, 𝑟 ID1 , SK1), . . . , (𝑟𝑛, 𝑟 ID
Let Sstate be an output of S on a run of Πsetup where U has input
D, and let 𝑛2 = |Sstate|. Then 𝑛2 ≤ 𝑎1𝑛1 + 𝑎2.
Communication efficiency is defined as the sum of the lengths
of the records in bits whose search keys satisfy the query relative
to the actual number of bits sent back as the result of a query.
Specifically, we say that an outsourced database system has com-
munication efficiency of (𝑎1, 𝑎2) if the following holds. Fix any 𝑞
and DS output by Πsetup, let U and S execute Πquery where U has
inputs 𝑞 , and output 𝑅, and S has input DS. Let 𝑚1 be the amount
of data in bits transferred between U and S during the execution of
Πquery, and let 𝑚2 = |𝑅|. Then 𝑚2 ≤ 𝑎1𝑚1 + 𝑎2.
Note that 𝑎1 ≥ 1 and 𝑎2 ≥ 0 for both measures. We say that
an outsourced database system is optimally storage efficient (resp.,
optimally communication efficient) if it has storage (resp., commu-
nication) efficiency of (1, 0).
4 EPSOLUTE
In this section we present a construction, Epsolute, that satisfies
the security definition in Section 3, detailing algorithms for both
range and point query types. We also provide efficiency guarantees
for approximate and pure DP versions of Epsolute.
4.1 General construction
Let Q be a collection of queries. We are interested in building
a differentially private outsourced database system for Q, called
Epsolute. Our solution will use these building blocks.
• A (𝜂1, 𝜂2)-ORAM protocol ORAM(·).
• An (𝜖, 𝛿, 𝛼, 𝛽)-differentially private sanitizer (A, B) for Q and
negligible 𝛽, which satisfies the non-negative noise guaran-
tee from Remark 2.4.
• A pair of algorithms CreateIndex and Lookup. CreateIn-
dex consumes D and produces an index data structure I
that maps a search key SK to a list of record IDs 𝑟 ID corre-
sponding to the given search key. Lookup consumes I and
𝑞 and returns a list 𝑇 = 𝑟 ID1 , . . . , 𝑟 ID|𝑇 | of record IDs matching
the supplied query.
Our protocol Π = (Πsetup, Πquery) of Epsolute works as shown
in Algorithm 1. Hereafter, we reference lines in Algorithm 1. See
Fig. 1 for a schematic description of the protocol.
Setup protocol Πsetup. Let U’s input be a database D = {(𝑟1,
𝑛 , SK𝑛)} (line 2). U creates an index I mapping
𝑟 ID1 , SK1), . . . , (𝑟𝑛, 𝑟 ID
Session 7C: Database and Privacy CCS ’21, November 15–19, 2021, Virtual Event, Republic of Korea2266Algorithm 1 Epsolute protocol. ORAM (·) denotes an execution of ORAM protocol (Section 2.3), where U plays the role of the client. ORAM
protocol client and server states are implicit. 𝑆 \ 𝑇 represents a set of valid record IDs 𝑆 that are not in the true result set 𝑇 .
Πsetup
1 : User U
Input: D
2 :
3 : I ← CreateIndex (D)
4 : y = (w, 𝑟 ID
5 :
Πquery
1 : User U
2 :
3 : 𝑇 ← Lookup (I, 𝑞)
Server S
Input: DS
𝑐 ← B (DS, 𝑞)
,⊥)(cid:12)(cid:12)𝑖∈𝑇
, 𝑟𝑖)(cid:12)(cid:12)𝑛
Server S
Input: ∅
Input: 𝑞, I
ORAM (y)
𝑖=1
𝑞
𝑐
𝑖
𝑖
4 : ytrue = (r, 𝑟 ID
5 : ynoise = (r, 𝑆 \ 𝑇 ,⊥) |𝑐−|𝑇 |
6 : 𝑅
7 : Output: 𝑅
1
ORAM (ytrue∥ynoise)
Output: ∅
6 : DS ← A (SK1, . . . , SK𝑁 )
7 : Output: I
DS
Output: DS
search keys to record IDs corresponding to these keys (line 3). U
sends over the records to S by executing the ORAM protocol on
the specified sequence (lines 4 to 5). U generates a DP structure
DS over the search keys using sanitizer A, and sends DS over to
S (line 6). The output of U is I and of S is DS; final ORAM states
of S and U are implicit, including encryption key 𝐾 (line 7).
Query protocol Πquery. U starts with a query 𝑞 and index I,
S starts with a DP structure DS. One can think of these inputs
as outputs of Πsetup (line 2). U immediately sends the query to S,
which uses the sanitizer B to compute the total number of requests
𝑐, while U uses index I to derive the true indices of the records
the query 𝑞 targets (line 3). U receives 𝑐 from S and prepares two
ORAM sequences: ytrue for real records retrieval, and ynoise to pad
the number of requests to 𝑐 to perturb the communication volume.
ynoise includes valid non-repeating record IDs that are not part of
the true result set 𝑇 (lines 4 to 5). U fetches the records, both real
and fake, from S using the ORAM protocol (line 6). The output of U
is the filtered set of records requested by the query 𝑞; final ORAM
states of S and U are implicit (line 7).
The protocols for point and range queries only differ in sanitizer
implementations, see Sections 4.5 and 4.6. Note above that in any
execution of Πquery we have 𝑐 ≥ 𝑞(D) with overwhelming proba-
bility 1− 𝛽 (by using sanitizers satisfying Remark 2.4), and thus the
protocol is well-defined and its accuracy is 1− 𝛽. Also note that the
DP parameter 𝛿 is lower-bounded by 𝛽 because sampling negative
noise, however improbable, violates privacy, and therefore the final
construction is (𝜖, 𝛽)-DP.
Figure 1: Epsolute construction
Theorem 4.1. Epsolute is (𝛽 · 𝑚)-wrong and (𝜖, 𝛿)-CDP-ODB
4.2 Security
where the negligible term is negl(𝜆) = 2 · 𝜂2.
Proof. We consider a sequence of views
View1 → View2 → View3 → View4 .
View1 is ViewΠ (D, 𝑞1, . . . , 𝑞𝑚). View2 is produced only from
DS ← A (SK1, . . . , SK𝑁). Namely, compute 𝑐𝑖 ← A (DS, 𝑞𝑖) for
all 𝑖 and run ORAM simulator on𝑖 𝑐𝑖. By ORAM security,
View3 is produced similarly but DS ← A(cid:16)
Pr [A(View1)] − Pr [A(View2)] ≤ 𝜂2 .
(cid:17) instead.
Note that the 𝑐𝑖 are simply post-processing on DS via B so
1, . . . , SK′
SK′
𝑁
Pr [A(View2)] = exp(𝜖) · Pr [A(View3)] + 𝛿 .
View4 = ViewΠ (D′, 𝑞1, . . . , 𝑞𝑚). It follows by ORAM security
Pr [A(View3)] − Pr [A(View4)] ≤ 𝜂2 .
Putting this all together completes the proof.
□
4.3 Efficiency
For an ORAM with communication efficiency (𝑎1, 𝑎2) and an (𝛼, 𝛽)-
differentially private sanitizer, the Epsolute communication effi-
ciency is (𝑎1, 𝑎2 · 𝛼). The efficiency metrics demonstrate how the
total storage or communication volume (the number of stored or
transferred bits) changes additively and multiplicatively as the func-
tions of data size 𝑛 and domain 𝑁 . We therefore have the following
corollaries for the efficiency of the system in the cases of approxi-
mate and pure differential privacy.
(cid:16)O(log 𝑛), O(cid:16)2log∗ 𝑁 log 𝑛(cid:17)(cid:17)
Corollary 4.2. Epsolute is an outsourced database system with
storage efficiency (O(1), 0). Depending on the query type, assume it
offers the following communication efficiency.
Range queries
Point queries (O(log 𝑛), O(log 𝑛))
Then, there is a negligible 𝛿 such that Epsolute satisfies (𝜖, 𝛿)-differ-
ential privacy for some 𝜖.2
2Note that the existence of 𝜖 in this setting implies that the probability of an adversary
breaking the DP guarantees is bounded by it.
ServerUserUserORAMServerStorageSearchkeyRecordIDSalary$40KIDs56,46,89Salary$50KIDs85,38,63......RecordindexQuery:“Salaries$40K–$50K"ORAMreadrequestsClientDPhisotgram(pointqueries)DPtree(rangequeries)noisenoiseSession 7C: Database and Privacy CCS ’21, November 15–19, 2021, Virtual Event, Republic of Korea2267Proof. By using ORAM, we store only the original data once
and hence, we get optimal storage efficiency.
The communication efficiency depends on the upper bound of
the error for each sanitizer when 𝛿 > 0, as described in Section 2.2
and Remark 2.4. The most efficient ORAM protocol to date has
O(log 𝑛) communication overhead (see Section 2.3).
□
Corollary 4.3. Epsolute is an outsourced database system with
storage efficiency (O(1), 0). Depending on the query type, assume it
offers the following communication efficiency.
Range queries (O(log 𝑛), O(log 𝑁 log 𝑛))
Point queries (O(log 𝑛), O(log 𝑁 log 𝑛))
Then, Epsolute satisfies 𝜖-differential privacy for some 𝜖.
Proof. Similarly, we derive the proof by considering the use of
ORAM and the upper bound of the error for each sanitizer when
𝛿 = 0 in Section 2.2.
□
4.4 Extending to multiple attributes
We will now describe how Epsolute supports multiple indexed
attributes and what the privacy and performance implications are.
The naïve way is to simply duplicate the entire stack of states of
U and S, and during the query use the states whose attribute the
query targets. However, Epsolute design allows to keep the most
expensive part of the state — the ORAM state — shared for all
attributes and both types of queries. Specifically, the index I and
DP structure DS are generated per attribute and query type, while
U and S ORAM states are generated once. This design is practical
since DS is tiny and index I is relatively small compared to ORAM
states, see Section 6.
We note that in case the indices grow large in number, it is
practical to outsource them to the adversarial server using ORAM
and download only the ones needed for each query. In terms of
privacy, the solution is equivalent to operating different Epsolute
instances because ORAM hides the values of records and access
patterns entirely. Due to Theorem 2.5 for non-disjoint datasets, the
total privacy budget of the multi-attribute system will be the sum
of individual budgets for each attribute / index.
Next, we choose two DP sanitizers for our system, for point and
for range queries, and calculate the 𝛼 values to make them output
positive values with high probability, consistent with Remark 2.4.
4.5 Epsolute for point queries
For point queries, we use the LPA method as the sanitizer to ensure
pure differential privacy. Specifically, for every histogram bin, we
draw noise from the Laplace distribution with mean 𝛼𝑝 and scale
𝜆 = 1/𝜖. To satisfy Remark 2.4, we have to set 𝛼𝑝 such that if values
number of bins 𝑁 , they are all positive with high probability 1 − 𝛽,
for negligible 𝛽.
are drawn from Laplace(cid:0)𝛼𝑝, 1/𝜖(cid:1) at least as many times as the
We can compute the exact minimum required value of 𝛼𝑝 in
order to ensure drawing positive values with high probability by
using the CDF of the Laplace distribution. Specifically, 𝛼𝑝 should be
equal to the minimum value that satisfies the following inequality.
(cid:18)
2𝑒−𝛼𝑝 ·𝜖(cid:19) 𝑁 ≤ 1 − 𝛽
1 − 1
which is equivalent to
𝛼𝑝 =
ln(cid:16)2 − 2 𝑁√︁1 − 𝛽(cid:17)
𝜖
−
4.6 Epsolute for range queries
For range queries, we implement the aggregate tree method as the
sanitizer. Specifically, we build a complete 𝑘-ary tree on the domain,
for a given 𝑘. A leaf node holds the number of records falling into
each bin plus some noise. A parent node holds sum of the leaf values
in the range covered by this node, plus noise. Every time a query
is issued, we find the minimum number of nodes that cover the
range, and determine the required number of returned records by
summing these node values. Then, we ask the server to retrieve
the records in the range, plus to retrieve multiple random records
so that the total number of retrieved records matches the required
number of returned records.
The noise per node is drawn from the Laplace distribution with
mean 𝛼ℎ and scale 𝜆 =
. Consistent with Remark 2.4, we
determine the mean value 𝛼ℎ in order to avoid drawing negative
values with high probability. We have to set 𝛼ℎ such that if values
are drawn from Laplace(cid:16)𝛼ℎ,
(cid:17) at least as many times as