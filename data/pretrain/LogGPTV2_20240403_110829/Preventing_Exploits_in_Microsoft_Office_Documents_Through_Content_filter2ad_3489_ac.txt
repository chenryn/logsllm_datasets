100 %
40 %
100 %
4 %
File Fragmentation
File Fragmentation
File Fragmentation
File Encoding
Memory Fragmentation
File Validation
All-
163
217
75.1 %
-
and benign decoy document is employed. Due to raw access to the document
ﬁle, all of these exploits were defeated by ﬁle level DCFR.
CVE-2011-0611 is actually a vulnerability in Adobe software products, includ-
ing Flash player, but it is most often observed inside of Oﬃce documents. This
exploit triggers a type confusion error through a malformed Flash ﬁle embed-
ded in the Oﬃce document. We were able to observe successful exploitation in
both .doc and .xls ﬁles. Like the other exploits embedded in OLE based ﬁle for-
mats, all of the exploits are defeated by ﬁle level DCFR because the malicious
executable and decoy document are extracted from the raw document ﬁle.
It is interesting to observe that this exploit in Adobe products was utilized
so heavily in Oﬃce ﬁles. It is likely that part of the reason this exploit was
embedded in Oﬃce documents was to leverage the social engineering of email
based attacks.
CVE-2012-0158 is caused by malformed ActiveX controls that corrupt sys-
tem state. While originally reported in RTF documents, our VirusTotal sourced
malware contained a large number of 2012-0158 exploits in the OLE container
as well. We observed successful exploitation in both .doc and .xls ﬁles, which
was defeated by ﬁle level document fragmentation.
We also observed 2012-0158 in OOXML based ﬁles. These .docx based 2012-
0158 were much less common than the .doc version, making this set the smallest
in our evaluation. We observed both .pptx slideshows and .xlsx spreadsheet ﬁles
containing viable exploits.
This vulnerability exists in the MSCOMCTL library which handles ActiveX
controls. Until May 2014 (CVE-2014-1809), ASLR was not enabled on this
library on all versions of Oﬃce (including Oﬃce 2013) and on all version of
Windows (including Windows 7 and Windows 8). Since this library is easily
locatable, it is trivial to re-use code from the same library as is used for the
initial vulnerability. Due to this lack of OS level exploit mitigations and the sim-
plicity of exploitation, DCR, including memory fragmentation, does not block
this exploit. It is noteworthy that since the ActiveX controls used in this exploit
are OLE ﬁles, our DCR mechanisms fragmented these objects. However, since
Preventing Exploits in Microsoft Oﬃce Documents
237
the access to these objects comes through legitimate means, the layout random-
ization provides no mitigation power.
However, some exploits are foiled because they use anomalous access to
the raw document ﬁle. In the case where the raw document is accessed, the
encrypted malicious payload is stored in the zip container without compression.
Our re-compression of the zip streams with a randomly selected compression
level defeats this ﬁle level access.
CVE-2013-3906 is a vulnerability in the TIF image format parser that per-
mits memory corruption resulting in possible code execution. This exploit was
manifest in .docx documents. Some of these exploits use ROP chains, while some
use traditional shellcode. The ROP based exploits can evade DEP using a stack
pivot and code re-use. Since ASLR is not enabled on the MSCOMCTL library,
this library is used for gadgets in the ROP based exploits. Hence, the ROP
formulation of the exploit was able to evade both ASLR and DEP as imple-
mented at the time. However, in either the case of traditional shellcode or ROP
chains, the 2013-3906 exploits are defeated through fragmentation of ActiveX
objects used to implement a scriptless heap spray. The majority of the 2013-
3906 samples we observed attempt to load ﬁnal malware via HTTP requests.
The other exploits load the ﬁnal malware in memory using the same ActiveX
control loading mechanism, such that these payloads are also fragmented.
The CVE-2014-4114 vulnerability is not caused by a software coding ﬂaw,
but rather policy that allows remote code to be executed. In this vulnerability, an
ActiveX control allows execution of a remote .inf ﬁle which then allows execution
of a portable executable. The malware is most typically downloaded via Windows
ﬁle sharing (SMB/CIFS). The vast majority of these maldocs were .ppsx ﬁles
which are presentations that open automatically as slide shows. There were a
small number of .docx ﬁles as well. Since this vulnerability is a policy ﬂaw,
mitigations such as ASLR and DEP do not apply. Similarly, DCR does not apply
even though we fragment the OLE ActiveX controls implementing the exploit.
We only block a small number of these exploits because our ﬁle fragmenter
identiﬁes them as improperly formatted.
Overall, we are able to block over 75 % of the exploits in our evaluation set.
If 2014-4114, which is not a traditional memory safety vulnerability, is excluded,
then DCR blocks over 96 % of the exploits in our evaluation set.
6 Performance Evaluation
The core performance characteristics of DCR are the time required to perform
the document transformation and the overhead incurred when opening the doc-
ument. The document content randomization time was evaluated by performing
DCR on a number of documents. The ﬁle open overhead was measured by timing
the document reader opening and rendering the document, comparing the times
from the original and randomized documents. We also validated that the view
of the document presented to the user remained invariant by scripting Oﬃce to
open the document and print it as a PDF. We compared the resulting PDFs
238
C. Smutz and A. Stavrou
Table 2. DCR Performance
File type Transform speed Render overhead
.doc
.docx
68.9 Mbps
43.1 Mbps
0 %
2.9 %
created from the original and modiﬁed documents to ensure equivalence in ren-
dering. The results of the performance evaluation of DCR are summarized in
Table 2.
6.1
.doc DCR Performance
To evaluate the computational expense of performing the document content ran-
domization, we measured the time to perform this operation on a 1000 document,
249 MB, set randomly selected from the Govdocs corpus [7]. The average time
to perform the document fragmentation was 28.9 s using a single thread on a
commodity server. This equates to 68.9 Mbps of throughput in a single thread.
To put this execution time in perspective, we scanned the same corpus with
ClamAV which required an average 28.7 s to complete. Performing this content
fragmentation on a single 248 K sample (close to average document size) yielded
an average 0.028 second execution time. The DCR operations are similar in cost
to that incurred by a common anti-virus engine and result in a delay that should
be acceptable for most situations.
To test the performance impact of DCR on document opening and rendering,
this set of benign documents was converted to PDF using Microsoft Oﬃce and
powershell scripting. There were 39 documents that were removed from this set
because they required user input to open or printing was prohibited by Oﬃce.
The most common cause of failing to print was invocation of protected view,
which limits printing, apparently because they were created by old versions of
Oﬃce (the Govdocs corpus contains some very old documents). Other obsta-
cles to automation included prompting for a password or prompting the user as
a result of automated ﬁle repair actions. In addition, following OLE ﬁle format
fragmentation, an additional 125 documents opened in protected view which pre-
vented automated printing. These ﬁles apparently triggered some ﬁle validation
heuristics in Oﬃce. The same mechanisms used to break exploits can also be used
for malicious intent, such as evading virus scanners. All content was present, and
it was later discovered that the validation heuristic did not trigger reliably on
independent formulations of the same original document–some transformations
would trigger this protected view and some would not. This protection built into
Oﬃce triggers on some particular block layouts but the exact criteria was not
discovered by the authors. If DCR is to be use widely, it would be necessary to
understand and prevent triggering of this heuristic, although documents from
untrusted sources (email or web) are already opened in protected view anyway.
The test data set therefore contained 836 documents totaling 197 MB. It
took about 15 min for the documents to be converted to PDFs which equals just
Preventing Exploits in Microsoft Oﬃce Documents
239
over 1 second per document. Performing multiple trials, there was no consistent
diﬀerence in speed between the original and the fragmented documents. The
diﬀerences in mean open times between the original and fragmented documents
was 1/50th of the 95 % conﬁdence interval. Therefore, the randomized documents
take no longer to open and render. This is expected as there is no additional
work required to reassemble the randomized streams. Any eﬀects resulting from
less eﬃcient read patterns seem to be masked by ﬁle caching.
Having converted both the original and fragmented documents to PDF doc-
uments, the resulting PDFs were compared for similarity. Since the PDFs had
unique attributes such as creation times, none of the PDFs generated from ren-
dering the original documents were identical to those generated from the frag-
mented documents. However, they were very similar in all respects. The average
diﬀerence in size of the resulting PDFs was 40 bytes, with 513 of the PDF pairs
having the exact same size. The average binary content similarity score of these
derivative document pairs was 87 (out of 100) using the ssdeep utility [10]. Man-
ual review of a small number of samples also conﬁrmed the same content in the
fragmented documents as in the original documents.
6.2 .docx DCR Performance
The performance impact of .docx DCR was similarly evaluated. To measure the
cost of performing our embedded object layout randomization, we compiled a
corpus of benign .docx ﬁles from the Internet, using a web search with the sole
criteria of seeking .docx ﬁles. The search yielded a wide diversity of sites with
no known relevant bias on the part of the researchers.
This corpus consisted of 341 ﬁles weighing in at 76 MB. Executing our utility
required an average 14.3 s from which we derive a single threaded bandwidth of
43.1 Mbps. Scanning the same corpus with ClamAV required 28.0 s, nearly double
the time required for our mechanism. The time to execute on a single 225 KB
document, which was an average size document in this corpus, was 0.034 s.
As with .doc ﬁles, we tested the impact on rendering by converting both the
original and randomized documents to PDF using Oﬃce. The outcome was a
mean open time of 268.5 s for the original documents and 276.3 s for the DCR
documents. This 2.9 % increase in document render time following document
fragmentation is greater than the 95 % conﬁdence interval for these trials. This
slow down is very likely due to the use of higher levels of compression in the zip
container. By default, Microsoft Oﬃce uses deﬂate compression with the fastest
compression level while our randomized compression levels are spread between
four compression levels. Indeed, the corpus of randomized documents was 8 %
smaller than the original document set.
This performance evaluation excluded one of the 341 documents that crashed
Oﬃce post randomization. This document did not appear to be malicious in any
way, but simply contained a large number of ActiveX controls that triggered
a bug in Oﬃce following fragmentation. We did not determine the exact cause
of this crash, but did isolate it to the fragmented OLE based ActiveX objects.
Since it caused a crash instead of causing a ﬁle validation/parsing error, we do
240
C. Smutz and A. Stavrou
not consider it evidence of a fundamental issue with our approach, but rather a
bug in Oﬃce or a special case our randomizer needs to handle.
Beyond the zip container, the vast majority of the documents in this benign
corpus were not modiﬁed. Of the 341 documents, only 10 documents had OLE
sub-objects on which fragmentation was performed, including the crash induc-
ing document. Since this number was so small, the user visible representation of
these samples were validated manually. Both the original and the modiﬁed docu-
ment were opened and compared. Barring the aforementioned single document,
randomizing the OLE objects embedded in .docx ﬁles maintained the integrity
of the original document as presented to the user.
For both .doc and .docx ﬁles, the CPU time required to perform document
randomization is reasonable–comparable with that of signature matching based
detectors. The overhead on document open is negligible. We observed an issue
with heuristic detections triggering protected view in about 12 % of .doc ﬁles. We
also seemed to trigger of a bug for a single .docx ﬁle. Barring these exceptions,
the transformed documents provided the same display to the user as is produced
by the original.
7 Content Randomization Evasion
Document content randomization is eﬀective against many exploits created
without knowledge that it would be used. If it is to remain eﬀective following
wide-scale deployment, it must be resilient to evasion. The strength of malicious
payload fragmentation lies in the number of fragments required for the payload.
For fragmentation to be eﬀective, the size of the malicious payload must be larger
than the fragmentation block size.
The OLE containers used in .docx heap sprays employ a default block size
of 64 bytes which is much smaller than the shellcode required for a meaningful
exploit. In most of the examples we observed, the shellcode was approximately
500 bytes in length. As a comparison, we studied a collection of 32-bit windows
shellcode snippets packaged with the Metasploit Framework. The functionality
of these code blocks ranged from stubs that act as building blocks to complete
malicious payloads. The average size of all of these components is 289 bytes. In
most situations, these shellcode blocks will be extended a small amount with
exploit speciﬁc register setup and shellcode encoding. The size of the larger
shellcode components is comparable with the approximately 500 byte shellcode
observed in the .docx scriptless heap sprays. Shellcode that provides functionality
for a full malicious payload is invariably larger than can ﬁt within the 64 byte
default size restriction imposed by content fragmentation.
Current exploits are not resilient to malicious payload fragmentation because
it is not currently widely deployed. However, the documented countermeasure
to limits on payload size is to perform an egg hunt per payload block, which
has been styled omelette shellcode [5]. Omelette shellcode locates and combines
multiple smaller eggs into a larger buﬀer, reconstructing a malicious payload
Preventing Exploits in Microsoft Oﬃce Documents
241
from many small pieces. The omelette approach adds at least one more stage
to the exploit, in exchange for accommodating fragmentation of the malicious
content.
A typical heap spray involves ﬁlling a portion of the heap with the same
malicious content repeated many times, with each repetition being a valid entry
point. This approach would be altered for an optimal omelette based exploit.
One would spray the heap with the omelette code solely, then load a single copy
of the additional shellcode eggs into memory outside the target region for the
spray.
When multiple egg hunts are used to defeat malicious payload fragmentation,
then the primary mitigation power is shifted to the size of a block in which the
reassembly code must reside. Each egg containing the partitioned payload could
have an arbitrarily small size with a few bytes overhead for a marker used to
locate the egg and an identiﬁer to facilitate proper re-ordering. The size of the
omelette code is invariably the bottleneck of the technique. If the omelette code
can ﬁt fully within a fragmentation block, then malicious payload fragmentation
will not be eﬀective.
Therefore, for omelette shellcode to operate, it must be loaded in a single
64 byte block or it will be fragmented and re-ordered. Most openly available
examples of omelette shellcode, which are designed speciﬁcally to be as compact