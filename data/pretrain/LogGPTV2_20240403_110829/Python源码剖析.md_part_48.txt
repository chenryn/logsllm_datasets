就云开雾散了）：
GenericGetAttre
tp_getattro操作。
第
tp_getattr和
是在属性名的使用上，tp_getattro所使用的属性名必须是一个PyStringobject对象，
已不再推荐使用。它们之间的区别其实在Pyobject_GetAttr中已显示得非常清楚，主要
#instance对象的_dict
#通过aescriptor访问失败，在instance对象自身_aict_中寻找属性
if descriptor:
注意：这里的descriptor实际上指向了一个普通函数
注意：hasattr会在时，会从PyBaseobject_Type 中继承其tp
在Python的class对象中，定义了两个与访问属性相关的操作：tp_getattro
return,
return type.
return NULL;
PyErr_Format(PyExc_AttributeError,mn%.50aobject has no attribute
//13属性不存在，抛出异常
PyTypeobject*tp=v->ob_Lype;
dict
return
(tP-
retun(*tp->tp_getattro)(v,namel:
1n
一Pyobject_GenericGetAttr。所以Pyhon虚拟机在这里会进入PyObject
a
aict.
get_（descriptor,a,A)
get
>LP
class_
中我不到属性，返回a的基类列表中某个基类里定义的画数
-getattr)(v.
（descriptor在之后会细致析）
(descriptora,A)
(hasattr(type,
有一套复杂地确定访问的属性的算法，
PyString_AS_sTRNG(name)):
12.5
Python源码剖析
访问instance对象中的属性
（
深度探索动态语言核心技术
下面我们
297
---
## Page 328
Python源码剖析
12.5.1
298
Pyobject_GenericGetAttr中与伪代码中对应的C代码得到证实：
[object.c]
中，我们展示了我们的猜想。
的域，从名字上推断，这个可能就是instance对象中_dict_的偏移位置。在图12-24
申请的，难道谜底就在这多出的这两个pyobject*中？
在中，24个字节的前8个字节是Pyobject，后8个字节是为两个Pyobject*
仅是为a申请了16字节的内存，并没有额外的创建PyDictObject对象的动作呀。不过
在第12.4节的描述中，我们看到，从创建时，Python虚拟机仅
呢，稍等片刻，谜底一会就能揭开了。
定义一个函数就是descriptor了，所以导致输出结果为1。那么究竞什么才是descriptor
上，在那段伪代码中，有一个关键的概念—descriptor。在一个elass中，并不是随意
print a.fune
图12-24中，虚线画出的aict对象就是我们期望中的a.aict。这个猜想可以在
在创建时，我们曾说到，Python虚拟机设置了一个名为七p_dictoffset
.fune
Pyobjeat
Py_ssize_t dlctoffset;
Pyobjeat
在属性访问算法中，我们看到有“a.dict_”这样的形式。这一点相当奇怪了，
instance对象中的_dict
第12章Python虚拟机中的类机制
很不幸的是，你会发现输出的结果为1，看上去上面伪代码描述的算法不对呀。实际
我们通过一段代码来验证这个伪代码描述的算法：
A(
Func(self）:
pass
深度探索动态语言核心技术
**dictptr;
图12-24猜想中的a._dict
Sinstance a>
ob_sype
tp_dictoffset=8
ssp>s
---
## Page 329
12.5.2
虚拟机会填充tp_aict，其中与操作名对应的是一个个descriptor，那时我们看到的是
读者对前面描述过的descriptor的回忆。前面我们看到，在Pyrype_Ready中，Python
aictoffset获得aict对象的那段代码。
SetAttr也是a.
置动作也会访问a.arct，而且，这个设置动作最终调用的PyObject_Generic-
对dictoffset进行一些处理，最终仍然会使dictoffset指向a的内存中额外申请的位
[object.c]
nt Pyobiect_GenericSetAttr(Pyobject*obj,Pyobject *name,Pyobject *value)
而pyobject_GenericGetAttr正是根据这个dictoffset获得了一个aict对象。
在伪代码中，出现了“aescriptor”，
再论descriptor
更进一步，查看函数g中有设置self.value的代码，这个instance对象的属性设
如果dictoffset小于O，意味着A是继承自str这样的变长对象，Python虚拟机会
Pyobject
dictoffset
1/inline_PyObject_GetDictPtr调数的代码
res= PyDict_GetItem(diet,
dict=
dietptr=（Pyobject**）（(char *）obj dictoffset）;
lf（dictoffset
(dictoffset=o)[
PyObject
*dietptr= dict;
dict =PyDict_New(:
**dictptr;
1/处理变长对象
PyObject_GetDietPtr(obj);
dict_最初被创建的地方：
aict
*tp=obj->ob_type;
NULL)
*diatptr;
的代码就是Pyobject_GenericGetAttr中根据
name):
，这个命名其实是有意为之的，目的是为了唤起
12.5访问instance对象中的属性
Python源码剖析
一深度探索动态语言核心技术
299
---
## Page 330
300
Python源码剖折
class_对应的class对象中存在_get
在Python的类机制中究竟会起到怎样的作用。
descriptor这个概念在Python内部是如何实现的。现在我们将要剖析的是descriptor
a.dict_[value]1，而不会设置A中已有的value属性。
效果上，我们可以总结出如下的两条规则：
象的mro列表中寻找属性，我们将前一种属性称为instance属性，而后一种属性称为
会在instance对象自身的_dict_中寻找属性，也会在instance对象对应的class对
虚拟机对属性的选择。从pyobject_GenericGetAttr的伪代码可以看出，Python虚拟机
数，所以它们绝对是当之无愧的descriptor。
_delete_对应的操作：
属性访问的行为产生重大的影响。一般而言，对于一个Pyhon中的对象obj，如果obj
class属性。
[slotdefs in typeobject.c]
在Python虚拟机对class对象或instance对象进行属性访问时，descriptor将对
第12章Python虚拟机中的类机制
虽然pyobject_GenericGetAEtr里对属性进行选择的算法比较复杂，但是从最终的
Python虚拟机按照instance属性、class属性的顺序选择属性
在Pyhon虚拟机访间instance对象的属性时，descriptor的一个作用是影响Python
如果在class属性中发现同名的data descriptor，那么该descriptor会优先于
如果细分，那么descriptor还可分为如下两种：
这两条规则在对属性进行设置时仍然会被严格遵守，换句话说，如果执行“a.value=
instance属性被Python虚拟机选择。
优先于class属性：
T
深度探索动态语言核心技术
delete
lescy
8et
set_和_delete_三种操作，那么obj
set的aescriptor;
即instance属性
---
## Page 331
的结果返回。在下面的图12-25中，展示了descriptor对属性访问行为的影响。
单地返回descriptor，而是如伪代码所示的那样，调用aescriptor.get_，将调用
descriptor的一个细节上存在着差异。在Pyobject_GenericGetAttr中，如果查询到
并将_get_的结果作为属性的值返回。其实这个说法不是完全正确的。仔细对比
身的tpdicE 中存储的属性。
所有的class对象都是metaclass对象创建的，也就是metaclass的instan.ce：所以，
合于type_getattro。但是怎么理解type_getattro中的“instance属性”呢？很简单，
PyObject_GenericGetAttr。其实两者的算法都是类似的，
性的表达式时，Python虚拟机同样会为这个表达式编译出包含LOAD_ATTR指令的字节码
寸于olass对象而言，“instance属性”这个说法也是非常自然的，就是class对象自
前面我们说当访问的属性最终对应的是一个descriptor时，会调用其_get_方法，
当最终获得的属性是一个descriptor时，最奇妙的事发生了，Python虚拟机不是简
有趣的是，
instance属性优先于nondatadescriptor
b.value
b=B0
B（)
ClaBs
descriptor改变返国值
get
如果我们在class_O.py中加入“printA.name”这样访问class对象的属
图12-25descriptor对属性访问行为的影响
get
12.5访问instance对象中的属性
Python源码剖析
KeyErcor!
data descriptor优先于instance属性
yalue
set
I.PnteA.]
value]
上面所描述的所有结论都适
dict_['value]
(self,obj,cls）:
一深度探索动态语言核心技术
301
---
## Page 332
12.5.3
302
Python源码剖析
数入栈的动作，而是直接执行了CALL_FUNCTION指令。这里没有任何像参数的东西在栈
通常会将参数事先压入运行时栈中，但是从class_O.py中a.f（）语句编译后的指令序列中
实是一个货真价实的带参函数。现在，问题来了，根据我们之前对函数机制的分析，Pyhon
令代码的最后被SET_TOP压入到了运行时栈中，那么会有什么后果呢？
角度来看一看，假设PyPunctionobject作为LOAD_ATTR的最终结果，在LOAD_ATTR指
个PyFunctionObject对象。先抛开伪代码中确定最终返回值的过程不说，我们从另一个
访问顺序的影响：其二是对访问结果的影响。第二种影响正是类的成员函数调用的关键。
不会调用其_get_方法。在图12-26中给出了这条规则的一个例子。有兴趣的读者可以
象的tp_dict中，会调用其get_方法：若它存在于Instance对象的tp_aict中，则
区别可以用一句话来总结：如果待访问的属性是一个descriptor，若它存在于class对
中，即使查询到的descriptor是“instanice属性”，也会调用其get_方法。这样的
可以看到，Pyhon在获得了a.r对应的对象之后，没有进行任何如普通函数调用一样的参
问地揭示了self确实应该是一个实实在在的对象，所以表面上看起来是无参函数的王其
以从函数g中看到答案，在g中有这样的语句：self，value=avalue。这条语句毫无疑
是不是一个真正有效的参数呢？还是它仅仅是一个语法意义上的占位符而已？这一点可
第12章Python虚拟机中的类机制
在A的成员函数E的def语句中，我们分明看到一个self参数，self在Python中
在前面讨论创建时，我们看到，在A._aict_中，保存了一个与符
到这里，我们已经看到，descriptor对属性访问的影响主要在两个方面：其一是对
函数变身
一深度探索动态语言核心技术
图12-26
2
instance对象和class对象中descriptor的不同行为
B0
在class对象的tp_dict中的desciptor
---
## Page 333
New中一看，那个神秘的对象现身了：
New，Python虚拟机在PyFunctionObject的基础上创建了一个新的对象，到pyMethod
符号“”存在，所以根据伪代码中的算法，a.的返回值将被descriptor改变，其结果
里得到的A.f实际上是一个descriptor。由于PyFunction_Type中井没有设置tp
PyFunction_Type中，其实隐藏着一个惊天大秘密。观察pyFunctino_Type：我们会发
间放过了PyFunctionObject 对象对应的class 对象—PyFunction_Type在这个
数机制的剖析中，我们对pyFunctionobject似乎已经了如指掌了。但那时，我们不经意
象：另一个更合理的假设是，在这个对象中，还包含了函数王的参数：self。
所以一个合理的假设是，在这个对象中，包含了“”对应的那个yFunctionobject对
确实能得到一个参数，我们必须抛弃PyFunctionobject是返回结果的假设，它只能是另
一种我们现在为止还不知道的全新的对象。由于是通过访问属性“”得到的这个对象，
selE参数究竞在什么地方呢？
中，栈中只有一个我们认为是PyFunctionobject对象的a.f的返回结果，这个遗失的
Pyobject* PyMethod_New(Pyobject
[clasaobject.c]
static Pyobject*
[funcobject.e]
eype)
func_descr_get将A，对应的pyFunctionObject进行了一番包装，通过PyMetHod_
为了能看清这个全新的神秘对象究竟是谁，让我们回到伪代码中来。在第11章对函
好了，爱因斯坦说，为了相对论，我们必须抛弃绝对时空的观念，现在，为了能让
else:
retuzn
im=Pyobject_Gc_New(PyMethodobject,&PyMethod_Type）;
1/不使用缓冲池，
PyObject_INiT(im,&PyMethod_Type);
obi
(obg
Eree_list
/使用级冲池
free
PyMethod_New(func,obj,type);
Py_None)
func_desoT_geE(Pyobject func,Fyobject obj,Pyobject
(PyMethodObject*）(1m->lm_self):
直接创建PyMethodobject对象
func,Pyobjectgelf,Pyobject*class)
12.5访问instance对象中的属性
Python源码剖析
一深度探索动态语言核心技术
303
---
## Page 334
Python源码剖析
12.5.4
304
况有些不同，见代码清单12-6：
前我们研究过了对于pyFunctionobject对象的调用，而对于PyMethodobject对象，
时，发生的函数绑定的结果：
对象结合在一起的过程就称为成员函数的绑定。
应的class对象。
采用了缓冲池的技术。现在来看看这个PyMethodobject：
这样熟悉的字眼，现在我们立即可以判断出，在PyMethoaobject的实现和管理中，Pyhon
Pypedef
[classobject.h]
PyMethodobject;