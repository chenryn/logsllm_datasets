#### 构建 NetHack
官方的 NetHack 仓库放在 [GitHub](https://github.com/NetHack/NetHack) 上，首先我们需要把它抓取下来放到我们的主目录里面。
```
$ cd ~$ git clone http://github.com/NetHack/NetHack
```
![](/data/attachment/album/201607/25/140848spr4kksjs9pgpans.png)
因为 NetHack 支持很多种操作系统，所以我们需要做一些基础配置来告诉它我们使用的是 Linux，并且用开源的 gcc 代替了了 Unix 上 cc 的作用。
如我所提到的，这有好几种办法可以实现。有些人想很周到，将这些配置信息放到了 hints 文件中。相信我，使用 hints 文件会避免遇到该 GitHub 仓库中提到的很多麻烦。在 README 文件和其它文档中并没有着重提到如何使用 hints 文件，我们可以这样做：
```
$ cd NetHack/sys/unix
$ ./setup.sh hints/linux
```
这将会设置 Makefile 正确的使用 Linux 下的工具、库及其路径。这个设置脚本很强大，它做了大量的配置工作，很高兴它在 WSL 中工作的也很好。如果你很好奇这个脚本是如何写的，你可以使用你的编辑器打开它一窥究竟。
然后，开始最终的构建：
```
$ cd ~/NetHack
$ make all
```
构建完成之后，你需要安装它。这其实就是将可执行文件复制到目标位置：
```
$ make install
```
它会安装到你的 ~/nh 文件夹下， NetHack 放在 ~/nh/install/games 目录，名为 nethack。要运行它，切换到该目录（或输入完整路径）并输入：
```
$ cd ~/nh/install/games
$ nethack
```
然后，屏幕会清屏并显示你可以玩 NetHack 了。注意，所有的东西都是在这个 Ubuntu Linux 环境中完成的，根本不需要任何 Windows 特有的东西。
#### 玩 NetHack
由于终端游戏的局限性和 NetHack 的复杂性，这里只能一带而过。对于初次接触它的人来说，还有一些神秘的地方，不过我觉得我们程序员们从来不怕挑战未知。
方向键和 vi（vim）中的一样，HJKL 是左、下、上、右。要退出游戏，你可以在地下城顶层找到楼梯出口然后使用它就可以，或者直接按下 CTRL-C 强制退出。
在 NetHack 中， @ 符号代表你自己，每一层都由房间、走廊、门，和向上及向下的楼梯组成。[怪物](https://nethackwiki.com/wiki/Monster)、[宝箱和物品](https://nethackwiki.com/wiki/Item)以各种 ASCII 字符组成，你慢慢就会熟悉它们。为了符合 Roguelikes 游戏规范，并没有存盘功能，你只有一条命。如果你死了就只能重玩，地下城环境是随机生成的，各种物品也是打乱放置的。
NetHack 游戏的目的是在地下城生存，收集金子和物品，尽可能的干掉各种怪物。除了这些目的之外，你就是不断在其中玩来找它们。规则大致遵循“龙与地下城（DnD）”的武器、技能等规则。
下面的 NetHack 截屏上可以看到有三个房间和两个走廊。向上的楼梯在左上角的房间里，我现在在右上角的房间，还有一些宝箱和其它物品。
![](/data/attachment/album/201607/25/140848gy997c9y5dz9ip88.png)
如果在你的游戏中没有显示颜色，可以创建一个名为 ~/.nethackrc 的文件，并放入如下内容：
```
OPTIONS=color:true,dark_room:true,menucolors:true
```
注：如果 ASCII 字符图形不是你的菜，但是你喜欢这种类型的游戏，你可以在微软商店搜索“roguelike”来找到视觉上更好看的这种游戏。
当然，NetHack 很古老了，可能只有特定年龄段的人们喜欢它。不过，构建它用到了大量重要的开发工具和 \*nix 操作系统功能，也包括终端模拟功能。从这里可以看到，从 gcc、gdb、make、bison 和 flex 到更现代一些的 git，都在 WSL 里面工作的很好。
如果你想看看 Build Tour 大会上的演示，你可以在 Build Tour 加拿大大会上看到这个讲演。WSL 的这部分演示在 6:20 开始。
希望你能喜欢在 NetHack 地下城中的探险。
> 
> C 和 C++ 都很伟大，就像其他的那些经典的开发工具一样。你甚至还可以用普通的 Bash 脚本做到很多。不过，也有很多开发者喜欢用 Python 做为他们的脚本语言。
> 
> 
> 
### Python
你可以在网上找到很多 Python 脚本的例子，这意味着 Python 越来越流行，也越来越有用了。当然，大多数情况下这些例子都是运行在 Linux 下的。在过去，这就需要我们有另外一台安装着 Linux 的机器来运行它们，或者使用虚拟机和多引导，否则就需要修改一些东西才能让他们运行在 Windows 下的 Python 环境中。
这是都不是无法解决的问题，但是它会日渐消磨开发人员每天的生活。通过 WSL，不用折腾你就拥有了一个兼容的、具有 Python 功能和 shell 变量的子系统。
要安装最新的 Python 开发版本和 Python 包安装器 pip，在 Bash 中执行如下命令：
```
$ sudo apt install python-pip python-dev
$ sudo pip install --upgrade pip
```
现在 Python 安装好了，我要展示给你如何从网上获取一个典型的 Linux 下的 Python 例子并让它直接工作起来。我去 [Activestate Python 菜谱站](http://code.activestate.com/recipes/langs/python/?query_start=1)找一个排名第一的 Python 例子。好吧，我走眼了，排名第一的是打印出整数名称的脚本，这看起来没啥意思，所以我选择了第二名：俄罗斯方块。我们每天都能看到 Python 出现在各种地方，所以这次让我们去玩另外一个游戏。
![](/data/attachment/album/201607/25/140849bpx9nrxzzpp1qxg1.png)
我打开了 nano 编辑器，从 Windows 上的浏览器中打开的页面上复制了这 275 行 Python 代码，然后粘贴到我的 WSL 终端窗口终端中的 nano 中，并保存为 tetris.py ，然后执行它： 
```
$ python tetris.py
```
它马上就清屏并出现了俄罗斯方块的游戏。同 NetHack 一样，你可以使用同样的 vi 标准的方向键来移动（以前是使用鼠标和 WSAD 键来移动，而右手使用 HJKL 键更方便）。 
![](/data/attachment/album/201607/25/140850xd7zv60w0u07zii7.png)
如我所提到的，你当然可以不用 WSL 就在 Windows 中运行 Python。然而，要想快速简便，不用修改 Linux 下的 Python 代码，只需要简单的复制粘贴代码即可运行，则可以极大的提高开发者的效率。
这是真的。这并不是要替代 Windows 原生的工具，比如 Python、PowerShell、C# 等等，而是当你需要在现代的开发工作流程中快速而有效地完成一些事情时，可以避免种种折腾。
包括 Bash、Python 以及其它所有的 Linux 原生的命令行开发工具，WSL 为我的开发工作提供了所有需要的工具。这不是一个 Linux 服务器，甚至也不是一个完整的客户端，相反，它就是一个可以让我避免每天折腾，让我在 Windows 上开发更有效率、更有快感的一个东西！
---
### 重置你的 WSL 环境
随便去试吧，如果你搞坏了你的 WSL 环境，它很容易重新安装。在进行之前，请确保做好了任何重要内容的备份。
```
C:\> lxrun.exe /uninstall /full
C:\> lxrun.exe /install
```
### 你使用 Bash 和 WSL 的感觉如何？
我们希望 WSL ，特别是 Bash 可以在 Windows 10 中帮你带来更高的效率，减少每天的开发中的折腾。
你对 Windows 10 上的 WSL 怎么看？你喜欢使用它吗？
开发团队做了大量的工作希望让 WSL 成为一个为开发者提供的强大的终端工具。如果你有任何反馈或运行出现问题，我们推荐你查看一下 [GitHub 反馈页面](https://github.com/Microsoft/BashOnWindows/issues)，以及 [用户之声的反馈和投票站点](https://wpdev.uservoice.com/forums/266908-command-prompt-console-bash-on-ubuntu-on-windo)。我们真的希望听到你的声音。
### 更多参考与延伸阅读
Linux shell 编程是一个庞大的话题，在网上有很多这方面的内容。如果你还不够熟悉它们，想要了解更多，可以看看各种 Bash 教程。[可以从这一份开始](https://help.ubuntu.com/community/Beginners/BashScripting)。
还有一些其他的参考资料也许对你有用：
* [Build Tour videos](https://channel9.msdn.com/Events/Build/Build-Tour-2016-Toronto)
* [Bash Scripting 101](https://help.ubuntu.com/community/Beginners/BashScripting)
* [WSL Home](https://msdn.microsoft.com/commandline/wsl/)
* [WSL Overview](https://blogs.msdn.microsoft.com/commandline/2016/06/02/learn-more-about-bash-on-ubuntu-on-windows-and-the-windows-subsystem-for-linux/)
* [WSL FAQ](https://msdn.microsoft.com/en-us/commandline/wsl/faq#how-do-i-update-bash-on-ubuntu-on-windows-)
* [WSL System Calls](https://blogs.msdn.microsoft.com/wsl/2016/06/08/wsl-system-calls/)
* [Scott Hanselman’s video on how to run WSL](http://www.hanselman.com/blog/VIDEOHowToRunLinuxAndBashOnWindows10AnniversaryUpdate.aspx)
哦，当然，要更多的了解 NetHack，请访问 [NetHack 主站](http://www.nethack.org/)。