efﬁciency.
A. Performance Interference and Energy Usage Models
The performance interference and energy usage models are
based on fuzzy MIMO modeling technique. In this section,
Fig. 2. NINEPIN System Architecture.
interference relationship and the energy consumption
characteristic of the co-located VMs. NINEPIN achieves
this goal
through a machine learning based online
adaptation of the performance interference and energy
models of the system, the subsequent re-computation
of optimal performance targets and a robust model
predictive control based target tracking.
B. The Architecture
logically abstract
Figure 2 presents the architectural overview of the manage-
ment components used in NINEPIN. The computer system
under control is a virtualized server hosting multiple customer
applications in VMs that
the resources
provided by the underlying multi-core server. In case of
interactive multi-tier applications, each tier of an application is
deployed at a virtual machine. The NINEPIN framework forms
a control loop that non-invasively mitigates the performance
interference between co-located VMs by adjusting their CPU
resource allocation (i.e, CPU usage limits) in an energy efﬁ-
cient manner, so that the overall system utility is maximized.
The key components in the control
loop include a two-
level hierarchical controller, a power monitor, a performance
monitor for each VM and a resource controller. The two-level
control framework integrates utility optimization with control
theoretical approach while avoiding highly complex system
modeling and computationally expensive control.
1) Power and Performance Monitors: The power monitor
measures the average power consumption of the underlying
multi-core server for the last control interval.
The performance monitor measures the average perfor-
mance of the hosted applications in the last control interval.
The actual performance metrics may vary for heterogeneous
applications running in virtualized environments. Our design
does not use any semantic information regarding these perfor-
mance metrics. It treats the performance values as raw data
for modeling and control. Hence, NINEPIN is applicable to
any performance metric.
Authorized licensed use limited to: Tsinghua University. Downloaded on March 18,2021 at 14:50:15 UTC from IEEE Xplore.  Restrictions apply. 
App 1App n(VM n)(VM 1)VMsPerformanceMonitor  Power Level 2Linearized State   Space ModelOptimal    Setpoint    Fuzzy MIMOLevel 1       Utility    Optimizer          Model  MonitorNINEPIN FrameworkCPU Resource AllocatorVMM Model Predictive       Controllerwe formulate a fuzzy MIMO model to represent a virtualized
multi-core server system hosting multiple applications and dis-
cuss a machine learning based model construction technique.
MIMO modeling is well-suited to capture the performance
interference interactions between co-located VMs. Together
with fuzzy logic, it accurately represents the highly complex
and nonlinear relationship between various system variables.
This is important for achieving modeling accuracy and self-
adaptiveness of the system model at the same time. Although
the initial fuzzy model is learned for a group of applications, it
is adaptive to different workload mixes at run time. We discuss
the need for self-adaptiveness in Section IV-C.
1) Fuzzy MIMO Model Formulation: We consider a number
of applications hosted in a multi-core server as a MIMO
system. The inputs to the system are CPU usage limits set
for various applications. The outputs of the system are the
measured performance of each application and the energy
usage of the underlying server. We obtain two separate models
for energy usage and performance of the system, respectively.
The system is approximated by a collection of MIMO fuzzy
models as follows:
y(k + 1) = R(ξ(k), u(k)).
(1)
Let y(k) be the output variable and u(k) = [u1(k), .., um(k)]T
be the vector of current inputs at sampling interval k. The
regression vector ξ(k) includes current and lagged outputs:
ξ(k) = [y(k), .., y(k − ny))]T
(2)
where ny speciﬁes the number of lagged values of the output
variable. Note that a regression vector may also include
lagged inputs to achieve even better accuracy of energy usage
and performance prediction. R is a rule based fuzzy model
consisting of K fuzzy rules. Each fuzzy rule is described as
follows:
Ri: If ξ1(k) is Ωi,1 and .. ξ(k) is Ωi, and u1(k) is Ωi,+1
and .. um(k) is Ωi,+m then
yi(k + 1) = ζiξi(k) + ηiu(k) + φi.
(3)
Here, Ωi is the antecedent fuzzy set of the ith rule which
describes elements of regression vector ξ(k) and the current
input vector u(k) using fuzzy values such as ‘large’, ‘small’,
etc. ζi and ηi are vectors containing the consequent parameters
and φi is the offset vector.  denotes the number of elements
in the regression vector ξ(k). Each fuzzy rule describes a
region of the complex non-linear system model using a simple
functional relation given by the rule’s consequent part. The
model output is calculated as the weighted average of the
linear consequents in the individual rules. That is,
y(k + 1) =
i=1 βi(ζiξi(k) + ηiu(k) + φi)
(4)
(cid:80)K
(cid:80)K
i=1 βi
5
rule. Membership degrees are determined by fuzzy member-
ship functions associated with the antecedent variables. The
model output is expressed in the form of
y(k + 1) = ζ∗ξi(k) + η∗u(k) + φ∗.
(5)
The aggregated parameters ζ∗, η∗ and φ∗ are the weighted
(cid:80)K
sum of vectors ζi, ηi and φi respectively.
(cid:80)K
i=1 βi · ζi
(cid:80)K
i=1 βi
(cid:80)K
i=1 βi · ηi
(cid:80)K
i=1 βi
(cid:80)K
i=1 βi · φi
i=1 βi
φ∗ =
η∗ =
ζ∗ =
.
.
.
2) Machine Learning Based Model Construction: We con-
struct initial fuzzy models by applying a subtractive clustering
technique on data collected from the system. Each obtained
cluster represents a certain operating region of the system,
where input-output data values are highly concentrated. The
clustering process partitions the input-output space and deter-
mines the number of fuzzy rules and the shape of membership
functions. Then, we apply an adaptive network based fuzzy
inference system (ANFIS) to further tune the fuzzy model pa-
rameters. It constructs an artiﬁcial neural network to represent
a fuzzy model and tunes its parameters using a combination of
back-propagation algorithm with a least squares method. This
adjustment allows the fuzzy system to learn from the data it is
modeling. The data set includes various values of energy usage
and performance measured from the system for past resource
allocations.
B. Utility Optimizer
The utility optimizer is responsible for ﬁnding the optimal
service level for each application so that the overall system
utility is maximized. It maintains the knowledge about the
service-level utility function for each application, the utility
function of energy consumption, the performance interference
model of co-located VMs and the energy usage model of the
underlying multi-core server. The service-level utility function
reﬂects the revenue or penalty related to service-level agree-
ments with customers, and may also incorporate additional
considerations such as the value of maintaining the data
center’s reputation for providing good service. It is of the form
Ui(S) for application i, where S is the service level achieved
in terms of its average performance. The energy utility U (E)
represents the costs associated with energy consumption. For
a given combination of CPU resource allocations to various
co-located applications, the performance interference model
speciﬁes the service levels that each application can achieve
and the energy usage model speciﬁes the energy consumption
of the virtualized server.
The optimization problem is formulated as follows:
N(cid:88)
i=1
where the degree of fulﬁllment for the ith rule βi is the product
of the membership degrees of the antecedent variables in that
M aximize
Ui(S) +  ∗ U (E)
(6)
Authorized licensed use limited to: Tsinghua University. Downloaded on March 18,2021 at 14:50:15 UTC from IEEE Xplore.  Restrictions apply. 
where  is a tunable coefﬁcient expressing the relative value
of energy efﬁciency and performance objectives. The utility
optimizer ﬁrst computes the CPU usage limits to be enforced
on co-located VMs so that the overall system utility given
by Eq. (6) is maximized. Then, it determines the optimal
service level targets for each application corresponding to
the computed CPU usage limits by using the performance
interference model. Our optimization algorithm is shown in
Algorithm 1.
Various heuristic optimization algorithms such as Simulated
Annealing, Genetic Algorithm, Hill Climbing and Particle
Swam are well-suited to the optimization problem, due to the
complex non-linear relationship between the objective function
and the decision variables. Here, the decision variables are
the CPU usage limits to be enforced on co-located VMs. In
this work, we apply a genetic algorithm based technique that
searches the space of various possible CPU usage limits and
ﬁnds a near-to-optimal solution. It uses the negative of utility
optimization objective in Eq. (6) as the ﬁtness function since
the genetic algorithm is designed to minimize the ﬁtness func-
tion. As a result, it maximizes the system utility. We represent
a solution to the optimization problem by a chromosome. It
is a string of numbers, coding information about the decision
variables. The genetic algorithm generates a new population of
candidate solutions and evaluates their ﬁtness values in various
iterations. We observe that it is able to converge within 600
iterations or generations.
Algorithm 1 The optimization algorithm.
1: Start with a random initial population where each indi-
vidual represents a combination of CPU usage limits on
co-located VMs.
2: repeat
3:
4:
Evaluate each individual solution’s ﬁtness according to
the deﬁned ﬁtness function.
Select pairs to mate from best-ranked individuals based
on their ﬁtness scores.
Apply crossover and mutation operations on the se-
lected pairs to generate a new population.
5:
6: until Number-of-generations ≤ G
7: Calculate the optimal performance targets corresponding
to the ﬁnal solution of CPU usage limits, based on the
performance interference model.
C. Online Model Adaptation for Robust Performance Isolation
NINEPIN provides robust performance isolation with het-
erogeneous application support. It addresses the practical issue
of hosting compute intensive and interactive applications in
the same virtualized server in two steps. First, it performs
online adaptation of the performance interference and energy
usage models in response to a signiﬁcant workload variation of
interactive applications that are co-located with VMs running
compute intensive jobs. Then, it re-computes the optimal per-
formance targets corresponding to the updated system model.
Furthermore, the model predictive controller performs control
6
actions based on the updated performance interference model.
Hence, NINEPIN is robust against variations in the workload
and heterogeneity of the hosted applications.
The online model adaptation is performed only when a
signiﬁcant error in the prediction of energy usage and per-
formance is detected. This avoids the overhead of frequent
adaptation and computationally expensive re-optimization.
NINEPIN applies a wRLS (weighted Recursive Least Squares)
method to adapt
the consequent parameters of the fuzzy
MIMO model as new measurements are sampled from the
runtime system. It applies exponentially decaying weights on
the sampled data so that larger weights are assigned to more
recent observations.
For online model adaptation, we express the fuzzy model
output in Eq. (4) as follows:
y(k + 1) = Xθ(k) + e(k)
(7)
1 θT
1 ..θT
where e(k) is the error value between actual output of the
system (i.e., measured performance) and predicted output of
the model. θ = [θT
p ] is a vector composed of the
model parameters. X = [w1X(k), w2X(k), .., wpX(k)] where
wi is the normalized degree of fulﬁllment of ith rule and
is a vector containing current and
X(k) = [ξT
previous outputs and inputs of the system. The parameter
vector θ(k) is estimated so that the following cost function
is minimized. That is,
i (k), u(k)]
k(cid:88)
Cost =
λk−je2(j).
(8)
j=1
Here λ is a positive number smaller than one. It is called
“forgetting factor” as it gives larger weights on more recent
samples in the optimization. This parameter determines in
what manner the current prediction error and old errors affect
the update of parameter estimation. The parameters of fuzzy
model are updated by the wRLS method.
θ(k) = θ(k−1)+Q(k)X(k−1)[y(k)−X(k−1)θ(k−1)]. (9)
[Q(k−1)− Q(k − 1)X(k − 1)X T (k − 1)Q(k − 1)
λ + X T (k − 1)Q(k − 1)X(k − 1)
(10)
Q(k) is the updating matrix. The initial value of θ(0) is equal
to the value obtained in the off-line identiﬁcation.
Q(k) =
1
λ
].
V. LEVEL-2 CONTROLLER DESIGN
The level-2 controller applies the model predictive control
principle to regulate the virtualized server system’s dynamic
behavior towards the optimal performance targets. The main
advantage of using a control
theoretical foundation is the
ability to achieve the performance targets with better control
accuracy and stability in spite of the inevitable uncertainties
and disturbances that exist in the system.
Authorized licensed use limited to: Tsinghua University. Downloaded on March 18,2021 at 14:50:15 UTC from IEEE Xplore.  Restrictions apply. 
A. Linearized State-Space Model
To apply the model predictive control theory on the virtu-
alized server system, the level-2 controller ﬁrst linearizes the
fuzzy MIMO model and represents it as a state-space linear
time variant model in the following form:
xlin(k + 1) = A(k)xlin(k) + B(k)u(k).
y(k) = C(k)xlin(k).
(11)
The state vector for the state-space description is deﬁned as
xlin(k + 1) = [ξT (k), 1]T .
(12)
The matrices A(k),B(k) and C(k) are constructed by freezing
the parameters of the fuzzy model at a certain operating
point y(k) and u(k) as follows. The current operating point
is determined by the performance values of each application
and the current CPU usage limits measured from the runtime
system. We calculate the degree of fulﬁllment βi for the
current inputs (i.e CPU usage limits) chosen for the system and
compute the aggregated parameters ζ∗, η∗ and φ∗. Comparing
Eq. (5) and Eq. (11), the state matrices are computed as
follows:
ζ∗
1,
0
φ∗
1
0
0
2,
...
ζ∗
...
ζ∗
p,
0
...
0
0
2
...
φ∗
...
φ∗
p
0
...
1
A =
η∗
1,2
..
η∗
2,2
..
η∗
p,2
..
..
ζ∗
1,1
1
ζ∗
1,2
0
0
...
ζ∗
2,1
0
ζ∗
p,1
0
...