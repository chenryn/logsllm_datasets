# Title: PUFs in Security Protocols: Attack Models and Security Evaluations

**Authors:**
- Ulrich Rührmair, Computer Science Department, Technische Universität München, 80333 München, Germany
- Marten van Dijk, CSAIL, MIT, Cambridge, Massachusetts, USA

**Conference:**
2013 IEEE Symposium on Security and Privacy

## Abstract
In recent years, Physical Unclonable Functions (PUFs) have been proposed not only for basic security tasks such as tamper-sensitive key storage and system identification but also for more complex cryptographic protocols like oblivious transfer (OT), bit commitment (BC), and key exchange (KE). These proposals treat "Strong PUFs" as a new, fundamental cryptographic primitive, comparable to the bounded storage model, quantum cryptography, or noise-based cryptography. This paper continues this line of research by investigating the appropriate adversarial attack models and the actual security of such protocols.

In the first part, we define and compare different attack models, ranging from a clean, initial setting termed the "stand-alone, good PUF model" to stronger scenarios like the "bad PUF model" and the "PUF re-use model." We argue that these attack models are realistic and that existing protocols would face them if deployed in practice. In the second part, we conduct detailed security analyses of existing schemes under the new attack models. The evaluated protocols include recent schemes from Brzuska et al. (Crypto 2011) and Ostrovsky et al. (2018). While some protocols are secure in their original attack models, none maintain their security in all of the new, realistic scenarios.

Our findings suggest that the design of advanced cryptographic PUF protocols needs to be reconsidered. Additionally, Strong PUFs may require additional hardware properties to be broadly usable in such protocols. Specifically, they should ideally be "erasable," meaning that individual PUF responses can be erased without affecting others. If implementing this feature is challenging, new forms of Controlled PUFs (such as Logically Erasable and Logically Reconfigurable PUFs) may suffice in certain applications. Furthermore, PUFs should be "certifiable," meaning that one can verify that the PUF has been produced faithfully and has not been manipulated. Implementing these features represents a pressing and challenging problem, which we pose to the PUF hardware community.

**Keywords:** (Strong) Physical Unclonable Functions, (Strong) PUFs, Attack Models, Oblivious Transfer, Bit Commitment, Key Exchange, Erasable PUFs, Certifiable PUFs

## I. Introduction
Today's electronic devices are mobile, interconnected, and pervasive, making them vulnerable targets for adversaries. Traditional cryptographic techniques rely on the concept of a secret binary key, which must remain unknown to an adversary. However, practical implementation of this requirement is often difficult. Physical attacks, such as invasive, semi-invasive, or side-channel attacks, and software attacks like API attacks, viruses, or Trojan horses, can lead to key exposure and security breaches. As Ron Rivest emphasized in his keynote at CRYPTO 2011, merely calling a bit string a "secret key" does not make it secret; it identifies it as a target for adversaries.

One of the main motivations for developing PUFs was their promise to better protect secret keys. A PUF is a (partially) disordered physical system that can be challenged with external stimuli or challenges, producing corresponding responses. These responses depend on the micro- or nanoscale structural disorder of the PUF, which cannot be cloned or reproduced exactly, even by the PUF's original manufacturer. Each PUF thus implements a unique function that maps challenges to responses, known as challenge-response pairs (CRPs).

Due to its complex internal structure, a PUF can avoid some of the shortcomings of classical digital keys. It is typically harder to read out, predict, or derive PUF responses than to obtain digital keys stored in non-volatile memory. PUF responses are generated only when needed, ensuring no secret keys are permanently present in an easily accessible form. Some PUFs are naturally tamper-sensitive, changing their behavior if physically altered. These properties have been exploited in various PUF-based security protocols, including identification, key exchange, and tamper-sensitive key storage.

In recent years, the use of PUFs in advanced cryptographic protocols with formal security proofs has been explored. These protocols employ PUFs with large challenge sets and freely accessible CRP interfaces, sometimes referred to as Physical Random Functions or Strong PUFs. The Strong PUF is used as a "physical random oracle," passed between parties, and its input-output behavior is assumed to be so complex that its response to a randomly chosen challenge cannot be predicted without direct physical measurement.

In 2010, Rührmair showed that oblivious transfer can be realized using a Strong PUF, implying PUF-based bit commitment and secure multi-party computations. The first formal security proof for a Strong PUF protocol was provided by Rührmair, Busch, and Katzenbeisser, who presented definitions and a reductionist security proof for Strong PUF-based identification. In 2011, Rührmair, Jaeger, and Algasinger discussed an attack on a PUF-based session key exchange scheme, motivating the PUF re-use model. At CRYPTO 2011, Brzuska et al. adapted Canetti’s universal composition (UC) framework to include PUFs, providing PUF-protocols for OT, BC, and KE. At CHES 2012, Rührmair and van Dijk presented a quadratic attack on Brzuska et al.’s OT and BC protocols, showing that their security is not maintained with optical PUFs or electrical PUFs with 64-bit challenges.

This paper continues this research by investigating the UC-models of Brzuska et al. and Ostrovsky et al., introducing several practically relevant attack scenarios. These include the "stand-alone, good PUF model," the "bad PUF model," and the "PUF re-use model."

**Scope of this Work:**
- **Stand-alone, Good PUF Model:** Assumes a single, isolated protocol execution with faithful PUF hardware.
- **PUF Re-use Model:** Allows adversaries multiple access to PUFs, including the one-time posterior access model (PAM).
- **Bad PUF Model:** Allows fraudulent parties and adversaries to manipulate PUF hardware, using "bad PUFs" that look normal but have extra properties for cheating.

To illustrate the impact of these models, we conduct security analyses of several protocols from Brzuska et al. and Ostrovsky et al. in the bad PUF and PUF re-use models.

**Our Results:**
1. A recent BC-protocol of Ostrovsky et al. is insecure in the "malicious" or "bad" PUF model (Section III-E).
2. A recent OT protocol of Brzuska et al. is insecure in the PUF re-use and bad PUF models (Sections III-A and III-B).
3. A recent KE-protocol of Brzuska et al. is insecure in the PUF re-use and combined PUF re-use, bad PUF models (Sections III-C and III-D).
4. An early OT-protocol of Rührmair and an early KE-protocol by van Dijk are insecure in the bad PUF and PUF re-use models (Section III-F).
5. An OT-protocol of Ostrovsky et al. is insecure in the bad PUF and PUF re-use models (Section III-F).
6. Two special BC-protocols of Ostrovsky et al. and their construction for UC-secure computation are insecure in the bad PUF model (Section III-F).

The attacks in the bad PUF model require only mild forms of bad PUFs, such as linear functions, Challenge-Logging PUFs, and Simulatable PUFs. The exception is the attack in item 6, which requires more sophisticated types like Communicating PUFs or Marionette PUFs.

Additionally, two previously published results are noteworthy:
7. A PUF-based session key exchange protocol by Tuyls and Skoric has been attacked under conditions similar to the PUF re-use model (Rührmair, Algasinger, and Jaeger, 2011).
8. Quadratic attacks on the security of the OT and BC protocols of Brzuska et al. (Rührmair and van Dijk, CHES 2012) show that their security is not maintained with optical PUFs or 64-bit electrical PUFs.

Our analysis focuses on the impact of our attack models on advanced PUF protocols like OT, BC, and KE, highlighting the need for robust PUF designs and additional hardware properties.