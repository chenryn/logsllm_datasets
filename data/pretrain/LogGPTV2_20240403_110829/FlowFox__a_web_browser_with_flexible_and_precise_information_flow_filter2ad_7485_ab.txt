### How This Works

Consider a scenario where malicious code attempts to disclose cookie information as part of a session hijacking attack:

```javascript
1. var url = "http://host/image.jpg?=" + document.cookie;
2. var i = new Image(); i.src = url;
3. if (i.width > 50) { /* layout the page differently */ }
```

In this example, we label `document.cookie` as confidential input and setting the `src` property of an `Image` object (which results in an HTTP request to the given URL) as public output. Reading the `width` property of the image (also a DOM API call) is labeled as public input.

#### Execution in FlowFox

First, the script is executed at the low level. Here, reading the cookie returns a default value, such as an empty string. The image is then fetched without leaking the actual cookie content. When the `width` property of the image is read (e.g., resulting in 100), the value is stored for reuse in the high-level execution.

```javascript
1. var url = "http://host/image.jpg?=" + document.cookie; // Returns ""
2. var i = new Image(); i.src = url;
3. if (i.width > 50) { /* layout the page differently */ } // i.width = 100
```

Next, the script is executed at the high level. In this level, setting the `src` property is suppressed, and the `width` property is replaced by the value read at the low level.

```javascript
1. var url = "http://host/image.jpg?=" + document.cookie; // Returns actual cookie
2. var i = new Image(); i.src = url; // Suppressed
3. if (i.width > 50) { /* layout the page differently */ } // i.width = 100 (reused from low level)
```

This example demonstrates that even though the script is executed twice, each browser API call is performed only once. Consequently, if the original script was non-interferent, the script executed under multi-execution behaves exactly the same. In other words, SME (Secure Multi-Execution) is precise: the behavior of secure programs is not modified by the enforcement mechanism. This is relatively easy to see: if low outputs did not depend on high inputs to start with, then replacing high inputs with default values will not impact the low outputs. For a formal proof, refer to [18, §IV.A].

### Security Policies

In FlowFox, every DOM API call is interpreted as an output message to the DOM (the invocation with the actual parameters), followed by an input from the DOM (the return value). DOM events delivered to scripts are interpreted as inputs. The policy deals with events by assigning appropriate labels to the DOM API calls that register handlers.

A FlowFox policy must specify two things:
1. It assigns security levels to DOM API calls.
2. It specifies a default return value for each DOM API call that could potentially be skipped by the SME enforcement mechanism (see Rule 3 in Section 3.2).

#### Policy Rule

A policy rule has the form `R[D][C1, ..., Cn] → l1, ..., ln (cid:44)→ dv`, where:
- `R` is a rule name.
- `D` is a DOM API method name.
- `Ci` are boolean expressions.
- `li` are security levels.
- `dv` is a JavaScript value.

Policy rules are evaluated in the context of a specific invocation of the DOM API method `D`. The boolean expressions `Ci` are JavaScript expressions and can access the receiver object (`arg0`) and arguments (`argi`) of that invocation. Given such an invocation, a policy rule associates a level and a default value with the invocation as follows:
- The default value is `dv`.
- The conditions `Ci` are evaluated from left to right. If `Cj` is the first one that evaluates to true, the level associated with the invocation is `lj`. If none of them evaluate to true, the level associated with the invocation is `L`.

Policies are specified as a sequence of policy rules and associate a level and default value with any given DOM API invocation. For an invocation of a DOM API method `D`, if there is a policy rule for `D`, that rule is used to determine the level and default value. If there is no rule in the policy for `D`, the call is considered to have level `L` with a default value of `undefined`.

Making API calls low by default supports writing short and simple policies. The empty policy (everything low) corresponds to standard browser behavior. By selectively making some API calls high, we can protect the information returned by these calls, allowing it to flow only to calls that have also been made high.

#### Examples

- **Policy Rule R1**: Specifies that reading and writing of `document.cookie` is classified as `H` with a default value of `""` (the empty string).
  ```plaintext
  R1[document.cookie] : true → H (cid:44)→ ""
  ```

- **Policy Rule R2 and R3**: Specify that certain methods of `XMLHttpRequest` objects (abbreviated as `xhr`) are classified as `H` if the request is sent to the same origin.
  ```plaintext
  R2[xhr.open] : sameorigin(arg1) → H (cid:44)→ true
  R3[xhr.send] : sameorigin(arg0.origin) → H (cid:44)→ true
  ```
  - `sameorigin()` evaluates to `true` if its first argument points to the same origin as the document.

- **Policy Rules R4 and R5**: Ensure that keypress events are treated as high inputs.
  ```plaintext
  R4[onkeypress] : true → H (cid:44)→ true
  R5[addEventListener] : arg1 = "keypress" → H (cid:44)→ true
  ```

### Implementation

FlowFox is implemented on top of Mozilla Firefox 8.0.1 and consists of about ±1400 new lines of C/C++ code. We discuss the most interesting aspects of this implementation.

#### SME-aware JavaScript Engine

The SpiderMonkey software library is the JavaScript engine of the Mozilla Firefox architecture, written in C/C++. Our changes to SpiderMonkey allow JavaScript objects to operate (and potentially behave divergently) on different security levels.

Every execution of JavaScript code happens in a specific context, internally known as a `JSContext`. We augment the `JSContext` data structure to contain the current security level and a boolean variable to indicate if SME is enabled. `JSObjects` in SpiderMonkey represent regular JavaScript objects living in a `JSContext`. Each property of a `JSObject` has related metadata contained in a `Shape` data structure.

By extending `Shapes` with an extra field for the security level, we allow `JSObjects` to have the same property (with a potentially different value) on every security level. The result is a `JSObject` that behaves differently depending on the security level of the overall `JSContext`.

We represent the augmented `Shape` by the triplet `{security level, property name, property value}`. Only properties with shapes of the same security level as the coordinating `JSContext` are considered when manipulating a property of a `JSObject`.

With these extensions in place, implementing the multi-execution part is straightforward: we add a loop over all available security levels (starting with the bottom element of our lattice) around the code responsible for compiling and executing JavaScript code. Before each loop, we update the associated security level of the `JSContext`.

#### Implementation of the SME I/O Rules

To intercept DOM API calls, we proceed as follows. Every DOM call from a JavaScript program to its corresponding entry in the C/C++ implemented DOM needs to convert JavaScript values back and forth to their C/C++ counterparts. Within the Mozilla framework, the XPConnect layer handles this task. The existence of this translation layer enables us to easily intercept all the DOM API calls. We instrumented this layer with code that processes each DOM API call according to the SME I/O rules.

For an intercepted invocation of a DOM API method `methodName` with arguments `args` in the execution at level `curLevel`, the processing goes as follows:
1. Consult the policy to determine the level and default value associated with this invocation.
2. If the current execution level and the invocation level are equal, allow the call to proceed and store the result in a cache for later reuse in executions at higher levels.
3. If the current execution is at a higher level, retrieve the result for this call from the result cache and reuse it in the execution at this level.
4. If the current execution level is below the invocation level, return the appropriate default value.

#### Event Handling

Labels for events are specified in the policy by labeling the methods/properties that register event handlers. Low events will be handled by both the low and high execution (in respectively a low and high context). High events will only be handled by the high execution. This is the correct way to deal with events in SME [10].

We augmented the event listener data structure with the SME state and the security level. We adjust the security level and the SME state of the current `JSContext` at the moment of execution of an event handler.

For example, consider the code in Figure 5 that tries to leak the pressed key code. With the policy discussed in Section 3.4 that makes `keypress` a high event, the leak will be closed: the handler will only be installed in the high execution, and that execution will skip the image load that leaks the pressed key.

### Evaluation

We evaluate our FlowFox prototype in three major areas: compatibility with major websites, security guarantees offered, and performance and memory overhead.

#### Compatibility

Since SME is precise [18, §IV.A], theory predicts that FlowFox should not modify the behavior of the browser for sites that comply with the policy. Moreover, SME can sometimes fix interferent executions by providing appropriate default values to the low execution. We perform two experiments to confirm these hypotheses.

In the first experiment, we measure the impact of FlowFox on the visual appearance of websites. We construct an automated crawler that instructs two Firefox browsers and one FlowFox browser to visit the Alexa top 500 websites. FlowFox is configured with a simple policy that makes reading `document.cookie` high. Most websites are expected to comply with this policy. After loading the websites, the crawler dumps a screenshot of each of the three browsers to a bitmap. We then compare these bitmaps as follows:
1. Compute a mask that masks out each pixel in the bitmap that is different in the bitmaps obtained from the two regular Firefox browsers. The mask covers the areas of the site that are different on each load (such as slideshow images, advertisements, timestamps, and so forth). Masks are usually small.
2. Compute the difference between the FlowFox-generated bitmap and either of the two Firefox-generated bitmaps over the unmasked area.

Figures 6 and 7 show the distribution of the relative sizes of the unmasked surface and the differences, respectively.