title:Android ION Hazard: the Curse of Customizable Memory Management
System
author:Hang Zhang and
Dongdong She and
Zhiyun Qian
Android ION Hazard: the Curse of Customizable Memory
Management System
Hang Zhang, Dongdong She, Zhiyun Qian
University of California, Riverside
PI:EMAIL, PI:EMAIL, PI:EMAIL
ABSTRACT
ION is a uniﬁed memory management interface for Android
that is widely used on virtually all ARM based Android de-
vices. ION attempts to achieve several ambitious goals that
have not been simultaneously achieved before (not even on
Linux). Diﬀerent from managing regular memory in the
system, ION is designed to share and manage memory with
special constraints, e.g., physically contiguous memory. De-
spite the great ﬂexibility and performance beneﬁts oﬀered,
such a critical subsystem, as we discover, unfortunately has
ﬂawed security assumptions and designs.
In this paper, we systematically analyze the ION relat-
ed vulnerabilities from the conceptual root causes to the
detailed implementation decisions. Since ION is often cus-
tomized heavily for diﬀerent Android devices, the speciﬁc
vulnerabilities often manifest themselves diﬀerently. By con-
ducting a range of runtime testing as well as static analysis,
we are able to uncover a large number of serious vulnera-
bilities on the latest Android devices (e.g., Nexus 6P run-
ning Android 6.0 and 7.0 preview) such as denial-of-service
and dumping memory from the system and arbitrary appli-
cations (e.g., email content, passwords). Finally, we oﬀer
suggestions on how to redesign the ION subsystem to elim-
inate these ﬂaws. We believe that the lessons learned can
help guide the future design of similar memory management
subsystems.
1.
INTRODUCTION
Android operating system has gained tremendous pop-
ularity in the past few years thanks to the huge vendor
support behind it. Unlike iOS that runs on only Apple-
assembled hardware, Android is open source and encourages
other vendors to build smartphones using it. This model
works well as vendors do not need to build a new OS from
scratch, and they can still heavily customize the phones to
diﬀerentiate themselves on the market. The customization
happens at all layers including hardware, OS, and applica-
tions. Major vendors such as Samsung, HTC, and Huawei
Permission to make digital or hard copies of all or part of this work for personal or
classroom use is granted without fee provided that copies are not made or distributed
for proﬁt or commercial advantage and that copies bear this notice and the full cita-
tion on the ﬁrst page. Copyrights for components of this work owned by others than
ACM must be honored. Abstracting with credit is permitted. To copy otherwise, or re-
publish, to post on servers or to redistribute to lists, requires prior speciﬁc permission
and/or a fee. Request permissions from permissions@acm.org.
CCS’16, October 24-28, 2016, Vienna, Austria
c(cid:2) 2016 ACM. ISBN 978-1-4503-4139-4/16/10. . . $15.00
DOI: http://dx.doi.org/10.1145/2976749.2978320
all perform customizations to attract customers with fea-
tures like better screens, audio, and even security [29]. While
such customization itself is encouraged, it has been shown
that the process of customization at the software layer often
introduces security vulnerabilities [28, 29, 27].
In this study, we investigate an important OS subsystem,
called ION, that is commonly customized to satisfy diﬀerent
requirements from the underlying hardware devices. ION [8]
is a uniﬁed memory management interface widely used on
ARM based Android platforms. First introduced by Google
in Android 4.0, it was initially designed to replace previ-
ous fragmented interfaces originated from System-on-Chip
(SoC) vendors [8]. Its main goal is to support the special
requirements set by hardware devices such as the GPU and
camera. For instance, some devices require physically con-
tiguous memory to operate and some require certain cache
coherency protocol for DMA to function correctly. To sat-
isfy such requirements, on a given Android phone, ION is
customized with a set of pre-conﬁgured memory heaps for
the underlying hardware devices. Even though AOSP pro-
vides a set of pre-deﬁned heap types and implementations
of heap allocation and management, customization is com-
monplace for performance tuning and other purposes (as we
will show in the paper). In addition, for hardware devices
not covered by AOSP, vendors often need to deﬁne new heap
types as well as provide their own implementations of heap
allocation and management.
Unfortunately, the framework for supporting such cus-
tomization is not well thought out regarding its security
implications. For instance, we discover that the lack of ﬁne-
grained access control to individual memory heaps can eas-
ily cause denial-of-service of speciﬁc system services or the
entire OS. Moreover, its buﬀer sharing capability exposes
diﬀerent types of kernel memory to user space without be-
ing screened carefully for security consequences. To demon-
strate the seriousness of the identiﬁed vulnerabilities, attack
demos and analysis can be found on our project website [1].
In this paper, we make three main contributions:
1) We systematically analyze the security properties from
the design and implementation of ION, and reveal two ma-
jor security ﬂaws that lead to many vulnerabilitis and cor-
responding exploits, which are already reported to and con-
ﬁrmed by Google.
2) To detect the speciﬁc instances of vulnerabilities, we
develop both a runtime testing procedure and a novel stat-
ic taint analysis tool that help uncover vulnerabilities on
newest ﬂagship models like Nexus 6P and Samsung S7 run-
ning Android 6.0 and 7.0 preview (latest at the time of writ-
Page source
Is contiguous
Instance
Nexus 6P:system
Nexus 6P:kmalloc
Samsung S7:camera
Nexus 6P:qsecom
Nexus 6P:mm
N/A
N/A
alloc pages() of buddy allocator
alloc pages() of buddy allocator or kmalloc()
preserved memory region, not reusable
preserved memory region, reusable
preserved memory region, reusable
preserved memory region, not reusable
preserved memory region, not reusable
n
y
y
y
y
y
y
n
y
y
Types
SYSTEM
SYSTEM CONTIG
CARVEOUT
CMA
SECURE CMA
CHUNK
REMOVED
EXYNOS
CPUDRAW
EXYNOS CONTIG
Samsung S4:exynos contig heap
preserved memory region, reusable
Samsung S4:exynos noncontig heap
alloc pages() of buddy allocator
1 N/A means that we have not observed actual instances of the heap type
2 Even the same type can have diﬀerent implementations on diﬀerent devices
Huawei Mate8:cpudraw heap
preserved memory region, not reusable
Table 1: ION heap types and instances
ing).
3) By analyzing the root causes of the problem, we propose
an alternative design that preserves the ION functionality
while improving its security stance signiﬁcantly. We believe
the lessons learned can shed light on future designs of cus-
tomizable and extensible memory management system.
The remaining part of the paper will be organized as fol-
§2 will brieﬂy introduce some ION-related back-
lowing:
ground knowledge, §3 will give a thorough analysis of ION
§4 will detail our methodology to
related vulnerabilities,
systematically identify the vulnerabilities on a wide range
§5 will summarize the vulnerabilities
of Android devices,
we found so far on various devices and evaluate the eﬀec-
tiveness of our methodology, §6 will demonstrate our actu-
al exploitations against ION related vulnerabilities on some
representative devices. In §7, we discuss possible defense a-
gainst the vulnerabilities we found. §8 discusses the related
works and §9 will conclude the paper.
2. BACKGROUND
As brieﬂy described, ION is designed to achieve two main
goals. First, it aims to support hardware devices with di-
verse memory requirements. Prior to ION, diﬀerent SoC
vendors achieve this through proprietary and mutually in-
compatible interfaces such as PMEM for Qualcomm, N-
VMAP for Nvidia, and CMEM for TI [8]. System and ap-
plication developers have to customize their code heavily for
all such interfaces to ensure that the code can work across
all diﬀerent platforms. This problem is greatly alleviated
since the introduction of ION that deﬁnes a common in-
terface irrespective of SoC manufacturers. The underlying
implementation in the form of a driver can be customized by
SoC and smartphone vendors to guarantee that they return
the correct type of memory asked by the user space.
As with most interfaces exposed to user space, the uniﬁed
ION interface is exposed through the /dev/ion ﬁle, which
can be manipulated through open() and ioctl() system
calls. The speciﬁc set of supported operations include “al-
loc” and “free”. The user space code needs to specify a heap
id from which the memory should be allocated. As shown in
Figure 1, each ION heap has an assigned name, id, and more
importantly, an associated heap type that is pre-deﬁned for
a particular Android device. Table 1 illustrates the set of
AOSP-deﬁned heap types, along with a selected subset of
customized heap types we encounter in the studied Android
,21,QWHUIDFH
+alloc()
+free()
…
+mmap()
7<3(
7<3(
««
7<3(1
+($3
«
+($3Q
+($3
«
+($3Q
+($3
«
+($3Q
Figure 1: ION Architecture
devices. Even though incomplete, it illustrates the complexi-
ty of ION with heaps of diﬀerent types and properties. Some
heap types may appear to have similar properties: CMA and
SECURE CMA. However, they actually serve diﬀerent pur-
poses. CMA is accessible by third-party apps and system
services. However, SECURE CMA is usually intended to
be used by trusted world (See TrustZone [4]), thus inacces-
sible from user space. Also, we omit another dimension,
cache coherency, which is not the focus of this study.
Generally the heaps fall into two categories: 1) Unre-
served. The most representative one is the SYSTEM heap,
which utilizes the low-level buddy allocator (according to
our analysis) as its memory provider, the same as memo-
ry allocated through malloc(). 2) Reserved. This includes
CARVEOUT and CMA heaps that involve memory set a-
side at boot time so as to combat memory fragmentation at
runtime [23].
The second goal of ION is to allow eﬃcient sharing of
memory between user space, kernel space, and the hardware
devices. This is achieved by sharing memory pages directly
to avoid copying. Speciﬁcally, following the ION interface
explained earlier, once memory is allocated successfully from
a heap, a ﬁle descriptor is returned to user space which can
be subsequently used to invoke mmap() to map the allocated
pages into user space. This feature can be handy in many
scenarios. For instance, in the case where both software
and hardware rendering are needed for graphics processing,
libraries such as OpenGL can manipulate the memory in
user space easily and a GPU can also populate the same
piece of physical memory with zero copying.
3. VULNERABILITY ANALYSIS
So far, we have explained the design philosophy of ION:
1) uniﬁed memory management interface for ease of use and
2) memory sharing support between user and kernel space.
Interestingly, each one introduces a new class of vulnerabil-
ities. In this section, we will unveil the root causes of the
security ﬂaws.
3.1 Problems Introduced by Uniﬁed Interface
As mentioned in §2, ION uses a uniﬁed interface /dev/ion
for all types and instances of memory heaps it manages. Un-
like the general memory allocated through malloc() in user
space, ION heaps come with diﬀerent sizes and purposes,
which require a diﬀerent security design than the one for
general memory.
In Android, an application can allocate
“unlimited” amount of general memory through malloc().
Because it is general memory, applications may have legiti-
mate reasons to allocate and use a large amount of memory
(e.g., 3D gaming apps). The only time when memory allo-
cation fails is when the system is running out of memory.
Unfortunately, ION inherited the security design for gen-
eral memory. There does not exist any limit on how much
memory one can consume in ION heaps, causing poten-
tial DoS attacks. Even worse, due to the fact that third-
party apps have legitimate reasons to allocate memory from
at least one heap type (for graphic buﬀers), the uniﬁed
/dev/ion interface needs to have a relaxed permission that
allows anyone in user space to have access to potentially all
ION heaps. Indeed, on all 17 phones we studied, the ﬁle per-
mission of /dev/ion is always world-readable 1. There exists
no other security mechanisms (e.g., access control) beyond
the ﬁle permission and therefore any app can allocate any
amount of memory from any ION heaps (but no more than
the max available of a certain heap). Due to characteristics
of diﬀerent heap types, such a capability can lead to two
diﬀerent DoS attacks:
For ﬁxed size heaps. Certain ION heap types such as
CARVEOUT and CMA have a pre-determined size and re-
gion from which users can allocate memory from. These
heaps are typically used for various system functionalities,
e.g., “audio” heap is used by “mediaserver” on Nexus 6P to
perform audio playback. As mentioned in §1, during the An-
droid device customization process, the available heap types
and instances are tailored to satisfy the need of hardware de-
vices. In the above example, the “audio” heap is designed to
work with a speciﬁc audio chip. As long as a user exhausts
all free space of a certain heap, related system functionalities
will stop working due to the failure to get required memory
from the speciﬁc heap, e.g., sound/music playback on Nexus
6P will be disabled if “audio” heap is occupied by a malicious
app. In some cases, critical service failure can even cause the
whole system to crash as shown in §6.
For unlimited size heaps. Some heap types, such as
SYSTEM, have no pre-reserved memory regions. Accord-
ing to our analysis, memory allocated from the SYSTEM
heap is not correctly accounted for as part of the memory
usage of the calling process. Thus, from SYSTEM heap a
process can request as much memory as the current system
can supply. When a user process drains too much memory
from such heaps, the performance of the whole system will
1Readable on /dev/ion in fact allows both memory alloca-
tion and memory mapping to user space [8].
be aﬀected. Besides, due to the existence of Android low
memory killer [2], other innocent processes may get killed
to release more memory in such a situation. More detailed
analysis is given in §6.
One may argue that the above problems can be solved
by integrating a general access control or quota limitation
mechanism into current ION interface, however, this may
not be an easy solution as will be discussed in §7.
3.2 Problems Introduced by Buffer Sharing
As mentioned earlier, the zero-copy buﬀer sharing among