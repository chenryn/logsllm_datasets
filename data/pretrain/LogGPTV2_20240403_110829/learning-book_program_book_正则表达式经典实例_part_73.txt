这一点。但是它还是必须匹配IPv4地址部分，从而在顺序环视结尾处的字符串结尾定
位符才能正确产生匹配。
标准、混合或压缩标记法
最后一个正则表达式集合把前面讲到的所有内容都放到了一起。这样就可以匹配到使
用所有标记法的IPv6地址：标准的或混合的，压缩的或不压缩的。
在这些正则表达式中，会把用于压缩混合标记法和压缩（标准）标记法的两个正则式
URL、路径和Internet地址377
www.TopSage.com
---
## Page 394
使用多选结构组合起来。这些正则式已经使用了多选结构来匹配它们所支持的压缩和
非压缩的不同的IPv6标记法。
这样做所得到的正则表达式中会包含3个顶层的选择分支，其中第一个选择分支自身
是由2个选择分支组成的。第一个选择分支会匹配使用混合标记的IPv6地址，其中包
括压缩的和非压缩的形式。第二个选择分支匹配使用标准标记法的IPv6地址。第三个
选择分支会匹配压缩的（标准）标记法。
在这里我们使用了3个顶层的选择分支，而不是使用各自含有2个子选择分支的2个
选择分支，原因是没有什么特别理由把标准和压缩标记法的选择分支放在一起。对于
混合标记法，我们确实要把压缩和非压缩的选择分支放在一起，因为它让我们可以避
免罗列出IPv4部分2次。
根本上来讲，我们把下面这个正则式：
(6words|compressed6words)ip4$
和这个正则式：
^(8words|compressed8words)$
组合成为：
^((6words|compressed6words)ip418words|compressed8words)$
而不是：
^((6words|compressed6words) ip41(8words|compressed8words)) $
参见
实例2.16和实例7.16。
7.18Windows路径的合法性验证
问题描述
你想要检查一个字符串看起来是不是像MicrosoftWindows操作系统上的文件夹或文件
的一个合法路径。
解决方案
盘符路径
1A
[a-z]:\\
#盘符
(?：[\\/：*?"<>/\r\n]+\\)*
#文件夹
378
第7章
www.TopSage.com
---
## Page 395
[\\/:*?"<>1\r\n]*
#文件
\2
正则选项：宽松排列、不区分大小写
正则流派：.NET、Java、PCRE、Perl、Python、Ruby
[a-z]：\\（?：[\\/:*?"<>|\r\n]+\\)*[\\/：*?"<>1\r\n]*$
正则选项：不区分大小写
正则流派：.NET、Java、JavaScript、PCRE、Perl、Python
盘符和UNC路径
\A
(？:[a-z]:{\\[a-z0-9_.$]+\[a-z0-9_.$]+)
#盘符
(？：[\\/:*?"<>1\r\n]+\\) *
#文件夹
[\\/:*?"<>1\r\n]*
#文件
\Z
正则选项：宽松排列、不区分大小写
正则流派：.NET、Java、PCRE、Perl、Python、Ruby
(？:[a-z]：1\1\\[a-z0-9_.$]+\\[a-z0-9_.$]+)\\(？:[\\/:*?"<>1\r\n]+\\)*
[\\/：*?"<>1\r\n]*$
正则选项：不区分大小写
正则流派：.NET、Java、JavaScript、PCRE、Perl、Python
盘符、UNC和相对路径
\A
(？:(？:[a-z]:1\\\\[a-z0-9_.$]+\\[a-20-9_.$]+)\\1
#盘符
\?[\\/:*?"<>/\r\n]+\1?)
#相对URL
(?:[\\/:*?"<>1\r\n]+\\) *
#文件夹
[\\/：*?"<>|\r\n]*
#文件
\Z
正则选项：宽松排列、不区分大小写
正则流派：.NET、Java、PCRE、Perl、Python、Ruby
（？:(？:[a-2]:1\\[a-z0-9_.$]+\\[a-20-9_$]+)\\/\?[\\/:*?<>\r\n]+\\？)
(?：[\\/：*？"<>1\r\n]+\\)*[\\/:*?"<>1\r\n]*$
正则选项：不区分大小写
正则流派：.NET、Java、JavaScript、PCRE、Perl、Python
讨论
盘符路径
匹配包含盘符的驱动器上的文件或文件夹的全路径是非常简单的。驱动器是用单个字
母表示的，之后会跟着一个冒号和反斜杠。我们可以使用[a-z]：l很容易地匹配这个部
分。反斜杠在正则表达式中是一个元字符，所以我们需要使用另外一个反斜杠对它进
行转义，才能对它进行字面上的匹配。
URL、路径和Internet地址
379
www.TopSage.com
---
## Page 396
Windows上的文件夹和文件名中可以包含除了V:*?"|之外的所有字符。另外也不允
许出现换行符。我们可以很容易地使用一个否定字符类^\V:*?"rin]+>来匹配这样
的一个字符序列。反斜杠在字符类中也是一个元字符，所以还需要对它进行转义。（r)
和n>是2个换行字符。关于（否定）字符类的更多信息，请参考实例2.3。后面的加
文件夹之间会使用反斜杠来进行分隔。我们可以用（？：[^\V：*?"<>rn]+\*来匹配
0个或多个文件夹，其中把匹配文件夹名称和一个学面的反斜杠的正则式放到了一
个非捕获分组（实例2.9）中，该分组会使用星号量词（实例2.12）匹配0次或
多次。
要匹配文件名的话，我们可以使用[^\V:*?"rn]*。星号意味着文件名是可以省略
的，因此我们也可以匹配以反斜杠结尾的路径。如果你不想匹配以反斜杠结尾的路径，
那么可以把最后一个正则式中的。
盘符和UNC路径
网络驱动器的文件可以不被映射到盘符之上，访问它的路径可以使用统一命名规范
（UniversalNamingConvention，UNC）路径来访问。UNC路径的形式是
server'sharefolderfile.
我们可以很容易地修改盘符路径的正则表达式来使之也支持UNC路径。我们所要做的
事情只是把用来匹配盘符的部分替换为用来匹配一个盘符或服务器名称的正
则式。
匹配的盘符或者由会被当作一个非
捕获分组的稍微有些复杂的起始括号。位于圆括号之后的问号失去了它通常的
含义。
正则表达式中余下的部分还可以保持不变。在UNC路径中的共享名称可以通过匹配文
件夹名称的正则式部分来匹配。
盘符、UNC和相对路径
相对路径是以文件夹名称作为开始的路径（也有可能是使用特殊文件夹来选择父文件
夹)，或者是只包含一个文件名的路径。为了支持相对路径，我们在正则式中的“驱动
器”部分添加了第3个选择分支。这个选择分支匹配的不是盘符或者服务器名称，而
是会匹配一个相对路径的开始。
380第7章
www.TopSage.com
---
## Page 397
会匹配相对路径的开始部分。路径可以用反斜杠作为开始，但
是它并不一定非要是这样。川?>会匹配一个反斜杠，或署什么也不匹配。
会匹配一个文件夹或者文件名。如果相对路径中只包含一个文件名，
那么最后的?不会匹配到任何内容，而且这个正则式中的“文件夹”和“文件”部
分也不会匹配到任何内容，因为这二者也都是可以省略的。如果相对路径中指定了文
件夹，那么最后的会匹配用来分隔相对路径中第一个文件夹和路径中其余部分的
反斜杠。“文件夹”部分则会匹配文件名。
用来匹配相对路径的正则表达式无法再使用正则式中的独立部分来恰好匹配自标文
本中的独立部分。如果路径是相对，那么被标记为“相对路径”的正则式部分实际上
，，受岁城
和“文件”部分就无法匹配到任何内容。因为我们只对检查路径的合法性感兴趣，所
以这样做并不会产生任何问题。正则式中包含的注释只是为了更加容易理解而添加的
标签。
如果我们想要把路径中的不同部分提取到捕获分组中，那么我们就不得不更加谨慎地
分别匹配驱动器、文件夹和文件名。下一个实例会用来讲解这个问题。
参见
实例2.3、实例2.8、实例2.9和实例2.12。
7.19分解Windows路径
问题描述
你想要检查一个字符串看起来是否像是指向MicrosoftWindows操作系统上的文件夹或
文件的一个合法路径。如果该字符事中保存的是一个合法的Windows路径，那么你还
想要分别抽取其中的驱动器、文件夹和文件名部分。
解决方案
盘符路径
\A
(?[a=z]:)\\
(?(?:[^\\/:*?"<>1\r\n]+\\)*)
(?[\\/:*?"<>|\r\n] *)
\z
正则选项：宽松排列、不区分大小写
URL、路径和Internet地址
381
www.TopSage.com
---
## Page 398
正则流派：.NET、PCRE 7、Per15.10、Ruby1.9
\A
(?P[a-z]:)\\
(?P(?:[^\\/:*?"<>1\r\n]+\\)*)
([u\x\1<>：/\]<>)
\Z
正则选项：宽松排列、不区分大小写
正则流派：PCRE4及更高版本、Per15.10、Python
\A
([a-z]:)\\
（（？:[\\/:*？"<>/\r\n]+\\)*)
（[\\/:*？"<>1\r\n]*）
\2
正则选项：宽松排列、不区分大小写
正则流派：.NET、Java、PCRE、Perl、Python、Ruby
s（+[u\x\<>：/\]）（（\+[u\x\1<>：/\\]:））（：[2-）
正则选项：不区分大小写
正则流派：.NET、Java、JavaScript、PCRE、Perl、Python
盘符和UNC路径
\A
(?[a-z]:1\\1\[a-z0-9_.$]+\\[a-z0-9_.$]+)\\
(?(？:[\\/:*?"<>/\r\n]+\\)*)
(+[u\x\1<>：/\]<>)
正则选项：宽松排列、不区分大小写
正则流派：.NET、PCRE 7、Per15.10、Ruby1.9
\A
(?P[a-z]:1\\\\[a-z0-9_.$]+\\[a-z0-9_.$]+)\\
(?P(？:[\\/:*?"<>1\r\n]+\\)*)
(?P[^\\/:*?"<>1\r\n]*)
\2
正则选项：宽松排列、不区分大小写
正则流派：PCRE4及更高版本、Per15.10、Python
\A
([a-z]:\[a-z0-9_.$]+\\[a-z0-9_.$]+)\\
（(？：[\\/：*？"<>1\r\n]+\\)*）
([\\/：*?"<>1\r\n]*）
\2
正则选项：宽松排列、不区分大小写
正则流派：.NET、Java、PCRE、Perl、Python、Ruby
（[a-z]：1\1\\[a-20-9_.$]+\\[a-z0-9_.$]+)\\（(？:[\\/:*?"<>/\r\n]+\\)*
([\\/：*?"<>|\r\n]*）S
正则选项：不区分大小写
正则流派：.NET、Java、JavaScript、PCRE、Perl、Python
382
第7章
www.TopSage.com
---