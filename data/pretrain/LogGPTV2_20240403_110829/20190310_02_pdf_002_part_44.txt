### 10.3.7 ALTER TABLE… MOVE PARTITION

The `ALTER TABLE… MOVE PARTITION` command is used to move a partition or subpartition to a different tablespace. This command can be used in two forms:

#### 1. Moving a Partition
```sql
ALTER TABLE table_name
MOVE PARTITION partition_name
TABLESPACE tablespace_name;
```

#### 2. Moving a Subpartition
```sql
ALTER TABLE table_name
MOVE SUBPARTITION subpartition_name
TABLESPACE tablespace_name;
```

#### Description
- The `ALTER TABLE… MOVE PARTITION` command moves a partition from its current tablespace to a different tablespace.
- This command can be used with LIST, RANGE, or HASH partitioned tables.
- You must own the table to execute this command.

#### Parameters
- **table_name**: The name (optionally schema-qualified) of the table containing the partition or subpartition.
- **partition_name**: The name of the partition to be moved.
- **subpartition_name**: The name of the subpartition to be moved.
- **tablespace_name**: The name of the tablespace to which the partition or subpartition will be moved.

#### Example - Moving a Partition to a Different Tablespace
1. Create the `sales` table with the following command:
    ```sql
    CREATE TABLE sales
    (
        dept_no NUMBER,
        part_no VARCHAR2,
        country VARCHAR2(20),
        date DATE,
        amount NUMBER
    )
    PARTITION BY RANGE(date)
    (
        PARTITION q1_2012 VALUES LESS THAN ('2012-Apr-01'),
        PARTITION q2_2012 VALUES LESS THAN ('2012-Jul-01'),
        PARTITION q3_2012 VALUES LESS THAN ('2012-Oct-01'),
        PARTITION q4_2012 VALUES LESS THAN ('2013-Jan-01') TABLESPACE ts_1,
        PARTITION q1_2013 VALUES LESS THAN ('2013-Mar-01') TABLESPACE ts_2
    );
    ```

2. Query the `ALL_TAB_PARTITIONS` view to confirm the partitions' tablespaces:
    ```sql
    SELECT partition_name, tablespace_name FROM ALL_TAB_PARTITIONS;
    ```

3. Move the `q1_2013` partition from `ts_2` to `ts_3`:
    ```sql
    ALTER TABLE sales MOVE PARTITION q1_2013 TABLESPACE ts_3;
    ```

4. Verify the move by querying the `ALL_TAB_PARTITIONS` view again:
    ```sql
    SELECT partition_name, tablespace_name FROM ALL_TAB_PARTITIONS;
    ```

### 10.3.8 ALTER TABLE… RENAME PARTITION

The `ALTER TABLE… RENAME PARTITION` command is used to rename a partition or subpartition. This command can be used in two forms:

#### 1. Renaming a Partition
```sql
ALTER TABLE table_name
RENAME PARTITION partition_name
TO new_name;
```

#### 2. Renaming a Subpartition
```sql
ALTER TABLE table_name
RENAME SUBPARTITION subpartition_name
TO new_name;
```

#### Description
- The `ALTER TABLE… RENAME PARTITION` command renames a partition.
- You must own the specified table to execute this command.

#### Parameters
- **table_name**: The name (optionally schema-qualified) of the table containing the partition or subpartition.
- **partition_name**: The name of the partition to be renamed.
- **subpartition_name**: The name of the subpartition to be renamed.
- **new_name**: The new name for the partition or subpartition.

#### Example - Renaming a Partition
1. Create a list-partitioned `sales` table:
    ```sql
    CREATE TABLE sales
    (
        dept_no NUMBER,
        part_no VARCHAR2,
        country VARCHAR2(20),
        date DATE,
        amount NUMBER
    )
    PARTITION BY LIST(country)
    (
        PARTITION europe VALUES('FRANCE', 'ITALY'),
        PARTITION asia VALUES('INDIA', 'PAKISTAN'),
        PARTITION americas VALUES('US', 'CANADA')
    );
    ```

2. Query the `ALL_TAB_PARTITIONS` view to display the partition names:
    ```sql
    SELECT partition_name, high_value FROM ALL_TAB_PARTITIONS;
    ```

3. Rename the `americas` partition to `n_america`:
    ```sql
    ALTER TABLE sales
    RENAME PARTITION americas TO n_america;
    ```

4. Verify the renaming by querying the `ALL_TAB_PARTITIONS` view again:
    ```sql
    SELECT partition_name, high_value FROM ALL_TAB_PARTITIONS;
    ```

### 10.3.9 DROP TABLE

The `DROP TABLE` command is used to remove a partitioned table and all its data. The syntax is:

```sql
DROP TABLE table_name;
```

#### Parameters
- **table_name**: The name (optionally schema-qualified) of the partitioned table.

#### Description
- The `DROP TABLE` command removes the entire table and its data, including all partitions and subpartitions.
- To use this command, you must be the owner of the partitioning root, a member of a group that owns the table, the schema owner, or a database superuser.

#### Example
1. Delete the `sales` table:
    ```sql
    DROP TABLE sales;
    ```

2. The server will confirm that the table has been dropped:
    ```sql
    acctg=# drop table sales;
    DROP TABLE
    acctg=#
    ```

For more information about the `DROP TABLE` command, refer to the PostgreSQL core documentation: [PostgreSQL Documentation](https://www.postgresql.org/docs/11/static/sql-droptable.html)

### 10.3.10 ALTER TABLE… DROP PARTITION

The `ALTER TABLE… DROP PARTITION` command is used to delete a partition and its data. The syntax is:

```sql
ALTER TABLE table_name DROP PARTITION partition_name;
```

#### Parameters
- **table_name**: The name (optionally schema-qualified) of the partitioned table.
- **partition_name**: The name of the partition to be deleted.

#### Description
- The `ALTER TABLE… DROP PARTITION` command deletes a partition and any data stored in it.
- This command can be used with LIST or RANGE partitioned tables but not with HASH partitioned tables.
- To use this command, you must be the owner of the partitioning root, a member of a group that owns the table, or have database superuser or administrative privileges.

#### Example - Deleting a Partition
1. Create the `sales` table:
    ```sql
    CREATE TABLE sales
    (
        dept_no NUMBER,
        part_no VARCHAR2,
        country VARCHAR2(20),
        date DATE,
        amount NUMBER
    )
    PARTITION BY LIST(country)
    (
        PARTITION europe VALUES('FRANCE', 'ITALY'),
        PARTITION asia VALUES('INDIA', 'PAKISTAN'),
        PARTITION americas VALUES('US', 'CANADA')
    );
    ```

2. Query the `ALL_TAB_PARTITIONS` view to display the partition names:
    ```sql
    SELECT partition_name, high_value FROM ALL_TAB_PARTITIONS;
    ```

3. Delete the `americas` partition:
    ```sql
    ALTER TABLE sales DROP PARTITION americas;
    ```

4. Verify the deletion by querying the `ALL_TAB_PARTITIONS` view again:
    ```sql
    SELECT partition_name, high_value FROM ALL_TAB_PARTITIONS;
    ```

### 10.3.11 ALTER TABLE… DROP SUBPARTITION

The `ALTER TABLE… DROP SUBPARTITION` command is used to delete a subpartition and its data. The syntax is:

```sql
ALTER TABLE table_name DROP SUBPARTITION subpartition_name;
```

#### Parameters
- **table_name**: The name (optionally schema-qualified) of the partitioned table.
- **subpartition_name**: The name of the subpartition to be deleted.

#### Description
- The `ALTER TABLE… DROP SUBPARTITION` command deletes a subpartition and the data stored in it.
- To use this command, you must be the owner of the partitioning root, a member of a group that owns the table, or have superuser or administrative privileges.

#### Example - Deleting a Subpartition
1. Create the `sales` table:
    ```sql
    CREATE TABLE sales
    (
        dept_no NUMBER,
        part_no VARCHAR2,
        country VARCHAR2(20),
        date DATE,
        amount NUMBER
    )
    PARTITION BY RANGE(date)
    SUBPARTITION BY LIST (country)
    (
        PARTITION first_half_2012 VALUES LESS THAN('01-JUL-2012')
        (
            SUBPARTITION europe VALUES ('ITALY', 'FRANCE'),
            SUBPARTITION americas VALUES ('CANADA', 'US'),
            SUBPARTITION asia VALUES ('PAKISTAN', 'INDIA')
        ),
        PARTITION second_half_2012 VALUES LESS THAN('01-JAN-2013')
    );
    ```

2. Query the `ALL_TAB_SUBPARTITIONS` view to display the subpartition names:
    ```sql
    SELECT subpartition_name, high_value FROM ALL_TAB_SUBPARTITIONS;
    ```

3. Delete the `americas` subpartition:
    ```sql
    ALTER TABLE sales DROP SUBPARTITION americas;
    ```

4. Verify the deletion by querying the `ALL_TAB_SUBPARTITIONS` view again:
    ```sql
    SELECT subpartition_name, high_value FROM ALL_TAB_SUBPARTITIONS;
    ```

---

This document provides a clear and structured guide on how to manage partitions and subpartitions in a database, including moving, renaming, and deleting them.