title:Design and implementation of a framework for software-defined middlebox
networking
author:Aaron Gember and
Robert Grandl and
Junaid Khalid and
Aditya Akella
Design and Implementation of a Framework for
Software-Deﬁned Middlebox Networking
Aaron Gember, Robert Grandl, Junaid Khalid, Aditya Akella
University of Wisconsin-Madison, Madison, WI, USA
{agember,rgrandl,junaid,akella}@cs.wisc.edu
Categories and Subject Descriptors
C.2.3 [Network Operations]: Network management
Keywords
Middlebox; Software-deﬁned networking
1. MOTIVATION
Middleboxes (MBs) are used widely to ensure security
(e.g., intrusion detection systems), improve performance (e.g.,
WAN optimizers), and provide other novel network func-
tionality [4, 6]. Recently, researchers have proposed several
new architectures for MB deployment, including Stratos [2],
CoMb [4], and APLOMB [6]. These frameworks all advo-
cate dynamic deployment of software-based MBs with the
goal of increasing ﬂexibility, improving eﬃciency, and re-
ducing management overhead.
However, approaches for controlling the behavior of MBs
(i.e., how MBs examine and modify network traﬃc) remain
limited. Today, conﬁguration policies and parameters are
manipulated using narrow, MB-speciﬁc conﬁguration inter-
faces, while internal algorithms and state are completely
inaccessible and unmodiﬁable. This apparent lack of ﬁne-
grained control over MBs and their state precludes correct
and performant implementation of control scenarios that in-
volve re-allocating live ﬂows across MBs: e.g., server mi-
gration, scale up/down of MBs to meet cost-performance
trade-oﬀs, recovery from network or MB failures, etc.
Several key requirements must be satisﬁed to eﬀectively
support the above scenarios. To illustrate these require-
ments, we consider a scenario where MB instances are added
and removed based on current network load [2] (Figure 1).
When scaling up, some in-progress ﬂows may need to be
moved to a new MB instance to reduce the load on the orig-
inal instance. To preserve the correctness and ﬁdelity of
MB operations, the new instance must receive the internal
MB state associated with the moved ﬂows, while the old
instance still has the internal state associated with the re-
maining ﬂows. For some MBs (e.g., an intrusion prevention
Permission to make digital or hard copies of part or all of this work for
personal or classroom use is granted without fee provided that copies are
not made or distributed for proﬁt or commercial advantage and that copies
bear this notice and the full citation on the ﬁrst page. Copyrights for third-
party components of this work must be honored. For all other uses, contact
the owner/author(s).
SIGCOMM’13, August 12–16, 2013, Hong Kong, China.
ACM 978-1-4503-2056-6/13/08.
Figure 1: Horizontal scaling of MBs
system (IPS) this means we need the ability to move internal
MB state at ﬁne granularity. For other MBs (e.g., a redun-
dancy elimination (RE) system) we instead need the ability
to clone shared internal MB state. Regardless of the type of
MB being scaled, we want the new MB instance to behave
the same as the original, requiring the ability to clone and
dynamically modify MB conﬁgurations. When scaling down,
we need to consolidate several MB instances into fewer in-
stances, requiring the ability to merge internal MB state
from multiple MBs. Finally, we need the ability to coor-
dinate MB state changes with network routing changes; this
ensures ﬂows aren’t directed to MB instances until they have
the necessary state.
Existing techniques—e.g., virtual machine snapshots, joint
control of MB conﬁguration and network routing [5], and
application-level libraries [3]—can address some of these re-
quirements, but these approaches have limited applicability
and tend to reduce performance or cause correctness issues.
2. OBJECTIVE & CHALLENGES
Inspired by software-deﬁned networking (SDN), we ad-
vocate for the development of a software-deﬁned middlebox
networking (SDMBN) framework to address the above re-
quirements. An ideal SDMBN framework oﬀers useful ab-
stractions for ﬁne-grained, software-driven control of MB in-
ternals without wresting too much control away from the
MBs themselves. Such a carefully balanced framework can
simplify management of complex MB deployments and en-
gender a variety of rich dynamic MB control scenarios.
Designing an SDMBN framework requires addressing two
key roadblocks. First, compared to switch forwarding state,
MB state is highly diverse. A single MB may receive dozens
of conﬁguration inputs and its internal logic may establish
and manipulate hundreds of pieces of in-depth state whose
structure and semantics varies signiﬁcantly across MB types
and vendors. Second, internal MB logic is complex. Each
MB features intricate and unique packet processing logic
that is closely tied to internal state; unlike network switches,
there is not a clean separation between control and data
planes.
467Figure 2: OpenMB architecture and example
Figure 3: Actions/events during scale up scenario
3. FRAMEWORK DESIGN
We design and implement OpenMB, an exemplar SDMBN
framework that overcomes the above challenges. OpenMB
represents one point in the SDMBN design space, carefully
trading-oﬀ some opportunities for vendor optimizations in
exchange for increased control application ﬂexibility. Its de-
sign is based on: (i) our observation that diﬀerent MBs have
commonalities in the role (conﬁguring, supporting, or re-
porting) and partitioning (per-ﬂow or shared) of pieces of
MB state; and (ii) a careful division of responsibility for
state changes—MBs are responsible for creating and modi-
fying supporting and reporting state, as they do today, and
control applications are responsible for manipulating where
speciﬁc pieces of supporting and reporting state reside, as
well as creating and updating all conﬁguration state.
OpenMB’s architecture consists of an MB controller, con-
trol applications, and slightly modiﬁed MBs as shown in
Figure 2. Our MB-facing (“southbound”) API deﬁnes how
MB state is represented and how it can be access and ma-
nipulated at ﬁne-granularity. In particular, state is repre-
sented as key-value pairs, with the key being either a string
constant (for conﬁguration state) or a ﬂow identiﬁer simi-
lar to the OpenFlow 10-tuple (for supporting and reporting
state). State is installed in and retrieved from MBs using
simple get, put, and delete calls. The southbound API also
includes an event abstraction that allows MBs to notify the
controller when they internally create or manipulate state.
This model (unlike Split/Merge [3]) allows MBs to continue
processing traﬃc while state is being moved or cloned and
still guarantees the state is consistent and correct.
Our application-facing (“northbound”) API encapsulates
the intricacies of state operations on individual MBs by ex-
posing a set of high-level operations (move, clone, merge,
etc.)
to control applications. The MB controller brokers
these operations, issuing the appropriate southbound API
calls directly to MBs, buﬀering and forwarding events, and
dealing with operation failures. Exposing a separate API to
control applications simpliﬁes application design and limits
the potential for applications to make state changes that will
lead to correctness or performance issues.
Figure 2 shows the API calls invoked in the case of MB
scale up. The scale up control application ﬁrst issues the
northbound API call move(k) to transfer a subset of state,
identiﬁed by the key k, from MB A to MB B. The MB con-
troller subsequently issues a series of southbound API calls
to the appropriate MBs: it issues get(k) to MB A, receives
state s, and issues put(s) to MB B. If a packet p is received
by MB A during these operations and the processing of this
packet involves a change to the state s, then MB A raises
a re-process event for p; the controller passes event[p] to
MB B, which makes the necessary changes to s. When move
returns successfully, the application triggers an update of
network forwarding state by issuing the call route(k,r) to
the SDN controller to change the forwarding for ﬂows iden-
tiﬁed by the key k to the route r. Finally, the MB controller
issues a del(k) to MB A to ﬂush the transfered state s which
MB A no longer needs.
4.
IMPLEMENTATION & DEMO
We have implemented a prototype of OpenMB consisting
of an MB controller that implements our northbound API,
four MBs—an intrusion prevention system (Bro), a traﬃc
monitor (Prads), a redundancy elimination system (Smart-
RE [1]), and a network address translator (iptables)—mod-
iﬁed to support our southbound API, and control applica-
tions for MB scaling and server migration scenarios. Our
MB controller is implemented as a module (≈ 1700 LOC)
running atop the Floodlight OpenFlow controller. The MB
controller is event driven to maximize scalability and eﬃ-
ciency. JSON messages are exchanged by the controller and
MBs to invoke operations, send/receive state, and raise/for-
ward events. The four modiﬁed MBs rely on a common
code base (≈1100 LOC) for MB-controller communications;
additional MB-speciﬁc modiﬁcations are made to retrieve,
insert, and remove state and to generate and process events.
Our demonstration uses this prototype to illustrate how
OpenMB helps achieve dynamic ﬁne-grained control in MB
scaling and server migration scenarios. We show in real-time
the sequence of actions performed by a control application,
the MB controller, and MBs themselves. For example, Fig-
ure 3 shows the packet processing, API calls, and event rais-
ing/processing that occurs over a 3-second window when a
Prads MB is scaled up and HTTP ﬂows are moved to a new
(top) Prads instance; the solid lines indicate the start and
end of the get call issued to the original Prads instance, and
the dashed lines indicate the start of the ﬁrst and end of the
last put call issued to the new Prads instance.
5. REFERENCES
[1] A. Anand, V. Sekar, and A. Akella. SmartRE: An
Architecture for Coordinated Network-wide
Redundancy Elimination. In SIGCOMM, 2009.
[2] A. Gember, A. Krishnamurthy, S. St. John, R. Grandl,
X. Gao, A. Anand, T. Benson, A. Akella, and V. Sekar.
Stratos: A Network-Aware Orchestration Layer for
Middleboxes in the Cloud. Technical Report
arXiv:1305.0209, 2013.
[3] S. Rajagopalan, D. Williams, H. Jamjoom, and
A. Warﬁeld. Split/Merge: System Support for Elastic
Execution in Virtual Middleboxes. In NSDI, 2013.
[4] V. Sekar, N. Egi, S. Ratnasamy, M. Reiter, and G. Shi.
Design and Implementation of a Consolidated
Middlebox Architecture. In NSDI, 2012.
[5] V. Sekar, R. Krishnaswamy, A. Gupta, and M. K.
Reiter. Network-Wide Deployment of Intrusion
Detection and Prevention Systems. In CoNEXT, 2010.
[6] J. Sherry, S. Hasan, C. Scott, A. Krishnamurthy,
S. Ratnasamy, and V. Sekar. Making Middleboxes
Someone Else’s Problem: Network Processing as a
Cloud Service. In SIGCOMM, 2012.
468