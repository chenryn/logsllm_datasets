title:NetAssay: providing new monitoring primitives for network operators
author:Sean P. Donovan and
Nick Feamster
NetAssay: Providing New Monitoring Primitives for
Network Operators
Sean Donovan
Georgia Institute of Technology
PI:EMAIL
Nick Feamster
Georgia Institute of Technology
PI:EMAIL
ABSTRACT
Home and business network operators have limited network
statistics available over which management decisions can be
made. Similarly, there are few triggered behaviors, such
as usage or bandwidths cap for individual users, that are
available. By looking at sources of traﬃc, based on Do-
main Name System (DNS) cues for content of particular
web addresses or source Autonomous System (AS) of the
traﬃc, network operators could create new and interesting
rules for their network. NetAssay is a Software-Deﬁned Net-
working (SDN)-based, network-wide monitoring and reac-
tion framework. By integrating information from Border
Gateway Protocol (BGP) and the Domain Name System,
NetAssay is able to integrate formerly disparate sources of
control information, and use it to provide better monitor-
ing, more useful triggered events, and security beneﬁts for
network operators.
Keywords
Network monitoring, network management, software-deﬁned
networking
1.
INTRODUCTION
Network management is a complex area. On stub net-
works, where the network is only a client to other networks,
monitoring user behavior is limited. Bandwidth monitor-
ing at the port or address level is among the more complex
operations that are available. Similarly, triggered behaviors
such as usage caps are limited. More complex behavior is
available, primarily in highly specialized security appliances,
however these are not general purpose devices.
What is needed is a generalized system that can monitor
network activity and produce behaviors based on high level
policies. For instance, a network operator would like to know
how much video traﬃc each user is consuming. Right now,
there is no easy way of doing this.
NetAssay is being developed to make it easy for network
In the video band-
operators to implement such policies.
Permission to make digital or hard copies of part or all of this work for personal or
classroom use is granted without fee provided that copies are not made or distributed
for proﬁt or commercial advantage, and that copies bear this notice and the full ci-
tation on the ﬁrst page. Copyrights for third-party components of this work must be
honored. For all other uses, contact the owner/author(s). Copyright is held by the
author/owner(s).
SIGCOMM’14, August 17–22, 2014, Chicago, IL, USA.
ACM 978-1-4503-2836-4/14/08.
http://dx.doi.org/10.1145/2619239.2631451.
width example, NetAssay needs to decide what network
ﬂows are video traﬃc. Traﬃc coming from
googlevideo.com will be classiﬁed as video, as could any traf-
ﬁc associated with AS 2906, Netﬂix’s AS. Identifying the
user, at least on a stub network, can be done a number of
ways, such as statically assigned IPs or MAC addresses. A
policy for this could be expressed as:
video-count-Bob = count_bytes(3600,[’src-ip’])
video-count-Bob.register_callback(check_video_count)
video-from-Bob = match(srcip = 198.51.100.8) &
(matchAS(2906) | matchClass(’video’))
pol = video-from-Bob >> video-count-Bob
More interesting triggered behaviors are also possible. Con-
tinuing the above example, being able to react to Bob’s ex-
cessive video consumption is desirable. For instance, being
able to redirect Bob’s video traﬃc through a rate limited
link could be a useful policy to implement.
As a further, more security oriented example, a network
operator has blacklists of ASes and domains that are asso-
ciated with malicious behavior, but do host some legitimate
content that should still be accessible. In this case, if a con-
nection was destined for an IP associated with a potentially
malicious AS, the network could automatically redirect traf-
ﬁc to a virus scanning appliance, rather than needing to send
all traﬃc through the appliance. Another use would be to
set a limit for amount of data that would be sent to a black-
listed AS before blocking connections, due to suspected bad
behavior.
Similar triggered behaviors have been described in prior
works [5][1], however this has been limited to network secu-
rity security devices.
2. DESIGN
NetAssay is SDN-based system running on Pyretic [3], an
easy to use and extend SDN programming language. Net-
Assay is divided into two sections, as can be seen in Fig-
ure 1. These are the monitoring modules, two of which are
described below, that provide traﬃc identiﬁcation and mon-
itoring information to the main control module (MCM). The
MCM is responsible for combining the results from the mon-
itoring modules, and triggering the reactive policies deﬁned
by the network operator.
2.1 Monitoring Modules
The monitoring modules perform two major functions:
identifying ﬂows that belong to a particular category and
monitoring information related to that category. To iden-
tify ﬂows, the modules can use information gleamed from
345Figure 1: NetAssay architecture
monitoring network ﬂows or from external data sources. The
monitoring modules are designed such that new modules can
be added in the future.
2.2 DNS and BGP Handlers
For the initial implementation, there are two modules be-
ing developed. Both are similar in design, but use diﬀerent
sources of information. The ﬁrst, a DNS-based handler, will
be described in detail, while the BGP-based handler will be
quickly described.
The DNS handler which contains two parts, a ﬂow clas-
siﬁer based on part of FlowQoS [4] and a metadata en-
gine. To perform ﬂow classiﬁcation, two pieces of informa-
tion are needed: URL-to-classiﬁcation mapping and IP-to-
URL mapping. The URL-to-classiﬁcation mapping is men-
tioned above where googlevideo.com maps to ‘video’. This is
a manual lookup, implemented as regular expression match-
ing. The IP-to-URL mapping is based on monitoring DNS
responses. At initialization, rules are installed at all ingress
network devices to make a copy of DNS responses, forward
one to the actual destination, and forward the second to
the DNS handler. The ﬂow classiﬁer then extracts the do-
mains and associated IP addresses, and uses the URL-to-
classiﬁcation mapping to determine what type of traﬃc is
associated with a particular IP address. The metadata en-
gine handles policy implementation for DNS-based classi-
ﬁcation. The metadata engine is responsible for breaking
down the high-level policies passed from the MCM into the
constituent components, and handling any changes that my
occur dynamically (i.e., when a new DNS response comes
in, or DNS response time-to-live (TTL) is reached).
It is
also responsible for aggregating data, such as aggregating
the number of bytes transferred by video sources.
To go over the example above, if during the example above
a DNS response from googlevideo.com with associated IP of
198.51.100.8 was seen, the URL will be classiﬁed as video,
and, as such, traﬃc coming from 198.51.100.8 would be clas-
siﬁed as video. This will cause the matchClass policy to gen-
erate a new match action to run in parallel with any preex-
isting actions associated with video traﬃc.
To allow for rules based on traﬃc related to a particular
AS, BGP information is necessary. NetAssay uses an exter-
nal source of BGP information. This could be a connection
to a local BGP server, or could be a static database of known
Figure 2: Behavior of NetAssay’s DNS handler clas-
sifying a video ﬂow.
routes. The BGP information source plays a similar role to
the Flow Classiﬁer in the DNS handler: it provides a lookup
source for AS routes, and, more importantly, ranges of ad-
dresses controlled by a particular AS.
3. PROGRESS AND FUTURE WORK
Work on NetAssay is ongoing. Design work on the two
handlers is complete, with implementation and testing on-
going. Triggered behaviors is the current area of focus. Fur-
ther simpliﬁcation to reduce the policy in the introduction
to be a single line, is desired.
Future work, beyond ﬁnishing implementation and test-
ing, primarily focuses on optimization. Proactive DNS look
ups from various public DNS sources provides a broader data
set. Additionally, handling conﬂicts between handlers’ poli-
cies needs to be addressed, both with data ﬂows and poten-
tial ‘double counting’ between multiple handlers.
Further work incorporating this system into an Internet
Exchange Point, particularly in the form of SDX [2], is a
natural next step
4. REFERENCES
[1] J. R. Ballard, I. Rae, and A. Akella. Extensible and
scalable network monitoring using opensafe.
Proceedings of USENIX Internet Network Management
Workshop/Workshop on Research on Enterprise
Networking, 2010.
[2] A. Gupta, L. Vanbever, M. Shahbaz, S. Donovan,
B. Schlinker, N. Feamster, J. Rexford, S. Shenker,
R. Clark, and E. Katz-Bassett. Sdx: A software deﬁned
internet exchange. Proceedings of the ACM SIGCOMM
2014 conference, 2014. To Appear.
[3] J. Reich, C. Monsanto, N. Foster, J. Rexford, and
D. Walker. Modular sdn programming with pyretic.
USENIX ;login,, 38(5):128–134.
[4] M. S. Seddiki, M. Shahbaz, S. Donovan, S. Grover,
M. Park, N. Feamster, and Y.-Q. Song. Flowqos: Qos
for the rest of us. HotSDN 2014, 2014. To Appear.
[5] S. Shin and G. Gu. Cloudwatcher: Network security
monitoring using openﬂow in dynamic cloud networks.
20th IEEE International Conference on Network
Protocols, 2012.
346