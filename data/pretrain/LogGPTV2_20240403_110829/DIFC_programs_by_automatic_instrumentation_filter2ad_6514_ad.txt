Equivalently:
posY ⊆ posX ∪ createsY
negY ⊆ negX ∪ createsY
Finally, Swim ensures that no tag identiﬁer τ is bound at
multiple templates. Formally:
∀X, Y, τ. X (cid:54)= Y =⇒ τ (cid:54)∈ (createsX ∩ createsY )
Equivalently: (cid:94)
X(cid:54)=Y ∈Vars(
−→
P )
createsX ∩ createsY = ∅
Swim conjoins these constraints with the constraints gener-
−→
ated from applying SemCtrs to all equations in
P to form
a system of constraints ϕSem. Any solution to ϕSem corre-
sponds to a program in which each process manipulates la-
bels as allowed by Flume.
Figure 4: The spawn graph of the server from Fig. 1.
The dotted and dashed paths indicate process exe-
cutions that show that init cannot be used to create
tags that isolate Workers.
3.3.3 Generating Policy Constraints
Swim must also generate constraints that ensure that the
instrumented program satisﬁes the instrumentation condi-
tions of §3.2.2. To do so, Swim generates constraints for
each ﬂow assertion in the policy.
First, suppose that Swim is given a secrecy assertion
Secrecy( Source, Sink, Declass, Anc). The assertion induces a
secrecy instrumentation condition. To instrument the pro-
gram to respect this condition, Swim generates constraints
that encode that, for processes p ∈ Source and q ∈ Sink that
do not share an ancestor in Anc, information cannot ﬂow
from p to q solely through processes that are not in Declass.
To describe how Swim achieves this, we consider exam-
ple executions that would violate the secrecy assertion. To
describe these executions, we use the spawn graph of a pro-
gram:
−→
Def. 1. For a CSPDIFC program
−→
P , the spawn graph
−→
of
P is a graph that represents the “spawns” relation over
process templates. Formally,
P is
G−→
P = (N, E), where for every template variable P , node
P ), and (nP , nQ) ∈ E(G−→
nP ∈ N (G−→
P ) if and only if a pro-
cess p ∈ P may spawn process p(cid:48) ∈ Q.
the spawn graph of
The spawn graph of the program from Fig. 1 is given in
Fig. 4.
Exa. 7. Consider the server from Fig. 1 and the secrecy
assertion that no Workers executing W should be able to com-
municate information to each other unless the information
ﬂows through a proxy: Secrecy(W, W,{P1, P3, P5}, A1). Sup-
pose that Swim generated no constraints to ensure that the
instrumented program followed this assertion. Swim might
then instrument the program to create no tags. One execu-
tion of the program could then create a Worker process p by
executing the series of templates init, A1, A2, A3, A5, A6,
A7, and W (the dotted path in Fig. 4), and create another
Worker process q by executing templates init, A1, A2, A3,
A5, A6, A7, A1, A2, A3, A5, A6, A7, and W (the dashed
path in Fig. 4). The label of p would then be a subset of the
label of q, and thus p could send information to q.
To guard against executions such as those in Exa. 7 for an as-
sertion Secrecy(Source, Sink, Declass, Anc), Swim could gen-
erate the constraint labSource (cid:54)⊆ labSink. However, this con-
straint may not allow Swim to ﬁnd valid instrumentations
of the program in important cases.
Exa. 8. Suppose that for an assertion Secrecy( Source,
Sink, Declass, Anc), Swim generated the
constraint
labSource (cid:54)⊆ labSink. Then for the server of Fig. 1 and secrecy
A1A7P1A6A5RinitP5P3WA3A2291assertion of Exa. 7, the resulting constraint, labW (cid:54)⊆ labW , is
unsatisﬁable, and Swim would fail to instrument the server.
However, if Swim rewrote the server to create a tag each
time a process executed template A1, bind the tag to an iden-
tiﬁer τ , and place the tag in the label of the next Worker
spawned, then all Worker processes would be isolated.
By contrast, if Swim rewrote the server to create a tag
each time a process executed template init, bind the tag to an
identiﬁer τ , and place the tag in the label of the next Worker
spawned, then there would be executions of the instrumented
program in which Worker processes were not isolated. For
example, the Workers described in Exa. 7 would have in their
labels the same tag bound to τ , and thus would be able to
communicate.
Thus there is a key distinction between templates A1 and
init: if p and q are distinct Worker processes, then they can-
not share the same tag created at A1. However, they can
share the same tag created at init.
Swim captures the distinction between A1 and init in Exa. 8
for a general secrecy assertion Secrecy(Source, Sink, Declass,
Anc) by ensuring that there is either a tag identiﬁer τ ∈
labSource such that τ (cid:54)∈ labSink or that τ is bound at a template
in DistAnc, where DistAnc is deﬁned as follows:
Def. 2. Let P and Q be process templates. Q is distinct
for P , denoted by Q ∈ DistP , if and only if the following
holds. Let Q bind tags that it creates to a tag identiﬁer τ ,
and let r, s be distinct processes with distinct ancestors in
P . If τ is bound to a tag t1 in the namespace of r and τ is
bound to a tag t2 in the namespace of s, then t1 (cid:54)= t2.
from above to labSource (cid:54)⊆ labSink −(cid:83)
To instrument a program to satisfy a secrecy assertion,
Swim could thus weaken the constraint labSource (cid:54)⊆ labSink
createsQ. How-
ever, a program instrumented using such a constraint may
still allow ﬂows from a process p ∈ Source to a process
q ∈ Sink not allowed by the assertion. The program could
do so by allowing processes not in Declass to receive infor-
mation from p, remove tags associated with the information,
and then send the information to q. To guard against this,
Swim strengthens the above constraint to:
Q∈DistAnc
labSink − (cid:91)
labSource (cid:54)⊆
 ∪ (cid:91)
createsQ
Q∈DistAnc
negD
D(cid:54)∈Declass
We prove in [9, App. F] that this constraint is suﬃcient to
ensure that the instrumented program satisﬁes the secrecy
assertion.
Now suppose that Swim is given a protection assertion
Prot(Source, Sink, Anc). The assertion induces transparency
and instrumentation conditions. To instrument the program
to respect these conditions, Swim must assert that whenever
a process p ∈ Source communicates data to a process q ∈
Sink where p and q share an ancestor process a ∈ Anc, then
the communication must be successful. To assert this, Swim
must ensure that every tag t in the label of p is also in the
label of q. We describe how Swim does so by considering
example executions that violate protection assertions.
Exa. 9. Consider the server from Fig. 1 and the protec-
tion assertion Prot(P5, R, init) that each Proxy executing P5
must be able to send information to the Requester executing
R. Suppose that Swim generated no constraints to ensure
that the program followed this assertion. Swim might then
instrument the program to bind a tag to an identiﬁer τ at
template A1. One execution of the program could create a
Proxy process p by executing the series of templates init, A1,
A2, A3, A5, A6, P1, P3, and P5, and create a Requester
process q by executing the series of templates init and R.
Suppose that p had in its label the tag that was bound to τ
when its ancestor executed A1. Because no ancestor of q ex-
ecuted A1, q would not have a tag in its label bound to τ .
Thus the label of p would not be a subset of the label of q,
and a communication from p to q would fail.
Exa. 9 demonstrates that for assertion Prot(Source, Sink,
Anc), if a tag in the label of p ∈ Source is bound to an
identiﬁer τ , then for p to send information to q ∈ Sink, there
must be a tag in the label of q that is bound to τ . This
is expressed as labSource ⊆ labSink. However, this constraint
is not suﬃcient to ensure that p and q can communicate
successfully, as demonstrated by the following example.
Exa. 10. Suppose that the server in Fig. 1 was instru-
mented to bind a tag to an identiﬁer τ at A1, add this tag
to the next Proxy process, and add the tag to the label of the
Requester process executing R. Each Proxy process execut-
ing P3 would have a diﬀerent ancestor that executed A1, and
thus each Proxy would have a diﬀerent tag in its label. Al-
though labP3 = {τ} ⊆ {τ} = labR, because each tag bound to
τ in the label of each Proxy process executing P3 is distinct,
the label of the Requester process does not contain the label
of all processes executing P3. Thus a communication from a
Proxy process to the Requester could fail.
On the other hand, suppose that the server was instru-
mented to bind a tag to τ at init, and add this tag to the label
of Proxy processes executing P3 and the Requester executing
R. Then the same tag would be in the labels of each Proxy
process and the Requester. The key distinction between A1
and init is that a Proxy and Requester may have distinct tags
created at A1, but cannot have distinct tags created at init.
Swim captures the distinction between init and A1 in Exa. 10
for a general assertion Prot(Source, Sink, Anc) by strengthen-
ing the above constraint that labSource ⊆ labSink. Swim ad-
ditionally ensures that if a tag in the label of p ∈ Source
is bound to an identiﬁer τ , then τ ∈ labSink and τ must be
bound at a template in ConstAnc, where ConstAnc is deﬁned
as follows.
Def. 3. Let P, Q be process templates. Q is constant for
P , denoted Q ∈ ConstP , if and only if the following holds.
Let processes r and s share in common their most recent
ancestor in P , and let Q bind tags to a tag identiﬁer τ . If τ
is bound to a tag t1 in the namespace of r, and τ is bound
to a tag t2 in the namespace of s, then t1 = t2.
For a protection assertion Prot(Source, Sink, Declass), the
conditions on each tag identiﬁer τ are expressed formally
using ConstAnc as:
∀τ.τ ∈ labSource =⇒ τ ∈ labSink ∧ τ ∈ (cid:91)
createsQ
Equivalently:
labSource ⊆ labSink ∩ (cid:91)
Q∈ConstAnc
createsQ
Q∈ConstAnc
We prove in [9, App. F] that this constraint is suﬃcient to
ensure that the instrumented program satisﬁes the protec-
tion assertion.
292The deﬁnitions of Dist and Const given in Defn. 2 and
Defn. 3 explain how the sets are used to instrument a pro-
gram, but they do not describe how the sets may be com-
puted. The sets are computed through a series of reachabil-
ity queries over the spawn graph of the program. For further
details, see [9, App. A].
A solution to the conjunction ϕPol of constraints generated
for all ﬂow assertions in a policy F corresponds to an instru-
mentation that respects all policy assertions. A solution to
the conjunction of these constraints with the semantic con-
straints, ϕTot ≡ ϕSem ∧ ϕPol, thus corresponds to a program
that manipulates Flume labels legally to satisfy F.
3.4 Solving Instrumentation Constraints
After generating a system of constraints ϕTot as described
in §3.3, Swim must ﬁnd a solution to ϕTot, and from the so-
−→
P . Unfortunately, such systems are com-
lution instrument
putationally diﬃcult to solve in general; ﬁnding a solution
to ϕTot is NP-complete in the number of terms in ϕTot. We
give a proof of hardness in [9, App. G].
However, although such systems are hard to solve in gen-
eral, they can be solved eﬃciently in practice. Modern Sat-
isﬁability Modulo Theory (SMT) solvers [6] can typically
solve large logical formulas very quickly. To apply an SMT
solver, Swim must translate ϕTot from a formula over a the-
ory of set constraints to a formula over a theory supported
by the solver, such as the theory of bit-vectors. To translate
ϕTot, Swim must derive for ϕTot a bound B such that if ϕTot
has a solution, then it has a solution in which the value of
each constraint variable contains at most B elements. Such
a bound B always exists, and is equal to the number of se-
crecy ﬂow assertions. We prove the validity of this bound
and give the explicit rules for translating set constraints to
bit-vector constraints in [9, App. B].
Swim applies an SMT solver to the bit-vector translation
of the set-constraint system. If the SMT solver determines
that the formula is unsatisﬁable, then it produces an unsat-
isﬁable core of bit-vector constraints. The core is a subset
of the original constraint system that is unsatisﬁable, and
does not strictly contain an unsatisﬁable subset. Given such
a core, Swim computes the subprogram and ﬂow assertions
that contributed constraints in the core, and presents these
to the user as being in conﬂict. If the SMT solver determines
that the constraint system is satisﬁable, then it produces a
solution to the system. Swim then rewrites the program so
that the label values of all processes that execute the in-
strumented program correspond to the label values in the
constraint solution.
3.5 From Constraint Solutions to
Instrumented Programs
For a program
−→
P to a new program
−→
P and policy F, if Swim obtains a so-
lution to the constraint system ϕTot described in §3.3.3,
−→
P (cid:48)
−→
then from this solution it rewrites
that respects F. Each equation X = P in
P is rewrit-
ten as follows. If createsX contains a tag identiﬁer τ , then
Swim rewrites P to CREATEτ → P . Now,
let L, M ,
and N be the sets of tag identiﬁers in the constraint val-
ues for labX , posX , and negX . Then Swim rewrites P to
ChangeLabel(L, M, N ) → P . Swim can reduce the number
of ChangeLabel templates generated by only generating such
a template when a label or capability changes from that of
a preceding P template in G−→
P .
Swim is sound in the sense that if it produces an instru-
mented program, then the program satisﬁes the instrumen-
tation conditions of §3.2. However, it is not complete; e.g., to
satisfy some programs and policies, it could be necessary to
reason about conditions in the original program code. Swim
does not currently support such reasoning. However, our ex-
periments, described in §4, indicate that in practice, Swim
can successfully instrument real-world programs to handle
real-world policies.
4. EXPERIMENTS
We evaluated the eﬀectiveness of Swim by experiment-
ing with four programs. The experiments were designed to
determine whether, for real-world programs and policies,
• Swim is expressive: can its language of policies encode
real-world information-ﬂow policies, and can Swim
rewrite real programs to satisfy such policies? We
found that each of the real-world policies could be en-
coded in the language of Swim, and that Swim could
ﬁnd a correct instrumentation of the program with
minimal, if any, manual edits of the program.
• Swim is eﬃcient and scalable: can it instrument pro-
grams quickly enough to be used as a practical tool for
developing applications? We found that Swim could
instrument programs in seconds.
To examine these properties, we implemented Swim as an
automatic tool4 and applied it to instrument the following
program modules:
1. The multi-process module of Apache [1].
2. The CGI and untrusted-code-launching modules of
FlumeWiki [14].
3. The scanner module of ClamAV [4].
4. The OpenVPN client [19].
For each program module, we chose an information-ﬂow pol-
icy from the literature [14, 23], expressed the policy in terms
of the ﬂow assertions described in §3.2.2, and then fed the
program and policy to the tool.
We implemented Swim using the CIL [18] program-
analysis infrastructure for C, and the Yices SMT solver
[6]. The only program annotations required by Swim are
C labels (not Flume labels) that map program points to
variables used in ﬂow assertions. When successful, Swim
outputs a C program instrumented with calls to the Flume
API such that the program satisﬁes the input policy. We
performed all experiments using Swim on a machine with a
2.27 GHz 8-core processor and 6 GB of memory, although
Swim uses only a single core.
We ﬁrst describe our experience using Swim, and then
evaluate its performance.
Apache Multi-Process Module.
We applied Swim to the multi-process module of the
Apache web-server to automatically produce a version of
Apache that isolates Worker processes. A model of the
Apache system architecture, along with the desired policy,
serves as the example discussed in §2. The original Apache
code is represented by the non-underlined, unshaded code.
When we initially applied Swim, it determined that it
could not instrument the MPM to enforce the supplied pol-
icy, and produced a minimal failing sub-program and sub-