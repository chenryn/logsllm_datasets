title:DICE: Automatic Emulation of DMA Input Channels for Dynamic Firmware
Analysis
author:Alejandro Mera and
Bo Feng and
Long Lu and
Engin Kirda
8
1
0
0
0
.
1
2
0
2
.
1
0
0
0
4
P
S
/
9
0
1
1
.
0
1
:
I
O
D
|
E
E
E
I
1
2
0
2
©
0
0
.
1
3
$
/
1
2
/
5
-
4
3
9
8
-
1
8
2
7
-
1
-
8
7
9
|
)
P
S
(
y
c
a
v
i
r
P
d
n
a
y
t
i
r
u
c
e
S
n
o
m
u
i
s
o
p
m
y
S
E
E
E
I
1
2
0
2
2021 IEEE Symposium on Security and Privacy (SP)
DICE: Automatic Emulation of DMA Input
Channels for Dynamic Firmware Analysis
Alejandro Mera, Bo Feng, Long Lu, Engin Kirda
Khoury College of Computer Sciences
Northeastern University
{mera.a, feng.bo, l.lu, e.kirda}@northeastern.edu
Boston, USA
Abstract—Microcontroller-based embedded devices are at the
core of Internet-of-Things (IoT) and Cyber-Physical Systems
(CPS). The security of these devices is of paramount importance.
Among the approaches to securing embedded devices, dynamic
ﬁrmware analysis (e.g., vulnerability detection) gained great
attention lately,
thanks to its ofﬂine nature and low false-
positive rates. However, regardless of the analysis and emulation
techniques used, existing dynamic ﬁrmware analyzers share a
major limitation, namely the inability to handle ﬁrmware using
DMA (Direct Memory Access). It severely limits the types of
devices supported and ﬁrmware code coverage.
We present DICE, a drop-in solution for ﬁrmware analyzers
to emulate DMA input channels and generate or manipulate
DMA inputs (from peripherals to ﬁrmware). DICE is designed
to be hardware-independent (i.e., no actual peripherals or DMA
controllers needed) and compatible with common MCU ﬁrmware
(i.e., no ﬁrmware-speciﬁc DMA usages assumed) and embedded
architectures. The high-level idea behind DICE is the identi-
ﬁcation and emulation of the abstract DMA input channels,
rather than the highly diverse peripherals and controllers. DICE
identiﬁes DMA input channels as the ﬁrmware writes the source
and destination DMA transfer pointers into the DMA controller.
Then DICE manipulates the input transferred through DMA on
behalf of the ﬁrmware analyzer. DICE does not require ﬁrmware
source code or additional features from ﬁrmware analyzers.
We integrated DICE to the recently proposed ﬁrmware an-
alyzer P2IM (for ARM Cortex-M architecture) and a PIC32
emulator (for MIPS M4K/M-Class architecture). We evaluated it
on 83 benchmarks and sample ﬁrmware, representing 9 different
DMA controllers from 5 different vendors. DICE detected 33
out of 37 DMA input channels, with 0 false positives. It correctly
supplied DMA inputs to 21 out of 22 DMA buffers that ﬁrmware
actually use, which previous ﬁrmware analyzers cannot achieve
due to the lack of DMA emulation. DICE’s overhead is fairly
low, it adds 3.4% on average to P2IM execution time. We also
fuzz-tested 7 real-world ﬁrmware using DICE and compared the
results with the original P2IM. DICE uncovered tremendously
more execution paths (as much as 79X) and found 5 unique
previously-unknown bugs that are unreachable without DMA
emulation. All our source code and dataset are publicly available.
I. INTRODUCTION
Modern embedded devices, equipped with increasingly
powerful MCUs (microcontrollers) and rich network con-
nectivity, are used as the building blocks in Internet-of-
Things (IoT) and Cyber-Physical Systems (CPS). It is expected
that 5.8 billion Enterprise and Automotive connected devices
(IoT and CPS) will be in use in 2020 [12]. Therefore, the
(in)security of embedded devices has profound implications on
millions of devices, in terms of both data privacy and physical
safety. Security vulnerabilities in ﬁrmware may allow attackers
to control affected devices deployed in smart homes, connected
vehicles, intelligent factories, power grids, etc., and in turn,
steal critical data or manipulate device behavior. Such attacks
have been on a rise and launched on cars [5], [28], Wi-Fi SoC
[31], [33], manufacturing controllers [43], and more.
To improve embedded device security, researchers explored
various approaches, including runtime attack mitigation [16],
remote attestation [41], [37], and ﬁrmware analysis [10], [44],
[6], [7]. Compared with other approaches, dynamic ﬁrmware
analysis has low false positives, requires no hardware or
software modiﬁcation, and incurs zero overhead on production
devices. Therefore, it is generally considered more practical.
A major challenge facing dynamic ﬁrmware analysis is
the inability to fully run and test ﬁrmware at scale, due to
hardware dependence on diverse peripherals. Many previous
works either rely on real hardware components during analysis
or port ﬁrmware to a conventional computer platform (e.g.,
x86), for which full emulators exist. P2IM [10] is a recent
work that for the ﬁrst time enables dynamic ﬁrmware analysis
without requiring actual hardware, source code, or porting
ﬁrmware to a non-native platform. P2IM removes hardware
dependence by identifying processor-peripheral interfaces and
supplying viable input data through such interfaces on behalf
of peripherals. As a result, ﬁrmware can boot, run, and be
tested in a generic emulator without using peripheral hardware
or emulation.
Despite the tremendous progress made by previous works,
one fundamental problem remains open: existing dynamic an-
alyzers cannot support ﬁrmware taking input from peripherals
via DMA (Direct Memory Access). When ﬁrmware reads from
a DMA buffer in memory, which is supposed to contain input
written directly by a peripheral, existing analyzers or emulators
would fail to recognize it as a DMA read, and instead, treat it
as a regular memory read (i.e., returning zero or invalid value
to ﬁrmware). As a result, ﬁrmware cannot obtain any DMA
inputs, which causes the execution to idle, a large portion
of the ﬁrmware code to be unreachable/untested, or even the
analysis session to crash.
The root cause of the problem lies in the very nature of
DMA, which allows peripherals to access memory directly
(with the help of a DMA controller, which is also a peripheral).
© 2021, Alejandro Mera. Under license to IEEE.
DOI 10.1109/SP40001.2021.00018
1938
Authorized licensed use limited to: Tsinghua University. Downloaded on February 25,2022 at 12:26:20 UTC from IEEE Xplore.  Restrictions apply. 
Fig. 1: DICE design overview as a drop-in component of ﬁrmware analyzer
A ﬁrmware analyzer, if not fully emulating all peripherals or
entirely aware of their DMA activities, is unable to determine
when and where in memory DMA-based I/O may occur.
Therefore, the analyzer cannot tell, when ﬁrmware reads from
a buffer in memory, whether the read operation is a DMA-
based input event or just a regular load of data from memory.
Due to this open problem, existing analyzers either treat
DMA to be out of scope (i.e., not supporting ﬁrmware that
uses DMA), or use very simple heuristics to statically infer
locations of DMA buffers in memory, which can be highly
inaccurate and incomplete due to the dynamic nature of DMA.
Supporting DMA input is critical and necessary for dynamic
analysis of embedded ﬁrmware, for the following reasons.
First, to perform comprehensive dynamic tests of ﬁrmware,
all
input channels used by ﬁrmware need to be covered.
Embedded devices take inputs from a wide range of periph-
erals through several channels, including MMIO (memory-
mapped I/O) and DMA. Analysis of DMA-enabled ﬁrmware
cannot reach or exercise the code that depends on DMA
inputs. Second, many embedded devices use DMA (roughly
25% among the surveyed ﬁrmware, see §IV). In fact, DMA
offers additional beneﬁts to embedded devices. For example,
besides improving data transfer rates, DMA allows processors
to enter or stay in sleep or power-saving mode during data
transfers, which is desirable for power-constrained embedded
devices. Third, DMA is the only input channel used by certain
peripherals and buses on embedded devices. For instance,
input from CAN (Controller Area Network) and USB is
accessible to ﬁrmware only via DMA.
In this paper, we present DICE (DMA Input Channel
Emulation), a drop-in component (Fig. 1) for existing and fu-
ture dynamic ﬁrmware analyzers to recognize and manipulate
DMA-based peripheral input, and in turn, expand their analysis
to cover ﬁrmware code, states, and vulnerabilities dependent
on DMA input.
DICE adopts a non-conventional approach to supporting
ﬁrmware input during analysis. Instead of aiming to emulate
DMA controllers or DMA-enabled peripherals, which is prac-
tically impossible due to the complexity and diversity of these
hardware components, we design DICE to emulate the DMA
input channels, an implicit
interface through which DMA
input data ﬂow to (or is consumed by) ﬁrmware execution.
These channels manifest as memory buffers which peripherals
directly write data to and ﬁrmware subsequently reads input
from. DICE identiﬁes DMA input channels when the ﬁrmware
programs the sources and destinations of DMA transfers into
the DMA controller. The sources and destinations are ad-
dresses within speciﬁc ranges (such as RAM), and are written
to a ﬁxed region in memory, namely the memory-mapped
registers of the DMA controller. By identifying the creations
and removals of such channels, DICE maps the sources and
destinations of possible DMA data transfers. When ﬁrmware
reads from a memory buffer that belongs to a DMA data
transfer destination, DICE detects it as a DMA input event
and signals the analyzer for further actions (e.g., supplying
the read with fuzzer-generated input).
There are three main technical challenges that we tackled
while pursuing this approach. First, DMA input channels are
created and removed on demand by ﬁrmware during execution.
DICE needs to dynamically identify these channels and mon-
itor input events through them. Second, the high diversity in
embedded hardware and software makes it difﬁcult to develop
a generic design for DICE that works on different
types
of architectures, peripherals, DMA controllers, and ﬁrmware.
Third, a large number of ﬁrmware analyzed in practice are
in binary form without source code or debug symbols. DICE
should not need source code for identifying and emulating
DMA input channels. Our design and implementation ad-
dressed all these challenges.
To evaluate the performance of DICE and demonstrate the
beneﬁts that it brings to existing ﬁrmware analyzers, we built
two prototypes of DICE, based on P2IM (for ARM Cortex-M)
and a PIC32 emulator (for MIPS M4K/M) [36], respectively.
We performed unit tests or micro-benchmarking on 83 sample
ﬁrmware, representing 11 different MCU SoCs and covering
ARM and MIPS architectures. DICE detected 33 out of 37
DMA input channels correctly, with 0 false positives. For
the 22 channels that ﬁrmware actually used during the tests,
DICE supplied inputs to 21 of them without errors. We also
conducted fuzzing tests on 7 real ﬁrmware and measured the
code and path coverages with and without DICE enabled on
P2IM. Thanks to DICE’s automatically emulated DMA input
channels, the basic block coverage increased by 30.4% and
the path coverage jumped remarkably by 79X. Even with
a fairly primitive memory sanitizer and a 48-hour fuzzing
session, DICE detected 5 unique previously unknown bugs
in the ﬁrmware.
The source code of DICE, the integrations with ﬁrmware
analyzers and emulators, and all
the ﬁrmware tested are
publicly available at https://github.com/RiS3-Lab/DICE-D
MA-Emulation.
In sum, our work makes the following contributions:
• We study and advocate the importance of supporting