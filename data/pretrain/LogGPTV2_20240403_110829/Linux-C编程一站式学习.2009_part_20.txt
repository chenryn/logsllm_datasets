1: sum = 0
：
0
sum = 123
 Sum = 123
 sum = 0
 Sum =
，可见断点有助于快速跳过没有问题的代码，
L
，新的转换应该再次从0开始累加，
 -1208103488
 sum被列为重点怀疑对象，
return 0;
while（l）{
char input[5];
int sum = 0,
int
sum = 0，
，表示在某个函数开头设断点。现在用continue命令（简写为c)
for (i = 0; input[i] !=‘\o'; i++)
(wns 'u\p=nduT.)uxd
变量sum的编号是1,
scanf("%s"
for (i = 0; input[i] !=‘\o'; i++)
 scanf("%s", input);
i;
 i=0;
=
，我们可以用display命令使得每次停下来的时候都显
0：
 input);
= sum*10
，而sum现在已经是123了，
input[
input)!
，可以用undisplay1命令取消它的跟踪显
然后在有问题的代码上慢慢走慢慢分
+ input[i] -
!= '\o';, i++).
怎么知道哪些代码可以跳
如果不想一
原因在于新的循环没
!.0..
一步一步走这
164
---
## Page 165
结果是第一次执行scanf之前没有中断，
从代码里找应该在哪一行设断点：
每个断点都有-
以设置多个断点，
果时也要分析应该在哪里插入printf,
有时候一
表10.2.gdb基本命令2
input=123
Starting
Start
 (u  ) o  a
5
No
Num
Num
一个断点暂时不用可以禁用掉而不必删除，这样以后想用的时候可以直接启用，而不必重新
2
Breakpoint 3 at 0x804841l: file main.c, line 12.
1: sum = 123
（gdb）
(gdb)
(qpb)
（gdb）
(gdb）
(gdb)
(gdb)
(gdb)
(gdb) b.12
um
um
 breakpoints 
 break 9 if sum.
 disable breakpoints
it
 delete breakpoints 
一个编号
stop only if sum !=
breakpoint.
Type
 breakpoints
breakpoint
Type
 breakpoints
breakpoint
Type
 breakpoints
breakpoint
 program
Type
 breakpoints
breakpoint
breakpoint
 breakpoints
用info命令可以查看已经设置的断点：
号
at
breakpoints
the
可以用编号指定删除某个断点:
 还可以设置断点在满足某个条件时才激活，
or
0x80483c3:
 watchpoints.
/home/akaedu/main
1
=
 Disp Enb Address.
keep
Disp
keep
Disp
keep Y
keep
Disp
keep 
2
打印哪些中间结果,
第二次却中断了。总结一下本节用到的gdb命令：
3
 file
，然后用run命令（简写为r）
 Enb Address
Enb
Yo
K
Enb
(y
 main.C,
0x08048411
 Address
0x08048411 in main at main.c:12
 Address
0x08048411 in main at main.c:12
 0x080483c3 in main at main.c:9
or n）y
 input);
 line
 What 
What
What
What
 What
调试的基本思路是一样的。一次调试可
in main at main.c:12
重新从程序开头连续运行：
 例如我们仍然在循环开头设
165
---
## Page 166
用gdb跟踪循环，
单验算一下，
我们本来希望reverse_str打印出来是olleh，结果什么都没有。重点怀疑对象肯定是循环，那么简
1.单步执行和跟踪函数调用
入reverse_str，再打印reverse_str。然而结果并不正确：
（）
1、看下面的程序:
习题请点评
一个同样长的字符数组reverse_str，相当于所有元素用\o·初始化。然后打印str，把str倒序存
 依此类推，
#include 
undisplay跟踪显示号
run（或r）
info（或i）breakpoints
enable断点号
disable breakpoints 断点号禁用断点
display 变量名
delete breakpoints 断点号
continue (或c)
break ...if...
break 函数名
break（或b）行号
S
int main(void)
，找出错误原因并改正。
return 0;
int i;
i=0,1,2,3,4,
命令
 reverse_str[5-i] = str[i];
，共5次循环，
reverse_str);
取消跟踪显示
查看当前设置了哪些断点
启用断点
跟踪查看某个变量，每次停下来都显示它的值
删除断点
从头开始连续运行程序
从当前位置开始连续运行程序
设置条件断点
在某个函数开头设置断点
在某一行设置断点
i++）
“正好把h,el.o五个字母给倒过来了，哪里不对了？
起始页
上一级
描述
、然后用空字符串"初始化
3.观察点
166
下一页
---
## Page 168
头加上sum=0;：
3.观察点请点评
接着上一节的步骤，
L二
下面用调试器看看最后这个诡异的结果是怎么出来的[21]
现象是这样的：
符串超长了会怎么样？我们知道数组访问越界是不会检查的，所以scanf会写出界。
使用scanf函数是非常凶险的，即使修正了这个Bug也还存在很多问题。如果输入的字
例10.3.观察点调试实例
Breakpoint 1
(gdb）start
input=123407
int main(void)
#include 
gdb)
(gdb）n
 gdb main
input=123
2
/main
 经过调试我们知道，
（）
(直接回车)
return 0;
while（l）{
at 0x80483b5:
for (i = 0;
scanf("%s",
sum
/home/akaedu/main 
i=0;
全国嵌入式人才培训基地
，虽然sum已经赋了初值0，但仍需要在while（1)循环的开
sum = 0;
sum
第10章gdb
3.观察点
 file main.c, line 5.
 input[i]
 input);
sum);
‘\o';, i++).
168
下一页
---
## Page 169
是0x00的位置现在莫名其妙地变成了0x04，因此循环不会结束。继续单步：
么会有下一次循环呢？注意到循环控制条件是input[i】！=‘\’，
input[4]的确是0x35，产生123407还有另外一种可能，就是在下一次循环
严谨的：
错
现在sum是1234没错，根据运行结果是123407我们知道即将进行的这步计算肯定要出
根据运行结果，
的存储单元，打印的正是十六进制ASCII码的‘1'到'5",
x命令打印指定存储单元的内容。7b是打印格式，b表示每个字节一组，7表示打
input数组只有5个元素，
错
印7组[22],
，算出来应该是12340，
我们设一
0x04
Breakpoint 2, main (） at main.c:12
Continuing.
(gdb)
(gdb)
Breakpoint 
(gdb)b 12
6
8
(gdb）
(gdb)
(gdb 23agut
3
x00
xb
一个条件断点从i等于4开始单步调试：
1
.x/7b input.
前4个字符转成数字都没错，
(直接回车)
0x00
0x00
2 at 0x80483e6: file main.c, line 12.
if i
，写出界的是scanf自动添的·\o′，用x命令看会更清楚一些：
，那就是说input[4]肯定不是'5+了，事实证明这个推理是不
0x31
return 0;
while（l）{
char input[5];
0x31
==
for (i = O; input[i] !='\o'; i++)
printf("input=%d\n"， sum);
scanf('
（++ ‘,O\，=i[]ndu ‘O=T） oJ
scanf("%s", input);
0x32
0x32
sum = sum*10 + input[i] -
 sum = sum*10 + input[i] -
=0：
0x33
0x33
input
input):
0x34
第6个字节是写出界的0＇。
0x34
而本来应该
0x35
0x35
169
---
## Page 170
察
元时中断,
我
多循环了
进入下一次循环，
用
用。下面删除原来设的断点,
点，
们知道断点是当程序执行到某一代码行时中断,
，跟踪input[4]后面那个字节（可以用input[5]表示，虽然这是访问越界）：
0x0804840c
New
Continuing.
New
0ld
main ()
 Starting program: /home/akaedu/main
Z
01
Breakpoint
0x0804840c
0x0804840c 
3
1
gdb）c
gdb）c
(qp6)
6
(gdb)
(gdb)
(gdb)
ew
um
x05
20
6
d
db）
如果我们不知道某个存储单元是在哪里被改动的，
但123407这个结果可以解释了
. value
 value
value
yalue
value
5
 watch
 start
delete breakpoints
.x/7b input.
n
但下次一定会退出循环了，
(直接回车)
(直接回车)
hw watchpoint
Type
原来的0x04又莫名其妙地变成了0x05，这是怎么回事？这个暂时
0x00
 in
in
in
L
0
.main () at main.c:11
 main
`\001
 main
`\001'
 int sum = 0, i = 0;
002
0x31
从头执行程序,
2:input[5]
for 
for（i
keep
Disp
scanf("%s", input);
sum
0x32
 Enb Address
=
K
因为0x05的后面是\o′。
，是12345*10+0x05－0x30得到的，虽然
=
，重复上次的输入，
 sum = sum*10 + input[i] -
0;
0; input[i] !=‘\o'; i++)
0x33
input[i] !='\o'; i++)
，而观察点是当程序访问某个存储单
0x34
input[5]
What
，这时候观察点尤其有
用watch命令设置观
0x35
10
---
## Page 171