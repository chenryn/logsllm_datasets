#### Q64. Wich operator sends the output of ls to a file for later use?
- [ ] ls  filelist.txt
- [ ] ls - filelist.txt
#### Q65. When comparing items with case, what statement indicates an end to the evaluation block?
- [ ] stop
- [x] esac
- [ ] done
- [ ] exit
#### Q66. To run a group of commands without spawning a subshell, which syntax would you use?
- [ ] (command1; command2)
- [x] { command1; command2; }
- [ ] (( command1; command2 ))
- [ ] command1; command2
#### Q67. What are the results of the command with a user named jon?
```bash
echo 'Hello, $(whoami)!'
```
- [ ] Hello, $(jon)!
- [ ] Hello, jon!
- [x] Hello, $(whoami)!
- [ ] Hello, whoami!
#### Q68. How can you copy a directory to another system with compression?
- [ ] `tar -ssh user@192.158.1.1 /bin/newfile`
- [x] `tar cvzf - /wwwdata | ssh PI:EMAIL "dd of=/backup/wwwdata.tar.gz"`
- [ ] You can't compress the stream
- [ ] `scp -r directory user@192.168.1.1:/tmp`
#### Q69. To assign the command `ls -lah` to the shortcut command `lh`, what command should you use?
- [x] `alias lh='ls -lah'`
- [ ] `link lh='ls -lah'`
- [ ] `alias 'ls -lah'=lh`
- [ ] `lh | ls -lah`
#### Q70. Which statement will print all of the fully qualified .csv files in the home directory or subdirectories while not displaying any errors?
- [ ] find $USER_DIR -name "\*.csv" 2>/dev/null
- [ ] find $HOME -name "\*.csv" 1>/dev/null
- [x] find $HOME -name "\*.csv" 2>/dev/null
- [ ] find HOME -name "\*.csv" 1>/dev/null
#### Q71. In Bash, what does a # at the end of the default prompt string indicate?
- [x] that the user is acting as root
- [ ] that the current working directory is the root of the file system
- [ ] that there are updates for the system available
- [ ] that the user is unprivileged
#### Q72. What will be the output of this command?
```bash
$ ls -l
file10.txt
file1.txt
fileabc.txt
filea.txt
fileb.txt
filec.txt
$ ls -l file[^abc]*.txt
```
- [x] A
```bash
file1.txt
file10.txt
```
- [ ] B
```bash
file10.txt
file1.txt
fileabc.txt
filea.txt
fileb.txt
filec.txt
```
- [ ] C
```bash
fileabc.txt filea.txt fileb.txt filec.txt
```
- [ ] D
```bash
filea.txt
fileb.txt
filec.txt
```
[Reference](https://tldp.org/LDP/abs/html/globbingref.html)
`The caret (`^`) symbol here negates matches inside the bracket.`
#### Q73. What is the output of this command sequence?
```bash
cat  out.txt
exec 3<> out.txt
read -n 4 &3
exec 3>&-
```
- [ ] 123446789
- [ ] the hyphen symbol (-)
- [x] 123456789
- [ ] the number 5, which is written to the file using echo
1. [I/O Redirection](https://tldp.org/LDP/abs/html/io-redirection.html)
2. [What is the difference between "echo" and "echo -n"?](https://stackoverflow.com/questions/30761986/what-is-the-difference-between-echo-and-echo-n)
#### Q75. Which variable contains the process ID (PID) of the script while it's running?
- [ ] $ID
- [ ] $#
- [ ] $@
- [x] $$
#### Q76. By combining extended globbing and parameter expansion, what would be the value of VAR?
```
#!/bin/bash
shopt -s extglob
VAR='     This is...     a string of characters     '
VAR=${VAR##+([[:space:]])}; VAR=${VAR%%+([[:space:]])};
echo "$VAR"
```
- [ ] ` This is... a string of characters`
- [ ] ` This is...a string of characters`
- [x] `This is... a string of characters`
- [ ] `This is...a string of characters`
References:
1. [What is the meaning of the ${0##...} syntax with variable, braces and hash character in bash?](https://stackoverflow.com/questions/2059794/what-is-the-meaning-of-the-0-syntax-with-variable-braces-and-hash-chara)
2. [What does expanding a variable as "${var%%r\*}" mean in bash?](https://stackoverflow.com/questions/41859601/what-does-expanding-a-variable-as-varr-mean-in-bash)
#### Q77. Which operator tells the shell to run a given command in the background?
- [ ] !
- [ ] &&
- [x] &
- [ ] $
#### Q78. The range of nice number in LINUX system is?
- [ ] -20 to 0
- [x] -20 to 19
- [ ] 0 to 19
- [ ] 10 to 10
[Reference](https://man7.org/linux/man-pages/man2/nice.2.html)
#### Q79. In Bash, what does this expression evaluate to?
```
echo $((4/3))
```
- [ ] 1.3
- [ ] 1.3333333333
- [x] 1
- [ ] 2
[Reference](https://tldp.org/HOWTO/Bash-Prog-Intro-HOWTO-10.html)
#### Q80. To keep a loop going until a certain condition becomes true, what would you likely use?
- [ ] if
- [ ] case
- [x] while
- [ ] for
[Reference](https://tldp.org/LDP/Bash-Beginners-Guide/html/sect_09_02.html)
#### Q81. What does this command sequence do?
```bash
cat > notes -
```
- [ ] It creates an empty file called "notes" and then exits.
- [ ] It outputs the contents of the "notes" file to the screen, and then deletes it.
- [x] It accepts text from the standard input and places it in the "notes" file.
- [ ] It appends text to an existing file called "notes."
#### Q82. You want to match five-letter palindromes such as radar, rotor, and tenet. Which sed option should you use?
- [ ] `sed -E -n '/^(.)(.)\3\2\1$/p'`
- [ ] `sed -E -n '/^(.)(.)(.).\2\1$/p'`
- [x] `sed -E -n '/^(.)(.)(.)\2\1$/p'`
- [ ] `sed -E -n '/^(.)(.)(.)(.)\3\2\1$/p'`
#### Q83. To add a value to the current environment, what command should you use ?
- [ ] shell_add
- [ ] save
- [ ] echo
- [x] export
#### Q84. What is the difference between these two conditional expressions?
```bash
[[$A==$B]]
[[$A -eq $B]]
```
- [ ] [[$A == $B]] is used for numeric comparisons whereas [[$a-eq $B]] is used for text comparisons.
- [ ] [[$A==$B]]is the new way of doing comparison where [[$a-eq $B]]is the legacy syntax.
- [x] they are the same.
- [ ] [[$A==$B]]is used for text comparisons whereas [[$a-eq $B]]is used for numeric comparisons.
#### Q85. What is the output of this code?
```bash
VAR="united states"
echo "${VAR^}"
```
- [ ] unitedstates
- [ ] United States
- [ ] United states
- [x] UNITED STATES
#### Q86. What would happen if you ran the script below as it is written?
```bash
#!/bin/bash
#condition 1
if [ $foo = "bar" ]; then echo "foo is bar"
fi
#condition 2
if [[ $foo = "bar" ]]; then echo "foo is bar"
fi
```
- [x] Both conditions will fail.
- [ ] Both conditions will succeed.
- [ ] Condition 1 would succeed and Condition 2 would fail.
- [ ] Condition 1 would fail and Condition 2 would succeed.
**Explanation:** The script as written outputs `line 3: [: =: unary operator expected`. Define variable and assign value `foo="bar"`, and both conditions will succeed.
#### Q87. Which variable contains the number of arguments passed to a script from the command line?
- [x] `$#`
- [ ] `$@`
- [ ] `0`
- [ ] `$!`
#### Q88. In Bash scripting, what does the "shebang" (#!) at the beginning of a script indicate, and why is it important?
- [ ] It indicates the location of the Bash interpreter that should be used to execute the script.
- [ ] It specifies the version of Bash required to run the script.
- [ ] It marks the script as executable.
- [x] It helps the system identify the script's interpreter, ensuring the correct interpreter is used.
#### Q89. Which variable contains the process ID (PID) of the script while itâ€™s running?
- [ ] `$ID`
- [ ] `$@`
- [ ] `$#`
- [x] `$$`
#### Q90. If a user wants to execute script sh without a shebang fine or execute permissions, what should the user type?
- [ ] A shebang line is required to execute a shell script.
- [x] 'bash script.sh'.
- [ ] 'exec script.sh'.
- [ ] ExecuteExecute permissions are required to execute a shell script.
#### Q91. Which choice is the most likely output of the compound command shown below?
```bash
cat -n animals | sort -r | head -n 5
```
- [ ] a.
```bash
	1	Ant
	2	Bear
	3	Cat
	4	Dog
	5	Elephant
```
- [ ] b.
```bash
	9	Ibex
	B	Hippo
	7	Giraffe
	6	Fox
	5	Elephant
	4	Dog
	3	Cat
	2	Bear
	1	Ant10	Jaguar
```
- [ ] c.
```bash
	Jaguar
	Ibex
	Hippo
	Giraffe
	Fox
```
- [x] d.
```bash
	9	Ibex
	8	Hippo
	7	Giraffe
	6	Fox
	5	Elephant
```
#### Q92. Which of the following is not a valid Bash variable name?
- [ ] `$HOME`
- [ ] `my_var`
- [x] `1var`
- [ ] `!`
#### Q93.In Bash, create a one-liner command that recursively finds all files with the ".txt" extension in a directory and its subdirectories, and counts the total number of lines in those files. The output should only display the total line count.
Which of the following one-liner Bash commands accomplishes this task?
- [ ] `find . -name "*.txt" -exec wc -l {} \; | awk '{total += $1} END {print total}'`
- [ ] `grep -r ".*\.txt$" | wc -l`
- [ ] `find . -type f -name "*.txt" | xargs wc -l | tail -n 1`
- [x] `find . -name "*.txt" -exec cat {} \; | wc -l`
#### Q94. What is the difference between the > and >> redirection operators?
- [x] `> overwrites the contents of the target file, while >> appends to the end of the target file.`
- [ ] `> redirects input, while >> redirects output.`
- [ ] `> is used for standard output, while >> is used for standard error.`
- [ ] `> is a unary operator, while >> is a binary operator.`
[reference](https://www.shells.com/l/en-US/tutorial/Difference-between-%E2%80%9C%3E%E2%80%9D-and-%E2%80%9C%3E%3E%E2%80%9D-in-Linux#:~:text=So%2C%20what%20we%20learned%20is,to%20modify%20files%20in%20Linux.)