          FATAL("Could not create directory %s.", dotfiles.c_str());
        }
        for (auto &F : M) {
          bool has_BBs = false;
          std::string funcName = F.getName().str();
          /* Black list of function names */
          if (isBlacklisted(&F)) {
            continue;
          }
          bool is_target = false;
          for (auto &BB : F) {
            std::string bb_name("");
            std::string filename;
            unsigned line;
            for (auto &I : BB) {
              getDebugLoc(&I, filename, line);
              /* Don't worry about external libs */
              /* 去除掉一些外部库，以及没有位置信息的指令
              */
              static const std::string Xlibs("/usr/");
              if (filename.empty() || line == 0 || !filename.compare(0, Xlibs.size(), Xlibs))
                continue;
              if (bb_name.empty()) {
                /* 用基本块的第一条有效指令位置作为基本块名字
                   基本块名字格式为：[基本块所在文件名：基本块所在行数]
                */
                std::size_t found = filename.find_last_of("/\\");
                if (found != std::string::npos)
                  filename = filename.substr(found + 1);
                bb_name = filename + ":" + std::to_string(line);
              }
              /* 判断该基本块是否是目标基本块，即对应的文件名和行数是否相等
              */
              if (!is_target) {
                  for (auto &target : targets) {
                    std::size_t found = target.find_last_of("/\\");
                    if (found != std::string::npos)
                      target = target.substr(found + 1);
                    std::size_t pos = target.find_last_of(":");
                    std::string target_file = target.substr(0, pos);
                    unsigned int target_line = atoi(target.substr(pos + 1).c_str());
                    if (!target_file.compare(filename) && target_line == line)
                      is_target = true;
                  }
                }
                /* 如果当前指令是call指令，则记录下当前基本块名字和调用的函数
                   格式为: [基本块名字，函数名]
                */
                if (auto *c = dyn_cast(&I)) {
                  std::size_t found = filename.find_last_of("/\\");
                  if (found != std::string::npos)
                    filename = filename.substr(found + 1);
                  if (auto *CalledF = c->getCalledFunction()) {
                    if (!isBlacklisted(CalledF))
                      bbcalls getName().str()  NameData;
                StringRef NameRef = t.toStringRef(NameData);
                MallocAllocator Allocator;
                BB.setValueName(ValueName::Create(NameRef, Allocator));
              }
              /* 导出基本块名字到文件中 */
              bbnames  Builder(TI);
              Value *bbnameVal = Builder.CreateGlobalStringPtr(bb_name);
              Type *Args[] = {
                  Type::getInt8PtrTy(M.getContext()) //uint8_t* bb_name
              };
              FunctionType *FTy = FunctionType::get(Type::getVoidTy(M.getContext()), Args, false);
              Constant *instrumented = M.getOrInsertFunction("llvm_profiling_call", FTy);
              Builder.CreateCall(instrumented, {bbnameVal});
    #endif
            }
          }
           /* 这里首先判断该函数是否有基本块，如果有，就打印该函数的CFG，
              AFLGo重写了WriteGraph相关的类，所以打印出的CFG文件与llvm自带的插件打印出的不一样
           */
          if (has_BBs) {
            /* Print CFG */
            std::string cfgFileName = dotfiles + "/cfg." + funcName + ".dot";
            std::error_code EC;
            raw_fd_ostream cfgFile(cfgFileName, EC, sys::fs::F_None);
            if (!EC) {
              WriteGraph(cfgFile, &F, true);
            }
            /* 最后记录目标基本块所在函数和所有的函数名。
            */
            if (is_target)
              ftargets  Blacklist = {
        "asan.",
        "llvm.",
        "sancov.",
        "__ubsan_handle_",
        "free",
        "malloc",
        "calloc",
        "realloc"
      };
      for (auto const &BlacklistFunc : Blacklist) {
        if (F->getName().startswith(BlacklistFunc)) {
          return true;
        }
      }
      return false;
    }
然后是`getDebugLoc`函数，该函数作用是获取指令所在的文件名和行数，这里需要注意的是，在编译的时候一定要加入`-g`选项，表示程序保留debug信息，否则无法获取源码所在文件名和行数信息。
    static void getDebugLoc(const Instruction *I, std::string &Filename,
                            unsigned &Line) {
    /* 这里对llvm旧版本的api做了兼容
    */
    #ifdef LLVM_OLD_DEBUG_API
      DebugLoc Loc = I->getDebugLoc();
      if (!Loc.isUnknown()) {
        DILocation cDILoc(Loc.getAsMDNode(M.getContext()));
        DILocation oDILoc = cDILoc.getOrigLocation();
        Line = oDILoc.getLineNumber();
        Filename = oDILoc.getFilename().str();
        if (filename.empty()) {
          Line = cDILoc.getLineNumber();
          Filename = cDILoc.getFilename().str();
        }
      }
    #else
      if (DILocation *Loc = I->getDebugLoc()) {
        Line = Loc->getLine();
        Filename = Loc->getFilename().str();
        if (Filename.empty()) {
          DILocation *oDILoc = Loc->getInlinedAt();
          if (oDILoc) {
            Line = oDILoc->getLine();
            Filename = oDILoc->getFilename().str();
          }
        }
      }
    #endif /* LLVM_OLD_DEBUG_API */
    }
最后是重写的打印 CFG 的类`DOTGraphTraits`，对几个关键函数重写，让打印出的CFG按照我们期望的格式打印。
    template<>
    struct DOTGraphTraits : public DefaultDOTGraphTraits {
      DOTGraphTraits(bool isSimple=true) : DefaultDOTGraphTraits(isSimple) {}
      static std::string getGraphName(Function *F) {
        return "CFG for '" + F->getName().str() + "' function";
      }
      std::string getNodeLabel(BasicBlock *Node, Function *Graph) {
        if (!Node->getName().empty()) {
          return Node->getName().str();
        }
        std::string Str;
        raw_string_ostream OS(Str);
        Node->printAsOperand(OS, false);
        return OS.str();
      }
    };
到这里第一次编译的逻辑结束了，最后会在`-outdir`声明的目录下得到以下文件
    .
    ├── BBcalls.txt
    ├── BBnames.txt
    ├── dot-files
    ├── Fnames.txt
    └── Ftargets.txt
    1 directory, 4 files
###  2.2 计算距离
根据 AFLGo `README`，下一步需要生成距离
    # Generate distance ☕️
    # $AFLGO/scripts/genDistance.sh is the original, but significantly slower, version
    $AFLGO/scripts/gen_distance_fast.py $SUBJECT $TMP_DIR xmllint
这里使用的脚本`gen_distance_fast.py`是作者因为原本用 python 写的版本计算太慢，就用 C++
重新实现了一遍，逻辑实际上是一样的，这里我们为了说明方便就用原来的脚本说明，即文件`scripts/genDistance.sh`。
    #!/bin/bash
    # 检查参数个数，说明脚本用法
    if [ $# -lt 2 ]; then
      echo "Usage: $0   [fuzzer-name]"
      echo ""
      exit 1
    fi
    # 设置好参数路径
    BINARIES=$(readlink -e $1)
    TMPDIR=$(readlink -e $2)
    AFLGO="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )"