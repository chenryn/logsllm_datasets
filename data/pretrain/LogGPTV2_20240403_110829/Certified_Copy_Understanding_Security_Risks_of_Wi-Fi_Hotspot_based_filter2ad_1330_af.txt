leaks. Harehunter [10] detects hanging attribute references (Hares)
vulnerability. A Hares vulnerability occurs when an inter compo-
nent communication (ICC) call refers to a non-existing attribute
(e.g., package, activity, service) due to the customization of Android
system. A malicious app could claims itself as the definition party
of such attributes and hijack the ICC call. In response, Harehunter
compares all the attributes defined by the system app and their
corresponding references to find potential null-reference flaws.
Nonetheless, because more customized components are embed-
ded to support the data clone procedure, security analysis of data
export/import cannot be accomplished by code analysis only. In
contrast, our analysis combines code reverse engineering and data
analysis. Specifically, we extend the study of Shu et al. [30] by dis-
covering temporarily stored data could also be a source of sensitive
information retrieving.
Device-to-device (D2D) Communication Analysis. Data clone
process is related to D2D communication. A survey investigating
potential security threats of D2D communications is by Wang et
al. [33]. Similarly, Liu et al. [23] presented an in-depth empirical
security analysis on mobile D2D network between two Android
devices. A particular case of smart config Wi-Fi provisioning has
been revealed to be very insecure and could lead to the Wi-Fi
password leakage [21]. Our analysis further studies security issues
of Wi-Fi hotspot, Wi-Fi direct, and Bluetooth used in customized
data clone services.
Several approaches have been proposed to secure the D2D net-
work communications. Shen et al. [29] first discussed several attacks
against Wi-Fi D2D communications such as man-in-the-middle
attacks and denial-of-service attacks. They also proposed two pro-
tocols, authentication-string-based key agreement protocol and
SAS-based key agreement protocol, to secure the communication
between Android mobile phones. Besides, Raju et al. [27] proposed
a security protocol to protect individual confidentiality. To address
the vulnerabilities in existing public Wi-Fi hotspots, such as weak
encryption and lack of confidentiality, they designed a solution
to eliminate the dependency on pre-shared information. Unlike
previous work, we focus on the practical aspects (implementation
level) to assess whether the Wi-Fi hotspot is securely set up (i.e.,
SSID/password) and whether the integrity and confidentiality of
the transferred data are assured.
6 CONCLUSION
In this paper, we have investigated the security of popular Wi-
Fi hotspot based data clone services provided by Android phone
manufacturers. We developed an analysis system to help analysts
understand implementation details of closed source data clone ser-
vices, and proposed three security analysis approaches to detect
security flaws in those services. We evaluated our proposed system
and approaches by assessing eight data clone services designed by
mainstream Android phone manufacturers. The results show that
those data clone services are vulnerable to four specific attacks; mil-
lions of released Android phones would thus be vulnerable if they
were to execute such a data clone procedures. We have reported
the discovered security issues to corresponding manufacturers and
helped some of them to fix the flaws. We also claim that developers
should be aware of those risks when designing a similar service.
ACKNOWLEDGMENTS
The authors would like to thank the anonymous reviewers for
their feedback, and our shepherd, Manuel Egele, for helping im-
prove this paper. This work was partially supported by National
Natural Science Foundation of China (Grant No.62002222 and No.
U1636217), the Major Project of the Ministry of Industry and In-
formation Technology of China (Grant No.2018-36). We especially
thank Ant Financial Services Group for the support of this research
within the SJTU-AntFinancial Security Research Centre.
REFERENCES
[1] 2012. Android. http://www.android.com/.
[2] 2019. tcpdump. http://www.tcpdump.org/.
[3] 2020. ADB (Android Debug Bridge) - Android Developers. https://developer.
android.google.cn/studio/command-line/adb.
[4] 2020. Drozer. https://github.com/FSecureLABS/drozer.
[5] Accessed 2020. Apache MINA. http://mina.apache.org/.
[6] Accessed 2020. binwalk. https://github.com/ReFirmLabs/binwalk.
[7] Accessed 2020. JEB. https://www.pnfsoftware.com/.
[8] Accessed 2020. Netty Project. https://netty.io/.
[9] Accessed 2020. Wireshark. https://www.wireshark.org/.
[10] Yousra Aafer, Nan Zhang, Zhongwen Zhang, Xiao Zhang, Kai Chen, XiaoFeng
Wang, Xiao-yong Zhou, Wenliang Du, and Michael Grace. 2015. Hare Hunting
in the Wild Android: A Study on the Threat of Hanging Attribute Refer-
ences. In Proc. 22nd ACM Conference on Computer and Communications Security
(CCS). ACM, Denver, CO, USA.
[11] Yousra Aafer, Xiao Zhang, and Wenliang Du. 2016. Harvesting Inconsistent
Security Configurations in Custom Android ROMs via Differential Anal-
ysis. In Proc. 25th USENIX Security Symposium (Usenix Security). USENIX Associ-
ation, Austin, TX, USA.
[12] Steven Arzt, Siegfried Rasthofer, Christian Fritz, Eric Bodden, Alexandre Bartel,
Jacques Klein, Yves Le Traon, Damien Octeau, and Patrick D. McDaniel. 2014.
FlowDroid: Precise Context, Flow, Field, Object-sensitive and Lifecycle-
aware Taint Analysis for Android Apps. In Proc. 35th Conference on Program-
ming Language Design and Implementation (PLDI). ACM, Edinburgh, United
Kingdom.
330ACSAC 2020, December 7–11, 2020, Austin, USA
Siqi Ma, Hehao Li, Wenbo Yang, Juanru Li1, Surya Nepal, and Elisa Bertino
[13] Manuel Egele, David Brumley, Yanick Fratantonio, and Christopher Kruegel. 2013.
An empirical study of cryptographic misuse in android applications. In
Proc. 20th ACM Conference on Computer and Communications Security (CCS).
[14] Manuel Egele, Christopher Kruegel, Engin Kirda, and Giovanni Vigna. 2011.
PiOS: Detecting Privacy Leaks in iOS Applications. In Proc. 18th Annual
Network and Distributed System Security Symposium (NDSS). Internet Society, San
Diego, California, USA,.
[15] William Enck, Peter Gilbert, Seungyeop Han, Vasant Tendulkar, Byung-Gon
Chun, Landon P. Cox, Jaeyeon Jung, Patrick D. McDaniel, and Anmol N. Sheth.
2014. TaintDroid: An Information-Flow Tracking System for Realtime
Privacy Monitoring on Smartphones. ACM Trans. Comput. Syst. 32, 2 (2014),
5:1–5:29.
[16] Adrienne Porter Felt, Helen J. Wang, Alexander Moshchuk, Steve Hanna, and
Erika Chin. 2011. Permission Re-Delegation: Attacks and Defenses. In Proc.
20th USENIX Security Symposium (Usenix Security). USENIX, San Francisco, CA,
USA.
[17] Roberto Gallo, Patricia Hongo, Ricardo Dahab, Luiz C. Navarro, Henrique
Kawakami, Kaio Galvão, Glauber Junqueira, and Luander Ribeiro. 2015. Secu-
rity and System Architecture: Comparison of Android Customizations.
In Proc. 8th ACM Conference on Security and Privacy in Wireless and Mobile
Networks (WiSec). ACM, New York, NY, USA.
[18] J. Gamba, M. Rashed, A. Razaghpanah, J. Tapiador, and N. Vallina-Rodriguez.
2020. An Analysis of Pre-installed Android Software. In Proc. 41th IEEE
Symposium on Security and Privacy (SP). IEEE Computer Society, Los Alamitos,
CA, USA.
[19] Michael C. Grace, Yajin Zhou, Zhi Wang, and Xuxian Jiang. 2012. Systematic
Detection of Capability Leaks in Stock Android Smartphones. In Proc. 19th
Annual Network and Distributed System Security Symposium (NDSS). Internet
Society, San Diego, California, USA.
[20] Stefan Krüger, Johannes Späth, Karim Ali, Eric Bodden, and Mira Mezini. 2019.
Crysl: An extensible approach to validating the correct usage of crypto-
graphic apis. IEEE Transactions on Software Engineering (2019).
[21] Changyu Li, Quanpu Cai, Juanru Li, Hui Liu, Yuanyuan Zhang, Dawu Gu, and
Yu Yu. 2018. Passwords in the Air: Harvesting Wi-Fi Credentials from
SmartCfg Provisioning. In Proc. 11thACM Conference on Security and Privacy
in Wireless and Mobile Networks (WiSec). ACM, Stockholm, Sweden.
[22] L. Li, A. Bartel, T. F. Bissyandé, J. Klein, Y. Le Traon, S. Arzt, S. Rasthofer, E. Bod-
den, D. Octeau, and P. McDaniel. 2015. IccTA: Detecting Inter-Component
Privacy Leaks in Android Apps. In Proc. 37th International Conference on Soft-
ware Engineering (ICSE). IEEE Computer Society, Florence, Italy.
[23] Kecheng Liu, Wenlong Shen, Yu Cheng, Lin X Cai, Qing Li, Sheng Zhou, and
Zhisheng Niu. 2018. Security Analysis of Mobile Device-to-Device Network
Applications. IEEE Internet of Things Journal 6, 2 (2018), 2922–2932.
[24] René Mayrhofer, Jeffrey Vander Stoep, Chad Brubaker, and Nick Kralevich. 2019.
The Android Platform Security Model. CoRR abs/1904.05572 (2019).
[25] Duc Cuong Nguyen, Dominik Wermke, Yasemin Acar, Michael Backes, Charles
Weir, and Sascha Fahl. 2017. A stitch in time: Supporting android devel-
opers in writingsecure code. In Proc. 24th ACM Conference on Computer and
Communications Security (CCS). Dallas, USA, 1065–1077.
[26] Sazzadur Rahaman, Ya Xiao, Sharmin Afrose, Fahad Shaon, Ke Tian, Miles Frantz,
Murat Kantarcioglu, and Danfeng (Daphne) Yao. 2019. CryptoGuard: High
Precision Detection of Cryptographic Vulnerabilities in Massive-sized
Java Projects. In Proc. 26th ACM Conference on Computer and Communications
Security (CCS). ACM, London, UK.
[27] Laiju K Raju and Reena Nair. 2015. Secure Hotspot a novel approach to
secure public Wi-Fi hotspot. In Proc. 3rd International Conference on Control,
Communication and Computing India (ICCC). IEEE, Trivandrum India.
[28] Yuru Shao, Qi Alfred Chen, Zhuoqing Morley Mao, Jason Ott, and Zhiyun Qian.
2016. Kratos: Discovering Inconsistent Security Policy Enforcement in
the Android Framework. In Proc. 23rd Annual Network and Distributed System
Security Symposium (NDSS). Internet Society, San Diego, California, USA.
[29] Wenlong Shen, Bo Yin, Xianghui Cao, Lin X Cai, and Yu Cheng. 2016. Secure
Device-to-Device Communications over WiFi Direct. IEEE Network 30, 5
(2016), 4–9.
[30] Junliang Shu, Juanru Li, Yuanyuan Zhang, and Dawu Gu. 2018. Burn After Read-
ing: Expunging Execution Footprints of Android Apps. In Proc. 12thInter-
national Conference on Network and System Security (NSS). Springer, Hong Kong,
China.
[31] Seyed Mohammadjavad Seyed Talebi, Hamid Tavakoli, Hang Zhang, Zheng
Zhang, Ardalan Amiri Sani, and Zhiyun Qian. 2018. Charm: Facilitating Dy-
namic Analysis of Device Drivers of Mobile Systems. In Proc. 27th USENIX
Security Symposium (Usenix Security). USENIX, Baltimore, MD, USA.
[32] Narseo Vallina-Rodriguez, Johanna Amann, Christian Kreibich, Nicholas Weaver,
and Vern Paxson. 2014. A Tangled Mass: The Android Root Certificate
Stores. In Proc. 10th International Conference on emerging Networking EXperiments
and Technologies (CoNEXT). ACM, Sydney, Australia.
[33] Mingjun Wang and Zheng Yan. 2017. A Survey on Security in D2D Commu-
nications. Mobile Networks and Applications 22, 2 (2017), 195–208.
[34] Lei Wu, Michael Grace, Yajin Zhou, Chiachih Wu, and Xuxian Jiang. 2013. The
Impact of Vendor Customizations on Android Security. In Proc 20th ACM
Conference on Computer and Communications Security (CCS). ACM, Berlin, Ger-
many.
[35] Shengqian Yang, Dacong Yan, Haowei Wu, Yan Wang, and Atanas Rountev.
2015. Static Control-Flow Analysis of User-Driven Callbacks in Android
Applications. In Proc. 37th International Conference on Software Engineering
(ICSE). IEEE Computer Society, Florence, Italy.
[36] Ka-Ping Yee. 2004. Aligning security and usability. IEEE Security & Privacy
2, 5 (2004), 48–55.
[37] Lei Zhang, Zhemin Yang, Yuyu He, Zhenyu Zhang, Zhiyun Qian, Geng Hong,
Yuan Zhang, and Min Yang. 2018. Invetter: Locating Insecure Input Vali-
dations in Android Services. In Proc. 25th ACM Conference on Computer and
Communications Security (CCS). ACM, Toronto, ON, Canada.
[38] Qingchuan Zhao, Chaoshun Zuo, Brendan Dolan-Gavitt, Giancarlo Pellegrino,
and Zhiqiang Lin. 2020. Automatic Uncovering of Hidden Behaviors From
Input Validation in Mobile Apps. In Proc. 41th IEEE Symposium on Security
and Privacy (SP). IEEE Computer Society, Los Alamitos, CA, USA.
[39] Xiaoyong Zhou, Yeonjoon Lee, Nan Zhang, Muhammad Naveed, and XiaoFeng
Wang. 2014. The Peril of Fragmentation: Security Hazards in Android
Device Driver Customizations. In Proc. 35th IEEE Symposium on Security and
Privacy (SP). IEEE, Berkeley, CA, USA.
331