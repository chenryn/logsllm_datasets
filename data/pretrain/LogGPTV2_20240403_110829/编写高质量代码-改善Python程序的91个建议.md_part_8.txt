提醒：上面的例子在某些有些情况下（如 test.txt是用Notepad 软件以UTF-8编码形式保
content=content[3:]
filehandle.close()
illegal multibytesequence
标注①处flehandle.readO读出来的字符串是用UTF-8表示的，也就是A表示为UTF-8，使
import codecs
(filehandle.read().decode("utf-8")).encode("gbk")
对于A、B两种编码系统，两者之间的相互转换示意图如图2-1所示。
3）replace'将不可转换字符用？代替。
2）ignore'忽略不可转换字符。
1）strict：默认处理方式，编码错误抛出UnicodeError异常。
错误处理参数有以下3种常用方式：
BOM（ByteOrderMark）：即在UCS编码中用一个叫做ZEROWIDTHNO-BREAK
为编码单元，在字符的传送过程中，为了标明字节的顺序，Unicode规范中推荐使用
写在前面，则为big endian，将49写在前面则成为little endian。UTF-16 以两个字节
Unicode存储有字节序的问题，例如“汉”字的Unicode编码是0X6C49，如果将6C
关于BOM：
print(filehandle.read().decode("utf-8")).encode("gbk")
D
4.encode(A)
1.decode(A)
图2-1编码转换示意图
unicode
3.decode(B)
2.encode(B)
B
---
## Page 54
和ASCII是兼容的，转换不会有什么问题，但当其值大于128的时候，ASCII编码便不能正
xe2\xca\xd4，其中“中”字的编码\xd6 对应的值为214。当编码值在0～127的时候Unicode
确处理这种情况，因而抛出UnicodeDecodeError异常。解决上面的问题有以下两种思路：
ASCII编码对字符串进行解码，但由于“中文测试”的ASCII编码为\xd6\xd0\xce\xc4\xb2\
换为Unicode再与右边的Unicode字符串做连接，将str转换为Unicode时使用系统默认的
右边为Unicode字符串。当两种类型的字符串连接的时候，Python将左边的中文字符串转
in fle unicodetest.py on line1。因此，要避免这种错误需要在源文件中进行编码声明，声明可
器并不知道如何正确处理这种情况，便会抛出异常：SyntaxError:Non-ASCIIcharacter八xd6
的转换，中文字符并不是ASCII字符，而此时源文件中又未指定其他编码方式，Python解释
用正则表达式
当调用print方法输出的时候会隐式地进行从ASCII到系统默认编码（Windows上为CP936）
来验证），所以unicodetest.py文件是以ASCII形式保存的，s是包含中文字符的普通字符串。
1）指定str转为Unicode时的编码方式。
示例三分析：使用+操作符来进行字符串的连接时，+左边为中文字符串，类型为st，
示例二在源文件头中加人编码声明#coding-utf-8便可解决问题。
"coding[:=]s*([-\w.]+)表示。一般来说进行源文件编码声明有以下3种方式：
示例二分析：Python 中默认的编码是ASCII 编码（这点可以通过sys.getdefaultencodingO)
#coding=utf-8
#vim:setfileencoding=：
#!/usr/bin/python
第三种声明方式：
#!/usr/bin/python
第二种声明方式：
第一种声明方式：
#coding=
-*-coding:-*-
BBBF。所以如果接收者收到以EFBBBF开头的字节流，就知道这是UTF-8编码了。
Little-Endian的。UTF-8使用字节来编码，一般不需要BOM来表明字节顺序，但可以
到FEFF，就表明这个字节流是Big-Endian的；如果收到FFFE，就表明这个字节流是
议在传输字节流前，先传输字符ZEROWIDTHNO-BREAKSPACE。这样如果接收者收
SPACE的字符，它的编码是FEFF（该编码在UCS中不存在对应的字符），UCS规范建
用BOM来表明编码方式。字符ZEROWIDTHNO-BREAKSPACE的UTF-8编码是EF
"中文测试".decode（'gbk'）+u"ChineseTest"
第2章编程惯用法41
---
## Page 55
几种导人方法：
则可以使用Package.Subpackage.Modulel。包中的模块同样可以被导入其他模块中。有以下
（也就是模块）以外，还包含一个_init_-Py文件，同时它允许嵌套。包结构如下：
荐的做法，我们需要合理地组织项目的层次来管理模块，这就是包（Package）发挥功效的地
方了。
性和可重用性。但显然在大的项目中将所有的Python文件放在一个目录下并不是一个值得推
建议18：构建合理的包层次来管理module
Unicode字符串，这样字符串的行为将和Python3中保持一致。
表示方式。Python2.6之后可以通过importunicode_literals自动将定义的普通字符识别为
及正确的解码方法。对于中文字符，为了做到不同系统之间的兼容，建议直接使用Unicode
UnicodeDecodeError以及UnicodeEncodeError等错误，需要弄清楚字符所采用的编码方式以
什么是包呢？简单说包即是目录，但与普通目录不同，它除了包含常规的Python文件
我们知道，本质上每一个Python文件都是一个模块，使用模块可以增强代码的可维护
1）直接导人一个包，具体如下：
包中的模块可以通过“.”访问符进行访问，即“包名.模块名”。如上述嵌套结构中访
2）导人子模块或子包，包嵌套的情况下可以进行嵌套导人，具体如下：
importPackage.Modulel
from Package import Modulel
importPackage
u'\u4e2d\u6587\u6d4b\u8bd5
Unicode提供了不同编码系统之间字符转换的桥梁，要避免令人头疼的乱码或者避免
Package/
>>>from
2）将Unicode字符串进行UTF-8编码。
s=“中文测试"+u"Chinese Test".encode（"utf-8")
>>S
Subpackage/
Modulel.py
Module2.py
Module2.py
Modulel.py
_init_.py
future_
init_·PY
importunicode_literals
---
## Page 56
名字空间。
应的平台该如何导人，因此它仅仅执行_init_-Py文件，如果要控制模块的导人，则需要对
生效，这是因为不同平台间的文件的命名规则不同，Python解释器并不能正确判定模块在对
fromPackage import*将包Package中所有的模块导人当前名字空间时并不能使得导人的模块
子包或者模块。
Test，当_init_·py文件为空的时候需要使用完整的路径来申明 import语句：
从而使其变成包级别可见。上例所示的结构中，如果要import包Package下Module1中的类
它最明显的作用就是使包和普通目录区分；其次可以在该文件中申明模块级别的import语句
_init_.Py文件做修改。
之后再运行 from Package import*，可以看到_all_变量中定义的模块和包被导入当前
但如果在_init_-py文件中添加from Module1 import Test语句，则可以直接使用from
口合理组织代码，便于维护和使用。通过将关系密切的模块组织成一个包，使项目结构
前面提到在包对应的目录下包含有_init_·Py文件，那么这个文件的作用是什么呢？
ProjectName/
包的使用能够带来以下便利：
['Modulel', “Module2', 'Subpackage','_builtins_','_doc_','_name_','_package_']
>>>dir(）
>>>from Packageimport*
from Package.Modulel import Test
---README
_all_=['Modulel'，‘Module2','Subpackage']
_init_-py文件还有一个作用就是通过在该文件中定义_all_变量，控制需要导人的
importPackage.Subpackage.Modulel
From Package.Subpackage import Modulel
fromPackage import Subpackage
项目结构：
更为完善和合理，从而增强代码的可维护性和实用性。以下是一个可供参考的Python
--LICENSE
--requirements.txt
-setup.py
。在上例的 Package目录下的_init_-Py文件中添加：
-sample/
init_·py
第2章编程惯用法43
---
## Page 57
力
避免命名冲突。
系列Python文件（模块）的文件夹（目录），它的作用是合理组织代码，便于维护和使用，并
样，但由于模块所对应的其前缀不同，因此不会产生冲突。
是Subpackage 的 Module2。结果如下：
突。
上述代码中 Subpackage中也包含 Module2，当使用 from..import..导人的时候，生效的
注意：本节所说的包与后文中谈到的软件包不同，这里的包的概念仅限于包含一个或一
HifromSubpackageModule2
在嵌套的包结构中，每一个模块都以其所在的完整路径作为其前缀，因此，即使名称一
如果模块包含的属性和方法存在同名冲突，使用import module可以有效地避免名称冲
口能够有效地避免名称空间冲突。使用from Package import Module2可以将Module2导
HifromSubpackageModule2
>>>from Package.Subpackage import Module2
>>>Module2.Hi()
Hi from Package Modulel
>>
>>>Module2.Hi()
>>>from PackageimportModule2
人当前局部名字空间，访问的时候不再需要加人包名。看下面这个例子：
import Package.Subpackage.Module2
--tests/
1-----init
----........
|-----subpackage/
------index.rst
-----conf.py
---test_advanced.py
-test_basic.py
_.Py
---
## Page 58
际上要完成以下动作：
sys.modules.itemsO便可显示所有预加载模块的相关信息。当加载一个模块的时候，解释器实
这些模块相关的信息被存放在sys.modules中。读者导人sys模块后在Python解释器中输人
Python的import机制。Python在初始化运行环境的时候会预先加载一批内建模块到内存中，
式地将模块的名称作为字符串传递并赋值给命名空间的变量。
数。其中较为常见的为前面两种，而_import_函数与import语句类似，不同点在于前者显
建议19：有节制地使用from...import语句
以称之为基础语法。本章我们主要从语法层面阐述一些使用技巧和注意事项。
有条件、循环、函数、列表解析等。它们两者组合起来便构成了Python程序的基本要素，可
本节的a指的是模块名称，B则指代模块a中的一些类名或者变量等。
Python提供了3种方式来引人外部模块：import语句、from...impor...及_import_
Python 中常见的基本数据类型有数字、字符串、列表、字典、集合、元组等，常见语法
为什么在使用import的时候要注意以上几点呢？在回答这个问题之前先来简单了解一下
口尽量避免使用froma import*，因为这会污染命名空间，并且无法清晰地表示导人了
口有节制地使用from a import B形式，可以直接访问 B。
口一般情况下尽量优先使用import a形式，如访问B时需要使用a.B的形式。
在使用import的时候注意以下几点：
哪些对象。
基础语法
第3章
+
Choapetc's
函
---
## Page 59
46
异，后者直接将 B 暴露于当前局部空间，而将a加载到 sys.modules 集合。
典信息中。
“testing module import”可以看出模块同时被执行，而a和b被写入testmodule所对应的字
下多了一个.pyc的文件，
的id输出结果可以看出，本质上是引用同一个对象。同时会发现testmodule.py所在的目录
加人当前的局部命名空间中，与此同时，sys.modules也加人了该模块的相关信息。但从它们
testmodule操作会发生什么情况呢？
Python的安装目录下创建一个简单的模块testmodule.py：
象放入模块对应的字典中。
象，
局部命名空间，加载结束。
需要注意的是，直接使用import 和使用froma import B形式这两者之间存在一定的差
我们以用户自定义的模块为例来看看 sys.modules 和当前局部命名空间发生的变化。在
，并将该对象信息插入 sys.modules中。
2）如果在 sys.modules 中找不到对应模块的名称，则为需要导人的模块创建一个字典对
从输出结果可以看出，对于用户定义的模块，import机制会创建一个新的module将其
我们知道用户模块未加载之前，sys.modules 中并不存在相关信息。那么进行import
4）执行动态加载，在当前模块的命名空间中执行编译后的字节码，并将其中所有的对
1）在 sys.modules 中进行搜索看看该模块是否已经存在，如果存在，则将其导人到当前
>>>id(sys.modules['testmodule'])
print"testingmoduleimport"
3）加载前确认是否需要对模块对应的文件进行编译，如果需要则先进行编译。
>>>dir（testmodule)
35776304
35776304
>>>id（testmodule)
rrue
>>>'testmodule'in sys.modules.keys()
testingmoduleimport
>>>import testmodule
['_builtins_
>>dir（）
>>>dir（)
=
builtins
，该文件为解释器生成的模块相对应的字节码，从import之后的输出
①importtestmodule之后局部命名空间发生变化
doc
_file_
_name
.keys()
---
## Page 60
地使用from.import语句。一般来说在非常明确不会造成命名冲突的前提下，以下几种情况
下可以考虑使用from...import语句：
import..的形式会增加命名空间冲突的概率从而导致出现无法预料的问题。因此需要有节制
盖了当前命名空间之前从a中导人的addO。在项目中，特别是大型项目中频繁地使用from a
test 中起作用的到底是哪一个函数呢？
addO函数，当在import test文件中同时采用from...import..的形式导人add的时候，import
1）当只需要导人部分属性或方法时。
从程序的输出“addinmoduleB”可以看出实际起作用的是最近导人的addO，它完全覆
文件 a.py 如下：
文件b.py 如下：
来看一个例子。假设有如下3个文件：a.py，b.py及 importtest.py，其中a和b都定义了
if
from bimportadd
fromaimportadd
def add():
def add():
（1）命名空间的冲突
了解完import 机制，我们再来看看对于from a import..无节制的使用会带来什么问题。
31697400
>>id(sys.modules['a'])
6562576
>>id(sys.modules['testmodule'])
module'testmodule'from'testmodule.pyc'>
>>sys.modules['testmodule']
>>dir（）
esting moduleimport
>>
File "",
>>
print"addinmoduleA"
print "math in module B"
KeyError:'a'
id(a)
builtins
_name
builtins
dir()
import sys
==_main
line 1，in
doc
doc
'：
[ss,‘abeyoed，'aweu
_name_,
'package'，'a'，'sys']
第3章基础语法47
---
## Page 61