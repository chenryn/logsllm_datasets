start of working hours in Europe and in the United States.
Note that we were forced to rate-limit the crawling process,
as Zeus blacklists IP addresses that contact a peer too often.
Consequently, the crawling curve is much less steep than the
sensor node curve.
Figure 4 compares the IP address count convergence over
24 hours for all the active P2P botnets. A ﬁrst observation
is that only for Kelihos this number converges relatively
quickly. This is due to the size of the set {v : ∃(u, v) ∈ E}.
Kelihos prefers more recent peers and shares them with
timestamps, thus new peers spread rapidly over the majority
of all peer lists. In all other botnets, crawling converges only
slowly – independent of their actual sizes. Figure 5 shows
that enumerations via sensor nodes converge at a similar
pace. In all cases, though, the sensors enumerate peers faster
than the crawlers, and the sensors ﬁnd many more peers
than the crawlers. While IP address churn is one of the
reasons for slow node enumeration convergence, it is not
the only reason. The next subsection discusses our additional
observations regarding the dynamics of botnet populations.
106
Figure 6: Zeus population footprint graph over six weeks. The
curve shows the hourly number of peer IDs contacting our sensor.
The bars show the daily number of peers joining (positive bars)
and leaving (negative bars) the botnet.
D. Dynamics of Botnet Populations
Apart from IP address churn, machines joining and leav-
ing the network (e.g., through new infections and disin-
fections) also cause a steady churn of peers. We assessed
this phenomenon for the Zeus botnet, by looking at sensor
data from six consecutive weeks. Zeus derives unique peer
IDs from host-based information – the peer ID is a hash
over the Windows ComputerName and the ﬁrst hard drive’s
volume ID string, meaning that it remains static even across
cleanups and reinfections. We used the static IDs to uniquely
identify infected machines in order to measure population
sizes independently from IP address churn. The curve in
Figure 6 shows the number of peers that contacted our
sensor per hour. Clearly, the network footprint is larger
on weekdays and during working hours in Europe and the
United States. Similar diurnal patterns were observed for all
other monitored P2P botnets. The bars in Figure 6 represent
the number of joining (positive values) and leaving (negative
values) bots per hour. The ﬁgure shows that there is a steady
change in the network, with up to 25,000 new infections per
day. This highly dynamic behaviour means that P2P botnets
change signiﬁcantly during node enumeration runs, so that
enumeration efforts are never completely accurate.
To summarize, current P2P botnets are not very resilient to
intelligence gathering. However, some botnets do implement
simple countermeasures against crawling, like rate limiting
of peer list exchanges and automated blacklisting of hard
hitters. While none of these measures renders crawling
impossible, they can slow down the enumeration process,
leading to less accurate results. The use of sensor nodes,
when possible, avoids these anti-crawling countermeasures,
and typically provides more reliable results.
VI. P2P BOTNET DISRUPTION AND DESTRUCTION
In this section, we evaluate the resilience of all currently
known P2P botnet families against the disruption and de-
struction attacks introduced in Section IV.
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 11:53:41 UTC from IEEE Xplore.  Restrictions apply. 
A. Communication Layer Poisoning Resilience
Depending on the implementation, it may be possible
to poison a P2P botnet using its own commands, or to
disrupt the C&C channel to prevent legitimate commands
from spreading. For example, if commands are not properly
authenticated to originate from the botnet operators (e.g.,
through digital signatures), defenders could issue arbitrary
commands, such as a removal instruction or a command to
stop spam activities. Storm is an example of a P2P botnet
that was vulnerable to both kinds of attacks. Commands
were published under periodically changing keys in a DHT.
The bots generated a set of time-dependent hashes and
queried the DHT for them. The responses encoded the
location of a C&C server, which was then contacted to
request orders. Holz et al. [9] showed how to perform an
Eclipse attack against the botnet by predicting the hash
generation algorithm and injecting peers with an ID close to
the current hashes. This effectively prevented bots from con-
necting to their C&C servers. In 2008, a group of researchers
also demonstrated how the Storm botnet is vulnerable to
command injection, and that anybody can push arbitrary
executables and run them on the infected machines5. Both
attacks were possible because the protocol
lacked basic
security measures that would have prevented these attacks.
Botnet
Crypto
Signing
Replay Possible
Kelihos v1
Kelihos v2
Kelihos v3
Miner
Nugache
Sality v3
Sality v4
Storm
Waledac
ZeroAccess v1
ZeroAccess v2
Zeus
RSA2048
Blowﬁsh, 3DES
Blowﬁsh, 3DES
RSA2048
Blowﬁsh, custom RSA2048
none
RSA, Rijndael
RC4
RC4
XOR
RSA1024, AES
RC4
XOR
chained XOR6
none
RSA4096 (cid:2)
RSA1024
RSA2048
none
none
RSA512
RSA1024
RSA2048 (cid:2)
(cid:2) (no signing)
(cid:2) (no signing)
(cid:2) (no signing)
(cid:2)
Table IV: Protocol security properties of P2P botnets.
Table IV summarizes the most important security aspects
of the P2P botnets that we analyzed. All bots, except Miner,
encrypt their communication. However, the used encryption
does not secure the botnets against disruptive attacks, as the
keys and algorithms can in all cases be found through reverse
engineering. Zeus and Sality also add random padding to
their messages, which is meant only to thwart network-
based signature detection. Additionally, all active botnets
secure their command layers with RSA signatures. This does
provide real security by preventing third parties from inject-
ing unauthorized new commands into the botnets. Although
Nugache, ZeroAccess v1, and Zeus prevent the forging of
new commands through signing, they do not prevent replay
attacks because their commands do not carry nonces.
B. Sinkholing Resilience
As we discussed in Section IV-C2, sinkholing a P2P
botnet involves manipulation of the peer lists for all bots
in the botnet such that the bots’ peer list entries no longer
point to other bots, but instead to sinkholes. It is a very
effective way to disrupt the communication within a P2P
botnet. When performing a sinkholing attack, we distinguish
the following general steps.
1) Sinkhole announcement: We bootstrap the sinkholing
attack by announcing some sinkholes to as many peers
as possible.
2) Node isolation: We then try to eliminate all edges in the
P2P graph that do not point to a sinkhole. The goal of
this step is to isolate the bots from each other as much
as possible, rendering them unable to communicate
with other peers.
3) Fallback prevention: Some P2P botnets have other C&C
mechanisms that they fall back to under certain circum-
stances, e.g., if they have not received a new command
in some time. A sinkholing attack must ensure that bots
do not activate backup C&C channels to recover. This
step requires that either (1) the botnet’s backup channel
is somehow disabled, or (2) the bots are prevented from
entering into their fallback mode.
Botnet
1) Sinkhole
announcement
2) Node
isolation
3) Backup
C&C
Kelihos
Miner
Nugache
Sality
Storm
Waledac
ZeroA. v1
ZeroA. v2
Zeus
replace less recent
append to existing
replace less recent
replace low-rated
replace any
replace less recent
replace less recent
replace less recent
replace any
all
not possible
100 per message
1 per IP address
20 per message
all
all
16 per message
10 per message
fast-ﬂux
central
central
none
none
fast-ﬂux
none
none
DGA
Table V: Sinkholing resilience properties of P2P botnets.
Table V summarizes the sinkholing resilience properties
for all botnets, following the three strategic steps proposed
above. The ﬁrst column shows how a sinkhole can replace
peer list entries. In the second column, we denote how many
entries can be destroyed in a single P2P exchange. The
third column lists fallback command-and-control channels, if
any. During our analysis, we evaluated how these properties
inﬂuence the feasiblity of sinkholing attacks against all
current P2P botnets by developing attack prototypes and
testing them in the wild. The results are described in the
remainder of this section.
1) Kelihos:
5Presentation Stormfucker: 0wning the Storm Botnet, Chaos Communi-
cation Congress 25C3, Berlin, Germany, December 2008.
6Encrypts a message by performing a bytewise XOR operation with the
preceding byte, starting at the end of the message.
a) Sinkhole announcement: Kelihos has major weak-
nesses in all of its versions, since they are all based on
the same underlying protocol. The bots favor more recent
107
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 11:53:41 UTC from IEEE Xplore.  Restrictions apply. 
peers when merging received peer lists into their local
list Ev. It is possible to actively push new peer lists to
other peers, replacing their local entries all at once. As
shown in sinkholing attacks against Kelihos v1 and v2,
Kelihos can be sinkholed quite effectively by crawling the
network and poisoning every visited peer [3]. Although
only a few routable peers can be attacked initially, the
poisoned entries will then propagate across the network.
Since the Kelihos v3 botnet uses effectively the same P2P
protocol and architecture as Kelihos v1 and v2, a full scale
sinkholing attack analogous to the previous ones would
succeed again.
b) Node isolation: Node isolation in the Kelihos botnet
works very similar to sinkhole announcement. Since it
is possible to replace the entire peer list of a peer with
arbitrary entries, unlinking it from the P2P graph is trivial.
c) Fallback prevention: Kelihos implements a number
of backup channels that are activated by a bot if none
of its peers can be reached. The most important one
is a DNS fast-ﬂux network. Every bot contains a hard-
coded domain name that points back to another infected
machine. This machine can be used as a seed node to
recover connectivity in the P2P network. If the botnet is
sinkholed correctly, Kelihos will not resort to the fast-ﬂux
domains – as long as the sinkholes are responsive.
2) Sality:
a) Sinkhole announcement: Sality uses specialized “an-
nounce” messages to advertise itself to routable peers in
the P2P network. The protocol implements a reputation
scheme, in which each bot keeps track of a reputation
for all of its neighboring peers. A peer’s reputation is in-
creased if it correctly responds to requests, and decreased
otherwise [7]. An important detail of this scheme is that
bots only share peer list entries with high reputations with
each other. So in order to propagate an injected sinkhole
entry to non-routable peers we need to ensure that this
entry gains a high reputation by conforming strictly to
the Sality protocol. In our experiments, we were able to
achieve a high reputation, causing our sinkhole addresses
to be propagated to many non-routable peers.
b) Node isolation: The reputation system signiﬁcantly
hardens the botnet against sinkholing attacks, because
Sality only allows peer list entries with low reputations
to be overwritten. Thus, while we succeeded in achieving
high reputations for our sinkholes, it is signiﬁcantly more
difﬁcult to evict existing high-reputation peers. However,
in current Sality implementations, we found a weakness
which allows us to poison even high-reputation peer list
entries. This requires knowledge of which IP addresses to
overwrite, which could for instance be gathered through
crawling. The vulnerability lies in the fact that a Sality
announcement message can be used to overwrite the port
associated with a peer list entry. This requires sending
an announcement with a spoofed IP address matching the
address of the entry to overwrite, but from a different
port. Such a message causes an update of the existing port
value, rendering the entry invalid. However, this method
can only be used against routable peers, as it
is not
possible to send unsolicited announcement messages to
non-routable nodes. We were unable to ﬁnd any other
ways to poison existing high-reputation Sality peer list en-
tries. Thus, we conclude that Sality’s design is extremely
resilient to sinkholing.
c) Fallback prevention: Sality does not implement a
backup C&C mechanism. However, as Sality is a down-
loader, it could recover from a sinkholing operation with
the help of previously dropped malware. Consequently,
prior to sinkholing P2P-based downloaders, one must
ensure that none of the downloaded ﬁles contain function-
ality (such as the ability to download and execute binaries)
that the botmaster could use to recover from the attack.
3) ZeroAccess:
a) Sinkhole announcement: ZeroAccess uses a constant
stream of broadcast messages to announce live peers in
the network. These broadcast messages can be leveraged
to announce sinkholes, too. However, due to the contin-
uous announcements of other peers, peer list entries are
very volatile and are typically overwritten within a few
seconds. Therefore, in order to remain in peer lists, it
is necessary to keep ﬂooding the botnet with sinkhole
announcements. One issue is that the broadcast messages
are unable to reach non-routable peers. Nevertheless, the
more routable peers that contain sinkhole entries, the more
likely they are to propagate these entries to non-routable
peers. As soon as this occurs, the fact that these peers are
not reachable from the outside turns into an advantage;
subsequent peer announcements will not be able to easily
replace the sinkhole entries.
b) Node isolation: When a ZeroAccess bot receives a
new list of peers from another bot, it merges it with its
current peer list and keeps the most recent 256 entries,
as determined by a timestamp associated with every peer
list entry (“future” timestamps are not allowed). Thus,
bots can be isolated by sending them peer lists containing
invalid entries with very recent
timestamps. The two
ZeroAccess variants differ in their peer list exchange pro-
tocols. In ZeroAccess v1, peer lists are only shared upon
request. Thus, poisoning peers in this network requires
serving poisoned peer list exchange messages from a
sinkhole whenever it is asked for a peer list. In contrast,
ZeroAccess v2 accepts unsolicited peer list messages,
which makes poisoning almost trivial. In either case, our
sinkholing prototype is able to completely overwrite the
peer lists of bots for each variant.
108
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 11:53:41 UTC from IEEE Xplore.  Restrictions apply. 
c) Fallback prevention: ZeroAccess does not implement
a fallback command-and-control channel. However, it is
potentially able to recover from sinkholing attacks by
using its downloaded malware plugins to repair damage
and reconnect bots to the P2P network. We did not ﬁnd
such functionality when manually reverse engineering the
downloaded plugins (as of Nov 2012), although we found