4  Security 
Theorem 2.  Let  n  be  a  power  of  2  satisfying  0.97n  ≥  2κ,  prime  q  >  203  satisfying  q  =  1  mod 2n,  β  = 
ω(αγn  n log n). Then, if RLWEq,α  is hard, the proposed AKE is secure with respect to Deﬁnition 2 in the random 
oracle model. 
√ 
The intuition behind our proof is quite simple. Since the public element a and the public key of each party (e.g., 
pi  = asi + 2ei) actually consist of a RLWEq,α tuple with Gaussian parameter α (scaled by 2), the parties’ static public 
keys are computationally indistinguishable from uniformly distributed elements in Rq  under the Ring-LWE assump­
tion. Similarly, both the exchanged elements  xi  and  yj  are also computationally indistinguishable from uniformly 
distributed elements in Rq  under the RLWEq,β  assumption. Since the proof is very technical and too long, we refer 
the readers the full version online. 
D 
5  One-Pass Protocol from Ring-LWE 
As MQV [55] and HMQV [44], our AKE protocol has a one-pass variant, which only consists a single message from 
one party to the other. Let a ∈ Rq  be the global public parameter uniformly chosen from Rq  at random, and M  be a 
constant. Let pi  = asi  + 2ei  ∈ Rq  be party i’s static public key, where (si, ei) is the corresponding static secret key; 
both si  and ei  are taken from the distribution χα. Similarly, party j has static public key pj  =  asj  + 2ej  and static 
secret key (sj , ej ). The other parameters and notations used in this section are the same as before. 
11 
Initiation  Party i proceeds as follows: 
(z)
M DZ2n ,β ,z1 
(z) , 1  .
1.  Sample ri, fi ←r  χβ  and compute xi  = ari + 2fi; 
2.  Compute c = H1(i, j, xi), rˆi  = sic + ri  and fˆ i  = eic + fi; 
3.  Letting z ∈ Z2n  be the coefﬁcient vector of rˆi  concatenated with the coefﬁcient vector of fˆ i, and z1  ∈ Z2n 
be the coefﬁcient vector of sic concatenated with the coefﬁcient vector of eic, repeat the steps 1 ∼  3 with
probability 1 − min 
w 
DZ2n ,β
Finish	 Party j receives the pair (xi, wi) from party i, and proceeds as follows: 
4.  Sample gi ←r  χβ  and compute ki  = pj rˆi + 2gi  where c = H1(i, j, xi); 
5.  Compute wi  = Cha(ki) ∈ {0, 1}n  and send (yi, wi) to party j; 
6.  Compute σi  = Mod2(ki, wi) and derive the session key ski  = H2(i, j, xi, wi, σi). 
1j.  Sample gj  ←r  χα  and compute kj  = (pic + xi)sj  + 2cgj  where c = H1(i, j, xi); 
2j.  Compute σj  = Mod2(kj , wi) and derive the session key skj  = H2(i, j, xi, wi, σj ). 
The correctness of the protocol simply follows as before. The security of the protocol cannot be proven in the 
BR model with party corruption. However, we can prove it in a weak model similar to [44]. This one-pass protocol 
can essentially be used as a KEM, and can be transformed into a CCA encryption in the random oracle model by 
combining it with a CPA-secure symmetric-key encryption together with a MAC algorithm in a standard way. 
6	  Concrete Parameters and Timings 
√ 
√ 
√ 
In this section, we present concrete choices of parameters, and the timings in a proof-of-concept implementation. Our 
selection of parameters for our AKE protocols can be found in Table 2. Those parameters were chosen such that the 
correctness property is satisﬁed with high probability and with the choice of different levels of security. 
For correctness we must satisfy that the error term 1ggi − ggj 1∞  < q/8. Note that ggi  = (ej d + fj )(sic + ri) + dgi, 
and ggj  =  (eic + fi)(sj d + rj ) + cgj , where  ei, ej  ←r  χα, c, d  ←r  χγ , and  fi, fj , ri, rj , gi, gj  ←r  χβ . Due to 
the symmetry, we only estimate the size of 1ggi1∞. At this point, we use the following fact about the product of two 
Gaussian distributed random values (as stated in [8]). Let x ∈ R and y ∈ R be two polynomials whose coefﬁcients are 
distributed according to a discrete Gaussian distribution with standard deviation σ and τ, respectively. The individual √ 
coefﬁcients of the product xy are then (approximately) normally distributed around zero with standard deviation στ  n 
where n is the degree of the polynomial. 
In our case, it means that we have 1(ej d + fj )(sic + ri)1∞ ≤ 6β2  n and 1dgi1∞ ≤ 6γ β  n with overwhelming 
probability  (since  erfc(6)  is  about  2−55).  Note  that  the  distributions  of  ej d + fj  and  sic + ri  are  both  according 
to  χβ  since  we  use  the  rejection  sampling  in  the  protocol.  Now,  to  choose  an  appropriate  β  we  set  d  =  1/2  in 
Lemma 1 such that 1ej d1, 1sic1  ≤  1/2αγ n with probability at most  2 · 0.943−n. Hence, for  n  ≥  1024, we get 
a potential decryption error with only a probability about 2−87. In order to make the rejection sampling work, it is 
sufﬁcient to set β ≥ τ ∗ 1/2αγn = 1/2τ αγn for some constant τ  (which is much better than the worst-case bound 
β  = ω(αγ  n log n) in Theorem 1). For instance, if τ  = 12, we have an expect number of rejection sampling about 
M  =  2.72 and a statistical distance about  2−100  by Theorem 1. For such a choice of β, we can safely assume that 
1ggi1∞ ≤ 6β2  n + 6γ β  n ≤ 7β2  n. Thus, it is enough to set 16 ∗ 7β2  n < q for correctness of the protocol. 
Though the Ring-LWE problem enjoys a worst-case connection to some hard problems (e.g., SIVP [52]) on ideal 
lattices, the connection as summarized in Proposition 1 seems less powerful to estimate the actual security for con­
crete choices of parameters. In order to assess the concrete security of our parameters, we use the approach of [20], 
which investigates the two most efﬁcient ways to solve the underlying (R)LWE problem, namely the embedding and 
decoding attacks. As opposed to [20], the decoding attack is more efﬁcient against our instances because in RLWE 
with m ≥  2n one typically is close to the optimal attack dimension for the corresponding attacks. The decoding at­
tack ﬁrst uses a lattice reduction algorithm, such as BKZ [61] / BKZ 2.0 [17] and then applies a decoding algorithm, 
such as Babai’s nearest plane [2], Lindner and Peikert’s nearest planes [48], or Liu and Nguyen’s pruned enumera­
tion approach [49]. Finally, the closest vector is returned which coincides with the error polynomial, and the secret 
polynomial is recovered. 
As recommended in [48,33], it is enough to set the Gaussian parameter α  ≥  3.2 so that the discrete Gaussian 
DZn,α  approximates the continuous Gaussian Dα  extremely well9. In our experiment, we ﬁx α = 3.397 for a better 
9  Only α is considered because β » α, and the (R-)LWE problem becomes harder as α grows bigger (for a ﬁxed modulus q). 
√ 
√ 
M	 
√ 
√ 
12 
Table 2. Choices of Parameters (The bound 6α with erfc(6) ≈ 2
−55  is used to estimate the size of secret keys) 
Protocol 
Choice of 
Parameters  n  Security 
α 
Two-pass 
One-pass 
I1 
I2 
II1 
II2 
III1 
III2 
IV1 
IV2 
1024 
2048 
1024 
2048 
80 bits  3.397 
75 bits  3.397 
230 bits  3.397 
210 bits  3.397 
160 bits  3.397 
140 bits  3.397 
360 bits  3.397 
350 bits  3.397 
τ 
12 
24 
12 
36 
12 
36 
12 
36 
log β  log q (bits) 
16.1 
17.1 
17.1 
18.7 
16.1 
17.7 
17.1 
18.7 
45 
47 
47 
50 
30 
32 
32 
33 
Size (KB) 
pk 
sk (expt.)  init. msg  resp. msg 
5.625 KB  1.5 KB  5.625 KB  5.75 KB 
5.875 KB  1.5 KB  5.875 KB  6.0 KB 
11.75 KB  3.0 KB  11.75 KB  12.0 KB 
12.50 KB  3.0 KB  12.50 KB 12.75 KB 
3.75 KB  1.5 KB  3.75 KB  3.875 KB 
4.0 KB 
4.0 KB  4.125 KB 
8.0 KB 
8.0 KB  8.25 KB 
8.25 KB  3.0 KB  8.25 KB  8.5 KB 
1.5 KB 
3.0 KB 
performance of the Gaussian sampling algorithm in [29]. As for the choices of γ, we set γ = α for simplicity (actually 
such a choice in our experiments works very well: no rejection happened for 1000 times hash evaluations). In Table 
1, we set all other parameters β , n, q for our two-pass protocol to satisfy the correctness condition. We also give the 
parameter choices of our one-pass protocol (in this case, we can save a factor of β in q due to the asymmetry). Note 
that n is required to be a power of 2 in our protocol (i.e., it is very sparsely distributed10), we present several candidate 
choices of parameters for n  =  1024, 2048, and estimate the sizes of public keys, secret keys, and communication 
overheads in Table 2. 
Table 3. Timings of proof-of-concept implementations in ms. 
Protocol  Parameters 
Two-pass 
I1 
I2 
II1 
II2 
τ 
12 
24 
12 
36 
Initiation  Response  Finish 