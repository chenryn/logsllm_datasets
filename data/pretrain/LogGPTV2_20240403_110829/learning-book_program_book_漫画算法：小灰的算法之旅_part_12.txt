3.
int tmp=0;
4.
for(int i=0; i array[j+1])
12.
{
13.
tmp = array[j];
14.
array[j] = array[j+1];
15.
array[j+1]= tmp;
16.
//有元素交换，所以不是有序的，标记变为false
17.
isSorted = false;
18.
---
## Page 205
19.
20.
if(isSorted){
21.
break;
22.
//在偶数轮之前，将isSorted重新标记为true
23.
isSorted = true;
24.
//偶数轮，从右向左比较和交换
25.
for(int j=array.length-i-1; j>i; j--)
26.
{
27.
if(array[j] 4，left指针在元素7的位置停下。这时，让left和right指针所指向
的元素进行交换。
pivot=4
3
left
right
接下来，进入第2次循环，重新切换到right指针，向左移动。right指针
先移动到8，8>4，继续左移。由于2= endIndex）{
4.
return;
5.
6.
//得到基准元素位置
7.
int pivotIndex = partition(arr， startIndex, endIndex);
8.
//根据基准元素，分成两部分进行递归排序
9.
quickSort(arr, startIndex, pivotIndex - 1);
10.
quickSort(arr， pivotIndex + 1,endIndex);
11.}
12.
13./**
14.
*分治（双边循环法）
15.
@param arr
待交换的数组
16.
@param startIndex
起始下标
17.
*@param endIndex
结束下标
---
## Page 218
18.
*/
19. private static int partition(int[] arr, int startIndex,
int endIndex){
20.
//取第1个位置（也可以选择随机位置）的元素作为基准元素
21.
int pivot = arr[startIndex];
22.
int left = startIndex;
23.
int right = endIndex;
24.
25.
while( left != right){
26.
//控制right指针比较并左移
27.
while(left pivot){
28.
right--;
29.
}
30.
//控制left指针比较并右移
31.
while( left4，所以继续遍历。
pivot=4
3
5
2
mark
接下来遍历到的元素是3，3<4，所以mark指针右移1位。
pivot=4
5
5
mark
随后，让元素3和mark指针所在位置的元素交换，因为元素3归属于小于