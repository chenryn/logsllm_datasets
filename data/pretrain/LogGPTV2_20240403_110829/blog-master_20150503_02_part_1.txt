## Customize Dictionary or Filter dictionary by Synonym & Thesaurus, customize zhparser's xdb  
### 作者                                                                                                                                        
digoal                                                                                                                                        
### 日期                                                                                                                                         
2015-05-03                                                                                                                             
### 标签                                                                                                                                        
PostgreSQL , 中文分词 , zhparser , 自定义词典          
----                                                                                                                                                    
## 背景                                                                             
以前写过一些关于PostgreSQL 中文分词的用法文章，参考  
[《PostgreSQL chinese full text search 中文全文检索》](../201403/20140324_01.md)    
本文主要补充一些内容：  
1\. PostgreSQL文本检索的原理  
2\. 如何调试parser  
3\. 如何实现词组替换  
4\. 如何添加或修改解析过程用的中文词组  
## 正文  
1\. PostgreSQL文本检索的大致原理：  
首先parser负责对文本进行拆分和归类（生成lexeme）；对于英语系的拆分比较简单，因为单词间有空格隔开，PostgreSQL默认的parser仅仅支持英文体系的解析。对中文来说需要自定义parser，例如zhparser是一个例子。  
然后PG将解析好的lexeme根据字典进行匹配，用户可用配置多个字典，例如匿名字典，一般字典。  
匿名字典可用于替换，例如将某些词义相同的词替换为某一个词。  
一般字典用于匹配，匹配到的lexeme是有效词，没有匹配到的lexeme丢弃。  
PG默认支持的parser如下：  
```  
digoal=> select * from pg_ts_parser ;  
 prsname | prsnamespace |  prsstart  |    prstoken    |  prsend  |  prsheadline  |  prslextype    
---------+--------------+------------+----------------+----------+---------------+--------------  
 default |           11 | prsd_start | prsd_nexttoken | prsd_end | prsd_headline | prsd_lextype  
(1 row)  
```  
解析后的lexeme分为几类：  
```  
digoal=> select * from pg_catalog.ts_token_type('default');  
 tokid |      alias      |               description                  
-------+-----------------+------------------------------------------  
     1 | asciiword       | Word, all ASCII  
     2 | word            | Word, all letters  
     3 | numword         | Word, letters and digits  
     4 | email           | Email address  
     5 | url             | URL  
     6 | host            | Host  
     7 | sfloat          | Scientific notation  
     8 | version         | Version number  
     9 | hword_numpart   | Hyphenated word part, letters and digits  
    10 | hword_part      | Hyphenated word part, all letters  
    11 | hword_asciipart | Hyphenated word part, all ASCII  
    12 | blank           | Space symbols  
    13 | tag             | XML tag  
    14 | protocol        | Protocol head  
    15 | numhword        | Hyphenated word, letters and digits  
    16 | asciihword      | Hyphenated word, all ASCII  
    17 | hword           | Hyphenated word, all letters  
    18 | url_path        | URL path  
    19 | file            | File or path name  
    20 | float           | Decimal notation  
    21 | int             | Signed integer  
    22 | uint            | Unsigned integer  
    23 | entity          | XML entity  
(23 rows)  
```  
我们可以为每一种类型创建不同的字典来对付。  
PG怎么管理lexeme类型和字典的映射关系呢？用ts config。  
语法：  
创建TS CONFIG  
```  
Command:     CREATE TEXT SEARCH CONFIGURATION  
Description: define a new text search configuration  
Syntax:  
CREATE TEXT SEARCH CONFIGURATION name (  
    PARSER = parser_name |  
    COPY = source_config  
)  
```  
配置lexeme类型和字典的关系。  
```  
ALTER TEXT SEARCH CONFIGURATION name  
    ADD MAPPING FOR token_type [, ... ] WITH dictionary_name [, ... ]  
ALTER TEXT SEARCH CONFIGURATION name  
    ALTER MAPPING FOR token_type [, ... ] WITH dictionary_name [, ... ]  
```  
2\. 如何调试parser，如何修改全文检索的配置  
```  
ts_debug([ config regconfig, ] document text,  
         OUT alias text,  
         OUT description text,  
         OUT token text,  
         OUT dictionaries regdictionary[],  
         OUT dictionary regdictionary,  
         OUT lexemes text[])  
         returns setof record  
```  
ts_debug函数用于调试parser, 例如：  
我准备使用english这个配置，这个配置中包含的lexeme类型和字典的对应关系如下：  
```  
digoal=> \dF+ english  
Text search configuration "pg_catalog.english"  
Parser: "pg_catalog.default"  
      Token      | Dictionaries   
-----------------+--------------  
 asciihword      | english_stem  
 asciiword       | english_stem  
 email           | simple  
 file            | simple  
 float           | simple  
 host            | simple  
 hword           | english_stem  
 hword_asciipart | english_stem  
 hword_numpart   | simple  
 hword_part      | english_stem  
 int             | simple  
 numhword        | simple  
 numword         | simple  
 sfloat          | simple  
 uint            | simple  
 url             | simple  
 url_path        | simple  
 version         | simple  
 word            | english_stem  
```  
调试一下：  
```  
digoal=> select * from ts_debug('english','hello digoal, http://blog.163.com/digoal@126/');  
   alias   |   description   |          token           |  dictionaries  |  dictionary  |          lexemes             
-----------+-----------------+--------------------------+----------------+--------------+----------------------------  
 asciiword | Word, all ASCII | hello                    | {english_stem} | english_stem | {hello}  
 blank     | Space symbols   |                          | {}             |              |   
 asciiword | Word, all ASCII | digoal                   | {english_stem} | english_stem | {digoal}  
 blank     | Space symbols   | ,                        | {}             |              |   
 protocol  | Protocol head   | http://                  | {}             |              |   
 url       | URL             | blog.163.com/digoal@126/ | {simple}       | simple       | {blog.163.com/digoal@126/}  
 host      | Host            | blog.163.com             | {simple}       | simple       | {blog.163.com}  
 url_path  | URL path        | /digoal@126/             | {simple}       | simple       | {/digoal@126/}  
(8 rows)  
```  
parser将这个文本解析为8个lexeme，dictionary 字段表示匹配到的字典是哪个，可以看到每个lexeme类型用什么字典来处理的呢？  
例如：  
asciiword类型 (hello,digoal)用到了english_stem字典，和TS CONFIG配置一致。  
protocol类型在english这个TS CONFIG中没有指定对应的字典，所以没有匹配。  
url_path类型使用simple字典进行匹配。  
最后我们看看得到的tsvector是什么？  
```  
digoal=> select * from to_tsvector('english','hello digoal, http://blog.163.com/digoal@126/');  
                                     to_tsvector                                       
-------------------------------------------------------------------------------------  
 '/digoal@126/':5   
'blog.163.com':4   
'blog.163.com/digoal@126/':3   
'digoal':2   
'hello':1  
(1 row)  
```  
显然，和调试结果一样，有5个lexeme有字典匹配，没有匹配到的就丢弃了。  
现在我可以给english这个配置加一下protocol的字典，这样就可以输出对应的词组了。  
```  
digoal=> \c digoal postgres  
You are now connected to database "digoal" as user "postgres".  
digoal=# alter text search configuration english add mapping for protocol with simple;  
ALTER TEXT SEARCH CONFIGURATION  
digoal=# select * from to_tsvector('english','hello digoal, http://blog.163.com/digoal@126/');  
                                           to_tsvector                                             
-------------------------------------------------------------------------------------------------  
 '/digoal@126/':6   
  'blog.163.com':5   
  'blog.163.com/digoal@126/':4   
  'digoal':2   
  'hello':1   
  'http://':3  
(1 row)  
digoal=# select * from ts_debug('english','hello digoal, http://blog.163.com/digoal@126/');  
   alias   |   description   |          token           |  dictionaries  |  dictionary  |          lexemes             
-----------+-----------------+--------------------------+----------------+--------------+----------------------------  
 asciiword | Word, all ASCII | hello                    | {english_stem} | english_stem | {hello}  
 blank     | Space symbols   |                          | {}             |              |   
 asciiword | Word, all ASCII | digoal                   | {english_stem} | english_stem | {digoal}  
 blank     | Space symbols   | ,                        | {}             |              |   
 protocol  | Protocol head   | http://                  | {simple}       | simple       | {http://}  
 url       | URL             | blog.163.com/digoal@126/ | {simple}       | simple       | {blog.163.com/digoal@126/}  
 host      | Host            | blog.163.com             | {simple}       | simple       | {blog.163.com}  
 url_path  | URL path        | /digoal@126/             | {simple}       | simple       | {/digoal@126/}  
(8 rows)  
```  
3\. 如何实现词组替换  
我们前面已经讲了，一个lexeme类型可以有多个字典来对付。  
按照字典的先后顺序进行匹配，对于一般字典，匹配到了就直接返回匹配成功，如果没有匹配到，才会将这个lexeme交给下一个字典进行匹配。  
但是还有两种字典，它们匹配到后不返回，而是替换为另一个词，然后将替换后的词交给下面的字典进行匹配。  
这样有利于对多义词进行筛选合并，例如有10个词含义是一样的，那么我们可以替换为1个词来表示，减少最终分词的数量。  
例如将刘德华，黎明，郭富城，张学友替换为四大天王。将德哥，周正中替换为digoal。  
这两种字典是synonym dictionary, Thesaurus dictionary。它们的配置文件在PG_HOME/share/tsearch_data目录下面，后缀名分为syn和ths，例如：  
```  
-rw-r--r-- 1 root root   73 May  1 18:01 synonym_sample.syn  
-rw-r--r-- 1 root root  473 May  1 18:01 thesaurus_sample.ths  
```  
下面我们来试用一下。  
例如我还是用english这个配置，先调试一下看看，这几个中文词解析为word类型，试用了english_stem字典。  
```  
digoal=> select * from ts_debug('english','郭富城 刘德华 张学友 黎明');  
 alias |    description    | token  |  dictionaries  |  dictionary  | lexemes    
-------+-------------------+--------+----------------+--------------+----------  
 word  | Word, all letters | 郭富城 | {english_stem} | english_stem | {郭富城}  
 blank | Space symbols     |        | {}             |              |   
 word  | Word, all letters | 刘德华 | {english_stem} | english_stem | {刘德华}  
 blank | Space symbols     |        | {}             |              |   
 word  | Word, all letters | 张学友 | {english_stem} | english_stem | {张学友}  
 blank | Space symbols     |        | {}             |              |   
 word  | Word, all letters | 黎明   | {english_stem} | english_stem | {黎明}  
(7 rows)  
```  
现在我创建一个syn文件，内容如下：  
```  
postgres@db-192-168-173-33-> cd /opt/pgsql/share/tsearch_data/  
postgres@db-192-168-173-33-> vi digoal.syn  
刘德华 四大天王  
郭富城 四大天王  
张学友 四大天王  
黎明 四大天王  
德哥 digoal  
周正中 digoal  
```  
然后要创建一个synonym字典，模板用synonym，匿名配置文件用digoal.syn：  
```  