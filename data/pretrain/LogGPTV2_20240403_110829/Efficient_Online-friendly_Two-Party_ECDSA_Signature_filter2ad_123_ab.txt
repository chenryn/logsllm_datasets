We propose an online-friendly two-party ECDSA, 2ECDSA, such
that its online computation is nearly optimal and its offline phase
just needs a single call of MtA.
(1) The online phase of our protocol is non-interactive and op-
timal. It only requires transmitting a single element, and
its computation cost is dominated by the verification of the
resulting signature. Our offline phase runs in three-pass with
a single MtA, thus has significant improvement over [15]
and the two-party cases of [6, 8, 16, 19, 26, 33]. Two novel
techniques are developed, which may be of independent
interest.
(a) The linear sharing of the nonce 𝑘 = 𝑘1(𝑟1 + 𝑘2), where
𝑘1, 𝑟1 are chosen by party 𝑃1 and 𝑘2 is chosen by the other
party, 𝑃2. It is different from the existing simple additive
or multiplicative sharing of the nonce.
(b) The re-sharing of the secret 𝑥 by using 𝑘2 in the offline
phase. New share 𝑥′1 (resp. 𝑥′2) of the signing key is chosen
by 𝑃1 (resp. 𝑃2), such that 𝑥 = 𝑥′1𝑘2 + 𝑥′2 (which is also a
linear function).
These techniques enable us to construct an online-friendly
2ECDSA with a single MtA. Details are given in Sec. 1.2.
(2) We provide an implementation of our two-party 2ECDSA
protocol in Rust, with instantiation of the MtA functional-
ity from Paillier encryption, CL encryption, and oblivious
transfer. We give an efficiency comparison with all previ-
ous two-party ECDSA and the two-party case of threshold
ECDSA. Details are shown in Table 2. On the premise of
preserving fast online computation, our scheme reduces the
offline cost of Paillier-based protocol to 226 ms and 6.3 KB,
and further to 141 ms and 4.1 KB based on Paillier-EC as-
sumption. For CL-based instantiation, the complexity of the
Session 2D: Secure Multiparty Computation CCS ’21, November 15–19, 2021, Virtual Event, Republic of Korea559offline phase is 1386 ms and 1.7 KB. Based on oblivious trans-
fer (OT), the offline cost of our scheme is 2.6 ms and 90.9
KB.
(3) Applying 2-out-of-𝑛 Shamir secret-sharing [30] to 𝑛-party
additively shared secret during key generation, our two-
party 2ECDSA could be easily extended to the 2-out-of-𝑛
ECDSA. The general scheme’s signing phase has the same
complexity as 2ECDSA.
1.2 Technical Overview
Recall that the main bottleneck of previous schemes is due to the use
of complex protocols for the two parties to compute 𝑘−1(𝐻(𝑚)+𝑟𝑥)
such that 𝑥 = 𝑥1 + 𝑥2 and 𝑘 = 𝑘1 + 𝑘2 (resp. 𝑥 = 𝑥1𝑥2 and 𝑘 = 𝑘1𝑘2)
in the case of additive sharing (resp. multiplicative sharing). In
other words, the bottleneck is inherent in the multiple executions
of MtA for these shares.
Starting point. We start from a simple combination of multiplica-
tive sharing of 𝑘 (i.e. 𝑘 = 𝑘1𝑘2) and additive sharing of 𝑥 (i.e.
𝑥 = 𝑥1 + 𝑥2). This has been utilized by Doerner et al. [15] to handle
2-out-of-𝑛 threshold scheme, albeit, in a rather inefficient way. To
jointly compute 𝑠 = 𝐻(𝑚)/𝑘1𝑘2 + 𝑟(𝑥1 + 𝑥2)/𝑘1𝑘2, they adopt three
MtA to export the additive shares of 1/𝑘1 · 1/𝑘2, 𝑥1/𝑘1 · 1/𝑘2, and
1/𝑘1 · 𝑥2/𝑘2 respectively. Thus, their two-party case of 2-out-of-𝑛
scheme is worse than their direct two-party scheme where only
two MtA are required.
The first attempt: Re-sharing of the secret. We resolve this
problem with a re-sharing of secret 𝑥 using a share of nonce 𝑘2.
Concretely, in the offline phase the secret 𝑥 = 𝑥1 + 𝑥2 is re-shared
to 𝑥′1, 𝑥′2 using one MtA such that
𝑥1 + 𝑥2 = 𝑥′1𝑘2 + 𝑥′2.
In the online phase, 𝑃2 computes 𝑠2 = 𝑘−1
2 (𝐻(𝑚) + 𝑟𝑥′2), and 𝑃1
could derive the signature component 𝑠 from 𝑠2, 𝑘1 and 𝑥′1 since
(cid:2)𝐻(𝑚) + 𝑟(𝑥′2 + 𝑘2𝑥′1)
(cid:3)
1 (𝑠2 + 𝑟𝑥′1)
1 𝑘−1
2
𝑠 = 𝑘−1
= 𝑘−1
= 𝑘−1(𝐻(𝑚) + 𝑟𝑥).
The offline phase re-shares the secret 𝑥 = 𝑥1 + 𝑥2 into 𝑥 =
𝑥′1𝑘2 + 𝑥′2, with a single MtA. Specifically, 𝑃1 chooses a random
𝑥′1 ← Z𝑞, and then 𝑃1 and 𝑃2 invoke MtA with input 𝑥′1 and 𝑘2
respectively, and receive shares 𝑡𝐴 and 𝑡𝐵 such that 𝑡𝐴 + 𝑡𝐵 = 𝑥′1𝑘2.
Then 𝑃1 masks 𝑥1 with 𝑡𝐴 and sends 𝑐𝑐 = 𝑡𝐴 − 𝑥1 to 𝑃2. 𝑃2 could
extract its new share 𝑥′2 from 𝑐𝑐, 𝑥2, and 𝑡𝐵, since
𝑥′2 = 𝑥1 + 𝑥2 − 𝑥′1𝑘2 = (𝑡𝐴 − 𝑐𝑐) + 𝑥2 − 𝑥′1𝑘2 = −𝑡𝐵 − 𝑐𝑐 + 𝑥2.
The resulting scheme is online-friendly and requires a single MtA
in the offline phase. Unfortunately, this solution is insecure and a
malicious adversary may cheat.
Attack on the first attempt. We show that a malicious 𝑃2 can
obtain 𝑥1 in the previous scheme. Observe that
𝑥1 = 𝑡𝐴 − 𝑐𝑐 = 𝑥′1𝑘2 − 𝑡𝐵 − 𝑐𝑐,
where 𝑘2, 𝑡𝐵, 𝑐𝑐 are known to 𝑃2. The malicious 𝑃2 can set 𝑘2 = 0
as the input of MtA and learn 𝑃1’s secret 𝑥1 = −𝑡𝐵 − 𝑐𝑐.
Our solution: Linear sharing of the nonce. A simple solution
to rule out the attack of 𝑘2 = 0 is to add a zero-knowledge proof of
𝑘2 ≠ 0 for 𝑃2, but it would be quite expensive. Instead, we apply a re-
randomization method to solve this problem. Now, the re-sharing
of the secret is changed to 𝑥 = 𝑥′1(𝑘2 + 𝑟1) + 𝑥′2, where 𝑟1 is chosen
by 𝑃1 and could be given to 𝑃2. To achieve that, 𝑃1 now masks
𝑥1 with 𝑡𝐴 and a random 𝑟1 by setting 𝑐𝑐 = 𝑡𝐴 + 𝑟1𝑥′1 − 𝑥1. Now
𝑥1 = 𝑡𝐴 + 𝑟1𝑥′1 − 𝑐𝑐 = 𝑥′1(𝑘2 + 𝑟1) − 𝑡𝐵 − 𝑐𝑐. If 𝑟1 is chosen by 𝑃1 after
𝑘2 is chosen by the (malicious) 𝑃2, 𝑃2 learns nothing about 𝑥1 since
𝑘2 + 𝑟1 = 0 with probability at most 1/𝑞.
In order to support this change in the re-sharing of the secret, we
need to view 𝑃2’s share of the nonce as (𝑘2+𝑟1). Interestingly, while
we require 𝑟1 to be chosen by 𝑃1 (in order to withstand the above
attack), (𝑘2 + 𝑟1)−1 can be computed by 𝑃2 itself (otherwise, we
need another round of MtA). Hence, we change the multiplicative
sharing of the nonce 𝑘 into a linear function 𝑘1(𝑟1 + 𝑘2). In the
offline phase, 𝑃1 picks random 𝑟1 and sends it to 𝑃2. Later in the
online phase, (𝑘2 + 𝑟1)−1 can be computed by 𝑃2. This is the reason
why we use a linear sharing of the nonce.
Additional consistency check is needed when setting up 𝑘 · 𝑃 by
𝑃1 and 𝑃2. Details are given in Sec. 3.
1.3 Extension and Instantiations
Extending to 2-out-of-𝑛 Access Structures. Our two-party 2ECDSA
is presented using 2-out-of-2 additive share of the private key 𝑥.
It could be easily extended to a 2-out-of-𝑛 protocol using Shamir
secret-sharing, in a way similar to Gennaro and Goldfeder [19]. A
similar approach has been described in [26] and [6]. We also let 𝑥 be
the additive share of each party’s contribution 𝑥𝑖, i.e. 𝑥 = 𝑥1+· · ·+𝑥𝑛.
It is natural to use a 2-out-of-𝑛 Shamir secret-sharing [30] to convert
it into a 2-out-of-𝑛 shares of 𝑥 in a verifiable manner.
𝑖
parties 𝑃𝑖, 𝑃 𝑗 could generate 𝛬𝑖𝑛
that 𝑥 = 𝛬𝑖𝑛
signing of 2ECDSA directly with 𝛬𝑖𝑛
Here, we give a brief overview. For details, please refer to Ap-
pendix A. Each 𝑃𝑖 chooses a linear function 𝑓𝑖 such that 𝑓𝑖(0) = 𝑥𝑖
and sends 𝑥 ( 𝑗)
= 𝑓𝑖( 𝑗) to 𝑃 𝑗 for all 𝑗 ∈ [1, 𝑛]. Then, every two
parties 𝑃𝑖, 𝑃 𝑗 could recover 𝑥𝑘 (for every 𝑘 ∈ [1, 𝑛]) via interpo-
and 𝑥 ( 𝑗)𝑘 , i.e., 𝑥𝑘 = 𝛬𝑖𝑥 (𝑖)𝑘 + 𝛬𝑗 𝑥 ( 𝑗)𝑘 where 𝛬𝑖, 𝛬𝑗
lating from 𝑥 (𝑖)𝑘
are Lagrange coefficients. With Shamir’s secret sharing, any two
such
𝑘=1 𝑥 ( 𝑗)𝑘 . They could further invoke the
as
their additive shares of 𝑥. The general 2-out-of-𝑛 ECDSA has the
same signing protocol with 2ECDSA.
On the instantiations of MtA. Existing constructions of MtA
from OT, Paillier encryption, and CL-encryption can be directly
applied to our 2ECDSA.
and 𝛬𝑗𝑛
and 𝛬𝑗𝑛
𝑘=1 𝑥 (𝑖)𝑘 + 𝛬𝑗𝑛
𝑘=1 𝑥 ( 𝑗)𝑘
𝑘=1 𝑥 ( 𝑗)𝑘
𝑘=1 𝑥 (𝑖)𝑘
𝑘=1 𝑥 (𝑖)𝑘
Doerner et al. [15] proposed an OT-based MtA from Simplest
OT [10] and KOS [23] OT-extension protocols. Their MtA is com-
putationally efficient, while the communication cost is rather high
(e.g., 90 KB for 128 bits security). Although improved method was
applied, their two-party ECDSA requires a communication cost of
at least 168 KB. Integrating the OT-based MtA into our scheme, we
obtain the first OT-based two-party signature with communication
cost less than 100 KB at 128-bit security.
Paillier-based MtA is first proposed in [27] and improved by
[6, 19, 26]. The main issue when using Paillier cryptosystem for
MtA is that it operates over Z𝑁 rather than Z𝑞, where 𝑞 is the EC
group order. As a result, expensive zero-knowledge range proofs are
Session 2D: Secure Multiparty Computation CCS ’21, November 15–19, 2021, Virtual Event, Republic of Korea560Table 2: Comparison of signing with two-party protocols and two-party case of threshold ECDSA from Paillier, OT and CL
respectively. These concrete numbers are based on computational security parameter 𝜆 = 128 and statistical security parameter
80. For those Paillier-based schemes, E represents a Paillier exponentiation over Z𝑁 2 (we approximately count 3 operations of
mod 𝑁 as one operation of mod 𝑁 2. Some of E are single “short" exponentiation), while for CL-based schemes E means an
exponentiation over CL group. M refers to elliptic curve point multiplication which is almost free compared with E. In the
communication column, EC points, CL group elements, and ring elements of Paillier are encoded by 𝜅, 7𝜅 (only for 𝜅 = 256), and
2ℓ𝑁 bits respectively. Estimating in parentheses includes the constant overhead with the standard security recommendation, i.e.
𝜅 = 256 and ℓ𝑁 = 3072. “Paillier-EC" means that Paillier-EC assumption is applied to eliminate a zero-knowledge proof.
Signing Protocols
LNR18 [26]
GG18 [19]
CGGMP20 [6]
2ECDSA (Paillier)
Lin17 [25] (Paillier-EC)
GG18 [19] (Paillier-EC)
2ECDSA (Paillier-EC)
CCLST19 [7]
CCLST20 [8]
YCX21 [33]
2ECDSA (CL)
DKLS18 [15]
DKLS19 [16]
2ECDSA (OT)
offline
28E + 157M (461ms)
42E + 40M (1237ms)
208E + 44M (2037ms)
14E + 11M (226ms)
2E + 8M (34ms)
18E + 40M (360ms)
8E + 14M (141ms)
4E + 8M (475ms)
28E + 8M (3316ms)
28E + 8M (4550ms)
11E + 11M (1386ms)
13M (2.9ms)
13M (3.7ms)
11M (2.6ms)
Computation
online
14E + 121M (302ms)
17M (3ms)
2M (0.2ms)
2M (0.2ms)
1E + 2M (8ms)
17M (3ms)
2M (0.2ms)
1E + 2M (190ms)
17M (3ms)
17M (3ms)
2M (0.2ms)
2M (0.2ms)
2M (0.2ms)
2M (0.2ms)
Communication
online
16ℓ𝑁 + 51𝜅 (6.6KB)
9𝜅 (288B)
𝜅 (32B)
𝜅 (32B)
2ℓ𝑁 (768B)