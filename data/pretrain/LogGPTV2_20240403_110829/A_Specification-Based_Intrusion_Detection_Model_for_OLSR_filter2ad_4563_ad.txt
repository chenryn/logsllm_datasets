2-hop 
MPR 
MPR 
Selector 
0,2,4,5 
1 
2,3,5,6
2,4  6,7,8,9  0,3,4,5,6  2,5,6  0,2,6,7 0,2,3,8  1,2,3,4,9 1,4,9 
1 
1,5,8,9 1,4,6,7,9
7 
7 
1,5 
1,4,7 
5,7 
5,7 
5 
1,7 
1,7 
4,5 
- 
0,2,4,5 
- 
- 
1,5,8  1,4,6,7,9
- 
2,3,5,6
- 
8 
4,9 
1,5 
4 
9 
4,5,8 
1,6,7 
5 
- 
to  override  the  corrupted  messages.  The  simulation  shows  the  correct  messages 
successfully override the corrupted messages and correct the infected routing tables. 
Man in the Middle Attack by A1&A3.  Attacker 1 intends to change a route, 8->9-
>5->7->3, to go through itself. It uses attack methods 1 and 3 to convince node 8 and 
4  to  forward  packets  toward  3  through  itself,  and  then  it  can  use  2  to  forward  the 
packets from 8 to 3. First, by attack method 3, Node 1 adds 3 into its MPR selectors in 
its new TC message to make 8 choose 4 as the next hop toward 3. 8 receives the new 
forged message and choose 1 as the last hop to 3 in its topology table; this is used to 
reach  all  node  in  3  or  more  hops  away.  Since  1  is  a  2-hop  neighbor  of  8,  from  8’s 
point of view, route 8->3 becomes 8->4->1->3, so  8 chooses 4 as the next hop toward 
3 in its routing table.  
Second, by attack method 1, Node 1 adds 3 to its 1-hop neighbors in its new Hello 
message in order to make 4 choose 1 as the  next hop toward 3. After receiving the 
forged message, 4 adds 3 into its 2-hop neighbor list, and chooses 1 as the next hop 
toward 3 in its routing table. Thus, when 8 forwards packets toward 3 to 4, 4 forwards 
them  to  1,  and  attacker  1  can  forward  the  packets  from  4  to  node  2  in  order  to 
successfully change the route from 8 to 3. Since 2 received 7’s Hello first and added 3 
as a 2-hop neighbor, 2 will not choose node 1 as its next hop toward 3. 2 forwards the 
packets to 7 and 7 forwards them to 3. The attack is a success. Note that attacker 1 has 
to continuously broadcast forged messages to make the attack remain effective. 
A Specification-Based Intrusion Detection Model for OLSR 
343 
0 
0 
2
5
1 
4 
8 
9
3
7
6
Fig. 7. Man in the Middle Attack by A1 & A3 
2
5
1 
4 
3
7
6
8 
9
Fig. 8. Denial of Service by A2 
If an attacker arbitrarily adds other non-neighbors into its 1-hop or MPR selectors, it 
will easily make itself a black hole. This will attract much useless traffic, marking itself 
as an attacker. However, in this case, the attacker (node 1) successfully launches a man 
in  the  middle  attack  by  slightly  changing  its  two  messages  without  forging  its  own 
address, and therefore it is difficult to detect this attack using other existing approaches. 
Using constraint 3, detector detects that 1’s MPR selectors = {2,3,4,5} in 1’s TC 
message  do  not  match  3’s  MPR=  {7}  in  3’s  Hello  message.  Additionally  using 
constraint 1, 1’s 1-hop neighbors = {0,2,3,4,5} in 1’s Hello message do not match 3’s 
1-hop  neighbors  =  {7}  in  3’s  Hello  message.  Since  the  attacker  keeps  sending  the 
forged  messages,  the  detected  inconsistencies  easily  last  over  the  threshold  of 
temporary inconsistency threshold for C1 and C3, which is 12 seconds. Therefore, the 
detector  detects  the  attacks  and  the  attackers  without  false  positives  and  negatives. 
The  maximum  temporary  inconsistency  here  is  less  than  12  seconds.  Finally,  the 
detector commands node 1 to send correct TC(1) = {2,4,5} and Hello(1) = {0,2,4,5}, 
and then 8 and 4 receive  1’s correct TC and Hello and use 9 and 5 to reach 3. The 
route is 8->9->5->7->3 is recovered.  
Denial of Service by A2. Attack 7 intends to annul a route 8->4 ->5->7->3 by attack 
method 2, i.e., declaring an incorrect MPR list in its Hello message. First, 7 removes 5 
344 
C.H. Tseng et al. 
from  its  MPR  ={}in  its  Hello  message.  Second,  5  receives  7’s  modified  Hello  and 
believes 5 is not 7’s MPR so 5 removes 7 in its MPR selectors = {1,4,6,9} in 5’s new 
TC. When 8 receives 5’s new TC, 8 believes 8 cannot use 5 as last hop to reach 7. Since 
7 is3 hops away from 8 and 8 cannot use any other node as last hop to reach 7, 8 cannot 
reach 7 and therefore cannot reach 3. The route 8 to 3 is down. This attack is harder to 
detect than the first one because it requires 2-hop neighbor information which is not 
explicitly sent outin Hello or TC messages. 
Note  that  5  will  not  forward  7’s  TC  messages,  so  all  nodes  except  7’s  1-hop 
neighbor will not have 7’s TC messages. This makes 0, the other 3 hop neighbor of 7, 
be unable to connect to 7. If there was a route from 0 to 3, it is also down. 
By constraint 2, the detector detects that 7’s MPRs ={} do not reach all of 7’s 2-
hop  neighbors=  {1,4,9}.  Once  the  inconsistency  lasts  over  12  seconds,  the  alert  is 
raised.  So  the  detector  commands  7  to  send  correct  MPR  ={5}  in  7’s  new  Hello 
message.  When  receiving  correct  7’s  Hello  message,  5  adds  7  back  to  5’s  MPR 
selectors  =  {1,4,6,7,9}  in  5’s  new  TC.  Then  8  receives  5’s  new  TC  and  uses  5  to 
connect  to  7.  The  route  becomes  available  again.  Here  there  is  no  temporary 
inconsistency for C2, and no false positive. 
Denial  of  Service  by  A4.  Attack  2  intends  to  annul  route  8  4573  by 
attack  method  4,  where  forwarded  TC  messages  are  modified  with  high  ANSN.  It 
uses two forged forwarded TC messages to remove the global links, 4->8 and 7->3. 
First, 2 broadcasts TC(7)={2,5,6} without 3 to make 8 not use 7 to reach 3; thus route 
8->3 is down. Again, 2 broadcasts TC(4)={1,5} without 8 to make 3 unable touse 4 to 
reach 8; now route 3->8 is down. Since the forged TC messages have high ANSN, all 
other nodes hearing them replace the correct information with the forged one, so that 
8 and 3 cannot communicate with each other. The bidirectional route is down. Note 
that other nodes except 3,4,7,8 can do the same thing. If 4 or 7 does this, it is using 
attack  method  3,  not  4.  This  attack  can  be  detected  by  authenticating  forwarding 
messages, and we discuss it in section 6.  
By constraint 4, the detector detects that TC(4) and TC(7) sent by 2 do not match 
those from the originators, 4 and 7, respectively. The detector sends correct TC(4) and 
TC(7)  with  ANSN  higher  than  forged  messages  to  override  them.  Finally,  3  and  8 
receive correct TC messages, and are able to communicate with each other. The route 
is  recovered.  Here  C4  does  not  require  considering  any  temporary  inconsistency 
thresholds, and there are no false positives and false negatives.  
0 
1 
4 
2
5
3
7
6
8 
9
Fig. 9. Denial of Service by A4 
A Specification-Based Intrusion Detection Model for OLSR 
345 
5.4   Temporary Inconsistency Against Mobility 
With no mobility, temporary inconsistencies only happen when nodes establish 1-hop 
neighbor  relationship  in  the  first  5  seconds.  Once  they  are  capable  of  sending  TC 
messages,  no  temporary  inconsistency  occurs.  In  mobile  topologies,  temporary 
inconsistencies keep happening while nodes move. We choose different mobility pause 
times,  0,  30,  60,  120,  300,  600  seconds  employing  the  Random  Waypoint  Mobility 
Model with a speed range of  1 to 20 m/s to demonstrate different levels of mobility. We 
also simulate 10, 20, 30 traffic sources with continuously generating 512 byte packets at 
a constant rate of 1 packet per second, 5K bps, across the network topology. 
Most  of  temporary  inconsistencies  will  be  resolved  by  the  next  same  kind  of 
message  sent  from  the  same  originator  and  only  few  of  them  may  last.  Figure  10 
shows  the  number  of  lasting  temporary  inconsistencies  caused  by  mobility.  In  Fig. 
10(a) shows, 100 nodes in 2000m x 2000m area result in many more inconsistencies 
than 50 nodes in 1000m x 1000m. Although 100 nodes generate 2 times the number 
of  messages  than  50  nodes,  100  nodes  roughly  generate  4  times  the  number  of 
temporary  inconsistencies.  The  higher  the  degree  of  mobility  is,  the  more 
inconsistencies are generated, especially for inconsistency against C1.  
(a) 100 nodes vs 50 nodes, 20 sources 
   (b) 50 nodes with 10, 20, 30 traffic sources (C1 only) 
Fig. 10. Number of lasting temporary inconsistency with different number of nodes and sources 
Fig 10(b) shows the number of temporary inconsistencies against C1 in 50 nodes 
topology with 10, 20 30 traffic sources. With higher traffic load, the inconsistencies 
occur more. However, the impact of traffic load for temporary inconsistencies is not 
as  much  as  that  of  number  of  nodes.  Therefore,  the  number  of  nodes  and  their 
mobility degree are the two main factors of temporary inconsistency. 
Maximum temporary inconsistency lasting time indicates the requirement of alert 
threshold for constraints.  In Figure 11(a), maximum lasting times of C1, C2 and C3 
are less than the thresholds12 seconds and 15 seconds, and do not lead to false alarms. 
If the thresholds are 6 seconds, there will be less than 15 false alarms in a 100 node-
topology with low pause times. Although the maximum temporary inconsistency last 
time  in  a  100-node  topology  is  higher  than  in  a  50  node-  topology,  their  average 
lasting time is roughly the same, where the times of C1 and C2 are about 1.5 to 1.8 
seconds, and that of C3 is 4.7 to 4.3 seconds.  
346 
C.H. Tseng et al. 
(a) 100 nodes with 20 sources 
             (b) 50 nodes with 20 sources 
Fig. 11. Maximum and Average Temporary inconsistencies lasting time 
Also, attacks using the four attack methods are tested in 100 node- and 50 node- 
mobile  topologies.  These  attacks  consist  of  arbitrary  modified  values  of  1-hop 
neighbors,  MPR,  and  MPR  selectors  in  the  Hello  and  TC  messages  and  they  will 
continuously send modified messages at least for a period of 1 minute. If the attacks 
contain  the  addresses  of  inactive  nodes,  which  do  not  send  Hello  message  over  1 
minute and include unused nodes, or the attacks violate C4, the detector raises alarms 
immediately. If the attacks violate C1, C2 or C3, the detector raises alert while they 
last over the thresholds. The detector detects all attacks while the modified messages 