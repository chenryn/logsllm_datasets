# DLL劫持与权限维持（二）

##### 译文声明
本文为翻译文章，译文仅供参考。具体内容及含义请以原文为准。

本系列相关文章：
- [DLL劫持原理及其漏洞挖掘（一）](https://www.anquanke.com/post/id/225911)

## 0x0 前言
近期，在针对某些目标进行权限维持时发现，通过添加启动项或计划任务等较为显眼的方式效果不佳。因此，我开始研究利用DLL劫持技术来实现持久性控制，并希望在此过程中与读者分享我的学习心得，共同探讨更多关于DLL劫持的应用方法。

## 0x1 背景
在前一篇文章中已经详细介绍了DLL劫持的基本原理。本文将着重讨论如何在已获得系统权限的情况下，通过劫持主流软件或系统内置的小型DLL文件，从而实现对目标的持续控制。这种转发式劫持（中间人劫持）的优势在于，即使目标本身不存在DLL劫持漏洞，我们也可以直接替换原有的DLL文件，使程序仍能正常加载原DLL的功能，同时执行自定义的恶意操作。

## 0x2 劫持的优势
在过去，“白+黑”免杀技术曾非常流行，而DLL劫持正体现了这一策略的核心优势。
“白+黑”木马结构如下：
1. Exe(白) —-load—-> dll（黑）
2. Exe(白) —-load—-> dll（黑）—-load—-> 恶意代码

这里的“白”通常指的是带有数字签名的可信程序（如Windows自带的工具），这类程序的行为通常不会被安全软件拦截。原因在于查杀过程复杂、定位DLL困难，且最终行为归因于EXE文件本身。基于特征码查杀对于现代混淆技术而言显得力不从心。尽管如此，目前一些先进的安全软件可能已有新的检测机制，但根据实际测试结果来看，基于上述原理绕过主动防御仍然可行。

## 0x3 劫持方式
为了更好地理解这一过程，接下来我将通过一个简单的示例程序进行演示。以下是使用Visual Studio 2017创建控制台应用程序的步骤：

```cpp
#include <windows.h>
#include <iostream>
using namespace std;

int main() {
    typedef void(*DLLFUNC)(void);
    DLLFUNC GetDllfunc1 = NULL;
    DLLFUNC GetDllfunc2 = NULL;

    HINSTANCE hinst = LoadLibrary(L"TestDll.dll");
    if (hinst != NULL) {
        GetDllfunc1 = (DLLFUNC)GetProcAddress(hinst, "msg");
        GetDllfunc2 = (DLLFUNC)GetProcAddress(hinst, "error");
    }

    if (GetDllfunc1 != NULL) {
        (*GetDllfunc1)();
    } else {
        MessageBox(0, L"Load msg function Error,Exit!", 0, 0);
        exit(0);
    }

    if (GetDllfunc2 != NULL) {
        (*GetDllfunc2)();
    } else {
        MessageBox(0, L"Load error function Error,Exit!", 0, 0);
        exit(0);
    }

    printf("Success\n");
}
```

原始DLL `TestDll.dll` 的代码如下：

```cpp
// dllmain.cpp : 定义 DLL 应用程序的入口点。
#include "pch.h"
#include <windows.h>

void msg() {
    MessageBox(0, L"I am msg function!", 0, 0);
}

void error() {
    MessageBox(0, L"I am error function!", 0, 0);
}

BOOL APIENTRY DllMain(HMODULE hModule, DWORD ul_reason_for_call, LPVOID lpReserved) {
    switch (ul_reason_for_call) {
        case DLL_PROCESS_ATTACH:
        case DLL_THREAD_ATTACH:
        case DLL_THREAD_DETACH:
        case DLL_PROCESS_DETACH:
            break;
    }
    return TRUE;
}
```

导出函数定义如下：

```cpp
#pragma once
#define WIN32_LEAN_AND_MEAN
#include <windows.h>

extern "C" __declspec(dllexport) void msg(void);
extern "C" __declspec(dllexport) void error(void);
```

### 0x3.1 转发式劫持
此方法通过生成一个新的DLL文件来替代原有DLL，新DLL会将请求转发给原始DLL，同时插入额外功能。为此，可以使用AheadLib工具完成这一过程。该工具有两个版本，分别支持x86和x64架构：

- [AheadLib-x86-x64 Ver 1.2](https://github.com/strivexjun/AheadLib-x86-x64/releases/tag/1.2)
- [yes大牛的修改版](https://bbs.pediy.com/thread-224408.htm)

生成新的`TestDll.cpp`后，将其导入到VS中的动态链接库项目，并保留原有的`#include "pch.h"`部分。在`DLL_PROCESS_ATTACH`事件中添加自定义代码，例如弹出消息框提示。

### 0x3.2 篡改式劫持
这是一种更为激进的方法，通过直接向现有DLL中插入跳转指令指向恶意代码。这种方法存在以下限制：
- 修改签名过的DLL会导致验证失败。
- 直接更改原DLL可能导致程序错误。
- 此类技术相对陈旧，容易被现代防护手段识别。

可尝试使用Backdoor Factory (BDF) 工具实施此类攻击。安装步骤如下：
```bash
git clone https://github.com/secretsquirrel/the-backdoor-factory
sudo ./install.sh
```
对于macOS用户，若遇到capstone相关的错误，可以通过以下命令解决：
```bash
pip install capstone==4.0.2
```

使用BDF检查并修改DLL文件：
1. 验证是否支持：`./backdoor.py -f ./exeTest/hello.exe -S`
2. 查找可用的Code Caves：`python2 backdoor.py -f TestDll.dll -c`

请注意，无论是哪种方法，都需要确保加载程序与被劫持DLL之间的位数匹配，否则会导致加载失败。