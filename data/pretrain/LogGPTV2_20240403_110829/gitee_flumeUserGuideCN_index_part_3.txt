要在单个Agent中定义流，你需要通过channel连接source和sink。需要在配置文件中列出所有的source、sink和channel，然后将source和sink指向channel。一个source可以连接多个channel，但是sink只能连接一个channel。格式如下：
::: hint
::: title
Hint
:::
一个agent实例里面可以有多条独立的数据流，一个数据流里必须有且只能有一个Source，但是可以有多个Channel和Sink，Source和Channel是一对多的关系，Channel和Sink也是一对多的关系。
Source和Channel的一对多就是前面 [多路复用流](#多路复用流)
里面介绍的，Source收集来的数据可以内部拷贝多份到多个Channel上，也可以将event按照某些规则分发到多个Channel上；
Channel和Sink的一对多在后面 [Sink组逻辑处理器](#sink组逻辑处理器)
有体现，Sink其实就是Channel里面event的消费者，当然就可以创建多个Sink一同消费Channel队列中的数据，并且还能进行自定义这些Sink的工作方式，具体请看该章节内容；
请注意上面这段话里我说的是【一个数据流】，我可没说【一个agent】或【同一个配置文件】里只能有一个Souce，因为一个agent里面可以有多条独立的数据流，多个agent实例的配置又可以都配在同一个配置文件里。
:::
``` properties
# 列出Agent实例的所有Source、Channel、Sink
.sources = 
.sinks = 
.channels =  
# 设置Channel和Source的关联
.sources..channels =   ...    # 这行配置就是给一个Source配置了多个channel
# 设置Channel和Sink的关联
.sinks..channel = 
```
例如，一个叫做agent_foo的Agent从外部avro客户端读取数据并通过内存channel将其发送到HDFS（准确说并不是通过内存channel发送的数据，而是使用内存channel缓存，然后通过HDFS
Sink从channel读取后发送的），它的配置文件应该这样配：
``` properties
# 列出Agent的所有source、sink和channel
agent_foo.sources = avro-appserver-src-1
agent_foo.sinks = hdfs-sink-1
agent_foo.channels = mem-channel-1
agent_foo.sources.avro-appserver-src-1.channels = mem-channel-1   # 指定与source avro-appserver-src-1 相连接的channel是mem-channel-1
agent_foo.sinks.hdfs-sink-1.channel = mem-channel-1               # 指定与sink hdfs-sink-1 相连接的channel是mem-channel-1
```
通过上面的配置，就形成了\[avro-appserver-src-1\]-\>\[mem-channel-1\]-\>\[hdfs-sink-1\]的数据流，这将使Event通过内存channel（mem-channel-1）从avro-appserver-src-1流向hdfs-sink-1，当Agent启动时，读取配置文件实例化该流。
### 配置单个组件
定义流后，需要配置source、sink和channel各个组件的属性。配置的方式是以相同的分级命名空间的方式，你可以设置各个组件的类型以及基于其类型特有的属性。
``` properties
# properties for sources
.sources.. = 
# properties for channels
.channel.. = 
# properties for sinks
.sources.. = 
```
每个组件都应该有一个 *type*
属性，这样Flume才能知道它是什么类型的组件。每个组件类型都有它自己的一些属性。所有的这些都是根据需要进行配置。在前面的示例中，我们已经构建了一个avro-appserver-src-1到hdfs-sink-1的数据流，
下面的例子展示了如何继续给这几个组件配置剩余的属性。
``` properties
# 列出所有的组件
agent_foo.sources = avro-AppSrv-source
agent_foo.sinks = hdfs-Cluster1-sink
agent_foo.channels = mem-channel-1
# 将source和sink与channel相连接
#（省略）
# 配置avro-AppSrv-source的属性
agent_foo.sources.avro-AppSrv-source.type = avro         # avro-AppSrv-source 的类型是Avro Source
agent_foo.sources.avro-AppSrv-source.bind = localhost    # 监听的hostname或者ip是localhost
agent_foo.sources.avro-AppSrv-source.port = 10000        # 监听的端口是10000
# 配置mem-channel-1的属性
agent_foo.channels.mem-channel-1.type = memory                # channel的类型是内存channel
agent_foo.channels.mem-channel-1.capacity = 1000              # channel的最大容量是1000
agent_foo.channels.mem-channel-1.transactionCapacity = 100    # source和sink每次事务从channel写入和读取的Event数量
# 配置hdfs-Cluster1-sink的属性
agent_foo.sinks.hdfs-Cluster1-sink.type = hdfs                                   # sink的类型是HDFS Sink
agent_foo.sinks.hdfs-Cluster1-sink.hdfs.path = hdfs://namenode/flume/webdata     # 写入的HDFS目录路径
#...
```
### 在Agent中增加一个流
一个Flume
Agent中可以包含多个独立的流。你可以在一个配置文件中列出所有的source、sink和channel等组件，这些组件可以被连接成多个流：
``` properties
# 这样列出Agent的所有source、sink和channel，多个用空格分隔
.sources =  
.sinks =  
.channels =  
```
然后你就可以给这些source、sink连接到对应的channel上来定义两个不同的流。例如，如果你想在一个Agent中配置两个流，一个流从外部avro客户端接收数据然后输出到外部的HDFS，另一个流从一个文件读取内容然后输出到Avro
Sink。配置如下：
``` properties
# 列出当前配置所有的source、sink和channel
agent_foo.sources = avro-AppSrv-source1 exec-tail-source2            # 该agent中有2个sourse，分别是：avro-AppSrv-source1 和 exec-tail-source2
agent_foo.sinks = hdfs-Cluster1-sink1 avro-forward-sink2             # 该agent中有2个sink，分别是：hdfs-Cluster1-sink1 和 avro-forward-sink2
agent_foo.channels = mem-channel-1 file-channel-2                    # 该agent中有2个channel，分别是：mem-channel-1 file-channel-2
# 这里是第一个流的配置
agent_foo.sources.avro-AppSrv-source1.channels = mem-channel-1       # 与avro-AppSrv-source1相连接的channel是mem-channel-1
agent_foo.sinks.hdfs-Cluster1-sink1.channel = mem-channel-1          # 与hdfs-Cluster1-sink1相连接的channel是mem-channel-1
# 这里是第二个流的配置
agent_foo.sources.exec-tail-source2.channels = file-channel-2        # 与exec-tail-source2相连接的channel是file-channel-2
agent_foo.sinks.avro-forward-sink2.channel = file-channel-2          # 与avro-forward-sink2相连接的channel是file-channel-2
```
### 配置一个有多Agent的流
要配置一个多层级的流，你需要在第一层Agent的末尾使用Avro/Thrift
Sink，并且指向下一层Agent的Avro/Thrift
Source。这样就能将第一层Agent的Event发送到下一层的Agent了。例如，你使用avro客户端定期地发送文件（每个Event一个文件）到本地的
Event上，然后本地的Agent可以把Event发送到另一个配置了存储功能的Agent上。
::: hint
::: title
Hint
:::
语言描述似乎不太容易理解，大概是这样的结构\[source1\]-\>\[channel\]-\>\[Avro
Sink\]-\>\[Avro Source\]-\>\[channel2\]-\>\[Sink2\]
:::
一个收集web日志的Agent配置：
``` properties
# 列出这个Agent的source、sink和channel
agent_foo.sources = avro-AppSrv-source
agent_foo.sinks = avro-forward-sink
agent_foo.channels = file-channel
# 把source、channel、sink连接起来，组成一个流
agent_foo.sources.avro-AppSrv-source.channels = file-channel
agent_foo.sinks.avro-forward-sink.channel = file-channel
# avro-forward-sink 的属性配置
agent_foo.sinks.avro-forward-sink.type = avro
agent_foo.sinks.avro-forward-sink.hostname = 10.1.1.100
agent_foo.sinks.avro-forward-sink.port = 10000
# 其他部分配置（略）
#...
```
存储到HDFS的Agent配置：
``` properties
# 列出这个Agent的source、sink和channel
agent_foo.sources = avro-collection-source                              # 只有一个source叫做：avro-collection-source
agent_foo.sinks = hdfs-sink                                             # 只有一个sink叫做：hdfs-sink
agent_foo.channels = mem-channel                                        # 只有一个channel叫做：mem-channel
# 把source、channel、sink连接起来，组成一个流
agent_foo.sources.avro-collection-source.channels = mem-channel
agent_foo.sinks.hdfs-sink.channel = mem-channel
# Avro Source的属性配置
agent_foo.sources.avro-collection-source.type = avro
agent_foo.sources.avro-collection-source.bind = 10.1.1.100
agent_foo.sources.avro-collection-source.port = 10000
# 其他部分配置（略）
#...
```
上面两个Agent就这样连接到了一起，最终Event会从外部应用服务器进入，经过第一个Agent流入第二个Agent，最终通过hdfs-sink存储到了HDFS。
::: hint
::: title
Hint
:::
什么，不知道两个Agent怎么连接到一起的？ 第一个Agent的Avro
Sink将Event发送到了10.1.1.100的10000端口上，而第二个Agent的Avro
Source从10.1.1.100的10000端口上接收Event，就这样形成了两个Agent首尾相接的多Agent流。
:::
### 扇出流
如前面章节所述，Flume支持流的扇出形式配置，就是一个source连接多个channel。有两种扇出模式，\**复制*\*
和 **多路复用**
。在复制模式下，source中的Event会被发送到与source连接的所有channel上。在多路复用模式下，Event仅被发送到
部分channel上。为了分散流量，需要指定好source的所有channel和Event分发的策略。这是通过增加一个复制或多路复用的选择器来实现的，如果是多路复用选择器，还要进一步指定Event分发的规则。
**如果没有配置选择器，默认就是复制选择器** 。
``` properties
# 列出这个Agent的source、sink和channel，注意这里有1个source、2个channel和2个sink
.sources = 
.sinks =  
.channels =  
# 指定与source1连接的channel，这里配置了两个channel
.sources..channels =  
# 将两个sink分别与两个channel相连接
.sinks..channel = 
.sinks..channel = 
# 指定source1的channel选择器类型是复制选择器（按照上段介绍，不显式配置这个选择器的话，默认也是复制）
.sources..selector.type = replicating
```
多路复用选择器具有另外一组属性可以配置来分发数据流。这需要指定Event属性到channel的映射，选择器检查Event
header中每一个配置中指定的属性值，如果与配置的规则相匹配，则该Event将被发送到规则设定的channel上。如果没有匹配的规则，则Event
会被发送到默认的channel上，具体看下面配置：
``` properties
# 多路复用选择器的完整配置如下
.sources..selector.type = multiplexing                                 # 选择器类型是多路复用
.sources..selector.header =                                # 假如这个值是abc，则选择器会读取Event header中的abc属性来作为分发的依据
.sources..selector.mapping. =                        # 加入这里Value1配置的是3，则Event header中abc属性的值等于3的Event会被发送到channel1上
.sources..selector.mapping. =              # 同上，Event header中abc属性等于Value2的Event会被发送到channel1和channel2上
.sources..selector.mapping. =                        # 同上规则，Event header中abc属性等于Value3的Event会被发送到channel2上
#...
.sources..selector.default =                                 # Event header读取到的abc属性值不属于上面配置的任何一个的话，默认就会发送到这个channel2上
```
映射的配置允许为每个值配置重复的channel
下面的例子中，一个数据流被分发到了两个路径上。这个叫agent_foo的Agent有一个Avro
Source和两个channel，这两个channel分别连接到了两个sink上：
``` properties
# 列出了Agent的所有source、 sink 和 channel
agent_foo.sources = avro-AppSrv-source1
agent_foo.sinks = hdfs-Cluster1-sink1 avro-forward-sink2
agent_foo.channels = mem-channel-1 file-channel-2
# 让source与两个channel相连接
agent_foo.sources.avro-AppSrv-source1.channels = mem-channel-1 file-channel-2
# 分别设定两个sink对应的channel
agent_foo.sinks.hdfs-Cluster1-sink1.channel = mem-channel-1
agent_foo.sinks.avro-forward-sink2.channel = file-channel-2
# source的channel选择器配置
agent_foo.sources.avro-AppSrv-source1.selector.type = multiplexing                           # 选择器类型是多路复用，非复制
agent_foo.sources.avro-AppSrv-source1.selector.header = State                                # 读取Event header中名字叫做State的属性值，以这个值作为分发的映射依据
agent_foo.sources.avro-AppSrv-source1.selector.mapping.CA = mem-channel-1                    # State=CA时，Event发送到mem-channel-1上
agent_foo.sources.avro-AppSrv-source1.selector.mapping.AZ = file-channel-2                   # State=AZ时，Event发送到file-channel-2上
agent_foo.sources.avro-AppSrv-source1.selector.mapping.NY = mem-channel-1 file-channel-2     # State=NY时，Event发送到mem-channel-1和file-channel-2上