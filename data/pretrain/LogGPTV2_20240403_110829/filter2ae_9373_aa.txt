# 简介
.net
remoting是一种在不同进程间传递对象的方式。假如两个不同的进程分别为服务端、客户端，客户端和服务端各自保存相同的一份对象（DLL），那么可以通过.net
remoting技术来远程传递对象。拿java来讲更类似于rmi的概念。
.net
remoting可以使用tcp、http、ipc协议来传输远程对象。本文依赖于[VulnerableDotNetHTTPRemoting](https://github.com/nccgroup/VulnerableDotNetHTTPRemoting)项目。
# 三种协议的不同
三种协议都位于程序集System.Runtime.Remoting.dll，命名空间分别为System.Runtime.Remoting.Channels.Http、System.Runtime.Remoting.Channels.Tcp、System.Runtime.Remoting.Channels.Ipc
其中不同协议用处不同：
  1. IpcChannel用于本机之间进程传输，使用ipc协议传输比HTTP、TCP速度要快的多，但是只能在本机传输，不能跨机器，本文不讲。
  2. TcpChannel基于tcp传输，将对象进行二进制序列化之后传输二进制数据流，比http传输效率更高。
  3. HttpChannel基于http传输，将对象进行soap序列化之后在网络中传输xml，兼容性更强。
# .net remoting demo
先来以HttpChannel为例看一个demo了解.net remoting。需要三个项目，分别是
  1. RemoteDemoClient
  2. RemoteDemoServer
  3. RemoteDemoObject
分别表示 **客户端** 、 **服务端** 和 **要传输的对象** 。
## 传输对象类
RemoteDemoObject.RemoteDemoObjectClass需要继承MarshalByRefObject类才能跨域（AppDomain）远程传输。
    using System;
    namespace RemoteDemoObject
    {
        public class RemoteDemoObjectClass : MarshalByRefObject
        {
            public int count = 0;
            public int GetCount()
            {
                Console.WriteLine("GetCount called.");
                return count++;
            }
        }
    }
## 服务端
服务端注册HttpServerChannel并绑定在9999端口，然后`RemotingConfiguration.RegisterWellKnownServiceType`发布uri地址为RemoteDemoObjectClass.rem的远程调用对象，类型是RemoteDemoObjectClass。
    using System;
    using System.Runtime.Remoting;
    using System.Runtime.Remoting.Channels;
    using System.Runtime.Remoting.Channels.Http;
    using RemoteDemoObject;
    namespace RemoteDemoServer
    {
        class Program
        {
            static void Main(string[] args)
            {
                HttpServerChannel httpServerChannel = new HttpServerChannel(9999);
                ChannelServices.RegisterChannel(httpServerChannel, false);
                RemotingConfiguration.RegisterWellKnownServiceType(typeof(RemoteDemoObjectClass), "RemoteDemoObjectClass.rem", WellKnownObjectMode.Singleton);
                Console.WriteLine("server has been start");
                Console.ReadKey();
            }
        }
    }
其中WellKnownObjectMode.Singleton是一个枚举，含义如下。
## 客户端
    using RemoteDemoObject;
    using System;
    namespace RemoteDemoClient
    {
        class Program
        {
            static void Main(string[] args)
            {
                string serverAddress = "http://localhost:9999/RemoteDemoObjectClass.rem";
                RemoteDemoObjectClass obj1 = (RemoteDemoObjectClass)Activator.GetObject(typeof(RemoteDemoObjectClass), serverAddress);
                Console.WriteLine("call GetCount() get return value:{0}",obj1.GetCount());
                Console.ReadKey();
            }
        }
    }
客户端通过Activator.GetObject拿到远程对象并返回一个实例。
## 运行效果
    PS C:\RemoteDemoClient\bin\Debug> .\RemoteDemoClient.exe
    call GetCount() get return value:0
    PS C:\RemoteDemoServer\bin\Debug> .\RemoteDemoServer.exe
    server has been start
    GetCount called.
运行三次Client就返回count为三，并且输出三次`GetCount called.`，Server中的count会自增。
# HttpServerChannel数据包
这边可以通过burp的透明代理功能将client的请求包代理出来。首先修改监听器启用透明代理。
然后修改client的代码将9999端口改为8080
    using RemoteDemoObject;
    using System;
    namespace RemoteDemoClient
    {
        class Program
        {
            static void Main(string[] args)
            {
                string serverAddress = "http://localhost:8080/RemoteDemoObjectClass.rem";
                RemoteDemoObjectClass obj1 = (RemoteDemoObjectClass)Activator.GetObject(typeof(RemoteDemoObjectClass), serverAddress);
                Console.WriteLine("call GetCount() get return value:{0}",obj1.GetCount());
                Console.ReadKey();
            }
        }
    }
再次运行client，抓到请求包
在上图中可见HttpServerChannel采用soap协议传输对象。深究其实现
构造函数中进入`this.SetupChannel()`
然后判断自身_sinkProvider是否为空，如果为空则CreateDefaultServerProviderChain()
这里使用了一个Provider链，从SdlChannelSinkProvider->SoapServerFormatterSinkProvider->BinaryServerFormatterSinkProvider
而TcpServerChannel中，使用的是BinaryServerFormatterSinkProvider->SoapServerFormatterSinkProvider
由此可见http使用soap协议进行序列化，tcp使用binary进行序列化。
# 漏洞产生
在上文中我们提到SoapServerFormatterSinkProvider和BinaryServerFormatterSinkProvider，这两个类都有一个重要的属性
**TypeFilterLevel** ，[根据文档](https://docs.microsoft.com/zh-cn/dotnet/api/system.runtime.serialization.formatters.typefilterlevel?view=net-5.0)可知其是枚举类型。
当其为Full时会反序列化所有类型，low时反序列化基础远程处理功能相关联的类型。而为Full时，会造成漏洞。
# 攻击HttpServerChannel
修改服务端代码
    using System;
    using System.Collections;
    using System.Runtime.Remoting;
    using System.Runtime.Remoting.Channels;
    using System.Runtime.Remoting.Channels.Http;
    using System.Runtime.Serialization.Formatters;
    using RemoteDemoObject;
    namespace RemoteDemoServer
    {
        class Program
        {