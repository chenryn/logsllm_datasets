Algorithm 7.1: Attack(N )
L ← ListOfVenues(N )
c ← 0
while
⎧⎪⎪⎪⎪⎪⎪⎪⎪⎪⎪⎪⎪⎪⎪⎪⎪⎪⎨
⎪⎪⎪⎪⎪⎪⎪⎪⎪⎪⎪⎪⎪⎪⎪⎪⎪⎩
p ← L.Dequeue()
n ← MayorCheckinsAtVenue(p)
m ← OurCheckinsAtVenue(p)
if m ≤ n
checkin ← Checkin(p)
CList.Enqueue(checkin)
c ← c + 1
t ← AdjustSleep(CList, c)
(cid:6)
if c = M AX
then
c ← c − 1
⎧⎪⎪⎪⎪⎪⎪⎪⎨
⎪⎪⎪⎪⎪⎪⎪⎩
then
Sleep(t)
L.Enqueue(p)
 100
 200
 300
 400
 500
 600
Time (sec)
do
(1)
(2)
Figure 4: Expected vs. achieved check-ins for dif-
ferent time intervals T between check-ins for 1 day.
imum speed our user could exhibit without any check-ins
being ﬂagged, in the experiments with higher speeds some
check-ins were considered legitimate. We had a check-in
accepted with a speed of 107 kpm, without an intermediate
ﬂagged check-in to alter the speed calculation by Foursquare.
6. MEASUREMENTS - PLACES
Service Responses. Places also returns error messages:
signiﬁcant distance from previous check-in when the user
travels too fast, and too many places in a short amount of
time when the user exceeds a number of allowed check-ins.
Device-based heuristics. We replicate Experiment A,
as outlined in Section 5, to reveal the maximum distance
from which users can check into venues. For a series of
venues, we gradually increase the user’s distance from the
venue’s location. For each check-in attempt, we send the
venue’s ID and the user’s location coordinates. We did not
receive an error message for any of the distances we tried.
As distances increased even more, we were able to check our
users into places with coordinates located on diﬀerent con-
tinents. Our experiments show that the user’s coordinates
are never compared to those of the venue when a user checks
in, and any coordinates are accepted. We setup Experiment
E, to demonstrate how this can be exploited by an attacker:
• Our system takes as input a list of venues from around
the world, and a set of user coordinates. For every
venue, the user checks-in with the same location coor-
dinates, regardless of the venue’s location. The user
waits for 1 minute between check-ins.
With this experiment, we are able to check our user into
venues around the globe in just a few minutes. As the user
always sends the same coordinates for his location, when
the system compares his new position to that of his previ-
ous check-in, it detects no change and the speed heuristic
is never triggered. Thus, an attacker can completely bypass
the traveling speed constraints and check into venues around
the globe with unlimited speed. After further investigation,
we found a bug report [4] submitted to Facebook two weeks
prior, for the Graph API. The bug report was acknowledged
and received an “assigned” status, but was closed one year
after its submission, without any ﬁx being released. This
can be attributed to the fact that the report describes the
problem in the check-in mechanism without pointing out the
Figure 5: Pseudo-code of the actual attack.
security implications of this bug, and how it can be exploited
to bypass the other detection mechanisms.
User-behavior heuristics. As we can completely by-
pass the speed heuristic, we repeat Experiment B to identify
the limit of acceptable check-ins. The results reveal that if
this threshold is exceeded, an exact 24 hour ban is applied.
Figure 2 compares the check-ins allowed by Foursquare and
Places for a time window between check-ins of 180 seconds.
We also identify that the threshold is not constant for diﬀer-
ent intervals between check-ins. We repeat the experiment
with diﬀerent time intervals T for 24 hours each. Subse-
quently, we calculate the expected check-ins, which are the
ideal number of check-ins that should be successful if no
heuristic is applied, versus the actual successful ones. As
shown in Figure 4, prior to approximately T < 300 seconds,
the actual check-ins are less than the expected ones, since
the heuristic is triggered and a 24 hour ban is applied.
7. ATTACKING LBS
An adversary with the knowledge of the detection mecha-
nisms can create an adaptive attack that maximizes its im-
pact while remaining undetected. In the case of Foursquare
a potential attacker would try to acquire the mayorship in
top venues around the world, discouraging other users from
competing. We focus on Foursquare, because there is clear
notion of game incentives. However, it is quite generic and,
with minor modiﬁcations, can be adapted to other LBS. The
following aspects led to the design of our strategy.
Timing between check-ins. Foursquare restricts the num-
ber of check-ins allowed, based on a 24 hour sliding window.
If a check-in receives a “rapid-ﬁre” error, it is not eligible for
points but still counts as one of the check-ins allowed. The
attacker must keep account of the timestamps of his check-
ins to calculate their number in the last 24 hours. As long as
the count of check-ins of the last 24 hours is 30 (since 90 are
allowed in 72 hours), no check-ins must be attempted. Once
the number reaches 29 he can check in once again. This way,
one can commit 1,800 check-ins in a 60 day period.
Minimizing necessary check-ins. Checking into venues af-
ter having been crowned the mayor, results in unnecessary
24
check-ins that should be used for other venues. The adver-
sary can stop checking into a venue once he has acquired the
mayorship, and only resume if he temporarily loses it.
Only check-ins that do not trigger one of the heuristics are
considered valid and can result in mayorships. We design a
strategy to use the limited number of check-ins eﬀectively.
Its pseudo-code is presented in Figure 5. The system takes
as input a list of N arbitrary venues. A counter c holds
the number of check-ins made in the last 24 hours. After
selecting the next venue from the list, we retrieve the number
of check-ins n the mayor of that venue has. If we are mayors
of the venue, we do not check-in and add the venue to the end
of our list. If we are not, we check-in and save the relevant
information (line 1). We increase the number of check-ins
and then run the function to adjust the waiting time (line
2): If we haven’t reached the M AX allowed check-ins for the
last 24 hours, we set t to our normal small sleep interval. If
we have reached M AX check-ins, we retrieve the info of the
check-in which is located M AX − 1 positions from the end.
We calculate how much time t our system has to sleep so
it “wakes up” 24 hours from that check-in. We decrease our
counter, sleep for t, and add the venue to the end of the list.
An adversary with the goal of disrupting the system and
deterring legitimate users from participating, will target the
most popular venues as this will impact the largest number
of users. While obeying the thresholds, in the worst case
scenario where each mayorship requires 60 check-ins, the
attacker can acquire the mayorship of 30 venues with a single
account. We collected the number of check-ins of the mayors
of 2,420 of the most popular venues in New York through
the API function that returns the most popular venues for
a given location. 90% of the venues had a mayor with 36
or less check-ins, and only 2.2% had over 50 check-ins. The
average number of check-ins required for mayorship was 17.
While it might be higher than the average across all venues,
since it reﬂects activity for popular venues in a metropolitan
area, it provides a rough estimation of the average number
needed to acquire a mayorship. Thus, an attacker following
our attack algorithm can use the 1,800 available check-ins
to sustain mayorship in 105 venues, on average, with one
account. Based on that, an attacker can maintain constant
mayorship in all venues with less than 10,000 accounts.
Verisign released a report about a cybercriminal selling 1.5
million Facebook2 accounts [1],and the cost of 1,000 accounts
without any contacts was $15. For compromised accounts
with friends the price ranged from $25 - $45. Assuming
such prices are representative, an attacker can acquire the
needed number of accounts to sustain mayorship across all
Foursquare venues with as little as $150 - $450. Further-
more, Trend Micro released a report [12] about the Russian
underground where 2,000 bots can be bought for $200. That
number of bots is more than enough for deploying the 10,000
accounts. Overall, an attacker with the knowledge of the de-
tection heuristics and their respective thresholds, can acquire
mayorships across all venues and have a signiﬁcant impact
on Foursquare with less than $1,000. Similarly, any LBS can
be severely damaged with minimal resources.
As the attack is carried out by multiple accounts with le-
gitimate behavior, each targeting a small subset of venues,
Foursquare will not be able to distinguish them from other
accounts. Even if the heuristics are made more restrictive,
2Foursquare allows to sign-up with a Facebook account.
the attack variables can easily be modiﬁed to remain be-
neath the new thresholds. Making the heuristics too strict,
will have a negative impact as legitimate users will be greatly
inconvenienced. Thus, it is evident that detection heuristics
are not eﬀective against large-scale fake-location attacks and
other types of countermeasures must be implemented.
8. COUNTERMEASURES
Fake-location attacks are possible because clients can com-
municate an arbitrary geographical position to the service.
First, we propose three countermeasures that can hinder at-
tacks by validating the user’s location. Next, we discuss the
ineﬃciency of detection mechanisms.Finally, we present our
proof-of-concept implementation of Validated Check-in.
8.1 Validating user location
Ensuring user presence. One approach is to enforce
veriﬁcation based on information provided only at a geo-
graphical position. By requiring users to also submit infor-
mation that is only available at a location, the service can
validate the user’s presence. One can take advantage of the
NFC capabilities of smartphones, which enable communica-
tion between devices within a very short range (i.e., a few
centimeters). By deploying a NFC device at venues, the LBS
can validate user check-ins.
Interestingly, Foursquare re-
cently introduced unpowered NFC tags to identify the venue
and prompt the user to check-in [6]. This minimizes inter-
action as users need only swap their device over the tag. By
building upon this idea, we can hinder fake-location attacks.
Temporary codes. The service can generate a tempo-
rary code for venues that are valid for certain time (e.g., one
day), and are only obtainable at the venues. This can be a
string, a QR code,or even a NFC tag. While this method
has the advantage of not requiring dedicated hardware,it is
susceptible to wormhole attacks [23] where users share the
code with other individuals that will be able to check-in
without actually visiting the location. Another drawback is
that it can only be used in commercial venues and not public
places. Alternatively, a location proof scheme that uses ex-
isting access points can be implemented [27, 32]. However,
such solutions can be bypassed from users that are within
the range of the access point, but not at the actual venue.
Third party veriﬁcation. Currently, a client’s location
can be veriﬁed by telecommunication providers (they know
the cell the device is connected to), and large IT vendors,
such as Google, that have constructed extensive maps of
wireless access points around the globe. However, the loca-
tion information is not accurate enough to verify the user’s
presence within a venue, but only within a larger area.
8.2 Adapt existing detection mechanisms
As we demonstrated, existing heuristic implementations
are either too relaxed (Foursquare) or can be bypassed (Places).
However, even with more restrictive thresholds, such mech-
anisms cannot prohibit cheating. Furthermore, they cannot
defend against system-wide threats carried out by multiple
accounts that are indistinguishable from legitimate ones. On
the contrary, our NFC countermeasure can eﬀectively hinder
such attacks and provides an aﬀordable solution for sustain-
ing the viability of the emerging business model of LBS.
Penalties for cheating. This is an eﬃcient mechanism
for discouraging legitimate users from cheating, but is inef-
fective against system-wide threats. Due to false positives,
25
(cid:22)(cid:23)(cid:22)(cid:17)(cid:19)
(cid:12)(cid:9)(cid:7)(cid:1)
(cid:27)(cid:19)(cid:26)(cid:30)(cid:19)(cid:26)
(cid:3)
(cid:4)
(cid:5) (cid:1)(cid:31)(cid:31)(cid:22)(cid:23)(cid:22)(cid:17)(cid:19)(cid:32)(cid:11)(cid:14)(cid:13)
(cid:31)(cid:22)(cid:23)(cid:22)(cid:17)(cid:19)(cid:32)(cid:11)(cid:14)(cid:13)(cid:1)
(cid:2)
(cid:1)
(cid:2)(cid:31)(cid:14)(cid:27)(cid:19)(cid:26)(cid:10)(cid:8)(cid:32)(cid:11)(cid:9)(cid:14)
(cid:1)(cid:31)(cid:14)(cid:27)(cid:19)(cid:26)(cid:10)(cid:8)(cid:32)(cid:11)(cid:9)(cid:14)
(cid:2)(cid:22)(cid:23)(cid:22)(cid:17)(cid:19)(cid:2)(cid:28)(cid:21)(cid:27)(cid:28)(cid:21)(cid:24)(cid:32)(cid:11)(cid:15)(cid:13)
(cid:2)(cid:15)(cid:19)(cid:22)(cid:29)(cid:19)(cid:10)(cid:8)
(cid:6)(cid:27)(cid:25)(cid:29)(cid:16)(cid:26)(cid:19)
(cid:6)
(cid:1)(cid:31)(cid:31)(cid:22)(cid:23)(cid:22)(cid:17)(cid:19)(cid:32)(cid:11)(cid:14)(cid:13)
(cid:2)(cid:31)(cid:14)(cid:27)(cid:19)(cid:26)(cid:10)(cid:8)(cid:32)(cid:11)(cid:9)(cid:14)
(cid:2)(cid:22)(cid:23)(cid:22)(cid:17)(cid:19)(cid:2)(cid:28)(cid:21)(cid:27)(cid:28)(cid:21)(cid:24)(cid:32)(cid:11)(cid:15)(cid:13)
(cid:2)(cid:15)(cid:19)(cid:22)(cid:29)(cid:19)(cid:10)(cid:8)
(cid:29)(cid:27)(cid:19)(cid:26)(cid:1)
(cid:18)(cid:19)(cid:30)(cid:20)(cid:17)(cid:19)
(cid:29)(cid:27)(cid:19)(cid:26)(cid:1)
(cid:18)(cid:19)(cid:30)(cid:20)(cid:17)(cid:19)
Figure 6: Data exchanged during the check-in.
penalties should be imposed when users repeatedly trigger
the heuristics, in which case they should face timeout peri-
ods where no check-ins are accepted.If the cheating persists,
the user should be permanently banned from the service.
Revocation. As a measure of preventing users from ac-
quiring mayorships through fake-location attacks, Foursquare
has introduced a feature that allows venue owners to re-
voke the mayorship of users which may have cheated. This
mechanism does not assist in identifying or preventing fake-
location attacks, but in discouraging potential cheaters. This
feature might be eﬀective in certain cases, yet there are many
conditions where it is not applicable, like in venues with
many simultaneous customers (e.g., clubs, shopping malls).
8.3
Implementation of Validated Check-in
We present the details of Validated Check-in, our proof-
of-concept implementation of the NFC server countermea-
sure. Aﬀordable electronics frameworks are a rapidly grow-
ing market, and we selected two of the most popular de-
vices. First, the Arduino board, an open source electronics
prototyping platform, which can be extended through var-
ious modules that provide speciﬁc functionality. We used
Arduino Uno and the Seeedstudio NFC Shield with a to-
tal cost of about $50 at retail price. Second, the Model B
Raspberry-Pi, an ARM GNU/Linux box, using the Adafruit
NFC breakout board with a total cost of $75. To eval-
uate our testbeds, we developed an Android application
which implements the user functionality. The application
communicates with the NFC Server, using classes from the
android.nfc package. Arduino was programmed with the
LLCP-SNEP protocol implementation for P2P communica-
tion. For the Raspberry-Pi we used the libnfc and openssl
libraries. Our user device was a Samsung Galaxy S3.
Our solution relies on cryptographic primitives for secur-
ing communication between the NFC server and user de-
vice and prevents diﬀerent types of attacks. Upon activa-
tion of the mobile application, venues and users calculate
a set of asymmetric keys. Foursquare must receive a copy
of the public keys, and all venues and users save a copy
of Foursquare’s public key. After setting up the venue ac-
count, copying the keys on the NFC server and synchroniz-
ing the internal clock through NTP, no Internet connectiv-
ity is required.The UserID and VenueID are already used by
Foursquare, as parameters in the API calls.
Validated Check-in: the protocol is shown in Figure 6.
1. The NFC server sends a random nonce to the user.
2. The device encrypts the nonce using the user’s private
key KU R, and the UserID using Foursquare’s public
key KF U , and sends them both to the NFC server. If
26
they are not received by the server in an acceptable
time window, it terminates the process.
3. Using the venue’s private key KV R, the NFC server re-
encrypts the encrypted UserID and nonce along with
the nonce in cleartext and a timestamp. These, as well
as the VenueID in cleartext, are sent to the user device.
4. The device sends the data to Foursquare, that uses
the VenueID to retrieve the venue’s public key KV P
and decrypt the ciphertext. If the timestamp is valid,
Foursquare uses its private key to decrypt the UserID
and veriﬁes it is that of the user that sent the check-in.
Then it uses the user’s public key to decrypt the nonce
value. If it matches the one sent by the venue, the user
is checked-in.
Security Analysis of the Validated Check-in protocol.
Fake-location attacks: the attacker creates a bogus check-
in request for a venue, while being at a diﬀerent location.