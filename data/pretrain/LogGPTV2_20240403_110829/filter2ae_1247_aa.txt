**作者：深信服千里目实验室  
原文链接：**
## 1\. 组件介绍
XStream是Java类库，用来将对象序列化成XML(JSON)或反序列化为对象。XStream在运行时使用Java反射机制对要进行序列化的对象树的结构进行探索，并不需要对对象作出修改。XStream可以序列化内部字段，包括私private和final字段，并且支持非公开类以及内部类。在缺省情况下，XStream不需要配置映射关系，对象和字段将映射为同名XML元素。但是当对象和字段名与XML中的元素名不同时，XStream支持指定别名。XStream支持以方法调用的方式，或是Java标注的方式指定别名。XStream在进行数据类型转换时，使用系统缺省的类型转换器。同时，也支持用户自定义的类型转换器。  
XStream类图：  
## 2\. 高危漏洞介绍
漏洞名称 | 漏洞ID | 影响版本 | CVSS  
---|---|---|---  
XStream 远程代码执行漏洞 | CVE-2013-7285 | XStream  GetShell
XStream远程代码执行漏洞单独使用，即可完成GetShell。一般情况，如果一个Web应用中使用了受漏洞影响版本的XStream，都会受XStream本身的漏洞影响。除此之外，由于XStream是将XML格式数据反序列化成对象。因此如果Web应用还引入了其他的在反序列化过程中容易出现安全问题的依赖，也会出现反序列化漏洞。
## 4\. 高可利用漏洞分析
从高危漏洞列表中，针对部分近年高可利用漏洞进行漏洞深入分析。  
**技术背景**
**java动态代理**
Java标准库提供了一种 **动态代理（Dynamic Proxy）** 的机制：可以在运行期动态创建某个interface的实例。
**例子：**
我们先定义了接口Hello，但是我们并不去编写实现类，而是直接通过JDK提供的一个Proxy.newProxyInstance()创建了一个Hello接口对象。这种没有实现类但是在运行期动态创建了一个接口对象的方式，我们称为动态代码。JDK提供的动态创建接口对象的方式，就叫动态代理。
    package test3_proxyclass;
    import java.lang.reflect.InvocationHandler;
    import java.lang.reflect.Method;
    import java.lang.reflect.Proxy;
    public class Main {
        public static void main(String[] args) {
            InvocationHandler handler = new InvocationHandler() {
                @Override
                public Object invoke(Object proxy, Method method, Object[] args) throws Throwable {
                    System.out.println(method);
                    if (method.getName().equals("morning")) {
                        System.out.println("Good morning, " + args[0]);
                    }
                    return null;
                }
            };
            Hello hello = (Hello) Proxy.newProxyInstance(
                    Hello.class.getClassLoader(), // 传入ClassLoader
                    new Class[] { Hello.class }, // 传入要实现的接口
                    handler); // 传入处理调用方法的InvocationHandler
            hello.morning("Bob");
        }
    }
    interface Hello {
        void morning(String name);
    }
java动态代理机制中有两个重要的类和接口InvocationHandler（接口）和Proxy（类），这一个类Proxy和接口InvocationHandler是我们实现动态代理的核心；
**InvocationHandler接口:**
proxy代理实例的调用处理程序实现的一个接口，每一个proxy代理实例都有一个关联的调用处理程序；在代理实例调用方法时，方法调用被编码分派到调用处理程序的invoke方法。
**newProxyInstance:** 创建一个代理类对象，它接收三个参数，我们来看下几个参数的含义：
    loader：一个classloader对象，定义了由哪个classloader对象对生成的代理类进行加载
    interfaces：一个interface对象数组，表示我们将要给我们的代理对象提供一组什么样的接口，如果我们提供了这样一个接口对象数组，那么也就是声明了代理类实现了这些接口，代理类就可以调用接口中声明的所有方法。
    h：一个InvocationHandler对象，表示的是当动态代理对象调用方法的时候会关联到哪一个InvocationHandler对象上，并最终由其调用。
**getInvocationHandler：** 返回指定代理实例的调用处理程序
**getProxyClass：** 给定类加载器和接口数组的代理类的java.lang.Class对象。
**isProxyClass：**
当且仅当使用getProxyClass方法或newProxyInstance方法将指定的类动态生成为代理类时，才返回true。
**newProxyInstance：** 返回指定接口的代理类的实例，该接口将方法调用分派给指定的调用处理程序。
#### 4.1 XStream 远程代码执行漏洞
**1 漏洞信息**
**1.1 漏洞简介**
  * 漏洞名称：XStream Remote Code Execution Vulnerability
  * 漏洞编号：CVE-2013-7285
  * 漏洞类型：Remote Code Execution
  * CVSS评分：CVSS v2.0：7.5 ， CVSS v3.0：9.8
  * 漏洞危害等级：高危
**1.2 漏洞概述**
包含类型信息的流在`unmarshalling`时，会再次创建之前写入的对象。因此XStream会基于这些类型信息创建新的实例。攻击者可以操控XML数据，将恶意命令注入在在可以执行任意shell命令的对象中，实现漏洞的利用。
**1.3 漏洞利用条件**
  * 无
**1.4 漏洞影响**
影响版本：  
XStream 
**2.漏洞复现**
**2.1 环境拓扑**
**2.2 应用协议**
8080/HTTP
**2.3 环境搭建**
基于Windows平台，使用`环境`目录下的`xstreamdemo`环境，拷贝后使用Idea打开`xstreamdemo`文件夹，下载maven资源，运行DemoApplication类，即可启动环境。效果如图。  
**2.4 漏洞复现**
运行`sniper`工具箱，填写表单信息，点击Attack，效果如图。  
**3.漏洞分析**
**3.1 详细分析**
**3.1.1 代码分析**
传入的payload首先会在`com.thoughtworks.xstream.XStream`的`fromXML()`方法中处理，在进入`unmarshal()`方法中进行解集。  
在`com.thoughtworks.xstream.core.AbstractTreeMarshallingStrategy`类中的`unmarshal()`方法中调用`start()`方法进行Java对象转换。  
在`com.thoughtworks.xstream.core.TreeUnmarshaller`类中的`start()`方法通过调用`readClassType()`获取`type`类型。  
在`readClassType()`方法中调用`readClassAttribute`方法。  
进入`readClassAttribute`方法调用`aliasForSystemAttribute`方法获取别名。调用`getAttribute`方法，获取reader对象中记录的外部传入XML数据中是否存在对应的标签，如果不存在则返回null。  
回到`HierarchicalStreams#readClassType`方法中调用`realClass`方法，通过别名在wrapped对象中的Mapper中循环查找，获取与别名对应的类。  
找到`sorted-set`别名对应的`java.util.SortedSet`类，并将类存入realClassCache对象中。  
回到`TreeUnmarshaller#start`方法，调用`convertAnother`方法。进入`convertAnother`方法后，调用`defaultImplementationOf`方法，在mapper对象中寻找java.util.SortedSet接口类的实现类`java.util.TreeSet`。  
获取`java.util.TreeSet`类型，调用`lookupConverterForType`方法，寻找对应类型的转换器。进入`lookupConverterForType`方法，循环获取转换器列表中的转换器，调用转换器类中的`canConvert`方法判断选出的转换器是否可以对传入的type类型进行转换。  
转换器`TreeSetConverter`父类`CollectionConverter`中`canConvert`方法判断，传入的type与`java.util.TreeMap`相同，返回true，表示可以使用`TreeSetConverter`转换器进行转换。  
回到`DefaultConverterLookup#lookupConverterForType`方法，将选取的converter与对应的type存入typeToConverterMap。
回到`TreeUnmarshaller#convertAnother`方法中，调用`this.convert`方法。  
首先判断传入的xml数据中是否存在reference标签，如果不存在，则将当前标签压入parentStack栈中，并调用父类的`convert`方法。  
进入`convert`方法中，调用转换器中的`unmarshal`方法，对传入的xml数据继续解组。  
首先调用`unmarshalComparator`方法判断是否存在comparator，如果不存在，则返回NullComparator对象。  
根据unmarshalledComparator对象状态，为possibleResult对象赋予TreeSet类型对象。  
由于possibleResult是一个空的TreeMap，因此最终treeMap也是一个空对象，从而调用`treeMapConverter.populateTreeMap`方法。  
进入`populateTreeMap`方法中，首先调用调用`putCurrentEntryIntoMap`方法解析第一个标签，再调用`populateMap`方法处理之后的标签（此流程中二级标签只存在一个，因此在处理二级标签时暂不进入populateMap方法）。  
具体调用流程如下，`com.thoughtworks.xstream.converters.collections.TreeSetConverter`类中调用`putCurrentEntryIntoMap`方法
->
`com.thoughtworks.xstream.converters.collections.AbstractCollectionConverter.readItem()`
中的 `readClassType()`方法获取传入xml数据中标签名（别名）对应的类（与本节中获取sorted-set对应类的流程相同）。本次获取的是dynamic-proxy对应的`java.lang.reflect.Proxy.DynamicProxyMapper`类型，并将别名与类型作为键值对，存入realClassCache中。  
回到`AbstractCollectionConverter.readItem()`方法中，调用`convertAnother`方法，寻找`DynamicProxyMapper`对应的convert，获取到`DynamicProxyConverter`转换器。  
得到`com.thoughtworks.xstream.mapper.DynamicProxyMapper$DynamicProxy`，按照之前获取转换器之后的流程，调用转换器中的`unmarshal()`方法获取`interface`元素，得到`java.lang.Comparable`，并添加到mapper中。  
在通过循环查询，继续查找下面的节点元素，进而获得了`handler java.beans.EventHandler`。  
调用`Proxy.newProxyInstance`方法创建动态代理，实现java.lang.Comparable接口。  
调用`convertAnother`方法获取传入type的转换器，`java.beans.EventHandler`对应的convert是`ReflectionConverter`。并将父类及其对象写进HashMap中  
在`com.thoughtworks.xstream.converters.reflection.AbstractReflectionConverter.duUnmarshal()`方法获取下面的节点元素`target
java.lang.ProcessBuilder`。  
具体流程如下：调用`getFieldOrNull`方法，判断xml格式中传入的标签名在目标类中是否存在对应属性。  
在调用`reader.getNodeName()`方法获取标签名，并赋值给originalNodeName。  
调用`realMember`方法获取反序列化属性的名称。  
调用`readClassAttribute`方法获取target标签中传入的类名  
调用`realClass`获取上述过程中类名对应的类，并调用`unmarshallField`方法进行解析。  
进入方法中，寻找对应type的转换器，由于是java.beans.EventHandler作为动态代理的实现类，所以选择的转化器都是`ReflectionConverter`
。使用选中的转换器进行解组。  