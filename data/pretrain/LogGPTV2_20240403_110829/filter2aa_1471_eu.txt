requested a system shutdown. If the user has selected an OS different from
the current one, Bootim adds the bootsequence one-shot BCD option in the
main system boot store (see the section “The Windows Boot Manager”
earlier in this chapter for more details about the BCD store). The new boot
sequence is recognized (and the BCD option deleted) by the Windows Boot
Manager after Winlogon has restarted the machine using NtShutdownSystem
API. Winlogon marks the previous boot entry as good before restarting the
system.
EXPERIMENT: Playing with the modern boot menu
The modern boot menu application, spawned by Winlogon after
Csrss is started, is really a classical Win32 GUI application. This
experiment demonstrates it. In this case, it’s better if you start with
a properly configured multiboot system; otherwise, you won’t be
able to see the multiple entries in the Modern boot menu.
Open a non-elevated console window (by typing cmd in the
Start menu search box) and go to the \Windows\System32 path of
the boot volume by typing cd /d C:\Windows\System32 (where C
is the letter of your boot volume). Then type Bootim.exe and press
Enter. A screen similar to the modern boot menu should appear,
showing only the Turn Off Your Computer option. This is because
the Bootim process has been started under the standard non-
administrative token (the one generated for User Account Control).
Indeed, the process isn’t able to access the system boot
configuration data. Press Ctrl+Alt+Del to start the Task Manager
and terminate the BootIm process, or simply select Turn Off Your
Computer. The actual shutdown process is started by the caller
process (which is Winlogon in the original boot sequence) and not
by BootIm.
Now you should run the Command Prompt window with an
administrative token by right-clicking its taskbar icon or the
Command Prompt item in the Windows search box and selecting
Run As Administrator. In the new administrative prompt, start
the BootIm executable. This time you will see the real modern boot
menu, compiled with all the boot options and tools, similar to the
one shown in the following picture:
In all other cases, Winlogon waits for the initialization of the LSASS
process and LSM service. It then spawns a new instance of the DWM process
(Desktop Windows Manager, a component used to draw the modern
graphical interface) and loads the registered credential providers for the
system (by default, the Microsoft credential provider supports password-
based, pin-based, and biometrics-based logons) into a child process called
LogonUI (%SystemRoot%\System32\Logonui.exe), which is responsible for
displaying the logon interface. (For more details on the startup sequence for
Wininit, Winlogon, and LSASS, see the section “Winlogon initialization” in
Chapter 7 in Part 1.)
After launching the LogonUI process, Winlogon starts its internal finite-
state machine. This is used to manage all the possible states generated by the
different logon types, like the standard interactive logon, terminal server, fast
user switch, and hiberboot. In standard interactive logon types, Winlogon
shows a welcome screen and waits for an interactive logon notification from
the credential provider (configuring the SAS sequence if needed). When the
user has inserted their credential (that can be a password, PIN, or biometric
information), Winlogon creates a logon session LUID, and validates the
logon using the authentication packages registered in Lsass (a process for
which you can find more information in the section “User logon steps” in
Chapter 7 in Part 1). Even if the authentication won’t succeed, Winlogon at
this stage marks the current boot as good. If the authentication succeeded,
Winlogon verifies the “sequential logon” scenario in case of client SKUs, in
which only one session each time could be generated, and, if this is not the
case and another session is active, asks the user how to proceed. It then loads
the registry hive from the profile of the user logging on, mapping it to
HKCU. It adds the required ACLs to the new session’s Windows Station and
Desktop and creates the user’s environment variables that are stored in
HKCU\Environment.
Winlogon next waits the Sihost process and starts the shell by launching
the executable or executables specified in
HKLM\SOFTWARE\Microsoft\Windows
NT\CurrentVersion\WinLogon\Userinit (with multiple executables separated
by commas) that by default points at \Windows\System32\Userinit.exe. The
new Userinit process will live in Winsta0\Default desktop. Userinit.exe
performs the following steps:
1. 
Creates the per-session volatile Explorer Session key
HKCU\Software\Microsoft\Windows\CurrentVersion\Explorer\Sessio
nInfo\.
2. 
Processes the user scripts specified in
HKCU\Software\Policies\Microsoft\Windows\System\Scripts and the
machine logon scripts in
HKLM\SOFTWARE\Policies\Microsoft\Windows\System\Scripts.
(Because machine scripts run after user scripts, they can override user
settings.)
3. 
Launches the comma-separated shell or shells specified in
HKCU\Software\Microsoft\Windows
NT\CurrentVersion\Winlogon\Shell. If that value doesn’t exist,
Userinit.exe launches the shell or shells specified in
HKLM\SOFTWARE\Microsoft\Windows
NT\CurrentVersion\Winlogon\Shell, which is by default
Explorer.exe.
4. 
If Group Policy specifies a user profile quota, starts
%SystemRoot%\System32\Proquota.exe to enforce the quota for the
current user.
Winlogon then notifies registered network providers that a user has logged
on, starting the mpnotify.exe process. The Microsoft network provider,
Multiple Provider Router (%SystemRoot%\System32\Mpr.dll), restores the
user’s persistent drive letter and printer mappings stored in HKCU\Network
and HKCU\Printers, respectively. Figure 12-11 shows the process tree as
seen in Process Monitor after a logon (using its boot logging capability).
Note the Smss processes that are dimmed (meaning that they have since
exited). These refer to the spawned copies that initialize each session.
Figure 12-11 Process tree during logon.
ReadyBoot
Windows uses the standard logical boot-time prefetcher (described in Chapter
5 of Part 1) if the system has less than 400 MB of free memory, but if the
system has 400 MB or more of free RAM, it uses an in-RAM cache to
optimize the boot process. The size of the cache depends on the total RAM
available, but it’s large enough to create a reasonable cache and yet allow the
system the memory it needs to boot smoothly. ReadyBoot is implemented in
two distinct binaries: the ReadyBoost driver (Rdyboost.sys) and the Sysmain
service (Sysmain.dll, which also implements SuperFetch).
The cache is implemented by the Store Manager in the same device driver
that implements ReadyBoost caching (Rdyboost.sys), but the cache’s
population is guided by the boot plan previously stored in the registry.
Although the boot cache could be compressed like the ReadyBoost cache,
another difference between ReadyBoost and ReadyBoot cache management
is that while in ReadyBoot mode, the cache is not encrypted. The
ReadyBoost service deletes the cache 50 seconds after the service starts, or if
other memory demands warrant it.
When the system boots, at phase 1 of the NT kernel initialization, the
ReadyBoost driver, which is a volume filter driver, intercepts the boot
volume creation and decides whether to enable the cache. The cache is
enabled only if the target volume is registered in the
HKLM\System\CurrentControlSet\Services\rdyboost\Parameters\ReadyBoot
VolumeUniqueId registry value. This value contains the ID of the boot
volume. If ReadyBoot is enabled, the ReadyBoost driver starts to log all the
volume boot I/Os (through ETW), and, if a previous boot plan is registered in
the BootPlan registry binary value, it spawns a system thread that will
populate the entire cache using asynchronous volume reads. When a new
Windows OS is installed, at the first system boot these two registry values do
not exist, so neither the cache nor the log trace are enabled.
In this situation the Sysmain service, which is started later in the boot
process by the SCM, determines whether the cache needs to be enabled,
checking the system configuration and the running Windows SKU. There are
situations in which ReadyBoot is completely disabled, such as when the boot
disk is a solid state drive. If the check yields a positive result, Sysmain
enables ReadyBoot by writing the boot volume ID on the relative registry
value (ReadyBootVolumeUniqueId) and by enabling the WMI ReadyBoot
Autologger in the
HKLM\SYSTEM\CurrentControlSet\Control\WMI\AutoLogger\Readyboot
registry key. At the next system boot, the ReadyBoost driver logs all the
Volume I/Os but without populating the cache (still no boot plan exists).
After every successive boot, the Sysmain service uses idle CPU time to
calculate a boot-time caching plan for the next boot. It analyzes the recorded
ETW I/O events and identifies which files were accessed and where they’re
located on disk. It then stores the processed traces in
%SystemRoot%\Prefetch\Readyboot as .fx files and calculates the new
caching boot plan using the trace files of the five previous boots. The
Sysmain service stores the new generated plan under the registry value, as
shown in Figure 12-12. The ReadyBoost boot driver reads the boot plan and
populates the cache, minimizing the overall boot startup time.
Figure 12-12 ReadyBoot configuration and statistics.
Images that start automatically
In addition to the Userinit and Shell registry values in Winlogon’s key, there
are many other registry locations and directories that default system
components check and process for automatic process startup during the boot
and logon processes. The Msconfig utility
(%SystemRoot%\System32\Msconfig.exe) displays the images configured by
several of the locations. The Autoruns tool, which you can download from
Sysinternals and is shown in Figure 12-13, examines more locations than
Msconfig and displays more information about the images configured to
automatically run. By default, Autoruns shows only the locations that are
configured to automatically execute at least one image, but selecting the
Include Empty Locations entry on the Options menu causes Autoruns to
show all the locations it inspects. The Options menu also has selections to
direct Autoruns to hide Microsoft entries, but you should always combine
this option with Verify Image Signatures; otherwise, you risk hiding
malicious programs that include false information about their company name
information.
Figure 12-13 The Autoruns tool available from Sysinternals.
Shutdown
The system shutdown process involves different components. Wininit, after
having performed all its initialization, waits for a system shutdown.
If someone is logged on and a process initiates a shutdown by calling the
Windows ExitWindowsEx function, a message is sent to that session’s Csrss
instructing it to perform the shutdown. Csrss in turn impersonates the caller
and sends an RPC message to Winlogon, telling it to perform a system
shutdown. Winlogon checks whether the system is in the middle of a hybrid
boot transition (for further details about hybrid boot, see the “Hybernation
and Fast Startup” section later in this chapter), then impersonates the
currently logged-on user (who might or might not have the same security
context as the user who initiated the system shutdown), asks LogonUI to fade
out the screen (configurable through the registry value
HKLM\Software\Microsoft\Windows
NCurrentVersion\Winlogon\FadePeriodConfiguration), and calls
ExitWindowsEx with special internal flags. Again, this call causes a message
to be sent to the Csrss process inside that session, requesting a system
shutdown.
This time, Csrss sees that the request is from Winlogon and loops through
all the processes in the logon session of the interactive user (again, not the
user who requested a shutdown) in reverse order of their shutdown level. A
process can specify a shutdown level, which indicates to the system when it
wants to exit with respect to other processes, by calling
SetProcessShutdownParameters. Valid shutdown levels are in the range 0
through 1023, and the default level is 640. Explorer, for example, sets its
shutdown level to 2, and Task Manager specifies 1. For each active process
that owns a top-level window, Csrss sends the WM_QUERYENDSESSION
message to each thread in the process that has a Windows message loop. If
the thread returns TRUE, the system shutdown can proceed. Csrss then sends
the WM_ENDSESSION Windows message to the thread to request it to exit.
Csrss waits the number of seconds defined in HKCU\Control
Panel\Desktop\HungAppTimeout for the thread to exit. (The default is 5000
milliseconds.)
If the thread doesn’t exit before the timeout, Csrss fades out the screen and
displays the hung-program screen shown in Figure 12-14. (You can disable
this screen by creating the registry value HKCU\Control
Panel\Desktop\AutoEndTasks and setting it to 1.) This screen indicates
which programs are currently running and, if available, their current state.
Windows indicates which program isn’t shutting down in a timely manner
and gives the user a choice of either killing the process or aborting the
shutdown. (There is no timeout on this screen, which means that a shutdown
request could wait forever at this point.) Additionally, third-party
applications can add their own specific information regarding state—for
example, a virtualization product could display the number of actively
running virtual machines (using the ShutdownBlockReasonCreate API).
Figure 12-14 Hung-program screen.
EXPERIMENT: Witnessing the HungAppTimeout
You can see the use of the HungAppTimeout registry value by
running Notepad, entering text into its editor, and then logging off.
After the amount of time specified by the HungAppTimeout
registry value has expired, Csrss.exe presents a prompt that asks
you whether you want to end the Notepad process, which has not
exited because it’s waiting for you to tell it whether to save the
entered text to a file. If you select Cancel, Csrss.exe aborts the
shutdown.
As a second experiment, if you try shutting down again (with
Notepad’s query dialog box still open), Notepad displays its own
message box to inform you that shutdown cannot cleanly proceed.
However, this dialog box is merely an informational message to
help users—Csrss.exe will still consider that Notepad is “hung”
and display the user interface to terminate unresponsive processes.
If the thread does exit before the timeout, Csrss continues sending the
WM_QUERYENDSESSION/WM_ENDSESSION message pairs to the other
threads in the process that own windows. Once all the threads that own
windows in the process have exited, Csrss terminates the process and goes on
to the next process in the interactive session.
If Csrss finds a console application, it invokes the console control handler
by sending the CTRL_LOGOFF_EVENT event. (Only service processes
receive the CTRL_SHUTDOWN_EVENT event on shutdown.) If the handler
returns FALSE, Csrss kills the process. If the handler returns TRUE or
doesn’t respond by the number of seconds defined by HKCU\Control
Panel\Desktop\WaitToKillTimeout (the default is 5,000 milliseconds), Csrss
displays the hung-program screen shown in Figure 12-14.
Next, the Winlogon state machine calls ExitWindowsEx to have Csrss
terminate any COM processes that are part of the interactive user’s session.
At this point, all the processes in the interactive user’s session have been
terminated. Wininit next calls ExitWindowsEx, which this time executes
within the system process context. This causes Wininit to send a message to
the Csrss part of session 0, where the services live. Csrss then looks at all the
processes belonging to the system context and performs and sends the
WM_QUERYENDSESSION/ WM_ENDSESSION messages to GUI threads
(as before). Instead of sending CTRL_LOGOFF_EVENT, however, it sends
CTRL_SHUTDOWN_EVENT to console applications that have registered
control handlers. Note that the SCM is a console program that registers a
control handler. When it receives the shutdown request, it in turn sends the
service shutdown control message to all services that registered for shutdown
notification. For more details on service shutdown (such as the shutdown
timeout Csrss uses for the SCM), see the “Services” section in Chapter 10.
Although Csrss performs the same timeouts as when it was terminating the
user processes, it doesn’t display any dialog boxes and doesn’t kill any
processes. (The registry values for the system process timeouts are taken
from the default user profile.) These timeouts simply allow system processes
a chance to clean up and exit before the system shuts down. Therefore, many
system processes are in fact still running when the system shuts down, such
as Smss, Wininit, Services, and LSASS.
Once Csrss has finished its pass notifying system processes that the system
is shutting down, Wininit wakes up, waits 60 seconds for all sessions to be
destroyed, and then, if needed, invokes System Restore (at this stage no user
process is active in the system, so the restore application can process all the
needed files that may have been in use before). Wininit finishes the shutdown
process by shutting down LogonUi and calling the executive subsystem
function NtShutdownSystem. This function calls the function
PoSetSystemPowerState to orchestrate the shutdown of drivers and the rest of
the executive subsystems (Plug and Play manager, power manager,
executive, I/O manager, configuration manager, and memory manager).
For example, PoSetSystemPowerState calls the I/O manager to send
shutdown I/O packets to all device drivers that have requested shutdown
notification. This action gives device drivers a chance to perform any special
processing their device might require before Windows exits. The stacks of
worker threads are swapped in, the configuration manager flushes any
modified registry data to disk, and the memory manager writes all modified
pages containing file data back to their respective files. If the option to clear
the paging file at shutdown is enabled, the memory manager clears the
paging file at this time. The I/O manager is called a second time to inform the
file system drivers that the system is shutting down. System shutdown ends
in the power manager. The action the power manager takes depends on
whether the user specified a shutdown, a reboot, or a power down.
Modern apps all rely on the Windows Shutdown Interface (WSI) to
properly shut down the system. The WSI API still uses RPC to communicate
between processes and supports the grace period. The grace period is a
mechanism by which the user is informed of an incoming shutdown, before
the shutdown actually begins. This mechanism is used even in case the
system needs to install updates. Advapi32 uses WSI to communicate with
Wininit. Wininit queues a timer, which fires at the end of the grace period
and calls Winlogon to initialize the shutdown request. Winlogon calls
ExitWindowsEx, and the rest of the procedure is identical to the previous one.
All the UWP applications (and even the new Start menu) use the
ShutdownUX module to switch off the system. ShutdownUX manages the
power transitions for UWP applications and is linked against Advapi32.dll.
Hibernation and Fast Startup
To improve the system startup time, Windows 8 introduced a new feature
called Fast Startup (also known as hybrid boot). In previous Windows
editions, if the hardware supported the S4 system power-state (see Chapter 6
of Part 1 for further details about the power manager), Windows allowed the
user to put the system in Hibernation mode. To properly understand Fast
Startup, a complete description of the Hibernation process is needed.
When a user or an application calls SetSuspendState API, a worker item is
sent to the power manager. The worker item contains all the information
needed by the kernel to initialize the power state transition. The power
manager informs the prefetcher of the outstanding hibernation request and
waits for all its pending I/Os to complete. It then calls the
NtSetSystemPowerState kernel API.
NtSetSystemPowerState is the key function that orchestrates the entire
hibernation process. The routine checks that the caller token includes the
Shutdown privilege, synchronizes with the Plug and Play manager, Registry,
and power manager (in this way there is no risk that any other transactions
could interfere in the meantime), and cycles against all the loaded drivers,
sending an IRP_MN_QUERY_POWER Irp to each of them. In this way the
power manager informs each driver that a power operation is started, so the
driver’s devices must not start any more I/O operations or take any other
action that would prevent the successful completion of the hibernation
process. If one of the requests fails (perhaps a driver is in the middle of an
important I/O), the procedure is aborted.
The power manager uses an internal routine that modifies the system boot
configuration data (BCD) to enable the Windows Resume boot application,
which, as the name implies, attempts to resume the system after the
hibernation. (For further details, see the section “The Windows Boot
Manager” earlier in this chapter). The power manager:
■    Opens the BCD object used to boot the system and reads the
associated Windows Resume application GUID (stored in a special
unnamed BCD element that has the value 0x23000003).
■    Searches the Resume object in the BCD store, opens it, and checks its
description. Writes the device and path BCD elements, linking them
to the \Windows\System32\winresume.efi file located in the boot
disk, and propagates the boot settings from the main system BCD
object (like the boot debugger options). Finally, it adds the
hibernation file path and device descriptor into filepath and filedevice
BCD elements.
■    Updates the root Boot Manager BCD object: writes the resumeobject
BCD element with the GUID of the discovered Windows Resume
boot application, sets the resume element to 1, and, in case the
hibernation is used for Fast Startup, sets the hiberboot element to 1.
Next, the power manager flushes the BCD data to disk, calculates all the
physical memory ranges that need to be written into the hibernation file (a
complex operation not described here), and sends a new power IRP to each
driver (IRP_MN_SET_POWER function). This time the drivers must put their
device to sleep and don’t have the chance to fail the request and stop the
hibernation process. The system is now ready to hibernate, so the power
manager starts a “sleeper” thread that has the sole purpose of powering the
machine down. It then waits for an event that will be signaled only when the
resume is completed (and the system is restarted by the user).
The sleeper thread halts all the CPUs (through DPC routines) except its
own, captures the system time, disables interrupts, and saves the CPU state. It
finally invokes the power state handler routine (implemented in the HAL),
which executes the ACPI machine code needed to put the entire system to
sleep and calls the routine that actually writes all the physical memory pages
to disk. The sleeper thread uses the crash dump storage driver to emit the
needed low-level disk I/Os for writing the data in the hibernation file.
The Windows Boot Manager, in its earlier boot stages, recognizes the
resume BCD element (stored in the Boot Manager BCD descriptor), opens
the Windows Resume boot application BCD object, and reads the saved