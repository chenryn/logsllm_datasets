# Import modules and write comments to describe this program.
for foldername, subfolders, filenames in os.walk('C:\\'):
numPhotoFiles = 0
numNonPhotoFiles = 0
for filename in filenames:
# Check if file extension isn't .png or .jpg.
if TODO:
numNonPhotoFiles += 1
continue # skip to next filename
# Open image file using Pillow.
# Check if width & height are larger than 500.
if TODO:
# Image is large enough to be considered a photo.
numPhotoFiles += 1
else:
# Image is too small to be a photo.
numNonPhotoFiles += 1
第17章 操作图像 349
# If more than half of files were photos,
# print the absolute path of the folder.
if TODO:
print(TODO)
程序运行时，它应该在屏幕上打印所有照片文件夹的绝对路径。
17.7.3 定制的座位卡
第13章包含了一个实践项目，利用纯文本文件的客人名单，创建定制的邀请函。
作为附加项目，请使用 Pillow 模块，为客人创建定制的座位卡图像。从http://nostarch.
com/automatestuff/下载资源文件guests.txt，对于其中列出的客人，生成带有客人名字和
一些鲜花装饰的图像文件。在http://nostarch.com/automatestuff/的资源中，包含一个版
权为公共领域的鲜花图像。
为了确保每个座位卡大小相同，在图像的边缘添加一个黑色的矩形，这样在图
像打印出来时，可以沿线剪裁。Pillow生成的PNG文件被设置为每英寸72个像素，
因此4×5英寸的卡片需要288×360像素的图像。
350 Python编程快速上手——让繁琐工作自动化
18
第 章
用 GUI 自动化控制键盘和鼠标
知道用于编辑电子表格、下载文件和运行程序的各种
Python模块，是很有用的。但有时候，就是没有模块对应你要
操作的应用程序。在计算机上自动化任务的终极工具，就是写
程序直接控制键盘和鼠标。这些程序可以控制其他应用，向它
们发送虚拟的击键和鼠标点击，就像你自己坐在计算机前与应
用交互一样。这种技术被称为“图形用户界面自动化”，或简
称为“GUI自动化”。有了GUI自动化，你的程序就像一个活
人用户坐在计算机前一样，能做任何事情，除了将咖啡泼在键盘上。
请将GUI自动化看成是对一个机械臂编程。你可以对机械臂编程，让它敲键盘
或移动鼠标。对于涉及许多无脑点击或填表的任务，这种技术特别有用。
pyautogui模块包含了一些函数，可以模拟鼠标移动、按键和滚动鼠标滚轮。本章只
介绍了pyautogui功能的子集。可以在http://pyautogui.readthedocs.org/找到完整的文档。
18.1 安装 pyautogui 模块
pyautogui模块可以向Windows、OS X和Linux发送虚拟按键和鼠标点击。根
据你使用的操作系统，在安装 pyautogui 之前，可能需要安装一些其他模块（称为
依赖关系）。
 在Windows上，不需要安装其他模块。
 在OS X上，运行sudo pip3 install pyobjc-framework-Quartz，sudo pip3 install
pyobjc-core，然后sudo pip3 install pyobjc。
 在Linux上，运行sudo pip3 install python3-xlib，sudo apt-get install scrot，sudo
apt-get install python3-tk，以及 sudo apt-get install python3-dev（Scrot 是
PyAutoGUI使用的屏幕快照程序）。
在这些依赖安装后，运行pip install pyautogu（i 或在OS X和Linux上运行pip3），
安装pyautogui。
附录 A 有安装第三方模块的完整信息。要测试 PyAutoGUI 是否正确安装，就
在交互式环境运行import pyautogui，并检查出错信息。
18.2 走对路
在开始GUI自动化之前，你应该知道如何避免可能发生的问题。Python能以想
象不到的速度移动鼠标并击键。实际上，它可能太快，导致其他程序跟不上。而且，
如果出了问题，但你的程序继续到处移动鼠标，可能很难搞清楚程序到底在做什么，
或者如何从问题中恢复。就像迪斯尼电影《魔法师的学徒》中的魔法扫帚，它不断
地向米老鼠的浴缸注水（然后水溢出来），你的程序可能失去控制，即使它完美地
执行你的指令。如果程序自己在移动鼠标，停止它可能很难，你不能点击 IDLE 窗
口来关闭它。好在，有几种方法来防止或恢复GUI自动化问题。
18.2.1 通过注销关闭所有程序
停止失去控制的GUI自动化程序，最简单的方法可能是注销，这将关闭所有
运行的程序。在Windows和Linux上，注销的热键是Ctrl-Alt-Del。在OS X，热键
是 -Shift-Option-Q。通过注销，你会丢失所有未保存的工作，但至少不需要等计算
机完全重启。
18.2.2 暂停和自动防故障装置
你可以告诉脚本在每次函数调用后等一会儿，在出问题的时候，让你有很短的
时间窗口来控制鼠标和键盘。要做到这一点，将 pyautogui.PAUSE 变量设置为要暂
停的秒数。例如，在设置pyautogui.PAUSE = 1.5之后，每个PyAutoGUI函数调用
在执行动作之后，都会等待一秒半。非PyAutoGUI指令不会停顿。
pyautogui 也有自动防故障功能。将鼠标移到屏幕的左上角，这将导致pyautogui
产生pyautogui .FailSafeException异常。你的程序可以用try和except语句来处理这
Python编程快速上手——让繁琐工作自动化
个异常，也可以让异常导致程序崩溃。这两种情况下，如果你尽可能快地向左上移
动鼠标，自动防故障功能都将停止程序。可以设置pyautogui. FAILSAFE = False，禁
止这项功能。在交互式环境中输入以下内容：
>>> import pyautogui
>>> pyautogui.PAUSE = 1
>>> pyautogui.FAILSAFE = True
这里我们导入pyautogui，并将pyautogui.PAUSE设置为1，即每次函数调用后
暂停一秒。将pyautogui.FAILSAFE设置为True，启动自动防故障功能。
18.3 控制鼠标移动
在本节中，你将学习如何利用 pyautogui 移动鼠标，追踪它在屏幕上的位置，
但首先需要理解pyautogui如何处理坐标。
pyautogui的鼠标函数使用x、y坐标。图18-1中展示了计算机屏幕的坐标系统。
它与17章中讨论的图像坐标系统类似。原点的x、y都是零，在屏幕的左上角。向
右x坐标增加，向下y坐标增加。所有坐标都是正整数，没有负数坐标。
图18-1 分辨率为1920 × 1080的计算机屏幕上的坐标
分辨率是屏幕的宽和高有多少像素。如果屏幕的分辨率设置为1920 × 1080，那
么左上角的坐标是（0，0），右下角的坐标是（1919，1079）。
pyautogui.size() 函数返回两个整数的元组，包含屏幕的宽和高的像素数。在交
互式环境中输入下面内容：
第18章 用GUI自动化控制键盘和鼠标
>>> import pyautogui
>>> pyautogui.size()
(1920, 1080)
>>> width, height = pyautogui.size()
在分辨率为 1920 × 1080 的计算机上，pyautogui.size() 返回（1920，1080）。根
据屏幕分辨率的不同，返回值可能不一样。你可以将来自pyautogui.size() 的宽和高
存在变量中，如width和height，让程序的可读性更好。
18.3.1 移动鼠标
既然你理解了屏幕坐标，就让我们来移动鼠标。pyautogui.moveTo() 函数将鼠
标立即移动到屏幕的指定位置。表示 x、y 坐标的整数值分别构成了函数的第一个
和第二个参数。可选的duration整数或浮点数关键字参数，指定了将鼠标移到目的
位置所需的秒数。如果不指定，默认值是零，表示立即移动（在PyAutoGUI函数中，
所有的duration关键字参数都是可选的）。在交互式环境中输入以下内容：
>>> import pyautogui
>>> for i in range(10):
pyautogui.moveTo(100, 100, duration=0.25)
pyautogui.moveTo(200, 100, duration=0.25)
pyautogui.moveTo(200, 200, duration=0.25)
pyautogui.moveTo(100, 200, duration=0.25)
这个例子根据提供的坐标，以正方形的模式顺时针移动鼠标，移动了10次。每
次移动耗时0.25秒，因为有关键字参数指定 duration=0.25。如果没有指定函数调用
的第三个参数，鼠标就会马上从一个点移到另一个点。
pyautogui.moveRel() 函数相对于当前的位置移动鼠标。下面的例子同样以正方
形的模式移动鼠标，只是它从代码开始运行时鼠标所在的位置开始，按正方形移动：
>>> import pyautogui
>>> for i in range(10):
pyautogui.moveRel(100, 0, duration=0.25)
pyautogui.moveRel(0, 100, duration=0.25)
pyautogui.moveRel(-100, 0, duration=0.25)
pyautogui.moveRel(0, -100, duration=0.25)
pyautogui.moveRel() 也接受 3 个参数：向右水平移动多少个像素，向下垂直移
动多少个像素，以及（可选的）花多少时间完成移动。为第一第二个参数提供负整数，
鼠标将向左或向上移动。
18.3.2 获取鼠标位置
通过调用 pyautogui.position() 函数，可以确定鼠标当前的位置。它将返回函数
调用时，鼠标 x、y 坐标的元组。在交互式环境中输入以下内容，每次调用后请移
动鼠标：
Python编程快速上手——让繁琐工作自动化
>>> pyautogui.position()
(311, 622)
>>> pyautogui.position()
(377, 481)
>>> pyautogui.position()
(1536, 637)
当然，返回值取决于鼠标的位置。
18.4 项目：“现在鼠标在哪里？”
能够确定鼠标的位置，对于建立GUI自动化脚本是很重要的。但光看屏幕，几
乎不能弄清楚像素的准确坐标。如果有一个程序在移动鼠标时随时显示 x y坐标，
就会很方便。
总的来说，你希望该程序做到：
 获得鼠标当前的xy坐标。
 当鼠标在屏幕上移动时，更新这些坐标。
这意味着代码需要做到下列事情：
 调用函数取得当前坐标。
 在屏幕上打印回退制服。删除以前打印的坐标。
 处理异常。让用户能按键退出。
打开一个新的文件编辑器窗口，将它保存为mouseNow.py。
第 1步：导入模块
程序开始是这样的：
#! python3
# mouseNow.py - Displays the mouse cursor's current position.
import pyautogui
print('Press Ctrl-C to quit.')
#TODO: Get and print the mouse coordinates.
程序开始导入了pyautogui模块，打印的内容提醒用户按Ctrl-C退出。
第 2步：编写退出代码和无限循环
可以用无限 while 循环，不断打印通过mouse.position() 获得的当前鼠标坐标。
对于退出程序的代码，你需要捕捉 KeyboardInterrupt 异常，它会在用户按
下 Ctrl-C 时抛出。如果不处理这个异常，它会向用户显示丑陋的调用栈和出错信息。
将下面内容添加到程序中：
#! python3
# mouseNow.py - Displays the mouse cursor's current position.
import pyautogui
第18章 用GUI自动化控制键盘和鼠标
print('Press Ctrl-C to quit.')
try:
while True:
# TODO: Get and print the mouse coordinates.
 except KeyboardInterrupt:
 print('\nDone.')
为了处理这个异常，将无限while循环放在一个try语句中。当用户按下Ctrl-C，
程序执行将转到except子句，新行中将输出Done。
第 3步：获取并打印鼠标坐标
while循环内的代码应该获取当前鼠标的坐标，提供好看的格式，并打印输出。
在while循环内添加以下代码：
#! python3
# mouseNow.py - Displays the mouse cursor's current position.
import pyautogui
print('Press Ctrl-C to quit.')
--snip--
# Get and print the mouse coordinates.
x, y = pyautogui.position()
positionStr = 'X: ' + str(x).rjust(4) + ' Y: ' + str(y).rjust(4)
--snip--
利用多重赋值的技巧，变量x、y得到了pyautogui.position() 返回元组中的两个
整型值。将x、y传递给str() 函数，可以得到整型坐标的字符串形式。rjust() 字符串方
法将对坐标右调整，让它们占据同样的宽度，不论坐标是一位、两位、三位或四位
数字。连接右调准的字符串坐标，加上 'X: ' 和 ' Y: ' 标签，就得到了格式化好的字符
串，保存在positionStr中。
在程序的末尾，添加以下代码：
#! python3
# mouseNow.py - Displays the mouse cursor's current position.
--snip--
print(positionStr, end='')
 print('\b' * len(positionStr), end='', flush=True)
这将在屏幕上打印positionStr。print() 函数的关键字参数end='' 阻止了在打印行
末添加默认的换行字符。这可能会擦除你已经在屏幕上打印的文本，但只是最近一