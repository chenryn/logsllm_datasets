[`nvim-orgmode`](https://github.com/nvim-orgmode/orgmode#agenda) is a Orgmode clone written in Lua for Neovim. Org-mode is a flexible note-taking system that was originally created for Emacs. It has gained wide-spread acclaim and was eventually ported to Neovim. This page is heavily focused to the nvim plugin, but you can follow the concepts for emacs as well.
If you use Android try [orgzly](orgzly.md).
# [Installation](https://github.com/nvim-orgmode/orgmode#installation)
Add to your plugin config:
```lua
use {'nvim-orgmode/orgmode', config = function()
  require('orgmode').setup{}
end
}
```
Then install it with `:PackerInstall`.
Tweak the configuration:
```lua
-- init.lua
-- Load custom treesitter grammar for org filetype
require('orgmode').setup_ts_grammar()
-- Treesitter configuration
require('nvim-treesitter.configs').setup {
  -- If TS highlights are not enabled at all, or disabled via `disable` prop,
  -- highlighting will fallback to default Vim syntax highlighting
  highlight = {
    enable = true,
    -- Required for spellcheck, some LaTex highlights and
    -- code block highlights that do not have ts grammar
    additional_vim_regex_highlighting = {'org'},
  },
  ensure_installed = {'org'}, -- Or run :TSUpdate org
}
require('orgmode').setup({
  org_agenda_files = {'~/Dropbox/org/*', '~/my-orgs/**/*'},
  org_default_notes_file = '~/Dropbox/org/refile.org',
})
```
You can check the default configuration file [here](https://github.com/nvim-orgmode/orgmode/blob/master/lua/orgmode/config/defaults.lua).
## [Key bindings](https://github.com/nvim-orgmode/orgmode/blob/master/DOCS.md#mappings)
Mappings or Key bindings can be changed on the `mappings` attribute of the `setup`. The program has these kinds of mappings:
* [Org](https://github.com/nvim-orgmode/orgmode/blob/master/DOCS.md#org-mappings)
* [Agenda](https://github.com/nvim-orgmode/orgmode/blob/master/DOCS.md#agenda-mappings)
* [Capture](https://github.com/nvim-orgmode/orgmode/blob/master/DOCS.md#capture-mappings)
* [Global](https://github.com/nvim-orgmode/orgmode/blob/master/DOCS.md#global-mappings)
For example the `global` mappings live under `mappings.global` and can be overridden like this:
```lua
require('orgmode').setup({
  mappings = {
    global = {
      org_agenda = 'gA',
      org_capture = 'gC'
    }
  }
})
```
## Be ready when breaking changes come
The developers have [created an issue](https://github.com/nvim-orgmode/orgmode/issues/217) to track breaking changes, subscribe to it so you're notified in advance.
# Usage
If you are new to Orgmode, check the [vim Dotoo video](https://www.youtube.com/watch?v=nsv33iOnH34), it's another plugin but the developers say it's the same. If you, like me, prefer written tutorials check the hands-on [tutorial](https://github.com/nvim-orgmode/orgmode/wiki/Getting-Started).
If you get lost in any view you can use `g?` to get the mappings of the view.
## The Org file syntax
### Headings
Any line starting with one or more asterisks `*` but without any preceding whitespace is a heading (also called headline).
```org
* Org Bullets
* Vim table-mode
```
Once you are over a header, you can create a new header at the same level below the current subtree ``, if you want to add a heading after the current item use `` if you use these [key bindings](#key-bindings):
```lua
require('orgmode').setup({
  mappings = {
    org = {
      org_meta_return = '',
      org_insert_heading_respect_content = '',
    }
  }
})
```
To be able [to use it in insert mode](https://github.com/nvim-orgmode/orgmode/issues/70) too add below the org-mode configuration:
```lua
vim.cmd[[
  imap  
  imap  
]]
```
The number of asterisks denotes the level of the heading: the more asterisks, the deeper the level. That is how we achieve nested structures in our org files.
```org
* Org Bullets
** Synopsis
* Vim table-mode
```
The content within a heading can be free form text, include links, be a list, or any combination thereof. For example:
```org
* Org Bullets
** Synopsis
   This plugin is a clone of org-bullets. It replaces the asterisks in org
   syntax with unicode characters.
* Vim table-mode
```
The full syntax for a headline is
```
STARS KEYWORD PRIORITY TITLE TAGS
*     TODO    [#A]     foo   :bar:baz:
```
Where:
* `KEYWORD`: if present, turns the heading into a [`TODO` item](#todo-items). 
* `PRIORITY` sets a [priority level](#priority) to be used in the Agenda.
* `TITLE` is the main body of the heading.
* `TAGS` is a colon surrounded and delimited list of [tags](#tags) used in searching in the Agenda.
#### Toogle line to headline
You can change a text line into a headline with `h` (Default: `o*`) with the next configuration:
```lua
org = {
  org_toggle_heading = 'h',
}
```
If you have a checkbox inside a TODO item, it will transform it to a children TODO item.
#### Change heading level
To change the heading level use `>`. It doesn't work in visual mode though, if you want to change the level of the whole subtree you can use `S`. 
```lua
org = {
  org_do_promote = '>',
  org_promote_subtree = 'S',
}
```
To be able [to use it in insert mode](https://github.com/nvim-orgmode/orgmode/issues/70) too add below the org-mode configuration:
```lua
vim.cmd[[
  imap >> >>
  imap S >s
  imap oJ`) and `K` (Default `oK`) with the next conf:
```lua
    org = {
      org_move_subtree_up = "K",
      org_move_subtree_down = "J",
    }
```
#### Folding headings
To fold the headings you can use either the normal vim bindings `zc`, `zo`, `zM`, ... or `` to toogle the fold of an element or `` to toogle the whole file.
#### Navigate through headings
It's easy to navigate through your heading tree with:
* Next/previous heading of any level with `j`/`k` (Default `}`/`{`)
* Next/previous heading of the same level with `n`/`p` (Default `]]`/`[[`)
* Go to the parent heading with `gp` (Default `g{`)
```lua
org = {
  org_next_visible_heading = '',
  org_previous_visible_heading = '',
  org_forward_heading_same_level = '',
  org_backward_heading_same_level = '',
  outline_up_heading = 'gp',
}
```
To be able [to use it in insert mode](https://github.com/nvim-orgmode/orgmode/issues/70) too add below the org-mode configuration:
```lua
vim.cmd[[
  imap  
  imap  
  imap  
  imap  
]]
```
### TODO items
`TODO` items are meant to model tasks that evolve between states. 
As creating `TODO` items is quite common you can:
* Create an item with the same level as the item above in the current position with `;t` (by default is `oit`).
* Create an item with the same level as the item above after all the children of the item above with `;T` (by default is `oit`).
```lua
org = {
  org_insert_todo_heading = ";t",
  org_insert_todo_heading_respect_content = ";T",
}
```
To be able [to use it in insert mode](https://github.com/nvim-orgmode/orgmode/issues/70) too add below the org-mode configuration:
```lua
vim.cmd[[
  imap ;t ;t
  imap ;T ;T
]]
```
You can transition the state forward and backwards by using `t`/`T` (Default: `cit`/`ciT`) if you use:
```lua
org = {
  org_todo = 't',
  org_todo_prev = 'T',
}
```
#### TODO state customization
By default they are `TODO` or `DONE` but you can define your own using the `org_todo_keywords` configuration. It accepts a list of *unfinished* states and *finished* states separated by a `'|'`. For example:
```lua
org_todo_keywords = { 'TODO', 'NEXT', '|', 'DONE' }
```
You can also use [fast access states](https://orgmode.org/manual/Fast-access-to-TODO-states.html#Fast-access-to-TODO-states):
```lua
org_todo_keywords = { 'TODO(t)', 'NEXT(n)', '|', 'DONE(d)' }
```
Sadly you can't [yet use different todo sequences](https://github.com/nvim-orgmode/orgmode/issues/250).
### Priority
TODO items can also have a priority, by default you have 3 levels `A`, `B` and `C`. If you don't set a priority it's set to `B`.
You can increase/decrease the priority with `=`/`-` (Default: `ciR`/`cir`):
```lua
org = {
  org_priority_up = '-',
  org_priority_down = '=',
}
```
I feel more comfortable with these priorities:
- `A`: Critical
- `B`: High
- `C`: Normal
- `D`: Low
This gives you room to usually work on priorities `B-D` and if something shows up that is really really important, you can use `A`. You can set this setting with the next snippet:
```lua
require('orgmode').setup({
  org_priority_highest = 'A',
  org_priority_default = 'C',