    Python>for r in m.refs():
    Python>    print r
    Python>
    AddressOpnumReftype(address=5815998L, opnum=1, reftype=ref_t(r))
    AddressOpnumReftype(address=5816027L, opnum=1, reftype=ref_t(r))
    AddressOpnumReftype(address=5816045L, opnum=1, reftype=ref_t(r))
    AddressOpnumReftype(address=5816066L, opnum=1, reftype=ref_t(r))
    AddressOpnumReftype(address=5816087L, opnum=1, reftype=ref_t(r))
    AddressOpnumReftype(address=5816112L, opnum=1, reftype=ref_t(r))
    AddressOpnumReftype(address=5816134L, opnum=1, reftype=ref_t(r))
    AddressOpnumReftype(address=5816175L, opnum=1, reftype=ref_t(r))
返回的引用是一个命名元组，包含地址、操作数、以及引用是读取还是写入变量。
为了显示我们正在处理的指令，我们将简单地从元组中解压缩地址并将其与`database.disassemble`函数一起使用。
    Python>for ea, _, _ in m.refs():
    Python>    print db.disasm(ea)
    Python>
    58bebe: mov eax, [ebp+ap_frame_0]
    58bedb: mov eax, [ebp+ap_frame_0]
    58beed: mov eax, [ebp+ap_frame_0]
    58bf02: mov eax, [ebp+ap_frame_0]
    58bf17: mov eax, [ebp+ap_frame_0]
    58bf30: mov eax, [ebp+ap_frame_0]
    58bf46: mov eax, [ebp+ap_frame_0]
    58bf6f: mov eax, [ebp+ap_frame_0]
现在我们可以确定这些指令已经成功引用了包含其调用帧的参数。让我们暂时用名称“frame-operand”和操作数索引标记它们。
    Python>for ea, idx, _ in m.refs():
    Python>    db.tag(ea, 'frame-operand', idx)
    Python>
接下来，我们要做的是为每个使用分配帧变量的寄存器标识下一条指令。 我们可以使用`instruction.op`去识别属于第一个操作数的寄存器。
要找到正在读取寄存器的下一条指令，我们可以使用`database.address.nextreg`函数。
然而，在我们实际标记结果之前让我们首先选择“frame-operand”标记，并使用`instruction.op`和`database.address.nextreg`的组合来查看我们的结果。
    Python>for ea, tags in func.select('frame-operand'):
    Python>    reg = ins.op(ea, 0)
    Python>    next_ref = db.a.nextreg(ea, reg, read=True)
    Python>    print hex(ea), '->', db.disasm(next_ref)
    Python>
    58bebe -> 58bec1: push eax
    58bedb -> 58bede: mov eax, [eax+8]
    58beed -> 58bef0: mov eax, [eax+8]
    58bf02 -> 58bf05: mov eax, [eax+8]
    58bf17 -> 58bf1a: mov eax, [eax+8]
    58bf30 -> 58bf33: mov eax, [eax+8]
    58bf46 -> 58bf49: mov eax, [eax+8]
    58bf6f -> 58bf72: mov eax, [eax+8]
在地址0x58bebe处我们能看到，`％eax`寄存器的下一次使用是通过“push”指令在0x58bec1处。 这可能用于将调用程序的帧传递给函数调用。
现在因为我们只对需要处理当前函数中使用的帧变量，所以我们将地址中的标记删除。
    Python>db.tag(0x58bebe, 'frame-operand', None)
    1
在删除地址标记后，这里应该只存在从帧中读取的赋值指令。 而之前我们已将调用者的地址存储在功能标记的“frame-lvars”中。
因此，我们现在可以使用它来标记每个赋值指令。
    Python>for ea, tags in func.select('frame-operand'):
    Python>    reg = ins.op(ea, 0)
    Python>    next_ref = db.a.nextreg(ea, reg, read=True)
    Python>    lvars = func.tag('frame-lvars')
    Python>    db.tag(next_ref, 'frame', lvars)
    Python>
现在我们已经创建了一个新的标签“frame”，它指向使用该帧的指令。此时我们不再需要“frame-operand”标签了。
我们现在可以通过在IDAPython命令提示符下执行以下代码来删除此“frame-operand”标记。
    Python>for ea, _ in func.select('frame-operand'):
    Python>    db.tag(ea, 'frame-operand', None)
    Python>
让我们再次查看我们的结果，查询函数是否有任何标记为“frame”的指令。
我们将再次使用`database.disassemble`，这次操作使用“comment”关键字所指定的注释作为其参数之一。
    Python>for ea, tags in func.select('frame'):
    Python>    print db.disasm(ea, comment=True)
    Python>
    58bede: mov eax, [eax+8]; [frame] 0x590a33
    58bef0: mov eax, [eax+8]; [frame] 0x590a33
    58bf05: mov eax, [eax+8]; [frame] 0x590a33
    58bf1a: mov eax, [eax+8]; [frame] 0x590a33
    58bf33: mov eax, [eax+8]; [frame] 0x590a33
    58bf49: mov eax, [eax+8]; [frame] 0x590a33
    58bf72: mov eax, [eax+8]; [frame] 0x590a33
在用“frame”标记这些指令之后，我们现在可以看到偏移实际指的是哪个帧。 有了这个，当我们正在反汇编时，我们能够双击并立即查看拥有该变量的框架。
但是，我们可以做得比这更好一些。 如果我们双击我们发出的一个指令的地址，我们就可以使用`instruction.op`函数来提取引用该帧变量的操作数。
让我们定位到其中一个说明，然后尝试。
    Python>ins.op(1)
    OffsetBaseIndexScale(offset=8L, base=, index=None, scale=1)
我们可以通过`instruction.op`立即发出当前指令的第一个操作数，并返回一个命名元组。它包含指向我们希望查看的帧变量的偏移量。
如果我们使用带有`function.frame`的偏移来识别框架，那么我们就可以得到它的命名。 让我们用这个方法获取成员名称然后用它作为“frame-member”标记指令。
    Python>for ea, tags in func.select('frame'):
    Python>    frame = func.frame(tags['frame'])
    Python>    offset = ins.op(ea, 1).offset
    Python>    member = frame.by(offset)
    Python>    db.tag(ea, 'frame-member', member.name)
    Python>
我们现在可以看到当前函数中标有“frame”的指令都包含frame变量名称的“frame-member”标记。
如果我们获得了任何用标签“frame”标记的指令，那么我们应先根据描述的代码查看由“frame”值标识的函数所拥有的帧，然后使用对其名称的引用对其进行标记。
这样，如果多个指令在标记中包含正确的帧，则先前的代码将存储被引用的变量名称。
如果我们在0x590a33确定函数的调用者，我们则可以对0x58bf36处的指令执行相同的操作。
有了这个，我们就可以用标签名称“frame”和函数的地址来标记0x58bf36。
    CODE:0058BF33 018 8B 40 08                          mov     eax, [eax+8]    ; [frame] 0x590a33
    CODE:0058BF33                                                               ; [frame-member] arg_0
    CODE:0058BF36 018 8B 40 08                          mov     eax, [eax+8]
    CODE:0058BF39 018 8B 80 54 F9 FF FF                 mov     eax, [eax-6ACh]
    CODE:0058BF3F 018 8B D3                             mov     edx, ebx
然而我们可以不用使用标签来引用它。 IDA-minsc实际上允许我们通过`instruction.op_structure`函数将帧结构本身应用于操作数。
要执行此操作，我们将对“frame”标记执行相同的选择，而不是获取偏移量以确定框架成员的名称，我们可以使用带有框架结构本身的`instruction.op_structure`方法。
    Python>for ea, tags in func.select('frame'):
    Python>    frame = func.frame(tags['frame'])
    Python>    ins.op_struct(ea, 1, frame)
    Python>
然后每个标记的指令可以引用指向帧成员的第二个操作数。 下图将显示0x58bf49处的“frame”标记。
    CODE:0058BF36 018 8B 40 08                          mov     eax, [eax+8]
    CODE:0058BF39 018 8B 80 54 F9 FF FF                 mov     eax, [eax-6ACh]
    CODE:0058BF3F 018 8B D3                             mov     edx, ebx
    CODE:0058BF41 018 E8 EA BE E7 FF                    call    sub_407E30
    CODE:0058BF46 018 8B 45 08                          mov     eax, [ebp+ap_frame_0]
    CODE:0058BF49 018 8B 40 08                          mov     eax, [eax+($ F590728.arg_0-0Ch)] ; [frame] 0x590a33
## 总结
IDA-minsc中有许多功能，包括允许用户以编程的方式与IDA向逆向工程师所公开的二进制文件的各个部分进行交互。在我们上面提到的功能中，这个插件还包含“结构”模块中提供的各种工具，并且可以使用`function.frame（）`来查询属于特定函数的堆栈帧的变量。我们建议用户针对这些模块运行Python的`help（）`关键字，以了解可用的内容。
尽管与大多数逆向工程任务一样，很多事情都可以通过调试器和一些适当的断点来完成，但我们相信用户通过注释脚本能够编写兼容性很好的代码。通过使用一致的、非详细的API，其中每个函数的大部分参数都可以被自动确定，这个插件减少了用户投资开发自动化反汇编工作的解决方案所需的时间。逆向工程师可以使用它来处理大规模项目，而无需将时间浪费在时间承诺上。
请访问GitHub的存储库，下载该插件并进行试用。如果您喜欢该插件，请“关注”它，并在存储库中提出所发现的问题或贡献CONTRIBUTING.md文件。