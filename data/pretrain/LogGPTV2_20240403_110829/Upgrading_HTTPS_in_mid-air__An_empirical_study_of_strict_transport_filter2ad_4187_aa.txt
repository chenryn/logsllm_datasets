# Upgrading HTTPS in Mid-Air: An Empirical Study of Strict Transport Security and Key Pinning

**Authors:**
- Michael Kranch, Princeton University, [Email]
- Joseph Bonneau, Princeton University, [Email]

## Abstract
We present the first in-depth empirical study of two critical web security features: strict transport security (HSTS) and public-key pinning. Both have been introduced to enhance the security of HTTPS, the standard for secure web browsing. While HSTS is more widely adopted, both features are currently deployed primarily by a few large websites and a smaller number of security-conscious sites. Our findings indicate that many developers do not fully understand these features, leading to their misuse or incorrect implementation. A significant number of sites attempting to set an HSTS header do so with basic errors that severely compromise the intended security benefits. We also identify several subtle but important pitfalls in the practical deployment of these features. For example, most pinned domains undermine the security benefits by loading non-pinned resources that can hijack the page. Additionally, a substantial portion of HSTS and nearly all pinned domains leak cookie values, including login cookies, due to poorly understood interactions between HTTP cookies and the same-origin policy. Our results highlight the complexity of deploying even conceptually simple security upgrades on the modern web.

## 1. Introduction
HTTPS, which layers HTTP traffic over the TLS/SSL encrypted transport protocols, is the dominant protocol for securing web traffic. Despite its cryptographic robustness, the primary issue has been inconsistent and incomplete deployment. Browsers must support a mix of HTTP and HTTPS connections, enabling network attackers to perform stripping attacks, where they downgrade a victimâ€™s connection to insecure HTTP despite the availability of HTTPS at both the server and client.

The main countermeasure against HTTPS stripping is strict transport security (HSTS), which instructs browsers to access specific domains only via HTTPS. This policy can be specified dynamically using an HTTP header or preloaded by browsers for popular domains. While HSTS is straightforward in concept, its interaction with other browser security features, such as the same-origin policy and HTTP cookie protections, can lead to deployment errors that allow attackers to steal sensitive data without compromising HTTPS itself.

Beyond HTTPS stripping, there are growing concerns about the weaknesses in the certificate authority (CA) system. The discovery of commercial software for compelled certificates and high-profile compromises of trusted CAs have spurred interest in defending against rogue certificates. Public-key pinning, the only deployed defense, allows browsers to connect to specific domains only if one of a designated set of keys is used. This can pin a domain to specific end-entity keys, CAs, or a combination of both. Currently, key pinning is only deployed as a preloaded policy in Chrome and Firefox, with plans for dynamic header-based pins.

Despite being in early stages, the deployment of these technologies is sufficient to draw meaningful lessons. In this work, we report on the first comprehensive survey of HSTS and key pinning. Using OpenWPM, we crawl the list of domains with preloaded security policies in Firefox and Chrome, as well as the top million most visited domains from Alexa. We examine both static code and dynamically generated traffic to catalog common security bugs. Table I summarizes these errors, providing the first published evidence of their occurrence in the wild. This knowledge is valuable for administrators seeking to deploy HSTS and key pinning securely.

## 2. Overview of Web Security Technologies
The core protocols of the World Wide Web, HTTP and HTML, were not designed with security in mind. As a result, new security technologies have been added to the web platform, often weakened by backward-compatibility considerations. This section provides an overview of relevant web security concepts.

### 2.1. HTTPS and TLS/SSL
HTTPS, or "HTTP over TLS," combines HTTP with the TLS (Transport Layer Security) protocol to provide confidentiality, integrity, and authenticity. Most HTTPS implementations also support the older SSL v3.0 for backward compatibility, despite its cryptographic weaknesses. The goals of TLS are to protect against eavesdroppers, active network adversaries, and to authenticate parties using certificates. The main adversary in TLS is the man-in-the-middle (MitM) attacker, who can intercept, modify, block, or redirect traffic.

#### 2.1.1. Certificates and Certification Authorities
HTTPS binds the communication channel to the legitimate server for a given domain using server certificates. Names are bound at the domain level, and the highest-level non-public domain is referred to as the "base domain." For example, for `www.example.com`, the base domain is `example.com`. HTTPS clients verify that the common name in the server's certificate matches the domain for each request. If the name does not match or the certificate is expired, malformed, or signed by an untrusted CA, the client typically shows a warning. Browser vendors have made these warnings more intrusive, reducing click-through rates and improving security.

### 2.2. Strict Transport Security (HSTS)
Many websites support both HTTP and HTTPS, allowing active network attackers to downgrade connections to plain HTTP. To counter this, HSTS was proposed, enabling servers to request that clients communicate only over HTTPS. Once set, the user agent must refuse to send any traffic to the domain over plain HTTP. Any request that would otherwise use HTTP is upgraded to HTTPS. The HSTS specification also recommends that any TLS error should result in a hard fail, and that browsers disable the loading of insecure resources from an HSTS-enabled page. By default, HSTS is declared for a specific fully-qualified domain name, with an optional `includeSubDomains` directive that applies the policy to all subdomains.

## 3. Methodology
We use OpenWPM to perform realistic crawling of the list of domains with preloaded security policies in Firefox and Chrome, as well as the top million most visited domains from Alexa. We examine both static code and dynamically generated traffic to identify common security bugs. Table I summarizes these errors, providing the first published evidence of their occurrence in the wild.

## 4. Findings
Our findings highlight several common security bugs in the deployment of HSTS and key pinning. These include:
- Preloaded HSTS without dynamic HSTS
- Erroneous dynamic HSTS configuration
- Pinned sites with non-pinned active content
- Pinned sites with non-pinned passive content
- Cookies scoped to non-pinned subdomains
- Cookies scoped to non-HSTS subdomains

These errors can lead to various security implications, such as the possibility of HTTPS stripping, data theft with a rogue certificate, and cookie theft by active network attackers.

## 5. Discussion
Our findings highlight the underlying causes of these errors, including insufficient flexibility and a lack of sensible defaults in the specifications for HSTS and key pinning. These lessons are timely given the ongoing research and development of new proposals for upgrading HTTPS security.

## 6. Conclusion
This study provides the first comprehensive survey of HSTS and key pinning, identifying common security bugs and their implications. Our findings are valuable for administrators seeking to deploy these security features securely. The complexity of the modern web makes even conceptually simple security upgrades challenging to implement in practice.

---

**Table I: Summary of Main Vulnerabilities Found**

| Error | Section | Prevalence | Studied Domains | Security Implications |
|-------|---------|------------|-----------------|-----------------------|
| Preloaded HSTS without dynamic HSTS | IV-E | 34.6% | 349/1,008 | HTTPS stripping possible on old browsers |
| Erroneous dynamic HSTS configuration | IV-E | 59.5% | 7,494/12,593 | HTTPS stripping possible |
| Pinned site with non-pinned active content | V | 3.0% | 8/271 | Data theft with a rogue certificate |
| Pinned site with non-pinned passive content | V | 55.6% | 5/9 | Page modifications with a rogue certificate |
| Cookies scoped to non-pinned subdomains | VI-C | 3.0% | 8/271 | Cookie theft with a rogue certificate |
| Cookies scoped to non-HSTS subdomains | VI-B | 44.4% | 4/9 | Cookie theft by active network attacker |
| Cookies scoped to non-HSTS subdomains | VI-B | 1.8% | 5/271 | Cookie theft by active network attacker |
| Cookies scoped to non-HSTS subdomains | VI-B | 47.8% | 2,460/5,099 | Cookie theft by active network attacker |

**Note:**
- **Studied Domains:** 
  - 1,008 domains with preloaded HSTS
  - 12,593 top 1M domains attempting to set HSTS
  - 271 base domains with preloaded pins
  - 9 non-Google base domains with preloaded pins