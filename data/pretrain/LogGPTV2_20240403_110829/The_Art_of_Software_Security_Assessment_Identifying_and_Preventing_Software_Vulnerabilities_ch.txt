    sm_mbdb_terminate(); 
    /* reset group permissions; these can be set later */ 
    emptygidset[0] = (to_real_uid || RunAsGid != 0) 
        ? RunAsGid : getegid(); 
    if (setgroups(1, emptygidset) == -1 && geteuid() == 0) 
    { 
        syserr("drop_privileges: setgroups(1, %d) failed", 
               (int) emptygidset[0]); 
        rval = EX_OSERR; 
    } 
The Art of Software Security Assessment - Identifying and Preventing Software Vulnerabilities 
502 
    /* reset primary group and user ID */ 
    if ((to_real_uid || RunAsGid != 0) && 
        EffGid != RunAsGid && 
        setgid(RunAsGid) pw_dir) == -1) 
              iderror(lport, fport, s, errno); 
          /* 
The Art of Software Security Assessment - Identifying and Preventing Software Vulnerabilities 
506 
           * Here we set ourself to effectively be the user, 
           * so we don't open any files we have no permission 
           * to open, especially symbolic links to sensitive 
           * root-owned files or devices. 
           */ 
      seteuid(pw->pw_uid); 
      setegid(pw->pw_gid); 
... 
This code first calls seteuid() to take on the user's privileges. It then calls setegid() 
to take on the caller's effective group ID, but this call fails because the program has 
relinquished its superuser privileges. 
Using More Than One Account 
To understand this problem, consider a daemon that needs to use more than one user 
account. (This example is based on one provided by Jan Wolter, a software designer 
that wrote an interesting paper entitled "Unix Incompatibility Notes: UID Function 
Setting," available at www.unixpapa.com/incnote/setuid.html.) Here's an example of 
how it might be implemented: 
    /* become user1 */ 
    seteuid(user1); 
    process_log1(); 
    /* become user2 */ 
    seteuid(user2); 
    process_log2(); 
    /* become root again */ 
    seteuid(0); 
The intent of this code is to do some processing as user1, and then assume the 
identity of user2 and do further processing. This implementation is flawed, however, 
because the call to seteuid(user2) fails because the program's effective user ID is no 
longer 0; it's user1. Correct code would have a seteuid(0) before the seteuid(user2) 
call. 
Auditing Privilege-Management Code 
Now that you have seen a variety of vulnerabilities in code running with special 
privileges, you can focus on a method for auditing how those privileges are managed 
The Art of Software Security Assessment - Identifying and Preventing Software Vulnerabilities 
507 
throughout the application's lifespan. You can use the steps in the following sections 
to help you decide whether privilege management has been implemented correctly 
and adequately inhibits users' ability to exploit the application. You consider two main 
cases: an application that intends to drop privileges permanently and an application 
that intends to drop privileges temporarily. 
Permanent Dropping of Privileges 
Some programs run with root privileges and want to discard these root privileges 
permanently. When auditing an application that runs in a privileged context and you 
encounter this scenario, you need to address the following points: 
Make sure the code that's going to drop privileges permanently is running with 
an effective user ID of 0. If it's not, it probably won't be able to drop privileges 
effectively. Look for possible unexpected code paths where the program might 
temporarily drop privileges and then permanently drop privileges without 
restoring temporary privileges first. 
If supplemental groups are potentially unsafe, make sure they are cleared 
with setgroups(). Again, setgroups() works only when running with an 
effective user ID of 0. 
Make sure the real group ID, the saved set-group-ID, and the effective group 
ID are set to an unprivileged group, usually done with setgid(getgid()). Look 
for code that mistakenly uses setegid() to try to drop privileges. 
Make sure the real user ID, the saved set-user-ID, and the effective user ID 
are set to an unprivileged user, usually done with setuid(getuid()). Keep an 
eye outfor code that mistakenly uses seteuid() to try to drop privileges. 
Make sure the privileged groups and supplemental groups are dropped before 
the process gives up its effective user ID of root. Otherwise, the program is 
likely to expose privileged group credentials. 
There are also programs that run without root privileges but want to discard one set 
of privileges permanently; for those programs, check the following points: 
The programmer can't modify groups with setgroups(), as this function works 
only for superusers. If the program requires this functionality but doesn't have 
root privileges, it has a design flaw. 
Programmers run into difficulty when using the setgid(getgid()) idiom 
because it probably leaves the saved set-group-ID set to a privileged group. 
You can suggest the use of setregid(getgid(), getgid()) or 
setresgid(getgid(), getgid(), getgid()), which sets all three group IDs to 
the real group ID. This method doesn't work in older versions of OpenBSD, 
however. You can instead suggest using setgid(getgid()) twice in a row to 
clear the saved set-group-ID. 
Similarly, developers run into difficulty using the setuid(getuid()) idiom 
because it probably leaves the saved set-user-ID set to a privileged user. 
The Art of Software Security Assessment - Identifying and Preventing Software Vulnerabilities 
508 
setreuid(getuid(), getuid()) or setresuid(getuid(), getuid(), getuid()) 
should work to set all three user IDs to the real user ID. This method doesn't 
work in older versions of OpenBSD, but you can instead suggest using 
setuid(getuid()) twice in a row. 
Temporary Dropping of Privileges 
If programs need to drop their privileges temporarily, check for the following: 
Make sure the code drops any relevant group permissions as well as 
supplemental group permissions. 
Make sure the code drops group permissions before user permissions. 
Make sure the code restores privileges before attempting to drop privileges 
again, either temporarily or permanently. 
Think about the consequences of changing the effective user ID for signals, 
debugging APIs, and special device files. These issues are discussed in more 
depth in this chapter and Chapter 10(? [????.]), "UNIX II: Processes." Signals 
are dealt with separately in Chapter 13(? [????.]), "Synchronization and 
State." 
Function Audit Logs for Privileged Applications 
As a useful auditing aid, you might find it advantageous to note in your function audit 
logs (described in Chapter 7(? [????.]), "Program Building Blocks") the privileges that 
each function runs with when auditing applications that switch privilege contexts. This 
is as simple as adding in an additional two entries for a function (See Table 9-5). 
Table 9-5. Function Audit Log Addition 
User Privileges 
RUID=user, EUID=root, SUID= 
Group Privileges RGID=users, EGID=users, SGID=users, SUPP= 
The example indicates both the user and group privileges in effect when the program 
is run. RUID, EUID, and SUID stand for "Real UID", "Effective UID", and "Saved set 
UID" respectively. The next row uses RGID, EGID, SGID, and SUPP to stand for "Real 
GID", "Effective GID", "Saved set GID", and "Supplemental Groups" respectively. You 
also need to add to your notes for the function if it changes privileges throughout the 
course of the function, and in which cases it will change privileges. This little addition 
to a standard audit log allows you to quickly and accurately assess whether resource 
accesses within the function are potentially dangerous or not. 
Note 
The Art of Software Security Assessment - Identifying and Preventing Software Vulnerabilities 
509 
You saw that the privilege management API can behave differently on different UNIX 
systems, and, as such, you might not be able to correctly assess what the user and 
group privileges will be for a particular function. In this case, you also should make a 
note in the function audit log if non-portable privilege API usage might cause the 
application to behave differently on other OSs. 
Privilege Extensions 
The UNIX privilege model often comes under criticism because of its all-or-nothing 
design. If you're the root user, you have the unrestricted ability to wreak havoc on the 
system because you're granted access to any resource you want. To understand why 
this is a problem, return to one of the examples used in the discussion of user IDs. 
The ping program requires root privileges to run because it needs to create a raw 
socket. If a vulnerability is discovered in ping that is exploitable before it drops 
privileges, not only can users create a raw socket, but they can also modify any file on 
the system, potentially load kernel modules to hijack system functionality, delete log 
files, and steal sensitive data. So any program that needs to perform an operation 
requiring special privileges essentially puts the entire system's security at stake. 
Several technologies, discussed in the following sections, have been developed to 
combat this age-old problem. 
Linux File System IDs 
One set of IDs not mentioned previously is relevant to code running on a Linux system. 
In Linux, each process also maintains a file system user ID (fsuid) and a file 
system group ID (fsgid). These IDs were created to address a potential security 
problem with signals. If you recall, when a daemon running as root temporarily drops 
privileges to assume a user's role, it sets its effective user ID to the ID of the less 
privileged user. 
This behavior can lead to security issues because a process's effective user ID is used 
in security checks throughout the kernel. Specifically, it's used to determine whether 
certain signals can be sent to a process from another process. Because of this 
checking, when the daemon assumes the effective user ID of a local user on the 
machine, that user might be able to send signals and perhaps even attach a debugger 
to the daemon. 
To address this issue, the Linux kernel programmers created the fsuid and fsgid to be 