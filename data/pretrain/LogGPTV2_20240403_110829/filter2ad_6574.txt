# Title: Towards a Data-Centric Approach for the Design and Verification of Cryptographic Protocols

## Authors
- Luca Arnaboldi
- Roberto Metere

## Abstract
We introduce MetaCP, an automated tool that simplifies the design and verification of security protocols through a graphical interface. This interface can be viewed as a modern editor for a non-relational database, where the data are protocols. The protocol information is stored in XML, with a fixed format and syntax designed to contain all necessary details. The XML serves as a nearly semanticless language, where different plugins provide strict semantics, modeling the protocol into various back-end verification languages. In this paper, we demonstrate the effectiveness of this approach by showing how easily MetaCP can design and verify a protocol using a Tamarin prover plugin. While similar tools, such as AVISPA, have been proposed, MetaCP offers a smaller learning curve and greater ease of use, even for non-security professionals, combined with the flexibility to integrate with state-of-the-art verification tools.

## Keywords
- Security and privacy
- Cryptography
- Formal security models
- Logic and verification
- Security protocols

## 1. Introduction
When communication travels through insecure channels, as it often does on the Internet, ensuring the security of sensitive information is crucial. Communication rules are defined by protocol implementations. In this context, attackers and protocols continuously evolve, with protocols improving to counter new threats. Before implementing a protocol, it is essential to ensure its design is not flawed. Formal methods for protocol verification, such as ProVerif, Tamarin, and EasyCrypt, have proven effective. However, there is a significant gap between these formal languages and the actual protocols. For those not expert in a specific language, translating a protocol specification from natural language to a formal tool is challenging. Even more difficult is reverting from the model back to the original specification, as the model may lack some information.

What is desirable is a single, structured interface that is easy to understand and visualize, and can automatically transform a design into various back-end verification options, ensuring correctness and consistency. We illustrate this data-centric approach in Figure 1. In our approach, specifications are stored in a database containing all required information, and the semantics are determined only when a spoken, visual, or formal language specification is created from it. This central source of information would link the different (and disjointed) semantics used in various contexts, enhancing the rigor of the protocols.

To showcase the effectiveness of our approach, we present MetaCP, a tool that guides designers through the process of creating and verifying security protocols, allowing them to rely on automatic reasoning at each step.

## 2. Design of Secure Protocols
The design of a protocol typically follows three intertwined steps:
1. A graphical representation of the protocol is sketched, showing the involved parties and the flow.
2. Message contents and mathematical requirements are set out.
3. Security goals are decided, often in natural language.

The processes of designing the protocol and employing a formal verification tool are often separate and performed by different people. State-of-the-art tools like Tamarin and ProVerif have improved over the years but do not provide a means to relate to the entire design process, impacting usability and effectiveness. It is very difficult for both casual users and security professionals to ascertain the truthfulness of the analysis and its relation to the original protocol.

One drawback of the current process is that each tool uses a different syntax, requiring designers to interpret various idioms for verification. This leads to different results for the same protocol. Projects like AVISPA have attempted to unify verification by presenting a single language of specification and automating the translation into various back-end tools. However, research shows that protocols found secure by AVISPA were later found flawed in more modern tools, highlighting the need for easier integration of newer tools.

Another attempt to standardize protocol design is ProScript, which proposes a high-level language for specifying security protocols. ProScript can automatically interpret from high-level specifications to applied PI calculus, verifiable in ProVerif and CryptoVerif. While ProScript aligns with our desired outcome, its new definition language limits expressiveness and restricts usage to applied PI calculus-based tools.

Both AVISPA and ProScript make it easier to verify and design protocols, but their reliance on a single semantic of translation makes it difficult to expand to newer tools with different semantics. Our approach, using basic semantics and enforcing specific ones in the target language generation process, is more extendable and promising. This approach aids rather than substitutes the human process of modeling reality into a mathematical representation.

## 3. From Specification to Verification
MetaCP provides a graphical design interface (Figure 2) that allows protocols to be drawn easily through a drag-and-drop interface. The interface acts as a database editor, enabling users to specify variables, functions, message flow, and equational theories. It allows embedding all the knowledge required to describe a protocol, providing more rigor than symbolic model checkers and natural language specifications.

Once the protocol is specified, the graphical representation is saved as a structured XML containing all the necessary information. This XML can be seen as a basic language with syntax and minimal semantics, serving as a Protocol Specification and Verification (PSV) database. Non-experts can create and modify protocols through a flexible and easy-to-use graphical interface, and changes can be visualized back into the interface. The PSV has little to no semantics, aimed at providing information for the underlying plugins. Different tools work differently, so one semantic might work well for one tool but fail to capture the requirements of another.

A plugin system is devised to work with the PSV, where each plugin enforces the desired semantics of the target language. This allows for scalability as new tools and models evolve. By having a PSV, you can store more information than required by symbolic model checkers, enabling automated conversion to natural language and even program code. This support is currently basic in MetaCP and will be expanded in future development.

## 4. Experiment Results
The current development state of MetaCP supports a single plugin specifically intended to replicate the semantics of Tamarin. Tamarin uses multiset rewriting rules to specify the protocol and provides an efficient semi-automatic verification engine. The plugin provides a fully automated interpreter from PSV code to Tamarin code. To demonstrate the efficacy of our plugin, we designed three protocols: i) Diffie-Hellman key exchange (DHKE), ii) Needham-Schroeder (NSP, asymmetric), and iii) the Needham-Schroeder-Lowe (NSLP). Our intent was to compare the results from the automatically generated models to the manually generated official Tamarin examples.

Using the interface and some manual intervention, we quickly and automatically generated the three protocols, then exported them to Tamarin. The exported models were well-formed and passed the correctness lemmas. We also manually added other security goals to compare with the provided files. The comparison showed the same attacks and proofs of security. Our tool significantly reduces the required work by integrating security goals into the generated output, reducing the time and expertise needed to write Tamarin code. In our experimentation, we found that some protocols in Tamarin need extra help to reduce the state space, and breaking down messages led to faster verification. Adding two lines and the lemmas, we matched the security results of the official Tamarin examples written by experts (Table 1).

## 5. Future Work
We provide a high-level design interface to design and specify security protocols, with automated translation from design to knowledge base to formal specification in Tamarin. Although this work is still immature, the initial results are promising. We were able to design and verify protocols more efficiently and with fewer errors. Future work will involve enriching the tool with novel plugins targeting common protocol tools, including diverse languages such as EasyCrypt. We aim to make the tool open-source for anyone to use and extend, including adding different plugin options for the same backends.

Standardizing the methodology for designing future and current protocols is a worthwhile exercise. Formally verified models provide the reliability needed to focus on implementation-level issues. We see the data-centric methodology of MetaCP as a promising example towards this approach.

## Acknowledgements
This research is supported by The Alan Turing Institute, an Innovate UK grant to Newcastle University through the e4future project, Arm Ltd., and EPSRC under grant EP/N509528/1.

## References
[1] Alessandro Armando, David Basin, et al. 2005. The AVISPA tool for the Automated Validation of Internet Security Protocols and Applications. In International Conference on Computer Aided Verification. Springer, 281–285.
[2] Luca Arnaboldi and Hannes Tschofenig. 2019. A Formal Model for Delegated Authorization of IoT Devices Using ACE-OAuth. In OAuth Security Workshop.
[3] Gilles Barthe, Benjamin Grégoire, Sylvain Heraud, and Santiago Zanella Béguelin. 2011. Computer-aided security proofs for the working cryptographer. In Annual Cryptology Conference. Springer, 71–90.
[4] David Basin, Jannik Dreier, Lucca Hirschi, Saša Radomirovic, Ralf Sasse, and Vincent Stettler. 2018. A formal analysis of 5G authentication. In ACM SIGSAC Conference on Computer and Communications Security. 1383–1396.
[5] Bruno Blanchet and others. 2001. An Efficient Cryptographic Protocol Verifier Based on Prolog Rules. In CSFW, Vol. 1. 82–96.
[6] Carlos Caleiro, Luca Viganò, and David Basin. 2006. On the semantics of Alice&Bob specifications of security protocols. TCS 367, 1-2 (2006), 88–122.
[7] Feng Hao, Roberto Metere, Siamak F Shahandashti, and Changyu Dong. 2018. Analyzing and patching SPEKE in ISO/IEC. IEEE Transactions on Information Forensics and Security 13, 11 (2018), 2844–2855.
[8] Nadim Kobeissi, Karthikeyan Bhargavan, and Bruno Blanchet. 2017. Automated verification for secure messaging protocols and their implementations: A symbolic and computational approach. In IEEE EuroS&P.
[9] Simon Meier, Benedikt Schmidt, Cas Cremers, and David Basin. 2013. The TAMARIN prover for the symbolic analysis of security protocols. In International Conference on Computer Aided Verification. Springer, 696–701.
[10] Roberto Metere and Changyu Dong. 2017. Automated Cryptographic Analysis of the Pedersen Commitment Scheme. In International Conference on Mathematical Methods, Models, and Architectures for Computer Network Security. Springer, 275–287.