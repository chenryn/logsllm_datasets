TL;DR: The versioned API types should be self-contained package. For example,
the file "pkg/api/v1beta3/types.go" is not self contained and contains
tendrils to other internal types (see below). This is somewhat cruddy for
other clients wanting to import minimal source from k8s just to call its APIs.
It'd be nice to have a single package to import to get the API object
definitions (i.e. for json unmarshalling, etc).
Observed outside of package depencies in "pkg/api/v1beta3/types.go":
"pkg/runtime" - The "List" type contains a field "Items
[]runtime.RawExtension". "RawExtension" is a trivial struct containing only a
"[]byte".
"pkg/types" - Various places uses the "types.UID" struct, which is an alias to
"string".
"pkg/util" - Two types from this package are used: "util.Time" and
"util.IntOrString". The former is a wrapper on Go's Time object, with extra
functions for custom JSON serialization (RFC3339 compliant) in
"pkg/util/time.go". "IntOrString" is the dual-mode struct holding an int value
or a string ("pkg/util/util.go").
"pkg/api/resource" - The "ResourceList" object is a map whose keys are
"resource.Quantity" objects. The "Quantity" object contains a field to
"inf.Dec", which is an infinite precision decimal package imported from
"speter.net/go/exp/math/dec/inf". This is the only package which is external
to k8s.
I know that some of the json annotations added are to support swagger, but the
go->swagger->go thing seems like an unnecessary complexity.