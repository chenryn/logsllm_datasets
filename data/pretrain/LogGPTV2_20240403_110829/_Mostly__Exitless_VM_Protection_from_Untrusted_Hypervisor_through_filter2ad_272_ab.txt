level EPT pages causes 4 extra ring crossings. As shown in
Table 2, there are at most 6 times as many ring crossings as
that in Xen for EPT violation handling.
I/O Operation: CloudVisor only supports emulated I/O de-
vices. It intercepts all interactions among guest VM, Xen hy-
pervisor and Dom0 to do encryption or decryption (Figure 2
(b)). Therefore, it causes at least twice ring crossings. Since
the Dom0 is untrusted and unable to access guest‚Äôs memory,
it triggers one VM exit when it reads (writes) data from (to)
the guest memory when handling I/O. That means the whole
I/O operation causes more than twice as many ring crossings
as that in Xen, as shown in Table 2.
2.3 Advances in Hardware Virtualization
There are two trends in the recent advances of the In-
tel hardware virtualization technology 1. The Ô¨Årst is the
lightweight context switch. Current hardware supports a VM-
FUNC [2] instruction that provides VM functions for non-
root guest VM to invoke without any VM exits. EPTP switch-
ing is the only VM function currently supported by the hard-
ware, whose function ID is 0. It allows a VM to load a new
value for its EPTP and thus establishes a new EPT, which
controls the subsequent address translation from GPA (guest
physical address) to HPA (host physical address). The EPTP
can only be chosen from an EPTP list conÔ¨Ågured in advance
by the hypervisor.
The procedure for using VMFUNC is as follows. In the
preparation stage, the hypervisor allocates an EPTP list (a
1We do not Ô¨Ånd any similar hardware trends on other platforms like
ARM and AMD. But the CloudVisor-D approach is applicable to these plat-
forms when similar hardware features are available.
USENIX Association
29th USENIX Security Symposium    1697
4-KBytes page), which contains at most 512 valid EPTP en-
tries. Then the address of the list is written into the guest‚Äôs
VMCS (Virtual Machine Control Structure). During run time,
the guest invokes the VMFUNC instruction and uses an
EPTP entry index as the parameter. Afterwards, the hardware
searches the list and installs the target EPT. If the index is
larger than 511 or the selected EPTP entry points to an in-
valid EPT structure, a VM exit occurs and notiÔ¨Åes the hy-
pervisor. Figure 3 is an example of the VMFUNC workÔ¨Çow.
When Line 1 and Line 2 are executed, the EPT pointer in
the guest‚Äôs VMCS will be changed to the EPTP0 and EPTP2.
If the argument of VMFUNC is an index pointing to an in-
valid EPT structure as Line 3 shows, it will trigger a VM
exit waking up the hypervisor.
‚Ä¶‚Ä¶
‚Ä¶‚Ä¶
‚Ä¶‚Ä¶
VM
‚ë†: vmfunc(0x0, 0x0); 
‚ë°: vmfunc(0x0, 0x2); 
‚ë¢: vmfunc(0x0, 0x4); 
)XQF,'LV[VZLWFKWR(373
)XQF,'LV[VZLWFKWR(373
)XQF,'LV[(UURU
EPT Pointer
EPT 0
EPT 1
EPT 2
‚Ä¶‚Ä¶
EPT 511
VMCS
EPTP 0
EPTP 1
EPTP 2
0
0
‚Ä¶‚Ä¶
‚Ä¶
…†
…°
…¢
EPTP 511
EPTP List
ERROR
Figure 3: The workÔ¨Çow of VMFUNC.
The EPTP switching function has four essential character-
istics. First, the EPTP switching provided by VMFUNC is
faster than a VM exit (134 cycles vs. 301 cycles on an Intel
Skylake Core i7-6700K processor). Second, when the VPID
(Virtual-Processor IdentiÔ¨Åer) is enabled, VMFUNC will not
invalidate any TLB entry. The TLB entries of one EPT are
different from those of other EPTs [27]. Thus, there is no
need to Ô¨Çush the TLB after invoking VMFUNC. Third, the
VMFUNC instruction can be invoked at any protection ring
in non-root mode, including Ring 3 (user mode). Fourth, the
VMFUNC instruction only changes the EPTP value and does
not affect other registers, especially the CR3 register, pro-
gram counter and stack pointer.
The second trend is to allow a guest to handle its own VM
exits. One signiÔ¨Åcant sign of this trend is the new virtualiza-
tion exception (VE) [2]. If the VE feature is enabled, an EPT
violation can be transformed into an exception (Vector 0x14)
without any VM exit. Before using the VE, the hypervisor
conÔ¨Ågures the guest‚Äôs VMCS to enable virtualization excep-
tion support and registers a VE information page into VMCS.
The guest kernel should prepare a corresponding handler for
the new exception and register it into IDT (Interrupt Descrip-
tor Table). During runtime, most EPT violations will be trans-
formed into virtualization exceptions. The VE handler can
know the GPA and GVA (guest virtual address) that cause
this exception by reading the VE information page, which is
Ô¨Ålled by the hardware.
3
g
n
R
i
0
g
n
R
i
0
g
n
R
i
e
d
o
m
t
o
o
r
-
n
o
N
e
d
o
m
t
o
o
R
VM
SubVisor
Guardian-VMs
Initialization
Isolation
RootVisor
Remote Call
Local Call
TCB
Figure 4: The architecture of CloudVisor-D.
3 CloudVisor-D Approach
3.1 System Overview
For the sake of performance and security, CloudVisor-D
has two main goals:
‚Ä¢ Goal-1: To reduce the number of VM exits caused by
the nested virtualization.
‚Ä¢ Goal-2: To achieve the same level of security as the
nested virtualization.
Prior nested virtualization designs intercept all commu-
nications between guest VMs and the hypervisor to limit
the hypervisor‚Äôs ability to directly read or write guest VMs‚Äô
CPU registers, memory pages and disk storages. It conse-
quently incurs large overheads, as we have demonstrated in
Section 2.2. The main contribution of CloudVisor-D is to
delegate intensively used VM operations to an agent (the
Guardian-VM) for each VM in non-root mode to reduce the
large number of VM exits (Goal-1). CloudVisor-D provides
a para-virtualization model for guest VMs to invoke these
operations proactively.
Figure 4 is the architecture of CloudVisor-D. CloudVisor-
D architecture consists of a tiny nested hypervisor (we call it
RootVisor in our paper) in root mode and a set of Guardian-
VMs in Ring 0 of non-root mode. The hypervisor is deprivi-
leged to non-root mode and called SubVisor for convenience.
The tiny RootVisor has full system privilege and manages all
the important data structures such as EPTs. It also sets up a
Guardian-VM for each guest VM. All interactions between
a guest VM and the SubVisor pass through the correspond-
ing Guardian-VM or the RootVisor. The Guardian-VM is re-
sponsible for forwarding and checking most VM operations
in non-root mode while the RootVisor is occasionally awak-
ened up to handle some inevitable VM exits in root mode
such as external interrupts.
A Guardian-VM is not a full-Ô¨Çedged VM but only contains
some service handlers. It supports two kinds of interfaces for
guest VMs: the remote call and the local call. Neither of the
interfaces causes any VM exit. By using the remote call, a
guest can request the SubVisor‚Äôs services with the help of
the Guardian-VM, including the hypercalls and EPT viola-
tion handlers. By using the local call, a guest can request the
1698    29th USENIX Security Symposium
USENIX Association
local helper functions in the Guardian-VM. We provide I/O
related helper functions that encrypt, decrypt and check data
integrity of I/O data.
To achieve (Goal-2), we regard CloudVisor-D as a refer-
ence monitor [14], which means it should satisfy the follow-
ing two security properties [29, 30] 2.
‚Ä¢ Tamperproof: CloudVisor-D isolates the RootVisor
and each Guardian-VM and makes their states (includ-
ing memory and CPU registers) unmodiÔ¨Åable by the
corresponding guest VM and the SubVisor.
‚Ä¢ Complete Mediation: CloudVisor-D (including the
tiny RootVisor and the Guardian-VM) interposes all
communications between guest VMs and the SubVisor.
To support the tamperproof property, CloudVisor-D guar-
antees the authenticated booting procedure of the RootVisor
by leveraging the trusted platform module (TPM) [16] and
users could remotely attest the integrity of the RootVisor.
Furthermore, the memory address spaces of the RootVisor
and all Guardian-VMs are isolated from guest VMs and the
SubVisor (Section 4.1).
To enforce the complete mediation property, we propose
a series of techniques (Section 4.4) to ensure that all com-
munications in non-root mode have to be intercepted and
checked by the Guardian-VM while the RootVisor intercepts
and monitors the left communication paths that cause VM ex-
its.
Based on the two properties, a Guardian-VM is able to
handle VM operations securely in non-root mode. First, one
Guardian-VM provides to its VM a limited number of lo-
cal and remote calls that the VM can invoke (Section 4.5).
Second, we introduce a technique to handle EPT violations
securely in non-root mode, which guarantees that updates
to a VM‚Äôs EPT by the SubVisor should be veriÔ¨Åed by the
Guardian-VM before coming into effect (Section 5). Finally,
Guardian-VMs protects the privacy and integrity of their
guest VMs‚Äô I/O data (Section 6).
3.2 Threat Model and Assumptions
The only software components CloudVisor-D trusts are
the RootVisor and the Guardian-VMs. It also trusts the cloud
provider and the hardware platform it runs on. CloudVisor-D
distrusts the vulnerable commodity hypervisor, which may
try to gain unauthorized access to the guest‚Äôs CPU states,
memory pages, and disk data. CloudVisor-D does not trust
the guest VM either since the guest VM can misbehave like
trying to escalate its privilege level and attacking other co-
located VMs and even the hypervisor. We assume that the
guest does not voluntarily reveal its own sensitive data and
has already protected sensitive network data via encrypted
2In fact, the reference monitor model has a third property called ‚ÄúveriÔ¨Å-
able‚Äù. Due to the small TCB of CloudVisor-D, it is feasible to completely
test and verify CloudVisor-D, which is our future work.
message channels such as SSL. Finally, we do not consider
physical attacks as well as side-channel attacks between dif-
ferent VMs3.
4 Guardian-VM
In the traditional nested virtualization, a guest VM fre-
quently interacts with the SubVisor to ask it to do VM opera-
tions, which forces the VM to trap into the SubVisor. These
operations include hypercalls, EPT violation handling and
I/O operations. CloudVisor-D provides a Guardian-VM for
each guest VM to help them request SubVisor‚Äôs services
without VM exits.
When the RootVisor is booted, it downgrades the SubVi-
sor to non-root mode and creates a SubVisor-EPT for the Sub-
Visor. Then the address translation of SubVisor is controlled
by page table (from GVA to GPA) and SubVisor-EPT (from
GPA to HPA). The RootVisor removes all its own memory
from the SubVisor-EPT to isolate its physcial address space
from the SubVisor. The SubVisor is unaware of the existence
of the SubVisor-EPT.
Although the SubVisor is in non-root mode, it is still al-
lowed to create guest VMs. When creating a VM, the Sub-
Visor sets up all management data structures for this VM,
including an EPT. After that, the SubVisor executes a privi-
leged instruction (i.e., VMLAUNCH in the x86 architecture)
to start this new VM, which causes a VM exit trapping the
SubVisor to the RootVisor. The RootVisor will not install the
EPT initialized by the SubVisor for the guest VM. Instead,
the RootVisor treats the original EPT as a shadow EPT and
creates a new EPT (called Guest-EPT) by copying all address
mappings from the shadow EPT. Therefore, the Guest-EPT
maintains the same GPA to HPA mappings as the shadow
EPT. Then SubVisor also initializes all other necessary data
structures for the VM. After Ô¨Ånishing the initialization, the
SubVisor installs the Guest-EPT for the guest VM while leav-
ing the shadow EPT unused. The shadow EPT is made read-
only for the SubVisor by conÔ¨Åguring the SubVisor-EPT. We
will discuss more details about the shadow EPT in Section 5.
When the RootVisor initializes a VM, it builds a Guardian-
VM for this VM as well. The Guardian-VM has its own
ETP called Guardian-EPT. The RootVisor maps code and
data pages into the Guardian-VM space by conÔ¨Åguring this
Guardian-EPT. To isolate the memory of the VM and its
Guardian-VM from the SubVisor, the RootVisor not only re-
moves all mappings associated with the memory of the VM
and its Guardian-VM from the SubVisor-EPT, but also makes
the Guest-EPT and Guardian-EPT inaccessible to the SubVi-
sor.
In the following subsections, we Ô¨Årst introduce how
CloudVisor-D achieves the tamperproof property in Sec-
3We do not consider recent side-channel attacks like Meltdown [42],
Spectre [34] and L1TF [4]. These attacks can be effectively prevented by
CPU vendors‚Äô microcode patches, which are orthogonal to the CloudVisor-
D apporach.
USENIX Association
29th USENIX Security Symposium    1699
tion 4.1. Then we deconstruct the complete mediation prop-
erty into two more detailed invariants in Section 4.2. Sec-
tion 4.3 elaborates two attacks that break the two invari-
ants respectively. Section 4.4 explains two techniques that
CloudVisor-D uses to enforce the two invariants and further
achieve the complete mediation property. Finally, we brieÔ¨Çy
discuss the jump table mechanism in CloudVisor-D.
4.1 Isolating Environment for Guardian-VM
To support the tamperproof property, each Guardian-VM
runs in an execution environment isolated from its corre-
sponding VM and the SubVisor. Because the RootVisor en-
sures that the Guest-EPT and the SubVisor-EPT do not con-
tain any memory mappings belonging to the Guardian-VM,
neither the guest VM nor the SubVisor is able to access the
physical address space of the Guardian-VM. Furthermore,
each Guardian-VM also owns a separate stack, which will
be installed when a VM or the SubVisor switches into the
Guardian-VM. This stack is inaccessible to the guest VM
and SubVisor, which ensures that data stored in the separate
stack cannot be modiÔ¨Åed, especially for the runtime states
and function arguments. To protect the data in registers, the
Guardian-VM clears most general registers to avoid privacy
leakage and retains necessary register values (e.g., general
registers containing SubVisor function arguments) before
switching between a guest VM and the SubVisor.
4.2 Deconstructing the Complete Mediation
Property
A guest VM communicates with the SubVisor through two
paths. The Ô¨Årst one starts with a VM exit and traps to the
RootVisor, which then forwards the control Ô¨Çow to the Sub-
Visor. The other path is forwarded by a Guardian-VM to
the SubVisor in non-root mode. The complete mediation
property requires that CloudVisor-D interposes both of the
two communications paths. The path in root mode is medi-
ated by the RootVisor, which is enforced by existing tech-
niques [20, 72]. For the communication path in non-root
mode, we propose the following invariants which can help
achieve the complete mediation property.
‚Ä¢ Invariant 1. A guest VM must switch to its Guardian-
VM before switching to the SubVisor, and vice versa.
‚Ä¢ Invariant 2. A guest VM (or the SubVisor) enters the
Guardian-VM only through the predeÔ¨Åned entry points
(gates).
Invariant 1 requires that a Guardian-VM intercepts all the
communications in non-root mode. Invariant 2 further speci-
Ô¨Åes that a guest VM or SubVisor enter the Guardian-VM only
through legal gates, which means they cannot directly jump
into other code pages of the Guardian-VM.
4.3 New Attacks to Bypass or Compromise
Guardian-VMs
However, it is difÔ¨Åcult to enforce these invariants. A
straightforward design of the Guardian-VM would enable