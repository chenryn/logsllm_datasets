title:A Methodology for Dependability and Performability Analysis in SAM
author:Tianjun Shi and
Xudong He
A Methodology for Dependability and Performability Analysis in
SAM
Florida International University, Miami, FL 33199
Tianjun Shi, Xudong He
School of Computer Science
{tshi01, hex}@cs.ﬁu.edu
Abstract
Non-functional properties reﬂect the quality of a
software system and are essential for a successful soft-
ware system, but analysis of non-functional properties
is less well studied compared to that of functional prop-
erties. Performance, dependability and performability
are most concerned non-functional properties in life-
critical systems. In this paper, a methodology is pro-
posed to analyze dependability and performability us-
ing a modeling and analyzing framework called SAM.
By incorporating stochastic information into a SAM
model, dependability and performability as well as func-
tional properties can be analyzed at software architec-
ture level using proper analysis techniques under the
uniform SAM framework.
1. Introduction
Functional properties of software systems are the
fundamental requirements for software systems to
achieve correct functional behaviors. Non-functional
properties of software systems, in general, are all other
properties expected in software systems. Widely ac-
cepted non-functional properties include performance,
reliability, availability, security, maintainability, usabil-
ity etc. Reliability, availability, safety and measures
related are also collectively knows as dependability and
a composite measure of performance and dependabil-
ity is called performability. Performance, dependability
and performability are most concerned non-functional
properties in life-critical systems. Functional correct-
ness is fundamental to a software system, while non-
functional properties reﬂect the quality of a system and
are essential to a successful software system. Exten-
sive research work has been done in the ﬁeld of for-
mal methods to validate functional correctness of a sys-
tem, but non-functional properties are less well stud-
ied compared to functionality because of the diﬃculties
in representing and controlling non-functional proper-
ties [23]. In most research work, functional properties
and non-functional properties are separately modeled
and evaluated because of the complexity of integration.
The separation eases the work of modeling, but tends
to inconsistency of models. It is desirable to address
functional and non-functional properties together, for
both scientiﬁc and economic reasons [8]. Therefore, we
are interested in modeling and evaluating both func-
tional and non-functional properties under a uniform
framework called Software Architecture Model (SAM).
SAM is a formal framework for specifying and an-
alyzing software architectures [28].
It supports hier-
archical decomposition and automatic analysis of soft-
ware architectures. A SAM model consists of a set of
compositions and a hierarchical mapping relating the
compositions. A composition in turn consists of mul-
tiple components and connectors, and a set of com-
position constraints. Each component (or connector)
consists of a behavior model and a set of component
(or connector) constraints. A SAM model is said to be
correct if the behavior models satisfy each constraint.
For the formal deﬁnition and description of SAM, refer
to [13]. There are two complement formal methods un-
derlying a SAM model. Petri nets are used to deﬁne the
behavior models of components and connector, while
temporal logic is used to specify the constraints. To
be ﬂexible, the underlying formal foundation of SAM
is not limited to a ﬁxed pair of Petri net and tempo-
ral logic. The selection of a particular Petri net and
temporal logic is based on the application under con-
sideration. For example, real-time Petri nets and real-
time computational tree logic were used to study soft-
ware architectures of real-time systems [28], Predicate
Transition nets (PrT nets) and ﬁrst order linear time
temporal logic were used to specify and verify a com-
munication protocol [24]. Diﬀerent analysis techniques
Proceedings of the 2003 International Conference on Dependable Systems and Networks (DSN’03) 
0-7695-1959-8/03 $17.00 (c) 2003 IEEE
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 12:28:45 UTC from IEEE Xplore.  Restrictions apply. 
and tools have been used to analyze a SAM model to
evaluate various properties. In [28], reachability anal-
ysis technique was used to analyze the timeliness of
a real time system. The symbolic model checker SMV
was used in [24] to verify the functional correctness of a
communication protocol, and the theorem prover STeP
was used in [29].
To date, SAM mainly focuses on functional veriﬁ-
cation. To extend SAM for the analysis of common
non-functional properties, we propose a methodology
for dependability and performability analysis. The ba-
sic idea of this approach is to incorporate stochastic in-
formation into the SAM model. A Stochastic Reward
Net (SRN, a variant of Stochastic Petri Nets, see [7]
for detail) model then can be derived from the SAM
model. The functional correctness can be analyzed
using the techniques mentioned above, and the non-
functional properties are evaluated by solving the de-
rived SRN model. Using this approach, common non-
functional properties like performance, dependability
and performability can be evaluated in SAM.
The rest of the paper is organized as follows. Sec-
tion 2 introduces the related work.
In section 3,
the methodology for dependability and performability
analysis in SAM is presented. An example is given in
section 4 to illustrate the methodology. Conclusions
are drawn in section 5.
2. Related Work
Our work focuses on extending the SAM frame-
work, by using existing techniques and tools, for spec-
iﬁcation and analysis of dependability and performa-
bility so that SAM is allowed to specify and analyze
both functional properties and non-functional proper-
ties. To assess various non-functional properties, dif-
ferent techniques have been developed, e.g., fault-trees
for reliability analysis [21], queuing networks for per-
formance evaluation of computer and communication
systems [1, 22], Stochastic Petri Nets (SPNs) as well
as their variants, as a high level formalism of Markov
Chains, for analysis of dependability and performabil-
ity [7, 20, 17], Stochastic Process Algebras (SPAs) for
performance evaluation [2, 3, 8, 10, 15]. Along with
the techniques, associated tools have also been devel-
oped. For example, GreatSPN [5], SMART [6] and
SPNP [25] are some tools to solve the Markov chains
underlying SPNs. Some tools for SPAs include PEPA
Workbench [10], TwoTowers [2], and TIPPtool [14].
Other tools and environments include ptolemy [4], DE-
PEND [11], and ADEPT [19]. Ptolemy focuses on de-
signing and analyzing hardware/software systems for
embedded applications and allows to choose diﬀerent
models of computation. DEPEND is a functional,
process-based tool for system level dependability analy-
sis. ADEPT uses Colored Petri Net (CPN) to describe
the behavior of each ADEPT module, and evaluates
performance and dependability by solving the Markov
models translated from CPN models.
We are not the ﬁrst attempting to integrate func-
tional veriﬁcation and non-functional evaluation. Gar-
avel and Hermanns [8] combined performance evalu-
ation and functional veriﬁcation by extending a non-
stochastic process algebra with stochastic construction.
The extended process algebra is allowed to express In-
teractive Markov Chain [8], and the speciﬁcation is
evaluated by using the tool set CADP [8]. In TwoTow-
ers [14], performance is evaluated using another SPA—
EMPA [3] (Extended Markovian Process Algebra). Our
idea is similar in general, but we use diﬀerent high level
formalism (SAM) and diﬀerent underlying lower level
formalism (SRN). There is also some research work try-
ing to formalize and extend UML diagrams for non-
functional assessment. For example, in [16], extended
UML statechart diagrams are transformed to SRNs for
dependability analysis, however, functional validation
is not considered.
3. A Methodology for Dependability and
Performability Analysis
In this paper, we use PrT nets as the behavior mod-
eling formalism of the SAM framework. PrT nets are
a class of high level Petri nets. Using the conventions
and deﬁnitions in [13], a PrT net is deﬁned as a tuple
(N, Spec, ins), where N = (P, T, F ) is the net struc-
ture; Spec deﬁnes the used sorts, operations and rela-
tions; and ins = (ϕ, L, R, M0) deﬁnes the mapping of
places to sorts, the labels, the constraint of each tran-
sition, and the initial marking respectively. For a com-
plete deﬁnition of PrT nets to be used in this paper,
refer to [13].
The idea of this methodology is to incorporate
stochastic information into each behavior model de-
ﬁned by a PrT net. Dependability and performability
are evaluated by solving the SRN model derived from
the SAM model with incorporated stochastic informa-
tion. Several solution techniques can be applied to
solve the SRN model by using the SPNP package [25].
The procedure to analyze dependability and performa-
bility of a software system in SAM is as follows.
1. Model the software system in SAM as usual.
Each behavior model is represented by a PrT net, and
each constraint is speciﬁed in temporal logic. Func-
tional properties can be analyzed based on current
SAM model.
Proceedings of the 2003 International Conference on Dependable Systems and Networks (DSN’03) 
0-7695-1959-8/03 $17.00 (c) 2003 IEEE
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 12:28:45 UTC from IEEE Xplore.  Restrictions apply. 
t1
t2
P2
P3
P1
 R(t1) = (x = short)
 R(t2) = (x = medium ∨ x = long)
B
 TYPE = {short, medium, long}
 MSG = STRING 
ϕ(P1) = ϕ(P2) = ϕ(P3) = TYPE × MSG 
 R(t1) = (x = short ∧ RATE = 0)
 R(t2) = (x = medium ∧ RATE = λ1)
           ∨ (x = long ∧ RATE = λ2)
A
C
Figure 1. (a) A PrT net example. (b) The origi-
nal mapping R. (c) The modiﬁed mapping R.
2. Incorporate stochastic information into each be-
havior model based on the non-functional properties to
be analyzed. This is done by adding ﬁring rate to each
transition in behavior models. A ﬁring rate is added
into the constraint of each transition (i.e. the mapping
R in the net inscription), as a special ﬁeld. A ﬁring
rate of each transition can be either ﬁxed or marking
dependent. For example, in the PrT net model shown
in Figure 1(a), place P1 holds three types of messages—
short messages, medium messages and long messages.
As shown in the net inscription of the PrT net (Figure
1(b)), short messages in P1 are sent to P2 by the ﬁr-
ing of transition t1, while medium messages and long
messages are sent to P3 by the ﬁring of transition t2.
Originally, this model does not consider the ﬁring rates
of the transitions. If we want to add stochastic infor-
mation into the model, say, short messages are sent
immediately, while medium messages are sent at rate
λ1 and long message are ﬁring at rate λ2, then a special
ﬁeld RAT E can be added into the constraint of each
transition to reﬂect the ﬁring rates. Figure 1(c) shows
the transition constraints after adding the stochastic
information, where RAT E = 0 represents the transi-
tion ﬁres immediately when it is enabled, just like an
immediate transition in a SPN. The extra stochastic
information in the constraint of a transition does not
aﬀect the enabling and ﬁring rules of this transition.
That is, the new PrT net model has the same seman-
tics with a usual PrT net regarding the enabling and
ﬁring of a transition.
3. Specify non-functional properties to be veriﬁed.
Although some non-functional properties (e.g. main-
tainability) cannot be quantiﬁed and can only be spec-
iﬁed informally, performance, dependability and per-
formability can usually be precisely speciﬁed and ver-
iﬁed at runtime. Temporal logic is suﬃcient to spec-
ify functional properties, however, it is incapable of
specifying dependability and performability since those
P11
t1
P2
P12
P21
P13
t21
λ1
P22
t22
λ2
Figure 2. The SRN model derived from the
SAM model in Figure 1.
properties usually involve probability and precise time.
To specify dependability and performability in SAM
framework, we introduce a logic called Probabilistic real
time Computation Tree Logic (PCTL), proposed by
Hansson and Jonsson [12]. PCTL extends Computa-
tion Tree Logic, a branching-time temporal logic, and
is capable of expressing time and probability in sys-
tems. For example, the property “after a request for
service there is at least a 98% probability that the ser-
vice will be successfully ﬁnished within 5 seconds” can
be expressed in PCTL as AG[(p → F
≤5≥0.98q)], where
proposition p represents that a request is issued and
proposition q represents that the service is successfully
ﬁnished. Since performance, dependability and per-
formability can usually be expressed in terms of time
and probability, it is suﬃcient to express most indices
of dependability and performability to be veriﬁed us-
ing PCTL. The advantage of specifying properties for-
mally in PCTL is that it allows ﬂexible analytical tech-
niques. For example, model checking can be applied to
the underlying CTMC to verify properties speciﬁed in
PCTL [12]. However, there do exist some indices of
dependability and performability that cannot be ex-
pressed in PCTL. For example, PCTL cannot express
the average time it takes to ﬁnish a service. For those
properties that cannot be expressed by PCTL, we spec-
ify them informally by natural language.
4. Derive the SRN model from the SAM model ob-
tained in step 2. The SAM model is ﬁrst unfolded to
a low level Petri net and then the SRN model is de-
rived from the unfolded low level Petri net together
with the stochastic information. A PrT net can be
unfolded as follows using the method presented in [9].
First, each transition is unfolded into a set of transi-
tions according to the set of constant substitutions that
satisfy constraint of the transition. Second, places are
connected to the transitions according to the substitu-
tions. Finally, remove the dead transitions and com-
bine equivalent elements if any. It is not necessary to
unfold the whole PrT net if we are only interested in
part of the PrT net model. After the PrT net model
is unfolded, each transition is designated either as an
immediate transition or as a timed transition with a
proper ﬁring rate based on the stochastic information.
Proceedings of the 2003 International Conference on Dependable Systems and Networks (DSN’03) 
0-7695-1959-8/03 $17.00 (c) 2003 IEEE
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 12:28:45 UTC from IEEE Xplore.  Restrictions apply. 
By making use of the features of SRNs such as en-
abling function, marking dependent arc cardinality and
marking dependent ﬁring rate, the SRN model can be
more concise and readable. When we evaluate a non-
functional property in which the content of a message
is irrelevant, the SRN model shown in Figure 2 can be
derived from the SAM model in Figure 1, where a bar
represents an immediate transition and a box repre-
sents a timed transition.
5. After the SRN model is derived, existing solution
techniques and tools can be applied to obtain the non-
functional property measures, and then the numerical
results are checked against the property speciﬁcations
in PCTL to see whether the model satisﬁes the speciﬁ-
cations. The SRN model may need to be revised for the
analysis of some non-functional properties. For exam-
ple, to analyze the mean time to failure (MTTF) of a
system, all the failure states should be made absorbing
(outgoing arcs from those states are removed) [27].
In recent research work, SRNs have been applied
to evaluate a variety of non-functional properties like
performance, dependability and performability. Us-
ing the methodology proposed above, the SAM frame-