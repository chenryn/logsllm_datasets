formation during compilation, including compatible classes
and different virtual functions implementations. Speciﬁcally,
VScape collects three types of information as below:
• Virtual call sites: COOPLUS bypasses virtual call protec-
tions around certain virtual call sites. Therefore, VScape
ﬁrst logs all virtual call sites in the target application, as
well as the expected virtual function’s statically declared
base interface class information.
• Class layouts: The victim class and counterfeit class in
an exploit primitive all derive from the virtual call’s inter-
face class. Therefore, VScape also logs the class layout
information during compilation, including its size, offsets
of member ﬁelds and base classes. Note that, the ﬁnal
exploit also relies on relay objects, which may have no
virtual functions. So VScape will log all class layouts no
matter the class has virtual functions or not.
• Virtual functions: VScape logs all type-conformant vir-
tual functions for each virtual call site, i.e., those overrid-
den in classes derived from the interface class. Further,
VScape logs the maximum ﬁeld access offset of each vir-
tual function when generating code for the function, since
it has to ﬁnd potential out-of-bound memory access later.
4.2.2 Primitive Searching
For a given virtual call, we need to ﬁnd proper victim classes
and counterfeit classes, which have different implementa-
tions of the target virtual function. Such a pair of functions
could yield unexpected behaviors and enable COOPLUS ex-
ploitation, thus forming a candidate exploit primitive.
Since the victim class and counterfeit class all derive from
the interface class expected in the virtual call, we could ﬁrst
build the class inheritance hierarchy (CIH) tree based on the
class layout information we collected, as shown in Figure 5,
then search the tree for derived classes that have different
implementations of the target virtual function.
More speciﬁcally, VScape checks the implementations of
the target virtual function in all derived classes. A breadth-
ﬁrst search (BFS) algorithm is applied to iterate all derived
classes, starting from the base interface class. A global rank
number (starting from 0) is maintained to record versions
of the target virtual function. Each time a parent class is it-
erated, each of its child class will be assigned with a rank
1724    30th USENIX Security Symposium
USENIX Association
Primitive GenerationInputsInfo CollectingExploit Constraint SolvingVirtual Call SiteReachability TestingOOB Instruction Reachability SolvingExploit AssemblingOutputsExploit TemplateReal-World ExploitMemory States ConstraintsPath ConstraintsPrimitiveSearchingPrimitive Capability  AnalysisVulnerabilityMatchingExploitable Memory States  InferenceTarget Program Source CodeVulnerablility DescriptionExpected Primitive AttributesCandidate PrimitivesExpected Primitive Construction01212VirtualCall BaseInterfaceClass02ClasswithOverriddenFunctionsInheritanceTree-AInheritanceTree-Bnumber. If the child class inherits the implementation of this
virtual function, then the rank number of the parent class is
assigned to this child class. Otherwise, the global rank num-
ber increases by 1 and is set to the child class.
Finally, any two classes with different rank numbers, to-
gether with the virtual call, could form a candidate exploit
primitive (virtual call, victim class, counterfeit class).
4.2.3 Primitive Capability Analysis
As discussed in Section 3.3, different virtual call primitives
have different capabilities. VScape further analyzes each
primitive to understand its capability. Speciﬁcally, it ﬁrst de-
termines whether the out-of-bound (OOB) memory access in
the counterfeit function is a write or a read operation.
For an OOB read, it then analyzes how the loaded value is
used in the counterfeit function, i.e., whether it is used as a
program counter or a target memory address to write. For the
latter case, VScape will further analyze whether the written
value is controllable by the adversary, via taint analysis.
For an OOB write, it then analyzes whether the value writ-
ten to the relay object is a pointer value. If yes, VScape fur-
ther looks for potential information leakage locations (users
of the relay object) to bypass ASLR.
In this way, VScape could determine the capability of each
primitive, i.e., Ld-Ex-PC, Ld-AW-Const, Ld-AW-nonCtrl,
Ld-AW-Ctrl, St-Ptr, and St-nonPtr. Note that, one primitive
could have multiple capabilities, depending on the function-
ality of the counterfeit function and users of the relay object.
4.3 Expected Primitive Construction
Given all candidate primitives and their capabilities, VScape
further selects appropriate ones which can cooperate with the
given vulnerability and satisfy expected primitive attributes.
4.3.1 Vulnerability Matching
Given a vulnerability, not all candidate primitives could be
invoked. Speciﬁcally, the vulnerable object where the vul-
nerability occurs has to be allocated in the same heap as the
victim object of the candidate primitive.
For instance, if there are multiple heap allocators responsi-
ble for allocating different objects, or the sole heap allocator
puts objects of different types or different sizes into different
zones, then the vulnerable object cannot inﬂuence the victim
object, and the corresponding primitive will not work.
Given the vulnerability description input, VScape learns
expert knowledge of the heap allocators, and then matches
candidate primitives with the target.
4.3.2 Exploitable Memory States Inference
In an exploit, the vcall primitive has to serve a speciﬁc pur-
pose, e.g., write a speciﬁc value to a speciﬁc address.
In
order to serve such purposes, which are deﬁned as input ex-
pected primitive attributes, the candidate vcall primitive has
to run in a speciﬁc memory state, e.g., certain ﬁelds in the
victim object have to take speciﬁc values.
VScape could automatically infer such memory state re-
quirements for a candidate vcall primitive via taint analysis
Figure 6: An example memory state inference, for a primi-
tive with the Ld-AW-Ctrl capability.
and symbolic execution. Given a candidate primitive, i.e.,
a virtual call site, a victim function and a counterfeit func-
tion, VScape will mark the victim object and the adjacent
relay object as symbolic values, and symbolically executes
the counterfeit function which will access the relay object.
For instance, Figure 6 shows a primitive with the capabil-
ity Ld-AW-Ctrl, and the expected primitive attribute is that
this primitive should write to a speciﬁc address target_addr.
By performing symbolic execution on the taint-related trace
of the counterfeit function, we could infer that, the adversary
needs to set the ﬁeld at offset x with a pointer to a fake object
crafted by the adversary, and set the ﬁeld at offset y of this
fake object with target_addr - z.
4.4 Exploit Constraint Solving
So far, the candidate primitives are retrieved via static anal-
ysis. It is not clear whether such primitives could reveal ex-
pected behaviors at runtime.
Given a candidate primitive (virtual call, victim class,
counterfeit class), there are three speciﬁc questions to an-
swer: (1) Given that not all data ﬂow is feasible at runtime,
whether the victim object will be used at the vcall site? In
other words, whether the victim function could be invoked at
runtime? If not, the counterfeit function will not be invoked
either. (2) Given that the counterfeit function has many pro-
gram paths, whether the OOB memory access instruction
could get executed at runtime? If not, the unexpected mem-
ory safety violation will not happen. (3) If both answers are
yes, what data constraints should be met in order to trigger
the victim function and the OOB access instruction?
4.4.1 Reachability of Victim Functions
Directed fuzzing [35] is a straightforward solution to evalu-
ate the runtime reachability of the target function or instruc-
tion. However, during the experiment, we ﬁgured out the
efﬁciency of existing directed fuzzing solutions is low at ex-
ploring reachable targets when there are hundreds of targets
in a relatively large application.
As a result, we skip evaluating the reachability of every
victim function. Instead, we only try the best to get an in-
complete list of reachable victim functions, and discard re-
USENIX Association
30th USENIX Security Symposium    1725
t25 = GET:I64(rdi)  STle(t23) = t25              # t23=t26t28 = LDle:I64(t26)       # t28=thist42 = Add64(t28,0x50) # x=0x50t44 = LDle:I64(t42)t45 = Add64(t44,0x78)  # y=0x78t48 = LDle:I32(t45)t47 = Add64(t48,0x18)  # z=0x18t50 = LDle:I32(t47)t49 = 32Uto64(t50)t51 = 64to32(t49)t14 = Add32(t51,0x1)    # incrementt55 = 32Uto64(t14)t58 = 64to32(t55)STle(t56) = t58IN:      target_addr, tainttraceofagivengadgetOUT:  memory_settingMemory_Setting_Template:# set_64bit_mem(base, offset, value)set_64bit_mem(this, offset1,addr1)set_64bit_mem(addr1, offset2, addr2)...Expressions:t42=this+xt45=t44+yt47=t48+zPoint-to:t44=*t42t48=*t45Conditions:t47==target_addrResult:offset1=x,addr1=ctrl_mem(forfakeobjects)offset2=y,addr2=target_addr-zTaintTraceonVEXSemanticsoftheabove:*(*(*(this+x)+y)+z)++1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
def main ( ) :
h e a p _ o p e r a t i o n _ b e f o r e _ r e l a y _ o b j e c t ( )
gen_relay_object_and_fake_object()
h e a p _ o p e r a t i o n _ b e f o r e _ v i c t i m _ o b j e c t ( )
gen_allocate_victim_object()
v u l _ t r i g g e r ( )
gen_invoke_counterfeit_function()
o p e r a t i o n s _ a f t e r _ c o o p l u s ( )
# Prepare memory fo r the expected p r i m i t i v e
def g e n _ r e l a y _ o b j e c t _ a n d _ f a k e _ o b j e c t ( ) :
set_memory ( relay_base , o f f s e t _ 1 , value_1 )
set_memory ( fake_base , o f f s e t _ 2 , value_2 )
' ' '
' ' '
' ' '
' ' '
. . .
# Ensure v i c t i m f u n c t i o n ' s r e a c h a b i l i t y
def g e n _ a l l o c a t e _ v i c t i m _ o b j e c t ( ) :
from PyQt5 . QtCore import Qt
from PyQt5 . QtWidgets
window = QWidget ( )
# Ensure OOB i n s t r u c t i o n ' s r e a c h a b i l i t y
def g e n _ i n v o k e _ c o u n t e r f e i t _ f u n c t i o n ( ) :
window . show ( )
import QWidget , Q A p p l i c a t i o n
Listing 3: An example exploit template for PyQt.
maining victim functions (although some of them could be
reachable). Speciﬁcally, we utilize dynamic testing to evalu-
ate target applications with given benchmark test cases, and
collect victim functions that are triggered during testing.
Speciﬁcally, VScape inserts callback handlers at virtual
call sites of each candidate primitive. During testing, the
callback handler will log the invoked victim function and the
corresponding test case.
4.4.2 Reachability of OOB Instructions
Given a reachable victim function of a candidate primitive,
we could launch COOPLUS to execute the counterfeit func-
tion. However, the out-of-bound access operation in the
counterfeit function may not get executed at runtime, since
this function may have multiple paths.
VScape utilizes symbolic execution to infer whether the
OOB access instruction is reachable and under what condi-
tion it is reachable. More speciﬁcally, it takes the logged test
case that reaches the victim function as input, and dumps
the runtime context when the victim function is hit, and then
feeds it to the symbolic execution engine Angr [19].
Starting from the dumped context, Angr begins concolic
execution on the counterfeit function (rather than the victim
function). The relay object is marked as symbolic values,
since it could be controlled by the adversary via heap manip-
ulation. Angr will explore all paths of the counterfeit func-
tion and verify whether the OOB instruction is reachable. If
yes, it outputs the path constraints (e.g., a speciﬁc memory
state) that should be satisﬁed by related objects.
4.4.3 Exploit Assembling
Generating an exploit in practice is extremely challenging,
both for humans and machines. There are many open chal-
lenges in automated exploit generation [36]. VScape is not
able to generate full chain exploits automatically neither.
VScape also relies on a user-provided exploit template to
compose a full chain exploit. Speciﬁcally, several manual
steps are required in the template, including (1) manipulate
the heap layouts of the target application, to arrange victim
objects and relay objects; (2) reform the vulnerability POC
to tamper with vptr of the victim object with a proper value,
and (3) utilize the capability provided by the COOPLUS
primitives to launch ﬁnal exploits. For the ﬁrst step, there
are several draft solutions to assist heap layout manipulation,
e.g., SLAKE [37], SHRIKE [38] and Gollum [12]. However,
they are still in an early stage. For the second step, symbolic
execution is a potential solution. But it requires great engi-
neering efforts and faces the scalability challenge. For the
last step, many well-known exploit patterns are required to
assist the exploitation. For instance, the adversary could uti-
lize AAW to overwrite the global offset table or other func-
tion pointers to hijack the control ﬂow. We leave the automa-
tion of these steps to future work.
Listing 3 shows an example exploit template for PyQt. Op-
erations at line 2, 4, 6, and 8 represent the aforementioned
manual steps, where operations at line 3, 5, and 7 could be
automatically done by VScape. Speciﬁcally, at line 3, VS-
cape infers the memory state in which the vcall primitive has
to run. At line 5, VScape builds the victim object from a
logged test case and ensures the reachability of the victim
function. At line 7, VScape ensures the counterfeit function
is invoked and the OOB instruction is executed.
5 Evaluations
To evaluate the effectiveness of COOPLUS attack and VS-
cape, we designed several experiments and tried to answer
the following questions:
• RQ1: What is the popularity of COOPLUS exploit
primitives in real world C++ applications?
• RQ2: Is the COOPLUS attack effective at defeating var-
ious virtual call protections?
• RQ3: Is VScape effective at generating exploit primi-
tives and assisting full chain exploit generation, when
given real world vulnerabilities?
Implementation
5.1
We implemented a prototype of VScape. It consists of (1) a
compiler plugin based on Clang [53] and LLVM [54] to col-
lect virtual call related information, (2) a primitive searcher
which ﬁnds candidate primitives and analyzes their capabil-
ities based on the VEX IR [55], (3) an expected primitive
constructor which ﬁnds matching primitives and required
memory states, and (4) an exploit constraint solver which
adopts lightweight dynamic tests and symbolic execution
based on Angr [19], to ﬁlter reachable victim functions and
solve memory states that can reach target OOB. The code
size of each component is listed in Table 2.
5.2 Attack Surface Analysis
To answer the question RQ1, we evaluated VScape on 14
open source C++ programs, which are widely used and ac-
tively maintained. All programs are compiled with default
1726    30th USENIX Security Symposium
USENIX Association
Table 1: Statistics of virtual functions, virtual call sites, and COOPLUS exploit primitives of 14 C++ applications.
Category App
Version
50.1.0
77.0.3864.0
0.11
1.5.1.0
Browser
Multi-
media
Tech
Network
& Server
Unique Virtual Call Sites (UVC)
VFunc Variants (Ranks)
for #UVC-CVF
ﬁrefox [39]
chromium [40]
oce [41]
Bento4 [42]
ImageMagick [43]7.0.8