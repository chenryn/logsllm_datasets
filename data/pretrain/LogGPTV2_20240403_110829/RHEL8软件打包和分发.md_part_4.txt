    cello-1.0/cello.c
    cello-1.0/LICENSE
    $ mv /tmp/cello-1.0.tar.gz ~/rpmbuild/SOURCES/
    ```
3.  添加补丁：
    ``` literallayout
    $ mv ~/cello-output-first-patch.patch ~/rpmbuild/SOURCES/
    ```
:::
有关使用 C 编写的示例源代码的更多信息，请参阅 [Hello World 使用 C
编写](#preparing-software-for-rpm-packaging_packaging-and-distributing-software.html#hello-world-c_preparing-software-for-rpm-packaging "例 2.3. 使用 C 编写的 World"){.link}。
:::
:::
:::
:::
[]{#packaging-software_packaging-and-distributing-software.html}
::: chapter
::: titlepage
# []{#packaging-software_packaging-and-distributing-software.html#packaging-software_packaging-and-distributing-software}第 3 章 打包软件 {.title}
:::
::: section
::: titlepage
# []{#packaging-software_packaging-and-distributing-software.html#rpm-packages_packaging-software}RPM 软件包 {.title}
:::
本节介绍 RPM 打包格式的基础知识。
::: section
::: titlepage
## []{#packaging-software_packaging-and-distributing-software.html#what-is-an-rpm_rpm-packages}RPM 是什么 {.title}
:::
RPM 软件包是包含其它文件和元数据的文件（系统所需文件的信息）。
特别是，RPM 软件包由 `cpio`{.literal} 归档组成。
`cpio`{.literal} 归档包含：
::: itemizedlist
-   文件
-   RPM 标头（软件包元数据）
    `rpm`{.literal}
    软件包管理器使用此元数据来确定依赖项、安装文件的位置和其他信息。
:::
#### []{#packaging-software_packaging-and-distributing-software.html#types_of_rpm_packages}RPM 软件包的类型
RPM
软件包有两种类型。这两种类型都共享文件格式和工具，但内容不同，并实现不同的目的：
::: itemizedlist
-   源 RPM（SRPM）
    SRPM 包含源代码和 SPEC 文件，这些文件描述了如何将源代码构建为二进制
    RPM。另外，也可以选择包括源代码的补丁。
-   二进制 RPM
    一个二进制 RPM 包含了根据源代码和补丁构建的二进制文件。
:::
:::
::: section
::: titlepage
## []{#packaging-software_packaging-and-distributing-software.html#rpm-packaging-tools_rpm-packages}列出 RPM 打包工具的实用程序 {.title}
:::
以下步骤演示了如何列出 `rpmdevtools`{.literal} 软件包提供的工具。
::: title
**先决条件**
:::
为了能够使用 RPM 打包工具，您需要安装 `rpmdevtools`{.literal}
软件包，该软件包提供了几个打包 RPM 的工具。
``` literallayout
# yum install rpmdevtools
```
::: itemizedlist
**流程**
-   列出 RPM 打包工具的工具：
    ``` literallayout
    $ rpm -ql rpmdevtools | grep bin
    ```
:::
::: itemizedlist
**附加信息**
-   有关以上实用程序的详情，请查看其 man page 或帮助对话框。
:::
:::
::: section
::: titlepage
## []{#packaging-software_packaging-and-distributing-software.html#setting-up-rpm-packaging-workspace_rpm-packages}设置 RPM 打包工作区 {.title}
:::
本节论述了如何使用 `rpmdev-setuptree`{.literal} 工具设置 RPM
打包工作区的目录布局。
::: title
**先决条件**
:::
`rpmdevtools`{.literal} 软件包必须安装在您的系统中：
``` literallayout
# yum install rpmdevtools
```
::: itemizedlist
**流程**
-   运行 `rpmdev-setuptree`{.literal} 工具：
:::
``` literallayout
$ rpmdev-setuptree
$ tree ~/rpmbuild/
/home/user/rpmbuild/
|-- BUILD
|-- RPMS
|-- SOURCES
|-- SPECS
`-- SRPMS
5 directories, 0 files
```
创建的目录满足以下目的：
::: informaltable
  ------- ----------------------------------------------------------------------------------------------------------------------------
  目录    目的
  BUILD   当构建软件包时，会在此处创建各种 `%buildroot`{.literal} 目录。如果日志输出无法提供足够的信息，这对调查失败的构建非常有用。
  RPM     二进制 RPM 在此处创建，在不同的构架的子目录中，例如在子目录 `x86_64`{.literal} 和 `noarch`{.literal} 中。
  源      此处打包程序设置了压缩的源代码存档和补丁。`rpmbuild`{.literal} 命令会在此处查找它们。
  SPECS   打包程序在此处放置 SPEC 文件。
  SRPMS   当 `rpmbuild`{.literal} 用于构建 SRPM 而不是二进制 RPM 时，此处会创建生成的 SRPM。
  ------- ----------------------------------------------------------------------------------------------------------------------------
:::
:::
::: section
::: titlepage
## []{#packaging-software_packaging-and-distributing-software.html#what-is-a-spec-file_rpm-packages}SPEC 文件是什么 {.title}
:::
您可以将 SPEC 文件理解为 `rpmbuild`{.literal} 实用程序用来构建 RPM
的方法。SPEC
文件通过在一系列部分中定义指令向构建系统提供必要的信息。这些部分在
Preamble [*和*]{.emphasis} [*Body*]{.emphasis}
部分定义。[*Preamble*]{.emphasis} 部分包含一系列元数据项目，在
[*Body*]{.emphasis} 部分使用。[*Body*]{.emphasis}
部分代表该指令的主要部分。
::: section
::: titlepage
### []{#packaging-software_packaging-and-distributing-software.html#preamble-items}强制项 {.title}
:::
下表显示了 RPM SPEC 文件的 Preamble
[*部分中经常使用的一些指令*]{.emphasis}。
::: table
[]{#packaging-software_packaging-and-distributing-software.html#idm139867791677824}
**表 3.1. RPM SPEC 文件的 `Preamble`{.literal} 部分中使用的项目**
::: table-contents
+---------------------------+-----------------------------------------+
| SPEC 指令                 | 定义                                    |
+:==========================+:========================================+
| `Name`{.literal}          | 软件包的基本名称，应该与 SPEC           |
|                           | 文件名匹配。                            |
+---------------------------+-----------------------------------------+
| `Version`{.literal}       | 软件的上游版本号。                      |
+---------------------------+-----------------------------------------+
| `Release`{.literal}       | 本                                      |
|                           | 版软件的发布次数。通常，将初始值设置为  |
|                           | 1%{?dist}，                             |
|                           | 并在软件包的每个新版本中递增它。构建新  |
|                           | `Version`{.literal} 软件时，重置为 1。  |
+---------------------------+-----------------------------------------+
| `Summary`{.literal}       | 软件包的简短单行摘要。                  |
+---------------------------+-----------------------------------------+
| `License`{.literal}       | 打包软件的许可证。                      |
+---------------------------+-----------------------------------------+
| `URL`{.literal}           | 有关程序的更多信息的完整                |
|                           | URL。大多数情                           |
|                           | 况下，这是被打包的软件的上游项目网站。  |
+---------------------------+-----------------------------------------+
| `Source0`{.literal}       | 上游源代码压缩存档的路径或              |
|                           | URL（未修补，补                         |
|                           | 丁在别处处理）。这应该指向存档的可访问  |
|                           | 且可靠的存储，例如上游页面，而不是打包  |
|                           | 程序的本地存储。如果需要，可以添加更多  |
|                           | SourceX 指令，每次增加数量，例如        |
|                           | Source1、Source2 和 Source3 等。        |
+---------------------------+-----------------------------------------+
| `Patch`{.literal}         | 如                                      |
|                           | 有必要，适用于源代码的第一个补丁名称。  |
|                           |                                         |
|                           | 指令可以通过两种方式应用：Patch         |
|                           | 末尾有或不带数字。                      |
|                           |                                         |
|                           | 如果未指定数                            |
|                           | 字，则在内部为条目分配一个。也可以使用  |
|                           | Patch0、Patch1、Patch2 和 Patch3        |
|                           | 等明确给出数字。                        |
|                           |                                         |
|                           | 这些修补程序可使用                      |
|                           | %patch0、%patch1、%patch2               |
|                           | 宏等应用。宏在 RPM SPEC 文件的          |
|                           | [*Body*]{.emphasis} 部分中的 %prep      |
|                           | 指令内应用。或者，您可以使用 %autopatch |
|                           | 宏，它按照 SPEC                         |
|                           | 文件中给出的顺序自动应用所有补丁。      |
+---------------------------+-----------------------------------------+
| `BuildArch`{.literal}     | 如果软件包不依赖于构架，例如，如果完    |
|                           | 全使用解释的编程语言编写，请将其设置为  |
|                           | `BuildAr                                |
|                           | ch: noarch`{.literal}。如果没有设置，软 |
|                           | 件包会自动继承构建它的机器的架构，例如  |
|                           | `x86_64`{.literal}。                    |
+---------------------------+-----------------------------------------+
| `BuildRequires`{.literal} | 构建                                    |
|                           | 使用编译语言编写的程序所需的以空格分隔  |
|                           | 的软件包列表。`BuildRequires`{.literal} |
|                           | 可能有多个条目，每个条目在 SPEC         |
|                           | 文件中独立存在。                        |
+---------------------------+-----------------------------------------+
| `Requires`{.literal}      | 软件在安装后需要运行的软件包列表，      |
|                           | 用逗号或空格分隔。`Requires`{.literal}  |
|                           | 可能有多个条目，每个条目在 SPEC         |
|                           | 文件中独立存在。                        |
+---------------------------+-----------------------------------------+
| `ExcludeArch`{.literal}   | 如果某一部分软件无法在特定的处理器架    |
|                           | 构上运行，您可以在此处排除该体系结构。  |
+---------------------------+-----------------------------------------+
| `Conflicts`{.literal}     | `Conflicts`{.literal} 颠倒              |
|                           | `Requires`{.literal}。如果软件包与      |
|                           | `Conflicts`{.literal}                   |
|                           | 匹                                      |
|                           | 配，则无法独立安装该软件包，具体取决于  |
|                           | `Conflict`{.literal}                    |
|                           | 标签是安装在                            |
|                           | 已安装的软件包中，还是安装的软件包中。  |
+---------------------------+-----------------------------------------+
| `Obsoletes`{.literal}     | 这个指令会根据 `rpm`{.literal}          |
|                           | 命令直接在命令行中使用                  |
|                           | ，还是由更新或依赖性解析器执行更新而改  |
|                           | 变更新的工作方式。在命令行中使用时，RPM |
|                           | 将删除与正在安装                        |
|                           | 的软件包过时的软件包匹配的所有软件包。  |
|                           | 当使用更新或依赖项解析程序时，包含匹配  |
|                           | `Obsoletes:`{.literal}                  |
|                           | 的                                      |
|                           | 软件包会添加为更新并替换匹配的软件包。  |
+---------------------------+-----------------------------------------+
| `Provides`{.literal}      | 如果 `Provides`{.literal}               |
|                           | 添加到软件包中，                        |
|                           | 则软件包可以由其名称以外的依赖项引用。  |
+---------------------------+-----------------------------------------+
:::
:::
`Name`{.literal}、`Version`{.literal} 和 `Release`{.literal} 指令组成
RPM 软件包的文件名。RPM 软件包维护程序和系统管理员通常称为
[**N-V-R**]{.strong} 或 [**NVR**]{.strong} 这三个指令，因为 RPM
软件包文件名具有 `NAME-VERSION-RELEASE`{.literal} 格式。
以下示例演示了如何通过查询 `rpm`{.literal} 命令获取特定软件包的
[**NVR**]{.strong} 信息。
::: example
[]{#packaging-software_packaging-and-distributing-software.html#idm139867788325792}
**例 3.1. 查询 rpm 以提供 bash 软件包的 NVR 信息**
::: example-contents
``` literallayout
# rpm -q bash
bash-4.4.19-7.el8.x86_64
```
:::
:::
在这里，`bash`{.literal} 是软件包名称，`4.4.19`{.literal}
是版本，`7.el8`{.literal} 是发行版本。最后的标记是
`x86_64`{.literal}，它代表架构。与 [**NVR**]{.strong}
不同，构架标记不直接由 RPM 打包程序控制，而是由 `rpmbuild`{.literal}
构建环境定义。但独立于构架的 `noarch`{.literal} 软件包除外。
:::
::: section
::: titlepage
### []{#packaging-software_packaging-and-distributing-software.html#body-items}正文项 {.title}
:::
RPM SPEC 文件的 `Body section`{.literal} 中使用的项目列在下表中。
::: table
[]{#packaging-software_packaging-and-distributing-software.html#idm139867779919696}
**表 3.2. RPM SPEC 文件的 Body 部分中使用的项目**
::: table-contents
  SPEC 指令                  定义

  `%description`{.literal}   RPM 中打包的软件包的完整描述。这种描述可跨越多行，可分为几个段落。
  `%prep`{.literal}          用于准备要构建的软件的命令或一系列命令，例如解压缩 `Source0`{.literal} 中的存档。此指令可以包含 shell 脚本。
  `%build`{.literal}         用于将软件构建到计算机代码的命令或一系列命令（用于编译语言）或字节代码（用于一些解释语言）。
  `%install`{.literal}       将所需构建工件从 `%builddir`{.literal} （构建进行的位置）复制到 `%buildroot`{.literal} 目录中的命令或一系列命令（其中包含要打包的文件的目录结构）。这通常意味着将文件从 `~/rpmbuild/BUILD`{.literal} 复制到 `~/rpmbuild/BUILDROOT`{.literal} 并在 `~/rpmbuild/BUILDROOT`{.literal} 中创建必要的目录。这仅在创建软件包时运行，而不是在最终用户安装软件包时运行。详情请查看 ["使用 SPEC 文件"一节](#packaging-software_packaging-and-distributing-software.html#working-with-spec-files "使用 SPEC 文件"){.xref}。
  `%check`{.literal}         用于测试软件的命令或一系列命令。这通常包括单元测试等内容。
  `%files`{.literal}         将在终端用户系统中安装的文件列表。
  `%changelog`{.literal}     记录不同 `Version`{.literal} 或 `Release`{.literal} 构建之间软件包发生的更改。
:::
:::
:::
::: section
::: titlepage
### []{#packaging-software_packaging-and-distributing-software.html#advanced-items}高级项目 {.title}
:::
SPEC 文件还可以包含高级项目，如
[Scriptlet](#advanced-topics.html#scriptlets-directives_scriptlets-new "scriptlets 指令"){.link}
或
[Triggers](#advanced-topics.html#triggers_epoch-scriplets-and-triggers "Triggers 指令"){.link}。它们在安装过程中在安装过程中对最终用户系统（而非构建过程）的不同点生效。
:::