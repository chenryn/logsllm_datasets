| sparse-switch vAA,+BBBBBBBB | vAA寄存器为switch分支中需要判断的值，BBBBBBBB指向一个sparse-switch-payload格式的偏移表，表中的值是无规律的偏移表，表中的值是无规律的偏移量。 |
对于第一种递增式的switch，如下
```java
int a = 10;
switch (a){
    case 0:
        a = 1;
        break;
    case 1:
        a = 5;
        break;
    case 2:
        a = 10;
        break;
    case 3:
        a = 20;
        break;
}
```
对应的smali如下
```smali
const/16 v0, 0xa
packed-switch v0, :pswitch_data_0 # switch 开始
:pswitch_0                        # case 0
const/4 v0, 0x1
goto :goto_0
:pswitch_1                        # case 1
const/4 v0, 0x5
goto :goto_0
:pswitch_2                        # case 2
const/16 v0, 0xa
goto :goto_0
:pswitch_3                        # case 3
const/16 v0, 0x14
goto :goto_0
:goto_0                           # switch 结束
return-void
:pswitch_data_0                   # 跳转表开始
.packed-switch 0x0                # 从 0 开始
    :pswitch_0
    :pswitch_1
    :pswitch_2
    :pswitch_3
.end packed-switch                # 跳转表结束
```
对于非递增的switch，代码如下
```smali
int a = 10;
switch (a){
    case 0:
        a = 1;
        break;
    case 10:
        a = 5;
        break;
    case 20:
        a = 10;
        break;
    case 30:
        a = 20;
        break;
}
```
对应的smali如下
```smali
const/16 v0, 0xa
sparse-switch v0, :sswitch_data_0 # switch 开始
:sswitch_0                        # case 0
const/4 v0, 0x1
goto :goto_0
:sswitch_1                        # case 10
const/4 v0, 0x5
goto :goto_0
:sswitch_2                        # case 20
const/16 v0, 0xa
goto :goto_0
:sswitch_3                        # case 15
const/16 v0, 0x14
goto :goto_0
:goto_0                           # switch 结束
return-void
.line 55
:sswitch_data_0                   # 跳转表开始
.sparse-switch
    0x0 -> :sswitch_0
    0xa -> :sswitch_1
    0x14 -> :sswitch_2
    0x1e -> :sswitch_3
.end sparse-switch                # 跳转表结束
```
#### 锁指令
锁指令用于在多线程程序。包含以下两个指令
| **指令**            | **说明**    |
| ----------------- | --------- |
| monitor-enter vAA | 为指定的对象获取锁 |
| monitor-exit vAA  | 释放指定的对象的锁 |
#### 方法调用指令
方法调用指令实现了调用实例的方法的操作。其基础为invoke，在其基础上会根据调用方法的类别不同，如虚方法，父类方法等添加后缀，最后会选择性地使用range来指定寄存器范围。一般来说会分为两类
- invoke-kind {vC, vD, vE, vF, vG},meth@BBBB
- invoke-kind/range {vCCCC  .. vNNNN},meth@BBBB两类
  总体来说，一般有如下指令
| **指令**                                   | **说明**    |
| ---------------------------------------- | --------- |
| invoke-virtual 或 invoke-virtual/range    | 调用实例的虚方法  |
| invoke-super 或 invoke-super/range        | 调用实例的父类方法 |
| invoke-direct 或 invoke-direct/range      | 调用实例的直接方法 |
| invoke-static 或 invoke-static/range      | 调用实例的静态方法 |
| invoke-interface 或 invoke-interface/range | 调用实例的接口方法 |
Dalvik中直接方法是指类的所有实例构造器和`private`实例方法，对于`protected`或者`public`方法都叫做虚方法。
#### 异常指令
利用 throw vAA 指令抛出vAA寄存器中指定类型的异常。
##### try catch
首先，我们来看一下try catch，如下
```java
int a = 10;
try {
    callSomeMethod();
} catch (Exception e) {
    a = 0;
}
callAnotherMethod();
```
对应的smali如下
```smali
const/16 v0, 0xa
:try_start_0            # try 块开始
invoke-direct {p0}, Lnet/flygon/myapplication/SubActivity;->callSomeMethod()V
:try_end_0              # try 块结束
.catch Ljava/lang/Exception; {:try_start_0 .. :try_end_0} :catch_0
:goto_0
invoke-direct {p0}, Lnet/flygon/myapplication/SubActivity;->callAnotherMethod()V
return-void
:catch_0                # catch 块开始
move-exception v1
const/4 v0, 0x0
goto :goto_0            # catch 块结束
```
可以看到，`:try_start_0`和`:try_end_0`之间如果存在异常，则会向下寻找`.catch`（或者`.catch-all`）语句，符合条件时跳到标签的位置，这里是`:catch_0`，结束之后会有个`goto`跳回去。
##### try-finally
java代码如下
```java
int a = 10;
try {
    callSomeMethod();
} finally {
    a = 0;
}
callAnotherMethod();
```
其对应的smali代码如下
```smali
const/16 v0, 0xa
:try_start_0            # try 块开始
invoke-direct {p0}, Lnet/flygon/myapplication/SubActivity;->callSomeMethod()V
:try_end_0              # try 块结束
.catchall {:try_start_0 .. :try_end_0} :catchall_0
const/4 v0, 0x0         # 复制一份到外面
invoke-direct {p0}, Lnet/flygon/myapplication/SubActivity;->callAnotherMethod()V
return-void
:catchall_0             # finally 块开始
move-exception v1
const/4 v0, 0x0
throw v1                # finally 块结束
```
可以看出，由于`finally`中的逻辑无论有没有异常都会执行，所以代码里一共有两部分。
##### try-catch-finally
当我们同时使用catch与finally时，如下
```java
int a = 10;
try {
    callSomeMethod();
} catch (Exception e) {
    a = 1;
}
finally {
    a = 0;
}
callAnotherMethod();
```
其对应的smali代码如下
```smali
const/16 v0, 0xa
:try_start_0            # try 块开始
invoke-direct {p0}, Lnet/flygon/myapplication/SubActivity;->callSomeMethod()V
:try_end_0              # try 块结束
.catch Ljava/lang/Exception; {:try_start_0 .. :try_end_0} :catch_0
.catchall {:try_start_0 .. :try_end_0} :catchall_0
const/4 v0, 0x0         # 复制一份到外面
:goto_0
invoke-direct {p0}, Lnet/flygon/myapplication/SubActivity;->callAnotherMethod()V
return-void
:catch_0                # catch 块开始
move-exception v1
const/4 v0, 0x1
const/4 v0, 0x0         # 复制一份到 catch 块里面
goto :goto_0            # catch 块结束
:catchall_0             # finally 块开始
move-exception v2
const/4 v0, 0x0
throw v2                # finally 块结束
```
#### 返回指令
在java中我们会利用Return返回方法的执行结果。同样的，在Davilk中我们也需要return指令来返回方法运行结果。