### Security Vulnerability in Privileged Configuration Options

A potential security issue arises when a malicious userspace application can read or write to privileged configuration options. To address this, a check should be implemented to prevent modifications to these privileged options. Specifically, the Android kernel, running at privilege level EL1, should not be able to read or write options that belong to the boot loader, which operates at a higher privilege level.

The ideal solution is to separate privileged and unprivileged options and store them on different partitions, ensuring that only appropriately-privileged code can access each set of options.

#### Example: Serial Number Corruption

Before fuzzing:
```sh
HWFRD:/ $ getprop ro.serialno
RNV0216811001641
```

After fuzzing:
```sh
HWFRD:/ $ getprop ro.serialno
^Rï£¡DO>l
```

This example, shown in Listing 6, demonstrates a design issue found by DIFUZE while fuzzing the `nve` driver.

### Case Study II: qseecom Bug

In this section, we will walk through a bug discovered using the highest level of interface extraction (type recovery/complex structure instantiation). The relevant source code is provided below for reference.

```c
static int qseecom_mdtp_cipher_dip(void __user *argp) {
    struct qseecom_mdtp_cipher_dip_req req;
    u32 tzbuflenin, tzbuflenout;
    char *tzbufin = NULL, *tzbufout = NULL;
    int ret;

    do {
        ret = copy_from_user(&req, argp, sizeof(req));
        if (ret) {
            pr_err("copy_from_user failed, ret= %d\n", ret);
            break;
        }

        /* Copy the input buffer from userspace to kernel space */
        tzbuflenin = PAGE_ALIGN(req.in_buf_size);
        tzbufin = kzalloc(tzbuflenin, GFP_KERNEL);
        if (!tzbufin) {
            pr_err("error allocating in buffer\n");
            ret = -ENOMEM;
            break;
        }
        ret = copy_from_user(tzbufin, req.in_buf, req.in_buf_size);
    } while (0);

    return ret;
}

long qseecom_ioctl(struct file *file, unsigned cmd, unsigned long arg) {
    int ret = 0;
    void __user *argp = (void __user *) arg;

    switch (cmd) {
        case QSEECOM_IOCTL_MDTP_CIPHER_DIP_REQ: {
            ret = qseecom_mdtp_cipher_dip(argp);
            break;
        }
        // Other cases...
    }

    return ret;
}
```

#### CVE-2017-0612

This bug, identified as CVE-2017-0612, was discovered on Google's Pixel phone. The `ioctl` function for the driver starts at line 31 and follows the common `ioctl` design. A userspace application specifies `cmd` and `arg`.

For the `QSEECOM_IOCTL_MDTP_CIPHER_DIP_REQ` command, the `qseecom_mdtp_cipher_dip` function is called on line 39. Inside this function, user data is copied into the `struct qseecom_mdtp_cipher_dip_req req` on line 9. The bug occurs on line 16, where `tzbuflenin` is calculated by calling `PAGE_ALIGN` on the user-controlled value `req.in_buf_size`. If a large value is provided, `PAGE_ALIGN` can overflow, resulting in a smaller value, potentially zero. On line 17, an attempt is made to allocate memory with this miscalculated size. Finally, on line 24, the driver attempts to copy user data into the allocated buffer, leading to a crash due to the incorrect buffer size. This crash is only observed if the user-supplied `req.in_buffer` is a valid pointer; otherwise, `copy_from_user` fails gracefully and returns an error.

### Performance of Coverage-Guided Fuzzing with and without Interface Information

| ioctl cmd ID          | Interface Type     | Basic Blocks Covered (No Interface) | Basic Blocks Covered (Interface Aware) | Percentage Increase |
|-----------------------|--------------------|-------------------------------------|----------------------------------------|---------------------|
| SCSI_IOCTL_SEND_COMMAND | Simple Structure   | 3811                                | 3956                                   | 21.46%              |
| CDROM_SEND_PACKET      | Complex Structure  | 4629                                | 5582                                   | 41.10%              |

### Augmenting with Coverage-Guided Fuzzing

Coverage-guided fuzzing is a well-studied technique that effectively achieves good coverage. However, providing interface information for coverage-guided fuzzing significantly improves its performance on drivers. We ran syzkaller in coverage-guided mode on an x86-64 kernel, fuzzing `SCSI_IOCTL_SEND_COMMAND` and `CDROM_SEND_PACKET` with and without structure interface information for four hours per combination. The results show that interface information significantly improves coverage.

### Discussion

#### Weaknesses

1. **Early Crashes**: Buggy drivers can crash early, preventing the fuzzer from exploring deeper functionality. This can lead to missed bugs due to frequent reboots.
2. **Complex Relationships**: DIFUZE cannot extract complex relationships between fields of structures, such as a length field specifying the size of a buffer. Recognizing these relationships could provide valuable information to the fuzzer.

#### Future Work

Using run-time coverage to guide the fuzzer is a valuable technique. While DIFUZE currently does not use this technique, it has been shown to improve coverage-guided fuzzing performance. Implementing this would require recompiling and flashing the kernel, which presents several challenges, including the need for development boards and the availability of the latest kernel sources.

### Conclusion

In this paper, we proposed interface-aware fuzzing to enhance the effectiveness of automated analysis on interface-sensitive code, such as Linux kernel drivers. We implemented our techniques in an automated pipeline and demonstrated their efficiency and effectiveness. Our evaluation on seven models of Android phones revealed 36 bugs, 32 of which were previously unknown vulnerabilities. We are open-sourcing DIFUZE to help ensure the safety of modern mobile devices.

### Acknowledgments

We thank the anonymous reviewers for their valuable comments and input. This research was sponsored by the Office of Naval Research under grant numbers N00014-15-1-2948 and N00014-17-1-2011, and by DARPA under agreement number FA8750-15-2-0084. The U.S. Government is authorized to reproduce and distribute reprints for governmental purposes. This work is also sponsored by a gift from Google’s Anti-Abuse group.

### References

[1] 2016. Android Security Bulletin—May 2017. https://source.android.com/security/bulletin/2017-05-01.

[2] Alfred Aho, Jeffrey Ullman, Monica S. Lam, and Ravi Sethi. 1986. Compilers: Principles, Techniques, and Tools. Addison-Wesley.

[3] Dave Aitel. 2002. The Advantages of Block-Based Protocol Analysis for Security Testing. https://www.immunitysec.com/downloads/advantages_of_block_based_analysis.html.

[4] ARM. 2013. ARM Exception levels. http://infocenter.arm.com/help/index.jsp?topic=/com.arm.doc.ddi0488c/CHDHJIJG.html.

[5] K. Ashcraft and D. Engler. 2002. Using programmer-written compiler extensions to catch security holes. In Proceedings of the 2002 IEEE Symposium on Security and Privacy (SP ’02), 143–159. https://doi.org/10.1109/SECPRI.2002.1004368

[6] Thomas Ball, Ella Bounimova, Byron Cook, Vladimir Levin, Jakob Lichtenberg, Con McGarvey, Bohus Ondrusek, Sriram K. Rajamani, and Abdullah Ustuner. 2006. Thorough Static Analysis of Device Drivers. In Proceedings of the 2006 ACM SIGOPS/EuroSys European Conference on Computer Systems (EuroSys ’06), 73–85. https://doi.org/10.1145/1217935.1217943

[7] Peter T. Breuer and Simon Pickin. 2006. One Million (LOC) and Counting: Static Analysis for Errors and Vulnerabilities in the Linux Kernel Source Code. Springer Berlin Heidelberg, 56–70. https://doi.org/10.1007/11767077_5

[8] Laurent Butti and Julien Tinnes. 2008. Discovering and exploiting 802.11 wireless driver vulnerabilities. Journal in Computer Virology 4, 1, 25–37.

[9] Cristian Cadar, Daniel Dunbar, and Dawson Engler. 2008. KLEE: Unassisted and Automatic Generation of High-coverage Tests for Complex Systems Programs. In Proceedings of the 2008 USENIX Conference on Operating Systems Design and Implementation (OSDI ’08), 209–224. http://dl.acm.org/citation.cfm?id=1855741.1855756

[10] Cristian Cadar, Vijay Ganesh, Peter M. Pawlowski, David L. Dill, and Dawson R. Engler. 2006. EXE: Automatically Generating Inputs of Death. In Proceedings of the 2006 ACM Conference on Computer and Communications Security (CCS ’06), 322–335. https://doi.org/10.1145/1180405.1180445

[11] Gabriel Campana. 2009. Fuzzgrind: un outil de fuzzing automatique. Actes du 13ème Colloque sur la Sécurité des Systèmes d’Information, 213–229.

[12] Sang Kil Cha, Maverick Woo, and David Brumley. 2015. Program-Adaptive Mutational Fuzzing. In Proceedings of the 2015 IEEE Symposium on Security and Privacy (SP ’15), 725–741. https://doi.org/10.1109/SP.2015.50

[13] Paolo Milani Comparetti, Gilbert Wondracek, Christopher Kruegel, and Engin Kirda. 2009. Prospex: Protocol Specification Extraction. In Proceedings of the 18th USENIX Security Symposium, 1–16.