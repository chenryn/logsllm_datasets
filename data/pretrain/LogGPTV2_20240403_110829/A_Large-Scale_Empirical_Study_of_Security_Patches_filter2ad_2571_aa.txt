title:A Large-Scale Empirical Study of Security Patches
author:Frank Li and
Vern Paxson
A Large-Scale Empirical Study of Security Patches
Frank Li
Vern Paxson
{frankli, vern}@cs.berkeley.edu
University of California, Berkeley and International Computer Science Institute
the patch development process and the characteristics of the result-
ing fixes. Illuminating the nature of security patch development
can inform us of shortcomings in existing remediation processes
and provide insights for improving current practices.
Seeking such understanding has motivated several studies ex-
ploring various aspects of vulnerability and patching life cycles.
Some have analyzed public documentation about vulnerabilities,
such as security advisories, to shed light on the vulnerability dis-
closure process [14, 32]. These studies, however, did not include
analyses of the corresponding code bases and the patch develop-
ment process itself. Others have tracked the development of specific
projects to better understand patching dynamics [18, 28, 41]. While
providing insights on the responsiveness of particular projects to
security issues, these investigations have been limited to a smaller
scale across a few (often one) projects.
ABSTRACT
Given how the “patching treadmill” plays a central role for enabling
sites to counter emergent security concerns, it behooves the secu-
rity community to understand the patch development process and
characteristics of the resulting fixes. Illumination of the nature of se-
curity patch development can inform us of shortcomings in existing
remediation processes and provide insights for improving current
practices. In this work we conduct a large-scale empirical study of
security patches, investigating more than 4,000 bug fixes for over
3,000 vulnerabilities that affected a diverse set of 682 open-source
software projects. For our analysis we draw upon the National
Vulnerability Database, information scraped from relevant external
references, affected software repositories, and their associated se-
curity fixes. Leveraging this diverse set of information, we conduct
an analysis of various aspects of the patch development life cycle,
including investigation into the duration of impact a vulnerability
has on a code base, the timeliness of patch development, and the
degree to which developers produce safe and reliable fixes. We then
characterize the nature of security fixes in comparison to other
non-security bug fixes, exploring the complexity of different types
of patches and their impact on code bases.
Among our findings we identify that: security patches have a
lower footprint in code bases than non-security bug patches; a third
of all security issues were introduced more than 3 years prior to
remediation; attackers who monitor open-source repositories can
often get a jump of weeks to months on targeting not-yet-patched
systems prior to any public disclosure and patch distribution; nearly
5% of security fixes negatively impacted the associated software;
and 7% failed to completely remedy the security hole they targeted.
1 INTRODUCTION
Miscreants seeking to exploit computer systems incessantly dis-
cover and weaponize new security vulnerabilities. As malicious
attacks become increasingly advanced, system administrators con-
tinue to rely on many of the same processes as practiced for decades
to update their software against the latest threats. Given the central
role that the “patching treadmill” plays in countering emergent se-
curity concerns, it behooves the security community to understand
Permission to make digital or hard copies of all or part of this work for personal or
classroom use is granted without fee provided that copies are not made or distributed
for profit or commercial advantage and that copies bear this notice and the full citation
on the first page. Copyrights for components of this work owned by others than the
author(s) must be honored. Abstracting with credit is permitted. To copy otherwise, or
republish, to post on servers or to redistribute to lists, requires prior specific permission
and/or a fee. Request permissions from permissions@acm.org.
CCS ’17, October 30-November 3, 2017, Dallas, TX, USA
© 2017 Copyright held by the owner/author(s). Publication rights licensed to Associa-
tion for Computing Machinery.
ACM ISBN 978-1-4503-4946-8/17/10...$15.00
https://doi.org/10.1145/3133956.3134072
Beyond the patch development life cycle, the characteristics
of security fixes themselves are of particular interest, given their
importance in securing software and the time sensitivity of their
development. The software engineering community has studied
bug fixes in general [29, 33, 34, 42]. However, there has been little
investigation into how fixes vary across different classes of issues.
For example, one might expect that patches for performance issues
qualitatively differ from those remediating vulnerabilities. Indeed,
Zama et al.’s case study on Mozilla Firefox bugs revealed that de-
velopers address different classes of bugs differently [41].
In this work, we conduct a large-scale empirical study of security
patches, investigating 4,000+ bug fixes for 3,000+ vulnerabilities
that affected a diverse set of 682 open-source software projects. We
build our analysis on a dataset that merges vulnerability entries
from the National Vulnerability Database [37], information scraped
from relevant external references, affected software repositories,
and their associated security fixes. Tying together these disparate
data sources allows us to perform a deep analysis of the patch
development life cycle, including investigation of the code base
life span of vulnerabilities, the timeliness of security fixes, and the
degree to which developers can produce safe and reliable security
patches. We also extensively characterize the security fixes them-
selves in comparison to other non-security bug patches, exploring
the complexity of different types of patches and their impact on
code bases.
Among our findings we identify that: security patches have less
impact on code bases and result in more localized changes than non-
security bug patches; security issues reside in code bases for years,
with a third introduced more than 3 years prior to remediation;
security fixes are poorly timed with public disclosures, allowing
attackers who monitor open-source repositories to get a jump of
weeks to months on targeting not-yet-patched systems prior to
any public disclosure and patch distribution; nearly 5% of security
Session J3:  Problematic PatchesCCS’17, October 30-November 3, 2017, Dallas, TX, USA2201fixes negatively impacted the associated software; and 7% failed to
completely remedy the security hole they targeted. The findings of
our analysis provide us with insights that suggest paths forward
for the security community to improve vulnerability management.
Our work provides several contributions. First, we specifically
focus on security vulnerabilities and their patches. While aspects of
our work have similarities to prior efforts from the software engi-
neering community that examined general bug fixes [29, 33, 34, 42],
we tease apart the differences between security fixes vs. other bug
fixes. Second, we develop a large-scale reproducible data collection
methodology and associated analysis that ties extensive meta-data
on vulnerabilities and their patches with the software source codes
and change histories. As best we know, such a diverse set of data
has not been previously collected and used to explore security patch
development at scale. Conducting such an analysis at scale provides
a third contribution: some prior works have considered analyses
somewhat similar, but restricted to a small handful of software
projects (often only one). We develop robust metrics that one can
compute across a diverse group of projects, supporting a range of
generalizable results.
2 RELATED WORK
There has been a body of work that investigated aspects of the vul-
nerability life cycle. Frei et al. [14] and Shahzad et al. [32] conducted
similar analyses based on public documentation from vulnerability
databases and security advisories. For example, they compared a
vulnerability’s public disclosure date with announcement dates for
fixed releases available for distribution, finding them concurrent in
60% of cases. Ozment et al. [28] investigated the evolution of vul-
nerabilities in the OpenBSD operating system over time, observing
that it took on average 2.6 years for a release version to remedy
half of the known vulnerabilities. Huang et. al. [18] manually an-
alyzed 131 cherry-picked security patches from five open-source
projects, demonstrating that there exist cases where patch devel-
opment was lengthy and error-prone. Nappa et al. [27] shed light
on the patch deployment process from an end-user perspective,
analyzing when security updates were available to clients and how
quickly clients patched. In our work, we extensively explore new
aspects of patch development dynamics that require merging infor-
mation collected from vulnerability databases with that gleamed
from software source code, such as vulnerability life spans in the
code base and the timeliness of patching the code base relative
to public disclosure. In addition, we aim to generate generalizable
insights by studying a diverse set of over 650 open-source projects.
Explorations of bug fixes in general (beyond just security bugs)
have been performed in the software engineering community.
Zhong and Su [42] conducted an empirical study of over 9,000 bug
fixes across six Java projects. They framed their investigation
around patch properties that would make them suitable for genera-
tion by automatic program repair, finding that the majority are too
complex or too delocalized to likely be automatically created. Simi-
larly, Park et al. [29] studied supplementary bug fixes, additional
fixes produced when the initial fix was incomplete. Their analysis
covered three open-source projects and showed that over a quarter
of remedies required multiple patches. Sliwerski et. al. [33] investi-
gated two projects and correlated updates that required fixes with
the update sizes, finding larger updates were more likely to require
subsequent fixes. Soto et. al. [34] applied common bug fix patterns
to Java patches, finding that less than 15% could be matched.
While these works are similar in their focus on patch charac-
teristics, they mostly were conducted at a smaller scale, and do
not differentiate between different kinds of bugs. Security patches
are of special interest, given their importance in protecting users
and the time sensitivity of their development. We seek to tease
apart the differences between security and non-security bug fixes,
a distinction that has not been previously scrutinized extensively.
Most relevant is a case study performed by Zama et al. [41] on
security and performance fixes in Mozilla Firefox. They noted dif-
fering remediation rates and complexities between security and
performance patches. Perl et. al. [30] also analyzed Git commits
that fixed vulnerabilities to produce a code analysis tool that assists
in finding dangerous code commits. They found that indicative
features of problematic commits include code which handles errors
or manages memory, or is contributed by a new project developer.
Most recently, Xu et. al. [39] developed a method for identifying
security patches at the binary level based on execution traces, pro-
viding a method for obtaining and studying security patches on
binaries and closed-source software. These early findings highlight
the importance of considering different types of software bugs;
a deep understanding of security patches and their development
process can inform the security community in matters related to
vulnerability management.
3 DATA COLLECTION METHODOLOGY
To explore vulnerabilities and their fixes, we must collect secu-
rity patches and information pertaining to them and the remedied
security issues. Given this goal, we restricted our investigation
to open-source software for which we could access source code
repositories and associated meta-data. Our data collection centered
around the National Vulnerability Database (NVD) [37], a database
provided by the U.S. National Institute of Standards and Technology
(NIST) with information pertaining to publicly disclosed software
vulnerabilities. These vulnerabilities are identified by CVE (Com-
mon Vulnerabilities and Exposures) IDs [23]. We mined the NVD
and crawled external references to extract relevant information,
including the affected software repositories, associated security
patches, public disclosure dates, and vulnerability classifications.
Figure 1 depicts an overview of this process. In the remainder of this
section, we describe these various data sources and our collection
methodology.
Note that throughout our methodology, we frequently manually
inspected random samples of populations to confirm that the popu-
lation distributions accorded with our assumptions or expectations.
We chose sample sizes (typically of 100) such that they proved
manageable for manual analysis while large enough to reflect fine-
grained aspects of population distributions.
3.1 Finding Public Vulnerabilities
We relied on the NVD to find publicly disclosed vulnerabilities.
The NVD contains entries for each publicly released vulnerability
assigned a CVE identifier. When security researchers or vendors
Session J3:  Problematic PatchesCCS’17, October 30-November 3, 2017, Dallas, TX, USA22023.2 Identifying Software Repositories and
Security Patches
Many open-source version-controlled software repositories pro-
vide web interfaces to navigate project development (such as
git.kernel.org). We frequently observed URLs to these web interfaces
among the external references for CVE entries, linking to particular
repository commits that fixed the security vulnerability. These links
afforded us the ability to collect security patches and access the
source code repositories.
As Git is arguably the most popular version control system for
open-source software [31], we focused on references to Git web
interfaces. This popularity was consistent with the CVE external
references as well, where links to Git web interfaces were by far
the most common. We observed more than 5,700 unique URLs with
“git” as a substring, excluding those with another common substring
“digit”. To determine if these URLs were indeed related to Git, we
randomly sampled 100 URLs. The vast majority of these were asso-
ciated with Git web interfaces; only two out of the 100 URLs were
non-Git URLs. In comparison, 1,144 external references contained
“svn” (for SVN), 613 contained “cvs” (for CVS), and 347 contained
“hg” or “mercurial” (for Mercurial), significantly fewer for these
other popular version control systems compared to Git.
To find Git repositories and their security patches, we first
reverse-engineered the URL paths and parameters used by popular
Git web interfaces. These included cgit [2], GitWeb [6], github.com,
and GitLab [5], and accounted for 95% of references with “git” as a
substring. (Thus, to consider more Git web interfaces would have
required additional URL reverse-engineering while producing di-
minished returns.) We also identified only an additional 128 URLs
without “git” that were consistent with a common Git web interface,
suggesting that we identified the majority of Git URLs. For the 80%
of these Git URLs that linked to a particular commit (specified in Git
by a commit hash), we crawled the web interfaces’ summary/home
pages and extracted the Git clone URLs, if listed.
In total, we retrieved 4,080 commits across 682 unique Git repos-
itories, tied to 3,094 CVEs. Note that these repositories are distinct,
as we de-duplicated mirrored versions. It is possible that some com-
mits are not security fixes, as they may instead reference the change
that introduced the vulnerability, or may contain a proof-of-concept
exploit instead. However, we found that this is rarely the case. By
manually investigating 100 randomly sampled commits, we found
that all commits reflect fixes for the corresponding vulnerabilities.
3.3 Identifying Non-Security Bug Fixes
We can gain insight into any particularly distinct characteristics of
security patches by comparing them to non-security bug fixes. How-
ever, to do so at scale we must automatically identify non-security
bug fixes. We tackled this problem using a logistic regression that
models the character n-grams in Git commit messages to identify
likely bug fix commits.1
To train our commit classifier, we manually labeled 400 randomly
selected commits drawn from all Git repositories as bug fixes or
1We also explored other commit features for classification, such as the number of
files and lines affected by a commit, the type of commit changes (addition, deletion,
modification), the day of week the commit was made, and the time since the previous
commit. However, these did not provide adequate discriminating power.
Figure 1: An overview of our data collection methodology.
1. We extracted vulnerability characteristics from CVE en-
tries in the NVD with external references to Git commit
links. 2. We crawled other references and extracted page
publication dates to estimate public disclosure dates. 3. We
crawled the Git commit links to identify and clone the corre-
sponding Git source code repositories, and collected security
fixes using the commit hashes in the links. 4. We also used
the Git repositories to select non-security bug fixes.
identify a vulnerability, they can request a CVE Numbering Author-
ity (such as the MITRE Corporation) to assign a CVE ID to it. At this
point, information about the vulnerability may not yet be disclosed.
Upon public release of the vulnerability information, the CVE ID
along with its associated vulnerability information gets added to
the CVE list, which feeds the NVD. NVD analysts investigate the
vulnerability further, populating an entry for the CVE ID with addi-
tional information. In particular, they summarize the vulnerability,
link to relevant external references (such as security advisories
and reports), enumerate the affected software, identify the class
of security weakness under the Common Weakness Enumeration
(CWE) classifications [24], and evaluate the vulnerability severity
using the Common Vulnerability Scoring System (CVSS) [12, 35].
While there exist other vulnerability databases (e.g., securityfo-
cus.com, IBM’s X-Force Threat Intelligence, and securitytracker.com),
we focused on the NVD as it is: (1) public, free, and easily accessible
in XML format, allowing for reproducibility and follow-on studies,
(2) expansive, as the NVD aims to catalog all publicly disclosed
vulnerabilities across numerous software packages, (3) manually
vetted and curated, which in theory provides more accurate data,
and (4) detailed, containing extensive documentation of vulnerabil-
ities (notably external references).
We utilized the NVD XML dataset [38] as snapshotted on Decem-
ber 25th, 2016. Its 80,741 CVE vulnerabilities served as our starting
point for further data collection.