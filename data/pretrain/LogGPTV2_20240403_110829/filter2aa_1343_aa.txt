浅谈 PHP WebShell 的检测与防御
最近腾讯举办的⼀个webshell挑战赛，简单玩了⼀下，发现⼀些绕过的思路对于很多检测产品
都是通⽤的。说明这些产品在遇到的⼀些共性的检测难点上都没有⼀个很好的解决⽅案，以下
简单分析⼀下webshell检测的原理和困境以及⼀些绕过的思路。
正则识别
pass
ssdeep
通过模糊哈希匹配已知样本，可以允许⼀定范围内的修改，原理是分⽚分别计算哈希，连接后
得到字符串，⽐较时计算两个字符串的加权编辑距离，评估样本的相似度。加权编辑距离指⼀
个字符串最少经过多少次操作(增加、删除、修改、交换)得到另⼀个字符串，不同的操作对应
不同的权值，结果相加。
ssdeep只能针对已知样本⽽且没有⼤范围修改的情况，⽽且当样本量增加时⽐较操作的计算
量也会随之增加。ssdeep在恶意软件检测中有⽐较多的应⽤，但是针对webshell局限性⽐较
明显，⽤途有限。
静态分析
基本相当于⽩盒扫描，静态分析主要流程⼀般为词法分析、语法分析、污点分析。
词法分析(Lexical Analysis)
词法分析将字符序列转换为记号（token）序列的过程。词法只识别语素，不关⼼⼏号之间的
关系(⽐如括号是否匹配)。
直观的例⼦就是语法⾼亮，每⼀个不同颜⾊的⾊块就是⼀个token。php本身提供了⼀个 
token_get_all 和 PhpToken::tokenize ⽅法将php源码转换成token数组。
⼀个demo程序
解析出的token流
<?php
$cmd = $_GET["cmd"];
$f = $_GET['f'];
if ($f == "eval") {
    exit("denied");
}
$f($cmd);
T_OPEN_TAG: '<?php\n'
T_WHITESPACE: '\n'
T_VARIABLE: '$cmd'
T_WHITESPACE: ' '
CHARACTOR =
T_WHITESPACE: ' '
T_VARIABLE: '$_GET'
CHARACTOR [
T_CONSTANT_ENCAPSED_STRING: '"cmd"'
CHARACTOR ]
CHARACTOR ;
T_WHITESPACE: '\n\n'
T_VARIABLE: '$f'
T_WHITESPACE: ' '
CHARACTOR =
T_WHITESPACE: ' '
T_VARIABLE: '$_GET'
CHARACTOR [
T_CONSTANT_ENCAPSED_STRING: ''f''
CHARACTOR ]
CHARACTOR ;
T_WHITESPACE: '\n\n
//....
语法分析(Parsing)
语法分析是以词法分析结果(token 流)为输⼊，进⾏语法检查，分析语法结构，构建中间语⾔
的过程。⼀般来说中间语⾔有多种不同的表达形式。⽐如抽象语法树、三地址码、静态单赋值
形式。
抽象语法树
抽象语法树⼀般是语法分析的第⼀步中间结果，他的每个节点代表⼀个运算符，该节点的⼦节
点代表这个运算符的运算分量
** ⼯具： **可以使⽤PHP-Parser将php代码转为AST，从php 7开始本身内部也会⽣成AST，
可以使⽤php-ast扩展将内部的AST导出。
<?php
$cmd = $_GET["cmd"];
$f = $_GET['f'];
if ($f == "eval") {
    exit("denied");
}
$f($cmd);
静态单赋值形式(Static Single-assignment Form) 与控制流图（Control Flow
Graph）
AST虽然⽐较直观，但是并不适合直接⽤来进⾏污染传播分析，⼀般还需要转成静态单赋值形
式的控制流图。静态单赋值也是⼀种编译过程的中间语⾔，他的特点是每个变量都只被赋值⼀
次。控制流图是由基本块和有向边组成的图，每个基本块内部都是顺序的执⾏语句，有向边表
示节点直接的控制流路径。例如下⾯的例⼦。
⽣成的CFG如下：
<?php
$cmd = $_GET["cmd"];
$f = $_GET['f'];
if ($f == "eval") {
    $cmd = "exit('denied')";
}
$f($cmd);
** ⼯具： **可以使⽤php-cfg项⽬将php代码⽣成SSA形式的CFG。此外可以使⽤vld项⽬将
php内部的opcode导出，不过opcode不是SSA形式的，需要⾃⼰做⼀个简单的转化。
静态分析的缺陷
因为php动态弱类型的特性，灵活度极⾼，单纯静态分析漏报的可能性很⾼，最简单的例⼦⽐
如
静态分析⽆法获取 $a 的内容，所以不能判断第三⾏具体执⾏了哪个函数，也就⽆从检测了。
所以⼀般情况下webshell检测还需要结合动态分析。
动态分析
动态分析⼀般通过hook关键操作与函数的⽅式，构造⼀个沙箱的环境直接执⾏样本，执⾏过
程中可以对污点传播进⾏跟踪，当污点传播到敏感函数时即可判断漏洞存在（类似IAST）。
此外还可以结合静态分析的结果，例如下⾯例⼦中，静态分析发现test函数是sink点，但是找
不到调⽤信息，动态执⾏过程中发现test函数被调⽤，就可以判断为webshell。
动态分析实现过程中需要解决以下⼏个问题
hook php函数与操作
针对OP进⾏hook
php内核中每个OP都是⼀个handler函数负责的，可以使
⽤ zend_set_user_opcode_handler() ⽅法将handler函数替换为⾃⼰的
<?php
  $a = "sys" . "tm";
    $a($_GET["a"]);
<?php
  function test() {
        // eval code...
    }
    $a = "te" . "st";
    $a();
针对函数进⾏hook
直接修改php函数结构体内部的 internal_function.handler
污点标记与传播
php字符串的内部结构体 _zend_string 中有⼀个未使⽤的标记位 u.v.flags ，可以利⽤这个
标记位标记字符串是否被污染。
污染传播就hook字符串拼接转换等函数，执⾏的时候标记新的污点就可以了
分⽀执⾏
执⾏流程中有时候需要根据输⼊信息进⾏⼀些分⽀判断，例如下⾯的例⼦
如果执⾏不到if语句⾥⾯就⽆法判断webshell存在，所以这时候需要我们强制执⾏每个分⽀。
⽅法很简单，直接HOOK掉 JMPZ``JMPNZ 等opcode，根据需要决定执⾏哪个分⽀。
阿⾥云webshell检测的思路是根据CFG进⾏栈回溯，遇到分⽀时保存现场，执⾏完⼀个分⽀后
恢复现场再执⾏另外⼀个分⽀。详细的分⽀对抗细节可以参考XCON 2020的议题云安全环境
下恶意脚本检测的最佳实践。
动态分析的缺陷
1. 动态分析⽆法判断跳出循环的时机，可能导致循环执⾏不充分
<?php
  $func = "var_dump";
    if($_GET["active"] == "1") {
    $func = "system";
  }
    $func($_GET["cmd"]);
2. 分⽀爆炸的问题
动态执⾏时时间复杂度是O(2^n)，分⽀多了之后执⾏时间爆炸。
3. 依赖外部信息的“隐含分⽀”
机器学习