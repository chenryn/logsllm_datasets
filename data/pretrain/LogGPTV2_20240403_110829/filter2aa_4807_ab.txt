wget http://download.wikimedia.org/nowiki/latest/nowiki-latest-pages-articles.xml.bz2
​
bzcat nowiki-latest-pages-articles.xml.bz2 | grep '^[a-zA-Z]' | sed 's/[-_:.,;#@+?{}()&|§!¤%`<>="\/]/\ /g' | tr ' ' '\n' | sed 's/[0-9]//g' | sed 's/[^A-Za-z0-9]//g' | sed -e 's/./\L\0/g' | sed 's/[^abcdefghijklmnopqrstuvwxyzæøå]//g' | sort -u | pw-inspector -m1 -M20 > nowiki.lst
​
wc -l nowiki.lst
3567894
```
完美，我们在很短时间内获得35万字典。
另外一种获得指定语言字典的方法就是使用google和一个特别的网站github，用google搜索一下就可以得到你想要的。
```bash
greek wordlist site:github.com
greek dictionary site:github.com
```
还有我注意到我拉取下来的列表中，有一些类似于ÆØÅ的字符有时候被一些特殊字符替换了，所以记住下载完成之后快速浏览一下你的列表，如果有必要的话做一些替换。
当你下载完成并且解决了一些潜在的错误之后，用linux命令行对其进行分割，删除特殊字符，并且统一转换成小写。
```bash
sed -e 's/[;,()'\'']/ /g;s/ */ /g' list.txt | tr '[:upper:]' '[:lower:]' > newlist.txt
```
你现在应该有了一个又好又漂亮的特定语言的字典。 也应该理解为什么要学习类似 cut, tr, sed, awk, piping 的东西，于此同时，也应该知道重定向是一个多么该死的应用。
#### Bonus
这样你就可以获得名词和地名的列表，它们经常被用作密码，人们都爱自己的孩子和孙子，因此常用他们的名字作为密码。我稍微google了一下，从github上发现了这些，这些都是json格式的，但这不是问题。
linux 大法好
```bash
cat *.json | sed 's/,/\n/g' | cut -f '"' -f2 | sort -u > nornames.txt
​
wc -l nornames.txt
9785
```
现在我们又添加了一些单词。
我把这个添加到我的挪威列表里面并且去重，把他们放到一个文件里。
```bash
cat norsk.txt nor_names.txt sort -u > norsk.txt
​
wc norsk.txt -l
2191221
```
nice，又多了200万个不同的挪威单词。
#### 键盘漫步字典
键盘漫步是按照QWERTY键盘布局上的常规模式来创建容易记住的密码。显然，人们认为这样会生成安全的密码，但实际上它们是高度可预测的。因此，可以从键图生成这些组合，并且很容易做成字典。
几年前，Hashcat 发布了一个叫做 [kwprocessor](https://github.com/hashcat/kwprocessor) 的键盘漫步生成器。您可以使用它来基于多个模式和长度生成相当大的列表。生成2-16字符长列表的示例如下。
```bash
/kw.out -s 1 basechars/full.base keymaps/en.keymap routes/2-to-16-max-3-direction-changes.route -o words.txt
```
记住，在这个字典里运行基于规则的攻击不一定有意义。
另外一个选择就是使用上面提到的 `Keyboard-Combinations.txt`。
#### 目标字典
通常，在实际渗透测试项目中，您所处的企业具有非常特定的名称和细节信息。人们常常为服务帐户和用户帐户设置带有公司名称的密码。一个非常简单的技巧就是将一些公司相关名称写入一个列表，但更有效的方法是在企业的公共网站上使用Web爬虫工具 Cewl。
```bash
cewl -w list.txt -d 5 -m 5 http://example.com
```
我们应该有一个相当大的字典，它基于与该企业相关的词汇，比如名称、地点以及它们的许多商业术语。
另外一种针对性的策略就是使用用户名作为字典进行破解，但是要注意，很多密码策略是不允许这样设置密码的。
于此同时，如果你已经从域控制器中dump了数据库，那么你可能有所有员工的全名，一个技巧就是用他们的姓和名作为字典，用规则进行密码破解。这样可能提供一些额外的结果。
### 你能用到的一些hashcat选项
* 输出还没有破解的哈希 `--left`
* 以 hash:password 的形式输出已经破解的密码 `--show`
* 以 username:hash:password 的形式输出已经破解的密码。 `--show --username`
* 用 `-w ` 烧你的gpu，等级是 1-3
* 将已经破解的密码输出到文件 `--show --outfile cracked.txt --outfile-format 2 ` - 其中2表示输出结果。
* 让hashcat以会话的形式启动， 它可以暂停，并且使用`--session ` 的形式恢复。你可以在暂停会话的时候指定会话名。
## 在线hash破解工具
老实说，我不喜欢使用这些工具，尤其是不在实际渗透测试项目中使用。您不想向在线存储库提交一些你自己都不知道的东西以供永久存储。很奇怪，它永远不会被探测到，但还是要小心。如果你要提交来来自验室的散列或您已经知道明文的散列，那么Crackstation.net 是一个不错的选择。
## 域密码审计工具(DPAT)
一个python脚本，它将根据从域控制器转储的密码散列和密码破解文件（比如Hashcat生成的hashcat.potfile）生成密码使用统计数据。该报告是一个带有链接的HTML页面。
在包含散列文件（`username:lm:nt:`）和包含破解散列的potfile 上运行DPAT。以“domainusername”的格式将域管理列表添加到名为Domain_Admins的文件中。然后它也会显示你破解了多少人的密码。emmm
```bash
./dpat.py -n onlyntlm.txt -c hashcat.potfile -g Domain_Admins
```
打开html报告，感受一下
## 其他
### 清理
在破解了散列并交付报告之后，您可能需要同时清除哈希和破解密码。这很重要，因为您不想外泄或丢失企业的大量密码。对文件要非常小心，尤其是重定向到新文件时。记住要清理你的potfile，因为哈希是在破解之后存储在那里的。
### 彩虹表
彩虹表就是当哈希没有加盐的时候（比如NTLM），提前计算好哈希，并且在破解的时候直接比较。
[免费的彩虹表](https://web.archive.org/web/20160402172945/https://www.freerainbowtables.com/en/tables2)