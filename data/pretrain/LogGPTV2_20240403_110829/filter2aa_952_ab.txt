27) that adds propriety features to the normal IPC functionality
such as:
Assigning a predefined identification (ID) to each hardware
module, allowing it to be addressed efficiently by any
other component.
Components can whitelist or blacklist other IDs, controlling
and preventing communication from unprivileged
endpoints.
Anyone can monitor the creation or destruction of new
AF_MSM_IPC sockets.
A new AF_MSM_IPC socket always starts by default as a regular 
endpoint (no whitelist rules, and doesn’t receive any information 
when a new socket is created or destroyed). By issuing an IOCTL 
(IPC_ROUTER_IOCTL_BIND_CONTROL_PORT) on a regular socket 
(CLIENT_PORT), attackers can convert it to a monitoring socket 
(CONTROL_PORT).  
The vulnerability is located in the conversion function (figure 1), 
which uses a flawed locking logic to corrupt the monitoring 
sockets’ list.  Corrupting the sockets’ list is possible by deleting 
port_ptr (an extension struct to the original struct socket) from its 
list, using list_del function and while the local_ports_lock_lhc2 
lock is used.  
©2016 Check Point Software Technologies Ltd. All rights reserved.    |    8 
Figure 1: Conversion of a “CLIENT_PORT” socket to a “CONTROL_PORT” socket 
Calling this function on a monitoring socket removes the 
monitoring socket from its list while locking the regular sockets’ 
list, which has nothing to do with the monitoring sockets’ list. 
Attackers can use this vulnerability to corrupt control_ports list 
causing it to point to a free data, which they then control with 
heap spraying. Assuming an attacker can occupy the newly freed 
memory and control it, the kernel treats the sprayed memory like 
a regular msm_ipc_port object. 
As discussed, control_ports is a list of the monitoring sockets 
repeated each time notifications send for a socket creation or 
destruction. A function called post_control_ports notifies every 
item in the control_ports list. It goes over the list and calls the 
post_pkt_to_port function for each item. Figure 2 contains the 
functions source code, highlighting the variable representing a 
fake object. 
©2016 Check Point Software Technologies Ltd. All rights reserved.    |    9 
Figure 2: Function is called once the control_ports list is iterated, with 
the fake object marked. 
Faking a port_ptr allows for multiple methods of exploitation, as 
the object contains multiple function call primitives, information 
disclosure, and other helpful primitives.  
Attackers can take advantage of the lack of kASLR on Android 
devices and use the wake_up function. This function is a macro 
which eventually leads to a function called __wake_up_common 
(figure 3). 
©2016 Check Point Software Technologies Ltd. All rights reserved.    |    10 
Figure 3: the __wake_up_common function. 
By using __wake_up_common, an attacker can completely control 
the content (but not the address) of the q argument. 
Controlling q allows attackers to manipulate control q->task_list, 
enabling the attacker to call any kernel-function and control most 
of the first argument4. Since it is an iterated list, the attacker can 
call as many functions as they wish. 
The vulnerability’s exploit goal is to gain root privileges while 
disabling SELinux. The discussed primitive disables SELinux (since 
it is possible to just call enforce_setup, passing a “0” string as the 
first parameter), however, it is not enough to call to the 
commit_creds function to gain root privileges. 
To call commit_creds successfully, the attacker must ensure it 
doesn’t defer a user space memory address in another thread, 
resulting in a kernel crash. To do so, it can pass the kernel’s 
4 An attacker can only control most of the argument because the pointers to the function as well as the 
pointer to next are contained in curr. 
©2016 Check Point Software Technologies Ltd. All rights reserved.    |    11 
init_cred struct (shown in figure 4) as a first argument. This is 
possible due to the cred struct being statically allocated instead of 
allocated on the heap. 
However, since wake_up_common does not allow control of first 
argument memory address, another function that can must be 
found. Usb_read_done_work_fn is an excellent candidate. 
.
Figure 4: The init_cred struct, representing the permission that  
the init process receives. 
©2016 Check Point Software Technologies Ltd. All rights reserved.    |    12 
Figure 5: usb_read_done_work_fn function is used as a gadget 
to improve function-call primitive. 
Since the first argument is controllable, so are the ch pointer and 
also the req pointer, (derived from the ch pointer). The last line of 
code in figure 5 is exactly what the attacker needs –a call to an 
arbitrary function while controlling the address of the parameters 
(req->buf is a pointer). 
By then chaining the function calls, the attacker can create a q-
>task_list, granting root privileges and disabling SELinux.
The first function called in the chain is qdisc_list_del,
which allows the attacker to close the control_ports list,
preventing a fake object from being used multiple times.
©2016 Check Point Software Technologies Ltd. All rights reserved.    |    13 
The second function of the chain, enforcing_setup, sets up
a pointer to a string that contains ‘0’. This value sets the
SELinux status to “permissive”.
The last chained function is commit_creds, which receives
the function init_cred as the first argument. The function
sets the UID to 0, elevating the maximum capabilities
available on the system.
CVE-2016-5340 
Ashmem vulnerability 
Ashmem is Android’s propriety memory allocation subsystem that 
enables processes to efficiently share memory buffers. Devices 
using Qualcomm chipsets use a modified ashmem system that 
provides easy access to the subsystem API from the GPU drivers.  
The driver provides a convenient way to access an ashmem file’s 
struct file from a file descriptor. The driver supplies two new 
functions in the ashmem module to allow this: get_ashmem_file 
and put_ashmem_file. 
The function get_ashmem_file (figure 6) gets a file descriptor and 
checks whether the file descriptor points to an ashmem file. If the 
file descriptor points to it, the function extracts its private_data 
struct and returns it back to the caller. 
©2016 Check Point Software Technologies Ltd. All rights reserved.    |    14 
Figure 6: get_ashmem_file function added by Qualcomm to ease access 
to the ashmem API. 
The problem is in the is_ashmem_file function, which 
inappropriately checks the file type (figure 7). 
Figure 7: is_ashmem_file function. Obscure check for the file type of the given fd. 
©2016 Check Point Software Technologies Ltd. All rights reserved.    |    15 
Attackers can use a deprecated feature of Android, called Obb5 to 
create a file named ashmem on top of a file system. With this 
feature, an attacker can mount their own file system, creating a 
file in their root directory called “ashmem.”  
By sending the fd of this file to the get_ashmem_file function, an 
attacker can trick the system to think that the file they created is 
actually an ashmem file, while in reality, it can be any file. 
CVE-2016-2503, CVE-2106-2504 
Use after free due to race conditions in KGSL 
CVE-2016-2503 
One of Qualcomm’s GPU components is called “kgsl” (Kernel 
Graphics Support Layer). This kernel driver communicates with 
userland binaries to render graphics. While there are many 
modules in this driver, kgsl_sync is responsible for synchronization 
between the CPU and the apps. 
The vulnerability lies in the ‘destroy’ function. Creating and 
destroying this object can be done by IOCTLing the driver 
(/dev/kgsl-3d0) and sending the following IOCTLs: 
IOCTL_KGSL_SYNCSOURCE_CREATE
IOCTL_KGSL_SYNCSOURCE_DESTROY
5 More information can be found at https://developer.android.com/google/play/expansion-files.html 
©2016 Check Point Software Technologies Ltd. All rights reserved.    |    16 
Figure 8: kgsl_ioctl_syncsource_destroy function. Receives an ID of a 
syncsource object, checks for its preexistence and then destroys it. 
The function is prone to a race condition flaw, where two parallel 
threads call the function simultaneously. This could make the 
kernel force a context switch in one thread. This happens right 
after the kgsl_syncsource_get call to the second thread which will 
call this function too.  
Together, these two threads can pass the kgsl_syncsource_get 
before starting the refcount reduction. This drops the refcount of 
a syncsource object below 0, exposing itself to a use-after-free 
attack.  
CVE-2016-2504 
Another vulnerability is found in the kernel graphics support layer driver 
when a module called kgsl creates an object called kgsl_mem_entry 
(representing a GPU memory). Since a user-space process can allocate 
and map memory to the GPU, it can both create and destroy a 
kgsl_mem_entry.  
©2016 Check Point Software Technologies Ltd. All rights reserved.    |    17 
The kgsl_mem_entry is created using a function called 
kgsl_mem_entry_create. The function allocates memory for the 
kgsl_mem_entry objects and upon success, sets the refcount to 1 
using the kref mechanism.  
The allocated object is then passed to the function 
kgsl_mem_entry_attach_process (figure 9), binding it to a 
particular process. Process binding is done by either referencing 
kgsl_mem_entry using the “idr” mechanism, or through the GPU 
mapping mechanism (kgsl_mem_entry_track_gpuaddr). 
Once the kernel calls the idr_alloc function with kgsl_mem_entry 
as its argument (figure 9), attackers can free this specific id using 
another IOCTL (IOCTL_KGSL_GPUMEM_FREE_ID). Since there’s no 
access protection enforced, another thread can simply free this 
object, invoking an use-after-free flaw. 
©2016 Check Point Software Technologies Ltd. All rights reserved.    |    18 
Figure 9: kgsl_mem_entry_attach_process. Access to UM is granted before 
initialization of entry 
©2016 Check Point Software Technologies Ltd. All rights reserved.    |    19 
©2016 Check Point Software Technologies Ltd. All rights reserved. 
Learn More About 
Check Point Mobile Threat Prevention 
Schedule a Demo