      if ($ext == 'gif' && $type == IMAGETMPE_GIF)
        return true;
      if ($ext == 'jpg' && $type == IMAGETMPE_JPEG)
        return true;
      if ($ext == 'png' && $type == IMAGETMPE_PNG)
        return true;
      // 如果到最后都没有 return 就报错
      die(' 扩展名和图像类型不一致 ');
    }
下面为调用上述 check_image_type
 函数的部分。阴影部分即为添加的代码行。
代码清单 /4c/4c-002b.php
$tmpfile = $_FILES["imgfile"]["tmp_name"];
$orgfile = $_FILES["imgfile"]["name"];
if (! is_uploaded_file($tmpfile)) {
  die(' 文件没有上传 ');
}
// 校验图像
check_image_type($tmpfile, $orgfile);
$tofile = get_upload_file_name($orgfile);
专栏：BMP 格式的注意点与 MS07-057
本书中介绍了浏览器涉及的 3 种图像格式，即 GIF、JPEG 与 PNG，而有的浏览器也可以处理其他格式的图像文件。像 Windows 中的标准格式 BMP 也能够在主流的浏览器中显示。那么，遇到 BMP 格式时该如何处理呢？
其实上面介绍的方法并不能完美地处理 BMP 格式的图像。BMP 格式的图像文件头为 BM，但处理 BMP 图像时，即使 Content-Type 与文件头一致，IE 6 和 IE 7 中也有可能将其识别为 HTML 从而导致 JavaScript 被执行。
PNG 格式也曾经发生过与 BMP 相同的现象，但这个问题已经由 MS07-057 安全更新补丁（2007 年 10 月）所修复。由此可见，提醒用户安装最新的安全更新补丁是非常重要的。
另外，从实用性的角度来看，由于 BMP 很不适合压缩（只能使用单纯的压缩方式），并且 BMP 仅限于 Windows 使用，因此我们并没有必要非在互联网上使用 BMP 格式的文件。而需要使用 BMP 时也都可以用 PNG 格式来代替。
综上所述，这里不推荐大家在 Web 上使用 BMP 格式的文件。
文件下载时的对策
下载文件时的对策如下。
正确设置 Content-Type
图像文件的情况下确认其文件头
必要时设置 Content-Disposition 消息头
正确设置 Content-Type
在 PDF 文件下载所引起的 XSS 漏洞示例中，漏洞产生的主要原因均为 Content-Type 设置有误。因此，只要将 PDF 格式的 Content-Type 正确设置为 application/pdf，就能够消除漏洞。而且除 IE 之外，正确指定 Content-Type 这一对策也适用于其他所有的浏览器。
如果下载时不经过下载脚本而是将文件保存在公开目录中的话，就一定要确认 Web 服务器的设置是否有误。Apache 中，Content-Type 的设置被保存在了名为 mime.types 的配置文件中。PDF 等常见的软件一般不会有问题，而如果用到了很生僻的软件或自己设置 mime.types 时，请务必确保浏览器能够识别该 Content-Type。
图像文件的情况下确认其文件头
通过下载脚本来下载图像文件时，只要在下载时确认了文件头，即使由于某些原因 Web 服务器中混入了非法的图像文件，也不会影响到应用程序。
下面是实施了检验文件头对策的改良版的下载脚本（摘要）。阴影部分中调用了检验文件头的函数 check_image_type
 。
代码清单 /4c/4c-003b.php
 'image/jpeg', 'png' => 'image/png', 'gif' => 'image/gif');
$file = $_GET['file'];
$info = pathinfo($file);       // 取得图像类型
$ext = strtolower($info['extension']);     // 扩展名（统一为小写字母）
$content_type = $mimes[$ext]; // 取得 Content-Type
if (! $content_type) {
  die(' 只能上传扩展名为 gif、jpg 或 png 的图像文件 ');
}
$path = UPLOADPATH . '/' . basename($file);
check_image_type($path, $path);
header('Content-Type: ' . $content_type);
readfile($path);
?>
必要时设置 Content-Disposition 消息头
当下载的文件并不需要使用应用程序打开，而是只要求能够下载就行的情况下，可以在响应消息头中指定 Content-Disposition: attachment。这时，如果将 Content-Type 设为 application/octetstream，文件类型就变成了“用于下载的文件”。下面为消息头的设置示例。
Content-Type: application/octet-stream
Content-Disposition: attachment; filename="hogehoge.pdf"
这里，Content-Diaposition 消息头的选项属性 filename 被用于指定保存文件时的默认文件名。
其他对策
以上介绍的 XSS 对策是为了防范漏洞所需要进行的最低限度的校验处理。例如，仅校验图像文件头并无法确认是否真的能在用户的浏览器上显示。
因此在决定 Web 应用的详细规格时，还应当探讨是否要执行以下校验。
除了图像文件的大小之外还校验尺寸和色数等
校验文件是否能作为图像文件读取
扫描病毒（详情见 7.4 节）
校验文件内容（自动或手动）
成人内容
侵犯版权的内容
违反法律或妨害公共秩序的内容
其他
68
http://www.php.net/manual/zh/function.getimagesize.php
专栏：将图像托管在其他域名
2009 年左右，有些网站开始将图像托管在主服务域名之外的单独域名上。下面列举的就是一些将图像托管在其他域名的网站。
表 4-22 将图像托管在其他域名的网站案例
网站名
主域名
图像使用的域名
Yahoo ！ JAPAN
yahoo.co.jp
yimg.jp
YouTube
youtube.com
ytimg.com
niconico 动画
nicovideo.jp
nimg.jp
Twitter
twitter.com
twimg.com
Amazon.co.jp
amazon.co.jp-images
amazon.com
上面这些都是高流量的网站，虽然将图像使用的域名分离出来多是为了使网站的响应速度更快，但另一方面，这一操作也具有提升网站安全性的效果。
这是因为，将用户上传的图像或 PDF 等文件保存在其他域名后，即使图像文件造成的 XSS 攻击取得成功，也不会波及主服务。
下载时的 XSS 基本上属于浏览器的问题，由于这一问题在市场份额很高的 IE 中非常常见，而且至今尚未得到完全修复。因此，作为辅助性对策，最好考虑一下将图像存储在其他域名的方法。
参考：用户 PC 中没有安装对应的应用程序时
如果用户的 PC 中没有安装 Content-Type 所对应的应用程序，该 Content-Type 就会被浏览器视为“未知”，从而就可能会造成 XSS。
要处理此问题并不容易。但通过采取以下措施即可进行有效的防范。
托管文件的服务器使用其他域名
添加 Content-Disposition 消息头
然而，由于上述方法会产生副作用，因此建议采取以下方法，虽然可靠性略逊一筹但能保证没有副作用。
校验 URL 是否与应用中预想的一致
通知用户安装浏览文件所需的应用程序
总结
本节讲述了图像的上传与下载处理所引起的安全隐患。虽然上传处理造成的安全隐患一直以来都没有受到太大关注，但是，鉴于漏洞造成的影响较大，并且可照相手机的高速普及造成了照片分享网站的增加，此外存储服务网站也在快速增长，因此想必今后会有越来越多的 Web 应用需要警惕这个安全隐患。
文件上传与下载问题的基本对策为正确设置 Content-Type 和扩展名。图像文件的情况下，校验文件头是最起码的操作，此外，根据需要还应当校验图像文件的有效性。
参考文献
[1] はせがわようすけ .（2009 年 3 月 30 日）. [ 无视できない ]IE の Content-Type 无视（[ 无法忽视 ]IE 中对 Content-Type 的忽视）. 参考日期：2010 年 10 月 13 日 . 参考网址：@IT ：http://www.atmarkit.co.jp/ait/articles/0903/30/news118.html
[2] 德丸浩（2007 年 12 月 10 日）. 画像ファイルによるクロスサイト · スクリプティング (XSS) 倾向と対策（图像文件引起跨站脚本（XSS）的倾向与对策）. 参考日期：2010 年 10 月 13 日，参考网址：德丸浩の日记 : http://www.tokumaru.org/d/20071210.html
4.13 include 相关的问题
本节将讲述由能够使部分脚本从外界读入的 include 机制所引发的安全隐患。
4.13.1 文件包含攻击
概要
PHP 等脚本语言能够从外部文件读取脚本源代码的一部分。PHP 中对应的函数有 require
 、require_once
 、include
 、include_once
 。
如果外界能够指定 include
 的对象文件名，就可能会发生意料之外的文件被 include 而遭到攻击。这被称为文件包含漏洞 69
 。某些情况下，PHP 中还可以通过配置来指定外部服务器的 URL 作为文件名，这就被称为远程文件包含（RFI）。
69
 本书对安全隐患的命名参考了 CWE-98 中的记述（http://cwe.mitre.org/data/definitions/98.html
 2010 年 12 月 19 日）。关于 CWE（Common Weakness Enumeration，统一的软件漏洞一览定义工程）的说明，请参考 http://www.ipa.go.jp/security/vuln/CWE.html
 （日文）。
文件包含攻击的影响如下。
Web 服务器的文件被外界浏览而导致信息泄漏
脚本被任意执行所造成的影响。典型的影响如下
篡改网站
执行非法操作
攻击其他网站（垫脚石）
为了防范文件包含漏洞，建议实施以下任意一项对策。
避免 include 的路径名中包含外界传入的参数
include 的路径名中包含外界传入的参数时，限制其字符种类仅为字母和数字
文件包含漏洞总览
攻击手段与影响
接下来我们就来看一下文件包含攻击的手段与其影响。首先来看以下存在漏洞的示例脚本。
代码清单 /4d/4d-001.php
正文【省略】