SeDebugPrivilege
SeDelegateSessionUserImpersonatePrivilege
SeImpersonatePrivilege
SeIncreaseBasePriorityPrivilege
SeIncreaseQuotaPrivilege
SeIncreaseWorkingSetPrivilege
SeLoadDriverPrivilege
SeLockMemoryPrivilege
SeManageVolumePrivilege
SeProfileSingleProcessPrivilege
SeRestorePrivilege
SeSecurityPrivilege
SeShutdownPrivilege
SeSystemEnvironmentPrivilege
SeSystemProfilePrivilege
SeSystemtimePrivilege
SeTakeOwnershipPrivilege
SeTcbPrivilege
SeTimeZonePrivilege
SeTrustedCredManAccessPrivilege 
SeRelabelPrivilege
SeUndockPrivilege (client only)
SeAssignPrimaryTokenPrivilege
SeAuditPrivilege
SeChangeNotifyPrivilege
SeCreateGlobalPrivilege
SeImpersonatePrivilege
SeIncreaseQuotaPrivilege
SeIncreaseWorkingSetPrivilege
SeShutdownPrivilege
SeSystemtimePrivilege
SeTimeZonePrivilege
SeUndockPrivilege (client only)
SeChangeNotifyPrivilege
SeCreateGlobalPrivilege
SeImpersonatePrivilege
SeIncreaseWorkingSetPrivilege
SeShutdownPrivilege
SeTimeZonePrivilege
SeUndockPrivilege
The network service account
The network service account is intended for use by services that want to authenticate to other ma-
chines on the network using the computer account, as does the local system account, but do not have 
the need for membership in the Administrators group or the use of many of the privileges assigned to 
the local system account. Because the network service account does not belong to the Administrators 
group, services running in the network service account by default have access to far fewer registry keys, 
file system folders, and files than the services running in the local system account. Further, the assign-
ment of few privileges limits the scope of a compromised network service process. For example, a pro-
cess running in the network service account cannot load a device driver or open arbitrary processes.
Another difference between the network service and local system accounts is that processes run-
ning in the network service account use the network service account’s profile. The registry component 
of the network service profile loads under HKU\S-1-5-20, and the files and directories that make up the 
component reside in %SystemRoot%\ServiceProfiles\NetworkService.
A service that runs in the network service account is the DNS client, which is responsible for resolv-
ing DNS names and for locating domain controllers.
436 
CHAPTER 10 Management, diagnostics, and tracing
The local service account
The local service account is virtually identical to the network service account with the important dif-
ference that it can access only network resources that allow anonymous access. Table 10-10 shows that 
the network service account has the same privileges as the local service account, and Table 10-9 shows 
that it belongs to the same groups with the exception that it belongs to the local service group instead 
of the network service group. The profile used by processes running in the local service loads into 
HKU\S-1-5-19 and is stored in %SystemRoot%\ServiceProfiles\LocalService.
Examples of services that run in the local service account include the Remote Registry Service, which 
allows remote access to the local system’s registry, and the LmHosts service, which performs NetBIOS 
name resolution.
Running services in alternate accounts
Because of the restrictions just outlined, some services need to run with the security credentials of a 
user account. You can configure a service to run in an alternate account when the service is created or 
by specifying an account and password that the service should run under with the Windows Services 
MMC snap-in. In the Services snap-in, right-click a service and select Properties, click the Log On tab, 
and select the This Account option, as shown in Figure 10-10.
Note that when required to start, a service running with an alternate account is always launched us-
ing the alternate account credentials, even though the account is not currently logged on. This means 
that the user profile is loaded even though the user is not logged on. User Services, which are described 
later in this chapter (in the “User services” section), have also been designed to overcome this problem. 
They are loaded only when the user logs on.
FIGURE 10-10 Service account settings.
CHAPTER 10 Management, diagnostics, and tracing
437
Running with least privilege
A service’s process typically is subject to an all-or-nothing model, meaning that all privileges available 
to the account the service process is running under are available to a service running in the process that 
might require only a subset of those privileges. To better conform to the principle of least privilege, in 
which Windows assigns services only the privileges they require, developers can specify the privileges 
their service requires, and the SCM creates a security token that contains only those privileges.
Service developers use the ChangeServiceConfig2 API (specifying the SERVICE_CONFIG_REQUIRED_
PRIVILEGES _INFO information level) to indicate the list of privileges they desire. The API saves that 
information in the registry into the RequiredPrivileges value of the root service key (refer to Table 10-7). 
When the service starts, the SCM reads the key and adds those privileges to the token of the process in 
which the service is running.
If there is a RequiredPrivileges value and the service is a stand-alone service (running as a dedicated 
process), the SCM creates a token containing only the privileges that the service needs. For services 
running as part of a shared service process (as are a subset of services that are part of Windows) and 
specifying required privileges, the SCM computes the union of those privileges and combines them 
for the service-hosting process’s token. In other words, only the privileges not specified by any of the 
services that are hosted in the same service process will be removed. In the case in which the registry 
value does not exist, the SCM has no choice but to assume that the service is either incompatible with 
least privileges or requires all privileges to function. In this case, the full token is created, containing all 
privileges, and no additional security is offered by this model. To strip almost all privileges, services can 
specify only the Change Notify privilege.
Note The privileges a service specifies must be a subset of those that are available to the 
service account in which it runs.
EXPERIMENT: Viewing privileges required by services
You can view the privileges a service requires with the Service Control utility, sc.exe, and the 
qprivs option. Additionally, Process Explorer can show you information about the security token 
of any service process on the system, so you can compare the information returned by sc.exe 
with the privileges part of the token. The following steps show you how to do this for some of the 
best locked-down services on the system.
1.
Use sc.exe to look at the required privileges specified by CryptSvc by typing the follow-
ing into a command prompt:
sc qprivs cryptsvc
You should see three privileges being requested: the SeChangeNotifyPrivilege,
SeCreateGlobalPrivilege, and the SeImpersonatePrivilege.
EXPERIMENT: Viewing privileges required by services
You can view the privileges a service requires with the Service Control utility, sc.exe, and the 
qprivs option. Additionally, Process Explorer can show you information about the security token 
of any service process on the system, so you can compare the information returned by sc.exe 
with the privileges part of the token. The following steps show you how to do this for some of the 
best locked-down services on the system.
1.
Use sc.exe to look at the required privileges specified by CryptSvc by typing the follow-
ing into a command prompt:
sc qprivs cryptsvc
You should see three privileges being requested: the SeChangeNotifyPrivilege, 
SeCreateGlobalPrivilege, and the SeImpersonatePrivilege.
438 
CHAPTER 10 Management, diagnostics, and tracing
2.
Run Process Explorer as administrator and look at the process list.
You should see multiple Svchost.exe processes that are hosting the services on your
machine (in case Svchost splitting is enabled, the number of Svchost instances are even
more). Process Explorer highlights these in pink.
3.
CryptSvc is a service that runs in a shared hosting process. In Windows 10, locat-
ing the correct process instance is easily achievable through Task Manager. You do
not need to know the name of the Service DLL, which is listed in the HKLM\SYSTEM\
CurrentControlSet\Services\CryptSvc \Parameters registry key.
4.
Open Task Manager and look at the Services tab. You should easily find the PID of the
CryptSvc hosting process.
5.
Return to Process Explorer and double-click the Svchost.exe process that has the same
PID found by Task Manager to open the Properties dialog box.
6. 
Double check that the Services tab includes the CryptSvc service. If service splitting is en-
abled, it should contain only one service; otherwise, it will contain multiple services. Then
click the Security tab. You should see security information similar to the following figure:
2.
Run Process Explorer as administrator and look at the process list.
You should see multiple Svchost.exe processes that are hosting the services on your 
machine (in case Svchost splitting is enabled, the number of Svchost instances are even 
more). Process Explorer highlights these in pink.
3.
CryptSvc is a service that runs in a shared hosting process. In Windows 10, locat-
ing the correct process instance is easily achievable through Task Manager. You do 
not need to know the name of the Service DLL, which is listed in the HKLM\SYSTEM\
CurrentControlSet\Services\CryptSvc \Parameters registry key.
4.
Open Task Manager and look at the Services tab. You should easily find the PID of the 
CryptSvc hosting process.
5.
Return to Process Explorer and double-click the Svchost.exe process that has the same 
PID found by Task Manager to open the Properties dialog box.
6.
Double check that the Services tab includes the CryptSvc service. If service splitting is en-
abled, it should contain only one service; otherwise, it will contain multiple services. Then
click the Security tab. You should see security information similar to the following figure:
Security tab. You should see security information similar to the following figure:
Security
CHAPTER 10 Management, diagnostics, and tracing
439
Note that although the service is running as part of the local service account, the list of privi-
leges Windows assigned to it is much shorter than the list available to the local service account 
shown in Table 10-10.
For a service-hosting process, the privileges part of the token is the union of the privileges 
requested by all the services running inside it, so this must mean that services such as DnsCache 
and LanmanWorkstation have not requested privileges other than the ones shown by Process 
Explorer. You can verify this by running the Sc.exe tool on those other services as well (only if 
Svchost Service Splitting is disabled).
Service isolation
Although restricting the privileges that a service has access to helps lessen the ability of a compromised 
service process to compromise other processes, it does nothing to isolate the service from resources 
that the account in which it is running has access under normal conditions. As mentioned earlier, the 
local system account has complete access to critical system files, registry keys, and other securable 
objects on the system because the access control lists (ACLs) grant permissions to that account.
At times, access to some of these resources is critical to a service’s operation, whereas other objects 
should be secured from the service. Previously, to avoid running in the local system account to obtain 
access to required resources, a service would be run under a standard user account, and ACLs would be 
added on the system objects, which greatly increased the risk of malicious code attacking the system. 
Another solution was to create dedicated service accounts and set specific ACLs for each account (as-
sociated to a service), but this approach easily became an administrative hassle.
Windows now combines these two approaches into a much more manageable solution: it allows 
services to run in a nonprivileged account but still have access to specific privileged resources without 
lowering the security of those objects. Indeed, the ACLs on an object can now set permissions directly for 
a service, but not by requiring a dedicated account. Instead, Windows generates a service SID to repre-
sent a service, and this SID can be used to set permissions on resources such as registry keys and files. 
The Service Control Manager uses service SIDs in different ways. If the service is configured to be 
launched using a virtual service account (in the NT SERVICE\ domain), a service SID is generated and 
assigned as the main user of the new service’s token. The token will also be part of the NT SERVICE\ALL 
SERVICES group. This group is used by the system to allow a securable object to be accessed by any 
service. In the case of shared services, the SCM creates the service-hosting processes (a process that 
contains more than one service) with a token that contains the service SIDs of all services that are part 
of the service group associated with the process, including services that are not yet started (there is no 
way to add new SIDs after a token has been created). Restricted and unrestricted services (explained 
later in this section) always have a service SID in the hosting process’s token.
Note that although the service is running as part of the local service account, the list of privi-
leges Windows assigned to it is much shorter than the list available to the local service account 
shown in Table 10-10.
For a service-hosting process, the privileges part of the token is the union of the privileges 
requested by all the services running inside it, so this must mean that services such as DnsCache 
and LanmanWorkstation have not requested privileges other than the ones shown by Process 
Explorer. You can verify this by running the Sc.exe tool on those other services as well (only if 
Svchost Service Splitting is disabled).
440 
CHAPTER 10 Management, diagnostics, and tracing
EXPERIMENT: Understanding Service SIDs
In Chapter 9, we presented an experiment (“Understanding the security of the VM worker pro-
cess and the virtual hard disk files”) in which we showed how the system generates VM SIDs for 
different VM worker processes. Similar to the VM worker process, the system generates Service 
SIDs using a well-defined algorithm. This experiment uses Process Explorer to show service SIDs 
and explains how the system generates them.
First, you need to choose a service that runs with a virtual service account or under a re-
stricted/nonrestricted access token. Open the Registry Editor (by typing regedit in the Cortana 
search box) and navigate to the HKLM\SYSTEM\CurrentControlSet\Services registry key. Then 
select Find from the Edit menu. As discussed previously in this section, the service account is 
stored in the ObjectName registry value. Unfortunately, you would not find a lot of services run-
ning in a virtual service account (those accounts begin with the NT SERVICE\ virtual domain), so it 
is better if you look at a restricted token (unrestricted tokens work, too). Type ServiceSidType 
(the value of which is stored whether the Service should run with a restricted or unrestricted 
token) and click the Find Next button. 
For this experiment, you are looking for a restricted service account (which has the 
ServiceSidType value set to 3), but unrestricted services work well, too (the value is set to 1).  
If the desired value does not match, you can use the F3 button to find the next service. In this 
experiment, use the BFE service.
Open Process Explorer, search the BFE hosting process (refer to the previous experiment for 
understanding how to find the correct one), and double-click it. Select the Security tab and click 
the NT SERVICE\BFE Group (the human-readable notation of the service SID) or the service SID of 
your service if you have chosen another one. Note the extended group SID, which appears under 
the group list (if the service is running under a virtual service account, the service SID is instead 
shown by Process Explorer in the second line of the Security Tab):
S-1-5-80-1383147646-27650227-2710666058-1662982300-1023958487
The NT authority (ID 5) is responsible for the service SIDs, generated by using the service base 
RID (80) and by the SHA-1 hash of the uppercased UTF-16 Unicode string of the service name. 
SHA-1 is an algorithm that produces a 160-bit (20-bytes) value. In the Windows security world, 
this means that the SID will have 5 (4-bytes) sub-authority values. The SHA-1 hash of the Unicode 
(UTF-16) BFE service name is:
7e 28 71 52 b3 e8 a5 01 4a 7b 91 a1 9c 18 1f 63 d7 5d 08 3d
If you divide the produced hash in five groups of eight hexadecimal digits, you will find 
the following:
I 
0x5271287E (first DWORD value), which equals 1383147646 in decimal (remember that
Windows is a little endian OS)
I 
0x01A5E8B3 (second DWORD value), which equals 27650227 in decimal
EXPERIMENT: Understanding Service SIDs
In Chapter 9, we presented an experiment (“Understanding the security of the VM worker pro-
cess and the virtual hard disk files”) in which we showed how the system generates VM SIDs for 
different VM worker processes. Similar to the VM worker process, the system generates Service 
SIDs using a well-defined algorithm. This experiment uses Process Explorer to show service SIDs 
and explains how the system generates them.
First, you need to choose a service that runs with a virtual service account or under a re-
stricted/nonrestricted access token. Open the Registry Editor (by typing regedit in the Cortana 
search box) and navigate to the HKLM\SYSTEM\CurrentControlSet\Services registry key. Then 
select Find from the Edit menu. As discussed previously in this section, the service account is 
stored in the ObjectName registry value. Unfortunately, you would not find a lot of services run-
ning in a virtual service account (those accounts begin with the NT SERVICE\ virtual domain), so it 
is better if you look at a restricted token (unrestricted tokens work, too). Type ServiceSidType
(the value of which is stored whether the Service should run with a restricted or unrestricted 
token) and click the Find Next button. 
For this experiment, you are looking for a restricted service account (which has the 
ServiceSidType value set to 3), but unrestricted services work well, too (the value is set to 1). 
If the desired value does not match, you can use the F3 button to find the next service. In this 
experiment, use the BFE service.
Open Process Explorer, search the BFE hosting process (refer to the previous experiment for 
understanding how to find the correct one), and double-click it. Select the Security tab and click 
Security tab and click 
Security
the NT SERVICE\BFE Group (the human-readable notation of the service SID) or the service SID of 
your service if you have chosen another one. Note the extended group SID, which appears under 
the group list (if the service is running under a virtual service account, the service SID is instead 
shown by Process Explorer in the second line of the Security Tab):
S-1-5-80-1383147646-27650227-2710666058-1662982300-1023958487
The NT authority (ID 5) is responsible for the service SIDs, generated by using the service base 
RID (80) and by the SHA-1 hash of the uppercased UTF-16 Unicode string of the service name. 
SHA-1 is an algorithm that produces a 160-bit (20-bytes) value. In the Windows security world, 
this means that the SID will have 5 (4-bytes) sub-authority values. The SHA-1 hash of the Unicode 
(UTF-16) BFE service name is:
7e 28 71 52 b3 e8 a5 01 4a 7b 91 a1 9c 18 1f 63 d7 5d 08 3d
If you divide the produced hash in five groups of eight hexadecimal digits, you will find 
the following:
I
0x5271287E (first DWORD value), which equals 1383147646 in decimal (remember that 
Windows is a little endian OS)
I