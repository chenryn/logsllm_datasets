("operation not supported").
additionally, if the specified pathname is exactly "/bye",
then the supervisor terminates.
.pp
this program can be used to demonstrate various aspects of the
behavior of the seccomp user-space notification mechanism.
to help aid such demonstrations,
the program logs various messages to show the operation
of the target process (lines prefixed "t:") and the supervisor
(indented lines prefixed "s:").
.pp
in the following example, the target attempts to create the directory
.ir /tmp/x .
upon receiving the notification, the supervisor creates the directory on the
target's behalf,
and spoofs a success return to be received by the target process's
.br mkdir (2)
call.
.pp
.in +4n
.ex
$ \fb./seccomp_unotify /tmp/x\fp
t: pid = 23168
t: about to mkdir("/tmp/x")
        s: got notification (id 0x17445c4a0f4e0e3c) for pid 23168
        s: executing: mkdir("/tmp/x", 0700)
        s: success! spoofed return = 6
        s: sending response (flags = 0; val = 6; error = 0)
t: success: mkdir(2) returned 6
t: terminating
        s: target has terminated; bye
.ee
.in
.pp
in the above output, note that the spoofed return value seen by the target
process is 6 (the length of the pathname
.ir /tmp/x ),
whereas a normal
.br mkdir (2)
call returns 0 on success.
.pp
in the next example, the target attempts to create a directory using the
relative pathname
.ir ./sub .
since this pathname starts with "./",
the supervisor sends a
.b seccomp_user_notif_flag_continue
response to the kernel,
and the kernel then (successfully) executes the target process's
.br mkdir (2)
call.
.pp
.in +4n
.ex
$ \fb./seccomp_unotify ./sub\fp
t: pid = 23204
t: about to mkdir("./sub")
        s: got notification (id 0xddb16abe25b4c12) for pid 23204
        s: target can execute system call
        s: sending response (flags = 0x1; val = 0; error = 0)
t: success: mkdir(2) returned 0
t: terminating
        s: target has terminated; bye
.ee
.in
.pp
if the target process attempts to create a directory with
a pathname that doesn't start with "." and doesn't begin with the prefix
"/tmp/", then the supervisor spoofs an error return
.rb ( eopnotsupp ,
"operation not  supported")
for the target's
.br mkdir (2)
call (which is not executed):
.pp
.in +4n
.ex
$ \fb./seccomp_unotify /xxx\fp
t: pid = 23178
t: about to mkdir("/xxx")
        s: got notification (id 0xe7dc095d1c524e80) for pid 23178
        s: spoofing error response (operation not supported)
        s: sending response (flags = 0; val = 0; error = \-95)
t: error: mkdir(2): operation not supported
t: terminating
        s: target has terminated; bye
.ee
.in
.pp
in the next example,
the target process attempts to create a directory with the pathname
.br /tmp/nosuchdir/b .
upon receiving the notification,
the supervisor attempts to create that directory, but the
.br mkdir (2)
call fails because the directory
.br /tmp/nosuchdir
does not exist.
consequently, the supervisor spoofs an error return that passes the error
that it received back to the target process's
.br mkdir (2)
call.
.pp
.in +4n
.ex
$ \fb./seccomp_unotify /tmp/nosuchdir/b\fp
t: pid = 23199
t: about to mkdir("/tmp/nosuchdir/b")
        s: got notification (id 0x8744454293506046) for pid 23199
        s: executing: mkdir("/tmp/nosuchdir/b", 0700)
        s: failure! (errno = 2; no such file or directory)
        s: sending response (flags = 0; val = 0; error = \-2)
t: error: mkdir(2): no such file or directory
t: terminating
        s: target has terminated; bye
.ee
.in
.pp
if the supervisor receives a notification and sees that the
argument of the target's
.br mkdir (2)
is the string "/bye", then (as well as spoofing an
.b eopnotsupp
error), the supervisor terminates.
if the target process subsequently executes another
.br mkdir (2)
that triggers its seccomp filter to return the
.b seccomp_ret_user_notif
action value, then the kernel causes the target process's system call to
fail with the error
.b enosys
("function not implemented").
this is demonstrated by the following example:
.pp
.in +4n
.ex
$ \fb./seccomp_unotify /bye /tmp/y\fp
t: pid = 23185
t: about to mkdir("/bye")
        s: got notification (id 0xa81236b1d2f7b0f4) for pid 23185
        s: spoofing error response (operation not supported)
        s: sending response (flags = 0; val = 0; error = \-95)
        s: terminating **********
t: error: mkdir(2): operation not supported
t: about to mkdir("/tmp/y")
t: error: mkdir(2): function not implemented
t: terminating
.ee
.in
.\"
.ss program source
.ex
#define _gnu_source
#include 
#include 
#include 
#include 
#include 
#include 
#include 
#include 
#include 
#include 
#include 
#include 
#include 
#include 
#include 
#include 
#include 
#include 
#include 
#include 
#define errexit(msg)    do { perror(msg); exit(exit_failure); \e
                        } while (0)
/* send the file descriptor \(aqfd\(aq over the connected unix domain socket
   \(aqsockfd\(aq. returns 0 on success, or \-1 on error. */
static int
sendfd(int sockfd, int fd)
{
    struct msghdr msgh;
    struct iovec iov;
    int data;
    struct cmsghdr *cmsgp;
    /* allocate a char array of suitable size to hold the ancillary data.
       however, since this buffer is in reality a \(aqstruct cmsghdr\(aq, use a
       union to ensure that it is suitably aligned. */
    union {
        char   buf[cmsg_space(sizeof(int))];
                        /* space large enough to hold an \(aqint\(aq */
        struct cmsghdr align;
    } controlmsg;
    /* the \(aqmsg_name\(aq field can be used to specify the address of the
       destination socket when sending a datagram. however, we do not
       need to use this field because \(aqsockfd\(aq is a connected socket. */
    msgh.msg_name = null;
    msgh.msg_namelen = 0;
    /* on linux, we must transmit at least one byte of real data in
       order to send ancillary data. we transmit an arbitrary integer
       whose value is ignored by recvfd(). */
    msgh.msg_iov = &iov;
    msgh.msg_iovlen = 1;
    iov.iov_base = &data;
    iov.iov_len = sizeof(int);
    data = 12345;
    /* set \(aqmsghdr\(aq fields that describe ancillary data */
    msgh.msg_control = controlmsg.buf;
    msgh.msg_controllen = sizeof(controlmsg.buf);
    /* set up ancillary data describing file descriptor to send */
    cmsgp = cmsg_firsthdr(&msgh);
    cmsgp\->cmsg_level = sol_socket;
    cmsgp\->cmsg_type = scm_rights;
    cmsgp\->cmsg_len = cmsg_len(sizeof(int));
    memcpy(cmsg_data(cmsgp), &fd, sizeof(int));
    /* send real plus ancillary data */
    if (sendmsg(sockfd, &msgh, 0) == \-1)
        return \-1;
    return 0;
}
/* receive a file descriptor on a connected unix domain socket. returns
   the received file descriptor on success, or \-1 on error. */
static int
recvfd(int sockfd)
{
    struct msghdr msgh;
    struct iovec iov;
    int data, fd;
    ssize_t nr;
    /* allocate a char buffer for the ancillary data. see the comments
       in sendfd() */
    union {
        char   buf[cmsg_space(sizeof(int))];
        struct cmsghdr align;
    } controlmsg;
    struct cmsghdr *cmsgp;
    /* the \(aqmsg_name\(aq field can be used to obtain the address of the
       sending socket. however, we do not need this information. */
    msgh.msg_name = null;
    msgh.msg_namelen = 0;
    /* specify buffer for receiving real data */
    msgh.msg_iov = &iov;
    msgh.msg_iovlen = 1;
    iov.iov_base = &data;       /* real data is an \(aqint\(aq */
    iov.iov_len = sizeof(int);
    /* set \(aqmsghdr\(aq fields that describe ancillary data */
    msgh.msg_control = controlmsg.buf;
    msgh.msg_controllen = sizeof(controlmsg.buf);
    /* receive real plus ancillary data; real data is ignored */
    nr = recvmsg(sockfd, &msgh, 0);
    if (nr == \-1)
        return \-1;
    cmsgp = cmsg_firsthdr(&msgh);
    /* check the validity of the \(aqcmsghdr\(aq */
    if (cmsgp == null ||
            cmsgp\->cmsg_len != cmsg_len(sizeof(int)) ||
            cmsgp\->cmsg_level != sol_socket ||
            cmsgp\->cmsg_type != scm_rights) {
        errno = einval;
        return \-1;
    }
    /* return the received file descriptor to our caller */
    memcpy(&fd, cmsg_data(cmsgp), sizeof(int));
    return fd;
}
static void
sigchldhandler(int sig)
{
    char msg[] = "\ets: target has terminated; bye\en";
    write(stdout_fileno, msg, sizeof(msg) - 1);
    _exit(exit_success);
}
static int
seccomp(unsigned int operation, unsigned int flags, void *args)
{
    return syscall(__nr_seccomp, operation, flags, args);
}
/* the following is the x86\-64\-specific bpf boilerplate code for checking
   that the bpf program is running on the right architecture + abi. at
   completion of these instructions, the accumulator contains the system
   call number. */
/* for the x32 abi, all system call numbers have bit 30 set */
#define x32_syscall_bit         0x40000000
#define x86_64_check_arch_and_load_syscall_nr \e
        bpf_stmt(bpf_ld | bpf_w | bpf_abs, \e
                (offsetof(struct seccomp_data, arch))), \e
        bpf_jump(bpf_jmp | bpf_jeq | bpf_k, audit_arch_x86_64, 0, 2), \e
        bpf_stmt(bpf_ld | bpf_w | bpf_abs, \e
                 (offsetof(struct seccomp_data, nr))), \e
        bpf_jump(bpf_jmp | bpf_jge | bpf_k, x32_syscall_bit, 0, 1), \e
        bpf_stmt(bpf_ret | bpf_k, seccomp_ret_kill_process)
/* installnotifyfilter() installs a seccomp filter that generates
   user\-space notifications (seccomp_ret_user_notif) when the process
   calls mkdir(2); the filter allows all other system calls.
   the function return value is a file descriptor from which the
   user\-space notifications can be fetched. */
static int
installnotifyfilter(void)
{
    struct sock_filter filter[] = {
        x86_64_check_arch_and_load_syscall_nr,
        /* mkdir() triggers notification to user\-space supervisor */
        bpf_jump(bpf_jmp | bpf_jeq | bpf_k, __nr_mkdir, 0, 1),
        bpf_stmt(bpf_ret + bpf_k, seccomp_ret_user_notif),
        /* every other system call is allowed */
        bpf_stmt(bpf_ret | bpf_k, seccomp_ret_allow),
    };
    struct sock_fprog prog = {
        .len = sizeof(filter) / sizeof(filter[0]),
        .filter = filter,
    };
    /* install the filter with the seccomp_filter_flag_new_listener flag;
       as a result, seccomp() returns a notification file descriptor. */
    int notifyfd = seccomp(seccomp_set_mode_filter,
                           seccomp_filter_flag_new_listener, &prog);
    if (notifyfd == \-1)
        errexit("seccomp\-install\-notify\-filter");
    return notifyfd;
}
/* close a pair of sockets created by socketpair() */
static void
closesocketpair(int sockpair[2])
{
    if (close(sockpair[0]) == \-1)
        errexit("closesocketpair\-close\-0");
    if (close(sockpair[1]) == \-1)
        errexit("closesocketpair\-close\-1");
}
/* implementation of the target process; create a child process that:
   (1) installs a seccomp filter with the
       seccomp_filter_flag_new_listener flag;
   (2) writes the seccomp notification file descriptor returned from
       the previous step onto the unix domain socket, \(aqsockpair[0]\(aq;
   (3) calls mkdir(2) for each element of \(aqargv\(aq.
   the function return value in the parent is the pid of the child
   process; the child does not return from this function. */
static pid_t
targetprocess(int sockpair[2], char *argv[])
{
    pid_t targetpid = fork();
    if (targetpid == \-1)
        errexit("fork");
    if (targetpid > 0)          /* in parent, return pid of child */
        return targetpid;
    /* child falls through to here */
    printf("t: pid = %ld\en", (long) getpid());
    /* install seccomp filter(s) */
    if (prctl(pr_set_no_new_privs, 1, 0, 0, 0))
        errexit("prctl");
    int notifyfd = installnotifyfilter();
    /* pass the notification file descriptor to the tracing process over
       a unix domain socket */
    if (sendfd(sockpair[0], notifyfd) == \-1)
        errexit("sendfd");
    /* notification and socket fds are no longer needed in target */
    if (close(notifyfd) == \-1)
        errexit("close\-target\-notify\-fd");
    closesocketpair(sockpair);
    /* perform a mkdir() call for each of the command\-line arguments */
    for (char **ap = argv; *ap != null; ap++) {
        printf("\ent: about to mkdir(\e"%s\e")\en", *ap);
        int s = mkdir(*ap, 0700);
        if (s == \-1)
            perror("t: error: mkdir(2)");
        else
            printf("t: success: mkdir(2) returned %d\en", s);
    }
    printf("\ent: terminating\en");
    exit(exit_success);
}
/* check that the notification id provided by a seccomp_ioctl_notif_recv
   operation is still valid. it will no longer be valid if the target
   process has terminated or is no longer blocked in the system call that
   generated the notification (because it was interrupted by a signal).
   this operation can be used when doing such things as accessing
   /proc/pid files in the target process in order to avoid toctou race
   conditions where the pid that is returned by seccomp_ioctl_notif_recv
   terminates and is reused by another process. */
static bool
cookieisvalid(int notifyfd, uint64_t id)
{
    return ioctl(notifyfd, seccomp_ioctl_notif_id_valid, &id) == 0;
}
/* access the memory of the target process in order to fetch the
   pathname referred to by the system call argument \(aqargnum\(aq in
   \(aqreq\->data.args[]\(aq.  the pathname is returned in \(aqpath\(aq,
   a buffer of \(aqlen\(aq bytes allocated by the caller.
   returns true if the pathname is successfully fetched, and false
   otherwise. for possible causes of failure, see the comments below. */
static bool
gettargetpathname(struct seccomp_notif *req, int notifyfd,
                  int argnum, char *path, size_t len)
{
    char procmempath[path_max];
    snprintf(procmempath, sizeof(procmempath), "/proc/%d/mem", req\->pid);
    int procmemfd = open(procmempath, o_rdonly | o_cloexec);
    if (procmemfd == \-1)
        return false;
    /* check that the process whose info we are accessing is still alive
       and blocked in the system call that caused the notification.
       if the seccomp_ioctl_notif_id_valid operation (performed in
       cookieisvalid()) succeeded, we know that the /proc/pid/mem file
       descriptor that we opened corresponded to the process for which we
       received a notification. if that process subsequently terminates,
       then read() on that file descriptor will return 0 (eof). */
    if (!cookieisvalid(notifyfd, req\->id)) {
        close(procmemfd);
        return false;
    }
    /* read bytes at the location containing the pathname argument */
    ssize_t nread = pread(procmemfd, path, len, req\->data.args[argnum]);
    close(procmemfd);
    if (nread id)) {
        perror("\ets: notification id check failed!!!");
        return false;
    }
    /* even if the target\(aqs system call was not interrupted by a signal,
       we have no guarantees about what was in the memory of the target
       process. (the memory may have been modified by another thread, or
       even by an external attacking process.) we therefore treat the
       buffer returned by pread() as untrusted input. the buffer should
       contain a terminating null byte; if not, then we will trigger an
       error for the target process. */
    if (strnlen(path, nread) seccomp_notif);
    if (*req == null)