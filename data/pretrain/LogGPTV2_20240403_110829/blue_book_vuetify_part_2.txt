```
### Position elements with Flex
If the properties above don't give you the control you need you can use rows and
columns directly. Vuetify comes with a 12 point grid system built using
[Flexbox](css.md#flexbox-layout). The grid is used to create specific layouts
within an applicationâ€™s content.
Using `v-row` (as a flex-container) and `v-col` (as a flex-item).
```html
        One of three columns
        One of three columns
        One of three columns
```
[`v-row`](https://vuetifyjs.com/en/api/v-row/) has the next properties:
* `align`: set the [vertical alignment](#flex-align) of flex items (one of
    `start`, `center` and `end`). It also has one property for each device size
    (`align-md`, `align-xl`, ...). The `align-content` variation is also
    available.
* `justify`: set the [horizontal alignment](#flex-jusitfy) of the flex items (one of `start`,
    `center`, `end`, `space-around`, `space-between`). It also has one property for each device size
    (`justify-md`, `justify-xl`, ...).
* `no-gutters`: Removes the spaces between items.
* `dense`: Reduces the spaces between items.
[`v-col`](https://vuetifyjs.com/en/api/v-col/) has the next properties:
* `cols`: Sets the default number of columns the component extends. Available
    options are `1 -> 12` and `auto`. you can use `lg`, `md`, ... to define the
    number of columns for the other sizes.
* `offset`: Sets the default offset for the column. You can also use `offset-lg`
    and the other sizes.
#### Keep the structure even if some components are hidden
If you want the components to remain in their position even if the items around
disappear, you need to use `` and ``. For example:
```html
    Button
    Button
```
If instead you had use the next snippet, whenever one of the elements got
hidden, the rest would move around to fill up the remaining space.
```html
  Button
  Button
```
## [Themes](https://next.vuetifyjs.com/en/features/theme/)
Vuetify comes with two themes pre-installed, light and dark. To set the default
theme of your application, use the `defaultTheme` option.
!!! note "File: `src/plugins/vuetify.js`"
    ```javascript
    import { createApp } from 'vue'
    import { createVuetify } from 'vuetify'
    export default createVuetify({
      theme: {
        defaultTheme: 'dark'
      }
    })
    ```
Adding new themes is as easy as defining a new property in the `theme.themes`
object. A theme is a collection of colors and options that change the overall
look and feel of your application. One of these options designates the theme as
being either a light or dark variation. This makes it possible for Vuetify to
implement Material Design concepts such as elevated surfaces having a lighter
overlay color the higher up they are.
!!! note "File: `src/plugins/vuetify.js`"
    ```javascript
    import { createApp } from 'vue'
    import { createVuetify, ThemeDefinition } from 'vuetify'
    export default createVuetify({
      theme: {
        defaultTheme: 'myCustomLightTheme',
        themes: {
          myCustomLightTheme: {
            dark: false,
            colors: {
              background: '#FFFFFF',
              surface: '#FFFFFF',
              primary: '#510560',
              'primary-darken-1': '#3700B3',
              secondary: '#03DAC6',
              'secondary-darken-1': '#018786',
              error: '#B00020',
              info: '#2196F3',
              success: '#4CAF50',
              warning: '#FB8C00',
            }
          }
        }
      }
    })
    ```
To dynamically change theme during runtime.
```javascript
    toggle theme
    ...
```
Most components support the `theme` prop. When used, a new context is created
for that specific component and all of its children. In the following example,
the `v-btn` uses the dark theme applied by its parent `v-card`.
```javascript
      foo
```
# Elements
## [Cards](https://next.vuetifyjs.com/en/components/cards/)
The [`v-card`](https://next.vuetifyjs.com/en/api/v-card/) can be used to place
any kind of text on your site, in this case use the `variant=text`.
## [Buttons](https://next.vuetifyjs.com/en/api/v-btn/)
The `sizes` can be: `x-small`, `small`, `default`, `large`, `x-large`.
## Illustrations
You can get nice illustrations for your web on [Drawkit](https://drawkit.com),
for example I like to use the [Classic
kit](https://drawkit.com/product/drawkit-classic).
## [Icons](https://next.vuetifyjs.com/en/components/icons/)
The [`v-icon`](https://next.vuetifyjs.com/en/api/v-icon) component provides a large set of glyphs to provide context to various aspects of your application.
```html
fas fa-user
```
If you have the FontAwesome icons installed, browse them
[here](https://fontawesome.com/search)
### [Install font awesome icons](https://next.vuetifyjs.com/en/features/icon-fonts/#font-awesome-5-icons)
```bash
npm install @fortawesome/fontawesome-free -D
```
```javascript
// src/plugins/vuetify.js
import '@fortawesome/fontawesome-free/css/all.css' // Ensure your project is capable of handling css files
import { createVuetify } from 'vuetify'
import { aliases, fa } from 'vuetify/lib/iconsets/fa'
export default createVuetify({
  icons: {
    defaultSet: 'fa',
    aliases,
    sets: {
      fa,
    },
  },
})
```
```html
```
## Fonts
By default it uses the webfontload plugin which slows down a lot the page load,
instead you can install the fonts directly. For example for the Roboto font:
* Install the font
    ```bash
    npm install --save typeface-roboto
    ```
* Uninstall the webfontload plugin
    ```bash
    npm remove webfontloader
    ```
* Remove the loading of the webfontload in `/main.js` the lines:
    ```javascript
    import { loadFonts } from './plugins/webfontloader'
    loadFonts()
    ```
* Add the font in the `App.vue` file:
    ```html
    ```
## Carousels
Vuetify has their own
[carousel](https://dev.vuetifyjs.com/en/components/carousels/#custom-transition)
component, [here's it's API](https://next.vuetifyjs.com/en/api/v-carousel/). In
the [Awesome Vue.js
compilation](https://next.awesome-vue.js.org/components-and-libraries/ui-components.html#carousel)
there are other suggestions. As some users say, it looks like [Vuetify's doesn't
have the best responsive
behaviour](https://stackoverflow.com/questions/67532319/how-do-i-make-vuetify-carousel-images-responsive-especially-on-mobile-screens).
The best looking alternatives I've seen are:
* [vue-agile](#vue-agile):
    [Demo](https://lukaszflorczak.github.io/vue-agile/).
* [vue-picture-swipe](https://github.com/rap2hpoutre/vue-picture-swipe)
* [vue-slick-carousel](https://github.com/gs-shop/vue-slick-carousel):
    [Demo](https://gs-shop.github.io/vue-slick-carousel/#/example/simple). It
    doesn't yet support Vue3
* [swiper](https://github.com/nolimits4web/swiper): [Demo](https://swiperjs.com/demos)
* [vue-splide](https://github.com/Splidejs/vue-splide): [Demo](https://splidejs.com/)
### Vuetify component
I tried binding the model with `v-model` but when I click on the arrows, the
image doesn't change and the binded property doesn't change. If I change the
property with other component, the image does change
### [vue-agile](https://github.com/lukaszflorczak/vue-agile)
If you encounter the `modules have no default` error, [add this to your
`vite.config.js`](https://github.com/lukaszflorczak/vue-agile/issues/237):
```javascript
export default defineConfig({
  ...
  optimizeDeps: { include: [ 'lodash.throttle', 'lodash.orderby' ] },
  ...
})
```
### Small vertical carousel
If you want to do a vertical carousel for example the one shown in the video
playlists, you can't yet use
[`v-slide-group`](https://github.com/vuetifyjs/vuetify/issues/11006).
[vue-agile](#vue-agile) doesn't either yet have [vertical
option](https://github.com/lukaszflorczak/vue-agile/issues/96).
## Audio
* [vuejs-sound-player](https://github.com/shershen08/vuejs-sound-player?ref=madewithvuejs.com)
* [vue-audio-visual](https://github.com/staskobzar/vue-audio-visual): [Demo](https://staskobzar.github.io/vue-audio-visual/)
* [vue3-audio-player](https://github.com/RealCoolSnow/vue3-audio-player?ref=vuejsexamples.com):
    [Demo](http://vue3-audio-player.joy666.cn/)
* [vuetify-audio](https://github.com/wilsonwu/vuetify-audio?ref=madewithvuejs.com):
    [Demo](https://wilsonwu.github.io/dist/index.html#/vuetifyaudio)
# Testing
I tried doing component tests with Jest, [Vitest](vitest.md) and [Cypress](cypress.md) and found no
way of making component tests, they all fail one way or the other.
E2E tests worked with Cypress however, that's going to be my way of action till
this is solved.
# References
* [Docs](https://vuetifyjs.com/en/getting-started/installation/)
* [Home](https://vuetifyjs.com/en/)
* [Git](https://github.com/vuetifyjs/vuetify)
* [Discord](https://community.vuetifyjs.com/)