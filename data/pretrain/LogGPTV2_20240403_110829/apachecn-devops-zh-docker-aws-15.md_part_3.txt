INFO: Created Auto Scaling launch configuration named: awseb-e-amv5i5upx4-stack-AWSEBAutoScalingLaunchConfiguration-8QN6BJJX43H
INFO: Deleted Auto Scaling launch configuration named: awseb-e-amv5i5upx4-stack-AWSEBAutoScalingLaunchConfiguration-JR6N80L37H2G
INFO: Successfully deployed new configuration to environment.
```
请注意，设置 SSH 访问要求您终止现有实例并创建新实例，因为您只能在创建时将 SSH 密钥对与 EC2 实例相关联。选择您在本书前面创建的现有`admin`密钥对后，命令行界面将终止现有实例，创建一个新的启用 SSH 访问的自动扩展启动配置，然后启动新实例。
You can avoid this step by configuring an EC2 key pair in the Security section of the configuration wizard when creating the Elastic Beanstalk application.
现在，您可以通过 SSH 进入您的弹性 Beanstalk EC2 实例，如下所示:
```
> eb ssh -e "ssh -i ~/.ssh/admin.pem"
INFO: Attempting to open port 22.
INFO: SSH port 22 open.
INFO: Running ssh -i ~/.ssh/admin.pem PI:EMAIL
The authenticity of host '34.239.245.78 (34.239.245.78)' can't be established.
ECDSA key fingerprint is SHA256:93m8hag/EtCPb5i7YrYHUXFPloaN0yUHMVFFnbMlcLE.
Are you sure you want to continue connecting (yes/no)? yes
Warning: Permanently added '34.239.245.78' (ECDSA) to the list of known hosts.
 _____ _ _ _ ____ _ _ _
| ____| | __ _ ___| |_(_) ___| __ ) ___ __ _ _ __ ___| |_ __ _| | | __
| _| | |/ _` / __| __| |/ __| _ \ / _ \/ _` | '_ \/ __| __/ _` | | |/ /
| |___| | (_| \__ \ |_| | (__| |_) | __/ (_| | | | \__ \ || (_| | | .pem`的 SSH 私钥，在本例中为`~/.ssh/admin.pem`。如果您的 SSH 私钥在不同的位置，您可以使用`-e`标志来覆盖所使用的文件，如前面的示例所示。
现在，您可以看看您的弹性 Beanstalk EC2 实例。假设我们正在运行一个 Docker 应用，您可能首先倾向于运行`docker ps`命令来查看当前正在运行的容器:
```
[ec2-user@ip-172-31-20-192 ~]$ docker ps
Got permission denied while trying to connect to the Docker daemon socket at unix:///var/run/docker.sock: Get http://%2Fvar%2Frun%2Fdocker.sock/v1.37/containers/json: dial unix /var/run/docker.sock: connect: permission denied
```
有点令人惊讶的是，标准的`ec2-user`不能访问 Docker——为了解决这个问题，我们需要添加更高级的配置，称为 **ebextensions** 。
# 定制弹性 Beanstalk 应用
如前一节所述，我们需要添加一个 ebextension，它只是一个配置文件，可以用来将您的弹性 Beanstalk 环境定制到我们现有的弹性 Beanstalk 应用中。这是一个需要理解的重要概念，因为我们最终将使用相同的方法来解决我们的应用当前存在的所有问题。
要配置`ebextensions`，首先需要在当前存储`Dockerrun.aws.json`文件的`eb`文件夹中创建一个名为`.ebextensions`的文件夹(注意，您需要断开 SSH 会话，转到您的弹性 Beanstalk EC2 实例，并在您的本地环境中执行此操作):
```
todobackend/eb> mkdir .ebextensions todobackend/eb> touch .ebextensions/init.config
```
在应用部署期间，`.ebextensions`文件夹中扩展名为`.config`的每个文件将被视为 ebextension，并由 Elastic Beanstalk 处理。在前面的例子中，我们创建了一个名为`init.config`的文件，现在我们可以对其进行配置以允许`ec2-user`访问 Docker 引擎:
```
commands:
  01_add_ec2_user_to_docker_group:
    command: usermod -aG docker ec2-user
    ignoreErrors: true
```
我们向`commands`键添加了一个名为`01_add_ec2_user_to_docker_group`的命令指令，它是一个顶级属性，定义了在应用的最新版本被设置和部署到实例之前应该运行的命令。该命令运行`usermod`命令，以确保`ec2-user`是`docker`组的成员，该组将授予`ec2-user`对 Docker 引擎的访问权限。请注意，您可以使用`ignoreErrors`属性来确保忽略任何命令失败。
有了这个配置，我们可以通过在`eb`文件夹中运行`eb deploy`命令来部署我们应用的新版本，这将自动为我们现有的`Dockerrun.aws.json`和新的`.ebextensions/init.config`文件创建一个 ZIP 存档:
```
todobackend-aws/eb> rm app.zip
todobackend-aws/eb> eb deploy
Uploading todobackend/app-180715_195517.zip to S3\. This may take a while.
Upload Complete.
INFO: Environment update is starting.
INFO: Deploying new version to instance(s).
INFO: Stopping ECS task arn:aws:ecs:us-east-1:385605022855:task/dd2a2379-1b2c-4398-9f44-b7c25d338c67.
INFO: ECS task: arn:aws:ecs:us-east-1:385605022855:task/dd2a2379-1b2c-4398-9f44-b7c25d338c67 is STOPPED.
INFO: Starting new ECS task with awseb-Todobackend-env-amv5i5upx4:3.
INFO: ECS task: arn:aws:ecs:us-east-1:385605022855:task/d9fa5a87-1329-401a-ba26-eb18957f5070 is RUNNING.
INFO: New application version was deployed to running EC2 instances.
INFO: Environment update completed successfully.
```
我们首先删除您第一次创建弹性 Beanstalk 应用时创建的初始`app.zip`档案，因为`eb deploy`命令会自动处理这个问题。您可以看到，一旦上传了新配置，部署过程就包括停止和启动运行我们应用的 ECS 任务。
一旦部署完成，如果您建立到弹性 Beanstalk EC2 实例的新 SSH 会话，您应该会看到您现在能够运行`docker`命令:
```
[ec2-user@ip-172-31-20-192 ~]$ docker ps --format "{{.ID}}: {{.Image}}"
63183a7d3e67: 385605022855.dkr.ecr.us-east-1.amazonaws.com/docker-in-aws/todobackend
45bf3329a686: amazon/amazon-ecs-agent:latest
```
您可以看到该实例当前正在运行 todobackend 容器，并且还运行了 ECS 代理。这表明弹性 Beanstalk 中的 Docker 支持在后台使用 ECS 来管理和部署基于容器的应用。
# 解决 Docker 卷权限问题
在本章的前面，我们遇到了 collectstatic 容器无法写入公共卷的问题。这里的问题是，运行在弹性 Beanstalk EC2 实例上的 ECS 代理创建了一个*绑定*挂载，这些挂载总是用根权限创建的。这阻止了我们的 collectstatic 容器运行的应用用户写入公共卷，因此我们需要一些方法来解决这个问题。
正如我们已经看到的那样，`ebextensions`功能可以在 Elastic Beanstalk EC2 实例上运行命令，我们将再次利用该功能来确保公共卷被配置为允许我们容器中的`app`用户读写`.ebextensions/init.config`文件:
```
commands:
  01_add_ec2_user_to_docker_group:
    command: usermod -aG docker ec2-user
    ignoreErrors: true
 02_docker_volumes:
 command: |
 mkdir -p /tmp/public
 chown -R 1000:1000 /tmp/public
```
我们添加了一个名为`02_docker_volumes`的新命令指令，它将在`01_add_ec2_user_to_docker_group`命令之后执行。请注意，您可以使用 YAML 管道操作符(`|`)来指定多行命令字符串，从而允许您指定多个要运行的命令。我们首先在`Dockerrun.aws.json`文件中创建公共卷宿主`sourcePath`属性引用的`/tmp/public`文件夹，然后确保`1000:1000`的用户 ID/组 ID 值拥有该文件夹。因为应用用户的用户标识为 1000，组标识为 1000，这将使以该用户身份运行的任何进程能够写入公共卷和从公共卷读取。
此时，您可以使用`eb deploy`命令将新的应用配置上传到弹性 Beanstalk(参见前面的示例)。部署完成后，您可以通过运行`eb open`命令浏览到您的应用的网址，现在您应该可以看到 todobackend 应用的静态内容和格式是正确的。
# 配置数据库设置
我们已经解决了访问公共卷的问题，但是应用仍然无法工作，因为我们没有传入任何环境变量来配置数据库设置。这样做的原因是，当您在弹性 Beanstalk 中配置数据库时，所有数据库设置都可以通过以下环境变量获得:
*   `RDS_HOSTNAME`
*   `RDS_USERNAME`
*   `RDS_PASSWORD`
*   `RDS_DB_NAME`
*   `RDS_PORT`
todobackend 应用的问题是，它需要以 MYSQL 为前缀的数据库相关设置，例如，`MYSQL_HOST`用于配置数据库主机名。虽然我们可以更新我们的应用以使用 RDS 前缀的环境变量，但我们可能希望将我们的应用部署到其他云提供商，RDS 是一种特定于 AWS 的技术。
另一种方法(尽管更复杂)是将环境变量映射写入弹性 Beanstalk 实例上的一个文件，将其配置为 todobackend 应用容器可以访问的卷，然后修改我们的 Docker 映像，以便在容器启动时注入这些映射。这要求我们修改位于`todobackend`存储库根目录下的`entrypoint.sh`文件中的 todobackend 应用的入口点脚本:
```
#!/bin/bash
set -e -o pipefail
# Inject AWS Secrets Manager Secrets
# Read space delimited list of secret names from SECRETS environment variable
echo "Processing secrets [${SECRETS}]..."
read -r -a secrets =`的环境变量设置，例如:
```
MYSQL_HOST=abc.xyz.com
MYSQL_USERNAME=todobackend
...
...
```
使用前面的格式，我们使用`export $(cat /init/environment | xargs)`命令，该命令使用前面的示例扩展到`export MYSQL_HOST=abc.xyz.com MYSQL_USERNAME=todobackend ... ...`，确保在`/init/environment`文件中定义的每个环境变量都被导出到环境中。
如果您现在将更改提交到`todobackend`存储库并运行`make login`、`make test`、`make release`和`make publish`命令，最新的`todobackend` Docker 映像现在将包含更新的入口点脚本。现在，我们需要修改`todobackend-aws/eb`文件夹中的`Dockerrun.aws.json`文件，以定义一个名为`init`的新卷和挂载:
```
{
  "AWSEBDockerrunVersion": 2,
  "volumes": [
    {
      "name": "public",
      "host": {"sourcePath": "/tmp/public"}
    },
 {
 "name": "init",
 "host": {"sourcePath": "/tmp/init"}
 }
  ],
  "containerDefinitions": [
    {
      "name": "todobackend",
      "image": "385605022855.dkr.ecr.us-east-1.amazonaws.com/docker-in-aws/todobackend",
      "essential": true,
      "memoryReservation": 395,
      "mountPoints": [
        {
          "sourceVolume": "public",
          "containerPath": "/public"
        },
{
 "sourceVolume": "init",
 "containerPath": "/init"
 }
      ],
      "environment": [
{"name":"DJANGO_SETTINGS_MODULE","value":"todobackend.settings_release"}
      ],
   ...
   ...
```
将这个卷映射到 Elastic Beanstalk EC2 实例上的`/tmp/init`和`todobackend`容器中的`/init`，我们现在需要做的就是将环境变量设置写入 EC2 实例上的`/tmp/init/environment`，它将在`todobackend`容器中显示为`/init/environment`，并使用我们对入口点脚本所做的修改来触发文件的处理。这里的想法是，我们将把 Elastic Beanstalk RDS 实例设置写入 todobackend 应用期望的适当环境变量设置。