title:Chrome Extensions: Threat Analysis and Countermeasures
author:Lei Liu and
Xinwen Zhang and
Guanhua Yan and
Songqing Chen
Chrome	
  Extensions:	
  Threat	
  Analysis	
and	
  Countermeasures	
Lei	
  Liu,	
  Xinwen	
  Zhang*,	
  Guanhua	
  Yan*,	
  and	
  Songqing	
  Chen	
George	
  Mason	
  University	
Huawei	
  R&D	
  Center	
Los	
  Alamos	
  NaIonal	
  Laboratory	
NDSS’12	
*	
  Does	
  not	
  represent	
  employer’s	
  opinion	
AOacks	
  via	
  Extensions	
•  Extension	
  is	
  the	
  vehicle	
  for	
  increasing	
  aOacks	
•  BHO/add-­‐on	
  is	
  the	
  one	
  of	
  the	
  techniques	
  used	
  by	
many	
  spyware	
  writers	
  in	
  IE.	
•  Kida	
  et	
  al’05,	
  CERT’05,	
  Egele’07,	
  Li’07,	
  Guha’11	
•  Abusing	
  of	
  Firefox	
  extensions	
  has	
  been	
  widely	
recognized	
  and	
  studied	
  in	
  literature	
•  Defcon’09,	
  Ter-­‐Louw’08,	
  Dhawan’09,	
  Bandhakav’10,	
Djeric’10,	
  Guha’11	
AOacks	
  via	
  Chrome	
  Extensions	
•  Buggy	
  Chrome	
  extensions	
  have	
  been	
idenIﬁed	
  recently	
•  27	
  out	
  of	
  100	
  leak	
  data	
–  hOp://www.adrienneporterfelt.com/blog/?p=226_	
•  Malicious	
  extensions	
  have	
  appeared	
Problem	
  Statement	
•  Why	
  Chrome	
  extension?	
–  Chrome	
  has	
  built-­‐in	
  security	
  model	
  for	
  browser	
  architecture	
  and	
  extension	
• 
• 
• 
• 
Is	
  current	
  Chrome	
  extension	
  architecture	
  good	
  enough?	
– 
ParIcularly	
  with	
  the	
  consideraIon	
  of	
  malicious	
  extensions	
It	
  is	
  a	
  diﬃcult	
  task	
  to	
  saniIze	
  rapidly	
  increasing	
  extensions	
  in	
  Google	
  Chrome	
  Web	
  Store	
  with	
  slow	
  reviewing	
process	
Easy	
  to	
  launch	
  malicious	
  extensions:	
– 
–  Users	
  are	
  free	
  to	
  download/install	
  extensions	
  from	
  many	
  (known/unknown)	
  host	
  servers	
– 
Strong	
  incenIve	
  for	
  aOackers,	
  e.g.,	
harvest	
  sensiIve	
  content	
  in	
  web	
  pages	
• 
•  Modify	
  web	
  search	
  content	
Google	
  takes	
  acIons	
  against	
  malicious	
  extension	
  developers	
– 
–  Domain	
  veriﬁcaIon	
  for	
  developers	
singup	
  fee	
  for	
  developers	
Problem:	
  Can	
  we	
  have	
  a	
  technical	
  soluIon?	
–  Or	
  improvement	
  of	
  current	
  permission	
  model	
  for	
  beOer	
  security	
  with	
  malware	
  extension?	
ContribuIons	
•  We	
  demonstrate	
  several	
  aOacks	
  with	
  malicious	
  Chrome	
extensions	
  through	
  experimental	
  implementaIon	
•  We	
  do	
  security	
  analysis	
  of	
  the	
  permission	
  model	
  of	
Chrome	
  extension	
–  With	
  the	
  assumpIon	
  of	
  malicious	
  extensions	
•  We	
  propose	
  security	
  enhanced	
  extension	
  permission	
model	
  and	
  enforcement	
  mechanism	
–  Following	
  the	
  principles	
  of	
  least	
  privilege	
  and	
  separaIon	
  of	
privilege	
  in	
  more	
  strict	
  way	
Chrome	
  Extension	
  Architecture	
Web	
  server	
Extension	
  gallery	
installaIon	
Localstorage	
Cookies	
JS	
DOM	
Render	
Content	
Script	
  (java	
  script)	
Isolated	
  World	
Extension	
(HTML/Javascript)	
y
r
a
d
n
u
o
b
s
s
e
c
o
r
P
NaIve	
code	
y
r
a
d
n
u
o
b
s
s
e
c
o
r
P
Chrome	
  Extension	
  Security	
  Model	
Least	
  Privilege	
–  Pre-­‐deﬁned	
  permission	
  set	
  (e.g.,.	
  To	
  access	
  web	
  sites,	
  browser	
  tab,	
  bookmarks,	
  history,	
  …)	
–  Each	
  extension	
  declares	
  permissions	
  required	
–  User	
  authorizes	
  permissions	
  at	
  installaIon	
  Ime	
Privilege	
  SeparaIon	
–  Diﬀerent	
  permissions	
  for	
  diﬀerent	
  components	
  of	
  extension	
–  Content	
  script	
  can	
  interact	
  with	
  web	
  content,	
  not	
  browser	
  modules	
–  Extension	
  core	
  has	
  more	
  privileges,	
  but	
  insulated	
  from	
  web	
  pages	
• 
• 
• 
–  Process-­‐level	
  isolaIon:	
  extension	
  core	
  runs	
  in	
  separated	
  process	
  from	
  renderer	
  and	
  browser	
–  Within	
  a	
  renderer	
  process,	
  content	
  script	
  runs	
  in	
  isolated	
  world	
  from	
  Javascript	
  of	
  web	
  page	
Strong	
  isolaIon	
–  Same	
  origin	
  policy	
•  Each	
  extension	
  has	
  unique	
  origin	
•  Accessing	
  other	
  origins	
  requires	
  cross-­‐site	
  permissions	
• 
Inject	
  content	
  script	
  requires	
  cross-­‐site	
  permissions	
Chrome	
  Extension	
  Trust	
  Model	
•  The	
  main	
  trust	
  model	
  of	
  Chrome	
  extension	
assumes	
  trusted	
  but	
  buggy	
  extensions	
•  But	
  malicious	
  web	
  pages	
•  Therefore	
  the	
  security	
  objecIves	
  are	
  mainly	
  for	
restricIng	
  web	
  pages	
  to	
  access	
  browser	
resources	
  via	
  extensions	
•  And	
  conﬁne	
  the	
  damage	
  propagaIon	
  if	
  possible	
Experimental	
  AOacks	
•  We	
  develop	
  a	
  malicious	
  extension	
  as	
  a	
  bot	
– 	
  from	
  Chrome	
  7	
  to	
  the	
  latest	
– does	
  email	
  spamming,	
  DDoS,	
  and	
  phishing	
  aOacks	
easily	
•  Through	
  aOacking	
  web	
  pages	
– Receive	
  commands	
  from	
  bot	
  master	
  with	
  built-­‐in	
update	
  mechanism	
  of	
  Chrome	
  extension	
•  No	
  security	
  check	
  for	
  update	
Email	
  Spamming	
Upload	
  update	
update	
site	
Webmail	
  server	
POST	
POST	
Browser	
download	
  update	
manipulate	
Extension	
Password	
  Sniﬃng	
DDoS	
  AOack	
Security	
  Analysis	
•  Trust	
  Model:	
trustworthy	
–  We	
  assume	
  browser	
  kernel	
  and	
  pulgins	
  are	
–  Sandbox	
  mechanism	
  provided	
  by	
  OS	
  works	
  well	
–  NaIve	
  code	
  for	
  extensions	
  is	
  sandboxed	
–  Web	
  apps	
  are	
  trusted	
•  Threat	
  model:	
  malicious	
  extensions	
–  Extension	
  core	
–  Content	
  scripts	
Cross-­‐site	
  Forgery	
  with	
  Content	
  Script	
Web	
  server	
• 
• 
• 
• 
A	
  content	
  script	
  injected	
  into	
  web	
  page	
  can	
arbitrary	
  access	
  the	
  origin	
  of	
  the	
  page	
All	
  user	
  credenIals	
  associated	
  with	
  the	
  origin	
can	
  be	
  included	
  in	
  an	
  HTTP	
  req	
Since	
  the	
  origin	
  of	
  the	
  content	
  script	
  is	
  usually	
not	
  that	
  of	
  the	
  web	
  page	
This	
  is	
  a	
  Cross-­‐site	
  Forgery	
  Req	
The	
  email	
  spamming	
  aOack	
  leverages	
  this	
– 
– 