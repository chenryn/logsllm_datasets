title:Profiling Attacker Behavior Following SSH Compromises
author:Daniel Ramsbrock and
Robin Berthier and
Michel Cukier
Profiling Attacker Behavior Following SSH Compromises
Department of Computer Science
University of Maryland, College Park
Daniel Ramsbrock
PI:EMAIL
Abstract
This   practical   experience   report   presents   the 
results of an experiment aimed at building a profile of 
attacker   behavior   following   a   remote   compromise.  
For this experiment, we utilized four Linux honeypot 
computers   running   SSH   with   easily   guessable 
passwords. During the course of our research, we also  
determined the most commonly attempted usernames 
and   passwords,   the   average   number   of   attempted  
logins per day, and the ratio of failed to successful 
attempts. To build a profile of attacker behavior, we 
looked for specific actions taken by the attacker and 
the order in which they occurred. These actions were: 
checking  the configuration,  changing the password, 
downloading   a   file,   installing/running   rogue   code,  
and changing the system configuration.
1. Introduction
Most   security   analysis   experiments   focus   on 
methods for keeping attackers out of target systems but 
do   little   to   address   their   behavior   after   a   remote 
compromise. In  this  experiment,  we focused  almost 
exclusively   on   post-compromise   attacker   behavior. 
Our goal was to build a profile of short-term attacker 
behavior,   capturing   the   actions   in   the   minutes   and 
hours after the initial compromise.
To achieve this goal, we utilized a set of honeypot 
computers running SSH on Linux. Attackers routinely 
scan   for   this   service   and   use   it   for   gaining   both 
privileged and non-privileged remote access. The very 
nature of the experiment required us to observe a large 
number of successful compromises in order to draw 
conclusions   about   typical   post-compromise   attacker 
behavior. To ensure a large number of compromises, 
we used commonly tried passwords to attract attackers 
with a low level of sophistication (the so-called “script 
kiddies” who rely heavily on automated hacking tools 
and dictionary attacks).
Section 2 below describes the experimental setup, 
including the software configuration and usernames/ 
Robin Berthier, Michel Cukier
Center for Risk and Reliability
Department of Mechanical Engineering
University of Maryland, College Park
PI:EMAIL, PI:EMAIL
passwords found on the honeypots, the data collection 
methods, and the typical lifecycle of a honeypot in this 
experiment. Section 3 presents the basic statistics we 
gathered as part of this experiment, focusing on the 
most commonly attempted usernames and passwords. 
Section 4 presents our findings,  including  the post-
compromise   attacker   profile   in   the   form   of  a   state 
machine. Section 5 reviews related work in the area of 
honeypots and attacker behavior research, and Section 
6 presents our conclusions.
2. Experimental setup
To collect attacker data, we used a set of four high-
interaction Linux honeypot computers as part of the 
existing   testbed   architecture   at   the   University   of 
Maryland. The honeypots are on a separate network 
that limits outgoing connections to minimize damage 
but   allows   all   incoming   connections.   For   details 
regarding the testbed architecture, please refer to [1].
2.1. Software configuration
The four honeypots all ran on an identical Linux 
disk image: a slimmed-down install of Fedora Core 3, 
updated with the latest patches as of October 10, 2006. 
Since the primary interaction with the systems was via 
SSH, the install  only included a text-mode environ-
ment (the X Window system and associated graphical 
programs were not installed).
To monitor attacker activity, we used the following 
tools: a modified OpenSSH sever to collect attempted 
passwords, syslog-ng to remotely log important system 
events, including logins and password changes, strace 
to   record   all   system   calls   made   by  incoming   SSH 
connections, and the Honeynet Project's Sebek tool [2] 
to   secretly  collect   all   keystrokes   on   incoming   SSH 
connections.
The only modification to the OpenSSH source tree 
was  the addition  of a  single  line  of code that  uses 
syslog to record all passwords being tried.
Authorized licensed use limited to: Tsinghua University. Downloaded on March 20,2021 at 05:38:51 UTC from IEEE Xplore.  Restrictions apply. 
37th Annual IEEE/IFIP International Conference on Dependable Systems and Networks (DSN'07)0-7695-2855-4/07 $20.00  © 20072.2. User accounts and passwords
Each honeypot had one privileged root account plus 
five non-privileged user accounts. To get an idea about 
commonly   tried   usernames,   we   ran   some   initial 
experiments. Based on these results, we decided to use 
the following usernames: admin, mysql, oracle, sarah, 
and louise. These experiments also revealed that the 
most   commonly   tried   passwords   were   '(username)', 
'(username)123',   'password',   and   '123456',   where 
(username) represents the username being tried. We 
rotated among these four passwords for each username 
as  follows:  after   a   compromise,   we  re-deployed  the 
honeypot and moved on to the next password in the 
list   (see   Section   2.4   for   details   regarding   the   re-
deployment policy).
In order to encourage attackers to enter the non-
privileged user accounts instead of the root account, 
two  of  the   honeypots  were  set  up   with   strong   root 
passwords. The other two honeypots had root accounts 
which   rotated   among   the   four   passwords   'root', 
'root123', 'password', and '123456'.
2.3. Data collection
Two servers were responsible for collecting data: 
one was dedicated to syslog data and the other one 
collected Sebek data, strace data, and hourly snapshots 
of the .bash_history and wtmp files.
Sebek and syslog-ng were configured to send data 
to   the   servers   continuously.   To   transfer   the   large 
amounts   of   strace   data,   we   set   up   an   automated, 
compressed hourly transfer. This was done via SCP 
using public keys and a hidden system account called 
'sysadm'.
2.4. Honeypot lifecycle
To ensure quick turnaround after a compromise, we 
used a pre-built disk image and automated scripts to 
manage   the   deployment   of   the   honeypots.   We 
monitored   the   syslog   messages   coming   from   each 
honeypot at least every 24 hours to check for logins 
and password changes. In this context, we defined a 
compromise as an unauthorized login followed by a 
password   change,   rather   than   using   the   traditional 
definition   of  an   unauthorized   login   only.  Password 
changes   typically   happened   every   day,   with   the 
observed   average   time   from   honeypot   deployment 
until the first password change being 11:25 hours.
Re-deploying   immediately   after   an   unauthorized 
login   would   have   limited   our   results:   due   to   the 
automated   nature   of   the   dictionary   attacks,   many 
attackers   successfully   gained   access   but   did   not 
perform  any actions  once  they had   a shell.  On  the 
other hand,  keeping the honeypot running  for more 
than   a   few  hours   after   a   password   change   is   not 
productive for observing short-term attacker behavior: 
once the password has been changed for an account, 
all other attackers are locked out of it.
Following a password change, we waited at least 
one hour before we copied the disk image back onto 
the   honeypot,   re-ran   the   deployment   script,   and 
continued monitoring the live syslog data.
3. Attacker statistics
During   the   24-day  period   from  November   14  to 
December   8,  2006,   attackers   from  229  unique   IP 
addresses attempted to log in a total of 269,262 times 
(an average of 2,805 attempts per computer per day). 
Out   of  these,   824   logged   in   successfully,   and   157 
changed an account password. The detailed figures for 
each honeypot are listed in Table 1.
Table 1. Login attempts per honeypot
Honeypot
HP1
HP2
HP3
HP4
Total
Attempted Successful
66,087
69,044
72,953
61,178
269,262
267
228
159
170
824
Password
49
43
31
34
157
Despite the fact that we used commonly attempted 
usernames and passwords, we were surprised to find 
that   only   0.31   percent   of   attempted   attacks   were 
successful. Even more surprisingly, only 22.09 percent 
of the time (in 182 out of 824 cases) did the attacker 
run any commands. In 25 cases, the attacker did not 
change   the   password   despite   running   other   com-
mands. Overall, this resulted in only a 19.05 percent 
rate of password change among successful logins. This 
trend   can   possibly  be   explained   by  the   automated 
nature of the attacks: if a low-skill attacker is using 
scripts to attack dozens of systems at once, he may not 
have time to take advantage of all compromised hosts.
Table 2. Top attempted usernames
Rank Username
1.
2.
3.
4.
5.
6.
7.
8.
9.
10.
root
admin
test
guest
info
adm
mysql
user
administrator
oracle
Attempts
33,238
4,392
3,012
2,274
1,825
1,563
1,379
1,317
1,205
1,169
Percent
12.34%
1.63%
1.12%
0.84%
0.68%
0.58%
0.51%
0.49%
0.45%
0.43%
As described in Section 2, we logged all attempted 
Authorized licensed use limited to: Tsinghua University. Downloaded on March 20,2021 at 05:38:51 UTC from IEEE Xplore.  Restrictions apply. 
37th Annual IEEE/IFIP International Conference on Dependable Systems and Networks (DSN'07)0-7695-2855-4/07 $20.00  © 2007usernames and passwords. Among the most commonly 
tried usernames, the privileged root account was by far 
the most popular choice  (see Table 2). Even though 
attackers   attempted   a   total   of   12,225   different 
usernames, the top 1,000 accounted for 72.45 percent 
of  all  attempts.   System  administrators   should  avoid 
these accounts when possible, or otherwise ensure that 
they   have   strong   passwords.   The   root   account   is 
required, but SSH access to it should be disabled.
Table 3. Top attempted passwords
Rank
1.
2.
3.
4.
5.
6.
7.
8.
9.
10.
Password
(username)
(username)123
123456
password
1234
12345
passwd
123
test
1
Attempts
115,877
23,362
19,177
5,742
3,981
3,890
3,793
3,682
3,564
2,925
Percent
43.04%
8.68%
7.12%
2.13%
1.48%
1.44%
1.41%
1.37%
1.32%
1.09%
While compiling data on the most commonly used 
passwords   (see   Table   3),   we  noticed   that   attackers 
were   trying   variations   on   the   username   as   the 
password. In many cases the attempted password was 
the username itself or the username followed by '123'. 
As a result, we specifically looked for patterns where 
the password contained the username, and it turned 
out that  by far the most common password was the 
username   itself.   This   combination   accounted   for 
almost half of all attempts, and the username followed 
by '123' was the second most popular choice. We also 
saw a third pattern of this type: the username followed 
by '321'. However, it did not occur frequently enough 
to appear in the top 10 list (2552 times, equaling 0.95 
percent). Our pattern-based analysis of the attempted 
passwords provides a clearer picture of the underlying 
trends   than   do   traditional   methods,   such   as   exact 
string   matching.   This   result   again   emphasizes   the 
point   that   a   password   should   never   be  identical   or 
even related to its associated username.
In a similar study by Alata and colleagues [3], the 
authors had the same results for the accounts being 
tried  (Table  2  above).  Not  only  were  the  top  three 
accounts   the   same,   but   the   percentages   each   was 
attempted were nearly identical.
4. Results
While basic statistics about attackers can provide some 
insight, the main purpose of this experiment was to 
build a profile of post-compromise attacker behavior. 
To do this, we developed a list of seven states that 
represent the typical observed actions (such as 'change 
password' and 'download file'). We then built a state 
machine   showing   the   number   of   times   attackers 
changed from one state to another. A state transition is 
an  indication of sequence: an  edge from state X to 
state Y indicates that the attacker engages in activity 
X first, then in activity Y (without engaging in any 
other activity Z in between).
4.1. State definitions
To build the state machine of attacker behavior, we 
defined seven states as follows.