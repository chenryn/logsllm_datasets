read and write isolation provided by PKU. Meltdown-PK
works if an attacker has code execution in the containing
process, even if the attacker cannot execute the wrpkru in-
struction (e.g., blacklisting). Moreover, in contrast to cross-
privilege level Meltdown attack variants, there is no software
workaround. According to Intel [36], Meltdown-PK can be
mitigated using address space isolation. Recent Meltdown-
resistant Intel processors enumerating RDCL_NO plus PKU
support furthermore mitigate Meltdown-PK in silicon. With
those mitigations, the memory addresses that might be re-
vealed by transient execution attacks can be limited.
Experimental Results. We tested Meltdown-PK on an Ama-
zon EC2 C5 instance running Ubuntu 18.04 with PKU sup-
port. We created a memory mapping and used PKU to remove
both read and write access. As expected, protected memory
accesses produce a #PF. However, our proof-of-concept man-
ages to leak the data via an adversarial transient instruction
sequence with a Flush+Reload covert channel.
4.7 Meltdown-BR (Bounds Check Bypass)
To facilitate efﬁcient software instrumentation, x86 CPUs
come with dedicated hardware instructions that raise a bound-
range-exceeded exception (#BR) when encountering out-of-
bound array indices. The IA-32 ISA, for instance, deﬁnes
a bound opcode for this purpose. While the bound instruc-
tion was omitted in the subsequent x86-64 ISA, modern Intel
CPUs ship with Memory Protection eXtensions (MPX) for
efﬁcient array bounds checking.
Our systematic evaluation revealed that Meltdown-type
effects of the #BR exception had not been thoroughly investi-
gated yet. Speciﬁcally, Intel’s analysis [40] only brieﬂy men-
tions MPX-based bounds check bypass as a possibility, and
Table 5: CPU vendors vulnerable to Meltdown (MD).
D-G P[8,35]
D-P[85,90]
M [78]
D-R W [48]
D-U S[56]
D-B R
D-P K
D-N
M
M
M
M
M
M
M
D-D E
M
D-A C
M
D-U D
M
D-SS
M
D-S M
D-X D
M
Attack
M
Vendor
Intel
ARM
AMD
Symbols indicate whether at least one CPU model is vulnerable (ﬁlled) vs.
no CPU is known to be vulnerable (empty). Glossary: reproduced (
),
). All tests performed
ﬁrst shown in this paper ( vs.
without defenses enabled.
), not applicable (
vs.
recent defensive work by Dong et al. [16] highlights the need
to introduce a memory lfence after MPX bounds check in-
structions. They classify this as a Spectre-type attack, imply-
ing that the lfence is needed to prevent the branch predictor
from speculating on the outcome of the bounds check. Ac-
cording to Oleksenko et al. [64], neither bndcl nor bndcu
exert pressure on the branch predictor, indicating that there
is no prediction happening. Based on that, we argue that the
classiﬁcation as a Spectre-type attack is misleading as no
prediction is involved. The observation by Dong et al. [16]
indeed does not shed light on the #BR exception as the root
cause for the MPX bounds check bypass, and they do not con-
sider IA32 bound protection at all. Similar to Spectre-PHT,
Meltdown-BR is a bounds check bypass, but instead of mis-
training a predictor it exploits the lazy handling of the raised
#BR exception.
Experimental Results. We introduce the Meltdown-BR at-
tack which exploits transient execution following a #BR excep-
tion to encode out-of-bounds secrets that are never architec-
turally visible. As such, Meltdown-BR is an exception-driven
alternative for Spectre-PHT. Our proofs-of-concept demon-
strate out-of-bounds leakage through a Flush+Reload covert
channel for an array index safeguarded by either IA32 bound
(Intel, AMD), or state-of-the-art MPX protection (Intel-only).
For Intel, we ran the attacks on a Skylake i5-6200U CPU with
MPX support, and for AMD we evaluated both an E2-2000
and a Ryzen Threadripper 1920X. This is the ﬁrst experiment
demonstrating a Meltdown-type transient execution attack
exploiting delayed exception handling on AMD CPUs [4, 56].
4.8 Residual Meltdown (Negative Results)
We systematically studied transient execution leakage for
other, not yet tested exceptions. In our experiments, we con-
sistently found no traces of transient execution beyond traps
or aborts, which leads us to the hypothesis that Meltdown is
only possible with faults (as they can occur at any moment
during instruction execution). Still, the possibility remains
that our experiments failed and that they are possible. Table 5
and Figure 1 summarize experimental results for fault types
tested on Intel, ARM, and AMD.
Division Errors. For the divide-by-zero experiment, we
leveraged the signed division instruction (idiv on x86 and
USENIX Association
28th USENIX Security Symposium    257
Table 6: Gadget classiﬁcation according to the attack ﬂow and whether executed by the attacker (
3. Transient
1. Preface
), victim (
), or either (
5. Reconstruction
).
Attack
Covert channel [1, 74, 92]
Meltdown-US/RW/GP/NM/PK [8, 48, 56, 78]
Meltdown-P [85, 90]
Meltdown-BR
Spectre-PHT [50]
Spectre-BTB/RSB [13, 50, 52, 59]
Spectre-STL [29]
NetSpectre [74]
Flush/Prime/Evict
(Exception suppression)
(L1 prefetch)
-
-
PHT poisoning
BTB/RSB poisoning
Thrash/reset
2. Trigger example
-
mov/rdmsr/FPU
mov
bound/bndclu
jz
call/jmp/ret
mov
jz
Load/AVX/Port/...
Controlled encode
Controlled encode
Inadvertent leak
Inadvertent leak
ROP-style encode
Inadvertent leak
Inadvertent leak
Reload/Probe/Time
Exception handling
& controlled decode
same as above
Controlled decode
Controlled decode
Controlled decode
Inadvertent transmit
sdiv on ARM). On the ARMs we tested, there is no excep-
tion, but the division yields merely zero. On x86, the division
raises a divide-by-zero exception (#DE). Both on the AMD
and Intel we tested, the CPU continues with the transient exe-
cution after the exception. In both cases, the result register is
set to ‘0’, which is the same result as on the tested ARM. Thus,
according to our experiments Meltdown-DE is not possible,
as no real values are leaked.
Supervisor Access. Although supervisor mode access pre-
vention (SMAP) raises a page fault (#PF) when accessing
user-space memory from the kernel, it seems to be free of any
Meltdown effect in our experiments. Thus, we were not able
to leak any data using Meltdown-SM in our experiments.
Alignment Faults. Upon detecting an unaligned memory
operand, the CPU may generate an alignment check exception
(#AC). In our tests, the results of unaligned memory accesses
never reach the transient execution. We suspect that this is
because #AC is generated early-on, even before the operand’s
virtual address is translated to a physical one. Hence, our ex-
periments with Meltdown-AC were unsuccessful in showing
any leakage.
Segmentation Faults. We consistently found that out-of-
limit segment accesses never reach transient execution in our
experiments. We suspect that, due to the simplistic IA32 seg-
mentation design, segment limits are validated early-on, and
immediately raise a #GP or #SS (stack-segment fault) excep-
tion, without sending the offending instruction to the ROB.
Therefore, we observed no leakage in our experiments with
Meltdown-SS.
Instruction Fetch. To yield a complete picture, we investi-
gated Meltdown-type effects during the instruction fetch and
decode phases. On our test systems, we did not succeed in
transiently executing instructions residing in non-executable
memory (i.e., Meltdown-XD), or following an invalid opcode
(#UD) exception (i.e., Meltdown-UD). We suspect that ex-
ceptions during instruction fetch or decode are immediately
handled by the CPU, without ﬁrst buffering the offending
instruction in the ROB. Moreover, as invalid opcodes have
an undeﬁned length, the CPU does not even know where the
next instruction starts. Hence, we suspect that invalid opcodes
only leak if the microarchitectural effect is already an effect
caused by the invalid opcode itself, not by subsequent tran-
sient instructions.
Table 7: Spectre-PHT gadget classiﬁcation and the number of
occurrences per gadget type in Linux kernel v5.0.
Gadget
Prefetch
Compare
Index
Execute
Example (Spectre-PHT)
if(i<LEN_A){a[i];}
if(i<LEN_A){if(a[i]==k){};}
if(i<LEN_A){y = b[a[i]*x];}
if(i<LEN_A){a[i](void);}
#Occurrences
172
127
0
16
5 Gadget Analysis and Classiﬁcation
We deliberately oriented our attack tree (cf. Figure 1) on the
microarchitectural root causes of the transient computation,
abstracting away from the underlying covert channel and/or
code gadgets required to carry out the attack successfully. In
this section, we further dissect transient execution attacks by
categorizing gadget types in two tiers and overviewing current
results on their exploitability in real-world software.
5.1 Gadget Classiﬁcation
First-Tier: Execution Phase. We deﬁne a “gadget” as a
series of instructions executed by either the attacker or the
victim. Table 6 shows how gadget types discussed in literature
can be unambiguously assigned to one of the abstract attack
phases from Figure 2. New gadgets can be added straightfor-
wardly after determining their execution phase and objective.
Importantly, our classiﬁcation table highlights that gadget
choice largely depends on the attacker’s capabilities. By plug-
ging in different gadget types to compose the required attack
phases, an almost boundless spectrum of adversary models
can be covered that is only limited by the attacker’s capabili-
ties. For local adversaries with arbitrary code execution (e.g.,
Meltdown-US [56]), the gadget functionality can be explicitly
implemented by the attacker. For sandboxed adversaries (e.g.,
Spectre-PHT [50]), on the other hand, much of the gadget
functionality has to be provided by “confused deputy” code
executing in the victim domain. Ultimately, as claimed by
Schwarz et al. [74], even fully remote attackers may be able
to launch Spectre attacks given that sufﬁcient gadgets would
be available inside the victim code.
Second-Tier: Transient Leakage. During our analysis of
the Linux kernel (see Section 5.2), we discovered that gadgets
required for Spectre-PHT can be further classiﬁed in a second
258    28th USENIX Security Symposium
USENIX Association
tier. A second tier is required in this case as those gadgets
enable different types of attacks. The ﬁrst type of gadget we
found is called Prefetch. A Prefetch gadget consists of a single
array access. As such it is not able to leak data, but can be
used to load data that can then be leaked by another gadget
as was demonstrated by Meltdown-P [85]. The second type
of gadget, called Compare, loads a value like in the Prefetch
gadget and then branches on it. Using a contention channel
like execution unit contention [2, 9] or an AVX channel as
claimed by Schwarz et al. [74], an attacker might be able to
leak data. We refer to the third gadget as Index gadget and it is
the double array access shown by Kocher et al. [50]. The ﬁnal
gadget type, called Execute, allows arbitrary code execution,
similar to Spectre-BTB. In such a gadget, an array is indexed
based on an attacker-controlled input and the resulting value is
used as a function pointer, allowing an attacker to transiently
execute code by accessing the array out-of-bounds. Table 7
gives examples for all four types.
5.2 Real-World Software Gadget Prevalence
While for Meltdown-type attacks, convincing real-world ex-
ploits have been developed to dump arbitrary process [56]
and enclave [85] memory, most Spectre-type attacks have
so far only been demonstrated in controlled environments.
The most signiﬁcant barrier to mounting a successful Spectre
attack is to ﬁnd exploitable gadgets in real-world software,
which at present remains an important open research question
in itself [59, 74].
Automated Gadget Analysis. Since the discovery of tran-
sient execution attacks, researchers have tried to develop
methods for the automatic analysis of gadgets. One proposed
method is called oo7 [89] and uses taint tracking to detect
Spectre-PHT Prefetch and Index gadgets. oo7 ﬁrst marks all
variables that come from an untrusted source as tainted. If a
tainted variable is later on used in a branch, the branch is also
tainted. The tool then reports a possible gadget if a tainted
branch is followed by a memory access depending on the
tainted variable. Guarnieri et al. [25] mention that oo7 would
still ﬂag code locations that were patched with Speculative
Load Hardening [12] as it would still match the vulnerable
pattern.
Another approach, called Spectector [25], uses symbolic
execution to detect Spectre-PHT gadgets. It tries to formally
prove that a program does not contain any gadgets by track-
ing all memory accesses and jump targets during execution
along all different program paths. Additionally, it simulates
the path of mispredicted branches for a number of steps. The
program is run twice to determine whether it is free of gadgets
or not. First, it records a trace of memory accesses when no
misspeculation occurs (i.e., runs the program in its intended
way). Second, it records a trace of memory accesses with
misspeculation of a certain number of instructions. Spectector
then reports a gadget if it detects a mismatch between the two
traces. One problem with the Spectector approach is scalabil-
ity as it is currently not feasible to symbolically execute large
programs.
The Linux kernel developers use a different approach. They
extended the Smatch static analysis tool to automatically
discover potential Spectre-PHT out-of-bounds access gad-
gets [10]. Speciﬁcally, Smatch ﬁnds all instances of user-
supplied array indices that have not been explicitly hard-
ened. Unfortunately, Smatch’s false positive rate is quite
high. According to Carpenter [10], the tool reported 736
gadget candidates in April 2018, whereas the kernel only
featured about 15 Spectre-PHT-resistant array indices at that
time. We further investigated this by analyzing the number of
occurrences of the newly introduced array_index_nospec
and array_index_mask_nospec macros in the Linux kernel
per month. Figure 4 shows that the number of Spectre-PHT
patches has been continuously increasing over the past year.
This provides further evidence that patching Spectre-PHT
gadgets in real-world software is an ongoing effort and that
automated detection methods and gadget classiﬁcation pose
an important research challenge.
Academic Review. To date, only 5 academic papers have
demonstrated Spectre-type gadget exploitation in real-world
software [9, 13, 29, 50, 59]. Table 8 reveals that they either
abuse ROP-style gadgets in larger code bases or more com-
monly rely on Just-In-Time (JIT) compilation to indirectly
provide the vulnerable gadget code. JIT compilers as com-
monly used in e.g., JavaScript, WebAssembly, or the eBPF
Linux kernel interface, create a software-deﬁned sandbox by