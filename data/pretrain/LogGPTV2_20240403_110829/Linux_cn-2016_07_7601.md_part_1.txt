---
author: Adrian Rosebrock
category: 软件开发
comments_data:
- date: '2016-07-23 22:24:15'
  message: 太高大上&nbsp; &nbsp;完全 不敢动手。。。。
  postip: 58.53.150.1
  username: jingwang [Chrome 51.0|Windows 10]
- date: '2016-08-01 08:39:41'
  message: 强悍啊，mark
  postip: 183.131.11.57
  username: 来自浙江温州的 Chrome 51.0|Windows 10 用户
- date: '2017-07-03 19:01:20'
  message: goodo(￣▽￣)d
  postip: 42.224.237.223
  username: 来自河南洛阳的 Chrome 59.0|GNU/Linux 用户
count:
  commentnum: 3
  favtimes: 6
  likes: 0
  sharetimes: 0
  viewnum: 21163
date: '2016-07-21 10:38:00'
editorchoice: false
excerpt: "你知道 OpenCV 可以识别在图片中小猫的脸吗？而且是拿来就能用，不需要其它的库之类的。\r\n之前我也不知道。"
fromurl: http://www.pyimagesearch.com/2016/06/20/detecting-cats-in-images-with-opencv/
id: 7601
islctt: true
largepic: /data/attachment/album/201607/21/014359nggjvnaj0zivg5yc.jpg
permalink: /article-7601-1.html
pic: /data/attachment/album/201607/21/014359nggjvnaj0zivg5yc.jpg.thumb.jpg
related: []
reviewer: ''
selector: ''
summary: "你知道 OpenCV 可以识别在图片中小猫的脸吗？而且是拿来就能用，不需要其它的库之类的。\r\n之前我也不知道。"
tags:
- OpenCV
- 计算机视觉
thumb: false
title: 使用 OpenCV 识别图片中的猫咪
titlepic: true
translator: MikeCoder
updated: '2016-07-21 10:38:00'
---
![](/data/attachment/album/201607/21/014359nggjvnaj0zivg5yc.jpg)
你知道 OpenCV 可以识别在图片中小猫的脸吗？而且是拿来就能用，不需要其它的库之类的。
之前我也不知道。
但是在 [Kendrick Tan 曝出这个功能](http://kendricktan.github.io/find-cats-in-photos-using-computer-vision.html)后，我需要亲自体验一下……去看看到 OpenCV 是如何在我没有察觉到的情况下，将这一个功能添加进了他的软件库（就像一只悄悄溜进空盒子的猫咪一样，等待别人发觉）。
下面，我将会展示如何使用 OpenCV 的猫咪检测器在图片中识别小猫的脸。同样的，该技术也可以用在视频流中。
### 使用 OpenCV 在图片中检测猫咪
如果你查找过 [OpenCV 的代码仓库](https://github.com/Itseez/opencv)，尤其是在 [haarcascades 目录](https://github.com/Itseez/opencv/tree/master/data/haarcascades)里（OpenCV 在这里保存处理它预先训练好的 Haar 分类器，以检测各种物体、身体部位等）， 你会看到这两个文件:
* haarcascade\_frontalcatface.xml
* haarcascade\_frontalcatface\_extended.xml
这两个 Haar Cascade 文件都将被用来在图片中检测小猫的脸。实际上，我使用了相同的 cascades 分类器来生成这篇博文顶端的图片。
在做了一些调查工作之后，我发现这些 cascades 分类器是由鼎鼎大名的 [Joseph Howse](http://nummist.com/) 训练和贡献给 OpenCV 仓库的，他写了很多很棒的教程和书籍，在计算机视觉领域有着很高的声望。
下面，我将会展示给你如何使用 Howse 的 Haar cascades 分类器来检测图片中的小猫。
### 猫咪检测代码
让我们开始使用 OpenCV 来检测图片中的猫咪。新建一个叫 cat\_detector.py 的文件，并且输入如下的代码:
```
# import the necessary packages
import argparse
import cv2
# construct the argument parse and parse the arguments
ap = argparse.ArgumentParser()
ap.add_argument("-i", "--image", required=True,
    help="path to the input image")
ap.add_argument("-c", "--cascade",
    default="haarcascade_frontalcatface.xml",
    help="path to cat detector haar cascade")
args = vars(ap.parse_args())
```
第 2 和第 3 行主要是导入了必要的 python 包。6-12 行用于解析我们的命令行参数。我们仅要求一个必需的参数 `--image` ，它是我们要使用 OpenCV 检测猫咪的图片。
我们也可以（可选的）通过 `--cascade` 参数指定我们的 Haar cascade 分类器的路径。默认使用 `haarcascades_frontalcatface.xml`，假定这个文件和你的 `cat_detector.py` 在同一目录下。
注意：我已经打包了猫咪的检测代码，还有在这个教程里的样本图片。你可以在博文原文的 “下载” 部分下载到。如果你是刚刚接触 Python+OpenCV（或者 Haar cascade），我建议你下载这个 zip 压缩包，这个会方便你跟着教程学习。
接下来，就是检测猫的时刻了：
```
# load the input image and convert it to grayscale
image = cv2.imread(args["image"])
gray = cv2.cvtColor(image, cv2.COLOR_BGR2GRAY)
# load the cat detector Haar cascade, then detect cat faces
# in the input image
detector = cv2.CascadeClassifier(args["cascade"])
rects = detector.detectMultiScale(gray, scaleFactor=1.3,
    minNeighbors=10, minSize=(75, 75))
```
在 15、16 行，我们从硬盘上读取了图片，并且进行灰度化（这是一个在将图片传给 Haar cascade 分类器之前的常用的图片预处理步骤，尽管不是必须的）
20 行，从硬盘加载 Haar casacade 分类器，即猫咪检测器，并且实例化 `cv2.CascadeClassifier` 对象。
在 21、22 行通过调用 `detector` 的 `detectMultiScale` 方法使用 OpenCV 完成猫脸检测。我们给 `detectMultiScale` 方法传递了四个参数。包括：
1. 图片 `gray`，我们要在该图片中检测猫脸。
2. 检测猫脸时的[图片金字塔](http://www.pyimagesearch.com/2015/03/16/image-pyramids-with-python-and-opencv/) 的检测粒度 `scaleFactor` 。更大的粒度将会加快检测的速度，但是会对检测 准确性   （    true-positive    ） 产生影响。相反的，一个更小的粒度将会影响检测的时间，但是会增加 准确性   （    true-positive    ） 。但是，细粒度也会增加 误报率   （    false-positive    ） 。你可以看这篇博文的“ Haar cascades 注意事项”部分来获得更多的信息。
3. `minNeighbors` 参数控制了检定框的最少数量，即在给定区域内被判断为猫脸的最少数量。这个参数可以很好的排除 误报   （    false-positive    ） 结果。
4. 最后，`minSize` 参数不言自明。这个值描述每个检定框的最小宽高尺寸（单位是像素），这个例子中就是 75\*75
`detectMultiScale` 函数会返回 `rects`，这是一个 4 元组列表。这些元组包含了每个检测到的猫脸的 (x,y) 坐标值，还有宽度、高度。
最后，让我们在图片上画下这些矩形来标识猫脸：
```
# loop over the cat faces and draw a rectangle surrounding each
for (i, (x, y, w, h)) in enumerate(rects):
    cv2.rectangle(image, (x, y), (x + w, y + h), (0, 0, 255), 2)
    cv2.putText(image, "Cat #{}".format(i + 1), (x, y - 10),
        cv2.FONT_HERSHEY_SIMPLEX, 0.55, (0, 0, 255), 2)
# show the detected cat faces
cv2.imshow("Cat Faces", image)
cv2.waitKey(0)
```
给我们这些框（比如，rects）的数据，我们在 25 行依次遍历它。
在 26 行，我们在每张猫脸的周围画上一个矩形。27、28 行展示了一个整数，即图片中猫咪的数量。