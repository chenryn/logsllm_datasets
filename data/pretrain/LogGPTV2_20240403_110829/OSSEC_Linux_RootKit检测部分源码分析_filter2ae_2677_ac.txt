    int closedir(DIR *dp);     
    long telldir(DIR *dp);     
    void seekdir(DIR *dp,long loc);
dirent结构体的定义，
    struct dirent  
    {  
        long d_ino; /* inode number 索引节点号 */       
        off_t d_off; /* offset to this dirent 在目录文件中的偏移 */     
        unsigned short d_reclen; /* length of this d_name 文件名长 */   
        unsigned char d_type; /* the type of d_name 文件类型 */      
        char d_name [NAME_MAX+1]; /* file name (null-terminated) 文件名，最长255字符 */  
    }
从上述定义也能够看出来，dirent结构体存储的关于文件的信息很少，所以dirent同样也是起着一个索引的作用，
想获得类似ls -l那种效果的文件信息，必须要靠stat函数了。
通过readdir函数读取到的文件名存储在结构体dirent的d_name成员中，而函数int stat(const char _file_name,
struct stat_ buf);的作用就是获取文件名为d_name的文件的详细信息，存储在stat结构体中。以下为stat结构体的定义：
    struct stat {  
          mode_t   st_mode;    //文件访问权限    
          ino_t    st_ino;    //索引节点号    
          dev_t    st_dev;     //文件使用的设备号     
          dev_t    st_rdev;    //设备文件的设备号     
          nlink_t   st_nlink;    //文件的硬连接数    
          uid_t    st_uid;     //所有者用户识别号     
          gid_t    st_gid;     //组识别号    
          off_t    st_size;    //以字节为单位的文件容量    
          time_t   st_atime;    //最后一次访问该文件的时间    
          time_t   st_mtime;    //最后一次修改该文件的时间     
          time_t   st_ctime;    //最后一次改变该文件状态的时间    
          blksize_t st_blksize;   //包含该文件的磁盘块的大小    
          blkcnt_t  st_blocks;   //该文件所占的磁盘块   
    };
这个结构体记录的信息可以说是非常详细了。
有关/proc目录的知识，也牵涉到下面的函数。
Linux 内核提供了一种通过 /proc
文件系统，在运行时访问内核内部数据结构、改变内核设置的机制。proc文件系统是一个伪文件系统，它只存在内存当中，而不占用外存空间。它以文件系统的方式为访问系统内核数据的操作提供接口。
用户和应用程序可以通过proc得到系统的信息，并可以改变内核的某些参数。由于系统的信息，如进程，是动态改变的，所以用户或应用程序读取proc文件时，proc文件系统是动态从系统内核读出所需信息并提交的
有了这些先验知识，我们可以向下进行，
**1）proc_read()函数**
noproc是一个全局变量，标记当前检查的客体是不是进程。
这个函数逻辑简单，就是检查这个进程在/proc下有没有体现，其中涉及到的关于/proc的内容和子函数isfile_ondir()我们也介绍了，理解起来不难。
**2）proc_chdir()函数**
里面几个简单的函数的解释我就直接写在注释里了，这里关于为什么要获取/proc/%d做些解释，Linux 内核提供了一种通过 /proc
文件系统，在运行时访问内核内部数据结构、改变内核设置的机制，proc文件系统是一个伪文件系统，它只存在内存当中，对于进程N在/proc目录中会有体现，
进程N在/proc目录中可能会记录如下信息，
/proc/N pid为N的进程号
/proc/N/cmdline 进程启动命令
/proc/N/cwd 链接到进程当前工作目录
/proc/N/environ 进程环境变量列表
/proc/N/exe 链接到进程的执行命令文件
/proc/N/fd 包含进程相关的所有的文件描述符
/proc/N/maps 与进程相关的内存映射信息
/proc/N/mem 指代进程持有的内存，不可读
/proc/N/root 链接到进程的根目录
/proc/N/stat 进程的状态
/proc/N/statm 进程使用的内存的状态
/proc/N/status 进程状态信息，比stat/statm更具可读性
/proc/self 链接到当前正在运行的进程
**3）proc_stat()函数**
这个函数的内容不多，逻辑也很清晰，关于/proc/pid的知识上面也介绍了，这个函数的功能就是检查在/proc被成功挂载的情况下，能否在该目录下找到对应的pid文件。
**4）loop_all_pids()函数**
这个函数的体量比较大，一开始先是一些变量的初始化，这些变量的用处在后面会详细介绍，
此处先介绍getpid()函数，此函数的功能是取得进程识别码，getppid()返回父进程标识。
接下来一直到整个函数结束是一个大循环，其中还是先将可能被改变过的变量初始化，
接下来这一部分主要判断当前检查的进程是否存在，
主要是看这些函数能否执行成功，能成功则将相应变量标记为1，
介绍相关知识，
①session
session就是一组进程的集合，session id就是这个session中leader的进程ID。
session的特点
session的主要特点是当session的leader退出后，session中的所有其它进程将会收到SIGHUP信号，其默认行为是终止进程，即session的leader退出后，session中的其它进程也会退出。
如果session和tty关联的话，它们之间只能一一对应，一个tty只能属于一个session，一个session只能打开一个tty。当然session也可以不和任何tty关联。
session的创建
session可以在任何时候创建，调用setsid函数即可，session中的第一个进程即为这个session的leader，leader是不能变的。常见的创建session的场景是：
用户登录后，启动shell时将会创建新的session，shell会作为session的leader，随后shell里面运行的进程都将属于这个session，当shell退出后，所有该用户运行的进程将退出。这类session一般都会和一个特定的tty关联，session的leader会成为tty的控制进程，当session的前端进程组发生变化时，控制进程负责更新tty上关联的前端进程组，当tty要关闭的时候，控制进程所在session的所有进程都会收到SIGHUP信号。
启动deamon进程，这类进程需要和父进程划清界限，所以需要启动一个新的session。这类session一般不会和任何tty关联。
②进程组
进程组（process group）也是一组进程的集合，进程组id就是这个进程组中leader的进程ID。
进程组的特点
进程组的主要特点是可以以进程组为单位通过函数killpg发送信号。
进程组的创建
进程组主要用在shell里面，shell负责进程组的管理，包括创建、销毁等。（这里shell就是session的leader）
对大部分进程来说，它自己就是进程组的leader，并且进程组里面就只有它自己一个进程。
shell里面执行类似ls|more这样的以管道连接起来的命令时，两个进程就属于同一个进程组，ls是进程组的leader。
shell里面启动一个进程后，一般都会将该进程放到一个单独的进程组，然后该进程fork的所有进程都会属于该进程组，比如多进程的程序，它的所有进程都会属于同一个进程组，当在shell里面按下CTRL+C时，该程序的所有进程都会收到SIGINT而退出。
接下来的一部分又是函数调用，
毕竟pid不一定是连续的，而我们是直接遍历从1到max_pid，总是会有对应不上进程的数字的。这个地方用了六个函数的返回结果判断，如果这个pid对这些函数没有丝毫反应，这说明pid无效（进程不存在）。
这个是一个错误报告，不再赘述，
接下来这一部分主要判断进程是否是合法进程，
往下是执行ps命令，查看ps能否显示到。ps命令用于报告当前系统的进程状态。可以搭配kill指令随时中断、删除不必要的程序。ps命令是最基本同时也是非常强大的进程查看命令，使用该命令可以确定有哪些进程正在运行和运行的状态、进程是否结束、进程有没有僵死、哪些进程占用了过多的资源等等，总之大部分信息都是可以通过执行该命令得到的。
如果所有命令/函数都能有正常的返回值，则说明这是一个正常的进程，可以continue了，
接下来这一部分内容与上面相似，用于判断，进程是否是死进程，
下面这一部分是对在AIX系统上运行时一个特例的特殊处理，这个特例的情境是，除了kill函数，都能正常显示该进程。这部分看下就好，除了最后一句注释以外不需要太注意：恶意程序一般是逃脱ps的显示。
AIX（Advanced Interactive eXecutive）是IBM基于AT&T Unix System
V开发的一套类UNIX操作系统，运行在IBM专有的Power系列芯片设计的小型机硬件系统之上。它符合Open group的UNIX 98行业标准（The
Open Group UNIX 98 Base
Brand），通过全面集成对32-位和64-位应用的并行运行支持，为这些应用提供了全面的可扩展性。它可以在所有的IBM ~ p系列和IBM
RS/6000工作站、服务器和大型并行超级计算机上运行。
接下来是一个大的if-else if-else if的嵌套，针对判断出的不同情况进行处理，判断的依据就是上面获得到的变量的情况，
一是如果kill可以显示单getsid和getgpid不能显示，则可能是内核级别的rootkit；
二是kill、getgpid、getsid显示内容各有差异，且getsid、getgpid未能正确显示，且不为死进程，则可能是内核级别的rootkit，
三是检查pid是一个没有在ps里显示的线程，
此处调用了check_rc_readproc()函数，是检查/proc下是否有对应文件的，如果在没有，则可能是被安装了木马。
**5）check_rc_pids()函数**
和别的文件一样，这个函数也是统一调用了其它的函数，
先是一些变量的初始化，
再是检查对于此部分很关键的ps命令何在，
检查关键的/proc部分是否存在，
调用loop_all_pids()函数，正式开始检查，
进行错误报告，
同样，只针对Linux系统。
**(6)隐藏端口检查模块——check_rc_ports.c**
这部分功能的主体写在了文件check_rc_ports.c里，我们先看下整体架构，
这部分检测功能的思路也是非常的明确，此处将整个功能大体上拆分成了两步：检查是否某一端口能绑定上，再检测netstat能否显示该端口。
同其他文件一样，这个文件内部，主函数是check_rc_ports，其余的都作为子函数来完成某一步功能，下面开始逐个解释，
**1）宏定义**
一开始先define了两个宏，
一开始有个#if defined(sun)，此处的sun和 **sun** 为操作系统标识符，
常见的操作系统标识符还有如下，
WINDOWS: _WIN32、WIN32;
UNIX/LINUX: unix、 **unix、** unix__;
SunOS/SOLARIS: **SVR4、** svr4 **、sun、** sun、 **sun** 、sparc、 **sparc、**
sparc__;
HPUX: **hppa、** hppa **、** hpux、 **hpux** 、_HPUX_SOURCE;
AIX: _AIX、_AIX32、_AIX41、_AIX43、_AIX51、_AIX52;
LINUX: linux、 **linux、** linux **、** gnu _linux__ ;
CPU: **x86_64、** x86 _64 **(Intel);** amd64、 **amd64** (AMD); sparc、
**sparc、** sparc__(Sun-SPARC);
netstat 命令用于显示各种网络相关信息，如网络连接，路由表，接口状态 (Interface Statistics)，masquerade
连接，多播成员 (Multicast Memberships) 等等。
常见参数
-a (all)显示所有选项，默认不显示LISTEN相关
-t (tcp)仅显示tcp相关选项
-u (udp)仅显示udp相关选项
-n 拒绝显示别名，能显示数字的全部转化成数字。
-l 仅列出有在 Listen (监听) 的服务状态
-p 显示建立相关链接的程序名
-r 显示路由信息，路由表
-e 显示扩展信息，例如uid等
-s 按各个协议进行统计
-c 每隔一个固定时间，执行该netstat命令。
**2）run_netstat()函数**
下面解释run_netstat()函数
中间将宏格式化之后赋值给nt，用system执行，创建子进程等准备工作，如果创建失败，返回-1，执行如果成功返回0，失败返回正数。
**3）conn_port函数**
接下来是conn_port()函数