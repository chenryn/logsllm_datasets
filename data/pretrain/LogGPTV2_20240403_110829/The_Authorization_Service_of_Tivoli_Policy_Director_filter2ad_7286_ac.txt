### Group Administrator Permissions

The group administrator must have the appropriate permissions assigned to the group. If an 'outside' user is added to a group, the group administrator gains control over that user, which is shared with the /Management/Users administrator and potentially other group administrators.

A helpdesk operator who has (W) permission on a group or group container can force a user in that group to change their password at the next login.

### 5. WebSEAL

WebSEAL controls access to back-end servers by using firewalls and filtering router technology to establish a buffer network (DMZ) between the private network and the Internet. A WebSEAL server connects to back-end servers via junctions. Each junction links a back-end server to a specific branch in the namespace. Clients can request resources from a particular back-end server by prefixing the URL path with the configured junction name, providing a uniform URL namespace. Figure 4 illustrates a typical WebSEAL configuration, where two WebSEAL servers load-balance across multiple back-end servers.

Depending on security requirements, a WebSEAL junction can be configured with different levels of protection:
- **TCP Junctions:** Do not provide secure communication.
- **SSL Junctions:** Encrypt all communication and can be unauthenticated, server-authenticated, or mutually authenticated.

Since Policy Director makes access decisions based on the names of protected objects, it is crucial that WebSEAL and the back-end servers treat URLs consistently. By default, WebSEAL expects servers to be case-sensitive. To prevent bypasses, WebSEAL can be configured to treat URLs as case-insensitive, remove trailing dots from file names, and disallow the 8.3 file name format.

When a client accesses a junctioned back-end server, the returned data can be plain HTML or a client application, such as a Java applet or JavaScript. Any page generated by this data likely contains links to other resources. WebSEAL filters "text/html" data received from junctioned servers, modifying server-relative and absolute URLs to reflect the junction point. To avoid the complexity of filtering scripts, WebSEAL can also provide junction information for failed requests containing absolute or server-relative URLs.

WebSEAL supports four authentication methods for step-up authentication: unauthenticated, password, token-card, and certificate. The order of these methods can be defined, with unauthenticated being the last option.

The three-strikes login policy allows specifying a maximum number of failed login attempts (n) and a penalty lockout time (x). After n failed attempts, a user is locked out for x seconds, or the account is disabled. This policy can vary, with some users governed by stronger or weaker minimum password length policies.

### 5.1 Access Enforcement

When WebSEAL intercepts a request to access a resource, it:
1. Maps the user operation (request) to the required permissions.
2. Maps the resource name to a protected object name.
3. Obtains information about the initiator (a credential).

With this information, the Authorization service checks whether access can be granted according to the authorization database. If access is denied, WebSEAL returns a "Forbidden" page, regardless of whether the resource exists.

The IP address used by WebSEAL for network-based authentication should be the originator's IP address. However, WebSEAL may not always identify the true client IP address, especially in cases involving HTTP proxies or IP address attacks.

### 5.2 Personalization

To support security-aware applications, WebSEAL can insert PD-specific client identity and group membership information into the headers of HTTP requests. This enables applications on junctioned servers to perform user-specific actions based on the client’s PD identity. This information is accessible as global variables for CGI scripts or as header names for Java servlets. Additionally, encoded as a PD credential, it can be used by the application to call the Authorization server via the Authorization API.

A personalization junction instructs WebSEAL to provide a list of applications the requesting user has access to, to a personalization service (e.g., a servlet). This list, consisting of protected objects, is placed in the HTTP header and passed to the junction for processing. The personalization service can then return customized information, such as a personalized menu. When generating this list, WebSEAL checks for specific ACL permissions, which are configurable.

A portal stanza in the `iv.conf` file, such as:
```
/portal/cgi-bin/script = /objectspace/obj:r
```
maps a server-relative back-end Web object to a protected object and a permission.

A personalization junction uses the Authorization API to obtain an entitlement, which is a list of objects within a given region for which the user credential has specified access privileges. An entitlement is a data structure containing externalized policy information, formatted for specific applications. For example, an entitlement service might use attribute-value pairs stored in POPs to provide "expense limit" information for customers.

Policy Director's ability to pass user information to security-aware Web applications allows them to tailor responses to the user’s access rights, needs, and preferences, facilitating application integration and personalized content with less development time.

### 6. Chinese Walls

This section demonstrates the power of the Policy Director authorization service by implementing a commercial non-disclosure policy using an External Authorization Service (EAS).

In the Chinese Wall policy, resources are grouped into company datasets, and a symmetric conflict-of-interest relation denotes whether two companies are in competition. For example, individuals are not allowed to advise an organization if they have insider knowledge of a competing organization.

Like Foley, who represents Chinese Walls as user groups, we allocate a unique group-id (`gorg(a)`) for each organization `a`. Each resource containing data from organization `a` is controlled by an ACL template that grants access only to members of group `gorg(a)`. For instance, the ACL protecting a resource with IBM data includes:
```
any-authenticated k
group ibm
user cell admin
lrx
c
```
Only the `ibm` group entry grants `lrx` permissions. Initially, `gorg(a)` is empty for every organization `a`.

If a user `u` who is not a member of `gorg(a)` requests access to a resource belonging to organization `a`, Policy Director calls the EAS associated with the `k` permission set in the `any-authenticated` entry. The EAS checks if user `u` can be granted access to organization `a`'s resources. If there is no conflict with the current user memberships, `u` is added to `gorg(a)`, and the EAS returns a "granted" result. Subsequent access decisions for the same user do not need to invoke the EAS. If there is a conflict, the EAS returns a "rejected" result. Figure 5 shows the involved components and their interfaces to the conflict-of-interest database and the user registry.

### 7. Conclusion

This paper presents the Authorization Service provided by Tivoli Policy Director and its use by PD family members and distributed applications. Policy Director centrally stores authorization information in the form of ACL and POP templates attached to protected objects representing resources. POP templates allow expressing time and state constraints, enhancing the traditional ACL model. The dynamic URL mapping facility extends access control to method parameters.

Object names form a hierarchical namespace, and Policy Director uses this hierarchy to implement a sparse ACL model with inheritance, simplifying maintenance and access rights management. However, setting up a correct policy requires understanding the behavior of the controlled Web servers, as Policy Director protects the namespace but not the physical resources.

The protected object namespace, which separates access control information from resource storage, is a flexible concept, making Policy Director a foundation for other access control systems. For example, it can be used as an authorization engine in a pure Java environment and is employed by Tivoli Privacy Manager for authorization based on dynamic roles for privacy and other applications.

### Acknowledgments

The author thanks his colleagues Bob Blakley, Vaughan Harper, Heather Hinton, Tony Nadalin, Avery Salmon, Brian Turner, and Michael Tuton for their assistance. Thanks also to the anonymous reviewers for their feedback.

### References

[1] T. Berners-Lee, R. Fielding, and L. Masinter. Uniform resource identifiers (URI): Generic syntax. RFC 2396, Aug. 1998.

[2] K. Beznosov, Y. Deng, B. Blakley, C. Burt, and J. Barkley. A resource access decision service for CORBA-based distributed systems. In 15th Annual Computer Security Applications Conference (ACSAC’99), pg. 310–319, 1999.

[3] M. Blaze, J. Feigenbaum, and A.D. Keromytis. KeyNote: Trust management for public-key infrastructures. In Security Protocols—6th Int’l Workshop, Lecture Notes in Computer Science 1550, pg. 59–66. Springer, 1999.

[4] S. Blount. Securing Your Insecurities on the Web. In 15th Annual Computer Security Applications Conference (ACSAC’99), 1999. www.acsac.org/1999/papers/thu-c-1300-netegrity.pdf

[5] S. Foley. Implementing Chinese Walls in Unix. Computers and Security Journal, 16(6):551–563, 1997.

[6] S. Jajodia, M. Kudo, and V.S. Subrahmanian. Provisional authorization. In Recent Advances in Secure and Private E-Commerce, Kluwer Academic Publishers, 2001.

[7] G. Karjoth. Authorization in CORBA security. Journal of Computer Security, 8(2/3):89–108, 2000.

[8] J. Pato. DCE Access Control Lists (ACL’s). OSF DCE Specifications, 1990.

[9] M. Swift, C. Van Dyke, P. Brundrett, P. Garg, A. Hopkins, M. Goertzel, S. Chan, and G. Jensensworth. Improving the granularity of access control in Windows NT. In 6th ACM Symposium on Access Control Models and Technologies (SACMAT 2001), pg. 87–96, 2001.

[10] J. Snyder. The New Holy Grail? Information Security Magazine, Oct. 2000.

[11] The Open Group. Authorization (AZN) API. Open Group Technical Standard C908, Jan. 2000.

[12] V. Varadharajan, C. Crall, and J. Pato. Authorization in Enterprise-wide Distributed System – A Practical Design and Implementation. In 14th Annual Computer Security Applications Conference (ACSAC’98), 1998.

[13] T.Y.C. Woo and S.S. Lam. A Framework for Distributed Authorization. In 1st ACM Conference on Computer and Communications Security, pg. 112–118. ACM Press, 1993.

[14] M.E. Zurko, R. Simon, and T. Sanfilippo. A user-centered modular authorization service built on RBAC foundation. 1999 IEEE Symposium on Security and Privacy, pg. 57–71. IEEE Computer Society, 1999.