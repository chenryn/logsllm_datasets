that group administrator has the appropriate permission as-
signed to that group. Note that if an ‘outside’ user is placed
into a group, the administrator of that group now has also
gained control over that user, shared with the administrator
of /Management/Users and possibly with other group
administrators.
A helpdesk operator, who has the password (W) permis-
sion on a group or a group container, can force a user in that
group or groups to change the password at the next login.
5 WebSEAL
WebSEAL controls access to back-end servers, where
the use of ﬁrewalls and ﬁltering router technology estab-
lishes a buffer network (DMZ) between the private network
and the Internet. A WebSEAL server connects to back-end
servers via junctions. Each junction links a back-end server
to a particular branch in the namespace. A client can re-
quest resources from a particular back-end server by preﬁx-
ing the path of the URL with the conﬁgured junction name,
thus providing a uniform URL namespace. Figure 4 shows
a typical WebSEAL conﬁguration, where two WebSEAL
servers load-balance across a number of back-end servers.
Depending on the security requirements, a WebSEAL junc-
tion can be conﬁgured with different protection: A junc-
tion over a TCP connection does not provide secure com-
munication whereas SSL junctions additionally encrypt all
communication. An SSL junction can be unauthenticated,
(back-end) server authenticated, or mutually authenticated.
As Policy Director performs access decisions based on
the names of protected objects, it is important that Web-
SEAL and the back-end servers treat URLs the same way.
By default, WebSEAL expects servers to be case-sensitive.
To avoid back doors that bypass WebSEAL, it can be con-
ﬁgured to treat URLs as case-insensitive, to remove trailing
dots from ﬁle names, and to disallow the 8.3 ﬁle name for-
mat.
When a client accesses a junctioned back-end server, the
returned data can be plain HTML or a client application, for
Authorized licensed use limited to: Tsinghua University. Downloaded on March 25,2021 at 07:07:21 UTC from IEEE Xplore.  Restrictions apply. 
• third-party
[object-spaces]
ivmgrd.conf),
objects
introduced
(in
stanzas
by
ﬁle
the object maps to an existing resource or not. If access is
granted, then the requester, however, may observe two dif-
ferent behaviors: There will be a “Not Found” page if the
object does not map to a resource that can be retrieved by
the Web server. Otherwise, the content of the resource will
be returned.
The visible part of the object namespace, as seen at the
PD Management Console for example, is determined by
• the ﬁlesystem of the WebSEAL server,
• the local ﬁlesystem on the WebSEAL server machine
(if mounted into the PD namespace),
• the “ﬁlesystem” of the back-end Web servers (as re-
turned by query-contents, a customizable CGI
script),
• dynamic URLs (as deﬁned in the conﬁguration ﬁle
www/lib/dynurl.conf).
It is critical to understand that the URL of the request is
mapped on two (related) namespaces, the set of resources
and the above set of object names. An access policy is only
consistent if the identiﬁed object is indeed the proxy for the
requested resource.
Let Σ : L → R denote the mapping from object names
to resources. This mapping is deﬁned by the way Web
servers interpret a given URL to identify an abstract or
physical resource. For example, the IBM HTTP Server also
executes the CGI program test-cgi.exe even if the
HTTP request only provides its name test-cgi without
extension .exe.
This means that both object names
map to the same resource, C:/Program Files/IBM
for
HTTP Server/cgi-bin/test-cgi.exe
=
example,
Σ(/cgi-bin/test-cgi.exe).
and that Σ(/cgi-bin/test-cgi)
Assume that an ACL template, which denies access for
requester Alice, is attached to object test-cgi.exe but
Alice may access any other object otherwise. WebSEAL
shows different behavior depending how the program is ad-
dressed and where the program is located. If fully named
(test-cgi.exe), WebSEAL denies access no matter
which HTTP server hosts the program. However, if the re-
quester only partly names the executable, WebSEAL grants
access. Depending where the resource is located, the result
would be either the execution of the program or the page
“Not Found”.
There are also situations in which POP-deﬁned policies
might not be correctly implemented. For example, a re-
source controlled by a POP time constraint might also be
accessible in the time-out period when it is stored in the
Figure 4. WebSEAL conﬁguration.
example a Java applet or a JavaScript. Any page generated
by this data is likely to contain links to other resources on
that back-end server or elsewhere. WebSEAL ﬁlters data
of type “text/html” that it receives from junctioned servers;
server-relative and absolute URLs are modiﬁed to reﬂect the
junction point of the junctioned server. To avoid the com-
plexity of ﬁltering scripts, WebSEAL can also be conﬁgured
to provide junction information when a failed request con-
tains an absolute or server-relative URL.
WebSEAL recognizes four authentication methods for
use in the step-up authentication mechanism: unauthenti-
cated, password, token-card, certiﬁcate. Any order of the
methods can be deﬁned, as long as unauthenticated is the
last element.
The three strikes login policy enables the speciﬁcation
of a maximum number of failed login attempts n and a
penalty lockout time x, such that after n failed login attempts
a user is locked out for x seconds (or the account is dis-
abled). Thus, for example, some users might be governed
by a stronger (weaker) minimum password length policy.
5.1 Access Enforcement
When WebSEAL intercepts a request to access a re-
source, it (1) maps the user operation (request) to the set
of required permissions to grant access; (2) maps the name
of the resource to a protected object name; and (3) ob-
tains information about the initiator (a credential). Provided
with above information, the Authorization service checks
whether access could be granted according to the informa-
tion stored in the authorization database. If access is denied,
WebSEAL returns a “Forbidden” page, no matter whether
Authorized licensed use limited to: Tsinghua University. Downloaded on March 25,2021 at 07:07:21 UTC from IEEE Xplore.  Restrictions apply. 
cache of the Web browser (or the WebSEAL server). The
IP address used by WebSEAL to enforce the network-based
authentication policy should be the IP address of the orig-
inator of the TCP connection. However, WebSEAL might
not be able to deﬁnitely identify the true client IP address in
the case of HTTP proxies or IP address attacks.
5.2 Personalization
To support security-aware applications, WebSEAL can
be instructed to insert PD-speciﬁc client identity and group
membership information into the headers of the HTTP re-
quests. This enables applications on junctioned servers to
perform user-speciﬁc actions based on the client’s PD iden-
tity. This information is accessible as global variables for
CGI scripts or as header names for Java servlets. Addition-
ally, encoded as a PD credential, it can be used by the appli-
cation to call the Authorization server via the Authorization
API.
A personalization junction instructs WebSEAL to pro-
vide to a personalization service, for example implemented
by a servlet, the list of applications that the requesting user
has access to. This list of applications, in fact a list of pro-
tected objects, is placed in the HTTP header and passed
across to the junction to be processed by the personaliza-
tion service. After processing the list, the personalization
service can return information such as a customized menu
for this user. When WebSEAL generates this list of pro-
tected objects it actually checks for speciﬁc ACL permis-
sions. The list of ACL permissions and the region of the
protected object namespace to be searched is conﬁgurable.
A portal stanza in ﬁle iv.conf such as
/portal/cgi-bin/script = /objectspace/obj:r
maps a server-relative back-end Web object to a protected
object and a permission.
A personalization junction uses the Authorization API
to instruct the Authorization Service to obtain an entitle-
ment that consists of a list of objects within a given region
for which the given user credential has the speciﬁed access
privileges. In general, an entitlement is a data structure that
contains externalized policy information, formatted in such
a way that it is understandable to a speciﬁc application. For
example, an entitlement service may use a speciﬁc attribute-
value pair stored in POPs to provide “expense limit” infor-
mation of customers.
Policy Director’s capability to pass user information to
security-aware Web applications, enables them to tailor
their responses to the user’s access rights, needs, and prefer-
ences. This allows application integration (for example by
employing user directory information) to serve up person-
alized content with less development time.
6 Chinese Walls
In this section, we illustrate the power of the Policy Di-
rector authorization service by showing how a commercial
non-disclosure policy can be implemented by employing
an External Authorization Service.
In the Chinese Wall
policy, resources are grouped into company datasets, and
a (symmetric) conﬂict-of-interest relation denotes whether
two companies are in competition. For example, people are
not permitted to advice an organization when they have in-
sider knowledge of another competing organization.
Figure 5. Implementing the Chinese Wall pol-
icy.
Like Foley who represents Chinese Walls as user groups
[5], we allocate for every organization a ∈ Org a unique
group-id, denoted gorg(a). Each resource containing data
from organization a is controlled by an ACL template that
gives access rights only to members of group gorg(a). For
example, the ACL protecting a resource that contains data
from company IBM contains the following entries:
any-authenticated k
group ibm
user cell admin
lrx
c
Only group entry ibm grants lrx permissions. At any
moment mbrs(gorg(a)) represent the users who may ac-
cess resources of organization a. Initially, group gorg(a) is
empty for every organization a.
However, when a user u who is not member of group
gorg(a) requests access to a resource belonging to orga-
nization a, Policy Director calls the External Authoriza-
tion Sercice associated with the k permission set in entry
any-authenticated. The EAS checks whether user
Authorized licensed use limited to: Tsinghua University. Downloaded on March 25,2021 at 07:07:21 UTC from IEEE Xplore.  Restrictions apply. 
Aug. 1998.
[2] K. Beznosov, Y. Deng, B. Blakley, C. Burt, and J. Barkley.
A resource access decision service for CORBA-based
distributed systems. In 15th Annual Computer Security
Applications Conference (ACSAC’99), pg. 310–319, 1999.
[3] M. Blaze, J. Feigenbaum, and A.D. Keromytis. KeyNote:
Trust management for public-key infrastructures. In
Security Protocols—6th Int’l Workshop, Lecture Notes in
Computer Science 1550, pg. 59–66. Springer, 1999.
[4] S. Blount. Securing Your Insecurities on the Web. In 15th
Annual Computer Security Applications Conference
(ACSAC’99), 1999. www.acsac.org/1999/papers/
thu-c-1300-netegrity.pdf
[5] S. Foley. Implementing Chinese Walls in Unix. Computers
and Security Journal, 16(6):551–563, 1997.
[6] S. Jajodia, M. Kudo, and V.S. Subrahmanian. Provisional
authorization. In Recent Advances in Secure and Private
E-Commerce, Kluwer Academic Publishers, 2001.
[7] G. Karjoth. Authorization in CORBA security. Journal of
Computer Security, 8(2/3):89–108, 2000.
[8] J. Pato. DCE Access Control Lists (ACL’s). OSF DCE
Speciﬁcations, 1990.
[9] M. Swift, C. Van Dyke, P. Brundrett, P. Garg, A. Hopkins,
M. Goertzel, S. Chan, and G. Jensensworth. Improving the
granularity of access control in Windows NT. In 6th ACM
Symposium on Access Control Models and Technologies
(SACMAT 2001), pg. 87–96, 2001.
[10] J. Snyder. The New Holy Grail? Information Security
Magazine, Oct. 2000.
[11] The Open Group. Authorization (AZN) API. Open Group
Technical Standard C908, Jan. 2000.
[12] V. Varadharajan, C. Crall, and J. Pato. Authorization in
Enterprise-wide Distributed System – A Practical Design
and Implementation. In 14th Annual Computer Security
Applications Conference (ACSAC’98), 1998.
[13] T.Y.C. Woo and S.S. Lam. A Framework for Distributed
Authorization. In 1st ACM Conference on Computer and
Communications Security, pg. 112–118. ACM Press, 1993.
[14] M.E. Zurko, R. Simon and T. Sanﬁlippo. A user-centered
modular authorization service built on RBAC foundation.
1999 IEEE Symposium on Security and Privacy, pg. 57–71.
IEEE Computer Society, 1999.
u can be granted access to organization a’s resources. If
the conﬂict-of-interest relation indicates no conﬂict with
the current user memberships, the user is added to group
gorg(a) and EAS returns a “granted” result. Access deci-
sions for subsequent calls of the same user do not need to
invoke the EAS. However, if there is a conﬂict, EAS returns
a “rejected” result. Figure 5 shows the involved components
and its interfaces to the conﬂict-of-interest database and the
user registry.
7 Conclusion
In this paper we presented the Authorization Service pro-
vided by Tivoli Policy Director and its use by PD family
members as well as distributed applications. Policy Direc-
tor centrally stores its authorization information in the form
of ACL and POP templates attached to protected objects
that represent resources. POP templates allow one to ex-
press time and state constraints and thus to increase the ex-
pressivity of a traditional ACL model. The dynamic URL
mapping facility extends access control to method parame-
ters.
Object names form a hierarchical namespace and Pol-
icy Director uses this hierarchy to implement a sparse ACL
model using inheritance. This abstraction facilitates mainte-
nance, and makes answering questions about a user’s access
rights very simple. However, beside the question of whether
it is possible to abstract all resources into object names, one
also has to be aware that Policy Director protects the name-
space but not the physical resources. Therefore, setting up a
correct policy requires a good understanding of the behavior
of the controlled Web servers.
The protected object namespace, which separates access
control information from their storage at the resources, is a
ﬂexible concept and makes Policy Director the foundation
for other access control systems. For example, Policy Di-
rector can be used as an authorization engine from a pure
Java 3 environment, and is used by the Tivoli Privacy Man-
ager to support authorization based on dynamic roles for
privacy and other applications.
Acknowledgments
The author would like to thank his colleagues Bob Blak-
ley, Vaughan Harper, Heather Hinton, Tony Nadalin, Avery
Salmon, Brian Turner, and Michael Tuton for their help in
the preparation of this paper. Thanks also to the anonymous
reviewers for their informative feedback.
References
[1] T. Berners-Lee, R. Fielding, and L. Masinter. Uniform
resource identiﬁers (URI): Generic syntax. RFC 2396,
Authorized licensed use limited to: Tsinghua University. Downloaded on March 25,2021 at 07:07:21 UTC from IEEE Xplore.  Restrictions apply.