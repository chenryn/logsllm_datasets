outputs n small correlated seeds κ0, κ1, . . . , κn−1, one
for each party.
• PCG.Eval takes as input a PCG seed κi and the associated
index i ∈ [n]. The output is an element Ri, ideally
corresponding to the i-th output of CorGen(1λ).
We require that the construction satisﬁes the following prop-
erties.
• Correctness. The following distribution is computation-
ally indistinguishable from CorGen(1λ).
• Security. For every subset of corrupted parties C (cid:40) [n],
the following two distributions are computationally indis-
tinguishable.
∀i ∈ [n] : Ri ← PCG.Eval(κi, i)
(cid:12)(cid:12)(cid:12)(cid:12)(cid:12) (κ0, κ1, . . . , κn−1) $← PCG.Gen(1λ)
(cid:41)
(cid:12)(cid:12)(cid:12)(cid:12)(cid:12) (κ0, κ1, . . . , κn−1) $← PCG.Gen(1λ)
(cid:41)
(cid:12)(cid:12)(cid:12)(cid:12)(cid:12)(cid:12)(cid:12)(cid:12)
(Ri)i∈H $← RSample(cid:0)1λ,C, (Ri)i∈C(cid:1)
∀i ∈ [n] : Ri ← PCG.Eval(κi, i)
(κ0, κ1, . . . , κn−1) $← PCG.Gen(1λ)
∀i ∈ C : Ri ← PCG.Eval(κi, i)
(cid:40)
(cid:40)
(Ri)i∈[n]
(κi)i∈C
(Ri)i∈H
 (κi)i∈C
(Ri)i∈H
Informally speaking, correctness states that the expansions
of the seeds looks like the output of CorGen(1λ). Security
instead asserts that the information leaked by a subset of seeds
about the remaining outputs is no more than what can be
extracted from their expansion.
F. Distributed Point Functions
Let N be a positive integer and (D, +) be a group. A point
function is a function f : [N ] → D, parametrised by ω ∈ [N ]
and β ∈ D, such that
(cid:40)
f (x) =
β if x = ω,
otherwise.
0
We refer to ω as the special position of the point function,
while β = f (ω) is called the non-zero element.
A distributed point function, or DPF, is a compact way
of secret-sharing a point function without leaking its special
position nor the non-zero element. Given such a share of the
function, each party can locally compute an additive share of
f (x) at any point x.
Below, we give the formal syntax of a DPF [GI14], [BGI15].
Deﬁnition 4 (Distributed Point Function): Let N be a
positive integer and let (D, +) be a ﬁnite group. An n-party
DPF with domain [N ] and codomain (D, +) is a pair of PPT
algorithms (DPF.Gen, DPF.Eval) with the following syntax.
• DPF.Gen takes as input the security parameter 1λ and
a description of the point function f, speciﬁcally, the
special position ω ∈ [N ] and the non-zero element
β ∈ D. The output is n keys κ0, κ1, . . . , κn−1.
• DPF.Eval takes as input a DPF key κi, index i ∈ [n] and
a value x ∈ [N ], outputting an additive share vi of f (x).
A DPF must satisfy correctness, meaning that for a set of
DPF keys κ0, . . . , κn−1 for the point function f, we have
i DPF.Eval(κi, i, x) = f (x). Secondly, the security property
requires that any proper subset of DPF keys can be simulated,
without knowing the underlying point function. For the formal
deﬁnitions, we refer to [GI14].
(cid:80)
To simplify notation, we write DPF.FullEval(κi, i) to denote
the evaluation of the key κi over the whole domain [N ]. This
results in an additive share of the full N-dimensional vector
with only one non-zero entry in the ω-th position. Abusing
terminology slightly, we refer to a vector of this type as a unit
vector.
Authorized licensed use limited to: Tsinghua University. Downloaded on August 07,2022 at 12:21:08 UTC from IEEE Xplore.  Restrictions apply. 
62559
a) State-of-the-Art: We use DPFs for 2 parties only. In
this setting, the most efﬁcient construction is due to [BGI16],
has O(λ · log N ) key size and supports any abelian group
as the codomain D. Regarding computational efﬁciency, the
dominant cost of a full-domain evaluation DPF.FullEval is
around 2N evaluations of a length-doubling PRG.
b) Distributed Sum of Point Functions: We will use an
extension of DPFs, called distributed sums of point
func-
tions, as used previously [BCG+20]. A distributed sum of
is a way to secret-share a
t point functions, or DSPFt,
function obtained by adding t point
functions. As with
DPF, we express a DSPFt by a pair of PPT algorithms
(DSPFt.Gen, DSPFt.Eval), the ﬁrst one of which takes as
input
the t special positions and the t non-zero elements
describing the function f, outputting n small keys, one for
each party. The latter can then be locally evaluated by the
parties over an additional input x ∈ [N ], obtaining a secret-
sharing of f (x). This time, the evaluation over the whole
domain leads to a secret-sharing of an N-dimensional t-sparse
vector. Correctness and security of DSPFts are deﬁned as for
DPFs, with minimal adaptation to the increased number of
special positions and non-zero elements.
To construct a DSPFts, we simply use a DPF instance
for each of the t points of the DSPFt. Each DSPFt key is
therefore composed of t DPF keys, and evaluated on input x
by computing the sum of the evaluations of the t DPF keys
over x.
III. KEY GENERATION AND SIGNING
A. ECDSA Tuples and the Ideal Functionality F R
Prep
Our threshold ECDSA construction is based on the ofﬂine
phase-online phase paradigm. In other words, the protocol is
split into two parts: an input-independent preprocessing phase
called the ofﬂine phase and a light online phase where we
generate ECDSA signatures using the pregenerated data.
Each party Pi is associated with some key material, in par-
ticular, an additive share of the ECDSA private key ski ∈ Fq
and a BeDOZa style MAC key αi ∈ Fq [BDOZ11]. In the
ofﬂine phase, we generate ECDSA tuples, i.e. each party Pi
obtains a list of Fq elements of the form
(cid:0)xi, (Mi,j, Kj,i)j(cid:54)=i, yi, di, zi
(cid:1)
where Mi,j and Ki,j are BeDOZa style MACs over xi w.r.t.
the MAC key αj
4, i.e.
Mi,j = Ki,j + αj · xi,
and the remaining terms satisfy the following conditions
yi =
di,
yi =
zi.
(cid:88)
i∈[n]
xi · (cid:88)
i∈[n]
(cid:88)
i∈[n]
(cid:88)
i∈[n]
(cid:88)
i∈[n]
ski · (cid:88)
i∈[n]
public key
(cid:88)
i∈[n]
PK :=
ski · G.
The ofﬂine phase takes also care of computing the ECDSA
4Observe that Pi knows only xi and Mi,j, whereas Pj knows αj and
Ki,j.
Ring ECDSA Tuples and F R
The functionality F R
Prep: In our protocol, we actually
deal with a generalisation of the ECDSA tuples to rings R
in which the multiplication by Fq elements is well-deﬁned.
Speciﬁcally, we generate material with the same structure as
ECDSA tuples, however using elements belonging to R rather
than Fq. The key material ski and αi will instead remain in
Fq as before. We call such tuples ring ECDSA tuples. Our
protocol is going to generate them over a Module-LPN ring.
Prep implemented by our preprocessing
protocol is formalised in Figure 3. Essentially, the functionality
allows the adversary to choose the BeDOZa MAC keys and the
material of the corrupted parties. Once it received them, F R
Prep
completes the ECDSA tuples sampling random elements.
Finally, it outputs the produced material to the honest parties.
Prep is parametrised by the ring R over which
the ECDSA tuples are generated. In order to produce ECDSA
signature, we are actually interested in the case R = FN
q where
the latter is equipped with the pointwise addition and multipli-
cation. An ECDSA tuple over such ring corresponds indeed to
N ECDSA tuples over Fq. As we discussed in Section II-D,
FN
is isomorphic to a Module-LPN ring allowing us to base
q
the preprocessing protocol on the corresponding assumption.
B. Distributed Key Generation and Signing in the F R
Hybrid Model
Notice that F R
Prep-
Given our functionality F R
Prep for R = FN
key generation is straight-forward. Speciﬁcally,
send the command Init to the ideal functionality F R
receive back the public key PK (and a MAC key αi).
q , the multiparty
the parties
Prep, to
We proceed to present our multiparty signing protocol,
where the parties jointly sign a message m. This protocol relies
on an ofﬂine phase that uses F R
Prep and then requires the parties
to have one round of interaction, in which r is revealed. Then,
once the message to be signed becomes known, there is one
more round of interaction where the signature is revealed.
In more details, in the ofﬂine step, the parties open x· G by
having each party Pi sending xi · G to all the other parties. To
prevent cheating, we use the secret MAC key to ensure that
each party used the xi given by F R
Prep. Speciﬁcally, each Pi
sends also Mi,j · G to Pj. Holding Kj,i and αj, Pj can check
that Mi,j · G = Ki,j · G + αj · (xi · G). If this check holds for
j=0 (xj · G)
and take r to be the x-axis of the result. Once the parties
receive a message m to sign, each party Pi sets m(cid:48) ← H(m),
computes τi ← yi · m(cid:48) + r · di and sends zi and τi to all
the other parties. Upon receiving τj and zj for all j (cid:54)= i,
j=0 zj,
and sets (r, s) where s ← τ
z . Note that corrupted parties may
send incorrect shares for z and τ. To detect this, each party
runs the veriﬁcation algorithm over m, (r, s). If the veriﬁcation
succeeds, then the party outputs (r, s) as a valid signature.
Otherwise, it aborts.
To see that the protocol is correct, observe that z = x · y
and d = sk · y and so
s = τ · z−1 = (y · m(cid:48) + r · d)· (x−1 · y−1) = x−1 · (m(cid:48) + r · sk)
all j (cid:54)= i, then party Pi can compute x · G ←(cid:80)n−1
j=0 τj and z ← (cid:80)n−1
each party Pi computes τ ← (cid:80)n−1
Authorized licensed use limited to: Tsinghua University. Downloaded on August 07,2022 at 12:21:08 UTC from IEEE Xplore.  Restrictions apply. 
72560
The Ideal Functionality F R
Prep
Initialisation. On input Init from every party, the functionality samples the ECDSA private key sk $← Fq and waits for
$← F for every i ∈ H. The functionality sends PK ← sk·G
(αi)i∈C from the corrupted parties. Then, it samples random αi
to the adversary. Finally, upon receiving an OK from the adversary, it outputs (αi, PK) to every honest party Pi.
ECDSA Tuple. On input Tuple from every party, the functionality samples x, y $← R and sets z ← x · y. Then,
i∈C over R from the adversary. Finally, it samples a random tuple
(xi, (Mi,j, Kj,i)j(cid:54)=i, yi, di, zi) over R for every i ∈ H subject to
it waits for a tuple (cid:0)(cid:98)xi, (Mi,j, Kj,i)j∈H,(cid:98)yi,(cid:98)di,(cid:98)zi
(cid:98)xi = x,
(cid:98)zi = z,
(cid:1)
(cid:88)
(cid:88)
(cid:88)
xi +
yi +
i∈H
i∈C
Mi,j = Ki,j + αj · xi,
i∈H
(cid:88)
(cid:98)yi = y,
(cid:88)
i∈C
di +
i∈H
(cid:88)
i∈C
(cid:88)
(cid:88)
(cid:98)di = sk · y.
zi +
i∈H
i∈C
At the end, it outputs (xi, (Mi,j, Kj,i)j(cid:54)=i, yi, di, zi) to every honest party Pi.
Abort. On input Abort from the adversary, the functionality outputs ⊥ to every honest party and halts.
Fig. 3. The ofﬂine phase functionality F R
Prep
as required.
Theorem 1: The protocol ΠECDSA UC-implements FECDSA
in the F R
in the
presence of malicious adversaries controlling up to n − 1
parties.
The proof of Theorem 1 can be found in Appendix A.
q ,
Prep-hybrid model with statistical error 1
Communication:
In our protocol each party sends 2
messages in each of the two rounds to each other party.
Thus,
the total communication between each 2 parties is
2·(log q +log p+1), where Fp is the ﬁeld on which the elliptic
curve is deﬁned, plus the cost of F R
Prep, which we realise in
Section IV.
C. Round Complexity and Relation to ECDSA Security
A natural question when using our protocol in practice, is
when one should run the pre-signing phase. From one side,
opening r in advance allows to have a one-round protocol
once the message m to be signed becomes known. On the
other hand, opening r before m is known does not match
the standard unforgeability game for ECDSA security, and
therefore one needs to be careful about opening potential
vulnerabilities. The work of Canetti et al. [CGG+20] considers
security of ECDSA with presignatures and shows that security
of ECDSA is preserved when a constant number of nonces
are available to the adversary. In particular, their reduction
shows an exponential security loss in the number of released
nonces. Therefore, performing a large number of pre-signing
operations before the message is known appears to be a
bad idea. The work of [GS21] highlights that pre-signing
requires to assume an extra property on the hash function than
plain ECDSA (note that a random oracle would satisfy the
assumption). They propose some countermeasures where the
nonce is re-randomised after the message to be signed has been
chosen. However, these countermeasures appear incompatible
with any known preprocessing protocol for ECDSA. Thus, one
can either use our protocol as a two-round protocol (where the
pre-signing is performed after the message is chosen) if one is
worried of the potential attack vector described by [GS21], or
one can use our protocol as an amortised one-round protocol
by revealing the r for signature i + 1 in parallel with the
computation of s for signature i.
IV. REALIZING F R
Prep - SILENT PREPROCESSING
In this section, we present the major contribution of this
the functionality F R
paper, namely how to implement
Prep
described in Figure 3, generating N ECDSA tuples with
O(log N ) communication complexity.
Prep.
We will split the discussion into two parts. We start by
presenting an efﬁcient PCG for the generation of ECDSA
tuples over a Module-LPN ring R and, secondly, we will
describe the protocol ΠR
Prep, translating the PCG blueprint in
an actual implementation of F R
We recall that FN
q , equipped with pointwise addition and
multiplication, is isomorphic to a Module-LPN ring R (see
Section II-D). Furthermore, due to the linearity of the iso-
morphism φ, converting the ring ECDSA tuples over R to
FN
q does not require any communication. As a matter of fact,
each party just needs to apply φ to its own shares. Finally,
the isomorphism map is also efﬁciently computable using
FFT. Rephrasing what we have said in simple words, we can
instantiate ΠR
A. An Efﬁcient PCG for Ring ECDSA Tuples
q without any problems.
Prep over FN
In this section, we describe a PCG for ECDSA tuples over
a Module-LPN ring R. Observe that the correlation we aim
to produce is trivially reverse samplable as we can always
efﬁciently complete the shares of the corrupted parties to
an ECDSA tuple. The PCG we are going to present is the
construction underlying the preprocessing protocol ΠR
Prep and
the main reason why it achieves a so low communication
complexity. A formal description of PCGECDSA can be found
in Figure 5. Observe that it uses a random oracle O. We now
sketch the main ideas at the base of the construction.
Authorized licensed use limited to: Tsinghua University. Downloaded on August 07,2022 at 12:21:08 UTC from IEEE Xplore.  Restrictions apply. 
82561
The Protocol ΠECDSA
Let π : G → Fq be the function that maps a point a ∈ G into ax mod q and let H : M → Fq be a hash function.
a) DISTRIBUTED KEY GENERATION: The parties send the command Init to F R