We presented a lightweight and sound symbolic security
framework and an inductive notation for formal speciﬁcation
of boolean circuits. Our symbolic language extends on previ-
ous work by including random bits and controlled swap opera-
tion; such an extension is not trivial as we need the additional
rules for equivalence on patterns and the pseudorandom bit
renaming to build a sound language. We proved that Yao’s
garbled circuit scheme is symbolically secure, which can be
translated into selective computational security thanks to the
computational soundness theorem. By abstracting the proba-
bilistic behaviors in the computational soundness theorem, one
may ﬁnd concise and clean descriptions of security properties,
e.g., the label invariant in our proof of garbled circuit schemes.
As a result, the complete security proof can be presented in a
way that is not only easy to be mechanized by computer-aided
veriﬁcation tools but also manageable for human readers to
understand and verify. We remark that helping cryptographers
comprehend formal security proofs could be of great beneﬁt to
them to ﬁnd optimization opportunities that might be hidden
in complex computational proofs.
Our symbolic language does not limit us to just circuit
garbling schemes. With a small extension to include the xor
operation on key expressions, we can formally specify Yao’s
computational secret sharing scheme [37], [38] and prove its
security. We brieﬂy present such analysis in the Appendix. As
another example, we can formalize the protocol of OT length
extension via a pseudorandom generator [39] in this extended
framework, and we can prove it is secure against a static
semi-honest adversary. A natural but challenging upgrade is to
consider active security of cryptographic protocols; we leave
it to future work.
ACKNOWLEDGMENT
This work was supported in part by the National Science
Foundation (NSF) under grant CNS-1528068. Opinions, ﬁnd-
ings and conclusions or recommendations expressed in this
material are those of the author(s) and do not necessarily
reﬂect the views of the NSF.
REFERENCES
[1] A. C. Yao, “Protocols for secure computations (extended abstract),” in
23rd Annual Symposium on Foundations of Computer Science, Chicago,
Illinois, USA, 3-5 November 1982, 1982, pp. 160–164.
[2] ——, “How to generate and exchange secrets (extended abstract),” in
27th Annual Symposium on Foundations of Computer Science, Toronto,
Canada, 27-29 October 1986, 1986, pp. 162–167.
[3] O. Goldreich, S. Micali, and A. Wigderson, “How to play any mental
game or A completeness theorem for protocols with honest majority,”
in Proceedings of the 19th Annual ACM Symposium on Theory of
Computing, 1987, New York, New York, USA, 1987, pp. 218–229.
[4] M. Ben-Or, S. Goldwasser, and A. Wigderson, “Completeness theorems
for non-cryptographic fault-tolerant distributed computation (extended
abstract),” in Proceedings of
the 20th Annual ACM Symposium on
Theory of Computing, May 2-4, 1988, Chicago, Illinois, USA, 1988,
pp. 1–10.
[5] A. Ben-David, N. Nisan, and B. Pinkas, “Fairplaymp: a system for secure
multi-party computation,” in Proceedings of the 2008 ACM Conference
on Computer and Communications Security, CCS 2008, Alexandria,
Virginia, USA, October 27-31, 2008, 2008, pp. 257–266.
Fig. 6. Running times of proving symbolic security of the garbling scheme
using our implementation. Experiments were run on a Linux desktop with
an Intel I7-4790 CPU running at 3.60GHz. Each point corresponds to a
randomly generated test case, where the circuit may contain up to 250k 𝐍𝐀𝐧𝐝
subcircuits and the input vector may have up to 128 components. For each test
case we measure the total time spent on generating the real and the simulated
garbled circuit expressions, computing their patterns, and then checking for
symbolic equivalence on patterns. The horizontal axis measures the number
of 𝐍𝐀𝐧𝐝 subcircuits in a circuit, and the vertical axis measures the time in
seconds.
lines of Haskell code, and its performance is fairly good: For
example, with a randomly generated circuit that contains about
10000 NAND subcircuits and a 112-dimension boolean vector,
the entire process of generating the real and the simulated
garbled circuits, computing their patterns, and checking for
symbolic equivalence runs in about 1.3 second on a Linux
desktop with an Intel I7-4790 CPU running at 3.60GHz. No-
tice that the number of NAND subcircuits and the dimension
of the input vector together determine the number of atomic
keys in the garbled circuit expression, which aﬀects how fast
the greatest ﬁxed point of the recoverable key set can be
reached. Further optimization is possible, for example, we
could expand our circuit notation by adding AND and XOR
as basic circuits. As a reference, an AES encryption circuit
usually consists of about 5k AND and 20k XOR gates, which
can be implemented using about 90k 𝐍𝐀𝐧𝐝 inductively.
We conducted automated tests using the QuickCheck test
framework to perform symbolic security analysis on randomly
generated circuits and boolean vectors, and the performance
results are shown in Fig. 6.
We remark that our automated tests run on a circuit-by-
circuit basis, that is, given a circuit and a boolean vector, the
test ensures that the resulting garbled circuit is computationally
secure. In fact, our program can check that, for any crypto-
graphic system that is built using primitives in our symbolic
framework, an instance for a given input is computationally
secure. It is also interesting to translate our proofs into a
machine-checked ﬂavor using veriﬁcation tools, but such work
is out of the scope of the current paper, and we would like to
explore it in the future.
159
[6] D. Malkhi, N. Nisan, B. Pinkas, and Y. Sella, “Fairplay - secure two-
party computation system,” in Proceedings of the 13th USENIX Security
Symposium, August 9-13, 2004, San Diego, CA, USA, 2004, pp. 287–
302.
[7] D. Bogdanov, S. Laur, and J. Willemson, “Sharemind: A framework for
fast privacy-preserving computations,” in Computer Security - ESORICS
2008, 13th European Symposium on Research in Computer Security,
Málaga, Spain, October 6-8, 2008. Proceedings, 2008, pp. 192–206.
[8] L. Malka, “Vmcrypt: modular software architecture for scalable secure
computation,” in Proceedings of the 18th ACM Conference on Com-
puter and Communications Security, CCS 2011, Chicago, Illinois, USA,
October 17-21, 2011, 2011, pp. 715–724.
[9] Y. Lindell and B. Pinkas, “A proof of security of yao’s protocol for two-
party computation,” J. Cryptology, vol. 22, no. 2, pp. 161–188, 2009.
[10] M. Abadi and P. Rogaway, “Reconciling two views of cryptography (the
computational soundness of formal encryption),” J. Cryptology, vol. 20,
no. 3, p. 395, 2007.
[11] D. Micciancio and B. Warinschi, “Completeness theorems for the abadi-
rogaway language of encrypted expressions,” Journal of Computer
Security, vol. 12, no. 1, pp. 99–130, 2004.
[12] D. Micciancio, “Computational soundness, co-induction, and encryp-
tion cycles,” in Advances in Cryptology - EUROCRYPT 2010, 29th
Annual International Conference on the Theory and Applications of
Cryptographic Techniques, French Riviera, May 30 - June 3, 2010.
Proceedings, 2010, pp. 362–380.
[13] D. Micciancio and S. Panjwani, “Corrupting one vs. corrupting many:
The case of broadcast and multicast encryption,” in Automata, Lan-
guages and Programming, 33rd International Colloquium, ICALP 2006,
Venice, Italy, July 10-14, 2006, Proceedings, Part II, 2006, pp. 70–82.
[14] S. Panjwani, “Tackling adaptive corruptions in multicast encryption
protocols,” in Theory of Cryptography, 4th Theory of Cryptography
Conference, TCC 2007, Amsterdam, The Netherlands, February 21-24,
2007, Proceedings, 2007, pp. 21–40.
[15] D. Micciancio and S. Panjwani, “Optimal communication complexity
of generic multicast key distribution,” IEEE/ACM Trans. Netw., vol. 16,
no. 4, pp. 803–813, 2008.
[16] M. Abadi and B. Warinschi, “Security analysis of cryptographically
controlled access to XML documents,” J. ACM, vol. 55, no. 2, pp. 6:1–
6:29, 2008.
[17] M. Baudet, B. Warinschi, and M. Abadi, “Guessing attacks and the
computational soundness of static equivalence,” Journal of Computer
Security, vol. 18, no. 5, pp. 909–968, 2010.
[18] D. Micciancio, “Symbolic encryption with pseudorandom keys,” Cryp-
tology ePrint Archive, Report 2009/249, 2009, https://eprint.iacr.org/
2009/249.
[19] J. Hughes, “Generalising monads to arrows,” Sci. Comput. Program.,
vol. 37, no. 1-3, pp. 67–111, 2000.
[20] ——, “Programming with arrows,” in Advanced Functional Program-
ming, 5th International School, AFP 2004, Tartu, Estonia, August 14-21,
2004, Revised Lectures, 2004, pp. 73–129.
[21] R. Paterson, “A new notation for arrows,” in Proceedings of the Sixth
ACM SIGPLAN International Conference on Functional Programming
(ICFP ’01), Firenze (Florence), Italy, September 3-5, 2001., 2001, pp.
229–240.
[22] S. Lindley, P. Wadler, and J. Yallop, “The arrow calculus,” J. Funct.
Program., vol. 20, no. 1, pp. 51–69, 2010.
[23] M. Bellare, V. T. Hoang, and P. Rogaway, “Foundations of garbled
circuits,” in the ACM Conference on Computer and Communications
Security, CCS’12, Raleigh, NC, USA, October 16-18, 2012, 2012, pp.
784–796.
[24] ——, “Adaptively secure garbling with applications to one-time pro-
grams and secure outsourcing,” in Advances in Cryptology - ASIACRYPT
2012 - 18th International Conference on the Theory and Application of
Cryptology and Information Security, Beijing, China, December 2-6,
2012. Proceedings, 2012, pp. 134–153.
[25] D. Boneh, C. Gentry, S. Gorbunov, S. Halevi, V. Nikolaenko, G. Segev,
V. Vaikuntanathan, and D. Vinayagamurthy, “Fully key-homomorphic
encryption, arithmetic circuit ABE and compact garbled circuits,” in
Advances in Cryptology - EUROCRYPT 2014 - 33rd Annual Interna-
tional Conference on the Theory and Applications of Cryptographic
Techniques, Copenhagen, Denmark, May 11-15, 2014. Proceedings,
2014, pp. 533–556.
[26] B. Hemenway, Z. Jafargholi, R. Ostrovsky, A. Scafuro, and D. Wichs,
“Adaptively secure garbled circuits from one-way functions,” in Ad-
vances in Cryptology - CRYPTO 2016 - 36th Annual International
Cryptology Conference, Santa Barbara, CA, USA, August 14-18, 2016,
Proceedings, Part III, 2016, pp. 149–178.
[27] Z. Jafargholi and D. Wichs, “Adaptive security of yao’s garbled circuits,”
in Theory of Cryptography - 14th International Conference, TCC 2016-
B, Beijing, China, October 31 - November 3, 2016, Proceedings, Part
I, 2016, pp. 433–458.
[28] Z. Jafargholi, C. Kamath, K. Klein, I. Komargodski, K. Pietrzak,
and D. Wichs, “Be adaptive, avoid overcommitting,” in Advances in
Cryptology - CRYPTO 2017 - 37th Annual International Cryptology
Conference, Santa Barbara, CA, USA, August 20-24, 2017, Proceedings,
Part I, 2017, pp. 133–163.
[29] D. Beaver and S. Haber, “Cryptographic protocols provably secure
against dynamic adversaries,” in Advances in Cryptology - EUROCRYPT
’92, Workshop on the Theory and Application of of Cryptographic
Techniques, Balatonfüred, Hungary, May 24-28, 1992, Proceedings,
1992, pp. 307–323.
[30] R. Canetti, U. Feige, O. Goldreich, and M. Naor, “Adaptively secure
multi-party computation,” in Proceedings of the Twenty-Eighth Annual
ACM Symposium on the Theory of Computing, Philadelphia, Pennsyl-
vania, USA, May 22-24, 1996, 1996, pp. 639–648.
[31] B. Blanchet, “A computationally sound mechanized prover for security
protocols,” in IEEE Symposium on Security and Privacy, Oakland,
California, May 2006, pp. 140–154.
[32] G. Barthe, B. Grégoire, and S. Zanella Béguelin, “Formal certiﬁcation
of code-based cryptographic proofs,” in Proceedings of the 36th Annual