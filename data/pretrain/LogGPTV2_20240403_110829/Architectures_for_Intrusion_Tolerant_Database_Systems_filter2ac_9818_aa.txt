title:Architectures for Intrusion Tolerant Database Systems
author:Peng Liu
Architectures for Intrusion Tolerant Database Systems
School of Information Science and Technology
Peng Liu
Pennsylvania State University
University Park, PA 16802
PI:EMAIL
Abstract
In this paper, we propose four architectures for
intrusion-tolerant database systems. While traditional se-
cure database systems rely on prevention controls, an
intrusion-tolerant database system can operate through at-
tacks in such a way that the system can continue delivering
essential services in the face of attacks. With a focus on
attacks by malicious transactions, Architecture I can detect
intrusions, and locate and repair the damage caused by the
intrusions. Architecture II enhances Architecture I with the
ability to isolate attacks so that the database can be immu-
nized from the damage caused by a lot of attacks. Architec-
ture III enhances Architecture I with the ability to dynam-
ically contain the damage in such a way that no damage
will leak out during the attack recovery process. Architec-
ture IV enhances Architectures II and III with the ability to
adapt the intrusion-tolerance controls to the changing envi-
ronment so that a stabilized level of trustworthiness can be
maintained. Architecture V enhances Architecture IV with
the ability to deliver differential, quantitative QoIA services
to customers who have subscribed for these services even in
the face of attacks.
1 Introduction
The visions of Internet applications (e.g., e-commerce)
and pervasive computing not only push computations from
a computer into everywhere, but also maximize our de-
pendence on networked computing systems. Quickly in-
creased complexity, openness, inter-connection, and inter-
dependence have made these systems more vulnerable and
difﬁcult to protect than ever. The inability of existing secu-
rity mechanisms to prevent every attack is well embodied in
several recent large-scale Internet attacks such as the DDoS
attack in Feb. 2000 [44]. These accidents convince the secu-
rity community that traditional prevention-centric security
is not enough and the need for intrusion-tolerant or attack-
resilient systems is urgent. Intrusion-tolerant systems, with
characteristics quite different from traditional secure sys-
tems [12, 3, 18, 40, 30], extend traditional secure systems
to be able to survive or operate through attacks. The focus
of intrusion-tolerant systems is the ability to continue deliv-
ering essential services in the face of attacks. New mech-
anisms of attack-resilient systems include but are not lim-
ited to intrusion detection, fragmentation, replication, mi-
gration, masking, isolation, containment, and recovery.
Being a critical component of almost every mission criti-
cal information system, database products are today a multi-
billion dollar industry. Database systems motivated 32%
of the hardware server volume in 1995 [41], and 39% of
the server volume in 2000. Improving the intrusion toler-
ance of database systems has a direct positive impact on the
technology that enables a variety of critical, trusted appli-
cations such as e-commerce, air trafﬁc control, credit-card,
telecommunication control, and electricity and water supply
systems, that our everyday live depends on.
However, existing database security mechanisms are
very limited in tolerating intrusions. In particular, authen-
tication and access control cannot prevent all attacks; in-
tegrity constraints are weak at prohibiting plausible but
incorrect data; concurrency control and recovery mecha-
nisms cannot distinguish legitimate transactions from ma-
licious ones; and automatic replication facilities and active
database triggers can even serve to spread the damage.
A Multi-Layer Approach to Database Intrusion
Tolerance
Making a database system intrusion tolerant requires in
general a multi-layer approach, since attacks could come
from any of the following layers: hardware, OS, DBMS,
and transactions (or applications). A multi-layer approach
can be developed along two directions: (1) from scratch or
(2) using “off-the-shelf” components.
Along the from-scratch direction, tamper-resistant pro-
cessing environments [39], and trusted OS or trusted DBMS
Proceedings of the Foundations of Intrusion Tolerant Systems (OASIS’03) 
0-7695-2057-X/03 $17.00 © 2003 IEEE
loaders have been applied to close the door on hardware
attacks and OS bugs; certiﬁed programs [32, 38] and pro-
tective compiler extensions [8] can be applied to close the
door on many DBMS bugs; and signed checksums (and a
small amount of tamper-resistant storage to keep the sign-
ing key) have been used to detect OS-level data corruption
[27]. However, the from-scratch approach is usually not a
cost-effective approach, and it cannot be used to tolerate au-
thorized transaction-level intrusions. For example, neither
trusted OS nor signed checksums can detect or repair the
data corruption caused by a malicious transaction issued by
an attacker assuming the identify of an authorized user.
Based on “off-the-shelf” components, OS-level attacks
have been addressed by several efforts.
In [5], (signed)
checksums are smartly used to detect data corruption. In
[29] a technique is proposed to detect storage jamming, ma-
licious modiﬁcation of data, using a set of special detect ob-
jects which are indistinguishable to the jammer from normal
objects. Modiﬁcation of detect objects indicates a storage
jamming attack. Although these techniques can effectively
tolerant OS-level intrusions, they cannot handle authorized
but malicious transactions.
Our Focus and Contributions
In this paper, we focus on transaction-level intrusion-
tolerance, which, based on the fact that most attacks are
from insiders [6], should be the major threat to database
systems; and we propose ﬁve architectures for intrusion-
tolerant database systems. Although built using “off-the-
shelf” components, our frameworks cannot (directly) de-
fend against processor, OS, or DBMS-level attacks, when
the lower-level attacks are not so serious and when most
attacks are from malicious transactions, our framework
can still be very effective. Moreover, existing lower-level
intrusion-tolerance mechanisms such as those proposed in
[39, 27, 5, 29] can be easily integrated into our frameworks
to build a multi-layer, intrusion-tolerant database system.
The remainder of the paper is organized as follows. Sec-
tion 2 discusses some related work. In Sections 3, 4, 5, 6,
and 7, we present ﬁve intrusion-tolerant database systems
architectures. Section 8 concludes the paper.
2 Related Work
Database security concerns the conﬁdentiality, integrity,
and availability of data stored in a database. A broad span of
research from authorization [13, 34, 16], to inference con-
trol [1], to multilevel secure databases [46, 36], and to mul-
tilevel secure transaction processing [4], addresses primar-
ily how to protect the security of a database, especially its
conﬁdentiality. Intrusion tolerance, however, is seldom ad-
dressed.
One critical step towards intrusion-tolerant database sys-
tems is intrusion detection (ID), which has attracted many
researchers [26, 31]. The existing methodology of ID can
be roughly classed as anomaly detection [17, 35, 19, 37]
or misuse detection[10, 14]. However, current ID research
focuses on identifying attacks on OS and computer net-
works. Although there has been some work on database
ID [7, 42], these methods are neither application aware nor
at the transaction-level.
The need for intrusion tolerance has been recognized by
many researchers in such contexts as information warfare
[12]. Recently, extensive research has been done in gen-
eral principles of survivability [18, 45, 11], survivability of
networks [30], survivable storage systems [47], survivable
application development via middleware [33], persistent ob-
jects [28], and survivable document editing systems [43].
Some research has also been done in database intrusion
tolerance. In [3], a fault tolerant approach is taken to sur-
vive database attacks where (a) several useful survivability
phases are suggested, though no concrete mechanisms are
proposed for these phases; (b) a color scheme for marking
damage (and repair) and a notion of integrity suitable for
partially damaged databases are used to develop a mecha-
nism by which databases under attack could still be safely
used.
Some of the architectures presented in this paper are di-
rectly or indirectly proposed, investigated (using detailed
system and algorithm designs), and evaluated (using pro-
totypes) by our previous research. In particular, Architec-
ture I is addressed in [2, 24]; Architecture II is addressed in
[22, 20]; and Architecture III is proposed in [21, 23]. How-
ever, Architectures IV and V are new. Although in [25] we
proposed a rule-based adaptation mechanism for intrusion-
tolerant database systems, [25] does not give a comprehen-
sive formal model for adaptive intrusion-tolerant database
systems, and such a model is presented by Architecture IV.
We include Architectures I, II, and III in this paper because
(a) we want to provide a comprehensive view of the funda-
mental problems in intrusion-tolerant database systems and
the corresponding set of promising solutions, and (b) the
three architectures build the foundation for Architectures IV
and V. It should be noticed that our focus is on architecture
level issues and the readers may need to refer to other papers
for more design and implementation details.
3 Scheme I
Since the property of database atomicity indicates that
only committed transactions can really change the database,
it is theoretically true that if we can detect every malicious
transaction before it commits, then we can roll back the
transaction before it causes any damage. However, this
“perfect” solution is not practical for two reasons. First,
Proceedings of the Foundations of Intrusion Tolerant Systems (OASIS’03) 
0-7695-2057-X/03 $17.00 © 2003 IEEE
Malicious and Legitimate Transactions
cleaning transactions
Mediator
alarms
Repair Manager
DBMS
   

   

   

damage
Damage
Assessor
Damage
Repairer
history
logs
alarms
  

  

  

database
trails
Intrusion Detector
Figure 1. Architecture I
transaction execution is, in general, much quicker than de-
tection, and slowing down transaction execution can cause
very serious denial-of-service. For example, the Microsoft
SQL Server can execute over 1000 (TPC-C) transactions
within one second (see www.oracle.com), while the aver-
age anomaly detection latency is typically in the scale of
minutes or seconds. Detection is much slower since: (1)
in many cases detection needs human intervention; (2) to
reduce false alarms, in many cases a sequence of actions
should be analyzed. For example, [19] shows that when
using system call trails to identify sendmail attacks, syn-
thesizing the anomaly scores of a sequence of system calls
(longer than 6) can achieve much better accuracy than based
on single system calls.
Second, some authorized but malicious transactions are
very difﬁcult to detect. They look and behave just like other
legitimate transactions. Anomaly detection based on the se-
mantics of transactions (and the application) may be the
only effective way to identify such attacks, however, it is
very difﬁcult, if not impossible, for an anomaly detector to
have a 100% detection rate with reasonable false alarm rate
and detection latency.
Hence, a practical goal should be: “After the database is
damaged, locate the damaged part and repair it as soon as
possible, so that the database can continue being useful in
the face of attacks.” In other words, we want the database
system to operate through attacks.
Architecture I, as shown in Figure 1, combines intrusion
detection and attack recovery to achieve this goal. In partic-
ular, the Intrusion Detector monitors and analyzes the trails
of database sessions and transactions in a real-time man-
ner to identify malicious transactions as soon as possible.
Alarms of malicious transactions, when raised, will be in-
stantly sent to the Repair Manager, which will locate the
damage caused by the attack and repair the damage. During
the whole intrusion detection and attack recovery process,
the database continues executing new transactions.
Although there are a lot of anomaly detection algorithms
(for host or network based intrusion detection) [17, 35, 19,
37], they usually cannot be directly applied in malicious
transaction detection, which faces the following unique
challenges:
(cid:0) Application semantics must be captured and used.
For example, for a school salary management appli-
cation, a $3000 raise is normal, but a $10000 raise
is very abnormal. Application semantics based in-
trusion detection is application aware. Since differ-
ent applications can have very different semantics,
general application-aware database intrusion detection
systems must support dynamic integration of applica-
tion semantics. Since different anomaly detection al-
gorithms may be good for different application seman-
tics, a general application-aware database intrusion de-
tection system must adapt itself to application seman-
tics.
(cid:0) Multi-layer intrusion detection is usually necessary
for detection accuracy. First, proofs from application
layer, session layer, transaction layer, process layer,
and system call layer should be synthesized to do in-
trusion detection. Lower level proofs can help iden-
tify higher level anomalies. Second, OS-level and
transaction-level intrusion detection should be coupled
with each other.
We suggest a ﬂexible cartridge-like detector to address
these challenges. The detector is a cartridge which should
be general enough to plug in a variety of (a) anomaly de-
tection algorithms, (b) application semantics extraction al-
gorithms, and (c) application semantics based adaptation
policies. The user should be able to prepare some of these
algorithms and policies. The detector should provide the