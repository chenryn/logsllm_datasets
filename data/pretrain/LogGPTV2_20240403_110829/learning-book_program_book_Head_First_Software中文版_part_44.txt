## Page 366
零距离沟通
但是，这与我们处理过的事情湿什么两样，
对明？没有什é真正新的东西…
更多的开发循环事实上仅仅意味着更多的沟通。
在一轮开发循环中，有一些纷繁芜杂的事情需要
处理：多个团队成员、客户变更需求和使用情节、
不同功能片段的优先级，有时候，在完成你的需
求之前，需要估计你将要构建的是什么样的系统。
增加另一轮开发循环可能表示更多相同的问题
出现，但你不会碰到任何新的问题，这意
味着你可以依赖你一直在做的同样的事
情：碰头会议、记录你的大白板上每件
事、利用时间效率值来说明真实的开发
状况，大量的与你的开发团队、测试团队、当然
还有你的客户开展沟通工作。
在软件开发过程中，你碰到的大
多数问题的关键在于沟通。当你
有疑感时，与你的团队、其他团
PDG
队以及你的客户展开讨论。
330
第9章
---
## Page 367
结束开发循环
准备练习
以下是一些不同的测试方法，全都仅仅涉及一轮开发循环。
这些测试方法有哪些优点？有哪些缺点？
这种方法在范程
结案时剪一个大
型的测试得环。
开发循环
开发循环
开发循环
测试循环
漏洞修复
1
2
3
在备轮编码储环之后
这神方港增加了
一轮测试继环。
Z
开发循环
测试循环
开发循环
测试循环
开发循环
1
2
2
3.....
目前位置
331
---
## Page 368
有效的系统测试
准备练习
答案
以下是一些不同的测试方法，全都仅仅涉及一组开发循环。
这些测试方法有哪些优点？有哪些缺点？
开发循环
开发循环
开发循环
测试循环
漏洞修复
2
始。如集你采用这种方法，并键的是把每轮开复储环的结果反情给至少一组Beta版的用户和客户，你不
如果你有团队，这神方法也不赖。该方法一个比较大的缺点是重要的系统测试其在流程申的盖后才开
能等到第三轮形复姚环结兼时才开始测试和收集反馈信岛。
每轮开复储环期间你都一直采用自动化的测试，并旦在每给开道继环结束时提文致件给用户，因此，
如果你需要在客户答字确认你的开置项目之前与客户进行正规测试，这种方法也是行之有效的。由于在
对于自己是需构建了正确的此件系统
能始照预朝的方贰运行。测试丹发得环结束时.
式的同急金在开始展望2.0版本之前发生。
正
送通常称之为
检收到试
开发循环
测试循环
开发循环
测试循环
开发循环
1
2
2
3....
这种方法常要进行大量的储环工作，你的时间的50%花费在测试上。实际上，这种方式只金出现在一
种情形：你的客户乐意花费大量的时间用于测试和期出敬障。假如说你的客户有热惠于每月相而公众
用之前要有正式的验收流程。如果你没有一个单独的始粒和系统测试团队，就金看到类似的效法。
复步此件的想法：在用户的原置，让网站保持看更新科具有活力。但是，客户又坚持在代码提入使
332
第9章
---
## Page 369
结束开发循环
有效系统
测试的前
熟悉系统开始和结束状况，确认你是从使用一组已知的测试数据开
十个显著
始，数据最终能像你预期的一样结束。
特点
在身边回答各种问题。记录每个测试人员的所作所为，并且在每轮
系统测试中做同样的事情（与新增的测试一起）。
建立清晰的成功标准，系统何时才算足够好了？测试人员可以永远
地测试下去——在你开始之前就知道什么情况才算完成，你首先要
明白这一点：零错误反弹（zero-bug-bounce）（当你得到零个错误
时，即使事后错误的数量又反弹了）是一个接近成功的标志。
行重复性的工作，但计算机是可以的。让测试人员把他们的智力投
入到新的测试上，而不是把时间花费在一而再，再面三的相同的工
作之上。
件系统坚固，能有效运行，令他们引以为自豪，记住，测试人员能
促使开发人员变得更优秀。
3测试人员清楚地了解整个系统情况，要确认所有你的测试人员都了
解整个系统的情况以及不同部分之间的衔接情况。
2准确无误的系统文档（包括使用情节、用户案例、需求文档、手册
以及任何相关的内容）。除了测试文档之外，你应当记录所有在开
发循环期间，尤其在两轮开发循环之间所发生的细微变化。
1在客户、开发团队和测试团队之间保持良好而频繁的沟通。
目前位置，
333
---
## Page 370
记录和修正错误
错误的生与死
就像版本控制和构建系统一
终于，测试人员将开始发现软件错误。事实上，他
样，有大量码的工具可用于
们可能会找到很多软件错误。结果会怎么样呢？你仅
媒踪和保存款件特误。
仅是修正错误，就不担心吗？你把它记录下来了吗？
实际上，这些错误都微了什么处理？
嗯，没有人曾计
划弄哺白达个问题。这些额外的
选项是用来于付飞的？它们真令人
感到国总.
D
在系统测试品
要，得误异不递
是代码阅题，有
测试人员提交款件错误报告
时它们是今人
这是最关键的步骤之一：你必须记录款件错
感到国感的间
误！谁来报告软件错误并不重要，文档细致
常的用户接○
的程度是关键。毫无例外地记录下你会试要
间躯。
微的事情、如果可能的话，你还要记录下重
新产生错误的步骤、任何出错信息，在软
件错误出现之前，你立刻做了什么处理，面
1
别试人员当股一个款停错误
且.你预期发生的事是什么。
软件错误并不是那些明显失败的事情。它也可以是文
档中模棱两可之处、遗漏的功能特性或者web站点风
格的不一致。
6
更新款件错误报告
一且测试人员（以及原来的报告人）
对软件错误的修复工作感到满意，软
件错误报告就可以终结了。更新后的
软件错误报告可以做为重新测试的参
考，不要删除它因为你不知道何
时你需要回头参阅它。
334
第9章
---
## Page 371
结束开发循坏
有些图以和他们的客户一起遥过获件错误速除器来对修显师
些款件错误的先后项序排序，对手那些在当前开发得环期间
不准务修正的款件得误，并不的建相应的使用情节或老任务。
有些团队则系上的建使用情节和任务，并国让客户像对其他
使用情节
一样，对能件错误的处理进行优无级期序。不管是
种方式，
只需事无经过客户进行优无级期序，都是半有成
效的。
个款件得误就像一
个计别之外的任务
贰航像处理其他使
对它的处理方
3
为修复款件错误创建一个使用情节（或老任务）
软件错误的处理只是系统必须被完成的工作
有
时候，是在当前的开发循环中完成，有时候，则
是在后续的开发循环中完成。你必须捕提它们，
并与你的客户一起确定修正软件错误的先后顺序。
然而，对这些工作的估计并不容易，因为究竞哪
里出错并不清楚。有些团队具有一个名为“错误
修复”的使用情节，在需要的时候，他们就增加
相应的任务到该使用情节。
一个构建版本通常有
多个要够复的错误，
4
修复软件错误
但也可取决于取特误
开发团队把修正错误作为开发循环的一部分。
的量性
开始以编写测试程序暴露软件系统中的错误
（在你修改代码之前，该测试会先失败）。一且
团队修正了某个软件错误（该测试会让你知
道），他们应当在软件错误把它标记为已修
5
检查已经经复的错误，并验证它确实有效
正”。但不要把它标记为“已测试”，“已终
测试人员（或者最初的报告人）验证了新的构建版
止”，或者“已验证”状态一这是最初的报
本，并且确认对修正结果感到满意，现在，软件错
告人的工作。这有助于你得到一份准备转交给
误可以被标记为“已终止（或者已验证）”状态。
测试团队的清单。
目前位置
335
---
## Page 372
错误记录器
你发现了一个错误.·..
不管你多小心、多努力地编写代码，有些软件错误还是会成为漏网
之“鱼”进入软件系统，有时候，它们属于编程上的错误：有时候它们则
是在编写使用情节时就忽略掉了的功能性问题。不管是哪种情况，软件错
误都是你必须应对的问题。
软件错误应在错误记录器中
处理软件项目中出现错误的最重要的事情就是确认它
们已经被记录并且被跟踪。对于大部分情况来说，你
采用哪一种软件错误记录软件并不重要，免费的软
件错误记录软件有 Bugzilla和Mantis，商业的软件有
TesrTrackPro和ClearQuest。主要是要确保整个团队都
知道如何使用你所选择的软件。
记录器也不应当只用来记录软件的错误。确认你：
记录和沟通优先照
软件错误记录器能够记录下错误的优先级和严重程度方面的借题
与大白板结合起来处理这些信息的一种方式就是：选择一个优先级
别—比如说优先级1—并且把具有这个优先级级别的软件错误都
转换成一个使用情节，与开发循环中的其他使用情节一起进行优先
款件错滨记录器遥常桃
级的排序，任何低于优先级1的错误暂不处理，直到你处理完优先级
优先级记录为：、2和3
1的错误为止。
即使使用情节的优无设
2
记录每件事情
通常为10.2030.
软件错误记录器能够记录下有关对错误的讨论、测试、代码变更、
验证以及处理决定的历经过程。通过记录所有的事情，整个团队都
知道对错误处理的进展情况，如何做的测试或者了解原开发人员认
为要怎么修正错误。
产生统计数据
软件错误记录器能够让你深人了解项目的进展情况。新错误的提交率
是多少？提交率是上升了还是下降了？大量的软件错误都来源于代码的
同一区域吗？还有多少剩余错误等待修正？它们的优先级是怎样的？有
些团队甚至在讨论产品的发布之前，先开始寻找零错误反弹：那意味着
在产品发布之前，所有重要的错误已经被修正（错误数量为零）
个
我们将在第12童更深入地讨论款件
的提交。
336
第9章
---
## Page 373
结束开发循环
软件错误报告的剖析
虽然不同的软件错误记录系统为你提交错误报告提供了不同的模板，但基本的要
素是一致的。从一般的经验上讲，在错误报告中提供的信息越多，效果就越好。
即使你在处理的软件错误还没有完全修正，你也应该把你已经做的处理、以及你
认为还需要做的其他工作都记录下来，当你以后回到给软件错误上来时，你一
或者另一个开发人员一可能因参考那些信息而节省不少的时间。
良好的软件错误报告应包括：
口
摘要：用一、两个句子描述你的软件错误。这应当是一个详细的动作短语，
样的描述。你应当能读懂摘要的内容，并且对问题是什么有一个清晰的理解。
口
重现产生错误的步骤：描述软件错误是如何产生的。你也许并不总是知道确切
的重现产生软件错误的步骤，但可以列出你认为有关联的每种可能。如果你能
重现软件错误，就要对步骤作详细的说明：
1.在信息框输入“test message”：
2.单击“sendt”
3.在第二个应用程序中单击接收信息，
口
预期会发生什么和实际发生什么：说明你认为会发生什么，然后说明实际上发
生了什么。当用户期望开发什么而开发人员又不知道时，这种微法特别有助于
发现使用情节或者用户需求方面的问题。
口
版本，平台和定位信息：你正在使用的软件的版本是什么？如果你的应用程序
是基于web的，你访问的URL地址是什么？如果把应用程序安装到你的机器上，
它是什么安装版本？是测试版吗？还是你自己源代码编译面获得的构建版本？
严重性和优先级：软件错误的影响有多坏？它会造成系统房读吗？会造成数据
残缺不全吗？或者只是令人烦恼？修正该错误的重要性有多大？严重性和优先
级通常是两码事，会不会存在这种可能，有些事情的发生具有严重性（杀死一
个用户会话或者使应用刷溃），但只发生在一个人为操纵的环境（如用户必须
安装一个特殊的防毒软件，以非系统管理员用户进行运行，并且在下载文件的
时候，他们的网络均掉了），那么，这是一个低优先级的。待修正的错误。
在软件错误报告中，你还想看到其他哪些内容？你想从用户那里看到哪
一类的信息？
系统的各种输出是怎样的？
目前位置
337
---
## Page 374
以开发循环为师
但仍然有很多遗留的
工作你能做...
是的，你已经完成了系统测试，并且处理了你想在这轮开
发循环中要解决的主要软件错误。现在该做什么？
我们还没有完成的工作内容
口
流程优化
系统测试已完成，并且你已经
完成了你的款件得填报善（或
四
系统测试
老你正在等得内容归格）。
对项目而官，
口
回顾开发循环，看看哪些工作有效，
哪些是无效的工作？
做正确的事
口
应用你学会的经验进行代码重构。
情是要在正
口
进行代码整理和文档更新。
确的时间把
口
更多设计模式？
口
开发环境更新。
事情做对。
口
研发你正在考虑的新技术。
个
没有一成不定的
规则，你可以自