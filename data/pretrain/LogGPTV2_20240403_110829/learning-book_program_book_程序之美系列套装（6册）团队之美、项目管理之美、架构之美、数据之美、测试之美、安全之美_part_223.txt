代理现在已经成为了对基本面向对象机制的重要、自然的补充。在
实践中，它们广泛应用于：
选代：为一个容器结构中的所有元素应用一个可变的操作，因此使
用代理是很自然的决策。
正如前面所提到的GUI编程领域。
数学计算，正如之前示例中那样对在特定时间间隔内的特定函数进
行整合，表示为一个代理。
反射，一个不仅提供特性的属性（不仅能够通过call和item来调
用），还能提供类的代理。
在我们的研究中，代理已经被证实可以用来把设计模式替换为可复
用组件（Arnout 2004；Arnout和Meyer2006；Meyer2004；Meyer和
Armout2006）。其原因在于，任何应用程序的设计师在使用模式之
前必须详细地学习，包括架构和实现，然后从头并始构建整个应用
程序，而可复用组件能够直接通过AP来使用它。成功的案例包括
观察者设计模式（Meyer2004；Meyer2008），没有人在看到基于
代理的解决方案之后，还会继续尝试使用该模式，此外还有工厂模
式（Arnout和Meyer2006）和接下来还将讨论的访问者模式。
1257
---
## Page 1259
13.6.3基于代理的程序库使访问者模式变成多余的
对于用访问者模式笨拙地解决的问题，代理机制提供了更好的解决
方法：向现有的类型添加操作，并且不改变其支持的类。该解决方
案在（Meyer和Arnout2006）中详细地介绍过，你可以在ETHChair
ofSoftwareEngineering（苏黎士理工大学软件工程主席，网站为
到它。
它可以使客户应用程序接口变得十分简单。对于目标类（诸如
PUDDING、CONTRACT）无需做任何修改：它们没有其他要接受
的特性。它可以复用需要的类，并接受其子孙类：它不会产生访问
者类的大爆炸，只需要一个VISITOR程序库类，学习register和visit
两个特性的基本用法即可。客户应用程序的设计师无需理解这些类
的内部细节，也不用关心访问者模式的实现，只需要通过API来应
用这个基本模式即可：
1.声明一个表示访问者对象的变量，通过VISITOR的泛型参数指定
最顶部的目标类型，然后创建相应的对象：
pudding_visitor: VISITOR[PUDDING]
create pudding_visitor
2.针对在目标结构中特定类型的对象，为其中每个要执行的操作注
册与访问者相应的代理：
pudding_visitor.register (agent fruit_salad_cost)
3.要执行特定对象（通常是遍历操作的一部分）中的操作是，只需
使用程序库类VISITOR的visit特性，如下所示：
pudding_visitor.visit (my_pudding)
1258
---
## Page 1260
这个接口的所有内容只包括：一个访问者对象、可应用操作的注
册，以及一个独立的visit操作。我们简单地解释一下这三个属性：
对于将应用的操作（诸如fruit_salad_cost）都需要写出来，不管选
择了什么架构。它们通常是以例程的形式存在的，这样就可以使用
表示法agentfruit_salad_cost调用它；如果不是（特别是它只是一个
很简单的操作时），客户应用程序可以使用内联的代理来引入一个
例程。
·当你最初看到只需一个VISITOR类、一个用来添加访问者的register
例程就足够了的时候，可能会感到奇怪。在访问者模式解决方案
中，当调用t.accept（v）时，t指出了目标类型（某种特定的布
丁），但在此register例程却没有指定任何此类信息。那么它是如何
找到需应用的正确的操作变体（是fruitsalad的cost操作，还是plan的
cost操作）呢？其答案是代理机制中反射属性所带来的结果：一个
代理对象收集了与相关特性有关的所有信息，包括其签名。因此
agentfruit_salad_cost所包含的信息就是fruitsalad可应用的例程（从
签名fruit_salad_cost（fs：FRUIT_SALAD）中也可以获得，对于内
联代理而言，则可以从其文本中获得）。这样使得我们可以对
VISITOR内部的数据结构进行组织，所以在调用visit时（诸如
pudding_visitor.visit（my_pudding）），visit例程能够找到正确的例
程，或者基于目标对象的动态类型的例程，在此针对特定布丁类型
P的pudding_visitor：VISITOR[P]也能够匹配，它是由类型系统强制
静态绑定的，对象的类型将动态和参数相关联，在此是多态的
my_pudding。
·该技术也享受到了继承和动态绑定在复用方面的好处：如果某个例
程注册成通用的布”类型（也就是COMPOSITE_PUDDING），而且
没有任何注册到特定类型（例如，对于所有合成布丁而言，成本计
算将采用相同的方法）的例程，那么visit将使用最佳匹配者。
这里描述的机制对传统的面向对象机制提供了一些补充。当添加的
类型将提供与原有操作不同的操作时，继承和动态绑定能够提供很
好的解决方案。对于和其成对的、想在不修改原有类型的基础上添
加操作问题，这里介绍的解决方案也适用。
接下来，我们根据之前关于知识分发的模块性评价标准“谁必须知
道什么？”来看看该方法：
1259
---
## Page 1261
·目标类只需要知道体现相应类型的、诸如sugar_content的基本操
作。
·应用程序只需要知道它所使用的目标类的接口，以及register和visit
这两个本质的特性，它们是由VISITOR程序库类实现的。如果目标
类型需要添加新的操作（在目标类设计时是无法预见的），诸如我
们示例中的cost（计算成本），只需要提供该操作变量，以及所需
的目标类型，另外我们需要知道当缺乏对应的注册项时，将会针对
更特定的类型使用更通用的操作。
程序库类VISITOR完全不需要知道特定的目标类型或特定的应用程
序。
如果还想进一步减少系统不同部分所需信息的总量，看起来似乎是
不可能的。在我们的观点中，只有一个问题还没有结论，那就是这
种基础性机制如果通过程序库实现，或者不知何故屈从于特定的语
言构造，那么它是否仍然是可用的。
13.6.4评价
当引入代理这一概念时，最初大家关注的是它是否会带来引发混乱
的允余，因为它提供了一种也符合标准面向对象机制的备选方法。
（这种关注在Eife1中特别强烈，因为该语言在设计时遵循的原则是
“一个好方法，做任何事情”。）这种问题并没有发生：代理在面向
对象库中找到了适合自己的位置，设计师在决定何时应该使用时并
不会觉得困难。在实践中，代理的各种重要应用（特别是用来代替
设计模式的应用）都同时依赖于泛型、继承、多态、动态绑定以及
其他高级的面向对象机制。这也使大家强化了“该机制是成功的面
向对象技术中必要的组件"的认识。
注意：也有另一种不同的观点，你可以看看Sum公司白皮书中对于
Java为什么不需要代理（或委托）之类的机制所做的解释（Sun
Microsystems，1997）。它展示了如何通过Java中的“内部类”（inner
classes）来模拟这一机制。虽然这很有趣、争论也很有价值、很成
功，但我们的观点是，它实际证明了相反的观点。内部类能够完成
这一任务，但你不难发现，当用这种方法替代访问者模式时仍然会
带来类爆炸问题，与基于代理的解决方案相比，其简洁、优雅、模
块性都更逊一筹。
1260
---
## Page 1262
正如之前所说的那样，代理使面向对象设计也能够实现在函数式编
程中通过定义更高等级函数（操作可以作为操作的输入或输出，这
样就可以递归使用相同的属性）这一机制所实现的威力。甚至在内
联代理中还会发现lambda表达式的身影。这一机制对函数式编程产
生了公开的影响，并且原则上吸引了其支持者的关注，虽然人们担
心，从某种角度看这是罪行向美德所表示的敬意（LaRochefoucauld
1665）。[!]
除了语法之外，最重要的区别在于代理不仅可以封装纯函数（查
询），还能够封装命令。不过，绝对的纯粹（没有任何副作用）是
不存在的，特别是对于架构的讨论而言更是如此，至少只要我们想
遵从命令-查询分离原则，就能够保留该原则带来的好处（表达式的
引用透明），而不需在无状态的模型中强行添加一个有状态的模
型。
最终，大家认为代理对对象技术的模块性还是有贡献的，但它只是
所有元素中的一个，这些在前面的讨论中有涉及，但只有一小部
分。它是这些元素的组合体，超出了函数式方法所能够提供的函
数，使面向对象设计成为了构建美妙架构的最有效方法。
[1]La Rochefoucauld的名言是Hypocrisy is the homage that vice pays to
virtue（虚伪是恶德对美德所表示的崇敬），在此似乎表示的是“面
向对象技术”不是美德，“函数式”是美德，因此面向对象技术通过
“代理”技术来向"函数式"这一美德表示崇敬。
致谢
我很感谢那些对本章的草稿提出重要意见的朋友，明显，致谢不是
担保（同样明显，函数式编程的那些重要人物非常和善地分享了建
设性的意见，同时恐怕又完全没有受我的观点的影响）。特别重要
的是SimonPeytonJones、ErikMeijer和Diomidis Spinellis的意见。对
我关于JohnHughes的经典文章所提的问题，他的回答详细而富于启
发。本章最后部分提到的Visitor库是KarineArnout（KarineBezault）
的作品。我感谢GloriaMuller，他在ETH硕士论文中进一步讨论了
针对Eiffel实现像Haskell那样的支持库。我特别感谢这本书的编辑
DiomidisSpinellis和GeorgiosGousios，他们给我机会出版这些讨
论，而且他们对我的延迟交稿也给予了极大的耐心。
参考资料
1261
---
## Page 1263
Arnout,Karine.2004."From patterns to components."Ph.D.thesis,ETH
Zurich.可以在http://se.inf.ethz.ch/people/arnout/patterns/找到。
Arnout,Karine,and Bertrand Meyer.2006."Pattern componentization: the
NASA Journal）NewYork,NY：Springer-Verlag.可以在
http://www.springerlink.com/content/am08351v30460827/找到。
Eber,Jean-Marc,based on joint theoretical work with Simon Peyton-Jones
and Pierre Weis.2001."Compositional description,valuation,and
management of financial contracts:the MLFi language."可以在
http://www.lexifi.com/Downloads/MLFiPresentation.ppt找到。Ecma
International.2006.Eiffel: Analysis,Design and Programming
Language.ECMA-367.可以在http://www.ecma-
international.org/publications/standards/Ecma-367.htm找到。
Frankau,Simon,Diomidis Spinellis,Nick Nassuphis,and Christoph
Burgard.2008.
"Commerical uses:Going functional on exotic trades，"Journal of
FunctionalProgramming，19（1）：2745，October.
Gamma,Erich,et al.1994.Design Patterns:Elements of Reusable Object-
Oriented Software.Boston,MA: Addison-Wesley.
Hughes,John. 1989."Why functional programming matters."Computer
Journal,vol.32，no.2:98-107（revision ofa 1984 paper）.可以在
http://www.cs.chalmers.se/~rjmh/Papers/whyfp.pdf找到。
La Rochefoucauld,Francois de.1665.Réflexions ou sentences et maximes
morales.
Meyer,Bertrand,and Karine Arnout. 2006."Componentization: the Visitor
example."Computer（IEEE），vol.39，no.7：23-30.可以在
http://se.ethz.ch/~meyer/publications/computer/visitor.pdf找到。
Meyer,Bertrand.1991.Eiffel: The Language. (second printing.） Upper
SaddleRiver,NJ:PrenticeHall.
Meyer,Bertrand.1997.Object-Oriented Software Construction,Second
Edition.Upper Saddle River,NJ：Prentice Hall.可以在
1262
---
## Page 1264