需要去保护红何方法。换言之，Immutable Pattern 所有的方法都是 safeMethod。
执行。
ImmutablePattern (第2章)
也会使用到 Single Threaded Execution Patterm :
待的就只有想要执行wite方法的线程。
unsafeMethod 时，其他所有想执行这个方法的线程都要等待执行结束。
Read-Write Lock Pattern (第 6 章)
到 Single Threaded Execution Pattern.
适不适当”
正在执行保护住的unsafeMethod”。
Guarded Suspension Pattern (第3 章)
性能往下掉。
个状况称之为冲突（conflict）。当冲突发生时，线程等待的时间就会使整个程序的
理由（2）：线程种突时必顿等待
相关Pattern
少性能低落的幅度。
而 Immutable Pattern的 Imrmutable 参与者，其对象的状态不会改变。因此，
而 Read-Write Lock Patterm中，多个线程可以同时执行read 方法。而这时要等
而Guarded Suspension Pattcrm 中，造成线程等待的条件则是“对象的状态到底
 Single Threaded Execution Pattern 中，
Single Threaded Execution Pattern 中，造成线程等待的条件是“是否有其他线程
Single Threaded Execution Patterm 与多线程、并发性相关的许多 Patterm 都有关联。
尽可能缩小临界区范围，以减少出现线程冲突的机会，可抑制性能的降低。
当线程 Alice 执行临界区内的操作时，其他要进入临界区的线程会被阻挡。这
片能减少 SharedResource 参与者的数量，就能减少需要获取的锁定数，可以减
 Single Threaded Execution-
：只要有一个线程执行着保护什的
-能通过这座桥的，只有一个人
9
不
---
## Page 79
我们对 synchronized 的程序代码，与明确操作“锁定”的程序代码加以比较。假设
与“}”所括住的块构成的。
synchronized 语法与 Before/After Pattern
HvA线线精设证模式
代码没有太大的差异吧”呢？不，其实它们有着极大的差异。在上面的程序代码中
特有的领域只有1个线程可以访问，所以不需要保护方法。
与者。于是，我们需要将方法保护起来管制交通。
3
进阶说明：关于synchronized
您是不是认为“虽然程序代码看起来复杂点，不过与使用 synchronized 的程序
无论是 synchronized方法或 synchronized块，都像 List 1-5、1-6一样，是由“{"
而Thread-Specific StoragePattern 则是对每个线程确保其特有的领域，因为这块
上面两者，都可以视为是在“”处获取锁定，并在“}”处解除锁定。在下面
void method() {
synchronized (obj) {
synchronized void method() ↑
在进阶说明中，笔者将对Java的 synchronized 作更深入的解说。
List 1-7
List 1-6
List 1.5
unlock();
lock();
明确操作锁定的程序代码
synchronized方法
synchronized块
---
## Page 80
现方式。关丁Before/After Patterm，会在第6章的练习问题6-5 再次说明。
执行到finally 的部分，这是Java的规定。
都要调用到unlock()"，就要像下面这样使用 finally（“最后”的意义）块。
确实解除锁定。
常时，锁定也有可能没有解除。
亡，异常处理也是一个问题。调用的方法（或是调用的方法所调用的方法）抛出异
returm 语句的话，那锁定可能就不会被解除了（List 1-8）。
省略的部分，是有可能会出现问题的。如果在调用 lock与 unlock 方法之间，存在有
如果是成对的lock()、unlock(方法，“想要在 lock()被调用后，无论发生什么事，
List 1-10 的代码部分，无论出现 rethurn、
相对地，synchronized方法和 synchronized块，无论碰到return或是异常，都会
void method()
void method()
您或许会认为“那小心不要有 return语句就好了"。但其实问题不只有return 而
void method()
tist 1-10 
List 1-9
List 1-8
} finally {
try 
lock();
unlocki);
doMethod;
lock(); 
unlock();
if（条件式)
lock();
unlock(};
 Single Threaded Execution-
return;
doMethod抛出异常的话，锁定没被解除
在 lock()被调用后，无论发生什么事都要调用到uniock()
有 return 的话：锁定没被解除
//这里抛出异常的话，unlock()就不会被调用了
//这里有return 的语，unlock()就不会被调用了
抛出异常或是发生其他什么事，都会
能通过这座桥的，只有一个人
）的一种实
1
8
---
## Page 81
不安全了。
List1-4，加上下面这样的方法呢？
该以什么单位来保护呢
都应该设置成synchronized加以保护。
认其他门窗是不是也不小心上锁了。所有可由多个线程共享，并会访问字段的方法，
不过可能会降低程序的性能）。
synchronized了。而且 check 方法又被设置成 private，所以不会有其他类调用这个方
synchronized。这会不会变成敬开的窗户呢？
着宁段。但 check 方法也有用到namne 字段与 address 字段，却没有定义成
地把大门跟后门都锁得好好的，如果窗户敬开，还是没有意义一样。
他地方并没有做好保护措施，那其实这个字段还是没被保护的。就像就算小心翼翼
程同时访问。
所保护的是Gale 类的counter、namc、address 这些字段。使这些字段不会被多个线
东西”。例如，在List 1-4中我们将 pass 定义成 synchronized 方法。这个 synchronized
这个 synchronized 在保护什么
2
synchronizcd 就像是门窗上施加的锁。当您在一片窗上上了锁，就应该仔细确
这些方法的确都设置成 synchronized了。可是，加上这些方法以后，Gate 类就
这里要对前－-段所说的“保护着什么”，做更进一步地探讨。我们可不可以在
答案是不会。因为只有 pass 方法会去调用 check 方法，而 pass 方法已经设置成
在这里，请仔细看 List 1-4。pass 方法与 toString 方法的确以 synchronized 保护
public synchronized void setAddress(string address) 1
 public synchronized void setName(slring name) [
若这些字段还在其他许多地方使用着，这里使用 synchronized 小心保护，但其
确认“保护什么”之后，接下来应该要思考的是；
“其他的地方也有妥善保护到吗？”
无论是synchronized方法或是synchronized块，synchronized势必保护着“某个
“这个 synchronized是在保护什么？”
请读者阅读程序代码的时候，看到 synchronized 时，就要思考：
this.address = address;
this.name = name;
---
## Page 82
long 与 double 并不是原子的
，，中
synchronized方法时，其他线程都不能进入这个方法。也就是这个 synchronized方法
原子的操作
以写错，
情况。因为 synchromized 块需要明确地指明要获取的是哪个对象的锁定。例如：
如果有多个相异实例，那多个线程仍然可以分别执行不同实例的 synchronized 方法
接下来要史进一步地去思考：
获取谁的锁定来保护的呢
setName、sctAddress 这样的方法，线程对字段赋值的操作就被分散了。要保护Gate
synchronized，也就是为了不要让多个线程穿插执行赋值的操作。然而，如果定义出
1-4)。也就是说pass 方法就是所谓原子的操作。
门样。
定。
类时，若不将字段合在--起保护，是没有意义的。
（参考图I1-12）。
为了让范例程序的 Gatc 类线程安全,我们将 pass 定义成 synchronized 方法(List
使用synchronized 块的时候。特别需要考虑“获取谁的锁定来保护的呢”这种
如果实例不同，那锁定也不同了。虽然我们说“使川 synchronized来保护”，但
其实，Java 语言规格中，“开始就定义了一些原子的操作。例如，char、int这
synchronized方法同时只有一个线程可以执行。当一个线程正在执行
synchronized (obj) 1
这样的程序代码!，obj就是我们所要获取锁定的对象。请小心这个对象不可
个实例的锁定，同·时问内只能有线程可以得到。因为这个惟一忙，我们
要调用synchronized实例方法（instance method）的线程，
“获取谁的锁定来保护的呢？”
因为Gate 类，姓名跟出生地非得合在起赋值不可。我们将 pass 方法设置成
昔，获取错误对象的锁定，就好像是想要保护自已的家，却反而去锁上邻居的
 Single Threaded Execution-
能通过这座桥的，只有一个人
定会获取 this 的锁
紫1
---
## Page 83
模型”
（atomicity）的问题，而是其他线程能不能看到（visibity）的问题。详见附录B“Java 的内存
用。详细的说明请参考附录 B的“Java 内存模型”。
在字段前加上volatile关键字，所有对这个字段的操作就成为不可分割。
最简单的方法，就是在 synchronized方法内进行操作。
的操作来实现，但这也只能说是部分Java执行环境的实现就是了。
也可能是456L，或许是0L，甚至还可能是31415926L。当然，这里所说的只是“Java
言的规格上，long与double 的指定、引用操作并非不可分割。
的位模式会混在一起。
算没有加上synchronized，也不会被分割。
（reference type）的赋值!与引用操作也是原子的。因为本来就定义成不可分割，就
些基本类型（primitive type）的赋值与引用操作是原子的。另外，对象等引用类型
9
语
言规格”而己。实际上大部分的Java 执行环境现在都将 long与 double 当作原了
笔者刚刚说基本类型的指定、引用操作不可分割，但其实是有例外的。Java 语
注2：这个说法严格来说是不正确的，当线程正在指定字段的值时，若这个字段不是volafile
还有一种方法是将不使用 synchromized，而在声明字段时，加上 volatile关键字。
既然指定、
关下 volatile 关键字的角色，并不是只有对 long、double 进行原子的指定、引
总而言之，我们可以得到下面这些结论。
这样的指定操作。之后 longField 的值会是什么，是无法保证的。也许是123L，
这样的指定操作，而同时有另一个线程执行：
例如有个long类型的 longField字段，某个线程进行：
这样的赋值操作，而前后有别的线程也进行：
例如，这里有·个int类型的字段n，而有某个线程进行：
longField - 456i;
longField = i23L;
这样的赋值操作。
n = 456; 
n = 123;
要在线程间共享 long或 double的字段时，必须在 synchronized 中操作，或是
但是 long 与 double 的指定、引用是可以分割的；
基本类型、引用类型的指定、引用是原子的操作；
声明成volatile，
。这时最后 n的值不是 123就会是456 #2。并不用担心两个值
---
## Page 84
范例程序2的Gate类（List1-4）中，有下面3种方法：
在木文部分的程序代码中，无论是List I-2、List 1-4，字段都声明成 private。
--些说明。
的字段。
护，限制同时只能有-一个线程执行它。
仔细找出变量状态并不安定的范围，将这个范围设置为临界区。并对临界区施加保
练习问题
Java 语言中，可以使用 synchronized 关键字定义临界区，保护多个线程所共享
重点回顾
关下（1）的 pass 方法需要定义成 synchronized 方法的理由，与（3）的 check
为什么要将字段设置成 private 呢？若这些字段是 protected 或 public，会发生
private String nane - "Nobody";
private int counter = O;
问题1-2（private字段的角色）
counter的值能够更小。
要调用pass方法:100 多万次。请尝试改写List 1-2的Gate类，使找出错误时，
问题1-1（使错误更容易发生）
解芥诸见附求 A
那么，就请读者练习·些问题吧。
进阶说明中也对看到程序代码中出现 synchronized时，应该要注意的地方作了
这就是 Single Threaded Execution Pattern 。
问题1-3（synchronized的理由）
当我们修改了由多个线程共享的变量，变量就会失去安全性，所以，我们应该
这 --章我价]学>]了 Single Threadcd Execution Patterm。
（3）check方法—-
（1）pass 方法—是 synchronized 方法
（2） toString 方法-·—是 synchronized方法
-个错误时，counter的值已经是1010560了，也就是要找到--个错误，可能需
么问题吗？请用类安全性的观点加以分析。
 Single Threaded Execution
能通过这座桥的，只有一个人
9
---
## Page 85
v下南的 SecurityGate类（List 1-12）是模拟机密设施的入17。进入（enter）时，
List 1-11 是 Point 类的程序代码前半段。请就已读取的范围，判断下面这些与
public class SecurityGate f
现在各方法都不是 synchronized，请间当这个类在多线程环境下使用时是否安
值（gctCounter）方法，可以得知现在停留在设施内的人数。
人数（counter）就会递增1：退出（exit）时，人数就会递减1。使用获取计数
问题1-5（确认安全性）
(读到这里为止)
public final class Point {
List 1-11
Point 类相关的描述，若是正确的描述回答○，不正确的则回答×。
问题1-4（看到一半的程序代码）
方法不需要定义成 synchronized 方法的理由，在本文中都已经解释过了。那么，
List 1-12
全？
（5）只要将Poini类剩F的方法全部都读取，就可以判断是否发生死锁。
（4）Poinl类即使由数个线程米使用也很安全。
（1）无法创建Point类的子类：
（3）
思考（2）的 toString 方法需要定义成 synchronizedsynchrenized方法的理由。
 private int. counter;
public void enterl)
public synchronized void move(int dx, int dy) {
public: Point(int x, int y)(
private int yr
private int x;
关于有 Point 类的实例，可以执行这里读取的 move 方法的是一次一个的
线程：
以及方法，
X + dx;
this.y = Y
this.x - x
+- dy:
这个 SecurityGate 是否安全（SecurityGate.java)
程序代码看了一半，它在说些什么呢（Pointjava）
---
## Page 86
在此尝试以程序确认本文中说明过的死锁（deadlock）问题。在这里我们定义
FaterThread
Tool
Main
pubiic class Tool {
exit.");
public class Main l 
List 1-14
4T
下面是程序代码（List 1-13～List 1-15）：Main类中构建出 Tool类的实例汤匙
出表1-2这些类。
问题1-6（避免死锁的发生）
tist 1-13
叉子，并传入EaterThread类以启动线程。
public Tool(String rame)
 private final String name;
public static void main(String[l args) I
名
public int qetCounter() {
public void exit(){
System.out.println("Testing
"coods.)lool mau - uoods loo
new EaterThread("Bobby",
new EaterThread("Alsce", spoon, fork) .start();
rool 
 retrrn counter;
counter--;
rounter+t;
 Single Threaded Execution
Tooi 类(Tool.java)
Main 类（Main.java)
fork =
左于拿起餐具，行手也拿起餐具，非始用餐的类
表小餐其（汤匙和叉子）的类
new Tool("fork");
表 1-2
死锁实验用的类一览表
fork, spoon).start.();
EaterThread, hit CTRL+C to
-能通过这座桥的，只有一个人
8
---
## Page 87
N
public class EatorThread cxtends Thread l
（9）退出外侧的 synchronized 块后，会解除左手（lefthand）餐具的锁定
在 cal方法内进行了下面的操作：
EaterThread 类中，
（1）使用外侧的 synchronized块，
List.1-15
(8）
(7)
(6）
(5)
（4）
（3）
（2）程序以下面的方式，表达左于拿起餐具的操作：
public FaterThread(String name, Tool lefthand, Tool righthand] f
private firal Tool righthand:
private f:nal Tool lefthand;
private String name;
publie String tostring() !
程序以卜面的方式，表达左手放下餐具的操作：
退出内侧的synchromized块后，会解除右手（righthand）餐具的锁定。
{Alice放下叉子}
Alice puts down ( Fork ] (right).
程序以下面的方式，表达在手放下餐具的操作：
Alice is eating now,
接着开始进餐
Alice takes up [ Fork l (right).
程序以下面的方式，农达右手拿起餐具的操作：
使用外侧的 synchronized块，锁定右手（righthand）状取的餐具。
{Alice放下汤匙]
(Alice正吃着。卡滋卡滋！）