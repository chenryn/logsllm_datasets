5.3 New Insertion Packets
All GFW evasion strategies require injecting additional packets or
modifying existing packets to disrupt the TCP state maintained on
GFW [17, 23]. Insertion packets are especially handy as they are the
most suitable for supporting evasion strategies against the GFW.
As alluded to in §3, insertion packets can be tricky to craft. They
may fail because of many reasons such as network dynamics, rout-
ing asymmetry, obscure network middleboxes, and variations in
server TCP stacks. Our observation is that none of the insertion
packets are universally good. This motivates us to discover addi-
tional insertion packets that may be viable and complementary to
existing insertion packets.
2For brevity we only describe the new strategies in this section and leave the detailed
discussion of improved strategies to §7.
IMC ’17, November 1–3, 2017, London, UK
Zhongjie Wang et al.
TCP State
Any
Any
Any
SYN_RECV
SYN_RECV/ESTABLISHED
SYN_RECV/ESTABLISHED
SYN_RECV/ESTABLISHED
SYN_RECV/ESTABLISHED
SYN_RECV/ESTABLISHED
GFW State
Any
Any
Any
ESTABLISHED/RESYNC
ESTABLISHED/RESYNC
ESTABLISHED/RESYNC
ESTABLISHED/RESYNC
ESTABLISHED/RESYNC
ESTABLISHED/RESYNC
TCP Flags
Any
Any
Any
RST+ACK
ACK
Any
No flag
FIN
ACK
Condition
IP total length > actual length
TCP Header Length < 20
TCP checksum incorrect
Wrong acknowledgement number
Wrong acknowledgement number
Has unsolicited MD5 Optional Header
TCP packet with no flag
TCP packet with only FIN flag
Timestamps too old
Table 3: Discrepancies between GFW and server on ignoring packets – candidate insertion packets
The ideal solution to discovering insertion packets is to obtain a
precise TCP model for the GFW, the server, and network middle-
boxes that can be fed into an automated reasoning engine (to see
what kinds of packets can qualify as insertion packets). However,
since the GFW is a blackbox with only one observable feedback
attribute (viz., the RST injection), it is quite hard to infer its inter-
nal state accurately and completely. The evolved GFW model that
we infer in §4 is also unlikely to be complete. Therefore, even if
one were to leave network middleboxes aside, the problem is very
challenging.
Our solution is as follows: instead of attempting to model the
GFW accurately, we first model the servers (e.g., popular Linux
and FreeBSD TCP stacks) using “ignore” paths analysis. By this
we mean that we want to identify and reason about points in a
server’s TCP implementation which cause it to ignore received
packets. Specifically, for an incoming packet, we analyze all pos-
sible program paths that lead to the packet being either discarded
completely, or “ignored” possibly with an ACK sent in response. An
example of the first case is a packet with an incorrect checksum; the
second case can be a data packet with an out-of-window sequence
number, which triggers a duplicate ACK [21]. In both cases, the
TCP state (e.g., the next expected sequence number) of the host
(server) remains unchanged. After we derive this server model, we
use it to develop probing tests against the GFW.
For open source operating systems such as Linux, this can be
achieved through static analysis similar to what is done in Pack-
etGuardian [8]. The challenge is to manually identify all program
points where “ignore” events occur. Once the ignore paths are iden-
tified, the constraints that lead to each path need to be computed,
and used to guide test packets against the GFW. Once we iden-
tify cases where the packets are “accepted” by the GFW, i.e., the
GFW updates its TCB according to the information in the packet,
we can conclude that such packets are effective insertion packets
(note that we have not yet considered interference from network
middleboxes).
During the analysis, we only need to consider the TCP states
that still have the potential to receive data, i.e., TCP_LISTEN,
TCP_SYN_RECV, TCP_ESTABLISHED. For instance, we omit the
TIME_WAIT state because the server can no longer receive data in
this state and it is fruitless to understand its ignore paths. After we
generate the ignore paths of the server for each TCP state, we first
generate a sequence of packets that lead to the specific TCP state;
then for the set of constraints generated for each ignore path, we
As a demonstration, we conduct such an analysis of Linux kernel
version 4.4. In Table 3, we list the confirmed cases in which Linux
ignores a packet but the GFW does not. We also try to compare
the server state with the GFW state to make the discrepancies
more clear. Note that this is a more complete list than what was
previously reported [17, 23], demonstrating the advantage of our
systematic analysis. For instance, the finding includes two new
insertion packets:
1) RST/ACK packets with incorrect ACK number are ignored by the
server in TCP_RECV state but GFW will accept such a packet and
change its state to either TCP_LISTEN (previous state terminated)
or TCP_RESYNC, depending on the GFW model.
2) Packets with unsolicited MD5 headers are ignored by the server
(if no prior negotiation of optional MD5 authentication has been
done) while GFW will process the packet as normal.
generate one or more test packets (as candidate insertion packets).
Note that each ignore path will lead to a unique reason for why the
packet will be ignored by the server (e.g., either wrong checksum
or invalid ACK, but never both). Ptacek et al. [23] used a similar
approach to study the FreeBSD TCP stack, which is unfortunately
too old to be applicable. In contrast, we study the latest Linux TCP
stack, which has many new behaviors. Further, we improve the
methodology by pruning a number of “ignore” paths in irrelevant
TCP states such as TIME_WAIT, as well as correlating the “ignore”
cases with middlebox behaviors.
The MD5 header [15] discrepancy can be exploited in an insertion
packet with any TCP flag. For example, this can be used in a RST
packet to tear down the TCB on the GFW, or in a data packet to
fool the GFW into changing its maintained client sequence number.
Note that we intentionally omit the analysis of data overlapping
(for processing out-of-order and overlapping data packets) discrep-
ancies as it has been understood that different OSes may employ
different strategies [23] and thus it may not lead to a safe insertion
packet.
Cross-validation with network middleboxes. Even though the
insertion packets generated from the analysis work well according
to our experiments, they may not play well with middleboxes. Note
that IP layer discrepancies such as wrong IP checksum, IP optional
header, and IP header length can be used under all TCP states for
all TCP flags, but packets with such properties are often dropped
by routers or middleboxes. The only feature that we find useful is
the one where the “IP total length” is larger than the “actual packet
length” (listed in Table 3); however, packets with this feature may
still be checked and dropped by some middleboxes. Even insertion
packets that leverage TCP layer discrepancies (such as those relating
to improper TCP header lengths or the wrong TCP checksum)
may still be dropped by middleboxes, especially in cases where the
perturbation applies to all TCP states and flags. The only exceptions
are insertion packets leveraging the unsolicited MD5 header; these
are never dropped by the middleboxes we encounter during our
experiments (presumably because it requires a stateful firewall
middlebox to understand when such packets should be dropped).
The remainder of the insertion packets can be useful only for
data packets. Effective control packets cannot be crafted with these;
for instance, when the server is in the ESTABLISHED state, even
if the RST/ACK has a wrong ACK number or old timestamp, it
will still be able to reset the connection successfully. According to
our experiments, we have not encountered middleboxes that drop
packets with unexpected MD5 options, old timestamps, or incorrect
ACK numbers.
It is difficult, if not
Cross-validation with other TCP stacks.
impossible, to exhaustively test the ignore paths of all deployed
TCP stacks. We cross-validate the ignore paths of Linux kernel 4.4
with several other popular Linux versions, including 4.0, 3.14, 2.6.34,
and 2.4.37. We summarize the results here:
• In Linux 3.14, when a connection is in the ESTABLISHED state,
an incoming packet with a SYN flag will be ignored, while the
new GFW model will accept it.
• In Linux 2.6.34 and 2.4.37, when a connection is in ESTABLISHED
state, an incoming packet without a set ACK flag will not be
ignored. Instead, a data packet without the ACK flag will in fact
be accepted. This indicates that such an insertion packet will not
work against older Linux versions.
• In Linux 2.4.37, an incoming packet with an unsolicited MD5
header will not be ignored. This is due to the fact that older
Linux versions have not implemented the feature proposed in
RFC 2385 [15]. Upon closer inspection, the MD5 option check
on the server can be turned off via kernel compilation options
and therefore the corresponding insertion packet in fact may not
always work.
This shows most insertion packets are applicable to a wide range
of Linux operating systems, with some minor exceptions (if the
encountered Linux version is too old). As Linux is dominant in the
server market [26], we envision that evasion strategies built on top
of these insertion packets will work well. Indeed, as we show in
§7, our GFW evasion success rate is extremely high if we are to
leverage these insertion packets properly. To discover additional
discrepancies and perform automatic “ignore path” analysis, we
plan to use selective symbolic execution in the future (e.g., S2E [9]).
We leave a more rigorous analysis of TCP stacks of other Linux
versions and operating systems, including closed-source OS like
Windows Server, to our future work.
6 INTANG
All the strategies described in § 3 and § 4, are together integrated
in a unified measurement driven censorship evasion tool we call
INTANG. 3 The implementation contains roughly 3.3K lines of C
3INTANG source code is publicly available at https://github.com/seclab-ucr/INTANG.
IMC ’17, November 1–3, 2017, London, UK
Figure 2: INTANG and its components
code and some analysis scripts written in Python. INTANG is de-
signed as an extensible framework that supports add-on strategies.
The components of INTANG are depicted in Fig. 2.
Overview. INTANG’s functionalities are divided into three threads,
viz., the main thread, the caching thread, and the DNS thread. The
main thread is time-sensitive, and all time-consuming operations
are pushed to the other two threads. The main thread runs a packet
processing loop which intercepts certain packets using the netfilter
queue [6] and injects insertion packets using raw sockets. While
the packets are being processed, they are held in the queue i.e., are
not sent out until the processing is complete.
When a new connection is initiated, INTANG chooses the most
promising strategy based on historical measurement results (with
the help of caching), to a particular server IP address. Upon the
completion of a successful trial, it caches the strategy ID along with
the four-tuple of the connection in memory. When it later receives
further packets associated with the four-tuple, it will invoke the
callback functions of the strategy to process the incoming and
outgoing packets. Usually, only a small set of specific packets (e.g.
SYN/ACK packet, HTTP request) are relevant to each strategy and
need monitoring (as discussed earlier).
DNS forwarder. The DNS thread is a specialized thread that aims
at converting DNS requests over UDP to DNS requests over TCP. As
mentioned in § 2.1, TCP-layer evasion not only helps with evading
censorship on HTTP connections, but can also support the eva-
sion of DNS poisoning by GFW. For this purpose, a simple DNS
forwarder is integrated within INTANG. It converts each DNS over
UDP request to a DNS TCP request and sends it to an unpolluted,
public DNS resolver (likely outside of China). We apply the same set
of strategies for the TCP connection that carries DNS requests and
responses, to prevent the GFW from resetting the connection upon
detecting a censored domain in the request. The main thread inter-
cepts outgoing DNS UDP requests, which may contain sensitive
domain names and redirects such requests to the DNS thread that
does the forwarding. When a DNS TCP response is received, it will
be converted back to a DNS UDP response and processed normally
by the application. So it is completely transparent to applications.
We have probed GFW with Alexa’s top 1 million domain names to
generate a list of poisoned domain names using the same method
as in [12].
IMC ’17, November 1–3, 2017, London, UK
Zhongjie Wang et al.
Figure 3: Combined Strategy: TCB Creation + Resync/Desync Figure 4: Combined Strategy: TCB Teardown + TCB Reversal
Strategies. Each evasion strategy dictates specific interception
points (i.e., the types of packets to intercept) and the corresponding
actions to take at each point (e.g., inject an insertion packet). A
new strategy can be derived from our suite of basic strategies by
implementing new logic in the callback functions registered as
interception points. A strategy can decide on whether to accept or
to drop an intercepted packet, and can also modify the packet. It
can craft and inject new packets as well.
Caches. INTANG employs Redis [24] as an in-memory key-value
store. Redis provides desirable features like data persistency, event-
driven programming, key expiration, etc. We also maintain in the
main thread, a transient Least Recently Used (LRU) cache imple-
mented using linked lists and hash tables (to reduce Redis store
access latency that typically involves inter-thread or inter-process
communications). Caching allows us to understand the effective-
ness of the strategies against different websites and converge on
the best one quickly. Of course, to counter changes in the network
or the server, the cached record is retained only for a certain period
of time before expiration. We omit the details of cache management
in the interest of space.
7 EVALUATION
We now extensively evaluate the hypothesized new behaviors of
the GFW discussed in §4 using the new strategies described in §5
and our tool INTANG. We use the same 11 vantage points and 77
web servers as discussed in §3; unless otherwise specified, all other
measurement settings remain the same to ensure the consistency
of the results. The experiments were conducted during April and
May, 2017. In addition, since the GFW not only censors outbound
traffic but also inbound traffic (both are client-to-server traffic),4