目就设计成一个并放源代码的项目，希望我们能够放大核心团队的
工作，支持其他社区成员创建更多的服务，丰富核心的功能。维护
一个并源社区在任何情况下都是复杂的，我们相信在组成架构的服
920
---
## Page 922
务之间拥有最大程度的隔离，将支持在不同服务实现层次之间的更
高级的隔离。此外，当时并不清楚是否存在单一一组服务能够适合
所有的MIMO和虚拟世界。将基础设施设计为一组独立的服务，使
得这些服务的不同组合可以在不同的情况下使用，这由使用该基础
设施的具体项目的需求来决定。Darkstar栈中具体包含哪些服务可
以由一个配置文件来设置。
3.3.1宏观结构
图3-1展示了基于Darkstar项目基础设施的游戏或虚拟世界的基本结
构。一些服务器构成了游戏或虚拟世界的后端。每个服务器运行着
一组选定服务的副本（称为Darkstar栈）和游戏逻辑的副本。客户
端将连接到其中一个服务器，与服务器保存的该世界的抽象表示进
行交互。
与大多数的复制策略不同，游戏逻辑的不同副本不需要处理相同的
事件。每个副本可以独立地与客户端进行交互。在这个设计中，复
制主要用于支持伸缩性，而不是确保容错（虽然我们后面会看到，
容错也实现了）。而且，游戏逻辑本身不知道、也不需要知道在其
他机器上运行着服务器的其他副本。游戏程序员编写的代码就像在
一台机器上执行一样，不同副本之间的协作由Darkstar项目的基础
设施来完成。实际上，如果游戏的容量只需要一台服务器，基于
Darkstar的游戏就能够在一台服务器上运行。
客户端连接到游戏逻辑使用的通信机制是基础设施的一部分。这些
机制支持客户端到服务器的直接通信，也支持一种“发布-订阅"通
道，任何发往通道的消息都会送达该通道的所有订阅者。
921
---
## Page 923
客户端
客户端
客户端
客户编
客户端
游戏
游戏
游戏
游戏
服务器
服务器
服务器
服务器
Darkstar
Darkstar
Darkstar
Darkstar
栈
栈
栈
栈
Darkstar
Darkstar
元服务
元服务
图3-1：Darkstar项目的高层架构
Darkstar栈由一组元服务来协调，这是一组网络访问服务，游戏或
虚拟世界的程序员是不可见的。这些元服务支持栈的各个副本之间
进行协作，共同运营整个游戏。例如，这些元服务将所有独立的副
本持续工作，如果某个副本失效，就会发起失效恢复。这些元服务
还会跟踪各副本的负载，在需要的时候重新分配负载，或者随时添
加新的服务器，增加总体容量。由于这些服务对于Darkstar项目的
用户来说是完全隐藏的，所以它们可以随时改变或移除，或者添加
新的服务，这都不需要修改游戏或虚拟世界的代码。
对于在Darkstar项目环境中创建游戏或虚拟世界的程序员来说，可
见的架构就是栈中包含的一组服务。服务的全集是可以改变和配置
的，但4个基本服务必须存在，它们构成了运营环境的核心，如图3-
2所示。
922
---
## Page 924
其他服务
通道服务
务
数据服务
客户端会话服务
任务服务
图3-2：Darkstar栈
3.3.2基本服务
在这些栈层面的服务中，最基本的服务就是“数据服务”（Data
Service），游戏或虚拟世界用它来保存、读取和操作所有持久数
据。这里的持久概念可能比其他系统中的持久概念更宽泛。对于在
Darkstar项目环境中编写的游戏或虚拟世界，任何存在时间超过一
个任务的数据都被视为持久的，必须在“数据服务”中保存。我们曾
假定在这种编程模型中任务的时间是短暂的（这也是需求），所以
几乎所有用于表示游戏或虚拟世界的服务器端的数据都需要持久。
“数据服务”也将运行在不同服务器上的游戏或虚拟世界的副本联系
在一起，因为所有这些副本都共享同一个（概念上的）“数据服务”
实例。所有的副本都会访问相同的数据，所有的副本都可以根据需
要读取或改变存储在“数据服务”中的数据。
虽然“数据服务”看起来像是使用一个数据库的好地方，但是存储的
需求实际上与通常条件下对标准数据库的需求有着很大的差别。存
储的对象之间静态的关系很少，游戏中也不需要对存储的内容进行
复杂的查询。相反，简单的命名策略就足够了，包括在编程语言层
面上对对象的引用。“数据服务”也必须针对延迟进行优化，而不是
针对吞吐量来优化。特定服务要访问的对象个数可能很少（我们初
步的测算基于一些游戏和虚拟世界的原型，这些测算表明每个任务
大约访问一打对象），在这些访问的对象中，大约一半会在任务执
行中改变。
923
---
## Page 925
第二个栈层面的服务是“任务服务”（TaskService），它用于调度或
执行任务。这些任务要么是响应从客户端收到的某个事件，要么是
由游戏或虚拟世界服务器本身的内部逻辑发起的。绝大部分任务是
一次性事件，是由于客户端的某种动作产生的，它们从“数据服务”
中读取一些数据，操作这些数据，可能还进行一些通信，然后结
束。任务也可能生成其他的任务，或者生成定期任务，在特定的时
间执行或以特定的时间间隔执行。所有任务的执行时间必须很短，
执行一项任务的最大时间是一个可配置的值，但默认值是100毫
秒。
游戏或虚拟世界的程序员会看到因事件或服务器逻辑本身而生成的
单个任务，但在底层，Darkstar的基础设施正尽其所能调度最多的
任务。特别地，由服务器逻辑生成的任务与响应客户发起的事件而
生成的任务是并行执行的，就像响应不同客户端而生成的任务一
样。这样的并发执行可能导致数据竞争。要处理这种竞争，就需要
“任务服务”和“数据服务"协作。在底层，在服务器程序员不可见的
地方，“任务服务”调度的每个任务都包装在一个事务中。这个事务
确保了任务中的所有操作要么全部完成，要么都不完成。此外，所
有改变“数据服务”中对象的值的操作都由该服务作为中介。如果有
多个任务试图改变相同的数据对象，只有一个任务会执行，其他任
务都会中止，并安排在稍后执行。执行的那个任务会运行到结束。
当执行的任务结束时，其他的任务就可以执行了。虽然服务器程序
员可以说明访问的数据将被修改，但这不是必需的。如果数据对象
先被读取，然后被修改，“数据服务”会在任务提交之前检测到这种
修改。在读取时就说明打算进行修改，这是一种优化，能够更早地
检测到冲突，但是不事先说明修改的意图也不会影响程序的正确
性。
将任务包装到一个事务中意味着通信机制也必须支持事务，只有当
包装了消息发送任务的事务提交时，消息才会发出。这是通过
Darkstar栈中余下两项核心服务来完成的。
3.3.3通信服务
第一个服务是“会话服务”（SessionService），它是客户端和游戏或
虚拟世界服务器之间通信的中介。在登录和认证后，客户端与服务
器之间就会建立起一个会话。服务器通过会话监听客户端发出的消
息，解析消息的内容，确定生成怎样的任务来响应该消息。客户端
通过会话接收来自服务器的响应。这些会话隐藏了客户端和服务器
924
---
## Page 926
的真实端点，这一点对于Darkstar的多机伸缩性策略是很重要的。
会话也负责确保维持消息的顺序。如果来自某个客户端的前一条消
息所引发的任务还没有完成，后一条消息就不会提交。在“会话服
务"对任务进行这样的排序之后，“任务服务"就得到了极大的简化。
“任务服务”可以假定它在任何时候收到的任务在本质上都是并发
的。对来自特定客户端的消息排序是Darkstar框架中唯一的消息排
序保证机制，外部观察者看到的多个客户端之间的消息顺序，与游
戏或虚拟世界内看到的顺序有很大不同。
Darkstar栈中总可以得到的第二种通信服务是“通道服务”（Channel
Service）。通道是一种一对多的通信机制。在概念上，通道可以由
任何数目的客户端加入，任何发往该通道的消息都会送达所有与通
道相关的客户端。这里似乎是应用端到端技术的好地方，可以让客
户端之间直接通信，不会增加对服务器的负载。但是，这种通信需
要由一些受信任的代码来监控，确保玩家不会利用不同的客户端实
现来发送不正确的消息或欺骗消息。既然客户端假定是在用户或玩
家的控制之下，那么客户端的代码就不能信任，因为很容易把原来
的客户端代码换成另外的“定制过的”客户端代码。所以，实际上，
所有通道消息都必须经过服务器，（可能）在经过服务器逻辑检查
之后。
会话和通道的复杂性有多种原因，其中之一就是它们必须遵守任务
的事务语义。因此，会话连接或通道上的实际消息传送不能够在调
用相应的send（）方法时发生，它只能够在该方法所处的任务提交
时才能发生。
这些通信机制为我们实现伸缩性机制的第二部分奠定了基础。既然
所有通信都必须通过Darkstar会话或通道的抽象层，而这些抽象层
又不暴露客户端或服务器通信的真实端点，那么在实体通信和通信
起止端的实际位置之间就存在着一个抽象层。这意味着我们可以在
Darkstar系统中将服务器通信的端点从一台机器移到另一台机器，
同时不会改变客户端对这次通信的感觉。从游戏或虚拟世界的视角
来看，通信也是经过一个会话或通道。但是底层的基础设施可以随
着时间的推移和负载的变化，根据负载平衡的需要，将会话或通道
从一台机器移到另一台机器。
3.3.4任务的可移动性
925
---
## Page 927
要实现负载均衡的能力，其关键之处在于，对于我们要求的编程模
型和必须使用的基本栈服务，响应客户端事件或游戏内部事件的任
务可以从任何一台运行着Darkstar栈和游戏或虚拟世界副本的机器
上移动到另一台同样的机器上。任务本身是用Java编写的!l，这意
味着只要（物理）机器的运行时栈中包含相同的Java虚拟机，任务
就能够运行。任务读取和操作的所有数据必须从“数据服务”获得，
“数据服务”是所有机器上的游戏或虚拟世界的实例和Darkstar栈所共