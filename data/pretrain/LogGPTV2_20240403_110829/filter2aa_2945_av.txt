Click here to view code image
Circle refc = new Circle();
refc.radius = c.radius; // Don't try this
However, if any members of the Circle class are private (like the
radius field), you will not be able to copy this data. Instead, you can
make the data in the private fields accessible by exposing them as
properties and then use these properties to read the data from c and copy
it into refc. You will learn how to do this in Chapter 15, “Implementing
properties to access fields.”
Alternatively, a class could provide a Clone method that returns
another instance of the same class but populated with the same data.
The Clone method would have access to the private data in an object
and could copy this data directly to another instance of the same class.
For example, the Clone method for the Circle class could be defined as
shown here:
Click here to view code image
class Circle
{
    private int radius;
    // Constructors and other methods omitted
    ...
    public Circle Clone()
    {
        // Create a new Circle object
        Circle clone = new Circle();
        // Copy private data from this to clone
        clone.radius = this.radius;
        // Return the new Circle object containing the copied
data
        return clone;
    }
Download from finelybook PI:EMAIL
299
}
This approach is straightforward if all the private data consists of
values, but if one or more fields are themselves reference types (for
example, the Circle class might be extended to contain a Point object
from Chapter 7, indicating the position of the Circle on a graph), these
reference types also need to provide a Clone method; otherwise, the
Clone method of the Circle class will simply copy a reference to these
fields. This process is known as a deep copy. The alternative approach,
wherein the Clone method simply copies references, is known as a
shallow copy.
The preceding code example also poses an interesting question: How
private is private data? Previously, you saw that the private keyword
renders a field or method inaccessible from outside a class. However,
this does not mean it can be accessed by only a single object. If you
create two objects of the same class, they can each access the private
data of the other within the code for that class. This sounds curious, but
in fact, methods such as Clone depend on this feature. The statement
clone.radius = this.radius; works only because the private radius field
in the clone object is accessible from within the current instance of the
Circle class. So, private actually means “private to the class” rather than
“private to an object.” However, don’t confuse private with static. If
you simply declare a field as private, each instance of the class gets its
own data. If a field is declared as static, each instance of the class shares
the same data.
Use value parameters and reference parameters
1. Start Microsoft Visual Studio 2017 if it is not already running.
2. Open the Parameters solution, which is located in the \Microsoft
Press\VCSBS\Chapter 8\Parameters folder in your Documents folder.
The project contains three C# code files: Pass.cs, Program.cs, and
WrappedInt.cs.
3. Display the Pass.cs file in the Code and Text Editor window.
Download from finelybook PI:EMAIL
300
This file defines a class called Pass that is currently empty apart from a
// TODO: comment.
Tip Remember that you can use the Task List window to locate all
TODO comments in a solution.
4. Add a public static method called Value to the Pass class, replacing the
// TODO: comment. This method should accept a single int parameter (a
value type) called param and have the return type void. The body of the
Value method should simply assign the value 42 to param, as shown in
bold type in the following code example:
Click here to view code image
namespace Parameters
{
    class Pass
    {
        public static void Value(int param)
        {
            param = 42;
        }
    }
}
Note The reason you are defining this method using the static
keyword is to keep the exercise simple. You can call the Value
method directly on the Pass class without first creating a new Pass
object. The principles illustrated in this exercise apply in the same
manner to instance methods.
5. Display the Program.cs file in the Code and Text Editor window and
then locate the doWork method of the Program class.
Download from finelybook PI:EMAIL
301
The doWork method is called by the Main method when the program
starts running. As explained in Chapter 7, the method call is wrapped in
a try block and followed by a catch handler.
6. Add four statements to the doWork method to perform the following
tasks:
a. Declare a local int variable called i and initialize it to 0.
b. Write the value of i to the console by using Console.WriteLine.
c. Call Pass.Value, passing i as an argument.
d. Write the value of i to the console again.
By running Console.WriteLine before and after the call to Pass.Value,
you can see whether the Pass.Value method actually modifies the value
of i. The completed doWork method should look exactly like this:
Click here to view code image
static void doWork()
{
    int i = 0;
    Console.WriteLine(i);
    Pass.Value(i);
    Console.WriteLine(i);
}
7. On the Debug menu, click Start Without Debugging to build and run the
program.
8. Confirm that the value “0” is written to the console window twice.
The assignment statement inside the Pass.Value method that updates the
parameter and sets it to 42 uses a copy of the argument passed in, and
the original argument i is completely unaffected.
9. Press the Enter key to close the application.
You will now see what happens when you pass an int parameter that is
wrapped within a class.
10. Display the WrappedInt.cs file in the Code and Text Editor window.
This file contains the WrappedInt class, which is empty apart from a //
TODO: comment.
Download from finelybook PI:EMAIL
302
11. Add a public instance field called Number of type int to the WrappedInt
class, as shown in bold type in the following code:
Click here to view code image
namespace Parameters
{
    class WrappedInt
    {
        public int Number;
    }
}
12. Display the Pass.cs file in the Code and Text Editor window. Add a
public static method called Reference to the Pass class. This method
should accept a single WrappedInt parameter called param and have the
return type void. The body of the Reference method should assign 42 to
param.Number, such as shown here:
Click here to view code image
public static void Reference(WrappedInt param)
{
    param.Number = 42;
}
13. Display the Program.cs file in the Code and Text Editor window.
Comment out the existing code in the doWork method and add four
more statements to perform the following tasks:
a. Declare a local WrappedInt variable called wi and initialize it to a new
WrappedInt object by calling the default constructor.
b. Write the value of wi.Number to the console.
c. Call the Pass.Reference method, passing wi as an argument.
d. Write the value of wi.Number to the console again.
As before, with the calls to Console.WriteLine, you can see whether the
call to Pass.Reference modifies the value of wi.Number. The doWork
method should now look exactly like this (the new statements are
highlighted in bold type):
Click here to view code image
static void doWork()
{
Download from finelybook PI:EMAIL
303
    // int i = 0;
    // Console.WriteLine(i);
    // Pass.Value(i);
    // Console.WriteLine(i);
    WrappedInt wi = new WrappedInt();
    Console.WriteLine(wi.Number);
    Pass.Reference(wi);
    Console.WriteLine(wi.Number);
}
14. On the Debug menu, click Start Without Debugging to build and run the
application.
This time, the two values displayed in the console window correspond to
the value of wi.Number before and after the call to the Pass.Reference
method. You should see that the values 0 and 42 are displayed.
15. Press the Enter key to close the application and return to Visual Studio
2017.
To explain what the previous exercise shows, the value of wi.Number is
initialized to 0 by the compiler-generated default constructor. The wi variable
contains a reference to the newly created WrappedInt object (which contains
an int). The wi variable is then copied as an argument to the Pass.Reference
method. Because WrappedInt is a class (a reference type), wi and param both
refer to the same WrappedInt object. Any changes made to the contents of the
object through the param variable in the Pass.Reference method are visible
by using the wi variable when the method completes. The following diagram
illustrates what happens when a WrappedInt object is passed as an argument
to the Pass.Reference method:
Download from finelybook PI:EMAIL
304
Understanding null values and nullable types
When you declare a variable, it is always a good idea to initialize it. With
value types, it is common to see code such as this:
Click here to view code image
int i = 0;
double d = 0.0;
Remember that to initialize a reference variable such as a class, you can
create a new instance of the class and assign the reference variable to the new
object, like this:
Circle c = new Circle(42);
This is all very well, but what if you don’t actually want to create a new
object? Perhaps the purpose of the variable is simply to store a reference to an
existing object at some later point in your program. In the following code
example, the Circle variable copy is initialized, but later it is assigned a
reference to another instance of the Circle class:
Click here to view code image
Circle c = new Circle(42);
Circle copy = new Circle(99); // Some random value, for initializing
copy
...
copy = c;                     // copy and c refer to the same object
After assigning c to copy, what happens to the original Circle object with
a radius of 99 that you used to initialize copy? Nothing refers to it anymore.
In this situation, the runtime can reclaim the memory by performing an
operation known as garbage collection, which you will learn more about in
Chapter 14, “Using garbage collection and resource management.” The
important thing to understand for now is that garbage collection is a
potentially time-consuming operation; you should not create objects that are
never used because doing so is a waste of time and resources.
You could argue that if a variable is going to be assigned a reference to
another object at some point in a program, there is no point to initializing it.
But this is poor programming practice, which can lead to problems in your
code. For example, you will inevitably find yourself in the situation in which
you want to refer a variable to an object only if that variable does not already
Download from finelybook PI:EMAIL
305
contain a reference, as shown in the following code example:
Click here to view code image
Circle c = new Circle(42);
Circle copy;                  // Uninitialized !!!
...
if (copy == // only assign to copy if it is uninitialized, but what
goes here?)
{
    copy = c; ;                // copy and c refer to the same object
    ...
}
The purpose of the if statement is to test the copy variable to see whether it
is initialized, but to which value should you compare this variable? The
answer is to use a special value called null.
In C#, you can assign the null value to any reference variable. The null
value simply means that the variable does not refer to an object in memory.
You can use it like this:
Click here to view code image
Circle c = new Circle(42);
Circle copy = null; // Initialized
...
if (copy == null)
{
    copy = c; // copy and c refer to the same object
    ...
}
The null-conditional operator
The null-conditional operator enables you to test for null values very
succinctly. To use the null-conditional operator, you append a question mark
(?) to the name of your variable.
For example, suppose you attempt to call the Area method on a Circle
object when the Circle object has a null value:
Click here to view code image
Circle c = null;
Console.WriteLine($"The area of circle c is {c.Area()}");
Download from finelybook PI:EMAIL
306
In this case, the Circle.Area method throws a NullReferenceException,
which makes sense because you cannot calculate the area of a circle that does
not exist.
To avoid this exception, you could test whether the Circle object is null
before you attempt to call the Circle.Area method:
Click here to view code image
if (c != null)
{
    Console.WriteLine($"The area of circle c is {c.Area()}");
}
In this case, if c is null, nothing is written to the command window.
Alternatively, you could use the null-conditional operator on the Circle object
before you attempt to call the Circle.Area method:
Click here to view code image
Console.WriteLine($"The area of circle c is {c?.Area()}");
The null-conditional operator tells the C# runtime to ignore the current
statement if the variable to which you have applied the operator is null. In
this case, the command window would display the following text:
The area of circle c is
Both approaches are valid and might meet your needs in different
scenarios. The null-conditional operator can help you keep your code
concise, particularly when you deal with complex properties with nested
reference types that could all be null valued.
Using nullable types
The null value is very useful for initializing reference types. Sometimes, you
need an equivalent value for value types, but null is itself a reference, so you
cannot assign it to a value type. The following statement is therefore illegal in
C#:
int i = null; // illegal
However, C# defines a modifier that you can use to declare that a variable
is a nullable value type. A nullable value type behaves similarly to the
Download from finelybook PI:EMAIL
307
original value type, but you can assign the null value to it. You use the
question mark (?) to indicate that a value type is nullable, like this:
int? i = null; // legal
You can ascertain whether a nullable variable contains null by testing it in
the same way as you test a reference type.
Click here to view code image
if (i == null)
      ...
You can assign an expression of the appropriate value type directly to a
nullable variable. The following examples are all legal:
Click here to view code image
int? i = null;
int j = 99;
i = 100; // Copy a value type constant to a nullable type
i = j; // Copy a value type variable to a nullable type
You should note that the converse is not true. You cannot assign a
nullable variable to an ordinary value type variable. So, given the definitions
of variables i and j from the preceding example, the following statement is
not allowed:
j = i; // Illegal
This makes sense when you consider that the variable i might contain null,
and j is a value type that cannot contain null. This also means that you cannot
use a nullable variable as a parameter to a method that expects an ordinary
value type. If you recall, the Pass.Value method from the preceding exercise
expects an ordinary int parameter, so the following method call will not
compile:
Click here to view code image
int? i = 99;
Pass.Value(i); // Compiler error
Note Take care not to confuse nullable types with the null-conditional
Download from finelybook PI:EMAIL
308
operator. Nullable types are indicated by appending a question mark to
the type name, whereas the null-conditional operator is appended to the
variable name.
Understanding the properties of nullable types
A nullable type exposes a pair of properties that you can use to determine
whether the type actually has a nonnull value and what this value is. The
HasValue property indicates whether a nullable type contains a value or is
null. You can retrieve the value of a nonnull nullable type by reading the
Value property, like this:
Click here to view code image
int? i = null;
...
if (!i.HasValue)
{
    // If i is null, then assign it the value 99
    i = 99;
}
else
{
    // If i is not null, then display its value
    Console.WriteLine(i.Value);
}
In Chapter 4, “Using decision statements,” you saw that the NOT operator
(!) negates a Boolean value. The code fragment above tests the nullable
variable i, and if it does not have a value (it is null), it assigns it the value 99;
otherwise, it displays the value of the variable. In this example, using the
HasValue property does not provide any benefit over testing for a null value
directly. Additionally, reading the Value property is a long-winded way of
reading the contents of the variable. However, these apparent shortcomings
are caused by the fact that int? is a very simple nullable type. You can create
more complex value types and use them to declare nullable variables where
the advantages of using the HasValue and Value properties become more
apparent. You will see some examples in Chapter 9, “Creating value types
with enumerations and structures.”
Download from finelybook PI:EMAIL
309
Note The Value property of a nullable type is read-only. You can use
this property to read the value of a variable but not to modify it. To
update a nullable variable, use an ordinary assignment statement.
Using ref and out parameters
Ordinarily, when you pass an argument to a method, the corresponding
parameter is initialized with a copy of the argument. This is true regardless of
whether the parameter is a value type (such as an int), a nullable type (such as
int?), or a reference type (such as a WrappedInt). This arrangement means
that it’s impossible for any change to the parameter to affect the value of the
argument passed in. For example, in the following code, the value output to
the console is 42, not 43. The doIncrement method increments a copy of the
argument (arg) and not the original argument, as demonstrated here:
Click here to view code image
static void doIncrement(int param)
{
    param++;
}
static void Main()
{
    int arg = 42;
    doIncrement(arg);
    Console.WriteLine(arg); // writes 42, not 43
}
In the preceding exercise, you saw that if the parameter to a method is a
reference type, any changes made by using that parameter change the data
referenced by the argument passed in. The key point is this: Although the
data that was referenced changed, the argument passed in as the parameter
did not—it still references the same object. In other words, although it is
possible to modify the object that the argument refers to through the
parameter, it’s not possible to modify the argument itself (for example, to set
it to refer to a completely different object). Most of the time, this guarantee is
Download from finelybook PI:EMAIL
310
very useful and can help to reduce the number of bugs in a program.
Occasionally, however, you might want to write a method that actually needs
to modify an argument. C# provides the ref and out keywords so that you can
do this.
Creating ref parameters
If you prefix a parameter with the ref keyword, the C# compiler generates
code that passes a reference to the actual argument rather than a copy of the
argument. When using a ref parameter, anything you do to the parameter you
also do to the original argument because the parameter and the argument both
reference the same data. When you pass an argument as a ref parameter, you
must also prefix the argument with the ref keyword. This syntax provides a
useful visual cue to the programmer that the argument might change. Here’s
the preceding example again, this time modified to use the ref keyword:
Click here to view code image
static void doIncrement(ref int param) // using ref
{
    param++;
}
static void Main()
{
    int arg = 42;
    doIncrement(ref arg); // using ref
    Console.WriteLine(arg); // writes 43
}
This time, the doIncrement method receives a reference to the original
argument rather than a copy, so any changes the method makes by using this