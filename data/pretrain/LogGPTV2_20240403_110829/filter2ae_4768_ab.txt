        // 0x00: biSize
        // 0x04: biWidth
        // 0x08: biHeight
        // 0x0C: biPlanes
        // 0x0E: biBitCount
        // 0x10: biCompression
        // 0x14: biSizeImage
        // 0x18: biXPelsPerMeter
        // 0x1C: biYPelsPerMeter
        // 0x20: biClrUsed
        // 0x24: biClrImportant
        lpbi->bmiHeader.biSize = sizeof(BITMAPINFOHEADER);
        lpbi->bmiHeader.biPlanes = 1;
        ret_val = GetDIBits(dc, bitmap, 0, 0, NULL, lpbi, 
            DIB_RGB_COLORS);
        if (!ret_val) {
            printf(“ERROR: first GetDIBits failed\n”);
            free(lpbi);
            return 0;
        }
        // Allocate memory for image
        void __huge* bits = halloc(lpbi->bmiHeader.biSizeImage, 1);
        if (!bits) {
            printf(“ERROR: huge allocation for bits failed\n”);
            free(lpbi);
            return 0;
        }
        lpbi->bmiHeader.biBitCount = 8;
        lpbi->bmiHeader.biCompression = 0;
        ret_val = GetDIBits(dc, bitmap, 0, 
            (WORD)lpbi->bmiHeader.biHeight, bits, lpbi, DIB_RGB_COLORS);
        if (!ret_val) {
            printf(“ERROR: second GetDIBits failed\n”);
            hfree(bits);
            free(lpbi);
            return 0;
        }
        // Open file for writing
        int dec_image;
        if (_dos_creat(dec_image_path, _A_NORMAL, &dec_image) != 0) {
            printf(“ERROR: cannot create decrypted image file ‘%s’\n”, 
                dec_image_path);
            hfree(bits);
            free(lpbi);
            return 0;
        }
        // Write file header
        BITMAPFILEHEADER file_header = {0};
        file_header.bfType = 0x4D42; // “BM”
        file_header.bfSize = sizeof(BITMAPFILEHEADER) + lpbi_size + 
            lpbi->bmiHeader.biSizeImage;
        file_header.bfOffBits = sizeof(BITMAPFILEHEADER) + lpbi_size;
        _dos_write(dec_image, &file_header, sizeof(BITMAPFILEHEADER), 
            &bytes_written);
        // Write info header + RGBQUAD array
        _dos_write(dec_image, lpbi, lpbi_size, &bytes_written);
        // Write image
        DWORD i = 0;
        while (i bmiHeader.biSizeImage) {
            WORD block_size = 0x8000;
            if (lpbi->bmiHeader.biSizeImage — i bmiHeader.biSizeImage — i);
            }
            _dos_write(dec_image, (BYTE __huge*)bits + i, block_size,   
                &bytes_written);
            i += block_size;
        }
        _dos_close(dec_image);
        hfree(bits);
        free(lpbi);
        return 1;
    }
函数的输入参数是HBITMAP和保存该位图的文件路径。首先，为BITMAPINFO分配内存，存放BITMAPINFOHEADER和RGBQUAD，用于指定图像分辨率和颜色。然后，再分配一段内存，用来存放要转换为HBITMAP的位图字节。这个分配任务是使用halloc来完成的，它会返回一个带有`__high`属性的指针，该属性表示内存可以大于64KB。在调用GetDiBits后，会根据句柄将位图复制到分配的内存中。最后，将BitmapInfoHeader、BitmapInfo和位图写入相应的文件中。不过，因为_dos_write不能一次保存大于64KB的文件，所以，我必须将完成文件写操作的代码放入循环中。
这样，我们得到了一个解决零件图解压问题的实用程序。
最终的依赖轴
**小结**
* * *
至此，数据库逆向工程系列文章就结束了。起初，我计划写更多的文章，但很明显，基本的、关键的信息可以分为三个部分。不用把望远镜对准用双筒望远镜看到的东西，对那些要看的人来说，反倒束缚了他们的视野。
接下来，DBRE领域未来的工作可以围绕以下主题展开。
通过创建分析软件实现文件格式逆向分析的自动化，该软件可以采用启发式算法重构表、记录和字段。此外，它应该是交互式的，允许用户修正和补充该程序猜测的数据结构。同时，它还应该是一个正反馈系统，并能够根据用户定义的数据结构，来尝试重建其他结构。我们可以将其视为“用于数据逆向工程界的IDA
Pro”。
    我们还可以在前面所说的软件的基础之上继续创建其他软件，从而实现交叉引用研究过程的自动化。它可以实现启发式算法，用来确定哪些字节、单词和dword是指向数据库文件的偏移量。这些任务可以通过使用数据库文件格式的相关知识来完成，同时，其本身还可以继续扩展这种知识。
开发其他DBRE方法。上一篇文章中描述的那些逆向方法，只是其中的一部分，我相信还有更多的方法，都可以用来研究数据库的逆向分析。
即使您只进行文件格式的逆向分析，而不进行数据库的逆向分析，也需要为公共资源提供逆向工程文件格式。例如，当前已经有一个由Katai
Struct开发人员维护的格式库(具体见参考资料部分)。
此外，这个系列的结束对我来说也具有非常重要的象征意义。年底是总结的节点，另一方面，也为来年开一个好头。在我看来，我有责任在转向不同的逆向工程方向之前，与其他研究人员分享已有的知识。同时，也可以让大家来给我打打分。
**参考资料**
* * *
  * Bitmap Functions：
  * Reversing a 16-bit NE File Part 1: Clumsy and Unprepared：
  * Kaitai Struct Format Gallery：