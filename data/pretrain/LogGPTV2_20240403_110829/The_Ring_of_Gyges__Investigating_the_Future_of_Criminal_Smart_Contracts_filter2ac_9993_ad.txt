Claim: Upon receiving (“claim”, ct, π, r) from P:
Assert state = CREATED
Assert P submitted (“intent”, cm) earlier such
that cm = comm(ct||π,r).
Continue in the same manner as in contract
KeyTheft-Naive, except
the ledger update
ledger[P] := ledger[P] + $reward does not take
place immediately.
that
Revoke: On receive (“revoke”, Πrevoke) from some R:
Assert Πrevoke is valid, and state (cid:54)= ABORTED.
ledger[R] := ledger[R] + $smallreward.
If state = CLAIMED:
Let t := (time elapsed since successful Claim).
Let P := (successful claimer).
rewardP := f ($reward,t).
ledger[P] := ledger[P] + rewardP .
Else, rewardP := 0
ledger[C] := ledger[C] + $reward
−$smallreward− rewardP
Set state := ABORTED.
Timer: If state = CLAIMED and at least ∆T time elapsed
since Claim:
Else if current time T > Tend and state(cid:54)= ABORTED:
ledger[P] := ledger[P] + $reward;
Set state := ABORTED.
ledger[C] := ledger[C] + $reward.
Set state := ABORTED.
// P should not submit claims after Tend − ∆T .
Figure 4: Key compromise CSC that thwarts the revoke-
and-claim attack and the rushing attack.
(“claim”, ct).) This approach conceals the validity of ct.
Note that even without π, C can still make use of ct.
A contract that supports such concealment can also
support an idea that we refer to as cover claims. A cover
claim is an invalid claim of the form (“claim”, ct), i.e.,
one in which ct is not a valid encryption of skV. Cover
claims may be submitted by C to conceal the true state
of the contract. So that C need not interact with the con-
tract after creation, the contract could parcel out small
rewards at time Tend to third parties that submit cover
claims. We do not implement cover claims in our ver-
sion of KeyTheft nor include them in Figure 4.s
10
Proof
Veriﬁcation [Contract]
1-Target
Key Gen.[C]
Eval. Key
Ver. Key
Prove[P]
500-Target
Key Gen.[C]
Eval. Key
Ver. Key
Prove[P]
#threads
1
4
1
4
#threads
1
4
1
4
RSA-2048
418.27 sec
187.49 sec
0.78GB
17.29 KB
133.06 sec
55.30 sec
288 B
0.0102 sec
ECDSA P256
926.308 sec
421.05 sec
1.80 GB
15.6 KB
325.73 sec
150.80 sec
288 B
0.0099 sec
RSA-2048
419.93 sec
187.88 sec
0.79 GB
1.14 MB
132.98 sec
68.67 sec
288 B
0.0316 sec
ECDSA P256
934.89 sec
329.39 sec
1.81 GB
330.42 KB
325.73 sec
149.19 sec
288 B
0.0159 sec
Proof
Veriﬁcation [Contract]
Table 1: Performance of the key-compromise zk-SNARK cir-
cuit for Claim in the case of a 1-target and 500-target contracts.
[.] refers to the entity performing the computational work.
5.4 Commision-fairness: Formal deﬁnition
and proof
We deﬁne commission-fairness for key theft in terms of
an ideal functionality in Appendix D and also provide a
formal proof of security there for KeyTheft.
Implementation
5.5
We rely on zk-SNARKs for efﬁcient realization of
the protocols above. zk-SNARKs are zero-knowledge
proofs of knowledge that are succinct and very efﬁcient
to verify. zk-SNARKs have weaker security than what is
needed in UC-style simulation proofs. We therefore use a
generic transformation described in the Hawk work [45]
to lift security such that the zero-knowledge proof en-
sures simulation-extractable soundness. (In brief, a one-
time key generation phase is needed to generate two
keys: a public evaluation key, and a public veriﬁcation
key. To prove a certain NP statement, an untrusted prover
uses the evaluation key to compute a succinct proof; any
veriﬁer can use the public veriﬁcation key to verify the
proof. The veriﬁer in our case is the contract.) In our im-
plementation, we assume the key generation is executed
conﬁdentially by a trusted party; otherwise a prover can
produce a valid proof for a false statement. To mini-
mize trust in the key generation phase, secure multi-party
computation techniques can be used as in [19].
zk-SNARK circuits for Claim. To estimate the proof
computation and veriﬁcation costs required for Claim,
we implemented the above protocol for theft of RSA-
2048 and ECDSA P256 keys, which are widely used in
SSL/TLS certiﬁcates currently. The circuit has two main
sub-circuits: a key-check circuit, and an encryption cir-
11
cuit 2 The encryption circuit was realized using RSAES-
OAEP [44] with a 2048-bit key. Relying on compilers for
high-level implementation of these algorithms may pro-
duce expensive circuits for the zk-SNARK proof com-
putation.
Instead, we built customized circuit genera-
tors that produce more efﬁcient circuits. We then used
the state-of-the-art zk-SNARK library [20] to obtain the
evaluation results. Table 1 shows the results of the eval-
uation of the circuits for both single-target and multi-
target contracts. The experiments were conducted on an
Amazon EC2 r3.2xlarge instance with 61GB of memory
and 2.5 GHz processors.
The results yield two interesting observations: i) Once
a perpetrator obtains the secret key of a TLS public key,
computing the zk-SNARK proof would require much
less than an hour, costing less than 1 USD [4] for either
single or multi-target contracts; ii) The overhead intro-
duced by using a multi-target contract with 500 keys on
the prover’s side is minimal. This minimized overhead
for the 500-key contract is obtained by the use of a very
cheap multiplexing circuit with a secret input, while us-
ing the same components of the single-target case as is.
On the other hand, in the 500-key case, the contract will
have to store a larger veriﬁcation key, resulting in veriﬁ-
cation times of 35msec for RSA. Further practical imple-
mentation optimizations, though, can reduce the contract
veriﬁcation key size and overhead.
Validation of revoked certiﬁcates. The reward func-
tion in the contract above relies on certiﬁcate revocation
time, and therefore the contract needs modules that can
process certiﬁcate revocation proofs, such as CRLs and
OCSP responses, and verify the CA digital signatures on
them. As an example, we measured the running time of
openssl verify -crl_check command, testing the
revoked certiﬁcate at [12] and the CRL last updated at [8]
on Feb 15th, 2016, that had a size of 143KB. On average,
the veriﬁcation executed in about 0.016 seconds on a 2.3
GHz i7 processor. The signature algorithm was SHA-
256 with RSA encryption, with a 2048-bit key. Since
OCSP responses can be smaller than CRLs, the veriﬁca-
tion time could be even less for OCSP.
The case of multi-target contracts. Verifying the re-
vocation proof for single-target contracts is straightfor-
ward: The contract can determine whether a revocation
proof corresponds to the targeted key.
In multi-target
contracts, though, the contract does not know which tar-
get key corresponds to the proof of key theft P submit-
ted. Thus, a proof is needed that the revocation corre-
sponds to the stolen key, and it must be submitted by C.
We built a zk-SNARK circuit through which C can
prove the connection between the ciphertext submitted
2The circuit also has other signature and encryption sub-circuits
needed for simulation extractability – see Appendix C.3.
by the perpetrator and a target key with a secret index.
For efﬁciency, we eliminated the need for the key-check
sub-circuit in Revoke by forcing P to append the se-
cret index to the secret key before applying encryption
in Claim. The evaluation in Table 2 illustrates the efﬁ-
ciency of the veriﬁcation done by the contract receiving
the proof, and the practicality for C of constructing the
proof. In contrast to the case for Claim, the one-time key
generation for this circuit must be done independently
from C, so that C cannot cheat the contract. We note that
the Revoke circuit we built is invariant to the cryptosys-
tem of the target keys.
Key Gen.
Eval. Key
Ver. Key
Prove[C]
#threads
1
4
1
4
Proof
Veriﬁcation [Contract]
RSA-2048
394.93 sec
178.33 sec
0.74 GB
14.62 KB
131.38 sec
68.66 sec
288 B
0.0098 sec
ECDSA P256
398.53 sec
162.537 sec
0.74 GB
14.62 KB
133.88 sec
69.036 sec
288 B
0.0097 sec
Table 2: Performance of the key-compromise zk-SNARK cir-
cuit for Revoke needed in the case of multi-target contract. [.]
refers to the entity performing the computational work.
6 Calling-Card Crimes
As noted above, decentralized smart contract systems
(e.g., Ethereum) have supporting services that provide
authenticated data feeds, digitally signed attestations to
news, facts about the physical world, etc. While still
in its infancy, this powerful capability is fundamental to
many applications of smart contracts and will expand the
range of CSCs very broadly to encompass events in the
physical world, as in the following example:
Example 2 (Assassination CSC) Contractor C posts a
contract Assassinate for the assassination of Senator X.
The contract rewards the perpetrator P of this crime.
The contract Assassinate takes as input from a perpe-
trator P a commitment vcc specifying in advance the de-
tails (day, time, and place) of the assassination. To claim
the reward, P decommits vcc after the assassination. To
verify P’s claim, Assassinate searches an authenticated
data feed on current events to conﬁrm the assassination
of Senator X with details matching vcc.
This example also illustrates the use of what we re-
fer to as a calling card, denoted cc. A calling card is
an unpredictable feature of a to-be-executed crime (e.g.,
in Example 2, a day, time, and place). Calling cards,
alongside authenticated data feeds, can support a general
framework for a wide variety of CSCs.
A generic construction for a CSC based on a calling
card is as follows. P provides a commitment vcc to a
12
calling card cc to a contract in advance. After the com-
mission of the crime, P proves that cc corresponds to vcc
(e.g., decommits vcc). The contract refers to some trust-
worthy and authenticated data feed to verify that: (1) The
crime was committed and (2) The calling card cc matches
the crime. If both conditions are met, the contract pays a
reward to P.
Intuitively, we deﬁne commission fairness to mean
that P receives a reward iff it was responsible for car-
rying out a commissioned crime. (A formal deﬁnition is
given in Appendix H.)
In more detail, let CC be a set of possible calling cards
and cc ∈ CC denote a calling card. As noted above, it
is anticipated that an ecosystem of authenticated data
feeds will arise around smart contract systems such as
Ethereum. We model a data feed as a sequence of pairs
from a source S, where (s(t),σ (t)) is the emission for
time t. The value s(t) ∈ {0,1}∗ here is a piece of data
released at time t, while σ (t) is a corresponding digital
signature; S has an associated private / public key pair
(skS , pkS ) used to sign / verify signatures.
Note that once created, a calling-card contract requires
no further interaction from C, making it hard for law en-
forcement to trace C using subsequent network trafﬁc.
6.1 Example: website defacement contract
As an example, we specify a simple CSC SiteDeface for
website defacement. The contractor C speciﬁes a website
url to be hacked and a statement stmt to be displayed.
(For example, stmt = ”Anonymous. We are Legion. We
do not Forgive...” and url = whitehouse.gov.)
We assume a data feed that authenticates website con-
tent, i.e., s(t) = (w, url,t), where w is a representation of
the webpage content and t is a timestamp, denoted for
simplicity in contract time. (For efﬁciency, w might be
a hash of and pointer to the page content.) Such a feed
might take the form of, e.g., a digitally signed version of
an archive of hacked websites (e.g., zone-h.com).
We also use a special function preamble(a,b) that ver-
iﬁes b = a||x for strings a,b and some x. The function
SigVer does the obvious signature veriﬁcation operation.
As example parameterization, we might let CC =
{0,1}256, i.e., cc is a 256-bit string. A perpetrator P
$← {0,1}256 and commit-
simply selects a calling card cc
ment vcc := commit(cc,P;ρ), where commit denotes a
commitment scheme, and ρ ∈ {0,1}256 a random string.
(In practice, HMAC-SHA256 is a suitable choice for
easy implementation in Ethereum, given its support for
SHA-256.) P decommits by revealing all arguments to
commit.
The CSC SiteDeface is shown in Figure 5.
Remarks. SiteDeface could be implemented alterna-
Contract SiteDeface
Init: On receiving ($reward, pkS, url, stmt) from some
C:
Store ($reward, pkS, url, stmt)
Set i := 0, Tstart := T
Commit: Upon receiving commitment vcc from some P:
Store vcci := vcc and Pi := P ; i := i + 1.
Claim: Upon receiving as input a tuple (cc,ρ,σ ,w,t) from