You are in 'detached HEAD' state. You can look around, make experimental  
changes and commit them, and you can discard any commits you make in this  
state without impacting any branches by performing another checkout.
If you want to create a new branch to retain commits you create, you may  
do so (now or later) by using -b with the checkout command again. Example:
git checkout -b
HEAD is now at 673dcef... Fixed #188  
[ 33%] No patch step for 'asmjit'  
[ 44%] Performing update step for 'asmjit'  
[ 55%] No configure step for 'asmjit'  
[ 66%] No build step for 'asmjit'  
[ 77%] No install step for 'asmjit'  
[ 88%] No test step for 'asmjit'  
[100%] Completed 'asmjit'  
[100%] Built target asmjit  
\-- Performing Test __CxxFlag__msse  
\-- Performing Test __CxxFlag__msse - Success  
\-- Performing Test __CxxFlag__msse2  
\-- Performing Test __CxxFlag__msse2 - Success  
\-- Performing Test __CxxFlag__msse3  
\-- Performing Test __CxxFlag__msse3 - Success  
\-- Performing Test __CxxFlag__mssse3  
\-- Performing Test __CxxFlag__mssse3 - Success  
\-- Performing Test __CxxFlag__msse4_1  
\-- Performing Test __CxxFlag__msse4_1 - Success  
\-- Performing Test __CxxFlag__msse4_2  
\-- Performing Test __CxxFlag__msse4_2 - Success  
\-- Performing Test __CxxFlag__mavx  
\-- Performing Test __CxxFlag__mavx - Success  
\-- Performing Test __CxxFlag__mavx2  
\-- Performing Test __CxxFlag__mavx2 - Success  
\-- Performing Test __CxxFlag__std_c__17  
\-- Performing Test __CxxFlag__std_c__17 - Success  
\-- Performing Test __CxxFlag__std_c__14  
\-- Performing Test __CxxFlag__std_c__14 - Success  
\-- Performing Test __CxxFlag__std_c__11  
\-- Performing Test __CxxFlag__std_c__11 - Success  
\-- Performing Test __CxxFlag__std_c__0x  
\-- Performing Test __CxxFlag__std_c__0x - Success  
\-- Performing Test __CxxFlag__fno_tree_vectorize  
\-- Performing Test __CxxFlag__fno_tree_vectorize - Success  
\-- Performing Test __CxxFlag__fvisibility_hidden  
\-- Performing Test __CxxFlag__fvisibility_hidden - Success  
\-- Performing Test __CxxFlag__Winconsistent_missing_override  
\-- Performing Test __CxxFlag__Winconsistent_missing_override - Success  
\-- Performing Test __CxxFlag__O2  
\-- Performing Test __CxxFlag__O2 - Success  
\-- Performing Test __CxxFlag__fno_keep_static_consts  
\-- Performing Test __CxxFlag__fno_keep_static_consts - Failed  
\-- Performing Test __CxxFlag__fmerge_all_constants  
\-- Performing Test __CxxFlag__fmerge_all_constants - Success  
\-- [asmjit]  
BuildMode=Static  
BuildTest=Off  
ASMJIT_DIR=/home/user/zkself/pytorch/build/third_party/fbgemm/third_party/asmjit  
ASMJIT_DEPS=pthread;rt  
ASMJIT_LIBS=asmjit;pthread;rt  
ASMJIT_CFLAGS=-DASMJIT_STATIC  
ASMJIT_SOURCE_DIR=/home/user/zkself/pytorch/build/third_party/fbgemm/third_party/asmjit/src  
ASMJIT_INCLUDE_DIR=/home/user/zkself/pytorch/build/third_party/fbgemm/third_party/asmjit/src  
ASMJIT_PRIVATE_CFLAGS=  
-DASMJIT_STATIC  
-std=c++17  
-fno-tree-vectorize  
-fvisibility=hidden  
-Winconsistent-missing-override  
-O2 [RELEASE]  
-fmerge-all-constants [RELEASE]  
\-- Found Numa: /usr/include  
\-- Found Numa (include: /usr/include, library: /usr/lib/x86_64-linux-
gnu/libnuma.so)  
\-- Using third party subdirectory Eigen.  
Python 2.7.15 :: Anaconda, Inc.  
\-- Found PythonInterp: /home/user/anaconda2/envs/zk_py2.7caffe2/bin/python
(found suitable version "2.7.15", minimum required is "2.7")  
\-- Found PythonLibs:
/home/user/anaconda2/envs/zk_py2.7caffe2/lib/libpython2.7.so.1.0 (found
suitable version "2.7.15", minimum required is "2.7")  
\-- Could NOT find pybind11 (missing: pybind11_DIR)  
\-- Could NOT find pybind11 (missing: pybind11_INCLUDE_DIR)  
\-- Using third_party/pybind11.  
\-- Found MPI_C: /usr/lib/openmpi/lib/libmpi.so (found version "3.0")  
\-- Found MPI_CXX: /usr/lib/openmpi/lib/libmpi_cxx.so (found version "3.0")  
\-- Found MPI: TRUE (found version "3.0")  
\-- MPI support found  
\-- MPI compile flags: -pthread  
\-- MPI include path:
/usr/lib/openmpi/include/openmpi/opal/mca/event/libevent2021/libevent/usr/lib/openmpi/include/openmpi/opal/mca/event/libevent2021/libevent/include/usr/lib/openmpi/include/openmpi/usr/lib/openmpi/include  
\-- MPI LINK flags path: -Wl,-rpath -Wl,/usr/lib/openmpi/lib -Wl,--enable-new-
dtags -pthread  
\-- MPI libraries:
/usr/lib/openmpi/lib/libmpi_cxx.so/usr/lib/openmpi/lib/libmpi.so  
CMake Warning at cmake/Dependencies.cmake:665 (message):  
OpenMPI found, but it is not built with CUDA support.  
Call Stack (most recent call first):  
CMakeLists.txt:219 (include)
\-- Found CUDA: /usr/local/cuda (found version "10.0")  
\-- Caffe2: CUDA detected: 10.0  
\-- Caffe2: CUDA nvcc is: /usr/local/cuda/bin/nvcc  
\-- Caffe2: CUDA toolkit directory: /usr/local/cuda  
\-- Caffe2: Header version is: 10.0  
\-- Found CUDNN: /usr/local/cuda/include  
\-- Found cuDNN: v7.4.2 (include: /usr/local/cuda/include, library:
/usr/local/cuda/lib64/libcudnn.so.7)  
\-- Autodetected CUDA architecture(s): 7.5;7.5;7.5;7.5  
\-- Added CUDA NVCC flags for: -gencode;arch=compute_75,code=sm_75  
\-- Could NOT find CUB (missing: CUB_INCLUDE_DIR)  
\-- MPI include path:
/usr/lib/openmpi/include/openmpi/opal/mca/event/libevent2021/libevent/usr/lib/openmpi/include/openmpi/opal/mca/event/libevent2021/libevent/include/usr/lib/openmpi/include/openmpi/usr/lib/openmpi/include  
\-- MPI libraries:
/usr/lib/openmpi/lib/libmpi_cxx.so/usr/lib/openmpi/lib/libmpi.so  
\-- Found CUDA: /usr/local/cuda (found suitable version "10.0", minimum
required is "7.0")  
\-- CUDA detected: 10.0  
CMake Warning at cmake/Dependencies.cmake:954 (message):  
Metal is only used in ios builds.  
Call Stack (most recent call first):  
CMakeLists.txt:219 (include)
## \--  
\-- ******** Summary ********  
\-- CMake version : 3.12.2  
\-- CMake command : /home/user/anaconda2/envs/zk_py2.7caffe2/bin/cmake  
\-- System : Linux  
\-- C++ compiler : /usr/bin/c++  
\-- C++ compiler version : 8.0.0  
\-- CXX flags : -fvisibility-inlines-hidden -Wnon-virtual-dtor  
\-- Build type : Release  
\-- Compile definitions : TH_BLAS_MKL  
\-- CMAKE_PREFIX_PATH : /home/user/anaconda2/envs/zk_py2.7caffe2  
\-- CMAKE_INSTALL_PREFIX : /home/user/zkself/pytorch/torch  
\-- CMAKE_MODULE_PATH :
/home/user/zkself/pytorch/cmake/Modules;/home/user/zkself/pytorch/cmake/public/../Modules_CUDA_fix
## \-- ONNX version : 1.4.1  
\-- ONNX NAMESPACE : onnx_torch  
\-- ONNX_BUILD_TESTS : OFF  
\-- ONNX_BUILD_BENCHMARKS : OFF  
\-- ONNX_USE_LITE_PROTO : OFF  
\-- ONNXIFI_DUMMY_BACKEND : OFF
\-- Protobuf compiler :  
\-- Protobuf includes :  
\-- Protobuf libraries :  
\-- BUILD_ONNX_PYTHON : OFF  
\-- Found CUDA with FP16 support, compiling with torch.cuda.HalfTensor  
\-- Removing -DNDEBUG from compile flags  
\-- Found OpenMP_C: -fopenmp=libomp  
\-- Found OpenMP_CXX: -fopenmp=libomp  
\-- Found OpenMP: TRUE  
\-- Compiling with OpenMP support  
\-- Checking prototype magma_get_sgeqrf_nb for MAGMA_V2 - True  
\-- Compiling with MAGMA support  
\-- MAGMA INCLUDE DIRECTORIES:
/home/user/anaconda2/envs/zk_py2.7caffe2/include  
\-- MAGMA LIBRARIES: /home/user/anaconda2/envs/zk_py2.7caffe2/lib/libmagma.a  
\-- MAGMA V2 check: 1  
\-- Could not find hardware support for NEON on this machine.  
\-- No OMAP3 processor on this machine.  
\-- No OMAP4 processor on this machine.  
\-- Looking for cpuid.h  
\-- Looking for cpuid.h - found  
\-- Performing Test HAVE_GCC_GET_CPUID  
\-- Performing Test HAVE_GCC_GET_CPUID - Success  
\-- Performing Test NO_GCC_EBX_FPIC_BUG  
\-- Performing Test NO_GCC_EBX_FPIC_BUG - Success  
\-- Performing Test C_HAS_AVX_1  
\-- Performing Test C_HAS_AVX_1 - Failed  
\-- Performing Test C_HAS_AVX_2  
\-- Performing Test C_HAS_AVX_2 - Success  
\-- Performing Test C_HAS_AVX2_1  
\-- Performing Test C_HAS_AVX2_1 - Failed  
\-- Performing Test C_HAS_AVX2_2  
\-- Performing Test C_HAS_AVX2_2 - Success  
\-- Performing Test CXX_HAS_AVX_1  
\-- Performing Test CXX_HAS_AVX_1 - Failed  
\-- Performing Test CXX_HAS_AVX_2  
\-- Performing Test CXX_HAS_AVX_2 - Success  
\-- Performing Test CXX_HAS_AVX2_1  
\-- Performing Test CXX_HAS_AVX2_1 - Failed  
\-- Performing Test CXX_HAS_AVX2_2  
\-- Performing Test CXX_HAS_AVX2_2 - Success  
\-- AVX compiler support found  
\-- AVX2 compiler support found  
\-- Performing Test HAS_C11_ATOMICS  
\-- Performing Test HAS_C11_ATOMICS - Failed  
\-- Performing Test HAS_MSC_ATOMICS  
\-- Performing Test HAS_MSC_ATOMICS - Failed  
\-- Performing Test HAS_GCC_ATOMICS  
\-- Performing Test HAS_GCC_ATOMICS - Success  
\-- Atomics: using GCC intrinsics  
\-- Performing Test BLAS_F2C_DOUBLE_WORKS  
\-- Performing Test BLAS_F2C_DOUBLE_WORKS - Failed  
\-- Performing Test BLAS_F2C_FLOAT_WORKS  
\-- Performing Test BLAS_F2C_FLOAT_WORKS - Success  
\-- Performing Test BLAS_USE_CBLAS_DOT  
\-- Performing Test BLAS_USE_CBLAS_DOT - Success  
\-- Found a library with BLAS API (mkl).  
\-- Found a library with LAPACK API. (mkl)  
\-- Found CUDA: /usr/local/cuda (found suitable version "10.0", minimum
required is "5.5")  
disabling ROCM because NOT USE_ROCM is set  
\-- MIOpen not found. Compiling without MIOpen support  
\-- Found OpenMP_C: -fopenmp=libomp  
\-- Found OpenMP_CXX: -fopenmp=libomp  
\-- OpenMP lib: provided by compiler  
\-- Could NOT find Doxygen (missing: DOXYGEN_EXECUTABLE)  
\-- VTune profiling environment is unset  
\-- Found MKL-DNN: TRUE  
\-- Looking for clock_gettime in rt  
\-- Looking for clock_gettime in rt - found  
\-- Looking for mmap  
\-- Looking for mmap - found  
\-- Looking for shm_open  
\-- Looking for shm_open - found  
\-- Looking for shm_unlink  
\-- Looking for shm_unlink - found  
\-- Looking for malloc_usable_size  
\-- Looking for malloc_usable_size - found  
\-- Performing Test C_HAS_THREAD  
\-- Performing Test C_HAS_THREAD - Success  
\-- NUMA paths:  
\-- /usr/include  
\-- /usr/lib/x86_64-linux-gnu/libnuma.so  
\-- Check size of long double  
\-- Check size of long double - done  
\-- Performing Test COMPILER_SUPPORTS_LONG_DOUBLE  
\-- Performing Test COMPILER_SUPPORTS_LONG_DOUBLE - Success  
\-- Performing Test COMPILER_SUPPORTS_FLOAT128  
\-- Performing Test COMPILER_SUPPORTS_FLOAT128 - Success  
\-- Performing Test COMPILER_SUPPORTS_SSE2  
\-- Performing Test COMPILER_SUPPORTS_SSE2 - Success  
\-- Performing Test COMPILER_SUPPORTS_SSE4  
\-- Performing Test COMPILER_SUPPORTS_SSE4 - Success  
\-- Performing Test COMPILER_SUPPORTS_AVX  
\-- Performing Test COMPILER_SUPPORTS_AVX - Success  
\-- Performing Test COMPILER_SUPPORTS_FMA4  
\-- Performing Test COMPILER_SUPPORTS_FMA4 - Success  
\-- Performing Test COMPILER_SUPPORTS_AVX2  
\-- Performing Test COMPILER_SUPPORTS_AVX2 - Success  
\-- Performing Test COMPILER_SUPPORTS_SVE  
\-- Performing Test COMPILER_SUPPORTS_SVE - Failed  
\-- Performing Test COMPILER_SUPPORTS_AVX512F  
\-- Performing Test COMPILER_SUPPORTS_AVX512F - Success  
\-- Performing Test COMPILER_SUPPORTS_OPENMP  
\-- Performing Test COMPILER_SUPPORTS_OPENMP - Success  
\-- Performing Test COMPILER_SUPPORTS_WEAK_ALIASES  
\-- Performing Test COMPILER_SUPPORTS_WEAK_ALIASES - Success  
\-- Performing Test COMPILER_SUPPORTS_BUILTIN_MATH  
\-- Performing Test COMPILER_SUPPORTS_BUILTIN_MATH - Failed  
\-- Configuring build for SLEEF-v3.2  
Target system: Linux-4.15.0-43-generic  
Target processor: x86_64  
Host system: Linux-4.15.0-43-generic  
Host processor: x86_64  
Detected C compiler: Clang @ /usr/bin/cc  
\-- Using option `-Wall -Wno-unused -Wno-attributes -Wno-unused-result -ffp-
contract=off -fno-math-errno -fno-trapping-math` to compile libsleef  
\-- Building shared libs : OFF  
\-- MPFR : /usr/lib/x86_64-linux-gnu/libmpfr.so  
\-- MPFR header file in /usr/include  
\-- GMP : /usr/lib/x86_64-linux-gnu/libgmp.so  
\-- RUNNING_ON_TRAVIS : 0  
\-- COMPILER_SUPPORTS_OPENMP : 1  
\-- Performing Test HAS_THREAD_LOCAL  
\-- Performing Test HAS_THREAD_LOCAL - Success  
\-- Found CUDA: /usr/local/cuda (found suitable version "10.0", minimum
required is "7.5")  
\-- MPI_LIBRARIES:
/usr/lib/openmpi/lib/libmpi_cxx.so;/usr/lib/openmpi/lib/libmpi.so  
\-- Building the gloo backend with TCP support only  
\-- MPI_COMPILE_FLAGS: -pthread  