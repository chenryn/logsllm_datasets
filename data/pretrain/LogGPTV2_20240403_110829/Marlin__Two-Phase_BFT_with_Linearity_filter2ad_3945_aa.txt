title:Marlin: Two-Phase BFT with Linearity
author:Xiao Sui and
Sisi Duan and
Haibin Zhang
8
1
0
0
0
.
2
2
0
2
.
5
0
4
3
5
N
S
D
/
9
0
1
1
.
0
1
:
I
O
D
|
E
E
E
I
2
2
0
2
©
0
0
.
1
3
$
/
2
2
/
1
-
3
9
6
1
-
4
5
6
6
-
1
-
8
7
9
|
)
N
S
D
(
s
k
r
o
w
t
e
N
d
n
a
s
m
e
t
s
y
S
e
l
b
a
d
n
e
p
e
D
n
o
e
c
n
e
r
e
f
n
o
C
l
a
n
o
i
t
a
n
r
e
t
n
I
P
I
F
I
/
E
E
E
I
l
a
u
n
n
A
d
n
2
5
2
2
0
2
2022 52nd Annual IEEE/IFIP International Conference on Dependable Systems and Networks (DSN)
Marlin: Two-Phase BFT with Linearity
Haibin Zhang∗
Sisi Duan∗
Xiao Sui
Shandong University
Tsinghua University
Email: PI:EMAIL
Email: PI:EMAIL
Beijing Insitute of Technology
Email: PI:EMAIL
Abstract—As the ﬁrst Byzantine fault-tolerant (BFT) protocol
with linear communication complexity, HotStuff (PODC 2019)
has received signiﬁcant attention. HotStuff has three round-trips
for both normal case operations and view change protocols.
Follow-up studies attempt to reduce the number of phases for
HotStuff. These protocols, however, all give up of one thing in
return for another.
This paper presents Marlin, a BFT protocol with linearity,
having two phases for normal case operations and two or three
phases for view changes. Marlin uses the same cryptographic
tools as in HotStuff and introduces no additional assumptions.
We implement a new and efﬁcient Golang library for Marlin
and HotStuff, showing Marlin outperforms HotStuff for both
the common case and the view change.
I. INTRODUCTION
Byzantine fault-tolerant state machine replication (BFT) is
a fundamental tool in fault-tolerant distributed computing [16,
20,21,23,25,45]. BFT has nowadays gained growing attention,
as it is the de facto model for permissioned blockchains [8,
11, 18, 43, 46, 51].
Being the ﬁrst BFT protocol with linear communica-
tion complexity, HotStuff [52] has been used by the Diem
blockchain platform. The technique underlying HotStuff has
also proven signiﬁcant, yielding novel protocols such as [3]–
[5, 48].
Strikingly, HotStuff is best known as a BFT with linear
authenticator complexity if instantiated using threshold sig-
natures [12, 44], but its most efﬁcient implementation is to
instantiate threshold signature using a group (linear number)
of standard signatures: multiple platforms and systems [2, 31,
40] have reported HotStuff with conventional signatures out-
performs HotStuff with the most efﬁcient threshold signature
(or multi-signature), unless one tests a scenario that 1) has a
signiﬁcant network latency, where the cryptographic overhead
is less visible, and 2) has a low network bandwidth and a
large n (the number of replicas), where n signatures are no
longer bandwidth negligible compared to operations [40]. The
fact should not be surprising, as the most efﬁcient dedicated
threshold signatures use expensive cryptographic pairings.
Computing pairings is at least an order or several orders of
magnitude slower than signatures [10].
HotStuff commits operations in three round-trips (phases),
but the optimal latency (for HotStuff-style protocols) is two
phases. Naturally, there has been a line of works aiming at
reducing the number of rounds for HotStuff, such as Fast-
HotStuff [34], AAR [6], Jolteon/Ditto [30], and Wendy [31].
*Corresponding authors.
Brief review of two-phase BFT protocols. Fast-HotStuff [34]
and Jolteon [30] have a two-phase normal case operation but
have a quadratic communication overhead in the view change
protocol. Diem Team is currently integrating Jolteon into the
next release of DiemBFT [30] for its performance in normal
case operations, which further motivates the study of two-
phase BFT protocols with linearity.
Abspeol, Attema, and Rambaud (AAR) [6] propose a theo-
retical work that reduces the number of phases of HotStuff to
two. AAR has a quasilinear communication cost (O(n log n)).
The protocol, however, cannot be efﬁciently implemented, as
it uses prohibitively expensive zero-knowledge proof systems.
A concurrent system, Wendy [31], uses a novel aggregate
signature scheme to build a new HotStuff-style protocol that
has a two-phase normal case protocol and has at most three
phases in the view change. The technique used is very in-
teresting in the sense it leverages pairing-based cryptography
to prove an operation did not commit. Wendy, however, has
the following features: 1) Wendy introduces an additional
assumption: the view number difference c between any replica
and the leader is bounded and must be ﬁxed in the system setup
phase. The difference c (bounded by the view number bound
u) is proportional to the size of the public keys and the cryp-
tographic overhead. To be safe, c should be reasonably large.
2) Strictly speaking, Wendy does not achieve linear communi-
cation or linear authenticator complexity. During view change,
the communication complexity can be O(n2 log u+nλ), where
u is the view number bound and λ is a security parameter,
while the authenticator complexity is O(n2) (see deﬁnitions
in Section III for complexity measures of aggregate signatures
and multi-signatures and see Section IV for an illustration).
Note that
the number of pairings needed is O(n) in a
view change, but other public-key cryptographic operations
(group multiplications) remains O(n2 log c). 3) As reported
by Wendy [31, Section VII.D], due to the usage of pairings,
Wendy may have lower performance than HotStuff in view
change. Wendy, however, has a very nice feature that when
there are no attacks, the unhappy cases in view changes may
be really rare.
Hence, all these HotStuff descendants make trade-offs: a
more expensive or sometimes more expensive view change for
a two-phase normal case. It remains an open question whether
we can design a better HotStuff-style BFT protocol without
making a trade-off. (In fact, it is also an open problem whether
one could design BFT with a two-phase commit in normal
cases and a linear communication in view changes.)
2158-3927/22/$31.00 ©2022 IEEE
DOI 10.1109/DSN53405.2022.00018
54
Authorized licensed use limited to: Tsinghua University. Downloaded on August 07,2022 at 13:24:47 UTC from IEEE Xplore.  Restrictions apply. 
Our contributions. We make the following contributions:
• We provide a new HotStuff-style BFT protocol—Marlin.
Marlin achieves strictly linear communication complexity
and authenticator complexity, having two phases in normal-
case operations and two or three phases in view changes.
In the "happy" path, Marlin has two phases for a view
change. Besides, Marlin is well compatible with the chaining
(pipelining) technique. In contrast, all other HotStuff variants
all give up one thing for another and, strictly speaking, none
of them have linear communication or linear authenticator.
• We introduce the notion of view change snapshot to explain
and analyze HotStuff and its variants. The notion uniﬁes the
theory of existing approaches and facilitates designing new
protocols.
• We develop new techniques to build HotStuff-style BFT, in-
cluding a new way of unlocking a locked block, introducing
virtual blocks for early commits, and using shadow blocks
to reduce bandwidth.
• We provide a new Golang library for Marlin and HotStuff.
We have performed extensive evaluations using commodity
servers. We show that, unlike all other HotStuff variants that
are slower than HotStuff in many cases, Marlin outperforms
HotStuff consistently.
II. RELATED WORK
Characterizing BFT protocols. BFT protocols can be roughly
divided into two categories according to timing assumptions:
asynchronous BFT and partially synchronous BFT. Asyn-
chronous BFT protocols rely on no timing assumptions. Safety
of partially synchronous BFT is always preserved, but liveness
relies on the partial synchrony assumption [27]. A large
number of partially synchronous BFT (e.g., [7,16,22,24,25,32,
33, 45, 47, 49, 50]) and asynchronous BFT protocols (e.g., [9,
14, 15, 19, 26, 36, 38, 39]) have been proposed.
No one-size-ﬁts-all BFT. While the paper (and other re-
cent papers mentioned) advocate HotStuff-like BFT protocols,
readers should be aware that there is no one-size-ﬁts-all BFT
protocol, even if we only consider the partial synchrony model.
First, HotStuff has an end-to-end (client-to-client) latency of
9, while PBFT has a latency of 5. The two-phase variants of
HotStuff, including Marlin, have a latency of 7. Second, as we
have commented, there is a mismatch between authenticator
complexity and practical implementations: the most efﬁcient
instantiation for HotStuff (for most cases) uses signatures and
has O(n2) authenticator complexity. Third, it is unclear which
of the two following is more robust: the linear communication
that HotStuff uses, or the classic, broadcast-based communica-
tion that PBFT and other protocols adopt. For instance, some
performance attacks seem to be HotStuff exclusive [29, 41].
The HotStuff techniques. Cachin, Kursawe, Petzold, and
Shoup (CKPS)
threshold signature to build
communication-efﬁcient consistent broadcast, a primitive that
is proposed by Reiter [42]. CKPS consistent broadcast includes
1) a dissemination phase that broadcasts some message and 2)
an aggregation phase that collects proofs that the message has
been received in the form of partial threshold signatures and
[14] uses
then combines them to generate a threshold signature (a proof
that is publicly veriﬁable). The HotStuff technique may be
viewed as one using two or more CKPS consistent broadcast
communication phases. The proof in the second phase can be
used to prove succinctly a non-equivocating value has been
accepted in the ﬁrst phase. Further, the HotStuff technique
may also be referred to as the "lock-commit-unlock" paradigm:
replicas may become "locked" on a value when the value
may have been committed by some other replica and can later
unlock when the value did not commit. HotStuff techniques
have been proven fruitful [3]–[5, 48].
Kauri. Kauri [40] is a new BFT communication abstraction
that uses pipelining and tree-based dissemination and aggre-
gation to achieve scalability. Kauri instantiates the framework
using HotStuff. It makes sense to use two-phase BFT protocols
in the Kauri framework for better performance.
Formal veriﬁcation. Jehl [35] recently provides a formal
veriﬁcation for HotStuff using TLA [17] and Ivy [37].
III. SYSTEM MODEL
BFT. We consider a Byzantine fault-tolerant state machine
replication (BFT) system consisting of n replicas, where f
of them may fail arbitrarily (Byzantine failures). We require