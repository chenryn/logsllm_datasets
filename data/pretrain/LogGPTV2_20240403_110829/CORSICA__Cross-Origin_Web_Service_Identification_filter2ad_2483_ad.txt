When identifying vulnerable plugin versions down to the minor
versions, we can identify 590 of the collected 1,814 plugin versions.
The relatively poor performance is due to the fact that in many
cases, the vulnerabilities were fixed in the actual plugin logic, but
the security patch did not change files accessible to our techniques.
For 48 plugins, it was possible to precisely determine the versions
before and after a vulnerability enabling an attacker to detect 65
vulnerabilities: 34 Cross-Site Scriptings, 12 SQL Injections, two
Remote Code Executions, and 17 other vulnerabilities.
6.4 Comparison of Feature Types
In Section 4, we identified three main feature types: Images, Java-
Script, and style sheet files. We found that each of these feature
4https://hub.docker.com/_/wordpress/
5https://wpvulndb.com/
types was able to identify different services. To compare the ef-
fectiveness of each feature type, as well as the effectiveness of
combinations, we measured how many CMS versions, as well as
plugin versions, could be identified correctly. Figure 7 shows the
results.
We found that using only images as a metric, as proposed by
John Bergbom [6], yields considerably worse results than utilizing
further metrics. Using images, we were still able to distinguish 169
of the 1,814 plugin versions, but different versions of most of the
Content Management System versions were no longer distinguish-
able. However, using either only CSS or only JavaScript files as
features improves the identification results significantly, already al-
lowing to distinguish 54 and 75 patch level versions of CMS Systems
and 400 and 322 plugin versions.
7 COUNTERMEASURES
In the following, we discuss several countermeasures to prevent
the attacks discussed in this paper.
7.1 Proposed Defenses for Cross-Origin
Information Leaks
Artur Janc surveyed various techniques to mitigate cross-origin in-
formation leakages [16]. He references a broader range of methods,
from which two seem promising to prevent the kind of attack de-
scribed in our paper: Cross-Origin-Resource-Policy and Sec-Metadata.
Cross-Origin-Resource-Policy. Anne van Kesteren and John Wilan-
der proposed to resurrect the From-Header proposal [35] as Cross-
Origin-Resource-Policy (CORP) [36]. The overall idea of CORP is
that a server defines which origins are allowed to process a resource.
The server does this by sending a from-origin header along with
the requested resource. After receipt, the browser checks if it is
allowed to process the resource, and drops it otherwise.
The aim of the proposal is not to block access to the resource, but
to signal that inclusion might lead to security problems. Since an
attacking website is not able to modify the headers of a requested
resource and the browser is expected to respect the header, CORP
can effectively block the inclusion of resources. Thus, CORP also
effectively prevents the identification process described in this
paper.
Sec-Metadata. Similar to the CORP proposal, the Sec-Metadata
proposal describes a new HTTP header. In this case, the new header
is sent from the client to the server. The header contains additional
information about a request’s origin and enables the server to decide
if it wants to serve the resource or not. Although Sec-Metadata mit-
igates the service identification effectively, the privacy implications
are not clear. Thus, it seems not too far fetched that anti-tracking
plugins may remove the header, similarly to how “referrer-blockers”
remove the referrer header. Thus, Sec-Metadata creates a conflict
between security and privacy, which might hinder adoption.
Both proposals require code changes on the server-side and the
client-side. Users who regularly update their browsers will ben-
efit from the extensions with no additional configuration efforts.
Server administrators are, however, expected to reconfigure their
Table 3: Results of CMS version identification.
CMS
Joomla
Wordpress
TYPO3
Drupal
Total
Minor versions
12/12
(100%)
(100%)
31/31
(100%)
37/37
(9%)
12/139
92/219
(42%)
Patch level
26/102
55/321
31/285
10/242
122/950
(25%)
(17%)
(11%)
(4%)
(13%)
Average Cluster Size
2.17
3.09
3.61
6.05
3.5 ∅
Figure 7: Comparison the effectiveness of the three different feature types.
services to use the new mitigations. As the adoption of novel se-
curity features is often slow6, both proposals describe mid or long
term countermeasures.
7.2 General Recommendations
Although the identification process can be mitigated with the de-
scribed standards and procedures, we argue that it becomes increas-
ingly difficult to maintain security perimeters. Furthermore, making
identification more difficult may be the wrong countermeasure, as
the real problem is that devices are vulnerable to CSRF attacks.
Thus, developers and administrators can harden intranet services
against attacks by applying the same care to internal services as
they do with services facing the public internet.
While web origins as a basis for the same-origin policy are de-
fined in RFC 6454 [4], the documentation and standardization of
the same-origin policy by both standardization bodies [37] and
browser vendors [23] is lacking, leading to recurring browser bugs
[29]. Therefore, we like to encourage standardizing committees
and browser vendors to find common ground in unifying the same-
origin policy for a safer web.
8 CONCLUSION
A regular excuse for not securing devices in private networks is
that attackers need to find those devices in the first place, which is
thought to be difficult. We show that this is not true. Our CORSICA
6The Content Security Policy (CSP) was introduced in 2012. Seven years later, 3.4% of
HTTPS sites and 0.4% of HTTP sites of the Alexa’s Top One Million websites implement
the CSP [20].
tool is a JavaScript-based scanner that can reliably identify web ser-
vice versions under the assumption that a victim opens a malicious
web site from within the private network. The evaluation shows
that CORSICA can identify IoT devices running a web service, the
four most widely used Content Management Systems and even
vulnerable WordPress plugins with high accuracy.
CORSICA uses techniques that leak information of cross-origin
requests like image dimensions, the existence of certain CSS styles
or JavaScript function names. The Same-Origin Policy implemen-
tations of Mozilla Firefox, Google Chrome, and Apple Safari allow
these techniques, and they cannot be fixed without impeding benign
functionality of the web.
Although countermeasures exist, for example, CORP and Sec-
Metadata, not only browsers need to support them, but also server-
side configuration is needed for every web service. Thus, unfortu-
nately, no short term solutions exist, and securing the endpoints
behind perimeters remains the most effective way to thwart attacks.
In this case, attackers can still identify type and version of web ser-
vices, but this information is useless if the service does not contain
any known vulnerabilities.
ACKNOWLEDGMENTS
The authors would like to thank Sebastian Lekis, Arthur Junk, Ben
Stock and Martin Grothe for their valuable feedback and insight-
ful discussions. Christian Dresen was supported by the research
training group “Human Centered System Security’‘, sponsored by
the state of North Rhine-Westfalia. Fabian Ising was supported by
the research project “MITSicherheit.NRW” funded by the European
Regional Development Fund North Rhine-Westphalia (EFRE.NRW).
ImagesCSSJavaScriptImages, CSS und JavascriptTotalWordpress0363348321Plugins1694003225901800ImagesCSSJavaScriptImages, CSS, and JavascriptTotalCMS105475122503,00Plugins1694003225901800,00105475122020406080100120140CMSImagesCSSJavaScriptImages, CSS, and Javascript1694003225900100200300400500600700PluginsRFC6454.
REFERENCES
[1] Gunes Acar, Danny Yuxing Huang, Frank Li, Arvind Narayanan, and Nick Feam-
ster. 2018. Web-based Attacks to Discover and Control Local IoT Devices. In
Proceedings of the 2018 Workshop on IoT Security and Privacy (IoT S&P ’18). ACM,
New York, NY, USA, 29–35. http://doi.acm.org/10.1145/3229565.3229568
[2] acargu...@gmail.com. 2018. 828265 - MediaError message property leaks cross-
origin response status. https://bugs.chromium.org/p/chromium/issues/detail?id=
828265.
[3] AVM. 2018. No DNS resolution of private IP addresses. https://en.avm.de/
service/fritzbox/fritzbox-7590/knowledge-base/publication/show/663_No-
DNS-resolution-of-private-IP-addresses/.
[4] A. Barth. 2011. The Web Origin Concept. http://tools.ietf.org/rfc/rfc6454.txt
[5] Adam Barth, Collin Jackson, and John C. Mitchell. 2008. Robust Defenses for
Cross-site Request Forgery. In Proceedings of the 15th ACM Conference on Com-
puter and Communications Security (CCS ’08). ACM, New York, NY, USA, 75–88.
http://doi.acm.org/10.1145/1455770.1455782
[6] John Bergbom. 2019. Attacking the internal network from the public Inter-
net using a browser as a proxy. https://www.forcepoint.com/sites/default/files/
resources/files/report-attacking-internal-network-en_0.pdf.
[7] G. Blanc, D. Miyamoto, M. Akiyama, and Y. Kadobayashi. 2012. Characteriz-
ing Obfuscated JavaScript Using Abstract Syntax Trees: Experimenting with
Malicious Scripts. In 2012 26th International Conference on Advanced Informa-
tion Networking and Applications Workshops. IEEE, Fukuoka, Japan, 344–351.
https://doi.org/10.1109/WAINA.2012.140
[8] Jesse Burns. 2007. Cross Site Request Forgery: An introduction to a common web
application weakness. http://www.isecpartners.com/documents/XSRF_Paper.
pdf
[9] K. Egevang and P. Francis. 1994. The IP Network Address Translator (NAT).
http://tools.ietf.org/rfc/rfc1631.txt RFC1631.
[10] Jonathan Frederic. 2018. pingjs. https://github.com/jdfreder/pingjs.
[11] Felix C. Freiling and Sebastian Schinzel. 2011. Detecting Hidden Storage Side
Channel Vulnerabilities in Networked Applications. In Future Challenges in Se-
curity and Privacy for Academia and Industry, Jan Camenisch, Simone Fischer-
Hübner, Yuko Murayama, Armand Portmann, and Carlos Rieder (Eds.). Springer
Berlin Heidelberg, Berlin, Heidelberg, 41–55.
[12] Daniel Garcia and @ffranz. 2017. Plecost. https://github.com/iniqua/plecost.
[13] gunesacar. 2018. 1450853-MediaError message property leaks cross-origin re-
sponse status. https://bugzilla.mozilla.org/show_bug.cgi?id=1450853
[14] Ruslan Habalov. 2018. Side-channel attacking browsers through CSS3 fea-
tures. https://www.evonide.com/side-channel-attacking-browsers-through-
css3-features/.
[15] Andrew Horton and Brendan Coles. 2010. Whatweb.
https://www.
morningstarsecurity.com/research/whatweb.
[16] Artur Janc. 2018. How do we Stop Spilling the Beans Across Origins? https:
//www.arturjanc.com/cross-origin-infoleaks.pdf.
[17] Martin Johns. 2008. On JavaScript Malware and related threats. Journal in
Computer Virology 4, 3 (01 Aug 2008), 161–178. https://doi.org/10.1007/s11416-
007-0076-7
[18] Kafeine. 2015. An Exploit Kit dedicated to CSRF Pharming. https://malware.
dontneedcoffee.com/2015/05/an-exploit-kit-dedicated-to-csrf.html.
[19] Mario Kozina, Marin Golub, and Stjepan Groš. 2009. A method for identifying
Web applications. International Journal of Information Security 8, 6 (29 Aug 2009),
455. https://doi.org/10.1007/s10207-009-0092-3
[20] A. Lavrenovs and F. J. R. Melón. 2018. HTTP security headers analysis of top one
million websites. In 2018 10th International Conference on Cyber Conflict (CyCon).
IEEE, Tallinn, Estonia, 345–370. https://doi.org/10.23919/CYCON.2018.8405025
[21] Sebastian Lekies, Ben Stock, Martin Wentzel, and Martin Johns. 2015. The
Unexpected Dangers of Dynamic JavaScript. In 24th USENIX Security Sym-
posium (USENIX Security 15). USENIX Association, Washington, D.C., 723–
735. https://www.usenix.org/conference/usenixsecurity15/technical-sessions/
presentation/lekies
[22] Jakob Lell. 2013. Real-World CSRF attack hijacks DNS Server configuration of
TP-Link routers. https://www.jakoblell.com/blog/2013/10/30/real-world-csrf-
attack-hijacks-dns-server-configuration-of-tp-link-routers-2/.
[23] Mozilla. 2017. Same-origin policy. https://developer.mozilla.org/en-US/docs/
Web/Security/Same-origin_policy.
[24] Mozilla. 2019. Function.prototype.toString(). https://developer.mozilla.org/en-
US/docs/Web/JavaScript/Reference/Global_Objects/Function/toString.
[25] Netgate. 2018. DNS Rebinding Protections. https://www.netgate.com/docs/
pfsense/dns/dns-rebinding-protections.html.
[26] Petko D. Petkov. 2007. Google Gmail e-mail hijack technique. https://www.
gnucitizen.org/blog/google-gmail-e-mail-hijack-technique/.
[27] Rapid 7. 2019. Metasploit Framework. https://metasploit.com/.
[28] J. Rosenberg, R. Mahy, P. Matthews, and D. Wing. 2008. Session Traversal Utilities
for NAT (STUN). http://tools.ietf.org/rfc/rfc5389.txt RFC5389.
[29] Jörg Schwenk, Marcus Niemietz, and Christian Mainka. 2017. Same-Origin Policy:
Evaluation in Modern Browsers. In 26th USENIX Security Symposium (USENIX
Security 17). USENIX Association, Vancouver, BC, 713–727. https://www.usenix.
org/conference/usenixsecurity17/technical-sessions/presentation/schwenk
[30] Selenium. 2018. SeleniumHQ Browser Automation. https://www.seleniumhq.org.
[31] Sid Stamm, Zulfikar Ramzan, and Markus Jakobsson. 2007. Drive-By Pharming.
In Information and Communications Security, Sihan Qing, Hideki Imai, and Guilin
Wang (Eds.). Springer Berlin Heidelberg, Berlin, Heidelberg, 495–506.
[32] Paul Stone. 2013.
Pixel Perfect Timing Attacks with HTML5.
https://www.contextis.com/media/downloads/Pixel_Perfect_Timing_Attacks_
with_HTML5_Whitepaper.pdf.
[33] The BeEF Project. 2019. BeEF - The Browser Exploitation Framework. https:
//beefproject.com/.
[34] R. Upathilake, Y. Li, and A. Matrawy. 2015. A classification of web browser fin-
gerprinting techniques. In 2015 7th International Conference on New Technologies,
Mobility and Security (NTMS). Paris, France, 1–5. https://doi.org/10.1109/NTMS.
2015.7266460
[35] Anna van Kesteren. 2012. The From-Origin Header. https://www.w3.org/TR/
[36] John Wilander. 2018. Cross-Origin-Resource-Policy (was: From-Origin). https:
[40] Michael Zalewski. 2012. The Tangled Web: A Guide to Securing Modern Web
Applications. No Starch Press, San Francisco, CA.
from-origin/.
//github.com/whatwg/fetch/issues/687.
org/Security/wiki/Same_Origin_Policy.
w3schools.com/jsref/event_onerror.asp.
com/jsref/event_onload.asp.
[37] World Wide Web Consortium (W3C). 2010. Same Origin Policy. https://www.w3.
[38] World Wide Web Consortium (W3C). 2018. onerror Event. https://www.
[39] World Wide Web Consortium (W3C). 2018. onload Event. https://www.w3schools.