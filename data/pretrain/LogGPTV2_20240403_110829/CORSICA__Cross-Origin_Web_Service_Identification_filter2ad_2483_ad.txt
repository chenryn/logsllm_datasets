### Identification of Vulnerable Plugin Versions

When identifying vulnerable plugin versions down to the minor version, we were able to identify 590 out of the 1,814 collected plugin versions. The relatively low performance is due to the fact that, in many cases, vulnerabilities were fixed in the plugin logic, but the security patches did not change files accessible to our techniques. For 48 plugins, it was possible to precisely determine the versions before and after a vulnerability, enabling an attacker to detect 65 vulnerabilities: 34 Cross-Site Scriptings (XSS), 12 SQL Injections, two Remote Code Executions (RCE), and 17 other vulnerabilities.

### Comparison of Feature Types

In Section 4, we identified three main feature types: images, JavaScript, and style sheet (CSS) files. We found that each of these feature types could identify different services. To compare the effectiveness of each feature type, as well as the effectiveness of combinations, we measured how many Content Management System (CMS) and plugin versions could be correctly identified. The results are shown in Figure 7.

Using only images as a metric, as proposed by John Bergbom [6], yielded significantly worse results than using additional metrics. With images alone, we were able to distinguish 169 out of the 1,814 plugin versions, but different versions of most CMSs were no longer distinguishable. However, using either CSS or JavaScript files as features improved the identification results significantly, allowing us to distinguish 54 and 75 patch-level versions of CMSs and 400 and 322 plugin versions, respectively.

### Countermeasures

#### Proposed Defenses for Cross-Origin Information Leaks

Artur Janc surveyed various techniques to mitigate cross-origin information leakages [16]. Two methods seem promising for preventing the kind of attack described in this paper: Cross-Origin-Resource-Policy (CORP) and Sec-Metadata.

**Cross-Origin-Resource-Policy (CORP):** Anne van Kesteren and John Wilander proposed resurrecting the From-Header proposal as CORP [36]. The idea is that a server defines which origins are allowed to process a resource by sending a `from-origin` header along with the requested resource. The browser then checks if it is allowed to process the resource and drops it otherwise. The aim is not to block access to the resource but to signal that inclusion might lead to security problems. Since an attacking website cannot modify the headers of a requested resource, and the browser respects the header, CORP can effectively block the inclusion of resources, thus preventing the identification process described in this paper.

**Sec-Metadata:** Similar to the CORP proposal, the Sec-Metadata proposal describes a new HTTP header sent from the client to the server. This header contains additional information about a request’s origin, enabling the server to decide whether to serve the resource. Although Sec-Metadata mitigates service identification effectively, its privacy implications are unclear. Anti-tracking plugins may remove the header, similar to how "referrer-blockers" remove the referrer header. Thus, Sec-Metadata creates a conflict between security and privacy, which might hinder adoption.

Both proposals require code changes on both the server-side and the client-side. Users who regularly update their browsers will benefit from these extensions without additional configuration efforts. However, server administrators will need to reconfigure their services to use the new mitigations. As the adoption of novel security features is often slow [6], both proposals describe mid- to long-term countermeasures.

#### General Recommendations

Although the identification process can be mitigated with the described standards and procedures, maintaining security perimeters is increasingly difficult. Making identification more challenging may not be the best countermeasure, as the real problem is that devices are vulnerable to CSRF attacks. Developers and administrators should harden intranet services against attacks by applying the same level of care to internal services as they do to public-facing ones.

While web origins as a basis for the same-origin policy are defined in RFC 6454 [4], the documentation and standardization of the same-origin policy by both standardization bodies [37] and browser vendors [23] are lacking, leading to recurring browser bugs [29]. Therefore, we encourage standardizing committees and browser vendors to find common ground in unifying the same-origin policy for a safer web.

### Conclusion

A common excuse for not securing devices in private networks is that attackers need to find those devices first, which is thought to be difficult. We show that this is not true. Our CORSICA tool, a JavaScript-based scanner, can reliably identify web service versions under the assumption that a victim opens a malicious website from within the private network. The evaluation shows that CORSICA can identify IoT devices running a web service, the four most widely used CMSs, and even vulnerable WordPress plugins with high accuracy.

CORSICA uses techniques that leak information from cross-origin requests, such as image dimensions, the existence of certain CSS styles, or JavaScript function names. The Same-Origin Policy implementations in Mozilla Firefox, Google Chrome, and Apple Safari allow these techniques, and they cannot be fixed without impeding benign functionality of the web.

Although countermeasures exist, such as CORP and Sec-Metadata, not only do browsers need to support them, but server-side configuration is also required for every web service. Thus, unfortunately, no short-term solutions exist, and securing the endpoints behind perimeters remains the most effective way to thwart attacks. In this case, attackers can still identify the type and version of web services, but this information is useless if the service does not contain any known vulnerabilities.

### Acknowledgments

The authors would like to thank Sebastian Lekis, Arthur Junk, Ben Stock, and Martin Grothe for their valuable feedback and insightful discussions. Christian Dresen was supported by the research training group “Human Centered System Security,” sponsored by the state of North Rhine-Westphalia. Fabian Ising was supported by the research project “MITSicherheit.NRW” funded by the European Regional Development Fund North Rhine-Westphalia (EFRE.NRW).

### References

[References remain unchanged as they are already well-formatted and cited.]

This revised text aims to improve clarity, coherence, and professionalism while maintaining the original content and structure.