6
ρ·RT T 2 .
Proof To compute throughput we take the average steady
state window size derived in Claim 5, and divide it by the
RTT:
(cid:16) T
(cid:17)
2
RT T + 1
+ 1
2i+1
(cid:16)
0 ) − 2( T
RT T + 1)
(cid:17)
5.3. Protecting TCP from Stealth DoS Attacks
Packets reordering (whether by malicious attacker or due
to benign network conditions) has a negative effect on TCP
throughput. Upon receipt of three duplicate ACKs TCP
sender will trigger fast retransmit and will resend a ‘be-
lieved to be lost’ segment, resulting in wasted bandwidth,
and reduction of sending rate at the sender. Two indepen-
dent directions can be pursued in order to address the re-
ordering and speciﬁcally the attack in Section 5.1. One di-
rection is to adjust TCP to diverse network conditions, i.e.,
to immune TCP to packet reordering. A wide range of TCP
modiﬁcations has been proposed to improve robustness to
reordering, e.g., [8, 31, 41, 42, 10, 6, 40, 11, 9]; see a sur-
vey in [30] and an analysis in [8]. The main idea of all
those solutions is to detect and ignore false duplicate ACKs.
Sender halves the congestion window upon duplicate ACK,
but then restores it back when receiver signals receipt of
‘supposedly lost’ segment, thus resulting in an insigniﬁcant
slowdown. Yet none of the proposed solutions is widely
adopted, mainly since changing TCP requires a change in
every end host, and may take considerable time to adopt.
Algorithm 1: Implementation of the ﬁx to TCP in the send-
ing gateway GW 2. Gateway will inspect incoming ACK seg-
ments and will delay response to congestion, i.e., duplicate
ACKs.
If new ACK is received all duplicate ACKs are dis-
carded, otherwise, when typical delay is reached all ACK seg-
ments are forwarded to sending host behind the gateway.
Incoming Segment ack from Internet
if ack.SN == SN then
//it’s a duplicate ACK
if dupACKctr == 0 then
delay ← set delay();
timer ← set timer(delay);
dupACKctr ← 1;
if dupACKctr  SN then
SN ← ack.SN;
if dupACKctr > 0 then
dupACKctr ← 0;
stop timer();
cwnd(t−
RT T
≤
6
ρ · RT T 2
if timer == timeout then
for i = dupACKctr to 2 do
f orward(ack);
end
dupACKctr ← 0;
stop timer();
≤
(cid:3)
end
Figure 10: Throughput degradation attack on communication over TCP with inﬁnitely large IPsec anti-replay window, i.e., packets are not
discarded by IPsec implementation at the receiving gateway. Attacker reorders segments, thus generating a gap in sequence numbers at the
receiver, which responds with duplicate ACKs. Upon receipt of three duplicate ACKs, the sender reduces its sending rate. Speciﬁcally, TCP
at the sender transmits a window of k + 1 segments, and the attacker speeds up last three segments, i.e., segments with sequence numbers
i + k − 2, i + k − 1, i + k, such that they arrive before 1st segment in the window, i.e., segment with sequence number i. These segments
are passed by the gateway to the client (since they are authentic and not a replay), and trigger three duplicate ACKs for ith segment at the
receiver. Upon receipt of three duplicate ACKs the sender retransmits the missing segment i, and reduces its transmission rate. At time t0
the sender receives three duplicate ACKs (this initiates ﬁrst attack epoch); also note that cwnd = pending. The sender fast retransmits
lost segment, and reduces its transmission rate. The sender cannot resume transmission of further segments since the number of pending
segments is larger than the congestion window size. After receipt of sufﬁcient number of ACKs the sender can resume transmission of new
segments.
We focus on a solution that requires a modiﬁcation to IPsec
gateways. Solution in ﬁrewalls does not require changing
each host separately, but only to apply the modiﬁcation to
the ﬁrewall, and as a result to protect subnet of hosts. Many
private networks connected to the Internet are protected by
ﬁrewalls. Firewall protection is based on the idea that all
packets destined to hosts behind a ﬁrewall have to be exam-
ined by the ﬁrewall. The drawback of this approach is the
additional processing delay on every packet, and having the
ﬁrewall maintain state. On the other hand, many ﬁrewalls
examine TCP connections for security reasons, e.g., solu-
tion to SYN attack, thus ﬁrewalls keep state. Therefore, we
believe that our addition is minimal. Our solution is applied
to the sending IPsec gateway (and no change to receiving
gateway GW 1) and is comprised of two phases: ﬁrst detec-
tion, then prevention of an attack. Note that our suggestion
can also be applied to TCP in every host, yet we leave it as
a further research.
The main idea of our proposition is to delay response
to congestion, i.e., duplicate ACK, in the sending gateway
(w.l.o.g. GW 2 in Figure 1) and not deliver to the send-
ing host behind GW 2 until maximal delay is reached. The
sending gateway GW 2 will measure delay of outgoing seg-
ments9 between itself and the receiving gateway GW 1 (for
every VPN), and will use these measurements to estimate
typical delay for outgoing packets.
In addition, gateway
GW 2 will store time, and sequence number of outgoing
segments. These can be maintained in an array, and upon
arrival of an ACK, the corresponding sample is released. If
a duplicate ACK for some segment, e.g., segment with se-
quence number i, arrives, gateway GW 2 will approximate
9The gateway will estimate a typical delay between itself and the re-
ceiving gateway, similarly to existing approaches that estimate TCP time-
out.
(k-9)/2 segmentsi+k+1. . .ServerClientAttackerGW1GW2ii+1i+2ii+2i+1i+k-2. . .i+k-1i+kAck: i Ack: i Ack: i Ack: i+2Ack: i+k+1 i3 dup ACKsat time t0i+k+2i+k+2i+k+1i+(k-1)/2TCP windowcwini+1i+2i+k-2i+k-1i+k(k-4) segmentsi1. Fast retransmit segment i2. cwnd(t0+)=cwnd(t0-)/23. enter fast recoveryii+k-1i+k-2i+k-2i+ki+k-1i+ki+k-3Ack: i+1i+(k-1)/2-1i+(3k-1)/2-1IPsec window is advanced for each segment,with i+k being the right edgeReceiver identifies a gap and sends duplicate ACK for i (next expected segment)Three segments up to segment (i+k) are duplicate and discardedPending=cwndt0,0t0,Kt0,2K-1the sending time, based on the stored samples, of segment
i. More speciﬁcally, the gateway will locate in the array the
interval of the sending time of missing segment (for which a
duplicate ACK was received); and (based on the delay mea-
surements it recorded) will delay the duplicate ACK (and
all subsequent duplicate ACKs for that segment) till typi-
cal (plus possibly some safety margin) delay is reached. If
ACK with higher sequence number arrives before maximal
delay, all duplicate ACKs are discarded, and the new ACK
is forwarded to the sending host. However if no new ACK
arrives, once maximal delay is reached, all duplicate ACKs
are released and forwarded to the sending host (see pseudo-
code in Algorithm 1).
Note that storing and maintaining duplicate ACKs may
impose an overhead on the gateway, therefore we propose
the following implementation: sending gateway GW 2 will
store the sequence number SN of the most recently re-
ceived ACK, and will maintain duplicate ACKs counter
dupACKctr. For each subsequent duplicate ACK for the
same SN, the counter will be incremented. This addition
requires the gateway only to store the sequence number
(32 bits) of last correctly received packet, and counter with
number of duplicate ACKs for last correctly received seg-
ment. We defer detailed analysis of the ﬁx to full version of
the paper.
6. Further Research Directions
Below we present several future research directions:
• An important further research is deﬁning secure chan-
nel protocol with performance guarantees, that would
ensure security and efﬁciency to trafﬁc above it, or to
prove that no such channel exists.
• It is interesting to consider a weaker attacker with-
out speed-up advantage, i.e., attacker may be using
the same channel as the legitimate parties, or another
with the same delay, and to perform analysis of per-
formance degradation (and probabilities given distri-
bution on trafﬁc).
• Further work is required to analyse our suggested ﬁx to
TCP in IPsec gateway as a solution to benign (as well
as malicious) packet reordering on Internet. In partic-
ular, to perform simulations, and experiments showing
the impact on efﬁciency when under attack, as well as
under bening network reordering.
References
[1] I. Aad, J. Hubaux, and E. Knightly. Denial of service re-
silience in ad hoc networks. In Proceedings of the 10th an-
nual international conference on Mobile computing and net-
working, pages 202–215. ACM New York, NY, USA, 2004.
[2] M. Allman, V. Paxson, and W. Stevens. TCP Congestion
Control. RFC 2581 (Proposed Standard), Apr. 1999. Up-
dated by RFC 3390.
[3] M. Allman, V. Paxson, and W. Stevens. TCP Congestion
Control, RFC 2581. Internet request for comments, 1999.
[4] J. Bellardo and S. Savage. Measuring packet reordering.
In Proceedings of the 2nd ACM SIGCOMM Workshop on
Internet measurment, pages 97–105. ACM New York, NY,
USA, 2002.
[5] M. Bellare, A. Desai, D. Pointcheval, and P. Rogaway. Re-
lations among notions of security for public-key encryption
schemes. Lecture notes in computer science, pages 26–45,
1998.
[6] S. Bhandarkar and A. Reddy. TCP-DCR: Making TCP ro-
bust to non-congestion events. Lecture Notes in Computer
Science, pages 712–724, 2004.
[7] S. Blake, D. Black, M. Carlson, E. Davies, Z. Wang, and
W. Weiss. RFC2475: An Architecture for Differentiated
Services. RFC Editor United States, 1998.
[8] E. Blanton and M. Allman. On making TCP more robust to
packet reordering. ACM SIGCOMM Computer Communi-
cation Review, 32(1):20–30, 2002.
[9] E. Blanton and M. Allman. Using TCP Duplicate Selective
Acknowledgement (DSACKs) and Stream Control Trans-
mission Protocol (SCTP) Duplicate Transmission Sequence
Numbers (TSNs) to Detect Spurious Retransmissions. RFC
3708 (Experimental), Feb. 2004.
[10] S. Bohacek, J. Hespanha, J. Lee, C. Lim, and K. Obraczka.
In Dis-
TCP-PR: TCP for persistent packet reordering.
tributed Computing Systems, 2003. Proceedings. 23rd Inter-
national Conference on, pages 222–231, 2003.
[11] S. Bohacek, J. Hespanha, J. Lee, C. Lim, and K. Obraczka.
A New TCP for Persistent Packet Reordering. IEEE/ACM
TRANSACTIONS ON NETWORKING, 14(2):369, 2006.
[12] R. Canetti and H. Krawczyk. Universally Composable No-
tions of Key Exchange and Secure Channels. In Proceedings
of the International Conference on the Theory and Applica-
tions of Cryptographic Techniques: Advances in Cryptol-
ogy, pages 337–351. Springer-Verlag London, UK, 2002.
[13] R. Chang. Defending against ﬂooding-based distributed
denial-of-service attacks: A tutorial. IEEE Communications
Magazine, 40(10):42–51, 2002.
[14] T. Dierks and E. Rescorla. The Transport Layer Security
(TLS) Protocol Version 1.2. RFC 5246 (Proposed Standard),
Aug. 2008.
[15] G. Dommety. Key and Sequence Number Extensions to
GRE. RFC 2890 (Proposed Standard), Sept. 2000.
[16] Y. Gilad and A. Herzberg. Lightweight opportunistic tun-
neling (lot). In ESORICS, pages 104–119, 2009.
[17] M. Gouda, C. Huang, and E. Li. Anti-replay window proto-
cols for secure IP. In Computer Communications and Net-
works, 2000. Proceedings. Ninth International Conference
on, pages 310–315, 2000.
[18] M. Guirguis, A. Bestavros, and I. Matta. Exploiting the tran-
sients of adaptation for RoQ attacks on Internet resources.
In Network Protocols, 2004. ICNP 2004. Proceedings of
the 12th IEEE International Conference on, pages 184–195,
2004.
[37] C. Schuba, I. Krsul, M. Kuhn, E. Spafford, A. Sundaram,
and D. Zamboni. Analysis of a Denial of Service Attack on
In 1997 IEEE Symposium on Security and Privacy,
TCP.
1997. Proceedings., pages 208–223, 1997.
[38] W. Stevens. TCP/IP illustrated (vol. 1):
the protocols.
Addison-Wesley Longman Publishing Co., Inc. Boston,
MA, USA, 1993.
[39] P. Syverson. A taxonomy of replay attacks [cryptographic
In Computer Security Foundations Workshop
protocols].
VII, 1994. CSFW 7. Proceedings, pages 187–191, 1994.
[40] F. Wang and Y. Zhang. Improving TCP performance over
mobile ad-hoc networks with out-of-order detection and re-
sponse. In Proceedings of the 3rd ACM international sym-
posium on Mobile ad hoc networking & computing, pages
217–225. ACM New York, NY, USA, 2002.
[41] M. Zhang, B. Karp, S. Floyd, and L. Peterson. Improving
TCP’s Performance under Reordering with DSACK. Inter-
national Computer Science Institute, Berkeley, Tech. Rep.
TR-02-006, 2002.
[42] M. Zhang, B. Karp, S. Floyd, and L. Peterson. RR-TCP:
In 11th IEEE Inter-
A reordering-robust tcp with dsack.
national Conference on Network Protocols, 2003. Proceed-
ings, pages 95–106, 2003.
[43] F. Zhao and S. Wu. Analysis and improvement on IPSec
anti-replay window protocol. In Computer Communications
and Networks, 2003. ICCCN 2003. Proceedings. The 12th
International Conference on, pages 553–558, 2003.
[19] M. Guirguis, A. Bestavros, I. Matta, and Y. Zhang. Re-
duction of quality (RoQ) attacks on Internet end-systems.
In Proceedings IEEE INFOCOM 2005. 24th Annual Joint
Conference of the IEEE Computer and Communications So-
cieties, volume 2, 2005.
[20] G. Hellstrom. RTP Payload for Text Conversation. RFC
2793 (Proposed Standard), May 2000. Obsoleted by RFC
4103.
[21] A. Herzberg and I. Yoffe. The layered games framework
for speciﬁcations and analysis of security protocols. Inter-
national Journal of Applied Cryptography, 1(2):144–159,
2008.
[22] K. Hickman and T. Elgamal. The SSL protocol. Netscape
Communications Corp, 1995.
[23] K. Houle, G. Weaver, N. Long, and R. Thomas. Trends
in denial of service attack technology. CERT Coordination
Center, 2001.
[24] C. Huang and M. Gouda. An anti-replay window protocol
with controlled shift. In Proceedings of the 10th IEEE In-
ternational Conference on Computer Communications and
Networks, 2001.
[25] C. Kaufman, R. Perlman, and B. Sommerfeld. DoS protec-
tion for UDP-based protocols. In Proceedings of the 10th
ACM conference on Computer and communications secu-
rity, page 7. ACM, 2003.
[26] S. Kent and R. Atkinson. Security Architecture for the In-
ternet Protocol. RFC 2401 (Proposed Standard), Nov. 1998.
Obsoleted by RFC 4301, updated by RFC 3168.
[27] S. Kent and K. Seo. Security Architecture for the Internet
Protocol. RFC 4301 (Proposed Standard), Dec. 2005.
[28] J. Kurose, K. Ross, and K. Ross. Computer networking: a
top-down approach featuring the Internet. Addison-Wesley
Reading, MA, 2003.
[29] A. Kuzmanovic and E. Knightly. Low-rate TCP-targeted
the shrew vs. the mice and ele-
denial of service attacks:
In Proceedings of the 2003 conference on Appli-
phants.
cations, technologies, architectures, and protocols for com-
puter communications, pages 75–86. ACM New York, NY,
USA, 2003.
[30] K. Leung, V. Li, and D. Yang. An overview of packet re-
ordering in transmission control protocol (TCP): problems,
IEEE Transactions on Parallel
solutions, and challenges.
and Distributed Systems, 18(4):522–535, 2007.
[31] R. Ludwig and R. Katz. The Eifel algorithm: making TCP
robust against spurious retransmissions. ACM SIGCOMM
Computer Communication Review, 30(1):30–36, 2000.
[32] X. Luo and R. Chang. On a new class of pulsing denial-
In Proceedings of the
of-service attacks and the defense.
ISOC Symposium on Network and Distributed Systems Se-
curity (SNDSS), pages 61–79, 2005.
[33] M. Maxim and D. Pollino. Wireless security. McGraw-Hill
Osborne Media, 2002.
[34] V. Paxson and M. Allman. RFC2988: Computing TCP’s
Retransmission Timer. RFC Editor United States, 2000.
[35] J. Postel. Transmission Control Protocol. RFC 793 (Stan-
dard), Sept. 1981. Updated by RFCs 1122, 3168.
[36] K. Ramakrishnan, S. Floyd, and D. Black. The addition of
explicit congestion notiﬁcation (ECN) to IP, 2001.