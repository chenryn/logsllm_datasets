**作者：evilpan  
原文链接：**
之前写了一篇[深入浅出ELF](https://evilpan.com/2020/08/09/elf-inside-out/)，作为姊妹篇这次就来聊聊MacOS的可执行文件格式MachO。
# Mach-O 101
在[之前的文章](https://evilpan.com/2020/08/09/elf-inside-out/)中我们说过，可执行文件的使命有两个，一是方便开发者在编译、链接时提供可扩展的封装结构；二是在执行时能给操作系统(内核)提供内存映射信息。MachO也不例外。
MachO本身没有什么特别的含义，就是`Mach
object`的简写，而[Mach](https://en.wikipedia.org/wiki/Mach_kernel)是早期的一个微内核。和ELF一样，MachO也极具拓展性，从全局视角来看，MachO文件可以分为三个部分，分别是:
  1. Mach Header: 文件头信息
  2. 可变长度的LOAD_COMMAND信息
  3. 上述LOAD_COMMAND中所用到的具体信息(segments)
这里的segment可以理解为一段连续的内存空间，拥有对应的读/写/执行权限，并且在内存中总是页对齐的。每个segment由一个或者多个section组成，section表示特定含义数据或者代码的集合(不需要页对齐)。在macOS中，通常约定segment的名称为双下划线加全大写字母(如`__TEXT`)，section的名称为双下划线加小写字母(如`__text`)。
下面对这三个部分进行分别介绍。
> 注: MachO文件结构的表示通常分为32位和64位两种，本文以64位为例，毕竟这是历史的进程。
## Header
文件头信息参考[mach-o/loader.h](https://github.com/apple/darwin-xnu/blob/master/EXTERNAL_HEADERS/mach-o/loader.h)中的定义如下:
    /* * The 64-bit mach header appears at the very beginning of object files for * 64-bit architectures. */ struct mach_header_64 { uint32_t   magic;      /* mach magic number identifier */ cpu_type_t   cputype;    /* cpu specifier */ cpu_subtype_t   cpusubtype; /* machine specifier */ uint32_t    filetype;   /* type of file */ uint32_t ncmds;      /* number of load commands */ uint32_t  sizeofcmds; /* the size of all the load commands */ uint32_t    flags;      /* flags */ uint32_t    reserved;   /* reserved */ }; /* Constant for the magic field of the mach_header_64 (64-bit architectures) */ #define MH_MAGIC_64 0xfeedfacf /* the 64-bit mach magic number */ #define MH_CIGAM_64 0xcffaedfe /* NXSwapInt(MH_MAGIC_64) */ 
`filetype`表示类型，常见的有:
  * MH_OBJECT: 可重定向的目标文件
  * MH_EXECUTE: 可执行文件
  * MH_DYLIB: 动态绑定的共享库文件
  * …
`flags`为不同的文件标签的组合，每个标签占一个位，可以用位或来进行组合，常见的标签有:
  * MH_NOUNDEFS: 该文件没有未定义的引用
  * MH_DYLDLINK: 该文件将要作为动态链接器的输入，不能再被静态链接器修改
  * MH_TWOLEVEL: 该文件使用两级名字空间绑定
  * MH_PIE: 可执行文件会被加载到随机地址，只对`MH_EXECUTE`有效
  * …
另外一个值得关注的就是`ncmds`和`sizeofcmds`，分别指定了 LOAD_COMMAND 的个数以及总大小，从这里也大概能猜到，每个
command 的大小是可变的。
## Command
`LOAD_COMMAND`是体现MachO文件拓展性的地方，每个 command 的头两个word分别表示类型和大小，如下:
    struct load_command { uint32_t cmd;     /* type of load command */ uint32_t cmdsize;    /* total size of command in bytes */ }; 
不同的`cmd`类型都会有其对应的结构体来描述其内容，`cmdsize`表示的是整个cmd的大小，即包括头部和内容。也就是说在处理的时候当前cmd的位置加上cmdsize就是下一个cmd的位置。注意每个command的大小(即cmdsize)需要word对齐，对于32位CPU来说是4字节，64位则是8字节；同时对齐末尾的填充部分必须是0。
`loader.h`中绝大部分的篇幅就是用来定义各种不同command类型的结构体了，这里挑选一些比较常见的来进行介绍。
### LC_SEGMENT
`LC_SEGMENT`/`LC_SEGMENT64`可以说是最重要的一个command。表示当前文件的一部分将会映射到目标进程(task)的地址空间中，包括程序运行所需要的所有代码和数据。假设当前MachO文件的起始地址为begin，则映射的内容为:
  * 原始地址(文件地址): _begin + fileoff_ ，大小为 _filesize_
  * 目的地址(进程虚址): _vmaddr_ ，大小为 _vmsize_
其中`vmsize >= filesize`，如果有多出来的部分需要填充为零。segment_command的结构体表示如下:
    struct segment_command_64 { /* for 64-bit architectures */ uint32_t cmd;        /* LC_SEGMENT_64 */ uint32_t    cmdsize;    /* includes sizeof section_64 structs */ char       segname[16];    /* segment name */ uint64_t vmaddr;     /* memory address of this segment */ uint64_t   vmsize;     /* memory size of this segment */ uint64_t  fileoff;    /* file offset of this segment */ uint64_t  filesize;   /* amount to map from the file */ vm_prot_t maxprot;    /* maximum VM protection */ vm_prot_t   initprot;   /* initial VM protection */ uint32_t    nsects;     /* number of sections in segment */ uint32_t    flags;      /* flags */ }; 
maxprot/initprot表示对应segment虚拟地址空间的RWX权限。如果segment包含一个或者多个section，那么在该segment结构体之后就紧跟着对应各个section头，总大小也包括在cmdsize之中，其结构如下:
    struct section_64 { /* for 64-bit architectures */ char     sectname[16];   /* name of this section */ char     segname[16];    /* segment this section goes in */ uint64_t addr;       /* memory address of this section */ uint64_t   size;       /* size in bytes of this section */ uint32_t    offset;     /* file offset of this section */ uint32_t  align;      /* section alignment (power of 2) */ uint32_t   reloff;     /* file offset of relocation entries */ uint32_t    nreloc;     /* number of relocation entries */ uint32_t flags;      /* flags (section type and attributes)*/ uint32_t   reserved1;  /* reserved (for offset or index) */ uint32_t   reserved2;  /* reserved (for count or sizeof) */ uint32_t   reserved3;  /* reserved */ }; 
每个section头对应一个section，位置在 **相对文件起始地址** 的 _offset_ 处，大小为 _size_ 字节，对应的虚拟地址为
_addr_ 。这里的 _align_
对齐指的是在虚拟地址空间中的对齐，实际上在文件中是连续存放的，因为有size指定大小。reloff和nreloc与符号的重定向有关，在下面的加载过程一节中再进行介绍。
从这里可以看出，section的内容和segment是不连续存放的，只是section header在对应segment之后。而segment的
_vmsize_
实际上会大于segment+section_header的大小(即cmdsize)，猜测多出来的空间是内核加载MachO时将对应section内容填充进去，后面将会对这一猜测进行验证。
#### TEXT
`__TEXT`段包含`__text`、`__stubs`、`__stub_helper`、`__cstring`等section，一般用来存放不可修改的数据，比如代码和const字符串，可以用`otool`查看对应的section内容:
    $ otool -V main -s __TEXT __stubs main: Contents of (__TEXT,__stubs) section 0000000100000f6a   jmpq    *0xa8(%rip) ## literal pool symbol address: _printf 0000000100000f70    jmpq    *0xaa(%rip) ## literal pool symbol address: _set_foo 
在实际的MachO可执行文件中观察发现TEXT的fileoff为0，也就是说TEXT段映射的时候会将当前文件头部分也映射到进程空间中。
    (lldbinit) image dump sections main Sections for '/Users/evilpan/temp/macho-test/main' (x86_64):  SectID     Type             Load Address                             Perm File Off.  File Size  Flags      Section Name  ---------- ---------------- ---------------------------------------  ---- ---------- ---------- ---------- ----------------------------  0x00000100 container        [0x0000000000000000-0x0000000100000000)* ---  0x00000000 0x00000000 0x00000000 main.__PAGEZERO  0x00000200 container        [0x0000000100000000-0x0000000100001000)  r-x  0x00000000 0x00001000 0x00000000 main.__TEXT  0x00000001 code             [0x0000000100000ee0-0x0000000100000f6a)  r-x  0x00000ee0 0x0000008a 0x80000400 main.__TEXT.__text  0x00000002 code             [0x0000000100000f6a-0x0000000100000f76)  r-x  0x00000f6a 0x0000000c 0x80000408 main.__TEXT.__stubs  0x00000003 code             [0x0000000100000f78-0x0000000100000f9c)  r-x  0x00000f78 0x00000024 0x80000400 main.__TEXT.__stub_helper  0x00000004 data-cstr        [0x0000000100000f9c-0x0000000100000fb0)  r-x  0x00000f9c 0x00000014 0x00000002 main.__TEXT.__cstring  0x00000005 compact-unwind   [0x0000000100000fb0-0x0000000100000ff8)  r-x  0x00000fb0 0x00000048 0x00000000 main.__TEXT.__unwind_info  0x00000300 container        [0x0000000100001000-0x0000000100002000)  rw-  0x00001000 0x00001000 0x00000000 main.__DATA  0x00000006 data-ptrs        [0x0000000100001000-0x0000000100001008)  rw-  0x00001000 0x00000008 0x00000006 main.__DATA.__nl_symbol_ptr  0x00000007 data-ptrs        [0x0000000100001008-0x0000000100001018)  rw-  0x00001008 0x00000010 0x00000006 main.__DATA.__got  0x00000008 data-ptrs        [0x0000000100001018-0x0000000100001028)  rw-  0x00001018 0x00000010 0x00000007 main.__DATA.__la_symbol_ptr  0x00000009 zero-fill        [0x0000000100001028-0x000000010000102c)  rw-  0x00000000 0x00000000 0x00000001 main.__DATA.__common  0x00000400 container        [0x0000000100002000-0x0000000100007000)  r--  0x00002000 0x00004a90 0x00000000 main.__LINKEDIT 
上面例子中`__TEXT`段的的vm_size和file_size都是`0x1000`，这个大小在文件中正好是第一个`__DATA`section的起始地址:
`__PAGEZERO`是一个特殊的段，主要目的是将低地址占用，防止用户空间访问。个人理解这是对空指针引用类型漏洞的一种缓解措施，Linux内核中也有[mmap_min_addr](https://wiki.debian.org/mmap_min_addr)来限制用户可以mmap映射的最低地址。
#### DATA
`__DATA`段则包含`__got`、`__nl_symbol_ptr`、`__la_symbol_ptr`等section，一般包括可读写的内容。
#### LINKEDIT
另外一个重要的段为`__LINKEDIT`，其中包含需要被动态链接器使用的信息，包括符号表、字符串表、重定位项表、签名等。该段和`PAGEZERO`一样的是末尾没有额外的section信息，所以cmdsize都等于72(`sizeof(struct
segment_command_64)`)。其内容即`begin + fileoff`指向的地方保存linkedit
command的内容，这个内容的格式根据具体cmd的不同而不同。LINKEDIT可以理解为元数据，值得一提的是，经过观察，`fileoff
+filesize`即为MachO文件末尾，也就是等于文件的大小。
那么LINKEDIT块中的内容是什么格式呢？其实大部分有其专门的格式，比如对`Dynamic Loader
Info`来说是字节码，对于符号表来说是符号表结构体，对于函数地址项来说是`uleb128`编码的地址值，……因此LINKEDIT可谓包罗万象，需要具体问题具体分析，下面介绍的几个command就是其中几个例子。