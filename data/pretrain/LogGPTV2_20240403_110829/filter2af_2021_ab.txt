类执行加密代码的动态库加载，所以我们可以利用这个功能，通过任意文件写入漏洞来实现远程代码执行。
在新版本的浏览器中，我注意到 `/data/data/com.mx.browser/files` 目录中看起来很奇怪的新文件，如
`tdata_qiz011`，`tdata_qiz011.dex`，`tdata_rqS304`和 `tdata_rqS304.dex`。
注意虽然文件名看起来貌似随机生成，在多个设备上安装应用程序后，我注意到文件名不是根据设备特定生成的。
—— 包含优化 dex 文件的可疑文件
—— 未知的文件格式和优化的 dex 文件
我决定调查 `tdata_rqS304` 里面有什么东西。我怀疑这是一个加密的 JAR/APK 文件，但我不确定。
—— 加密过的 APK/JAR ？
执行动态类加载的代码位于 `com.igexin.push.extension.a` 类中。代码似乎加载了一个文件，比如 `tdata_rqS04`
，解密到一个 JAR 文件，如 `tdata_reS304.jar` ，从 JAR 文件中加载一个类，创建一个类的实例（调用构造函数），然后删除原 JAR
文件（使其逆向工程中隐藏）。我猜测 `com.igexin.a.a.a.a.a` 是解密方法。
        public boolean a(Context arg10, String arg11, String arg12, String arg13, String arg14) {
            Class v0_1;
            File v2 = new File(arg11);
            File v3 = new File(arg11 + ".jar");
            File v4 = new File(arg10.getFilesDir().getAbsolutePath() + "/" + arg14 + ".dex");
            this.a(v2, v3, arg13);
            if(v3.exists()) {
                try {
                    DexClassLoader v2_1 = new DexClassLoader(v3.getAbsolutePath(), arg10.getFilesDir().getAbsolutePath(), null, arg10.getClassLoader());
                    try {
                        v0_1 = v2_1.loadClass(arg12);
                    }
                    catch(Exception v2_2) {
                    }
                }
                catch(Throwable v0) {
                    goto label_74;
                }
                try {
                    v3.delete();
                    v4.exists();
                    if(v0_1 == null) {
                        boolean v0_2 = false;
                        return v0_2;
                    }
                    Object v0_3 = v0_1.newInstance();
    ...
        public void a(File arg10, File arg11, String arg12) {
            BufferedOutputStream v1_5;
            Throwable v8;
            int v1_1;
            FileInputStream v2;
            BufferedOutputStream v0_2;
            FileOutputStream v2_1;
            FileInputStream v3;
            FileOutputStream v1 = null;
            try {
                v3 = new FileInputStream(arg10);
            }
            catch(Throwable v0) {
                v2_1 = v1;
                v3 = ((FileInputStream)v1);
                goto label_45;
            }
            catch(Exception v0_1) {
                v0_2 = ((BufferedOutputStream)v1);
                v2 = ((FileInputStream)v1);
                goto label_22;
            }
            try {
                v2_1 = new FileOutputStream(arg11);
            }
            catch(Throwable v0) {
                v2_1 = v1;
                goto label_45;
            }
            catch(Exception v0_1) {
                v0_2 = ((BufferedOutputStream)v1);
                v2 = v3;
                goto label_22;
            }
            try {
                v0_2 = new BufferedOutputStream(((OutputStream)v2_1));
                v1_1 = 1024;
            }
            catch(Throwable v0) {
                goto label_45;
            }
            catch(Exception v0_1) {
                v0_2 = ((BufferedOutputStream)v1_1);
                v1 = v2_1;
                v2 = v3;
                goto label_22;
            }
            try {
                byte[] v1_4 = new byte[v1_1];
                while(true) {
                    int v4 = v3.read(v1_4);
                    if(v4 == -1) {
                        break;
                    }
                    byte[] v5 = new byte[v4];
                    System.arraycopy(v1_4, 0, v5, 0, v4);
                    v0_2.write(com.igexin.a.a.a.a.a(v5, arg12));
                }
`com.igenxin.a.a.a.a` 类使用本地加密算法执行解密。输入验证至关重要（"key is fail!"）。
    package com.igexin.a.a.a;
    public class a {
        public static void a(int[] arg2, int arg3, int arg4) {
            int v0 = arg2[arg3];
            arg2[arg3] = arg2[arg4];
            arg2[arg4] = v0;
        }
        public static boolean a(byte[] arg6) {
            boolean v0_1;
            int v3 = arg6.length;
            if(v3  256) {
                v0_1 = false;
            }
            else {
                int v2 = 0;
                int v0 = 0;
                while(v2  3) {
                            v0_1 = false;
                            return v0_1;
                        }
                    }
                    ++v2;
                }
                v0_1 = true;
            }
            return v0_1;
        }
        public static byte[] a(byte[] arg1, String arg2) {
            return a.a(arg1, arg2.getBytes());
        }
        public static byte[] a(byte[] arg7, byte[] arg8) {
            int v1 = 0;
            if(!a.a(arg8)) {
                throw new IllegalArgumentException("key is fail!");
            }
            if(arg7.length <= 0) {
                throw new IllegalArgumentException("data is fail!");
            }
            int[] v3 = new int[256];
            int v0;
            for(v0 = 0; v0 < v3.length; ++v0) {
                v3[v0] = v0;
            }
            v0 = 0;
            int v2 = 0;
            while(v0 < v3.length) {
                v2 = (v2 + v3[v0] + (arg8[v0 % arg8.length] & 255)) % 256;
                a.a(v3, v0, v2);
                ++v0;
            }
            byte[] v4 = new byte[arg7.length];
            v0 = 0;
            v2 = 0;
            while(v1 < v4.length) {
                v0 = (v0 + 1) % 256;
                v2 = (v2 + v3[v0]) % 256;
                a.a(v3, v0, v2);
                v4[v1] = ((byte)(v3[(v3[v0] + v3[v2]) % 256] ^ arg7[v1]));
                ++v1;
            }
            return v4;
        }
        public static byte[] b(byte[] arg1, String arg2) {
            return a.a(arg1, arg2.getBytes());
        }
    }
所以现在我们知道如何揭秘 JAR 文件了，但是我们需要知道加密密钥。我又通过 Xposed
使用了模块动态分析来却id那个每个文件使用了哪个加密密钥以及加载了哪个类。以下是我从 `tdata_rqS304`
文件中获取到的信息。我还在不同设备验证了加密密钥不是针对特定设备的。例如，加密库使用“5f8286ee3424bed2b71f66d996b247b8”作为密钥来解密
`tdata_rqS304` 文件。
    Method Caller: com.igexin.push.extension.a@420bfd48
    Argument Types: com.igexin.sdk.PushService, java.lang.String, java.lang.String, java.lang.String, java.lang.String
    Argument 0: com.igexin.sdk.PushService@420435b8
    Argument 1: /data/data/com.mx.browser/files/tdata_rqS304
    Argument 2: com.igexin.push.extension.distribution.basic.stub.PushExtension
    Argument 3: 5f8286ee3424bed2b71f66d996b247b8
    Argument 4: tdata_rqS304
现在我们用于了解密文件并检查 JAR 文件的所有信息。以下 Java 程序将揭秘 `tdata_rqS304` 文件。
    import java.util.Base64;
    import javax.crypto.Cipher;
    import javax.crypto.spec.SecretKeySpec;
    import java.io.*;
    public class MaxDexDecrypt {
        public static void main(String[] args) throws Exception {
            String ciphertextFilename = "tdata_rqS304";
            String plaintextFilename = "tdata_rqS304.jar";
            String keyString = "5f8286ee3424bed2b71f66d996b247b8";
            File ciphertextFile = new File(ciphertextFilename);