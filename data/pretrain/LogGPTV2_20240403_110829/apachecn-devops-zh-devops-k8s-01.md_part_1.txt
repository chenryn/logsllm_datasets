# 一、DevOps 简介
软件交付周期越来越短，而另一方面，应用规模越来越大。软件开发人员和信息技术运营商面临着找到解决方案的压力。有一个新的角色，叫做 **DevOps** ，专门支持软件的构建和交付。
本章涵盖以下主题:
*   软件交付方法有什么变化？
*   什么是微服务，人们为什么采用这种架构？
*   DevOps 如何支持构建应用并将其交付给用户？
# 软件交付挑战
构建计算机应用并将其交付给客户已经过讨论，并随着时间的推移而不断发展。与**软件开发生命周期** ( **SDLC** )相关；有几种类型的过程、方法和历史。在这一部分，我们将描述它的演变。
# 瀑布和实物交付
回到 20 世纪 90 年代，软件交付是通过一种**物理**方法来实现的，例如软盘或光盘。因此，SDLC 是一个非常长期的计划，因为它不容易(重新)交付给客户。
当时，一个主要的软件开发方法是**瀑布模型**，它有需求/设计/实现/验证/维护阶段，如下图所示:
![](img/00005.jpeg)
在这种情况下，我们不能回到以前的阶段。例如，在开始或结束**实施**阶段后，回到**设计**阶段是不可接受的(例如，发现技术可扩展性问题)。这是因为它会影响整体进度和成本。项目倾向于继续进行并完成发布，然后进入下一个发布周期，包括新的设计。
它与物理软件交付完美匹配，因为它需要与物流管理部门协调，物流管理部门将软盘/光盘按下并交付给用户。瀑布模型和实物交付过去需要一年到几年的时间。
# 敏捷和电子交付
几年后，互联网被广泛接受，随后软件交付方式也从实物变为**电子**，如在线下载。因此，许多软件公司(也称为网络公司)试图找出如何缩短 SDLC 过程，以便交付能够击败竞争对手的软件。
许多开发人员开始采用新的方法，如增量、迭代或**敏捷**模型，然后更快地交付给客户。即使发现新的 bug，现在也更容易更新，并通过电子交付作为补丁交付给客户。微软视窗更新也是从视窗 98 开始推出的。
在这种情况下，软件开发人员只编写一个小的逻辑或模块，而不是一次性编写整个应用。然后，交付给 QA，然后开发人员继续添加新模块，最后再次交付给 QA。
当所需的模块或功能准备就绪时，它将被释放，如下图所示:
![](img/00006.jpeg)
该模型使软件开发生命周期和软件交付更快，并且在过程中也易于调整，因为周期从几周到几个月，小到足以进行快速调整。
虽然这种模式目前受到大多数人的青睐，但在当时，应用软件交付意味着软件的二进制化，例如 EXE 程序，该程序旨在安装并运行在客户的电脑上。另一方面，基础设施(如服务器和网络)是非常静态的，并且是预先设置好的。因此，SDLC 还不倾向于将这些基础设施包括在范围内。
# 云上软件交付
几年后，智能手机(如 iPhone)和无线技术(如 Wi-Fi 和 4G 网络)被广泛接受，软件应用也从二进制转变为在线服务。网络浏览器是应用软件的接口，不再需要安装。另一方面，基础架构变得动态，因为应用需求不断变化，容量也需要增长。
虚拟化技术和**软件定义网络** ( **SDN** )使服务器机器动态化。现在**亚马逊网络服务**(**AWS**)**谷歌云平台** ( **GCP** )等云服务可以轻松创建和管理动态基础设施。
现在，基础设施是重要的组成部分之一，并且在软件开发交付周期的范围内，因为应用是在服务器端安装和运行的，而不是在客户端电脑上。因此，软件和服务交付周期需要几天到几周。
# 连续累计
如前所述，周围的软件交付环境不断变化；然而，交付周期越来越短。为了实现更高质量的快速交付，开发人员和质量保证开始采用一些自动化技术。流行的自动化技术之一是**持续集成** ( **CI** )。CI 包含一些工具组合，如**版本控制系统** ( **VCS** )、**构建服务器**、**测试自动化工具**。
VCS 帮助开发者在中央服务器上维护程序源代码。它防止覆盖或与其他开发人员的代码冲突，还保留了历史记录。因此，更容易保持源代码的一致性并交付给下一个周期。
与 VCS 一样，有一个集中的构建服务器，当开发人员将代码更新到 VCS 时，它连接 VCS，定期或自动检索源代码，然后触发新的构建。如果构建失败，它会及时通知开发人员。因此，当有人将损坏的代码提交到 VCS 时，它会帮助开发人员。
测试自动化工具也与构建服务器集成在一起，构建服务器在构建成功后调用单元测试程序，然后将结果通知给开发人员和 QA。它有助于识别何时有人编写了有问题的代码并存储到 VCS。
配置项的整个流程如下图所示:
![](img/00007.jpeg)
CI 不仅可以帮助开发人员和质量保证人员提高质量，还可以缩短归档应用或模块包的周期。在向客户交付电子产品的时代，竞争情报已经足够了。但是，因为交付给客户意味着部署到服务器。
# 持续交付
CI+部署自动化是服务器应用向客户提供服务的理想流程。然而，有一些技术挑战需要解决。如何向服务器交付软件？如何优雅地关闭现有应用？如何替换和回滚应用？如果系统库也需要更换，如何升级或更换？如果需要，如何在操作系统中修改用户和组设置？等等。
因为基础架构包括服务器和网络，所以它完全依赖于开发/质量保证/试运行/生产等环境。每个环境都有不同的服务器配置和 IP 地址。
**持续交付** ( **光盘**)是可以实现的做法；它是配置项工具、配置管理工具和编排工具组合:
![](img/00008.jpeg)
# 结构管理
配置管理工具有助于配置操作系统，包括用户、组和系统库，还可以管理多个服务器，如果我们更换服务器，这些服务器将保持与所需状态或配置一致。
它不是脚本语言，因为脚本语言是基于脚本逐行执行命令的。如果我们执行脚本两次，它可能会导致一些错误，例如，试图创建同一个用户两次。另一方面，配置管理看的是**状态**，所以如果已经创建了用户，配置管理工具什么都不做。但是，如果我们无意或有意删除用户，配置管理工具将再次创建该用户。
它还支持将应用部署或安装到服务器上。因为如果您告诉配置管理工具下载您的应用，然后设置它并运行该应用，它会尝试这样做。
此外，如果您告诉配置管理工具关闭您的应用，然后下载并替换为新的软件包(如果可用)，然后重新启动应用，它会保持最新版本。
当然，有些用户希望仅在需要时更新应用，例如蓝绿色部署。配置管理工具也允许您触发手动执行。
Blue-green deployments is a technique that prepares the two sets of application stack, then only one environment (example: blue) is servicing to the production. Then when you need to deploy a new version of application, deploy to the other side (example: green) then perform the final test. Then if it works fine, change the load balancer or router setting to switch the network flow from blue to green. Then green becomes a production, while blue becomes dormant and waiting for the next version deployment.
# 基础设施即代码
配置管理工具不仅支持操作系统或虚拟机，还支持云基础架构。如果您需要在云上创建和配置网络、存储和虚拟机，则需要一些云操作。
但是配置管理工具有助于通过配置文件自动设置云基础架构，如下图所示:
![](img/00009.jpeg)
配置管理相对于维护操作手册**标准操作程序** ( **标准操作程序**)有一些优势。例如，使用 Git 等 **VCS** 维护配置文件，可以追溯环境设置如何变化的历史。
复制环境也很容易。例如，您需要一个额外的云环境。如果按照传统的方式(即阅读 SOP 文档来操作云)，总是会有潜在的人为错误和操作错误。另一方面，我们可以执行配置管理工具，快速自动地在云上创建环境。
Infrastructure as code may or may not be included in the CD process, because infrastructure replacement or update cost is higher than just replacing an application binary on the server.
# 管弦乐编曲
编排工具也被归类为配置管理工具之一。然而，在配置和分配云资源时，它更加智能和动态。例如，编排工具管理多个服务器资源和网络，然后当管理员想要增加应用实例时，编排工具可以确定可用的服务器，然后自动部署和配置应用和网络。
尽管编排工具超出了 SDLC 的范围，但当需要扩展应用和重构基础架构资源时，它有助于持续交付。
总的来说，软件开发生命周期已经发展到通过几个过程、工具和方法实现快速交付。最终，软件(服务)交付需要几个小时到一天的时间。与此同时，软件架构和设计也在发展，以实现大型和丰富的应用。
# 微服务的趋势
基于目标环境和应用的规模，软件架构和设计也在不断发展。
# 模块化程序设计