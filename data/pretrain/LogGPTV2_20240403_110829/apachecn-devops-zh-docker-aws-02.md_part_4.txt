现在，您已经了解了如何配置 todobackend 应用来支持 MySQL 数据库，让我们修改 Docker Compose 文件以使用`db`服务:
```
version: '2.4'
services:
  test:
    build:
      context: .
      dockerfile: Dockerfile
      target: test
  release:
    build:
      context: .
      dockerfile: Dockerfile
    ports:
      - 8000:8000
 depends_on:
 db:
 condition: service_healthy
    environment:
 DJANGO_SETTINGS_MODULE: todobackend.settings_release
 MYSQL_HOST: db
 MYSQL_USER: todo
 MYSQL_PASSWORD: password
    command:
      - uwsgi
      - --http=0.0.0.0:8000
      - --module=todobackend.wsgi
      - --master
  db:
    image: mysql:5.7
 healthcheck:
 test: mysqlshow -u $$MYSQL_USER -p$$MYSQL_PASSWORD
      interval: 3s
      retries: 10
    environment:
      MYSQL_DATABASE: todobackend
      MYSQL_USER: todo
      MYSQL_PASSWORD: password
      MYSQL_ROOT_PASSWORD: password
```
我们首先在`release`服务上配置`environment`属性，该属性配置将被传递给容器的环境变量。请注意，对于 Django 应用，您可以配置`DJANGO_SETTINGS_MODULE`环境变量来指定应该使用哪些设置，这允许您使用添加了 MySQL 支持的`settings_release`配置。该配置还允许您使用环境变量来指定 MySQL 数据库设置，该设置必须与`db`服务的配置相匹配。
我们接下来为`release`服务配置`depends_on`属性，它描述了服务可能具有的任何依赖关系。因为应用在启动之前必须与数据库有工作连接，所以我们指定了一个条件`service_healthy`，这意味着在 Docker Compose 尝试启动`release`服务之前，`db`服务必须已经通过 Docker 运行状况检查。要在`db`服务上配置 Docker 运行状况检查，我们配置`healthcheck`属性，该属性将配置 Docker 运行由`db`服务容器内的`test`参数指定的命令来验证服务运行状况，并每 3 秒重试该命令 10 次，直到`db`服务运行状况良好。对于这个场景，我们使用`mysqlshow`命令，一旦 MySQL 进程接受连接，该命令将只返回一个成功的零退出代码。因为 Docker Compose 会将单个美元符号解释为它应该在 Docker Compose 文件中评估和替换的环境变量，所以我们用双美元符号来转义`test`命令中引用的环境变量，以确保该命令会真正执行`mysqlshow -u $MYSQL_USER -p$MYSQL_PASSWORD`。
此时，我们可以通过在运行`release`服务的终端中按下 *Ctrl* + *C* 并键入`docker-compose down -v`命令(该`-v`标志也将删除 Docker Compose 创建的任何卷)，然后执行`docker-compose up release`命令来测试当前环境的变化:
```
> docker-compose down -v
Removing todobackend_release_1 ... done
Removing todobackend_test_run_1 ... done
Removing network todobackend_default
> docker-compose up release Creating network "todobackend_default" with the default driver
Pulling db (mysql:5.7)...
5.7: Pulling from library/mysql
683abbb4ea60: Pull complete
0550d17aeefa: Pull complete
7e26605ddd77: Pull complete
9882737bd15f: Pull complete
999c06ab75f6: Pull complete
c71d695f9937: Pull complete
c38f847c1491: Pull complete
74f9c61f40bf: Pull complete
30b252a90a12: Pull complete
9f92ebb7da55: Pull complete
90303981d276: Pull complete
Digest: sha256:1203dfba2600f140b74e375a354b1b801fa1b32d6f80fdee5f155d1e9f38c841
Status: Downloaded newer image for mysql:5.7
Creating todobackend_db_1 ... done
Creating todobackend_release_1 ... done
Attaching to todobackend_release_1
release_1 | *** Starting uWSGI 2.0.17 (64bit) on [Thu Jul 5 07:45:38 2018] ***
release_1 | compiled with version: 6.4.0 on 04 July 2018 11:33:09
release_1 | os: Linux-4.9.93-linuxkit-aufs #1 SMP Wed Jun 6 16:55:56 UTC 2018
...
... *** uWSGI is running in multiple interpreter mode ***
release_1 | spawned uWSGI master process (pid: 1)
release_1 | spawned uWSGI worker 1 (pid: 7, cores: 1)
release_1 | spawned uWSGI http 1 (pid: 8)
```
在前面的示例中，请注意 Docker Compose 会自动提取通过`image`属性配置的 MySQL 5.7 映像，然后启动`db`服务。这将需要 15-30 秒，在此期间，Docker Compose 正在等待 Docker 返回`db`服务健康的报告。每 3 秒钟，Docker 运行健康检查中配置的`mysqlshow`命令，持续重复该操作，直到该命令返回一个成功的退出代码(即`0`的退出代码)，此时 Docker 会将容器标记为健康。只有在这一点上，Docker Compose 才会启动`release`服务，如果`db`服务完全运行，该服务应该会成功启动。
如果你再次浏览`http://localhost:8000/todos`，你会发现即使我们添加了一个`db`服务，并且配置了发布服务来使用这个数据库，你仍然会收到你在之前的截图中看到的`no such table`错误。
# 运行数据库迁移
我们仍然收到关于缺少表的错误，原因是我们没有运行数据库迁移来建立应用期望的数据库模式。回想一下，我们在本地使用`python3 manage.py migrate`命令来运行这些迁移，因此我们需要在 Docker 环境中执行同样的操作。
如果通过按下 *Ctrl* + *C* 并运行`docker-compose down -v`来再次破坏环境，一种方法是使用`docker-compose run`命令:
```
> docker-compose down -v ...
...
> docker-compose run release python3 manage.py migrate
Creating network "todobackend_default" with the default driver
Creating todobackend_db_1 ... done
Traceback (most recent call last):
  File "/usr/lib/python3.6/site-packages/mysql/connector/network.py", line 515, in open_connection
    self.sock.connect(sockaddr)
ConnectionRefusedError: [Errno 111] Connection refused
...
...
```
在前面的示例中，请注意，当您使用`docker-compose run`命令时，Docker Compose 不支持我们之前在运行`docker-compose up`时观察到的运行状况检查行为。这意味着您可以采取两种方法之一:
*   确保您先运行`docker-compose up release`，然后运行`docker-compose run python3 manage.py migrate` -这将使您的应用处于一种状态，在迁移完成之前，它会引发错误。
*   将迁移定义为独立的服务，称为`migrate`，依赖于`db`服务，调出`migrate`服务，该服务将执行迁移并退出，然后调出应用。
虽然您很快就会看到，选项 1 更简单，但选项 2 更健壮，因为它确保数据库在启动应用之前处于正确的状态。当我们必须在 AWS 中协调运行数据库迁移时，选项 2 也与我们将在本书后面采用的方法一致，因此我们现在将实现选项 2。
以下示例演示了我们需要进行的更改，以便将迁移作为单独的服务运行:
```
version: '2.4'
services:
  test:
    build:
      context: .
      dockerfile: Dockerfile
      target: test
  release:
    build:
      context: .
      dockerfile: Dockerfile
    environment:
      DJANGO_SETTINGS_MODULE: todobackend.settings_release
      MYSQL_HOST: db
      MYSQL_USER: todo
      MYSQL_PASSWORD: password
  app:
 extends:
 service: release
 depends_on:
 db:
 condition: service_healthy
 ports:
 - 8000:8000
 command:
 - uwsgi
 - --http=0.0.0.0:8000
 - --module=todobackend.wsgi
 - --master
  migrate:
 extends:
 service: release
 depends_on:
 db:
 condition: service_healthy
 command:
 - python3
 - manage.py
 - migrate
 - --no-input
  db:
    image: mysql:5.7
    healthcheck:
      test: mysqlshow -u $$MYSQL_USER -p$$MYSQL_PASSWORD
      interval: 3s
      retries: 10
    environment:
      MYSQL_DATABASE: todobackend
      MYSQL_USER: todo
      MYSQL_PASSWORD: password
      MYSQL_ROOT_PASSWORD: password
```
在前面的例子中，注意除了`migrate`服务，我们还增加了一个新的服务，叫做`app`。原因是我们希望从`release`服务(由`extends`参数定义)扩展迁移，这样它将继承发布映像和发布服务设置，但是，扩展另一个服务的一个限制是您不能扩展具有`depends_on`语句的服务。这要求我们将`release`服务更多地用作其他服务继承的基础配置，并将`depends_on`、`ports`和`command`参数从发布服务转移到新的`app`服务。
有了这种配置，我们可以拆除环境并建立新的环境，如下例所示:
```
> docker-compose down -v ...
...
> docker-compose up migrate
Creating network "todobackend_default" with the default driver
Building migrate
Step 1/24 : FROM alpine AS test
 ---> 3fd9065eaf02
...
...
Successfully built 5b20207e3e9c
Successfully tagged todobackend_migrate:latest
WARNING: Image for service migrate was built because it did not already exist. To rebuild this image you must use `docker-compose build` or `docker-compose up --build`.
Creating todobackend_db_1 ... done
Creating todobackend_migrate_1 ... done
Attaching to todobackend_migrate_1
migrate_1 | Operations to perform:
migrate_1 | Apply all migrations: admin, auth, contenttypes, sessions, todo
migrate_1 | Running migrations:
migrate_1 | Applying contenttypes.0001_initial... OK
migrate_1 | Applying auth.0001_initial... OK
migrate_1 | Applying admin.0001_initial... OK
migrate_1 | Applying admin.0002_logentry_remove_auto_add... OK
migrate_1 | Applying contenttypes.0002_remove_content_type_name... OK
migrate_1 | Applying auth.0002_alter_permission_name_max_length... OK
migrate_1 | Applying auth.0003_alter_user_email_max_length... OK
migrate_1 | Applying auth.0004_alter_user_username_opts... OK
migrate_1 | Applying auth.0005_alter_user_last_login_null... OK
migrate_1 | Applying auth.0006_require_contenttypes_0002... OK
migrate_1 | Applying auth.0007_alter_validators_add_error_messages... OK
migrate_1 | Applying auth.0008_alter_user_username_max_length... OK
migrate_1 | Applying auth.0009_alter_user_last_name_max_length... OK
migrate_1 | Applying sessions.0001_initial... OK
migrate_1 | Applying todo.0001_initial... OK
todobackend_migrate_1 exited with code 0
> docker-compose up app
Building app
Step 1/24 : FROM alpine AS test
 ---> 3fd9065eaf02
...
...
Successfully built 5b20207e3e9c
Successfully tagged todobackend_app:latest
WARNING: Image for service app was built because it did not already exist. To rebuild this image you must use `docker-compose build` or `docker-compose up --build`.
todobackend_db_1 is up-to-date
Creating todobackend_app_1 ... done
Attaching to todobackend_app_1
app_1 | *** Starting uWSGI 2.0.17 (64bit) on [Thu Jul 5 11:21:00 2018] ***
app_1 | compiled with version: 6.4.0 on 04 July 2018 11:33:09
app_1 | os: Linux-4.9.93-linuxkit-aufs #1 SMP Wed Jun 6 16:55:56 UTC 2018
...
...
```
在前面的示例中，请注意 Docker Compose 为每个服务构建新的映像，但是这些构建完成得非常快，因为它们与发布映像相同，因为每个服务都扩展了`release`服务。当您启动`migrate`服务等待`db`服务运行状况检查通过时，您将观察到 15-30 秒的延迟，然后运行迁移，创建 todobackend 应用期望的适当模式和表。启动`app`服务后，您应该能够与 todobackend API 交互，而不会收到任何错误:
```
> curl -s localhost:8000/todos | jq
[]
```