}
$ go build quoteargs.go
$ ./quoteargs one "two three" four\ five
["one" "two three" "four five"]
特别是对于这类一次性运行的程序，我们希望尽快的构建并运行它。 命令实际上是结
go run
合了构建和运行的两个步骤：
$ go run quoteargs.go one "two three" four\ five
["one" "two three" "four five"]
工具 386
gopl
(译注：其实也可以偷懒，直接go run *.go )
第一行的参数列表中，第一个不是以 结尾的将作为可执行程序的参数运行。
.go
默认情况下， 命令构建指定的包和它依赖的包，然后丢弃除了最后的可执行文件之
go build
外所有的中间编译结果。依赖分析和编译过程虽然都是很快的，但是随着项目增加到几十个
包和成千上万行代码，依赖关系分析和编译时间的消耗将变的可观，有时候可能需要几秒
种，即使这些依赖项没有改变。
命令和 命令很相似，但是它会保存每个包的编译成果，而不是将它们都
go install go build
丢弃。被编译的包会被保存到$GOPATH/pkg目录下，目录路径和 src目录路径对应，可执行
程序被保存到$GOPATH/bin目录。（很多用户会将$GOPATH/bin添加到可执行程序的搜索列
表中。）还有， 命令和 命令都不会重新编译没有发生变化的包，这可以
go install go build
使后续构建更快捷。为了方便编译依赖的包， 命令将安装每个目标所依赖的包。
go build -i
因为编译对应不同的操作系统平台和CPU架构， 命令会将编译结果安装到GOOS
go install
和GOARCH对应的目录。例如，在Mac系统，golang.org/x/net/html包将被安装到
$GOPATH/pkg/darwin_amd64目录下的golang.org/x/net/html.a文件。
针对不同操作系统或CPU的交叉构建也是很简单的。只需要设置好目标对应的GOOS和
GOARCH，然后运行构建命令即可。下面交叉编译的程序将输出它在编译时操作系统和CPU
类型：
gopl.io/ch10/cross
func main() {
fmt.Println(runtime.GOOS, runtime.GOARCH)
}
下面以64位和32位环境分别执行程序：
$ go build gopl.io/ch10/cross
$ ./cross
darwin amd64
$ GOARCH=386 go build gopl.io/ch10/cross
$ ./cross
darwin 386
有些包可能需要针对不同平台和处理器类型使用不同版本的代码文件，以便于处理底层的可
移植性问题或为一些特定代码提供优化。如果一个文件名包含了一个操作系统或处理器类型
名字，例如net_linux.go或asm_amd64.s，Go语言的构建工具将只在对应的平台编译这些文
件。还有一个特别的构建注释参数可以提供更多的构建过程控制。例如，文件中可能包含下
面的注释：
工具 387
gopl
// +build linux darwin
在包声明和包注释的前面，该构建注释参数告诉 只在编译程序对应的目标操作系统
go build
是Linux或Mac OS X时才编译这个文件。下面的构建注释则表示不编译这个文件：
// +build ignore
更多细节，可以参考go/build包的构建约束部分的文档。
$ go doc go/build
10.7.4. 包文档
Go语言的编码风格鼓励为每个包提供良好的文档。包中每个导出的成员和包声明前都应该包
含目的和用法说明的注释。
Go语言中的文档注释一般是完整的句子，第一行通常是摘要说明，以被注释者的名字开头。
注释中函数的参数或其它的标识符并不需要额外的引号或其它标记注明。例如，下面是
fmt.Fprintf的文档注释。
// Fprintf formats according to a format specifier and writes to w.
// It returns the number of bytes written and any write error encountered.
func Fprintf(w io.Writer, format string, a ...interface{}) (int, error)
Fprintf函数格式化的细节在fmt包文档中描述。如果注释后仅跟着包声明语句，那注释对应整
个包的文档。包文档对应的注释只能有一个（译注：其实可以有多个，它们会组合成一个包
文档注释），包注释可以出现在任何一个源文件中。如果包的注释内容比较长，一般会放到
一个独立的源文件中；fmt包注释就有300行之多。这个专门用于保存包文档的源文件通常叫
doc.go。
好的文档并不需要面面俱到，文档本身应该是简洁但不可忽略的。事实上，Go语言的风格更
喜欢简洁的文档，并且文档也是需要像代码一样维护的。对于一组声明语句，可以用一个精
炼的句子描述，如果是显而易见的功能则并不需要注释。
在本书中，只要空间允许，我们之前很多包声明都包含了注释文档，但你可以从标准库中发
现很多更好的例子。有两个工具可以帮到你。
首先是 命令，该命令打印其后所指定的实体的声明与文档注释，该实体可能是一个
go doc
包：
工具 388
gopl
$ go doc time
package time // import "time"
Package time provides functionality for measuring and displaying time.
const Nanosecond Duration = 1 ...
func After(d Duration)  {{join .Imports " "}}' compress/...
compress/bzip2 -> bufio io sort
compress/flate -> bufio fmt io math sort strconv
compress/gzip -> bufio compress/flate errors fmt hash hash/crc32 io time
compress/lzw -> bufio errors fmt io
compress/zlib -> bufio compress/flate errors fmt hash hash/adler32 io
译注：Windows下有同样有问题，要避免转义字符串的干扰：
$ go list -f "{{.ImportPath}} -> {{join .Imports \" \"}}" compress/...
命令对于一次性的交互式查询或自动化构建或测试脚本都很有帮助。我们将在11.2.4
go list
节中再次使用它。每个子命令的更多信息，包括可设置的字段和意义，可以用
go help
命令查看。
list
在本章，我们解释了Go语言工具中除了测试命令之外的所有重要的子命令。在下一章，我们
将看到如何用 命令去运行Go语言程序中的测试代码。
go test
练习 10.4： 创建一个工具，根据命令行指定的参数，报告工作区所有依赖包指定的其它包集
合。提示：你需要运行 命令两次，一次用于初始化包，一次用于所有包。你可能需
go list