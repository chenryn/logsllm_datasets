R
T
Shannon’s Entropy
0°C
20°C
3.5712
30°C
-0.4702
10°C
-0.0811
40°C
-0.5089
-0.8141
+0.7952% +0.1268% 94.4199% +0.7347% +1.2721%
-0.1589% 47.1771% +0.4278% +0.7836%
-0.6324%
-1.0417% +0.0001% 45.8333% +0.0001% -1.0417%
+2.0833% +0.0001% 49.9999% +3.1250% +3.1250%
-0.0008
+0.0022
+0.0001
-0.0001
0.981
>0.9999
-0.0019
-0.0001
-0.0007
-0.0001
Table 6: RingRAM is robust against thermal variation.
Test
sha-256
sha-512
aes-128
aes-192
aes-256
rsa-1024
rsa-2048
average
Linux Default
p-value
RingRAM
overhead
p-value
overhead
σ/µ
0.37%
0.45%
1.17%
0.15%
0.18%
0.00%
0.00%
0.34%
0.13%
0.00%
0.52%
-0.05%
0.12%
0.00%
0.00%
0.19%
Table 7: RISC-V Openssl speed test results
0.01%
0.13%
-0.13%
0.03%
0.08%
0.00%
0.00%
0.00%
0.12
0.33
0.17
0.33
0.06
-
-
0.15
σ/µ
0.26%
0.37%
1.25%
0.20%
0.23%
0.00%
0.00%
0.41%
0.39
0.15
0.28
0.24
0.23
-
-
0.48
9 RINGRAM’S THERMAL STABILITY
As mentioned in §2, a significant source of systematic run-time
variation is the temperature. Temperature has a known deleterious
effect on the performance of ROs due to their inability to filter-
out systematic run-time variation (especially for RO TRNGs). To
eliminate uncontrolled thermal deviations from contaminating our
results in earlier experiments, we used a Test Equity temperature
and humidity chamber (Model 123H) to fix the temperature 20°C.
While the cross-coupled nature of RingRAM should filter-out
systematic run-time variation, making it robust to temperature
and voltage changes, we experimentally verify this assumption.
To do so, we re-run earlier experiments, except this time, we vary
temperature between 0°C and 50°C, in 10°C increments. For the PUF
validation experiments, we use the original 20°C responses as our
reference response and compare against responses taken at other
temperatures. The results of these experiments, shown in Table 6,
confirm that RingRAM is robust against even large temperature
variations. We expect similar trends to hold for discrete and ASIC
implementations.
10 IMPROVING SYSTEM SECURITY
In this section, we explore how system designers use RingRAM
to improve overall system security. Specifically, we implement a
RISC-V-based Linux system that leverages RingRAM to fix security
weaknesses brought on by slow True Random Number Generators
(TRNGs) and persistent insecure coding practices: (1) an Internet-
of-Things (IoT) system designer adds RingRAM to leverage its high
rate of entropy to quickly seed Linux’s pseudorandom number
generator after power-on and (2) a system designer replaces Linux’s
(pseudo)random device completely with RingRAM and even poorly-
coded software becomes more secure. From a high level, these tests
show how valuable RingRAM is to overall system security and how
it fits with IoT-class systems.
The full-system prototype is a System-on-Chip (SoC) centered
on the 64-bit Rocket RISC-V implementation [2]. The Rocket core
connects to peripherals through a 64-bit AXI bus [2]. We create a
64-cell RingRAM module that connects to the processor bus using
a AXI-Lite interface [44] that exposes two 32-bit Physical Unclon-
able Function (PUF) and two 32-bit TRNG registers. The SoC is
implemented on the Artix-7 FPGA used in §8, but with a microSD
expansion adaptor [14] that we need to store the boot image and
other software. Software executes from 256MB DDR3. The resulting
SoC consumes 84.6% of the FPGA’s LUTs, with RingRAM incurring
an additional 0.8% overhead; RingRAM has no effect on power or
maximum frequency.
On this hardware platform, we run the busybox [5] user space
and Linux 5.5.2. To enable user mode software access to our regis-
ters, we create a device driver that uses memory-mapped I/O to ac-
cess RingRAM’s registers and exposes the returned PUF and TRNG
responses as a file in the /proc file system [24]. For experiments
involving RingRAM, we replace Linux’s default /dev/random and
/dev/urandom devices with our own device driver. In doing this,
RingRAM services all software requests for (pseudo)random
values—increasing security without software modification.
10.1 Filling the Boot-time Entropy Hole
The IoT era brings with it a new set of security concerns. While
many of these concerns are addressable using traditional crypto-
graphic primitives, such primitives require truly random numbers
that are infeasible for an attacker to guess. As explained in §2, op-
erational chaos is the only viable source for such numbers. The
focused and embedded nature of many IoT devices means that there
are few interfaces to operational chaos, dramatically limiting the
rate of entropy. Previous work shows the consequence of this slow
accumulation of entropy is the use of duplicate and weak keys
(e.g., .75% of TLS certs. and 1% of SSH DSA, respectively), because
software requires randomness before it is available [19, 20, 25]; this
is referred to as the boot-time entropy hole [20].
To show that RingRAM effectively fills the boot-time entropy
hole, we apply our RingRAM-enhanced system to the findings of
the “Mining Ps and Qs” paper. There, the authors show that it takes
roughly 66 seconds for 192-bits of true randomness to accumu-
late so that Linux’s random device (/dev/random) can seed the
pseudorandom device (/dev/urandom). Insecurity arises when a
security-critical program (e.g., sshd) pulls from the pseudorandom
device for secret generation before it has been influenced by the ran-
dom device (e.g., within the first 5 seconds post-boot-up in the case
of sshd). Without RingRAM, the limited sources of entropy (e.g.,
clock skew) result in a deterministic result from the pseudorandom
device—eliminating security guarantees. Measurements from our
SoC show that, with RingRAM, 192-bits of true randomness is avail-
able in 77.4µs. Thus, by the time sshd requests data from the
pseudorandom device, it could be influenced by the random
device >60,000 times, making the returned results—and resulting
key—unique and non-deterministic.
10.2 Taking the pseudo out of random
While /dev/random provides a source of true randomness, it tra-
ditionally comes at the cost of halting the execution of programs
670ACSAC ’21, December 6–10, 2021, Virtual Event, USA
Michael Moukarzel and Matthew Hicks
that access it while it accumulates sufficient randomness to service
the request. This is why operating systems present an alternative
interface that provides a best-effort source of apparent randomness;
in Linux, programs access this interface through /dev/urandom.
To eliminate blocking, /dev/urandom turns a small amount of true
randomness from /dev/random into an unbounded amount of ap-
parent randomness. Because the outputs from /dev/urandom are
based—deterministically—on a small amount of true randomness,
any security based on them is limited to the length and secrecy
of the seed value from /dev/random. While Linux documentation
states that /dev/urandom must not be used for security-critical
applications, many (including openssl) use it because of its more
convenient interface and due to developer ignorance or distrust of
black-box TRNGs. Work over the years shows that the pseudoran-
dom generators that underpin /dev/urandom have flaws that limit
their security beyond what is expected [10]. Instead of trying to
chase the perfect pseudorandom number generator implementation,
we create a blocking-free TRNG using RingRAM. This eliminates
the need for /dev/urandom,15 reducing the trusted computing base
and automatically eliminating programmer errors.
To show that our /dev/urandom-free prototype has no ill-effects
on software, we boot Linux and run openssl’s built-in benchmark
suite speedtest on the most popular cryptographic algorithms
SHA-2, AES, and RSA, using the most common key sizes. We per-
formed 20 trials of each configuration to account for noise from the
operating system and timing measurement. Note that by replacing
Linux’s (pseudo)random devices, all software that requires random-
ness uses RingRAM, not just openssl. The system and openssl
perform—problem free—for the entire evaluation. Table 7 provides
both the running time of RingRAM-based and the default sources
of randomness relative to openssl’s CRNG pseudorandom genera-
tor. These results show that RingRAM provides a TRNG that is as
fast as pseudorandom generators, opening the door to TRNG-only
systems.
11 RELATED WORK
While Ring Oscillators (ROs) and Static Random Access Memory
(SRAM) are the most common and well-studied foundations for
a unified hardware security primitive, researchers have explored
other circuits to capture manufacturing and operational chaos. In
general, there are two broad classes of approach: digital and analog.
ROs and SRAM are digital approaches as they are comprised of
digital gates whose output value encodes chaos. Alternatively, a
Phase Locked Loop is an analog system that directly measures
chaos in the analog domain. For Internet-of-Things deployments
that are often highly-constrained and low-cost, digital systems are
preferred since they do not require special purpose blocks while
building a chip. Here we cover some of the more popular RO and
SRAM alternatives.
Self Timed Ring (STR)-based TRNGs [9] and PUFs [31] are an
extension to the base RO design, aimed at increasing entropy rate.
They replace an inverter with a Muller-C+inverter combination.
Muller-C gates are unique in that both inputs must be equal to set
or reset its outputs, maintaining its state otherwise. By using dual
15We keep it around, because software expects it. It is now just an alias for /dev/random
inputs, multiple propagation loops are created that run simultane-
ously, allowing them designs to capture operational chaos more
efficiently, but with a significantly higher overhead cost compared
to ROs—making one of its weak points worse; when area overhead
is accounted for, the benefit STRs over ROs disappears.
Phase Locked Loops (PLL) are built-in analog components that
provide on-chip clock generation. To guarantee the reliability of
the output frequency, PLLs have built-in control circuity that dy-
namically adjusts a Voltage Controlled Oscillator (VCO) [18]. This
mitigates all manufacturing and systematic operational variation,
but operational chaos remains as jitter in the output frequency. PLL
based TRNGs capture jitter using a series of cascading Flip-Flops
running off the PLL’s input source, effectively creating a metastable
state between the input and output frequencies [16, 38, 48]. Com-
pared to RO’s, PLL based TRNGs minimize area overhead by re-
utilizing included PLLs. Unfortunately, we are unaware of any
PLL-based PUFs and it is not clear how to create one.
Metastability is an unstable equilibrium state in which a devices
may persists for an unbound time [8]. Given that operational chaos
influences the outcome of a metastable state [42], they are viable
foundations for TRNGs. At a high level, both SRAM and RingRAM
are metastability based, but their PUF-oriented natures highlights
the primary challenge with metastability-based primitives: creating
a metastable state. Unlike SRAM and RingRAM which leverage
many samples of simple hardware loops, another class of designs
are self-tuning in that they dynamically alter circuit parameters to
filter systematic variation [26, 29, 39]. While this increases entropy,
it adds complexity, and prevents them from serving as a PUF. An-
other approach is to capture chaos in the time it takes to resolve a
metastable state [37], as opposed to the final value. While unique,
recent work shows that the metastable settling time is susceptible
to systematic operation variation, leaving TRNGs open to attack [7].
RingRAM shows that stable-value focused metastable-base prim-
itives are the right direction, but choosing between PUFs and
TRNGs is a false choice, a designer can use our enhancements
to select the desired balance for their application.
12 CONCLUSION
RingRAM is a hardware security primitive, composed of simple
logic gates, that is readily implementable using a range of hard-
ware technologies. Our experiments show that RingRAM provides
the necessary foundation for both TRNGs and PUFs. The most
important aspect of RingRAM is that it combines the advantages
of existing hardware security primitives, but without their draw-
backs, making RingRAM more practical, deployable, and secure. We
highlight RingRAM’s deployability and benefit to system security
showing how, when added to a Linux-based System-on-Chip, it
increases software security.
The power of RingRAM comes from a focus on chaos, both
static and dynamic. A hardware security primitive must harness
dynamic chaos to serve as a base for TRNGs. A hardware security
primitive must harness static chaos to serve as a base for PUFs.
By understanding available sources of chaos, how they impact
hardware, and how existing primitives measure that chaos, it is
possible to design a single, ring-based, hardware security primitive
to rule them all.
671RingRAM: A Unified Hardware Security
Primitive for IoT Devices that Gets Better with Age
ACKNOWLEDGMENTS
We thank the anonymous reviewers for their feedback and sugges-
tions that enhanced the quality of this work. The project depicted is
sponsored by the Defense Advanced Research Projects Agency. The
content of the information does not necessarily reflect the position
or the policy of the Government, and no official endorsement should
be inferred. Approved for public release; distribution is unlimited.
REFERENCES
[1] Ilia A. Bautista Adames, Jayita Das, and Sanjukta Bhanja. 2016. Survey of emerg-
ing technology based physical unclonable funtions. In International Great Lakes
Symposium on VLSI (GLSVLSI). 317–322. https://doi.org/10.1145/2902961.2903044
ISSN: null.