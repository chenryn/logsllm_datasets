λ
= ln(N + 1).
(1)
The bound was derived by considering a small portion of
the object at some arbitrary time oﬀset x. For an arbitrary
client request that arrives at time t, this portion of the object
must be delivered no later than time t + x. If the portion
is multicast at time t + x, then (at best) those clients that
request the ﬁle between time t and t + x, can receive the
same multicast. Since the average time from t + x until the
next request for the object is 1/λ, the minimum frequency
of multicasts of the portion at time oﬀset x is 1/(x + 1/λ),
which yields the above bound. Note that the required server
1The “required server bandwidth” for an object is deﬁned as
the average server bandwidth used by the speciﬁed protocol.
This bandwidth is measured in units of the media play rate.
bandwidth for delivery of multiple objects can be derived by
summing the bandwidth required for each object, weighted
by the relative playback rate.
The bound in equation (1) assumes that the client data
rate is unbounded and request arrivals are Poisson as mea-
sured in [2]. As described in [10], the latter assumption can
be relaxed to cover a wide class of arrival processes (includ-
ing those with heavy-tailed interarrival time distributions),
yielding a similar analytic result with diﬀerence bounded by
a constant independent of λ. Note also that, as illustrated
in [12], the Poisson arrival assumption yields conservative
server bandwidth estimates for heavy tailed interarrival time
distributions, since greater burstiness in the arrival process
causes clients to be merged more quickly.
The bound in equation (1) can be extended by adding a
start-up delay d to the minimum time between multicasts
of the portion at position x (i.e., add d to the denomi-
nator of the integrated function). For periodic broadcast
schemes, which accommodate arbitrary (i.e., essentially inﬁ-
nite) client arrival rate, this yields the following lower bound
on required server bandwidth, as shown in [3]:
(cid:2) T
0
Bperiodic−bcast
minimum
=
dx
x + d = ln(
T
d + 1).
(2)
2.4 Goals of the New Streaming Protocols
The key goals of the new delivery protocols developed in
Sections 4 and 5 are:
• Convenient: Clients can begin playing the requested
media content after a tunably small start-up latency.
• Tolerant: The protocol should tolerate clients with
heterogeneous packet loss rates and transmission path
data rates.
• Reliable: Clients that have a packet loss rate up to a
tunable value should be able to reconstruct each media
packet prior to its play point.
• Eﬃcient: The protocol should require minimal client
feedback, and, if possible, the total amount of data
each client receives should be minimal.
• Scalable: The protocol should allow streaming of con-
tent on-demand to large numbers of concurrent clients.
3. LOSS RECOVERY STRATEGIES
This section compares three basic strategies for packet loss
recovery for on-demand media streaming, namely: unicast
retransmission of lost packets, multicast retransmission of
lost packets, and multicast transmission of redundant data
that is computed using erasure codes. Server-based recovery
is assumed; at the cost of additional infrastructure and com-
plexity, distributed recovery architectures are also possible
and have been extensively explored [21].
The conclusion that is drawn from the comparisons be-
low is consistent with conclusions drawn for the reliable
single-stream (e.g., live) multicast setting [23]. That is, era-
sure codes provide a better solution. However, the analy-
sis quantiﬁes the beneﬁts of erasure codes with respect to
the server load imposed by error recovery for scalable on-
demand streaming. In the process, new fundamental lower
bounds on required server bandwidth are derived that will
be applied later in the paper.
3.1 Qualitative Discussion
The three basic approaches can be compared qualitatively
along at least three dimensions, namely:
implementation
complexity, start-up delay, and scalability. Regarding im-
plementation complexity, the use of erasure codes entails the
overhead of encoding and decoding the data, but approaches
based on retransmission must handle unpredictable retrans-
mission requests and feedback implosion (e.g., [21]).
The start-up delay is deﬁned as the time from when a
client requests a media object, until the client can begin
playback. A retransmission-based approach must have suf-
ﬁcient start-up delay to allow for clients to request retrans-
missions and for retransmitted data to be successfully re-
ceived prior to its play point. In an approach based on era-
sure codes, media data is coded/decoded in coarse grained
blocks, and, further, these blocks may be interleaved during
transmission so as to reduce sensitivity to burst losses. The
start-up delay must be suﬃcient to allow time for each en-
tire block to be received and decoded at the client. In either
case, the start-up delay requirement is additive with other
start-up delay components, such as that required to deal
with network jitter. One might expect total start-up delays
to be of similar magnitude in both approaches, but the de-
lay may be more easily estimated for an approach that uses
erasure codes and a given interleaved transmission schedule.
Scalability concerns how the server bandwidth required to
reliably deliver an object on-demand must increase as a func-
tion of the object request rate and client packet loss rates.
For multicast streaming, diﬀerent clients experience diﬀer-
ent packet losses, and the alternative packet loss recovery
schemes diﬀer with respect to eﬀective sharing of redundant
data transmissions, and thus with respect to server band-
width requirements. Multicast retransmissions require the
server to resend only one copy of data that multiple clients
have not received, but other clients may receive more data
than they need to recover from their own losses. Multi-
cast transmission of redundant data computed using erasure
codes permits a single redundant packet to repair diﬀerent
losses for diﬀerent clients, which leads to the qualitative
notion that this approach may be more scalable than the
retransmission-based approaches.
3.2 Quantitative Scalability Bounds
The lower bounds on required server bandwidth for any
protocol that provides reliable on-demand streaming using
a speciﬁc packet recovery strategy build on the bounds for
no packet loss recovery reviewed in Section 2.3. The sim-
plest lower bound is for the case that erasure codes are used
to recover from packet loss. In this case, each client must
receive an amount of (source and redundant) data that is
at least equal to the size of the object. If the average client
packet loss probability is p, in the best case each client has
average packet loss probability equal to p, and in this case
the server must transmit an amount of data per unit of time
1
1−p greater than when packet
(on average) that is a factor of
loss recovery is not performed (since on average 1 − p of the
packets will be received). Thus,
Bimmed−service,erasurecodes
=
1
1 − p ln(N + 1),
minimum
(3)
and
Bperiodic−bcast,erasurecodes
minimum
=
1
1 − p ln(
T
d + 1).
(4)
The above bounds are used to evaluate the proposed new
protocols in Sections 4 and 5.
For unicast retransmission of lost packets, if the object
playback duration is T minutes, the average amount of data
that is retransmitted per client, measured in playback min-
utes, is equal to pT
1−p . Given a client request rate of λ, the
server bandwidth required just for the retransmitted data
is λ pT
1−p . Using N = λT and the minimal server bandwidth
needed for the original packet transmissions from the bound
in equation (1), yields
Bimmed−service,unicast−retrans
= ln(N + 1) +
(5)
minimum
p
1 − p
N.
The derivation of the lower bound on required server band-
width in the case of multicast retransmissions of lost packets
is more complex and is provided in Appendix A. The bound
is not obtained in closed form, but can be solved numerically
for particular values of N and p. The bound for multicast
retransmissions assumes that each packet is lost with inde-
pendent probability p, although generalizations are possible.
The above bounds for unicast retransmissions of lost pack-
ets and for multicast transmission of redundant data using
erasure codes can be generalized for non-Poisson request ar-
rival processes as described in [10] for the previous bound
in equation (1). The bound for multicast retransmissions
is more complex, and at present a generalization for non-
Poisson arrival processes has not been formulated.
3.3 Numerical Results
Figure 3 presents the bounds derived above as functions of
the normalized client request rate N , for 15% average packet
loss probability (p). Smaller but similar and still signiﬁcant
diﬀerences in the bounds are observed for lower values of p.
Results in Sections 4 and 5 will show that the lower bound
for packet loss recovery using erasure codes can be closely
approached by actual streaming protocols, given that each
client has cumulative packet loss less than or equal to p for
each media segment received. The results in Figure 3 show
that even a “perfect” retransmission-based recovery strat-
egy would require more server bandwidth. Given the imple-
mentation diﬃculties for retransmission based approaches,
the new reliable broadcast protocols developed next use the
erasure coding strategy.
i
t
h
d
w
d
n
a
B
r
e
v
r
e
S
d
e
r
i
u
q
e
R
20
15
10
5
0
1
Unicast retransmissions
Multicast retransmissions
Multicast erasure codes
10
100
Client Request Rate, N
Figure 3: Bminimum for Immediate Service
& Packet Loss Recovery (15% Packet Loss)
4. RELIABLE PERIODIC BROADCAST
In this section we develop optimized periodic broadcast
protocols that (1) assume a maximum aggregate transmis-
sion rate to any given client that is a tunable parameter,
n, which may be less than (or greater than) twice the me-
dia play rate, and (2) enable clients with heterogeneous loss
probability to recover from packet loss. The notation used
in developing the RPB protocols is given in Table 2. To deal
with the fundamental challenges involved in designing such
optimized protocols, we proceed in four stages.
Section 4.1 develops a family of Optimized Periodic Broad-
cast (Optimized PB) protocols that do not support packet
loss recovery, but are optimized under the constraint that
clients receive each segment entirely before playing the be-
ginning of the segment. For a speciﬁed segment streaming
rate (r) and maximum number of streams that clients can
listen to concurrently (s), the Optimized PB protocols al-
low each client arriving at an arbitrary time to immediately
begin receiving the ﬁrst s segments of the media object. Fur-
thermore, under the stated constraints and assuming each
client begins playing the object (nearly) immediately after
receiving the ﬁrst segment, the Optimized PB protocols have
the maximum possible segment size increases. These pro-
tocols thus have the minimum possible start-up delay for
a given total server bandwidth, or the minimum possible
server bandwidth for a given start-up delay, under the stated
constraints. Performance of the new protocols is compared
against the previous skyscraper protocol.
Section 4.2 extends the Optimized PB protocols to create
a family of basic Reliable Periodic Broadcast (Basic RPB)
protocols. These protocols transmit data that has been en-
coded using erasure codes, enabling each client to recon-
struct each segment k prior to the time the beginning of
the segment needs to be played, assuming the fraction of
packets lost in transmitting segments 1 − k to the client is
not greater than a tunable parameter p which has the same
value for each segment. The Basic RPB protocols (1) allow
each client to immediately begin receiving the ﬁrst s seg-
ments of the media, and (2) have maximum segment size
increases for the given values of r, s, and p. Appendix B
contains an asymptotic analysis of the new Basic PB pro-
tocols which shows that the required server bandwidth can
approach the lower bound for reliable delivery using erasure
codes, as provided in equation (4). The analysis also sug-
gests that the protocols can approach the minimum possible
required server bandwidth under any client rate constraint.
Section 4.3 generalizes the Basic RPB protocols to al-
low each segment to have a diﬀerent associated cumulative
loss protection. These RPB protocols address the impact of
bursty packet losses on reliable reconstruction of earlier seg-
ments, and allow the estimation of cumulative packet loss
rate to be less conservative for later segments.
Heterogeneous client packet loss probabilities and situa-
tions that cause packet loss to exceed the speciﬁed upper
bound on packet loss are addressed in Section 4.4.
The proposed new family of Optimized PB protocols as-
sumes that (1) packet loss in any given transmission path
can be adequately addressed using local error concealment,
and (2) each segment must be entirely received before the
beginning of the segment is played. To minimize start-up
delay, the ﬁrst segment is repeatedly transmitted on a given
1000
4.1 Optimized PB Protocols
Table 2: Parameters of the new Optimized and Reliable Periodic Broadcast Protocols
Symbol Deﬁnition
K
r
s
n
lk
total number of segments
segment transmission rate (in units of the object playback bit rate)
assumed maximum number of streams that clients listen to concurrently
assumed maximum aggregate transmission rate to a client (in units of the object play rate), n = s × r > 1
length (playback duration) of the kth segment (relative to the length of segment 1)
multicast channel. Thus, a client arriving at an arbitrary
point in time can immediately begin listening to the chan-
nel for a period of time equal to the time it takes to transmit
the segment, as illustrated by the shaded portion of channel
1 in Figure 4. Also to minimize start-up delay, the client
will begin playing the ﬁrst segment when it is fully received.
The segment size progression is designed so that the client
will receive each other segment in its entirety just in time
to begin playing the segment. Each segment is repeatedly
transmitted on its own multicast channel, so that each client
arriving at an arbitrary point in time will be able to fully
receive and begin playing each media segment on time.
To derive the maximum possible segment size increases,
ﬁrst consider the case that each segment is delivered at the
object playback rate2 (i.e., r = 1) and multicast join oper-
ations have zero latency. In this case, if s is the assumed
maximum number of segment transmissions a client can si-
multaneously listen to, then each segment k, 1  s, the client will begin
receiving segment k at the time that segment k − s is just
received and starts playing. The client must ﬁnish receiving
segment k when segment k − 1 ﬁnishes playing. Thus, mea-
suring segment lengths relative to the ﬁrst segment length,
we have l1 = 1 and the following maximum sizes for other
segments:
k−1(cid:7)
j=1
lj
l1 +
k−1(cid:7)
j=k−s
lk =
1  s.
For a given number of server streams, K, used to multicast
the object, the total server bandwidth used is B = r×K and
.
the (deterministic) client start-up delay is equal to
(cid:1)
T
r
lk
Figure 4 illustrates the segment sizes and a transmission
schedule for the Optimized PB protocol with parameters
K = 6, r = 1, and s = 2. Note that (1) if r = 1 and s = 2,
the segment length progression is the Fibonacci series, and
as with other Optimized PB parameter settings, the segment
transmission schedule has no holes; (2) any alignment of
transmissions between any two channels is valid, and (3) two
2For simplicity, the development of the segment sizes as-
sumes constant bit rate content or a fully smoothed variable
bit rate (VBR) media stream with the requisite additional
start-up delay (if any). The segment sizes can be further op-
timized for VBR content that hasn’t been (fully) smoothed,
in which case each segment would be fully smoothed and
delivered in a constant bit rate stream, but calculation of
the optimized segment transmission rates and sizes is sub-
stantially more complex for this case.
(6)