Foundation 
(DFG)  priority 
SP 968/5-2, and the SFB 876 
permissions are 
the next access on such a 
so  that 
after a timeout, 
and read/write 
in a trap, which  is 
[32]. Pages are checksummed 
withdrawn 
page results 
and restore 
runtime-overhead 
(25 % to 5 3  %), and, although 
did not evaluate error-detection 
capabilit
that due to the coarse page-granularity 
mechanism, 
page permissions. This approach 
many errors are not detected. 
suffers from high 
used to verify the checksum 
(4 KiB) and the timeout 
the authors 
ies, we are convinced 
Another  technique 
is to retire  pages 
[4], [33]. We regard this approach 
it is only useful against 
permanent 
transients. 
that have seen errors 
because 
does not prevent 
as complementary, 
errors  and 
C. Software-based 
Memory Protection 
heap memory, which involves 
exposes 
which cannot 
of memory chunks. 
the Samurai 
Researchers investigated 
the dynamic heap for allocating 
Samurai [ 1 5] is a C/C++ dynamic 
This approach 
of failure, 
modified to use 
by a memory error. 
memory at runtime. 
when hit internally 
multi-threading, 
that uses replication 
have to be manually 
and updating 
allocator 
of the replicas. 
as single  point 
reliable 
memory allocator 
Applications 
API for access to reliable 
checking 
the  heap 
be recovered 
there is no support for 
a poor match for protecting 
an operating 
al. [ 1 4] describe a heap memory allocator 
machine that adds checksums 
checksums 
byte-code 
evaluation 
runtime overhead 
call-site analysis (see Section IV-D) avoids  such 
checks. Additionally, 
allocator 
and on the stack,  which 
are verified 
instructions 
shows less than 40 % error detection 
unnecessary checks. 
to each allocated 
on execution 
is common for operating 
by its very nature, 
does not protect 
due  to  many 
systems. 
Finally, 
Samurai 
which renders 
Chen et 
system. 
for a Java virtual 
object. These 
and generated 
(for example getf ie ld/putf ie ld). Their 
of particular 
at 32-57 % 
Our static 
unnecessary 
data stored in datalBSS segments 
any reliable  heap 
Compilers are also  an 
appealing 
target for transforming 
implementat
ions. 
of memory 
is unaddressed. Chang et al. [34]  apply 
file. Their compiler-implemented approach 
windows of vulnerability 
to protect 
the 
pointed 
out 
our work, that 
by essentially 
doubling 
values. Even at this high level of 
software into fault-tolerant 
AN-encoding 
recovery 
execution 
validation 
to detect errors 
plus AN-encoding 
space  for encoded 
non-fault-tolerant 
Fetzer et al. [ 1 6] use arithmetic 
(among other methods) 
the storage 
redundancy, 
triple-redundant 
register 
compared  to 
similar 
is, "between 
and use" [34] of replicas 
a value is copied" [34]. Code-transformation 
to- source compilers 
These approaches 
important 
studies  somehow 
of-concept 
for C/C++, being  far 
differs 
compiler that 
software-based 
of implementing 
duplicating 
of single-threaded 
in that we use the mature general-pur
source-to-source 
compiler 
special-purpose 
compilers
from complete 
are based  on 
variables 
"reinvent 
. 
user-level progra
ms. The 
the wheel" by implementing 
a proof­
(if ever) - a tedious 
task 
[35], [ 1 3] .  Our work 
allows us to focus on the implementation 
of 
EDMIERMs in the OS/application 
instead 
layer, 
and "before 
rules for  source­
have been proposed in [35], [ 1 3 ] ,  [36]. 
or even triplicating 
pose AspectC++ 
Fault tolerance 
advantage 
we are convinced 
invaluable 
However, 
in the OS/application 
of tailored 
applicat
that the fault-tolerance 
concerns 
ion-specific measures. 
layer bears the 
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 07:53:00 UTC from IEEE Xplore.  Restrictions apply. 
REFERENCES 
[ I ]  B. Schroeder, 
E. Pinheiro, 
field study," 
and W-D. Weber, "DRAM errors 
in Proceedings 
of the eleventh 
A large-scale 
joil1l conference on Measurement 
SIGMETRICS '09. New York, NY,  USA: 
and modeling 
ser. 
of computer systems, 
ACM, 2009, pp. 193-204. 
in the wild: 
international 
and V. Orgovan, 
"Cycles, 
cells and 
consumer 
[2] E. B. Nightingale, 
J. R. Douceur, 
analysisof 
an empirical 
hardware failures 
on a million 
platters: 
PCs," in ACM SIGOPSIEuroSys Int. Con! on Compltler 
(EuroSys 'lJ). New York, NY, USA: ACM, Apr. 2011 ,  pp. 343-356. 
"Cosmic rays 
and the 
[3] A.  A. Hwang, I.  A. Stefanovici, 
twice: understanding 
for system design," 
the nature of DRAM errors 
in 1 7th Int. Con! on Arch. Support for 
and Operating Systems (ASPLOS '12). New 
don't strike 
implications 
Programming 
York, NY, USA: ACM, 2012, pp. 1 11-122. 
and  B. Schroeder, 
Languages 
Systems 2011 
[4] D. Tang, P. Carruthers, 
Z. Totari, 
of memory  page  retirement 
effect 
in International 
DSN 2006, Jun.  2006, pp. 365-370. 
Conference on Dependable 
[5] e. Constantinescu, 
"Impact 
of VLSI circuits," 
ability 
Systems and Networks, 
of deep submicron 
in International 
2002. DSN 2002, 2002, pp. 205-209. 
technology 
on depend­
Conference on Dependable 
and M. W Shapiro, 
on system RAS against 
hardware 
"Assessment 
of the 
faults," 
2006. 
Systems and Networks, 
environment 
Transactions 
Nov. 1993. 
AspectC++," 
Produce Intelligent 
Knowledge-Based 
Systems, 
Secure Software, vol.  20,  no.  7,  pp. 
Special Issue on Techniques 
636-651 ,  2007. 
advice: 
"Generic 
to 
in AspectC++," 
On the 
in 
[22] D. Lohmann, G. Blaschke, 
and O. Spinczyk, 
of AOP with generative 
combination 
3rd Int. Con! on Generative 
(GPCE '04), ser. LNCS, G. Karsai and E.  Visser, 
Springer, 
[23] K. Czarnecki 
Oct. 2004, pp. 55-74. 
programming 
Generative 
Tools and Applications. 
and U. W. Eisenecker, 
AW,  May 2000. 
Programming and Component Engineering 
Programming. 
Methods, 
Eds., vol. 3286. 
[24] A. Alexander, 
C++ Design: Generic 
Applied, ser. C++ In-Depth. 
Programming 
200 1 .  
Adison-Wesley, 
and A. Shoshani, 
[25] E. G. Coffman, M. J .  Elphick, 
"System deadlocks," 
and Design Patlerns 
ACM Comput. Surv., vol. 3, no. 2, pp. 67-78, Jun. 197 1 .  
[26] W Kao, R .  K .  Iyer, and D .  Tang, "FINE: a fault injection 
the UNIX system  behavior 
for tracing 
on Software Engineering, 
under faults," 
IEEE 
vol. 19, no. I I ,  pp. 1 105-11 18, 
and monitoring 
and J Arlat, 
M. Rodriguez-Moreno, 
by fault injection,"  in 
[27] J-e. Fabre, F. Salles, 
COTS microkernels 
on Dependable 
Washington, 
[28] H. Madeira, 
Computing 
for Critical 
DC, USA: IEEE Computer 
R.  R. Some, F. Moreira, 
evaluation 
of the conference 
ser. DCCA '99. 
Proceedings 
Applications, 
Society, 
D. Costa, and D. A. Rennels, 
1999, pp. 25-. 
of a COTS system for space 
application," 
"Assessment 
of 
"Experimental 
Proc. of the 2002 Int. Con! on Dependable 
'02). Washington, 
DC, USA: IEEE Computer 
in 
(DSN 
Systems and Networks 
2002. 
Society, 
Dimitrijevic, 
"Susceptibility 
D. Lie, D.  D. 
of commodity 
IEEE Trans. Comput., 
[29] A. Messer, 
Mannaru, 
systems and software 
vol. 53, no. 12, pp. 1557-1568, Dec. 2004. 
P. Bernadat, 
A. Riska,  and 
G.  Fu, D. Chen,  Z. 
D. Milojicic, 
to memory soft errors," 
errors and software 
[30] X. Li, M. e. Huang, K. Shen, and L. Chu, "A realistic 
in 
of the 2010 USENIX annual technical 
of memory hardware 
Proceedings 
USENIX ATC' IO. Berkeley, CA, USA: USENIX Association, 2010. 
A. Davis, and N. P. 
for 
mechanisms 
in 39th Annual International 
Symposium 
R. Balsubramonian, 
and tiered reliability 
"LOT-ECC: Localized 
memory systems," 
Jouppi, 
commodity 
on Computer Architecture 
(ISCA), 2012, Jun. 2012, pp. 285-296. 
[31] A.  N. Udipi, N. Muralimanohar, 
conference, ser. 
system susceptibility," 
evaluation 
[32] D. Dopson, 
"SoftECC: 
a system for software 
memory integrity 
checking," 
Master's thesis, 
Massachusetts 
J. Neuhalfen, 
Institute 
l. Korb, O. Spinczyk, 
Sep. 2005. 
of Technology, 
and M. Engel, 
[33] H. Schirmeier, 
[6] R. Baumann, 
& Test of Computers, 
"Soft errors in advanced 
computer 
systems," 
IEEE Design 
vol. 22, no. 3, pp. 258-266, 
May 2005. 
of chipkill-correct 
ECC for 
and error correcting 
codes," Bell 
[7] R. W. Hamming, "Error detecting 
[8] T. J. Dell, "A white paper 
System Technical 
.!ournal, 
vol. 29, no. 2, pp. 147-160, 1 950. 
on the benefits 
IBM Whitepaper, 1997. 
[9]  D. H. 
Yoon and M. Erez, "Virtualized 
PC server main memory," 
In J 5th Int. Con! on Arch. Support for Programming Languages 
Operating Systems (ASPLOS '10) .  New York, NY, USA: ACM, 2010, 
pp. 397-408. 
and flexible 
ECC for main memory," 
and 
[10] A. D. Fogle, D. Darling, 
under cosmic and alpha irradiation," 
Materials 
"Flash memory 
on Device and 
vol. 4, no. 3, pp. 371-376, Sep.  2004. 
IEEE Transactions 
R. e. B. II, and E. Daszko, 
Reliability, 
Embedded Software Development 
[ I I ]  A.  Massa, 
Professional 
Reference, 
2002. 
Technical 
J. Lamping, 
[ 1 2] G. Kiczales, 
A. Mendhekar, 
with eCos. Prentice 
Hall 
e. Maeda, e. Lopes, J.-M. 
in 1 1 th Eur. 
programming," 
and J. Irwin, "Aspect-oriented 
Loingtier, 
CO'1f on O OP (ECOOP '97), ser. LNCS, M. Aksit and S. Matsuoka, 
Eds., vol. 124 1 .  Springer, 
Jun. 1997, pp. 220-242. 
[ 1 3] M. Rebaudengo, 
[14] D. Chen, A. Messer, P. Bernadat, 
and M. Torchiano,  "A 
dependable 
M. S. Reorda, 
source-to-source 
compiler 
IEEE Int. W'shop on Source Code Analysis 
M. Violante, 
for generating 
software," 
in 1st 
200 1 .  
and Manipulation, 
G .  Fu, Z .  Dimitrijevic, D. J .  F. Lie, 
to memory 
in Proc. of the 2001 Symposium on .!avaTM Virtual Machine 
D. Milojicic, 
Symposium -Volume J (.!VM'01). Berkeley, 
D. Mannaru, A. 
errors," 
Research and Technology 
CA,  USA:  USENIX 
"JVM susceptibility 
Riska, and 
Association, 200 1 .  
V. Grover, and B .  G .  Zorn, "Samurai: 
protecting 
[ 1 5] K .  Pattabiraman, 
of the  3rd 
ACM 
systems 
in Proceedings 
data in unsafe languages," 
and M. SUBkraut, 
with commodity 
critical 
SIGOPSIEuroSys European Conference on Computer Systems 2008, ser. 
Eurosys 
[ 1 6] e. Fetzer, 
'08. New York, NY, USA: ACM, 2008, pp. 2 1 9-232. 
U. Schiffel, 
safety-critical 
Int.  CO'1f 
'09. Berlin, 
'.'FAIL *: Towards a versatile 
In 25th Int. Con! on Arch. of Compo Sys. (ARCS '12), Workshop 
German 
Proceedings, 
Society 
"An-encoding 
hardware," 
and Security, 
2009, pp. 283-296. 
Springer-Verlag, 
D. Lohmann, 
Heidelberg: 
M. Hoffmann, 
in Proc. of the 28th 
ser. SAFECOMP 
of Informatics, Mar. 2012, pp. 201-2 10. 
[17] H. Schirmeier, 
on Computer Safety, Reliability, 
Notes in Informati
cs, vol.  200. 
experiment 
R. Kapitza, 
ser. Lecture 
compiler: 
jection 
fault-in
and O. Spinczyk, 
framework," 
Building 
[ 1 8] D. J. Taylor, 
[ 1 9] R. E. Filman and D. P. Friedman, 
D. E. Morgan, and J. P. Black, "Redundancy 
on 
software 
vol. SE-6, no. 6, pp. 585-594, 
fault tolerance," 
Nov. 1980. 
programming 
"Aspect-oriented 
IEEE Transactions 
in data 
structures: 
Software Engineering, 
Improving 
is 
sness," 
in W'shop on Advanced 
SoC (OOPSLA 
quantification 
'00), Oct. 2000. 
and obliviou
[20] G. Kiczales, 
E. Hilsdale, 
overview 
J. Hugunin, 
of AspectJ," 
Griswold, "An 
'01), ser. LNCS, vol. 2072. Springer, 
J. Palm, and W G. 
in 15th Eur. Con! on OOP (ECOOP 
M. Kersten, 
Jun. 200 1 ,  pp. 327-353. 
[21] O. Spinczyk 
and D. Lohmann, 'The  design 
and implementation 
of 
" RAMpage: Graceful 
commodity 
Compo (PRDC ') 1). Pasadena, 
linux servers," 
degradation 
in 
in } 7th IEEE Pacific Rim Int'l Symp. on Dep. 
management for memory errors 
CA, USA: IEEE, Dec. 2011 ,  pp. 89-98. 
[34] J. Chang, G. A. Reis, and D. I. August, 
in Dependable 
Conference on, Jun. 2006, pp. 83-92. 
software-only 
recovery," 
DSN 2006. International 
"Automatic 
Systems and Networks, 
2006. 
instruction-level 
[35] A. Benso, S. Chiusano,  P. 
Prinetto, 
for dependable 
and L. Tagliaferri, 
in 1111. Con! on 
applications," 
"A  C/C++ 
source-to-source 
compiler 
Dependable 
Systems and Networks (DSN), 2000, pp. 7 1-78. 
[36] M. Leeke and A. Jhumka, "An automated 
wrapper-based 
approach 
to the 
software," 
in The Fourth International 
C0I1ference 
design of dependable 
on Dependability 
(DEPEND). IARIA,2011 .  
[37] F. Afonso, e. Silva, 
to a real-time 
6th workshop on Aspects, 
software, ser. ACP4IS '07. New York, NY,  USA: 
S .  Montenegro, 
embedded operating 
and A .  Tavares, "Applying 
in Proceedings 
ACM, 2007. 
components, 
system," 
aspects 
of the 
and patterns for i'1frastructure 
[38] R. Alexandersson 
and J. Karlsson, 
implementation 
"Fault injection-based 
of fault tolerance," 
assessment 
in International 
Systems Networks 
(DSN 201 1 ) ,  Jun. 2011 ,  
of aspect-oriented 
Conference on Dependable 
pp. 303-314. 
[39]  Y. 
Aumann and M.  A. Bender, "Fault tolerant 
data structures," 
in 
of the 37th Annual Symposium on Foundations 
of Computer 
Proceedings 
Science, 
Society, 
ser. FOCS '96. Washington, 
1996, pp. 580-589. 
DC, USA: IEEE Computer 
[40] K. Kant and A. Ravichandran, 
"Synthesizing 
robust data structures-an 
IEEE Trans. on Computers, 
vol. 39, no. 2, pp. 1 6 1-173, 
introduction," 
Feb. 1990. 
[41] B. Demsky and M. Rinard, 
"Automatic 
detection 
and repair of errors in 
data structures," 
Object-oriented 
OOPS LA '03. New York, NY, USA: ACM, 2003, pp. 78-95. 
in Proc. of the 18th annual ACM SIGPLAN Con! on 
programing, systems, 
languages, 
and applications, 
ser. 
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 07:53:00 UTC from IEEE Xplore.  Restrictions apply.