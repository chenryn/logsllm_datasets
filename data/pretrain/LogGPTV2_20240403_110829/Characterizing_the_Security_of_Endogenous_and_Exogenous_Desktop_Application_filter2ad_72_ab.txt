reputable, this concern is moot.
536
M. R. McNiece et al.
Fig. 2. Each dot represents a unique connection (port,2LD) made by an Microsoft
Word. Most connections (239 of 323 total) appear on a single device, however a small
number appear on many more. We apply our endogenous heuristic to draw a line at a
prevalence of 159 devices, which includes the most prevalent 6% ﬂows.
Second, we only consider applications with observed traﬃc from more than 5%
1, 987 of devices. This excludes rare applications (e.g., Steam) as they would not
be indicative of the applications installed on a typical enterprise device. Finally,
we removed traﬃc associated with *.acme.TLD, the domain of the enterprise
where data was collected. In addition to this being a non-negotiable require-
ment from the data provider, this allows our results to be more generalizable.
*.acme.TLD is likely to appear endogenous when using our techniques and we
would like to isolate this from actual endogenous traﬃc. Many users visiting the
ACME homepage would make that domain appear to be part of endogenous
traﬃc for a browser. This lets us focus on application behavior in general and
less on behavior within a speciﬁc domain or IT conﬁguration. In practice, this
removed 3.2% of ﬂows overall, or 1.2% of ﬂows at the 2LD.
Application Endogenous Traﬃc: Throughout this work, we considered that
a user can cause an application to make connections to destinations that the
developer had no knowledge of. For example, consider two connections from
Microsoft Word, the ﬁrst to mastercard.com on port 443 across 97 unique
devices, and the second to office.com on port 443 across 5,498 unique devices.
Intuitively, these are two diﬀerent types of connections. It is likely that Word
connects to office.com because of code that the application developer wrote,
while it’s also more likely that a user action triggered the network connection to
mastercard.com.
More generically, consider an application installed and used by thousands of
independent users and the popularity of individual network connections made by
that application. If the same connections are made by many diﬀerent users, either
these users are all using the application in the same way or the application itself
has a common behavior using the network. As these connections become more
and more popular it is more likely that it is application behavior. Alternatively,
if an extremely common user behavior triggers a network request, if it is popular
Characterizing the Security of Endogenous and Exogenous Desktop
537
enough it may as well be owned by the application. For example, if hitting
“save” in Word triggers a network connection, that may as well be considered
application behavior because it is ubiquitous across users.
We distinguish these types of traﬃc into two categories, application endoge-
nous versus user triggered, or exogenous. Endogenous is a term borrowed from
biology that indicates that something grows or originates from within an organ-
ism. This diﬀers from something exogenous that grows or originates from outside
an organism. The tie here is that such endogenous traﬃc originates from within
an application’s native behavior, not external inﬂuences.
Given the collected metadata, we observe that application endogenous traﬃc
will appear on more devices than user triggered traﬃc. Second, we observe that
if, for each application, we plot each ﬂow against the number of unique hosts it
appeared on, a fairly regular pattern occurs, as seen in Fig. 2. Our intuition is
that this is following a Pareto distribution. However, diﬀerent applications will
have diﬀerent distribution parameters, complicating a simple decision criteria.
To solve this, we identify the point on the observed distribution where the curve
grows steeply, i.e., the “elbow” of the plot [11]. We then consider any types of
ﬂows that fall at or higher than the elbow to be endogenous to the application
and ﬂows that fall below to be user triggered. We acknowledge that there are
some confounds with this approach, namely if there is some extremely popular
destination, e.g. google.com, it may be indistinguishable from an endogenous
behavior due to its ubiquity. We restrict most of our analysis to these endogenous
connections, and while there are almost certainly interesting things happening
in the exogenous ﬂows, our focus is on application native behavior which endoge-
nous traﬃc better represents. We further explore this approach and cases where
it succeeds and fails in Subsect. 3.1.
3 Analysis
We observed traﬃc from 39,758 unique MacOS hosts over a 24-h period in
September 2020. Each host in this population is a user-facing endpoint, such as
a desktop or laptop. We observed 143 unique applications installed on more than
5% of the population (≥1,987 hosts). These applications generated 3,211,451,385
total connections. After recovering domains with pDNS, we observed 282,715
unique domains, 61,607 (21.8%) of which were unique second-level domains, e.g.,
google.com. The typical endpoint in our population produces a large number of
unique ﬂows with a median 23,642 connections, where a unique ﬂow is deﬁned
by tuple (application,destinationport,domain).
3.1 How Many of an Application’s Connections Are Endogenous?
We applied the “elbow” ﬁltering techniques described in Subsect. 2.4 and exam-
ined how traﬃc changed before and after this ﬁltering. First, when consid-
ering the number of ﬂows per application, deﬁned by tuple (application,
destinationport,domainat2LD), before ﬁltering there were median 17.50 unique
538
M. R. McNiece et al.
Fig. 3. Well-known ports used as part of application’s endogenous traﬃc. 96% of appli-
cations use HTTPS in endogenous connections.
ﬂows, after there were median 3.0. This reduction in types of traﬃc suggests that
many applications have few types of endogenous traﬃc. The maximum number of
unique ﬂows before ﬁltering was 70,175 and after 2,309. When considering the max-
imum case, the application here is Google Chrome, and our elbow approach strug-
gles to reduce the endogenous traﬃc to a manageable set, although it does reduce
by 96.7%. Chrome and other browsers have orders of magnitude more apparent
endogenous connections than other applications. We explore browsers’ behavior
with elbow ﬁltering in Subsect. 3.6. We see similar trends between number of ﬂows
and number of second-level domains. The median number of second-level domains
connected to per application was 15.00, after ﬁltering it was 3.0. In the maximum
case for Google Chrome, before there were 50,691 unique 2LDs, after 2,288. Lastly,
we consider the destination ports used per application. In the median case an appli-
cation used 2 ports before ﬁltering, after there was 1. In the maximum case, there
were 9,427 ports connected to by an application, afterwards there were 9. In this
case, Google Chrome was the maximum before, but after it ﬁltered down to 4 ports;
VMware-Nat was the maximum after ﬁltering.
By considering only traﬃc that is endogenous to an application, we have
a tractable dataset to consider within each applications as most applications
do not have many types of endogenous traﬃc. This is not a tautologically true
statement by construction. There are cases (namely browsers) that do have many
types of endogenous traﬃc. Within browsers, there are types of traﬃc (e.g.,
email) that are common but are not endogenous behavior. This technique does
separate those types of connections from those less common, such as checking
niche websites.
Takeaway: There are few connections made by applications that are common
across hosts, so diﬀerentiating endogenous versus exogenous connections can
drastically reduce the dataset size.
3.2 What Ports Do Applications Use to Communicate?
Building on results from Subsect. 3.1, we know that in the median case, an
application uses few ports, both before and after looking only at endogenous
traﬃc. We ﬁnd that most applications only use well-known ports (below 1024);
Characterizing the Security of Endogenous and Exogenous Desktop
539
Fig. 4. Distribution between secure and insecure ports for 20 most popular applica-
tions. Insecure connections made by applications are further explored in Subsect. 3.3
in endogenous traﬃc, there are only 4 ports used by more than 2 applications:
HTTPS, HTTP, DNS, and NTP. Figure 3 shows that 95.62% of all applica-
tions we consider use HTTPS in their endogenous traﬃc, while 15.33% use
HTTP. These are not mutually exclusive; an application that uses both HTTP
and HTTPS is counted in both categories. Some common ports (SMTP) are not
included here as they only had connections to *.acme.TLD which were excluded.
We acknowledge that having a connection on a port does not guarantee the
intended protocol is used, we assume that this is the case but did not have
access to PCAPs to validate this assumption.
Takeaway: Our unique perspective reinforces the common wisdom that
HTTP/S has become the main communication protocol for virtually all traf-
ﬁc.
3.3 What Applications Are Not Using Secure Ports?
We are looking only at “well known” (1, 024. In Fig. 4 we consider all traﬃc
for an application across all devices and plot the distribution between insecure
and secure ports. There are applications that appear to transmit sensitive data or
contain some security feature that communicate over insecure channels, such as
540
M. R. McNiece et al.
trustd and jamf. Next, we explore the connections made by these applications
in more detail.
Takeaway: While most endogenous traﬃc is secure by default, there are notable
instances of prominent applications featuring insecure communication channels.
TrustD: trustd is a system daemon on MacOS that manages and updates the
system trust store, including checking for certiﬁcate revocation. In our study of
insecure ports we found that trustD uses HTTP/80 for all of its communications.
This gave us pause, as it is a system-level process that is responsible for a critical
security function, thus we expected it to use TLS. Upon further investigation,
we discovered that this process talks to a limited set of domains. These domains
appear to be either authenticated Apple services that we were not able to deter-
mine their exact use and purpose (pancake.apple.com and mesu.apple.com)
or OCSP checks from major CAs (ocsp.digicert.com,ocsp.apple.com, etc.).
OCSP is a certiﬁcate revocation protocol that uses a signed request and response.
Although the data is authenticated, the sender is not, which exposes a poten-
tially exploitable attack surface if an attacker could craft a malicious OCSP or
certiﬁcate that the service attempts to load. Takeaway: trustd gained some
attention in the news and our ﬁndings align with what other researchers [12]
found and further explains why OCSP must happen over HTTP.
Microsoft Oﬃce: Microsoft Excel and Outlook are the only oﬃce applica-
tions that break the “top 20” to appear on Fig. 4, but we will examine all the
Oﬃce products (Excel, Outlook, Powerpoint, Word, OneNote, AutoUpdate). Of
those, Outlook is the only product to have any endogenous traﬃc on an insecure
port. Outlook’s has connections to 164 unique 2LD with port HTTP/80. Mar-
keto, a marketing automation company, appears to own 153 of these domains.
These Marketo domains appeared on the same number of hosts, we suspect this
is because they are all hosted on the same IP and the pDNS domain recov-
ery matched all of them. These domains appeared on <2% of hosts that were
running Outlook so we suspect the elbow heuristic failed for this case. Of the
remaining 11 domains, 3 are additional marketing services e.g. sendgrid.net,
5 are CDNs or IaaS providers including amazonaws.com,akamaiedge.net, 1 is
office.com, and the remaining 2 are HR service providers. office.com appears
both with connections on HTTP/80 and on HTTPS/443 suggesting that not all the
connections Outlook makes back to Microsoft use TLS.
Device Management (jamf): jamf is a tool used for IT device and policy
management for MacOS and typically runs with root or sub-root privilege. jamf
has a single insecure connection, on HTTP/80 to akamaiedge.net, which largely
means that it could be connecting and pulling down anything hosted by Akamai,
a large CDN.
Characterizing the Security of Endogenous and Exogenous Desktop
541
CiscoSparkHelper: CiscoSparkHelper has 7 endogenous ﬂows and uses 3
ports, 444, 5004, 33434. On both port 5004 and 33434, there are 3 connections
each, two to (wbx2.com and webex.com) which appear to be domains owned by
Cisco WebEx; the third connection is to amazonaws.com. For port 444 we see a
single connection to wbx2.com. Port 444 oﬃcial use is for SNPP, while 5004 and
33434 are used for VoIP audio/video calls. 5004 and 33434 were not included in
our “secure” ports as they are not <1, 024.
3.4 Are Applications Communicating with Reputable Domains?
Next, we are interested evaluating the reputation of domains that applications
connect to using proxies for danger and safeness. We focus on 2LDs, and only
those that are part of the endogenous set of traﬃc for an application. We use
four proxies for danger: if a domain resolved to an IT-managed DNS blackhole,
if a domain appeared in a Snort IP blocklist [6], if a domain appeared in a
commercial domain abuse feed, or if a domain appeared as part of DGA for a
handful of well known campaigns (Mirai, Zeus, Cryptolocker). We use two proxies
for safeness, the reputation score of a domain from OpenDNS Umbrella [8], and
the position of a domain on the Umbrella Top 1M [7]. We found no domains
that matched any of our proxies for danger, and no domains that ﬂagged as
malicious in OpenDNS Umbrella. In all 143 applications, we found that at least
50% of 2LDs per application are in the Umbrella Top 1M Popular Domains, and
15 applications had 100% of their 2LDs in the Top 1M.
Takeaway: Domain reputation services are correctly evaluating endogenous
traﬃc as benign, which is not surprising and would have been interesting if they
were not. “Popular” sites lists from Alexa, OpenDNS, etc. can be used by inci-
dent responders and network administrators to help determine if a particular
site is worth further investigation. However, there’s a large portion of endoge-
nous traﬃc in popular enterprise application that do not appear on these lists.
This could be a limitation of these popularity lists where a more focused list of