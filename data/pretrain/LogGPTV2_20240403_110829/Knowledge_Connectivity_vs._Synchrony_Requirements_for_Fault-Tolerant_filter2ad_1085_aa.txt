**Title: Knowledge Connectivity vs. Synchrony Requirements for Fault-Tolerant Agreement in Unknown Networks**

**Authors:**
- Fabíola Greve, Federal University of Bahia (UFBA), Brazil
- Sébastien Tixeuil, LRI-CNRS & INRIA Grand Large, France

**Abstract:**
In self-organizing systems, such as mobile ad-hoc and peer-to-peer networks, consensus is a fundamental building block for solving agreement problems. It enables the coordination of distributed nodes to make consistent decisions. In classical environments where entities behave asynchronously and identities are known, consensus cannot be achieved even with a single process crash. Self-organizing systems are even more challenging because the set and identity of participants are not known. This paper defines necessary and sufficient conditions under which fault-tolerant consensus can be solved in these environments. These conditions relate to the synchrony requirements of the environment and the connectivity of the knowledge graph constructed by the nodes to communicate with their peers.

**1. Introduction**
Wireless sensor and ad hoc networks, as well as unstructured peer-to-peer networks, allow participating entities to access services and information independently of their location or mobility. This is achieved by eliminating the need for a statically designed infrastructure or centralized administrative authority. Such systems are inherently self-organizing, as entities can join or leave the network arbitrarily, making the system highly dynamic.

Agreement problems are essential for reliable distributed systems. The core problem is the consensus problem, where each process initially proposes a value, and all correct processes must reach a common decision on one of the proposed values. For example, reaching agreement among a set of mobile robots has been recently investigated [9].

Unlike traditional (wired) networks, where processes have complete knowledge of the network topology and all participants, in self-organizing environments, the number and identities of processes are unknown. Even in classical environments, consensus cannot be solved if one participant is allowed to crash [6]. Therefore, solving consensus in an unknown, asynchronous network is even more difficult. However, due to its essential role, we study the conditions that permit solving consensus in unknown asynchronous networks despite participant crashes.

Cavin et al. [1] introduced the Consensus with Unknown Participants (CUP) problem, which retains the classical consensus definition but assumes processes are unaware of the set of processes in the system. To solve non-trivial applications, processes must acquire partial knowledge about other processes. The participant detector abstraction was proposed to handle this subset of known processes [1]. They act as distributed oracles providing hints about participating processes. For instance, local broadcasting can be used to construct a local view of 1-hop neighbors. Based on the initial knowledge graph formed by the participant detectors, Cavin et al. defined necessary and sufficient connectivity conditions to solve CUP in an asynchronous, fault-free scenario.

Failure detectors and leader oracles are elegant abstractions that encapsulate the extra synchrony needed to overcome the impossibility of fault-tolerant consensus in traditional networks [3, 8]. A 3S failure detector provides hints on crashed processes, while the Ω leader oracle eventually provides the same correct process identity to all processes. Both 3S and Ω have the same computational power and are the weakest classes of detectors allowing consensus in asynchronous, known networks [4]. These protocols are indulgent, meaning they tolerate unreliability during periods of asynchrony and instability, and they solve the uniform version of the consensus, ensuring uniformity of the decision regardless of process correctness [7].

In the context of unknown networks, Cavin et al. [2] studied the Fault-Tolerant CUP (FT-CUP) problem. By considering the minimal connectivity requirements over the initial knowledge graph for solving CUP, they identified a perfect failure detector (P) to fulfill the necessary synchrony requirements for solving FT-CUP. However, strong synchrony competes with the high dynamism, full decentralization, and self-organizing nature of wireless sensor and ad-hoc networks. Moreover, even with a perfect failure detector, the uniform version of FT-CUP cannot be solved in unknown networks [2].

In this paper, we show that there is a trade-off between knowledge connectivity and synchrony for consensus in fault-prone unknown networks. We focus on solving FT-CUP with minimal synchrony assumptions (i.e., the Ω failure detector) and investigate necessary and sufficient knowledge connectivity requirements. If the system satisfies our knowledge connectivity conditions, any indulgent consensus algorithm designed for traditional networks can be reused to solve FT-CUP and uniform FT-CUP.

**2. Preliminaries**
**Model:**
We consider a distributed system with a finite set Π of n > 1 processes, denoted as Π = {p1, ..., pn}. In a known network, Π is known to every process, while in an unknown network, a process pi may only be aware of a subset Πi of Π.

Processes communicate through reliable channels, with no message creation, corruption, or duplication. A message m sent by pi to pj is eventually received by pj if both are correct. Process pi can send a message to pj if pj ∈ Πi. If pi sends a message to pj such that pi ∉ Πj, pj may add pi to Πj upon receipt and send a message back. We assume a reliable underlying routing layer, so if pj ∈ Πi, pi can send a message reliably to pj. The system is asynchronous, with no assumptions on process speeds or message transfer delays.

A process may fail by crashing, i.e., prematurely halting. A crashed process does not recover. A correct process behaves according to its specification until it crashes. Let f denote the maximum number of processes that may crash, assumed to be known to every process.

**Classical Consensus:**
The consensus problem is the most fundamental agreement problem in distributed computing. Every process pi proposes a value vi, and all correct processes decide on a unique value v related to the proposed values. Consensus is defined by:
(i) Termination: every correct process eventually decides some value.
(ii) Validity: if a process decides v, then v was proposed by some process.
(iii) Agreement: no two correct processes decide differently.

**Uniform Consensus:**
The uniform version of the consensus changes the agreement property to:
(iii) Uniform Agreement: no two processes (correct or not) decide differently.

**Consensus in Unknown Networks:**
We focus on solving consensus in a fault-prone unknown network. We consider three variants:
- CUP (Consensus with Unknown Participants): solve consensus in an unknown network where processes do not crash.
- FT-CUP (Fault-Tolerant CUP): solve consensus in an unknown network where up to f processes may crash.
- Uniform FT-CUP (Uniform Fault-Tolerant CUP): solve the uniform version of the consensus in an unknown network where up to f processes may crash.

**Graph Notations:**
We consider directed graphs Gdi = (V, E) defined by a set of vertices V and a set E of edges (v1, v2). The distance d(u, v) is the minimum length of all directed paths from u to v. The out-degree of a vertex v is the number of vertices u such that (v, u) is in E. A sink is a node with out-degree 0. A directed graph Gdi(V, E) is k-strongly connected if for any pair of nodes (vi, vj), vi can reach vj through k distinct node-disjoint paths. Menger's Theorem [10] states that the minimum number of nodes whose removal disconnects vi from vj is equal to the maximal number of node-disjoint paths from vi to vj. This leads to:
1. For any n and k, there exists a k-strongly connected directed graph Gdi(V, E) such that the removal of k nodes disconnects the graph.
2. If the graph Gdi is k-strongly connected, removing (k − 1) nodes leaves at least one path between any pair of nodes, keeping the graph strongly connected.

**3. Synchrony and Knowledge Connectivity for Consensus in Fault-Prone Systems**
**3.1 Failure Detector: a Synchrony Abstraction**
A fundamental result in consensus literature [6] states that even if Π is known and the number of faulty processes is bounded by 1, consensus cannot be solved in an asynchronous system. Some level of synchrony must be assumed. A failure detector (FD) models network synchrony. FDs can be classified by completeness and accuracy properties:
- Perfect FD (P): never makes mistakes, satisfying perpetual strong accuracy and strong completeness.
- Eventually Strong FD (3S): can make arbitrary mistakes but eventually stops suspecting correct processes, satisfying strong completeness.
- Leader Detector (Ω): eventually provides the same correct process identity to all processes [8].

It has been proven that 3S and Ω have the same computational power [5] and are the weakest detectors allowing consensus in known networks [4]. Using 3S and Ω assumes a majority of processes never fail, i.e., f < n/2.

**3.2 Participant Detectors: a Knowledge Abstraction**
Participant detectors provide partial knowledge about other processes. They act as distributed oracles, giving hints about participating processes. For example, local broadcasting can be used to construct a local view of 1-hop neighbors. Based on the initial knowledge graph formed by the participant detectors, we define necessary and sufficient connectivity conditions to solve CUP in an asynchronous, fault-free scenario.