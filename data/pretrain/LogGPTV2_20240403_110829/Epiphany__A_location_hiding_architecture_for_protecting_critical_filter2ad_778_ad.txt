them as attackers and legitimate clients. Our model is very
general, it does not consider actual attackers vs. legitimate
clients, or their locations in the Internet. However, we vary
the percentage of simulated attackers, legitimate clients and
SPs to study properties such as, how many attackers interfere
with legitimate clients vs. how many of them are rendered
ineffective? How far away are the attackers from SPs? and
so forth. Finally, we randomly pick Nsp% of all routers and
denote them as SPs, and assign them to attackers and clients
as follows:
• If there are SPs in the same AS, assign the nearest (in
router hops) SP to each attacker, legitimate client.
• If no SPs exist in local AS, pick the nearest remote AS
that has SPs and assign the nearest SP from that AS to
each attacker, legitimate client.
2) Varying Attacker Distribution: We ﬁrst vary the attacker
distribution from Na = 0.1% toN a = 10% with Nl ﬁxed at
0.01%, i.e., the simulation models attackers that are 10, 100
and 1000 times more than legitimate clients. We show the
results for various SP densities. For each data point, we run
the simulation 10 times and plot the average with error bars.
Figure 6(a) shows the percentage of attackers that are on SPs
not used by legitimate clients. These attackers cannot aggre-
gate their trafﬁc to target speciﬁc SPs, hence they are rendered
ineffective. Even at 0.025% SP density, 50% of the attackers
are neutralized regardless of
the attacker distribution. At
0.5% SPs, over 93% attackers become ineffective, but further
increasing SP density only shows marginal improvement. In
contrast, Figure 6(b) shows the percentage of legitimate clients
free from attackers i.e., have no attackers in their SP region. At
Nsp =0.5% and Na =0.1%, nearly 65% of legitimate clients
become free from attackers. However, at Na =10%, only 1%
legitimate clients are free. This is understandable, because our
SPs are randomly placed. As we increase attacker density, the
probability that some attackers land very near to legitimate
clients increases. To separate them, two SPs must be placed
in such a way that the attacker and legitimate client are routed
to a distinct SP. With random SP placement, a lot more SPs
are needed to achieve that effect. In other words, if a critical
service has a large number of clients from unclean networks,
freeing them requires more SPs.
Now, in the SP regions with both attackers and legitimate
clients, Figure 6(c) and 6(d) show that with Na = 1% and
Nsp =0.5%, on average there are only 8 attackers interfering
with legitimate clients and they are located within 4 to 5 hops
of the SP. However, the mode in Figure 6(d) shows that in
most SP regions, only one attacker interferes with legitimate
clients. These results clearly show that anycast SPs localize the
attackers; locating them may become simpler, since there are
far fewer attackers and they can be found in a small network
radius. Moreover the additional techniques to further limit
DoC attacks discussed in Section III-B could be employed
effectively.
3) Varying Legitimate Client Distribution: We now hold
the attackers at 1% and vary the legitimate client distribution
from 0.01% to 1%. From Figure 7(a) we see that number
of attackers rendered ineffective decreases with more clients.
Because, now the likelihood of clients ending up in attacker
regions increases, fewer attackers become ineffective. In con-
trast, Figure 7(b) shows that
the percentage of legitimate
clients free from attackers is independent of client distribution.
This is because, at a given attacker distribution, as more clients
are randomly chosen, some of them may land very close to
attackers (a real world analogy is that they come from unclean
networks) while some land in SP regions without attackers
(analogous to clean networks).
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 07:17:56 UTC from IEEE Xplore.  Restrictions apply. 
4) Effects of Various SP Placement Scenarios: Through
this next set of simulations, we wish to gain some insight
into different strategies for placing SPs. The scenarios sim-
ulate choices a critical service provider might face, or the
availability of SPs. 1-SP-Per-AS creates regions based on AS
boundaries, i.e., we try to place at least one SP in each AS.
Core examines the case when SPs are operated by Internet
providers, i.e., we place SPs at random core routers. Edge
examines deploying SPs in edge subnets and in Edge+Core
we place SPs at both edge, core routers.
Figures 8 shows the percentage attackers rendered ineffec-
tive for Nl = 0.01% and Na = 1%, under the placement
scenarios (we omitted the graph for unaffected legitimate
clients since it does not differ in trend). At 0.5% SPs, Edge
rendered 95%, Core: 83%, Edge+Core: 88% and 1SP-Per-AS
rendered 50% attackers ineffective. As noted earlier, separating
attackers from clients requires placing SPs in a way that they
use distinct SPs. In Edge, this is more likely because an SP
may land on the same edge router as an attacker or a client,
but in Core, SPs are farther away. 1SP-Per-AS performs poorly
since attackers are evenly distributed across all edge routers,
they may be in most ASes (but there is only one SP per AS).
Finally, note that the Edge+Core scenario performs equally
well as Edge only. In the Internet, SPs may be likely to be
present in both edges and core.
B. Hidden Path Overhead
We implemented hidden paths using single source multicast
(SSM) [26] on a testbed with a linear topology using Cisco
2600 routers. Using the testbed we estimate hidden path setup
and tear down delays, to serve as a yard stick on what to
expect if Epiphany is deployed in the Internet. In SSM, a
source (S) does not know the receiver’s address, but can send
trafﬁc to a group address G. The receiver speciﬁes interest in
{G, S}. Routers setup state so the receiver can get packets
addressed to G from S. Our testbed consists of two hosts
(Linux OS; Pentium 4) acting as a proxy (P) and D, and two
Cisco 2600 routers (R1, R2); D attaches to R1, R1 to R2, and
R2 to P. We setup static routing so that all nodes can reach
P, but only R1 can reach D, i.e., D’s address space is not
announced to other routers. To build a hidden path, D picks
a random SSM address G1 and expresses interest to receive
packets from P using IGMPv3 protocol.R1 sees the interest,
creates a multicast forwarding entry , and sends an
SSM join to R2. R2 similarly sets up state. To remove the
path, D leaves group G1, which results in an IGMPv3 exclude
message. R1 see this, removes , and sends a prune
to R2, which also removes the entry G1.
To measure path setup time, D ﬁrst sends a UDP packet
to P with G1, starts a timer, and speciﬁes interest in G1. P
learns about G1 and immediately starts sending UDP packets
to G1. When D receives a packet from P, it stops the timer and
measures the time difference. This delay includes the hidden
path setup time and round trip time (RTT). D measures RTT
separately using UDP packets. Repeating the experiment 20
times, we found that on average path setup took about 13.89
milliseconds, while the RTT was only 1.18 milliseconds. RTT
is small due to the short cable length in our setup, but in
the Internet, propagation delays may dominate hidden path
setup time (but may be well within the milliseconds range). To
measure tear down delay, we capture packets at D’s interface
and measure the delay from when D left G1 to the time when
packets from P stop arriving at D. R1 takes a random amount
of time to identify that it no longer has any members interested
in G1 and to remove the state. In 20 runs, the path tear down
time took about 1.276 seconds on average. In the Internet,
propagation delays will also add to this delay, but during
this time, a compromised proxy may cause some damage
to legitimate trafﬁc by ﬂooding D. However, we believe the
damage will be limited to within few seconds.
In summary, we demonstrated how to create hidden paths
using existing router functionality. While more functionality
such as explicit path teardown would be nice we demonstrated
the viability of hidden paths within existing router function-
ality. This gives us conﬁdence that the Epiphany mechanisms
are both feasible and deployable.
C. Implementation on PlanetLab
We implemented the main Epiphany mechanisms as an over-
lay over PlanetLab to evaluate setup and data transfer time in a
real Internet setting. These experiments also provide evidence
of the effectiveness of separating setup and data proxies. The
implementation consists of a central topology server to create
and manage the overlay, and a node application to function as
a Router, SP, DP and D (≈ 6000 lines of C++, and ≈ 2000
lines of Perl code).
1) Methodology: The topology server randomly selects
some PlanetLab hosts and launches node applications for
routers, SPs, DPs and D. Routers compute 3 or more neighbors
using RTT to form a connected overlay graph. SPs, DPs
and D attach to the closest router in the overlay. D learns
about SPs and DPs from topology server, builds hidden paths
and sets request rate limit RR at SPs. Next, the topology
server launches attackers and legitimate clients, which ﬁnd
their closest SP (using RTT to emulate anycast) and start
sending requests. Since our node applications use TCP, we
set TCP NODELAY option to avoid potential buffering issues
which could skew results.
In the following experiments, we use a single SP, DP,
a legitimate client C and 15 attackers. We assume the SP
employs additional defenses described in Section III-B, so the
attackers may not prevent C from reaching D, but may seek to
delay it for a long duration. The request rate limit RR at SP
is set to 50 rps, while the data rate limit is set to 100 dps. C
sends one request per second, while attackers combine forces
to generate a target attack rate ra. If C reaches D and gets a
DP, it attempts to send 1000 data packets of 100 Bytes each to
D via the DP. For each data point, we repeat the experiment
50 times and compute the average. We study the setup and
data transfer delays experienced by C using this setup.
Note that in this experiment we focus on attackers con-
suming request tokens at the SP. Attackers can easily launch
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 07:17:56 UTC from IEEE Xplore.  Restrictions apply. 
s
r
e
k
c
a
t
t
A
e
v
i
t
c
e
f
f
e
n
I
%
 100
 90
 80
 70
 60
 50
 40
 30
 20
 10
 0
0.01% Legits
0.1% Legits
1% Legits
0.01% Legits
0.1% Legits
1% Legits
s
t
n
e
i
l
C
e
t
a
m
i
t
i
g
e
L
d
e
t
c
e
f
f
a
n
U
%
 35
 30
 25
 20
 15
 10
 5
 0
0.025 0.125
0.25
0.5
0.75
1.0
0.025 0.125
0.25
0.5
0.75
1.0
% Setup Proxies (out of ~2.7mil)
% Setup Proxies (out of ~2.7mil)
(a) Percentage ineffective attackers
(b) Percentage clients unaffected
Fig. 7.
varied from 0.0125% to1%.
Simulation results for various legitimate client distributions; Na ﬁxed at 0.1% and Nsp
 100
s
r
e
k
c
a
t
t
A
e
v
i
t
c
e
f
f
e
n
I
%
 90
 80
 70
 60
 50
 40
 30
 20
Core
Edge
Edge+Core
1SP-per-AS
0.025 0.125
0.25
0.5
0.75
1.0
% Setup Proxies (out of ~2.7mil)
Fig. 8. Percentage ineffective attackers under various
SP placement scenarios with Na = 1% and Nl =
0.01%.
 160000
 140000
Data Transfer Delay
Setup Delay
Setup Delay
)
s
d
n
o
c
e
s
 120000
 100000
i
l
l
i
m
(
y
a
e
D
l
 80000
 60000
 40000
 20000
 0
 0
 50
 100
 150
 200
 250
 300
Attacker combined request rate (per second)
 30
 25
 20
 15
 10
 5
)
0
5
f
o
t
u
o
(
s
r
e
f
s
n
a
r
T
d
e
l
i
a