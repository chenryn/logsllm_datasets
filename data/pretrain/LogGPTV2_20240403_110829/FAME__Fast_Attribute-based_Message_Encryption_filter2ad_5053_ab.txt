(cid:32)(cid:32)(cid:71)
(cid:32)(cid:32)
(cid:32)
(cid:32)(cid:32)
(cid:32)(cid:32)
(cid:32)
(cid:32)(cid:32)(cid:71)
(cid:32)
(cid:32)(cid:32)(cid:71)
(cid:32)(cid:32)(cid:32)
(cid:32)(cid:32)(cid:32)
(cid:32)(cid:32)(cid:32)
(cid:32)(cid:32)
(cid:32)
(cid:32)(cid:32)(cid:32)
(cid:32)(cid:32)(cid:32)
(cid:32)(cid:32)(cid:32)
(cid:32)
Table 1.2: A qualitative comparison of the various ABE schemes we consider in terms of the running time of different algo-
rithms. More the number of circles, the better the efficiency (lower running time). The upper and lower parts of the table list
the CP-ABE and KP-ABE schemes respectively. Please see §5 for a concrete and thorough analysis. Note that we have imple-
mented two versions of Chen et al.’s ABE schemes, one secure under the symmetric Diffie-Hellman assumption (SXDH) and
the other under the decisional linear (DLIN) assumption. Our schemes are secure under (a variant of) the latter assumption.
fine-grained view of how the various schemes compare with each
other. See Tables 5.1, 5.3, 5.2 and 5.4 in §5.
Lastly, our schemes have shorter ciphertexts and keys than most
of the schemes compared with. There is 25% savings in ciphertext-
and key-size w.r.t. Bethencourt et al. and 50% savings in key-size
w.r.t. the fastest version of Chen et al. (Table 5.5).
The implementation code is available on GitHub [2].
Organization. Our primary focus will be on designing and analyz-
ing a CP-ABE scheme called Fame because, traditionally, it has been
harder to build than KP-ABE3 and seems to have more practical ap-
plications. In the remainder of this section we discuss the intuition
behind this construction. In §2 we describe our notation and define
attribute-based encryption formally. In §3 we present Fame in full
detail and then, in §4, we prove its security under the decisional
linear assumption. We analyze the performance of Fame vis-à-vis
several other prominent CP-ABE schemes in §5. Some more related
work is surveyed in §6.
We provide a formal description of our KP-ABE scheme in Ap-
pendix B but skip a proof of security since it is similar to that of
Fame. In §5 we briefly discuss the performance of this scheme with
respect to two other schemes we implemented.
3The first proposal of KP-ABE in 2006 [28] was already under a standard assumption,
but until the work of Waters in 2011 [57], there was no such scheme for CP-ABE. In an
earlier paper [27], a generic method for converting KP-ABE to CP-ABE was proposed
but it leads to a significant blow-up in encryption and decryption time.
3
1.1 Designing our ABE schemes
Monotone span programs. In order to study the type of access
policies used in practice, Boolean formulas provide a very good
representation. However, a more general class called monotone
span programs (MSPs) is better suited to the design of encryption
schemes. Indeed, barring a few original proposals for ABE [16, 28,
48], the majority of later work has used MSPs. (A Boolean formula
with AND and OR gates can be easily converted into an MSP—see
§2 for a formal discussion).
An MSP is given by a matrix M and a function π that maps each
row of M to an attribute. (M, π) also act as a linear secret-sharing
scheme. A secret value can be split into shares via M, with one
share for every row. If a set of attributes S satisfies (M, π), then one
can linearly combine the shares of the rows mapping to attributes
in S to recover the secret.
High-level design of CP-ABEs. At a high level, a CP-ABE scheme
supporting MSPs works as follows. A key has some component
sky for each attribute y in S, which generally consists of one or
more elements from a group H. These components must be tied
together properly in order to prevent parties from combining two or
more keys to decrypt a ciphertext that none of them is individually
supposed to. Likewise, a ciphertext has a component cti made up
of elements from a group G for the ith row of M. This component
masks the ith row’s share with some special value, which must be
present in the skπ(i) component of the key in some form, so that
a user with attribute π(i) is able to recover the ith share during
decryption. The public parameters generated during system set-
up provide such values for ciphertexts and keys. Intuitively, we
need some unique group elements for each attribute in the system,
otherwise a single key component may be able to reveal multiple
shares in a ciphertext.
CGW scheme. The recent work of Chen, Gay, and Wee [19], re-
ferred to as CGW hereafter, builds compact ABE schemes using
Type-III pairings. Their first step is to pick matrices A and B over
integers modulo a prime which embed the k-linear assumption
[54]. Suppose a⊥ and b⊥ are vectors orthogonal to A and B re-
spectively. A simple basis given by ([A]1,[b⊥]1) and ([B]2,[a⊥]2)
is chosen for ciphertexts and keys respectively, where the sub-
script 1, for instance, denotes a mapping to group G. Then, for
each attribute x in the universe, they define a new pair of bases
x b⊥]1) and ([Wx B]2,[Wx a⊥]2) by choosing a ran-
([WT
dom matrix Wx . If matching components of a ciphertext and key
are paired, i.e., those generated w.r.t. [WT
x A]1, [A]1 and [Wx B]2,
[B]2 respectively, then observe that this leads to cancellation in the
sense that
x A]1,[WT
x A)TB = AT(Wx B),
(1.1)
but pairing with [WyB]2, [B]2 for y (cid:44) x does not. CGW calls this
the associativity property.
Challenges. While CGW’s work advances the state-of-the-art for
ABE, it has some notable drawbacks. First, their schemes are small
universe: one needs to know the total number ℓ of different at-
tributes that will ever be needed in advance, so that the matri-
ℓA]1 can be placed inside the public-key. Sec-
ces [WT1A]1, . . . ,[WT
ond, their KP-ABE scheme can only support MSPs with an a-priori
bounded number of columns, which roughly translates to Boolean
formulas with a limited number of AND gates. Set-up time and size
of parameters both scale linearly with this bound (and with ℓ).
How do we support arbitrary attributes – any number of them,
and allow any access policy to be used without blowing up the size
of public parameters out of proportion? Let us focus on the former
problem for now. A simple idea that comes to mind is to use a hash
function H to generate [WT
x A]1 in ciphertexts and [Wx B]2 in keys
for an attribute x. There are several problems with this approach:
• G and H have a very different structure since we are in the
Type-III setting [25]. Hashing any string into them would
produce completely unrelated values.
• The discrete logs of the hashed values should not be revealed,
otherwise it would not be possible to argue security.4
• Suppose [WT
x A]1 is generated through H during the en-
cryption process. How can the key issuer generate [Wx B]2
without explicit knowledge of Wx ?
(WT
Such types of problems arise in many other schemes too. Take
for instance the small universe KP-ABE scheme of Goyal et al. [28].
1/tx in the key for an attribute x,
It uses дtx in the ciphertext and д
where дtx is provided as part of the public key. Without knowledge
1/tx cannot be generated, so the master secret key must
of tx , д
contain it. But what if дtx is derived directly from a hash function,
4In particular, the straightforward approach of generating an integer and mapping to
a group element (via a generator) does not work. Instead, one should directly map the
attributes to group elements.
so that tx is not available at all? As another example, the schemes
of Okamoto and Takashima [46, 47] use a vector of group elements
for each attribute to form a ciphertext and an orthogonal vector
to form the key. If the former vector is generated through a hash
function, it is completely unclear how to generate the latter to use
in the key.
Note that both Goyal et al.’s and Okamoto and Takashima’s
schemes are built upon symmetric groups, whereas CGW’s schemes
are designed in the asymmetric setting, which only makes solving
the problems discussed above harder.
Approach. Associativity property (1.1) can help us find a way
around the issue of asymmetry. Observe that a basis of type [WT
x A]1
is not paired with [WyB]2 for any y. Thus it is conceivable to have
them in the same group, while keeping A, B (with which WT
x A,
Wx B are actually paired) in the other.
x A, Wx B are in the same group, we still need to find
Even if WT
a way to generate them through H. Suppose one can generate
x A]1 with the help of H somehow, how would she produce
[WT
[Wx B]1 without explicit knowledge of Wx ? We take a different
approach here: we discover a way to generate keys with the help
of [WT
x A]1 and B only! As a result, the structure of our keys is
very different from that of CGW. While their keys are in the basis
[Wx B]2, our keys end up having an additional random component
in the direction of a⊥, the vector orthogonal to A. Removing this
extra noise necessitates a more sophisticated analysis than CGW.
Indeed, we use an extra layer of hybrids on top of theirs to get rid
of the extra component.
Fame’s ciphertexts and keys have elements from both groups G
and H because, recall that, WT
x A and A as well as WyB and B reside
in different groups. Thus we do not know how to prove security
of Fame from the symmetric external Diffie-Hellman (SXDH or 1-
linear) assumption, which generally leads to most compact schemes.
Instead, we use a variant of the decisional linear assumption (DLIN
or 2-linear) on asymmetric groups (similar to [45], for example),
which is generically no stronger than the same assumption on
symmetric groups [17]—see §2.4 for details. Nonetheless, our CP-
and KP-ABE schemes perform better than even the SXDH variant of
CGW’s schemes on almost all parameters of interest by operating
primarily in the smaller and faster group G.
2 PRELIMINARIES
We first define some notation that will be used throughout the
paper. For a prime p, let Zp denote the set {0, 1, 2, . . . , p − 1} where
addition and multiplication are done modulo p. The set Z∗
p is same
as Zp but with 0 removed.
Let λ denote the security parameter. negl(λ) denotes a negligible
function, i.e., a function which is smaller than the inverse of any
polynomial, for all large enough values of λ. A randomized algo-
rithm is called PPT (probabilistic polynomial time) if its running
time is bounded by some polynomial in the length of its input.
We use bold letters to denote vectors and matrices, with the
former in lowercase and the latter in uppercase. By default, a vector
must be treated as a column vector. (v)k denotes the kth element
of a vector v. (M)i and (M)i, j denote the ith row and the (i, j)th
element of a matrix M, respectively. We use MT for the transpose of
4
i =1 aibi.
and b = (b1, . . . , bn), i.e., ⟨a, b⟩ =n
M. Also, ⟨a, b⟩ denotes the inner-product of vectors a = (a1, . . . , an)
For any finite set S, we use x ←R S to denote that x is chosen
uniformly at random from elements in S. Further, Sn denotes the
set {(a1, . . . , an)T | ai ∈ S for i = 1, . . . , n} and, similarly, Sn×m
denotes the set of matrices with n rows and m columns, each of
whose elements lie in S.
Finally, y ← Alg(x) denotes that y is the output of running
algorithm Alg on input x with uniformly random bits.
2.1 Access structures
An access structure or policy specifies the set of attributes required
to gain access to some secret. More formally,
Definition 2.1 (Access structure). If U denotes the universe of
attributes, then an access structure A is a collection of non-empty
subsets of U, i.e., A ⊆ 2U \ {0}. It is called monotone if for every
B, C ⊆ U such that B ⊆ C, B ∈ A ⇒ C ∈ A.
Monotonicity captures the natural idea that if an authorized user
acquires more attributes, he/she cannot lose her privileges because
of that.
A natural way to think about access control is in terms of (mono-
tone) Boolean formulae with AND and OR gates, where each
input is associated with an attribute in U. A set of attributes S ⊆ U
satisfies a formula if it evaluates to true on setting all inputs that
map to some attribute in S to true, and the rest to false.
Boolean formulae fall into a more general class of functions
called monotone span programs (MSPs) (or linear secret sharing
schemes [50]). An MSP is given by a matrix M of size n1 × n2 over
Zp and a mapping π : {1, . . . , n1} → U. In [44], Lewko and Waters
describe a simple and efficient method to convert any (monotone)
Boolean formula F into an MSP (M, π) such that every row of M
corresponds to an input in F and the number of columns is same
as the number of AND gates in F. Furthermore, each entry in M is
either a 0, 1 or −1.5
| i ∈ {1, . . . , n1}, π(i)
∈ S} be the set of rows in M that belong to S. We say that (M, π)
accepts S if there exists a linear combination of rows in I that gives
(1, 0, . . . , 0). More formally, there should exist coefficients {γi}i∈I
such that
Let S be a set of attributes and I = {i
γi(M)i = (1, 0, . . . , 0),
(2.1)

i∈I
where (M)i is the ith row of M. It is worth nothing that if Lewko and
Water’s method is applied on Boolean formulas, then it is always
possible to pick coefficients that are either 0 or 1 for the resulting
MSPs, irrespective of the set S.
Finally we state a lemma that will be useful in the security anal-
ysis of our ABE schemes. (See [13, Claim 2] for a proof.)
Lemma 2.2. If an MSP (M, π) is not satisfied by a set of attributes
S, then there exists a vector w whose first entry is non-zero and ∀ i
such that π(i) ∈ S, ⟨w,(M)i⟩ = 0.
5If a formula has general k-out-of-n threshold gates, then M’s entries may have a
larger range. (A threshold gate evaluates to true if any of the k out of n inputs are
true. Hence, OR is a 1-out-of-2 gate and AND is a 2-out-of-2 gate.)
5
2.2 Ciphertext-policy ABE
A ciphertext-policy ABE scheme over a message space M is given
by four algorithms that behave as follows:
a public key pk and a master secret key msk.
• Setup(1λ). Given the security parameter λ as input, it outputs
• Encrypt(pk, A, msg). On input the public key pk, an access
structure A (in the form of a Boolean formula, MSP, etc.),
and a message msg ∈ M, it outputs a ciphertext ct.
• KeyGen(msk, S). On input the master secret key msk and a
set of attributes S, it outputs a secret key sk.
• Decrypt(pk, ct, sk). On input the public key pk, a ciphertext
ct, and a secret key sk, it outputs a message msg∗ ∈ M or a
special symbol ⊥.
Even though not explicitly stated, every algorithm above receives
λ as input, and must run in poly(λ) time. They must also satisfy
the following correctness condition: For all messages msg ∈ M,
access structures A, and set of attributes S that lie in A, and for
all (pk, msk) ← Setup(λ), Pr[Decrypt(pk, ct, sk) (cid:44) msg] ≤ negl(λ),
where ct ← Encrypt(pk, A, msg) and sk ← KeyGen(msk, S). (Decrypt
is assumed to be deterministic w.l.o.g.)
We assume that ciphertexts and keys also contain a description
of the access structure and set of attributes, respectively, that they
encode. But since in practice the description size will be much
smaller compared to the cryptographic part, we do not consider it
any further.
2.3 IND-CPA security
Intuitively, an ABE scheme is secure against chosen plaintext at-
tacks (CPA) if no group of colluding users can distinguish between
encryption of m0 and m1 under an access structure A⋆ of their
choice as long as no member of the group is authorized to decrypt
on his/her own. Such attacks could occur any time after the deploy-
ment of ABE scheme. Thus the choice of A⋆ is influenced by the
public parameters and the keys in possession of the colluding users.
When this is taken into account, one gets adaptive or full security.
On the other hand, a weaker notion called selective security only
prevents CPA attacks when A⋆ is chosen even before the system is
deployed, which is unlikely to happen in practice.
Adaptive security for an ABE scheme Π is formally defined with