## **前言:**
**最近做了一道WEB题，涉及到XML外部实体注入（即XXE漏洞），恰好也没有系统的学习过，这次就了解一下XXE漏洞。**
## **0x01:简单了解XML**
    XML 指可扩展标记语言（EXtensible Markup Language）
    XML 是一种标记语言，很类似 HTML
    XML 被设计为传输和存储数据，其焦点是数据的内容
    XML 被设计用来结构化、存储以及传输信息
    XML 允许创作者定义自己的标签和自己的文档结构
### **XML的优点：**
`xml`是互联网数据传输的重要工具，它可以跨越互联网任何的平台，不受编程语言和操作系统的限制，非常适合Web传输，而且xml有助于在服务器之间穿梭结构化数据，方便开发人员控制数据的存储和传输。
### **XML的特点及作用：**
**特点：**
    1. xml与操作系统、编程语言的开发平台都无关
     2. 实现不同系统之间的数据交互
**作用：**
    1. 配置应用程序和网站
     2. 数据交互
而且在配置文件里边所有的配置文件都是以`XMl`的格式来编写的，跨平台进行数据交互，它可以跨操作系统，也可以跨编程语言的平台,所以可以看出XML是非常方便的，应用的范围也很广，但如果存在漏洞，那危害就不言而喻了。
### **XML语法、结构与实体引用：**
**语法：**
    1.XML元素都必须有关闭标签。
    2.XML 标签对大小写敏感。
    3.XML 必须正确地嵌套。
    4.XML 文档必须有根元素。
    5.XML 的属性值须加引号。
**结构：**
    1.XML 文档声明，在文档的第一行
    2.XML 文档类型定义，即DTD，XXE 漏洞所在的地方
    3.XML 文档元素
如：  
**实体引用：**  
在 XML 中一些字符拥有特殊的意义，如果把字符 `hello 
便会报错，为了避免这些错误，可以实体引用来代替 `hello &lt; world
`XML` 中，有 5 个预定义的实体引用，分别为：  
上面提到XML 文档类型定义，即DTD，XXE 漏洞所在的地方，为什么这个地方会产生XXE漏洞那，不要着急，先来了解一下DTD。
## 0x02 了解DTD：
文档类型定义（DTD）可定义合法的XML文档构建模块。它使用一系列合法的元素来定义文档的结构。DTD 可被成行地声明于 XML
文档中，也可作为一个外部引用。
**优点：**
    有了DTD，每个XML文件可以携带一个自身格式的描述。
    有了DTD，不同组织的人可以使用一个通用DTD来交换数据。
### **DTD文档的三种应用形式：**
**1.内部DTD文档**
**2.外部DTD文档**
**3.内外部DTD文档结合**
例如：  
上半部分是 **内部DTD文档** ，下半部分是XML文档  
`#PCDATA（Parsed Character Data）` ，代表的是可解析的字符数据，即字符串
下面再举一个 **外部DTD文档** 的例子：  
新建一个DTD文档，文件名叫`LOL.dtd`，内容如下:
再新建一个XML文档，加入外部DTD文件的名称（同一个路径下只给出文件名即可）
        a
        b
        c
具体例子可以参考  
[有效的XML:
DTD（文档类型定义）介绍](http://www.cnblogs.com/mengdd/archive/2013/05/28/3102893.html)
### DTD元素
在一个 DTD 中，元素通过元素声明来进行声明。  
其中可以看到一些PCDATA或是CDATA，这里简单叙述一下：
**PCDATA：**
`PCDATA` 的意思是被解析的字符数据`（parsed character data）`。可以把字符数据想象为 XML
元素的开始标签与结束标签之间的文本。`PCDATA`
是会被解析器解析的文本。这些文本将被解析器检查实体以及标记。文本中的标签会被当作标记来处理，而实体会被展开。但是，被解析的字符数据不应当包含任何 `& ` 字符；需要使用 `&amp; &lt; &gt;` 实体来分别替换它们。
**CDATA：**  
`CDATA` 的意思是字符数据`（character data）`。`CDATA`
是不会被解析器解析的文本。在这些文本中的标签不会被当作标记来对待，其中的实体也不会被展开。
简单比较直观的就是这样的一种解释：  
`PCDATA`表示已解析的字符数据。  
`CDATA`是不通过解析器进行解析的文本，文本中的标签不被看作标记。CDATA表示里面是什么数据XML都不会解析
### **DTD-实体**
    实体是用于定义引用普通文本或特殊字符的快捷方式的变量。
    实体引用是对实体的引用。
    实体可在内部或外部进行声明。
**内部实体**
一个实体由三部分构成: `&`符号, 一个实体名称, 以及一个分号 `(;)`  
例如：
    ]>
    &xxe;
**外部实体**
`XML`中对数据的引用称为实体，实体中有一类叫外部实体，用来引入外部资源，有`SYSTEM`和`PUBLIC`两个关键字，表示实体来自本地计算机还是公共计算机，外部实体的引用可以利用如下协议
    file:///path/to/file.ext
    http://url/file.ext
    php://filter/read=convert.base64-encode/resource=conf.php
**参数实体**
例如:
    %xxe;]>
    &evil;
外部`evil.dtd`中的内容
**外部实体** 可支持`http`、`file`等协议，所以就有可能通过引用外部实体进行远程文件读取
    ]>
    &xxe;
上述代码中，XML的外部实体`xxe`被赋予的值为`：file:///etc/passwd`当解析xml文档是，`&xxe;`会被替换为`file:///ect/passwd`的内容，导致敏感信息泄露
（例子参考大师傅博客[XXE漏洞学习](http://www.cnblogs.com/zhaijiahui/p/9147595.html#autoid-2-1-0)）
可能这些知识点会枯燥无味，但`XXE`主要是利用了`DTD引用外部实体`而导致的漏洞，所以了解还是很有必要的,接下来就要进入正题咯。
## 0x02:一步一步接近XXE漏洞
### 漏洞危害：
如果开发人员在开发时 **允许引用外部实体** 时，恶意用户便会利用这一漏洞构造恶意语句，从而引发 **文件读取** 、 **命令执行** 、
**内网端口扫描** 、 **攻击内网网站** 、 **发起dos攻击** 等，可见其危害之大。
### XXE常见的几种攻击方式
**（这张图其实就很好的解释了如何利用XXE进行攻击）**
`XXE`和`SQL`注入的攻击方法也有一点相似，就是有 **回显和没有回显**