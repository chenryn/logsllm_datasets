• Re-encryption key generation oracle OReKeyGen(pki, pkj):
If i ∈ Uh and j ∈ Ue, C outputs ⊥; otherwise C runs
ReKeyGen to obtain rki→j , and returns it to A.
• Re-encryption oracle OReEnc(pki, pkj, C): C runs rki→j ←
ReKeyGen(ski, pkj ), computes C(cid:3) ← ReEnc(rki→j, C),
and returns C(cid:3) to A.
• Decryption oracle ODec(pki, C): Given the ciphertext
C (either a ﬁrst level ciphertext or second level cipher-
text), C runs {m, ⊥} ← Dec(ski, C) and returns the
result to A.
Challenge: Once A decides that Phase 1 is ﬁnished, it
outputs a public key pk∗, and two messages m0, m1 of equal
R← {0, 1}, runs
length, and sends them to C. C selects λ
C∗ ← Enc(pk∗, mλ), and returns C∗ to A. Here the user with
respect to pk∗ should be uncorrupted, namely belonging to
Uh.
Phase 2: A queries oracles in polynomially many times
with these restrictions.
• OKeyGen(i) and OReKeyGen(pki, pkj) : Work as in Phase
1.
• OReEnc(pki, pkj , C): If i ∈ Uh and j ∈ Ue, output ⊥,
otherwise work as in Phase 1.
• ODec(pki, C): Work as in Phase 1, subject to the con-
ditions that (i)A cannot query ODec if pki = pk∗ and
C = C∗, and (ii) A cannot query ODec if C is the ci-
phertext computed with a re-encrypted key of pk∗ and
pki.
Guess: Finally, A outputs a guess λ(cid:3) ∈ {0, 1}. A wins the
game if λ(cid:3) = λ.
Definition 2. Given any polynomial time adversary A,
we say a single-hop, unidirectional PRE scheme is CCA se-
cure for second level ciphertexts, if the probability of A win-
ning CCA-security game is at most 1
2 + ((cid:4)), where  is neg-
ligible in security parameter (cid:4).
Deﬁnition 2 describes the CCA security for second level
ciphertexts. We also can deﬁne a complementary deﬁnition
of CCA security for ﬁrst level ciphertexts. We skip this and
refer readers to [17].
Anonymity notion: Now we deﬁne the anonymity notion
for re-encryption keys, which is partially inspired by prior
anonymity notions in [5, 19, 20]. The anonymity notion for
second level ciphertexts can be referred to [7].
We simulate the following anonymous game between an
adversary A and a challenger C, where C maintains a re-
encryption key list storing all rki→j for users i and j with
the form (i → j, {(rki→j, query)}). i → j is the search key to
identify each pair of users, and {(rki→j, query)} is a set of re-
encryption keys, each of which is associated with a boolean
indicator query. If rki→j has been queried via OReKeyGen, then
query = 1; otherwise query = 0. Initially, {(rki→j , query)}
is empty for the search key (i, j). The anonymous game
proceeds as follows, where C runs Setup(1(cid:2)) to set up the
public parameter.
Phase 1: The adversary A queries oracles below in polyno-
mially many times.
• OKeyGen(i): It works the same as OKeyGen(i) described
in CCA-security game.
• OReKeyGen(pki, pkj ): Given pki and pkj, C fetches (i →
j, {(rki→j , query)}) and works as follows:
1. If {(rki→j, query)} is null or all rki→j have been
queried (i.e., all indicators query = 1), C runs
rki→j ← ReKeyGen(ski, pkj ), adds (rki→j , query =
1) to the set {(rki→j, query)} , and returns rki→j;
2. Otherwise C selects rki→j from {(rki→j , query =
0)} uniformly at random, updates query = 1 for
rki→j , and passes rki→j to A.
251• OReEnc(pki, pkj , C): Given pki and pkj, C fetches (i →
j, {(rki→j, query)}) and works as follows:
1. If {(rki→j, query)} is null, C runs rki→j ← ReKeyGen
(ski, pkj ) and adds (rki→j, query = 0) to the set
{(rki→j, query)};
2. Otherwise C randomly selects rki→j from the set
{(rki→j, query)}.
Finally, C runs C(cid:3) ← ReEnc(rki→j , C) and returns C(cid:3)
to A.
• ODec(pki, C): C executes {m, ⊥} ← Dec(ski, C) and re-
turns the result to A. Note that C can be either a ﬁrst
level ciphertext or a second level ciphertext.
Challenge: Once A decides that Phase 1 is ﬁnished, it
outputs a pair of users (i∗, j∗). C fetches (i∗ → j∗, {(rki∗→j∗ ,
query)}) and works as follows:
• If i∗ ∈ Ue or j∗ ∈ Ue, C aborts;
• If the set {(rki∗→j∗ , query)} is null or all rki∗→j∗ have
been queried (i.e., all indicators query = 1), C runs
rki∗→j∗ ← ReKeyGen(ski∗ , pkj∗ ), and adds (rki∗→j∗ ,
query = 1) to the set {(rki∗→j∗ , query)};
• Otherwise C selects a rki∗→j∗ from {(rki∗→j∗ , query =
0)} uniformly at random, and updates query = 1 for
rki∗→j∗ .
R← {0, 1}.
C selects λ
If λ = 0, C delivers rki∗→j∗ to A,
otherwise returns a re-encrypted key selected from the re-
encryption key space uniformly at random.
Phase 2: A can continually query the oracles in polynomi-
ally many times.
• OKeyGen(i), OReKeyGen(pki, pkj ) and OReEnc(pki, pkj, C):
Works as in Phase 1.
• ODec(pkj, C): Work as in Phase 1 while being subject to
the condition that A cannot query ODec, where pkj =
pkj∗ . 2
Guess: Eventually, A outputs a guess λ(cid:3) ∈ {0, 1} and wins
the game if λ(cid:3) = λ.
Remark 1. Let us consider the challenge phase. If λ =
0, then C returns the valid re-encryption key rki∗→j∗ . Ac-
cess to OReEnc(pki, pkj , C) enables A to obtain enough ﬁrst
level ciphertexts re-encrypted with rki∗→j∗ . However, the
anonymity notion [19, 20] cannot model this case, because
OReKeyGen(pki, pkj) does not return this rki∗→j∗ to A.
Definition 3. We say a single hop, unidirectional PRE
scheme is anonymous for re-encryption keys, if for any poly-
nomial time adversary A, the probability of A winning the
anonymous game is at most 1
2 + ((cid:4)), where  is negligible in
security parameter (cid:4).
Deﬁnition 3 characterizes the anonymity of the re-encrypted
key and [5] has discussed that the anonymity of re-encryption
keys implies the anonymity of ﬁrst level ciphertexts.
2The reason is that it is hard for the challenger to distin-
guish whether C is a ﬁrst level ciphertext computed by the
challenge re-encrypted key or not. This problem also exists
in [19, 20] in order to simulate the decryption oracle.
3. ANONYMOUS AND CCA SECURE PRE
CONSTRUCTION
3.1 Cryptographic Assumptions
Let G, GT be two cyclic groups of order q, a (cid:4)1−bit prime,
and g be a generator of G. Let e be a bilinear map: e :
R← Zq, e(gx, gy) = e(g, g)xy,
G×G → GT satisfying: (i) ∀x, y
(ii) e(g, g) (cid:7)= 1, and (iii) e can be computed eﬃciently.
Let H0, H1, H2, H3 be secure hash functions modeled as
random oracles, s.t. H0 : G → G, H1 : {0, 1}(cid:2)2 × GT →
Zq, H2 : G×GT ×G×{0, 1}(cid:2)2 → G, H3 : {0, 1}6(cid:2)1 +(cid:2)2 ×GT →
Zq and H4 : Zq → Zq, where (cid:4)2 is another security param-
eter. Let F1, F2 be two secure pseudorandom generators,
where F1 : GT → {0, 1}(cid:2)2 and F2 : GT → {0, 1}6(cid:2)1 +(cid:2)2 .
R← Zq and Q
Decisional Bilinear Diﬃe-Hellman (DBDH) Given (g,
R← GT , for any prob-
gx, gy, gz, Q) where x, y, z
abilistic polynomial algorithm A, the advantage of A deter-
?
= e(g, g)xyz is negligible to security parameter (cid:4)1
mining Q
at most, where the advantage is deﬁned as
|Pr[A(g, gx, gy, gz, e(g, g)xyz) = 1]
− Pr[A(g, gx, gy, gz, Q) = 1]|.
Squared Decisional Bilinear Diﬃe-Hellman (SDBDH)
R← GT , for
[25] Given (g, gx, gy, Q) where x, y
any probabilistic polynomial algorithm A, the advantage of
?
= e(g, g)x2y is negligible to security pa-
A determining Q
rameter (cid:4)1 at most, where the advantage is deﬁned as
R← Zq and Q
|Pr[A(g, gx, gy, e(g, g)x2y) = 1]
− Pr[A(g, gx, gy, Q) = 1]|.
3.2 Our Construction
The anonymous and CCA secure PRE scheme can be con-
structed as follows:
setup(1(cid:2)): Given the security parameter (cid:4), it obtains two
secondary security parameters (cid:4)1, (cid:4)2, and instantiates H0,
H1, H2, H3, H4, F1, F2 and the bilinear map (q, g, G, GT , e)
as in section 3.1, where q is a (cid:4)1-bit prime and the message
m ∈ {0, 1}(cid:2)2 . In addition, let g1
R← G and set
Param = {q, g, g1, G, GT , e}.
KeyGen(i): For use i, this algorithm selects ai
sets
R← Zq and
ski = ai, pki = gai .
ReKeyGen(ski, pkj ): This algorithm generates the re-encryption
key by selecting s, t, w
rk3, rk4, rk5, rk6) as
R← Zq and setting rki→j = (rk1, rk2,
(H0(pki)−ski · pkH4(s·ski)
j
, gH4(s·ski)gt
1, gt, gw,
e(pkj, pkj)tw, e(pkj, g)tw)
Note that rk5 cannot be altered due to unknown t and w.
Thus, the re-encryption key rk cannot be manipulated (Ma-
nipulating rk5, rk6 will be detected in Dec when decrypting
ﬁrst level ciphertexts.)
252Enc(pki, m): Given m ∈ {0, 1}(cid:2)2 and pki, this algorithm
R← GT ,
generates a second level ciphertext by selecting R
computing r = H1(m, R), and setting C = (C1, C2, C3, C4,
C5) as
(gr, R · e(pki, H0(pki))r, m
(cid:3)
F1(R), gr
1,
H2(C1, C2, C3, C4)r)
Here we apply the Fujisaki-Okamoto (FO) transformation
[13] to generate C.
3.3 Security Analysis
We show the theorem regarding CCA security for second
level ciphertexts as follows. Similarly, we can prove our
scheme achieves CCA security for ﬁrst level ciphertexts and
omit it here.
Theorem 1. Assume that the DBDH assumption holds,
the PRE scheme is CCA secure in the random oracle model
for second level ciphertexts.
Proof. The challenger C maintains random oracles as
ReEnc(rki→j , C): This algorithm ﬁrst checks
follows:
• Oracle OH0 : If H0(pk) has been queried before, it re-
trieves β from OH0 according to pk; otherwise it se-
R← Zq, lets H0(pk) = (gy)β, and adds (pk, β)
lects β
into OH0 . It returns (gy)β.
),
• Oracles OH1 , OH2 , OH3 ,OH4 , OF1 and OF2 are mod-
eled as random oracles and we skip their details.
Suppose the challenger C is given a DBDH instance of
R← GT , and
(g, gx, gy, gz, Q), where x, y, z
x, y, z are unknown. C simulates the CCA-security game with
R← Zq is known to C, and
A by letting g1 = gc, where c
proceeds the game as follows.
R← Zp, and Q
Phase 1: A can challenge the oracles in polynomially may
times and C responds as follows:
OKeyGen(i): C responds as follows:
• i ∈ Uh: If user i has been queried before, it retrieves
R← Zq, lets pki =
pki from Oh; otherwise C selects ai
(gx)ai , and adds (i, pki, ai) into Oh. It returns pki to
A, where it implicitly deﬁnes ski = x · ai.
• i ∈ Ue: If user i has been queried before, it returns
R← Zq, lets
(pki, ski) from Oe; otherwise C selects bi
pki = gbi , ski = bi, adds (i, pki, ski) into Oe, and re-
turns (pki, ski) to A.
OReKeyGen(pki, pkj): C generates rki→j = (rk1, rk2, rk3, rk4,
R← Zq,
rk5, rk6) for a pair of users i and j by selecting s, t, w
and :
e(g, C5)
?
= e(C1, H2(C1, C2, C3, C4)).
If the equation does not hold, it aborts; otherwise it re-
encrypts C = (C1, C2, C3, C4, C5) to a ﬁrst level ciphertext
under pkj as follows:
• Let T1 = C1 = gr, T2 = C2·e(C1, rk1) = R·e(gr, pkH4(s·ski)
j
(cid:4)
F1(R) and T4 = C4 = gr
1, and set
T3 = C3 = m
Γ = T1||T2||T3||T4||rk2||rk3||rk4.
• Select R(cid:3) R← GT and let r(cid:3) = H3(Γ, R(cid:3)), and set a ﬁrst
level ciphertext C(cid:3) = (C(cid:3)
1, C(cid:3)
3) as
2, C(cid:3)
(cid:3)
(rkr(cid:3)
6 , R(cid:3)rkr(cid:3)
5 , Γ
F2(R(cid:3)))
The intermediate ciphertext (T1, T2, T3) cannot be manip-
ulated because r, m, R are correlated with each other and
the relation among them will be veriﬁed in decryption. It
is worth noting that we apply FO transformation again to
generate C(cid:3) in order to achieve the CCA security for the ﬁrst
level ciphertext.
Dec: It decrypts the ciphertext correspondingly:
• Given a second level ciphertext C = (C1, C2, C3, C4,
C5), it decrypts with ski = ai: