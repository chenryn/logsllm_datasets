# Performance Impact of FLIPS Proxy Subcomponents

The following graph (Fig. 6) illustrates the performance impact of the FLIPS proxy subcomponents on baseline performance, using two different traffic traces. The smaller trace, consisting of 529 requests, is measured on the right vertical axis. The graph shows the increase in average time to service a number of requests when the proxy is inserted between the client and the HTTP server, and again when filtering in the proxy is enabled.

![Performance Impact of FLIPS Proxy Subcomponents](path_to_image)

## Hypothesis 4: The End-to-End Test

To demonstrate the operation of the system, we introduced a synthetic code injection vulnerability into Apache. The vulnerability was a simple stack-based overflow of a local fixed-size buffer. The function was protected with STEM, and we observed the time it took for FLIPS to stop the attack and deploy a filter against further instances.

### Challenges in Inserting Vulnerability
Inserting the vulnerability into Apache was the most challenging part of this experiment. The platform used for FLIPS (Fedora Core 3) employs address space randomization via the Exec-Shield utility. We disabled this by setting `/proc/sys/kernel/exec-shield-randomize` to zero. Additionally, we marked the `httpd` binary as needing an executable stack using the `execstack` utility.

### Testing the End-to-End Functionality
To test the end-to-end functionality, we directed two streams of attack instances against Apache through our proxy. The first stream consisted of 67 identical attack instances, followed by a second stream of 22 attacks with slight variations. 

- **First Attack Stream**: FLIPS successfully blocked 61 out of 67 attack instances. It allowed the first six instances through before STEM had enough time to feedback to FLIPS. It took approximately one second for FLIPS to start blocking the attacks. After that, each subsequent identical attack instance was blocked by the direct match filter.
- **Second Attack Stream**: This stream contained 22 variations of the original attack. The LCS filter (with a threshold of 60%) successfully blocked 20 of these. This result indicates that FLIPS can effectively stop metamorphic attacks.

Our results are summarized in Table 3.

| Attack Stream       | Total # of Requests | Time to Block | Requests Blocked |
|---------------------|---------------------|---------------|------------------|
| Homogeneous Stream  | 67                  | 1 sec         | 61               |
| Mixed Stream        | 22                  | n/a           | 20               |

### Future Work
There is significant room for improvement in the field of intrusion prevention. Our future work will focus on several areas:

1. **Extending the Proxy**: We will enhance the proxy to handle different services and clients.
2. **Enhancing HTTP Handling**: We will extend our current treatment of HTTP to include request headers and entity bodies, enabling us to verify our experimental results against real Apache vulnerabilities.
3. **Augmenting Supervision Elements**: We plan to add mechanisms like input taint-tracking, which may be less expensive than ISR.
4. **General Architecture**: We intend to explore using `iptables` and `libipq` as the basis of input for a more general architecture.
5. **Signature Exchange**: We are researching methods to exchange signatures generated by FLIPS with other FLIPS instances to provide inoculation to members of an Application Community [19].

### Conclusions
Intrusion detection systems traditionally focus on identifying attempts to breach computer systems and networks. However, detecting intrusions remains a challenging problem, and automated, intelligent responses to intrusion alerts are often manual processes executed by overburdened system administrators.

We presented FLIPS, an intrusion prevention system that combines anomaly classification and signature matching to block binary code injection attacks. Feedback for this hybrid detection system is provided by STEM, an x86 emulator capable of performing instruction set randomization (ISR). STEM can identify injected code, recover from an attack, and forward the attack code to the anomaly and signature classifiers. We have shown how FLIPS can detect, halt, repair, and create a signature for previously unknown attacks. While we demonstrated an implementation of FLIPS that protects an HTTP server, its mechanisms are broadly applicable to host-based intrusion prevention.

### References
[References listed here as per the original text]

---

This revised version provides a clearer, more structured, and professional presentation of the content.