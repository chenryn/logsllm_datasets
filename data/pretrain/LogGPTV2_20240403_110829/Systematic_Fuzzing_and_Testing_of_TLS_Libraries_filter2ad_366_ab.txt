protocol. The extensions can add cryptographic abilities of
TLS peers (supported elliptic curves [22, 42]), deﬁne new
protocol messages (heartbeat [50]), or change the maximum
number of bytes transmitted in one TLS record (Maximum
Fragment Length [31]). Protocol extensions are negotiated
in the ClientHello and ServerHello messages and their
correct processing is also crucial for securing a TLS protocol
execution.
2.4 TLS Libraries
There are several widely used libraries supporting TLS,
ranging from open source libraries like OpenSSL to closed
source libraries like Microsoft’s SChannel (Secure Channel).
In this paper, we analyze the following TLS server imple-
mentations: Botan [1], GnuTLS [10], Java Secure Socket Ex-
tension [5], MatrixSSL [6], mbedTLS [7], and OpenSSL [8].
3. ATTACK CATEGORIZATION
Recent years have shown that despite the wide usage of
TLS, TLS libraries suﬀer from severe security vulnerabili-
ties. In this section we concentrate on the description of the
attacks relevant to our paper since they are necessary to de-
scribe our ﬁndings. Further attacks and their categorization
can be found in [43, 51].
We have organized the relevant attacks into three basic
categories.
3.1 Cryptographic Attacks
Padding oracle attacks. One of the main design failures
in SSLv3 and TLS is the speciﬁcation of the MAC-then-
Pad-then-Encrypt scheme in CBC cipher suites.
In 2002
Vaudenay showed that this scheme makes security protocols
potentially vulnerable to padding oracle attacks [55]. These
attacks are based on the malleability of the CBC mode of
operation. CBC allows an attacker to ﬂip speciﬁc bits in
the plaintext without knowing the secret key.
If a server
allows the attacker to distinguish between valid and invalid
padding bytes (e.g., by sending diﬀerent error messages), the
attacker can decrypt the message as follows. He starts with
decrypting the last message byte. To this end, he iteratively
ﬂips bits in this byte and sends the message to the server.
Once he receives a valid padding response, he knows he has
correctly guessed the 0x00 byte. This allows him to decrypt
the last plaintext byte. Afterwards, he can proceed with
further padding bytes and decrypt the whole message [55].
In order to mitigate this attack, the implementation must
not allow an attacker to distinguish valid from invalid padding
structures in the decrypted messages. In 2013 AlFardan and
Paterson presented the Lucky 13 attack [13] and showed
that implementing countermeasures against padding oracle
attacks in TLS is very challenging. Lucky 13 exploits a tim-
ing side-channel arising from the countermeasures described
in the TLS recommendation [27].
TLS implementations attempt to implement various coun-
termeasures to make padding oracle attacks impossible. How-
ever, recent evaluations and scientiﬁc studies show that TLS
implementations still contain insuﬃcient padding veriﬁca-
tions [24, 41] or are vulnerable to variants of the Lucky 13
attack [11, 35].
Bleichenbacher’s attack. One of the most important at-
tacks in TLS history is Bleichenbacher’s million message at-
tack [23]. The attack targets the RSA PKCS#1 v1.5 encryp-
tion scheme, which is used in the TLS protocol to encrypt
a shared secret between both TLS peers. Essentially, Ble-
ichenbacher’s attack is also a padding oracle attack. The
attack is based on the malleability of the RSA encryption
scheme and assumes the existence of an oracle that responds
with “valid” or “invalid” according to the PKCS#1 v1.5 va-
lidity of the decrypted message.
A server defending against this attack must not allow for
1494the distinction between valid and invalid ciphertexts. How-
ever, recent studies show insuﬃciencies in the application
of this countermeasure, in the Java TLS implementation
(JSSE) and the Cavium accelerator chips [44]. Further stud-
ies show how to improve eﬃciency of this attack or how to
apply it to diﬀerent protocols and standards [16, 15, 36].
3.2 State Machine Attacks
TLS is a complex protocol containing diﬀerent message
ﬂows. This results in complex state machine implementa-
tions which can contain severe security bugs. The ﬁrst rel-
evant security vulnerability was discovered in 2014 and was
named Early CCS, or CCS injection vulnerability [39]. This
vulnerability allows an attacker to inject an early Change-
CipherSpec message into the TLS handshake and force the
TLS peer to derive a shared key based on a null secret. If a
Man-in-the-Middle (MitM) attacker and both TLS peers use
vulnerable OpenSSL versions, the attacker can force both
peers to establish a connection using a null secret and thus
read the whole communication.
The Early CCS vulnerability prompted researchers to
search for state machine vulnerabilities. They found dif-
ferent unexpected state transitions in widely used TLS li-
braries [17, 25]. For example, the Java TLS implementa-
tion contained a serious vulnerability which allowed one to
ﬁnish the TLS handshake without ChangeCipherSpec mes-
sages. This resulted in a plaintext communication between
the client and the server.
3.3 Overﬂows and Overreads
The Heartbleed bug in OpenSSL [49] has shown cryptog-
raphy engineers how critical a simple buﬀer overread can
be. Heartbleed allowed an attacker to read random bytes
from a server’s memory, for example, private cryptographic
keys [53]. The reason was a buﬀer overread vulnerability
in the OpenSSL heartbeat processing implementation.
It
forced major servers to renew their private keys and certiﬁ-
cates.
In the recent years, additional problems in various TLS
libraries like buﬀer overﬂows or integer overﬂows have ap-
peared [29, 9, 2]. These buﬀer boundary violations moti-
vated us to execute further security evaluations of TLS im-
plementations.
4. REQUIREMENTS AND RELATED WORK
The recent development in the area of TLS and the high
number of memory and state machine attacks motivated us
to construct an enhanced evaluation of TLS implementa-
tions. In the following section we ﬁrst describe requirements
for a ﬂexible TLS library. We analyze diﬀerent approaches
to achieve these requirements, discussing their advantages
and disadvantages.
4.1 Requirements for a Flexible TLS Testing
Framework
Given the recent TLS attacks, we can summarize the fol-
lowing requirements for a new, ﬂexible analysis tool.
Flexible stateless TLS handshake execution. Flexible
protocol execution is necessary for state machine validations
as well as for diﬀerent fuzzing strategies. It is important that
the framework does not derive the current state from the
exchanged protocol messages. The security developer has to
be able to set the protocol execution state at an arbitrary
point of time, after an arbitrary number of messages have
been exchanged. For example, he is able to deﬁne speciﬁc
state transitions, or the exact point when the messages will
be encrypted.
Flexible modiﬁcation of arbitrary TLS variables. The
security developer has to be able to execute arbitrary mod-
iﬁcations to TLS variables. This includes various variables
used in the TLS protocol ﬂow, for example, length variables
indicating the length of TLS messages and extensions, as
well as speciﬁc cryptographic keys and secrets.
It is not
only necessary to simply set these variables, but the secu-
rity developer has to perform variable modiﬁcations at run-
time. For example, by evaluating the POODLE vulnerabil-
ity [45] in a TLS server library, a security engineer analyzes
whether a correct padding validation has been implemented.
For this purpose, he needs to execute modiﬁcations in spe-
ciﬁc plaintext bytes before the message gets encrypted in
the record layer. More precisely, if the plaintext message
consists of data||M AC||pad (data concatenated with MAC
and padding), the security developer is only interested in the
modiﬁcation of speciﬁc padding bytes (e.g., he wants to ap-
ply an XOR operation on the ﬁrst padding byte). The rest
of the plaintext message has to stay untouched, otherwise a
MAC failure can be triggered.
Systematic fuzzing of message variables. In order to
trigger speciﬁc vulnerabilities, the TLS testing framework
has to provide a list of variables given in the TLS protocol
and be able to systematically modify these variables.
Easy to use interface. The TLS testing framework has
to provide a simple interface to create new protocol ﬂows
and modiﬁcations. The security developer has to be able
to deﬁne new protocol sets or protocol fuzzings and execute
them automatically with the tested TLS library.
Detection of crashes and invalid protocol ﬂows. The
TLS testing framework has to provide an ability in order
to detect TLS server crashes or invalid protocol ﬂows. If a
failure is detected, the protocol ﬂow has to be recorded and
the developer has to be able to execute the same protocol
ﬂow to re-analyze the discovered issue (e.g., after triggering
a buﬀer overﬂow).
4.2 Approaches and Related Work
The ﬁrst trivial approach is to patch an existing TLS li-
brary. However, patching every variable in the TLS protocol
ﬂow could be complicated. The code would need to be modi-
ﬁed at diﬀerent places, nested in several function levels. This
would result in a huge overhead, especially when considering
the complex code of open source libraries like OpenSSL.
Another possible approach is to use a TLS library and
control its ﬂow using a debugging interface. For example,
the Java Platform Debugger Architecture (JPDA) [4] pro-
vides a programming interface that allows a developer to
create software agents which can monitor and control Java
applications. The developer could use the JSSE library and
write a fuzzing extension within a Java agent. The agent
would modify only the needed variables directly during TLS
protocol ﬂow. This would allow one to execute correct TLS
message ﬂows and modify only speciﬁc variables. This ap-
proach, however, has a signiﬁcant drawback. TLS libraries
are constructed to execute correct TLS protocol ﬂows. In
1495order to trigger the Early CCS vulnerability or other state
machine attacks, an invalid TLS protocol ﬂow has to be
constructed.
A possible approach to execute fuzzing attacks is to take
a fuzzing framework (e.g., Peach Fuzzer1 or American Fuzzy
Lop2) and initialize it with an intercepted TLS protocol ﬂow.
The fuzzer generates its messages based on the given proto-
col messages and sends them to the server. This approach
could be applied to several plaintext messages in the TLS
handshake. However, the TLS protocol ﬂow also contains
messages that are encrypted and authenticated using freshly
generated keys. For example, in order to send a Heartbeat
message, the complete TLS handshake must be executed
ﬁrst [50].3
De Ruiter and Poll implemented a customized tool to eval-
uate TLS state machines [25]. Their tool, however, does
not allow one to modify custom protocol message variables.
Berdouche et al. designed a novel TLS tool – FLEXTLS [18].
FLEXTLS was previously used to develop many prominent
attacks (e.g., Triple Handshake [19]) and to discover state
machine attacks [17]. This tool allows one to construct new
protocol message ﬂows and set custom variable values. How-
ever, in FLEXTLS the variables can only be initialized with
explicit values. The tool is not intended to perform dynamic
variable modiﬁcations. This means that more diﬃcult mod-
iﬁcations of variables with XOR or ADD operations are not
supported. Furthermore, no TLS fuzzing is supported.
Very recently, two novel TLS testing frameworks have
been developed:
tlsfuzzer and Scapy-SSL/TLS [38, 46].
These TLS frameworks support stateless protocol executions
and variable modiﬁcations. They are useful for developing
new attacks and protocol modiﬁcations. Currently, they do
not contain any consistent fuzzing strategies, nor dynamic
variable modiﬁcations.
5. TLS-ATTACKER: DESIGN AND IMPLE-
MENTATION
The state-of-the-art of TLS evaluations motivated us to
develop a novel ﬂexible TLS framework. The main goal of
this framework is to oﬀer developers and security engineers
a simple and accessible approach to evaluate their TLS im-
plementations.
TLS-Attacker is implemented in Java with the support of
the Maven project management tool.4
5.1 Modiﬁable Variables
At the heart of our framework, we implement a construct
called ModifiableVariable. A ModifiableVariable is a
wrapper for simple data types like integers or byte arrays.
This wrapper contains the original value of a speciﬁc variable
and provides its value by a getter method. While accessing
the variable, the ModifiableVariable container is able to
apply predeﬁned modiﬁcations.
1http://peachfuzzer.com
2http://lcamtuf.coredump.cx/aﬂ
3We note that the Heartbleed bug could have been triggered
by sending an unencrypted Heartbeat message during the
TLS handshake since the vulnerable OpenSSL version incor-
rectly accepted the Heartbeat message before the Change-
CipherSpec message.
4https://maven.apache.org
A simpliﬁed example of this construct provided for integer
data types gives the following listing:
c l a s s M o d i f i a b l e I n t e g e r {
p u b l i c
p r i v a t e i n t o r i g V a l u e ;