framework, either the exact version or a compatible version of that framework must exist for the application
to run. Major version differences are incompatible, whereas minor version differences are compatible. A
single framework bundle may contain multiple major versions. The framework shown in Figure 213
contains two versions, A and B. Moreover, all files and directories in the framework's top-level directory,
except Versions, are symbolic links to entities belonging to the major version Current. Foo, the file with
the same name as that of the framework directory's prefix, is the main dynamic shared library.
Figure 214 shows the standard Mac OS X frameworks categorized by the typical purposes they are used for.
Figure 214. Standard frameworks on Mac OS X
[View full size image]
file://C:\Dokumente und Einstellungen\Silvia\Lokale Einstellungen\Temp\~hhF139.htm 20.08.2007
Chapter 2. An Overview of Mac OS X Page 31 of 80
An umbrella framework can contain other subframeworks and even other subumbrella frameworks.
Umbrella frameworks are used to hide interdependencies between discrete system libraries by effectively
presenting a metalibrary that is the union of all libraries within it. An umbrella framework's bundle structure
is similar to that of a standard framework, but it also contains a subdirectory called Frameworks, which
contains subframeworks. Typically, the programmer may not link directly to subframeworks.[34] In fact, the
programmer need not know whether a framework is an umbrella framework or notlinking to an umbrella
framework automatically provides access to its constituents. At runtime, if the dynamic linker comes across
a symbol that has been recorded as "contained in an umbrella framework," the linker will search the
umbrella framework's subframeworks, sublibraries, and subumbrellas. Similarly, an umbrella framework's
header files automatically include any header files in the subframeworks. Figure 215 shows the standard
umbrella frameworks on Mac OS X.
[34] While compiling an umbrella framework, it is possible to specify through a linker option
that a given client name can link to a given subframework, even though the client is externalsay,
a bundle. The client name for a bundle is also set through a linker option while compiling the
bundle.
Figure 215. Standard umbrella frameworks on Mac OS X
[View full size image]
file://C:\Dokumente und Einstellungen\Silvia\Lokale Einstellungen\Temp\~hhF139.htm 20.08.2007
Chapter 2. An Overview of Mac OS X Page 32 of 80
Frameworks can also be private in that they are unavailable for linking by user programs. Some frameworks
are private because they are embedded within other bundles such as application bundles. Mac OS X contains
a number of frameworks that are private to Apple. These reside
in /System/Library/PrivateFrameworks/. Examples of private frameworks include
DiskImages.framework, Install. framework, MachineSettings.framework,
SoftwareUpdate.framework, and VideoConference.framework. Their privacy is manifested in the
following ways from the standpoint of a third-party programmer.
Apple does not publish the APIs of these frameworks. Even their header files are not available.
By default, a third-party programmer cannot link with these frameworks. However, it is possible to
link with a private framework by explicitly passing the full pathname of its containing directory to the
linker. Doing so is unsupported by Apple.
When a dynamically linked program is compiled, the installation paths of the libraries it links with are
recorded in the program. These paths are typically absolute for system frameworks that are part of Mac OS
X. Some applications, particularly third-party applications, may contain their own frameworks within their
application bundles. Paths to such frameworks or libraries, when recorded in an application, can be recorded
relative to the application bundle.
When the dynamic link editor needs to search for frameworks, the fallback paths it uses are
~/Library/Frameworks/, /Library/Frameworks/, /Network/Library/Frameworks/,
and /System/Library/Frameworks/, in that order. Similarly, fallback paths for dynamic libraries are
~/lib/, /usr/local/lib/, and /usr/lib/. Note that path searching is not performed in a user's home
directory for setuid programs that are not executed by the real user.
2.8.4. Prebinding
Mac OS X uses a concept called prebinding to optimize Mach-O applications to launch faster by reducing
the work of the runtime linker.
As we saw earlier, the dynamic link editor, dyld, is responsible for loading Mach-O code modules,
resolving library dependencies, and preparing the code for execution. Resolving undefined symbols in
executables and dynamic libraries at runtime involves mapping the dynamic code to free address ranges and
computing the resultant symbol addresses. If a dynamic library is compiled with prebinding support, it can
file://C:\Dokumente und Einstellungen\Silvia\Lokale Einstellungen\Temp\~hhF139.htm 20.08.2007
Chapter 2. An Overview of Mac OS X Page 33 of 80
be predefined at a given preferred address range.[35] This way, dyld can use predefined addresses to
reference symbols in such a library. For this to work, libraries cannot have overlapping preferred addresses.
To support prebinding, Apple marks several address ranges as either reserved or preferred for its own
software and specifies allowable ranges for use by third-party libraries.
[35] A framework's preferred address can be specified at compile time using the seg1addr linker
flag.
dyld was optimized in Mac OS X 10.3.4 such that prebinding of applications is no longer necessary.
Moreover, prebinding of applications is entirely deprecated on Mac OS X 10.4.
Let us consider an examplethat of the System framework (System.framework). The shared library within
this framework is actually a symbolic link to the libSystem dynamic library in /usr/lib/. In other words,
System.framework is a wrapper around libSystem. Let us use otool to display the load commands in
libSystem to determine its preferred load address (Figure 216).
Figure 216. Listing the load commands in a Mach-O file
$ otool -l /usr/lib/libSystem.dylib
/usr/lib/libSystem.dylib:
Load command 0
cmd LC_SEGMENT
cmdsize 872
segname __TEXT
vmaddr 0x90000000
vmsize 0x001a7000
fileoff 0
filesize 1732608
maxprot 0x00000007
initprot 0x00000005
nsects 12
flags 0x0
...
The vmaddr value shown in Figure 216 is the preferred load address of libSystem. We can use the C
program in Figure 217 to print the names and load addresses of all Mach-O object files loaded into the
program's address space and to check whether libSystem is loaded at its preferred address or not.
Figure 217. Printing libraries loaded in a program
// printlibs.c
#include 
#include 
int
main(void)
{
const char *s;
uint32_t i, image_max;
image_max = _dyld_image_count();
for (i = 0; i < image_max; i++)
if ((s = _dyld_get_image_name(i)))
printf("%10p %s\n", _dyld_get_image_header(i), s);
else
printf("image at index %u (no name?)\n", i);
file://C:\Dokumente und Einstellungen\Silvia\Lokale Einstellungen\Temp\~hhF139.htm 20.08.2007
Chapter 2. An Overview of Mac OS X Page 34 of 80
return 0;
}
$ gcc -Wall -o printlibs printlibs.c
$ ./printlibs
0x1000 /private/tmp/./printlibs
0x91d33000 /usr/lib/libmx.A.dylib
0x90000000 /usr/lib/libSystem.B.dylib
0x901fe000 /usr/lib/system/libmathCommon.A.dylib
The update_prebinding program is run to attempt to synchronize prebinding information when new files
are added to a system. This can be a time-consuming process even if you add or change only a single file.
For example, all libraries and executables that might dynamically load the new file must be found. Package
information is used to expedite this process. A dependency graph is also built. Eventually redo_prebinding
is run to prebind files appropriately.
After a software update or installation, while the installer program displays the "Optimizing..." status
message, it is running the update_prebinding and redo_prebinding (if necessary) programs.
As shown in Figure 218, otool can be used to determine whether a binary is prebound.
Figure 218. Determining whether a Mach-O file is prebound
$ otool -hv /usr/lib/libc.dylib
/usr/lib/libc.dylib:
Mach header
magic cputype cpusubtype filetype ncmds sizeofcmds flags
MH_MAGIC PPC ALL DYLIB 10 2008 NOUNDEFS DYLDLINK
PREBOUND SPLIT_SEGS
TWOLEVEL
2.9. Core Services
The Core Services layer implements various low-level features for use by higher layers. It can be visualized
as sitting atop the kernel. Its most important constituents are the Core Foundation framework
(CoreFoundation.framework) and the Core Services umbrella framework (CoreServices.framework).
These frameworks contain critical nongraphical system services and APIs. For example, the Core
Foundation framework includes APIs for basic data management. These APIs are C-based and are primarily
meant for use by Carbon applications. However, other types of applications can indirectly use them. For
example, the Cocoa framework links to the Foundation framework, which in turn links to the Core
Foundation framework. In any case, Core Foundation data types may be seamlessly used with the Cocoa
Foundation interfaces: Many Foundation classes are based on equivalent Core Foundation opaque types,
allowing cast-conversion between compatible types.[36]
[36] Such cast-conversion between Foundation classes and Core Foundation opaque types is
sometimes referred to as toll-free bridging.
Much of the exported kernel functionalityroughly equivalent to what is provided by commonly used BSD
and Mach system callscan be accessed via the Core Services layer.
file://C:\Dokumente und Einstellungen\Silvia\Lokale Einstellungen\Temp\~hhF139.htm 20.08.2007
Chapter 2. An Overview of Mac OS X Page 35 of 80
Examples of functionality contained in the Core Services layer include the following:
Core parts of Carbon, including legacy Carbon Managers[37] (CarbonCore. framework)
[37] A Manager in Carbon is a set of one or more libraries defining a programming
interface.
APIs for user-level networking, including support for various protocols and mechanisms such as
HTTP, FTP, LDAP, SMTP, sockets, and Bonjour (CFNetwork.framework)
APIs for Open Transport, various hardware-related Carbon Managers, and access to system-related
components such as disk partitions, power management information, sound, and system keychain
(OSServices.framework)
APIs for indexing and searching text in multiple languages (SearchKit. framework)
APIs for using Web Services via SOAP[38] and XML-RPC (WebServicesCore.framework)
[38] Simple Object Access Protocol.
APIs for the Spotlight search technology, including support for importing and querying metadata from
the Spotlight metadata store (Metadata. framework)
Facilities for applications to access URLs, parse XML, create and manage a variety of data structures,
and maintain property lists (CoreFoundation. framework).
The roots of searching technology in Mac OS X lie in Apple's Information Access Toolkitor V-Twin, as it
was codenamed earlier. Various Apple applications that implement searching, such as the Address Book,
Apple Help, the Finder, the Mail application, and Spotlight, all use the Search Kit framework in some way.
2.10. Application Services
This layer could be perceived as providing two types of services: those specialized for graphics and
multimedia applications and those usable by any kind of an application.
2.10.1. Graphics and Multimedia Services
The graphics and multimedia services layer provides APIs for using 2D graphics, 3D graphics, video, and
audio. Figure 219 shows how this layer fits in the overall graphics and multimedia architecture.
Figure 219. The Mac OS X graphics and multimedia architecture
[View full size image]
file://C:\Dokumente und Einstellungen\Silvia\Lokale Einstellungen\Temp\~hhF139.htm 20.08.2007
Chapter 2. An Overview of Mac OS X Page 36 of 80
2.10.1.1. Quartz
The core of the Mac OS X imaging model is called Quartz, which provides support for rendering 2D shapes
and text. Its graphics-rendering functionality is exported via the Quartz 2D client API, which is implemented
in the Core Graphics framework (CoreGraphics.framework)a subframework of the Application Services
umbrella framework. Quartz is also used for window management. It provides a lightweight window server,
the Quartz Compositor, which is implemented partly in the WindowServer application[39] and partly in the
Core Graphics framework. Figure 220 shows a conceptual view of Quartz's constituents.
[39] The WindowServer application resides in the Resources subdirectory of the Core Graphics
framework.
Figure 220. The key constituents of Quartz
[View full size image]
file://C:\Dokumente und Einstellungen\Silvia\Lokale Einstellungen\Temp\~hhF139.htm 20.08.2007
Chapter 2. An Overview of Mac OS X Page 37 of 80
Quartz 2D
Quartz 2D uses the Portable Document Format (PDF) as the native format for its drawing model.[40] In other
words, Quartz stores rendered content internally as PDF. This facilitates features such as automatically
generating PDF files (so you can save a screenshot "directly" to PDF), importing PDF data into native
applications, and rasterizing PDF data (including PostScript and Encapsulated PostScript conversion).
Quartz 2D is also responsible for device- and resolution-independent rendering of bitmap images, vector
graphics, and anti-aliased text.
[40] We saw in Chapter 1 that the windowing system in NEXTSTEP and OPENSTEP used
Display PostScript for its imaging model.
Vector and Raster Graphics
PDF is a vector image file type. PDF imagesand vector graphics in generalcan be created
through a sequence of mathematical statements that specify placement of geometric objects in a
2D or 3D vector space. Starting from a simple image (say, one consisting only of a straight
line), a complex image can be drawn by adding more shapesmuch like how one would draw
such a picture on a piece of paper. Moreover, the various elements of the picture are stored as
individual objects. This makes it easy to alter the picture without loss of information.
Another approach to digital imaging is known as raster graphics. When a digital camera or a
scanner is used to capture a picture, the resulting image is a raster image. A raster is a
coordinate grid that resides in the display space. A raster image is a set of samples of this space.
The image file's contents contain color (or monochrome) values that apply to each of the
coordinates. Since the file's "bits" map to the display grid, raster images are commonly known
as bitmap images. Unlike a vector image, it is difficult to alter a raster image without loss of
information. One could think of a vector image as "the formula to generate image data,"
whereas a raster image would be "image data." Consequently, vector image files are typically
smaller in size than raster images.
Examples of vector image formats include PDF, EPS (Encapsulated PostScript), and SVG
(Scalable Vector Graphics). Examples of raster image formats include BMP (Windows
file://C:\Dokumente und Einstellungen\Silvia\Lokale Einstellungen\Temp\~hhF139.htm 20.08.2007
Chapter 2. An Overview of Mac OS X Page 38 of 80
Bitmap), GIF (Graphics Interchange Format), JPEG (Joint Photographic Experts Group), and
TIFF (Tagged Image File Format).
Beginning with Mac OS X 10.4, Quartz includes the PDF Kit (PDFKit.framework)a Cocoa framework
containing classes and methods for accessing, manipulating, and displaying PDF files.
Quartz Compositor
The Quartz Compositor is so called because of how it operates. Compositing refers to the process of
overlaying independently rendered images into a single final image, while taking into account aspects such
as transparency. Quartz implements layered compositing whereby an on-screen pixel can be shared between
multiple windows in real time. The Quartz Compositor can composite pixels belonging to content from
sources such as Quartz 2D, OpenGL, and QuickTime. In this sense, it follows a video-mixer model. Its
implementation consists of the WindowServer program, which is an OpenGL application, and some private
Apple libraries. Note that the Compositor does not perform any rendering itselfrendering is OpenGL's
responsibility and is hardware accelerated when possible.
Quartz Services
Whereas the window server APIs are private, certain low-level features of the window server are exposed
through the Quartz Services API. In particular, the API provides functions for accessing and manipulating
display hardware. It also provides functions to access low-level window server events, thus allowing a
program to "drive" the system remotely.
Quartz Extreme
Quartz has an integrated hardware acceleration layer called Quartz Extreme, which automatically becomes
active if suitable hardware is available. Specific hardware features required for Quartz Extreme include a
minimum of 16MB video memory and a graphics card that supports arbitrary texture sizes, multitexturing,
and pixel formats used by Quartz.
Quartz Extreme is an implementation technique that uses OpenGL support in the graphics card so that the
graphics processing unit (GPU)rather than the CPUdoes the compositing of window backing-stores[41] to
the framebuffer. Consequently, the CPU is freer, leading to improvements in system responsiveness and
performance. Figure 221 shows an overview of Quartz Extreme.
[41] A window backing-store is essentially a bitmap for the window. It contains information
saved by the window system to track the window's contents.
Figure 221. An overview of Quartz Extreme
[View full size image]
file://C:\Dokumente und Einstellungen\Silvia\Lokale Einstellungen\Temp\~hhF139.htm 20.08.2007
Chapter 2. An Overview of Mac OS X Page 39 of 80
As Figure 221 shows, even when Quartz Extreme is active, the CPU is used to place pixels into window
backing-stores, which reside in main memory. The GPU uses direct memory access (DMA) to
asynchronously transfer the backing stores. It was not until Mac OS X 10.4 that Quartz 2D gained the
capability to use the GPU for the entire drawing pathfrom the application to the framebuffer. This feature,
called Quartz Extreme with Accelerated 2D (QE2D), is an evolution of Quartz Extreme. It can move data
from an application to a window backing-store using DMA, while keeping track of frequently used data sets
in an adaptively purged in-memory cache. QE2D strives to make rendering much faster than software
rendering, while maintaining almost software-like quality. Common operations such as drawing glyphs,
images, lines, and rectangles are implemented using OpenGL. Uncommon drawing operations, or those that
cannot be handled well without software rendering,[42] are handled through an optimized CPU drawing path.
QE2D requires a GPU with the ARB_fragment_program OpenGL extension. Figure 222 shows an overview
of QE2D. Note that backing stores are now cached in video memory. Moreover, graphics resources such as
colors, images, layers, and patterns are also cached. For this scheme to work well, the programmer must
judiciously retain references to resources.
[42] Drawing a complex path with shading or stroking is an example of such an operation.
Figure 222. An overview of Quartz Extreme with Accelerated 2D
[View full size image]
Quartz also uses hardware vector processing, when available on the CPU, to enhance performance.
file://C:\Dokumente und Einstellungen\Silvia\Lokale Einstellungen\Temp\~hhF139.htm 20.08.2007
Chapter 2. An Overview of Mac OS X Page 40 of 80
2.10.1.2. QuickDraw 2D
QuickDraw 2D is a deprecated API for creating, manipulating, and displaying 2D shapes, text, and pictures.
QuickDraw on Mac OS X is a reimplementation of the legacy QuickDraw API. It exists for the benefit of
older projects as they transition to Quartz. QuickDraw makes use of the Velocity Engine but does not use
graphics hardware acceleration like Quartz 2D.
You can also make Quartz rendering calls from within QuickDraw, but mixing QuickDraw and Quartz 2D
code in an application will result in hardware acceleration being disabled altogether for the rendering.
2.10.1.3. OpenGL
Mac OS X includes an implementation of OpenGLa cross-platform graphics API standard for creating 3D
and 2D graphics. OpenGL works with Quartz 2D and the Quartz Compositor, enabling system-wide visual
effects and the graphical aspects of features such as Exposé and Dashboard.
As Figure 223 shows, there are several interfaces to OpenGL in Mac OS X.
Figure 223. Interfaces to OpenGL in Mac OS X
2.10.1.4. Core Image and Core Video
Core Image is a high-level image-processing interface to a GPU-based media technology. Using Core
Image, application developers can harness the GPU without needing to resort to low-level programming.