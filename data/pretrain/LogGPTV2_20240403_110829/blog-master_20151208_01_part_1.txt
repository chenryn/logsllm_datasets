## btrfs 使用指南 - 1 概念，创建，块设备管理，性能优化  
### 作者                                                                                                               
digoal                                                                                                               
### 日期                                                                                                               
2015-12-08                                                                                                            
### 标签                                                                                                               
PostgreSQL , Linux , btrfs , zfs    
----                                                                                                               
## 背景   
## 一、btrfs概念  
在btrfs中存在三种类型的数据，data, metadata和system。它们表示：  
```  
       DATA  
           store data blocks and nothing else。数据块。  
       METADATA  
           store internal metadata in b-trees, can store file data if they fit into the inline limit。  
       b-trees格式存储的btrfs内部源数据，例如文件inode信息，文件大小，修改时间等等。  
       SYSTEM  
           store structures that describe the mapping between the physical devices and the linear logical space representing the filesystem。  
       块设备和文件系统线性逻辑空间之间的映射信息，类似寻址映射关系，还包括RAID的关系(profile)。  
block group或chunk的概念，这两个术语可以通用。它们表示：  
	   a logical range of space of a given profile, stores data, metadata or both; sometimes the terms are used interchangably。  
       block group或chunk术语用来表示以上几种数据类型data,metadata,system的一个空间逻辑范围，一次性分配的最小空间。（为了保持好的数据连续性？）  
           A typical size of metadata block group is 256MiB (filesystem smaller than 50GiB) and 1GiB (larger than 50GiB), for data it’s 1GiB. The system block group size is a few megabytes.  
       例如metadata数据类型一次分配的空间为256MB（当文件系统小于50GB时）或1GB（当文件系统大于50GB时）。  
       data数据类型一次分配的空间是1GB。  
       system数据块则一次分配很少的MB。  
       你可以用btrfs filesystem show观察到这些信息。  
       RAID  
           a block group profile type that utilizes RAID-like features on multiple devices: striping, mirroring, parity  
       RAID是profile的一种描述，包括条带(raid0, raid10)，mirror(raid1)，奇偶校验(raid 5,6)。  
       profile  
           when used in connection with block groups refers to the allocation strategy and constraints, see the section PROFILES for more details  
       profile和block group结合起来，用来描述数据的分配策略或约束。例如：  
       single表示只存一份数据，即每个block group都是独一无二的。  
           DUP表示在一个块设备中存双份数据，即每个block group在 同一个块设备 中有一个一样的block group副本。  
       RAID0表示条带，单个block group可能跨块设备存储。  
       RAID10表示镜像加条带，单个block group可能跨块设备存储，其中每个部分都会在两个块设备中存成镜像。  
PROFILES  
       There are the following block group types available:  
       ┌────────┬─────────────────────┬────────────┬─────────────────┐  
       │Profile │ Redundancy          │ Striping   │ Min/max devices │  
       ├────────┼─────────────────────┼────────────┼─────────────────┤  
       │        │                     │            │                 │  
       │single  │ 1 copy              │ n/a        │ 1/any           │  
       ├────────┼─────────────────────┼────────────┼─────────────────┤  
       │        │                     │            │                 │  
       │DUP     │ 2 copies / 1 device │ n/a        │ 1/1             │  
       ├────────┼─────────────────────┼────────────┼─────────────────┤  
       │        │                     │            │                 │  
       │RAID0   │ n/a                 │ 1 to N     │ 2/any           │  
       ├────────┼─────────────────────┼────────────┼─────────────────┤  
       │        │                     │            │                 │  
       │RAID10  │ 2 copies            │ 1 to N     │ 4/any           │  
       ├────────┼─────────────────────┼────────────┼─────────────────┤  
       │        │                     │            │                 │  
       │RAID5   │ 2 copies            │ 3 to N - 1 │ 2/any           │  
       ├────────┼─────────────────────┼────────────┼─────────────────┤  
       │        │                     │            │                 │  
       │RAID6   │ 3 copies            │ 3 to N - 2 │ 3/any           │  
       └────────┴─────────────────────┴────────────┴─────────────────┘  
```  
## 二、创建一个btrfs文件系统  
man mkfs.btrfs  
```  
       -d|--data   
           Specify the profile for the data block groups. Valid values are raid0, raid1, raid5, raid6, raid10 or single, (case does not matter).  
       指定data数据类型的profile，需要结合块设备，如果底层块设备没有冗余措施，建议这里使用冗余存储。否则存单份即可，single。  
       如果有多个块设备，可以选择是否需要条带，条带话可以带来好的负载均衡性能。  
       -m|--metadata   
           Specify the profile for the metadata block groups. Valid values are raid0, raid1, raid5, raid6, raid10, single or dup, (case does not matter).  
           A single device filesystem will default to DUP, unless a SSD is detected. Then it will default to single. The detection is based on the value of /sys/block/DEV/queue/rotational, where DEV is the short name of the device.  
           This is because SSDs can remap the blocks internally to a single copy thus deduplicating them which negates the purpose of increased metadata redunancy and just wastes space.  
           Note that the rotational status can be arbitrarily set by the underlying block device driver and may not reflect the true status (network block device, memory-backed SCSI devices etc). Use the options --data/--metadata  
           to avoid confusion.  
       指定metadata数据类型的profile，需要结合块设备，如果底层块设备没有冗余措施，建议这里使用冗余存储。否则存单份即可，single。  
       如果有多个块设备，可以选择是否需要条带，条带话可以带来好的负载均衡性能。  
       -n|--nodesize   
           Specify the nodesize, the tree block size in which btrfs stores metadata. The default value is 16KiB (16384) or the page size, whichever is bigger. Must be a multiple of the sectorsize, but not larger than 64KiB (65536).  
           Leafsize always equals nodesize and the options are aliases.  
           Smaller node size increases fragmentation but lead to higher b-trees which in turn leads to lower locking contention. Higher node sizes give better packing and less fragmentation at the cost of more expensive memory  
           operations while updating the metadata blocks.  
               Note  
               versions up to 3.11 set the nodesize to 4k.  
       对于数据库应用，建议使用4K，减少冲突。  
       -f|--force  
           Forcibly overwrite the block devices when an existing filesystem is detected. By default, mkfs.btrfs will utilize libblkid to check for any known filesystem on the devices. Alternatively you can use the wipefs utility to  
           clear the devices.  
```  
有多个块设备时，可以直接指定多个块设备进行格式化。  
并且可以为metadata和data指定不同的profile级别。  
例如：  
```  
[root@digoal ~]# mkfs.btrfs -m raid10 -d raid10 -n 4096 -f /dev/sdb /dev/sdc /dev/sdd /dev/sde  
btrfs-progs v4.3.1  
See http://btrfs.wiki.kernel.org for more information.  
Label:              (null)  
UUID:               00036b8e-7914-41a9-831a-d35c97202eeb  
Node size:          4096  
Sector size:        4096  
Filesystem size:    80.00GiB  
Block group profiles:  可以看到已分配的block group，三种数据类型，分别分配了多少容量。  
  Data:             RAID10            2.01GiB  
  Metadata:         RAID10            2.01GiB  
  System:           RAID10           20.00MiB  
SSD detected:       no  
Incompat features:  extref, skinny-metadata  
Number of devices:  4  
Devices:  
   ID        SIZE  PATH  
    1    20.00GiB  /dev/sdb  
    2    20.00GiB  /dev/sdc  
    3    20.00GiB  /dev/sdd  
    4    20.00GiB  /dev/sde  
```  
下面这个，metadata使用raid1，不使用条带。而data使用raid10，使用条带。可以看到system和metadata一样，使用了raid1。  
不过建议将metadata和data设置为一致的风格。  
```  
[root@digoal ~]# mkfs.btrfs -m raid1 -d raid10 -n 4096 -f /dev/sdb /dev/sdc /dev/sdd /dev/sde  
btrfs-progs v4.3.1  
See http://btrfs.wiki.kernel.org for more information.  
Label:              (null)  
UUID:               4eef7b0c-73a3-430c-bb61-028b37d1872b  
Node size:          4096  
Sector size:        4096  
Filesystem size:    80.00GiB  
Block group profiles:  
  Data:             RAID10            2.01GiB  
  Metadata:         RAID1             1.01GiB  
  System:           RAID1            12.00MiB  
SSD detected:       no  
Incompat features:  extref, skinny-metadata  
Number of devices:  4  
Devices:  
   ID        SIZE  PATH  
    1    20.00GiB  /dev/sdb  
    2    20.00GiB  /dev/sdc  
    3    20.00GiB  /dev/sdd  
    4    20.00GiB  /dev/sde  
[root@digoal ~]# btrfs filesystem show /dev/sdb  
Label: none  uuid: 4eef7b0c-73a3-430c-bb61-028b37d1872b  
        Total devices 4 FS bytes used 28.00KiB  
        devid    1 size 20.00GiB used 2.00GiB path /dev/sdb  
        devid    2 size 20.00GiB used 2.00GiB path /dev/sdc  
        devid    3 size 20.00GiB used 1.01GiB path /dev/sdd  
        devid    4 size 20.00GiB used 1.01GiB path /dev/sde  
```  
## 三、mount btrfs文件系统  
如果你的btrfs管理了多个块设备，那么你有两种选择来mount它，第一种是直接指定多个块设备，第二种是先scan，再mount，因为某些系统重新启动或者btrfs模块重新加载后，需要重新scan来识别。  
例如：  
```  
[root@digoal ~]# btrfs device scan  
Scanning for Btrfs filesystems  
[root@digoal ~]# mount /dev/sdb /data01  
[root@digoal ~]# btrfs filesystem show /data01  
Label: none  uuid: 00036b8e-7914-41a9-831a-d35c97202eeb  
        Total devices 4 FS bytes used 1.03MiB  
        devid    1 size 20.00GiB used 2.01GiB path /dev/sdb  
        devid    2 size 20.00GiB used 2.01GiB path /dev/sdc  
        devid    3 size 20.00GiB used 2.01GiB path /dev/sdd  
        devid    4 size 20.00GiB used 2.01GiB path /dev/sde  
```  
或者  
```  
[root@digoal ~]# mount -o device=/dev/sdb,device=/dev/sdc,device=/dev/sdd,device=/dev/sde /dev/sdb /data01  
[root@digoal ~]# btrfs filesystem show /data01  
Label: none  uuid: 00036b8e-7914-41a9-831a-d35c97202eeb  
        Total devices 4 FS bytes used 1.03MiB  
        devid    1 size 20.00GiB used 2.01GiB path /dev/sdb  
        devid    2 size 20.00GiB used 2.01GiB path /dev/sdc  
        devid    3 size 20.00GiB used 2.01GiB path /dev/sdd  
        devid    4 size 20.00GiB used 2.01GiB path /dev/sde  
```  
或者  
```  
# vi /etc/fstab  
UUID=00036b8e-7914-41a9-831a-d35c97202eeb /data01 btrfs ssd,ssd_spread,discard,noatime,nodiratime,compress=no,space_cache,recovery,defaults 0 0  
```  
或者  
```  
UUID=00036b8e-7914-41a9-831a-d35c97202eeb /data01 btrfs device=/dev/sdb,device=/dev/sdc,device=/dev/sdd,device=/dev/sde,ssd,ssd_spread,discard,noatime,nodiratime,compress=no,space_cache,recovery,defaults 0 0  
```  
## 四、mount参数建议  
https://btrfs.wiki.kernel.org/index.php/Mount_options  
https://access.redhat.com/documentation/en-US/Red_Hat_Enterprise_Linux/7/html/Storage_Administration_Guide/btrfs-mount.html  
4\.1 ssd相关参数建议  
discard,ssd,ssd_spread  
```  
discard  
    Use this option to enable discard/TRIM on freed blocks.  
ssd  
    Turn on some of the SSD optimized behaviour within btrfs. This is enabled automatically by checking /sys/block/sdX/queue/rotational to be zero. This does not enable discard/TRIM!  
ssd_spread  
    Mount -o ssd_spread is more strict about finding a large unused region of the disk for new allocations, which tends to fragment the free space more over time. It is often faster on the less expensive SSD devices. 廉价ssd硬盘建议开启ssd_spread  
nossd  
The ssd mount option only enables the ssd option. Use the nossd option to disable it.  
```  
4\.2 性能相关参数建议  
noatime,nodiratime,space_cache  
```  
noatime,nodiratime  
    as discussed in the mailing list noatime mount option might speed up your file system, especially in case you have lots of snapshots. Each read access to a file is supposed to update its unix access time. COW will happen and will make even more writes. Default is now relatime which updates access times less often.  
space_cache  
    Btrfs stores the free space data on-disk to make the caching of a block group much quicker. It's a persistent change and is safe to boot into old kernels.  
```  
4\.3 其他建议参数建议  
defaults,compress=no,recovery  
```  
compress=no  
recovery  
    Enable autorecovery upon mount; currently it scans list of several previous tree roots and tries to use the first readable. The information about the tree root backups is stored by kernels starting with 3.2, older kernels do not and thus no recovery can be done.  
thread_pool=number   
    The number of worker threads to allocate.  
4.4 Linux块设备IO调度策略建议  
    deadline  
```  
## 五、resize btrfs文件系统  
btrfs文件系统整合了块设备的管理，正如前面所述，btrfs存储了data, metadata, system三种数据类型。当任何一种数据类型需要空间时，btrfs会为对应的数据类型分配空间(block group)，这些分配的空间就来自btrfs管理的块设备。  
所以，resize btrfs，实际上就是resize 块设备的使用空间。对于单个块设备的btrfs，resize btrfs root挂载点和resize block dev的效果是一样的。  
5\.1 扩大  
单位支持k,m,g。  
```  
# btrfs filesystem resize amount /mount-point  
# btrfs filesystem show /mount-point  
# btrfs filesystem resize devid:amount /mount-point  
# btrfs filesystem resize devid:max /mount-point  
```  
对于单个块设备的btrfs，不需要指定块设备ID  
```  
# btrfs filesystem resize +200M /btrfssingle  
Resize '/btrfssingle' of '+200M'  
```  
对于多个块设备的btrfs，需要指定块设备ID  
```  
[root@digoal ~]# btrfs filesystem show /data01  
Label: none  uuid: 00036b8e-7914-41a9-831a-d35c97202eeb  
        Total devices 4 FS bytes used 2.12GiB  
        devid    1 size 19.00GiB used 4.01GiB path /dev/sdb  
        devid    2 size 20.00GiB used 4.01GiB path /dev/sdc  
        devid    3 size 20.00GiB used 4.01GiB path /dev/sdd  
        devid    4 size 20.00GiB used 4.01GiB path /dev/sde  