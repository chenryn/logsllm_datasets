2020/7/27 百步穿杨-看我如何在APP中getshell
百步穿杨-看我如何在APP中getshell
原创 队员编号001 酒仙桥六号部队 5⽉26⽇
这是 酒仙桥六号部队 的第 10 篇⽂章。
全⽂共计3354个字，预计阅读时⻓10分钟。
前前前前前前前前前前前前前前前⾔⾔⾔⾔⾔⾔⾔⾔⾔⾔⾔⾔⾔⾔⾔
说起APP上的渗透测试，很多朋友在拿到⼀个APP的时候，往往会将客户端的检测与服
务端的检测分得很开，越来越多的测试⼈员客户端检测仅仅局限于静态⼯具扫描，不注
重客户端审计与服务端渗透的结合，以⾄于APP的安全审计报告中服务端的漏洞占⽐较
少。
我们接下来会通过⼀次⽹安渗透测试项⽬，来跟⼤家聊聊怎么样通过APP与服务端的结
合，getshell。希望通过这个案例，能给⼤家在app渗透测试过程中起到⼀个抛砖引⽟
的作⽤，⻅招拆招，百步穿扬。
由于客户给了我们明确的测试范围，且重点要求获取服务⽹权限，所以我们前期做了各
种信息收集。其中有⼀点较为重要，就是发现了内部员⼯使⽤的⼀个邮件类的app，我
们也希望以此为突破⼝，最终拿到服务器的权限。
流流流流流流流流流流流流流流流程程程程程程程程程程程程程程程分分分分分分分分分分分分分分分析析析析析析析析析析析析析析析
1
绕过SSL Pinning抓包
拿到这个APP后，我们⾸先做出了⼀个⼤胆的假设：其内部使⽤的客户端在安全防护上
是否较弱呢？
于是我们当机⽴断，打算直接使⽤Burp抓包，找到利⽤点后攻击服务端，利⽤相关漏洞
⼀步到位，Get Shell。
https://mp.weixin.qq.com/s/jw2NBnP9E481-0OcVHC-uQ 1/16
2020/7/27 百步穿杨-看我如何在APP中getshell
然⽽，经过尝试发现，客户端对证书进⾏了校验，burp竟然没法抓包。起步就遇到了阻
碍，所以，我们先得解决抓包问题。
证书验证主要有两种⽅式，分别为双向校验、单向校验。⽽双向校验⼀般存在于银⾏、
⾦融等app中，所以为了提⾼攻击效率，我们假定其为单向校验，并尝试绕过。
该案例我们借助了JustTrustMe，⾮常幸运的是通过该插件，我们绕过了证书校验。但
是在这⾥⼜遇到⼀个问题：我们抓到的包都是加密的。如下：
由于请求和响应数据包都进⾏了加密，并且使⽤同样的数据进⾏请求的时候，每次密⽂
都不⼀样，很显然，数据加密密钥是动态变化的。此处的阻碍让我有点⽅了。
https://mp.weixin.qq.com/s/jw2NBnP9E481-0OcVHC-uQ 2/16
2020/7/27 百步穿杨-看我如何在APP中getshell
如果客户端实现了OTP加密原理的话，客户端是需要存有⾮对称算法如RSA 的公钥的。
服务端存有⾮对称算法的私钥，客户端采⽤⾃身⽣成的对称加密密钥如AES来加密信息
内容，然后将此对称密钥⽤服务端的公开密钥来加密之后，将它和加密后的信息⼀起发
送给服务端。服务端先⽤相应的私有密钥打开数字信封，得到对称密钥，然后使⽤对称
密钥解开加密信息。
但是，抓包过程中发现，它⾸先有⼀个从服务端获取密钥的过程。发现每次请求前，客
户端都要向服务端发送请求，获取Key。从加密数据本身看，貌似是RSA。由此推测它
的⼀次⼀密不是数字信封的⽅式。那么接下来，破解它的加密逻辑就迫在眉睫了。
以上步骤是绕过证书校验进⾏数据抓包。我们可是站在正义的⻆度看看客户端客户端证
书校验威胁噢。
https://mp.weixin.qq.com/s/jw2NBnP9E481-0OcVHC-uQ 3/16
2020/7/27 百步穿杨-看我如何在APP中getshell
Tips：
如果客户端在与服务端通信的过程中没有对传输的数据进⾏保护与完整性校验，并且未
做任何的证书校验，这将直接导致中间⼈攻击，可重复发送截取到的请求报⽂，并观察
和分析服务端的反应，实现进⼀步的攻击。
常⽤的⼯具有Wireshark、Burpsuite、Fiddler和Charles等。
2
反编译分析加密逻辑
我们通过反编译APK⽂件，尝试去定位加密函数，看能否破解上述⽹络请求中的加解密
逻辑。 但是我们反编译后发现APK被加了壳。
https://mp.weixin.qq.com/s/jw2NBnP9E481-0OcVHC-uQ 4/16
2020/7/27 百步穿杨-看我如何在APP中getshell
那么我们⻅招拆招，使⽤FRIDA-DEXDump进⾏脱壳，且成功的拿到dex⽂件。
通过对脱壳拿到的dex⽂件进⾏反编译，定位getkey请求进⾏分析对应的加密逻辑。
分析定位加密到函数如下：
https://mp.weixin.qq.com/s/jw2NBnP9E481-0OcVHC-uQ 5/16
2020/7/27 百步穿杨-看我如何在APP中getshell
经过缜密分析，发现这个APK加密逻辑是这样的：
客户端先发送请求获取对称算法AES密钥，但是AES密钥使⽤服务端的RSA私钥进⾏加
密了，客户端通过RSA公钥解密后得到AES密钥。对交互数据进⾏加密。并且，从解密
包数据看，没有签名如sign字段，传输没有进⾏签名校验，这让⼈觉得有些欣喜。
通过上述代码，我们找到了RSA加密使⽤的公钥，发现有公钥解密的函数，这个时候，
我们可以通过尝试调⽤公钥解密函数，编写对应的解密脚本。得到AES密钥与向量。
https://mp.weixin.qq.com/s/jw2NBnP9E481-0OcVHC-uQ 6/16
2020/7/27 百步穿杨-看我如何在APP中getshell
我们通过脱壳、反编译，拿到了java core代码，成功破解了数据包加解密逻辑。接下
来可以进⾏漏洞挖掘。但是在客户端安全⽅⾯，上述过程还可能会遇到反调试、反
HOOK、完整性校验、重签名检测等威胁。
Tips:
应⽤通信数据加密加签：为了防⽌数据被篡改，客户端和服务端⼀般对交互数据进⾏加
密。常⻅的加密⽅式为，⾮对称加密、如使⽤RSA。对称加密如，DES、AES等等。
但是单纯的对称和⾮对称都存在⼀定的安全⻛险，所以在对加密算法的运⽤中，⼀般采
⽤对称加密结合⾮对称加密结合的⽅式，也就是数字信封进⾏数据传递。保证了数据传
输的安全。并且在传递过程中，对数据使⽤⾮对称算法进⾏签名验签，避免数据在传输
过程中被篡改。
应⽤调试：在应⽤逆向分析的过程中是静态分析与动态调试相结合的，其中静态分析就
是上⾯所说的代码反编译。应⽤调试就是动态分析的⼀种重要的⽅式，这⾥主要是基于
⽆源码进⾏调试，这⾥分为SO调试与smali调试，其中SO调试主要使⽤的是GDB、
LLDB 、 IDA pro 等 ⼯ 具 ， 调 试 smali 使 ⽤ 的 是 IDEA 、 AndroidStudio 等 配 合
Smalidea插件进⾏调试。
HOOK：主要是基于动态分析与静态分析后，找到应⽤的关键代码位置，通过HOOK插
件拦截关键代码调⽤，获取参数信息或篡改函数调⽤等。hook的⼯具主要有Xposed、
Cydia、Frida等，其中⾃⼰编写native hook代码，配合注⼊的⽅式进⾏实现。
代码反编译：代码反编译就是将APK中包含的各个⽂件，根据其固定的格式，从⼆进制
反编译成可查看的代码，与正向开发是相反的操作，反编译的主要⼯具有apktool、
Androidkiller、jeb、jadx、smali/baksmali、IDA pro等等。
https://mp.weixin.qq.com/s/jw2NBnP9E481-0OcVHC-uQ 7/16
2020/7/27 百步穿杨-看我如何在APP中getshell