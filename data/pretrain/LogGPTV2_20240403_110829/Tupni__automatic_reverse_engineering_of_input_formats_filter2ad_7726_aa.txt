title:Tupni: automatic reverse engineering of input formats
author:Weidong Cui and
Marcus Peinado and
Karl Chen and
Helen J. Wang and
Luis Ir&apos;un-Briz
Tupni: Automatic Reverse Engineering of Input Formats
Weidong Cui
Microsoft Research
Redmond, WA 98052
PI:EMAIL
Marcus Peinado
Microsoft Corporation
Redmond, WA 98052
PI:EMAIL
Karl Chen
University of California
Berkeley, CA 94720
PI:EMAIL
Helen J. Wang
Microsoft Research
Redmond, WA 98052
PI:EMAIL
Luiz Irun-Briz
Microsoft Corporation
Redmond, WA 98052
PI:EMAIL
ABSTRACT
Recent work has established the importance of automatic reverse
engineering of protocol or ﬁle format speciﬁcations. However, the
formats reverse engineered by previous tools have missed impor-
tant information that is critical for security applications.
In this
paper, we present Tupni, a tool that can reverse engineer an input
format with a rich set of information, including record sequences,
record types, and input constraints. Tupni can generalize the for-
mat speciﬁcation over multiple inputs. We have implemented a
prototype of Tupni and evaluated it on 10 different formats: ﬁve
ﬁle formats (WMF, BMP, JPG, PNG and TIF) and ﬁve network
protocols (DNS, RPC, TFTP, HTTP and FTP). Tupni identiﬁed all
record sequences in the test inputs. We also show that, by aggre-
gating over multiple WMF ﬁles, Tupni can derive a more complete
format speciﬁcation for WMF. Furthermore, we demonstrate the
utility of Tupni by using the rich information it provides for zero-
day vulnerability signature generation, which was not possible with
previous reverse engineering tools.
Categories and Subject Descriptors
D.4.6 [Operating Systems]: Security and Protection; D.2.5 [Software
Engineering]: Testing and Debugging
General Terms
Security
Keywords
protocol reverse engineering, binary analysis
1.
INTRODUCTION
Recent work [6, 12, 26, 42] has established the importance of
automatic reverse engineering of protocol or ﬁle format speciﬁ-
cations. For example, the availability of such speciﬁcations gives
security applications like ﬁrewalls [5,41] or intrusion detection sys-
tems [32, 33] the context information of a network communication
Permission to make digital or hard copies of all or part of this work for
personal or classroom use is granted without fee provided that copies are
not made or distributed for proﬁt or commercial advantage and that copies
bear this notice and the full citation on the ﬁrst page. To copy otherwise, to
republish, to post on servers or to redistribute to lists, requires prior speciﬁc
permission and/or a fee.
CCS’08, October 27–31, 2008, Alexandria, Virginia, USA.
Copyright 2008 ACM 978-1-59593-810-7/08/10 ...$5.00.
or ﬁle parsing session, which is crucial for accurately detecting or
preventing intrusions. Being able to automatically reverse engi-
neer such protocol or ﬁle format speciﬁcations alleviates the time-
consuming and error-prone manual effort.
Discoverer [12] and Polyglot [6] pilot the initial explorations
in this research direction. Discoverer assumes no software access
and performs automatic reverse engineering purely from network
traces. Polyglot assumes software access and performs dynamic
data ﬂow analysis for reverse engineering. Both Discoverer and
Polyglot reverse engineer network messages as a “ﬂat” sequence
of ﬁelds. With software access and dynamic data ﬂow analysis,
Polyglot has the advantage of being able to reverse engineer binary
ﬁelds and certain dependencies (e.g., length ﬁelds). In addition to
Polyglot, Lin et al. in [26] and Wondracek et al. in [42] developed
new tools to reverse engineer network message formats by observ-
ing how a program processes network messages.
However, the formats reverse engineered by previous tools have
missed important information that is critical for security applica-
tions. First, many input formats include arbitrary sequences of data
elements (records). For example, most media ﬁles consist of se-
quences of chunks of compressed media data. Second, input ﬁelds
may have arbitrary dependencies which cannot be captured by pre-
deﬁned semantics. For example, there are many different ways to
compute checksums. The ShieldGen system [14] has shown that
it is important to understand record sequences and various data de-
pendencies in an attack instance for constructing a high-quality vul-
nerability signature for a zero-day vulnerability.
In this paper, we present Tupni, a tool that can reverse engi-
neer an input format with a rich set of information, given one or
more inputs of the unknown format and a program that can process
these inputs. The main novelty in Tupni is the identiﬁcation and
analysis of arbitrary record sequences. Unlike previous tools that
either ignore record sequences [6] or only work for some special
cases [26,42], Tupni can identify arbitrary record sequences by an-
alyzing loops in a program, using the fact that a program usually
processes an unbounded record sequence in a loop. Tupni can also
cluster records into a small set of types based on the set of instruc-
tions that process a record. In addition, Tupni can infer constraints
of various, not pre-deﬁned dependencies across ﬁelds or messages
(e.g., checksums or sequence numbers) by tracking symbolic pred-
icates from dynamic data ﬂow analysis. Furthermore, to mitigate
a fundamental problem of dynamic analysis that our view is lim-
ited by the execution path associated with a particular input, Tupni
can derive a more complete format speciﬁcation by aggregating the
format information inferred from multiple inputs.
We have implemented a prototype of Tupni and evaluated it on
ten different inputs: ﬁve ﬁle formats (WMF, BMP, JPG, PNG and
TIF) and ﬁve network protocols (DNS, RPC, TFTP, HTTP and
FTP). We manually compared the formats reverse engineered by
Tupni with published format speciﬁcations to evaluate Tupni’s ac-
curacy. Our experimental results show that Tupni can correctly
identify all ﬁelds except for those that were ignored by the pro-
gram, and it can identify all record sequences in the published for-
mat speciﬁcation. We also show that, by aggregating over multiple
WMF ﬁles, Tupni can derive a more complete format speciﬁca-
tion for WMF. Furthermore, we demonstrate the utility of Tupni
by using its reverse engineered format for zero-day vulnerability
signature generation, which was not possible with previous reverse
engineering tools.
The rest of this paper is organized as follows. After deﬁning the
goals of this paper in Section 2, we describe the design of Tupni
in Section 3. Then we present our evaluation results in Section 4
and demonstrate the utility of Tupni for zero-day vulnerability sig-
nature generation in Section 5. We compare Tupni to related work
in Section 6 and discuss its limitations and potential future research
directions in Section 7. Finally, we conclude the paper in Section 8.
2. GOALS
2.1 Scope of the Problem
Most application-level protocols involve the concept of an appli-
cation session, which consists of a series of messages exchanged
between two hosts that accomplishes a speciﬁc task. Correspond-
ingly, there are two essential components in an application-level
protocol speciﬁcation: protocol state machine and message format.
The former characterizes all possible legitimate sequences of mes-
sages, while the latter speciﬁes the format for all possible legitimate
messages. Files are a special case of protocols in the sense that each
ﬁle is a single “message” and there is no “session” concept in a ﬁle
speciﬁcation.
In this paper, we focus on deriving the network message or ﬁle
format and leave the inference of the protocol state machine to fu-
ture work. We uniformly refer to both network message formats
and ﬁle formats as input formats. We assume the boundaries of
network messages can be identiﬁed.
2.2 Goals
Our goal is to design an algorithm that, given one or more inputs
(ﬁles, network messages) of an unknown format and an application
that can process these inputs, outputs a speciﬁcation of the input
format. More precisely, the format speciﬁcation we seek to gener-
ate contains the following pieces of information:
• Field boundaries: An input instance (e.g., a particular RPC
request) typically is a sequence of ﬁelds. We aim to recover
the boundaries of the ﬁelds in the input.
• Record sequences: The identiﬁcation of base ﬁelds by it-
self is sufﬁcient for simple ﬁxed input formats, i.e., formats
such as TFTP in which every input instance has the same
ﬁelds and only the ﬁeld values differ. Most input formats
do not fall into this simple class. A very common pattern is
for a format to allow arbitrary sequences of records. Ex-
pressed in BNF notation, such record sequences have the
form (R1|R2| . . .|Rn)∗
, where R1, R2, . . . , Rn are differ-
ent record types each of which may comprise different se-
quences of ﬁelds. An example of a record sequence are the
property-value pairs (records) that may appear in arbitrary
sequences in HTTP inputs. Other examples are records in
WMF ﬁles, video and audio chunks in a number of multime-
dia and streaming formats (WMA, WMV, ASF, AVI, MPG,
etc.) and tags in HTML. One of our goals is to recognize
such sequences.
• Constraints: In addition to the structural information pro-
vided by knowledge of ﬁelds and record sequences, we aim
to derive information about the values of ﬁelds. In the sim-
plest case, the input format may mandate that certain ﬁelds
must have certain constant values. More generally, ﬁelds in
a valid input may have to satisfy certain constraints. Exam-
ples are length ﬁelds, where one ﬁeld speciﬁes the length of
an array ﬁeld, and checksum ﬁelds, where the value of the
checksum ﬁeld depends on the values of other (possibly all
other) ﬁelds in the input.
3. DESIGN
We begin by giving a high-level overview of the algorithm. Fig-
ure 1 shows the sequence of processing stages performed by Tupni.
A raw input is ﬁrst segmented into basic ﬁelds (Section 3.3). The
next processing stage identiﬁes record sequences (Section 3.4). We
then classify the records we have identiﬁed in the previous stage
(Section 3.5). This gives us record types. We look for constraints
at several processing stages. Our techniques for identifying con-
straints are described in Section 3.6.
Most of the processing stages combine a baseline algorithm with
an error correction scheme. The baseline algorithm captures the
main idea underlying the processing stage. The error correction
scheme accounts for the fact that real world applications do not
always conform to the baseline algorithm.
Most of the descriptions in this section show how Tupni analyzes
a single run of a parsing application on a particular input. At the
end of the section, we describe how Tupni aggregates the results of
its analysis over several runs of the same application on different
inputs. For a single run of the application, the sequence of instruc-
tions that is executed during this run is called the execution trace of
the run. Each execution trace is associated with the list of binaries
that were loaded during the run and the base addresses at which the
binaries were loaded. This information is readily available from
tools such as iDNA [4] that capture program execution traces.
We refer to the byte positions in the input as offsets. We use the
term position to identify instructions in the execution trace. For ex-
ample, a particular mov instruction in the application binary may
appear at multiple positions in the execution trace. We refer to
sequences of contiguous positions in the execution trace as subse-
quences.
3.1 Background
Tupni assumes the availability of a taint tracking engine such
as [10, 11, 31, 38]. These systems associate data structures with
addresses in the application’s address space and update them as
the application executes. In the simplest case, the data structures
indicate whether the value stored at an address depends on input.
When input data arrive in the application’s address space, the mem-
ory locations storing them are marked as tainted. Whenever an
instruction reads and writes data, the data structure for the desti-
nation operand is updated depending on whether any of the source
operands was tainted.
More complex data structures allow more detailed information to
be tracked, including which bytes in the input the value at a tainted
memory location depends on or how that value was computed. We
call the latter data structure a data ﬂow graph [10].
Raw Input
Field
Identification
Sequence
of Fields
Identification
of Record
Sequences
Sequence
of
Records
Identification of
Record Types
Sequence
of Record
Types
Figure 1: The processing stages of Tupni
0
1 2
3 4
5 6
7 8
16 17 18 19 20 21
26
2
1
13
...
5
10
...
Record 1
Record 2
Figure 2: Running example input.
1 BYTE input[ BUF_SIZE ]
2 ULONG num_records, i=0, offset=4
3 USHORT record_type, record_size
4 FCT_PTR record_hdlr[NUM_REC_TYPES]
5
6
call read_input( input )
mov num_records, (ULONG *)&input[0]
7 loop: cmp i, num_records
8
jeq end
9
10
11
12
13
14
15 end:
mov record_type, (USHORT *)&input[offset]
mov record_size, (USHORT *)&input[offset+2]
call record_hdlr[record_type](&input[offset])
add offset, record_size
inc i
jmp loop
Figure 3: Example application.
3.2 Running Example
Throughout this section we will use a running example to help
illustrate the stages of Tupni. For ease of exposition, we use a very
simple synthetic input format and a similarly simple application
that processes inputs from this format.
The input format consists of a header followed by a sequence of
records. The header has only one ﬁeld. It speciﬁes the number of
records that follow. Each record starts with a two-byte ﬁeld that
speciﬁes the record type, followed by a second two-byte ﬁeld that
speciﬁes the size of the record in bytes. The remaining bytes of
each record depend on the record type. This simple format is struc-
turally similar to real world formats such as WMF, PNG, WMA
and WMV.
Figure 2 shows an example input from this format. The ﬁrst ﬁeld
speciﬁes the number of records as 2. The next 13 bytes make up the
ﬁrst record, and the following ten bytes make up the second record.
These lengths are speciﬁed in the second ﬁeld of each record. The
ﬁrst ﬁeld of each record speciﬁes its type (as types 1 and 5, respec-
tively).
Figure 3 shows a simple application that parses inputs from our
example format. Our pseudo assembly notation can be mapped
to working x86 machine code by assigning x86 registers to our
variables and adding instructions to pass function call parameters.