0088, and partially supported by a MURI grant adminis-
tered by the Air Force Oﬃce of Scientiﬁc Research. Views
and conclusions contained here are those of the authors and
should not be interpreted as necessarily representing the of-
ﬁcial policies or endorsements, either express or implied, of
AFRL, NSF, the U.S. Government or any of its agencies.
10. REFERENCES
[1] O. Acıi¸cmez, ¸C. Kaya Ko¸c, and J.P. Seifert. On the power
of simple branch prediction analysis. IACR Cryptology
ePrint Archive, report 2006/351, 2006.
[2] O. Acıi¸cmez, ¸C. Kaya Ko¸c, and J.P. Seifert. Predicting
secret keys via branch prediction. RSA Conference
Cryptographers Track – CT-RSA ’07, LNCS vol. 4377,
pp. 225–242, Springer, 2007.
[3] O. Acıi¸cmez. Yet another microarchitectural attack:
exploiting I-cache. IACR Cryptology ePrint Archive, report
2007/164, 2007.
[4] O. Acıi¸cmez, and J.P. Seifert. Cheap hardware parallelism
implies cheap security. Workshop on Fault Diagnosis and
210Tolerance in Cryptography – FDTC ’07, pp. 80–91, IEEE,
2007.
[5] Amazon Elastic Compute Cloud (EC2).
http://aws.amazon.com/ec2/
[6] Amazon Web Services. Auto-scaling Amazon EC2 with
Amazon SQS. http://developer.amazonwebservices.com/
connect/entry.jspa?externalID=1464
[7] Amazon Web Services. Creating HIPAA-Compliant
Medical Data Applications with Amazon Web Services.
White paper, http://awsmedia.s3.amazonaws.com/AWS_
HIPAA_Whitepaper_Final.pdf, April 2009.
[8] Amazon Web Services. Customer Agreement.
http://aws.amazon.com/agreement/
[9] P. Barham, B. Dragovic, K. Fraser, S. Hand, T. Harris,
A. Ho, R. Neugebauer, I. Pratt, and A. Warﬁeld. Xen and
the art of virtualization. SOSP ’03: Proceedings of the
nineteenth ACM symposium on Operating systems
principles, 2003.
[10] D. Bernstein. Cache-timing attacks on AES. Preprint
available at http://cr.yp.to/papers.html#cachetiming,
2005.
[11] DentiSoft. http://www.dentisoft.com/index.asp
[12] D. Grunwald and S. Ghiasi. Microarchitectural denial of
service: Insuring microarchitectural fairness. International
Symposium on Microarchitecture – MICRO ’02,
pp. 409–418, IEEE, 2002.
[13] D. Hyuk Woo and H.H. Lee. Analyzing performance
vulnerability due to resource denial of service attack on
chip multiprocessors. Workshop on Chip Multiprocessor
Memory Systems and Interconnects, 2007.
[14] W-H. Hu, Reducing timing channels with fuzzy time. IEEE
Symposium on Security and Privacy, pp. 8–20, 1991.
[15] W-H. Hu, Lattice scheduling and covert channels. IEEE
Symposium on Security and Privacy, 1992
[16] P. Karger and J. Wray. Storage channels in disk arm
optimization. IEEE Symposium on Security and Privacy,
pp. 52–56, IEEE, 1991.
[17] O. Kerr. Cybercrime’s scope: Interpreting ’access’ and
’authorization’ in computer misuse statutes. NYU Law
Review, Vol. 78, No. 5, pp. 1596–1668, November 2003.
[18] M. Krohn, A. Yip, M. Brodsky, N. Cliﬀer, M. F. Kaashoek,
E. Kohler, and R. Morris. Information ﬂow control for
standard OS abstractions. ACM Symposium on Operating
Systems Principles (SOSP), 2007.
[19] M. Krohn, and E. Tromer. Non-Interference for a Practical
DIFC-Based Operating System. IEEE Symposium on
Security and Privacy, 2009.
[20] Microsoft Azure Services Platform.
http://www.microsoft.com/azure/default.mspx
[21] T. Moscibroda and O. Mutlu. Memory Performance
Attacks: Denial of Memory Service in Multi-Core Systems.
USENIX Security Symposium, pp. 257–274, 2007.
[22] D. A. Osvik, A. Shamir, and E. Tromer. Cache attacks and
countermeasures: the case of AES. RSA Conference
Cryptographers Track (CT-RSA) 2006, 2006.
[23] D. Page. Theoretical use of cache memory as a
cryptanalytic side-channel. Technical report CSTR-02-003,
Department of Computer Science, University of Bristol,
2002. Available at http://www.cs.bris.ac.uk/
Publications/pub_info.jsp?id=1000625.
[24] D. Page. Defending against cache-based side-channel
attacks. Information Security Technial Report, vol. 8
issue. 8, 2003
[25] D. Page. Partitioned cache architecture as a side-channel
defence mechanism. IACR Cryptology ePrint Archive,
report 2005/280, 2005.
[26] C. Percival. Cache missing for fun and proﬁt BSDCan
2005, Ottawa, 2005.
[27] Rackspace Mosso. http://www.mosso.com/
[28] RightScale. http://rightscale.com/
[29] rPath. http://www.rpath.com
[30] scalr. http://code.google.com/p/scalr/
[31] D. Song, D. Wagner, and X. Tian. Timing analysis of
keystrokes and SSH timing attacks. 10th USENIX Security
Symposium, 2001.
[32] E. Tromer, D. A. Osvik, and A. Shamir. Eﬃcient cache
attacks on AES, and countermeasures. Journal of
Cryptology, available online, July 2009.
[33] Xen 3.0 Interface Manual. Available at
http://wiki.xensource.com/xenwiki/XenDocs.
[34] N. B. Zeldovich, S. Boyd-Wickizer, E. Kohler, and
D. Mazi`eres. Making information ﬂow explicit in HiStar.
Symposium on Operating Systems Design and
Implementation (OSDI), 2006
APPENDIX
A. LEGAL, ETHICAL, AND
CONTRACTUAL OBLIGATIONS
Network probing is central to our study and while we note
that remote probing of Internet servers and devices is a com-
mon technique, both in practice and in the networking and
security research literature, it is also sometimes controver-
sial. While we cannot hope to cover this controversy in its
full complexity, we attempt to sketch its broad outlines as
it applies to our own work.
In this discussion, we separate between legal obligations
under statute, ethical concerns, and our contractual obliga-
tions under the customer agreement provided by Amazon,
considering each in turn.
In the United States, the prevailing statute concerning in-
teracting with computer systems is the Computer Fraud and
Abuse Act (CFAA) which requires, roughly speaking, that
computer system access must be authorized. As with many
such statutes, the wording is quite broad and there is consid-
erable ambiguity in the terms authorization and access (we
refer the reader to Kerr [17] for an elaboration on these com-
plexities and associated legal decisions). We are unaware
of any case law covering the topic of network probing writ
large, however on the more controversial issue of external
“port scanning” (that is, scanning a range of networks ports,
absent explicit permission, particularly in search of poten-
tial network-accessible vulnerabilities) we are informed by
Moulton v VC3 (2000). This decision provided that port
scanning, by itself, does not create a damages claim (i.e.,
that direct harm must be shown to establish damages under
the CFAA).
However, we are also sensitive to the ethical issues re-
sulting from the perception of a threat, especially when no
greater good is achieved, and thus we are careful to re-
strict our network probes to services that are designed to
be publicly facing — TCP port 80 (the standard port for
HTTP Web service) and TCP port 443 (the standard port
for HTTPS Web service). We operate under the assumption
that providing a service designed to be accessed by the pub-
lic is an implicit authorization to do so (in the same sense
that having a doorbell provides an implicit authorization to
ring it). We believe that the counterfactual theory, that ad-
dresses themselves are private and that it is unethical to visit
a Web server absent an explicit advance invitation to do so,
seems diﬃcult to reconcile with how much of the Internet
actually works. Finally, we should be clear that we make
no attempt to interact with these sites beyond establishing
their presence and, in some cases, downloading the public
home page they export; no vulnerabilities were searched for,
discovered, or exposed through our measurements and we
implicitly respect any in-place access control mechanisms.
211Unknown
m1.small
c1.medium
m1.large
m1.xlarge
c1.xlarge
6
5
2
d
o
m
s
s
e
r
d
d
a
P
I
256
196
128
64
0
10.251.0.1
10.252.0.0
10.253.0.0
10.254.0.0
10.255.0.0
Figure 7: A plot of the internal IP addresses of public EC2 servers.
Internal IP address
Our internal probes originate from within the Amazon
EC2 service (i.e., from instances under our control). As such
they are additionally subject to contractual obligations un-
der Amazon’s terms of service [8] at the time of this study.
Particularly salient in the AWS Web Services Agreement
is subsection 5.5.5 on the use of the Network in the EC2
service: “You may make network connections from Amazon
EC2 hosted servers to other hosts only with the permission
and authorization of the destination hosts and networks”.
While, unlike the CFAA, this seems clearer on the topic of
access (making a network connection) it remains ambiguous
concerning what constitutes authorization. However, some
guidance can be found in the subsequent examples of un-
acceptable traﬃc provided in the same subsection, includ-
ing “Unauthorized probes and port scans for vulnerabilities.”
and “Web crawling which is not restricted in a rate so as not
to impair or otherwise disrupt the servers being crawled.”
The ﬁrst example makes it clear that creating network con-
nections to discover vulnerabilities is circumscribed, but the
second indicates that connecting to Web servers is implic-
itly authorized (since this is what Web crawlers do) so long
as they do not impair their function. Thus, we operate un-
der the interpretation that connecting to Web servers from
within EC2 is implicitly authorized so long as we are not
disrupting them nor attempting to discover vulnerabilities
therein (which we do not).
Finally, we wish to be clear that we made no attempt to
disrupt, impair or acquire private information from any cus-
tomer or client of the EC2 service. Thus, any “attacks”, as
described in this paper, are mounted between EC2 instances
under our control (either directly, or via a third-party ser-
vice) and should have in no way impacted any third party.
B.
INSTANCE DENSITY AND PLACEMENT
We conducted a TCP connect scan on the EC2 address
space for ports 80 and 443, and translated these to a list
of internal IP addresses using DNS lookups from within the
cloud.
(This was a separate scan from the one discussed
in Section 5, but performed in the same manner.) We re-
peated the following ten times. Twenty “victim” instances
were launched. These instances then determined a (very
loose) lower-bound on the number of co-resident instances by
determining the number of co-resident servers from the pub-
lic servers list. These instances were left running while 20
further probe instances were launched. Each probe checked
whether it was co-resident with one of the victims. Figure 8
displays the results. The average (over 10 iterations) mean
number of co-resident servers for the victims for which a
probe was co-resident was 1.2. The average mean number
of co-resident servers for the victims for which no probe was
co-resident was 1.7. This suggests a slight bias towards as-
signment of new instances to lightly loaded machines. We
expect that with better measurement techniques one would
see an even stronger bias, however we avoided measurement
techniques that could be seen as having violated (the spirit
of) Amazon’s AUP.
Iteration
count mean
count mean
Found
Missed
1
2
3
4
5
6
7
8
9
10
18
16
17
8
18
12
17
11
16
16
1.22
1
1.18
1.13
1.44
1.33
1.29
0.91
1.31
1.18
2
4
3
12
2
8
3
9
4
4
2
1.75
1.33
1.75
1.5
1.63
1.66
1.66
1.75
2.25
Figure 8: Instance density averages for runs of 20 victim
instances and then 20 probe instances, over 10 iterations.
The ‘count’ columns specify (respectively) the number of
victims which were found by (co-resident with) a probe
or missed by the probes. The ‘mean’ columns report
the average number of other instances running on the
victim instances’ physical machines (before the probes
were launched).
212