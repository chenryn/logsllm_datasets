round
ipd
(
(3) 
s
)/
s
),
q
=
where round(x) is the function that rounds off real number x to its 
nearest integer (i.e., round(x) = i for any x ∈ (i - ½, i + ½]). 
Figure 1 illustrates the quantization of scalar x. It is easy to see 
that q(k×s, s) = q(k×s+y, s) for any integer k and any y∈(-s/2, s/2]. 
Let  ipd  denote  the  original  IPD  before  watermark  bit  w  is 
embedded,  and  ipdw  denote  the  IPD  after  watermark  bit  w  is 
embedded.  To  embed  a  binary  bit  w  into  an  IPD,  we  slightly 
adjust that IPD such that the quantization of the adjusted IPD will 
have w as the remainder when the modulus 2 is taken. 
Given  any  ipd>0,  s>0  and  binary  bit  w,  the  watermark  bit 
embedding is defined as function 
s
s
where ∆ = (w-(q(ipd+s/2, s) mod 2)+2) mod 2. 
×∆+
s
),2/
sw
),
ipd
(
ipd
q
([
+
=
e
]
,
(4) 
The embedding of one watermark bit w into scalar ipd is done 
through increasing the quantization of ipd+s/2 by the normalized 
difference  between  w  and  modulo  2  of  the  quantization  of 
ipd+s/2, so that the quantization of resulting ipdw will have w as 
the  remainder  when  modulus  2  is  taken. The reason to quantize 
ipd+s/2  rather  than  ipd  here  is  to  make  sure  that  the  resulting 
e(ipd, w, s) is no less than ipd. Figure 2 illustrates the embedding 
of watermark bit w by mapping ranges of unwatermarked ipd to 
the corresponding watermarked ipdw. 
The watermark bit decoding function is defined as 
The  correctness  of  watermark  embedding  and  decoding  is 
2mod
ipd
(
ipd
(
(5) 
s
),
s
),
=
q
d
w
w
and either  
or  
(d(ipd+∆max, s) ≠ d(ipd, s) 
d(ipd-∆max, s) ≠ d(ipd, s)) 
m selected IPDs 
. . . 
ipd1 
. . . 
t 
ipdm 
ti,1 
ti,m 
tj,1 
tj,m 
Figure 3 Embedding/Decoding Watermark Bit 
over the Average of Multiple (m) IPDs 
guaranteed by the following theorems, whose proofs are in the 
appendix. 
THEOREM 1. For any ipd>0, s>0 and binary bit w, d(e(ipd, w, 
s), s) = w. 
THEOREM 2. For any ipd>0, s>0 and binary bit w, 0  ≤  e(ipd, 
w, s)-ipd  0,  s>0,  we  define  the  maximum  tolerable 
perturbation  ∆max  of  d(ipd,  s)  as  the  upper  bound  of  the 
perturbation over ipd such that  
∀x>0 (x0,  s>0  and  binary  watermark  bit  w,  by 
definition  of  quantization  q  in  (3)  and  watermark  decoding 
function d in (5), it is easy to see that when x∈(-s/2, s/2] 
d(e(ipd, w, s)+x, s) = d(e(ipd, w, s), s) 
and  
d(e(ipd, w, s)-s/2, s) ≠ d(e(ipd, w, s), s). 
This  indicates  that  the  maximum  tolerable  perturbation,  the 
tolerable perturbation range and the vulnerable perturbation range 
of  d(e(ipd,  w,  s),  s)  are  s/2,  (-s/2,  s/2]  and  (-D,  -s/2]∪(s/2,  D), 
respectively. 
In  summary,  if  the  perturbation  of  an  IPD  is  within  the 
tolerable perturbation range (-s/2, s/2], the embedded watermark 
bit  is  guaranteed  to  be  not  changed  by  the  timing  attack.  If  the 
perturbation  of  the  IPD  is  outside  this  range,  the  embedded 
watermark bit may be altered by the attacker. Therefore the larger 
the value of s (equivalently, the larger the tolerable perturbation 
range),  the  more  robust  the  embedded  watermark  bit  will  be. 
However,  a  larger  value  of  s  may  disturb  the  timing  of  the 
watermarked  flow  more,  as  the  watermark  bit  embedding  itself 
may add up to 2s delay to selected packets. 
It is desirable to have a watermark embedding scheme that 1) 
disturbs the timing of watermarked flows as little as possible, so 
that the watermark embedding is less noticeable; and 2) ensures 
the  embedded  watermark  bit  is  robust,  with  high  probability, 
against  timing  perturbations  that  are  outside  the  tolerable 
perturbation range (-s/2, s/2]. 
In  the  following  section,  we  address  the  case  when  the 
maximum  delay  D>0  added  by  the  attacker  is  bigger  than  the 
maximum  tolerable  perturbation  s/2.  By  utilizing  redundancy 
techniques,  we  develop  a  framework  that  could  make  the 
embedded watermark bit robust, with arbitrarily high probability, 
against  arbitrarily  large  (and  yet  bounded)  iid  random  timing 
perturbation  by  the  attacker,  as  long  as  the  flow  to  be 
watermarked contains enough packets.  
5.  PROBABILISTICALLY ROBUST 
WATERMARKING OVER IPDS 
5.1  Embedding A Single Watermark Bit over 
the Average of Multiple IPDs 
To  make  the  embedded  watermark bit probabilistically robust 
against  larger  random delays than s/2, the key is to contain and 
minimize  the  impact  of  the  random  delays  on  the  watermark-
bearing  IPDs  so  that  the  impact  of  the  random  delays  will  fall, 
with  high  probability,  within  the  tolerable  perturbation  range  (-
s/2, s/2]. 
We exploit the assumptions that: a) the attacker does not know 
the  exact  IPD(s)  where  the  watermark  bit(s)  will  be  embedded; 
and, b) the random delays added by the attacker are independent 
and identically distributed (iid). 
We apply the following strategies to contain and minimize the 
impact of random delays over the watermark-bearing IPDs: 
1)  Distributing  watermark-bearing  IPDs  over  a 
longer 
duration of the flow 
2)  Embedding  a  watermark  bit  in  the  average  of  multiple 
IPDs 
The  rationale  behind  these  strategies  is  as  follows.  While  the 
attacker may add a large delay to a single IPD, it is impossible to 
add  large  delays  to  all  IPDs.    In  fact,  random  delays  tend  to 
increase some IPDs and decrease others. Therefore the impact on 
the  average  of  multiple  IPDs  is  more  likely  to  be  within  the 
tolerable  perturbation 
the 
perturbation range [-D, D] is much larger than (-s/2, s/2]. 
(-s/2,  s/2],  even  when 
Instead of embedding a watermark bit in one IPD, we propose 
to use m≥1 IPDs.  The watermark bit is embedded in the average 
of the m IPDs (as shown in Figure 3). Since one bit is embedded 
in m IPDs, we call m the redundancy number. 
range 
Let  be the k-th pair (out of m≥1 pairs) of the packets 
selected  to  embed  the  watermark  bit,  whose  timestamps  are  ti,k 
and tj,k respectively. Then we have m IPDs: ipdk= tj,k- ti,k (k=1, …, 
m). We represent the average of these m IPDs as 
ipd
avg
=
ipd
k
(6) 
1
m
m
∑
k
1
=
Given  a  desired  ipdavg>0,  and  the  values  for  s  and w, we can 
embed w into ipdavg by applying the embedding function defined 
in  (4)  to  ipdavg.  Specifically,  the  timing  of  the  packets  Pj,k 
(k=1…m) is modified so that ipdavg is adjusted by ∆, as defined in 
(4).  To  decode  the  watermark  bit,  we  first  collect  the  m  IPDs 
ipd ,  k=1…m)  from  the  same  m  pairs  of  chosen 
(denoted  as 
w
k
packets and compute the average 
can apply the decoding function defined in (5) to 
the watermark bit.  
ipd
of 
w
avg
w
ipd1 … w
ipd . Then we 
 to decode 
ipd
m
w
avg
5.2  Embedding Multiple-Bit Watermarks 
We  have  described  how  to  use  m≥1  IPDs  to  embed  one 
watermark  bit  with  the  desired  robustness.    Embedding  this  bit 
requires the selection of 2m packets, and the delay of m packets. 
An  l-bit  watermark  can  be  embedded  simply  by  applying  the 
above method l times, to l sequences of m packet pairs each. This 
is illustrated in Figure 4.  It is possible to reduce the number of 
packets selected to (l+1)×m by making the second packet of the 
kth (k=1,…m) packet pair chosen for embedding bit i the same as 
the  first  packet  of  the  kth  packet  pair  chosen  for  embedding  bit 
i+1. 
The  following  information  about  watermark  embedding  is 
shared between the watermark embedder and the decoder.  This 
information is assumed to be unknown to the attacker. 
1)  The random selection of the (l+1)×m packets and random 
pairing  of  those  (l+1)×m  packets  for  embedding  and 
decoding the watermark. 
2)  The redundancy number m. 
3)  The number of watermark bits l. 
4)  The quantization step size s. 
5.3  Attacker’s Impact over the Average of 
Multiple IPDs 
Let di,k and dj,k be the random variables that denote the random 
delays added by the attacker to packets Pi,k and Pj,k respectively 
for  k=1,…,m.  By  assumption,  di,k  and  dj,k  (k=1,…,m)  are 
independent and identically distributed. Therefore di,1,…,di,m and 
dj,1,…,dj,m  form  two  random  samples  from  the  distribution  of 
random delays added by the attacker. 
Let Xk=dj,k-di,k be the random variable that denotes the impact 
of  these  random  delays  on  ipdk  and 
mX be  the  random  variable 
that denotes the overall impact of random delay on ipdavg. From 
(6) we have 
X
m
=
1
m
m
∑
k
1
=
(
d
kj
,
−
d
ki
,
)
=
1
m
m
∑
k
1
=
X
k
(7) 
Therefore the impact of the random delay by the attacker over 
ipdavg equals the sample mean of X1…Xm. 
We  define  the  probability  that  the  impact  of  the  timing 
perturbation  by  the  attacker  is  within  the  tolerable  perturbation 
range (-s/2, s/2] as the watermark bit robustness p, which can be 
expressed as p = Pr( 
|
mX < s/2 ). 
|
Similarly  we  define  the  probability  that  the  impact  of  the 
timing  perturbation  by  the  attacker  is  out  of  the  tolerable 
perturbation  range  (-s/2,  s/2]  as  the  watermark  bit  vulnerability, 
which can be quantitatively expressed as Pr( 
 ≥ s/2 ). 
|
mX
|
Let  σ2  be  the  variance  of  the  random  delay  added  by  the 
attacker. Because the maximum delay that may be added by the 
attacker is assumed to be bounded, σ2 is finite. 
From  the  properties  of  the  mean  and  variance  of  random 
and 
variables,  we 
have 
XE
(
k
)
=
dE
(
kj
,
)
−
dE
(
ki
,
)
=
0
m 
... 
m 
... 
ipd1,1 
ipd1,m 
. . . 
m 
... 
ipdl,1 
m 
... 
t 
ipdl,m 
. . . 
bit 1 
Figure 4.  Embedding l-bit watermark 
bit l 
into l sequences of IPDs  
(
=
0
Var
d
(
and 
Var
)
+
kj
,
Var
X
(