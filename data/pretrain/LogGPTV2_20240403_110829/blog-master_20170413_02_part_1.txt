## 奔跑吧，大屏 - 时间+空间 实时四维数据透视  
##### [TAG 15](../class/15.md) , [TAG 18](../class/18.md)
### 作者                                 
digoal                         
### 日期                                                                                             
2017-04-13                       
### 标签                          
PostgreSQL , 递归查询 , 大屏播报 , 最拥堵的路口 , 最旺的商铺 , 某个区域最拥堵的厕所 , 数据透视 , 流式计算 , 时序数据      
----                                                                                          
## 背景     
![pic](20170413_02_pic_001.jpg)  
随着物联网的发展，数据的产生越来越快。比如马路的汽车通过数据，用户的驻留数据，水纹传感器的数据，电商的FEED数据，网约车的轨迹数据 等等。  
这么多的数据，用途也不一样，有需要流式实时统计的，也有时序处理相关需求的，还有全量分析需求的。   
这些都有对应的解决方案。  
[《流计算风云再起 - PostgreSQL携PipelineDB力挺IoT》](../201612/20161220_01.md)    
[《时序数据库有哪些特点? TimescaleDB时序数据库介绍》](../201704/20170409_05.md)    
[《ApsaraDB的左右互搏(PgSQL+HybridDB+OSS) - 解决OLTP+OLAP混合需求》](../201701/20170101_02.md)    
以指挥中心的大屏为例，有一些需求就很有意思，比如  
1\. 展示最新的传感器TOP VALUE数据。  
2\. 选择时间轴，按区域，展示人流量。  
## 例子  
### 1 输出所有传感器上报的最新值  
这个需要和我之前写的这个例子很相似。  
[《时序数据合并场景加速分析和实现 - 复合索引，窗口分组查询加速，变态递归加速》](../201611/20161128_01.md)    
设计表结构，gid表示传感器ID，val是上传的值，crt_time是时间。  
假设有1万个传感器，插入1000万条记录。  
```  
create unlogged table sort_test(  
  id serial8 primary key,          -- 自增主键  
  s_id int,                        -- 传感器ID  
  val  numeric(10,2),              -- 传感器值  
  crt_time timestamp default clock_timestamp()    -- 上报时间  
);    
```  
写入1000万传感器测试数据  
```  
postgres=# insert into sort_test (s_id,val) select random()*10000, random()*100 from generate_series(1,10000000);  
INSERT 0 10000000  
```  
创建索引  
```  
postgres=# create index idx_test on sort_test using btree(s_id,id desc);  
```  
使用递归调用的方法，获取所有传感器的最新值(以每个传感器的最大的自增ID为最新上报标记)  
```  
create type r as (s_id int, val numeric(10,2));  -- 复合类型  
with recursive skip as (    
  (    
    select (s_id,val)::r as r from sort_test where id in (select id from sort_test where s_id is not null order by s_id,id desc limit 1)   
  )    
  union all    
  (    
    select (  
      select (s_id,val)::r as r from sort_test where id in (select id from sort_test t where t.s_id>(s.r).s_id and t.s_id is not null order by s_id,id desc limit 1)   
    ) from skip s where (s.r).s_id is not null  
  )               -- 这里的where (s.r).s_id is not null 一定要加, 否则就死循环了.   
)     
select (t.r).s_id, (t.r).val from skip t where t.* is not null;   
```  
1000万条记录，筛选1万条最新记录，耗费时间：129毫秒。  
为什么能这么快？因为用了递归，减少了扫描量和运算量。  
```  
 s_id  |  val    
-------+-------  
     0 | 83.55  
     1 | 91.62  
     2 | 72.70  
     3 | 45.46  
     4 | 99.97  
     5 | 17.04  
     6 |  8.96  
     7 | 25.83  
     8 | 28.10  
     9 | 26.19  
    10 | 83.03  
    11 |  1.30  
......  
Time: 128.779 ms  
```  
使用游标则更快，一次获取10条，仅花费0.36毫秒。  
```  
postgres=# begin;  
BEGIN  
Time: 0.095 ms  
postgres=# declare cur cursor for with recursive skip as (    
  (    
    select (s_id,val)::r as r from sort_test where id in (select id from sort_test where s_id is not null order by s_id,id desc limit 1)   
  )    
  union all    
  (    
    select (  
      select (s_id,val)::r as r from sort_test where id in (select id from sort_test t where t.s_id>(s.r).s_id and t.s_id is not null order by s_id,id desc limit 1)   
    ) from skip s where (s.r).s_id is not null  
  )               -- 这里的where (s.r).s_id is not null 一定要加, 否则就死循环了.   
)     
select (t.r).s_id, (t.r).val from skip t where t.* is not null;  
DECLARE CURSOR  
Time: 0.841 ms  
postgres=# fetch 10 from cur;  
 s_id |  val    
------+-------  
    0 | 83.55  
    1 | 91.62  
    2 | 72.70  
    3 | 45.46  
    4 | 99.97  
    5 | 17.04  
    6 |  8.96  
    7 | 25.83  
    8 | 28.10  
    9 | 26.19  
(10 rows)  
Time: 0.364 ms  
```  
### 2 输出某个城市的车流TOP 10路口  
![pic](20170413_02_pic_002.jpg)  
相比第一个例子，做了一次收敛，按VALUE排序，输出最大的。  
假设每个路口有传感器不断上报路口通过的车流数量。大屏展示通过量最大的10个路口。  
为了测试方便，我这里依旧使用第一个例子的数据，末尾加上。  
```  
postgres=# with recursive skip as (    
  (    
    select (s_id,val)::r as r from sort_test where id in (select id from sort_test where s_id is not null order by s_id,id desc limit 1)   
  )    
  union all    
  (    
    select (  
      select (s_id,val)::r as r from sort_test where id in (select id from sort_test t where t.s_id>(s.r).s_id and t.s_id is not null order by s_id,id desc limit 1)   
    ) from skip s where (s.r).s_id is not null  
  )               -- 这里的where (s.r).s_id is not null 一定要加, 否则就死循环了.   
)     
select (t.r).s_id, (t.r).val from skip t where t.* is not null order by 2 desc limit 10;   
 s_id |  val    
------+-------  
  997 | 99.99  
 2233 | 99.97  
  610 | 99.97  
    4 | 99.97  
 6735 | 99.96  
  545 | 99.93  
 2992 | 99.91  
 4747 | 99.90  
  543 | 99.89  
 7229 | 99.88  
(10 rows)  
Time: 126.052 ms  
```  
1000万条记录，筛选1万条最新记录，输出TOP 10，耗费时间：126毫秒。  
### 3 某个区域，某个时间段，按钮人流量输出TOP 商铺  
![pic](20170413_02_pic_003.jpg)  
相比前两个例子，多了两个维度：  
一个是时间维度，用户可以勾选时间段进行分析。另一个是区域维度，用户要勾选地区，输出地区内的数据。  
思考：  
空间索引不像B-TREE索引是有序存储的，空间索引是GIST索引，使用了类似聚类分区的结构，因此在进行多列复合时，GIST的空间查询结合索引排序输出第一条，是行不通的，会引入显示的SORT。  
原理参考  
[《从难缠的模糊查询聊开 - PostgreSQL独门绝招之一 GIN , GiST , SP-GiST , RUM 索引原理与技术背景》](../201612/20161231_01.md)  
同时查询条件包含了时间区间作为条件，索引非驱动列（子段gid+VAL）的排序也是行不通的。  
什么时候能使用复合索引的查询+排序？  
仅仅当排序列前面的所有列都是等值查询时，才能使用隐式排序，并且索引的顺序要和排序的顺序一致。例如index(a,b,c)支持where a=? and b=? order by c，但是不支持where a> ? and b=? order by c等等。  
重新规划测试数据，为了测试方便, 以point取代经纬度，真实业务可以使用geometry类型。    
```  
create table test (  
  id serial8 primary key,    -- 自增序列  
  gid int,                   -- 商铺ID  
  val int,                   -- 商铺人流  
  pos point,                 -- 商铺位置, 为了测试方便, 以point取代经纬度  
  crt_time timestamp         -- 上传时间  
);  
```  
插入1000万测试数据，1万个店铺ID，1亿的点阵范围中的随机point。   
```  
postgres=# insert into test (gid,val,pos,crt_time) select random()*10000, random()*100000, point(random()*10000, random()*10000), clock_timestamp() from generate_series(1,10000000);  
postgres=# select min(crt_time),max(crt_time) from test;  