### Route Redistribution and Oscillation

At time \( t_2 \), Router C receives a route redistributed by Router D from routing instance 3 into routing instance 4. Simultaneously, Router D receives a route redistributed by Router C from routing instance 3 into routing instance 4. Consequently, both Routers C and D have two routes to the destination P: one received from routing instance 3 and the other from routing instance 4. Since routing instance 4 has a lower Administrative Distance (AD), Routers C and D update their entries for P, pointing to M as the next-hop. Both Routers C and D then stop redistributing the route to P into routing instance 4.

At time \( t_3 \), Router D (and similarly, Router C) no longer receives the route from Router C (or D). As a result, each router has only one route to P, which is received from routing instance 3. Therefore, Routers D and C update their routes to P, selecting the route from routing instance 3 and redistributing it into routing instance 4.

It is important to note that the states at times \( t_1 \) and \( t_3 \) are identical. This leads to an oscillation between these states. [14] analyzed the origins of such anomalies in route redistribution and proposed several guidelines. To prevent these oscillations, prefix-filters must be accompanied by an adjustment of the AD values at the border routers, ensuring that routing instance 3 has a lower AD value than instances 1 and 4. With these modifications, when Routers C and D receive two routes at time \( t_2 \), they will maintain their existing active route through routing instance 3.

### Routing Instance Trace

Section 7.2.2 discussed the potential formation of permanent forwarding loops for prefixes that are redistributed across multiple IGP instances (Limitation 2). Networks that implement efficient routing through route redistribution, as described in Section 6, can also experience transient forwarding loops. Although the cost of an OSPF route is preserved between OSPF routing instances and routers can compute the shortest path to every destination, forwarding loops can still emerge. This is because, when a route is redistributed into a target routing instance, this instance does not have a global view of the network but only knows the next routing instance where to forward the traffic. Thus, the behavior is similar to that of a distance-vector protocol, and forwarding loops can form, akin to RIP's "count to infinity" problem [15].

To avoid permanent and transient forwarding loops, some operators have implemented a method called "routing instance trace." BGP addresses forwarding loop problems through the AS-PATH, where each BGP AS prepends its identifier when a route traverses a domain. This field allows an autonomous system to recognize routes it previously forwarded, preventing re-injection back into the same AS. However, this technique cannot be directly implemented in other routing protocols because IGPs (RIP, OSPF, EIGRP, etc.) typically support only a single fixed-length 32-bit tag per route.

The routing instance trace approach uses the 32-bit tag field to keep track of the routing instances traversed by a route. Each routing instance is associated with a specific bit in the binary representation of the tag. For example, routing instance 1 may be assigned the rightmost bit of the tag. Whenever a route traverses a routing instance, its corresponding bit is flipped from 0 to 1. This method implements a trace that keeps track of the routing instances that have been traversed, similar to the AS-PATH in BGP. Networks thus rely on the routing instance trace to prevent loops from occurring.

The limitations of this method include the need for a long and complex configuration at each border router and the scalability issue due to the limited number of bits in the available tag.

### Discussion

#### Interpretation of Results

Our data analysis indicates that the use of route redistribution in operational networks is largely due to the limitations of current routing protocols in meeting certain design objectives, such as efficient routing and partition healing. One interpretation is that existing routing protocols need to be extended or new protocols defined to support these properties. However, this implies a lengthy process for each new operational need, potentially hampering innovation and the deployment of new services. Instead, operators often "creatively" use available tools to meet their objectives, suggesting that routing protocols may always need to be complemented by flexible tools.

An analogy can be drawn between a set of routing protocols and a distributed database system. Each routing protocol can be viewed as a database offering a number of entries (i.e., routes). A router acts as a client that can access several databases simultaneously. The glue logic is the query interface that allows the client to compare and select the best entry. The current glue logic, based on the administrative distance (AD) parameter, is rather simplistic and limits the range of functionality. For example, efficient routing is currently feasible only between routing instances of the same protocol (e.g., OSPF 1 and OSPF 2). An enterprise network with branches using different protocols (e.g., RIP in France and OSPF in the UK) cannot achieve efficient routing with the current glue logic.

In Figure 16, we identify three essential primitives of the glue logic: ranking of routes from multiple routing processes, importing routes from the routing protocols into the forwarding table, and exporting routes from the forwarding table into the routing protocols. Alternative designs to add more flexibility to the glue logic, such as supporting additional criteria (e.g., metric, bandwidth) and basic constructs (e.g., if condition, while loop), could be considered. [4] takes a step in this direction.

Adding flexibility to the glue logic may raise concerns about routing safety. However, the existing glue logic, based on a single AD parameter, is already vulnerable to routing anomalies. Efforts should focus on identifying sufficient conditions and configuration guidelines to ensure both safety and flexibility. [14] took a first step in this direction. We also envision a separate network-wide coordination mechanism to ensure safety, gathering parameters related to the glue logic from all routers and ensuring compliance with global constraints.

#### Limitations of the Study

The number of design patterns discovered is ultimately constrained by the dataset and methodology. Additional networks or alternative data mining methods may reveal more operational design patterns. The goal of this study was to investigate whether the glue logic is used to implement important design objectives that cannot be achieved with existing routing protocols alone. We did not characterize the prevalence of the identified patterns or examine the safety of the route redistribution configurations in depth. While such studies would be insightful, our aim was to better understand why and how operational networks use route redistribution and to disclose some vulnerabilities.

### Related Work

Several studies have examined router configurations for different purposes. For example, [11] and [12] parse configuration files to detect potential misconfigurations. This study is the first to look at the usage of route redistribution in operational networks. The closest related work is [17], which inferred routing design from router configuration files. This study differs from [17] in focusing on the interconnections (i.e., the glue logic) between routing instances and considering critical parameters like AD values. [17] does not separately model the details of each interconnection point, limiting its ability to discover and infer the rationales of design patterns.

In terms of routing anomalies, [10], [9], [15], [14], and [16] illustrated possible undesired consequences of route redistribution. [10] and [9] addressed simple scenarios, while [15] and [14] relied on hypothetical configurations. This paper provides an empirical look at the problem, describing actual topologies and requirements, and presenting solutions currently used by operators.

[21] proposes changes to BGP to support efficient routing, allowing routers to select more optimal paths. However, it does not guarantee the selection of the shortest path and only addresses one requirement. [13] introduces a framework for operators to implement their own routing protocols, but whether the identified operational requirements can be supported by such protocols remains to be investigated.

### Conclusion

This study highlights the critical role of the "hidden" glue logic between routing protocols in operational networks. It confirms the prevalence of route redistribution and shows that operators rely on it to implement design objectives beyond simple route exchange. These findings expose major insufficiencies in existing routing protocols and the high vulnerability of route redistribution to routing anomalies, resulting in complex configurations. The study underscores the need for more efforts by both research and operational communities to address the documented safety problems of the glue logic. The evolution of the glue logic role in the Internet architecture is an exciting area for future research.

### Acknowledgments

We thank Jay Borkenhagen, Appanna Chottera, Mike Donoghue, Alex Gerber, Timothy Griffin, Seungjoon Lee, Steve Legget, Mark Lyn, Kobus van der Merwe, Jason Philippon, Mike Satterlee, Tom Scholl, Aman Shaikh, and Philip Taylor for many helpful discussions. We also express our gratitude to those who provided us with their network configurations and discussed them with us but prefer to remain anonymous. This research was partially sponsored by the NSF under the 100x100 Clean Slate Project [1] (NSF-0331653), the 4D Project [2] (NSF-0520187), grants CNS-0520210, CNS-0721574, and a Graduate Research Fellowship. Views and conclusions contained in this document are those of the authors and should not be interpreted as representing the official policies, either expressed or implied, of AT&T, NSF, or the U.S. government.

### References

[1] 100x100 Clean Slate Project. www.100x100network.org.
[2] 4D Project. www.cs.cmu.edu/∼4D.
[3] NSF FIND Program. www.nets-find.net.
[4] XORP. www.xorp.org.
[5] Cisco. Using OSPF in an MPLS VPN Environment, 2002.
[6] Cisco. BGP Best Path Selection Algorithm, 2006.
[7] Cisco. EIGRP MPLS VPN PE-CE Site of Origin, 2006.
[8] Cisco. OSPF Design Guide, 2006.
[9] Cisco. OSPF Redistribution Among Different OSPF Processes, 2006.
[10] Cisco. Redistributing Routing Protocols, 2006.
[11] N. Feamster and H. Balakrishnan. Detecting BGP Configuration Faults with Static Analysis. In Proc. NSDI, 2005.
[12] A. Feldmann and J. Rexford. IP Network Configuration for Intradomain Traffic Engineering. In IEEE Network Magazine, 2001.
[13] T. G. Griffin and J. L. Sobrinho. Metarouting. In Proc. ACM SIGCOMM, 2005.
[14] F. Le and G. Xie. On Guidelines for Safe Route Redistributions. In Proc. ACM INM Workshop, 2007.
[15] F. Le, G. Xie, and H. Zhang. Understanding Route Redistribution. In Proc. IEEE ICNP, 2007.
[16] F. Le, G. Xie, and H. Zhang. Instability Free routing: Beyond One Protocol Instance. Technical Report CMU-CS-08-123, May 2008.
[17] D. Maltz, G. Xie, J. Zhan, H. Zhang, G. Hjalmtysson, and A. Greenberg. Routing design in operational networks: A look from the inside. In Proc. ACM SIGCOMM, 2004.
[18] S. Misel. Wow, AS7007! www.merit.edu/mail.archives/nanog/1997-04/msg00340.html.
[19] V. Paxson. End-to-end routing behavior in the Internet. In Proc. of ACM SIGCOMM, 1996.
[20] I. Pepelnjak and J. Guichard. MPLS and VPN Architectures. Cisco Press, 2000.
[21] Ratul Mahajan et al. Mutually Controlled Routing with Independent ISPs. In Proc. NSDI, 2007.
[22] E. Rosen, P. Psenak, and P. Pillay-Esnault. OSPF as the Provider/Customer Edge Protocol for BGP/MPLS IP Virtual Private Networks (VPNs). RFC 4577, 2006.
[23] J. W. Stewart. BGPv4: Inter-Domain Routing in the Internet. By Addison-Wesley, 1999.
[24] T. V. Lakshman et al. The SoftRouter architecture. In Proc. ACM HotNets Workshop, 2004.