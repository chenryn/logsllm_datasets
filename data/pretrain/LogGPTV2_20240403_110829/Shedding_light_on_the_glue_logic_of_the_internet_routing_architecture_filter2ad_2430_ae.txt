t2 Router C receives the route redistributed by router D from rout-
ing instance 3 into routing instance 4. At the same time, router
D receives the route redistributed by router C from routing in-
stance 3 into routing instance 4. As such, C (resp., D) has two
routes to P . The ﬁrst one is received from routing instance 3
and the second one is received from routing instance 4. Because
routing instance 4 has a lower AD, router C (resp., D) updates
its entry to P and points to M as the next-hop. Both C and D
stop redistributing a route to P into routing instance 4.
t3 Router D (resp., C) no longer receives the route from C (resp.,
D). D (resp., C) only has one route to P which is received from
routing instance 3. Therefore D (resp., C) updates its route to
P , selecting the route from routing instance 3 and redistributes
it into routing instance 4.
We note that the states at t1 and t3 are identical. As such, the
route oscillates between these states.
[14] analyzed the origins
of the anomalies in route redistribution and proposed a number
of guidelines. To prevent these oscillations, the preﬁx-ﬁlters must
be accompanied by an adjustment of the AD values at the border
routers, such that 3 has a lower AD value than 1 and 4. With these
modiﬁcations, when routers C and D receive two routes at time
t2, they will maintain their existing active route through routing in-
stance 3.
Routing instance trace
Section 7.2.2 discussed the possible formation of permanent for-
warding loops for preﬁxes that are redistributed across multiple IGP
instances (Limitation 2). Networks that implement efﬁcient routing
through route redistribution as described in Section 6 can also re-
sult in transient forwarding loops. Although the cost of an OSPF
route is preserved between OSPF routing instances and routers can
compute the shortest path to every destination, forwarding loops
can emerge. This is because when a route is redistributed into a tar-
get routing instance, this latter does not have a global view of the
network but only knows the next routing instance where to forward
the trafﬁc. As such, the behavior is similar to that of a distance vec-
tor protocol and forwarding loops can form like in RIP (count to
inﬁnity problems) [15]. To avoid permanent and transient forward-
ing loops, some operators have implemented an interesting method
which we call routing instance trace.
BGP addresses forwarding loop problems through the AS-PATH
where each BGP AS prepends its identiﬁer when a route traverses
a domain. This ﬁeld allows an autonomous system to recognize
routes it previously forwarded. As such, the BGP AS-PATH pre-
vents routes from being re-injected back into an autonomous sys-
tem where it initially came from. The same technique cannot be
directly implemented in other routing protocols because contrary
to BGP, IGP protocols (RIP, OSPF, EIGRP, etc.) typically support
only a single ﬁxed-length 32-bits tag per route.
The routing instance trace approach keeps track of the routing
instances traversed by a route through that 32-bits tag ﬁeld: each
routing instance is associated with a speciﬁc bit in the binary rep-
resentation of the tag. For example, routing instance 1 may be as-
signed the right most bit of the tag. Whenever a route traverses a
routing instance, its corresponding bit is ﬂipped from 0 to 1. This
method implements a trace that keeps track of the routing instances
that have been traversed, similar to the AS-PATH in BGP. Networks
therefore rely on the routing instance trace to prevent loops from
occurring.
The limitations of this method are that it requires a long and
convoluted conﬁguration at each border router, and that it does not
scale to a large number of routing instances due to the limited num-
ber of bits in the available tag.
8. DISCUSSION
Section 8.1 discusses possible interpretations of the empirical re-
sults. Section 8.2 describes some limitations of this study.
8.1 Interpretation of results
Our data analysis results indicate that the use of route redistri-
bution in operational networks is to a large extent due to the limi-
tations of current routing protocols in meeting some design objec-
tives (e.g., efﬁcient routing and partition healing). A ﬁrst interpre-
tation of these results could be that existing routing protocols need
to be extended or new routing protocols need to be deﬁned to sup-
port the identiﬁed properties. However, this implies that every time
a new operational need were identiﬁed, a new extension to the ex-
isting protocols or a new protocol would need to be created, which
could be a very lengthy process. Such an approach would ham-
per innovations and the deployment of new services. This study
shows that operators do not wait for new protocol extensions but
“creatively” use whatever available tools to fulﬁll their objectives.
As such, a more likely interpretation of the results seems that
routing protocols may always need to be accompanied by some
tools that leave enough ﬂexibility in the architecture. As long as
the Internet routing architecture is composed of multiple routing
protocols, the glue logic is likely to remain and play a fundamental
role. To illustrate this point, we draw an analogy between a set of
routing protocols and a distributed database system. Each routing
protocol can be viewed as one database offering a number of entries
(i.e., routes). A router is a client that can access several databases at
a time. The glue logic is the query interface that allows the client to
compare the entries from different databases and to select the best
entry for this speciﬁc client.
Interestingly, this analogy illuminates a potential lack of ﬂexi-
bility of the current version of glue logic. The route selection and
route redistribution procedures only allow operators to rank and se-
lect routes based on the administrative distance (AD) parameter.
This rather simplistic logic might have severely limited the range
of functionality that the glue logic can provide. For example, the
efﬁcient routing design pattern is currently only feasible between
routing instances of the same routing protocol (e.g., between OSPF
1 and OSPF 2). However, an enterprise network may consist of
multiple branches deploying different routing protocols. A branch
in France may deploy RIP and rely on the metric attribute of a route
to carry an indication of the physical distances in kilometers. An-
other branch which is in the U.K. may use the OSPF protocol and
rely on the link cost to reﬂect the physical distance in miles. The
current glue logic does not permit the operators to achieve efﬁcient
routing between the two branches through the following policy:
“rank RIP routes based on RIP metric and OSPF routes based on
1.6 × OSPF cost.” As another example, it makes good sense from
the trafﬁc engineering perspective that some routes are advertised
widely (e.g., from one AS to another via BGP) only if the available
bandwidth for the corresponding data path exceeds a determined
threshold. However, such a policy cannot be implemented using
the current glue logic.
In fact, as illustrated in Figure 16, we can identify three essen-
tial primitives of the glue logic, those of: 1) ranking of the routes
from multiple routing processes, 2) importing of the routes from
the routing protocols into the forwarding table and 3) exporting of
the routes from the forwarding table into the routing protocols at
each router. The existing primitives rely on the AD parameter. It
would be a worthwhile exercise to consider alternative designs to
add more ﬂexibility to the glue logic. An extreme design point
would be to add both the ability to manipulate based on additional
criteria (e.g., metric, bandwidth, etc.) and the support of basic con-
Routing architecture
Goal: select paths along which to send data
Glue logic
Goal: rank routes, import routes from RIBs to FIB
and export routes from FIB to RIBs
Primitives
Low−level operations allowing operators to
construct more compound functions
rank
import
export
C
o
n
s
t
r
a
i
n
t
s
/
c
o
o
r
d
i
n
a
t
i
o
n
i
n
f
o
r
m
a
t
i
o
n
b
e
t
w
e
e
n
R
B
s
I
G
o
a
l
:
d
i
s
s
e
m
i
n
a
t
e
r
o
u
t
i
n
g
R
o
u
t
i
n
g
p
r
o
t
o
c
o
l
s
Figure 16: Main components of the routing architecture.
structs (e.g., if condition, while loop, for loop). A step in this di-
rection is taken in [4].
One may contest that adding ﬂexibility to the glue logic may not
always be desirable since it can be detrimental to routing safety.
We argue that limiting the ﬂexibility of glue logic is not an ef-
fective means to enhance routing safety. Section 7 showed that
the existing glue logic, which is based on a single AD parame-
ter, is already highly vulnerable to routing anomalies. Instead, ef-
forts should be directed toward identifying sufﬁcient conditions and
associated conﬁguration guidelines that are sufﬁcient for ensuring
routing safety and ﬂexible enough to allow operators to achieve
their desired objectives. [14] took a ﬁrst step in this direction.
We also envision the addition of a separate network-wide coor-
dination mechanism to the glue logic to assure safety (Figure 16).
The coordination mechanism would gather parameters related to
the glue logic from all routers and make sure that collectively the
parameters meet certain sufﬁcient conditions for safety. The goal
of the coordination mechanism is not to disseminate routing infor-
mation, but to coordinate the actions at each router and to ensure
that the workings of the glue logic at the different entities remain
compliant with some global constraints. This functionality can be
achieved by either enhancing the existing routing protocols (e.g.,
adding new attributes in routing updates) or deploying a new (cen-
tralized or distributed) coordination protocol, or some other mech-
anisms.
Finally, there are ongoing efforts to redesign the Internet routing
architecture [1], [24], [3]. We believe that the role of the glue logic
should be closely examined in these studies.
8.2 Limitations of study
The number of design patterns that can be discovered is ulti-
mately constrained by the dataset and the methodology. The con-
sideration of additional networks or other sources of information
and the usage of alternative data mining methods may potentially
reveal more operational design patterns. However, the goal of this
study was not to identify all existing operational requirements, but
to investigate whether the glue logic is used to implement impor-
tant design objectives that cannot be achieved with existing routing
protocols alone.
We did not attempt to characterize the prevalence of the identi-
ﬁed patterns (efﬁcient routing and partition healing) in the dataset.
Neither did we examine in depth the safety of the route redistribu-
tion conﬁgurations (e.g., determining the percentage of networks
in the dataset that are vulnerable to routing anomalies). While such
studies would be insightful, we sought to ﬁrst better understand
why and how operational networks use route redistribution. We
disclosed some vulnerabilities of some conﬁgurations to illustrate
the state of the art and the risk with current methods.
9. RELATED WORK
A number of studies have looked at router conﬁgurations but for
different purposes. For example, [11] and [12] parse conﬁgura-
tion ﬁles to detect potential misconﬁgurations. This study is the
ﬁrst to look at the usage of route redistribution in operational net-
works. The closest related work is [17], which inferred routing de-
sign in operational networks from router conﬁguration ﬁles. This
study differs from [17] in several aspects. First, [17] concentrates
on identifying the presence of the routing instances in a network,
whereas this study focuses on the interconnections (i.e., the glue
logic) between the routing instances. Second, the methodology in
[17] does not consider a number of parameters that may impact
the boundary of a routing instance and it does not model the AD
value of a routing process, which is a critical parameter in deter-
mining a route’s eligibility to be redistributed. Third, [17] does not
separately model the details of each interconnection point when
two routing instances are interconnected at multiple border routers.
These limitations of [17] restrain its ability to discover and infer the
rationales of design patterns. Finally, in terms of results, while [17]
revealed that the Internet landscape is more complex than a simple
BGP/IGP hierarchy, this study has discovered two detailed routing
design patterns driven by operational requirements that cannot be
fulﬁlled by routing protocols alone.
In terms of routing anomalies, [10], [9], [15], [14], and [16] illus-
trated possible undesired consequences that can result from route
redistribution. Yet, [10] and [9] only addressed simple scenarios,
and [15] and [14] relied on hypothetical conﬁgurations to illustrate
potential instabilities. This paper is the ﬁrst empirical look at the
problem: we describe actual topologies and requirements to be met
by operators, and we present some of the solutions currently used
by operators.
[21] proposes changes to BGP to support efﬁcient routing. The
proposed modiﬁcations allow routers to select more optimal paths
than the current BGP path selection algorithm. Yet, they do not
guarantee the selection of the shortest path. In addition, [21] only
addresses one requirement but not the other design objectives (e.g.,
partition healing) that our study disclosed. Finally, to address the
shortcomings of existing routing protocols, [13] introduces an ele-
gant framework for operators to implement their own routing pro-
tocols. Yet, whether the identiﬁed operational requirements can be
supported by such protocols still needs to be investigated.
10. CONCLUSION
By examining operational network conﬁgurations, this paper has
brought to light the critical role played by the “hidden” glue logic
between the routing protocols. This study conﬁrmed the prevalence
of route redistribution in operational environments. More impor-
tantly, it showed that operators rely on it not simply to interconnect
routing instances but also to implement design objectives beyond
simple exchange of routes. These discoveries expose some major
insufﬁciencies of existing routing protocols to support operational
requirements. The study also found that the high vulnerability of
route redistribution to routing anomalies has resulted in complex
conﬁgurations. Furthermore, some of the complex conﬁgurations
can still be vulnerable to routing instabilities. These empirical re-
sults seem to strongly suggest that making routing protocols safe
and robust alone may not be sufﬁcient to ensure robustness of a net-
work. This observation underscores the urgency for more efforts by
both the research and operational communities to address all docu-
mented safety problems of the glue logic. Finally, we believe that
the evolution of the glue logic role in the Internet architecture con-
situtes an exciting area for future research.
11. ACKNOWLEDGMENTS
We thank Jay Borkenhagen, Appanna Chottera, Mike Donoghue,
Alex Gerber, Timothy Grifﬁn, Seungjoon Lee, Steve Legget, Mark
Lyn, Kobus van der Merwe, Jason Philippon, Mike Satterlee, Tom
Scholl, Aman Shaikh and Philip Taylor for many helpful discus-
sions. We would also like to express our gratitude to all others who
provided us with the conﬁgurations of their networks and discussed
them with us but prefer to preserve their anonymity. This research
was partially sponsored by the NSF under the 100x100 Clean Slate
Project [1] (NSF-0331653), the 4D Project [2] (NSF-0520187),
grants CNS-0520210, CNS-0721574 and a Graduate Research Fel-
lowship. Views and conclusions contained in this document are
those of the authors and should not be interpreted as representing
the ofﬁcial policies, either expressed or implied, of AT&T, NSF, or
the U.S. government.
12. REFERENCES
[1] 100x100 Clean Slate Project. www.100x100network.org.
[2] 4D Project. www.cs.cmu.edu/∼4D.
[3] NSF FIND Program. www.nets-ﬁnd.net.
[4] XORP. www.xorp.org.
[5] Cisco. Using OSPF in an MPLS VPN Environment, 2002.
[6] Cisco. BGP Best Path Selection Algorithm, 2006.
[7] Cisco. EIGRP MPLS VPN PE-CE Site of Origin, 2006.
[8] Cisco. OSPF Design Guide, 2006.
[9] Cisco. OSPF Redistribution Among Different OSPF
Processes, 2006.
[10] Cisco. Redistributing Routing Protocols, 2006.
[11] N. Feamster and H. Balakrishnan. Detecting BGP
Conﬁguration Faults with Static Analysis. In Proc. NSDI,
2005.
[12] A. Feldmann and J. Rexford. IP Network Conﬁguration for
Intradomain Trafﬁc Engineering. In IEEE Network
Magazine, 2001.
[13] T. G. Grifﬁn and J. L. Sobrinho. Metarouting. In Proc. ACM
SIGCOMM, 2005.
[14] F. Le and G. Xie. On Guidelines for Safe Route
Redistributions. In Proc. ACM INM Workshop, 2007.
[15] F. Le, G. Xie, and H. Zhang. Understanding Route
Redistribution. In Proc. IEEE ICNP, 2007.
[16] F. Le, G. Xie, and H. Zhang. Instability Free routing: Beyond
One Protocol Instance. Technical Report CMU-CS-08-123,
May 2008.
[17] D. Maltz, G. Xie, J. Zhan, H. Zhang, G. Hjalmtysson, and
A. Greenberg. Routing design in operational networks: A
look from the inside. In Proc. ACM SIGCOMM, 2004.
[18] S. Misel. Wow, AS7007! www.merit.edu/mail.archives/
nanog/1997-04/msg00340.html.
[19] V. Paxson. End-to-end routing behavior in the Internet. In
Proc. of ACM SIGCOMM, 1996.
[20] I. Pepelnjak and J. Guichard. MPLS and VPN Architectures.
Cisco Press, 2000.
[21] Ratul Mahajan et al. Mutually Controlled Routing with
Independent ISPs. In Proc. NSDI, 2007.
[22] E. Rosen, P. Psenak, and P. Pillay-Esnault. OSPF as the
Provider/Customer Edge Protocol for BGP/MPLS IP Virtual
Private Networks (VPNs). RFC 4577, 2006.
[23] J. W. Stewart. BGPv4: Inter-Domain Routing in the Internet.
By Addison-Wesley, 1999.
[24] T. V. Lakshman et al. The SoftRouter architecture. In Proc.
ACM HotNets Workshop, 2004.