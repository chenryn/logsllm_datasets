title:Fighting Computer Virus Attacks
author:Peter Szor
Fighting Computer Viruses
Jeffrey Kephart, Gregory Sorkin, David Chess, Steve White
Scientific American
November 1997
Computer viruses have pervaded popular culture at least as successfully as they 
have the world's computer population. Capitalizing on the same fearful fascination 
with man-made life-forms that Mary Shelley tapped in Frankenstein, viruses have 
become the subject of widespread  urban legends  and hoaxes, popular television 
shows and movies. Yet they have not received much scientific scrutiny.
Much of their popular presence is attributable to an obvious but deep biological 
analogy: computer viruses replicate by attaching themselves to a host (a program or 
computer instead of a biological cell) and co-opting the host's resources to make 
copies of themselves. Symptoms can range from unpleasant to fatal. Computer 
viruses spread from program to program and computer to computer, much as 
biological viruses spread within individuals and among individual members of a 
society. There are other computer pathogens, such as the "worms" that occasionally 
afflict networks and the "Trojan horses" that put a deceptively friendly face on 
malicious programs, but viruses are the most common computer ill by far.
We and our colleagues at the IBM Thomas J. Watson Research Center have 
found the biological analogy to be helpful in understanding the propagation of 
computer   viruses   on   a   global   scale   and   inspirational   in   our   development   of 
defenses   against   them.   Building   on   decades   of   research   by   mathematical 
epidemiologists, we have obtained some understanding of the factors that govern 
how quickly viruses spread. Our efforts to find efficient methods of detecting 
viruses and the relations among them owe much to pattern-matching techniques 
developed   by   computational   biologists.   Furthermore,   we   have   also   drawn 
inspiration for defenses against pathological software from the vertebrate immune 
system and its astounding ability to repel or destroy pathogens.
Computer viruses can trace their pedigree to  John von Neumann's  studies of 
self-replicating   mathematical   automata   in   the   1940s.   Although   the   idea   of 
programs that could infect computers dates to the 1970s, the first well-documented 
case of a computer virus spreading "in the wild" occurred in October 1987, when a 
code snippet known as the "Brain" virus appeared on several dozen diskettes at the 
University of Delaware. Today viruses afflict at least a million computers every 
year. Users spend several hundred million dollars annually on antivirus products 
and services, and this figure is growing rapidly.
Most viruses attack personal computers (PCs). More than 10,000 viruses have 
appeared so far, and unscrupulous programmers generate roughly another six every 
day. Fortunately, only a handful have been detected far afield. There are three main 
classes of PC viruses (and the categories for other systems are analogous): file 
infectors, boot-sector viruses and macro viruses. Roughly 85 percent of all known 
viruses infect files containing applications such as spreadsheet programs or games. 
When a user runs an infected application, the virus code executes first and installs 
itself  independently   in   the   computer's   memory   so   that   it   can   copy   itself   into 
subsequent applications that the user runs. Once in place, the virus returns control 
to the infected application; the user remains unaware of its existence. Eventually a 
tainted program will make its way to another computer via a shared diskette or 
network, and the infection cycle will begin anew.
Boot-sector viruses, which account for about 5 percent of known PC virus 
strains, reside in a special part of a diskette or hard disk that is read into memory 
and executed when a computer first starts. The boot sector normally contains the 
program code for loading the rest of a computer's operating system (hence the 
name, a reference to lifting oneself up by one's own bootstraps). Once loaded, a 
boot-sector virus can infect any diskette that is placed in the drive. It also infects 
the hard disk, so that the virus will be loaded into memory whenever the system is 
restarted. Boot viruses are highly effective: even though there are fewer strains, 
they were for a time much more prevalent than file infectors were.
The third category, macro viruses, are independent of operating systems and 
infect   files   that   are   usually   regarded   as   data   rather   than   as   programs.   Many 
spreadsheet,   database   and   word-processing   programs   can   execute   scripts--
prescribed sequences of actions--embedded in a document. Such scripts, or macros, 
are  used to  automate actions  ranging  from  typing  long  words to carrying  out 
complicated sequences of calculations. And virus writers have created scripts that 
insert copies of themselves in other documents. Macro virusescan spread much 
more rapidly than other kinds of viruses because many people share "data" files 
freely--consider   several   workers   swapping   drafts   of   a   jointly   written   report. 
"Concept," the first macro virus observed in the wild, infected its first Microsoft 
Word document late in 1995 and is now the most prevalent virus in the world. 
Today more than 1,000 macro viruses are known. As well as basic replication code, 
viruses can contain whatever other code the author chooses. Some virus payloads 
may simply print a message or display an image, but others will damage programs 
and data. Even those without malicious payloads can cause damage to systems 
whose configuration differs from what the virus designer expected. For instance, 
the "Form" virus, which usually produces only a slight clicking noise once a 
month, overwrites one disk directory sector in a way that is harmless to older PCs 
but lethal to newer ones that arrange disk information differently.
Antivirus Technology
Antivirus   software   has   existed   since   shortly   after   computer   viruses   first 
appeared. Generic virus-detection programs can monitor a computer system for 
viruslike behavior (such as modification of certain crucial files or parts of main 
memory), and they can periodically check programs for suspicious modifications. 
Such software can even detect hitherto unknown viruses, but it can also be prone to 
false alarms because some legitimate activities resemble viruses at work.
Scanning programs, in contrast, can search files, boot records and memory for 
specific patterns of bytes indicative of known viruses. To stay current, they must be 
updated when new viral strains arise, but they only rarely raise false alarms. The 
viral signatures these programs recognize are quite short: typically 16 to 30 bytes 
out of the several thousand that make up a complete virus. (Similarly, biological 
immune   receptors   bind   to   sequences   of   eight   to   15   amino   acids   out   of   the 
thousands in a viral protein.) It is more efficient to recognize a small fragment than 
to verify the presence of an entire virus, and a single signature may be common to 
many   different   viruses.   Most   computer-virus   scanners   use   pattern-matching 
algorithms that can scan for many different signatures at the same time: the best 
can check for 10,000 signatures in 10,000 programs in under 10 minutes.
Once a virus has been detected, it must be removed. One brutal but effective 
technique is simply to erase the infected program, much as certain types of immune 
cells   destroy   an   infected   cell.   Body   cells   are   generally   easy   to   replace,   but 
computer programs and documents are not so expendable. As a result, antivirus 
programs do their best to repair infected files rather than destroy them. (They are 
aided in this endeavor by the fact that computer viruses must preserve their host 
program essentially intact to remain undetected and multiply.)
If a virus-specific scanning program detects an infected file, it can usually 
follow a detailed prescription, supplied by its programmers, for deleting viral code 
and   reassembling   a   working   copy   of   the   original.   There   are   also   generic 
disinfection techniques that work equally well for known and unknown viruses. 
One method we developed gathers a mathematical fingerprint for each program on 
the   system.   If   a   program   subsequently   becomes   infected,   our   method   can 
reconstitute a copy of the original.
Virus-specific detection and removal techniques require detailed analysis of 
each new virus as it is discovered. Experts must identify unusual sequences of 
instructions that appear in the viral code but not in conventional programs -- a 
process that relies on carefully developed knowledge and intuition. They also must 
develop a prescription for verifying and removing the virus from any infected host. 
To  keep   up  with   the   influx   of   half   a   dozen   new   viruses   a   day,   antivirus 
technologists have developed automated tools and procedures to assist human virus 
experts or even replace them.
We have developed a brute-force statistical technique to extract high-quality 
signatures very quickly. We started by measuring the frequencies of short byte 
sequences in a large group of legitimate programs. When a new virus is sent to us, 
our software finds the sequence of viral bytes that is statistically least likely to 
appear in a legitimate program. This method is much faster than analysis by hand, 
and tests suggest that it produces signatures that are less prone to false alarms than 
those selected by expert humans. Our signature-extraction method is somewhat 
analogous to the outmoded "template" theory of the immune system, according to 
which antibodies mold themselves to a particular foreign invader -- our signatures 
are made specifically for each new virus we encounter.
Stephanie Forrest of the University of New Mexico and her collaborators at Los 
Alamos National Laboratory have developed an alternative that is more faithful to 
the currently accepted "clonal selection" theory of the immune system, in which 
the body generates an enormous range of immune cells and then mass-produces the 
ones that turn out to recognize a pathogen. Their scheme generates code signatures 
randomly, without reference to any particular virus. Each signature is checked 
against existing code on the system; if it does not match anything, it is retained in a 
huge database. Finding one of these signatures in a program is a sure sign that the 
program has been modified, although further analysis is required to determine 
whether a virus is at fault.
In  another  twist  on  the  biological   metaphor,   virus  hunters  have  learned  to 
exploit the fact that programmers often make new computer viruses from key parts 
of existing ones. These viral "genes" enable us to trace the evolutionary history of 
computer viruses, in the same way that biologists determine the family trees of 
related species. By processing large collections of viral code, we can automatically 
derive a set of family signatures that catches all the different members of a viral 
family, including previously unknown variants. This technique reduces signature 
storage requirements substantially: a single 20-byte family signature can recognize 
dozens of distinct viruses.
We have also developed a neural-network technique to recognize viruses by 
scanning for several, very short patterns, each only three to five bytes long. These 
tiny fragments represent computer instructions that carry out tasks specific to viral 
infection. Although conventional software might occasionally contain one of these 
fragments,  the presence of  many of  them  is an almost certain  viral hallmark. 
Antiviral software can check for such short sequences very quickly; even more 
important, because these patterns of data are directly linked to the virus's function, 
we can now recognize a wide variety of viruses without ever having seen them 
before.