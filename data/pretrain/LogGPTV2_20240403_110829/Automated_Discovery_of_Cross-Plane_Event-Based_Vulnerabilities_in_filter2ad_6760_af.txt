SECUREBINDER [26] reveal the lack of protection against link
fabrication attacks and host location hijacking. However, none
of the four systems analyze the extent to which the untrusted
data plane inputs propagate via events to other components in
the controller, and such analysis is necessary for cases where
apps’ competing behaviors create vulnerabilities.
CONGUARD [66] identiﬁes time-of-check-to-time-of-use
race conditions in SDN controllers and provides a generalized
model of control plane happens-before relations, but the gen-
eralized semantics do not account for more sophisticated app
semantics whose incomplete event handling can be exploited.
INDAGO [32] and SHIELD [33] use static analysis to
analyze SDN apps and summarize their API use. INDAGO
proposes machine learning techniques to determine whether
an app is malicious or benign based on its sources and
sinks from API call use. Given that benign apps can be co-
opted by other apps as confused deputies [59], we ﬁnd the
distinction of malicious and benign labeling to be irrelevant for
EVENTSCOPE. Instead, EVENTSCOPE approaches the problem
from a global event dependency view.
Event-driven architectures: We consider the SDN archi-
tecture vis-`a-vis Android and Web browser extensions. SDN
and Android differ based on the mechanisms by which data
are passed and on how apps coordinate with each other [59].
Event-driven SDN relies on a central event dispatching mech-
anism over a limited set of network events, which implies that
SDN apps must coordinate with each other to apply policies
to and to enforce security over the shared data plane resource.
Vulnerability tools and analyses for Android [2], [15], [35],
[38], [54], [73], [72], [69] and browser extensions [5], [6],
[12], [36] have focused primarily on preventing information
leakage among apps or extensions rather than speciﬁcally on
how unhandled events affect global control ﬂow.
Vulnerability discovery: Livshits and Lam [37] secure Java
programs from unchecked Web-based input vulnerabilities. We
study the analogous SDN problem of untrusted data plane
input and model our attacks using a two-stage model of initial
injection and subsequent manipulation. Yang et al. [68] note
the challenges for event-driven callbacks in Android, which
we consider in our SDN component model. Monperrus and
Mezini [41] study the use of missing method calls as indicators
of deviant code, using an approach similar to that used for
the unhandled event type problem. CHEX [38] identiﬁes entry
points in Android applications and uses “app splitting” to
identify all code that is reachable from a given entry point.
We adapted CHEX’s notion of app splitting for use in building
event ﬂow graphs. Code property graphs [67] combine abstract
syntax trees, control ﬂow graphs, and program dependence
graphs into a uniﬁed data structure for automated vulnerability
discovery, but have scalability concerns.
Network debugging: Cross-plane and cross-app attacks can
be tracked using causality tracking and data provenance ap-
proaches. PROVSDN [59] prevents cross-app poisoning attacks
in real time using a provenance graph structure to enforce
information ﬂow control, and FORENGUARD [62] records
previous causal relationships to identify root causes. Negative
provenance [65], differential provenance [13], and meta prove-
nance [64] have been proposed to explain why SDN routing
events did not occur and to propose bug ﬁxes, but such methods
require either a history of traces or reference examples of
“good” behavior; furthermore, analysis of SDN applications in
those systems must be written in or translated into the Datalog
language NDlog prior to analysis. The aforementioned systems
record code paths that were taken rather than all potential code
paths, which limits their effectiveness in identifying potential
vulnerabilities ahead of time.
DELTA [34], BEADS [25], and STS [55] use fuzzing to
generate data plane inputs, but the space of potential inputs
is complex for large and complex event-driven controllers.
NICE [11] models basic control plane semantics (e.g., ﬂow
rule installation ordering) and uses the generated state space
to perform concrete symbolic (i.e., concolic) execution to ﬁnd
bugs; however, even for simple single apps,
the approach
does not scale well. VeriFlow [29] uses network correctness
properties to prevent ﬂow rules from being installed. However,
such approaches require a formal statement about app behavior.
Given that the checks occur in the southbound API, such tools
do not identify the sources of vulnerabilities.
X. CONCLUSION
We have presented EVENTSCOPE, a vulnerability discov-
ery tool for SDN that enables practitioners and developers to
identify cross-plane event-based vulnerabilities by automati-
cally analyzing controller apps’ event use. EVENTSCOPE uses
similarities among apps to ﬁnd potential logic bugs where
types are not handled by apps. EVENTSCOPE uses
event
an event ﬂow graph, which abstracts relevant
information
about how events ﬂow within the control plane, captures
data-plane inputs as potential cross-plane attack vectors, and
captures data-plane outputs as targets. We used EVENTSCOPE
on ONOS to ﬁnd and validate 14 new vulnerabilities.
ACKNOWLEDGMENT
The authors thank our shepherd, Qi Li, and the anonymous
reviewers for their helpful comments, which improved this pa-
per; the PERFORM and STS research groups at the University
of Illinois for their advice and feedback; and Jenny Applequist
for her editorial assistance. This material is based upon work
supported by the National Science Foundation under Grant
Nos. CNS-1657534 and CNS-1750024.
REFERENCES
[1] C. J. Anderson, N. Foster, A. Guha, J.-B. Jeannin, D. Kozen,
C. Schlesinger, and D. Walker, “NetKAT: Semantic foundations for
networks,” in ACM SIGPLAN Notices, vol. 49, no. 1. ACM, 2014, pp.
113–126.
[2] S. Arzt, S. Rasthofer, C. Fritz, E. Bodden, A. Bartel, J. Klein,
Y. Le Traon, D. Octeau, and P. McDaniel, “FlowDroid: Precise context,
ﬂow, ﬁeld, object-sensitive and lifecycle-aware taint analysis for android
apps,” in Proceedings of ACM PLDI ’14, 2014.
[3] T. Avgerinos, S. K. Cha, B. L. T. Hao, and D. Brumley, “AEG:
Automatic exploit generation,” in Proceedings of NDSS ’11, Feb. 2011.
[4] A. Azzouni, O. Braham, T. M. T. Nguyen, G. Pujolle, and R. Boutaba,
“Fingerprinting OpenFlow controllers: The ﬁrst step to attack an SDN
control plane,” in 2016 IEEE Global Communications Conference
(GLOBECOM), Dec 2016, pp. 1–6.
14
[5] S. Bandhakavi, S. T. King, P. Madhusudan, and M. Winslett, “VEX:
Vetting browser extensions for security vulnerabilities,” in Proceedings
of USENIX Security ’10, 2010.
[6] A. Barth, A. P. Felt, P. Saxena, and A. Boodman, “Protecting browsers
from extension vulnerabilities,” in Proceedings of NDSS ’10, 2010.
[7] P. Berde, M. Gerola, J. Hart, Y. Higuchi, M. Kobayashi, T. Koide,
B. Lantz, B. O’Connor, P. Radoslavov, W. Snow, and G. Parulkar,
“ONOS: Towards an open, distributed SDN OS,” in Proceedings of
ACM HotSDN ’14, 2014.
[8] A. Bessey, K. Block, B. Chelf, A. Chou, B. Fulton, S. Hallem, C. Henri-
Gros, A. Kamsky, S. McPeak, and D. Engler, “A few billion lines of
code later: Using static analysis to ﬁnd bugs in the real world,” Commun.
ACM, vol. 53, no. 2, pp. 66–75, Feb. 2010.
[9] P. Biondi. (2019) Scapy: Packet crafting for python2 and python3.
[Online]. Available: https://scapy.net/
[10] E. Bodden, A. Sewe, J. Sinschek, H. Oueslati, and M. Mezini, “Taming
reﬂection: Aiding static analysis in the presence of reﬂection and custom
class loaders,” in Proceedings of ACM ICSE ’11, 2011.
[11] M. Canini, D. Venzano, P. Pereˇs´ıni, D. Kosti´c, and J. Rexford, “A NICE
way to test openﬂow applications,” in Proceedings of USENIX NSDI
’12, 2012.
[12] N. Carlini, A. P. Felt, and D. Wagner, “An evaluation of the Google
Chrome extension security architecture,” in Proceedings of USENIX
Security ’12, 2012.
[13] A. Chen, Y. Wu, A. Haeberlen, W. Zhou, and B. T. Loo, “The good,
the bad, and the differences: Better network diagnostics with differential
provenance,” in Proceedings of ACM SIGCOMM ’16, 2016.
[14] M. Dhawan, R. Poddar, K. Mahajan, and V. Mann, “Sphinx: Detecting
security attacks in software-deﬁned networks.” in Proceedings of NDSS
’15.
Internet Society, Feb. 2015.
[15] W. Enck, P. Gilbert, B.-G. Chun, L. P. Cox, J. Jung, P. McDaniel,
and A. N. Sheth, “TaintDroid: An information-ﬂow tracking system
for realtime privacy monitoring on smartphones,” in Proceedings of
USENIX OSDI ’10, 2010.
J. Ferrante, K. J. Ottenstein, and J. D. Warren, “The program depen-
dence graph and its use in optimization,” ACM Trans. Program. Lang.
Syst., vol. 9, no. 3, pp. 319–349, Jul. 1987.
[16]
[17] Floodlight, 2019. [Online]. Available: http://www.projectﬂoodlight.org/
[18] N. Foster, M. J. Freedman, R. Harrison, J. Rexford, M. L. Meola, and
D. Walker, “Frenetic: A high-level language for OpenFlow networks,”
in Proceedings of ACM PRESTO ’10, 2010.
[19] M. L. Fredman and R. E. Tarjan, “Fibonacci heaps and their uses in
improved network optimization algorithms,” J. ACM, vol. 34, no. 3, pp.
596–615, Jul. 1987.
[20] R. Hanmer, S. Liu, L. Jagadeesan, and M. R. Rahman, “Death by
babble: Security and fault tolerance of distributed consensus in high-
availability softwarized networks,” in Proceedings of IEEE NetSoft ’19,
June 2019, pp. 266–270.
[21] Hewlett
Packard
Avail-
able: https://techlibrary.hpe.com/si/en/networking/solutions/technology/
sdn/portfolio.aspx/
Enterprise,
[Online].
2019.
[22] S. Hong, L. Xu, H. Wang, and G. Gu, “Poisoning network visibility
in software-deﬁned networks: New attacks and countermeasures,” in
Proceedings of NDSS ’15, Feb. 2015.
[23] D. Hovemeyer and W. Pugh, “Finding more null pointer bugs, but not
too many,” in Proceedings of ACM PASTE ’07, 2007.
[24] G. Jeh and J. Widom, “SimRank: A measure of structural-context
similarity,” in Proceedings of ACM KDD ’02, 2002.
[25] S. Jero, X. Bu, C. Nita-Rotaru, H. Okhravi, R. Skowyra, and S. Fahmy,
“BEADS: automated attack discovery in OpenFlow-based SDN sys-
tems,” in Proceedings of RAID ’17, 2017.
[26] S. Jero, W. Koch, R. Skowyra, H. Okhravi, C. Nita-Rotaru, and
D. Bigelow, “Identiﬁer binding attacks and defenses in software-deﬁned
networks,” in Proceedings of USENIX Security ’17, 2017.
[27] B. Johnson, Y. Song, E. Murphy-Hill, and R. Bowdidge, “Why don’t
software developers use static analysis tools to ﬁnd bugs?” in Proceed-
ings of ICSE ’13, 2013.
[28] L. Kaufman and P. J. Rousseeuw, Finding groups in data: an introduc-
tion to cluster analysis.
John Wiley & Sons, 1990.
[29] A. Khurshid, W. Zhou, M. Caesar, and P. B. Godfrey, “VeriFlow:
time,” ACM SIGCOMM
Verifying network-wide invariants in real
Computer Communication Review, vol. 42, no. 4, pp. 467–472, 2012.
[30] D. Kreutz, F. M. V. Ramos, P. E. Ver´ıssimo, C. E. Rothenberg,
S. Azodolmolky, and S. Uhlig, “Software-deﬁned networking: A com-
prehensive survey,” Proceedings of the IEEE, vol. 103, no. 1, pp. 14–76,
2015.
[31] B. Lantz, B. Heller, and N. McKeown, “A network in a laptop: rapid
prototyping for software-deﬁned networks,” in Proceedings of ACM
HotNets ’10, 2010.
[32] C. Lee, C. Yoon, S. Shin, and S. K. Cha, “INDAGO: A new framework
for detecting malicious SDN applications,” in Proceedings of IEEE
ICNP ’18, Sep. 2018.
[33] C. Lee and S. Shin, “SHIELD: An automated framework for static
analysis of SDN applications,” in Proceedings of ACM SDN-NFV
Security ’16, 2016.
[34] S. Lee, C. Yoon, C. Lee, S. Shin, V. Yegneswaran, and P. Porras,
“DELTA: A security assessment framework for software-deﬁned net-
works,” in Proceedings of NDSS ’17, Feb. 2017.
[35] L. Li, A. Bartel, T. F. Bissyand´e, J. Klein, Y. Le Traon, S. Arzt,
S. Rasthofer, E. Bodden, D. Octeau, and P. McDaniel, “IccTA: Detecting
inter-component privacy leaks in Android apps,” in Proceedings of ICSE
’15, 2015.
[36] L. Liu, X. Zhang, G. Yan, and S. Chen, “Chrome extensions: Threat
analysis and countermeasures,” in Proceedings of NDSS ’12, 2012.
[37] V. B. Livshits and M. S. Lam, “Finding security vulnerabilities in Java
applications with static analysis,” in Proceedings of USENIX Security
’05, 2005.
[38] L. Lu, Z. Li, Z. Wu, W. Lee, and G. Jiang, “CHEX: Statically vetting
Android apps for component hijacking vulnerabilities,” in Proceedings
of ACM CCS ’12, 2012.
[39] N. McKeown, T. Anderson, H. Balakrishnan, G. Parulkar, L. Peterson,
J. Rexford, S. Shenker, and J. Turner, “OpenFlow: Enabling innovation
in campus networks,” SIGCOMM Comput. Commun. Rev., vol. 38,
no. 2, pp. 69–74, Mar. 2008.
[40] C. Min, S. Kashyap, B. Lee, C. Song, and T. Kim, “Cross-checking
semantic correctness: The case of ﬁnding ﬁle system bugs,” in Pro-
ceedings of ACM SOSP ’15, 2015.
[41] M. Monperrus and M. Mezini, “Detecting missing method calls as
violations of the majority rule,” ACM Trans. Softw. Eng. Methodol.,
vol. 22, no. 1, pp. 7:1–7:25, Mar. 2013.
[42] C. Monsanto, N. Foster, R. Harrison, and D. Walker, “A compiler
and run-time system for network programming languages,” in ACM
SIGPLAN Notices, vol. 47, no. 1. ACM, 2012, pp. 217–230.
[43] C. Monsanto, J. Reich, N. Foster, J. Rexford, D. Walker et al.,
“Composing software deﬁned networks,” in Proceedings of NSDI ’13,
2013.
[44] B. Naveh. (2019) Jgrapht. [Online]. Available: https://jgrapht.org/
[45] Open Networking Foundation, “In action - ONOS.” [Online]. Available:
https://www.onosproject.org/in-action/
[46] ——. (2019) Github – opennetworkinglab/onos at 1.14.0. [Online].
Available: https://github.com/opennetworkinglab/onos/tree/onos-1.14
[47] ——.
[48] ——.
(2019) Overlay VPNs
[Online]. Available:
https://wiki.onosproject.org/display/ONOS/Overlay+VPNs+and+Gluon
[Online]. Available:
(2019) System components – ONOS.
and Gluon.
https://wiki.onosproject.org/display/ONOS/System+Components
[49] ——. (2019) Virtual BNG. [Online]. Available: https://wiki.onosproject.
org/display/ONOS/Virtual+BNG
[50] ——.
(2019)
[Online].
Available: https://wiki.onosproject.org/download/attachments/6357849/
VirtualNetworkSubsystem.pdf
subsystem.
network
Virtual
[51] OpenDaylight.
(2019) Home - opendaylight.
https://www.opendaylight.org/
[Online]. Available:
[52] F. Pedregosa, G. Varoquaux, A. Gramfort, V. Michel, B. Thirion,
O. Grisel, M. Blondel, P. Prettenhofer, R. Weiss, V. Dubourg, J. Vander-
plas, A. Passos, D. Cournapeau, M. Brucher, M. Perrot, and E. Duches-
nay, “Scikit-learn: Machine learning in python,” J. Mach. Learn. Res.,
vol. 12, pp. 2825–2830, Nov. 2011.
15
[53] PMD. (2019) PMD: An extensible cross-language static code analyzer.
[Online]. Available: https://pmd.github.io/
[54] C. Qian, X. Luo, Y. Le, and G. Gu, “VulHunter: Toward discovering
vulnerabilities in Android applications,” IEEE Micro, vol. 35, no. 1, pp.
44–53, Jan 2015.
[55] C. Scott, A. Wundsam, B. Raghavan, A. Panda, A. Or, J. Lai, E. Huang,
Z. Liu, A. El-Hassany, S. Whitlock, H. Acharya, K. Zariﬁs, and
S. Shenker, “Troubleshooting blackbox SDN control software with
minimal causal sequences,” in Proceedings of ACM SIGCOMM ’14,
2014.
[56] Y. Shoshitaishvili, R. Wang, C. Salls, N. Stephens, M. Polino,
A. Dutcher, J. Grosen, S. Feng, C. Hauser, C. Kruegel, and G. Vigna,
“SoK: (state of) the art of war: Offensive techniques in binary analysis,”
in Proceedings of IEEE S&P ’16, May 2016, pp. 138–157.
[57] R. Skowyra, L. Xu, G. Gu, V. Dedhia, T. Hobson, H. Okhravi,
and J. Landry, “Effective topology tampering attacks and defenses in
software-deﬁned networks,” in Proceedings of IEEE/IFIP DSN ’18,
June 2018, pp. 374–385.
J. Toman and D. Grossman, “Taming the static analysis beast,” in
Proceedings of SNAPL ’17, ser. LIPIcs, B. S. Lerner, R. Bod´ık, and
S. Krishnamurthi, Eds., vol. 71. Schloss Dagstuhl - Leibniz-Zentrum
fuer Informatik, 2017, pp. 18:1–18:14.
[58]
[59] B. E. Ujcich, S. Jero, A. Edmundson, Q. Wang, R. Skowyra, J. Landry,
A. Bates, W. H. Sanders, C. Nita-Rotaru, and H. Okhravi, “Cross-app
poisoning in software-deﬁned networking,” in Proceedings of ACM CCS
’18, 2018.
[60] R. Vall´ee-Rai, P. Co, E. Gagnon, L. Hendren, P. Lam, and V. Sundare-