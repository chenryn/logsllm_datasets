### 12.2.6.2. Node Structure

In an HFS+ B-Tree, nodes may or may not be physically contiguous on the disk. Figure 122 illustrates the structure of an HFS+ B-Tree node.

**Figure 122: The structure of an HFS+ B-Tree node**
[View full size image]

The node structure is shared by all node types. Each node begins with a node descriptor (struct `BTNodeDescriptor` in `bsd/hfs/hfs_format.h`). The `bLink` and `fLink` fields of this descriptor chain together nodes of a specific type (indicated by the `kind` field) within the tree. Following the node descriptor is the records segment, which contains the node's records. Since node records can vary in length, the latter part of the node includes a list of 16-bit offsets, each representing the offset of a record from the beginning of the node. The last entry in the offset list indicates the offset to the unused space in the node, which is the space immediately following the records segment and before the offset list. If there is no free space left, the free space offset still points to its own offset.

### 12.2.6.3. Header Node Structure

Figure 123 shows the structure of an HFS+ B-Tree header node. The header node contains exactly three records:

1. **Header Record**: This record contains general information about the B-Tree, such as the node size, tree depth, root node number (if any), number of leaf records, and total number of nodes.
2. **User Data Record**: This provides 128 bytes of space for storing arbitrary information associated with the tree. Only the Hot File Clustering B-Tree uses this area.
3. **Map Record**: This record contains a bitmap, where each bit indicates whether a node in the tree is in use or not.

**Figure 123: The structure of an HFS+ B-Tree header node**
[View full size image]

If the tree has more nodes than can be represented by the header node's map record, additional map nodes are used to extend the bitmap. The `fLink` field of the header node will contain the number of the next map node. The first map node's `fLink` field will point to the next map node, and so on, with the last map node's `fLink` field set to zero. The `bLink` fields of all map nodes, including the header node, are always set to zero.

### 12.2.6.4. Records

While the header and map nodes contain administrative information, index and leaf nodes store file system information. The records in these nodes have a common structure, as shown in Figure 124.

**Figure 124: The structure of an HFS+ B-Tree record**

At the beginning of each record is a key length (`keyLength`), stored using either one or two bytes, depending on the `kBTBigKeysMask` bit in the B-Tree's header node attributes. The actual key follows the key length. The key length may or may not represent the actual key length, determined as follows:
- In a leaf node, `keyLength` represents the actual key length.
- In an index node, if the `kBTVariableIndexKeysMask` bit is set, `keyLength` represents the actual key length. Otherwise, the actual key length is the constant value in the header node's `maxKeyLength` field.

As shown in Figure 124, a record's data may be preceded and succeeded by single pad bytes to ensure alignment on a two-byte boundary and an even number of bytes. If the combined size of the key length and the actual key would start on an odd-numbered byte, a pad byte is inserted before the data. Similarly, if the data's size is an odd number of bytes, a pad byte is inserted after the data.

Index and leaf nodes contain only index and leaf records, respectively. Index records' data is a node number, pointing to another index node or a leaf node. Leaf nodes store the actual data.

### 12.2.6.5. Searching

A fundamental operation in B-Tree access and manipulation is key comparison. All records within a node are stored in increasing order of their keys. For simple keys like integers, comparison is straightforward. Complex keys, such as those in HFS+ B-Trees, have multiple components and require more complicated comparison operations. Typically, the components are assigned precedence values, and comparisons proceed in decreasing order of precedence until an inequality is found or all components are exhausted, in which case the keys are deemed equal.

**Figure 125: The contents of a hypothetical HFS+ B-Tree**
[View full size image]

In an empty tree, there is no root node. A root node does not have to be an index node; if all records are in a single node, that node is both the root and the solitary leaf node.

Notable observations about the tree in Figure 125 include:
- Nodes at a given height are chained together in a noncircular, doubly linked list through the `fLink` and `bLink` fields.
- The header record in the header node contains the node numbers of the root node, the first leaf node, and the last leaf node.
- Within a node, records are stored in increasing order of their keys.
- At any given height, all keys in a node are less than all keys in the next node in the same-level chain.

To search for a given key (the search key), the search begins at the root node, found by examining the header record. The search proceeds downward, ending at a leaf node that contains the search key, unless the key does not exist in the tree. The HFS+ search algorithm does not backtrack and accesses a node at most once during a given search operation.

### 12.3. The Structure of an HFS+ Volume

Figure 126 shows the structure of a representative HFS+ volume. Besides regular files and directories, an HFS+ volume contains (or may contain, as some are optional) the following entities:

- **Reserved Areas**: These appear at the beginning and end of the volume.
- **Volume Header**: Contains various information about the volume, including the locations of other key data structures.
- **Alternate Volume Header**: A copy of the volume header, located near the end of the volume.
- **Catalog B-Tree**: Stores basic metadata for files and directories, including the first extent record for each file.
- **Extents Overflow B-Tree**: Stores overflow extent records for files with more than eight extents.
- **Attributes B-Tree**: Stores extended attributes for files and directories.
- **Allocation File**: A bitmap indicating the usage status of each allocation block.
- **Private Metadata Folder**: Used for implementing hard links and storing files deleted while open.
- **Hot Files B-Tree**: Used by the Hot File Clustering mechanism for frequently accessed files.
- **Startup File**: Contains arbitrary information for booting from an HFS+ volume.
- **Journal Files**: Hold information about the file system journal.
- **Quota Files**: Store information about user and group quotas.

**Figure 126: The structure of an HFS+ volume**
[View full size image]

### 12.4. Reserved Areas

The first two logical sectors (1024 bytes) and the last logical sector (512 bytes) of a volume are reserved. Mac OS X does not use these areas, but earlier versions did. The 1024-byte reserved area at the beginning of a volume was used as boot blocks, containing information necessary to boot the system. The 512-byte reserved area at the end of a volume was used by Apple during system manufacturing.

### 12.5. The Volume Header

The 512-byte volume header, stored at a 1024-byte offset from the start of the volume, contains critical information about the volume, including the locations of other important data structures. A copy of the volume header, the alternate volume header, is stored at a 1024-byte offset from the end of the volume. Disk and file system repair utilities often use this copy.

**Figure 127: The contents of an HFS+ volume header**

The volume header's signature field contains "H+" for case-insensitive volumes and "HX" for case-sensitive volumes. The `lastMountedVersion` field identifies the last mounting implementation, useful for detecting potential issues, such as a journaled volume being mounted without journaling.

### 12.5.1. Viewing the Volume Header

To display the volume header of an HFS+ volume, you can use `hfsdebug`. First, create a disk image using `hdiutil` and then mount it:

```sh
$ hdiutil create -size 32m -fs HFSJ -volname HFSJ /tmp/hfsj.dmg
...
created: /tmp/hfsj.dmg
$ hdiutil mount /tmp/hfsj.dmg
/dev/disk10 Apple_partition_scheme
/dev/disk10s1 Apple_partition_map
/dev/disk10s2 Apple_HFS /Volumes/HFSJ
```

Use `hfsdebug` to view the volume header:

```sh
$ hfsdebug -d /dev/rdisk10s2 -v
# HFS Plus Volume
Volume size = 32728 KB/31.96 MB/0.03 GB
# HFS Plus Volume Header
signature = 0x482b (H+)
version = 0x4
lastMountedVersion = 0x4846534a (HFSJ)
attributes = 00000000000000000010000000000000
. kHFSVolumeJournaled (volume has a journal)
journalInfoBlock = 0x2
createDate = Sun Oct 9 19:24:50 2005
modifyDate = Sun Oct 9 19:28:36 2005
backupDate = Fri Jan 1 00:00:00 1904
checkedDate = Sun Oct 9 19:24:50 2005
fileCount = 3
folderCount = 3 /* not including the root folder */
blockSize = 4096
totalBlocks = 8182
freeBlocks = 6002
nextAllocation = 2807
rsrcClumpSize = 65536
dataClumpSize = 65536
nextCatalogID = 22
writeCount = 3
encodingsBitmap = 00000000000000000000000000000000
00000000000000000000000000000001
. MacRoman
# Finder Info
...
# Allocation Bitmap File
...
# Extents Overflow File
logicalSize = 258048 bytes
totalBlocks = 63
clumpSize = 258048 bytes
extents = startBlock blockCount % of file
0x803 0x3f 100.00 %
63 allocation blocks in 1 extents total.
63.00 allocation blocks per extent on an average.
# Catalog File
...
# Attributes File
logicalSize = 0 bytes
# Startup File
logicalSize = 0 bytes
```

Note that the volume header's `signature` field contains "H+" for case-insensitive volumes and "HX" for case-sensitive volumes. The `lastMountedVersion` field helps detect potential issues, such as a journaled volume being mounted without journaling.