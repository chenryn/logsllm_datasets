root@6dc20d508db0:/# 
```
 `**窗口示例:**
这个例子引用了一个名为“pensive _ hamilton”的容器。您的容器的名称会有所不同，所以请记住用您的 Docker 主机上运行的容器的名称或 ID 替换“pensive_hamilton”。
```
> docker container exec -it pensive_hamilton pwsh.exe
PowerShell 7.0.0
Copyright (C) Microsoft Corporation. All rights reserved.
PS C:\> 
```
 `请注意，您的 shell 提示符已再次更改。您再次登录到容器。
`docker container exec`命令的格式为:`docker container exec   `。在我们的例子中，我们使用`-it`选项将我们的外壳连接到容器的外壳上。我们通过名称引用了容器，并告诉它运行 bash shell(Windows 示例中的 PowerShell)。我们很容易通过容器的十六进制标识来引用它。
按下`Ctrl-PQ`再次退出容器。
您的 shell 提示符应该返回到 Docker 主机。
再次运行`docker container ls`命令，验证您的容器是否仍在运行。
```
$ docker container ls
CONTAINER ID   IMAGE          COMMAND       CREATED  STATUS    NAMES
6dc20d508db0   ubuntu:latest  "/bin/bash"   9 mins   Up 9 min  vigilant_borg 
```
 `停止容器并使用`docker container stop`和`docker container rm`命令将其杀死。请记住替换您自己的容器的名称/标识。
```
$ docker container stop vigilant_borg
vigilant_borg
$ docker container rm vigilant_borg
vigilant_borg 
```
 `通过运行带有`-a`标志的`docker container ls`命令，验证容器是否被成功删除。添加`-a`告诉 Docker 列出所有容器，甚至是那些处于停止状态的容器。
```
$ docker container ls -a
CONTAINER ID    IMAGE    COMMAND    CREATED    STATUS    PORTS    NAMES 
```
 `您刚刚提取了一个 Docker 映像，从中启动了一个容器，附加到它上面，在其中执行了一个命令，停止了它，并删除了它。
### 发展视角
容器就是应用。
在本节中，我们将从 Git repo 中克隆一个应用，检查它的 Dockerfile，将其容器化，并将其作为容器运行。
Linux 应用可以从 https://github.com/nigelpoulton/psweb.git 克隆而来
视窗应用可以从 https://github.com/nigelpoulton/win-web.git 克隆而来
本节的其余部分将集中在 Linux NGINX 示例上。然而，这两个例子都是简单网络应用的容器化，所以过程是一样的。在 Windows 示例中有差异的地方，我们将突出显示它们，以帮助您理解。
从 Docker 主机上的终端运行以下所有命令。
在本地克隆回购。这将把应用代码拉到您的本地 Docker 主机上，以便您将其容器化。
如果您要跟随 Windows 示例，请确保用 Windows repo 替换以下 repo。
```
$ git clone https://github.com/nigelpoulton/psweb.git
Cloning into 'psweb'...
remote: Counting objects: 15, done.
remote: Compressing objects: 100% (11/11), done.
remote: Total 15 (delta 2), reused 15 (delta 2), pack-reused 0
Unpacking objects: 100% (15/15), done.
Checking connectivity... done. 
```
 `将目录更改为克隆的 repo 的目录，并列出其内容。
```
$ cd psweb
$ ls -l
total 40
-rw-r--r--@ 1 ubuntu ubuntu  338 24 Apr 19:29 Dockerfile
-rw-r--r--@ 1 ubuntu ubuntu  396 24 Apr 19:32 README.md
-rw-r--r--@ 1 ubuntu ubuntu  341 24 Apr 19:29 app.js
-rw-r--r--  1 ubuntu ubuntu  216 24 Apr 19:29 circle.yml
-rw-r--r--@ 1 ubuntu ubuntu  377 24 Apr 19:36 package.json
drwxr-xr-x  4 ubuntu ubuntu  128 24 Apr 19:29 test
drwxr-xr-x  3 ubuntu ubuntu   96 24 Apr 19:29 views 
```
 `Linux 的例子是一个简单的 nodejs web 应用。Windows 示例是一个运行一些静态 HTML 的 IIS 服务器。
两个 Git 转帖都包含一个名为`Dockerfile`的文件。这是一个纯文本文档，告诉 Docker 如何将应用和依赖关系构建到 Docker 映像中。
列出 Dockerfile 的内容。
```
$ cat Dockerfile
FROM alpine
LABEL maintainer="PI:EMAIL"
RUN apk add --update nodejs nodejs-npm
COPY . /src
WORKDIR /src
RUN  npm install
EXPOSE 8080
ENTRYPOINT ["node", "./app.js"] 
```
 `窗口示例中 Dockerfile 的内容是不同的。然而，这在现阶段并不重要。现在，理解每行代表 Docker 用来构建映像的指令就足够了。
此时，我们已经从远程 Git repo 中提取了一些应用代码。我们还有一个 Docker 文件，包含如何将应用构建成 Docker 映像的说明。
使用`docker image build`命令，使用 Dockerfile 中的指令创建新映像。本示例创建一个名为`test:latest`的新 Docker 映像。
对于 Linux 和 Windows 示例，该命令是相同的，请确保从包含应用代码和 Dockerfile 的目录中运行该命令。
```
$ docker image build -t test:latest .
Sending build context to Docker daemon  74.75kB
Step 1/8 : FROM alpine
latest: Pulling from library/alpine
88286f41530e: Pull complete
Digest: sha256:f006ecbb824...0c103f4820a417d
Status: Downloaded newer image for alpine:latest
 ---> 76da55c8019d
Successfully built f154cb3ddbd4
Successfully tagged test:latest 
```
 `> **注意:**在 Windows 示例中，构建完成可能需要很长时间。这是因为所提取的映像大小为几千兆字节。
构建完成后，检查以确保新的`test:latest`映像存在于您的主机上。
```
$ docker image ls
REPO     TAG      IMAGE ID        CREATED         SIZE
test     latest   f154cb3ddbd4    1 minute ago    81.5MB
... 
```
 `您有一个新构建的 Docker 映像，其中包含应用和依赖项。
从映像中运行一个容器并测试应用。
**Linux 示例:**
```
$ docker container run -d \
  --name web1 \
  --publish 8080:8080 \
  test:latest 
```
 `打开网络浏览器，导航到运行容器的 Docker 主机的域名或 IP 地址，并将其指向端口 8080。您将看到以下网页。
如果您正在使用 Windows Docker 或 Mac Docker，您将能够使用`localhost:8080`或`127.0.0.1:8080`。如果你正在关注《与 Docker 一起玩》，你可以点击终端屏幕上方的`8080`超链接。
![Figure 4.1](img/figure4-1.png)
Figure 4.1
**窗口示例:**
```
> docker container run -d \
  --name web1 \
  --publish 8080:80 \
  test:latest 
```
 `打开网络浏览器，导航到运行容器的 Docker 主机的域名或 IP 地址，并将其指向端口 8080。您将看到以下网页。
同样的规则也适用于你跟随 Docker 桌面或与 Docker 一起玩的情况。
![Figure 4.2](img/figure4-2.png)
Figure 4.2
干得好。您已经从远程 Git repo 获取了一些应用代码，并将其构建到 Docker 映像中。然后你用它运行一个容器。我们称之为“应用容器化”。
### 章节总结
在本章的操作部分，您下载了一个 Docker 映像，从其中启动了一个容器，登录到该容器，在其中执行了一个命令，然后停止并删除了该容器。
在开发部分，您通过从 GitHub 中提取一些源代码，并使用 Dockerfile 中的指令将其构建成一个映像，从而将一个简单的应用容器化。然后你运行了容器化的应用。
这个*大图*视图应该可以帮助你理解接下来的章节，我们将深入挖掘映像和容器。`````````````````````