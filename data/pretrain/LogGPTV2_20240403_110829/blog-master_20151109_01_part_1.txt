## PostgreSQL snapshot too old补丁, 防止数据库膨胀  
### 作者                                                   
digoal                                                    
### 日期                                                  
2015-11-09                       
### 标签                                                  
PostgreSQL , 垃圾回收 , snapshot too old                                                                    
----                                                  
## 背景                          
PostgreSQL 9.6已支持snapshot too old  ， 目前仅仅针对未申请事务号的事务（pg_stat_activity.backend_xid为空的事务）,这种事务会被CANCEL，而申请了事务号的事务（例如写事务）则不会触发snapshot too old。  
所以即使你使用9.6，对于写事务，也不要为所欲为，因为依旧会影响垃圾回收。  
PostgreSQL 9.6新增的一个patch，暂时还没有提交，这个patch主要是防止数据库中的某些long sql导致LONG snapshot导致数据库膨胀。  
原理参考：  
http://blog.163.com/digoal@126/blog/static/1638770402015329115636287/  
下载补丁和数据库源码（使用2015-10-13号master分支源码）  
http://www.postgresql.org/message-id/flat/PI:EMAIL#PI:EMAIL  
打补丁  
```  
[root@digoal soft_bak]# tar -zxvf postgresql-aa7f949.tar.gz  
[root@digoal soft_bak]# cd postgresql-aa7f949  
[root@digoal postgresql-aa7f949]# patch -p1  "  
export PGPORT=1931  
export PGDATA=/data01/pg_root_1931  
export LANG=en_US.utf8  
export PGHOME=/opt/pgsql9.5devel  
export LD_LIBRARY_PATH=$PGHOME/lib:/lib64:/usr/lib64:/usr/local/lib64:/lib:/usr/lib:/usr/local/lib:$LD_LIBRARY_PATH  
export DATE=`date +"%Y%m%d%H%M"`  
export PATH=$PGHOME/bin:$PATH:.  
export MANPATH=$PGHOME/share/man:$MANPATH  
export PGHOST=$PGDATA  
export PGDATABASE=postgres  
export PGUSER=postgres  
alias rm='rm -i'  
alias ll='ls -lh'  
unalias vi  
. ~/.bash_profile  
pg95@digoal-> initdb -D $PGDATA -U postgres -W -E UTF8 --locale=C  
```  
为了快速测试效果，设置1分钟的snapshot，实际应用中用户可以根据实际的需要设置。  
```  
vi $PGDATA/postgresql.conf  
old_snapshot_threshold = 1min  
```  
启动数据库  
```  
pg_ctl start  
```  
测试：  
会话1  
```  
postgres=# create table test(id int, crt_time timestamp);  
CREATE TABLE  
postgres=# insert into test values (1,now()) returning *;  
 id |          crt_time            
----+----------------------------  
  1 | 2015-11-09 14:24:26.161537  
(1 row)  
INSERT 0 1  
```  
会话2，开启一个RC隔离级别的事务  
```  
postgres=# begin transaction isolation level repeatable read;  
BEGIN  
postgres=# select *,now(),clock_timestamp() from test;  
 id |          crt_time          |              now              |       clock_timestamp          
----+----------------------------+-------------------------------+------------------------------  
  1 | 2015-11-09 14:24:26.161537 | 2015-11-09 14:24:37.289911+08 | 2015-11-09 14:24:47.88468+08  
(1 row)  
```  
会话1  
```  
postgres=# update test set crt_time=now() where id=1 returning *;  
 id |          crt_time            
----+----------------------------  
  1 | 2015-11-09 14:25:04.101895  
(1 row)  
UPDATE 1  
```  
会话2  
```  
postgres=# select *,now(),clock_timestamp() from test;  
 id |          crt_time          |              now              |        clock_timestamp          
----+----------------------------+-------------------------------+-------------------------------  
  1 | 2015-11-09 14:24:26.161537 | 2015-11-09 14:24:37.289911+08 | 2015-11-09 14:25:12.821213+08  
(1 row)  
......  
```  
在发生snapshot old错误前，我们看到这个事务占领了一个snapshot id backend_xmin  ， 数据库无法回收这之后产生的垃圾。  
```  
-[ RECORD 2 ]----+-------------------------------------------------------  
datid            | 13241  
datname          | postgres  
pid              | 16575  
usesysid         | 10  
usename          | postgres  
application_name | psql  
client_addr      |   
client_hostname  |   
client_port      | -1  
backend_start    | 2015-11-09 14:19:59.45462+08  
xact_start       | 2015-11-09 14:24:37.289911+08  
query_start      | 2015-11-09 14:25:12.820912+08  
state_change     | 2015-11-09 14:25:12.821263+08  
waiting          | f  
state            | idle in transaction  
backend_xid      |   
backend_xmin     | 1769  
query            | select *,now(),clock_timestamp() from test;  
postgres=# vacuum verbose test;  
INFO:  vacuuming "public.test"  
INFO:  "test": found 0 removable, 2 nonremovable row versions in 1 out of 1 pages  
DETAIL:  1 dead row versions cannot be removed yet.  
There were 0 unused item pointers.  
Skipped 0 pages due to buffer pins.  
0 pages are entirely empty.  
CPU 0.00s/0.00u sec elapsed 0.00 sec.  
VACUUM  
```  
当这个会话去访问1分钟前的快照时，报错。  
```  
postgres=# select *,now(),clock_timestamp() from test;  
ERROR:  snapshot too old  
```  
这个时候，可以回收之前的垃圾了，  
```  
postgres=# vacuum verbose test;  
INFO:  vacuuming "public.test"  
INFO:  "test": found 1 removable, 1 nonremovable row versions in 1 out of 1 pages  
DETAIL:  0 dead row versions cannot be removed yet.  
There were 0 unused item pointers.  
Skipped 0 pages due to buffer pins.  
0 pages are entirely empty.  
CPU 0.00s/0.00u sec elapsed 0.00 sec.  
VACUUM  
```  
因为这个事务已经释放了backend_xmin     。  
```  
-[ RECORD 2 ]----+--------------------------------------------  
datid            | 13241  
datname          | postgres  
pid              | 16575  
usesysid         | 10  
usename          | postgres  
application_name | psql  
client_addr      |   
client_hostname  |   
client_port      | -1  
backend_start    | 2015-11-09 14:19:59.45462+08  
xact_start       |   
query_start      | 2015-11-09 14:26:00.545314+08  
state_change     | 2015-11-09 14:26:00.545849+08  
waiting          | f  
state            | idle in transaction (aborted)  
backend_xid      |   
backend_xmin     |   
query            | select *,now(),clock_timestamp() from test;  
```  
再次发起请求直接报要求用户回滚事务。  
```  
postgres=# select *,now(),clock_timestamp() from test;  
ERROR:  current transaction is aborted, commands ignored until end of transaction block  
```  
年龄也可以正常的降低：  
```  
postgres=# vacuum freeze test;  
VACUUM  
postgres=# select age(relfrozenxid) from pg_class where relname='test';  
 age   
-----  
   0  
(1 row)  
```  
测试游标（貌似snapshot too old对游标不起作用）：  
会话1  
```  
postgres=# insert into test select generate_series(1,100),clock_timestamp();  
INSERT 0 100  
```  
会话2  