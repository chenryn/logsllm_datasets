指定键序列时可以使用下列emacs风格的转义序列：
国
控制键前级。
M-
Meta 前缀。
国
一个转义字符，
国
反斜杠。
国
双引号。
国
单引号或省字符。
除了emacs风格的转义序列，还可以用另外一套转义序列：
p7r
目录
BASH 中文文
---
## Page 89
第八章编辑命令行
§8.3READLINE的启动脚本
+ + + e + +e e e e ee e e e ee e e e ee e e e +e + e + + e + e e e e e
警告（响铃）
1b
退格删除
删除
走纸换页
n
新行
换行
（水平）制表符
垂直制表符
an
由八进制数nnn（一个到三个数字）代表的一个八位字符
xHH
由十六进制数HH（一个或两个十六进制数字）代表的一个八位字符。
在宏中写入文本时必须中单引号或双引号表示宏定义。没有引用的文本会被当成命令名称。在宏里面，
上面列出的转义字符会被扩展。反斜杠可以转义后面的任意字符，包括和”。例如，下面的绑定
会使用能够在行中输入"”：
"]C=x}="1"
S8.3.2Readline启动脚本的条件结构
Readline实现了与C语言预编译器中的条件编译很神似的功能，它使得键绑定和变量赋值根据测试结
果进行。它使用了四种方法指示解释器。
$if
这种结构根据编辑模式，所有终端或使用readlline的程序进行绑定。测试所用的文本一直延伸到行
的结尾，不需要字符去隔离它，
mode
mode=形式的$if指令用来测试readline 使用的模式是emacs 还是vi.例如，它可以和“set
键映射“命令一起使用，使readline只有在emacs 模式中才绑定emacs=standard和emacs=ctlx
的键。
cern
tern-的形式可以用来绑定与终端相关联的键，例如绑定终端功能键的输出。“"右边的单
词用来和终端的完整名称以及名称中第一个""前面的部分进行匹配。例如，gun会与Bun和
sun=cmd 匹配.
application
这种结构用来包含与应用程序相关联的设置。每个使用readline库的程序都会设置
程序名称，这个名称可以用于测试，并用来绑定只针对特定程序的键序列。例如，下面的命令在
Bash中加入了一个键绑定用来给当前和前一个单词加引号：
Sif Bash
# Quote the current or previous word
"\C=xq:
"\eb\′\ef\""
Sendif
$endif
如上例中看到的那样，这个命令用来结束$if命令。
$else
这个命令Sif结构的分支，当Sif测试失败时执行。
$include
这个结构带一个文件名参数并从文件中读取和执行命令。例如，下面的命令读取"/etc/inputre”：
$include /etc/inputrc
BASH 中文文档
目录
p78
---
## Page 90
8.3 READLINE 的启动脚本
第八章编辑命令行
8.3.3
Readline启动脚本的例子
下面是inputrc文件的一个实例。它示范了键绑定，变量赋值和条件语法。
豪代码清单6：Readlne启动脚本的例子
1 # vim:filetype=readline
3#本文件控制所有使用readline库的程序的行输入行为。
2#
4#这些程序包括FTP，Bash和GDB。
6#可以用C-xC-r命令重新加载该文件。
#
#以‘#开头的行是注释。
#首先，包含/etc/Inputrc中的任何系统绑定和变量。
8#
10 $include /etc/Inputrc
12#设置emacs风格的绑定。
11#
13 set editing-mode enacs
15 $if mode=enacs
16 Meta-Control-h:
backward-kill-vord命令后面的文本会被忽略掉
17 #
18#小键盘上的方向键
19 #
2#\H-OD:
backuard-char
21 #\M=OC:
foruard-char
22 ##\M=OA#:
previous-history
80N#
next-history
24 
25#ANSI模式的方向键
26 #
G]
backuard-char
28"H-[C:
forvard-char
29 "\M=[A:
previous-history
8] H oE
next-history
31 #
32#八位小键盘上的方向键
33 #
35 #\M-\C=DC":
backvard-char
forvard=char
36 #"\M\CDA":
37 #"\M-\CDB":
next-history
39#八位ANSI模式的方向键
36#
40#
41 #"\N-\C-[D":
42 #"\M-\C-[C":
backvard-char
43 #"\M-\C=[A":
forvard-char
44 #"\N-\C-[B":
next-history
45 C-q:quoted-insert
46 $endif
目录
BASH 中文文
---
## Page 91
第八章编辑命令行
58.4可以绑定的READLINE命令
48#旧式的绑定。这恰好也是默认的。
49 TAB: complete
50#便于ahel1交互的宏。
52 $if Bash
51
53编辑PATH路径
54"\C=xp":
"PATH=S{PATH}\e\C=e′\Ca\ef\Cf"
55#准备输入引用的单词：插入引号的开始和结束，然后移到开始引号的后面。
56 "\C=x\""
q=\\
#插入反斜杠（测试反斜杠转文序列和宏）。
S8"}C-x\"：
""
59#用引号引用当前或前一个单词。
60 "\C=xq="\eb\"}ef\**
61#绑定刷新本行的命令：这原来是没有绑定的。
62"\C-xr":redrav=current-line
63#编辑本行中的变量。
64 \M\C=v :*\C=a\C=k$\C=y\M-\C=e\C=a\C-y=
6s $endif
67#如果可以响铃就使用
66
68 set bell=style visible
69#读取输入时不要把字符截成7位。
70 set input=meta on
71#允许插入iao-latin1字符，而不是把它们变成Meta化的序列。
72 set convert-meta off
73#直接显示八位的字符，而不是把它们当成Meta化的字符来显示。
74 set output-neta on
76#如果可以补全的项目超过150条，询问用户是否要显示全部。
76 set conpletion=query-itens 150
78#用于FTP
77
 $if Ftp
80 "\C=xg:
"get \M-?"
81 "\C=xt":
=K, nd,
82 "\M=,":
yank-last=arg
83$endif
$8.4
可以绑定的Readline命令
本章介绍可以绑定键的Readine命令.可以使用bind-P命令列出自已的键绑定：或者用bind-p更
紧凑的列出，这样还适合放到inputrc文件中（参见54.2[Bash的内部命令bind]，p34）-
在下文中，标志点是指当前光标的位置网，而记号是指用set：nark保存的光标位置。标志点和记号之
间的文本叫做区域。没有附带键序列的命令默认是没有绑定的。
8.4.1
Readline的移动命令
beginning=of-line ( [C-)
移到到行的开头，
3严格的说，标志点是指活动光标的位置，这也是编辑命令要操纵的文本位置，光标会停留在一个字符的上面，而标志点可以看作
是在光标下的字符与其前一个字符之间。例如，当光标在文本“frob"中的“"上面时，标志点号在"和°之同。如果这时插入一个
字符“"，结果就是“frolb”。这时，标志点在“"和"b"之同，面光标还停留在“b”上面。
++++++++++++++++++++++++++++++++++++
BASH 中文文档
目录
p80
---
## Page 92
8.4可以绑定的READLINE命令
第八章编辑命令行
end-of-1ine ([C-）
移动到行的结尾。
forward=char ( Cf)
向前移动一个字符。
backward-char ( [C )
向后移动一个字符。
forward=word (M-f)
向前移动到下一个单词的结尾。单词是由字母和数字构成的。
backward=word ( [M-b])
向后移动到前一个单词的开头。单词是由字母和数字构成的。
shell-forvard=vord
向前移动到下一个单词的结尾。单词是由未被引用的shell元字符分隔的。
shell-backvard-uord
向后移动到前一个单词的开头。单词是由未被引用的shell元字符分隔的，
clear-screen ([)
清屏并在屏幕顶端重新显示当前行，
redrav=current-line
刷新当前行。这个命令默认是没有绑定的，
§8.4.2
Readline的历史操作命令
accept=line（Newine或Retum）
不管光标在哪都提交本行。如果本行不是空行，就按照HISTCONTRDL
和HISTIGNORE变量的设置把它加入到历史中，如果本行是修改历史行得到的，就恢复历史中原来的
行。
previous=history (C-])
在历史中向“后"移动得到上一个命令。
next-history （Cn）