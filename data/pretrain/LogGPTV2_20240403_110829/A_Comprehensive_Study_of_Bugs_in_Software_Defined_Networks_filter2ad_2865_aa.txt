title:A Comprehensive Study of Bugs in Software Defined Networks
author:Ayush Bhardwaj and
Zhenyu Zhou and
Theophilus A. Benson
6
2
0
0
0
.
1
2
0
2
.
7
8
9
8
4
N
S
D
/
9
0
1
1
.
0
1
:
I
O
D
|
E
E
E
I
1
2
0
2
©
0
0
.
1
3
$
/
1
2
/
7
-
2
7
5
3
-
4
5
6
6
-
1
-
8
7
9
|
)
N
S
D
(
s
k
r
o
w
t
e
N
d
n
a
s
m
e
t
s
y
S
e
l
b
a
d
n
e
p
e
D
n
o
e
c
n
e
r
e
f
n
o
C
l
a
n
o
i
t
a
n
r
e
t
n
I
P
I
F
I
/
E
E
E
I
l
a
u
n
n
A
t
s
1
5
1
2
0
2
2021 51st Annual IEEE/IFIP International Conference on Dependable Systems and Networks (DSN)
A Comprehensive Study of Bugs in Software
Deﬁned Networks
Ayush Bhardwaj
Brown University
ayush PI:EMAIL
Zhenyu Zhou
Duke University
PI:EMAIL
Theophilus A. Benson
Brown University
PI:EMAIL
the network control
Abstract—Software-deﬁned networking (SDN) enables inno-
vative and impressive solutions in the networking domain by
decoupling the control plane from the data plane. In an SDN
environment,
logic for load balancing,
routing, and access control is written in software running on
a decoupled control plane. As with any software development
cycle, the SDN control plane is prone to bugs that impact the
network’s performance and availability. Yet, as a community, we
lack holistic, in-depth studies of bugs within the SDN ecosystem.
A bug taxonomy is one of the most promising ways to lay the
foundations required for (1) evaluating and directing emerging
research directions on fault detection and recovery, and (2)
informing operational practices of network administrators. This
paper takes the ﬁrst step towards laying this foundation by
providing a comprehensive study and analysis of over 500
‘critical’ bugs (including ∼150 with manual analysis) in three
of the most widely-used SDN controllers, i.e., FAUCET, ONOS,
and CORD. We create a taxonomy of these SDN bugs, analyze
their operational impact, and implications for the developers. We
use our taxonomy to analyze the effectiveness and coverage of
several prominent SDN fault tolerance and diagnosis techniques.
This study is the ﬁrst of its kind in scale and coverage to the
best of our knowledge.
Index Terms—SDN, Bugs, Fault-Tolerance, Taxonomy
I. INTRODUCTION
has
enabled
transformed ISP networks
Software-deﬁned Networking (SDN)
a
paradigm shift from legacy networking to programmable
networks which has
[1]–[3],
Clouds [4]–[6] and content provider networks [7]–[9]. Adop-
tion of SDN by all major companies has enabled them to: (1)
simplify provisioning and management of their networks, (2)
better utilize network resources available for disposal, and (3)
lower CAPEX (Capital Expenditures) and OPEX (Operating
Expenditures).
SDN’s key principle is to decouple functionality for routing,
security, and performance from the networking hardware, i.e.,
router and switches. This functionality is rewritten in special-
ized software and deployed at a centralized location, called
the controller. Today, modern SDN controllers are complex
pieces of software comprising millions of lines of code. With
key networking functionality softwarized and deployed on
controllers, it is no surprise that any bugs within the SDN
controller can lead to network performance and availability
issues.
In fact, recent studies by Google [7] and Facebook [10]
have shown that 30% of the outages in their SDN deployments
978-1-6654-3572-7/21/$31.00 ©2021 IEEE
DOI 10.1109/DSN48987.2021.00026
101
are due to software bugs in SDN control planes. Despite the
mounting evidence from industry and analysis of opensource
bugs [7], [10]–[12], the community is lacking a systematic and
detailed analysis of critical bugs within the SDN ecosystem.
This paper provides an in-depth analysis of over 500 critical
bugs across three popular and prominent controllers within the
SDN ecosystem. We created a taxonomy of bugs through our
analysis, evaluated existing SDN fault-tolerant frameworks,
and identiﬁed classes of bugs that require more research.
Our taxonomy provides the building blocks for designing
representative and informed fault-injectors for testing SDN
controllers.
Our study is motivated by the following key research
questions
• RQ1: What are the characteristics of bugs in SDNs?
• RQ2: What is the operational impact of these bugs?
• RQ3: How are these bugs triggered, and what strategies
are used to ﬁx them?
• RQ4: How can network operators beneﬁt from this study?
• RQ5: How effective are emerging research prototypes?
In answering these questions, this work lays the foundation
for richer and more advanced bug-tolerant SDN systems.
Our key ﬁndings are:
• Contrary to the growing work [13], [14] that effectively
tackle non-deterministic bugs, our study shows that there
is evidence, to the contrary, that most of the critical bugs
are deterministic in nature.
• While there is a growing number of SDNs fault tolerance
frameworks, e.g., Ravana [13] or STS [12], these are
focused on tackling bugs triggered by network-events.
Unfortunately, they fall short in tackling bugs triggered
by other types of events, e.g., conﬁguration or OS events,
e.g., timers. In Section VII-C, we show that while most
existing approaches can detect bugs, recovering from
these bugs remains an unsolved question and new tools
are necessary to ﬁll this gap.
• SDN controllers are prone to bugs like any large software
system. However, the speciﬁc subset of bugs and their
distributions within SDNs are different from traditional
server applications and distributed software. For example,
in server applications, most bugs are due to conﬁgura-
tion [15], [16], whereas, in SDNs, we found external calls
and network events form a major portion of the bugs,
Authorized licensed use limited to: Tsinghua University. Downloaded on October 11,2021 at 09:22:53 UTC from IEEE Xplore.  Restrictions apply. 
which requires a redesign of monitoring techniques to
monitor all external interactions in addition to network
events.
• One of the critical advantages of SDN over legacy
networks is the global visibility [17] and the broader
optimizations that it enables. However, we observe that
the result of many of these bugs
(e.g., bugs triggered
by network events (19.8%)) is that
this visibility is
signiﬁcantly lowered. In essence, these bugs eliminate a
crucial beneﬁt of SDNs.
Our analysis of the SDN bug corpus is largely driven by
manual analysis and categorization of the different bugs across
controller platforms. To ensure that our results generalize, we
employ NLP-based analysis across a larger set of bugs.
Given the questions above, we re-used well-established
taxonomies [18], [19] (Table I) and extended them to incor-
porate networking speciﬁc issues. The contributions of our
characterization study can be summarized as follows:
• We provide a holistic view of SDN bugs to allow de-
velopers and researchers to leverage our conclusions to
improve the SDN fault tolerance landscape. (§ IV)
• We extract guidelines and operational hints for managing
and operating SDN networks (e.g., guidelines for Con-
troller selection). (§ VII-A)
• We evaluate and analyze the coverage and efﬁcacy of sev-
eral existing SDN fault tolerant and recovery techniques.
(§ VII-C)
• We identiﬁed the feasibility and effectiveness of de-
signing NLP-based techniques for root cause diagnosis.
(§ VII-B)
RoadMap. The rest of this paper is structured as follows: In
section II, we discuss our target systems, our methodology, and
our approach for automated analysis. In section III, we analyze
bugs by their type. In section IV, we explore the operational
impact of these bugs. In Section V, we analyze the events that
trigger them. In section VI, we analyze code repositories to
understand their software engineering practices. In section VII,
we discuss the implications of these bugs. In section VIII, we
discuss the limitations of and threats to our study. We conclude
in sections IX and X, by describing the related and summarize
conclusions.
II. METHODOLOGY
In this section, we discuss the controller frameworks that we
analyze (§ II-A) and present our analysis techniques (§ II-B).
A. Target Systems
In Figure 1, we present an overview of the SDN ecosys-
tem. The ecosystem comprises of three components: (i) SDN
Applications, which provide speciﬁc network functionality,
e.g., routing [20], load balancing [21] or access control [22].
(ii) SDN controller framework, which manages interactions
between the SDN Applications and the underlying network
devices (e.g., switches). (iii) the network data plane, which
Figure 1: Generic Controller Stack.
consists of the switches and routers running within the net-
work. The interactions between the SDN control plane (ap-
plications and controller) and the data plane occur through
the exchange of SDN control messages (i.e., OpenFlow mes-
sages [23] or XMPP messages [24]). Many SDN controller
frameworks build on third-party libraries to provide additional