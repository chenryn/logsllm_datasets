# A Comprehensive Study of Bugs in Software-Defined Networks

## Authors
- Ayush Bhardwaj, Brown University
- Zhenyu Zhou, Duke University
- Theophilus A. Benson, Brown University

## Abstract
Software-Defined Networking (SDN) revolutionizes the networking domain by decoupling the control plane from the data plane. In an SDN environment, the logic for load balancing, routing, and access control is implemented in software running on a decoupled control plane. Like any software, the SDN control plane is susceptible to bugs that can affect network performance and availability. However, there is a lack of comprehensive, in-depth studies of bugs within the SDN ecosystem. This paper addresses this gap by providing a detailed analysis of over 500 critical bugs, including approximately 150 with manual analysis, in three widely-used SDN controllers: FAUCET, ONOS, and CORD. We develop a taxonomy of these bugs, analyze their operational impact, and explore their implications for developers. Our taxonomy also evaluates the effectiveness and coverage of several prominent SDN fault tolerance and diagnosis techniques. To the best of our knowledge, this study is the first of its kind in terms of scale and coverage.

## Index Terms
- SDN, Bugs, Fault-Tolerance, Taxonomy

## I. Introduction
Software-Defined Networking (SDN) has transformed ISP networks, Clouds, and content provider networks [1-9]. Major companies have adopted SDN to simplify network management, optimize resource utilization, and reduce both Capital Expenditures (CAPEX) and Operating Expenditures (OPEX). SDN's key principle is to decouple routing, security, and performance functionalities from networking hardware, implementing them in specialized software deployed on a centralized controller. Modern SDN controllers are complex, comprising millions of lines of code. Bugs in these controllers can lead to significant network performance and availability issues.

Recent studies by Google [7] and Facebook [10] indicate that 30% of outages in their SDN deployments are due to software bugs in the control plane. Despite this, the community lacks a systematic and detailed analysis of critical bugs in the SDN ecosystem. This paper provides an in-depth analysis of over 500 critical bugs across three prominent SDN controllers. We create a bug taxonomy, evaluate existing SDN fault-tolerant frameworks, and identify classes of bugs that require further research. Our taxonomy serves as a foundation for designing representative and informed fault-injectors for testing SDN controllers.

### Key Research Questions
- **RQ1:** What are the characteristics of bugs in SDNs?
- **RQ2:** What is the operational impact of these bugs?
- **R.RQ3:** How are these bugs triggered, and what strategies are used to fix them?
- **RQ4:** How can network operators benefit from this study?
- **RQ5:** How effective are emerging research prototypes?

By answering these questions, this work lays the foundation for more advanced bug-tolerant SDN systems. Our key findings include:
- Most critical bugs are deterministic, contrary to recent work [13, 14] that focuses on non-deterministic bugs.
- Existing SDN fault tolerance frameworks, such as Ravana [13] and STS [12], primarily address bugs triggered by network events but fall short in handling bugs triggered by configuration or OS events.
- The distribution of bugs in SDN controllers differs from traditional server applications and distributed software, requiring a redesign of monitoring techniques to cover all external interactions.
- Many bugs in SDNs reduce the global visibility and broader optimizations that SDN offers, eliminating a crucial benefit.

Our analysis is driven by manual categorization and NLP-based analysis to ensure generalizability. We extend well-established taxonomies [18, 19] to incorporate networking-specific issues. The contributions of our study include:
- Providing a holistic view of SDN bugs to improve the SDN fault tolerance landscape (ยง IV).
- Extracting guidelines and operational hints for managing and operating SDN networks (ยง VII-A).
- Evaluating the coverage and efficacy of existing SDN fault-tolerant and recovery techniques (ยง VII-C).
- Identifying the feasibility and effectiveness of NLP-based techniques for root cause diagnosis (ยง VII-B).

### Roadmap
- **Section II:** Methodology, including target systems and analysis techniques.
- **Section III:** Analysis of bug types.
- **Section IV:** Operational impact of bugs.
- **Section V:** Events that trigger bugs.
- **Section VI:** Software engineering practices in code repositories.
- **Section VII:** Implications of bugs.
- **Section VIII:** Limitations and threats to the study.
- **Sections IX and X:** Related work and conclusions.

## II. Methodology
### A. Target Systems
Figure 1 provides an overview of the SDN ecosystem, which consists of:
1. **SDN Applications:** Provide specific network functionality, such as routing [20], load balancing [21], and access control [22].
2. **SDN Controller Framework:** Manages interactions between SDN applications and underlying network devices (e.g., switches).
3. **Network Data Plane:** Consists of switches and routers in the network. Interactions between the control plane and data plane occur through SDN control messages (e.g., OpenFlow [23] or XMPP [24]). Many SDN controller frameworks build on third-party libraries to provide additional functionality.

![Generic Controller Stack](figure1.png)

In the following sections, we will delve into the details of our methodology, analysis, and findings.