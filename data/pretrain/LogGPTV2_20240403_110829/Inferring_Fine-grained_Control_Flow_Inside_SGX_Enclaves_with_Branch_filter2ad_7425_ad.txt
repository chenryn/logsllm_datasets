4.1 Attacking RSA Exponentiation
We launch the branch shadowing attack against a pop-
ular TLS library, called mbed TLS (also known as Po-
larSSL). mbed TLS is a popular choice of SGX developers
and researchers because of its lightweight implementation
and portability [47, 49, 62, 63].
Figure 5 shows how mbed TLS implements sliding-
window exponentiation, used by RSA operations. This
function has two conditional branches (jne) marked with
⋆ whose executions depend on each bit (ei) of an expo-
nent. These branches will be taken only when ei is not
USENIX Association
26th USENIX Security Symposium    565
zero (i.e., one). Thus, by shadowing them and checking
their states, we can know the value of ei. Note that the
two branches are always executed no matter how large
the sliding window is. In our system, each loop execution
(Lines 7–30) took about 800 cycles such that a manipu-
lated local APIC timer was enough to interrupt it. Also,
to differentiate each loop execution, we shadow uncondi-
tional branches that jump back to the loop’s beginning.
We evaluated the accuracy of branch shadowing by
attacking RSA-1024 decryption with the default key pair
provided by mbed TLS for testing. By default, mbed
TLS’s RSA implementation uses the Chinese Remainder
Theorem (CRT) technique to speed up computation. Thus,
we observed two executions of mbedtls_mpi_exp_mod
with two different 512-bit CRT exponents in each iter-
ation. The sliding-window size was five.
On average, the branch shadowing attack recovered
approximately 66% of the bits of each of the two CRT
exponents from a single run of the victim (averaged over
1,000 executions). The remaining bits (34%) correspond
to loop iterations in which the two shadowed branches
returned different results (i.e., predicted versus mispre-
dicted). We discarded those measurements, as they were
impacted by platform noise, and marked the correspond-
ing bits as unknown. The remaining 66% of the bits were
inferred correctly with an accuracy of 99.8%, where the
standard deviation was 0.003.
The events that cause the attack to miss about 34% of
the key bits appear to occur at random times. Different
runs reveal different subsets of the key bits. After at
most 10 runs of the victim, the attack recovers virtually
the entire key. This number of runs is small compared
to existing cache-timing attacks, which demand several
hundreds to several tens of thousands of runs to reliably
recover keys [20, 35, 65].
Timing-based branch shadowing.
Instead of using
the LBR, we measured how long it takes to execute the
shadow branches using RDTSCP while maintaining other
techniques, including the modified local APIC timer and
victim isolation. When the two target branches were taken,
the shadow branches took 55.51 cycles on average, where
the standard deviation was 48.21 cycles (1,000 iterations).
When the two target branches were not taken, the shadow
branches took 93.89 cycles on average, where the standard
deviation was 188.49 cycles. Because of high variance,
finding a good decision boundary was challenging, so we
built a support vector machine classifier using LIBSVM
(with an RBF kernel and default parameters). Its accuracy
was 0.947 (10-fold cross validation)—i.e., we need to run
this attack at least two times more than the LBR-based
attack to achieve the same level of accuracy.
Controlled-channel attack. We also evaluated the con-
trolled channel attack against Figure 5. We found that
mbedtls_mpi_exp_mod conditionally called mpi_montmul
Figure 6: Controlled-channel attack against sliding-window
exponentiation (window size: 5). It only knows the first bit of
each window (always one) and skipped bits (always zero).
(marked with +) according to the value of ei and both
functions were located on different code pages. Thus, by
carefully unmapping these pages, an attacker can monitor
when mpi_montmul is called. However, as Figure 6 shows,
because of the sliding-window technique, the controlled-
channel attack cannot identify every bit unless it knows
W[wbits]—i.e., this attack can only know the first bit of
each window (always one) and skipped bits (always zero).
The number of recognizable bits completely depends on
how the bits of an exponent are distributed. Against the
default RSA-1024 private key of mbed TLS, this attack
identified 334 bits (32.6%). Thus, we conclude that the
branch shadowing attack is better than the controlled-
channel attack for obtaining fine-grained information.
4.2 Case Study
We also studied other sensitive applications that branch
shadowing can attack. Specifically, we focused on ex-
amples in which the controlled-channel attack cannot
extract any information, e.g., control flows within a sin-
gle page. We attacked three more applications: 1) two
libc functions (strtol and vfprintf) in the Linux SGX
SDK, 2) LibSVM, ported to Intel SGX, and 3) some
Apache modules ported to Intel SGX. We achieved in-
teresting results, such as how long an input number
is (strtol), what the input format string looks like
(vfprintf), and what kind of HTTP request an Apache
server gets (lookup_builtin_method), as summarized in
Table 3. Note that the controlled-channel attack cannot
obtain the same information because those functions do
not call outside functions at least in the target basic blocks.
Detailed analysis with source code is in Appendix C.
5 Countermeasures
We introduce our hardware-based and software-based
countermeasures against the branch shadowing attack.
5.1 Flushing Branch State
A fundamental countermeasure against the branch shad-
owing attack is to flush all branch states generated in-
side an enclave by modifying hardware or updating mi-
566    26th USENIX Security Symposium
USENIX Association
scan each bit...1 1 0 0 0 0 0 1 1 0 1 0 1 1 0 0 1 ...call mpi_montmul six times (page faults)1 1 0 0 0 0 0 1 1 0 1 0 1 1 0 0 1 ...call mpi_montmul once1 1 0 0 0 0 0 1 1 0 1 0 1 1 0 0 1 ...call mpi_montmul once1 1 0 0 0 0 0 1 1 0 1 0 1 1 0 0 1 ...call mpi_montmul six times: leaked bitsProgram/Library
mbed TLS
libc
Function
mbedtls_mpi_exp_mod
mpi_montmul
strtol
Description
sliding-window exponentiation
Montgomery multiplication
convert a string into an integer
LIBSVM
Apache
vfprintf
k_function
lookup_builtin_method
print a formatted string
Obtainable information
✓each bit of an exponent
✓whether a dummy subtraction has performed
✓the sign of an input number
✓the length of an input number
✓whether each hexadecimal digit is larger than nine
✓the input format string
✓the type of each input argument (e.g., int, double)
✓the type of a kernel (e.g., linear, polynomial)
✓the length of a feature vector (i.e., # of features)
evaluate a kernel function
parse the method of an HTTP request ✓HTTP request method (e.g., GET, POST)
Table 3: Summary of example sensitive applications and their functions attacked by branch shadowing.
C
P
I
d
e
z
i
l
a
m
r
o
N
1.2
1
0.8
0.6
0.4
0.2
0
bzip2 gcc
gobmk
mcf
hm mer
libquantum
sjeng
omnetpp
h264ref
astar
bwaves
xalancbmk
gamess
zeusmp
milc
gromacs
leslie3d
cactusA D M
namd
dealII
soplex
povray
GemsFDTD
calculix
tonto
lbm
sphinx3
wrf
G M EA N
no flushes
flush per 100k cycles
flush per 100 cycles
flush per 1M cycles
flush per 1k cycles
flush per 10M cycles
flush per 10k cycles
Figure 7: Instructions per cycle of SPEC benchmark in terms of frequency of BTB and BPU flushing.
100
80
60
40
20
0
n/a 100
1k
10k 100k 1M 10M
Flushing Frequency (cycles)
hit rate miss rate
Parameter
CPU
L1 cache
L2 cache
L3 cache
BTB
BPU
Value
4 GHz out of order core, 4 issue width, 256 entry ROB
8 way 32 KB I-cache + 8 way 32 KB D-cache
8 way 128 KB
32 way 8 MB
4 way 1,024 sets
gshare, branch history length 16
Table 4: MacSim simulation parameters.
B
T
B
.
m
r
o
N
e
t
a
R
s
s
i
M
/
t
i
H
Figure 8: Average BTB hit/miss rate according to frequency of
BTB and BPU flushing.
s
t
a
t
S
B
T
B
.
m
r
o
N
100
80
60
40
20
0
n/a 100
1k
10k 100k 1M 10M
Flushing Frequency (cycles)
correct mispredict misfetch
Figure 9: Average BTB statistics according to frequency of
BTB and BPU flushing.
crocode. Whenever an enclave context switch (via the
EENTER, EEXIT, or ERESUME instructions or AEX) occurs,
the processor needs to flush the BTB and BPU states.
Since the BTB and BPU benefit from local and global
branch execution history, there would be a performance
penalty if these states were flushed too frequently.
We estimate the performance overhead of our counter-
measure at different enclave context switching frequen-
cies using a cycle-level out-of-order microarchitecture
simulator, MacSim [30]. To simulate branch history flush-
ing for every enclave context switch, we modified Mac-
Sim to flush BTB and BPU for every 100 to 10 million
cycles; this resembles enclave context switching for every
100 to 10 million cycles. The details of our simulation
parameters are listed in Table 4. The BTB is modeled
after the BTB in Intel Skylake processors. We used a
method similar to that in [1, 58] to reverse engineer the
BTB parameters. From our experiments, we found that
the BTB is organized as a 4-way set associative structure
with a total of 4,096 entries. We model a simple branch
predictor, gshare [37], for the simulation. We use traces
USENIX Association
26th USENIX Security Symposium    567
that are 200 million instructions long from the SPEC06
benchmark suite for simulation.
Figure 7 shows the normalized instructions per cycle
(IPC) for different flush frequencies. We found that if
the flush frequency is higher than 100k cycles, it has
negligible performance overhead. At a flush frequency of
100k cycles, the performance degradation is lower than
2% and at 1 million cycles, it is negligible. Figure 8
shows the BTB hit rate, whereas Figure 9 shows the BPU
correct, incorrect (direction prediction is wrong), and
misfetch (target prediction is wrong) percentages. The
BTB and BPU statistics are also barely distinguishable
beyond a flush frequency of 100k cycles.
According to our measurements with a 4GHz CPU,
about 250 and 1,000 timer interrupts are generated per sec-
ond in Linux (version 4.4) and Windows 10, respectively—
i.e., a timer interrupt is generated for every 4M and 1M
cycles, respectively. Therefore, if there is no I/O device
generating many interrupts and an enclave program gener-
ates less frequent system calls, which would be desired to
avoid the Iago attack [9], flushing branch states for every
enclave context switch will introduce negligible overhead.
5.2 Obfuscating Branch
Branch state flushing can effectively prevent the branch
shadowing attack, but we cannot be sure when and
whether such hardware changes will be realized. Espe-
cially, if such changes cannot be done with micro code
updates, we cannot protect the Intel CPUs already de-
ployed in the markets.
Possible software-based countermeasures against the
branch shadowing attack are to remove branches [39] or to
use the state-of-the-art ORAM technique, Raccoon [44].