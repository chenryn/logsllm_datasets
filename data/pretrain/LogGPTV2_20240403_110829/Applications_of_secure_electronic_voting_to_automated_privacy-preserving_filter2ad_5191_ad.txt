tion 5. We compute a lookup table of the values gm1
2 gm3
for approximately 220 diﬀerent values of (m1, m2, m3). Since
our table contains one out of every sixteen possible values of
m, we can recover any given m using at most 16 successive
exponentiations and table lookups, or 37000 values using at
most 37000 · 16 ≈ 220 such operations.
1 gm2
3
In Figure 3, we present some experimental measurements
for the amount of CPU time used in an actual recovery op-
eration of this scale. Our test program makes use of the
optimized ﬁnite ﬁeld arithmetic routines in the MS bignum
library. We use elliptic curve groups over prime ﬁelds, with
ﬁeld sizes indicated in Figure 3. All tests represent the av-
erages of ten trial runs and were performed on a 3 GHz
Pentium machine.
11. PROTOCOL EVALUATION
We evaluated our protocol based on a real-world friends
network topology. It is a snapshot of MSN instant messenger
(IM) operational data from 2003, with 150,682,876 users.
Figure 3: CPU time and memory usage in an actual
recovery operation.
The number of friends of an IM user has a median of 9, and
an average of 19, which represents the upper limit of our
cluster size.
11.1 Robustness Against Passive Attacks
Homomorphic encryption protects users’ privacy from pas-
sive attacks where the troubleshooting requests and the con-
tributed data are all legitimate, but friends are “curious”
and might collude and snoop to try to infer other peoples’
data (however without going to the lengths of falsifying in-
formation).
Occasionally, compromised hosts may launch active at-
tacks against their peer friends, in the forms of the trou-
bleshooter attack and the data injection attack (Section 3.2).
The homomorphic encrypted vote tallying can be combined
together with the cluster-based secure multi-party sum pro-
tocol to increase robustness against active attacks, which we
will evaluate in the following subsections.
11.2 Mitigating the Troubleshooter Attack
A compromised host may fabricate a troubleshooting re-
quest and form a troubleshooting cluster to infer its friends’
information. Without colluding, message inspection at the
troubleshooter does not reveal any privacy-sensitive infor-
mation, due to the use of the homomorphically aggregated
network-wide tally in the ﬁrst round, and the re-encryption
mixnet in the second round. By colluding with the cluster’s
exit, the malicious troubleshooter can determine the aggre-
gate contributions from other honest participants within its
cluster, but will still be unable to determine what an indi-
vidual member contributed.
Based on clustering, we propose an enhancement to fork
the request path, to further reduce the risk of a successful
troubleshooter attack. If two exits are selected for a cluster,
and each cluster member randomly chooses one of them to
unicast the subtotal of the random shares it receives from
other participants, then the troubleshooter would have to
collude with both exits in order to reconstruct the cluster’s
aggregate information. Due to the use of a random walk
based on a probability of forwarding Pf (cf. Section 4.2),
the troubleshooter cannot reduce the likelihood of an honest
exit forwarding its request to other clusters. Hence, the re-
sponse from an honest exit is likely to include the aggregate
information from multiple clusters and not reveal privacy-
80901001101201301401501601.522.533.54Field Size (bits)CPU Time (sec)8090100110120130140150160152025Field Size (bits)Memory Usage (MB)75compromising details. In the ﬁrst round, the key holder will
wait until it receives the replies from both exits, and ag-
gregate the encrypted tally contained in both replies using
the homomorphic property.
In the second round, the key
holder will wait until it receives both replies, collect all the
encrypted messages contained in both replies into one packet
and mix them by random shuﬄing.
Assume a malicious troubleshooter forms a cluster of size
G, among which C members are colluding with it. The
probability of a successful troubleshooter attack with only
one exit is P1 = C
If the forking strategy is used, the
G .
probability is reduced to P2 = C(C−1)
= C−1
G−1 .
If only a small portion of the cluster’s participants collude
with the troubleshooter, then P2 will be much smaller than
P1. Obviously, the more forks we use, the less likely that
a troubleshooter is able to successfully launch the attack,
since it has to collude with more exits.
G(G−1) . We have P2
P1
G ·0+(1− C
G )·Hideal = ( G−C
To quantitatively measure the uncertainty of the malicious
troubleshooter about whether the decrypted tally is from
its own cluster, or has been mixed with contributions from
future hops, we use an information theoretic metric based
on Shannon’s deﬁnition of entropy [25]. In the ideal situ-
ation, where there are no colluding participants, the trou-
bleshooter only has the information that under probability
1 − ¯Pf , the reply only contains the aggregate data values
from its own cluster, where ¯Pf is the average probability
of forwarding the request from one cluster to another. The
troubleshooter’s uncertainty can be quantiﬁed as Hideal =
− ¯Pf log( ¯Pf ) − (1 − ¯Pf ) log(1 − ¯Pf ). When there are C col-
luders in the participants, the troubleshooter’s uncertainty is
G )·Hideal.
reduced to Hnof ork = C
However, if two exits are selected to fork the troubleshooting
path, the troubleshooter cannot infer whether future hops
are involved unless it colludes with both exits. If only one of
the exits colludes with the troubleshooter, then under prob-
ability ¯Pf , the honest exit will forward the request to future
hops. We note that the troubleshooter and the colluding
exit cannot determine if future hops are involved from the
reply returned by the honest exit in the ﬁrst round, since
they are unaware of the actual number of helpers inside
the cluster. However, since every participant contributes
an encrypted subtotal in the second round, and the mes-
sages are concatenated, they may infer that no future hops
are involved by counting the number of encrypted messages
contained in the reply returned by the honest exit in the
second round. To prevent the troubleshooter from gaining
extra information in such cases, we require the honest exit
to randomly select a number of subtotals which sum up to
0, encrypt them and add the encrypted messages into the
second round reply, if it does not forward the request due
to Pf or it encounters a dead end situation. Therefore, with
two exits to fork the request path, the troubleshooter’s un-
G(G−1) · 0 + (G−C)(G−C−1)
·
certainty becomes Htwof ork = C(C−1)
G(G−1)
· Hideal. The
Hideal + 2 · C(G−C)
forking strategy increases the troubleshooter’s uncertainty
by a factor of Htwof ork
G−1 . Figure 4
Hnof ork
shows the ratio of Htwof ork
, for diﬀerent values
Hideal
of C and G. The closer the ratio is to 1, the more robust
the system is against the troubleshooter attack.
G(G−1) · Hideal = (G−C)(G+C−1)
G(G−1)
= G+C−1
G−1 = 1 + C
and Hnof ork
Hideal
If a compromised host launches a successful troubleshooter
attack by colluding with both exits, together they will be
Figure 4: The ratio of a troubleshooter’s uncertainty
to the ideal case, with and without forking strategy.
able to determine the collective contributions of the other
honest cluster members. Nevertheless, they will still be un-
able to determine each individual member’s data: the secure
multi-party sum protocol in both rounds ensures that all
other cluster members must collude to reveal the contribu-
tion of an individual member. A cluster member can adjust
its probability to help Ph (cf. Section 4.2) to improve its
privacy in case of a successful troubleshooter attack. In gen-
eral, Ph should take a smaller value for a smaller cluster size
and for better privacy. Although a malicious troubleshooter
may invite fewer friends when forming its troubleshooting
cluster, the honest cluster members can always make the
number of helpers a small fraction of the cluster size, by re-
ducing Ph according to the cluster size, and therefore their
privacy will not be compromised. We note that some con-
ﬁguration data or application ownership information (e.g.,
owning Microsoft Word) is not privacy-sensitive. For those
cases, an FTN node simply sets Ph = 1. In general, an FTN
user can conﬁgure policies on how to adjust Ph for data of
diﬀerent privacy levels.
Since forking at every hop doubles the number of clus-
ters involved in the troubleshooting process, we need to use
an appropriate probability of forwarding to achieve a rel-
PL−1
atively short path length per branch. Let L denote the
average path length per branch; then the total number of
i=0 2i = 2L − 1 on average. The
clusters involved is
probability of forwarding Pf can be determined by equa-
tions (Average number of helpers per cluster)· (2L − 1) = 10
and (Average number of helpers per cluster)· 0.5· L = 1
.
1−Pf
The ﬁrst equation is due to the fact that the total number
of samples to be collected should be around 10, in order for
the PeerPressure diagnosis to be eﬀective [28]. The second
equation corresponds to a branch in the forking scenario,
where the average number of times that an exit ﬂips a bi-
ased coin (to determine if it should forward the request or
not) is equal to half of the average number of a cluster’s
times on
helpers, and in total the coin will be ﬂipped
average.
1−Pf
1
In general, we want L to be a small value. A short path
length not only saves communication overhead, but also re-
duces the chance of encountering a compromised peer which
may contribute false conﬁguration data and aﬀect the in-
810121416182022240.750.80.850.90.951The cluster size GThe ratio of a troubleshooter’s uncertaintyto the ideal case, without and with forkingC: Number of colluding membersC=1, H(no fork)/H(ideal)C=2, H(no fork)/H(ideal)C=1, H(two fork)/H(ideal)C=2, H(two fork)/H(ideal)76tegrity of the troubleshooting result.
If we set Pf = 0.7,
corresponding to the average path length L = 2, then the
total number of clusters involved would be 3 on average, the
same as an Innocence level3 of I = 2 in [15]. Therefore, a
cluster member can set the probability to help based on its
cluster size to the value corresponding to I = 2, in order to
gather 10 samples.
We simulated our FTN routing protocol with the forking
strategy on the static IM topology, conﬁgured with probabil-
ity of forwarding Pf = 0.7. We randomly picked 100 start-
ing nodes as the requester, and set the corresponding Ph
according to the Innocence level of I = 2, in order to obtain
approximately 10 samples. In our simulation, we imposed
an upper bound of 36 on the cluster size to limit the intra-
cluster communication overhead. When we set Pf = 0.7,
the median number of clusters involved is 3, and the me-
dian number of nodes involved is 70. In occasional cases, the
number of clusters involved is more than 16, which incurs
a high communication overhead. The initiator may send a
message via the request path to cancel the request propaga-
tion, after an appropriate timeout period has elapsed. The
timeout should be chosen randomly and kept private to the
initiator itself.
Another friends network characteristic that is of interest
to the forking mechanism is the percentage of clusters that
can only ﬁnd one exit.
In such cases, the cluster mem-
bers will not contribute any sample in order to prevent
the troubleshooter attack. The request can still be prop-
agated through the unique exit. Encountering such nodes
on the forward path will increase the communication over-
head without helping to gather any samples. According to
our computation from the 81790827 IM users with at least
3 friends (we excluded those nodes with one or two friends,
since the former will not be included on the FTN forwarding
path, while the latter will not form a cluster), the probability
of routing to such nodes is 0.0025. Therefore, the average
number of hops that need to be traversed before reaching
such a node is 1/0.0025 = 400, which far exceeds the num-
ber of hops that need to be traversed with the FTN protocol
(typically under 10).
11.3 Mitigating the Data Injection Attack
Ensuring the integrity of the troubleshooting result is chal-
lenging considering the occasional possibility that a friend’s
machine may be compromised, and hence may lie about the
conﬁguration state it has.
An advantage of using homomorphic encryption is that
the key holder can be asked to prove in zero knowledge that
its decryption operation is legitimate, and each cluster’s exit
can require the participants to give zero knowledge proof
of the validity of their vote, to ensure that the encrypted
tally is not tampered during aggregation within the cluster.
However, a cluster’s entrance and exit can still manipulate
the tally on the propagation path, since unlike each cluster
member’s binary valued vote that can be veriﬁed in zero
knowledge, the randomly initialized tally can take any inte-
ger value, and hence its validity is hardly possible to verify.
Nevertheless, use of zero-knowledge proof does reduce the
number of nodes that can corrupt the tally from G (the
cluster’s size) to 2 per hop.
To further limit the impact of data injection attacks, a
3Innocence level is deﬁned as a metric in [15] to evaluate
diﬀerent privacy levels.
troubleshooter can send several requests to disjoint subsets
of friends, enabling each subset to carry out a branch of
troubleshooting, and examine the results returned by all
branches to check if any one of the results is anomalous.
The troubleshooter can ﬁlter out maliciously tampered re-
sults if the majority of the branches do not encounter any
compromised nodes. We call this a multiple-branch trou-
bleshooting strategy.
Guaranteeing the integrity of the return values requires
that all samples must be gathered from the troubleshooter’s
own cluster, and every participant must verify the validity
of their contribution to the troubleshooter itself. However,
there are several reasons that this requirement cannot be
met. First of all, it would compromise the troubleshooter’s
anonymity. Furthermore, the PeerPressure algorithm needs
10 samples to be eﬀective. According to our IM topology,
51% of users have fewer than 10 friends, and hence must
collect samples from their friends’ clusters. Finally, a trou-
bleshooter would easily determine the aggregate information
of its immediate friends if a single cluster were used. Involv-
ing several clusters in the troubleshooting process renders
the troubleshooter attack harder to launch.
We assume that there is only an occasional possibility for
a trusted friend’s machine to get compromised, and hence
the percentage of compromised nodes is moderate or small
(e.g., 1% or less). To quantitatively study the eﬀect of using
zero knowledge proof and multiple-branch troubleshooting
on mitigating the data injection attack, we performed simu-
lations on our IM topology under two diﬀerent attacker sce-
narios, in which we assumed the percentage of compromised
nodes was 1% and 0.1% respectively. For each attacker sce-
nario, we randomly marked the nodes being compromised.
We then randomly picked 1000 honest nodes to send a trou-
bleshooting request to 1 to 10 distinct branches, depend-
ing on the number of friends they may have. We simulated
the troubleshooting cases when diﬀerent numbers of clusters
were involved on each request path. With zero knowledge
proof, we marked the result returned by one branch as being
corrupted only if the request hit a compromised entrance or