User: 日志易监控告警插件如何编写？
Assistant: 日志易监控告警插件采用 Python 编写，需要实现handle、content、execute_reply 三个方法和 META字典定义，分别用来执行告警发送、提供内容渲染和预览输出。META 字典则用于声明和获取日志易前端界面上对应该插件的配置参数。以日志易内置的 http 转发监控告警插件为例：

```
# -*- coding: utf-8 -*-
# wu.ranbo@yottabyte.cn
# 2016-05-19
# Copyright 2016 Yottabyte
# filename: yottaweb/apps/alert/plugins/simple_email.py
# file description: 最简单的告警，所有客户都会带着
__author__ = 'wu.ranbo'
    
import logging
import requests
import json
import copy
req_logger = logging.getLogger("django.request")
global reply_content
reply_content = ""
log_content = {
    logging.FATAL: re_logger.fatal,
    logging.ERROR: re_logger.error,
    logging.WARNING: re_logger.warning,
    logging.INFO: re_logger.info,
    logging.DEBUG: re_logger.debug
}

META = {
    "name": "http_forwarder",
    "version": 1,
    "alias": "告警转发",
    "configs": [
        {
            "name": "address",
            "alias": "转发url地址",
            "place_holder": "转发地址支持采用模板语言",
            "presence": True,
            "value_type": "string",
            "default_value": "",
            "style": {
                "rows": 1,
                "cols": 30
            }
        }
        ]
    }

def log_and_reply(log_level, comment):
    global reply_content
    log_content.get(log_level)(comment)
    reply_content = '%s%s%s' % (reply_content, "
", comment)

def content(params, alert):
    return json.dumps(alert, ensure_ascii=False, indent=4).encode("utf-8", "ignore")

def handle(params, alert):
    try:
        address = params['configs'][0]['value']
        requests.post(address, data=json.dumps(alert))
        log_and_reply(logging.DEBUG, ("alert.plugs.http_forwarder send to %s, data:%s.", address, origin_alert))
    except Exception, e:
        log_and_reply(logging.ERROR, ("alert.plugins.http_forwarder got exception %s", e))
        raise e

def execute_reply(params, alert):
    re_logger.info("reply_content start")
    handle(params, alert)
    re_logger.info("reply_content: %s" % (reply_content))
    return reply_content
```