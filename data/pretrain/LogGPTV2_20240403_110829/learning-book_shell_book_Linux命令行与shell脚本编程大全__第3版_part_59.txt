fi
./etc/bashrc
 User speclfic aliases and functiong
echo *I'm in a new shell!*
$ bash
I'm in a nev shel1[
---
## Page 368
16.7小结
353
S exit
ex1 t
bashrc文件通常也是通过某个bash启动文件来运行的。因为.bashrc文件会运行两次：一次是
16
当你登人bash shell时，另一次是当你启动一个bash shell时。如果你需要一个脚本在两个时刻都得
以运行，可以把这个脚本放进该文件中
16.7小结
Linux系统允许利用信号来控制shell脚本。bashshell接受信号，井将它们传给运行在该shell
进程中的所有进程。Linux信号允许轻松地终止一个失控进程或临时暂停一个长时间运行的进程。
可以在脚本中用trap语句来捕获信号并执行特定命令。这个功能提供了一种简单的方法来
控制用户是否可以在脚本运行时中断脚本。
默认情况下，当你在终端会话shell中运行脚本时，交互式shell会挂起，直到脚本运行完。可
以在命令名后加一个&符号来让脚本或命令以后台模式运行。当你在后台模式运行命令或胸本时，
交互式shell会返回，允许你继续输人其他命令。任何通过这种方法运行的后台进程仍会绑定到该
终端会话。如果退出了终端会话，后台进程也会退出。
可以用nohup命令阻止这种情况发生。该命令会拦截任何发给某个命令来停止其运行的信号
（比如当你退出终端会话时）。这样就可以让脚本继续在后台运行，即便是你已经退出了终端会话。
当你将进程置入后台时，仍然可以控制它的运行。jobs命令可以查看该shell会话启动的进程。
只要知道后台进程的作业号，就可以用kil1命令向该进程发送Linux信号，或者用fg命令将该进
程带回到该shell会话的前台。你可以用Ctrl+Z组合键挂起正在运行的前台进程，然后用bg命令将
其置人后台模式。
nice命令和renice命令可以调整进程的优先级。通过降低进程的优先级，你可以让给该进
程分配更少的CPU时间。当运行需要消耗大量CPU时间的长期进程时，这一功能非常方便。
除了控制处于运行状态的进程，你还可以决定进程在系统上的启动时间。不用直接在命令行
界面的提示符上运行脚本，你可以安排在另一个时间运行该进程。有几种不同的实现途径。at
命令允许你在预设的时间运行脚本。cron程序提供了定期运行脚本的接口。
最后，Linux系统提供了脚本文件，可以让你的脚本在用户启动一个新的bash shell时运行。
与此类似，位于每个用户主目录中的启动文件（如.bashrc）提供了一个位置来存放新shell启动时
需要运行的脚本和命令。
下一章将学习如何编写脚本函数。脚本函数可以让你只编写一次代码，就能在脚本的不同位
置中多次使用。
---
## Page 370
Part 3
第三部分
高级shell脚本编程
本部分内容
第17章创建函数
第18章图形化桌面环境中的脚本编程
第19章初识sed和gawk
第20章正则表达式
第21章sed进阶
第22章gawk进阶
第23章使用其他shell
---
## Page 371
第17章
创建函数
本章内容
口基本的脚本函数
口返回值
口在函数中使用变量
口数组变量和函数
口函数递归
口创建库
口在命令行上使用函数
的用户自定义函数功能可以解决这个问题。可以将shell脚本代码放进函数中封装起来，这样就能
在脚本中的任何地方多次使用它了。本章将会带你逐步了解如何创建自己的shel脚本函数，并演
示如何在shell脚本应用中使用它们。
17.1基本的脚本函数
在开始编写较复杂的shell脚本时，你会发现自己重复使用了部分能够执行特定任务的代码。
这些代码有时很简单，比如显示一条文本消息，或者从脚本用户那里获得一个答案；有时则会比
较复杂，需要作为大型处理过程中的一部分被多次使用。
在后一类情况下，在脚本中一遍又一遍地编写同样的代码会很烦人。如果能只写一次，随后
在脚本中可多次引用这部分代码就好了。
bashshel提供了这种功能。函数是一个脚本代码块，你可以为其命名并在代码中任何位置重
用。要在脚本中使用该代码块时，只要使用所起的函数名就行了（这个过程称为调用函数）本
节将会介绍如何在shell脚本中创建和使用函数。
---
## Page 372
17.1基本的脚本函数
357
17.1.1创建函数
有两种格式可以用来在bashshell脚本中创建函数。第一种格式采用关键字function，后跟
分配给该代码块的函数名。
function nane {
corands
name属性定义了赋予函数的唯一名称。脚本中定义的每个函数都必须有一个唯一的名称。
17
commands是构成函数的一条或多条bash shell命令。在调用该函数时，bash shell会按命令在
函数中出现的顾序依次执行，就像在普通脚本中一样。
name ()(
coxmanda
函数名后的空括号表明正在定义的是一个函数。这种格式的命名规则和之前定义shell脚本函
数的格式一样。
17.1.2使用函数
要在脚本中使用函数，只需要像其他shell命令一样，在行中指定函数名就行了。
$ cat test1
 using a function in a acrlpt
#1/bin/bash
function funcl(
uotaoung e go etduxe ue 8t stu. ouoe
[5 a-unos 1m
count=1
do
[ + qumoos 1s=qumoo
func1
done
echo *This ie the end of the loop*
func1
echo *Now thia ia the end of the script*
$./test1
Thia ia an example of a function
Th1α iα an example of a function
Thla ia an example of a function
Thla is an example of a function
Thls ia the end of the loop
Th1α
1α an example of a function
---
## Page 373
358
第17章创建函数
Thia la an exanple of a function
Kow thia iα the end of the acrlpt
每次引用函数名func1时，bash shell会找到funcl函数的定义并执行你在那里定义的命令。
函数定义不一定非得是shell脚本中首先要做的事，但一定要小心。如果在函数被定义前使用
函数，你会收到一条错误消息。
$ cat test2
 using a functlon located in the niddle of a script
1/bin/bash
count=1
echo *Thia 1ine comes before the function Gefinition*
functlon funcl (
echo *Thla is an example of a function *
(
[s ↑- qunoos  oTqA
do
func1
count=$[ $count + 1 ]
done
echo *rhis la the end of the loop*
echo *Now this la the end of the scrlpt*
func2
functlon func2 (
echo *Thla iα an example of a function*
)
$./test2
Thia line comes before the function definltion
Thia la an exanple of a function
Thia la an exanple of a function
Thia la an exanple of a function
This La an exanple of a function
Thia Lg an exanple of a function
This le the end of the loop
Now thla ia the end of the scrlpt
- /test2: func2: command not found
第一个函数funei的定义出现在脚本中的几条语句之后，这当然没任何问题。当funcl函数
在脚本中被使用时，shell知道去哪里找它。
然而，脚本试图在func2函数被定义之前使用它。由于func2函数还没有定义，脚本运行函
数调用处时，产生了一条错误消息。
你也必须注意函数名。记住，函数名必须是唯一的，否则也会有问题。如果你重定义了函数，
新定义会覆盖原来函数的定义，这一切不会产生任何错误消息。
---
## Page 374
17.2返回值
359
$ cat teat3
#1/bin/bash
teating us1ng a @upllcate functlon name
functIon funcl{
func1
17
functIon funcl{
echo *This ia a repeat of the same functlon name
1
func1
$-/test3
Thla ia a repeat of the sane function name
Thla Ia the flrst Gefinltion of the function nane
This ia the end of the acript
func1函数最初的定义工作正常，但重新定义该函数后，后续的函数调用都会使用第二个
定义。
17.2返回值
bashshell会把函数当作一个小型脚本，运行结束时会返回一个退出状态码（参见第11章）
有3种不同的方法来为函数生成退出状态码。
17.2.1默认退出状态码
默认情况下，函数的退出状态码是函数中最后一条命令返回的退出状态码。在函数执行结束
后，可以用标准变量s？来确定函数的退出状态码。
$ cat test4
 teating the exit statua of a function
#1/bin/bash
funcl(){
T1 u9xa-tou e Kedspo 6u/x,o9
1s -1 badfile
echo *teating the function: *
func1
echo *The exit status ls: $?*
$- /test4
---
## Page 375
360
第17章创建函数
testing the function:
trying to Glaplay a non-exlatent fi1e
1s: badfile: No uch ri1e or dlrectory
The exit atatus ls: 1
函数的退出状态码是1，这是因为函数中的最后一条命令没有成功运行。但你无法知道函数
中其他命令中是否成功运行。看下面的例子。
qp18a 1t3 $
 testing the exit status of a functlon
#1/bin/bash
funcl(1{
echo *Thia was a test of a bad cormand*
1α -1 badfile
echo *testing the funetion:*
func1
echo *The exit status la: $?*
$./test4b
1s: badfile: No guch flle or dlrectory
teating the function:
This vaa a test of a bad cormand
The exit status la: 0
这次，由于函数最后一条语句echo运行成功，该函数的退出状态码就是0，尽管其中有一条
命令并没有正常运行。使用函数的默认退出状态码是很危险的。幸运的是，有几种办法可以解决
这个问题。
17.2.2使用return命令
bashshel使用return命令来退出函数并返回特定的退出状态码。return命令允许指定一个
整数值来定义函数的退出状态码，从而提供了一种简单的途径来编程设定函数退出状态码。
5189 1t3 $
 using the return command in a function
#1/bin/bash
functlon db1 {
read -p *Enter a value: * value
echo *doubling the value*
return $[ Svalue * 2 ]
db1
echo
*The new value La S?*
---
## Page 376
17.2返回值
361
db1函数会将svalue变量中用户输人的值翻倍，然后用return命令返回结果。脚本用s?变
量显示了该值。
但当用这种方法从函数中返回值时，要小心了。记住下面两条技巧来避免问题：
口记住，函数一结束就取返回值；
口记住，退出状态码必须是0-255。
如果在用s?变量提取函数返同值之前执行了其他命令，函数的返回值就会丢失。记住，S？
变量会返回执行的最后一条命令的退出状态码。
17
第二个间题界定了返回值的取值范围。由于退出状态码必须小于256，函数的结果必须生成
一个小于256的整数值。任何大于256的值都会产生一个错误值。
$./test5
doubling the value
Enter a value: 200
The nev value is 1
要返回较大的整数值或者字符串值的话，你就不能用这种返回值的方法了。我们在下一节中
将会介绍另一种方法。
17.2.3使用函数输出
正如可以将命令的输出保存到shell变量中一样，你也可以对函数的输出采用同样的处理办
法。可以用这种技术来获得任何类型的函数输出，并将其保存到变量中：
result=*db1 *
这个命令会将db1函数的输出赋给Sresult变量。下面是在脚本中使用这种方法的例子。
$ cat test5b
 using the echo to return a value
1/bin/bash
function dbl {
an[ea 。 1anteA e 1aqug。 d- pea3
[ anes 1s oqoa
result=$ (db1)
echo "The nev value is $result*
q5381/* $
Enter a value1 200
The nev value is 400
$./test5b
Enter a value: 1000
The nev value is 2000