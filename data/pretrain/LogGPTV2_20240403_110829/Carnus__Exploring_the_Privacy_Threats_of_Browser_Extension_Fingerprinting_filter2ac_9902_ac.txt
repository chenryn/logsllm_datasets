ﬁngerprints, which are signiﬁcantly smaller than the DOM-
based ones, as well as more unique and robust, we empirically
found that a lax heuristic of allowing 20% mismatches yields
better results.
E. Behavior-based Fingerprinting: Current State of Affairs
Prior work. Starov and Nikiforakis [52] proposed the
method of detecting DOM-based modiﬁcations for ﬁngerprint-
ing the user’s installed extensions and presented XHound, a
tool for identifying if an extension is detectable based on the
modiﬁcations it performs on the page’s DOM. A followup
study by Trickel et al. [55] also leveraged some functionality
of XHound. While these two studies refer to behavior-based
ﬁngerprinting, they did not actually create any behavior-based
ﬁngerprints automatically or provide technical details on how
these ﬁngerprints can actually be created. In more detail, when
discussing their implementation of checks (that compare DOM
changes to signatures) for detecting extensions, the authors of
XHound explicitly state that “these checks could, in principle,
be automatically generated by parsing XHound’s output but we
leave this automation for future work” [52]. In [55] the authors
manually created behavior-based ﬁngerprints for 20 extensions
to evaluate their proposed countermeasure, and stated that
behavior-based ﬁngerprinting “does not currently scale” and
that ﬁngerprint creation “requires human intelligence and no
recent research has shown how to automatically generate”.
While XHound’s proposal of using DOM-based changes
for ﬁngerprinting is a major contribution, it is important to
1.[{style="display:','none;"','id="hashmenu01"'},{}]
2.[{'class="rmcScreenshotInstalled"'},{}]
Listing 4: Example of behavioral ﬁngerprints that are not
effective against the countermeasures of CloakX.
1. [{'src="//buy.dayanghang.net/inject/common.js"'},
{}]
2. [{'action="/cconcert-login"','style=""'},{'action
="/cpanel-login"'}]
3. [{'value="mata-inactive-38.png"','id="mata-icon-
name"','type="hidden"'},{}]
//This fingerprint will be rewritten to [{'value="
mata-inactive-38.png"', 'type="hidden"'},{}]
4. [{'type="text/javascript"','src="chrome-extension
://nogempgplicnckhcmgjjjgflmipmbgaf/variables-
sharing.js"'},{}]
//This fingerprint will be rewritten to [{'type="
text/javascript"','src="chrome-extension://
nogempgplicnckhcmgjjjgflmipmbgaf/"'},{}]
Listing 5: Example of behavioral ﬁngerprints that remain
effective even after the deployment of CloakX.
highlight all the challenges posed by the full process that our
system needs to address; this includes automatically identify-
ing all the changes in the DOM, generating the signatures for a
given extension, comparing those to the signatures of other ex-
tensions and removing redundant overlapping parts, evaluating
how extensions co-interfere in practice, as well as optimizing
the system to complete the attack in a short time. Our research
ﬁlls this signiﬁcant gap by providing technical details on
how to create behavior-based ﬁngerprints, demonstrating the
automated creation and detection of such ﬁngerprints at scale,
and exploring their effectiveness in practical settings.
Countermeasures. Trickel et al [55] proposed CloakX, a
system that aims to render extension enumeration ineffective
by diversifying the attributes of ﬁngerprints. To prevent ex-
tension detectability, ClockX substitutes the values of ID and
class attributes of the injected DOM nodes with randomized
values. In addition to that, it also injects random tags and
attributes in the page. It does so to: (i) inhibit websites that use
DOM queries (i.e., methods getElementsByClassName(),
getElementsByTagName() and getElementById()) from
identifying speciﬁc elements that are injected by an extension
and (ii) make structural patterns noisy.
In Listing 4 we present two examples of Carnus ﬁnger-
prints that are rendered ineffective by the countermeasures
of CloakX [55]. Since CloakX substitutes the values of the
ID and class attributes, if we exclude these attributes from
our ﬁngerprints,
in Listing 4 becomes
too generic after excluding the ID attribute, while the second
becomes empty after removing the class attribute.
the ﬁrst ﬁngerprint
However, our approach does not simply rely on the iden-
tiﬁcation of speciﬁc elements and tags that are injected,
but analyzes all the changes in the honeysite, term-by-term,
to construct the ﬁngerprints of each extension. Our system
considers all terms added and removed by each extension and,
by design, can detect and ﬁlter out noisy terms that could make
the ﬁngerprints unstable. Listing 5 presents examples of Carnus
ﬁngerprints that remain effective even if a user’s browser
relies on CloakX for protection. The ﬁrst two ﬁngerprints
are not changed at all, while the following two are modiﬁed
but still contain unique terms that lead to their identiﬁcation.
Moreover, CloakX does not alter extensions’ intra-browser
and external communication patterns. We further explore our
attack’s effectiveness against CloakX in Section V.
IV. EXTENSION-BASED INFERENCE ATTACKS
While the set of extensions that are detected by our enu-
meration techniques can be used as a vector for ﬁngerprinting,
these extensions can also reveal previously unknown and
potentially sensitive information about the user. This includes
her personal traits and interests, religious and political beliefs,
demographics, etc. In this section, we present the techniques
employed by Carnus for analyzing extensions, understanding
the functionalities they perform, and ﬁnally, extracting inter-
esting and potentially sensitive information about these users.
This analysis uses as input the extensions’ descriptions and
reviews that our crawler collected from the Chrome Web Store.
Since it is inherently hard, if not impossible, for someone other
than Google to collect information about all the users that have
installed each extension, we use users’ public reviews as a
substitute; This provides a unique view within the extension
ecosystem, allowing for an aggregate analysis on a very large
number of users. Moreover, users are required to install an
extension before being allowed to provide a review, resulting
in a dataset of users that have actually installed the extensions.
Topic classiﬁcation. The ﬁrst phase of our analysis lies in
understanding what functionality is offered by each extension
and then classifying them into distinct categories according to
their type. For this task we use the extensions’ descriptions. At
ﬁrst, we pre-process and “clean” the noisy description text so
as to remove “irrelevant” text that can affect the outcome of the
classiﬁcation (more details below). For the actual classiﬁcation
we use Google’s Natural Language API [4], which is highly
accurate as we outline in Section VI. Google’s API provides 35
categories and 400 subcategories. We manually identiﬁed and
grouped all the categories/subcategories that refer to the same
(or related) topic under a generic label, so as to provide a more
concise categorization of the information that is pertinent to
our analysis. For example, we group together all health-related
categories (i.e., Health Conditions, Neurological Conditions,
etc.), under the label “Health”.
Pre-processing and cleaning descriptions. Typically each
extension is supposed to have two descriptions, a short one
that describes the extension’s functionality in one or two
sentences, and a longer one that provides more details about its
functionality, implemented features, supported websites, etc.
In practice, however, some of the extensions omit one or
both of the descriptions, or contain text that is not useful for
classiﬁcation. The main challenge is identifying which parts of
their text are relevant and useful for classiﬁcation, and which
have information that could potentially lead to incorrect results
and needs to be removed. This task is challenging since there
are no enforced guidelines regarding the content that should
be included in descriptions.
7
We start our processing by detecting the language of each
description and translating non-English ones into English. Text
is then split into paragraphs and sentences, and our system tries
to detect and remove text that corresponds to very short or im-
properly composed sentences. Carnus incorporates the NLTK
library [42] for part-of-speech tagging and removes sentences
that do not contain at least one noun and one verb. Finally,
our system uses NLTK’s implementation of the TextTilting
algorithm [25] to segment the text into multi-paragraph topical
blocks and, since the extensions’ functionality is more likely
to be described at the beginning of the description, it extracts
the ﬁrst two such blocks for classiﬁcation.
Description-based inference. We explore whether the
extensions’ descriptions reveal any sensitive information about
the users, such as their location, language, political inclination
or religious beliefs. For this task, we use the spaCy library [20]
to detect entities that correspond to locations (i.e., countries,
cities), nationalities, languages and ethnic, political or religious
groups. With this approach we detect and verify that 2,260
of the extensions indeed reveal such information about their
users. We note though that this number corresponds to a lower
bound as it depends on the library’s accuracy in detecting
such information, and improving named entity recognition
techniques is out of the scope of this work.
During the veriﬁcation we only consider extensions for
which our process extracts speciﬁc demographic information,
and not cases where additional knowledge is needed for infer-
ring such information. For example, we do not consider entities
that correspond to organizations or companies. Although such
entities could be associated with particular countries, the task
of identifying these associations would require signiﬁcant man-
ual effort. Furthermore, we use public wordlists of religious
and medical terms [17] and create a new wordlist containing
political
to detect extensions with descriptions that
reveal these types of sensitive information.
terms,
Reviewer-based inference attacks. Apart from the de-
scription text, we also utilize users’ reviews for each extension
to extract information that enables the inference of sensitive
user data. First, we explore the feasibility of inferring a user’s
ethnicity based on a ﬁngerprinted extension. Speciﬁcally, we
are motivated by the observation that the users of a certain
extension can exhibit strong ethnic afﬁnity due to its intended
functionality (e.g., an extension for buying subway tickets in a
speciﬁc region). While actual demographic information about
the extensions’ users is obviously not available, the majority
of reviews include the user’s name.
In practice, users can only review an extension in the
Chrome Store after they have installed it in their browser. More
importantly, the reviewers’ names that appear in the reviews
are actually the names from the users’ Google accounts and
not an arbitrary input provided by users at the time of the
review. Furthermore, while in the past reviews could either
be anonymous or include the user’s name, the anonymous
option is no longer allowed (in our dataset we ﬁnd that
only 5.25% of the reviews are anonymous). While this lends
considerable veracity to our dataset, the inferred information
can be misleading if a Google account’s name is a pseudonym.
Reviews with nicknames or ﬁctional names that do not match
entries in our name lists (described below) are discarded, but
fake accounts that use actual names will still be used in our
TABLE I: Number of extensions detected by each technique
employed by Carnus, including those that are unique to each
technique (i.e., cannot be detected by any other technique).
Detection technique
WAR-based
Behavioral (DOM-based)
Inter-communication
Intra-communication
Detected Extensions
Total
25,866
5,793
859
450
Unique
23,046
2,998
181
105
analysis. This is a limitation of our approach as there is no
straightforward method for detecting whether the name used
during the creation of a user’s Google account is fake or not
(e.g., consider a simple scenario where someone named “Jack
Smith” creates a Google account under the name “John Doe”).
Our analysis shows that while certain names do not reveal
much information as they can be commonly found in several
countries (e.g., John) others can provide a strong indication of
the user’s ethnicity. To that end, we use an extensive set of
name-by-origin lists (all names per country/ethnic group) cre-
ated from online resources. We correlate the reviewers’ names
to the lists to identify the countries or ethnic groups where this
name appears, and construct a vector of associated ethnicities
(e.g., the name “Deepika” is predominantly found in India
and Nepal). As aforementioned, fake names or pseudonyms
that do not match a known name from our list are discarded.
By combining the ethnicity vectors of the users that have
installed a speciﬁc extension, we create a breakdown of the
demographic information of each extension’s user population.
Extensions can attract a wildly diverse set of users and,
thus, not all of them are useful for inferring a targeted user’s
characteristics. As such, we need a method to ﬁlter out such
extensions and focus on those that have a more consistent user
proﬁle. To identify suitable extensions, we use the Shannon-
Wiener index [49], which is commonly used in ecological and
biological studies for calculating the richness and diversity of
a given species, to pinpoint extensions with predominant user
ethnicities. An important dimension of the privacy invasiveness
of this approach is that it can bypass common technical mea-
sures taken by users to hide their country of origin or ethnicity
(i.e., VPNs and proxies). Finally, we map users’ names to
their gender, and discard ambiguous names associated with
both male and female. Here we only need to set a prevalence
threshold for deciding which extensions are useful for this type
of inference; e.g., depending on the scenario, an attacker might
consider any extension where one gender accounts for at least
80% of the users as sufﬁcient conﬁdence.
V. EXPERIMENTAL EVALUATION: FINGERPRINTS
Extension enumeration. We run Carnus on a collection
of 102,482 extensions and ﬁnd that 29,428 unique extensions
can be identiﬁed by our system. We ﬁnd that WAR-based
ﬁngerprints can detect 25,866, of which 23,046 cannot be iden-
tiﬁed through other techniques. Behavior-based ﬁngerprints
are the next most effective approach with 5,793 detections,
of which 2,998 are not detectable otherwise. Through inter-
communication patterns we detect 859 extensions and through
8
Fig. 2: Number of installations for all the
extensions in our dataset.
Fig. 3: Correlation of detectability of ex-
tensions and their relative popularity.
Fig. 4: Extensions’ behavioral ﬁngerprint
sizes. The blue lines denote where our
mismatch thresholds change.
TABLE II: Comparison to previous studies.
Behavioral (DOM)
Paper
[52]
[47]
[24]
[44] WAR side-channel
Attack
WAR
WAR
[46]
Ours
WAR revelation
Multi-class
Platform Extensions Detectable
Chrome
Chrome
Firefox
Chrome
Chrome
Firefox
Chrome
Firefox
Chrome
920*
12,154
1,003
5,107
10,620
10,620
1,932**
1,379
29,428
10,000
43,429
14,896
13,000