accuracy with a tolerance window, reaction time, recovery
rate, and average risk (Section V-D). These metrics measure
the impact of detection accuracy and latency on the success-
ful hazard mitigation and prevention of harm to patients.
• Evaluating the proposed context-aware monitor using two
different closed-loop APS systems and simulators, Ope-
nAPS with Glucosym and Basal-Bolus with UVA-Padova,
in comparison to several baseline monitors developed using
medical guidelines, model predictive control (MPC), and
machine learning (ML). Our results (Section V-E) show
that the patient-speciﬁc safety monitor developed with this
approach demonstrates up to 1.4 times increase in aver-
age prediction accuracy (F1 score) over baseline monitors,
reduces false-positive and false-negative rates, and enables
hazard mitigation with a 54% success rate while decreasing
the average risk for patients.
II. PRELIMINARIES
CPS are constructed by the tight integration of cyber com-
ponents and software with hardware devices and the physical
world. The core of the MCPS are the autonomous controllers
that connect the human operators (e.g., physicians, nurses) and
cyber networks with the physical components (e.g., patient’s
body) (Fig. 1a). The controller’s goal
to the
constantly changing and uncertain physical environment and
the operator’s commands by estimating the system’s current
state based on sensor measurements and changing the physical
state by sending control commands to the actuators. In such
systems, safety hazards and accidents might happen due to
unsafe commands issued by the controller because of acciden-
tal faults or malicious attacks acting on the sensor data, the
controller (algorithm, software, hardware), or the actuators.
is to adapt
Vulnerable Controllers: Past studies have emphasized the
risks of security attacks that compromise the communication
channels in medical devices [2], [3], [5]. Safety-critical faults
or attacks on sensor data, before they are delivered to the
controller, can be detected by previously proposed strategies
like redundancy [27], classic Sequential Probability Ratio
Test (SPRT) of Wald [28], change detection techniques (e.g.,
Authorized licensed use limited to: Tsinghua University. Downloaded on October 11,2021 at 09:25:48 UTC from IEEE Xplore.  Restrictions apply. 
485
Fig. 2: Framework for Design of Context-aware Safety Monitors
context-dependent control actions and human-cyber-physical
interactions that will lead to safety hazards. However, attempts
at providing formal frameworks for models such as STAMP
[43] [44], have still left gaps between the high-level safety
requirements identiﬁed from hazard analysis and the low-level
formal speciﬁcation of safety properties that can be used for
run-time monitoring and safety assurance. We leverage the
control-theoretic notion of system context from the STAMP
accident model [40] and develop a formal framework for
the design of context-aware hazard detection and mitigation
mechanisms. Our proposed framework enables the formal
speciﬁcation of potentially unsafe control actions given dif-
ferent physical contexts, which can be further reﬁned based
on simulated or real patient data to generate monitor logic.
III. SAFETY CONTEXT SPECIFICATION AND LEARNING
Our overall methodology for the design of context-aware
safety monitors starts with the speciﬁcation of system context
driven by aspects of the STAMP accident model, formalization
of the context speciﬁcation using STL, and its optimization
through learning from system simulation traces (Fig. 2). We
present a combined model and data-driven approach to provide
a common framework to engineers and clinicians for the spec-
iﬁcation of safety requirements based on domain knowledge
and to enable the automated reﬁnement of safety properties to
be checked at run-time using patient data.
A. Model of System Dynamics
1) State Space and Control Actions: A typical MCPS
controller makes an estimation of the physical system state
and patient status through sensor measurements in each control
loop, represented by xt = (x1t , . . . , xnt ) ∈ Rn, where xit are
continuous or discrete variables. At a given control cycle t, the
controller decides on a control action, ut, from a ﬁnite set of
possible control actions U = {u1, . . . , ur}, based on current
system state xt and sends it to the actuators. Upon execution
of the issued control command by the actuators, the physical
system will transition to a new state xt+1 in the state space.
2) Regions of Operation: We assume there are three mutu-
ally exclusive regions of the state space: (i) the hazardous
region Xh, which could be further partitioned into regions
associated with speciﬁc types of safety hazards Hi, and (ii)
the safe/desirable region X∗; and (iii) the possibly hazardous
region X∗,≥} βi or its combinations, where the
inequality thresholds βi deﬁne the boundary of the subset in
that dimension ρ(μi(xt)), and for discrete variables takes the
form (μi(xt) = α1)∨. . .∨(μi(xt) = αp), in which αi deﬁnes
a speciﬁc state or set of states.
) (cid:3)→ X∗ is
Similarly, STL formula for HMS (ρ(μ(xt)), uc
t
))S(ϕ1(μ1(xt))∧ . . .∧ ϕm(μm(xt)))) (2)
G[t0,te]((F[0,ts](uc
∈ uρ
t
where F is the eventually operator ♦ indicating uc
should be taken within period ts since (denoted by S operator)
the system enters context (ϕ1(μ1(xt)) ∧ . . . ∧ ϕm(μm(xt))).
This should hold globally during [t0, te].
The time parameter ts speciﬁes the requirement for the latest
possible time a mitigation action should be initiated after a
potential UCA is detected to prevent hazards. This time is
dependent on many factors, including the context ρ(μ(xt)) and
∈ uρ. The
the nature of the various safe control actions uc
t
speciﬁcs of determining this time requirement, in general, are
beyond the scope of this paper. The estimated time between
activation of a fault in the system and the occurrence of a
hazard (deﬁned as Time-to-Hazard in Section V) can provide
an upper bound for specifying this time requirement.
2) Optimization of STL Formulas: The unknown boundary
parameters βi
in the STL formulas can be learned from
actual or simulated data from the system using ML methods
[48] [49]. Existing STL learning approaches either rely on
classiﬁcation methods based on both positive and negative
examples or use system simulation and experimentation for
learning from falsiﬁcation of STL properties [50]. In this work,
we use software FI to generate hazardous data traces that
t
potentially violate the STL formulas for SCS and use them
as negative examples for learning unknown STL parameters
and for adversarial training of the monitor. As shown in Fig.
2, patient proﬁles and data traces from real system operation
can be used for the development of simulation models and
faulty data traces and active learning in a real application.
(cid:2)
loss(r); s.t.
Given a SCS STL formula φ (Eq. 1) and its corresponding
UCAS, (ρ(μ(xt)), ut, Hi), we deﬁne an optimization problem
for learning the values of the thresholds βi from a set of data
traces D. If the STL formula φh for UCAS (Eq. 3), that has the
same thresholds βi as φ, is satisﬁed by a subset of hazardous
traces H ⊂ D, the degree of satisﬁability of φh for a data
trace d ∈ H at time t can be measured by a robustness metric
r = μi(d(t)) − βi (for predicate μi(xt) ≥ βi). The goal of
optimization is to minimize the absolute value of r as a loss
function over all traces in H to achieve tight properties [51]:
minimize
(3)
r = μi(d(t)) − βi (cid:4) 0,∀d ∈ H
φh = ϕ1(μ1(x(t))) ∧ . . . ∧ ϕm(μm(d(t))) ∧ ut =⇒ ♦Xh
This metric is similar to several widely-used loss functions
in ML (e.g., mean squared error (MSE) and mean absolute
error (MAE)) for measuring parameter estimation errors. How-
ever, as shown in Fig. 3a, when using such loss functions, the
loss values can be small positive numbers near the minimum,
but
the actual robustness values might be small negative
numbers that violate the STL formulas. A previous work,
TeLEx [51], addressed this problem by introducing a tightness
function [50] to measure loss (Fig. 3b), but the thresholds
learned using such a loss function are not tight enough without
manually adjusting. In this paper, we introduce a Tight Mean
Exponential Error (TMEE) loss function, as shown below:
], r = μi(d(t)) − βi
loss(r) = E[e−r + r −
(4)
H
1
1 + e−2r
which learns tight thresholds while ensuring that safety speci-
ﬁcation STL formulas are not violated by normal data traces.
We used an extension of the Limited-memory Broyden-
Fletcher-Goldfarb-Shanno algorithm called L-BFGS-B [22],
an optimization algorithm in the family of quasi-Newton meth-
ods for parameter estimation. Unlike typical quasi-Newton
methods [52] that calculate the inverse of the Hessian matrix
directly, we used two-loop recursion [53] to estimate it.
The L-BFGS-B algorithm then used the gradient of the loss
function and the estimated inverse Hessian matrix to guide the
optimization.
Our preliminary experiments of learning thresholds for a
population-based monitor using the TeLEx loss function could
not always converge to a solution. Also, the ﬁnal context-
aware monitor achieved lower accuracy than a monitor with
tight thresholds learned using our optimization approach.
For the synthesis of a context-aware mitigation mechanism
based on HMS (Equation (2)), we need to reﬁne our STL
learning method to learn the unknown time parameter ts in
addition to safety thresholds βi. In this paper, we mainly focus
Authorized licensed use limited to: Tsinghua University. Downloaded on October 11,2021 at 09:25:48 UTC from IEEE Xplore.  Restrictions apply. 
487
Fig. 3: Loss Functions of (a) MSE and MAE, (b) TeLEx and Our
Proposed Tight Mean Exponential Error (TMEE) Function
on the evaluation of hazard prediction and use a ﬁxed non-
context-dependent mitigation algorithm for a fair comparison
among different monitors (see Algorithm 1 in Section IV-D).
IV. CASE STUDY OF ARTIFICIAL PANCREAS SYSTEMS
To evaluate the effectiveness of our approach, we applied
our methodology to the case of developing run-time monitors
for Artiﬁcial Pancreas Systems (APS). APS are responsible
for regulating Blood Glucose (BG) dynamics by monitoring
BG concentration in the patient’s body through sensor data
collected from a Continuous Glucose Monitor (CGM) and
providing the right insulin rate to the patient through a pump
(Fig. 4a). The control software estimates the current patient
status (e.g., BG value, Insulin on Board (IOB)) and calculates
the next recommended insulin value for the patient (Fig. 4b).
The U.S. Food and Drug Administration (FDA) recom-
mends that APS should be able to adequately mitigate the
risks associated with erroneous readings by the CGM sensors
and inappropriate doses delivered by the insulin pump [54]. It
also suggests the simulation and evaluation of the impact of
such errors during the device development process.
A. Closed-loop Simulation
To evaluate the effect of the system on patients through
simulation, we developed a closed-loop simulation testbed
by integrating two widely-used APS controllers with patient
glucose simulators. Our main case study is the OpenAPS [23]
control software with the Glucosym patient simulator [25]
(Fig. 5a). The Glucosym simulator contains patient models
derived from data collected from 10 actual adult patients with
Type I diabetes mellitus aged 42.5 ± 11.5 years [55]. To
further test the generalization of the proposed approach, we
also used the state-of-the-art UVA-Padova Type 1 Diabetes
Simulator S2013 (T1DS2013) [26], which contains 30 virtual
patients and has been accepted by the FDA for pre-clinical
testing, together with a Basal-Bolus controller [24].
Fig. 4: (a) Artiﬁcial Pancreas System, (b) A Typical APS Controller.
B. Safety Context Speciﬁcation (SCS)
We ﬁrst identiﬁed the set of accidents and the safety hazards
that might happen due to UCAs issued by an APS controller.
Accidents: In Type I diabetes, which the APS is designed
for, there are two main accidents that we are concerned about:
• A1: Complications from hypoglycemia (BG level too
low), including seizure, loss of consciousness, and death.
• A2: Complications from hyperglycemia (BG level too