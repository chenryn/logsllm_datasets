(cid:28)(cid:22)(cid:35)(cid:30)
(cid:27)(cid:22)(cid:27)(cid:28)
(cid:27)(cid:22)(cid:27)(cid:32)
(cid:27)(cid:22)(cid:27)(cid:30)
(cid:27)(cid:22)(cid:28)(cid:35)
(cid:27)(cid:22)(cid:27)(cid:28)
(cid:27)(cid:22)(cid:27)(cid:29)
(cid:34)(cid:22)(cid:34)(cid:34)
(cid:29)(cid:22)(cid:34)(cid:34)
(cid:28)(cid:22)(cid:35)(cid:31)
(cid:29)(cid:22)(cid:30)(cid:27)
(cid:30)(cid:22)(cid:27)(cid:29)
(cid:28)(cid:22)(cid:34)(cid:36)
(cid:28)(cid:22)(cid:35)(cid:30)
(cid:28)(cid:22)(cid:28)(cid:28)
(cid:27)(cid:22)(cid:35)(cid:33)
(cid:27)(cid:22)(cid:36)(cid:29)
(cid:30)(cid:22)(cid:35)(cid:36)
(cid:30)(cid:22)(cid:32)(cid:35)
(cid:31)(cid:22)(cid:27)(cid:33)
(cid:30)(cid:22)(cid:33)(cid:33)
(cid:31)(cid:22)(cid:28)(cid:31)
(cid:28)(cid:22)(cid:35)(cid:31)
(cid:28)(cid:22)(cid:31)(cid:32)
(cid:28)(cid:22)(cid:34)(cid:34)
(cid:28)(cid:22)(cid:31)(cid:34)
(cid:28)(cid:22)(cid:35)(cid:31)
(cid:27)(cid:22)(cid:29)(cid:27)
(cid:2)(cid:4)(cid:3)(cid:4)(cid:8)(cid:1)
(cid:2)(cid:5)(cid:3)(cid:5)(cid:7)(cid:1)
(cid:28)(cid:31)(cid:22)(cid:27)(cid:27)
(cid:28)(cid:29)(cid:22)(cid:27)(cid:27)
(cid:28)(cid:27)(cid:22)(cid:27)(cid:27)
(cid:35)(cid:22)(cid:27)(cid:27)
(cid:33)(cid:22)(cid:27)(cid:27)
(cid:31)(cid:22)(cid:27)(cid:27)
(cid:29)(cid:22)(cid:27)(cid:27)
(cid:27)(cid:22)(cid:27)(cid:27)
(cid:2)(cid:6)(cid:3)(cid:4)(cid:4)(cid:1)
Fig. 4: Unixbench performance overhead for unixbench bina-
ries, including runtime, peak resident memory and ﬁle size
overhead (left: user tests, right: system tests)
programs. Both resutls indicate negligible space overhead for
NORAX system. As explained in § III-C, the space overhead
is proportionate to the amount of embedded data as well as
their references. On the other hand, the NORAX header incurs
a ﬁxed amount of space overhead. If not much embedded
data exist, the references and the header become the major
contributor to the space overhead.
Security Impact: The goal of NORAX is to retroﬁt
the
R ⊕ X property into ARM64 COTS binaries. It makes code
sections unreadable and redirects references of embedded data
to duplicate data in read-only memory pages. However, since
we duplicate embedded data, they are in theory still reusable
by adversaries. we conduct a gadget searching experiment in
the duplicated embedded data appended at the end of the
converted binaries. Table X shows the number of available
gadgets we found in those data. As the result shows, available
gadgets are actually very rare even in the binaries that have
a lot of embedded data such as libm.so, we believe this
is because the majority of those duplicated bytes are by
themselves not decodable. Also note that the shown numbers
are actually an upper bound of the available gadgets. Because,
in the executable code section, where the original embedded
data reside, the bytes that form the gadgets may not be placed
next to each other.
D. Practicality Assessment
Szekeres et al. [28] presented three main requirements for
a security solution to be practical:
• Protection: The security feature must enforce a strict
policy and has relatively low false positives and false
negatives.
• Cost: A practical system should incur negligible runtime
slowdown and space overhead.
315
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:26:33 UTC from IEEE Xplore.  Restrictions apply. 
• Compatibility: The security system should not depend
on the source code availability. In addition, it should
be able to handle different modules individually and the
processed modules should work with those unmodiﬁed
ones.
We examine if NORAX meets these three criteria. NORAX
enforces the R ⊕ X policy, similar to previous defenses that
needed source code [8], [9], which is the strongest defense
along the line of thwarting direct code read. Regarding the
cost, NORAX only introduces ˜1% slowdown for the majority
of the test cases, ˜2% extra memory and ˜4% disk consumptions,
showing its negligible cost. Finally, NORAX can protect COTS
binaries which come without any auxiliary information, and
it converts and loads different modules individually. Those
converted modules can run seamlessly with the unmodiﬁed
ones, indicating good compatibility.
VI. RELATED WORK
A. Code Reuse Attack Mitigations
Over the years, there has been an ongoing race between code
reuse attacks (or ROP in short) and corresponding defense
countermeasures. Such code reuse attacks keep evolving into
new forms with more complex attack steps (e.g., Blind-ROP
[2], JIT-ROP [1]). To defend against them, three categories of
countermeasures (e.g., ASLR, CFI, XOM) have been proposed
from different perspectives. Here we brieﬂy review these de-
fenses, especially execute-only memory, which is the category
of this paper.
Control Flow Integrity (CFI): Enforcing CFI is a general
defense against attacks that hijack control ﬂows, including
code reuse attacks. Proposed a decade ago by Abadi et al. [29],
CFI has been tuned by researchers over the years [30]–[35],
from its early form coarse-grained CFI to its current mature
appearance as ﬁne-grained CFI. The fundamental difference is
that a coarse-grained CFI allows forward edges in the control
ﬂow graph (CFG) to point at any node in the graph and back-
ward edges to return to any call preceded destination, whilst a
ﬁne-grained CFI has a more precise set of destinations for both
forward and backward edges. bin-CFI [36] and CCFIR [37]
enforce the coarse-grained CFI policy on Linux and windows
COTS binaries respectively. Unfortunately, enforcing a ﬁne-
grained CFI requires a more precise CFG to be built as the
ground truth, which is difﬁcult to obtain in practice based on
static analysis, even when source code is available. In addition,
researchers found that it is still possible to launch code reuse
attacks when ﬁne-grained CFI solution is in place due to the
difﬁculty of extracting a perfect CFG in practice [38]–[41].
Address Space Layout Randomization (ASLR): ASLR is a
practical and popular defense deployed in modern operating
systems to thwart code reuse attacks [42]. It randomizes the
memory address and makes the locations of ROP gadgets
unpredictable. However, the de-facto ASLR only randomizes
the base address of code pages. It becomes ineffective when
facing recent memory-disclosure-based code reuse attacks [1],
[2]. Such attack explores the address space on-the-ﬂy to ﬁnd
ROP gadgets via a memory disclosure vulnerability. Although
ﬁne-grained ASLR increases the entropy of randomization,
such as compile-time code randomization [43] and load-time
randomization [3], [5]–[7], the memory disclosure attack is
not directly addressed, since code pages can still be read
by attackers [1]. Runtime randomization [44]–[46] is thus
proposed to introduce more uncertainty into the program’s
address space. Their effectiveness depends on who acts faster,
attacker or the re-randomization mechanism. Due to the need
of tracking all the code and data objects and correct their
references, these solutions either require compiler’s assist or
rely on runtime translation, which limit their applications and
incur non-trivial overhead.
eXecute-only Memory (XOM): To address the memory
disclosure attack, researchers proposed execute-only but non-
readable (R ⊕ X) memory pages to hinder the possibility
of locating reusable code (or ROP gadgets). However, one
fundamental challenge to achieve this defense is that it is non-
trivial to identify and separate legitimate data read operations
in code pages.
When source code is available, existing works like Readac-
tor [8], [9] and LR2 [10] rely on compilers to separate
data reads from code pages and then enforcing XOM via
either hardware-based virtualization or software-based address
masking. On the other hand, for COTS binaries, which are
more common in the real-world scenario, XnR [11] blocks
direct memory disclosure by modifying the page fault handler
in operating systems to check whether a memory read is inside
a code or data region of a process. However, it cannot handle
embedded data mixed in code region mentioned in Section
III-A. HideM [47] utilizes split-TLB features in AMD proces-
sors to direct code and data access to different physical pages
to prevent reading code. Unfortunately, recent processors no
longer support split-TLB.
Unlike previous works that mostly target x86, NORAX is
designed to transform legacy COTS to support XOM on top
of latest AArch64 processors. In particular, NORAX focuses
on the code-data separation problem of COTS binary on ARM,
which has not been systematically investigated before.
Destructive Code Read: Apart from execute-only memory,
a different type of approach is to prevent already-disclosed
executable memory from being executed. Rather than being
execute-only, code segments are not executable after their
316
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:26:33 UTC from IEEE Xplore.  Restrictions apply. 
addresses and values have been leaked. Heisenbyte [13] and
NEAR [14] achieve this by overwriting the values of the
disclosed code addresses with random values (i.e., invalid
opcodes), while keeping the disclosed values in different
memory pages for legitimate data reads. Unfortunately, such
approach has to monitor every read access to the code pages,
which incurs more page faults and high overhead. In addition,
Snow et al. show that such destructive code read can still be
bypassed by reloading multiple code copies or inferring code
layout without reading it [15]. Since NORAX does not allow
the code regions to be read at all, it is not vulnerable to such
attacks.
B. Static Binary Analyses
In this subsection, we compare COTS solutions that have
analysis goal overlap with NORAX.
Executable Data Identiﬁcation: Zhang et al. [36] and Tang
et al. [13] develop algorithms to identify jump tables embed-
ded in the code using heuristics based on well-deﬁned data
structure patterns. This result is not sufﬁcient for R ⊕ X
policy enforcement. NEAR [14] and HideM [47] adopt a
more aggressive analysis approach, computing CFG based
on similar heuristics for the analyzed binary, and mark all
the unknown regions as data. Although this approach has
merits such as being architecture-generic and is able to tackle
x86-speciﬁc challenges like various-length instructions, it in-
evitably incurs relatively high false positives had the CFG
construction process miss any indirect control ﬂow transfer
target. Making a different design choice, NORAX does not
rely on overly aggressive approach or assumptions about data
structures. Instead, its analysis exploits the basic semantics of
AArch64 ISA and achieves a larger and more precise coverage.
Executable Data Access Check: Similar to HideM [47],
NORAX undertakes the route of whitelisting the range of
executable data. This is a strategy to achieve maximum com-
patibility in the case of missing reference update. However,
HideM does not impose restrictions on the accessing subject,
plus the fact that it has more false positives on identifying
embedded data which exposes more gadgets, hence weakening
the security. On the contrary, NORAX enforces conﬁgurable
data-read policy to ensure only the legitimate reads can
succeed, such as embedded data should only be read by (over-
approximated) hosting function, and linker-related sections
should only be read by the dynamic linker.
VII. DISCUSSIONS
A. Compatibility with Other COTS Hardening Solutions
Execute-only memory alone cannot defend against the ever-
evolving code reuse attacks. Thus, we bear in mind that it is
important to design NORAX to be compatible with other COTS
hardening solutions that provide ﬁne-grained randomization
and control ﬂow integrity. Following our design principles
(§ III-A), NORAX makes minimum structural changes to
binaries programs, which do not preclude running other binary
analysis and hardening solutions. For example, the size and
location of code and data objects remain unchanged. The
control ﬂow properties are preserved. As a result, changes
by NORAX are self-contained and will not interfere with the
operations of those other solutions.
We examine two representative binary hardening solutions
as examples, In-place randomization (IPR) [4] and bin-CFI
[36]. IPR is a ﬁne-grained ASLR solution and can be used
in tandem with NORAX. It has three transformation passes.
First, it substitutes instructions with semantically equivalent
ones. The only instruction NORAX could replace is adr used
to reference .text inline data. Since adr is the only instruction
available in AArch64 ISA that can obtain PC-relative reference
directly, IPR does not have any alternative candidates to
use. Second, IPR reorders instructions sequences that do not
have dependencies. NORAX is transparent to such reordering
because it does not alter or assume instruction sequences.
Third, IPR performs register reassignments. NORAX preserves
register usages and thus does not affect register reassignments.
Bin-CFI is a coarse-grained CFI solution for COTS binaries
and conceptually compatible with NORAX. It performs indirect
control ﬂow (ICF) analysis and then instruments all the ICF
transfer instructions to ensure they follow control ﬂow graphs.
NORAX only modiﬁes data reference and data accessing in-
structions and does not impact CFG. Note that albeit designed