the initialization stage when two devices initiate a connec-
tion. Slaves apply an offset to align their local clock to the
master clock. The channel hopping pattern is determined by
the master’s clock and Bluetooth Device Address BDADDR.
A BDADDR consists of a Lower-Address-Part (LAP), a
Upper-Address-Part (UAP), and a Non-signiﬁcant-Address-
Part (NAP). The LAP of the master device is used to derive
the access code for every packet in the piconet and can be
extracted from the header during the frame synchronization
stage. The UAP of the master device is used to initialize the
generation of Header Error Check (HEC), which is whitened
together with the rest of the header. As the UAP is not
explicitly transmitted and combined with frequency hopping
over 79 channels, BTC was considered to be secure in terms
of not revealing devices MAC address. However, this has been
recently shown not to be true [11].
B. Bluetooth Low Energy (BLE) Overview
BLE operates over the same spectrum as BTC and has a
similar physical layer but optimized for energy. BLE has two
modulation schemes, using GFSK: LE 1M and LE Coded with
1Msym/s, and LE 2M with 2Msym/s. BLE supports data bit
rates of 1Mbps (LE 1M), 500 kbps and 125kbps (LE Coded),
and 2Mbps (LE 2M). The spectrum [2.4 − 2.4835]GHz is
divided into 40 RF channels with 2MHz spacing. The channels
center frequencies are deﬁned as fk = (2402 + k × 2) MHz,
k ∈ [0, 39]. There are two categories of channels (1) primary
advertising (37, 38, 39) and general purpose (0,··· , 36).
Unlike BTC, the multi-access scheme of BLE divides time
into units called events. There are ﬁve types of events, Adver-
tising, Extended Advertising, Periodic Advertising, Connection
and Isochronous. We focus on the advertising events for
linking BLE to BTC. Advertising events are an important
feature speciﬁc to BLE. By broadcasting an advertising packet,
a BLE device announces its offering of a service. In this
Authorized licensed use limited to: Tsinghua University. Downloaded on February 25,2022 at 12:26:04 UTC from IEEE Xplore.  Restrictions apply. 
1319
Each user is assigned a random 16 byte cryptographic key
called the Temporary Exposure Key (T EK). This key is setup
to roll every day for every user of the system. The T EK
is used to generate two identiﬁers called Rolling Proximity
Identiﬁer (RP I) and Associated Encrypted Metadata (AEM)
by encrypting the epoch time and a constant using the AES
algorithm. In case of the AEM, the RP I is also encrypted to
link the identiﬁers together. The generated RP I and AEM are
broadcast to devices in proximity using BLE advertisements.
Another technique that the service utilizes to preserve privacy
is generating new RP I and AEM values whenever the
advertiser’s BLE MAC address is randomized. This way, an
attacker is unable to link the identiﬁers with a device. The
T EK, RP I, and AEM are all required to determine whether
a user was in contact with an infected user. The infected user
uploads their last 14 T EKs to a server. These T EKs (called
Diagnosis Keys) are combined and downloaded on all devices
and then used to generate RP Is and AEMs. A user is alerted
of possible contact if their device contains a minimum count of
infected RP Is and AEMs. We refer the readers to the design
documentation for a detailed description [14]. Although other
apps use other cryptographic protocols and algorithms, they
all use the same underlying Android BLE implementation for
communication, the subject of our analysis.
Apple Find My: Apple introduced the Find My feature to
provide customers with a tool
to ﬁnd their devices in a
privacy-preserving manner [30], [31]. To perform its intended
function, the protocol requires the user to own two Apple
devices that share a private key known only to those devices.
Corresponding to the private key, the devices generate transient
public keys that are broadcast over BLE advertisements. Both
private and public keys do not reveal any information about
the device owner. In order to mitigate linkability, these public
keys change whenever the advertiser’s BLE MAC address is
randomized. The transient public keys broadcast using BLE
advertisements are received by other devices in proximity
which use their own location, encrypt the location using the
received public key, and then upload the encrypted location
and public key’s hash value to the cloud. When a user realizes
that their device is missing, they use the other device to upload
the hash values of public keys as identiﬁers and download all
the encrypted locations corresponding to those hash values.
These encrypted locations are then decrypted using the private
key to reveal the location of the lost device.
III. SYSTEM AND ATTACKER MODEL
A. System Model: The Bluetooth (BTC+BLE) Stack
We consider scenarios that are common among smartphone
users. Bluetooth is embedded in virtually every phone, car,
laptop, mouse, keyboard, game console, and wearable device
(billions of devices ship every year
[32]). Its services range
from communication with peripherals, audio and video stream-
ing, and even transmission of health information (e.g., ﬁtness
trackers). We assume a smartphone user that regularly uses
Bluetooth on their device for such services. For the purpose
of the attack, it does not matter how the services are used,
Fig. 3: Illustration of BLE advertising events timing (src. [10]).
scheme, the advertising device is called advertiser and listening
devices are scanners. The scanners either ignore or react to
advertisements. An advertising event
is deﬁned as a time
window where advertising packets and their responses occur.
Figure 2 illustrates advertising packets in the same advertising
events with the same information transmitted on different
advertising channels. The ﬁrst advertising packet in an adver-
tising event is also the start of the event. The time between two
advertising events is composed of a selected ﬁxed duration,
called advertising interval and is a multiple of 625µs in range
20ms to 10485.759375s; and a delay, called advertising delay
which is random in a range of 0ms to 10ms to avoid collision
among advertisements from different advertisers. Figure 3
shows the timing spacing between advertising events.
BLE incorporates a MAC address randomization scheme,
triggered after a period of time or whenever a new advertising
or connection is initialized. The standard recommends that
a random MAC address is re-generated every 15 minutes.
This mechanism improves the protection against tracking but
vulnerabilities have been shown for certain device implemen-
tations [12].
C. BLE-Based Privacy-Preserving Protocols
We focus on privacy-preserving protocols like Contact Trac-
ing and Apple Find My, because these protocols explicitly rely
on the unlinkability (randomization) of BLE advertisements.
Contact Tracing Apps: Digital contact
tracing serves an
important role in the current COVID-19 pandemic for tracking
the spread of the virus [13]. Concerns about privacy led to
several initiatives to design privacy-preserving contact tracing
systems. Apple and Google teamed-up to design and embed
an “Exposure Notiﬁcation” protocol
in iOS and Android
platforms [14]. Around the world, other groups proposed
precursor designs, alternatives, and complementing solutions,
including university consortia and research labs (e.g., DP-
3T [15], PACT [16], [17] and PACT [18]). A common privacy
goal of these solutions is to dissociate any information that
might connect a smartphone owner’s device to the contact
tracing information. Several studies investigated privacy con-
cerns arising from contact tracing apps [19]–[24] and some
additional protections were also proposed [21], [25]. Several
contact
tracing apps (e.g., Immuni [26], SwissCovid [27],
COVID Alert [28], California COVID Notify [29]) were
developed using the Exposure Notiﬁcation Service.
The Exposure Notiﬁcation service provides privacy through
the use of non-personal cryptographically generated identiﬁers.
Authorized licensed use limited to: Tsinghua University. Downloaded on February 25,2022 at 12:26:04 UTC from IEEE Xplore.  Restrictions apply. 
1320
timing information and ﬁnally discerning which transmissions
are coming from the same device. The key components and
ﬂow of the attack is outlined in Figure 4.
First, our attack system decodes the RF samples to si-
multaneously extract
information of both BTC and BLE
transmissions. For BTC, this includes the global BDADDR
and the timestamp of each packet received. For BLE, the
information includes the BLE advertisements (BLEADV) and
their timestamps. The collected information is then processed
to derive a timing relation between each pair of BDADDR and
BLEADV. The timing relation, in this context, is the alignment
quantiﬁcation between the clock of BTC and the clock of
BLE. Intuitively, if a device supports both BTC and BLE,
their modules are combined in the same Bluetooth chip and
their time reference is derived from the same clock source.
The inference algorithm is the core of the attack. It com-
putes the time alignment between BTC and BLE transmissions
addressing the peculiarities of BLE as described in sec-
tion IV-D, such as irregular channel offsets. We ﬁrst show
preliminary results in Section IV-B, and delve into the details
of the attack in Section V.
B. Coupling of BTC and BLE Advertisements
The key premise of the attack is that BLE advertisements
can be linked to BTC transmissions, which themselves reveal
the device BDADDR. Our initial guess was that given the
similar frequency-hopping pattern of BTC and BLE (1,600
hops per second) and the high integration of Bluetooth SoCs,
it is likely that both radios are driven by a common clock. We
conducted a set of basic experiments to determine the nature
of coupling between BTC and BLE advertisements.
The results of our preliminary analysis are shown in Fig-
ure 5. Details of the experimental setup are in Section VI.
These results compare the time alignment of two different sets
of BLE advertisements with the same set of BTC transmis-
sions. The ﬁrst set of BLE advertisements are transmitted from
the same device as the BTC transmissions (our test device),
while the second set corresponds to the BLE advertisements
of another device. Figure 5a shows the alignment of BTC
transmissions with BLE originating from the same device
(modulo 625µs), while Figure 5b shows the alignment of
second BLE set from other device. This result conﬁrmed our
intuition of coupling between BLE advertisements and BTC
emissions (i.e., either ﬁxed low offset or ﬁxed offset around
±110µs). In Section V, we show that these offsets result from
irregular transmissions, scanning request-respond procedure,
channel impairments, etc. The offset to the other device is
non-constant. Yet, it is not trivial to infer the coupling since
there are multiple ﬁxed-offset patterns (two in Figure 5a). As
we do not have visibility into driver implementations, we have
not been able to conﬁrm our intuition for the reason of these
offset patterns. We leave the detailed analysis of this artifact
for future work.
Another observation during preliminary analysis was that
even when BLE MAC randomization occurred, the timing of
advertising events remained the same since the randomization
Fig. 4: Flow Diagram for the Attack System.
what data is exchanged, if a session is active, which apps are
used, or the mode of transmission.
Current Android and iOS devices support both BTC and
BLE. BLE is used by many services for data transmission and
advertisements. Examples of some services include Samsung
Health, Apple Find My, Apple iBeacon, and Apple/Google
Exposure Notiﬁcation (contact-tracing). We focus on BLE
advertisements, the communication medium used by the ex-
amples above. We assume the advertisements are running in
the background. This is now a common scenario for millions
of users that run the aforementioned apps on their smartphones
as these apps start broadcasting as soon as the device is booted
and keep broadcasting at all times.
B. Attacker Model: Abusing BTC+BLE Timing Information
We assume an attacker in proximity to the victim(s). The
attacker is able to record and process RF (I&Q) samples in the
2.4GHz band. This can be achieved using a software deﬁned
radio (SDR) or even mobile phones supporting the Nexmon
framework [33]. The attacker records relevant BTC and BLE
packets and their timestamps. This might include public keys
for Apple Find My, RP Is from Exposure Notiﬁcation, and
user identiﬁers [34]. We also assume that
the attacker is
able to retrieve public information for each of the considered
systems. In the case of Exposure Notiﬁcation, this includes the
published Diagnostic Keys of infected users. For Apple Find
My, it would include the encrypted location given the device
randomized public key hash. The attacker is passive and does
not inject wireless signals or interact with the victim.
IV. LINKAGE AND TRACKING: ATTACK OVERVIEW
We ﬁrst provide an overview of the attack approach, then
discuss the characteristics of the side-channel linking BTC
and BLE. Through a set of experiments, we demonstrate the
existence of a dependency, although noisy, between transmis-
sion times. We then summarize the challenges that need to be
investigated to understand the full potential of the attack.
A. Overview of the Attack
The goal of the attacker is to (1) link BLE advertisements
and BTC transmissions, (2) derive globally unique identiﬁer
from BTC transmissions (BDADDR), and (3) use the link for
tracking BLE users and for linking their device to any informa-
tion learned directly or indirectly from the advertisements. To
achieve this goal, the attacker needs to handle multiple steps
- from the correct reception of RF emissions, to extracting
Authorized licensed use limited to: Tsinghua University. Downloaded on February 25,2022 at 12:26:04 UTC from IEEE Xplore.  Restrictions apply. 
1321
(a) Time offset between BLE advertise-
ments of test device with the BTC trans-
missions from the same device.
Fig. 5: Example of BLE advertisement coupling with BTC transmissions from the
same device (left) and with different device (right).
(b) Time offset between BLE advertise-
ments of test device with the BTC trans-
missions of another device.
Fig. 6: Linkability ecdf RMSE
does not affect the baseband clock of the Bluetooth module.
This makes it possible to link BLE advertisements pre- and
post- randomization by computing the alignment between BLE
advertisements, instead of linking them to BTC transmissions.
As such, this attack could potentially be used to link BLE ad-
vertisements over long periods of time in the absence of BTC
emissions. These preliminary results support our hypothesis
that BTC and BLE can be linked in the wild, and indicate the
necessity of an in-depth analysis for a robust attack.
C. Reliability of a Simple End-to-End Attack
In light of our early analysis, we developed a basic end-
to-end attack for linking BTC and BLE transmissions in sce-
narios without any knowledge about a speciﬁc target device.
Our only assumption is that the target is transmitting BLE
advertisements along with an active BTC connection. We note
that this is a realistic attack scenario as many apps such
as Exposure Notiﬁcation, Apple Find My and iBeacon rely
on BLE advertisements, while users still rely on BTC for
streaming music and videos to their headsets. As such, the
two may often be used together enabling the attack.
Analyzing 10 seconds of samples, we report on the Root
Mean Square Error of offset between BLE and BTC in
Figure 6. We link BTC transmissions and BLE advertisements
from Immuni [26], a contact tracing app, only 20% of the time
(using a RMSE threshold of 13). These initial results indicate
not only the possibility of a robust attack but also the need
for a systematic analysis accounting for various nuances of
BTC/BLE, Android Bluetooth Stack, mobile apps, etc.
D. Challenges Impacting Attack Performance
The challenges in inference arise due to the nature of a sniff-
ing attack at the physical layer, the complexity of Bluetooth
protocols and the heterogeneity of hardware implementations.
Wireless impairment. The attack relies on snifﬁng and
decoding RF emissions. It is therefore limited by the channel
impairments, such as the impact of interference and distance