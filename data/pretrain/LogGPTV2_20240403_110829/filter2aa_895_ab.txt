### Bypassing the Forbidden Region
We developed an approach to circumvent the forbidden region. For detailed information on the exploitation technique, please refer to the whitepaper.

---

### Coalescing Exploit Success
We devised a multistage approach that involved corrupting the descriptor array to achieve a surgical write-what-where primitive. This approach combined bugs #1, #2, and #4, and exploited a CopyMem optimization. For a comprehensive understanding of the exploitation technique, see the whitepaper.

---

### Envelope Parsing Exploitation
Exploiting the "envelope parsing" bug was challenging for several reasons. To trigger the undersized LbaCache allocation, the NumBlocks value must be extremely large, causing the corrupting for() loops to never terminate. The relevant code can be found in `Edk2/MdeModulePkg/Core/Dxe/FwVolBlock/FwVolBlock.c`.

---

### Total Address Space Annihilation
The loop will corrupt the entire address space, leading to a system hang.

---

### Other Complications
The LbaCache pointer is overwritten by the corruption, further complicating the process. Additionally, the values being written during the corruption are not entirely controlled by the attacker.

---

### Corruption Direction Change
Overwriting the LbaCache pointer changes the location where the corruption continues.

---

### Difficulties Recap
Successfully exploiting the envelope parsing vulnerability requires overcoming several significant challenges:
- Corrupting the base pointer for corruption (LbaCache)
- Partially controlling the values being written
- Dealing with a non-terminating corrupting loop

---

### Self-overwriting Code
To escape the non-terminating for loop, we manipulated the corruption so that the loop would self-overwrite. In this case, we replaced the top of the basic block with non-advantageous x86 instructions, which were only semi-controlled.

---

### Self-overwriting Success
Through brute force, we discovered a way to overwrite the looping basic block with advantageous attacker instructions, allowing a jump to uncorrupted shellcode.

---

### Exploitation Mechanics Summary
The vulnerable code runs with read-write-execute permissions and no mitigations. However, successful exploitation remains complex. The capsule coalescing exploit allows for a surgical write-what-where primitive, resulting in reliable UEFI firmware exploitation. The address space is almost entirely uncorrupted, ensuring system stability. Conversely, the capsule envelope parsing vulnerability corrupts a significant portion of the address space, likely leading to an unstable system. In both cases, the attacker gains control of EIP in the early boot environment.

---

### Exploitation Flow (1 of 8)
Our hypothetical attacker, dissatisfied with ring 3 admin privileges, seeks to enhance their power through advanced exploitation techniques.

---

### Exploitation Flow (2 of 8)
The attacker seeds an evil capsule update into memory and uses `SetFirmwareEnvironmentVariable` to prepare the firmware to consume the evil capsule. Shellcode for execution in the early boot environment is staged in memory.

---

### Exploitation Flow (3 of 8)
A warm reset is performed to transfer context back to UEFI.

---

### Exploitation Flow (4 of 8)
Capsule processing is initiated by the presence of the "CapsuleUpdateData" UEFI variable.

---

### Exploitation Flow (5 of 8)
UEFI begins to coalesce the evil capsule.

---

### Exploitation Flow (6 of 8)
UEFI becomes corrupted while parsing the evil capsule.

---

### Exploitation Flow (7 of 8)
The attacker gains arbitrary code execution in the early boot environment, effectively unlocking the platform.

---

### Exploitation Flow (8 of 8)
The attacker can now establish agents in SMM and/or the platform firmware to execute their commands.

---

### Unnatural Powers
With these new powers, the attacker can:
- Brick the platform
- Defeat Secure Boot
- Establish an undetectable SMM rootkit
- Subvert hypervisors
- Subvert TXT-launched hypervisors
- Circumvent operating system security functions
- Survive operating system reinstallation attempts
- Other malicious activities

---

### Demo Time
[Demo details]

---

### Vendor Response
We informed Intel and CERT about the discovered bugs on November 22nd and December 4th, 2013. We extended our typical 6-month responsible disclosure deadline and targeted public disclosure at BlackHat/Defcon in the summer. We also contacted some OEMs directly via encrypted email. Intel queried UEFI partners to determine if they were using the affected code and provided details to those who confirmed vulnerability. This information is available in CERT VU #552286. The UEFI forum is setting up a UEFI Security Response Team to better coordinate future disclosures, aiming to go live by September 1st.

---

### What Can You Do About It?
- **Run Copernicus**: It has been updated to automatically report if your system is on the VU #552286 affected list. Visit [MITRE Copernicus](http://www.mitre.org/capabilities/cybersecurity/overview/cybersecurity-blog/copernicus-question-your-assumptions-about) or search for "MITRE Copernicus."
- **Binary Integrity Checking**: We offer a binary integrity checking capability for Copernicus to help detect if your BIOS has been backdoored. While freely available, it may have false positives/negatives. If you are serious about checking your BIOSes, email PI:EMAIL.
- **Security Vendors**: Include BIOS checks in your offerings. Customers should request BIOS checks. We are willing to provide our Copernicus code to vendors in exchange for data to support further research. Our goal is to make BIOS configuration and integrity checking standard capabilities widely available from multiple vendors, eliminating the blind spot.

---

### Conclusion
UEFI has more tightly coupled the bonds between the operating system and the platform firmware. The EFI variable interface acts as a conduit for less privileged entities (the operating system) to pass information to more privileged entities (the platform firmware). We have demonstrated how a vulnerability in this interface can allow an attacker to gain control of the firmware. While UEFI is beneficial for platform security, a thorough audit of UEFI code and its features is necessary. Copernicus continues to be updated to provide the latest information on vulnerabilities affecting your BIOS.

---

### Questions & Contact
- Email: {ckallenberg, xkovah, jbutterworth, scornwell} @ mitre . org
- Copernicus: copernicus @ mitre . org
- Twitter: @coreykal, @xenokovah, @jwbutterworth3, @ssc0rnwell, @MITREcorp
- Additional Resource: [OpenSecurityTraining.info](http://www.OpenSecTraining.info)

---

### References
[Detailed references listed here]

---

Â© 2014 The MITRE Corporation. All rights reserved.