 We had to come up with an approach that skipped past the forbidden 
region 
© 2014 The MITRE Corporation. All rights reserved.
See whitepaper for full details on the exploitation technique 
| 33 |  
Coalescing Exploit Success 
 Came up with a multistage approach that involved corrupting the 
descriptor array 
– Achieve surgical write-what-where primitive 
– Combined bugs #1, #2, #4 and abused a CopyMem optimization 
See whitepaper for full details on the exploitation technique 
© 2014 The MITRE Corporation. All rights reserved.
| 34 |  
Envelope Parsing Exploitation 
 Exploitation of the "envelope parsing" bug was complicated for 
several reasons 
 Note that in order to trigger the undersized LbaCache allocation, the 
NumBlocks value must be huge 
– This effectively means that the corrupting for() loops will never 
terminate 
Edk2/MdeModulePkg/Core/Dxe/FwVolBlock/FwVolBlock.c 
© 2014 The MITRE Corporation. All rights reserved.
| 35 |  
Total Address Space Annihilation 
 Loop will corrupt entire address space and hang the system 
© 2014 The MITRE Corporation. All rights reserved.
| 36 |  
Other Complications 
 LbaCache pointer is overwritten by the corruption, further complicating 
things 
 Values being written during the corruption are not entirely attacker 
controller 
© 2014 The MITRE Corporation. All rights reserved.
| 37 |  
Corruption Direction Change 
 Overwriting the LbaCache pointer changes the location the 
corruption continues at 
© 2014 The MITRE Corporation. All rights reserved.
| 38 |  
Difficulties Recap 
 An attacker has some serious hoops to jump through to 
successfully exploit the envelope parsing vulnerability 
– Corrupting of base pointer for corruption (LbaCache) 
– Only partially controlled values being written 
– Corrupting loop will never terminate 
© 2014 The MITRE Corporation. All rights reserved.
| 39 |  
Self-overwriting Code 
 Our approach to escaping the non-terminating for loop was to massage the 
corruption so the loop would self-overwrite 
 In this case, we overwrite the top of the basic block with non-advantageous 
x86 instructions 
– Overwritten values only "semi-controlled" 
© 2014 The MITRE Corporation. All rights reserved.
| 40 |  
Self-overwriting Success 
 With some brute force we discovered a way to overwrite the looping 
basic block with advantageous attacker instructions 
– Jump to uncorrupted shellcode 
© 2014 The MITRE Corporation. All rights reserved.
| 41 |  
Exploitation Mechanics Summary 
 Vulnerable code runs with read-write-execute permissions and 
no mitigations 
 However, successful exploitation was still complicated 
 Capsule coalescing exploit allows for surgical write-what-where 
primitive resulting in reliable exploitation of the UEFI firmware 
– Address space is almost entirely uncorrupted so system remains 
stable 
 Capsule envelope parsing vulnerability can be exploited but 
corrupts a lot of the address space 
– System probably in an unstable state 
 In both cases, attacker ends up with control of EIP in the early 
boot environment 
© 2014 The MITRE Corporation. All rights reserved.
| 42 |  
Exploitation Flow (1 of 8) 
 Our Sith attacker is unimpressed with his ring 3 admin privileges 
and seeks to grow his power through the dark side of the force 
© 2014 The MITRE Corporation. All rights reserved.
| 43 |  
Exploitation Flow (2 of 8) 
 Attacker seeds an evil capsule update into memory 
 Attacker then uses SetFirmwareEnvironmentVariable to prepare the firmware to 
consume the evil capsule 
 Shellcode to be executed in the early boot environment is staged in memory 
© 2014 The MITRE Corporation. All rights reserved.
| 44 |  
Exploitation Flow (3 of 8) 
 Warm reset is performed to transfer context back to UEFI 
© 2014 The MITRE Corporation. All rights reserved.
| 45 |  
Exploitation Flow (4 of 8) 
 Capsule processing is initiated by the existence of the 
"CapsuleUpdateData" UEFI variable 
© 2014 The MITRE Corporation. All rights reserved.
| 46 |  
Exploitation Flow (5 of 8) 
 UEFI begins to coalesce the evil capsule 
© 2014 The MITRE Corporation. All rights reserved.
| 47 |  
Exploitation Flow (6 of 8) 
 UEFI becomes corrupted while parsing evil capsule 
© 2014 The MITRE Corporation. All rights reserved.
| 48 |  
Exploitation Flow (7 of 8) 
 Attacker gains arbitrary code execution in the context of the early 
boot environment 
– Platform is unlocked at this point 
© 2014 The MITRE Corporation. All rights reserved.
| 49 |  
Exploitation Flow (8 of 8) 
 Attacker can now establish agents in SMM and/or the platform 
firmware to do their bidding 
© 2014 The MITRE Corporation. All rights reserved.
| 50 |  
Unnatural Powers 
 With these new powers, our attacker can: 
– Brick the platform 
– Defeat Secure Boot[2] 
– Establish an undetectable SMM rootkit[8][5] 
– Subvert hypervisors[9] 
– Subvert TXT launched hypervisors[3] 
– Circumvent operating system security functions[11] 
– Survive operating system reinstallation attempts 
– Other? 
© 2014 The MITRE Corporation. All rights reserved.
| 51 |  
Demo Time 
© 2014 The MITRE Corporation. All rights reserved.
| 52 |  
Vendor Response 
 We told Intel & CERT about the bugs we found on Nov 22nd and Dec 
4th 2013 
– We conveyed that we would extend our typical 6 month responsible 
disclosure deadline, and we would be targeting public disclosure in 
the summer at BlackHat/Defcon 
– We also directly contacted some of the OEMs that we already had the 
capability to send encrypted email to 
 Intel queried UEFI partners to ask if they were using the affected 
code 
 If the vendors said they thought they would be affected, then Intel 
sent them the details 
 Then we didn't hear anything for a while 
 Eventually Intel indicated which vendors said they were vulnerable, 
and which systems would be patched. 
 This information is conveyed in CERT VU #552286 
 The UEFI forum is in the process of setting up a UEFI Security 
Response Team to better coordinate these sort of disclosures in 
the future. Shooting to go live by Sept 1. 
© 2014 The MITRE Corporation. All rights reserved.
| 53 |  
What can you do about it? 
 Run Copernicus. It has been updated to automatically report if your 
system is on the VU # 552286 affected list 
– http://www.mitre.org/capabilities/cybersecurity/overview/cybersecurity-
blog/copernicus-question-your-assumptions-about or just search for 
"MITRE Copernicus" 
 We also have a binary integrity checking capability for Copernicus. 
This can help you detect if your BIOS has been backdoored 
– The capability is freely available, but it's not as simple and foolproof 
as the public Copernicus (it will have false positives/negatives). And 
we don't really have the resources to support it for everyone. 
Therefore we prioritize who we work with to use it, based on the 
number of systems that will be checked. So if you're serious about 
checking your BIOSes, email PI:EMAIL  
 We also need this data to feed further research results on the state of BIOS 
security in the wild on deployed systems. Unlike the IPMI people, we can't 
just portscan networks to get 100k research results :P 
© 2014 The MITRE Corporation. All rights reserved.
| 54 |  
What can you do about it? 
 If you're a security vendor, start including BIOS checks 
– If you're a customer, start asking for BIOS checks 
 We are happy to freely give away our Copernicus code to get 
vendors started with incorporating checking BIOSes. All we ask 
for in return is some data to help further our research. 
 We want BIOS configuration & integrity checking to become 
standard capabilities which are widely available from as many 
vendors as possible. 
– No more massive blind spot please! 
© 2014 The MITRE Corporation. All rights reserved.
| 55 |  
Conclusion 
 UEFI has more tightly coupled the bonds of the operating 
system and the platform firmware 
 Specifically, the EFI variable interface acts as a conduit by which 
a less privileged entity (the operating system) can pass 
information for consumption by a more privileged entity (the 
platform firmware) 
– We have demonstrated how a vulnerability in this interface can 
allow an attacker to gain control of the firmware 
 Although the authors believe UEFI to ultimately be a good thing 
for the state of platform security, a more thorough audit of the 
UEFI code and its new features is needed 
 Copernicus continues to be updated to give the latest 
information about whether vulnerabilities affect your BIOS 
© 2014 The MITRE Corporation. All rights reserved.
| 56 |  
Questions & Contact 
 {ckallenberg, xkovah, jbutterworth, scornwell} @ mitre . org 
 Copernicus @ mitre . org  
 @coreykal, @xenokovah, @jwbutterworth3, @ssc0rnwell 
 @MITREcorp 
 P.s., go check out OpenSecurityTraining.info! 
 @OpenSecTraining 
© 2014 The MITRE Corporation. All rights reserved.
| 57 |  
References 
 [1] Attacking Intel BIOS – Alexander Tereshkin & Rafal Wojtczuk – Jul. 2009 
http://invisiblethingslab.com/resources/bh09usa/Attacking%20Intel%20BIOS.pdf  
 [2] A Tale of One Software Bypass of Windows 8 Secure Boot – Yuriy Bulygin – 
Jul. 2013 http://blackhat.com/us-13/briefings.html#Bulygin  
 [3] Attacking Intel Trusted Execution Technology - Rafal Wojtczuk and Joanna 
Rutkowska – Feb. 2009 
http://invisiblethingslab.com/resources/bh09dc/Attacking%20Intel%20TXT%20-
%20paper.pdf  
 [4] Defeating Signed BIOS Enforcement – Kallenberg et al., Sept. 2013 – 
http://www.mitre.org/sites/default/files/publications/defeating-signed-bios-
enforcement.pdf 
 [5] BIOS Chronomancy: Fixing the Core Root of Trust for Measurement – 
Butterworth et al., May 2013 
http://www.nosuchcon.org/talks/D2_01_Butterworth_BIOS_Chronomancy.pdf 
 [6] IsGameOver() Anyone? – Rutkowska and Tereshkin – Aug 2007 
http://invisiblethingslab.com/resources/bh07/IsGameOver.pdf 
 [7] Defeating Windows Driver Signature Enforcement – j00ru - Dec 2012 
http://j00ru.vexillium.org/?p=1455 
© 2014 The MITRE Corporation. All rights reserved.
| 58 |  
References 2 
 [8] Copernicus 2 – SENTER The Dragon – Kovah et al. – March 2014 
http://www.mitre.org/sites/default/files/publications/Copernicus2-SENTER-the-
Dragon-CSW-.pdf 
 [9] Preventing and Detecting Xen Hypervisor Subversions – Rutkowska and 
Wojtczuk – Aug 2008 http://www.invisiblethingslab.com/resources/bh08/part2-
full.pdf 
 [10] A New Breed of Rootkit: The Systems Management Mode (SMM) Rootkit – 
Sparks and Embleton – Aug 2008 http://www.eecs.ucf.edu/~czou/research/SMM-
Rootkits-Securecom08.pdf 
 [11] Using SMM for "Other Purposes" – BSDaemon et al – March 2008 
http://phrack.org/issues/65/7.html 
 [12] Using SMM to Circumvent Operating System Security Functions – Duflot et 
al. – March 2006 http://fawlty.cs.usfca.edu/~cruse/cs630f06/duflot.pdf 
 [13] Setup for Failure: Defeating UEFI SecureBoot – Kallenberg et al. – April 2014  
http://www.syscan.org/index.php/download/get/6e597f6067493dd581eed737146f
3afb/SyScan2014_CoreyKallenberg_SetupforFailureDefeatingSecureBoot.zip  
© 2014 The MITRE Corporation. All rights reserved.