title:Secure Multiparty Computations on Bitcoin
author:Marcin Andrychowicz and
Stefan Dziembowski and
Daniel Malinowski and
Lukasz Mazurek
2014 IEEE Symposium on Security and Privacy
Secure Multiparty Computations on Bitcoin
Marcin Andrychowicz, Stefan Dziembowski∗, Daniel Malinowski, Łukasz Mazurek
{marcin.andrychowicz, stefan.dziembowski, daniel.malinowski, lukasz.mazurek}@crypto.edu.pl
University of Warsaw, Poland
∗on leave from Sapienza University of Rome
Abstract—Bitcoin is a decentralized digital currency, intro-
duced in 2008, that has recently gained noticeable popularity. Its
main features are: (a) it lacks a central authority that controls
the transactions, (b) the list of transactions is publicly available,
and (c) its syntax allows more advanced transactions than simply
transferring the money. The goal of this paper is to show how
these properties of Bitcoin can be used in the area of secure
multiparty computation protocols (MPCs).
Firstly, we show that the Bitcoin system provides an attractive
way to construct a version of “timed commitments”, where the
committer has to reveal his secret within a certain time frame,
or to pay a ﬁne. This, in turn, can be used to obtain fairness
in some multiparty protocols. Secondly, we introduce a concept
of multiparty protocols that work “directly on Bitcoin”. Recall
that the standard deﬁnition of the MPCs guarantees only that the
protocol “emulates the trusted third party”. Hence ensuring that
the inputs are correct, and the outcome is respected is beyond
the scope of the deﬁnition. Our observation is that the Bitcoin
system can be used to go beyond the standard “emulation-based”
deﬁnition, by constructing protocols that link their inputs and the
outputs with the real Bitcoin transactions.
As an instantiation of this idea we construct protocols for
secure multiparty lotteries using the Bitcoin currency, without
relying on a trusted authority (one of these protocols uses
the Bitcoin-based timed commitments mentioned above). Our
protocols guarantee fairness for the honest parties no matter
how the loser behaves. For example: if one party interrupts the
protocol then her money is transferred to the honest participants.
Our protocols are practical (to demonstrate it we performed their
transactions in the actual Bitcoin system), and can be used in real
life as a replacement for the online gambling sites. We think that
this paradigm can have also other applications. We discuss some
of them.
Keywords—bitcoin; multiparty; lottery;
I.
INTRODUCTION
Secure multiparty computation (MPC) protocols, originat-
ing from the seminal works of Yao [41] and Goldreich et
al. [29], allow a group of mutually distrusting parties to
compute a joint function f on their private inputs. Typically,
the security of such protocols is deﬁned with respect to the
ideal model where f is computed by a trusted party Tf .
More precisely: it is required that during the execution of a
protocol the parties cannot learn more information about the
inputs of the other participants than they would learn if f was
computed by Tf who: (a) receives the inputs from the parties,
(b) computes f, and (c) sends the output back to the parties.
Moreover, even if some parties misbehave and do not follow
the protocol, they should not be able to inﬂuence the output
of the honest parties more than they could in the ideal model
by modifying their own inputs.
As an illustration of the practical meaning of such se-
curity deﬁnition consider the case when there are only two
participants, called Alice and Bob, and the function that they
compute is a conjunction f∧(a, b) = a∧ b, where a, b ∈ {0, 1}
are Boolean variables denoting the inputs of Alice and Bob,
respectively. This is sometimes called the marriage proposal
problem, since one can interpret the input of each party as
a declaration if she/he wants to marry the other one. More
precisely: suppose a = 1 if and only if Alice wants to marry
Bob, and b = 1 if and only if Bob wants to marry Alice.
In this case f∧(a, b) = 1 if and only if both parties want to
marry each other, and hence, if, e.g., b = 0 then Bob has no
information about Alice’s input. Therefore the privacy of Alice
is protected.
One can also consider randomized functions f, the simplest
example being the coin tossing problem [9] where the com-
puted function frnd : {⊥}×{⊥} → {0, 1} takes no inputs, and
outputs a uniformly random bit. Yet another generalization are
the so-called reactive functionalities where the trusted party T
maintains a state and the parties can interact with T in several
rounds. One example of such a functionality is the mental
poker [39] where T simulates a card game, i.e. she ﬁrst deals
a deck of cards and then ensures that the players play the game
according to the rules.
It was shown in [29] that for any efﬁciently-computable
function f (or, more general, any reactive functionality) there
exists an efﬁcient protocol that securely computes it, assuming
the existence of the trapdoor-permutations. If the minority of
the parties is malicious (i.e. does not follow the protocol) then
the protocol always terminates, and the output is known to
each honest participant. If not, then the malicious parties can
terminate the protocol after learning the output, preventing
the honest parties from learning it. It turns out [20] that in
general this problem, called the lack of fairness, is unavoid-
able, although there has been some effort to overcome this
impossibility result by relaxing the security requirements [30],
[15], [6], [35]. Note that in case of the two-player protocols it
makes no sense to assume that the majority of the players is
honest, as this would simply mean that none of the players
is malicious. Hence, the two-party protocols in general do
not provide complete fairness (unless the security deﬁnition
is weakened).
Since the introduction of the MPCs there has been a signif-
icant effort to make these protocols efﬁcient [32], [7], [22] and
sometimes even to use them in the real-life applications such
as, e.g., the online auctions [10]. On the other hand, perhaps
surprisingly, the MPCs have not been used in many other
areas where seemingly they would ﬁt perfectly. One prominent
example is the internet gambling: it may be intriguing that
© 2014, Marcin Andrychowicz. Under license to IEEE.
DOI 10.1109/SP.2014.35
443
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 11:57:33 UTC from IEEE Xplore.  Restrictions apply. 
currently gambling over the internet is done almost entirely
with the help of the web-sites that play the roles of the “trusted
parties”, instead of using the coin ﬂipping or the mental poker
protocols. This situation is clearly unsatisfactory from the
security point of view, especially since in the past there were
cases when the operators of these sites abused their privileged
position for their own ﬁnancial gain (see e.g. [36]). Hence,
it may look like the multiparty techniques that eliminate the
need for a trusted party would be a perfect replacement for
the traditional gambling sites (an additional beneﬁt would be
a reduced cost of gambling, since the gambling sites typically
charge fees for their service).
In our opinion there are at least two main reasons why the
MPCs are not used for online gambling. The ﬁrst reason is that
the multiparty protocols do not provide fairness in case there
is no honest majority among the participants. Consider for
example a simple two-party lottery based on the coin-tossing
protocol: the parties ﬁrst compute a random bit b, if b = 0 then
Alice pays $1 to Bob, if b = 1 then Bob pays $1 to Alice,
and if the protocol did not terminate correctly then the parties
do not pay any money to each other. In this case a malicious
party, say Alice, could prevent Bob from learning the output
if it is equal to 0, making 1 the only possible output of a
protocol. Since this easily generalizes to the multiparty case,
it is clear that the gambling protocol would work only if the
majority is honest, which is not a realistic assumption in the
fully distributed internet environment (there are many reasons
for this, one of them being the sybil attacks [23] where one
malicious party creates and controls several “fake” identities,
easily obtaining the “majority” among the participants).
The second reason is even more fundamental, as it comes
directly from the inherent limitations of the MPC security
deﬁnition, namely: such protocols do not provide security
beyond the trusted-party emulation. This drawback of the
MPCs is rarely mentioned in the literature as it seems obvious
that in most of the real-life applications cryptography cannot
be “responsible” for controlling that the users provide the
“real” input to the protocol and that they respect the output.
Consider for example the marriage proposal problem: it is clear
that even in the ideal model there is no technological way
to ensure that the users honestly provide their input to the
trusted party, i.e. nothing prevents one party, say Bob, to lie
about his feelings, and to set b = 1 in order to learn Alice’s
input a. Similarly, forcing both parties to respect the outcome
of the protocol and indeed marry cannot be guaranteed in a
cryptographic way. This problem is especially important in the
gambling applications: even in the simplest “two-party lottery”
example described above, there exists no cryptographic method
to force the loser to transfer the money to the winner.
One pragmatic solution to this problem, both in the digital
and the non-digital world is to use the concept of “reputation”:
a party caught on cheating (i.e. providing the wrong input
or not respecting the outcome of the game) damages her
reputation and next time may have trouble ﬁnding another
party willing to gamble with her. Reputation systems have been
constructed and analyzed in several papers (see, e.g. [37] for
an overview), however they seem too cumbersome to use in
many applications, one reason being that it is unclear how to
deﬁne the reputation of the new users in the scenarios when the
users are allowed to pick new names whenever they want [26].
Another option is to exploit the fact that the ﬁnancial
transactions are done electronically, and hence one could try
to “incorporate” the ﬁnal transaction (transferring $1 from the
loser to the winner) into the protocol, in such a way that the
parties learn who won the game only when the transaction has
already been performed. It is unfortunately not obvious how
to do it within the framework of the existing electronic cash
systems. Obviously, since the parties do not trust each other,
we cannot accept solutions where the winning party learns
e.g. the credit card number, or the account password of the
loser. One possible solution would be to design a multiparty
protocol that simulates, in a secure way, a simultaneous access
to all the online accounts of the participants and executes a
wire transfers in their name.1 Even if theoretically possible,
this solution is clearly very hard to implement in real life,
especially since the protocol would need to be adapted to sev-
eral banks used by the players (and would need to be updated
whenever they change). The same problems occur obviously
also if above we replace the “bank” with some other ﬁnancial
service (like PayPal). One could consider using Chaum’s Ecash
[17], or one of its variants [18], [16]. Unfortunately, none
of these systems got widely adopted in real-life. Moreover,
they are also bank-dependent, meaning that even if they get
popular, one would face a challenge of designing a protocol
that simulates the interaction of a real user with a bank, and
make it work for several different banks.
We therefore turn our attention to Bitcoin, which is a
decentralized digital currency introduced in 2008 by Satoshi
Nakamoto2 [34]. Bitcoin has recently gained a noticeable
popularity (its current market capitalization is over $5 billion)
mostly due to its distributed nature and the lack of a central
authority that controls the transactions. Because of that it is
infeasible for anyone to take control over the system, create
large amounts of coins (to generate inﬂation), or shut it down.
The money is transferred directly between two parties — they
do not have to trust anyone else and transaction fees are
zero or very small. Another advantage is pseudonymity3 —
the users are only identiﬁed by their public keys that can be
easily created, and hence it is hard to link the real person with
the virtual party spending the money. However, since all the
transactions and the connections between them are publicly
known there are several ways to extract some information
about Bitcoin users from the block chain, see e.g. [38].
In Section II we describe the main design principles of
Bitcoin, focusing only on the most relevant parts of this system.
A more detailed description can be found in Nakamoto’s
original paper [34], the Bitcoin wiki webpage en.bitcoin.it
(sections particularly relevant to our work are: “Transactions”
and “Contracts”), or other papers on Bitcoin [33], [19], [5],
[38]. In the sequel “B” denotes the Bitcoin currency symbol.
1Note that this would require, in particular, “simulating” the web-browser
and the SSL sessions, since each individual user should not learn the contents
of the communication between the “protocol” and his bank, as otherwise he
could interrupt the communication whenever he realizes that the “protocol”
ordered a wire transfer from his account. Moreover, one would need to assume
that the transactions cannot be cancelled once they were ordered.
2This name is widely believed to be a pseudonym.
3A very interesting modiﬁcation of Bitcoin that provides real cryptographic
anonymity has been recently proposed in [33].
444
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 11:57:33 UTC from IEEE Xplore.  Restrictions apply. 
A. Our contribution
We study how to do “MPCs on Bitcoin”. First of all, we
show that the Bitcoin system provides an attractive way to
construct a version of “timed commitments” [11], [27], where
the committer has to reveal his secret within a certain time
frame, or to pay a ﬁne. This, in turn, can be used to obtain
fairness in certain multiparty protocols. Hence it can be viewed
as an “application of Bitcoin to the MPCs”.
What
is probably more interesting is our second idea,
which in some inverts the previous one by showing an “ap-
plication of the MPCs to Bitcoin”, namely we introduce a
concept of multiparty protocols that work directly on Bitcoin.
As explained above,
the standard deﬁnition of the MPCs
guarantees only that the protocol “emulates the trusted third
party”. Hence ensuring that the inputs are correct, and the
outcome is respected is beyond the scope of the deﬁnition. Our
observation is that the Bitcoin system can be used to go beyond
the standard “emulation-based” deﬁnition, by constructing
protocols that link the inputs and the outputs with the real
Bitcoin transactions. This is possible since the Bitcoin lacks a
central authority, the list of transactions is public, and its syntax
allows more advanced transactions than simply transferring the
money.
As an instantiation of this idea we construct protocols for
secure multiparty lotteries using the Bitcoin currency, without
relying on a trusted authority. By “lottery” we mean a protocol
in which a group of parties initially invests some money, and
at the end one of them, chosen randomly, gets all the invested
money (called the pot). Our protocols can work in purely peer-
to-peer environment, and can be executed between players that
are anonymous and do not trust each other. Our constructions
come with a very strong security guarantee: no matter how
the dishonest parties behave, the honest parties will never get
cheated. More precisely, each honest party can be sure that,
once the game starts, it will always terminate and will be fair.
Our two main constructions are as follows. The ﬁrst
protocol (Section IV) can be executed between any number
of parties. Its security is obtained via the so-called deposits:
each user is required to initially put aside a certain amount of
money, which will be paid back to her once she completes the
protocol honestly. Otherwise the deposit is given to the other
parties and “compensates” them the fact that the game termi-
nated prematurely. This protocol uses the timed commitment
scheme described above. A certain drawback of this protocol
is that the deposits need to be relatively large, especially if
the protocol is executed among larger groups of players. More
precisely to achieve security the deposit of each player needs
to be N (N − 1) times the size of the bet (observe that for the
two-party case it simply means that the deposit is twice the
size of the bet).
We also describe (in Section V) a protocol that does not
require the use of deposits at all. This comes at a price: the
protocol works only for two parties, and its security relies on
an additional assumption (see Section V for more details).
The only cost that the participants need to pay in our
protocols are the Bitcoin transaction fees. The typical Bitcoin
transactions are currently free. However, the participants of
our protocols need to make a small number of non-standard
transactions (so-called “strange transactions”, see Section II),
for which there is usually some small fee (currently around
0.00005B ≈ $0.03). To keep the exposition simple we initially
present our results assuming that the fees are zero, and later,
in Section VI, argue how to extend the deﬁnitions and security