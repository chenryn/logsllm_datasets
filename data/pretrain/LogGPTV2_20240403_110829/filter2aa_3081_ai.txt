}
int main()
{
    // 0x8e0x5f0x600x98
    // 
    // uint32_t k[] = {0x8e5f6098,0x86f2cd64 ,0x61a1267f,0xf0cc04d4};
    uint32_t k[] = {0x86f2cd64,0x8e5f6098 ,0xf0cc04d4,0x61a1267f};
    uint32_t p[] = {0xaaaaaaaa,0xaaaaaaaa};
    encrypt(p,k);
    printf("%x %x\n",p[0],p[1]);
    // perm(k,0,4);
    uint32_t enc[] = {0xdf9b0fd0,0x306e3591};
    decrypt(enc,k);
    printf("%x %x\n",enc[0],enc[1]);
    // flag{f6254feadb0fe00}
    // uint32_t k2[4] = {0};  flag{fe54620f00feb0ad}
    // printf("%x %x",p[0],p[1]);
    return 0;
}
from hashlib import sha256
import random
hint = 'e7ce83efc6acb6def757897d96b0f94affac7943c3f968fb0e3a9d64d11f75af'
output = 
0x0fbe5f6f3021793ddd044cc21a04f65503f4f3156802e9b13a99e4e99b880c07dff72504ca95a4dd69ff5
e13f2f83fc538b63ea2669150289d2803f6953829af147c4d4c935659fb694d50b00b3c79039454bfedf5a4
ac6d204c2cd286385a61a25f8cb0
def n2l(x, l):
    return list(map(int, '{{0:0{}b}}'.format(l).format(x)))
output = n2l(output,800)
mask = 2**63+2**8
length = 64
1lfsr15/16n[27]n[0]3.5%48
F = GF(2)
A = matrix(F, length)
for i in range(length):
    A[i, -1] = bool(mask & (1 << (length - i - 1)))
for i in range(length - 1):
    A[i + 1, i] = 1
bl = vector(F, length)
bl[8] = 1
bl[63] = 1
AL = [(A ^ (i+1)) * bl for i in range(3*len(output))]
while True:
    idxs = [i for i in range(len(output))]
    random.shuffle(idxs)
    A = matrix(F,[AL[3*i+2] for i in idxs[:length]])
    A = A.transpose()
    y = vector(F,[output[i] for i in idxs[:length]])
    try:
        x = A.solve_left(y)
    except ValueError:
        continue
    x = [i for i in list(x)]
    key = 0
    for i in x:
        key <<= 1
        key |= int(i)
    if(hint == sha256(str(key).encode()).hexdigest()):
        print(key)
        break
from Crypto.Util.number import *
from pwn import *
from hashlib import sha256
import random
def _prod(L):
    p = 1
    for x in L:
        p *= x
    return p
def _sum(L):
    s = 0
    for x in L:
        s ^= x
    return s
def b2n(x):
    return int.from_bytes(x, 'big')
def n2l(x, l):
    return list(map(int, '{{0:0{}b}}'.format(l).format(x)))
TAP = [0, 1, 12, 15]
h_IN = [2, 4, 7, 15]
h_OUT = [[1], [3], [0, 3], [0, 1, 2], [0, 2, 3]]
alist = [0]*65536
for t in range(65536):
    LFSR = n2l(t,16)
    for i in range(48):
        x = [LFSR[i] for i in h_IN]
        alist[t] = alist[t]*2 + _sum(_prod(x[i] for i in j) for j in h_OUT)
        LFSR = LFSR[1: ] + [_sum(LFSR[i] for i in TAP)]
HOST = "111.186.59.28"
POST = 31337
r = remote(HOST, POST)
def proof_of_work():
    rev = r.recvuntil("sha256(XXXX + ")
    suffix = r.recv(16).decode()
    rev = r.recvuntil(" == ")
    tar = r.recv(64).decode()
    def f(x):
        hashresult = hashlib.sha256(x.encode()+suffix.encode()).hexdigest()
        return hashresult == tar
    prefix = util.iters.mbruteforce(f, string.digits + string.ascii_letters + '!#$%&*-
?', 4, 'upto')
    r.recvuntil("Give me XXXX:")
    r.sendline(prefix)
proof_of_work()
r.recvuntil(b'which one:')
r.sendline('1')
r.recvuntil(b'start:::')
tmp = r.recvline()
data = b''
while(tmp[-4:]!=b'end\\n'):
    data += tmp
    tmp = r.recvline()
data += tmp
output = int(data[:6].hex(),16)
r.recvuntil(b'hint: ')
data = r.recvline()
hint = data[:-1].decode()
for t in range(65536):
    key = (alist[t]^^output)*65536+t
    if(hint == sha256(str(key).encode()).hexdigest()):
        print(t,key)
        r.recvuntil(b'k: ')
        r.sendline(str(key))
        break
r.recvuntil(b'which one:')
r.sendline('3')
r.recvuntil(b'start:::')
tmp = r.recvline()
data = b''
while(tmp[-4:]!=b'end\\n'):
    data += tmp
    tmp = r.recvline()
data += tmp
output = int(data[:100].hex(),16)
r.recvuntil(b'hint: ')
data = r.recvline()
hint = data[:-1].decode()
output = n2l(output,800)
mask = 2**63+2**8
length = 64
F = GF(2)
A = matrix(F, length)
for i in range(length):
    A[i, -1] = bool(mask & (1 << (length - i - 1)))
for i in range(length - 1):
    A[i + 1, i] = 1
bl = vector(F, length)
bl[8] = 1
bl[63] = 1
AL = [(A ^ (i+1)) * bl for i in range(3*len(output))]
while True:
    idxs = [i for i in range(len(output))]
checkin
    random.shuffle(idxs)
    A = matrix(F,[AL[3*i+2] for i in idxs[:length]])
    A = A.transpose()
    y = vector(F,[output[i] for i in idxs[:length]])
    try:
        x = A.solve_left(y)
    except ValueError:
        continue
    x = [i for i in list(x)]
    key = 0
    for i in x:
        key <<= 1
        key |= int(i)
    if(hint == sha256(str(key).encode()).hexdigest()):
        print(key)
        r.recvuntil(b'k: ')
        r.sendline(str(key))
        break
r.interactive()
package main
import (
    "bufio"
    "fmt"
    "math/big"
    "net"
    "strconv"
    "strings"
    "time"
)
func main() {
    // build connection
    conn, err := net.Dial("tcp", "111.186.59.11:16256")
    if err != nil {
        fmt.Printf("conn server failed, err:%v\n", err)
        return
    }
    defer conn.Close()
    // read data
    reader := bufio.NewReader(conn)
    var buf [1024]byte
    n, err := reader.Read(buf[:])           // Show me your computation:
    n, err = reader.Read(buf[:])
PWN
listbook
    if err != nil {
        fmt.Printf("read from conn failed, err:%v\n", err)
    }
    recv := string(buf[:])
    end := strings.Index(recv, " =")
    r, _ := strconv.Atoi(recv[6:14])