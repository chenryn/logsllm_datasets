column dup contains a sizable number of duplicates, and
B-tree index support on column dup.
➊ Regular Index Scan ⭭ ╎ ➋ Loose Index Scan ⭭⭭⭭
╎
• Enter B-tree once ⋰ ╎ • Re-enter B-tree ⋰
⋰ ╎ from root ⋰⋱
• Scan leaf level, ⋰ ╎ ⋰ ⋱
skipping over ⋰ ╎ • Search for next ⋰ ⋱ ⋱
duplicates ⋰ ╎ larger xᵢ only ⋰ ⋰ ⋰⋱
⋰ ╎ ⋰ ⋰ ⋰ ⋱
• Implemented ⋰ ╎ • Not implemented ⋰ ⋱--⋱ ⋱-
by PostgreSQL •⋯⋯⋯⋯•⋯⋯⋯•⋯⋯⋯⋯‣ ╎ by PostgreSQL • • • □
x₁ x₂ x₃ ╎ x₁ x₂ x₃
Emulating Physical Operator Behavior: Loose Index Scans
WITH RECURSIVE
loose(xᵢ) AS (
SELECT MIN(t.dup) AS xᵢ -- ⎱ find smallest value x₁
FROM t -- ⎰ in column dup
UNION ALL
SELECT (SELECT MIN(t.dup) -- ⎫ find next larger
FROM t -- ⎬ value xᵢ (≡ NULL
WHERE t.dup > l.xᵢ) AS xᵢ -- ⎭ if no such value)
FROM loose AS l
WHERE l.xᵢ IS NOT NULL -- last search successful?
)
SELECT l.xᵢ
FROM loose AS l
WHERE l.xᵢ IS NOT NULL
Loose Index Scans: Does Recursion Pay Off?
Micro benchmark: |t| = 10⁶ rows, number of duplicates in
column dup :: int varies:4
# of distinct values in %&' index scan [ms] loose index scan [ms]
10 428  k.mean) AS assign
WHERE assign.iter  k.means
LIMIT 1) AS cluster, ⋯
FROM points AS p
⋮
A: No. References to recursive table k_means inside a
subquery in the SELECT or WHERE clause are forbidden.
⚠
7 ┆ Table-Driven Query Logic (Control Flow → Data Flow)
SQL provides a family of constructs to encode the logic (in
the sense of control flow) of algorithms:
1. Obviously: WHERE ‹p›, HAVING ‹p›,
2. ‹q₁› UNION ALL ‹q₂› UNION ALL ⋯
in which the ‹qᵢ› contain guards (predicates) that
control their contribution,
3. CASE ‹p› WHEN ⋯ THEN ⋯ ELSE ⋯ END.
SQL being a data-oriented language additionally suggests the
option to turn control flow into data flow. Encoding query
logic in tables can lead to compact, self-describing, and
extensible query variants.
#
Find Isobaric or Contour Lines: Marching Squares
Goal: Trace the boundary of the object in ➊ (▉ ≡ object):
➊ ➋ ➌ ╎ Moving :
╎
╎ ⎹ ⎸→ ⎹▖⎸←
╎ ⎹▝⎸→ ⎹▞⎸←
╎ ⎹▘⎸↑ ⎹▌⎸↑
╎ ⎹▀⎸→ ⎹▛⎸→
➍ ➎ ➏ ╎ ⎹▗⎸↓ ⎹▄⎸←
╎ ⎹▐⎸↓ ⎹▟⎸←
╎ ⎹▚⎸↑ ⎹▛⎸→
╎ ⎹▜⎸↓ ⎹█⎸⭍
╎
15 cases define the movement of the 2×2 pixel mask.
#
Marching Squares (Query Plan)
1. Encode mask movement in table directions that maps 2×2
pixel patterns to (Δx,Δy) ∈ {-1,0,1} × {-1,0,1}.
Examples: ⎹▛⎸maps to (1,0), ⎹▘⎸maps to (0,-1).
2. For each 2D-pixel p₀, read pixels at p₀+(1,0), p₀+(0,1),
p₀+(1,1), to form a 2×2 squares map [table squares].
3. Iteratively fill table march(x,y):
[1₀]: Start with (1,1) ∈ march.
[1⥁]: Find 2×2 pixel pattern at (x,y) in squares,
lookup pattern in directions to move mask to
(x,y) + (Δx,Δy).
#
Marching Squares (SQL Code) ✎
WITH RECURSIVE
⋮
march(x,y) AS (
SELECT 1 AS x, 1 AS y
UNION
SELECT new.x AS x, new.y AS y
FROM march AS m, squares AS s,
directions AS d, ⎫
LATERAL (VALUES (m.x + (d.dir).Δx, ⎬ ⁑
m.y + (d.dir).Δy)) AS new(x,y) ⎮
WHERE (s.ll,s.lr,s.ul,s.ur) = (d.ll,d.lr,d.ul,d.ur) ⎭
AND (m.x,m.y) = (s.x,s.y)
)
⁑ Table lookup replaces a 15-fold case distinction. +
8 ┆ Encoding Cellular Automata in SQL
Cellular automata (CA)7 are discrete state-transition
systems that can model a variety of phenomena in physics,
biology, chemistry, maths, or the social sciences:
Cells populate a regular <-dimensional grid, each cell
being in one of a finite number of states.
A cell can interact with the cells of its neighborhood.
State of cell R changes from generation to generation by
a fixed set of rules, dependent on R's state and those of
its neighbors.
7 Discovered by Stanislaw Ulam and John von Neumann in the 1940s at Los Alamos National Laboratory.
Cell State Change in Cellular Automata