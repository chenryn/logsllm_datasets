only be removed by the owner. Extensions to this model 
are the object of ongoing studies.  
In the rest of the section we describe the file creation, 
sharing, reading and removal procedures. 
4.1  File Creation  
The  file  creation  procedure  exploits  an  appropriate 
RRNS to encode a file. Since the maximum number which 
can  be  represented  is  limited  by  the  range  of  the  RRNS,
files  of  sizes  exceedingly  the  range  are  encoded  by 
preliminary partitioning the file into records of size equal 
to  the  range  of  the  RRNS,  and  by  encoding  the  records 
separately.  This  technique  has  the  additional  advantage 
that  each  record  can  be  accessed  independently,  thus 
contributing to the efficiency of readouts. 
increase 
large  records 
The size of the records affects the performance of the 
system,  as 
information 
efficiency  of  encoding  and  imply  a  smaller  number  of 
messages to be exchanged when creating and accessing a 
file,  while  smaller  records  may  reduce  the  number  of 
packets 
the  computational 
complexity of decoding. 
in  each  message,  and 
the 
for 
each 
and 
p∈[2,h+r], 
Let  us  consider  a  file  created  by  ui.  The  file  is 
partitioned  into  a  sequence  of  s  records  b1,…,bs  where 
each  record  consists  of  b  bits,  and  it  is  encoded  in  an 
RRNS. The  RRNS is defined  by  considering a  set of  h+r
moduli (pairwise prime positive integers) m1,…,mh+r with 
mp>mp–1 
that 
M=m1⋅…⋅mh>2b.  By  Theorem  2  the  resulting  RRNS
tolerates erasures up to multiplicity s (s≤r) combined with 
errors  up  to  multiplicity  (cid:172)
.  Record  bt  is  encoded  in 
the  RRNS  of  moduli  m1,…,mh+r  by  the  (h+r)-tuple  of 
residues (xt,1,…,xt,h+r). This means that ui produces s⋅(h+r)
residues,  which,  in  turn,  are  sent  to  different  mobiles 
which are currently reachable by ui. Each selected mobile 
stores the received residue in its storage. The assignment 
of mobiles to residues is arbitrary with the only constraint 
sr−
(cid:188)2
such 
Proceedings of the 2003 International Conference on Dependable Systems and Networks (DSN’03) 
0-7695-1959-8/03 $17.00 (c) 2003 IEEE
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 07:07:04 UTC from IEEE Xplore.  Restrictions apply. 
u5
u11
u2
u8
u3
u6 (k1)
x1,1
…
xs,1
u9 (k3)
xs,3
…
xs,3
Figure 3. Reading record bt of file F by mobile u10.
u4 (k2)
x1,2
…
xs,2
u7
u10
(reader) 
F
u1
F
Request(idt,j)
Reply(idt,j,xt,j)
that different residues of the same record should be stored 
in different mobiles.  
Assume  that  the  owner  ui  selects  h+r  mobiles 
k1,…,kh+r  to  store  record  bt  (with  t∈[1,s]).  For  each 
selected mobile kp (with p∈[1,h+r]), ui sends to kp the pth
residue digit xt,p in the record representation. Mobile kp, in 
turn, associates the residue xt,p with an available location 
in  its  storage,  stores  the  pair  (i,xt,p)  in  this  location,  and 
returns to ui the identifier idt,p of the location. To enforce 
confidentiality,  the  identifier  may  be  encrypted  with  the 
public key of ui [27] before being returned to ui. Note also 
that  the  identifier  must  be  unique  only  within  the  local 
storage of kp.
The owner ui maintains a file descriptor F, containing 
the  (h+r)-tuple  VF=(m1,…,mh+r)  of  the  moduli  and  s
record descriptors. For each record bt (t∈[1,s]), the record 
descriptor  contains  the  (h+r)-tuple  of  the  (distinct) 
mobiles storing the residue digits of bt and the (h+r)-tuple 
of  the  identifiers  (idt,1,…,idt,h+r)  of  the  storage  locations 
inside the mobiles. The file descriptor is kept secret by ui.
This technique, which supports incremental writing of 
files  and  overwriting  of  records  is  tuned  to  the  needs  of 
wireless, mobile environment. 
It should be observed that the encoding technique may 
expose the storage system to a little security flaw. In fact, 
let us consider a record whose decimal content is smaller 
than any module of the RRNS: the corresponding residues 
would  be  equal to  the  decimal  content  of  the  record.  To 
circumvent  this  problem,  the  file  owner  may  add  a 
random constant in the range [0,M) to the decimal content 
of  the  records  to  be  encoded,  and  keep  secretly  the 
constant in the file descriptor. 
Figure 2 shows the creation of a file F by mobile u1,
using  3  moduli  (h=2  and  r=1).  The  residue  digits  are 
distributed to mobiles u6 (k1), u4 (k2) and u9 (k3). 
4.2  File Sharing 
File  sharing  is  enabled  by  the  file  owner  ui  by 
distributing  copies  of  the  file  descriptor  to  trusted 
mobiles.  
In principle mobiles sharing the file might be granted 
full  rights  on  the  file,  including  distributing  the  file 
descriptor  to  other  mobiles,  writing  or  even  deleting  the 
files.  For  the  sake  of  simplicity  we  assume  that  mobiles 
sharing  a  file  are  not  allowed  to  distribute  the  file 
descriptor  to  other  mobiles,  nor  to  write  or  remove  the 
file. Since we assume that the mobiles sharing the file are 
trusted  by  the  file  owner,  we  do  not  employ  any 
mechanism  to  inhibit  distribution  of  descriptors.  The 
politics  of  denying  write  and  remove  privileges  is 
enforced by the mobiles hosting the residue digits. Failure 
to  enforce  this  politics  is  equivalent  to  malicious  digit 
corruption by the hosts.  
To allow mobile j to share a file descriptor F, ui sends 
[F]j to uj, where [F]j is the encryption of F with the public 
Proceedings of the 2003 International Conference on Dependable Systems and Networks (DSN’03) 
0-7695-1959-8/03 $17.00 (c) 2003 IEEE
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 07:07:04 UTC from IEEE Xplore.  Restrictions apply. 
key  of  j  [27].  Once  uj  receives  the  file  descriptor  it  can 
freely access the file. Figure 2 shows the sharing of file F
between mobiles u1 and u10.
4.3  File Reading  
Due to the encoding properties, the digits of encoded 
records  of  a  file  are  read  independently  of  each  other, 
provided the reading mobile knows the record descriptor. 
Once  the  digits  are  read,  the  record  reconstruction 
involves the execution of a decoding procedure based on 
the  Chinese  Remainder  Theorem,  which 
requires 
knowledge of the (h+r)-tuple VF. For this reason only the 
mobiles  owning  a  copy  of  the  file  descriptor  are  able  to 
read the record. 
Let  us  consider  the  reading  procedure  of  a  record  bt
executed by mobile i owning the file descriptor F, and let 
(k1,…,kh+r)  be  the  (h+r)-tuple  of  mobiles  hosting  the 
residue  digits.  Firstly  ui  sends  separate  read  requests  to 
mobiles k1,…,kh+r. The parameter of the read request sent 
to kj  (j∈[1,h+r])  is  the  identifier  idt,j.  To  enforce 
confidentiality  the  residue  identifier  can  be  encrypted 
with  the  public  key  of  kj.  When  kj  receives  the  read 
requests,  it  sends  back  to  ui  a  copy  of  the  requested 
residue xt,j.
By  Theorem  2,  the  decoding  procedure  does  not 
require that ui receives all the h+r residues. The number 
of required residues depends on the error model addressed 
by ui. For example, if only erasures are expected, that is, it 
is  assumed  that  some  residues  may  be  lost  but  the 
received  residues  are  correct,  then  ui  can  proceed  with 
record decoding as soon as it receives h residues. On the 
other  hand,  if  it  expects  that  up  to  r/2  residues  be 
corrupted, then it needs to receive all the h+r residues to 
correctly  decode  the  record.  If  the  maximum  expected 
  with  s≤r,  then  the  number  of 
number  of  errors  is  (cid:172)
residue digits needed to reconstruct the record is h+r–s.
sr−
(cid:188)2
Figure 3 depicts an example of file reading of a file F
encoded  with  parameters  h=2  and  r=1.  Referring  to  this 
figure,  u10  can  proceed  to  the  decoding  of  the  received 
residues  as  soon as  it  receives the  first two  residues,  for 
example  from  the  mobiles  u6  and  u4.  However,  if  some 
mobile, say u7  is not trustworthy, it may deliberately not 
forward or even corrupt the residues coming from u4, thus 
preventing  u10  from  accessing  correctly  the  file.  To 
provide  protection  against  these  malicious  behaviors,  u1
should  adopt  an  appropriate  level  of  redundancy  during 
the file creation procedure. 
4.4  File Removal 
This procedure is executed by the file owner to delete 
the  file.  For  each  record it  consists  in  a  set  of  messages 
sent  to  all  the  mobiles  storing  the  record  residues, 
requesting deletion of the residues. More specifically let i
be  the  file  owner,  and  bt  (t∈[1,s])  be  the  record  under 
consideration. Then ui sends to each mobile kj (j∈[1,h+r])
storing  the  residue  digit  xt,j  of  bt  a  deletion  request  with 
parameter  idt,j.  Furthermore,  ui  sends  another  set  of 
messages  to  all  mobiles  sharing  the  file  requiring  to 
discard  the  file  descriptor.  Deletion  requests  are  ignored 
by  the  mobiles  hosting  the  digits  if  the  sender  is  not 
recognized  as  the  file  owner.  Failure  to  enforce  this 
politics is equivalent to malicious deletion by the mobiles 
hosting the residue digits. 
It should be observed  that at a given  time during the 
file  removal  procedure,  some  of  the  residues  may  have 
already been deleted while some others not. However, this 
situation does not produce inconsistencies in the case that 
at the same time another mobile (sharing the file) attempts 
to  read  the  file.  In  fact  it  may  either  receive  enough 
residues  or  not.  In  the  former  case  it  will  read  correctly 
the  file  as  if  the  read  operation  was  executed  before  the 
file  removal,  while  in  the  latter  case  it  will  not  receive 
enough information to decode the file.  
5.  An Example 
Let f be an ASCII file created by mobile ui containing 
the sentence “Betty Botter had some butter”. If the file is 
partitioned  into  records  of  b=16  bits,  the  number  of 
records  is  s=14.  Consider  the  RRNS  with  h=4,  r=2,  and 
m1=14,  m2=15,  m3=17,  m4=19,  m5=23,  m6=29.  Thus  
M=m1⋅  m2⋅  m3⋅  m4=67830>216.  The  file  partition  and 
encoding is shown in Table 1. 
Let us assume now that mobile uj has received the file 
descriptor [F]j from the file owner ui and that it attempts 
to read the record b1, and consider the following cases: 
Case 1) Due to network disconnections uj fails to receive 
x1,1 and x1,2 while the remaining residues are received 
correctly.  In  this  case,  decoding  (x1,3,  x1,4,  x1,5,  x1,6)
with  moduli (m3,  m4,  m5,  m6)  yields  16997  (equal  to 
the decimal contents of b1), and the record is correctly 
reconstructed.  
2,1x
Case  2) uj  receives  all  the  residue  digits  but  x1,2  is 
corrupted:  it  receives 
2,1x =4  instead  of  x1,2=2. 
Applying the Chinese Remainder Theorem to decode 
the  residues  (x1,1,
,  x1,3,  x1,4,  x1,5,  x1,6)  yields 
24146389,  which  is  an  illegitimate  number  in  this 
RRNS,  and  the  error  is  detected.  On  the  other  hand, 
decoding  only  the  residues  (x1,1, x1,3, x1,4,  x1,5,  x1,6)
with moduli (m1, m3, m4, m5, m6) yields 16997, which 
is  legitimate  and  equal  to  the  decimal  content  of  b1.
Furthermore, as shown in Table 2 decoding any other 
5-tuple of residues gives illegitimate numbers. Hence 
the record can be correctly reconstructed. 
Proceedings of the 2003 International Conference on Dependable Systems and Networks (DSN’03) 
0-7695-1959-8/03 $17.00 (c) 2003 IEEE
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 07:07:04 UTC from IEEE Xplore.  Restrictions apply. 
Table 1. Example of encoding file f.
Record  Content 
Decimal content 
b1
b2
b3
b4
b5 
b6
b7
b8
b9
b10
b11
b12
b13
b14
“Be” 
“tt” 
“y “ 
“Bo” 
“tt” 
“er” 
“ h” 
“ad” 
“ s” 
“om” 
“e “ 
“bu” 
“tt” 
“er” 
16997 
29812 
31008 
17007 
29812 
25970 
8296 
24932 
8307 
28525 
25888 
25205 
29812 
25970 
xt,1 
1 
6 
12 
11 
6 
0 
8 
12 
5 
7 
2 
5 
6 
0 
xt,2 
2 
7 
3 
12 
7 
5 
1 
2 
12 
10 
13 
5 
7 
5 
xt,3 
14 
11 
0 
7 
11 
11 
0 
10 
11 
16 
14 
11 
11 
11 
xt,4 
11 
1 
0 
2 
1 
16 
12 
4 
4 
6 
10 
11 