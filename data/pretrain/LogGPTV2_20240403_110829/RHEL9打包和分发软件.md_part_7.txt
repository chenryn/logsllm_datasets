    $ rpmbuild -bb ~/rpmbuild/SPECS/cello.spec
    ```
:::
:::
::: section
::: titlepage
# []{#packaging-software_packaging-and-distributing-software.html#building-rpms-from-source-rpms_packaging-software}从源 RPM 构建二进制 RPM {.title}
:::
也可以从源 RPM 构建任何类型的 RPM。要做到这一点，请使用以下步骤。
::: itemizedlist
**步骤**
-   使用以下选项之一运行 `rpmbuild`{.literal}
    命令，并使用指定的源软件包：
    ``` literallayout
    # rpmbuild {-ra|-rb|-rp|-rc|-ri|-rl|-rs} [rpmbuild-options] SOURCEPACKAGE
    ```
:::
::: itemizedlist
**其他资源**
-   `rpmbuild(8)`{.literal} 手册页
:::
:::
::: section
::: titlepage
# []{#packaging-software_packaging-and-distributing-software.html#con_checking-rpms-for-sanity_packaging-software}检查 RPM 健全性 {.title}
:::
在创建了软件包后，需要检查软件包的质量。
检查软件包质量的主要工具是
[rpmlint](https://github.com/rpm-software-management/rpmlint){.link}。
`rpmlint`{.literal} 工具执行以下操作：
::: itemizedlist
-   提高 RPM 可维护性.
-   通过对 RPM 进行静态分析来启用完整性检查。
-   通过对 RPM 进行静态分析来启用错误检查。
:::
`rpmlint`{.literal} 工具可以检查二进制 RPM、源 RPM(SRPMs)和 SPEC
文件，因此它对打包的所有阶段都很有用，如以下部分所示。
请注意，`rpmlint`{.literal}
有非常严格的准则，因此有时可以接受跳过其中的一些错误和警告，如下例所示。
::: {.note style="margin-left: 0.5in; margin-right: 0.5in;"}
### 注意 {.title}
在以下部分中描述的示例中，`rpmlint`{.literal}
会不带任何选项运行，这会产生一个非详细的输出。如需了解每个错误或警告的详细说明，您可以运行
`rpmlint -i`{.literal}。
:::
:::
::: section
::: titlepage
# []{#packaging-software_packaging-and-distributing-software.html#checking-bello-for-sanity_packaging-software}检查 bello for sanity {.title}
:::
本节介绍在检查 bello SPEC 文件示例和 bello 二进制 RPM
时可能发生的警告和错误。
::: section
::: titlepage
## []{#packaging-software_packaging-and-distributing-software.html#checking-bello-spec-file_packaging-software}检查 bello SPEC 文件 {.title}
:::
::: example
[]{#packaging-software_packaging-and-distributing-software.html#idm140428016938368}
**例 3.2. 在适用于 bello 的 SPEC 文件中运行 `rpmlint`{.literal}
命令的输出**
::: example-contents
``` literallayout
$ rpmlint bello.spec
bello.spec: W: invalid-url Source0: https://www.example.com/bello/releases/bello-0.1.tar.gz HTTP Error 404: Not Found
0 packages and 1 specfiles checked; 0 errors, 1 warnings.
```
:::
:::
对于 `bello.spec`{.literal}，只有一个警告，表示 `Source0`{.literal}
指令中列出的 URL 不可访问。这是正常的，因为指定的
`example.com`{.literal} URL 不存在。假设我们预期此 URL
在未来工作，我们可以忽略这个警告。
::: example
[]{#packaging-software_packaging-and-distributing-software.html#idm140428030584080}
**例 3.3. 在 SRPM forllo 上运行 `rpmlint`{.literal} 命令的输出**
::: example-contents
``` literallayout
$ rpmlint ~/rpmbuild/SRPMS/bello-0.1-1.el8.src.rpm
bello.src: W: invalid-url URL: https://www.example.com/bello HTTP Error 404: Not Found
bello.src: W: invalid-url Source0: https://www.example.com/bello/releases/bello-0.1.tar.gz HTTP Error 404: Not Found
1 packages and 0 specfiles checked; 0 errors, 2 warnings.
```
:::
:::
对于 `bello`{.literal} SRPM，有一个新的警告，表示 URL 指令中指定的
`URL`{.literal} 不可访问。假设链接将在以后工作，我们可以忽略此警告。
:::
::: section
::: titlepage
## []{#packaging-software_packaging-and-distributing-software.html#checking-bello-binary-rpm_packaging-software}检查 bello 二进制 RPM {.title}
:::
在检查二进制 RPM 时，`rpmlint`{.literal} 会检查以下项目：
::: itemizedlist
-   Documentation
-   man page
-   致地使用文件系统层次结构标准
:::
::: example
[]{#packaging-software_packaging-and-distributing-software.html#idm140428030701360}
**例 3.4. 在 bello 的二进制 RPM 上运行 `rpmlint`{.literal} 命令的输出**
::: example-contents
``` literallayout
$ rpmlint ~/rpmbuild/RPMS/noarch/bello-0.1-1.el8.noarch.rpm
bello.noarch: W: invalid-url URL: https://www.example.com/bello HTTP Error 404: Not Found
bello.noarch: W: no-documentation
bello.noarch: W: no-manual-page-for-binary bello
1 packages and 0 specfiles checked; 0 errors, 3 warnings.
```
:::
:::
`no-documentation`{.literal} 和 `no-manual-page-for-binary`{.literal}
警告表示他 RPM 没有文档或 man
page，因为我们没有提供任何文档。除以上警告外，RPM 会传递
`rpmlint`{.literal} 检查。
:::
:::
::: section
::: titlepage
# []{#packaging-software_packaging-and-distributing-software.html#checking-pello-for-sanity_packaging-software}检查 pello for sanity {.title}
:::
本节显示在 pello SPEC 文件和 pello 二进制 RPM 示例中检查 RPM
健全时可能出现的警告和错误。
::: section
::: titlepage
## []{#packaging-software_packaging-and-distributing-software.html#checking-pello-spec-file_packaging-software}检查 pello SPEC 文件 {.title}
:::
::: example
[]{#packaging-software_packaging-and-distributing-software.html#idm140427927160448}
**例 3.5. 在 pello 的 SPEC 文件中运行 `rpmlint`{.literal} 命令的输出**
::: example-contents
``` literallayout
$ rpmlint pello.spec
pello.spec:30: E: hardcoded-library-path in %{buildroot}/usr/lib/%{name}
pello.spec:34: E: hardcoded-library-path in /usr/lib/%{name}/%{name}.pyc
pello.spec:39: E: hardcoded-library-path in %{buildroot}/usr/lib/%{name}/
pello.spec:43: E: hardcoded-library-path in /usr/lib/%{name}/
pello.spec:45: E: hardcoded-library-path in /usr/lib/%{name}/%{name}.py*
pello.spec: W: invalid-url Source0: https://www.example.com/pello/releases/pello-0.1.2.tar.gz HTTP Error 404: Not Found
0 packages and 1 specfiles checked; 5 errors, 1 warnings.
```
:::
:::
`invalid-url Source0`{.literal} 警告表示 `Source0`{.literal}
指令中列出的 URL 不可访问。这是正常的，因为指定的
`example.com`{.literal} URL 不存在。假设此 URL
将在以后正常工作，您可以忽略这个警告。
`hardcoded-library-path`{.literal} 错误建议，使用 `%{_libdir}`{.literal}
宏而不是使用硬编码的库路径。在本例中，可以安全地忽略这些错误。但是，对于将它们进行生产而言，请确保仔细检查所有错误。
::: example
[]{#packaging-software_packaging-and-distributing-software.html#idm140428028535616}
**例 3.6. 在 SRPM for pello 上运行 `rpmlint`{.literal} 命令的输出**
::: example-contents
``` literallayout
$ rpmlint ~/rpmbuild/SRPMS/pello-0.1.2-1.el8.src.rpm
pello.src: W: invalid-url URL: https://www.example.com/pello HTTP Error 404: Not Found
pello.src:30: E: hardcoded-library-path in %{buildroot}/usr/lib/%{name}
pello.src:34: E: hardcoded-library-path in /usr/lib/%{name}/%{name}.pyc
pello.src:39: E: hardcoded-library-path in %{buildroot}/usr/lib/%{name}/
pello.src:43: E: hardcoded-library-path in /usr/lib/%{name}/
pello.src:45: E: hardcoded-library-path in /usr/lib/%{name}/%{name}.py*
pello.src: W: invalid-url Source0: https://www.example.com/pello/releases/pello-0.1.2.tar.gz HTTP Error 404: Not Found
1 packages and 0 specfiles checked; 5 errors, 2 warnings.
```
:::
:::
此处新的 `invalid-url URL`{.literal} 错误是关于 `URL`{.literal}
指令的，它无法被访问。假设该 URL 将在以后有效，您可以安全地忽略此错误。
:::
::: section
::: titlepage
## []{#packaging-software_packaging-and-distributing-software.html#checking-pello-binary-rpm_packaging-software}检查 pello 二进制 RPM {.title}
:::
在检查二进制 RPM 时，`rpmlint`{.literal} 会检查以下项目：
::: itemizedlist
-   Documentation
-   man page
-   致地使用文件系统层次结构标准
:::
::: example
[]{#packaging-software_packaging-and-distributing-software.html#idm140427984303008}
**例 3.7. 在 pello 二进制 RPM 上运行 `rpmlint`{.literal} 命令的输出**
::: example-contents
``` literallayout
$ rpmlint ~/rpmbuild/RPMS/noarch/pello-0.1.2-1.el8.noarch.rpm
pello.noarch: W: invalid-url URL: https://www.example.com/pello HTTP Error 404: Not Found
pello.noarch: W: only-non-binary-in-usr-lib
pello.noarch: W: no-documentation
pello.noarch: E: non-executable-script /usr/lib/pello/pello.py 0644L /usr/bin/env
pello.noarch: W: no-manual-page-for-binary pello
1 packages and 0 specfiles checked; 1 errors, 4 warnings.
```
:::
:::
`no-documentation`{.literal} 和 `no-manual-page-for-binary`{.literal}
警告表示他 RPM 没有文档或 man page，因为没有提供任何文档。
`only-non-binary-in-usr-lib`{.literal} 警告表示您在
`/usr/lib/`{.literal}
中只提供了非二进制工件。该目录通常为共享对象文件保留，它们是二进制文件。因此，`rpmlint`{.literal}
预期 `/usr/lib/`{.literal} 目录中的至少一个或者多个文件是二进制的。
这是 `rpmlint`{.literal}
检查的一个示例，它是否符合文件系统层次结构标准。通常，使用 RPM
宏来确保文件正确放置。在本例中，可以安全地忽略这个警告。
`non-executable-script`{.literal} 错误警告
`/usr/lib/pello/pello.py`{.literal}
文件没有执行权限。`rpmlint`{.literal} 工具预期文件可以执行，因为文件包含
shebang。在本例中，您可以保留此文件而不具有执行权限，并忽略此错误。
除以上警告和错误外，RPM 传递 `rpmlint`{.literal} 检查。
:::
:::
::: section
::: titlepage
# []{#packaging-software_packaging-and-distributing-software.html#checking-cello-for-sanity_packaging-software}检查完整性的单元格 {.title}
:::
本节显示在 pello SPEC 文件和 cello 二进制 RPM 示例中检查 RPM
健全时可能出现的警告和错误。
::: section
::: titlepage
## []{#packaging-software_packaging-and-distributing-software.html#checking-cello-spec-file_packaging-software}检查 cello SPEC 文件 {.title}
:::
::: example
[]{#packaging-software_packaging-and-distributing-software.html#idm140427984358640}
**例 3.8. 在 SPEC 文件中为 cello 运行 `rpmlint`{.literal} 命令的输出**
::: example-contents
``` literallayout
$ rpmlint ~/rpmbuild/SPECS/cello.spec
/home/admiller/rpmbuild/SPECS/cello.spec: W: invalid-url Source0: https://www.example.com/cello/releases/cello-1.0.tar.gz HTTP Error 404: Not Found
0 packages and 1 specfiles checked; 0 errors, 1 warnings.
```
:::
:::
对于 `cello.spec`{.literal}，只有一个警告，表示 `Source0`{.literal}
指令中列出的 URL 不可访问。这是正常的，因为指定的
`example.com`{.literal} URL 不存在。假设此 URL
将在以后正常工作，您可以忽略这个警告。
::: example
[]{#packaging-software_packaging-and-distributing-software.html#idm140428020173712}
**例 3.9. 在 SRPM for cello 上运行 `rpmlint`{.literal} 命令的输出**
::: example-contents
``` literallayout
$ rpmlint ~/rpmbuild/SRPMS/cello-1.0-1.el8.src.rpm
cello.src: W: invalid-url URL: https://www.example.com/cello HTTP Error 404: Not Found
cello.src: W: invalid-url Source0: https://www.example.com/cello/releases/cello-1.0.tar.gz HTTP Error 404: Not Found
1 packages and 0 specfiles checked; 0 errors, 2 warnings.
```
:::
:::
对于 `cello`{.literal} SRPM，有一个新的警告，表示 URL 指令中指定的
`URL`{.literal} 不可访问。假设链接将在以后工作，您可以忽略此警告。
:::
::: section
::: titlepage
## []{#packaging-software_packaging-and-distributing-software.html#checking-cello-binary-rpm_packaging-software}检查 cello 二进制 RPM {.title}