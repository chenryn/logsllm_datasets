OSS sources are not well organized (i.e., dirs containing code clones
lack license and other common top-level software development
files §3.4.2) and the cloned OSS is not popular in our database (i.e.,
it is cloned by only a few OSS repos, resulting in a small number
of parent nodes). We found that false negatives in OSSPolice are
reported only if partial functionality from an OSS is reused with
too few features intact.
Comparative Analysis. Here we present a comparison of OSS
detection accuracy results with that of BAT [39] and LibScout
[7]. To do so, we first used BAT to generate a database of OSS
in F DroidC /C ++ and LibScout to build library profiles for OSS in
F DroidJ ava. We queried FDroid apps binaries against BAT and Lib-
Scout databases. The results are shown in Table 2. Compared to BAT,
OSSPolice reported more C/C++ OSS at a higher precision. Since
BAT does not detect OSS versions, we only report version detection
accuracy of OSSPolice in Table 2. To understand why OSSPolice
outperforms BAT, we conducted further analysis and found that
partially built libraries and internal code clones (§3.4.1) were the
2A large portion of labeled Java OSS were android support libraries (e.g. support-v4
and support-v13) whose versions are not distinguishable using features in OSSPolice.
11
main causes for false negatives and false positives, respectively.
Partially built libraries contain minimum part of OSS and have
few features, making the matching score in BAT lower than the
threshold. For example, all 41 uses of JPEG library were missed due
to low number of features. Internal code clones cause BAT to match
complex repos while only the reused OSS is present. For example,
all 13 reported uses of FreeType also included 5 matches against
MuPDF because FreeType is internally cloned by MuPDF, resulting in
false positives.
Similar to LibScout, OSSPolice achieves comparable OSS pre-
cision (P) and version precision (VP’), but reports more number
of OSS being used (R) and can detect more OSS versions (VM).
We investigated the differences between OSSPolice and LibScout
results and found that the main cause for false negatives of both
system is unused code removal (§3.4.1). Nonetheless, OSSPolice
outperformed LibScout. It is, however, worth noting that while
LibScout uses only normalized classes to identified Java software
reuse, we use two types of features, namely strings and normalized
classes. Thus, compared to LibScout, OSSPolice works with a larger
set of features, which is more indicative of OSS uses. For version
pinpointing, LibScout reports OSS versions for both complete and
incomplete profile matches. The versions returned in incomplete
profile matches were mostly inaccurate and unfit for comparison.
Hence, we only focus on results for complete profile matches (VM)
in Table 2. OSSPolice pinpoints more OSS versions for two reasons:
(1) OSSPolice extracts more features and can track uniqueness of
more OSS versions. For example, some versions of Facebook and
OkHttp can only be distinguished using version strings. (2) Version
pinpointing in LibScout cannot handle unused code removal be-
cause no unique profile, which is defined as hash of Java package
tree, will match in this case, since the package tree changes due of
code removal. OSSPolice reports some false positives in version
pinpointing as a result of cross matching of unique features (i.e.
app with PrettyTime and Joda-time binaries may falsely report
PrettyTime version using features from Joda-time).
6 FINDINGS
We used OSSPolice to conduct a large-scale OSS usage analysis
in Google Play Store apps. This section presents our findings. In
particular, we seek answers to the following questions.
• OSS Usage. What are some commonly used OSS? What are
they used for? (§6.1)
• OSS Licenses. What are some commonly used software
licenses for OSS? (§6.2).
• License violations. How many apps potentially violate OSS
licensing terms? In general, what is the attitude of OSS de-
velopers towards violators? (§6.3).
• Vulnerable OSS. How commonly can one find vulnerable
OSS versions in Android apps? How responsive app devel-
opers are to vulnerability disclosures? (§6.4).
Our dataset consists of 1.6 million free Android apps collected by
crawling Google Play Store in December 2016. Our OSS database
consisted of 3K popular C/C++ and 5K popular Java OSS.
Session J3:  Problematic PatchesCCS’17, October 30-November 3, 2017, Dallas, TX, USA2179Owner
# Uses
Name
Square
100,548
OkHttp
Facebook Bolts Framework
97,350
BSD
Facebook
FB Platform 85,742
Facebook SDK
Square
Apache
71,806
Picasso
Apache
65,457
Http Components Network Apache
Sergey T. Univ. Img Loader
Apache
60,845
56,997
Apache
Okio
Square
54,045
BSD
Twitter4J Twitter4J-Core
Apache
Common Codec
Apache
46,530
SignPost
OAuth Library
Apache
43,647
Type
License
Network Apache
Utils
Social
Image
Image
Utils
Social
Codec
Utils
Table 3: Top 10 detected Java OSS excluding Android and Google
OSS.
Type
Name
Owner
JPEG
Codec
JPEG Group
Codec
LibPNG
PNG Dev Group
Cocos2d-X Game
Cocos2d
FreeType
Font
FreeType
Network OpenSSL
OpenSSL
OpenSSL
Audio
OpenAL
OpenAL
Codec
Expat
Libexpat
Viewer
ArtifexSoftware MuPDF
LibTIFF
LibTIFF
Codec
Gailly and Adler Zlib
Codec
License
IJG
LibPNG
MIT
FTL
LGPL
MIT/X
GPL
BSD
Zlib
Table 4: Top 10 detected C/C++ OSS
# Uses
86,975
78,117
75,568
65,109
50,489
37,581
35,175
34,055
33,721
30,762
Public
Permissive
Permission
License
Public Domain
WTFPL
MIT
BSD
Apache
LGPL
Weakly Protective
Strong Protective
GPL
Network Protective AGPL
-
Unclassified
Native
Java
1.9%
0.3%
0.1%
0.1%
17.9% 28.5%
5.7%
16.7%
40.5% 7.0%
6.4%
4.2%
30.8%
1.6%
0.1%
0.3%
27.2% 5.6%
Table 5: Software license distribution in Java- and native-based OSS
6.1 OSS Use in Mobile Apps
Table 3 and Table 4 list the top 10 detected usage of Java excluding
Android and Google OSS (group id prefixed with com.android,
com.google) and C/C++ OSS in Android apps, respectively. Our
findings show that OSS usage distribution in Android apps is long-
tailed; only a few OSS repos are very commonly used and a large
number of OSS repos are used by only a few apps. Table 3 shows
that various types of Java OSS are used, ranging from Utils to Social,
while Table 4 shows that native OSS are mainly used for Codec
and Game. In addition, we find that some high usage OSS is due to
frequent indirect use. This means that the app developer will be
building a library that he is not aware of the full dependency, and
may lead him into legal issues or security harzards. For example, in
Table 4, LibPNG is reused internally by Cocos2d.
6.2 Software Licenses in OSS
We first analyzed the popularity of different software licenses in
Java- and native-based OSS projects. The license popularity result
on 3K C/C++ and 5K Java OSS is shown in Table 5.
Consistent with previous research findings [86], the most popular
software license for Java-based OSS is Apache license mostly due to
the license choice of the Java programming platform and Android,
which fall under this license. In comparison, most commonly used
software licenses for C/C++ OSS are GPL and MIT. Therefore, Java-
based OSS tend to be more permissive than C/C++ OSS.
Type
Name
Owner
Codec
iTextPDF
iText
Java Connector Utils
MySQL
Compiler
greenDAO
Generator
Proguard
Proguard
Compiler
Univ. of Waikato Weka-Dev
Utils
# Uses
1,325
396
75
27
15
Table 6: Top 5 most offended GPL/AGPL-licensed Java-based OSS
projects.
Owner
ArtifexSoftware
FFmpeg
Teluu
VideoLan
Belledonne Comm. BZRTP
Type
Name
Codec
MuPDF
FFmpeg†
Codec
Communication
PJSIP
VLC and X264 Codec
Communication
# Uses
34,055
4,326†
2,113
988
356
Table 7: Top 5 most offended GPL/AGPL-licensed native-based OSS
projects. † shows only GPL uses of all FFmpeg, which can be either
LGPL or GPL
6.3 License Violations
As discussed in §5.2, we believe that a similarity score of 0.5 or
higher with more than 50 matching features would generate a
very few false positives while detecting the presence of a C/C++
OSS component in an Android app. Similarly, a score of 0.7 or
higher with more than 100 matching features would generate a
very few false positives while detecting the presence of a Java OSS
component. However, given that GPL/AGPL license violation is
a strong claim that could result in severe legal consequences, we
chose to be conservative and adjusted the similarity threshold for
NormScore (§3.4.4) to 0.7 and CumScore (§3.4.4) to 200 for C/C++
OSS, and to 0.8 and 400 for Java OSS. Under these stricter conditions,
OSSPolice detected around 40K apps using at least one GPL/AGPL-
licensed C/C++-based OSS component while 2K apps using at least
one GPL/AGPL-licensed Java-based OSS component. The Validator
filtered out only 55 apps as there are clear indications that these
apps are open-sourced, flagging most apps as potential violators
of GPL/AGPL licensing terms. The most offended Java and C/C++
OSS projects under GPL/AGPL license are shown in Table 6 and
Table 7, respectively.