### 第44章 服务协定与行为

#### 44.3 数据和服务协定
- **44.3.1 数据协定**
- **44.3.2 版本问题**
- **44.3.3 服务协定和操作协定**
- **44.3.4 消息协定**
- **44.3.5 错误协定**

#### 44.4 服务的行为

#### 44.5 绑定
- **44.5.1 标准绑定**
- **44.5.2 标准绑定的功能**
- **44.5.3 WebSocket**

#### 44.6 宿主
- **44.6.1 自定义宿主**
- **44.6.2 WAS宿主**
- **44.6.3 预配置的宿主类**

#### 44.7 客户端
- **44.7.1 使用元数据**
- **44.7.2 共享类型**

#### 44.8 双工通信
- **44.8.1 双工通信的协定**
- **44.8.2 用于双工通信的服务**
- **44.8.3 用于双工通信的客户应用程序**

#### 44.9 路由
- **44.9.1 路由示例应用程序**
- **44.9.2 路由接口**
- **44.9.3 WCF路由服务**
- **44.9.4 为故障切换使用路由器**
- **44.9.5 改变协定的桥梁**
- **44.9.6 过滤器的类型**

#### 44.10 小结

### 第45章 部署网站和服务

#### 45.1 部署Web应用程序

#### 45.2 部署前的准备
- **45.2.1 创建ASP.NET 4.6 Web应用程序**
- **45.2.2 创建ASP.NET Core 1.0 Web应用程序**
- **45.2.3 ASP.NET 4.6的配置文件**
- **45.2.4 ASP.NET Core 1.0的配置文件**

#### 45.3 部署到IIS
- **45.3.1 使用IIS Manager准备Web应用程序**
- **45.3.2 Web部署到IIS**

#### 45.4 部署到Microsoft Azure
- **45.4.1 创建SQL数据库**
- **45.4.2 用SQL Azure测试本地网站**
- **45.4.3 部署到Microsoft Azure Web应用**

#### 45.5 部署到Docker

#### 45.6 小结

### 第Ⅰ部分 C#语言

#### 第1章 .NET应用程序体系结构

##### 本章要点
- 回顾.NET的历史
- 理解.NET Framework 4.6和.NET Core 1.0之间的差异
- 程序集和NuGet包
- 公共语言运行库
- Windows运行库的特性
- 编写“Hello, World!”程序
- 通用Windows平台
- 创建Windows应用程序的技术
- 创建Web应用程序的技术

##### 本章源代码下载
打开网页 [www.wrox.com/go/professionalcsharp6](http://www.wrox.com/go/professionalcsharp6)，单击Download Code选项卡即可下载本章源代码。本章代码分为以下几个主要的示例文件：
- DotnetHelloWorld
- HelloWorldApp (.NET Core)

#### 1.1 选择技术
近年来，.NET已经成为在Windows平台上创建各种类型应用程序的巨大生态系统。有了.NET，可以创建Windows应用程序、Web服务、Web应用程序以及用于Microsoft Phone的应用程序。

.NET的最新版本对上一版进行了很大的修改——也许是.NET自问世以来最大的修改。.NET的大部分代码已开放，还可以为其他平台创建应用程序。.NET的新版本（.NET Core）和NuGet包允许微软公司以更短的更新周期提供新特性。选择什么技术来创建应用程序并不容易决定。本章将提供这方面的帮助，包括用于创建Windows、Web应用程序和服务的不同技术的信息，指导选择什么技术进行数据库访问，并凸显了.NET和.NET Core之间的差异。

#### 1.2 回顾.NET历史
要更好地理解.NET和C#的可用功能，最好先了解它的历史。表1-1显示了.NET的版本、对应的公共语言运行库（Common Language Runtime, CLR）的版本、C#的版本和Visual Studio的版本，并指出相应版本的发布年份。除了知道使用什么技术之外，最好也知道不推荐使用什么技术，因为这些技术会被代替。

**表1-1: .NET版本及其相关信息**

| .NET   | CLR   | C#    | Visual Studio | 发布年份 |
|--------|-------|-------|---------------|----------|
| 1.0    | 1.0   | 1.0   | 2002          |          |
| 1.1    | 1.1   | 1.2   | 2003          |          |
| 2.0    | 2.0   | 2.0   | 2005          |          |
| 3.0    | 2.0   | 2.0   | 2005+扩展版   |          |
| 3.5    | 2.0   | 3.0   | 2008          |          |
| 4.0    | 4.0   | 4.0   | 2010          |          |
| 4.5    | 4.0   | 5.0   | 2012          |          |
| 4.5.1  | 4.0   | 5.0   | 2013          |          |
| 4.6    | 4.0   | 6     | 2015          |          |
| .NET Core 1.0 | CoreCLR | 6     | 2015+扩展版   |          |

下面各小节详细介绍表1-1，以及C#和.NET的发展。

##### 1.2.1 C# 1.0——一种新语言
C# 1.0是一种全新的编程语言，用于.NET Framework。开发它时，.NET Framework由大约3000个类和CLR组成。

由于法庭判决不允许微软公司更改Java代码后，Anders Hejlsberg设计了C#。Hejlsberg在微软公司工作之前，在Borland公司设计了Delphi编程语言（一种Object Pascal语言）。Hejlsberg在微软公司负责J++（Java编程语言的微软版本）。

鉴于Hejlsberg的背景，C#编程语言主要受到C++、Java和Pascal的影响。因为C#的创建晚于Java和C++，所以微软公司分析了其他语言中典型的编程错误，完成了一些不同的工作来避免这些错误。这些不同的工作包括：
- 在if语句中，布尔表达式是必须的（C++也允许在这里使用整数值）。
- 允许使用struct和class关键字创建值类型和引用类型（Java只允许创建自定义引用类型；在C++中，struct和class之间的区别只是访问修饰符的默认值不同）。
- 允许使用虚拟方法和非虚拟方法（这类似于C++, Java总是创建虚拟方法）。

现在，C#是一种纯粹的面向对象编程语言，具备继承、封装和多态性等特性。C#也提供了基于组件的编程改进，如委托和事件。

在.NET和CLR推出之前，每种编程语言都有自己的运行库。在C++中，C++运行库与每个C++程序链接起来。Visual Basic 6有自己的运行库VBRun。Java的运行库是Java虚拟机（Java Virtual Machine, JVM）——可以与CLR相媲美。CLR是每种.NET编程语言都使用的运行库。推出CLR时，微软公司提供了JScript .NET、Visual Basic .NET、Managed C++和C#。JScript .NET是微软公司的JavaScript编译器，与CLR和.NET类一起使用。Visual Basic .NET是提供.NET支持的Visual Basic。现在再次简称为Visual Basic。Managed C++是混合了本地C++代码与Managed .NET代码的语言。今天与.NET一起使用的新C++语言是C++/CLR。

.NET编程语言的编译器生成中间语言（Intermediate Language, IL）代码。IL代码看起来像面向对象的机器码，使用工具ildasm.exe可以打开包含.NET代码的DLL或EXE文件来检查IL代码。CLR包含一个即时（Just-In-Time, JIT）编译器，当程序开始运行时，JIT编译器会从IL代码生成本地代码。

**注意：** IL代码也称为托管代码。

CLR的其他部分是垃圾回收器（GC）、调试器扩展和线程实用工具。垃圾回收器负责清理不再引用的托管内存，这个安全机制使用代码访问安全性来验证允许代码做什么；调试器扩展允许在不同的编程语言之间启动调试会话（例如，在Visual Basic中启动调试会话，在C#库内继续调试）；线程实用工具负责在底层平台上创建线程。

.NET Framework的第1版已经很大了。类在名称空间内组织，以便于导航可用的3000个类。名称空间用来组织类，允许在不同的名称空间中有相同的类名，以解决冲突。.NET Framework的第1版允许使用Windows Forms（名称空间System.Windows.Forms）创建Windows桌面应用程序，使用ASP.NET Web Forms（System.Web）创建Web应用程序，使用ASP.NET Web Services与应用程序和Web服务通信，使用.NET Remoting在.NET应用程序之间更迅速地通信，使用Enterprise Services创建运行在应用程序服务器上的COM +组件。

ASP.NET Web Forms是创建Web应用程序的技术，其目标是开发人员不需要了解HTML和JavaScript。服务器端控件会创建HTML和JavaScript，这些控件的工作方式类似于Windows Forms本身。

C# 1.2和.NET 1.1主要是错误修复版本，改进较小。

**注意：** 继承在第4章中讨论，委托和事件在第9章中讨论。

**注意：** .NET的每个新版本都有Professional C#图书的新版本。对于.NET 1.0，这本书已经是第2版了，因为第1版是以.NET 1.0的Beta 2为基础出版的。目前，本书是第10版。

##### 1.2.2 带有泛型的C# 2和.NET 2
C# 2和.NET 2是一个巨大的更新。在这个版本中，改变了C#编程语言，建立了IL代码，所以需要新的CLR来支持IL代码的增加。一个大的变化是泛型。泛型允许创建类型，而不需要知道使用什么内部类型。所使用的内部类型在实例化（即创建实例）时定义。

C#编程语言中的这个改进也导致了Framework中多了许多新类型，例如System.Collections.Generic名称空间中新的泛型集合类。有了这个类，1.0版本定义的旧集合类就很少用在新应用程序中了。当然，旧类现在仍然在工作，甚至在新的.NET Core版本中也是如此。

**注意：** 本书一直在使用泛型，详见第6章。第11章介绍了泛型集合类。

##### 1.2.3 .NET 3.0 ——Windows Presentation Foundation
发布.NET 3.0时，不需要新版本的C#。3.0版本只提供了新的库，但它发布了大量新的类型和名称空间。Windows Presentation Foundation（WPF）可能是新框架最大的一部分，用于创建Windows桌面应用程序。Windows Forms包括本地Windows控件，且基于像素；而WPF基于DirectX，独立绘制每个控件。WPF中的矢量图形允许无缝地调整任何窗体的大小。WPF中的模板还允许完全自定义外观。例如，用于苏黎世机场的应用程序可以包含看起来像一架飞机的按钮。因此，应用程序的外观可以与之前开发的传统Windows应用程序非常不同。System.Windows名称空间下的所有内容都属于WPF，但System.Windows.Forms除外。有了WPF，用户界面可以使用XML语法设计XAML（XML for Applications Markup Language）。

.NET 3.0推出之前，ASP.NET Web Services和.NET Remoting用于应用程序之间的通信。Message Queuing是用于通信的另一个选择。各种技术有不同的优点和缺点，它们都用不同的API进行编程。典型的企业应用程序必须使用一个以上的通信API，因此必须学习其中的几项技术。WCF（Windows Communication Foundation）解决了这个问题。WCF把其他API的所有选项结合到一个API中。然而，为了支持WCF提供的所有功能，需要配置WCF。

.NET 3.0版本的第三大部分是Windows WF（Workflow Foundation）和名称空间System.Workflow。微软公司不是为几个不同的应用程序创建自定义的工作流引擎（微软公司本身为不同的产品创建了几个工作流引擎），而是把工作流引擎用作.NET的一部分。

有了.NET 3.0, Framework的类从.NET 2.0的8000个增加到约12000个。

**注意：** 在本书中，WPF参见第29、30、31、34、35和36章。WCF详见第44章。

##### 1.2.4 C# 3和.NET 3.5——LINQ
.NET 3.5和新版本C# 3一起发布。主要改进是使用C#定义的查询语法，它允许使用相同的语法来过滤和排序对象列表、XML文件和数据库。语言增强不需要对IL代码进行任何改变，因为这里使用的C#特性只是语法糖。所有的增强也可以用旧的语法实现，只是需要编写更多的代码。C#语言很容易进行这些查询。有了LINQ和lambda表达式，就可以使用相同的查询语法来访问对象集合、数据库和XML文件。

为了访问数据库并创建LINQ查询，LINQ to SQL发布为.NET 3.5的一部分。在.NET 3.5的第一个更新中，发布了Entity Framework的第一个版本。LINQ to SQL和Entity Framework都提供了从层次结构到数据库关系的映射和LINQ提供程序。Entity Framework更强大，但LINQ to SQL更简单。随着时间的推移，LINQ to SQL的特性在Entity Framework中实现了，并且Entity Framework会一直保留这些特性（现在它看起来与第一个版本非常不同）。

另一种引入为.NET 3.5一部分的技术是System.AddIn名称空间，它提供了插件模型。这个模型提供了甚至在过程外部运行插件的强大功能，但它使用起来也很复杂。

**注意：** LINQ详见第13章，Entity Framework的最新版本与.NET 3.5版本有很大差别，参见第38章。

##### 1.2.5 C# 4和.NET 4.0——dynamic和TPL
C# 4的主题是动态集成脚本语言，使其更容易使用COM集成。C#语法扩展为使用dynamic关键字、命名参数和可选参数，以及用泛型增强的协变和逆变。

其他改进在.NET Framework中进行。有了多核CPU，并行编程变得越来越重要。任务并行库（Task Parallel Library, TPL）使用Task类和Parallel类抽象出线程，更容易创建并行运行的代码。

因为用.NET 3.0创建的工作流引擎没有履行自己的诺言，所以全新的Windows Workflow Foundation成为.NET 4.0的一部分。为了避免与旧工作流引擎冲突，新的工作流引擎是在System.Activity名称空间中定义的。

C# 4的增强还需要一个新版本的运行库。运行库从版本2跳到版本4。

发布Visual Studio 2010时，附带了一项创建Web应用程序的新技术：ASP.NET MVC 2.0。与ASP.NET Web Forms不同，这项技术需要编写HTML和JavaScript，并使用C#和.NET的服务器端功能。ASP.NET MVC是定期更新的。

**注意：** C# 4的dynamic关键字参见第16章。任务并行库参见第21章。ASP.NET 5和ASP.NET MVC 6参见第40和41章。

##### 1.2.6 C# 5和异步编程
C# 5只有两个新的关键字：async和await。然而，它大大简化了异步方法的编程。在Windows 8中，触摸变得更加重要，不阻塞UI线程也变得更加重要。用户使用鼠标，习惯于花些时间滚动屏幕。然而，在触摸界面上使用手势时，反应不及时很不好。

Windows 8还为Windows Store应用程序（也称为Modern应用程序、Metro应用程序、通用Windows应用程序，最近称为Windows应用程序）引入了一个新的编程接口。