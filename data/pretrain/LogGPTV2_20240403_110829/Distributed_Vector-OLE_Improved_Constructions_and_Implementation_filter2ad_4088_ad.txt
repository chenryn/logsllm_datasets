### 1. GGM Tree Example

**Figure 1: Example of the GGM tree generated by the sender and partially learned by the receiver.**
- Parameters: \( k = 2 \), \( n = 8 \), and \( i = 3 \).
- The path not learned by the receiver is (010).
- For each level, the parties perform an Oblivious Transfer (OT) where the receiver learns the XOR of either the left or right children of that level.
- Using previously expanded sub-trees, this information allows the receiver to learn a new seed (nodes filled in blue), which can be further expanded by repeatedly calling \( G \) (the resulting nodes are filled in black).

The receiver can then appropriately set the \( i \)-th entry of \( r_2 \) so that \( r_{1i} + r_{2i} = \beta \). Note that as long as P2 obtains \( R_\beta \) in the key generation phase, the corrections can be applied during expansion.

### 2. Protocol 3: Distributed Known-Index Single Point FSS

**Parameters and Building Blocks:**
- \( (n - 1) \)-out-of-\( n \)-ROT
- Point function \( f: [n] \to G \) with \( f(i) = \beta \) and \( f(j) = 0 \) for all \( j \neq i \)
- Random shares \( \beta_1 \) and \( \beta_2 \) such that \( \beta_1 + \beta_2 = \beta \)

**Parties:**
- P1, P2

**Inputs:**
- P1: \( \beta_1 \)
- P2: \( \beta_2 \), \( i \)

**Key Generation (SPFSS.Gen(1\(\lambda\), \( f_i, \beta \))):**
1. The parties run a secure ROT.Gen(1\(\lambda\), \( n \), \( i \)) protocol.
2. The parties execute ROT.Expand locally:
   - P1 obtains keys \( K_{\text{ROT1}} \) and gets \( n \) random values \( \{r_j\}_{j \in [n]} \).
   - P2 obtains \( \{r_j\}_{j \in [n], j \neq i} \).
3. Let \( R = \sum_{j \in [n]} r_j \). P1 sends to P2 the value \( R_\beta = R - \beta_1 \).
4. P2 computes \( \tilde{r} = \beta_2 - R_\beta + \sum_{j \in [n] \setminus \{i\}} r_j \).
5. P1 outputs \( K_1 \leftarrow K_{\text{ROT1}} \).
6. P2 outputs \( K_2 \leftarrow (K_{\text{ROT2}}, \tilde{r}) \).

**Expansion (SPFSS.Eval(\( b \), \( K_b \), \( x \))):**
- If \( b = 1 \):
  - Compute \( v_1 \leftarrow \text{ROT.Expand}(1, K_1) \) and output \( v_1 \).
- If \( b = 2 \):
  - Parse \( K_2 \) as \( (K_{\text{ROT2}}, \tilde{r}) \).
  - Compute \( v_2 \leftarrow \text{ROT.Expand}(2, K_{\text{ROT2}}) \) and output \( -v_2 \).
  - If \( x = i \), output \( \tilde{r} \). Otherwise, output \( -v_2 \).

**Lemma 4.1:**
- Protocol 3 securely implements Known-Index SPFSS over a domain of size \( n \) in the \( (n - 1) \)-out-of-\( n \)-ROT hybrid model.
- With \( (n - 1) \)-out-of-\( n \)-ROT instantiated by the construction of Protocol 2, Protocol 3 requires \( O(\lambda \log n) \) communication and \( O(\lambda n) \) computation per party, where \( \lambda \) is the security parameter of the ROT.

**Proof Sketch:**
- The main argument in the security proof is that \( R_\beta \) is a one-time pad that masks \( \beta_1 \), given the property of \( (n - 1) \)-out-of-\( n \)-ROT that the output of P1 is a random vector. A detailed proof is provided in Appendix A.2.

### 3. Known-Indices MPFSS via Cuckoo Hashing

**Section Overview:**
- This section presents a reduction from known-index multi-point FSS to known index single point FSS.
- The multi-point setting is analogous to the SPFSS functionality of Protocol 3, but extended to functions that fix the value of \( t \geq 1 \) points.
- A naive reduction executes \( t \) independent instances of known-index SPFSS on the original database, resulting in an \( \Omega(tn) \) computational overhead.

**Protocol 4: Distributed Known-Indices MPFSS**

**Public Parameters:**
- Input domain \([n]\)
- Number of points \( t \)
- Statistical security parameter \( \eta \)
- Cuckoo hash parameters: table size \( m \) and number of hash functions \( \kappa \), where \( (m, \kappa) = \text{ParamGen}(n, t, \eta) \)

**Point Function:**
- \( f_{i, \boldsymbol{\beta}}: [n] \to \mathbb{F} \) with \( f_{i, \boldsymbol{\beta}}(i_j) = \beta_{1j} \) for \( j \in [t] \) and \( f_{i, \boldsymbol{\beta}}(j') = 0 \) for all other inputs.

**Parties:**
- P1, P2

**Inputs:**
- P1: \( x \), \( \beta_{11}, \ldots, \beta_{1t} \)
- P2: \( i_1, \ldots, i_t \), \( \beta_{21}, \ldots, \beta_{2t} \)

**Key Generation (MPFSS.Gen(1\(\lambda\), \( f_{i, \boldsymbol{\beta}} \))):**
1. P2 randomly chooses \( \kappa \) hash functions \( \{h_j\}_{j \in [\kappa]} \) with \( h_j: [n] \to [m] \). P2 inserts \( i_1, \ldots, i_t \) into a Cuckoo hash table \( T \) of size \( m \) using \( h_1, \ldots, h_\kappa \), and sends the \( \kappa \) hash functions to P1. Let empty bins in \( T \) be denoted by \( \perp \).
2. P1 and P2 do simple hashing with all \( h_1, \ldots, h_\kappa \) on the domain \([n]\) to independently build \( m \) buckets \( I_1, \ldots, I_m \). Each bucket is sorted in some canonical order. The parties compute functions \( \text{pos}_l: I_l \to [|I_l|] \) that map values to their position in the \( l \)-th bucket.
3. Let \( u = \{(\beta_{1j}, l_j)\} \) where \( l_j \) is the location of \( i_j \) in \( T \). The parties run a secure 2PC protocol to obtain random shares \( v_1 \) and \( v_2 \) of the vector \( v \in \mathbb{F}^m \) defined as:
   \[
   v_j = \begin{cases}
   a & \text{if } (a, j) \in u, \\
   0 & \text{otherwise}.
   \end{cases}
   \]
4. For all \( l \in [m] \), P1 and P2 run \( \text{SPFSS.Gen}(1\lambda, g_l) \) (Protocol 3) to obtain seeds \( (K_l, \tilde{r}_l) \).

This approach leverages cuckoo hashing to efficiently distribute the \( t \) SPFSS instances across \( m \) smaller parts, reducing the computational overhead compared to the naive approach.