MySQL Version ≤ 5 ...............................................................................................351
Contents ◾ xix
Guessing Table Names ....................................................................................................351
Guessing Columns.................................................................................................352
SQL Injection to Remote Command Execution ....................................................352
Reading Files ..................................................................................................................353
Writing Files ...................................................................................................................353
Blind SQL Injection ..............................................................................................355
Boolean-Based SQLi .....................................................................................355
True Statement ......................................................................................................355
False Statement ......................................................................................................356
Enumerating the DB User .....................................................................................356
Enumerating the MYSQL Version .........................................................................358
Guessing Tables .....................................................................................................358
Guessing Columns in the Table .............................................................................359
Extracting Data from Columns ............................................................................360
Time-Based SQL Injection ....................................................................................361
Vulnerable Application ...................................................................................................361
Testing for Time-Based SQL Injection ..........................................................................362
Enumerating the DB User ....................................................................................362
Guessing the Table Names ....................................................................................363
Guessing the Columns ..........................................................................................364
Extracting Data from Columns .............................................................................365
Automating SQL Injections with Sqlmap .............................................................366
Enumerating Databases .........................................................................................367
Enumerating Tables ...............................................................................................367
Enumerating the Columns ....................................................................................367
Extracting Data from the Columns ......................................................................368
HTTP Header–Based SQL Injection ...................................................................368
Operating System Takeover with Sqlmap .............................................................369
OS-CMD ........................................................................................................................369
OS-SHELL ....................................................................................................................369
OS-PWN..........................................................................................................................370
XSS (Cross-Site Scripting) ..............................................................................................371
How to Identify XSS Vulnerability .................................................................................371
Types of Cross-Site Scripting ..........................................................................................371
Reflected/Nonpersistent XSS ..........................................................................................372
Vulnerable Code ....................................................................................................372
Medium Security ............................................................................................................373
Vulnerable Code ....................................................................................................373
High Security .................................................................................................................373
Bypassing htmlspecialchars ....................................................................................374
UTF-32 XSS Trick: Bypass 1 ..........................................................................................375
Svg Craziness: Bypass 2 ...................................................................................................375
Bypass 3: href Attribute ..................................................................................................376
Stored XSS/Persistent XSS .............................................................................................377
Payloads .........................................................................................................................377
Blind XSS .......................................................................................................................378
DOM-Based XSS ...........................................................................................................378
xx ◾ Contents
Detecting DOM-Based XSS ..................................................................................378
Sources (Inputs) ............................................................................................378
Sinks (Creating/Modifying HTML Elements) .............................................378
Static JS Analysis to Identify DOM-Based XSS ....................................................384
How Does It Work? ...............................................................................................385
Setting Up JSPRIME ............................................................................................385
Dominator: Dynamic Taint Analysis .............................................................................390
POC for Internet Explorer .............................................................................................394
POC for Chrome ...........................................................................................................394
Pros/Cons .......................................................................................................................395
Cross Browser DOM XSS Detection ..............................................................................395
Types of DOM-Based XSS ............................................................................................397
Reflected DOM XSS ............................................................................................397
Stored DOM XSS .................................................................................................397
Exploiting XSS .....................................................................................................399
Cookie Stealing with XSS .....................................................................................399
Exploiting XSS for Conducting Phishing Attacks .................................................402
Compromising Victim’s Browser with XSS ...........................................................404
Exploiting XSS with BeEF .............................................................................................405
Setting Up BeEF on BackTrack .....................................................................................405
Demo Pages ...................................................................................................................408
BeEF Modules ......................................................................................................409
Module: Replace HREFs .............................................................................409
Module: Getcookie ......................................................................................409
Module: Tabnabbing ....................................................................................410
BeEF in Action ......................................................................................................412
Cross-Site Request Forgery (CSRF) ................................................................................413
Why Does a CSRF Attack Work? ...................................................................................413
How to Attack ................................................................................................................413
GET-Based CSRF ...........................................................................................................414
POST-Based CSRF .........................................................................................................414
CSRF Protection Techniques ..........................................................................................415
Referrer-Based Checking ................................................................................................415
Anti-CSRF Tokens .........................................................................................................415
Predicting/Brute Forcing Weak Anti-CSRF Token Algorithm .......................................416
Tokens Not Validated upon Server .................................................................................416
Analyzing Weak Anti-CSRF Token Strength .................................................................417
Bypassing CSRF with XSS .............................................................................................419
File Upload Vulnerabilities ....................................................................................421
Bypassing Client Side Restrictions ........................................................................423
Bypassing MIME-Type Validation .......................................................................423
Real-World Example ......................................................................................................425
Bypassing Blacklist-Based Protections...................................................................425
Case 1: Blocking Malicious Extensions .................................................................425
Bypass..........................................................................................................426
Case 2: Case-Sensitive Bypass ...............................................................................426
Bypass..........................................................................................................426
Contents ◾ xxi
Real-World Example ......................................................................................................426
Vulnerable Code ...................................................................................................426
Case 3: When All Dangerous Extensions Are Blocked .........................................426
XSS via File Upload .....................................................................................427
Flash-Based XSS via File Upload .................................................................428
Case 4: Double Extensions Vulnerabilities ............................................................429
Apache Double Extension Issues ..................................................................429
IIS 6 Double Extension Issues .....................................................................429
Case 5: Using Trailing Dots .................................................................................429
Case 6: Null Byte Trick ........................................................................................429
Case 7: Bypassing Image Validation ......................................................................429
Case 8: Overwriting Critical Files .........................................................................430
Real-World Example .......................................................................................................431
File Inclusion Vulnerabilities ...........................................................................................431
Remote File Inclusion ....................................................................................................432
Patching File Inclusions on the Server Side ....................................................................433
Local File Inclusion ..............................................................................................433
Linux ....................................................................................................................434
Windows ..............................................................................................................434
LFI Exploitation Using /proc/self/environ .............................................................434
Log File Injection..................................................................................................436
Finding Log Files: Other Tricks ............................................................................440
Exploiting LFI Using PHP Input ..........................................................................440
Exploiting LFI Using File Uploads .......................................................................441
Read Source Code via LFI ....................................................................................442
Local File Disclosure Vulnerability .......................................................................443
Vulnerable Code ..........................................................................................443
Local File Disclosure Tricks ..................................................................................445
Remote Command Execution...............................................................................446
Uploading Shells ...................................................................................................448
Server Side Include Injection .................................................................................452
Testing a Website for SSI Injection .................................................................................452
Executing System Commands ........................................................................................453
Spawning a Shell .............................................................................................................453
SSRF Attacks ..................................................................................................................454
Impact ............................................................................................................................455
Example of a Vulnerable PHP Code ......................................................................456
Remote SSRF ........................................................................................................457
Simple SSRF .................................................................................................457
Partial SSRF .................................................................................................458
Denial of Service ............................................................................................................463
Denial of Service Using External Entity Expansion (XEE) ...................................463
Full SSRF .............................................................................................................464
dict:// ...........................................................................................................464
gopher:// .......................................................................................................465
http:// ...........................................................................................................465
Causing the Crash ................................................................................................466
xxii ◾ Contents
Overwriting Return Address ..........................................................................................467
Generating Shellcode .....................................................................................................467
Server Hacking ..............................................................................................................469
Apache Server .................................................................................................................470
Testing for Disabled Functions ..............................................................................470
Open _ basedir Misconfiguration ...................................................................472
Using CURL to Bypass Open _ basedir Restrictions ......................................474
Open _ basedir PHP 5.2.9 Bypass ..................................................................475
Reference ........................................................................................................................476
Bypassing open _ basedir Using CGI Shell ....................................................476
Bypassing open _ basedir Using Mod _ Perl, Mod _ Python ..............477
Escalating Privileges Using Local Root Exploits ............................................................477
Back Connecting ...........................................................................................................477
Finding the Local Root Exploit ......................................................................................478
Usage ..............................................................................................................................478
Finding a Writable Directory ..........................................................................................479
Bypassing Symlinks to Read Configuration Files ...........................................................480
Who Is Affected? ............................................................................................................481
Basic Syntax ....................................................................................................................481
Why This Works ...................................................................................................482
Symlink Bypass: Example 1 ..................................................................................482
Finding the Username ..........................................................................................482
/etc/passwd File ....................................................................................483
/etc/valiases File ................................................................................483
Path Disclosure ............................................................................................483
Uploading .htaccess to Follow Symlinks ...............................................................484
Symlinking the Configuration Files ......................................................................484
Connecting to and Manipulating the Database .............................................................485
Updating the Password ..................................................................................................486
Symlink the Root Directory .................................................................................486
Example 3: Compromising WHMCS Server ........................................................487
Finding a WHMCS Server ............................................................................................487
Symlinking the Configuration File ................................................................................488
WHMCS Killer ....................................................................................................488
Disabling Security Mechanisms ............................................................................490
Disabling Mod _ Security ..............................................................................490
Disabling Open _ basedir and Safe _ mode ...........................................490
Using CGI, PERL, or Python Shell to Bypass Symlinks ........................................491
Conclusion ......................................................................................................................491
Index .................................................................................................................................493
Preface
Ethical hacking strikes all of us as a subject that requires a great deal of prerequisite knowledge
about things like heavy duty software, languages that includes hordes of syntaxes, algorithms
that could be generated by maestros only. Well that’s not the case, to some extent. This book
introduces the steps required to complete a penetration test, or ethical hack. Requiring no prior
hacking experience, the book explains how to utilize and interpret the results of modern day
hacking tools that are required to complete a penetration test. Coverage includes Backtrack Linux,
Google Reconnaissance, MetaGooFil, dig, Nmap, Nessus, Metasploit, Fast Track Autopwn,
Netcat, and Hacker Defender rootkit. Simple explanations of how to use these tools and a four-
step methodology for conducting a penetration test provide readers with a better understanding
of offensive security.
Being an ethical hacker myself, I know how difficult it is for people who are new into hacking
to excel at this skill without having any prior knowledge and understanding of how things work.
Keeping this exigent thing in mind, I have provided those who are keen to learn ethical hacking
with the best possible explanations in the most easy and understandable manner so that they will
not only gain pleasure while reading, but they will have the urge to put into practice what have
they learned from it.
The sole aim and objective of writing this book is to target the beginners who look for a com-
plete guide to turn their dream of becoming an ethical hacker into a reality. This book elucidates
the building blocks of ethical hacking that will help readers to develop an insight of the matter in
hand. It will help them fathom what ethical hacking is all about and how one can actually run a
penetration test with great success.
I have put in a lot of hard work to make this book a success. I remember spending hours and
hours in front of my computer typing indefatigably, ignoring all the text messages of my friends
when they asked me to come along and spend some time with them, which left me despondent,
but now, when I see my book finally completed, it gives me immense pleasure that the efforts of a
whole year have finally paid off.
This book came out as a result of my own experiences during my ethical hacking journey.
Experiences that are worth sharing with all the passionate people out there.
It makes me elated to the core when I see my third book on the subject of hacking published,
and I hope and pray that everyone likes it.
Best of luck to everyone out there.
Rafay Baloch
xxiii
Chapter 9
Postexploitation
So we have successfully exploited the target and managed to gain access to it. Now we are into the
postexploitation phase, which is the last phase of our penetration testing process. In this phase, we
will learn to exploit our targets further, escalating privileges and penetrating the internal network
even more. Meterpreter, which is the heart of this chapter, makes the postexploitation process
much easier.
Meterpreter contains many built-in scripts written in ruby; we can also add and modify meter-
preter scripts based on our requirements or just for exploration.
The goals of this chapter are as follows:
Gaining situation awareness in Windows/Linux after target compromise
Using Meterpreter scripts to perform reconnaissance
Using various methods for escalating privileges
Maintaining access
Penetrating the internal network further
Acquiring Situation Awareness
Immediately after compromising a host, you need to gain information about where the host is
located on the internal network and its functionality, which would include hostname, interfaces,
routes, and services that our host is listening to. The more you are familiar with the operating
system the more you can enumerate.
Enumerating a Windows Machine
Windows would be one of our common targets, since it is the most used operating system in the
corporate environment. Since most of you are familiar with Windows, it would be easy to enumer-
ate it. Our main goals would be to enumerate the network, mainly where the host is, find out what
other hosts are reachable from our compromised host, the interfaces, and the services.
So let’s assume that we have already compromised a Windows host, say, by using our
favorite ms08 _ 067 _ netapi exploit, and opened up a meterpreter session. From within
231
232 ◾ Ethical Hacking and Penetration Testing Guide
our Meterpreter session, we can type the “shell” command, which will open our command
prompt.
So here are some of the Windows shell commands to gain situation awareness:
ipconfig—This command will list all the interfaces, the IP addresses, gateways, and the
MAC addresses.
ipconfig/all—This command will list additional information about the interfaces such as
DNS servers.
ipconfig/displaydns—This command will display the DNS cache. The screenshot
shows the A record of the host rafayhackingarticles.net.
arp –a—You must be familiar with this command from our “Network Sniffing” chapter
(Chapter 6). This command displays the Arp cache; using it you can figure out reachable
systems from our hosts.
netstat –ano—A very useful command, this can be used to list all the connections estab-
lished from the current computer on a particular port.
Route Print—This will display the routing table of our computer; the netstat –r
command can also be used for this.
tasklist/svc—This is a very useful command to enumerate all the services running on our
target computer. From the following screenshot we can see that our victim is running AVG
antivirus; this knowledge would be very helpful for us when we try to bypass the antivirus.
Postexploitation ◾ 233
net start/net stop—The net start command will display all the running
services on the target computer. We can stop a running service, for example, AVG antivirus,
by using the net stop command. The syntax for net start/net stop commands
are as follows:
net start 
net stop 
netsh—netsh is a very useful command line utility for both network administrators and
hackers/penetration testers. It can be used to gather information about firewall rules and so
on. For example, we can turn off a firewall by issuing the following command:
netsh firewall set opmode disable
But we will require administrative privileges to disable the firewall. We will learn about privilege
escalation later in the chapter.
Enumerating Local Groups and Users
The following two commands would be really helpful to enumerate local groups and users:
net user—This will list all local users such as guests and administrators.
net localgroup—This command will list all the local groups. For example, if we
want to display all the local groups for administrators, we have to type “net localgroup
administrators.”
net user \domain—This command would list users in a group.
net user \domain—This command would list all the users in a particular domain. It is
very useful for identifying domain admins.
Enumerating a Linux Machine
Compared to Windows it’s less likely that you will come across a Linux host in your penetration
tests. We have already learnt about the basics of operating Linux in our “Linux Basics” chapter
234 ◾ Ethical Hacking and Penetration Testing Guide
(Chapter 2); so by now you must be familiar with some of the commands for enumerating a
Linux-based host.
ifconfig—This is the same as the ipconfig command; it displays interfaces and associ-
ates IP/MAC addresses.
pwd—This lists the current ID.
ls—This lists the files in a particular directory.
find—This command is useful if you want to find a particular file from a particular path.
find  -name filename
who/last—This command displays the users currently logged in on a machine; the last
command displays the login history.
whoami—This command tells your current privileges on a machine.
uname –a—This displays information about the kernel version, and could be very useful
when selecting Linux-based privilege escalation exploits.
touch—This is used to create a 0 byte file. However, this will only work if you have write
permissions on the current directory.
cat/etc/passwd—The /etc/passwd file can be used to enumerate local users on a sys-
tem; the good thing about this file is that it is readable by any low-privilege user.
cat/etc/hosts/—The /etc/host file is used to perform domain to IP mapping.
cat/etc/group/—The /etc/group file is used to enumerate all the local groups.
cat/etc/resolv.conf—This file is used to locate the name servers on a local machine.
Postexploitation ◾ 235
Enumerating with Meterpreter
Meterpreter can also be used to acquire situation awareness as it has a built-in capability to execute
OS commands. I would recommend that you mostly use Metasploit for enumeration and data
mining. Alternatively, you can switch between the meterpreter shell and the Windows shell. Let’s
take a look at some of the commands in Meterpreter.
We type the help command to see all the available commands in meterpreter. The list would
contain different types of commands to accomplish a specific task. Let’s talk about a few of them
important for acquiring system awareness.
sysinfo command—The sysinfo command provides useful information about our target.
networking commands—The networking commands are identical to what we would
use on a Windows/Linux shell. These commands include ipconfig, ifconfig, portfoward,
and route.
Identifying Processes
The following commands could be used to identify a process user IDS.
PS—This is the same as the tasklist command; it will display all the processes.
getuid—This will return the current uid of the user.
getpid—This will print the current process id.
Interacting with the System
The commands for interacting with system using meterpreter are identical to what we use in
linux on daily basis. However, in meterpreter these commands can also be used to interact with
windows systems as well. Here are the basic commands:
cd—Used to navigate between directories.
cat—Used to output contents of a file on the screen.
search—Used to search a particular file.