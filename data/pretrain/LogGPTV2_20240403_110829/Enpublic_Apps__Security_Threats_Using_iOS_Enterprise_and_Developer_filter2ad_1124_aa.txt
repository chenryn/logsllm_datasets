# Title: Enpublic Apps: Security Threats Using iOS Enterprise and Developer Certificates

## Authors
- Min Zheng
- Hui Xue
- Yulong Zhang
- Tao Wei
- John C. S. Lui

### Abstract
Compared to Android, iOS is generally considered more secure. However, both jailbroken and non-jailbroken iOS devices have several vulnerabilities. For iOS, applications interact with the underlying system using Application Programming Interfaces (APIs). Some of these APIs are undocumented and Apple prohibits their use in apps distributed via the App Store. These "private APIs" provide powerful features but can pose significant security risks if misused. Additionally, apps that use private APIs can bypass the App Store by using "Apple’s Enterprise/Developer Certificates" for distribution, posing a threat to the iOS ecosystem. This paper presents the design and implementation of iAnalytics, a tool that automatically analyzes the usage of private APIs and vulnerabilities in "enpublic" apps—iOS apps distributed to the public using enterprise certificates. We analyzed 1,408 enpublic iOS apps and found that 60% used private APIs, 1% contained URL scheme vulnerabilities, and 64% transmitted or stored sensitive information insecurely. We also identified 25 critical and security-sensitive private APIs on iOS 6/7/8 and filed one Common Vulnerabilities and Exposures (CVE) report.

### 1. Introduction
As of the end of 2013, Apple had attracted around 800 million iOS users, with over one million apps available in the iOS App Store. Despite the popularity and the perception that iOS is more secure than Android due to its controlled distribution channel and rigorous app review process, there are still potential risks for iOS systems.

In February 2012, Apple banned all apps from Qihoo, a prominent Chinese vendor, because they used iOS private APIs and encrypted function calls in their apps. Apple has a policy that forbids non-Apple apps in the App Store from using private APIs. Shortly after, Apple issued a second ban, removing all Qihoo apps from the App Store after an official warning. The reason was that Qihoo released "enterprise" apps to the public, which Apple restricts to company employees only.

### 2. Background
#### 2.1 iOS Developer Programs
iOS developers use tools like Xcode and iOS simulators to develop apps. To distribute apps to legal (non-jailbroken) iOS devices, developers must join one of three iOS developer programs: Standard, Enterprise, or University. Each program has different distribution capabilities:
- **Standard Program**: Allows distribution via the App Store or ad hoc channels.
- **Enterprise Program**: Allows distribution through ad hoc and in-house channels.
- **University Program**: Does not allow app distribution.

Although Apple restricts the use of enterprise and developer apps to company employees and developers, many vendors and malware writers exploit this method to distribute apps or malware to the public. The advantage of using enterprise and developer certificates is that developers can use private APIs for advanced functionalities and bypass the App Store's review process.

#### 2.2 Ad Hoc and In-House Distribution
##### 2.2.1 Ad Hoc Distribution
Ad hoc distribution allows both standard and enterprise programs to distribute iOS apps. These apps are .ipa files containing runtime resources and an ad hoc provisioning profile. The profile includes the app ID, developer certificate, and unique device IDs (UDIDs) of designated devices. Developers can register up to 100 devices per membership year. After registration, developers or testers can install the .ipa file on designated devices via iTunes or iOS RPC communication libraries.

##### 2.2.2 In-House Distribution
The enterprise program can use the in-house channel to distribute iOS apps. The in-house provisioning profile can serve an unlimited number of devices. The itms-service supports over-the-air installation of custom-developed in-house apps without using iTunes or the App Store. The installation process involves checking the status of the distribution certificate and installing the app and profile on the device.

### 3. System Design and Methodology
To detect and analyze enpublic apps, we designed iAnalytics, a security evaluation system for iOS enterprise/developer apps. The workflow of iAnalytics is as follows:
- **Collection**: An .ipa crawler collects enpublic apps from the Internet.
- **Detection**:
  - **Private API Detection**: Generates a list of private APIs from the iOS SDK and uses a detector to identify private API calls.
  - **Vulnerability Detection**: Detects URL scheme vulnerabilities and sensitive information leakage.
- **Analysis**: Summarizes findings and generates reports for security analysts.

### 4. iOS Private APIs Detection
#### 4.1 Introduction to Private APIs
iOS private APIs are undocumented and provide powerful features. Misuse of these APIs can lead to serious security consequences. We present the methodology for obtaining a list of private APIs and the implementation of the iOS private APIs detector.

### Conclusion
This paper provides a detailed study of the threats posed by the misuse of private APIs in enpublic apps. We highlight the gap between Apple's regulations and the abuse of enterprise and developer certifications. Our contributions include the design and implementation of iAnalytics, which can detect and analyze the usage of private APIs and vulnerabilities in enpublic apps. Our findings indicate that a significant number of enpublic apps use private APIs and contain security vulnerabilities, emphasizing the need for better monitoring and management of such apps.