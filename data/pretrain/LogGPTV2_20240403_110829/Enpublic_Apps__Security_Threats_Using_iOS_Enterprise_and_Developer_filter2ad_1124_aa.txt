title:Enpublic Apps: Security Threats Using iOS Enterprise and Developer
Certificates
author:Min Zheng and
Hui Xue and
Yulong Zhang and
Tao Wei and
John C. S. Lui
Enpublic Apps: Security Threats Using iOS Enterprise and
Developer Certiﬁcates
Min Zheng
x
y
, Hui Xue
y
The Chinese University of Hong Kong,
, Yulong Zhang
x
x
, Tao Wei
x
and John C.S. Lui
y
FireEye Inc.
ABSTRACT
Compared with Android, the conventional wisdom is that
iOS is more secure. However, both jailbroken and non-
jailbroken iOS devices have number of vulnerabilities. For
iOS, apps need to interact with the underlying system using
Application Programming Interfaces (APIs). Some of these
APIs remain undocumented and Apple forbids apps in App
Store from using them. These APIs, also known as “private
APIs”, provide powerful features to developers and yet they
may have serious security consequences if misused. Further-
more, apps which use private APIs can bypass the App Store
and use the “Apple’s Enterprise/Developer Certi(cid:12)cates” for
distribution. This poses a signiﬁcant threat to the iOS e-
cosystem. So far, there is no formal study to understand
these apps and how private APIs are being encapsulated.
We call these iOS apps which distribute to the public using
enterprise certiﬁcates as “enpublic” apps. In this paper, we
present the design and implementation of iAnalytics, which
can automatically analyze “enpublic” apps’ private API us-
ages and vulnerabilities. Using iAnalytics, we crawled and
analyzed 1,408 enpublic iOS apps. We discovered that: 844
(60%) out of the 1408 apps do use private APIs, 14 (1%) app-
s contain URL scheme vulnerabilities, 901 (64%) enpublic
apps transport sensitive information through unencrypted
channel or store the information in plaintext on the phone.
In addition, we summarized 25 private APIs which are cru-
cial and security sensitive on iOS 6/7/8, and we have ﬁled
one CVE (Common Vulnerabilities and Exposures) for iOS
devices.
1.
INTRODUCTION
As of the end of 2013, Apple has attracted around 800
million iOS users [21] and there are over one million apps in
the iOS App Store [12]. According to Apple’s “Creating Jobs
Through Innovation” report[4], there are more than 275,000
registered iOS developers in the U.S. Despite the popularity,
few iOS malware have been discovered [32].
In addition,
it was reported [24] that iOS is more secure than Android
Permission to make digital or hard copies of part or all of this work for personal or
classroom use is granted without fee provided that copies are not made or distribut-
ed for proﬁt or commercial advantage, and that copies bear this notice and the full
citation on the ﬁrst page. Copyrights for third-party components of this work must
be honored. For all other uses, contact the owner/author(s). Copyright is held by the
author/owner(s).
ASIA CCS’15, April 14–17, 2015, Singapore..
Copyright c⃝ 2015 ACM 978-1-4503-3245-3/15/04 ...$15.00.
http://dx.doi.org/10.1145/2714576.2714593 .
due to its controlled distribution channel and comprehensive
apps review. However, there are still potential risks for iOS
systems.
In February 2012, Apple banned all apps from Qihoo [3],
a prominent Chinese vendor for anti-virus software, web
browser and search engine. This major incident happened
because Qihoo used iOS private APIs and encrypted the
function calls in its iOS apps, and Apple has a policy that
forbids any non-Apple apps in its App Store from using pri-
vate APIs. Shortly after that, the story developed further
when Qihoo received a “double blow” [20] from Apple, which
banned every single Qihoo app from iOS app store after an
oﬃcial warning. The reason for this double blow was rather
new: Qihoo released their “enterprise” apps to the public but
Apple restricts the enterprise apps to be used by employees
of that company only, instead of everyone in public.
So what are private APIs and enterprise apps? Why Apple
is so vigilant on their usages? In fact, iOS apps on any non-
jailbroken device can be classiﬁed into two categories based
on how they are being distributed. Apps which are distribut-
ed through the Apple’s App Store are the most common to
users and we call them as “normal” apps. The other cateory
is the “enterprise” or “developer” apps which are distributed
under the enterprise/developer certi(cid:12)cates. Note that these
“enterprise” and “developer” apps are not distributed via the
App Store, hence, they are not regulated by the Apple’s re-
view process [2]. Often, iOS apps use Apple’s Application
Programming Interfaces (APIs) to interact with the iOS sys-
tem for system resources and services. Some of these iOS
APIs are “private” in the sense that only apps developed by
Apple (Apple apps) can use them and other apps using these
private APIs are not allowed on the Apple App Store. These
apps using private APIs can only be distributed using the
“enterprise” or “developer” certiﬁcates which grant a limited
number of developers or employee users per enterprise (or
company). Public APIs are often used to interact with iOS
system for resource allocation or service request. Private
APIs, however, are much more powerful comparing to the
public ones. To illustrate, consider an iOS 6.0 device. A
normal app can call the public Twitter APIs to post a tweet
on the user’s Twitter homepage (Fig. 1), and the user must
consent by clicking the “Post” button. However, by using
private APIs, the app can post the tweet without notifying
the user [35] at all.
Given that private APIs have powerful functionalities, once
abused, private APIs may become formidable weapons for
malicious attackers. Although they are undocumented and
Apple’s review process scrutinizes apps rigorously to search
this paper is the ﬁrst to investigate the abuse of enter-
prise and developer certiﬁcates.
• We propose both static and dynamic analysis tech-
niques to detect iOS private APIs, URL schemes vul-
nerability and sensitive information leakage. We sum-
marized 25 private APIs which are crucial and securi-
ty sensitive on iOS 6/7/8, and we have ﬁled one CVE
(Common Vulnerabilities and Exposures) for iOS de-
vices.
• In our evaluation, we discovered that 844 out of the
1408 enpublic apps we studied do use private APIs. 14
apps contain URL scheme vulnerabilities and 901 apps
transport sensitive information through unencrypted
channel.
2. BACKGROUND
In this section, we brieﬂy provide some background in-
formation about iOS developer programs and itms-services
installation.
2.1 iOS Developer Programs
iOS developers use development tools like Xcode and iOS
simulators to develop apps. To distribute their apps to le-
gal (or non-jailbroken) iOS devices, app developers must
join the iOS developer programs[6]. There are three type-
s of iOS developer programs: standard program, enterprise
program and university program. Tab. 1 depicts the distri-
bution capability of these three programs. Note that all
three programs allow developers to test their apps on de-
vices. They diﬀer in how developers can distribute their
apps. Developers under the standard program can release
their apps on the App Store or distribute the apps through
the ad hoc channel. For the enterprise program, developers
can distribute their apps through the ad hoc channel and the
in-house channel (we will explain the ad hoc and in-house
distribution channels in the next subsection). Apps devel-
oped under the university program cannot be distributed in
any of these three channels.
Although Apple only allows the enterprise apps and de-
veloper apps to be used by company employees and devel-
opers, many vendors or malware writers do use this method
to distribute their apps or malware to the public [36]. The
advantage of using enterprise certiﬁcate and developer cer-
tiﬁcate is that developers can use private APIs to achieve
advanced functionalities (e.g., screen recording).
In addi-
tion, instead of the App Store, developers can maintain the
installed apps on their own servers, so that they can update
these apps any time without the review process. Further-
more, Apple banned many kinds of apps (e.g., pornographic
app) on App Store. By using enterprise certiﬁcate or devel-
oper certiﬁcate, it becomes possible to distribute these kinds
of apps.
2.2 Ad Hoc and In-House Distribution
2.2.1 Ad hoc distribution
Ad hoc is a Latin phrase which means “for this”. Both the
standard program and the enterprise program can use the
ad hoc channel to distribute iOS apps. These apps are .ipa
ﬁles which contain app runtime resources and an ad hoc pro-
visioning proﬁle. Fig. 2 shows the architecture of the ad hoc
Figure 1: Screenshot for Legitimate Twitter App
for private APIs, hackers still manage to learn them by
analyzing iOS frameworks directly and found sophisticated
means [35, 27] which can bypass the review process. Since
there is no review process for apps under enterprise/devel-
oper certiﬁcates, therefore, attackers may take advantage of
this venue to distribute malware through the web. In ad-
dition, authors in [34] and [29] show that infecting a large
number of iOS devices through botnets is feasible. They
have demonstrated that a compromised computer can be
instructed to install enterprise apps or developer apps on
iOS devices. This shows that there are number of ways to
infect iOS devices, and App Store’s review process is not
suﬃcient to protect iOS devices.
Although Apple only allows the enterprise apps and devel-
oper apps to be used by company employees and developers,
many vendors do use this method to distribute their apps to
the public (e.g., GBA emulator [11]). In addition, hackers
do use this channel to distribute malware [36]. It seems that
Apple does not have an ideal method to monitor and manage
these wild enterprise and developer apps. Although Apple
can remotely revoke the enterprise or developer certiﬁcates,
hackers can resign the app, rename the app’s Bundle name
or change the system time (e.g., Pangu [19] uses an invalid
enterprise certiﬁcate for jailbreak) to bypass the revoking
process. In addition, if the enterprise apps contain vulner-
abilities (e.g., URL scheme ﬂaw and heart bleed), they be-
come valuable targets to attackers as the private APIs that
they use make them more powerful as compared with ordi-
nary apps from iOS apps. As more users and enterprises
use iOS devices, there is a constant push to create enpublic
apps, this is exactly the motivation of this paper because we
need to warm the developers (and users) before we see the
epidemic spread of this form of malware.
When enterprise apps or developer apps are distributed
to the public, we refer to such apps as “enpublic” apps. In
order to understand the security landscape of enpublic apps,
we propose a security evaluation mechanism for iOS enpub-
lic apps. Researchers and anti-virus companies can use our
mechanism to detect and analyze malicious iOS enpublic
apps. Customers can also use this mechanism to evaluate
the risk of the enpublic apps before installation.
The main contributions of the paper are:
• We present a detailed study of threats using private
APIs within enpublic apps, and show the gap between
Apple’s regulations and the abuse of enterprise and de-
veloper certiﬁcations. To the best of our knowledge,
Program
Standard Program
Enterprise Program
University Program
Test apps on iOS devices App Store Ad Hoc
In{house
Yes
Yes
Yes
Yes
No
No
Yes
Yes
No
No
Yes
No
Table 1: iOS Developer Programs and their Distribution Capability
Figure 2: Ad Hoc Provisioning Pro(cid:12)le
provisioning proﬁle, each proﬁle contains the ID of the test-
ed app, certiﬁcate of the developer, and the unique device
IDs (UDIDs) of designated devices. The provisioning proﬁle
only allows the iOS app to be installed on these designated
devices. In order to register designated devices, developers
need to specify the UDIDs of designated devices and reg-
ister them in the iOS Dev Center [14] before distribution.
Note that each development account can register at most
100 devices per membership year. After the registration,
developers or testers can install the ad hoc .ipa ﬁle on the
designated devices through the iTunes or via the iOS RPC
communication library (e.g., libimobiledevice [17]). There-
fore, hackers may register more than one developer account
for enpublic app distribution. The advantage of using this
method is Apple cannot easily revoke all the certiﬁcates.
2.2.2 In-house distribution
Figure 3: In{house Provisioning Pro(cid:12)le
Enterprise program can also use the in-house channel to
distribute iOS apps on iOS devices. The enterprise apps
contain app runtime resources and an in-house provisioning
proﬁle. Fig. 3 shows the architecture of the in-house provi-
sioning proﬁle. The major diﬀerence between an ad hoc pro-
ﬁle and an in-house proﬁle is that an ad hoc proﬁle serves no
more than 100 designated devices, whereas in-house proﬁle
may serve unlimited number of devices. Besides using the i-
Tunes for distribution, the in-house distribution can use the
itms-service as another distribution channel. This service
supports an over-the-air installation of custom-developed in-
house apps without using the iTunes or the App Store. All
it needs is just a web server, an iOS app in .ipa format
(built for release/production with an enterprise provision-
ing proﬁle), and an XML manifest ﬁle which instructs the
device to download and install the apps. In fact, developers
can provide a simple web link which triggers the installation
process, for instance:
Install App
During the installation, the device contacts “ocsp.apple.com”
to check the status of the distribution certiﬁcate used to sign
the provisioning proﬁle. In addition, once it is issued, distri-
bution provisioning proﬁles have 12 months validity before
expiration. After that, the proﬁle will be removed and the
app cannot be launched. Fig. 4 illustrates the whole instal-
lation process. When a user clicks the “Install” button, the
iOS system will automatically install the enterprise app and
proﬁle on the device.
3. SYSTEM DESIGN AND METHODOLO-
GY
To detect and analyze enpublic apps, we designed iAna-
lytics, a security evaluation system for iOS enterprise/de-
veloper apps.
iAnalytics ﬁrst collects enpublic apps from
the Internet. Then the system can perform private API de-
tection and app vulnerability detection for the downloaded
enpublic apps. At the high level, the workﬂow for iAnalytics
is as follows:
• iAnalytics has an .ipa crawler for enpublic apps. Be-
cause enpublic apps use “itms–service” for installation,
the .ipa crawler will also search the Internet with
the related keyword, i.e., “itms-services://?action=
downloadmanifest”. When ﬁnding a suspicious “itms–
service” link, the .ipa crawler will parse the .plist ﬁle
and crawl the related enpublic app from the HTTP or
HTTPS sever.
• After collecting .ipa ﬁles, iAnalytics uses two detec-
tors for security evaluation: one for analyzing the pri-
vate API usage, and the other for app vulnerability
analysis.
• For private API detection, iAnalytics ﬁrst generates a
private APIs list from iOS SDK. Then iAnalytics us-
es a private API detector to detect private API calls
according to the private APIs list. Note that because
there is no app review process for enpublic apps, the
app can use any dynamic loading techniques (e.g., NS-
Bundle and dlopen()) to load the private framework-
s at runtime. Therefore, in addition to checking the
static links of frameworks, iAnalytics also analyzes the
dynamic loading behaviors at runtime.
• For app vulnerability detection, iAnalytics uses an app
vulnerability detector which focuses on detecting the
URL scheme vulnerability and sensitive information
Figure 4: The Process of Itms{service Installation
leakage. URL scheme is a protocol for websites or app-
s to communicate with other apps. An URL scheme
with a faulty logic design may cause serious conse-
quences. For sensitive information leakage, personal
information, when transported or stored without be-
ing encrypted, can be sniﬀed or extracted by attackers.
• Finally, iAnalytics summarizes the ﬁndings and gener-
ates analysis reports of these enpublic apps to security
analysts.
Fig. 5 depicts the workﬂow of our system.
Figure 5: Work(cid:13)ow of iAnalytics
4.
IOS PRIVATE APIS DETECTION
In this section, we ﬁrst give a brief introduction to pri-
vate APIs, then we show the methodology of obtaining the
private APIs list. Finally, we present the implementation of
iOS private APIs detector.
4.1 Introduction to Private APIs
iOS Private APIs are undocumented application program-