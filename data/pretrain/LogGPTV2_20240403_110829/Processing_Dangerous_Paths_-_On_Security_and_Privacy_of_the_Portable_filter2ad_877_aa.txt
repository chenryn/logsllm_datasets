title:Processing Dangerous Paths - On Security and Privacy of the Portable
Document Format
author:Jens M&quot;uller and
Dominik Noss and
Christian Mainka and
Vladislav Mladenov and
J&quot;org Schwenk
Processing Dangerous Paths
– On Security and Privacy of the Portable Document Format
Jens Müller
Dominik Noss
Ruhr University Bochum
PI:EMAIL
Ruhr University Bochum
PI:EMAIL
Christian Mainka
Ruhr University Bochum
PI:EMAIL
Vladislav Mladenov
Ruhr University Bochum
PI:EMAIL
Jörg Schwenk
Ruhr University Bochum
PI:EMAIL
Abstract—PDF is the de-facto standard for document ex-
change. It is common to open PDF ﬁles from potentially untrusted
sources such as email attachments or downloaded from the
Internet. In this work, we perform an in-depth analysis of the
capabilities of malicious PDF documents. Instead of focusing on
implementation bugs, we abuse legitimate features of the PDF
standard itself by systematically identifying dangerous paths in
the PDF ﬁle structure. These dangerous paths lead to attacks
that we categorize into four generic classes:
(1) Denial-of-
Service attacks affecting the host that processes the document.
(2) Information disclosure attacks leaking personal data out of the
victim’s computer. (3) Data manipulation on the victim’s system.
(4) Code execution on the victim’s machine. An evaluation of 28
popular PDF processing applications shows that 26 of them are
vulnerable at least one attack. Finally, we propose a methodology
to protect against attacks based on PDF features systematically.
I.
INTRODUCTION
The Portable Document Format (PDF) is arguably the most
widely used data format for ofﬁce document exchange. While
the total number of PDF ﬁles is impossible to guess, Adobe
announced that 250 billion documents have been opened
by Adobe products in 2018 [59]. Being true or not, PDF
documents are heavily used in business to business as well
as consumer use cases. Exchanging, creating, and archiving
invoices and contracts, submitting scientiﬁc papers, or collab-
orating and reviewing texts, are only some scenarios which are
hardly imaginable without PDF.
The advantage of using PDF over other document formats,
such as Microsoft Word, is its availability on all platforms,
including mobile and web. PDF processors are even used on
the server-side. For example, uploaded PDF ﬁles are converted
into images to preview them in forums, wikis, or cloud storage.
Modern printers also directly support native PDF processing
without the requirement for printer drivers to convert input
ﬁles to a special data format understood by the printer.
A. Powerful Document Features
Introduced in 1993 by Adobe, PDF was designed to provide
a  consistent  representation  of  documents,  independent  of  the
platform.  It  supports  numerous  advanced  features,  ranging
from cryptography to calculation logic [44], 3D animations [5],
Network  and  Distributed  Systems  Security  (NDSS)  Symposium  2021
21-25  February  2021, Virtual
ISBN  1-891562-66-5
https://dx.doi.org/10.14722/ndss.2021.23109
www.ndss-symposium.org
JavaScript [2], up to form ﬁelds [6]. A PDF document can be
updated or annotated without losing previous revisions [7] and
deﬁne speciﬁc actions [4], for example, to display a speciﬁc
page once the viewer opens the document. On top of this,
PDF is enriched with different data formats which can be
embedded into documents, such as XML [8], or Flash [3]. Each
of the formats has its strengths, but allowing their inclusion
also enables their weaknesses and concerns. In this work, we
analyze the security of native PDF functions.
B. Security and Privacy Threats
We present a systematic and structured analysis of standard
PDF features relevant for the security and privacy of users.
Even though PDF is a relatively old and well-established data
format, our study reveals novel insights regarding the abuse of
dangerous features, which are induced by opening a malicious
PDF document. We categorize our attacks into four classes:
1) Denial-of-Service (DoS) attacks affecting the processing
application and the host on which the PDF ﬁle is opened.
2) Information disclosure attacks leak personal data from the
victim’s computer to the attacker, such as PDF document
form data, local ﬁles on disk, or NTLM user credentials.
3) Data manipulation attacks modify PDF form values, write
local ﬁles on the host system, or mask the displayed
content of a document based on the opening application.
4) Execution of code on the victim’s machine, by silently
launching an executable, embedded within the document.
C. Responsible Disclosure
We reported our attacks and ﬁndings to the affected vendors
and proposed appropriate countermeasures, resulting in CVE-
2020-28352, CVE-2020-28353, CVE-2020-28354, CVE-2020-28355,
CVE-2020-28356, CVE-2020-28357, CVE-2020-28358, CVE-2020-
28359, CVE-2020-28410, CVE-2020-28411, and CVE-2020-28412.
While it is possible to mitigate most of the attacks on the
implementation-level, all of them are based on legitimate
features deﬁned in the PDF standard. To sustainably eliminate
the root cause of these vulnerabilities in future implementation,
the authors recommend to remove dangerous functionality
from the PDF speciﬁcation or add proper implementation
advice to its security considerations.
D. Contributions
Our contributions can be summarized as follows:
• We present a systematic analysis on the security of native
PDF features. Therefore, we distillate dangerous paths
from the 1300-page PDF speciﬁcation. (section V)
• Based on this methodology, we craft our attack vectors,
resulting in an overall of 209 different attack variants that
can be generalized into four attack classes. (section VI)
• We evaluate 28 popular PDF viewers and show that 26 of
them are vulnerable to at least one attack. (section VII)
• We present techniques for JavaScript-based ﬁngerprinting
of PDF viewers and bypassing Digital Rights Management,
and discuss the consequences of hidden data added by
legitimate PDF editors to every document. (section VIII)
• We discuss countermeasures for PDF implementations as
well as the speciﬁcation, and propose a methodology to
systematically protect against attack variants. (section IX)
• We release our comprehensive suite of malicious PDF ﬁles
which can be used by developers to test their software.1
II. PDF BASICS
This section brieﬂy introduces the PDF document structure.
For reasons of clarity, we only describe the building blocks
relevant for understanding the attacks of this paper.
A. Basic Blocks
C. Actions & JavaScript
The PDF speciﬁcation deﬁnes multiple Actions for various
purposes. These actions can be used, for example, to navigate
to a certain page in the document (GoTo action). Actions are
often combined with form elements or Annotations (e.g., click-
able hyperlinks referencing a website are technically realized
by combining a Link annotation with a URI action). However,
actions can also be set to trigger automatically based on various
events such as opening, printing, or closing the document.
A special action in PDF is the execution of JavaScript code.
Adobe deﬁned a basic set of functions [2], but PDF applica-
tions often choose to implement a subset of Adobe’s standard
as well as to extend their feature set with proprietary functions
(see section VIII). JavaScript provides a huge ﬂexibility for
documents, for example, complex input validation of forms or
changing their values depending on speciﬁc conditions.
1 0 obj
>
% the first processed PDF object
% action executed after opening file
% definition of the action
% this is a Javascript action
% JavaScript code
A PDF document consists of four basic sections:
>>
endobj
1
2
3
4
5
6
7
8
1) A header deﬁning the PDF document version (1.1 to 2.0).
2) A body containing the content, a bundle of PDF objects.
3) An index table with references to each object in the body.
4) A trailer deﬁning the root element of the document and
a reference to the index table.
The most important section is the body which contains the
PDF objects – the actual content of the document. An object
can, for example, deﬁne a headline, a text block, or an image.
1
2
3
4
5
6
10 0 obj
>
stream
Content
endstream
endobj
% stream length
% start of the stream
% content (e.g., text, image, font, file)
% end of the stream
Listing 1. PDF object 10, including a 10-byte content stream.
Every object
is enclosed by the delimiters obj and
endobj and has has an identiﬁer. In Listing 1, the object’s
identiﬁer is 10 with generation number 0. Content can be
provided as a string, or – as shown in Listing 1 – as a
stream enclosed by stream and endstream. It can be pref-
aced with additional information, such as encoding or length.
Streams can optionally be compressed. Many documents use
FlatDecode for this purpose, meaning that the zlib Deﬂate
algorithm is used.
B. PDF Forms
With PDF version 1.2, Adobe introduced AcroForms in
1996. Similarly to HTML forms, AcroForms allow to deﬁne
input ﬁelds, checkboxes, and buttons. The user-input can
either be stored directly into the document (using incremental
updates) or be submitted to a dedicated server. In the latter
case, AcroForms use the Forms Data Format (FDF), which is
based on raw PDF objects, for transmitting the data.
Listing 2. PDF document executing JavaScript after opening (excerpt).
In Listing 2, an example of a PDF action containing JavaScript
is shown. The document Catalog, which is the ﬁrst processed
object in a PDF document, contains the entry OpenAction. The
OpenAction event deﬁnes an action which is executed directly
after the document is being opened. In the given example, the
JavaScript code deﬁned in Line 6 will be executed.
D. PDF File Handles
A ﬁle handle (or PDF File Speciﬁcation) is a multi-purpose
object that can be either an embedded ﬁle (i.e., a data stream
within the document), a local ﬁle on disk, a remote URL, or
a network share, depending on given parameters and context.
File handles deﬁne the targets of many PDF actions such as
where to submit form data to (via SubmitForm action) or which
hyperlinks to follow in a document (via URI or GoToR action).
III. RELATED WORK
PDF documents have been considered as relatively secure
against malware and other security threats until 2001 [56],
when the Peachy virus misused PDF features to run malicious
VBScript [57]. In the following years, PDF malware grew to
an importance, mostly based on implementation bugs in viewer
applications [58, 52]. During this period, PDF malware focused
mainly on abusing JavaScript. To estimate the importance of
JavaScript-based vulnerabilities in PDF documents we ﬁltered
the CVE database for entries relating to 28 PDF processing
applications. Since 2003, there are 1325 relevant CVE IDs, of
which 73 lead to code execution – the rest being DoS, data
leakage, or other vulnerabilities. Of all PDF-related CVE IDs,
138 entries are due to JavaScript.2 Laskov et al. [34] outline
two classes of JavaScript PDF exploits: either the JavaScript
1Our test suite of PDF documents can be found at https://pdf-insecurity.
org/download/pdf-dangerous-paths/exploits-and-helper-scripts.zip.
2The total number of JavaScript related issues may be higher because
JavaScript engine bugs usually do not get separate CVE IDs for integrators.
2
API is targeted directly or the API is abused to target other
software components.
In 2008, Filiol et al. analyzed for the ﬁrst time malicious
PDF features beyond JavaScript. Their work was extended in
the following years by multiple researches which found new
methods to carry out DoS, URI invocation, code execution,
and information leakage using PDF ﬁles [48, 16, 49, 63, 51,
31, 32]. Even though, the security impact of speciﬁc attack
variants based on insecure PDF features was understood and
ﬁxed in many implementations, new variants were reported in
2018 [24, 30, 50]. In contrast to our work, previous research on
insecure features of PDF documents focused on single features,
and mainly on single applications such as Acrobat Reader and
Foxit Reader, and was not driven by a systematic approach.
To prevent harm, different security tools were proposed, in
order to identify maliciously crafted documents [34, 37, 53, 18,
38, 55, 15]. Such tools rely on the detection of known attack
patterns and on a structural analysis of PDF ﬁles. In 2017,
Tong et al. introduced a concept for PDF malware detection
based on machine learning and its implementation [62, 61].
Maiorca et al. provided an overview of current PDF malware
techniques and compared existing security tools [36]. In our
research, we focus on the security of the PDF viewers and
not on additional protection tools. Thus, we do not evaluate
whether third party tools are able to detect our attacks.
While studying the related work on PDF security, we
determined two gaps which we address in this paper. First,
there is no systematic approach on how to ﬁnd attacks based
on insecure PDF features since all relevant work, which is
widespread in multiple scientiﬁc papers, technical reports, and
blogposts, focuses on single features or attack variants. Second,
there is no comprehensive evaluation of a large set of popular
PDF viewers, beyond Acrobat Reader and Foxit Reader.
IV. ATTACKER MODEL
In this section, we describe the attacker model, including
the attacker’s capabilities and the winning condition.
A. Actions of the Victim
The victim is an individual who retrieves and opens a mali-
cious PDF document from an attacker controlled source. This
is a realistic attack scenario, because even sophisticated users
download and open PDF ﬁles from untrusted sources such
as email attachments or the Internet. For example, invoices
or academic papers are usually shared as PDF documents.
PDF is often considered as relatively “safe” by end-users [14],
compared to other ﬁle formats such as Word documents, which
are well-known to contain potentially dangerous macros [25].
To open the PDF document, the victim uses a pre-installed
application which processes the ﬁle in order to display its
content. Different applications may process the ﬁle, or interpret
features of the PDF standard, differently, thereby enabling or
disabling the various attack vectors described in this paper.
B. Attacker’s Capabilities
The attacker can create a new PDF ﬁle or modify an
existing document which we denote as the malicious document.
We do not require the malicious document to be compliant
to the PDF speciﬁcation, although the attacker targets basic
functionality and features of the PDF standard. The attacker
has full control over the document structure and its content.
While the attacker can easily craft a malicious document
which looks benign once opened and interpreted by the PDF
application (i.e., similar to a document that the victim would
expect), this is not assumed to be necessary, because all attacks
are automatically triggered once the ﬁle is opened. The only
interaction of the victim is to open the malicious document on
their computer.
C. Winning Condition
An attack is classiﬁed as successful if its winning condition
is fulﬁlled. The winning condition – the goal of the attacker
– is dependent on the attack class and documented in the cor-
responding section. For example, in the DoS attack class, the
winning condition is reached if the PDF processing application
can be forced to consume all available resources (i.e., memory
or CPU time). In the information disclosure class of attacks, the
winning condition is fulﬁlled if the attacker manages to obtain
sensitive data, such as local ﬁles from the victim’s disk.
V. METHODOLOGY
To identify attack vectors, we systematically surveyed which
potentially dangerous features exist in the PDF speciﬁcation.
We started by creating a comprehensive survey with all PDF
Actions that can be called. As a base, we used the list provided
in the PDF speciﬁcation, see [60, section 8.5.3]. This list
contains 18 different actions which we carefully studied. We
selected eight actions (see Call Action in Figure 1) – the ones
that directly or indirectly allow access to a ﬁle handle (see
File in Figure 1) and may therefore be abused for dangerous
features such URL invocation or writing to ﬁles.
Having a list of security sensitive actions, we proceeded by
investigating all objects and related events which can trigger
these actions. This process was the most time-consuming part
of our investigation since the entire speciﬁcation was analyzed.
We identiﬁed four PDF objects which allow to call arbitrary
actions (Page, Annotation, Field, and Catalog), as shown in
the upper part of Figure 1. For calling them, most objects
offer multiple alternatives. The Catalog object, for example,
deﬁnes the OpenAction or additional actions (AA) as events.
Each event can launch any sequence of PDF actions, which are
depicted in the middle part in Figure 1 (Launch, Thread, etc.).
In addition, JavaScript actions can be embedded within doc-
uments, opening a new area for attacks. By using JavaScript,
for example, new annotations can be created, which can have
actions that once again lead to accessing ﬁle handles.
If a path from an event over an action to ﬁle handle3
exists and is not explicitly blocked by the application opening
the document, we denote it as a “dangerous path”, resulting,
for example, in ﬁle system access or URL invocation. Our
approach is comprehensive in the sense that all attacks based
on such dangerous paths are covered, because all existing paths
in the PDF speciﬁcation down to a ﬁle handle are mapped.
Another kind of dangerous path arises, when the speciﬁcation
enables objects to create reference circles, resulting in inﬁnite
3File handles can be embedded ﬁles, local ﬁles, URLs, or network shares.
3
Fig. 1. Dangerous paths identiﬁed by studying the PDF speciﬁcation (simpliﬁed). There are different special PDF objects (Catalog, Page, ...) deﬁned that
allow to call various actions (Launch, Thread, ...) which can read from or write to a PDF File Speciﬁcation.
loops. Further discovered attacks – deﬂate bombs and content
masking – are based on ﬂaws on the document structure level,
which we observed during our study of the speciﬁcation.
Finally, we systematized our results, created a list of all
possible attacks, and classiﬁed them accordingly. To generate
our test suite of malicious PDF documents, we chose a semi-
automated approach: we hand-crafted the payloads to test for a
particular weakness and wrote a set of helper tools in Python,
to generate a broad set of attack variants as well as a valid
PDF structure for each test case. To improve the impact of the
attacks, we also build exploits by chaining multiple actions.
For example, an attacker can craft a document that ﬁrst reads
data from a local ﬁle using the Import action and then sends the
content to the attacker’s server using the SubmitForm action.
Our efforts resulted in 209 unique PDF ﬁles4, which we
manually opened in 28 PDF applications to observe the result.
This process can be automated by launching each test for each
PDF viewer in a batch script and logging the program’s behavior,
depending on the attack class (e.g., CPU or memory exhaustion
for DoS, ﬁle exists checks for ﬁle write access attacks, etc.).
VI. ATTACKS
Out this section, we introduce the attacks that we elab-
orated during our security analysis. The “dangerous path” is
given at the end of each attach description.
Clariﬁcation of Novelty: Of course, this work is not the
ﬁrst research on PDF security (see section III). However, we
are the ﬁrst covering the entire speciﬁcation for attacks based
on the dangerous path. While variants of some attacks have
been presented before, our work goes far beyond systematizing
existing results. It provides many new insights as well as novel
attacks. The novelty level for each attack is given below.
• Well known attacks: code execution via Launch action5
4Note that we combined multiple triggering events into single PDF ﬁles,
thereby testing various paths in parallel and reducing the overall number of
required test documents.
5Note that even though the danger of the PDF Launch action is well known
in the sense that it has been publicly documented, security gaps still exist in
multiple implementations, as conﬁrmed by our evaluation (see section VII).
• Novel attack variants:6 inﬁnite loop, deﬂate bomb, URL
• Previously unknown attacks: form data leakage, local ﬁle
invocation, credential theft, content masking.
leakage, form modiﬁcation, ﬁle write access
Previous work relevant to a speciﬁc attack is provided in
each corresponding attack section.
A. Denial-of-Service
The goal of this class of attacks is to build a specially
crafted PDF document which enforces processing applications
to consume all available resources (i.e., computing time or
memory) or causes them to crash7. Note that while the impact
of DoS is limited for end-users, it can lead to severe business
impairment
is processed on a server, for
example, by a library that generates preview thumbnails of
PDF ﬁles uploaded to cloud storage.
if the document
1) Inﬁnite Loop:
Inducing an endless loop causes the
program execution to get stuck. The PDF standard allows
various elements of the document structure to reference to
themselves, or to other elements of the same type. This can
lead to cycles, if not explicitly handled by the implementation.
For example, a Pages object may reference to other pages,
which is a known problem of the speciﬁcation, discovered in
CVE-2007-0104. We systematically studied the PDF standard
for further constructs that allow for reference cycles, recursion,
or other kinds of loops, and found the following novel variants:
• Action loop. PDF actions allow to specify a Next action
• ObjStm loop. Object streams may extend other object
streams allows the crafting of a document with cycles.
• Outline loop. PDF documents may contain an outline. Its
entries, however, can refer to themselves or each other.
to be performed, thereby resulting in “action cycles”.
6Only a small number of variants was known because previous research did
not systematically investigate the PDF speciﬁcation or test all possible paths.
7Crashes are classiﬁed as a winning condition, because they affect the user
experience, especially if further, legitimate documents are already opened by
the same PDF application (in multiple tabs/windows) and if there are unsaved
changes, resulting in data loss. Furthermore, crashes have lead to code overﬂow
vulnerabilities in the past, which have been classiﬁed as critical by Adobe [19].
4
CallActionLaunchThreadGotoEGotoRImportDataSubmitFormURIJavaScriptCatalogPageAnnotationField/Print/Open/Base/URI/Names/AA/OpenAction/A/AA/Link/AA/Contents/AAFileEmbeddedFileLocalFileURLNetworkShare• Calculations. PDF deﬁnes “Type 4” calculator functions,
for example, to transform colors. Processing hard-to-solve
mathematical formulas may lead to high demands of CPU.
• JavaScript. Finally, in case the PDF application processes
scripts within documents, inﬁnite loops can be induced.
Dangerous paths (examples)
Action ⇒ /Next ⇒ Action
ObjStm ⇒ /Extends ⇒ ObjStm
2) Deﬂate Bomb: Data ampliﬁcation attacks based on
malicious zip archives are well-known (see [12, 22, 45]). The
ﬁrst publicly documented DoS attack using a “zip bomb” was
conducted in 1996 against a Fidonet BBS administrator [1].
However, not only zip ﬁles but also stream objects within PDF
documents can be compressed using various algorithms such as
Deﬂate [20] to reduce the overall ﬁle size. The question arises
if compression bombs based on malicious PDF documents can
be built, in order to cause processing applications to allocate all
available memory. We intend to achieve this goal by a chaining
a compressed stream to one or multiple FlateDecode ﬁlters.
Dangerous path
Filter ⇒ /FlateDecode ⇒ [...] ⇒ /FlateDecode
B. Information Disclosure
The goal of this class of attacks is to track the usage of a
document by silently invoking a connection to the attacker’s
server once the ﬁle is opened, or to leak PDF document form
data, local ﬁles, or NTLM credentials to the attacker.
1) URL Invocation: Tracking pixels in HTML emails are
well documented,8 but the existence of similar technologies for
PDF ﬁles is largely unknown to the general public. However,
PDF documents that silently “phone home” should be con-
sidered as privacy-invasive. They can be used, for example, to
deanonymize reviewers, journalists, or activists behind a shared
mailbox. The goal of this attack is to open a backchannel
to an attacker controlled server once the PDF ﬁle is opened
by the victim. Besides learning when the ﬁle was opened
and by whom (i.e., by which IP address), the attacker may
learn additional (limited) information such as the victim’s PDF
viewer application and operating system, derived from the
User-Agent HTTP header. The possibility of malicious URI
resolving in PDF documents has been introduced by Hamon
[27] who gave an evaluation for URI and SubmitForm actions
in Acrobat Reader. We extend their analysis to all standard
PDF features that allow to open a URL, such as ImportData,
Launch, GoToR, JavaScript, and to a to a broad set of viewers.
Dangerous path
[All events] ⇒ [All actions] ⇒ URL
2) Form Data Leakage: Documents can contain forms
to be ﬁlled out by the user – a feature introduced with
PDF version 1.2 in 1996 and used on a daily basis for
routine ofﬁces tasks, such as travel authorization or vacation
requests. Depending on the nature of the form, user input
8A recent study of Poddebniak et al. [47] revealed backchannels in 40 out
of 48 tested email clients.
can certainly contain sensitive information (e.g., ﬁnancial or
medical records). Therefore, the question arises if an attacker
can access and leak such information. The idea of this attack
is as follows: the victim downloads a form – a PDF document
which contains form ﬁelds – from an attacker controlled source
and ﬁlls it out on screen, for example, in order to print it. Note
that there are legitimate cases where a form is obtained from
a third party, while the user input should not be revealed to
this party. For example, European SEPA remittance slips can
be downloaded from all over the web9 – even though they
have to be manually signed to be accepted by a local bank.
The form is manipulated by the attacker in such a way that
it silently, without the user noticing, sends input data to the
attacker’s server. To the best of our knowledge, we are the ﬁrst
to demonstrate such attacks, which can be carried out using
the PDF SubmitForm action, or by reading and exﬁltrating the
form values using standard JavaScript functions.
Dangerous path
Page ⇒ (on close) ⇒ SubmitForm ⇒ URL
3) Local File Leakage: The PDF standard deﬁnes various
methods to embed external ﬁles into a document or otherwise
access ﬁles on the host’s ﬁle system, as documented below.
• External streams. Documents can contain stream objects
(e.g., images) to be included from external ﬁles on disk.
• Reference XObjects. This features allows a document to
import content from another (external) PDF document.
• Open Prepress Interface. Before printing a document,
local ﬁles can be deﬁned as low-resolution placeholders.
• Forms Data Format (FDF). Interactive form data can be
• JavaScript
stored in, and auto-imported from, external FDF ﬁles.
functions. The Adobe JavaScript reference
enables documents to read data from or import local ﬁles.
If a malicious document managed to ﬁrstly read ﬁles
from the victim’s disk and secondly, send them back to the
attacker,10 such behavior would arguably be critical. However,
standard PDF functions can be chained together to achieve
exactly this. For example, form values can be references to
stream objects and every stream, on its part, can reference to
an external ﬁle. Moreover, forms can be crafted to auto-submit
themselves using various events as documented in Figure 1 in
section IX. Furthermore, standard JavaScript functions can be
used to access local ﬁles and leak their content. We give a
systematic overview on this new chaining technique in terms
of a directed graph containing all chains detected during our
evaluation, and are the ﬁrst to demonstrate these attacks.
[All events] ⇒ ImportData ⇒ local ﬁle
Dangerous path
⇒ /Next ⇒ SubmitForm ⇒ URL
4) Credential Theft:
In 1997, Aaron Spangler posted a
vulnerability in Windows NT on the Bugtraq mailing list [54]:
any client program can trigger a connection to a rogue
9E.g., https://www.ibancalculator.com/ﬁleadmin/EU-Ueberweisung.pdf.
10Note that exﬁltration does not necessarily have to occur via the network:
For example, if a cloud storage service generates thumbnail images from
uploaded PDF documents, the backchannel can be the rendered image itself.
If a reviewer adds comments to a malicious PDF document, local ﬁles may
unintentionally be included when saving, exporting or printing the document.
5
SMB server. If the server requests authentication, Windows
will automatically try to log in with a hash of the user’s
credentials. Such captured NTLM hashes allow for efﬁcient
ofﬂine cracking11 and can be re-used by applying pass-the-
hash or relay attacks [29, 43] to authenticate under the user’s
identity. This design ﬂaw in the Windows operating system
is not solved until today.12 Back in 1997, Spangler used a
remote image to trick web browsers into making a connection
to and thereby authenticate to the attacker’s host. In April
2018, Check Point Research [50] showed that a similar attacks
can be performed with malicious PDF ﬁles. They found
the target of GoToR and GoToE actions can be set
that
to \\\\attacker.com\\dummyfile,13 thereby leaking
credentials in the form of NTLM hashes. The issue was ﬁxed
quickly by Adobe and Foxit. We describe novel variants of
this attack, for example, by using various other techniques to
access a network share such as by including it as external
content stream or by testing different PDF actions, thereby
bypassing existing protection mechanisms.
Dangerous path
[All events] ⇒ [All actions] ⇒ network share
C. Data Manipulation