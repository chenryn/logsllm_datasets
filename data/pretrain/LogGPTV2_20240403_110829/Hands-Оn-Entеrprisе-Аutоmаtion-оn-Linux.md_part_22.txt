repository content over HTTPS only. However, owing to some limitations around
package signing for DEB packages in Pulp, which will be discussed later in this
chapter, we must enable the serving of repository content over plain HTTP.
Note that, as the plural naming of the --releases option implies, more
than one release may be specified here. Although this works at repository
creation time, the sync process is, at the time of writing, broken, and so
one separate Pulp repository must be created for each Ubuntu release we
wish to mirror. This is expected to be fixed at a future date.
[ 221 ]
Enterprise Repository Management with Pulp Chapter 8
Having done this, we will create two more repositories for
the security and updates repositories:
$ pulp-admin deb repo create --repo-id='bionic-security-
amd64-08aug19' --relative-url='bionic-security-amd64-08aug19' --
feed='http://de.archive.ubuntu.com/ubuntu' --releases=bionic-
security --components=main --architectures='amd64' --serve-
http=true
$ pulp-admin deb repo create --repo-id='bionic-updates-
amd64-08aug19' --relative-url='bionic-updates-amd64-08aug19' --
feed='http://de.archive.ubuntu.com/ubuntu' --releases=bionic-
updates --components=main --architectures='amd64' --serve-http=true
2. With our repository creation completed, we can run our sync processes, just like
we did previously:
$ pulp-admin deb repo sync run --repo-id='bionic-amd64-08aug19'
$ pulp-admin deb repo sync run --repo-id='bionic-security-
amd64-08aug19'
$ pulp-admin deb repo sync run --repo-id='bionic-updates-
amd64-08aug19'
3. Finally, we publish the repositories:
$ pulp-admin deb repo publish run --repo-id='bionic-amd64-08aug19'
$ pulp-admin deb repo publish run --repo-id='bionic-security-
amd64-08aug19'
$ pulp-admin deb repo publish run --repo-id='bionic-updates-
amd64-08aug19'
It is worth noting that Ubuntu repositories tend to be much larger than their CentOS
counterparts, especially the updates and security ones. During the sync process, the
packages are downloaded into /var/cache/pulp temporarily before they are archived
into the /var/lib/pulp directory. If /var/cache/pulp is on your root filesystem, there is
a significant danger of your root filesystem filling up, and as such, it may be best to create a
new volume for this purpose and mount at /var/cache/pulp to prevent a disk full
situation from stopping your Pulp server.
[ 222 ]
Enterprise Repository Management with Pulp Chapter 8
The DEB plugin for Pulp features the same package deduplication as its RPM counterpart
and publishes packages over HTTPS (and optionally HTTP) in the same manner. With a
few changes to the syntax of the commands, we can effectively create snapshots of
upstream Linux repositories for most of the major distributions that are found in enterprise
environments.
As a result of completing this section, you have learned how to create your own repository
mirrors for both RPM- and DEB-based content in Pulp, which may be treated as stable and
unchanging and hence provide an excellent basis for patch management in an enterprise.
In the next section of this chapter, we will look at how to deploy these repositories to two
different types of Linux server.
Patching processes with Pulp
It is worth mentioning at the outset of this section that Pulp supports two main methods for
the distribution of packages from the repositories created within it. The first is a kind of
push-based distribution that uses something called the Pulp Consumer.
We will not be exploring this in this chapter for the following reasons:
The Pulp Consumer only works with RPM-based repositories and distributions,
and at the time of writing, there is no equivalent client available for Ubuntu or
Debian. This means that our processes cannot be uniform across the enterprise,
which, in an ideal world, they would be.
Using the Pulp Consumer means we would have two overlapping means of
automation. Distributing packages to nodes using the consumer is a task that can
be performed with Ansible, and if we use Ansible for this task, then we have an
approach that is common across all of our platforms. This supports the principles
of automation in an enterprise context that we established earlier in this book
around lowering barriers to entry, ease of use, and so on.
As such, we will build out separate Ansible-based examples for managing repositories and
updates using the repositories we created in the previous section, entitled Building
repositories in Pulp. These can be managed along with all the other Ansible playbooks and
can be run through a platform such as AWX to ensure a single pane of glass is used
wherever possible for all tasks.
Let's get started by looking at how to patch RPM-based systems using a combination of
Ansible and Pulp.
[ 223 ]
Enterprise Repository Management with Pulp Chapter 8
RPM-based patching with Pulp
In the previous section of this chapter, we created two repositories for our CentOS 7
build—one for the operating system release and another to contain the updates.
The process of updating a CentOS 7 build from these repositories is, at a high level, done as
follows:
1. Move aside any existing repository definitions in /etc/yum.repos.d to ensure
we only load repositories from the Pulp server.
2. Deploy the appropriate configuration using Ansible.
3. Employ Ansible to pull the updates (or any required packages) from the Pulp
server using the new configuration.
Before we proceed with creating the appropriate playbooks, let's take a look at what the
repository definition file would look like on our CentOS 7 machine if we created it by hand.
Ideally, we want it to look something like this:
[centos-os]
name=CentOS-os
baseurl=https://pulp.example.com/pulp/repos/centos76-os
gpgcheck=1
gpgkey=file:///etc/pki/rpm-gpg/RPM-GPG-KEY-CentOS-7
sslverify=0
[centos-updates]
name=CentOS-updates
baseurl=https://pulp.example.com/pulp/repos/centos7-07aug19
gpgcheck=1
gpgkey=file:///etc/pki/rpm-gpg/RPM-GPG-KEY-CentOS-7
sslverify=0
There's nothing particularly unique about this configuration—we are using the relative-
url we created earlier with our repository using pulp-admin. We are using GPG checking
of package integrity, along with the CentOS 7 RPM GPG key, which we know will already
be installed on our CentOS 7 machine. The only tweak we've had to make to this otherwise
standard configuration is to turn off SSL verification since our demo Pulp server features a
self-signed certificate. Of course, if we are using an enterprise certificate authority and the
CA certificates are installed on each machine, then this problem goes away.
Given the power of Ansible, we can be a bit clever about how we do this. There's no point
creating and deploying static configuration files when we know that, at some point, we're
going to update the repository—meaning, at the very least, that baseurl might change.
[ 224 ]
Enterprise Repository Management with Pulp Chapter 8
Let's start off by creating a role called pulpconfig to deploy the correct
configuration—tasks/main.yml should look like this:
---
- name: Create a directory to back up any existing REPO configuration
file:
path: /etc/yum.repos.d/originalconfig
state: directory
- name: Move aside any existing REPO configuration
shell: mv /etc/yum.repos.d/*.repo /etc/yum.repos.d/originalconfig
- name: Copy across and populate Pulp templated config
template:
src: templates/centos-pulp.repo.j2
dest: /etc/yum.repos.d/centos-pulp.repo
owner: root
group: wheel
- name: Clean out yum database
shell: "yum clean all"
The accompanying templates/centos-pulp.repo.j2 template should look like this:
[centos-os]
name=CentOS-os
baseurl=https://pulp.example.com/pulp/repos/{{ centos_os_relurl }}
gpgcheck=1
gpgkey=file:///etc/pki/rpm-gpg/RPM-GPG-KEY-CentOS-7
sslverify=0
[centos-updates]
name=CentOS-updates
baseurl=https://pulp.example.com/pulp/repos/{{ centos_updates_relurl }}
gpgcheck=1
gpgkey=file:///etc/pki/rpm-gpg/RPM-GPG-KEY-CentOS-7
sslverify=0
Notice the variable substitutions at the end of each of the baseurl lines—these allow us to
keep the same template (which should be common for most purposes) but change the
repository URL over time to adapt to updates.
Next, we will define a second role specifically for updating the kernel—this will be very
simple for our example and tasks/main.yml will contain the following:
---
- name: Update the kernel
[ 225 ]
Enterprise Repository Management with Pulp Chapter 8
yum:
name: kernel
state: latest
Finally, we will define site.yml at the top level of the playbook structure to pull all of this
together. We could, as we discussed previously, define the variables for the relative URLs
in a whole host of places, but for the sake of this example, we will put them in
the site.yml playbook itself:
---
- name: Install Pulp repos and update kernel
hosts: all
become: yes
vars:
centos_os_relurl: "centos76-os"
centos_updates_relurl: "centos7-07aug19"
roles:
- pulpconfig
- updatekernel
Now, if we run this in the usual manner, we will see output similar to the following:
[ 226 ]
Enterprise Repository Management with Pulp Chapter 8
So far, so good—the changed statuses from the preceding play tell us that the new
configuration was applied successfully.
Those with a keen eye will have observed the warning on the Clean out
yum database tasks—Ansible detects when a raw shell command is
being used that has overlapping functionality with a module and
recommends that you use the module instead for reasons of repeatability
and idempotency, as we discussed earlier. However, as we want to ensure
all traces of any earlier yum databases are removed (which can present
problems), I have adopted a brute force method here to clean up the old
databases.
Now, as I'm sure you will have spotted, the great thing about this approach is that if, say,
we want to test our 08aug19 repository snapshot that we created in the previous section,
all we have to do is modify the vars: block of site.yml so that it looks like this:
vars:
centos_os_relurl: "centos76-os"
centos_updates_relurl: "centos7-08aug19"
Hence, we can reuse the same playbook, roles, and templates in a variety of scenarios
simply by changing one or two variable values. In an environment such as AWX, these
variables could even be overridden using the GUI, making the whole process even easier.
In this way, combining Ansible with Pulp lends itself to a really stable enterprise
framework for managing and distributing (and even testing) updates. However, before we
look at this process on Ubuntu, a word on rollbacks. In the previous section, we
hypothesized an example where our 08aug19 snapshot failed testing and so had to be
deleted. As far as CentOS 7 servers are concerned, rollbacks are not as straightforward as
simply installing the earlier repository definitions and performing an update since the
update will detect newer packages that have been installed and take no action.
The Pulp repository does, of course, provide a stable base to roll back to—however,
rollbacks are generally quite a manual process as you must identify the transaction ID in
the yum database that you want to roll back to and validate the actions to be performed and
then roll back to it. This, of course, can be automated, provided you have a reliable way of
retrieving the transaction ID.
[ 227 ]
Enterprise Repository Management with Pulp Chapter 8
The following screenshot shows a simple example of identifying the transaction ID for the
kernel update we just automated and establishing the details of the change that was
performed:
Then, we can (if we so choose) roll back the transaction using the command shown in the
following screenshot:
[ 228 ]
Enterprise Repository Management with Pulp Chapter 8
Using this simple process and the playbooks offered here as a guide, it should be possible
to establish a solid, stable, automated update platform for any RPM-based Linux
distribution.
In the next section, we will look at the method we can use to perform the same set of tasks,
except for DEB-based systems such as Ubuntu.
[ 229 ]
Enterprise Repository Management with Pulp Chapter 8
DEB-based patching with Pulp
At a high level, the process of managing updates on Ubuntu from our Pulp server is exactly
the same as it is for managing the RPM based updates for CentOS (save for the fact that we
have no option regarding the use of the Pulp Consumer and must use Ansible for the
update process).
There are, however, a couple of limitations when it comes to the use of Pulp with Ubuntu's
APT repository system:
At the time of writing, there is an issue whereby the Pulp sync process does not
mirror the signing keys from the upstream Ubuntu repository. This means that
even though the upstream repository features Release.gpg, it is not mirrored
on the Pulp server. Hopefully, in the future, this will be fixed, but in this chapter,
we will work around this by adding implicit trust to the packages.
HTTPS support on Ubuntu is configured not to accept updates from unverifiable
(that is, self-signed) certificates by default. Although we can turn off SSL
verification as we did on CentOS, Ubuntu's APT package manager then goes in
search of an InRelease file (which should have the aforementioned GPG key
embedded). As we discussed in the previous point, the Pulp DEB plugin does not
support the signing of mirrored repositories, and so right now, the only
workaround for this is to use unencrypted HTTP traffic. Hopefully, in a future
release, these two issues will be fixed—however, at the time of writing, there
appears to be no documented fix or workaround for them.
With these two limitations understood, we can define our APT sources file for the
repository set we created earlier. Following on from the examples in the previous section,
our /etc/apt/sources.list file could look like this:
deb [trusted=yes] http://pulp.example.com/pulp/deb/bionic-amd64-08aug19
bionic main
deb [trusted=yes]
http://pulp.example.com/pulp/deb/bionic-security-amd64-08aug19 bionic-
security main
deb [trusted=yes]
http://pulp.example.com/pulp/deb/bionic-updates-amd64-08aug19 bionic-
updates main
[ 230 ]
Enterprise Repository Management with Pulp Chapter 8
The [trusted=yes] string tells the APT package manager to ignore the lack of package
signing. The file structure itself is incredibly simple, and so just as with our CentOS
example, we can create a template file so that the relative URL can be populated using a
variable:
1. First, we'll create a role called pulpconfig and create the
following templates/sources.list.j2 template:
deb [trusted=yes] http://pulp.example.com/pulp/deb/{{
ubuntu_os_relurl }} bionic main
deb [trusted=yes] http://pulp.example.com/pulp/deb/{{
ubuntu_security_relurl }} bionic-security main
deb [trusted=yes] http://pulp.example.com/pulp/deb/{{
ubuntu_updates_relurl }} bionic-updates main
2. Then, we will create some tasks with the role to install this template and move
aside any old configuration for APT:
---
- name: Create a directory to back up any existing REPO
configuration
file:
path: /etc/apt/originalconfig
state: directory
- name: Move existing config into backup directory
shell: mv /etc/apt/sources.list /etc/apt/originalconfig
- name: Copy across and populate Pulp templated config
template:
src: templates/sources.list.j2
dest: /etc/apt/sources.list
owner: root
group: root
- name: Clean out dpkg database
shell: "apt-get clean"
[ 231 ]
Enterprise Repository Management with Pulp Chapter 8
3. Finally, we will define a role to update the kernel, but this time using APT:
---
- name: Update the kernel
apt:
name: linux-generic
state: latest
4. Our site.yml playbook for Ubuntu systems now looks like this—save for the
variable differences, it is almost identical to the CentOS 7 one, once again
highlighting the value in using Ansible as an automation platform:
---
- name: Install Pulp repos and update kernel
hosts: all
become: yes
vars:
ubuntu_os_relurl: "bionic-amd64-08aug19"
ubuntu_security_relurl: "bionic-security-amd64-08aug19"
ubuntu_updates_relurl: "bionic-updates-amd64-08aug19"