2
)e((gb
1)s, gα2+rw2
2
1, gα1+bα2
) = gT
s.
1
ktag−ctag = e(gs
1, grw
2 )
)/e(gs
3.2 Security Proof
We prove the security of the above basic IBBE scheme inspired from Ramanna’s
original inner production encryption scheme [31] following the theorem:
pairing G = (p, e, G1, G2, GT ), the basic IBBE scheme (cid:81)
Theorem 1. Suppose the ADDH1 and DDH2 assumptions hold in the Type-3
IBBE in Section 3.1 is
adaptively secure.
12
1 , gu1
1, C(cid:48)
Our security proof is obtained by applying the Waters’ dual system methodol-
ogy [37] via a hybrid argument over a sequence of games. Before we describe
these games, we introduce the semi-functional headers and secret keys in terms
of a transformation on a normal header or key. Note that these algorithms are
provided for deﬁnitional purposes and only used in the security proof, but not in
a real system. In particular, they do not need to be eﬃciently computable from
the public parameters.
SFEncap(P P, M SK, S, gw1
1 ): The algorithm ﬁrst runs the Encap algorith-
m on a set S = {ID1, ..., IDn} to generate a normal header-session key pair
3, ctag(cid:48)). Then it randomly chooses µ ∈ Zp,
(Hdr(cid:48), K(cid:48)) with Hdr(cid:48) = (C(cid:48)
2, C(cid:48)
and sets the semi-functional session key K = K(cid:48) · e(gµ
1 , gα1
2 ), together with
3 · gµ((cid:104)y,u1(cid:105)+ctag·w1)
1 , C3 = C(cid:48)
C2 = C(cid:48)
,
IDj∈S (Z − IDj) =
i=0 yiZ i. The resulting header Hdr = (C1, C2, C3, ctag) is returned as the
are needed to generate the
where y = (y0, y1,··· , ym) is the coeﬃcient from PS[Z] =(cid:81)
(cid:80)n
semi-functional header. Additionally, gw1
1
semi-functional header in this algorithm.
SFKeyGen(P P, M SK, ID, g1/b
ID ={K(cid:48)
rithm to generate a normal private key SK(cid:48)
1,K(cid:48)
2,K(cid:48)
3,(K(cid:48)
4,i, K(cid:48)
Then it chooses a random γ ∈ Zp, and sets K1 = K(cid:48)
1 · gγ
2 , K2 = K(cid:48)
i=1} and the tags {(ktagi)m
the other elements {K3, (K4,i, K5,i)m
The resulting key SKID = {K1, K2, K3, (K4,i, K5,i, ktagi)m
semi-functional secret key. Note that g1/b
): The algorithm ﬁrst runs the KeyGen algo-
i=1}.
5,i, ktag(cid:48)
i)m
2/gγ/b
, leaving
i=1} unchanged.
i=1} is returned as the
2, ctag = ctag(cid:48). It then sets C1 = C(cid:48)
is also needed in this algorithm.
and gu1
1
1 · gµ
1
2
2
2
2
1 ,(cid:81)m
i=1 K yi
1 , K1)/A(cid:48) = e(gµ
4,i)/e(gµ((cid:104)y,u1(cid:105)+ctag·w1)
2 )r)/e(gµ·w1
1 , gα1
We observe that if one applies the decapsulation procedure with a semi-
functional key and a normal header, decapsulation will succeed as e(C1, gγ
2 ) =
e(C2, gγ/b
). That is, a normal header when decapsulated with a semi-functional
user key returns the corresponding normal session key. Similarly, decapsulation
of a semi-functional header by a normal key will also succeed because of:
A(cid:48) = e(gµ
e(gµ
which equals the extra component of the semi-functional session key. However,
when a semi-functional key is used to decapsulate a semi-functional header, the
resulting session key will have an additional term of e(gµ
2 ), which means
decapsulation will fail when both the header and user’s key are semi-functional.
We now present a sequence of games between an adversary A and a challenger
C deﬁned as follows:
– GameReal: The real IBBE security game, which is basically follows the adap-
ktag−ctag = e(gµ·w1
2) = e(gµ
, K3)
, gr
· (gw1
1 , gγ
1 , gα1
2 ),
, gr
2),
1
2
1
1
1
tive security model of [15].
– Game0: The same as GameReal, except that the challenge header and session
key are semi-functional.
– Gamek: The same as Game0, except that the ﬁrst k private keys are semi-
functional for 1 (cid:54) k (cid:54) q, where q is the number of key extraction queries
made by the adversary A.
random element of GT .
– GameFinal: The same as Gameq, except that the challenge session key is a
13
A,IBBE , AdvGame0
A,IBBE, AdvGamek
We denote AdvGameReal
Our proof will progress as follows, which can show that each game deﬁned above
is indistinguishable from the next under a complexity assumption. First, we
transit from GameReal to Game0, where the adversary A’s advantage is bounded
by the DDH1 assumption. Then we transit from Gamek−1 to Gamek for each 1 (cid:54)
k (cid:54) q, and the adversary A’s advantage is bounded by the DDH2 assumption.
We note that in Gameq both the challenge header and all the private keys are
semi-functional. At this point any private keys the challenger C gives out are
not useful in decapsulating the header. Finally, we transit Gameq to GameFinal
under the ADDH1 assumption. It is easy to check that the header-session key
pair given to the adversary A is independent with β in GameFinal, where the
adversary has no advantage unconditionally.
A,IBBE (1 (cid:54) k (cid:54) q) and AdvGameFinal
A,IBBE
as the advantage in GameReal, Game0, Gamek and GameFinal, respectively. Our
hybrid argument is accomplished in the following lemmas:
Lemma 1. If there is an adversary A with
can build an algorithm C0 with advantage AdvDDH1
assumption for the Type-3 pairing G.
Lemma 2. Suppose that there exists an adversary A that makes at most q
queries with advantage
k (cid:54) q. Then we can build an algorithm Ck with advantage AdvDDH2
breaking the DDH2 assumption for the Type-3 pairing G.
(cid:12)(cid:12)(cid:12)AdvGameReal
(cid:12)(cid:12)(cid:12) = ε, we
(cid:12)(cid:12)(cid:12) = ε for some k where 1 (cid:54)
(cid:12)(cid:12)(cid:12) = ε, we
(cid:12)(cid:12)(cid:12)AdvGameq
(cid:12)(cid:12)(cid:12)AdvGamek−1
Lemma 3. If there is an adversary A with
can build an algorithm C with advantage AdvADDH1
assumption for the Type-3 pairing G.
C0,G = ε in breaking the DDH1
A,IBBE−AdvGameFinal
A,IBBE
A,IBBE −AdvGamek
A,IBBE
A,IBBE −AdvGame0
A,IBBE
= ε in breaking the ADDH1
Ck,G = ε in
C,G
The indistinguishability of GameReal and Game0 as well as that of Gamek−1
and Gamek for 1 (cid:54) k (cid:54) q can be proved similarly as the way in [31]. Due to
space constraints, the proof for Lemma 1 and Lemma 2 is omitted here, but
can be found in the full version. Here we only present the proof for Lemma 3 in
Appendix A, which is the most non-trivial part in the theorem.
In addition, we note that the value of β is information theoretically hidden
from the adversary A in GameFinal, the probability in which A wins is exactly 1
2 .
Hence, A has no advantage in GameFinal:
(cid:12)(cid:12)(cid:12)AdvGameFinal
(cid:12)(cid:12)(cid:12) = 0. Thus, we have
the advantage of A in breaking the security of our basic IBBE scheme(cid:81)
(cid:12)(cid:12)(cid:12)
(cid:12)(cid:12)(cid:12)+
(cid:12)(cid:12)(cid:12)AdvGameFinal
(cid:54)(cid:12)(cid:12)(cid:12)AdvGameReal
(cid:12)(cid:12)(cid:12)+
(cid:12)(cid:12)(cid:12)AdvGameq
(cid:12)(cid:12)(cid:12)
(cid:12)(cid:12)(cid:12)(cid:54)(cid:12)(cid:12)(cid:12)AdvGameReal
(cid:12)(cid:12)(cid:12)AdvGameReal
A,IBBE −1
(cid:12)(cid:12)(cid:12)+
(cid:12)(cid:12)(cid:12)AdvGamek−1
q(cid:88)
IBBE:
A,IBBE −1
A,IBBE−AdvGameFinal
A,IBBE −AdvGameFinal
A,IBBE
A,IBBE −AdvGamek
A,IBBE
A,IBBE − 1
AdvIND - CPA
A,IBBE =
A,IBBE
2
2
2
A,IBBE −AdvGame0
A,IBBE
C,G + q · AdvDDH2
= AdvDDH1
k=1
C,G + AdvADDH1
C,G
.
14
Since the number of key extraction queries q is bounded by polynomial size, the
advantage AdvIND-CPA
A,IBBE deﬁned above is negligible under the DDH1, DDH2 and
(cid:117)(cid:116)
ADDH1 assumptions. This completes the proof of Theorem 1.
4 Construction of Revocable IBBE Scheme
In this section, we present an eﬃcient revocable IBBE scheme with constant size
of headers, which is proven semi-adaptively secure in the standard model based
on the IBBE scheme described in Section 3.1. As mentioned before, we basically
follow the simple two-level HIBE (without delegating property) strategy in our
construction. That is, the ﬁrst level using the adaptively secure IBBE scheme,
is assigned for identity, and the second level using the selectively secure Boneh-
Boyen IBE [4], is assigned for the polynomial bounded time period. Our revocable
IBBE scheme(cid:81)
RIBBE is described as follows:
– Setup(λ, m, N ): Given the security parameter λ, PKG generates a Type-3
pairing G = (p, e, G1, G2, GT ) of prime order p. Also, two random generators
g1 ∈ G1 and g2 ∈ G2 are chosen as well as e(g1, g2) ∈ GT is computed.
As the maximum number of privileged identities is m, PKG then chooses
from Zp two random (m+1)-dimensional vectors u1 = (u1,0, u1,1,··· , u1,m),
u2 = (u2,0, u2,1,··· , u2,m). Assuming that there are at most N users in the
revocable IBBE systems, where N is a power of two for simplicity, a binary
tree BT with N leaves is chosen. To generate the system public parameters
P P , the authority PKG does the following:
1. Choose randomly b R←− Z∗
2. Set u = u1 + bu2, w = w1 + bw2, α = α1 + bα2;
3. Compute U 1 = gu
4. Finally, output public parameters to be:
1, U 1, W1, Z1, ˆZ1, gT , g2, gu1
2 , gu2
2 ).
2 ), and the revocation list is RL =∅.
The master key is deﬁned M SK = (gα1
– SKGen(P P, M SK, ID, ST ): For a user associated with an identity ID ∈
Zp, PKG ﬁrst chooses m random tags: ktag1,··· , ktagm from Zp. It then
picks an unassigned leaf node η randomly from BT and stores ID in this
node η. For each node θ ∈ P ath(BT, η), the authority does the following:
1. Recall Hθ = (H1,θ, H2,θ) from BT if it was deﬁned. Otherwise, choose
p, α1, α2, w1, w2, z1, z2, ˆz1, ˆz2
1 ,gT = e(g1, g2)α,Z1 = gz1+b·z2
R←− Zp;
, ˆZ1 = g ˆz1+b·ˆz2
P P = (g1, gb
1 ,W1 = gw
2 , gz1
2 , gw1
2 , gw2
2 ,gα2
2 , gz2
2 , g ˆz1
2 , g ˆz2
1
1
;
R←− G2 and store Hθ in the node θ;
2. Choose rθ randomly from Zp, and compute:
H1,θ, H2,θ
K1,θ = H1,θ·(gw1
K4,i,θ = grθ(u1,i−(ID)i·u1,0+ktagi·w1)
2 )rθ , K2,θ = H2,θ·(gw2
2
2 ; For each i = 1, 2, ..., m:
2 )rθ , K3,θ = grθ
,K5,i,θ = grθ(u2,i−(ID)i·u2,0+ktagi·w2)
i=1}θ∈P ath(BT,η).
2
.
– KeyUp(P P, M SK, T, RL, ST ): PKG parses M SK as (gα1
Return the private secret key SKID and an updated state ST with SKID =
{K1,θ, K2,θ, K3,θ, (K4,i,θ, K5,i,θ, ktagi)m
2 ), and pub-
lishes key updates at time period T for each node θ ∈ KUNode(BT, RL, T )
in the following steps:
2 , gα2
15
1. Retrieve Hθ = (H1,θ, H2,θ) from the state ST (As noted in [33], Hθ is
always pre-deﬁned in the SKGen algorithm).
KU1,θ = gα1
2
2
2
2
2 gsθ(z2+T·ˆz2)
2
3,(DK4,i,DK5,i,ktagi)m
, DK2 = K2,θ·KU2,θ·gr(cid:48)
θ·w2
θ
2 . For i = 1, 2, ..., m:
,DK5,i=K5,i,θ·gr(cid:48)
R←− Zp, and compute:
2 gsθ(z1+T·ˆz1)
H−1
1,θ , KU2,θ = gα2
2
θ ∈Zp, compute DKID,T ={DK1,DK2,DK3,DK(cid:48)
ciated coeﬃcient from: PS[Z] =(cid:81)
2. Choose sθ
H−1
2,θ , KU3,θ = gsθ
2 .
Return the key update KUT = {KU1,θ, KU2,θ, KU3,θ}θ∈KUNode(BT,RL,T ).
– DKGen(P P, SKID, KUT ): Parse KUT = {KU1,θ, KU2,θ, KU3,θ}θ∈J and
i=1}θ∈I for some set of nodes
SKID ={K1,θ, K2,θ, K3,θ, (K4,i,θ, K5,i,θ, ktagi)m
I and J. The user will return ⊥ if I ∩ J = ∅. Otherwise, choose θ ∈ I ∩ J,
i=1}:
r(cid:48)
θ, s(cid:48)
θ·w1
θ·(z1+T·ˆz1)
θ·(z2+T·ˆz2)
DK1 = K1,θ·KU1,θ·gr(cid:48)
gs(cid:48)