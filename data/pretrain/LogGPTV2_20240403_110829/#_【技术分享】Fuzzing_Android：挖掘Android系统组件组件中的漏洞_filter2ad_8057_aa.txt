# 【技术分享】Fuzzing Android：挖掘Android系统组件中的漏洞

#### 译文声明
本文为翻译文章，原文来源：Black Hat。具体内容及含义以原文为准。

**翻译者：** [hac425](http://bobao.360.cn/member/contribute?uid=2553709124)  
**稿费：** 240 RMB（欢迎投稿！）  
**投稿方式：** 发送邮件至 linwei#360.cn 或访问 [网页版](http://bobao.360.cn/contribute/index) 在线投稿。

## 摘要
本文将介绍一种用于发现Android系统组件中不同类型漏洞的fuzzing方法。我们将探讨这种方法在Android平台上的应用，并列举一些已经发现漏洞的系统组件，包括Stagefright框架、mediaserver进程、APK安装进程、installd守护进程、dex2oat和ART。此外，本文还将讨论fuzzing过程中的关键步骤，如数据生成、测试用例执行、日志记录以及崩溃分类机制，并提出解决错误重现等挑战的方法。最后，我们将详细介绍几种使用此方法开发的工具及其技术细节，以及已发现的bug和相关CVE编号。

## Fuzzing简介
Fuzzing是一种通过向软件发送大量随机或半随机数据来检测其潜在漏洞的技术。这一过程通常涉及生成测试数据、将其传递给目标程序并观察程序的行为，然后不断重复该循环。目前，许多漏洞都是通过fuzzing技术被发现的。

## Android中的Fuzzing方法
### 数据生成
Fuzzing可以分为以下几种类型：
- **盲测（Dumb Fuzzing）**：简单地对输入数据进行随机修改。
- **智能模糊（Smart Fuzzing）**：基于用户定义的数据结构规则生成变异数据。
- **反馈式模糊（Feedback-based Fuzzing）**：根据程序运行时的路径信息动态调整测试数据。

对于文件处理程序而言，盲测可以通过随机改变某些字节值来创建测试文件；而智能模糊则要求用户提供文件格式的具体规则，fuzzer依据这些规则生成测试文件。常用的fuzzing工具有：
- Basic Fuzzing Framework (BFF)
- Zzuf
- Radamsa
- Fuzzbox
- American Fuzzy Lop (AFL)

### 提交数据
提交数据的方式取决于目标系统的特性。例如，对于需要读取特定文件类型的组件，我们可能需要直接向其提供相应格式的文件作为输入。

### 日志监控
Android提供了`logcat`命令行工具来收集系统调试信息。利用`logcat`，我们可以捕获应用程序和其他组件产生的日志，特别是当它们发生崩溃时的日志。通过设置适当的过滤器，我们可以专注于查看感兴趣的日志条目。

### 分类机制
随着fuzzing过程的进行，会产生大量的崩溃报告。为了提高效率，我们需要一个有效的分类机制来识别并存储独特的崩溃实例。每次系统崩溃后，在`/data/tombstones`目录下会生成一个包含详细信息（如PC寄存器值、栈回溯等）的tombstone文件。基于这些信息，我们可以唯一标识每个崩溃事件。

## 在Android中分析与调试崩溃
除了`tombstone`文件外，还有其他多种手段可用于诊断Android应用中的崩溃问题。例如，`dmesg`命令可显示内核消息缓冲区的内容，这对于理解某些类型的异常特别有用。此外，GDB也可以作为一个强大的调试工具，特别是在拥有源代码的情况下，它可以帮助开发者更准确地定位问题所在。

## 针对Android媒体框架的Fuzzing
本项目的核心思想是构造出虽然损坏但仍符合一定格式规范的媒体文件，并让目标解析器尝试处理这些文件，从而暴露出可能存在的安全缺陷。具体实现上，我们使用自定义的Python脚本来自动化整个流程——从生成测试文件到分发给多台设备，再到收集结果并分析潜在的安全隐患。

希望以上内容能够帮助读者更好地理解和实践针对Android系统的fuzzing技术。