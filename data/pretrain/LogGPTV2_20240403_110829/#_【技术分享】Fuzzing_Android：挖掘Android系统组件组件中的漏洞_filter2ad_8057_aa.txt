# 【技术分享】Fuzzing Android：挖掘Android系统组件组件中的漏洞
|
##### 译文声明
本文是翻译文章，文章来源：blackhat
原文地址：
译文仅供参考，具体内容表达以及含义原文为准。
****
**翻译：**[ **hac425**](http://bobao.360.cn/member/contribute?uid=2553709124)
**稿费：240RMB（不服你也来投稿啊！）**
**投稿方式：发送邮件至linwei#360.cn，或登陆**[
**网页版**](http://bobao.360.cn/contribute/index) **在线投稿**
**全文概述**
本文重点介绍一种可用于发现Android系统组件中不同类型的漏洞的fuzzing方法。
本文将介绍一种通用的漏洞挖掘方法以及他是怎么样应用在Android平台的。 以下是一个已经被发现漏洞的系统组件列表：
Stagefright框架，mediaserver进程，Android APK安装进程，installd守护进程， dex2oat，ART。
本文将涵盖许多主题，首先以实际的fuzzing过程开始,从数据/种子生成到测试用例执行,日志记录到最后Crash分类机制，并且讨论如何解决诸如错误,crash重现等挑战
，整理出独特的crash，并根据crash的严重性对crash进行优先排序。 第二部分 本文将解释几个使用这种方法开发的工具的创造过程
,接着将重点讨论工具的具体的技术细节，以及目前为止已经发现的bug，以及相关的CVE和可能可利用模式。
**Fuzzing简介**
Fuzzing是这样一种行为:利用漏洞检查工具，发送数据到组件，或对指定格式进行填充，完成数以万计的检查任务，来帮助我们发现软件中不期望有的漏洞的行为.一个完整的Fuzzing过程主要包括,生成测试数据,把测试数据交给目标程序来处理,观察程序是否出现非预期的行为,然后又回到第一步,不断循环.目前而言,大部分的漏洞都是通过Fuzzing挖掘到的.
**  
**
**Android中的Fuzzing方法**
这一部分将介绍一系列可用于Fuzzing安卓系统组件的基本概念和方法 .
**数据生成**
Fuzzing通常可分为Bind
fuzz,他的大致做法就是把测试数据的进行随机的变化,和智能fuzz,他的做法为首先需要用户定义好数据的大致结构,然后fuzzer基于这些规则进行随机数据生成,以及现在很火的反馈式fuzz,其特点为首先传入测试数据给程序,
然后通过对程序指令进行监控,看看程序执行路径,以此来对数据进行变异. 以Fuzz文件处理程序为例,bind
fuzz的做法就是以一些字节为单位将他设置为一些随机的边界值,来生成文件.而智能fuzz的行为是,用户根据文件的格式,定义好规则,然后fuzzer根据这些规则,生成文件.下面是一些常用的fuzz工具.
Basic fuzzing framework (BFF) – mutational fuzzer targeting software that
consumes file input
Zzuf – application input fuzzer
Radamsa – general purpose test case generator for fuzzing
Fuzzbox – fuzzing tool specialized in targeting media codecs
American Fuzzy Lop (AFL) – instrumentation driven file format fuzzer
**提交数据给程序处理**
这一部分极大的依赖于我们所要测试的系统组件是什么,我们需要根据目标系统组件获取数据的方式,为他定制这一部分的实施方法.
**日志监控**
Android系统提供了一种收集系统调试信息的方法,即为logcat,通过logcat我们可以从系统的应用程序和其他组件收集各种信息,包括系统组件崩溃时的现场等等
同时logcat还支持过滤器来方便我们查看我们想要的日志..所以我们可以使用logcat作为我们对程序处理数据后的行为的监控器.下面是一个使用的例子.
可以看到这里发现了一个程序 Fatal signal 11 (SIGSEGV) 的
crash,这样的crash很有可能就是一个有用的crash(也许会带来一个可利用的漏洞)
**分类机制**
在Fuzzing进行了一定时间后会产生很多的crash,但是这些crash中有很多都是差不多的,分类机制的作用就是把大量的重复的crash识别出来,然后把每一个独特的crash保存起来,这样可以大大减少研究人员后期分析的工作量.在每次系统崩溃后,系统会在/data/tombstones生成一个tombstone文件.在该文件中包含很多有用的信息,其中包括了程序崩溃时pc寄存器的值,寄存器和sp寄存器附近的值,以及栈回溯.一般来说我们可以通过程序崩溃时pc寄存器的值来唯一确定一个crash.下面来看一个被恶意媒体文件导致media
server崩溃之后生成的tombstone文件的内容.
下面给出对 crash分类机制的实现方法.
1.解析程序日志,确定造成程序crash的输入数据.
2.拿这个输入数据再次测试
3.对每一次的测试:
a.拿到生成的tombstone
b.解析tombstone文件拿到pc值
c.检查这个pc值是否已经被记录过了.
d.如果pc值是一个新的值,那么就把tombstone和测试用例保存起来.
**在Android中分析和调试 Crash**
在安卓中有很多的方法和工具能够被用来找出在程序发生崩溃时,到底发生了什么.tombstone中包含的最相关的信息是崩溃的堆栈跟踪，造成崩溃的signal，signal的code，发生错误的地址和PC的值。例如对于segmentation
fault signal 我们可以有一个code 1（SEGV_MAPERR），这意味着 地址未映射到对象或code
2（SEGV_ACCERR），这意味着我们对这个映射对象没有权限。 Dmesg是用于调试Android上的崩溃的另一个选择。 这是类Unix
操作系统中一个常见的命令,用于打印内核的消息缓冲区。 下面是2个Stagefright media framework崩溃的消息的示例
。这个消息给出的是要访问不可访问的页,以及要向用户空间不可写的页写数据.
以下是这些错误码在Dmesg中的对应的消息解释.
GDB也可以在Android环境中用作更可靠的调试解决方案。要使用gdb来调试crash,需要使用可在Android平台下运行的gdbserver.首先我们需要将gdbserver附加到要调试的程序上并监听一个端口.
之后需要把端口转发下,并在在pc上用gdb连到gdbserver上.
然后为了方便调试,我们可以加载调试符号.
如果在分析崩溃时我们有源代码,如果能把崩溃点对应到源代码中那自然是最好不过的了,这样可以很方便的帮助我们分析Crash,以便更好地了解发生了什么.这时我们就可以使用linux上的
addr2line 命令了.要使用该命令你需要将PC寄存器的值传给这个程序.下面来一个示范.
**Fuzzing the media Framework in Android**
这个项目的主要思路是先创建损坏但结构有效的媒体文件，然后把他们交给目标程序去解析,并且监控程序的状态,来发现潜在的问题.。 具体的实现是,通过使用定制开发
Python脚本来向分布式的Android设备上发送畸形的文件， 记录结果并以自动化方式监控可能的问题。