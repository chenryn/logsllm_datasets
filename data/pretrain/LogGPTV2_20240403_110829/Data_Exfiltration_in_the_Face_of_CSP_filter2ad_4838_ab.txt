We show an example resolution for www.example.com in
Figure 1. As it is common practice, the client sends a re-
cursive query to its local DNS server demanding a fully
DNS server.comDNS server.example.comDNS serverwww.example.com?1www.example.com = 1.2.3.48www.example.com?4ask .example.com DNS server5www.example.com?2ask .com DNS server3www.example.com?6www.example.com = 1.2.3.47clientlocalDNSserver855resolution for the queried domain name on behalf of the
client (step 1). Starting with a predeﬁned root server, the
local DNS server iteratively queries other DNS servers for
the target DNS record. The response is either a reference
to another DNS server lower in the hierarchical tree struc-
ture which can provide more information (steps 3 and 5)
or an authoritative response, i.e. the actual IP address of
www.example.com (step 7). The local DNS server can ﬁnally
resolve the domain name for the client (step 8).
Note that the DNS query to the authoritative DNS server
does not come directly from the initiating client but from
the local DNS server. The client is therefore hidden behind
the local DNS server and the authoritative DNS server never
learns the true origin of the query. However, the authori-
tative DNS server knows that ﬁrstly, the domain name was
resolved and secondly, it can estimate the origin of the query
based on the local DNS server’s IP address.
3.2 DNS and resource prefetching
On the Web, retrieving a resource from a web server re-
quires a web browser to contact a web server, request the
resource and download it. This process involves a number
of sequential steps, depicted in Figure 2.
Figure 2: The diﬀerent steps in the typical retrieval of a web
resource together with the resource hints that cover them.
Consider for instance the retrieval of a resource located at
http://example.com/image.png. The ﬁrst step after pars-
ing the URL is to resolve the hostname example.com into an
IP address through the DNS resolution mechanism. Next,
the browser makes a TCP connection to the IP address,
which may involve a SSL/TLS handshake for an HTTPS
connection. Once established, the browser uses this TCP
connection to request the resource /image.png from the web
server using an HTTP request. The browser then waits for
an HTTP response over the same TCP connection. Finally,
the image can be rendered in the browser.
On the Web, every millisecond matters. Experiments per-
formed by Google, Bing, Facebook, Amazon and other ma-
jor players on the Web [42], indicate that visitors experienc-
ing longer delays on a website spend less time on it. Their
measurements indicate that even a delay of half a second
can cause a 20% drop in web traﬃc, impoverish user sat-
isfaction and has more adverse eﬀects in the long term. A
faster loading web page not only improves user satisfaction
and revenue, but also reduces operating costs.
Web browsers, being the window to the Web, play an
important part in the user experience. Web browser vendors
continually improve the performance of their browsers to
outperform competing browsers. Because of its importance,
performance belongs to the main set of features advertised
by any browser vendor.
An important area of performance enhancements focuses
on reducing the load time of a web page through prefetch-
ing and caching. Browsers anticipate a user’s next actions
and preemptively load certain resources into the browser
cache. Web developers can annotate their web page with
resources hints, indicating which resources can help improve
a browser’s performance and the user experience. Domain
Name Service (DNS) prefetching is extensively used to pre-
resolve a hostname into an IP address and cache the result,
saving hundreds of milliseconds of the user’s time [22].
DNS and resource prefetching are indicated in Figure 2 as
the “dns-prefetch” and “prefetch” arrows respectively.
3.2.1 Automatic and forced DNS prefetching
Figure 3: Automatic DNS prefetching states. By de-
fault, the mechanism is enabled for HTTP and disabled for
HTTPS. It can be enabled or disabled explicitly, but once
disabled explicitly, it cannot be re-enabled.
Practical measurements indicate uncached DNS resolution
times ranging from about 200 ms up to a few seconds [22].
Automatic DNS prefetching improves performance by re-
solving hostnames preemptively.
DNS prefetching is not standardized, we derived its oper-
ation from sources provided by Mozilla [18] and Google [22].
For privacy reasons, automatic DNS prefetching follows a
set of rules that can be inﬂuenced by a web page’s devel-
oper. By default, the automatic DNS prefetching mecha-
nism will resolve DNS for all  elements on a web page
when this web page is served over HTTP. When served over
HTTPS, DNS prefetching is disabled by default. The state
diagram in Figure 3 illustrates how this mechanism behaves.
A web developer has the option to enable or disable auto-
matic DNS prefetching for his web page by means of the
X-DNS-Prefetch-Control HTTP header. Automatic DNS
prefetching can be enabled on an HTTPS web page by set-
ting this header to “on”. Likewise, the mechanism can be
disabled on HTTP pages by setting the header’s value to
“oﬀ”. Once disabled explicitly through this HTTP header,
the mechanism cannot be re-enabled for the lifetime of the
web page. Alternatively, this header can be set through
HTML  elements. This allows switching
the automatic DNS prefetching “on” or “oﬀ” at any point
during a web page’s lifetime.
In addition to automatic DNS prefetching, a web devel-
oper may also request the explicit DNS resolution of certain
hostnames in order to improve a web application’s perfor-
mance. This is called forced DNS prefetching and is accom-
plished through  elements with the rel attribute set
to dns-prefetch (denoted with rel=dns-prefetch for short
in this paper) as shown in the following example:
In this example, the hostname example.com is resolved
through the DNS prefetching mechanism and the result cached
in the DNS cache for future use.
3.2.2 Resource prefetching
While link elements with rel=dns-prefetch exclusively
concern the DNS prefetching mechanism, there are several
other relationship types that are concerned with resource
prefetching.
0.00s0.05s0.10s0.15s0.20s0.25s0.30s0.35s0.40s0.45s0.50sDNSresolutionTCPconnectHTTP requestHTTP responserenderingdns-prefetchpreconnectprerenderprefetchPermanentlydisabledEnabledDisabledHTTPHTTPSdisableenabledisable856The three typical relationship types [37] are depicted in
Figure 2, each spanning some steps a web browser must take
to render a web page, as well as the delays associated with
them. These three relationships can be explained as follows:
preconnect Used to indicate an origin from which re-
sources will be retrieved.
In addition to DNS resolution,
a web browser implementing this relationship will create a
TCP connection and optionally perform TLS negotiation.
prefetch Used to indicate a resource that can be retrieved
and stored in the browser cache. In addition to the steps
of the “preconnect” relationship, a web browser implement-
ing this relationship will also request the given resource and
store the response.
prerender Used to indicate a web page that should be ren-
dered in the background for future navigation. In addition
to the steps of the “prefetch” relationship, a web browser
implementing this relationship should also process the re-
trieved web page and render it.
Next to these three relationship types, web browser ven-
dors have implemented some variations on the same theme.
For instance, while “prefetch” indicates a resource that may
be required for the next navigation, “subresource” indicates
a resource that should be fetched immediately for the cur-
rent page and “preload” indicates a resource that should be
retrieved as soon as possible. HTML5 also deﬁnes link rela-
tionship types “next” and “prev” to indicate that the given
URL is part of a logical sequence of documents.
3.3 Prefetching under CSP
The CSP standard focuses on resource fetching but leaves
prefetching largely unattended. There are two relevant cases
that relate to prefetching, both pertain to the order in which
a browser processes information in order to enforce CSP:
CSP through HTML meta element The standard warns
that CSP policies introduced in a web page’s header through
HTML  elements do not apply to pre-
ceding elements. Consider the following example:
content=" default - src ’ none ’; " />
Because style.css is linked before the CSP policy is de-
ﬁned, the former is loaded. The script code.js is speciﬁed
after the CSP policy and its loading is thus blocked.
HTTP header processing Consider the following two
HTTP headers received in the provided order:
Link : ;
Content−S e c u r i t y−P o l i c y :
r e l=s t y l e s h e e t
s t y l e −s r c
’ none ’
The CSP standard recognizes that many user agents pro-
cess HTTP headers optimistically and perform prefetching
for performance. However, it also deﬁnes that the order
in which HTTP headers are received must not aﬀect the
enforcement of a CSP policy. Consequently the loading
of stylesheet style2.css as pointed to in the Link header
should be blocked in this example.
The standard does not mention DNS prefetching and it
is arguable if CSP intends to cover DNS prefetching at all.
We argue that if the loading of a resource is prohibited by a
CSP policy, optimization techniques such as DNS prefetch-
ing should not be triggered for that resource either.
4. PREFETCHING FOR DATA EXFILTRA-
TION IN THE FACE OF CSP
This section brings into the spotlight the fact that prefetch-
ing, as currently implemented in most browsers, can be
used for data exﬁltration regardless of CSP. First, we dis-
cuss the lack of DNS and resource prefetching support in
CSP. Second, we outline the attacker model. Third, we give
the attack scenarios based on injecting URLs, HTML, and
JavaScript. The experiments with browsers in Section 5 con-
ﬁrm that prefetching can be used for data exﬁltration in the
face of CSP in most modern browsers.
4.1 CSP and DNS prefetching
CSP limits the locations where external resources can be
loaded from. DNS servers are not contacted directly by web
applications to retrieve a resource.
Instead, DNS servers
return information that is used by a web browser as a means
to retrieve other resources. Section 3.1 shows that DNS
resolution can be complex and cannot easily be captured by
CSP, because CSP is web application speciﬁc, whereas DNS
resolution is unrelated to any particular web application.
A key question is how browser vendors have managed to
combine a browser optimization such as DNS prefetching,
together with a security mechanism such as CSP. In an ideal
world, such a combination would provide a performance en-
hancement as well as a security enhancement.
In reality
however, CSP does not cover DNS prefetching, causing this
performance enhancement to be at odds with communica-
tion restrictions of CSP.
In addition to DNS prefetching, browser vendors are im-
proving their browsers’ performance by prefetching resources
and storing them in the browser’s cache. Although this
improvement is focused on HTTP resources, there is no
clear CSP directive under which generic resource prefetching
would fall. Here too, one wonders how browser vendors cope
with the situation. Because it lies closer to the spirit of CSP,
resource prefetching should be easier to cover than DNS
prefetching and would ideally already be covered. In reality,
many  relationships used for resource prefetching are
not aﬀected by the CSP, limiting the eﬀect of CSP’s restric-
tions on communication with external entities.
4.2 Attacker model
Our attacker model, depicted in Figure 4, is similar to the
web attacker model [4] in the assumption that the attacker
controls a web server but has no special network privileges.
At the same time, it is not necessary for the user to visit this
web server. It is also similar to the gadget attacker [7] in the
assumption that the attacker has abilities to inject limited
kinds of content such as hyperlinks, HTML and JavaScript
into honest websites, such as example.com in Figure 4. How-
ever, it is not necessary that the injected resources are loaded
from the attacker’s server. To distinguish from the web and
gadget attackers, we refer to our attacker as the content in-
jection attacker. In addition, we assume that the attacker
can observe DNS queries to his domain and its subdomains.
857the HTTP request such as cookies, user-agent and other
potentially sensitive information about the victim’s browser.
JavaScript injection In the JavaScript injection scenario,
the attacker has the ability to execute a piece of chosen
JavaScript in the context of the given web page, which is
visited by the victim.
Again, without precaution, this scenario would clearly be
problematic since this is basically a XSS attack. However,
this is also what CSP was designed to protect against. A well
chosen CSP policy can prevent that unwanted JavaScript
code is loaded and for some cases, as in Listing 1, also pre-
vents that information is exﬁltrated.
Because this scenario is about JavaScript execution, we
assume the following strictest CSP policy that still allows
JavaScript execution, but which prohibits the loading of any
other resources:
d e f a u l t −s r c
s c r i p t −s r c
’ none ’ ;
’ s e l f ’
Note that this strong CSP requires that the attacker-
controlled JavaScript is present on the web server of the
visited web page. Although not impossible, it can be argued
that such a scenario is very unlikely. More relaxed CSP poli-
cies could allow that inline JavaScript is executed, allowing
the attacker to inject JavaScript through any known XSS
vectors. For this scenario, we abstract away from the exact
means employed by the attacker to execute JavaScript in-
side the web page’s JavaScript environment and just assume
that it can be done. What is important in this scenario is
that the CSP blocks the loading of any external resources.
Since JavaScript can alter the DOM, it can create HTML
elements and insert them anywhere on the visited web page.
Therefore, all information that can be exﬁltrated in the
HTML injection scenario, can also be exﬁltrated here. Fur-
thermore, since JavaScript can retrieve victim-speciﬁc in-
formation from the DOM and encode it in newly created
HTML elements, the attacker gains the ability to exﬁltrate
all victim-speciﬁc information including cookies, geolocation
or even the entire contents of the visited web page.
Moreover,  elements can ﬁre JavaScript load and
error events, the attacker is not limited to explicit data exﬁl-
tration only. A  element added inside the CSP sand-
box can observe when a resource has successfully loaded or
when it has failed to load, by registering an event handler for
the “load” and “error” events. This allows the attacker’s web
server to reply to a request with a single bit of information.
In this JavaScript injection scenario, resource prefetching
can thus be used to setup a two-way communication chan-
nel between the isolated JavaScript environment and the
attacker.
5. EMPIRICAL STUDY OF WEB BROWSERS
The experiment in this section studies DNS and resource
prefetching as implemented in the most popular web browsers [23],
and how these optimizations interact with CSP.
5.1 Experiment setup
In this experiment, we are interested in knowing when
attacker-controlled information breaches the CSP and reaches
an attacker-controlled server.
We make the assumption that a web developer places a
web page online in a certain origin and that this web page is
visited by a victim using a normal web browser. To test all
Figure 4: Attacker model and attack scenario. The attacker
controls the evil.com domain and can monitor requests to an
HTTP and DNS server inside this domain. A victim with a
CSP-enabled browser visits a web page on example.com in
which the attacker has injected some content. By monitoring
web and DNS traﬃc, the attacker can exﬁltrate information
out of the victim’s browser.
4.3 Attack scenarios
We consider three attack scenarios which do not require
any special interaction with the victim.
URL injection In the URL injection scenario, the attacker
has the ability to place a clickable  element onto a web
page that the victim visits, containing an attacker-chosen
URL. It is common practice for web software, such as e.g.
a wiki, blog or comment, to automatically convert URLs
into clickable links. Because of automatic DNS prefetching,
this scenario allows an attacker to determine when and from
where the victim visits the web page by monitoring DNS
traﬃc to the attacker’s own DNS server.
HTML injection In the HTML injection scenario, the at-
tacker has the ability to place an HTML fragment some-
where on the given web page, which is visited by the victim.
The variety of HTML elements the attacker can use may
be limited, for instance by server-side sanitization or ﬁlter-
ing. What is important is that if an attacker can inject a
 element with chosen “rel” and “src” attributes, re-
source prefetching will be triggered on certain browsers.
Without precaution, this scenario would clearly be prob-
lematic since a user may embed resources or even JavaScript
from the attacker’s web server to exﬁltrate information to
the attacker’s server. However, with a well chosen CSP pol-
icy, these attacks can be prevented. Indeed, CSP was intro-
duced exactly for this type of scenario.
In this scenario, we assume the following strictest CSP
policy, prohibiting the loading of any extra resources:
d e f a u l t −s r c
’ none ’
Consequently, this scenario also assumes that JavaScript
cannot be used by the attacker so that victim-speciﬁc in-
formation such as cookies, geolocation or other parts of the
DOM cannot be leaked.
Just as in the URL injection scenario, a successful attack
will inform the attacker when and from where the victim
has visited this web page.
In addition, any requests that
reach the attacker’s web server will reveal more information:
the victim’s IP address and any information carried inside
Retrieveweb pageinformation leaksvia DNS prefetchingattacker'sDNS serverattacker'sWeb serverinformation leaks viaresource prefetchingVictim browser with CSP evil.comexample.comweb serverinjection attack858three attack scenarios, we conﬁgure CSP as in the JavaScript
injection scenario.
As described in section 4.3, we assume that the attacker
can inject either HTML into the web page, or execute JavaScript
inside the web page’s JavaScript environment.