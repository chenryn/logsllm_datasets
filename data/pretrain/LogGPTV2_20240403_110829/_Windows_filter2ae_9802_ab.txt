user”肯定是无法和服务管理器通信的，但是不用担心，我们的命令已经以SYSTEM权限运行了，并且成功添加了一个用户。
现在我们以同样的方式，再将刚才添加的用户，添加到本地管理员组(需要再次停止服务，不过此时服务不在运行状态，因为刚才发生了错误，进程被终止了)。
下面可以享受你的新本地管理帐户了！
同样，你也可以将一个反弹shell载荷上传到目标机器中，并将binpath的值改成载荷的路径。
只是这次不用再手动使用这个方法了，有现成的metasploit模块：[exploit/windows/local/service_permissions](https://www.rapid7.com/db/modules/exploit/windows/local/service_permissions)。
你需要将这个模块和一个已经存在的Meterpreter会话(已经得到的低权限会话)关联起来：
**三、不安全的文件/文件夹权限**
和前面我们讲过的“服务路径没加双引号”很相似，“服务路径没加双引号”利用了“CreateProcess”函数的弱点，结合了文件夹权限与服务可执行文件路径。但是在这部分，我们转换思路，试着直接替换可执行文件本身。
例如，如果对测试环境中“Vulnerable Service”服务的可执行文件路径的权限进行检查，我们可以看到它没有被保护好：
仅仅需要将“Executable.exe”文件替换成一个反弹shell载荷，并且当服务重启时，会给我们返回一个SYSTEM权限的meterpreter
会话。
**四、AlwaysInstallElevated设置**
AlwaysInstallElevated是一个策略设置，当在系统中使用Windows
Installer安装任何程序时，该参数允许非特权用户以system权限运行MSI文件。如果启用此策略设置，会将权限扩展到所有程序。
实际上，启用这个值，就相当于给非特权用户授予了管理员权限。但是有一点我理解不了，有时候系统管理员会启用这个设置：
你需要检查下面这两个注册表键值，来了解这个策略是否被启用：
如果你获得了一个低权限的Meterpreter会话，reg内建命令可以帮你检查这些值：
如果，你得到了一个错误，就像是“ERROR: The system was unable to find the specified registry
key or
value.”，它的意思是这个注册表值没有被创建，也就是说这个策略没有启用。但是如果你看到了下面的输出结果，那意味着该策略设置是启用的，你可以利用它。
正如我前面说过的，在这种情况下，Windows
Installer会使用高权限来安装任何程序。因此，我们需要生成一个恶意的“.msi”文件，并运行它。Msfvenom工具可以完成这个工作。
如果你想生成一个“.msi”文件，并向目标机器中添加一个本地管理帐户，你可以使用“windows/adduser”作为载荷:
但是在这个例子中，我要生成一个反弹shell载荷(Payload.exe)，并使用一个msi文件执行这个载荷，首先，产生Payload.exe：
然后使用“windows/exec”生成一个malicious.msi。请确定你填写了Payload.exe的正确路径：
然后我们将这两个可执行文件上传到目标机器中。
在执行“.msi”文件前，在另一个窗口中开启一个新的监听，等待高权限的shell连接：
现在，我们准备执行！
“/quiet”表示安静模式，无用户交互。“/qn”表示没有GUI。“/i”表示安装或配置产品。
如下图，成功返回：
除了手动使用这个技术，你也可以使用现成的metasploit模块：[exploit/windows/local/always_install_elevated](https://www.rapid7.com/db/modules/exploit/windows/local/always_install_elevated)。
该模块SESSION参数需要设置为一个已经存在的Meterpreter会话：
**五、DLL劫持**
假如上面的方法都没成功，不要放弃。我们开始研究一下正在运行的进程。
如上图，如果我们的shell是以低权限运行的，我们不会看到进程的详细信息(运行在高权限上的进程)，如用户、路径、结构。但是我们可以了解到有哪些进程运行在高权限上。如果其中的一个进程存在漏洞，我们就可以利用它来提升我们的权限。
在对进程研究过程中，Vulnerable.exe进程引起了我的注意，让我们来找一找它的位置，并下载它：
当我对它进行检查后，我意识到它试图加载一个名为“hijackable.dll”的DLL。
在这个例子中，Vulnerable.exe进程存在DLL劫持漏洞。当然，实际上这个Vulnerable.exe只是一段简单的代码，在没有做检查的情况下加载了一个DLL：
回到我们的话题，什么是DLL劫持呢？微软的[一篇文章](https://msdn.microsoft.com/en-us/library/windows/desktop/ff919712\(v=vs.85\).aspx)是这样解释的：
当应用程序动态加载动态链接库而不指定完整的路径名时，Windows会尝试通过一个特定的目录顺序，来搜索定位DLL，在这里有[目录的搜索顺序](https://msdn.microsoft.com/en-us/library/windows/desktop/ms682586\(v=vs.85\).aspx)。如果攻击者得到了其中一个目录的控制权限，他可以用一个恶意软件来替代DLL。这种方法有时被称为DLL预加载攻击或二进制移植攻击。如果系统在搜索到受感染的目录前，没有找到合法的DLL，那它将会加载恶意的DLL。如果这个应用程序是以管理员权限运行的，那么攻击者就可以成功的得到本地权限提升。
当一个进程尝试加载DLL时，系统会按以下顺序搜索目录：
1.应用程序加载的目录。
2.系统目录。
3.16比特系统目录。
4.Windows目录。
5.当前目录。
6.PATH 环境变量中列出的目录。
因此，为利用这个漏洞，我们按以下步骤：
1.检查进程加载的DLL是否存在于磁盘中。
2.如果不存在，将恶意DLL放在我刚才提到的其中一个目录中。当进程执行时，它可能会找到该DLL，并加载DLL。
3.如果DLL在上述其中一个目录中存在，那么将恶意DLL放在比当前目录的搜索优先级更高的目录中，例如，如果源DLL在Windows目录中，并且我们获得了应用程序加载目录的权限时，我们可以将恶意DLL放到应用程序加载目录，当应用程序加载DLL时，它会首先加载该目录的DLL。最终，我们的恶意代码会以高权限执行。
下面，让我们在目标机器中搜索一下hijackable.dll的位置：
貌似在机器上不存在，但是我们实际上无法确定这一点，也许它被放在了一个我们没有权限查看的目录中，不要忘了，我们目前的权限仍然是低权限。
下一步是检查可能的弱权限文件夹。我通常检查一个软件是否被安装在根目录中，如Python。因为如果一个文件夹被创建在根目录中，通常对于所有认证的用户(authenticated
users:Windows系统中所有使用用户名、密码登录并通过身份验证的账户，不包括来宾账户Guest)，默认情况下它是可写的。像Python、Ruby、Perl等等。通常会添加到PATH环境变量中。
记着，Windows会检查PATH环境变量中的目录。
正如我想的，目标机器上安装了Python，让我们检查一下它的权限：
太好了，认证的用户有修改的权限。
剩下最后一项检查了，我们需要确定“C:Python27”目录是否已经被添加到PATH环境变量中，检查这个很容易，在shell中试一下“python
-h”就知道了，如果帮助页面成功显示，意味着环境变量已经添加了：
结果非常好，下面我们创建一个DLL版本的反弹shell载荷：
将这个DLL上传到“C:Python27”目录：
现在，我们重启“Vulnerable.exe”进程，进程会加载恶意DLL，我们可以尝试杀死进程，如果我们足够幸运，它将会自动启动：
好吧，我们今天运气不好，没有杀死。不过至少，我们可以重启机器。如果“Vulnerable.exe”进程是一个开机启动应用，或一个服务、一个计划任务，那它将会再次启动。最坏的情况是，我们得等待有人来启动它。
机器正在重启，让我们开启一个监听，希望有好运：
成功了！
**六、存储的凭证**
如果上面的方法中，有任何方法管用了，拉下来你可以试着找一些存储的凭证。你可能想检查这些目录：C:unattend.xml、C:sysprep.inf、C:sysprepsysprep.xml。
你可以使用下面的查询方法：
**七、内核漏洞**
在我们这篇文章中，我们主要讲了不依赖内核漏洞的提权方法，但是如果你想利用一个内核漏洞来提升权限的话，也许你能用到下面的命令，它可以帮你选择利用哪一个漏洞：
它会列出机器中的更新。
**八、对有效载荷的说明**
在这篇文章中，我们使用了由msfvenom生成的载荷，但是在今天，这些载荷已经[被各种反病毒软件标记了](https://www.virustotal.com/tr/file/c904c6a47434e67fe10064964619d2d0568b1976e6e3ccacccf87d8e7d7d1732/analysis/1484771308/)，因为它非常受欢迎，并被反病毒厂商所熟知。不过，在创建可执行文件时，使用绕过AV的技术，将会给你带来好的结果。你可以考虑读一下这些文章：
[Art of Anti Detection 1 – Introduction to AV & Detection
Techniques](https://pentest.blog/art-of-anti-detection-1-introduction-to-av-detection-techniques/)
[Art of Anti Detection 2 – PE Backdoor
Manufacturing](https://pentest.blog/art-of-anti-detection-2-pe-backdoor-manufacturing/)
[反侦测的艺术part1：介绍AV和检测的技术](http://bobao.360.cn/learning/detail/3420.html)
[反侦测的艺术part2：精心打造PE后门](http://bobao.360.cn/learning/detail/3407.html)