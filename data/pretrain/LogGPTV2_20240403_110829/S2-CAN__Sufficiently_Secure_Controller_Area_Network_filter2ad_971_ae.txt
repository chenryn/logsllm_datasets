88%
100%
100%
100%
61%
58%
61%
73%
63%
73%
88%
88%
88%
92%
83%
92%
88%
88%
88%
100%
100%
100%
65%
61%
65%
78%
68%
78%
88%
88%
88%
92%
83%
92%
88%
88%
88%
100%
100%
100%
8.6 Determining Session Cycle T
So far, we observed that brute-forcing S2-CAN successfully is pos-
sible. The total time ta required by an attacker to crack S2-CAN is
the sum of the passive recording time tr , time tst1 to crack the
encoding in Stage 1, time tst2 to determine the integrity parameters
in Stage 2 and time ti to inject a well-formed CAN message on the
435ACSAC ’21, December 6–10, 2021, Virtual Event, USA
Mert D. Pesé, Jay W. Schauer, Junhui Li, and Kang G. Shin
CAN bus:
ta = tr + tst1 + tst2 + ti ≈ tr + tst1.
(6)
Our timing analysis shows that the time to determine the two
integrity parameters int_ID and cnt on the full trace (60 minutes)
takes less than one second. The time to inject the correct CAN
message can also occur instantly with minimal network delay from
the workstation to the adversary’s CAN node (e.g., an Arduino).
Hence, tst2 and ti are negligible and the main contributing factors
are tr and tst1.
Table 6: Timing analysis for full traces (minutes:seconds)
CAN (LibreCAN)
S2-CAN (LibreCAN+)
Veh. A
Veh. B
Veh. C
Veh. D
0:27
0:36
0:26
0:26
10:33
18:32
10:42
10:52
As shown in Table 6, the total time stands at around ta = 70 min
for full traces (i.e., tr = 60 min). Since our threat model stipulates that
the attacker can also physically tap into one specific CAN bus (and
thus only has access to one bus), we run LibreCAN+ with messages
from Bus 1 only. Unfortunately, due to architecture specifics of
Vehicle B, all messages are logged on Bus 1, which makes the trace
longer and thus affects cracking time. The attacker can only perform
a CAN injection attack on a bus equipped with S2-CAN if the session
cycle T is larger than ta since with each new handshake, new
parameters will be generated and the attacker has to re-do the entire
attack. As a result, we can deem S2-CAN secure if the following
condition is met:
ta ≈ tr + tst1 > T .
(7)
In Sec. 8.5 an attacker was shown to succeed cracking S2-CAN
with less passive recording time tr . Since less messages have to be
processed, tst1 will also be proportionally smaller. With the mini-
mum recording time tr,min to have a successful outcome, we can
now set the maximum session cycle Tmax . We already determined
that a trace length of tr = 15 minutes is sufficient to succeed. The
Top X consideration does not affect the timing since Stage 2’s con-
tribution is negligible. If the attacker doesn’t achieve the desired
outcome (i.e., vehicle malfunction), they can repeat the process
with the second and third candidates immediately. For Vehicles A,
C and D, tst1 stands at less than 3 minutes and for Vehicle B at less
than 5 minutes. Hence, the maximum session cycle Tmax will stand
at 18-20 minutes.
9 DISCUSSION AND CONCLUSION
Based on the results from the previous section, we can guarantee
that S2-CAN is secure if the cycle time T does not exceed 18-20 min-
utes. The experiments were conducted on a machine with relatively
good specs (see Sec. 8.1). Nevertheless, a determined attacker can
use an even more powerful setup to brute-force S2-CAN faster. The
feasibility of such an attack depends on the attacker’s incentive,
i.e., tradeoff between monetary cost and dedication towards the
outcome.
To be flexible, an attacker could rent computational resources on-
line. Both Amazon and Google provide cloud computing resources
called AWS EC2 [14] and Google Cloud [5]. The main bottleneck of
brute-forcing is the time required in Stage 1. Due to multi-threading
the combinations, these can be linearly scaled with multiple in-
stances. We obtained the cost of running a comparable instance to
our experimental setup on AWS. Their pricing calculator [1] sug-
gested an on-demand hourly cost of US$1.088 for an EC2 instance
with 32 vCPUs and 64 GB RAM. In our experiments from Sec. 8, the
peak RAM usage stood at 16 GB, but with the configured number
of cores, EC2 did not provide any smaller instance. To brute-force
S2-CAN with a passive recording time tr = 15 minutes in less than
20 seconds, 10 EC2 instances have to be rented. This sums up to a
monthly cost of $7,972.40 for the attacker. Given that the attacker
only spends ta ≈ 15 minutes per attempt (if T > ta), they could
conduct 2880 attempts per month at an average cost of $2.77 and
still fail, if T is set smaller than the minimum recording time tr,min.
Although the actual cracking (i.e., tst1) can be sped up, tr,min acts
as a lower bound to the total attack time ta and thus the attacker
will have no chance of cracking S2-CAN.
Finally, we would like to briefly compare S2-CAN’s security with
S-CAN approaches. For instance, vatiCAN [33] discusses how long
it would take to forge the SHA3-HMAC which depends on the
length of the MAC tag. On average, it requires 2MAC_Lenдth−1
combinations to brute-force the MAC which is depicted in the last
column of Table 1. The authors mentioned that it would still take a
day to brute-force all combinations on a powerful in-vehicle ECU,
but due to their nonce update interval of 50ms (comparable to our
session cycle T ), it would be impossible for the attacker to calculate
a correct HMAC. Although the same calculation cannot be directly
applied to S2-CAN due to lack of MAC and changing position for
each CAN message, an online attacker (i.e., on an in-vehicle ECU)
16(cid:1) ≈ 249 combinations to spoof the valid 2-byte
would require(cid:0)64
integrity parameters which allows a fair comparison with the other
numbers in Table 1. Given modern GPUs’ capabilities [15] (also
considering advances since this paper’s publication), an attacker
with similar cost assumptions from above could brute-force S2-CAN
in multiple hours due to its 49-bit entropy. Such an attacker would
still fail if Tmax ≈ 15 minutes.
In this paper, we have developed S2-CAN by making a trade-off
between performance and security, and verified its performance
on Arduinos mimicking real ECUs on a CAN bus. with regards
to multiple metrics. It performs better for all metrics than each
surveyed S-CAN approach, especially reducing E2E latency. Then,
we have tried to brute-force S2-CAN by using a modified version of
the existing CAN reverse-engineering tool LibreCAN. Although the
total attack time can be minimized to roughly 15 minutes, by setting
the session cycle properly, our approach is deemed secure. Due to
both favorable performance and practically acceptable security
guarantees, we envision S2-CAN to finally be a compelling and
practical security solution for OEMs to be deployed in their vehicles
in the near future.
ACKNOWLEDGMENTS
The work reported in this paper was supported in part by an Intel
Labs grant and Ford Motor Company.
436S2-CAN: Sufficiently Secure Controller Area Network
ACSAC ’21, December 6–10, 2021, Virtual Event, USA
REFERENCES
[1] [n.d.]. AWS Pricing. https://calculator.aws/.
[2] [n.d.]. CAN Bus Load Calculation. https://kb.vector.com/entry/1519/.
[3] [n.d.]. CAN bus Load Calculator. http://www.canbusacademy.com/resources/can-
bus-load-calculator/.
[32] Charlie Miller and Chris Valasek. 2015. Remote exploitation of an unaltered
passenger vehicle. Black Hat USA 2015 (2015), 91.
[33] Stefan Nürnberger and Christian Rossow. 2016. –vatican–vetted, authenticated
can bus. In International Conference on Cryptographic Hardware and Embedded
Systems. Springer, 106–124.
[34] A. Perrig, R. Canetti, J. Tygar, and D. Song. 2000. Approaches for secure and
efficient in-vehicle key management. In Proceedings of the IEEE Symposium on
Security and Privacy (SP 2000). 56Ű73.
[35] Mert D Pesé, Karsten Schmidt, and Harald Zweck. 2017. Hardware/software
co-design of an automotive embedded firewall. Technical Report. SAE Technical
Paper.
[36] Mert D Pesé, Troy Stacer, C Andrés Campos, Eric Newberry, Dongyao Chen,
and Kang G Shin. 2019. LibreCAN: Automated CAN Message Translator. In
Proceedings of the 2019 ACM SIGSAC Conference on Computer and Communications
Security. 2283–2300.
[37] A.-I. Radu and F.D. Garcia. 2016. LeiA: a lightweight authentication protocol for
CAN. Askoxylakis, I., Ioannidis, S., Katsikas, S., Meadows, C. (eds.) ESORICS 2016
878 (2016).
[38] Ali Shuja Siddiqui, Yutian Gui, Jim Plusquellic, and Fareena Saqib. 2017. Secure
communication over CANBus. In 2017 IEEE 60th International Midwest Symposium
on Circuits and Systems (MWSCAS). IEEE, 1264–1267.
[39] Takeshi Sugashima, Dennis Kengo Oka, and Camille Vuillaume. 2016. Approaches
for secure and efficient in-vehicle key management. SAE International Journal of
Passenger Cars-Electronic and Electrical Systems 9, 2016-01-0070 (2016), 100–106.
[40] A. S. Thangarajan, M. Ammar, B. Crispo, and D. Hughes. 2019. Towards Bridging
the Gap between Modern and Legacy Automotive ECUs: A Software-Based
Security Framework for Legacy ECUs. In 2019 IEEE 2nd Connected and Automated
Vehicles Symposium (CAVS). 1–5. https://doi.org/10.1109/CAVS.2019.8887788
[41] A. Van Herrewege, D. Singelee, and I. Verbauwhede. 2011. CANAuth – a simple,
back-ward compatible broadcast authentication protocol for CAN bus. ECRYPT-
Workshop on Lightweight Cryptography (2011).
[42] Qiyan Wang and Sanjay Sawhney. 2014. VeCure: A practical security framework
to protect the CAN bus of vehicles. In 2014 International Conference on the Internet
of Things (IOT). IEEE, 13–18.
[43] Haohuang Wen, Qi Alfred Chen, and Zhiqiang Lin. 2020. Plug-N-pwned: Com-
prehensive vulnerability analysis of OBD-II dongles as a new over-the-air attack
surface in automotive IoT. In 29th {USENIX} Security Symposium ({USENIX}
Security 20). 949–965.
[44] Zhihong Wu, Jianning Zhao, Yuan Zhu, Ke Lu, and Fenglue Shi. 2019. Research
on In-Vehicle Key Management System under Upcoming Vehicle Network Archi-
tecture. Electronics 8, 9 (2019), 1026.
Ethernet.
[45] Michael Ziehensack. 2015. Safe and Secure Communication with Automotive
[46] Qingwu Zou, Wai Keung Chan, Kok Cheng Gui, Qi Chen, Klaus Scheibert, Laurent
Heidt, and Eric Seow. 2017. The Study of Secure CAN Communication for
Automotive Applications, In SAE Technical Paper. https://doi.org/10.4271/2017-
01-1658
[47] Baozhu Zuo. [n.d.]. CAN-BUS Shield V2.0. https://wiki.seeedstudio.com/CAN-
BUS_Shield_V2.0/.
[4] [n.d.]. Electronic engine control unit for commercial vehicles.
https:
//www.bosch-mobility-solutions.com/en/products-and-services/commercial-
vehicles/powertrain-systems/natural-gas/electronic-engine-control-unit/.
[5] [n.d.]. Google Cloud. https://cloud.google.com/.
[6] [n.d.]. The OpenXC Platform. http://openxcplatform.com/.
[7] 2020. One-time pad. https://en.wikipedia.org/wiki/One-time_pad
[8] Emad Aliwa, Omer Rana, Charith Perera, and Peter Burnap. 2020. Cyberattacks
and Countermeasures For In-Vehicle Networks. arXiv preprint arXiv:2004.10781
(2020).
[9] Mehmet Bozdal, Mohammad Samie, Sohaib Aslam, and Ian Jennions. 2020. Eval-
[10] Ken Budd. 2018. How Long Do Cars Last? A Guide to Your Car’s Longevity. https:
uation of CAN Bus Security Challenges. Sensors 20, 8 (2020), 2364.
//www.aarp.org/auto/trends-lifestyle/info-2018/how-long-do-cars-last.html
[11] Stephen Checkoway, Damon McCoy, Brian Kantor, Danny Anderson, Hovav
Shacham, Stefan Savage, Karl Koscher, Alexei Czeskis, Franziska Roesner, Ta-
dayoshi Kohno, et al. 2011. Comprehensive experimental analyses of automotive
attack surfaces.. In USENIX Security Symposium, Vol. 4. San Francisco, 447–462.
[12] Kyong-Tak Cho and Kang G Shin. 2016. Fingerprinting electronic control units
for vehicle intrusion detection. In 25th {USENIX} Security Symposium ({USENIX}
Security 16). 911–927.
https:
//www.csselectronics.com/screen/page/simple-intro-to-can-bus/language/en.
[13] CSS Electronics. [n.d.]. CAN Bus Explained - A Simple Intro (2019).
[14] Donald J. Daly. 1987. Economics 2: EC2. https://aws.amazon.com/ec2/.
[15] Tomoiagă Radu Daniel and Stratulat Mircea. 2011. AES algorithm adapted on
GPU using CUDA for small data and large data volume encryption. International
journal of applied mathematics and informatics 5, 2 (2011), 71–81.
[16] Robert I Davis, Alan Burns, Reinder J Bril, and Johan J Lukkien. 2007. Controller
Area Network (CAN) schedulability analysis: Refuted, revisited and revised.
Real-Time Systems 35, 3 (2007), 239–272.
[17] Tri P Doan and Subramaniam Ganesan. 2017. CAN Crypto FPGA Chip to Secure
Data Transmitted Through CAN FD Bus Using AES-128 and SHA-1 Algorithms
with A Symmetric Key. Technical Report. SAE Technical Paper.
[18] CSS Electronics. [n.d.]. CAN DBC File - Convert Data in Real Time (Wireshark,
J1939).
https://www.csselectronics.com/screen/page/dbc-database-can-bus-
conversion-wireshark-j1939-example/language/en.
[19] Elm Electronics, Inc. [n.d.]. OBD. https://www.elmelectronics.com/products/ics/
[20] Wael A Farag. 2017. CANTrack: Enhancing automotive CAN bus security using
intuitive encryption algorithms. In 2017 7th International Conference on Modeling,
Simulation, and Applied Optimization (ICMSAO). IEEE, 1–5.
[21] Kyusuk Han, André Weimerskirch, and Kang G Shin. 2015. A practical solution
to achieve real-time performance in the automotive network by randomizing
frame identifier. Proc. Eur. Embedded Secur. Cars (ESCAR) (2015), 13–29.
[22] Adam Hanacek and Martin Sysel. 2016. Design and Implementation of an Inte-
grated System with Secure Encrypted Data Transmission. In Computer Science
On-line Conference. Springer, 217–224.
[23] Assaf Harel and Amir Hezberg. 2019. Optimizing CAN Bus Security with In-Place
Cryptography. Technical Report. SAE Technical Paper.
[24] Olaf Henniger, Ludovic Apvrille, Andreas Fuchs, Yves Roudier, Alastair Rud-
dle, and Benjamin Weyl. 2009. Security requirements for automotive on-board
networks. In 2009 9th International Conference on Intelligent Transport Systems
Telecommunications,(ITST). IEEE, 641–646.
[25] M Jukl and J Čupera. 2016. Using of tiny encryption algorithm in CAN-Bus
communication. Research in Agricultural Engineering 62, 2 (2016), 50–55.
[26] John Kelsey, Bruce Schneier, and David Wagner. 1997. Related-key cryptanalysis
of 3-way, biham-des, cast, des-x, newdes, rc2, and tea. In International Conference
on Information and Communications Security. Springer, 233–246.
[27] Karl Koscher, Alexei Czeskis, Franziska Roesner, Shwetak Patel, Tadayoshi Kohno,
Stephen Checkoway, Damon McCoy, Brian Kantor, Danny Anderson, Hovav
Shacham, et al. 2010. Experimental security analysis of a modern automobile. In
2010 IEEE Symposium on Security and Privacy. IEEE, 447–462.
[28] Ryo Kurachi, Yutaka Matsubara, Hiroaki Takada, Naoki Adachi, Yukihiro
Miyashita, and Satoshi Horihata. 2014. CaCAN-centralized authentication system
in CAN (controller area network). In 14th Int. Conf. on Embedded Security in Cars
(ESCAR 2014).
[29] Charlie Miller and Chris Valasek. 2013. Adventures in automotive networks and
control units. Def Con 21 (2013), 260–264.
surfaces. black hat USA 2014 (2014), 94.
Tech. rep., IOActive Report.
[31] Charlie Miller and Chris Valasek. 2015. Car hacking: for poories. Technical Report.
[30] Charlie Miller and Chris Valasek. 2014. A survey of remote automotive attack
obd/.
437ACSAC ’21, December 6–10, 2021, Virtual Event, USA
Mert D. Pesé, Jay W. Schauer, Junhui Li, and Kang G. Shin
Table 10: Top 10 Cracking Success based on Trace Length (in
%)
Trace
Length
Veh. A
Veh. B
Veh. C
Veh. D
5
10
25
50
75
100
ST1
ID
cnt
ST1
ID
cnt
ST1
ID
cnt
ST1
ID
cnt
15/20
14/20
15/20
13/20
12/20
13/20
8/20
8/20
8/20
16/20
15/20
16/20
10/10
9/10
10/10
5/10
4/10
5/10
7/10
7/10
7/10
9/10
7/10
9/10