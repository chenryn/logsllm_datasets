对待编写的代码，能够收回投资的时间可就长得多了。
Andrew：让我确保自已的理解没错。你提到的"收回投资"是指在维
用的时间更少，也更省力气；人们遇到缺陷的机率也更低了。但是
你也可以容忍更多缺陷的存在，并且将其发布给用户。如果软件的
使用时间长达数年，用户就会发现很多缺陷，不过他们也能容忍，
比起他们只用儿周或者儿个月就遇到很多缺陷来说，牢骚也少得
多。是这样吗？
Mike：没错。听起来好像你们不太相信。让我来证明一下。
设想你正在开发过去完成过的某个应用。你非常勤奋，说起质量和
对代码的感觉，没有人比你更用心了，而且你也希望开发出这个质
量上乘的应用。该应用有两个部分：应用本身和一个数据导入模
块。数据导入模块只要运行一次，能从老系统导入数据就可以了。
现在情况很明白，每个处于这种状况下的人，都会将应用的代码质
量写得尽量好，因为它将会运行好几年的时间。而导入程序只需要
运行一次，在代码的要求上就不像应用的其他部分要求那么严格
了。
所起来好像我在赞成写出垃圾代码，看来我说话得注意点了。我想
表明的意思是：很多团队都不会进行类似的讨论，其实他们应该讨
论一下。这样的谈话应该让项目干系人参与，团队可以提问：“这
意这样的重要机会。
81
---
## Page 83
我会坚守这样的想法：如果我们要开发这个系统，而且它将会运行
10年，那我一定保证它的代码质量高于一次性使用的“数据导入"程
序。我当然要保证不出错，我会运行所有的测试，签出代码，尝试
运行一些示例数据，要是看起来结果不错，那我就搞定了。
Andrew：你知道吗？我觉得你是对的。我也觉得在项目启动阶段，
人们应该选择一个质量标准。实际上，从传统的质量管理角度来
看，这不就是验收条件的重点吗？还有目标缺陷率？这都是我们在
课本中读到的东西，可似乎就是你谈到的这些真实工作环境中遇到
的问题。
Mike：我想这是我们应该提到而通常很少涉及的话题。
想想真正的项目是如何变化的。我的意思是，我并不清楚人们能不
能做到如此诚实，但是想象一下，关键项目十系人走进来跟你说：
“这些就是我对该项目的目标。我在谋求下一次升职，希望这个项
目能顺利完成。我需要项目发布时质量足够好，不会影响我的升
职，而且要在接下来的6～12个月内完成。在那之后，我就到另外
一个完全不相干的部门去了，后面怎么样，我才不管呢。”
听了他的话，我们就会知道这个项目干系人的动机是什么了。我都
不必去奚落他。这就是某些公司制造出来的动机，但也确实是某些
人对于一个应用的真实想法，也是很多团队为什么被道写出低质量
代码的原因，其实他们在大多数情况下都不愿意这么做。
Jenny：那么，你是怎么找到团队动机的？团队很有可能愿意发布出
色的软件，可要是质量低劣，这不会影响团队的士气吗？要是团队
中大家的目标都不一致，该怎么办？比如他们对于要并发什么、为
什么要并发这些问题的认识都不一样，该怎么办？
Mike：我想提供一个具体的例子，这家公司我去过，在波士顿。我
跟副总见过，他让我去他们公司提供咨询服务。我开始问他希望我
帮忙的是什么应用。
他们在开发一个全新的系统，用来取代过去的工作流系统。原来的
系统大概是在2000～2002年开发的，其中有一些令人惊讶的
JavaScript程序，如今我们称之为Ajax，是由他们之前请的咨询人员
开发的。在那时候就能并发出所有这些东西，这些人一定是大才。
82
---
## Page 84
可是应用现在却非常脆弱，就是因为这些在真正的Ajax出现之前
的、类似Ajax的代码。
我问副总为什么重写系统，他说就是为了得到一个稳定的应用，让
他的团队不必每年再花那么多时间维护。这就是他唯一的目标。
然后，我就去跟团队碰面了。我并没打算去寻找误解和沟通上的偏
差，仅仅是提了些问题。我说：“你们为什么要并发这个应用？这
快"我们需要更快的处理能力，因为要处理更多的文档”。有一个答
案是：“哎，我们要换一种新的技术，因为CTO在一次空中旅行的
航空杂志上看到了这个技术，他下决心认为我们应该切换技术。”
我跟五六个开发人员聊了聊，没人能给出正确答案。没人提供的答
案能跟副总启动项目时的想法对得上。他们做出的决策，会让项目
遇到应用目前面临的同样的性能问题。
公司发布应用的方式很有趣，每三个月才向内部用户发布一次。说
前完成吗？如果不能，那就9月30日发布吧。”
所以老板总在说：“嘿，我希望你们能在6月30日之前完成，不过要
是到时搞不定，我也可以理解，因为我知道这个要求有点高了。”
团队将老板的话错误解读为在日程上施压，因此就会图省事，降低
质量要求，以在6月30日之前搞定。
当我把这些告诉老板时，他都快晕过去了。
这就是一个并始时不与项目十系人沟通的团队，他们因此而偏离航
向，做出了完全错误的决策。
Andrew：真有趣。你这么一说，我几乎都能听到Jenny再次提到那
个她之前曾参与过的团队了，几乎遇到了完全相同的问题。项目的
目标很明确，跟截止日期也没什么关系，但是她在这个问题上想法
跟团队完全不同。她可花了不少时间才说服团队不要在意截止日
期，而要把注意力放在质量上。Jemny，你还记得那个项目吧？
Jenny：当然记得，解决问题的最终办法就是把项目范围写下来，并
且确保每个人都能正确理解。不过你是对的，人们总是愿意死盯着
83
---
## Page 85
发布日期不放，总想确定所有的事情都能符合时间表。他们没有认
真去思考真正要达到的目标到底是什么。
Andrew：我想这文回到了你一直提到的“清晰、催人向上的目标”。
Mike：没错。
Andrew：那你怎么看Jenny提出来的关于团队士气和质量的问题？
Mike：你是说，这些质量问题是如何影响团队士气的？我想你们想
问的是这个问题。
Jenny：我想问的是：关于构建低质量软件的团队的士气问题。我是
说，如果你知道自己构建的东西，比如说，品质比较低劣，这样没
事吗？让团队图省事，对他们会有什么影响？
Mike：对这个问题，我还是会非常小心地回答，因为99%的情况
下，团队觉得他们被道要写一些很差的代码，实际上却不是这样。
一般来说，这都是项目十系人与并发人员之间对于项目目标理解不
一致造成的。
前面我强调过：大多数时候我们都应当尽力编写高质量的代码，但
是为了做到这一点，有时候就要意识到，一个应用中所有的代码不
一定要处于同样质量水平。
我想说明一下这个关系。我记得早先为不同组织招聘人员的时候，
发现刚毕业的学生有些不寻常之处。他们觉得分配给自已的每项工
作都要做到最佳水准，并力图做到这一点，同时希望以此给我留下
好印象。
我想了一下，后来认识到这是他们以往的习惯。你也在学校里面待
过，有五六个不同的教授给你当老师。可没有哪个教授会说：
“噢，好吧，我会给你把分打高一点，因为知道你这学期的生物课
不那么好过，所以我放你一马。你只要提交B等级的作业，我就会
给你个A。”
学生们每门功课的分数都是独立的。我是在给人们分配不同工作时
意识到这一点的，有时我必须要说：“你得把这件事情尽力做到最
好。”不过其他时候一—举个并非编码的工作吧，比如做一次厂商
评估，我就会说：“我们会从我们自己的应用里面选取一种日历的
84
---
## Page 86
widget实现。有8种不错的选择。看来我们也不会有很大的问题。花
上两个小时去看看谁好谁坏，然后选一个吧。”
我曾遇到过刚从学校出来的新人，他们认为自已必须要花上20个小
时来做这件事情，并得出绝对完美的结论。“我们永远不会为这个
抉择而后悔！"他们会这样想。可与此同时，我只希望得到一个好
的结论就行了，剩下的18个小时，我希望能用来做些其他事情。
这就是我想在此说明的差异：不是每件事情都要做到第一流。在大
多数情况下，我们根本没有机会做到第一流。
这样说清楚了吧？我可不想被人以为我想要垃圾代码。我的意思
是：没错，我给了一个例子，有时是可以的，但是通常情况下不能
这么做。
Andrew：嗯，这就弄清楚了。
Mike：我还是想就这个士气的事情再多说几句，不过跟你们问到的
东西有所差别，不过我想这才是核心问题所在。我想告诉二位我以
前一起工作过的一个团队。
当时我在所在的公司里管理着一个非常大的项目，同时还运作第二
个项目。两个项目的重要性并不对等，但是都很重要。有些人为第
二个项目服务，但处于一些非常奇怪的管理约束之下。
举个例子，上面告诉他们在代码中不许做任何错误处理。如果发生
了错误，上司才不管呢。应用会崩溃，他却根本不关心。这可真是
奇怪透顶。
在那之前，我已经听过一些类似这样不同寻常的事情了，但是我已
经被自己项目各种事务所包围，这是一个至关重要的项目。我没有
参与到另外那个项目中。只是听到了有关它的一些事情。
很多个晚上，我无法安眠，所以干脆爬起来，早早去了办公室。项
目的压力很大，有一天早上我去得特别早，大概5点左右。这可是
早上5点，当我进办公室的时候，碰到另外两个开发人员，另一个
项目的两个主要开发人员：Jeff和Donna。
还是坦白了：“我们是来加入错误处理代码的，还要做些测试。上
85
---
## Page 87
司不让我们在应用中做这些事情，但是我们的自尊与其紧密相连。
我们不能按他的要求发布那样一个应用。”
在已经过去的3个月里面，他们每天早上5点过来，工作到7点。到
了上午7点，他们就会去本地的Denny's餐厅吃早餐。他们的早餐从7
点吃到8点，然后8点出现在办公室，并假装他们当天刚刚赶到！接
下来，他们就会开发项目中的应用，工作到傍晚5点或6点。
那个早上5点我遇到他们之后，和他们好好聊了聊。我是一个经
理，他们是程序员。他们说：“你能帮帮我们吗？跟我们上司谈
谈，看看是怎么回事，我们不能总一直这样下去啊。”这就说到有
关士气的问题了，他们因为需要按照上司的要求发布低质量的产品
而感到自责。
所以我就去找他们的老板了，我说：“这是怎么了？为什么你不让
他们加入错误处理代码，不让他们测试，不让他们开发一个高质量
的产品？在这一点上，我跟他们意见一致，这么做是错误的。"我
告诉他发生了什么。接下来，他说了实话。事情是这样的。
这要回到当时的一个流行趋势：以城市的名字给项目命名。微软总
是这么做的，所以很多公司就以城市的名字来给项目取名。我曾参
与过一个名为Napa的项目，是根据加利福尼亚州的Napa市命名的。
他们的项目被称为Dodge City，就像那个西部老城市Dodge City。
老板把这个项目取名为DodgeCity，因为这个主意来自于他在环球
影城看到的场景；你可以在街边上看到DodgeCity的招牌，可这只
是表面的外观而已，仅仅是建筑物的外表。后面什么都没有，没有
实质性的内容，都是假的。
这个老板让团队并发的应用，希望在即将来临的商贸展上演示，以
吸引人们更新自已的授权协议，因为人们会看到又一个出色新版本
即将发行了。但实际上，这个版本永远不会被发布。他也永远不会
发布下一个新版本。他打算让人们多花钱买相关的产品，也就是我
正在管理的那个项目。
这些并发人员们都在并发一个虚假的应用，一个终极雾件
（vaporware）[2l。这就解释清楚了为什么不需要加入错误处理代
码，只要做成像Norton公司从20世纪80年代开始展示的那些外表光
鲜的老式模型就可以了。
86
---