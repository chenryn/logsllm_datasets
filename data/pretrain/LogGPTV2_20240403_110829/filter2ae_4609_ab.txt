        QCMS_Guest->insert()
            Db_pdo->exec_insert()
                Db->get_sql_insert() # 过滤
##### SQL
根据url找到/System/Controller/backend/down.php->index_Action()方法
    public function index_Action($page = 0){
            $condStr = 0;
            if(isset($_GET['title']) && $_GET['title'] != ''){
                $condArr[] = " title LIKE '%".$_GET['title']."%'";
            }
            $condStr = empty($condArr) ? '' : ' WHERE '.implode(' && ', $condArr);
            $count = 0;
            $offset = ($page pageNum;
            $temp['rs'] = $this->_downObj->selectAll(array($offset, $this->pageNum), $count, $condStr,  '*');
            $temp['page'] = $this->page_bar($count[0]['count'], $this->pageNum, url(array('backend', 'news', 'index', '{page}')), 9, $page);
            $temp['cateRs'] = $this->_cateObj->select('', 'id, name', 0, 'id');
            $this->load_view('backend/down/index', $temp);
        }
直接将参数拼接至语句中，继续跟踪QCMS_Down->selectAll()
    public function selectAll($limit = '', &$count, $cond_arr='', $field = '*', $sort = array('id' => 'DESC'), $table = 0){
            $count = $this->exec_select($cond_arr, 'COUNT(*) AS count', $table,  0, '', '', 0);
            return $this->exec_select($cond_arr, $field, $table,  0, $limit, $sort, 0);
        }
第一步查询数据的数量，第二步才是注入点
Db_pdo->exec_select()
    public function exec_select($cond_arr=array(), $field='*', $tb_name = 0,  $index = 0, $limit = '', $sort='', $fetch = 0, $isDebug = 0){
            $tb_name = empty($tb_name) ? 0 : $tb_name;
            $limit_str = !is_array($limit) ? $limit : ' limit '.$limit[0].','.$limit[1].'';
            $sort_str = $this->sort($sort);
            $sql = "SELECT ".$field." FROM ".parent::$s_dbprefix[parent::$s_dbname].$this->p_table_name[$tb_name].$this->get_sql_cond($cond_arr).$sort_str.$limit_str."";
            ! $isDebug || var_dump ( $sql );
            if($fetch == 1){
                return $this->q_select($sql, 1);
            }
            if(empty($index)){
                return $this->q_select($sql);
            }else{
                return $this->set_index($this->q_select($sql), $index);
            }
        }
可以看到在我们的数据最后进行拼接之前还经历了get_sql_cond方法的过滤，跟进去
    public function get_sql_cond($cond_arr = ''){
            if(empty($cond_arr)){
                return '';
            }
            if(!is_array($cond_arr)){
                return $cond_arr;
            }
            $cond_arr_t = array();
            foreach ($cond_arr as $key => $val){
                if(is_array($val) && empty($val)){
                    continue;
                }
                if(is_array($val)){
                    $cond_arr_t[] = $key." in (".self::get_sql_cond_by_in($val).")";
                }else{
                    if(!get_magic_quotes_gpc()){
                        $cond_arr_t[] = $key."='".addslashes($val)."'";
                    }else{
                        $cond_arr_t[] = $key."='".$val."'";
                    }
                }           
            }
            return empty($cond_arr_t) ? '' : ' WHERE '.implode(' && ', $cond_arr_t);
        }
匪夷所思的地方来了，当我们传入的数据不为数组时，函数直接返回原始数据，并没有进行过滤，从而导致了注入
调用顺序为
    down.php->index_Action()
        QCMS_Down.php->selectAll()
            Db_pdo.php->exec_select()
                Db.php->get_sql_cond() # 过滤
注入点还有比如新闻列表的搜索、产品列表的搜索等几个地方，不过都大同小异，因此不再赘述
##### 任意文件上传
找到调用方法/System/Controller/backend/index.php->ajaxupload_Action()
    public function ajaxupload_Action(){
            $result = $this->upload($_FILES['filedata']);
            $arr = array();
            if($result upload()
    public function upload($file_arr = array()){
            $this->_files = $this->load_model('QCMS_Files');
            $uploadObj = $this->load_class('upload');
            $pic = file_get_contents($file_arr['tmp_name']);
            $hash = hash('sha1', $pic);
            $rs = $this->_files->selectOne(array('hash' => $hash));
            if(!empty($rs)){
                $result = $rs['path'];
            }else{
                $result = $uploadObj->upload_file($file_arr);
                if($result _files->insert(array(
                            'filename'  =>  $file_arr['name'],
                            'path'      =>  $result,
                            'mimetype'  =>  $file_arr['type'],
                            'ext'       =>  pathinfo($file_arr['name'], PATHINFO_EXTENSION),
                            'size'      =>  $file_arr['size'],
                            'user_id'   =>  $this->id,
                            'addtime'   =>  time(),
                            'hash'      =>  $hash,
                    ));
                }
            }
            return $result;
        }
可以看到，方法将内容的hash储存到数据库中，如果存在相同数据，则直接将路径返回，如果不存在，才会进行上传
跟进Lib/Helper/upload.php->upload_file()方法
    public function upload_file($file_arr){  
            $ext =  substr(strrchr($file_arr['name'], '.'), 1); 
            if(!is_uploaded_file($file_arr['tmp_name']) || !in_array($file_arr['type'], $this->_type)){
                return -1;
            }
            if($file_arr['size'] > ($this->_size * 1024 * 1024)){
                return -2;
            }
            return self::_move_file($file_arr['tmp_name'], $ext);
        }
如果文件不是post方式上传的或者type不在白名单内，返回-1，然而系统给出的白名单是这些：
    private $_type = array(
        'image/pjpeg', 
        'image/jpeg', 
        'image/gif', 
        'image/png', 
        'image/x-png', 
        'image/bmp', 
        'application/x-shockwave-flash', 
        'application/octet-stream', 
        'image/vnd.adobe.photoshop');
php文件的type是这个
    Content-Type: application/octet-stream
这算哪门子白名单。。。
继续跟进同类的_move_file方法
    private function _move_file($file, $ext){
            $url = $this->_dir.$this->_name.'.'.$ext;
            if(!is_dir($this->_dir)){
                mkdir($this->_dir, 0777, true);
            }
            if (!move_uploaded_file($file, $url)){
                return -3;
            }
            return SITEPATH.$url;
        }
文件名在初始化的时候被赋值为一个随机数，然而文件的路径会被返回给模板并渲染出来
    $this->_name =  uniqid(rand(100,999)).rand(1,9);
    `
然后就被上传了上去，甚至后缀都是用的原本文件的后缀而不是判断类型然后拼接`.jpg`、`.png`这样
调用顺序为：
    index.php->ajaxupload_Action()
        Controllers/ControllersAdmin->upload()
            upload.php->upload_file()
                upload.php->_move_file()
##### 任意文件读取
找到调用方法System->Controller->backend->template.php
    public function tempview_Action($tempname = ''){
            if(empty($tempname)){
                exec_script('alert("模版文件不能为空");history.back();');exit;
            }
            $sysObj = $this->load_model('QCMS_Sys');
            $sysRs = $sysObj->selectOne('', 'template_id');
            $templateRs = $this->_tempObj->selectOne(array('id' => $sysRs['template_id']));
            $tempname = base64_decode($tempname);
            var_dump($templateRs['name']);
            $result = file_get_contents(BASEPATH.'view/template/'.$templateRs['name'].'/'.$tempname);
            $str = str_replace(array("\n"), array(''), htmlspecialchars($result));
            $temp['str'] = $str;
            $this->load_view('backend/template/tempview', $temp);
        }
可以看到当传入参数后，对参数进行base64解码，然后读取文件内容，对结果进行过滤后返回到渲染界面，中间并没有对传入的参数进行任何过滤，传入参数为
    ../../../Controller/admin.php
base64编码后即可读取源码
#### 后记
自从上了大学开始学习安全，也有几年了，审计代码也审计了几个cms，我想整合一下这些cms，做成一个平台之类的，给刚入门的学弟学妹们练练，也不要求多厉害多强大怎样，就想做一个入门训练之类的，顺便锻炼一下自己，以后有机会我再分享出来，有需要的话(可能并不会维护~逃)