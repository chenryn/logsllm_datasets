A friend of mine (https://github.com/R2-G2) noticed, that there's a strange
behavior with radio buttons wrapped into labels:
If you click one for the first time, everything's fine. It gets an active
class and if you you use the radio-buttons selector with a ':checked' filter
via jQuery, it shows that the element is checked (or better said, it finds the
element).
But if you click it for a second time, the active class stays, but the radio
button isn't checked anymore.
Here's an example:
http://jsfiddle.net/aMKFq/
The following line in _button.js's toggle-method_ seems to cause the problem:
    if ($input.prop('type') === 'radio') $parent.find('.active').removeClass('active')
Better said, it's not the line, but it's position. The line is removing the
active class of the parent, if the input is a radio button, which seems
logical, since you don't want a radio button to be deselected and you have a
toggle class at the end of the method:
    this.$element.toggleClass('active')
So, first removing eventually existing active classes and then toggling it,
seems useful.
The only problem is, that the checked-property is set _before_ the active
class is removed:
    if ($parent.length) {
      var $input = this.$element.find('input')
          .prop('checked', !this.$element.hasClass('active'))
          .trigger('change')
      if ($input.prop('type') === 'radio') $parent.find('.active').removeClass('active')
    }
**Possible solution**
I wrote a solution, which fixed the issue for me, while still allowing every
test to pass:
    Button.prototype.toggle = function () {
      var $parent = this.$element.closest('[data-toggle="buttons"]')
      if ($parent.length) {
        var $input = this.$element.find('input')
        if ($input.prop('type') === 'radio') $parent.find('.active').removeClass('active')
        $input.prop('checked', !this.$element.hasClass('active'))
          .trigger('change')
      }
      this.$element.toggleClass('active')
    }
You could of course use it, if you like.
Greets