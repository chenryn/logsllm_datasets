# Multicheck (re)
The task was a mobile (android) reversing challenge.
We get [android app](multicheck.apk) to work with.
After decompiling we can see there is only [a single class there](MainActivity.java).
What is does is loading from resources file `claz.dex` (in method `m2541i`) and then loading method `check` from class `com.a.Check`, and using this method to validate the password.
If we decompile the `claz.dex` from resources we do get [Check class](Check.java), but it turns out to be a red herring with `this is not the flag` message.
Last piece of the puzzle is the native library which is in fact loaded by the main activity:
```java
static {
	System.loadLibrary("check");
}
```
It's ARM dynamic library, and if we look into it we find an interesting function at `0x1380`:
```c
int sub_1380(int arg0, int arg1, int arg2) {
    stack[2043] = r4;
    *((sp - 0x14) + 0xfffffffffffffffc) = r8;
    r5 = arg0;
    r8 = arg2;
    r6 = arg1;
    r4 = *0x474c;
    if (r4 == 0x0) {
            r4 = malloc(0x100);
            *0x474c = r4;
            *0x4750 = malloc(0x100);
    }
    sprintf(r4, 0x1450);
    readlink(*0x474c, *0x4750, 0x100);
    if (sub_1318(*0x4750, "claz.dex") != 0x0) {
            if (*(int8_t *)0x4754 == 0x0) {
                    r4 = malloc(**0x3f40);
                    if (**0x3f40 >= 0x1) {
                            r0 = 0xe9;
                            r1 = 0x0;
                            do {
                                    *(r4 + r1) = *(int8_t *)(*0x3f44 + r1) ^ r0;
                                    r1 = r1 + 0x1;
                                    r0 = r0 + 0x1;
                            } while (r1 > 5) + const4);
            firstInt -= (((secondInt > 5) + const2);
            i5 += 1640531527;
        }
        int[] result = new int[2];
        result[0] = firstInt;
        result[1] = secondInt;
        return CheckReal.splitIntoSeparateBytes(result);
    }
```
We can call this function on the expected results and recover the input:
```java
    public static void main(String[] args) {
        StringBuilder flag = new StringBuilder();
        for (int i = 0; i < 32; i += 8) {
            byte[] expectedInput = CheckReal.decode8Bytes(f1b, i);
            flag.append(new String(expectedInput));
        }
        System.out.println(flag);
    }
```
Which gives: `HITB{SEe!N9_IsN'T_bELIEV1Ng}`