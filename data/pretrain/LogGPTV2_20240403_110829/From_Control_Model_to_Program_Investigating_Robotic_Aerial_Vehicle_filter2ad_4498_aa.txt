# Title: From Control Model to Program: Investigating Robotic Aerial Vehicle Accidents with MAYDAY

## Authors
- Taegyu Kim, Purdue University
- Chung Hwan Kim, University of Texas at Dallas
- Altay Ozen, Fan Fei, Zhan Tu, Xiangyu Zhang, Xinyan Deng, Dave (Jing) Tian, and Dongyan Xu, Purdue University

## Abstract
The increasing adoption of robotic aerial vehicles (RAVs) has led to a rise in RAV accidents, necessitating in-depth investigations. However, current flight logs only record high-level control states and events, making it difficult to trace the root cause if it lies in the control program. Additionally, there is a lack of capability to connect anomalies in the controller to program variable corruption and bug locations.

To address these challenges, we developed MAYDAY, a cross-domain post-accident investigation framework that maps the control model to the control program. This framework enables in-flight logging of control program execution and traceback to the control-semantic bug that caused an accident, using both control- and program-level logs.

We applied MAYDAY to ArduPilot, a popular open-source RAV control program. Our investigation of 10 RAV accidents caused by real ArduPilot bugs demonstrated that MAYDAY can accurately pinpoint the root causes with minimal runtime and storage overhead. We also identified four recently patched bugs that are still vulnerable and alerted the ArduPilot team.

## 1. Introduction
Robotic aerial vehicles (RAVs), such as quadrotors, are increasingly used in commercial and industrial applications, including package delivery services like Amazon Prime Air. However, the frequency of RAV accidents is also on the rise, leading to undesirable consequences such as vehicle malfunction, instability, or even crashes. These accidents call for in-depth investigations to understand their root causes.

The causes of RAV accidents can be broadly categorized into:
1. Physical causes, such as component failures, environmental disturbances, and sensor hardware limitations.
2. Generic software bugs, such as buffer overflows.
3. Domain-specific control-semantic bugs, which arise from programming errors in implementing the RAV control model in the control program.

While current RAV flight data recording can help trace physical causes, it is less informative for inspecting the control program internals. As a result, inquiries into "why did my drone crash" often go unanswered if the root cause is a control-semantic bug.

### Motivating Case
In a specific case, an RAV was cruising normally at a constant speed until it made a scheduled 90-degree turn, after which it became unstable and crashed. The root cause was a control-semantic bug where the control program failed to check the validity of a control parameter (control gain) set either by the operator via the ground control station (GCS) or by an attacker via a remote parameter-changing command. This type of accident is challenging to investigate due to the delayed physical impact, the difficulty in identifying the triggering event, and the non-trivial task of locating the bug in the control program.

### Challenges
The fundamental challenges in investigating these accidents lie in:
1. **Evidence**: Current RAV flight logs only record high-level controller states without logging control program execution.
2. **Methodology**: There is a lack of capability to connect controller anomalies to program variable corruption and bug locations.

## 2. Background and Models
### RAV Control Model
MAYDAY is driven by the RAV control model, which includes:
1. **Vehicle Dynamics**: An RAV stabilizes movements along six degrees of freedom (6DoF): x, y, z-axes and roll, pitch, and yaw. Each 6DoF is controlled by a cascading controller.
2. **Controller Organization**: Inside each 6DoF controller, a cascade of primitive controllers controls position, velocity, and acceleration.
3. **Control Algorithm**: Each primitive controller uses the classic PID (proportional-integral-derivative) algorithm.

### RAV Control Program
The RAV control program implements the RAV control model. It accepts two types of input:
1. **Sensor Data**: Measures vehicle states.
2. **Operator Commands**: Issued from the ground control station (GCS) to set/reset flight missions and control parameters.

The control program runs periodically, executing multiple controllers and recording controller states and events in on-board persistent storage.

### Trust Model and Assumptions
MAYDAY operates under the following assumptions:
1. **Soundness of the Control Model**: The underlying RAV control model is sound.
2. **High-Level Control Log**: The RAV control program generates high-level control logs, confirmed by popular RAV control programs like ArduPilot, PX4, and Paparazzi.
3. **Log Integrity**: The integrity of logs and log generation logic is assumed, enforced by existing code and data integrity techniques.
4. **Control Flow Integrity**: Traditional program vulnerabilities, such as buffer overflows and memory corruption, are outside the scope of MAYDAY.

### Threat and Safety Model
MAYDAY addresses safety and security threats faced by RAVs, focusing on finding control-semantic bugs after accidents. These accidents can be caused by safety issues (e.g., buggy control code, operator errors) or attacks (e.g., deliberate negligence, exploitation by a malicious insider). Attackers may exploit control-semantic bugs by launching flights under bug-triggering conditions or adjusting control/mission parameters. Such attacks do not require code injection, sensor/GPS spoofing, or self-sabotaging commands, making them a real threat to RAV operations.

## 3. Motivating Example
Consider an RAV flying northeast at 60 cm/s (30 cm/s east) and then turning to fly east at 60 cm/s. In a scenario without a bug, the velocity and acceleration remain stable. However, with a bug, the RAV becomes unstable after the turn, leading to a crash. The root cause is a control-semantic bug where the control program fails to validate a control parameter, causing a delay in the physical impact and making the investigation challenging.

## 4. Overview of MAYDAY Framework
MAYDAY is a cross-domain post-accident investigation framework that maps the control model to the control program. It enables:
1. **In-Flight Logging**: Logs control program execution during flight.
2. **Traceback**: Traces back to the control-semantic bug that caused the accident using control- and program-level logs.

## 5. CVDG and Program Analysis
### Control Variable Dependency Graph (CVDG)
MAYDAY formalizes the control model as a CVDG, establishing a mapping between the control model and the control program. This bridges the semantic gap between control- and program-level variables and data flows.

### Instrumentation
MAYDAY develops an automatic instrumentation to enable CVDG-guided program execution logging. This enriches the investigation evidence by selectively logging program execution, guided by the CVDG.

## 6. Post-Accident Investigation Process
MAYDAY employs a two-stage investigation process:
1. **Control-Level Investigation**: Analyzes control-level logs to identify the first malfunctioning controller and the sequence of control variable corruptions.
2. **Program-Level Investigation**: Uses the output of the control-level investigation and the control model-program mapping to narrow down the scope of program-level logs, localizing the root cause (bug) of the accident.

## 7. Implementation
MAYDAY has been implemented and applied to ArduPilot, a popular open-source RAV control program. The implementation details include the integration of CVDG, automatic instrumentation, and the two-stage investigation process.

## 8. Evaluation
Our evaluation of 10 RAV accidents caused by real ArduPilot bugs demonstrated that MAYDAY can accurately localize the bugs with reasonable runtime and storage overhead. We also identified four recently patched bugs that are still vulnerable and alerted the ArduPilot team.

## 9. Limitations and Future Work
MAYDAY specializes in control-semantic bugs and is one of several tools needed for a thorough, multi-aspect investigation. Future work will focus on addressing other types of RAV accidents and improving the framework's efficiency and scalability.

## 10. Related Work
MAYDAY builds upon and extends existing efforts in RAV control, logging, and security. It provides a unique approach to cross-domain post-accident investigation, filling a gap in current methodologies.

## 11. Conclusion
MAYDAY is a novel cross-domain post-accident investigation framework that maps the control model to the control program, enabling in-flight logging of control program execution and traceback to the control-semantic bug that caused an accident. Our evaluation demonstrates its effectiveness in accurately localizing bugs and highlights its potential for improving RAV safety and security.

---

This optimized version of the text is more structured, clear, and professional, making it easier to read and understand.