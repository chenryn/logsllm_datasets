title:From Control Model to Program: Investigating Robotic Aerial Vehicle
Accidents with MAYDAY
author:Taegyu Kim and
Chung Hwan Kim and
Altay Ozen and
Fan Fei and
Zhan Tu and
Xiangyu Zhang and
Xinyan Deng and
Dave (Jing) Tian and
Dongyan Xu
From Control Model to Program: Investigating 
Robotic Aerial Vehicle Accidents with MayDay
Taegyu Kim, Purdue University; Chung Hwan Kim, University of Texas at Dallas; 
Altay Ozen, Fan Fei, Zhan Tu, Xiangyu Zhang, Xinyan Deng, Dave (Jing) Tian, 
and Dongyan Xu, Purdue University
https://www.usenix.org/conference/usenixsecurity20/presentation/kim
This paper is included in the Proceedings of the 29th USENIX Security Symposium.August 12–14, 2020978-1-939133-17-5Open access to the Proceedings of the 29th USENIX Security Symposium is sponsored by USENIX.From Control Model to Program:
Investigating Robotic Aerial Vehicle Accidents with MAYDAY
Taegyu Kim†, Chung Hwan Kim∗, Altay Ozen†, Fan Fei†, Zhan Tu†
Xiangyu Zhang†, Xinyan Deng†, Dave (Jing) Tian†, Dongyan Xu†
†Purdue University, {tgkim, aozen, feif, tu17, xyzhang, xdeng, daveti, dxu}@purdue.edu
∗University of Texas at Dallas, PI:EMAIL
Abstract
With wide adoption of robotic aerial vehicles (RAVs), their
accidents increasingly occur, calling for in-depth investigation
of such accidents. Unfortunately, an inquiry to “why did my
drone crash” often ends up with nowhere, if the root cause
lies in the RAV’s control program, due to the key challenges
in evidence and methodology: (1) Current RAVs’ ﬂight log
only records high-level vehicle control states and events, with-
out recording control program execution; (2) The capability
of “connecting the dots” – from controller anomaly to pro-
gram variable corruption to program bug location – is lacking.
To address these challenges, we develop MAYDAY, a cross-
domain post-accident investigation framework by mapping
control model to control program, enabling (1) in-ﬂight log-
ging of control program execution, and (2) traceback to the
control-semantic bug that led to an accident, based on control-
and program-level logs. We have applied MAYDAY to ArduPi-
lot, a popular open-source RAV control program that runs on a
wide range of commodity RAVs. Our investigation of 10 RAV
accidents caused by real ArduPilot bugs demonstrates that
MAYDAY is able to pinpoint the root causes of these accidents
within the program with high accuracy and minimum runtime
and storage overhead. We also found 4 recently patched bugs
still vulnerable and alerted the ArduPilot team.
1 Introduction
Robotic aerial vehicles (RAVs) such as quadrotors have been
increasingly adopted in commercial and industrial applica-
tions – for example, package delivery by RAVs for Amazon
Prime Air service [8]. Meanwhile, RAV accidents are in-
creasingly reported, with undesirable consequences such as
vehicle malfunction, instability or even crash [5, 6], calling
for in-depth investigation of such accidents.
The causes of RAV accidents vary widely, including (but
not limited to) (1) “physical” causes such as physical com-
ponent failures, environmental disturbances, and sensor hard-
ware limitations [4, 7, 32, 42, 70]; (2) generic bugs, such as
buffer overﬂows, in the control program [26, 50]; (3) domain-
speciﬁc control-semantic bugs, which arise from program-
ming errors in implementing the underlying RAV control
model in the control program. The ﬁrst two categories involve
hardware or software issues separately, while the third cate-
gory entangles both the cyber and physical aspects of an RAV
system. Meanwhile, current RAV’s ﬂight data recording can
provide information to help trace back to physical causes of
RAV accidents, but becomes much less informative when in-
specting the control program internals. As a result, an inquiry
to “why did my drone crash” often ends up with nowhere, if
its root cause is a control-semantic bug.
As a motivating case (detailed investigation in Section 3
and 8.1.1), an RAV had been cruising normally at a constant
speed, until it made a scheduled 90-degree turn when the vehi-
cle suddenly became unstable and crashed afterward. It turns
out that the root cause of the accident is a control-semantic
bug – the control program’s failure to check the validity of
a control parameter (control gain), set either by the operator
via the ground control station (GCS) or by an attacker via
a remote parameter-changing command [51] during normal
cruising – long before the crash. Such an accident is difﬁcult
to investigate. First, the physical impact on the vehicle did not
happen immediately after the triggering event (i.e., parameter
change), making it hard to establish the causality between
them. Second, it is challenging to spot the triggering event
among numerous states/events in the RAV’s ﬂight log. Third,
it is non-trivial to locate the bug in the control program, which
should be ﬁxed to avoid future accidents.
The fundamental challenges preventing a successful root
cause analysis for these accidents lie in evidence and method-
ology: (1) current RAV’s ﬂight log – generated by most control
programs – records high-level controller states (e.g., position,
attitude and velocity), without recording control program ex-
ecution; (2) the capability of “connecting the dots” – from
controller anomaly to program variable corruption to program
bug location – is lacking.
To address these challenges, we develop MAYDAY, a cross-
domain post-accident investigation framework by mapping
control model to control program, enabling (1) in-ﬂight log-
ging of control program execution, and (2) traceback to the
control-semantic bug that led to an accident, based on control-
USENIX Association
29th USENIX Security Symposium    913
and program-level logs.
More speciﬁcally, to enrich investigation evidence,
MAYDAY ﬁrst analyzes the control program and instruments
it with selective program execution logging, guided by a con-
trol variable dependency model. This establishes a mapping
between the control model and the program. To investigate an
accident, MAYDAY performs a two-step investigation: (1) In
control-level investigation, MAYDAY analyzes control-level
log to identify (i) the controller (among the RAV’s multiple
controllers) that ﬁrst went wrong and (ii) the sequence of con-
trol variable corruptions that had led to that controller’s mal-
function. (2) In program-level investigation, MAYDAY uses
the output of (1) and the control model-program mapping to
narrow the scope of program-level log to be analyzed, result-
ing in a very small subset of control program basic blocks
where the root cause (bug) of the accident is located.
We have applied MAYDAY to ArduPilot [12], a popular
open-source RAV control program [20,36] that runs in a wide
range of commodity RAVs, such as Intel Aero, 3DR IRIS+,
the Bebop series, and Navio2. Our investigation of 10 RAV
accidents caused by real ArduPilot bugs demonstrates that
MAYDAY is able to accurately localize the bugs for all the
cases. Our evaluation results show that MAYDAY incurs low
control task execution latency (3.32% on average), relative to
the tasks’ soft real-time deadlines. The volume of log gener-
ated by MAYDAY is moderate: 1.3GB in 30 minutes, which
can easily be supported by lightweight commodity storage
devices.
The contributions of MAYDAY lie in the awareness and
integration of RAV control model for control program instru-
mentation, tracing, and debugging, which specializes these
generic program analysis capabilities for more effective dis-
covery of control-semantic bugs.
• For control program instrumentation (ofﬂine), we formalize
the control model as a Control Variable Dependency Graph
(CVDG). By establishing a mapping between the control
model and the control program, we bridge the semantic
gap between control- and program-level variables and data
ﬂows. We then develop an automatic instrumentation to
enable CVDG-guided program execution logging.
• For control program tracing (runtime), we leverage the in-
trinsically low controller frequency for the cyber-physical
RAV (tens/hundreds of Hz; versus its MHz/GHz proces-
sor), making it practical to employ the ﬁne-grain control
program execution logging at runtime. Such an approach
would not be feasible for “cyber-only” systems due to the
high relative overhead.
• For control program debugging (post-accident), We de-
velop a two-stage accident investigation process, where the
control-level investigation identiﬁes the ﬁrst malfunction-
ing controller and infers its control variable corruption path;
and the program-level investigation will backtrack the pro-
gram trace along that corruption path for bug localization,
Figure 1: Dependencies of an RAV’s Six degrees of freedom
(6DoF) cascading controllers.
Figure 2: Primitive controllers in x-axis cascading controller.
guided by the control “model-program” mapping.
• Our investigation of 10 RAV accidents caused by real
ArduPilot bugs demonstrates that MAYDAY is able to ac-
curately localize the bugs for all the cases with reasonable
runtime and storage overhead. We also found 4 recently
patched bugs that are still vulnerable and alerted the ArduPi-
lot team.
We structured the rest of this paper as follows: Section 2
illustrates background on RAV control model and program
and security model; Section 3 describes the motivating exam-
ple of MAYDAY; Section 4 shows the overview of MAYDAY
framework; Section 5 introduces CVDG and CVDG-guided
program analysis and instrumentation techniques enabling
cross-domain investigations; Section 6 illustrates our two-
stage post-accident investigation process; Section 7 shows
the detailed implementation of MAYDAY; Section 8 evalu-
ates MAYDAY; Section 9 discusses the limitations and future
work of MAYDAY; Section 10 summarizes the related work;
Section 11 concludes MAYDAY.
2 Background and Models
RAV Control Model MAYDAY is driven by the RAV con-
trol model, which encompasses (1) vehicle dynamics, (2) con-
troller organization, and (3) control algorithm. For vehicle
dynamics, an RAV stabilizes movements along the six degrees
of freedom (6DoF) such as the x, y, z-axes and the rotation
around them, namely roll, pitch, and yaw. Each of the 6DoF
is controlled by one cascading controller, with dependencies
shown in Fig. 1.
Inside each 6DoF controller, a cascade of primitive con-
trollers controls the position, velocity, and acceleration of
that “degree”, respectively. The control variables of these
primitive controllers have dependencies induced by physi-
cal laws. Fig. 2 shows such dependencies using the x-axis
controller as an example. For the x-axis position controller
(c1(t), left-most), xx(t) is the vehicle state (i.e., position).
rx(t) is the reference which indicates the desired position.
914    29th USENIX Security Symposium
USENIX Association
Roll CascadingControllerPitch CascadingControllerYaw CascadingControllerx-axis CascadingControllery-axis CascadingControllerz-axis CascadingControllerMotor ControllerMissionManager+-+-+-ሶ𝑟𝑥(𝑡)ሷ𝑟𝑥(𝑡)𝑐1(𝑡)ሶ𝑥𝑥(𝑡)ሷ𝑥𝑥(𝑡)𝑟𝑥(𝑡)𝑐2(𝑡)𝑐3(𝑡)𝑥𝑥(𝑡)𝑥𝑥(𝑡)𝑜𝑥(𝑡)ሶ𝑒𝑥(𝑡)𝑒𝑥(𝑡)ሷ𝑒𝑥(𝑡)𝑔(𝑡)ൗ𝜕𝜕𝑡ൗ𝜕2𝜕2𝑡X-axis Position ControllerX-axis Velocity ControllerX-axis Acceleration ControllerTransition to another 6DoF controllerex(t) = rx(t)− xx(t) is the error, namely difference between
the state and reference. Intuitively, the goal of the controller
is to minimize ex(t).
Similarly, the velocity and acceleration primitive con-
trollers have their own sets of control variables: ˙xx(t), ˙rx(t),
˙ex(t) for x-axis velocity; and ¨xx(t), ¨rx(t), ¨ex(t) for acceler-
ation (the “dot” symbol denotes differentiation). The three
primitive controllers work in a cascade: the output (reference)
of one controller becomes the input of its immediate down-
stream controller. Each controller also accepts other inputs,
such as ﬂight mission and control parameters. The output of a
cascading controller (e.g., ox(t)) can be either a motor throttle
value or a reference input for another 6DoF controller (e.g.,
from the x-axis controller to the roll angle controller).
RAV Control Program The RAV control program imple-
ments the RAV control model. It accepts two types of input:
(1) sensor data that measure vehicle states and (2) operator
commands from ground control (GCS). GCS commands are
typically issued to set/reset ﬂight missions (e.g., destination
and velocity) and control parameters (e.g., control gain). The
control program runs periodically to execute the multiple con-
trollers. For auditing and troubleshooting, most RAV control
programs record controller states (e.g., vehicle state and refer-
ence) and events (e.g., sensor and GCS input) in each control
loop iteration and store them in on-board persistent storage.
Trust Model and Assumptions MAYDAY is subject to
the following assumptions: (1) We assume the soundness
of the underlying RAV control model. (2) We assume that
the RAV control program already generates high-level con-
trol log, which at least includes each primitive controller’s
reference, state and input. This is conﬁrmed by popular RAV
control programs ArduPilot [12], PX4 [16] and Paparazzi [15].
(3) We assume the integrity of logs and log generation logic
in the control program, which can be enforced by existing
code and data integrity techniques [55, 59, 61]. After a crash,
we assume that the logs are fully recoverable from the vehi-
cle’s “black box”. (4) We assume the control ﬂow integrity of
control program execution. Hence traditional program vulner-
abilities/exploits, such as buffer overﬂow, memory corruption,
and return-oriented programming, are outside the scope of
MAYDAY. There exists a wide range of software security
techniques to defend against such attacks [1, 31, 50, 71].
Soundness of Control Model To justify Assumption (1)
of the trust model, we show that the underlying RAV con-
trol model adopted by ArduPilot is theoretically sound. For
the model’s vehicle dynamics, prior work [34] has analyti-
cally proved its correctness by modeling a standard rigid body
system using Newton-Euler equations. For the model’s con-
trol algorithm and controller organization, every primitive
controller (e.g., those in Fig. 2) instantiates the classic PID
(proportional-integral-derivative) algorithm; whereas all the
controllers are organized in a dependency graph (CVDG, to
be presented in Section 5.1), which reﬂects the classic RAV
controller organization for controlling the vehicle’s 6DoF.
Based on the sound control model elements, the model’s
stability has been proved in prior work [33]. Furthermore,
the control model – by design – tolerates vehicle dynamics
changes (e.g., payload change) and disturbances (e.g., strong
wind) to a bounded extent. We note that MAYDAY investigates
accidents/attacks when the vehicle is operating within such
bounds; and the triggering of the control-semantic bug will
make an originally sound control model unsound, by corrupt-
ing its control/mission parameter(s), leading to instability of
the system. Finally, theoretical soundness of the RAV control
model is also testiﬁed to by its wide adoption by RAV vendors
such as 3D Robotics, jDrone, and AgEagle for millions of
robotic vehicles [20].
Threat and Safety Model MAYDAY addresses safety and
security threats faced by RAVs, with a focus on ﬁnding
control-semantic bugs in RAV control programs after acci-
dents. These accidents may be caused by either safety issues
(e.g., buggy control code execution or operator errors) or
attacks (e.g., deliberate negligence or exploitation by a mali-
cious insider). We assume that attackers know the existence of
a control-semantic bug and its triggering condition. Then, an
attacker may (1) continue to launch ﬂight missions under the
bug-triggering condition (e.g., strong wind) or (2) adjust ve-
hicle control/mission parameters to create the bug-triggering
condition (demonstrated in [51]). Action (1) requires the oper-
ator to simply “do nothing”; whereas action (2) will only leave
a minimum bug-triggering footprint which could gradually
corrupt controller states over a long period of time (Section
3). Such small footprint and long “trigger-to-impact” time
gap make investigation harder. Furthermore, attacks exploit-
ing control-semantic bugs do not require code injection, sen-
sor/GPS spooﬁng, or blatantly self-sabotaging commands. As
such, the security threat posed by control-semantic bugs is
real to RAV operations and “exploit-worthy” to adversaries.
All accident cases in our evaluation (Section 8) can happen in
either accidental (i.e., safety) or malicious (e.g., security) con-
text, reﬂecting the broad applicability of MAYDAY for RAV
safety and security.
Meanwhile, accidents caused by either physical failures/at-
tacks or generic software bugs are out of scope, as they have
been addressed by existing efforts. For example, built-in
logs can provide information for investigating either sus-
picious operator commands or physical attacks/accidents
[19, 29, 45], without cross-layer (i.e., from control model to
program) analysis (Section 9); and there has been a large
body of solutions targeting generic software vulnerabilities
[47, 49, 54, 60, 64, 73, 76, 77].
Finally, we note that there are multiple possible root causes
to check after an RAV accident (e.g., software bugs, mechan-
ical issues, and human operator factors). MAYDAY, which
specializes in control-semantic bugs, is only one of multiple
investigation tools (e.g., those for physical attacks) to enable
a thorough, multi-aspect investigation.
USENIX Association
29th USENIX Security Symposium    915
Figure 3: Motivating example ﬂight. An RAV ﬁrst ﬂies to the
north east with 60 cm/s (only in east, 30 cm/s) and then ﬂies
to east with 60 cm/s speed.
(a) Velocity without a bug.
(b) Acceleration without a bug.
(c) Velocity with a bug.
(d) Acceleration with a bug.
Figure 4: Controller states with and without the x-axis velocity
parameter manipulation. The control loop iterates at a 10 Hz
interval.