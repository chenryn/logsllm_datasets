Question: Consider the following code snippet from a mobile application that uses a local SQLite database to authenticate users. Identify the security issue(s) present in the code and select the best practice(s) that should be employed to mitigate the identified issue(s):

java
SQLiteDatabase db;

String sql = "SELECT * FROM users WHERE username = '" + username + "' AND password = '" + password + "'";

Cursor c = db.rawQuery( sql, null );

return c.getCount() != 0;

"A": "The code snippet is vulnerable to SQL injection and should use prepared statements with variable binding to mitigate the issue.",
"B": "The code is secure as is, since mobile applications do not often expose services on the network.",
"C": "The code snippet should employ XML parsing with rejection of external entity resolution to mitigate potential XML injection attacks.",
"D": "The code should be refactored to use a custom URL scheme to secure the transmission of username and password."
Answer: A