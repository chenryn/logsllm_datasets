# Multi-Channel Broadcast Encryption

## Authors
Duong Hieu Phan<sup>1,2</sup>, David Pointcheval<sup>2</sup>, and Viet Cuong Trinh<sup>1</sup>

<sup>1</sup> LAGA, University of Paris 8  
<sup>2</sup> ENS / CNRS / INRIA

## Abstract
Broadcast encryption aims to deliver content to a large, arbitrary group of users simultaneously. The most efficient schemes currently provide constant-size headers that encapsulate ephemeral session keys for encrypting the payload. However, in practical applications like pay-TV, providers need to send different content to various user groups. This results in channel-specific headers, leading to a linear increase in overhead with the number of channels. Additionally, when a user switches channels, they must obtain and decrypt the new header, which can be time-consuming unless all headers are stored or frequently transmitted.

In this paper, we introduce Multi-Channel Broadcast Encryption (MIBE), which encapsulates multiple ephemeral keys for different groups and channels in a single header. This approach aims to reduce the global overhead and minimize zapping time. We propose private variants of the Boneh-Gentry-Waters (BGW) scheme, ensuring a constant-size global header independent of the number of channels. To prove the CCA security of our scheme, we introduce a new dummy-helper technique and implement it in the random oracle model.

## 1. Introduction
Broadcast encryption has been extensively studied due to its importance in many practical applications, such as pay-TV systems. In these systems, users have decoders that can only decode the channels they have subscribed to. Traditional broadcast encryption models focus on a single content and a single target set, which is not practical for multi-channel scenarios. Applying independent broadcast encryption schemes for each channel results in significant inefficiencies, including linear growth in bandwidth and long zapping times.

To address these issues, we propose Multi-Channel Broadcast Encryption (MIBE), which aims to achieve a short, constant-size global header. Our contributions include:
- A formalization of MIBE.
- The introduction of the dummy-helper technique to prove security.
- Two constructions derived from the BGW scheme, both providing constant-size headers and resistance to selective adversaries.

### 1.1 Background
Broadcast encryption was first described by Fiat and Naor [5]. Naor, Naor, and Lotspiech [8] introduced a symmetric-key subset-cover framework, while Dodis and Fazio [4] presented the first public-key CCA-secure scheme. Boneh, Gentry, and Waters [2] designed a fully collusion-resistant scheme, and Gentry and Waters [6] defined the adaptive model. Recent work by Phan, Pointcheval, and Strefler [10] provides a comprehensive overview of security notions, but our setting extends their considerations to handle multiple channels.

### 1.2 Contributions
- **Formalization of MIBE**: We define the problem and introduce the dummy-helper technique to prove security.
- **Constructions**: 
  - The first construction is competitive with the BGW scheme, achieving a constant-size header and linear private key size.
  - The second construction improves security against strong selective adversaries, using the dummy-helper technique in the random oracle model.

### 1.3 Dummy-Helper Technique
In the multi-channel setting, session keys for all channels are compacted into one ciphertext, creating implicit relations between the keys. The dummy-helper technique involves adding a new channel for an additional dummy user, allowing the simulator to derive other session keys and answer decryption queries. This technique is implemented in the random oracle model and achieves security under the standard n-BDHE assumption.

## 2. Multi-Channel Broadcast Encryption

### 2.1 Syntax
A multi-channel broadcast encryption system consists of four probabilistic algorithms:

- **Setup(λ)**: Takes a security parameter λ and generates the global parameters `param`, a master key `MSK`, and an encryption key `EK`. If the scheme allows public encryption, `EK` is public; otherwise, it is part of `MSK`.
- **Extract(i, MSK)**: Takes a user index `i` and the master key, and outputs the user's private key `di`.
- **Encrypt(S1, S2, ..., Sm, EK)**: Takes `m` subsets `S1, S2, ..., Sm` and the encryption key `EK`, and outputs a header `Hdr` and `m` ephemeral keys `K1, K2, ..., Km`. The key `Ki` is associated with the subset `Si`.
- **Decrypt(S1, S2, ..., Sm, Hdr, j, dj, i)**: Takes a full header, a user `j` and its private key `dj`, and a subgroup index `i`. If `j` is in `Si`, it outputs the ephemeral key `Ki`.

For correctness, for all subsets `Si` and all `j` in `Si`, if `(EK, MSK) ← Setup(λ)`, `dj ← Extract(j, MSK)`, and `(Hdr, K1, ..., Km) ← Encrypt(S1, S2, ..., Sm, EK)`, then `Ki = Decrypt(S1, S2, ..., Sm, Hdr, j, dj, i)`.

### 2.2 Security Model
We define the security of a multi-channel broadcast encryption system through a game between an attacker `A` and a challenger:

- **Setup**: The challenger runs `Setup` to generate `param`, `MSK`, and `EK`. If the scheme is asymmetric, `EK` is given to `A`; otherwise, it is part of `MSK`.
- **Query Phase 1**:
  - **Corruption Query**: The adversary requests the private key of user `i`. The challenger runs `Extract(i, MSK)` and sends the result to `A`.
  - **Decryption Query**: The adversary requests the decryption of a full header for a specific user and subset. The challenger responds with the corresponding ephemeral key.
  - **Encryption Query**: If `EK` is private, the adversary can request encryption for target sets. The challenger responds with the encrypted data.
- **Challenge**: The adversary outputs `t` target sets `S1*, S2*, ..., St*` and an index `j` specifying the attacked target set `Sj*`. The challenger runs `Encrypt(S1*, S2*, ..., St*, EK)` and outputs the header and keys. The challenger picks a random bit `b` and sets `Kj*,b` to the challenge key, while the other keys are random. The adversary receives the header and keys.
- **Query Phase 2**: The adversary continues to make queries as in Phase 1.
- **Guess**: The adversary outputs a guess `b'` for `b`. The adversary wins if `b' = b` and `Sj* ∩ ΛC = ∅` and `(Hdr*, Sj*) ∉ ΛD`.

### 2.3 Disjoint Target Sets
In pay-TV systems, there are multiple channels, each encrypted for a set of users. Users receive decryption keys for the channels they subscribe to. The target sets for each channel are disjoint, but to limit the number of keys, keys can be reassigned when users unsubscribe. At any time, the broadcaster assumes the target sets are disjoint.

## 3. Preliminaries

### 3.1 Computational Assumptions
- **CDH Assumption**: For any `t`-time adversary `A` given `(g, gr, h) ∈ G`, the probability of outputting `hr` is bounded by `ε`.
- **BDHE Assumption**: For any `t`-time adversary `A` given `(g, h, gα1, ..., gαn, gαn+2, ..., gα2n) ∈ G2n+1`, the probability of outputting `e(g, h)αn+1` is bounded by `ε`.
- **DBDHE Assumption**: For any `t`-time adversary `A` given the same inputs as BDHE and a candidate value `T`, the advantage in distinguishing `e(g, h)αn+1` from `T` is bounded by `ε`.

### 3.2 BGW Overview
The BGW scheme [2] is a fully collusion-resistant broadcast encryption scheme. It uses bilinear groups and a master key to generate public and private keys. Encryption and decryption involve computing ephemeral keys and headers. For multiple messages, independent BGW schemes can be combined, but this results in a linear increase in header size. Our goal is to achieve a constant-size header.

## 4. Conclusions
Multi-Channel Broadcast Encryption (MIBE) addresses the inefficiencies of traditional broadcast encryption in multi-channel scenarios. By encapsulating multiple ephemeral keys in a single header, MIBE reduces global overhead and minimizes zapping time. Our constructions, based on the BGW scheme, provide constant-size headers and robust security, making them suitable for practical applications like pay-TV systems.