title:Multi-channel broadcast encryption
author:Duong Hieu Phan and
David Pointcheval and
Viet Cuong Trinh
Multi-Channel Broadcast Encryption
Duong Hieu Phan1,2, David Pointcheval2, and Viet Cuong Trinh1
1LAGA, University of Paris 8
2ENS / CNRS / INRIA
Abstract. Broadcast encryption aims at sending a content to a large arbitrary group of users at once.
Currently, the most eﬃcient schemes provide constant-size headers, that encapsulate ephemeral session
keys under which the payload is encrypted. However, in practice, and namely for pay-TV, providers have
to send various contents to diﬀerent groups of users. Headers are thus speciﬁc to each group, one for each
channel: as a consequence, the global overhead is linear in the number of channels. Furthermore, when one
wants to zap to and watch another channel, one has to get the new header and decrypt it to learn the
new session key: either the headers are sent quite frequently or one has to store all the headers, even if one
watches one channel only. Otherwise, the zapping time becomes unacceptably long.
In this paper, we consider encapsulation of several ephemeral keys, for various groups and thus various
channels, in one header only, and we call this new primitive Multi-Channel Broadcast Encryption – MIBE:
one can hope for a much shorter global overhead and a short zapping time since the decoder already has
the information to decrypt any available channel at once. Our candidates are private variants of the Boneh-
Gentry-Waters scheme, with a constant-size global header, independently of the number of channels. In
order to prove the CCA security of the scheme, we introduce a new dummy-helper technique and implement
it in the random oracle model.
1 Introduction
Broadcast encryption has been widely and deeply studied as it is a core primitive for many concrete
applications. In the following, we focus on the pay-TV scenario, in which users own decoders to decode
only the channels they subscribed to. In this context, the broadcaster sends several channels at the
same time, to diﬀerent groups of users or target sets.
Unfortunately, previous broadcast encryption models only dealt with one single content and one
single target set at a time. This was a ﬁrst reasonable goal to get such an eﬃcient broadcast encryption
scheme, but not quite relevant to practice. In fact, TV systems contain many channels, with diﬀerent
sets of privileged users. One could argue that this scenario is covered by the usual systems, applying
independent broadcast encryption schemes for each channel. However, this results in a very ineﬃcient
scheme: the bandwidth or header size grows linearly in the number of channels, which could be very
large; in case of zapping to another channel, one has to start from scratch, and namely to wait for the
reception of the new appropriate header, which can take some time, unless the decoder stores all the
headers all the time.
These two problems, of the bandwidth that should not be too large and zapping time that should
not be too long, lead to new eﬃciency criteria, with a common solution: a broadcast encryption with
a short global header. Our new primitive MIBE, for MultI-channel Broadcast Encryption, addresses
them. In the following, we show that it is possible to achieve this goal in an optimal way: a constant-size
global header, independently of number of channels.
Broadcast encryption schemes. Broadcast encryption was ﬁrst described by Fiat and Naor in [5]
but receives much attention since the work of Naor, Naor, and Lotspiech [8] in which they presented a
symmetric-key subset-cover framework along with a security model and a security analysis. Dodis and
Fazio [4] presented the ﬁrst public-key CCA-secure scheme. Boneh, Gentry, and Waters [2] designed a
fully collusion-resistant scheme and proposed a security model where the adversary can corrupt any
2
user, except the users in the challenge target set. With their scheme, the adversary had to precise this
challenge target set before knowing the parameters of the system, hence the so-called selective model.
Delerabl´ee constructed a selectively secure ID-based BE [3] in the random oracle model. Thereafter,
Gentry and Waters [6] deﬁned the adaptive model, where the adversary can corrupt users and then
adaptively choose the challenge target set, and provided adaptively secure schemes in the standard and
the random oracle models. Waters [11] and Lewko et. al. [7] used dual system encryption to achieve
adaptive security. Recently, a scheme that achieves all desired properties (constant-size ciphertexts,
adaptive and CCA security) has been presented in [9] but it relies on rather non-standard assumptions.
Phan, Pointcheval and Streﬂer [10] recently gave a global picture of the relations between the
security notions for broadcast encryption. However, our setting of multi-channel broadcast encryption
go beyond their consideration, because the adversary could corrupt some user of one channel to break
the security of the other channels. The sessions keys of all channels should indeed be compacted into
one ciphertext only, there are thus some relations between these keys inside one session and the security
model has to take these relation into account.
Contributions. We ﬁrst propose a formalization of the problem, with the so-called Multi-Channel
Broadcast Encryption – MIBE. Because of some constraints between the various target sets, we in-
troduce the dummy-helper technique that helps to prove the security. We eventually propose two
constructions, derived from the Boneh-Gentry-Waters (BGW) [2] scheme. They are private broadcast
encryption schemes, with the following properties:
– The ﬁrst construction is, asymptotically, very competitive with the BGW scheme. In fact, it
achieves the constant-size header, while the private decryption key size remains linear in the
number of the channels that a user has subscribed to. In addition, it is fully collusion resistant
against basic selective adversaries, i.e. the adversaries who can only ask corruption queries to get
the decryption keys of users in the selective security model (the challenge target set is announced
before having seen the global parameters). This is also the security level that the original BGW
scheme achieves and our security proof holds under the standard assumption n − BDHE, as in the
original BGW scheme [2].
– The second construction improves on the previous one, to resist to strong selective adversaries who
have the power of basic selective adversaries plus unlimited access to encryption and decryption
queries, while keeping the parameter sizes and computational assumptions unchanged. To this
aim, we introduce the dummy-helper technique and make use of a random oracle [1]. Our scheme
is more eﬃcient than the CCA version of the BGW scheme [2] but our dummy-helper technique
actually works in the random oracle model.
Dummy-helper technique. In the multi-channel setting, because the session keys of all channels are
compacted in only one ciphertext, there exists an implicit relation between the session keys of the
channels which could be known by the simulator without the whole knowledge of the master key. By
introducing the dummy-helper technique, which consists in adding a new channel for one additional
dummy user, we get the following interesting properties:
1. it gives our simulator the possibility to decrypt this channel and get the corresponding session key.
This is then suﬃcient for the simulator to derive the other session keys and successfully answer
any decryption query.
2. by eventually publishing the decryption key of the dummy user, it introduces a channel that can
be decoded by all the users registered in the system: to send the program or ads.
We implement this dummy-helper technique in the random oracle model. It is worth noting that,
though working in a more complex setting of multi-channel broadcast encryption, the security is
achieved under the standard assumption n − BDHE as in the BGW scheme.
3
2 Multi-channel Broadcast Encryption
2.1 Syntax
In this section we describe the model for a multi-channel broadcast encryption system. Formally, such
a system consists of four probabilistic algorithms:
Setup(λ): Takes as input the parameter security λ, it generates the global parameters param of the
system, and returns a master key MSK and an encryption key EK. If the scheme allows encryption,
EK is public, otherwise EK is kept private, and can be seen as a part of MSK.
Extract(i, MSK): Takes as input the user’s index i, together with the master key, and outputs the
user’s private key di.
Encrypt(S1, S2, . . . , Sm, EK): Takes as input m subsets (or target sets) S1, S2, . . . , Sm where, for
i = 1, . . . , m, Si ⊆ {1, . . . , n}, and the encryption key EK. It outputs (Hdr, K1, K2, . . . , Km) where
Hdr encapsulates the ephemeral keys (Ki)i ∈ K. The key Ki will be associated to the subset Si.
We will refer to Hdr as the broadcast ciphertext, or header, whereas this header together with the
description of all the target sets is called the full header.
Decrypt(S1, S2, . . . , Sm, Hdr, j, dj, i) : Takes as input a full header (S1, S2, . . . , Sm, Hdr), a user j ∈
{1, . . . , n} and its private key dj, together with a subgroup index i ∈ {1, . . . , m}. If j ∈ Si, then
the algorithm outputs the ephemeral key Ki ∈ K.
For correctness, we require that for all subsets Si ⊆ {1, . . . , n} and all j ∈ Si, if (EK, MSK) ←
Setup(λ), dj ← Extract(j, MSK) and (Hdr, K1, . . . , Km) ← Encrypt(S1, S2, . . . , Sm, EK) then Ki =
Decrypt(S1, S2, . . . , Sm, Hdr, j, dj, i).
In practice, the goal of such ephemeral keys is to encrypt the payload, which consists of m messages
M1, . . . , Mm to be broadcast to the sets S1, . . . , Sm respectively. They will thus be encrypted under the
symmetric keys K1, . . . , Km into the ciphertexts CM1, . . . , CMm respectively. The broadcast to all users
in S1, S2, . . . , Sm consists of (S1, S2, . . . , Sm, Hdr, CM1, CM2, . . . , CMm) where (S1, S2, . . . , Sm, Hdr) is
the full header and (CM1, CM2, . . . , CMm) is often called the encrypted payload.
2.2 Security Model
We deﬁne the security of a multi-channel broadcast encryption system by the following game between
an attacker A and a challenger:
Setup. The challenger runs the Setup algorithm to generate the global parameters param of the
system, and returns a master key MSK and an encryption key EK. If the scheme is asymmetric,
EK is given to A, otherwise it can be seen as a part of the MSK, and thus kept secret. Corruption
and decryption lists ΛC, ΛD are set to empty lists.
Query phase 1. The adversary A adaptively asks queries:
1. Corruption query for the i-th user: the challenger runs Extract(i, MSK) and forwards the
resulting private key to the adversary. The user i is appended to the corruption list ΛC;
2. Decryption query on the full header (S1, S2, . . . , Sm, Hdr) together with u ∈ {1, . . . , n} and
j ∈ {1, . . . , m}. The challenger answers with Decrypt(S1, S2, . . . , Sm, Hdr, u, du, j). The pair
(Hdr, Sj) is appended to the decryption list ΛD
4
3. Encryption query (if EK is private) for the target sets (S1, S2, . . . , Sm). The challenger answers
t ⊆ {1, . . . , n} and an index j, which
Challenge. The adversary A outputs t target sets S∗
with Encrypt(S1, S2, . . . , Sm, EK).
2 , . . . , S∗
1 , S∗
speciﬁes the attacked target set S∗
j .
The challenger runs Encrypt(S∗
1 , S∗
2 , . . . , S∗
lenger picks a random b $← {0, 1}, sets K∗
(Hdr∗, K∗
t , K∗
j+1, . . . , K∗
j,0, K∗
1 , . . . , K∗
j−1, K∗
1 , K∗
j and picks random K∗
t , EK) and gets (Hdr∗, K∗
j,b = K∗
j,1) to A.
2 , . . . , K∗
j,1−b
t ). Next, the chal-
$← K. It then outputs
Query phase 2. The adversary A continues to adaptively asks queries as in the ﬁrst phase.
Guess. The adversary A eventually outputs its guess b(cid:48) ∈ {0, 1} for b.
We say the adversary wins the game if b(cid:48) = b, but only if S∗
denote by Succind(A) = Pr[b(cid:48) = b] the probability that A wins the game, and its advantage is
j ∩ ΛC = ∅ and (Hdr∗, S∗
j ) (cid:54)∈ ΛD. We then
Advind(A) = 2 × Succind(A) − 1 = Pr[1 ← A|b = 1] − Pr[1 ← A|b = 0].
Deﬁnition 1 (Full Security). A multi-channel broadcast encryption scheme is said (t, ε, qC, qD, qE)-
secure if for any t-time algorithm A that makes at most qC corruption queries, qD decryption queries,
and qE encryption queries, Advind(A) ≤ ε. We denote by Advind(t, qC, qD, qE) the advantage of the
best t-time adversary.
t ⊆
There are two classical restricted scenarios: a selective attacker provides the target sets S∗
{1, . . . , n} at the beginning of the security game, and one can also restrict the adversary not to ask
some queries.
2 , . . . , S∗
1 , S∗
Deﬁnition 2 (Basic Selective Security). A multi-channel broadcast encryption scheme is said
(t, ε, qC)-selectively secure if it is (t, ε, qC, 0, 0)-secure against a selective adversary. We denote by
Advb−ind(t, qC) the advantage of the best t-time basic selective adversary.
Deﬁnition 3 (Strong Selective Security). A multi-channel broadcast encryption scheme is said
(t, ε, qC, qD, qE)-selectively secure if it is (t, ε, qC, qD, qE)-secure against a selective adversary. We denote
by Advs−ind(t, qC, qD, qE) the advantages of the best t-time strong selective adversaries.
2.3 Disjoint Target Sets
As discussed in the introduction, our main motivation is pay-TV. For such systems, there are several
channels, which are encrypted to sets of users. The users thus own decryption keys:
– When a user u registers to the system, he receives a smart card with decryption keys (di
u) for every
channel i. But at the broadcast time, channel i is encrypted for the target set with the subscribers
to this channel only (a subset of the decryption keys);
– Another possibility is to ﬁrst deﬁne Ui the set of all the possible decryption keys for the channel
i. When a user u subscribes to a channel i, he receives a key di
u ∈ Ui.
In both the above case, the target sets are subsets of predetermined and disjoint sets of keys. As a
consequence, the target sets Si are disjoint too. However, we have to deﬁne many keys in the system.
In order to limit this number of keys, one could think about sharing keys for several channels. This
would allow proﬁling on users, that can be an undesirable feature. But we can still limit a little bit
the number of keys by reassigning keys when a user unsubscribes from a channel to another channel.
Anyway, in the following, at a time t, when the broadcaster encapsulates keys for several target
sets Si, we assume them to be disjoint.
5
3 Preliminaries
3.1 Computational Assumptions
We ﬁrst recall the deﬁnition of the classical Computational Diﬃe-Hellman (CDH) assumption:
Deﬁnition 4 (CDH Assumption). The (t, ε) − CDH assumption says that for any t-time adversary
A that is given (g, gr, h) ∈ G, its probability to output hr is bounded by ε:
Succcdh(A) = Pr[A(g, gr, h) = hr] ≤ ε.
Stronger assumptions have been introduced by Boneh-Gentry-Waters [2]. They both imply the above
CDH assumption.
Deﬁnition 5 (BDHE Assumption). The (t, n, ε)−BDHE assumption says that for any t-time adver-
sary A that is given (g, h, gα1, . . . , gαn, gαn+2, . . . , gα2n) ∈ G2n+1, its probability to output e(g, h)αn+1 ∈
G is bounded by ε:
Succbdhe(A) = Pr[A(g, h, g1, . . . , gn, gn+2, . . . , g2n) = e(gn+1, h)] ≤ .
Deﬁnition 6 (DBDHE Assumption). The (t, n, ε) − DBDHE assumption says that for any t-time
adversary A that is given (g, h, gα1, . . . , gαn, gαn+2, . . . , gα2n) ∈ G2n+1, and a candidate to the BDHE
problem, that is either e(g, h)αn+1 ∈ G or a random value T , cannot distinguish the two cases with
advantage greater than ε:
(cid:12)(cid:12)(cid:12)(cid:12) Pr[A(g, h, g1, . . . , gn, gn+2, . . . , g2n, e(gn+1, h)) = 1]
− Pr[A(g, h, g1, . . . , gn, gn+2, . . . , g2n, T )) = 1]
(cid:12)(cid:12)(cid:12)(cid:12) ≤ .
Advdbdhe(A) =
3.2 BGW Overview
To warm up, we ﬁrst recall the BGW scheme [2], on which our constructions will rely.
Setup(λ): Let G be a bilinear group of prime order p. The algorithm ﬁrst picks a random generator
g ∈ G and a random scalar α ∈ Zp. It computes gi = gαi ∈ G for i = 1, 2, . . . , n, n + 2, . . . , 2n.
Next, it picks a random scalar γ ∈ Zp and sets v = gγ ∈ G.
The public key is EK = (g1, . . . , gn, gn+2, . . . , g2n, v), whereas the private decryption key of user
i ∈ {1, . . . , n} is di = vαi. These decryption keys are sent by the Extract algorithm.
Encrypt(S, EK): Pick a random scalar r ∈ Zp, and set K = e(gn+1, g)r, where e(gn+1, g) can be
computed as e(gn, g1) from EK. Next, set: Hdr = (gr, (v ·(cid:81)
Decrypt(S, Hdr, i, di, EK): Parse Hdr = (C1, C2), output K = e(gi, C2)/e(di ·(cid:81)
j∈S,j(cid:54)=i gn+1−j+i, C1).
Trivially, when one wants to broadcast m diﬀerent messages to m diﬀerent sets S1, S2, . . . , Sm, one
can combine m independent BGW schemes:
j∈S gn+1−j)r), and output (Hdr, K).
Setup(λ): As in the BGW scheme.
Encrypt(S1, S2, . . . , Sm, EK): Pick random scalars r1, . . . , rm ∈ Zp, and set
gn+1−j)r1), . . . , (grm, (v ·(cid:81)
Decrypt(S1, . . . , Sm, Hdr, i, (EK, di), j): Extract C1 = grj , C2 = (v ·(cid:81)
K1 = e(gn+1, g)r1, . . . , Km = e(gn+1, g)rm
j∈Sm
(gr1, (v ·(cid:81)
(cid:16)
Hdr =
j∈S1
decrypt as in BGW.
(cid:17)
.
gn+1−j)rm)
j∈Sj
gn+1−j)rj from Hdr and
The above step shorten the header to m + 1 elements, with no more easy attack. But our goal is to
have a constant number of elements:
j∈S1
gn+1−j)r+(cid:80)
j∈S1
K1 = e(gn+1, g)r+(cid:80)
(cid:16)
gr, (v ·(cid:81)
gr, (v · (cid:89)
gn+1−j)r+(cid:80)
Hdr =
Hdr =
j∈Sm
gn+1−j)r+(cid:80)
xj ,
j∈Sm
xj
gn+1−j)r+(cid:80)