- 连接
```java
Settings settings = Settings.builder()
                .put("cluster.name","docker-cluster")
                .build();
TransportClient client = new PreBuiltTransportClient(settings);
client.addTransportAddress(
            new TransportAddress(InetAddress.getByName("my-pc"),9300));
```
- 创建索引
```java
client.admin().indices().prepareCreate("index").get();
```
- 设置映射
```java
XContentBuilder builder = XContentFactory.jsonBuilder()
                .startObject()
                .startObject("article")
                .startObject("properties")
                .startObject("id")
                .field("type", "long")
                .field("store", true)
                .endObject()
                .startObject("title")
                .field("type", "text")
                .field("store", true)
                .field("analyzer", "ik_smart")
                .endObject()
                .startObject("content")
                .field("type", "text")
                .field("store", true)
                .field("analyzer", "ik_smart")
                .endObject()
                .endObject()
                .endObject()
                .endObject();
  client.admin().indices().preparePutMapping("index")
          .setType("article")
          .setSource(builder)
          .get();
```
- 添加文档
```java
XContentBuilder builder = XContentFactory.jsonBuilder()
                .startObject()
                    .field("id",1L)
                    .field("title","央视快评：勇做敢于斗争善于斗争的战士")
                    .field("content","9月3日，习近平总书记在中央党校（国家行政学院）中青年干部培训班开班式上发表重要讲话强调，广大干部特别是年轻干部要经受严格的思想淬炼、政治历练、实践锻炼，发扬斗争精神，增强斗争本领，为实现“两个一百年”奋斗目标、实现中华民族伟大复兴的中国梦而顽强奋斗。")
                .endObject();
client.prepareIndex("index","article","1")
        .setSource(builder)
        .get();
```
- POJO添加文档
```java
Article article = new Article();
        article.setId(3L);
        article.setTitle("3央视快评：勇做敢于斗争善于斗争的战士");
        article.setContent("9月3日3333，（国家行政学院）中青年干部培训班开班式上发表重要讲话强调，广大干部特别是年");
        String json = new ObjectMapper().writeValueAsString(article);
client.prepareIndex("index","article","3")
        .setSource(json, XContentType.JSON)
        .get();
```
## 查询
- 根据ID
```java
QueryBuilder queryBuilder = QueryBuilders.idsQuery().addIds("1","2");
SearchResponse response = client.prepareSearch("index")
        .setTypes("article")
        .setQuery(queryBuilder)
        .get();
SearchHits hits = response.getHits();
System.out.println("总记录:"+hits);
SearchHit[] ret = hits.getHits();
for (SearchHit documentFields : ret) {
    Map map = documentFields.getSourceAsMap();
    System.out.println("id:"+map.get("id"));
    System.out.println("title:"+map.get("title"));
    System.out.println("content:"+map.get("content"));
    System.out.println("-------------------");
}
```
- 根据term
```java
QueryBuilder queryBuilder = QueryBuilders.termQuery("title","斗争");
```
- 根据queryString
```java
QueryBuilder queryBuilder = QueryBuilders.queryStringQuery("青年强调")
                .defaultField("content");
```
- 分页查询
```java
SearchResponse response = client.prepareSearch("index")
                .setTypes("article")
                .setQuery(queryBuilder)
                .setFrom(10)
                .setSize(5)
                .get();
```
- 高亮显示结果
```java
HighlightBuilder highlightBuilder = new HighlightBuilder();
highlightBuilder.field(highlight);
highlightBuilder.preTags("");
highlightBuilder.postTags("");
SearchResponse response = client.prepareSearch("index")
        .setTypes("article")
        .setQuery(queryBuilder)
        .highlighter(highlightBuilder)
        .get();
SearchHits hits = response.getHits();
System.out.println("总记录:"+hits.getTotalHits());
SearchHit[] ret = hits.getHits();
for (SearchHit documentFields : ret) {
    Map map = documentFields.getSourceAsMap();
    System.out.println("id:"+map.get("id"));
    System.out.println("content:"+map.get("content"));
    Map highlightFields = documentFields.getHighlightFields();
    System.out.println(highlightFields.get(highlight).getFragments()[0]);
    System.out.println("-------------------");
}
```
## es操作过程
### 写过程
客户端选择一个协调节点（coordinating node）发送请求，协调节点将请求转发给对应的node
对应的node在primary shard上处理请求，并同步到replica shard上
![批注 2020-03-19 082208](/assets/批注%202020-03-19%20082208.png)
#### 写过程原理
![批注 2020-03-19 083304](/assets/批注%202020-03-19%20083304.png)
数据先写入内存 buffer，然后每隔 1s，将数据 refresh 到 os cache，到了 os cache 数据就能被搜索到
每隔 5s，将数据写入 translog 文件（这样如果机器宕机，内存数据全没，最多会有 5s 的数据丢失），translog 大到一定程度，或者默认每隔 30mins，会触发 commit 操作，将缓冲区的数据都 flush 到 segment file 磁盘文件中
### 读过程
客户端选择一个协调节点（coordinating node）发送根据ID查询请求，协调节点会根据id进行哈希，得到doc所在的分片，将请求转发到对应的node
这个node然后会在primary shard与replica中使用随机轮询，进行负载均衡，返回document给协调节点
协调节点再把document返回给客户端
### 搜索过程
客户端发送搜索请求给协调节点，协调节点将这个请求发送给所有的shard
每个shard将自己的搜索结构返回给协调节点
由协调节点进行数据的合并、排序、分页等操作，产出最终结果
接着协调节点根据id再去查询对应的document的数据，返回给客户端
### 删除/更新过程
删除操作，会生成一个对应document id的.del文件，标识这个document被删除
如果是更新操作，就是将原来的 doc 标识为 deleted 状态，然后新写入一条数据
每refresh一次，会生成一个segment file，系统会定期合并这些文件，合并这些文件的时候，会物理删除标记.del的document
## 性能优化
### 杀手锏：filesystem cache
![批注 2020-03-19 085001](/assets/批注%202020-03-19%20085001.png)
在es中，doc的字段尽量只存储要被搜索的字段，这样可以节省内存，存放更多数据，做缓存效果更好
### 数据预热
对于一些热点数据，也要通过一些方式让它在缓存中
### 冷热分离
保证热点数据都在缓存里，提高系统性能
### doc模型设计
对于一些复杂的关联，最好在应用层面就做好，对于一些太复杂的操作，比如 join/nested/parent-child 搜索都要尽量避免，性能都很差的
### 分页性能优化
由于分页操作是由协调节点来完成的，所以翻页越深，性能越差
解决：
- 不允许深度翻页
- 将翻页设计成不允许跳页，只能一页一页翻
## kibana
Kibana是一个基于Node.js的Elasticsearch索引库数据统计工具，可以利用Elasticsearch的聚合功能，生成各种图表，如柱形图，线状图，饼图等。
而且还提供了操作Elasticsearch索引数据的控制台，并且提供了一定的API提示，非常有利于我们学习Elasticsearch的语法。
- docker
```shell
docker pull kibana:5.6.8 # 拉取镜像
docker run -d --name kibana --net somenetwork -p 5601:5601 kibana:5.6.8 # 启动
```
## SpringDataElasticSearch
### 配置
```xml
```
```java
@Document(indexName = "index1",type = "article")
@Data
public class Article {
    @Id
    @Field(type = FieldType.Long,store = true)
    private long id;
    @Field(type = FieldType.Text,store = true)
    private String title;
    @Field(type = FieldType.Text,store = true)
    private String content;
}
```
```java
@Repository
public interface ArticleDao extends ElasticsearchRepository { }
```
### 创建索引
```java
ElasticsearchTemplate template = context.getBean(ElasticsearchTemplate.class);
template.createIndex(Article.class);
```
### 添加文档
```java
Article article = new Article();
article.setId(1L);
article.setTitle("【中国稳健前行】“中国之治”的政治保证");
article.setContent("新中国成立70年来，在中国共产党的坚强领导下，...");
articleDao.save(article);
```
### 删除文档
```java
articleDao.deleteById(1L);
articleDao.deleteAll(); // 全部删除
```
### 修改文档
同添加文档
### 查询
- 查询全部
```java
articleDao.findAll().forEach(System.out::println);
```
- 根据ID
```java
System.out.println(articleDao.findById(2L).get());
```
### 自定义查询
```java
@Repository
public interface ArticleDao extends ElasticsearchRepository {
    List findAllByTitle(String title);
}
```
- 分页查询
```java
List findAllByTitle(String title, Pageable pageable);
articleDao.findAllByTitle("中", PageRequest.of(0,5)).forEach(System.out::println);
```
- 原生查询
```java
NativeSearchQuery query = new NativeSearchQueryBuilder()
        .withQuery(QueryBuilders.queryStringQuery("中国").defaultField("title"))
        .withPageable(PageRequest.of(0,5))
        .build();
template.queryForList(query,Article.class).forEach(System.out::println);
```