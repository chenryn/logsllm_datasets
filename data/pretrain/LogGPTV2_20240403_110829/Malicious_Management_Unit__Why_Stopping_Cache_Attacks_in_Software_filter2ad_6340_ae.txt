s
e
g
a
p
G
1
Translation Caches
E
2
L
M
P
E
3
L
M
P
E
4
L
M
P
e
m
T
i
24-32
5m49s
6m01s
3m08s
3m41s
20
20
20
20
N/A
24
24
24
24
24
12-16
24-32
3-4
3-4
3-4
3-4
0
3-4
3
2-4
2-6
3
64
64
0
0
0
0
0
0
6
0
0
0
0
0
0
0
4
4
4
24-32
24-32
52s
2m53
3m05s
3m11s
2m44s
N/A
4m26s
N/A
13m16s
64
30m50s
64
1088 2
2m50s
1088 2
2m47s
1056 2
2m33s
7m50s
N/A
5m38s
N/A
6m52s
48
17m49s
N/A
7m06s
N/A
52m26s
N/A
13m28s
N/A
24m19s
N/A
6m35s
N/A
17m42s
N/A
6m46s
N/A
3 The TLB is used to store 1M pages on ARMv7-A.
0
0
0
0
0
24
8-12
24
16
64
64
16
16
16
64
16
N/A
N/A
N/A
N/A
N/A
N/A
N/A
N/A
2 4K, 2M and 1G pages are shared by the L2 TLB.
Table 4: Execution time for various cache side-channel attacks
when performing 16,000,000 encryption rounds in OpenSSL.
Name
FLUSH + RELOAD
FLUSH + FLUSH
PRIME + PROBE
PRIME + ABORT
XLATE + PROBE
XLATE + ABORT
Time
6.5s
10.0s
11.9s
11.3s
66.6s
60.0s
Success Rate
100.0%
78.8%
91.7%
100.0%
80.0%
90.2%
real-world production applications.
7.4 Cache Defenses
To evaluate the ability of XLATE attacks to bypass state-
of-the-art software-based defenses, we perform the same
experiment as in Section 7.3 but now in presence of state-
of-the-art software-based cache defenses. For this pur-
pose, we consider the different cache defense strategies
discussed in Section 4 and evaluate how PRIME + PROBE
and XLATE + PROBE fare against them.
For this experiment, we simulate a scenario where the
attacker and the victim run in their own isolated secu-
rity domains using page coloring and way partitioning.
The attacker has access to only 8 ways of each cache set.
Since StealthMem uses dedicated cache sets to pin cache
lines, this defense is already subsumed by page coloring.
Without additional assumptions, PRIME + PROBE
would trivially fail in this scenario, since the preliminary
eviction set building step would never complete due to
the cache set and ways restrictions. For a more inter-
esting comparison, we instead assume a much stronger
attacker with an oracle to build arbitrary eviction sets.
To simulate such a scenario, we ﬁrst allow the attacker
Figure 5: Effectiveness comparison of different cache side-
channel attacks using the OpenSSL’s T-table implementation
of AES (16,000,000 encryption rounds per cache line in Te0).
encryptions, an attacker can ﬁnd which pi remains to al-
ways cause a cache hit for the ﬁrst cache line in a T-table.
By extending this attack to cover all 16 cache lines of the
T-table, an attacker can derive the four upper bits for each
byte in secret k, thus revealing 64 bits of the secret key
k. This is sufﬁcient to compare XLATE against state-of-
the-art cache attacks.
For this purpose, we ran a total of 16,000,000 encryp-
tions for each of the cache lines of Te0 and captured the
signal for each cache attack variant. Figure 5 shows that
all the cache attacks we considered, including XLATE +
PROBE and XLATE + ABORT, are able to effectively re-
trieve the signal. Moreover, Table 4 shows the end-to-
end attack execution times, which strongly correlate with
the bandwidth of our covert channels. This experiment
shows that XLATE attacks can effectively complete in
just seconds, conﬁrming they are a realistic threat against
USENIX Association
27th USENIX Security Symposium    947
0326496128160192224256p[0]0x1584c00x1585000x1585400x1585800x1585c00x1586000x1586400x1586800x1586c0Te0offsetFLUSH+RELOAD0326496128160192224256p[0]0x1584c00x1585000x1585400x1585800x1585c00x1586000x1586400x1586800x1586c0Te0offsetPRIME+PROBE0326496128160192224256p[0]0x1584c00x1585000x1585400x1585800x1585c00x1586000x1586400x1586800x1586c0Te0offsetPRIME+ABORT0326496128160192224256p[0]0x1584c00x1585000x1585400x1585800x1585c00x1586000x1586400x1586800x1586c0Te0offsetFLUSH+FLUSH0326496128160192224256p[0]0x1584c00x1585000x1585400x1585800x1585c00x1586000x1586400x1586800x1586c0Te0offsetXLATE+PROBE0326496128160192224256p[0]0x1584c00x1585000x1585400x1585800x1585c00x1586000x1586400x1586800x1586c0Te0offsetXLATE+ABORTFigure 6: PRIME + PROBE and XLATE + PROBE against the
OpenSSL’s T-table implementation of AES in presence of state-
of-the-art software-based cache defenses.
to dynamically build the eviction set for the target in the
victim and then we restrict the eviction set to meet the
constraints of the cache defenses considered. Figure 6
presents our results. As shown in the ﬁgure, both page
coloring and way partitioning disrupt any signal to mount
(even oracle-based) PRIME + PROBE attacks, given that
the eviction set is prevented from sharing cache sets or
ways (respectively) with the victim. In contrast, XLATE
+ PROBE’s MMU trafﬁc is not subject to any of these
restrictions and the clear signal in Figure 6 conﬁrms
XLATE attacks can be used to bypass state-of-the-art
software-based defenses in real-world settings.
8 Mitigations
Even though existing software-based cache defenses are
effective against existing side-channel attacks such as
PRIME + PROBE and PRIME + ABORT, they are not ef-
fective against the XLATE family of attacks. We now
investigate how to generalize existing software-based de-
fenses to mitigate XLATE attacks and indirect cache at-
tacks in general. Our analysis shows that, while some
software-based defenses can be generalized to mitigate
XLATE attacks, most defenses are fundamentally limited
against this threat. In addition, countering future, arbi-
trary indirect cache attacks remains an open challenge
for all existing defenses.
8.1 Mitigating XLATE Attacks
As discussed in Section 4, there are three different strate-
gies to mitigate cache attacks, each with their own
Figure 7: PRIME + PROBE and XLATE + PROBE against
OpenSSL’s AES T-table implementation on our evaluation plat-
form before and after the mitigation of coloring page tables.
software-based implementation. We now reconsider
each software-based defense and discuss possible miti-
gations against XLATE attacks.
We ﬁrst reconsider page coloring [43], a software-
based defense that relies on the mapping of memory
pages to different cache sets to restrict the amount of
page colors available to a security domain. In order to
harden page coloring against the XLATE family of at-
tacks, its design has to be extended to also color the page
tables. By applying the same subset of page colors to
both pages and page table pages on a per-domain basis,
it is impossible for an attacker to control page table pages
outside the assigned security domain.
We show that extending page coloring to also color
the page tables is effective by extending the experiment
presented in Section 7.4. For each attack on OpenSSL,
we compared the PRIME + PROBE and XLATE + PROBE
signals for the baseline, after applying traditional page
coloring, and after applying both page and page table
coloring (full coloring). Figure 7 presents our results,
showing that, unlike traditional page coloring, full color-
ing is effective in mitigating XLATE.
The second defense strategy we consider is the cache
way partitioning scheme implemented by CacheBar [44].
By monitoring page faults, CacheBar tracks the occu-
pancy of each cache set and, once an application is about
to exceed the provided budget, it evicts the least-recently
used page and re-enables page fault-based monitoring.
This strategy imposes a hard limit to the number of en-
tries used for each cache set.
In order to harden this
scheme against the XLATE family of attacks, its design
needs to be extended to monitor MMU-operated page ta-
ble accesses. Unfortunately, monitoring such events is
impractical as it cannot be done via page faults or other
efﬁcient software-based mechanisms, thus leaving this
scheme vulnerable to our attacks.
The third and ﬁnal defense strategy we consider is the
cache pinning scheme implemented by StealthMem [25].
948    27th USENIX Security Symposium
USENIX Association
0326496128160192224256p[0]0x1584c00x1585000x1585400x1585800x1585c00x1586000x1586400x1586800x1586c0Te0offsetPRIME+PROBE(coloring)0326496128160192224256p[0]0x1584c00x1585000x1585400x1585800x1585c00x1586000x1586400x1586800x1586c0Te0offsetXLATE+PROBE(coloring)0326496128160192224256p[0]0x1584c00x1585000x1585400x1585800x1585c00x1586000x1586400x1586800x1586c0Te0offsetPRIME+PROBE(ways)0326496128160192224256p[0]0x1584c00x1585000x1585400x1585800x1585c00x1586000x1586400x1586800x1586c0Te0offsetXLATE+PROBE(ways)0326496128160192224256p[0]0x1584c00x1585000x1585400x1585800x1585c00x1586000x1586400x1586800x1586c0Te0offsetPRIME+PROBE(nocoloring)0326496128160192224256p[0]0x1584c00x1585000x1585400x1585800x1585c00x1586000x1586400x1586800x1586c0Te0offsetPRIME+PROBE(pagecoloring)0326496128160192224256p[0]0x1584c00x1585000x1585400x1585800x1585c00x1586000x1586400x1586800x1586c0Te0offsetPRIME+PROBE(fullcoloring)0326496128160192224256p[0]0x1584c00x1585000x1585400x1585800x1585c00x1586000x1586400x1586800x1586c0Te0offsetXLATE+PROBE(nocoloring)0326496128160192224256p[0]0x1584c00x1585000x1585400x1585800x1585c00x1586000x1586400x1586800x1586c0Te0offsetXLATE+PROBE(pagecoloring)0326496128160192224256p[0]0x1584c00x1585000x1585400x1585800x1585c00x1586000x1586400x1586800x1586c0Te0offsetXLATE+PROBE(fullcoloring)StealthMem dedicates speciﬁc cache sets to host secret
memory pages that should be protected from cache at-
tacks. More speciﬁcally, StealthMem pins these memory
pages to their respective cache sets by monitoring page
faults for pages that map to the same cache set. When
a page fault occurs, StealthMem simply reload the cor-
responding secure pages to preserve cache pinning. In
order to harden this scheme against the XLATE family of
attacks, we again need to monitor MMU accesses to the
page table pages. As mentioned earlier, this is impracti-
cal, leaving this scheme vulnerable to our attacks.
Alternatively, the XLATE family of attacks can be
stopped in hardware by not sharing the data caches be-
tween the CPU and the MMU. While this strategy is ef-
fective, it also negates the advantages of software-based
defenses, essentially implementing strong isolation pro-
vided by hardware-based cache defenses.
8.2 Mitigating Indirect Cache Attacks
While it is possible to mitigate some of the software-
based cache defenses against the XLATE family of at-
tacks, the MMU is hardly the only component that can
be used as a confused deputy in indirect cache attacks.
In fact, there are numerous components both in soft-
ware and hardware, such as the kernel and integrated
GPUs [10] to give a few examples, that could be lever-
aged for indirect cache attacks as well. More speciﬁcally,
any component that interacts with the CPU caches and
that an attacker can get control over could be leveraged
to perform indirect cache attacks. Against such attacks,
existing defenses that assume only CPU-based cache ac-
cesses (which can be intercepted via page faults), such
as CacheBar and StealthMem, are structurally powerless
in the general case. Page coloring is more promising,
but the challenge is coloring all the possible pages that
can be indirectly used by a given security domain with
the corresponding color. Given the increasing number of
software and integrated hardware components on com-
modity platforms, it is hard to pinpoint the full set of
candidates and their interactions. At ﬁrst glance, bypass-
ing this challenge and coloring all the “special pages”
such as page table pages with a reserved “special color”
may seem plausible, but the issue is that the attacker
can then mount indirect cache attacks against the spe-
cial pages of the victim (e.g., MMU-to-MMU attacks)
to leak information. Even more troublesome is the sce-