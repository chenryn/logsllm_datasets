### Description
When integer inputs are passed in to `jax.numpy.divmod`, a division/modulo by
zero results in inconsistent results when compared with `numpy.divmod` or the
Python operators `// and %` as shown below:
**`jax.numpy.divmod`**
    import jax.numpy as jnp
    x1 = jnp.array(3, dtype="int32")
    x2 = jnp.array(0, dtype="int32")
    print(x1)
    print(x2)
    print(jnp.divmod(x1, x2))
_Captured Output:_
    3
    0
    (DeviceArray(-2, dtype=int32), DeviceArray(3, dtype=int32))
whereas with `numpy.divmod`, the output comes out to be:
**`numpy.divmod`**
    import numpy as np
    x1 = np.array(3, dtype="int32")
    x2 = np.array(0, dtype="int32")
    print(x1)
    print(x2)
    print(np.divmod(x1, x2))
_Captured Output:_
    3
    0
    (0, 0)
and with Python's divmod operators:
**`//` and `%`**
    x1 = np.array(3, dtype="int32")
    x2 = np.array(0, dtype="int32")
    print(x1)
    print(x2)
    print((x1//x2, x1%x2))
_Captured Output:_
    3
    0
    (0, 0)
This behaviour does not follow numpy's or python's functional equivalents,
even though the same has been claimed in the documentation. This behaviour is
also reproducible when the above code is ran with `jax.numpy.floor_divide`,
`jax.numpy.divide` or `jax.numpy.mod` methods as those methods probably
delegate to the same API in the backend implementation.
### What jax/jaxlib version are you using?
jax v0.3.14
### Which accelerator(s) are you using?
CPU
### Additional system info
Python (v3.8.10), OS (Linux WSL2 Ubuntu 20.04 LTS)
### NVIDIA GPU info
_No response_