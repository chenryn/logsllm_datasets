In `Deno 1.10.1` using the Plugin Extension API, I get a sporadic `Access
violation` resulting a silent crash.
Attaching the Visual Studio debugger gets me this:
Stack trace
     	plugin.dll!v8::internal::tracing::TraceEventHelper::GetTracingController() Line 20	C++
     	plugin.dll!v8::internal::Heap::DevToolsTraceEventScope::DevToolsTraceEventScope() Line 1526	C++
     	plugin.dll!v8::internal::Heap::CollectGarbage() Line 1558	C++
     	plugin.dll!v8::internal::Heap::AllocateRawWithLightRetrySlowPath() Line 5098	C++
     	plugin.dll!v8::internal::Heap::AllocateRawWithRetryOrFailSlowPath() Line 5113	C++
     	plugin.dll!v8::internal::Factory::AllocateRaw() Line 258	C++
     	plugin.dll!v8::internal::FactoryBase::NewRawOneByteString() Line 561	C++
     	plugin.dll!v8::internal::Factory::NewStringFromUtf8() Line 654	C++
     	plugin.dll!v8::String::NewFromUtf8() Line 6457	C++
     	plugin.dll!v8__String__NewFromUtf8() Line 843	C++
    >	plugin.dll!rusty_v8::string::{{impl}}::new_from_utf8::{{closure}}(rusty_v8::string::{{impl}}::new_from_utf8::closure-0 sd, rusty_v8::scope::data::ScopeData *) Line 104	Unknown
     	plugin.dll!rusty_v8::scope::HandleScope>::cast_local(rusty_v8::string::{{impl}}::new_from_utf8::closure-0 self) Line 224	Unknown
     	plugin.dll!rusty_v8::data::String::new_from_utf8(slice scope, rusty_v8::string::NewStringType new_type) Line 103	Unknown
     	plugin.dll!rusty_v8::data::String::new(str scope) Line 173	Unknown
     	plugin.dll!serde_v8::ser::{{impl}}::serialize_str(serde_v8::ser::Serializer self, str) Line 413	Unknown
     	plugin.dll!serde::ser::impls::{{impl}}::serialize(alloc::string::String * self, serde_v8::ser::Serializer serializer) Line 60	Unknown
     	plugin.dll!serde_v8::ser::{{impl}}::serialize_value(serde_v8::ser::MapSerializer * self, alloc::string::String * value) Line 336	Unknown
     	plugin.dll!serde::ser::SerializeMap::serialize_entry(serde_v8::ser::MapSerializer * self, str value, alloc::string::String *) Line 1823	Unknown
The observation here is that the String in Rust is correct, meaning the data
that is converted to the V8 equivalent is not corrupted.