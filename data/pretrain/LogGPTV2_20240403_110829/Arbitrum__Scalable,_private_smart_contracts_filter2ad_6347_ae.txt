transaction
9A
the
Ethereum
1364    27th USENIX Security Symposium
USENIX Association
is not possible. In Arbitrum, a modiﬁcation to a contract
VM is possible, as long all of the VM’s honest managers
will agree to it.
6.4 Other proposed solutions
We now discuss other proposed solutions for smart con-
tract scalability and/or privacy and compare them with
Arbitrum.
Zero-knowledge proofs. Hawk [18] is a proposed sys-
tem for private smart contracts using zkSNARKs [16,
27]. Hawk has strong privacy goals that include hid-
ing the amounts and transacting parties of monetary
transfers, hiding contract state from non-participants,
and supporting private inputs that are hidden even from
other participants in the contract. However, Hawk suf-
fers several drawbacks that make it infeasible in prac-
tice. Firstly, SNARKs require a per-circuit trusted setup,
which means that for every distinct program that a con-
tract implements, a new trusted setup is required. While
multi-party computation can be used to reduce trust in
the setup, this is infeasible to perform on a per-circuit
basis as is required by Hawk. Secondly, Hawk does not
improve scalability as each contract requires kilobytes of
data to be put on-chain. Finally, privacy in Hawk relies
on trusting a third-party manager who gets to see all the
private data.
Trusted Execution environments (TEEs). Several
proposals [6, 13, 20, 33] would combine blockchains
with trusted execution environments such as Intel SGX.
Ekiden [13] uses a TEE to achieve scalable and private
smart contracts. Whereas Arbitrum hides the code and
state of a smart contract from external parties, Ekiden
hides the state from external parties and also allows par-
ties of a contract to hide private inputs from one another.
The drawback of Ekiden and systems that rely on
TEEs more generally is the additional trust required for
both privacy as well as the correctness of contract exe-
cution. This includes both trusting that the hardware is
executing correctly and privately as well as trusting the
issuer of the attestation keys (e.g., Intel).
Secure Multiparty Computation. Secure multiparty
computation is a cryptographic technique that allows par-
ties to compute functions on private inputs without learn-
ing anything but their output [21]. Several works have
proposed to incorporate secure multiparty computation
onto blockchains [2, 19, 34]. This enables attaching
monetary conditions to the outcome of computations and
incentivizing fairness (by penalizing aborting parties).
Unlike Arbitrum which can make progress even when
nodes go ofﬂine, MPC based systems require the active
(and interactive) participation of all computing nodes.
Even with recent advances in the performance of secure-
multiparty computation, the cryptographic tools impose
a signiﬁcant efﬁciency burden.
Scalability via incentivized veriﬁers. Several propos-
als (e.g., [30, 32]) have separate parties (other than the
miners) perform veriﬁcation of computation, but depend-
ing on how veriﬁers are rewarded, these results may fall
victim to the Participation Dilemma.
The most popular of these systems is TrueBit [30].
Unlike Arbitrum, TrueBit is stateless and not a stan-
dalone system. TrueBit provides a mechanism for an
Ethereum contract to outsource computation and receive
the result at a cost to the contract that is lower than
Ethereum’s gas price.
In TrueBit, third-party Solvers
perform computational tasks and their work is checked
by third-party Veriﬁers (which play a different role than
Arbitrum veriﬁers). TrueBit Veriﬁers can dispute the re-
sults given by the Solver, and disputes are settled via a
challenge-response protocol similar to the one used in
Arbitrum.
TrueBit attempts to achieve global correctness by in-
centivizing TrueBit Veriﬁers to check computation and
challenge incorrect assertions. To participate, TrueBit
Veriﬁers must put down a deposit, which they will lose if
they falsely report an error. In order to incentivize veri-
ﬁers to participate, the TrueBit protocol occasionally in-
troduces deliberate errors and TrueBit Veriﬁers collect
rewards for ﬁnding them.
If m TrueBit Veriﬁers ﬁnd the same error, they split
the reward using a function of the form fc(m) = c· 2−m.
As shown in Section 2.3, this is One-Shot Sybil-Proof.
However, since it is a participation game, they are sus-
ceptible to the Participation Dilemma, and by Theorem
1, TrueBit admits an equilibrium in which there is only
a single TrueBit Veriﬁer (using multiple Sybils), and if
this occurs, this veriﬁer can cheat at will.
Although they don’t formally analyze it, TrueBit ac-
knowledges this type of attack and proposes some ad-hoc
defenses. First, they assume that a single veriﬁer will not
have enough money to make the deposits needed to suc-
cessfully bully out all other veriﬁers. While this assump-
tion may be helpful, it is not clear that it holds, and in
particular multiple adversaries could pool their funds to
launch this attack. (Note that an attacker would not for-
feit these funds in order to execute this attack, but would
just need to have them on hand.)
Even if the assumption does hold, it is still possible
for an adversary to bully out all other veriﬁers from a
particular contract by verifying the contract with multi-
ple Sybils. To defend against this, TrueBit proposes a
“default strategy” in which veriﬁers choose at random
which task to verify, and do not take into account the
USENIX Association
27th USENIX Security Symposium    1365
number of veriﬁers to previously verify a contract. This
proposal is problematic, however, as the default strategy
is dominated: instead of choosing where to verify ran-
domly, a veriﬁer is better off if it chooses the tasks with
fewer additional veriﬁers. Not only is following the “de-
fault strategy” not an equilibrium, but is dominated by a
better strategy, no matter what the others do.
TrueBit also does not provide privacy as it allows any-
body to join the system as a veriﬁer, and thus anybody
must be able to learn the full state of any VM.
Another key difference between TrueBit and Arbitrum
is that in TrueBit, the cost for computation is linear in the
number of steps executed. For every computational task
performed in TrueBit, the party must pay a tax to fund the
solving and veriﬁcation of that task. The TrueBit paper
estimates that this tax is between 500%-5000% of the ac-
tual cost of the computation. Although the cost of com-
putation in TrueBit is lower than the cost in Ethereum, it
still suffers from a linear cost.
TrueBit proposes to use Web Assembly for the VM
architecture. However, unlike the Arbitrum Virtual Ma-
chine which ensures that one-step proofs will be of small
constant size, Web Assembly has no such guarantee.
Plasma. Plasma [28] attempts to achieve scaling on
top of Ethereum by introducing the concept of child-
chains. Child-chains use their own consensus mecha-
nism to choose which transactions to publish. This con-
sensus mechanism enforces rules which are encoded in
a smart contract placed in Ethereum.
If a user on the
child-chain believes that the child-chain has behaved in-
correctly or maliciously, they can submit a fraud proof to
the contract on the main chain in order to exit the child-
chain with their funds.
This approach suffers from a number of problems.
Firstly, similarly to sharding, Plasma child-chains each
exist in their own isolated world, so interaction between
people on different child-chains is cumbersome. Sec-
ondly, the details of how complex fraud proofs could ac-
tually be constructed inside a Plasma contract are lack-
ing. Plasma contracts need to somehow specify all of the
consensus rules and ways to prove fraud on a newly de-
ﬁned blockchain which is a complex and currently un-
solved problem inside an Ethereum contract. Finally,
moving data out of the main blockchain creates data
availability challenges since in order to generate a fraud
proof you must have access to the data in a Plasma block
and there is no guaranteed mechanism for accessing this
data. Because of this issue, Plasma includes many miti-
gations which involve users exiting a Plasma blockchain
if anything goes wrong.
Due to the complexities of implementing Plasma
child-chains with smart contract capabilities
like
Ethereum, all current efforts to implement Plasma use
simple UTxO based systems without scripting in order
allow simple proofs. Plasma proposes using TrueBit
as a sub-component for efﬁcient fraud proofs in child
chains with smart contracts, but as mentioned TrueBit
uses an off-the-shelf VM which does not give guarantees
on proof size or efﬁciency. Indeed, Plasma may beneﬁt
from using the Arbitrum Virtual Machine.
State Channels. State channels are a general class of
techniques which improve the scalability of smart con-
tracts between a small ﬁxed set of participants. Previous
state channel research [5, 14, 15, 25] has mainly focused
on a different type of scaling than Arbitrum has achieved.
Arbitrum allows on-chain transactions with a very large
amount of computation and state, with low cost. State
channels allow a set of parties to mutually agree to a se-
quence of messages off-chain and only post a single ag-
gregate transaction after processing them all.
State channel constructions focus on the optimistic
case where all parties are honest and available, but fail to
work smoothly and efﬁciently in other situations. Specif-
ically, state channels must be prepared to resolve on-
chain if any member of the channel refuses or is unable
to continue participating. This on-chain resolution mech-
anism requires the execution of an entire state transition
on-chain. Thus, state channels are limited to only doing
computation that the parties could afford to do on-chain,
since otherwise dispute resolution will be infeasible. Ar-
bitrum is still efﬁcient even if managers are not all active
at all times, or if there are disputes.
7 Conclusion
We have presented Arbitrum, a new platform for smart
contracts with signiﬁcantly better scalability and privacy
than previous solutions. Our solution is consensus ag-
nostic and is pluggable with any existing mechanism for
achieving consensus over a blockchain. Arbitrum is ele-
gant in its simplicity, and its straightforward and intuitive
incentive structure avoids many pitfalls that affect other
proposed systems.
Arbitrum creates incentives for parties to agree off-
chain on what smart contract VMs will do, and even if
parties act contrary to incentives the cost to miners or
other veriﬁers is low. Arbitrum additionally uses a virtual
machine architecture that is custom-designed to reduce
the cost of on-chain dispute resolution. Moving the en-
forcement of VM behavior mostly off-chain, and reduc-
ing the cost of on-chain resolution, leads to Arbitrum’s
advantages in scalability and privacy.
1366    27th USENIX Security Symposium
USENIX Association
8 Acknowledgements
Steven Goldfeder is supported by an NSF Graduate
Research Fellowship under grant DGE 1148900. S.
Matthew Weinberg is supported by NSF grant CCF-
1717899.
References
[1] Counterparty
protocol
speciﬁcation.
https:
//counterparty.io/docs/protocol_
specification/, accessed: 2018-01-01
[2] Andrychowicz, M., Dziembowski, S., Malinowski,
D., Mazurek, L.: Secure multiparty computations
on bitcoin. In: Security and Privacy (SP), 2014
IEEE Symposium on
[3] Banasik, W., Dziembowski, S., Malinowski, D.:
Efﬁcient zero-knowledge contingent payments in
cryptocurrencies without scripts. In: European
Symposium on Research in Computer Security. pp.
261–280. Springer (2016)
[4] Ben-Sasson, E., Chiesa, A., Genkin, D., Tromer, E.,
Virza, M.: SNARKs for C: Verifying program exe-
cutions succinctly and in zero knowledge. In: Ad-
vances in Cryptology–CRYPTO 2013, pp. 90–108.
Springer (2013)
[5] Bentov, I., Kumaresan, R., Miller, A.:
Instanta-
neous decentralized poker. In: International Con-
ference on the Theory and Application of Cryp-
tology and Information Security. pp. 410–440.
Springer (2017)
[6] Brandenburger, M., Cachin, C., Kapitza, R.,
Sorniotti, A.: Blockchain and trusted computing:
Problems, pitfalls, and a solution for hyperledger
fabric. arXiv preprint arXiv:1805.08541 (2018)
[7] B¨unz, B., Bootle, J., Boneh, D., Poelstra, A.,
Wuille, P., Maxwell, G.: Bulletproofs: Efﬁcient
range proofs for conﬁdential transactions. Tech.
rep.
[8] Bunz, B., Goldfeder, S., Bonneau, J.: Proofs-of-
delay and randomness beacons in Ethereum. In:
Proceedings of the 1st IEEE Security & Privacy on
the Blockchain Workshop (April 2017)
[9] Campanelli, M., Gennaro, R., Goldfeder, S., Niz-
zardo, L.: Zero-knowledge contingent payments re-
visited: Attacks and payments for services. In: Pro-
ceedings of the 2017 ACM SIGSAC Conference on
Computer and Communications Security. pp. 229–
243. ACM (2017)
[10] Canetti, R., Riva, B., Rothblum, G.N.: Practical
delegation of computation using multiple servers.
In: Proceedings of the 18th ACM conference on
Computer and communications security. pp. 445–
454. ACM (2011)
[11] Canetti, R., Riva, B., Rothblum, G.N.: Refereed
delegation of computation. Information and Com-
putation 226, 16–36 (2013)
[12] Charlon, F.: Open assets protocol (oap/1.0). On-
https://github.com/OpenAssets/open-assets-
line,
protocol/blob/master/speciﬁcation.mediawiki
(2013)
[13] Cheng, R., Zhang, F., Kos, J., He, W., Hynes,
N., Johnson, N., Juels, A., Miller, A., Song, D.:
Ekiden: A platform for conﬁdentiality-preserving,
trustworthy, and performant smart contract execu-
tion. arXiv preprint arXiv:1804.05141 (2018)
[14] Coleman, J.: State channels (2015)
[15] Dziembowski, S., Eckey, L., Faust, S., Malinowski,
D.: Perun: Virtual payment channels over cryp-
tographic currencies. Tech. rep., IACR Cryptology
ePrint Archive, 2017: 635 (2017)
[16] Gennaro, R., Gentry, C., Parno, B., Raykova,
M.: Quadratic span programs and succinct nizks
without pcps. In: Annual International Conference
on the Theory and Applications of Cryptographic
Techniques. Springer (2013)
[17] Goldwasser, S., Kalai, Y.T., Rothblum, G.N.: Dele-
gating computation: interactive proofs for muggles.
In: Proceedings of the fortieth annual ACM sympo-
sium on Theory of computing. pp. 113–122. ACM
(2008)