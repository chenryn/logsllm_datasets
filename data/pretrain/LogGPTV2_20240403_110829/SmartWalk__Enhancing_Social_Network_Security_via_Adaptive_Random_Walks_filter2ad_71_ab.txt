to each other in a social network, resulting in a mostly ho-
mogeneous random walk length. However, the existence of
some small communities that are poorly connected to the
rest of the network can greatly prolong the time to approach
stationarity. This heterogeneity property is not fully utilized
in the design of current social network based security sys-
tems. Hence, by adaptively choosing the walk length for
diﬀerent nodes, we are able to signiﬁcantly reduce the num-
ber of uncessarily long random walks and improve system
security.
System architecture. Fig.
1 shows the overall ar-
chitecture of the SmartWalk system, which reads a social
graph and produces adaptive random walks upon requests
from social network based security systems. Speciﬁcally, the
SmartWalk system consists of two components: the local
mixing time prediction algorithm and the random walk us-
age model. Given a node index, the prediction algorithm
employs supervised learning techniques to predict the local
mixing time of the given node based on its local features and
some limited global knowledge of the graph. The random
walk usage model is responsible for generating adaptive ran-
dom walks, which are later leveraged in the security systems,
based on the results from the prediction algorithm.
The usage model implements either the node-adaptive al-
gorithm or the path-adaptive algorithm. In other words, we
can simply make the walk length speciﬁc to a starting node,
or alternatively, modify the walk length every time a follow-
up hop is taken as the path is extended. The node-adaptive
scheme only needs the predicted length of the starting node,
but fail to take into account the structrual features of the
intermidate nodes. The path-adaptive scheme signiﬁcantly
reduces unnecessarily long walks by dynamically updating
the number of remaining hops every time the walk reaches a
new node, but consequently requires more prediction inputs.
The SmartWalk system substitutes the ﬁxed-length ran-
dom walks in the security applications with adaptive ran-
Figure 1: SmartWalk system architecture.
dom walks to achieve ﬁne-grained control over the trade-oﬀ
between security/privacy and other metrics.
3. LOCAL MIXING TIME
Network model. We model a social network by a ﬁnite
undirected connected graph G with node set V and edge
set E 2.
In pratice, the nodes in V can be the users of
a Facebook social graph, and the edges in E can be the
frienship relationships between Facebook users represented
by the endpoints of these edges. The size of the graph G is
n = |V | and the number of edges in G is m = |E|.
Consider a random walk of length k on G: it starts from
3, and if it is at some node vt at the t-th hop, the
node v0
probability of moving to each neighbor of vt is 1/deg(vt),
where deg(·) is the node degree. After k hops, it arrives at
the terminal node vk. The sequence of random walk nodes
{vt}k
t=0 forms a Markov chain with a transition probability
matrix P = [pij], where i, j ∈ V and the (i, j)th entry in P
is given by
deg(i) ,
0,
if (i, j) ∈ E,
otherwise.
(cid:26) 1
pij =
Denote the probability distribution of the t-th node with the
starting node i by πi(t), which is a row vector in Rn. The
random walk is thus characterized by πi(t + 1) = πi(t)· P . It
follows that πi(t) = πi(0) · P t. For a random walk of length
k starting from node i, it ﬁnally reaches the distribution
πi(k). For irreducible and aperiodic graphs, the correspond-
ing Markov chain is ergodic. In this case, for any starting
node i, as walk length k → ∞, the distribution πi(k) con-
verges to a unique stationary distribution π, which satisﬁes
π = πP .
For undirected and connected graphs, it has been proven
i=1 satisﬁes π = πP , and is the
that the distribution [ deg(i)
unique stationary distribution of random walks [25].
2m ]n
Local mixing time. Below we introduce a new concept
local mixing time (parameterized by ) which measures the
minimal length required for a random walk starting from
node i to be within an -distance to the stationarity.
Definition 1
(Local Mixing Time). The local mix-
ing time (parameterized by ) of a Markov chain with an
initial distribution concentrated at node i is deﬁned as
Ti() = min{t : |π − πi(0)P t|1  0 is an arbitrary small
constant value, and | · |1 is the total variation distance. 4
 is an application-speciﬁc parameter, and smaller  indi-
cates stronger convergence. Then the conventional mixing
time T () of graph G can be obtained by ﬁnding the max-
imum local mixing time over all nodes in G, i.e., T () =
max{Ti(),
i ∈ V } [36]. Note that even for a single node,
the computation of its local mixing time requires the knowl-
edge of the entire social graph.
Given a node i, denote the set of its neighboring nodes as
N (i). It can be proven that the local mixing time of node
i atisﬁes Ti() ≤ max{Tj(), j ∈ N (i)} + 1. The proof is
deferred in Appendix A.
Evaluation:
local mixing time in social graphs. We
use 10 various large-scale real-world social network topolo-
gies that mainly come from the Stanford Large Network
Dataset Collection [23] and other sources [45] to evaluate
the local mixing time for nodes in social graphs. The used
datasets are listed in Table 1. Since the local mixing time is
deﬁned for undirected and connected graphs, we ﬁrst convert
the directed graphs to undirected by preserving only bidirec-
tional edges 5. Then, we extract the largest connected com-
ponent from each graph to compute the local mixing time.
In Table 1 we show some statistics of the social datasets
6 including the numbers of nodes and edges, average node
degree ¯d and the average clustering coeﬃcient ¯cc.
Fig.
2a depicts the Cumulative Distribution Function
(CDF) of local mixing time for every node in the Facebook1,
Facebook2, Twitter, Epinions and DBLP datasets, with pa-
rameter  = 0.25 7. The local mixing time is computed for
every node in a social dataset, using brute force. From Fig.
2a, we can see that over 80% Facebook1 nodes have a small
local mixing time (less than 20), whereas the rest nodes (less
than 20%) have a larger local mixing time (with the maxi-
mum value around 90). For Twitter, over 80% of its nodes
have a local mixing time below 100 while the rest nodes
may reach 400. Similar results are observed for other three
datasets. Based on Fig. 2a, we conclude that the distri-
bution of local mixing time over nodes has a heterogeneous
and long-tail property.
Fig. 2b illustrates the CDF of the local mixing time for
a random sample of 5% nodes in each of the ten datasets
in Table 1. For Facebook1, Facebook2, Twitter, Epinions
and DBLP, they have similar results in Fig. 2a and Fig. 2b,
which implies that a random sample of 5% nodes are suﬃ-
cient to demonstrate the basic property of the local mixing
time CDF for all nodes. Hence, the heterogeneous and long-
tail property exists for all the ten datasets – a large portion
of their nodes have much faster local mixing time than the
4The total variation distance between two probability mea-
sures θ1 and θ2 on a sigma-algebra F of subsets of the sample
space Ω is deﬁned via |θ1, θ2)|1 = supA∈F |θ1(A) − θ2(A)|
[10].
5In most security and privacy systems that leverage social
trust, bidirectional links between users are considered as an
indicator for stronger trust than unidirectional ones.
6Facebook1 is a Facebook friendship (user-to-user link) net-
work at the New Orleans area and Facebook2 is a Facebook
interaction (wall post) network at the New Orleans area.
7The variation distance parameter  is typically set as 0.25
[25]. Setting  to be other values gives similar results.
Table 1: Datasets and their properties
Datasets
Facebook1[45]
Facebook2[45]
Google+[23]
Twitter[23]
Epinions[23]
LiveJournal[23]
Pokec[23]
DBLP[23]
Youtube[23]
Flickr[23]
Nodes
63,392
43,953
107,614
81,306
75,877
4,843,953
1,632,803
317,080
1,134,890
80,513
Edges
816,886
182,384
12,238,285
1,342,296
405,739
42,845,684
22,301,964
1,049,866
2,987,624
5,899,882
¯d
25.8
8.5
227.4
33.0
10.7
17.8
27.3
6.6
5.3
146.6
¯cc
0.22
0.11
0.5
0.6
0.14
0.27
0.11
0.63
0.08
0.16
rest, which implies that the required length of random walks
to approach the stationarity is heterogeneous across nodes.
Even though a small number of nodes may need a long ran-
dom walk, most nodes only need a relatively small random
walk length to reach the stationary distribution. However,
the classical paradigm only considers random walks of a ﬁxed
length for all nodes. As a result, every node performs long
random walks to meet the application requirement, which is
in fact unnecessary and ineﬃcient for a majority of nodes
based on our observation. Furthermore, the mixing time of
the datasets in Table 1 is generally greater than O(log n),
validating the observation of Mohaisen et al. [36]: the worst-
case mixing time of real-world social networks is much larger
than expected and being used in literature. Hence, we are
interested in predicting the local mixing time for any given
node in social graphs and proposing usage models of adap-
tive random walks to utilize the heterogeneity.
4. SMARTWALK: PREDICTION
In this section, we apply a set of supervised machine learn-
ing techniques to predict the local mixing time for any given
node in a social graph.
Goals. Since it requires the global information of a so-
cial network to compute the exact local mixing time for a
given node (recall Deﬁnition 1), it is infeasible for decentral-
ized social network based systems such as SybilLimit [51]
to get the metric directly (for all nodes). Even for the case
with global information accessible, it is computationally ex-
pensive and time consuming for large-scale networks to cal-
culate the exact local mixing time (with the complexity of
O(n2.3729T ())) [46]. Therefore, we are interested in propos-
ing a fast and distributed algorithm to estimate the local
mixing time given a speciﬁc node. Based on supervised ma-
chine learning techniques, our algorithm only leverages local
characteristics of nodes and limited knowledge of the local
mixing time for a small subset of nodes. Speciﬁcally, we ﬁrst
compute the local mixing time for a small subset of nodes
and use it as training labels to ﬁt a regression model. Then,
the model is used to predict the local mixing time for any
given node in a social graph.
Features & Prediction. Given node i, we aim to pre-
dict its local mixing time only based on the local charac-
teristics within its k-hop neighborhood (k is relatively small
compared to T ()). We show the prediction algorithm in
Algorithm 1. In Algorithm 1, we choose the probability dis-
tribution of a k-hop random walk from node i, denoted by
πi(k), as the features. The intuition is that the random walk
length of a node is mainly determined by its neighbors, and
(a)
(b)
(c)