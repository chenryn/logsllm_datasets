func (Value) InterfaceData() [2]uintptr // (index 1)
unsafe.Pointer 464
gopl
13.3. 示例: 深度相等判断
来自reflect包的DeepEqual函数可以对两个值进行深度相等判断。DeepEqual函数使用内建的
==比较操作符对基础类型进行相等判断，对于复合类型则递归该变量的每个基础类型然后做
类似的比较判断。因为它可以工作在任意的类型上，甚至对于一些不支持==操作运算符的类
型也可以工作，因此在一些测试代码中广泛地使用该函数。比如下面的代码是用DeepEqual
函数比较两个字符串数组是否相等。
func TestSplit(t *testing.T) {
got := strings.Split("a:b:c", ":")
want := []string{"a", "b", "c"};
if !reflect.DeepEqual(got, want) { /* ... */ }
}
尽管DeepEqual函数很方便，而且可以支持任意的数据类型，但是它也有不足之处。例如，
它将一个nil值的map和非nil值但是空的map视作不相等，同样nil值的slice 和非nil但是空的
slice也视作不相等。
var a, b []string = nil, []string{}
fmt.Println(reflect.DeepEqual(a, b)) // "false"
var c, d map[string]int = nil, make(map[string]int)
fmt.Println(reflect.DeepEqual(c, d)) // "false"
我们希望在这里实现一个自己的Equal函数，用于比较类型的值。和DeepEqual函数类似的地
方是它也是基于slice和map的每个元素进行递归比较，不同之处是它将nil值的slice（map类
似）和非nil值但是空的slice视作相等的值。基础部分的比较可以基于reflect包完成，和12.3章
的Display函数的实现方法类似。同样，我们也定义了一个内部函数equal，用于内部的递归比
较。读者目前不用关心seen参数的具体含义。对于每一对需要比较的x和y，equal函数首先检
测它们是否都有效（或都无效），然后检测它们是否是相同的类型。剩下的部分是一个巨大
的switch分支，用于相同基础类型的元素比较。因为页面空间的限制，我们省略了一些相似的
分支。
gopl.io/ch13/equal
示例: 深度相等判断 465
gopl
func equal(x, y reflect.Value, seen map[comparison]bool) bool {
if !x.IsValid() || !y.IsValid() {
return x.IsValid() == y.IsValid()
}
if x.Type() != y.Type() {
return false
}
// ...cycle check omitted (shown later)...
switch x.Kind() {
case reflect.Bool:
return x.Bool() == y.Bool()
case reflect.String:
return x.String() == y.String()
// ...numeric cases omitted for brevity...
case reflect.Chan, reflect.UnsafePointer, reflect.Func:
return x.Pointer() == y.Pointer()
case reflect.Ptr, reflect.Interface:
return equal(x.Elem(), y.Elem(), seen)
case reflect.Array, reflect.Slice:
if x.Len() != y.Len() {
return false
}
for i := 0; i  b -> a and c -> c.
type link struct {
value string
tail *link
}
a, b, c := &link{value: "a"}, &link{value: "b"}, &link{value: "c"}
a.tail, b.tail, c.tail = b, a, c
fmt.Println(Equal(a, a)) // "true"
fmt.Println(Equal(b, b)) // "true"
fmt.Println(Equal(c, c)) // "true"
fmt.Println(Equal(a, b)) // "false"
fmt.Println(Equal(a, c)) // "false"
练习 13.1： 定义一个深比较函数，对于十亿以内的数字比较，忽略类型差异。
练习 13.2： 编写一个函数，报告其参数是否为循环数据结构。
示例: 深度相等判断 468
gopl
13.4. 通过cgo调用C代码
Go程序可能会遇到要访问C语言的某些硬件驱动函数的场景，或者是从一个C++语言实现的
嵌入式数据库查询记录的场景，或者是使用Fortran语言实现的一些线性代数库的场景。C语
言作为一个通用语言，很多库会选择提供一个C兼容的API，然后用其他不同的编程语言实现
（译者：Go语言需要也应该拥抱这些巨大的代码遗产）。
在本节中，我们将构建一个简易的数据压缩程序，使用了一个Go语言自带的叫cgo的用于支
援C语言函数调用的工具。这类工具一般被称为 foreign-function interfaces （简称ffi）, 并且
在类似工具中cgo也不是唯一的。SWIG（ http://swig.org ）是另一个类似的且被广泛使用的
工具，SWIG提供了很多复杂特性以支援C++的特性，但SWIG并不是我们要讨论的主题。
在标准库的 子包有很多流行的压缩算法的编码和解码实现，包括流行的LZW压
compress/...
缩算法（Unix的compress命令用的算法）和DEFLATE压缩算法（GNU gzip命令用的算
法）。这些包的API的细节虽然有些差异，但是它们都提供了针对 io.Writer类型输出的压缩接
口和提供了针对io.Reader类型输入的解压缩接口。例如：
package gzip // compress/gzip
func NewWriter(w io.Writer) io.WriteCloser
func NewReader(r io.Reader) (io.ReadCloser, error)
bzip2压缩算法，是基于优雅的Burrows-Wheeler变换算法，运行速度比gzip要慢，但是可以
提供更高的压缩比。标准库的compress/bzip2包目前还没有提供bzip2压缩算法的实现。完全
从头开始实现一个压缩算法是一件繁琐的工作，而且 http://bzip.org 已经有现成的libbzip2的
开源实现，不仅文档齐全而且性能又好。
如果是比较小的C语言库，我们完全可以用纯Go语言重新实现一遍。如果我们对性能也没有
特殊要求的话，我们还可以用os/exec包的方法将C编写的应用程序作为一个子进程运行。只
有当你需要使用复杂而且性能更高的底层C接口时，就是使用cgo的场景了（译注：用os/exec
包调用子进程的方法会导致程序运行时依赖那个应用程序）。下面我们将通过一个例子讲述
cgo的具体用法。
译注：本章采用的代码都是最新的。因为之前已经出版的书中包含的代码只能在Go1.5之前使
用。从Go1.6开始，Go语言已经明确规定了哪些Go语言指针可以直接传入C语言函数。新代
码重点是增加了bz2alloc和bz2free的两个函数，用于bz_stream对象空间的申请和释放操作。
下面是新代码中增加的注释，说明这个问题：
通过cgo调用C代码 469
gopl
// The version of this program that appeared in the first and second
// printings did not comply with the proposed rules for passing
// pointers between Go and C, described here:
// https://github.com/golang/proposal/blob/master/design/12416-cgo-pointers.md
//
// The rules forbid a C function like bz2compress from storing 'in'
// and 'out' (pointers to variables allocated by Go) into the Go
// variable 's', even temporarily.
//
// The version below, which appears in the third printing, has been
// corrected. To comply with the rules, the bz_stream variable must
// be allocated by C code. We have introduced two C functions,
// bz2alloc and bz2free, to allocate and free instances of the
// bz_stream type. Also, we have changed bz2compress so that before
// it returns, it clears the fields of the bz_stream that contain
// pointers to Go variables.
要使用libbzip2，我们需要先构建一个bz_stream结构体，用于保持输入和输出缓存。然后有
三个函数：BZ2_bzCompressInit用于初始化缓存，BZ2_bzCompress用于将输入缓存的数据
压缩到输出缓存，BZ2_bzCompressEnd用于释放不需要的缓存。（目前不要担心包的具体结
构, 这个例子的目的就是演示各个部分如何组合在一起的。）
我们可以在Go代码中直接调用BZ2_bzCompressInit和BZ2_bzCompressEnd，但是对于
BZ2_bzCompress，我们将定义一个C语言的包装函数，用它完成真正的工作。下面是C代
码，对应一个独立的文件。
gopl.io/ch13/bzip
/* This file is gopl.io/ch13/bzip/bzip2.c, */
/* a simple wrapper for libbzip2 suitable for cgo. */
#include 
int bz2compress(bz_stream *s, int action,
char *in, unsigned *inlen, char *out, unsigned *outlen) {
s->next_in = in;
s->avail_in = *inlen;
s->next_out = out;
s->avail_out = *outlen;
int r = BZ2_bzCompress(s, action);
*inlen -= s->avail_in;
*outlen -= s->avail_out;
s->next_in = s->next_out = NULL;
return r;
}
现在让我们转到Go语言部分，第一部分如下所示。其中 的语句是比较特别的。其
import "C"
实并没有一个叫C的包，但是这行语句会让Go编译程序在编译之前先运行cgo工具。
通过cgo调用C代码 470
gopl
// Package bzip provides a writer that uses bzip2 compression (bzip.org).
package bzip
/*
#cgo CFLAGS: -I/usr/include
#cgo LDFLAGS: -L/usr/lib -lbz2
#include 
#include 
bz_stream* bz2alloc() { return calloc(1, sizeof(bz_stream)); }
int bz2compress(bz_stream *s, int action,
char *in, unsigned *inlen, char *out, unsigned *outlen);
void bz2free(bz_stream* s) { free(s); }
*/
import "C"
import (
"io"
"unsafe"
)
type writer struct {
w io.Writer // underlying output stream
stream *C.bz_stream
outbuf [64 * 1024]byte
}
// NewWriter returns a writer for bzip2-compressed streams.
func NewWriter(out io.Writer) io.WriteCloser {
const blockSize = 9
const verbosity = 0
const workFactor = 30
w := &writer{w: out, stream: C.bz2alloc()}
C.BZ2_bzCompressInit(w.stream, blockSize, verbosity, workFactor)
return w
}
在预处理过程中，cgo工具生成一个临时包用于包含所有在Go语言中访问的C语言的函数或类
型。例如C.bz_stream和C.BZ2_bzCompressInit。cgo工具通过以某种特殊的方式调用本地的
C编译器来发现在Go源文件导入声明前的注释中包含的C头文件中的内容（译注：
import
语句前紧挨着的注释是对应cgo的特殊语法，对应必要的构建参数选项和C语言代码）。
"C"
在cgo注释中还可以包含#cgo指令，用于给C语言工具链指定特殊的参数。例如CFLAGS和
LDFLAGS分别对应传给C语言编译器的编译参数和链接器参数，使它们可以从特定目录找到
bzlib.h头文件和libbz2.a库文件。这个例子假设你已经在/usr目录成功安装了bzip2库。如果
bzip2库是安装在不同的位置，你需要更新这些参数（译注：这里有一个从纯C代码生成的cgo
绑定，不依赖bzip2静态库和操作系统的具体环境，具体请访问