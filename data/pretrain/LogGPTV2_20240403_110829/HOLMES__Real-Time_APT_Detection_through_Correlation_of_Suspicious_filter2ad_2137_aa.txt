title:HOLMES: Real-Time APT Detection through Correlation of Suspicious
Information Flows
author:Sadegh Momeni Milajerdi and
Rigel Gjomemo and
Birhanu Eshete and
R. Sekar and
V. N. Venkatakrishnan
(cid:19)(cid:17)(cid:18)(cid:26)(cid:1)(cid:42)(cid:38)(cid:38)(cid:38)(cid:1)(cid:52)(cid:90)(cid:78)(cid:81)(cid:80)(cid:84)(cid:74)(cid:86)(cid:78)(cid:1)(cid:80)(cid:79)(cid:1)(cid:52)(cid:70)(cid:68)(cid:86)(cid:83)(cid:74)(cid:85)(cid:90)(cid:1)(cid:66)(cid:79)(cid:69)(cid:1)(cid:49)(cid:83)(cid:74)(cid:87)(cid:66)(cid:68)(cid:90)
HOLMES: Real-time APT Detection through Correlation
of Suspicious Information Flows
Sadegh M. Milajerdi‚àó, Rigel Gjomemo‚àó, Birhanu Eshete‚Ä†,1, R. Sekar‚Ä°, V.N. Venkatakrishnan‚àó
‚àó
University of Illinois at Chicago
{smomen2,rgjome1,venkat}@uic.edu
‚Ä°
Stony Brook University
PI:EMAIL
University of Michigan-Dearborn
PI:EMAIL
‚Ä†
Abstract‚ÄîIn this paper, we present HOLMES, a system that
implements a new approach to the detection of Advanced and
Persistent Threats (APTs). HOLMES is inspired by several case
studies of real-world APTs that highlight some common goals
of APT actors. In a nutshell, HOLMES aims to produce a
detection signal that indicates the presence of a coordinated
set of activities that are part of an APT campaign. One of the
main challenges addressed by our approach involves developing
a suite of techniques that make the detection signal robust and
reliable. At a high-level, the techniques we develop effectively
leverage the correlation between suspicious information Ô¨Çows that
arise during an attacker campaign. In addition to its detection
capability, HOLMES is also able to generate a high-level graph that
summarizes the attacker‚Äôs actions in real-time. This graph can be
used by an analyst for an effective cyber response. An evaluation
of our approach against some real-world APTs indicates that
HOLMES can detect APT campaigns with high precision and low
false alarm rate. The compact high-level graphs produced by
HOLMES effectively summarizes an ongoing attack campaign and
can assist real-time cyber-response operations.
I.
INTRODUCTION
In one of the Ô¨Årst ever detailed reports on Advanced and
Persistent Threats (entitled APT1 [8]), the security Ô¨Årm Mandi-
ant disclosed the goals and activities of a global APT actor. The
activities included stealing of hundreds of terabytes of sensitive
data (including business plans, technology blueprints, and test
results) from at least 141 organizations across a diverse set of
industries. They estimated the average duration of persistence
of malware in the targeted organizations to be 365 days. Since
then,
there has been a growing list of documented APTs
involving powerful actors, including nation-state actors, on the
global scene.
Understanding the motivations and operations of the APT
actors plays a vital role in the challenge of addressing these
threats. To further this understanding, the Mandiant report
also offered an APT lifecycle model (Fig. 1), also known
as the kill-chain,
that allows one to gain perspective on
how the APT steps collectively achieve their actors‚Äô goals.
A typical APT attack consists of a successful penetration
(e.g., a drive-by-download or a spear-phishing attack), re-
connaissance, command and control (C&C) communication
(sometimes using Remote Access Trojans (RATs)), privilege
escalation (by exploiting vulnerabilities),
lateral movement
through the network, exÔ¨Åltration of conÔ¨Ådential information,
and so on. In short, the kill-chain provides a reference to
understand and map the motivations, targets, and actions of
APT actors.
1The third author performed this work as a postdoctoral associate at the
University of Illinois at Chicago.
		



 
	
	
	

	


		




	





Fig. 1. APT Lifecycle.
APTs have grown in sophistication since the publication
of the Ô¨Årst Mandiant report. The details of various exploits
used have varied over the years, but the high-level steps have
remained mostly the same. While surveying about 300 APT
reports [3], we observed that
‚Ä¢ the goal of an APT actor is either to obtain and exÔ¨Åltrate
highly conÔ¨Ådential information, e.g., source code of spe-
ciÔ¨Åc proprietary technology; or to damage the victim by
compromising high-integrity resources, e.g., PLCs com-
promised in the Stuxnet worm, and
is accomplished primarily through steps that
conform to the kill-chain shown in Fig. 1.
Existing IDS/IPS systems in an enterprise may detect
and produce alerts for suspicious events on a host. However,
combining these low-level alerts to derive a high-level picture
of an ongoing APT campaign remains a major challenge.
‚Ä¢ this goal
State of the art. Today, alert correlation is typically per-
formed using Security Information and Event Management
(SIEM) systems such as Splunk [10], LogRhythm [7] and IBM
QRadar [6]. These systems collect log events and alerts from
multiple sources and correlate them. Such correlation often
makes use of readily available indicators, such as timestamps
for instance. These correlation methods are useful, but they
often lack (a) an understanding of the complex relationships
that exist between alerts and actual intrusion instances and (b)
the precision needed to piece together attack steps that take
place on different hosts over long periods of time (weeks, or
in some cases, months).
Problem Statement. The main problem tackled in this paper
is to detect an ongoing APT campaign (that consists of many
disparate steps across many hosts over a long period of time)
in real-time and provide a high-level explanation of the attack
scenario to an analyst, based on host logs and IPS alerts from
the enterprise.
There are three main aspects to this problem, and they are
as follows:
(cid:165)(cid:1)(cid:19)(cid:17)(cid:18)(cid:26)(cid:13)(cid:1)(cid:52)(cid:66)(cid:69)(cid:70)(cid:72)(cid:73)(cid:1)(cid:46)(cid:80)(cid:78)(cid:70)(cid:79)(cid:74)(cid:1)(cid:46)(cid:74)(cid:77)(cid:66)(cid:75)(cid:70)(cid:83)(cid:69)(cid:74)(cid:15)(cid:1)(cid:54)(cid:79)(cid:69)(cid:70)(cid:83)(cid:1)(cid:77)(cid:74)(cid:68)(cid:70)(cid:79)(cid:84)(cid:70)(cid:1)(cid:85)(cid:80)(cid:1)(cid:42)(cid:38)(cid:38)(cid:38)(cid:15)
(cid:37)(cid:48)(cid:42)(cid:1)(cid:18)(cid:17)(cid:15)(cid:18)(cid:18)(cid:17)(cid:26)(cid:16)(cid:52)(cid:49)(cid:15)(cid:19)(cid:17)(cid:18)(cid:26)(cid:15)(cid:17)(cid:17)(cid:17)(cid:19)(cid:23)
(cid:18)(cid:18)(cid:20)(cid:24)
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:43:10 UTC from IEEE Xplore.  Restrictions apply. 
‚Ä¢ Alert generation: Starting from low-level event traces from
hosts, we must generate alerts in an efÔ¨Åcient manner. How
do we generate alerts that attempt to factor any signiÔ¨Åcant
steps the attacker might be taking? Additionally, care must
be taken to ensure that we do not generate a large volume
of noisy alerts.
‚Ä¢ Alert correlation: The challenge here is to combine these
alerts from multiple activities of the attacker into a reliable
indicates the presence of an ongoing APT
signal
that
campaign.
‚Ä¢ Attack scenario presentation: Indicators of an ongoing
APT campaign needs to be communicated to a human be-
ing (a cyber-analyst). To be effective, this communication
must be intuitive and needs to summarize the attack at a
high level such that the analyst quickly realizes the scope
and magnitude of the campaign.
Approach and Contributions. We present a system called
HOLMES in this paper that addresses all the above aspects.
HOLMES begins with host audit data (e.g., Linux auditd or
Windows ETW data) and produces a detection signal that maps
out the stages of an ongoing APT campaign. At a high level,
HOLMES makes novel use of the APT kill-chain as the pivotal
reference in addressing the technical challenges involved in the
above three aspects of APT detection. We describe our key
ideas and their signiÔ¨Åcance below, with a detailed technical
description appearing in Section III.
First, HOLMES aims to map the activities found in host
logs as well as any alerts found in the enterprise directly to
the kill chain. This design choice allows HOLMES to generate
alerts that are semantically close to the activity steps (‚ÄúTactics,
Techniques and Procedures‚Äù (TTPs)) of APT actors. By doing
so, HOLMES elevates the alert generation process to work
at the level of the steps of an attack campaign, than about
how they manifest in low-level audit logs. Thus, we solve an
important challenge in generating alerts of signiÔ¨Åcance. In our
experiments, we have found that a Ô¨Åve-day collection of audit
logs contains around 3M low-level events, while HOLMES only
extracts 86 suspicious activity steps from them.
A second important idea in HOLMES is to use the informa-
tion Ô¨Çow between low-level entities (Ô¨Åles, processes, etc.) in the
system as the basis for alert correlation. To see this, note that
the internal reconnaissance step in the kill-chain depends on a
successful initial compromise and establishment of a foothold.
In particular, the reconnaissance step is typically launched
using the command and control agent (process) installed by the
attacker during foothold establishment, thus exhibiting a Ô¨Çow
between the processes involved in the two phases. Moreover,
reconnaissance often involves running malware (Ô¨Åles) down-
loaded during the foothold establishment phase, illustrating a
Ô¨Åle-to-process Ô¨Çow. Similarly, a successful lateral movement
phase, as well as the exÔ¨Åltration phase, uses data gathered by
the reconnaissance phase. Thus, by detecting low-level events
associated with APT steps and linking them using information
Ô¨Çow, it is possible to construct the emerging kill-chain used
by an APT actor.
A third main contribution in HOLMES is the development
of a high-level scenario graph (HSG). The nodes of the HSG
correspond to TTPs, and the edges represent information Ô¨Çows
between entities involved in the TTPs. The HSG provides
the basis for detecting APTs with high conÔ¨Ådence. For this
purpose, we develop several new ideas. First is the concept of
an ancestral cover in an HSG. We show how this concept
can help to assess the strength of dependencies between
HSG nodes. Weak dependencies can then be pruned away
to eliminate many false alarms. Second, we develop noise
reduction techniques that further de-emphasize dependencies
that are known to be associated with benign activities. Third,
we develop ranking and prioritization techniques to prune
away most nodes and edges unrelated to the APT campaign.
These steps are described in detail in Sections IV-D, IV-E, and
IV-F. Using these techniques, we demonstrate that HOLMES
is able to make a clear distinction between attack and benign
scenarios.
Finally, the HSG provides a very compact, visual summary
of the campaign at any moment, thus making an important
contribution for attack comprehension. For instance, starting
from a dataset of 10M audit records, we are able to summarize
a high-level attack campaign using a graph of just 16 nodes. A
cyber-analyst can use the presented HSG to quickly infer the
big picture of the attack (scope and magnitude) with relative
ease.
Evaluation. We evaluated HOLMES on data generated by
DARPA Transparent Computing program that
involved a
professional red-team simulating multiple cyber-attacks on a
network consisting of different platforms. We implemented
appropriate system audit data parsers for Linux, FreeBSD, and
Windows, to process and convert their audit data to a common
data representation and analysis format. The advantage of
using system audit data is that
is a reliable source of
information and is free of unauthorized tamper (under a threat
model of non-compromised kernel).
it
Evaluation of HOLMES on nine real-life APT attack sce-
narios, as well as running it as a real-time intrusion detection
tool in a live experiment spanning for two weeks, show that
HOLMES is able to clearly distinguish between attack and
benign scenarios and can discover cyber-attacks with high
precision and recall (Sec. VI).
II. A RUNNING EXAMPLE
In this section, we present a running example used through
the paper to illustrate our approach. This example represents
an attack carried out by a red-team as part of a research
program organized by a government agency (speciÔ¨Åcally, US
DARPA). In this attack, a vulnerable Nginx web server runs on
a FreeBSD system. Its operations (system calls) are captured
in the system audit log. From this audit data, we construct
a provenance graph, a fragment of which is shown in Fig. 2.
Nodes in this graph represent system entities such as processes
(represented as rectangles), Ô¨Åles (ovals), network connections
(diamonds), memory objects (pentagons), and users (stars).
Edges correspond to system calls and are oriented in the
direction of information Ô¨Çow and/or causality. Note that our
provenance graph has been rendered acyclic using the (opti-
mized) node versioning technique described in Reference [23].
The goal of the attacker is to exÔ¨Åltrate sensitive information
from the system. The attacker‚Äôs activities are depicted at the
bottom of Fig. 2, and consist of the following steps:
‚Ä¢ Initial Compromise. The attacker sends a malicious pay-
load on the socket (S1) listening on port 80. As a result,
Nginx makes some part of its memory region (M1) ex-
(cid:18)(cid:18)(cid:20)(cid:25)
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:43:10 UTC from IEEE Xplore.  Restrictions apply. 
#(&)'(,(&#!&''

%%

%%
#(&)'(,(&#!&''

%%

%%
##,
%%%"
##,
%%%"
##,
,
%%%"
##,
,
%%%"
*&!$##,
''!$
)'&!$!+++
##,#,%%
*&!$##,
''!$
)'&!$!+++
##,#,%%
##,
#(&)'(,(&#!&''





##,
,
)'&#
%&$'((
"%&$((,

""$&-
%%
%%
##, 
)'&#
%&$'((
)'&!$##,
&&$&!$

##, 
(&$)%

&
('$+

(%''+

#(&)'(,(&#!&''

''
&)'(&''

!
!'$
!,
!!'$
(

*((-

&$$(
()
''
''

'
&)'(&''

)'&!
!'"'$
		


(
'%+
(&
($#'
##,
!!.'$
''

'
,
""$&-
"%&$((,
')$##,
'&!$
,
(
#''+(
$#
(
!$!("
*&!$
)(!$
%%
 !!
'-'!$
