=
+
2
This is still a linear relationship B = A0 + A1 · ∆, which we could
prove easily as in our first protocol. Essentially, we can prove a
degree-2 polynomial with n/2 multiplications with a communica-
tion cost of just O(1), in addition to the cost of committing the
witness. This is independent of the number of multiplications in
the polynomial, which could be as many as O(n). One immediate
observation is that if we have t such polynomials to be proven, the
total communication cost is still O(1) rather than O(t), by using the
same random-linear-combination idea to reduce all linear checks to
a single check. This protocol immediately allows us to prove inner
product faster than the circuit-based ZK protocol.
Our ZK protocol: proving arbitrary degree-d polynomials.
The above protocol is not as generalized as we want in two as-
pects: 1) it only handles degree-2 polynomials, not ones with a
higher degree; 2) when being executed for t times, we are assuming
the polynomials are the same. Now we generalize it to the most
extensive format. We assume that the witness is (w1, . . . , wn) ∈ Fn
p ;
there are totally t polynomials to be proven and each multivari-
able polynomial fi(x1, . . . , xn) over Fp has a degree at most d. The
prover wants to prove that fi(w1, . . . , wn) = 0 for all i ∈ [t]. Below,
we show how to prove such polynomial set in communication of d
field elements over Fpr , in addition to the n field elements over Fp
to commit the witness.
When there are n variables and degree up to d, there are sur-
prisingly high number of terms, making it difficult to even write
it out. Note that in practice commonly used polynomials only
have a small number of terms, but we do not want to limit in
any way for our ZK protocol. As a result, for every n-variable
d-degree polynomial f ∈ { f1, . . . , ft}, we will represent it as
h∈[0,d] дh(x1, . . . , xn), where дh is a degree-h
polynomial such that all terms in дh have exactly degree h.2 This
turns out to help in our calculation. Now we apply the same idea
as follows:
f (x1, . . . , xn) = 
= 
= 
= 
f (k1, . . . , kn) = f (m1 + w1 · ∆, . . . , mn + wn · ∆)
j
j
A
j∈[0,h−1]
h · ∆j(cid:17)

A
h · ∆j .
дh(m1 + w1 · ∆, . . . , mn + wn · ∆)
h∈[0,d]
h∈[0,d]
(cid:16)
дh(w1, . . . , wn) · ∆h + 
дh(w1, . . . , wn) · ∆h + 
Therefore, qh(∆) = дh(w1, . . . , wn) · ∆h +
h∈[0,d]
h∈[0,d]
j∈[0,h−1]
h · ∆j.
j∈[0,h−1] A
In the above equation, A
is the coefficient in front of x j for the
j
univariate polynomial qh(x) = дh(m1 + w1 · x, . . . , mn + wn · x).
h
At this point, we are stuck on the first part of the above equation.
Recall that the protocol works in the multiplication-gate case, as the
polynomial f (x, y, z) = x · y − z is exactly the coefficient of ∆
2 and
thus proving that the relationship is linear implies that this coeffi-
cient is zero. In the case of inner product, there is a constant term c0,
but we are able to get around with it since c0 is public. Here, the poly-
nomial is generic and there may be lower-order terms on ∆. Ideally,
and then prove that the rest part of the equation is a (d − 1)-degree
polynomial. To sum up, we need a way to shift each sub-polynomial
so that the terms align. It turns out to be possible. See below.
Now instead of evaluating f (k1, . . . , kn) as we always do, we
write this polynomial in a “degree-separated” format and shift each
we want an equation with the term(cid:0)
h∈[0,d] дh(w1, . . . , wn)(cid:1) · ∆d,
j
2Here we assume that each polynomial f has been written in a “degree-separated”
format, and thus need not the computation of decomposing the polynomial.
·∆.
Session 11B: Zero Knowledge II CCS ’21, November 15–19, 2021, Virtual Event, Republic of Korea2990h∈[0,d]
sub-polynomial. The verifier now computes
дh(k1, . . . , kn) · ∆d−h
дh(m1 + w1 · ∆, . . . , mn + wn · ∆) · ∆d−h

= 
= 
= 
= f (w1, . . . , wn) · ∆d + 
(cid:16)
дh(w1, . . . , wn) · ∆d + 
дh(w1, . . . , wn) · ∆d + 
h∈[0,d−1]
h∈[0,d]
h∈[0,d]
h∈[0,d]
j
A
j∈[0,h−1]
h · ∆j+d−h(cid:17)
Ah · ∆h = 
Ah · ∆h
h∈[0,d−1]
Ah · ∆h .
h∈[0,d−1]
P(x) =
Here A
is defined as above, and Ah is the aggregated coefficient
j
h
for all terms with ∆h. Note that the prover with witnesses {wi}
and MACs {mi} can compute all the coefficients locally. The co-
efficients {Ah} are polynomial coefficients when we treat it as a
single-variable polynomial on ∆. Therefore, we can compute {Ah}
efficiently by evaluating the polynomial on d + 1 points and then
computing the polynomial coefficients using Lagrange interpola-
tion (see Section 5 for more details). In many practical applica-
tions, the polynomial is usually simple and thus the coefficients
can be derived without using the above generic approach. This
relationship can be viewed as an oblivious polynomial evaluation
(OPE), where the verifier has ∆ and the prover has a polynomial
h∈[0,d−1] Ah · xh over Fpr . The verifier wants to check
that the resulting evaluation in the above equation is the same
as P(∆). It is not hard to check the above polynomial relation, as
sVOLE can be used to generate (V)OPE in an efficient way (see
Section 4.1 for details). Similarly, we can perform the checks for
all t polynomials in a batch using the random linear combination.
This results in a total communication of (n + dr) log p bits in the
sVOLE-hybrid model. When using the interpolation approach to
compute the coefficients {Ah}, we have that the computational cost
of the prover and verifier is O(td
z + dn) and O(tdz) respectively,
where z is the maximum number of terms in all t polynomials (see
Section 5 for an analysis of computational complexity). In Section 5,
we give the detailed description of our ZK protocol for polynomial
sets over any field, and prove its UC security.
2
3.3 Other Useful Results
By applying the above results in different settings, we can obtain
the following interesting results.
Proving knowledge of solutions to lattice problems. Immedi-
ately, our ZK protocol shows a way to prove low-degree polynomi-
als with very high efficiency. This could help us to prove knowledge
of a solution of the short integer solution (SIS) problem. In particular,
we assume that the prover knows a vector s, such that A · s = t
and s ∈ [−B, B]m for a small value B ∈ N (or s ∈ {0, 1}m), where
both parties know the public matrix A ∈ Zn×m
and vector t ∈ Zn
q
(here we assume that q is a prime). The main cost is to prove that
all input values are bounded, which can be modeled as a set of low-
degree polynomials, something our ZK protocol is very good at. As
a result, our ZK protocol significantly outperforms all prior works
for proving knowledge of solutions to SIS problems. In particular,
q
for s ∈ {−1, 0, 1}m, our protocol uses 8× less communication and
110× less execution time compared to the state-of-the-art proto-
col Wolverine [48]. See Section 5.2 for details of our solution and
Section 6.2 for performance evaluation.
p
are two secret matrices and C ∈ Fn
Proving matrix multiplication with sublinear communica-
tion. Here, the prover intends to prove that A · B = C, where
A, B ∈ Fn×n
p is a public matrix.
Using the circuit-based ZK protocol, this will need O(n
3) communi-
cation. In the previous section, we present a ZK protocol for inner
product of two vectors with O(1) communication (in addition to
the cost of committing the witness), which is independent of the
number of the inner-product executions. This immediately gives us
a ZK protocol for proving matrix multiplication with O(n
2) com-
munication for committing two secret matrices and additional O(1)
communication for proving the matrix relationship (A · B has n
2
executions of inner product between two vectors of dimension n).
Proving integer multiplication over a ring with a linear amor-
tized communication cost. The multiplication of two n-bit in-
tegers needs O(n
2) AND gates. Although multiplication is more
efficient over large fields, we may prefer computing over a ring
Z2n (e.g., n = 32), for applications where matching cleartext com-
putation is crucial. Now, we could actually prove the multiplication
of two integers in communication of O(n) bits. In particular, it is
known that n-bit multiplier can be represented as a Boolean circuit
of depth 2 log n + 3 [21]. Therefore, the polynomial that represents
2. If there are t
each bit in the multiplication has degree at most 8n
integer multiplications to be proven, the amortized communication
cost of each multiplication will be 3n + 8n2κ
bits, which becomes
t
4n bits when t ≈ 8nκ. Here the communication of 3n bits for each
integer multiplication is used to commit input and output values.
Generic sublinear ZK proof via amortization. If amortization
is considered, then one immediate result is that we can prove t
number of circuits each with a low depth d and N multiplication
gates on totally n distinct variables in amortized communication
sublinear to the circuit size. This is because the polynomial that
represents a d-depth circuit has a degree at most 2d. If the number
N). When
each circuit has a more compact polynomial representation (in
terms of the highest degree), the communication saving will be
even higher.
of circuits to be proven is t = O(cid:0)(n + 2d)/√
communication cost per circuit is O(cid:0)(n + 2d)/t(cid:1) = O(√
N(cid:1), then the amortized
We could develop on top of this idea for general circuits with
weak uniformity. Specifically, given a large circuit C, we can identify
all sub-circuits denoted by C1, . . . , Ct , that have compact polyno-
mial representations. Now, we can prove the evaluation of gates
in C \ {C1, . . . , Ct} using our ZK protocol for circuit satisfiability,
which provides us with the commitments on all input wires and the
wires related to the gates. Then we can prove all the sub-circuits
C1, . . . , Ct in a communication cost linear to the highest degree of
all the circuits represented as polynomials. Note that the input and
output values of all the sub-circuits have been committed in the
first step, and thus no extra cost is needed. Here we only need a
reasonably weak uniformity: we do not require all sub-circuits to be
of the same size or the same topology; instead we only need that
Session 11B: Zero Knowledge II CCS ’21, November 15–19, 2021, Virtual Event, Republic of Korea2991Functionality Fp ,r
ext-sVOLE
from the adversary.
Initialize: Upon receiving (init) from P and V, sample ∆ ← Fpr
if V is honest, and receive ∆ ∈ Fpr from the adversary otherwise.
Store ∆ and send it to V, and ignore all subsequent (init) commands.
Extend: This procedure can be run multiple times. Upon receiving
(extend, ℓ) from P and V, do the following:
(1) If V is honest, sample k ← Fℓ
pr . Otherwise, receive k ∈ Fℓ
pr
p and compute m := k −∆·x ∈ Fℓ
(2) If P is honest, sample x ← Fℓ
pr .
p and m ∈ Fℓ
Otherwise, receive x ∈ Fℓ
pr from the adversary, and
then recompute k := m + ∆ · x ∈ Fℓ
pr .
(3) Send (x , m) to P and k to V.
Vector Oblivious Polynomial Evaluation: Upon receiving (VOPE,
d) from P and V, do the following:
(1) If V is honest, sample B ← Fpr . Otherwise, receive B ∈ Fpr
(2) If P is honest, sample Ai ← Fpr for i ∈ [d] and compute A0 :=
i∈[d] Ai · ∆i . Otherwise, receive {Ai }i∈[0,d] with Ai ∈ Fpr
B −
from the adversary and recompute B :=
(3) Send {Ai }i∈[0,d] to P and B to V.
Figure 2: Functionality for extended subfield VOLE.
i∈[0,d] Ai · ∆i .
from the adversary.
the polynomial representations of sub-circuits are all bounded by
some degree D.
4 CIRCUIT ZK OVER ANY FIELD
In this section, we present our ZK protocol for circuit satisfiability
over any field with communication of only one field element per
multiplication gate using sVOLE as a subroutine. First of all, we
introduce a functionality (and the corresponding protocol) that
extends sVOLE to additionally support vector oblivious polynomial
evaluation (VOPE), which is crucial for our ZK protocols in this
section and the next section. Then, we provide the details of our
ZK protocol, and give the formal security proof.
4.1 Extended Subfield VOLE
Extended sVOLE functionality. To accommodate our efficient
ZK protocols for circuits and polynomial sets (described in Sec-
tion 4.2 and Section 5), we propose an extended sVOLE functionality
F p,r
defined in Figure 2 to generate authenticated values and
ext-sVOLE
special correlations related to random polynomials. This functional-
ity is the same as that shown in Figure 6, except that it additionally
allows two parties to obtain VOPE correlations over Fpr with the
guarantee that the same global key ∆ is used between sVOLE and
VOPE. In particular, given a polynomial-degree d input by both
parties, this functionality will sample d + 1 uniform coefficients
over extension field Fpr to define a random polynomial д, and then
output the coefficients to a party P and д(∆) to the other party V.
Protocol for realizing extended sVOLE functionality. We con-
struct the protocol to UC-realize functionality F p,r
by extend-