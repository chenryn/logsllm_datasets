and broadcasts it to the other servers (where(cid:101)UQ is the vector which in position i has the Q-th
component of the encoding of the i-th block being tested and held by server Q). The servers collect the values and abort if
l = (l1, . . . , ln) (cid:60) RSF,n,k +w ,η or x1 + · · · + xw (cid:44) 0 where x = (x1, . . . , xw) = Decodeη(l).
Equality test. In the equality test, the parties check that the degree reduction step was performed correctly. This procedure is similar to the degree test.
Namely, the clients distribute two vectors z0
oracle FCOIN. Next, each server constructs two vectors(cid:98)UQ and(cid:98)VQ where ˆUQ contains the Q-th components of the encodings in (L′)m and(cid:98)VQ
, z1 which encode 0w in RSF,n,k +w ,η. Then, the servers receive r ∈ Fm, b0, b1 from the coin-tossing
+ b1z1
Q
Q
contains the fresh encodings after the degree reduction, namely in Lm. Server sQ computes
and broadcasts lQ . The servers then collect these values and abort if l (cid:60) L′ or if it does not encode the all 0s block.
lQ = (r1, . . . , rm)T ((cid:98)UQ −(cid:98)VQ) + b0z0
+ b1z1
Q
Q
Figure 8: Correctness Tests for Protocol Π
(d + 2)/|F|σ where σ is a soundness amplification parameter and
d = n − k + 1 is the distance of the underlying code.
4.2 The Combined Protocol
In this section we provide our complete two party protocol for
realizing arithmetic functions over any field F that achieve security
against active corruptions. This is obtained by compiling our outer
protocol described in 4.1 and the inner protocol instantiated using
the GMW protocol [26] with a variant of the IPS compiler, intro-
duced in Section 3. In more details, we instantiate the IPS compiler
by using the honest majority protocol of section 4.1 as the outer
protocol, and implementing the FCOIN oracle calls made by such
protocol with a simple commit and reveal coin-tossing protocol
between the two parties (which can be proved to maliciously secure
assuming a random oracle is used to implement the commitment
scheme). The parties will also maintain additive shares of the state
of the virtual servers of the outer protocol. The operations of the
servers are implemented as follows:
sum the additive shares of those values they hold
• To implement a server adding two values, the parties simply
• To implement a server multiplying two values and sending
an additive share of the product to each client, we use the
passively secure GMW protocol (in the passive OLE-hybrid),
where the OLE functionality can be instantiated with any
passively secure protocol [31, 49].
• To implement a server broadcasting a value, each party re-
veals its share of this value to the other party, and both
parties consider the public value as part of the state of all
servers.
• To implement a sever sending a value to a client, the other
• To implement a client sending a value to a server, this client
sets the value as its own share of the server’s state, and the
other clients sets 0 as a share.
client sends its share of such value to the first client.
A detailed description of the combined protocol is given in Fig-
ure 9. The work of [30] provides a formal proof of security for
the combined protocol, however, their analysis provides only an
asymptotic guarantee. In this work, we consider a concrete security
analysis while taking statistical security parameters into account.
Theorem 2. Let Π be an MPC protocol that computes a two-party
functionality F : Fα1 × Fα2 → Fα3 × Fα4 between 2 clients and n
servers, tolerating adaptive adversaries that actively corrupt at most
one client and e servers, and passively corrupt at most t servers with
statistical error δ. Assume in this protocol the servers only perform
Session 2C: Secure Computing ICCS ’19, November 11–15, 2019, London, United Kingdom336Setup. P0’s input is x = (x1, . . . , xα1) and P1’s input is y = (y1, . . . , yα2). The parties share a description of an arithmetic circuit
C : Fα1 × Fα2 → Fα3 × Fα4 that implements F. P0 and P1 simulate an execution of protocol Π, playing the roles of C0 and C1 respectively, and also
simulating the actions of the n servers through the GMW protocol as follows:
Watchlists setup. To establish the watchlist, P0 and P1 run two instances of an actively secure t-out-of-n oblivious-transfer (OT) protocol (cf. Figure 1)
where t is the privacy parameter of the outer protocol. In one instance P0 plays the role of the sender with n freshly sampled symmetric keys
n) as input and P1 plays the receiver with an arbitrary t-subset of [n] as its watchlist. In the second instance, the parties execute the same
(k0
1 , . . . , k0
will be used to encrypt (and send to P1−i ) the state and randomness used by Pi to simulate server sQ .
protocol with the roles reversed. Each key k i
Q
Protocol emulation. P0 and P1 play the roles of C0 and C1 in Π, simulating the n servers as follows. Over the execution, the two parties hold additive
shares of the state of each server. Moreover, each party knows the additive shares of the state held by the other party for the t servers in its watchlist
and can thus check that the simulation of those servers is performed correctly, aborting if any inconsistency is detected.
– Distributing encodings among the servers. Whenever a client Ci has to simulate distributing an encoding l = (l1, . . . , ln) among the servers,
(lj) for all j and sends c = (c1, . . . , cn) to the other party (which can decrypt only t of those ciphertexts using the
such party computes mj = Encki
keys in its watchlist). Moreover, Ci now considers lQ as part of sQ ’s state and, to maintain the invariant that the state has to be additively shared, the
other party implicitly uses 0 as a share for lQ .
– Linear combinations. Each time a server should sum two values, the two parties simply sum their additive shares of those values. Analogously, to
simulate the server performing a linear combination of its values with public coefficients (as in the correctness tests), the clients each perform this linear
combination on their additive shares of those values.
– Multiplications. To simulate a server sQ multiplying two values a, b and distributing additive shares of the product among the clients, the two
parties invoke the GMW protocol. Each party uses as input their additive shares of the two values, and (consuming two OLE) obtains an additive share
of the product. In addition, each party Pi encrypts the randomness used in GMW (i.e. to compute the OLE) under k i
and sends it to the other party,
Q
which can thus check that the GMW execution is performed correctly for the servers in its watchlist.
– Coin tossing. Whenever Π invokes the coin-tossing oracle FCOIN, the parties run a coin-tossing protocol using the commitment functionality FCOM
(cf. Figure 3). Namely, P0 commits to a random value r0, then P1 samples a random value r1 and sends it to P0, upon which P0 opens the commitment to
r0 and the output of the coin-tossing is set as r = r0 + r1.
– Messages from the servers. Whenever a server sQ sends a value to a client Ci , then party P1−i sends Pi its additive share of that value, which Pi
can then combine with its own share to reconstruct such value. Whenever a server broadcasts a value, the parties exchange their share of such value
and consider the reconstructed value as common knowledge of all the servers. Moreover, each party checks that the shares sent on behalf of servers in
its watchlist are consistent with the state of such server.
j
Figure 9: The Combined Protocol Φ.
arithmetic operations over F, and that the protocol is described in the
FCOIN-hybrid model. Let FMULT be the multiplication functionality, that
takes additive shares as inputs from the parties and outputs additive
OLE a two-party protocol that realizes FMULT
shares of the product, and ρ
in the OLE-hybrid setting, tolerating one passive corruption. Then,
the protocol obtained by instantiating the IPS compiler, as described
in Figure 9, using t as the watchlist size, securely realizes F in the
(passive OLE, active OT, FCOIN)-hybrid model, tolerating one active
(static) corruption, with statistical security δ + (1 − e/n)t .
Proof sketch. The security proof of our combined protocol follows
essentially from [30, 31], but here we are interested in concretely
analyzing the statistical simulation error. In more detail, [30] re-
duces the security of the combined protocol to the security of the
outer protocol, where for every adversary A corrupting a party Pi
in the combined protocol, there exists an adversary A′ corrupting
the corresponding client Ci in the outer protocol. In addition to
corrupting one of the clients, A′ also (adaptively) corrupts a subset
of the servers. The servers that are on the watchlist of the corrupted
party are passively corrupted at the beginning of the computation.
On the other hand, if A deviates in the emulation of some server
sj, that server is adaptively corrupted by A′ (where the simulator
knows whether a server is deviating as it can observe all the infor-
mation exchanged over the watchlist channels, by extracting all
the symmetric keys submitted by the adversary as inputs to the
OT execution and decrypting all the communication channels). In
order to argue that A′ will corrupt at most e of the servers, the
IPS analysis proves that if A deviates in the emulation of more
than e servers, it will be caught except with a small statistical error
(1 − e/n)t . Therefore, we can conclude that except with this small
error A′ corrupts at most e servers. This reduction from A in the
combined protocol to A′ in the outer protocol allows us to argue
both privacy and correctness. Therefore, the overall error can be
bounded using an union bound as
(1 − e/n)t + δ
where δ is the statistical security error of the outer protocol. We
note that the actual proof is more intricate as it allows A to adap-
tively corrupt all clients involved in the inner protocol instance for
emulating the computation of sj, where these corruptions can take
place in the presence of erasing the states of the clients (where this
notion of security is much easier to achieve).6
Applying this theorem to the outer protocol of section 4.1 yields
protocol Φ, described in Figure 9, whose concrete statistical security
6More formally, in order to carry out such a corruption phase, [30] requires that the
inner protocol meets an additional property, denoted by a two-step passive corruption,
where the second phase considers adaptive corruptions even in the erasing model.
This property is met by most natural protocols that include a preprocessing that is an
input-independent phase.
Session 2C: Secure Computing ICCS ’19, November 11–15, 2019, London, United Kingdom337+ r · n · CCρ
passive invoc.
+
is (d + 2)/|F|σ + (1 − e/n)t and communication complexity is:
2 · CCt-out-of-n OT
6 · r · n · log2 |F|
watchlist setup
(cid:124)(cid:32)(cid:32)(cid:32)(cid:32)(cid:32)(cid:32)(cid:32)(cid:32)(cid:32)(cid:32)(cid:32)(cid:32)(cid:32)(cid:32)(cid:123)(cid:122)(cid:32)(cid:32)(cid:32)(cid:32)(cid:32)(cid:32)(cid:32)(cid:32)(cid:32)(cid:32)(cid:32)(cid:32)(cid:32)(cid:32)(cid:125)
(cid:124)(cid:32)(cid:32)(cid:32)(cid:32)(cid:32)(cid:32)(cid:123)(cid:122)(cid:32)(cid:32)(cid:32)(cid:32)(cid:32)(cid:32)(cid:125)
(cid:124)(cid:32)(cid:32)(cid:32)(cid:32)(cid:32)(cid:32)(cid:32)(cid:32)(cid:32)(cid:32)(cid:32)(cid:32)(cid:32)(cid:32)(cid:32)(cid:32)(cid:32)(cid:32)(cid:32)(cid:32)(cid:32)(cid:32)(cid:32)(cid:32)(cid:32)(cid:32)(cid:32)(cid:32)(cid:123)(cid:122)(cid:32)(cid:32)(cid:32)(cid:32)(cid:32)(cid:32)(cid:32)(cid:32)(cid:32)(cid:32)(cid:32)(cid:32)(cid:32)(cid:32)(cid:32)(cid:32)(cid:32)(cid:32)(cid:32)(cid:32)(cid:32)(cid:32)(cid:32)(cid:32)(cid:32)(cid:32)(cid:32)(cid:32)(cid:125)
(cid:124)(cid:32)(cid:32)(cid:32)(cid:32)(cid:32)(cid:32)(cid:32)(cid:32)(cid:32)(cid:32)(cid:32)(cid:32)(cid:32)(cid:32)(cid:32)(cid:32)(cid:32)(cid:32)(cid:32)(cid:32)(cid:123)(cid:122)(cid:32)(cid:32)(cid:32)(cid:32)(cid:32)(cid:32)(cid:32)(cid:32)(cid:32)(cid:32)(cid:32)(cid:32)(cid:32)(cid:32)(cid:32)(cid:32)(cid:32)(cid:32)(cid:32)(cid:32)(cid:125)
+ 3 · κ(cid:124)(cid:123)(cid:122)(cid:125)
(cid:124)(cid:32)(cid:32)(cid:32)(cid:32)(cid:32)(cid:32)(cid:32)(cid:32)(cid:32)(cid:32)(cid:32)(cid:32)(cid:32)(cid:32)(cid:32)(cid:32)(cid:32)(cid:32)(cid:32)(cid:32)(cid:32)(cid:32)(cid:32)(cid:32)(cid:32)(cid:32)(cid:32)(cid:32)(cid:123)(cid:122)(cid:32)(cid:32)(cid:32)(cid:32)(cid:32)(cid:32)(cid:32)(cid:32)(cid:32)(cid:32)(cid:32)(cid:32)(cid:32)(cid:32)(cid:32)(cid:32)(cid:32)(cid:32)(cid:32)(cid:32)(cid:32)(cid:32)(cid:32)(cid:32)(cid:32)(cid:32)(cid:32)(cid:32)(cid:125)
coin-toss
+ 8 · σ · (t + e + w) · log2 |F|
+ 2 · σ · (t + e + w) · log2 |F|
degree test
watchlist comm./ layer
perm./equality test
where d = n − k + 1, r is the number of multiplication layers, CCρ
is the communication complexity of ρ
OLE and σ is a soundness
amplification parameter. Finally, the number of OLE invocations of
Φ is r · n · r
OLE.
OLE is the number of OLE invocations of ρ
ρ
OLE where r
ρ
5 APPLICATIONS
In this section, we present our main applications as instantiations
of our combined protocol.
5.1 Choosing concrete parameters
Our combined protocol depends on different parameters. Below we
discuss the constraints in order to optimize concrete performance.
Let s be the statistical security parameter. The set of parameters
includes the number of servers n, the block width w, the watchlist
size t, the number of active corruptions in the outer protocol e and
the parameters k, d for the Reed Solomon encodings subject to the
following constraints: (1 − e/n)t + (d + 2)/|F| < 2−s, k ≥ t + e + w,
2k + e < n, and e < d/3.
The dominating costs in the execution of this protocol is the com-
putation of the OLE functionality and (to a minor extent) computing
the Reed Solomon encodings. To optimize concrete efficiency, we
first want to minimize the number of OLE calls. Note that for every
block of w multiplication gates which is part of the circuit, the outer
protocol requires each of the n servers to perform one multiplica-
tion, which is simulated in the combined protocol via the passive
GMW protocol [26] using 2 OLE calls. Therefore, if all the blocks
of w gates are “full”, i.e. they all contain exactly w gates, then the
protocol requires 2 · n/w OLE (amortized) calls per multiplication.
Another useful optimization is setting k to be a power of two, as
this greatly increases the encoding efficiency by allowing to use
finite field FFT algorithms.
We provide a few examples of different sets of parameters in
Table 2, where we consider 40 bits statistical security and where
we additionally set k = t + w + e and d = n − k + 1. It can be
inferred from the table that as w grows, n/w approaches 2, which
translates to roughly 4 OLE calls per multiplication gate in the
circuit. Note that, the higher the number of multiplication blocks
with less than w gates within the circuit, the lesser “utilized” the
OLE calls to evaluate that block, where the concrete number of
OLE calls per multiplication is farther from 4. In general, given a
circuit, finding a value of w that allows for a small ratio of OLE calls
per multiplication is easier the more multiplications the circuit has
and the wider the circuit is (i.e. the circuit has many multiplication
gates condensed in few layers).
w
1317
3065
6749
14332
29864
61386
125195
253781
512404
e
272
362
509
690
987
1369
1964
2778
3951
t
459
669
934
1362
1917
2781
3913
5585
7933
n
4640
8916
17402
34147
67493
133769
265987
529690
1056213
n/w
3.52
2.91
2.58
2.38
2.26
2.18
2.12
2.09
2.06
Table 2: Concrete parameters for our protocol with the over-
heads embedded within the parameter n/w (which captures
the amortized number of OLE invocations per multiplica-
tion gate with 40 bits statistical security.)