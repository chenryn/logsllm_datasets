除了使用像`MustRunAsNonRoot`这样的规则之外，还可以直接指定容器可以使用哪个用户标识运行，并且任何未在其规范中专门使用该标识运行的 Pods 都将无法调度到节点上。
有关将用户限制在特定标识的 PSP 示例，请查看以下 YAML:
Specific-user-id-psp.yaml
```
apiVersion: policy/v1beta1
kind: PodSecurityPolicy
metadata:
  name: specific-user-psp
spec:
  privileged: false
  allowPrivilegeEscalation: false
  hostNetwork: false
  hostIPC: false
  hostPID: false
  runAsUser:
    rule: 'MustRunAs'
    ranges:
      - min: 1
        max: 3000
  readOnlyRootFilesystem: false
```
此 Pod 安全策略应用后，将阻止任何 Pod 以用户 ID `0`或`3001`或更高的身份运行。为了创建满足这个条件的 Pod ，我们在 Pod 规格中使用`securityContext`中的`runAs`选项。
以下是一个满足此约束的 Pod 示例，即使有此 Pod 安全策略，也能成功调度:
Specific-user-pod.yaml
```
apiVersion: v1
kind: Pod
metadata:
  name: specific-user-pod
spec:
  securityContext:
    runAsUser: 1000
  containers:
  - name: test
    image: busybox
    securityContext:
      allowPrivilegeEscalation: false
```
正如你所看到的，在这个 YAML，我们给我们的 Pod 一个特定的用户来运行，ID `1000`。我们也不允许我们的 Pod 升级到根。即使`specific-user-psp`到位，该 Pod 规格也能成功调度。
既然我们已经讨论了 Pod 安全策略如何通过限制 Pod 的运行来保护 Kubernetes，我们可以进入网络策略，在这里我们可以限制 Pod 的网络方式。
## 使用网络策略
Kubernetes 中的网络策略的工作方式类似于防火墙规则或路由表。它们允许用户通过选择器指定一组 Pods，然后确定这些 Pods 可以如何以及在哪里通信。
要使网络策略起作用，您选择的 Kubernetes 网络插件(例如， *Weave* 、*Flannel*或 *Calico* )必须支持网络策略规范。可以像所有其他 Kubernetes 资源一样，通过 YAML 文件创建网络策略。让我们从一个非常简单的网络策略开始。
这里有一个网络策略规范，限制对带有标签`app=server`的 Pods 的访问:
标签-限制-策略. yaml
```
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: frontend-network-policy
spec:
  podSelector:
    matchLabels:
      app: server
  policyTypes:
  - Ingress
  ingress:
  - from:
    - podSelector:
        matchLabels:
          app: frontend
    ports:
    - protocol: TCP
      port: 80
```
现在，让我们把这个 YAML 网络策略分开，因为它将帮助我们解释一些更复杂的网络策略。
首先，在我们的规范中，我们有一个`podSelector`，它在功能上类似于节点选择器。在这里，我们使用`matchLabels`来指定该网络策略将只影响标签为`app=server`的 Pods。
接下来，我们为网络策略指定一个策略类型。有两种策略类型:`ingress`和`egress`。网络策略可以指定一种或两种类型。`ingress`指的是制定对匹配 Pods 的连接生效的网络规则，`egress`指的是对离开匹配 Pods 的连接生效的网络规则。
在这个特定的网络策略中，我们只是规定了一个单一的`ingress`规则:带有标签`app=server`的 Pods 将接受的唯一流量是来自带有标签`app:frontend`的 Pods 的流量。此外，唯一能接受带有标签`app=server`的 Pods 流量的端口是`80`。
一个`ingress`策略集中可以有多个`from`块对应多个流量规则。同样，有了`egress`，可以有多个`to`区块。
需要注意的是，网络策略是按名称空间工作的。默认情况下，如果一个命名空间中没有单一的网络策略，则该命名空间中的 Pod 到 Pod 通信不受限制。但是，一旦单个网络策略选择了特定的 Pod，进出该 Pod 的所有流量都必须明确匹配网络策略规则。如果不符合规则，将被阻止。
考虑到这一点，我们可以轻松地创建策略，对 Pod 网络实施广泛的限制。让我们看看下面的网络策略:
完全限制策略
```
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: full-restriction-policy
  namespace: development
spec:
  policyTypes:
  - Ingress
  - Egress
  podSelector: {}
```
在这个`NetworkPolicy`中，我们指定我们将同时包括一个`Ingress`和`Egress`策略，但是我们不为它们中的任何一个写块。这具有自动拒绝`Egress`和`Ingress`的任何流量的效果，因为没有流量匹配的规则。
此外，我们的`{}` Pod 选择器值对应于选择名称空间中的每个 Pod。该规则的最终结果是`development`命名空间中的每个 Pod 都将无法接受入口流量或发送出口流量。
重要说明
还需要注意的是，网络策略是通过组合所有影响 Pod 的独立网络策略来解释的，然后将所有这些规则的组合应用于 Pod 流量。
这意味着，即使我们在前面的示例中已经限制了`development`命名空间中的所有入口和出口流量，我们仍然可以通过添加另一个网络策略来为特定的 Pods 启用它。
让我们假设现在我们的`development`名称空间对 Pods 有完全的流量限制，我们希望允许 Pods 的一个子集在端口`443`上接收网络流量，并在端口`6379`上向数据库 Pods 发送流量。为了做到这一点，我们只需要创建一个新的网络策略，通过策略的附加性质，允许这种流量。
这就是网络政策的样子:
覆盖-限制-网络-策略. yaml
```
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: override-restriction-policy
  namespace: development
spec:
  podSelector:
    matchLabels:
      app: server
  policyTypes:
  - Ingress
  - Egress
  ingress:
  - from:
    - podSelector:
        matchLabels:
          app: frontend
    ports:
    - protocol: TCP
      port: 443
  egress:
  - to:
    - podSelector:
        matchLabels:
          app: database
    ports:
    - protocol: TCP
      port: 6379
```
在这个网络策略中，我们允许`development`命名空间中的服务器 Pods 从端口`443`上的前端 Pods 接收流量，并将流量发送到端口`6379`上的数据库 Pods。
相反，如果我们希望在没有任何限制的情况下开放所有 Pod 到 Pod 的通信，同时仍然实际制定网络策略，我们可以通过以下 YAML 来实现:
全开放网络政策
```
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: allow-all-egress
spec:
  podSelector: {}
  egress:
  - {}
  ingress:
  - {}
  policyTypes:
  - Egress
  - Ingress
```
现在，我们已经讨论了如何使用网络策略来设置 Pod 到 Pod 流量的规则。但是，也可以将网络策略用作某种面向外部的防火墙。为此，我们创建的网络策略规则不是基于 Pods 作为起点或终点，而是基于外部 IP。
让我们看一个示例网络策略，其中我们限制与 Pod 的通信，以特定 IP 范围为目标:
外部-IP-网络-策略. yaml
```
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: specific-ip-policy
spec:
  podSelector:
    matchLabels:
      app: worker
  policyTypes:
  - Ingress
  - Egress
  ingress:
  - from:
    - ipBlock:
        cidr: 157.10.0.0/16
        except:
        - 157.10.1.0/24
  egress:
  - to:
    - ipBlock:
        cidr: 157.10.0.0/16