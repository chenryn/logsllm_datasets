                some base64 data that represents the signature of the assertion
从上面这个例子中我们可以看到几个重点部分， **NameID** , **CanonicalizationMethod** 以及
**SignatureValue** ，他们分别表示身份识别码，标准化签名方法，校验签名。
SP在校验签名时需要利用CanonicalizationMethod提取SAML Response中的NameID生成签名并与SAML
Response中SignatureValue作对比，如果二者一致则表示签名校验成功并提取NameID中的值作为身份识别码并授予相应的访问权限；反之失败并拒绝用户请求。
通常的CanonicalizationMethod是,
而该方法在签名之前会先解析XML中节点且忽略注释部分，如
    PI:EMAIL
节点NameID中的注释部分``会被忽略，其获取到NameID的值是`PI:EMAIL`而不是`PI:EMAIL`。这样直接导致的一个后果就是不同的NameID可能会产生相同的SignatureValue，这也就为后面的漏洞埋下了伏笔。
而另一方面，SP在签名校验成功后提取SAML
Response中的NameID时使用的XML解析方法却很可能与CanonicalizationMethod不一致。如Python中的`defusedxml.lxml`库在解析`PI:EMAIL`中的NameID时就只会返回`test@example`。如此一来，如果SP的Python-SAML实现中使用的是`defusedxml.lxml`库，那么下面这两个SAML
Response就会产生不同的NameID和相同的SignatureValue。换句话说，我们在原始的SAML Response中的NameID
`PI:EMAIL`中添加了注释，这时SP依旧认为该SAML
Response签名有效但最终却由于XML解析库的不一致的问题提取了错误的用户身份认证码进入了用户`PI:EMAIL`的账户，从而造成了越权用户访问的问题。  
_原始的SAML Response:_
        https://idp.com/
                PI:EMAIL
                some base64 data that represents the signature of the assertion
_篡改后的SAML Response:_
        https://idp.com/
                PI:EMAIL