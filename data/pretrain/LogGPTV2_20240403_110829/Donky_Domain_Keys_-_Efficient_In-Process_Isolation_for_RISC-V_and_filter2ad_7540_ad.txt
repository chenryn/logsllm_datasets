29th USENIX Security Symposium    1685
stack inaccessible to the target domain upon each dcall. Thus,
Donky Monitor can verify its validity when the target domain
attempts to return. On the other hand, a target domain might
violate the calling convention deﬁned by the application bi-
nary interface (ABI) and corrupt callee-saved registers. Our
call wrapper ensures that these registers are restored. Fur-
thermore, the call wrapper optionally erases non-argument
registers upon a dcall to avoid information leakage towards
the target domain. Similarly, to prevent information leakage
to the calling domain, the target wrapper optionally erases the
non-return-argument caller-saved registers before returning.
Spectre attacks. Although Spectre attacks [40] are out-
side our threat model, Donky can also reduce the attack sur-
face by means of protection keys on Meltdown-resilient sys-
tems [13,48]. Kiriansky et al. [39] proposed to use Intel MPK
to mitigate Spectre attacks by shielding sensitive data with
a separate protection key. We reproduced this result with
DonkyLib by constructing a Spectre V1 gadget that leaks a
secret but is blocked as soon as protection keys are enforced.
Therefore, Donky reduces the attack surface of Spectre at-
tacks signiﬁcantly, just as process-based isolation (e.g., site
isolation [67]) at signiﬁcantly lower domain switch costs.
6.2 Performance Evaluation
Donky’s performance is characterized by the domain switch
latency and the execution speed of isolated code and system
call interposition. We used microbenchmarks to measure the
domain switch latency and macro benchmarks to measure
the performance impact of isolated code. The performance of
real-world applications is evaluated in Section 7.
Setup. We evaluated the performance on three different
machines (1) an Intel Xeon 4208 running at 2.1 GHz and
with 16 GB RAM, (2) an Amazon AWS c5.2xlarge instance
with an Intel Xeon 8275CL running at 3.6 GHz and 16 GB
RAM, and (3) our modiﬁed Ariane RISC-V CPU running on
Xilinx Kintex-7 FPGA KC705 at 50 MHz. We use the Linux
kernel version 5.0.0 for (1), 5.3.0 for (2), and 5.1.0 for (3)
in its default conﬁguration. Our microbenchmarks measure
the latency in CPU cycles and compare it to the system call
latency measured using LMbench [54].
Code size. DonkyLib consists of 2693 lines of C code and
34 lines of generic assembly macros, as measured by sloc-
count. RISC-V adds 605+272, and our x86 implementation
516+226 lines of C and assembly code, respectively. This
includes extensive error checks and debugging code.
Latency. Figure 5 shows Donky latencies relative to a null
system call, as this represents the lowest possible time a
kernel-based protection mechanism would need to switch
domains. We ran each test 1000 times and plotted the mean
runtime as well as the standard deviation. Simple Donky
API calls to DonkyLib take 160 cycles (σ = 1.4%) on RISC-
V, as opposed to the getpid system call taking 724 cycles
(σ = 1.9%), as DonkyLib only needs to prepare its stack and
Figure 5: Donky latency for domain switches
pared to system call latency (LMbench)
.
, com-
Table 2: Hardware-based In-process Isolation Systems
Scheme
dcall/syscall
(dcall cycles)
n.a. (5350*)
CPU
(Linux)
kernel
FreeBSD11
(cid:106)
(cid:106) n.a. (~1400/1200)
U
C (cid:106)
lwC [50]
x86-Rings [44]
vmfunc [51]
CHERI [88]
CODOMs [85] C
SGX [41]
(cid:0)
ARMLock [99] ⁄ (cid:106)
Shreds [15] ⁄ (cid:106)(cid:201)
ERIM [82]
⁄ U(cid:201)
Donky
⁄
Donky
⁄
Donky
⁄
C Capabilities (cid:0) Enclave ⁄ Protection keys
(cid:106) Domain switch via kernel
>2x (n.a.)
n.a. (500)
0.1x (30)
71x (7664)
2.6x (385*)
41.7x (n.a.)
0.65x (99)
2.8x (2136)
2.2x (455)
0.3x (428)
3.13.7
Xeon X5650
i7-4770/AMD1800X 4.13
Xeon 3.4GHz
CHERI 64-bit MIPS CheriBSD
gem5-Nehalem
E3-1240v5
Raspberry Pi
Raspberry Pi 2 B
Xeon 6142
RISC-V Ariane
Xeon 4208
Xeon 8275CL
2.6.27
3.19
3.6.11
4.1.15
4.9.60
5.1.0
5.0.0
5.3.0
* Computed from CPU freq.
U No full context switch (cid:201) Instrumentation/CFI
save a few registers. Due to the low latency, performance
numbers vary across CPUs and Linux kernel versions. On
Xeon 8275CL, simple API calls are even eleven times faster
than a system call. To measure a single domain switch, we
tested the latency of returning from a dcall to its caller (i.e.,
the dashed lines in Figure 2). To measure an isolated function
call, we tested a full dcall that returns a static value (i.e., the
solid and dashed lines in Figure 2). Their runtime is domi-
nated by the domain switches, which include register saving
and stack switching, alongside several security checks. Still,
dcalls can compete with the fastest possible system calls. On
RISC-V, it takes 2.8x the time of a null system call. For our
Xeon 4208, it is 2.2x, while on a Xeon 8275CL CPU used in
Amazon Web Services, it is even 66.9 % faster than a null sys-
tem call. When compared to a full process context switch, as
reported by LMbench, Donky is even 16–116x faster, making
it a viable alternative for process-based isolation mechanisms.
Comparing against related work. Table 2 compares iso-
lated function calls (dcalls) to other in-process schemes, ac-
cording to their reported numbers. We collect the dcall/syscall
1686    29th USENIX Security Symposium
USENIX Association
10−11001011020.21.22.81.03.32.140.514.119.967.7113.9RISC-V10−1100101102Execution time relative to a null syscall0.61.12.21.02.61.914.213.529.774.0157.4Xeon 4208Simple API CallDomain SwitchIsolated functionNull SyscallRead SyscallWrite SyscallOpen/CloseSignal HandlerContext SwitchPipeSock10−11001011020.10.20.31.01.31.14.43.419.044.938.5Xeon 8275CLK1 K2 K3
Root-Domain (A)
K1
Allocator
WASM Engine Allocator
K3
Read-only copy
Create Domain
Run Script
Delete Domain
WASM Allocation
k3 K2
V8 Isolate (B)
K2
JS Allocator
WASM Module
k3
Figure 6: Normalized SPECint 2017 score, isolated with
Donky. (Higher is better.)
Figure 7: Interactions between root domain and V8 Iso-
lates. Each Isolate and the WASM-Engine share a key. A
separate allocator is created in the root domain.
ratio and raw dcall cycles to highlight architectural differences.
Donky easily outperforms OS-based schemes [44, 50]. While
virtualization seems to achieve good performance [51], the
numbers only report overhead for switching translation tables,
i.e., extended page tables, but do not prepare stacks or CPU
registers necessary for a full dcall. Although the performance
of capability-based systems is compelling [85, 88], they re-
quire signiﬁcant changes to both hardware and software. SGX
has a different threat model, protecting enclaves from mali-
cious operating systems [41]. Other protection key systems
either require signiﬁcant kernel support for domain switches,
instrumentation+CFI+W⊕X, or both [15, 82, 99]. Especially
CFI enforcement adds signiﬁcant runtime overhead [82] not
shown here, as opposed to Donky. ARM discontinued pro-
tection key support, whose domain switch overhead could
compete with Donky [99] at the expense of kernel changes.
Syscalls. To benchmark system call interposition on x86,
we run LMbench once with and without our system call black-
listing kernel module. We could not observe measurable over-
head even for the fastest Null system call, i.e., the overhead is
below the variance. Triggering a blocked system call outside
Donky Monitor terminates the application. To evaluate the
performance overhead of our proposed RISC-V system call
delegation, we benchmark the most restrictive sandboxing ﬁl-
ter rule that denies all system calls for the sandboxed domain
while allowing them for the root domain. As Donky Monitor
can check the domain ID in optimized assembly, the overhead
is only 30 cycles (13 instructions), compared to an unﬁltered
syscall. Thus, on RISC-V, the fastest system call (null system
call) is slowed down by only 3.7 %.
Computation. To test the impact of Donky on computation
intense workloads without domain switches, we ran the SPEC
CPU 2017 intspeed [73] benchmark suite. Since SPEC is long-
running, it recommends three runs. To increase signiﬁcance,
we used ten runs. We preloaded DonkyLib with LD_PRELOAD
and LD_BIND_NOW, which initializes itself upon process start
and wraps the entire benchmark in a single domain. For com-
parison, we ran SPEC natively with LD_BIND_NOW to avoid
bias. As expected, Figure 6 shows that the isolated code
runs de-facto at the same speed as native code. The geomet-
ric mean runtime overhead for the Xeon 8275CL is -0.16%
(σ = 0.91%) and 0.10% (σ = 0.32%) for the Xeon 4208. Due
to its high memory requirements, we could not run SPEC on
our RISC-V platform.
Memory overhead. DonkyLib uses metadata for manag-
ing domains, which mainly consist of an exception stack for
each thread (i.e., 64 KiB), a stack for each actively used thread-
domain combination (i.e., with the system’s default stack size),
and static domain data. This static data includes a list of mem-
ory regions along with their permissions and owners and a list
of domains with their protection keys and trust-relationships.
For 256 domains, each with at most 4096 memory regions,
1024 keys, and 256 threads, this amounts to 2 MiB of static
data. Of course, these numbers could be optimized, e.g., by
dynamically allocating only as much as is needed.
7 Case Studies
In this section, we evaluate three different real-world use
cases. First, we modify the JavaScript engine V8 to pro-
vides strong Donky isolation, similar to process isolation (e.g.,
site isolation). Second, we sandbox the XML-parsing library
TinyXML-2 [45], without changing the library. Third, we iso-
late the cryptographic library Mbed TLS without changing
the library.
7.1 Case Study 1: Strong JavaScript Isolation
JavaScript engines have a huge potential for vulnerabilities,
such as memory corruption, incorrect compiler optimizations,
type confusion, or erroneous code generation [33]. The popu-
lar V8 JavaScript engine already uses so-called Isolates for
separation, where an Isolate is one instance of a JavaScript
runtime environment. While V8 Isolates already encapsulate
all the required data, there is no hardware-enforced isolation.
Hence, typical exploits escape V8 Isolates by injecting shell-
code in their writable code cache [70], and previous work
enforced a W⊕X policy [64]. However, advanced sandbox
escapes are still possible [33, 68].
In V8, WASM memory is writable and executable by de-
fault [79], allowing for the same injection attacks as on the
code cache. As a ﬁrst layer of defense, we use Donky to en-
force a W⊕X policy on WASM memory. Furthermore, we
add in-process isolation to V8 by encapsulating each Isolate
in a separate domain. That is, each Isolate is assigned one
domain key. Thus, even if an Isolate gains arbitrary code
execution, it is sandboxed in its domain.
USENIX Association
29th USENIX Security Symposium    1687
600.perlbench602.gcc605.mcf620.omnetpp623.xalancbmk625.x264631.deepsjeng641.leela648.exchange2657.xzgeomean0.951.001.05Xeon 8275CLXeon 4208Figure 8: V8 benchmark score with standard deviation
running in Donky-protected V8 Isolates, compared to un-
protected V8 (dotted line). Higher is better.
We modify V8 (version 8.1.99) to use one allocator per
Isolate instead of a global allocator. These per-Isolate alloca-
tors leverage DonkyLib to allocate memory with the domain
key of the Isolate. The root domain (A) creates Isolates and
sets up protection keys and call gates. If a script is executed,
the root domain dispatches the script execution to an Isolate,
and we switch execution into its domain (B) (see Figure 7).
In V8, the WebAssembly (WASM) engine is shared between
Isolates. Thus, we create a separate WASM allocator with
an additional protection key (K3). Since WASM compilation
happens in the root domain, we give the Isolate a read-only
copy of its key (k3). Hence, a compromised Isolate cannot use
WASM memory to inject custom shellcode. Even if it gains
arbitrary code execution, the Isolate cannot access the root
domain, since it does not have access to the root key (K1).
Only a total of 358 LoC were changed in the V8 engine.
Evaluation. To evaluate sandboxing of V8, we run three
JavaScript benchmarks, namely Octane, Kraken, and SunSpi-
der 500 times each. Note that the recommended number of
repetitions is 10 for Octane, 100 for SunSpider, and 80 for
Kraken [81]. Figure 8 shows the overall scores. In total, there
is a performance overhead of 0 to 2 %.
WASM memory corruption is prevented by making its
memory writable only by the root domain. To evaluate it, we
ported a standard C benchmark program [76] to WASM and
measured the overhead between DonkyLib and the original
unprotected code. We looped the setup of the WASM program
and the calculations 100 times internally to produce WASM
memory allocations, with 100 test repetitions, thus giving
10 000 repetitions of the experiment. In total, we observe a
runtime overhead of about 2.96 % (σ = 1.02%).
To evaluate the security of our Donky V8 sandboxing, we
model a strong attacker by providing an arbitrary read and
write primitive accessible as global JavaScript functions. We
simulate an exploit by performing reads and writes on mem-
ory that is not owned by the Isolate’s domain. As expected, all
memory corruption attempts on memory that is not explicitly
assigned to the Isolate domain fail. Since unprotected memory
(key zero) might still be vulnerable, one would also protect
memory outside V8 from corruption by means of Donky.
7.2 Case Study 2: Third-Party Library
In the second case study, we consider an untrusted third-party
library. In the threat model, we assume that the third-party
Figure 9: Relative performance of Mbed TLS [6] bench-
marks [5], when protected with Donky (higher is better).
Similar cryptographic functions are grouped.
Figure 10: Runtime of different block sizes of
Mbed TLS’s Poly1305 with process-based isolation
(upper three lines) and Donky (lower three lines),
normalized using unprotected version.
library contains a vulnerability that can be exploited for ar-
bitrary code execution. As this is often the case for parsing-
related activities, we show that Donky can isolate TinyXML-
2 [45], an XML-parsing library.
To sandbox the library, we wrap the XMLDocument and
XMLElement classes behind Donky dcalls. As these wrap-
pers only call the original methods and handle the domain
switch, they can be generated fully automated, similar to SGX
Edger8r. Hence, the only difference for an application devel-
oper is a different name for the base class. This case study
consists of 105 LoC and uses the unmodiﬁed TinyXML-2
library. We provide it as part of our open-source code.
Evaluation. To evaluate the security beneﬁts of sandboxing
TinyXML-2, we introduce an artiﬁcial vulnerability in the
library. Donky prevents the library from manipulating any
data structures in the host domain, such as the stack. We