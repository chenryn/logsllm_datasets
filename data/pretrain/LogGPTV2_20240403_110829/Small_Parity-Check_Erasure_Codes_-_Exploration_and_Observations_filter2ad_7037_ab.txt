means each of these three may be completely decoded.
The remaining three cannot be decoded until one of the
two left-hand nodes is downloaded. Therefore, the over-
head of the ﬁrst three graphs is zero, and the overhead
of the remaining three graphs is one.
Let G = (c1, c2, c3). To calculate overhead, we note
ways to download n nodes and have
c2
2
that there are
(2, 0, 0) as a residual graph. Likewise, there are
ways
ways to have (0, 2, 0) as a residual graph, and
to have (0, 0, 2) as a residual graph. Therefore, the over-
head of G is:
(cid:5)
(cid:6)
(cid:6)
(cid:5)
(cid:6)
(cid:5)
c3
2
c1
2
5 Optimal
and Near-Optimal
Codes for m ∈ {2, 3, 4, 5}
o(G) = n +
In this section, we use residual graphs to derive closed-
form expressions for the overhead of a graph G which
has m right-hand nodes, and m is small (≤ 5). We
introduce a new nomenclature for this derivation. We
note that the N left-hand nodes of any graph may be
partitioned into 2m − 1 sets, depending on the right-
hand nodes to which they are connected. We label these
sets C1, . . . , C2m−1, and specify that li ∈ Cj if and only
if:
m(cid:2)
j =
2k−1E(i, k),
k=1
where E(i, k) = 1 if (li, rk) is an edge in G, and
E(i, k) = 0 otherwise. Therefore, node l1 in Figure 1 is
an element of C2, l2 ∈ C7, and l7 ∈ C3.
Let ci = |Ci|. Then, one may uniquely specify a
graph G by the values of each ci, rather than by nodes
and edges. For example, the graph in Figure 1 may be
speciﬁed as (1, 1, 1, 1, 1, 1, 1), since there is one of each
of the seven different kinds of left-hand nodes.
For later discussion, we will also deﬁne the func-
tion e(i) to equal the number of one bits in the bi-
nary representation of the integer i. Therefore, if a
node l ∈ Ci, then l has exactly e(i) edges. Finally, we
deﬁne an Edge Class, Ej to be the union of all Ci such
that e(i) = j. We can then discuss the collection of
nodes that have the same number of edges as the nodes
in the same edge class. We will also group together all
counts of nodes in edge class j as all ci ∈ Ej.
5.1 Optimal Codes for m = 2
When m = 2, there are only three different types of
left-hand nodes – those in C1, C2, and C3. When n
nodes are downloaded, only two remain, and there are
only six possible residual graphs, which we specify by
(cid:1)(cid:5)
(cid:6)
c1
2
+
(cid:3)
(cid:5)
(cid:5)
(cid:6)
(cid:6)
(cid:5)
c2
2
N
n
(cid:5)
c3
2
(cid:6)
(cid:5)
+
(cid:6)
.
(cid:6)
Since N = n + 2, we note that
may simplify o(G) as follows:
N
n
=
n+2
2
, and we
o(G) = n + c2
1 + c2
2 + c2
3 − (n + 2)
(n + 2)(n + 1)
.
Since n is a constant,
in order to minimize the
overhead, a graph must minimize c2
It
is easy to prove that this quantity is minimized when
the differences among the ci are minimized. There-
fore, any graph G of the form (x,y,z), where x, y, z ∈
3 (cid:7)} and x + y + z = N , is an optimal graph
{(cid:4) N
for that value of N .
3 (cid:5),(cid:6) N
2 + c2
3.
1 + c2
5.2 Computing Overhead for m = 3
When m = 3, there are seven potential types of left-
hand nodes, denoted by C1, . . . , C7, and a graph G may
be uniquely speciﬁed by its values of c1 through c7.
Suppose n nodes are removed from G, leaving a resid-
ual with just three left-hand nodes. There are 59 resid-
uals that may result that cannot be decoded completely.
We enumerate them, their overheads, and the number of
ways that they may be generated from G’s values of ci,
below:
Residuals with three identical left-hand nodes: An
example is (3,0,0,0,0,0,0). Clearly there are seven types
of these, one for each Ci, and the overhead of decoding
this type of residual is 2. Given G, the number of these
types of residual is
(cid:4)7
(cid:5)
(cid:6)
.
i=1
ci
3
Residuals with exactly two identical
left-hand
nodes: Examples are (2,1,0,0,0,0,0) and (0,1,0,2,0,0,0).
There are 42 types of these, six for each Ci, and
the overhead of decoding this type of residual is 4/3.
Proceedings of the 2005 International Conference on Dependable Systems and Networks (DSN’05) 
0-7695-2282-3/05 $20.00 © 2005 IEEE
Authorized licensed use limited to: Tsinghua University. Downloaded on March 20,2021 at 11:53:32 UTC from IEEE Xplore.  Restrictions apply. 
Given G, the number of these types of residual is:
7(cid:2)
7(cid:2)
i=1
j=1,j(cid:2)=i
(cid:7)
(cid:8)
ci
2
cj =
(cid:7)
7(cid:2)
i=1
ci
2
(cid:8)
(N − ci).
(0,0,1,0,1,1,0): This graph has exactly two edges en-
tering each right-hand node. Its overhead is one, and the
number of these graphs is c3c5c6.
(1,0,0,0,0,1,1), (0,1,0,0,1,0,1) and (0,0,1,1,0,0,1):
As above, these graphs have exactly two edges enter-
ing each right-hand node. Their overhead is one, and
the number of these graphs is c1c6c7 + c2c5c7 + c4c3c7.
(1,1,1,0,0,0,0), (1,0,0,1,1,0,0) and (0,1,0,1,0,1,0):
These graphs have two right-hand nodes with two edges
and one with zero. Their overhead is one, and the num-
ber of these graphs is c1c2c3 + c1c4c5 + c2c4c6.
(0,0,1,0,1,0,1), (0,0,1,0,0,1,1) and (0,0,0,0,1,1,1):
These graphs have two right-hand nodes with three
edges and one with two. Their overhead is one, and the
number of these graphs is c3c5c7 + c3c6c7 + c5c6c7.
Therefore, the overhead of a graph with m = 3 is
given by the following rather tedious equation:
(cid:4)7
(cid:5)
(cid:6)
o(G) = n +
2
ci
3
+ 4
3
i=1
ci
2
i=1
(cid:5)
(cid:6)
(N − ci)
+
(cid:4)7
(cid:6)
(cid:5)
N
3
c3c5c6 + c1c6c7 + c2c5c7 + c4c3c7 + c1c2c3
c1c4c5 + c2c4c6 + c3c5c7 + c3c6c7 + c5c6c7
+
.
(cid:5)
(cid:5)
N
3
(cid:6)
(cid:6)
N
3
Unlike for m = 2, minimizing this equation is not
straightforward. We discuss how we enumerate graphs
to determine the optimal ones below in Section 5.4.
5.3 The Overhead of Arbitrary m
When m > 3, there are far too many residual graphs
with non-zero overhead to enumerate by hand.
In-
stead, we may enumerate them electronically and cal-
culate their overheads. Using such an enumeration,
we may calculate the overhead of any graph G =
(c1, . . . , c2m−1) as follows. Given a residual graph R =
(r1, . . . , r2m−1), the number of ways that R may result
from downloading n bits from G is:
(cid:7)
2m−1(cid:9)
(cid:8)
ci
ri
i=1
This will be the product of at most m terms, since
(cid:4)2m−1
i=1
ri = m.
Thus, if Rm is the set of all residual graphs with non-
zero overhead, then the overhead of a graph G is:
(cid:4)
R∈Rm
(cid:5)
(cid:13)2m−1
(cid:6)
i=1
ci
ri
(cid:6)(cid:14)
 .
(cid:12)
o(R)
(cid:5)
N
m
o(G) = n +
Of course,
the size of Rm increases exponen-
tially, so this technique is only practical for small m.
When m = 4, there are 2,617 residual graphs with non-
zero overhead, and calculating the overhead of a graph
takes roughly 2 milliseconds on a Dell Precision 330.
When m = 5, there are 295,351 residual graphs with
non-zero overhead, and calculating the overhead of a
graph takes roughly 128 milliseconds. When m = 6,
there are 105,671,841 residual graphs with non-zero
overhead, and calculating the overhead of a graph is
too expensive for an exhaustive exploration of the type
that we are pursuing. Thus, in the data that follows, we
limit m to be less than or equal to 5.
5.4 Finding Optimal and UBp Codes for
m ∈ {3, 4, 5}
When m > 2, minimizing o(G) mathematically is not
straightforward and remains an interesting open prob-
lem. Here we use enumeration and heuristics to ﬁnd the
best codes. Unfortunately, graph enumeration is also ex-
ponential in n and m; therefore, for all but the smallest
values of n and m, we prune the search using a heuris-
tic that we call perturbation by p elements. We take the
best code for n − 1 and generate all codes for n that can
be derived from the n − 1 code by subtracting up to p
elements from the various ci, and adding up to p + 1
elements to the other ci. For example, the optimal code
for m = 3 and n = 32 is (6,6,5,6,4,4,4). The opti-
mal code for n = 33, (6,6,5,6,5,5,3), is derived from the
code for n = 32 by subtracting one from c7, and adding
one to c5 and c6 - a perturbation with p = 1. We use this
technique to generate what we call UBp codes, which
stands for Upper Bound, perturbed by p.
We generated optimal and UBp codes for the values
of m and n listed in Table 1. The total CPU time to
generate these 2910 codes is 681 days. Fortunately, the
enumerations and perturbations are easily parallelizable,
and we were able to enlist 89 machines of varying ﬂa-
vors and speeds to cut that time by a factor of 20.
The UBp codes are not provably optimal. We believe
that for each value of m, there is a minimum value of p
for which all UBp codes will be provably optimal, and
that p will grow with m. For example, for m = 3 in our
tests, the maximum value of p for which UBp (cid:8)=UBp−1
is two. For m = 4, that value is 3, and only occurs
in one case (deriving n = 137 from n = 138). Proving
Proceedings of the 2005 International Conference on Dependable Systems and Networks (DSN’05) 
0-7695-2282-3/05 $20.00 © 2005 IEEE
Authorized licensed use limited to: Tsinghua University. Downloaded on March 20,2021 at 11:53:32 UTC from IEEE Xplore.  Restrictions apply. 
m Optimal Codes UBp Codes
n ≤ 1750
n ≤ 1000
n ≤ 160
n ≤ 50
n ≤ 10
n ≤ 3
3
4
5
p CPU time /
UBp code
6
4
2
10s
3h 49m
78h 13m
Table 1: Range of optimal and UBp codes generated
what this value is for a given value of m is an open ques-
tion. We are conﬁdent that for m ≤ 4 in our tests, our
UBp codes are optimal. We doubt that the UB2 codes
for m = 5 are (in fact, a counterexample is given in
Section 6 below). Unfortunately, we cannot call them
optimal until optimality is proved, and thus they repre-
sent the upper bounds of the best codes known.
The 2910 codes that we derived are too numerous to
present in their entirety here. However, since they are
important, we have published them in Technical Report
form in [Pla04].
6 Observations
We discuss some of the collective characteristics of our
UBp codes here. This discussion is in the form of ques-