L 
L 
L 
C 
(a) Two Sub-warps
(b) Deformation into Three Sub-warps
Decode and 
schedule 
Issue 
EX1 
EXN  Write-Back 
(a) Baseline pipeline
Decode and 
schedule 
Issue 
Shuffling 
EX1 
EXN 
Reshuffling 
Write-Back 
Figure 7: Dynamic Warp Deformation
  Shuffling Control 
Selective Write 
    Reshuffling Control 
 1 
 1 
 1 
 1 
 1 
 1 
 0 
 1 
L 
L 
C 
c 
C 
L 
L 
L 
C 
Cluster_0 
Cluster_1 
 1 
 1 
 0 
 0 
 1 
 1 
 0 
 0 
 0 
 0 
 1 
 1 
0 
0 
0 
1 
L 
L 
C 
c 
C 
L 
L 
L 
C 
L 
L 
C 
c 
C 
L 
L 
L 
C 
Cluster_0 
Cluster_1 
Cluster_0 
Cluster_1 
Sub-warp_0 
Sub-warp_1 
Figure 8: Deformation for Two SIMT Clusters
even avoid warp deformation completely whenever possible.
To achieve this goal, we propose inter-SP warp shufﬂing
mechanism which strives to issue every warp instruction to
the most appropriate SP (i.e. the SP where no deformation
is required or the SP where fewer sub-warps are needed). To
understand how inter-SP warp shufﬂing works, lets consider
the case where warp instructions X and Y are to be issued
to SP0 and SP1. Due to variable SIMT lane utilization and
process variations, SP0 and SP1 may suffer from different
number of faulty SIMT lanes. Hence, issuing warp instruc-
tion X to SP0 might require three sub-warps, while issuing
X to SP1 might require no deformation. Similarly, issuing
warp instruction Y to SP0 might require two sub-warps,
while issuing Y to SP1 might require three sub-warps. In
this case, the inter-SP warp shufﬂing mechanism helps to
reduce the deformation overhead by issuing warp instruction
X to SP1 and warp instruction Y to SP0.
IV. ARCHITECTURAL SUPPORT
A. Intra-Cluster Thread Shufﬂing
The intra-cluster thread shufﬂing approach is dependent
on the cluster’s fault map. The fault map essentially shows
which SIMT lanes within the cluster are healthy and which
lanes are suffering from permanent faults. Clusters’ fault
maps are assumed to be generated using prior error detection
techniques that are speciﬁcally targeting GPGPUs [13].
Based on the fault map of the cluster, threads mapped to
the cluster are shufﬂed to avoid issuing any active thread to
a faulty lane.
The implementation of intra-cluster thread shufﬂing con-
sists of one stage of multiplexers, called shufﬂing MUXes,
added between the issue queues and the SIMT lanes. After
execution completes, we need to reshufﬂe the threads to
their original lanes in order to write back their results to
the corresponding register ﬁle banks. Hence, another stage
i
P
p
e
R
e
g
s
t
i
e
r
0
L0 
L1 
L2 
L3 
i
P
p
e
R
e
g
s
t
i
e
r
1
i
P
p
e
R
e
g
s
t
i
e
r
N
+
1
i
P
p
e
R
e
g
s
t
i
e
r
N
+
2
(b) Proposed pipeline
Figure 9: Intra-Cluster Thread Shufﬂing Implementation
of multiplexers (i.e. reshufﬂing MUXes) is added between
the last execution stage and the write-back stage.
Fig. 9b shows the shufﬂing and reshufﬂing stages added
to the SIMT lane pipeline. For each lane, we add a 4-to-
1 shufﬂing and reshufﬂing MUXes. The shufﬂing MUX
forwards one of the cluster’s four threads to the correspond-
ing lane and the reshufﬂing MUX forwards the output of
the thread back to the SIMT lane where the thread was
originally mapped to. The select signals of the shufﬂing and
reshufﬂing multiplexers are generated by the intra-cluster
thread shufﬂing control logic using the warp active mask
and the clusters’ fault maps.
The truth table given in Table I represents the functionality
of the intra-cluster thread shufﬂing control logic for a single
cluster. The outputs are the select signals of the shufﬂing
and reshufﬂing multiplexers for the four SIMT lanes (i.e.
L3, L2, L1, and L0). The inputs are the cluster’s active
mask and fault map. When a bit is set to ’1’ in the active
mask, it indicates that an active thread is mapped to the
corresponding SIMT lane. Otherwise, the SIMT lane is idle.
Also, when a bit is set to ’1’ in the fault map, it indicates
that the corresponding SIMT lane is faulty. Otherwise, the
SIMT lane is healthy.
There are 16 possible combinations for the cluster’s active
mask and 16 possible combinations for the cluster’s fault
map, so there should be 256 rows in Table I. However,
all scenarios where the number of 1’s in the active mask
(i.e. number of active threads) is greater than the number
of 0’s in the fault map (i.e. number of healthy lanes) are
handled using dynamic warp deformation ﬁrst and then intra-
cluster thread shufﬂing might be used afterwards. So, the
intra-cluster thread shufﬂing control logic only deals with
scenarios where the number of active threads is less than or
equal to the number of healthy SIMT lanes.
The 11 combinations shown in the table are representa-
tives of all possible combinations. For example, in the ﬁrst
row, when no active thread is mapped to the cluster, the
436436436
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 08:27:21 UTC from IEEE Xplore.  Restrictions apply. 
Active
Mask
0000
0001
0001
0001
0001
0110
0110
0110
0111
0111
1111
Fault
Map
xxxx
0111
1001
0001
0000
0110
0100
0000
0001
0000
0000
L3
xx
00
xx
xx
xx
10
10
xx
00
xx
11
Shufﬂing
MUX
L2
xx
xx
xx
xx
xx
xx
xx
10
10
10
10
L1
xx
xx
00
00
xx
xx
01
01
01
01
01
L0
xx
xx
xx
xx
00
01
xx
xx
xx
00
00
L3
xx
xx
xx
xx
xx
xx
xx
xx
xx
xx
11
Reshufﬂing
MUX
L2
xx
xx
xx
xx
xx
11
11
10
10
10
10
L1
xx
xx
xx
xx
xx
00
01
01
01
01
01
L0
xx
11
01
01
00
xx
xx
xx
11
00
00
Table I: Intra-Cluster Thread Shufﬂing Control Logic
select signals of all shufﬂing and reshufﬂing MUXes are
”don’t care”. On the other hand, when the number of active
threads is four and the number of healthy lanes is four ,as in
the last row, each thread is forwarded to its original lane and
no shufﬂing is required. An example of a scenario, where
shufﬂing is required, is given in the 2nd row of the table.
A single thread is originally mapped to lane 0 (L0) and the
cluster fault map indicates that the only healthy lane in the
cluster is lane 3 (L3). As a result, the select signals of L3
shufﬂing MUX should be set to ”00” in order to forward
the thread from L0 to L3. Similarly, the select signals of
L0 reshufﬂing MUX should be set to ”11” to forward the
output of L3 back to L0 before writing the results back to
the register ﬁle.
Note that for many scenarios, there are multiple shufﬂing
options, which help to reduce the design complexity of the
shufﬂing control logic. For example, the scenario in the
3rd row assumes one active thread mapped to L0 and two
healthy lanes (i.e. L1 and L2). In this case, we can either
choose to shufﬂe the thread to L1, as shown in the table, or
equivalently to L2. Eventually, we should choose the option
that simplify the design of the shufﬂing control logic.
B. Warp Deformation and Scheduling
The decision on whether dynamic warp deformation is
required or not can be deduced from the warp’s active mask
and the fault map of the streaming processor (SP0 or SP1)
to which the warp will be issued. The logic that decides
on dynamic warp deformation is implemented as part of the
warp scheduler. We refer to the modiﬁed warp scheduler as
the Reliability-Aware-Scheduler (RASc).
In addition to the functionality of the original warp
scheduler, the RASc has two extra tasks: ﬁrst, it decides
whether warp deformation is required. Second, if deforma-
tion is needed, the RASc determines the number of sub-
warps necessary to tolerate the existing hard faults. When
performing these two tasks, the RASc must take into account
the fault maps of both SP0 and SP1. The reason is that the
streaming processor to which the current warp will be issued
is not known at the scheduler level. That decision is made
later by the warp issue logic.
In order to decide whether warp deformation is needed
or not, the RASc compares the active mask of every cluster
with its corresponding fault map. When the number of active
threads is less than or equal to the number of healthy SIMT
lanes in the cluster, no deformation is needed. Otherwise,
deformation is needed and the number of required sub-warps
for the cluster is computed as follows:
Nsub−warps = (cid:2) Nactive−threads
Nhealthy−lanes
(cid:3)
(1)
When all clusters within the warp do not require deforma-
tion, the original warp will not be split for the corresponding
SP and intra-cluster thread shufﬂing is considered sufﬁcient
to avoid any faulty SIMT lanes. On the other hand, if at least
one cluster requires deformation, then the original warp will
be split for the corresponding SP and the number of sub-
warps is computed as the maximum of Nsub−warps across
all clusters.
The Nsub−warps of all clusters, within the SP, are com-
pared with each other using a tree of 3-bit comparators