```
$ mv --no-clobber example.txt ~/Documents
$ ls
example.txt
```
#### 带备份的移动
如果你使用 GNU `mv`，有一个备份选项提供了另外一种安全移动的方式。要为任何冲突的目标文件创建备份文件，可以使用 `-b` 选项。
```
$ mv -b example.txt ~/Documents
$ ls ~/Documents
example.txt    example.txt~
```
这个选项可以确保 `mv` 完成移动操作，但是也会保护目录位置的已有文件。
另外的 GNU 备份选项是 `--backup`，它带有一个定义了备份文件如何命名的参数。
* `existing`：如果在目标位置已经存在了编号备份文件，那么会创建编号备份。否则，会使用 `simple` 方式。
* `none`：即使设置了 `--backup`，也不会创建备份。当 `mv` 被别名定义为带有备份选项时，这个选项可以覆盖这种行为。
* `numbered`：给目标文件名附加一个编号。
* `simple`：给目标文件附加一个 `~`，当你日常使用带有 `--ignore-backups` 选项的 [ls](https://opensource.com/article/19/7/master-ls-command) 时，这些文件可以很方便地隐藏起来。
简单来说：
```
$ mv --backup=numbered example.txt ~/Documents
$ ls ~/Documents
-rw-rw-r--. 1 seth users 128 Aug  1 17:23 example.txt
-rw-rw-r--. 1 seth users 128 Aug  1 17:20 example.txt.~1~
```
可以使用环境变量 `VERSION_CONTROL` 设置默认的备份方案。你可以在 `~/.bashrc` 文件中设置该环境变量，也可以在命令前动态设置：
```
$ VERSION_CONTROL=numbered mv --backup example.txt ~/Documents
$ ls ~/Documents
-rw-rw-r--. 1 seth users 128 Aug  1 17:23 example.txt
-rw-rw-r--. 1 seth users 128 Aug  1 17:20 example.txt.~1~
-rw-rw-r--. 1 seth users 128 Aug  1 17:22 example.txt.~2~
```
`--backup` 选项仍然遵循 `--interactive` 或 `-i` 选项，因此即使它在执行备份之前创建了备份，它仍会提示你覆盖目标文件：
```
$ mv --backup=numbered example.txt ~/Documents
mv: overwrite '~/Documents/example.txt'? y
$ ls ~/Documents
-rw-rw-r--. 1 seth users 128 Aug  1 17:24 example.txt
-rw-rw-r--. 1 seth users 128 Aug  1 17:20 example.txt.~1~
-rw-rw-r--. 1 seth users 128 Aug  1 17:22 example.txt.~2~
-rw-rw-r--. 1 seth users 128 Aug  1 17:23 example.txt.~3~
```
你可以使用 `--force` 或 `-f` 选项覆盖 `-i`。
```
$ mv --backup=numbered --force example.txt ~/Documents
$ ls ~/Documents
-rw-rw-r--. 1 seth users 128 Aug  1 17:26 example.txt
-rw-rw-r--. 1 seth users 128 Aug  1 17:20 example.txt.~1~
-rw-rw-r--. 1 seth users 128 Aug  1 17:22 example.txt.~2~
-rw-rw-r--. 1 seth users 128 Aug  1 17:24 example.txt.~3~
-rw-rw-r--. 1 seth users 128 Aug  1 17:25 example.txt.~4~
```
`--backup` 选项在 BSD `mv` 中不可用。
#### 一次性移动多个文件
移动多个文件时，`mv` 会将最终目录视为目标：
```
$ mv foo bar baz ~/Documents
$ ls ~/Documents
foo   bar   baz
```
如果最后一个项目不是目录，则 `mv` 返回错误：
```
$ mv foo bar baz
mv: target 'baz' is not a directory
```
GNU `mv` 的语法相当灵活。如果无法把目标目录作为提供给 `mv` 命令的最终参数，请使用 `--target-directory` 或 `-t` 选项：
```
$ mv --target-directory=~/Documents foo bar baz
$ ls ~/Documents
foo   bar   baz
```
当从某些其他命令的输出构造 `mv` 命令时（例如 `find` 命令、`xargs` 或 [GNU Parallel](https://opensource.com/article/18/5/gnu-parallel)），这特别有用。
#### 基于修改时间移动
使用 GNU `mv`，你可以根据要移动的文件是否比要替换的目标文件新来定义移动动作。该方式可以通过 `--update` 或 `-u` 选项使用，在BSD `mv` 中不可用：
```
$ ls -l ~/Documents
-rw-rw-r--. 1 seth users 128 Aug  1 17:32 example.txt
$ ls -l
-rw-rw-r--. 1 seth users 128 Aug  1 17:42 example.txt
$ mv --update example.txt ~/Documents
$ ls -l ~/Documents
-rw-rw-r--. 1 seth users 128 Aug  1 17:42 example.txt
$ ls -l
```
此结果仅基于文件的修改时间，而不是两个文件的差异，因此请谨慎使用。只需使用 `touch` 命令即可愚弄 `mv`：
```
$ cat example.txt
one
$ cat ~/Documents/example.txt
one
two
$ touch example.txt
$ mv --update example.txt ~/Documents
$ cat ~/Documents/example.txt
one
```
显然，这不是最智能的更新功能，但是它提供了防止覆盖最新数据的基本保护。
### 移动
除了 `mv` 命令以外，还有更多的移动数据的方法，但是作为这项任务的默认程序，`mv` 是一个很好的通用选择。现在你知道了有哪些可以使用的选项，可以比以前更智能地使用 `mv` 了。
---
via: 
作者：[Seth Kenlon](https://opensource.com/users/sethhttps://opensource.com/users/doni08521059) 选题：[lujun9972](https://github.com/lujun9972) 译者：[wxy](https://github.com/wxy) 校对：[wxy](https://github.com/wxy)
本文由 [LCTT](https://github.com/LCTT/TranslateProject) 原创编译，[Linux中国](https://linux.cn/) 荣誉推出