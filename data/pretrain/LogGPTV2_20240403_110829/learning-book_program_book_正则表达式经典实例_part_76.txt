是一个或多个0～9和A~F（不区分大小写）的十六进制数字。字符实体引用被写作
394第8章
www.TopSage.com
---
## Page 411
&entityname;（区分大小写，这与大多数其他HTML特性不同），当需要输人在某些情
境中比较敏感的字面字符，例如尖括号（）、双引号（"）和and符号（&amp;）
时，它们会格外有用。
同样很常见的还有实体引用&nbsp；（即不换行的空格，位置0xAo），这个实体是很有
用的，因为它会使该字符的所有出现都进行显示，如果它们连续出现的时候会显示多
次。而空格、制表符和换行符通常都会被显示为单个的空格字符，即使它们中的许多
个连续出现也只显示一次。在字符引用之外不能使用and字符（&）。
下面是HTML中注释的语法：
在注释中的内容不拥有特殊的含义，并且对于大多数用户代理（agent）来说都是看不
到的。在结束的--和>之间允许出现空格。为了保持与早期（1995年之前）的浏览
器兼容，有些人会把和元素的内容放到一个HTML注释中。现代浏
览器则会忽略这些注释，按照正常的方式来处理脚本或样式内容。
最后，HTML文档通常会使用一个文档类型声明（documenttypedeclaration）来作为开
始，有时候也被非正式地称作一个“DOCTYPE”，它会用来标识一种机器可读的规范，
说明该文档充许和禁止出现的内容。DOCTYPE有点类似一个HTML元素，下面所给
的例子中说明该文档希望严格遵守HTML4.01的严格定义：
上面只给出了HTML文档的物理结构的一个简要介绍。需要注意的是现实世界中的
HTML通常会偏离这些规则，而大多数浏览器也都会很乐意适应这些变体。除了这些
基本规则，在一个合法的HTML文档中，每个元素对于在其中可以出现的内容和属性
也会有一些限制。这些内容规则超出了本书的范围，但是如果读者希望了解更多的信
息，我们推荐读者参考O'Reilly出版社出版的，由ChuckMusciano和BillKennedy所
著的HTML&XHTML：TheDefinitiveGuide一书。
提示
因为HTML的结构与XHTML和XML（这两种语言随后会进行介绍）非
种标记语言。
可扩展的超文本标记语言（XHTML）
XHTML在设计时是作为HTML4.01的后续版本，它把HTML从它的SGML传统格式
转向了以XML为基础的格式。然而，HTML的发展现在又走向了另外一条路，因此
标记语言和数据交换395
www.TopSage.com
---
## Page 412
XHTML更准确地说可以被认为是HTML的一个替代选择。本书会涉及XHTML1.0和
XHTML1.1版本。虽然这些版本的标准大多与HTML是向后兼容的，但是其中与我们
刚刚讲过的HTML结构还是存在一些关键的区别。
XHTML文档可以用一个XML声明作为开头，例如。
非空元素必须包含一个结束标签。空元素则必须使用一个结束标签或者以>作为
结束。
元素和属性名称是区分大小写的，并且要使用小写学母形式。
由于使用了XML命名空间前缀，元素和属性名称中除了HTML名称中允许的字
符之外，还可以包含一个曾号。
不允许出现没有使用引号括起来的属性值。属性值必须只能出现在两个单引号或
双引号之间。
·属性必须拥有一个对应的值。
在HTML和XHTML之间还存在许多其他的区别，通常被用来处理边界情况和错
误处理，因此它们通常不会影响到本章中的正则表达式。如果希望了解HTML和
XHTML之间区别的更多信息，请参考http://www.w3.org/TR/xhtml1/#diffs和
http://wiki.whatwg.org/wiki/HTML_vs._XHTML。
提示
因为XHTML的结构与HTML非常类似，而它又是从XML而来的，因
XHTML。一般很难遇到一个文档中只使用HTML或XHTML，因为现在
通常遇到的都是混合的情形，而浏览器也会对此提供支持。
可扩展标记语言（XML）
XML是一种通用语言，主要设计的目的是为了共享有结构的数据。以它为基础创建了
很多种标记语言，其中就包括了我们刚刚介绍的XHTML。本书会涉及XML的1.0版
和1.1版。本书无法对XML特性和语法进行完整的描述，但是为了方便起见，我们会
指出它与刚刚介绍过的HTML结构之间的关键区别。
·XML文档可以以一个XML声明作为开始，例如，它也可以包含其他类似格式的处理指示。例如，会声明需要把xSL转换文件transform.xslt应
用到该文档之上。
396第8章
www.TopSage.com
---
## Page 413
DOCTYPE中可以在方括号之内包含内部的标记声明。例如：
]>
CDATA部分可以用来对文本段进行转义。它们以字符串之后结束。
非空元素必须包含个结束标签。空元素则必须使用一个结束标签，或者以>作
为结束。
XML名称（它会管理元素、属性和实体引用的名称规则）是区分大小写的，而且
可以使用很大一部分Unicode字符。其中允许出现的字符包括A～Z、a～Z、冒号
(:）和下划线（_），并且在第一个字符之后允许出现0～9、连字符（-）和句点（.)。
更多细节请参考实例8.4。
不允许出现没有使用引号括起来的属性值。属性值必须只能出现在单引号或双引
号之间。
·属性必须拥有一个对应的值。
除此之外，要编写一个格式良好的XML文档，或者是你想要编写自已的XML解释器，
那么还需要遵守许多其他的规则。然而，对于简单的正则表达式查找来说，我们刚刚
介绍过的规则（再加上已经介绍过的HTML文档结构规则）通常来说就足够了。
提示
因为XML的结构与HTML非常类似，而它又是XHTML的基础，因此
：本章中的许多正则表达式都会被设计来支持所有这3种标记语言.如果
一个实例中标明了处理的是“XML风格”的标记，那么它可以同时处理
XML、XHTML和HTML。
逗号分隔值（CSV）
CSV是-一种虽然很古老但是依然非常常用的文件格式，它可以用来表示类似电子表格
的数据。现在大多数的电子表格和数据库管理系统都依然支持CSV格式。在应用程序
之间进行数据交换时，CSV是尤为常见的格式。虽然并不存在官方的CSV规范，但是
在2005年10月发布的RFC4180标准尝试为CSV提供通用的定义，并且在IANA注
册了MIME类型“ext/csv”。在这个RFC发布之前，MicrosoftExcel中使用的CSV风
格通常被或多或少地当作一个事实上的标准。因为RFC所规定的规则与Excel使用的
规则非常类似，所以这并没有带来太大的问题。本章会涉及RFC4180中规定的以及在
MicrosoftExcel2003及更高版本中使用的CSV格式。
从它的名字中就可以看出来，CSV文件中包含由逗号作为分隔的值或域（field）的列
标记语言和数据交换
397
www.TopSage.com
---
## Page 414
表。每行，或者称作一个记录（record)，会出现在自已的一行中。一个记录中的最后
一个域之后不用跟着逗号。个文件中的最后一个记录之后可以也可以不必跟一个换
行符。在整个文件中，每个记录都必须拥有相同数量的域。
每个CSV域的取值可以是没有修饰的，也可以用双引号括起来。域同样也可以是全空
的。如果一个域中包含了逗号、双引号或者换行符，那么它必须用双引号括起来。出
现在一个域内部的双引号会在之前加一个双引号来进行转义。
在一个CSV文件中的第一个记录有时候会被用作包含每列名称的一个标题行。因为无
法通过编程来完全根据一个CSV文件的内容来决定第一行是否是标题行，因此有些应
用程序会提示用户决定第一行应该如何进行处理。
RFC4180中规定了在一个域中前导和拖尾的空格都会被当作该值的一部分。有些老版
本的Excel会忽略这些空格，但是Excel2003和更高版本都在这一点上遵守了RFC的
规定。RFC并没有规定对于没有转义的双引号或者几乎其他任何出错情况应该如何进
行处理。Excel的错误处理在一些边界情况下也会出现无法预测的情形，因此一定要确
保双引号都进行了转义，而且包含双引号的域都使用双引号括起来，并且括起来的域
不会在双引号之外包含前导或者拖尾的空格。
下面的CSV示例展示了我们刚刚介绍过的许多规则。它包含了2个记录，每个记录包
含3个域：
aaa,b b,"""c"" cc""
1,,"333,three,
still more threes"
表8-1给出了上面的CSV内容在表格中表现出来的形式。
表8-1CSV输出示例
aaa
b b
"c"cc
1
（空）
333,three,
still more threes
我们刚刚介绍的是本章中使用的CSV规则，然而在不同程序对CSV文件的读写过
程中，还是会存在相当多的变体。许多应用程序中甚至会允许使用“csv”扩展名的文
件中使用除了逗号之外的任意分隔符。其他常见的变体包括如何在域中嵌入逗号（或
其他域分隔符）、双引号和换行符，以及在没有使用引号的域中如何处理前导和拖尾的
空格（可以忽略它们，或者当作字面文本来处理）。
初始化文件（INI）
轻量级的INI文件格式通常被用作配置文件。它不拥有严格的定义，因为当该格式被不
同程序和系统解释的时候，会出现相当多的变体。本章中的正则表达式会遵守我们下
嘉8l86E
www.TopSage.com
---
## Page 415
面要介绍的最常见的INI文件约定。
INI文件中的参数（parameter）是名称-值对，使用等号和可选的空格或制表符进行分
隔。值会被包在单引号或双引号之间，这样就充许它们包含前导或拖尾的空格与其他
特殊字符。
参数会被组织成多个段（section），每个段会以只包含用方括号括起来的段名称的一
行作为开始。段的内容会一直延伸到下一个段的声明，或者是文件结束。段之间不能
嵌套。
分号用来标记一个注释的开始，注释会延伸到一行的结束。注释可以同一个参数或段
声明出现在同一行中。在注释中包含的内容不拥有任何特殊含义。
下面是一个INI文件的例子，其中包含了一个介绍性注释（用来说明文件最后一个
，u，）（s，，）（日
"content")：
; last modified 2008-12-25
[user]
name=J.Random Hacker
[post]
title = Regular Expressions Rock!
content="Let me count the ways..."
8.1查找XML风格的标签
问题描述
你想要匹配一个字符串之中的任意HTML、XHTML或XML标签，目的是对它们执行
删除、修改、统计或者其他操作。
解决方案
什么是最适合的解决方案取决于几个因素，包括你认为可以接受的准确度、效率和对
错误标记的容忍程度。一旦确定了适合你的需要的方式，接着就可以对得到的结果执
行各种各样的操作。然而，不管你是想要删除标签、在标签之内进行查找、添加或删
除属性，还是把它们替换为其他的标记，第一步都是要首先找到它们。
请注意这个实例会比较长，而且其中充满了微妙的细节、例外情况和各种变化形式。
如果你要找的是一个简单快速的解答，而不想花费很多时间来确定适合你需求的最佳
解决方案，那么可以选择直接跳到本实例中的“(X)HTML标签（灵活方案）”小节，
在那里你会找到一个适合最普通的大众化需求的解答。
标记语言和数据交换
399
www.TopSage.com
---
## Page 416
速成方案
下面给出的第一种解决方案非常简单，而且你可能想像不到它的使用也很频繁，然而我
们把它放在这里主要是用于对比的目的，并且会逐一检查它的不足之处。如果你知道正
在处理的文本是什么内容，而且也并不过分关心错误处理会带来的后果，那么它有时候也
足够用了。这个正则表达式会首先匹配一个为止：
]*>
正则选项：无
正则流派：.NET、Java、JavaScript、PCRE、Perl、Python、Ruby
在属性值中充许出现>
下面这个正则式其实相当简单，而且也无法正确处理所有的情形。然而，如果你只用
它来处理合法的（X）HTML片段，那么它也可能足够满足你的需要。与上一个正则式相
比，它的优点是能够正确忽略掉出现在属性值之中的>字符：
正则选项：无
正则流派：.NET、Java、JavaScript、PCRE、Perl、Python、Ruby
下面是这个正则式的宽松排列形式，为了提高可读性，在其中添加了空白和注释：
"]
#没有被引起来的字符，或者..·
1"[×"]*"
#双引号引起来的属性值，或者.：
1*[+]*