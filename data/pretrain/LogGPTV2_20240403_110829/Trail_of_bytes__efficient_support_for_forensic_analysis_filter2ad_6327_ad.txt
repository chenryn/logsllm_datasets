part of the stealthy Sinowal family. Mebroot serves as a
good example as reports by F-Secure [8] labels it as one of
the “stealthiest” malware they have encountered because it
eschews traditional windows system call hooking, thereby
making its execution very hard to detect. The anatomy of
the Mebroot attack can be summarized as follows: ﬁrst, a
binary is downloaded and executed. Next, the payload (i.e.,
from the binary) is installed, and the master boot record
(MBR) is modiﬁed. Lastly, the installer deletes itself.
S
installer executes
read
D,S
old
MBR
read
2x write
repeated reads
end of 
disk
D,S,M
write
end of 
disk
D,S,M
new
MBR
D
installer deletes 
itself
D,S
Logging 
Disk Monitoring
System Call Monitoring
Memory Monitoring
D
S
M
Figure 6: Annotated graph of the causal reconstruction of Meb-
root’s attack vector as recovered from processing the audit logs
To understand what Mebroot did, we issued report(∞,
causal, ID(Mebroot)). The reason why the causal relation-
ship between the ﬁrst two steps is built by our monitoring
infrastructure should be obvious. In our platform, the con-
nection between the ﬁrst and last steps is made when the
ﬁle deletion is noted (i.e., when the storage module rescans
the inodes). An annotated proﬁle of the behavior recovered
from our audit log is shown in Figure 6. Notice that because
we store “diﬀs” in the version trees, we are also able to see
all the modiﬁcations made to the MBR.
To further evaluate the strength of our platform in help-
ing an analyst quickly reconstruct what happened after a
compromise is detected, we provided two malware samples
to a seasoned malware analyst (i.e., the second author) for
inspection. In both cases, the malware was successfully un-
packed and disassembled using commercial software and in-
spected using dynamic analysis techniques for system-call
sequence analysis, for ﬁnding the payload in memory, and
for single-stepping its execution. We then compared our re-
sults to those from this labor-intensive exercise.
Phalanx2
Mebroot
Syscall
%
Storage
Memory
Other
0.72
0.26
0.02
Manual Forensic Manual Forensic
0.95
0.05
0.0
0.68
0.30
0.02
0.91
0.08
0.01
Table 2: Comparison of the proﬁles created by manual analysis
vs. reconstruction using our platform
The breakdown in terms of diagnosed functionality is shown
in Table 2. The overall results were strikingly similar, though
the analyst was able to discover several hooks coded in Pha-
lanx2 (a sophisticated info stealer) for hiding itself, the pres-
ence of a backdoor, and diﬀerent modes for injection that are
not observable by our platform. From a functional point of
view, the results for Mebroot were equivalent. More impor-
tant, however, is the fact that the manual inspection veriﬁed
the behavioral proﬁle that we reported, attesting to the ac-
curacy of the linkages we inferred automatically.
7. ATTACKS AND LIMITATIONS
As stated earlier, the approach we take relies on the se-
curity properties of the hypervisor to properly isolate our
monitoring code from tampering by malicious entities resid-
ing in the guest OS’s. This assumption is not unique to our
solution, and to date, there has been no concrete demonstra-
tion that suggests otherwise. However, if the security of the
hypervisor is undermined, so too is the integrity and correct-
ness of the transactions we record. Likewise, our approach
suﬀers from the same limitations that all other approaches
that have extended Xen (e.g., [31, 7, 22, 18]) suﬀer from—
namely, that it extends the trusted code base.
A known weakness of current hypervisor designs is their
vulnerability to hypervisor-detection attacks [11, 5, 13]. One
way to address these attacks might be to rely on a thin
hypervisor layer built speciﬁcally for data forensics, instead
of using a hypervisor like Xen which provides such a rich
set of functionality (which inevitably lends itself to being
easily detected). Once the presence of a hypervisor has been
detected, the attacker can, for instance, change the guest
VM’s state in a way that would cause the forensic platform
to capture a morphed view of the VM [13]. An example
of such an attack would involve the attacker attempting to
circumvent our event model by modifying the System Call
Tables in Linux or the SSDT in Windows to remap system
calls. This could cause the framework to trigger false events
at the system call layer and pollute the audit logs. That
said, such an attack poses a challenge for all the hypervisor-
based monitoring platforms we are aware of. Techniques to
mitigate such attacks remain an open problem.
Resource exhaustion attacks oﬀer another avenue for hin-
dering our ability to track causal chains. As our infrastruc-
ture tracks all monitored objects in memory, an attacker
could attempt to access hundreds of ﬁles within a short pe-
riod of time, causing the memory monitoring module to al-
locate space for each object in its watchlist. If done using
multiple processes, the attack would likely lead to mem-
ory exhaustion, in which case some monitored objects would
need to be evicted from the watchlist. While we have built
several optimizations to mitigate such threats (e.g., by col-
lapsing contiguous pages to be tracked as a single address
range), this attack strategy remains viable.
Lastly, since we do not monitor interactions that directly
manipulate the receive and transmit rings of virtual network
interfaces (NICs), such accesses will not be logged. More-
over, our current prototype only logs accesses to monitored
blocks, and does not prevent such accesses. That said, ex-
tending our approach to cover these rings and/or to block
unauthorized accesses is largely an engineering exercise that
we leave as future work.
8. CONCLUSION
We present an architecture for eﬃciently and transpar-
ently recording the accesses to monitored objects. Our tech-
niques take advantage of characteristics of platforms sup-
porting hardware virtualization, and show how lightweight
mechanisms can be built to monitor the causal data ﬂow of
objects in a virtual machine—using only the abstractions ex-
posed by the hypervisor. The heuristics we developed allow
the monitoring framework to coalesce the events collected
at various layers of abstraction, and to map these events
back to the oﬀending processes. The mappings we infer are
recorded in an audit trail, and we provide several mech-
anisms that help with data forensics eﬀorts; for example,
allowing an analyst to quickly reconstruct detailed informa-
tion about what happened when such information is needed
the most (e.g., after a system compromise). To demonstrate
the practical utility of our framework, we show how our ap-
proach can be used to glean insightful information on be-
havioral proﬁles of malware activity after a security breach
has been detected.
9. CODE AVAILABILITY
The source code for both the monitoring platform (i.e.,
patches to Xen) and our packaged tools are available on re-
quest under a BSD license for research and non-commercial
purposes. Please contact the ﬁrst author for more informa-
tion on obtaining the software.
Acknowledgments
We thank the anonymous reviewers for their insightful com-
ments and suggestions for improving earlier drafts of this pa-
per. This work is supported in part by the National Science
Foundation under awards CNS-0915364 and CNS-0852649.
10. REFERENCES
[1] Barham, P., Dragovic, B., Fraser, K., Hand, S.,
Harris, T., Ho, A., Neugebauer, R., Pratt, I.,
and Warfield, A. Xen and the Art of Virtualization.
In Proceedings of the 19th ACM Symposium on
Operating Systems Principles (2003), pp. 164–177.
[2] Buchholz, F., and Spafford, E. On the Role of
File System Metadata in Digital Forensics. Digital
Investigation 1, 4 (2004), 298 – 309.
[3] Chen, P., and Noble, B. When Virtual is Better
than Real. In Proceedings of the Workshop on Hot
Topics in Operating Systems (May. 2001),
pp. 133–138.
[4] Chen, S., Xu, J., Nakka, N., Kalbarczyk, Z.,
and Iyer, R. K. Defeating Memory Corruption
Attacks via Pointer Taintedness Detection. In IEEE
International Conference on Dependable Systems and
Networks (DSN (2005), pp. 378–387.
[5] Chen, X., Andersen, J., Mao, Z., Bailey, M.,
and Nazario, J. Towards an Understanding of
Anti-virtualization and Anti-debugging Behavior in
Modern Malware. In Dependable Systems and
Networks (June 2008), pp. 177–186.
[6] Denning, D. E., and Denning, P. J. Certiﬁcation of
Programs for Secure Information Flow.
Communications of the ACM 20, 7 (1977), 504–513.
[7] Dinaburg, A., Royal, P., Sharif, M., and Lee,
W. Ether: Malware Analysis via Hardware
Virtualization Extensions. In Proceedings of the 15th
ACM Conference on Computer and Communications
Security (2008), pp. 51–62.
[8] F-Secure. MBR Rootkit, A New Breed of Malware.
See http: // www. f-secure. com/ weblog/ archives/
00001393. html (2008).
[9] Farmer, D., and Venema, W. Forensic Discovery.
Addison-Wesley, 2006.
[10] Franklin, J., Perrig, A., Paxson, V., and
Savage, S. An Inquiry into the Nature and Causes of
the Wealth of Internet Miscreants. In Proceedings of
the 14th ACM conference on Computer and
communications security (2007), pp. 375–388.
[11] Garfinkel, T., Adams, K., Warfield, A., and
Franklin, J. Compatibility is not Transparency:
VMM Detection Myths and Realities. In Proceedings
of the 11th USENIX workshop on Hot topics in
operating systems (2007), pp. 1–6.
[12] Garfinkel, T., Pfaff, B., Chow, J., Rosenblum,
M., and Boneh, D. Terra: A Virtual Machine-Based
Platform for Trusted Computing. In Proceedings of
ACM Symposium on Operating System Principles
(2003), pp. 193–206.
[13] Garfinkel, T., and Rosenblum, M. A Virtual
Machine Introspection Based Architecture for
Intrusion Detection. In Network and Distributed
Systems Security Symposium (2003), pp. 191–206.
[14] Goel, A., Po, K., Farhadi, K., Li, Z., and
de Lara, E. The Taser Intrusion Detection System.
In Proceedings of Symposium on Operating Systems
Principles (Oct. 2005).
[15] Goldberg, R. Survey of Virtual Machine Research.
IEEE Computer Magazine 7, 6 (1974), 34–35.
Computer Security Applications Conference (2007),
385–397.
[32] Provos, N., McNamee, D., Mavrommatis, P.,
Wang, K., and Modadugu, N. The Ghost in the
Browser: Analysis of Web-based Malware. In First
Workshop on Hot Topics in Understanding Botnets
(2006).
[33] Quinlan, S., and Dorward, S. Venti: A New
Approach to Archival Data Storage. In Proceedings of
the USENIX Conference on File and Storage
Technologies (2002), pp. 89–101.
[34] Sean Peiset and Matt Bishop and Keith
Marzullo. Computer Forensics in Forensis. ACM
Operating System Review 42 (2008).
[35] Shneiderman, B. Response Time and Display Rate
in Human Performance with Computers. ACM
Computing Surveys 16, 3 (1984), 265–285.
[36] Slowinska, A., and Bos, H. Pointless Tainting?
Evaluating the Practicality of Pointer Tainting. In
Proceedings of EuroSys (Apr. 2009).
[37] Vincenzetti, D., and Cotrozzi, M. ATP - Anti
Tampering Program. In Proceedings of USENIX
Security (1993), pp. 79–90.
Notes
1The SYSENTER call on the Intel platform uses the MSR
SYSENTER_EIP to ﬁnd the target instruction. This MSR is
always located on Intel machines at address 176h.
2System call numbers are pushed into eax
3Recall the memory module must translate the guest vir-
tual address to its physical address in a machine physical
page
4The destination machine physical page in memcpy
5Speciﬁcally, a hidden page is appended in the shadow
page table of the process with the timestamp and objects
accessed
6Similarly, the Master File Table and Master File Records
under NTFS.
network logs.
7See http://www.iometer.org
8We veriﬁed this hypothesis independently based on our
[16] Jain, S., Shafique, F., Djeric, V., and Goel, A.
Application-Level Isolation and Recovery with
Solitude. In Proceedings of EuroSys (Apr. 2008),
pp. 95–107.
[17] Jay, C., Glencross, M., and Hubbold, R.
Modeling the Eﬀects of Delayed Haptic and Visual
Feedback in a Collaborative Virtual Environment.
ACM Transactions on Computer-Human Interaction
14, 2 (2007), 8.
[18] Jiang, X., Wang, X., and Xu, D. Stealthy Malware
Detection through VMM-based “out-of-the-box”
Semantic View Reconstruction. In Proceedings of the
14th ACM conference on Computer and
Communications Security (2007), pp. 128–138.
[19] Jones, S. T., Arpaci-Dusseau, A. C., and
Arpaci-Dusseau, R. H. Antfarm: Tracking Processes
in a Virtual Machine Environment. In Proceedings of
the USENIX Annual Technical Conference (2006).
[20] Jones, S. T., Arpaci-Dusseau, A. C., and
Arpaci-Dusseau, R. H. Geiger: Monitoring the
Buﬀer Cache in a Virtual Machine Environment.
SIGPLAN Not. 41, 11 (2006), 14–24.
[21] Kim, G. H., and Spafford, E. H. The Design and
Implementation of Tripwire: a File System Integrity
Checker. In Proceedings of the 2nd ACM Conference
on Computer and Communications Security (1994),
ACM, pp. 18–29.
[22] King, S., and Chen, P. Backtracking Intrusions.
Proceedings of the nineteenth ACM Symposium on
Operating Systems Principles (Dec 2003).
[23] King, S. T., Mao, Z. M., Lucchetti, D. G., and
Chen, P. M. Enriching intrusion alerts through
multi-host causality. In Proceedings of Network and
Distributed System Security Symposium (2005).
[24] Krishnan, S., and Monrose, F. Time Capsule:
Secure Recording of Accesses to a Protected
Datastore. In Proceedings of the 2nd ACM Workshop
on Virtual Machine Security (Nov. 2009).
[25] Leung, A. W., Pasupathy, S., Goodson, G., and
Miller, E. L. Measurement and Analysis of
Large-scale Network File System Workloads. In
USENIX Annual Technical Conference (2008),
pp. 213–226.
[26] Leung, F., Neiger, G., Rodgers, D., Santoni, A.,
and Uhlig, R. Intel Virtualization Technology:
Hardware Support for Eﬃcient Processor
Virtualization. Intel Technology Journal 10 (2006).
[27] Litty, L., Lagar-Cavilla, H., and Lie, D.
Hypervisor Support for Identifying Covertly Executing
Binaries. In Proceedings of USENIX Security
Symposium (Aug. 2008), pp. 243–257.
[28] Muniswamy-Reddy, K., Holland, D., Braun, U.,
and Seltzer, M. Provenance-aware Storage Systems.
In Proceedings of the 2006 USENIX Annual Technical
Conference (2006), pp. 43–56.
[29] Muniswamy-Reddy, K.-K., Macko, P., and
Seltzer, M. Provenance for the Cloud. In USENIX
Conference on File and Storage Technologies (FAST)
(Berkeley, CA, USA, 2010), USENIX Association.
[30] NIST. National Software Reference Library, 2009.
[31] Payne, B. D., Carbone, M., and Lee, W. Secure
and ﬂexible monitoring of virtual machines. Annual