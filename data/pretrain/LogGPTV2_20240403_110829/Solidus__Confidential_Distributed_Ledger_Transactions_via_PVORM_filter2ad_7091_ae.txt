T
i
15
20
25
Stash Size
30
35
Figure 8: PVORM performance with capacity 215 for buckets of
size B = 2 and B = 3 as stash size varies.
appropriate when failure are rare if each transaction is posted indi-
vidually to the ledger.
We can alleviate some of this performance penalty by bundling
transactions into blocks, as is done in systems like Bitcoin. If T1
aborts, instead of reprocessing T2, B can include a rollback opera-
tion later in the same block. This rollback must provably revert any
changes executed by T1’s update, thus allowing verifiers to check
that T1 was never processed at all. There is, however, no need to
recompute T2 as long as the rollback can be placed after it while
remaining in the same block as T1.
7 EXPERIMENTS
We now present performance results for our PVORM and Solidus
prototypes. Our Solidus implementation is 4300 lines of Java code,
2000 of which constitute the PVORM. We use BouncyCastle [14] for
crypto primitives and Apache ZooKeeper [5] for distributed consen-
sus. We ran all experiments on c4.8xlarge Amazon EC2 instances
and employed the precomputation optimization (Section 6.1). These
benchmarks do not include the precomputation time.
We emphasize that our performance results employ an unopti-
mized implementation and only one server per bank, highly limiting
our parallelism. Solidus is designed to be highly parallelized, allow-
ing it to scale up using multiple servers per bank to achieve vastly
superior performance in practice.
7.1 PVORM Performance
We measured the concrete performance of PVORM Update and Ver
operations under different configurations and levels of parallelism.
Bucket and Stash Size. Figure 8 shows the single-threaded per-
formance of our PVORM as we vary bucket and stash sizes. As
expected, larger buckets are slower and runtime grows linearly
with the stash size. As bucket and stash sizes determine the chance
of stash overflow, this measures the performance-privacy trade-off.
Tree Depth. Figure 9 shows the single-threaded performance of
our PVORM as the capacity scales. As expected, the binary tree
structure results in clearly logarithmic scaling.
)
c
e
s
(
e
m
T
i
0.8
0.7
0.6
0.5
0.4
0.3
Generate
Verify
210
212
214
216
218
220
222
PVORM Capacity
Figure 9: PVORM capacity scaling with buckets of size 3 and stash
of size 25.
22
18
14
10
6
2
)
c
e
s
/
s
p
o
(
t
u
p
h
g
u
o
r
h
T
Perfect Scaling
Update
Ver
8
10
2
4
6
Number of Worker Threads
Figure 10: Parallel PVORM performance using size 3 buckets, a
size 25 stash, and capacity of 215. Dashed lines show perfect scaling
where all computation is parallelized with no overhead.
Parallelism. Our PVORM construction supports highly parallel
operation. A single update contains many NIZKs that can be created
or verified independently. Figure 10 shows performance for a single
PVORM with varying numbers of worker threads. In each test there
is exactly one coordination thread, which does very little work.
Because the proof of each pairwise swap can be computed or ver-
ified independently, we expect performance to scale well beyond
10 threads—possibly as high as 100. We stop at 10 for a combi-
nation of two reasons. First, PVORM operations are CPU-bound,
so adding threads beyond the number of CPU cores produces no
meaningful speedup. Second, our prototype implementation does
not distribute to multiple hosts and scales poorly to multi-CPU
architectures. Since c4.8xlarge EC2 instances have two 10-core
CPUs, we present scaling to only 10 worker threads. Note that with
10 worker threads there are 11 total threads, so some work may not
be effectively parallelized on the same CPU. This likely explains
some of the reduced scaling in that case.
Proof Size and Memory Usage. For a PVORM with size 3 buck-
ets, a size 25 stash, and capacity 215, a single PVORM update with
proofs is 190 KB (or 114 KB if compressed7). To generate an update,
our prototype requires a complete copy of the PVORM in memory.
Despite this, memory consumption peaks at only 880 MB.
7An elliptic curve point is an ordered pair of elements of Fp. Points can be compressed
to a single bit and a field element, but decompression imposes nontrivial overhead.
11
Offline Verification
Online Verification
)
c
e
s
/
x
t
(
t
u
p
h
g
u
o
r
h
T
9
7
5
3
2
4
6
8
Number of Banks
10
12
Figure 11: Solidus performance distributed using ZooKeeper. Each
bank is a ZooKeeper node and maintains a PVORM with size 3
buckets, a size 25 stash, and capacity 215.
7.2 Solidus System Performance
We present performance tests of a fully distributed Solidus system
with 2 to 12 banks. Each bank runs on its own c4.8xlarge EC2 in-
stance and maintains a PVORM with size 3 buckets, as size 25 stash,
and capacity 215. These parameters allow realistic testing, with a
stash overflow probability of around 2−64. To maintain the ledger,
each bank’s host also runs a ZooKeeper [5] node. We make no
attempt to tune ZooKeeper or optimize off-ledger communication.
To test this configuration we fully load each bank with both
incoming and outgoing transactions. As explained in Section 6.2,
in some settings transaction verification can occur offline, so we
also test performance with online verification turned off.
Figure 11 contains the results of these tests. With regular online
verification, performance improves until all CPUs are saturated
verifying third-party transactions, after which point scaling slows.
Using offline verification, transactions settle faster and additional
banks impose lower overhead on existing banks, improving scaling.
These results could be further improved by having each bank
distribute verification cross multiple machines, improving capacity
and throughput. Pipelining transactions (as described in Section 6.3)
could improve throughput substantially if banks also distributed
proof generation across multiple hosts. (Such distribution is un-
likely to provide any benefit without pipelining.) Implementing this
distribution introduces complex systems engineering challenges
that are orthogonal to the technical innovations introduced by
Solidus, so we neither implement nor benchmark these options.
7.3 zk-SNARK Comparison
We finally compare our prototype’s performance to that of a PVORM
implemented with zk-SNARKs. This approach has succinct proofs
and short verification times, but costly proof generation.
Simply taking our Circuit ORAM PVORM construction and con-
verting all proofs to zk-SNARKs would be needlessly expensive. As
zk-SNARKs can prove correct application of an arbitrary circuit [8],
we use a compact Merkle tree structure. Each account is stored at
the leave of a standard Merkle hash tree, the root of which is posted
to the ledger. To update the PVORM, a bank updates one account
to a valid value and modifies the Merkle tree accordingly. It then
produces a zk-SNARK that it properly performed the update and
4
65.45
Number of Threads
1
36
13.76
24.53
0.0065 sec
288 bytes
7.2 GB
Proof Time (sec)
Verification Time
Proof Size
Peak Memory Use
Table 1: Performance of PVORM using zk-SNARKs.
verified the requester’s signature. The root of the new Merkle tree
is the new PVORM state and the zk-SNARK is the proof.
We implemented this construction using a security level equiv-
alent to our GSP-based PVORM.8 Table 1 shows its performance
running on a c4.8xlarge EC2 instance. While verification is ex-
tremely fast, even highly parallel proof generation is more than
200 times slower than the GSP PVORM. For this to improve overall
system throughput, the system would need to verify every proof
around 200 times. In our expected use-case, at most tens of banks
would maintain the ledger, so this is significantly slower. More-
over, additional hardware can allow banks to verify numerous GSP
transactions in parallel but provides little benefit to zk-SNARKs.
8 RELATED WORK
We compare Solidus here with related work on cryptocurrencies
and transaction confidentiality. We omit related work on ORAM,
which was covered in Sections 2.3 and 4.
Anonymous cryptocurrencies. Anonymous e-cash was proposed
by Chaum [21, 22] and refined in a long series of works, e.g., [15, 17,
30]. In these schemes, trust is centralized. A single authority issues
and redeems coins that are anonymized using blind signatures or
credentials. Due to its centralization and technical limitations, such
as poor handling of fractional coins and double-spending, e-cash
has been largely displaced by decentralized cryptocurrencies.
Zcash, a recently deployed decentralized cryptocurrency, and its
academic antecedents [7, 24, 45] and offshoots e.g., Hawk [36], pro-
vide strong transaction-graph confidentiality like Solidus. Zcash
relies on zk-SNARKs to ensure conservation of money, prevent
double spending, and hide both transaction values and the system’s
transaction graph. Consequently, unlike Solidus, it requires trusted
setup, which in practice must be centralized (as multiparty compu-
tation for this purpose [9] is impractical). Moreover, as we showed
in our exploration of a zk-SNARK variant of Solidus in Section 7.3,
zk-SNARKs are far more expensive to generate (by two orders of
magnitude) than the GSPs used in Solidus. Additionally, Zcash and
Hawk do not provide auditability as Solidus does; as designed, they
do not record assets on-chain, only commitments.
8Both hash with SHA-256. The GSP-based PVORM uses El Gamal with the secp256k1
curve and the SNARK-based PVORM uses RSA-3072. Both provide 128 bits of security.
12
Alternative schemes such as Monero [3], a relatively popular
cryptocurrency, and MimbleWimble [34], a pseudonymous pro-
posal, provide partial transaction-graph concealment. Serious weak-
nesses in Monero’s anonymity have recently been identified, how-
ever [46], while MimbleWimble has yet to be deployed or have its
confidentiality properties formally analyzed.
Mixes. Mixes partially obscure the transaction graph in an exist-
ing cryptocurrency. A number have been proposed and deployed,
e.g., [29, 40, 53, 60]. Mixes have a fundamental limitation: they only
protect participating users, and thus provide only partial anonymity,
resulting in demonstrated weaknesses [47, 56]. As mixes’ costs are
linear in the number of participants, they do not scale well. In con-
trast, Solidus achieves strong and rigorously provable transaction-
graph confidentiality for all users.
Confidential Transactions. A class of schemes called Confiden-
tial Transactions [38, 41, 42] hide transaction amounts, but do not
aim at transaction graph privacy. Solidus employs a Confidential
Transaction scheme similar to that in [41], but makes more direct
use of and inherits the provable security properties of GSPs.
Financial sector blockchain technologies. The financial indus-
try’s intense interest in blockchains has led to a number of proposed
and deployed systems. These systems support current banking
system transaction flows like Solidus. They achieve elements of
Solidus, but lack its full set of features. For example, Ripple [2] is
a widely deployed scheme for value transfer, but does not aim at
the confidentiality properties of Solidus. RSCoin [25], a scheme for
central bank cryptocurrency issuance that supports auditability
like Solidus, but similarly does not inherently support transaction
confidentiality. Other examples are SETLcoin [61], which aims at
on-chain trade settlement, like Solidus, but lacks strong transaction-
graph confidentiality, and the Digital Asset Platform [1], which
provides confidentiality by keeping transaction details off-chain
and completely foregoing on-chain settlement and auditability.
9 CONCLUSION
We have introduced Solidus, a system that addresses a major im-
pediment to broad use of blockchain transaction systems, their
critical lack of transaction-graph confidentiality. Unlike previous
approaches (e.g. Zcash), Solidus is specifically geared towards the
structural and performance requirements of modern financial trans-
action and settlement systems. The key innovation in Solidus is the
Publicly-Verifiable Oblivious RAM Machine (PVORM), a generaliza-
tion of ORAM. A PVORM supports publicly verifiable outsourcing
of computation over memory, enabling a completely new approach
to blockchain transaction system design. Solidus employs a PVORM
with data structure size linear in the number of accounts—rather
than the number of transactions in the system, as in Zcash—and
proof computation times two orders of magnitude faster than zk-
SNARKs. We define the security of Solidus as an ideal functionality
and prove its security in the UC framework. Finally, we present