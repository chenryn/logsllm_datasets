### FLARE: Runtime Overhead and Effectiveness in Mitigating KASLR Breaks

#### 1. Runtime Overhead
**Figure 7: Runtime Overhead of FLARE on SPEC CPU 2017**

- **Process Creation**: On average, the process creation time with FLARE is 61.14 µs (n = 105, σ̄x = 0.27).
- **Syscall Latency**: The syscall latency remains unchanged at an average of 1.03 µs (n = 105, σ̄x = 0.006).

To evaluate the runtime overhead, we used the SPEC CPU 2017 benchmark on an Intel Xeon Silver 4208. We excluded benchmarks that crashed or did not compile on our vanilla Linux system. As shown in Figure 7, FLARE introduces minimal runtime overhead, as expected by its design.

#### 2. Module Loading Time
We measured the increase in module loading time by first establishing a baseline. We loaded and unloaded a simple test module 104 times. Then, we loaded the FLARE proof of concept, which requires removing and re-applying the dummy mapping for every module load, thus overapproximating the overhead. The results show a 4% increase from 2.39 ms to 2.48 ms per module load. When implemented in the Linux kernel, the module memory allocation logic treats the dummy mappings as free memory, avoiding overheads except in cases where modules need to be re-padded, where the overhead is negligible.

#### 3. Memory Overhead
FLARE's memory overhead is minimal. We always map the same dummy page in the paging hierarchy and re-use the same page directory and page table. No new PDPT is needed, as we work within existing 1 GB ranges. Therefore, the maximum overhead is 12 kB (one page each for the new page directory, page table, and one page to point to). For huge dummy pages, the maximum overhead increases by 2 MB. Direct-physical map padding with 1 GB pages does not consume additional memory (cf. Section 4).

### 5.2 Mitigating Microarchitectural KASLR Breaks

#### 5.2.1 Effectiveness in Preventing KASLR Breaks
Using a vanilla Linux 5.0 kernel, we tested microarchitectural attacks on KASLR with KPTI disabled. We established a baseline of the attack without FLARE, showing the exact position of the kernel. After loading FLARE, we re-evaluated all attacks:

- **EchoLoad (Figure 8a)**: All offsets are backed by a physical page, but the CPU returns zero for illegal access. The stall percentage is based on cache hits and misses.
- **Prefetch Side Channel (Figure 8b)**: The prefetch instruction can now prefetch all possible locations, mitigating the KASLR break.
- **Data Bounce (Figure 8c)**: Store-to-load forwarding works for all possible offsets, making it impossible to distinguish kernel locations from dummy mappings.
- **Double-Page Fault (Figure 8d) and DrK Attack (Figure 8e)**: These attacks no longer work, exhibiting the same timing across the address range.
- **Fallout (Figure 8f)**: No difference is observed as every page allows triggering the WTF effect.

Attempts to detect dummy mappings via timing the page-table walk or cache access are also ineffective. Based on these results, none of the known microarchitectural attacks can de-randomize the kernel location despite FLARE, confirming that we solve challenge C1.

#### 5.2.2 De-Randomization Based on Page Types
We evaluated de-randomizing the kernel based on the timing difference between executable and NX pages. Tackling only C1 and C2 is insufficient (cf. Figure 9). However, full FLARE separates the regions, making the switch from executable to NX invisible in this region but at the pre-defined start of the randomization range (cf. Figure 6).

#### 5.2.3 Prefetch Side-Channel Attack with Different Page Sizes
Using the prefetch side-channel attack, we tested different page sizes. Without FLARE, the different levels in the default case (Figure 8b) show the different paging levels. With FLARE, the difference in page sizes is no longer visible, confirming that our strategy for C3 works, defeating microarchitectural attacks based on different page sizes.

### 6 Related Work

#### 6.1 Software-based KASLR Breaks
Many software vulnerabilities have been exploited to break KASLR. For example, uninitialized structure fields or structure padding in Linux (e.g., CVE-2012-6138, CVE-2013-1825, 1826, 1827, 1873, 2634, 2635, 2636) and methods like Win32ThreadInfo or Desktop heap in Windows [74] have leaked kernel pointers. Kernel addresses have also been used as unique identifiers [84] or as seeds for pseudo-random numbers [52]. Debugging interfaces such as the perf subsystem [18] often reveal kernel addresses.

#### 6.2 Mitigating Software-based KASLR Attacks
Software bugs causing KASLR breaks can be fixed, and general concepts exist to prevent address leakage. Linux introduced a setting to mask kernel pointers in log files with a random mask [73], reducing the risk of leaking the KASLR offset without impairing debugging capabilities. The PaX Team proposed STACKLEAK [15], a mechanism to clear kernel-stack memory, reducing accidental address leakage from uninitialized stack values.

#### 6.3 Mitigating Microarchitectural KASLR Breaks
While microarchitectural attacks cannot be simply fixed in software, there are workarounds. Gruss et al. [31, 32] proposed stronger kernel isolation to prevent microarchitectural attacks by unmapping the kernel address space when not in use.