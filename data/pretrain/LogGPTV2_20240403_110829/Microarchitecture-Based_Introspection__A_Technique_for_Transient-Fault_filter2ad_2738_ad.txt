### 6.3. Recovery with Undo Mechanism

The system can recover from an error if it can be restored to a state where the effects of all instructions prior to the error-causing instruction are architecturally visible, and no effects of the error-causing instruction or any subsequent instructions are architecturally visible. The MBI (Microarchitecture-Based Introspection) mechanism allows for a unique error recovery technique that restores the system to the state of the last error-free instruction. Error recovery is achieved by undoing the store operations performed during performance mode after the last error-free instruction. Figure 7(a) illustrates the extensions added to the backlog buffer to facilitate this error recovery.

#### 6.3.1. Structure

The backlog buffer tracks undo information for each store instruction. This information includes the effective address of the store instruction and the old value at that address. In Figure 7(a), instructions D, G, I, and L are store instructions, and the shaded regions represent the undo information associated with each store instruction. The backlog buffer does not contain undo information for non-store instructions.

#### 6.3.2. Operation

Error recovery consists of two parts: (1) recovering the register state, and (2) recovering the memory state.

**Recovering the Register State:**
This process is relatively straightforward because the register state in introspection mode is updated only after the instruction is confirmed to be fault-free. Therefore, during introspection mode, the ISPEC ARF (Architectural Register File) always corresponds to the last correct instruction. When an error is detected, the register state of the ISPEC ARF is copied to the PERF ARF (Performance Mode Register File).

**Recovering the Memory State:**
This is more challenging because, at the time the error is detected, the store instructions younger than the error-causing instruction have already updated the memory. Thus, these memory updates must be undone. We will explain this with an example. Figure 7(b) shows the state of the backlog buffer for the instruction sequence A to M. Instructions D, G, I, and L are store instructions, and the corresponding backlog buffer entries contain undo information. If an error is detected while checking the result of instruction C in introspection mode, all stores younger than instruction C (stores D, G, I, and L) must be undone. To achieve this, the backlog buffer is traversed backward starting from the TAIL-PTR. Any store instruction encountered during this traversal is undone by copying the old value stored in the backlog buffer entry to the memory address indicated in the entry. The traversal continues until the error-causing instruction is reached. At this point, no effect of the error-causing instruction or any subsequent instruction is architecturally visible, and the system has recovered from the error detected at instruction C.

It should be noted that the undo mechanism assumes that the store values are not read by other devices (such as other processors in a multiprocessor system) before the undo process takes place. For multiprocessor systems, the undo mechanism can be used if other processors are not allowed to read the values produced by a store instruction until that instruction is confirmed to be fault-free in introspection mode. An alternative is to transfer control to software to recover the processors that have consumed incorrect values to a consistent state. The design requirements of the undo mechanism in multiprocessor systems are outside the scope of this paper and are part of our future work.

#### 6.3.3. Error Correction Latency

The duration between when the error is detected and when the system is restored to an error-free state is called the error correction latency. The error correction latency of the undo mechanism is variable and depends on the number of instructions between the HEAD-PTR and TAIL-PTR. In the worst-case scenario, where every entry in the backlog buffer is a store instruction, the TAIL-PTR must traverse through and perform an undo operation for every entry in the backlog buffer. Thus, the worst-case error correction latency with a backlog buffer containing 2K entries is as high as 2K undo operations. However, this latency is very low compared to the time between errors and will not significantly affect the availability of the system. For example, even with an error rate of 1 error per hour, a 5GHz processor that can perform 1 undo operation per cycle will have an availability of 99.99999% (Availability = (TE − TR)/TE, where TE is the mean time between errors, and TR is the time the machine is not available due to an error).

### 7. Related Work

Commercial high-reliability systems, such as the Tandem Computer [2], the Compaq NonStop Himalaya [22], and the IBM S/390 [17], use lock-step execution for detecting faults in processors. Fault tolerance in these systems is achieved at the expense of hardware replication.

An alternative to replication was proposed by Austin in the form of DIVA [1]. For redundant execution, DIVA uses a simple checker processor after the retirement stage of the main processor. The assumption that the instruction fetch and decode stages of the main processor are fault-free allows the checker processor to use the instruction dependency information computed in the main processor. Unlike DIVA, MBI provides fault coverage for the entire pipeline, including the fetch and decode stages. DIVA uses a physically separate processor for redundant execution and can detect both permanent and transient faults, whereas MBI provides coverage only for transient faults and would need to be combined with techniques like RESO [10] to provide coverage for permanent faults. The additional processor in DIVA, although simple, requires considerable hardware overhead compared to MBI. A low hardware overhead is desirable because it provides users with the option to use or not use the features of fault tolerance. With MBI, if the user chooses not to have fault tolerance, only the hardware solely dedicated to fault tolerance, which is relatively small, will go unused.

Rotenberg [14] proposed AR-SMT, which provides fault tolerance by executing the application using two separate threads. The primary thread inserts its results into a delay buffer, and the redundant thread uses these results for speculative execution and fault detection. Both threads run concurrently in the processor pipeline and have different memory images. The approach of using SMT-based machines for fault tolerance was generalized in [13]. Both [14] and [13] require a fine-grain multi-threaded machine capable of concurrently fetching, decoding, and executing from more than one thread. Redundant execution, in both cases, halves the fetch bandwidth, reduces the effective size of the storage structures (e.g., reservation stations, caches) visible to each thread, and increases contention for execution units. In contrast, MBI operates in either performance mode or introspection mode. Therefore, in MBI, redundant execution does not compete with the primary execution for hardware resources at a fine-grain level. The MBI design is also less intrusive than the SMT-based designs because it does not require widespread modifications throughout the processor pipeline.

Both MBI and SMT-based techniques target idle processing bandwidth for fault tolerance. However, they target fundamentally different types of idle processing bandwidth. SMT leverages the fine-grain idle processing slots that remain unused due to limited ILP (Instruction-Level Parallelism) in each cycle. On the other hand, MBI utilizes the coarse-grain idle processing bandwidth that remains unused due to long-latency cache misses. As such, MBI is well-suited for memory-intensive applications. SMT-based techniques, on the other hand, are well-suited for applications that are not significantly limited in their performance by long-latency cache misses.

Mendelson and Suri proposed O3RS [7], which provides transient-fault tolerance to only the out-of-order portion of the processor pipeline. After an instruction is renamed, it occupies two entries in the reservation stations. The two results obtained in this manner are compared for fault detection. The mechanism proposed by Ray et al. [12] replicates instructions in the rename stage and provides transient-fault coverage for all stages after the rename stage. Both [7] and [12] assume fault protection for the stages before the rename stage and require extra logic in the processor to handle the simultaneous existence of primary and redundant instructions.

The related fault tolerance techniques described thus far are hardware-based. Fault tolerance can also be incorporated with software support. Wu et al. [23] proposed a technique to arrange the code such that redundant instructions are statically mapped to use empty slots in execution units. However, only applications with regular code behavior and with latencies predictable at compile-time lend themselves to static scheduling. The mechanism proposed in [9] executes two different versions of the same program (with the same functionality) and compares the outputs to detect transient and some permanent faults.

A transient fault may or may not cause an error depending on whether it affects the final outcome of the program. A study of the effects of transient faults on the performance of a superscalar processor is provided in [19]. Weaver et al. [20] describe a mechanism to avoid signaling errors that occur during the processing of dynamically dead instructions. All retired instructions are inserted into a FIFO buffer. A faulty instruction is marked as possibly incorrect before insertion into the FIFO buffer. Faults in a possibly incorrect instruction are ignored if the instruction is found to be dynamically dead while it is in the FIFO buffer. Currently, the MBI mechanism detects errors for both dynamically live and dynamically dead instructions. However, the technique proposed in [20] can easily be incorporated into the MBI mechanism by making minor modifications to the backlog buffer.

### 8. Conclusion and Future Work

Future processors will need on-chip fault tolerance techniques to tolerate the increasing transient fault rate. Future processors will also face the challenge of the speed gap between the processor and memory, wasting significant processing bandwidth waiting for memory. Based on these observations, this paper makes the following two contributions:

1. **A Transient-Fault Detection Technique (MBI):** Microarchitecture-Based Introspection (MBI) uses the wasted processing bandwidth during long-latency cache misses for redundant execution. This technique has a small hardware cost and provides redundant execution coverage for the entire pipeline (from instruction fetch to retirement).
   
2. **A Fault Recovery Scheme for MBI:** This scheme has a negligible effect on system availability.

The time redundancy of MBI results in an average IPC (Instructions Per Cycle) reduction of only 7.1% for memory-intensive benchmarks and an average IPC reduction of 14.5% over the entire SPEC CPU2000 suite.

MBI can be combined with runahead execution [8] to improve both the reliability and performance of memory-intensive applications. MBI can also be combined with SMT to utilize both fine-grain and coarse-grain idle processing bandwidth for redundant execution. Exploring these hybrid mechanisms is part of our future work.

### Acknowledgments

We thank Pradip Bose for the early discussions and continued feedback on this work. We also thank Sanjay Patel, the anonymous reviewers, and the members of the HPS research group for their helpful comments. This work was supported by gifts from IBM, Intel, and the Cockrell Foundation. Moinuddin Qureshi is supported by an IBM fellowship, and Onur Mutlu is supported by an Intel fellowship.

### References

[1] T. M. Austin. DIVA: A reliable substrate for deep submicron microarchitecture design. In Proceedings of the 32nd Annual ACM/IEEE International Symposium on Microarchitecture, pages 196–207, 1999.

[2] J. Bartlett, J. Gray, and B. Horst. Fault tolerance in Tandem computer systems. Technical Report 86.2, Tandem Computers, Mar. 1986.

[3] R. Hankins, T. Diep, M. Annavaram, B. Hirano, H. Eri, H. Nueckel, and J. Shen. Scaling and characterizing database workloads: Bridging the gap between research and practice. In Proceedings of the 36th Annual ACM/IEEE International Symposium on Microarchitecture, pages 151–163, 2003.

[4] W. W. Hsu, A. J. Smith, and H. C. Young. Characteristics of production database workloads and the TPC benchmarks. IBM Journal of Research and Development, 40(3):781–802, Mar. 2001.

[5] T. Karkhanis and J. E. Smith. A day in the life of a data cache miss. In Second Annual Workshop on Memory Performance Issues, 2002.

[6] H. Li, Chen-Yong Cher, T. N. Vijaykumar, and K. Roy. VSV: L2-miss-driven variable supply-voltage scaling for low power. In Proceedings of the 36th Annual ACM/IEEE International Symposium on Microarchitecture, pages 19–28, 2003.

[7] A. Mendelson and N. Suri. Designing high-performance and reliable superscalar architectures: The out of order reliable superscalar (o3rs) approach. In Proceedings of the International Conference on Dependable Systems and Networks, 2000.

[8] O. Mutlu, J. Stark, C. Wilkerson, and Y. N. Patt. Runahead execution: An alternative to very large instruction windows for out-of-order processors. In Proceedings of the Ninth IEEE International Symposium on High Performance Computer Architecture, pages 129–140, 2003.

[9] N. Oh, S. Mitra, and E. J. McCluskey. ED4I: Error detection by diverse data and duplicated instructions. IEEE Transactions on Computers, 51(2):180–199, Feb. 2002.

[10] J. H. Patel and L. Y. Fung. Concurrent Error Detection in ALUs by REcomputing with Shifted Operands. IEEE Transactions on Computers, 31(7):589–595, July 1982.

[11] M. Prvulovic, Z. Zhang, and J. Torrellas. ReVive: Cost-effective architectural support for rollback recovery in shared-memory multiprocessors. In Proceedings of the 29th Annual International Symposium on Computer Architecture, pages 111–122, 2002.

[12] J. Ray, J. C. Hoe, and B. Falsaﬁ. Dual use of superscalar datapath for transient-fault detection and recovery. In Proceedings of the 34th Annual ACM/IEEE International Symposium on Microarchitecture, pages 214–224, 2001.

[13] S. K. Reinhardt and S. S. Mukherjee. Transient fault detection via simultaneous multithreading. In Proceedings of the 27th Annual International Symposium on Computer Architecture, pages 25–36, 2000.

[14] E. Rotenberg. AR-SMT: A microarchitectural approach to fault tolerance in microprocessors. In Proceedings of the Twenty-Ninth Annual International Symposium on Fault-Tolerant Computing, pages 84–91, 1999.

[15] P. Shivakumar, M. Kistler, S. W. Keckler, D. Burger, and L. Alvisi. Modeling the effect of technology trends on the soft error rate of combinational logic. In Proceedings of the International Conference on Dependable Systems and Networks, pages 389–398, 2002.

[16] D. J. Sorin, M. M. K. Martin, M. D. Hill, and D. A. Wood. Fast checkpoint/recovery to support kilo-instruction speculation and hardware fault tolerance. In Dept. of Computer Sciences Technical Report CS-TR-2000-1420, October 2000.

[17] T. J. Slegal et al. IBM’s S/390 G5 Microprocessor Design. IEEE micro, pages 12–23, Mar. 1999.

[18] J. Tendler, S. Dodson, S. Fields, H. Le, and B. Sinharoy. POWER4 system microarchitecture. IBM Technical White Paper, Oct. 2001.

[19] N. J. Wang, J. Quek, T. M. Rafacz, and S. J. Patel. Characterizing the effects of transient faults on a high-performance processor pipeline. In Proceedings of the International Conference on Dependable Systems and Networks, pages 61–70, 2004.

[20] C. Weaver, J. Emer, S. S. Mukherjee, and S. K. Reinhardt. Techniques to reduce the soft error rate of a high-performance microprocessor. In Proceedings of the 31st Annual International Symposium on Computer Architecture, pages 264–273, 2004.

[21] M. V. Wilkes. The memory gap and the future of high-performance memories. ACM Computer Architecture News, 29(1):2–7, Mar. 2001.

[22] A. Wood. Data integrity concepts, features, and technology. White Paper, Tandem division, Compaq Computer Corporation.

[23] K. Wu and R. Karri. Selectively breaking data dependences to improve the utilization of idle cycles in algorithm-level re-computing data paths. IEEE Transactions on Reliability, 52(4):501–511, Dec. 2003.