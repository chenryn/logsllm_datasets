我回答道：“是的，我们没有测试人员。单元测试是一个很好的想
法。和系统测试不一样，但是应当能够防止这个问题。”
Dan说道：“但是我们还没有做呢。只进行代码评审和单元测试是不
够的。我们打算像上一个项目一样，采取多级检入。”
我回答道：“你不一定需要这样做。你可以随时检入，让构建和单
元测试来捕捉问题。”
“不行，你的脑子短路了？"Sam问道。“这样做根本行不通。我们需
要多级检入。”
“嗯，让我解释一下它的工作方式。”我说道。
“如果有测试人员，那么你可以采用这种方法，但是没有测试人员
就行不通了。"Sam回答道。
“如果你强烈地感受是这样的，就按你的办吧。”我回答道。
“我会的。”
“其他人的意见是什么？"每个人都点头。“好吧。在考虑替代方案之
前先让我们试试多级检入，好吗？我将和你们一起建立一个波浪式
进度表[3]，这样我就知道事情的进展并进行跟踪了。”
Sam表示担心：“这个波浪式进度表一—那是什么，对我有什么帮
助？除了现在这些工作，我是否还需要做其他工作？”
“第一次的时候需要大约30分钟来准备进度表。然后我和你们一对
一地交流并更新进度表。如果你们遇到困难，我们就需要一起再花
上30分钟。这是这些。你觉得这样可以吗？”
327
---
## Page 329
“没问题。”
“Sam，你知道，JR不是傻瓜，至少现在还不是。"Fred说道，大家
都笑了。“你以前没有和她一起工作过，对吧？”
“是的，没有一起工作过。”
“她不会太干涉我们，但是会和其他部门做一些管理上的交涉。如
果大奶酪找你提要求，你可以建议他——礼貌地建议他去找JR，JIR会
处理的。此外，如果我们不喜欢R的工作，可以不用JR担任项目经
理。JR，我说的对吧？”
“没错！”
对于独立工作但又要同时检入的问题，现在有了安全的管理措施
（多级检入）。他们打算重新采用代码评审的实践。除了代码评
审，现在所有的并发人员都需要为自己的代码编写单元级的测试用
例。
团队决定在系统级的测试回归套件中不增加任何内容。他们没有足
够的时间管理和并发那个层次的测试。但他们都很乐于为自己的代
码编写单元测试用例。
代码评审是什么样子的
团队选择使用了一种修改后的法根（Fagen）风格的代码评审。每次
代码评审都有一个组织者和几个人读者评审人，作者担任记录员。
在真正的法根代码评审中，各读者评审人在事先各自阅读代码，在
评审时大声读出来。但是团队决定在评审过程中不阅读代码。组织
“有”，然后解释他的问题。与法根代码评审类似，评审人需要在评
审并始之前把他们发现的小问题反映给作者。
在评审会上不朗读代码的一个原因是节省时间。如果并发人员必须
逐行大声朗读代码，每个人都将花费更长的时间，团队也必须安排
更多的代码评审。在我们这种代码评审中，每次评审会议能够评审
50页。
团队在评审开始时意识到，如果某个人没有完成代码的阅读，必须
相信他给出的理由。在这些情况中，停止评审，每个人都要完成代
328
---
## Page 330
码的阅读并在第二天重新安排一次评审。
如果作者对于如何修改代码中的缺陷有疑问，作者和组织者可以一
起处理这些疑问。
单元测试
开发人员知道他们必须继续做测试工作，但是一位并发人员跟我
说：“我做不了测试人员的事情。我知道如何做单元测试，但是不
太擅长系统测试。”
我和Nancy都认为如果没有足够的系统级别测试，就会招来技术债
务。但是团队都认为，如果不对他们编写的所有代码做单元测试，
就无法保证最后期限。
并发人员编写了代码并编写了单元测试用例。一位并发人员使用了
McCabe（有一个UNIX版本的自由软件）的工具来检查是否为每个
类和模块都编写了足够的单元测试用例。开发人员解释道：“我很
擅长为每个能够正常使用的功能编写测试用例，但似乎总是漏掉一
些不能使用的功能。有了McCabe，就不大可能再有遗漏了。”
检入
我试图说服团队使用持续集成，但是他们没有接受一—至少是没有
从我这里接受。但是团队制定了另外一个集成测试的方法，将集成
阶段按照对他们有意义的方法分成3个部分。他们选择的是3级集
成：
原始
代码经过了编译和单元测试。
加工过的
代码经过了代码评审，发现的问题都改了。
金版
代码通过了构建和所有现存的回归测试。
329
---
## Page 331
每个并发人员都负责对自已的代码进行编译和单元测试。如果某位
开发人员进度落后，他应当告诉我，由我和团队来处理日程安排的
问题。
构建版本
团队采取的方法是每天晚上的子夜时分启动自动化构建。每天晚
上，所有标记为“金版"的代码都进行构建，所有的单元测试和回归
测试都是针对这个版本做的。结果将通过邮件的方式发送给每一位
团队成员。
当某人并始检入代码的时候，标记为“原始”。每个并发人员在本机
上构建原始构建版本，以确保他不会破坏任何东西。在代码通过了
代码评审后，标记为“加工过的”。在开发人员“加工过"所有代码
后，命名为“金版”。
进度表
我们在第二天开了一个会，开始制定波浪式进度表。我在墙上贴了
儿个月的小贴纸，还有一些已知的主要里程碑，如内部演示、内部
客户演示、客户发行版，都贴到对应的月份下面。我按照并发人员
告诉我的、将要实现的顺序在活动挂图的一面列出了这些功能特
性。
我问道：“为了完成前两个功能，需要做些什么？”
Dan回答道：“不，JR，我们是并行工作的。这个问题问得不对。真
正的问题是谁将做什，什么时候做？”
“好的，只要我们不是一次性地把整个项目都计划完就可以这样
做。在小贴纸上这样写的目的是，确保我们在这个计划无法生效的
时候想想其他计划。记住，在小贴纸上写任务的时候，要确保任务
尽可能小。”
每个人都在小贴纸上写下了自己的任务。大多数任务需要一两个星
期。
“好的，伙计们，我现在陷入困境了。”
“为什么？”
330
---
## Page 332
“因为假如有人遇到麻烦，我会很长时间都不知道。你们也不会知
道。任务必须比现在还要小一些。你们每个人在每天都会做一些事
情，对吧？”
大家都点头。
“好的，那就把这些东西都写下来，只写第一个星期的事。如果能
把第二个星期要做的事情确定下来，也可以把第二个星期的事加
上。”
在他们修改完头两个星期的小贴纸后，我解释道：“我不会每天都
问你们做了什么。如果事情没有像你估计的进展那么多，你就要告
诉我。如果你知道原因，也一起告诉我。有些任务你们可能会准时
完成，有些可能会提前完成，有些可能会推后完成。我的工作是分
析出，如果你的任务延迟了，对团队其他人和项目有什么影响。如
果是系统性的问题，我们将在小组会议上处理。如果不是系统性的
问题，就我们两人讨论就可以了。”
“我不会为了状态的事情打扰你们。你们在周五早上给我发邮件，
我们在周二的时候一对一地面谈。通过这种方式，我就知道每星期
需要做几次什么事情了。这样好吗？”
Sam皱着眉头，看上去有些担优。“Johanna，这样我们似乎有很多工
作要做。至少对我来说是这样。我真的需要将项目剩下的任务都分
解成一小部分、一小部分的吗？”
“日程这么紧张，又存在技术风险，除了这种方法，我不知道该如
何有效地管理这个项目。你有什么好主意吗？”
“没有。”
“那么，我们就试上两个星期，看看这种方法能够带来什么启发。
如果花的时间太长或你们觉得是在浪费时间，我们在团队的周例会
上在讨论一下。不过在以前这种方法用得很好。你们只需要详细地
计划接下来两三周的任务。不要制定太多。”
状态报告
在项目的进展过程中，项目成员真的在周五早上把他们的状态用邮
件发给我了。我在周五下午之前整理并发出状态报告，这样每个人
331
---
## Page 333
都知道大家在做些什么。我们使用团队会议来解决问题，如性能问
题。
我为Nancy和大奶酪准备了月度状态报告。买三个月不错。但是第
四个月，我们遇到几个性能改进的问题，这些问题没有来得及处
理。我在状态报告中解释了这个情况，然后我们继续项目。
现在要快点！
在我和Nancy单独的谈话中，她提到团队现在落后了。她说：“你打
算采取什么措施？”
“啊？”
“他们现在落后了一两个星期了。你打算怎么弥补时间？”
“什么也不用做。”
“什么也不用做的意思是？”
"Nancy，团队已经达到最快的速度了。他们只参与这一个项目。他
们已经尽其所能了。他们之中的一些人已经在加班了，这样做可不
太好，因为这个项目还有6个星期才能结束。”
间，对吧？”
我听了以后愣住了。“Nancy，你是在开玩笑吧？如果不做单元测
试，就连一点几测试都没有了。不做单元测试，就无法知道我们做
得好不好。你想要在6个星期后发布这个产品，对吧？”
Nancy点点头。
“那就让我们这个团队按照他们需要的方式来工作吧。”
“那么代码评审呢？也许可以省掉这一步。这样能节省一些时间。”
“Nancy，你已经很长时间不写代码了，对吧？”
Nancy点点头。
332
---
## Page 334
“嗯，现在的代码比你写代码的时候难度大了。你写的代码曾经一
次就能正确工作吗？”
“是的，有几次是这样。”
“你是可以一次就写出能够正确工作的代码，也许在你做程序员的
10年中有过5次。你处理过指针吗？我想你用的是汇编语言。”
“是，是汇编语言。指针不像是C语言中的指针。”
“那你为什么会认为去掉代码评审会让我们更快一些呢？到了最
后，如果不知道哪些出了问题，只会让我们的速度慢下来。"我说