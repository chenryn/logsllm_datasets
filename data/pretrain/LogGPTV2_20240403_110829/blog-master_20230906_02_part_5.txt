vi t.sql  
\set uid random(1,1000000)  
with a as (  
  select uid,info from tbl where uid=:uid  
)   
update tbl set info=md5(random()::text) from a where tbl.uid=a.uid returning a.info as info_before, tbl.info as info_after \gset  
insert into tbl_log values (:uid, :info_before, :info_after, inet_client_addr(), inet_client_port(), now());  
```  
```  
pgbench -M prepared -n -r -P 1 -f ./t.sql -c 10 -j 10 -T 120  
transaction type: ./t.sql  
scaling factor: 1  
query mode: prepared  
number of clients: 10  
number of threads: 10  
duration: 120 s  
number of transactions actually processed: 8306176  
latency average = 0.144 ms  
latency stddev = 0.117 ms  
initial connection time = 23.128 ms  
tps = 69224.826220 (without initial connection time)  
statement latencies in milliseconds:  
         0.000  \set uid random(1,1000000)  
         0.081  with a as (  
         0.064  insert into tbl_log values (:uid, :info_before, :info_after, inet_client_addr(), inet_client_port(), now());  
```  
```  
select * from tbl_log limit 10;  
postgres=# select * from tbl_log limit 10;  
  uid   |           info_before            |            info_after            | client_inet | client_port |             ts               
--------+----------------------------------+----------------------------------+-------------+-------------+----------------------------  
 345609 | b1946507f8c128d18e6f7e41ce22440e | a2df0ff6272ea38a6629b216b61be6e6 |             |             | 2023-09-06 09:45:27.959822  
 110758 | 39b6e7ab8ee91edebcd8b20d0a9fc99e | 5996800e06a82ccf5af904e980020157 |             |             | 2023-09-06 09:45:27.959902  
 226098 | 71c1983845e006f59b1cb5bd44d34675 | 5ab57b88f67272f4567c17c9fd946d19 |             |             | 2023-09-06 09:45:27.961955  
 210657 | 4dc8e7aaeb7b2c323292c6f75c9c5e41 | 0a8a4d58f82639b7e23519b578a64dfa |             |             | 2023-09-06 09:45:27.962091  
 898076 | 6b65ce6281880d1922686a200604dee9 | e695ea569fc4747832f7bbada5acbc17 |             |             | 2023-09-06 09:45:27.962147  
 117448 | 09f6ab54fea2b6729ff5ea297dbb50e9 | 94da2a284ae4751a60165203e88f1ff7 |             |             | 2023-09-06 09:45:27.962234  
 208582 | e8cb577f92e6898ff384fa77c805da00 | 0188ddf40947257009336cdc0862143d |             |             | 2023-09-06 09:45:27.959403  
   2241 | cf4ae28a99a5f39f07f7d3e0bcee6940 | d98df58e39c3d8942471179961ffe95d |             |             | 2023-09-06 09:45:27.96257  
 466615 | b2c012d9a5db4957753f2b67c80943e3 | f9de82dad0b90138686c9c36774faf5e |             |             | 2023-09-06 09:45:27.962729  
 241103 | 9680999428704ffb103b10271e490d14 | d88e38aa975490fcb7e2d81c10fda3c9 |             |             | 2023-09-06 09:45:27.962784  
(10 rows)  
```  
四、压测  
1、使用pgbench 编写自定义压测脚本.  
前面的例子都已经讲过了. 略.    
#### 对照  
传统数据库通常只能做tpcc,tpch,tpcb标准测试, 无法根据实际的业务场景和需求进行数据的生成、压测, 因此也无法实现提前预知业务压力问题, 提前解决瓶颈的目的.    
PostgreSQL|PolarDB 非常灵活, 自定义生成数据的方法非常多, 通过SRF, pgbench等可以快速加载特征数据, 可以根据实际的业务场景和需求进行数据的生成、压测. 可以实现提前预知业务压力问题, 帮助用户提前解决瓶颈.    
## 知识点      
pgbench  
tpcc  
tpcb  
tpch  
tpcds  
随机数  
## 思考      
思考一下你熟悉的业务, 数据特征, 设计对应的表结构, 生成具有业务特征的数据, 编写业务相关SQL语句, 进行压力测试.    
现在chatgpt已经非常的智能, 你可以尝试一下把你的想法告诉chatgpt, 让他来写SQL.  
```
问题: 写一个postgresql函数, 生成随机单词组成的字符串.
回答: 下面是一个示例的 PostgreSQL 函数，用于生成由随机单词组成的字符串：
CREATE OR REPLACE FUNCTION generate_random_string(word_count INTEGER, word_length INTEGER)
  RETURNS TEXT AS $$
DECLARE
  alphabet TEXT[] := array['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z'];
  random_string TEXT := '';
BEGIN
  FOR i IN 1..word_count LOOP
    DECLARE
      random_word TEXT := '';
    BEGIN
      FOR j IN 1..word_length LOOP
        random_word := random_word || alphabet[ceil(random() * array_length(alphabet, 1))];
      END LOOP;
      random_string := random_string || random_word || ' ';
    END;
  END LOOP;
  RETURN TRIM(random_string);
END;
$$ LANGUAGE plpgsql;
```
这个函数使用了两个参数：word_count 表示要生成的随机单词的数量，word_length 表示每个随机单词的长度。它同样使用了一个字母表数组 alphabet，在循环中，它从字母表中随机选择一个字母构成单词，并将单词添加到随机字符串中。最后使用 TRIM 函数去除字符串两端的空格，并返回生成的随机字符串。  
## 参考    
##### 201711/20171121_01.md   [《PostgreSQL 如何快速构建 海量 逼真 测试数据》](../201711/20171121_01.md)    
##### 202209/20220906_01.md   [《股票涨跌幅概率符合高斯分布特征吗? 如何使用PostgreSQL pgbench模拟较为逼真的股票数据?》](../202209/20220906_01.md)    
##### 202109/20210902_01.md   [《PostgreSQL 15 preview - pgbench copy freeze 加速tpc-b测试数据生成》](../202109/20210902_01.md)    
##### 202108/20210805_08.md   [《PostgreSQL 15 preview - pgbench pipeline压测代码优化, 提升性能》](../202108/20210805_08.md)    
##### 202104/20210407_04.md   [《PostgreSQL 14 preview - pgbench 压测工具新增 随机函数 permute(i, size, \[seed\]) 返回 i 经过重新(随机)映射后 在 \[0,size) 范围内的一个值》](../202104/20210407_04.md)    
##### 202103/20210311_04.md   [《PostgreSQL 14 preview - copy freeze 增强, pgbench 支持copy freeze 大幅提升导入性能》](../202103/20210311_04.md)    
##### 202101/20210116_02.md   [《PostgreSQL 14 preview - pgbench 支持冒号常量, 例如时间,timestamp常量》](../202101/20210116_02.md)    
##### 201912/20191204_05.md   [《PostgreSQL 13 preview - pgbench server-side产生tpc-b测试数据(使用generate_series产生大量测试数据)》](../201912/20191204_05.md)    
##### 201909/20190901_02.md   [《PostgreSQL 13 preview - pgbench 内置tpcb支持 pgbench_account 分区表》](../201909/20190901_02.md)    
##### 201908/20190828_02.md   [《PostgreSQL pgbench client_id 变量用途 - 压测时防止线程间锁冲突(未来，代替动态表名,分区表)》](../201908/20190828_02.md)    
##### 201903/20190331_07.md   [《PostgreSQL 12 preview - pgbench 自定义压测script支持一条SQL最多绑定256个变量》](../201903/20190331_07.md)    
##### 201903/20190331_05.md   [《PostgreSQL 12 preview - pgbench 压测工具编程能力增强 - gset 支持SQL结果返回并存入变量使用》](../201903/20190331_05.md)    
##### 201809/20180919_04.md   [《PostgreSQL pgbench tpcb 海量数据库测试 - 分区表测试优化》](../201809/20180919_04.md)    
##### 201809/20180919_03.md   [《PostgreSQL pgbench tpcb 数据生成与SQL部分源码解读》](../201809/20180919_03.md)    
##### 201805/20180519_11.md   [《PostgreSQL 11 preview - pgbench 压测软件增强》](../201805/20180519_11.md)    
##### 201805/20180516_02.md   [《PostgreSQL pgbench 支持100万连接》](../201805/20180516_02.md)    
##### 201803/20180325_03.md   [《PostgreSQL 11 preview - pgbench 支持大于1000链接(ppoll()代替select())》](../201803/20180325_03.md)    
##### 201712/20171222_01.md   [《PostgreSQL pgbench : 冒号处理 常量包含冒号。》](../201712/20171222_01.md)    
##### 201711/20171119_01.md   [《PostgreSQL 11 preview - pgbench 变量、函数扩展 - 暨pgbench 自定义 benchmark讲解》](../201711/20171119_01.md)    
##### 201610/20161031_02.md   [《PostgreSQL 使用 pgbench 测试 sysbench 相关case - pg_oltp_bench》](../201610/20161031_02.md)    
##### 201609/20160926_03.md   [《PostgreSQL pgbench SQL RT 与 事务RT 浅析》](../201609/20160926_03.md)    
##### 201506/20150618_01.md   [《生成泊松、高斯、指数、随机分布数据 - PostgreSQL 9.5 new feature - pgbench improve, gaussian (standard normal) & exponential distribution》](../201506/20150618_01.md)    
##### 201901/20190109_01.md   [《PostgreSQL native partition 分区表性能优化之 - 动态SQL+服务端绑定变量》](../201901/20190109_01.md)    
##### 201711/20171107_48.md   [《HTAP数据库 PostgreSQL 场景与性能测试之 47 - (OLTP多模优化) 空间应用 - 高并发空间位置更新、多属性KNN搜索并测（含空间索引）末端配送、新零售类项目》](../201711/20171107_48.md)    
##### 201711/20171107_47.md   [《HTAP数据库 PostgreSQL 场景与性能测试之 46 - (OLTP) 大json字段的高并发更新》](../201711/20171107_47.md)    
##### 201711/20171107_46.md   [《HTAP数据库 PostgreSQL 场景与性能测试之 45 - (OLTP) 数据量与性能的线性关系(10亿+无衰减), 暨单表多大需要分区》](../201711/20171107_46.md)    
##### 201711/20171107_45.md   [《[未完待续] HTAP数据库 PostgreSQL 场景与性能测试之 44 - (OLTP) 空间应用 - 空间包含查询(输入多边形 包含 表内空间对象)》](../201711/20171107_45.md)    
##### 201711/20171107_44.md   [《HTAP数据库 PostgreSQL 场景与性能测试之 43 - (OLTP+OLAP) unlogged table 含索引多表批量写入》](../201711/20171107_44.md)    
##### 201711/20171107_43.md   [《HTAP数据库 PostgreSQL 场景与性能测试之 42 - (OLTP+OLAP) unlogged table 不含索引多表批量写入》](../201711/20171107_43.md)    
##### 201711/20171107_42.md   [《HTAP数据库 PostgreSQL 场景与性能测试之 41 - (OLTP+OLAP) 含索引多表批量写入》](../201711/20171107_42.md)    
##### 201711/20171107_41.md   [《HTAP数据库 PostgreSQL 场景与性能测试之 40 - (OLTP+OLAP) 不含索引多表批量写入》](../201711/20171107_41.md)    
##### 201711/20171107_40.md   [《HTAP数据库 PostgreSQL 场景与性能测试之 39 - (OLTP+OLAP) logged & unlogged table 含索引多表单点写入》](../201711/20171107_40.md)    
##### 201711/20171107_39.md   [《HTAP数据库 PostgreSQL 场景与性能测试之 38 - (OLTP+OLAP) logged & unlogged table 不含索引多表单点写入》](../201711/20171107_39.md)    
##### 201711/20171107_38.md   [《HTAP数据库 PostgreSQL 场景与性能测试之 37 - (OLTP+OLAP) 含索引单表批量写入》](../201711/20171107_38.md)    
##### 201711/20171107_37.md   [《HTAP数据库 PostgreSQL 场景与性能测试之 36 - (OLTP+OLAP) 不含索引单表批量写入》](../201711/20171107_37.md)    
##### 201711/20171107_36.md   [《HTAP数据库 PostgreSQL 场景与性能测试之 35 - (OLTP+OLAP) 含索引单表单点写入》](../201711/20171107_36.md)    
##### 201711/20171107_35.md   [《HTAP数据库 PostgreSQL 场景与性能测试之 34 - (OLTP+OLAP) 不含索引单表单点写入》](../201711/20171107_35.md)    
##### 201711/20171107_34.md   [《HTAP数据库 PostgreSQL 场景与性能测试之 33 - (OLAP) 物联网 - 线性字段区间实时统计》](../201711/20171107_34.md)    
##### 201711/20171107_33.md   [《HTAP数据库 PostgreSQL 场景与性能测试之 32 - (OLTP) 高吞吐数据进出(堆存、行扫、无需索引) - 阅后即焚(JSON + 函数流式计算)》](../201711/20171107_33.md)    
##### 201711/20171107_32.md   [《HTAP数据库 PostgreSQL 场景与性能测试之 31 - (OLTP) 高吞吐数据进出(堆存、行扫、无需索引) - 阅后即焚(读写大吞吐并测)》](../201711/20171107_32.md)    
##### 201711/20171107_31.md   [《HTAP数据库 PostgreSQL 场景与性能测试之 30 - (OLTP) 秒杀 - 高并发单点更新》](../201711/20171107_31.md)    
##### 201711/20171107_30.md   [《HTAP数据库 PostgreSQL 场景与性能测试之 29 - (OLTP) 空间应用 - 高并发空间位置更新（含空间索引）》](../201711/20171107_30.md)    
##### 201711/20171107_29.md   [《HTAP数据库 PostgreSQL 场景与性能测试之 28 - (OLTP) 高并发点更新》](../201711/20171107_29.md)    
##### 201711/20171107_28.md   [《HTAP数据库 PostgreSQL 场景与性能测试之 27 - (OLTP) 物联网 - FEED日志, 流式处理 与 阅后即焚 (CTE)》](../201711/20171107_28.md)    
##### 201711/20171107_27.md   [《HTAP数据库 PostgreSQL 场景与性能测试之 26 - (OLTP) NOT IN、NOT EXISTS 查询》](../201711/20171107_27.md)    
##### 201711/20171107_26.md   [《HTAP数据库 PostgreSQL 场景与性能测试之 25 - (OLTP) IN , EXISTS 查询》](../201711/20171107_26.md)    
##### 201711/20171107_25.md   [《HTAP数据库 PostgreSQL 场景与性能测试之 24 - (OLTP) 物联网 - 时序数据并发写入(含时序索引BRIN)》](../201711/20171107_25.md)    
##### 201711/20171107_24.md   [《HTAP数据库 PostgreSQL 场景与性能测试之 23 - (OLAP) 并行计算》](../201711/20171107_24.md)    
##### 201711/20171107_23.md   [《HTAP数据库 PostgreSQL 场景与性能测试之 22 - (OLTP) merge insert|upsert|insert on conflict|合并写入》](../201711/20171107_23.md)    
##### 201711/20171107_22.md   [《HTAP数据库 PostgreSQL 场景与性能测试之 21 - (OLTP+OLAP) 排序、建索引》](../201711/20171107_22.md)    
##### 201711/20171107_21.md   [《HTAP数据库 PostgreSQL 场景与性能测试之 20 - (OLAP) 用户画像圈人场景 - 多个字段任意组合条件筛选与透视》](../201711/20171107_21.md)    
##### 201711/20171107_20.md   [《HTAP数据库 PostgreSQL 场景与性能测试之 19 - (OLAP) 用户画像圈人场景 - 数组相交查询与聚合》](../201711/20171107_20.md)    
##### 201711/20171107_19.md   [《HTAP数据库 PostgreSQL 场景与性能测试之 18 - (OLAP) 用户画像圈人场景 - 数组包含查询与聚合》](../201711/20171107_19.md)    
##### 201711/20171107_18.md   [《HTAP数据库 PostgreSQL 场景与性能测试之 17 - (OLTP) 数组相似查询》](../201711/20171107_18.md)    
##### 201711/20171107_17.md   [《HTAP数据库 PostgreSQL 场景与性能测试之 16 - (OLTP) 文本特征向量 - 相似特征(海明...)查询》](../201711/20171107_17.md)    
##### 201711/20171107_16.md   [《HTAP数据库 PostgreSQL 场景与性能测试之 15 - (OLTP) 物联网 - 查询一个时序区间的数据》](../201711/20171107_16.md)    
##### 201711/20171107_15.md   [《HTAP数据库 PostgreSQL 场景与性能测试之 14 - (OLTP) 字符串搜索 - 全文检索》](../201711/20171107_15.md)    
##### 201711/20171107_14.md   [《HTAP数据库 PostgreSQL 场景与性能测试之 13 - (OLTP) 字符串搜索 - 相似查询》](../201711/20171107_14.md)    
##### 201711/20171107_13.md   [《HTAP数据库 PostgreSQL 场景与性能测试之 12 - (OLTP) 字符串搜索 - 前后模糊查询》](../201711/20171107_13.md)    
##### 201711/20171107_12.md   [《HTAP数据库 PostgreSQL 场景与性能测试之 11 - (OLTP) 字符串搜索 - 后缀查询》](../201711/20171107_12.md)    
##### 201711/20171107_11.md   [《HTAP数据库 PostgreSQL 场景与性能测试之 10 - (OLTP) 字符串搜索 - 前缀查询》](../201711/20171107_11.md)    
##### 201711/20171107_10.md   [《HTAP数据库 PostgreSQL 场景与性能测试之 9 - (OLTP) 字符串模糊查询 - 含索引实时写入》](../201711/20171107_10.md)    
##### 201711/20171107_09.md   [《HTAP数据库 PostgreSQL 场景与性能测试之 8 - (OLTP) 多值类型(数组)含索引实时写入》](../201711/20171107_09.md)    
##### 201711/20171107_08.md   [《HTAP数据库 PostgreSQL 场景与性能测试之 7 - (OLTP) 全文检索 - 含索引实时写入》](../201711/20171107_08.md)    
##### 201711/20171107_07.md   [《HTAP数据库 PostgreSQL 场景与性能测试之 6 - (OLTP) 空间应用 - KNN查询（搜索附近对象，由近到远排序输出）》](../201711/20171107_07.md)    
##### 201711/20171107_06.md   [《HTAP数据库 PostgreSQL 场景与性能测试之 5 - (OLTP) 空间应用 - 空间包含查询(表内多边形 包含 输入空间对象)》](../201711/20171107_06.md)    
##### 201711/20171107_05.md   [《HTAP数据库 PostgreSQL 场景与性能测试之 4 - (OLAP) 大表OUTER JOIN统计查询》](../201711/20171107_05.md)    
##### 201711/20171107_49.md   [《HTAP数据库 PostgreSQL 场景与性能测试之 3.1 - (OLAP) 大表JOIN统计查询-10亿 join 1亿 agg》](../201711/20171107_49.md)    
##### 201711/20171107_04.md   [《HTAP数据库 PostgreSQL 场景与性能测试之 3 - (OLAP) 大表JOIN统计查询》](../201711/20171107_04.md)    
##### 201711/20171107_03.md   [《HTAP数据库 PostgreSQL 场景与性能测试之 2 - (OLTP) 多表JOIN》](../201711/20171107_03.md)    
##### 201711/20171107_02.md   [《HTAP数据库 PostgreSQL 场景与性能测试之 1 - (OLTP) 点查》](../201711/20171107_02.md)    
##### 201611/20161129_01.md   [《PostgreSQL 源码性能诊断(perf profiling)指南(含火焰图生成分析FlameGraph) - 珍藏级》](../201611/20161129_01.md)    
https://www.cnblogs.com/xianghuaqiang/p/14425274.html  
##### 202209/20220901_05.md   [《DuckDB 采用外部 parquet 格式存储 - tpch 测试 - in_memory VS in_parquet》](../202209/20220901_05.md)    
##### 202208/20220829_01.md   [《DuckDB vs PostgreSQL TPC-H 测试》](../202208/20220829_01.md)    
##### 202208/20220828_01.md   [《DuckDB TPC-H, TPC-DS 测试》](../202208/20220828_01.md)    
##### 202208/20220826_02.md   [《DuckDB 定位OLAP方向的SQLite, 适合嵌入式数据分析 - tpch测试与简单试用》](../202208/20220826_02.md)    
##### 202109/20210902_01.md   [《PostgreSQL 15 preview - pgbench copy freeze 加速tpc-b测试数据生成》](../202109/20210902_01.md)    
##### 202008/20200803_07.md   [《PostgreSQL 13 新增 hash 内存参数, 提高hash操作性能 - hash_mem_multiplier - work_mem的倍数 - 支持超越内存时采用disk 存储hash表, 支持更多场景使用hashagg, TPCH性能大幅提升》](../202008/20200803_07.md)    
##### 201912/20191204_05.md   [《PostgreSQL 13 preview - pgbench server-side产生tpc-b测试数据(使用generate_series产生大量测试数据)》](../201912/20191204_05.md)    
##### 201911/20191121_01.md   [《阿里云RDS PG 11支持ESSD pl3 存储，满足企业超高性能数据库要求 - 含tpcc测试结果》](../201911/20191121_01.md)    
##### 201910/20191015_01.md   [《PostgreSQL 12 tpcc 测试 - use sysbench-tpcc by Percona-Lab》](../201910/20191015_01.md)    
##### 201909/20190901_02.md   [《PostgreSQL 13 preview - pgbench 内置tpcb支持 pgbench_account 分区表》](../201909/20190901_02.md)    
##### 201809/20180920_01.md   [《PostgreSQL 11 1Kw TPCC , 1亿 TPCB 7\*24 强压耐久测试》](../201809/20180920_01.md)    
##### 201809/20180919_04.md   [《PostgreSQL pgbench tpcb 海量数据库测试 - 分区表测试优化》](../201809/20180919_04.md)    
##### 201809/20180919_03.md   [《PostgreSQL pgbench tpcb 数据生成与SQL部分源码解读》](../201809/20180919_03.md)    
##### 201809/20180919_01.md   [《PostgreSQL 11 1万亿 tpcb 性能测试 on 阿里云ECS + ESSD + zfs/lvm2条带 + block_size=32K》](../201809/20180919_01.md)    
##### 201809/20180917_01.md   [《PostgreSQL 11 1000亿 tpcb、1000W tpcc 性能测试 - on 阿里云ECS + ESSD (含quorum based 0丢失多副本配置与性能测试)》](../201809/20180917_01.md)    
##### 201809/20180916_01.md   [《PostgreSQL 11 100亿 tpcb 性能测试 on ECS》](../201809/20180916_01.md)    
##### 201809/20180913_01.md   [《PostgreSQL 11 tpcc 测试(103万tpmC on ECS) - use sysbench-tpcc by Percona-Lab》](../201809/20180913_01.md)    
##### 201809/20180903_02.md   [《Deepgreen(Greenplum) 多机部署测试 , TPC-H VS citus》](../201809/20180903_02.md)    
##### 201808/20180829_01.md   [《PostgreSQL sharding : citus 系列2 - TPC-H》](../201808/20180829_01.md)    
##### 201808/20180826_01.md   [《[转载] TPCH 22条SQL语句分析》](../201808/20180826_01.md)    
##### 201808/20180824_02.md   [《PostgreSQL sharding : citus 系列1 - 多机部署（含OLTP(TPC-B)测试）- 含Citus MX模式》](../201808/20180824_02.md)    
##### 201808/20180823_01.md   [《(TPC-H测试 SF=10,SF=200) PostgreSQL 11 vs 10 vs Deepgreen》](../201808/20180823_01.md)    
##### 201805/20180530_01.md   [《PostgreSQL 推荐 TPC-C 测试工具 sqlbench》](../201805/20180530_01.md)    
##### 201707/20170714_01.md   [《TPC-H测试 - PostgreSQL 10 vs Deepgreen(Greenplum)》](../201707/20170714_01.md)    
##### 201702/20170207_02.md   [《[转自叶大师博文] tpcc-mysql安装、使用、结果解读》](../201702/20170207_02.md)    
##### 201611/20161108_01.md   [《PostgreSQL 并行计算tpc-h测试和优化分析》](../201611/20161108_01.md)    
##### 201610/20161011_02.md   [《Greenplum,HAWQ interval parser带来的问题 - TPCH 测试注意啦》](../201610/20161011_02.md)    
##### 201606/20160604_01.md   [《PostgreSQL on ECS 横向版本TPCB性能测试》](../201606/20160604_01.md)    
##### 201601/20160111_02.md   [《BenchmarkSQL 测试Oracle 12c TPC-C 性能 (含个人测试结果)》](../201601/20160111_02.md)    
##### 201601/20160109_01.md   [《BenchmarkSQL 测试PostgreSQL 9.5.0 TPC-C 性能》](../201601/20160109_01.md)    
##### 201512/20151223_02.md   [《BenchmarkSQL 测试Oracle 12c TPC-C 性能》](../201512/20151223_02.md)    
#### [期望 PostgreSQL|开源PolarDB 增加什么功能?](https://github.com/digoal/blog/issues/76 "269ac3d1c492e938c0191101c7238216")
#### [PolarDB 云原生分布式开源数据库](https://github.com/ApsaraDB "57258f76c37864c6e6d23383d05714ea")
#### [PolarDB 学习图谱: 训练营、培训认证、在线互动实验、解决方案、内核开发公开课、生态合作、写心得拿奖品](https://www.aliyun.com/database/openpolardb/activity "8642f60e04ed0c814bf9cb9677976bd4")
#### [PostgreSQL 解决方案集合](../201706/20170601_02.md "40cff096e9ed7122c512b35d8561d9c8")
#### [德哥 / digoal's github - 公益是一辈子的事.](https://github.com/digoal/blog/blob/master/README.md "22709685feb7cab07d30f30387f0a9ae")
![digoal's wechat](../pic/digoal_weixin.jpg "f7ad92eeba24523fd47a6e1a0e691b59")
#### [购买PolarDB云服务折扣活动进行中, 55元起](https://www.aliyun.com/activity/new/polardb-yunparter?userCode=bsb3t4al "e0495c413bedacabb75ff1e880be465a")
#### [About 德哥](https://github.com/digoal/blog/blob/master/me/readme.md "a37735981e7704886ffd590565582dd0")