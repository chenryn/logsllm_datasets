0.99
0.99
0.98
0.99
0.99
m = 10
Table 1. Success probabilities per byte for
AES, for various attack parameters.
the attack. For example, already for m = 10 and n = 2, the
success probability is 0.996, meaning that an entire block of
plaintext can be recovered correctly with probability 0.94,
at a cost of (roughly) 7000 bytes of network trafﬁc per byte.
6 Attacking the GnuTLS Implementation of
DTLS
We have examined the GnuTLS implementation of
DTLS, with the intention of ﬁnding similar attacks. How-
ever, the code for decryption11 is such that there is no timing
difference for processing of packets with valid and invalid
padding: the MAC veriﬁcation is carried out in either case,
and only then is the packet dropped. However, the code
does include the lines shown in Figure 7. These are exe-
11See
http://git.savannah.gnu.org/gitweb/?p=
gnutls.git;a=blob;f=lib/gnutls_cipher.c
(a) l = 256
(b) l = 1024
(c) l = 1456
Figure 2. 3DES – PDFs for n = 10 and varying l.
(a) l = 256
(b) l = 1024
(c) l = 1456
Figure 3. AES-256 – PDFs for n = 10 and varying l.
cuted after CBC-mode decryption, but before the full pad
check and MAC veriﬁcation are done.
From this code, it can be seen that if a certain test involv-
ing the padding length in pad and the ciphertext size fails,
then gnutls_assert and _gnutls_record_log
are executed. _gnutls_record_log logs messages
to an output only if the GnuTLS program is executed
with its debugging level set to 4 or higher.
In our labo-
ratory set-up, we have used the default debugging level,
0, meaning that calling _gnutls_record_log does
not result in the server producing an error message in
the case when the test fails. Whether or not error mes-
sages are output, we noticed in our tests that a small
timing delay is introduced into the decryption process-
ing when the padding length test shown in Figure 7 fails.
The rest of the packet processing then proceeds as nor-
mal (but with a padding check not being performed if the
padding length test has failed). Each packet that fails the
padding length test or the padding check results in GnuTLS
printing a “Discarded message due to invalid
decryption” error message to the screen. Unless the de-
bugging level is changed, no other error messages are pro-
duced.
The timing difference that we observed during testing
allows a partial plaintext recovery attack against GnuTLS.
We explain this next. For ease of presentation, we assume
that the MAC size is 32 bytes (as would be produced by
HMAC-SHA-256), but a similar attack would apply for 20-
byte MACs. Now the padding length ﬁeld pad is obtained
from the last byte of the decrypted ciphertext (see line 552
in Figure 7). Consider an adversary who builds a DTLS
packet whose encrypted payload (excluding the IV) is 160
bytes in length and that ends with two blocks R, C∗
t , where
C∗
t is the target ciphertext block. Then, recalling our num-
bering convention for the bytes of a block and the CBC-
mode decryption procedure, the padding length test in the
GnuTLS code is triggered precisely when:
R[0] ⊕ Dk(C∗
t )[0] > 127.
Thus, if the targeted system responds slowly to the ad-
versary’s packet, he can infer that the most signiﬁcant bit
(MSB) of R[0]⊕ Dk(C∗
t )[0] is set to 1. From this, the MSB
of P ∗
t [0], the rightmost byte of the plaintext corresponding
to C∗
t , is easily deduced. The attacker can then target the
second-MSB of P ∗
t [0], by setting R[0] so that the MSB of
R[0] ⊕ Dk(C∗
t )[0] equals 0 and then using a DTLS packet
of length 96 bytes (again excluding the IV). This provides a
test of the form:
R[0] ⊕ Dk(C∗
t )[0] > 63
t )[0] ≤ 127,
with the side information that R[0] ⊕ Dk(C∗
from which the adversary learns that the second-MSB of
R[0]⊕Dk(C∗
t )[0] is set to 1. An alternative approach to this
is setting R[0] so that the MSB of R[0]⊕ Dk(C∗
t )[0] equals
1 instead of 0 and then using a DTLS packet of length 224
5405605806006206400.050.100.150.200.250.301240126012801300132013400.020.040.060.0816601680170017200.010.020.030.040.050.065205305405505605705800.050.100.150.20121012151220122512300.050.100.151580159016001610162016300.020.040.060.080.100.12(a) n = 10
(b) n = 40
(c) n = 160
Figure 4. 3DES – PDFs for l = 1024 and varying n.
(a) n = 10
(b) n = 40
(c) n = 160
Figure 5. AES-256 – PDFs for l = 1024 and varying n.
R[0] ⊕ Dk(C∗
t )[0] > 191
bytes (again excluding the IV). This provides a test of the
form:
The adversary can learn that the second-MSB of R[0] ⊕
Dk(C∗
t )[0] is set to 1. This alternative approach gives the
adversary the opportunity to use packets with sizes that re-
sult in better success probabilities as we demonstrate later,
and hence is preferable. For both approaches, iterating, the
attacker can extract the 4 MSBs of P ∗
t [0] when the block
cipher is AES, and the 5 MSBs of P ∗
t [0] when it is 3DES.
The least signiﬁcant bits (LSBs) cannot be extracted using
our attack because the packet size must be a multiple of the
block size b.
This provides a theoretical description of our attack.
Of course, the adversary can use the same techniques as
worked for OpenSSL to amplify his attack: using packet
trains, multiple trials, and removal of outliers. A practi-
cal issue arises because GnuTLS does not implement the
Heartbeat extension, but here we can use any application
layer protocol with predictable timing differences. In prin-
cipal, the same attack would work against the GnuTLS im-
plementation of TLS, with the TLS connection tear-down
giving the required timing information. But, in this case,
trains of packets cannot be used to amplify the timing dif-
ference, since the connection is terminated upon the ﬁrst
failure.
We have conducted experiments
sufﬁcient
the timing difference is
to test whether
to allow the at-
results being pre-
tack for DTLS, with experimental
sented in Figure 8 for HMAC-SHA-256 and AES-
256. Here, we see separation between the peaks of
the distributions (red for packets where the inequality
“pad > ciphertext.size - hash_size” is sat-
isﬁed, blue for when it is not). In this attack, the adversary
needs to adjust the payload length, l, based on the position
of the bit he tries to recover. Changing the value of l to
recover a bit would change the success probability of the
attack.
• With the ﬁrst approach, where shorter packets are used,
we were able to achieve success probabilities of 1,
0.874, 0.722 and 0.724 for individually extracting the
ﬁrst, second, third and fourth MSB respectively, mean-
ing that the four MSBs can be recovered correctly with
probability 0.457, using (roughly) 262 Kbytes of net-
work trafﬁc. These probabilities were achieved with
n = 5, m = 200 and were calculated over 1000 attack
runs. We use the median RTT from the m values avail-
able, and then select the correct bit as being the one
that gives the highest RTT. Increasing the value of m
signiﬁcantly increases the success probability. For ex-
ample, with m = 1000 we were able to achieve a suc-
cess probability of 0.781 for recovering the four MSBs.
Using other statistical techniques can also increase the
success probability. For example, using percentile ﬁl-
ters, similar to the approach used in [3], raises the suc-
cess probability from 0.781 to 0.823 for the same set
1240126012801300132013400.020.040.060.0839003950400040504100415042000.010.020.030.040.050.060.0714600148001500015200154000.010.020.030.04121012151220122512300.050.100.15528052905300531053200.020.040.060.080.107906079080791000.010.020.030.04(a) n = 10
(b) n = 40
(c) n = 160
Figure 6. AES-256 – PDFs for l = 256 and varying n.
n
1
2
5
10
20
50
p
0.017
0.210
0.205
0.012
0.035
0.147
m = 1
n
1
2
5
10
20
50
p
0.961
0.983
0.983
0.985
0.989
0.965
m = 5
p
n
1
2
5
10
20
50
m = 10
0.983
0.996
0.995
0.994
0.995
0.973
Table 3. Success probabilities per byte for AES-256, for l = 192, based on 1000 trials.
of observed RTTs.
• With the second approach, where longer packets are
used, we were able to achieve success probabilities
of 0.797, 0.897, 0.896 and 0.917 for individually ex-
tracting the ﬁrst, second, third and fourth MSB re-
spectively, meaning that the four MSBs can be recov-
ered correctly with probability 0.587, using (roughly)
4300 bytes of network trafﬁc. These probabilities were
achieved with n = 5, m = 1 and measured over 1000
attack runs. As expected, increasing the value of m
signiﬁcantly increases the success probability. For ex-
ample, we were able to achieve success probabilities
of 0.875 and 0.999 for recovering the four MSBs when
m = 10 and m = 100 respectively.
We have shared our ﬁndings with the GnuTLS develop-
ment team and are working with them to identify the root
cause of the timing difference.
To implement the tests, we used the same hardware set-
up as the one we used for OpenSSL. We ran version 3.0.0 of
GnuTLS on the client and the server. We used the built-in
GnuTLS utilities for the client and the server, gnutls cli
and gnutls serv respectively. We again disabled anti-
replay by directly modifying the source code.
7 Discussion
We have demonstrated plaintext
recovering attacks
against the OpenSSL and GnuTLS implementations of
Figure 8. PDFs for AES-256 with HMAC-
SHA256, l = 176, n = 5, based on 1000 trials,
with outliers removed.
DTLS. These are easily prevented by modifying the code
so that the receiver’s cryptographic processing time is inde-
pendent of how decryption fails. However, we contend that
the attacks are still interesting for a number of reasons.
Firstly, the ﬁx to prevent our OpenSSL attack is already
mandated in the speciﬁcation for TLSv1.1, and is imple-
mented in OpenSSL’s implementation of TLS, but not in
its implementation of DTLS. Without more insight into the
software development processes followed by the OpenSSL
project, we can only speculate that the experience about
how to securely implement TLS’s MAC-then-PAD-then-
Encrypt construction was not carried over to the separate
5205305405505605705800.050.100.150.20135014001450150015500.020.040.060.0846004700480049005000510052000.020.040.060.081502002503003504000.0050.0100.0150.0200.0250.030552
553
554
555
556
557
558
559
560
561
562
563
564
pad = ciphertext.data[ciphertext.size - 1] + 1;
/* pad */
if ((int) pad > (int) ciphertext.size - tag_size)
{
}
gnutls_assert ();
_gnutls_record_log
("REC[%p]: Short record length %d > %d - %d (under attack?)\n",
session, pad, ciphertext.size, tag_size);
/* We do not fail here. We check below for the
* the pad_failed. If zero means success.
*/
pad_failed = GNUTLS_E_DECRYPTION_FAILED;
Figure 7. GnuTLS padding length check code
HHHHH
n
l
1
2
5
10
20
50
HHHHH
n
l
1
2
5
10
20
50
HHHHH
n
l
1
2
5
10
20
50
512
0.39
0.26
0.23
0.09
0.08
0.17
512
1.00
0.99
1.00
0.92
0.91
0.90
512
1.00
1.00
1.00
0.93
0.92
0.91
1024
0.06
0.03
0.30
0.38
0.22
0.41
1024
1.00
0.99
0.90
0.89
0.92
0.89
1024
0.99