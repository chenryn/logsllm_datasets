the stack becomes empty. The state space of the run-
time automaton is now ﬁnite, requiring only ﬁnite mem-
ory resources. Correspondingly, the language accepted
by the bounded-stack PDA is regular, but more closely
approximates a context-free language than a regular
NFA.
Unfortunately, a bounded stack introduces a new
problem at points of left recursion. Any recursion
deeper than the maximum height of the stack destroys
all context sensitivity: the stack ﬁrst ﬁlls with only the
recursive symbol; then, unwinding recursion clears the
stack. All stack symbols prior to entering recursion are
lost.
Hybrid Model. This recursion effect seems to be the
opposite of what is desired. For many programs, recur-
sion typically involves a minority of its functions. We
S
S
G
$
d
˛
ﬁ
e
$
d
˛
ﬁ
$
d
˛
ﬁ
˛
main
_3998
line
end
_154
_297
Figure 9: The automaton for main after call site renaming.
Edges labeled with function calls internal to the application
are not renamed, as these edges are splice points for call site
replacement.
consider that it may be more precise to discard recursive
symbols rather than symbols prior to entering recursion.
Our hybrid model uses both NFA and PDA edges during
interprocedural construction to accomplish this. Call site
replacement uses simple e -edges when the procedure
call is on a recursive cycle. A stack symbol is used only
when a call is not recursive. Recursion then adds no
symbols to the PDA stack, leaving the previous context
sensitivity intact. As in the bounded-stack PDA, the
hybrid automaton deﬁnes a regular language that over-
approximates the context-free grammar accepted by a
true PDA.
3.4.2 Context Insensitivity
Regardless of the technique used to construct the inter-
procedural model, the analysis basis for all local models
is context insensitive. We take all control ﬂow paths as
equally likely irrespective of the previous execution ﬂow
and do not evaluate predicates at points of divergence.
This straightforward analysis leads to a degree of non-
determinism in the local automata that we seek to
reduce. Reducing non-determinism decreases the size of
the frontier of possible current states in the automaton at
run-time. There are, in turn, fewer outgoing edges from
the frontier, improving efﬁciency and precision.
Renaming. During program analysis, every remote
call site is assigned a randomly generated name. We
produce a stub function with this random name that
behaves as the original call and rewrite the binary pro-
gram so that the randomly named function is called.
That is, rather than calling a remote system call stub
named, say, write, the call is to a stub named _3998. We
are essentially passing all call site names through a one-
time encryption function. The key is stored at the check-
ing agent (on the submitting machine), which translates
the random name back to the original call name before
execution.
All call sites are thus differentiated. Two separate
calls to the same function now appear as calls to differ-
ent functions. The random names label edges in the
automaton and serve as the input symbol at model run-
time. Renaming reduces non-determinism,
the
model knows precisely where the program is in execu-
tion after every received call. Comparing Figure 9 with
Figure 6, we see that the automaton for main becomes
fully deterministic with renamed call sites.
for
This is an alphabet change, moving from symbols
indicating call names to the potentially larger set of
symbols deﬁning individual call sites. An attacker must
specify attacks given this randomly generated alphabet,
thus requiring analysis to recover the transformations.
Further, only remote calls that are actually used in the
program may be used in an attack. Renamed calls are
generated from call sites, blocking from use any unused
remote call stub still linked into the application.
Call site renaming produces equivalent but
less
human-readable program text, acting as a simplistic
obfuscation technique [8]. The checking agent main-
tains the transformations; recovery by a malicious indi-
vidual requires program analysis to indicate likely
remote call names given the context of the call in the
program. Since we can rewrite the binary code, further
obfuscation techniques are applicable: arguments may
be reordered and mixed with dummy arguments on a
per-call-site basis, for example. More general methods
to obscure control ﬂow are similarly possible, although
we have not pursued such techniques.
A recent paper by Barak et. al. presents a complex-
ity-theoretic argument that proves the impossibility of a
speciﬁc class of obfuscating transformations [5]. They
deﬁne an obfuscated program as a “virtual black box”,
i.e., any property that can be computed by analyzing the
obfuscated program can also be computed from the
input-output behavior of the program.
In contrast to
their work, we require that it is computationally hard for
an adversary to recover the original system calls corre-
sponding to the renamed calls, i.e., it is computationally
hard for the adversary to invert the renaming function.
Hence, our obfuscation requirement is much weaker
than the “virtual blackbox” requirement imposed by
Barak et. al. However, we are not claiming theoretical
guarantees of the strength of our obfuscation transfor-
mation but merely observing that the theoretical results
presented by Barak et. al. do not directly apply in our
context.
Null calls. Insertion of null calls–dummy remote
system calls that
the
checking agent–provides similar effects. We place the
calls within the application so that each provides execu-
translate to null operations at
tion context to the checking agent, again reducing non-
determinism.
For example, null calls may be placed immediately
following each call site of a frequently called function.
Recall that we introduce impossible paths during call
site replacement, and speciﬁcally where we link the ﬁnal
states of a local automaton to the function call return
states. Inserting the null calls at the function call return
sites distinguishes the return locations. Only the true
return path will be followed because only the symbol
corresponding to the null call at the true return site will
be transmitted. The other impossible paths exiting from
the called automaton are broken.
There is a run-time element to renaming and null
call
the
insertion. While reducing non-determinism,
possible paths through the automaton remain unchanged
(although they are labeled differently). To an attacker
with knowledge of the transformations, the available
attacks in a transformed automaton are equivalent to
those in the original, provided the attacker takes control
of the call stream before any remote calls occur. An
attacker who assumes control after one or more remote
calls will be restricted because operation of the model to
that point will have been more precise.
3.4.3 Argument Manipulation
A remote system call exists within a calling context that
inﬂuences the degree of manipulation available to a
malicious process. For example, at a call site to open, a
malicious process could alter the name of the ﬁle passed
as the ﬁrst argument to the call. A model that checks
only the names of calls in the call stream would accept
the open call as valid even though it has been mali-
ciously altered. The context of the open call, however,
may present additional evidence to the checking agent
that enables such argument modiﬁcations to be detected
or prevented.
Argument Recovery. As local automata are con-
structed, we recover all statically determined arguments
by backward slicing on the SPARC argument registers.
In backward register slicing, we iterate through the pre-
vious instructions that affect a given register value [34].
Essentially, we are ﬁnding the instructions that comprise
an expression tree. We simulate the instructions in soft-
ware to recover the result, used here as an argument to a
call. We successfully recover numeric arguments known
statically and strings resident in the data space of the
application. The checking agent stores all recovered
arguments so that they are unavailable for manipulation.
In Figure 10, the backward slice of register %o1 at
the point of the second call to write in function main
iterates through the two instructions that affect the value
of %o1. Only the emphasized instructions are inspected;
sethi %hi(Dnone), %o1
or %o1, %lo(Dnone), %o1
call write
Figure 10: Register Slicing. We iterate backwards through
the instructions that modify register %o1 prior to the call site.
instructions that do not affect the value %o1 are ignored.
In this case, Dnone is a static memory location indicating
where in the data space the string for “none\n” resides.
We recover the string by ﬁrst simulating the instructions
sethi and or in software to compute the memory
address and then reading the string from the data space.
A similar analysis is used to determine possible tar-
gets of indirect calls. Every indirect call site is linked to
every function in the program that has its address taken.
We identify such functions by slicing backward on the
register written at every program point to determine if
the value written is an entry address. Our register slicing
is intraprocedural, making this a reasonable computa-
tion.
3.5 Unresolved Issues
Dynamic Linking. A dynamically linked application
loads shared object code available on the remote
machine into its own address space. Although this code
is non-local, we can fairly assume that
the remote
machine provides standard libraries to ensure correct
execution of remote jobs. Analysis of the local standard
libraries would then provide accurate models of dynam-
ically linked functions.
Although straightforward, we have not yet imple-
mented support for dynamically linked applications.
Some libraries on Solaris 8, such as libnsl.so, use
indirect calls extensively. As we improve our handling
of indirect calls, we expect to handle these applications.
Signal Handling. During execution, receipt of a sig-
nal will cause control ﬂow to jump in and out of a signal
handler regardless of the previous execution state. This
entry and exit is undetectable to the checking agent save
the alarms it may generate. As we already instrument
the binary, we expect to insert null calls at the entry and
exit points of all signal handlers to act as out-of-band
notiﬁcations of signal handler activity. These instrumen-
tations have not yet been implemented.
Multithreading. Both kernel and user level thread
swaps are invisible to the checking agent; thread swaps
will likely cause the run-time model to fail, and this
remains an area for future research. User level thread
scheduling would allow instrumentation of the schedul-
ing routines so that the checking agent could swap to the
corresponding model for the thread. A kernel scheduling
monitor would require kernel modiﬁcations and is cur-
rently not under consideration.
Interpreted Languages. Programs written in lan-
guages such as SML [3] and Java are compiled into an
intermediate form rather than to native binary code. To
execute the program, a native-code run-time interpreter
reads this intermediate representation as data and exe-
cutes speciﬁc binary code segments based upon this
input. Binary code analysis will build a model of the
interpreter that accepts all sequences of remote calls that
could be generated by any compiled program. A precise
model for a speciﬁc application can be built either with
knowledge of the intermediate representation and the
way it is interpreted by the run-time component or by
partial evaluation of the interpreter [21]. However, if the
program is compiled into native code before execution,
as is common in many Java virtual machine implemen-
tations [33], our techniques could again be used to con-
struct program-speciﬁc models of execution.
4 Experimental Results
We evaluate our techniques using two criteria: precision
and efﬁciency. A precise model is one that incorporates
all sequences of calls that may be generated by an appli-
cation but few or no sequences that cannot. An efﬁcient
model is one that adds only a small run-time overhead.
Only efﬁcient models will be deployed, and only precise
models are of security interest.
This section looks ﬁrst at a prototype tool we used
to evaluate our techniques and models. We examine
metrics that measure precision and propose a method to
identify unsafe states in an automaton. Our tests show
that although null call insertion markedly improves the
precision of our models, care must be used so that the
additional calls do not overwhelm the network. We
ﬁnally examine optimizations,
including renaming,
argument recovery, and stack abstractions that improve
the quality of our models.
4.1 Experimental Setup
We implemented an analyzer and a run-time monitor for
a simulated remote execution environment to test the
precision and efﬁciency of our automaton models. The
analyzer examines the submitted binary program and
outputs an automaton and a modiﬁed binary. The autom-
aton is read and operated by a stand-alone process, the
monitor, that acts as the checking local agent, communi-
cating with the modiﬁed program using message-pass-
ing inter-process communication. The monitor is not an
RPC server and only veriﬁes that
the system call
encountered by the program is accepted by the model. If
the monitor successfully updates the automaton, the
original system call proceeds in the rewritten applica-
tion.
Our analyzer and simulated execution environment
run on a Sun Ultra 10 440 Mhz workstation with 640
Mb of RAM running Solaris 8. To simulate a wide-area
network, we add a delay per received remote system call
equivalent to the round trip time between a computer in
Madison, Wisconsin and a computer in Bologna, Italy
(127 ms). We do not include a delay for data transfer, for
we do not statically know what volume of data will be
transferred. Null calls require no reply, so the delay
added per null call is the average time to call send with a
20 byte buffer argument (13 m s). During evaluation, the
collection of Solaris libc kernel trap wrapper functions
deﬁnes our set of remote system calls.
We present the analysis results for six test programs
(see Table 1 for program descriptions and workloads
and Table 2 for statistics). All workloads used default
program options; we speciﬁed no command line
switches.
As we have not implemented general support for
dynamically linked functions, we statically link all pro-
grams. However, several network libraries, such as
libresolv.so, can only be dynamically linked on
Solaris machines. We analyze these libraries using the
same techniques as for an application program, but store
the generated automata for later use. When our analysis
of a program such as procmail or ﬁnger reveals a call to
a dynamically linked function, we read in the stored
local automaton and continue. We currently ignore the
indirect calls in dynamically linked library functions
unless the monitor generates an error at run-time at the
indirect call location.
4.2 Metrics to Measure Precision and Efﬁciency
We wish to analyze both the precision of our models and
the efﬁciency with which the monitor may operate them.
Precision dictates the degree to which an adversary is
limited in their attacks, and thus the usefulness of the
model as a counter-measure. Efﬁcient operation is a
requirement for deployment in real remote execution
environments.
For comparison, we measure automaton precision
using Wagner and Dean’s dynamic average branching
factor metric [36,37]. This metric ﬁrst partitions the sys-
tem calls into two sets, dangerous and safe. Then, during
application execution and model operation, the number
of dangerous calls that would next be accepted by the
model is counted following each operation. The total
count is averaged over the number of operations on the
model. Smaller numbers are favorable and indicate that
an adversary has a small opportunity for exploit.
Program
Description
Workload
entropy
random1
gzip
GNU finger
Calculates the conditional probabilities of packet
header fields from tcpdump data.
Generates a randomized sequence of numbers from
three seed values.
Compresses and decompresses files.
Displays information about the users of a computer. Display information for three users, “bart,” “jha,”
Compute one conditional probability from 100,000
data records.
Randomize the numbers 1-999.
Compress a single 13 Mb text file.
finger
Displays information about the users of a computer. Display information for three users, “bart,” “jha,”
procmail
Processes incoming mail messages.
and “giffin.”
Process a single incoming message.
Table 1: Test program descriptions and test workloads.
and “giffin.”
Program
Source
Language
Lines of Code
(Source)
Compiler
Number of Func-
tions (Binary)
Instructions
(Binary)
Fortran
entropy
random1
gzip
GNU finger
finger
procmail
Table 2: Test programs statistics. Source code line counts do not include library code. Statistics for the binary programs include
58,141
133,632
56,686
95,534
90,486
107,167
1,047
172
8,163
9,504
2,456
10,717
868
1,232
883
1,469
1,370
1,551
gcc
f90
gcc
cc
gcc
cc
C
C
C
C
C
code in statically linked libraries.
Program
No model
% increase
% increase
% increase
entropy
gzip
random1
GNU ﬁnger
ﬁnger
procmail
208.33
81.49
9.68
55.22
30.23
20.90
Table 3: NFA run-time overheads. Absolute overheads indicate execution time in seconds.
0.1 %
0.8 %
11.5 %
0.4 %
0.2 %
0.7 %
0.0 %
0.9 %
12.8 %
1.8 %
7.8 %
0.9 %
0.1 %
0.1 %
0.1 %
0.1 %
0.1 %
0.5 %
No null
calls
208.48
81.61
9.69
55.30
30.25
21.00
Null calls
fan-in 10
208.50
82.16
10.80
55.46
30.28
21.04
Null calls
fan-in 5
208.41
82.26
10.92
56.23