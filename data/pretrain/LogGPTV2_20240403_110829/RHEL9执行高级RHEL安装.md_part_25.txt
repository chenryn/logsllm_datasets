::: title
**备注**
:::
Kdump
是内核崩溃转储机制，可让您保存系统内存内容，以便稍后进行分析。它依赖于
`kexec`{.literal}，可用于在不重新启动系统的情况下从另一个内核上下文引导
Linux 内核，并保留第一个内核内存的内容，否则会丢失第一个内核的内存。
如果系统崩溃，`kexec`{.literal}
引导进入第二个内核（捕获内核）。这个捕获内核位于系统内存的保留部分。然后
Kdump 会捕获崩溃内核的内存（崩溃转储）并将其保存到指定位置。无法使用这个
Kickstart 命令配置该位置 ; 必须在安装后通过编辑
`/etc/kdump.conf`{.literal} 配置文件来配置该位置。
有关 Kdump 的详情，请参考 [*管理、监控和更新内核*]{.emphasis} 文档中的
[安装
kdump](https://access.redhat.com/documentation/en-us/red_hat_enterprise_linux/9/html-single/managing_monitoring_and_updating_the_kernel/index#installing-kdump_managing-monitoring-and-updating-the-kernel){.link}
章节。
::: itemizedlist
**选项**
-   `--enable`{.literal} - 在安装的系统中启用 kdump。
-   `--disable`{.literal} - 在安装的系统中禁用 kdump。
-   `--reserve-mb=`{.literal} - 要为 kdump 保留的内存量，单位为
    MiB。例如：
    ``` screen
    %addon com_redhat_kdump --enable --reserve-mb=128
    %end
    ```
    您还可以指定 `auto`{.literal}
    而不是数字值。在这种情况下，安装程序将根据
    [*管理、监控和更新内核*]{.emphasis} 文档中的 [kdump
    内存要求](https://access.redhat.com/documentation/en-us/red_hat_enterprise_linux/9/html-single/managing_monitoring_and_updating_the_kernel/#memory-requirements-for-kdump_supported-kdump-configurations-and-targets){.link}部分中描述的标准自动决定内存量。
    如果启用 kdump 且没有指定 `--reserve-mb=`{.literal} 选项，则会使用
    `auto`{.literal} 值。
-   `--enablefadump`{.literal} - 在允许它的系统中（特别是 IBM Power
    Systems 服务器）启用固件辅助转储。
:::
:::
::: section
::: titlepage
## []{#kickstart-commands-and-options-reference_installing-rhel-as-an-experienced-user.html#addon-com_redhat_oscap_kickstart-commands-for-addons-supplied-with-the-rhel-installation-program}%addon com_redhat_oscap {.title}
:::
`%addon com_redhat_oscap`{.literal} Kickstart 命令是可选的。
OpenSCAP 安装程序附加组件是用来在安装的系统中应用
SCAP（安全内容自动化协议）内容 - 安全策略。从 Red Hat Enterprise Linux
7.2
开始默认启用此附加组件。启用后，会自动安装提供这个功能的软件包。但默认情况下不会强制任何策略。这代表，除非特别指定，在安装过程中或安装后不会执行任何检查。
::: {.important style="margin-left: 0.5in; margin-right: 0.5in;"}
### 重要 {.title}
不需要在所有系统中应用安全策略。只有在您的机构规则或政府法规强制某种策略时，才使用这个命令。
:::
与大多数命令不同，此附加组件不接受常规选项，而是使用 `%addon`{.literal}
定义正文中的键值对。这些键值对无法验证空白。值可以选择使用单引号
(`'`{.literal}) 或者双引号（`"`{.literal}）括起来。
::: title
**Syntax**
:::
``` screen
%addon com_redhat_oscap
key = value
%end
```
::: title
**Keys**
:::
以下键可以被附加组件识别：
::: variablelist
[`content-type`{.literal}]{.term}
:   安全内容的类型。可能的值有
    `datastream`{.literal}、`archive`{.literal}、`rpm`{.literal} 和
    `scap-security-guide`{.literal}。
    如果 `content-type`{.literal} 是
    `scap-security-guide`{.literal}，则附加组件将使用
    [**[scap-security-guide]{.package}**]{.strong}
    软件包提供的内容，该内容存在于引导介质中。这意味着，除了
    `profile`{.literal} 外所有其他键都无效。
[`content-url`{.literal}]{.term}
:   安全内容的位置。必须通过 HTTP、HTTPS 或者 FTP
    访问该内容。必须有可用的网络连接方可访问远程位置中的内容定义。
[`datastream-id`{.literal}]{.term}
:   `content-url`{.literal} 值中引用的数据流的 ID。仅在
    `content-type`{.literal} 是 `datastream`{.literal} 时使用。
[`xccdf-id`{.literal}]{.term}
:   要使用的基准 ID。
[`content-path`{.literal}]{.term}
:   应使用到 datastream 或 XCCDF 文件的路径，在归档中使用相对路径。
[`配置集`{.literal}]{.term}
:   要应用的配置集 ID。使用 `default`{.literal} 应用 default 配置文件。
[`fingerprint`{.literal}]{.term}
:   由 `content-url`{.literal} 引用的内容的 MD5、SHA1 或 SHA2 的校验和。
[`tailoring-path`{.literal}]{.term}
:   应使用的定制文件的路径，在归档中作为相对路径指定。
:::
::: itemizedlist
**示例**
-   以下是 `%addon com_redhat_oscap`{.literal}
    部分的示例，它使用安装介质的
    [**[scap-security-guide]{.package}**]{.strong} 中的内容：
    ::: example
    []{#kickstart-commands-and-options-reference_installing-rhel-as-an-experienced-user.html#idm139681357544304}
    **例 B.1. 使用 SCAP 安全指南的 OpenSCAP 附加组件定义示例**
    ::: example-contents
    ``` screen
    %addon com_redhat_oscap
    content-type = scap-security-guide
    profile = xccdf_org.ssgproject.content_profile_pci-dss
    %end
    ```
    :::
    :::
-   以下是从 web 服务器加载自定义配置集的复杂示例：
    ::: example
    []{#kickstart-commands-and-options-reference_installing-rhel-as-an-experienced-user.html#idm139681364874544}
    **例 B.2. 使用 Datastream 的 OpenSCAP 附加组件定义示例**
    ::: example-contents
    ``` screen
    %addon com_redhat_oscap
    content-type = datastream
    content-url = http://www.example.com/scap/testing_ds.xml
    datastream-id = scap_example.com_datastream_testing
    xccdf-id = scap_example.com_cref_xccdf.xml
    profile =  xccdf_example.com_profile_my_profile
    fingerprint = 240f2f18222faa98856c3b4fc50c4195
    %end
    ```
    :::
    :::
:::
::: itemizedlist
**其他资源**
-   [安全强化](https://access.redhat.com/documentation/en-us/red_hat_enterprise_linux/9/html-single/security_hardening/index#deploying-baseline-compliant-rhel-systems-using-kickstart_deploying-systems-that-are-compliant-with-a-security-profile-immediately-after-an-installation){.link}
-   [OpenSCAP
    安装程序附加组件](https://www.open-scap.org/tools/oscap-anaconda-addon/){.link}
-   [OpenSCAP
    Portal](http://www.open-scap.org/security-policies/choosing-policy/){.link}
:::
:::
:::
::: section
::: titlepage
# []{#kickstart-commands-and-options-reference_installing-rhel-as-an-experienced-user.html#commands-used-in-anaconda_kickstart-commands-and-options-reference}Anaconda 中使用的命令 {.title}
:::
`pwpolicy`{.literal} 命令是 Anaconda UI 特定的命令，只能在 kickstart
文件的 `%anaconda`{.literal} 部分中使用。
::: section
::: titlepage
## []{#kickstart-commands-and-options-reference_installing-rhel-as-an-experienced-user.html#pwpolicy_commands-used-in-anaconda}pwpolicy（已弃用） {.title}
:::
`pwpolicy`{.literal} Kickstart
命令是可选的。在安装过程中使用这个命令强制使用自定义密码策略。策略要求您为
root、用户或 luks
用户帐户创建密码。密码长度和强度等因素决定了密码的有效性。
::: title
**Syntax**
:::
``` screen
pwpolicy name [--minlen=length] [--minquality=quality] [--strict|--nostrict] [--emptyok|--noempty] [--changesok|--nochanges]
```
::: itemizedlist
**必填选项**
-   [*name*]{.emphasis} - 使用 `root`{.literal}、`user`{.literal} 或
    `luks`{.literal} 替换，以分别强制执行与 `root`{.literal}
    密码、用户密码或 LUKS 密码短语相关的策略。
:::
::: itemizedlist
**可选选项**
-   `--minlen=`{.literal} -
    以字符为单位设置允许密码长度的最小值。默认值为 `6`{.literal}。
-   `--minquality=`{.literal} - 设置 `libpwquality`{.literal}
    库定义的最小允许密码质量。默认值为：`1`{.literal}。
-   `--strict`{.literal} - 启用严格的密码强制.不接受没有满足
    `--minquality=`{.literal} 和 `--minlen=`{.literal}
    中指定的要求的密码。默认禁用这个选项。
-   `--notstrict`{.literal} - 在 GUI 中点 [**[Done]{.GUI}**]{.strong}
    两次后，可以接受[*不符合*]{.emphasis} `--minquality=`{.literal} 和
    `-minlen=`{.literal}
    选项中指定的最低质量要求的密码。文本模式界面使用类似的机制。
-   `--emptyok`{.literal} - 允许使用空密码。对于用户密码，默认启用。
-   `--notempty`{.literal} - 不允许使用空密码。对于 root 密码和 LUKS
    密码，默认启用。
-   `--changesok`{.literal} - 允许在用户界面中更改密码，即使 Kickstart
    文件已指定了密码。默认禁用此选项。
-   `--nochanges`{.literal} - 不允许更改在 Kickstart
    文件中已设置的密码。默认启用此选项。
:::
::: itemizedlist
**备注**
-   `pwpolicy`{.literal} 命令是 Anaconda UI 特定的命令，只能在 kickstart
    文件的 `%anaconda`{.literal} 部分中使用。
-   `libpwquality`{.literal}
    程序库用于检查最低密码要求（长度和服务）。您可以使用
    [**[libpwquality]{.package}**]{.strong} 软件包提供的
    `pwscore`{.literal} 和 `pwmake`{.literal}
    命令检查密码质量得分，或使用给定分数创建随机密码。有关这些命令的详情，请查看
    `pwscore(1)`{.literal} 和`pwmake(1)`{.literal} man page。
:::
:::
:::
::: section
::: titlepage
# []{#kickstart-commands-and-options-reference_installing-rhel-as-an-experienced-user.html#kickstart-commands-for-system-recovery_kickstart-commands-and-options-reference}kickstart 命令进行系统恢复 {.title}
:::
这部分中的 Kickstart 命令修复安装了的系统。
::: section
::: titlepage
## []{#kickstart-commands-and-options-reference_installing-rhel-as-an-experienced-user.html#rescue_kickstart-commands-for-system-recovery}rescue {.title}
:::
`rescue`{.literal} Kickstart 命令是可选的。它提供有 root 特权的 shell
环境，以及一组系统管理工具修复安装以及排除问题，例如：
::: itemizedlist
-   以只读方式挂载文件系统
-   阻塞列表或添加驱动程序磁盘中提供的驱动程序
-   安装或升级系统软件包
-   管理分区
:::
::: {.note style="margin-left: 0.5in; margin-right: 0.5in;"}
### 注意 {.title}
Kickstart 的救援模式与系统的救援模式和紧急模式不同，后者是 systemd
和服务管理器的一部分。
:::
`rescue`{.literal} 命令不自行修改系统。它只能通过在 /mnt/sysimage
下挂载系统的读写模式来设置救援环境。您可以选择不挂载系统，或者将其挂载为只读模式。
::: title
**语法**
:::
``` screen
rescue [--nomount|--romount]
```
::: itemizedlist
**选项**
-   `--nomount`{.literal} 或 `--romount`{.literal} -
    控制如何在救援环境中挂载安装的系统。默认情况下，安装程序会找到您的系统并以读写模式挂载它，同时告知它在什么位置进行挂载。您可以选择不挂载任何内容（\--
    `nomount`{.literal} 选项）或以只读模式挂载（\-- `romount`{.literal}
    选项）。只能使用这两个选项中的一个。
:::
::: title
**备注**
:::
要运行救援模式，请制作 Kickstart 文件的副本，并在该文件中包含
`rescue`{.literal} 命令。
使用 `rescue`{.literal} 命令可使安装程序执行以下步骤：
::: orderedlist
1.  运行 `%pre`{.literal} 脚本。
2.  为救援模式设置环境。
    下面的 kickstart 命令生效：
    ::: orderedlist
    1.  updates
    2.  sshpw
    3.  logging
    4.  lang
    5.  network
    :::
3.  设置高级存储环境。
    下面的 kickstart 命令生效：
    ::: orderedlist
    1.  fcoe
    2.  iscsi
    3.  iscsiname
    4.  nvdimm
    5.  zfcp
    :::
4.  挂载系统
    ``` screen
    rescue [--nomount|--romount]
    ```
5.  运行 %post 脚本
    只有在安装的系统被挂载为读写模式时才运行这一步。
6.  启动 shell
7.  重启系统
:::
:::
:::
:::