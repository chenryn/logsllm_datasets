人
一个指向完全类型的指针。
一个指向完全类型的指针。由于struct s在前面有完整的定义，所
一个结构体也可以递归定义：
，这时struct t有了完整的定义，
下图示意了由几个structs结构体组成的链表，
，第二个声明写在.c文件里，
当处理到第四行};时,
，碰到第二个声明时str就组合成完全类型
一个无穷递归的定义。
，pt是-
一个完全类型，
一个指向不完全类型的指针,
 但不能递归地定义变量成
就会报错。读者可能
 就组合成一个完全类
 这样如果要改数组
，当看到struct
全
---
## Page 418
3、T2和＊号括在一起，应该也是个指针，指向T3类型:
2、r1应该是一个函数类型，参数是void＊，返回值是r2类型:
1、fp和*号括在一起，说明fp是一个指针，指向r1类型:
我们分解一下这个复杂声明：
在分析复杂声明时，要借助typede把复杂声明分解成几种基本形式:
是sighandler_t参数。如果把这两行合成一行写，就是：
几个复杂的声明。
可以想像得到，
点的next指针域为NULL，在图中用O表示。
head指针是链表的头指针，
·T1f(T2，T3...);，f是一个函数，参数类型是T2、T3等等，返回值类型是T1。
·a[l；，a是由r类型的元素组成的数组，但有一个例外，如果a是函数的形参，则相当于
*a;
typedef
typedef
typedef 
int （*(*fp)(void *))[l0];
void (*signal(int signum, void (*handler)(int)))(int);
，如果把指针和数组、函数、结构体层层组合起来可以构成非常复杂的类型，下面看
T2 Tl(void *);
3
int T3[10];
一个函数，
datanext
*T2
，指向第一个节点，每个节点的next指针域指向下一个节点，最后一个节
它带两个参数，
data next
sighandler_t handler);
一个int参数，
 它所指向的函数带一个参数，
datanext
一个sighandler_t参数，返回值也
datahiext
........
返回值
418
---
## Page 419
显然，T3是一个int数组，由10个元素组成。分解完毕。
8.函数类型和函数指针类型
页
全国嵌入式人才培训基地
起始页
一级
第24章函数接口
---
## Page 420
函数接口总结成几类常见的模式，对于每种模式，
我们在第6节“折半查找"讲过，
6.可变参数
5.回调函数
4.返回值是指针的情况
3.两层指针的参数
2.传入参数与传出参数
9.不完全类型和复杂声明
档怎么写
正学明白了
像图 23.1“指针的基本概念"那样画图分析，
函数接口一旦和指针结合起来就变得异常灵活,
这个契约呢？首先靠函数接口来描述，
前
1.本章的预备知识
目录
第 24 章 函数接口请点评
二
怎么写，Man Page为我们做了很好的榜样。
函数接口并不能表达函数的全部语义,
参数和返回值的类型定得准确，
调用者要为实现者提供某些条件，
1.2. malloc与free
1.1. strcpy与strncpy
页
写。
 本章不用学也能自己领悟出来，
 函数的调用者和函数的实现者之间订立了一个契约，在调用函数之
 至于这个函数怎么用，
即函数名,
，在函数返回时，
全国嵌入式人才培训基地
全国嵌入式人才培训基地
部分ⅡI. C语言本质
第24章函数接口
，指针的任何用法都能分析清楚，
这时文档就起了重要的补充作用，函数的文档该写什
，之所以写这一章是为了照顾悟性不高的读者。本章把
起始页
上一级
有五花八门的用法，
参数，
一方面讲函数接口怎么写，另一方面讲函数的文
，实现者要对调用者尽到某些义务。如何描述
返回值，
 调用者单看函数接口就能猜出八九分
只要函数和参数的名字起得合
但是万变不离其宗，
所以
1.本章的预备知识
如果上一章你真
只要
下一页
---
## Page 421
这个Man Page描述了两个函数，
不会像[K&R]那样把库函数总结成一个附录附在书后面。现在我们来分析strcpy(3）。
总之，
去查书、查资料，也不愿意看Man Page。据我分析原因有三：
我们手边，
从现在开始我们要用到很多库函数，
计的，Man Page是怎么写的。其它常用的C标准库函数将在下一章介绍。
这一节介绍本章的范例代码要用的几个C标准库函数。我们先体会一下这几个函数的接口是怎么设
1.本章的预备知识 请点评
3．Man Page通常没有例子。描述一个函数怎么用，
2．Man Page的语言不够友好。Man Page不像本书这样由浅入深地讲解,
上一页
，Man Page是一定要看的，
子教你怎么用了。
的用法无非是本章所总结的几种模式，只要把本章学透了，你就不需要每个函数都得有个例
看习惯了就好了，
开发工作，
一个例子，帮助读者把握Man Page的语言特点。
英文不好。
SYNOPSIS
NAME
STRCPY(3)
图24.1. strcpy(3)
想查什么只要敲一
#include 
strcpy，strncpy - copy a string
char *strncpy(char *dest, const char *src，size_t n);
char *strcpy(char *dest，const char *src);
因为你没有进一步学习的能力。
那还是先学好了英文再学编程吧，
 每个Man Page都不长,
一个命令就行，
一开始看不懂硬着头皮也要看，
Linux Programmer's Manual
全国嵌入式人才培训基地
第 24章函数接口
1.本章的预备知识
然而很多初学者就是不喜欢看Man Page，宁可满世界
多看几遍自然可以抓住重点,
否则即使你把这本书都学透了也一样无法胜任
一靠接口，
，为了鼓励读者看Man Page，本书
二靠文档，
而不是靠例子。函数
理清头绪。本节分析
而是平铺直叙，
STRCPY(3)
421
不过
---
## Page 422
度，它会一直拷贝到o·为止，所以dest所指向的内存空间要足够大，否则有可能写越界，例如：
以\o`结尾的字符串。但另外-
至于strncpy的参数n是干什么用的，单从函数接口猜不出来，就需要看下面的文档。
这样用的：
改写的，
就能很快找到你关心的部分。
有时候并不想从头到尾阅读整个Man Page，
的，
了这两个函数的原型,
，说明src所指向的内存空间在函数中只能读不能改写，
DESCRIPTION
图24.2. strcpy(3)
，显然改写的目的是当函数返回后调用者可以读取改写的结果。因此可以猜到strcpy函数是
A simple implementation of strncpy(） might be:
dest with null bytes.
If the length of src is less than n，strncpy() pads the
h
The strncpy()
large enough to receive the copy.
The
are
src,
buf
strncpy(char *dest，const char *src，size_t n){
char*
copied
strcpy(）
the string placed in dest will not be null terminated.
src表示Source,
以及要用这些函数需要包含哪些头文件。
return dest;
for（i=θ;i
buf[n-1]='\0';
programmer
programmer knows (i.e.,
produces
is
and strncpy() functions return a pointer to the destina-
the project，and information about reporting
，所以要避免。
then
was
an unterminated
stupid
2007-06-15
，这两个函数的返回值都是dest指针。可是为什么要
一个指针类型的表达式使用，
includes code to test!)
，再返回一遍dest指针并没有提供任何有用的
string
overflowing
一下n是否大于0，如果n不大
比如printf("%s\n",
fixed
that the size
和我们上面给出的
(thatis
STRCPY(3)
length
prone
424
---
## Page 425
如：
灵活，C89要求定义的数组是固定长度的，而程序往往在运行时才知道要动态分配多大的内存，例
程序中需要动态分配一块内存时怎么办呢？可以像上一节那样定义一个缓冲区数组。
1.2.malloc与free 请点评
各项参数和返回值的含义和strncpy类似。完成之后，为自己实现的函数写一个Man Page。
实现该功能的函数接口要求符合下述规范：
压缩了空白之后就是：
符都压缩为一个空格。这里所说的空白包括空格、"t、\n、"Vr。例如原来的字符串是：
习题请点评
str所指向的字符串有可能超过10个字符而导致写越界，
错误，例如：
不安全，
考[SmashStack]
严重。至于怎样巧妙设计和攻陷一个有缓冲区溢出Bug的程序，有兴趣的读者可以参
执行任何命令，
常称为缓冲区（Buffer）
函数返回时跳转到非法地址,
界可能当时不出错,
7
自己实现一个strcpy函数，尽可能简洁，按照本书的编码风格你能用三行代码写出函数体吗？
事先设好的地址,
段错误那还不算严重，
char *shrink_space(char *dest, const char *src, size_t n);
 This Content hoho is ok ok? file system uttered words ok ok ? end.
This Content hoho
，如果在调用strcpy之前不仔细检查src字符串的长度就有可能写越界，这是一个很常见的
end.
uttered 
void foo(char *str)
.........
-..-.-
，可想而知，如果一
words
 file system
ok?
:(aas 'nq)Adoaas
char buf[10];
 执行事先设好的指令，如果设计得巧妙甚至可以启动一个Shell，
，而在函数返回时出现段错误，原因是写越界覆盖了保存在栈帧上的返回地址，
更严重的是缓冲区溢出Bug经常被恶意用户利用，
：缓冲区写越界的错误称为缓冲区溢出（Buffer Overflow）。如果只是出
ok ok
 因而出错。像buf这种由调用者分配并传给函数读或写的一段内存通
一个用root权限执行的程序存在这样的Bug，被攻陷了，后果将很
 要求做一个新字符串，把其中所有的一个或多个连续的空白字
is ok
，在第4节“段错误"我们看到过，这种写越
.........
使函数返回时跳转到-
，这种方法不够
，然后随心所欲
---
## Page 426
址。举例如下：