In line with this, we will assume that every set of rules defining
a distance-bounding protocol is consistent with the usage of Send,
Recv and Action facts as follows: (1) every message m sent by the
prover P is modelled by a rule with a fact Send(P, m) within the
conclusions, (2) every message m received by the verifier V during
the fast phase is modelled by a rule with a fact Recv(V , m) within
the premises, and (3) every message m sent by the verifier V during
the fast phase is modelled by a rule with a fact Send(V , m) within
the actions.
5.2 Secure Distance-Bounding
In [44], Mauw et al. defined the causality-based property secure
distance-bounding, to verify distance-bounding protocols. The prop-
erty resembles a form of aliveness [25, 43] as the prover must per-
form some action during the fast phase of the protocol. The authors
demonstrated that a verifier’s guarantee that the prover is alive
Figure 6: The DBToy protocol.
5 DISTANCE BOUNDING AND TERRORIST
FRAUD
In this section we use post-collusion security to develop a symbolic
formulation of (resistance to) terrorist fraud in distance-bounding
protocols. First, in Section 5.1, we describe how to model such
protocols by using the multiset rewriting model from Section 3.
We pay particular attention to restrictions to the Dolev-Yao model
that are necessary to model physical limitations of the communi-
cation channel. Later on, in Section 5.2, we formulate the secure
distance-bounding property proposed in [44] to verify this type of
protocols. Finally, in Section 5.3, we provide a symbolic formulation
of resistance to terrorist fraud.
5.1 Modelling Distance-Bounding Protocols
Distance-bounding protocols are security protocols that aim to
guarantee physical proximity between the participants. These pro-
tocols determine proximity by checking that the round trip times
(RTT) of a number of challenge/response cycles are below a certain
threshold. The phase of the protocol where the RTTs are measured
is called the fast phase. See next a running example.
Example 2 (The DBToy Protocol). Figure 6 depicts the DBToy
protocol, which works as follows. The prover P encrypts a fresh name
m with the shared key between P and the verifier V . Then P sends the
encrypted message to V . Hence, the fast phase starts with V sending the
fresh name n as the challenge, to which P must reply with f (n, m, P).
If P replies correctly and on time, then V declares P as being close.
The specification rules of DBToy are shown in Figure 7.
In the DBToy rules we have introduced the linear fact sym-
bols Net ∈ Γ1, Send, Recv ∈ Γ2, Action ∈ Γ1 and DBSec ∈ Γ4.
A fact Net(m) denotes that the message m is on the network. A
fact Send(X, m) denotes the sending of m by the agent X, and
a fact Recv(X, m) denotes the reception by X of the message m.
A fact Action(X) denotes that an action was taken by X. A fact
DBSec(V , P, ch, rp) denotes V ’s claim that P is close during the fast
phase, delimited by Send(V , ch) and Recv(V , rp). The remaining
newly introduced facts denote the agents’ information on the sys-
tem state. Recall that the reserved fact symbols Compromise and
sharedkVsharedkPfreshnfreshmsenc(m,k)nRTTf(n,m,P)Piscloseduring the fast phase is equivalent to the verifier’s guarantee that
the fast phase RTT provides an upper bound to their distance to
the prover. Next we formulate Mauw et al.’s property:
dbsec(t, l) ⇐⇒
∀V , P, ch, rp. DBSec(V , P, ch, rp) ∈ tl =⇒
(∃i, j, k. i < j < k ∧ Send(V , ch) ∈ ti ∧
(∃b, b
.
′
Action(P) ∈ tj ∧ Recv(V , rp) ∈ tk) ∨
′
, i, j, k, P
i < j < k ∧ Send(V , ch) ∈ ti ∧
′) ∈ tj ∧ Recv(V , rp) ∈ tk ∧
Action(P
Compromise(P) ∈ tb ∧ Compromise(P
(∃i. Compromise(V) ∈ ti).
′) ∈ tb′) ∨
Secure distance-bounding holds for a trace t if, whenever a claim
DBSec(V , P, ch, rp) occurs, it is the case that there is an action of P
(or a compromised prover P′ if P is compromised) during the fast
phase. Tamarin provides proof of DBToy |= dbsec.
Observe that, unlike the agreement property from Section 3,
dbsec does not exclude traces in which one of the agents involved
in the security claim is compromised. Instead, should the prover be
compromised, then the verification fails only if no compromised
prover is active in the fast phase.
5.3 Formalising (Resistance To) Terrorist Fraud
We informally define terrorist fraud as follows.
Definition 5 (Informal). Terrorist fraud (TF) is an attack in
which a remote and non-compromised prover P colludes with a close
and compromised prover A to make the verifier believe that P is close.
Conditionally, A (or any other compromised prover) must not be able
to attack the protocol again without further collusion.
The dbsec property allows us to detect attacks in which the
proving party is compromised, such as distance fraud [28] and
distance hijacking [26] (details on these attacks can be found in
Appendix A). However, dbsec is too fine-grained for modelling
terrorist fraud, as we require the distant and colluding prover to be
non-compromised (in the case of a compromised prover, collusion
actions do little to aid the adversary). In line with this reasoning,
we define below a property weaker than dbsec, that is conditional
on non-compromise of both prover and verifier:
dbsec_hnst(t, l) ⇐⇒
∀V , P, ch, rp. DBSec(V , P, ch, rp) ∈ tl =⇒
(∃i, j, k. i < j < k ∧ Send(V , ch) ∈ ti ∧
Action(P) ∈ tj ∧ Recv(V , rp) ∈ tk) ∨
(∃i. Compromise(V) ∈ ti ∨ Compromise(P) ∈ ti).
Intuitively, a trace satisfies dbsec_hnst if, whenever a verifier V
believes a prover P is close, P took some action between the verifier
sending the challenge ch and receiving reponse rp.
We formally define next resistance to terrorist fraud, a property
formulated by means of post-collusion security with respect to
dbsec_hnst.
Definition 6 (Resistance to Terrorist Fraud). A protocol
Proto ⊆ R \ C is resistant to terrorist fraud if every valid extension
Proto′ of Proto that breaks dbsec_hnst is not post-collusion secure
with respect to dbsec_hnst, i.e.
Proto′ ̸|= dbsec_hnst =⇒ Proto′ ̸|=⋆ dbsec_hnst.
(9)
Observe that resistance to terrorist fraud is a property on proto-
cols rather than on traces. Further, terrorist fraud uses the negation
of post-collusion security. This is because in a terrorist fraud attack,
the colluding prover wishes to allow their partner to complete the
protocol only whilst they are cooperating.
5.4 On the Completeness of our Approach
Definition 6 is quantified over all (valid) extensions of a collection
of protocol rules. As such, it can present obstacles in providing
proofs of security, as the number of extensions is exponential in the
complexity of the protocol. Indeed, attempting to fully automate
this process is an open problem which is also considered by other
approaches [9, 12].
To deal with this completeness issue for the problem of prov-
ing terrorist fraud resistance, we introduce the notion of a least-
disclosing message. Such message is a knowledge-minimal message
that the adversary needs, in order to produce the fast phase response
upon reception of the challenge. For instance, if ch is the verifier’s
fast phase challenge, and the prover’s fast phase response can be
written as f (ch, z1, . . . , zn) for some z1, . . . , zn ∈ TΣ(V) such that
λch.f is either injective or constant, then a least-disclosing message
is ⟨z1, . . . , zn⟩. Such message can lead, in some cases, to the disclo-
sure (directly or not) of the long-term keys. To better illustrate the
least-disclosing notion, le us consider again the DBToy protocol.
Theorem 1. DBToy is resistant to terrorist fraud.
Proof. Let DBToy′ be a valid extension of DBToy such that
DBToy′ ̸|= dbsec_hnst. Thus, there exist t1 · · · tl ∈ Traces(DBToy′),
and n, m, V , P ∈ TΣ, and i, k ∈ {1, . . . , l} with i < k, such that:
Send(V , n) ∈ ti ∧ Recv(V , f (n, m, P)) ∈ tk ∧
DBSec(V , P, n, f (n, m, P)) ∈ tl ∧
(∄j ∈ {i + 1, . . . , k − 1}. Action(P) ∈ tj) ∧
(∄j ∈ {1, . . . , l}. Compromise(V) ∈ tj) ∧
(∄j ∈ {1, . . . , l}. Compromise(P) ∈ tj),
(10)
Hence, because of Equation 10 above and given the fact that
Recv(V , f (n, m, P)) can only occur due to the rule DBNet (see Fig-
ure 7), we derive that:
∃c, j ∈ {1, . . . , k − 1}, C.
(Send(C, f (n, m, P)) ∈ tj ∧ Compromise(C) ∈ tc).
(11)
Equation 11 implies that ∃w < k. K(m) ∈ tw . This means that
DBToy′ has a collusion rule in which m is given away. Notice that m
(or equivalently ⟨m, P⟩) is indeed a least-disclosing message because
of the following two reasons: m is needed by the adversary to break
dbsec_hnst, and m is atomic (i.e. it cannot be learned by pieces).
But, if the adversary knows m, then they can use a compromised
prover to run again the protocol with V on behalf of P, by using
the messages senc(m, k) and f (n2, m, P) in that order, where n2 is
V ’s (new) challenge. This reasoning can be formalized as follows.
Given that DBToy′ is valid (see Definition 2) we have that e ≥ l,
and tl +1, . . . , te exist such that:
t1 · · · tl · · · te ∈ Traces(DBToy′) ∧ complete(t1 · · · tl · · · te).
(12)
Now, l2 ≥ e, and te +1, . . . , tl2, and n2, and i2, k2 ∈ {e +1, . . . , l2−
1} exist such that:
Table 1: Tamarin analysis results. We highlighted in bold
the protocols that satisfy dbsec and resist terrorist fraud.
The protocols from the block “Lookup-based” have identi-
cal specification. Legend: ✓: verified, ×: attack found, (n): no
symbolic, computer-verifiable (in)security proof reported
before, ((cid:44)c): differs from Chothia et al.’s results [20].
Satisfies Resists
TF
×(n)
×(n)
×
×
×
×(n)
×(n)
×((cid:44)c)
×(n)
×(n)
✓(n)
×
✓(n)
✓(n)
✓(n)
✓(n)
×(n)
×(n)
✓(n)
✓(n)
×
×
×
each variation. Such attack is not reported in [39], as the authors
only consider verbatim relay.
For each one of the protocols reported as not resistant to terror-
ist fraud, the valid extension used to invalidate Equation 9 is the
prover’s leakage of the least-disclosing message, whose notion was
discussed in 5.4. For each protocol Proto reported as resistant to
terrorist fraud, one of the following three cases occurred:
(1) Proto ̸|= dbsec_hnst and Proto ̸|=⋆ dbsec_hnst, thus Proto′ ̸|=⋆
dbsec_hnst for any valid extension Proto′ of Proto, because
Traces(Proto) ⊆ Traces(Proto′). The protocols of this type are
Protocol
Brands-Chaum [15]
- Signature id.
- Fiat-Shamir id.
CRCS [52]
- Non-revealing sign.
- Revealing sign.
Meadows et al. [46]
- f := ⟨NV , P ⊕ NP⟩
- f := NV ⊕ h(P, NP)
- f := ⟨NV , P, NP⟩
Lookup-based
- Tree [7]
- Poulidor [60]
- Hancke-Kuhn [34]
- Uniform [45]
Munilla-Peinado [48]
Kim-Avoine [36]
Reid et al. [53]
MAD (one way) [19]
DBPK [17]
Swiss Knife [37]
UWB [39]
- Asymmetric
- keyed-MAC
WSBC+DB [50]
Hitomi [51]
TREAD [4]
- Asymmetric
- Symmetric
ISO/IEC 14443
- PaySafe [21]
- MIFARE Plus [58]
- PayPass [31]
Satisfies
dbsec_hnst
✓
✓
✓
✓
✓
✓(n)
✓(n)
dbsec
×
×
✓
×
×((cid:44)c)
✓(n)
✓(n)
✓
✓
✓
✓