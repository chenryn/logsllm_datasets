### Revisions and Inclusions
To ensure the accuracy of the study, author 1 re-examined the initially excluded studies to identify any that might have been incorrectly omitted. Any studies found to have been mistakenly excluded were then included in the review.

### Second Screening
Author 2 independently screened an additional 10% of the studies, which confirmed the consistency of the initial screening. However, five studies that were accepted by author 2 at the abstract level were rejected by author 1 at the full-text level. These studies were also initially accepted by author 1 at the abstract level, indicating a need for further review.

### Validity Control II
To validate the categorization of the results, a second control was conducted. From the 144 accepted papers, 28 were randomly selected for independent categorization by author 2. This process revealed six discrepancies in the ranking of the studies. The primary reason for these discrepancies was the use of different definitions for the categories. Specifically, author 1 categorized studies on commercial systems in an academic context as "large academic," while author 2 categorized them as "industrial." After discussion, the authors agreed on a common definition and re-screened the studies accordingly. Two other discrepancies were related to the phase focus of the studies, with author 1 classifying them under "design" and author 2 under "analysis." Upon clarification, it was determined that the initial classification by author 1 was correct. In three cases, author 2 ranked the studies in multiple categories, but upon re-examination, the category chosen by author 1 was confirmed as the main contribution.

### Threats to Validity
#### Use of Alternative Terminology
One significant threat is the possibility that some studies may use terms other than "robustness." However, since robustness is a commonly used term, the likelihood of missing significant contributions due to alternative terminology is minimal. Expanding the search with additional terms would not be feasible given the already broad scope of the study.

#### Exclusion of Related Methods
Another limitation is the exclusion of methods primarily used in security and defensive programming, which can also contribute to robustness. This is a common issue in systematic reviews of broad concepts like robustness. To maintain a manageable scope, we decided to exclude papers not directly related to robustness. Future work could consider techniques that indirectly or partially affect software robustness.

#### Selection Bias
The potential for selection bias was addressed by having author 2 repeat the selection process in two phases. The results indicated a satisfactory level of validity in the screening process.

#### Coverage of Relevant Studies
A final validity threat is the possibility of missing relevant studies in other fora. However, the databases searched cover the field of software engineering well, and no new relevant papers were found in the top 10% of results from the ACM digital library. This suggests that the coverage of the most important results is comprehensive.

### Results and Analysis
#### Overview
This section presents the results of the systematic review, structured according to the research questions outlined in Section 3.1. Subsection 4.1 provides a detailed overview of the main studies, sorted by focus area. Subsection 4.2 offers statistics and an overview of the system focus of the included studies. Subsection 4.3 discusses the quality of the research, contributions, and evaluations in the selected studies.

#### Phase Focus of Studies
We present an overview of the literature on software robustness based on the phase of software development. The phases include analysis, requirements, design & implementation, verification & validation, evaluation, and general. The first four categories are well-established phases, while more theoretical papers are categorized under evaluation. The general category includes studies with clear contributions that do not focus on a specific phase.

**Table 3: Focus of the Studies**

| Focus Area | Number of Papers |
|------------|------------------|
| Verification & Validation | 68 |
| Design & Implementation | 51 |
| Analysis | 11 |
| Evaluation | 8 |
| General | 3 |
| Requirements | 3 |

An interesting observation is the lack of studies in requirements engineering and maintenance. The main areas of requirements, analysis, design & implementation, and verification & validation are discussed in more detail in separate sections. The papers in the general and evaluation categories are discussed in Section 4.1.5.

#### Requirements
Our findings indicate a limited number of published studies on software robustness requirements. No major studies providing methods or tools for creating robustness requirements were found.

- **Heimdahl and Czerny [66]**: Discuss the importance of completeness in requirements engineering for achieving reliability and robustness, using a large avionics system as a case study.
- **Jaffe et al. [77]**: Suggest that completeness of requirements is crucial for robustness and propose a model evaluated in an academic setting.
- **Nebut et al. [123]**: Introduce a technique for expressing mutual dependencies between use cases to improve robustness by considering all possible sequences.

There is a gap in knowledge regarding systematic ways to ensure the completeness of robustness requirements. Our study [146] proposes a framework called ROAST, which categorizes robustness issues into patterns for use in requirements elicitation and suggests different abstraction levels for specifying robustness requirements.

#### Analysis
Studies in this category focus on predicting and preventing robustness issues early in the development process.

- **Calori et al. [28]**: Propose a five-step framework for robustness analysis of web-based systems, including ranking failure scenarios, capturing system behavior, examining potential failures, creating a failure state model, and evaluating nodes.
- **[6]**: Present an abstract interpretation of the LUSTRE language to study error propagation and provide a method for checking robustness.
- **Kulkarni and Tripathi [98]**: Study robustness in context-aware software and present a forward recovery model for handling robustness issues.
- **Laranjeiro et al. [101]**: Assess the effectiveness of text classification algorithms for identifying robustness issues in web service responses.
- **Cheng-Ying and Yan-Sheng [31]**: Claim that organizing exceptions into hierarchies can improve robustness and present a model for exception analysis.
- **[27]**: Introduce RATF, a method for combining robustness analysis and technology forecasting.
- **Groot [63]**: Propose degradation studies for analyzing how system output degrades with degrading inputs.

#### Design & Architecture
Design and implementation, with 51 included studies, is the largest focus group. One of the most discussed areas is wrappers (encapsulation) for masking and preventing the propagation of robustness issues. Other contributions include:

- **Acharya et al. [3, 4]**: Propose a framework for automatically generating interface properties from high-level robustness rules.
- **Huhns et al. [70, 110, 69, 134, 71, 72]**: Argue that redundancy increases robustness and describe a methodology based on active, cooperative, and persistent software components.
- **Papers [41, 42]**: Present Bristlecone, a programming language for robust software systems.