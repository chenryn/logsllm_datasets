title:Compact and Malicious Private Set Intersection for Small Sets
author:Mike Rosulek and
Ni Trieu
Compact and Malicious Private Set Intersection for Small Sets
Mike Rosulek
Oregon State University
PI:EMAIL
Ni Trieu
Arizona State University
PI:EMAIL
ABSTRACT
We describe a protocol for two-party private set intersection (PSI)
based on Diffie-Hellman key agreement. The protocol is proven
secure against malicious parties, in the ideal permutation + random
oracle model.
For small sets (500 items or fewer), our protocol requires the
least time and communication of any known PSI protocol, even
ones that are only semi-honest secure and ones that are not based
on Diffie-Hellman. It is one of the few significant improvements to
the 20-year old classical Diffie-Hellman PSI protocol of Huberman,
Franklin, and Hogg (ACM Elec. Commerce 1999).
Our protocol is actually a generic transformation that constructs
PSI from a class of key agreement protocols. This transformation is
inspired by a technique of Cho, Dachman-Soled, and Jarecki (CT-
RSA 2016), which we streamline and optimize in several important
ways to achieve our superior efficiency.
CCS CONCEPTS
‚Ä¢ Theory of computation ‚Üí Cryptographic protocols;
KEYWORDS
private set intersection
ACM Reference Format:
Mike Rosulek and Ni Trieu. 2021. Compact and Malicious Private Set In-
tersection for Small Sets. In Proceedings of the 2021 ACM SIGSAC Confer-
ence on Computer and Communications Security (CCS ‚Äô21), November 15‚Äì19,
2021, Virtual Event, Republic of Korea. ACM, New York, NY, USA, 16 pages.
https://doi.org/10.1145/3460120.3484778
1 INTRODUCTION
In a private set intersection (PSI) protocol, Alice provides an input
set ùëã of items, Bob provides an input set ùëå, then one or both of
them learn ùëã ‚à©ùëå, without learning anything about their opponent‚Äôs
items not in the intersection. Many of the most compelling real-
world applications of secure multiparty computation are direct
applications of PSI, or close variants of PSI such as private contact
discovery [19, 40].
PSI state of the art. Recently, PSI protocols have been the focus
of significant concrete performance improvements (see [10, 11, 20,
28, 36, 42‚Äì47]). There are several protocol paradigms for PSI, but in
Permission to make digital or hard copies of all or part of this work for personal or
classroom use is granted without fee provided that copies are not made or distributed
for profit or commercial advantage and that copies bear this notice and the full citation
on the first page. Copyrights for components of this work owned by others than the
author(s) must be honored. Abstracting with credit is permitted. To copy otherwise, or
republish, to post on servers or to redistribute to lists, requires prior specific permission
and/or a fee. Request permissions from permissions@acm.org.
CCS ‚Äô21, November 15‚Äì19, 2021, Virtual Event, Republic of Korea
¬© 2021 Copyright held by the owner/author(s). Publication rights licensed to ACM.
ACM ISBN 978-1-4503-8454-4/21/11...$15.00
https://doi.org/10.1145/3460120.3484778
this work we focus on the two most practical approaches: Diffie-
Hellman and OT-extension. Other protocol paradigms (FHE, RSA,
generic MPC) are many orders of magnitude slower.
Diffie-Hellman protocols. The first and arguably simplest PSI pro-
tocol is due to Huberman, Franklin, and Hogg [29], but with roots
as far back as Meadows [39]. It is a semi-honest protocol that re-
quires exponentiations in a Diffie-Hellman group proportional to
the number of items in the sets. Because this protocol follows so
elegantly from Diffie-Hellman key agreement, there is a rather lim-
ited design space of variants for semi-honest security (one variant
is implicit in [34]). The DH-PSI protocol has been strengthened
for malicious security in several works. The most efficient to date
is due to De Cristofaro, Kim, and Tsudik [16]. Another efficient,
malicious variant is due to Jarecki & Liu [34], although it achieves a
functionality that slightly relaxes the input independence security
guarantee.
OT-extension protocols. The other category of PSI protocols is
based on OT extension. With OT extension [4, 32], parties can
generate many instances of oblivious transfer with only a small
constant number of public-key operations. By basing PSI on many
OTs, the number of public-key operations (exponentiations) in the
resulting PSI protocol scales only with the security parameter, and
not with the size of the input sets. PSI protocols in this category
include [11, 36, 42‚Äì47].
As a general rule, OT-based protocols are (significantly) faster but
require more communication than Diffie-Hellman-based protocols.
However, recent work of Pinkas et al. [42] presented an OT-based
protocol with slightly less communication (and running time) than
Diffie-Hellman-based PSI.
Why Care About Diffie-Hellman PSI?. Since DH-based PSI is much
slower (with exponentiations linear in the number of items) than
OT-based PSI, what is the value in studying it? We suggest several
reasons:
‚Ä¢ In some scenarios, communication cost is overwhelmingly
more important than computation cost. For a concrete example,
Ion et al. [30, 31] report on their real-world deployment of a
PSI-like functionality within Google. They chose to deploy Diffie-
Hellman PSI, and justified their choice as follows:
‚ÄúSomewhat surprisingly, for the offline ‚Äòbatch computing‚Äô scenarios
we consider, communication costs are far more important
than computation. This is especially the case for a secure protocol
involving multiple businesses, where servers cannot be co-located
(Wide area network solutions). Networks are inherently shared, and
it is much less expensive to add CPUs to a shared network than to
expand network capacity.‚Äù [from [30], bold formatting not in the
original]
Session 4C: Private Set Intersection CCS ‚Äô21, November 15‚Äì19, 2021, Virtual Event, Republic of Korea1166CCS ‚Äô21, November 15‚Äì19, 2021, Virtual Event, Republic of Korea
Mike Rosulek and Ni Trieu
Our improved DH-PSI protocol has the lowest communication
among DH-based and OT-based protocols.1
‚Ä¢ Consider the regime of PSI on small sets. For example, the
PrivateDrop [27] system enhances Apple‚Äôs AirDrop feature by
performing a PSI of one user‚Äôs entire address book (a few thou-
sand items) with another user‚Äôs own personal identifiers (e.g.,
phone numbers and email addresses; perhaps 10 items), in order
to determine whether one user appears in the other‚Äôs address
book. In another example, two parties may wish to use PSI of
their available calendar times to schedule a meeting (‚àº360 half-
hour slots during business hours in a single month). DH-based
PSI protocols are the cheapest for these input sizes (equal-size
sets of a few hundred items, or sets of highly unbalanced size
where the larger set is a few thousand items); our improvements
to DH-PSI give even further improvements.
OT-based PSI protocols use OT extension, whose ‚Äúbase OTs‚Äù each
require public-key operations (exponentiations). Concretely, us-
ing the most efficient 1-out-of-2 OT protocol to date [38], 128
base OTs cost 3 √ó 128 = 384 group elements of communica-
tion and 5 √ó 128 = 640 exponentiations. This is already more
expensive than our improved DH-PSI protocol on sets of size
200, meaning that our protocol is necessarily cheaper than
any OT-extension-based protocol for sets of this size. In fact
the breakeven point, where OT-based protocols overtake ours,
is between 500 and 1000 items on a fast network (10Gbps) and
beyond 1000 items for a slow network (50Mbps).
‚Ä¢ For OT-based PSI protocols, the performance gap between semi-
honest and malicious is quite narrow due to recent improvements
in malicious PSI by [43]. The case for DH-based PSI is much dif-
ferent, where the most efficient malicious PSI is 5√ó slower and
requires 2.5√ó more communication. Our new approach essen-
tially closes the performance gap between semi-honest and
malicious, for DH-based PSI.
‚Ä¢ Finally, the semi-honest DH-PSI protocol of [29] is a truly classic
protocol that has not been improved upon in over 20 years. Our
new semi-honest protocol variant is the first to improve the com-
munication cost of DH-PSI, and the improvement is not minor
(over 40%). Even our malicious variant is more efficient than the
classic semi-honest protocol. The only comparable improvement
that we know of is due to Jarecki & Liu [34] who show how
to improve only the computational cost, by about 5-15% in our
experience.
1.1 Related Work
Since its introduction, several techniques have been proposed to
improve PSI‚Äôs performance. In this section, we give an overview
on existing efficient PSI protocols with more focus on the solutions
that have linear-communication complexity due to public-key tech-
niques. From here on, we assume that each set has ùëõ items, where
each item has ùúé-bit length. We let ùúÜ and ùúÖ denote the statistical and
computational security parameters, respectively.
1Some protocols based on FHE or RSA [3, 17] have even lower communication, but
are several orders of magnitude higher in computation cost.
The earliest PSI protocols were presented in the 1980s-1990s [29,
39] and proven secure against semi-honest adversaries, in the ran-
dom oracle model. These protocols remain the basis for comparison
among Diffie-Hellman-based protocols.
Freedman et al. [21] introduced PSI protocols secure against semi-
honest and malicious adversaries in the standard model. Their proto-
col was based on oblivious polynomial evaluation (OPE) which is im-
plemented using additively homomorphic encryption (AHE), such
as Paillier encryption scheme. Relying on the OPE technique, Kiss-
ner and Song [35] proposed protocols for different set operations,
such as set-intersection and set-union with quadratic computation
and communication complexity in the size of dataset. Dachman-
Soled et al. [14] present an improved construction of PSI proto-
col [35], which achieves communication of ùëÇ(ùëõùúÖ2 log2(ùëõ) + ùúÖùëõ)
group elements and ùëÇ(ùëõ2ùúÖ log(ùëõ) + ùëõùúÖ2 log2(ùëõ)) exponentiations
in the presence of malicious adversaries. They avoid generic zero-
knowledge due to the fact that Shamir‚Äôs secret sharing implies a
Reed-Solomon code. Later, Hazay and Nissim [26] extend OPE-
based PSI protocol, and combine the efficiency of perfectly hiding
commitment scheme with an OPRF evaluation protocol. The PSI
protocol in [26] incurs communication of ùëÇ(ùëõ(1 + log ùúé)) group
elements, and computation of ùëÇ(ùëõ(1+log log(ùëõ) +log(ùúé)) modular
exponentiations. Later, other variants of the problem were also
investigated such as size-hiding set intersection [9, 10], PSI cardi-
nality [15, 18], Private Intersection-Sum [30]. Here we highlight
public-key based PSI protocols with linear-complexity.
Semi-honest PSI protocols. The current state-of-the-art for semi-
honest PSI (independent of whether the protocols are based on
DH or not) are the protocols of [11, 36, 42], with the best protocol
depending on the relative cost of computation vs communication.
Our protocol involves encoding values into polynomials, and this
technique appears in some form in several PSI protocols. One such
protocol is due to Cho, Dachman-Soled, and Jarecki [13]. Our pro-
tocol builds heavily on theirs, and we discuss it in more detail later.
Another protocol of Pinkas et al. [42] is based on OT extension but
also encodes certain values in a polynomial. Until our work, this
protocol has had the lowest communication, excluding protocols
based on expensive FHE or RSA accumulators.
For RSA-based PSI approaches, to the best of our knowledge, the
work of Cristofaro and Tsudik [17], and its improvement [3] pro-
posed PSI protocols with lowest communication in this semi-honest
setting. These protocol are based on RSA accumulators. The latter
protocol achieves communication that is only marginally more than
the insecure protocol for intersection (in which parties simply send
hashes of their inputs). However, their computational requirements
(at least ùëõ log(ùëõ) RSA exponentiations) make the protocol prohibi-
tively expensive in practice due to the cost of RSA operations. We
give further comparisons to the RSA approach later in Section 5.2.
Malicious PSI protocols. Jarecki and Liu [33] proposed the first
linear-complexity PSI protocol based on OPRF in the presence of
malicious adversaries. They constructed an OPRF protocol for the
Dodis-Yampolskiy PRF ùëìùëò(ùë•) = ùëî1/(ùëò+ùë•), which requires ùëÇ(1) mod-
ular exponentiations and has constant-round communication. How-
ever, the secure computation protocol for their OPRF functionality
is in the Common Reference String (CRS) model, where the CRS
Session 4C: Private Set Intersection CCS ‚Äô21, November 15‚Äì19, 2021, Virtual Event, Republic of Korea1167Compact and Malicious Private Set Intersection for Small Sets
CCS ‚Äô21, November 15‚Äì19, 2021, Virtual Event, Republic of Korea
)
B
K
(
n
o
i
t
a
c
i
n
u
m
m
o
c
26
25
24
23
DKT10
PRTY20
CM20
PRTY19
(spot-low)
KKRT16
HFH99
this work
this work
27
28
‚ñ† semi-honest
‚ñ≤ malicious
29
running time (milliseconds)
Figure 1: Time vs communication for PSI protocols on ùëõ = 256
items; LAN setting. Both axes are in log-scale.
includes a safe RSA composite that either must be pre-generated
by a trusted party or implies high overhead when produced in the
secure two-party computation model. Another limitation of this
protocol is that its security proof runs an exhaustive search over
the input domain. This implies that the domain of the inputs should
be polynomial in the security parameter.
De Cristofaro et al. [16] presented a PSI protocol secure in the
malicious setting, which achieves the same asymptotic bound as
the previous work [33] without restricting the input domain size,
and does not require the CRS model. Their PSI protocol incurs
computation of 11ùëõ + 3 modular exponentiations in a cyclic group.
Jarecki and Liu [34] is a concurrent work with [16]. Their proto-
col [34] requires only 5ùëõ modular exponentiations for computing
the adaptive set intersection in the presence of malicious adver-
saries, but under a One-More Gap Diffie-Hellman (OMGDH) as-
sumption, which assumes that the One-More Diffie-Hellman prob-
lem is hard even when the DDH problem is easy.
Currently, the fastest malicious 2-party PSI protocols are due to
Pinkas et al. [43], and more recently Rindal & Schoppmann [48].
They are not based on Diffie-Hellman, but on efficient OT extension
or vector OLE [8]. The protocol of [48] is efficient when the set size
is sufficiently large (e.g. ùëõ > 220), but it has significant fixed costs
that make it inefficient for smaller sets.
In Table 1, we show the theoretical communication complex-
ity of our protocol compared with the semi-honest and malicious
protocols.
1.2 Summary of Our Results
We show how to transform any KA protocol (with pseudorandom
messages and a natural non-malleability property) into a PSI proto-
col.
CDJ starting point. Our starting point is an approach of Cho,
Dachman-Soled, and Jarecki (CDJ). Suppose Alice holds items ùë•1, . . . , ùë•ùëõ
and Bob has items ùë¶1, . . . , ùë¶ùëõ. Each party will run ùëõ instances of
a (malicious) secure string equality test protocol, one for each of
their inputs. Consider Alice‚Äôs equality-test-protocol instance corre-
sponding to item ùë•ùëñ. How will she send the protocol messages to
Bob so that (1) if Bob also has ùë•ùëñ, then he will associate it with this
instance (of the equality-test protocol) and not some other one, (2)
if Bob doesn‚Äôt have ùë•ùëñ, he won‚Äôt know whether Alice was running
an instance associated with ùë•ùëñ?
The main insight of CDJ ‚Äî inspired by a technique originally due
to Manulis, Pinkas, and Poettering [37] ‚Äî is to embed protocol
messages in a polynomial. For each message of the equality-
test protocol, Alice will interpolate a polynomial ùëÉ such that ùëÉ(ùë•ùëñ)
equals the next message for the ùëñth equality test instance. When
Bob receives the polynomial, he can evaluate it at each of his ùë¶ùëñ
inputs, respond to each one, and encode them into a polynomial
of his own. Importantly, if the equality-test protocol messages are
sufficiently random, then the polynomial ùëÉ hides the ùë•ùëñ values of
Alice.
Our improvements. We improve this CDJ paradigm in several
dimensions. (1) Instead of embedding messages from a malicious-
secure string-equality protocol into a polynomial, we can embed
messages from a plain key agreement (KA) protocol. (2) We
show that one party can avoid embedding ùëõ KA messages into a
polynomial, and instead send only one KA message. This reduces
the total communication significantly. (3) We simplify the protocol