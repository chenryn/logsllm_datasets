command causes the ordering to become valid, we declare this com-
mand relevant for the current group. On the contrary, if removing
the command does not change the outcome of the oracle, the com-
mand is removed; there does not seem to be a dependency. Example:
Using our running example and the invalid ordering a b c , Snow-
cap first removes command a . Since b c still causes the same
forwarding loop between r1 and r2, a remains removed. The same
applies to b , leaving us with the ordering c .
:Groups G, an ordering o of G and the spec. ϕ
Algorithm 2: Reduce
Input
1 i ← 0
2 while i + 1 < o .length do
3
4
5
6
7
8
oi ← o with group at position i removed
pos ← problematic command of Ei
if pos + 1 < oi .length then
i ← Reduce(G, oi up to position pos)
o′
if Recursion depth = 1 then o′
return o′
i
i ← o′
i .insert(0, i)
else if oi |= ϕ ∨ ϵϕ(oi) (cid:44) ϵϕ(o) then i ← i + 1
else Remove group at position i from o
9
10
11 return o
Algorithm 3: Extend
Input
1 for д ∈ R do
:Groups G, an ordering o of G, a set of remaining groups
R and the spec. ϕ
2
3
4
5
6
for j ∈ {0, 1, . . . , o .length − 1} do
oд ← o with group д inserted at position j
pos ← problematic command of oд
if oд ̸|= ϕ ∧ pos + 1 < oд .length then
if oд |= ϕ ∨ ϵϕ(oд) (cid:44) ϵϕ(o) then return oд
return Reduce(G, oд)
7
8 return ∅
Solving phase. After Snowcap reduces the sequence to just the
relevant commands, it tries to find a valid ordering of them. To this
end, it uses a DFS exploration as described in §4.1. It returns the
resulting ordering as a single group if it succeeds. Otherwise, it
continues with the extension phase. Example: Snowcap realizes that
there exists no valid ordering for c and continues with Alg. 3.
Extension phase (Alg. 3). If Snowcap cannot find a solution for
the reduced ordering, it is a sign that the dependency group is
not yet complete. Hence, it tries to extend the group with a single
command, which it has not yet considered. Alg. 3 goes through
every remaining command and inserts it at every possible position
in the sequence. If the sequence becomes valid or the error changes
(as described in the next paragraph), the algorithm returns the
extended sequence. Example: Snowcap tries to extend the reduced
sequence c , with the yet unconsidered command d . Alg. 3 inserts
d before c , resulting in d c . Hence, the algorithm returns the
extended sequence d c as a dependency group and continues.
Comparing errors. To find the minimal set of commands respon-
sible for a problem, our approach has to determine whether a com-
mand is independent of the current problem or not. During the
reduction phase (Line 9 of Alg. 2, for example), we compare the
outcome of a sequence with and without a specific command. If the
outcome is the same, the command is considered to be independent
of the current problem. To compare the outcome of two different
sequences, it does not suffice to check whether both of them satisfy
the specification or not. One also has to check whether the same
part of the specification is violated, i.e., whether the violation is due
Synthesizing Network-Wide Configuration Updates
SIGCOMM ’21, August 23–28, 2021, Virtual Event, USA
to the same reason ϵϕ(o) (cf. App. C.2 for a formal definition). This
comparison of the oracle’s result is not just used in Alg. 2, but also
on Line 7 of Alg. 3. Often, removing commands does not solve the
problem but shifts it to a different position. Hence, comparing the
validity and the reason outperforms simple comparison on different
networks and scenarios by several orders of magnitude.
ϕ
4.3 Optimization
So far, we were only concerned with finding a valid ordering based
on the hard specification ϕ. In the following, we explain how we
can extend Snowcap’s approach to find an optimal ordering by
incorporating the soft specification f .
There exist n! different command orderings with n being the total
number of reconfiguration commands.6 Due to this immensely large
search space, Snowcap does not attempt to find the global optimum.
Instead, it greedily minimizes each step, optimizing only locally,
and hence, finding a local optimum. Instead of taking the first
command that seems to work during the DFS exploration, Snowcap
computes the cost of applying each remaining, valid command
and continues with the one of lowest cost. While not necessarily
finding the optimal solution, we show in our evaluation (§6.2) that
this strategy works well in practice.
5 HARD & SOFT SPECIFICATION
This section discusses the specification guiding Snowcap’s search
for a valid and good ordering of reconfiguration commands in more
detail. The specification consists of two parts: (i) the hard specifica-
tion, which comprises the policies that must not be violated during
the reconfiguration, and (ii) the soft specification, which assigns
a cost to every command ordering and guides Snowcap towards
an optimal one. In the following, we first introduce the language
underlying the hard specification and then discuss techniques to
evaluate the specification. Finally, we present the soft specification.
5.1 Specification Language
In the following, we present our hard specification language and
explain how it differs from traditional specification languages for
networks. The main building blocks consist of the well-known
policies from the verification and synthesis literature: reachability,
isolation, waypointing, and path redundancy. In contrast to prior
work, the specification is dynamic: operators typically reconfigure
the network due to policy changes. Our specification language
(Fig. 6) is therefore based on LTL.
Basic policies. Snowcap supports a set of four basic policies on
the forwarding behavior of the network, which can be combined
according to the operator’s requirements. We model the policies
as predicates defined over a router r, a prefix p, and, except for
isolation, a path condition c, which can hold on a forwarding state s.
For example, V(r ,p,c) holds on s if the path from router r to prefix p
in s satisfies the path condition c. Similarly, V +(r ,p,c) holds if the path
satisfies the condition under any single link failure. Path conditions
are expressed as restricted regular expressions; (∗ r1 ∗) ∨ (∗ r2 ∗)
6Due to potential BGP Wedgies [21], the ordering of commands might change the
resulting forwarding state, even if the resulting configuration is the same.
Logical Operators
::= true
¬ϕ
|
|
ϕ1 ∧ ϕ2
|
ϕ1 ∨ ϕ2
|
ϕ1 ⇒ ϕ2
|
|
ϕ1 ⇔ ϕ2
ϕ1 ϕ2
true
negation
conjunction
disjunction
xor
implication
if and only if
Temporal Modal Operators
ϕ
::= ϕ1
|
|
|
|
|
|
|
X ϕ1
F ϕ1
Gϕ1
ϕ1U ϕ2
ϕ1Rϕ2
ϕ1W ϕ2
ϕ1M ϕ2
now
next
finally
globally
until
release
weak until
strong release
ϕ
c
x
Propositional Variables
::= V(r ,p ,c)
|
|
|
I(r ,p)
V +(r ,p ,c)
C(r ,p ,c)
valid path
isolation
redundancy
convergence
behavior
Path Condition
c1 ∧ c2
c1 ∨ c2
x
::= ¬c
|
|
|
::= xx
|
ri
|
?
∗
|
negation
conjunction
disjunction
path
sequence
router ri
any router
any number of
routers
Figure 6: Definition of the LTL specification language.
requires packets to traverse either router r1 or r2, while (∗ r1 ∗ r2 ∗)
requires packets to traverse r1 before r2.
Temporal dimension. During reconfiguration, the behavior of
the network is changing, and so is the network policy. Therefore,
it is not enough to support a static specification defined over a
single network state. The specification has to be defined over a
sequence of them and needs to reflect configuration changes (e.g.,
to move traffic “gracefully” from an old to a new firewall). Hence,
Snowcap’s specification language is based on LTL (see App. C.1).
The following examples highlight the benefits of using LTL as a
specification language:
• Reachability and redundancy: During the entire reconfiguration
process, every router should be able to reach every prefix, even
under single link failures.

V(r ,p,∗) ∧ V
+(r ,p,∗)
G
(r ,p)∈F
G ϕ (globally) requires the expression ϕ to hold in every single
state during the reconfiguration.
• Firewall migration: All traffic should be migrated from the old
firewall at rold to the new rnew, i.e., traffic should initially go via
rold and switch at one point over to rnew.
V(r ,p,(∗rold∗)) U G V(r ,p,(∗rnew∗))

(r ,p)∈F
In LTL, ϕ1 U G ϕ2 requires that ϕ1 holds initially, and in all states
until ϕ2 holds for the remaining states.
• Rerouting of a critical flow: The flow (r, p) is critical and has to
be migrated from path c− to c+. It is never allowed to take any
other path (not even during convergence).
V(r ,p,c +) ∧ C(r ,p,c−∨c +)
(cid:17) ∧ XG V(r ,p,c +)
V(r ,p,c−) U
(cid:16)(cid:16)
(cid:17)
In this expression, ϕ1 U (ϕ2 ∧ XG ϕ3) requires ϕ1 to hold until
ϕ2 holds for a single, and ϕ3 in all remaining states.
SIGCOMM ’21, August 23–28, 2021, Virtual Event, USA
Tibor Schneider, Rüdiger Birkner, and Laurent Vanbever
5.2 Evaluating the Hard Specification
The specification’s dynamic nature brings three additional chal-
lenges: first, evaluating incomplete orderings; second, identifying
the cause for the specification violation; and third, providing guar-
antees during convergence. In the following, we discuss each of the
three points in more detail.
Partial evaluation. As the specification ϕ is defined over a se-
quence of network states, every single one of them must be present
to check whether an ordering satisfies ϕ. It can happen that early
network states violate parts of the specification, which makes it
impossible for any future to be valid. To speed up the search, one
would like to identify and dismiss these cases as soon as possible.
To this end, we rely on partial evaluation of the LTL expression:
we evaluate whether the expression holds weakly on a truncated
sequence [8], i.e., if there exists a possible future in which the
expression holds.
Error comparison. For Algs. 2 and 3, Snowcap needs to under-
stand the exact reason for the specification violation, in order to
determine if two problematic command orderings o1 and o2 violate
ϕ due to the same reason ϵϕ (cf. App. C.2). To this end, we apply
two steps: First, we extract the set of propositional variables, which
need to change in the last state of the sequence o1, in order to make
the LTL expression hold weakly (explained in detail in App. C.2).
Second, for each of these propositional variables, we compare the
actual forwarding path of its corresponding flow (r, p) in the last
state of the two sequences s1 and s2.
Convergence behavior. A network operator is not only concerned
with the sequence of converged states after every single reconfigu-
ration step, but might also require properties during convergence.
Therefore, the hard specification can contain convergence poli-
cies C(r ,p,c) that must not be violated in any possible intermediate
network state.
Transient effects have already been discussed in the literature
for specific protocols. More precisely, Francois et al. has shown a
method [13] for seamless reconfiguration of link-state IGP protocols
like OSPF. However, no approach has yet been proposed which
solves this problem in the general case. Enumerating all possible
forwarding states that might occur during reconfiguration is nearly
impossible, even if only BGP is considered. Reordering a single BGP
message can result in a completely different convergence process.
Snowcap verifies convergence properties by computing, intu-
itively speaking, the union over all possible forwarding states dur-
ing convergence, which we call the forwarding supergraph. This
supergraph overapproximates the set of all possible forwarding
states during convergence.This presents a sufficient but not neces-
sary condition: our approach guarantees that path conditions are
satisfied, but it cannot guarantee the existence of a problematic
message ordering. We provide a full proof of correctness in App. D.2.
While this approach provides guarantees about the paths traffic
takes, it cannot guarantee the absence of blackholes. Our approach
can be combined with the work of Francois et al. in the special case
of IGP reconfiguration.
To compute the forwarding supergraph Gfsg, Snowcap only ana-
lyzes the network state before and after convergence: s− and s+. For
each route x, our system computes the set of nodes rri(x) which
might learn the route x in either s− or s+ (App. D.1 describes how
to construct rri(x) for BGP). Next, we build the forwarding super-
graph Gfsg by looking at all possibly considered routes for router
v: pcr(v) = {x | v ∈ rri+(x) ∨ v ∈ rri−(x)}. The final graph
Gfsg = (V, Efsg) has an edge (u, v) ∈ Efsg only if there exists a
route x ∈ pcr(u), for which v ∈ nh−(u, x)∪ nh+(u, x) (with nh(u, x)
being the next hop at router u towards the target advertised in x).
Finally, to provide the convergence guarantees, Snowcap checks
that the condition is satisfied in every possible path in Gfsg from
the source to the target. The process of computing the forward-
ing supergraph Gfsg for the combination of BGP and IGP takes