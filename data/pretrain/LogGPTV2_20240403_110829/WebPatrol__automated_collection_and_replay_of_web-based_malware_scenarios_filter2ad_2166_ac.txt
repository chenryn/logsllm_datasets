Initial Site
dj.csuft.edu.cn
www.ecls.ynu.edu.cn
student.fzu.edu.cn
ebm.lzu.edu.cn
cheds.pku.edu.cn
xsc.ruc.edu.cn
btzy.nm.edu.cn
www.rwxy.zjut.edu.cn
psy.ntu.edu.cn
www.ecls.ynu.edu.cn
www.xlzx.sdu.edu.cn
art.dufe.edu.cn
www.ecls.ynu.edu.cn
abc.hznu.edu.cn
jwc.sdjzu.edu.cn
total
KID HPC N HP C
KID PHC N P HC
KID All WP C.1 C.2 C.3 C.4 N W P
KID
0.60
0.60
0.80
0.80
0.40
0.80
1.00
0.67
0.67
0.50
0.38
1.00
0.86
1.00
0.86
0.93
0.21
0.93
0.87
0.13
0.87
0.67
0.67
1.00
0.13
0.13
0.75
0.67
0.33
0.83
0.10
0.14
0.81
0.71
0.43
0.86
0.80
0.40
0.40
0.83
0.67
0.83
1.00
0.33
1.00
4
4
2
8
6
13
20
2
12
5
17
6
4
5
3
119
5
5
3
8
7
14
23
3
16
6
21
7
5
6
3
132
3
2
2
3
7
3
3
2
2
2
3
3
2
4
1
42
3
4
3
4
6
13
20
3
2
4
2
5
2
5
3
79
1
2
3
4
5
6
7
8
9
10
11
12
13
13
13
-
0
0
0
0
0
0
1
0
1
0
2
0
0
0
0
4
0
0
0
0
0
1
0
0
1
1
2
0
1
0
0
6
1
1
1
0
1
0
2
1
0
0
0
1
0
0
0
8
0
0
0
0
0
0
0
0
2
0
0
0
0
1
0
3
Table 4: Performance comparison of the manually collected scenarios, scenarios collected by WebPatrol(WP),
scenarios collected by the original PHoneyC(PHC) and scenarios collected by Capture-HPC(HPC). WebPa-
trol outperformed PHoneyC and Capture-HPC in collecting much more complete infection trails/nodes. (C.x
stands for Causing x as explained later.)
Kit ID Pattern Description
1 MS10-018 0 htm
2 MS10-018 xo dk html
3 wm IE html
4 wm multiple pages
01 x01 htm jk.htm
5
6
av htm mp htm
7 GV hk series
8
9
10
11
12
13
xc15 15index htm
av htm 6 7 htm
apt spa chinese
index 5 htm
index nivea htm
other
total
Cnt.
713
438
82
124
75
82
39
13
177
36
24
18
179
2000
Pi
35.6%
21.9%
4.1%
6.2%
3.8%
4.1%
1.9%
0.7%
8.8%
1.8%
1.2%
0.9%
9.0%
100%
Table 3: Percentage of each family in the sample set
from the ’other’ group (Table 3). The ﬁrst column in Table 3
is the ID of the exploit kit, the second column is a brief name
of the exploit kit which reveals some unique paths of the kit,
the third column is the number of scenarios containing an
exploit kit in the overall 2000 scenarios, and the last column
is its percentage. As we can see in the table, the number
of top 12 most popular WM families covers 91.0% of all the
scenarios. We manually analyze each of the 15 samples for a
complete scenario (µ, V, E, T ), and then compare them with
the scenarios (µ, V (cid:48), E(cid:48), T (cid:48)) collected by WebPatrol. The re-
sult of the comparison is shown in Table 4. The ﬁrst column
is the landing site, and second column is the corresponding
kit ID, the third column is the number of all nodes in an
WMS, the fourth column is the number of nodes collected
by WebPatrol, and the following four columns are the num-
bers of missing nodes grouped by their causing. Thus the
completeness of the WMS collected by WebPatrol CW P can
be calculated in the following way:
13(cid:88)
i=1
CW P =
(N W P
i
∗ Pi) = 0.819
(1)
where Ni is the percentage of nodes WebPatrol can col-
lect on exploit kit i (N13 is the average percentage of nodes
WebPatrol can collect on the 3 randomly chosen samples
from the “other” family group) , and Pi is the percentage of
scenarios from kit 1-13 in the overall 2000 scenarios. Thus
the average completeness of the collected scenarios is 81.9%.
To compare the performance of WebPatrol with current
state-of-the-art honeypot systems, we also run the origi-
nal version of PHoneyC[11]6 and Capture-HPC[1](capture-
client-2.5.1-389) on the same sample set. These results are
also listed on Table 4 Columns 10-13. As we can see, the
original version of PHoneyC has much lower coverage of in-
fection trails (C P HC = 47.1%), due to the lack of full DOM
emulation and shellcode detection and analysis. In the case
of Capture-HPC, it did better in very few particular types
of scenarios. However, the overall performance is still not
as good as WebPatrol, i.e., the average coverage of Capture-
HPC is only 65.3%, still much lower than that of WebPatrol.
We looked into the reasons why Capture-HPC did better in
some scenarios. We found that this is mainly because Web-
Patrol’s shellcode detection and emulation module (libemu)
is not perfect (it fails in some cases in downloading bina-
ries), while Capture-HPC provides a real OS environment
where shellcodes can be executed correctly. However, due
to a more complete set of plugins and browser environments
that WebPatrol provides, it has an overall much better path
exploration functionality than Capture-HPC. In short, we
believe that WebPatrol provides better results in analyzing
web malware infection trails than existing state-of-the-art
honeypot systems.
We further investigated the cases where WebPatrol has
missed some nodes. They can be grouped as the following 4
categories:
1. Out-going links in diﬀerent branches: For exam-
ple, as shown in Figure 6, diﬀerent out-going links will
be added to the DOM tree based on the vendor of the
browser. Due to the ﬂexible of LI honeypots, this limi-
tation can be easily overcame with multiple runs of the
6SVN
http://code.google.com/p/phoneyc/.
revision
1363
from
repository
if(navigator.userAgent.toLowerCase().indexOf("msie")>0)
{document.write("");}
else
{document.write("");}
Figure 6: Out-going links in diﬀerent branches
analyzer with diﬀerent conﬁguration of the emulated
environments.
2. Limitation of the shellcode detection module:
Our analyzer uses libemu to detect shellcode in the
right value of a string assignment, thus the eﬀective-
ness of triggering futher downloads relies on the way
shellcodes are used in malicious codes and the eﬀective-
ness of libemu’s shellcode detection.
If libemu can’t