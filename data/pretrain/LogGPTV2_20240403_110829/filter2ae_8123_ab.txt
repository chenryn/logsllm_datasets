这个时候就需要使用到下面的超时重传机制了。
客户端A发出了消息报文，在一个设定的超时等待时间内，如果没有收到来自客户端B的确认报文，客户端A会尝试将消息重发。如果客户端A在这个时间段同时发出了很多消息，将会导致无法区分哪条消息需要重发，因此客户端A需要在本地维护一个“等待确认队列”，并配合timer超时机制来记录哪些消息没有收到确认报文，以便定时重发。一旦收到了确认报文，说明客户端B成功收到了消息，这时可以将对应的消息从“等待确认队列”中移除。如果一个消息超时重发次数超过3次，则在客户端会话窗口显示发送超时等提示信息。
由于超时重传机制有可能导致客户端收到两条重复的消息，这个时候我们的去重机制就该上场了。我们的解决方案是，由发送方负责生成一个消息去重的消息ID（必须保证唯一性），保存在“等待确认队列”里，同一条消息使用相同的消息ID来重传，以便客户端去重从而不会影响用户体验。
以上考虑的都是客户端A与客户端B同时在线的情况下，如果客户端B不在线，那么服务端会将消息存储在离线消息队列中。客户端B成功上线后，会首先向服务端拉取所有未接收的离线消息，然后向服务端回复成功接收的确认报文，服务端只有收到每条消息的确认报文后，才会将离线消息从服务端移除。
## 3.3 高可用设计
作为面向互联网应用的即时通讯服务，在实际的运行中面对的环境是非常复杂的，业务上的流量突增、依赖服务的不稳定、物理资源损坏等方方面面都会对系统的运行带来大大小小的冲击，只有具备高可用的服务才能在面对这些冲击时还能不间断稳定运行。
下面我们将通过对服务的扩展能力、故障隔离、监控报警等三个方面的优化设计来提升系统的可用性。
### 3.3.1 分层设计的可水平伸缩的架构
良好的扩展能力能让系统在面对突发事故时只需通过增加部署节点的方式就能解决问题，而将系统合理分层能使各层之间的服务互不依赖,让各层只专注自己职责，可以提高服务的可扩展性和可维护性。
我们将内网通讯服务分为请求入口层、应用层、缓存层、数据库层四个层级（图2），每个层级的服务都要求能够支持多节点部署。
  * 请求入口层 *
请求入口层负责客户端所有连接的接入功能，对应这个层级的是系统的负载均衡服务。一个负载均衡服务后面可以对应多个应用服务，负载均衡服务会根据负载均衡算法选择一个应用服务分配给客户端。目前常用的负载均衡算法主要有以下几种：
  * 轮询： 将请求顺序循环地发到每个服务器
  * 最少连接数:根据后端服务器当前的连接情况，动态的选取其中当前积压连接数最少的一台服务器来处理当前请求，尽可能的提高后台服务器利用率，将负载合理的分流到每一台服务器
  * 哈希: 将客户端的源地址,端口进行哈希运算,根据运算的结果转发给一台服务器进行处理
  * 随机：通过系统随机函数，根据后台服务器列表的大小值来随机选取其中一台进行访问
具体采用哪种算法要根据应用的实际场景来确定，例如在我们的应用场景中，客户端与服务端之间使用的是TCP长连接，一旦连接成功建立后，双方之间的数据传输都将在这个TCP通道里面完成。所以服务端连接数可以比较直观的反应当前机器的负载压力，因此最小连接数是最适用于我们系统的负载均衡算法。
  * 应用层 *
应用层包含即时通讯服务的所有业务处理逻辑，是整个系统的核心服务，同时也是系统中最容易出现故障的部分。在本层中我们主要通过对服务扩展能力和故障隔离能力的设计来实现服务的高可用。
实现服务良好扩展性的一个重要原则就是无状态化设计。一个有状态的服务需要在内部存储当前用户会话及登录状态等上下文信息，在新加节点后需要面临数据同步问题，无法做到即插即用。而无状态化设计由于将上下文信息单独存储在分布式缓存（例如Redis）中，更有利于实现节点的水平扩展。
既然故障是不可避免的，那么我们需要考虑的就是当故障发生时，如何将产生的影响降低到最小范围。我们的做法是将一个大的服务按业务逻辑拆分成多个只具有单一功能的子服务，每个子服务都有相应的处理逻辑和轻量通讯机制，并运行在自己的独立进程之内，避免单个业务功能的Bug或性能瓶颈影响到整个系统的正常运行。
  * 缓存层 *
使用缓存是服务实现中经常采用的一种提高性能的方法，既可以提高单个请求的响应速度，又可以降低数据库层的压力。应用层服务需要获取数据时优先从缓存中读取，如果缓存没有命中，再从后端的数据库中查询。这里要注意处理好缓存穿透问题，如果在缓存中没有对应的数据，并且DB也没有查询到数据，此时大量的请求都会直接到达DB，导致DB承载高并发的问题。解决缓存穿透的问题可以对DB也没有的数据返回一个空标识的数据，并将其回写到缓存中。
哪些数据适合保存中缓存中呢？一般来说系统中的临时数据、中转数据、不经常变更且经常访问的数据都适合存储在缓存中，例如本系统中的用户状态、会话列表、离线消息等。
  * 数据库层 *
在数据库层面实现高可用，通常是在软件层面来做。我们使用的是MySQL数据库，MySQL是最适合互联网的数据库，免授权、高效稳定、可控性高。在实际的生产环境中，由单台MySQL作为独立的数据库是完全不能满足实际需求的，无论是在安全性，高可用性以及高并发等各个方面。因此，一般来说都是通过主从复制（Master-Slave）的方式来同步数据，再通过读写分（MySQL-Proxy）来提升数据库的并发负载能力的方案来进行部署与实施。
### 3.3.2 使用监控服务提高系统的可维护性
通过前面的设计我们已经极大的提高了服务的可用性，但在实际的日程运行中，网络原因、硬件损坏、程序内部Bug等意外情况都有可能造成服务的奔溃。我们的服务是部署在阿里云ECS主机上的，因此可以使用阿里云提供的云监控服务。云监控服务可以收集阿里云资源的监控指标或用户自定义的监控指标，并探测服务的可用性以及针对指标设置警报，使系统管理员能够全面了解阿里云上的资源使用情况、业务的运行状况和健康度，保证服务的顺畅运行。
除此之外我们还开发了针对应用层的监控服务，能够针对业务组件服务进行实时监控。如果发现有服务处于异常停止状态，监控服务将尝试重新启动该服务，并以短信的形式向系统管理员推送告警信息。
# 方案落地效果
按照前面的设计方案我们成功开发了中通内部安全通讯系统，目前该产品已经在中通总部及下属网点大批量安装部署。全网每天日活人数达到三万左右，每天推送订单、工单等具有实效性的任务提醒和文本消息数百万条，发送申诉、仲裁类相关图片两万余张。系统上线以来运行稳定初步达到了我们的预期设计目标。
下面简单的介绍下安全通讯客户端
## 4.1 登录页面
集成了SSO登录授权认证机制的登录页面（图5），用户必须使用中通宝盒（中通安全客户端）扫码的方式登录安全通讯客户端。我们取消了原有的用户名、密码登录方式，进一步增强了产品的安全性。
## 4.2 主面板
用户登录成功后将进入到客户端的主面板，主面板上半部分显示的是用户自定义头像、个性签名以及搜索功能，搜索功能够支持联系人及网点信息查找。中间部分展示的是最近联系人列表。在主面板的底部集成了中通常用的几款应用并能支持单点登录，方便了用户的使用。
## 4.3 对话窗口
在最近联系人列表里面双击即可打开对话窗口（图7），在对话窗口里面可以发送和接收文本、图片、文件、表情等消息。
# 5.未来展望
未来我们希望将内部安全通讯系统的安全通讯能力开放给中通集团各个子公司及子业务，通过统一的内部安全通讯系统，打通和对接各子业务系统及基础设施，提供统一的有访问控制的消息和文件上传下达及分发服务，将最终用户、网点业务员、网点客服、网点管理员、总部客服、总部职能部门、总部领导连接起来，形成一个安全的高效沟通和便捷处理问题的信息交换网络，提高业务协作效率和客户服务水平的同时有效保障信息安全。
# 6.团队介绍
中通信息安全团队是一个年轻、向上、踏实以及为梦想而奋斗的大家庭，我们的目标是构建一个基于海量数据的全自动信息安全智能感知响应系统及管理运营平台。我们致力于支撑中通快递集团生态链全线业务（快递、快运、电商、传媒、金融、航空等）的安全发展。我们的技术栈紧跟业界发展，前有
React、Vue，后到 Golang、Hadoop、Spark、TiDB、AI
等。全球日均件量最大快递公司的数据规模也将是一个非常大的挑战。我们关注的方向除了国内一线互联网公司外，也关注 Google、Facebook、Amazon
等在基础安全、数据安全等方面的实践。
# 7.加入我们
如果您对我们的团队或者我们做的事有兴趣，也希望在工程技术领域有所成就，非常欢迎加入我们，我们需要信息安全、分布式平台开发、大数据、风控、产品、运营等方面的人才，Base上海，工作地点任选虹桥万科中心及中通总部。简历投递地址：PI:EMAIL。