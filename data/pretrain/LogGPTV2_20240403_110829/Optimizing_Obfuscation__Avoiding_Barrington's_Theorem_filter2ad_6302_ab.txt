an additional multiplicative overhead of (cid:96) to the length. However, this step and the resulting
overhead can be avoided when the RMBP family is already input-oblivious. This is guaranteed
in the useful case of obfuscating a class of keyed functions, namely a class of functions of the
form fz(x) = φ(z, x) where φ is a publicly known branching program or formula of size s. In
other words, the goal is to obfuscate the class φ(z,·) to hide the key z. In this case, an RMBP
for φ can be easily turned into an input-oblivious family of RMBPs for the class fz with no
additional overhead.
Eﬃciency comparison. We now quantify the eﬃciency improvements we obtain over previous
work; we will do so both asymptotically and with explicit numbers through examples. The
eﬃciency of our obfuscation scheme can be compared to previous ones by considering (1) the
level κ of the multilinear encoding being employed, and (2) the number S of encoded ﬁeld
elements. The parameter κ is of special importance, as the bit-length of each encoded element
in current multilinear encoding candidates [26, 22] grows quadratically with κ. Thus, a good
estimate for the total size (in bits) of an obfuscated program is ˜O(κ2 · S), where ˜O hides a
multiplicative factor which depends polynomially on the security parameter. Moreover, our
constructions (as well as previous ones) can be implemented so that the running time required
for evaluating the obfuscated program is quasi-linear in the obfuscation size. Thus, from here
on we will not explicitly refer to the asymptotic running time.
The concrete cost of implementing optimized multilinear encoding candidates is a subject of
much ongoing research [22, 40, 41], and as of the time of this writing, explicit running time and
size estimates for multilinear candidates optimized for obfuscation5 are not available for the κ
4A non-deterministic branching program is a standard computational model that corresponds to non-deterministic
logarithmic space. Such branching programs are believed to be strictly stronger than deterministic branching pro-
grams and formulas (see below) and strictly weaker than general circuits. See Section 2.2 for a formal deﬁnition.
5We note that obfuscation only requires Multilinear Jigsaw Puzzles [28], a strict subset of the full multilinear map
functionality, which allows for substantial eﬃciency improvements in implementations. However, as of this writing,
no experimental study of Multilinear Jigsaw Puzzle implementations has been completed.
5
values that we need. However, as research in this direction is still in its infancy, it is reasonable
to expect major improvements in the near future. For this reason, we do not attempt to provide
real-life running time estimates, but rather compare our constructions with previous ones by
considering the parameters κ and S described above.
The obfuscation methods from [28, 15, 4], when applied to a (strict) matrix branching pro-
gram of length n and width w (one whose evaluation involves the product of n matrices of size
w × w) requires κ = n levels of multilinearity and S = w2n encoded elements. The same holds
for our method when applied to an RMBP of length n and width w. Our simple and direct
transformation for a (keyed) formula of size s over the standard basis yields an RMBP of length
n ≈ s and width w ≈ 2s. This should be compared with the previous Barrington-based solution
combined with the best known formula balancing results, leading to a matrix branching pro-
gram with parameters n = O(s3.64) and w = O(1). Thus, under the quadratic cost assumption
mentioned above, the obfuscation size is improved from ˜O(κ2 · S) = ˜O(s10.92) to ˜O(s5). (For the
case of a completely balanced formula, the obfuscation size of the previous method is reduced
to ˜O(s6).) By further applying the result from [31], we can obfuscate formulas over a full basis
while reducing the total size to ˜O(s3(1+)). See Table 1 for a detailed summary of old and new
results for obfuscating formulas.
We note that even if future implementations of multilinear maps achieve an encoding size that
only grows linearly with κ, our results would still yield signiﬁcant improvements. (An encoding
size that grows sublinearly with κ seems out of reach with current lattice-based methods, due
to error growth.)
Finally, to the best of our knowledge, it is not known how to simulate general branching
programs (even deterministic ones) by strict (i.e., non-relaxed) matrix branching programs with
a polynomial overhead. Thus, for the purpose of obfuscating branching programs without the use
of bootstrapping, our method provides a super-polynomial eﬃciency improvement over previous
core obfuscators. See Table 2 for a detailed summary of old and new results for obfuscating
branching programs.
Examples. We illustrate our concrete eﬃciency gains by two examples. The ﬁrst example is
motivated by the goal of obfuscating a psudorandom function (PRF) and deals with a conjectural
PRF. As discussed above, PRFs can be used to bootstrap general obfuscation [33, 2]. While
practical PRF candidates such as AES are not known to have small formulas or branching
programs, it seems plausible that there are good PRF candidates with relatively small formulas
or layered non-deterministic branching programs. Suppose that a PRF family fz : {0, 1}100 →
{0, 1} can be implemented by a layered, invertible non-deterministic branching program of
length 300 and width 30 (see Section 2.2 for deﬁnition). Obfuscating such a PRF family using
our methods would require roughly 270,000 encoded ﬁeld elements, with multilinearity κ ≈ 300.
In contrast, obfuscating such a PRF with previous approaches would require one to decide
reachability in a layered graph of length 300 and width 30. The latter can be done using at
least (cid:100)log2 300(cid:101) = 9 levels of recursion, each implemented by a circuit of depth 6, leading to
a circuit of at least depth 54. Thus, a direct use of the Barrington-based approach would
require using κ > 2100 levels, which is infeasible. We pose the design and analysis of such an
“obfuscation-friendly” PRF as a major open question that is motivated by our work.
As another example, consider the task of obfuscating a “fuzzy match” functionality, deﬁned
by a Hamming ball of radius r around a secret point z ∈ {0, 1}n. That is, the obfuscated function
fz(x) evaluates to 1 if the Hamming distance between x and z is at most r, and evaluates to 0
otherwise. Functions from this class can be implemented by (input-oblivious, special) layered
branching programs of width r + 1 and length n, leading to an obfuscation that contains roughly
4r2n encoded elements with multilinearity κ ≈ n. For the case n = 100 and r = 20, we get
an obfuscation that consists of roughly 160,000 encoded elements, with multilinearity κ ≈ 100.
In contrast, representing such functions by formulas or low-depth circuits, which is essentially
equivalent to computing the (n, r)-threshold function, leads to a best known formula size s > n4.4
6
Table 1: Comparing the eﬃciency of obfuscation schemes for keyed formulas over diﬀerent bases.
We use ˜O to suppress the multiplicative polynomial dependence on the security parameter and
other poly-logarithmic terms and O to suppress multiplicative constants which depend on . Here
s is the formula size,  > 0 is an arbitrarily small constant, and φ is a constant such that for κ-level
multilinear encodings, the size of each encoding is ˜O(κφ). The current best known constructions
have φ = 2. Evaluation time is given in the form a · b, where a denotes the number of multilinear
operations (up to lower order additive terms) and b denotes the time for carrying out one multilinear
operation.
Work
[4] + [48]
(previous work)
{and, or, not}-basis
This work (direct)
{and, or, not}-basis
This work + [31]
any complete basis
Levels of
Size of Obfuscation/
Multilinearity
Evaluation Time
O(s3.64)
O(s3.64) · ˜O((s3.64)φ)
s
4s3 · ˜O(sφ)
O(s1+)
O(s(1+)) · ˜O((s(1+))φ)
and circuit depth d > 4.9 log2 n [47, 51], which in turn require κ > 1019 levels of multilinearity
using previous obfuscation methods. Thus in this concrete example, our improvement just to
the level of multilinearity κ is over 1017; the improvement in the overall running time and size
would be even greater.
Security. While improving security of obfuscation is not the focus of this work, our work on
improving eﬃciency of obfuscation would be meaningless if it sacriﬁced security. We give evi-
dence for the security of our constructions in the same way that the work of [4] does: by showing
that our constructions unconditionally achieve a strong virtual black-box notion of security [5],
against adversaries that are limited to algebraic attacks allowed in a generic multilinear model.
In fact, our obfuscators are information-theoretically secure against query-bounded adversaries
in this generic model. We note that our work actually provides a new feasibility result in the
generic multilinear model, namely an information-theoretic (and unconditional) obfuscation for
non-deterministic branching programs which capture the complexity class NL. This should be
compared to previous results in the same model, which only eﬃciently apply to formulas (or the
complexity class NC1).
As in the case of [4], our security proof in the generic model can be interpreted in two nat-
ural ways: (1) Our proof can be viewed as evidence of virtual black-box security for practical
applications, in a similar spirit to proofs of security in the random oracle model [8]. It is impor-
tant to note that analogous to known attacks on contrived schemes in the random oracle model
(e.g. [19]), there are known attacks to virtual black-box security for obfuscating quite contrived
functionalities [5]. However, no attacks are known for virtual black-box obfuscation for obfuscat-
ing practical functionalities. (2) Our proof can also be viewed as evidence that our obfuscator
achieves the notion of indistinguishability obfuscation [5], which is a deﬁnition of security of
obfuscation that does not suﬀer from any known attacks even for contrived functionalities, but
which nevertheless has proven to be quite useful.
Organization.
In Section 2 we deﬁne virtual black box obfuscation and various notions of
branching programs relevant to our construction. Then in Section 3 we give a general trans-
formation from a branching program to a relaxed matrix branching program (RMBP). For
7
Table 2: Comparing the eﬃciency of obfuscation schemes for keyed non-deterministic branching
programs and special layered branching programs, as deﬁned in Section 2.2. For a general branching
program, s denotes the size of the branching program. For a special layered branching program, n
is the length and w is the width. Other notation is as in Table 1.
Work
Previous work (general)
sO(log s)
This work (general)
s
Previous work (special layered)
nO(log w)
This work (special layered)
n
Levels of
Size of Obfuscation/
Multilinearity
Evaluation Time
sO(log s) · ˜O(sO(log s))
4s3 · ˜O(sφ)
nO(log w) · ˜O(nO(log w))
4nw2 · ˜O(nφ)
completion, we show the transformation from formulae to branching programs in Appendix B.
The next step is randomization of these RMBPs which is described in Section 4. Finally, we
construct an obfuscation scheme by showing how to encode the elements in the randomized
RMBP using ideal multilinear encodings (deﬁned in Section 5) and the concept of straddling
sets (deﬁned in Section 6). The construction of the obfuscation scheme is described in Section 7.
2 Preliminaries
We denote the security parameter by λ. We use [n] to denote the set {1, . . . , n}.
2.1 “Virtual Black-Box” Obfuscation in an Idealized Model
Let M be some oracle. Below we deﬁne “Virtual Black-Box” obfuscation in the M-idealized
model taken verbatim from [4]. In this model, both the obfuscator and the evaluator have access
to the oracle M. However, the function family that is being obfuscated does not have access to
M.
Deﬁnition 1. For a (possibly randomized) oracle M, and a circuit class(cid:8)C(cid:96)
(cid:9)
a uniform PPT oracle machine O is a “Virtual Black-Box” Obfuscator for(cid:8)C(cid:96)
(cid:96)∈N, we say that
(cid:96)∈N in the M-
• Functionality: For every (cid:96) ∈ N, every C ∈ C(cid:96), every input x to C, and for every possible
idealized model, if the following conditions are satisﬁed:
(cid:9)
coins for M:
Pr[(OM(C))(x) (cid:54)= C(x)] ≤ negl(|C|) ,
where the probability is over the coins of C.
• Polynomial Slowdown: There exist a polynomial p such that for every (cid:96) ∈ N and every
C ∈ C(cid:96), we have that |OM(C)| ≤ p(|C|).
• Virtual Black-Box: For every PPT adversary A there exist a PPT simulator Sim, and a
negligible function µ such that for all PPT distinguishers D, for every (cid:96) ∈ N and every
C ∈ C(cid:96):
(cid:12)(cid:12) Pr[D(AM(OM(C))) = 1] − Pr[D(SimC(1|C|)) = 1](cid:12)(cid:12) ≤ µ(|C|) ,
where the probabilities are over the coins of D,A,Sim,O and M.
8
Note that in this model, both the obfuscator and the evaluator have access to the oracle M but
the function family that is being obfuscated does not have access to M.
For deﬁnition of Boolean formulas see Appendix A. Next, we describe branching programs.
2.2 Branching Programs
In this section we deﬁne a non-deterministic branching program, and several types of layered
branching programs that are useful for our purpose.
A non-deterministic branching program (BP) is a ﬁnite directed acyclic graph with two
special nodes, a source node and a sink node, also referred to as an “accept” node. Each
non-sink node is labeled with a variable xi and can have arbitrary out-degree. 6 Each of the
out-edges is either labeled with xi = 0 or xi = 1. The sink node has out-degree 0.
In the
following, we denote a branching program by BP and denote the restriction of the branching
program consistent with input x by BP|x. An input x ∈ {0, 1}(cid:96) is accepted if and only if there is
a path from the source node to the accept node in BP|x. Note that an input can have multiple
computation paths in BP|x. The length of the BP is the maximum length of any such path in
the graph. The size s of the branching program is the total number of non-sink nodes in the
graph, i.e., total number of nodes minus 1.
A layered branching program is a branching program such that nodes can be partitioned
into a sequence of layers where all the nodes in one layer are labeled with the same variable and
edges go only from nodes of one layer to the next. We can assume without loss of generality that
the ﬁrst layer contains the source node and the last layer contains the sink node. The length n
of a layered branching program is the number of layers minus 1 and its width w is the maximum
number of nodes in any layer. It will be convenient to assume that a layered BP has exactly w
nodes in each layer. We denote the kth node in layer i by vi,k for 0 ≤ i ≤ n and k ∈ [w].
The following nonstandard types of branching programs will be useful for our purposes. A
special layered branching program is a layered branching program with the following additional
property. For each layer i, 0 ≤ i < n, and each k ∈ [w], there is an edge from vi,k to vi+1,k
labeled by both 0 and 1 (namely, this edge is consistent with all inputs).
Finally, we deﬁne an invertible layered branching program as follows. An invertible layered
branching program is a type of a layered branching program. Corresponding to each i ∈ [n], we
deﬁne two w × w matrices Bi,0 and Bi,1 as follows: Bi,b[x, y] = 1 if and only if there is an edge
from node vi−1,x to node vi,y labeled with b. Otherwise, Bi,b[x, y] = 0. We say that the layered
branching program is invertible if Bi,b is full rank for all i ∈ [n] and b ∈ {0, 1}.
2.3 Relaxed Matrix Branching Programs
In this section we deﬁne the original notion of matrix branching programs used in [28] followed
by our notion of relaxed matrix branching programs.
Deﬁnition 2 (Matrix Branching Program (MBP)).
[4] A matrix branching program of width w
and length n for (cid:96)-bit inputs is given by a w×w permutation matrix Preject such that Preject (cid:54)= Iw×w
and by a sequence:
where Bi,b, for i ∈ [n], b ∈ {0, 1}, are w × w permutation matrices and inp : [n] → [(cid:96)] is
the evaluation function of BP. The output of BP on input x ∈ {0, 1}(cid:96), denoted by BP(x), is
BP = (inp, Bi,0, Bi,1)i∈[n],