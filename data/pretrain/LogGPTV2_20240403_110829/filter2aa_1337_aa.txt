# Owning the Network: Adventures in Router Rootkits

## Copyright and Disclaimer
Copyright Â© 2012 Virtual Security Research, LLC.  
All Rights Reserved.

## About the Author
**Michael Coppola**  
- **Security Consultant** at Virtual Security Research in Boston, MA (We're hiring!)  
- **Student** at Northeastern University  
- Experienced in various security challenges, including Capture the Flag (CTF) competitions  
- For more information, visit [poppopret.org](http://poppopret.org/)

## Introduction
### How Did This All Start?
- **.npk Packages on MikroTik Routers**: These packages can be used to install new features such as:
  - SOCKS proxy
  - VPN
  - IPv6 support
  - XEN/KVM virtualization
- **Potential for Shell Access**: The goal was to explore whether these packages could provide a shell or other access points.

### Router Firmware Upgrade Feature
- **The Big Question**: Can a universal process be developed to modify SOHO (Small Office/Home Office) router firmware images to deploy malicious code without altering the interface or functionality of the device? In essence, creating a rootkit?

### Intentions
- **Share Personal Experience**: Discuss the challenges and insights gained during this research.
- **Gain Insight into Router Internals**: Understand the inner workings of router firmware.
- **Release Code**: Share some of the tools and scripts developed.
- **Pop Shells and Pwn Devices**: Demonstrate the potential for exploitation.

### Prior Work
- **OpenWRT/DD-WRT**: Custom firmware, reverse engineering, and hardware/firmware profiling.
- **firmware-mod-kit**: Tools for de/reconstructing firmware images.
- **devttys0.com**: Resources on firmware modding, reverse engineering, and exploitation.

### Use Cases
- **Default/Weak Credentials on Admin Panel**
- **Remote Code Execution (RCE)/Authentication Bypass Vulnerability**
- **Cross-Site Request Forgery (CSRF) File Upload**

### Targets
#### WNR1000v3
- **Vendor**: NETGEAR
- **Version**: 1.0.2.26NA
- **Format**: NETGEAR .chk
- **Architecture**: MIPS
- **OS**: Linux 2.4.20
- **Bootloader**: CFE
- **Filesystem**: SquashFS 3.0

#### WGR614v9
- **Vendor**: NETGEAR
- **Version**: 1.2.30NA
- **Format**: NETGEAR .chk
- **Architecture**: MIPS
- **OS**: Linux 2.4.20
- **Bootloader**: CFE
- **Filesystem**: SquashFS 2.1

#### FD57230-4 v1110
- **Vendor**: Belkin
- **Version**: 4.03.03
- **Format**: EFH
- **Architecture**: MIPS
- **OS**: Linux 2.4.20
- **Bootloader**: CFE
- **Filesystem**: CramFS v2

#### TEW-652BRP v3.2R
- **Vendor**: TRENDnet
- **Version**: 3.00B13
- **Format**: Realtek
- **Architecture**: MIPS
- **OS**: Linux 2.6.19
- **Bootloader**: U-Boot
- **Filesystem**: SquashFS 4.0

### Generalized Technique
1. **Profile the Image**: Understand the structure and components.
2. **Extract Parts from the Image**: Isolate the necessary components.
3. **Deploy Payload**: Integrate the malicious code.
4. **Repack the Image**: Reassemble the firmware.
5. **Update Metadata**: Ensure the image is ready for deployment.

### Connecting to the Console
- **Serial Port Access**: Most routers have an RS-232 (serial) port.
- **Steps**:
  1. Identify the serial port.
  2. Solder connectors.
  3. Connect to the console.
- **Benefits**:
  - Profiling the device.
  - Testing new payloads.
  - Debugging.
  - Bootloader access for recovery and quick testing of new firmware images.

### Serial Pinout
- **Pins to Search For**:
  - **GND**: Ground
  - **VCC**: Voltage Common Collector (+3.3V)
  - **TXD (TX)**: Transmit Data
  - **RXD (RX)**: Receive Data

### Example: WGR614v9
- **Serial Pinout**:
  - GND
  - TX
  - RX
  - VCC

### Voltage Shifter
- **Computer RS-232 Port**: Operates at 12V.
- **Router RS-232 Port**: Operates at 3.3V.
- **Voltage Shifter**: Necessary to prevent damage to the router.

### Building the RS-232 Shifter Board
- **Components and Assembly**:
  - Detailed steps and diagrams for building the shifter board.

### Profiling the Image
- **Understanding the Binary**:
  - **Components**:
    - Bootloader
    - Kernel
    - Filesystem
  - **Tools**:
    - **find-headers.pl**: Early tool for identifying headers.
    - **binwalk**: Identifies headers, files, and code using libmagic and a custom signature database.

### Extracting from the Image
- **Items to Extract (WNR1000v3)**:
  - Headers
  - LZMA blob
  - SquashFS filesystem

- **Extraction Details**:
  - **Headers**:
    - Offset: 0 bytes
    - Size: 86 bytes
  - **LZMA Blob**:
    - Offset: 86 bytes
    - Size: 592580 bytes
  - **SquashFS Filesystem**:
    - Offset: 592666 bytes
    - Size: 1988809 bytes

### Unsquashfs
- **Obtaining the Correct Version**:
  - **firmware-mod-kit**: Provides unsquashfs, but not always the correct version.
  - **Source Code**: Sometimes lacks the right version.
  - **Getting the Right Tool**: Steps to obtain the correct version of unsquashfs.

This document aims to provide a comprehensive overview of the process and tools used in modifying SOHO router firmware to deploy malicious code, while maintaining the device's functionality and interface.