### TextArea
找到后填充即可
    textareaNodes, textareaErr := f.tab.GetNodeIDs(`textarea`)
    if textareaErr != nil || len(textareaNodes) == 0 {
        logger.Logger.Debug("fillTextarea: get textarea element err")
        if textareaErr != nil {
            logger.Logger.Debug(textareaErr)
        }
        return
    }
    _ = chromedp.SendKeys(textareaNodes, value, chromedp.ByNodeID).Do(tCtx)
### 自动化提交表单
>
> 提交表单也有一些需要注意的问题，直接点击form表单的提交按钮会导致页面重载，我们并不希望当前页面刷新，所以除了Hook住前端导航请求之外，我们还可以为form节点设置target属性，指向一个隐藏的iframe。具体操作的话就是新建隐藏iframe然后将form表单的target指向它即可
    /**
    设置form的target指向一个frame
    */
    const NewFrameTemplate = `
    (function sec_auto_new_iframe () {
        let frame = document.createElement("iframe");
        frame.setAttribute("name", "%s");
        frame.setAttribute("id", "%s");
        frame.setAttribute("style", "display: none");
        document.body.appendChild(frame);
    })()
    `
    func (tab *Tab) setFormToFrame() {
        // 首先新建 frame
        nameStr := tools.RandSeq(8)
        tab.Evaluate(fmt.Sprintf(js.NewFrameTemplate, nameStr, nameStr))
        // 接下来将所有的 form 节点target都指向它
        ctx := tab.GetExecutor()
        formNodes, formErr := tab.GetNodeIDs(`form`)
        if formErr != nil || len(formNodes) == 0 {
            logger.Logger.Debug("setFormToFrame: get form element err")
            if formErr != nil {
                logger.Logger.Debug(formErr)
            }
            return
        }
        tCtx, cancel := context.WithTimeout(ctx, time.Second*2)
        defer cancel()
        _ = chromedp.SetAttributeValue(formNodes, "target", nameStr, chromedp.ByNodeID).Do(tCtx)
    }
要成功的提交表单，就得正确触发表单的submit操作。不是所有的前端内容都有规范的表单格式，或许有一些form连个button都没有，所以这里有三种思路可供尝试，保险起见建议全部都运行一次：
  * 在form节点的子节点内寻找`type=submit`的节点，执行`elementHandle.click()`方法。
  * 直接对form节点执行JS语句：`form.submit()`，注意，如果form内有包含属性值`name=submit`的节点，将会抛出异常，所以注意捕获异常。
  * 在form节点的子节点内寻找所有button节点，全部执行一次`elementHandle.click()`方法。因为我们之前已经重定义并锁定了表单重置函数，所以不用担心会清空表单。
这样，绝大部分表单我们都能触发了。
    /**
    点击按钮 type=submit
    */
    func (tab *Tab) clickSubmit() {
        defer tab.formSubmitWG.Done()
        // 首先点击按钮 type=submit
        ctx := tab.GetExecutor()
        // 获取所有的form节点 直接执行submit
        formNodes, formErr := tab.GetNodeIDs(`form`)
        if formErr != nil || len(formNodes) == 0 {
            logger.Logger.Debug("clickSubmit: get form element err")
            if formErr != nil {
                logger.Logger.Debug(formErr)
            }
            return
        }
        tCtx1, cancel1 := context.WithTimeout(ctx, time.Second*2)
        defer cancel1()
        _ = chromedp.Submit(formNodes, chromedp.ByNodeID).Do(tCtx1)
        // 获取所有的input标签
        inputNodes, inputErr := tab.GetNodeIDs(`form input[type=submit]`)
        if inputErr != nil || len(inputNodes) == 0 {
            logger.Logger.Debug("clickSubmit: get form input element err")
            if inputErr != nil {
                logger.Logger.Debug(inputErr)
            }
            return
        }
        tCtx2, cancel2 := context.WithTimeout(ctx, time.Second*2)
        defer cancel2()
        _ = chromedp.Click(inputNodes, chromedp.ByNodeID).Do(tCtx2)
    }
    /**
    click all button
    */
    func (tab *Tab) clickAllButton() {
        defer tab.formSubmitWG.Done()
        // 获取所有的form中的button节点
        ctx := tab.GetExecutor()
        // 获取所有的button标签
        btnNodeIDs, bErr := tab.GetNodeIDs(`form button`)
        if bErr != nil || len(btnNodeIDs) == 0 {
            logger.Logger.Debug("clickAllButton: get form button element err")
            if bErr != nil {
                logger.Logger.Debug(bErr)
            }
            return
        }
        tCtx, cancel1 := context.WithTimeout(ctx, time.Second*2)
        defer cancel1()
        _ = chromedp.Click(btnNodeIDs, chromedp.ByNodeID).Do(tCtx)
        // 使用JS的click方法进行点击
        var btnNodes []*cdp.Node
        tCtx2, cancel2 := context.WithTimeout(ctx, time.Second*2)
        defer cancel2()
        err := chromedp.Nodes(btnNodeIDs, &btnNodes, chromedp.ByNodeID).Do(tCtx2)
        if err != nil {
            return
        }
        for _, node := range btnNodes {
            _ = tab.EvaluateWithNode(js.FormNodeClickJS, node)
        }
    }
### 事件触发
1.对JavaScript协议的内联事件触发，执行以下js
    (async function click_all_a_tag_javascript(){
        let nodeListHref = document.querySelectorAll("[href]");
        nodeListHref = window.randArr(nodeListHref);
        for (let node of nodeListHref) {
            let attrValue = node.getAttribute("href");
            if (attrValue.toLocaleLowerCase().startsWith("javascript:")) {
                await window.sleep(%f);
                try {
                    eval(attrValue.substring(11));
                }
                catch {}
            }
        }
        let nodeListSrc = document.querySelectorAll("[src]");
        nodeListSrc = window.randArr(nodeListSrc);
        for (let node of nodeListSrc) {
            let attrValue = node.getAttribute("src");
            if (attrValue.toLocaleLowerCase().startsWith("javascript:")) {
                await window.sleep(%f);
                try {
                    eval(attrValue.substring(11));
                }
                catch {}
            }
        }
    })()
2.对常见的内联事件触发
    (async function trigger_all_inline_event(){
        let eventNames = ["onabort", "onblur", "onchange", "onclick", "ondblclick", "onerror", "onfocus", "onkeydown", "onkeypress", "onkeyup", "onload", "onmousedown", "onmousemove", "onmouseout", "onmouseover", "onmouseup", "onreset", "onresize", "onselect", "onsubmit", "onunload"];
        for (let eventName of eventNames) {
            let event = eventName.replace("on", "");
            let nodeList = document.querySelectorAll("[" + eventName + "]");
            if (nodeList.length > 100) {
                nodeList = nodeList.slice(0, 100);
            }
            nodeList = window.randArr(nodeList);
            for (let node of nodeList) {
                await window.sleep(%f);
                let evt = document.createEvent('CustomEvent');
                evt.initCustomEvent(event, false, true, null);
                try {
                    node.dispatchEvent(evt);
                }
                catch {}
            }
        }
    })()
3.对之前hook的事件触发，对于某些节点，可能会存在子节点也响应的事件，为了性能考虑，可以将层数控制到三层，且对兄弟节点随机选择一个触发。简单画图说明：
    (async function trigger_all_dom2_custom_event() {
        function transmit_child(node, event, loop) {
            let _loop = loop + 1
            if (_loop > 4) {
                return;
            }
            if (node.nodeType === 1) {
                if (node.hasChildNodes) {
                    let index = parseInt(Math.random()*node.children.length,10);
                    try {
                        node.children[index].dispatchEvent(event);
                    } catch(e) {}
                    let max = node.children.length>5?5:node.children.length;
                    for (let count=0;count 200) {
            nodes = nodes.slice(0, 200);
        }
        nodes = window.randArr(nodes);
        for (let node of nodes) {
            let loop = 0;
            await window.sleep(%f);
            let event_name_list = node.getAttribute("sec_auto_dom2_event_flag").split("|");
            let event_name_set = new Set(event_name_list);
            event_name_list = [...event_name_set];
            for (let event_name of event_name_list) {
                let evt = document.createEvent('CustomEvent');
                evt.initCustomEvent(event_name, true, true, null);
                if (event_name == "click" || event_name == "focus" || event_name == "mouseover" || event_name == "select") {
                    transmit_child(node, evt, loop);
                }
                if ( (node.className && node.className.includes("close")) || (node.id && node.id.includes("close"))) {
                    continue;
                }
                try {
                    node.dispatchEvent(evt);
                } catch(e) {}
            }
        }
    })()
4.监控插入的节点，如果新增节点的href src含有JavaScript协议，则手动触发。这似乎会漏一些内联事件的触发。
    (function
    init_observer_sec_auto_b() { 
    window.dom_listener_func_sec_aut
    o = function (e) {  
    let node = e.target;  
    let nodeListSrc =
    node.querySelectorAll("[src]");  
    for (let each of
    nodeListSrc) {     
    if (each.src) {        
    window.addLink(each.src, "DOM");      
    let attrValue =
    each.getAttribute("src");       
    if
    (attrValue.toLocaleLowerCase().st
    artsWith("javascript:")) {        
    try {                
    eval(attrValue.substring(11));          
    }     
    catch {}     
    }    
    }   
    }  
    let nodeListHref = 
    node.querySelectorAll("[href]");    
    nodeListHref = 
    window.randArr(nodeListHref);  
    for (let each of 
    nodeListHref) {    
    if (each.href) {         
    window.addLink(each.href, "DOM");       
    let attrValue =
    each.getAttribute("href");       
    if
    (attrValue.toLocaleLowerCase().st
    artsWith("javascript:")) {        
    try {    
    eval(attrValue.substring(11));        
    }           
    catch {}       
    }      
    }   
    }
    };
    document.addEventListener('DOMNodeInserted',
    window.dom_listener_func_sec_auto, true); document.addEventListener('DOMSubtreeModified', 
    window.dom_listener_func_sec_auto, true); document.addEventListener('DOMNodeInsertedIntoDocument', window.dom_listener_func_sec_auto, true); 
    document.addEventListener('DOMAttrModified', 
    window.dom_listener_func_sec_auto, true);
    })()`
## 窗口阻塞处理
crawler处理了 alert()/prompt() 基础认证等等的阻塞。
    chromedp.ListenTarget(*tab.Ctx, func(v interface{}) {
            switch v := v.(type) {
            //case *network.EventLoadingFailed:
            //    logger.Logger.Error("EventLoadingFailed ", v.ErrorText)
            // 401 407 要求认证 此时会阻塞当前页面 需要处理解决
            case *fetch.EventAuthRequired:
                tab.WG.Add(1)
                go tab.HandleAuthRequired(v)
            // close Dialog
            case *page.EventJavascriptDialogOpening:
                tab.WG.Add(1)
                go tab.dismissDialog()
            }
    })
但是还有 打印 和 文件上传窗口可能阻塞窗口
打印事件可以hook函数，文件上传窗口可以用`Page.setInterceptFileChooserDialog`过滤。
## End
一些还可以优化的部分，表单填充可以识别参数长度`max-length`、`min-length`
从Crawlergo的设计和源码中能提取出很多东西来,
  * 基于网页结构的大量网页快速相似匹配，如果能集成到那些网络空间引擎中应该会很好玩，但似乎还没有一家做过。
有了原生的动态爬虫支持，对自动化漏扫也有了更多的想法，例如通过hook一些触发函数，污点检测来检测dom
xss，爬虫的原始请求包可以直接推到w13scan中。有了自动化爬虫，后续所有流量都可以存储一份，直接用搜索语法来找到相同参数的页面进行poc测试等等。。
作者的代码风格太不go了，想重写一份了。
## 参考
  * 
  * 
* * *