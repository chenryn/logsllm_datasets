# 引言
在main.php的171行附近,rips对`Scanner`类进行了实例化，并由此进入正式的分析流程.
# 内容简介
阅读rips关于token分析处理相关的源码,并分析对应的用途及处理逻辑.
# Scanner类
首先是调用`Scanner`类的构造函数
    $scan = new Scanner($file_scanning, $scan_functions, $info_functions, $source_functions);
各参数说明如下:
    $file_scanning:待扫描文件的文件名
    $scan_functions:待扫描的函数类型，由 main.php 中 $_POST['vector'] 的值决定
    $info_functions:由 main.php 中 Info::$F_INTEREST 而来,是一个已定义的函数名数组
    $source_functions:由 main.php 中 Sources::$F_OTHER_INPUT 而来,是一个已定义的函数名数组
## Scanner类构造函数分析
Scanner构造函数定义如下:
    function __construct($file_name, $scan_functions, $info_functions, $source_functions)
首先是大量的变量初始赋值:
    //直接传参获取的参数
            $this->file_name = $file_name; 
            $this->scan_functions = $scan_functions; 
            $this->info_functions = $info_functions; 
            $this->source_functions = $source_functions; 
            //......
其中夹杂着`Analyzer`类的初始化,用于获取php的`include_path`配置
    $this->include_paths = Analyzer::get_ini_paths(ini_get("include_path"));
紧接着便是根据文件生成token信息
    $tokenizer = new Tokenizer($this->file_pointer);
    $this->tokens = $tokenizer->tokenize(implode('',$this->lines_pointer));
    unset($tokenizer);
在讲这几行作用之前,要先了解`token_get_all`函数
## token_get_all()函数简单介绍
php手册说明如下
> token_get_all() 解析提供的 source 源码字符，然后使用 Zend 引擎的语法分析器获取源码中的 PHP 语言的解析器代号
函数定义
> array token_get_all ( string $source )
示例代码
token_get_all()处理语句
    token_get_all("");
处理结果
    Array
    (
        [0] => Array
            (
                [0] => 376
                [1] =>  1
            )
        [1] => Array
            (
                [0] => 319
                [1] => echo
                [2] => 1
            )
        [2] => Array
            (
                [0] => 379
                [1] =>
                [2] => 1
            )
        [3] => Array
            (
                [0] => 308
                [1] => 123
                [2] => 1
            )
        [4] => ;
        [5] => Array
            (
                [0] => 378
                [1] => ?>
                [2] => 1
            )
    )
可以看到,代码被分割成了五段,其中除了第四段之外,每一段都分为三段.
我们设`$token=token_get_all(....)`,那么`$token[0]`便对应着
    Array
            (
                [0] => 376
                [1] =>  1
            )
则`$token[0][1]`对应` 376  // token索引
                [1] =>  1  // 行号
            )
我们可以使用token_name获得索引所对应的字面常量
    echo token_name(376);
    //result => T_OPEN_TAG
    echo token_name(319);
    //result => T_ECHO
    echo token_name(308);
    //result => T_LNUMBER
    echo token_name(378)
    //result => T_CLOSE_TAG
以上便是对token_get_all函数大致介绍
## Scanner类中token信息生成分析
回到生成`token`信息的这几句
    $tokenizer = new Tokenizer($this->file_pointer);
    $this->tokens = $tokenizer->tokenize(implode('',$this->lines_pointer));
    unset($tokenizer);
    ```php
    function __construct($filename){
        $this->filename = $filename;
    }
接下来调用`tokenize`函数,跟进
    public function tokenize($code){
        $this->tokens = token_get_all($code);           
        $this->prepare_tokens();
        $this->array_reconstruct_tokens();
        $this->fix_tokens();    
        $this->fix_ternary();
        #die(print_r($this->tokens));
        return $this->tokens;
    }
可以看出在`tokenize`调用了多个token分析相关的函数,完成token分析准备、重构等工作
### prepare_token()函数分析
跟进`$this->prepare_tokens()`
    function prepare_tokens()
    {   
        for($i=0, $max=count($this->tokens); $itokens[$i]) ) 
            {
                if( in_array($this->tokens[$i][0], Tokens::$T_IGNORE) )
                    unset($this->tokens[$i]);
                else if( $this->tokens[$i][0] === T_CLOSE_TAG )
                    $this->tokens[$i] = ';';    
                else if( $this->tokens[$i][0] === T_OPEN_TAG_WITH_ECHO )
                    $this->tokens[$i][1] = 'echo';
            } 
            else if($this->tokens[$i] === '@') 
            {
                unset($this->tokens[$i]);
            }   
            else if( $this->tokens[$i] === '{'
            && isset($this->tokens[$i-1]) && ((is_array($this->tokens[$i-1]) && $this->tokens[$i-1][0] === T_VARIABLE)
            || $this->tokens[$i-1] === ']') )
            {
                $this->tokens[$i] = '[';
                $f=1;
                while($this->tokens[$i+$f] !== '}')
                {
                    $f++;
                    if(!isset($this->tokens[$i+$f]))
                    {
                        addError('Could not find closing brace of '.$this->tokens[$i-1][1].'{}.', array_slice($this->tokens, $i-1, 2), $this->tokens[$i-1][2], $this->filename);
                        break;  
                    }
                }
                $this->tokens[$i+$f] = ']';
            }   
        }
        // rearranged key index of tokens
        $this->tokens = array_values($this->tokens);
    }
在`prepare_token`函数中,大体上是由一个`for`循环与`return`语句组成,`for`循环为`prepare_token`的主要功能
首先对每个`token`判断是否为数组,这一判断的依据我们在上面已经提到,随后进入`in_array`,在第一个`in_array`中,紧接着是第二个`in_array`,这一步的主要作用为,通过`token索引`来判断是否为需要忽略的`token`,若为需要忽略token,则`unset`
与第二个`in_array`处于同一判断级别的条件为判断是否为php的开始(` 去除无意义的符号,统一数组格式为`$array[xxx]`格式
### array_reconstruct_tokens函数分析
在开始这里的分析前,我们先观察数组变量的`token`结构,php代码:
        array (size=3)
          0 => int 376
          1 => string ' int 1
      1 => 
        array (size=3)
          0 => int 379
          1 => string '
    ' (length=1)
          2 => int 2
      2 => 
        array (size=3)
          0 => int 312
          1 => string '$array' (length=6)
          2 => int 3
      3 => 
        array (size=3)
          0 => int 379
          1 => string ' ' (length=1)
          2 => int 3
      4 => string '=' (length=1)
      5 => 
        array (size=3)
          0 => int 379
          1 => string ' ' (length=1)
          2 => int 3
      6 => 
        array (size=3)
          0 => int 366
          1 => string 'array' (length=5)
          2 => int 3
      7 => string '(' (length=1)
      8 => string ')' (length=1)
      9 => string ';' (length=1)
      10 => 
        array (size=3)
          0 => int 379
          1 => string '
    ' (length=1)
          2 => int 3
      11 => 
        array (size=3)
          0 => int 312
          1 => string '$array' (length=6)
          2 => int 4
      12 => string '[' (length=1)
      13 => 
        array (size=3)
          0 => int 308
          1 => string '0' (length=1)
          2 => int 4
      14 => string ']' (length=1)
      15 => 
        array (size=3)
          0 => int 379
          1 => string ' ' (length=1)
          2 => int 4
      16 => string '=' (length=1)
      17 => 
        array (size=3)
          0 => int 379
          1 => string ' ' (length=1)
          2 => int 4
      18 => string '[' (length=1)
      19 => 
        array (size=3)
          0 => int 308
          1 => string '1' (length=1)
          2 => int 4
      20 => string ']' (length=1)
      21 => string ';' (length=1)
      22 => 
        array (size=3)
          0 => int 379
          1 => string '
    ' (length=1)
          2 => int 4
      23 => 
        array (size=3)
          0 => int 312
          1 => string '$array' (length=6)
          2 => int 5
      24 => string '[' (length=1)
      25 => 
        array (size=3)
          0 => int 318
          1 => string '"meizj"' (length=7)
          2 => int 5
      26 => string ']' (length=1)
      27 => 
        array (size=3)
          0 => int 379
          1 => string ' ' (length=1)
          2 => int 5
      28 => string '=' (length=1)
      29 => 
        array (size=3)
          0 => int 379
          1 => string ' ' (length=1)
          2 => int 5
      30 => string '[' (length=1)
      31 => 
        array (size=3)
          0 => int 318
          1 => string '"mei"' (length=5)
          2 => int 5
      32 => string ']' (length=1)
      33 => string ';' (length=1)
      34 => 
        array (size=3)
          0 => int 379
          1 => string '
    ' (length=3)
          2 => int 5
从第13行开始,出现的token索引为:
> 308 379 312 318
分别对应的`token`信息为:
> T_LNUMBER:整型  
>  T_WHITESPACE:空格  
>  T_VARIABLE:变量  