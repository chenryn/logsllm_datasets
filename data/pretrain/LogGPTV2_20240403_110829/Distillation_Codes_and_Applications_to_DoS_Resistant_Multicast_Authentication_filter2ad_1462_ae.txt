The remaining question is the value of |r|. If |r| is small,
adversaries can launch long running attacks which iter-
ate over all values of r and hash 2k random values for
each hr(·). We can bound the effectiveness of long run-
ning attacks by using a long per stream salt disseminated
to receivers immediately before transmission, but we still
must be concerned with long running attacks over the life-
time of the stream. Iterating over all possible values of r
requires about O(2|r|+k−log(n)) work to achieve a non-
negligible success probability, but a birthday attack can
reduce this slightly. By the birthday paradox, if the ad-
|r|
versary hashes 2k−log(n) random values for 2
2 values of
|r|
r, then the adversary will see a collision after 2
2 blocks
with non-negligible probability. For n = 128 and k = 40,
choosing the |r| = 64 bits requires roughly 2 65 opera-
tions for an adversary to be successful after 2 32 legitimate
blocks have been sent.
We stress again this optimization has no effect on packet
authenticity. The authentication mechanism is unchanged;
hash outputs in the authentication string are 80 bits and
signed by a full strength digital signature. If an adversary
can delay packets more than d seconds or apply massive
computing power to ﬁnd a collision in the Merkle tree in
less than d seconds, she can only cause denial of service
and cannot violate authenticity.
Overhead reduction The overhead savings of using a
salted hash function construction in the Merkle tree is sub-
stantial. Using an unsalted hash function with an 80 bit
output results in Merkle hash tree veriﬁcation sequence
lengths of 10·log(n) bytes. Using the salted hash function
with a 40 bit output and a 64 bit salt value yields veriﬁca-
tion sequences of length 5· log(n) bytes and an additional
8 bytes for the salt. This provides comparable security for
precomputation attacks and saves (5 · log(n) − 8) bytes
per symbol. We show the overhead savings of salting with
UOWHFs in Figure 6.
5. Implementation and Measurements
We implemented PRABS and measured its perfor-
mance. Our goal was to build a multicast authentication
protocol that could efﬁciently operate even when an adver-
sary sends 10 times as much trafﬁc as the original stream.
The protocol and test harness were implemented in
2,300 lines of C++ code. The sending and receiving ma-
chines each had a 2.4 GHz Pentium 4 processor and 1GB
of RAM. Both machines were running Linux 2.4 kernels
80 bit hash
40 bit hash
140
130
120
110
100
90
80
70
60
s
e
t
y
b
n
i
d
a
e
h
r
e
v
o
t
e
k
c
a
P
4
8
16
32
64
128
256
512
1024
Block size in packets
Figure 6. PRABS packet overhead.
n + log(n) · k
This graph shows the effect of block size on packet overhead
in PRABS using an (n, n
2 ) distillation code. The total packet
8 + |r| bytes, with a
overhead is (10 · n + |G|) · 2
k bit hash output in the Merkle tree, |r| byte salt, and |G| byte
signature. The plot is log scale with |r| = 8 and |G| = 128. We
show the savings of salting and 40 bit hash outputs in the Merkle
tree vs. no salting and 80 bit outputs. For smaller block sizes, the
erasure encoding dominates the overhead, but becomes small as
n grows. For larger n, the witness information for each symbol
dominates.
and gcc 2.95. They are connected by a 100 Mb/s low-
latency switched network. We relied on the OpenSSL
library[1] for cryptographic functions and a Rizzo’s era-
sure code library[31]. We used RSA-1024 for the TAG(·)
and VALIDATE(·) algorithms. We used the SHA1 crypto-
graphic hash function with 40 bit outputs (Section 4.6) for
the Merkle tree and 80 bit outputs for the authentication
string.
The server sent a stream of data packets at a variety of
rates and attack factors. We measured the receiver load
when receiving two streams: 1Mb per second and 4Mb
per second. Our PRABS stream used 128 packet blocks,
where each packet had a 1024 byte data payload. For
each stream, we looked at attack factors between 0 and
10. With attack factor 10 against the 4Mb/s stream, the at-
tacker injects 40Mb/s of attack trafﬁc. Recall that the ad-
versary only needs to inject 64 packets to induce a decode
operation; by injecting 72 packets, the adversary ensures
that 64 packets will arrive at the receiver and can cause the
receiver to process 18 times as many malicious blocks as
legitimate blocks.
Our tests measure the performance of the client under
the worst case. For example, reconstruction data with a
systemic erasure code is much slower when using the par-
ity packets (packets 64-127). Our adversary induces a loss
)
%
(
n
o
i
t
a
z
i
l
i
t
U
r
o
s
s
e
c
o
r
P
i
r
e
v
e
c
e
R
20
18
16
14
12
10
8
6
4
2
0
0
    Attack Period
Attack Factor: 10x 
20
18
16
14
12
10
8
6
4
2
)
%
(
n
o
i
t
a
z
i
l
i
t
U
r
o
s
s
e
c
o
r
P
i
r
e
v
e
c
e
R
5
10
15
Time (s)
20
25
0
0
1
2
3
4
5
6
Attack Factor
7
8
9
10
(a) Processor utilization measured once per second to the nearest
percent at the receiver while receiving a 4Mb per second stream.
During the attack phase, the adversary sends a 10 times as much
malicious trafﬁc as legitimate trafﬁc. This corresponds to 18 times
as many malicious blocks of trafﬁc. The receiver’s processor utiliza-
tion increases during this phase, but remains below 15%. Outside of
the attack phase, authenticating the stream consumes less than 2%
of the CPU.
(b) This graph illustrates the relationship between processor uti-
lization and the attack factor. Recall that the attack factor is
the bandwidth multiplier of malicious packets that the adversary
injects. The processor utilization exhibits a linear relationship
with respect to the attack factor. Each data point is an average
from 3 separate runs.
Figure 7. Processor utilization while running PRABS.
of 48 legitimate non-parity packets to force the receiver
reconstruct its data using mostly the parity packets. Like-
wise, the adversary chooses to inject parity packets as well
to increase the receiver’s load using the strong pollution
attack detailed in Section 3.4.3.
Our ﬁrst test measured the processor load on the client
as it received a music ﬁle. The attacker then began an
injection attack on an existing stream with an attack fac-
tor of 10. We measured the receiver’s process utilization
once per second to the nearest percent. The results for the
4Mb/s stream are presented in Figure 7(a). With no at-
tack, the receiver uses only a small fraction of the CPU.
Usually it was measured at 0%, and at all times it was
under 2%. Under heavy attack, the receiver’s CPU load
increases to 10%, but always remains below 15%. For a
1Mb/s stream, the receiver’s CPU averaged 3.6% during
a factor 10 attack. For both streams, the receiver success-
fully authenticated all received packets.
The second test measured the processor utilization as a
function of the attack factor. We display the results for the
4Mb/s stream in Figure 7(b). The graph highlights the lin-
ear relationship between the processor utilization and the
attack factor, conﬁrming our analysis from Section 3.4.3.
6 Related Work
TESLA is a broadcast authentication scheme with many
attractive guarantees: authenticity, low overhead, robust-
ness to loss, and DoS resistance [25, 27]. However,
TESLA requires time synchronization between the sender
and the receiver. For each block, the sender picks the next
key in a one-way key chain and appends a message au-
thentication code [5] to each packet in that block. The
sender later publishes the key. Receivers validate the key
using the one-way chain and only accept packets authen-
ticated with that key that arrive before it was disclosed.
Previous work has addressed erasure symbol corrup-
tion in the context of distributed storage. Krawczyk pro-
posed distributed ﬁngerprints, an application of error cor-
rection codes (ECC) in conjunction with erasure codes to
detect altered symbols [14]. However, as discussed in
Section 3.1, ECC is also vulnerable to pollution attacks.
Distributed ﬁngerprints work well when invalid symbols
are guaranteed to replace the valid symbols, but not when
there is pollution.
Weatherspoon et al. proposed a scheme similar to ours
for detecting corrupted symbols in the distributed archival
system of Oceanstore [34]. However, similar to dis-
tributed ﬁngerprints, they do not consider pollution at-
tacks where additional invalid symbols are injected into
the decoding process.
7. Conclusion
Distillation codes enable systems to store or transmit
information that is robust against packet loss, pollution
attacks, and modiﬁcation of transmitted packets. We
demonstrated the potential of distillation codes by intro-
ducing PRABS, an new DoS-resistant multicast authenti-
cation protocol. PRABS is secure against a wide variety of
pollution attacks without requiring signiﬁcant overhead,
either in the space required to represent symbols or in the
computational effort required to encode and decode mes-
sages. Distillation codes are fast, general, and secure, but
more important, they are designed to face realistic, hostile
threat models.
We hypothesize that distillation codes are applicable
in a variety of contexts. Consider the example of a dis-
tributed Internet-wide ﬁle service. A user wishes to store
a ﬁle across multiple untrusted repositories and hopes to
recover his ﬁle at a later date. Assume that the user can
not trust any single machine to permanently store the en-
tire ﬁle or metadata about the ﬁle. One approach is to
divide the original ﬁle into shares, and then sign each of
the shares as they are distributed to different machines. By
producing shares that store redundant information (along
the lines of secret sharing, the information dispersal algo-
rithm, or erasure codes), we can check to ensure that none
of the shares have been tampered with. However, if share
reconstruction takes place on a heavily loaded ﬁle server
that is simultaneously reconstructing many different ﬁles,
this may yield an unreasonable load. In contrast, we can
imagine a system that signs the original ﬁle, and then uses
distillation codes to rapidly reconstruct the ﬁle. While fur-
ther investigation is required, we hypothesize that distilla-
tion codes may yield good performance in this situation.
Similarly, other cases where data must be segregated and
then reconstructed may also be fertile ground for explor-
ing the potential of distillation codes.
Acknowledgements
This work was supported in part by research grants and
contracts from the National Science Foundation, the De-
fense Advanced Research Projects Agency, the US Postal
Service, the Army Research Ofﬁce, the Center for Com-
puter and Communications Security at Carnegie Mellon,
and gifts from Bosch, Intel, KDD, and Honda. Michael
Luby helped motivate this work and guided us in its early
stages. David Wagner provided extensive guidance on our
proofs of security and Rob Johnson helped with our se-
curity analysis. We thank the anonymous reviewers and
Diana Smetters for helpful comments which signiﬁcantly
improved the quality of our paper. The views and conclu-
sions contained here are those of the authors and should
not be interpreted as necessarily representing the ofﬁcial
policies or endorsements, either express or implied, of the
US Government or any of its agencies.
References
[1] OpenSSL. http://www.openssl.org/.
[2] D. Adkins, K. Lakshminarayanan, A. Perrig, and I. Sto-
ica. Taming IP packet ﬂooding attacks. In Proceedings of
Workshop on Hot Topics in Networks (HotNets-II), Nov.
2003.
[3] T. Anderson, T. Roscoe, and D. Wetherall. Preventing In-
ternet denial-of-service with capabilities. In Proceedings
of Workshop on Hot Topics in Networks (HotNets-II), Nov.
2003.
[4] N. Baric and B. Pﬁtzmann. Collision-free accumulators
and fail-stop signature schemes without trees. In Advances
in Cryptology – EUROCRYPT ’97, volume 1233 of Lec-
ture Notes in Computer Science, pages 480–494, 1997.
[5] M. Bellare, R. Canetti, and H. Krawczyk. Keying hash