在之前的介绍中，我们知道镜像是 Docker 的三大组件之一。
Docker 运行容器前需要本地存在对应的镜像，如果镜像不存在本地，Docker 会从
镜像仓库下载（默认是 Docker Hub 公共注册服务器中的仓库）。
本章将介绍更多关于镜像的内容，包括：
从仓库获取镜像；
管理本地主机上的镜像；
介绍镜像实现的基本原理。
43
获取镜像
获取镜像
之前提到过，Docker Hub 上有大量的高质量的镜像可以用，这里我们就说一下怎
么获取这些镜像并运行。
从 Docker Registry 获取镜像的命令是 docker pull 。其命令格式为：
docker pull [选项] [Docker Registry地址]:
具体的选项可以通过 docker pull --help 命令看到，这里我们说一下镜像名称
的格式。
Docker Registry地址：地址的格式一般是 [:端口号] 。默认地址是
Docker Hub。
仓库名：如之前所说，这里的仓库名是两段式名称，既 / 。
对于 Docker Hub，如果不给出用户名，则默认为 library ，也就是官方镜
像。
比如：
$ docker pull ubuntu:14.04
14.04: Pulling from library/ubuntu
bf5d46315322: Pull complete
9f13e0ac480c: Pull complete
e8988b5b3097: Pull complete
40af181810e7: Pull complete
e6f7c7e5c03e: Pull complete
Digest: sha256:147913621d9cdea08853f6ba9116c2e27a3ceffecf3b49298
3ae97c3d643fbbe
Status: Downloaded newer image for ubuntu:14.04
上面的命令中没有给出 Docker Registry 地址，因此将会从 Docker Hub 获取镜
像。而镜像名称是 ubuntu:14.04 ，因此将会获取官方镜像 library/ubuntu
仓库中标签为 14.04 的镜像。
44
获取镜像
从下载过程中可以看到我们之前提及的分层存储的概念，镜像是由多层存储所构
成。下载也是一层层的去下载，并非单一文件。下载过程中给出了每一层的 ID 的
前 12 位。并且下载结束后，给出该镜像完整的 sha256 的摘要，以确保下载一
致性。
在实验上面命令的时候，你可能会发现，你所看到的层 ID 以及 sha256 的摘要和
这里的不一样。这是因为官方镜像是一直在维护的，有任何新的 bug，或者版本更
新，都会进行修复再以原来的标签发布，这样可以确保任何使用这个标签的用户可
以获得更安全、更稳定的镜像。
如果从 Docker Hub 下载镜像非常缓慢，可以参照后面的章节配置加速器。
运行
有了镜像后，我们就可以以这个镜像为基础启动一个容器来运行。以上面的
ubuntu:14.04 为例，如果我们打算启动里面的 bash 并且进行交互式操作的
话，可以执行下面的命令。
$ docker run -it --rm ubuntu:14.04 bash
root@e7009c6ce357:/# cat /etc/os-release
NAME="Ubuntu"
VERSION="14.04.5 LTS, Trusty Tahr"
ID=ubuntu
ID_LIKE=debian
PRETTY_NAME="Ubuntu 14.04.5 LTS"
VERSION_ID="14.04"
HOME_URL="http://www.ubuntu.com/"
SUPPORT_URL="http://help.ubuntu.com/"
BUG_REPORT_URL="http://bugs.launchpad.net/ubuntu/"
root@e7009c6ce357:/# exit
exit
$
docker run 就是运行容器的命令，具体格式我们会在后面的章节讲解，我们这
里简要的说明一下上面用到的参数。
-it ：这是两个参数，一个是 -i ：交互式操作，一个是 -t 终端。我们
这里打算进入 bash 执行一些命令并查看返回结果，因此我们需要交互式终
45
获取镜像
端。
--rm ：这个参数是说容器退出后随之将其删除。默认情况下，为了排障需
求，退出的容器并不会立即删除，除非手动 docker rm 。我们这里只是随便
执行个命令，看看结果，不需要排障和保留结果，因此使用 --rm 可以避免
浪费空间。
ubuntu:14.04 ：这是指用 ubuntu:14.04 镜像为基础来启动容器。
bash ：放在镜像名后的是命令，这里我们希望有个交互式 Shell，因此用的
是 bash 。
进入容器后，我们可以在 Shell 下操作，执行任何所需的命令。这里，我们执行了
cat /etc/os-release ，这是 Linux 常用的查看当前系统版本的命令，从返回的
结果可以看到容器内是 Ubuntu 14.04.5 LTS 系统。
最后我们通过 exit 退出了这个容器。
46
列出镜像
列出镜像
要想列出已经下载下来的镜像，可以使用 docker images 命令。
$ docker images
REPOSITORY TAG IMAGE ID CRE
ATED SIZE
redis latest 5f515359c7f8 5 d
ays ago 183 MB
nginx latest 05a60462f8ba 5 d
ays ago 181 MB
mongo 3.2 fe9198c04d62 5 d
ays ago 342 MB
  00285df0df87 5 d
ays ago 342 MB
ubuntu 16.04 f753707788c5 4 w
eeks ago 127 MB
ubuntu latest f753707788c5 4 w
eeks ago 127 MB
ubuntu 14.04 1e0c3dd64ccd 4 w
eeks ago 188 MB
列表包含了仓库名、标签、镜像 ID、创建时间以及所占用的空间。
其中仓库名、标签在之前的基础概念章节已经介绍过了。镜像 ID 则是镜像的唯一
标识，一个镜像可以对应多个标签。因此，在上面的例子中，我们可以看到
ubuntu:16.04 和 ubuntu:latest 拥有相同的 ID，因为它们对应的是同一个
镜像。
镜像体积
如果仔细观察，会注意到，这里标识的所占用空间和在 Docker Hub 上看到的镜像
大小不同。比如， ubuntu:16.04 镜像大小，在这里是 127 MB ，但是在
Docker Hub 显示的却是 50 MB 。这是因为 Docker Hub 中显示的体积是压缩后
的体积。在镜像下载和上传过程中镜像是保持着压缩状态的，因此 Docker Hub 所
47
列出镜像
显示的大小是网络传输中更关心的流量大小。而 docker images 显示的是镜像
下载到本地后，展开的大小，准确说，是展开后的各层所占空间的总和，因为镜像
到本地后，查看空间的时候，更关心的是本地磁盘空间占用的大小。
另外一个需要注意的问题是， docker images 列表中的镜像体积总和并非是所有
镜像实际硬盘消耗。由于 Docker 镜像是多层存储结构，并且可以继承、复用，因
此不同镜像可能会因为使用相同的基础镜像，从而拥有共同的层。由于 Docker 使
用 Union FS，相同的层只需要保存一份即可，因此实际镜像硬盘占用空间很可能
要比这个列表镜像大小的总和要小的多。
虚悬镜像
上面的镜像列表中，还可以看到一个特殊的镜像，这个镜像既没有仓库名，也没有
标签，均为  。：
  00285df0df87 5 d
ays ago 342 MB
这个镜像原本是有镜像名和标签的，原来为 mongo:3.2 ，随着官方镜像维护，发
布了新版本后，重新 docker pull mongo:3.2 时， mongo:3.2 这个镜像名被
转移到了新下载的镜像身上，而旧的镜像上的这个名称则被取消，从而成为了
 。除了 docker pull 可能导致这种情况， docker build 也同样可
以导致这种现象。由于新旧镜像同名，旧镜像名称被取消，从而出现仓库名、标签
均为  的镜像。这类无标签镜像也被称为 虚悬镜像(dangling image) ，可
以用下面的命令专门显示这类镜像：
$ docker images -f dangling=true
REPOSITORY TAG IMAGE ID CREA
TED SIZE
  00285df0df87 5 da
ys ago 342 MB
一般来说，虚悬镜像已经失去了存在的价值，是可以随意删除的，可以用下面的命
令删除。
$ docker rmi $(docker images -q -f dangling=true)
48
列出镜像
中间层镜像
为了加速镜像构建、重复利用资源，Docker 会利用 中间层镜像。所以在使用一段
时间后，可能会看到一些依赖的中间层镜像。默认的 docker images 列表中只
会显示顶层镜像，如果希望显示包括中间层镜像在内的所有镜像的话，需要加 -
a 参数。
$ docker images -a
这样会看到很多无标签的镜像，与之前的虚悬镜像不同，这些无标签的镜像很多都
是中间层镜像，是其它镜像所依赖的镜像。这些无标签镜像不应该删除，否则会导
致上层镜像因为依赖丢失而出错。实际上，这些镜像也没必要删除，因为之前说
过，相同的层只会存一遍，而这些镜像是别的镜像的依赖，因此并不会因为它们被
列出来而多存了一份，无论如何你也会需要它们。只要删除那些依赖它们的镜像
后，这些依赖的中间层镜像也会被连带删除。
列出部分镜像
不加任何参数的情况下， docker images 会列出所有顶级镜像，但是有时候我们
只希望列出部分镜像。 docker images 有好几个参数可以帮助做到这个事情。
根据仓库名列出镜像
$ docker images ubuntu
REPOSITORY TAG IMAGE ID CREA
TED SIZE
ubuntu 16.04 f753707788c5 4 we
eks ago 127 MB
ubuntu latest f753707788c5 4 we
eks ago 127 MB
ubuntu 14.04 1e0c3dd64ccd 4 we
eks ago 188 MB
列出特定的某个镜像，也就是说指定仓库名和标签
49
列出镜像
$ docker images ubuntu:16.04
REPOSITORY TAG IMAGE ID CREA
TED SIZE
ubuntu 16.04 f753707788c5 4 we
eks ago 127 MB
除此以外， docker images 还支持强大的过滤器参数 --filter ，或者简写 -
f 。之前我们已经看到了使用过滤器来列出虚悬镜像的用法，它还有更多的用法。
比如，我们希望看到在 mongo:3.2 之后建立的镜像，可以用下面的命令：
$ docker images -f since=mongo:3.2
REPOSITORY TAG IMAGE ID CREA
TED SIZE
redis latest 5f515359c7f8 5 da
ys ago 183 MB
nginx latest 05a60462f8ba 5 da
ys ago 181 MB
想查看某个位置之前的镜像也可以，只需要把 since 换成 before 即可。
此外，如果镜像构建时，定义了 LABEL ，还可以通过 LABEL 来过滤。
$ docker images -f label=com.example.version=0.1
...
以特定格式显示
默认情况下， docker images 会输出一个完整的表格，但是我们并非所有时候都
会需要这些内容。比如，刚才删除虚悬镜像的时候，我们需要利用 docker
images 把所有的虚悬镜像的 ID 列出来，然后才可以交给 docker rmi 命令作
为参数来删除指定的这些镜像，这个时候就用到了 -q 参数。
50
列出镜像
$ docker images -q
5f515359c7f8
05a60462f8ba
fe9198c04d62
00285df0df87
f753707788c5
f753707788c5
1e0c3dd64ccd
--filter 配合 -q 产生出指定范围的 ID 列表，然后送给另一个 docker 命
令作为参数，从而针对这组实体成批的进行某种操作的做法在 Docker 命令行使用
过程中非常常见，不仅仅是镜像，将来我们会在各个命令中看到这类搭配以完成很
强大的功能。因此每次在文档看到过滤器后，可以多注意一下它们的用法。
另外一些时候，我们可能只是对表格的结构不满意，希望自己组织列；或者不希望
有标题，这样方便其它程序解析结果等，这就用到了 Go 的模板语法。
比如，下面的命令会直接列出镜像结果，并且只包含镜像ID和仓库名：
$ docker images --format "{{.ID}}: {{.Repository}}"
5f515359c7f8: redis
05a60462f8ba: nginx
fe9198c04d62: mongo
00285df0df87: 
f753707788c5: ubuntu
f753707788c5: ubuntu
1e0c3dd64ccd: ubuntu
或者打算以表格等距显示，并且有标题行，和默认一样，不过自己定义列：
51
列出镜像
$ docker images --format "table {{.ID}}\t{{.Repository}}\t{{.Tag
}}"
IMAGE ID REPOSITORY TAG
5f515359c7f8 redis latest
05a60462f8ba nginx latest
fe9198c04d62 mongo 3.2
00285df0df87  
f753707788c5 ubuntu 16.04
f753707788c5 ubuntu latest
1e0c3dd64ccd ubuntu 14.04
52
利用 commit 理解镜像构成
利用 commit 理解镜像构成
镜像是容器的基础，每次执行 docker run 的时候都会指定哪个镜像作为容器运
行的基础。在之前的例子中，我们所使用的都是来自于 Docker Hub 的镜像。直接
使用这些镜像是可以满足一定的需求，而当这些镜像无法直接满足需求时，我们就
需要定制这些镜像。接下来的几节就将讲解如何定制镜像。
回顾一下之前我们学到的知识，镜像是多层存储，每一层是在前一层的基础上进行
的修改；而容器同样也是多层存储，是在以镜像为基础层，在其基础上加一层作为
容器运行时的存储层。
现在让我们以定制一个 Web 服务器为例子，来讲解镜像是如何构建的。
docker run --name webserver -d -p 80:80 nginx
这条命令会用 nginx 镜像启动一个容器，命名为 webserver ，并且映射了 80
端口，这样我们可以用浏览器去访问这个 nginx 服务器。
如果是在 Linux 本机运行的 Docker，或者如果使用的是 Docker for Mac、Docker
for Windows，那么可以直接访问：http://localhost；如果使用的是 Docker
Toolbox，或者是在虚拟机、云服务器上安装的 Docker，则需要将 localhost 换
为虚拟机地址或者实际云服务器地址。
直接用浏览器访问的话，我们会看到默认的 Nginx 欢迎页面。
53
利用 commit 理解镜像构成
现在，假设我们非常不喜欢这个欢迎页面，我们希望改成欢迎 Docker 的文字，我
们可以使用 docker exec 命令进入容器，修改其内容。
$ docker exec -it webserver bash
root@3729b97e8226:/# echo 'Hello, Docker!' > /usr/share
/nginx/html/index.html
root@3729b97e8226:/# exit
exit
我们以交互式终端方式进入 webserver 容器，并执行了 bash 命令，也就是获
得一个可操作的 Shell。
然后，我们用 Hello, Docker! 覆盖了
/usr/share/nginx/html/index.html 的内容。
现在我们再刷新浏览器的话，会发现内容被改变了。
我们修改了容器的文件，也就是改动了容器的存储层。我们可以通过 docker
diff 命令看到具体的改动。