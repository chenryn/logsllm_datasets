④Web 服务描述语言 WSDL(Web Services Description Language)
用来描述如何访问具体的接口。
②统一描述 UDDI(Universal Description, Discovery and Integration)
用来管理、分发、查询 web service。
③XML(Extensible Markup Language)，不说了。
④HTTP，不说了。
C.评估软件安全的有效性
1.认证与认可
前面讲过很多次了。
认证是指技术评估或评价信息系统在它们的操作环境中的安全合规性：用户和管理者的背
书，系统/应用符合他们的功能需求，并且在大多数情况下，背书的独立的验证。
认可或授权过程审查认证(或评价)信息，并授予官方的授权将信息系统投入操作使用：它
是高级管理人员的正式批准。
2.风险管理框架
传统的认证和认可的过程已经转变为一个六个步骤的风险管理框架（RMF）。
风险管理过程改变了传统 C&A 的焦点，从一个静态的，过程性的活动变为更加动态的方法，
提供了更加高效地管理信息系统相关的安全风险的能力，在一个高度多样化的环境：复杂和尖
端的网络威胁，日益增加的系统漏洞，和快速变化的任务。
C.1 审计和日志的变更
1.日志
日志是己经发生在计算机系统上的行为和事件的记录。
*提供了一个清晰的视图：谁拥有一个进程，发起了什么行为，什么时候发起的，该行为
在哪儿发生的，以及为什么进程执行。
*主记录是系统和网络的活动的保管者。
*对抓住解释，发生了什么以及为什么在事件中安全控制失效了的相关的信息非常有帮助。
2.审计
为了企业的最佳利益，应有适当的审计策略存在，有效地以日志的形式收集关于网络和系
统中发生的关键事件的信息，并适当的管理它们。这些信息、是关于事件的，以日志的形式获
得，将使所有感兴趣的各方，例如高层管理人员以及网络和系统管理员，去了解和评估：
*建立基线的需要
—260—
*不同服务器和系统的性能
*应用的功能和操作问题
*有效的检测入侵企图
*取证分析
*遵守各项法律法规
3.信息的完整性，准确性，和审计
*信息的完整性：应该使用流程来比较或调和处理了什么和什么应该被处理。例如，控制
可以比较总和或检查序列号。这将检查是否对正确的数据执行了正确的操作。
*信息准确性：为了检查输入的准确性，数据确认和验证检查应纳入相应的应用。字符检
查比较输入的字符串和期待的字符类型，例如数字或字母。有时也称为合理性检查。范围检查
验证输入的数据与预定义的上限和下限。关系检查比较输入数据与主记录文件中的数据。合理
性检查比较输入数据与一个预期的标准，合理性检查的另一种形式。交易限额检查输入数据与
行政上对特定交易设定的最高限额。
*信息审计很重要，因为漏洞存在于软件的生命周期中；攻击会就有发生的可能性。审计
过程协助检测任何异常行为。一个安全信息系统必须提供一个授权人员，有能力审计任何行为，
其可能潜在地引起访问，破坏，或以某种方式影响敏感信息的发布。
审计的水平和类型取决于己安装软件的审计要求和数据的敏感性，其在系统中处理和存
储。关键因素是审计数据提供了发生了什么类型的未授权活动和谁或什么进程执行了这个活动
的信息。
C.2 风险分析与缓解
1.基础知识
风险的内容还是看第一域吧。
风险：具有发生的可能性并对发生风险的项目有一个正面或负面的影响的一个事件。一个
风险可能有一个或多个原因，并且如果发生时，造成一个或多个影响。
风险管理：是一个持续的过程，贯穿项目的生命周期。它包括风险管理规划，识别，分析，
监控，和控制的过程。在任何时候一旦新的风险被识别，很多的以上这些过程在项目生命周期
中会被更新。风险管理的目标是减少对项目负面的事件发生的可能性和影响。另一方面，任何
可能有正面影啊的应该加以利用。
风险识别：一般都是在项目之前启动的，在项目的生命周期中，随着项目成熟风险的数目
也在增加。当一个风险被识别后，它将首先被评沽发生的可能性，对进度，范围，成本，和质
量影 An 的程度，然后进行优先级排序。
优先级：风险事件可能影啊一个或多个影响类型。风险优先级的分配基于：
*发生的可能性
*影响类别的数量
*它们对项目影响的程度(高，中，低)
记录风险：所有识别的风险应该进入一个风险登记册并作为风险声明的一部分记录。作为
记录风险的一部分，另外两个重要项需要解决：
—261—
*第一是可用于减轻事件发生的可能性的减缓步骤
*第二是应急计划，在事件发生前或发生时应该采取的一系列的活动
减缓和应急计划：减缓行动经常需要成本。有时减缓风险的成本可能超过假定风险和产生
的后果。在决定建立一个应急计划前，针对减缓策略的成本评估每个风险的可能性和影响是非
常重要的。风险发生前实施的应急计划是防范活动，旨在降低影响或完全消除风险。风险发生
后实施的应急计划通常只能减轻影响。
2.最佳实践
这些通用的最佳实践包括以下：
①使用变更控制过程。
②阅读所有相关文档。
③测试。服务包和补丁程序在部署到生产之前，必须在有代表性的非生产环境进行测试。
④有一个工作备份和生产停机时间计划。
⑤必须有回退计划。允许系统和企业返回到失败的实施之前的状态。
⑥预警服务台和关键用户组。
⑦首先瞄准非关键服务器：如果所有的测试在实验室环境中都成功，先从非关键服务器开
始部署，如果可能的话，然后在服务包已经在生产环境运行 10-14 天后，再向主服务器部署。
3.风险管理工具
包括石川图（因果图），P-图，初步危害分析/预先危险分析(PHA)，失效模式与影响分析
(FMEA, Failure Modes and Effect Analysis)，故障模式、影响及危害性分析(FMECA)，危害
分析与关键控制点(HACCP)等等。
C.3 测试与验证
作为开发过程的一部分，在分发任何软件之前必须彻底测试它。
测试和验证是不同的，测试是发现问题；验证相关于审计，是确认问题被解决了。
1.三种测试方法：
①白盒测试：要检查一个程序的内部逻辑结构和一行行的代码，分析程序中潜在的错误。
②黑盒测试：从用户的角度提供输入场景并检查输出，只验功能不看代码。
③灰盒测试：灰盒测试结合了两种方法，是流行的软件验证方法。
2.两种类型测试：
①静态测试：分析源代码或编译后的应用程序，并运行它。一般用工具软件查缓冲区溢出。
②动态测试：在运行环境中评估软件，是正式部署前的唯一、必然测试手段。
另一种分类方法：
①盲目/单盲测试：评估人员只能利用公开可用的数据，而网管人员将知道有这种测试。
②双盲测试/隐蔽评估：评估人员只能利用公开可用的数据，网管和安管不知道有测试。
双盲测试能够评估网络的安全级别以及员工的响应能力、日志监控和上报流程，从而更加现实
地说明了发起某种攻击的成功或失败几率。
3.软件功能测试的类型：
①单元测试(Unit testing)：验证受控环境中的单个组件的数据结构、逻辑以及边界条件。
—262—
②集成测试(Integration testing)：验证组件是否按照设计规范中那样协同工作。
③验收测试(Acceptance testing)：确保代码满足客户需求。
④回归测试(Regression testing)：系统变更后重新测试确保其功能性能以及安全达标。
4.软件安全测试的类型：
①模糊测试(Fuzzing testing)：发送复杂/随机的数据给软件来引起软件的错误，主要用
于识别缓存溢出、DOS、注入、验证错误以及其他可能导致软件死机、崩溃或发生各种错误。
②脆弱性扫描(Vulnerability scaning)：通过自动化工具检查程序的主要错误，如强类
型语言的错误、开发和配显错误、交易序列错误(transaction sequence faults )、映射出发
条件(mapping triggerconditions)等，通常在扫描完后需要手工进一步的核查。
③人工测试(Acceptance testing)：通过人员的经验和直觉来分析程序，通常使用计算机
技术来判断，测试人员能定位设计错误，如逻辑错误。包括渗透测试。
④动态分析(Dynamic analysis)：及时的分析正在运行的程序，一般是在静态分析之后，
程序的基本问题都被解决完后执行。
5.代码签名 code signing
代码签名是一种安全技术，可以用来确保代码完整性，确定谁开发了一段代码，并确定开
发者预期使用这段代码的目的。所有类型的代码都可以被签名，包括工具，应用，脚本，库，
插件，和其它“类代码”的数据。代码签名不是数字版权管理(DRM)或复制保护技术，它也不
能保证代码没有安全漏洞。代码签名有三个不同的目的，它可用于：
①完整性。确保一段代码没有被修改
②来源。鉴定代码来自特定的源(开发者或签名者)
③代码的用途。为了特定的目的，确定代码是否可信赖，例如，访问一个特定项
为了使签名代码能实现这些目的，一个代码的签名由三部分组成（考点）：
①一个印章/信封 seal，它是代码各个部分的校验和或哈希的集合，例如标识符，主可执
行文件，资源文件，等等。印章可用于检测对代码和应用标识符的修改。
②一个数字签名，它签名印章以保证它的完整性。签名包含了信息，可以被用来决定谁签
名了代码和是否签名是有效的。
③一个唯一的标识符，可以用于识别代码或代码属于哪一个组或类别。这个标识符可由签
名者明确地提供。(标识符+印章)=>签名，①+③=>②
6.回归和验收测试
只要开发者改变或修改他们的软件，即使一个很小的调整可能也会有意想不到的后果。
①回归测试（考点）
回归测试是指对现有的软件应用进行复核式检查，以确保之前的某些变更行为并没有破坏
其功能或安全性。执行回归测试时，主要考虑的是足够的覆盖范围和不会浪费时间。
②使用测试库
最有效的回归测试的方法是基于开发一个测试库，由标准测试用例组构成，它可以在任何
有程序的新版本构建时运行。建立一个测试库最困难的部分涉及到包含哪一个测试用例。很多
敏捷环境使用工作流的做法，例如 XP(极限编程)，RUP(统一软件开发过程)，或者 Scmm 使用
回归测试作为一个动态的，迭代的开发和部署计划的一个重要方面。
—263—
③验收测试
验收测试是执行的一个正式测试，以确定一个系统满足其验收标准且使用户可以决定是否
接受该系统。这在最初被称为功能测试，它不同于单元测试，通常在一个完整的系统上进行。
④敏捷开发环境中的验收测试
在敏捷软件开发中，验收测试/标准通常由业务用户创建并使用业务领域的语言表达。这
些是高层次的测试，以验证一个用户故事或故事集的完整性，它被在任何的冲刺/迭代的过程
中被“执行”。理想情况下，这些测试通过业务客户，业务分析员，测试员，和开发者合作创
建的。重要的是这些测试包括业务逻辑测试同时也包括 UI 验证元素。业务客户(产品所有者)
是这些测试的主要人员。当用户故事通过他们的验收标准后，业务所有者可以放心认为开发者
在朝着正确的方向前进。
D.评估采购软件的安全影响
当组织购买软件时，安全专业人员必须了解软件的合理配置以满足安全目标，还必须修复
安全漏洞。在 SaaS 环境下，大多数安全责任在供应商侧，但甲方的安全人员也要负责监控供
应商的安全，包括审计、评估、漏洞扫描和其他措施等。
1.软件保障(SWA)
根据美国国家安全系统委员会国家信息保障(IA)法案，CNSS 指令 4009 号，2010 年，4 月
26 日，69 页：“软件保障是对软件信心的水平，其没有漏洞，无论是故意设计到软件中还是
意外地在其生命周期中插入的，并且它以预期的方式工作。”SWA 是至关重要的，因为急剧增
加的业务和使命的风险是由于软件不能按预期执行并可以被利用引起的。为了确保业务运作和
关键基础设施中的关键资产的完整性，软件必须可靠和安全。
2.SwA 阶段
SwA 可以围绕着一个通用的采购过程的主要阶段组织。主要的阶段是：
规划—合同—监控和验收—后续
①计划/规划阶段 Planning
这个阶段开始于：需要确定采购的软件服务或产品，识别潜在的替代软件的方法，并确定
这些替代品相关的风险。
②招标/合同阶段 contracting
这个阶段包括三个主要的活动：*创建/发出邀约；*评估供应商；*落实谈判。
③监控和验收阶段 monitoring and acceptance
监控供应商的工作并根据合同接受最终交付的服务或产品。