### Interaction with Other Members' Photos and Videos
Users can interact with other members' photos and videos by commenting, adding notes, or marking them as favorites.

### Direct Delegation
Figure A-1. Direct Delegation. The resource owner delegates privileges directly to the client application.
Snapfish can now access your Flickr account on your behalf using the delegated privileges. This model is called direct delegation, where the delegator directly grants a subset of their privileges to the delegate. The alternative model is indirect delegation, where the delegator first delegates to an intermediate delegate, which then delegates to another delegate. This is also known as brokered delegation (see Figure A-2).

### Appendix A: The Evolution of Identity Delegation

#### Example: Lucidchart and Google Drive
Suppose you have a Lucidchart account, a cloud-based design tool for creating various diagrams that integrates with Google Drive. From your Lucidchart account, you can publish completed diagrams to your Google Drive. To do this, Lucidchart needs permissions to access the Google Drive API on your behalf, and you must delegate the relevant permissions to Lucidchart.

If you want to print something from Lucidchart, it invokes the Snapfish printing API. Snapfish needs to access the diagrams stored in your Google Drive. Lucidchart must delegate a subset of the permissions you granted it to Snapfish. Even though you granted read/write permissions to Lucidchart, it only needs to delegate read permission to Snapfish to access your Google Drive and print the selected drawings.

### The Evolution of Identity Delegation
The modern history of identity delegation can be divided into two eras: pre-2006 and post-2006. Before 2006, credential sharing was the primary method of identity delegation. Twitter, SlideShare, and most web applications used credential sharing to access third-party APIs.

#### Pre-2006 Era
When you created a Twitter account before 2006, Twitter asked for your email credentials to access your address book and invite friends. Despite assurances that it did not store your login and password, Twitter could have accessed all your emails if it wanted to (see Figure A-3).

SlideShare, a cloud-based service for hosting and sharing slides, followed a similar approach. If you wanted to publish a slide deck from SlideShare to a Blogger blog, you had to provide your Blogger username and password. SlideShare could then use these credentials to modify or remove published posts (see Figure A-4).

Google Calendar, introduced in April 2006, also initially required third-party applications to request your Google credentials to access the Google Calendar API. This practice was widely criticized, leading Google to develop a more secure method, Google AuthSub, by the end of 2006.

### Google ClientLogin
In the early stages of the Google Data API, security was provided by two nonstandard protocols: ClientLogin and AuthSub. ClientLogin was intended for installed applications, such as desktop or mobile apps, but not for web applications. For web applications, AuthSub was recommended.

**Note:** The complete Google ClientLogin documentation is available at [Google ClientLogin Documentation](https://developers.google.com/accounts/docs/AuthForInstalledApps). The ClientLogin API was deprecated as of April 20, 2012, and operated until April 20, 2015, according to Google's deprecation policy.

As shown in Figure A-5, Google ClientLogin uses identity delegation with password sharing. The user shares their Google credentials with the installed application, which then creates a request token and calls the Google Accounts Authorization service. After validation, a CAPTCHA challenge is sent back. Once the user successfully responds to the CAPTCHA, a token is issued to the application, allowing it to access Google services.

### Google AuthSub
Google AuthSub was the recommended authentication protocol for web applications in the post-2006 era. Unlike ClientLogin, AuthSub does not require credential sharing. Users provide credentials directly to Google, which then shares a temporary token with limited privileges to the third-party web application. The third-party application uses this token to access Google APIs (see Figure A-6).

**Note:** The complete Google AuthSub documentation is available at [Google AuthSub Documentation](https://developers.google.com/accounts/docs/AuthSub) and [Using AuthSub with Google Data API](https://developers.google.com/gdata/docs/auth/authsub). The AuthSub API was deprecated as of April 20, 2012, and operated until April 20, 2015, according to Google's deprecation policy.

### Flickr Authentication API
Flickr, a popular image and video hosting service owned by Yahoo!, launched in 2004 and exposed its services via a public API by 2005. Flickr was one of the few companies with a public API before the Google Calendar API. It followed an identity delegation model without credential sharing, influencing many subsequent implementations. The Flickr model was signature-based, requiring each request to be signed by the application using its application secret.

### Yahoo! Browser-Based Authentication (BBAuth)
Yahoo! BBAuth, launched in September 2006, allowed third-party applications to access Yahoo! data with limited privileges. Yahoo! Photos and Yahoo! Mail were the first services to support BBAuth. The process involved the user logging in and approving the access request from the third-party application, after which Yahoo! redirected the user back to the application with a temporary token (see Figure A-7).

**Note:** The complete guide to Yahoo! BBAuth is available at [Yahoo! BBAuth Guide](http://developer.yahoo.com/bbauth/).

### OAuth
Google AuthSub, Yahoo! BBAuth, and Flickr Authentication contributed to the development of a common standardized delegation model. OAuth 1.0 was the first step toward standardization. The roots of OAuth go back to November 2006, when Blaine Cook started developing an OpenID implementation for Twitter. In parallel, Larry Halff of Magnolia (a social bookmarking site) was considering integrating an authorization model with OpenID. Larry, Blaine, Chris Messina, DeWitt Clinton, and Eran Hammer started a discussion group in April 2007 to build a standardized access delegation protocol, which became OAuth.

**Note:** OpenID is a standard developed by the OpenID Foundation for decentralized single sign-on. The OpenID 2.0 final specification is available at [OpenID 2.0 Specification](http://openid.net/specs/openid-authentication-2_0.html).

The OAuth 1.0 core specification was released in December 2007. In 2008, during the 73rd Internet Engineering Task Force (IETF) meeting, a decision was made to develop OAuth under the IETF. OAuth 1.0a was released in June 2009 to fix a security issue related to session fixation attacks. OAuth 1.0 was released as RFC 5849 under the IETF in April 2010.

**Note:** The OAuth 1.0 community specification is available at [OAuth 1.0 Community Specification](http://oauth.net/core/1.0/), and OAuth 1.0a is at [OAuth 1.0a](http://oauth.net/core/1.0a/). Appendix B explains OAuth 1.0 in detail.

In November 2009, Dick Hardt of Microsoft, Brian Eaton of Google, and Allen Tom of Yahoo! presented a new draft specification for access delegation called Web Resource Authorization Profiles (WRAP) at the Internet Identity Workshop (IIW). WRAP was built on top of the OAuth 1.0 model to address some of its limitations. In December 2009, WRAP was deprecated in favor of OAuth 2.0.

**Note:** The WRAP specification contributed to the IETF OAuth working group is available at [WRAP Specification](http://tools.ietf.org/html/draft-hardt-oauth-01).

While OAuth was being developed, the OpenID community also began discussing how to integrate OAuth with OpenID. This effort, initiated in 2009, was called the OpenID/OAuth hybrid extension. This extension describes how to embed an OAuth approval request into an OpenID authentication request to allow combined user approval. For security reasons, the OAuth access token is not returned in the OpenID authentication response; instead, a mechanism to obtain the access token is provided.

**Note:** The finalized specification for the OpenID/OAuth extension is available at [OpenID/OAuth Extension](http://step2.googlecode.com/svn/spec/openid_oauth_extension/latest/openid_oauth_extension.html).

### Appendix B: OAuth 1.0
OAuth 1.0 was the first step toward standardizing identity delegation. It involves three parties: the delegator (user), who assigns access to their resources to a third party; the delegate (consumer), who accesses the resource on behalf of the user; and the service provider, which hosts the actual resource. In OAuth 1.0, the user is known as the resource owner, the consumer is known as the client, and the service provider is known as the server.

**Note:** The OAuth 1.0 community specification is available at [OAuth 1.0 Community Specification](http://oauth.net/core/1.0/), and OAuth 1.0a is at [OAuth 1.0a](http://oauth.net/core/1.0a/). OAuth 1.0, RFC 5849, made OAuth 1.0 (community version) and 1.0a obsolete. RFC 5849 is available at [RFC 5849](http://tools.ietf.org/html/rfc5849).

### The Token Dance
Token-based authentication dates back to 1994 when the Mosaic Netscape 0.9 beta version added support for cookies. Cookies were used to identify whether the same user was revisiting a website. Although not a strong form of authentication, this was the first time cookies were used for identification. Most browsers later added support for cookies and used them for authentication. When a user logs in, they provide their username and password. Upon successful authentication, the web server creates a session and writes the session identifier into a cookie. Subsequent requests must include this cookie to reuse the authenticated session.

**Note:** RFC 6265 defines the cookie specification in the context of HTTP: [RFC 6265](http://tools.ietf.org/html/rfc6265).

Figure B-1. OAuth 1.0 token dance
A token is a unique identifier issued by the server and used by the client to associate authenticated requests with the resource owner. Tokens have a matching shared-secret that the client uses to establish ownership and authority to represent the resource owner.

**Note:** All three phases in the OAuth 1.0 token dance must happen over Transport Layer Security (TLS). These are bearer tokens, so anyone who steals them can use them. A bearer token is like cash; if you steal $10, you can still use it at Starbucks, and the cashier will not question how you obtained it.

#### Temporary-Credential Request Phase
During the temporary-credential request phase, the OAuth client sends an HTTP POST to the temporary-credential request endpoint hosted in the resource server:

```
POST /oauth/request-token HTTP/1.1
Host: server.com
Authorization: OAuth realm="simple",
oauth_consumer_key="dsdsddDdsdsds",
oauth_signature_method="HMAC-SHA1",
oauth_callback="http://client.net/client_cb",
oauth_signature="dsDSdsdsdsdddsdsdsd"
```

The authorization header in the request is constructed with the following parameters:
- **OAuth**: The keyword used to identify the type of the authorization header. It must have the value "OAuth".
- **realm**: An identifier known to the resource server. The realm value helps the resource server determine how to authenticate the OAuth client.
- **oauth_consumer_key**: A unique identifier issued to the OAuth client by the resource server. This key is associated with a secret key known to both the client and the resource server.
- **oauth_signature_method**: The method used to generate the `oauth_signature`. This can be PLAINTEXT, HMAC-SHA1, or RSA-SHA1.
- **oauth_signature**: The signature, calculated according to the method defined in `oauth_signature_method`.
- **oauth_callback**: An absolute URI under the control of the client. The resource server redirects the resource owner to this URI once the access request is authorized.

**Note:** With PLAINTEXT as the `oauth_signature_method`, the `oauth_signature` is the consumer secret followed by "&". For example, if the consumer secret is "Ddedkljlj878dskjds", the `oauth_signature` is "Ddedkljlj878dskjds&".

The temporary-credential request authenticates the client, which must be a registered entity at the resource server. The client registration process is outside the scope of the OAuth specification. The client gets the following in response to the temporary-credential request. Both the request and the response must be over TLS:

```
HTTP/1.1 200 OK
Content-Type: application/x-www-form-urlencoded
oauth_token=bhgdjgdds&
oauth_token_secret=dsdasdasdse&
oauth_callback_confirmed=true
```

- **oauth_token**: An identifier generated by the resource server, used to link the `oauth_token_secret` to the `oauth_consumer_key`.
- **oauth_token_secret**: A shared secret generated by the resource server, used by the client to generate the `oauth_signature` in future requests.