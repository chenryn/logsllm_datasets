http://sourceforge.net/projects/kses/.
[31] B. Livshits and M. S. Lam. Finding security errors in Java
programs with static analysis. In Proceedings of the Usenix
Security Symposium, 2005.
[32] B. Livshits, M. Martin, and M. S. Lam. SecuriFly: Runtime
protection and recovery from Web application vulnerabilities.
Technical report, Stanford University, Sept. 2006.
[33] M. Martin and M. S. Lam. Automatic generation of XSS and
SQL injection attacks with goal-directed model checking. In
17th USENIX Security Symposium, 2008.
[34] The Mason Book: Escaping Substitutions.
http://www.masonbook.com/book/chapter-2.mhtml.
[35] L. Meyerovich and B. Livshits. ConScript: Specifying and
enforcing ﬁne-grained security policies for JavaScript in the
browser. In IEEE Symposium on Security and Privacy, May
2010.
[36] Y. Nadji, P. Saxena, and D. Song. Document structure
integrity: A robust basis for cross-site scripting defense. In
NDSS, 2009.
[37] A. Nguyen-Tuong, S. Guarnieri, D. Greene, J. Shirley, and
D. Evans. Automatically hardening web applications using
precise tainting. 20th IFIP International Information Security
Conference, 2005.
[38] XSS Prevention Cheat Sheet. http://www.owasp.org/index.php/
XSS_(Cross_Site_Scripting)_Prevention_Cheat_Sheet.
[39] W. Robertson and G. Vigna. Static Enforcement of Web
Application Integrity Through Strong Typing. In Proceedings
of the USENIX Security Symposium, Montreal, Canada,
August 2009.
[40] Ruby on Rails Security Guide.
http://guides.rubyonrails.org/security.html.
[41] P. Saxena, D. Akhawe, S. Hanna, F. Mao, S. McCamant, and
D. Song. A symbolic execution framework for JavaScript.
Technical Report UCB/EECS-2010-26, EECS Department,
University of California, Berkeley, 2010.
[42] P. Saxena, S. Hanna, P. Poosankam, and D. Song. FLAX:
Systematic discovery of client-side validation vulnerabilities in
rich web applications. In 17th Annual Network & Distributed
System Security Symposium, (NDSS), 2010.
[43] P. Saxena, D. Molnar, and B. Livshits. SCRIPTGARD:
Automatic context-sensitive sanitization for large-scale legacy
web applications. In Proceedings of the ACM Computer and
communications security(CCS), 2011.
[44] Smarty Template Engine: escape. http:
//www.smarty.net/manual/en/language.modifier.escape.php.
[45] Google Closure Templates.
http://code.google.com/closure/templates/.
[46] S. Stamm. Content security policy, 2009.
[47] Z. Su and G. Wassermann. The essence of command injection
attacks in web applications. 2006.
[48] Template::Manual::Filters.
http://template-toolkit.org/docs/manual/Filters.html.
[49] Ter Louw, Mike and V.N. Venkatakrishnan. BluePrint: Robust
Prevention of Cross-site Scripting Attacks for Existing
Browsers. In Proceedings of the IEEE Symposium on Security
and Privacy, 2009.
[50] J. Weinberger, P. Saxena, D. Akhawe, M. Finifter, R. Shin, and
[52] W. Xu, S. Bhatkar, and R. Sekar. Taint-enhanced policy
enforcement: A practical approach to defeat a wide range of
attacks. USENIX Security Symposium, 2006.
[53] Yii Framework: Security. http:
//www.yiiframework.com/doc/guide/1.1/en/topics.security.
[54] Zend Framework: Zend Filter.
http://framework.zend.com/manual/en/zend.filter.set.html.
APPENDIX
A. OPERATIONAL SEMANTICS
We have discussed the static type rules in Section 4. In
this section, we describe the various runtime parsing checks
that our CSAS engine inserts at various operations to achieve
type safety. We do this by ﬁrst presenting a big-step opera-
tional semantics for an abstract machine that evaluates our
simple templating language. We sketch the proof for the
soundness of our type system based on the operational se-
mantics.
c ∈ C
M (cid:96) const(n) ⇓ (cid:104)n, c (cid:44)→ c(cid:105)
e-cint
c ∈ C
M (cid:96) const(b) ⇓ (cid:104)b, c (cid:44)→ c(cid:105)
e-cbool
IsP arseV alid(s, c1 , c2)
M (cid:96) const(s) ⇓ (cid:104)s, c1 (cid:44)→ c2(cid:105)
e-const
M (cid:96) const(s) ⇓ (cid:47)s(cid:46)
e-string-dyn
M (cid:96) e1 ⇓ (cid:104)b1, c (cid:44)→ c(cid:105)
M (cid:96) e2 ⇓ (cid:104)b2, c (cid:44)→ c(cid:105)
M (cid:96) e1 (cid:12) e2 ⇓ (cid:104)b1 (cid:12) b2, c (cid:44)→ c(cid:105)
M (cid:96) e1 ⇓ (cid:104)s1, c1 (cid:44)→ c2(cid:105)
e-bl
M (cid:96) e1 ⇓ (cid:104)n1, c (cid:44)→ c(cid:105)
M (cid:96) e2 ⇓ (cid:104)n2, c (cid:44)→ c(cid:105)
M (cid:96) e1 ⊕ e2 ⇓ (cid:104)n1 ⊕ n2, c (cid:44)→ c(cid:105)
e-int
M (cid:96) e2 ⇓ (cid:104)s2, c3 (cid:44)→ c4(cid:105)
c2 = c3
e-cat-stat
M (cid:96) e1 · e2 ⇓ (cid:104)s1 · s2, c1 (cid:44)→ c4(cid:105)
M (cid:96) e2 ⇓ (cid:47)s2(cid:46)
M (cid:96) e1 ⇓ (cid:47)s1(cid:46)
M (cid:96) e1 · e2 ⇓ (cid:47)s1 · s2(cid:46)
e-cat-dyn
M (cid:96) e ⇓ s
SanM ap(c1 (cid:44)→ c2, f)
(cid:48)
M (cid:96) San(f, e) ⇓ (cid:104)s
M (cid:96) e ⇓ s
SanM ap(c1 (cid:44)→ c2, f)
(cid:48) = f(s)
s
, c1 (cid:44)→ c2(cid:105)
(cid:48) = f(s)
s
M (cid:96) v := (STATICc1(cid:44)→c2 )e ⇓ M[v (cid:55)→ (cid:104)s
M (cid:96) v := (DYNS )e ⇓ M[v (cid:55)→ (cid:47)(cid:76)s(cid:77)(cid:46)(cid:105)]
M (cid:96) e ⇓ s
c1 , c2 ∈ C
e-san
c1 , c2 ∈ C
e-prom-st
(cid:48)
, c1 (cid:44)→ c2(cid:105)]
e-prom-dyn
M (cid:96) e ⇓ (cid:104)s, c1 (cid:44)→ c2(cid:105)
M (cid:96) v := (STATICc1(cid:44)→c2 )e ⇓ M
e-cast-1
M (cid:96) e ⇓ (cid:47)s(cid:46)
M (cid:96) v = (DYNS )e ⇓ M
e-cast-2
M (cid:96) e ⇓ (cid:104)s, c1 (cid:44)→ c2(cid:105)
M (cid:96) ρ ⇓ (cid:107)s
, c(cid:107)
(cid:48)
M (cid:96) print(e) ⇓ M[ρ (cid:55)→ (cid:107)s
M (cid:96) e ⇓ (cid:47)s(cid:46)
(cid:48)
M (cid:96) ρ ⇓ (cid:107)s
(s
M (cid:96) print(e) ⇓ M[ρ (cid:55)→ (cid:107)s
, c(cid:107)
c = c1
e-prn-stat
(cid:48) · s, c2(cid:107)]
(cid:48)(cid:48)
, c2) = CSRP (c, (cid:47)s(cid:46))
(cid:48) · s
, c2(cid:107)]
(cid:48)(cid:48)
e-prn-dyn
M (cid:96) e ⇓ true
M (cid:96) S1 ⇓ M
M (cid:96) if(e)thenS1elseS2 ⇓ M
(cid:48)
(cid:48) e-if M (cid:96) e ⇓ f alse
M (cid:96) S2 ⇓ M
M (cid:96) if(e)thenS1elseS2 ⇓ M
(cid:48)
(cid:48) e-el
M (cid:96) e ⇓ true
M (cid:96) S; while(e)S ⇓ M
M (cid:96) while(e)S ⇓ M
(cid:48)
(cid:48) e-whltrue
M (cid:96) e ⇓ f alse
M (cid:96) while(e)S ⇓ M
e-whlfalse
M (cid:96) e ⇓ x
M (cid:96) v := e ⇓ M[v (cid:55)→ x]
e-assign M (cid:96) c ⇓ M
(cid:48)
M
(cid:48) (cid:96) S ⇓ M
(cid:48)(cid:48)
e-seq
M (cid:96) c; S ⇓ M
(cid:48)(cid:48)
Figure 13: Operational Semantics for the typed language.
Sanitization routines inserted by the CSAS engine after in-
ference are shown Underlined. Runtime parsing and other
checks inserted are shown Boxed , which may produce run-
time errors evaluating to CFail.
599The evaluation rules are shown in Fig 13. Commands op-
erate on a memory M mapping program variables to values.
Each premise in an evaluation rule has the form M (cid:96) e ⇓ v
which means that the expression e evaluates to a ﬁnal value
v under the state of the memory M . Command evaluation
judgements have the form M (cid:96) c ⇓ M(cid:48) which states that
under the memory M evaluation of the command c results
in a memory M(cid:48). We omit the rules for template calls and
returns here which follow standard call-by-value semantics
for brevity.
Values. The values produced during the evaluation of the
language are mainly of two kinds: (a) Vβ values for the data
elements of base type β and (b) Vη for objects of base type
η. Runtime errors are captured by a third, explicit CFail
value. The syntax of values is described in Figure 14.
V alue ::=
Vβ ::=
Ctran ::=
V al ::=
Expr ::=
Vβ|Vη|CFail
(cid:104)V al, CT ran(cid:105)| (cid:47) Expr (cid:46) |V al
C (cid:44)→ C
b|i|s
V al|Expr · Expr|(cid:76)V al(cid:77)
Vη ::=
EmbCtx ::= C
(cid:107)s, EmbCtx(cid:107)
Figure 14: Syntax of Values
The universe of string, int or bool base typed values is
denoted by the letters s,i, and b letters respectively in the
syntax above and the standard concatenation operation is
denoted by “·”. The Vβ values are of three kinds:
1. Untrusted or unsanitized values are raw untrusted string,
integer or boolean values.
2. Other values which are auto-sanitized statically or cor-
respond to program constants are tuples of the form
(cid:104)v, Ctran(cid:105) where Ctran is a metadata ﬁeld. The Ctran
metadata ﬁeld indicates that the value v safely induces
a context transition Ctran .
3. The remaining values are a special data-structure (cid:47)Expr(cid:46),
called the CSRP-expression, which is used for dynam-
ically sanitized values. The data structure stores con-
catenation expressions, conceptually separating the un-
trusted peices from trusted peices. In our syntax, we
separate untrusted substrings of string expressions by
delimiting them with special delimiters,(cid:76) and(cid:77), which
are assumed to be outside the string alphabet of the
base language.
The global output buﬀer has a value of the form (cid:107)s, EmbCtx(cid:107),
where s is the string buﬀer consisting of the application’s
output. The EmbCtx metadata ﬁeld is the context as a
result of parsing s according to our canonical grammar.
Type Safety. Note that the operational semantics ensure
the 3 security properties outlined in section 2.2. The CR
is explicit in the representation of output buﬀer values—
parsing the output buﬀer at any point results in a permit-
ted context deﬁned in C. Property NOS is similarly ensured
in the E-CONST rule, which evaluate to values of the form
(cid:104)v, Ctran(cid:105). Such values are never sanitized.
Property CSAN is immidiate for E-PRN-STAT evaluation rule
which ensures that the output buﬀer’s context matches the
start context in the Ctran ﬁeld of the written string ex-
pression. For the evaluation rule E-PRN-DYN, the soundness
relies on the procedure CSRP shown boxed which takes a
CSRP-expression and a start context to parse the expression
in. This procedure parses the string expression embedded
in the CSRP-expression, while sanitizing all and only the
untrusted substrings delimited by (cid:76)(cid:77) context-sensitively. If
it succeeds it returns a tuple containing the sanitized string
expression and the end context.
In order to formalize and sketch the proof of the sound-
ness of our type system, we ﬁrst deﬁne a relation R mapping
types to the set of valid values they correspond to. At any
given point in the program, if the type of a variable or ob-
ject is Q under the typing environment Γ, then its value
must correspond to the typing constraints. The relation R
is deﬁned as follows, assuming U is the universe of strings,
integer and boolean values:
Definition 2. (Relation R)
R(UNSAFE)
R(STATICc1(cid:44)→c2) = {(cid:104)v, c1 (cid:44)→ c2(cid:105)|v ∈ U , IsP arseV alid(v, c1, c2)}
R(DYNS )
R(CTXSTATc)
R(CTXDYNS )
At any program location, we deﬁne a notion of a well-
= {v|v ∈ U}
= {(cid:47)v (cid:46) |v ∈ U}
= {(cid:107)s, c(cid:107)|c ∈ C}
= {(cid:107)s, c(cid:107)|c ∈ C, c ∈ S}
typed memory M as follows:
Definition 3. (Well-Typedness) A memory is well-typed
with respect to a typing environment Γ, denoted by M |= Γ,
iﬀ
∀x ∈ Dom(M ), M [x] ∈ R(Γ[x])
We deﬁne the two standard progress and preservation
theorems that establish soundness our type system below.
Progress states that if the memory if well-typed, then the
abstract machine deﬁned in the operational semantics does
not get “stuck”— that is, there is at least one evaluation
rules that can be applied to the well-typed terms. Preser-
vation states that at any evaluation step if all the subterms
(used in the premises) are well-typed then the deduced term
is also well-typed.
The machine may get stuck for several reasons. It may be
due to the runtime boxed checks failing. This is intended
semantics of the language and such behavior is safe. The
machine may also get stuck because no evaluaion rule may
apply, or in other words, the memory state is such that the
semantics do not deﬁne how to evaluate further. To distin-
guish these two cases, we deﬁne a value called CFail, which
the boxed procedure CSRP evaluates to when it fails. Other
stuck states may result from reaching an inconsistent mem-
ory states for which no evaluation rule applies. We point out
the abstract operational semantics we describe here are non-
deterministic. Therefore, only when all non-deterministic
evaluations of an instance of the procedure CSRP fail, does
the boxed check fail and the print statement evaluate to
the CFail runtime error.
Theorem 1. (Progress and Preservation for Expressions).
If Γ (cid:96) e : T and M |= Γ, then either M (cid:96) e ⇓ CFail or
M (cid:96) e ⇓ v and v ∈ R(T ).
Proof. By induction on the derivation of Γ (cid:96) e : T .
Theorem 2. (Progress and Preservation for Commands).
If M |= Γ and Γ (cid:96) c =⇒ Γ(cid:48), then either M (cid:96) c ⇓ CFail or
M (cid:96) c ⇓ M(cid:48) where M(cid:48) |= Γ(cid:48).
Proof. By induction on the derivation of Γ (cid:96) c =⇒ Γ(cid:48).
The deﬁnition of relation R serves as the standard inversion
lemma.
600