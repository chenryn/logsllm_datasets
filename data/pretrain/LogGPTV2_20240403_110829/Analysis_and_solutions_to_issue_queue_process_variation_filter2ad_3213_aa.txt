title:Analysis and solutions to issue queue process variation
author:Niranjan Soundararajan and
Aditya Yanamandra and
Chrysostomos Nicopoulos and
Narayanan Vijaykrishnan and
Anand Sivasubramaniam and
Mary Jane Irwin
International Conference on Dependable Systems &Networks: Anchorage, Alaska, June 24-27 2008
Analysis and solutions to Issue Queue Process Variation
Niranjan Soundararajan Aditya Yanamandra Chrysostomos Nicopoulos N. Vijaykrishnan
Anand Sivasubramaniam Mary Jane Irwin
Dept. of Computer Science and Engineering
The Pennsylvania State University
University Park, PA 16802
{soundara, yanamand, nicopoul, vijay, anand, mji}@cse.psu.edu
Abstract
The last few years have witnessed an unprecedented explo(cid:173)
sion in transistor densities. Diminutive feature sizes have en(cid:173)
abled microprocessor designers to break the billion-transistors
per chip mark. However various new reliability challenges such
as Process Variation (PV) have emerged that can no longer be
ignored by chip designers.
In this paper, we provide a comprehensive analysis of the
effects of P V on the microprocessor's Issue Queue. Varia(cid:173)
tions can slow down issue queue entries and result in as
much as 20.5% performance degradation. To counter this, we
look at different solutions that include Instruction Steering,
Operand- and Port- switching mechanisms. Given that P V is
non-deterministic at design-time, our mechanisms allow the
fast and slow issue-queue entries to co-exist in turn enabling in(cid:173)
struction dispatch, issue andforwarding to proceed with mini(cid:173)
mal stalls. Evaluation on a detailed simulation environment in(cid:173)
dicates that the proposed mechanisms can reduce performance
degradation due to PV to a low 1.3%.
Keywords
Process Variation, Issue Queue, Pipeline, Microarchitecture,
IPC
Category
Architectures, Hardware/VLSI
1. Introduction
The need for more computing power and smaller platforms
has led the IC technology towards minuscule feature sizes.
The latest chips are starting to surpass the billion transistor
mark [8]. This push towards ever-increasing transistor counts
has given rise to new challenges and impediments. In particular,
Process Variation (PV) [8, 9] has become a major design con(cid:173)
sideration. PV arises from manufacturing imperfections result(cid:173)
ing from sub-wavelength lithography, Random Dopant Fluctu(cid:173)
ations (RDF), dose, focus, and overlay variations [31]. The ag(cid:173)
gravation of such manufacturing uncertainties invariably leads
to marked deviations in effective gate length, oxide thickness,
and transistor threshold voltages [9]. Non-nominal device char(cid:173)
acteristics may lead to substantial variations in power con(cid:173)
sumption and timing violations. PV can be a systematic or
a random phenomenon. While systematic variations exhibit
strong spatial correlations, such that structures close to each
other are affected similarly, random variations can occur any(cid:173)
where.
PV creates a widening gap between designed and manufac(cid:173)
tured circuit characteristics. This disconnect adversely affects
the chip yield leading to circuit design becoming more proba(cid:173)
bilistic in future. Several researchers have already looked into
the severity ofthe problem and proposed architectural-level and
circuit-level solutions to mitigate its effect [22, 31].
The work presented in this paper focuses on one of the key
components of any modem microprocessor, namely the Issue
Queue. It will be demonstrated in this paper that the nominal(cid:173)
value deviations imparted by PV could potentially lead to se(cid:173)
vere degradation in system performance. Designing for worst(cid:173)
case scenarios is certainly not feasible due to its significant im(cid:173)
pact on performance.
Developing effective solutions to guard against PV artifacts
in issue queues is non-trivial. For instance, since the issue
queue power density is high, conventional techniques such as
Forward Body Biasing (FBB) [4] are not suitable for mitigating
PV effects. Unlike other structures studied for variations [20],
the issue queue involves multiple activities which include in(cid:173)
struction dispatch, issue and forwarding that together make it
challenging to synchronize these activities under variation.
The major contributions of this work can be summarized as
follows:
• An in-depth analysis ofthe issue queue operation.As such,
various issue queue activities that are susceptible to varia(cid:173)
tions are identified and the impact of slowing them down
is analyzed. We show that PV-unaware issue queue opera(cid:173)
tion can lead to 20.5% performance degradation compared
to a conventional PV-unaffected system.
• Mechanisms to counter variations have been provided.
Since variations affect the entries in a non-deterministic
manner, our techniques enable fast and slow entries within
the issue queue to co-exist and thereby allow instruction
dispatch, issue and forwarding operations to synchronize
with each other. These mechanisms bring down the per(cid:173)
formance degradation to 5%.
• Sub-components within the issue queue entry vary in their
operating speed as well. Switching source operands of in(cid:173)
structions based on their availability is investigated. Fur(cid:173)
ther port-switching, whenever possible, is also shown to
be effective. This sub-component analysis further reduces
1-4244-2398-9/08/$20.00 ©2008 IEEE
11
DSN 2008: Soundararajan et al.
International Conference on Dependable Systems & Networks: Anchorage, Alaska, June 24-27 2008
the performance degradation to only 1.3%, highlighting
the efficacy of our mechanisms to counter variations.
Section 2 provides a background on issue queue design and
associated pipeline activities. Section 3 gives the simulation
platform while section 4 discusses the impact ofvariations with
respect to the CAM and SRAM cells within the issue queue.
Section 5 talks about the performance impact of slowing down
different issue queue activities. Section 6 provides solutions to
handle slow entries in the issue queue and reduce their per(cid:173)
formance impact. Section 7 talks about the testing methodol(cid:173)
ogy and the microarchitectural modifications required to sup(cid:173)
port stalling. Section 8 provides the related work and finally
we conclude in section 9.
2. Background
Ld/St Queue
(B)
INSTRUCTION
ISSUE
Valid Bit
Reset
DISPATCH Va Id Bit
WRITE
Sat
FORWARDING
OPB';;;;etSa"':adY
Figure 1. (A) Out-of-Order Pipeline highlighting the paths to
the Issue Queue. The Figure also shows an Issue Queue en(cid:173)
try and all associated activities. (B) Time-line of issue queue
activities at cycle-level granularity. Here 't' refers to a cycle.
The cycles are not drawn to scale.
Figure 1(A) shows the pipeline that we are looking at in this
work, which is similar to P6-style microarchitecture [27]. In(cid:173)
structions are fetched and decoded in-order in the front-end of
the pipeline. Register renaming occurs in the Register Alias Ta(cid:173)
ble (RAT), which maintain tags corresponding to the destina(cid:173)
tion architected registers. The Reorder Buffer (ROB) and Phys(cid:173)
ical Register File (PRF) are coupled together and hence the
ROB entries correspond to PRF ids. The Architectural Regis(cid:173)
ter File (ARF) exists as a separate structure in which instruc(cid:173)
tions retiring from the ROB write their results. Once the in(cid:173)
structions get decoded, entries in the issue queue and ROBare
allocated for the instruction in the Alloc stage in parallel with
the RAT access. Once an instruction is renamed, it accesses the
ARF and ROB for ready operand values before getting written
into the issue queue. As soon as the instruction completes ex(cid:173)
ecution, it writes its results into the ROB from where they are
made available to future instructions until the instruction re(cid:173)
tires. This ROB access takes two cycles [19].
Issue queues can be dispatch-bound or issue-bound, data(cid:173)
capture or non-data capture style [27]. In this work we look
at an issue-bound, data-capture style issue queue, where the
dispatched instructions fetch their ready operands from the
ARF/ROB before moving into the issue queue. A typical is(cid:173)
sue queue entry looks like the one shown in Figure I(A) [24].
Each individual entry consists of six basic components: the op(cid:173)
code, two source operands, their tags, and the destination tag
besides the flags that indicate whether an entry is valid and if
its operands are ready. The ready operands, the opcode and the
tags get written into the issue queue entries at dispatch. For
non-ready operands, their tags are compared against those of
instructions forwarding their results each cycle and on a match
the operand value gets written into the entry. Once all operands
become ready, the instruction issues a request signal to the se(cid:173)
lect logic for it to be selected for execution.
Figure 1(B) shows a time-line of activities with respect to
the issue queue [16]. The Alloc logic decides whether the de(cid:173)
coded instructions can be passed to the back-end based on
available entries in ROB, issue queue and load/store queue.
Once entries get allocated, the instructions get written into the
issue queue. For performance reasons, multiple issue queue
activities proceed in a cycle. The dispatch writes of new in(cid:173)
structions occurs in the first half of the cycle while forward(cid:173)
ing starts in later half. This ordering is important since new in(cid:173)
structions could get their source operands from the forward ing
path. Once the forwarding match occurs, the operand is writ(cid:173)
ten into the entry. Once complete, it sets the operand ready bit.
Since forwarded data get broadcast to all entries, the CAM cells
of new instructions become effective only after the valid bit is
set for these entries. This avoids any meta-stable state in the is(cid:173)
sue queue entries. Once the operands become ready, the selec(cid:173)
tion and issue of the instruction occur in the next cycle which
is extremely important for performance benefits.
Issue queue implementations can be compacting or non(cid:173)
compacting [13]. In compaction-based designs, an instruction
issue causes all later entries to move forward. Any new instruc(cid:173)
tion is added only to the tail of the queue implicitly maintain(cid:173)
ing the oldest-to-youngest instruction order. An alternate im(cid:173)
plementation is the non-compacting issue queue design, where
dispatched instructions are allocated an entry and they remain
there until issue. Holes created on issue get filled only by newer
instructions on dispatch. Past research [13] has proposed selec(cid:173)
tion logic schemes that allow oldest-to-first instruction selec(cid:173)
tion for issue.
In an issue queue, the tags are usually stored in CAM ar(cid:173)
rays and the data and opcode in SRAM arrays. Prior works
have looked into the problems associated with variations in
SRAM [3] and CAM cells [6, 23]. Failures in the CAM in(cid:173)
clude search-time, match and SRAM bit failures. Search-time
failure is attributed to high lith in transistors discharging the
matchline, while match failure occurs when higher leakage cur(cid:173)
rents cause voltage drops on the matchline. SRAM bit failures
can be attributed to various conditions, such as data flipping on
a read, writes not able to update cells, or lith variations caus(cid:173)
ing data access times to fail.
1-4244-2398-9/08/$20.00 ©2008 IEEE
12
DSN 2008: Soundararajan et al.
International Conference on Dependable Systems &Networks: Anchorage, Alaska, June 24-27 2008
Baseline Parameters
Parameter
FetchiDecodelIssue/Commit Width
Fetch Queue Size
Branch-Predictor
RAS Size
BTB Size
RUU/LSQ/ISQ Size
Integer ALUs
Integer Multipliers/Dividers
FP ALUs
FP Mult./Div./Sqrt.
1 D-Cache Ports
LID-Cache
Ll I-Cache
L2 Unified
I-TLB
D-TLB
TLB Miss-Latency
Memory Latency
Value
6
128
Combined Predictor
64
2K-entry 4-way
128/64124
6 (I-cycle latency)
4 (3,20)
6 (2)
4 (4,12,24)
2
64KB, 2-way 32B block (2)
32KB, 2-way 32B block (2)
512 KB, 4-way 32B line-size (12)
512-entries 4-way
1K-entries 4-way
30 cycles
150 cycles
Table 1. Simulation parameters. Latencies of ALUs/caches are
given in parentheses. All ALU operations are pipelined except divi(cid:173)
sion and square-root.
3. Simulation Setup
Variation analysis of the delays of all our circuits were per(cid:173)
fonned using HSPICE, a circuit-level simulator. We designed
all the required components and perfonned a delay analysis by
statistically varying the device parameters. Our delay simula(cid:173)
tions employed the Predictive Technology Model (PTM) de(cid:173)
vice models [32] for the 22nm technology. Architectural ex(cid:173)
periments were conducted using the SimpleScalar 3.0 [12] on
the Alpha ISA. The simulator was heavily modified to support
the variation-affected issue queue and the consequent stalls in(cid:173)
duced in the pipeline. The proposed techniques were evaluated
on all 26 SPEC CPU2000 benchmarks after fast-forwarding to
the single SimPoint [28] and running them for 100 million in(cid:173)
structions. The parameters of our baseline model are shown in
Table 1.
Since PV is a random phenomenon, it could affect any ofthe
entries which have varying impact on perfonnance. Looking
at all possible cases would mean analyzing (AJ;:~e~~~~~:es)
cases which would be large. Hence in our simulations we pick
one case of PV-affected entries (entries chosen randomly) and
study the perfonnance impact across the different schemes. For
low IPC benchmarks (IPC  1.0). Hence the perfonnance graphs
give two values, the average values for all benchmarks and the
average specific to the high IPC ones, in the legend. All the
graphs group the high IPC (gzip to apsi - 15 benchmarks) and
low IPC (swim to twolf - 11 benchmarks) together.
4. Variation analysis on the key issue queue com(cid:173)
ponents
An issue queue consists of CAM and SRAM cells operating
together in each entry. Works like [3, 6] have shown timing er(cid:173)
rors to be more dominant than bit flipping errors for SRAM and
CAM cells and hence we analyze them in our work. A Monte-
Carlo analysis was perfonned for these structures, custom(cid:173)
designed in 22nm technology, by simulating 5000 instances. In
this work, we don't model systematic variation as the relatively
smaller size of the issue queue, compared to caches in which
systematic variations are common, makes random variations
the dominant cause of process variation. A variation of 5% in
gate length and 10% in the threshold voltage is assumed. These
values were suggested for the 65nm technology by the ITRS
and widely used in the literature [3, 20]. The degree of process
variation is expected to increase with newer generations [9] and
thus our assumptions are conservative for the 22nm technology.
Figures 2(A) and (B) show the variation in the nonnalized de(cid:173)
lay for match operation of a 7-bit CAM cell and write opera(cid:173)
tion of a 64-bit SRAM cell respectively. Figure 2(C) shows the
variation in the nonnalized delay of operation of an entire issue
queue line. In this work, we assume the issue queue to be the