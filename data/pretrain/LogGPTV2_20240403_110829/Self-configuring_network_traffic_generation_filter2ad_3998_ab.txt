ﬂow data includes source and destination AS/IP/port pairs,
packet and byte counts, ﬂow start and end times, protocol
information, and a bitwise OR of TCP ﬂags for all packets
of a ﬂow, in addition to other ﬁelds. This data is exported
either on timer deadlines or when certain events occur (e.g.,
a TCP FIN or RST, or a cache becomes full), whichever
comes ﬁrst. While this pragmatically resolves ambiguity in
the deﬁnition of a ﬂow, speciﬁc expiration-related timing
behaviors can vary [7]. We discuss how this variation can
aﬀect parameterization in Section 4. An example of how a
single transaction, such as an FTP transfer, can appear in
ﬂow records is shown in Figure 2. The transaction is repre-
sented as multiple data ﬂows between the two hosts. Each
direction of the control and data connections is reported,
resulting in four ﬂow records. TCP ﬂags, packet and byte
counts accumulate over the duration of each connection.
From this operational deﬁnition of a ﬂow, Harpoon’s ar-
chitecture begins with the notion of unicast ﬁle transfers
using either TCP or UDP. Harpoon does not address the
packet level dynamics of TCP ﬁle transfers. Rather, it relies
on the version(s) of TCP running on end hosts to transfer the
requested ﬁle. Modeling UDP traﬃc is complicated by the
fact that packet emission behaviors are largely application-
speciﬁc. At present, Harpoon contains three models of UDP
packet transfer: a simple parameterized constant packet
rate, a ﬁxed-interval periodic ping-pong, and an exponen-
tially distributed ping-pong. The ﬁrst source type is similar
to some audio and video streams, while the latter two types
are intended to mimic the standard Network Time Proto-
col (NTP) and Domain Name Service (DNS), respectively.
UDP traﬃc in today’s Internet is likely to be made up of
Figure 2: Flow level decomposition of a simple FTP
transaction. Each line is logged as a separate entry
by NetFlow.
The Harpoon ﬂow model is a two level architecture and
is depicted in Figure 3. We refer to the lower level of the
Harpoon model as the connection level. It is made up of two
components that have measurable distributional properties.
The ﬁrst component is the size of the ﬁle transferred, and the
second component is the time interval between consecutive
ﬁle transfer requests, the inter-connection time. Harpoon
makes requests for ﬁles with sizes drawn from an empiri-
cal distribution PF ileSize. Connection initiations are sepa-
rated by time intervals drawn from an empirical distribution
PInterConnection.
The upper level of the Harpoon model is referred to as
the session level. Harpoon sessions are divided into either
TCP or UDP types which then conduct data transfers us-
ing that protocol during the time that they are active. The
session level has two components: the number of active ses-
sions and the IP spatial distribution. By modulating the
number of sessions that are active at any point in time, Har-
poon can match the byte, packet, and ﬂow volumes from the
original data and realize the temporal (diurnal) traﬃc vol-
umes that are a common characteristic of the Internet [43].
The average number of sessions of each type (TCP/UDP)
that are active at any point in a day is derived from a ﬂow
data time series for consecutive non-overlapping intervals
of length IntervalDuration seconds to create an empirical
model for PActiveSessions. Scalability is naturally achieved
by dividing the number of active sessions across any number
of hosts comprising the testbed. For each session, Harpoon
picks source and destination addresses from ranges of avail-
able addresses to make a series of ﬁle transfer requests. The
address selection is made preferentially using weights drawn
from empirical distributions PIP Rangesrc and PIP Rangedest .
A series of ﬁle transfer requests then takes place between
the source and destination for IntervalDuration seconds.
When Harpoon is started, it begins with the average num-
ber of sessions in the ﬁrst interval and proceeds through
consecutive intervals for the duration of the test.
In summary, the Harpoon model is made up of a combina-
tion of ﬁve distributional models for TCP sessions: ﬁle size,
inter-connection time, source and destination IP ranges, and
number of active sessions. These parameters are summa-
rized in Table 1. There are three distributional models for
UDP sessions: constant bit-rate, periodic ping-pong, and
. . .harpoonharpoon. . .processingflow recordcapture andemulationtestbedoperationalnetworkselfconfigurationtime24 pkts, 1202 bytes24 pkts, 4208 bytes250 pkts, 359424 bytes132 pkts, 5288 bytesServer.21 (ftp)Client.1291SYN|ACK|PUSH|FINClient.1291Server.21 (ftp)SYN|ACK|PUSH|FINClient.1292Server.20 (ftp−data)SYN|ACK|PUSH|FINServer.20 (ftp−data)Client.1292SYN|ACK|FINreﬁnements. First, due to ﬂow record timeouts, a single
ﬂow may be split into multiple ﬂow records. To counter
this eﬀect, we perform “ﬂow surgery” [27] on the raw ﬂow
records, coalescing records where addresses, ports, protocol,
timestamps and TCP ﬂags indicate that the records refer to
the same ﬂow. Second, we only perform the calculation if
there are start and end markers present in the TCP ﬂags,
i.e., a SYN ﬂag and a RST or FIN ﬂag. This check ensures
that we do not underestimate application payloads because
of missing the beginning or end of a ﬂow. Third, we discard
ﬂows that appear to be “ACK ﬂows” or ﬂows that are very
small (e.g., the request direction for an HTTP transfer).
There are two practical complications to calculating ﬁle
sizes from ﬂow records. First, some routers do not record
TCP ﬂags in ﬂow records. In this implementation of Har-
poon, we assume that these ﬂags are available. Also, it is
common practice on high-bandwidth links to perform packet
sampling (e.g., by recording every N th packet or recording
a packet with probability 1
N ) to reduce the storage and pro-
cessing requirements of maintaining ﬂow records. Duﬃeld
et al. [27] describe methods for recovering the distribution
of ﬂow sizes from sampled ﬂow records. Application of these
methods to the self-conﬁguration step of Harpoon and relax-
ing assumptions regarding presence of TCP ﬂags are areas
for future work.
Inter-connection Times To extract the inter-connection time
distribution, we again make use of TCP ﬂags in the ﬂow
records. For each source and destination IP address pair en-
countered, we create an ordered list of start times for ﬂows
that contain a SYN ﬂag. The collection of diﬀerences be-
tween consecutive SYNs for each address pair constitutes
the inter-connection time empirical distribution. In practice,
we impose a bound on the maximum inter-connection time
(e.g., 60 seconds). We discuss implications of this bound
below.
Source and Destination IP Addresses To emulate the spa-
tial characteristics present in ﬂow records captured in a live
environment, we ﬁrst extract the empirical frequency distri-
butions of source and destination IP addresses. We map the
resulting rank-frequency distributions onto source and des-
tination address pools (from the perspective of a Harpoon
client) used in the testbed. For example, if the source ad-
dress pool for a testbed host is speciﬁed as a class C network,
we map the frequency distribution of the top 2541 addresses
from the live ﬂows to Harpoon conﬁguration parameters.
Number of Active Sessions One way to calculate the num-
ber of sessions that should be active over a series of intervals
is to start with the observation that each source and desti-
nation IP address pair (the analog of a session in Harpoon)
contributes to the overall load during one or more intervals.
For each host pair, we ﬁnd the earliest ﬂow start time and
latest end time and “spread” a value proportional to the
lifetime of that session over the corresponding intervals.
While the above technique appears to be the most direct
way of calculating the number of active sessions, it fails be-
cause the end timestamp of ﬂow records frequently does not
reﬂect the precise time of the ﬁnal packet of a ﬂow. The
inaccurate timestamps extend ﬂow durations and therefore
cause the number of sessions that should be active over a
series of time intervals to be overestimated. This inﬂation
1256 addresses in a full class C minus host address (.0) minus
broadcast address (.255) equals 254 usable addresses.
Figure 3: Harpoon’s ﬂow-based two-level hierarchi-
cal traﬃc model. Sessions are comprised of a series
of connections separated by durations drawn from
the inter-connection time distribution. Source and
destination IP address selection (A and B in the
ﬁgure) is weighted to match the frequency distribu-
tion of the original ﬂow data. The number of active
sessions determines the overall average load oﬀered
by Harpoon. A heavy-tailed empirical ﬁle size dis-
tribution and an ON/OFF transfer model generate
self-similar packet-level behavior.
exponential ping-pong. Each of these distributions can be
speciﬁed manually or extracted from packet traces or Net-
ﬂow data collected at a live router. These models enable the
workload generated by Harpoon to be application indepen-
dent or to be tuned to a speciﬁc application. The models
are combined in a constructive manner to create a series of
ﬁle transfer requests that results in representative ﬂow-level
network traﬃc.
4.
IMPLEMENTATION
A key feature of Harpoon is that it is self-conﬁguring.
Netﬂow logs or packet traces are used for parameterization
without any intermediate modeling step, obviating the need
for Harpoon users to become experts in distribution and
parametric estimation. In this section, we ﬁrst discuss the
relevant implementation issues and limitations in transform-
ing ﬂow records into a suitable conﬁguration for Harpoon.
We follow with a description of the implementation of the
traﬃc generation component of Harpoon.
4.1 Self-Conﬁguration
The self-conﬁguration phase of Harpoon takes ﬂow records
as input and generates the necessary parameters for traﬃc
generation. The key parameters are distributional estimates
of (1) ﬁle sizes, (2) inter-connection times, (3) source and
destination IP addresses, (4) and the number of active ses-
sions. We divide the input ﬂow records into a series of in-
tervals of equal duration to generate the number of active
sessions in order to match average byte, packet, and ﬂow vol-
umes of the original data over each interval. We also discuss
below how the interval duration, a conﬁgurable parameter,
is set. For each parameter, we use the empirical distribu-
tion derived from the original ﬂow or packet data and do not
attempt ﬁtting to a known distribution (although Harpoon
could be trivially enhanced to generate variates from known
distributions).
File Sizes Flow records contain packet and byte counts, so
a ﬁrst approximation of ﬁle sizes (ﬂow payload sizes) can be
extracted by ByteCount−P acketCount∗40 (assuming no IP
or TCP options). To this calculation we make the following
is modulated to achieve number of active sessionssource and destination addressesare assigned to active sessions toobtain desired spatial distributiondesired volumes   										
inter−connection times...individual filessource port, dest port>blocks representABsession levelconnection levelTable 1: Summary of Harpoon conﬁguration parameters for TCP sources.
Parameter
PF ileSize
PInterConnection
PIP Rangesrc and
PIP Rangedest
PActiveSessions
IntervalDuration
Description
Empirical distribution of ﬁle sizes transferred.
Empirical distribution of time between consecutive TCP connections initiated by an
IP source-destination pair.
Ranges of IP addresses with preferential weights set to match the empirical frequency
distributions from the original data.
The distribution of the average number of sessions (IP source-destination pairs) active
during consecutive intervals of the measured data. By modulating this distribution, Harpoon can
match the temporal byte, packet and ﬂow volumes from the original data.
Time granularity over which Harpoon matches average byte, packet and ﬂow volumes.
Table 2: Summary statistics of diﬀerences (in mil-
liseconds) between Netﬂow timestamps from a Cisco
6509 and ﬂow records generated from a DAG 3.5
packet trace.
timestamp mean median
standard
deviation
ﬂow begin
ﬂow end
19
454
0
461
8
254
could cause the byte, packet and ﬂow volumes generated by
Harpoon to exceed the original volumes. The inaccuracy
in the end timestamp may be caused by delays from wait-
ing until a ﬂow export packet or cache ﬁlls, or by lingering
out-of-order packets2 [7]. In contrast, ﬂow start timestamps
appear to accurately reﬂect the ﬁrst packet of a ﬂow (al-
lowing us to use them in calculating the inter-connection
times).
To quantify the timing inaccuracies introduced by Net-
ﬂow, we generated traﬃc through a Cisco 6509, capturing
Netﬂow records from the router and simultaneously tak-
ing a packet trace using a high precision DAG 3.5 capture
card3 [4]. Table 2 shows the sample mean, median, and stan-
dard deviation for begin and end timestamp diﬀerences in
milliseconds. While most diﬀerences in the begin timestamp
are zero (note the median) and otherwise quite small, dif-
ferences in the end timestamp are, on average, signiﬁcantly
larger. These end timestamp diﬀerences, when compounded
over several thousand ﬂows per minute (see Figure 8(c), for
example) cause our initial algorithm to fail. On the other
hand, using ﬂow records constructed from raw packet traces
with accurate timestamps leads to a good match. Results for
the Auckland trace, described in Section 5, were generated
in this way.
The revised approach we take for tuning the number of ac-
tive sessions is outlined in the pseudocode shown in Figure 4.
We ﬁrst make the assumption that, in the overwhelming ma-
jority of cases, a ﬁle request made during interval Ij is also
completed during interval Ij. This assumption is reasonable
based on relatively large values for IntervalDuration, such