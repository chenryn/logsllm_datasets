9
12
18
24
(cid:3)
32
36
48
54
1=2, BPSK
3=4, BPSK
1=2, QPSK
3=4, QPSK
1=2, 16-QAM
2=3, 16-QAM
3=4, 16-QAM
2=3, 64-QAM
3=4, 64-QAM
b/s/Hz
0:5
0:75
1:0
1:5
2:0
2:66
3:0
4:0
4:5
via control packets, which uses it to make rate adaptation de-
cisions. SoftRate’s evaluation [33] shows that it outperforms
almost all conventional rate adaptation techniques, so we com-
pare against it as a representative of the best possible practical
rate adaptation technique.
Before describing the experiments in detail, we brieﬂy summarize
our ﬁndings:
(cid:15) In our testbed experiments, Strider achieves a throughput that
is within 5% of the omniscient scheme across a wide range
of SNRs (5-25dB). Note that Strider has no knowledge of the
channel SNR, while the omniscient scheme has perfect ad-
vance knowledge.
(cid:15) Strider eliminates hidden terminals in our testbed. Further,
Strider achieves at least as good a throughput as the omniscient
scheme which uses a collision free scheduler in most scenarios,
and in the majority of the cases outperforms it.
(cid:15) In comparison with SoftRate [33], a state of the art rate adap-
tation technique, we show that Strider outperforms by nearly
70% in mobile scenarios.
(cid:15) In networks with contention and hidden terminals, Strider pro-
vides a throughput gain of 2:8(cid:2) over SoftRate and 60% over
the omniscient scheme.
9.
INDOOR TESTBED EXPERIMENTS
In this set of experiments, we evaluate Strider using experiments
in our indoor testbed of USRP2s. We compare with the omniscient
scheme, since current USRP2s do not meet the timing requirements
needed to implement dynamic rate adaptation techniques such as Sof-
tRate. However note that the omniscient scheme is an upper bound
on the performance of any conventional rate adaptation technique.
9.1 Strider’s Rateless Conversion
Method: In this experiment, we randomly place two USRP2 nodes
in our testbed and measure the SNR of the link. We then trans-
mit 1000 packets between the two nodes. For omniscient scheme,
we transmit using all the different bitrates, and pick the one which
achieves the maximum throughput. For Strider, we use Strider’s en-
coding and decoding algorithm. We repeat this experiment 10 times
Mobility Trace PathFigure 4: A) Strider performs almost as well as the omniscient scheme at all SNRs. B) Strider works fairly well even when the transmitter has a
small amount of data to transmit. C) Strider’s performance at high SNRs can be improved by selecting higher rate static codes.
(C)
(A)
(B)
for the same location of the nodes and take the average throughput for
either scheme, expressed in terms of bits/second/Hz. We then change
the locations of the two nodes to get a different SNR and repeat the
above procedure. We plot the average throughput achieved by the
two schemes vs SNR in Fig. 4.
Analysis: As Fig. 4 shows, Strider achieves a throughput that is
atleast within 5% of the omniscient scheme at all SNRs between
4(cid:0)24dB. We comment on two regions of the graph. First, at medium
to low SNRs (4 (cid:0) 16dB), Strider often outperforms the omniscient
scheme. The reason is that Strider has more granular steps, in fact
it can achieve K = 33 different effective bitrates. The omniscient
scheme is choosing within a relatively smaller set, the 10 different
channel coding and modulation choices listed in Table 1. Hence at
certain SNRs, the omniscient scheme is limited by the choices it has.
However, note that Strider is close to the omniscient scheme at every
SNR, implying that even if the omniscient scheme had more choices,
it could not have done better than Strider.
On the other hand, Strider is around 5% worse at high SNRs greater
than 18dB. The same granularity that helped Strider at the medium
and lower SNRs slightly hurts Strider in the high SNR region. Re-
member that Strider’s effective throughput drops as 2(cid:3)33=5M where
M is the number of transmissions needed. Hence, when M is small
(around 2 (cid:0) 5), then the effective bitrate exhibits jumps.
In high
SNR regions, Strider decodes using 2 (cid:0) 5 transmissions, and does
not have the high ﬁdelity to achieve close to the omniscient in this
region. However, Strider is still only 5% off omniscient.
How sensitive is Strider to buffering?: Strider buffers data so that it
has enough to form a batch of blocks that it can code over. However,
in practice some applications might not generate enough trafﬁc to ﬁll
the buffer, and hence Strider might need to work with smaller buffers.
Strider can handle these by changing two parameters: the size of a
block, as well as the number of blocks in a batch. We conduct an
experiment where the sender has different amounts of buffered data
available, and picks the best block and batch size for that buffer size.
We plot the average throughput vs SNR for buffer size in Fig. 4(b).
Analysis: Fig. 4(b) shows that Strider works fairly well even when
the buffer size is as small as 4KB. There is a slight underperformance
at medium SNRs (12-16dB). The reason is that at small buffer sizes,
Strider has to use a smaller batch size than the normal value of 33.
The smaller batch size impacts the granularity of the effective bitrates
Strider can achieve, and leads to slightly lower effective throughputs.
But overall, Strider works fairly well even when there is only a small
amount of data (4KB) to transmit.
In the extreme case where the
amount of data queued up at the transmitter is smaller than 4KB,
Strider might be overkill. In such cases, the sender can simply use a
ﬁxed low rate code to transmit the packet, and switch to Strider only
when the outstanding buffer is greater than 4KB.
On the other hand larger buffers (i.e. larger batch sizes) slightly im-
prove performance, especially at high SNRs. However, larger batch
sizes come with the obvious tradeoff of needing more buffering at the
transmitter. We chose K = 33 as the default since it gives good per-
formance across our target SNR range, however the designer is free
to choose a higher batch size if he wishes to target higher SNRs.
Impact of Static Code Choice: Strider’s parameters, the 1/5 static
code rate and the QPSK modulation, were picked to obtain the best
performance in our target SNR range of 3 (cid:0) 25dB that is commonly
found in deployed wireless networks. In the following experiment we
vary the static code rate to check if Strider is sensitive to that choice.
We note that varying the modulation is not necessary, since as we
discussed in Sec. 6 what really matters for Strider’s performance is
the rate at which information is encoded in a block, because that pa-
rameter dictates the minimum distance required to decode a block.
Changing the static code while keeping the QPSK modulation is suf-
ﬁcient to control the encoding rate of a block. We plot the average
throughput vs SNR for different static code choices in Fig. 4(c).
Analysis: Fig. 4(c) plots the relative performance of different static
code choices in Strider. As we can see, at most SNRs the different
static code rates among the convolutional family do not make a big
difference. The differences again are at high SNRs, and is mostly due
to the granularity of the effective bitrates achieved for different static
code rates. Higher static code rates (e.g. 1/4 code rate) in fact perform
better at higher SNRs, achieving nearly 5.5b/s/Hz at SNRs> 22dB.
Thus changing the static code rate provides the designer another lever
if he wishes to optimize Strider for higher SNRs, outside our current
target range of 3 (cid:0) 25dB.
9.2 Strider’s Collision Decoding
To evaluate Strider with collisions, we set up hidden terminal sce-
narios in our testbed using USRP2 nodes. To evaluate if a particular
node conﬁguration is a hidden terminal scenario, we implement a
simple threshold based carrier sense on the USRP2 nodes and check
if they can carrier sense each other. The two hidden terminal nodes
transmit to a ﬁxed third USRP2 node, which acts as the receiver.
Method: We compare against the omniscient collision-free scheme
where the two senders take turns transmitting 1000 packets to the
receiver, and use the maximum error free bitrate for their channels
during their transmissions. For Strider, the two senders transmit con-
currently and the collided packets are decoded at the receiver using
the Strider collision decoding algorithm. We compute the average
throughput achieved by the omniscient scheme and Strider over 10
consecutive runs. We plot the CDF in Fig. 5(A).
Analysis: Fig. 5(A) shows that Strider surprisingly outperforms the
omniscient collision free scheduler in most of the scenarios! The me-
dian throughput gain over the collision-free scheduler is nearly 30%.
The reason is that in a hidden terminal scenario, if one node has a
SNR (dB)Throughput (b/s/Hz)Throughput Comparison: Unknown SNR012345581114172023OmniscientStriderThroughput (b/s/Hz)Throughput Comparison: Buffering at TxmitterSNR (dB)012345581114172023Strider (4KB)Strider (6KB)Strider (8KB)Strider (10KB)OmniscientSNR (dB)Throughput (b/s/Hz)Throughput Comparison: Static Code Choices0123456581114172023Strider (1/5 Static Code Rate)Strider (1/4 Static Code Rate)Strider (1/6 Static Code Rate)Omniscientstronger channel than the other, then collision-free scheduling is ac-
tually suboptimal. The collision-free scheduler allows both nodes
to transmit an equal number of packets, however the node with the
weaker channel will take longer to transmit the same number of pack-
ets. Consequently, even though the node with the stronger channel
can achieve higher rates when he is given the chance to transmit, he
is limited due to the weaker channel node. Hence overall network
throughput drops.
Strider on the other hand lets both nodes transmit concurrently and
decodes from collisions. When the two senders have equal channels,
it achieves the same throughput as the omniscient scheme. When
the channels are unequal, the node with the stronger channel gets his
packets decoded ﬁrst, and moves on to the next chunk. Hence, unlike
the collision-free omniscient scheme it does not have to wait for the
weaker node to ﬁnish. Consequently, the medium is better utilized
and leads to higher overall network throughput.
Impact of Relative SNRs: To better understand the above phenomenon,
we conduct the following controlled experiment. We focus on a spe-
ciﬁc hidden terminal scenario where the SNRs of either sender to the
receiver (when they are transmitting separately) is the same at around
10dB. We then keep one sender (lets say Bob) ﬁxed and move the
other sender (lets say Alice) closer to the receiver. For each location,
we measure the average throughput achieved by Strider and the omni-
scient collision-free scheme as described in the previous experiment.
We plot the relative throughput (i.e Strider throughput normalized by
omniscient throughput) vs relative SNR (SNR of Alice - SNR of Bob)
for both schemes in Fig. 5(B).
As Fig. 5(B) shows, the throughput of the collision free scheduler
is slightly better ((cid:25) 5%) than Strider when the relative SNR is close
to zero. The reason is that for Strider’s decoding algorithm to get
kickstarted, it needs to be able to decode the ﬁrst block. But when
the relative SNR is close to zero, Strider can take a long time before
the ﬁrst block can get decoded since collisions from the second node
are treated as noise. However, as Alice moves closer to the receiver
and her channel improves, Strider’s throughput increases relative to
the collision-free scheduler. The reason is that Alice’s packets are
decoded faster, while Bob achieves a throughput that is commensu-
rate with his channel. In the collision-free omniscient scheme, even
though Alice’s channel has improved, she cannot take full advantage
of it because Bob monopolizes the channel time to transmit his pack-
ets. When the SNR gap is nearly 10dB, the overall throughput is
nearly 50% better than the collision-free scheduler.
10. TRACE DRIVEN EMULATION
Although Strider can run in real time on a USRP2 connected node,
similar to prior work [33, 11] we turn to trace driven emulation to
compare Strider with SoftRate, a state of the art conventional rate
adaptation technique. This is for two reasons. First, SoftRate requires
estimated BER control feedback immediately after every transmis-
sion from the receiver to the sender, but the USRP2s are not equipped
to quickly transmit ACKs after a packet is received. Second, we want
to compare the schemes over varied channel conditions, from static
to rapidly changing, from no contention to heavy contention, to as-
sess how consistently they perform across all scenarios. However, it
is hard to generate controllable high-mobility and high-contention in
experimental settings.
Trace: We collect real channel information for the simulations via
two traces: one for mobility and the other for contention. We use the
Stanford RUSK channel sounder [22] to collect channel state infor-
mation for a 20MHz 802.11 wireless channel. The channel sounder is
an equipment designed for high precision channel measurement, and
provides almost continuous channel state information over the entire
(A)
(B)
Figure 5: A) Strider eliminates hidden terminals. B) Strider’s overall
throughput improves as Alice is moved closer to the receiver.
measurement period, and can measure channel SNRs as low as -3dB.
Our experiments are conducted at night on the band between 2:426
and 2:448GHz which corresponds to WiFi channel 6, and include
some interference from the building’s WiFi infrastructure which op-
erates on the same channel.
(cid:15) Mobility Trace: A mobile channel sounder node is moved at
normal walking speed ((cid:25)3mph) in the testbed and the channel
sounder node at the center (the blue node at the center of the
testbed ﬁgure 3) measures the channel from the mobile node.
These nodes record and estimate detailed channel state infor-
mation for all frequencies in the 20Mhz channel, and therefore
include frequency selective fading which we would not have
seen with USRP2s that operate on 6:25Mhz bands. We collect
around 100000 measurements over a 100 second period, and
get a CSI sample every 1ms for one trace. We use 10 different
walking path to collect 10 different mobility traces.
(cid:15) Contention Trace: The channel sounder is placed at ten differ-
ent locations in our testbed, and their channel to the central blue
node is measured over a period of 100 seconds similar to the
mobility traces above. We therefore collect 10 such traces. We
also place two USRP2 nodes at all pairs of these 10 locations
and use our hidden terminal technique described in Sec. 9.2 to
determine if the two nodes are hidden terminals. We record
this information along with the trace.
Emulator: We feed this trace to a custom emulator written using
the the MIT Gnuradio OFDM Code [33] and Strider’s implementa-
tion. For Softrate, the emulator implements a 802.11 style PHY aug-