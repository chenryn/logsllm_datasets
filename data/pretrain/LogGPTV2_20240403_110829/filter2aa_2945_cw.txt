propertyName)
    {
        if (PropertyChanged != null)
        {
            PropertyChanged(this,
                new PropertyChangedEventArgs(propertyName));
        }
    }
}
The OnPropertyChanged method raises the PropertyChanged event.
The PropertyChangedEventArgs parameter to the PropertyChanged
event should specify the name of the property that has changed. This
value is passed in as a parameter to the OnPropertyChanged method.
Download from finelybook PI:EMAIL
964
Note You can reduce the code in the OnPropertyChanged method
to a single statement, using the null conditional operator (?.) and
the Invoke method, like this:
Click here to view code image
PropertyChanged?.Invoke(this,
    new PropertyChangedEventArgs(propertyName));
However, my personal preference is to prefer readability over
terse code; it makes it easier to maintain your applications.
6. Modify the property set accessors for each of the properties in the
Customer class to call the OnPropertyChanged method whenever the
value that they contain is modified, as shown in bold here:
Click here to view code image
public class Customer : INotifyPropertyChanged
{
    public int _customerID;
    public int CustomerID
    {
        get => this._customerID;
        set
        {
            this._customerID = value;
            this.OnPropertyChanged(nameof(CustomerID));
        }
    }
    public string _title;
    public string Title
    {
        get => this._title;
        set
        {
            this._title = value;
            this.OnPropertyChanged(nameof(Title));
        }
    }
    public string _firstName;
Download from finelybook PI:EMAIL
965
    public string FirstName
    {
        get => this._firstName;
        set
        {
            this._firstName = value;
            this.OnPropertyChanged(nameof(FirstName));
        }
    }
    public string _lastName;
    public string LastName
    {
        get => this._lastName;
        set
        {
            this._lastName = value;
            this.OnPropertyChanged(nameof(LastName));
        }
    }
    public string _emailAddress;
    public string EmailAddress
    {
        get => this._emailAddress;
        set
        {
            this._emailAddress = value;
            this.OnPropertyChanged(nameof(EmailAddress));
        }
    }
    public string _phone;
    public string Phone
    {
        get => this._phone;
        set
        {
            this._phone = value;
            this.OnPropertyChanged(nameof(Phone));
        }
    }
    ...
}
The nameof operator
The nameof operator demonstrated in the Customer class is a little-
Download from finelybook PI:EMAIL
966
used but highly useful feature of C# in code such as this. It returns
the name of the variable passed in as its parameter as a string.
Without using the nameof operator, you would have had to use
hard-coded string values. For example:
Click here to view code image
public int CustomerID
{
    get { return this._customerID; }
    set
    {
        this._customerID = value;
        this.OnPropertyChanged("CustomerID");
    }
}
Although using the string values requires less typing, consider
what would happen if you needed to change the name of the
property at some point in the future. Using the string approach, you
would need to modify the string value as well. If you didn’t, the
code would still compile and run, but any changes made to the
property value at run time would not be notified, leading to
difficult-to-find bugs. Using the nameof operator, if you change the
name of the property but forget to change the argument to nameof,
the code will not compile, alerting you immediately to an error that
should be quick and easy to fix.
7. On the Debug menu, click Start Debugging to build and run the app
again.
8. When the Customers form appears, change the email address to
PI:EMAIL, and change the phone number to 222-2222.
9. Resize the window to display the app in the narrow view and verify that
the email address and phone number have changed.
10. Change the first name to James, expand the window to display the wide
view, and verify that the first name has changed.
11. Return to Visual Studio and stop debugging.
Download from finelybook PI:EMAIL
967
Using data binding with a ComboBox control
Using data binding with a control such as a TextBox or TextBlock is a
relatively straightforward matter. On the other hand, ComboBox controls
require a little more attention. The issue is that a ComboBox control actually
displays two things:
A list of values in the drop-down list from which the user can select an
item
The value of the currently selected item.
If you implement data binding to display a list of items in the drop-down
list of a ComboBox control, the value that the user selects must be a member
of this list. In the Customers app, you can configure data binding for the
selected value in the title ComboBox control by setting the SelectedValue
property, like this:
Click here to view code image
However, remember that the list of values for the drop-down list is hard-
coded into the XAML markup, like this:
Click here to view code image
This markup is not applied until the control has been created, so the value
specified by the data binding is not found in the list because the list does not
yet exist when the data binding is constructed. The result is that the value is
not displayed. You can try this if you like—configure the binding for the
SelectedValue property as just shown and run the app. The title ComboBox
will be empty when it is initially displayed, despite the fact that the customer
has the title of Mr.
There are several solutions to this problem, but the simplest is to create a
data source that contains the list of valid values and then specify that the
Download from finelybook PI:EMAIL
968
ComboBox control should use this list as its set of values for the drop-down.
Also, you need to do this before the data binding for the ComboBox is
applied.
Implement data binding for the title ComboBox controls
1. In Visual Studio, display the MainPage.xaml.cs file in the Code and
Text Editor window.
2. Add the following code shown in bold to the MainPage constructor:
Click here to view code image
public MainPage()
{
this.InitializeComponent();
    List titles = new List
    {
        "Mr", "Mrs", "Ms", "Miss"
    };
    this.title.ItemsSource = titles;
    this.cTitle.ItemsSource = titles;
    Customer customer = new Customer
    {
        ...
    };
    this.DataContext = customer;
}
This code creates a list of strings containing the valid titles that
customers can have. The code then sets the ItemsSource property of both
title ComboBox controls to reference this list (remember that each view
has a ComboBox control).
Note In a commercial app, you would most likely retrieve the list
of values displayed by a ComboBox control from a database or
some other data source rather than a hard-coded list, as shown in
this example.
Download from finelybook PI:EMAIL
969
The placement of this code is important. It must run before the statement
that sets the DataContext property of the MainPage form because this
statement is when the data binding to the controls on the form occurs.
3. Display the MainPage.xaml file in the Design View window.
4. Modify the XAML markup for the title and cTitle ComboBox controls,
as shown here in bold:
Click here to view code image
    ...
    ...
    ...
    ...
Notice that the list of ComboBoxItem elements for each control has been
removed and that the SelectedValue property is configured to use data
binding with the Title field in the Customer object.
5. On the Debug menu, click Start Debugging to build and run the
application.
6. Verify that the value of the customer’s title is displayed correctly (it
should be Mr). Click the drop-down arrow for the ComboBox control
and verify that it contains the values Mr, Mrs, Ms, and Miss.
7. Resize the window to display the app in the narrow view and perform
the same checks. Note that you can change the title, and when you
switch back to the wide view, the new title is displayed.
8. Return to Visual Studio and stop debugging.
Creating a ViewModel
Download from finelybook PI:EMAIL
970
You have now seen how to configure data binding to connect a data source to
the controls in a user interface, but the data source that you have been using
is very simple, consisting of a single customer. In the real world, the data
source is likely to be much more complex, comprising collections of different
types of objects. Remember that in MVVM terms, the data source is often
provided by the model, and the UI (the view) communicates with the model
only indirectly through a ViewModel object. The rationale behind this
approach is that the model and the views that display the data provided by the
model should be independent; you should not have to change the model if the
user interface is modified, nor should you be required to adjust the UI if the
underlying model changes.
The ViewModel provides the connection between the view and the model,
and it also implements the business logic for the app. Again, this business
logic should be independent of the view and the model. The ViewModel
exposes the business logic to the view by implementing a collection of
commands. The UI can trigger these commands based on the way in which
the user navigates through the app. In the following exercise, you will extend
the Customers app by implementing a model that contains a list of Customer
objects and creating a ViewModel that provides commands with which a user
can move between customers in the view.
Create a ViewModel for managing customer information
1. Open the Customers solution, which is located in the \Microsoft
Press\VCSBS\Chapter 26\ ViewModel folder in your Documents folder.
This project contains a completed version of the Customers app from the
previous set of exercises; if you prefer, you can continue to use your
own version of the project.
2. In Solution Explorer, right-click the Customers project, point to Add,
and then click Class.
3. In the Add New Items - Customers dialog box, in the Name box, type
ViewModel.cs, and then click Add.
You will use this class to provide a basic ViewModel that contains a
collection of Customer objects. The user interface will bind to the data
exposed by this ViewModel.
Download from finelybook PI:EMAIL
971
4. In the Code and Text Editor window displaying the ViewModel.cs file,
mark the class as public and add the code shown in bold in the following
example to the ViewModel class:
Click here to view code image
public class ViewModel
{
private List customers;
    public ViewModel()
    {
        this.customers = new List
        {
            new Customer
            {
                CustomerID = 1,
                Title = "Mr",
                FirstName="John",
                LastName="Sharp",
                EmailAddress="PI:EMAIL",
                Phone="111-1111"
            },
            new Customer
            {
                CustomerID = 2,
                Title = "Mrs",
                FirstName="Diana",
                LastName="Sharp",
                EmailAddress="PI:EMAIL",
                Phone="111-1112"
            },
            new Customer
            {
                CustomerID = 3,
                Title = "Ms",
                FirstName="Francesca",
                LastName="Sharp",
                EmailAddress="PI:EMAIL",
                Phone="111-1113"
            }
        };
    }
}
The ViewModel class uses a List object as its model, and
the constructor populates this list with some sample data. Strictly
speaking, this data should be held in a separate Model class, but for the
purposes of this exercise we will make do with this sample data.
Download from finelybook PI:EMAIL
972
5. Add the private variable currentCustomer shown in bold in the
following code to the ViewModel class, and initialize this variable to
zero in the constructor:
Click here to view code image
class ViewModel
{
    private List customers;
private int currentCustomer;
    public ViewModel()
    {
        this.currentCustomer = 0;
        this.customers = new List
        {
            ...
        }
    }
}
The ViewModel class will use this variable to track which Customer
object the view is currently displaying.
6. Add the Current property shown below in bold to the ViewModel class,
after the constructor:
Click here to view code image
class ViewModel
{
    ...
    public ViewModel()
    {
        ...
    }
    public Customer Current
    {
        get => this.customers.Count > 0 ?
this.customers[currentCustomer] : null;
    }
}
The Current property provides access to the current Customer object in
the model. If there are no customers, it returns a null object.
Download from finelybook PI:EMAIL
973
Note It is good practice to provide controlled access to a data
model; only the ViewModel should be able to modify the model.
However, this restriction does not prevent the view from being
able to update the data presented by the ViewMode; it just cannot
switch the model and make it refer to a different data source.
7. Open the MainPage.xaml.cs file in the Code and Text Editor window.
8. In the MainPage constructor, remove the code that creates the Customer
object and replace it with a statement that creates an instance of the
ViewModel class. Change the statement that sets the DataContext
property of the MainPage object to reference the new ViewModel object,
as shown here in bold:
Click here to view code image
public MainPage()
{
    ...
    this.cTitle.ItemsSource = titles;
    ViewModel viewModel = new ViewModel();
    this.DataContext = viewModel;
}
9. Open the MainPage.xaml file in the Design View window.
10. In the XAML pane, modify the data bindings for the TextBox and
ComboBox controls to reference properties through the Current object
presented by the ViewModel, as shown in bold in the following code:
Click here to view code image
    ...
    ...
    ...
    ...
    ...
    ...
11. On the Debug menu, click Start Debugging to build and run the app.
12. Verify that the app displays the details of John Sharp (the first customer
in the customers list). Change the details of the customer and switch
between views to prove that the data binding is still functioning
correctly.
13. Return to Visual Studio and stop debugging.