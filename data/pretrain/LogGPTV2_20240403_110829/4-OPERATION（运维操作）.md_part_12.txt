客户端:浏览器记住session文本的id为cookie,
客户端:下次访问,发送cookie可不用验证
如果web集群,采用轮询访问,使用session共享
# 3 案例3：PHP的本地Session信息
Session:在计算机中，尤其是在网络应用中，称为"会话控制"。Session
对象存储特定用户会话所需的属性及配置信息。这样，当用户在应用程序的 Web
页之间跳转时，存储在 Session
对象中的变量将不会丢失，而是在整个用户会话中一直存在下去。当用户请求来自应用程序的
Web 页时，如果该用户还没有会话，则 Web 服务器将自动创建一个 Session
对象。当会话过期或被放弃后，服务器将终止该会话。Session
对象最常见的一个用法就是存储用户的首选项。例如，如果用户指明不喜欢查看图形，就可以将该信息存储在
Session 对象中。
## session与cookie
首先，我大致的知道，session是一次浏览器和服务器的交互的会话，会话是啥呢？就是我问候你好吗？你回恩很好。就是一次会话，那么对话完成后，这次会话就结束了，还有我也知道，我们可以将一个变量存入全部的\$\_SESSION\[\'name\'\]中，这样php的各个页面和逻辑都能访问到，所以很轻松的用来判断是否登陆。
这是我之前理解的session，当然也是对的，只是解释的太肤浅，理解的太表面了，面试官如果听到这样的答案其实是不太满意的。我参考了其他的很多资料，彻底理解清楚session。
在说session是啥之前，我们先来说说为什么会出现session会话，它出现的机理是什么？我们知道，我们用浏览器打开一个网页，用到的是HTTP协议，学过计算机的应该都知道这个协议，它是无状态的，什么是无状态呢？就是说这一次请求和上一次请求是没有任何关系的，互不认识的，没有关联的。但是这种无状态的的好处是快速。
所以就会带来一个问题就是，我希望几个请求的页面要有关联，比如：我在www.a.com/login.php里面登陆了，我在www.a.com/index.php
也希望是登陆状态，但是，这是2个不同的页面，也就是2个不同的HTTP请求，这2个HTTP请求是无状态的，也就是无关联的，所以无法单纯的在index.php中读取到它在login.php中已经登陆了！
那咋搞呢？我不可能这2个页面我都去登陆一遍吧。或者用笨方法这2个页面都去查询数据库，如果有登陆状态，就判断是登陆的了。这种查询数据库的方案虽然可行，但是每次都要去查询数据库不是个事，会造成数据库的压力。
所以正是这种诉求，这个时候，一个新的客户端存储数据方式出现了：cookie。cookie是把少量的信息存储在用户自己的电脑上，它在一个域名下是一个全局的，只要设置它的存储路径在域名www.a.com下
，那么当用户用浏览器访问时，php就可以从这个域名的任意页面读取cookie中的信息。所以就很好的解决了我在www.a.com/login.php页面登陆了，我也可以在www.a.com/index.php获取到这个登陆信息了。同时又不用反复去查询数据库。
虽然这种方案很不错，也很快速方便，但是由于cookie
是存在用户端，而且它本身存储的尺寸大小也有限，最关键是用户可以是可见的，并可以随意的修改，很不安全。那如何又要安全，又可以方便的全局读取信息呢？于是，这个时候，一种新的存储会话机制：session
诞生了。
我擦，终于把session是怎么诞生的给圆清楚了，不容易啊！！！
好，session
诞生了，从上面的描述来讲，它就是在一次会话中解决2次HTTP的请求的关联，让它们产生联系，让2两个页面都能读取到找个这个全局的session信息。session信息存在于服务器端，所以也就很好的解决了安全问题。
3.1 问题
通过Nginx调度器负载后端两台Web服务器，实现以下目标：
部署Nginx为前台调度服务器
调度算法设置为轮询
后端为两台LNMP服务器
部署测试页面，查看PHP本地的Session信息
3.2 方案
使用4台RHEL7虚拟机，其中一台作为Nginx前端调度器服务器（eth0:192.168.4.5,eth1:192.168.2.5）、两台虚拟机部署为LNMP服务器，分别为Web1服务器（192.168.2.100）和Web2服务器（192.168.2.200），另外一台作为测试用的Linux客户机（192.168.4.10），拓扑如图-2所示。
![image003](media/image23.png){width="5.125694444444444in"
height="1.3416666666666666in"}
## 步骤一：部署后端LNMP服务器相关软件
**Web1:192.168.2.100 Web 2:192.168.2.200安装LNMP:**
**注意:以下部署LNMP服务器的操作，需要在两台后端服务器做相同的操作，下面我们以一台Web2服务器（192.168.2.200）为例，对Web1服务器执行相同操作即可。**
### 1）使用yum安装基础依赖包
\[root@web2 \~\]# yum -y install gcc openssl-devel pcre-devel
### 2）源码安装Nginx
\[root@web2 \~\]# tar -xf nginx-1.12.2.tar.gz
\[root@web2 \~\]# cd nginx-1.12.2
\[root@web2 nginx-1.12.2\]# ./configure \--prefix=/usr/local/nginx
\--user=nginx \--group=nginx \--with-http_ssl_module \--with-stream
\--with-http_stub_status_module
\[root@web2 nginx-1.12.2\]# make && make install #编译与安装
### 3）安装MariaDB数据库
\[root@web2 \~\]# yum -y install mariadb mariadb-server mariadb-devel
### 安装PHP
（php-fpm软件包在lnmp_soft中有提供）
\[root@web2 \~\]# yum -y install php php-mysql
\[root@web2 \~\]# cd lnmp_soft
\[root@web2 lnmp_soft\]# yum -y install php-fpm-5.4.16-42.el7.x86_64.rpm
#非光盘软件包,需要进入有安装包的目录里面安装
### 5）配置Nginx默认首页与动静分离
\[root@web2 \~\]# vim /usr/local/nginx/conf/nginx.conf
location / {
root html;
index index.php index.html index.htm;
}
#PHP动态网页转至如下 默认网页文件都是index.html,添加index.php为默认
location \~ \\.php\$ {
root html;
fastcgi_pass 127.0.0.1:9000;
fastcgi_index index.php;
\# fastcgi_param SCRIPT_FILENAME \$document_root\$fastcgi_script_name;
include fastcgi.conf; #记得修改
}
\# :set nu 开启行号,然后替换掉所有指定行的#(起始行,结束行s/#//)
## 步骤二：启动LNMP服务器相关的服务
### 1）启动Nginx服务
这里需要注意的是，如果服务器上已经启动了其他监听80端口的服务软件（如httpd），则需要先关闭该服务，否则会出现冲突。
\[root@web2 \~\]# systemctl stop httpd //如果该服务存在，则关闭该服务
\[root@Web1111 \]# useradd -s /sbin/nologin nginx #创建用户
\[root@Web1111 \]# /usr/local/nginx/sbin/nginx #启动nginx
\[root@Web1111 \]# ln -s /usr/local/nginx/sbin/nginx /usr/sbin/
#创建软连接
\[root@web2 \~\]# /usr/local/nginx/sbin/nginx
\[root@web2 \~\]# netstat -utnlp \| grep :80 #查看80端口是否是nginxz在用
tcp 0 0 0.0.0.0:80 0.0.0.0:\* LISTEN 32428/nginx
### 2）启动MySQL服务
\[root@web2 \~\]# systemctl start mariadb
\[root@web2 \~\]# systemctl status mariadb #查看是否运行正常端口:3306
### 3）启动PHP-FPM服务
\[root@web2 \~\]# systemctl start php-fpm
\[root@web2 \~\]# systemctl status php-fpm #查看php-fpm是否正常
\[root@web2 \~\]# netstat -utnlp \| grep php #查看php 使用的端口
tcp 0 0 127.0.0.1:9000 0.0.0.0:\* LISTEN 998/php-fpm: master
\[root@proxy vpn\]# ss -utnlp \|grep php #查看php 使用的详细情况
tcp LISTEN 0 128 127.0.0.1:9000 \*:\*
users:((\"php-fpm\",pid=1329,fd=0),(\"php-fpm\",pid=1328,fd=0),(\"php-fpm\",pid=1327,fd=0),(\"php-fpm\",pid=1326,fd=0),(\"php-fpm\",pid=1325,fd=0),(\"php-fpm\",pid=998,fd=6))
### 4）关闭SELinux、防火墙
\[root@web2 \~\]# setenforce 0
\[root@web2 \~\]# firewall-cmd \--set-default-zone=trusted #默认是没开启
## 步骤三：部署前端Nginx调度服务器
(在proxy主机:192.168.4.5上操作)
### 使用源码安装nginx软件选择模块
（如果Nginx软件包已存在可以忽略此步骤）
\[root@proxy \~\]# yum -y install gcc pcre-devel openssl-devel
\[root@proxy \~\]# tar -xf nginx-1.12.2.tar.gz
\[root@proxy \~\]# cd nginx-1.12.2
\[root@proxy nginx-1.12.2\]# ./configure
\--prefix=/usr/local/nginx #指定安装路径
\--user=nginx
\--group=nginx
\--with-http_ssl_module #开启SSL加密功能模块 SSL虚拟主机用
\--with-stream #TCP/UDP代理(四层)用
\--with-http_stub_status_module #开启状态页面模块
\[root@proxy nginx-1.12.2\]# make && make install
### 2）修改Nginx配置文件
Nginx配置文件中，通过upstream定义后端服务器地址池，默认调度策略为轮询，使用proxy_pass调用upstream定义的服务器地址池：
\[root@proxy \~\]# vim /usr/local/nginx/conf/nginx.conf
http{
.. ..
upstream webs {
server 192.168.2.100:80;
server 192.168.2.200:80;
}
server {
listen 80;
server_name localhost;
location / {
proxy_pass http://webs; #在此调用定义的webs集群
root html;
index index.php index.html index.htm;
}
}
\[root@proxy \~\]#ln -s /usr/local/nginx/sbin/nginx /usr/sbin
#添加软连接
\[root@proxy \~\]#nginx
\[root@proxy \~\]#nginx -s reload #重新加载配置文件
\[root@proxy \~\]# setenforce 0
\[root@proxy \~\]# firewall-cmd \--set-default-zone=trusted
\[root@proxy \~\]# firefox 192.168.4.5/index.php #按F5刷新显示不同的页面
### 3）浏览器访问测试页面验证。
\[root@client \~\]# curl
http://192.168.4.5/index.html        //查看是否有数据
为测试成功可先分别在Web1 Web2 中放入不同页面.
## 步骤五：部署测试页面(WEB1/WEB2相同操作)
### 1）部署测试页面(Web1服务器为例）。
测试页面可以参考lnmp_soft/php_scripts/php-memcached-demo.tar.gz。
\[root@web1 \~\]# cd lnmp_soft/php_scripts/
\[root@web1 php_scripts\]# tar -xf php-memcached-demo.tar.gz
\[root@web1 php_scripts\]# cd php-memcached-demo
\[root@web1 php-memcached-demo\]# cp -a \* /usr/local/nginx/html/
### 2）浏览器直接访问后端服务器的测试页面（Web1服务器为例）
\[root@web1 \~\]# firefox http://192.168.2.100 //填写账户信息
\[root@web1 \~\]# cd /var/lib/php/session/ //查看服务器本地的Session信息
\[root@web1 \~\]# ls
sess_ahilcq9bguot0vqsjtd84k7244 //注意这里的ID是随机的
\[root@web1 \~\]# cat sess_ahilcq9bguot0vqsjtd84k7244
**注意：**可用修改index.php和home.php两个文件的内容，添加页面颜色属性，以区别后端两台不同的服务器:\。
### 3）浏览器访问前端调度器测试（不同后端服务器Session不一致）。
\[root@client \~\]# google-chrome
http://192.168.4.5 ＃推荐使用google测试。
//填写注册信息后，刷新，还需要再次注册，说明两台计算机使用的是本地Session第二台主机并不知道你再第一台主机已经登录，第一台主机的登录信息也没有传递给第二台主机
# 4 案例4：PHP实现session共享
4.1 问题
沿用练习三，通过修改PHP-FPM配置文件，实现session会话共享，本案例需要在练习三的基础上实现：
配置PHP使用memcached服务器共享Session信息
客户端访问两台不同的后端Web服务器时，Session 信息一致
4.2 方案
在练习三拓扑的基础上，Nginx服务器除了承担调度器外，还需要担任memcached数据库的角色，并在两台后端LNMP服务器上实现PHP的session会话共享。拓扑结构如图-4所示。
1.  单服务器有session和cookie 防止重复登录
2.搭建集群服务器默认不共享session
3
## 步骤一：构建memcached服务
### 安装Memcached服务
（如果192.168.4.5上已经有本软件包，此步骤可以忽略）
\[root@proxy \~\]# yum -y install memcached
### 2）启动服务并查看网络连接状态验证是否开启成功：
\[root@proxy \~\]# systemctl restart memcached
\[root@proxy \~\]# netstat -anptu \| grep memcached
tcp 0 0 0.0.0.0:11211 0.0.0.0:\* LISTEN 2839/memcached
tcp 0 0 :::11211 :::\* LISTEN 2839/memcached
udp 0 0 0.0.0.0:11211 0.0.0.0:\* 2839/memcached
udp 0 0 :::11211 :::\* 2839/memcached
### 3）关闭SELinux、防火墙
\[root@proxy \~\]# setenforce 0
\[root@proxy \~\]# firewall-cmd \--set-default-zone=trusted
## 步骤二：在后端LNMP服务器上部署Session共享
注意：这些操作在两台后端Web服务器上均需要执行，以下操作以Web1（192.168.2.100）服务器为例。
### 1）为PHP添加memcache扩展
注意，因为后端两台web服务器(web1,web2)都需要连接memcached数据库，所以两台主机都需要安装PHP扩展模块(下面也web1为例)。
\[root@web1 \~\]# yum -y install php-pecl-memcache
### 2）修改PHP-FPM配置文件，并重启服务
注意，因为后端两台web服务器(web1,web2)都需要修改配置文件(下面也web1为例)。
\[root@web1 \~\]# vim /etc/php-fpm.d/www.conf //修改该配置文件的两个参数
//文件的最后2行
修改前效果如下:
php_value\[session.save_handler\] = files
php_value\[session.save_path\] = /var/lib/php/session
//原始文件，默认定义Sessoin会话信息本地计算机（默认在/var/lib/php/session）
+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
修改后效果如下:
php_value\[session.save_handler\] = memcache
php_value\[session.save_path\] = \"tcp://192.168.2.5:11211\"
//定义Session信息存储在公共的memcached服务器上，主机参数中为memcache（没有d）
//通过path参数定义公共的memcached服务器在哪（服务器的IP和端口）
\[root@web1 \~\]# systemctl restart php-fpm
## 步骤三：客户端测试
客户端使用浏览器访问两台不同的Web服务器。
操作步骤与练习三一致，最终可以获得相关的Session ID信息。
前面已完成:
Web1 Web2部署LNMP 访问测试完成
proxy部署nginx 前端调度,测试完成,
proxy 安装memcache数据库,telnet访问测试成功
给Web1 Web2上安装memcache扩展包:php-pecl-memcache
\[root@Web1111 html\]# yum -y install install php-pecl-memcache
\[root@Web1111 html\]# systemctl restart php-fpm.service
**扩展**
隐藏版本号,
打开Nginx主配置文件：nginx.conf，取消注释或添加配置语句。
http {
\# \...省略一些配置
  sendfile on;
  tcp_nopush on;
  keepalive_timeout 60;
  tcp_nodelay on;
server_tokens off;   #隐藏版本号，默认是注释掉的
  # \...省略一些配置
}
\[root@vm7 \~\]# curl -I www.tarena.com #测试查看
# NSD Operation DAY05
案例1：安装部署Tomcat服务器
案例2：使用Tomcat部署虚拟主机
案例3：使用Varnish加速Web