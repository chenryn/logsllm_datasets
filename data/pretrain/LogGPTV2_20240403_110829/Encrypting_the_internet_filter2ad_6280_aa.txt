title:Encrypting the internet
author:Michael E. Kounavis and
Xiaozhu Kang and
Ken Grewal and
Mathew Eszenyi and
Shay Gueron and
David Durham
Encrypting the Internet
Michael E. Kounavis
Intel Architecture Group
2111 NE 25th Avenue
Hillsboro, OR 97124
PI:EMAIL
Xiaozhu Kang
Intel Labs
2111 NE 25th Avenue
Hillsboro, OR 97124
PI:EMAIL
Ken Grewal
Intel Labs
2111 NE 25th Avenue
Hillsboro, OR 97124
PI:EMAIL
Mathew Eszenyi
Intel Labs
2111 NE 25th Avenue
Hillsboro, OR 97124
PI:EMAIL
Shay Gueron
Intel Architecture Group
Israel Development Center
PI:EMAIL
Haifa, Israel
David Durham
Intel Labs
2111 NE 25th Avenue
Hillsboro, OR 97124
PI:EMAIL
ABSTRACT
End-to-end communication encryption is considered neces-
sary for protecting the privacy of user data in the Inter-
net. Only a small fraction of all Internet traﬃc, however,
is protected today. The primary reason for this neglect is
economic, mainly security protocol speed and cost. In this
paper we argue that recent advances in the implementation
of cryptographic algorithms can make general purpose pro-
cessors capable of encrypting packets at line rates. This
implies that the Internet can be gradually transformed to
an information delivery infrastructure where all traﬃc is en-
crypted and authenticated. We justify our claim by present-
ing technologies that accelerate end-to-end encryption and
authentication by a factor of 6 and a high performance TLS
1.2 protocol implementation that takes advantage of these
innovations. Our implementation is available in the public
domain for experimentation.
Keywords
Secure Communications, Cryptographic Algorithm Acceler-
ation, SSL, TLS, HTTPS, RSA, AES, GCM
1.
INTRODUCTION
Today there are more than 50 million web sites in the In-
ternet [13]. However, only about 600,000 of those oﬀer SSL
security [7]. We believe that end-to-end Internet encryp-
tion and authentication is important for many diﬀerent rea-
sons. First people value their privacy, feeling uneasy when
someone listens on to their conversations or views what they
access in the Internet. Second, Internet services are prone
to numerous types of attacks such as phishing, virus, and
worm attacks resulting in identity thefts, denial of service
Permission to make digital or hard copies of all or part of this work for
personal or classroom use is granted without fee provided that copies are
not made or distributed for proﬁt or commercial advantage and that copies
bear this notice and the full citation on the ﬁrst page. To copy otherwise, to
republish, to post on servers or to redistribute to lists, requires prior speciﬁc
permission and/or a fee.
SIGCOMM’10, August 30–September 3, 2010, New Delhi, India.
Copyright 2010 ACM 978-1-4503-0201-2/10/08 ...$10.00.
and data breaches. The need for secure channel communi-
cation across the Internet becomes even more important due
to the ever increasing network traﬃc and number of online
transactions.
Despite the obvious need for end-to-end security in the
Internet, most of the traﬃc is not encrypted or protected
today. The primary reasons for this are protocol speed and
cost. Cryptographic algorithms consume millions of clocks
to execute on general purpose processors. Alternative ap-
proaches such as the use of specialized appliances work but
they are much more expensive [12] than doing the SSL/TLS
termination using general purpose hardware.
In this paper we address this problem by investigating
technologies that accelerate cryptography by factors. We
tackle this important networking problem using novel cir-
cuit technologies and mathematical tools. First, we present
a set of processor instructions [6] that accelerate the rounds
of the Advanced Encryption Standard (AES) resulting in
an overall acceleration gain of about 12x as compared to
other software solutions, for many modes of AES. Second we
present a set of software optimizations to implementations
of the Rivest Shamir Adleman (RSA) public key encryption
algorithm that oﬀer an additional 40% gain on the perfor-
mance of the public key portion of Internet transactions.
Third, we discuss how message authentication can be sup-
ported by the Galois Counter Mode (GCM) mode of AES
much more eﬃciently than other alternatives. Our GCM im-
plementation is based on another new processor instruction
[6] for doing carry-less multiplication and a new algorithm
for doing reduction in binary ﬁnite ﬁelds.
Combining our technologies and general purpose hard-
ware we build a TLS 1.2 server capable of supporting ap-
proximately 1200 banking transactions per second per pro-
cessor core, resulting in a 6x overall protocol performance
gain. The work entailed a protocol implementation change,
a proper cryptographic suite selection and hardware acceler-
ation. Moreover we show that only 8 processor cores running
at 3 GHz are needed to saturate a 10 Gbps link with TLS
1.2 traﬃc. Supporting 8 cores by general purpose hardware
can be achieved today.
The paper is structured as follows: In Section 2 we discuss
the motivation behind our project and research. In Section 3
we present related work. In Section 4 we present an overview
135of the SSL/TLS protocols and the AES and RSA crypto al-
gorithms, which we accelerate. The details of our crypto
acceleration technologies are presented in Section 5. Sec-
tion 6 discusses the development of a high performance TLS
1.2 protocol implementation that leverages our technologies
and Section 7 presents our performance results. Finally in
Section 8 we provide some concluding remarks.
2. MOTIVATION
The landscape of security today is that only traﬃc car-
rying sensitive information such as banking and Ecommerce
is encrypted.
In fact, most of the network traﬃc in our
everyday communication (e.g., e-mail, web surﬁng, instant
messaging, social networking and peer-to-peer applications)
is sent in the clear. We believe that end-to-end encryption
and authentication is important because people are sensitive
For example, people have
about their security and privacy.
the expectation that nobody else is listening to their conver-
sation when they have a phone call. Likewise people have
the expectation no one is eavesdropping on their Internet
traﬃc. Unfortunately, viewing Internet traﬃc is fairly easy
today.
1
It is equally easy to mislead the user to visit malicious
web sites. End users are typically not cognizant of the dis-
tinction between signed and unsigned URLs. If every URL
is signed then users can be conﬁdent that they are going to
the web sites they see in their URL. Because of this rea-
son, phishing attacks can be greatly reduced when TLS au-
thentication controls are always in place. Phishing is also
one method for enabling attacks caused by viruses, worms
and rootkits. Viruses and worms usually spread through e-
mail. With the right cryptographic mechanisms in place, the
sources of viruses and worms can be forced to expose parts
of their identity (e.g., through e-mail signing or DNSSEC)
and hence become accountable. This is a ﬁrst step toward
reducing virus and worm attacks. The study in reference
[44] analyzes virus-caused data breaches experienced by 43
U.S. companies in 17 diﬀerent industry sectors. It is found
that an average breach costs each company $6.6 million in
2008 [4, 39, 44].
Alarmingly, most of the HTTP traﬃc is still not encrypted
or protected [20, 43, 47]. Less than 10% of the world’s web
sites are HTTPS enabled today [7, 13]. This is primarily due
to the cost associated with providing this additional secu-
rity as well as the performance penalty overhead in providing
the additional cryptographic operations. It is perceived that
there is a tradeoﬀ between security and performance [11].
One thing in common between the various cryptographic al-
gorithms used today is the complexity and cost associated
with their implementation. For example encrypting the con-
tent of a typical 140 KB banking transaction requires 2.3-4.8
million clocks, depending on the implementation on a state-
of-the-art 3 GHz Intel R(cid:2) CoreTM i7 processor core. Sim-
ilarly, performing an RSA 1024 private decrypt operation
requires 0.9-1.4 million clocks on the same processor. The
total worst case cost related to cryptography, including the
SHA-1 overhead, for processing a 140 KB banking transac-
tion is 7.3 million clocks. These numbers mean that it is cost
prohibitive for general purpose processors to be used for pro-
tecting large amounts of HTTPS traﬃc at high link speeds.
Today dedicated appliances [2], supporting about 10K con-
current connections, are used for providing end-to-end secu-
1
Typically outside of national security concerns.
rity. Solutions employ dedicated hardware accelerators and
front end terminators for TLS connections.
In this paper we present an alternative methodology based
on using general purpose processors for achieving similar
performance. It should be understood that we are not solv-
ing the only problem related to Internet encryption. There
are other issues besides protocol speed and cost which need
to be tackled such as the generation, distribution and man-
agement of certiﬁcates. User privacy may also be violated at
the back-end server, even if the traﬃc is encrypted. Employ-
ing end-to-end security protocols such as TLS also prevents
existing tools such as intrusion detection/prevention systems
and traﬃc shapers from performing much needed network
functions. To address this problem, companion technologies
such as [24] can be used for enabling authorized access to
encrypted data.
3. RELATED WORK
Our work encompasses many aspects of cryptographic al-
gorithm acceleration [41, 42, 38, 27, 21, 36, 17, 29, 30, 5].
In what follows we summarize some representative pieces of
work and explain how our paper diﬀerentiates from them. In
the area of AES acceleration, several AES processing units
have been developed in the past [26, 45, 27]. The main dif-
ference between our work and references [26, 45, 27] is that
in our work AES is broken down to its fundamental com-
ponents (i.e., the Galois Field processing done by the round
transformations) and exposed as a set of instructions to the
programmer.
The concept of instructions for accelerating the rounds of
AES, which we use in our design, is also described in ref-
erences [23, 19]. The circuits of these references are based
on table lookups or more generic Galois computations and
hence may consume larger area and power than ours. An-
other aspect of our work is that we use composite ﬁeld tech-
nologies to reduce the area requirement of AES. Several com-
posite ﬁeld implementations of AES are reported in [41, 42,
38, 48, 18, 35]. These circuits however are mostly reported
in the context of ASIC AES implementations. What makes
our work diﬀerent from these pieces of work is that we are
among the ﬁrst to combine the concept of an AES round
instruction with the use of composite ﬁeld technologies for
reducing the area requirement. In this way we not only pro-
vide ﬂexibility to the programmer, but also reduce the area
requirement of the AES logic to such a degree that it can ﬁt
inside general purpose processor cores (see Section 5).
In the area of RSA software acceleration past research
has focused on the modular multiplication aspect of it (i.e.,
the Montgomery [36, 30] or Barrett [16] algorithms), on the
integer multiplication component [28, 46, 37, 31] or the win-
dowing technique used [29]. Eﬃcient software RSA imple-
mentations can be found in [8, 3]. Our work is diﬀerent
from these references in that the Montgomery algorithm is
reduced to 1.5 big number multiplications which are imple-
mented very eﬃciently using a register recycling technique.
Our work is also diﬀerent from [46, 31] since we use a more
eﬃcient set of integer multiplication routines.
Finally, in the area of message authentication, we pro-
pose a new GCM implementation which is much faster than
other schemes based on HMAC-SHA1 [34] and prior art for
implementing GCM [5] based on performing table lookups.
In our approach GCM is implemented by splitting the ﬁeld-
dependent from the ﬁeld-independent part of the algorithm
136and performing the ﬁeld-independent part (i.e., carry-less
multiplication) using a separate processor instruction.
Parts of our work have appeared at an earlier paper [25]
and presentation [32]. References [25, 32] present the AES
instruction proposal. This paper complements [25, 32] by
discussing how our instructions can be implemented eﬃ-
ciently as well as how other algorithms like RSA and GCM
can be accelerated within the context of TLS 1.2.
4. SSL/TLS, AES & RSA
To further understand our improvements, we ﬁrst review
the family of SSL/TLS protocols and the internals of the
algorithms which we accelerate. Emphasis is placed on the
1.2 version of the TLS protocol because this version supports
combined mode algorithms (i.e., Authenticated Encryption
with Additional Data, AEAD) like GCM, which we study
in this paper.
4.1 Anatomy of a Secure Sockets Layer Ses-
sion
With the continuous growth of the World Wide Web [15],
HTTPS has become the de facto standard for end-to-end se-
cure communication where data sensitivity and privacy are
required. The SSL/TLS protocol has evolved over the last
15 years to a state where it is the most widely deployed end-
to-end security protocol today, with its primary use in pro-
tecting HTTP communications. The protocol can be divided
into two parts - connection setup (also called handshake or
control channel) and data exchange (also called data path or
record protocol). Figure 1 illustrates the handshake, which
is composed of diﬀerent phases.
In phase 1, a client requests a secure connection from a
server by sending a ‘hello’ message containing a unique ran-
dom number (cookie, serving as unique identiﬁer for this
connection) and a list of supported cipher suites.
If the
server supports one of the oﬀered cipher suites, it responds
with its own cookie and the chosen cipher suite. The server
also sends its certiﬁcate containing the server’s identity and
public key. The client veriﬁes the server’s certiﬁcate and ex-
tracts the server’s public key. The client generates a random
string, called a pre-master secret, and encrypts this using
the server’s public key (ensuring that only the server can
decrypt this secret), sending this to the server in phase 3.
The server decrypts the pre-master secret using its private
key, which is a very compute-intensive operation. At this
stage, the client and server share a secret value (pre-master
secret) and a set of cookies, so are able to independently
compute a set of cryptographic keys based on a well-deﬁned
formula called a Key Derivation Function (KDF).
In phases 5 and 6, the handshake ends with both parties
sending ‘authentication codes’ based on the derived keying
material, ensuring each side has computed the keys correctly.
Now the data exchange phase can be started. Other func-
tions of the TLS (e.g., session resumption) are not covered
here.
Data is transferred within TLS using a record protocol.
The record protocol breaks a data stream into a series of
fragments, each independently protected. Before a fragment
is transmitted, TLS protections are applied to each frag-
ment. These include data authenticity, data conﬁdentiality
and optionally compression. A record header is added to the
payload before sending down the network stack.
client
server
supported ciphers, random number
f i a t e
r a n d o m n u m b e r , c e r t i f i c a t e
pre-master secret
c h o s e n c i p h e r ,
phase 2
phase 4
computation of keys
authentication codes on
handshake messages
phase 1
phase 3
phase 5
phase 6
Figure 1: Secure Sockets Layer (SSL) Handshake
4.2 Combined Mode Support within TLS 1.2
TLS 1.2 introduces some subtle changes in the data path,
where in the case of AEAD an explicit Initialization Vector
(IV) is transmitted as part of a packet. TLS 1.2 supports
AEAD based combined mode algorithms such as AES-128
GCM. Advantages of AEAD algorithms (e.g., AES GCM)
over discrete mode algorithms (e.g., AES with HMAC-SHA1)
is the ability to compute the cipher text and authentication
tag using a single pass over the payload. Furthermore, using
AES in the counter (CTR) mode allows eﬃcient pipelining
and parallelization, permitting concurrent crypto operations
on multiple data blocks. Today, there are only few imple-
mentations supporting TLS 1.2 (GnuTLS & yaSSL claim
supporting TLS 1.2, but they have not taken advantage of
AEAD algorithms). Due to this limited deployment, the in-
dustry is unable to take advantage of the performance bene-
ﬁts oﬀered by TLS 1.2. In this paper, we describe integration
of TLS 1.2 and AES-128 GCM within the open source im-
plementation of the OpenSSL library, in order to illustrate
the resultant performance gains. Below, we elaborate on the
subtleties of crypto algorithms and how they are optimized
further from a networking performance and cost perspective.
4.3 AES
AES is the United States Government’s standard for sym-
metric encryption, deﬁned by FIPS 197 [1].
It is used in
a large variety of applications where high throughput and
security are required.
In HTTPS, it can be used to pro-
vide conﬁdentiality for the information that is transmitted
over the Internet. AES is a symmetric encryption algorithm,
which means that the same key is used for converting a plain-
text to ciphertext, and vice versa. The structure of AES is
shown in Figure 2.
AES ﬁrst expands a key (that can be 128, 192, or 256
bits long) into a key schedule. A key schedule is a sequence