仁慈，特别是，团队都是由熟人和朋发组成的，对于私交甚好的朋
友就更难说出这些不仁慈的大实话了。
那个人的软件并发能力不行，这并不意味着他是坏人。我敢肯定，
我之所以相信他的部分借口，除了我极其乐观的态度外，还因为他
同时也在欺骗自己，把那些当做是他无法交付产品的真实原因。到
了最后，我不得不走出关键的一步，把那个消息告诉他。我相信技
巧高明的人能够在不破坏友谊的情况下做到这一点，但是很不幸，
我并不擅长。这就像是终止一段不太好的个人友谊一样，但是你已
经一而再、再而三地给他机会了。这是令人痛心的，因为当这种关
系成为你的一部分时，你并不想伤害这个人。但是不采取措施确实
不行，那该怎么办呢？可以说这是我必须学习的最艰难的经验。
Jenny：在你决定那样做之前，你感觉因为这个人以及他的借口给团
队动力带来了什么问题吗？
Alex：是的，带来了问题。那是一个初创企业，每个人对整个企业
的成功都倾注了很多。你拿到的只是最基本的工资，要等到公司取
得成功并占据了大量市场份额之后你才能挣到大钱。所以，你不仅
仅在职业上与公司的整体成功有关系，你的整个生活都投入到上面
了。让一个对你们成功有损害的人待在团队中是一点意义也没有
212
---
## Page 214
的。但是很难就此事进行交流，因为经理的工作不就是做这些的
吗？答案是肯定的。我没有做好我的工作一—没有做好所有的工
作。我在管理和技术贡献两方面都有很多其他的工作要做，忙不过
来，但是在这方面我显然没有做好，而它又是非常重要的。
团队其他成员都不错。当我重新做我的个体贡献者并找到另外一个
相当好的人来接受团队管理事务时，事情并始出现了明显的转机。
首先，我现在能够把100%的时间和精力都投入到软件开发中了；其
次，在那个时候，那个人显然是一个比我更出色、经验更丰富的
人。
Andrew：如果某个软件团队中的经理也存在这种问题，你会对这个
团队中的成员说些什么？你们那个团队的成员是否可以对你说些什
么，帮助你认识到情况有多么糟糕，这样你能够更快地处理那个问
题了？
Alex：有很多种可能性，我对此做过很多内省。我敢肯定我不是有
意欺骗自己。人们有一种强烈的倾向，不愿意相信发生的事情，或
者认为事情也许自已会得到解决。就像某个人不愿意去看牙科医
生，并不是因为他强烈地认为自己的牙齿没有什么问题，而是因为
他害怕看病时的疼痛，所以才不去找牙医的。这是不对的，但人性
就是如此。如果现实要求我们采取费时费力的行动并承担痛苦的结
果，那么这种残酷的现实是谁都不愿意面对的。
比如你刚才假想的那个人，他意识到：“我们这个6人的团队如果是
6个人就太好了，因为另外那个人没有作出正面的贡献，只是在搞
破坏，而经理对这些却完全视而不见。”如果是一个小公司或一个
初创企业，整个团队的成功对于每个人都至关重要，情况就更加明
显了。受影响的人也包括经理本人。
他应当怎样告诉经理呢？这和经理告诉那个表现不佳的人一样困
滩，特别是如果不是面对面去谈的时候。如果他意识到那个人不能
胜任工作，其他一些同伴可能也能看到这一点。如果有两三个人能
够一起去找经理，把自已的不好的感受告诉经理，事情就容易得多
了。经理显然需要由几个人反映意见，如果你能找两三个同事一起
去把坏消息告诉他，那就一起去。
顺便说一下，这类事情必须面对面谈地交谈。在你给别人坏消息的
时候，你需要为肢体语言和面对面交流所表露的感情提供一个交流
213
---
## Page 215
渠道，所以我无法想象自己会通过电子邮件、电话或即时通信软件
做这些事情。同时，非常关键的是你要能够在感情上予以安慰：
“你工作做得不好并不等于你是一个坏人。只是说明你出了岔子，
应当做点其他事情。”这类东西像那些最坏的消息一样，如果面对
面交流的话会好得多。
Jenny：你认为那个团队的成功与失败在多大程度上取决于你作为经
理的角色，有多少来自团队本身的动力？
Alex：这将依赖于团队经理的成功，因为大致说来，团队经理的成
功就是团队的成功。但是经理不一定是我。实际上，我退居二线，
成为了一名高级个体贡献者，另外一个人承担了管理的责任，接着
事情就变得好多了。那是大约20年前的事情，但我并不认为人类的
本性有太多的变化。技术上发生了很大变化，人性却没有多少变
化。
技术和方法两个因素将使事情更为清晰——比如在20年前如果我们
能够有一个组织得并并有条的敏捷团队组织，如果每天并一次短
会，事情就好办多了。敏捷有一个特点，与传统的交流渠道相比
它能让实际情况更早地暴露出来。这对实际工作能够形成巨大帮
助，但又带来潜在风险，也是很多人都害怕采用敏捷的原因。
如果大家在早晨花上5分钟围在一起，大致讲讲昨天完成了什么事
情，今大将完成什么，遇到什么困滩，有谁可以帮助一下，你就不
可能长时间日复一日地隐瞒糟糕的表现了。事情会变得相当明显。
敏捷构成的方法能够提供很多更好的交流，这只是其中一个例子，
因此，不管情况是变好了还是变坏了，对自己或别人隐瞒情况都是
极其困滩的。典型的例子是敏捷估算（燃尽图或类似的东西）能够
非常清晰地描绘出进度。这显然会让每个人都感到痛苦：“伙计
们，这是我们的进度。这是实际能够完成的工作。如果坚持要拥有
开始时所接受的所有功能，进度就要延迟两个月。"这样的事情在
很多软件项目上都发生过，一般来说是人们不愿意承认的。他们也
许开始加班，甚至精疲力尽，但是到了最后仍旧不可避免地延期
了。如果到了很晚的时候才去采取措施，结果将是一场灾难。
有了敏捷方法的高可视性，就能够早早面对痛苦的现实了。你面对
现实越早，痛苦就越少。虽然仍旧痛苦，但那是修复问题所带来的
痛苦。如果发现得早，你可能不得不去掉一些功能，或是延迟几个
214
---
## Page 216
星期交付。但是如果你过了截止日期之后才意识到问题，那就太晚
了，不可能毫无痛苦地补救了。
Andrew：你认为敏捷方法有缺点嘛？
Alex：缺点是你无法隐瞒，对于很多开发人员和经理来说都非常恐
怖。最后项目失败，可能成为一个灾难，但是在大多数公司，特别
是大公司中，在预定交付的日期之前的两周，如果项目无法完成，
可能会有一次大的重组，这个项目消失了，不会在你的个人记录上
打个低分。在某种感觉上就像是中了彩票，但是人们总是希望避免
对他们的职业形成损害。从团队的观点看、从公司的观点看或从任
何一个希望软件交付并将要使用软件的人的角度来看，我认为无法
隐瞒都不是缺点，但是对于经理和团队成员来说却很恐怖，因为他
们什么事情都无法隐瞒。这样做可以让事情清楚，让每个人参与者
都很清楚。
另外一件事，我在前面谈到给别人带去坏消息时已经提到了，在我
有限的经验中，我不知道如何让敏捷在分布式团队中运作起来。我
知道有人能够做到，我很羡慕他们，但是按照我的经验，如果团队
不在一个地方工作，很多交流带来的额外好处都将消失。我没有什
么好的解决方案，如果你必须与一个完全分散的团队一起工作，我
没有什么能够让团队运作起来的方灵药。但是我怀疑常见的Scrum
经验也不能很好地处理这个问题。
Andrew：你提到了团队中两件非常重要的事情：透明，也就是无所
隐瞒，还有就是那种持续的交流。我觉得很有趣。
Jenny：我想很多开发方法，敏捷也好，其他方法也好，都关注透明
度，确保人们了解谁应当负责什么、进展如何。你说到像燃尽率和
项目将让其他人对这类信息更清晰。我希望你能多讲一些这方面的
内容，告诉我你为什么认为那些特定的实践会使它们更清晰，假设
说我不知道挣值管理或其他在各种项目（包括软件项目和其他项
目）在数十年中使用的其他工具。
Andrew：你是对的。我从来没有想到过那个方法，但是燃尽图（一
些敏捷项目）与挣值并不是完全不同。这个方法真的比他们用于构
造原子反应堆或宇宙飞船所使用的那种古板的、有50年历史的项目
管理方法更有效吗？
215
---
## Page 217
Alex：燃尽图形成了一种项目组成员都易于理解的、通用的语言，
所以我认为它特别有效。我们永远都不能忘记外部的利益相关者，
我们将合适的软件按时在预算内交付使用，为的就是这些人。如果
你们做的是企业内部的开发工作，他们可能是内部客户，也可能是
产品经理。如果产品打算在市场上销售，他们也可能是市场人员，
还可能是任何一个在规格说明挖掘过程中承担客户角色的人。
对于需要做些什么，哪些需要做好，哪些可以不做，为了完成并交
付那些任务需要多少成本，在把这些全部东西量化时会遇到问题，
而这些问题对团队来说又是至关重要的。（我在团队中包含了客
户，这是最佳的敏捷传统。）这些问题通过燃尽图可以非常有效地
沟通。你不能把某个事情说成“除了需要QA测试之外都已经完成
了。”如果还需要QA测试或是其他工作，那它就没有完成。完成的
意思就是完成了。完成意味着明关就可以交付了。
任何被检入、审批、接受的主干代码，任何一个调用功能部件的详
细过程在完成之后，就都应当可以在今天交付。这一点很重要。在
敏捷中，已完成这个单词的意思不像其他方法学中那样有引申的含
义。在估算和规划“首先做什么，然后做什么"时所产生的成本都是
透明的。没有什么魔杖可以免费地告诉你这些东西。在任何一个软
件并发项目中都不存在。确定下来需要做些什么，这是项目工作量
的最主要的一部分，在项目过程中还要做出调整，以便对客户和利
益相关者的需要作出响应。
Andrew：有些人认为"敏捷"和"我们对项目不做计划”是同一个意
思，你说的这些话可能会让他们感到非常吃惊。
Alex：对于所有那些通过僵化的、传统的方法中没有体现出来的但
又会导致进度延期的因素，如果使用敏捷并发和燃尽图，都可以被
视为软件并发过程的一个部分一—它们本应如此，因为它们处于软
件并发过程中的并始或关键的生命周期时间内。对团队不一定有那
么多关系，但是它与团队成员应当做的并发活动密切有关。所以，
我认为这是一枚硬币的两面。
如果把利益相关者、产品经理或客户也看作是团队的一部分，我想
你会说那才能算得上是一个团队，但是除了敏捷并发工作外，我没
有看到有这么做的。
216
---
## Page 218
Andrew：非常有趣，你把燃尽图和与客户交谈紧密联系在了一起。
燃尽图回答的问题完全是投入的工作量以及完成的工作。我喜欢你
使用的短语“正确的软件”，你还说到了如何才能知道项目是否结
束，是否还有需要完成的工作，特别是在他们认为项目已经“完成”
之后是否还要再找QA和测试人员不停地做一些事情。我很喜欢你
说的那些内容，因为如果翻开任何一本传统的质量教科书一—我说
的还不是软件质量，而是一般意义的软件工程，回到50年前，回到
戴明和朱兰的时代一—会发现那些实际上是教科书中定义的质量。
但是你把它们带到了敏捷开发环境中。
Jenny：构建正确的软件，符合需求，适于使用一—今天在敏捷工作
中，我们可能不使用那些传统的质量术语，但是它们仍旧出现在你
所讨论的内容的背后，我觉得非常有趣。团队每天开一次这样的会
议，看看这些图形，在白板上列出任务，你几乎把质量与采取这种
实践的团队直接联系起来了，你实际上看到的是传统的质量定义。
我认为很多软件人员都不会做出这种关联。
Andrew：它对团队有巨大的影响一—对于他们在一起工作的方式和
他们的士气有着巨大影响。还有一些其他传统的质量思想，很显然
是敏捷的一部分，对吗？拥抱变化是敏捷过程的一个重要部分。但
是对变化作出响应，确保利益相关者有提出变更的渠道，那也是传
统项目管理的一个重要部分。那些对团队士气也有影响吗？
Alex：大多数敏捷过程都是周期性地丰富起来的，我认为在这种特
定的情况中，这种本质的特点将发挥作用。假如说，对一些非常大
的项目每月进行一次选代，或对可能小一些或进展迅速的项目进行
两周一次的选代，你肯定会发现事情在每次选代结束时发生变化，
因为在每次送代过程结束的时候，都会花一些时间来做一次回顾：