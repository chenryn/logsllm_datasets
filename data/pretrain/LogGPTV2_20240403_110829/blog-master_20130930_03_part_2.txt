# define _SDT_ASM_2(a, b)               _SDT_S(a) "," _SDT_S(b) "\n"  
# define _SDT_ASM_3(a, b, c)            _SDT_S(a) "," _SDT_S(b) "," \  
                                        _SDT_S(c) "\n"  
# define _SDT_ASM_5(a, b, c, d, e)      _SDT_S(a) "," _SDT_S(b) "," \  
                                        _SDT_S(c) "," _SDT_S(d) "," \  
                                        _SDT_S(e) "\n"  
# define _SDT_ASM_ARGS(n)               _SDT_ASM_STRING(_SDT_ASM_TEMPLATE_##n)  
# define _SDT_ASM_STRING_1(x)           _SDT_ASM_1(.asciz #x)  
# define _SDT_ARGFMT(no)                %n[_SDT_S##no]@_SDT_ARGTMPL(_SDT_A##no)  
# ifndef STAP_SDT_ARG_CONSTRAINT  
# define STAP_SDT_ARG_CONSTRAINT        nor  
# endif  
# define _SDT_STRINGIFY(x)              #x  
# define _SDT_ARG_CONSTRAINT_STRING(x)  _SDT_STRINGIFY(x)  
# define _SDT_ARG(n, x)                 \  
  [_SDT_S##n] "n" ((_SDT_ARGSIGNED (x) ? 1 : -1) * (int) _SDT_ARGSIZE (x)), \  
  [_SDT_A##n] _SDT_ARG_CONSTRAINT_STRING (STAP_SDT_ARG_CONSTRAINT) (_SDT_ARGVAL (x))  
#endif  
#define _SDT_ASM_STRING(x)              _SDT_ASM_STRING_1(x)  
#define _SDT_ARGARRAY(x)        (__builtin_classify_type (x) == 14      \  
                                 || __builtin_classify_type (x) == 5)  
#ifdef __cplusplus  
# define _SDT_ARGSIGNED(x)      (!_SDT_ARGARRAY (x) \  
                                 && __sdt_type::__sdt_signed)  
# define _SDT_ARGSIZE(x)        (_SDT_ARGARRAY (x) \  
                                 ? sizeof (void *) : sizeof (x))  
# define _SDT_ARGVAL(x)         (x)  
# include   
template  
struct __sdt_type  
{  
  static const bool __sdt_signed = false;  
};  
#define __SDT_ALWAYS_SIGNED(T) \  
template<> struct __sdt_type { static const bool __sdt_signed = true; };  
#define __SDT_COND_SIGNED(T) \  
template<> struct __sdt_type { static const bool __sdt_signed = ((T)(-1)  4 || (__GNUC__ == 4 && __GNUC_MINOR__ >= 4))  
/* __SDT_COND_SIGNED(char16_t) */  
/* __SDT_COND_SIGNED(char32_t) */  
#endif  
template  
struct __sdt_type : public __sdt_type {};  
template  
struct __sdt_type : public __sdt_type {};  
#elif !defined(__ASSEMBLER__)  
__extension__ extern unsigned long long __sdt_unsp;  
# define _SDT_ARGINTTYPE(x)                                             \  
  __typeof (__builtin_choose_expr (((__builtin_classify_type (x)        \  
                                     + 3) & -4) == 4, (x), 0U))  
# define _SDT_ARGSIGNED(x)                                              \  
  (!__extension__                                                       \  
   (__builtin_constant_p ((((unsigned long long)                        \  
                            (_SDT_ARGINTTYPE (x)) __sdt_unsp)           \  
                           & ((unsigned long long)1  (_SDT_ARGINTTYPE (x)) 0))  
# define _SDT_ARGSIZE(x)        \  
  (_SDT_ARGARRAY (x) ? sizeof (void *) : sizeof (x))  
# define _SDT_ARGVAL(x)         (x)  
#endif  
#if defined __powerpc__ || defined __powerpc64__  
# define _SDT_ARGTMPL(id)       %I[id]%[id]  
#else  
# define _SDT_ARGTMPL(id)       %[id]  
#endif  
#ifdef __LP64__  
# define _SDT_ASM_ADDR  .8byte  
#else  
# define _SDT_ASM_ADDR  .4byte  
#endif  
/* The ia64 and s390 nop instructions take an argument. */  
#if defined(__ia64__) || defined(__s390__) || defined(__s390x__)  
#define _SDT_NOP        nop 0  
#else  
#define _SDT_NOP        nop  
#endif  
#define _SDT_NOTE_NAME  "stapsdt"  
#define _SDT_NOTE_TYPE  3  
/* If the assembler supports the necessary feature, then we can play  
   nice with code in COMDAT sections, which comes up in C++ code.  
   Without that assembler support, some combinations of probe placements  
   in certain kinds of C++ code may produce link-time errors.  */  
#include "sdt-config.h"  
#if _SDT_ASM_SECTION_AUTOGROUP_SUPPORT  
# define _SDT_ASM_AUTOGROUP "?"  
#else  
# define _SDT_ASM_AUTOGROUP ""  
#endif  
#define _SDT_ASM_BODY(provider, name, pack_args, args)                        \  
  _SDT_ASM_1(990:       _SDT_NOP)                                             \  
  _SDT_ASM_3(           .pushsection .note.stapsdt,_SDT_ASM_AUTOGROUP,"note") \  
  _SDT_ASM_1(           .balign 4)                                            \  
  _SDT_ASM_3(           .4byte 992f-991f, 994f-993f, _SDT_NOTE_TYPE)          \  
  _SDT_ASM_1(991:       .asciz _SDT_NOTE_NAME)                                \  
  _SDT_ASM_1(992:       .balign 4)                                            \  
  _SDT_ASM_1(993:       _SDT_ASM_ADDR 990b)                                   \  
  _SDT_ASM_1(           _SDT_ASM_ADDR _.stapsdt.base)                         \  
  _SDT_SEMAPHORE(provider,name)                                               \  
  _SDT_ASM_STRING(provider)                                                   \  
  _SDT_ASM_STRING(name)                                                       \  
  pack_args args                                                              \  
  _SDT_ASM_1(994:       .balign 4)                                            \  
  _SDT_ASM_1(           .popsection)  
#define _SDT_ASM_BASE                                                         \  
  _SDT_ASM_1(.ifndef _.stapsdt.base)                                          \  
  _SDT_ASM_5(           .pushsection .stapsdt.base,"aG","progbits",           \  
                                                        .stapsdt.base,comdat) \  
  _SDT_ASM_1(           .weak _.stapsdt.base)                                 \  
  _SDT_ASM_1(           .hidden _.stapsdt.base)                               \  
  _SDT_ASM_1(   _.stapsdt.base: .space 1)                                     \  
  _SDT_ASM_2(           .size _.stapsdt.base, 1)                              \  
  _SDT_ASM_1(           .popsection)                                          \  
  _SDT_ASM_1(.endif)  
#if defined _SDT_HAS_SEMAPHORES  
#define _SDT_SEMAPHORE(p,n) _SDT_ASM_1(         _SDT_ASM_ADDR p##_##n##_semaphore)  
#else  
#define _SDT_SEMAPHORE(p,n) _SDT_ASM_1(         _SDT_ASM_ADDR 0)  
#endif  
#define _SDT_ASM_TEMPLATE_0             /* no arguments */  
#define _SDT_ASM_TEMPLATE_1             _SDT_ARGFMT(1)  
#define _SDT_ASM_TEMPLATE_2             _SDT_ASM_TEMPLATE_1 _SDT_ARGFMT(2)  
#define _SDT_ASM_TEMPLATE_3             _SDT_ASM_TEMPLATE_2 _SDT_ARGFMT(3)  
#define _SDT_ASM_TEMPLATE_4             _SDT_ASM_TEMPLATE_3 _SDT_ARGFMT(4)  
#define _SDT_ASM_TEMPLATE_5             _SDT_ASM_TEMPLATE_4 _SDT_ARGFMT(5)  
#define _SDT_ASM_TEMPLATE_6             _SDT_ASM_TEMPLATE_5 _SDT_ARGFMT(6)  
#define _SDT_ASM_TEMPLATE_7             _SDT_ASM_TEMPLATE_6 _SDT_ARGFMT(7)  
#define _SDT_ASM_TEMPLATE_8             _SDT_ASM_TEMPLATE_7 _SDT_ARGFMT(8)  
#define _SDT_ASM_TEMPLATE_9             _SDT_ASM_TEMPLATE_8 _SDT_ARGFMT(9)  
#define _SDT_ASM_TEMPLATE_10            _SDT_ASM_TEMPLATE_9 _SDT_ARGFMT(10)  
#define _SDT_ASM_TEMPLATE_11            _SDT_ASM_TEMPLATE_10 _SDT_ARGFMT(11)  
#define _SDT_ASM_TEMPLATE_12            _SDT_ASM_TEMPLATE_11 _SDT_ARGFMT(12)  
#define _SDT_ASM_OPERANDS_0()           [__sdt_dummy] "g" (0)  
#define _SDT_ASM_OPERANDS_1(arg1)       _SDT_ARG(1, arg1)  
#define _SDT_ASM_OPERANDS_2(arg1, arg2) \  
  _SDT_ASM_OPERANDS_1(arg1), _SDT_ARG(2, arg2)  
#define _SDT_ASM_OPERANDS_3(arg1, arg2, arg3) \  
  _SDT_ASM_OPERANDS_2(arg1, arg2), _SDT_ARG(3, arg3)  
#define _SDT_ASM_OPERANDS_4(arg1, arg2, arg3, arg4) \  
  _SDT_ASM_OPERANDS_3(arg1, arg2, arg3), _SDT_ARG(4, arg4)  
#define _SDT_ASM_OPERANDS_5(arg1, arg2, arg3, arg4, arg5) \  
  _SDT_ASM_OPERANDS_4(arg1, arg2, arg3, arg4), _SDT_ARG(5, arg5)  
#define _SDT_ASM_OPERANDS_6(arg1, arg2, arg3, arg4, arg5, arg6) \  
  _SDT_ASM_OPERANDS_5(arg1, arg2, arg3, arg4, arg5), _SDT_ARG(6, arg6)  
#define _SDT_ASM_OPERANDS_7(arg1, arg2, arg3, arg4, arg5, arg6, arg7) \  
  _SDT_ASM_OPERANDS_6(arg1, arg2, arg3, arg4, arg5, arg6), _SDT_ARG(7, arg7)  
#define _SDT_ASM_OPERANDS_8(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8) \  
  _SDT_ASM_OPERANDS_7(arg1, arg2, arg3, arg4, arg5, arg6, arg7), \  
    _SDT_ARG(8, arg8)  
#define _SDT_ASM_OPERANDS_9(arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9) \  
  _SDT_ASM_OPERANDS_8(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8), \  
    _SDT_ARG(9, arg9)  
#define _SDT_ASM_OPERANDS_10(arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9,arg10) \  
  _SDT_ASM_OPERANDS_9(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9), \  
    _SDT_ARG(10, arg10)  
#define _SDT_ASM_OPERANDS_11(arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9,arg10,arg11) \  
  _SDT_ASM_OPERANDS_10(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10), \  
    _SDT_ARG(11, arg11)  
#define _SDT_ASM_OPERANDS_12(arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9,arg10,arg11,arg12) \  
  _SDT_ASM_OPERANDS_11(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11), \  
    _SDT_ARG(12, arg12)  
/* These macros can be used in C, C++, or assembly code.  
   In assembly code the arguments should use normal assembly operand syntax.  */  
#define STAP_PROBE(provider, name) \  
  _SDT_PROBE(provider, name, 0, ())  
#define STAP_PROBE1(provider, name, arg1) \  
  _SDT_PROBE(provider, name, 1, (arg1))  
#define STAP_PROBE2(provider, name, arg1, arg2) \  
  _SDT_PROBE(provider, name, 2, (arg1, arg2))  
#define STAP_PROBE3(provider, name, arg1, arg2, arg3) \  
  _SDT_PROBE(provider, name, 3, (arg1, arg2, arg3))  
#define STAP_PROBE4(provider, name, arg1, arg2, arg3, arg4) \  
  _SDT_PROBE(provider, name, 4, (arg1, arg2, arg3, arg4))  
#define STAP_PROBE5(provider, name, arg1, arg2, arg3, arg4, arg5) \  
  _SDT_PROBE(provider, name, 5, (arg1, arg2, arg3, arg4, arg5))  
#define STAP_PROBE6(provider, name, arg1, arg2, arg3, arg4, arg5, arg6) \  