# 技术分享：Java RMI 反序列化漏洞检测工具的编写

## 译文声明
本文为翻译文章，原文来源：安全客。译文仅供参考，具体内容及含义请以原文为准。

## 作者信息
- **作者**：小天之天
- **链接**：[个人主页](http://bobao.360.cn/member/contribute?uid=1432256886)
- **预估稿费**：400 RMB
- **投稿方式**：
  - 发送邮件至 [linwei#360.cn](mailto:PI:EMAIL)
  - 或者登录 [网页版](http://bobao.360.cn/contribute/index) 在线投稿

## 成因
反序列化漏洞已经存在一段时间了，针对WebLogic和JBoss的测试代码也已经非常成熟。然而，对于RMI服务的测试目前仍停留在ysoserial阶段，仅能通过执行命令来监听反弹Linux shell。近期，某位大牛分享了关于RMI利用的代码，需要通过远程加载jar包来反弹shell。但如果目标主机无法访问外网，则无法实现反弹shell。据私下了解，该大牛因时间紧张未能进一步开发相关功能。

## 介绍
Java RMI（Remote Method Invocation）是一种机制，允许在一个Java虚拟机上的对象调用另一个Java虚拟机上的对象的方法。RMI传输过程中必然涉及序列化和反序列化操作。如果RMI服务端口对外开放，并且服务端使用了像Apache Commons Collections这样的库，可能会导致远程命令执行的风险。

## 代码分析
### 步骤一：生成本地class文件
在指定路径下生成某个class文件。

### 步骤二：加载并执行命令
加载生成的class文件来执行命令，从而避免加载远程jar文件。这样即使目标主机无法访问外网，也能成功反弹shell。

#### 执行命令的代码
`New URL(ClaassPath)`可以加载远程jar包，但在此处我们加载的是本地的class文件。通过`ErrorBaseExec`类的`do_exec`方法来执行命令，因此需要先在本地生成class文件。

#### 生成本地class文件的代码
使用`FileOutputStream`将byte数组写入本地路径，生成`ErrorBaseExec.class`文件。

#### byte数组生成
1. 将`ErrorBaseExec.java`文件编译成`ErrorBaseExec.class`文件。
2. 将class文件解析成byte数组。
为了方便检测漏洞，`ErrorBaseExec.java`会在执行时抛出包含“8888”的字符串。如果匹配到“8888”，则说明存在漏洞。

## 漏洞测试
### 测试工具
漏洞测试代码`attackRMI.jar`支持带参数和不带参数的cmd命令。测试结果如下：

为了确保网络安全及企业安全，仅对部分地区部分IP段的1099和1090端口进行了漏洞测试和验证，未进行任何控制或数据窃取等不道德行为。测试概况如下：

### 注意事项
为了方便安全运维人员进行漏洞验证性测试，请勿将此工具用于非法活动。测试工具下载链接及密码如下：
- **链接**: [下载链接]
- **密码**: 28ye