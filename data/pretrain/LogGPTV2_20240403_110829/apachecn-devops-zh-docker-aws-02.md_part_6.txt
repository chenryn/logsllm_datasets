  app:
    extends:
      service: release
    depends_on:
      db:
        condition: service_healthy
    volumes:
      - public:/public
 healthcheck:
 test: curl -fs localhost:8000
      interval: 3s
 retries: 10
    ports:
      - 8000:8000
    command:
      - uwsgi
      - --http=0.0.0.0:8000
      - --module=todobackend.wsgi
      - --master
      - --check-static=/public
  acceptance:
 extends:
 service: release
 depends_on:
 app:
 condition: service_healthy
 environment:
 APP_URL: http://app:8000
 command:
 - bats 
 - acceptance.bats
  migrate:
    ...
    ...
  db:
    ...
    ...
```
我们首先给`app`服务添加一个`healthcheck`属性，它使用`curl`实用程序来检查与本地网络服务器端点的连接。然后，我们定义验收服务，它是从`release`映像扩展而来的，并使用`APP_URL`环境变量进行配置，该变量配置了验收测试应该针对的正确网址，而`command`和`depends_on`属性用于在`app`服务正常运行时运行验收测试。
有了这个配置，您现在需要拆除当前环境，重建所有映像，并执行各种步骤来启动和运行应用，除了当您即将运行`docker-compose up app`命令时，您现在应该运行`docker-compose up acceptance`命令，因为这将在后台自动启动`app`服务:
```
> docker-compose down -v
...
...
> docker-compose build
...
...
> docker-compose up migrate
...
...
> docker-compose run app python3 manage.py collectstatic --no-input
...
...
> docker-compose up acceptance todobackend_db_1 is up-to-date
Creating todobackend_app_1 ... done
Creating todobackend_acceptance_1 ... done
Attaching to todobackend_acceptance_1
acceptance_1 | Processing secrets []...
acceptance_1 | 1..4
acceptance_1 | ok 1 todobackend root
acceptance_1 | ok 2 todo items returns empty list
acceptance_1 | ok 3 create todo item
acceptance_1 | ok 4 delete todo item
todobackend_acceptance_1 exited with code 0
```
如您所见，所有测试都成功通过，如每个测试的`ok`状态所示。
# 自动化工作流程
至此，您已经成功地配置了 Docker Compose 来构建、测试和创建示例应用的本地工作环境，并完成了 MySQL 数据库集成和验收测试。您现在可以用一些命令来支持这个环境，但是即使使用 Docker Compose 大大简化了您需要运行的命令，仍然很难记住使用哪些命令以及使用的顺序。理想情况下，我们想要一个命令来运行整个工作流，这就是像 GNU Make 这样的工具非常有用的地方。
Make 已经存在很长时间了，并且仍然被认为是许多 C 和 C++应用的首选构建工具。任务自动化是 Make 的一个关键特性，以简单的格式定义任务或目标的能力使得 Make 成为一个流行的自动化工具，尤其是在处理 Docker 容器时。
按照惯例，make 会在当前工作目录中查找一个名为 Makefile 的文件，您可以创建一个非常简单的 Makefile，如下所示:
```
hello:
    @ echo "Hello World"
    echo "How are you?"
```
在上例中，您使用两个 shell 命令创建了一个名为`hello`的*目标*，在本例中，您可以通过运行`make `或`make hello`来执行这些命令。每个目标可以包括一个或多个命令，这些命令按照提供的顺序执行。
需要注意的一点是，make 希望在为给定目标定义各种命令时使用制表符(而不是空格)，因此如果您收到一个缺少分隔符的错误，如`Makefile:2: *** missing separator. Stop.`，请检查您是否使用了制表符来缩进每个命令。
```
> make hello
Hello World
echo "How are you?"
How are you?
```
在前面的示例中，您可以看到每个命令的输出都显示在屏幕上。请注意，第一个命令上的特殊`@`字符禁止在每个命令运行时回显。
Any decent modern text editor, such as Sublime Text or Visual Studio Code, should automatically take care of tabs for you in Makefiles.
将 Makefiles 用于任务自动化时，您应该在 Makefiles 中执行的一项重要内务操作是配置一个有点有趣的名为`.PHONY`的特殊目标，以及您将要执行的每个目标的名称:
```
.PHONY: hello
hello:
    @ echo "Hello World"
    echo "How are you?"
```
因为`make`实际上是一个编译源代码文件的构建工具，`.PHONY`目标告诉 make，如果它看到一个名为`hello`的文件，它仍然应该运行该目标。如果您没有指定`.PHONY`并且在本地目录中有一个名为`hello`的文件，make 将退出并声明`hello`文件已经建立。当您使用 make 来自动执行任务时，这显然没有多大意义，因此您应该始终使用`.PHONY`目标来避免任何奇怪的惊喜。
# 自动化测试阶段
现在已经介绍了 make，让我们修改 Makefile 来做一些实际有用的事情，并执行测试阶段执行的各种操作。回想一下，测试阶段包括将 Dockerfile 的第一阶段构建为一个服务，称为`test`，然后运行`test`服务，默认情况下，该服务将运行`python3 manage.py test`命令，执行应用单元测试:
```
.PHONY: test
test:
    docker-compose build --pull release
    docker-compose build
    docker-compose run test
```
请注意，我们不是在 Docker Compose 文件中构建`test`服务，而是实际构建发布服务并指定`--pull`标志，这确保 Docker 将始终检查在`FROM`指令中引用的 Docker 映像是否有任何更新的版本。我们以这种方式构建`release`服务，因为我们只想构建整个`Dockerfile`一次，而不是在每个执行阶段重建`Dockerfile`。
这防止了一种不太可能但仍然可能的情况，即如果在发布阶段重建，您可能会获取一个更新的基础映像，这可能会导致与您在测试阶段测试的环境不同的运行时环境。我们还在之后立即运行 docker-compose build 命令，这确保了在我们运行测试之前所有的服务都已经构建好了。因为我们在前面的命令中构建了整个`Dockerfile`，这将确保其他服务的任何缓存映像都被更新为最新的映像构建。
# 自动化发布阶段
完成测试阶段后，我们接下来运行发布阶段，这需要我们执行以下操作:
*   运行数据库迁移
*   收集静态文件
*   启动应用
*   运行验收测试
下面演示如何在 Makefile 中创建一个名为`release`的目标:
```
.PHONY: test release
test:
    docker-compose build --pull release
    docker-compose build
    docker-compose run test
release:
 docker-compose up --abort-on-container-exit migrate
 docker-compose run app python3 manage.py collectstatic --no-input
 docker-compose up --abort-on-container-exit acceptance
```
请注意，我们执行每个所需的命令时都有一个微小的变化，即在每个`docker-compose up`命令中添加`--abort-on-container-exit`命令。默认情况下，`docker-compose up`命令不会返回非零退出代码，如果该命令启动的任何容器失败。此标志允许您覆盖此标志，并指定如果由`docker-compose up`命令启动的任何服务失败，则 Docker Compose 应退出并出现错误。如果希望 make 命令在出现错误时失败，设置此标志非常重要。
# 优化工作流程
我们还可以对工作流进行一些小的改进，以确保我们有一个健壮、一致和可移植的机制来测试和构建我们的应用。
# 清理 Docker 环境
在本章中，我们一直在通过运行`docker-compose down`命令来清理我们的环境，该命令会停止并销毁与 todobackend 和 Docker Compose 环境相关联的任何容器。
构建 Docker 映像时，您需要注意的另一个内务处理方面是孤立或悬空映像的概念，这些映像已经被更新的构建所取代。您可以通过运行`docker images`命令来了解这一点，我已经用粗体显示了哪些映像:
```
> docker images REPOSITORY            TAG        IMAGE ID        CREATED            SIZEtodobackend_app       latest     ca3e62e168f2    13 minutes ago     137MBtodobackend_migrate   latest     ca3e62e168f2    13 minutes ago     137MB
todobackend_release   latest     ca3e62e168f2    13 minutes ago     137MB
                     03cc5d44bd7d    14 minutes ago     253MB
                     e88666a35577    22 minutes ago     137MB
                     8909f9001297    23 minutes ago     253MB
                     3d6f9a5c9322    2 hours ago        137MB todobackend_test      latest     60b3a71946cc    2 hours ago        253MB
                     53d19a2de60d    9 hours ago        136MB
                     54f0fb70b9d0    15 hours ago       135MB alpine                latest     11cd0b38bc3c    23 hours ago       4.41MB
```
请注意，每个突出显示的映像都没有存储库和标签，因此它们被称为孤立或悬空。这些悬空的映像没有任何用处，并且会占用资源和存储空间，因此您最好定期清理这些映像，以确保 Docker 环境的性能。回到我们的 Dockerfile 中，我们在每个阶段都添加了`LABEL`指令，这允许容易地识别与我们的 todobackend 应用相关的映像。
我们可以利用这些标签来定位为 todobackend 应用构建的悬空映像，因此让我们在 Makefile 中添加一个名为`clean`的新目标，这将关闭 Docker Compose 环境并移除悬空映像:
```
.PHONY: test release clean
test:
    docker-compose build --pull release
    docker-compose build
    docker-compose run test
release:
    docker-compose up --abort-on-container-exit migrate
    docker-compose run app python3 manage.py collectstatic --no-input
    docker-compose up --abort-on-container-exit acceptance
clean:
 docker-compose down -v
 docker images -q -f dangling=true -f label=application=todobackend | xargs -I ARGS docker rmi -f --no-prune ARGS
```
我们使用`-q`标志仅打印出映像标识，然后使用`-f`标志添加过滤器，指定仅显示带有`application=todobackend`标签的悬空映像。然后，我们将该命令的输出传输到`xargs`命令，该命令捕获`ARGS`参数中的过滤映像列表，并将`ARGS`传递到`docker rmi -f --no-prune`命令，按照带有`--no-prune`标志的`-f`标志的规定强制移除映像，以确保包括当前标记映像中的图层的任何未标记映像不会被移除。我们在这里使用`xargs`是因为它智能地处理映像列表——例如，如果没有要删除的映像，那么`xargs`会无声地退出而不会出错。
以下演示了运行`make clean`命令的输出:
```
> make test
...
...
> make release
...
...
> make clean
docker-compose down -v
Stopping todobackend_app_1 ... done
Stopping todobackend_db_1 ... done
Removing todobackend_app_run_2 ... done
Removing todobackend_app_1 ... done
Removing todobackend_app_run_1 ... done
Removing todobackend_migrate_1 ... done
Removing todobackend_db_1 ... done
Removing todobackend_test_run_1 ... done
Removing network todobackend_default
Removing volume todobackend_public
docker images -q -f dangling=true -f label=application=todobackend | xargs -I ARGS docker rmi -f --no-prune ARGS
Deleted: sha256:03cc5d44bd7dec8d535c083dd5a8e4c177f113bc49f6a97d09f7a1deb64b7728
Deleted: sha256:6448ea330f415f773fc4cd5fe35862678ac0e35a1bf24f3780393eb73637f765
Deleted: sha256:baefcaca3929d6fc419eab06237abfb6d9ba9a1ba8d5623040ea4f49b2cc22d4
Deleted: sha256:b1dca5a87173bfa6a2c0c339cdeea6287e4207f34869a2da080dcef28cabcf6f
...
...
```
运行`make clean`命令时，您可能会注意到一点，停止 todobackend 应用服务需要一些时间，实际上，停止大约需要 10 秒钟。这是因为 Docker 在停止容器时首先向容器发送一个 SIGTERM 信号，该信号向容器发出它即将被终止的信号。默认情况下，如果容器在 10 秒内没有退出，Docker 会发送一个 SIGKILL 信号，强制终止容器。
这里的问题是，在我们的应用容器中运行的`uwsgi`进程默认情况下会忽略 SIGTERM 信号，因此我们需要在 Docker Compose 文件中添加`--die-on-term`标志，该标志配置`uwsgi`在收到 SIGTERM 信号时关闭，确保它能够优雅而及时地关闭:
```