title:Automated Synthesis of Secure Distributed Applications
author:Michael Backes and
Matteo Maffei and
Kim Pecina
Automated Synthesis of Privacy-Preserving Distributed Applications
Michael Backes
Saarland University and MPI-SWS
Germany
PI:EMAIL
Matteo Maffei
Saarland University
Germany
Kim Pecina
Saarland University
Germany
PI:EMAIL
PI:EMAIL
Abstract
1. Introduction
We introduce a framework for the automated synthesis of
security-sensitive distributed applications. The central idea
is to provide the programmer with a high-level declarative
language for specifying the system and the intended secu-
rity properties, abstracting away from any cryptographic
details. A compiler takes as input such high-level speciﬁca-
tions and automatically produces the corresponding crypto-
graphic implementations (i.e., cryptographic library, cryp-
tographic protocols, and F# source code).
In this work, we focus on two important, and seem-
ingly contradictory, security properties, namely, authoriza-
tion and privacy. On the one hand, the access to sensitive
resources should be granted only to authorized users; on the
other hand, these users would like to share as little personal
information as possible with third parties. These opposing
goals make it challenging to enforce privacy-aware autho-
rization policies in a distributed setting.
The high-level declarative language builds on Eviden-
tial DKAL, a logic for authorization polices of decentral-
ized systems, which we extend to reason about privacy poli-
cies. Speciﬁcally, the traditional says modality from au-
thorization logics is accompanied by existential quantiﬁca-
tion in order to express the secrecy of sensitive information.
The cryptographic realization of privacy-aware authoriza-
tion policies is obtained by a powerful combination of dig-
ital signatures and zero-knowledge proofs. This approach
is general and can be seen as a privacy-enabling plugin for
existing authorization languages and proof-carrying autho-
rization architectures.
We proved that the implementations output by the com-
piler enforce the intended authorization policies and we
conducted an experimental evaluation to demonstrate the
feasibility of our approach.
One of the central challenges in the development of dis-
tributed systems is the design of cryptographic protocols
that meet the desired functional requirements and enforce
the intended security properties. There is a common under-
standing that basic security properties such as secrecy and
authentication can easily be enforced via encryption and
digital signatures, respectively. Modern applications, how-
ever, exhibit more sophisticated and heterogeneous security
requirements: for example, social networks, e-health sys-
tems, and reviewing systems must fulﬁll sophisticated ac-
cess control, privacy, and anonymity constraints. Devising
a cryptographic infrastructure for the enforcement of these
properties is challenging and highly error-prone for secu-
rity experts, and even prohibitive for regular programmers,
which do not have the required background and expertise
in cryptography. Currently, many popular applications rely
on trusted third parties to collect and process sensitive in-
formation (e.g., conference reviewing systems like Easy-
chair or social networks like Facebook). The presence of
trusted parties simpliﬁes the system design but gives rise to
a number of privacy concerns related to the deliberate or
accidental disclosure of sensitive information. Other appli-
cations are fully decentralized but employ ad-hoc crypto-
graphic protocols that are not always ﬂawless and, due to
their diversity, break any form of interoperability.
We believe that the design of security-sensitive dis-
tributed applications should be driven by rigorous, for-
mally certiﬁed, and possibly automated, techniques, as op-
posed to best practices and informal guidelines. Speciﬁ-
cally, developers should be given the possibility to specify
the functional behavior of the system and the intended se-
curity properties using convenient, security-oriented, pro-
gramming abstractions that conceal cryptographic details.
A compiler should automatically turn user-provided, high-
level system descriptions into executable cryptographic im-
plementations.
Ideally, these implementations should be
open-ended and interoperable, i.e., it should be possible to
extend the system with new functionalities and to share in-
formation among different, independently developed, appli-
cations.
This work introduces such a framework, focusing on two
important, and seemingly contradictory, security proper-
ties, namely, authorization and privacy. Authorization is
a key ingredient in virtually any security infrastructure.
The fundamental idea is to let the resource provider de-
ﬁne a security policy that constraints the operations on sen-
sitive resources and to let a reference monitor ﬁlter ac-
cess requests in a way that an operation is allowed only
if the requester has sufﬁcient permissions according to
the security policy. For instance, let us consider a sim-
ple university management system in which, at the end
of each semester, students are given a certiﬁcate of the
form Uni says Stud(id , program, grd ), reporting their id,
the program they are enrolled in, and their grades. Such
a certiﬁcate is typically implemented as a digital signa-
ture of the form sig(Stud(id , program, grd ))Uni,
issued
by the university administration on (a bit string encoding
of) the predicate Stud(id , program, grd ). The system un-
der consideration is open-ended in that the student certiﬁ-
cate may be employed in a number of different services:
scholarship assignment, discounted museum entrances, ac-
cess to university buildings (as in the Grey system [17]
for device-enabled authorization), and so on. For instance,
the policy for scholarship assignments may be of the form
∀x, y, z. Uni says Stud(x, y, z) ∧ average(z) ≥ X ⇒
GetScholarship(x), where X is the minimum average grade
that is required to get the scholarship. Systems and au-
thorization policies of this form can be conveniently de-
scribed in a variety of logic-based authorization languages,
such as DCC [3, 2], Aura [43], PCML5 [9], and Evidential
DKAL [7].
The combination of authorization and privacy, however,
is challenging, even more so in the context of open-ended
applications, in which it is not known in advance how sen-
sitive information is used by other applications (for in-
stance, the university does not necessarily know all services
that make usage of student credentials). Let us consider,
for instance, the entrance to university buildings: students
might not want their movements within the university to be
tracked. Let us suppose that one of the authorization poli-
cies ruling the entrance to the computer science laboratory
is of the form
∀x, y.
Uni says Stud(x, cs, y) ∧ x says Acc(lab)
⇒ OkAcc(lab)
(1)
Ideally, students would like to prove to be enrolled in the
computer science program, without disclosing their iden-
tity. From a logical point of view, we propose to cap-
ture privacy constraints via existential quantiﬁcation, i.e.,
privacy-relevant values are hidden by existentially quanti-
ﬁed variables. For instance, students can provide the fol-
lowing piece of information:
∃x, y. Uni says Stud(x, cs, y) ∧ x says Acc(lab)
(2)
This logical characterization of privacy and authorization is
simple and elegant, but providing a faithful cryptographic
evidence thereof turns out to be quite challenging: digi-
tal signatures do not offer any sort of privacy and standard
cryptographic solutions like encryptions and MACs are not
suitable for open-ended applications. This is the reason why
existing authorization languages do not allow for such a us-
age of existential quantiﬁcation and fall short of support-
ing privacy properties. We present a general and automated
procedure to implement privacy-aware authorization poli-
cies by means of a powerful combination of digital signa-
tures and zero-knowledge proofs.1 The idea is to use signa-
tures to justify the validity of logical formulas, as previously
shown, and zero-knowledge proofs of knowledge of such
signatures to justify the validity of variants of these formu-
las – variants in which the sensitive arguments are existen-
tially quantiﬁed. The unique properties of zero-knowledge
proofs assure the veriﬁer of the validity of these formulas,
without revealing any sensitive data that the prover wishes
to keep secret. For instance, the cryptographic realization
of the formula (2) is a zero-knowledge proof of knowledge
of two signatures of the form sig(Stud(x, cs, y))Uni and
sig(Acc(lab))x, for some student x and grades y that are
not revealed to the veriﬁer. This approach is ﬂexible and,
depending on what information is kept secret, can be used to
express a variety of privacy properties, such as data secrecy
and user anonymity. Furthermore, this approach is well
suited for open-ended applications, since each party can
prove any statement of which she knows a cryptographic
evidence and, while doing so, autonomously hide any infor-
mation considered sensitive for the speciﬁc application.
Our contributions. To summarize, this work presents:
• a generally applicable and efﬁcient cryptographic
implementation of privacy-aware authorization poli-
cies, which builds on automorphic signatures [5]
and the Groth-Sahai zero-knowledge proof
sys-
tem [40] (cf. § 2);
• a high-level, declarative language for distributed sys-
tems, which extends Evidential DKAL [7] to deal with
privacy properties (cf. § 3);
1 A zero-knowledge proof combines two seemingly contradictory prop-
erties. First, it is a proof of a statement that cannot be forged, i.e., infea-
sible, to produce a zero-knowledge proof of a wrong statement. Second, a
zero-knowledge proof does not reveal any information besides the bare fact
that the statement is valid [39]. A non-interactive zero-knowledge proof is
a zero-knowledge protocol consisting of one message sent by the prover
to the veriﬁer. A zero-knowledge proof of knowledge additionally ensures
that the prover knows the witnesses to the given statement.
• a compiler that turns high-level descriptions into ex-
ecutable implementations, comprising cryptographic
libraries, cryptographic protocols, and F# source
code (cf. § 4);
• a correctness result, which ensures that the implemen-
tations output by the compiler enforce the authoriza-
tion policies speciﬁed by the user (cf. § 5);
• two case studies, consisting of a distributed reviewing
system and a distributed social network, which demon-
strate the possibility to specify relatively complex de-
centralized systems in a simple and elegant manner,
without requiring any cryptographic expertise on the
part of the users (cf. § 6);
• and an experimental evaluation, which demonstrates
the feasibility of our approach (cf. § 7).
Due to space constraints, we postpone the proofs, the details
of the cryptographic realization, and further case studies to
the long version, which is available online [12].
Related Work. The seminal works by Abadi et al. [44, 4]
on access control in distributed systems paved the way for
the development of a number of authorization logics and
languages [32, 19, 43, 38, 29, 9]. In the literature it is well-
known that logical formulas based on a says modality can be
implemented in a distributed setting via digital signatures,
but the problem of ensuring the privacy of data employed in
authorization proofs has not been tackled thus far. A notice-
able exception is AuraConf [54], a conﬁdentiality extension
of the Aura [43] programming language based on public-
key encryption and a monadic constructor.
In AuraConf,
the programmer has to specify the intended recipient of each
data and the compiler is in charge of encrypting such data
with the appropriate public key. In our approach, the pro-
grammer does not need to know in advance all the intended
usages and recipients of the digital signatures issued in the
protocol run, which is crucial to deal with open-ended sys-
tems. In fact, principals can use received signatures to con-
struct arbitrary authorization proofs, using zero-knowledge
proofs to selectively hide sensitive data.
Digital signatures and zero-knowledge schemes proved
to be salient tools for achieving ﬁne-grained anonymity
properties in a number of applications, such as trusted com-
puting [26], digital credentials [20], trust protocols [47, 10],
and social networks [13]. The relationship between privacy-
preserving cryptographic constructions and authorization
logics, however, has been investigated only partially and
in specialized settings. For instance, Li et al. [45] devel-
oped a framework for Automated Trust Negotiation using
anonymous credentials, which is tailored to RT, a family
of Trust-management languages [46]. Frikken et al. used
a combination of hidden credentials, homomorphic encryp-
tion, and oblivious transfer to enforce access control poli-
cies while keeping both policies and credentials secret [37].
Our framework is not tailored to a speciﬁc language and can
be seen as a generally applicable privacy-preserving plu-
gin for authorization logics: in the long version, we report
on a privacy-oriented extension of the Proof Carrying Au-
thorization framework [8, 18] and we envision the usage
of our framework within several other authorization lan-
guages, such as Aura [43], PCML5 [9], F∗ [52], and Sec-
Pal [19]. Some preliminary ideas on privacy-aware proof-
carrying authorization were anticipated in a position paper
by Maffei and Pecina [48].
Backes et al. have recently presented G2C [14], a
goal-driven speciﬁcation language for distributed applica-
tions. This language supports secrecy, access control, and
anonymity, which are enforced by means of broadcast en-
cryption and group signatures. Similarly to our approach,
G2C conceals cryptographic details and lets a compiler gen-
erate the cryptographic implementation. G2C, however,
does not support open-ended applications (i.e., it is not pos-
sible to extend the system in order to provide new function-
alities without generating the whole protocol from scratch).
Furthermore, the G2C compiler yields cryptographic proto-
cols as opposed to executable implementations and it does
not provide security by construction guarantees.
The proof of correctness for our compiler builds on the
type theory for zero-knowledge proofs by Backes et al. [11]
and, in particular, on their compiler from zero-knowledge
statements to symbolic cryptographic libraries. These li-
braries model the ideal behavior of cryptographic schemes
using standard language constructs and are thus suitable for
veriﬁcation but cannot be used for deployment. Our com-
piler, instead, converts a DKAL derivation of the intended
protocol run into an executable implementation, which in-
cludes concrete, executable cryptographic libraries. Devis-
ing an efﬁcient, yet expressive and ﬂexible cryptographic
realization of privacy-aware authorization proofs is one of
the challenges faced in this work.
Recently, Meiklejohn et al. [49] and Almeida et al. [6]
have independently presented two compilers for zero-
knowledge proofs, which take as input a speciﬁcation
of the cryptographic statement to be proved. The cryp-
tographic realization of such speciﬁcations is based on
Σ-protocols [30]. Our compiler builds on the Groth-Sahai
zero-knowledge proof scheme [40], which is based on
pairing-based cryptography and is, in general, more efﬁ-
cient and more expressive. Furthermore, our compiler pro-
vides a higher level of abstraction, since it takes as input
logical formulas as opposed to cryptographic statements.
Table 1 Cryptographic evidence of authorization formulas.
:= versig(us, uA, F ) | E
:= ap | S1 ∧ S2 | S1 ∨ S2 | ∃x. S (statements)
(atomic predicates)
ap
S
(cid:40)
[M ] =
vk A says F if versig(M, vk A, F )
[S]zk
if verzk(M, S)
[S]zk =
uk says F
[S1]zk ∧ [S2]zk
[S1]zk ∨ [S2]zk
∃x. [S(cid:48)]zk
if S = versig(us, uk, F )
if S = S1 ∧ S2
if S = S1 ∨ S2
if S = ∃x. S(cid:48)
2. Privacy-aware Evidential Authorization
This section gives an intuitive overview of our frame-
work (§ 2.1), establishes the binding between authoriza-
tion formulas and cryptographic messages (§ 2.2), de-
scribes the class of statements that can be proved in zero-
knowledge (§ 2.3), and characterizes which of them provide
meaningful security guarantees (§ 2.4).
2.1. Overview
Let us consider the example discussed in § 1. The stu-
dent’s goal is to provide evidence of the validity of the pred-
icate OkAcc(lab). The validity of this predicate is ruled
by the authorization policy (1) and the minimal amount of
information the student has to reveal is captured by for-
mula (2). The key insight is that the student does not need
to reveal her identity nor her grades, since they do not occur
in the predicate OkAcc(lab) and can thus be existentially
quantiﬁed. The student has two signatures at her disposal,
namely, sig(Stud(vkid , cs, grd ))Uni and sig(Acc(lab))id.
Our idea is to let the student create a proof of the follow-
ing statement:
2.2. Mapping Cryptographic Messages to Logical
Formulas
Here and throughout
this paper, we let M range
over cryptographic messages (digital signatures and zero-
knowledge proofs), a, b, m over names (i.e., bit strings),
x, y, z over variables, u over names and variables, F over
authorization formulas,2 and E over quadratic equations
in Zn [40], which are used to express arithmetic proper-
ties (e.g., average(z) ≥ X from § 1). The predicate
versig(sig, vk, m) denotes the successful veriﬁcation of sig-
nature sig on message m with veriﬁcation key vk, and the
predicate verzk(ZK, S) denotes the successful veriﬁcation
of the zero-knowledge proof ZK for statement S.
Predicates of the form versig(us, uk, F ) and quadratic
equations in Zn form the class of atomic predicates, which
are ranged over by ap (cf. Table 1). Zero-knowledge state-
ments, ranged over by S, are built on atomic predicates us-
ing conjunction, disjunction, and existential quantiﬁcation.
The function [·] : M (cid:55)→ F establishes the logical in-
terpretation of cryptographic messages. The logical inter-
pretation of a signature on (the bit-string encoding of) the
predicate F , veriﬁable with key vk A, is vk A says F . The
logical interpretation of a zero-knowledge proof is similarly
deﬁned by induction on the structure of the statement.
∃x1, x2, xid , xgrd .
versig(x1, vkUni , Stud(xid , cs, xgrd ))
∧ versig(x2, xid , Acc(lab))
This statement says that there exist two signatures x1 and
x2, a veriﬁcation key xid (which constitutes the student’s
id), and grades xgrd such that (i ) x1 is a signature on the
predicate Stud(xid , cs, xgrd ) that can be successfully ver-
iﬁed with the university administration’s veriﬁcation key
vkUni and (ii ) x2 is a signature on the predicate Acc(lab)
that can be successfully veriﬁed with the student’s veriﬁ-
cation key xid. Since we use zero-knowledge proofs of
knowledge, the above statement actually implies that the
prover knows the signatures and the veriﬁcation key. Upon
reception and veriﬁcation of this proof, the veriﬁer can
safely derive the logical formula (2), which in turn allows
OkAcc(lab) to be derived as previously described.
(3)
2.3. Construction of Zero-Knowledge Proofs
The deduction system in Table 2 characterizes what kind
of statements a principal can prove in zero-knowledge start-
ing from a database Γ of signatures and zero-knowledge
proofs at her disposal. Intuitively, these statements may re-
gard properties of digital signatures, as formalized by the
judgment Γ (cid:96)S S, or be obtained by combining the state-
ments of existing zero-knowledge proofs, as formalized by
the judgment Γ (cid:96)ZK S.
The statements proved by the judgment Γ (cid:96)S S are ob-
tained by combining statements of the form versig(s, vk , F )
(I-S-VER) in conjunctive (I-S-∧) and disjunctive (I-S-∨-1
2Our framework is independent of the underlying authorization logic:
we just assume the presence of conjunction, disjunction, and existential
quantiﬁcation operators.
Table 2 Zero-knowledge deduction system.
I-S-VER
M ∈ Γ
versig(M, vk , F )
Γ (cid:96)S versig(M, vk , F )
I-ZK-S
Γ (cid:96)S S
Γ (cid:96)ZK S
I-ZK-VER
M ∈ Γ
verzk(M, S)
Γ (cid:96)ZK S
S well-formed