title:Computational soundness for key exchange protocols with symmetric
encryption
author:Ralf K&quot;usters and
Max Tuengerthal
Computational Soundness for Key Exchange Protocols
with Symmetric Encryption∗
Ralf Küsters
University of Trier, Germany
PI:EMAIL
Max Tuengerthal
University of Trier, Germany
PI:EMAIL
ABSTRACT
Formal analysis of security protocols based on symbolic mod-
els has been very successful in ﬁnding ﬂaws in published pro-
tocols and proving protocols secure, using automated tools.
An important question is whether this kind of formal analy-
sis implies security guarantees in the strong sense of modern
cryptography. Initiated by the seminal work of Abadi and
Rogaway, this question has been investigated and numerous
positive results showing this so-called computational sound-
ness of formal analysis have been obtained. However, for
the case of active adversaries and protocols that use sym-
metric encryption computational soundness has remained a
challenge.
In this paper, we show the ﬁrst general computational
soundness result for key exchange protocols with symmetric
encryption, along the lines of a paper by Canetti and Herzog
on protocols with public-key encryption. More speciﬁcally,
we develop a symbolic, automatically checkable criterion,
based on observational equivalence, and show that a key ex-
change protocol that satisﬁes this criterion realizes a key ex-
change functionality in the sense of universal composability.
Our results hold under standard cryptographic assumptions.
Categories and Subject Descriptors
C.2.2 [Computer-Communication Networks]: Network
Protocols—Protocol Veriﬁcation; C.2.0 [Computer-Com-
munication Networks]: Security and Protection
General Terms
Security, Veriﬁcation
1.
INTRODUCTION
Formal analysis of security protocols based on symbolic
models, also called Dolev-Yao models [21], has been very
∗This work was partially supported by the DFG under Grant
KU 1434/5-1 and 1434/4-2.
Permission to make digital or hard copies of all or part of this work for
personal or classroom use is granted without fee provided that copies are
not made or distributed for proﬁt or commercial advantage and that copies
bear this notice and the full citation on the ﬁrst page. To copy otherwise, to
republish, to post on servers or to redistribute to lists, requires prior speciﬁc
permission and/or a fee.
CCS’09, November 9–13, 2009, Chicago, Illinois, USA.
Copyright 2009 ACM 978-1-60558-352-5/09/11 ...$10.00.
successful in ﬁnding ﬂaws in published protocols and prov-
ing protocols secure, using fully automated or interactive
tools (see, e.g., [30, 7, 8, 3, 9, 24]). While formal analysis
in symbolic models is appealing due to its relative simplic-
ity and rich tool support (ranging from ﬁnite state model
checking, over fully or semi-automatic special purpose tools,
to general purpose theorem provers), an important question
is whether analysis results obtained in the symbolic model
carry over to the realm of modern cryptography with its
strong security notions.
Initiated by the seminal work of
Abadi and Rogaway [2], this so-called computational sound-
ness problem has attracted a lot of attention in the last few
years and many positive results have been obtained (see,
e.g., [2, 31, 18, 17, 22]).
However, as further discussed in Section 9, establishing
computational soundness results for protocols with symmet-
ric encryption in presence of active adversaries has turned
out to be non-trivial. Most results for symmetric encryption
assume passive or at most adaptive adversaries (see, e.g., [2,
22]). Conversely, results for active adversaries mostly con-
sider asymmetric cryptography, e.g., public-key encryption
and digital signatures (see, e.g., [31, 18, 17, 14]). One rea-
son that the combination of symmetric encryption and ac-
tive adversaries in computational soundness results is chal-
lenging is that, unlike private keys in asymmetric settings,
symmetric keys may “travel” between parties and some of
these keys may be dishonestly generated by the adversary.
The behavior of encryption and decryption under dishon-
estly generated keys is almost arbitrary, and hence, hard to
map to the symbolic settings, as cryptographic deﬁnitions
do not consider dishonestly generated keys.
The goal of this work is therefore to obtain computational
soundness results for protocols that use symmetric keys in
presence of active adversaries, with standard cryptographic
assumptions. More precisely, the contribution of this paper
is as follows.
Contribution of this Paper. We ﬁrst propose a class of
symbolic key exchange protocols based on the applied pi cal-
culus [1], with pairing, symmetric encryption, and nonces as
well as branching via general if-then-else statements. These
symbolic protocols are given an obvious computational in-
terpretation, with, compared to other works, only very mild
tagging requirements; basically, only pairs and keys are
tagged. In particular, we do not require ciphertexts to carry
any auxiliary information. We use the IITM model [23], a
model for simulation-based security, as our computational
model. This model is close in spirit to Canetti’s UC model
[12]. However, as further discussed in Section 4, due to some
91technical problems in the UC model, the IITM model is more
suitable for our purposes.
For the main result of the paper, the computational sound-
ness result, we develop a natural symbolic criterion for key
exchange protocols. This criterion requires i) that a sym-
bolic key exchange protocol is observationally equivalent [1]
to its randomized version in which instead of the actual ses-
sion key a freshly generated key is output and ii) that all keys
used within one session of the key exchange protocol remain
secret in case the session is uncorrupted. The ﬁrst condi-
tion is the natural symbolic counterpart of cryptographic
key indistinguishability. The second condition also seems
well justiﬁed from an intuitive point of view: It is hard to
imagine a reasonable key exchange protocol where in an un-
corrupted session the keys used in the session become known
to the adversary. This second condition will enable us, unlike
other work (see Section 9), to deal with dishonestly gener-
ated keys. We note that the symbolic criterion only talks
about one session of a protocol. Hence, it is particularly
simple to check by automatic tools, e.g., [9, 11] (see also [6]
for related decidability results).
The main result of the paper is that if a symbolic key
exchange protocol satisﬁes our symbolic criterion, then this
protocol (more precisely, the computational interpretation
of this protocol), realizes a key exchange functionality in
the sense of universal composability [12, 23]. This is a
very strong security guarantee. It a priori only talks about
one session of the protocol, but the composition theorems
of simulation-based security [12, 23] imply that polynomi-
ally many concurrent copies of this protocol can be used
securely as key exchange protocols in every (probabilistic
polynomial-time) environment. While the composition the-
orems assume independent copies of protocols, a joint state
theorem for symmetric encryption with long-term keys [26]
can be employed to obtain an implementation where long-
term keys are shared across sessions. Our computational
soundness result works for any symmetric encryption scheme
that guarantees (standard) authenticated encryption, i.e.,
IND-CPA and INT-CTXT security.
To obtain our computational soundness result, we ﬁrst
prove it for the case where symmetric encryption is per-
formed based on an ideal functionality for symmetric en-
cryption with short- and long-term keys, as proposed in [26].
We then, using the composition theorem, replace this func-
tionality by its realization. This last step requires that the
protocol does not produce key-cycles and does not cause the
so-called commitment problem (see Section 5). We propose
symbolic, automatically checkable criteria for these proper-
ties. We note that the mentioned ideal functionality in [26]
also supports public-key encryption. Therefore it should be
easy to extend the results presented in this paper to proto-
cols that use both symmetric and public-key encryption.
Structure of this Paper. In Section 2, we recall the ap-
plied pi calculus. The class of symbolic key exchange proto-
cols that we consider is introduced in Section 3. The com-
putational model, i.e., the IITM model, is presented in Sec-
tion 4. The mentioned ideal functionalities that we use are
discussed in Section 5. The computational interpretation of
the symbolic protocol is then introduced in Section 6. The
main result is presented in Section 7, with the proof sketched
in Section 8. We conclude with a discussion on related work
in Section 9. Full deﬁnitions and proofs can be found in our
technical report [27].
2. THE SYMBOLIC MODEL
Our symbolic model is an instance of the applied π-calculus
[1], similar to the one in [15].
2.1 Syntax
Let Σ be a ﬁnite set of function symbols, the signature.
The set of terms T (N ,X ) over Σ and inﬁnite sets N and
X of names and variables, respectively, is deﬁned as usual.
The set of ground terms, i.e., terms without variables, is
T (N ).
In what follows, s, t, . . . and x, y, z denote terms
and variables, respectively. We use α, β, . . . to denote meta-
variables that range over variables and names.
In this paper, we consider the signature Σ = {(cid:104)·,·(cid:105), π1(·),
π2(·),{·}·
·, dec(·,·), sk(·)}, where, as usual, (cid:104)t1, t2(cid:105) is the pair-
ing of the terms t1 and t2, π1(t) and π2(t) are the projections
to the ﬁrst and second component of t (in case t is a pair),
respectively, {t}r
k stands for the ciphertext obtained by en-
crypting t under the key k using randomness r, dec(t, k) is
the plaintext obtained by decrypting t with k (in case t is a
ciphertext under k), and sk(k) is used to tag symmetric keys.
Accordingly, Σ is associated with the following equational
theory E: π1((cid:104)x, y(cid:105)) = x, π2((cid:104)x, y(cid:105)) = y, dec({x}z
y, y) = x.
We denote by =E the congruence relation on terms in-
duced by E. We say that a term t is reduced or in normal
form, if it is not possible to apply one of the above equations
from left to right. Obviously, every term has a unique nor-
sk(k)(cid:105)), sk(k))
mal form. For example, for tex = dec(π2((cid:104)a,{b}r
we have that tex =E b which is its normal form.
We also consider the following predicate symbols over
ground terms, which may be used in if-then-else statements
in processes:
1. M is a unary predicate such that M (t) is true iﬀ the nor-
mal form of t does not contain π1(·), π2(·), and dec(·,·),
and for every subterm of t of the form {t1}t3
t2 , there exists
t(cid:48)
2 such that t2 =E sk(t(cid:48)
2).
2. EQ is a binary predicate such that EQ(s, t) is true iﬀ
s =E t, M (s), and M (t).
3. Ppair is a unary predicate such that Ppair(t) is true iﬀ t
is a pair, i.e., t =E (cid:104)t1, t2(cid:105) for some terms t1, t2.
4. Penc is a unary predicate such that Penc(t) is true iﬀ t is
a ciphertext, i.e., t =E {t1}t3
t2 for some terms t1, t2, t3.
5. Pkey is a unary predicate such that Pkey(t) is true iﬀ t is
a key, i.e., t =E sk(t(cid:48)) for some term t(cid:48).
For example, the predicates M (tex) and EQ(tex, b) are true,
while M (π1({a}r
k)) is false. We remark that the above pred-
icates can be encoded in ProVerif [9, 11].
We call M (t), EQ(s, t), Ppair(t), Penc(t), Pkey(t) for terms
s and t (possibly with variables) atoms. A condition φ is
a Boolean formula over atoms. For example, φ = M (s) ∧
M (t)∧¬EQ(s, t) says that s and t both satisfy the predicate
M but are not equivalent modulo E.
If φ contains only
ground terms, then the truth value of φ is deﬁned in the
obvious way. If φ holds true, we write |= φ.
Now, (plain) processes P, Q and extended processes A, B
are deﬁned in Figure 1. There should be at most one active
substitution for a variable and the set of active substitutions
should be cycle-free, e.g., {x (cid:55)→ x} is not allowed. Extended
processes basically extend plain processes by what is called
a frame. A frame ϕ is of the form (νn)σ, where σ denotes
a substitution, i.e., a set {x1 (cid:55)→ s1, . . . , xl
(cid:55)→ sl}, and n
92P, Q ::= c(x).P
| c(cid:104)s(cid:105).P
| 0
| P (cid:107) Q
|
| (να)P
|
!P
input
output
terminated process
parallel composition
replication
restriction
if φ then P else Q conditional
A, B ::= P
| A(cid:107) B
| (να)A
| {x (cid:55)→ s}
(plain) process
parallel composition
restriction
active substitution
Figure 1: Syntax of processes