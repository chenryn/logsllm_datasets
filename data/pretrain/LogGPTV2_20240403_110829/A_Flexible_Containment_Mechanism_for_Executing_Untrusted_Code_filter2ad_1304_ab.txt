users 
. In general, a convenient means of
and 
answering such questions allows one to easily un-
derstand implications of various sandbox conﬁgu-
rations.
 By clarifying relationships between sandbox-
associated privileges, set operations provide a
means of verifying that security policies are cor-
rectly enforced.
Our set-oriented approach to creating and manipulating
privileges associated with protection domains represents
a unique perspective. As an example application, con-
sider an employee Bob who initially works in the per-
sonnel department of some company and then transfers
represent the privileges
represent
the privileges required for Bob’s personnel-related du-
represent the privileges required for Bob’s
to the ﬁnance department. Let 
that Bob’s sandbox initially allows. Let 
ties and let 






 Providing users with simple yet powerful mecha-
nisms often results in the development of new and
useful applications.
We therefore believe that the inclusion of set-oriented
primitives in our model is a prudent design decision.
2.2 Location of Enforcement Mechanisms
Sandboxing mechanisms may be implemented in any of
the following locations:
runtime environment
sandboxed program
 user space3
 OS kernel
We will now consider each of these alternatives, focus-
ing on their advantages and disadvantages.
2.2.1 Runtime Environment
In this arrangement, the sandboxed program executes
within a specialized runtime environment that provides
complete mediation between the program and underly-
ing system resources. The runtime system can therefore
prohibit actions that violate established security policies.
A well-known example of this type of sandbox is the
Java virtual machine[7]. This option is attractive be-
cause it allows security policies to be tailored to the run-
time environment. For example, an object-oriented sys-
tem could restrict access to individual method invoca-
tions. Furthermore, protection mechanisms may be very
ﬁne-grained. Pointer use may be completely eliminated,
or pointer dereferences may be individually validated at
runtime. However, this approach is only applicable to
programs that execute within a particular runtime envi-
ronment. It is therefore not suitable as a general-purpose
mechanism.
code[8] is an example of this technique. In this scheme,
a binary executable contains a mathematically rigorous
proof that it satisﬁes a given security policy. Before the
program executes, a veriﬁer checks the correctness of
the proof. If the proof is incorrect or does not satisfy
the security policy, then the program is denied the privi-
lege to execute. It is also possible to instrument a binary
executable with additional machine instructions that ver-
ify compliance with a security policy[9]. Both of these
types of sandboxes have the advantage of being able to
enforce ﬁne-grained security policies at the level of indi-
vidual machine instructions. However, the need to mod-
ify binary executables makes these techniques inconve-
nient. Furthermore, they are not generally applicable to
all types of programs (such as shell scripts, for instance).
They are therefore not suitable as general-purpose mech-
anisms.
2.2.3 User Space
Another option is to implement sandboxes as separate
processes that execute in user space. This requires some
type of OS-provided mechanism that allows one pro-
cess to control the execution of another process. Several
mechanisms of this variety[10, 11, 12] use the /proc
process tracing facility of Solaris for system call inter-
ception. This type of design is advantageous because
it may be easily deployed in existing systems. Binary
executables do not require modiﬁcation, and the mech-
anism may be applied to arbitrary types of programs
such as shell scripts. A disadvantage is that the Solaris
process tracing facility is not applicable to setuid pro-
grams. If setuid programs were traceable in this manner,
an unprivileged user could perform arbitrary operations
as root simply by tracing a setuid program and modify-
ing parameters to system calls as they are invoked. This
approach adds overhead, since it requires additional pro-
cesses for monitoring. Furthermore, monitoring requires
interprocess context switches, and the monitoring pro-
cess must typically fork() each time the sandboxed
process forks.
2.2.4 OS Kernel
2.2.2 Sandboxed Program
An alternate approach is to embed the sandboxing mech-
anism within the sandboxed program. Proof-carrying
3Here, we mean separate from the sandboxed program and any run-
time environment in which it may be executing.
The OS kernel is another potential place where sand-
boxing mechanisms may reside. This location allows
placement of privilege checking hooks and other func-
tionality at points deep within the kernel.
It therefore
provides essentially unlimited options for restricting
access to system resources and fundamentally changing


how the system as a whole behaves. Furthermore, the
strict isolation of the kernel from user space entities is
likely to make kernel-resident sandboxing mechanisms
less vulnerable to attack. However, kernel modiﬁcation
requires access to source code unless the sandboxing
mechanism is implemented as a loadable kernel module
(LKM). Another disadvantage is that kernel code is
difﬁcult to write and debug, and must be fully trusted.
Bugs or design ﬂaws may create systemwide vulnera-
bilities or cause system crashes.
We have chosen to implement our sandboxing mecha-
nism within the OS kernel. The kernel-resident status
of our implementation allows us to export a universally
accessible system call API that may be applied to
both privileged and unprivileged programs, regardless
of what language they were written in. Our system
call API is designed to be policy-neutral and highly
ﬂexible. It provides a minimal set of primitives that are
designed to serve a wide variety of purposes. Thus,
application-dependent aspects of sandbox manipulation
are pushed into user space where they belong. The
general-purpose nature of our design mitigates the
disadvantages of kernel code being difﬁcult to develop
and debug.
2.3 Passive vs. Active Monitoring
Sandbox-imposed restrictions may be enforced by pas-
sive data structures that are examined whenever a pro-
gram attempts to perform some operation. For exam-
ple, the kernel’s implementation of the open() sys-
tem call might be modiﬁed so that sandbox-related data
structures are consulted before open() is allowed to
proceed. We refer to this as passive monitoring. Al-
ternately, restrictions may be enforced by separate pro-
cesses or threads that monitor programs as they execute.
We refer to this as active monitoring. An advantage of
active monitoring is its ﬂexibility. Monitoring processes
are not restricted to making policy decisions based on
relatively static data structures. Instead, they may im-
plement security policies deﬁned by complex state ma-
chines. The disadvantage of active monitoring is the
high overhead it requires. Monitoring processes must
be created and individual privilege checks require in-
terprocess context switches. Furthermore, most designs
require the monitoring process to fork() each time a
sandboxed process forks.
To address this design issue, we have developed a novel
mechanism that allows monitoring to be purely passive,
purely active, or anywhere in between. Thus, programs
D1
F 1
Process p
(controls Sandbox S)
Sandbox S
d1 f1
d2 f2
...
...
Process q
D2
Figure 1: Blocking mechanism
may beneﬁt from the best aspects of both alternatives.
We achieve these beneﬁts through a mechanism that al-
lows privileges to be determined interactively at runtime.
Speciﬁcally, a sandbox may be conﬁgured so that at-
tempting certain actions will cause a sandboxed process
to block instead of being immediately denied the privi-
lege to perform the action. When a process blocks in this
manner, an event is generated and placed in the event
queue of the sandbox where the blocking occurred. A
process that has ownership over the sandbox uses the
sbxwait() system call to wait for and obtain events.
An event may be examined to determine which pro-
cess generated it and what action was attempted. The
sbxdecide() system call is then used to unblock the
process that triggered the event and decide whether to
allow the attempted action.
Our design permits application of the blocking mecha-
nism in a ﬁne-grained manner. Figure 1 illustrates how
this works. Each sandbox has two sets of attachment
is attached at point
points for the various component types. Sandbox  has
device components  "! and  $# attached at points %&!
and %'# . File system component (!
! . Process * controls sandbox  while + executes in-
side. When + attempts to access a device, the sandbox-
ing mechanism ﬁrst examines  "! . If  ,! allows the re-
wise,  
# allows the privilege, then +
blocks and * decides whether to allow the operation. If
# denies the required privilege, then the operation will
fail. If + attempts to access some ﬁle, the sandboxing
mechanism examines component 
! allows the
required privilege, then the operation is allowed. Other-
wise, the operation is immediately denied, since no com-
quired privilege then the operation will succeed4. Other-
is examined. If  
! . If 
4This assumes that ﬁle permission bits and other applicable secu-
rity mechanisms also allow the operation.
)
#
G (global sandbox)
A (Alice’s sandbox)
W (sandbox for web server)
Alice’s login shell
Bob’s login shell
web server
B (Bob’s sandbox)
X
C1
C2
downloaded game
CGI program
CGI program
Figure 2: Nested sandboxes
# .
ponent is attached at point )
A potential use of this feature is intrusion detection. For
example, a telnet daemon could place a user’s login shell
inside a sandbox and use the blocking feature to monitor
aberrant behavior. If such behavior is detected, the sys-
tem can make ﬁne-grained adjustments to the set of ac-
tions that it monitors. In response to suspicious behavior,
the system may tighten sandbox-imposed constraints, or
perhaps perform other actions such as notifying a system
administrator.
2.4 Scope of Application: Global vs. Local
In principle, sandboxes may be used to conﬁne individ-
ual users, groups of users, individual programs, or per-
haps groups of programs that cooperate to serve com-
mon purposes. One might even imagine a global sand-
box that enforces certain restrictions on all programs.
These alternatives raise the question of where sandboxes
should be deployed on the spectrum from global to lo-
cal. Also, what criteria should be used for grouping pro-
grams into sandboxes?
We believe that there is no single best answer to these
questions. Therefore our design allows system adminis-
trators, users, and application developers to create sand-
boxes that enforce security policies at any level of gran-
ularity. To permit simultaneous enforcement of access
controls at multiple levels, our design provides the abil-
ity to create hierarchically nested sandboxes, as shown
in Figure 2.
In this example, sandbox 
is a global sandbox that con-
tains all processes.
enforces global policies such as
the restriction that no process should be able to mod-
ify system programs in locations such as /bin and
/usr/bin. At system startup time, /sbin/init cre-
ates 
to itself before it forks any child
processes. To override the restrictions imposed by 
, an
administrator with physical access to the system console
must reboot the system with a kernel in which sandbox-
ing functionality has been disabled.
and applies 
At a more localized level, programs such as telnet dae-
mons, ftp daemons, and the standard login program may
be modiﬁed to place restrictions on individual users.
Sandboxes 
restrict the login shells of users Al-
ice and Bob in this manner.
and 
Users may selectively delegate their privileges by creat-
ing sandboxes for individual applications. For instance,
user Alice has downloaded a video game from an un-
trusted source. To protect against Trojan horses, she ex-
ecutes the program inside sandbox -
.
Finally, an application program that is aware of the sand-
boxing mechanism may use it as a ﬂexible means of
dropping privileges when performing sensitive opera-
uses our
mechanism in this manner by executing CGI programs
tions. The web server executing in sandbox .
in sandboxes 
If the blocking mechanism is used in combination with
nested sandboxes, an attempted action by a sandboxed
process may cause it to block sequentially at multiple
levels. For instance, if the downloaded game in sandbox
attempts to open some ﬁle, the privilege checking op-
! and 
# .

-
eration performed at sandbox- may cause it to block. If
a process in sandbox  decides to allow the action, then
a privilege check will be performed at sandbox 
. De-
pending on how 
is conﬁgured, this may also cause the
process to block, providing an opportunity for a process
in sandbox 
to allow or deny the action. The same be-
havior could also take place at sandbox 
if it were con-
ﬁgured appropriately, although this would require some
process outside 
. In
practice, we believe that sandboxes will rarely be nested
at depths of more than three or four levels. Therefore the
overhead required to perform privilege checks at multi-
ple levels should be reasonably low.
to be responsible for monitoring 
2.5 Mandatory vs. Discretionary
Security policies may be enforced by either mandatory
or discretionary access controls. Mandatory access con-
trols are useful because they are based on systemwide
rules beyond the control of individual users. They there-
fore provide a high degree of assurance that systemwide
security policies are not violated. Discretionary access
controls are useful because they allow individual users
to deﬁne their own security policies. These two alterna-
tives raise the question of whether sandboxes should be
mandatory or discretionary in nature.
Our design provides both options. One means of provid-
ing mandatory access controls is to place /sbin/init
in a sandbox at system startup time. Additionally, sand-
boxes may enforce mandatory access controls at the
level of individual users. Since our mechanism follows
the principle of attenuation of privileges, unprivileged
users may employ it to create discretionary sandboxes.
As future work, we intend to add a mechanism that al-
lows transitions between sandboxes when certain pro-
grams are executed. This would make sandboxes more
similar to the domains provided by DTE[2, 3]. How-
ever, the use of components to deﬁne privileges granted
to domains is a different approach from using types. Us-
ing our mechanism, a core set of components may be
deﬁned that serve the same purpose as types. Additional
types can be derived using set-theoretic transformations.
Permitting dynamic creation of types at runtime may
also be useful. For instance, executing a certain program
might cause creation of a new type that is a function of
the user’s previous type and possibly other variables.
2.6
Inspection and Manipulation of Sandboxes
An effective sandboxing mechanism must provide some
means of guarding access to sandbox-related objects. In
this discussion, the term object refers to a sandbox, com-
ponent, or pool5. If anyone may reconﬁgure a sandbox,
then the restrictions it imposes are easily circumvented.
Furthermore, one might create a sandbox that denies ac-
cess to some resource whose existence must remain hid-
den. Allowing anyone to examine a sandbox conﬁgura-
tion may therefore cause unacceptable leakage of infor-
mation.
The question of how access to sandboxes should be gov-
erned is open-ended and depends on the details of the
mechanism being considered. We have taken a conser-