和任何可以做单词组成成分的字符匹配（字母、数字或下划线)
用途
QQ群：
50192241
- 291-
，这是已经被接受的
第十一章 
，这和在 awk 中的字符串是一
awk 的系列产品
---
## Page 274
# NOTE! RS and ORS must be set on the command line
#Thanks to Michael Brennan for the idea
# simolesed.awk do s/old/new/g using just print
使用一个简单的print语句就能够原样打印替换后的文本。
下面是来自 MichealBrennan 的一个简单的例子，
匹配的实际输入文本。
除了RS 是一个正则表达式外，gawk 将变量RT（记录终止符）设置为与 RS 的值
正则表达式记录终止符
\Brat\B
lybalIs?\y
stowl>
Kaway
表达式
表 11-6：gawk 扩展正则表达式示例
#
（s/old/new/g）。通过将RS 设置为要匹配的模式，将ORS 设置为替代文本,
量的功能。就像我们所看到的，
从《Ef
你可以将“\w”作为（POSIX）符号［[:alnum:］_]的一个简写，
/
printf “%s"，SO
i（RT=”
$cat simplesed.awk
[:alnum:]_]的简写。
二
fective AWK Programming》中借用的。
保持兼容
和在缓冲区末尾处的空字符串匹配。这和在 awk 中的字符串是一
QQ群：
。下面的表中给出了与中间4个操作符匹配的例子，这是
50192241
crate
ball or balls
stow
away
匹配的例子
 sed 的一个最普遍的应用是它的替代命令
292-
第十一章 
显示了 gawk 中的 RS和 RT 变
dirty rat 
ballroom or baseball 
stowaway
stowaway
不匹配的例子
而将“\W”作为
awk 的系列产品
---
## Page 275
FIELDWIDTHS 赋一个值将导致 gawk 开始使用它来分隔字段。为 FS 指定一个值
除了 awk 运行你用常规的方式将分隔成记录并将记录分隔字段外，gawk 还提供
I like shopping for brand new things at garage sales.
simplesed.data
$ gawk-f simplesed.awk RS-oldlOLD*ORS-brand new
This D housisa sret show.
序的精确版本。
注
当中间字段内容全部为空白时，这个功能最有用。
当处理固定宽度字段的数据且记录中间没有任何分隔字段的空白字符时，或者
将FS 的值保存到额外的变量中。
将导致 gawk 恢复常规的字段分隔机制。使用FS=FS 将使这种恢复发生，且不必
这里的记录有4个字段：$1有5个字符的宽度，
数据可能或不可能由空白字符来分隔字段的值。
其次，特殊变量FIELDWIDTHS 可以用来分隔出现在固定宽度列中的数据。这些
都成为一个独立的字段。
首先，和上面提到的一样，如果FS的值为空字符串，那么输入记录的每个字符
的一些补充的功能。
分隔字段
I like shopping for old things at garage sales.
这里有一个技巧，在文件的末尾RT将是空的，因此我们用 printf 语句打印这
FIELDWIDTHS=“5683"
4:
$ cat simplesed.data
 print
参阔《Effecive AWK Programming》[Robbins]，16.2.8节，这个程
QQ群：
50192241
- 293 -
，$2有6个字符的宽度等等。为
第十一章 
awk 的系列产品
---
## Page 276
表 11-8：补充的gawk 系统变量
gawk 还有几个补充的系统变量，
补充变量
是否还支持这些文件名。
getline pid >
awk 脚本来响应对 wwW服务器的 CGI查询。我们可以将所有的查询写入日志文
函数 systime（)主要用于生成写入日志记录中的时间戳。例如，假设我们使用
戳是系统调用 UNIX time(2)的返回结果，
录都有一个时间戳，表示这个记录是什么时间产生的。为了简明和精确，时间
awk程序常用于处理由各种程序产生的日志文件。通常，日志文件中的每个记
printf(，\n，old，new）
变。相反，新的字符串是 gensub(（)的返回值。
包括描述日期和时间的不同组成部分的格式说明。
为程序员提供的时间管理
两个函数，即 system（）和 strftime (）。
$gawk
$gawk’BEGINrint strftimeToday is%，%B%d，%Y）
arnold：some.domain.com:831322007
QQ 群:
50192241
- 297 -
，这是从初始时间 00:00 am January
第十一章
awk 的系列产品
为
---
## Page 280
printf %s > %d times between %s and %s\n”，
j= strftime(%y-%m-%d %H:%M*，last[contact])
i = strftime(%y-%m-%d %H:%M*，first[contact])
for (contact in count)
ENDI
#3
last[user,host] = time
# save last contact
#count contacts
first[user,host] = time
user = $1;host = $2: time =$3
#make data more obvious
BEGINFS*SUBSEP=“]
#print the results
if (!（user,host) in first）)
#1
# data format is user:host:timestamp
进行处理。
gawk 文档可以获得全部列表内容。我们假设的 CGl 日志文件能够由下面的程序
可用的格式描述列表很长。可参见你本地的 strftime(3)帮助页，以及参见
Today is Sunday,May 05,1996
count[user,host]++
# store first contact by this user
#2
#cgiformat -— process CGI logs
QQ群：
50192241
- 298 -
第十一章
 awk 的系列产品
---
## Page 281
Michael 的 awk
0515:29
mary@another.domain.org-2 times between 96-05-05 12:09 and 96-
mary:another.domain.org：831346231
arnold:some.domain.com831322007
的新的连接时就重新改写这个元素。这样就可以了。结果是将最后（最近的)
注6:
contact，countcontact],i，j
上兼容POSIX awk，并且有一些扩展。它是稳定的且运行良好。mawk 的可免费
第三个可免费使用的 awk 是 mawk，
05-0521:30
下面是运行以上程序得到的结果：
arnold:some.domain.com:831327215
mary:another.domain.org:831312546
组的时间戳进行格式化以便打印，
这里的 END 过程用于格式化数据。
一个连接存储到数组中。
接了多少次。最后将这个记录的时间戳存储到last 数值中。每当我们看到用户
first数组中）
在第二步，
设置下标分割符为“@”
下一步是将FS设置为“：”以正确地分割字段。我们使用了一个简洁的技巧并
arnold:some.domain.com:831324598
$ gawk-fcgiformat.awk/var/log/cgi/querylog
，我们先确定是否是第一次看到这些用户。如果是（它们没有在
这个函数在ANSIC中的同名函数之后被模式化
QQ群:
 则将它们添加到first 数组中。并递增计数器以表示它们连 
50192241
。所以这里的数组使用字符串“user@host”为下标。
(mawk)
，是由Michae丨Brennan 编写的，这个程序向
假设有包含下面记录的日志文件。
，它循环访问 count 数组，
299
第十一章
，对first和last数
awk 的系列产品
---
## Page 282
码也包含在其中。第三，tawk 允许将编译后的 和用C语言编写的任意函数链
Windows NT和 Solaris提供了awk的一个版本（tawk）（注10）。tawk有几个
MKS 版本实现了 POSIX awk。
MS-DOS/windows、OS/2、windows 95和 Windows NT 系统中MKS工具包的一部
在加拿大安大略的滑铁卢的 Mortin Kern System（MKS）（注8）将 awk 作为
MKS awk
awk 还有几个商业版。本节将来看一下我们所了解的一个。
商业版 awk