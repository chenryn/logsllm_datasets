all web frameworks support at least one of several methods for encoding param-
eters in the path segment of the URL instead of in the more traditionally
used query part. For example, in Apache, one such mechanism is known as
PATH_INFO, and it happens to be enabled by default. By leveraging such a
parameter-passing scheme, the attacker can usually append nonfunctional
garbage to the path, thereby confusing the browser without affecting how the
server will respond to the submitted request itself.
To illustrate, the following two URLs will likely have the same effect for
websites running on Apache or IIS:
http://www.fuzzybunnies.com/get_file.php?id=1234
and
http://www.fuzzybunnies.com/get_file.php/evil.html?id=1234
In some less-common web frameworks, the following approach may
alsowork:
http://www.fuzzybunnies.com/get_file.php;evil.html?id=1234
Content Recognition Mechanisms 201
Unrecognized Content Type
Despite the evident trouble with text/plain, the engineers working on Inter-
net Explorer decided to take their browser’s heuristics even further. Internet
Explorer applies both content sniffing and extension matching* not only
toahandful of generic MIME types but also to any document type not
immediately recognized by the browser. This broad category may include
everything from JSON (application/json) to multimedia formats such as Ogg
Vorbis (audio/ogg).
Such a design is, naturally, problematic and causes serious problems when
hosting any user-controlled document formats other than a small list of uni-
versally supported MIME types registered internally in the browser or when
routed to a handful of commonly installed external applications.
Nor do the content-sniffing habits of Internet Explorer finally end there:
The browser will also resort to payload inspection when dealing with internally
recognized document formats that, for any reason, can’t be parsed cleanly.
In Internet Explorer versions prior to 8, serving a user-supplied but non-
validated file claiming to be an JPEG image can lead to the response being
treated as HTML. And it gets even more hilarious: Even a subtle mistake,
such as serving a valid GIF file with Content-Type: image/jpeg, triggers the same
code path. Heck, several years ago, Internet Explorer even detected HTML
on any valid, properly served PNG file. Thankfully, this logic has since been
disabled—but the remaining quirks are still a minefield.
NOTE In order to fully appreciate the risk of content sniffing on valid images, note that it is
not particularly difficult to construct images that validate correctly but that carry
attacker-selected ASCII strings—such as HTML markup—in the raw image data. In
fact, it is relatively easy to construct images that, when scrubbed, rescaled, and recom-
pressed using a known, deterministic algorithm, will have a nearly arbitrary string
appear out of the blue in the resulting binary stream.
To its credit, in Internet Explorer 8 and beyond, Microsoft decided to
disallow most types of gratuitous content sniffing on known MIME types
inthe image/* category. It also disallowed HTML detection (but not XML
detection) on image formats not recognized by the browser, such as image/
jp2 (JPEG2000).
This single tweak aside, Microsoft has proven rather unwilling to make
meaningful changes to its content-sniffing logic, and its engineers have pub-
licly defended the need to maintain compatibility with broken websites.2
Microsoft probably wants to avoid the wrath of large institutional customers,
many of whom rely on ancient and poorly designed intranet apps and depend
on the quirks of the Internet Explorer–based monoculture on the client end.
In any case, due to the backlash that Internet Explorer faced over its text/
plain handling logic, newer versions offer a partial workaround: an optional
* Naturally, path-based extension matching is essentially worthless for the reasons discussed
inthe previous section; but in the case of Internet Explorer 6, it gets even worse. In this browser,
the extension can appear in the query portion of the URL. Nothing stops the attacker from simply
appending ?foo=bar.html to the requested URL, effectively ensuring that this check is always
satisfied.
202 Chapter 13
HTTP header, X-Content-Type-Options: nosniff, which allows website owners
toopt out of most of the controversial content heuristics. The use of this
header is highly recommended; unfortunately, the support for it has not
been backported to versions 6 and 7 of the browser and has only a limited
support in other browsers. In other words, it cannot be depended on as a
sole defense against content sniffing.
NOTE Food for thought: According to the data collected in a 2011 survey by SHODAN and
Chris John Riley,3 only about 0.6 percent of the 10,000 most popular websites on the
Internet used this header on a site-wide level.
Defensive Uses of Content-Disposition
The Content-Disposition header, mentioned several times in Part I of this
book,may be considered a defense against content sniffing in some use cases.
The function of this header is not explained satisfactorily in the HTTP/1.1
specification. Instead, it is documented only in RFC 2183,4 where its role is
explained only as it relates to mail applications:
Bodyparts can be designated “attachment” to indicate that they are
separate from the main body of the mail message, and that their
display should not be automatic, but contingent upon some fur-
ther action of the user. The MUA* might instead present the user
of a bitmap terminal with an iconic representation of the attach-
ments, or, on character terminals, with a list of attachments from
which the user could select for viewing or storage.
The HTTP RFC acknowledges the use of Content-Disposition: attachment in
the web domain but does not elaborate on its intended function. In practice,
upon seeing this header during a normal document load, most browsers will
display a file download dialog, usually with three buttons: “open,” “save,” and
“cancel.” The browser will not attempt to interpret the document any further
unless the “open” option is selected or the document is saved to disk and
then opened manually. For the “save” option, an optional filename parameter
included in the header is used to suggest the name of the download, too. If
this field is absent, the filename will be derived from the notoriously unreli-
able URL path data.
Because the header prevents most browsers from immediately inter-
preting and displaying the returned payload, it is particularly well suited for
safely hosting opaque, downloadable files such as the aforementioned case of
archives or executables. Furthermore, because it is ignored on type-specific
subresource loads (such as  or ), it may also be employed to pro-
tect user-controlled JSON responses, images, and so on against content sniff-
ing risks. (The reason why all implementations ignore Content-Disposition for
these types of navigation is not particularly clear, but given the benefits, it’s
best not to question the logic now.)
* MUA stands for “mail user agent,” that is, a client application used to retrieve, display, and
compose mail messages.
Content Recognition Mechanisms 203
One example of a reasonably robust use of Content-Disposition and other
HTTP headers to discourage content sniffing on a JSON response may be
Content-Type: application/json; charset=utf-8
X-Content-Type-Options: nosniff
Content-Disposition: attachment; filename="json_response.txt"
{ "search_term": "", ... }
The defensive use of Content-Disposition is highly recommended where
possible, but it is important to recognize that the mechanism is neither man-
dated for all user agents nor well documented. In less popular browsers, such
as Safari Mobile, the header may have no effect; in mainstream browsers,
such as Internet Explorer 6, Opera, and Safari, a series of Content-Disposition
bugs have at one point or another rendered the header ineffective in
attacker-controlled cases.
Another problem with the reliance on Content-Disposition is that the user
may still be inclined to click “open.” Casual users can’t be expected to be wary
of viewing Flash applets or HTML documents just because a download prompt
gets in the way. In most browsers, selecting “open” puts the document in a
file: origin, which may be problematic on its own (the recent improvements
in Chrome certainly help), and in Opera, the document will be displayed in
the context of the originating domain. Arguably, Internet Explorer makes the
best choice: HTML documents are placed in a special sandbox using a mark-
of-the-web mechanism (outlined in more detail in Chapter 15), but even in
that browser, Java or Flash applets will not benefit from this feature.
Content Directives on Subresources
Most content-related HTTP headers, such as Content-Type, Content-Disposition,
and X-Content-Type-Options, have largely no effect on type-specific subresource
loads, such as , , or . In these cases, the embedding party
has nearly complete control over how the response will be interpreted by the
browser.
Content-Type and Content-Disposition may also not be given much attention
when handling requests initiated from within plug-in-executed code. For
example, recall from Chapter 9 that any text/plain or text/csv documents may
be interpreted by Adobe Flash as security-sensitive crossdomain.xml policies
unless an appropriate site-wide metapolicy is present in the root directory on
the destination server. Whether you wish to call it “content sniffing” or just
“content-type blindness,” the problem is still very real.
Consequently, even when all previously discussed HTTP headers are
used religiously, it is important to always consider the possibility that a third-
party page may trick the browser into interpreting that page as one of several
problematic document types; applets and applet-related content, PDFs, style-
sheets, and scripts are usually of particular concern. To minimize the risk of
mishaps, you should carefully constrain the structure and character set of any
served payloads or use “sandbox” domains to isolate any document types that
can’t be constrained particularly well.
204 Chapter 13
Downloaded Files and Other Non-HTTP Content
The behavior of HTTP headers such as Content-Type, Content-Disposition, and
X-Content-Type-Options may be convoluted and exception ridden, but at the
very least, they add up to a reasonably consistent whole. Still, it is easy to for-
get that in many real-world cases, the metadata contained in these headers is
simply not available—and in that case, all bets are off. For example, the han-
dling of documents retrieved over ftp:, or saved to disk and opened over the
file: protocol, is highly browser- and protocol-specific and often surprises
even the most seasoned security experts.
When opening local files, browsers usually give precedence to file extension
data, and if the extension is one of the hardcoded values known to the browser,
such as .txt or .html, most browsers will take this information at face value. Chrome
is the exception; it will attempt to autodetect certain “passive” document types,
such as JPEG, even inside .txt documents. (HTML, however, is strictly off-limits.)
When it comes to other extensions registered to external programs, the
behavior is a bit less predictable. Internet Explorer will usually invoke the
external application, but most other browsers will resort to content sniffing,
behaving as though they loaded the document over HTTP with no Content-
Type set. All browsers will also fall back to content sniffing if the extension is
not known (say, .foo).
The heavy reliance on file extension data and content sniffing for file:
documents creates an interesting contrast with the normal handling of
Internet-originating resources. On the Web, Content-Type is by and large the
authoritative descriptor of document type. File extension information is
ignored most of the time, and it is perfectly legal to host a functional JPEG
file at a location such as http://fuzzybunnies.com/gotcha.txt. But what happens
when this document is downloaded to disk? Well, in such case, the effective
meaning of the resource will unexpectedly change: When accessing it over
the file: protocol, the browser may insist on rendering it as a text file, based
strictly on the extension data.
The example above is
fairly harmless, but other con-
tent promotion vectors, such
as an image becoming an exe-
cutable, may be more trou-
bling. To that effect, Opera
and Internet Explorer will
attempt to modify the exten-
Figure 13-1: Prompt displayed by Firefox when
sion to match the MIME type
saving a Content-Type: image/jpeg document
for a handful of known Content-
served with Content-Disposition: attachment. The
Type values. Other browsers
“hello.exe” filename is derived by the browser from
do not offer this degree of
a nonfunctional PATH_INFO suffix appended by the
protection, however, and may attacker at the end of the URL. The prompt incorrectly
even be thoroughly confused claims that the .exe file is a “JPEG Image.” In fact,
by the situation they find when saved to disk, it will be an executable.
themselves in. Figure 13-1
captures Firefox in one such
embarrassing moment.
Content Recognition Mechanisms 205
This problem underscores the importance of returning an explicit,
harmless filename value whenever using a Content-Disposition attachment, to
prevent the victim from being tricked into downloading a document format
that the site owner never intended to host.
Given the complex logic used for file: URLs, the simplicity of ftp: handling
may come as a shock. When accessing documents over FTP, most browsers
pay no special attention to file extensions and will simply indulge in rampant
content sniffing. One exception is Opera, where extension data still takes
precedence. From the engineering point of view, the prevalent approach to
FTP may seem logical: The protocol can be considered roughly equivalent to
HTTP/0.9. Nevertheless, the design also violates the principle of least aston-
ishment. Server owners would not expect that by allowing users to upload .txt
documents to an FTP site, they are automatically consenting to host active
HTML content within their domain.
Character Set Handling
Document type detection is one of the more important pieces of the content-
processing puzzle, but it is certainly not the only one. For all types of text-based
files rendered in the browser, one more determination needs to be made: The
appropriate character set transformation must be identified and applied to the
input stream. The output encoding sought by the browser is typically UTF-8
or UTF-16; the input, on the other hand, is up to the author of the page.
In the simplest scenario, the appropriate encoding method will be pro-
vided by the server in a charset parameter of the Content-Type header. In the case
of HTML documents, the same information may also be conveyed to some
extent through the  directive. (The browser will attempt to speculatively
extract and interpret this directive before actually parsing the document.)
Unfortunately, the dangerous qualities of certain character encodings,
aswell as the actions taken by the browser when the charset parameter is not
present or is not recognized, once again make life a lot more interesting
than the aforementioned simple rule would imply. To understand what can
go wrong, we first need to recognize three special classes of character sets
that may alter the semantics of HTML or XML documents:
 Character sets that permit noncanonical representations of standard
7-bit ASCII codes. Such noncanonical sequences could be used to clev-
erly encode HTML syntax elements, such as angle brackets or quotes,
ina manner that survives a simple server-side check. For example, the
famously problematic UTF-7 encoding permits the “
+ADw-script+AD4-alert("Hi mom!")+ADw-/script+AD4-
If that document is interpreted as UTF-7 by the receiving party, the
actual parsed markup will look as follows:
You are currently viewing:
A similar problem, this time related to byte consumption in Shift JIS encod-
ing, is illustrated below. A multibyte prefix is permitted to consume a closing
quote, and as a result, the associated HTML tag is not terminated as expected,
enabling the attacker to inject an extra onerror handler into the markup:
...this is still a part of the markup...
...but the server doesn't know...
" onerror="alert('This will execute!')"
...page content continues...
Content Recognition Mechanisms 207
It is simply imperative to prevent character set autodetection for all text-
based documents that contain any type of user-controlled data. Most browsers