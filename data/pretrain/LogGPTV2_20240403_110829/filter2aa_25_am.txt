callback参数值前追加一些文本类的HTML标签，不直接使用script等标签是避免waf等防护
设备的检测。我们这里使用的HTML标签是一级标题标签。
如图13-32所示，根据Response的内容，我们可以了解到callback参数不存在过滤及可
控。进一步测试发现info参数对Response的输出内容没有影响，删除掉info参数，精简
URL。
图13-31 测试callback参数是否可控
图13-32 精简漏洞URL
步骤五：如图13-33所示，将callback参数更换成带有恶意行为的HTML标签，进行利
用。
图13-33 确认漏洞
13.5.3 修复建议
（1）严格定义  HTTP  响应中的  Content-Type  为  json  数据格式：Content-Type：
application/json。
（2）建立callback函数白名单，如果传入的callback参数值不在白名单内，跳转到统
一的异常界面阻止其继续输出。
（3）对callback参数进行HTML实体编码来过滤掉“”等字符。
13.6 WebService测试
13.6.1 测试原理和方法
WebService是一种跨编程语言和跨操作系统平台的远程调用技术。XML+XSD、
SOAP（Simple Object Access Protocol）和WSDL（Web Services Description Language）就
是构成WebService平台的三大技术，其中XML+XSD用来描述、表达要传输的数据；
SOAP是用于交换XML编码信息的轻量级协议，一般以XML或者XSD作为载体，通过
HTTP协议发送请求和接收结果，SOAP协议会在HTTP协议的基础上增加一些特定的
HTTP消息头；WSDL是一个基于XML的用于描述Web  Service及其函数、参数和返回值的
语言。
通过上面的描述，我们可以知道WebService就是一个应用程序向外界暴露出一个能通
过Web进行调用的API。这个API接收用户输入的参数，然后返回相关的数据内容。如果
一个WebService完全信任用户的输入，不进行过滤，则有可能导致SQL注入漏洞的发生。
13.6.2 测试过程
如图13-34所示，攻击者在测试前，通过爬虫或者目录扫描等方法找到服务器的
WebService链接，接着使用WVS（Web  Vulnerability  Scanner）的Web  Services  Editor功能
导入各个接口函数，通过关键词（如Get、Exec）定位到相关的接口函数，通过HTTP
Editor对每一个接口函数的输入参数进行测试（如SQL注入、文件上传等），如果出现预
期效果（如数据库报错、不同的延时等），则存在漏洞。
图13-34 WebService测试流程图
步骤一：找到服务器的WebService的链接，在WebService后面加上“？wsdl”，服务器
便会返回WSDL描述函数信息，如图13-35所示。
步骤二：如图13-36所示，使用WVS（Web 
Vulnerability 
Scanner），单击左边栏
的“Web Services Editor”。
在Operation选项列表中，可以看到WebService定义的多个函数，选择其中一个，
WVS便会显示需要输入的参数值。在选择的时候，我们尽量选择一些可能会涉及数据库
操作的函数，比如函数名以Get开头的，一般是从数据库返回一些信息；比如以Exec开头
的，一般是直接执行SQL语句或者特定指令。如图13-37所示，这里选择的是
ExecNonQuery函数，从函数名可以看出，这应该是用来执行非查询语句的接口。其中接
收一个名为sql的参数，从命名看，这个参数应该用来指定要执行的SQL语句。
图13-35 获取WebService链接
图13-36 使用WVS查看WebService
图13-37 查看ExecNonQuery函数的参数细节
步骤三：如图13-38所示，单击“HTTP  Editor”切换到HTTP请求界面，我们可以发送
SOAP请求，以及接收请求后的响应。
图13-38 单击“HTTP Editor”切换到HTTP请求
如图13-39所示，我们修改sql参数的值为“1'”，查看响应内容。
图13-39 修改sql参数
如图13-40所示，结合微软官方的文档信息，System.Data.SqlClient.SqlConnection 是.NET Framework 连接 SQL Server 的类库，由此可知后端数据库使用的是 SQL Server数
据库。
步骤四：如图13-41所示，在了解数据库类型后，我们可以使用具体的非查询类的
SQL语句去测试输入参数是否存在SQL注入漏洞。这里要使用select语句等查询类的SQL语
句，其返回响应为false。
图13-40 分析异常信息
图13-41 测试非查询语句
测试是否存在漏洞，应该使用延时类的SQL语句，通过返回响应的时间间隔来确认是
否可以直接执行SQL语句。这里由于是SQL  Server，应该使用SQL  Server的延时语句，所
以使用“waitfor delay'0：0：3'”，这里'0：0：3'代表3秒。如图13-42所示，WVS显示的时间
间隔大于3000 ms，与SQL语句延时的时间一致，存在漏洞。
图13-42 延时注入3秒
如图13-43所示，延时5秒“waitfor delay'0：0：5'”。
图13-43 延时注入5秒
步骤五：剩下的利用步骤和常规的  SQL  注入测试一致，使用  Wireshark  或者Burp Suite将WebService的请求抓取下来，保存到文本文件。在需要测试的参数值处添加星
号“*”，如图13-44所示。
图13-44 保存请求到文件中
然后通过sqlmap对参数进行检测即可，sqlmap对应的具体参数是-r，如图13-45和图
13-46所示。
图13-45 使用sqlmap进行测试
图13-46 确认漏洞存在
13.6.3 修复建议
（1）为WebService添加身份认证，认证成功后才允许访问和调用。
（2）WebService中接收输入参数的函数，在后端应该对输入参数进行过滤及净化，
在处理后才入库查询。
（3）在敏感功能的函数中，添加密码认证，认证后才允许调用敏感功能的函数。
实践篇
第14章 账号安全案例总结
14.1 账号安全归纳
随着网络的快速发展，出现了种类繁多的网络应用，包括E-mail、IM即时聊天工具
（QQ、MSN）、网络商店、BBS论坛、网络游戏等。各类应用均需要身份识别，因此身
份认证是网络信息安全的基本保障。网络服务器通过身份认证与访问控制的方式对合法注
册用户进行授权。用户首先通过注册（账号与密码）成为网络服务器的合法用户，只有通
过身份认证的用户才能访问资源。账号与密码成为各类网络应用必不可少的一部分，与此
同时账号和密码所面临的安全问题也越来越多。
例如，2011年某网站上600万用户资料可公开下载，而其存储密码的方式还是明文。
同时，2015年某论坛泄露2300万用户的信息，泄露的2300万用户数据包括用户名、注册邮
箱、加密后的密码等。2015年10月，某漏洞报告平台接到一起数据泄密报告后发布新漏
洞，该漏洞显示某网站用户数据库疑似泄露，影响到过亿数据，泄露信息包括用户名、密
码、密码密保信息、登录IP及用户生日等。
互联网上关于账号的安全问题日益凸显，本章总结的关于账号安全的相关漏洞包括密
码泄漏、暴力破解、弱口令、密码重置、登录账号绕过、重放攻击、网络钓鱼、信息泄
露、中间人攻击等。希望广大读者可以引以为鉴，不再出现此类问题。
14.2 账号安全相关案例
14.1.1 账号密码直接暴露在互联网上
GitHub是一个分布式的版本控制系统，开发者可以通过GitHub上传项目源代码。不过
由于开发者的安全意识不足，可能会上传部分敏感信息，包括邮件的账号密码、数据库的
配置信息、管理员的密码、备份文件、重要源代码等。
通过搜索引擎可灵活查找各类敏感信息，搜索语法如下。
（1）邮件配置信息查询：site：Github.com smtp password；
（2）数据库信息泄露：site：Github.com sa password；
（3）svn信息泄露：site：Github.com svn；
（4）数据库备份文件：site：Github.com inurl：sql。
14.2.1.1 某企业数据库配置信息泄露
步骤一：利用各类搜索引擎搜索敏感文件，搜索的语法为“site：github.com password”，就可以直接在GitHub网站上找到配置信息。如图14-1所示，可以获得某企业
数据库配置信息。
图14-1 数据库配置信息
步骤二：利用数据库配置信息成功登录数据库，可获得大量企业用户信息，如图14-2
所示。
图14-2 成功登录数据库
14.2.1.2 某著名厂商数千名员工信息泄漏
步骤一：通过GitHub查找到某厂商的一个开源项目，如图14-3所示，发现其中一份文
件包含一个加密信息。
图14-3 网站配置信息
步骤二：通过base64解密，发现是一个HTTP请求包，并且包含Cookies值。将请求包
的内容复制到浏览器即可登录内部系统，如图14-4所示。
图14-4 利用数据包登录后台
步骤三：如图14-5所示，在该系统可以获得该企业数千名员工信息。
图14-5 内部通讯录
14.1.2 无限制登录任意账号
由于各类应用的安全防护手段参差不齐，导致攻击者可以利用漏洞绕过登录限制，或
者利用已经认证的用户，通过修改身份ID登录任意账号。
14.2.2.1 某大学网站SQL注入漏洞可绕过登录限制
步骤一：某学校网站后台为http：//www.xxx.edu.cn/login.asp，登录界面如图14-6所
示。
图14-6 绕过登录测试
步骤二：因网站登录处过滤不严格导致存在SQL注入漏洞，利用万能密码，可以绕过
登录的限制成功登录后台，如图14-7所示。
图14-7 成功登录
14.2.2.2 某APP客户端可以劫持任意账号
步骤一：在某App的官网上查看已经注册的用户，如图14-8所示。
图14-8 查看注册用户ID
步骤二：通过浏览器审查元素，如图14-9所示，可以得到该用户的ID值。
图14-9 查看用户ID
步骤三：下载该客户端，单击微博授权登录，如图14-10所示。
图14-10 授权登录
步骤四：在登录过程中截取数据包，如图14-11所示，修改uid里面的数据，即可登录
其他人的账号。
图14-11 替换用户ID
步骤五：如图14-12所示，成功利用微博劫持他人账号并登录成功。
图14-12 成功登录他人账号
14.1.3 电子邮件账号泄露事件
电子邮箱业务基于计算机和通信网的信息传递业务，利用电信号传递和存储信息，为
用户传送电子信函、文件数字传真、图像和数字化语音等各类型的信息。电子邮件最大的
特点是，人们可以在任何地方、任何时间收、发信件，解决了时空的限制，大大提高了工
作效率，为办公自动化、商业活动提供了很大便利。但电子邮件账号泄露，也将引发大量
的信息泄露。
14.2.3.1 邮件账号引发的信息泄漏
步骤一：如图14-13所示，通过搜索引擎查找某公司公开于互联网的文件。
图14-13 敏感文件查找
步骤二：下载该XLS文件，从文件中获得某企业员工的邮件账号密码，如图14-14所
示，成功登录邮件系统。
图14-14 登录邮件系统
步骤三：在一份邮件中发现该公司部分信息，包括VPN登录地址、OA系统及内网各
个系统的登录方式，利用该邮件的账号密码均能登录各类内网系统，从而获得大量敏感数
据。如图14-15所示，成功拨入VPN，任意访问内网系统。
步骤四：如图14-16所示，成功登录OA系统，可以获取职工个人信息，包括手机号
码、身份证、工作内容等。
图14-15 登入VPN
图14-16 登录OA系统
步骤五：如图14-17所示，成功登录内部订单系统，查看大量订单数据。
图14-17 登录内部数据平台
14.1.4 中间人攻击
中间人攻击，即所谓的Main-in-the-middle（MITM）攻击，顾名思义，就是攻击者插
入到原本直接通信的双方中间，让双方以为还在直接跟对方通信，但实际上双方的通信对
象已变成了攻击者，同时信息已经被中间人获取或篡改。而中间人攻击不仅可以捕获
HTTP未加密的传输数据，更可以捕获HTTPS协议加密的数据。
HTTPS中间人攻击一般分为SSL连接建立前的攻击，以及HTTPS传输过程中的攻击。
常见的HTTPS中间人攻击，会首先需结合ARP、DNS欺骗、伪造CA证书等技术，来对会