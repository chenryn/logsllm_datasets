the lack of the vote from p1. Even if a faulty leader may, in
extreme cases, collect two pre-prepareQCs, the scenario can
be handled by our protocol (in the following prepare phase).
Shadow blocks. One drawback for the above approach is that
the pre-prepare phase proposes two blocks but only decides
one block eventually. In Marlin, when the leader proposes two
blocks in this phase, the leader chooses the blocks that have
the same operations but different associated metadata, thereby
saving bandwidth.
V. THE MARLIN PROTOCOL
Marlin has two phases for normal operations (prepare phase
and commit phase) and three phases for view changes (pre-
prepare phase, prepare phase, and commit phase).
A. Marlin-Speciﬁc Data Structures
Normal blocks and virtual blocks. A block is represented
in the form b = [pl, pview, view, height, op, justif y], where
pl is the hash of the parent block of b, pview is the view
number of the parent block of b, view is the view number of
b, height is the height of b, op is a batch of client operations,
and justif y contains a quorum certiﬁcate (QC) for the parent
block of b. We will use b.x to denote the element x of b. In
a normal block, all ﬁelds should be speciﬁed. We also deﬁne
a virtual block, a special block used in view change. It differs
from a normal block in that its pl ﬁeld is set to ⊥.
Message format. A message m contains several ﬁelds:
m.view, m.type, m.block, m.justif y, and m.parsig.
Authorized licensed use limited to: Tsinghua University. Downloaded on August 07,2022 at 13:24:47 UTC from IEEE Xplore.  Restrictions apply. 
58
m.view is the view in which m is sent. m.type ∈
{NEW-VIEW, PRE-PREPARE, PREPARE, COMMIT}. m is called
a message for block b, if m.block = b. m.parsig contains a
partial signature and m.justif y includes one or two QCs.
Quorum certiﬁcates. A quorum certiﬁcate (QC) is a threshold
signature of a message m for a block b. Given a quorum
certiﬁcate qc for m,
type(qc) is m.type and block(qc) is
m.block. We useqc.x to denote the element x of m.block.
Rank of QCs and blocks. We introduce a notion of rank
(being inspired by but differing from [30]) that can simplify
our description. Intuitively, the rules of ranks help determine
if a new proposal can be safely accepted. In the common case,
ranks equal heights; more complex rank rules are used in the
view change. Each QC qc has a rank, denoted as rank(qc). The
rank(qc) does not implicitly return a value. Instead, we only
care if the rank of a QC is higher than that of another one.
The rank takes as input qc.view, type(qc), and qc.height. The
comparison rules are shown in Figure 4. If neither rank(qc1)
> rank(qc2) nor rank(qc2) > rank(qc1), then rank(qc1) =
rank(qc2).
rank(qc1) > rank(qc2), if one of the following is true:
(a) qc1.view > qc2.view;
(b) qc1.view = qc2.view, type(qc1) ∈ {PREPARE, COMMIT},
(c) qc1.view = qc2.view, type(qc1), type(qc2) ∈ {PREPARE,
and type(qc2) = PRE-PREPARE;
COMMIT}, and qc1.height > qc2.height.
Fig. 4: Rank comparison rules.
Figure 5 presents an example of ranks. According to
(cid:2)
3) > rank(qc2). According to rule (b),
rule (a), rank(qc
(cid:2)
3). According
rank(qc4) > rank(qc3) and rank(qc4) > rank(qc
(cid:2)
to (c), rank(qc2) > rank(qc1). qc3 and qc
3 have the same rank,
although their heights are different.
Fig. 5: The rank of QC.
We also deﬁne rank of blocks. For any two blocks b1 and
b2, we say rank(b1) > rank(b2), ifb 1.view > b2.view or
(b1.view = b2.view, b1.height > b2.height, and b1.justif y
is a prepareQC qc such that qc.view = b1.view).
B. Normal Case Protocol
Figure 6 and Figure 7 describe the pseudocode and the
communication pattern, respectively. Each replica pi maintains
four local variables: its current view cview, the last voted
block lb, lockedQC, and highQC. In particular, highQC
stores QCs to be sent in VIEW-CHANGE messages.
Prepare phase. We distinguish two cases, where Case N1
corresponds to actions for successive normal case operations
(with no view changes), and Case N2 corresponds to actions
after the pre-prepare phase in view change. Right now,
readers only need to understand Case N1 and should skip
Case N2. Case N1 actions are similar to other two-phase
HotStuff variants. Case N2 actions will become clear when
we describe the view change protocol in Sec. V-C.
• Case N1: highQC is a prepareQC for a normal block b
(cid:2).
(cid:2) The leader lv proposes a new block b, where b.view is
.height + 1, op includes
cview, b.pl is h(b
a batch of client operations, and b.justif y is highQC.
• Case N2: highQC is a pre-prepareQC qc for a normal
), b.height is b
(cid:2)
(cid:2)
block or highQC is of the form (qc, vc).
(cid:2) Block b is set to block(qc).
Then lv broadcasts a PREPARE message m for b, where
m.view and m.justif y are set to cview and highQC.
After receiving a PREPARE message m from lv such that
m.block = b, replica pi veriﬁes whether the message is well-
formed, the proposal is created in the same view as cview,
and b has a higher rank than its last voted block lb. Then pi
veriﬁes if m.justif y is valid according to its local lockedQC
by checking if one of the following holds:
• Case N1: m.justif y is a prepareQC qc.
(cid:2) pi checks whether b extends block(qc), qc.view = cview
and rank(qc) ≥rank(lockedQC).
• Case N2: m.justif y is a pre-prepareQC qc for a normal
block or m.justif y is of the form (qc, vc).
(cid:2) pi checks whether b is the same with block(qc), qc.view =
cview and rank(qc) ≥rank(lockedQC).
If m.justif y is of the form (qc, vc), pi additionally veriﬁes
if qc is a pre-prepareQC for a virtual block and validate
qc by verifying whether vc is a prepareQC, vc.view =
qc.pview, and vc.height = qc.height − 1.
(cid:2) for m.block
Then pi sends lv a PREPARE message m
(cid:2). Meanwhile, pi up-
together with a partial signature for m
dates its lb to m.block and sets highQC to m.justif y. If
m.justif y is a prepareQC, pi sets lockedQC to m.justif y.
Commit phase. Upon receiving n − f signed responses for
the PREPARE message for b, the leader lv combines the partial
signatures to form a prepareQC qc. Then lv broadcasts a
COMMIT message m for b, where m.justif y = qc.
After receiving a valid COMMIT message m from lv, replica
pi veriﬁes whether the prepareQC included in the message
is generated in current view. Then pi sends to lv a signed
response for the COMMIT message for m.block. Replica pi
also updates its highQC and lockedQC to m.justif y.
Upon receiving n − f signed responses for the COMMIT
message for b, lv forms a commitQC and forwards it to all
replicas that then commit block b and its ancestors.
C. View Change Protocol
A view change is the mechanism through which a leader is
replaced. A timeout is started when a replica enters a new view
and a view change is triggered after the value expires. The
pseudocode of the view change protocol is shown in Figure 9.
To start a new view v, each replica pi sets cview ← cview +
1 and sends a VIEW-CHANGE message m to current leader,
where m.block is lb, m.justif y is highQC, and m.parsig
is a partial signature for lb.
Pre-prepare phase. The view change protocol begins with
a pre-prepare phase. This phase is the most interesting and
complex part of our protocol, and we describe it in full detail—
distinguishing the code for the leader and replicas.
Authorized licensed use limited to: Tsinghua University. Downloaded on August 07,2022 at 13:24:47 UTC from IEEE Xplore.  Restrictions apply. 
59
Let lv be the leader of view v. Each replica pi keeps track of four variables: the current view cview, the last voted block lb, highQC,
and lockedQC. Replicas initialize cview ← 1, lb ← ⊥, highQC ← ⊥, and lockedQC ← ⊥.
Normal case for replica pi:
– PREPARE. (i) As a leader: broadcast a block b = [pl, pview, cview, height, op, highQC] in a PREPARE message m, where m.justif y
is highQC, and b extends the block of highQC (Case N1) or b is the block of highQC (Case N2). (ii) As a replica: Upon receiving
a valid PREPARE message from lv, if m.block has a higher rank than lb and m.justif y is valid according to lockedQC, send lv a
signed response for the PREPARE message, and set lb to m.block and highQC to m.justif y. If m.justif y is a prepareQC, set
lockedQC to m.justif y.
– COMMIT. (i) As a leader: Upon receiving n− f signed responses for m, form a prepareQC qc for b and broadcast a COMMIT message
m for b where m.justif y is qc. Then wait for n − f signed responses to form a commitQC for b and forward it to all replicas.
(ii) As a replica: Upon receiving a valid COMMIT message from lv, ifm.justif y.view = cview, send lv a signed response for the
COMMIT message and set highQC and lockedQC to m.justif y. Then wait for a commitQC to commit b and its ancestors.
Fig. 6: Normal case operation for Marlin.
Fig. 7: Normal case operation.
contains
As a leader: Upon receiving a quorum of VIEW-CHANGE
messages Mv for view v, lv begins the pre-prepare phase. In
particular, lv selects highQCv—valid QC(s) with the highest
rank included in Mv. In highQCv, there may be one or two
such QCs with the same (highest) rank. Also, let bv be a block
with the highest rank contained in the block ﬁeld of Mv. We
distinguish three cases:
• Case V1 (Figure 8a): highQCv is a prepareQC qc and at
least one replica has voted for a block with a higher rank
than qc (i.e., rank(bv) > rank(block(qc))).
(cid:2) lv proposes two blocks: a normal block b1 extending
block(qc) and a virtual block b2. b2.height and b2.pview are
set to qc.height+2 and qc.view. b1.justif y and b2.justif y
are both set
to qc. Then lv broadcasts a PRE-PREPARE
message with two proposals m1 (for b1) and m2 (for b2).
• Case V2 (Figure 8b): highQCv is a prepareQC qc and
rank(block(qc)) ≥ rank(bv), or highQCv contains only one
valid pre-prepareQC qc.
(cid:2) lv proposes a normal block b which extends block(qc).
Then lv broadcasts a PRE-PREPARE message m for b.
• Case V3 (Figure 8c): highQCv
two valid
pre-prepareQCs qc1 and qc2.
(cid:2) lv proposes two blocks: b1 that extends block(qc1) and b2
that extends block(qc2). Then lv broadcasts a PRE-PREPARE
message with two proposals m1 (for b1) and m2 (for b2).
(cid:2)
For each block b, if apre-prepareQC for a virtual block b
is included in b.justif y, the prepareQC for the parent block
(cid:2) should also be included in b.justif y for veriﬁcation. For
of b
each proposal mi, mi.justif y is set to mi.block.justif y.
Then lv waits for n − f signed responses for the PRE-
PREPARE message to form a pre-prepareQC qc. Ifqc is a
QC for a normal block, lv sets highQC to qc; ifqc is for a
virtual block and meanwhile a prepareQC vc with a higher
rank than highQCv is received, lv sets highQC to (qc, vc).
Note that Case V1 and Case V3 propose two blocks. To
reduce bandwidth, we ask them to be shadow blocks: they
share the same bulk data (client operations) but differ in
associated data only (e.g., height), so only one of them needs
to carry operations.
As a replica: Each correct replica may vote for one or two
proposals from lv. For each proposal mi, let qc be the QC with
(cid:2) denote mi.block
the highest rank in mi.justif y. Let b and b
and block(qc), respectively. Replica pi checks whether b
(cid:2) or b is a valid virtual block. If either case
extends block b
is satisﬁed, we distinguish three cases:
• Case R1: If qc is a valid QC, rank(qc) ≥ rank(lockedQC),
and qc.view < cview, then pi sends lv a PRE-PREPARE
(cid:2)
message m
i together with a partial signature.
• Case R2: If mi.justif y = qc,
type(qc) = PREPARE,
qc.view < cview, qc.view = lockedQC.view, qc.height =
lockedQC.height− 1, and b is a valid virtual block, then pi
(cid:2)
i together with a partial
sends lv a PRE-PREPARE message m
signature, where m
• Case R3: If qc is a valid pre-prepareQC, qc.view < cview
and block(qc) = block(lockedQC), then pi sends lv a PRE-
(cid:2)
PREPARE message m
i together with a partial signature.
(cid:2)
i.justif y is set to lockedQC.
Prepare and commit phases. After the pre-prepare phase,
replicas switch to the prepare phase of the normal case and
now it becomes clear that Case N2 in Sec. V-B for the normal
case operation (code highlighted in gray) applies. In this case,
the leader has just obtained a valid pre-prepareQC for a
block and will send a PREPARE message for the block; replicas
need to verify the pre-prepareQC included in the received
PREPARE message. If the PREPARE message is formed for
a virtual block b, replicas have to additionally verify vc (a
prepareQC) such that block(vc) is the parent block of b.
Furthermore, in Case N2, replicas do not become locked on
a pre-prepareQC. (Otherwise, successive view changes may
create liveness issues in a way much like the insecure two-
phase HotStuff we analyzed.) In view change, replicas are
locked on the prepareQC for block b in the commit phase and
commit block b after receiving the corresponding commitQC.
Ranks vs. heights. Besides heights, we also deﬁne the rank
(for both QCs and blocks) that is additionally related to the
view number and the type of QCs. First, we deﬁne the rank for
QCs to simplify the description of safety rules in view change.
Second, we deﬁne the rank for blocks to enforce replicas to
vote for only one block in the prepare and commit phases:
note replicas can vote for two blocks during the view change,
likely forming two pre-prepareQCs with the same rank; we
Authorized licensed use limited to: Tsinghua University. Downloaded on August 07,2022 at 13:24:47 UTC from IEEE Xplore.  Restrictions apply. 
60
(a) Case V1: propose two shadow blocks with the
same op: a normal block b1 (extending a block for
the highQCv) and a virtual block b2 (extending
a nil block). The case occurs when the leader
receives a prepareQC and is unsure whether it
has a safe view change snapshot.
(b) Case V2: propose one block. This case
occurs when the leader is certain that it has a
safe view change snapshot.
(c) Case V3: propose two shadow blocks: b1 that
(cid:2)
extends b0 and b2 that extends b
0. This case oc-
curs when the leader receives pre-prepareQCs
(cid:2)
for blocks b0 and b
0 and is unsure whether some
correct replica is locked on the prepareQC for
one of them.
Fig. 8: Running examples for the pre-prepare phase in the view change.
(cid:2)
(cid:2)
(cid:2)
Replica pi switches to the view change protocol if timeout occurs in any phases. Replica pi sets cview ← cview + 1 and sends its
VIEW-CHANGE m for view cview to the current leader, where m.block ← lb and m.justif y ← highQC.
View change for replica pi in view v:
– PRE-PREPARE. (i) As a leader: Upon receiving Mv (a set of n − f VIEW-CHANGE messages for view v), let highQCv be the valid
QC(s) with the highest rank contained in the justif y ﬁeld of Mv and bv be (any) one block with the highest rank in the block ﬁeld.
We distinguish three cases:
• Case V1: highQCv is a prepareQC qc and rank(block(qc)) < rank(bv): Let b
(cid:2)
message m = m1||m2, where m1 is a proposal for a normal block b1 = [hash(b
(cid:2)
and m2 is a proposal for a virtual block b2 = [⊥, b
m2.justif y are set to highQCv.
denote block(highQCv). Broadcast a PRE-PREPARE
.height + 1, op, highQCv]
.height + 2, op, highQCv] such that both m1.justif y and
• Case V2: 1) highQCv is a prepareQC qc and rank(block(qc))≥ rank(bv) or 2) highQCv contains one valid pre-prepareQC
.height +
denote block(highQCv). Broadcast a PRE-PREPARE message m for block b = [hash(b
• Case V3: highQCv contains two valid pre-prepareQCs qc1 (for a normal block) and qc2 (for a virtual block): Let b
(cid:2)
1 and b
qc: Let b
1, op, highQCv], where m.justif y is highQCv.
(cid:2)
2 denote
block(qc1) and block(qc2), respectively. Broadcast a PRE-PREPARE message m = m1||m2, where m1 is a proposal for block b1 =
(cid:2)
[hash(b
2.height +
1, op, (qc2, vc)]. Inm 2, vc is the prepareQC for the parent block of b
(cid:2) Wait for n−f signed responses for a PRE-PREPARE message, form a pre-prepareQC, update highQC and switch to PREPARE phase.
(ii) As a replica: Upon receiving from lv a valid PRE-PREPARE message m that may include one or two proposals (m1 and m2), if for
each such proposal mi, mi.justif y is formed before view v, then do the following:
(cid:2)
(cid:2)
1.height + 1, op, qc1] and m2 is a proposal for block b2 = [hash(b
2), b
• Case R1: If mi.justif y includes a valid QC qc and rank(qc) ≥ rank(lockedQC), send lv a signed response for mi.
• Case R2: If mi.justif y is a valid prepareQC, qc.view = lockedQC.view and mi.block is a virtual block with height
• Case R3: If mi.justif y includes a valid pre-prepareQC qc and block(qc) =block( lockedQC), send lv a signed response for mi.
lockedQC.height + 1, send lv its lockedQC and a signed response for mi.
(cid:2)
2.view, cview, b
(cid:2)
1.view, cview, b
.view, cview, b
.view, cview, b
(cid:2)
1), b
), b
.view, cview, b
(cid:2)
), b
(cid:2)
2.
(cid:2)
(cid:2)