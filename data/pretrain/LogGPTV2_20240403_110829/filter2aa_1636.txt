### Lessons Learned from Five Years of Building Capture the Flag

**Vito Genovese - DEF CON Beijing 2018**

#### Introduction
Hello! Today, I will be sharing my experiences and lessons learned from five years of building and running Capture the Flag (CTF) competitions at DEF CON.

#### History of CTF at DEF CON
- **1996**: The first CTF game was introduced.
- **2000**: The format and rules were formalized.
- **2002-2004**: Ghettohackers organized the event.
- **2005-2008**: Kenshoto took over.
- **2009-2012**: ddtek managed the competition.
- **2013-2017**: Legitimate Business Syndicate (LBS) ran the CTF.
- **2018-Present**: Order of the Overflow is the current organizer.

#### Two Distinct Formats
1. **Jeopardy Style**
   - **Scoreboard**: Teams earn points by solving challenges.
   - **Process**:
     1. Get the challenge.
     2. Solve it.
     3. Earn points.
   - **Example**: From SHA2017 CTF
     - **Step 1**: Download the file.
     - **Step 2**: Identify the Windows STDIO .exe.
     - **Step 3**: Determine the goal.
     - **Step 4**: Guess the correct input.
     - **Step 5**: Reverse engineer the binary.
     - **Step 6**: Write a program to automate the solution.
     - **Step 7**: Submit the solution and earn points.

2. **Attack-Defense**
   - **Process**:
     - Reverse engineer the system.
     - Patch vulnerabilities.
     - Exploit other teams' systems.
     - Ensure your system remains operational.
   - **Scoring**:
     - Gain points by capturing flags.
     - Lose points if your flags are captured.
     - Incur significant penalties for failing availability checks.
   - **Example**: DEF CON CTF Finals
     - **Rubix Challenge**:
       - 54 Rubik's cube instructions converted into shellcode.
       - Lab RATs provided a detailed write-up: [Link](https://blog.rpis.ec/2017/08/defcon-finals-2017-introduction-rubix.html)
       - Steps included:
         - Writing a 9-bit to 8-bit netcat.
         - Analyzing 9-bit strings in libc.
         - Symbolizing libc.
         - Understanding how main() is called.

#### Running Smoothly
- **Early Start**: Begin preparations well in advance.
- **Team Composition**:
  - **Legitimate Business Syndicate (LBS)**:
    - Half of the team came from 2005-2007 university teams.
    - The other half were 2012 coworkers.
    - **Transition**:
      - August 2012: ddtek steps down.
      - December 2012: Gyno starts recruiting.
      - February 2013: Proposal submitted.
      - March 2013: Proposal accepted.
    - **Specialties**:
      - 3/4 of the group are reverse engineers.
      - Focus areas include radio (2014), hardware (2015), and esoteric computing (2017).
    - **Infrastructure**: Highly dependent on Selir's infrastructure.
    - **Web Application**: I started with the database-backed web application.

#### Team Building
- **People and Roles**:
  - People grow and change, as do their roles.
  - Consider who you know, trust, and like when building the team.
- **Communication**:
  - Asynchronous communication (chat) is effective.
  - Weekly meetings are essential.

#### Fair Contest
- **Ethical Hacking**:
  - CTF is about computer hacking, but within a defined system.
  - Hack the right thing the wrong way, not the wrong thing.
  - Fix issues in the "wrong" way, but ensure fairness.
- **Qualifiers**:
  - Services on separate hosts.
  - Multiple hosts in different locations.
  - Connections in separate containers.
  - Use xinetd and runc.
  - Limit system calls with seccomp.
- **Finals**:
  - More complex games and problems.
  - Focus on reverse engineering, not OS administration.
  - **Improvements**:
    - 2013: Unprivileged team and service accounts.
    - 2014: Better understanding of the "Superman defense" (blocking opponent IPs and preventing flag reading).

#### Cyber Grand Challenge (CGC)
- **DARPA Project**:
  - Started in 2014.
  - CTF for autonomous computers.
  - Extremely formalized.
- **Challenge Binaries (CBs)**:
  - 32-bit i386.
  - Special CGCEF executable format.
  - Limited system calls.
  - No retained state.
- **Proof of Vulnerability (PoVs)**:
  - 32-bit i386 CGCEF.
  - Demonstrate vulnerabilities such as register control and memory disclosure.
  - Run by the scoring system.
- **Offline Evaluation**:
  - Team interface distributes binaries and collects replacements.
  - Runs availability checks and PoVs in isolation.
  - Designed for reproducibility and auditability.

#### Fun Challenges
- **Break Expectations**:
  - Example: dosfun4u (a DOS binary requiring IDA Pro patching).
  - badger (MSP-430 on physical hardware with a custom CDMA radio network).
- **Consensus Evaluation**:
  - CGC's big attack-defense innovation.
  - Teams see each other's patched binaries.
  - Increased number of binaries needing reverse engineering.
  - Examples: 1000 cuts/crackme2000, pushing teams towards automated analysis.

#### Conclusion
- **Continuous Learning**:
  - There is always more to learn.
  - More work ahead to improve and grow.
- **Opportunity**:
  - CTF provides an opportunity for more players to grow.
  - The best way to learn is by doing.
- **Reflection**:
  - Five years with the best group of people.
  - Building a contest for the friendliest and smartest community.
- **Gratitude**:
  - Thank you for making this journey amazing!

**Contact Information**: vito_lbs@pi.email

Thank you!