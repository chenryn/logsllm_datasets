### Method

If a recovery action itself fails and the system enters another unexpected erroneous state \( S_{us} \), the recovery for the initial recovery action must be guaranteed by a "recovery for recovery" mechanism. This mechanism directly transitions the current system state from \( S_{us} \) to the expected state \( S_2 \) (M. Fu, et al., 2016).

### 7.3 Applicable Recovery Patterns Filtering

Not every recovery pattern is applicable (M. Fu, et al., 2015; M. Fu, et al., 2016). For example:
- The **Compensated Undo & Redo** pattern may not be applicable if the previous state is unreachable from the current state.
- The **Compensated Undo & Alternative** pattern may not be applicable if no alternative step exists.
- The **Direct Redo** pattern may not be applicable if re-executing the step does not yield the desired result (i.e., the step is not idempotent).

To determine the applicable recovery patterns, three procedures are necessary:
1. **State Reachability Checking**
2. **Idempotence Checking**
3. **Step Alternative Existence Checking** (M. Fu, et al., 2015; M. Fu, et al., 2016)

#### State Reachability Checking
This involves verifying whether the operational actions required for state transition are feasible in the context of cloud operations. In sporadic cloud operations, transitions involving stateful data drive creation or IP address reassignment are infeasible:
- **Stateful Data Drive Creation**: Original data inside the drive is lost and cannot be replicated, even though an empty drive can be created.
- **IP Address Reassignment**: Cloud platforms do not allow this due to limited visibility and control (G. Lin, et al., 2008).

If the state transition does not involve these infeasible actions, it is considered reachable.

#### Idempotence Checking
This checks whether the system can be recovered by simply re-running the current step. Two scenarios are considered:
1. If the current erroneous state is the same as the expected state or the captured consistent state before the step, re-running the step is sufficient (e.g., launching a cloud instance).
2. If re-running the step always yields the same expected result, regardless of the current state (e.g., updating an auto-scaling group with a new launch configuration).

#### Step Alternative Existence Checking
This checks if there are any alternative steps available. For example, launching a new instance in an auto-scaling group can be replaced by attaching a new instance to the auto-scaling group. POD-Recovery provides a mapping list for step alternatives, which is used to check if alternatives exist for a given step (M. Fu, et al., 2015; M. Fu, et al., 2016).

### Algorithm: Determine Applicable Recovery Patterns

```csharp
Function DetermineApplicableRecoveryPatterns (S_err, S1, C1, S2, Step X, Step X-1, S0)
{
    List applicableRecoveryPatterns = new List();
    
    if (StateReachabilityChecking(S_err, S1))
    {
        applicableRecoveryPatterns.Add("Compensated Undo & Redo");
    }
    
    if (StateReachabilityChecking(S_err, S1) && StepAlternativeExists(Step X))
    {
        applicableRecoveryPatterns.Add("Compensated Undo & Alternative");
    }
    
    if (C1 == S1 && StateReachabilityChecking(S_err, C1))
    {
        applicableRecoveryPatterns.Add("Rewind & Replay");
    }
    
    if (StateReachabilityChecking(S_err, C1) && StepAlternativeExists(Step X))
    {
        applicableRecoveryPatterns.Add("Rewind & Alternative");
    }
    
    if (StateReachabilityChecking(S_err, S2))
    {
        applicableRecoveryPatterns.Add("Reparation");
    }
    
    if (IdempotenceChecking(Step X))
    {
        applicableRecoveryPatterns.Add("Direct Redo");
    }
    
    if (IdempotenceChecking(Step X) && StepAlternativeExists(Step X))
    {
        applicableRecoveryPatterns.Add("Direct Alternative");
    }
    
    if (StateReachabilityChecking(S_err, S0))
    {
        applicableRecoveryPatterns.Add("Farther Undo & Redo");
    }
    
    return applicableRecoveryPatterns;
}
```

### 7.4 Recovery Actions Generation

In the context of cloud sporadic operations, generating recovery actions for each applicable recovery pattern is based on state transition analysis. POD-Recovery determines the necessary actions to transition the current erroneous system resource state to the goal state, and identifies the steps or step alternatives to be executed (M. Fu, et al., 2015; M. Fu, et al., 2016).

#### AI Planning for Recovery Action Generation

The state transition-based recovery plan generation uses an AI planning technique (J. Hoffmann, et al., 2012). The set of possible recovery plans is large, comprising all pairs of current error states and goal states. Given the infinite set of possible error states, pre-specifying recovery plans is impractical. Therefore, an automated planning approach is adopted.

The AI planner used is Fast-Forward (FF) (J. Hoffmann, et al., 2012), which requires:
- An initial state
- A goal state
- A set of action templates (planning domain)

Actions in the planning domain are specified in PDDL, including preconditions, parameters, and effects. The planner generates a state transition plan.

POD-Recovery extends the existing undo tool's domain model to support additional cloud resources like auto-scaling groups and elastic load balancers. The extended domain model includes over 1300 lines of PDDL code, compared to about 1100 lines in the original model.

#### Table 6: AI-Planning for Eight Recovery Patterns

| Recovery Pattern          | AI-Planning Recovery Plan                                   |
|---------------------------|------------------------------------------------------------|
| Compensated Undo & Redo   | From current erroneous state to expected state before the step (S_curr, ES(X-1)) |
| Compensated Undo & Alternative | From current erroneous state to expected state before the step (S_curr, ES(X-1)) |
| Rewind & Replay           | From current erroneous state to captured state before the step (S_curr, CS(X-1)) |
| Rewind & Alternative      | From current erroneous state to captured state before the step (S_curr, CS(X-1)) |
| Reparation                | From current erroneous state to expected state after the step (S_curr, ES(X)) |
| Direct Redo               | N.A.                                                       |
| Direct Alternative        | N.A.                                                       |
| Farther Undo & Redo       | From current erroneous state to expected state before the step prior to last (S_curr, CS(X-2)) |

#### Embedding AI Planning for Recovery Plans

1. **Initial and Goal States**: Capture the current error state and the goal state, translating them into a PDDL planning problem.
2. **AI Planner Input**: Use the state transition problem file and the planning domain model file as inputs to the AI planner.
3. **Plan Generation**: The AI planner generates the recovery plan, ensuring it is the shortest path.
4. **Execution**: Translate the generated plan into executable code and execute it, calling API operations like "RunInstances".

#### Challenges and Solutions

- **Efficiency**: Limit the planning problem to relevant resources to reduce computational complexity.
- **Deletion Actions**: Explicitly state which resources should be deleted in the goal state to ensure the planner includes the necessary deletion actions.

### Example: Recovery Action for Rewind & Replay

For the rolling upgrade operation, if the termination of an old version instance takes too long, the recovery actions for the **Rewind & Replay** pattern include:
- Terminate the old version instance.
- Launch another old version instance and attach it to the auto-scaling group.
- Terminate the newly launched old version instance.

### Experimental Evaluation

In the experimental evaluation, we will present the details of the generated recovery actions for each recovery point in the evaluated sporadic operations.