作者: 菜丝@蚂蚁金服巴斯光年实验室
Electron 是一款基于 Web 技术（HTML5 + Javascript + css）构建图形界面的开发框架，基于 nodejs 和
Chromium 开发。因为无痛兼容 nodejs 包管理（npm）的大量功能丰富的模块，相对于 native
实现降低了开发难度和迭代成本，受到了开发者的青睐。
## 漏洞描述
Electron 近日发布了漏洞 [CVE-2018-1000006](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2018-1000006)
的安全公告：
这是一个远程命令执行漏洞。在受影响的应用注册了自定义 url 协议之后，攻击者可以利用这些伪协议，在浏览器等场景中远程通过恶意的 url
传递命令行参数执行任意命令，最终完全控制受害者的计算机。由于其利用方式简单粗暴，执行效果理想，是一个危害很大的漏洞。
由于 Electron 的流行，受影响的软件甚至包括 Atom 编辑器, GitHub 客户端, VSCode 编辑器, Slack 客户端这样用户颇多的
Windows 桌面应用。
Electron 官方公告建议升级至如下修订版本（或更高）以获得补丁：
  * [1.8.2-beta.4](https://github.com/electron/electron/releases/tag/v1.8.2-beta.4)
  * [1.7.11](https://github.com/electron/electron/releases/tag/v1.7.11)
  * [1.6.16](https://github.com/electron/electron/releases/tag/v1.6.16)
如果暂时不能更新框架版本，那么应该在使用
[app.setAsDefaultProtocolClient](https://electronjs.org/docs/api/app#appsetasdefaultprotocolclientprotocol-path-args-macos-windows) api 的时候将用户可控参数放置于 "--" 之后：
    app.setAsDefaultProtocolClient(protocol, process.execPath, [
      '--your-switches-here',
      '--'
    ])
## 漏洞成因
Electron 支持注册自定义 url 协议，浏览器可通过伪协议这种 IPC 方式唤起本地的应用。例如 VSCode 编辑器就注册了 `vscode:`
这一伪协议，在浏览器中安装插件时可以直接点击跳转到 VSCode 的界面：
在 Windows、macOS 以及某些 Linux 桌面环境上都对这种功能提供了原生支持。这次出现远程命令注入的漏洞仅限于 Windows 平台，是因为与
Win32 应用注册 url scheme 和调用的机制有关。
先了解一下 Windows 下的伪协议。微软的 MSDN 对其的介绍文章：[Registering an Application to a URI
Scheme](https://msdn.microsoft.com/en-us/library/aa767914%28v=vs.85%29.aspx)
假设需要注册一个名为 `alert:` 的协议关联到 alert.exe 打开，在 Windows 中需要创建如下的注册表项结构：
    HKEY_CLASSES_ROOT
       alert
          (Default) = "URL:Alert Protocol"
          URL Protocol = ""
          DefaultIcon
             (Default) = "alert.exe,1"
          shell
             open
                command
                   (Default) = "C:\Program Files\Alert\alert.exe" "%1"
命令行中的 %1 表示占位符，也就是通过 argv 将 url 作为参数传递给目标程序。之所以需要双引号，是为了避免参数中存在空格，导致
`CommandLineToArgvW` 函数错误地将文件名拆分成多个部分。
应用可以自行在安装包中创建注册表项，此外 Electron 提供了一个 API
[app.setAsDefaultProtocolClient(protocol[, path,
args])](https://electronjs.org/docs/api/app#appsetasdefaultprotocolclientprotocol-path-args-macos-windows) 来实现注册。
如果 `alert.exe` 没有运行，打开 alert: 协议 url 将会通过命令行执行 alert.exe：
`"C:\Program Files\Alert\alert.exe" "alert:Hello%20World"`
Internet Explorer 在执行命令行的时候会先对 url 进行一次 url decode 解码。
HKEY_CLASSES_ROOT 下不仅保存了伪协议的列表，还有文件扩展名的关联数据。事实上 Win32 程序处理本地文件和 url
的打开是类似的，甚至可以使用同一套 Win32 API —— ShellExecute(Ex) 。算上 ANSI 和 Unicode 的版本，一共 4
个函数。
打开一个本地文件：
`ShellExecuteW(NULL, L"open", L"c:\\hello.txt", NULL, NULL , SW_SHOW );`
通过系统默认浏览器访问淘宝：
`ShellExecuteW(NULL, L"open", L"https://www.taobao.com", NULL, NULL , SW_SHOW
);`
可以看到除了 lpFile 之外其他参数可以保持完全一致。ShellExecuteExW 也是类似的情况。
ShellExecute 系列函数在这里埋了两个坑。 **首先是可能存在开发者原本打算传入
url，却被解析成本地路径而变成打开文件甚至运行可执行文件；其次是关联命令行里包裹参数 "%1" 的双引号竟然是可以被闭合掉的。**
在 MSDN 中直接说明了闭合引号这一行为：
> To mitigate this issue:
>
>   * Avoid spaces, quotes, or backslashes in your URI
>   * Quote the %1 in the registration ("%1" as written in the 'alert' example
> registration)  
>  However, avoidance doesn't completely solve the problem of quotes in the
> URI or a backslash at the end of the URI.
>
再回到注册表关联的字符串部分。既然可以用双引号闭合 "%1"，这意味着可以通过伪造 argv 来向应用程序插入多个参数开关。
例如 `alert:1" --this-is-the-new "what`
最终创建的命令行变成了：
    "C:\Program Files\Alert\alert.exe" "alert:1" --this-is-the-new "what"
Electron 生成的应用发行包包括两部分——预编译好的 Electron 运行时和应用本身的 Web 资源文件打包（*.asar）。由于
Electron 基于 Chromium 开发，一些 Chromium 的命令行开关对于 Electron 的主执行文件同样起作用。
Chromium 支持的命令行开关如下：
  * 
  * 
Chromium 默认使用多进程模式。渲染器、插件进程的路径和参数可以在 Chromium 命令开关中自定义。CVE-2018-1000006 公开的
poc 利用的是 --gpu-launcher，经过巴斯光年实验室的分析，以下参数均支持执行任意命令：
  * \--renderer-cmd-prefix
  * \--gpu-launcher
  * \--utility-cmd-prefix
  * \--ppapi-plugin-launcher
  * \--nacl-gdb
  * \--ppapi-flash-path 和 --ppapi-flash-args
这意味着闭合引号之后，我们可以在 url 中直接注入命令执行。当然，如果嫌弃 gpu 进程和 renderer 进程的沙箱，我们还有 `--no-sandbox` 。
## 补丁分析
官方提供的补丁如下：
    +  if (!atom::CheckCommandLineArguments(arguments.argc, arguments.argv))
    +    return -1;
在启动之后增加了对命令行参数的检查，使用一个庞大的黑名单来屏蔽 Chromium 的参数开关：
然后在 atom/browser/atom_browser_client.cc 中增加了对子进程路径的检查：
    +  // Make sure we're about to launch a known executable
    +  base::FilePath child_path;
    +  PathService::Get(content::CHILD_PROCESS_EXE, &child_path);
    +  CHECK(base::MakeAbsoluteFilePath(command_line->GetProgram()) == child_path);
    +
尝试启动非法的外部程序将导致异常退出。
此外对于官方给出的临时解决措施，其实也正是 Chromium 本身防止参数注入的办法，即在 “--” 开关之后出现的类似 --no-sandbox
参数将视作文件名处理。
## 漏洞考古
以下两个浏览器都是使用了 ShellExecute* 系 api 来打开外部 url scheme。
InternetExplorer 11
    Breakpoint 3 hit
    SHELL32!ShellExecuteExW:
    00007ffc`6fad0ff0 48895c2408      mov     qword ptr [rsp+8],rbx ss:00000072`e9eff790=0000000000000000
    0:019> k
     # Child-SP          RetAddr           Call Site
    00 00000072`e9eff788 00007ffc`4b4e34fc SHELL32!ShellExecuteExW
    01 00000072`e9eff790 00007ffc`4b1f3466 IEFRAME!CShellExecWithHandlerParams::Execute+0xbc
    02 00000072`e9eff840 00007ffc`6e7dd544 IEFRAME!BrokerShellExecWithHandlerThreadProc+0x146
Chromium
[https://cs.chromium.org/chromium/src/chrome/browser/platform_util_win.cc?type=cs&sq=package:chromium&l=101](https://cs.chromium.org/chromium/src/chrome/browser/platform_util_win.cc?type=cs&sq=package:chromium&l=101)
    if (reinterpret_cast(ShellExecuteA(NULL, "open",
                                                    escaped_url.c_str(), NULL, NULL,
                                                    SW_SHOWNORMAL))  k
     # Child-SP          RetAddr           Call Site
    00 00000018`474fe0b8 00007ffc`6d81b0f7 KERNEL32!CreateProcessWStub
    ......
    0e 00000018`474fee30 00007ffc`568c2ad7 SHELL32!CDefFolderMenu::InvokeCommand+0x13e
    0f 00000018`474ff1a0 00007ffc`565fca55 twinui!CExecuteItem::Execute+0x1ab [onecoreuap\shell\lib\executeitem\executeitem.cpp @ 351] 
    10 00000018`474ff220 00007ffc`565fa5c8 twinui!CBrokeredLauncher::CLaunchHelper::_LaunchShellItemWithOptionsAndVerb+0x19d [shell\twinui\associationlaunch\lib\launcher.cpp @ 2352]
    11 00000018`474ff3a0 00007ffc`565fcef8 twinui!CBrokeredLauncher::CLaunchHelper::_ExecuteItem+0x28 [shell\twinui\associationlaunch\lib\launcher.cpp @ 2308]
    12 00000018`474ff3e0 00007ffc`565fa046 twinui!CBrokeredLauncher::CLaunchHelper::_LaunchWithWarning+0x3c8 [shell\twinui\associationlaunch\lib\launcher.cpp @ 2267]
    13 00000018`474ff490 00007ffc`565fa3c1 twinui!CBrokeredLauncher::CLaunchHelper::_DoLaunch+0x3e [shell\twinui\associationlaunch\lib\launcher.cpp @ 2210] 
    14 00000018`474ff4c0 00007ffc`565f48a4 twinui!CBrokeredLauncher::CLaunchHelper::_DoLaunchOrFallback+0x32d [shell\twinui\associationlaunch\lib\launcher.cpp @ 2064]
    15 00000018`474ff580 00007ffc`565ee094 twinui!CBrokeredLauncher::CLaunchHelper::LaunchUri+0xd0 [shell\twinui\associationlaunch\lib\launcher.cpp @ 1084]
但经过简单测试，从 url 闭合引号这个行为同样存在。
Electron 的这个远程命令注入漏洞罪魁祸首应该是 ShellExecute _埋下的坑。实际上被坑过的客户端软件远不止这个，甚至
ShellExecute_ 自身在处理字符串时也出现过严重漏洞。
### MS07-061 (CVE-2007-3896)
早在 10 年前就有这样的漏洞，通过浏览器点击链接却执行了任意命令：
> A remote code execution vulnerability exists in the way that the Windows
> shell handles specially crafted URIs that are passed to it. If the Windows
> shell did not sufficiently validate these URIs, an attacker could exploit