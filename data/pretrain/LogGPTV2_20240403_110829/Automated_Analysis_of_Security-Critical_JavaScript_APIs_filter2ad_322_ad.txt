[35].
Binary Expression Statement. According to the semantics
of a binary operation statement s := y = x1 binop x2 ,
if binop ∈ {$$,||} and if x1 or x2 resolve to an
then they could potentially get assigned to y.
object
We therefore conservatively encode such statements by
{Assign(y, x1), Assign(y, x2)}. This is a subtle semantic
370
feature that existing JavaScript points-to analysis frame-
works [11, 15] don’t seem to account for. Furthermore, if
binop /∈ {$$,||} and if x1 or x2 resolve to an object, then
the evaluation might trigger an implicit ‘ToPrimitive’ type
conversion which could potentially invoke the valueOf and
toString methods of the object. We encode such statements
by {TP(x1, ˆl), TP(x2, ˆl)}, where TP(x, ˆl) encodes that a
‘ToPrimitive’ conversion should be triggered on variable x
in scope ˆl.
Load. The evaluation of a load statement s := y = x1 [x2 , a]
could potentially involve a ‘ToPrimitive’ conversion on the
argument x2 and a ‘ToObject’ conversion on the object x1.
The statement is encoded as
{TP (x2, ˆl), Stack (x1, ˆl1), ObjType(ˆl1), NotBuiltin(ˆl1)} S
{Load (y, x1, a)}
Here ˆl1 = h(Lab(s), 1) is the abstract location of the object
created on the ﬂy from the ‘ToObject” conversion. The ﬁrst
set in the union encodes that x1 points to a non-built-in
object with abstract location ˆl1 and that x2 must be converted
to a primitive value in the scope ˆl. Load(y, x1, a) encodes
that contents of x1.p ﬂow into y for all property names p
that annotate to a.
Function Declaration and Calls. A function declaration
s := function x(˜y){s1} is encoded as:
 FormalArg(ˆl1, 1, y1), . . . , FormalArg(ˆl1, n, yn),
FormalArg(ˆl1, “a”, arguments), FuncType(ˆl1),
FormalArg(l1, “t”, this), Stack (x, ˆl1)
ObjType(ˆl2), Heap(ˆl1, “prototype”, ˆl2)
(cid:91)
EncT (s1, ˆl1)
Here ˆl1 = h((Lab(s), 1) and ˆl2 = h((Lab(s), 2) are abstract
locations for the function and prototype objects that get
created dynamically. FormalArg encodes the positions of
all the formal arguments, including default arguments this
and arguments, whose positions are denoted by “t” and “a”
respectively.
A function call statement y := x( ˜xi) is similarly encoded
using facts of the form Actual(x, i, xi, y, ˆl) where xi is the
actual argument at position i, y is the return variable and ˆl
is the label of the nearest enclosing scope.
(Variable-restricted) Eval. The evaluation of a variable-
restricted eval statement s := eval(x , ˜str) forces the free
variables of the code being eval-ed to be contained in { ˜str}.
Since we do not know the code statically, we conservatively
assume that all possible points-to relationships are created
between all objects reachable from the free and bound
variables. To make the encoding ﬁnite, we summarize all
the bound variables by a single variable α(“xeval”, Lab(s))
(here “xeval” is an arbitrarily picked variable name) and
all locally allocated objects by a single abstract location
ˆl1 = h(Lab(s), 1). For the enclosing scope ˆl, the encoding is
given by the set Eval(ˆl, ˆl1, α(“xeval”, Lab(s)), ˜str), deﬁned
Relations for encoding programs:
Assign : 2V ×V
Load : 2V ×V ×V
Store : 2V ×V ×V
FormalArg : 2L×I×V
FormalRet : 2L×V
Instance : 2L×V
ArrayType : 2L
Actual : 2V ×I×V ×V ×L
Throw : 2L×V
Catch : 2L×V
Global : 2V
Annotation : 2V ×V
ObjType : 2L
FuncType : 2L
NotBuiltin : 2L
Relations for encoding the heap-stack:
Heap : 2L×V ×L
Prototype : 2L×L
Stack : 2V ×L
Figure 4. Datalog Relations
formally in ﬁgure 5. The set is obtained by instantiating all
relations with all possible valid combinations of the variables
in {α(“xeval”, Lab(s)), ˜str} and locations in {ˆl, ˆl1}.
Built-in Objects and DOM. We encode all built-in objects
and DOM objects present on the initial heap H0 as a
set of facts and rules I0. For all objects references l1, l2
and properties x such that such that H0(l1)(x) = l2, I0
contains the fact Heap(Lab(l1), x, Lab(l2)). For each built-
in method, I0 contains appropriate rules over Actual facts
that capture the semantics of the method. We give the rules
for the Function.prototype.apply method, labeled by ˆlapply, as
an example.
According to the semantics of the apply method, the call
x0 .apply(x1 , x2 ) involves calling the function pointed to by
x0 with this value x1 and arguments as stored on the array
x2. It is encoded as follows:
Actual (x0, “t”, x1, y, ˆlapply) : −
[APPLY1]
Actual (x, “t”, x0, y, ˆl1), Actual (x, 1, x1, y, ˆl1), Stack (x, ˆlapply)
Actual (x0, i, x3, y, ˆlapply) : −
[APPLY2]
Actual (x, “t”, x0, y, ˆl1), Actual (x, 2, x2, y, ˆl1),
Heap(x2, $N um, x3), Stack (x, ˆlapply)
Encoding built-in methods using rules provides much bet-
ter call-return matching than the naive encoding using
FormalArg facts. This turned out to be very useful in our
experiments as calls to built-in methods are pervasive in
most API deﬁnitions. For all built-in prototype objects, I0
contains rules for capturing the inheritance relation. For
example, the following rule is used for the Object.prototype
object which is labelled as ˆloP rot.
Prototype(ˆl, ˆloP rot) : −ObjType(ˆl)
DOM methods are encoded by encoding the function dec-
laration function(˜x){return document}.
B. Inference Rules
We now brieﬂy describe the set of inference rules R,
which model a ﬂow and context insensitive semantics of
SESlight. The rules are formally deﬁned in ﬁgure 6. Since
371
Eval (louter, llocal, x0, ˜x) is formally deﬁned as:
{Assign(v1, v2) | v1, v2 ∈ V } ∪
{Load (v1, v2, “$All”) | v1, v2 ∈ V } ∪
{Store(v1, “$All”, v2) | v1, v2 ∈ V } ∪
{Actual (v1, i, v2, v3, l) | v1, v2, v3 ∈ V ; l ∈ L} ∪
{FormalArg(llocal, i, v) | v ∈ V } ∪
{FormalRet(llocal, v) | v ∈ V } ∪
{Instance(llocal, v) | v ∈ V } ∪
{Throw (l, v) | v ∈ V ; l ∈ L} ∪
{Catch(l, v) | v ∈ V ; l ∈ L} ∪
{NotBuiltin(llocal)} ∪
{FuncType(llocal)} ∪
{ArrayType(llocal)} ∪
{ObjType(llocal)}
where V := {x0, ˜x}, L := {llocal, louter}
Figure 5. Encoding Eval Statements
[LOAD]
[ASSIGN],
it is clear from the context, we elide the hat and use symbols
l, m, n and k for labels.
Assign, Load and Store. Rules
and
[STORE1] are straightforward and model the semantics of
assignments, load and store statements. Rules [PROTOTYPE1]
and [PROTOTYPE2] conservatively ﬂatten all prototype chains
by taking the reﬂexive and transitive closure of the relation
Prototype. Rules [STORE2] and [STORE3] capture that an
annotated property store gets reﬂected on all the concrete
property names that satisfy the annotation.
ToPrimitive. Rules [TP1] and [TP2] model the semantics
of ‘ToPrimitive’ conversion. Given a fact TP(x, l), the rule
derives a call to the ‘toString’ and ‘valueOf’ methods of all
objects stored at x. Since the value returned by a ‘ToPrimi-
tive’ conversion is primitive, it is discarded by specifying a
the internal variable $dump as the return variable.
Function Calls. Function calls
are handled by rules
[ACTUAL1], [ACTUAL2] and [ACTUAL3]. Since functions are
modelled as objects in JavaScript, call
targets are also
resolved via the heap and stack. The rule [ACTUAL1] ﬂows
actual parameters to formal parameters, [ACTUAL2] ﬂows
formal return values to actual return values and [ACTUAL3]
propagates “throws” across the call chain.
Global and Catch Variables. Since global variables are
properties of the global object, assignments to global vari-
ables are reﬂected on the global object and vice versa. This
is modeled by rules [GLOBAL1] and [GLOBAL2]. The rule
[CATCHVAR] conservatively ﬂows ‘throws’ from a particular
scope into all ‘catch’ variables appearing in that scope.
C. Procedure for Verifying API Conﬁnement
The procedure D(t, P ) for verifying that API service t
conﬁnes a set of allocation-site labels P is deﬁned in ﬁgure
7. It uses the global object label ˆlg and an abstract points-to
map PtsToD : Vars u × 2Facts → 2L deﬁned as follows.
372
Stack (x, l):−Stack (y, l), Assign(x, y)
Stack (x, n):−
Load (x, y, f ), Prototype(l, m),
Heap(m, f, n), Stack (y, l)
[ASSIGN]
[LOAD]
Heap(l, f, m):−
[STORE1]
Store(x, f, y), Stack (x, l), NotBuiltin(l), Stack (y, m)
Store(x, a, y):−
Store(x, f, y), Annotation(f, a)
Store(x, f, y):−
Store(x, a, y), Annotation(f, a)
Annotation(f, “$All”)
Actual (n, “t”, x, “$dump”, k):−
TP (x, k), Stack (x, l), Prototype(l, m),
Heap(m, “toString”, n), FuncType(n)
Actual (n, “t”, x, “$dump”, k):−
TP (x, k), Stack (x, l), Prototype(l, m),
Heap(m, “valueOf ”, n), FuncType(n)
[STORE2]
[STORE3]
[ANNOTATION]
[TP1]
[TP2]
Assign(y, z):−
[ACTUAL1]
Actual (f, i, z, x, k), Stack (f, l), FormalArg(l, i, y)
Assign(x, y):−
[ACTUAL2]
Actual (f, i, z, x, k), Stack (f, l), FormalRet(l, y)
Throw (k, x) : −
[ACTUAL3]
Actual (f, i, y, z, k), Stack (f, l), Throw (l, x)
Prototype(l, l)
Prototype(l, n):−
Prototype(l, m), Prototype(m, n)
Prototype(l, q):−
[PROTOTYPE1]
[PROTOTYPE2]
[PROTOTYPE3]
Instance(l, y), Stack (y, m),
Prototype(m, n), Heap(n, “prototype”, q)
Heap(ˆlg, f, l):−Stack (f, l), Global (f )
Stack (f, l):−Heap(lg, f, l)
Assign(x, y):−Catch(k, x), Throw (k, y)
[GLOBAL1]
[GLOBAL2]
[THROW]
Figure 6. The set of Inference Rules R
Deﬁnition 5: [Abstract Points-to] Give a set of facts F ∈
2Facts and a variable v ∈ Vars u, PtsToD(v,F) is deﬁned
as {ˆl | Stack(v, ˆl) ∈ F}
The ﬁrst step of the procedure is to pick any program s and
encode the term t; var “un”; eval(s, “un”, “api”) in global scope.
Given the way eval statements are encoded, the encoding of
the above term does not depend of the term s. The next
step is to compute the set of all possible consequences of
the encoded facts, under the inference rules R deﬁned in
Procedure D(t, P ):
EncT (t; var un; eval(s, “api”, “un”), ˆlg) ∪ I0.
1) Pick any term s ∈ SESlight and compute F0(t) =
2) Compute F = Cons(F0(t),R).
3) Show that PtsToD(“un”,F) ∩ P = ∅.
Figure 7. Procedure for Verifying Conﬁne(t, P )
ﬁgure 6. The ﬁnal step is to compute the abstract points-
to set of the variable un over this consequence set and
check if it contains any labels from the set P . Since
the maps EncT , Cons and PtsToD are computable, the
procedure is decidable. The procedure is listed purely from
the correctness standpoint and does make any efﬁciency
considerations.
D. Soundness
We now prove soundness of the procedure D(t, P ) by
showing that for all terms t and allocation-site labels P ,
D(t, P ) =⇒ Conﬁne(t, P ). Our proof is very close to
the one given by Midtgaard et al. in [26] for soundness of
0-CFA analysis. The crux of the proof is in deﬁning a map
Enc : 2Σ → 2Facts (abstraction map) for encoding a set
of program states as a set of Datalog facts, and showing
that the for any set of states, the set of consequence facts
safely over-approximates the set of reachable states, under
the encoding.
Encoding of States. We rigorously deﬁne the encoding
of states in [35] and present only the main ideas here.
States are encoded by separately encoding the heap, stack
and term. Terms are encoded using the map EncT and
stacks are encoded by collecting all facts of the form
Stack(x, Lab(l)) such that variable x stores location l on the
stack. Heaps are encoded by collecting all facts of the form
Heap(Lab(l1), x, Lab(l2)) such that property x of location
l1 stores location l2, and additionally encoding all function-
closures (using the term and stack encoding) that are present
on the heap.
Results. Our ﬁrst result is that for a set of states S, the
encoding of the set of all states reachable from S, is over-
approximated by the set of all consequence facts derivable
from the encoding of S.
Lemma 1: Let R be the inference rules deﬁned in ﬁgure
6. For all set of states S ∈ 2Σ , Enc(Reach(S)) ⊆
Cons(Enc(S),R)
Proof Sketch: Given an element S ∈ 2Σ , we deﬁne the
concrete single-step evaluation map N→(S) as S ∪
{S(cid:48) | ∃S ∈ S : S → S(cid:48)}. It is easy to see that Reach(S)
is the smallest ﬁxed point of N→ above S, in the powerset
lattice 2Σ .
Given an element F ∈ 2Facts, we deﬁne the abstract single-
step evaluation map ND(F) as F ∪ Infer 1(F,R) where
Infer 1(F,R) is the set of facts obtained by applying the
rules R exactly once1. Under the Herbrand semantics of
Datalog, Cons(F,R) is the smallest ﬁxed point of ND
above F, in the powerset lattice 2Facts
Next, we show by an induction on the set of reduction
rules that for all S ∈ 2Σ , there exists n ≥ 1 such that:
Enc(N→(S)) ⊆ N nD(Enc(S))
It is straightforward to prove the lemma from this property.
(cid:3)
the set of
initial states S0(t) and initial
Recall
facts
F0(t) from the deﬁnitions of Conﬁne(t, P ) and D(t, P )
respectively. Our next result shows that the F0(t) over-
approximates the encoding of S0(t).