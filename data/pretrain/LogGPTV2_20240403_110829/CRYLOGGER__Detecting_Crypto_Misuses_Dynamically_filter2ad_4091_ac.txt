(2) Poor App Coverage: To improve the coverage, we evaluated
many tools for test generation, e.g., SmartDroid [28], Droid-
Bot [40], and Dynodroid [41]. Their main drawbacks are that the
support is limited (they work on speciÔ¨Åc versions of Android)
and they are typically slower than Monkey, as they need to keep
some information about the state of the app and update it to
explore new behaviors (e.g., a control-Ô¨Çow graph [40]). Due to
these limitations, we decided to use Monkey. We noticed that
Monkey is actually capable of triggering many of the crypto
misuses, even if the UI events are completely random. Most of
the functions that we instrumented (TABLE III) are, in fact, used
to initialize some basic, critical crypto classes, and therefore they
are relatively easy to trigger. We observed that Monkey achieves
‚àº 25% of line coverage on average, but it reports as many crypto
misuses as CryptoGuard [6], which employs static analysis
(Section VIII). This choice carries some limitations, i.e., the
possibility of false negatives, because some parts of the apps are
hard to explore (e.g., login). It is worth to mention, however, that
CRYLOGGER can be conÔ¨Ågured to use any other UI exercisers as
well as manually-written sequences of UI events. For example,
if developers have sequences of events to stimulate their apps, it
can exploit those to obtain higher coverage. In future, we plan
to build our own UI event generator tool specialized for crypto.
B. Details about Crypto Rules Checking
We used the checking procedures explained in Section V to
check the crypto rules for the Android apps, but we made few
adaptations. The functions that we instrumented for rules R-24
and R-25 (TABLE III) take as input some classes for which the
developer of the application has to implement some methods,
e.g., the method verify() to verify the host name. To obtain
the values of the parameters allhost and allcert that are
used by rules R-24 and R-25, during the logging, we pass some
erroneous values, such as NULL or empty strings, to determine
if those functions were implemented naively. For the rules that
require two executions (see Fig. 3 (b)), we obtain the two logs
by running the application on two different instances of the
emulator. We also make sure that if we see a value that is in both
logs, then this is caused by constants hard-coded in the app.
VII. EXPERIMENTAL SETUP AND BENCHMARKS
We evaluated CRYLOGGER on two sets of benchmarks. The
Ô¨Årst set consists of Android apps. We downloaded 2148 free
Android apps from the Google Play Store. These cover the
most popular free apps of 33 different categories. We discarded
110 of these apps since they do not use any crypto APIs. We
discarded 258 of these apps as they do not work on the Android
emulator either because they keep crashing or they require
libraries that cannot be installed in the emulator environment.
The results of running CRYLOGGER on the remaining 1780
apps are discussed in Section IX. We used a random subset of
these apps to compare CRYLOGGER against CryptoGuard [6] as
described in Section VIII. The second set of benchmarks is the
CryptoAPI-Bench [26], a set of Java applications that include
crypto misuses. The CryptoAPI-Bench was originally proposed
to compare static approaches. We extended it and then used it to
compare CRYLOGGER against CryptoGuard (see Section VIII).
VIII. RESULTS: COMPARISON WITH CRYPTOGUARD
We compared CRYLOGGER against CryptoGuard [6], one
of the most effective static tools in detecting crypto misuses in
Java-based applications. We could not compare CRYLOGGER
against a dynamic tool because, to the best of our knowl-
edge, CRYLOGGER is the only approach to detect misuses
dynamically for a large number of rules (Section III). We
chose CryptoGuard among many available static tools, e.g.,
CryptoLint [5], CrySL [15], because it has been recently shown
that CryptoGuard is the tool with the lowest false positive
and false negative rates among them [26]. It is also the tool
that supports the largest number of crypto rules. We compared
CRYLOGGER and CryptoGuard by using 2 datasets. The Ô¨Årst
consists of 150 Android apps we randomly chose from the set
of 1780 apps (Section VII). For this dataset, we evaluated the
execution times and the number of crypto misuses found by the
two tools. The second dataset is the CryptoAPI-Bench [26], a set
of Java benchmarks that include crypto misuses. For this dataset,
we determined the false positive and the false negative rates of
the two tools. We also extended the CryptoAPI-Bench with more
benchmarks to cover cases relevant to dynamic approaches.
A. Android Apps: Results
We used 150 free Android apps randomly chosen from the
dataset of 1780 apps to compare CRYLOGGER and Crypto-
Guard7. We could not use the entire dataset of 1780 apps of
Section VII because the false positives for CryptoGuard must
be determined manually (see below). For a fair comparison, we
excluded the rules that are supported by CRYLOGGER, but not by
CryptoGuard, and thus we compared the two tools by checking
16 crypto rules. For each rule, we determined the number of apps
that are marked as ‚Äúvulnerable‚Äù by each tool and analyzed the
false positive and false negative rates. We used 3 conÔ¨Ågurations
for CRYLOGGER where we varied the number of UI events that
are generated with Monkey: we used 10k, 30k and 50k random
events (same random seed) to see how the number of input
events impacts the number of misuses that are identiÔ¨Åed. In the
following, we refer to the 3 conÔ¨Ågurations as CRYLOGGER10,
CRYLOGGER30 and CRYLOGGER50, respectively.
The results of the comparison are reported in Fig. 4 and 5.
Each graph is an upset plot [53], [54] for a speciÔ¨Åc rule. An upset
plot is an alternative to the Venn diagrams to represent sets and
their intersections. In our context, the sets that are represented
are the sets of apps that are considered vulnerable by each
approach (CRYLOGGER10, CRYLOGGER30, CRYLOGGER50
and CryptoGuard). The horizontal bars are used to indicate the
total number of apps that are considered vulnerable by each
approach. For instance, for rule R-03, CryptoGuard found 17
vulnerable apps among the 150 apps that were analyzed, i.e., 17
apps violate R-03, CRYLOGGER50 and CRYLOGGER30 Ô¨Çagged
21 apps as vulnerable, and Ô¨Ånally CRYLOGGER10 marked 20
apps as vulnerable. The vertical bars are used to represent the
7https://github.com/franceme/cryptoguard; vers: 03.07.03; commit: ba16c928.
Authorized licensed use limited to: Tsinghua University. Downloaded on February 25,2022 at 12:27:57 UTC from IEEE Xplore.  Restrictions apply. 
1979
UXOH5√≠
WSLQVXEVHW
WRWDO
YXOQHUDEOHDSSV









UXOH5√≠
WSLQVXEVHW
ISLQVXEVHW
WRWDO
YXOQHUDEOHDSSV











‚óè
‚óè
‚óè
‚óè
‚óè
‚óè
‚óè
VXEVHWV
 

W
H
V
E
X
V

U
H
S

V
S
S
D


U
H
Q
X
Y


O




FU\ORJJHU
FU\ORJJHU
FU\ORJJHU
FU\SWRJXDUG
W
H
V
E
X
V

U
H
S

V
S
S
D


U
H
Q
X
Y


O




FU\ORJJHU
FU\ORJJHU
FU\ORJJHU
FU\SWRJXDUG
‚óè
‚óè
‚óè
‚óè
‚óè
‚óè
‚óè
‚óè
VXEVHWV
UXOH5√≠
WSLQVXEVHW
ISLQVXEVHW
WRWDO
YXOQHUDEOHDSSV






UXOH5√≠
WSLQVXEVHW
WRWDO
YXOQHUDEOHDSSV









W
H
V
E
X
V

U
H
S

V
S
S
D


U
H
Q
X
Y


O







FU\ORJJHU
FU\ORJJHU
FU\ORJJHU
FU\SWRJXDUG
‚óè
‚óè
‚óè
‚óè
‚óè
‚óè
‚óè
‚óè
VXEVHWV


W
H
V
E
X
V

U
H
S

V
S
S
D


U
H
Q
X
Y


O



FU\ORJJHU
FU\ORJJHU
FU\ORJJHU
FU\SWRJXDUG


‚óè
‚óè
‚óè
‚óè
‚óè
‚óè
‚óè
‚óè
VXEVHWV
UXOH5√≠
WSLQVXEVHW
ISLQVXEVHW
WRWDO
YXOQHUDEOHDSSV







UXOH5√≠
WSLQVXEVHW
WRWDO
YXOQHUDEOHDSSV








W
H
V
E
X
V

U
H
S

V
S
S
D


U
H
Q
X
Y


O







FU\ORJJHU
FU\ORJJHU
FU\ORJJHU
FU\SWRJXDUG
‚óè
‚óè
‚óè
‚óè
‚óè
‚óè
‚óè‚óè
VXEVHWV







W
H
V
E
X
V

U
H
S

V
S
S
D


U
H
Q
X
Y


O
UXOH5√≠
WSLQVXEVHW
ISLQVXEVHW
WRWDO
YXOQHUDEOHDSSV








UXOH5√≠
WSLQVXEVHW
WRWDO
W
H
V
E
X
V

U
H
S

V
S
S
D


U
H
Q
X
Y


O




FU\ORJJHU
FU\ORJJHU
FU\ORJJHU
FU\SWRJXDUG
W
H
V
E
X
V

U
H