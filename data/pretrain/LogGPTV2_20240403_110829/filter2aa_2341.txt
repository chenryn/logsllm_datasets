Cunning with CNG:
Soliciting Secrets from Schannel
DefCon 24
Why you might care
❏
Extracting TLS / SSL Keys (of various types) from memory
❏
Ability to decrypt TLS connections that use ephemeral key exchanges
❏
For anything that uses Schannel: RDP, IE, Powershell, etc...pretty much anything .NET too
❏
Past connections AND Future since the point of the cache is resumption
❏
Undocumented / partially documented structures elucidated
❏
TLS session caches mapped to the requesting processes, with SNIs
❏
A tool that does these things via Volatility/Rekall 
❏
A paper that documents these things
 i.e. what you get today
How we get there
1.
Briefest of TLS Refreshers
2.
How Schannel Works
3.
The Secrets : }
4.
The Other Forensic Artifacts!
5.
A live demo >.>
 the Secure Channel for 
Windows!
❏
A library that gets loaded into the 
“key isolation process” and the 
“client” process
❏
Technically a Security Support 
Provider (SSP)
❏
Spoiler: the key iso proc is LSASS
❏
Microsoft’s CryptoAPI-Next Generation
❏
Introduced in Windows Vista
❏
Provides Common Criteria compliance
❏
Used to store secrets, also crypt them
❏
The KSP & DPAPI for instance
❏
Important / reused keys are “isolated” from 
the less privileged/trusted “client” 
processes into the “key isolation process”
❏
Ncrypt is the “key storage router” and 
gateway to CNG Key Iso service
What the CNG?!
Schannel Cipher Suite Preferences
ListCipherSuites sample code found here: https://technet.microsoft.com/en-us/library/bb870930.aspx
Windows 7
Windows 10
Windows Vista
Schannel
by the docs
Diagram based on: https://technet.microsoft.com/en-us/library/dn786429.aspx
CNG
Key Isolation
by the docs
Diagram based on: https://msdn.microsoft.com/en-us/library/windows/desktop/bb204778.aspx
Matching Session Keys
Basic Premis: 
AES Keys are small and random
AES Key Schedules are larger and deterministic by design…they’re a schedule.
Most implementations calculate schedule once and store it*
While a connection is active, both side NEED access to the symmetric keys used 
for encryption/verification
*Based on this paper: http://citp.princeton.edu/pub/coldboot.pdf
Matching Session Keys
So I scanned LSASS for cross-matched AES key schedules on both hosts…
And got nothing.
Well, no matches anyway.
RTFM
ALL
V
A friendly neighborhood P.S.A.
This announcement brought to you by an hour of wasted time
Matching Session Keys
RDP MSTSC AES Keys [Client]
RDP SVCHost AES Keys [Server]
FindAES from: http://jessekornblum.com/tools/
The Session Key Structure
❏
Notice the value “3lss”
❏
“3lss” -> “ssl3”
❏
Initially noticed while checking LSASS 
structs
❏
Structure is different in LSASS vs client 
process
❏
AES Key & Schedule highlighted
❏
Key and schedule appear multiple times in 
the same structure
The Session Key Structure
_SSL_SESSION_KEY
4
cbStructLength
4
dwMagic [“ssl3”]
4
dwProtocolVersion
4/8
pvCipherSuiteListEntry
4
IsWriteKey
4/8
pvBcryptKeyStruct
_BCRYPT_KEY
4
cbStructLength
4
dwMagic [“UUUR”]
4/8
pvBcryptProvider
4/8
pvBcryptSymmKey
_MS_SYMMETRIC_KEY
4
cbStructLength
4
dwMagic [“MSSK”]
4
dwKeyType
...
...
4
KeyLength
?
SymmetricKey
?
SymmKeySchedule
The Ncrypt SSL Provider [ ncryptsslp.dll ]
Ncryptsslp Validation function Symbols
Master Key Validation Function Disassembly
These functions do three things:
❏
Check the first dword for a size value
❏
Check the second dword for a magic ID
❏
Return the passed handle* if all is good
*All handles in this case are explicitly pointers
SSL Magic
Size (x86)
Size (x64)
Validation Functions
ssl1
0xE4
0x130
SslpValidateProvHandle
ssl2
0x24
0x30
SslpValidateHashHandle
ssl3
?
?
ssl4
0x18
0x20
SslpValidateKeyPairHandle
ssl5
0x48
0x50
SslpValidateMasterKeyHandle
ssl6
0x18
0x20
SslpValidateEphemeralHandle
ssl7
?
?
Ncryptsslp “ssl3” symbols*
Ncryptsslp “ssl7” symbols*
*command output significantly reduced for brevity & clarity
0:000> .foreach(magic {s -[1]a 
00007fff`df750000 00007fff`df76f000 3lss}){ln 
magic}
ncryptsslp!TlsGenerateSessionKeys+0x251
ncryptsslp!SPSslDecryptPacket+0x43
ncryptsslp!SPSslEncryptPacket+0x43
ncryptsslp!SPSslImportKey+0x19a
ncryptsslp!SPSslExportKey+0x76
ncryptsslp!SPSslFreeObject+0x1b
ncryptsslp!Ssl2GenerateSessionKeys+0x22c
ncryptsslp!Ssl2GenerateSessionKeys+0x294
0:000> lmm schannel
start             end                module 
name
00007fff`ed1e0000 00007fff`ed254000  schannel
0:000> .foreach(magic {s -[1]a 
00007fff`df750000 00007fff`df76f000 7lss}){ln 
magic}
ncryptsslp!SPSslGenerateMasterKey+0x75
ncryptsslp!SPSslGenerateMasterKey+0x5595
ncryptsslp!SPSslGeneratePreMasterKey+0x15e
ncryptsslp!TlsDecryptMasterKey+0x 6b
>_ Command - Dump C:\Defcon\Exa...     - [] X
ssl3 = session key struct
ssl7 = pre-master secret struct?
>_ Command - Dump C:\Defcon\Exa...     - [] X
The Master Secret
_SSL_MASTER_SECRET
4
cbStructLength
4
dwMagic [“ssl5”]
4
dwProtocolVersion
0/4
dwUnknown1* [alignment?]
4/8
pvCipherSuiteListEntry
4
bIsClientCache
48
rgbMasterSecret
4
dwUnknown2 [reserved?]
*Not present in x86 - either padding or part of previous member
The Master Secret
*Not present in x86 - either padding or part of previous member
_SSL_MASTER_SECRET
4
cbStructLength
4
dwMagic [“ssl5”]
4
dwProtocolVersion
0/4
dwUnknown1* [alignment?]
4/8
pvCipherSuiteListEntry
4
bIsClientCache
48
rgbMasterSecret
4
dwUnknown2 [reserved?]
Master Secret Mapped to Unique Identifier
❏
The Master Key is linked back to a unique 
ID through an “NcryptSslKey”
❏
The NcryptSslKey is referenced by an 
“SessionCacheItem”
❏
The SessionCacheItem contains either the 
SessionID, or a pointer and length value 
for a SessionTicket
At this point, we can identify and decrypt 
sessions robustly.
Schannel $
'_SSL_SESSION_CACHE_CLIENT_ITEM': [ 0x140, {
    'Vftable': [0x0, ['pointer64', ['void']]],
    'NcryptKey': [0x10, ['pointer64', ['void']]],
    'PublicCertificate': [0x18, ['pointer64', ['void']]],
    'PublicKey': [0x28, ['pointer64', ['void']]],
    'NcryptSslProv': [0x60, ['pointer64', ['void']]],
    'SessionIdLen': [0x86, ['short short']],
    'SessionId': [0x88, ['array', 0x20, ['unsigned char']]],
    'ProcessId': [0xa8, ['unsigned long']],
    'MaxLifeTime': [0xB0, ['unsigned long']],
    'CertSerializedCertificateChain': [0xB0, ['pointer64', 
['void']]],
    'UnkList1Flink': [0xB8, ['pointer64', ['void']]], 
    'UnkList1Blink': [0xC0, ['pointer64', ['void']]], 
    'UnkCacheList2Flink': [0xC8, ['pointer64', ['void']]], 
    'UnkCacheList2Blink': [0xD0, ['pointer64', ['void']]], 
    'ServerName': [0xF8, ['pointer64', ['void']]],
    'CSessCacheManager': [0x110, ['pointer64', ['void']]],
    'SessionTicket': [0x128, ['pointer64', ['void']]],
    'SessionTicketLen': [0x130, ['int']],
    }],
Under the covers
x64 Volatility VType
V
Schannel $
'_SSL_SESSION_CACHE_SERVER_ITEM': [ 0x110, {
    'Vftable': [0x0, ['pointer64', ['void']]],
    'NcryptKey': [0x10, ['pointer64', ['void']]],
    'NcryptSslProv': [0x60, ['pointer64', ['void']]],
    'SessionId': [0x88, ['array', 0x20, ['unsigned char']]],
    'ProcessId': [0xa8, ['unsigned long']],
    'MaxLifeTime': [0xB0, ['unsigned long']],
    'LastError?': [0xE8, ['unsigned long']],
    'CSslCredential': [0xF0, ['pointer64', ['void']]],
    }],
Under the covers
x64 Volatility VType
V
Schannel $
Under the covers
The Key Pairs
❏
The Server & Ephemeral Key Pairs use 
an identical structure
❏
The Key Type is compared with 
different values
❏
ssl6 gets compared with a list stored in 
bcryptprimitives
❏
ssl4 gets compared with a list stored in 
NCRYPTPROV
❏
The Key Storage Provider Key (KPSK) 
is referenced indirectly through an 
“Ncrypt Key” struct*
_SSL_KEY_PAIR
4
cbStructLength
4
dwMagic [“ssl4” | “ssl6” ]
4
dwKeyType
4
dwUnknown1 [alignment?]
4/8
pvKspProvider
4/8
pvKspKey
*Not to be confused with an NcryptSslKey struct
_NCRYPT_KEY
4
cbStructLength
4
dwMagic [ 0x44440002 ]
4
dwKeyType
4
dwUnknown1 [alignment?]
4/8
pvKspProvider
4/8
pvKspKey
_KSP_KEY
4
cbStructLength
4
dwMagic [ “KSPK” ]
4
dwKeyType
...
...
4/8
pvDpapiBlob
4/8
pvMSKY
The Ephemeral Key Data
❏
Public Key is referenced by schannel!
CEphemKeyData
❏
Private Key is not stored in natively usable 
format, but is accessible
❏
The KPSK structure pointed to references 
another structure with the magic “MSKY” 
that appears to be the EccKey structure
❏
The KPSK structure has details about the 
curve selection / other valuable info
The Server (RSA) Private Key
❏
KSPK structure pointed to by the server 
key mostly resembles the file from disk
❏
The public information is parsed into fields
❏
The DPAPI protected private key blob is 
loaded into memory
The Server (RSA) Private Key
Windows Vista
'_SSL_SESSION_CACHE_CLIENT_ITEM': [ 0xf0, {
    'Flink': [0x0, ['pointer', ['void']]],
    'Blink': [0x4, ['pointer', ['void']]],
    'ProcessId': [0x8, [['unsigned long']],
    'MasterKey': [0x14, ['pointer', ['NcryptSslKey']]],
    'CipherSuiteId': [0x1C, ['pointer', ['void']]],
    'ECCurveParam': [0x20, ['pointer', ['void']]],
    'NcryptSslProv': [0x28, ['pointer', ['void']]],
    'PublicCertificate': [0x2C, ['pointer', ['void']]],
    'PublicCert2': [0x34, ['pointer', ['void']]],
    'PublicKeyStruct': [0x3C, ['pointer', ['void']]],
    'PublicCertStruct3': [0x44, ['pointer', ['void']]],
    'ServerName': [0x80, ['pointer', ['void']]],
    'SessionIdSize': [0x94, ['short short']],
    'SessionId': [0x98, ['array', 0x20, ['unsigned char']]],
    'ErrorCode': [0xEC, ['pointer64', ['void']]],
    }],
❏
CNG was introduced in Vista
❏
The Vista cache is different
❏
It’s kinda proto-CNG
❏
Prior to Ncryptsslp (Sslp functions are in 
Ncrypt)
❏
Instead of Classes, the cache is just a 
doubly-linked list
❏
No RFC5088 support (no tickets)
x86 Volatility VType
V
Windows Vista
The Forensic Context
❏
Active Connection = Security Context
❏
ProcessID for client process stored
❏
Server Name Indicator (SNI) stored in the 
cache as well
❏
Cache Lifetime of 10 hours
❏
Session IDs are arbitrary, but not always 
random
❏
Schannel is the perfect example, can be 
fingerprinted
❏
If the system is a client, why would it have 
a server cache? 
❏
RDP for one, almost guaranteed to live 10 
hours (unless there are 20,000 
connections afterward)
Global Schannel Variables of Significance:
schannel!CSslGlobals::m_dwMaximumEntries
schannel!CSslGlobals::m_dwClientLifespan
schannel!CSslGlobals::m_dwServerLifespan
schannel!CSslGlobals::m_dwSessionTicketLifespan
Extracting the Secrets
❏
Volatility & Rekall plugins
❏
By default (no args):
❏
will automatically find lsass
❏
will scan the heap
❏
Can be configured to scan 
Writeable VADs, or full VAS
❏
dumps to stdout in wireshark format
❏
Can dump verbose object as json
❏
Hoping to have functionality integrated into 
PowerShell module soon
❏
Got busy : 
D
e
f
c
0
n
“
”
Decrypting an RDP Session (Ephemeral  XCHG)
DOMO TIME
E
Fin
@TinRabbit_
Questions?
Special Thanks
❏
Áine Doyle - Badass Extraordinaire (OCSC)
❏
Dr. John-Ross Wallrabenstein - Sypris Electronics
❏
Dr. Marcus Rogers - Purdue Cyber Forensics Laboratory
❏
Michael Hale Ligh (MHL) - Volexity
❏
Tatiana Ringenberg - Sypris Electronics
For general support, helpful comments, their time, and encouragement.