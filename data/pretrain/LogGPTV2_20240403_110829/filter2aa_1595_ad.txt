            global n
            for i in message.poll.options:
                if i.text not in bq:
                    bq[i.text] = 0
                    n += 1
            print("Auto Vote")
            answers = app.vote_poll(bot,message_id,1).results.results
            for i in range(len(answers)):
                if answers[i].correct == True:
                    idx = i
                    break
            print(message.poll.options[idx])
            pp = message.poll.options[idx]
            if 'worst' in question:
                for i in message.poll.options:
                    if i == pp:
                        continue
                    if pp.text+""+pp.text in strx:
                        continue
                    strx.append(pp.text+""+i.text in strx:
                        continue
                    if i.text+"")
    lock = 0
app.run()
{'
': 3, '
': 8, '
\\u200d
': 22, '
': 0, '
\\u200d♂ ': 5, '
': 16, 
'
': 21, '
\\u200d♂ ': 10, '
': 2, '
': 9, '
': 14, '
': 24, '
': 20, 
'
\\u200d♂ ': 23, '
\\u200d♀ ': 13, '
': 15, '': 1, '
': 12, '
\\u200d♂ ': 19, '
\\u200d♂ ': 18, '
': 11, '
': 4, '\\U0001f9ca': 7, '
\\u200d⚕ ': 6, '
': 17}
[('
', 0), ('', 1), ('
', 2), ('
', 3), ('
', 4), ('
\\u200d♂ ', 5), 
('
\\u200d⚕ ', 6), ('\\U0001f9ca', 7), ('
', 8), ('
', 9), ('
\\u200d♂ ', 
10), ('
', 11), ('
', 12), ('
\\u200d♀ ', 13), ('
', 14), ('
', 15), 
('
', 16), ('
', 17), ('
\\u200d♂ ', 18), ('
\\u200d♂ ', 19), ('
', 20), 
('
', 21), ('
\\u200d
', 22), ('
\\u200d♂ ', 23), ('
', 24)]
#-*-coding:utf-8-*-
from pyrogram import *
from z3 import *
# Remember to use your own values from my.telegram.org!
api_id = api_id
api_hash = api_hash
# app = Client("my_account", api_id, api_hash) 
bot = 'AlienQuizBot'
app = Client("my_account", api_id, api_hash,
    proxy=dict(
        hostname="127.0.0.1",
        port=1086,
Hellish Reverse
flag
Cyber
    ))
bq = {'
': 3, '
': 8, '
\\u200d
': 22, '
': 0, '
\\u200d♂ ': 5, '
': 
16, '
': 21, '
\\u200d♂ ': 10, '
': 2, '
': 9, '
': 14, '
': 24, '
': 
20, '
\\u200d♂ ': 23, '
\\u200d♀ ': 13, '
': 15, '': 1, '
': 12, '
\\u200d♂ ': 19, '
\\u200d♂ ': 18, '
': 11, '
': 4, '\\U0001f9ca': 7, '
\\u200d⚕ ': 6, '
': 17}
tmp_list = [('
', 0), ('', 1), ('
', 2), ('
', 3), ('
', 4), ('
\\u200d♂ ', 5), ('
\\u200d⚕ ', 6), ('\\U0001f9ca', 7), ('
', 8), ('
', 9), 
('
\\u200d♂ ', 10), ('
', 11), ('
', 12), ('
\\u200d♀ ', 13), ('
', 14), 
('
', 15), ('
', 16), ('
', 17), ('
\\u200d♂ ', 18), ('
\\u200d♂ ', 19), 
('
', 20), ('
', 21), ('
\\u200d
', 22), ('
\\u200d♂ ', 23), ('
', 24)]
listx = []
for i in tmp_list:
    listx.append(i[0])
print(listx)
lock = 0
@app.on_message(Filters.private)
def hello(client, message):
    global lock
    global strx
    if message.from_user.first_name == bot:
        while lock!=0:
            pass
        lock = 1
        if message.poll != None:
            message_id = message.message_id
            question = message.poll.question
            print(question)
            tmp = []
            for i in message.poll.options:
                tmp.append(listx.index(i.text))
            print(tmp)
            if 'worst' in question:
                idx = tmp.index(min(tmp))
                app.vote_poll(bot,message_id,idx)
            else:
                idx = tmp.index(max(tmp))
                app.vote_poll(bot,message_id,idx)
    lock = 0
app.run()
Serial
jsb b*b*b + 1*1*1 == b*b*b
Too Secure
The vulnerability of the revised Pedersen commitment scheme lies in that the secret number 
used to calculate 
 is chosen by the sender instead of the verifier. Thus, the sender can
manipulate the committed message and pass the verification at his will.
To get the flag, we need to find 
 such that the two pairs 
 can be used to
prove the same commitment , where the proof is checked as
Note that 
, we can rewrite  by using  as the base:
Therefore, what we need to do is calculate 
 that satisfies
From the setup of the revised Pedersen commitment scheme, we can see that  is decided by its
associated , which is given. So, all the unknown in the equation 
 is 