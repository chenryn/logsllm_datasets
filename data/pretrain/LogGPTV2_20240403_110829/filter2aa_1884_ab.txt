### Overflow Detection and Monitoring with DTrace

#### Halt the Process Before Damage Occurs (HIDS)
- **Dump and search process memory**
- **Send feedback to the fuzzer**
- **Attach a debugger**

#### Overflow Detection in One Probe
```bash
#/usr/sbin/dtrace -w -s
pid$target:::return 
   / uregs[R_EIP] == 0x41414141 / {
   printf("Don’t tase me bro!!!");
          stop()
          ...
}
```

#### First Approach
- **Store the RETURN value at function entry**
- **Use `uregs[R_SP]`, not `uregs[R_ESP]`**
- **Compare EIP to the saved RETURN value at function return**
- **If different, an overflow has occurred**

**Challenges:**
- **False positives from tail call optimizations**
- **Functions without return probes**

#### DTrace and Tail Calls
- **Certain compiler optimizations alter the standard call/return control flow**
- **Tail calls are an example of such an optimization, where two functions share the same stack frame, saving resources and reducing instructions**
- **DTrace reports tail calls as a return followed by a call, even though the return never happens**
- **EIP on return is not in the original calling function but at the entry of the second function**
- **This can disrupt simple stack monitoring if not accounted for**

#### New Approach
- **Store the RETURN value at function entry**
- **At function return, compare the saved RETURN value with the current value**
- **Requires saving both the original return value and its address in memory**
- **Triggers when `saved RETURN != current RETURN` and `EIP = current RETURN`**

**Challenges:**
- **Still problematic for functions that "never return"**
- **Some functions misbehave, and DTrace does not handle function jump tables (e.g., `dyld_stub_*`) well**
- **Entry probe but no exit probe**

#### Determining Missing Returns
- **Using DTrace with the `-l` flag:**
  - **List entry/exit probes for all functions**
  - **Find functions with entry but no exit probe**
- **Using DTrace aggregates:**
  - **Run the application**
  - **Aggregate on function entries and exits**
  - **Look for mismatches**
- **Exclude these functions with predicates:**
  ```dtrace
  / probefunc != "everybodyJump" /
  ```

#### Advanced Tracing
- **Instruction-level tracing**
- **Code coverage with IDA Pro and IdaRub**
- **Profiling idle and GUI code**
- **Feedback to the fuzzer for smart/evolutionary fuzzing**
- **Conditional tracing based on function parameters (reaching vulnerable code paths)**

#### Code Coverage
- **Instruction-level tracing using DTrace**
- **Properly scope tracing**
- **Use IdaRub to send commands to IDA**
- **IDA colors instructions and code blocks in real time**

**Tracing Instructions:**
- **The last field of a probe is the offset in the function**
- **Entry = offset 0**
- **Leave blank for every instruction**
- **Map static global addresses to function offset addresses**
- **Print the address of every instruction:**
  ```dtrace
  pid$target:a.out:: { print("%d", uregs[R_EIP]); }
  ```

**Tracing Libraries:**
- **Know the memory layout of the program**
- **Use `vmmap` on OS X to map runtime library EIPs to decompiled libraries**

**Capabilities:**
- **Associate fuzz runs with code hits**
- **Visualize code paths**
- **Record the number of times blocks were hit**
- **Compare idle traces to other traces**

**Limitations:**
- **Instruction tracing can be slow for some applications**
- **Tuning and limiting scope are necessary**

#### Monitoring the Heap
- **Heap overflows have become a major attack vector, replacing stack-based buffer overflows**
- **Common unlink() write4 primitives are no longer easily exploitable on many platforms**
- **Understanding heap layout and allocation patterns is key to modern heap exploits**
- **Tools like ImmDBG and Gerrado Richarte’s heap tracer can help with visualization and double free detection on Solaris and Linux**

#### Hackin’ the Heap with RE:Trace
- **Various ways to use DTrace for heap exploits:**
  - **Standard double free, double malloc, leak detection**
  - **Heap visualization (Directed Graphs/OpenGL/Instruments)**
  - **Detect off-by-one errors**
  - **Spot app-specific function pointers to overwrite**
  - **Find heap overflows/corruptions that might not be immediately dereferenced**

**OS X Heap Exploits:**
- **Like most BSDs, OS X does not store metadata "in-band"**
- **Older techniques such as overwriting initial_malloc_zones function pointers are no longer effective**
- **You now have to overwrite app-specific data**
- **DTrace already hooks functions to understand heap layout and allocation patterns**
- **Tools like `vmmap`, `MallocScribble`, `MallocCheckHeap`, and `leaks` are available for OS X**

**Heap Visualization:**
- **Directed graph of heap allocation sizes**
- **RE:Trace Heap Smasher:**
  - **Track four different "heaps" by hooking `malloc()` calls and storing them in Ruby hashes**
  - **Break hashes into tiny, small, large, and huge by allocation size**
  - **Hook all allocations and determine if the pointer falls in the range of previous allocations**
  - **Adjust the heap as memory is `free()`'d or `realloc()`'d**

**Example:**
```dtrace
pid$target::strncpy:entry {
   self->sizer = arg2;
   printf("copyentry:dst=0x%p|src=0x%p;size=%i", arg0, arg1, arg2);
   self->sizer = 0;
}
```

**Future Additions:**
- **Graphviz/OpenGL graphs**
- **New version of Firefox with probes in the JavaScript library**
- **Create tools similar to Alexander Sotirov’s HeapLib for generic heap manipulation**
- **Trigger on high-level object creation or action, then trace for `malloc`**

#### Using DTrace Defensively
- **Basic Host Intrusion Detection System (HIDS) with DTrace**
- **Profile your application's basic behavior**
- **Trace for anomalies with predicates**
- **Protect custom applications (e.g., monitor for return-to-libc)**
- **Easy to create a Rails interface for monitoring with Ruby-DTrace**

**Example:**
```dtrace
#!/usr/sbin/dtrace  -q -s
proc:::exec
     /execname == "QuickTime Player" &&
     args[0] == "/bin/sh"/ 
{
printf("\n%s Has been p0wned! It tried to spawn %s\n”, execname, args[0])
}
```

#### DTrace and Rootkits
- **Archim’s paper “B.D.S.M the Solaris 10 Way” describes a method for hiding a rootkit from DTrace**
- **DTrace FBT (kernel) provider can spy on all active kernel modules**
- **Should have the ability to detect rootkits that don’t explicitly hide from DTrace**
- **Apple made it a feature to hide from DTrace in Leopard, but this can be patched**

#### Kernel Debugging
- **Kernel panics and panic logs**
- **Backtraces and kernel loadable modules**
- **Page faults and debugging**
- **Remote setup and symbol export/import**
- **DTrace can help with kernel debugging**

**References:**
- **Apple Technical Note TN2063: Understanding and Debugging Kernel Panics**
- **Apple Technical Note TN2118: Kernel Core Dumps**
- **Hello Debugger: Debugging a Device Driver With GDB**
- **Uninformed volume 8 article 4 by David Maynor**

#### Higher-Level Tracing
- **Leverage custom application probes for more abstract actions**
- **Browser example: Page Load, build DOM, DNS request**
- **Gather performance metrics and trace VM languages like Java, Python, Ruby**
- **Tracing SQL calls and fuzz inputs**

**Example:**
```dtrace
#!/usr/sbin/dtrace –s 
pid$target:mysqld:*dispatch_command*:entry {
 printf(”%Y %s\n”, walltimestamp, copyinstr(arg2)) 
} 
```

**Future Work:**
- **Automated feedback and integration with fuzzers**
- **More experimenting with kernel tracing**
- **Improved overflow monitoring**
- **Memory allocation analysis libraries**
- **Garbage collection behavior analysis**
- **More on utilizing application-specific probes**
- **New probes: Network providers, IP send & recv**

### Conclusion
- **DTrace can collect a wide range of data and specific measurements**
- **Scope can be very broad or very precise**
- **Applied to reverse engineering, DTrace allows researchers to pinpoint specific situations (overflows) or understand general behavior (heap growth)**

**Thank You!**

- **Tiller Beauchamp, SAIC**
- **David Weston, Microsoft**

**For implementation, see the RE:Trace framework:**
- **Redbg coming soon!**
- **http://www.poppopret.org/**