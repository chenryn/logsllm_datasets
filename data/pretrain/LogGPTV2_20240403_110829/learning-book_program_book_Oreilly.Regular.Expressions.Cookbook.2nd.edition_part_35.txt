the basic rules:
•Area codes start with a number 29, followed by 08, and then any third digit
●The second group of three digits, known as the central office or exchange code,
Starts with a number 29, followed by any rwo digits.
•The final four digits, known as the station code, have no restrictions.
These rules can easily be implemented with a few character classes
\(？([2-9][0-8][0-9]))?[ . ]?{[2-9][0-9]{2})[- ]?([0-9]{4})$
Regex options: None
Regexflavers: .NET, Java, JavaScript, PCRE, Perl, Python, Ruby
Beyond the basic rules just listed, there are a variety of reserved, unassigned, and re-
stricted phone numbers. Unless you have very specific needs that require you to filter
out as many phone numbers as possible, don’t go overboard trying to eliminate unused
numbers. New area codes that fit the rules listed earlier are made available regularly,
and even if a phone number is valid, that doesn’t necessarily mean it was issued or is
in active use.
Find phone numbers in documents
Two simple changes allow the previous regular expressions to match phone numbers
within longer text:
\(?\b([0-9]{3}))[- ]?([0-9]{3})[- ]([0-9]{4})\b
Regex options: None
Regexflavers: .NET, Java, JavaScript, PCRE, Perl, Python, Ruby
Here, the  and ,  matches the position between a word character and either a non-
word character or the beginning or end of the text. Letters, numbers, and underscore
are all considered word characters (see Recipe 2.6).
Note that the first word boundary token appears afer the optional, opening parenthe
sis. This is important because there is no word boundary to be matched berween two
nonword characters, such as the opening parenthesis and a preceding space character.
252 | Chapter 4: Validation and Formatting
---
## Page 269
The first word boundary is relevant only when matching a number without parentheses,
since the word boundary always matches berween the opening parenthesis and the first
digit of a phone number.
Allow a leading °1*
You can allow an optional, leading “1 for the country code which covers the North
American Numbering Plan region) via the addition shown in the following regex:
(?:\+?1[-. ]?)\(?{[0-9]{3})\)？[- ]？([0-9]{3})[- . ]?{[0-9]{4})$
Regex options: None
Regexflavers: NET, Java, JavaScript, PCRE, Perl, Python, Ruby
In addition to the phone number formats shown previously, this regular expression
will also match strings such as +1 (123) 456-7890 and 1-123-456-7890. It uses a non-
capturing group, written as (?-) . When a question mark follows an unescaped left
parenthesis like this, it’s not a quantifier, but instead helps to identify the type of
grouping. Standard capturing groups require the regular expression engine to keep
track of backreferences, so it’s more efficient to use noncapturing groups whenever the
text matched by a group does not need to be referenced later. Another reason to use a
noncapturing group here is to allow you to keep using the same replacement string as
in the previous examples. If we added a capturing group, we’d have to change $1 to
$2 (and so on) in the replacement text shown earlier in this recipe.
The full addition to this version of the regex is (?:^+?1[- ]?)?). The *1° in this pattern
is preceded by an optional plus sign, and optionally followed by one of three separators
(hyphen, dot, or space). The entire, added noncapruring group is also optional, but
since the *1" is required within the group, the preceding plus sign and separator are
not allowed if there is no leading °1.*
Allow seven-digit phone numbers
To allow matching phone numbers thatomit the local area code, enclose the first group
of digits together with its surrounding parentheses and following separator in an op-
tional, noncapturing group:
(?:\(?([0-9]{3})\)？[-.])([0-9]{3})[-.]?([0-9]{4})$
Regex options: None
Regexflavers: NET, Java, JavaScript, PCRE, Perl, Python, Ruby
Since the area code is no longer required as part of the match, simply replacing any
match with α($1)$2-$3 might now result in something like () 123-4567, with an
empty set of parentheses. To work around this, add code outside the regex that checks
whether group 1 matched any text, and adjust the replacement text accordingly.
See Also
Recipe 4.3 shows how to validate international phone numbers.
4.2 Validate and Format North American Phone Numbers | 253
---
## Page 270
As noted previously, the North American Numbering Plan (NANP) is the telephone
numbering plan for the United States and its territories, Canada, Bermuda, and 17
Caribbean nations. More information is available at hrrp://www.nanpa.com.
Techniques used in the regular expressions and replacement text in this recipe are
discussed in Chapter 2. Recipe 2. 1 explains which special characters need to be escaped.
Recipe 2.3 explains character classes. Recipe 2.5 explains anchors. Recipe 2.9 explains
grouping. Recipe 2.12 explains repetition. Recipe 2.6 explains word boundaries.
Recipe 2.21 explains how to insert text matched by capturing groups into the replace-
ment text.
4.3ValidateInternationalPhoneNumbers
Problem
You want to validate international phone numbers. The numbers should start with a
plus sign, followed by the country code and national number.
Solution
Regular expression
^+(?:[0-9]=?){6,14}[0-9]$
Regex options: None
Regexflavers: .NET, Java, JavaScript, PCRE, Perl, Python, Ruby
JavaScript example
function validate(phone)(
var regex = /^\+(?:[0-9] ){6,14}[0-9]$/;
1f (regex.test(phone)){
// Valid international phone number
}else 
// Invalid international phone number
}
Follow Recipe 3.6 to implement this regular expression with other programming
languages.
Discussion
The rules and conventions used to print international phone numbers vary significantly
around the world, so it’s hard to provide meaningful validation for an international
phone number unless you adopt a strict format. Fortunately, there is a simple industry-
standard notation specified by ITU-T E.123. This notation requires that intermational
254 | Chapter 4: Validaton and Formatting
---
## Page 271
phone numbers include a leading plus sign (known as the international prefix sym-
bof), and allows only spaces to separate groups of digits. Although the tilde character
() can appear within a phone number to indicate the existence of an additional dial
element (in other words, it is not actually dialed) and is infrequently used. Thanks to
tone, it has been excluded from this regular expression since it is merely a procedural
the intermational phone numbering plan (ITU-T E.164), phone numbers cannot con-
tain more than 15 digits. The shortest intermational phone numbers in use contain seven
digits.
With all of this in mind, let's look at the regular expression again after breaking it into
its pieces. Because this version is written using free-spacing style, the literal space char-
acter has been replaced with \x20>:
# Assert position at the beginning of the string.
\+
# Match a literal *+* character.
(?:
# Group but don’t capture:
[0-9]
#
Match a digit.
x20
#
Match a space character
？
#
between zero and one tine.
# End the noncapturing group.
{6,14}
#
Repeat the group between 6 and 14 tines.
[6-0]
# Match a digit.
# Assert position at the end of the string-
Regex options: Free-spacing
Regexflavers: .NET, Java, XRegExp, PCRE, Perl, Python, Ruby
The ^) and  combined.  matches exactly two digits, just like
[0-9]{2}. Without the group, the question mark makes the quantifier lazy, which has
no effect because  with <b. As