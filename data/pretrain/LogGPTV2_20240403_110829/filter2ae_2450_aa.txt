# 基于tomcat
## Servlet内存马
> web.xml
            hello
            com.naihe2.testServlet
            hello
            /hello
> testServlet
    package com.naihe2;
    import javax.servlet.ServletException;
    import javax.servlet.http.HttpServlet;
    import javax.servlet.http.HttpServletRequest;
    import javax.servlet.http.HttpServletResponse;
    import java.io.IOException;
    public class testServlet extends HttpServlet {
        @Override
        protected void doGet(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException {
            resp.getWriter().write("123");
        }
        @Override
        protected void doPost(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException {
            doGet(req, resp);
        }
    }
### 分析Servlet生成
> 读取web.xml  
>  ContextConfig#webConfig()
在这里对其xml文件进行读取
ContextConfig#configureContext()
遍历webxml中的内容，将内容赋给新创建的Wrapper
将类名添加到Wrapper
将Wrapper添加到context中
StandardContext.createWapper()
在这里添加映射关系， 将 url 路径和 servlet 类做映射。
### 加载Servlet
遍历内容，比添加到StandardContext的list中
这里判断loadOnStartup是否大于0，如果大于才会添加
standardWrapper中的loadOnStatup默认为-1
在servlet的配置当中，1的含义是：  
标记容器是否在启动的时候就加载这个servlet。  
当值为0或者大于0时，表示容器在应用启动时就加载这个servlet；  
当是一个负数时或者没有指定时，则指示容器在该servlet被选择时才加载。  
正数的值越小，启动该servlet的优先级越高。
由于我们要注入内存马，且没有配置xml不会在应用启动时就加载这个servlet，因此需要把优先级调至1，让自己写的servlet直接被加载
遍历list，加载wrapper
### Servlet内存马
        $Title$
直接访问demo发现404
访问index.jsp注入内存马
再次访问demo
## Listener内存马
### Listener基础
#### 配置Listener
    package com.naihe2;
    import javax.servlet.ServletRequestEvent;
    import javax.servlet.ServletRequestListener;
    public class testListener implements ServletRequestListener {
        public void requestDestroyed(ServletRequestEvent sre) {
            System.out.println("这里是requestDestroyed");
        }
        public void requestInitialized(ServletRequestEvent sre) {
            System.out.println("这里是requestInitialized");
        }
    }
#### xml配置
            com.naihe2.testListener
### 流程分析
#### 读取配置文件
读取web.xml，处理后将信息存储在webXml中
配置context
直接遍历并添加至addApplication中
以上步骤就是将webxml中的listener相关的数据添加到ApplicationListener
接下来直接跟进到listenerStart
#### 获取所有listeners
反射生成了一个testListener对象，及我们自定义的Listener
遍历results中的自定义Listener并添加到eventListeners
将eventListeners中的内容添加到applicationEventListenersList属性中，而后期tomcat使用Listener会从applicationEventListenersList中取出
#### 调用过程
在自定义的Listener的requestDestroyed下断点
可以发现tomcat会自动调用fireRequestDestroyEvent，因此我们进入fireRequestDestroyEvent
这里直接获取applicationEventListenersList属性
遍历applicationEventListenersList并强制转为内容为ServletRequestListener类型
这里直接调用 requestDestroyed方法
对应这自定义的Listener
> 接下来如何动态添加Listener  
>  在上面分析，tomcat是将web.xml中的信息取出在调用
> addApplication，将信息添加至applicationListeners，然后再由listenerStart反射生成实例化的Listener，并在需要调用前调用fireRequestDestroyEvent，在间接调用
> requestDestroyed方法，但是分析了过程我们依旧无法主动添加Listener因为applicationListeners接收的是字符串而非一个对象。不过天无绝人之路，StandardContext提供了另一个方法  
>  addApplicationEventListener，可以直接添加一个Lisener对象到applicationEventListenersList
由于ServletRequestEvent至提供了ServletRequest，并没有提供Response，因此需要通过反射获取 Response
### 内存马
        Title
### 效果展示
随便访问一个页面
在访问我们的内存马网页  
这里我由于代码没有判断cmd是否为空，所以必须输入东西才能正常访问，你懂的
再次访问之前不存在的网页
## filter内存马
filter内存马可以参考笔者这篇文章  
# 基于spring
## controller 内存马
### 搭建一个sprint项目
#### 配置pom.xml
        4.0.0
        org.example
        springmvc
        pom
        1.0-SNAPSHOT
                junit
                junit
                4.12
            org.springframework
            spring-webmvc
            5.1.9.RELEASE
                javax.servlet
                servlet-api
                2.5
            javax.servlet.jsp
            jsp-api
            2.2
            javax.servlet
            jstl
            1.2
#### Demo
    package com.naihe.controller;
    import org.springframework.stereotype.Controller;
    import org.springframework.ui.Model;
    import org.springframework.web.bind.annotation.PathVariable;
    import org.springframework.web.bind.annotation.RequestMapping;
    import org.springframework.web.bind.annotation.RequestParam;
    @Controller
    public class Cl1 {
        @RequestMapping("/cl1")
        public String hello(String name, Model model){
            model.addAttribute("msg",name);
            return "hello";
        }
    }
#### 配置web.xml