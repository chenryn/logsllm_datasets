#### 概述
条件竞争经常会发生在信号处理程序中，这是因为信号处理程序支持异步操作。尤其是当信号处理程序是**不可重入**的或者状态敏感的时候，攻击者可能通过利用信号处理程序中的条件竞争，可能可以达到拒绝服务攻击和代码执行的效果。比如说，如果在信号处理程序中执行了free操作，此时又来了一个信号，然后信号处理程序就会再次执行free操作，这时候就会出现 double free 的情况，再稍微操作一下，就可能可以达到任意地址写的效果了。
一般来说，与信号处理程序有关的常见的条件竞争情况有
- 信号处理程序和普通的代码段共享全局变量和数据段。
- 在不同的信号处理程序中共享状态。
- 信号处理程序本身使用不可重入的函数，比如 malloc 和 free 。
- 一个信号处理函数处理多个信号，这可能会进而导致use after free 和 double free 漏洞。
- 使用 setjmp 或者 longjmp 等机制来使得信号处理程序不能够返回原来的程序执行流。
#### 线程安全与可重入
这里说明一下线程安全与可重入的关系。
-   线程安全
    -   即该函数可以被多个线程调用，而不会出现任何问题。
    -   条件
        -   本身没有任何共享资源
        -   有共享资源，需要加锁。
-   可重用
    -   一个函数可以被多个实例可以同时运行在相同的地址空间中。
    -   可重入函数可以被中断，并且其它代码在进入该函数时，不会丢失数据的完整性。所以可重入函数一定是线程安全的。
    -   可重入强调的是单个线程执行时，重新进入同一个子程序仍然是安全的。
    -   不满足条件
        -   函数体内使用了静态数据结构，并且不是常量
        -   函数体内使用了malloc 或者 free 函数
        -   函数使用了标准 IO 函数。
        -   调用的函数不是可重入的。
    -   可重入函数使用的所有变量都保存在[调用栈](https://zh.wikipedia.org/wiki/%E8%B0%83%E7%94%A8%E6%A0%88)的当前[函数栈](https://zh.wikipedia.org/w/index.php?title=%E5%87%BD%E6%95%B0%E6%A0%88&action=edit&redlink=1)（frame）上。
## 防范
如果想要消除条件竞争，那么首要的目标是找到竞争窗口（race windows）。
所谓竞争窗口，就是访问竞争对象的代码段，这给攻击者相应的机会来修改相应的竞争对象。
一般来说，如果我们可以使得冲突的竞争窗口相互排斥，那么就可以消除竞争条件。
### 同步原语
一般来说，我们会使用同步原语来消除竞争条件。常见的如下
-   锁变量
    -   通常互斥琐，在等待期间放弃CPU，进入idle状态，过一段时间自动尝试。
    -   自旋锁（spinlock），在等待期间不放弃CPU，一直尝试。
-   条件变量
    -   **条件变量是用来等待而不是用来上锁的。条件变量用来自动阻塞一个线程，直到某特殊情况发生为止。通常条件变量和互斥锁同时使用。**
-   临界区对象，CRITICAL_SECTION
-   信号量（semaphore），控制可访问某个临界区的线程数量，一般比1大。
-   管道，指用于连接一个读进程和一个写进程以实现它们之间通信的一个共享文件。其生存期不超过创建管道的进程的生存期。
-   命名管道，生存期可以与操作系统运行期一样长。
```
# 创建管道
mkfifo my_pipe
# gzip从给定的管道中读取数据，并把数据压缩到out.gz中
gzip -9 -c  out.gz &
# 给管道传输数据
cat file > my_pipe
```
### 死锁
#### 概述
当同步原语使用的不恰当的时候，进程就可能会出现死锁。当两个或两个以上的执行流互相阻塞导致都不能继续执行，死锁就会发生。其实，死锁主要是因为在冲突的执行流中，出现了循环等待的执行流，即循环等待中的每一个执行流都获得一个资源，同时试图获得下一个资源。下图所示，P1、P2 两个进程都需要资源才能继续运行。P1 拥有资源 R2、还需要额外资源 R1 才能运行；P2 拥有资源 R1、还需要额外资源 R2 才能运行，两边都在互相等待而没有任何一个可运行。
一般来说，死锁有以下四个必要条件
- 互斥，资源是互斥的。
- 持有和等待，持有已有的资源，同时等待使用下一个资源。
- 不可抢占，进程所获得的资源在未使用完毕之前，资源申请者不能强行地从资源占有者手中夺取资源，而只能由该资源的占有者进程自行释放。
- 循环等待，循环等待资源。
而如果想要消除死锁，也就是打破上面的四个必要条件。
此外，死锁可能来源于以下的原因
- 处理器速度
- 进程或者线程调度算法的变动
- 在执行的过程中，不同内存的限制。
- 任何能够中断程序执行的异步事件。
#### 影响
死锁一般情况下会造成拒绝服务攻击。
## 检测
那么，说到这里，我们有没有可能来检测条件竞争漏洞呢？目前也确实有这方面的研究，也是主要从静态分析和动态分析两个方面来检测。
### 静态检测
目前已知的静态检测工具有
-   [Flawfinder](http://www.dwheeler.com/flawfinder/)
    -   目标：C/C++源码
    -   步骤
        -   建立漏洞数据库
        -   进行简单的文本模式匹配，没有任何的数据流或控制流分析
-   [ThreadSanitizer](https://github.com/google/sanitizers)
    -   目标：C++和GO
    -   实现：LLVM
### 动态检测
- [Intel Inspector](https://en.wikipedia.org/wiki/Intel_Inspector)
- [Valgrind](https://en.wikipedia.org/wiki/Valgrind)
# 参考
- http://www.teraits.com/pitagoras/marcio/segapp/05.ppt
- http://repository.root-me.org/Programmation/C%20-%20C++/EN%20-%20Secure%20Coding%20in%20C%20and%20C++%20Race%20Conditions.pdf
- https://www.blackhat.com/presentations/bh-europe-04/bh-eu-04-tsyrklevich/bh-eu-04-tsyrklevich.pdf
- https://xinhuang.github.io/posts/2014-09-23-detect-race-condition-using-clang-thread-sanitizer.html
- https://llvm.org/devmtg/2011-11/Hutchins_ThreadSafety.pdf
- http://www.cnblogs.com/biyeymyhjob/archive/2012/07/20/2601655.html
- http://www.cnblogs.com/huxiao-tee/p/4660352.html
- https://github.com/dirtycow/dirtycow.github.io