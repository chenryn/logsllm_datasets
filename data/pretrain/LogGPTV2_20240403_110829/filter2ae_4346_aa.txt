### 简介
GitHub企业版(GHE)的代码默认是混淆的，但是有脚本可以把他们恢复为常规ruby文件.
影响版本：GitHub Enterprise 
GitHub Enterprise 2.17.6 August 13, 2019
漏洞原理：使用以一个`-`字符开头的"分支名称"(branch names)，向git命令中注入选项，允许攻击者截断服务器上的文件。
我认为这个漏洞是一个很好的开始，我看看GitHub企业版(GHE)是否存在类似的漏洞。
### 发现新漏洞
我开始搜索git进程被调用的所有位置，然后追溯参数,查看它们是否是用户可控的，以及是否已正确清理(sanitised)。
  * 发现情况是这样的：
    * 大多数地方要么将用户控制的数据放在--命令后面，以使它永远不会被解析为选项
    * 要么进行检查以确保它是有效的sha1或commit hash值，并且不以`-`开头
过了一会儿，我找到了`reverse_diff`方法，该方法进行了2次"提交"(commits)，最终`git diff-tree`与它们一起运行，并且唯一的检查是对于存储库（sha,branch,tag等）都存在有效的git引用(git
references)。追溯可知，此函数由`revert_range`在之前的2个wiki"提交"(commits)之间进行"撤销"(reverting)时使用的方法调用。
因此，发送POST请求到`user/repo/wiki/Home/_revert/57f931f8839c99500c17a148c6aae0ee69ded004/1967827bcd890246b746a5387340356d0ac7710a`  
会将值(实际参数)`57f931f8839c99500c17a148c6aae0ee69ded004`和`1967827bcd890246b746a5387340356d0ac7710a`传入`reverse_diff`，调用该函数。
完美，我checked out了一个repo(仓库)，并通过命令`git push origin master:--help`pushed出一个新的分支
名为`–help`，之后尝试发送POST请求到`user/repo/wiki/Home/_revert/HEAD/--help`。但是没有成功，返回的提示信息是`422
Unprocessable Entity`。  
为什么会这样？查看服务器日志后发现，是因为 CSRF 令牌无效。事实证明，rails现在具有基于表单的CSRF
token，这些token是根据要POST的`路径`生成的。  
没有检查查询参数，但是在本例中，路由设置为只允许"提交"(commits)的路径参数。
"撤销"(revert)的形式以及有效token是由"wiki比较模板"(wiki compare
template)生成的，但遗憾的是，它的验证更加严格，且要求commit具有有效的sha
hashes。这意味着我们无法为`–help`分支提供有效的表单(form)和token，仅能为具有有效的sha
hashes的commit提供：有效的表单(form)和token。
深挖rails中的`valid_authenticity_token?`方法（你没看错这个方法最后面是个问号），可以发现，绕过每个表单(form)CSRF的另一种方法是使用全局token，因为存在这样一个"代码路径"(code
path)，可以在转换时使现有表单向后兼容。  
as there is a code path to make existing forms backwards compatible while
transitioning.
    def valid_authenticity_token?(session, encoded_masked_token) # :doc:
        if encoded_masked_token.nil? || encoded_masked_token.empty? || !encoded_masked_token.is_a?(String)
            return false
        end
        begin
            masked_token = Base64.strict_decode64(encoded_masked_token)
        rescue ArgumentError # encoded_masked_token is invalid Base64
            return false
        end
        # See if it's actually a masked token or not. In order to
        # deploy this code, we should be able to handle any unmasked
        # tokens that we've issued without error.
        # 看看它是否真的是一个masked token。
        # 为了部署这段代码，我们应该能够毫无错误地处理任何已发出的unmasked tokens。
        if masked_token.length == AUTHENTICITY_TOKEN_LENGTH
            # This is actually an unmasked token. This is expected if
            # you have just upgraded to masked tokens, but should stop
            # happening shortly after installing this gem.
            # 这实际上是一个unmasked token。
            # 如果你刚刚升级到masked tokens那就是意料之中的，但这种情况应该在安装这个gem后很快就会停止发生。
            compare_with_real_token masked_token, session
        elsif masked_token.length == AUTHENTICITY_TOKEN_LENGTH * 2
            csrf_token = unmask_token(masked_token)
            compare_with_real_token(csrf_token, session) ||
            valid_per_form_csrf_token?(csrf_token, session)
        else
            false # Token is malformed.
        end
    end
全局CSRF token：通常是使用`csrf_meta_tags`这个helper分发给客户端，但是GitHub确实"锁定了一切"(locked down
everything)，经过大量搜索后，没有发现哪里能泄漏全局CSRF token。  
GitHub做的挺安全的，甚至会在每个表单的CSRF没有正确设置时抛出一个错误（因为这会泄漏全局CSRF token）。
我花了很长时间寻找怎么绕过这个逻辑：CSRF
token是由rails生成的，只要我能够使它使用诸如`wiki/Home/_revert/HEAD/--help`这样的路径，那么表单在哪里创建都不重要。
对 GHE 和 rails 代码进行了大量深入的搜索和挖掘后，我空手而归。我确实在 github.com上找到了一些已存档的html
页面，这些页面表明之前被分发的全局token不再分发。GitHub 将(用于用户会话的)全局 CSRF
token存储在数据库中，因此我决定继续从这里获取全局 CSRF token。
### 漏洞利用
我在GHE服务器上，从perf-tools安装并运行了`execsnoop`，以便更仔细地研究执行撤销(revert)时运行的具体的git命令，并发现它的形式是`git diff-tree
-p -R commit1 commit2 -- Home.md` 。git命令的`diff-tree`有一个选项是`--output`:
作用是将输出写入到文件，而不是直接输出结果。  
因此，将HEAD用作第1个commit，将`-–output=/tmp/ggg`用作第2个commit，将会把文件的最新diff写入`/tmp/ggg`。
因此，我将一个名为`--output=/tmp/ggg`的新分支push到wiki
repo中，然后使用从数据库中取到的`authenticity_token`，发送POST请求到`user/repo/wiki/Home/_revert/HEAD/--output%3D%2Ftmp%2Fggg`
从服务器上可看到，文件 `/tmp/ggg` 已经通过`diff`的输出得以创建！
    9ea5ef1f10e9ff1974055d3e4a60bec143822f9d
    diff --git b/Home.md a/Home.md
    index c3a38e1..85402bc 100644
    --- b/Home.md
    +++ a/Home.md
    @@ -1,4 +1,3 @@
     Welcome to the public wiki!
    -3