Availability. To encourage follow-up research, we have made
available (1) the complete code for Aligot, (2) the set of bi-
naries used for experimental evaluation in this paper, and
(3) the version information and links for the other tools at
http://code.google.com/p/aligot/.
12. ACKNOWLEDGEMENTS
We would like to thank Pierre-Marc Bureau from ESET,
as well as Pierre Brun-Murol and Nicolas Falli`ere for their
help and insightful comments during this research project.
easily add new functions to the database, as it was demon-
strated for RTEA (as discussed in §9.1).
Despite the experimental results presented in this paper,
we are not claiming that our loop data ﬂow model captures
every possible cryptographic function obfuscated implemen-
tation. Indeed, computer program analysis is inherently un-
decidable, as stated by Rice’s theorem [13], and this theoret-
ical impossibility is particularly relevant in the adversarial
game of obfuscation.
In our case, malware authors could
simply implement cryptographic functions with loops that
do not correspond to our deﬁnition.
In response to this
move, we could deﬁne and use a more inclusive loop model.
Another counter-measure for malware writers could be to
encode their parameters in such a way it does not corre-
spond to standard encodings used by our high-level refer-
ence implementations. Such a technique could be bypassed
by adding speciﬁc decoding procedures in front of our ref-
erence functions, as exhibited in §9.5. While accepting that
no perfect solution exists, a clear deﬁnition of the analysis
context can lead to answers for speciﬁc cases.
11. CONCLUSIONS AND FUTURE WORK
In this paper, we presented a method for cryptographic
function identiﬁcation and parameter extraction in obfus-
cated programs. To this end, we introduced loop data ﬂows
as a substitute for higher-level abstractions in obfuscated
code. Based on this abstraction, we extracted input and
output parameters and compared them with those of known
cryptographic functions. We built the Aligot tool and tested
it against synthetic obfuscated programs and actual malware
samples containing known cryptographic functions, such as
the Tiny Encryption Algorithm (TEA), RC4, MD5, AES
and RSA.
The main result is that Aligot performs signiﬁcantly bet-
ter than all previous tools, which is not surprising since they
were not really designed for analysis of obfuscated code.
It is important to underline that while most other tools
are defeated by simple techniques, like changes in compiler
options and hiding of easily recognizable features, Aligot’s
ability remains the same. Aligot is also the only tool that
is able to detect these crypto functions on samples packed
with a commercial-grade code protector (AsProtect) and in
mildly obfuscated malware such as Storm, Silent Banker and
Waledac. Furthermore, Aligot is even able to perform ade-
quately in the presence of important changes in code struc-
ture due to severe obfuscation, such as the case of the Sality
malware.
Most importantly, even though we experimented with a
relatively small set of samples and cryptographic functions,
we were able to ﬁnd encouraging evidence of the usefulness
of cryptography identiﬁcation in obfuscated malware. In the
case of Sality, for example, using Aligot we were able to iden-
tify an invariant feature in each of the four samples exam-
ined (ﬁxed oﬀset of cryptographic parameters) that could be
used to automatically access the protected code (i.e. used by
static unpackers). Most surprisingly, we were able to detect
that the Storm Worm and Silent Banker binaries shared the
same error in the implementation of the TEA cryptographic
function. This is a strong indicator that malware authors
were either the same or were using the same code base. This
supports our proposition that analysis of cryptographic code
in malware could provide important information leading up
17913. REFERENCES
[1] AsProtect packer.
http://www.aspack.com/asprotect.html.
[2] Polar SSL library Web site. http://polarssl.org.
[3] A. Aho, J. Ullman, and S. Biswas. Principles of
Compiler Design. Addison-Wesley, 1977.
[4] L. Auriemma. Signsrch tool.
http://aluigi.altervista.org/mytoolz.htm.
[5] F. Boldewin. Peacomm.c Cracking the nutshell.
http://www.reconstructer.org/papers/Peacomm.
C-Crackingthenutshell.zip.
[6] J. Caballero, P. Poosankam, C. Kreibich, and D. Song.
Dispatcher: Enabling active botnet inﬁltration using
automatic protocol reverse-engineering. In Proc. 16th
ACM Conf. on Computer and Communications
Security (CCS), pages 621–634, 2009.
[7] J. Calvet, C. Davis, and P. Bureau. Malware authors
don’t learn, and that’s good! In Proc. 4th Int. Conf.
on Malicious and Unwanted Software (MALWARE),
pages 88–97. IEEE, 2009.
[8] J. Daemen and V. Rijmen. The design of Rijndael:
AES–the advanced encryption standard.
Springer-Verlag, 2002.
[9] N. Falli`ere. Reversing Trojan.Mebroot’s Obfuscation.
In Reverse Engineering Conference (REcon), 2010.
[10] F. Gr¨obert, C. Willems, and T. Holz. Automated
identiﬁcation of cryptographic primitives in binary
programs. In Proc. Recent Advances in Intrusion
Detection (RAID), pages 41–60. Springer, 2011.
[11] J. Halderman, S. Schoen, N. Heninger, W. Clarkson,
W. Paul, J. Calandrino, A. Feldman, J. Appelbaum,
and E. Felten. Lest we remember: cold-boot attacks
on encryption keys. Comm. of the ACM, 52(5):91–98,
2009.
[12] S. Henson et al. OpenSSL library.
http://openssl.org.
[13] J. Hopcroft, R. Motwani, and J. Ullman. Introduction
to automata theory, languages, and computation.
Addison-Wesley, 2007.
[14] M. Kobayashi. Dynamic characteristics of loops. IEEE
Trans. on Computers, 100(2):125–132, 1984.
[15] I. O. Levin. Draft crypto analyzer (draca).
http://www.literatecode.com/draca.
[16] D. Litzenberger. PyCrypto - The python cryptography
toolkit, 2011.
[17] C. Luk, R. Cohn, R. Muth, H. Patil, A. Klauser,
G. Lowney, S. Wallace, V. Reddi, and K. Hazelwood.
Pin: building customized program analysis tools with
dynamic instrumentation. ACM SIGPLAN Notices,
40:190–200, 2005.
[18] N. Lutz. Towards revealing attacker’s intent by
automatically decrypting network traﬃc. Master’s
thesis, ETH Z¨urich, Switzerland, 2008.
[19] C. Maartmann-Moe, S. Thorkildsen, and A. Arnes.
The persistence of memory: Forensic identiﬁcation
and extraction of cryptographic keys. Digital
Investigation, 6:S132–S140, 2009.
[20] P. Montgomery. Modular multiplication without trial
division. Mathematics of Computation,
44(170):519–521, 1985.
[21] M. Morgenstern and H. Pilz. Useful and useless
statistics about viruses and anti-virus programs. In
Proc. CARO Workshop, 2010.
[22] L. O Murchu. Trojan.silentbanker decryption.
http://www.symantec.com/connect/blogs/
trojansilentbanker-decryption.
[23] R. Rivest. RFC 1321: The MD5 message-digest
algorithm. Internet Activities Board, 143, 1992.
[24] R. Rivest, A. Shamir, and L. Adleman. A method for
obtaining digital signatures and public-key
cryptosystems. Comm. of the ACM, 21(2):120–126,
1978.
[25] C. E. Shannon. Communication theory of secrecy
systems. Bell System Technical Journal,
28(4):656–715, 1949.
[26] N. Stewart. Inside the storm: Protocols and
encryption of the Storm botnet. In Black Hat
Technical Security Conference, 2008.
[27] S. Trilling. Project Green Bay - Calling a Blitz on
Packers. In CIO Digest: Strategies and Analysis from
Symantec, 2008.
[28] J. Tubella and A. Gonz´alez. Control speculation in
multithreaded processors through dynamic loop
detection. In Proc. 4th Int. Symp. on
High-Performance Computer Architecture, pages
14–23. IEEE, 1998.
[29] VeriSign. Silentbanker analysis.
http://www.verisign.com/static/043671.pdf.
[30] Russian TEA assembly code.
http://www.xakep.ru/post/22086/default.asp.
[31] C. Wang, J. Hill, J. Knight, and J. Davidson. Software
tamper resistance: Obstructing static analysis of
programs. Technical Report CS-2000-12, University of
Virginia, 2000.
[32] Z. Wang, X. Jiang, W. Cui, X. Wang, and M. Grace.
ReFormat: Automatic reverse engineering of
encrypted messages. In Proc. ESORICS, pages
200–215, 2009.
[33] PEiD Krypto Analyzer (kanal).
http://www.peid.info.
[34] RC4 source code. http://cypherpunks.venona.com/
date/1994/09/msg00304.html.
[35] D. Wheeler and R. Needham. TEA, a tiny encryption
algorithm. In Proc. Fast Software Encryption, pages
363–366. Springer, 1995.
[36] V. Zakorzhevsky. A new version of Sality at large.
http://www.securelist.com/en/blog/180/A_new_
version_of_Sality_at_large.
[37] R. Zhao, D. Gu, J. Li, and R. Yu. Detection and
analysis of cryptographic data inside software.
Information Security, pages 182–196, 2011.
180APPENDIX
A. LOOP INSTANCE DETECTION
ALGORITHM
We used the following data structures to implement the
algorithm:
• History: list-like structure storing machine instructions
already seen along with loop IDs. In the pseudo-code
the History variable is named H.
• LoopInstance: structure containing information related
to a loop instance.
• RunningLoops: set of running loops; each of these items
is a stack representing a loop nesting: the head con-
tains the LoopInstance of the most nested loop, whereas
the rest of the stack contains the higher loops. In the
pseudo-code the RunningLoops variable is named RL.
The main procedure pseudo-code is given in Algorithm
1, whereas the core logic of the loop detection is contained
in the recursive procedure M atch() given in Algorithm 2.
Some operations are described directly in natural language
to ease the understanding and some details are hidden for
the same reason.
The algorithm is build on a simple rule: a machine instruc-
tion is either part of a conﬁrmed loop instance or a possible
beginning for such instances, but not both at the same time.
This dichotomy is expressed in the main procedure: for each
instruction the for-loop checks if a conﬁrmed instance waits
for it and if so — Match() procedure returns 1 — the others
instances are not tested and the instruction is not consid-
ered as a possible loop beginning. On the other hand, if no
conﬁrmed loop instance waits for the instruction, then the
second part of the main procedure checks if it could be a
loop beginning. During this process the history stores ma-
chine instructions that have not been (yet) proved to be part
of a conﬁrmed loop.
Algorithm 1 Loop Instance Detection Main Procedure
Require: T
T RACEx86, H : History, RL :
:
RunningLoops
1: for i = 1 to Length(T ) do
2:
3:
4:
Conf irmedInstanceW aitsF orM e ← 0
for StackOf Loops in RL do
if Match(StackOf Loops, I[Di], History) = 1
then
Conf irmedInstanceW aitsF orM e ← 1
Break
end if
end for
if Conf irmedInstanceW aitsF orM e = 0 then
Append(H, I[Di])
if there exists others I[Di] occurrences in H then
Create associated loop instances
Add them to RL
5:
6:
7:
8:
9:
10:
11:
12:
13:
14:
15:
end if
16: end for
end if
B. PARAMETER GRAPHS
Algorithm 2 Loop Instance Detection Match Procedure
Require: StackOf Loops : Stack(LoopInstance), Ij : X 86,
H : History
1: if StackOf Loops is empty then
return 0 {Base case: failure}
2:
3: end if
4: currentInstance ← Head(StackOf Loops) {Get the
most nested loop}
Increment currentInstance.cursor
Create new instance I for the loop X
Push(StackOf Loops, I)
return Match(StackOf Loops,Ij,H)
5: if currentInstance.cursor points to a loop ID X then
6:
7:
8:
9:
10: else
11:
12:
13:
Increment currentInstance.cursor
if currentInstance iterates for the second time
then
if currentInstance.cursor points to Ij then
Remove currentInstance instructions from H
currentInstance.conf irmed ← 1
Append(H, currentInstance.ID)
end if
if currentInstance.conf irmed = 1 then
return 1 {Success}
return 0 {Failure}
else
end if
14:
15:
16:
17:
18:
19:
20:
21:
22:
23:
24:
25:
26:
27:
28:
29:
30:
31:
32: end if
else
else
end if
end if
if currentInstance.conf irmed = 1 then
Pop(StackOf Loops)
return Match(StackOf Loops,Ij,H)
Discard StackOf Loops
return 0 {Failure}
181(a) Sal1 parameter graph for the part recognized as RC4 by Aligot: 542000:11 is the key, 542116:65258 the input text
and 542116:65258 the output text.
(b) Sal2 parameter graph for the part recognized as RC4 by Aligot: 410000:8 is the key, 410116:57066 the
input text and 410116:57066 is the output text.
Figure 10: Parameter graphs. Only the ﬁrst 8 bytes of parameter values are displayed. Every cryptographic
parameter starts at the same oﬀset from the ﬁle beginning (0x542000 for Sal1 and 0x410000 for Sal2).
182