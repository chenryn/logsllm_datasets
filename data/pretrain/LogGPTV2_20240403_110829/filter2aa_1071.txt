# Mainframe Surrogate Chains
By Jake Labelle  
August 8, 2020

## About Me
- **Name:** Jake Labelle
- **Position:** Associate Security Consultant at F-Secure
- **Experience:** Worked on a few mainframe projects (not an expert)
- **Location:** Basingstoke, UK
- **Note:** Look to the right for my picture.

## z/OS Overview
- **Operating System:** z/OS
- **Key Components:**
  - Datasets
  - REXX
  - JCL
  - RACF
  - OMVS

### Datasets
- **Example:** `USER01.REXXLIB(HELLO)`
- **Structure:** Flat filesystem
- **Syntax:** Use apostrophes
- **Types:** PDS (Partitioned Data Set) with members

### REXX
- **Description:** Scripting language
- **Key Commands:**
  - `ADDRESS`
  - `OUTTRAP`

**Example Code:**
```rexx
/*rexx*/
DATASET_TEST = "USER2.TEST"
address TSO "LISTDSD " DATASET_TEST
```

### JCL (Job Control Language)
- **Purpose:** Batch job management
- **Components:**
  - **Job Card:** Specifies user and other parameters
  - **Exec Statement:** Runs a program
  - **DD Statements:** Define data sets

**Example Job:**
```jcl
//USER1K JOB 'EXAMPLE',NOTIFY=&SYSUID,USER="id",MSGCLASS=H
//TSOCMD   EXEC PGM=IKJEFT01
//SYSTSPRT DD SYSOUT=*
//SYSTSIN  DD *
EXEC 'GATOR.GATOR' '"oldid"'
/*
```

**JCL in REXX:**
```rexx
/*REXX*/
PARSE ARG id ',' oldid
QUEUE "//"id"K JOB 'RECURSE',NOTIFY=&SYSUID,USER="id",MSGCLASS=H,"
QUEUE "// MSGLEVEL=(1,1)"
QUEUE "//TSOCMD   EXEC PGM=IKJEFT01"
QUEUE "//SYSTSPRT DD SYSOUT=*"
QUEUE "//SYSTSIN  DD *"
QUEUE "EXEC 'GATOR.GATOR' '"oldid"'"
QUEUE "//*"
QUEUE "$$"
o = OUTTRAP("output.",,"CONCAT")
"SUBMIT * END($$)"
o = OUTTRAP(OFF)
```

### OMVS
- **Description:** UNIX subsystem
- **Comparison:** Similar to WSL (Windows Subsystem for Linux)
- **Security Management:** Managed by RACF

### RACF (Resource Access Control Facility)
- **Function:** Manages access to resources
- **Resource Types:**
  - Datasets
  - Surrogates
- **Key Concepts:**
  - Resource owners
  - UACC (User Access Control)
  - PERMIT
  - Special (equivalent to root)

### Surrogates
- **Description:** RACF resource
- **Examples:**
  - `*.SUBMIT`
  - `BPX.SRV.*`
  - `DFHSTART.*`
- **Access Levels:**
  - Read access

### Surrogate Chains
- **Context:** Many users, often with unclear roles
- **Duration:** Running for decades
- **Chain Example:** USER1 → USER2 → USER3
- **Commands:**
  - `RLIST SURROGAT *` to list surrogates
- **Visibility:** USER1 cannot see USER2 → USER3
- **Batch Jobs:** `*.SUBMIT` is a batch job
- **Potential Risks:**
  - Manual submission of reverse shells
  - Users with read access to all resources (SPECIAL)

### GATOR
- **Scripts:**
  - `BEGIN.REXX`
  - `GATOR.REXX`
  - `SUBM.REXX`
  - `UNIXM.REXX`
  - `PLUGINS.REXX`

#### BEGIN.REXX
- **Functions:**
  - Prepares output datasets
  - Sets up UNIX files
  - Adds current user to the path
  - Starts `GATOR.REXX`

#### GATOR.REXX
- **Functions:**
  - Gets the path
  - Stops if SPECIAL
  - Runs `PLUGINS.REXX`
  - Lists surrogates
  - Checks if surrogates have been visited
  - If `*.SUBMIT`, runs `SUBM.REXX`
  - If `BPX.SRV.*`, runs `UNIXM.REXX`

#### SUBM.REXX
- **Functions:**
  - Submits a JCL as the surrogate user, which runs `GATOR.REXX`

#### UNIXM.REXX
- **Functions:**
  - JCL that runs `GATOR.REXX`
  - File in OMVS
  - Called with `bpxbatch sh su -s "[TARGET_USER]" -c '/tmp/unixm'`

#### PLUGINS.REXX
- **Functions:**
  - List of REXX scripts to run on each user
  - Runs enumeration scripts
  - Easy to add more

### Testing
- **Environment:** ZPDT (emulated z/OS)
- **Setup:**
  - Created 1000 users
  - Randomly assigned operators and SPECIAL
  - Added a couple of surrogates of each type to each user
- **Execution:** Ran GATOR

### Graph Visualization
- **Shell Macro:**
  - From the user that ran GATOR
  - Recursively submits JCL, passing the target and its position in the path
  - At the end, submits a CATSO shell (like a Meterpreter)

### Setup Script
- **File:** `SETUP.SH`
- **Description:** S3270 script to upload all REXX scripts

### TK4-
- **Description:** Based on 1980s mainframe OS (MVS 3.8J)
- **Platform:** Runs on a Raspberry Pi
- **Availability:** Open source/public domain
- **Website:** [http://wotho.ethz.ch/tk4-/](http://wotho.ethz.ch/tk4-/)
- **Usage:**
  - Run `mvs` to start
  - Connect with `X3270 [MVS IP] 3270`
  - Clear the keyboard using the top-right key
  - Login: Username `HERC01`, Password `CUL8TR`

### KICKS and BREXX
- **KICKS:** A CICS clone can be installed
- **Video Tutorial:** [YouTube](https://www.youtube.com/watch?v=u_ZSHOagTM)
- **BREXX:** Can be installed to run REXX scripts

### Hercules
- **License:** Q Public License
- **Description:** Mainframe emulator
- **Runs:** TK4- runs on this
- **Old Version:** An old z/OS version is available online
- **Note:** Piracy is not recommended

This document provides an overview of mainframe surrogate chains, REXX scripting, and related tools and environments.