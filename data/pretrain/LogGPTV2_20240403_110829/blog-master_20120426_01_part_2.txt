修改权限为700  
```  
postgres@db-172-16-3-150-> chmod -R 700 pg_root  
```  
新建pg_xlog和pg_tblspc并修改权限为700  
```  
postgres@db-172-16-3-150-> cd pg_root  
mkdir pg_xlog  
chmod 700 pg_xlog  
mkdir pg_tblspc  
chmod 700 *  
```  
把要恢复的表空间的软链接先做好, 其他软链接不做  
```  
cd pg_tblspc  
ln -s /pgdata/digoal/1921/data03/pg_tbs/digoal_01 16682  
```  
以下选用第3点方法.  
注意, 别指望以下能帮你节省掉其他不需要的表空间的恢复过程中产生的数据(即基础备份以来对这些表空间更改过或新增的BLOCK).  
因为会报错, 我后面会贴出错误报告.  
```  
ln -s /dev/null 16385  
ln -s /dev/null 16684  
ln -s /dev/null 16685  
ln -s /dev/null 16686  
```  
比较靠谱的方法是 :   
1\. 找到类似黑洞的文件系统, 建的文件在里面都是虚假的.  
2\. 弄个程序把过程中产生的大文件至空.  
3\. 如果其他表空间在此期间没有产生太多的数据就让他去吧  
4\. 修改PG源码, 让它支持基于表空间或数据库实例级别的PITR.   
基于数据库实例级别的PITR注意事项, 为了避免产生不一致数据, 这种恢复可能丢失跨库事务的一致性.  
基于表空间的恢复注意事项, 可能丢失同一数据库的事务一致性, 因为同一个数据库中可以有多个表空间. 所以基于表空间的PITR, 应该把要恢复的表空间以及该表空间所在库的其他表空间也进行PITR.  
我这里为了测试方便选择了第3点.  
接下来把需要恢复的表空间的目录改名,  
```  
postgres@db-172-16-3-150-> cd /pgdata/digoal/1921/data03/pg_tbs  
postgres@db-172-16-3-150-> mv digoal_01 digoal_01_old  
```  
把需要恢复的digoal_01表空间的备份文件拷贝到它所在的目录, 并修改权限700  
```  
postgres@db-172-16-3-150-> cp -r /pgdata/digoal/1921/data01/pg_bak/digoal_01 ./  
postgres@db-172-16-3-150-> chmod -R 700 digoal_01  
```  
新建recovery.conf文件, 告诉PostgreSQL要恢复了.  
```  
postgres@db-172-16-3-150-> cd $PGDATA  
postgres@db-172-16-3-150-> vi recovery.conf  
restore_command = 'cp /pgdata/digoal/1921/data01/pg_arch/%f %p'         # e.g. 'cp /mnt/server/archivedir/%f %p'  
recovery_target_timeline = 'latest'  
postgres@db-172-16-3-150-> chmod 700 recovery.conf   
```  
启动数据库进行恢复  
```  
pg_ctl start -D $PGDATA  
```  
恢复后可以看到pg_tblspc中会新建一个目录16684, 其实就是digoal_02的表空间目录.  
```  
 lrwxrwxrwx 1 postgres postgres 43 Mar 13 09:59 16684 -> /pgdata/digoal/1921/data04/pg_tbs/digoal_02  
```  
因为恢复过程中的WAL中包含了digoal_02这个表空间的XLOG日志(还记得我前面在test2库中插入的操作吗?), 恢复时会主动创建这些文件.   
```  
postgres@db-172-16-3-150-> cd $PGDATA/pg_tblspc  
postgres@db-172-16-3-150-> ll  
total 4.0K  
lrwxrwxrwx 1 postgres postgres   43 Apr 26 12:41 16682 -> /pgdata/digoal/1921/data03/pg_tbs/digoal_01  
drwx------ 3 postgres postgres 4.0K Apr 26 12:42 16684  
postgres@db-172-16-3-150-> du -sh *  
0       16682  
692M    16684  
```  
恢复结束后就可以连到test1库了, 检查数据是否正确.   
```  
postgres=# \c test1   
You are now connected to database "test1" as user "postgres".  
test1=# select count(*) from test;  
  count     
----------  
 20000000  
(1 row)  
```  
从验证结果来看, PG的基于表空间的PITR是可行的.  
## 小结  
恢复过程中过滤掉不需要的表空间变更信息, 就不会产生那一堆的其他表空间的变更数据了, PostgreSQL内核中加入基于数据库或表空间的恢复不会太遥远.   
## 附  
使用/dev/null做黑洞的失败记录  
```  
postgres@db-172-16-3-150-> pg_ctl start  
LOG:  could not open temporary-files directory "pg_tblspc/16685/PG_9.1_201105231/pgsql_tmp": Not a directory  
LOG:  could not open tablespace directory "pg_tblspc/16685/PG_9.1_201105231": Not a directory  
LOG:  could not open temporary-files directory "pg_tblspc/16686/PG_9.1_201105231/pgsql_tmp": Not a directory  
LOG:  could not open tablespace directory "pg_tblspc/16686/PG_9.1_201105231": Not a directory  
LOG:  could not open temporary-files directory "pg_tblspc/16684/PG_9.1_201105231/pgsql_tmp": Not a directory  
LOG:  could not open tablespace directory "pg_tblspc/16684/PG_9.1_201105231": Not a directory  
LOG:  could not open temporary-files directory "pg_tblspc/16385/PG_9.1_201105231/pgsql_tmp": Not a directory  
LOG:  could not open tablespace directory "pg_tblspc/16385/PG_9.1_201105231": Not a directory  
```  
到最后会恢复失败,csv日志如下 :   
```  
postgres@db-172-16-3-150-> cd /var/applog/pg_log/digoal/1921/   
2012-04-26 12:28:52.916 CST,,,24354,,4f98cef9.5f22,20,,2012-04-26 12:28:41 CST,1/0,0,FATAL,42809,"could not stat directory ""pg_tblspc/16684/PG_9.1_201105231/3944339"": Not a directory",,,,,"xlog redo insert: rel 16684/3944339/3944343; tid 22123/203",,,,""  
2012-04-26 12:28:52.921 CST,,,24346,,4f98cef2.5f1a,2,,2012-04-26 12:28:34 CST,,0,LOG,00000,"startup process (PID 24354) exited with exit code 1",,,,,,,,,""  
2012-04-26 12:28:52.921 CST,,,24346,,4f98cef2.5f1a,3,,2012-04-26 12:28:34 CST,,0,LOG,00000,"terminating any other active server processes",,,,,,,,,""  
```  
#### [PostgreSQL 许愿链接](https://github.com/digoal/blog/issues/76 "269ac3d1c492e938c0191101c7238216")
您的愿望将传达给PG kernel hacker、数据库厂商等, 帮助提高数据库产品质量和功能, 说不定下一个PG版本就有您提出的功能点. 针对非常好的提议，奖励限量版PG文化衫、纪念品、贴纸、PG热门书籍等，奖品丰富，快来许愿。[开不开森](https://github.com/digoal/blog/issues/76 "269ac3d1c492e938c0191101c7238216").  
#### [9.9元购买3个月阿里云RDS PostgreSQL实例](https://www.aliyun.com/database/postgresqlactivity "57258f76c37864c6e6d23383d05714ea")
#### [PostgreSQL 解决方案集合](https://yq.aliyun.com/topic/118 "40cff096e9ed7122c512b35d8561d9c8")
#### [德哥 / digoal's github - 公益是一辈子的事.](https://github.com/digoal/blog/blob/master/README.md "22709685feb7cab07d30f30387f0a9ae")
![digoal's wechat](../pic/digoal_weixin.jpg "f7ad92eeba24523fd47a6e1a0e691b59")
#### [PolarDB 学习图谱: 训练营、培训认证、在线互动实验、解决方案、生态合作、写心得拿奖品](https://www.aliyun.com/database/openpolardb/activity "8642f60e04ed0c814bf9cb9677976bd4")
#### [购买PolarDB云服务折扣活动进行中, 55元起](https://www.aliyun.com/activity/new/polardb-yunparter?userCode=bsb3t4al "e0495c413bedacabb75ff1e880be465a")
#### [About 德哥](https://github.com/digoal/blog/blob/master/me/readme.md "a37735981e7704886ffd590565582dd0")