1. If y > t.cipher, then return Decrypt(y, t.right)
2. If y  y}
7. Let y′ =Encrypt(xl |X′ |
2 m, T0, min, max)
8. Let y′′ =Encrypt(xl |X′′ |
2 m, T0, min, max)
9. Recursively iterate on line 5 with both y′ and y′′ as y
and X ′ and X ′′ as X, respectively.
10. Find x in T and return Tx.cipher
5.1 Examples
Before describing space-saving measures we give some ex-
amples of trees that can emerge when inserting random
plaintexts. We consider the example of a binary plaintext
domain again, e.g. male and female. We have 4 plaintexts
xi ∈ {0, 1}. We insert the following sequence X = 0, 1, 0, 1.
We set the random coins to the sequence 1, 0. The resulting
sequence of trees is depicted in Figure 1.
Figure 1 is divided into four subﬁgures numbered 1 to 4.
Each depicts the search tree after inserting one more element
of the sequence with the new node in red. In subﬁgure 3
we see for the ﬁrst time a plaintext repeating, but inserted
beneath a parent with a diﬀerent plaintext. We can trace
the algorithm as follows: When inserting 0 for the second
time, the algorithm encounters a 0 at the root. Due to the
random coins it traverses to the right, where it encounters
a 1 and must make a deterministic choice leading to the
new leaf. In subﬁgure 4 we see that the next 1 inserted and
plaintext nodes interleaving.
In larger plaintext domains
even intermediate elements can be placed at lower nodes.
Of course, repeated plaintexts can also be placed under
parents with the same plaintext. If we insert two more ele-
ments 0, 1 with random coins 0, 1, the search tree will look
as in Figure 2.
5.2 Compression
When storing the plaintexts in this simple tree as de-
scribed we will use more space than when storing only the
plaintexts. We need to accommodate the ciphertext and
Figure 1: Growing Search Tree for Sequence 0, 1, 0, 1
the pointers in the tree. In this section we describe how we
compress the tree.
First, note that the ciphertext does not need to be stored.
It can be computed dynamically as we traverse the tree. We
can already save the space for this ﬁeld, but we still need to
compress the tree.
We can compress the plaintext using regular dictionary
compression [3, 8, 39] and store repeated values as the index
into the dictionary. This method is very eﬀective in saving
space for column-store databases. Moreover, we can further
compress subtrees of repeated values. As we have seen in
the examples before, repeated plaintexts can have parents
of the same or a diﬀerent plaintexts. We call subtrees of the
same plaintext clusters.
In a cluster we do not need to store the plaintext for each
node, instead we just store it once in the root of the clus-
Figure 2:
0, 1, 0, 1, 0, 1
Possible Search Tree for Sequence
ter. While suppressing a ﬁeld in a structure is supported
in polymorphic object-oriented languages using inheritance
we compress the tree even further.
Instead of storing the
tree structure we only store its traversal thereby compress-
ing the size of the pointers. Let the size of the cluster be
M . First we traverse the tree in post-order traversal order
and assign the nodes the numbers from 1 to M in ascend-
ing order, i.e. the post-order traversal is now 1, 2, 3, . . .. We
then traverse the tree in in-order traversal order and record
the post-order-traversal numbers. As an example, a sim-
ple binary tree with one root and two leaves then becomes
1, 3, 2.
We only store this traversal sequence. Every time we en-
counter a cluster we expand it to the full tree before pro-
ceeding in the traversal. This can be done in linear time and
space using the algorithm of Andersson and Carlsson [7]. Af-
ter proceeding to the next node with diﬀerent plaintext we
destroy the temporarily expanded tree. Hence, we save not
only on the plaintext storage, but also on the pointer infor-
mation in the tree. We only need to store (long) pointers
between nodes of diﬀerent plaintexts.
We evaluate the eﬀectiveness of our compression in Sec-
tion 7.4.
6.
IMPERFECT FREQUENCY-HIDING
So far our scheme achieves IND-FAOCPA security (see
proof in Section 7.1). This has security advantages, but also
implies high storage space requirements at the client.
In
some application scenarios lower security and (signiﬁcantly)
lower space requirements can be desirable. For example, it
is often enough if the distribution of ciphertexts is not per-
fectly hiding, but approaches a known distribution, most no-
tably the uniform distribution. Islam et al. suggest and pos-
itively evaluate against guessing attacks approximating the
expected frequency by a uniform distribution [18]. We can
approximate a uniform distribution – with some repeated
ciphertexts – using our frequency-hiding encryption scheme
and a heuristic pre-ﬁlter. This pre-ﬁlter hence trades some
security for signiﬁcant space savings.
The basic idea is as follows: For each distinct plaintext
x ∈ X we maintain the numbers cx of times it has occurred
and the numbers dx of distinct ciphertexts (for this plain-
text) already generated. We check whether a new plaintext
will skew the distribution, such that the number of plain-
texts per ciphertext for this plaintext is oﬀ by a factor more
than r from the number of plaintexts per ciphertext for all
plaintexts. If this is the case, we always generate a new ci-
phertext. Otherwise, we ﬂip a biased coin (with probability
p) and decide probabilistically whether to generate a new ci-
phertext. This randomizes the number of times a ciphertext
can be observed at the cloud provider compared to the deter-
ministic, smallest number of plaintexts. If we do not gener-
ate a new ciphertext, we uniformly chose among the already
generated ones. Let C = {cx|x ∈ X} and D = {dx|x ∈ X}
be the set of counters described before. Our pre-ﬁlter is pa-
rameterized by r > 1 and 0 ≤ p ≤ 1. The entire ﬁlter is
described in Algorithm 5.
Algorithm 5 Filtering for Imperfect Frequency-Hiding
Input: C, D, r, p, x
Output: y
State: T = {tj} in a sorted binary tree
1. Let cx be the number of occurrences of plaintext x.
Let dx be the number of distinct ciphertexts for x.
2. If
7. EVALUATION
We implemented our frequency-hiding order-preserving en-
cryption scheme in Java 1.7. We run in the 64-Bit Hotspot
Server VM on an Intel Core i5-4300 CPU with 1.9-2.5GHz
and 16GB RAM.
7.1 Security Proof
We give a proof of security against frequency-analyzing
ordered chosen plaintext attack of our encryption scheme
of Section 5. We prove by constructing a simulator of the
encryption that produces identical outputs for each of the
two challenge sequences. Hence, the computational indis-
tinguishability stems from implementing the random source
as a pseudo-random function and not any other hardness
assumption. Note that our scheme also trivially fulﬁlls the
notion of same-time security deﬁned in [30] when ciphertexts
are never deleted from the state, but only from the database.
Theorem 3. Our encryption scheme is secure against frequency-
analyzing ordered chosen plaintext attack.
Proof. Our simulator proceeds as follows. The adver-
sary sends the two plaintext sequences X0 and X1 of length
n. The simulator needs to randomly select a randomized
order common to X0 and X1 from the set of all common
randomized orders. It does this using Algorithm 6.
Algorithm 6 Selecting A Randomized Order
Input: X0, X1, s.t. |X0| = |X1| = n
Output: Γ
1. Sort X0 and X1 in ascending order into Z0 and Z1,
respectively.
cx + 1
dx
> r
Pj∈X cj
Pj∈X dj
2. Build a list W of triples hz0,i, z1,i, ii.
3a. For each pair x0,j, x1,j for 1 ≤ j ≤ n do
then increment cx, dx and return y = Encrypt(x).
3. Choose a random coin c ∈ {0, 1} with P r[c = 1] = p.
4. If c = 1, then increment cx, dx and return y =
Encrypt(x).
5. Build set Y = {tj .cipher|tj .plain = x}. Uniformly
select y among Y , increment cx and return y.
The parameter p also balances storage cost and security.
For p = 1 the result of the ﬁltered scheme is the same as
the perfectly frequency-hiding order-preserving encryption
scheme. For p = 0 and a uniform distribution of plaintexts
the ﬁltered scheme grows near the deterministic encryption
of [23]. Nevertheless, for skewed plaintext distributions (and
ﬁnite r) it approximates a uniform distribution and is hence
more secure.
It is noteworthy that this ﬁltered scheme is still IND-
OCPA secure in the worst case and hence more secure than
many other order-preserving encryption schemes. Still, it is
not secure against frequency-analyzing ordered chosen plain-
text attack, since some plaintext repetitions leak (and hence
some frequency information leaks).
We evaluate the eﬀectiveness of this security-reducing com-
pression also in Section 7.4.
4. Build set U = {i|hz0,i, z1,i, ii ∈ W ∧ z0,i = x0,j ∧
z1,i = x1,j}.
5. Uniformly select γj in U .
6. Remove hx0,j, x1,j, γji from W .
3b. End for each
Theorem 4. Algorithm 6 runs in time O(n2).
Proof. The loop (from line 3a to 3b) iterates n times.
Each operation (lines 4, 5, and 6) takes at most n operations
on the set W or U , respectively. Hence the overall time is
bound by O(n2) operations.
Theorem 4 implies that our simulator is polynomial time
and computational indistinguishability is feasible, even if we
implement the random choices using a pseudo-random func-
tion. Once the randomized order Γ has been selected, the
simulator needs to compute the ciphertexts. It simulates the
RandomCoin function in Algorithm 2 using a simulator of
the random source, i.e. the random source could be replaced
by hash functions (a random oracle).
First, it uniformly random selects plaintext sequence X ∈
{X0, X1}. During encryption, as it store plaintexts in the
state S – the binary search tree T – of the encryption func-
tion, it keeps track of the randomized order values γi. As it
encrypts xi and ﬁnally stores xi in T , it also stores γi, i.e. for
each value v in the tree T we also know γv. We denote γi
the randomized order value of the current input plaintext xi
and γv the randomized order value of the current node in
the tree traversal. If during encryption of xi, the simulator
encounters a call to RandomCoin, it calls Algorithm 7 with
γi and γv instead.
Algorithm 7 Programmed Random Oracle for Random-
Coin
An IND-FAOCPA secure scheme leaks the randomized or-
der of the plaintext sequence. Hence, an indistinguishable
sequence must have at least one common randomized order.
Diﬀerent sequences may have diﬀerent numbers of indistin-
guishable sequences. Consider encrypting two distinct plain-
texts 0 and 1 (“female” and “male”). The sequence X0 = 0, 0
has 4 indistinguishable sequences (including itself), but the
sequence X1 = 0, 1 has only 3. Consequently, we can only es-
timate the expected number of indistinguishable sequences.
We give a lower bound of the expected number of indistin-
guishable sequences in Theorem 7.
Input: γi, γv
Output: 0 or 1
1. If γi > γv, then return 1.
2. Return 0.
Theorem 5. The output of Algorithm 7 in the simulator
is indistinguishable from uniform random coins.
Proof. While the output of Algorithm 7 is deterministic,
the choice of γi and γv is determined by Algorithm 6. Al-
gorithm 6 uniformly selects a randomized order among all
possible randomized orders. Since each randomized order
results in a diﬀerent binary search tree and each output of
the RandomCoin function also produces a diﬀerent binary
search tree, the output of Algorithm 7 is indistinguishable
from uniform random coins.
This completes our simulator. The simulator produces
the same output for both sequences, runs in polynomial time
and its random output is indistinguishable from uniform ran-
dom coins. Hence the probability that the adversary wins
GameF AOCP A(λ) against our encryption of Section 5 is neg-
ligible in λ larger than 1
2 .
7.2 Indistinguishable Sequences
We can try to estimate the eﬀectiveness of the two diﬀer-
ent security models – IND-OCPA and IND-FAOCPA – by
estimating the size of the set of indistinguishable plaintext
sequences. Two indistinguishable sequences can be given as
a challenge in the security game and result in an indistin-
guishable ciphertext challenge. Clearly, the larger the set
of sequences indistinguishable from a given one, the more
secure the encryption. Under standard IND-CPA security
any two sequences of plaintexts are indistinguishable.
An IND-OCPA secure scheme may leak the order of the
plaintext sequence. Note that IND-OCPA security is also an
upper bound for weaker order-preserving encryption schemes
such as [9, 34, 35]. We give the number of indistinguishable
sequences in Theorem 6.
Theorem 6. Let D be the number of distinct plaintexts
in the plaintext domain. For any sequence of N distinct
plaintexts there are (cid:0)D
N(cid:1) indistinguishable sequences under
IND-OCPA.
Proof. The order of a sequence of N distinct plaintexts
N(cid:1) possible subsets
is a subset of the domain. There are (cid:0)D
and hence as many indistinguishable sequences.
Theorem 7. Let D be the number of distinct plaintexts
in the plaintext domain. For a uniformly chosen plaintext
sequence of size n with N distinct plaintexts there are at
least N (D − 1)
N indistinguishable sequences expected.
n
Proof. For any set ˜X of unique plaintext x we can ﬂatten
the sub-sequence xi  x to
D. Then there are D − 1 additional choices for any element
(without counting doubles) and an expected number of n
N
such elements. The order of choices within its repetitions
is independent, since all are from the same plaintext and
there N such sets ˜X. Hence there are at least N (D − 1)
expected indistinguishable sequences.
n
N
We emphasize that the expected number of distinct plain-
D (cid:1)n(cid:1). This number approaches
texts is E[N ] = D (cid:0)1 − (cid:0) D−1
D as n grows. Hence the number of indistinguishable se-
quences under IND-OCPA approaches 1 as n grows. To the
contrary either n
N or N (N ≤ n) approaches inﬁnity as n
grows and consequently the number of indistinguishable se-
quences under IND-FAOCPA also approaches inﬁnity as n
grows.
We conclude that the encryption secure against IND-FAOCPA
remains secure (even increases security) for long sequences
whereas the security of encryption secure against (only) IND-
OCPA deteriorates. Hence, the encryption of long (and
growing) sequences of plaintexts is clearly more secure under
an IND-FAOCPA secure scheme than under a scheme that
is only IND-OCPA secure. This applies to any deterministic
order-preserving encryption scheme, since all grow to only
one indistinguishable sequence – the plaintext domain.
7.3 Statistical Security
Each order-preserving encryption scheme – deterministic
or randomized – can be described as a monotonically in-
creasing function. Hence a simple statistical cryptanalysis
technique is to model the encryption as a linear function.
Given two plaintext, ciphertext pairs the parameters of this
function can be estimated.
We can estimate the eﬀectiveness of this attack by mea-
suring the correlation between the ciphertext and plaintext.
For a set of plaintext, ciphertext pairs we compute the Pear-
son correlation coeﬃcient r. The Pearson correlation coeﬃ-
cient measures a linear relation between two sets of random
variables.
We encrypt n = 16384 (possibly repeated) plaintexts inde-
pendently uniformly chosen from a set of N ∈ {64, 256, 1024,
4096, 16384, 65536} distinct plaintexts. We set the cipher-
text space to 60 bits.3 We make 100 experimental runs and
3As expected with 60 bits ciphertext space in none of our
experimental runs we had to rebalance the search tree.
Second, we measure the eﬀectiveness of search tree com-
pression by itself. We consider already dictionary compressed
values, i.e. ﬁeld size is equal to ⌈log2N⌉ bytes, and measure
the size of our search tree as described in Section 5. We en-
crypt n ∈ {105, 106, 107} plaintexts uniformly chosen among
N ∈ {16, 256, 4096, 65536, 1048576} distinct plaintexts. We