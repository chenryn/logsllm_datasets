# OAuth2.0介绍
## 参考
来源于黑马程序员： [手把手教你精通新版SpringSecurity](https://www.bilibili.com/video/BV1EE411u7YV?p=52)
## 概念说明
先说OAuth，OAuth是Open Authorization的简写。OAuth协议为用户资源的授权提供了一个安全的、开放而又简易的标准。与以往的授权方式不同之处是OAuth的授权不会使第三方触及到用户的帐号信息（如用户名与密码），即第三方无需使用用户的用户名与密码就可以申请获得该用户资源的授权，因此OAuth是安全的。
OAuth2.0是OAuth协议的延续版本，但不向前兼容(即完全废止了OAuth1.0)。
## 使用场景
假设，A网站是一个打印照片的网站，B网站是一个存储照片的网站，二者原本毫无关联。
如果一个用户想使用A网站打印自己存储在B网站的照片，那么A网站就需要使用B网站的照片资源才行。
按照传统的思考模式，我们需要A网站具有登录B网站的用户名和密码才行，但是，现在有了OAuth2，只需要A网
站获取到使用B网站照片资源的一个通行令牌即可！这个令牌无需具备操作B网站所有资源的权限，也无需永久有
效，只要满足A网站打印照片需求即可。
这么听来，是不是有点像单点登录？NONONO！千万不要混淆概念！单点登录是用户一次登录，自己可以操作其
他关联的服务资源。OAuth2则是用户给一个系统授权，可以直接操作其他系统资源的一种方式。
但SpringSecurity的OAuth2也是可以实现单点登录的！
总结一句：SpringSecurity的OAuth2可以做服务之间资源共享，也可以实现单点登录！
![image-20200920215239045](images/image-20200920215239045.png)
## OAuth2.0中四种授权方式
为了说明四种模式先准备一张图
![image-20200920215356835](images/image-20200920215356835.png)
### 授权码模式（authorization code）
#### 流程
说明：【A服务客户端】需要用到【B服务资源服务】中的资源
- 第一步：【A服务客户端】将用户自动导航到【B服务认证服务】，这一步用户需要提供一个回调地址，以备
  【B服务认证服务】返回授权码使用。
- 第二步：用户点击授权按钮表示让【A服务客户端】使用【B服务资源服务】，这一步需要用户登录B服务，也
  就是说用户要事先具有B服务的使用权限。
- 第三步：【B服务认证服务】生成授权码，授权码将通过第一步提供的回调地址，返回给【A服务客户端】。
  注意这个授权码并非通行【B服务资源服务】的通行凭证。
- 第四步：【A服务认证服务】携带上一步得到的授权码向【B服务认证服务】发送请求，获取通行凭证token。
- 第五步：【B服务认证服务】给【A服务认证服务】返回令牌token和更新令牌refresh token。
#### 使用场景
授权码模式是OAuth2中最安全最完善的一种模式，应用场景最广泛，可以实现服务之间的调用，常见的微
信，QQ等第三方登录也可采用这种方式实现。
### 简化模式（implicit）
#### 流程
说明：简化模式中没有【A服务认证服务】这一部分，全部有【A服务客户端】与B服务交互，整个过程不再有
授权码，token直接暴露在浏览器。
- 第一步：【A服务客户端】将用户自动导航到【B服务认证服务】，这一步用户需要提供一个回调地址，以备
  【B服务认证服务】返回token使用，还会携带一个【A服务客户端】的状态标识state。
- 第二步：用户点击授权按钮表示让【A服务客户端】使用【B服务资源服务】，这一步需要用户登录B服务，也
  就是说用户要事先具有B服务的使用权限。
- 第三步：【B服务认证服务】生成通行令牌token，token将通过第一步提供的回调地址，返回给【A服务客户
  端】。
#### 使用场景
适用于A服务没有服务器的情况。比如：纯手机小程序，JavaScript语言实现的网页插件等
### 密码模式（resource owner password credentials）
#### 流程
- 第一步：直接告诉【A服务客户端】自己的【B服务认证服务】的用户名和密码
- 第二步：【A服务客户端】携带【B服务认证服务】的用户名和密码向【B服务认证服务】发起请求获取
  token。
- 第三步：【B服务认证服务】给【A服务客户端】颁发token。
#### 使用场景
此种模式虽然简单，但是用户将B服务的用户名和密码暴露给了A服务，需要两个服务信任度非常高才能使
用
### 客户端模式（client credentials）
#### 流程
说明：这种模式其实已经不太属于OAuth2的范畴了。A服务完全脱离用户，以自己的身份去向B服务索取
token。换言之，用户无需具备B服务的使用权也可以。完全是A服务与B服务内部的交互，与用户无关了。
- 第一步：A服务向B服务索取token。
- 第二步：B服务返回token给A服务。
#### 使用场景
A服务本身需要B服务资源，与用户无关。
## OAuth2.0中表结构说明
### 说明
如果只是写个测试案例，完全可以不用连接数据库，直接将用户等信息写在项目中就行。但是，我们应该把眼光放在企业开发中。试想，我们自己做的一个软件，想使用微信第三方登录。难道你还指望微信去修改他们的代码，让我们去访问？想都别想！那么微信会怎么做呢？微信会提供好一个接入的入口，让我们自己去申请访问权限。这些数据自然而然需要保存在数据库中！
所以，我们将直接讲解数据库版实现方式！
### 建表语句
官方SQL地址：
https://github.com/spring-projects/spring-security-oauth/blob/master/spring-security-oauth2/src/test/resources/schema.sql
### oauth_client_details【核心表】
| 字段名                  | 字段说明                                                     |
| ----------------------- | ------------------------------------------------------------ |
| client_id               | 主键,必须唯一,不能为空. 用于唯一标识每一个客户端(client); 在注册时必须填写(也可由服务端自动生成). 对于不同的grant_type,该字段都是必须的. 在实际应用中的另一个名称叫appKey,与client_id是同一个概念 |
| resource_ids            | 资源的编号，相当于要访问的资源服务器编号                     |
| client_secret           | 用于指定客户端(client)的访问密匙; 在注册时必须填写(也可由服务端自动生成). 对于不同的grant_type,该字段都是必须的. 在实际应用中的另一个名称叫appSecret,与client_secret是同一个概念. |
| scope                   | 指定客户端申请的权限范围,可选值包括read,write,trust;若有多个权限范围用逗号(,)分隔,如:“read,write”. scope的值与security.xml中配置的‹intercept-url的access属性有关系.如‹intercept-url的配置为‹intercept-url pattern="/m/**"access=“ROLE_MOBILE,SCOPE_READ”/>则说明访问该URL时的客户端必须有read权限范围. write的配置值为SCOPE_WRITE, trust的配置值为SCOPE_TRUST. 在实际应该中, 该值一般由服务端指定, 常用的值为read,write. |
| authorized_grant_types  | 指定客户端支持的grant_type,可选值包括
    4.0.0
    com.itheima
    springboot_security_oauth
    pom
    1.0-SNAPSHOT
        heima_oauth_source
        heima_oauth_server
        org.springframework.boot
        spring-boot-starter-parent
        2.1.3.RELEASE
        Greenwich.RELEASE
                org.springframework.cloud
                spring-cloud-dependencies
                ${spring-cloud.version}
                pom
                import
            spring-snapshots
            Spring Snapshots
            https://repo.spring.io/snapshot
                true
            spring-milestones
            Spring Milestones
            https://repo.spring.io/milestone
                false
```
### 创建资源模块
#### 我们需要引入oauth2.0包
```xml
    org.springframework.cloud
    spring-cloud-starter-oauth2
    2.1.0.RELEASE
```
完整如下
```xml
        springboot_security_oauth
        com.itheima
        1.0-SNAPSHOT
    4.0.0
    heima_oauth_source
            org.springframework.boot
            spring-boot-starter-web
            org.springframework.boot
            spring-boot-starter-security
            org.springframework.cloud
            spring-cloud-starter-oauth2
            2.1.0.RELEASE
            mysql
            mysql-connector-java
            5.1.47
            org.mybatis.spring.boot
            mybatis-spring-boot-starter
            2.1.0
```
#### 然后创建配置文件
```yaml
server:
  port: 9002
spring:
  datasource:
    driver-class-name: com.mysql.jdbc.Driver
    url: jdbc:mysql:///security_authority
    username: root
    password: root
  main:
    allow-bean-definition-overriding: true #允许我们自己覆盖spring放入到IOC容器的对象
mybatis:
  type-aliases-package: com.itheima.domain
  configuration:
    map-underscore-to-camel-case: true
logging:
  level:
    com.itheima: debug
```
#### 提供启动类
```java
@SpringBootApplication
@MapperScan("com.itheima.mapper")
public class OauthSourceApplication {
    public static void main(String[] args) {
        SpringApplication.run(OauthSourceApplication.class, args);
    }
}
```
#### 提供处理器
这里不再连数据库了
```java
@RestController
@RequestMapping("/product")
public class ProductController {
    @GetMapping("/findAll")
    public String findAll(){
        return "产品列表查询成功！";
    }
}
```
#### 启动项目测试
由于此刻，项目中添加的有SpringBoot的Security包，默认不通过认证是无法访问处理器的，这个结果咱们在第三
天都已经知道了！那么如何解决呢？第三天我们是采用单点登录的方式解决了这个问题，那么今天我们把这个资源交给OAuth2来管理，使用通行的token来访问资源!
![image-20200921084540341](images/image-20200921084540341.png)
#### 将访问资源作为OAuth2的资源来管理
复制昨天项目中用户和角色对象，即便是用OAuth2管理资源，也一样需要认证，这两个对象还是需要的。
![image-20200921084613952](images/image-20200921084613952.png)
#### SysRole.java
```java
public class SysRole implements GrantedAuthority {
    private Integer id;
    private String roleName;
    private String roleDesc;
}
```