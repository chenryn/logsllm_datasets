上⾯示例中， 分配的内存块，单位⼤⼩是 64 字节，要分配的字节数是 256 字节。
aligned_alloc()
qsort() #
⽤来快速排序⼀个数组。它对数组成员的类型没有要求，任何类型数组都可以⽤这个函数排序。
qsort()
void qsort(
void *base,
size_t nmemb,
size_t size,
int (*compar)(const void *, const void *)
);
该函数接受四个参数。
base：指向要排序的数组开始位置的指针。
nmemb：数组成员的数量。
size：数组每个成员占⽤的字节⻓度。
compar：⼀个函数指针，指向⼀个⽐较两个成员的函数。
⽐较函数 将指向数组两个成员的指针作为参数，并⽐较两个成员。如果第⼀个参数⼩于第⼆个参
compar
数，该函数应该返回⼀个负值；如果两个函数相等，返回 ；如果第⼀个参数⼤于第⼆个参数，应该返回
0
⼀个正数。
下⾯是⼀个⽤法示例。
#include 
#include 
int compar(const void* elem0, const void* elem1) {
const int* x = elem0;
const int* y = elem1;
return *x - *y;
}
int main(void) {
int a[9] = {14, 2, 3, 17, 10, 8, 6, 1, 13};
qsort(a, 9, sizeof(int), compar);
for (int i = 0; i 
#include 
int compar(const void *key, const void *value) {
const int* k = key;
const int* v = value;
return *k - *v;
}
int main(void) {
int a[9] = {2, 6, 9, 12, 13, 18, 20, 32, 47};
int* r;
int key;
key = 12;
r = bsearch(&key, a, 9, sizeof(int), compar);
printf("Found %d\n", *r);
key = 30;
r = bsearch(&key, a, 9, sizeof(int), compar);
if (r == NULL)
printf("Didn't find 30\n");
return 0;
}
执⾏上⾯的示例，会输出下⾯的结果。
Found 12
Didn't find 30
多字节字符函数 #
stdlib.h 提供了下⾯的函数，⽤来操作多字节字符，详⻅《多字节字符》⼀章。
mblen()：多字节字符的字节⻓度。
mbtowc()：将多字节字符转换为宽字符。
wctomb()：将宽字符转换为多字节字符。
mbstowcs()：将多字节字符串转换为宽字符串。
wcstombs()：将宽字符串转换为多字节字符串。
全⽂完
本⽂由 简悦 SimpRead 转码，⽤以提升阅读体验，原⽂地址
语⾔教程 ⽹道
stdio.h - C -
⽹道（WangDoc.com），互联⽹⽂档计划
“
⽹道（WangDoc.com），互联⽹⽂档计划
是 C 语⾔的标准 I/O 库，⽤于读取和写⼊⽂件，也⽤于控制台的输⼊和输出。
stdio.h
标准 I/O 函数 #
以下函数⽤于控制台的输⼊和输出。
printf()：输出到控制台，详⻅《基本语法》⼀章。
scanf()：从控制台读取输⼊，详⻅《I/O 函数》⼀章。
getchar()：从控制台读取⼀个字符，详⻅《I/O 函数》⼀章。
putchar()：向控制台写⼊⼀个字符，详⻅《I/O 函数》⼀章。
gets()：从控制台读取整⾏输⼊（已废除），详⻅《I/O 函数》⼀章。
puts()：向控制台写⼊⼀个字符串，详⻅《I/O 函数》⼀章。
⽂件操作函数 #
以下函数⽤于⽂件操作，详⻅《⽂件操作》⼀章。
fopen()：打开⽂件。
fclose()：关闭⽂件。
freopen()：打开⼀个新⽂件，关联⼀个已经打开的⽂件指针。
fprintf()：输出到⽂件。
fscanf()：从⽂件读取数据。
getc()：从⽂件读取⼀个字符。
fgetc()：从⽂件读取⼀个字符。
putc()：向⽂件写⼊⼀个字符。
fputc()：向⽂件写⼊⼀个字符。
fgets()：从⽂件读取整⾏。
fputs()：向⽂件写⼊字符串。
fread()：从⽂件读取⼆进制数据。
fwrite()：向⽂件写⼊⼆进制数据。
fseek()：将⽂件内部指针移到指定位置。
ftell()：获取⽂件内部指针的当前位置。
rewind()：将⽂件内部指针重置到⽂件开始处。
fgetpos()：获取⽂件内部指针的当前位置。
fsetpos()：设置⽂件内部指针的当前位置。
feof()：判断⽂件内部指针是否指向⽂件结尾。
ferror()：返回⽂件错误指示器的状态。
clearerr()：重置⽂件错误指示器。
remove()：删除⽂件。
rename()：⽂件改名，以及移动⽂件。
字符串操作函数 #
以下函数⽤于操作字符串，详⻅《字符串操作》⼀章。
sscanf()：从字符串读取数据，详⻅《I/O 函数》⼀章。
sprintf()：输出到字符串。
snprintf()：输出到字符串的更安全版本，指定了输出字符串的数量。
tmpfile() #
函数创建⼀个临时⽂件，该⽂件只在程序运⾏期间存在，除⾮⼿动关闭它。它的原型如下。
tmpfile()
FILE* tmpfile(void);
返回⼀个⽂件指针，可以⽤于访问该函数创建的临时⽂件。如果创建失败，返回⼀个空指针
tmpfile()
NULL。
FILE* tempptr;
tempptr = tmpfile();
调⽤ ⽅法关闭临时⽂件后，该⽂件将被⾃动删除。
close()
有两个缺点。⼀是⽆法知道临时⽂件的⽂件名，⼆是⽆法让该⽂件成为永久⽂件。
tmpfile()
tmpnam() #
函数为临时⽂件⽣成⼀个名字，确保不会与其他⽂件重名。它的原型如下。
tmpname()
char* tmpname(char* s);
它的参数是⼀个字符串变量， 会把临时⽂件的⽂件名复制到这个变量⾥⾯，并返回指向该字符串
tmpnam()
变量的指针。如果⽣成⽂件名失败， 返回空指针 NULL。
tmpnam()
char filename[L_tmpname];
if (tmpnam(filename) != NULL)
printf("%s\n", filename);
else
printf("Something wrong!\n");
上⾯示例中， 是 定义的⼀个宏，指定了临时⽂件的⽂件名⻓度。
L_tmpname stdio.h
的参数也可以是⼀个空指针 NULL，同样返回指向⽂件名字符串的指针。
tmpname()
char* filename;
filename = tmpnam(NULL);
上⾯示例中，变量 就是 ⽣成的⽂件名。
filename tmpnam()
该函数只是⽣成⼀个⽂件名，稍后可以使⽤ 打开该⽂件并使⽤它。
fopen()
fflush() #
⽤于清空缓存区。它接受⼀个⽂件指针作为参数，将缓存区内容写⼊该⽂件。
fflush()
fflush(fp);
如果不需要保存缓存区内容，则可以传⼊空指针 NULL。
fflush(NULL);
如果清空成功， 返回 0，否则返回 EOF。
fflush()
注意， ⼀般只⽤来清空输出缓存区（⽐如写⽂件）。如果使⽤它来清空输⼊缓存区（⽐如读⽂
fflush()
件），属于未定义⾏为。
的⼀个⽤途是不等回⻋键，就强迫输出缓存区。⼤多数系统都是⾏缓存，这意味着只有遇到回⻋
fflush()
键（或者缓存区满了，或者⽂件读到结尾），缓存区的内容才会输出， 可以不等回⻋键，⽴即输
fflush()
出。
for (int i = 9; i >= 0; i--) {
printf("\r%d", i);
fflush(stdout);
sleep(1);
}
上⾯示例是⼀个倒计时效果， 是回⻋键，表示每轮循环都会回到当前⾏的⾏⾸，等于删除上⼀轮循环
\r
的输出。 表示⽴即将缓存输出到显示器，这⼀⾏是必需的，否则由于上⼀⾏的输出没有回
fflush(stdout)
⻋键，不会触发缓存输出，屏幕上不会显示任何内容，只会等到程序运⾏结束再⼀次性输出。
setvbuf() #
函数⽤于定义某个字节流应该如何缓存。它可以接受四个参数。
setvbuf()
int setvbuf(FILE* stream, char* buffer, int mode, size_t size)
第⼀个参数 是⽂件流。
stream
第⼆个参数 是缓存区的地址。
buffer
第三个参数 指定缓存的⾏为模式，它是下⾯三个宏之⼀，这些宏都定义在 。
mode stdio.h
：满缓存。当缓存为空时，才从流读⼊数据；当缓存满了，才向流写⼊数据。⼀般情况
_IOFBF
下，这是默认设置。
：⾏缓存。每次从流读⼊⼀⾏数据，或向流写⼊⼀⾏数据，即以⾏为单位读写缓存。
_IOLBF
：⽆缓存。不使⽤缓存区，直接读写设备。
_IONBF
第四个参数 指定缓存区的⼤⼩。较⼤的缓存区提供更好的性能，⽽较⼩的缓存区可以节省空间。
size
提供了⼀个宏 ，表示系统默认的缓存区⼤⼩。
stdio.h BUFSIZ
它的意义在于，使得⽤户可以在打开⼀个⽂件之前，定义⾃⼰的⽂件缓冲区，⽽不必使⽤ 函数打
fopen()
开⽂件时设定的默认缓冲区。
char buffer[N];
setvbuf(stream, buffer, _IOFBF, N);
上⾯示例设置⽂件流 的缓存区从地址 开始，⼤⼩为 ，模式为 。
stream buffer N _IOFBF
的第⼆个参数可以为空指针 NULL。这样的话， 会⾃⼰创建⼀个缓存区。
setvbuf() setvbuf()
注意， 的调⽤必须在对⽂件流执⾏任何操作之前。
setvbuf()
如果调⽤成功， 的返回值为 ，否则返回⾮零值。
setvbuf() 0
下⾯的例⼦是将缓存区调整为⾏缓存。
FILE *fp;
char lineBuf[1024];
fp = fopen("somefile.txt", "r");
setvbuf(fp, lineBuf, _IOLBF, 1024);
setbuf() #
是 的早期版本，可以视为后者的简化版本，也⽤来定义某个字节流的缓存区。
setbuf() setvbuf()
void setbuf(FILE* stream, char* buffer);
它的第⼀个参数 是⽂件流，第⼆个参数 是缓存区的地址。
stream buffer
它总是可以改写成 。
setvbuf()
char buffer[BUFSIZ];
setbuf(stream, buffer);
setvbuf(stream, buffer, _IOFBF, BUFSIZ);
上⾯示例中， 是 定义的宏，表示系统默认的缓存区⼤⼩。
BUFSIZ stdio.h