## 思考题1.  这今天的分享中，我介绍了 Kubernetes 项目的架构。你是否了解了 Docker    Swarm（SwarmKit 项目）跟 Kubernetes 在架构上和使用方法上的异同呢？2.  在 Kubernetes    之前，很多项目都没办法管理"有状态"的容器，即，不能从一台宿主机"迁移"到另一台宿主机上的容器。你是否能列举出，阻止这种"迁移"的原因都有哪些呢？感谢你的收听，欢迎你给我留言，也欢迎分享给更多的朋友一起阅读。![](Images/e870b7df0db49509e735e6becd4a9a9a.png){savepage-src="https://static001.geekbang.org/resource/image/47/55/47a6f3bf6b92d58512d5a2ed0a556f55.jpg"}
# 10 \| Kubernetes一键部署利器：kubeadm你好，我是张磊。今天我和你分享的主题是：Kubernetes 一键部署利器之kubeadm。通过前面几篇文章的内容，我其实阐述了这样一个思想：**要真正发挥容器技术的实力，你就不能仅仅局限于对Linux 容器本身的钻研和使用。**这些知识更适合作为你的技术储备，以便在需要的时候可以帮你更快的定位问题，并解决问题。而更深入的学习容器技术的关键在于，**如何使用这些技术来"容器化"你的应用。**比如，我们的应用既可能是 Java Web 和 MySQL 这样的组合，也可能是Cassandra 这样的分布式系统。而要使用容器把后者运行起来，你单单通过Docker 把一个 Cassandra 镜像跑起来是没用的。要把 Cassandra 应用容器化的关键，在于如何处理好这些 Cassandra容器之间的编排关系。比如，哪些 Cassandra容器是主，哪些是从？主从容器如何区分？它们之间又如何进行自动发现和通信？Cassandra容器的持久化数据又如何保持，等等。这也是为什么我们要反复强调 Kubernetes项目的主要原因：这个项目体现出来的容器化"表达能力"，具有独有的先进性和完备性。这就使得它不仅能运行Java Web 与 MySQL 这样的常规组合，还能够处理 Cassandra容器集群等复杂编排问题。所以，对这种编排能力的剖析、解读和最佳实践，将是本专栏最重要的一部分内容。``{=html}不过，万事开头难。作为一个典型的分布式项目，Kubernetes的部署一直以来都是挡在初学者前面的一只"拦路虎"。尤其是在 Kubernetes项目发布初期，它的部署完全要依靠一堆由社区维护的脚本。其实，Kubernetes 作为一个 Golang 项目，已经免去了很多类似于 Python项目要安装语言级别依赖的麻烦。但是，除了将各个组件编译成二进制文件外，用户还要负责为这些二进制文件编写对应的配置文件、配置自启动脚本，以及为kube-apiserver 配置授权文件等等诸多运维工作。目前，各大云厂商最常用的部署的方法，是使用 SaltStack、Ansible等运维工具自动化地执行这些步骤。但即使这样，这个部署过程依然非常繁琐。因为，SaltStack这类专业运维工具本身的学习成本，就可能比 Kubernetes 项目还要高。**难道 Kubernetes 项目就没有简单的部署方法了吗？**这个问题，在 Kubernetes 社区里一直没有得到足够重视。直到 2017年，在志愿者的推动下，社区才终于发起了一个独立的部署工具，名叫：[kubeadm](https://github.com/kubernetes/kubeadm)。这个项目的目的，就是要让用户能够通过这样两条指令完成一个 Kubernetes集群的部署：    
# 创建一个 Master 节点$ kubeadm init 
# 将一个 Node 节点加入到当前集群中$ kubeadm join 是不是非常方便呢？不过，你可能也会有所顾虑：**Kubernetes的功能那么多，这样一键部署出来的集群，能用于生产环境吗？**为了回答这个问题，在今天这篇文章，我就先和你介绍一下 kubeadm的工作原理吧。