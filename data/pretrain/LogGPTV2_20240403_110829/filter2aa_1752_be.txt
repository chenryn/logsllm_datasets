### 10.9.2 间歇定时器

在 4.2BSD 和 POSIX 中，`alarm()` 函数可以设置一个简单的定时器。然而，`setitimer()` 提供了更强大的功能。

#### 包含头文件
```c
#include <sys/time.h>
```

#### 设置和获取定时器
```c
int getitimer(int which, struct itimerval *value);
int setitimer(int which, const struct itimerval *value, struct itimerval *ovalue);
```

`setitimer()` 和 `getitimer()` 函数允许进程设置和获取不同类型的定时器。这些定时器可以在不同的时间间隔内发送信号给进程：

- **ITIMER_REAL**：基于真实时间的定时器。当计时结束时，会向进程发送 `SIGALRM` 信号。
- **ITIMER_VIRTUAL**：基于进程用户态时间的定时器。当计时结束时，会向进程发送 `SIGVTALRM` 信号。
- **ITIMER_PROF**：基于进程用户态时间和系统调用时间的定时器。当计时结束时，会向进程发送 `SIGPROF` 信号。

`itimerval` 结构体用于定义定时器的时间间隔和当前值：
```c
struct itimerval {
    struct timeval it_interval;  // 下一次的时间间隔
    struct timeval it_value;     // 当前值
};
```

`timeval` 结构体用于表示时间：
```c
struct timeval {
    long tv_sec;     // 秒
    long tv_usec;    // 微秒
};
```

当 `setitimer()` 设置 `it_value` 为非零值时，定时器会在 `it_value` 时间后触发，并每隔 `it_interval` 时间再次触发。如果 `it_value` 为零且 `it_interval` 非零，则定时器会在 `it_interval` 时间后首次触发。如果 `it_value` 和 `it_interval` 都为零，则定时器会被禁用。

`getitimer()` 可以获取当前定时器的状态。如果 `ovalue` 不为 `NULL`，则会将当前定时器状态存储在 `ovalue` 中。

#### 示例代码
```c
void alarm_handler(int signo) {
    printf("Timer hit!\n");
}

void foo(void) {
    struct itimerval delay;
    int ret;

    signal(SIGALRM, alarm_handler);

    delay.it_value.tv_sec = 5;
    delay.it_value.tv_usec = 0;
    delay.it_interval.tv_sec = 1;
    delay.it_interval.tv_usec = 0;

    ret = setitimer(ITIMER_REAL, &delay, NULL);
    if (ret) {
        perror("setitimer");
        return;
    }

    pause();
}
```

### 10.9.3 高级定时器

POSIX 提供了更高级的定时器功能，包括创建、设置和删除定时器。

#### 创建定时器
```c
#include <time.h>
#include <signal.h>

int timer_create(clockid_t clockid, struct sigevent *evp, timer_t *timerid);
```

`timer_create()` 函数用于创建一个新的定时器。`clockid` 参数指定了定时器使用的时钟类型，`evp` 参数指定了定时器到期时的行为，`timerid` 用于存储新创建的定时器 ID。

`sigevent` 结构体用于定义定时器到期时的行为：
```c
struct sigevent {
    union sigval sigev_value;
    int sigev_signo;
    int sigev_notify;
    void (*sigev_notify_function)(union sigval);
    pthread_attr_t *sigev_notify_attributes;
};

union sigval {
    int sival_int;
    void *sival_ptr;
};
```

`sigev_notify` 字段可以设置为以下值之一：
- **SIGEV_NONE**：无操作。
- **SIGEV_SIGNAL**：发送指定的信号 `sigev_signo`。
- **SIGEV_THREAD**：创建一个新的线程来处理定时器到期事件。

#### 示例代码
```c
struct sigevent evp;
timer_t timer;
int ret;

evp.sigev_value.sival_ptr = &timer;
evp.sigev_notify = SIGEV_SIGNAL;
evp.sigev_signo = SIGUSR1;

ret = timer_create(CLOCK_REALTIME, &evp, &timer);
if (ret) {
    perror("timer_create");
}
```

### 10.9.4 设置定时器

`timer_settime()` 函数用于设置定时器的时间。

#### 包含头文件
```c
#include <time.h>
```

#### 设置定时器
```c
int timer_settime(timer_t timerid, int flags, const struct itimerspec *value, struct itimerspec *ovalue);
```

`itimerspec` 结构体用于定义定时器的时间间隔和当前值：
```c
struct itimerspec {
    struct timespec it_interval;  // 下一次的时间间隔
    struct timespec it_value;     // 当前值
};

struct timespec {
    time_t tv_sec;    // 秒
    long tv_nsec;     // 纳秒
};
```

`flags` 参数可以设置为 `TIMER_ABSTIME`，表示 `value` 中的时间是绝对时间而不是相对时间。

#### 示例代码
```c
struct itimerspec ts;
int ret;

ts.it_interval.tv_sec = 1;
ts.it_interval.tv_nsec = 0;
ts.it_value.tv_sec = 1;
ts.it_value.tv_nsec = 0;

ret = timer_settime(timer, 0, &ts, NULL);
if (ret) {
    perror("timer_settime");
}
```

### 10.9.4.1 获取定时器的过期时间

`timer_gettime()` 函数用于获取定时器的当前设置。

#### 获取定时器时间
```c
int timer_gettime(timer_t timerid, struct itimerspec *value);
```

#### 示例代码
```c
struct itimerspec ts;
int ret;

ret = timer_gettime(timer, &ts);
if (ret) {
    perror("timer_gettime");
} else {
    printf("current sec=%ld nsec=%ld\n", ts.it_value.tv_sec, ts.it_value.tv_nsec);
    printf("next sec=%ld nsec=%ld\n", ts.it_interval.tv_sec, ts.it_interval.tv_nsec);
}
```

### 10.9.4.2 获取定时器的超时值

`timer_getoverrun()` 函数用于获取定时器的超时次数。

#### 获取超时次数
```c
int timer_getoverrun(timer_t timerid);
```

#### 示例代码
```c
int ret;

ret = timer_getoverrun(timer);
if (ret == -1) {
    perror("timer_getoverrun");
} else if (ret == 0) {
    printf("no overrun\n");
} else {
    printf("%d overrun(s)\n", ret);
}
```

### 10.9.4.3 删除定时器

`timer_delete()` 函数用于删除定时器。

#### 删除定时器
```c
int timer_delete(timer_t timerid);
```

#### 示例代码
```c
int ret;

ret = timer_delete(timer);
if (ret) {
    perror("timer_delete");
}
```

### 附录 A: GCC 对 C 的扩展

GCC（GNU Compiler Collection）提供了许多 C 语言的扩展功能，这些扩展功能增强了 C 语言的功能，并提供了更多的编程灵活性。

#### GNU C

GCC 的 C 语言实现称为 GNU C。除了标准 C 语言的功能外，GNU C 还提供了一些扩展功能，如内联函数、纯函数、常量函数等。

#### 内联函数
内联函数可以减少函数调用的开销，提高程序性能。

```c
static inline int foo(void) { /* ... */ }
```

#### 禁用内联
可以使用 `__attribute__((noinline))` 属性来禁止内联。

```c
__attribute__((noinline)) int foo(void) { /* ... */ }
```

#### 纯函数
纯函数是指其返回值仅依赖于输入参数，不会修改任何全局状态。

```c
__attribute__((pure)) int foo(int val) { /* ... */ }
```

#### 常量函数
常量函数是指其返回值仅依赖于输入参数，并且在编译时就可以确定。

```c
__attribute__((const)) int foo(void) { /* ... */ }
```

#### 不返回的函数
不返回的函数通常用于终止程序的执行。

```c
__attribute__((noreturn)) void foo(int val) { /* ... */ }
```

#### 分配内存的函数
标记分配内存的函数，以便进行更好的优化。

```c
__attribute__((malloc)) void *get_page(void) {
    int page_size;
    page_size = getpagesize();
    if (page_size <= 0)
        return NULL;
    return malloc(page_size);
}
```

#### 强制调用函数检查返回值
强制调用函数时检查返回值，避免潜在的错误。

```c
__attribute__((warn_unused_result)) int foo(void) { /* ... */ }
```

#### 将函数标记为 deprecated
标记函数为废弃，提醒开发者该函数不再推荐使用。

```c
__attribute__((deprecated)) int foo(void) { /* ... */ }
```

通过这些扩展功能，GCC 提供了更强大和灵活的 C 语言编程能力。