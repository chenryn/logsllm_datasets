# 八、Docker 组合
在前一章中，我们学习了很多关于容器网络如何在单个 Docker 主机上工作的知识。我们引入了**容器网络模型** ( **CNM** )，它构成了 Docker 容器之间所有网络的基础，然后我们深入研究了 CNM 的不同实现，特别是桥接网络。
本章介绍了由多个服务组成的应用的概念，每个服务都在一个容器中运行，以及 Docker Compose 如何允许我们使用声明性方法轻松构建、运行和扩展这样的应用。
本章涵盖以下主题:
*   揭秘陈述句和祈使句
*   运行多服务应用
*   扩展服务
*   构建和推送应用
完成本章后，读者将能够执行以下操作:
*   用几个简短的句子解释定义和运行应用的命令式和声明式方法之间的主要区别
*   用他们自己的话描述容器和 Docker Compose 服务之间的区别
*   为一个简单的多服务应用编写一个 Docker 撰写 YAML 文件
*   使用 Docker Compose 构建、推送、部署和拆除一个简单的多服务应用
*   使用 Docker Compose 可上下扩展应用服务
# 技术要求
本章随附的代码可在[https://github . com/原教旨主义 docker/labs/tree/master/ch08](https://github.com/fundamentalsofdocker/labs/tree/master/ch08)上找到。
# 揭秘陈述句和祈使句
Docker Compose 是 Docker 提供的工具，主要用于需要运行和编排在单个 Docker 主机上运行的容器的地方。这包括但不限于开发、**持续集成** ( **CI** )、自动化测试和人工 QA。
Docker Compose 使用 YAML 格式的文件作为输入。默认情况下，Docker Compose 期望这些文件被称为`docker-compose.yml`，但其他名称也是可能的。据说`docker-compose.yml`的内容是描述和运行可能由多个容器组成的容器化应用的*声明性*方式。
那么，*陈述句的意思是什么？*
首先，*陈述句*是*祈使句*的反义词。嗯，那没多大帮助。现在我已经介绍了另一个定义，我需要解释这两个定义:
*   **命令式:**这是一种我们可以通过指定系统必须遵循的确切程序来解决问题的方法。
如果我告诉像 Docker 守护程序这样的系统如何运行一个应用，那么这意味着我必须一步一步地描述系统必须做什么，以及如果发生一些意外情况它必须如何反应。我的指示必须非常明确和精确。我需要涵盖所有边缘病例以及如何治疗它们。
*   **声明式:**这是一种我们可以解决问题的方式，而不需要程序员指定要遵循的确切过程。
声明性方法意味着我告诉 Docker 引擎我对一个应用的期望状态是什么，它必须自己弄清楚如何实现这个期望状态，以及如果系统偏离它，如何协调它。
Docker 明确推荐在处理容器化应用时使用声明式方法。因此，Docker 编写工具使用了这种方法。
# 运行多服务应用
在大多数情况下，应用不仅仅由一个整体块组成，而是由几个协同工作的应用服务组成。使用 Docker 容器时，每个应用服务都在自己的容器中运行。当我们想要运行这样的多服务应用时，我们当然可以用众所周知的`docker container run`命令启动所有参与的容器。但这充其量是低效的。使用 Docker Compose 工具，我们可以在使用 YAML 格式的文件中以声明的方式定义应用。
我们来看看一个简单的`docker-compose.yml`文件的内容:
```
version: "3.5"
services:
  web:
    image: fundamentalsofdocker/ch08-web:1.0
    ports:
      - 3000:3000
  db:
    image: fundamentalsofdocker/ch08-db:1.0
    volumes:
      - pets-data:/var/lib/postgresql/data
volumes:
  pets-data:
```
文件中的行解释如下:
*   `version`:在这一行，我们指定想要使用的 Docker Compose 格式的版本。在撰写本文时，这是 3.5 版本。
*   `services`:在本节中，我们在`services`块中指定组成我们的应用的服务。在我们的示例中，我们有两个应用服务，我们称之为`web`和`db`:
    *   `web`:`web`服务正在使用来自 Docker Hub 的映像`fundamentalsofdocker/ch08-web:1.0`，并将容器端口`3000`发布到主机端口，也就是`3000`。
    *   `db`:另一方面，`db`服务使用的是图片`fundamentalsofdocker/ch08-db:1.0`，这是一个定制的 PostgreSQL 数据库。我们正在将名为`pets-data`的卷装入`db`服务的容器中。
*   `volumes`:任何服务使用的卷都必须在此部分声明。在我们的示例中，这是文件的最后一部分。应用第一次运行时，Docker 将创建一个名为`pets-data`的卷，然后在后续运行中，如果该卷仍然存在，它将被重用。当应用由于某种原因崩溃并不得不重新启动时，这可能很重要。然后，以前的数据仍然存在，并准备好由重新启动的数据库服务使用。
导航到`labs`文件夹的子文件夹`ch08`，并使用 Docker Compose 启动应用:
```
$ docker-compose up
```
如果我们输入前面的命令，那么该工具将假设在当前目录中必须有一个名为`docker-compose.yml`的文件，并且它将使用该文件运行。在我们的例子中，情况确实如此，应用将启动。我们应该看到如下输出:
![](img/ed4afa2f-d2b4-413c-8ff1-428e364be2d6.png)
Running the sample application, part 1
![](img/c44206c3-eda0-40f8-b391-fe87b4f34957.png)
Running the sample application, part 2
前面的输出解释如下:
*   在输出的第一部分，我们可以看到 Docker Compose 是如何拉出构成我们的应用的两个映像的。接下来是网络`ch08_default`和卷`ch08_pets-data`的创建，然后是两个容器`ch08_web_1`和`ch08_db_1`，每个服务一个容器`web`和`db`。所有名称自动以父目录的名称作为 Docker Compose 的前缀，在这种情况下称为`ch08`。
*   之后，我们看到两个容器生产的原木。输出的每一行都方便地以服务的名称作为前缀，并且每个服务的输出都有不同的颜色。这里，最大的份额是由数据库产生的，只有一行来自`web`服务。
我们现在可以打开浏览器标签并导航到`localhost:3000/pet`。我们应该会收到一张漂亮的猫图片和一些关于它来自的容器的附加信息，如下面的截图所示:
![](img/31c21a93-8458-49bd-b26f-e73e07cabd49.png)
The sample application in the browser
刷新浏览器几次，查看其他卡特彼勒映像。应用从一组 12 个映像中随机选择当前映像，这些映像的网址存储在数据库中。
由于应用以交互模式运行，因此我们运行 Docker Compose 的终端被阻止，我们可以通过按 *Ctrl* + *C* 取消应用。如果我们这样做，我们将看到以下内容:
```
^CGracefully stopping... (press Ctrl+C again to force)
Stopping ch08_web_1 ... done
Stopping ch08_db_1 ... done
```
我们会注意到数据库服务会立即停止，而 web 服务大约需要 10 秒钟。这样做的原因是数据库服务监听并响应 Docker 发送的`SIGTERM`信号，而 web 服务没有，因此 Docker 在 10 秒后将其杀死。
如果我们再次运行该应用，输出将会短得多:
![](img/95c40994-a69a-4269-bbfa-c55895b8edec.png)
Output of docker-compose up
这一次，我们不必下载映像，数据库也不必从头开始初始化，但它只是重用了上一次运行时卷`pets-data`中已经存在的数据。
我们也可以在后台运行应用。所有容器都将作为守护程序运行。为此，我们只需要使用`-d`参数，如下代码所示:
```
$ docker-compose up -d
```
Docker Compose 为我们提供了比`up`更多的命令。我们可以使用它来列出应用中的所有服务:
![](img/28a5c0a6-9c72-4dc0-b339-6319e31de769.png)
Output of docker-compose ps
这个命令类似于`docker container ls`，唯一的区别是它只列出了属于应用的容器。
要停止并清理应用，我们使用`docker-compose down`命令:
```
$ docker-compose down
Stopping ch08_web_1 ... done
Stopping ch08_db_1 ... done
Removing ch08_web_1 ... done
Removing ch08_db_1 ... done
Removing network ch08_default
```