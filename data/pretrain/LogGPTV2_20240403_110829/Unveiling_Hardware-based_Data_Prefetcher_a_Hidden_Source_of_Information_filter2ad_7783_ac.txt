▷ f is an irreducible polynomial
implementation. Specifically, rather than using branch instruc-
tions, Const_Swap operation is implemented to conditionally swap
two values before and after the addition and doubling operations.
Const_Swap(X , Y , β) performs swapping between X and Y when
β = 1. Algorithm 2 shows the branchless version of the Mont-
gomery ladder algorithm.
Listing 1: Squaring lookup table in bn_gf2m.c (BN_ULONG
type is 64 bits in length for x86-64)
s t a t i c const BN_ULONG SQR_tb [ 1 6 ] = {
0 , 1 , 4 , 5 , 16 , 17 , 20 , 21 ,
64 , 65 , 68 , 69 , 80 , 81 , 84 , 85
} ;
Squaring operation in GF(2m). OpenSSL also implements
2.3.2
binary field arithmetic including a squaring operation to support the
elliptic curves that are defined over binary fields. The elements of a
binary field GF(2m) are the binary polynomials, whose coefficients
are in GF(2) = {0, 1}, of degree at most m-1:
GF(2m) = {am−1xm−1 + · · · + a2x
2 + a1x + a0 : ai ∈ GF(2)}.
Addition of field elements involves the usual addition of polynomi-
als, while multiplication is performed modulo the reduction poly-
nomial f (x). The squaring operation can be performed much faster
by using a lookup table rather than multiplying two arbitrary poly-
nomials [2].
OpenSSL has a lookup table-based implementation of squar-
ing operation in GF(2m), which is presented in Algorithm 5 (i.e.,
GF2m_Sqare algorithm). The lookup table, denoted by SQR_tb,
is represented by an array of 64-bit words as shown in Listing
1. Let (Xw−1, Xw−1, ..., X0) be a sequence of words in the binary
representation of a field element X ∈ GF(2m). Given an input X,
the GF2m_Sqare algorithm repeatedly transforms each word Xi
(0 ≤ i ≤ w − 1) into two consecutive words Y2i and Y2i +1 through
the loop. Specifically, in each iteration of the loop the word Xi is
considered as a sequence of 16 nibbles (x15, ..., x0). Each nibble xj
(0 ≤ j ≤ 15) is converted into its expanded word-wise counterpart
Wj through a lookup to SQR_tb and a bit-wise left-shift operation.
When accessing SQR_tb, the nibble xj is used as an index to the
table. The intermediate result Y = (Y2w−1, Y2w−2, ..., Y1, Y0) is then
reduced by a reduction polynomial f , which results in the output
of the algorithm.
3 SEARCHING A NEW SIDE-CHANNEL
In this section, we propose a new search method for vulnerable lo-
cations in cryptographic libraries, which will be used to deliver our
microarchitectural attack. Program analysis-based approaches [10,
11, 51] that analyze source codes or executable binary have been
vividly proposed to detect the location. However, this approach only
reveals vulnerable points directly related to the logical execution
of the program. This makes one overlook certain vulnerable loca-
tions affected by indirect cache activities from the hidden processor
components such as hardware prefetchers.
However, our approach captures all the vulnerable locations by
exhaustive inspection of all memory lines belonging to the targeted
library. Specifically, with at least two different inputs (i.e., secret),
we sample cache access traces for every line during the execution
of the cryptographic operation. Any memory location where the
relevant cache status is affected by the input will show significant
difference in their cache traces. The difference in the traces is a
strong indication of a cache side-channel.
In this section, we present our side-channel seeking method
in detail with the case of the scalar point multiplication in the
OpenSSL library. We then present our findings on the effects of
hardware prefetching from the experimental results. Note that our
side-channel seeking method is constructed as a generic and auto-
mated tool; therefore, it can be applied to any kind of cryptographic
library besides OpenSSL and automate the finding procedures.
3.1 Method
The proposed method for searching a new side-channel proceeds
through the following phases.
Phase 1: Collecting relevant memory lines. In this phase, we
first build an address list of all the memory lines that belong to the
main segments (i.e., .text and .data) of the targeted cryptographic
library. In Linux, a library is constructed according to Executable
and Linkable Format (ELF), a common standard file format of ex-
ecutable binaries. Information about the runtime memory layout,
such as the base addresses of segments and their sizes, is included
in a program header of the ELF file. Using this information, the
address list can be constructed with ease by iteratively increasing
Session 2A: Side Channel 1 CCS’18, October 15-19, 2018, Toronto, ON, Canada135the base address of the text and data segments by line size (e.g., 64
bytes) up to the size of each segment.
After that, the list is filtered so that it contains only relevant
memory lines, which refers to a set of lines that have cache activity
during the execution of the cryptographic operation of interest.
We use the Flush+Reload technique (Section 2.1) to identify the
relevant memory lines. Specifically, every memory line in the list
is flushed from a cache before the execution of the cryptographic
operation. When the execution is completed, we check whether
each line has been loaded onto the cache. If so, it is marked as a
relevant memory line and put into a result set.
In our experiment for OpenSSL 1.1.0g, we choose the EC_POINT_mul
function from the library as the target operation. This function takes
a scalar k and an elliptic curve point P as input, and then computes
kP, for which a function of the Montgomery ladder multiplication
is internally invoked.
We used the sect571r1 elliptic curve for performing the scalar
point multiplication (i.e., EC_POINT_mul function) in the experi-
ment. As a result, we collected 261 relevant memory lines in total,
among which 218 lines belong to the text segment and 43 lines
belong to the data segment.
Phase 2: Tracing cache activities. For every relevant memory
line collected in the previous phase, we now get the runtime traces
of cache activities while the targeted function is running. Let us
denote the set of relevant memory lines by L = {l1, ..., lλ}, where λ
is the number of the memory lines and each li ∈ L is an address of
the line. Each status of the cache line (i.e., a cache miss or hit) cor-
responding to li is repeatedly measured by using the Flush+Reload
technique at every fixed slot interval during the execution of the
function.
Since our final goal is to find out which relevant memory lines
have secret-dependent cache traces, we need at least two different
cache traces, each of which is obtained with a different input (i.e., a
scalar k). In fact, only two randomly chosen inputs k1 and k2 are
sufficient to identify the secret-dependent traces. Let us denote a
runtime cache trace for line li with an input kj by a vector Si,j =
(s1, ..., sτ ), where τ is the length of the trace (τ is determined by
both the elapsed time of the execution of the targeted function and a
slot length of the Flush+Reload technique). Each st in Si,j indicates
the cache status at time t. Since there exists non-negligible cache
noise in practice due to a diversity of unexpected system activities,
the trace should be obtained by averaging from sufficient number
of measurements to reduce the noise. Thus, to be more precise, st
means a cache hit ratio, which is the count of the observed cache
hits divided by the total number of measurements, at time t.
When conducting this phase, we use a scalar k of 60 bits in
length (i.e., |k| = 60). The bit length of our choice is enough to
produce good secret-dependent traces while incurring less com-
putational burden in the next phase. With the selected curve, the
EC_POINT_mul function on an arbitrary scalar of 60 bits in length
takes around 490,000 cycles on average in the experimental environ-
ment with Intel Xeon E5-2620v4 processor. Based on the measured
elapsed time, we pick a slot length of 7,000 cycles, which gives
enough temporal resolution for probing individual operations per
bit of the scalar. The length of the slot in turn determines the length
of the single trace to be τ = 70.
Figure 1: Memory layout of SQR_tb in OpenSSL 1.1.0g
.
(N)
i,j
(1)
i,j , ..., S
In order to proceed to the next phase, we need to collect a suffi-
cient number of samples for each trace Si,j. By repeating the collec-
tion of the trace multiple times (say N), we can produce multiple
samples for a trace Si,j, denoted by S
Phase 3: Finding secret-dependent traces. In the final phase,
we try to find out which relevant memory lines in L have runtime
cache traces sensitive to an input. The basic idea underlying this
phase stems from the reasoning that if a cache trace at line li has
dependency on an input, then the samples obtained from one input
k1, i.e., S
, would be more similar to each other than those
obtained from a different input k2, i.e., S
(1)
i,1, ..., S
The main approach is to perform cluster analysis on the set of
all trace samples for the memory line. If the set can be clustered
into two distinct groups, then it is inferred that the correspond-
ing memory line has a secret-dependent cache trace. For this, we
use K-means clustering algorithm [1, 40]. This algorithm aims to
partition a set of unlabeled vectors into K clusters, in which each
vector belongs to one of the clusters with the nearest Euclidean
distance. Specifically, for each line, we invoke the K-means algo-
rithm (with a parameter K = 2) by providing a set of (unlabeled)
(cid:111) as the input. Given the input,
vectors(cid:110)
(1)
i,2, ..., S
(N)
i,1
(N)
i,2
.
(1)
i,1, ..., S
(N)
i,1 , S
(1)
i,2, ..., S
(N)
i,2
S
this algorithm attempts to find two cluster centroids that best parti-
tion those vectors, and labels each vector based on the partition as
one of the names of those clusters, C1 or C2. Upon completion, it
returns a list of labels as output. We evaluate the clustering result
for traces of the line li by the score σi, which is defined as follows:
σi =
# of vectors belong to Si,α among those labeled as Cβ
# of vectors labeled as Cβ
,
where Cβ ∈{1,2} refers to the largest cluster of C1 and C2, and Si,α
refers to the kind of trace vectors obtained from an input kα ∈{1,2},
which comprises the majority in Cβ . For instance, a line li that has
a secret-dependent trace would have the highest score σi = 1 in
the ideal case, which means that all the vectors labeled as Cβ by
the K-means algorithm actually belong to the same trace Si,α .
In the experiment regarding the EC_POINT_mul function in
OpenSSL 1.1.0g, we conducted the clustering analysis for all the
relevant memory lines in L with N = 100 trace samples for each
scalar input. As a result, we discovered that only 2 lines among
261 relevant memory lines have significant scores of larger than
0.9 on average. This strongly indicates that during the execution of
the function, these two memory lines experienced cache activities
correlated to the value of scalar k.
Line#1Line#20x1ec0000x1ec0400x1ec0600x1ec0800x1ec0c00x1ec100SQR_tb0x1ec0e0Session 2A: Side Channel 1 CCS’18, October 15-19, 2018, Toronto, ON, Canada136Table 2: Memory lines showing secret-dependent traces
OpenSSL 1.1.0g OpenSSL 1.0.1e
ec_GF2m_montgomery
_point_multiply
(in ec2_mult.c)
SQR_tb
(in bn_gf2m.c)
-
0x1ec000,
0x1ec100
†0xbe440,
‡0xbe4c0
0x16c680,
0x16c780
†: ec2_mult.c:275-276, ‡: ec2_mult.c:281 (line numbers in
source code)
Comparison to the previous work. Our searching method is
somewhat similar to the existing trace-based approach, i.e., Cache
Template Attacks [24]. That approach utilizes a profiled matrix,
where each element represents cache hit ratio for a memory ad-
dress and an event (i.e., input). The side-channel is detected if there
is a variance in the ratio on different inputs. The ratio is defined as
either a simple value or a time-dependent function. However, spe-
cific attacks in the latter case were not presented in detail. Our work
differs from the previous work in that we realize the idea of using
the ratio with time-dependency for searching side-channel. In the
proposed method, the cache hit ratio is represented as a time series,
i.e., a vector Si,j = (s1, s2, . . . , sτ ) for a line li and an input kj. In fact,
the time series contains more information than a simple value (i.e.,
scalar). For instance, a line li with vectors Si,1 = (0.5, 0, 0, 0) and
Si,2 = (0, 0, 0, 0.5) on different inputs k1 and k2 clearly indicates
side-channel, while corresponding scalars would be indistinguish-
able. Contrary to the previous work, we also present a detailed
method to identify the variance among vectors in general cases
by employing K-means algorithm. Therefore, our work specifies a
more fine-grained method to detect the side-channel.
3.2 Observations
Table 2 presents the searching results for the scalar point multi-
plication in the OpenSSL 1.1.0g library, described in the previous
section. In order to get some insight into the comparison, we also
show the result from OpenSSL 1.0.1e with the same experimental
setting. It is the previous version of the targeted OpenSSL library
with the vulnerable Montgomery ladder implementation for cache
side-channel attacks [56].
In OpenSSL 1.1.0g, two identified memory lines are addressed at
0x1ec000 and 0x1ec100, both of which are close to the location of
SQR_tb (Listing 1), a lookup table used for the GF2m_Sqare oper-
ation (Algorithm 5). Fig. 1 depicts the memory layout of SQR_tb
along with those two memory lines (denoted by Line#1 and #2 in
the figure). SQR_tb is 128 bytes in length (See Listing 1) and placed
across three memory lines at addresses ranging from 0x1ec040 to
0x1ec0e0. We can observe that Line#1 and #2 are adjacent to both
sides of the lookup table.
On the other hand, a total of four memory lines have been iden-
tified to have secret-dependent traces in OpenSSL 1.0.1e. Among
them, two memory lines are addressed at 0x16c680 and 0x16c780,
both of which are placed adjacently on both sides of SQR_tb simi-
lar to the case of OpenSSL 1.1.0g. The other two memory lines are
newly identified at 0xbe440 and 0xbe4c0. Binary analysis on the
library reveals that a portion of execution codes of the Montgomery
Figure 2: Number of identified lines (σ > 0.9) according to
the value of MSR 0x1a4
ladder implementation (Algorithm 1) is placed at those memory
locations. More specifically, those memory lines are located at both
sides of the code blocks in a conditional branch (i.e., Lines 6 and 8
in Algorithm 1), which is dependent on the bit of a scalar k. One of
the memory lines, at 0xbe440, is taken when the bit is set to 1 while
the other, at 0xbe4c0, is taken in the opposite case. This result is the
same as the work of Yarom et al., [56] which disclosed a cache-side
channel attack on this implementation.
Unlike the case of Montgomery ladder implementation, the lines
near the SQR_tb table, at 0x1ec000 and 0x1ec100 in the version
1.1.0g and at 0x16c680 and 0x16c780 in the version 1.0.1e, contain
neither machine code nor data related to the conduction of the op-