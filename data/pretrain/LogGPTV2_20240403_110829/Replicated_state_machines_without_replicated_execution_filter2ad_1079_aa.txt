title:Replicated state machines without replicated execution
author:Jonathan Lee and
Kirill Nikitin and
Srinath T. V. Setty
2020 IEEE Symposium on Security and Privacy
Replicated state machines without replicated execution
Jonathan Lee
Kirill Nikitin(cid:2)
Srinath Setty
Microsoft Research
(cid:2)EPFL
Abstract
This paper introduces a new approach to reduce end-to-end
costs in large-scale replicated systems built under a Byzantine
fault model. Speciﬁcally, our approach transforms a given
replicated state machine (RSM) to another RSM where nodes
incur lower costs by delegating state machine execution: an
untrusted prover produces succinct cryptographic proofs of
correct state transitions along with state changes, which nodes
in the transformed RSM verify and apply respectively.
S with x as input (using π)—without reexecuting the state
transitions. Furthermore, the cost of verifying such a proof is
less than reexecuting the corresponding state transitions and
the size of the proof is far less than the size of the original
batch of transactions. Thus, nodes (in an RSM) that replicate
a state machine S can delegate S to an untrusted prover and
then replicate the veriﬁer at each node to verify the prover’s
proofs. Naturally, if the end-to-end resource costs of the trans-
formed RSM (CPU, storage, network, etc.) is cheaper than
the original RSM, veriﬁable delegation leads to lower costs.
In theory, the above picture is straightforward and offers
a principled solution to reduce end-to-end costs of a repli-
cated system. However, in practice, the above approach is
completely impractical. Speciﬁcally, even with state-of-the-
art systems for veriﬁable outsourcing, the veriﬁer is more
resource-efﬁcient compared to reexecution only under narrow
regimes [80, 81, 83]. Furthermore, in the context of RSMs,
the veriﬁer running at each node must have a copy of the del-
egated state machine’s state, otherwise liveness of the trans-
formed RSM hinges on the liveness of the prover (relying on
the prover for liveness introduces attack vectors for mount-
ing denial of service). Finally, the prover’s cost to produce a
proof is 104–107× higher than natively executing the corre-
sponding state transition (the overheads depends on whether
the outsourced computation is efﬁciently representable in the
computational model of the proof machinery) [73, 81].
The primary contribution of this paper is a set of techniques
to reduce the costs of veriﬁable state machines in the con-
text of RSMs and to ensure liveness without increasing the
costs of the prover. To demonstrate the beneﬁts of these tech-
niques, we build a system called Piperine. When we apply
Piperine to a popular type of state machine on Ethereum’s
blockchain, Piperine’s proofs act as compressed information
(e.g., there is no need to transmit digital signatures or the raw
transactions over the blockchain), which allows Piperine to
transparently reduce per-transaction network costs by 2.7×
and per-transaction end-to-end costs by 5.4×. Beyond cost re-
ductions, Piperine resolves an open question in the context of
replicated systems: Piperine offers the ﬁrst approach to build
RSMs with concurrent transaction processing in a permis-
sionless model. Note that prior works that achieve concurrent
transaction processing in RSMs [9, 49] require substantial
changes to the underlying consensus protocol and apply only
to a permissioned membership model.
Reducing costs. To tame costs imposed by the proof machin-
ery, Piperine leverages the following observations: (1) in our
target state machines, the primary computational bottleneck
of a state transition is authenticating a transaction by verify-
Introduction
To realize our approach, we build Piperine, a system that
makes the proof machinery proﬁtable in the context of RSMs.
Speciﬁcally, Piperine reduces the costs of both proving and
verifying the correctness of state machine execution while
retaining liveness—a distinctive requirement in the context of
RSMs. Our experimental evaluation demonstrates that, for a
payment service, employing Piperine is more proﬁtable than
naive reexecution of transactions as long as there are > 104
nodes. When we apply Piperine to ERC-20 transactions in
Ethereum (a real-world RSM with up to 105 nodes), it reduces
per-transaction costs by 5.4× and network costs by 2.7×.
1
A modern example of a large-scale replicated system is a
blockchain network [64, 86], which employs replication to
enable mutually-distrusting entities to transact without rely-
ing on trusted authorities. Speciﬁcally, blockchains instantiate
replicated state machines (RSMs) [71] under a Byzantine
fault model in an open, permissionless network where each
node executes and validates every transaction. Unfortunately,
the most popular blockchains achieve a throughput of only
a handful of transactions per second. This has motivated re-
search to improve throughput and to reduce costs, for example,
by changing the underlying consensus protocol used to real-
ize RSMs [41, 46, 50]. These proposals, however, introduce
additional assumptions for safety and/or liveness (§7).
We consider a different approach, one that applies to any
existing replicated state machine in a Byzantine fault model
(including blockchains) without any changes to the underlying
consensus protocol. Naturally, it does not introduce any strong
assumptions for safety or liveness. In fact, this approach is
complementary to aforementioned advances [41, 46, 50] and
can be used in conjunction with those proposals. Our ap-
proach is based on work in the area of proof-based veriﬁable
computation (see [83] for a survey), which has developed a
powerful primitive called veriﬁable state machines [24, 73]:
for a state machine S and a batch of transactions x, an un-
trusted prover can produce outputs y and a short proof π
such that a veriﬁer can check if y is the correct output of
© 2020, Srinath Setty. Under license to IEEE.
DOI 10.1109/SP40000.2020.00068
119
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 09:37:25 UTC from IEEE Xplore.  Restrictions apply. 
ing a digital signature; and (2) in the context of blockchains
(and RSMs that favor throughput over latency), there is signif-
icant opportunity for processing transactions in batches. The
ﬁrst observation enables Piperine to substantially drive down
end-to-end costs of the prover by aggressively optimizing the
signature veriﬁcation operation in the proof machinery (i.e.,
verifying a signature with a smaller circuit). Our optimizations
include a careful choice of cryptographic primitives as well
as several low-level cryptographic engineering techniques
such as double-scalar multiplication, windowing, efﬁcient big
number arithmetic, etc.1 Due to the second observation, the
prover can produce a single proof for a batch of transactions,
and the veriﬁer incurs a near-constant cost to verify that proof.
To drive down the veriﬁer’s costs further, Piperine employs
techniques from delegating state [24, 35, 43]—even when not
delegating state—to replace expensive modular exponentia-
tions with inexpensive hash operations.
Achieving liveness. To achieve liveness, the veriﬁer must
efﬁciently receive and verify state changes from the prover—
without trusting the prover. In the context of blockchains,
such liveness is critical: without liveness, a malicious prover
can prevent certain (or all) transactions from being executed.
Unfortunately, with prior state-of-the-art in veriﬁable state ma-
chines, the veriﬁer’s cost to receive and verify state changes
is proportional to the size of the entire state of the prover,
making the whole approach infeasible. Piperine addresses
this with new techniques. Speciﬁcally, we observe that the
veriﬁer can verify purported state changes during an epoch (a
time period where a prover executes a batch of transactions)
as long as it retains the digest of the prover’s state both at the
beginning and the end of an epoch. The computational cost
of this process to the veriﬁer is proportional to the number of
state changes within the epoch, which is theoretically optimal.
Implementation and evaluation. We implement Piperine
atop Spice [73], inheriting an end-to-end compiler toolchain:
A programmer can express a state machine in a broad subset
of C and compile it into a prover and a veriﬁer, with the prover
designed to run on a distributed cluster. We also extend the
compiler toolchain to produce a veriﬁer in Solidity, a lan-
guage for writing state machines that run on Ethereum. Using
the toolchain, we implement a blockchain-based payment ser-
vice with a standardized interface [79]. We then evaluate this
artifact using workloads modeled after real-world traces. We
ﬁnd that Piperine reduces end-to-end costs of a transaction by
5.4× and network costs by 2.7× (§6.3). Whilst Piperine does
not directly reduce mining costs of Ethereum, Piperine exe-
cutes more transactions per block, and so effectively reduces
per-transaction mining (and associated energy) costs.
Finally, we believe this work represents the ﬁrst large-scale
application of cryptographic proof machinery, and, to the
1Such optimizations are widely used for code running on standard hardware,
but it is non-trivial to realize them in the computational model of the proof
machinery, which is clumsy from a programmability perspective.
best of our knowledge, describes the ﬁrst instance in which
veriﬁably delegating computation improves the performance
of a large-scale distributed system.
2 Piperine’s base machinery
This section describes machinery that Piperine employs: veriﬁ-
able state machines [73], a primitive that involves two entities,
a prover P and a veriﬁer V, and a state machine S. It enables
the following setup. V and P agree on a non-deterministic
state machine M = (Ψ,S0), where Ψ is a program that en-
codes state transitions and S0 is the initial state of the machine.
Both V and P are given as inputs auxiliary setup material pp
related to Ψ. The internal state of P is S, which is initialized
to S0, and the internal state of V is d, which is initialized to
H(S0), where H is a collision-resistant hash function.
• P executes a state transition using input x and non-
deterministic choices w for M to produce an output y
and an updated state:
(y,S(cid:2)) ← Ψ(x, w,S) ;
S ← S(cid:2)
(cid:2)) to V , where π is a proof, d
(cid:2) = H(S(cid:2)).
(cid:2)) that outputs
P sends (x, y, π, d
• V runs a local check using (pp, x, y, π, d, d
b ∈ {0, 1}; if b = 1, V sets d ← d
(cid:2), else it aborts.
A veriﬁable state machine is a succinct non-interactive argu-
ment of knowledge [21, 45] for the language of state machine
transitions. Informally, it offers the following guarantees un-
der a set of cryptographic hardness assumptions.
• Completeness. If y is the correct output of transitioning
M with input x, some non-deterministic choices w, and d
(cid:2)
is the correct digest of the updated state, P can produce a
(cid:2)) such that V updates its internal state to d
(cid:2).
tuple (x, y, π, d
• Knowledge soundness. If P produces a tuple (x, y, π, d
(cid:2))
that makes V update its internal state from d to d
(cid:2), then
there exists a PPT algorithm, called an extractor, that, with
oracle access to P, can output (w,S,S(cid:2)) such that (y,S(cid:2)) =
Ψ(x, w,S) ∧ H(S(cid:2)) = d
• Efﬁciency. The CPU cost of verifying π is lower than the
cost of executing M’s state transitions.
(cid:2) ∧ H(S) = d.
APIs and programming model. In Spice [73], Ψ is ex-
pressed in a broad subset of C, which includes functions,
structs, typedefs, preprocessor macros, if-else statements,
loops (with static bounds), explicit type conversions, and
standard integer and bitwise operations. For Ψ to interact
with persistent storage, Spice offers: (1) a block store with
GetBlock/PutBlock APIs; and (2) a key-value store with a
standard get/put interface and concurrency control primi-
tives (e.g., lock/unlock) and simple transactions.
The prover runs multiple instances of Ψ in different threads.
Each thread processes distinct transactions and the shared
state is stored in a logically centralized key-value store. In
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 09:37:25 UTC from IEEE Xplore.  Restrictions apply. 
120
this context, Spice [73] guarantees sequential consistency [54]
for single-object operations (where an object is a key-value
pair) and serializability [20, 66] for multi-object transactions.
Mechanics. Spice [73] and its predecessors [15, 18, 24, 35,
67, 74–76, 81, 89] proceed in two steps. First, they reduce the
task of proving the correct execution of a state machine to the
task of proving the satisﬁability of a set of equations. Second,
the prover employs a cryptographic machinery to prove the
satisﬁability of the set of equations—by producing a proof.
The latter ensures that the veriﬁer is more resource-efﬁcient
than reexecuting state transitions.
(1) Program executions to constraints. Spice’s compiler
transforms Ψ to algebraic constraints, a model of computa-
tion where a program is represented as a system of equations
and variables take values from a ﬁnite ﬁeld Fp for a large
prime p. The compiler operates line-by-line over Ψ: loops are
unrolled and then each program statement is compiled to one
(or more) equations. The compiler ensures the following prop-
erty: the set of equations is satisﬁable—there exists a solution
(a setting of values to variables) to constraints—if and only
if the output is correct. To illustrate, consider a toy computa-
tion and its equivalent constraints (uppercase letters denote
variables and lowercase letters denote concrete values):
⎫⎬
X − x = 0
Y − (X + 1) = 0
⎭
Y − y = 0
For the above constraints, if y = x + 1, {X ← x, Y ← y}
is a solution. If y (cid:5)= x + 1, then there is no solution and the
constraint set is not satisﬁable.
int incr(int x) {
int y = x + 1;
return y;
⎧⎨
⎩
(2) Proving the satisﬁability of constraints succinctly.
The prover identiﬁes a solution to the equations using input
x. Since the veriﬁer must be able to check this solution in
time sublinear in the running time of the computation, the
prover cannot simply send its solution to the veriﬁer. Instead,
Spice employs cryptographic machinery (called an argument
protocol) to encode the prover’s solution as a succinct proof
πx. This machinery is detailed at length elsewhere [15, 18,
24, 47, 67, 81, 83]. We now focus on details relevant for this
work: how does Spice encode state in constraints?
Supporting state in the constraints formalism. We begin
with Spice’s block store, which it inherits from Pantry [24].
Consider the following program that takes as input a digest
(e.g., a SHA-256 hash) and accesses the prover’s block store
using GetBlock/PutBlock APIs:
C =
}
Digest increment(Digest d) {