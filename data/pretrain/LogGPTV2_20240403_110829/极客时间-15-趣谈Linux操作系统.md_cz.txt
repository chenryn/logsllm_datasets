### Docker 容器状态

首先，我们查看了当前运行的 Docker 容器的状态。以下是一个示例输出：

```plaintext
# docker ps
CONTAINER ID        IMAGE               COMMAND                  CREATED              STATUS              PORTS                  NAMES
3dc0601189dd        testnginx:1         "/bin/sh -c 'nginx -…"   About a minute ago   Up About a minute   0.0.0.0:8081->80/tcp   boring_cohen
```

### Cgroup 文件系统

在 Linux 上，Cgroup（控制组）文件系统用于管理和限制进程组的资源使用。可以通过 `mount` 命令来查看 Cgroup 文件系统的挂载点。

```plaintext
# mount -t cgroup
cgroup on /sys/fs/cgroup/systemd type cgroup (rw,nosuid,nodev,noexec,relatime,xattr,release_agent=/usr/lib/systemd/systemd-cgroups-agent,name=systemd)
cgroup on /sys/fs/cgroup/net_cls,net_prio type cgroup (rw,nosuid,nodev,noexec,relatime,net_prio,net_cls)
cgroup on /sys/fs/cgroup/perf_event type cgroup (rw,nosuid,nodev,noexec,relatime,perf_event)
cgroup on /sys/fs/cgroup/devices type cgroup (rw,nosuid,nodev,noexec,relatime,devices)
cgroup on /sys/fs/cgroup/blkio type cgroup (rw,nosuid,nodev,noexec,relatime,blkio)
cgroup on /sys/fs/cgroup/cpu,cpuacct type cgroup (rw,nosuid,nodev,noexec,relatime,cpuacct,cpu)
cgroup on /sys/fs/cgroup/memory type cgroup (rw,nosuid,nodev,noexec,relatime,memory)
cgroup on /sys/fs/cgroup/cpuset type cgroup (rw,nosuid,nodev,noexec,relatime,cpuset)
cgroup on /sys/fs/cgroup/hugetlb type cgroup (rw,nosuid,nodev,noexec,relatime,hugetlb)
cgroup on /sys/fs/cgroup/freezer type cgroup (rw,nosuid,nodev,noexec,relatime,freezer)
cgroup on /sys/fs/cgroup/pids type cgroup (rw,nosuid,nodev,noexec,relatime,pids)
```

从上述输出中可以看出，Cgroup 文件系统通常挂载在 `/sys/fs/cgroup` 目录下，并且可以控制多种资源，如 CPU、内存、设备访问等。

### 控制 CPU 资源

Docker 可以通过 Cgroup 控制 CPU 资源，例如 `cpu-shares`、`cpus` 和 `cpuset`。这些配置文件通常位于 `/sys/fs/cgroup/cpu,cpuacct` 目录下。我们可以查看该目录下的结构：

```plaintext
drwxr-xr-x 5 root root  0 May 30 17:00 blkio
lrwxrwxrwx 1 root root 11 May 30 17:00 cpu -> cpu,cpuacct
lrwxrwxrwx 1 root root 11 May 30 17:00 cpuacct -> cpu,cpuacct
drwxr-xr-x 5 root root  0 May 30 17:00 cpu,cpuacct
drwxr-xr-x 3 root root  0 May 30 17:00 cpuset
drwxr-xr-x 5 root root  0 May 30 17:00 devices
drwxr-xr-x 3 root root  0 May 30 17:00 freezer
drwxr-xr-x 3 root root  0 May 30 17:00 hugetlb
drwxr-xr-x 5 root root  0 May 30 17:00 memory
lrwxrwxrwx 1 root root 16 May 30 17:00 net_cls -> net_cls,net_prio
drwxr-xr-x 3 root root  0 May 30 17:00 net_cls,net_prio
lrwxrwxrwx 1 root root 16 May 30 17:00 net_prio -> net_cls,net_prio
drwxr-xr-x 3 root root  0 May 30 17:00 perf_event
drwxr-xr-x 5 root root  0 May 30 17:00 pids
drwxr-xr-x 5 root root  0 May 30 17:00 systemd
```

### 查看特定容器的 CPU 配置

假设我们有一个 Docker 容器，其 ID 为 `3dc0601189dd218898f31f9526a6cfae83913763a4da59f95ec789c6e030ecfd`。我们可以进入该容器的 Cgroup 目录并查看其 CPU 配置文件：

```plaintext
# ls /sys/fs/cgroup/cpu,cpuacct/docker/3dc0601189dd218898f31f9526a6cfae83913763a4da59f95ec789c6e030ecfd
cgroup.clone_children  cpu.cfs_period_us  notify_on_release
cgroup.event_control   cpu.cfs_quota_us   release_agent
cgroup.procs           cpu.rt_period_us   system.slice
cgroup.sane_behavior   cpu.rt_runtime_us  tasks
cpuacct.stat           cpu.shares         user.slice
cpuacct.usage          cpu.stat
cpuacct.usage_percpu
```

在这个目录下，我们可以找到 `cpu.shares` 文件，它包含了该容器的 CPU 共享权重。我们还可以查看 `tasks` 文件，它列出了该容器中的所有进程 ID。

```plaintext
# cat /sys/fs/cgroup/cpu,cpuacct/docker/3dc0601189dd218898f31f9526a6cfae83913763a4da59f95ec789c6e030ecfd/tasks
39487
39520
39526
39527
39528
39529
```

通过这种方式，我们可以详细了解和管理 Docker 容器的资源使用情况。