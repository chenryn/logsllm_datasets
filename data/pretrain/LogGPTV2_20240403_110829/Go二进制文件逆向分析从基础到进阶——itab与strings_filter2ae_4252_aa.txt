# Go二进制文件逆向分析从基础到进阶——itab与strings
##### 译文声明
本文是翻译文章
译文仅供参考，具体内容表达以及含义原文为准。
> 书接前文，本文介绍 Go 语言二进制文件中的 `` 映射表和字符串信息，以及如何定位并解析它们。
**传送门** ：
  1. [Go二进制文件逆向分析从基础到进阶——综述](https://www.anquanke.com/post/id/214940)
  2. [Go二进制文件逆向分析从基础到进阶——MetaInfo、函数符号和源码文件路径列表](https://www.anquanke.com/post/id/215419)
  3. [Go二进制文件逆向分析从基础到进阶——数据类型](https://www.anquanke.com/post/id/215820)
## 9\. Interface 映射表(itab_link)
###  9.1 概念介绍
在 Go 语言的规范中，Interface(接口) 用来定义一组行为(Interface Methods)，所有实现了这一组行为的其他类型，都可称之为
**实现了这个接口** 。Go 语言中 Interface 的用法还算是有些难点的，比如 **空接口** 的用法、以及更复杂一些的基于 Interface
实现的面向对象的 **多态** 特性。
前文《[Go二进制文件逆向分析从基础到进阶——数据类型](https://www.anquanke.com/post/id/215820)》中已经阐述过
Interface 类型的底层定义：
    type interfaceType struct {
        rtype
        pkgPath name      // import path
        methods []imethod // sorted by hash
    }
    type imethod struct {
        name nameOff // name of method
        typ  typeOff // .(*FuncType) underneath
    }
其实，在 Go 二进制文件中，还保留了 Interface 与实现 Interface 的其他类型之间的映射关系。每一组映射关系，叫 **itab**
(Interface Table)， **itab** 的结构如下：
    // Interface table
    // Refer: https://golang.org/src/runtime/runtime2.go
    type itab struct {
        inter *interfacetype
        _type *_type
        hash  uint32 // copy of _type.hash. Used for type switches.
        _     [4]byte
        fun   [1]uintptr // variable sized. fun[0]==0 means _type does not implement inter.
    }
其中有 3 个关键字段：
  1. 第 1 个 **inter** ，指向一个 Interface 类型的定义；
  2. 第 2 个 **_type** ，指向一个普通数据类型的定义信息，这个 **_type** 实现了上面指定的 Interface；
  3. 第 5 个 **fun** ，指向一组方法，是上面第 2 个字段 **_type** 中具体实现的 Interface 中定义的方法。
###  9.2 itab 实例
在 IDAPro 中， **[go_parser](https://github.com/0xjiayu/go_parser)** 解析好的一个 itab
项如下：
上图表明， **[package net](https://golang.org/pkg/net/?m=all#Addr)** 中定义了一个 **Addr
Interface** ，其中包含 2 个方法：`Addr.Network()` 和 `Addr.String()`：
在 IDAPro 中， **[go_parser](https://github.com/0xjiayu/go_parser)** 解析好的 **Addr
Interface** 定义如下：
相应地， **[package net](https://golang.org/pkg/net/?m=all#TCPAddr)** 中另一个数据结构
**TCPAddr** 实现了上述 **Addr Interface** 。官方文档如下：
在 IDAPro 中， **[go_parser](https://github.com/0xjiayu/go_parser)** 解析好的
`net.TCPAddr` 类型定义如下：
可以看到，`net.TCPAddr` 这个数据类型绑定了 7 个方法，其中 2 个可导出的方法分别是 `Network()` 和 `String()`
，正是这两个方法实现了 `net.Addr` Interface。
至于 **itab** 在 Go 二进制文件中是如何使用的？既然有了具体类型的定义，直接用具体类型不就可以了吗，为什么还要绕一圈映射一下实现的
Interface？如果有这类疑问，建议在 IDAPro 中打开一个 Go 二进制文件，找到某个 **itab** 结构的定义，以及通过交叉引用在
IDAPro 中这个 **itab** 是如何被调用的，再结合 Go 源码对照着看一下，应该能有所收获。
###  9.3 查找并解析 itab
上文介绍了单个 itab 的概念与结构解析，而一个 Go 二进制文件中可能存在几百甚至上千组 Interface 与具体数据类型的映射关系，即几百甚至上千个
itab 结构，如何把它们都找出来并一一解析呢？
首先需要说明的是，解析 itab 这个工作，依赖于前文介绍的解析所有数据类型定义的结果。解析了每一个数据类型的定义之后，才能知道每个 itab 结构中的
Interface 和具体数据类型的定义。
在本系列第二篇
《[Go二进制文件逆向分析从基础到进阶——MetaInfo、函数符号和源码文件路径列表](https://www.anquanke.com/post/id/215419)》中介绍
**firstmoduledata** 这个结构时，提到过这个结构里的一个字段： **itab_link** ，并解释说 **itab_link** 指向
Go 二进制文件中的 Interface 映射表。分析过 Go 二进制文件的师傅可能注意过， **itab_link** 这个结构通常会在 ELF
文件中一个单独的 Section，就叫 **`.itablink`** 。然而我前文也说过，通过文件头中的 Section 来定位 Go
二进制文件中的关键数据并不靠谱，尤其是面对 ELF/PE/MachO 以及 PIE 这些不同文件类型的复杂情况，甚至 Section
信息被篡改甚至抹除时，更是如此。最靠谱的方式就是通过 **firstmoduledata** 中的字段来按图索骥，定位到各个关键数据结构的位置。
从 **firstmoduledata** 结构中 **itab_link** 字段定位到的 **itablink** ，其实就是一个 itab
结构的地址列表， **[go_parser](https://github.com/0xjiayu/go_parser)** 解析好的
**itablink** 如下(一部分)：
其中每一项，都是一个 **itab** 结构的地址。每个 itab 结构体的命名规则，都是 **(前缀)go_itab + 实际类型名 +
Interface 名** 。最后， **firstmoduledata** 中也标明了 **itablink** 结构中 **itab**
地址的数量，所以根据 **itablink** 的起始地址和数量，依次解析相应的 **itab** 即可。
## 10\. 字符串
###  10.1 字符串简介
Go 语言中，string 类型是 **值类型** (相对于 **引用类型** )，是 Go
支持的基础类型之一。一个字符串是一个不可改变的字节序列，字符串可以包含任意的数据，但是通常是用来包含可读的文本，字符串是 UTF-8
字符的一个序列（当字符为 ASCII 码表上的字符时则占用 1 个字节，其它字符根据需要占用 2-4 个字节）。
Go 中字符串底层由两个元素来定义： **字节序列的地址** 和 **字节序列的长度** ，而不是像 C 语言那样以一个起始地址和 `0x00`
结尾就能表示一个字符串。在 Go
二进制文件中，操作一个字符串也要同时引用这两个元素。比如某函数需要一个字符串类型的参数，传参时就要在栈上的参数空间留两个位置，一个位置把相应字节序列的地址传进去，另一个位置把字节序列的长度传进去。字符串类型的返回值操作同理。
在静态逆向分析 Go 二进制文件时，把 Go 二进制文件加载到 IDAPro
中查看反汇编出来的代码时，在操作字符串的汇编代码片段中，最多只能看到目标字符串的长度，而字符串还是处于未分析的原始字节序列的状态。大量的字符串处于这种状态时，会使逆向分析变得很费劲，很大程度上拉低逆向分析的效率。所以我们要想办法把这些字符串尽量都解析出来，然后在引用这个字符串的汇编代码处打
Comment 或者加上 Data Reference，就会让逆向工作的效率提升一个台阶。
刚加载进 IDAPro 中的 Go 二进制文件，引用未解析的 **字符串字面量** 的汇编代码片段如下：
经过 **[go_parser](https://github.com/0xjiayu/go_parser)** 的解析，效果就会很直观了：
在 Go
二进制文件中，字符串整体上是按照长度依次存放在一个特定区域的。然而这个区域的起始地址、长度等属性没有固定的索引，所以无法像定位其他结构一样定位到所有字符串并一一解析。能用的办法，就是
**分析调用、操作字符串的的汇编指令片段的
Pattern，然后从所有汇编指令中暴力检索可能操作字符串的位置，提取到相应字符串的地址与长度进而解析能够查找到的字符串** 。
Go 二进制文件中的字符串，按照存放和引用方式，可以分为三种：
  * 字符串字面量，通常来说字符串常量(包括命名常量和未命名的字面常量)都会用这种形式；
  * 字符串指针，字符串变量和一部分字符串常量会用这种形式。
  * 字符串数组/切片
这三种类型的字符串存取方式，从操作字符串的汇编代码片段来看，Pattern 不同，解析方法也不同，下文一一介绍。
###  10.2 字符串字面量
上面 10.1 小节的截图中介绍的例子，就是 **字符串字面常量**
。操作字符串字面量的汇编代码，会直接引用字节序列的地址，然后把字符串的长度当作汇编指令的一个立即数来使用。不过，根据不同的 CPU
位数、目标寄存器的不同，这样的汇编代码片段的 Pattern 有多种。
**[go_parser](https://github.com/0xjiayu/go_parser)** 中可以解析的 x86 汇编指令 Pattern
如下：
    mov     ebx, offset aWire ; "wire" # Get string
    mov     [esp], ebx
    mov     dword ptr [esp+4], 4 # String length