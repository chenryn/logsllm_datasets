Runtime info
|D|
44
52
44
48
44
44
|R| Overhead
1.90%
19
2.81%
559
16
2.52%
346
380
32
900.13%
8.04%
5.82%
Table 1: Use cases of conﬁdential execution of secret cloud application binaries.
load. The following columns show the program information
(program name, binary name), the description of the pro-
tected program logic (Protected Code), the number of lines
of code added as porting attempts (|L|), the number of se-
cret functions (|F|) and runtime characteristics of the secret
binaries (|C|: code section size, |D|: data section size, |R|:
relocation table size, overhead). The characteristics of the
applications in the three categories are as follows.
Decision-making logic: Application code in this cate-
gory determines the behaviors of the application. For exam-
ple, the access module, nginx-access, of NGINX decides
whether the web server allows or denies an incoming web
request based on the conﬁguration. Another application,
the mail ﬁlter module, sendmail-filter, of the sendmail
server analyzes the content of an outgoing mail and decides
whether to send out the mail or not. Speciﬁcally the ported
code examines the header of an input mail and ﬁnds whether
the sender’s address is illegal using a regular expression.
Cryptographic operations: If the OS is compromised,
cryptographic operations are no longer safe because OS can
look into their runtime states which can potentially be used
to infer their operations. We show several use cases of well
known cloud applications. We port the Google Authen-
ticator Pluggable Authentication Module (PAM), gauth-
otp, that protects the passcode generating code, and EncFS
which is a ﬁle system with the block-level encryption. We
selected a EncFS, encfs-aria, that uses the ARIA cipher
[4]. The encryption and decryption algorithms along with
the key initialization function are protected.
Data processing workload: Some security sensitive
code may involve intensive computation. We use two parallel
data processing algorithms running on a parallel computing
framework to show the support of this category. mapreduce-
kmeans is an implementation of k-means clustering based
on Phoenix [19], a shared-memory and C language based
MapReduce framework. The protected code partitions n-
dimensional integer points into a number of clusters. Lastly,
hadoop-wcount is an algorithm based on Apache Hadoop
which analyzes an input text ﬁle and outputs the total num-
ber of distinct English words.
The number of lines of code added to the applications for
conversion depends on the amount of the conﬁdential code of
the application. In our use cases, it ranges 100-220 (average
1.18%). Compared to the total LoC of the entire program,
it is a small portion of the program.
4.2 Performance of Conﬁdential Execution of
Cloud Applications
We present the overhead of the applications for conﬁden-
tial execution in CAFE (Table 1). We calculate the over-
head by comparing the performance of the original version
with the modiﬁed version with conﬁdential protection. In
general, one major source of overhead is VM-level context
switches that occur while the secret code is running and dur-
ing marshaling for input and output data. Speciﬁcally, the
overhead highly depends on the frequency of secret function
calls and the size of the marshaled data. The complexity of
the protected logic has a minor impact on the overhead.
We have evaluated several server programs by setting up
the client for benchmarking workload in a separate physical
machine in a local network. To measure the overhead of
nginx-access, we have the Apache Benchmark issue 10K
transactions per trial. Diverse content of each page is sim-
ulated with a binary blob ﬁlled with randomly-generated
bytes. We experimented the average size of the web page in
top 100 web sites as of July, 2014 [1]. The overhead com-
paring the number of requests per second is 1.9%.
We use the Mstone SMTP performance testing tool [2]
to measure the overhead of sendmail-filter. The test is
run for 30 seconds with one client which repeatedly sends an
email with the default Mstone email content. The evaluation
shows that the overhead is only 2.81%.
To evaluate gauth-otp case, the SSH client repeatedly
logins to and logouts from the server for 30 seconds using
one-time passcodes generated by secret binary. The over-
head for conﬁdential execution is as trivial as 2.52%.
The overhead of encfs-aria is measured using the IOzone
Filesystem Benchmark [7]. We use the average through-
put (KB/sec) of each process writing a 512KB ﬁle using a
4KB buﬀer. The benchmark result shows that the appli-
cation with the conﬁdential execution support is about 9
times slower than with the binary without the support. We
note that this benchmarking is a stress case where the ﬁle
system is stressed with very frequent secret function calls,
which cause high context switch cost. In typical real-world
cloud applications such workload is unusual especially when
an encrypted disk is used, thereby we expect the overhead
in the realistic setting to be much lower.
mapreduce-kmeans is conﬁgured to partition 8,192 two-
dimensional integer points (64 MB) into 4,096 clusters. The
application is about 8% slower with the conﬁdentiality sup-
port than the original application, both given the same in-
put. hadoop-wcount is run with an input text ﬁle that con-
tains 10,000 words (108 KB). We use the CPU time spent
during the two phases as the unit of the comparison. The
overhead introduced by CAFE for this binary is 5.8%.
4.3 Performance Impact to Applications with-
out Protection
We use the XMHF hypervisor framework [22] as the base
of our implementation for basic hypervisor primitives and
DRTM-related code. To evaluate the performance impact
we run benchmarks (UnixBench) on CAFE without any se-
cret binaries loaded and compare the results with a vanilla
XMHF hypervisor with the basic VM management function-
ality only. The results conﬁrm that CAFE does not impact
unprotected applications in the VM (zero overhead).
655Proceedings of the Eighteenth International Conference on
Architectural Support for Programming Languages and
Operating Systems, ASPLOS ’13, pages 253–264, New
York, NY, USA, 2013. ACM.
[10] X. Chen, T. Garﬁnkel, E. C. Lewis, P. Subrahmanyam,
C. A. Waldspurger, D. Boneh, J. Dwoskin, and D. R. Ports.
Overshadow: a virtualization-based approach to retroﬁtting
protection in commodity operating systems. In Proceedings
of ASPLOS’08, New York, NY, USA, 2008.
[11] C. Collberg, C. Thomborson, and D. Low. A taxonomy of
obfuscating transformations. Technical Report 148
Department of Computer Science University of Auckland
July, page 36, 1997.
[12] David Challener, Kent Yoder, Ryan Catherman, David
Saﬀord, Leendert Van Doorn. A Practical Guide to Trusted
Computing. IBM Press, 2007.
[13] B. Lee, Y. Kim, and J. Kim. binOb+: A framework for
potent and stealthy binary obfuscation. In Proceedings of
ASIACCS’10, New York, NY, USA, 2010.
[14] C. Linn and S. Debray. Obfuscation of executable code to
improve resistance to static disassembly. In Proceedings of
CCS’03, New York, NY, USA, 2003.
[15] J. M. McCune, Y. Li, N. Qu, Z. Zhou, A. Datta, V. Gligor,
and A. Perrig. TrustVisor: Eﬃcient TCB Reduction and
Attestation. In Proceedings of SP’10, DC, USA, 2010.
[16] J. M. McCune, B. J. Parno, A. Perrig, M. K. Reiter, and
H. Isozaki. Flicker: An Execution Infrastructure for TCB
Minimization. In Proceedings of the Eurosys’08, pages
315–328, New York, NY, USA, 2008.
[17] I. V. Popov, S. K. Debray, and G. R. Andrews. Binary
Obfuscation Using Signals. In Proceedings of USENIX
Security’07, Berkeley, CA, USA, 2007.
[18] D. R. K. Ports and T. Garﬁnkel. Towards application
security on untrusted operating systems. In Proceedings of
the 3rd Conference on Hot Topics in Security,
HOTSEC’08, pages 1:1–1:7, Berkeley, CA, USA, 2008.
USENIX Association.
[19] C. Ranger, R. Raghuraman, A. Penmetsa, G. Bradski, and
C. Kozyrakis. Evaluating MapReduce for Multi-core and
Multiprocessor Systems. In Proceedings of HPCA’07,
Washington, DC, USA, 2007.
[20] Rob van der Meulen, Janessa Rivera. Gartner Says
Worldwide Public Cloud Services Market to Total $131
Billion. http://www.gartner.com/newsroom/id/2352816.
[21] M. Sharif, A. Lanzi, J. Giﬃn, and W. Lee. Impeding
Malware Analysis Using Conditional Code Obfuscation.
Proceedings of NDSS’08, 2008.
[22] A. Vasudevan, S. Chaki, L. Jia, J. McCune, J. Newsome,
and A. Datta. Design, Implementation and Veriﬁcation of
an eXtensible and Modular Hypervisor Framework. In
Proceedings of SP’13, pages 430–444, DC, USA, 2013.
[23] Vasudevan, Amit and Parno, Bryan and Qu, Ning and
Gligor, Virgil D and Perrig, Adrian. Lockdown: Towards a
Safe and Practical Architecture for Security Applications
on Commodity Platforms. In Proceedings of the 5th
International Conference on Trust and Trustworthy
Computing, 2012.
5. RELATED WORK
Flicker [16] and TrustVisor [15] provide an infrastructure
for executing security-sensitive code in isolated memory based
on the remote attestation of binary code. However, they
primarily focus on blocking user VM’s accesses to the ap-
plication code in memory only while the memory isolation
is enabled at runtime. This design may compromise code
conﬁdentiality because attackers in the VM may obtain a
copy of the application code from the ﬁle system or mem-
ory during the deployment before the protection is enabled.
In contrast, CAFE protects the conﬁdentiality of the bina-
ries in an end-to-end manner for the entire lifetime of the
deployed software.
Overshadow [10] provides cloaking for general purpose
legacy unmodiﬁed applications and untrusted kernel. Re-
lated work [9, 18] have shown that a malicious kernel is
able to compromise the protected OS even with the protec-
tion schemes by Overshadow. CAFE provides stronger code
conﬁdentiality than Overshadow by providing tightly veri-
ﬁed and sanitized input and output via marshaling layer,
and a constrained scope of sensitive code which in combina-
tion signiﬁcantly reduce the chance of vulnerability.
Software vendors have been working hard to protect their
code from reverse engineering and software piracy. There
has been a large body of work on obfuscators [14, 17, 21, 13,
5, 6, 8] which make disassembly hard. While the code ob-
fuscation techniques can impede the analysis of code, they
are not designed to provide the complete secrecy of exe-
cutable code because obfuscated code may still retain code
semantics. Unlike such solutions, CAFE provides full conﬁ-
dentiality by cryptographically encrypting the binary code
and running the decrypted code in an isolated environment.
6. CONCLUSION
The secure distribution and execution of cloud applica-
tions is an essential feature to prevent the illegitimate usage
of cloud applications and further for the success of the evolv-
ing ecosystem of cloud systems. In order to defeat software
piracy and reverse engineering of sensitive software logic, we
present CAFE which provides the conﬁdential distribution
and execution of cloud applications even when the entire OS
of the tenant VM is compromised. We present its evalua-
tion on a number of applications commonly oﬀered in cloud
marketplaces showing the eﬀectiveness and practicality of
CAFE.
7. REFERENCES
[1] Average Web Page Breaks 1600K.
http://www.websiteoptimization.com/speed/tweak/
average-web-page/.
[2] Mstone. http://mstone.sourceforge.net/.
[3] The Transport Layer Security (TLS) Protocol Version 1.2.
http://tools.ietf.org/html/rfc5246.
[4] A Description of the ARIA Encryption Algorithm, 2010.
http://tools.ietf.org/search/rfc5794.
[5] Themida, 2010. http://www.oreans.com.
[6] VMProtect, 2010.
http://vmpsoft.com/products/vmprotect/.
[7] IOzone Filesystem Benchmark, Feb. 2013.
http://www.iozone.org/.
[8] A. Averbuch, M. Kiperberg, and N. J. Zaidenberg.
Truly-Protect: An Eﬃcient VM-Based Software Protection.
IEEE Systems Journal, 7(3):455–466, Sept. 2013.
[9] S. Checkoway and H. Shacham. Iago attacks: Why the
system call api is a bad untrusted rpc interface. In
656