a non-anomalous feature value has a rather small probabil-
ity of (1/m)k to appear in an anomalous bin in all k clones.
The candidate ﬂows Fj of detector j are the ﬂows match-
ing the feature values ∩Vk. In the technical report [3] we
also analyze and evaluate the use of voting techniques as an
alternative to taking the intersection ∩Vk.
2.3 Association Rule Mining
Association rules describe items that occur frequently to-
gether in a dataset and are widely-used for market bas-
ket analysis. For example, a rule might reﬂect that 98%
of customers that purchase tires also get automotive ser-
let a transaction T be a set of h
vices [1]. Formally,
items T = {e1, . . . , eh}. Then the disjoint subsets X, Y ⊂ I
deﬁne an association rule X =⇒ Y . The support s of an
association rule is equal to the number of transactions that
contain X ∪ Y .
The problem of discovering all association rules in a
dataset can be decomposed into two subproblems: (i) dis-
cover the frequent item-sets, i.e., all item-sets that have
a support above a user-speciﬁed minimum support; and
(ii) derive association rules from the frequent item-sets.
Our motivation for applying association rules to the
anomaly extraction problem is that anomalous ﬂows typ-
ically have similar characteristics, e.g., IP addresses, port
numbers, or ﬂow lengths, since they have a common root-
cause like a network failure, a bot engine, or a scripted De-
nial of Service (DoS) attack. Further, the similarity be-
tween ﬂows is represented by a binary function that is zero
for diﬀerent feature values and one for identical feature val-
ues. Other similarity functions, e.g., Manhattan distance,
are less suited for the speciﬁc problem at hand.
Each transaction T corresponds to a NetFlow record and
the items ei to the following seven (h = 7) ﬂow features:
{srcIP, dstIP, srcPort, dstPort, protocol, #packets,
#bytes}. For example, the item e1 = {srcPort : 80} refers
to a source port number equal to 80, while e2 = {dstPort :
80} refers to a destination port number equal to 80. An
l-item-set X = {e1, . . . , el} is a combination of l diﬀerent
items. The largest possible item-set is a 7-item-set that con-
tains a feature-value pair for each of the seven features. A
transaction or an l-item-set cannot have two items of the
same feature, e.g., X = {dstPort : 80, dstPort : 135} is not
valid. The support of an l-item-set is given by the number of
ﬂows that match all l items in the set. For example, the sup-
port of the 2-item-set X = {dstIP : 129.132.1.1, dstPort :
80} is the number of ﬂows that have the given destination
IP address and the given destination port.
Apriori Algorithm The standard algorithm for discov-
ering frequent item-sets is the Apriori algorithm by Agrawal
and Srikant [1]. Apriori makes at most h passes over the
data. In each round l = 1 . . . h, it computes the support for
all candidate l-item-sets. At the end of the round, the fre-
quent l-item-sets are selected, which are the l-item-sets with
frequency above the minimum support parameter. The fre-
30l
1
1
2
2
2
2
2
2
3
3
3
3
4
5
5
srcIP
*
*
Host A
*
Host B
*
Host C
*
*
*
*
*
*
*
*
dstIP
*
*
*
*
*
*
*
*
*
*
*
*
Host D
Host E
Host E
srcPort
*
*
*
*
*
*
*
*
*
*
*
*
*
54545
45454
dstPort
*
25
80
80
80
80
80
80
80
80
80
7000
9022
7000
7000
#packets #bytes
2
*
*
6
*
7
*
5
1
1
1
1
1
1
1
*
*
*
*
*
*
*
*
46
48
1024
48
48
46
46
support
10,407
22,659
11,800
35,475
14,477
16,653
15,230
58,304
17,212
11,833
23,696
12,672
22,573
23,799
15,627
event
HTTP Proxy
HTTP Proxy
HTTP Cache
Dist. Flooding
Backscatter
Dist. Flooding
Dist. Flooding
Table 2: Frequent item-sets computed with our modiﬁed Apriori algorithm. The input data set con-
tained 350,872 ﬂows and the minimum support parameter was set to 10,000 ﬂows. IP addresses have been
anonymized.
quent item-sets of round l are used in the next round to
construct candidate (l + 1)-item-sets. The algorithm stops
when no (l+1)-item-sets with frequency above the minimum
support are found.
By default, Apriori outputs all frequent l-item-sets that
it ﬁnds. We modify this to output only l-item-sets that
are not a subset of a more speciﬁc (l + 1)-item-set. More
speciﬁc item-sets are desirable since they include more in-
formation about a possible anomaly. This measure allows
us to signiﬁcantly reduce the number of item-sets to process
by a human expert. We denote the ﬁnal set of l-item-sets
as I. The Apriori algorithm takes one parameter, i.e., the
minimum support, as input. If the minimum support is se-
lected too small, many item-sets representing normal ﬂows
(false positives) will be included in the output. On the other
hand, if the minimum support is selected too large, the item-
sets representing the anomalous ﬂows might be missed (false
negative).
Apriori Example In the following we give an example
of using Apriori to extract anomalies. In the used 15-minute
trace, destination port 7000 was the only feature value that
was ﬂagged by all histogram clones. It contributed 53,467
candidate anomalous ﬂows. To make the problem of ex-
tracting anomalies more challenging, we manually added to
the candidate set ∪Fj ﬂows that had one of the three most
frequent destination ports but had not been ﬂagged by all
histogram clones. In particular, the most popular destina-
tion ports were port 80 that matched 252,069 ﬂows, port
9022 that matched 22,667 ﬂows, and port 25 that matched
22,659 ﬂows. Thus, in total the input set ∪Fj contained
350,872 ﬂows. For our example, we set the minimum sup-
port parameter to 10,000 ﬂows and applied our modiﬁed
Apriori to the ﬂow set ∪Fj.
The ﬁnal output of the algorithm is given in Table 2, which
lists a total of 15 frequent item-sets. In the ﬁrst iteration, a
total of 60 frequent 1-item-sets were found. 59 of these were,
however, removed from the output since they were subsets
of at least one frequent 2-item-set. In the second iteration,
a total of 78 frequent 2-item-sets were found. Again, 72
2-item-sets could be removed since they were subsets of at
least one frequent 3-item-set. In the third iteration, 41 fre-
quent 3-item-sets are found, of which four item-sets were not
deleted from the output. In the fourth round, 10 frequent
4-item-sets were found but only one of them remained after
removal of redundant 4-item-sets. Two frequent 5-item-sets
were found in round ﬁve. Finally, the algorithm terminated
as no frequent 6-item-sets satisfying the minimum support
were found.
Three out of the 15 frequent item-sets had destination
port 7000. We veriﬁed that indeed several compromised
hosts were ﬂooding the victim host E on destination port
7000. Regarding the other frequent item-sets, we veriﬁed
that hosts A, B, and C, which sent a lot of traﬃc on des-
tination port 80, were HTTP proxies or caches. The traﬃc
on destination port 9022 was backscatter since each ﬂow
has a diﬀerent source IP address and a random source port
number. The remaining item-sets refer to combinations of
common destination ports and ﬂow sizes and are thus not
likely of anomalous nature. These item-sets can be easily
ﬁltered out by an administrator.
3. EVALUATION
In this section we ﬁrst describe the traces we used for our
experiments and then outline our evaluation results. We
evaluated the accuracy of the generated item-sets and the
reduction in classiﬁcation cost.
3.1 Data Set and Ground Truth
To validate our approach we used a Netﬂow trace com-
ing from one of the peering links of a medium-sized ISP
(SWITCH, AS559). SWITCH is a backbone operator con-
necting all Swiss universities and various research labs, e.g.,
CERN, IBM, PSI, to the Internet. We have been collect-
ing non-sampled and non-anonymized NetFlow traces from
the peering links of SWITCH since 2003. The SWITCH
IP address range contains approximately 2.2 million IP ad-
dresses. On average we see 92 million ﬂows and 220 million
packets per hour crossing the peering link we used for our
experiments. Our dataset was recorded during August 2007
and spans two continuous weeks. We focus on the more
popular TCP ﬂows that originate within AS559 and that
do not terminate within AS559, though the same evalua-
31x 105
8.5
r
o
t
c
a
f
n
o
i
t
c
u
d
e
r
t
s
o
c
8
7.5
7
6.5
6
5.5
5
3000
4000
5000
6000
7000
minmum support
8000
9000
10000
Figure 4: Average decrease in classiﬁcation cost ver-
sus the minimum support parameter. The classiﬁ-
cation cost reﬂects the number of ﬂows or item-sets
that are manually classiﬁed.
tion methodology has been applied [3] to UDP ﬂows and to
traﬃc originating outside AS559.
To generate datasets for evaluating the Apriori algorithm,
we fed the two weeks of Netﬂow data to ﬁve histogram-based
detectors, i.e., n = 5. Each detector monitors the distribu-
tion of one of the following features over 15-minute intervals:
source IP address, destination IP address, source port num-
ber, destination port number, and ﬂow size in packets. For
histogram cloning we used ﬁve 10-bit hash functions, i.e.,
k = 5 and m = 1024. In the companion technical report [3]
we investigate thoroughly the impact of diﬀerent parameter
settings.
We manually veriﬁed the 31 intervals ﬂagged by at least
one of the detectors as anomalous. For manual veriﬁcation,