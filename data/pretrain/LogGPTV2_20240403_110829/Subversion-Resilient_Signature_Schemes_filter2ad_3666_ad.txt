that, already for n = 1, Deﬁnition 7 implies EUF-CMA security under non-adaptive key
tampering, as a single subverted algorithm can hard-wire (the description of) polynomially
many pre-set tampering functions.
11Looking ahead, one of our positive results achieves security w.r.t. arbitrary SAs assuming the existence of a
cryptographic reverse ﬁrewall. See Section 6.
of the key at each invocation. Alternatively, consider the single subversion algorithm (cid:101)A ¯m that always outputs
12In case the secret key is too long, one can make the algorithm stateful, so that it outputs a diﬀerent chunk
a signature ¯σ on some hard-wired message ¯m ∈ M; obviously this subversion allows to forge on ¯m without
explicitly querying the message ¯m to any of the oracles.
12
 We note that each algorithm (cid:101)Aj ∈ A keeps its own state, say τj ∈ {0, 1}∗, which gets
updated at each invocation. However, this state is not shared among diﬀerent algorithms
within the class A. This models, e.g., a machine infected by multiple (but diﬀerent)
viruses, causing the execution of malicious code.
Multi-user setting. For simplicity, Deﬁnition 6 and 7 consider a single user. We provide an
extension to the more general setting with u ≥ 1 users, together with a complete picture of the
relationships between diﬀerent notions, in Section 7.
3.2 Public/Secret Undetectability
By undetectability, we mean the inability of ordinary users to tell whether signatures are com-
puted using the subverted or the genuine signing algorithm. We will distinguish between the
case where a subversion is publicly or secretly undetectable. Roughly speaking, public unde-
tectability means that no user can detect subversions using the veriﬁcation key vk only (i.e.,
without knowing the signing key sk ); secret undetectability means that no user, even with
knowledge of the signing key sk , can detect subversions.
A formal deﬁnition follows. While reading it, bear in mind that the challenger plays the
role of the “bad guy”, trying to sabotage the signature scheme without being detected. The
deﬁnition is parameterized by a distribution over the class of SAs, corresponding to an eﬃcient
strategy by which the saboteur can (eﬃciently) select a speciﬁc algorithm from the SA class in
such a way that undetectability holds (with high probability).
Deﬁnition 8 (Public/secret undetectability). Let SS = (KGen, Sign, Vrfy) be a signature
scheme, A be some class of SAs for SS, and DA be an eﬃciently samplable distribution over
A. We say that A is secretly (t, q, ε, DA)-undetectable w.r.t. SS if for all users U running in
(cid:12)(cid:12) ≤ ε(κ) in the following game:
time t, we have that(cid:12)(cid:12)P [U wins] − 1
1. The challenger samples an algorithm (cid:101)A ←$ DA, and picks b ←$ {0, 1}.
σi ←$ Sign(sk i, mi); if b = 0, the challenger returns(cid:101)σi ←$(cid:101)A(sk i, mi).
2. The user U can ask queries (sk i, mi), where sk i ∈ SK and mi ∈ M, for all i ∈ [q].
The answer to each query depends on the secret bit b. If b = 1, the challenger returns
2
3. Finally, U outputs a value b(cid:48) ∈ {0, 1}; we say that U wins iﬀ b(cid:48) = b.
We say that A is publicly undetectable w.r.t. SS if, in step 1. of the above game the challenger
picks (vk , sk ) ←$ KGen(1κ) and gives vk to U, and the queries speciﬁed by U in step 2 only consist
of values mi ∈ M upon which the challenger replies with either σi ←$ Sign(sk , mi) or with
there exists ε(κ) = negl (κ) such that A is (t, q, ε, DA)-secretly/publicly undetectable w.r.t. SS,
we simply say that SS is secretly/publicly DA-undetectable w.r.t. SS.
(cid:101)σi ←$(cid:101)A(sk , mi) (depending on the value of the hidden bit b). Moreover, if for all t, q = poly(κ)
Our deﬁnition of undetectability is similar to the corresponding deﬁnition considered by
Bellare et al. [BPR14, BJK15] for the case of symmetric encryption. One key diﬀerence is that,
in the deﬁnition above, the challenger is required to choose the subversion algorithm (cid:101)A ∈ A
following some polynomial-time sampling strategy DA that is a parameter in the deﬁnition.
We stress that achieving Deﬁnition 8 in isolation might be trivial;13 however, the saboteur’s
goal is to design an attack class A that breaks security (e.g., by exposing the signing key—
see Section 3.3) while at the same time being (publicly or secretly) undetectable for the same
sampling distribution DA. See Section 3.4 for further discussion on this point.
13It suﬃces, e.g., to artiﬁcially include the original signing algorithm in any class of SAs.
13
While one could in principle deﬁne even stronger forms of undetectability, e.g. by requiring
that continuous and fully-adaptive SAs remain undetectable, we do not pursue this direction
here. The reason for this is that the attacks we analyze in Section 4 are non-adaptive, and only
require to use a single subversion.
Secret vs. public undetectability. While secret undetectability clearly implies public un-
detectability, the converse is not true. In particular, in Section 7.2, we show that there exists
a signature scheme SS and a set of subversions A of it, such that A is publicly undetectable
w.r.t. SS but it is secretly detectable w.r.t. SS.
Strong undetectability. The notion of strong undetectability, introduced in [BJK15], basi-
cally limits the class of undetectable subversions to be the class of stateless subversions, which
is enforced by the challenger returning the state to the user in the deﬁnition of undetectabil-
ity. Since we will construct both stateless and stateful attacks, we will equivalently say that
a class of SAs A is strongly (publicly or secretly) undetectable, if it satisﬁes Deﬁnition 8, and
additionally A is a family of stateless algorithms.
Multi-user setting. For simplicity, Deﬁnition 8 considers a single user. We provide an
extension to the more general setting with u ≥ 1 users, together with a complete picture of the
relationships between diﬀerent notions, in Section 7.
3.3 Signing Key Recovery
Apart from being (publicly or secretly) DA-undetectable, a class A of SAs w.r.t. a signature
scheme SS should yield some advantage from the point of view of the saboteur. For instance,
one could imagine the saboteur being able to distinguish subverted signatures from real ones, or
to produce signature forgeries on chosen messages. Below, we formalize an even more ambitious
goal which is the ability of fully recovering the secret signing key.
Deﬁnition 9 (Signing key recovery). Let SS = (KGen, Sign, Vrfy) be a signature scheme, A be
some class of SAs for SS, and DA be an eﬃciently samplable distribution over A. We say that
adversary B (t, q, ε, DA, M)-recovers the signing key of SS if B runs in time t, and moreover
P [B wins] ≥ ε(κ) in the following game:
1. The challenger runs (vk , sk ) ←$ KGen(1κ), samples (cid:101)A ←$ DA, and gives vk to B.
an empty input, the oracle picks mi ←$ M, computes (cid:101)σi ←$(cid:101)A(sk , mi), and sends (mi,(cid:101)σi)
2. The adversary B is given access to an oracle that can be queried at most q times: Upon
to B.
3. Finally, B outputs a key sk(cid:48); we say that B wins iﬀ sk(cid:48) = sk .
Whenever ε(κ) is non-negligible, for some t, q = poly(κ), we simply say that the attacker
(DA, M)-recovers the signing key of SS.
We note that in the above deﬁnition, M is a message sampler algorithm that chooses the
message to be signed according to some pre-deﬁned strategy. From the perspective of an ad-
versary, an attack is stronger the less it assumes about M; in fact, the strongest attack is one
that works for any M, i.e., regardless of which messages the signer chooses to sign.
14
3.4 Successful SAs
Note that designing a class of SAs that achieves either (public/secret) undetectability or key
recovery in isolation (w.r.t. some eﬃciently samplable distribution DA) might be trivial. For
instance, consider the class of SAs Abad that contains only two algorithms: the original signing
algorithm, and the constant function whose output is always equal to the signing key. Clearly,
such class satisﬁes undetectability w.r.t. the distribution that always returns the ﬁrst algorithm
in the class, whereas the same class satisﬁes key recovery (for any message sampler algorithm)
w.r.t. the distribution that always returns the second algorithm in the class.
However the challenge, from the perspective of an attacker, is to design a class of SAs that
admits a single sampling strategy achieving at the same time undetectability and key recovery.
This motivates the following deﬁnition.
Deﬁnition 10 (Successful SA). Let SS be a signature scheme, and A be some class of SAs
for SS. We call A ((t, t(cid:48)), (q, q(cid:48)), (ε, ε(cid:48)))-successful w.r.t. SS if there exists an adversary B and
a distribution DA over A, such that the following conditions are met:
(i) A is secretly/publicly (t(cid:48), q(cid:48), ε(cid:48), DA)-undetectable w.r.t. SS;
(ii) For any message sampler algorithm M, attacker B (t, q, ε, DA, M)-recovers the signing key
of SS.
We observe that it is still trivial to design classes of SAs that are successful for some unin-
teresting range of the parameters. For instance, let SS be EUF-CMA and consider the uniform
distribution over the above deﬁned class of SAs Abad. The latter yields large key-recovery prob-
ability ε ≥ 1/2, but also large detection advantage ε(cid:48) ≥ 1/4. Looking ahead, our attacks provide
classes of SAs that are successful for tiny ε(cid:48), large ε, and reasonably small t, t(cid:48), q, q(cid:48). (In the
asymptotic setting, negligible ε(cid:48), overwhelming ε, and polynomial t, t(cid:48), q, q(cid:48).)
4 Mounting Subversion Attacks
In Section 4.1, we show that the biased-randomness attack of [BJK15] (adapted to the case of
signatures) yields a successful class of SAs, as per Deﬁnition 10, against all signature schemes
using a suﬃcient amount of randomness. This attack is completely stateless. In Section 4.2, we
present a stateful attack that is successful even for signatures using only little randomness (in
fact, even 1 bit), provided that the targeted scheme satisﬁes an additional property.
4.1 Non-Trivial Randomness Attack
In this section, we describe a strongly undetectable14 attack against all probabilistic signature
schemes with a non-trivial amount of randomness. We measure the randomness of a signature
scheme via a notion of min-entropy, which is adapted from [BJK15].
Deﬁnition 11 (Signatures min-entropy). Let SS = (KGen, Sign, Vrfy) be a signature scheme.
For all κ ∈ N, we say that SS has min-entropy η(κ) ∈ N if the following holds:
2−η =
max
sk∈SK,m∈M,σ∈Σ
P [Sign(sk , m; r) := σ],
(1)
where M, R, SK, Σ denote, respectively, the message/randomness/secret-key/signature space
of SS, and where the probability is taken over the choice of the random coins r ∈ R.
15
SA class Abias
Let SS = (KGen, Sign, Vrfy) be a probabilistic signature scheme with signature space Σ, ran-
domness space R, and signing key space SK = {0, 1}(cid:96). Also, let F : {0, 1}κ × Σ → {0, 1} × [(cid:96)]
be a PRF. The class Abias consists of a set of algorithms {(cid:101)As,τ}s∈{0,1}κ, for some τ ∈ N, where
each algorithm in the class behaves as follows.
(cid:101)As,τ (sk , m):
 Initialize counter j := 0.
 Repeat the following instructions, until (sk [i] = v ∨ j = τ ):
– Increment the counter j := j + 1;
– Sample r ←$ R;
– Compute a fresh signature σ = Sign(sk , m; r);
– Evaluate (v, i) = Fs (σ).
 Return σ as the signature of m.
Figure 1: Strongly undetectable attack against probabilistic signature schemes with non-trivial
randomness.
The intuition behind the attack is as follows. Let F be a PRF (cf. Section 2.4) with range
{0, 1} × [(cid:96)], where (cid:96) is the length of the secret key in bits. We consider the class of SAs which
outputs a real signature, subject to the constraint that the output of the PRF (for a key which
is embedded in the subverted implementation and known only by the adversary) evaluated on
the computed signature represents a correct guess for one of the bits of the secret key. As the
analysis shows, this allows to recover the entire key with high probability.
Theorem 1. Let SS be a randomized signature scheme with signature space Σ, secret key space
SK = {0, 1}(cid:96), and min-entropy η ∈ N. Consider the class of SAs Abias described in Fig. 1,
and let F : {0, 1}κ × Σ → {0, 1} × [(cid:96)] be a (tprf, qprf, εprf)-secure PRF, Ubias be the uniform
distribution over Abias, and M be an arbitrary message sampling algorithm. Then:
(i) There exists an adversary B (and we describe it in the proof of this theorem) that (t, q, ε,
Ubias, M)-recovers the signing key of SS, for any τ, q ∈ N and with
ε ≥ 1 − (εprf + (cid:96) · e−q/(cid:96) + q2τ 2 · 2−η−1 + q · 2−τ ),
as long as qprf ≥ τ ·q, and tprf is at least τ ·q times the sum of the running time of algorithm
Sign plus the running time required to sample an element from M. The running time t of
B is at most q times the time to compute F , whereas the maximum running time of each
(cid:101)As,τ ∈ Abias is roughly τ times the sum of the running time of algorithm Sign plus the time
to compute F .
(ii) For any τ, q ∈ N, the class Abias is strongly secretly (tprf, q, εprf + q2τ 2 · 2−η−1, Ubias)-
undetectable.
Proof. (i) Consider the following adversary B playing the game described in Deﬁnition 9, for
the SA class Abias described in Fig. 1.
14This terminology is inherited from [BJK15], and it simply means that the subversion is undetectable and
stateless.
16
Adversary B:
 Initialize sk(cid:48) := 0(cid:96).
 The challenger chooses a subversion algorithm (cid:101)As,τ uniformly at random from
the SA class Abias.
(This is equivalent to sampling the algorithm from the
distribution Ubias, and implicitly corresponds to picking a random key s ∈
{0, 1}κ for the PRF.)
 For j ∈ [q] do:
σj ←(cid:101)As,τ (sk , mj) for mj ← M;
– Make a query to the signature oracle, receiving a pair (mj, σj) such that
– Compute (v, i) = Fs (σj).
– Set sk(cid:48)[i] := v.
 Return sk(cid:48).
Notice that B speciﬁes a single subversion algorithm, and runs in time roughly equal to q times
the time to evaluate F . Consider the following game.
Game G0(κ, q, τ, M):
 Sample (vk , sk ) ←$ KGen(1κ) and s ←$ {0, 1}κ.
 For q times:
– Initialize j := 0;
– Repeat the following instructions, until (sk [i] = v ∨ j = τ ):
* Increment the counter j := j + 1;
* Sample r ←$ R and m ←$ M;
* Compute a fresh signature σ = Sign(sk , m; r);
* Evaluate (v, i) = Fs (σ).
Deﬁne the event E := E(cid:48) ∨ E(cid:48)(cid:48), where both events E(cid:48) and E(cid:48)(cid:48) are deﬁned in the probability
space of G0 and are speciﬁed as follows:
 Event E(cid:48): The event becomes true whenever, for at least one of the q repetitions, the