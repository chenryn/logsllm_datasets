the service interval time has not been exceeded.
4.At P3, the third put causes a high event to be generated. (The timer has exceeded the service interval.)
The timer is not reset because the queue depth was not zero before the put. However, OK events are
enabled.
5.At G1, the MQGET call does not generate an event because the service interval has been exceeded and
OK events are enabled. The MQGET call does, however, reset the service timer.
6.At G2, the MQGET call does not generate an event because the service interval has been exceeded and
OK events are enabled. Again, the MQGET call resets the service timer.
7.At G3, the third get empties the queue and the service timer is equal to the service interval. Therefore
an OK event is generated. The service timer is reset and high events are enabled. The MQGET call
empties the queue, and this puts the timer in the OFF state.
Event statistics summary
Table 7 on page 33 summarizes the event statistics for this example.
Table 7. Event statistics summary for example 3
Attribute Event 1 Event 2
Time of event T(P3) T(G3)
Type of event High OK
TimeSinceReset T(P3) - T(0) T(G3) - T(P3)
HighQDepth 3 3
MsgEnqCount 3 0
MsgDeqCount 0 3
Queue depth events
Queue depth events are related to the queue depth, that is, the number of messages on the queue.
In IBM MQ applications, queues must not become full. If they do, applications can no longer put
messages on the queue that they specify. Although the message is not lost if this occurs, a full queue
can cause considerable inconvenience. The number of messages can build up on a queue if the messages
are being put onto the queue faster than the applications that process them can take them off.
The solution to this problem depends on the particular circumstances, but might involve:
• Diverting some messages to another queue.
• Starting new applications to take more messages off the queue.
• Stopping nonessential message traffic.
• Increasing the queue depth to overcome a transient maximum.
Advance warning that problems might be on their way makes it easier to take preventive action. For this
purpose, IBM MQ provides the following queue depth events:
Queue Depth High events
Indicate that the queue depth has increased to a predefined threshold called the Queue Depth High
limit.
IBM MQ Monitoring and performance 33
Queue Depth Low events
Indicate that the queue depth has decreased to a predefined threshold called the Queue Depth Low
limit.
Queue Full events
Indicate that the queue has reached its maximum depth, that is, the queue is full.
A Queue Full Event is generated when an application attempts to put a message on a queue that has
reached its maximum depth. Queue Depth High events give advance warning that a queue is filling up.
This means that having received this event, the system administrator needs to take some preventive
action. You can configure the queue manager such that, if the preventive action is successful and the
queue depth drops to a safer level, the queue manager generates a Queue Depth Low event.
The first queue depth event example illustrates the effect of presumed action preventing the queue
becoming full.
Related concepts
“Queue depth events examples” on page 37
Use these examples to understand the information that you can obtain from queue depth events
Related reference
Queue Full
Queue Depth High
Queue Depth Low
Enabling queue depth events
To configure a queue for any of the queue depth events you set the appropriate queue manager and
queue attributes.
About this task
By default, all queue depth events are disabled. When enabled, queue depth events are generated as
follows:
• A Queue Depth High event is generated when a message is put on the queue, causing the queue depth
to be greater than or equal to the value set for QDepthHighLimit.
– A Queue Depth High event is automatically enabled by a Queue Depth Low event on the same queue.
– A Queue Depth High event automatically enables both a Queue Depth Low and a Queue Full event on
the same queue.
• A Queue Depth Low event is generated when a message is removed from a queue by a
GET operation, causing the queue depth to be less than or equal to the value set for QDepthLowLimit.
A Queue Depth Low event is generated when a message is removed from a queue by a
GET operation, or would have been removed but has since expired, causing the queue depth to be less
than or equal to the value set for QDepthLowLimit.
– A Queue Depth Low event is automatically enabled by a Queue Depth High event or a Queue Full
event on the same queue.
– A Queue Depth Low event automatically enables both a Queue Depth High and a Queue Full event on
the same queue.
• A Queue Full event is generated when an application is unable to put a message onto a queue because
the queue is full.
– A Queue Full event is automatically enabled by a Queue Depth High or a Queue Depth Low event on
the same queue.
– A Queue Full event automatically enables a Queue Depth Low event on the same queue.
Perform the following steps to configure a queue for any of the queue depth events:
34 Monitoring and Performance for IBM MQ
Procedure
1.Enable performance events on the queue manager, using the queue manager attribute PERFMEV.
The events go to the SYSTEM.ADMIN.PERFM.EVENT queue.
2.Set one of the following attributes to enable the event on the required queue:
• QDepthHighEvent (QDPHIEV in MQSC)
• QDepthLowEvent (QDPLOEV in MQSC)
• QDepthMaxEvent (QDPMAXEV in MQSC)
3.Optional: To set the limits, assign the following attributes, as a percentage of the maximum queue
depth:
• QDepthHighLimit (QDEPTHHI in MQSC)
• QDepthLowLimit (QDEPTHLO in MQSC)
Restriction: QDEPTHHI must not be less than QDEPTHLO.
If QDEPTHHI equals QDEPTHLO an event message is generated every time the queue depth passes the
value in either direction, because the high threshold is enabled when the queue depth is below the
value and the low threshold is enabled when the depth is above the value.
Results
Note:
A Queue Depth Low event is not generated when expired messages are removed from
a queue by a GET operation causing the queue depth to be less than, or equal to, the value set for
QDepthLowLimit. IBM MQ generates the queue depth low event message only during a successful GET
operation. Therefore, when the expired messages are removed from the queue, no queue depth low
event message is generated. Additionally, after the removal of these expired messages from the queue,
QDepthHighEvent and QDepthLowEvent are not reset.
IBM MQ generates the queue depth low event message during either a successful
destructive GET operation, or a destructive GET operation that would have succeeded had a matching
message not expired. Otherwise, when expired messages are removed from a queue during general
background processing, no queue depth low event message is generated. Additionally, after the
removal of expired messages from a queue during general background processing, QDepthHighEvent and
QDepthLowEvent are not reset. For more information on expired message processing, see Tuning your
queue manager on IBM MQ for z/OS.
Example
To enable Queue Depth High events on the queue MYQUEUE with a limit set at 80%, use the following
MQSC commands:
ALTER QMGR PERFMEV(ENABLED)
ALTER QLOCAL('MYQUEUE') QDEPTHHI(80) QDPHIEV(ENABLED)
To enable Queue Depth Low events on the queue MYQUEUE with a limit set at 20%, use the following
MQSC commands:
ALTER QMGR PERFMEV(ENABLED)
ALTER QLOCAL('MYQUEUE') QDEPTHLO(20) QDPLOEV(ENABLED)
To enable Queue Full events on the queue MYQUEUE, use the following MQSC commands:
ALTER QMGR PERFMEV(ENABLED)
ALTER QLOCAL('MYQUEUE') QDPMAXEV(ENABLED)
IBM MQ Monitoring and performance 35
Shared queues and queue depth events on z/OS
On IBM MQ for z/OS, event monitoring is more straightforward for an application that uses shared queues
if all the queue managers in the queue sharing group have the same setting for the PERFMEV attribute.
When a queue depth event occurs on a shared queue, and the queue manager attribute PERFMEV is set
to ENABLED, the queue managers in the queue sharing group produce an event message. If PERFMEV
is set to DISABLED on some of the queue managers, event messages are not produced by those
queue managers, making event monitoring from an application more difficult. For more straightforward
monitoring, give each queue manager the same setting for the PERFMEV attribute.
This event message that each queue manager generates represents its individual usage of the shared
queue. If a queue manager performs no activity on the shared queue, various values in the event message
are null or zero. You can use null event messages as follows:
• Ensure that each active queue manager in a queue sharing group generates one event message
• Highlight cases of no activity on a shared queue for the queue manager that produced the event
message
Coordinating queue manager
When a queue manager issues a queue depth event, it updates the shared queue object definition to
toggle the active performance event attributes. For example, depending on the definition of the queue
attributes, a Queue Depth High event enables a Queue Depth Low and a Queue Full event. After updating
the shared queue object successfully, the queue manager that detected the performance event initially
becomes the coordinating queue manager.
If enabled for performance events, the coordinating queue manager performs the following actions:
1.Issues an event message that captures all shared queue performance data it has gathered since the
last time an event message was created, or since the queue statistics were last reset. The message
descriptor (MQMD) of this message contains a unique correlation identifier (CorrelId) created by the
coordinating queue manager.
2.Broadcasts to all other active queue managers in the same queue sharing group to request the
production of an event message for the shared queue. The broadcast contains the correlation identifier
created by the coordinating queue manager for the set of event messages.
Having received a request from the coordinating queue manager, if there is an active queue manager in
the queue sharing group that is enabled for performance events , that active queue manager issues an
event message for the shared queue. The event message that is issued contains information about all the
operations performed by the receiving (active) queue manager since the last time an event message was
created, or since the statistics were last reset. The message descriptor (MQMD) of this event message
contains the unique correlation identifier (CorrelId) specified by the coordinating queue manager.
When performance events occur on a shared queue, n event messages are produced, where n is a number
from 1 to the number of active queue managers in the queue sharing group. Each event message contains
data that relates to the shared queue activity for the queue manager that generated the event message.
Differences between shared and nonshared queues
Enabling queue depth events on shared queues differs from enabling them on nonshared queues. A key
difference is that events are enabled for shared queues even if PERFMEV is DISABLED on the queue
manager. This is not the case for nonshared queues.
Consider the following example, which illustrates this difference:
• QM1 is a queue manager with PerformanceEvent (PERFMEV in MQSC) set to DISABLED.
• SQ1 is a shared queue with QSGDISP set to (SHARED) QLOCAL in MQSC.
• LQ1 is a nonshared queue with QSGDISP set to (QMGR) QLOCAL in MQSC.
36 Monitoring and Performance for IBM MQ
Both queues have the following attributes set on their definitions:
• QDPHIEV (ENABLED)
• QDPLOEV (DISABLED)
• QDPMAXEV (DISABLED)
If messages are placed on both queues so that the depth meets or exceeds the QDEPTHHI threshold, the
QDPHIEV value on SQ1 switches to DISABLED. Also, QDPLOEV and QDPMAXEV are switched to ENABLED.
SQ1's attributes are automatically switched for each performance event at the time the event criteria are
met.
In contrast the attributes for LQ1 remain unchanged until PERFMEV on the queue manager is ENABLED.
This means that if, for example, the queue manager's PERFMEV attribute is ENABLED, DISABLED and then
set to ENABLED again, the performance event settings on shared queues might not be consistent with
those of nonshared queues, even though they might have initially been the same.
Queue depth events examples
Use these examples to understand the information that you can obtain from queue depth events
The first example provides a basic illustration of queue depth events. The second example is more
extensive, but the principles are the same as for the first example. Both examples use the same queue
definition, as follows:
The queue, MYQUEUE1, has a maximum depth of 1000 messages. The high queue depth limit is 80% and
the low queue depth limit is 20%. Initially, Queue Depth High events are enabled, while the other queue
depth events are disabled.
The IBM MQ commands (MQSC) to configure this queue are:
ALTER QMGR PERFMEV(ENABLED)
DEFINE QLOCAL('MYQUEUE1') MAXDEPTH(1000) QDPMAXEV(DISABLED) QDEPTHHI(80)
QDPHIEV(ENABLED) QDEPTHLO(20) QDPLOEV(DISABLED)
Related concepts
“Queue depth events” on page 33
Queue depth events are related to the queue depth, that is, the number of messages on the queue.
Related tasks
“Enabling queue depth events” on page 34
To configure a queue for any of the queue depth events you set the appropriate queue manager and
queue attributes.
Related reference
The MQSC commands
Queue depth events: example 1
A basic sequence of queue depth events.
Figure 7 on page 38 shows the variation of queue depth over time.
IBM MQ Monitoring and performance 37
Figure 7. Queue depth events (1)
Commentary
1.At T(1), the queue depth is increasing (more MQPUT calls than MQGET calls) and crosses the Queue
Depth Low limit. No event is generated at this time.
2.The queue depth continues to increase until T(2), when the depth high limit (80%) is reached and a
Queue Depth High event is generated.
This enables both Queue Full and Queue Depth Low events.
3.The (presumed) preventive actions instigated by the event prevent the queue from becoming full. By
time T(3), the Queue Depth High limit has been reached again, this time from above. No event is
generated at this time.
4.The queue depth continues to fall until T(4), when it reaches the depth low limit (20%) and a Queue
Depth Low event is generated.
This enables both Queue Full and Queue Depth High events.
Event statistics summary
Table 8 on page 39 summarizes the queue event statistics and Table 9 on page 39 summarizes which
events are enabled.
38 Monitoring and Performance for IBM MQ
Table 8. Event statistics summary for queue depth events (example 1)
Event statistics Event 2 Event 4
Time of event T(2) T(4)
Type of event Queue Depth High Queue Depth Low
TimeSinceReset T(2) - T(0) T(4) - T(2)
HighQDepth (Maximum queue depth since 800 900
reset)
MsgEnqCount 1157 1220
MsgDeqCount 357 1820
Table 9. Summary showing which events are enabled
Time period Queue Depth High Queue Depth Low event Queue Full event
event
Before T(1) ENABLED - -
T(1) to T(2) ENABLED - -
T(2) to T(3) - ENABLED ENABLED
T(3) to T(4) - ENABLED ENABLED
After T(4) ENABLED - ENABLED
Queue depth events: example 2
A more extensive sequence of queue depth events.
Figure 8 on page 40 shows the variation of queue depth over time.
IBM MQ Monitoring and performance 39
Figure 8. Queue depth events (2)
Commentary
1.No Queue Depth Low event is generated at the following times:
• T(1) (Queue depth increasing, and not enabled)
• T(2) (Not enabled)
• T(3) (Queue depth increasing, and not enabled)
2.At T(4) a Queue Depth High event occurs. This enables both Queue Full and Queue Depth Low events.
3.At T(9) a Queue Full event occurs after the first message that cannot be put on the queue because the
queue is full.
4.At T(12) a Queue Depth Low event occurs.
40 Monitoring and Performance for IBM MQ
Event statistics summary
Table 10 on page 41 summarizes the queue event statistics and Table 11 on page 41 summarizes
which events are enabled at different times for this example.
Table 10. Event statistics summary for queue depth events (example 2)
Event statistics Event 4 Event 6 Event 8 Event 9 Event 12
Time of event T(4) T(6) T(8) T(9) T(12)
Type of event Queue Depth Queue Depth Queue Depth Queue Full Queue
High Low High Depth Low
TimeSinceReset T(4) - T(0) T(6) - T(4) T(8) - T(6) T(9) - T(8) T(12) - T(9)
HighQDepth 800 855 800 1000 1000
MsgEnqCount 1645 311 1377 324 221
MsgDeqCount 845 911 777 124 1021
Table 11. Summary showing which events are enabled
Time period Queue Depth High Queue Depth Low event Queue Full event
event
T(0) to T(4) ENABLED - -
T(4) to T(6) - ENABLED ENABLED
T(6) to T(8) ENABLED - ENABLED
T(8) to T(9) - ENABLED ENABLED
T(9) to T(12) - ENABLED -
After T(12) ENABLED - ENABLED
Note: Events are out of syncpoint. Therefore you could have an empty queue, then fill it up causing
an event, then roll back all of the messages under the control of a syncpoint manager. However, event
enabling has been automatically set, so that the next time the queue fills up, no event is generated.
Configuration events
Configuration events are notifications that are generated when an object is created, changed, or deleted,
and can also be generated by explicit requests.
See “Controlling configuration, command, and logger events” on page 20 for information on how you turn
on events.
Configuration events notify you about changes to the attributes of an object. There are four types of
configuration events:
• Create object events
• Change object events
• Delete object events
• Refresh object events
The event data contains the following information:
Origin information
comprises the queue manager from where the change was made, the ID of the user that made the
change, and how the change came about, for example by a console command.
IBM MQ Monitoring and performance 41
Context information
a replica of the context information in the message data from the command message.
Context information is included in the event data only when the command was entered as a message
on the SYSTEM.COMMAND.INPUT queue.
Object identity
comprises the name, type and disposition of the object.
Object attributes
comprises the values of all the attributes in the object.
The event is a message in PCF format. For more information, see:
• Change object
• Create object
• Delete object
• Refresh object
In the case of change object events, a before message and an after message are produced. They have the
following fields in common, so that you can identify matching messages:
• The same correlation ID
• In the PCF header:
– The before message header has MsgSeqNumber': 1, 'Control': 'NOT_LAST'
– The after message header has MsgSeqNumber': 2, 'Control': 'LAST'
Every configuration event message that is generated is placed on the queue
SYSTEM.ADMIN.CONFIG.EVENT.
Related concepts
“Configuration events” on page 15
Configuration events are generated when a configuration event is requested explicitly, or automatically
when an object is created, modified, or deleted.
Related reference
Create object
Change object
Delete object
Refresh object
“Event types” on page 11
Use this page to view the types of instrumentation event that a queue manager or channel instance can
report
Configuration event generation
Use this page to view the commands that cause configuration events to be generated and to understand
the circumstances in which configuration events are not generated
A configuration event message is put to the configuration event queue when the CONFIGEV queue
manager attribute is ENABLED and
• any of the following commands, or their PCF equivalent, are issued:
– DELETE AUTHINFO
– DELETE CFSTRUCT
– DELETE CHANNEL
– DELETE NAMELIST
– DELETE PROCESS
– DELETE QMODEL/QALIAS/QREMOTE
42 Monitoring and Performance for IBM MQ
– DELETE STGCLASS
– DELETE TOPIC
– REFRESH QMGR
• any of the following commands, or their PCF equivalent, are issued even if there is no change to the
object:
– DEFINE/ALTER AUTHINFO
– DEFINE/ALTER CFSTRUCT
– DEFINE/ALTER CHANNEL
– DEFINE/ALTER NAMELIST
– DEFINE/ALTER PROCESS
– DEFINE/ALTER QMODEL/QALIAS/QREMOTE
– DEFINE/ALTER STGCLASS