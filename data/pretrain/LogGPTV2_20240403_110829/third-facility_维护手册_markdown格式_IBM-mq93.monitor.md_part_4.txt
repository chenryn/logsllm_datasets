### Service Interval and Event Generation

- **Service Interval Not Exceeded**: The service interval time has not been exceeded.
- **P3 - High Event Generated**: At P3, the third put operation causes a high event to be generated because the timer has exceeded the service interval. The timer is not reset because the queue depth was not zero before the put. However, OK events are enabled.
- **G1 - No Event, Timer Reset**: At G1, the MQGET call does not generate an event because the service interval has been exceeded and OK events are enabled. The MQGET call resets the service timer.
- **G2 - No Event, Timer Reset**: At G2, the MQGET call does not generate an event because the service interval has been exceeded and OK events are enabled. The MQGET call again resets the service timer.
- **G3 - OK Event, Timer Reset**: At G3, the third get operation empties the queue, and the service timer equals the service interval. Therefore, an OK event is generated. The service timer is reset, and high events are enabled. The MQGET call empties the queue, putting the timer in the OFF state.

### Event Statistics Summary

- **Table 7 (Page 33)**: Summarizes the event statistics for this example.
  - **Event 1**:
    - **Time of Event**: T(P3)
    - **Type of Event**: High
    - **Time Since Reset**: T(P3) - T(0)
    - **High Queue Depth**: 3
    - **Messages Enqueued**: 3
    - **Messages Dequeued**: 0
  - **Event 2**:
    - **Time of Event**: T(G3)
    - **Type of Event**: OK
    - **Time Since Reset**: T(G3) - T(P3)
    - **High Queue Depth**: 3
    - **Messages Enqueued**: 0
    - **Messages Dequeued**: 3

### Queue Depth Events

- **Queue Depth Events**: These events are related to the queue depth, which is the number of messages on the queue. In IBM MQ applications, queues must not become full. If they do, applications can no longer put messages on the specified queue, although the message is not lost. A full queue can cause significant inconvenience if messages are being put onto the queue faster than the applications can process them.

- **Solutions to Full Queues**:
  - Divert some messages to another queue.
  - Start new applications to take more messages off the queue.
  - Stop non-essential message traffic.
  - Increase the queue depth to overcome a transient maximum.

- **Advance Warning**: IBM MQ provides the following queue depth events for advance warning:
  - **Queue Depth High Events**: Indicate that the queue depth has increased to a predefined threshold called the Queue Depth High limit.
  - **Queue Depth Low Events**: Indicate that the queue depth has decreased to a predefined threshold called the Queue Depth Low limit.
  - **Queue Full Events**: Indicate that the queue has reached its maximum depth, i.e., the queue is full.

- **Event Generation**:
  - **Queue Depth High Event**: Generated when a message is put on the queue, causing the queue depth to be greater than or equal to the value set for QDepthHighLimit.
  - **Queue Depth Low Event**: Generated when a message is removed from a queue by a GET operation, causing the queue depth to be less than or equal to the value set for QDepthLowLimit.
  - **Queue Full Event**: Generated when an application is unable to put a message onto a queue because the queue is full.

- **Configuration**:
  - Enable performance events on the queue manager using the PERFMEV attribute.
  - Set the appropriate attributes to enable the event on the required queue:
    - QDepthHighEvent (QDPHIEV in MQSC)
    - QDepthLowEvent (QDPLOEV in MQSC)
    - QDepthMaxEvent (QDPMAXEV in MQSC)
  - Optionally, set the limits as a percentage of the maximum queue depth:
    - QDepthHighLimit (QDEPTHHI in MQSC)
    - QDepthLowLimit (QDEPTHLO in MQSC)

- **Example Configuration**:
  - To enable Queue Depth High events on the queue MYQUEUE with a limit set at 80%:
    ```mqsc
    ALTER QMGR PERFMEV(ENABLED)
    ALTER QLOCAL('MYQUEUE') QDEPTHHI(80) QDPHIEV(ENABLED)
    ```
  - To enable Queue Depth Low events on the queue MYQUEUE with a limit set at 20%:
    ```mqsc
    ALTER QMGR PERFMEV(ENABLED)
    ALTER QLOCAL('MYQUEUE') QDEPTHLO(20) QDPLOEV(ENABLED)
    ```
  - To enable Queue Full events on the queue MYQUEUE:
    ```mqsc
    ALTER QMGR PERFMEV(ENABLED)
    ALTER QLOCAL('MYQUEUE') QDPMAXEV(ENABLED)
    ```

### Shared Queues and Queue Depth Events on z/OS

- **Shared Queues**: On IBM MQ for z/OS, event monitoring is more straightforward for applications using shared queues if all queue managers in the queue sharing group have the same setting for the PERFMEV attribute.
- **Event Messages**: When a queue depth event occurs on a shared queue, each queue manager in the queue sharing group produces an event message if PERFMEV is set to ENABLED. If PERFMEV is set to DISABLED on some queue managers, those queue managers do not produce event messages, making event monitoring more difficult.
- **Coordinating Queue Manager**: When a queue manager issues a queue depth event, it updates the shared queue object definition to toggle the active performance event attributes. The coordinating queue manager performs the following actions:
  1. Issues an event message that captures all shared queue performance data.
  2. Broadcasts to all other active queue managers in the same queue sharing group to request the production of an event message for the shared queue.

### Differences Between Shared and Nonshared Queues

- **Enabling Events**: Enabling queue depth events on shared queues differs from enabling them on nonshared queues. Events are enabled for shared queues even if PERFMEV is DISABLED on the queue manager, which is not the case for nonshared queues.

### Queue Depth Events Examples

- **Example 1**:
  - **Queue Definition**: MYQUEUE1 with a maximum depth of 1000 messages, high queue depth limit of 80%, and low queue depth limit of 20%.
  - **MQSC Commands**:
    ```mqsc
    ALTER QMGR PERFMEV(ENABLED)
    DEFINE QLOCAL('MYQUEUE1') MAXDEPTH(1000) QDPMAXEV(DISABLED) QDEPTHHI(80) QDPHIEV(ENABLED) QDEPTHLO(20) QDPLOEV(DISABLED)
    ```
  - **Commentary**:
    - At T(1), the queue depth increases but does not cross the Queue Depth Low limit.
    - At T(2), the queue depth reaches the high limit, generating a Queue Depth High event.
    - At T(3), the queue depth decreases but does not generate an event.
    - At T(4), the queue depth reaches the low limit, generating a Queue Depth Low event.

- **Example 2**:
  - **More Extensive Sequence**: This example shows a more extensive sequence of queue depth events.
  - **Commentary**:
    - No Queue Depth Low event is generated at T(1), T(2), and T(3).
    - At T(4), a Queue Depth High event occurs, enabling Queue Full and Queue Depth Low events.
    - At T(9), a Queue Full event occurs.
    - At T(12), a Queue Depth Low event occurs.

### Configuration Events

- **Configuration Events**: Notifications generated when an object is created, changed, or deleted, and can also be generated by explicit requests.
- **Types of Configuration Events**:
  - Create object events
  - Change object events
  - Delete object events
  - Refresh object events
- **Event Data**:
  - Origin information: Queue manager, user ID, and change method.
  - Context information: Replica of context information from the command message.
  - Object identity: Name, type, and disposition of the object.
  - Object attributes: Values of all attributes in the object.
- **Change Object Events**: Generate a before and after message with common fields for identification.
- **Configuration Event Generation**: Use the CONFIGEV queue manager attribute to enable configuration events. Specific commands and their PCF equivalents generate configuration events.

This optimized version aims to provide a clear, concise, and professional explanation of the various events and configurations in IBM MQ.