title:XSSDS: Server-Side Detection of Cross-Site Scripting Attacks
author:Martin Johns and
Bj&quot;orn Engelmann and
Joachim Posegga
2008 Annual Computer Security Applications Conference
2008 Annual Computer Security Applications Conference
XSSDS: Server-side Detection of Cross-site Scripting Attacks
Martin Johns1, Bj¨orn Engelmann2, and Joachim Posegga1
1University of Passau, ISL
Innstr. 43, D-94032 Passau, Germany
(martin.johns|posegga)@uni-passau.de
2 University of Hamburg, SVS
Vogt-Koelln-Str. 30, D-22527 Hamburg, Germany
PI:EMAIL
Abstract
Cross-site Scripting (XSS) has emerged to one of the
most prevalent type of security vulnerabilities. While the
reason for the vulnerability primarily lies on the server-
side,
the actual exploitation is within the victim’s web
browser on the client-side. Therefore, an operator of a
web application has only very limited evidence of XSS is-
sues. In this paper, we propose a passive detection system
to identify successful XSS attacks. Based on a prototypi-
cal implementation, we examine our approach’s accuracy
and verify its detection capabilities. We compiled a data-set
of 500.000 individual HTTP request/response-pairs from 95
popular web applications for this, in combination with both
real word and manually crafted XSS-exploits; our detection
approach results in a total of zero false negatives for all
tests, while maintaining an excellent false positive rate for
more than 80% of the examined web applications.
1. Introduction
Cross-site Scripting (XSS) in web applications emerged
in the last years to one of the most prevalent types of se-
curity vulnerabilities [3]. Unlike related problems, such as
SQL injection, XSS attacks do not affect the server-side but
clients: The actual exploitation is within the victim’s web
browser. Therefore, the operator of a web application has
only very limited evidence of successful XSS attacks. XSS-
releated problems are therefore often overlooked or recog-
nized rather late.
This paper proposes a server-side Cross-site Scripting
Detection System (XSSDS); our approach is is based on
passive HTTP trafﬁc monitoring (cf. Fig. 1) and relies upon
the following observations:
• There is a strong correlation between incoming para-
• The set of all legitimate JavaScripts in a given web
meters and reﬂected XSS issues.
application is bounded.
This forms the basis for two novel detection approaches
to identify successfully carried out reﬂected XSS attacks
(Sec. 3) and to discover stored XSS code (Sec. 4). Our
approach does not require any changes to the actual appli-
cation or infrastructure: Both attack detection methods de-
pend solely on access to the HTTP trafﬁc. Our approach is
therefore applicable to all current web application technolo-
gies, i.e., programming languages, web servers, and appli-
cations.
Figure 1. Passive XSS attack detection
2. Technical background: Cross-site Scripting
The term Cross-site Scripting (XSS) [11] denotes a class
of string-based code injection attacks on web applications.
If a web application implements insufﬁcient input valida-
tion and/or output sanitation an adversary might be able to
inject arbitrary script code into the application’s HTML en-
coding. A successful XSS attack can lead to, e.g., compro-
mized authentication information, privilege escalation, or
disclosure of conﬁdential data. In the context of this paper
we will concentrate on injected JavaScript-code. However,
our methods are also applicable to other client-side script-
ing languages, like VBScript. XSS can be classiﬁed in three
different kinds: reﬂected, stored and DOM-based XSS:
• Reﬂected XSS denotes all non-persistent XSS issues,
which occur when a web application blindly echos
parts of the HTTP request in the corresponding HTTP
response’s HTML (see Listing 1). For successfully ex-
ploiting a reﬂected XSS vulnerability, the adversary
1063-9527/08 $25.00 © 2008 IEEE
1063-9527/08 $25.00 © 2008 IEEE
DOI 10.1109/ACSAC.2008.36
DOI 10.1109/ACSAC.2008.36
335
335
Figure 2. Dysfunctional removal ﬁlter remov-
ing the keyword “document”
has to trick the victim into sending a fabricated HTTP
request. This can, for instance, be done by sending
the victim a malicious link, or by including a hidden
Iframe into page controlled by an attacker.
• Stored XSS refers to all XSS vulnerabilities, where the
adversary is able to permanently inject the malicious
script in the vulnerable application’s storage. This re-
sults in every user that accesses the poisoned web page
receiving the injected script without further actions by
the adversary.
• DOM-based XSS [12] is a special variant of reﬂected
XSS, where logic errors in legitimate JavaScript and
careless usage of client-side data result in XSS condi-
tions. N.B.: Since in this case the offending data exists
solely in the browser and is not sent to the server, such
vulnerabilities are out of scope of of this paper.
1 $name = $_GET[’name’];
2 echo "Hallo " + $name + "!";
Listing 1. Reﬂected XSS through direct data-
inclusion
Current defence strategies: There are largely two dis-
tinct countermeasures for XSS prevention in ”real-life” web
Input
applications: Input ﬁltering and output sanitation.
ﬁltering describes the process of validating all incoming
data.
”Suspicious” input that might contain a code in-
jection payload is either rejected, encoded, or the ”offen-
sive” parts are removed using so called “removal ﬁlters”.
The protection approach implemented by these ﬁlters re-
lies on removing preddeﬁned keywords, such as 
Listing 2. External script inclusion attack
For external scripts, we are formulating a second policy:
An alarm is raised if the above algorithm ﬁnds a match with
≥ 10 characters in length and with the entire script’s URL
being a subsequence of the parameter. It is based on two
assumptions:
• No absolute URL can be shorter than 10 characters:
The mandatory http:// consumes 7, and no regular
domain shorter than 3 characters can be set up.
• An adversary has to control at least the preﬁx of the
URL to take advantage of the script. In web applica-
tions it is much more likely that the preﬁx is ﬁxed and
the sufﬁx is controlled by a parameter than the other
way around. In practically all exploitable cases the ad-
versary controls the entire URL.
3.7. Limitation
The proposed detector relies upon a direct comparison of
incoming HTTP-parameters and outgoing HTML. Stored
XSS is therfore not always detectable with this approach:
the required direct relationship between HTTP request and
response does not necessarily exist.
It might be possible
to detect the initial exploiting request/response pair, if the
given stored XSS takes effect immediately. However, in
certain cases, the HTTP request that injects the malicious
payload permanently in the application and the poisoned
HTML response are not created consecutively.
4. Generic XSS detection using a list of known
scripts
4.1. Overview
The detection approach presented in Section 3 cannot
reliably detect stored XSS; we propose a second, generic
XSS detector to address this shortcoming in this section.
The set of all employed JavaScripts of a given web appli-
cation is bounded. There might be variations within these