title:Online Payments by Merely Broadcasting Messages
author:Daniel Collins and
Rachid Guerraoui and
Jovan Komatovic and
Petr Kuznetsov and
Matteo Monti and
Matej Pavlovic and
Yvonne Anne Pignolet and
Dragos-Adrian Seredinschi and
Andrei Tonkikh and
Athanasios Xygkis
2020 50th Annual IEEE/IFIP International Conference on Dependable Systems and Networks (DSN)
Online Payments by Merely Broadcasting Messages
Daniel Collins, Rachid Guerraoui, Jovan Komatovic,
Matteo Monti, and Athanasios Xygkis
Matej Pavlovic
IBM Research
Yvonne-Anne Pignolet
DFINITY
EPFL
Dragos-Adrian Seredinschi
Informal Systems
Petr Kuznetsov
LTCI, T´el´ecom Paris
Institut Polytechnique Paris
Andrei Tonkikh
National Research University
Higher School of Economics
Abstract—We address the problem of online payments, where
users can transfer funds among themselves. We introduce
Astro, a system solving this problem efﬁciently in a decen-
tralized, deterministic, and completely asynchronous manner.
Astro builds on the insight that consensus is unnecessary to
prevent double-spending. Instead of consensus, Astro relies on
a weaker primitive—Byzantine reliable broadcast—enabling a
simpler and more efﬁcient implementation than consensus-
based payment systems.
In terms of efﬁciency, Astro executes a payment by merely
broadcasting a message. The distinguishing feature of Astro is
that it can maintain performance robustly, i.e., remain unaf-
fected by a fraction of replicas being compromised or slowed
down by an adversary. Our experiments on a public cloud
network show that Astro can achieve near-linear scalability in
a sharded setup, going from 10K payments/sec (2 shards) to
20K payments/sec (4 shards). In a nutshell, Astro can match
VISA-level average payment throughput, and achieves a 5×
improvement over a state-of-the-art consensus-based solution,
while exhibiting sub-second 95th percentile latency.
I. INTRODUCTION
Online payment systems promise secure ﬁnancial trans-
actions despite distrustful parties. Transactions need to be
processed correctly despite crashes and even Byzantine (i.e,
malicious) behavior of a fraction of the participants [50].
Popular examples of payment systems include centralized
solutions such as PayPal or VISA, as well as decentralized
ones like Bitcoin [62] and Ethereum [77]. Numerous newer
alternatives are also appearing, claiming new grounds in
terms of performance or security [2], [8], [35], [37].
transactions (known as smart contracts) [24],
While many payment systems [8], [77] allow for more
general
in
this paper we focus exclusively on payments: allowing a
participant Alice to transfer funds to a beneﬁciary Bob
if Alice’s balance is high enough. Payments represent the
largest application of blockchains today, they have driven
blockchain systems from their very beginning (Bitcoin) and
continue to do so (Facebook’s Libra and many others [30],
[33], [42], [43], [54], [59], [64], [74]).
We introduce Astro, a decentralized payment system capa-
ble of matching the performance of the largest centralized
Author names appear in alphabetical order, grouped by afﬁliation. This
work has been supported in part by the European grant 862082, AT2 –
ERC-2019-PoC and in part by a grant from Interchain Foundation.
solutions (e.g., 65K peak, 7K average transactions per
second, as recently reported by VISA [73]) for payments.
Astro provides honest participants with robust perfor-
mance, namely stable throughput and latency;
this holds
independently of network scheduling (i.e., asynchrony) and
of compromised replicas, as long as no more than 1/3 of the
replicas are affected. Systems building on total order (i.e.,
agreement), in contrast, are often susceptible to throughput
degradation due to a single slow replica, typically the leader.
This is an issue that received signiﬁcant attention in the
literature [7], [12], [26], [32], [60], which we discuss in detail
(§VII) and also quantify experimentally (§VI-D).
An important insight underlying Astro is that totally order-
ing all payments can be avoided. Indeed, recent theoretical
results show that total order (and hence consensus) is not
necessary for preventing double-spending [42], [43]. The
main contribution of this paper is to apply this insight by
building, for the ﬁrst time, an asynchronous deterministic
payment system that is decentralized and consensus-free, and
reporting on the empirical evaluation of this system.
Roughly speaking, instead of requiring a total order, we
give clients direct control over (the ordering of) the payments
they initiate. Prior solutions require agreement—usually via
an expensive consensus protocol [9], [34], [75]—on the order
across the payments of all clients. Each client
in Astro
independently orders their payments, thus maximizing the
degree of concurrency and improving efﬁciency. As a result,
a payment operation essentially reduces to broadcasting a
message. A weak broadcast primitive, called Byzantine reli-
able broadcast (BRB) is sufﬁcient for this purpose [15], [40],
[43]. This primitive can be implemented in an asynchronous
network, unlike consensus and total order broadcast [34].
The performance of Astro, even in uncivil executions, is only
limited by the speed of honest participants.
To record payment operations, Astro maintains a log
separately for each client. Whenever Alice makes a new
payment, she announces—through the broadcast layer—her
intent to record this payment in her (replicated) log. Payments
in her log are ordered by sequence numbers she assigns
herself. Astro guarantees that only Alice, the spender, may
record new payments in her log; we call this abstraction an
exclusive log, or xlog for short.
Essentially, preventing Alice from double-spending means
978-1-7281-5809-9/20/$31.00 ©2020 IEEE
DOI 10.1109/DSN48063.2020.00023
26
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 11:24:09 UTC from IEEE Xplore.  Restrictions apply. 
preventing her from reusing sequence numbers. To do so, the
broadcast layer in Astro provides Byzantine resilience. This
ensures that a malicious client cannot broadcast two different
payments with the same sequence number. For example,
Alice cannot broadcast a payment a for beneﬁciary Bob with
sequence number s, and for that same sequence number,
announce a different payment a’ for beneﬁciary Carol. At
most one of these conﬂicting payments passes through the
broadcast layer. As a result, Alice cannot double-spend.
Astro distinguishes between clients of the system and repli-
cas that operate the payment system. Clients usually connect
to the system infrequently to submit payments and check their
balance. Intuitively, each client is a lightweight participant
and thus relies on a certain replica—called a representative—
to broker her payments via broadcast. Nevertheless, each
client controls the ordering of her own payments. Replicas
maintain the system state (i.e., client xlogs), remain well-
connected to each other, and implement the broadcast-based
replication layer. Payments are safe and live as long as the
spender and 2/3 of the replicas, including the representative
replica handling the request, are correct.
This distinction between client and replica allows the
number of clients in Astro to scale independently of replicas;
a client may, of course, be its own representative. The
broadcast layer (implemented by replicas) relies on quorum
systems [56] to ensure Byzantine resilience, and consequently
does not scale beyond tens or hundreds of replicas. The
number of clients, on the other hand, can be orders of
magnitude larger.
For pedagogical reasons, we proceed in an incremental
manner. We ﬁrst discuss an implementation of Astro without
using digital signatures, before moving to a more efﬁcient
scheme with digital signatures and fewer messages. To scale
the number of replicas in Astro, we employ a sharding
scheme: We partition the system state and replicate each
partition among a subset of replicas. Sharding a payment
system is difﬁcult if payments need to be totally ordered
(i.e., based on consensus): Approving a cross-shard payment
requires all involved shards to coordinate, usually via a 2PC
protocol [48], [80]. We sidestep this major difﬁculty because
the shard of
the spender can—in our case—unilaterally
approve a cross-shard payment. Astro requires no cross-
shard coordination on the critical path of payment execution.
The beneﬁciary receives her funds via an asynchronous
notiﬁcation mechanism after the spender’s shard approves
it. Again, for simplicity of presentation, we present ﬁrst the
non-sharded case before explaining the sharded solution.
We evaluate Astro on a public wide-area cloud network
(Amazon EC2). We show that even without sharding and
even in synchronous and failure-free executions, Astro out-
performs a state-of-the-art consensus-based payment system.
Considering four shards with 52 replicas per shard, Astro can
sustain up to 20K payments per second at sub-second (95th
percentile) latency. But more importantly, Astro provides ro-
bust performance: In executions where some replica crashes
or suffers from high network latencies, overall throughput
is unaffected (except for the failed replica). Leader-based
consensus systems can experience throughput degradation
in such situations, to the point where payment execution
blocks altogether when the leader is affected, as we show
empirically.
Contributions. We design Astro with a focus on payments
for a permissioned model. Our system lacks some capabilities
compared to mature blockchains (e.g., Sybil resistance, smart
contracts, or full decentralization as Bitcoin or Ethereum)
or global payment systems (e.g., negative balance, fraud
detection as VISA). We do not intend Astro to replace such
systems, but rather demonstrate the efﬁciency and power of
broadcast for improving existing solutions.
Astro circumvents consensus-inherent complexities, being
the ﬁrst payment system that is completely asynchronous, de-
terministic, and guarantees robust performance. In summary:
1) Astro introduces the abstraction of an exclusive log:
A record of client payments uniquely controlled by
a certain client. Astro maintains the consistency of
exclusive logs through a weak broadcast primitive,
thus maximizing concurrency and efﬁciency.
2) Astro is fully asynchronous, including support for an
asynchronous sharding mechanism for scalability.
3) Our Astro implementation can match the performance,
with respect to payments, of centralized solutions (e.g.,
VISA) in a robust manner.
The rest of this paper is organized as follows. We ﬁrst
overview Astro (§II) and then detail its payment protocol
(§III). We describe our two implementations of Astro (§IV),
and present our asynchronous sharding (§V) scheme. Then
we discuss a thorough experimental evaluation of Astro (§VI)
and present related work (§VII). Additional details on broad-
cast layers are provided in [27, Appendix B]. Furthermore,
in [27, Appendix A] we cover asynchronous reconﬁguration
for Astro.
II. OVERVIEW
At the heart of Astro lie two building blocks that are
closely related to each other. These distinguish our payment
system from prior solutions, namely: (1) exclusive logs, or
xlogs, and (2) a broadcast-based replication layer.
Exclusive Logs. An xlog is an append-only log comprising
all the outgoing payment operations initiated by a certain
client. Intuitively,
the xlog of Alice can be seen as her
personal ledger of expenditures. Alice is exclusively allowed
to append payments to her xlog, and we refer to Alice as the
owner of her log.
It is Alice herself who establishes the ordering of payment
operations in her xlog, by assigning a sequence number to
each payment. Besides a sequence number, each payment
also speciﬁes the spender (which is always Alice in this case),
the amount, and the beneﬁciary of the payment.
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 11:24:09 UTC from IEEE Xplore.  Restrictions apply. 
27
xlogs
Alice
0
1
…
Carol
0
1
2
Bob
0
1
Payment
spender: Bob
beneficiary: Alice
amount: $43
sn: 1
Bob
sk
replica
b
submit
r0
a
b
Fig. 1: System state in Astro, consisting of multiple xlogs
(exclusive logs). Each xlog contains payments operations having
the same spender (i.e., belonging to the same client). For example,
Bob’s xlog comprises two operations; the second of these is a
payment of $43 from Bob to Alice, having sequence number 1.
Astro’s state consists of multiple xlogs, one per client, as
we sketch in Figure 1. In the basic version of Astro, each
replica holds a copy of the entire state (we revise this to
consider sharding in §V).
In a static system, storing xlogs could be completely
avoided, by only storing balances and a single sequence
number for each client. Storing the xlogs is crucial for re-
conﬁguration of Astro, i.e., for dynamically changing system
membership [27, Appendix A] and to enable auditability.
Consistent Replication of xlogs. The goal of the replica-
tion layer in Astro is to keep all xlogs consistent across
replicas despite Byzantine failures. To do so efﬁciently, we
exploit an idiosyncrasy of xlogs, namely that each such
log restricts append access to the (authenticated) owner
client. Consequently, we never have to deal with concurrent
modiﬁcations on a xlog. Each client can modify their own
xlog autonomously: Astro supports concurrent modiﬁcation
of any number of xlogs.
Each client is associated with a single replica acting as its
representative. A single replica can represent many clients.
The representative is in charge of broadcasting the client’s
payments to other replicas, and corresponds to a broker or
a bank. Akin to a real bank, only the representative can
broadcast outgoing payments for a client’s xlog. All payments
still have to be ordered and submitted by the client. Unlike
with banks, however, multiple replicas in Astro replicate each
client’s data (xlog).
A client performs a payment by submitting it
to her
representative r. Replica r ensures that all copies of the
client’s xlog are updated consistently. To this end, replicas
implement a broadcast primitive guaranteeing the following
crucial property: no client can announce two conﬂicting
payments (i.e., with the same spender) for the same sequence
number, despite Byzantine clients and/or replicas. In other
words, Astro guarantees total order within—but not across—
xlogs, departing from prior designs that employ a total order
across all payments (Figure 2). From the clients’ perspective,
Astro provides FIFO guarantees [46], [52].