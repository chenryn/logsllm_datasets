The Art of Software Security Assessment - Identifying and Preventing Software Vulnerabilities 
841 
Identifying weaknesses in IP processing code is more than just finding low-level flaws 
such as integer wraps or buffer overflows; you also must recognize logic problems 
with how traffic is processed. This requires a good working knowledge of how basic 
routing is performed, so that you can assess how potentially dangerous packets arrive 
at a destination, and where they can originate from. As such, the following 
paragraphs are dedicated to providing a brief examination of the IP routing facilities 
present on a typical host. 
To communicate with other hosts on a network, a machine must have at least one 
network interface. A network interface is simply a network device that contains a 
unique hardware address and can be used to send and receive data over a network. 
A network interface is a software abstraction provided by the OS kernel in that it's a 
virtual device, though it obviously must be associated with a physical network device 
if you expect to send data to external nodes. Although it is possible to have several 
interfaces associated with a single network hardware device, the most common 
configuration for a standard host is to have just one interface per network device. 
Having multiple interfaces tied to the same network device is useful in a number of 
situations, such as establishing virtual networks over existing connected networks, or 
when a single machine needs to have more than one IP address on a network 
(perhaps because it's hosting a virtual machine). 
On an IP network, each connected interface has an IP address, which is a 32-bit 
value that uniquely identifies a host on the network that they are connected to. An IP 
address can be further broken down into two variable length bitfieldsa network ID and 
a host ID. The network ID indicates the sub-network (commonly called the subnet) 
that the host belongs to, and the host ID uniquely identifies the host on that particular 
network. 
Historically, the IP address space was broken down into several classes, and an IP 
address's network ID was determined by which class it belonged to. Classes predate 
the classless subnetting used today, but they are still relevant in some circumstances 
because certain classes are reserved for special use. The five address classes, class A 
through class E, are summarized here: 
Class A a class A address has the most significant bit of the IP address set to 
0, followed by 7 bits indicating the network ID. Thus, there are 24 bits 
remaining for host IDs, allowing for a large number of hosts to exist on the 
class A network (16, 777, 216 to be precise, although, as you see shortly, 
some IPs are reserved for special use). 
Class B class B IP addresses start with the leading bits "10", followed by a 
14-bit network ID. This leaves 16 bits for host IDs, making class B's 
considerably smaller than class A networks (although there can be more class 
B's, because the network ID is larger). 
Class C class C IP addresses begin with the leading bits "110" and have 21 
network ID bits following. The host ID is therefore only 8 bits, so they are 
The Art of Software Security Assessment - Identifying and Preventing Software Vulnerabilities 
842 
much smaller than class B networks, with only 256 unique IP addresses 
available on each class C. 
Class D class D IP addresses begin with the leading bits "1110" but have no 
following network ID bits. Class D IP addresses are especially reserved as 
multicast addresses. A multicast address allows a single IP address to refer 
to multiple hosts. You revisit multicast addresses at various stages throughout 
this chapter and Chapter 15(? [????.]). 
Class E class E addresses begin with the leading bits "1111" and also have no 
following network ID bits. Class E is for experimental use and should not be 
routed. 
The problem with using address classes is that there are only a limited number of 
networks available, a number of which are reserved for various special purposes. 
Furthermore, the fixed-size IP address classes might not be appropriately sized for 
certain networks. For example, if you had 280 nodes on a network, you have just a 
few too many for a class C, but are only using up a fraction of a class B. As such, 
today's IP implementations allow for arbitrary sized network IDs. The network ID for 
an IP address is determined by the network mask (also known as the subnet mask, or 
netmask), which simply indicates which bits of the IP address are reserved for the 
network ID. Network masks can be expressed in one of two ways; in netmask 
notation or in classless inter domain routing (CIDR) notation. Netmask notation 
involves writing a hosts IP address followed by a bitmask with every network ID bit 
set to 1 and every host ID bit set to 0. For example, if you had the IP address 
192.168.2.100 and the first 24 bits were used to specify the network ID, it would be 
written as 192.168.2.100/255.255.255.0. With CIDR notation, you express the 
netmask by writing the IP address followed by the size in bits of the network ID. 
Returning to our previous example of 192.168.2.100 with a 24 bit network ID, it 
would be written as 192.168.2.100/24. 
The network ID is used to subclass the entire IP address space into smaller, more 
manageable sub-networks. Breaking down networks this way enforces hierarchy 
upon the otherwise unstructured address space and eases the job of routing packets 
by keeping tables of network ranges rather than tables of individual nodes, as you will 
see shortly. 
So, IP networks are subdivided into subnets, which are groups of hosts that share the 
same subnet mask and network ID. All hosts in a subnet can talk to each other 
through the data link layer. Lower-level protocols such as the Address Resolution 
Protocol (ARP) help machines map data-link layer addresses to IP addresses so that 
they can figure out how to talk to machines on the same subnet. ARP is an integral 
part of the TCP/IP suite, and interested readers are encouraged to read more about it 
at http://en.wikipedia.org/wiki/Address_Resolution_Protocol, or from RFC 826 
(www.ietf.org/rfc/rfc0826.txt?number=). 
The Art of Software Security Assessment - Identifying and Preventing Software Vulnerabilities 
843 
A typical IP machine has one active interfaceone connection to a network. Machines 
that form the routing infrastructure of IP networks have more than one interface and 
are responsible for routing packets between their interfaces. These machines are 
called gateways or routers. 
If a machine wants to send an IP datagram, it looks at its routing table, which has a 
list of simple rules. In general, a host can directly send packets only to another host 
in the same subnet. If a computer wants to talk to another computer in the same 
subnet, its routing table tells it which interface to send the packet out on. If a 
computer wants to talk to a host on another subnet, its routing table tells it which 
computer on its subnet is responsible for routing packets to the destination subnet. 
Naturally, the process is more complex in large networks, but this description is the 
basics of how packets move across the Internet. 
Several special IP addresses are quite important from a security perspective. Say 
your IP address is 10.20.30.40, and your network mask is 255.255.255.0. This 
means your subnet contains the 256 addresses between 10.20.30.0 and 
10.20.30.255. 10.20.30.0 is called the subnet address, and any packet sent to that 
address is usually picked up by a subset of the hosts in the network. The address 
10.20.30.255 is the directed subnet broadcast address, and packets destined there 
are picked up by all hosts in the subnet. The special address 255.255.255.255 also 
functions as a subnet broadcast address for the sender's local subnet. The security 
implications of these addresses are addressed in the discussion of firewall spoofing 
attacks in Chapter 15(? [????.]). 
IP Packet Structures 
The basic transmission unit for sending data using IP is the IP packet. An IP packet 
is a discrete block of data prepended with a header that contains information 
necessary for routing the packet to the appropriate destination. The term IP 
datagram is often used interchangeably with IP packet, and they are effectively 
synonymous. An IP datagram can be fragmented into smaller pieces and sent to the 
destination as one or more fragments. These fragmented packets are reassembled at 
the destination into the original IP datagram. 
The basic header definition for an IPv4 packet is shown in Figure 14-1. The IP packet 
header defines a small set of data elements (fields) used to help deliver the packet to 
its specified destination. The following list describes these fields: 
IP version (4 bits) This field specifies the IP version of the datagram being 
transmitted. You're primarily concerned with IP version 4, as it's the version 
used on most IP networks. IP version 6, the next version of the IP protocol, 
has been in development for some time and now is supported by most OSs 
and some auxiliary products but is not discussed in this chapter. 
The Art of Software Security Assessment - Identifying and Preventing Software Vulnerabilities 
844 
Header length (4 bits) This field specifies the length of the IP header in 32-bit, 
4-byte words. A standard IP header is 20 bytes long, which gives this field a 
normal value of 5. Variable-length optional data elements can be included at 
the end of the IP header, extending its length to a maximum of 60 bytes 
(making the header length 0x0F). 
Type of service (TOS, 8 bits) The TOS field defines attributes of the requested 
quality of service. Most modern IP stacks effectively ignore this field. 
Total length (16 bits) This field defines the size of the datagram being 
transmitted in bytes. It includes the number of bytes in the IP header and the 
number of bytes following the header that constitute the data portion of the 
packet. Therefore, the amount of data an IP packet is delivering can be 
calculated as its header length subtracted from its total length. 
IP identification (16 bits) This field contains a unique identifier for the 
datagram. Its primary purpose is to identify a series of IP packets as all being 
part of the same IP datagram. In other words, if an IP datagram is fragmented 
in transit, all the resulting IP fragments have the same IP ID. 
Flags (3 bits) The flag bits are used for fragmentation processing. There are 
two flags (and one reserved bit). The DF (don't fragment) flag indicates that 
the packet must not be fragmented. The MF (more fragments) flag indicates 
that more fragments on their way to complete the IP datagram. 
Fragment offset (13 bits) This field indicates where the data in this IP packet 
belongs in the reassembled IP datagram. It's specified in 64-bit, 8-byte 
chunks, with a maximum possible value of 65528. This field is explained in 
more detail in "Fragmentation" later in this chapter. 
Time to live (TTL, 8 bits) This field indicates how many more routers the 
datagram can pass through before it's discarded and an error is returned to 
the sender. Each intermediate machine that routes an IP packet decrements 
the packet's TTL. If the TTL reaches 0, the packet is discarded and an ICMP 
error message is sent to the originator. This field is used mostly to ensure that 
packets don't get caught in routing loops, where they bounce between routers 
in an infinite loop. 
Protocol (8 bits) This field indicates the protocol of the data the packet is 
delivering. Typically, it specifies a transport-layer protocol (such as UDP or 
TCP), but it can also specify a tunneling protocol, such as IP packets 
encapsulated inside IP (IPIP), or IPv6 over IPv4, or an error or control protocol, 
such as Internet Control Message Protocol (ICMP). 
Header checksum (16 bits) This field is a 16-bit ones complement checksum of 
the IP header (along with any options that are included). It's used to ensure 
that the packet hasn't been modified or corrupted in transmission. 
Source IP address (32 bits) This field indicates the sender of the datagram. 
This information isn't verified, so it's possible to forge datagrams to make it 
look as though they come from a different source. The ability to forge 
datagrams is widely considered a major security shortcoming in IP version 4. 
The Art of Software Security Assessment - Identifying and Preventing Software Vulnerabilities 
845 
Destination IP address (32 bits) This field specifies the destination of the 
datagram. IP addresses generally denote a single destination host, although 
some special addresses can be interpreted as broadcast or multicast 
destinations. 
Figure 14-1. IPv4 header diagram 
Basic IP Header Validation 
Before software can safely work with an IP datagram, the fields that make up the IP 
header need to be validated to ensure that the packet is legitimate. If IP processing 
code fails to adequately check the fields within an IP header, it will most likely be 
exposed to a range of potential problems. The consequences of insufficient validation 
depend on where the IP processing code resides in the system; failures in kernel 
mode processing or in embedded devices tend to have more dramatic effects than 
failures in userland processes. These effects can range from memory management 
related problems (such as a crash of the application or device, or even exploitable 
memory corruption conditions) to passing packets up to higher layers in ways that 
can cause problems with state and, ultimately, system integrity. The following 
sections examine some common points of inquiry. 
Is the Received Packet Too Small? 
Typically, an IP datagram is passed to the IP stack from a lower-level networking 
layer that hands over the data for the packet in a buffer and states how many bytes 
of data are in the packet. 
Before this data can be processed as though it's a valid IP header, you have to make 
sure you get at least 20 bytesthe minimum size of a valid IP header. If an 
implementation overlooks this check, it's likely to read memory that isn't a legitimate 
part of the packet. This oversight normally wouldn't lead to a major security impact 
The Art of Software Security Assessment - Identifying and Preventing Software Vulnerabilities 
846 
unless perhaps the data is read from an unmapped page, generating a memory 
access violation. 
In the worst-case scenario, however, the IP processing code neglects to check the 
packet size at all, and then uses it in a way that's vulnerable to numeric overflows. For 
example, consider the following packet sniffer. (The author's name has been omitted 
because the example is old and no longer in use.) 
void 
do_pcap(u_char * udata, const struct pcap_pkthdr * hdr, 
    const u_char * pkt) 
{ 
  if (hdr->caplen caplen); 
} 
This code is a standard pcap callback function. The pkt parameter points to the packet 
data, and the hdr->caplen value is the amount of data taken from the network. The 
code ensures there's enough packet data for an Ethernet header, and then calls this 
function: 
int do_ethernet(const u_char * pkt, int length) 
{ 
  char buffer[PCAP_SNAPLEN]; 
  struct ether_header *eth = (void*) pkt; 
  u_char *ptr; int i; 
  if (ntohs(eth->ether_type) != ETHERTYPE_IP) 
    return 0; 
  memcpy(buffer, pkt + ETHER_HDR_LEN, length - ETHER_HDR_LEN); 
  ... code edited for brevity ... 
  return do_ip((struct ip*)buffer, length - ETHER_HDR_LEN); 
} 
The preceding code copies the Ethernet payload into a buffer and calls do_ip(), 
passing that buffer and the length of the payload. Here's the code for do_ip(): 
int do_ip(const struct ip * ip, int length) 
{ 
  char buffer[PCAP_SNAPLEN]; 
The Art of Software Security Assessment - Identifying and Preventing Software Vulnerabilities 
847 
  int offset = ip->ip_hl  IPv %d\t", ip->ip_v); 
  printf("sIP %s\t", inet_ntoa(ip->ip_src)); 
  printf("dIP %s\t", inet_ntoa(ip->ip_dst)); 
  printf("protokols %d\n", ip->ip_p); 
  memcpy(buffer, (void*)ip + offset, length - offset); 
  switch(ip->ip_p) { 
The do_ip() function calculates offset, which is the IP header length field taken from 
the packet. At this point, it could be almost anything you wanted. The code then 
copies length offset bytes to another local stack buffer. Assume you make ip_hl the 
normal value of 5 so that offset is 20. If you have sent only 10 bytes of Ethernet 
payload, the memcpy()s count argument is -10, thus resulting in a large copy into the 
destination buffer. A vulnerability of this nature has only a limited impact, as these 
types of packets usually aren't routable and, therefore, can be sent only on a local 
network segment (unless the packet is encapsulated, an issue discussed in Chapter 
15(? [????.]), "Firewalls"). 
Does the IP Packet Contain Options? 
IP packets have a variable-length header that can range between 20 and 60 bytes. 
The header size is specified in the first byte of the IP packet by the IP header length 
field. IP headers are usually just 20 bytes in length and have no options attached. IP 
processing code can't just assume the header is 20 bytes, however, or it will run into 
trouble quickly. For example, many password sniffers used to read data from the 
network into the following structure: 
struct etherpacket { 
    struct ethhdr       eth; 
    struct iphdr       ip; 
    struct tcphdr       tcp; 
char                    data[8192]; 
}; 
The sniffers would then parse packets by looking at the ip and tcp structures. 
However, this processing worked only for the minimum length ip and tcp headers, 
both 20 bytes. Packets with any options set in IP or TCP aren't decoded correctly, and 
the sniffer will misinterpret the packet. For example, if the IP header has options 
attached, they will mistakenly be interpreted as the next layer protocol header (in this 
The Art of Software Security Assessment - Identifying and Preventing Software Vulnerabilities 
848 
case, TCP). Therefore, the sniffer will see the packet with totally different TCP 
attributes than it really has. 
Is the IP Header Length Valid? 
Certain values for the IP header length are invalid and might cause problems if they're 
not accounted for correctly. Specifically, the IP header must be at least 20 bytes, so 
the IP header length must be at least 5 (recall that it's multiplied by 4 to get the actual 
IP header size). Any value less than 5 is invalid. For an example of this problem, look 
at an excerpt of code from an older version of the tcpdump utility: 
/* 
 * print an IP datagram. 
 */ 
void 
ip_print(register const u_char *bp, register u_int length) 
{ 
    register const struct ip *ip; 
    register u_int hlen, len, off; 
    register const u_char *cp; 
    ip = (const struct ip *)bp; 
... code edited... 
    hlen = ip->ip_hl * 4; 
... code edited... 
        if ((hlen -= sizeof(struct ip)) > 0) { 
            (void)printf("%soptlen=%d", sep, hlen); 
            ip_optprint((u_char *)(ip + 1), hlen); 
        } 
When ip_print() is called, tcpdump calculates the header length, hlen, by multiplying 
ip_hl by 4, but it doesn't check whether ip_hl is at least 5 to begin with. Then it 
checks to make sure (hlen -= sizeof(struct ip)) is higher than 0. Of course, this 
check would prevent an underflow if hlen wasn't an unsigned integer. However, 
because hlen is unsigned, the result of this expression is a very large positive number. 
As a result, the validation check is passed, and the ip_optprint() function is given an 
infinite amount of memory to analyze. 
Is the Total Length Field too Large? 
The Art of Software Security Assessment - Identifying and Preventing Software Vulnerabilities 
849 
After enough data has been read in to obtain the IP header, IP processing code needs 
to examine the total length field. This value specifies the length in bytes of the total 
IP packet, including the header. The code must verify that enough packet data has 
been received from the network to match the total length specified in the IP header. 