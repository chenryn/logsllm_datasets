比如 NTLM SSP 实现的就是一种 Challenge/Response 验证机制。
而 Kerberos 实现的就是基于 ticket 的身份验证机制。
我们可以编写自己的 SSP，然后注册到操作系统中，让操作系统支持更多的自定义的身份验证方法。
SSPI 接口提供了多种功能，包括 AcquireCredentialsHandle，InitializeSecurityContext 和 AcceptSecurityContext。
在 NTLM 身份验证期间，客户端和服务器都将使用这些功能。简要描述步骤如下:
1. 客户端调用 `AcquireCredentialsHandle` ，以获得对用户凭证的间接访问。
2. 然后客户端调用 `InitializeSecurityContext` ，这个函数在第一次调用时，会创建一个 type 1 消息，因此类型为 NEGOTIATE。
3. 服务器在收到消息时，会调用 `AcceptSecurityContext` 函数。这个函数将创建 type 2 消息，即 CHALLENGE。
4. 当收到这个消息时，客户端将再次调用 `InitializeSecurityContext` ，但这次将 CHALLENGE 作为参数传递。NTLMSSP 包负责一切，通过加密 challenge 计算 response ，并将产生最后的 AUTHENTICATE 消息。
5. 在收到最后这条消息后，服务器也会再次调用 `AcceptSecurityContext` ，认证验证将自动进行。
![](../../../../assets/img/Integrated/Windows/笔记/认证/42.png)
之所以解释这些步骤，是为了说明在现实中，从客户端或服务器的角度来看，交换的3条消息的结构并不重要。我们凭借对NTLM协议的了解，知道这些消息对应的是什么，但客户端和服务器都不关心。这些消息在微软文档中被描述为不透明的令牌。
这意味着这5个步骤完全独立于客户端的类型或服务器的类型。只要协议中有适当的位置，以允许从客户端到服务器以一种或另一种方式交换这种不透明的结构，它们就可以工作，而不管使用什么协议。
![](../../../../assets/img/Integrated/Windows/笔记/认证/43.png)
我们抓包分析 ntlm 的时候，就会看到 ntlm 是放在 GSS-API 里面
![](../../../../assets/img/Integrated/Windows/笔记/认证/37.png)
为啥这里会出现 GSSAPI 呢，SSPI 是 GSSAPI 的一个专有变体，进行了扩展并具有许多特定于 Windows 的数据类型。
SSPI 生成和接受的令牌大多与 GSS-API 兼容。所以这里出现 GSSAPI 只是为了兼容，我们可以不必理会。
可以直接从 NTLM SSP 开始看起。注册为 SSP 的一个好处就是，SSP 实现了了与安全有关的功能函数，那上层协议(比如 SMB)在进行身份认证等功能的时候，就可以不用考虑协议细节，只需要调用相关的函数即可。
而认证过程中的流量嵌入在上层协议里面。不像 kerbreos，既可以镶嵌在上层协议里面，也可以作为独立的应用层协议。ntlm 是只能镶嵌在上层协议里面，消息的传输依赖于使用 ntlm 的上层协议。比如镶嵌在 SMB 协议里,或镶嵌在 HTTP 协议。
**Integration with HTTP (MS-NTHT)(NTLM over HTTP)**
以 HTTP 为例
```
GET /index.html HTTP/1.1
Host: www.test.com
User-Agent: Mozilla/5.0
Accept: text/html
```
在这个例子中，必须的元素是HTTP行为(GET)、请求页面的路径(/index.html)、协议版本(HTTP/1.1)或Host头(Host: www.test.com)。
除此之外,添加其他的http报文也是可以的
正是利用这一特性，才能够将 NTLM 消息从客户端传输到服务器。客户端在一个名为 Authorization 的头中发送消息，服务器在一个名为 WWW-Authenticate 的头中发送消息。如果客户端试图访问一个需要认证的网站，服务器将通过添加 WWW-Authenticate 头来响应，并突出显示它支持的不同认证机制。对于 NTLM，它将简单地说 NTLM。
客户端知道需要 NTLM 认证，将发送授权头中的第一条消息，用 base64 编码，因为该消息不仅包含可打印字符。服务器将在 WWW-Authenticate 头中回应一个挑战，客户端将计算响应，并在授权头中发送。如果认证成功，服务器通常会返回一个 200 的返回码，表示一切顺利。
```
> GET /index.html HTTP/1.1
> Host: www.test.com
> User-Agent: Mozilla/5.0
> Accept: text/html
   GET /index.html HTTP/1.1
> Host: www.test.com
> User-Agent: Mozilla/5.0
> Accept: text/html
> Authorization: NTLM 
   WWW-Authenticate: NTLM 
   GET /index.html HTTP/1.1
> Host: www.test.com
> User-Agent: Mozilla/5.0
> Accept: text/html
> Authorization: NTLM 
  < HTTP/1,200 OKAY.
  < WWW-Authenticate: NTLM
  < Content type: text/html
  < Content-Length: 0
  < Connection: close
```
只要 TCP 会话是开放的，认证就会有效。然而，一旦会话关闭，服务器将不再拥有客户端的安全内容，就必须进行新的认证。这种情况经常会发生，由于微软的 SSO（单点登录）机制，这对用户来说往往是透明的。
更多内容: https://learn.microsoft.com/en-us/openspecs/windows_protocols/ms-ntht/f09cf6e1-529e-403b-a8a5-7368ee096a6a
**Integration with SMB (NTLM Over Server Message Block)**
它是SMB协议，用于访问网络共享,SMB协议的工作原理是使用命令。例如，有 `SMB_COM_OPEN` 、`SMB_COM_CLOSE` 或 `SMB_COM_READ` ，这些命令用于打开、关闭或读取文件。
SMB 还具有专用于配置 SMB 会话的命令，该命令为 `SMB_COM_SESSION_SETUP_ANDX` 。此命令中的两个字段专用于 NTLM 消息的内容。
- LM/LMv2 Authentication: OEMPassword
- NTLM/NTLMv2 authentication: UnicodePassword
从 SMB 数据包的示例可以看到，其中包含服务器对身份验证的响应
- https://wiki.wireshark.org/SampleCaptures?action=AttachFile&do=get&target=smbtorture.cap.gz
    ![](../../../../assets/img/Integrated/Windows/笔记/认证/44.png)
以上 2 个案例表明 NTLM 消息的内容与协议无关。它可以包含在任何支持它的协议中
更多内容: https://learn.microsoft.com/en-us/openspecs/windows_protocols/ms-nlmp/c083583f-1a8f-4afe-a742-6ee08ffeb8cf
---
#### Signing
Windows 下的 SSP 除了提供身份认证功能以外，还提供会话安全功能。
比如 Client 与 Server 建立了一个 Socket 连接后，可以使用 SSP 与 Server 进行身份认证，身份认证完以后，Client 与 Server 还可以利用 SSP 提供的会话安全功能为后续的数据包进行签名与加密，以防止数据包被中间人篡改、窃听。
SSP 提供的会话安全功能，是基于 session key 的。在 Client 与 Server 端进行了身份认证以后，Client 与 Server 端都能够同时得到一个用于会话安全功能的 session key。攻击者要想知道这个 session key，就必须要知道 Client 的原始密码，而对于 Credential Relay 的攻击场景，攻击者只是站在一个中间人的位置对 Credential 进行转发，是不可能知道客户端的原始密码的
![](../../../../assets/img/Integrated/Windows/笔记/认证/45.png)
攻击者在攻击一个开启了 Signing/Encryption 的服务器的时候,当认证完毕之后，使用一个客户端和服务端都知道的 session key 对后续所有的操作进行加密，攻击者由于没有 session key，也没法对内容进行加密解密，所以也就没办法进行 Relay, 最多只能将流量原封不动转发过去。
这个 key 是 sessionkey，需要使用用户 hash 去生成，攻击者没有用户 hash，所以没有 sessionkey, 也就是没办法加解密，这个时候签名也就起到了防御 Relay 的效果。
一般情况下，域控会默认开启，而 Windows 单机默认都不会开, 因为用于域控制器的 GPO 包含以下条目：
![](../../../../assets/img/Integrated/Windows/笔记/认证/46.png)
关闭签名验证的命令： Windows Server 系列中 RequireSecuritySignature 子键默认值为 1
```
reg add HKLM\SYSTEM\CurrentControlSet\Services\LanmanServer\Parameters /v RequireSecuritySignature /t REG_DWORD /d 0 /f
```
![](../../../../assets/img/Integrated/Windows/笔记/认证/47.png)
关于 SMB 签名的更多信息请参考官方文档 : https://docs.microsoft.com/zh-cn/archive/blogs/josebda/the-basics-of-smb-signing-covering-both-smb1-and-smb2
**LDAP 签名**
对于 LDAP，还有三个级别：
- 禁用：这意味着不支持数据包签名。
- 协商签名：此选项表示计算机可以处理签名，并且如果与之通信的计算机也可以处理签名，则将对其进行签名。
- 必需：这最终表明不仅支持签名，而且必须对数据包进行签名才能使会话继续。
如您所见，中间级别的协商签名不同于 SMBv2 的情况，因为这一次，如果客户端和服务器能够对数据包进行签名，则它们将。而对于 SMBv2，只有在至少需要一个实体的情况下才对数据包进行签名。
与 SMB 的区别在于，在 Active Directory 域中，所有主机都具有 “Negotiated Signing” 设置。域控制器不需要签名。
对于域控制器， `ldapserverintegrity` 注册表项位于  `HKEY_LOCAL_MACHINE\System\CurrentControlSet\Services\NTDS\Parameters` 配置单元中，根据级别可以为 0、1 或 2。默认情况下，它在域控制器上设置为 1。
![](../../../../assets/img/Integrated/Windows/笔记/认证/49.png)
对于客户端，此注册表项位于 `HKEY_LOCAL_MACHINE\System\CurrentControlSet\Services\ldap`
![](../../../../assets/img/Integrated/Windows/笔记/认证/50.png)
对于客户端，它也设置为 1。由于所有客户端和域控制器都具有协商签名功能，因此默认情况下将对所有 LDAP 数据包进行签名。
与 SMB 不同，LDAP 中没有标志来指示是否对数据包进行签名。而是，LDAP 使用在 NTLM 协商中设置的标志。无需更多信息。在客户端和服务器均支持 LDAP 签名的情况下， `NEGOTIATE_SIGN` 将设置该标志并对数据包进行签名。
如果一方要求签名，而另一方不支持该签名，则该会话将根本不会开始。需要签名的一方将忽略未签名的数据包。
因此，现在我们了解到，与 SMB 相反，如果我们位于客户端和服务器之间，并且希望使用 LDAP 将身份验证中继到服务器，则需要两件事：
- 该服务器不能要求数据包签名，这是默认情况下，所有机器的情况下，
- 该客户端必须不设置 NEGOTIATE_SIGN 标志 1。如果他这样做，那么服务器将期望签名，并且由于我们不知道客户端的秘密，因此我们将无法对我们精心制作的 LDAP 数据包进行签名。
关于要求 2，有时客户端没有设置此标志，但是不幸的是，Windows SMB 客户端设置了该标志！默认情况下，不可能将 SMB 身份验证中继到 LDAP。