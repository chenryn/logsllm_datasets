and then calculate c(cid:48) ← H(cid:48)(g, T, w, T −uid · PK , R(cid:48)
Output 1 if c(cid:48) = c and 0 otherwise.
Verify: Given a tuple (g, T, w, P K), a proof πPK = (c, s),
2 ← gs · w−c,
1, R(cid:48)
2).
1 ← T s · (T −uid · PK )−c and R(cid:48)
(cid:1). Finally, it
Instantiation of SPK(cid:48)(cid:48). SPK
a cryptographic hash function H(cid:48)(cid:48) : {0, 1}∗ → Zp as:
(cid:48)(cid:48) can also be instantiated with
Prove: Pick r1, r2
$← Zp and compute R ← T −r1 · gr2.
Then, compute c ← H(cid:48)(cid:48)(g, T, R, m), s1 ← r1 + c · uid
mod p and s2 ← r2 + c · a mod p. Finally, output π(cid:48)
T ←
(c, s1, s2).
T = (c, s1, s2),
compute R(cid:48) ← T −(s1+c·γ) mod p · gs2
and
calculate
c(cid:48) ← H(cid:48)(cid:48)(g, T, R(cid:48), m). Finally, output 1 if c(cid:48) = c and 0
otherwise.
Verify: Given a tuple (g, T, γ) and proof π(cid:48)
As we stated in Section IV-B, SPK could be instantiated
with standardized signature algorithms (e.g., ISO/IEC 14888-
3 [5]), where a is used as the private key and PK is used
as the public key, which means that the user could prove
its possession of the key a with RP in various manners.
Furthermore,
the application of PBC in federated identity
systems does not require the user to store a, since each a
is only used in one session.
We note that this application does not impact the security
of PBC against ofﬂine attack, even if the authentication tokens
11
have been converted to be publicly-veriﬁable. Each time when
the user tries to perform the transform for an authentication
token σ, it must authenticate to the IdP. Thus, the request from
attacker can be detected and blocked.
VI. PERFORMANCE EVALUATION
In this section, we evaluate the performances of the primi-
tive proposed in Section IV-B as a strong authentication mech-
anism, as well as its application for holder-of-key assertions,
as described in Section V-B. Our implementations take place
at the security level of 128-bits, where the secp256r1 [1]
curve is adopted as the underlying public parameter pp. The
hash algorithms (i.e., H, H(cid:48), H(cid:48)(cid:48), and HG) are instantiated by
SHA-256 with different preﬁxes.
A. Implementations
Strong Authentication Mechanism. To simulate the practical
scenario where PBC is adopted for strong authentication over
the Internet, we implement ΠPBC in a multi-platform manner.
In particular, we develop the Sign algorithm in JavaScript as
an implementation of PBC software authenticator, where sjcl
1.0.2 is used as the underlying cryptographic library. This
corresponds to a wide range of application scenarios where
the user authenticates to the server through web and mobile
platforms. The Verify algorithm is developed in Java, which
corresponds to the practical scenario that the server serves its
clients via the Java-based website frameworks (e.g., the Spring
Framework), and uses Bouncy Castle 1.60 as the underlying
library of cryptographic primitives.
To be more speciﬁc, the implementation of Sign algorithm
is encapsulated in a browser extension for Chrome, and the
Verify algorithm is integrated into a demo website. We note
that this is not the only way to deploy the PBC based strong
authentication mechanism in practice. The Sign algorithm
could also be implemented as application for mobile platform
or be integrated into the operation systems and browsers as
a compliant authenticator, and the Verify algorithm could
be implemented in various programming languages such as
Python and Go, and employed by servers of different architec-
tures. In a concrete authentication process, the user ﬁrst visits
the demo server with its browser, and receives a challenge
message embedded in a HTTP page. Then, it uses the browser
extension to read the challenge from the page, and calculates
the authentication token by providing its username, password
and password-wrapped credential to the extension. Next, the
extension writes the authentication token as an element at the
page, which triggers the webpage to send the token and the
user’s username back to the server. Finally, the server veriﬁes
the token via the Verify algorithm.
Holder-of-Key Assertion Mechanism. The application of
PBC in federated identity systems (see Section V) could be
divided into three parts including:
1) The user authenticates to the IdP
2) The IdP issues a holder-of-key assertion and signs it with
SPK(cid:48), and the RP veriﬁes the signature over assertion by
executing VerifySPK(cid:48). We denote this part as HoKA.
3) The user proves its possession of secret key a to the RP.
We denote this part as PoPK.
Since the implementation of the ﬁrst part have been developed
as a strong authentication mechanism, the implementation of
holder-of-key assertion mechanism consists of two parts:
HoKA Part. We develop an “RP” and an “IdP” as two Java
applications which could interact with each other. During the
interaction, the “IdP” calculates PK for a given T , issues
an assertion including PK and T with the format deﬁned
in SAML2 [46], signs it with SPK(cid:48), and sends the assertion
and signature to the “RP”. Upon receiving the assertion and
signature,
the “RP” obtains PK and T , and veriﬁes the
signature with VerifySPK(cid:48).
PoPK Part. The user end operation is also performed with a
JavaScript implementation as in the case of strong authentica-
tion, and interacts with a prototype of “RP” which performs
the veriﬁcation.
B. Performance Evaluation and Comparison with ECDSA
The performances of the PBC based schemes are shown
in Table I, where AUTH denotes the strong authentication
mechanism, HoKA denotes the process of signing and ver-
ifying of Holder-of-Key Assertions, and PoPK denotes the
Proof-of-Possession of Key between the user and RP. We
also use PoPK-PBC(cid:48) and HoKA-PBC(cid:48) to refer to the privacy-
preserving option for the holder-of-key assertion mechanism.
For comparison, we also develop the strong authentica-
tion mechanism and holder-of-key assertion mechanism with
ECDSA. To be more speciﬁc, we implement the user end
computation of strong authentication and proof-of-possession
of key with ECDSA by employing a tamper-resistant hard-
ware module embedded in a USB device, that is, the Atmel
AT88CK590 evaluation kit. The kit
is equipped with an
Atmel ECC508A chip which could perform ECDSA signing
operations and protect the private keys. We write a Chrome
application in JavaScript to interact with the device. For the
holder-of-key assertion mechanism with ECDSA, we imple-
ment the corresponding “IdP” and “RP” in the same way as
PBC, where the “IdP” signs an assertion with ECDSA and the
“RP” veriﬁes the signature. We do not employ the hardware
module in the latter implementation since it does not include
user end operation.
Column 1 and 2 show the time breakdown by token/asser-
tion generation and token/assertion veriﬁcation.
• For AUTH-PBC/ECDSA,
token generation refers to the
calculation of authentication token, and token veriﬁcation
refers to checking of an authentication token.
• For HoKA-PBC/PBC(cid:48)/ECDSA, assertion generation refers
to the process of calculating PK and signing the assertion,
and assertion veriﬁcation refer to the validation of the
signature over assertion.
• For PoPK-PBC/PBC(cid:48)/ECDSA, token generation refers to
the signing of nR with the ephemeral private key a, and
token veriﬁcation refers to the veriﬁcation of the signature
with PK .
The results for AUTH-PBC/PBC(cid:48)/ECDSA are measured with
the Chrome developer tool and Java nanotime function, and
are the average of 100 runs. The comparison result shows
that the time cost for verifying PBC tokens is almost the
same as verifying ECDSA signatures, but the generation of
12
AUTH-ECDSA
AUTH-PBC
PoPK-ECDSA
PoPK-PBC
PoPK-PBC(cid:48)
HoKA-ECDSA
HoKA-PBC
HoKA-PBC(cid:48)
token/assertion
generation
272.4†∗
187.5†
271.1†∗
100.6†
167.3†
0.7
2.1
2.0
token/assertion
veriﬁcation
1.1
1.0
1.1
1.0
1.0
1.0
2.4
1.9
LAN
300.1†∗ (4.15)
192.4† (2.81)
305.4†∗ (5.54)
125.0† (4.69)
190.5† (3.46)
3.3 (0.24)
5.1 (0.59)
5.0 (0.98)
30ms
342.4†∗ (2.43)
224.9† (4.23)
334.3†∗ (4.30)
149.7† (4.04)
223.7† (5.70)
34.7 (1.33)
38.3 (0.97)
37.2 0.63
WAN
60ms
376.2†∗ (3.87)
250.6† (4.17)
370.8†∗ (2.78)
188.8† (5.29)
245.2† (3.41)
65.2 (1.62)
69.4 (1.02)
68.8 (1.75)
90ms
390.1†∗ (5.89)
284.3† (3.72)
400.6†∗ (1.64)
219.0† (4.94)
281.1† (5.17)
93.9 (1.82)
98.7 (1.45)
98.4 (1.67)
120ms
432.3†∗ (5.42)
319.5† (5.93)
425.3†∗ (4.78)
250.2† (5.59)
314.2† (4.92)
124.5 (1.90)
129.0 (1.43)
127.1 (1.23)
TABLE I: The comparison between the runtimes (in milliseconds) of PBC and ECDSA when being used as strong authentication
mechanisms or applied in federated identity systems for LAN and WAN. In the cases where the results are calculated with the
average of several runs, their standard derivations are presented in brackets. † denotes that the algorithm or user end computation
is implemented by JavaScript. * denotes that this implementation employs a tamper-resistant hardware module at user end. By
PoPK-PBC(cid:48) and HoKA-PBC(cid:48), we refer to the privacy-preserving option of PBC-based holder-of-key mechanism.
PBC token is faster than signing with ECDSA for about
100ms. The result for HoKA-PBC/PBC(cid:48)/ECDSA are also
measured with the average of 100 runs, which shows that the
PBC based mechanism is slightly slower than the mechanism
with ECDSA, with difference limited in 2ms. For PoPK-
PBC/PBC(cid:48)/ECDSA, the advantage of PBC based scheme is
more obvious, since the user end implementation only signs
the challenge with a and does not have to repeat the process
of decryption and randomizing the credential.
Column 3-7 of Table I present the average time costs when
being tested over Local Area Network (LAN) and Wide Area
Network (WAN), where each result takes the average of 10
runs. In the LAN setting, the implementations are connected
via an 1Gbps network with ping time less than 1 ms. In
the WAN setting for AUTH/PoPK-PBC/PBC(cid:48)/ECDSA, we
employ several VPN servers to “ﬁx” the latency between the
implementations, where all the network latencies are measured
with the ping command. We note that, due to the instability
of Internet, the latency can not be truly ﬁxed to a constant
value. In our experiment, each result is measured with rela-
tively stable latency within ± 5ms. In the WAN setting for
HoKA-PBC/PBC(cid:48)/ECDSA, we adopt Liunx tc command to
control the network latency. The results for AUTH/PoPK-
PBC/PBC(cid:48)/ECDSA are measured via Chrome developer tool
from when the user begins to calculate the token, to when
the browser receives the authentication success response from
server or “RP”. It shows that the strong authentication (resp.,
proof-of-possession of key) with PBC obtains better efﬁciency
than with ECDSA while being used on web by saving 26%-
36% (resp., 41%-55%) time, since the user end calculation
could be performed by software. When the privacy-preserving
option is used, the proof-of-possession of key process saves
30%-38% time. The results for HoKA-PBC/PBC(cid:48)/ECDSA are
measured from when the “IdP” begins to issue the assertion
(i.e., calculates PK ), to when it receives a response from the
“RP”, which means the check has completed. In this scenario,
the PBC based scheme is a bit slower than ECDSA. However,
it is still acceptable since it only takes more time from 1.03x
to 1.10x, and the slowdown is relatively small compared to the
latency raised by network and user end computation.
Experiment Environment. The results in Table I are obtained
with a workstation and a desktop computer. For AUTH/PoPK-