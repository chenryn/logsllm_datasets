init=linuxrc`
  * Load the kernel from Flash into memory.
  * Jump to the starting address of the kernel in memory and execute.
Let's focus on the `init` field of the startup parameter.
The `init` field sets the name of the initialization process executed by the
kernel, such as `linuxrc` above, which is a piece of program code located in
the root directory of the file system, responsible for subsequent system
initialization.
Is it possible to directly modify `init=/bin/sh` to access the root file
system when the system is not initialized? Modify the `init` field in `sfboot`
as `/bin/sh` in the `u-boot` command line and save as follows (make a backup
of parameters before modification):
    console=${consoledev},${baudrate} noinitrd mem=${mem} rw ${rootfstype} init=/bin/sh
Restarting the device, as we suspected, modifying the initial process of
kernel execution, we successfully obtained a `shell`.
Since there is no `linuxrc` initialization process, the Shell functionality is
greatly limited. Edit the `/etc/shadow` file under the shell, erase or crack
the root user's password, restart to the `u-boot` command line interface,
modify the original boot parameters and save, restart to the shell login
interface again, and you can get a shell with complete functions.
#### 3.5 Package and Upload Firmware
Based on the previous steps, We can now log into a fully functional `Shell`
and use `tar` and `tftp` commands to pack and upload the root file system to
the `tftp` server.
#### 3.6 Other Tricks
The relevant commands are provided in `u-boot` to operate the Flash chip, so
the firmware can also be extracted as follows (the way of cat memory is just
an idea, speed is a great limitation).
![
](https://images.seebug.org/content/images/2019/07/15b0c63d-b6db-4a89-aa30-4886e5cbebe8.png-w331s)
### 0x04 Simply Reading and Writing Firmware Storage Chip Unlock New Features
In this section, we take another camera based on gSOAP protocol as an example
(firmware memory chip MX25LP128) to show how to use a programmer to read and
write Flash chips to open the Telnet service of the camera.
#### 4.0 Tools
  * 25 Series Chip Programmer
  * soldering iron
  * …
#### 4.1 Reading Firmware
`MX25L128` is a 25 series Flash chip that can read directly online. Clamp the
Flash chip and connect the programmer to read the firmware inside.
Click `SmartID`, and then click on `Read` after the chip model is successfully
identified, and save it as a file. As shown below, the reading process is very
smooth.
#### 4.2 Firmware Decompression
Binwalk is a firmware analysis tool developed by @devttys0. It is highly
recommended to use the
[tutorial](https://github.com/devttys0/binwalk/blob/master/INSTALL.md
"tutorial") installation on Github. Installing `apt-get` directly will lack
many dependencies.
View the firmware structure using `binwalk`.
![
](https://images.seebug.org/content/images/2019/07/296ef42a-63e0-45be-a973-1d7a865c7174.png-w331s)
After compiling (make), the kernel generates two files, one is Image and the
other one is zImage. Image is the kernel image file and the zImage is an image
compression file of the kernel.
As for uImage, it is an image file dedicated to u-boot. It adds a 64-byte
header in front of zImage to indicate the kernel version, loading location,
generation time, size and other information. After `0x40`, there is no
difference with zImage.
The firmware uses the `squashfs` file system, a set of GPL open source read-only compressed file systems for the Linux kernel. Therefore, the firmware
cannot be modified when the device is running normally. In the previous
section, the reason why we entered the system through the serial port by
modifying the initial process of the kernel is that the system has not been
initialized and we gained read and write rights to the file system.
In the latter part of the firmware, there is an area that can be written. A
`JFFS2` file system, which is a very widely used read/write file system on
flash memory. Modified configuration information and other data during device
operation will be written to this file system.
The `squashfs` file system starts at `0x3800000` and is `6963644` bytes in
size. Extract the file system with the `dd` command and decompress it with the
`unsquashfs` command.
#### 4.3 Unlock the New Function
Be familiar with file system structure and existing commands.
Obviously, the firmware `Shell` is based on `busybox`. From the result of
`file` instruction, we can judge that the camera is a 32-bit ARM instruction
architecture.
This `busybox` is statically linked and does not rely on other library files.
You can use `qemu-arm` directly to simulate the running.
Of course, we can also build a `qemu` virtual machine.
Download [qemu virtual machine image
file](https://people.debian.org/~aurel32/qemu/armel/ "qemu virtual machine
image file") and launch the virtual machine as follows.
Now we can determine that the `telnetd` command exists on the target file
system. Add the following content at the end of the `boot.sh` file in the root
directory to enable the device to automatically start the Telnet service on
startup.
#### 4.4 Reseal
Having finished the simple modification of the file system, so how do we
repackage the firmware so that it can flash back to the device?
Start with the firmware structure again as follows:
![
](https://images.seebug.org/content/images/2019/07/ee185031-577e-4033-9ff0-7c3579671b32.png-w331s)
What we customize is only the middle part of the file system, which is the
`0x3100000 - 0xB00000`. At the same time, the length of this segment is not
equal to the size of the `squashfs` file system, which is `6963644` bytes.
There is a 0xff padding portion from the end of the squashfs file system to
the beginning of the next segment.
As can be seen from the uImage header, the image size is `2217456`, while the
squashfs file system starts at `3670016`. There is no `CRC` check for the
`squashfs` file system.
Judging from the above conclusions, we only need to repackage the modified
file system into firmware without changing the original firmware structure.
![
](https://images.seebug.org/content/images/2019/07/e702094d-5c59-49a7-8f8b-cbd142697741.png-w331s)
![
](https://images.seebug.org/content/images/2019/07/4b17eb5f-fcd2-42bd-8bd5-70cad2bfa6c8.png-w331s)
Connect each segment with `cat`.
#### 4.5 Brush Back
We've finished the repackage. Use the programmer to brush the modified
firmware offline into the firmware memory chip.
#### 4.6 Outcome
As you can see, we successfully turned on the telnet service for this camera.
### 0x05 Conclusion
A good understanding of the hardware and software of smart devices is the
basis for exploring the device vulnerabilities. This paper is a summary of
some experience in the research process of camera and other IoT devices, and I
wish it’s helpful.
### About Knownsec & 404 Team
Beijing Knownsec Information Technology Co., Ltd. was established by a group
of high-profile international security experts. It has over a hundred frontier
security talents nationwide as the core security research team to provide
long-term internationally advanced network security solutions for the
government and enterprises.
Knownsec's specialties include network attack and defense integrated
technologies and product R&D under new situations. It provides visualization
solutions that meet the world-class security technology standards and enhances
the security monitoring, alarm and defense abilities of customer networks with
its industry-leading capabilities in cloud computing and big data processing.
The company's technical strength is strongly recognized by the State Ministry
of Public Security, the Central Government Procurement Center, the Ministry of
Industry and Information Technology (MIIT), China National Vulnerability
Database of Information Security (CNNVD), the Central Bank, the Hong Kong
Jockey Club, Microsoft, Zhejiang Satellite TV and other well-known clients.
404 Team, the core security team of Knownsec, is dedicated to the research of
security vulnerability and offensive and defensive technology in the fields of
Web, IoT, industrial control, blockchain, etc. 404 team has submitted
vulnerability research to many well-known vendors such as Microsoft, Apple,
Adobe, Tencent, Alibaba, Baidu, etc. And has received a high reputation in the
industry.
The most well-known sharing of Knownsec 404 Team includes: [KCon Hacking
Conference](http://kcon.knownsec.com/#/ "KCon Hacking Conference"), [Seebug
Vulnerability Database](https://www.seebug.org/ "Seebug Vulnerability
Database") and [ZoomEye Cyberspace Search Engine](https://www.zoomeye.org/
"ZoomEye Cyberspace Search Engine").
* * *