# RMI 工作原理及反序列化知识学习
## **前言**
把 `RMI` 通信过程 `debug` 了一下，简单记录一下。
准备环境：`Jdk7u21`、`Jdk8u121`、`IDEA Java`
## **RMI 服务搭建**
`RMI` 的本质是通过 `socket` 编程、`Java` 序列化和反序列化、动态代理等实现的。
`RMI` 涉及注册中心、服务端和客户端。搭建一个 `RMI` 服务测试一下：
1、创建远程方法接口
    import java.rmi.Remote;
    import java.rmi.RemoteException;
    public interface IService extends Remote {
        public String queryName(String no) throws RemoteException;
    }
2、创建远程方法接口实现类
    import java.rmi.RemoteException;
    import java.rmi.server.UnicastRemoteObject;
    public class ServiceImpl extends UnicastRemoteObject implements IService {
        public ServiceImpl() throws RemoteException {
        }
        @Override
        public String queryName(String no) throws RemoteException {
            //方法的具体实现
            System.out.println("hello "+ no);
            return String.valueOf(System.currentTimeMillis());
        }
    }
3、创建注册中心，启动 `RMI` 的注册服务
    import java.rmi.RemoteException;
    import java.rmi.registry.LocateRegistry;
    import java.rmi.registry.Registry;
    public class register {
        public static void main(String[] args) {
            Registry registry = null;
            try {
                registry = LocateRegistry.createRegistry(1099);
            } catch (RemoteException e) {
                e.printStackTrace();
            }
            while (true);
        }
    }
4、服务端
    import java.rmi.registry.LocateRegistry;
    import java.rmi.registry.Registry;
    public class Server {
        public static void main(String[] args) {
            Registry registry = null;
            try {
                registry = LocateRegistry.getRegistry("127.0.0.1",1099);
                ServiceImpl service = new ServiceImpl();
                registry.bind("vince",service);
            } catch (Exception e) {
                e.printStackTrace();
            }
        }
    }
5、客户端
    import java.rmi.NotBoundException;
    import java.rmi.RemoteException;
    import java.rmi.registry.LocateRegistry;
    import java.rmi.registry.Registry;
    public class Client {
        public static void main(String[] args) {
            Registry registry = null;
            try {
                registry = LocateRegistry.getRegistry("127.0.0.1",1099);
                IService service = (IService) registry.lookup("vince");
                String result = service.queryName("jack");
                System.out.println("result from remote : "+result);
            } catch (RemoteException e) {
                e.printStackTrace();
            } catch (NotBoundException e) {
                e.printStackTrace();
            }
        }
    }
首先启动注册服务，然后执行服务端，最后执行客户端。可以发现客户端能够成功调用服务端上的方法，实现远程方法调用。
## **通信分析**
1、启动注册服务
    LocateRegistry.createRegistry(1099);
主要涉及类：
    \java\rmi\registry\LocateRegistry.java
    \sun\rmi\registry\RegistryImpl.class // 根据端口生成 LiveRef、UnicastServerRef 对象，并调用 setup 方法
    \sun\rmi\server\UnicastServerRef.class // 存储封装的 LiveRef 对象,创建 Skeleton 对象
    \sun\rmi\server\UnicastRef.class // 存储封装的 LiveRef 对象,远程方法调用时通过此类 invoke 方法调用并获取结果
    \sun\rmi\transport\LiveRef.class  // 存储封装的 ObjID 对象和 TCPEndpoint 对象信息
    \sun\rmi\transport\tcp\TCPEndpoint.class  // 存储 host、port、csf、ssf 等信息
    \sun\rmi\transport\tcp\TCPTransport.class  // ServerSocket 多线程获取连接并处理请求
    \sun\rmi\registry\RegistryImpl_Skel.class  // 根据 TCPTransport 连接请求调用 dispatch 方法做相应的处理
    \sun\rmi\registry\RegistryImpl_Stub.class  // LocateRegistry.createRegistry(1099); 返回对象，调用 bind、list、lookup 等方法
注册服务主要部分是 `listen` 方法多线程处理请求部分，所以直接看
`\sun\rmi\transport\tcp\TCPTransport.class` 类
    private class AcceptLoop implements Runnable {
            private final ServerSocket serverSocket;
            private long lastExceptionTime = 0L;
            private int recentExceptionCount;
            AcceptLoop(ServerSocket var2) {
                this.serverSocket = var2;
            }
            public void run() {
                try {
                    this.executeAcceptLoop();
                } finally {
                    ...
                }
            }
            private void executeAcceptLoop() {
                ...
                while(true) {
                    Socket var1 = null;
                    try {
                        var1 = this.serverSocket.accept(); // 从连接队列中取出一个连接请求
                        InetAddress var16 = var1.getInetAddress(); // 获取本地地址
                        String var3 = var16 != null ? var16.getHostAddress() : "0.0.0.0"; // 得到 IP 地址
                        try {
                            TCPTransport.connectionThreadPool.execute(TCPTransport.this.new ConnectionHandler(var1, var3)); // 调用 ConnectionHandler 类的 run0 方法对请求做处理
                        } catch (RejectedExecutionException var11) {
                            ...
                        }
                    } catch (Throwable var15) {
                        ...
                    }
                }
            }
        }
2、服务端
分为两步
第一步，调用 `LocateRegistry` 类的 `getRegistry` 方法获取代理对象，最终得到 `RegistryImpl_Stub` 对象。
    LocateRegistry.getRegistry("127.0.0.1",1099);
    // 调用 LocateRegistry 类的 getRegistry 方法
    public static Registry getRegistry(String host, int port)
            throws RemoteException
    {       
            return getRegistry(host, port, null); // 调用本类 getRegistry 方法
    }
    public static Registry getRegistry(String host, int port,
                                       RMIClientSocketFactory csf)
        throws RemoteException
    {
        Registry registry = null;
        if (port  0) {
                this.socket.setSoTimeout(TCPTransport.connectionReadTimeout);
            }
        } catch (Exception var30) {
            ;
        }
        try {
            InputStream var3 = this.socket.getInputStream(); // 获取 socket 输入流
            Object var4 = var3.markSupported() ? var3 : new BufferedInputStream(var3); // 判断输入流是否支持
            ((InputStream)var4).mark(4);
            DataInputStream var5 = new DataInputStream((InputStream)var4);
            int var6 = var5.readInt(); // 获取一个 Int 值，由服务端 socket 通信知道，值为 1246907721
            if (var6 == 1347375956) {
                TCPTransport.tcpLog.log(Log.BRIEF, "decoding HTTP-wrapped call");
                ((InputStream)var4).reset();
                try {
                    this.socket = new HttpReceiveSocket(this.socket, (InputStream)var4, (OutputStream)null);
                    this.remoteHost = "0.0.0.0";
                    var3 = this.socket.getInputStream();
                    var4 = new BufferedInputStream(var3);
                    var5 = new DataInputStream((InputStream)var4);
                    var6 = var5.readInt();
                } catch (IOException var29) {
                    throw new RemoteException("Error HTTP-unwrapping call", var29);
                }
            }
            short var7 = var5.readShort(); // 获取一个 Short 值，由服务端 socket 通信知道，值为 2
            if (var6 == 1246907721 && var7 == 2) {
                OutputStream var8 = this.socket.getOutputStream(); // 获取 socket 的输出流
                BufferedOutputStream var9 = new BufferedOutputStream(var8);