n
e
m
h
c
a
t
t
A
i
i
g
n
h
s
h
p
r
a
e
p
S
6
8
0
1
T
l
l
e
h
s
r
e
w
o
P
r
e
s
U
4
0
2
1
T
n
o
i
t
u
c
e
x
E
3
0
0
1
T
i
g
n
p
m
u
D
l
a
i
t
n
e
d
e
r
C
s
e
l
i
F
7
2
0
1
T
t
d
e
a
c
s
u
b
O
f
4
6
0
1
T
g
n
i
t
p
i
r
c
S
MITRETechniques
Fig. 1: Top 10 techniques based on the number of times exploited by
93 MITRE-curated APT groups. 6 of these 10 techniques are benign
in isolation and occur frequently during normal system execution.
including persistence, privilege escalation, lateral movement,
and defense evasion.
1) Limitations of EDR tools: Existing EDR tools excel at
scalably identifying potentially malicious low-level behaviors
in real-time. They can monitor hundreds or thousands of hosts
for signs of compromise without event congestion. However,
they suffer from some major usability and resource issues
which we list below.
False-positive Prone. Existing EDR tools are known to
generate many false alarms [12], [13], [14] which lead to the
threat alert fatigue problem. The main reason for this high
false alarm rate is that many MITRE ATT&CK behaviors are
only sometimes malicious. For example, MITRE ATT&CK
lists a technique called “File Deletion” T1107 under the
“Defense Evasion” tactic. Finding this individual behavior
and generating an alert is straightforward. But how would
the analyst discern whether this ﬁle deletion is the result
of normal system activity, or an attempt by an attacker to
cover his tracks? Alerting on individual MITRE techniques
generates false alarms and requires a human in the loop for
alert validation.
To further quantify how many techniques from the MITRE
ATT&CK knowledge-base can be benign in isolation, we took
techniques used by 93 APT attack groups provided by MITRE
and identiﬁed the most used techniques from these attack
groups. Figure 1 shows the top ten most used techniques.
After manual inspection, we found that 6 of 10 techniques
may be benign in isolation, and in fact occur frequently during
typical use. For example, the Powershell technique (T1086)
can be triggered during a normal execution of applications
like Chrome or Firefox. During our attacks simulation period,
the Symantec EDR generated a total of 58,096 alerts on the
34 machines. We analyzed these alerts and found that only
1,104 were related to true attacks from the APT29 exercise and
from other attack simulations we describe later. The remaining
56,992 were raised during benign activity, yielding a precision
of only 1.9%.
Laborious Context Generation. To investigate and validate
the triggered alerts, analyst usually write ad hoc queries
using the SIEM or EDR tool’s interface to generate context
around alerts or to correlate them with previous alerts. Such
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 09:41:13 UTC from IEEE Xplore.  Restrictions apply. 
1174
userinit.exe
T1060
eRegistryRunKeys
persistence
HKEY_USERS/
S-1-5-21-1603624627-40259
59035-3120021394-1103/
Software/Microsoft/Windows/
CurrentVersion/RunOnce/
ctfmon.exe
Alert A
mstsc.exe
T1076
eRemoteDesktopProtocol
lateral-movement
src: 10.0.10.21:57291
dst: 10.0.0.10:3389
Alert B
Fig. 2: Part of the APT29 attack provenance graph. We zoomed-in on two threat alerts from this attack, and excluded the network connections
and registry operations from this graph for presentation purposes. In the complete graph, there are total 2,342 edges and 1,541 vertices.
In this graph, and the rest of the paper, we use boxes to represent processes (count=79), diamonds to represent sockets (count=750), and
oval nodes to represent ﬁles (count=54), registries (count=132), kernel objects (count=30), and modules (count=496). Edges represent casual
relationships between the entity nodes, and red edges represent threat alerts (count=26).
context generation requires a lot of manual effort and time,
which can delay investigation and recovery. Even after analysts
have generated the context around an alert, it is difﬁcult to
understand the progression of the attack campaign by looking
at system-level events. Depicting these events in a graph helps
to show the causal relationships, but the volume of information
is still overwhelming. Note that certain EDR tools, such as
CrowdStrike Falcon [52] provide interfaces to only get the
chain of process events that led to the triggered alert. These
process chains do not capture information ﬂow through system
objects (e.g., ﬁles, registries). As a result, such EDR tools can
not aggregate causally related alerts that are associated with
system objects, leading to incomplete contexts.
During our exercise, APT29 generated 2,342 system events
such as process launches and ﬁle creation events. Figure 2
shows a classical whole-system provenance graph for all the
events related to APT29. The unwieldy tangle of nodes and
edges in the ﬁgure demonstrates how daunting it can be for
a cyber analyst to explore and validate a potential attack and
understand the relationship between alerts.
Storage Inefﬁciency. EDR tools constantly produce and
collect system logs on the end hosts. These system logs can
quickly become enormous [31], [34]. In our evaluation dataset,
the EDR recorded 400K events per machine per day from total
of 34 end hosts, resulting in 35GB worth of system logs with
a total of 40M system events. Note that the database used to
store the events on hosts performs light compression, resulting
in on-disk sizes roughly half this size. Retaining those system
logs can become costly and technically challenging over longer
periods. Further, for enterprises, it is important to clarify how
long logs will be stored for and plan for the resulting ﬁnancial
and operational impact. For example, keeping log data for a
week may be inexpensive, but if an attack campaign spans
more than a week (which is common [3], [2], [1]), then the
company will lose critical log data necessary for forensic
investigation.
We surveyed the white papers and manuals of the top 5
EDR tools curated by Gartner [10]. In these white papers, we
speciﬁcally looked for techniques used by these EDR tools for
log retention. We found that no EDR tool currently describes
any meaningful log retention techniques that can best utilize
the limited storage for the investigation of long-lived APTs.
Instead, those EDR tools use a FIFO queue that depending
on the EDR vendor’s retention policies buffers only a few
days of system logs. For example, by default, Symantec’s EDR
allocates 1GB of space on each host which is sufﬁcient for a
couple of days or perhaps a week’s worth of logs. The oldest
logs are purged when this limit is reached. Events that are
pushed to the server are also purged, with the oldest 10% of
events deleted when used storage capacity reaches 85% [18].
III. SYSTEM OVERVIEW
A. Threat Model
This work considers an enterprise environment comprised
of thousands of machines that is the target of a sophisticated
remote attacker. The attacker follows the strategy of low
– primarily utilizing techniques that are unlikely to draw
signiﬁcant attention, and slow – often spanning weeks to
months in duration. Moreover, we consider APT-style attacks
that are highly disruptive [53], creating signiﬁcant business
disruption. We make the following assumptions about
the
environment. First, we assume that an EDR tool is collecting
system logs on each end host in the enterprise. Next, we
assume that APT attacks begin after the EDR has started
monitoring the victim host. We assume that the underlying
EDR tool is not compromised and that the system logs are
correct (not tampered with by the attacker) at the time of the
investigation. However, tamper-evident logging solutions [54],
[55] can help alleviate log integrity assumption. Finally, we
do not consider hardware trojans, side-channels, and backdoor
attacks in this paper.
B. Design Goals
We set out to design a system that will bring the best of
provenance-based solutions to solve the shortcomings of EDR
tools. The following are the design goals of our system:
G1 Multi-stage Attack Explanations. The system should
provide a compact visualization to describe different high-
level stages of attack campaigns.
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 09:41:13 UTC from IEEE Xplore.  Restrictions apply. 
1175
G2 Causal Alert Triage. The system should triage threat
alerts based on their severity.
G3 Long-Term Log Retention. Our techniques for investiga-
tion and triage must be possible for even prolonged attack
campaigns without sacriﬁcing accuracy.
G4 Broadly Applicable. The techniques we develop for alert
triage and log management should comply with EDR
tool use cases. Our techniques should work with generic
system logs collected already by most EDR tools.
G5 Minimally Invasive. The system should be able to work
with any commodity host without requiring changes to the
underlying OS or the EDR tool.
G6 Extensible. Our algorithms should be able to work with
any adversarial TTP knowledge base as long as those
TTPs are detected by the underlying EDR tool.
C. Our Approach
A high-level overview of our system, RapSheet, is shown
in Figure 3. Full details will be given in the next section,
but we overview the approach here. First, RapSheet performs
rule matching on system logs to identify the events that
match MITRE ATT&CK behaviors. In our APT29 exercise,
we were able to match techniques T1060, T1086, T1085,
T1055, T1082, T1078, T1076, T1040 against logs. Each rule
match signiﬁes an alert of a possible threat behavior. Next,
we generate a provenance graph database from the logs.
During the graph generation, we annotate the edges (events)
that match the MITRE ATT&CK techniques in the previous
step. Figure 2 shows the provenance graph for the APT29
engagement.
Once the construction of the provenance graph with alert
annotations is done, we generate a tactical provenance graph
(TPG) which is a graph derived from the provenance graph that
shows how causally related alerts are sequenced. To generate
a TPG, we ﬁrst identify the initial infection point (IIP) vertex,
i.e., the ﬁrst vertex in the timeline that generated a threat alert.
Then we ﬁnd all the alerts in the progeny of the IIP vertex
using forward tracing. Finally, extraneous system events are
removed from this progeny graph (Goal G1), forming what
we call the IIP graph. Figure 4a shows the IIP graph for the
APT29 attack. After that, we perform threat score assignment.
The key idea behind our threat score assignment algorithm
is to use temporal ordering between all the causally related
alerts (i.e., all the alerts in the IIP graph) to rank the alerts
that conform to the MITRE ATT&CK kill chain higher than
the alerts that appear in an arbitrary order. However, ordering
information for alerts on different paths is not immediately
apparent in the IIP graph. To remedy this, we perform a
happens-before analysis to ﬁnd temporal orderings between
the different alerts present in the IIP graph which gives us a
TPG. Figure 4b shows the TPG for the APT29 attack scenario.
After that our threat score assignment algorithm ﬁnds ordered
subsequences of alerts from the TPG that conform to the
MITRE kill chain and uses these to assign a severity score
for alert prioritization (Goal G2). Note that our evaluation
and implementation are based on an ofﬂine analysis similar
System 
Logs
Rule
 Matching
Provenance 
Graph
Database
Host Prov. 
Graph
IIP
Graphs
TPGs
Tactical  Provenance Analysis
i
RapSheet
Threat 
Score 
Assignment
Fig. 3: Overview of RapSheet architecture (Section III-C)
to prior causal analysis work (e.g., [38], [31]). We discuss
how to adapt our system to online settings in Section IX.
IV. SYSTEM DESIGN
A. Log Collection
EDR tools collect system logs on each host in the enterprise.
For Linux hosts, our underlying EDR uses Linux Audit
framework [48] while for Windows it uses ETW [47] as well
as custom system call hooking. This is standard for most EDR
tools [56], [57]. System logs contain low-level system events
including process launches and ﬁle operations. Those system
events capture causal relationships between different system
entities. For example, in Linux the causal relationship between
a parent process creating a child process is represented by
an event generated by capturing calls to sys_clone(). Once
those system logs are collected on each host they are processed
into a JSON format.
We note that we supplemented the events collected by our
underlying EDR with logs of Asynchronous Local Procedure
Call (ALPC) messages which we collected separately on
Windows hosts. ALPC is the mechanism that Windows com-
ponents use for inter-process communication (IPC) [58]. After
running real-world attack scenarios on Windows machines, we
realized that many of the attacks manifest in part through
system activities that are initiated using ALPC messages.
Missing those causal links can undermine the forensic in-
vestigation, as the provenance graph becomes disconnected
without them. Note that previous papers [42], [25], [43], [22],
[38] on Windows provenance do not capture ALPC messages,
resulting in disconnected provenance chains.
B. Rule Matching
Generating alerts for individual MITRE techniques is a
feature of most EDR tools, including the one that we use in
our experiments. Because of RapSheet’s novel use of TPGs for
grouping, scoring, and triaging alerts, we are able to include
even the most false-positive-prone MITRE techniques as alerts
without overwhelming an analyst. In our experiments, we use a
default set of MITRE rules that was provided by the Symantec
EDR tool, and we supplemented these with additional rules for
MITRE techniques that were not already covered. Users can
easily extend our system by adding new rules for additional
TTPs (Goal G6). Moreover,
to ensure Goal G4 our rule
matching only relies on events that are commonly collected
by EDR tools or readily available from commodity auditing
frameworks.
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 09:41:13 UTC from IEEE Xplore.  Restrictions apply. 
1176
PROCESS_LAUNCH
cmd.exe
T1078
RunAs
defense-evasion,persistence,
privilege-escalation,initial-access
 c:/windows/system32/runas.exe
rundll32.exe