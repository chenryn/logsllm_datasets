       +0x018 MappedSystemVa   : 0xffff9a04`9ae4c390 Void
       +0x020 StartVa          : 0xffff9a04`9ae4c000 Void
       +0x028 ByteCount        : 0x30
       +0x02c ByteOffset       : 0x390
    0: kd> db 0xffff9a04`9ae4c390+0x10
    ffff9a04`9ae4c3a0  19 04 00 00 ff ff ff ff-5a 5a 5a 5a 5a 5a 5a 5a  ........ZZZZZZZZ
    ffff9a04`9ae4c3b0  5a 5a 5a 5a 5a 5a 5a 5a-01 02 03 04 05 06 07 08  ZZZZZZZZ........
    ffff9a04`9ae4c3c0  00 d0 09 02 43 63 50 63-9a 74 0e 74 7b 4b cd b6  ....CcPc.t.t{K..
    ffff9a04`9ae4c3d0  fe 02 04 00 ff ff 00 00-90 c3 88 a0 04 9a ff ff  ................
    ffff9a04`9ae4c3e0  60 09 80 02 00 00 00 00-60 09 c0 02 00 00 00 00  `.......`.......
    ffff9a04`9ae4c3f0  60 09 c0 02 00 00 00 00-19 19 f3 02 00 00 00 00  `...............
    ffff9a04`9ae4c400  00 00 00 00 00 00 00 00-00 00 00 00 00 00 00 00  ................
    ffff9a04`9ae4c410  00 00 00 00 00 00 00 00-00 00 00 00 00 00 00 00  ................
第一次调用Ipv6pUpdateRDNSS函数之后
    0: kd> dt ndis!_NET_BUFFER @r14
       +0x000 Next             : (null)
       +0x008 CurrentMdl       : 0xffff9a04`9ae4c350 _MDL
       +0x010 CurrentMdlOffset : 0x28
       +0x018 DataLength       : 0x138
       +0x018 stDataLength     : 0x138
       +0x020 MdlChain         : 0xffff9a04`9c40a180 _MDL
       +0x028 DataOffset       : 0x88
       +0x000 Link             : _SLIST_HEADER
       +0x000 NetBufferHeader  : _NET_BUFFER_HEADER
       +0x030 ChecksumBias     : 0
       +0x032 Reserved         : 0
       +0x038 NdisPoolHandle   : 0xffff9a04`9aba28c0 Void
       +0x040 NdisReserved     : [2] (null)
       +0x050 ProtocolReserved : [6] 0x00000160`00000000 Void
       +0x080 MiniportReserved : [4] (null)
       +0x0a0 DataPhysicalAddress : _LARGE_INTEGER 0x0
       +0x0a8 SharedMemoryInfo : (null)
       +0x0a8 ScatterGatherList : (null)
    0: kd> dt ndis!_MDL 0xffff9a04`9ae4c350
       +0x000 Next             : 0xffff9a04`9ae4c7d0 _MDL
       +0x008 Size             : 0n56
       +0x00a MdlFlags         : 0n4
       +0x00c AllocationProcessorNumber : 0x9a04
       +0x00e Reserved         : 0xffff
       +0x010 Process          : (null)
       +0x018 MappedSystemVa   : 0xffff9a04`9ae4c390 Void
       +0x020 StartVa          : 0xffff9a04`9ae4c000 Void
       +0x028 ByteCount        : 0x30
       +0x02c ByteOffset       : 0x390
    0: kd> db 0xffff9a04`9ae4c390+0x28
    ffff9a04`9ae4c3b8  01 02 03 04 05 06 07 08-00 d0 09 02 43 63 50 63  ............CcPc
    ffff9a04`9ae4c3c8  9a 74 0e 74 7b 4b cd b6-fe 02 04 00 ff ff 00 00  .t.t{K..........
    ffff9a04`9ae4c3d8  90 c3 88 a0 04 9a ff ff-60 09 80 02 00 00 00 00  ........`.......
    ffff9a04`9ae4c3e8  60 09 c0 02 00 00 00 00-60 09 c0 02 00 00 00 00  `.......`.......
    ffff9a04`9ae4c3f8  19 19 f3 02 00 00 00 00-00 00 00 00 00 00 00 00  ................
    ffff9a04`9ae4c408  00 00 00 00 00 00 00 00-00 00 00 00 00 00 00 00  ................
    ffff9a04`9ae4c418  00 00 00 00 00 00 00 00-00 00 00 00 00 00 00 00  ................
    ffff9a04`9ae4c428  00 00 00 00 00 00 00 00-20 77 00 9f 04 9a ff ff  ........ w....
可以看到现在已经将\x01\x02当做下一个Option的头部。而\x02位于Length字段，\x01无这个Type，所以会跳过0x10个字节。直接跳到下一个\x19\x04这部分。
之后再一次调用了Ipv6pUpdateRDNSS。
调用前：
    0: kd> dt ndis!_NET_BUFFER @r14
       +0x000 Next             : (null) 
       +0x008 CurrentMdl       : 0xffff9a04`9ae4c7d0 _MDL
       +0x010 CurrentMdlOffset : 8
       +0x018 DataLength       : 0x128
       +0x018 stDataLength     : 0x128
       +0x020 MdlChain         : 0xffff9a04`9c40a180 _MDL
       +0x028 DataOffset       : 0x98
       +0x000 Link             : _SLIST_HEADER
       +0x000 NetBufferHeader  : _NET_BUFFER_HEADER
       +0x030 ChecksumBias     : 0
       +0x032 Reserved         : 0
       +0x038 NdisPoolHandle   : 0xffff9a04`9aba28c0 Void
       +0x040 NdisReserved     : [2] (null) 
       +0x050 ProtocolReserved : [6] 0x00000160`00000000 Void
       +0x080 MiniportReserved : [4] (null) 
       +0x0a0 DataPhysicalAddress : _LARGE_INTEGER 0x0
       +0x0a8 SharedMemoryInfo : (null) 
       +0x0a8 ScatterGatherList : (null) 
    0: kd> dt ndis!_MDL 0xffff9a04`9ae4c7d0
       +0x000 Next             : 0xffff9a04`9ae4c8f0 _MDL
       +0x008 Size             : 0n56
       +0x00a MdlFlags         : 0n4
       +0x00c AllocationProcessorNumber : 0xffff
       +0x00e Reserved         : 0xffff
       +0x010 Process          : (null) 
       +0x018 MappedSystemVa   : 0xffff9a04`9ae4c810 Void
       +0x020 StartVa          : 0xffff9a04`9ae4c000 Void
       +0x028 ByteCount        : 0x30
       +0x02c ByteOffset       : 0x810
    0: kd> db 0xffff9a04`9ae4c810+0x8
    ffff9a04`9ae4c818  19 04 00 00 ff ff ff ff-5a 5a 5a 5a 5a 5a 5a 5a  ........ZZZZZZZZ
    ffff9a04`9ae4c828  5a 5a 5a 5a 5a 5a 5a 5a-18 22 5a 5a 5a 5a 5a 5a  ZZZZZZZZ."ZZZZZZ
    ffff9a04`9ae4c838  5a 5a 5a 5a 5a 5a 5a 5a-00 19 09 02 41 6c 65 70  ZZZZZZZZ....Alep
    ffff9a04`9ae4c848  9a fe 7b 74 7b 4b cd b6-d0 a1 c9 99 04 9a ff ff  ..{t{K..........
    ffff9a04`9ae4c858  20 01 22 01 00 00 00 00-70 d2 fe 9f 04 9a ff ff   .".....p.......
    ffff9a04`9ae4c868  c0 08 65 9a 04 9a ff ff-a0 0f 00 00 00 00 00 00  ..e.............
    ffff9a04`9ae4c878  00 00 00 00 00 00 00 00-fa ad db ba fa ad db ba  ................
    ffff9a04`9ae4c888  00 00 00 00 00 00 00 00-00 00 00 00 00 00 00 00  ................
调用之后。可以看到这部分执行之后已经指向了\x18\x22。
    0: kd> dt ndis!_NET_BUFFER @r14
       +0x000 Next             : (null) 
       +0x008 CurrentMdl       : 0xffff9a04`9ae4c7d0 _MDL
       +0x010 CurrentMdlOffset : 0x20
       +0x018 DataLength       : 0x110
       +0x018 stDataLength     : 0x110
       +0x020 MdlChain         : 0xffff9a04`9c40a180 _MDL
       +0x028 DataOffset       : 0xb0
       +0x000 Link             : _SLIST_HEADER
       +0x000 NetBufferHeader  : _NET_BUFFER_HEADER
       +0x030 ChecksumBias     : 0
       +0x032 Reserved         : 0
       +0x038 NdisPoolHandle   : 0xffff9a04`9aba28c0 Void
       +0x040 NdisReserved     : [2] (null) 
       +0x050 ProtocolReserved : [6] 0x00000160`00000000 Void
       +0x080 MiniportReserved : [4] (null) 
       +0x0a0 DataPhysicalAddress : _LARGE_INTEGER 0x0
       +0x0a8 SharedMemoryInfo : (null) 
       +0x0a8 ScatterGatherList : (null) 
    0: kd> dt ndis!_MDL 0xffff9a04`9ae4c7d0
       +0x000 Next             : 0xffff9a04`9ae4c8f0 _MDL
       +0x008 Size             : 0n56
       +0x00a MdlFlags         : 0n4
       +0x00c AllocationProcessorNumber : 0xffff
       +0x00e Reserved         : 0xffff
       +0x010 Process          : (null) 
       +0x018 MappedSystemVa   : 0xffff9a04`9ae4c810 Void
       +0x020 StartVa          : 0xffff9a04`9ae4c000 Void
       +0x028 ByteCount        : 0x30
       +0x02c ByteOffset       : 0x810
    0: kd> db 0xffff9a04`9ae4c810+0x20
    ffff9a04`9ae4c830  18 22 5a 5a 5a 5a 5a 5a-5a 5a 5a 5a 5a 5a 5a 5a  ."ZZZZZZZZZZZZZZ
    ffff9a04`9ae4c840  00 19 09 02 41 6c 65 70-9a fe 7b 74 7b 4b cd b6  ....Alep..{t{K..
    ffff9a04`9ae4c850  d0 a1 c9 99 04 9a ff ff-20 01 22 01 00 00 00 00  ........ .".....
    ffff9a04`9ae4c860  70 d2 fe 9f 04 9a ff ff-c0 08 65 9a 04 9a ff ff  p.........e.....
    ffff9a04`9ae4c870  a0 0f 00 00 00 00 00 00-00 00 00 00 00 00 00 00  ................
    ffff9a04`9ae4c880  fa ad db ba fa ad db ba-00 00 00 00 00 00 00 00  ................
    ffff9a04`9ae4c890  00 00 00 00 00 00 00 00-03 00 00 00 01 00 00 00  ................
    ffff9a04`9ae4c8a0  50 c8 e4 9a 04 9a ff ff-10 e3 10 2d 00 f8 ff ff  P..........-....
Type为0x18时，会调用NdisGetDataBuffer函数，Length为0x22，也就是0x22*8=0x110个字节。对于NdisGetDataBuffer函数来说，当数据包是分片发送时，会被暂时存放到一个的栈空间内，也就是该函数的第三个参数。而当前的栈空间是不够的，所以导致了栈溢出，由于内核中存在GS保护，每次在函数结束时会验证函数初始阶段存放的Cookie值。如果Cookie值被修改则会报错，而BSOD正是这个原因。
## 0x04 漏洞危害
该漏洞基本可以稳定导致远程主机BSOD，条件受限于必须在同一内网下并且会对RDNSS包进行处理。对于远程代码执行，光靠这一个漏洞基本不可能达到代码执行的目的，内核中的保护很多，对于GS保护来说，需要与一个内存泄露的漏洞组合利用才能导致远程代码执行。
## 0x05 漏洞修复方案
通用修复建议
下载最新的补丁包进行更新修复，链接如下。
临时修复建议
可以通过禁用ICMPv6 RDNSS来缓解。
先获取对应接口的接口号
netsh int ipv6 show int
之后关闭RDNSS
netsh int ipv6 set int 5 rabaseddnsconfig=disable
## 0x06 参考链接
  1. 
  2. 
  3. 