## PostgreSQL 列存储引擎 susql (志铭奉献)  
### 作者                                                                                                                                                                 
digoal                                                                                                                                                                 
### 日期                                                                                                                                                                 
2016-02-29                                                                                                                                                             
### 标签                                                                                                                                                                 
PostgreSQL , 列存储 , susql   
----                                                                                                                                                                 
## 背景                                                     
susql在PostgreSQL9.5基础之上，增加了支持列存储，支持zlib压缩，支持COPY跳过异常行的功能。  
可以在以下WEB下载测试。  
https://github.com/susql/susql/releases  
感谢志铭为PG社区的付出。  
新增功能扩展语法介绍：  
```  
Synopsis  
CREATE [ [ GLOBAL | LOCAL ] { TEMPORARY | TEMP } | UNLOGGED ] TABLE [ IF NOT EXISTS ] table_name ( [  
  { column_name data_type [ COLLATE collation ] [ COMPRESS compression ] [ column_constraint [ ... ] ]  
    | table_constraint  
    | LIKE source_table [ like_option ... ]   
    | COMPRESS default_compression }  
    [, ... ]  
] )  
[ INHERITS ( parent_table [, ... ] ) ]  
[ WITH ( storage_parameter [= value] [, ... ] ) | WITH OIDS | WITHOUT OIDS ]  
[ ON COMMIT { PRESERVE ROWS | DELETE ROWS | DROP } ]  
[ TABLESPACE tablespace_name ]  
[ STORED AS { HEAP | ORC } ]  
[ SORT BY { column_name [,...]}]  
Parameters  
STORED AS  
HEAP: row storage format(postgres heap)(default).  
ORC: column storage format.  
SORT BY  
When table is STORED AS ORC, sort the column for reading optimize.  
COMPRESS  
To set column compression type for a table. COMPRESS default_compression is for default compression type if individual column compression is not specific.  
There is a buildin compression type PGLZ, and an extension compression type ZLIB(create extension dc_zlib fistly to use ZLIB compression).  
```  
注意insert需要vacuum后才能转换到列存储, copy进来的数据不需要转换直接进 of 文件（即列存）。  
```  
COPY table_name [ ( column_name [, ...] ) ]  
    FROM { 'filename' | PROGRAM 'command' | DIRECTORY 'directory_name' [ RECURSIVE { 'NUMBER' } ] | STDIN }  
    [ [ WITH ] ( option [, ...] ) ]  
COPY { table_name [ ( column_name [, ...] ) ] | ( query ) }  
    TO { 'filename' | PROGRAM 'command' | STDOUT }  
    [ [ WITH ] ( option [, ...] ) ]  
where option can be one of:  
    FORMAT format_name  
    OIDS [ boolean ]  
    FREEZE [ boolean ]  
    DELIMITER 'delimiter_character'  
    NULL 'null_string'  
    HEADER [ boolean ]  
    QUOTE 'quote_character'  
    ESCAPE 'escape_character'  
    FORCE_QUOTE { ( column_name [, ...] ) | * }  
    FORCE_NOT_NULL ( column_name [, ...] )  
    FORCE_NULL ( column_name [, ...] )  
    ENCODING 'encoding_name'  
    UNSTRICT [ boolean ]  
    UNSTRICT_NUM { number }  
Parameters  
DIRECTORY Indicates the input is a directory and will copy all file in this directory.  
RECURSIVE {NUMBER} Specifies if the recusive directory copy will be applied.  
UNSTRICT Specifies that whether continue copy process when some line is broken.  
UNSTRICT_NUM Specifies how many broken lines reach to stop the copy process. Only effects when UNSTRICT is set.  
```  
通过create compress可以创建压缩方法。  
```  
postgres=# create compress configuration zlib2 (template=zlib, level=9);  
CREATE COMPRESS CONFIGURATION  
Time: 9.996 ms  
postgres=# create compress configuration pglz2 (template=pglz, ...);  
```  
pglz用的参数如下：  
```   
 * PGLZ_Strategy -  
 *  
 *              Some values that control the compression algorithm.  
 *  
 *              min_input_size          Minimum input data size to consider compression.  
 *  
 *              max_input_size          Maximum input data size to consider compression.  
 *  
 *              min_comp_rate           Minimum compression rate (0-99%) to require.  
 *                                                      Regardless of min_comp_rate, the output must be  
 *                                                      smaller than the input, else we don't store  
 *                                                      compressed.  
 *  
 *              first_success_by        Abandon compression if we find no compressible  
 *                                                      data within the first this-many bytes.  
 *  
 *              match_size_good         The initial GOOD match size when starting history  
 *                                                      lookup. When looking up the history to find a  
 *                                                      match that could be expressed as a tag, the  
 *                                                      algorithm does not always walk back entirely.  
 *                                                      A good match fast is usually better than the  
 *                                                      best possible one very late. For each iteration  
 *                                                      in the lookup, this value is lowered so the  
 *                                                      longer the lookup takes, the smaller matches  
 *                                                      are considered good.  
 *  
 *              match_size_drop         The percentage by which match_size_good is lowered  
 *                                                      after each history check. Allowed values are  
 *                                                      0 (no change until end) to 100 (only check  
 *                                                      latest history entry at all).  
```  
安装:  
```  
[root@digoal ~]# rpm -ivh susql50-5.0.1-0.el6.x86_64.rpm   
error: Failed dependencies:  
        susql50-libs(x86-64) = 5.0.1-0.el6 is needed by susql50-5.0.1-0.el6.x86_64  
[root@digoal ~]# rpm -ivh susql50-libs-5.0.1-0.el6.x86_64.rpm   
Preparing...                ########################################### [100%]  
   1:susql50-libs           ########################################### [100%]  
/sbin/ldconfig: /opt/gcc4.9.3/lib/libstdc++.so.6.0.20-gdb.py is not an ELF file - it has the wrong magic bytes at the start.  
/sbin/ldconfig: /opt/gcc4.9.3/lib64/libstdc++.so.6.0.20-gdb.py is not an ELF file - it has the wrong magic bytes at the start.  
[root@digoal ~]# rpm -ivh susql50-5.0.1-0.el6.x86_64.rpm   
Preparing...                ########################################### [100%]  
   1:susql50                ########################################### [100%]  
[root@digoal ~]# rpm -ivh susql50-server-5.0.1-0.el6.x86_64.rpm   
Preparing...                ########################################### [100%]  
   1:susql50-server         ########################################### [100%]  
/sbin/ldconfig: /opt/gcc4.9.3/lib/libstdc++.so.6.0.20-gdb.py is not an ELF file - it has the wrong magic bytes at the start.  
/sbin/ldconfig: /opt/gcc4.9.3/lib64/libstdc++.so.6.0.20-gdb.py is not an ELF file - it has the wrong magic bytes at the start.  
error reading information on service susql-5.0: No such file or directory  
[root@digoal ~]# rpm -ivh susql50-contrib-5.0.1-0.el6.x86_64.rpm   
Preparing...                ########################################### [100%]  
   1:susql50-contrib        ########################################### [100%]  
```  
初始化数据库  
```  
[root@digoal ~]# mkdir /data01/susql  
[root@digoal ~]# chown susql:susql /data01/susql  
[root@digoal ~]# su - susql  
-bash-4.1$ vi env_pg.sh  
export PS1="$USER@`/bin/hostname -s`-> "  
export PGPORT=1923  
export PGDATA=/data01/susql/pgdata/pg_root  
export LANG=en_US.utf8  
export PGHOME=/usr/susql-5.0  
export LD_LIBRARY_PATH=$PGHOME/lib:/lib64:/usr/lib64:/usr/local/lib64:/lib:/usr/lib:/usr/local/lib:$LD_LIBRARY_PATH  
export DATE=`date +"%Y%m%d%H%M"`  
export PATH=$PGHOME/bin:$PATH:.  
export MANPATH=$PGHOME/share/man:$MANPATH  
export PGHOST=$PGDATA  
export PGUSER=postgres  
export PGDATABASE=postgres  
alias rm='rm -i'  
alias ll='ls -lh'  
unalias vi  
[root@digoal ~]# su - susql  
-bash-4.1$ . ./env_pg.sh   
-bash: unalias: vi: not found  
susql@digoal-> initdb -D $PGDATA -E UTF8 --locale=C -U postgres -W  
The files belonging to this database system will be owned by user "susql".  
This user must also own the server process.  
The database cluster will be initialized with locale "C".  
The default text search configuration will be set to "english".  
Data page checksums are disabled.  
creating directory /data01/susql/pgdata/pg_root ... ok  
creating subdirectories ... ok  
selecting default max_connections ... 100  
selecting default shared_buffers ... 128MB  
selecting dynamic shared memory implementation ... posix  
creating configuration files ... ok  
creating template1 database in /data01/susql/pgdata/pg_root/base/1 ... ok  
initializing pg_authid ... ok  
Enter new superuser password:   
Enter it again:   
setting password ... ok  
initializing dependencies ... ok  
creating system views ... ok  
loading system objects' descriptions ... ok  
creating collations ... ok  
creating conversions ... ok  
creating dictionaries ... ok  
setting privileges on built-in objects ... ok  
creating information schema ... ok  
loading PL/pgSQL server-side language ... ok  
vacuuming database template1 ... ok  
copying template1 to template0 ... ok  
copying template1 to postgres ... ok  
syncing data to disk ... ok  
WARNING: enabling "trust" authentication for local connections  
You can change this by editing pg_hba.conf or using the option -A, or  
--auth-local and --auth-host, the next time you run initdb.  
Success. You can now start the database server using:  
    pg_ctl -D /data01/susql/pgdata/pg_root -l logfile start  
susql@digoal-> cd $PGDATA  
```  
修改配置文件  
```  
susql@digoal-> grep "^[a-z]" postgresql.conf  
listen_addresses = '0.0.0.0'            # what IP address(es) to listen on;  
port = 1923                             # (change requires restart)  
max_connections = 100                   # (change requires restart)  
unix_socket_directories = '.'   # comma-separated list of directories  
unix_socket_permissions = 0700          # begin with 0 to use octal notation  
tcp_keepalives_idle = 70                # TCP_KEEPIDLE, in seconds;  
tcp_keepalives_interval = 10            # TCP_KEEPINTVL, in seconds;  
tcp_keepalives_count = 10               # TCP_KEEPCNT;  
shared_buffers = 4096MB                 # min 128kB  
dynamic_shared_memory_type = posix      # the default is the first option  
bgwriter_delay = 10ms                   # 10-10000ms between rounds  
bgwriter_lru_maxpages = 1000            # 0-1000 max buffers written/round  
synchronous_commit = off                # synchronization level;  
full_page_writes = off                  # recover from partial page writes  
wal_compression = off                   # enable compression of full-page writes  
wal_log_hints = off                     # also do full page writes of non-critical updates  
wal_buffers = 16MB                      # min 32kB, -1 sets based on shared_buffers  
wal_writer_delay = 10ms         # 1-10000 milliseconds  
checkpoint_timeout = 35min              # range 30s-1h  
max_wal_size = 4GB  
checkpoint_completion_target = 0.9      # checkpoint target duration, 0.0 - 1.0  
effective_cache_size = 4GB  
log_destination = 'csvlog'              # Valid values are combinations of  
logging_collector = on                  # Enable capturing of stderr and csvlog  
log_directory = 'pg_log'                # directory where log files are written,  
log_filename = 'postgresql-%a.log'      # log file name pattern,  
log_truncate_on_rotation = on           # If on, an existing log file with the  
log_rotation_age = 1d                   # Automatic rotation of logfiles will  
log_rotation_size = 0                   # Automatic rotation of logfiles will  
log_checkpoints = on  
log_connections = on  
log_disconnections = on  
log_error_verbosity = verbose            # terse, default, or verbose messages  
log_timezone = 'PRC'  
log_autovacuum_min_duration = 0 # -1 disables, 0 logs all actions and  
datestyle = 'iso, mdy'  
timezone = 'PRC'  
lc_messages = 'C'                       # locale for system error message  
lc_monetary = 'C'                       # locale for monetary formatting  
lc_numeric = 'C'                        # locale for number formatting  
lc_time = 'C'                           # locale for time formatting  
default_text_search_config = 'pg_catalog.english'  
enable_copyto_flush = on                #When set, Copy To operation will explicit flush the data when finishing  
copy_extension = on                     #When set, Copy Extension Feature Enabled  
```  
测试  
```  
susql@digoal-> psql  
psql (9.5.0 (SuSQL 5.0.1))  
Type "help" for help.  
postgres=# create extension dc_zlib;  
CREATE EXTENSION  
postgres=# create table test_col(  
id int,   
info text compress zlib,   
crt_time timestamp,   
c1 int,   
c2 int,   
c3 int,   
c4 int,   
c5 int,   
c6 int,   
c7 int,   
c8 int,   
c9 int,   
c10 int,   
c11 int,   
c12 int)   
stored as orc   
sort by id;  
postgres=# create table test_heap(  
id int,   
info text compress zlib,   
crt_time timestamp,   
c1 int,   
c2 int,   
c3 int,   