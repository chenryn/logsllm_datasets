```
user@docker1:~$ docker network disconnect bridge web1
user@docker1:~$
user@docker1:~$ docker exec web1 ip addr
1: lo:  mtu 65536 qdisc noqueue state UNKNOWN qlen 1
    link/loopback 00:00:00:00:00:00 brd 00:00:00:00:00:00
    inet 127.0.0.1/8 scope host lo
       valid_lft forever preferred_lft forever
    inet6 ::1/128 scope host
       valid_lft forever preferred_lft forever
10: eth1@if11:  mtu 1500 qdisc noqueue state UP
    link/ether 02:42:ac:12:00:02 brd ff:ff:ff:ff:ff:ff
    inet 172.18.0.2/16 scope global eth1
       valid_lft forever preferred_lft forever
    inet6 fe80::42:acff:fe12:2/64 scope link
       valid_lft forever preferred_lft forever
user@docker1:~$
```
有趣的是，当您从容器连接和断开网络时，Docker 还负责确保容器的连接。例如，在将容器从网桥网络断开之前，容器的默认网关仍然在`docker0`网桥之外:
```
user@docker1:~$ docker exec web1 ip route
default via 172.17.0.1 dev eth0
172.17.0.0/16 dev eth2  proto kernel  scope link  src 172.17.0.2
172.18.0.0/16 dev eth1  proto kernel  scope link  src 172.18.0.2
user@docker1:~$
```
这很有意义，因为我们不想在将容器连接到新网络时中断容器连接。但是，一旦我们通过断开接口到网桥网络的连接来移除托管默认网关的网络，我们会看到 Docker 将默认网关更新到`mynetwork`网桥之外的剩余接口:
```
user@docker1:~$ docker exec web1 ip route
default via 172.18.0.1 dev eth1
172.18.0.0/16 dev eth1  proto kernel  scope link  src 172.18.0.2
user@docker1:~$
```
这确保了容器无论连接到哪个网络都具有连通性。
最后，我想指出`none`网络类型的一个有趣的方面，当你连接和断开容器到网络时。正如我前面提到的，`none`网络类型告诉 Docker 不要将容器分配给任何网络。然而，这并不仅仅意味着最初，它是一种配置状态，告诉 Docker 容器不应该有任何与之相关的网络。例如，假设我们用`none`网络启动以下容器:
```
user@docker1:~$ docker run --net=none --name web1 -d jonlangemak/web_server_1
9f5d73c55ee859335cd2449b058b68354f5b71cf37e57b72f5c984afcafb4b21
user@docker1:~$ docker exec web1 ip addr
1: lo:  mtu 65536 qdisc noqueue state UNKNOWN qlen 1
    link/loopback 00:00:00:00:00:00 brd 00:00:00:00:00:00
    inet 127.0.0.1/8 scope host lo
       valid_lft forever preferred_lft forever
    inet6 ::1/128 scope host
       valid_lft forever preferred_lft forever
user@docker1:~$
```
正如您所看到的，容器除了它的环回之外没有任何网络接口。现在，让我们尝试将这个容器连接到一个新网络:
```
user@docker1:~$ docker network connect mynetwork web1
Error response from daemon: Container cannot be connected to multiple networks with one of the networks in private (none) mode
user@docker1:~$
```
Docker 告诉我们，这个容器被定义为没有网络，并阻止我们将容器连接到任何网络。如果我们检查`none`网络，可以看到这个容器其实是连着它的:
```
user@docker1:~$ docker network inspect none
[
    {
        "Name": "none",
        "Id": "a191c26b7dad643ca77fe6548c2480b1644a86dcc95cde0c09c6033d4eaff7f2",
        "Scope": "local",
        "Driver": "null",
        "EnableIPv6": false,
        "IPAM": {
            "Driver": "default",
            "Options": null,
            "Config": []
        },
        "Internal": false,
        "Containers": {            "931a0d7ad9244c135a19de6e23de314698112ccd00bc3856f4fab9b8cb241e60": {
 "Name": "web1",
 "EndpointID": "6a046449576e0e0a1e8fd828daa7028bacba8de335954bff2c6b21e01c78baf8",
 "MacAddress": "",
 "IPv4Address": "",
 "IPv6Address": ""
            }
        },
        "Options": {},
        "Labels": {}
    }
]
user@docker1:~$
```
为了将此容器连接到新网络，我们首先必须将其从`none`网络断开:
```
user@docker1:~$ docker network disconnect none web1
user@docker1:~$ docker network connect mynetwork web1
user@docker1:~$ docker exec web1 ip addr
1: lo:  mtu 65536 qdisc noqueue state UNKNOWN qlen 1
    link/loopback 00:00:00:00:00:00 brd 00:00:00:00:00:00
    inet 127.0.0.1/8 scope host lo
       valid_lft forever preferred_lft forever
    inet6 ::1/128 scope host
       valid_lft forever preferred_lft forever
18: eth0@if19:  mtu 1500 qdisc noqueue state UP
    link/ether 02:42:ac:12:00:02 brd ff:ff:ff:ff:ff:ff
    inet 172.18.0.2/16 scope global eth0
       valid_lft forever preferred_lft forever
    inet6 fe80::42:acff:fe12:2/64 scope link
       valid_lft forever preferred_lft forever
user@docker1:~$
```
一旦您将其从`none`网络断开，您就可以自由地将其连接到任何其他定义的网络。
# 定义用户定义的桥接网络
通过桥`Driver`的使用，用户可以设置自定义桥来连接容器。您可以创建任意多个，唯一真正的限制是您必须在每个网桥上使用唯一的 IP 地址。也就是说，您不能与其他网络接口上已经定义的现有子网重叠。
在本食谱中，我们将学习如何定义用户定义的桥，以及在创建过程中您可以使用的一些独特选项。
## 做好准备
`docker network`子命令是在 Docker 1.9 中引入的，所以你需要一个 Docker 主机至少运行那个版本。在我们的例子中，我们将使用 Docker 版本。您还需要对当前的网络布局有一个很好的了解，以便我们检查当前的配置时，您可以跟着做。假设每个 Docker 主机都处于其本机配置。
## 怎么做…
在上一个配方中，我们讨论了定义用户定义网络的过程。虽然这里讨论的选项与所有网络类型都相关，但是我们可以通过传递`--opt`标志将其他选项传递给我们的网络实现。让我们快速回顾一下桥`Driver`的可用选项:
*   `com.docker.network.bridge.name`:这是你希望给桥起的名字。
*   `com.docker.network.bridge.enable_ip_masquerade`:这指示 Docker 主机在该容器试图离开本地主机时，将该网络中的所有容器隐藏或伪装在 Docker 主机的接口后面。
*   `com.docker.network.bridge.enable_icc`:这将打开或关闭桥的**容器间连接** ( **ICC** )模式。在[第 6 章](06.html "Chapter 6. Securing Container Networks")、*保护容器网络*中更详细地介绍了该功能。
*   `com.docker.network.bridge.host_binding_ipv4`:这定义了应该用于端口绑定的主机接口。
*   `com.docker.network.driver.mtu`:这将设置连接到此桥的容器的 MTU。
这些选项可以直接与我们在 Docker 服务下定义的选项进行比较，以对默认的`docker0`桥进行更改。
![How to do it…](img/B05453_03_02.jpg)
上表将影响`docker0`网桥的服务级别设置与您在定义用户定义的网桥网络时可以使用的设置进行了比较。它还列出了在任一情况下未指定设置时使用的默认设置。
在驱动程序特定选项和属于`network create`子命令的通用选项之间，我们在定义容器网络时有相当大的灵活性。让我们通过几个快速构建用户定义桥的例子来介绍一下:
### 实施例 1
```
docker network create --driver bridge \
--subnet=10.15.20.0/24 \
--gateway=10.15.20.1 \
--aux-address 1=10.15.20.2 --aux-address 2=10.15.20.3 \
--opt com.docker.network.bridge.host_binding_ipv4=10.10.10.101 \
--opt com.docker.network.bridge.name=linuxbridge1 \
testbridge1
```
前面的`network create`语句定义了具有以下特征的网络:
*   用户定义的网络类型`bridge`
*   `10.15.20.0/24`的一个`subnet`
*   一个`gateway`或者`10.15.20.1`的桥接 IP 接口
*   两个保留地址:`10.15.20.2`和`10.15.20.3`
*   主机上`10.10.10.101`的一个端口绑定接口
*   `linuxbridge1`的一个 Linux 接口名称
*   `testbridge1`的一个 Docker 网络名称
请记住这些选项中的一些仅用于示例目的。实际上，我们不需要为前面例子中的网络`Driver`定义`Gateway`，因为默认值将覆盖我们。
如果我们在检查时创建前面提到的网络，我们应该看到我们定义的属性:
```
user@docker1:~$ docker network inspect testbridge1
[
    {
 "Name": "testbridge1",
        "Id": "97e38457e68b9311113bc327e042445d49ff26f85ac7854106172c8884d08a9f",
        "Scope": "local",
 "Driver": "bridge",
        "EnableIPv6": false,
        "IPAM": {
            "Driver": "default",
            "Options": {},
            "Config": [
                {
 "Subnet": "10.15.20.0/24",
 "Gateway": "10.15.20.1",
                    "AuxiliaryAddresses": {
 "1": "10.15.20.2",
 "2": "10.15.20.3"
                    }
                }
            ]
        },
        "Internal": false,
        "Containers": {},
        "Options": {
 "com.docker.network.bridge.host_binding_ipv4": "10.10.10.101",
 "com.docker.network.bridge.name": "linuxbridge1"
        },
        "Labels": {}
    }
]
user@docker1:~$
```
### 注
您传递给网络的选项未被验证。也就是说，如果你把`host_binding`拼错为`host_bniding`，Docker 还是会让你创建网络，选项会被定义；然而，这是行不通的。
### 实施例 2
```
docker network create \
--subnet=192.168.50.0/24 \
--ip-range=192.168.50.128/25 \
--opt com.docker.network.bridge.enable_ip_masquearde=false \