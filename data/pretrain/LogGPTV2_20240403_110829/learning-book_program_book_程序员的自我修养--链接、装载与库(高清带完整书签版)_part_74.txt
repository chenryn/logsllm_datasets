advapi32.dll
CreateService
注册表、
系统关闭重启、Windows
LogonUser
Service、用户账号管理
GetOpenFileName
通用对话框
comdlg32.dl1
PrintDlg
Windows通用对语框，比如打开文件、
ChooseFont
打印窗口、选择字体、选择颜色等
程序员的自我修养一
链接、装载与库
---
## Page 427
404
第12章系统调用与API
续表
类别
DLL
示例API
说明
通用控件
comctl32.dl
CreateStatus Window
Windows 高级控件，诸如状态栏、进
CreateToolbar
度条、工具条等。
shell32.dI1
Extractlcon
ShellExecute
与Windows 图形 Shell 相关的操作.
网络服务
ws2_32.d11
send
网络相关服务，包括Winsock、
A301
NetDDE、RPC.NetBIOS.
我们可以在MSDN里找到每一个API的文格，很多API还可以找到使用示例，因此
MSDN是学习Win32API极佳的工具。
表12-2中所列的Kermel32.dll和 User32.dll等DLL在不同的 Windows平台上的实现都
不一样，虽然它们暴露给应用程序的接口是--样的。在WindowsNT系列的平台上，这些
DLL在实现上都会依赖于一个更为底层的 DLL 叫做 NTDLL.DLL，然后由 NTDLLDLL 进
行系统调用.NTDLL.DLL把Windows NT内核的系统调用包装了起来，它实际上是Windows
系统用户层面的最底层，所有的DLL都是通过调用NTDLLDLL，由它进行系统调用的。
NTDLL.DLL的导出函数对于应用程序开发者是不公开的，原则上应用程序不应该直接使用
NTDLL.DLL中的任何导出函数。我们可以根据dumpbin等工具来察看它的导出函数，比如
WindowsXP的NTDLL.dIl大约有1300个导出函数。它所导出的函数人多都以“Nt”开头，
并提供给那些API DLL使用以实现系统功能，比如创建进程的函数叫做NtCreateProcess，
位于Kermel32.dl 的 CreateProcess 这个 AP1 就是通过 NtCreateProces 实现的。
由于WindowsAPI所提供的接口还是相对比较原始的，比如r它所提供的网络相关的接
口仅仅是socket级别的操作，如果用户要通过API访问HTTP资源，还需要自已实现HTTP
协议，所以直接使用AP1进行程序开发往往效率较低。Windows系统在API之上建立了很
多应用模块，这些应用模块是对WindowsAPI的功能的扩展，比如对HTTP/FTP等协议进
行包装的Intermet模块（wininet.dll）对WinSocket API进行了扩展，这样程序开发者就可以
通过Intemet模块直接访间HTTP/FTP资源，而不需要自己实现一套HTTP/FTP协议。除了
wininetdll之外，Windows 还有许多类似的对WindowsAPI 的包装模块，比如 OPENGL模
块、ODBC（统一的数据库接口）、WIA（数字图像设备接口）等。
12.3.2为什么要使用WindowsAPl
能省事则省一事，微软为什么放着好好的系统调用不用，又要在CRT和系统调用之
闻增加一层 Windows API 层呢?
微软不公开系统调用而决定使用WindowsAPI作为程序接口的原因也很简单，其实还
程序员的自我修养一链接、装载与库
---
## Page 428
12.3Windows API
405
它对应用程序的向后兼容性可以说是非常好，这一点从WindowsXP等这种较新的Windows
夜本还仍然支持20多年前的DOS程序/Windows 3.1/Windows 95 的程序可以者出来。虽然
它没有完全做到向后兼容，但是我们看得出Windows系统为向后兼容所付出的努力及
Windows系统为此所背负的历史包狱。
系统调用实际上是非常依赖于硬件结构的一种接口，它受到硬件的严格限制，比如寄存
器的数量、调用时的参数传递、中断号、堆栈切换等，都与硬件密切相关。如果硬件结构稍
微发生改变，大量的应用程序可能就会出现问题（特别是那些与CRT静态链接在起的）。
那么直接使用系统调用作为程序接口的系统，它的应用程序在不同硬件平台间的兼容性也是
存在较大向题的。
硬件结构发生改变虽然较少见，可能儿年甚至十几年才会发生一次，比如16位CPU升
级至32位，32位升级至64位，或者由 Sysenter/Sysexit 代替中断等，但是一旦发生改变，
所付出的代价无疑是惊人的。
为了尽量隔离硬件结构的不同而导致的程序兼容性问题，Windows系统把系统调用包装
了起来，使用DLL导出函数作为应用程序的唯一可用的接口暴露给用户，这样可以让内核
随版本白由地改变系统调用接口，只要让AP层不改变，用户程序就可以完全无碍地运行
在新的系统上。
除了隔离硬件结构不同之外，Windows本身也有可能使用不同版本的内核，比如微软在
Windows 2000 之前要同时维护两条Windows 产品线：Windows 9x 和 Windows NT 系列。它
们使用的是完全不同的Windows内核，所以系统调用的接口自然也是不一样的。如果应用
程序都是直接使用系统调用，那么后来Windows 9x和WindowsNT这两条产品线合并成
Windows2000的时候估计不会像现在这么顺利。
Windows API以 DLL导出函数的形式存在也自然是水到渠成，我们知道 DLL 作为
Windows系统的最基本的模块组织形式，它有者良好的接口定文和灵活的组合方式。DLL
基本上是Windows系统上很多高级接口和程序设计方法的基石，包括内核与驱动程序、
COM、OLE、ActiveX等都是基于DLL技术的。
银弹
很多时候人们把这种通过在软件体系结构中增加层以解决兼容性问题的做法又叫做
“银弹”。古老相传，只有银弹（silverbullet才能杀死巫士、巨人、有魔力的动物，警
如狼人。在现代软件工程的巨著（人月神话）中，作者把规模越来越大的软件开发项
目比作无法控制的怪物，希望有一样技术，能够像银弹彻底杀死狼人那样，彻底解决
这个问题。因而现在计算机界中的银弹，指的就是能够迅速解决各种问题的“方灵药“。
程序员的自我修养一链接、装载与库
---
## Page 429
406
第12章系统调用与API
当某个软件某个层面要发生变化，却要保持与之相关联的另一方面不变时，加一个中
间层即可。WindowsAPI层就是这样的一个“银弹”。
Windows API 的实例
我们知道WindowsNT系列与Windows9x系列是两个内核完全不同的操作系统，它们
分别属于两个不同的Windows产品线，前者的目的主要为商业应用，它的内核以稳定高效
著称：面后者是以家庭和多媒体应用为目标，注重体系应用程序的兼容性（支持DOS程序）
和多媒体功能。
当 Windows 版本升级至2000时，微软计划停止Windows 9x系列产品，而将Windows
统一建立在较可靠的 NT内核之上。这时候两条产品线将合并成同一个Windows 版本，即
Windows 2000。Windows 2000 就必须承担起能够间时兼容 Windows 9x和之前 Window NT
的应用程序的任务。由于Windows 2000使用的是NT的内核（内核版本5.0），所以要做到
兼容之前的WindowsNT（NT4.0及之前）的应用程序应该不是很成问题的。但是要兼容
Windows9x则不是一件容易的事，因为它的内核与NT完全不同，它们各自使用的中断号
都不一样，NT内核使用的是INT 0x2E。面9x内核则使用INT 0x20，所以，如果某个9x
的应用程序一旦使用了任何系统调用，那么它就无法在Windows 2000下运行。
除了它们的内核中断号不同以外，即使同一个接口，有可能参数也不同。
Windows9x系统的内核是并不原生支持unicode的，因此它的系统调用涉及的字符串都
是ANSI字符串，即参数都是使用char*作为类型，比如与CreateFile 这个API相对应的系
统调用要代入一个文件名，那么这个字符甲在最终传遥给内核时应该是一个ANSI字符审。
而WindowsNT内核是原生支持unicode的，所有的系统调用涉及的字符串相关的参数都是
unicode字符串，即参数是wchar_r*类型的（wchar_t是一种双字节的字符类型）。那么同样
的系统调用，所需要的字符串类型却不一样，这也会造成程序兼容性的问题。
幸运的是，WindowsAPI层阻止了这样的事情发生。大家如果留意的话，会注意到
Windows 下所有有字符串作为参数的 API 都会有两个版本，一个是ANSI字符串版本，另
外个是unicode字符串版本。例如，与Windows API 的CreateFile 相对应的两个版本分别
unicode版，kernel32.dll实际上导出了这两个函数，而 CreateFile 仅仅是一个宏定义，下面
WINBASEAPI
HANDLE
CreateFileA(
WINAPI
IN LPCSTR 1pF11eName,
IN DWORD dwShareMode,
IN DWORD dwDesiredAccess,
程序员的自我修养一链接、装载与库
---
## Page 430
12.3Windows API
407
IN LPSEcURITY_ATTRIBUTEs 1pSecurityAttributes,
IN DWORD dwFlagsAndAttributes,
IN DWORD dwCreationDisposition,
IN HANDLE hTemplatePi1e
WINBASEAPI
HANDLE
WINAPI
CreateFileW(
IN LPCWSTR 1pFileName,
IN DWORD dwDesiredAcce88,
IN DWORD dwShareMode,
IN LPSECURITY_ATTRIBUTES 1pSecurityAttributes,
IN DwORD dwCreationDisposition,
IN DWORD dwPlagsAndAttributes,
IN HANDLE hTemplateFile
#ifdef UNICODE
)：
#define Createrile CreateFileW
#else
#endif
#define CreateFile CreatePileA
可见根据编译的时候是否定义UNICODE这个宏，CreateFile会被展开为CreateFileW或
CreateFileA，而这两个函数唯一的区别就是第一个参数lpFileName 的类型不同，分别为
LPCWSTR 和I LPCSTR,即 const wchar_t*和l const char*。 CreateFileA/CreateFileW 这个 API
才是真正的Windows API导出函数，它们在不同的操作系统版本上实现会有所不同。
例如在Windows 2000下，由于NT内核只支持unicode版的系统调用，所以CreateFileW
的实现是最直接的，它只要直接调用内核即可。而CreateFleA则在实现上需要把第一个参
数从ANSI字符串转换成unicode字符串（Windows提供了MultiByteToWideChar这样的API
用于转换不同编码的字符串），然后再调用CreateFileW，Windows 2000的kermel32.dll中的
CreateFileA的实现大概如下面的代码所示：
HANDLE STDCALL CreateFi1eA(
DWORD dwDesiredAccess,
LPCSTR 1pFileName,
LPSECURITY_ATTRIBUTES 1pSecurityAttributes,
DWORD dwShareMode,
DWORD dwCreationDisposition,
DWORD dwFlag8AndAttributes,
HANDL& hTemplatePile)
HANDL8 Fi1eHandle;
PWCHAR Fi1eNameW;
FileNameW = MultiByteToWideChar ( 1pPileName ) :
// ANSI to UNICODE
FileHandle = CreateFileW (FileNameW,
dwDesiredAccess,
dwShareMode,
程序员的自我修养一—链接、装载与库
---
## Page 431
408
第12章系统调用与API
lpSecurityAttributes,
dwFlageAndAttributes,
dwCreationDisposition,
hTemplateFile1 ;
return FileHandle;
对上面的代码我们进行了简化，但是它表达的思想与实际的实现是一致的。可以想象，
在 Windows 9x的kemel32.dll所进行的恰恰是相反的步骤，CreateFileW函数中的宽字符串
通过WideCharToMultiByteO被转换成了ANSI字符串，然后调用CreateFileA。API层在这一
过程中所扮演的角色可以如图12-10所示。
ANSI
CODE
MuhB
API
CreateFleW
NICreateFie
NTDLLd
Innerrupk
Kemel
int 2eh
NT Kernel
Windows 2000/XP
Windows 9x
图 12-10Windows NT 和 Windows 9x的 API层次结构对比
所以不管内核如何改变接口，只要维持API层面的接口不变，理论上所有的应用程序
都不用重新编译就可以正常运行，这也是WindowsAPI存在的主要原因。
12.3.3API与子系统
作为一个商业操作系统，应用程序兼客性是评价操作系统是否有竞争力最重要的指标之
一，一方面从用户的角度看，如果一个商业操作系统只能运行数量很少的应用程序，是不会
有人使用的：从应用程序的开发者角度看，他们投入了巨大的精力在应用程序上，如果操作
系统不支持这些应用程序，无疑会使开发者的努力白费。微软最初在开发WindowsNT的时
程序员的自我修养—链接、装载与库
---
## Page 432
12.3Windows API
409
候除了考虑向后兼容性之外（兼容其他版本Windows），它还考虑到了兼容Windows之外的
操作系统。
为了操作系统的兼容性，微软试图让WindowsNT能够支持其他操作系统上的应用程
序。在设计Windows NT的时候，与它同一时期的操作系统有各种UNIX（posix标准）、IBM
的 OS/2、微软自家的DOS 和 Windows 3.x等。于是Windows NT 提出子系统（Subsystem）
的概念，希望提供各种操作系统的执行环境，以兼容它们的应用程序。
子系统又称为Windows环境子系统（EvironmentSubsystem）.简称子系统
（Subsystem），我们知道，原生的 Windows 程序是通过CreateProcess 这个API来创建进程
的，面UNIX的程序则是通过forkO米创建的，子系统就是这样一个中间层，它使用Windows
的API来模拟forkO这样的系统调用，使得应用程序看起来与UNIX没有区别。
子系统实际上又是Windows架设在API和应用程序之间的另一个中间层。前面讲到API
这个中间层是为了防止内核系统调用层发生变化导致用户程序也必须随之变化面增加的，面