.212
.227
.976
.955
2
.806
.793
.786
.977
.957
1
.929
.893
.878
.952
.906
.500
.003
.001
6
0
0
7.3 The Expert Attacks
The expert adversaries have full control of the OS and they
are capable of making arbitrary changes to the system. They
can override all attributes of any BC/MC protocol from a
(suspicious) device S with attributes from a benign device B.
Rows 2 to 4 of Table 5 show OWL’s device classiﬁcation
accuracy against the expert attacks on 1,000 devices, when
n ∈ [1,6] randomly selected views are forged. When 3 or
more views are forged, OWL’s accuracy drops signiﬁcantly at
all levels. Rows 5 to 6 show OWL’s malicious device detec-
tion performance against the set of 1,000 benign and 1,000
attacked devices. Both accuracy and recall peaks when half of
the views are forged. When a malicious device successfully
mimics all 6 views, its MC/BC packets essentially becomes
identical to a benign device. Hence, OWL’s detection recall
drops to almost 0, while accuracy drops to 0.5, i.e., benign
devices are correctly identiﬁed as negative (true negative),
while malicious devices are also classiﬁed as negative (false
negative). However, when the adversary fakes 5 views but
misses one, OWL effectively detects the malicious device.
We also discuss two weaker versions of expert attacks: (1)
MAC modiﬁers: privileged users may easily modify devices’
MAC addresses, which is equivalent to overwriting half of
View #6. (2) Software installers: privileged users may in-
stall software(s), e.g., DHCP server, which interferes with
the device’s native ﬁngerprint. Note that the original BC/MC
packets from the device stay intact. This is equivalent to
partially modifying view(s). In our experiments, OWL’s per-
formance against both attacks is similar to the performance
against expert attacks with same number of affected views.
Adversarial machine learning could be employed to attack
the MvWDL model. However, attackers need to carefully
engineer the BC/MC packets to generate adversarial attributes.
In practice, it could be easier to perform expert attacks to
overwrite all BC/MC packets in a device to hide its identity.
8 Discussions
In this section, we discuss several important issues: the secu-
rity properties of malicious device detection, the undetectable
devices, performance tradeoffs, OWL’s limitations, etc.
Security Analysis. We ﬁrst provide a brief security analysis
of OWL, corresponding to the adversary model and two types
of malicious devices introduced in Section 2. (1) For genuine
devices that are disallowed in a network, such as hidden cam-
eras or unauthorized routers, OWL detects them with high
coverage and accuracy, as shown in Sections 5 and 6. More
discussions on performance trade-offs and undetectable de-
vices will be presented in this section. (2) When a fabricated,
counterfeit, or forged device attempts to hide its original iden-
tity (e.g., laptop) and report a fake identity (e.g., network
gateway), it is difﬁcult to completely and accurately forge the
entire software/protocol suite at all layers. OWL detects the
subtle discrepancies among features from essential network
protocols. Meanwhile, virtual devices are often employed in
real-world attacks [52]. In OWL, virtual devices are either cor-
rectly detected as VMs, or trigger alarms due to dual identities
on the same MAC, as discussed in Section 6. Effectiveness of
OWL is shown in theory in Section 4, and demonstrated by
case studies in Section 6. However, due to the unavailability
of ground truth data, we are unable evaluate the recall of ma-
licious device detection. Note that the threshold ε in Equation
15 could be tuned with real world data to improve detection
rate. Meanwhile, false positives in malicious device detection
are more tolerable than false positives in network IDS, since
the number of devices in the WiFi network is signiﬁcantly
smaller, so that a few false alarms would not exhaust network
administrators. Meanwhile, false alarms (mostly unknown
devices) could be labeled and used to retrain OWL to improve
classiﬁcation accuracy and reduce false positives.
Silent Devices. Some devices are silent that they do not ac-
tively send BC/MC packet. They pose challenges to OWL’s
coverage. We discuss this issue from two aspects: (1) com-
pletely quiet devices, i.e., devices that send nothing at all,
are very rare. In the controlled environment, we compared
the ground truth data with the DHCP allocation table. We
found that laptops in sleep mode were the only devices that
did not generate any packet. Moreover, three TPLink smart
switches/plugs only sent DHCP packets when they ﬁrst con-
nected to the network, and kept silent for more than 30 min-
utes thereafter. We also observed that printers sent BC/MC
messages even in sleep mode. (2) Devices-of-interest are
mostly not quiet. In our ground truth data, devices with more
computational power and devices that are discoverable in the
network all kept sending BC/MC packets. We have 93 cam-
eras that sent BC/MC packets in our dataset. Meanwhile, we
further examined 20+ popular webcams on the market and
they all continuously transmit BC/MC packets, even when
they were not capturing video streams. Last, some public wire-
less networks restrict BC/MC packets from being delivered to
the network. In such networks, regular users cannot employ
OWL to explore other (malicious) devices, however, system
administrators could still deploy OWL for device identiﬁca-
tion, e.g., by mirroring trafﬁc to the snifﬁng device.
The Trade-off between Coverage and Accuracy Besides
the silent devices, some devices only send very few packets
in their regular operation mode. For instance, 34.1% of the
devices in our dataset only sent BC/MC packets in one proto-
col during our data collection process (Figure 1 (c)). Further
examination showed that ARP, mDNS, DHCP and SSDP pro-
68    29th USENIX Security Symposium
USENIX Association
tocols were used in 26.9%, 31.3%, 6.8%, and 4.3% of such
devices, respectively. Even with one packet, MvWDL could
extract features (protocol features and MAC preﬁx) and clas-
sify the device into a known label. However, in some cases,
this classiﬁcation is like an “educated guess” with relatively
low conﬁdence. In practice, mDNS and DHCP protocols are
both very informative, while ARP packets do not carry any
device-speciﬁc information except MAC preﬁx. In OWL,
there is a trade-off between coverage and accuracy: exclud-
ing the featureless devices will increase OWL’s accuracy, but
decrease its coverage. We can deﬁne various heuristics to
identify featureless devices, for example, utilizing trivial fea-
tures (as we have done in Section 5.1), or using simple rules
on feature count and feature types, etc. We do not further
elaborate on this aspect since it is more performance tuning
than technical contribution. Last, devices frequently join and
leave the network during our data collection process. When a
device happened to join at the end of a data collection session,
we were less likely to get full set of features. If we sniffed for
a little longer, we would have obtained more features.
MAC Randomization. To defend against device tracking at-
tacks (e.g. [14]), MAC randomization has been employed by
mobile devices to hide their universally administered MAC
addresses (UAAs) [39, 58]. As discussed in [39] and veri-
ﬁed with our experiments on iOS and Android devices, MAC
randomization is only employed at probing – randomized, lo-
cally administered addresses (LAA) are used in probe frames.
When devices are associated to APs, their UAAs are used
for all subsequent communications. In theory, a locally as-
signed MAC, identiﬁed by its 7th bit of the most signiﬁcant
byte, cannot be used in non-local communications since they
are not guaranteed to be unique. In OWL, packets are only
collected after devices are associated with APs, hence, OWL
always sees real MACs. However, [39] noticed a portion of
Windows/Linux devices using LAAs when associated to net-
works. This is also conﬁrmed in our dataset: we found 140
devices (out of 31,850 devices) using locally assigned MACs.
Unicast Trafﬁc. OWL solely relies on BC/MC trafﬁc. Uni-
cast trafﬁc has been used for device identiﬁcation in the lit-
erature [24, 38, 57]. Unicast packets could be obtained using
active probing or eavesdropped at the gateways. Although not
available to normal users in the network, administrators may
extract additional features from unicast trafﬁc, such as tim-
ing and ﬂow features, application-layer protocols, DNS, TLS
handshakes, and textual features (banner grabbing). OWL
may be extended to: (1) extract features from unicast trafﬁc
(such as [24, 42, 57]), and (2) add unicast-based views to the
MvWDL model to improve identiﬁcation performance. How-
ever, consider the overhead to monitor unicast packets, it may
not be cost-effective to utilize them for device identiﬁcation,
since OWL already provides very high OIR. However, using
unicast trafﬁc enables the detection of software anomalies,
which are usually not detectable from BC/MC protocols.
Additional Info from BC/MC Packets. Besides manufac-
turer, type and model, we also found other information in
BC/MC packets that could be of interest to sys-admins. For
instance, we identiﬁed 6,343 devices with OS name, and 474
more with OS version, either from the textual information
revealed in BC/MC packets, or discovered from devices that
run only one OS, such as iOS on Apple phones. We extended
the MvWDL model with new labels, and tested the results
on our ground truth data. OWL’s identiﬁcation accuracy was
98.2% on OS names and 78.4% on version. We also applied
keyword spotting in the sniffed packets, and found 8 types
of browsers from 1,021 devices and 9 video streaming appli-
cations from 101 devices, mostly from the User Agent ﬁeld
in SSDP. As an application of OWL, we developed a tool to
match discovered devices, OS, and applications with CVE
database. Examples of potential device vulnerabilities and OS
vulnerabilities are shown in Tables 6 and 7. In practice, such
information is very useful to network administrators.
Limitations. Finally, we also acknowledge that the current
implementation of OWL has its own limitations, especially:
(1) Expert adversaries may escape from OWL by perfectly
mimicking all BC/MC packets from another device. For ex-
ample, if an emulator runs the genuine Samsung version of
Android including the original network module and full pro-
tocol stack, fakes a Samsung MAC, and ensures that the com-
munication is not interfered by the host machine, OWL would
report it as a benign Samsung device. (2) OWL is not de-
signed to detect software or application anomalies that do not
show any symptom in BC/MC trafﬁc. However, as discussed
above, it is practical to include unicast trafﬁc as additional
views in MvWDL, which has the potential to detect devices
that generate abnormal unicast trafﬁc. (3) OWL will label
new devices (without any similar device in the training set)
as malicious devices. (4) The current design of OWL cannot
handle adversarial ML attacks against the MvWDL model.
9 Related Works
The problem of device identiﬁcation has been studied from
various angles. Earlier approaches focus on ﬁngerprinting or
authenticating individual devices. Various hardware features
have been used, such as clock skew [2, 16, 29, 32, 50], RF
parameters [46, 51], sensor imperfection/noise [3, 7, 15], etc.
A survey of wireless device ﬁngerprinting is available at [62].
Devices are also identiﬁed from software features, e.g., [21,
27, 34, 35, 48, 59]. OWL is signiﬁcantly different from this
group of approaches in objective, data, and methodology.
Network trafﬁc has been used for both hardware and soft-
ware identiﬁcation, such as network modules or OS [12, 13,
25, 54, 55, 58]. The Internet-wide IoT device discovery ap-
proaches, such as Censys [18], Nmap [37], SHODAN,ZMap
[20], and others [1, 19, 22, 63] mostly use banner grabbing
to actively scan for devices in the IP space, collect and ex-
amine textual features such as hard-coded keywords from
responses, and match them against known ﬁngerprints. To
USENIX Association
29th USENIX Security Symposium    69
Table 6: CVE instances for collected device-types. (Score: CVE score; #: Device count)
manufacturer-type
huawei_phone_p9
huawei_phone_mate9pro
philips_bridge_huebridge
osram_light_lightify-home
samsung_phone_galaxy-s6-edge
apple_pad_ipad
CVE ID
CVE-2016-8759
CVE-2017-17320
CVE-2017-14797
CVE-2016-5053
CVE-2015-7888
CVE-2013-3955
score
9.3
9.3
7.9
7.5
7.8
6.2
Vulnerability
allow attackers to crash the system or escalate user privilege
allow attackers to execute malicious code
allow remote attackers to read API keys
allow remote attackers to execute arbitrary commands
allow remote attackers to create arbitrary ﬁles as the system-level user
allow local users to cause a denial of service
#
25
18
19
6
4
15
OS
android
ios
linux
mac_os_x
ubuntu
CVE ID
CVE-2018-9355
CVE-2018-4337
CVE-2019-11683
CVE-2018-4259
CVE-2018-7584
CVE score
10
9.3
10
10
7.5
Table 7: OS-related CVE instances relevant to our dataset.
Vulnerability
allow attackers to execute remote code with no additional execution privileges needed
a memory corruption issue was addressed with improved memory handling