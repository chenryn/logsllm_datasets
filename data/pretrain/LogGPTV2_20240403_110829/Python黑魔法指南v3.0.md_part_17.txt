在这种情况下，不需要调用keys（），因为遍历字典时的默认行为是遍历键。
for currency in currencies:
process(currency)
现在，该代码更加简洁，易于阅读，并且避免调用函数会带来性能改进。
简化序列比较
我们经常要做的是在尝试对列表或序列进行操作之前检查列表或序列是否包含元素。
if len(list_of_hats) > 0:
hat_to_wear = choose_hat(list_of_hats)
使用Python的方法则更加简单：如果Python列表和序列具有元素，则返回为True，否则为False：
if list_of_hats:
hat_to_wear = choose_hat(list_of_hats)
仅使用一次的内联变量
我们在很多代码中经常看到，有些同学分配结果给变量，然后马上返回它，例如，
def state_attributes(self):
"""Return the state attributes."""
state_attr = {
ATTR_CODE_FORMAT: self.code_format,
ATTR_CHANGED_BY: self.changed_by,
}
return state_attr
如果直接返回，则更加直观、简洁，
def state_attributes(self):
"""Return the state attributes."""
return {
ATTR_CODE_FORMAT: self.code_format,
ATTR_CHANGED_BY: self.changed_by,
}
这样可以缩短代码并删除不必要的变量，从而减轻了读取函数的负担。
6.10 保持代码的简洁与可诗性
将条件简化为return语句
如果，我们实现的函数要返回一个布尔型的结果，通常会这样去做，
def function():
if isinstance(a, b) or issubclass(b, a):
returnTrue
returnFalse
但是，对比这样，直接返回结果会更加明智：
def function():
return isinstance(a, b) or issubclass(b, a)
6.11 给模块的私有属性上保险
保护对象
有的朋友，喜欢简单粗暴的使用 from x import * 来导入 x 模块中的所有对象，实际上有一些对
象或者变量，是实现细节，不需要暴露给导入方的，因为导入了也用不上。
对于这些变量或者对象，就可以在前面其名字前加上下划线，只要在变量名前加上下划线，就属于
"保护对象"。
使用 from x import * 后，这些 "保护对象" 是会直接跳过导入。
比如下面这些代码中，只有 drive 函数才会被 from x import * 所导入
_moto_type = 'L15b2'
_wheel_type = 'michelin'
def drive():
_start_engine()
_drive_wheel()
def _start_engine():
print('start engine %s'%_moto_type)
def _drive_wheel():
print('drive wheel %s'%_wheel_type)
突破保护
前面之所以说是“保护”并不是“私有”，是因为Python没有提供解释器机制来控制访问权限。我们依
然可以访问这些属性：
import tools
tools._moto_type = 'EA211'
tools.drive()
以上代码，以越过“保护属性”。此外，还有两种方法能突破这个限制，一种是将“私有属性”添加到
tool.py文件的 __all__ 列表里，使 from tools import * 也导入这些本该隐藏的属性。
__all__ = ['drive','_moto_type','_wheel_type']
另一种是导入时指定“受保护属性”名。
from tools import drive,_start_engine
_start_engine()
甚至是，使用 import tools 也可以轻易突破保护限制。所以可见，“保护属性”是一种简单的隐藏
机制，只有在 from tools import * 时，由解释器提供简单的保护，但是可以轻易突破。这种保护
更多地依赖程序员的共识：不访问、修改“保护属性”。除此之外，有没有更安全的保护机制呢？
有，就是下一部分讨论的私有变量。
6.12 变量不能与保留关键字重名
在 Python 中有很多的保留关键字，这些关键字的使用，不需要我们定义，也不需要我们导入，只
要你进入到了 Python 的环境中，就可以立即使用。
使用如下方法，可以查看 Python 中的保留关键字
>>> import keyword
>>> keyword.kwlist
['and', 'as', 'assert', 'break', 'class', 'continue', 'def', 'del', 'elif', 'else',
'except', 'exec', 'finally', 'for', 'from', 'global', 'if', 'import', 'in', 'is', 'l
ambda', 'not', 'or', 'pass', 'print', 'raise', 'return', 'try', 'while', 'with', 'yi
eld']
而很尴尬的是，如果你在日常编码中，不经意地用到其中的一些关键字，就会产生冲突。
比如说 class，这个有类别的意思，可能你也想使用它来作为变量名，如果直接使用，会发生冲突
更好的做法是，使用下划线来避免冲突
def type_obj_class(name,class_):
pass
def tag(name,*content,class_):
pass
第七章：神奇魔法模块
7.1 远程登陆服务器的最佳利器
在使用 Python 写一些脚本的时候，在某些情况下，我们需要频繁登陆远程服务去执行一次命令，
并返回一些结果。
在 shell 环境中，我们是这样子做的。
$ sshpass -p ${passwd} ssh -p ${port} -l ${user} -o StrictHostKeyChecking=no xx.xx.x
x.xx "ls -l"
然后你会发现，你的输出有很多你并不需要，但是又不去不掉的一些信息（也许有方法，请留言交
流），类似这样
host: xx.xx.xx.xx, port: xx
Warning: Permanently added '[xx.xx.xx.xx]:xx' (RSA) to the list of known hosts.
Login failure: [Errno 1] This server is not registered to rmp platform, please confi
rm whether cdn server.
total 4
-rw-r--r-- 1 root root 239 Mar 30 2018 admin-openrc
对于直接使用 shell 命令，来执行命令的，可以直接使用管道，或者将标准输出重定向到文件的方
法取得执行命令返回的结果
1. 使用 subprocess
若是使用 Python 来做这件事，通常我们会第一时间，想到使用 os.popen，os.system，
commands，subprocess 等一些命令执行库来间接获取 。
但是据我所知，这些库获取的 output 不仅只有标准输出，还包含标准错误（也就是上面那些多余
的信息）
所以每次都要对 output 进行的数据清洗，然后整理格式化，才能得到我们想要的数据。
用 subprocess 举个例子，就像这样子
import subprocess
ssh_cmd = "sshpass -p ${passwd} ssh -p 22 -l root -o StrictHostKeyChecking=no xx.xx.
xx.xx 'ls -l'"
status, output = subprocess.getstatusoutput(ssh_cmd)
## 
通过以上的文字 + 代码的展示 ，可以感觉到 ssh 登陆的几大痛点
痛点一：需要额外安装 sshpass（如果不免密的话）
痛点二：干扰信息太多，数据清理、格式化相当麻烦
痛点三：代码实现不够优雅（有点土），可读性太差
痛点四：ssh 连接不能复用，一次连接仅能执行一次
痛点五：代码无法全平台，仅能在 Linux 和 OSX 上使用
为了解决这几个问题，我搜索了全网关于 Python ssh 的文章，没有看到有完整介绍这方面的技巧
的。
为此，我就翻阅了一个很火的 Github 项目： awesome-python-cn （https://github.com/BingmingW
ong/awesome-python-cn）。
期望在这里，找到有一些关于 远程连接 的一些好用的库。
还真的被我找到了两个
sh.ssh
Paramiko
2. 使用 sh.ssh
首先来介绍第一个， sh.ssh
sh 是一个可以让你通过函数的调用来完成 Linxu/OSX 系统命令的一个库，非常好用，关于它有机
会也写篇介绍。
$ python3 -m pip install sh
今天只介绍它其中的一个函数： ssh
通常两台机器互访，为了方便，可设置免密登陆，这样就不需要输入密码。
这段代码可以实现免密登陆，并执行我们的命令 ls -l
from sh import ssh
output=ssh("PI:EMAIL", "-p 22", "ls -l")
print(output)
但有可能 ，我们并不想设置互信免密，为了使这段代码更通用，我假定我们没有设置免密，只能
使用密码进行登陆。
问题就来了，要输入密码，必须得使用交互式的方法来输入呀，在 Python 中要如何实现呢？
原来 ssh 方法接收一个 _out 参数，这个参数可以为一个字符串，表示文件路径，也可以是一个文
件对象（或者类文件对象），还可以是一个回调函数，意思是当有标准输出时，就会调用将输出内
容传给这个函数。
这就好办了呀。
我只要识别到有 password: 字样，就往标准输入写入我的密码就好了呀。
完整代码如下：
import sys
from sh import ssh
aggregated = ""
def ssh_interact(char, stdin):
global aggregated
sys.stdout.write(char.encode())
sys.stdout.flush()
aggregated += char
if aggregated.endswith("password: "):
stdin.put("you_password\n")
output=ssh("PI:EMAIL", "-p 22", "ls -l",_tty_in=True, _out_bufsize=0, _out=s
sh_interact)
print(output)
这是官方文档（http://amoffat.github.io/sh/tutorials/interacting_with_processes.html?highlight=ssh
）给的一些信息，写的一个demo。
尝试运行后，发现程序会一直在运行中，永远不会返回，不会退出，回调函数也永远不会进入。
通过调试查看源代码，仍然查不到问题所在，于是去 Github 上搜了下，原来在 2017 年就已经存在
这个问题了，到现在 2020 年了还没有修复，看来使用 sh.ssh 的人并不多，于是我又“追问”了
下，期望能得到回复。
以上这个问题，只有在需要输入密码才会出现，如果设置了机器互信是没有问题的。
为了感受 sh.ssh 的使用效果，我设置了机器互信免密，然后使用如下这段代码。
from sh import ssh
my_server=ssh.bake("PI:EMAIL", "-p 22")
## 
print(my_server.ls())
##  sleep  top 
time.sleep(5)
##  +1 -1
print(my_server.ifconfig())
惊奇地发现使用 bake 这种方式， my_server.ls() 和 my_server.ifconfig() 这种看似是通过同
一个ssh连接，执行两次命令，可实际上，你可以在远程机器上，执行 top 命令看到已连接的终端
的变化，会先 +1 再 -1 ，说明两次命令的执行是通过两次连接实现的。
如此看来，使用 sh.ssh 可以解决痛点一（如果上述问题能得到解决）、痛点二、痛点三。
但是它仍然无法复用 ssh 连接，还是不太方便，不是我理想中的最佳方案。
最重要的一点是， sh 这个模块，仅支持 Linxu/OSX ，在 Windows 你得使用它的兄弟库 - pbs ，
然后我又去 pypi 看了一眼 pbs，已经 “年久失修”，没人维护了。
至此，我离 “卒”，就差最后一根稻草了。
3. 使用 paramiko
带着最后一丝希望，我尝试使用了 paramiko 这个库，终于在 paramiko 这里，找回了本应属于
Python 的那种优雅。
你可以通过如下命令去安装它
$ python3 -m pip install paramiko
然后接下来，就介绍几种常用的 ssh 登陆的方法
方法1：基于用户名和密码的 sshclient 方式登录
然后你可以参考如下这段代码，在 Linux/OSX 系统下进行远程连接
import paramiko
ssh = paramiko.SSHClient()
## know_hosts
ssh.set_missing_host_key_policy(paramiko.AutoAddPolicy())
## 
ssh.connect("xx.xx.xx.xx", username="root", port=22, password="you_password")
## 
ssh_stdin, ssh_stdout, ssh_stderr = ssh.exec_command("ls -l")
## 
print(ssh_stdout.read())
## 
ssh.close()
方法2：基于用户名和密码的 transport 方式登录
方法1 是传统的连接服务器、执行命令、关闭的一个操作，多个操作需要连接多次，无法复用连接
[痛点四]。
有时候需要登录上服务器执行多个操作，比如执行命令、上传/下载文件，方法1 则无法实现，那
就可以使用 transport 的方法。
import paramiko
## 
trans = paramiko.Transport(("xx.xx.xx.xx", 22))
trans.connect(username="root", password="you_passwd")
## sshclienttransporttrans
ssh = paramiko.SSHClient()
ssh._transport = trans
## 
ssh.set_missing_host_key_policy(paramiko.AutoAddPolicy())
ssh_stdin, ssh_stdout, ssh_stderr = ssh.exec_command("ls -l")
print(ssh_stdout.read())
## 
trans.close()
方法3：基于公钥密钥的 SSHClient 方式登录
import paramiko
## RSA
## passwordpassword
pkey = paramiko.RSAKey.from_private_key_file('/home/you_username/.ssh/id_rsa', passw
ord='12345')
## 
ssh = paramiko.SSHClient()
ssh.connect(hostname='xx.xx.xx.xx',
port=22,
username='you_username',
pkey=pkey)
## 
stdin, stdout, stderr = ssh.exec_command('ls -l')
## stdoutstderr
print(stdout.read())
## 
ssh.close()
方法4：基于密钥的 Transport 方式登录
import paramiko
## RSA
## passwordpassword
pkey = paramiko.RSAKey.from_private_key_file('/home/you_username/.ssh/id_rsa', passw
ord='12345')
## 
trans = paramiko.Transport(('xx.xx.xx.xx', 22))
trans.connect(username='you_username', pkey=pkey)
## sshclienttransporttrans
ssh = paramiko.SSHClient()
ssh._transport = trans
## 
stdin, stdout, stderr = ssh.exec_command('df -hl')
print(stdout.read().decode())
## 
trans.close()
以上四种方法，可以帮助你实现远程登陆服务器执行命令，如果需要复用连接：一次连接执行多次
命令，可以使用 方法二 和 方法四
用完后，记得关闭连接。
实现 sftp 文件传输
同时，paramiko 做为 ssh 的完美解决方案，它非常专业，利用它还可以实现 sftp 文件传输。
import paramiko
## trans## transport
trans = paramiko.Transport(('xx.xx.xx.xx', 22))
## 
trans.connect(username='you_username', password='you_passwd')
##  sftp,
sftp = paramiko.SFTPClient.from_transport(trans)
## 
sftp.put(localpath='/tmp/11.txt', remotepath='/tmp/22.txt')
## 
sftp.get(remotepath='/tmp/22.txt', localpath='/tmp/33.txt')
trans.close()
到这里，Paramiko 已经完胜了，但是仍然有一个痛点我们没有提及，就是多平台，说的就是
Windows，这里就有一件好事，一件坏事了，。
好事就是：paramiko 支持 windows
坏事就是：你需要做很多复杂的准备，你可 google 解决，但是我建议你直接放弃，坑太深了。
注意事项
使用 paramiko 的时候，有一点需要注意一下，这个也是我自己 "踩坑" 后才发现的，其实我觉得这
个设计挺好的，如果你不需要等待它返回数据，可以直接实现异步效果，只不过对于不知道这个设
计的人，确实是个容易掉坑的点
就是在执行 ssh.exec_command(cmd) 时，这个命令并不是同步阻塞的。
比如下面这段代码，执行时，你会发现 脚本立马就结束退出了，并不会等待 5 s 后，再 执行
ssh.close()
import paramiko
trans = paramiko.Transport(("172.20.42.1", 57891))
trans.connect(username="root", password="youpassword")
ssh = paramiko.SSHClient()
ssh._transport = trans
stdin, stdout, stderr = ssh.exec_command("sleep 5;echo ok")
ssh.close()
但是如果改成这样，加上一行 stdout.read()， paramiko 就知道，你需要这个执行的结果，就会在
read() 进行阻塞。
import paramiko
trans = paramiko.Transport(("172.20.42.1", 57891))
trans.connect(username="root", password="youpassword")
ssh = paramiko.SSHClient()
ssh._transport = trans
stdin, stdout, stderr = ssh.exec_command("sleep 5;echo ok")
##  read()
print(stdout.read())
ssh.close()