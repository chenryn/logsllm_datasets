From cloud-relevant literature, we sample 8 security and usability
goals that may be desirable in our scenarios:
allows to effectively have duplicated resources;
• Redundancy [17, 20, 38]: the extent to which the architecture
• Scalability [19, 20, 28, 36, 39, 40]: the ability of the architec-
ture to scale up and down to accommodate dynamic work-
loads (e.g., the variable number of users’ requests or crypto-
graphic operations);
• Reliability [17, 19, 20, 30, 36, 39]: the ability of the archi-
tecture to keep working after the failure of one or more
entities. We measure reliability by considering Single-Point-
of-Failures (SPOF);
• Maintenance [17, 20, 28, 36, 38]: the easiness in the deploy-
ment and maintenance (i.e., software updates) of the archi-
tecture;
• Denial-of-Service Resilience [10, 19, 20, 30]: the intrinsic re-
silience of the architecture to Denial-of-Service (DoS) at-
tacks;
• Minimization of CSP Vendor Lock-in [19, 39]: the easiness in
switching CSP in the architecture (e.g., from AWS to Azure);
• On-premise Monetary Savings [17, 19, 20, 28, 39]: the mon-
etary savings due to not adding entities to the on-premise
domain;
• CSP Monetary Savings [17, 19, 20, 28, 39]: the monetary sav-
ings due to not adding entities to the CSP domain. If the
organization already has an internal infrastructure, it might
be cheaper to run entities on-premise rather than in the CSP
domain.
5.2 Effect on Goals
We adopt a modular approach to evaluate the effect that an archi-
tecture has on the various goals. We consider the effect of each
entity—when contained in a certain domain—on each goal in isola-
tion. We summarize our considerations in Table 3 by discussing the
effects on the goals identified in Section 5.1. Each entity-domain
pair may have either a positive (+), negligible (=) or negative (-)
effect on a goal.
• Effect on Redundancy. The CSP is a geographically sparse
domain with mechanisms for replicating data across large
geographic distances [6]. On the contrary, the on-premise
domain is, by definition, limited to one location. Therefore,
redundancy is enhanced when entities are in the CSP do-
main;
• Effect on Scalability. As with the redundancy goal, scalability
is a peculiarity of CSPs [6]. The more entities are in the
CSP domain, the more scalable is the architecture. Also, the
architecture gets more scalable when the proxy is deployed
Table 3: Single Entity Effect on Goals
Goals
Redundancy
Scalability
Reliability
Maintenance
DoS Resilience
Vendor Lock-in
On-premise Savings
CSP Savings
e
s
i
e
s
i
e
s
i
e
s
i
u
t
n
e
i
l
c
=
+
+
+
+
=
+
=
d
i
r
b
y
h
=
=
=
=
=
=
=
=
m
e
r
p
-
n
o
=
-
-
-
-
=
-
=
m
e
r
p
-
n
o
-
-
-
-
-
+
-
+
P
S
C
+
+
+
+
+
-
+
-
m
e
r
p
-
n
o
-
-
-
-
-
+
-
+
d
i
r
b
y
h
=
=
=
=
=
=
=
=
P
S
C
+
+
+
+
+
-
+
-
m
e
r
p
-
n
o
-
-
-
-
-
+
-
+
d
i
r
b
y
h
=
=
=
=
=
=
=
=
P
S
C
+
+
+
+
+
-
+
-
in the clientu domain, thus the burden of cryptographic
operations is distributed among the users;
• Effect on Reliability. As for the redundancy goal, the CSP
is generally more reliable than the on-premise domain [6].
Entities deployed in the on-premise domain create SPOFs
and make the whole architecture less robust;
• Effect on Maintenance. The presence of entities in the on-
premise domain leads to greater deployment (e.g., setup and
configuration of the infrastructure) and maintenance (e.g.,
operative systems and runtime environments updates) effort.
These issues are delegated to a third-party when entities are
deployed in the CSP domain;
• Effect on DoS Resilience. We consider the CSP domain as
intrinsically resistant to DoS attacks [6]. Therefore, the more
entities are in the CSP (or clientu) domain, the more the
architecture is DoS resistant. On the contrary, DoS attacks
affect the availability of on-premise entities more easily;
• Effect on Minimization of CSP Vendor Lock-in. Intuitively,
each entity in the CSP stresses the vendor lock-in effect. On
the contrary, vendor lock-in is minimized when entities are
in the on-premise and clientu domains;
• Effect on On-premise Monetary Savings. The less the organiza-
tion runs entities internally, the more the on-premise-related
costs are reduced;
• Effect on CSP Monetary Savings. The less the organization
deploys entities in the CSP, the more CSP-related costs are
reduced.
From Table 3, we see that using the CSP yields advantages on
several goals. This favours the use of the CSP in the architectures
of CAC schemes. Indeed, CAC may be unnecessary in architectures
not using the CSP, as resources would be stored in the trusted on-
premise domain. In general, any architecture expecting the proxy
in the on-premise domain may not use CAC, as a trusted proxy
“would obviate the need for any cryptography beyond authenticated
symmetric key encryption” [10].
In contrast, hybrid architectures tend to balance the pros and
cons of the goals. For instance, assume that an architecture expects
the MS to stay in the CSP domain and that the storage service
is billed based on the amount of data stored (e.g., like AWS S3
pricing)7. In a hybrid architecture, metadata are split and stored in
two MSs, one MS in the on-premise domain and one MS in the CSP
domain. Supposedly, the MS in the CSP domain would store only
half of the metadata, resulting in half of the price (i.e., half of the
7https://aws.amazon.com/s3/pricing/
savings). Therefore, we assume that hybrid architectures do not
have an effect on the goals. This is just an example and the effect of
hybrid architectures, as well as the others, can be tuned depending
on the specific scenario and organization. In other words, it is up to
the organization to tune the effects in Table 3 based on its specific
needs.
5.3 Multi-Objective Optimization Problem
We consider a simple approach to combine the effect of each pair
⟨𝑒𝑛𝑡, 𝑑𝑜𝑚⟩ on a goal, under the assumption that the effects are
independent of each other. In practice, we “add” together the +,
- and = symbols as adding the numbers +1, −1, and 0, respec-
tively. Formally, this is equivalent to consider an objective function
𝑔 : ARC ↦→ Z associated with each goal. Having as input the set of
⟨𝑒𝑛𝑡, 𝑑𝑜𝑚⟩ pairs of an architecture arc ∈ ARC, the objective func-
tion returns the sum 𝑔(arc) of the symbols (+, - and =) associated
to each ⟨𝑒𝑛𝑡, 𝑑𝑜𝑚⟩ pair, as defined in each row of Table 3. Note that
hybrid architectures have two ⟨𝑒𝑛𝑡, 𝑑𝑜𝑚⟩ pairs for the same 𝑒𝑛𝑡.
Pre-filters. We note that not all architectures arc ∈ ARC may
be of interest for a particular scenario. For instance, as said in Sec-
tion 4.4, the architectures of some CAC schemes do not expect the
RM. In this case, we should exclude from ARC every architec-
ture expecting the presence of the RM. Furthermore, depending on
the organization and scenario, there may or not be sensitive meta-
data. Architectures associating sensitive metadata with a domain
not guaranteeing metadata confidentiality should also be excluded.
For instance, an RM using or an MS hosting sensitive metadata
cannot stay in the CSP domain. To formalize this, we define the
set Pre-Filters containing the architectures that shall be excluded
when finding the “optimal” architecture. Consequently, we define
ARCsub ⊆ ARC as the set of architectures in ARC but not in
Pre-Filters:
ARCsub = {arc ∈ ARC|𝑎𝑟𝑐 ∉ Pre-Filters};
(4)
We are now ready to formalize as a MOOP [22] the problem
of finding the optimal architecture arc∗ ∈ ARCsub such that the
tuple (𝑔Redundancy, . . . , 𝑔CSP Savings) of objective goals measuring
the degree of achievement of a goal is optimal:
max
arc∈ARCsub
( 𝑔Redundancy(𝑎𝑟𝑐), . . . , 𝑔CSP Savings(𝑎𝑟𝑐) );
(5)
Pareto Optimality. It is well-known that solving a MOOP is far
from being trivial. The main source of difficulty is that it may be
impossible to find a solution (an architecture, in our case) that si-
multaneously maximizes all objective functions. In fact, for any
non-trivial MOOP, there is no single solution that is simultaneously
optimal for every goal. Instead, there may exist many solutions
that can be considered equally good, called Pareto optimal [22].
In our context, an architecture arc∗ ∈ ARCsub is Pareto optimal
if and only if there is no architecture arc ∈ ARCsub such that
𝑔𝑖(arc) ≥ 𝑔𝑖(arc∗) for each 𝑖 in the set of goals (Redundancy, . . .,
CSP Savings) and 𝑔𝑗 (arc) > 𝑔𝑗 (arc∗) for at least one 𝑗 in the set of
goals. In other words, an architecture is Pareto optimal if there does
not exist another architecture that improves one objective func-
tion without detriment to another. A crucial advantage of reducing
the problem of selecting the most suitable architecture for a CAC
scheme to a MOOP is the possibility to exploit out-of-the-shelf the
Figure 2: Two-step Deployment Process
several methods and tools that have been devised to help the pro-
cess of choosing one or more solutions among those that are Pareto
optimal. Many of these methods consist in transforming a MOOP
into one or more (single goal) optimization problems whose solu-
tions are Pareto optimal (under reasonable additional assumptions).
We illustrate one such method in the following section.
6 ASSISTED DEPLOYMENT OF CAC SCHEMES
We now present how our architectural model and the MOOP in
formula (5) can be used to assist administrators in the deployment
of CAC schemes architectures. The workflow is summarized in
Figure 2 as a two-step deployment process. The idea is to provide
administrators with a web dashboard in which they can input the
Pre-Filters set and the requirements of their scenario. In the first
step, the web dashboard allows performing a thorough “What-if”
analysis with the help of an automated MOOP solver to carefully
assess the trade-offs of the security and usability goals among
the Pareto optimal architectures in ARCsub. Through this anal-
ysis, the administrators can find the most suitable architecture
arc∗ ∈ ARCsub for their scenario. Then, we automatically gen-
erate a deployable specification (called Blueprint) of arc∗ based
on the TOSCA8 OASIS standard; a database containing blueprint
fragments (Fragments) is used by the Blueprint Generator to build
a TOSCA compliant representation of the arc∗. In the second step,
we rely on the TOSCA-based Cloudify framework to automatically
deploy the generated blueprint in the major CSPs, using the CAC
entities we implemented (the blue icons). The ultimate purpose is to
optimize and simplify the time consuming and error-prone activity
of manually selecting and deploying CAC security schemes in the
cloud.
Below, we describe a proof-of-concept application of the two-step
deployment process for the eGovernment and eHealth scenarios. As
a validation example, we formalize the MOOP into a single objective
optimization problem (Section 6.1). Note that other formalizations
are possible. Then, we input in the dashboard the requirements of
the eGovernment (Section 6.1) and eHealth (Section 6.1) scenar-
ios. We report the Blueprint fragments for the architecture arc∗
of the eGovernment scenario in Appendix B. Finally, we describe
the use of TOSCA and Cloudify to deploy the architecture arc∗
for the eGovernment scenario (Section 6.2) and briefly discuss the
implementation of a CAC scheme supporting this architecture (Sec-
tion 6.3).
8https://www.oasis-open.org/committees/tc_home.php?wg_abbrev=tosca
function of the form𝑖∈𝑂 𝑤𝑖 · 𝑔𝑖, where 𝑂 is the set of goals. The
6.1 Constrained Weighted Sum Optimization
As a validation example, we choose to translate our MOOP into
a simple objective optimization problem. We note that this is one
possible formalization for our MOOP, where also others are possible
(Minimum-Cost Flow [14] or Generalized Assignment Optimization
Problem [26]) The objective function is the weighted sum of all
the objective functions. In other words, we construct an objective
constants 𝑤𝑖 ∈ R’s are called weights and model the importance of
achieving a certain goal. Technically, it is necessary to assume 𝑤𝑖 >
0 for each 𝑖 for guaranteeing that the solution of the transformed
problem belongs to the set of Pareto optimal solutions of the original
problem [22].
In some cases, a constrained variant of the weighted sum problem
may be of interest. From the descriptions in Section 3.1 and Sec-
tion 3.2, the eGovernment and eHealth sce narios may benefit from
the enforcement of hard and soft constraints. These are respectively
mandatory and optional thresholds values expressing conditions
on the objective functions. In other words, if 𝑔(arc) is less than the
threshold value of a hard constraint, then the architecture arc is ex-
cluded from ARCsub, i.e., arc ∈ Pre-Filters. Instead, if 𝑔(arc) is less
than the threshold value of a soft constraint, then 𝑔(arc) is given
a penalty, i.e., a penalty value 𝑝 ∈ Z is substracted from 𝑔(arc).
Below, we present two concrete applications of the weighted sum
optimization problem to the eGovernment and eHealth scenarios.
eGovernment Scenario Application. As presented in Section 3.1,
we consider a PA that wants to allow citizens to access government-
issued personal documents (e.g., tax certificates) anywhere and
anytime. We report in Figure 3 a screenshot of the web dashboard
configured with the requirements of the eGovernment scenario.
The first black section allows to exclude specific ⟨𝑒𝑛𝑡, 𝑑𝑜𝑚⟩ pairs
from the architectures by toggling the visibility of entities’ icons.
This defines the starting subset of the architectures to consider
in the optimization problem ARCsub ⊆ ARC. For instance, the
requirement eGR1 (enable citizens access from anywhere and any-
time) may suggest storing data in the cloud to allow for ubiqui-
tous access to encrypted data. This implies to remove the ⟨DS,
on-premise⟩ pair by toggling the visibility of the DS under the on-
premise domain. The second black section applies weights 𝑤i ∈ R
and constraints on the goals. For instance, the requirement eGR2
(simplify the maintenance of the architecture) can be translated
as a hard constraint that excludes architectures with a negative