on a certain node may affect many downstream nodes. By
carefully choosing a set of nodes with small loss correlation,
the loss recovery can be performed more efﬁciently.
4.1 Minimum-Loss-Correlation Recovery Group
Loss correlation is caused by the common network path
shared by two multicast members. The failure of any entity
on the shared path, including the underlying physical links
and intermediate overlay nodes, could result in streaming
disruptions on both of these members. However, it is difﬁ-
cult for an overlay protocol to identify the shared physical
links between two general overlay nodes. Also because the
failure probability of physical links is much lower than that
of overlay members, we only consider the loss correlation
at the overlay level.
(cid:80)
We assume a tree T = (V, E), where V and E are the
sets of all nodes and edges respectively, and deﬁne the loss
correlation function w : V × V → I, where I is the set of
non-negative integers, and w(v1, v2) represents the number
of common edges between the tree paths from the root r to
v1 and v2. The MLC group problem is thus to ﬁnd a set
vi,vj∈K w(vi, vj) is minimum. We
of nodes K such that
solve this problem in two steps. First, a node constructs a
partial tree using the information of other nodes maintained
by itself. Recall that during the multicast process, nodes pe-
riodically exchange neighbor information with each other,
so each node will know about a medium-sized (e.g., 100)
subset of other nodes. The information of each node in-
cludes its own address, the addresses, layer numbers and
out degrees of all its ancestors. An example of a node using
these information to construct a tree T is shown in Fig. 3.
The second step is to ﬁnd the desired MLC group. We
assume that the i-th level of the tree T is a node set Li,
with L0 consisting of only the root node r. Each node has
a children set Ci = {ci0, ci1,···}, and a descendants set
Proceedings of the 2006 International Conference on Dependable Systems and Networks (DSN’06) 
0-7695-2607-1/06 $20.00 © 2006 IEEE 
Authorized licensed use limited to: Tsinghua University. Downloaded on March 20,2021 at 12:30:01 UTC from IEEE Xplore.  Restrictions apply. 
packet containing only the missed sequence number to its
children, who then infer that the packet loss does not orig-
inate from their parent. The notiﬁcation packet is further
propagated downstream so that all the descendant nodes can
count on the upstream recovery. If a member continuously
detects large gaps (e.g., sequence gap > 3) between the se-
quence of both normal data and ELN packets, there must
be a parent failure or link congestion/failure occurring and
this member simply launches the rejoin process. Note that
a ELN packet only contains a sequence number (or a series
of sequence numbers when necessary) and hence will bring
negligible extra overhead on the network compared to the
normal streaming trafﬁc.
Repairing the lost data A member places the nodes of its
recovery group in order of network distance. Upon detect-
ing a packet loss, it sends a packet repair request to the ﬁrst
recovery node. The request also contains a list of other re-
covery members. The ﬁrst recovery node searches its buffer
or waits a certain time for the requested packet to arrive.
If found or received, the requested packet is sent back to
the requesting node, otherwise the ﬁrst recovery node sends
back an negative acknowledgement (NACK) packet and at
the same time, it forwards the request to the second recovery
node, which then performs the same repair operation. This
process continues until the requested packet is discovered
or all recovery nodes are contacted. All repaired packets
are sent back to the intermediate nodes in addition to the
original requesting node.
If a member detects a parent failure, it still sends a loss
repair request to the ﬁrst recovery group node, asking for
a recovery at a full streaming rate.
If the ﬁrst node has
only a residual bandwidth of 1 < 1 (here we assume
the full stream rate is 1), it takes responsibility for send-
ing all packets that satisfy: (n mod 100) < 1001, where
n is the sequence number. The ﬁrst recovery node then
passes the request on to the second recovery node, which
has a residual bandwidth of 2 and then takes care of repair-
ing packets whose sequence numbers satisfy 1001 ≤ (n
mod 100) < 100(1 + 2). The process continues until
the sum of all residual bandwidths of the examined recov-
ery nodes is no less than 1, or all recovery nodes have been
contacted.
5 Simulation Setup
An event-driven simulator has been developed to study
the performance of different algorithms. The GT-ITM
transit-stub model [19] is used to generate an underlying
network topology consisting of 15600 nodes. Link delays
between two transit nodes, transit nodes and stub nodes, and
two stub nodes are chosen uniformly between [15, 25] ms,
[5, 9] ms and [2, 4] ms, respectively. Of all the 15360 stub
nodes, a fraction of them are randomly selected to partici-
Figure 3: Illustration of ﬁnding an MLC group. The solid circles
represent the external nodes known by current node.
Di = {di0, di1,···}. The proposed algorithm ﬁrst identi-
ﬁes a set G(cid:48) of root nodes of K subtrees, from which the
members of the MLC group G can be derived. The follow-
ing steps describe the algorithm.
Algorithm 1 Finding the minimum-loss-correlation recov-
ery group
1: Initialize the MLC root set G(cid:48) ← ∅ and MLC group set
G ← ∅
2: Starting from L0, ﬁnd the ﬁrst level Li in T such that
|Li| < K ≤ |Li+1|;
3: For each vi ∈ Li, randomly pick a child of vi, say,
cij, let G(cid:48) ← G(cid:48) + {cij} and Ci ← Ci − {cij}, until
|G(cid:48)| ≥ K.
4: For each vi ∈ G(cid:48), randomly pick a descendant dij ∈
Di, and let G ← G + {dij} and Di ← Di − {dij}.
The number sequence 1, 2,··· , 5 in Fig. 3 gives an ex-
ample of the process of identifying a MLC group G(cid:48). G can
then be derived from G(cid:48) by randomly selecting descendants
from the subtrees rooted at all vi ∈ G(cid:48). The randomized
selection is used for the purpose of load balancing and for
also providing alternatives for the isolated nodes in search
for the nearest recovery nodes.
4.2 The Loss Recovery Protocol
Explicit loss notiﬁcation For each packet in the stream,
there is a delivery deadline and playback deadline for a spe-
ciﬁc member. The playback deadline is the delivery dead-
line plus the application’s buffering time. Any packet miss-
ing the playback deadline is meaningless. When a mem-
ber detects a delivery deadline missing, it regards this as a
packet loss, and may try to re-ﬁnd it within the playback
deadline. First, it needs to determine whether or not the
packet loss or streaming disruption is due to its parent so
as to avoid duplicate error recovery or unnecessary rejoins.
An approach called Explicit Loss Notiﬁcation (ELN) is used
to address this problem. In this approach, each multicast
member, upon detecting a packet loss, sends a notiﬁcation
Proceedings of the 2006 International Conference on Dependable Systems and Networks (DSN’06) 
0-7695-2607-1/06 $20.00 © 2006 IEEE 
Authorized licensed use limited to: Tsinghua University. Downloaded on March 20,2021 at 12:30:01 UTC from IEEE Xplore.  Restrictions apply. 
failed region(cid:13)1(cid:13)2(cid:13)3(cid:13)4(cid:13)5(cid:13)current node(cid:13)pate in the multicast tree. The server’s location is ﬁxed at a
randomly chosen stub node.
In all simulations, the media streaming rate is assumed
to be 1. The root node has a bandwidth of 100, resembling
the capability of a powerful source server. Other nodes’
outbound bandwidths follow a Bounded Pareto distribu-
tion [11] [12] [10], whose shape, lower bound and upper
bound parameters are set to 1.2, 0.5 and 100, respectively.
This means that 55.5% of the members are effectively “free-
riders”, and a small number of “super-nodes” exist with out-
degrees larger than 20. The nodes’ lifetimes follow a log-
normal distribution with the location and shape parameters
set to 5.5 and 2.0, respectively, which are chosen according
to the statistical ﬁndings in [15]3. According to the Little’s
Law, the node arrival rate λ is determined from dividing M
by the mean value of lifetime, i.e. 1809 seconds. For the
ROST algorithm, the default switching interval is 360 sec-
onds.
The following ﬁve algorithms are implemented:
(1)
Minimum-depth algorithm as introduced in Section 2. A
new member always chooses a parent highest in the tree
from up to 100 nodes in the network. (2) Longest-ﬁrst al-
gorithm as introduced in Section 2. A new member always
chooses the oldest parent from up to 100 nodes in the net-
work.
(3) and (4) Relaxed bandwidth-ordered algorithm
and relaxed time-ordered algorithm. These are two variants
of the BO and TO algorithms as introduced in Section 2.
Since the (strict) BO and TO trees have unacceptably high
protocol overheads in terms of average number of reconnec-
tions for a single node during its lifetime, a modiﬁcation is
made to make the compared scenarios more realistic: when
a member joins/rejoins the tree, it always searches from the
high to low layers to see if there is a smaller-bandwidth
or younger node, and if so, the located node is replaced
with the new one. The evicted node, and possibly together
with some of its children in the case of time ordering, are
forced to rejoin the tree. This results in bandwidth/time or-
dering among parents and children, but a node may have
smaller bandwidth/age than another non-child node in the
next layer. Since these two variants still follow the basic
ideas of bandwidth/time ordering, they are used for perfor-
mance comparisons. Note that both algorithms assume a
central administrator providing global topological informa-
tion. (5) ROST algorithm, as introduced in Section 3.
6 Performance Evaluation
This section ﬁrst compares the ROST algorithm against
the other four tree construction algorithms from the point
of view of different performance criterion, and then studies
3Ref. [13]) suggests using a Pareto distribution to model the tail dis-
tribution of node lifetime. Since both lognormal and Pareto distributions
share a similar characteristic in the tail: that longer lived peers have longer
expected residual lifetimes, we only consider the lognormal model here.
the performance of the CER protocol.
Comparison of Tree Reliability Service reliability is
measured by the average number of streaming disruptions
experienced by a single node during its lifetime in the
steady state of a multicast tree. The experiments consider
the extreme case in which every node departs abruptly with-
out notiﬁcation to others, and hence results in a disruption
on each of its descendants. This metric reﬂects the stability
of a tree in the most uncooperative and dynamic environ-
ment. Fig. 4 compares the performance of the ﬁve algo-
rithms under different sizes of networks.
It can be seen that the minimum-depth algorithm and the
longest-ﬁrst algorithm perform the worst, because they ei-
ther are completely reliability-ignorant or operate very con-
servatively in ordering the nodes in ages. The relaxed BO
algorithm has substantially improved reliability over these
two methods because of the reduced tree depth. Yet it is de-
feated by the relaxed TO algorithm in all cases, which has
better reliability owing to the time ordering.
The ROST algorithm appears to be a scheme yielding
the best result. Compared to the relaxed BO algorithm, the
number of disruptions has been reduced by 36-57%; and
compared to the relaxed TO algorithm, which is the second
best algorithm, the reduction is up to 40% in certain cases.
This shows how the ROST algorithm outperforms both the
BO and TO algorithms by combining their strengths. A fur-
ther observation is that the average service disruptions per
node is much less sensitive to the network size as compared
with the minimum-depth, longest-ﬁrst and relaxed TO al-
gorithms, which do not consider bandwidth ordering and
therefore vary more signiﬁcantly in tree depth.
Fig. 5 provides more distribution information about the
reliability of an 8000-node network. Fig. 6 shows the ac-
cumulative number of stream disruptions experienced by a
typical member under the difference algorithms. This mem-
ber has a moderate bandwidth and a long lifetime in order to
observe the network over a long period. It joins the overlay
after the network enters a steady state. One can see that with
the ROST algorithm, the frequency of stream disruptions
(i.e., the slope of the line) becomes smaller as the mem-
ber ages, which reﬂects how ROST beneﬁts the long-lived
members. Although with only an average bandwidth, the
member gradually ascends the tree and becomes less and
less frequently interrupted by the dynamics of other mem-
bers.