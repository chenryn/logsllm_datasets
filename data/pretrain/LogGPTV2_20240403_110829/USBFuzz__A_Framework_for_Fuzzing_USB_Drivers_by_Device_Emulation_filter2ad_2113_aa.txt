title:USBFuzz: A Framework for Fuzzing USB Drivers by Device Emulation
author:Hui Peng and
Mathias Payer
USBFuzz: A Framework for Fuzzing USB Drivers 
by Device Emulation
Hui Peng, Purdue University; Mathias Payer, EPFL
https://www.usenix.org/conference/usenixsecurity20/presentation/peng
This paper is included in the Proceedings of the 29th USENIX Security Symposium.August 12–14, 2020978-1-939133-17-5Open access to the Proceedings of the 29th USENIX Security Symposium is sponsored by USENIX.USBFuzz: A Framework for Fuzzing USB Drivers by Device Emulation
Hui Peng
Purdue University
Mathias Payer
EPFL
Abstract
The Universal Serial Bus (USB) connects external devices
to a host. This interface exposes the OS kernels and device
drivers to attacks by malicious devices. Unfortunately, kernels
and drivers were developed under a security model that implic-
itly trusts connected devices. Drivers expect faulty hardware
but not malicious attacks. Similarly, security testing drivers is
challenging as input must cross the hardware/software barrier.
Fuzzing, the most widely used bug ﬁnding technique, relies
on providing random data to programs. However, fuzzing
device drivers is challenging due to the difﬁculty in crossing
the hardware/software barrier and providing random device
data to the driver under test.
We present USBFuzz, a portable, ﬂexible, and modular
framework for fuzz testing USB drivers. At its core, USB-
Fuzz uses a software-emulated USB device to provide random
device data to drivers (when they perform IO operations). As
the emulated USB device works at the device level, porting
it to other platforms is straight-forward. Using the USBFuzz
framework, we apply (i) coverage-guided fuzzing to a broad
range of USB drivers in the Linux kernel; (ii) dumb fuzzing
in FreeBSD, MacOS, and Windows through cross-pollination
seeded by the Linux inputs; and (iii) focused fuzzing of a
USB webcam driver. USBFuzz discovered a total of 26 new
bugs, including 16 memory bugs of high security impact in
various Linux subsystems (USB core, USB sound, and net-
work), one bug in FreeBSD, three in MacOS (two resulting in
an unplanned reboot and one freezing the system), and four
in Windows 8 and Windows 10 (resulting in Blue Screens of
Death), and one bug in the Linux USB host controller driver
and another one in a USB camera driver. From the Linux
bugs, we have ﬁxed and upstreamed 11 bugs and received 10
CVEs.
1 Introduction
The Universal Serial Bus (USB) provides an easy-to-use inter-
face to attach external devices to host computers. A broad set
of features such as wide range of bandwidth support, Plug and
Play, or power delivery has contributed to its widespread adop-
tion. USB is ubiquitous; it is supported on commodity PCs,
smart TVs, and mobile phones. Further, software technologies
like USBIP [46] and usbredir [43] allow a USB device on one
machine to be remotely connected to another.
The ubiquity and external accessibility result in a large
attack surface that can be explored along different categories:
(i) exhaustive privileges for USB devices [27, 41] (e.g., the
famous “autorun” attack that allows USB storage devices to
start programs as they are plugged in), (ii) electrical attacks
leveraging physical design ﬂaws [65], and (iii) exploiting
software vulnerabilities in the host OS [29]. Attacks against
exhaustive privileges can be solved by reconﬁguring the op-
erating system through customized defenses (e.g., disabling
“autorun”, GoodUSB [58], USBFilter [60], or USBGuard [45])
and hardware attacks can be protected through improved inter-
face design. We focus exclusively on software vulnerabilities
in the host OS as these issues are hard to ﬁnd and have high
security impact.
Analogous to userspace programs that read inputs from
ﬁles, device drivers consume inputs from connected devices.
Failure to handle unexpected input results in memory bugs
like buffer-overﬂows, use-after-free, or double free errors—
with disastrous consequences. As device drivers run directly
in the kernel or privileged processes, driver bugs are security
critical. Historically, because the hardware was trusted and
considered hard to modify, little attention was paid to this
attack surface. Unaware of the potential attacks, host side
software was implemented with implicit trust in the device.
Due to the difﬁculty in providing unexpected inputs from the
device side, drivers are also not exhaustively tested. Nowa-
days, using programmable USB devices like FaceDancer [13],
it is trivial to launch an attack exploiting a vulnerability in a
USB device driver.
Unfortunately, existing defense mechanisms to protect vul-
nerable drivers from malicious USB devices are limited.
Packet ﬁltering-based mechanisms (e.g., LBM [59]) can pro-
tect the host system from known attacks, potentially miss-
USENIX Association
29th USENIX Security Symposium    2559
ing unknown ones. Other mitigations such as Cinch [1] are
proposed to protect the host OS from exploits by running
vulnerable device drivers in an isolated environment. These
mitigations are not deployed due to their inherent complexi-
ties and hardware dependencies.
The best alternative to defense mechanisms is to ﬁnd and
ﬁx the bugs. Fuzzing is an automated software testing tech-
nique that is widely used to ﬁnd bugs by feeding randomly-
generated inputs to software. Coverage-guided fuzzing, the
state-of-art fuzzing technique, is effective in ﬁnding bugs in
userspace programs [33, 73]. In recent years, several kernel
fuzzers (e.g., syzkaller [16], TriforceAFL [19], trinity [22],
DIFUZE [10], kAFL [48], or RAZZER [21]) have been de-
veloped to fuzz system call arguments, and have discovered
many bugs in popular OS kernels [35, 39, 40, 52, 53, 74].
Fuzzing device drivers is challenging due to the difﬁculty
in providing random input from a device. Dedicated pro-
grammable hardware devices (e.g., FaceDancer [13]) are ex-
pensive and do not scale as one device can only be used to
fuzz one target. More importantly, it is challenging to auto-
mate fuzzing on real hardware due to the required physical
actions (attaching and detaching the device) for each test.
Some solutions adapt the kernel. For example, the kernel
fuzzer syzkaller [16] contains a usb-fuzzer [14] extension
which injects random data to the USB stack via extended
syscalls. PeriScope [50] injects random data at the DMA
and MMIO interfaces. These approaches are not portable,
tightly coupled to a particular OS and kernel version, and
require deep understanding of the hardware speciﬁcation and
its implementation in the kernel. In addition, as they inject
random data at a certain layer of the IO stack, some code
paths cannot be tested, missing bugs in untested code (shown
in § 6.2). vUSBf [49] mitigates the requirement to under-
stand the hardware speciﬁcation by repurposing a networked
USB interface [43] to inject random data to drivers. However,
vUSBf is too detached from the kernel and only supports
dumb fuzzing without collecting coverage feedback.
We introduce USBFuzz, a cheap, portable, ﬂexible, and
modular USB fuzzing framework. At its core, USBFuzz uses
an emulated USB device to provide fuzz input to a virtualized
kernel. In each iteration, a fuzzer executes a test using the
emulated USB device virtually attached to the target system,
which forwards the fuzzer generated inputs to the drivers un-
der test when they perform IO operations. An optional helper
device in the virtualized kernel allows the outside fuzzer to
efﬁciently synchronize coverage maps with the fuzz target.
Due to its modular design and portable device-emulation,
USBFuzz is customizable to fuzz USB drivers in different
environments. We support coverage-guided fuzzing in the
Linux kernel or dumb fuzzing in kernels where coverage
collection is not yet supported. Similarly, we can either fuzz
broadly or focus on a speciﬁc driver. Broad fuzzing covers the
full USB subsystem and a wide range of drivers, focusing on
breadth instead of depth. Focused fuzzing targets the speciﬁc
functionality of a single speciﬁc driver (e.g., a webcam).
Leveraging the USBFuzz framework, we applied coverage-
guided fuzzing, the state-of-art fuzzing technique, on a broad
range of USB drivers in the Linux kernel. In nine recent—
already extensively fuzzed—versions of the Linux kernel, we
found 16 new memory bugs of high security impact and 20
previous bugs in our ground truth study. Reusing the seeds
generated when fuzzing the Linux drivers, we leveraged USB-
Fuzz to fuzz USB drivers on FreeBSD, MacOS, and Windows.
So far, we have found one bug in FreeBSD, three bugs (two
causing an unplanned restart, one freezing the system) in Ma-
cOS and four bugs (resulting in Blue Screens of Death) in
Windows. We applied USBFuzz to a speciﬁc USB webcam
driver, and discovered one bug in the Linux host controller
driver. Lastly we found a new bug in a Linux USB camera
driver. In total, we discovered 26 new and 20 existing bugs.
The main contributions of this paper are as follows:
1. Design and implementation of USBFuzz, a portable,
modular and ﬂexible framework to fuzz USB drivers
in OS kernels. USBFuzz is customizable to fuzz USB
drivers in different kernels, applying coverage-guided
fuzzing or dumb fuzzing based on the target OS with
different focus. Our prototype supports Linux, FreeBSD,
MacOS, and Windows.
2. Design and implementation of a driver-focused coverage
collection mechanism for the Linux kernel, allowing the
coverage collection across interrupt contexts.
3. In our evaluation, we found 26 new bugs across Linux,
FreeBSD, MacOS, and Windows. The discovery of bugs
in FreeBSD, Windows, and MacOS highlights the power
of our cross-pollination efforts and demonstrates the
portability of USBFuzz.
2 Background
The USB architecture implements a complex but ﬂexible
communication protocol that has different security risks when
hosts communicate with untrusted devices. Fuzzing is a com-
mon technique to ﬁnd security vulnerabilities in software, but
existing state-of-the-art fuzzers are not geared towards ﬁnding
ﬂaws in drivers of peripheral devices.
2.1 USB Architecture
Universal Serial Bus (USB) was introduced as an industry
standard to connect commodity computing devices and their
peripheral devices. Since its inception, several generations of
the USB standard (1.x, 2.0, 3.x) have been implemented with
increasing bandwidth to accommodate a wider range of appli-
cations. There are over 10,000 different USB devices [54].
USB follows a master-slave architecture, divided into a
single host side and potentially many device sides. The device
2560    29th USENIX Security Symposium
USENIX Association
2.2 USB Security Risks
USB exposes kernel access from externally-connected periph-
erals, and therefore poses an attack surface. In the past years,
several USB-based attacks have been devised to compromise
the security of a computer system. We classify the existing
USB-based attacks below.
C1. Attacks on implicit trust. As a hardware interface, both
OSes and the USB standard implicitly assume that the
device is trustworthy. A wide range of USB-based at-
tacks [9, 36, 61] reprogram the device ﬁrmware. The
reprogrammed devices look like regular USB thumb
drives, but perform additional tasks like keylogging
(BadUSB [27]) or injecting keystrokes and mouse move-
ments, thus allowing installation of malware, exﬁltrat-
ing sensitive information (USB Rubber Ducky [6]), in-
stalling backdoors, or overriding DNS settings (USB-
Driveby [23]).
C2. Electrical attacks. Here, the attacker uses the power
bus in the USB cable to send a high voltage to the host,
causing physical damage to the hardware components
of the host computer. USBKiller [65] is the best known
attack falling into this category.
C3. Attacks on software vulnerabilities. The attacker
leverages a vulnerability in the USB stack or device
drivers. As an example, Listing 1 highlights a Linux
kernel vulnerability reported in CVE-2016-2384 [37]
where a malicious USB-MIDI [2] device with incor-
rect endpoints can trigger a double-free bug (one in line
7, and the other in line 18 when the containing object
(chip->card) is freed).
Memory bugs similar to Listing 1 can be disastrous and
may allow an adversary to gain control of the host sys-
tem, because device drivers run in privileged mode (ei-
ther in the kernel space or as a privileged process). An
exploit for the above vulnerability allows full adversary-
controlled code execution [29]. Since devices connected
to USB may function as any arbitrary device from the
perspective of the host system, the USB interface ex-
poses attacker-controlled input to any service or sub-
system of the kernel that is connected through a USB
driver. Similar exploits target the storage system of Win-
dows [31].
These security risks are rooted in a basic assumption: hard-
ware is difﬁcult to modify and can be trusted. On one hand, as
USB connects hardware devices to computer systems, secu-
rity issues were neither part of the design of the USB standard
nor host side software implementation, making attacks on the
trust model (C1) and electrical attacks (C2) possible. On the
other hand, device driver developers tend to make assump-
tions regarding the data read from the device side, e.g., the
Figure 1: USB architecture
side acts as the slave, and implements its own functionality.
The host side, conversely, acts as the master, and manages
every device connected to it. All data communication must be
initiated by the host, and devices are not permitted to transmit
data unless requested by the host.
The most prominent feature of the USB architecture is that
it allows a single host to manage different types of devices.
The USB standard deﬁnes a set of requests that every USB
device must respond to, among which the most important
are the device descriptor (containing the vendor and product
IDs) and the conﬁguration descriptor (containing the device’s
functionality deﬁnition and communication requirements), so
that the host-side software can use different drivers to serve
different devices according to these descriptors.
The host side adopts a layered architecture with a hardware-
based host controller (see Figure 1). The host controller pro-
vides physical interfaces (using a root hub component), and
supports multiplexing device access, and the host controller
driver provides a hardware-independent abstraction layer for
accessing the physical interfaces. The USB core layer, built
on top of the host controller driver, is responsible for choos-
ing appropriate drivers for connected devices and provides
core routines to communicate with USB devices. Drivers for
individual USB devices (located on top of the USB core) ﬁrst
initialize the device based on the provided descriptors, then
interface with other subsystems of the host OS. Userspace
programs use APIs provided by various kernel subsystems to
communicate with the USB devices.
USB drivers consist of two parts: (i) probe routine to ini-
tialize the driver and (ii) function routines to interface with
other subsystems (e.g, sound, network, or storage) and dereg-
ister the driver when the device is unplugged. Existing USB
fuzzers focus exclusively on the probe routines, ignoring other
function routines, because probe functions are invoked auto-
matically when the device is plugged in, while other function
routines are usually driven by userspace programs.
USENIX Association
29th USENIX Security Symposium    2561
USB Host ControllerUSB Host Controller DriverUSB CoreDriver ADriver BDriver XProg AProg BProg X......HardwareKernel SpaceUser SpaceHost SideDevice Side1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
// in snd_usbmidi_create
if ( quirk && quirk -> type == QUIRK_MIDI_MIDIMAN )
err = snd_usbmidi_create_endpoints_midiman (
umidi , & endpoints [0]) ;
else
err = snd_usbmidi_create_endpoints ( umidi ,
endpoints );
if ( err  num \ _interfaces )
snd_card_free(chip->card);
Listing 1: CVE-2016-2384 [37] vulnerability
descriptors are always legitimate. This assumption results in
the problem that unexpected data read from the device side
may be improperly handled. Even if the developers try to
handle unexpected values, as recently disclosed bugs demon-
strate [15], code is often not well tested due to the difﬁculty in
providing exhaustive unexpected data during development.1
In other words, when a device driver is written, the program-
mer can speculate about unexpected inputs, but it is infeasible
to create arbitrary hardware that provides such faulty inputs.
This results in poorly-tested error-handling code paths.
However, recent research has fundamentally changed this
basic assumption. Some USB device ﬁrmware is vulnerable,
allowing attackers to control the device and messages sent on
the bus. In addition, with the adoption of recent technologies
such as Wireless USB [70] and USBIP [46], the USB interface
is exposed to networked devices, turning USB-based attacks
into much easier network attacks. Finally, reprogrammable
USB devices (e.g., FaceDancer [13]) allow the implementa-
tion of arbitrary USB devices in software.
2.3 Fuzzing the USB Interface
Given the security risks, there have been several fuzzing tools
targeting the USB interface. This section brieﬂy analyzes
these existing fuzzing tools and serves to motivate our work.
The ﬁrst generation of USB fuzzers targets the device
level. vUSBf [49] uses a networked USB interface (us-
bredir [43]), and umap2 [18] uses programmable hardware
1Special hardware that provides unexpected data from the USB device
side exists (e.g., Ellisys USB Explorer [12]), however it is either not used
because of its cost, or the drivers are not sufﬁciently tested.