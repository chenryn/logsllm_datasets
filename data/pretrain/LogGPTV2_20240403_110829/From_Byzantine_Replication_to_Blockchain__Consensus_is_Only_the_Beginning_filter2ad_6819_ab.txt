must remain executing the protocols until it knows that a more
up-to-date view is installed, otherwise it is considered faulty.
b) Crashes and recoveries: We consider that all replicas
in cv are subject to recoverable crashes, i.e., all replicas can
crash at once. A replica that is in the process of being restarted
is said to be in recovery mode and cannot participate in the
ordering protocol until its service state is restored. Therefore,
the system only make progress when there are at most cv.f
faulty and recovering replicas.
3
In order to potentially bring back the entire set of repli-
cas in cv without losing the service state, all replicas have
access to a local stable storage device. Any data successfully
stored in such a device will not be lost in the advent of a
recoverable crash fault. Nonetheless, this guarantee does not
extend to Byzantine faults, since a malicious replica is able to
overwrite/corrupt its own stored data.
IV. LIMITATIONS OF SMR AS BLOCKCHAINS
Blockchains and SMR share strong similarities since the
main objective of both is to run a replicated deterministic
service that executes transactions in total order. However,
even if we put aside consensus protocol properties, such
as ﬁnality, commit latency, and scalability [15], [29], there
are still important features blockchain applications need that
SMR systems do not necessarily implement. For example,
blockchain applications need to maintain a self-veriﬁable
persistent ledger with the executed transactions and support
reconﬁgurations on the group of replicas, two features not
present in most SMR implementations.
This section assesses the hindrances of the classic SMR
model when supporting blockchain applications. We start by
presenting a ubiquitous digital coin application used in our
evaluation. Afterward, we analyze some experimental results
that highlight the performance limitations of this blockchain
application.
A. SMaRtCoin
To demonstrate the inherent
inefﬁciencies of SMR for
supporting blockchain applications, we developed SMaRtCoin,
a digital coin application on top of BFT-SMART. SMaRtCoin
was broadly inspired by Bitcoin and more speciﬁcally by
FabCoin. The latter being an application used to benchmark
Hyperledger Fabric [1]. This application represents the sim-
plest useful blockchain application we are aware of.
SMaRtCoin is a deterministic wallet-like service that man-
ages coins based on the UTXO (Unspent Transaction Output)
model introduced in Bitcoin [26]. In this model, each object
(coin) represents a certain amount of currency possessed by a
user. This means that a transaction consumes a given number
of input objects to produce a number of output objects.
Therefore, this service supports two basic transaction types:
MINT, used to create a certain amount of coins for a given
address, and SPEND, to transfer coins to other addresses. The
state of the service is comprised of a table with the coins
assigned to each address in memory and a list of addresses
authorized to create new coins.
MINT operations require the public key of the account that
issued the transaction and the value of each coin to create
for the issuer. For that, the issuer needs to have permission
to execute this operation, i.e., its public key must be in the
list of authorized addresses to issue MINT transactions which
is deﬁned in the genesis block. SPEND operations require the
issuer’s public key, the id of the coins that will be used as input
and a set of key-value pairs each containing a public key of
an account and the amount of coins it will receive. Both types
of requests need to be signed to ensure their authenticity and
thus prove the ownership of the affected funds.
We implemented SMaRtCoin as a BFT-SMART service,
using the invoke and execute interfaces provided by the
library [25]. Clients generate signed SMaRtCoin transactions
and submit them for the BFT-SMART ordering protocol. This
protocol runs a Byzantine consensus to order a batch of opera-
tions, instead of a single one. Therefore, each replica receives
a batch of transactions from the library’s ordering protocol and
delivers it to SMaRtCoin. If SMaRtCoin successfully veriﬁes
that the client that issued the transaction has the right to
execute it (e.g., it is the owner of the coins being transferred),
the transaction is executed.
After transactions execution, a block containing the deliv-
ered batch together with the transactions results is created
and appended to the ledger. Once this block is synchronously
written to stable storage, each replica replies to the clients with
the results associated to each executed transaction.
B. SMaRtCoin Limitations
The experience of designing and running SMaRtCoin on
top of BFT-SMART lead us to the observation of several gaps
between the classic SMR and blockchain models.
a) Observation 1 (Performance issues): We run a set
of experiments using different setups of SMaRtCoin on top
of BFT-SMART. Table I reports the throughput for SMaRt-
Coin when writing its blockchain synchronously and asyn-
chronously to stable storage, considering different transaction
signature veriﬁcation strategies. The experimental setup and
methodology are detailed in Section VI. For these experiments,
we conﬁgured the system with four replicas to tolerate a single
Byzantine failure.
In order to compare the results with other works, it is
important to consider the size of the messages exchanged
since this factor signiﬁcantly affects the performance of BFT
protocols [25], [40]. For MINT operations, the requests and
replies have an average size of 180 and 270 bytes, respectively.
For SPEND operations, the size of the request is around 310
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 11:27:46 UTC from IEEE Xplore.  Restrictions apply. 
427
TABLE I: SMaRtCoin average throughput (txs/sec) with dif-
ferent signature veriﬁcation and storage strategies.
Tx. type
Seq. Sign. Veriﬁcation
sync.
async.
MINT
SPEND
1801
± 321
1729
± 302
1821
± 82
1760
± 213
Parallel Sign. Veriﬁcation
sync.
4079
± 152
3881
± 177
async.
Dura-SMaRt
4149
± 187
4027
± 205
15015
± 422
14829
± 549
bytes, and the replies are 380 bytes long. The size of the replies
also approximates the space taken up by a serialization of each
transaction (according to its type) in the ledger.
As can be seen on the left side of Table I, there is not
much difference between the performance of the system with
synchronous or asynchronous writes to stable storage when the
signature of the coin objects is done sequentially, i.e., inside
the state machine. However, if we push this veriﬁcation to
the BFT-SMART message veriﬁcation pool of threads [25],
effectively exploiting the multiple cores of our servers to verify
signatures in parallel, we improve throughput more than twice,
moving the bottleneck to the blockchain stable storage. We
remark that signature veriﬁcation can be further improved by
parallelizing it through different replicas [41].
Although parallel signature veriﬁcation signiﬁcantly im-
proves system performance,
if we remove the blockchain
durability implementation out of the SMR application layer,
and instead use the BFT-SMART durability layer [37], we
still have similar guarantees in terms of service durability, but
the performance improves more than 3.6×. As explained in
Section II-C2, this gain is due to the fact that the BFT-SMART
durability layer accumulates several batches of transactions
before delivering them to the SMR service for processing
while writing these batches in a single IO operation.
b) Observation 2 (SMaRtCoin does not implement an
immutable ledger): It is worth pointing out that, in all the
scenarios evaluated so far,
there is no immutable ledger
that could be fetched to verify transactions. This happens
because writing synchronously to stable storage only during
the execution of the state machine and before sending a reply
to the client, ensures only what we call external durability:
an executed operation is never reversed after the client see
its completion [37]. In other words, an operation is durable
only if the client that issued it receives matching replies from
a (f-dissemination) Byzantine quorum with ⌊ cv.n+cv.f +1
⌋ ≥
2cv.f + 1 replicas [42]. This ensures that these replicas wrote
the operation in their logs and, even if there is a full crash
and recover of the system, any other Byzantine quorum will
see this operation on the log of at least one correct replica and
recover the state with such operation. Notice a single log is
enough because each value decided in BFT-SMART comes
with a proof that it was the result of a consensus, as discussed
in Section II-C. The consequence of this guarantee is that a
single durable log of a replica does not provide a durable
committed history of the system execution, as a sufﬁx of the
2
logged operations can be undone. To be sure some logged
operation will not be undone, one needs to check logs from
a Byzantine quorum of replicas. What is missing here is log
self-veriﬁability, i.e., verifying a single correct log should be
enough for obtaining the complete execution on history of the
system up to that point.
c) Observation 3 (Reconﬁguration depends on a cen-
tralized authority): Most BFT SMR systems assume a static
set of nodes participating in the ordering protocol [5]–[11],
[43], [44]. However,
this is not suitable for a blockchain
platform, since the set of nodes participating in the consortium
are expected to change during the lifespan of the system.
Moreover,
there are indeed a few SMR systems that are
prepared to accept new replicas to join the system and older
ones to leave it, but they rely on a centralized third party with
administrative privileges [45]–[47]. This is also not well suited
for blockchains, since nodes should have the ability to join and
leave in an autonomous way.
V. SMARTCHAIN
SMARTCHAIN is a blockchain platform based on BFT-
SMART that efﬁciently support applications such as the digital
coin described in Section IV-A. SMARTCHAIN addresses the
aspects discussed in the previous section, with two novel
mechanisms: the blockchain storage layer, and the decentral-
ized reconﬁguration protocol. Before diving into the details
about them, we present an overview of what need to be done
to transform SMR to blockchains.
A. Overview: Transforming SMR to Blockchains
The previous limitations show that naively implementing
a blockchain application, even the simplest one, can result
in a low-performance system with some missing features,
independently of how good is the consensus being employed.
Observation 1 shows that beside the scalability issues [24],
[29], which have been the main focus of most of the recent
work on BFT replication, it is also important to ensure that
the system (1) can deal efﬁciently with messages of signiﬁcant
size, (2) is able to exploit multi-cores for cryptographic
operations, and (3) implements an effective durability layer.
Observations 2 and 3 are more complex to overcome and
require addressing two fundamental issues on state-of-the-art
SMR systems.
1) Turning Operation Logs into Blockchains: Practical
SMR systems require the usage of an internal log of delivered
requests, both to recover from a faulty leader and to enable
the transference of service state to recovered replicas [5],
[25]. Three requirements must be addressed to transform such
internal log into a blockchain.
Firstly, this log must be durable. It is necessary to carefully
devise a solution for log durability in order to ensure that
synchronous writes to disk do not cripple system perfor-
mance [37]. Furthermore, to approach the idea of blocks,
logs should no longer be comprised of individual operations,
and instead composed by a sequence of blocks with the
transactions ordered by the underlying protocol. Most existing
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 11:27:46 UTC from IEEE Xplore.  Restrictions apply. 
428
SMR protocols already assume that batches of transactions are
ordered on each consensus, thus making the notion of blocks
quite natural. In addition, each entry in the log will require a
block header and a certiﬁcate that renders the block/log self-
veriﬁable. Moreover, request processing and block persistence
must be decoupled to ensure log self-veriﬁability (as deﬁned
before) and not only BFT-SMART external durability.
The second requirement
is related to state snapshots.
Most systems truncate the log when snapshots are created.
In a blockchain platform, snapshots would allow a fast
(re)initialization of replicas. Thus, the ﬁle in which they are
stored should be linked with the chain of blocks.
Finally, the result of the transaction execution must also be
stored within each block to enable auditability of transactions,
matching the blockchain model.
2) Reconﬁguring the Set of Nodes: As discussed before,
most BFT SMR systems assume a static set of replicas, and
the few that are prepared to accept replica group changes rely
on a centralized third party with administrative privileges [25],
[46]. Such centralized management goes against the distributed
trust promised by blockchains. A more appropriate solution for
a blockchain scenario would be to enable the nodes themselves
to judge if another node can join the system. In addition, this
mechanism should be designed in such a way that the criteria
by which nodes are allowed to join should be speciﬁed by the
blockchain application.
An additional problem associated with reconﬁgurations is
how to ensure the security and veriﬁability of the blockchain
data structure when the set of keys that validate blocks
change. More speciﬁcally, new mechanisms must be designed
to impede (malicious) nodes removed from the consortium to
create forks on the blockchain.
B. The Blockchain Layer
This section details how the issues previously discussed can
be addressed in a blockchain design. We start by deﬁning the
blockchain data structure and then we proceed with an in-depth
discussion on how it can be extended with new transactions,
checkpoints, and consortium changes.
1) Blockchain structure: Figure 2 illustrates the structure of
the blockchain maintained by SMARTCHAIN. On the top of
the ﬁgure (block 1) we have a detailed description of a block,
which is composed of three parts: (1) a header containing
block metadata, (2) a body containing the list of transactions
decided in a consensus instance and associated results, and (3)
a certiﬁcate with a cryptographic proof of the block validity.
The header is composed of three integers representing the
block number, the number of the block containing the last
reconﬁguration, and the number of the block in which the
last service snapshot took place. Moreover, the header also
contains hashes of the batch of transactions in the block body,
the results of the execution of these transactions, and the
previous block.
The body of the block contains the metadata of the consen-
sus that delivered a batch of transactions (e.g., the consensus
Genesis
vinit =
{0,1,2,3}
1
Header
Body
Certiﬁcate
...
k
Header
Body
Certiﬁcate
...
l
Header
Body
Certiﬁcate
...
m
Header
Body
Certiﬁcate
Integer: block number
Integer: lastReconﬁg
Integer: lastCheckpoint
Bytes: hashTransactions
Bytes: hashResults
Byte: hashLastBlock
Integer: consensusID
Array: Transactions
Array: Results
k
checkpoint
batch of transactions
transactions responses
l
reconﬁguration request
new view = {0,1,2,3,4}
m
batch of transactions
transactions responses
Fig. 2: SMARTCHAIN blockchain structure.
instance number), the list of transactions on this batch, and
the list of results of each one of these transactions.3
2
The certiﬁcate comprises a set of ⌊ cv.n+cv.f +1
⌋ ≥ 2cv.f + 1
signatures of the block header generated by different replicas
in the current view. In a SMR-based blockchain system this