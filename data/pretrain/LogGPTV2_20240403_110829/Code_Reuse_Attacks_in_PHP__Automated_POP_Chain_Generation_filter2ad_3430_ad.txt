1 251
476
21 956
155
298
567
151
1 138
951
676
447
338
87
4 808
82 013
202 993
135 478
42 753
190 800
123 465
347 682
141 404
289 207
174 314
1 730 109
POI Gadgets Chains
9/0
0/1
14/3
19/3
1/0
1/1
2/1
0/0
0/0
0/1
0/1
2/2
0/0
15/1
3/1
1/1
2/1
5/2
4/3
1/1
43/13
36/10
24
136
41
21
41
14
77
47
73
111
585
prototype implementation required 8 minutes and about 2
GB of memory to perform the POI and POP analysis for a
given application. We believe that our eﬃcient concept of
using block and function summaries also applies to larger
code bases and that our results clearly outperform manual
code analysis.
In the following, we present an evaluation of the reported
PHP object injection vulnerabilities for each application (see
Section 4.1). Then, we study how many gadgets are avail-
able in each application (see Section 4.2) and how many
gadget chains our prototype was able to connect to a new
vulnerability (see Section 4.3).
In total, we were able to ﬁnd 30 new vulnerabilities and
28 previously undocumented chains. Overall, our evaluation
results show that two POI vulnerabilities and two known
chains were missed by our current prototype implementa-
tion. Furthermore, false positives occurred only during the
chain detection in one application. We also discuss the rea-
sons for these false negatives and false positives throughout
this section.
4.1 POI Detection in OOP Code
As a ﬁrst step, we veriﬁed if our prototype detects the POI
vulnerabilities described in the CVE entries. We compare
the number of reported POI vulnerabilities by our proto-
type to the number of described vulnerabilities in each CVE
in the column POI of Table 1. For 8 out of 10 vulnerable
applications, at least one POI was detected. For four ap-
plications, our prototype even found at least one novel POI
vulnerabilities that is not included in the CVE. We believe
that these vulnerabilities were missed during manual analy-
sis. Our prototype reported no false POI vulnerabilities.
The novel POI vulnerabilities are ﬁxed in the latest Live-
Zilla 5.2.0.1, Contao CMS 3.2.9 and GLPI 0.84.5 by replac-
ing calls to unserialize() with json_decode(), or by san-
itizing user input. However, the POI in CMS Made Simple
was not ﬁxed in the latest release yet, because no chain was
found. Our prototype detected a novel gadget chain to delete
arbitrary ﬁles and we reported the issue to the developers.
Our novel POI in Joomla also exists in the latest version
3.3.0 and we reported the issue as well.
The POI vulnerability in Open Web Analytics and Word-
press was not detected by our prototype. The root cause for
the false negative in Open Web Analytics is the insuﬃcient
analysis of reﬂection, which is an unsolved problem in the
ﬁeld of static analysis [4, 14, 22].
1 class owa_coreAPI {
2
public static function classFactory($module, $class) {
3
4
5
6
7
8
return owa_lib::factory(OWA_BASE_DIR.’/modules/’.
$module.’/classes/’, $class);
}
public static function getRequestParam($name) {
$service = owa_coreAPI::classFactory(’base’, ’service’)
;
return $service->request->getParam($name);
}
Listing 10: Dynamic class factory in Open Web Analytics.
The simpliﬁed code is shown in Listing 10. In Open Web
Analytics, every access to user input is performed via the
static method getRequestParam() deﬁned in line 5. This
method fetches a new object through the method class-
Factory() in line 6 and calls the method getParam() on
the request property as receiver. Because the method fac-
tory() used in classFactory() internally uses reﬂection, no
knowledge about the object assigned to $service in line 6
is available to our prototype. The prototype can still ﬁn-
gerprint the method getParam(), but this method accesses
properties of the object assigned to the property request.
Its properties are ﬁlled during the dynamic object construc-
tion in the factory. We plan to improve the analysis of dy-
namic OOP code in the future.
The false negative in Wordpress is based on second-order
data ﬂow [7]: metadata about a user is stored in a database
and later loaded into a cache before it is deserialized. The
database queries are constructed dynamically and cannot
be reconstructed completely by our prototype in order to
recognize the data ﬂow.
4.2 Available POP Gadgets
We let our prototype report all declared non-empty magic
methods in our selected applications to establish a ground
truth. On average, there are about 59 potential initial gad-
gets available per application. The diﬀerent amounts of
magic methods are listed in Table 2.
In our evaluation,
the most common magic methods are __set() and __get()
methods. However, since they implement the simple logic
for missing getter and setter methods, none of them was ex-
ploitable. Among the available gadgets, the __destruct()
method is also frequently present. It provides the best chance
for abusable code because it is context-independent. The
context-dependent method __toString() is deﬁned often,
but is supposed to return a string representation of the ob-
ject which does not yield a high chance of abusable PHP
50Table 2: Gadget distribution within our selected applications. Highlighted numbers indicate initial gadgets of chains.
Software
Contao CMS
Piwik
GLPI
Joomla
CubeCart
Wordpress
CMS Simple
OWA
LiveZilla
Vanilla
Total
call wakeup
4
8
0
4
0
0
1
0
0
0
17
callStatic
1
0
0
0
0
1
0
0
0
0
2
set state
0
0
4
0
0
0
0
0
0
0
4
destruct
17
21
1
15
18
8
3
15
5
1
104
toString
16
23
5
30
4
13
7
3
4
4
109
total
136
111
77
73
47
41
41
24
21
14
585
unset
2
8
0
1
1
2
0
0
1
0
15
clone
2
3
0
3
1
0
2
0
0
0
11
set
47
11
43
4
8
4
8
2
1
3
131
get
32
19
23
11
11
6
15
2
6
3
128
isset
12
9
1
1
1
5
2
2
1
0
34
3
9
0
4
3
2
3
0
3
3
30
Table 3: Distribution of diﬀerent vulnerability types in our
detected POP gadget chains.
Software
OWA
Contao
CMS Simple
CubeCart
Joomla
Piwik
Total
FD FC FM SQLi LFI XXE
-
-
-
-
-
1
1
2
6
1
1
1
-
11
1
3
-
-
2
1
7
3
-