Disassemble Flash Lite 3.0 SWF file 
(How to protect your ActionScript source code) 
TAKESAKO 
@32bit.in 
Japan is a birthplace of "K-ON!" and "K-TAI" 
nJapanese cellular phones are called "K-TAI" 
nJapanese cellular phones have made original 
evolution because the communication method 
isn't an universal standard and so on 
nthose have many functions, such as infrared ray, 
pictographs, electronic money, and television,  
nTherefore, In Japan, there aren't NOKIA's 
nJapanese people want smart phone now 
nBut, many old K-TAI still remain in Japan, and 
nmany people are playing “Flash Lite” game on K-TAI!
n GREE, mobage, mixi … 
SWF File Format Specification 
n SWF Technology Center | Adobe Developer Connection  
nhttp://www.adobe.com/devnet/swf.html 
nVERSION 10 
nAlexis’ SWF Reference 
nhttp://sswf.sourceforge.net/SWFalexref.html  
nFlash VERSION 1, 2, 3, 4, 5, 6, … 
n Flash 1.0  Flash 4.0 FlashLite 1.1 
n 2001 
Alexis' SWF Reference  
http://sswf.sourceforge.net/SWFalexref.html 
: 
: 
: 
: 
SWF 
Flash Lite 1.1+ “Hello world!” 
nhello.swf (75 byte) 
46 57 53 04 4b 00 00 00 60 00 3f c0 00 3f c0 00 
0c 02 00 43 02 33 33 33 17 03 96 12 00 00 6f 00 
00 48 65 6c 6c 6f 20 77 6f 72 6c 64 21 0a 00 1d 
00 4d 09 01 00 60 0a 3e 80 0a 3e 80 60 08 6f 00 
05 01 01 00 01 00 00 40 00 00 00 
> swfdump -D hello.swf 
[HEADER]        File version: 4 
[HEADER]        File size: 75 
[HEADER]        Frame rate: 12.000000 
[HEADER]        Frame count: 2 
[HEADER]        Movie width: 102.00 
[HEADER]        Movie height: 102.00 
[009]         3 SETBACKGROUNDCOLOR (33/33/33) 
[00c]        23 DOACTION 
                 (   18 bytes) action: Push String:"o" String:"Hello world!¥n" 
                 (    0 bytes) action: SetVariable 
                 (    0 bytes) action: End 
[025]        13 DEFINEEDITTEXT defines id 0001 variable "o"  
[004]         5 PLACEOBJECT places id 0001 at depth 0001 
                 | Matrix             | CXForm    r    g    b    a  
                 | 1.000 0.000   0.00 | mul     1.0  1.0  1.0  1.0  
                 | 0.000 1.000   0.00 | add       0    0    0    0  
[001]         0 SHOWFRAME 1 (00:00:00,000) 
[000]         0 END 
1. How to read SWF flie 
nSWF File magic (4byte) 
46 57 53 04 4b 00 00 00 60 00 3f c0 00 3f c0 00 
0c 02 00 43 02 33 33 33 17 03 96 12 00 00 6f 00 
00 48 65 6c 6c 6f 20 77 6f 72 6c 64 21 0a 00 1d 
00 4d 09 01 00 60 0a 3e 80 0a 3e 80 60 08 6f 00 
05 01 01 00 01 00 00 40 00 00 00 
struct swf_header { 
unsigned char  
f_magic[3]; 
'FWS' or 'CWS' 
unsigned char  
f_version; 
unsigned long  
f_file_length; 
} 
2. SWF File length (4byte) 
n32bit integer (Little Endian format) 
46 57 53 04 4b 00 00 00 60 00 3f c0 00 3f c0 00 
0c 02 00 43 02 33 33 33 17 03 96 12 00 00 6f 00 
00 48 65 6c 6c 6f 20 77 6f 72 6c 64 21 0a 00 1d 
00 4d 09 01 00 60 0a 3e 80 0a 3e 80 60 08 6f 00 
05 01 01 00 01 00 00 40 00 00 00 
struct swf_header { 
unsigned char  
f_magic[3]; 
'FWS' or 'CWS' 
unsigned char  
f_version; 
unsigned long  
f_file_length; 
} 
57 = 4b 00 00 00 
3. swf_header_movie (swf_rect) 
nswf_rect (variable length) 
46 57 53 04 4b 00 00 00 60 00 3f c0 00 3f c0 00 
0c 02 00 43 02 33 33 33 17 03 96 12 00 00 6f 00 
00 48 65 6c 6c 6f 20 77 6f 72 6c 64 21 0a 00 1d 
00 4d 09 01 00 60 0a 3e 80 0a 3e 80 60 08 6f 00 
05 01 01 00 01 00 00 40 00 00 00 
struct swf_header_movie { 
swf_rect 
f_frame_size; 
unsigned short fixed f_frame_rate; 
unsigned short  
f_frame_count; 
};
3.1. swf_rect (variable length) format 
nE.g. Decode “60 00 3f c0 00 3f c0” 
struct swf_rect { 
char align; 
unsigned  
f_size : 5; 
signed twips 
f_x_min : f_size; 
signed twips 
f_x_max : f_size; 
signed twips 
f_y_min : f_size; 
signed twips 
f_y_max : f_size; 
}; 
| ssss sxxx | xxxx xxxx | xXXX XXXX | XXXX Xyyy | yyyy yyyy | yYYY YYYY | YYYY Y000 | 
| 0110 0000 | 0000 0000 | 0011 1111 | 1100 0000 | 0000 0000 | 0011 1111 | 1100 0000 | 
|  6    0   |  0    0   |  3    f   |  c    0   |  0    0   |  3    f   |  c    0   | 
f_size = sssss(5bit) = 011000 = 12 
f_x_min = xxxxxxxxxxxx(12bit) =     0 twips 
f_x_max = XXXXXXXXXXXX(12bit) = +2040 twips (104px) 
f_y_min = yyyyyyyyyyyy(12bit) =     0 twips 
f_y_max = YYYYYYYYYYYY(12bit) = +2040 twips (104px) 
5bit 
12bit 
12bit 
12bit 
12bit 
Zero 
padding 
2^12 = -2047+2047 
variable 
variable 
variable 
variable 
3.2. swf_header_movie (f_frame_rate) 
nFrame Rate (2byte) = 12.0 frame/sec 
46 57 53 04 4b 00 00 00 60 00 3f c0 00 3f c0 00 
0c 02 00 43 02 33 33 33 17 03 96 12 00 00 6f 00 
00 48 65 6c 6c 6f 20 77 6f 72 6c 64 21 0a 00 1d 
00 4d 09 01 00 60 0a 3e 80 0a 3e 80 60 08 6f 00 
05 01 01 00 01 00 00 40 00 00 00 
struct swf_header_movie { 
swf_rect 
f_frame_size; 
unsigned short fixed f_frame_rate; 
unsigned short  
f_frame_count; 
};
8.8 bit fixed-point integer 12.0 à 00 0c 
3.3. swf_header_movie (f_frame_count) 
nFrame count (16bit integer) 
46 57 53 04 4b 00 00 00 60 00 3f c0 00 3f c0 00 
0c 02 00 43 02 33 33 33 17 03 96 12 00 00 6f 00 
00 48 65 6c 6c 6f 20 77 6f 72 6c 64 21 0a 00 1d 
00 4d 09 01 00 60 0a 3e 80 0a 3e 80 60 08 6f 00 
05 01 01 00 01 00 00 40 00 00 00 
struct swf_header_movie { 
swf_rect 
f_frame_size; 
unsigned short fixed f_frame_rate; 
unsigned short  
f_frame_count; 
};
16bit integer 
automatically-calculated 
(Are you) still with me? 
nSWF header is finished! 
46 57 53 04 4b 00 00 00 60 00 3f c0 00 3f c0 00 
0c 02 00 43 02 33 33 33 17 03 96 12 00 00 6f 00 
00 48 65 6c 6c 6f 20 77 6f 72 6c 64 21 0a 00 1d 
00 4d 09 01 00 60 0a 3e 80 0a 3e 80 60 08 6f 00 
05 01 01 00 01 00 00 40 00 00 00 
46 57 53 04 4b 00 00 00 60 00 3f c0 00 3f c0 00
Go to Next Stage! 
0c 02 00 
SWF File Format Overview 
nBlock image 
SWF header info 
Tag headerTagID, sizedata content 
Tag headerTagID, sizedata content 
Tag headerTagID=0, size=0 END tag 00 00 
ActionScript byte code is here 
4.1. SWF tag (variable length) format 
struct swf_tag { 
unsigned short  
f_tag_and_size; 
f_tag = f_tag_and_size >> 6; 
f_tag_data_size = f_tag_and_size & 0x3F; 