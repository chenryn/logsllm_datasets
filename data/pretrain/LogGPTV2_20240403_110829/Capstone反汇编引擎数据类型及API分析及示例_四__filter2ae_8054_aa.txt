# Capstone反汇编引擎数据类型及API分析及示例(四)
[Capstone反汇编引擎数据类型及API分析与示例(一)](https://xz.aliyun.com/t/5753
"Capstone反汇编引擎数据类型及API分析与示例\(一\)")  
[ Capstone反汇编引擎数据类型及API分析及示例(二)](https://xz.aliyun.com/t/5761 "
Capstone反汇编引擎数据类型及API分析及示例\(二\)")  
[ Capstone反汇编引擎数据类型及API分析及示例(三)](https://xz.aliyun.com/t/5772 "
Capstone反汇编引擎数据类型及API分析及示例\(三\)")
## API分析
### cs_free
`void CAPSTONE_API cs_free(cs_insn *insn, size_t count);`
释放被cs_malloc() 或 cs_disasm()分配的内存(insn参数)  
参数  
insn: 由cs_disasm()或cs_malloc()中的@insn参数返回的指针  
count: 赋值由cs_disasm()返回的cs_insn结构的数量，或赋值为1表示由cs_malloc()分配给空闲内存的数量
代码实现  
直接调用cs_mem_free,也就是默认的free
示例(释放cs_disasm申请的内存)，代码片段：
    count = cs_disasm(handle, (unsigned char*)CODE, sizeof(CODE) - 1, 0x1000, 0, &insn);           //计数由cs_disasm申请的内存
        if (count) {
            size_t j;
            for (j = 0; j errnum = CS_ERR_OK;
        MCInst_Init(&mci);
        mci.csh = handle;
        mci.address = *address;
        // 为无detail模式保存相关信息
        mci.flat_insn = insn;
        mci.flat_insn->address = *address;
    #ifdef CAPSTONE_DIET
        mci.flat_insn->mnemonic[0] = '\0';
        mci.flat_insn->op_str[0] = '\0';
    #endif
        r = handle->disasm(ud, *code, *size, &mci, &insn_size, *address, handle->getinsn_info);
        if (r) {
            SStream ss;
            SStream_Init(&ss);
            mci.flat_insn->size = insn_size;
            // 将内部指令操作码映射到公共insn ID
            handle->insn_id(handle, insn, mci.Opcode);
            handle->printer(&mci, &ss, handle->printer_info);
            fill_insn(handle, insn, ss.buffer, &mci, handle->post_printer, *code);
            // 调整伪操作码(X86)
            if (handle->arch == CS_ARCH_X86)
                insn->id += mci.popcode_adjust;
            *code += insn_size;
            *size -= insn_size;
            *address += insn_size;
        } else {    // 遇到中断指令
            size_t skipdata_bytes;
            // 如果没有跳过数据的请求，或者剩余数据太小，则退出
            if (!handle->skipdata || handle->skipdata_size > *size)
                return false;
            if (handle->skipdata_setup.callback) {
                skipdata_bytes = handle->skipdata_setup.callback(*code, *size,
                        0, handle->skipdata_setup.user_data);
                if (skipdata_bytes > *size)
                    // 剩余数据太小
                    return false;
                if (!skipdata_bytes)
                    return false;
            } else
                skipdata_bytes = handle->skipdata_size;
            // 基于架构和模式跳过一些数据
            insn->id = 0;   // 此“数据”指令的ID无效
            insn->address = *address;
            insn->size = (uint16_t)skipdata_bytes;
    #ifdef CAPSTONE_DIET
            insn->mnemonic[0] = '\0';
            insn->op_str[0] = '\0';
    #else
            memcpy(insn->bytes, *code, skipdata_bytes);
            strncpy(insn->mnemonic, handle->skipdata_setup.mnemonic,
                    sizeof(insn->mnemonic) - 1);
            skipdata_opstr(insn->op_str, *code, skipdata_bytes);
    #endif
            *code += skipdata_bytes;
            *size -= skipdata_bytes;
            *address += skipdata_bytes;
        }
        return true;
    }
示例：
    #include 
    #include 
    #include "capstone.h"
    #include "platform.h"
    using namespace std;
    struct platform {
        cs_arch arch;
        cs_mode mode;
        unsigned char* code;
        size_t size;
        const char* comment;
        cs_opt_type opt_type;
        cs_opt_value opt_value;
    };
    static void print_string_hex(unsigned char* str, size_t len)
    {
        unsigned char* c;
        printf("Code: ");
        for (c = str; c address, insn->mnemonic, insn->op_str,
                    insn->id, cs_insn_name(handle, insn->id));
                // 打印此指令使用的隐式寄存器
                detail = insn->detail;
                if (detail->regs_read_count > 0) {
                    printf("\tImplicit registers read: ");
                    for (n = 0; n regs_read_count; n++) {
                        printf("%s ", cs_reg_name(handle, detail->regs_read[n]));
                    }
                    printf("\n");
                }
                // 打印此指令修改的隐式寄存器
                if (detail->regs_write_count > 0) {
                    printf("\tImplicit registers modified: ");
                    for (n = 0; n regs_write_count; n++) {
                        printf("%s ", cs_reg_name(handle, detail->regs_write[n]));
                    }
                    printf("\n");
                }
                // 打印此指令所属指令集
                if (detail->groups_count > 0) {
                    printf("\tThis instruction belongs to groups: ");
                    for (n = 0; n groups_count; n++) {
                        printf("%s ", cs_group_name(handle, detail->groups[n]));
                    }
                    printf("\n");
                }
            }
            printf("\n");
            // 释放cs_malloc()分配的内存
            cs_free(insn, 1);
            cs_close(&handle);
        }
    }
    int main()
    {
        test();
        return 0;
    }
输出  
### cs_reg_name
`const char * CAPSTONE_API cs_reg_name(csh handle, unsigned int reg_id);`
获取寄存器的名字(string类型)  
寄存器id可在相关架构的头文件(建立项目时复制到项目文件夹的那些头文件)内找到
注意： 当处于diet模式时此API不可用，因为引擎不会存储寄存器名
参数  
handle: cs_open()返回的句柄  
reg_id: 寄存器id  
return: 寄存器的字符名, 如果reg_id不可用返回NULL
代码实现  
示例(打印RAX)：
    #include 
    #include 
    #include "capstone.h"
    #include "platform.h"
    using namespace std;
    int main(void)
    {
        csh handle = 0;
        cs_insn* insn;
        size_t count;
        if (cs_open(CS_ARCH_X86, CS_MODE_64, &handle)) {
            printf("ERROR: Failed to initialize engine!\n");
            return -1;
        }
        printf("%s", cs_reg_name(handle, X86_REG_RAX));
        cs_close(&handle);
        return 0;
    }
输出  
### cs_insn_name
`const char * CAPSTONE_API cs_insn_name(csh handle, unsigned int insn_id);`
获取指令的名字(string类型)  
指令id可在相关架构的头文件(建立项目时复制到项目文件夹的那些头文件)内找到
注意： 当处于diet模式时此API不可用，因为引擎不会存储寄存器名
参数  
handle: cs_open()返回的句柄  
insn_id: 指令id  
return: 指令的字符名, 如果insn_id不可用返回NULL
代码实现  
示例：
    #include 
    #include 
    #include "capstone.h"
    #include "platform.h"
    using namespace std;
    struct platform {
        cs_arch arch;
        cs_mode mode;
        unsigned char* code;
        size_t size;
        const char* comment;
        cs_opt_type opt_type;
        cs_opt_value opt_value;
    };
    static void print_string_hex(unsigned char* str, size_t len)
    {
        unsigned char* c;
        printf("Code: ");
        for (c = str; c < str + len; c++) {
            printf("0x%02x ", *c & 0xff);
        }
        printf("\n");
    }
    static void test()
    {
    #define X86_CODE64 "\x55\x48\x8b\x05\xb8\x13\x00\x00\xe9\xea\xbe\xad\xde\xff\x25\x23\x01\x00\x00\xe8\xdf\xbe\xad\xde\x74\xff"
        struct platform platforms[] = {
            {
                CS_ARCH_X86,
                CS_MODE_64,
                (unsigned char*)X86_CODE64,
                sizeof(X86_CODE64) - 1,
                "X86 64 (Intel syntax)"
            },
        };
        csh handle;
        uint64_t address;
        cs_insn* insn;
        cs_detail* detail;
        int i;
        cs_err err;
        const uint8_t* code;
        size_t size;
        for (i = 0; i < sizeof(platforms) / sizeof(platforms[0]); i++) {
            printf("****************\n");
            printf("Platform: %s\n", platforms[i].comment);
            err = cs_open(platforms[i].arch, platforms[i].mode, &handle);
            if (err) {
                printf("Failed on cs_open() with error returned: %u\n", err);
                abort();
            }
            if (platforms[i].opt_type)
                cs_option(handle, platforms[i].opt_type, platforms[i].opt_value);
            cs_option(handle, CS_OPT_DETAIL, CS_OPT_ON);
            insn = cs_malloc(handle);
            print_string_hex(platforms[i].code, platforms[i].size);
            printf("Disasm:\n");