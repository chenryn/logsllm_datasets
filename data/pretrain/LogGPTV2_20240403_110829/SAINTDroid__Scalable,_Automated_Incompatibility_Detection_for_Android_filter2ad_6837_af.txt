h
c
n
e
B
-
D
C
i
Max:
Min:
Average:
GAINDroid
Time (s)
8.2
7.7
3.6
7.2
6.2
8.2
11.3
2.3
9.9
6.3
7.2
4.7
3.9
1.8
4.1
3.8
3.9
3.9
3.8
11.3
1.8
5.7
Time (s)
CID
−
60.3
17.2
16.5
19.6
−
−
13.3
−
13.2
60.1
15.8
21.1
6.2
18.7
19.2
17.1
21.2
23.5
60.3
6.2
22.9
Lint
Time (s)
41.3
35.1
30.3
22.8
12.3
40.1
27.4
11.1
32.5
20.6
10.5
25.8
2.5
2.5
2.6
3.1
3.5
3.1
3.8
41.3
2.5
17.4
Figure 5.1 presents the time taken by GAINDroid to perform compatibility
analysis on real-world apps. The scatter plot depicts both the analysis time and
the app size. As shown in the ﬁgure, our approach analyzes 98% of the apps in
less than 20 seconds. The experimental results show that the average analysis
time taken by GAINDroid, CiD, and Lint per app on real-world data sets are 6.2
seconds (ranging from 1.6 to 37.8 seconds), 29.5 seconds (ranging from 4.1 to 78.4
seconds), and 24.7 seconds (ranging from 4.7 to 75.6 seconds), respectively. We
38
Figure 5.1: Scatter plot representing analysis time for compatibility checking of
Android apps using GAINDroid
have found outliers during the analysis. For example, the app in the top left corner
in Figure 5.1 is a game application which extensively uses third-party libraries,
which took a considerable amount of time for our analysis framework to compute
the data structures for analysis, despite its small KLOC. On the other hand, the
app in the right side of the diagram, closer to 80 KLOC, loads three times fewer
library classes than the aforementioned app, implicating in less complex graphs
to analyze. Overall, the timing results show that on average GAINDroid is able
to complete analysis of real-world apps in just a few seconds (on an ordinary
laptop), conﬁrming that the presented technology is indeed feasible in practice for
real-world usage.
To better understand why GAINDroid performs more efﬁcient than the state-
of-the-art approaches, we conducted a further performance evaluation, comparing
the number of resources and analysis efforts required by each approach. Since our
39
Figure 5.2: Number of classes loaded by GAINDroid and CiD when analyzing
real-world Android apps.
approach extends a class-loader based program analysis framework rather than a
compiler based program analyzer, we expect the efﬁciency gains in GAINDroid is
due to the effective loading of classes during the analysis. In this set of experiments,
we attempted to corroborate our intuition and obtain empirical evidence of this
relationship.
We ﬁrst monitored the number of analyzed classes in each approach. Figure 5.2
depicts the number of classes loaded by GAINDroid and CiD when analyzing
real-world apps. The red line in Figure 5.2 shows that CiD loads all Android classes
from the latest available Android framework [26]. As of January 2019, there are
8552 classes in the Android framework. On the contrary, GAINDroid only loads
the classes that the app actually uses. According to the diagram, GAINDroid,
shown by the blue line in Figure 5.2, at most loads 3,600 classes, and that only
occurs for a very small number of apps. Indeed, for over 60% of the analyzed
apps, GAINDroid loads less than 1,000 classes, which is eight times more efﬁcient
40
Figure 5.3: Amount of memory used by GAINDroid and CiD when analyzing
real-world Android apps.
compared to CiD.
Loading fewer classes also allows GAINDroid to require less memory to
perform its analysis. To investigate this matter, we also monitored the memory
footprint required by each approach for performing analysis. Figure 5.3 shows
a comparison of how much memory GAINDroid and CiD are using during the
analysis of real-world apps. According to the results, GAINDroid on average
requires 329 MB (ranging from 119MB to 898MB) of memory to perform the
compatibility analysis. On the other hand, CiD on average uses 1.3 GB (or four
times more memory) to perform the same analysis. We interpret this data as
corroborating the effectiveness of our technique based on a class-loader based
approach for compatibility analysis.
41
Chapter 6
Discussion
We were expecting that apps supporting a wider range of API levels would yield
more compatibility issues. However, based on the experimental results presented
in Table 5.1, this behavior is not being observed. For example, The two apps with
the most detected incompatibility support 10 and 8 API levels. Those apps are
MaterialFBook and AFWall, respectively. On the other hand, the two apps that
support the widest ranges of API level (15 for SurvivalManual and 14 for Simple
Solitaire), only show 0 and 1 incompatibility issues, respectively.
The Android framework evolves fast, with at least one release per year. There-
fore, it is important for GAINDroid includes new API methods to its database
easily. For this end, our tool only needs a text ﬁle with all API methods from
a given Android level. Adding new API levels will only introduce a negligible
overhead while loading the database for analysis.
It is known that Android is trying to decrease API and permission incompati-
bilities by enforcing new rules to developers. According to [15], Google Play will
require that new apps target at least Android API level 26 from August 1, 2018, and
that updated apps target Android API level 26 from November 1, 2018. Another
announcement [20] states that Android 9 (API level 28) introduce new restriction
regarding the use of hidden APIs, which is the use of Android APIs that are no
42
longer public. However, it will still be possible to download apps from repositories
other than Google Play, such as [9] and [7], which can present runtime failures.
Because of this restriction, a new module able to detect the use of inaccessible APIs
is desirable and we target it as future work.
43
Chapter 7
Related Work
Android incompatibility issues have received a lot of attention recently. Here, we
provide a discussion of the related efforts in light of our research.
API evolution. A large body of existing research focuses on the evolving
nature of APIs, which is an an important aspect of software maintenance [57],
[35], [52], [48], [53], [40], [56], [62]. These research efforts explore the problems
that are introduced by API changes. Among others, McDonnell et al. [57] studied
Android’s fast API evolution (115 API updates/month), and noticed developers’
hesitation in embracing the fast-evolving APIs. The results of this study suggest
that API updates are more defect-prone than other types of changes, which might
cause application instability and potential vulnerabilities. Mutchler et al. [62]
explored the consequences of running applications targeted to older Android
versions on devices employing recent Android versions, and how it can introduce
[52] investigated the frequency with which
serious security issues. Li et al.
deprecated APIs are used in the development of Android apps, considering the
deprecated APIs’ annotations, documentations, and removal consequences along
with developers’ reactions to APIs deprecations. Bavota et al. [35] showed that
applications with higher user ratings use APIs that are less change- and fault-
prone compared to the applications with lower ratings. Linares et al. [53] studied
44
the impact of using evolving APIs, concluding that it can signiﬁcantly hurt an
application’s success.
These prior research efforts clearly motivate the need to address issues that
can arise from API evolution. However, their approaches do not provide detailed
technical solutions or methods to systematically detect the root causes of these
problems. GAINDroid, on the other hand, is designed to be effective at detecting
API related issued that can cause runtime crashes.
Android fragmentation. The other relevant thrust of research has focused
on investigating the Android ecosystem by running different custom Android
distributions on different hardware to identify potential application instability
and uncovering the causes [43], [49], [63], [55], [70], [67], [31]. Aafer et al. [31]
investigated how modifying the operating system can introduce security problems
within the mobile OS. Han et al. [43] studied the bug reports related to HTC
and Motorola devices in the Android issue tracking system, and discovered that
The android ecosystem was fragmented, meaning that applications might behave
[55]
differently when installed on phones from different vendors. Liu et al.
observed that a noticeable percentage of Android performance bugs occur only
on speciﬁc devices and platforms. Moran et al. [59] presented a systematic input
generation is driven by both static and dynamic analyses to trigger app crashes.
Given such automatically generated inputs, it produces a a crash report containing
screenshots, detailed crash reproduction steps, the captured exception stack trace,
and a fully replayable script that automatically reproduces the crash on a target
device.
These research efforts primarily focused on behavioral differences when an
app is installed on different operating systems and/or hardware platforms. They
mainly rely on hardware speciﬁcations and changes in the Android documentation
Table 7.1: Comparing GAINDroid to the state-of-the-art of compatibility detection
techniques.
45
API APC PRM
CiD [51]
Cider [46]
IctApiFinder [44]
Lint [3]
GAINDroid
V
X
V
V
V
X
V
X
X
V
X
X
X
X
V
to uncover potential compatibility or behavioral issues. Therefore, these approaches
are not useful when such platform related information is incomplete, inconsistent,
or unavailable. Furthermore, applying these approaches to test an application
on the entire vast hardware ecosystem of Android devices may not be feasible
due to exponentially large system conﬁgurations. Our work, on the other hand,
focuses on a more tractable and important problem due to API evolution and how
it can affect the apps and their performance regardless of the operating system
distribution or the hardware the applications are running on.
API incompatibility. A number of techniques have been recently developed for
detecting Android API incompatibilities. In Table 7.1, we compare the detection
capabilities of GAINDroid against the current state-of-the-art approaches.
It
is important to stress that GAINDroid is the only solution that provides the
capability of automatically detecting various types of Android compatibility issues,
i.e., API invocation compatibility issues (API), API callback compatibility issues
(APC), and permission-induced compatibility issues (PRM).
Wu et al. [68] investigated side effects that may cause runtime crashes even
within an app’s supported API ranges, inspiring subsequent work. Huang et
al. [46] aimed to understand callback evolution and developed Cider, a tool
capable of identifying API callback compatibility issues. However, Cider’s analysis
relies on manually built PI-GRAPHS, which are models of common compatibility
46
callbacks of four classes: Activity, Fragment, Service, and WebView. Cider thus
does not deal with APIs that are not related to these classes or permission induced
mismatches. Moreover, by only focusing on callback classes, their reported result
is a subset of ours. In addition, Cider’s API analysis is based on the Android
documentation, which is known to be incomplete [68]. Our work, on the other
hand, automatically analyzes each API level in its entirety to identify all existing
APIs. This allows our approach to be more accurate in detecting actual changes
in API levels, as there are frequent platform updates and bug ﬁxes. As a result,
and as conﬁrmed by the evaluation results, our approach features much higher
precision and recall in detecting compatibility issues.
Lint [3] is a static analysis tool introduced in ADT (Android Development
Tools) version 16. One of the beneﬁts of Lint is that the plugin is integrated with
the Android Studio IDE, which is the default editor for Android development. The
tool checks the source code to identify potential bugs such as layout performance
issues and accessing API calls that are not supported by the target API version.
However, the tool generates false positives when verifying unsupported API calls
(e.g., when an API call happens within a function triggered by a conditional
statement). Another disadvantage is that it requires the availability of the original
source code, and it does not analyze Android application packages, i.e., apk ﬁles.
In addition, Lint requires the project to be ﬁrst built in the Android Studio IDE
before conducting the analysis. Unlike Lint, GAINDroid operates directly on
Dex code. While Lint claims to be able to detect API incompatibility issues, our
experimental results as well as the results obtained by Huang et al. indicate that
Lint is not as effective as GAINDroid or Cider.
Li et al. [51] provided an overview of the Android API evolution to identify
cases where compatibility issues may arise in Android apps. They also presented
47
CiD, an approach for identifying compatibility issues for Android apps. This tool
models the API lifecycle uses static analysis to detect APIs within the app’s code,
and then extracts API methods from the Android framework to detect backward
incompatibilities. CiD supports compatibility analysis up to the API level 25. In
comparison, GAINDroid offers automated extraction of the API database, and
thereby supports up to the most recent Android platform (API level 28). Moreover,
in contrast to GAINDroid, CiD did not consider incompatibilities regarding the
runtime permission system.
Wei et al. [67] conducted a study to characterize the symptoms and root causes
of compatibility problems, concluding that the API evolution and problematic
hardware implementations are major causes of compatibility issues. They also
propose a static analysis tool to detect issues when invoking Android APIs on
different devices. Their tool, however, needs manual work to build API/context
pairs, of which they only deﬁne 25. Similar to our prior discussion of work by
Huang et al., the major difference between our work and this work is that our
approach can focus on all API methods that exist at an API level. Again, the result
reported by their approach would be a subset of our detected issues.
48
Chapter 8
Conclusion and Future Work
We have presented GAINDroid, a tool that operates on the Dexcode level to
identify misuse of the Android API and the permission system, which may lead