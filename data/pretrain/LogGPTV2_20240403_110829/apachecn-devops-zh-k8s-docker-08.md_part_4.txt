    ```
    apiVersion: rbac.authorization.k8s.io/v1
    kind: ClusterRoleBinding
    metadata:
      name: cluster-create-ns
    subjects:
    - kind: User
      name: mlbiamext
      apiGroup: rbac.authorization.k8s.io
    roleRef:
      kind: ClusterRole
      name: cluster-create-ns
      apiGroup: rbac.authorization.k8s.io
    ```
8.  一旦创建了集群角色和集群角色绑定，尝试再次运行该命令，它将工作:
    ```
    PS C:\Users\mlb> kubectl create ns not-going-to-work namespace/not-going-to-work created
    ```
不幸的是，这不太可能是大多数 RBAC 调试的结果。很多时候，调试 RBAC 不会这么清晰或简单。通常，调试 RBAC 意味着在系统之间获得意外的错误消息。例如，如果您正在部署`kube-Prometheus`项目进行监控，您通常希望通过`Service`对象进行监控，而不是通过显式命名 pods。为了做到这一点，普罗米修斯服务帐户需要能够在您想要监控的服务的命名空间中列出`Service`对象。普罗米修斯不会告诉你这需要发生；你只是看不到你的服务列表。更好的调试方法是使用一种工具，该工具知道如何读取审核日志，并且可以基于日志中的失败对一组角色和绑定进行反向工程。
`audit2rbac`工具是最好的方法。它将读取审核日志，并为您提供一套有效的策略。这可能不是所需要的确切策略，但它将提供一个良好的起点。让我们试一试:
1.  首先，在集群的`control-plane`容器上附加一个外壳，从 GitHub([https://github.com/liggitt/audit2rbac/releases](https://github.com/liggitt/audit2rbac/releases))下载工具:
    ```
    root@cluster01-control-plane:/# curl -L https://github.com/liggitt/audit2rbac/releases/download/v0.8.0/audit2rbac-linux-amd64.tar.gz 2>/dev/null > audit2rbac-linux-amd64.tar.gz
    root@cluster01-control-plane:/# tar -xvzf audit2rbac-linux-amd64.tar.gz
    ```
2.  在使用该工具之前，请确保关闭带有 Kubernetes 仪表板的浏览器，以免污染日志。另外，删除之前创建的`cluster-create-ns`集群角色和集群角色绑定。最后，尝试创建`still-not-going-to-work`命名空间:
    ```
    PS C:\Users\mlb> kubectl create ns still-not-going-to-work
    Error from server (Forbidden): namespaces is forbidden: User "mlbiamext" cannot create resource "namespaces" in API group "" at the cluster scope
    ```
3.  Next, use the `audit2rbac` tool to look for any failures for your test user:
    ```
    root@cluster01-control-plane:/# ./audit2rbac --filename=/var/log/k8s/audit.log  --user=mlbiamext
    Opening audit source...
    Loading events...
    Evaluating API calls...
    Generating roles...
    apiVersion: rbac.authorization.k8s.io/v1
    kind: ClusterRole
    metadata:
     annotations:
     audit2rbac.liggitt.net/version: v0.8.0
     labels:
     audit2rbac.liggitt.net/generated: "true"
     audit2rbac.liggitt.net/user: mlbiamext
     name: audit2rbac:mlbiamext
    rules:
    - apiGroups:
     - ""
     resources:
     - namespaces
     verbs:
     - create
    ---
    apiVersion: rbac.authorization.k8s.io/v1
    kind: ClusterRoleBinding
    metadata:
     annotations:
     audit2rbac.liggitt.net/version: v0.8.0
     labels:
     audit2rbac.liggitt.net/generated: "true"
     audit2rbac.liggitt.net/user: mlbiamext
     name: audit2rbac:mlbiamext
    roleRef:
     apiGroup: rbac.authorization.k8s.io
     kind: ClusterRole
     name: audit2rbac:mlbiamext
    subjects:
    - apiGroup: rbac.authorization.k8s.io
     kind: User
     name: mlbiamext
    Complete!
    ```
    该命令生成了一个策略，该策略将完全允许测试用户创建名称空间。然而，这变成了明确授权用户访问的反模式。
4.  为了更好地利用这一策略，最好使用我们的组:
    ```
    apiVersion: rbac.authorization.k8s.io/v1
    kind: ClusterRole
    metadata:
      name: create-ns-audit2rbac
    rules:
    - apiGroups:
      - ""
      resources:
      - namespaces
      verbs:
      - create
    ---
    apiVersion: rbac.authorization.k8s.io/v1
    kind: ClusterRoleBinding
    metadata:
      name: create-ns-audit2rbac
    roleRef:
      apiGroup: rbac.authorization.k8s.io
      kind: ClusterRole
      name: create-ns-audit2rbac
    subjects:
    - apiGroup: rbac.authorization.k8s.io
      kind: Group
     name: cn=k8s-create-ns,cn=users,dc=domain,dc=com
    ```
的重大变化凸显出来。现在`ClusterRoleBinding`不再直接引用用户，而是引用`cn=k8s-create-ns,cn=users,dc=domain,dc=com`组，这样该组的任何成员都可以创建名称空间。
# 总结
本章的重点是 RBAC 策略的创建和调试。我们探讨了 Kubernetes 如何定义授权策略，以及它如何将这些策略应用于企业用户。我们还研究了如何使用这些策略在集群中启用多租户。最后，我们在我们的 KinD 集群中启用了审计日志，并学习了如何使用`audit2rbac`工具调试 RBAC 问题。
使用 Kubernetes 内置的 RBAC 策略管理对象，您可以在集群中实现运行和开发任务所需的访问。知道如何设计策略有助于限制问题的影响，提供让用户自己做更多事情的信心。
在下一章中，我们将学习如何保护 Kubernetes 仪表板的安全，以及如何为组成集群的其他基础设施应用处理安全问题。您将了解如何将我们所了解的认证和授权应用到组成集群的应用中，为您的开发人员和基础架构团队提供更好、更安全的体验。
# 问题
1.  True or false – ABAC is the preferred method of authorizing access to Kubernetes clusters.
    A.真实的
    B.错误的
2.  What are the three components of a Role?
    A.主语、名词和动词
    B.资源、操作和组
    C.`apiGroups`、资源和动词
    D.组、资源和子资源
3.  Where can you go to look up resource information?
    A.kuble API 参考
    B.图书馆
    C.教程和博客文章
4.  How can you reuse Roles across namespaces?
    A.你不能；你需要重新创造它们。
    B.定义一个集群角色，并在每个命名空间中将其作为角色绑定引用。
    C.用其他命名空间的角色绑定引用一个命名空间中的角色。
    D.以上都不是。
5.  How should bindings reference users?
    A.直接列出每个用户。
    B.角色绑定应该只引用服务帐户。
    C.只有集群角色绑定应该引用用户。
    D.只要有可能，角色绑定和集群角色绑定应该引用组。
6.  True or false – RBAC can be used to authorize access to everything except for one resource.
    A.真实的
    B.错误的
7.  True or false – RBAC is the only method of authorization in Kubernetes.
    A.真实的
    B.错误的