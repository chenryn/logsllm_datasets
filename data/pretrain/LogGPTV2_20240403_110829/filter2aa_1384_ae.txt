A. Gather evidence/screenshots
C. Create final deliverable
Written so non-technical readers can understand
Detailed recommendations to fix what you found
This is what clients pay money for.
Figure 1.5
The documentation phase
What makes this book different from other penetration testing books?
Looking at this book’s table of contents, you may be wondering why topics you’ve
seen covered in other penetration testing books are missing: social engineering,
evading antivirus software, wireless hacking, mobile and web application testing, lock
picking—I could go on, but you get the point. In reality, all of these topics deserve
their own books, and covering them in a single chapter doesn’t do justice to the
breadth of information that’s available on each one. 
The purpose of this book is to arm you with the tools necessary to conduct a typical
internal network penetration test (INTP). This engagement is sold by every pentesting
firm out there and is the most common type of engagement you will perform, should
you end up in a career as a professional penetration tester.
During typical INTPs (where you will spend at least 80% of your time), you will not be
asked (or even allowed) to touch your client’s wireless infrastructure or send email
phishing messages to the company’s employees or try to tailgate into its physical
datacenters. You won’t have the time or resources to properly build custom payloads
designed to bypass the organization’s specific EDR solution.
Rather than gloss over subjects that are interesting and definitely have value in other
engagements, this book chooses to focus solely on the topic at hand.
13
Building your own virtual pentest platform
lab environment that you can use to work through the entire INPT process you will
learn throughout the remaining chapters.
1.6.1
The Capsulecorp Pentest project
The Capsulecorp Pentest environment is a virtual network set up using VirtualBox,
Vagrant, and Ansible. In addition to the vulnerable enterprise systems, it also comes with
a preconfigured Ubuntu Linux system for you to use as your attacking machine. You
should download the repository from the book’s website (https://www.manning.com/
books/the-art-of-network-penetration-testing) or GitHub (https://github.com/r3dy/
capsulecorp-pentest) and follow the setup documentation before moving forward to the
next chapter.
1.7
Building your own virtual pentest platform
Some of you may prefer to roll your own setup from the ground up. I completely
understand this mentality. If you want to create your own pentest system, I urge you to
consider a couple of things before choosing an operating system platform to start
with. 
1.7.1
Begin with Linux
Like most professional penetration testers, I prefer to use the Linux operating system
to conduct the technical portions of an engagement. This is primarily due to a
chicken and egg kind of phenomenon, which I will try to explain. 
 Most penetration testers use Linux. When an individual develops a tool to make
their job easier, they share it with the world, usually via GitHub. It’s likely the tool was
developed on Linux and coincidently works best when run from a Linux system. At
the very least, it requires fewer headaches and dependency battles to get it working on
Linux. Therefore, more and more people are basing and conducting their penetra-
tion testing from a Linux platform so they can use the latest and best available tools.
So, you see, you could make the argument that Linux is the most popular choice among
penetration testers because it is the most popular choice among penetration testers—and thus my
chicken-and-egg comparison.
 There is a good reason why this occurs, though. Until the introduction of Micro-
soft’s PowerShell scripting language, Linux/UNIX-based operating systems were the
only ones that shipped with native support for programming and scripting automated
workflows. You didn’t have to download and install a big, bulky IDE if you wanted to
write a program. All you had to do was open a blank file in Vim or Vi (the most power-
ful text editors on the planet), write some code, and then run it from your terminal. If
you’re wondering what the connection is between penetration testing and writing
code, it’s simple: laziness. Just like developers, pentesters can be lazy, and conse-
quently loath doing repetitive tasks; thus we write code to automate whatever we can.
 There are other somewhat political reasons for using Linux, which I won’t cover in
detail because I’m not a political person. I will say, though, that most pentesters fancy
14
CHAPTER 1
Network penetration testing
themselves as hackers. Hackers—at least traditionally—tend to prefer open source
software, which can be freely obtained and customized, as opposed to closed source
commercial applications developed by corporations trying to make a buck. Who
knows what those big, bad companies have hidden in their products? Information
should be free, fight the man, hack the planet . . . you get the point. 
TIP
Linux is the operating system preferred by most penetration testers.
Some of these pentesters have written really powerful tools that work best on
a Linux platform. If you want to do pentesting, you should use Linux, too. 
1.7.2
The Ubuntu project
This is where my personal preference begins to enter the monologue: I am most com-
fortable pentesting from Ubuntu Linux, which is a derivative of the much older Debian
Linux. My reason is not an elitist opinion battle between mine and theirs. Ubuntu is sim-
ply the best-performing platform of the dozen or so distributions I’ve experimented
with over the years. I won’t discourage you from choosing a different distribution, espe-
cially if you are already comfortable with something else. But I encourage you to
choose a project that is extremely well-documented and supported by a vast community
of educated users. Ubuntu certainly meets and exceeds these criteria.
 Choosing a Linux distribution is a lot like choosing a programming language.
You’ll find no shortage of die-hard supporters with their feet buried deep in the sand,
screaming at the top of their lungs all the reasons why their camp is superior to the
others. But these debates are pointless because the best programming language is usu-
ally the one you know the best and can therefore be the most productive with. That is
also true with Linux distributions.
1.7.3
Why not use a pentest distribution?
You may have heard about Kali Linux, Black Arch, or some other custom Linux distri-
bution marketed for pentesting and ethical hacking. Wouldn’t it be easier to just
download one of those instead of building a platform from scratch? Well, yes and no.
What is a Linux distribution?
Unlike commercial operating systems such as Microsoft Windows, Linux is open
source and freely customizable to your heart’s content. As a direct result, hundreds
of different versions of Linux have been created by individuals or groups or even com-
panies that have their own perspective on how Linux should look and feel. These ver-
sions are called distributions, distros, or sometimes flavors, depending on who you’re
chatting with. 
The core of the Linux operating system is called the kernel, which most versions leave
untouched. The rest of the operating system, though, is totally up for grabs: the win-
dow manager, package manager, shell environment, you name it.
15
Summary
 Although the grab-and-go factor is undoubtedly appealing, what you’ll find when
you work in this field long enough is that these preconfigured pentest platforms tend
to be a little bloated with unnecessary tools that never get used. It’s kind of like start-
ing a new DIY home project. A big hardware store like Home Depot has absolutely
everything you could ever need, but the individual project you are working on, no
matter how complex it is, requires only a dozen or so tools. I want to go on record stat-
ing that I respect and admire the hard work that’s put in by the various developers
and maintainers of these distros.
 At some point, though, you’ll inevitably Google “How to do XYZ in Linux” while
on an active engagement and find a really great article or tutorial with just four simple
commands that work on Ubuntu but not Kali, even though Kali is based on Ubuntu!
Sure, you can go digging into the problem, which, of course, has a simple solution
once you find out what it is; but I’ve had to do this so many times that I simply run
Ubuntu and install what I need—and only what I need and that works best for me.
That’s my philosophy, right or wrong.
 Last, I’ll say this. I place a great deal of importance on building out your own envi-
ronment—not just for your competency and skill progression, but also so that you can
have the confidence to look your client in the eye and tell them everything that’s run-
ning on your system if they ask you. Clients are often scared of penetration testing
because they don’t have much experience with it, so it’s not uncommon for them to
be cautious when allowing a third party to plug an unmanaged device into their net-
work. I’ve been asked many times to provide a write-up of every tool I use and links to
the documentation. 
NOTE
Maybe you’re thinking “I still want to use Kali.” That’s completely fine.
Most of the tools covered in this book are natively available within Kali Linux.
Depending on your skill level, it may be easier to go that route. Keep in mind
that all of the exercises and demonstrations in the book are done using the
custom-built Ubuntu machine covered in appendix A. I expect that you can
follow along with this book using Kali Linux if that is your preference.
All that being said, if you prefer to create your own system from scratch, you can take
a look at appendix A, where I have outlined a complete setup and configuration. Oth-
erwise, if you simply want to get started learning how to conduct an INPT, you can
download and set up the Capsulecorp Pentest environment from the GitHub link in
section 1.6.1. Either way, make your choice, set up your lab environment, and then get
started conducting your first penetration test in chapter 2.
Summary
 The world as we know it is operated by networked computer systems.
 It is increasingly difficult for companies to manage the security of their com-
puter systems.
16
CHAPTER 1
Network penetration testing
 Attackers need to find only a single hole in a network to blow the doors wide
open.
 Adversarial attack simulation exercises, or penetration tests, are an active
approach to identifying security weaknesses in an organization before hackers
can find and exploit them.
 The most common type of attack simulation is an internal network penetration
test, which simulates threats from a malicious or compromised insider.
 A typical INPT can be executed within a 40-hour work week and consists of four
phases:
1 Information gathering
2 Focused penetration
3 Post-exploitation and privilege escalation
4 Documentation
Phase 1
Information gathering
This part of the book will guide you through the first phase of your internal
network penetration test (INPT). In chapter 2, you learn how to identify live
hosts, or targets, from a given IP address range using various techniques and
tools. Chapter 3 teaches you how to further enumerate those targets by identify-
ing network services listening on open ports. You also learn how to fingerprint
the exact application name and version number of these network services using
a technique sometimes called banner grabbing. Finally, in chapter 4, you per-
form manual vulnerability discovery, probing identified network services for the
three types of commonly exploited security weaknesses: authentication, configu-
ration, and patching vulnerabilities. When you’re finished with this part of the
book, you will have a complete understanding of your target environment’s
attack surface. You will be ready to begin the next phase of your engagement:
focused penetration.
19
Discovering
 network hosts
As you’ll recall, the first phase in the four-phase network penetration testing (pen-
testing) methodology is the information-gathering phase. The goals and objectives for
this phase are to gather as much information as possible about your target network
environment. This phase is further broken up into three main components or sub-
phases. Each sub-phase focuses on discovering information or intelligence about
network targets within the following separate categories: 
 Hosts—Sub-phase A: host discovery
 Services—Sub-phase B: service discovery
 Vulnerabilities—Sub-phase C: vulnerability discovery
This chapter covers
 Internet Control Message Protocol (ICMP)
 Using Nmap to sweep IP ranges for live hosts
 Performance tuning Nmap scans
 Discovering hosts using commonly known ports
 Additional host discovery methods
20
CHAPTER 2
Discovering network hosts
Figure 2.1 illustrates the workflow from each sub-phase beginning with host discovery,
then service discovery, and ending with vulnerability discovery. In this chapter, you’ll focus
on the first sub-phase: host discovery. The purpose of this sub-phase is to discover as many
possible network hosts (or targets) as possible within a given range of IP addresses (your
scope). You want to produce two primary outputs during this component:
 A targets.txt file containing IP addresses that you will test throughout the
engagement
 An ignore.txt file containing IP addresses that you will avoid touching in any way
DEFINITION
Throughout this book, I will use the term target to mean several
things: a network host, a service listening on that host, or an attack vector
present within a service listening on a host. The context for a given instance
of the word target will depend on the particular phase or sub-phase being dis-
cussed. Throughout this chapter about discovering network hosts, the term
target is used in reference to a network host: that is, a computer with an IP
address on the company network.
The target list is most effective as a single text file containing line after line of individ-
ual IP addresses. Although it is important to uncover additional information about
these target hosts, such as their DNS name or operating system, a simple text file with
nothing but IP addresses is critical because it serves as an input to several of the tools
you’ll use throughout the pentest.
Host discovery
Service discovery
Vulnerability discovery
Final
output
Final
output
Final
output
List of available
attack vectors
targets.txt
Protocol-specific 
target lists
ignore.txt
A.
B.
C.
Identify host-specific info:
- IP address
- DNS name
- Operating system
Enumerate listening services:
- Service protocol
- Software name and version
- NSE script output
Test for security weaknesses:
- Missing, weak, or default credentials
- Missing security updates (patches)
- Insecure service configuration
Figure 2.1
The information-gathering phase workflow
21
Understanding your engagement scope
 The exclusion list or blacklist contains IP addresses you are not allowed to test.
Depending on your particular engagement, you may or may not have an exclusion
list, but it’s critical that you discuss this with your client up front and double-check
before moving on to the later components of this phase. 
 Figure 2.2 depicts the host discovery process which will be taught throughout the
remainder of this chapter. It’s a good idea to perform host discovery against the entire
range or list of ranges provided and then ask the client to look through the results
and let you know if there are any systems to stay away from. This is sometimes a chal-
lenge: as a pentester, you speak in IP addresses, but network administrators typically
speak in hostnames. The way it tends to play out is that the client provides a small list
of hosts (usually just their DNS names) that are to be excluded, which you can manu-
ally remove from the targets.txt file.
2.1
Understanding your engagement scope
At this point, you might be wondering how the list of IP address ranges you will probe
during host discovery is determined. This happens during scoping discussions, which
you may or may not have been a part of. As a consultant working for a company that
performs regular pentesting services, you typically won’t be involved in scoping discus-
sions because they often take place during the sales process. 
ICMP/Ping/Nmap
Live hosts
Client clears for
testing
Yes
No
192.168.1.0/24
192.168.2.0/24
192.168.10.0/21
B. Probes are directed at IP 
    address ranges taken from 
    the engagement scope.
A. Send discovery
    probes to identify 
    live hosts.
C. This results in a list of
    live hosts (targets).
D. Confirm with your client if
   any targets are off limits.
F. Place unapproved
   targets in ignore.txt.
E. Place approved
    targets in targets.txt.
Discovery probes
Engagement scope
Target list
Exclusion list
Figure 2.2
Detailed breakdown of sub-phase A: host discovery
22
CHAPTER 2
Discovering network hosts
 Companies can charge more money to pentest a larger network. For this reason, cus-
tomers purchasing a pentest might choose to limit engagement scopes to save money.
Regardless of your or my opinion on whether they should or shouldn’t do this, that’s
their call. All you need to concern yourself with as the pentester is what’s in your engage-
ment scope. Even though you weren’t involved in choosing what is or is not to be con-
sidered in scope, you must be intimately familiar with the scope of any engagement you
are taking part in, especially as the technical lead performing the actual testing.
2.1.1
Black-box, white-box, and grey-box scoping
When it comes to clients and scoping out network pentests, you’ll experience a broad
spectrum of personalities and attitudes toward host discovery. However, there are
really only three ways to do it that make sense for an internal network penetration test
(INPT):
 The client gives you a list containing each individual IP address that is to be
considered in scope. This is an example of white-box scoping.
 The client gives you no information about the network and assumes you are
playing the role of an external attacker who managed to get inside the building
but now is tasked with footprinting the network. This is considered a black box.
 The client gives you a list of IP address ranges that you are to sweep through to
identify targets. This is a middle-ground approach and is often called a grey-box
scope.
DEFINITION
Footprinting is a fancy pentest word for enumerating information