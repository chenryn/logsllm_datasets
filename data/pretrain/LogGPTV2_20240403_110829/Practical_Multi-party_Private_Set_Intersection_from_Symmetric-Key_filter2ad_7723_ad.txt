in their input set. That party
k
will not program their OPPRF in Step 4 on the point x
. As a result,
is pseudorandom. Hence the probability that of a false
the term yi
k
is 2−ℓ. By setting ℓ = λ + log2(m), a union
positive involving x
i yi
k
1
k
1
k
i, j
k ) | k ∈ [m]}.
denote the corresponding output of
(3) For all i ∈ [n] and k ∈ [m], party Pi sets Si(xi
k) = si,i
k ⊕
(4) For i = 2 to n, parties Pi and P1 invoke an instance of
.
j
i, j
k
where:
i, j
k
ℱ F,m,m
opprf
• Pi is sender with input {(xi
k , s
• Pj is receiver with input Xj.
For x
ℱopprf
obtained by Pj.
k ∈ Xj, let(cid:98)s
j(cid:44)i(cid:98)s

where:
j,i
k
ℱ F,m,m
opprf
• Pi is sender with input {(xi
• P1 is receiver with input X1.
For x
1
x
k
k ∈ X1, let yi
1
of ℱopprf
involving Pi.
1
k
Parameters: n parties P1, . . . , Pn.
Input: Party Pi has input Xi = {xi1, . . . , xi
Protocol:
| j ∈ [n]} values subject to
(1) For all i ∈ [n] and all k ∈ [m], party Pi chooses random
(2) For all i, j ∈ [n], parties Pi and Pj invoke an instance of
= 0.
i, j
k
{s
j s
m} ⊆ {0, 1}∗
k , Si(xi
k) | k ∈ [m]}.
denote the corresponding output for
k) =
1
k}.
i(cid:44)1 yi
(5) Party P1 announces {x
k ∈ X1 | S1(x
Figure 8: Multi-Party PSI Protocol
bound shows that the probability of any item being erroneously
included in the intersection is 2−λ.
Theorem 5.1. The protocol of Figure 8 is secure in the semi-honest
model, against any number of corrupt, colluding, semi-honest parties.
Proof. Let C and H be a coalition of corrupt and honest parties,
respectively. To show how to simulate C’s view in the ideal model,
we consider two following cases based on whether all parties in C
have item x:
• All parties in C have x and not all parties in H have x: if H
contains only one honest party Pi, then Pi does not have
x. From the output of set intersection, C can deduce that Pi
does not have x. Thus, there is nothing to hide about whether
Pi has x in this case.
Consider the case that H has more than one honest party,
say Pi and Pj. Suppose Pi has x, while party Pj does not. So,
x does not appear in the intersection. We must show that
the protocol must hide the identity of which honest party is
missing x.
In Step 2 of the protocol, there is an OPPRF instance with Pj
as sender and Pi as receiver. Pj will not program the OPPRF
at point x, so Pi will receive a pseudorandom output for
x that is independent of the corrupt coalition’s view. This
causes Si(x) to be independent of the coalition’s view.
Later in Step 4, if the dealer is corrupt, both Pi and Pj act as
OPPRF senders with the dealer. Pi programs the OPPRF at x
using the pseudorandom value Si(x). Pj doesn’t program the
OPPRF at point x. The security of OPPRF is that program-
ming the PRF at x with a random output is indistinguishable
from not programming at x at all. In other words, parties Pi
Session F1:  Private Set IntersectionCCS’17, October 30-November 3, 2017, Dallas, TX, USA1264and Pj have indistinguishable effect on the conditional re-
construction phase. If dealer is honest, the corrupt coalition’s
view is simulated from Step 2 based on the functionality of
OPPRF.
• Not all corrupt parties in C have x: we must show that C
should learn nothing about whether any of the honest parties
hold x.
Any honest party Pi who holds x generates corresponding
shares si, j, to be conditionally distributed in Step 2. But
some corrupt party does not query the OPPRF on x in step 2.
This makes all the si, j shares corresponding to x distributed
uniformly. All honest parties Pj who hold x will therefore
have Sj(x) uniformly distributed of the coalition’s view. In
Step 4, the honest parties that hold x will program the OPPRF
on (x, Sj(x)). The honest parties that don’t hold x will not
program the OPPRF on point x. As above, programming
the PRF with a random output is indistinguishable from not
programming at that point at all. Hence all honest parties
have indistinguishable effect on the reconstruction phase.
(cid:3)
Cost and Optimizations. In the conditional sharing phase, each
party performs a multi-query OPPRF with every other party. In
the reconstruction phase, each party performs just one multi-query
OPPRF with the leader P1. Recall that the cost of each of these is
one instance of single-query OPPRF per Cuckoo-hashing bin.
The multi-query OPPRF scales well when sender and receiver
have different number of elements. Therefore, our multi-party PSI
protocol allows each party’s set to have different size. The number
of OPPRF instance depends on the number of bins for Cuckoo-
hashing, and the OPPRF receiver is the one using Cuckoo hashing
(sender uses plain hashing). Thus, our PSI protocol is more efficient
by setting the leader P1 as the party with the smallest input set.
We note that all of the OPPRF instances in the conditional shar-
ing phase can be done in parallel, and all the OPPRF instances in
the reconstruction phase can as well. This leads to a constant-round
protocol.
Finally, recall that the multi-query OPPRF uses Cuckoo hashing.
It is safe for all such instances, between all pairs of parties, to use
the same Cuckoo hash functions. That way, a party only needs to
hash their input set twice at the beginning of the protocol (once
with Cuckoo hashing for when they are OPPRF receiver, and once
with simple hashing for when they are OPPRF sender).
Generalization. Suppose we wish to secure the protocol against
the possibility of at most t corrupt (colluding) parties. The default
case is to consider t = n − 1. For smaller t, we can simplify the
protocol. The idea is to modify the conditional zero-sharing protocol
so that party Pi generates shares of zero only for {Pi +1, . . . , Pi +t +1}
(where indices on parties are mod n). The security analysis applies
also to this generalization, based on the fact that if Pi is honest,
then at least one of Pi +1, . . . , Pi +t +1 must also be honest.
6 FURTHER OPTIMIZATIONS
6.1 PSI in Augmented Semi-Honest Model
In this section we show an optimization to our PSI protocol which
results in a protocol secure in the augmented semi-honest model
(cf. Section 2 and Appendix A).
Si(ind) =(cid:169)(cid:173)(cid:171) i−1
j=1
F(rj,i , ind)(cid:170)(cid:174)(cid:172) ⊕(cid:169)(cid:173)(cid:171) n
j=i +1
F(ri, j , ind)(cid:170)(cid:174)(cid:172)
Initialization: Each party Pi picks random seeds ri, j for j =
i + 1, . . . , n and sends seed ri, j to Pj
Generate zero-sharing: Given an index ind, each Pi computes
Figure 9: The zero-sharing protocol
Unconditional zero-sharing. The previous protocol starts with
a conditional zero-sharing phase, where parties obtain shares of zero
or shares of a random value, based on whether they share an input
item x. In this section we propose an unconditional zero-sharing
technique in which the parties always receive shares of zero.
as Si(ind) =
We describe a method for generating an unlimited number of
zero-sharings derived from short seeds that can be shared in a one-
time initialization step. The protocol is described in Figure 9. The
protocol is based on an initialization step where each pair of parties
exchange keys for a PRF F, after which each party knows n−1 keys.
Then, whenever zero-sharing is needed, party Pi generates a share
r F(r , ind), where ind is an index which identifies
this protocol invocation, and r ranges over all the keys shared with
other parties.
We first observe that the XOR of all Si(ind) shares is indeed 0,
since each term F(ri, j , ind) appears exactly twice in the expression.
As for security, consider a coalition of t < n − 1 corrupt parties, and
let Pk be the honest party with smallest index. Pk sends random
seeds to all other honest parties. These seeds are independent of all
other seeds, and are unknown to the corrupt coalition. They result
in set of n − t − 1 pseudorandom terms that are included in the
shares of all honest parties other then Pk. Therefore the shares of
the honest parties look pseudorandom to the coalition (subject to
all shares XORing to zero).
PSI protocol (Figure 8) in the following ways:
Plugging into the PSI protocol. Suppose we modify our main
• Instead of steps 1-3, the parties perform the unconditional
zero-sharing phase of Figure 9. That is, they run the initialize
phase to exchange seeds and then set their Si mappings
accordingly.
• Then they continue with Figure 8 starting at step 4.
The modification significantly reduces the cost of the zero-sharing
phase (which was the most expensive part of Figure 8) with a zero-
sharing phase that costs almost nothing. Our experiments confirm
that this modified protocol is faster than the standard semi-honest-
secure protocol, by a significant constant factor.
Correctness of the modified protocol follows from the same
reasons as for the unmodified protocol. Namely, if some party Pi
does not have an item x, then they will not program their OPPRF
with P1 at point x. This causes P1 to obtain a random value in the
reconstruction phase and subsequently not include x in the output.
Theorem 6.1. The modified protocol (with unconditional zero-
sharing) is secure in the augmented semi-honest model.
Proof Sketch. Consider a coalition C of corrupt parties. We
must show how to simulate C’s view in the ideal model. If P1 (cid:60) C
then, assuming that the underlying OPRF protocol is secure, the
Session F1:  Private Set IntersectionCCS’17, October 30-November 3, 2017, Dallas, TX, USA1265basic protocol:
view of C consists only of the output of the invocations of the OPRF
protocol (acting as sender in each one), and is therefore random.
If the leader P1 ∈ C then the simulator sends to the ideal PSI
functionality the set X1 as the input of every corrupt party (this is the
advantage given to the simulator in the augmented security model).
Let Z denote the output of the functionality (the intersection of all
sets). P1’s view contains OPPRF outputs from all honest parties,
corresponding to every x ∈ X. For x ∈ Z, simulate a random
sharing of zero as the corresponding OPPRF outputs. For x ∈ X1\Z,
simulate random values for the corresponding OPPRF outputs. (cid:3)
Let us give an intuition on why this protocol achieves security
only in the augmented model. In this modified protocol, the zero-
sharing for each candidate x is generated non-interactively by the
parties. So even though a corrupt party Pi does not have an item
x, he can non-interactively imagine what his correct share Si(x)
would be. When colluding with P1, this allows the adversary to
learn exactly what would have happened if Pi included x in its set
(but only if x ∈ X1 as well).
In the semi-honest protocol (Section 5), however, a corrupt party
interacts with honest parties to generate a zero-sharing correspond-
ing to x. At the time of the interaction, the corrupt party Pi “com-
mits” to having x in its input set or not, depending on whether it
queries the OPPRF on x. If during the (conditional) zero-sharing
phase Pi does not have x in its input set, then there is no way to
later guess what the “correct share” would have been.
6.2 Reducing OPPRF Hint Size
In this section we look inside the several layers of abstraction in
our PSI protocol, and use a global view of things to find room for
optimization. We focus on the multi-query OPPRF construction
from Section 4. Recall that it works in the following way:
Cuckoo hashing method.
• The OPPRF receiver hashes their queries into m bins via a
• The OPPRF sender hashes their programming-points into
m bins using simple hashing, for each Cuckoo hash function
(i.e., assigning a single item to many bins).
• In each bin, the parties perform a single-query OPPRF in-
stance, where the receiver queries on their (unique) item in
that bin.
Now look even further inside those single-query OPPRF in-
stances. In each one, the parties invoke an OPRF instance and
furthermore the sender gives a “hint” that contains the information
to correct/program the OPRF outputs to the desired values.
There are two possible approaches for sending the hints that
are required for these OPPRF computations. The straightforward
approach sends a separate hint per OPPRF invocation, namely
per bin. The other approach sends a single combined hint for all
bins. Namely, this combined hint is a single polynomial or Bloom
filter, which provides for each of the m possible inputs of Pi the
correct “hint” for changing the output of the corresponding OPRF
invocation.
The advantage of the “separate hints” approach is that in each
OPPRF invocation each party Pi has only S = 𝒪(log m/log log m)
points and therefore computing the hint might be more efficient.
This is relevant for the polynomial-based hint, since its computa-
tion time is quadratic in the size of the set of points. Therefore,
the overhead of computing a single combined hint polynomial is
O(m
2) whereas the overhead of computing hints for all bins is only
𝒪(m log2
m/log2(log m)). On the other hand, when computing a
hint per bin, the total number of points is 𝒪(m log m/log log m),
whereas if a combined hint is used, the total number of points is
𝒪(m). We expect (and validate in the experiments in Section 7), that
a combined hint works better for the Bloom filter-based OPPRF,
since the cost of this method is linear in the total number of points.
On the other hand, the bottleneck of the polynomial-based OPPRF
is the quadratic overhead of polynomial interpolation, thus when
using that OPPRF it is preferable to use separate hints per bin.
implemented as R(x)k
Improvements: We can add the following improvements to the
• In polynomial-based OPPRF with “separate hints", the OPPRF
sender does not need to pad with dummy items to the max-
imum bin size β before interpolating a polynomial over β
pairs per bin. Instead of that, he interpolates a polynomial
p1(x) over k < β real pairs (xi , yi) and then add it with a
polynomial p2(x) of degree (β − 1). p2(x) can be efficiently
i =1(x − xi), where R(x) is a random
polynomial of degree (β − 1 − k). Using example hashing
parameters from Section 5, the expected value of k is only 3,
while the worst-case β = 30. This optimization reduces the
cost of expensive polynomial interpolation.
• In polynomial-based OPPRF with combined hints, the OPPRF
sender can send a combined hint for each hash function hi.
That is, for each Cuckoo hash function hi, the sender com-
putes a hint that reflects all of the bin-assignments under
that specific hi. The receiver hashes its items with Cuckoo
hashing, and places each item according to exactly one hash
function hi. For each item, the receiver can therefore use the
combined hint for that specific hi.
• In Bloom filter-based OPPRF invocation, each of sender’s
item appears 5 times in hash table, there are 5 different
OPRF values F(khi , x)). Instead of inserting 5 pairs of the
form (x, y ⊕ F(khi , x)) into the GBF, the sender can instead
insert the concatenated value (x,(y ⊕ F(kh1 , x))|| . . . ||(y ⊕
F(kh5 , x))). This reduces the number of the GBF insertions.
6.3 3-party PSI in Standard Semi-Honest Model