    VT_DISPATCH = 0x0009,
    VT_ERROR = 0x000A,
    VT_BOOL = 0x000B,
    VT_VARIANT = 0x000C,
    VT_UNKNOWN = 0x000D,
    VT_DECIMAL = 0x000E,
    VT_I1 = 0x0010,
    VT_UI1 = 0x0011,
    VT_UI2 = 0x0012,
    VT_UI4 = 0x0013,
    VT_I8 = 0x0014,
    VT_UI8 = 0x0015,
    VT_INT = 0x0016,
    VT_UINT = 0x0017,
    VT_VOID = 0x0018,
    VT_HRESULT = 0x0019,
    VT_PTR = 0x001A,
    VT_SAFEARRAY = 0x001B,
    VT_CARRAY = 0x001C,
    VT_USERDEFINED = 0x001D,
    VT_LPSTR = 0x001E,
    VT_LPWSTR = 0x001F,
    VT_RECORD = 0x0024,
    VT_INT_PTR = 0x0025,
    VT_UINT_PTR = 0x0026,
    VT_ARRAY = 0x2000,
    VT_BYREF = 0x4000
而第二个DWORD的值为属性名的哈希值，第三和第四个值为实际的属性内容，如果属性内容是诸如字符串这样的值，那么它会是一个指针。
作者的核心思路是对第三个DWORD那个指针进行加1操作，因为是以字节为单位进行加1，所以实际的操作效果可能是指针偏移0x1、0x100、0x10000、0x1000000。在这种思路之下作者进行了内存布局，通过构造相同大小的BSTR字符串和一个元素来使得它们彼此相邻的分配(相同大小通过计算可以轻易的得到，而且也正是因为它们大小相同所以才会发生彼此相邻的分配)，在布局完成之后对指针进行加1操作就可以读出后面元素的内容，在实际利用过程中布局要更加复杂一些不过原理是一致的。
实际利用过程中作者一次性创建了含有0x7FFE个属性的元素，然后复制它直到大小为0x800000个字节。然后对这些元素进行遍历，每隔0x1000个属性就把它的值设置为一个0x8A大小的字符串，这个设置会导致在内存中分配0x8A字节的字符串，然后马上创建一个body元素并添加9个默认属性(大小正好是0x8A)这样就做到了BSTR和元素的紧邻分配。接下来就像我们上面所说的对指针加1就能读到body元素的内容了。因为body默认属性中包含一些域，通过读取它就可以算出mshtml.dll的基地址。
然后作者在这个基础上继续进行改进，因为作者认为mshtml.dll的版本变化比较多对于利用不是很理想，而且现在我们做的还只是泄漏操作没有实际的进行执行流劫持，而我们这一阶段的主题就是只通过单个漏洞来实现完整的利用。作者为了实现流程控制对属性表进行了覆盖操作，但是又会受到低碎片堆机制的限制，为此又要伪造堆头结构。可见这种利用方法还是比较麻烦的，但是对Element
Attribute结构的利用思路对后来的漏洞利用思路有很大的帮助。
之后在2014年，这个时候Ivan Fratric的《Exploiting Internet Explorer 11 64-bit on Windows
8.1 Preview》发布出来。这篇文章的意义在于，作者针对javascript array对象进行了分析，然后对array对象进行Feng
shui布局并且通过它的capacity域实现了利用。由于js引擎是根据capacity域对数组大小进行判断的，因此我们一旦篡改了capacity域就可以对数组进行越界访问。在下一阶段的利用中，我们就会看到array
object在漏洞利用中起到的作用。
此外在2015年的Pwn2Own上，360 vulcan团队就是通过Element
Attribute对IE11浏览器进行的利用。不过与我们这里的情形不同，vulcan利用的漏洞恰好就是在处理Element
Attribute时出现的未初始化问题，由于与文章主题无关这里就不赘述了，不过相信读完本文之后你就可以理解古河讲的利用思路了，利用的详情可以查看http://www.ichunqiu.com/course/52149。
**8.IE11与针对jscript9引擎的攻击(近现代)**
CanSecWest2014上，ga1ois在议题《The Art of Leaks》中讨论了几个很关键的问题。
第一是自IE9以后引入的jscript9引擎——jscript9.dll使用与以前不同的custom heap，而且这个custom
heap并没有做任何的分配随机化措施，这一点给我们进行内存布局提供了可能。
第二是从UAF转化为任意地址读写的过程中可能因为虚表访问而导致crash和如何避免发生这种crash。
在IE9之前的版本中，javascript是由javascript解析引擎——jscript.dll负责解析的，这个dll在分配内存时使用的是系统的进程堆。而在最新的javascript解析引擎——jscript9.dll中，在分配一些对象时引擎会使用custom
heap，这个custom heap是由jscript9自己负责管理和维护的。并且这个custom
heap在分配时没有进行随机化处理，以至于攻击者可以通过布局一些对象（所谓的feng shui技术）来预估出对象所处的地址。
其中直到0xf000之前的都是我们的array object填充数据，而自0xf000起是我们想要的目标对象，这里以int32Array作为目标对象的例子。
因为后续我们还会涉及到int32Array这个对象，所以我们这里详细的介绍一下。int32Array属于Typed
array的一种，根据MDN的介绍Typed array有以下几种
我们知道javascript是一种脚本语言，是难以像C语言一样表示一些底层数据类型的，Typed
array的设计就是为了解决这个问题。我们虽然可以直接使用new来创建一个Typed array对象，诸如
    new Int32Array(32);
但是还有一种特有的用法如下：
    var a= new ArrayBuffer(8);  
    var b= new Uint8Array(a);
这与Typed array的底层结构是息息相关的，其结构分为解释数据类型的视图对象和实际储存数据的缓冲区对象。
    Struct Int32Array     allocated at Custom Heap
    {
        void* pvftable;
        DOWRD var_2;
        DOWRD var_3;
        DOWRD var_4;
        DOWRD var_5;
        DOWRD var_6;
        DOWRD size;            //条目的个数，字节数等于这项的值*4
        void* pTypeArrayData;     //Arraybuffer Data
        void* pArrayBuffer;   //Arraybuffer Object
        DWORD var_10;
        DWORD var_11;
        DWORD var_12;
    }
    Struct ArrayBuffer      allocated at Custom Heap
    {
        void* pvftable;
        DOWRD var_2;
        DOWRD var_3;
        DOWRD var_4;