Our framework also supports a number of most commonly used
relational algebra operators. However, these operations are not data
oblivious by nature. Therefore, we have to modify these operations
to make them data oblivious.
Let, A be a matrix of m × n dimensions, φ be a propositional
formula consisting one or more atoms, match be a function that
takes input a row of the matrix A, a propositional formula φ and
outputs 0 or 1 based on the result of the conditional predicate on
the row, and C be the output. In our framework C is defined as a
column vector (matrix of m × 1 dimension) and computed as
C[i, 0] = matchφ(A[i, 0 : n])
for all 1 ≤ i ≤ m. In this way, the output size is always the same,
so no information leakage through output size. Next, we focus on
building the match function in a data oblivious manner. First, we
argue that we have to leak the size and type of the operation in our
propositional formula. If we want to hide it then we always have
to execute a constant number of conditional operations in every
possible case, anything other than that would leak information
about the φ. Furthermore, φ can be arbitrarily large and complex.
So hiding φ for security will make the framework very inefficient.
On the other hand, we can easily hide the columns that are used
in φ. We simply touch all the values in input row in each match
execution.
The trace of the selection operation consists of the size of in-
put matrix, the block size, the sequence of read requests for input
matrix, and the matching expression size. Here we perform data
dependent operations but we do exactly same operations for the
same number of input expressions and input rows. We hide the
selection expression content by touching all the element of input
matrix row and evaluating the selection expression to find whether
current row matches or not. So we argue that our implementation
is data oblivious.
A.8 Aggregation
In our framework, we support four aggregation commands, sum,
average, count, min, and max. Each of these aggregation operations
requires different types of processing. By definition sum, average,
count are oblivious since the number of operations does not depend
on the data in anyway. However, min and max depend on the data.
In a trivial implementation min of max computation between two
number reveals branch of the code that is executed by a processor.
As a result, the adversary can distinguish between two different
datasets. To remedy that we used techniques described in [46, 49].
Specifically, we load the values into a register (that is not observable
by the adversary), compute the condition that set a flag, based on
the flag we swap, and return value from one fixed register. In this
process the number of operation remains the same, and the same
path of the code is executed regardless of the input data.
The trace of our aggregation operation is the size of input matrix,
the block size, the number of aggregation operation, and the type
of aggregation operation.
A.9 Join
We only considered a simple join without any special optimizations.
We adopted [11] technique to perform join between two BigMatrix.
Similar to their constructs, we require users to supply the maxi-
mum number of matches in B with A, without this information the
implementation of join operation will become data dependent. Let,
A be matrix of dimension m×n, B be matrix of dimension x ×y, φ be
propositional formula consisting of atom, match be a function that
takes one row from A and another row from B, outputs 1 if rows
matches on given columns and 0 otherwise, and k be the number
of maximum rows in B that matches with any row of A. We use
Algorithm 2 to compute join. For simplicity and efficiency we are
considering only BigMatrix that have one column blocks. It makes
it easier to compute the matching condition obliviously. In case, if
input matrix is not in this format we can run reshape operation to
make it into this shape. Since we are considering only BigMatrix
with single column we will use Ap to indicate pth block. The details
of this join algorithm is given in Algorithm 2.
B ADDITIONAL EXAMPLE : PAGERANK
PageRank is a popular algorithm to measure the relative impor-
tance of a node in a connected graph [47]. It was originally used to
measure the importance of hyperlinked web pages in Word Wide
Web. The simplified version of the algorithm can be expressed as
PR(u) = 
v ∈Bu
PR(v)
L(v)
where u, v are nodes in a connected graph, PR(v) is PageRank of
v, Bu is a set of nodes that links to u, and L(v) is number of links
from v. Finally, we iterate multiple times until the values converge.
Interestingly, we can express the computation in terms of basic
matrix operations using a technique called power method. Also,
to reduce the information leakage through iteration required to
converge, we run the update step a fixed number of times. In our
programming language, we can write the code as follows
Algorithm 2 Data oblivious join algorithm for BigMatrix
1: Require: A, B input BigMatrix, that has only one column block,
φ matching condition, k = maximum row matches from A to B
X = 2k dummy block array
t = K
for v = 1 to row_blocks(B) do
load_block Bv
for j = 1 to rows(Bv) do
2: Output: C output BigMatrix.
3: for u = 1 to row_blocks(A) do
load_block Au
4:
for i = 1 to rows(Au) do
5:
6:
7:
8:
9:
10:
11:
12:
13:
14:
15:
16:
17:
18:
end if
t = t + 1
if t >= 2k then
X[t] = Au[i, :], Bv[j, :]
X[t] = dummy, dummy
else
blocks at the end.
if match(Au[i, :], Bv[j, :], φ) then
Sort X with bitonic sort such that dummy
end if
end for
end for
Write first k elements to C
19:
20:
21:
22:
23:
24: end for
end for
M = load ( ' path / to / adjacency_matrix ' )
d = 0 . 8
N = M. rows
/ / damping f a c t o r
v = rand (N,
v = v
1 )
. / norm ( v ,
1 )
M_hat = (M . ∗ d ) + ones (N, N)
. ∗
( 1 − d )
/ N
f o r _ = 1 to 4 0 :
v = M_hat
∗ v
p u b l i s h ( v )
The corresponding execution engine code is as follows. For sim-
plicity we are skipping the unset methods here.
M = load ( a d j a c e n c y _ m a t r i x _ i d )
d = a s s i g n ( 0 . 8 )
N = a s s i g n (M. rows )
v = rand (N,
t 1 = norm ( v ,
v = s c a l a r ( ' / ' , v ,
1 )
1 )
t 1 )
( ' ∗ ' , M, d )
t 2 = s c a l a r
1 )
t 3 = sub ( d ,
t 4 = div ( t3 , N)
t 5 = ones (N, N)
t 6 = s c a l a r ( ' ∗ ' ,
M_hat = element \ _wise ( ' + ' ,
t 4 )
t5 ,
t2 ,
t 6 )
_ = loop ( 1 , 40 , 1 )
v = m u l t i p l y ( M_hat , v )
p u b l i s h ( v )
In this case, the leaked information to the adversary is the size
of M, the loop iteration count 40, the looped instruction count 1,
and the sequence of operations.
C PROTOCOL DESIGN DETAILS
Code agreement and loading phase. To facilitate the communi-
cation among multi-parties, we assume that the participants know
each others’ and also SGX server’s public key. This can be achieved
by participating in an already existing public key infrastructure.
In addition, we are assuming there exists a broadcast mechanism,
where any participants including the server can broadcast messages
to every other participant.
(i)
pri
(s)
pub
be the public key of participant i, K
be the public key of the central server, K
Let, p be the number of participants, Pi be the ith participant,
(i)
be the private key
K
pub
(s)
of participant i, K
pri
be the private key of the central server, C be the code that all the
participants wants to execute, H(k, m) be an authenticated hash
(HMAC) function that creates MAC of a message m with key k,
Siдn(Kpriv , m) be a signing function that generates fixed length
signature s of message m with a private key of an asymmetric key
pair, and V eri f y(Kpub , s, m) be a verification algorithm that verifies
signature s of message m with a public key of an asymmetric key
pair.
The sequence of operations that participant Pi performs in this
• Generate a signature for the code C with a randomly gener-
phase is the following:
ated nonce ri as follows,
σi ==
• Broadcast σi to all other participants
• Next get all other participants signatures, i.e., get σj for
j = {1, ..., p} and j (cid:44) i
(j)
• Verify by executing V eri f y(K
pub , sj , C||rj) for all j except
i. If any of the signature fails then abort the protocol and
broadcast the abort message
At this stage all the participants have agreed on the same code
C. Now we are ready to start the SGX loading
• One of the participant uploads C and {σ1..σp} to the SGX
server
• The server verifies all the {σ1..σp} as previously
• Next, the server creates the enclave, i.e., loads the trusted
part of the code into SGX
• Generates the signature of the enclave from mrenclave reg-
• Inside the enclave generate asymmetric key pair
Kenclave
• The server generates the following λi for all the participants
pub
Pi and send to participants
, Kenclave
ister call
pri
pub
λi =
• The server also generates a random session key for this
execution Ks, which will be used for further computation in
this session
• Each participants gets λ that they decrypt with their private
pub
key and get Ki
Input data and encryption key provisioning. Once direct key
establishment with SGX server is done, we are ready to send data
to the server.
• Now participant i generates a random symmetric key Ki
and encrypts the key with a key derived from nonce n from
previous step
• Participant i then encrypts the data with Ki and uploads to
the SGX server
Result distribution. Upon finishing the code execution the SGX
server will distribute the result, which is encrypted with recipient’s
public key Ki.