### Redundant Data Centers for an ASP.NET Web Application

I currently have an ASP.NET web application running on a cluster in a data center, which communicates with a SQL Server database. I need to make this setup redundant by adding a hot-hot database in another data center and a replicated web cluster.

### Architectural Options for Failover Setup

To achieve the desired redundancy and failover capabilities, I recommend implementing a multi-tiered architecture with the following components:

#### 1. **Database Redundancy**

- **Primary Configuration:**
  - Use SQL Server in a cluster configuration with two nodes.
  - Utilize Distributed Replicated Block Device (DRBD) with RAID10 storage systems to ensure high availability and data integrity.

- **Secondary Configuration:**
  - Set up a third node as a passive replica in a separate data center.
  - Configure transaction log shipping to the passive replica to keep it up-to-date with the primary database.

- **Failover Strategy:**
  - In the event of a data center failure, the passive replica can be promoted to the primary role, ensuring continuous database operations.

#### 2. **Web Cluster Redundancy**

- **Primary Configuration:**
  - Deploy two web servers in the primary data center.
  - Store local data on a separate set of drives using RAID1 or RAID10, depending on the size and I/O requirements.
  - Use Robocopy or a similar tool to replicate data between the web servers.

- **Load Balancing:**
  - Incorporate a pair of dedicated load balancers to distribute traffic evenly across the web servers.
  - Ensure that the load balancers are configured for high availability and can handle failover scenarios.

- **Secondary Configuration:**
  - Set up an additional replica web server in a separate data center.
  - Configure the secondary web server to take over in case the primary data center fails.

- **Failover Strategy:**
  - In the event of a primary data center failure, the secondary web server and load balancer can take over, maintaining the availability of the web application.

### Summary

By implementing this multi-tiered redundancy strategy, you can ensure that your ASP.NET web application and SQL Server database remain highly available and resilient to data center failures. The use of clustering, DRBD, and transaction log shipping for the database, combined with multiple web servers, load balancers, and a secondary data center, provides a robust solution for failover and disaster recovery.