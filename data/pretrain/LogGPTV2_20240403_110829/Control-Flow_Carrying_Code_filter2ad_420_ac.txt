We implemented C3 on an Ubuntu 64-bit system supporting inputs
of ELF binary executables without source code.
5.1 Binary Rewriter
We developed our custom binary rewriter in 6,500 lines of Python
code with the help of the disassembly engine Capstone [36]. The
binary rewriter takes as input the ELF executable to be protected and
the configuration of k. Embedding CFGs to an executable consists
of three stages.
Session 1A: Binary Analysis and HardeningAsiaCCS ’19, July 9–12, 2019, Auckland, New Zealand8Before we embed control flow information, we first obtain the
static CFG. We do this by modifying a recent work typearmor [45]
(which builds on Dyninst [3]).
Secondly, we use Capstone [36] to disassemble the binary. C3
uses the algorithm described in Appendix A to select basic blocks
and then compute the secret for each of them. Note that the redis-
tribution algorithm will likely distribute basic blocks apart from
each other, and many NOP instructions need to be inserted into the
.text section.
In the last stage, we update the corresponding section infor-
mation including program entry point, program header, section
header, items in relocation table, .dynamic, and .dynsym sections.
In addition, some instructions need to be updated to maintain the
original control flow:
• Direct jumps: We transform all indirect branch transfers to
jump to the stub first; see Section 4.2. Therefore, there are only
direct jumps in the .text section now. The target address of a
direct jump is specified as a relative offset from the address of
the jump instruction, which needs to be recomputed after basic
block redistribution.
• PC-relative addressing mode: We also need to patch instruc-
tions with PC-relative addressing mode, which are often used to
generate position-independent code. The new x86-64 architecture
natively
e.g.,
lea ox200000 (%rip), %rbp adds 0x200000 to the program
counter and saves it to %rbp. To ensure correctness, C3 updates
these instructions by recomputing the new offset using the new
program counter and the address of the redistributed target.
• Function pointers: They are usually absolute addresses of in-
direct call targets that are loaded into registers. To fix these
instructions, the absolute address of the callee should be patched
at the instruction that loads its address into the corresponding
register. This is done by identifying all possible function pointers
with the help of the symbol table and patching them to the re-
distributed addresses. The same goes to global function pointers
where C3 updates the address in data section.
• Data pointers: They need to be patched, too, because the start-
ing offset of the data section has changed. C3 patches them by
adding the new offset to the original value.
• Jump tables/virtual tables: C3 updates the base address of the
jump table by adding the new offset to it. Patching virtual tables
follows the same mechanism.
addressing,
PC-relative
supports
5.2 Execution Environment
We make use of Pin [25] to implement the execution environment
with 1,100 lines of code in C++. It first reads from the secure data-
base the master key and the protection range and then installs a
callback that intercepts the loading of all images to obtain ranges
of the unprotected memory.
We then use the instrumentation callback at instruction gran-
ularity to detect a branch and compute the key for the next basic
block. The decryption of basic blocks is performed by installing
a callback that replaces Pin’s default mechanism of fetching code
from the target process. If the instruction fetched is within the
range of protected code, we reconstruct the key from secret sharing
parabola for decryption.
Table 1: Comparison with existing CFI techniques.
Exploits
]
0
5
[
I
F
C
n
i
B
]
8
4
[
R
I
F
C
C
]
4
4
[
C
C
F
I
Göktas et al [18] ✓ ✓
Davi et al. [14]
Conti et al. [12] ✓ ✓ ✓
Hu et al. [21]
✓
3
C
]
2
3
[
r
e
c
n
u
o
B
k
]
1
1
[
r
e
k
c
e
P
O
R
✓ ✓
✓ ✓ ✓ ✓ ✓
For code transitioning described in Section 4.5, we make use
of PIN_SetContextReg to set the value of %rip register to the
address of the dummy block which has just one instruction that
jumps to the actual target, and then use the PIN_ExecuteAt API
to direct execution to it. For the transition from protected code to
unprotected code, C3 stops the decryption and let the code execute
as normal. Similar to other CFI approaches, the attacker can use
gadgets in unprotected code to construct code-reuse attack, which
C3 cannot defend against.
To avoid performing frequent key reconstruction for direct branch
transfer instructions, we cache the key for subsequent use. There-
fore, each direct branch transfer instruction corresponds to only
one key reconstruction.
6 EVALUATION
We first analyze the security of C3 and then measure its performance
overhead with real-world applications.
6.1 Security
C3 mitigates code-injection attacks in the same way Instruction-Set
Randomization defeats them — when control flow is redirected to
injected code, C3 will decrypt it into random bytes. The attacker
could not prepare the correct encrypted code since she does not
know the master key.
C3 also mitigates most Code-Reuse Attacks (CRA) due to three
reasons. First, C3 generates a wrong key when an invalid control
transfer happens, which results in a random byte stream to be
executed. Second, redistributing and encrypting basic blocks makes
it harder for attackers to analyze and locate gadgets, which defeats
most static CRA. Finally, the encrypted basic blocks result in little
information revealed even when an attacker manages to dump the
execution memory, which defeats most dynamic CRA.
6.1.1 Comparison with existing CFI techniques. A number of recent
proof-of-concept exploits have shown how existing coarse-grained
CFI techniques can be bypassed [12, 14, 18]. Although C3 also en-
forces a coarse-grained policy, its unique handling of basic blocks
(encryption) provides a new defense to make these exploits unsuc-
cessful. Table 1 compares various CFI techniques with C3 on the
CFI policy enforced and defense capability against the exploits.
As shown in Table 1, existing instrumentation-based CFI meth-
ods [44, 48, 50] do not insert checks for unintended control-flow
transfers, making them vulnerable to the exploit proposed by Conti
et al. [12]. Such an exploit would not work on C3 as all instructions
Session 1A: Binary Analysis and HardeningAsiaCCS ’19, July 9–12, 2019, Auckland, New Zealand9(intended or unintended) are encrypted. The exploit proposed by
Hu et al. [21] succeeds on all existing CFI methods as they rely on
the assumption that W⊕X is effective. Moreover, the content in the
CFI table inserted by BinCFI provides sufficient information about
useful gadgets if there is memory disclosure. However, since C3
does not have this problem because it does not insert any metadata.
The first three CFI approaches in Table 1 also suffer from TOCTOU
attack — time of checking values of esp/rsp and time of executing
ret, when the return address is stored in memory which could be
modified by another thread. Under the protection of C3, even if the
address is modified by another thread, control flow will transfer to
cipher-text which will result in program crashing.
Exploits that use call-preceded gadgets [14, 18] cannot succeed
on C3 since basic blocks are redistributed to random addresses.
We performed experiments to verify the effectiveness of C3 on
defending against CRA that uses call-preceded gadgets using the
test application ndh_rop from ROPgadget1, a publicly available test
set for ROP attacks. Our experiments verified that the payload that
successfully exploits ndh_rop failed to run on C3. Upon further
investigation, we realized that it generated an illegal instruction
fault when the return instruction directs control flow to the first
call-preceded gadget. This is because this address is an invalid
instruction which does not carry a valid proof to reconstruct the
correct decryption key.
Compared with fine-grained approaches, e.g., Lockdown [33],
which uses binary instrumentation to enforce CFI for different mod-
ules, C3 can achieve better security as the attacker cannot make
use of memory disclosure to traverse the memory of the victim
program due to encryption of instructions. Basic block redistribu-
tion performed in C3 can also be seen as effectively making the
coarse-grained CFI policy finer-grained since the attacker cannot
find the addresses of gadgets.
One may argue that the attacker could dump the protected code
and do offline analysis to decrypt it. However, even if the attacker
dumps the protected code and obtains the master key and the
address of a basic block, she still has to try all possible encryption
keys to see whether the basic block can be decrypted into valid
instructions. We performed such experiments and realized that
there are usually multiple such keys which have to be further tested
on the resulting caller blocks for validity checks, and such checks
have to carry on for callers of the callers, which makes it difficult
for offline analysis to decrypt the protected code.
6.1.2 CFI effectiveness with AIR. Zhang and Sekar [50] propose
using Average Indirect target Reduction (AIR) for measuring the
strength of CFI, which has become a common method of evalua-
tion [23, 33, 47]. It computes the average number of machine code
instructions that are eliminated as possible targets of indirect con-
trol transfers.
The formula used by Zhang and Sekar is shown in Equation 3,
where n is the number of indirect branch instructions in the pro-
gram, and S is the total number of instructions to which an indirect
branch can transfer control flow, whose value is the same as the size
(cid:12)(cid:12) is the possible number of targets to which
of code in a binary.(cid:12)(cid:12)Tj
indirect branch j can transfer control flow after CFI enforcement.
Table 2: Average indirect target reduction.
Programs
vsftpd (k = 9)
Pure-FTPd (k = 10)
ProFTPD (k = 11)
httpd (k = 11)
Nginx (k = 11)
lighttpd (k = 10)
Memcached (k = 10)
average
# of valid targets
ends with in-
direct branch
25
172
506
171
125
35
62
ends with di-
rect branch
0
0
0
0
0
0
0
AIR
99.84%
98.95%
99.23%
99.74%
99.81%
99.79%
99.62%
99.57%
n