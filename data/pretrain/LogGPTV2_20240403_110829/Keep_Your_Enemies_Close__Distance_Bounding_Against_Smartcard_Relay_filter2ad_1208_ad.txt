Ci
tp
Ri
Ri
verifier
prover
Figure 3: Waveforms of a single bit-exchange of the
distance bounding protocol. fV is the veriﬁer’s clock;
DRVC drives the challenge on to I/O; SMPLR samples
the response; CLKV →P is the prover’s clock; I/OV and
I/OP are versions of the I/O on each side accounting for
the propagation delay td; SMPLC is the received clock
that is used to sample the challenge; and DRVR drives
the response on to the I/O.
and that extracting secret material out of the smartcard,
or interfering with its security critical functionality, is not
economical considering the returns from the fraud.
5.3 Circuit elements and signals
For this section refer to Table 2 for signal names and their
function, Figure 4 for the circuit diagram and Figure 3 for
the signal waveforms.
Clocks and frequencies As opposed to the prover, the
veriﬁer may operate at high frequencies. We have im-
plemented the protocol such that one clock cycle of the
veriﬁer’s operating frequency, fV , determines the dis-
tance resolution. Since signals cannot travel faster than
the speed of light, c, the upper-bound distance resolution
is therefore, c/fV . Thus, fV , should be chosen to be as
high as possible. We selected 200 MHz which allows
us a 1.5 m resolution under ideal conditions for the at-
tacker. We have made the prover’s operating frequency,
fP , compatible with any frequencies having a high-time
−1 + td, where tq deﬁnes the time
greater than tq + fV
between when the challenge is being driven onto the I/O
and when the response is sampled by the veriﬁer; td is
the delay between V and P .
ISO 7816 speciﬁes that
the smartcard/prover needs to operate at 1–5 MHz and
in order to be compatible, we chose fP = fV /128 ≈
1.56 MHz for our implementation.
Shift registers The design has four 64 bit shift regis-
ters (SR): the veriﬁer’s challenge and received response
SR’s and the prover’s two response SR’s. The challenge
96
16th USENIX Security Symposium
USENIX Association
Signals & timing
parameters
Description
CLKV , fV
CLKV →P , fP
DRVC
tn
SMPLC
tm
DRVR
tp
SMPLR
tq
td
Veriﬁer’s clock and frequency; determines the distance resolution
Prover’s clock and frequency; received from veriﬁer
While asserted the challenge is transmitted
Length of time veriﬁer drives the challenge on to the I/O
Prover samples challenge on rising edge
Length of time between assertion of DRVC to assertion of CLKV →P
Prover transmits response
Amount of delay applied to SMPLC
Veriﬁer samples response on rising edge
Time from assertion of CLKV →P to rising edge of SMPLR; determines
upper bound of prover’s distance
Propagation delay through distance d
Table 2: Signals and their associated timing parameters.
CLKV
divide
CLKV P
verifier
challenge SR
DRVC
R
response SR
CE
SMPLR
d
delay
DRVR
SMPLC
response SR’s
0
1
R0
R1
challenge
CE
prover
Figure 4: Simpliﬁed diagram of the distance bounding circuit. DRVC controls when the challenge is put on the I/O
line. CLKV controls the veriﬁer’s circuit; it is divided and is received as SMPLC at the prover where it is used to
sample the challenge. A delay element produces DRVR, which controls when the response is put the I/O, while at the
veriﬁer SMPLR samples it. The pull-up resistor R is present to pull the I/O line to a stable state when it is not actively
driven by either side.
SR is clocked by CLKV and is shifted one clock cycle
before it is driven on to the I/O line by DRVC. The veri-
ﬁer’s response SR is also clocked by CLKV and is shifted
on the rising edge of SMPLR. On the prover side, the
SR’s are clocked and shifted by SMPLC.
Bi-directional I/O The veriﬁer and prover communi-
cate using a bi-directional I/O with tri-state buffers at
each end. These buffers are controlled by the signals
DRVC and DRVR and are implemented such that only
one side drives the I/O line at any given time in order to
prevent contention. This is a consequence of adapting
the Hancke-Kuhn protocol to a wired medium, and im-
plies that the duration of the challenge must be no longer
than necessary, so as to obtain the most accurate distance
bound. A pull-up is also present, as with the ISO 7816
speciﬁcation, to maintain a high state when the line is
not driven by either side. As a side note, if the con-
straints imposed by ISO 7816 are not to be adhered to,
two uni-directional wires for the challenge and response
could have been used for easier implementation.
5.4 Timing
A timing diagram of a single challenge-response ex-
change is shown in Figure 3. The circuit shown in Fig-
ure 4 was implemented on an FPGA using Verilog (not
all peripheral control signals are shown for the sake of
clarity). Since we used a single chip, the I/O and clock
lines were “looped-back” using various length transmis-
sion wires to simulate the distance between the veriﬁer
and prover as shown in Figure 5.
The ﬁrst operation is clocking the challenge shift reg-
ister (not shown), which is driven on to the I/O line by
USENIX Association
16th USENIX Security Symposium
97
tp + 2td. As an improvement, tq can be dynamically ad-
justed between invocations of the protocol allowing the
veriﬁer to make decisions based on the measured dis-
tance, for example, determine the maximum transaction
amount allowed. With a single iteration, the veriﬁer can
discover the prover’s maximum distance away, but with
multiple iterations, the exact distance can be found with
a margin of error equal to the signal propagation time
during a single clock cycle of the veriﬁer. SMPLR may
be made to sample on both rising and falling edges of
fV , effectively doubling the distance resolution without
increasing the frequency of operation (other signals may
operate this way for tighter timing margins).
If we assume that an attacker can transmit signals at
the speed of light and ignore the real-life implications of
sending them over long distances, we can determine the
theoretical maximum distance between the veriﬁer and
prover. A more realistic attacker will need to overcome
signal integrity issues that are inherent to any system.
We should not, therefore, make it easy for the attacker
by designing with liberal timing constraints, and choose
the distance between the veriﬁer and prover, d, to be as
short as possible. More importantly, we should carefully
design the system to work for that particular distance
with very tight margins. For example, the various termi-
nals we have tested were able to transmit/drive a signal
through a two meter cable, although the card should at
most be a few centimeters away. Weak I/O drivers could
be used to degrade the signal when an extention is ap-
plied. The value of d also determines most of the timing
parameters of the design, and as we shall see next, the
smaller these are, the harder it will be for the attacker to
gain an advantage.
5.5 Possible attacks on distance bounding
Although, following from our previous assumptions, the
attacker cannot get access to any more than half the re-
sponse bits, there are ways he may extend the distance
limit before a terminal will detect the relay attack. This
section discusses which options are available, and their
effectiveness in evading defences.
Guessing attack Following the initialization phase,
the attacker can initiate the bit-exchange phase before
the genuine terminal has done so. As the attacker does
not know the challenge at this stage, he will, on average,
guess 50% of the challenge bits correctly and so receive
the correct response for those. For the ones where the
challenge was guessed incorrectly, the response is effec-
tively random, so there is still a 50% chance that the re-
sponse will be correct. Therefore the expected success
rate of this technique is 75%.
Figure 5: The Xilinx XUP board with a VirtexII-PRO 30
FPGA on which the distance bounding design was imple-
mented. Both veriﬁer and prover reside on the same chip
connected only by two same-length tranmission lines for
I/O and clock (1 m shielded cables are shown).
DRVC on the following fV clock cycle for a tn period.
tn should be made long enough to ensure that the prover
can adequately and reliably sample the challenge, and
as short as possible to allow the response to be rapidly
sent while not causing contention. The clock sent to P ,
CLKV →P , is asserted tm after the rising edge of DRVC.
Both CLKV →P and the I/O line have the same propa-
gation delay, td, and when the clock edge arrives (now
called SMPLC), it samples the challenge. The same
clock edge also shifts the two response registers, one of
which is chosen by a 2:1 multiplexer that is controlled
by the sampled challenge. DRVR is a delayed replica of
SMPLC, which is created using a delay element.
The delay, tp, allows the response SR signals to shift
and propagate through the multiplexer, preventing the in-
termediate state of the multiplexer from being leaked.
Otherwise, the attacker could discover both responses to
$= Ci−1.
the previous challenge in the case where Ci
tp may be very short but should be at least as long as
the period from the rising edge of SMPLC to when the
response emerges from the multiplexer’s output; in our
implementation, we used deliberately placed routing de-
lays to adjust tp, which can be as short as 500 ps. When
DRVR is asserted, the response is being driven on to the
I/O line until the falling edge.
At the veriﬁer, the response is sampled by SMPLR
after tq from the assertion of CLKV →P . The value of
tq determines the distance measured and should be long
enough to account for the propagation delay that the sys-
tem was designed for (including on-chip and package de-
lays), and short enough to not allow an attacker to be fur-
ther away than desired, with the minimum value being
98
16th USENIX Security Symposium
USENIX Association
Since our tests show a negligible error rate, the termi-
nal may reject any response with a single bit that is incor-
rect. In our prototype, where the response registers are
64 bits each, the attacker will succeed with probability
4)64 ≈ 1 in 226. The size of the registers is a security
( 3
parameter that can be increased according to the applica-
tion, while the nonces assure that the attacker can only
guess once.
Replay If the attacker can force the card to perform
two protocol runs, with the same nonces used for both,
then all bits of the response can be extracted by sending
all 1’s on the ﬁrst iteration and all 0’s on the second. We
resist this attack by selecting the protocol variant men-
tioned by Hancke and Kuhn [17], where the card adds
its own nonce. This is cheap to do within EMV since
a transaction counter is already required by the rest of
the protocol. If this is not desired then provided the card
cannot be clocked at twice its intended frequency, the at-
tacker will not be able to extract all bits in time. This as-
sumes that the time between starting the distance bound-
ing protocol, and the earliest time the high-speed stage
can start, is greater than the latter’s duration.
Early bit detection and deferred bit signalling The
card will not sample the terminal’s challenge until tm+d
after the challenge is placed on the I/O line. This is to al-
low an inexpensive card to reliably detect the signal but,
as Clulow et al. [12] suggest, an attacker who is willing
to invest in expensive equipment could, in theory, detect
the signal immediately. By manipulating the clock pro-
vided to the genuine card, and using high-quality signal
drivers, the challenge could be sent to the card with less
of a delay.
Similarly, the terminal will wait tq between sending
the challenge and sampling the response, to allow for the
round trip signal propagation time, and wait until the re-
sponse signal has stabilized. Again, with superior equip-
ment the response could be sent from the card just before
the terminal samples. The attacker, however, cannot do
so any earlier than tp after the card has sampled the chal-
lenge, and the response appears on the I/O.
Delay-line manipulation The card may include the
value of tp in its signed data, so the attacker cannot make
the terminal believe that the value is larger than the card’s
speciﬁcation. However, the attacker might be able to re-
duce the delay, for example by cooling the card. If it can
be reduced to the point that the multiplexer or latch has
not settled, then both potential responses may be placed
on to the I/O line, violating our assumptions.
However, if the circuit is arranged so that the delay
will be reduced only if the reaction of the challenge latch
and multiplexer is improved accordingly, the response
will still be sent out prematurely. This gives the attacker
extra time, so should be prevented. If temperature com-
pensated delay lines are not economic, then they should
be as short as possible to reduce this effect.
In fact, tp may be so small, even less than 1 ns, that the
terminal could just assume it would be zero. This will
mean that the terminal will believe all cards are slightly
further away than they really are, but will avoid the value
of tp having to be included in the signed data.
Combined attacks For an attacker to gain a better than
1 in 226 probability of succeeding in the challenge re-
sponse protocol, the relay attack must take less than
tm+q time.
In practice, an attacker will not be able
to sample or drive the I/O line instantaneously and the
radio-link transceiver or long wires will introduce la-
tency, so the attacker would need to be much closer than
this limit. A production implementation on an ASIC
would be able to give better security guarantees and be
designed to tighter speciﬁcations than were available on
the FPGA for our prototype.
5.6 Results
We have developed a versatile implementation that re-
quires only modest modiﬁcation to currently deployed
designs. Our distance bounding scheme was success-
fully implemented and tested on an FPGA for 2.0, 1.0,
and 0.3 meter transmission lengths, although it can be
modiﬁed to work for any distance and tailored to any end
application. Oscilloscope traces of a single bit challenge-
response exchange over a 50 Ω, 30 cm printed circuit
board transmission line are shown in Figure 6. In this
case, the challenge is 1 and the response is 0 with indica-
tors where SMPLR has sampled the response. The ﬁrst,
after tqfail = 15 ns has sampled too early while the sec-
ond, tqpass = 20 ns, which is a single period of fV later,
has correctly sampled the 0 as the response. The delay
td = 2.16 ns, can also be seen and is, of course, due to
the length of the transmission line.
If the attacker ex-
ploited all possible attacks previously discussed and was
able to transmit signals at c, he would need to be within
approximately 6 m, although the actual distance would