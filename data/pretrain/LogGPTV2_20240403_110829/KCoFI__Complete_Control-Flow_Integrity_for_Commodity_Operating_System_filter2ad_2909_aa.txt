title:KCoFI: Complete Control-Flow Integrity for Commodity Operating System
Kernels
author:John Criswell and
Nathan Dautenhahn and
Vikram S. Adve
2014 IEEE Symposium on Security and Privacy
KCoFI: Complete Control-Flow Integrity for
Commodity Operating System Kernels
John Criswell, Nathan Dautenhahn, and Vikram Adve
Department of Computer Science
University of Illinois at Urbana-Champaign
Email: {criswell,dautenh1,vadve}@illinois.edu
Abstract
We present a new system, KCoFI, that is the ﬁrst we
know of to provide complete Control-Flow Integrity protection
for commodity operating systems without using heavyweight
complete memory safety. Unlike previous systems, KCoFI
protects commodity operating systems from classical control-
ﬂow hijack attacks, return-to-user attacks, and code segment
modiﬁcation attacks. We formally verify a subset of KCoFI’s
design by modeling several features in small-step semantics
and providing a partial proof that
the semantics maintain
control-ﬂow integrity. The model and proof account for oper-
ations such as page table management, trap handlers, context
switching, and signal delivery. Our evaluation shows that
KCoFI prevents all
the gadgets found by an open-source
Return Oriented Programming (ROP) gadget-ﬁnding tool in the
FreeBSD kernel from being used; it also reduces the number
of indirect control-ﬂow targets by 98.18%. Our evaluation also
shows that the performance impact of KCoFI on web server
bandwidth is negligible while ﬁle transfer bandwidth using
OpenSSH is reduced by an average of 13%, and at worst
27%, across a wide range of ﬁle sizes. PostMark, an extremely
ﬁle-system intensive benchmark, shows 2x overhead. Where
comparable numbers are available, the overheads of KCoFI
are far lower than heavyweight memory-safety techniques.
I.
INTRODUCTION
Despite much research, memory safety attacks are still a
scourge for C/C++ programmers. Worse yet, most commodity
operating systems are written in C/C++ and are therefore
susceptible to memory safety attacks. As the operating system
(OS) is part of the Trusted Computing Base (TCB) in nearly all
commodity systems, a vulnerability in the OS can undermine
the security of an entire system.
Many memory safety attacks work by diverting a pro-
gram’s control ﬂow to instructions of the attackers choosing;
these instructions may be injected by the attacker [1] or
may already exist within the program [2], [3]. Control-ﬂow
integrity (CFI) is a family of security policies that thwart such
attacks. Traditional CFI requires that all computed branches
(e.g., returns from functions and indirect function calls) jump
to virtual addresses that are designated as correct via static
analysis [4]. Additional restrictions to CFI [5], [6] require that
the instructions do not change.
Enforcing CFI on commodity operating system kernel
code could provide protection against control hijack attacks
that is comprehensive, efﬁcient, and straightforward to im-
plement. However, operating systems pose three challenges
for existing CFI techniques. First, not all targets of indirect
control transfers can be determined statically from the kernel
code. Interrupts can occur at any instruction boundary, so the
kernel must be able to transfer control to any interrupted
instruction on a return from interrupt. Second, operating
systems operations affect control ﬂow in complicated ways.
Signal handler dispatch, for example, modiﬁes the program
counter in interrupted program state saved in memory [7], [8],
and efﬁcient user-kernel memory copying functions modify
interrupted kernel state [7] to recover from page protection
faults. Third, operating systems have access to privileged
hardware that invalidate assumptions commonly made by CFI
techniques. As an example, some CFI systems [4], [9] assume
that the code segment is non-writable. Errant DMA and MMU
conﬁgurations can invalidate that assumption [5], [6].
Most solutions for enforcing CFI [4], [10], [9] do not
protect commodity operating system code. The few that do
protect system-level code have serious limitations: Hyper-
Safe [6] only protects a hypervisor and does not provide
control-ﬂow integrity for operations found in operating systems
(e.g., signal handler dispatch); it also does not protect against
return to user (ret2usr) attacks [11] that corrupt the program
counter saved on interrupts, traps, and system calls to execute
code belonging to less-privileged software. The kGuard [11]
system, designed to thwart ret2usr attacks, enforces a very
weak CFI variant that only ensures that control-ﬂow is directed
at virtual addresses within the kernel; some of its protection is
probabilistic, and it does not handle attacks that use the MMU
to change the instructions within the code segment. Secure
Virtual Architecture (SVA) [12], [5] provides comprehensive
protection against control hijacking attacks, but it does so with
heavyweight memory-safety techniques that have relatively
high overheads even after being optimized by techniques using
sophisticated whole-program pointer analysis [13].
Furthermore, only the original CFI system [4] formally
proves that it enforces control-ﬂow integrity, and it does not
model features such as virtual memory, trap handlers, context
switching, and signal delivery found in modern operating sys-
tems. Having an approach for enforcing control-ﬂow integrity
on these operations that has been formally veriﬁed would
increase conﬁdence that the approach works correctly.
We have built a system named KCoFI (Kernel Control Flow
Integrity, pronounced “coffee”) that aims to provide compre-
hensive, efﬁcient, and simple protection against control ﬂow
attacks for a complete commodity operating system. KCoFI
© 2014, John Criswell. Under license to IEEE.
DOI 10.1109/SP.2014.26
292
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:02:09 UTC from IEEE Xplore.  Restrictions apply. 
operates between the software stack and processor. Essentially,
KCoFI uses traditional label-based protection for programmed
indirect jumps [4] but adds a thin run-time layer linked into the
OS that protects some key OS data structures like thread stacks
and monitors all low-level state manipulations performed by
the OS. Our system provides the ﬁrst comprehensive control-
ﬂow integrity enforcement for commodity OS kernels that
does not rely on slower and more sophisticated memory safety
techniques. Our protection thwarts both classical control ﬂow
attacks as well as ret2usr attacks. To verify that our design
correctly enforces control-ﬂow integrity, we have built a formal
model of key features of our system (including the new
protections for OS operations) using small-step semantics and
provided a partial proof that our design enforces control-ﬂow
integrity. The proofs are encoded in the Coq proof system and
are mechanically veriﬁed by Coq.
The contributions of our system are as follows.
• We provide the ﬁrst complete control-ﬂow integrity
solution for commodity operating systems that does
not rely on sophisticated whole-program analysis or
a much stronger and more expensive security policy
like complete memory safety.
• We have built a formal model of kernel execution with
small-step semantics that supports virtual to physical
address translation, trap handling, context switching,
and signal handler dispatch. We use the model to
provide a partial proof that our design prevents CFI
violations. (We do not verify our implementation.)
• We evaluate the security of our system for
the
FreeBSD 9.0 kernel on the x86-64 architecture. We
ﬁnd that all the Return Oriented Programming (ROP)
gadgets found by the ROPGadget tool [14] become
unusable as branch targets. We also ﬁnd that our sys-
tem reduces the average number of possible indirect
branch targets by 98.18%.
• We evaluate the performance of our system and ﬁnd
that KCoFI has far lower overheads than SVA [12],
[5], the only other system which provides full control-
ﬂow integrity to commodity OS kernels. Compared
to an unmodiﬁed kernel, KCoFI has relatively low
overheads for server benchmarks but higher overheads
for an extremely ﬁle-system intensive benchmark.
The remainder of the paper is organized as follows: Sec-
tion II describes our attack model. Section III provides an
overview of the KCoFI architecture. Section IV presents the
design of KCoFI and how it enforces control-ﬂow integrity,
and Section V presents an overview of our formal control-
ﬂow integrity proof. Section VI describes our implementation
while Section VII evaluates its efﬁcacy at thwarting attacks
and Section VIII describes the performance of our system.
Section IX describes related work, Section X describes future
work, and Section XI concludes.
II. ATTACK MODEL
In our attack model, we assume that the OS is benign
but may contain vulnerabilities; we also assume that the OS
has been properly loaded without errors and is executing. Our
model allows the attacker to trick the kernel into attempting
to modify any memory location. We additionally assume that
the attacker is using such corruption to modify control-data,
including targets that are not of concern to traditional CFI
techniques, e.g., processor state (including the PC and stack
pointer) saved in memory after a context-switch; trap and
interrupt handler tables; invalid pointer values in user-kernel
copy operations; malicious MMU reconﬁguration; etc. Non-
control data attacks [15] are excluded from our model.
Notice that external attackers in our model can inﬂuence
OS behavior only through system calls, I/O, and traps. For
example, dynamically loaded device drivers are assumed not
to be malicious, but may also be buggy (just like the rest of
the OS kernel), and will be protected from external attack.
We assume that the system is employing secure boot features
such as those found in AEGIS [16] or UEFI [17] to ensure
that KCoFI and the kernel are not corrupted on disk and are
the ﬁrst pieces of software loaded on boot. We further assume
that the attacker does not have physical access to the machine;
hardware-based attacks are outside the scope of our model.
III. KCOFI INFRASTRUCTURE
KCoFI has several unique requirements. First, it must in-
strument commodity OS kernel code; existing CFI enforcement
mechanisms use either compiler or binary instrumentation [4],
[10], [18]. Second, KCoFI must understand how and when
OS kernel code interacts with the hardware. For example, it
must understand when the OS is modifying hardware page
tables in order to prevent errors like writeable and executable
memory. Third, KCoFI must be able to control modiﬁcation of
interrupted program state in order to prevent ret2usr attacks.
The Secure Virtual Architecture (SVA) [12], [5] provides
the infrastructure that KCoFI needs. As Figure 1 shows,
SVA interposes a compiler-based virtual machine between the
hardware and the system software (such as an operating system
or hypervisor). All software, including the operating system
and/or hypervisor, is compiled to the virtual instruction set
that SVA provides. The SVA virtual machine (VM) translates
code from the virtual instruction set to the native instruction set
either ahead-of-time (by caching virtual instruction set trans-
lations) or just-in-time while the application is running [19].

 




"
 


Fig. 1. SVA/KCoFI Architecture
The core SVA virtual instruction set is based on the LLVM
compiler intermediate representation (IR) [20]. This instruction
set is a RISC-like instruction set with an unlimited number of
scalar registers in SSA form, making compiler analysis more
effective and efﬁcient than on binary code [20]. Furthermore,
programs in LLVM IR can be serialized to disk as a self-
contained object code format (called bitcode), permitting link-
time, whole-program analysis and transformation, and also
293
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:02:09 UTC from IEEE Xplore.  Restrictions apply. 
allowing such programs to be shipped in LLVM bitcode form
for analysis and transformation on the user’s machine, e.g., at
install time or run-time [20].
SVA adds a set of instructions to LLVM called SVA-OS,
which replace the inline assembly code needed in commodity
operating systems to communicate with the hardware and
to do low-level state manipulation [19], [12], [5]. SVA-OS
handles primitive operations such as context switching, signal
handler dispatch, MMU conﬁguration, and I/O reads and
writes. Additionally, the design of the SVA-OS instructions
permits the SVA VM to control their behavior to ensure that
they do not violate any security policies that SVA enforces.
Because the operating system must
interface with the
hardware via the SVA-OS instructions, it must be ported to
the SVA virtual instruction set. This is similar to porting the
operating system to a new architecture, but a relatively simple
virtual architecture, and only requires modifying the lowest-
level parts of the kernel. No reorganization of the kernel or
modiﬁcations to drivers are needed.
The SVA infrastructure enables KCoFI to enforce a CFI
policy by using the SVA compiler instrumentation capa-
bilities and using the SVA-OS instruction set
to identify
and control both OS kernel/hardware interactions and OS
kernel/application interactions. KCoFI requires all OS code,
including kernel extensions,
to be compiled to the virtual
instruction set but allows applications to be compiled to either
the virtual or native instruction set.
IV. DESIGN
In this section, we describe the CFI policy that KCoFI en-
forces and the hardware and compiler mechanisms it employs
to enforce the policy.
A. Control-ﬂow Integrity Policy and Approach
KCoFI enforces context-insensitive CFI like that of Abadi
et. al. [4]: calls to functions must jump to the beginning of
some function, and returns must jump back to one of the call
sites that could have called the exiting function. The return
address is not itself protected, so it is possible for a function
to dynamically return to a call site other than the one that
called the function in that speciﬁc execution.
To enforce CFI, Abadi et. al. [4] insert special byte
sequences called labels at
the targets of indirect control
transfers within the code segment. These labels must not
appear anywhere else within the instruction stream. Their
technique then inserts code before indirect jumps to check
that the address that is the target of the indirect jump contains
the appropriate label. Abadi et. al. provided a formal proof
that their technique enforces control-ﬂow integrity if the code
segment is immutable [4].
The KCoFI VM instruments the code with the needed
labels and run-time checks when translating code from the
virtual instruction set to the processor’s native instruction set.
To avoid complicated static analysis, KCoFI does not attempt
to compute a call graph of the kernel. Instead,
it simply
labels all targets of indirect control transfers with a single
label. Our design also uses a jump table optimization [18]
to reduce the number of labels and CFI checks inserted for
switch statements. While our current design effectively uses
a very conservative call graph, note that a more sophisticated
implementation that computes a more precise call graph can
be made without changing the rest of the design. Also, the
MMU protections (discussed in Section IV-C) ensure that the
code segment is not modiﬁed by errant writes.
One issue with using CFI labels is that a malicious, native
code user-space application could place CFI labels within its
own code to trick the instrumentation into thinking that its
code contains a valid kernel CFI target [11]. KCoFI solves
this problem by adapting a technique from kGuard [11]; before
checking a CFI label, it masks the upper bits of the address to
force the address to be within the kernel’s address space. This
approach allows KCoFI to safely support legacy, native code
applications that are not compiled to the virtual instruction set.
Similarly, the SVA-OS instructions described later in this
section are implemented as a run-time library that is linked
into the kernel. This run-time library is instrumented with a
disjoint set of CFI labels for its internal functions and call sites
to ensure that indirect branches in the kernel do not jump into
the middle of the implementation of an SVA-OS instruction.
In this way, the run-time checks that these library functions
perform cannot be bypassed.
B. Protecting KCoFI Memory with Software Fault Isolation
The original CFI technique of Abadi et al. [4] is stateless
in that the only data used are constant labels embedded in
the code segment of the application being protected, either as
immediate operands to checking instructions or as constant
labels at control transfer targets.1 KCoFI, however, needs to
maintain some additional state to protect privileged kernel
behaviors, which do not occur in userspace code. This state
includes hardware trap vector tables, page mapping informa-