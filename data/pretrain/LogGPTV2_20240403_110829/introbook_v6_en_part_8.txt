greSQLusingdifferentprogramminglanguages.
• demoisourdemodatabase.
• postgresisalwayscreatedwhenPostgreSQLgetsin-
stalled.
• testwasusedinthe“TryingSQL”chapter.
112
viii
IfyouexpandtheSchemasitemfortheappdbdatabase,you
canfindthegreetingstablethatwehavecreated,viewits
columns,integrityconstraints,indexes,triggers,etc.
Foreachobjecttype,thecontext(right-click)menulistsall
thepossibleactions,suchasexporttoafileorloadfroma
file,assignprivileges,delete.
Therightpaneincludesseveraltabsthatdisplayreference
information:
• Dashboardprovidessystemactivitycharts.
• Propertiesdisplaysthepropertiesoftheobjectselected
intheBrowser(datatypesforcolumns,etc.)
• SQLshowstheSQLcommandusedtocreatetheselected
object.
• Statisticslistsinformationusedbythequeryoptimizerto
buildqueryplans;canbeusedbyadatabaseadministra-
torforcaseanalysis.
• Dependencies,Dependentsillustratesdependenciesbe- 113
tween the selected object and other objects in the viii
database.
RunningQueries
Toexecuteaquery,openanewtabwiththeSQLwindowby
choosingTools→Querytoolfromthemenu.
Enteryourqueryintheupperpartofthewindowandpress
F5.TheDataOutputtabinthelowerpartofthewindowwill
displaytheresultofthequery.
Youcantypethenextquerystartingfromanewline,with-
outdeletingthepreviousquery:justselecttherequiredcode
fragmentbeforepressingF5.Thus,thewholehistoryofyour
114 actionswillbealwaysinfrontofyou.Itisusuallymorecon-
viii venientthansearchingfortherequiredqueryinthelogon
theQueryHistorytab.
OtherFeatures
pgAdmin provides a graphical user interface for standard
PostgreSQLutilities,systemcataloginformation,administra-
tionfunctions,andSQLcommands.Thebuilt-inPL/pgSQLde-
buggerisworthaseparatemention.Youcanlearnaboutall
pgAdminfeaturesontheproductwebsitewww.pgadmin.org,
orinthebuilt-inpgAdminhelpsystem.
IX Additional Features
Full-TextSearch
DespiteallthestrengthoftheSQLlanguage,itscapabilities
arenotalwaysenoughforeffectivedatahandling. Ithas
becomeespeciallyevidentrecently,whenavalanchesofdata,
usuallypoorlystructured,filleddatastorages.Afairshareof
BigDataisbuiltbytexts,whicharehardtoparseandfitinto
databasefields.Searchingfordocumentswritteninnatural
languages,withtheresultsusuallysortedbyrelevancetothe
searchquery,iscalledfull-textsearch. Inthesimplestand
mosttypicalcase,thequeryconsistsofoneormorewords,
andtherelevanceisdefinedbythefrequencyofthesewords
inthedocument. Thisismoreorlesswhathappenswhen
wetypeaphraseinGoogleorYandexsearchengines.
Thereisalargenumberofsearchengines,freeandpaid,that
enableyoutoindexthewholecollectionofyourdocuments
andsetupsearchofafairlydecentquality.Inthiscase,index,
themostimportanttoolforsearchspeedup,isnotapartof
thedatabase.Itmeansthatmanyvaluabledatabasefeatures
becomeunavailable:databasesynchronization,transaction
isolation,accessingandusingmetadatatolimitthesearch
range, setting up secure access to documents, and many
more.
Theshortcomingsofdocument-orienteddatabasemanage-
mentsystems,whichgainmoreandmorepopularity,usually
116 haveasimilarnature: theyhaverichfull-textsearchfunc-
ix tionality,butdatasecurityandsynchronizationfeaturesare
oflowpriority. Besides,suchdatabases(forexample,Mon-
goDB)areusuallyNoSQLones,sobydesigntheylackallthe
SQLpoweraccumulatedoveryears.
Ontheotherhand,traditionalSQLdatabasesystemshave
built-in full-text search engines. The LIKE operator is in-
cludedintothestandardSQLsyntax,butitsflexibilityisobvi-
ouslyinsufficient.Asaresult,developershadtoimplement
theirownextensionsoftheSQLstandard. InPostgreSQL,
thesearecomparisonoperatorsILIKE,~,~*,buttheydon’t
solvealltheproblemseither,astheydon’ttakeintoaccount
grammaticalforms, arenotsuitableforranking, andwork
ratherslowly.
Whentalkingaboutthetoolsoffull-textsearchitself, it’s
importanttounderstandthattheyarefarfrombeingstan-
dardized;eachdatabasesystemusesitsownimplementation
andsyntax. However, RussianusersofPostgreSQLhavea
considerableadvantagehere:itsfull-textsearchextensions
werecreatedbyRussiandevelopers,sothereisapossibility
tocontacttheexpertsdirectlyorevenattendtheirlectures
tolearnimplementationdetails,ifrequired.Herewe’llonly
providesomesimpleexamples.
To learn about the full-text search capabilities, create an-
othertableinourdemodatabase.Letitbealecturer’sdraft
notessplitintochaptersbylecturetopics:
test=# CREATE TABLE course_chapters(
c_no text REFERENCES courses(c_no),
ch_no text,
ch_title text,
txt text,
CONSTRAINT pkt_ch PRIMARY KEY(ch_no, c_no)
);
CREATE TABLE 117
ix
Nowlet’senterthetextofthefirstlecturesforourcourses
CS301andCS305:
test=# INSERT INTO course_chapters(
c_no, ch_no,ch_title, txt)
VALUES
('CS301', 'I', 'Databases',
'We start our acquaintance with ' ||
'the fascinating world of databases'),
('CS301', 'II', 'First Steps',
'Getting more fascinated with ' ||
'the world of databases'),
('CS305', 'I', 'Local Networks',
'Here we start our adventurous journey ' ||
'through the intriguing world of networks');
INSERT 0 3
Checktheresult:
test=# SELECT ch_no AS no, ch_title, txt
FROM course_chapters \gx
-[ RECORD 1 ]-----------------------------------------
no | I
ch_title | Databases
txt | In this chapter, we start get-
ting acquainted
with the fascinating database world
-[ RECORD 2 ]-----------------------------------------
no | II
ch_title | First Steps
txt | Getting more fascinated with the world of
databases
-[ RECORD 3 ]-----------------------------------------
no | I
ch_title | Local Networks
txt | Here we start our adventurous journey
through the intriguing world of networks
118 Nowlet’sfindsomeinformationinourdatabasewiththehelp
ix oftraditionalSQLmeans(usingtheLIKEoperator):
test=# SELECT txt
FROM course_chapters
WHERE txt LIKE '%fascination%' \gx
We’llgetapredictableresult: 0rows. That’sbecauseLIKE
doesn’tknowthatitshouldalsolookforotherwordswith
thesameroot.Thequery
test=# SELECT txt
FROM course_chapters
WHERE txt LIKE '%fascinated%' \gx
willreturntherowfromchapterII(butnotfromchapterI,
wheretheadjective“fascinating”isused):
-[ RECORD 1 ]-----------------------------------------
txt | Getting more fascinated with the world of
databases
PostgreSQLprovidestheILIKEoperator,whichallowsnotto
worryaboutlettercases;otherwise,youwouldalsohaveto
takeuppercaseandlowercaselettersintoaccount.Naturally,
anSQLexpertcanalwaysuseregularexpressions(searchpat-
terns). Composingregularexpressionsisanengagingtask,
littleshortofart.Butwhenthereisnotimeforart,it’sworth
havingatoolthatcansimplydothejob.
Sowe’lladdonemorecolumntothecourse_chapterstable;
itwillhaveaspecialdatatypetsvector:
test=# ALTER TABLE course_chapters
ADD txtvector tsvector;
test=# UPDATE course_chapters 119
SET txtvector = to_tsvector('english',txt); ix
test=# SELECT txtvector FROM course_chapters \gx
-[ RECORD 1 ]-----------------------------------------
txtvector | 'acquaint':4 'databas':8 'fascin':7
'start':2 'world':9
-[ RECORD 2 ]-----------------------------------------
txtvector | 'databas':8 'fascin':3 'get':1 'world':6
-[ RECORD 3 ]-----------------------------------------
txtvector | 'intrigu':8 'journey':5 'network':11
'start':3 'world':9
Aswecansee,therowshavechanged:
1. Words are reduced to their unchangeable parts (lex-
emes).
2. Numbershaveappeared.Theyindicatethewordposi-
tioninourtext.
3. Therearenoprepositions,andneithertherewouldbe
anyconjunctionsorotherpartsofthesentencethat
areunimportantforsearch(theso-calledstopwords).
Tosetupamoreadvancedsearch,wewouldliketoinclude
chaptertitlesintothesearcharea. Besides,tostresstheir
significance,we’llassignweight(importance)tothemusing
thesetweightfunction.Let’smodifythetable:
test=# UPDATE course_chapters
SET txtvector =
setweight(to_tsvector('russian',ch_title),'B')
|| ' ' ||
setweight(to_tsvector('russian',txt),'D');
UPDATE 3
test=# SELECT txtvector FROM course_chapters \gx
120 -[ RECORD 1 ]-----------------------------------------
txtvector | 'acquaint':5 'databas':1B,9 'fascin':8
ix
'start':3 'world':10
-[ RECORD 2 ]-----------------------------------------
txtvector | 'databas':10 'fascin':5 'first':1B 'get':3
'step':2B 'world':8
-[ RECORD 3 ]-----------------------------------------
txtvector | 'intrigu':10 'journey':7 'local':1B
'network':2B,13 'start':5 'world':11
Lexemeshavereceivedrelativeweightmarkers:BandD(pos-
sibleoptionsareA,B,C,D).We’llassignrealweightwhen
writingqueries,whichwillmakethemmoreflexible.
Fullyarmed,let’sreturntosearch.Theto_tsqueryfunction
resemblestheto_tsvectorfunctionwehaveseenabove:it
convertsastringtothetsquerydatatypeusedinqueries.
test=# SELECT ch_title
FROM course_chapters
WHERE txtvector @@
to_tsquery('english','fascination & database');
ch_title
-------------
Databases
First Steps
( rows)
You can check that the search query 'fascinated &
database' and its other grammatical variants will return
thesameresult.Wehaveusedthecomparisonoperator@@,
whichworkssimilartoLIKE.Thesyntaxofthisoperatordoes
notallownaturallanguageexpressionswithspaces,suchas
“fascinatingworld,”that’swhywordsareconnectedbythe
“and”logicaloperator.
Theenglishargumentindicatestheconfigurationusedby
PostgreSQL.Itdefinespluggabledictionariesandtheparser
program,whichsplitsthephraseintoseparatelexemes.
Despitetheirname,dictionariesenableallkindsoflexeme 121
transformations.Forexample,asimplestemmerdictionary ix
likesnowball,whichisusedbydefault,reducesthewordto
itsunchangeablepart;that’swhysearchignoreswordend-
ingsinqueries. Youcanalsopluginotherdictionaries,for
example:
• “regular”dictionaries,suchasispell,myspell,orhun-
spell,whichcanbetterhandlewordmorphology;
• dictionariesofsynonyms;
• thesaurus;
• unaccent,whichcanremovediacriticsfromletters.
Theassignedweightsallowtodisplaythesearchresultsin
accordancewiththeirrank:
test=# SELECT ch_title,
ts_rank_cd('{0.1, 0.0, 1.0, 0.0}', txtvector, q)
FROM course_chapters,
to_tsquery('english','Databases') q
WHERE txtvector @@ q
ORDER BY ts_rank_cd DESC;
ch_title | ts_rank_cd
-------------+------------
Databases | 1.1
First Steps | 0.1
( rows)
The{0.1,0.0,1.0,0.0}arraysetstheweight.Itisanoptional
argumentofthets_rank_cdfunction.Bydefault,array{0.1,
0.2,0.4,1.0}correspondstoD,C,B,A.Theword’sweightaffects
rankingofthereturnedrow.
Inthefinalexperiment,let’smodifythedisplayformat.Sup-
posewewouldliketohighlightthefoundwordsinthehtml
page using the bold type. The ts_headline function de-
fines the symbolstoframe the word, as well as the mini-
mum/maximumnumberofwordstodisplayinasingleline:
122 test=# SELECT ts_headline(
'english',
ix
txt,
to_tsquery('english', 'world'),
'StartSel=, StopSel=, Max-
Words=50, MinWords=5'
)
FROM course_chapters
WHERE to_tsvector('english', txt) @@
to_tsquery('english', 'world');
-[ RECORD 1 ]-----------------------------------------
ts_headline | with the fascinating database
world.
-[ RECORD 2 ]-----------------------------------------
ts_headline | with the world of databases.
-[ RECORD 3 ]-----------------------------------------
ts_headline | through the intriguing world of
networks
Tospeedupfull-textsearch,specialindexesareused:GiST,
GIN,andRUM,whicharedifferentfromregulardatabasein-
dexes. Butlikemanyotherusefulfull-textsearchfeatures,
theyareoutofscopeofthisshortguide.
Tolearnmoreaboutfull-textsearch,seePostgreSQLdocu-
mentation:www.postgrespro.com/doc/textsearch.
UsingJSONandJSONB
From the very beginning, SQL-based relational databases
werecreatedwithaconsiderablesafetymargin: theirtop
prioritywasdataconsistencyandsecurity,whilevolumesof
informationwereincomparabletothemodernones. When
NoSQLdatabasesappeared,itraisedaflaginthecommu-
nity: a much simpler data structure (at first, there were
mostly huge tables with only two columns for key-value
pairs)allowedtoachievearemarkablesearchspeedup. Ac- 123
tivelyusingparallelcomputations, theycouldprocessun- ix
precedentedvolumesofinformationandwereeasytoscale.
NoSQLdatabasesdidnothavetostoreinformationinrows,
andcolumn-orienteddatastorageallowedtofurtherspeed
upandparallelizecomputationsformanytypesoftasks.
Oncetheinitialshockhadpassed,itbecameclearthatfor
most real tasks such a simple structure was not enough.
Compositekeyswereintroduced, andthengroupsofkeys
appeared.Relationaldatabasesystemsdidn’twanttofallbe-
hindandstartedaddingnewfeaturesthatwerecommonin
NoSQL.
Sincechangingthedatabaseschemainrelationaldatabase
systems incurs high costs, a new JSON data type came in
handy. Atfirst, itwastargetedatJS-developers, including
thosewritingAJAX-applications,henceJSinthetitle.Itkind
ofhandledallthecomplexityoftheaddeddata,whichal-
lowedtocreatelinearandhierarchicalobjectswithoutre-
designingthewholedatabase.
Applicationdevelopersdidn’thavetomodifythedatabase
schemaanymore.JustlikeXML,JSONsyntaxstrictlyobserves
data hierarchy and is flexible enough to work with non-
uniformandsometimesunpredictabledatastructures.
Supposewewouldliketoenterpersonaldataintoourstu-
dentsdemodatabase: wehaverunasurveyandcollected
theinformationfromprofessors.Somequestionsintheques-
tionnaireareoptional,whileotherquestionsincludethe“add
moreinformationaboutyourself”and“other”fields.
Ifweaddednewdatatothedatabaseintheusualmanner,
therewouldbealotofemptyfieldsinmultiplenewcolumns
oradditionaltables. What’sevenworse,newcolumnsmay
124 appearinthefuture,andthenwe’llhavetorefactorthewhole
ix database.
Wecansolvethisproblemusingjsonorjsonbtypes. The
jsonbtype,whichappearedafterjson,storesdatainacom-
pactbinaryformand,unlikejson,supportsindexes,which
canspeedupsearchbyanorderofmagnitude.Let’screatea
tablewithJSONobjects:
test=# CREATE TABLE student_details(
de_id int,
s_id int REFERENCES students(s_id),
details json,
CONSTRAINT pk_d PRIMARY KEY(s_id, de_id)
);
test=# INSERT INTO student_details(de_id,s_id,details)
VALUES
(1, 1451,
'{ "merits": "none",
"flaws":
"immoderate ice cream consumption"
}'),
(2, 1432,
'{ "hobbies":
{ "guitarist":
{ "band": "Postgressors",
"guitars":["Strat","Telec"]
}
}
}'),
(3, 1556,
'{ "hobbies": "cosplay",
"merits":
{ "mother-of-five":
{ "Basil": "m", "Simon": "m", "Lucie": "f",
"Mark": "m", "Alex": "unknown"
}
}
}'),
(4, 1451,
'{ "status": "expelled"
}');
Let’scheckthatallthedataisavailable. Forconvenience, 125
wewilljointhetablesstudent_detailsandstudentsus- ix
ingtheWHEREclause,sincethenewtabledoesnotcontain
students’names:
test=# SELECT s.name, sd.details
FROM student_details sd, students s
WHERE s.s_id = sd.s_id \gx
-[ RECORD 1 ]--------------------------------------
name | Anna
details | { "merits": "none", +
| "flaws": +
| "immoderate ice cream consumption" +
| }
-[ RECORD 2 ]--------------------------------------
name | Victor
details | { "hobbies": +
| { "guitarist": +
| { "band": "Postgressors", +
| "guitars":["Strat","Telec"] +
| } +
| } +
| }
-[ RECORD 3 ]--------------------------------------
name | Nina
details | { "hobbies": "cosplay", +
| "merits": +
| { "mother-of-five": +
| { "Basil": "m", +
| "Simon": "m", +
| "Lucie": "f", +
| "Mark": "m", +
| "Alex": "unknown" +
| } +
| } +
| }