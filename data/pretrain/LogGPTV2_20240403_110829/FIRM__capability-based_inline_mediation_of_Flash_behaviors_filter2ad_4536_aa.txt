title:FIRM: capability-based inline mediation of Flash behaviors
author:Zhou Li and
XiaoFeng Wang
FIRM: Capability-based Inline Mediation of Flash Behaviors
Zhou Li, XiaoFeng Wang
Indiana University, Bloomington
{lizho,xw7}@indiana.edu
ABSTRACT
The wide use of Flash technologies makes the security risks
posed by Flash content an increasingly serious issue. Such
risks cannot be eﬀectively addressed by the Flash player,
which either completely blocks Flash content’s access to web
resources or grants it unconstrained access. Eﬀorts to mit-
igate this threat have to face the practical challenges that
Adobe Flash player is closed source, and any changes to it
need to be distributed to a large number of web clients. We
demonstrate in this paper, however, that it is completely fea-
sible to avoid these hurdles while still achieving ﬁne-grained
control of the interactions between Flash content and its
hosting page. Our solution is FIRM, a system that embeds
an inline reference monitor (IRM) within the web page host-
ing Flash content. The IRM eﬀectively mediates the inter-
actions between the content and DOM objects, and those
between diﬀerent Flash applications, using the capability
tokens assigned by the web designer. FIRM can eﬀectively
protect the integrity of its IRM and the conﬁdentiality of
capability tokens. It can be deployed without making any
changes to browsers. Our evaluation based upon real-world
web applications and Flash applications demonstrates that
FIRM eﬀectively protects valuable user information and in-
curs small overhead.
Categories and Subject Descriptors
K.6.5 [Security and Protection]: Unauthorized access
General Terms
Security
Keywords
Adobe Flash, Cross-site scripting, Inline Reference Monitor
1.
INTRODUCTION
Flash, a multimedia platform ﬁrst introduced in 1996,
has been extensively used today to deliver dynamic web
contents, including animations, advertisements, movies and
Permission to make digital or hard copies of all or part of this work for
personal or classroom use is granted without fee provided that copies are
not made or distributed for proﬁt or commercial advantage and that copies
bear this notice and the full citation on the ﬁrst page. To copy otherwise, to
republish, to post on servers or to redistribute to lists, requires prior speciﬁc
permission and/or a fee.
ACSAC ’10 Dec. 6-10, 2010, Austin, Texas USA
Copyright 2010 ACM 978-1-4503-0133-6/10/12 ...$10.00.
others. Websites such as YouTube serve hundreds of mil-
lions of videos every day. Popular portals, such as CNN, Ya-
hoo, etc., broadcast news and host advertisements through
Flash contents. The pervasiveness of Flash, however, brings
in new security and privacy concerns. Adobe Flash player of-
fers interfaces for a Flash application (Shock-Wave-Flash ﬁle
or SWF) to operate on the DOM (document object model)
objects of its hosting page, other SWF ﬁles and ﬁle systems.
Through ActionScript functions such as getURL, Flash con-
tent can even inject JavaScript code into web content. With-
out proper control, it is conceivable that malicious Flash
code can wreak such havoc as stealing sensitive informa-
tion (e.g., cookies, passwords) and modifying high-integrity
data (e.g., account balances). Such threats can also come
from legitimate yet vulnerable Flash content: as discovered
recently [29, 34, 18], a large number of existing Flash appli-
cations contain serious security ﬂaws that can be exploited
to launch attacks like cross-site scripting (XSS), cross-site
request forgery (XSRF), and others. As an example, last
year, an XSS ﬂaw was found in the Flash content hosted by
the SSL e-banking site of Marﬁn Egnatia Bank [23], through
which an attacker can inject malicious scripts to steal cre-
dentials from the bank’s customers.
Adobe Flash player provides security mechanisms to con-
trol interactions between Flash code and its hosting page:
web developers can determine whether a Flash application
should be allowed to operate on DOM objects, for exam-
ple, through script injection. Speciﬁcally, when embedding
the Flash application, the web developer declares a prop-
erty named allowScriptAccess with one of the values: al-
ways(scripting allowed), sameOrigin(scripting allowed only
when the hosting page and Flash code are from same origin)
or never(scripting prohibited). Once scripting is allowed,
the injected code automatically acquires unlimited access
to DOM objects. Adobe also controls the interactions be-
tween diﬀerent SWFs according to Same Origin Policy [38].
SWF ﬁles and other ﬁles are grouped into sandboxes by
virtue of the domains they originate from. A Flash appli-
cation can directly access the resources within its sandbox
but needs mediation for any cross-domain access. This secu-
rity control, again, is black-and-white, which either grants
a Flash application and other SWF ﬁles it downloads full
access or completely denies their access. Such a treatment
turns out to be too coarse-grained to be useful for real-world
Flash serving websites. Many legitimate Flash applications
need script injection. Examples include CNN [5] that lets
Flash advertisements utilize JavaScript to enrich their vi-
sual eﬀects, and Yahoo [15] that allows such advertisements
to track user clicks and proﬁle through scripts. Overly re-
stricting Flash/DOM interactions can signiﬁcantly reduce
the utility of Flash and is often suggested against [17]. As
181a result, many websites are forced to give Flash code un-
limited access, which exposes valuable information assets on
the web client to the threat of malicious or vulnerable Flash
content.
Our approach. A practical solution to this problem is
by no means trivial. Modifying the security mechanism of
Adobe Flash player is not feasible, as the software is closed
source. Even if this can be done, deployment of a new mech-
anism requires changes to every client’s browser, a slow and
painful process. In this paper, we present an eﬀective and
convenient alternative. Our techniques allow Flash host-
ing sites to oﬀer immediate protection to their customers’
valuable web contents. This is achieved through an Inline
Reference Monitor (IRM) system, called FIRM, that em-
beds an access control mechanism entirely into web pages.
Through FIRM, the website designer can assign capability
tokens to diﬀerent Flash applications the site hosts. Each
token is associated with a set of security policies that spec-
ify an application’s privileges over web contents, including
DOM objects and other SWF ﬁles. Such a policy is enforced
by an IRM that wraps both ActionScript functions within
SWF ﬁles and DOM functions. As an example, consider
a Flash advertisement that needs to run a script to track
viewers’ clicks. Our approach ﬁrst analyzes the binary code
of the Flash, instruments it with a Flash wrapper and also
grants it a capability token. The new Flash code is served
within a web page that also includes a DOM wrapper and a
set of security policies. When a user is browsing the page,
the Flash wrapper intercepts the getURL call from the ad-
vertisement and works with the DOM wrapper to decide
whether to let the call proceed based upon the capability.
FIRM oﬀers ﬂexible and ﬁne-grained control over Flash /
DOM and Inter-Flash access. It can be completely embed-
ded into a web page by web developers, and therefore avoids
any browser-side changes, which makes its deployment in-
stant. Our technique is also reliable: the design of FIRM
prevents unauthorized dynamic contents, such as scripts and
SWF ﬁles, from stealing authorized parties’ capability to-
kens or modifying the IRM and its policy data. We also
built a tool for automatic analysis and instrumentation of
Flash code. We evaluated our approach on phpBB [11],
WordPress [14] and Drupal [6], 3 extremely popular web-
design systems, and 9 real-world Flash applications. Our
study shows that FIRM eﬀectively mediates Flash behav-
iors, incurs small overheads and is convenient to use.
Contributions. We summarize the contributions of the
paper as follows:
•Novel Flash mediation techniques. To the best of our knowl-
edge, FIRM is among the ﬁrst attempts to enforce inline me-
diation of Flash/DOM interactions. This is achieved through
a novel capability mechanism, which employs randomized,
unpredictable tokens to diﬀerentiate the access requests that
come directly or indirectly (through JavaScript) from the
Flash applications with diﬀerent privileges. Our mechanism
can also eﬀectively protect itself from malicious web con-
tents, and automatically instrument Flash applications and
web pages.
•Capability-based inlined mediation of JavaScripts. The be-
haviors of Flash applications cannot be eﬀectively mediated
without proper control of the scripts they spawn. Diﬀer-
ent from the prior approach [36] that uses the same set of
policies to control all scripts within a web page, FIRM can
enforce diﬀerent policies on diﬀerent scripts, according to
the privileges associated with their capability tokens. This
ﬁner-grained access control mechanism is enforced with the
collaborations between the DOM wrapper and the Flash
wrapper.
•Implementation and Evaluation. We implemented a proto-
type of FIRM and evaluated it on popular web applications
and real-world Flash. The outcomes of this study demon-
strate the eﬃcacy of our techniques.
Roadmap. The rest of the paper is organized as follows.
Section 2 introduces the attack techniques in Flash mal-
ware. Section 3 surveys the design of FIRM and the adver-
sary model. Section 4 elaborates the techniques for Flash
inline mediation. Section 5 documents our Flash analysis
and instrumentation techniques. Section 6 reports our ex-
perimental study. Section 7 discusses the limitations of our
techniques and future research. Section 8 compares our ap-
proach with prior work, and Section 9 concludes the paper.
2. FLASH THREATS
In this section, we brieﬂy review the threats FIRM is de-
signed to mitigate. These threats come from malicious or
vulnerable Flash applications.
Illegitimate operations on DOM objects. Through
Adobe Flash player, Flash code can directly access DOM
objects. Such access, if unmediated, could cause leak of sen-
sitive user data (e.g., cookie) as well as unexpected change of
browser behavior. A prominent example is the re-direction
attack [21]: a malicious Flash application can redirect the
user’s browser to a malicious website, where subsequent at-
tacks like drive-by download, phishing, etc. can happen.
Script injection. A Flash application can inject JavaScript
code into its hosting web page through ActionScript calls
such as getURL, which can be exploited to launch an XSS
attack. This threat has been widely reported [18, 8, 34].
An example in Figure 1 shows how it happens through vul-
nerable Flash code. Flash applications (particularly adver-
tisements) often use the variable clickTag to receive URLs
from its hosting page and redirect the user to these links.
This feature can be exploited by the attacker, who can cre-
ate a link that invokes the Flash code with clickTag involv-
ing JavaScript code. Once the victim clicks on that link, the
Flash injects the script into her web page, using the origin of
its hosting page. To eliminate such a threat, a website needs
to detect and ﬁx the ﬂaws in every SWF ﬁle it stores or links
to. This can introduce considerable overhead, particularly
for the websites such as Yahoo that host hundreds of thou-
sands of Flash advertisements from other sites. Moreover,
malicious scripts can also be injected by malicious Flash ap-
plications, which allow them to indirectly access the victim’s
data.
Figure 1: Vulnerable Flash with XSS ﬂaw
Other threats. Though less known, other attack avenues
do exist during Flash/DOM interactions and inter-Flash in-
teractions. For example, once a Flash application shares
a single function to another Flash, the Flash player auto-
matically exposes all its functions to the latter. As another
example, Flash can export function interfaces to its hosting
page, which can be invoked by any script in the page. This
channel can be used to bypass the security policy enforced
by the Flash player: consider that a Flash application is not
vulnerable.swf...var location = _root.clickTag;getURL(location, “_self”);...http://url/vulnerable.swf?clickTag=javascript:evilCodeJavaScript:EvilCode182allowed to be touched by another Flash but needs to share
its functions to the hosting page; the latter can then inject
scripts into the page to gain access to those functions.
Assumptions. Our approach protects the user’s valuable
web content, such as cookies, passwords and account num-
bers, from unauthorized access by malicious Flash code or
the vulnerable Flash exploited by the adversary. We as-
sume that the website hosting SWF ﬁles is not under the
control of the adversary and implements FIRM correctly.
Also, though FIRM can protect itself against malicious web
contents, it is not resilient to a compromised browser or
operating system. For example, a malware plug-in can cer-
tainly bypass the mediation of our IRM. Such a threat is
out of the scope of this work. Finally, FIRM is designed
to regulate Flash/DOM and inter-Flash interactions. Other
Flash-related attacks, like ﬁlling web surfer’s clipboard with
malicious hyperlinks [2], are not the focus of our approach
and left to our future research.
3. OVERVIEW
FIRM includes a Flash wrapper for mediating Flash ac-
tions and a DOM wrapper for controlling the activities of
the scripts. Both wrappers interact with a capability man-
ager that bootstraps the reference monitor with randomly
generated capability tokens, and maintains a policy base to
map these tokens to the security policies set by the web
designer. The wrappers and the capability manager consti-
tute the IRM part of FIRM. The other FIRM component is
the tool that automatically embeds the Flash wrapper into
a SWF ﬁle through analyzing and instrumenting its binary
code. Figure 2 illustrates this design.
3.1 Design
The website that uses FIRM ﬁrst embeds our IRM into the
web page that needs protection. Whenever the page is re-
quested by a web client, the site automatically parameterizes
it with a set of randomized capability tokens, which are as-
sociated with pre-determined security policies (Section 4.1).
These policies grant diﬀerent privileges to diﬀerent SWF
ﬁles, as determined by the web designer a priori. The token
of each Flash application is checked by the wrappers against
the policies to control the Flash’s access to the web contents
(Section 4.2). This idea can be explained with an exam-
ple in Figure 3, which describes a Flash advertisement with
FIRM instrumentation. In the example, FIRM permits the
Ad script to get the data necessary for counting a viewer’s
clicks, but denies its requests to read cookies, passwords and
other sensitive information. Our approach can also protect
the Flash code through mediating the access of scripts and
other SWF ﬁles to the call interfaces it exposes to its hosting
page (Section 4.2).
Figure 2: Overview.
To protect the IRM, our approach prohibits other scripts
to wrap DOM functions (Section 4.3). This is enforced
through regulating the methods (e.g., __defineGetter__,
__defineSetter__) necessary for performing such an oper-
ation. The IRM also forbids unauthorized parties to read or
Figure 3: An example demonstrates the design of FIRM.
write its code and the policy base, or access sensitive FIRM
data, such as capability tokens.
Though the DOM wrapper and the capability manager
can be manually built into a web page by the web devel-
oper, an automatic tool is necessary for instrumenting SWF
ﬁles with the Flash wrapper, as they are often developed by
third parties and can be updated frequently. FIRM therefore
provides a tool that automatically disassembles the binary
code of a SWF ﬁle, identiﬁes its access-related function calls
(e.g., getURL) and internal functions exposed to other do-
mains or JavaScript, and then wraps these functions with
mediation code (Section 5).
4.
INLINE MEDIATION
Inline Reference Monitor was proposed in [24] as a mecha-
nism to mediate access to Operating System resources. It is
built directly into an application’s code to control program
behaviors, and therefore does not need OS or hardware level
supports. Similarly, the IRM used in our research is embed-
ded in web contents, which avoids any changes to the client’s
browser. In this section, we elaborate our design and imple-
mentation of the IRM, which is composed of the capability
manager, the Flash and DOM wrappers, and show how these
components work together to mediate Flash behaviors and
safeguard their own integrity and data conﬁdentiality.
4.1 Capability
To mediate access to DOM and Flash functions, the IRM
needs to know the privilege that the caller of these functions
possesses. To this end, FIRM adopts a capability mecha-
nism that requires each caller to produce a capability token
to gain access. A capability [33] is a token that indicates
a set of access rights a subject (e.g., Flash, scripts) has on
objects (e.g., cookie, text item, functions). When the sub-
ject is about to access a protected object, this operation is
checked against the capability: it is allowed to proceed only
when the subject has the access right, as speciﬁed by a se-
curity policy associated with the capability. In FIRM, such
capability tokens are maintained by the capability manager,
which was implemented as a JavaScript program in our re-
search. Following we elaborate how the mechanism works.
Capability management. Every subject with access poli-
cies speciﬁed by the web designer is assigned a capabil-
ity token. An instrumented Flash application acquires its
token from the capability manager when it is initialized.
Speciﬁcally, the Flash exposes a callback function to the
JavaScript, through ExternalInterface.addCallback. The
function is called by the capability manager to parameter-
ize the Flash with its token and the related security policies,
and disabled by the IRM afterwards to prevent unauthorized
invocations. This treatment avoids hard-coding tokens into
these applications, a process that requires recompiling the
applications each time their hosting web page is requested
by a web client.
The capability token used in FIRM is a random string.
It is designed to be suﬃciently long (≥ 10 bytes) to de-
feat a brute-force attack in which the adversary tries to use
random guesses to produce a correct token. Each capabil-
FlashAnalyzerInstrumentFlashWrapperDOMWrapperDOMObjectsTokenControlIRMCapability ManagerPolicy BaseFlashWrapperDOMWrapperBlockedAllowedCookieFunctionDOMTouch CookieInvoke FunctionTokenToken183ity token is associated with a set of security policies that
specify a subject’s access rights to diﬀerent objects. The
capability manager organizes those tokens and their policies
into a policy base, which is stored in a local variable within
a function called Checker. Checker encapsulates the policy
base to mediate the access to its content. To retrieve poli-
cies, one has to call the function with a capability token.
The IRM also hides its own capability in local variables and
controls all the channels to read the code of Checker and
its other functions. This technique is elaborated in Sec-
tion 4.3. Another measure FIRM takes to prevent leaks of
tokens to unauthorized parties is prohibiting a SWF ﬁle to
share its capability with others. To this end, the mediation
code our Flash analyzer injects into the SWF utilizes ran-
domized, unpredictable names for the variables involved in