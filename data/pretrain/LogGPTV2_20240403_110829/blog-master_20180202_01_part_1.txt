## PostgreSQL 相似搜索设计与性能 - 地址、QA、POI等文本 毫秒级相似搜索实践     
### 作者                                                                       
digoal                                                                       
### 日期                                                     
2018-02-02                                                                     
### 标签                                                                       
PostgreSQL , 文本相似 , 并行相似查询 , merge sort , 合并排序 , append scan 并行 , 相似地址 , 相似问题 , 相似兴趣 , 相似搜索       
----                                   
## 背景        
在现实生活中，很多地方会用到相似搜索，例如    
1、打车，要去某个地方，我们输入的目的地可能和数据库里面存的并不完全一致。所以只能通过相似搜索来实现。    
2、搜索问题，同样的道理，我们搜的问题可能和存的问题不完全一致。只能通过相似搜索来匹配。    
3、搜索兴趣点，等。    
实际上PostgreSQL就可以支持相似搜索，包括图片、数组、文本等相似搜索。对于文本，可以使用pg_trgm插件来实现相似搜索。    
这是纯英文字符串的测试，100亿量级(每行32个随机英文字母+数组的组合)，模糊查询毫秒级别。    
[《PostgreSQL 百亿数据 秒级响应 正则及模糊查询》](../201603/20160302_01.md)      
相似查询使用同样的插件和索引。本文针对随机中文，相似搜索进行测试，看看PostgreSQL 单机性能如何？    
## 构建测试样本数据    
1、生成随机中文的函数    
```      
-- 生成随机汉字符串      
create or replace function gen_hanzi(int) returns text as $$      
declare      
  res text;      
begin      
  if $1 >=1 then      
    select string_agg(chr(19968+(random()*20901)::int), '') into res from generate_series(1,$1);      
    return res;      
  end if;      
  return null;      
end;      
$$ language plpgsql strict;      
```      
2、使用分区表来提高写入、查询性能    
如何建分区表，请参考：    
[《PostgreSQL 查询涉及分区表过多导致的性能问题 - 性能诊断与优化(大量BIND, spin lock, SLEEP进程)》](../201801/20180124_01.md)      
[《PostgreSQL 商用版本EPAS(阿里云ppas) - 分区表性能优化 (堪比pg_pathman)》](../201801/20180122_03.md)      
[《PostgreSQL 传统 hash 分区方法和性能》](../201711/20171122_02.md)      
[《PostgreSQL 10 内置分区 vs pg_pathman perf profiling》](../201710/20171015_01.md)      
[《PostgreSQL 10.0 preview 功能增强 - 内置分区表》](../201612/20161215_01.md)      
本文为了测试方便，未使用以上分区方法，请注意。    
3、建父表（为了加速导入，使用了unlogged table，生成请勿使用）    
```    
create unlogged table tbl(id int primary key, info text);    
alter table tbl set (parallel_workers =64);    
create extension pg_trgm;    
```    
4、建64个子表    
```    
do language plpgsql $$    
declare    
begin    
  for i in 0..63    
  loop    
    execute format('drop table if exists tbl%s ', i);    
    execute format('create unlogged table tbl%s (like tbl including all) inherits(tbl)', i);    
    -- 提前设置好表级并行度，方便后面做并行测试    
    execute format('alter table tbl%s set (parallel_workers =64)', i);    
  end loop;    
end;    
$$;    
```    
5、往分区中写入10亿条测试数据    
快速写入方法如下，使用dblink异步调用并行加载。    
```    
create or replace function conn(      
  name,   -- dblink名字      
  text    -- 连接串,URL      
) returns void as $$        
declare        
begin        
  perform dblink_connect($1, $2);       
  return;        
exception when others then        
  return;        
end;        
$$ language plpgsql strict;     
```    
64个分区，每行64个随机汉字，每个分区写入15625000行，总共插入10亿行。    
```    
create extension dblink;    
do language plpgsql $$    
declare    
begin    