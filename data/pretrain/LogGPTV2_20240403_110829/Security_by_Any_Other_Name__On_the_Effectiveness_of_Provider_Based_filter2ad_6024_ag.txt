Accept cert
(−VR,−VS)
Thus, LR and LS are the interoperability penalties, VR and VS
are the security penalties, and C is the cost of security, in out case
borne by Receiver only.
Sender strategy. From Sender’s point of view, let us say that Re-
ceiver plays strategy G with probability rG and B with probability
rB. Sender should choose strategy C over A if:
rG · 0 − rBLS > −rGVS − rBVS ⇒ VS > rBLS.
In other words, Sender will prefer to verify certiﬁcates if the ex-
pected loss from rejecting mail is less than the expected loss asso-
ciated with being vulnerable to a man-in-the-middle-attack. Sender
faces the basic unilateral security-functionality trade-off with se-
curity penalty VS and functionality penalty rBLS. If the former is
greater than the latter, Sender will chose the former. If the function-
ality penalty is greater than the security penalty, she will choose the
latter.
Receiver strategy. From the Receiver’s point of view, let the prob-
ability that Sender plays strategy C be sC and the probability that
Sender plays strategy A be sA. Receiver would prefer strategy G
over B if
−sCC + sA(−C − VR) > −sCLR − sAVR ⇒ sCLR > C.
In other words, Receiver will prefer to maintain a valid certiﬁcate
if the expected loss from not receiving mail is greater than the cost
of maintaining a certiﬁcate. Note that Receiver’s strategy does not
depend on VR, the expected loss associated with being vulnerable
to a man-in-the-middle attack. No matter how prevalent or severe
man-in-the-middle attacks might be, Receiver’s strategy depends
only on Sender’s expected behavior and the cost of maintaining a
certiﬁcate. Put another way, Receiver’s strategy does not depend on
security.
Our results (Sec. sec:analysis-cert-out-mta) show that among the
select providers sC  LS then Sender will always check certiﬁcates,
and, unless LR  LS), the game has one
equilibrium: GC.
On the other hand, if VS 
C. In other words, the senders together should together generate
more than C/LR of all (non-spam) mail. We suspect that C to be
much less than LR, so that the market share of providers involved in
the threat need not be very large. Certainly, the top three providers
that together represent over 60% of the Adobe user list are well-
positioned to effect such a change.
8. CONCLUSION
Modern email protocols provide means for achieving conﬁden-
tiality, authenticity, and integrity during message transfer without
any user involvement. TLS use with IMAP, POP, and SMTP pro-
vides message conﬁdentiality even in the presence of an active
man-in-the-middle adversary, while DKIM with DNSSEC ensures
461authenticity and integrity. These guarantees come at the cost of
trusting the email provider. While end-to-end mechanisms do not
require such trust, user adoption of PGP and S/MIME is poor. Provider-
deployed protocols considered in this paper provide a complemen-
tary path toward achieving some of the same security goals.
In this work we examined the use of these protocol by major
email providers and email generators. We found that TLS support
was common, however certiﬁcate veriﬁcation was virtually non-
existent, providing protection against a passive adversary only. SPF
and DKIM use was also common, however all but a handful of
providers used DNSSEC to protect the required DNS records. In
addition, few providers enforced SPF policies or rejected messages
with invalid DKIM signatures. More aggressive enforcement is re-
quired to protect against message forgery or active message tam-
pering.
Acknowledgments
We would like to thank our system administrators Cindy Moore and
Brian Kantor and are grateful for the feedback from the anonymous
reviewers. This work was supported in part by the National Science
Foundation grant CNS-1237264 and by generous research, opera-
tional and/or in-kind support from the UCSD Center for Networked
Systems (CNS).
REFERENCES
[1] Google encrypts data amid backlash against NSA spying. The
Washington Post, Sept. 2013.
[2] M. Adkins. The Current State of SMTP STARTTLS
Deployment.
https://www.facebook.com/notes/1453015901605223,
May 2014.
[3] Z. Durumeric, D. Adrian, A. Mirian, J. Kasten, E. Bursztein,
N. Lidzborski, K. Thomas, V. Eranti, M. Bailey, and J. A.
Halderman. Neither Snow Nor Rain Nor MITM . . . An
Empirical Analysis of Mail Delivery Security. In Proceedings
of the 2015 Internet Measurement Conference (IMC), 2015.
[4] B. Gellman and A. Soltani. NSA inﬁltrates links to Yahoo,
Google data centers worldwide, Snowden documents say. The
Washington Post, Oct. 2013.
[5] S. Goldberg. Why is it taking so long to secure Internet
routing? Communications of the ACM, 57(10):56–63, 2014.
[6] B. Taylor. Fighting phishing with eBay and PayPal.
http://gmailblog.blogspot.com/2008/07/fighting-
phishing-with-ebay-and-paypal.html, July 2008.
APPENDIX
This appendix provides additional information on the mail trans-
port protocols described in the paper and their security extensions.
SMTP
The standard Internet mail transfer protocol is the Simple Mail
Transfer Protocol (SMTP), standardized in 1982 by RFC 821. The
original SMTP provides little more than a uniform mechanism for
transferring messages between two hosts over a TCP connection. A
common SMTP interaction consists of a client identifying itself us-
ing the HELO command and then presenting a message for delivery
or forwarding. Only the sender and recipient are identiﬁed to the
server explicitly (via the MAIL FROM: and RCPT TO: commands);
the remainder of the message, including headers, are transferred as
an uninterpreted sequence of bytes. As a simple common language
between disparate mail systems, SMTP had no provisions for en-
suring message authenticity, integrity, or conﬁdentiality.
ESMTP. SMTP was updated in 1995 with the ability to extend the
protocol using extensions. This version of SMTP is called ESMTP
(RFC 1869, obsoleted by RFC 5321). An client indicates its support
for ESMTP by issuing the EHLO instead of HELO command at the
start of the session. If the server supports ESMTP, it responds with
a list of supported extensions. One such extension is STARTTLS.
STARTTLS allows a SMTP session to be secured with TLS, and is
the preferred mechanism of doing so.
SMTP with STARTTLS
The STARTTLS extension was introduced in 1999 in RFC 2487
(now obsoleted by RFC 3207), allowing a SMTP connection to be
secured using TLS. A server indicates support for the STARTTLS
extension by including the STARTTLS keyword in the list of sup-
ported options sent to a client in response to the EHLO command.
After issuing the STARTTLS command, a client can initiate a TLS
handshake, after which the remainder of the session is secured.
SMTPS
The STARTTLS mechanism is the preferred way to secure SMTP
sessions with TLS. It is also possible, however, to run the entire
session over TLS from the start, as with HTTPS, by initiating the
handshake immediately on connecting. We call this direct use in
contrast to STARTTLS. When TLS is used directly for SMTP, the
protocol is called SMTPS (less commonly, SSMTP). To avoid the
need for servers to auto-detect TLS use, port 465 was reserved for
this protocol. SMTPS has since been deprecated;however, many
mail providers still use SMTPS for mail submission.
Requiring TLS. Regarding servers requiring the use of the START-
TLS extension, RFC 3207 states:
A publicly-referenced SMTP server must not require use of the
STARTTLS extension in order to deliver mail locally. This rule prevents
the STARTTLS extension from damaging the interoperability of the
Internet’s SMTP infrastructure. A publicly-referenced SMTP server is a
SMTP server which runs on port 25 of an Internet host listed in the MX
record (or A record if a MX record is not present) for the domain name
on the right hand side of an Internet mail address. (RFC 3207, Sec. 4)
The standard places a similar requirement on outgoing MTAs. In
its discussion of man-in-the-middle attacks, however, RFC 3207
appears to back away from a strict reading of the interoperability
requirement:
In order to defend against such attacks both clients and servers must be
able to be conﬁgured to require successful TLS negotiation of an
appropriate cipher suite for selected hosts before messages can be
successfully transferred. The additional option of using TLS when
possible should also be provided. An implementation may provide the
ability to record that TLS was used in communicating with a given peer
and generating a warning if it is not used in a later session. (ibid. Sec. 6)
Requiring successful handshake. While a “publicly-referenced”
server may not require a client to use the STARTTLS extension,
once a client initiates a handshake after a successful STARTTLS
command, both client and server may refuse to proceed:
If the SMTP client decides that the level of authentication or privacy is
not high enough for it to continue, it should issue an SMTP QUIT
command immediately after the TLS negotiation is complete. If the
SMTP server decides that the level of authentication or privacy is not
high enough for it to continue, it should reply to every SMTP command
from the client (other than a QUIT command) with the 554 reply code
(with a possible text string such as “Command refused due to lack of
security”). (ibid. Sec. 4.1)
What requirements clients and servers should enforce are a “local
matter,” according to the standard, however, two “general rules for
the decisions” are offered:
462(1) A SMTP client would probably only want to authenticate a SMTP
server whose server certiﬁcate has a domain name that is the domain
name that the client thought it was connecting to.
(2) A publicly-referenced SMTP server would probably want to accept
any veriﬁable certiﬁcate from a SMTP client, and would possibly want
to put distinguishing information about the certiﬁcate in the Received
header of messages that were relayed or submitted from the
client. (ibid. Sec. 4.1)
In Section 5.3 we test whether outgoing and incoming MTAs fol-
low these recommendations. In it’s discussion of security consider-
ations, RFC 3207 warns:
Both the SMTP client and server must check the result of the TLS
negotiation to see whether an acceptable degree of authentication and
privacy was achieved. Ignoring this step completely invalidates using
TLS for security. The decision about whether acceptable authentication
or privacy was achieved is made locally, is implementation-dependent,
and is beyond the scope of this document. (ibid. Sec. 6)
Determining the degree of “authentication and privacy” achieved
by TLS use is the main subject of this work. Section 5.3.2 shows
few servers check the result of TLS negotiation.
POP3 and IMAP
The Post Ofﬁce Protocol (POP), ﬁrst speciﬁed in RFC 918, and
the Internet Message Access Protocol (IMAP), ﬁrst speciﬁed in
RFC 1064, both allow a client to retrieve mail stored on a server
(hop (e) in Figure 1). POP version 3 is often also called POP3.
From our point of view, both POP and IMAP provide the same
service, namely message transfer along the last hop between MDA
and MUA, identiﬁed as (e) in Figure 1. As with other hops, a pas-
sive attacker may eavesdrop on the communications between MDA
and MUA. Both end-to-end and transport encryption protect against
such an attack. An active attacker may also attempt to retrieve a tar-
get user’s mail by impersonating the user. Protecting against such
impersonation means that the MDA must be able to ensure that
the MUA is acting on the legitimate user’s behalf. Both POP3 and
IMAP have traditionally achieved this using plain-text passwords.
Although other mechanisms are available, passwords remain the
main means of authentication today. Without transport encryption,
a passive attacker can recover a user’s password and use it to re-
trieve messages directly. Note that end-to-end encryption does not
protect against such an attack; the attacker could still retrieve a
user’s encrypted mail, although the content of each message would
be still be protected. An active attacker can also carry out a tradi-
tional man-in-the-middle attack. If a MUA does not properly au-
thenticate a server, an attacker can recover the user’s password and
intercept messages retrieved by a user.
IMAP and POP with TLS
RFC 2595 introduced the STARTTLS extension to POP and IMAP
using the extension mechanisms available in newer versions of each
protocol. As in SMTP, the STARTTLS is used by the client to en-
able TLS. After a successful response, the client initiates the TLS
handshake. RFC 2595 is more emphatic than RFC 3207 about cer-
tiﬁcate checking:
During the TLS negotiation, the client must check its understanding of
the server hostname against the server’s identity as presented in the
server Certiﬁcate message, in order to prevent man-in-the-middle
attacks. (RFC 2595, Sec. 2.4)
RFC 2595 also unambiguously describes the identity checking pro-
cess. Like RFC 3207, RFC 2595 warns:
Both the client and server must check the result of the STARTTLS
command and subsequent TLS negotiation to see whether acceptable
authentication or privacy was achieved. Ignoring this step completely
invalidates using TLS for security. The decision about whether
acceptable authentication or privacy was achieved is made locally, is
implementation-dependent, and is beyond the scope of this
document. (ibid. Sec. 2.5)
IMAPS and POP3S. As with SMTP and SMTPS, before the intro-
duction of the STARTTLS extension, the common means of secur-
ing IMAP and POP with TLS was to start the TLS session imme-
diately. These protocols were called IMAPS and POP3S, and use
TCP ports 993 and 995. Both are still used by email providers.
DKIM
DKIM (RFC 4861, updated by RFC 6387) introduces provider-
generated message signatures intended to prevent forgery and tam-
pering with email from a provider. A DKIM signature, covering
the message body and a subset of the headers, is appended as a
“DKIM-Signature” header to the message. In addition to the cryp-
tographic signature, a DKIM signature also contains a selector iden-
tifying the key used to generate the signature. The corresponding
public key is published in a DNS TXT record of
selector.__domainkey.example.net
where selector is the selector token provided with the signature.
DKIM thus relies on DNS for key distribution. It is also worth not-
ing that DKIM does not provide a means of advertising a signing
policy. Thus, a message without a signature may be the result of the
sender not using DKIM or an attacker stripping the signature.
SPF
SPF (RFC 4408, updated by RFC 7208) introduces a means for a
sender to publish a policy identifying the network hosts which may
originate mail from the sender. The policy is disseminated via a
DNS TXT record for the domain. Like DKIM, SPF thus relies on the
integrity of DNS. The SPF standard states that receivers “should”
reject the message immediately during the SMTP session and com-
municate this explicitly to the sending MTA. If the message is not
rejected in this manner by the incoming MTA, the MTA should
add a “Received-SPF” or “Authentication-Results” header
to record SPF failure. We know of no mail readers that interpret
this header, however, built-in spam ﬁlters may use this as a signal.
ADSP and DMARC
From a security point of view, a major limitation of DKIM is that
the absence of a signature is ambiguous: either the sender does not
implement DKIM or an attacker is forging a message or tampering
with a message. ADSP (RFC 5617) and DMARC (RFC 7489), the
former now historical, provide a way for a sender to indicate that
a DKIM signature should be expected. Both ADSP and DMARC
publish this information via DNS TXT records in a special subdo-
main of the domain in question. As with the DNS-based mecha-
nisms above, record integrity in the presence of an active network
attacker requires use of DNSSEC.
DNSSEC
DNSSEC (RFC 2535 updated by RFC 4034 and others) provides
a mechanism for authenticating DNS records using digital signa-
tures. DNSSEC also introduces a hierarchical public key infras-
tructure mirroring the DNS hierarchy. The root key is used to sign
each TLD, each TLD signs the next level, and so on. Verifying
a DNSSEC signatures thus requires knowing the root public key
ﬁngerprint/digest. In addition to authenticating records, DNSSEC
also authenticates negative results, so that an active attacker cannot
convince a victim that a DNS record does not exist by forging a
negative reply or blocking the legitimate reply.
463