# Certificate Acceptance and Security Penalties

The interoperability penalties are denoted as \( LR \) and \( LS \), while the security penalties are \( VR \) and \( VS \). The cost of security, \( C \), is borne solely by the Receiver.

## Sender Strategy
From the Sender’s perspective, assume the Receiver plays strategy \( G \) with probability \( rG \) and strategy \( B \) with probability \( rB \). The Sender should choose strategy \( C \) over strategy \( A \) if:

\[ rG \cdot 0 - rB \cdot LS > -rG \cdot VS - rB \cdot VS \]

This simplifies to:

\[ VS > rB \cdot LS \]

In other words, the Sender will prefer to verify certificates if the expected loss from rejecting mail is less than the expected loss associated with being vulnerable to a man-in-the-middle (MITM) attack. The Sender faces a basic unilateral security-functionality trade-off, where the security penalty is \( VS \) and the functionality penalty is \( rB \cdot LS \). If the security penalty is greater than the functionality penalty, the Sender will choose the former. Conversely, if the functionality penalty is greater, the Sender will choose the latter.

## Receiver Strategy
From the Receiver’s perspective, let the probability that the Sender plays strategy \( C \) be \( sC \) and the probability that the Sender plays strategy \( A \) be \( sA \). The Receiver would prefer strategy \( G \) over strategy \( B \) if:

\[ -sC \cdot C + sA \cdot (-C - VR) > -sC \cdot LR - sA \cdot VR \]

This simplifies to:

\[ sC \cdot LR > C \]

In other words, the Receiver will prefer to maintain a valid certificate if the expected loss from not receiving mail is greater than the cost of maintaining the certificate. Note that the Receiver’s strategy does not depend on \( VR \), the expected loss associated with being vulnerable to a MITM attack. Regardless of the prevalence or severity of MITM attacks, the Receiver’s strategy depends only on the Sender’s expected behavior and the cost of maintaining a certificate. In essence, the Receiver’s strategy is independent of security considerations.

## Equilibrium Analysis
Our results show that among the selected providers, if \( VS > LS \), the Sender will always check certificates. Unless \( LR < LS \), the game has one equilibrium: \( GC \).

If \( VS < C \), then the senders collectively need to generate more than \( \frac{C}{LR} \) of all (non-spam) mail. We suspect that \( C \) is much less than \( LR \), so the market share of providers involved in the threat need not be very large. The top three providers, which together represent over 60% of the Adobe user list, are well-positioned to effect such a change.

## Conclusion
Modern email protocols provide mechanisms for achieving confidentiality, authenticity, and integrity during message transfer without any user involvement. TLS use with IMAP, POP, and SMTP provides message confidentiality even in the presence of an active MITM adversary, while DKIM with DNSSEC ensures authenticity and integrity. These guarantees come at the cost of trusting the email provider. While end-to-end mechanisms like PGP and S/MIME do not require such trust, their user adoption is poor. Provider-deployed protocols offer a complementary path toward achieving some of the same security goals.

In this work, we examined the use of these protocols by major email providers and email generators. We found that TLS support was common, but certificate verification was virtually non-existent, providing protection against passive adversaries only. SPF and DKIM use was also common, but few providers used DNSSEC to protect the required DNS records. Additionally, few providers enforced SPF policies or rejected messages with invalid DKIM signatures. More aggressive enforcement is required to protect against message forgery or active message tampering.

## Acknowledgments
We would like to thank our system administrators Cindy Moore and Brian Kantor and are grateful for the feedback from the anonymous reviewers. This work was supported in part by the National Science Foundation grant CNS-1237264 and by generous research, operational, and/or in-kind support from the UCSD Center for Networked Systems (CNS).

## References
[1] Google encrypts data amid backlash against NSA spying. The Washington Post, Sept. 2013.
[2] M. Adkins. The Current State of SMTP STARTTLS Deployment. https://www.facebook.com/notes/1453015901605223, May 2014.
[3] Z. Durumeric, D. Adrian, A. Mirian, J. Kasten, E. Bursztein, N. Lidzborski, K. Thomas, V. Eranti, M. Bailey, and J. A. Halderman. Neither Snow Nor Rain Nor MITM . . . An Empirical Analysis of Mail Delivery Security. In Proceedings of the 2015 Internet Measurement Conference (IMC), 2015.
[4] B. Gellman and A. Soltani. NSA infiltrates links to Yahoo, Google data centers worldwide, Snowden documents say. The Washington Post, Oct. 2013.
[5] S. Goldberg. Why is it taking so long to secure Internet routing? Communications of the ACM, 57(10):56–63, 2014.
[6] B. Taylor. Fighting phishing with eBay and PayPal. http://gmailblog.blogspot.com/2008/07/fighting-phishing-with-ebay-and-paypal.html, July 2008.

## Appendix
### Mail Transport Protocols and Their Security Extensions

#### SMTP
The standard Internet mail transfer protocol is the Simple Mail Transfer Protocol (SMTP), standardized in 1982 by RFC 821. The original SMTP provides a uniform mechanism for transferring messages between two hosts over a TCP connection. A common SMTP interaction consists of a client identifying itself using the HELO command and then presenting a message for delivery or forwarding. Only the sender and recipient are identified to the server explicitly (via the MAIL FROM: and RCPT TO: commands); the remainder of the message, including headers, are transferred as an uninterpreted sequence of bytes. As a simple common language between disparate mail systems, SMTP had no provisions for ensuring message authenticity, integrity, or confidentiality.

#### ESMTP
SMTP was updated in 1995 with the ability to extend the protocol using extensions. This version of SMTP is called ESMTP (RFC 1869, obsoleted by RFC 5321). A client indicates its support for ESMTP by issuing the EHLO instead of HELO command at the start of the session. If the server supports ESMTP, it responds with a list of supported extensions. One such extension is STARTTLS, which allows a SMTP session to be secured with TLS and is the preferred mechanism for doing so.

#### SMTP with STARTTLS
The STARTTLS extension was introduced in 1999 in RFC 2487 (now obsoleted by RFC 3207), allowing a SMTP connection to be secured using TLS. A server indicates support for the STARTTLS extension by including the STARTTLS keyword in the list of supported options sent to a client in response to the EHLO command. After issuing the STARTTLS command, a client can initiate a TLS handshake, after which the remainder of the session is secured.

#### SMTPS
The STARTTLS mechanism is the preferred way to secure SMTP sessions with TLS. It is also possible to run the entire session over TLS from the start, similar to HTTPS, by initiating the handshake immediately on connecting. This direct use is called SMTPS (less commonly, SSMTP). Port 465 was reserved for this protocol, although SMTPS has since been deprecated; many mail providers still use SMTPS for mail submission.

#### Requiring TLS
Regarding servers requiring the use of the STARTTLS extension, RFC 3207 states:
"A publicly-referenced SMTP server must not require use of the STARTTLS extension in order to deliver mail locally. This rule prevents the STARTTLS extension from damaging the interoperability of the Internet’s SMTP infrastructure."

The standard places a similar requirement on outgoing MTAs. However, RFC 3207 also suggests that clients and servers can be configured to require successful TLS negotiation for selected hosts before messages can be transferred. Once a client initiates a handshake after a successful STARTTLS command, both client and server may refuse to proceed if the level of authentication or privacy is not high enough.

#### POP3 and IMAP
The Post Office Protocol (POP), first specified in RFC 918, and the Internet Message Access Protocol (IMAP), first specified in RFC 1064, both allow a client to retrieve mail stored on a server. Both POP and IMAP provide the same service, namely message transfer along the last hop between MDA and MUA. A passive attacker may eavesdrop on the communications between MDA and MUA. Both end-to-end and transport encryption protect against such an attack. An active attacker may also attempt to retrieve a target user’s mail by impersonating the user. Protecting against such impersonation means that the MDA must ensure that the MUA is acting on the legitimate user’s behalf. Both POP3 and IMAP traditionally use plain-text passwords for authentication, although other mechanisms are available.

#### IMAP and POP with TLS
RFC 2595 introduced the STARTTLS extension to POP and IMAP using the extension mechanisms available in newer versions of each protocol. As in SMTP, the STARTTLS is used by the client to enable TLS. After a successful response, the client initiates the TLS handshake. RFC 2595 emphasizes the importance of certificate checking during the TLS negotiation to prevent man-in-the-middle attacks.

#### DKIM
DKIM (RFC 4861, updated by RFC 6387) introduces provider-generated message signatures intended to prevent forgery and tampering with email from a provider. A DKIM signature, covering the message body and a subset of the headers, is appended as a "DKIM-Signature" header to the message. The corresponding public key is published in a DNS TXT record. DKIM relies on DNS for key distribution and does not provide a means of advertising a signing policy.

#### SPF
SPF (RFC 4408, updated by RFC 7208) introduces a means for a sender to publish a policy identifying the network hosts which may originate mail from the sender. The policy is disseminated via a DNS TXT record for the domain. Receivers should reject the message immediately during the SMTP session and communicate this explicitly to the sending MTA. If the message is not rejected, the MTA should add a "Received-SPF" or "Authentication-Results" header to record SPF failure.

#### ADSP and DMARC
ADSP (RFC 5617) and DMARC (RFC 7489) provide a way for a sender to indicate that a DKIM signature should be expected. Both ADSP and DMARC publish this information via DNS TXT records in a special subdomain of the domain in question. Record integrity in the presence of an active network attacker requires the use of DNSSEC.

#### DNSSEC
DNSSEC (RFC 2535, updated by RFC 4034 and others) provides a mechanism for authenticating DNS records using digital signatures. DNSSEC also introduces a hierarchical public key infrastructure mirroring the DNS hierarchy. Verifying a DNSSEC signature requires knowing the root public key fingerprint/digest. In addition to authenticating records, DNSSEC also authenticates negative results, so that an active attacker cannot convince a victim that a DNS record does not exist by forging a negative reply or blocking the legitimate reply.