title:A Study of User-Friendly Hash Comparison Schemes
author:Hsu-Chun Hsiao and
Yue-Hsun Lin and
Ahren Studer and
Cassandra Studer and
King-Hang Wang and
Hiroaki Kikuchi and
Adrian Perrig and
Hung-Min Sun and
Bo-Yin Yang
See discussions, stats, and author profiles for this publication at: https://www.researchgate.net/publication/221046400
A Study of User-Friendly Hash Comparison Schemes
Conference Paper · December 2009
DOI: 10.1109/ACSAC.2009.20 · Source: DBLP
CITATIONS
33
9 authors, including:
Yue-Hsun Lin
27 PUBLICATIONS   662 CITATIONS   
SEE PROFILE
Hiroaki Kikuchi
Meiji University
176 PUBLICATIONS   1,082 CITATIONS   
SEE PROFILE
Some of the authors of this publication are also working on these related projects:
High-Speed High-Security Signatures View project
Malware View project
READS
107
Feng Wang
Nanjing Agricultural University
30 PUBLICATIONS   843 CITATIONS   
SEE PROFILE
Hung-Min Sun
National Tsing Hua University
216 PUBLICATIONS   4,666 CITATIONS   
SEE PROFILE
All content following this page was uploaded by Hung-Min Sun on 04 June 2014.
The user has requested enhancement of the downloaded file.
A Study of User-Friendly Hash Comparison Schemes
Hsu-Chun Hsiao
∗
∗
, Yue-Hsun Lin†, Ahren Studer
∗
Hiroaki Kikuchi‡, Adrian Perrig
∗
∗
, Cassandra Studer
, King-Hang Wang†
, Hung-Min Sun†, and Bo-Yin Yang§
Carnegie Mellon University, USA
†National Tsing Hua University, Taiwan
‡Tokai University, Japan
§Academia Sinica, Taiwan
Abstract—Several security protocols require a human to
compare two hash values to ensure successful completion.
When the hash values are represented as long sequences of
numbers, humans may make a mistake or require signiﬁcant
time and patience to accurately compare the hash values. To
improve usability during comparison, a number of researchers
have proposed various hash representations that use words,
sentences, or images rather than numbers. This is the ﬁrst
work to perform a comparative study of these hash comparison
schemes to determine which scheme allows the fastest and most
accurate comparison. To evaluate the schemes, we performed
an online user study with more than 400 participants. Our
ﬁndings indicate that only a small number of schemes allow
quick and accurate comparison across a wide range of subjects
from varying backgrounds.
Keywords-Security; Human factors
I. INTRODUCTION
Users often want secure communication while lacking any
prior association. Device pairing, group key exchange/creat-
ion, and communication with remote systems (e.g., SSH or
websites using self-signed certiﬁcates with HTTPS) are a
few example scenarios. Without a PKI or other trusted third
party available, a range of protocols are used to exchange
and verify public keys or securely compute a shared key [1]–
[10]. However, to ensure that a malicious entity has not
compromised the key(s), i.e., performed a man-in-the-middle
attack or intercepted a shared key, many protocols require
the user(s) to verify that the different devices received the
same messages during the protocol. Rather than comparing
potentially kilobytes of data, users compare a hash or a
representation of the hash of the data. Most works assume
that users can perform this comparison accurately and base
security guarantees on the length of the hash output or
the hash representation. However, users make errors when
performing such comparisons [11]. An error during this
comparison renders the underlying protocol insecure.
Given humans’ inability to compare long sequences of
numbers accurately, researchers have proposed a number of
different hash representations that (hopefully) improve us-
ability. Rather than comparing numbers, schemes allow users
to compare words [4], sentences [6], or images [3], [7], [12].
In this work, we also propose schemes where users compare
Chinese, Japanese, or Korean characters, which may provide
improved usability depending on a user’s background. Each
of these comparison schemes has strengths and weaknesses
with respect to human speed and accuracy during compar-
ison, quantiﬁable entropy (and thus probability of unde-
tected attacks when users make correct comparisons), and
computation overhead. The latter properties are quantiﬁed
and well studied in previous works which allow protocol
designers to select a hash comparison scheme that provides
strong security with limited computation. However, no study
has examined which approach provides the best accuracy—
ensuring secure communication—with the least amount of
comparison time—ensuring reduced user annoyance. The
goal of this work is to conduct a user study to determine
what hash comparison scheme provides the best accuracy
and shortest comparison time for various users with different
abilities. Based on these results, we can make an informed
decision about which hash comparison scheme provides the
best balance across all properties.
II. RELATED WORK ON HASH COMPARISON
Researchers have proposed ASCII [13]1, text [4], [6], or
visual [3], [7], [12] representations of hash values. ASCII
(or Hexadecimal) is natural for expressing information on
computer systems but difﬁcult for humans to quickly and
accurately compare [11]. To increase usability,
the text-
based schemes generate ASCII representations with human
recognizable structure (i.e., English words or sentences). The
visual-based schemes convert hashes into images, in which
humans can easily detect the differences. Fig. 1(a) to 1(i)
show examples of each hash representation scheme we study
in this work.
Hexadecimal digits have long been used for hash com-
parison because truncating a high entropy hash to a short
sequence of digits (0-9) and letters (A-F) is computationally
efﬁcient. However, humans trying to quickly compare digits
often make mistakes (e.g., confuse an 8 for a 0) [11]. Base32
utilizes a subset of digits (‘2’ to ‘7’) and capital letters (‘A’
1Recently OpenSSH 5.1 released an experimental component called
ASCII visualisation, which “render SSH host keys in a visual form that
is amenable to easy recall and rejection of changed host keys” [10]. Given
these representations are meant to be remembered, rather than compared
side-by-side, we do not consider this scheme in our study.
to ‘Z’). Hence, Base32 avoids confusion of similar-looking
hexadecimal digits and increases the amount of entropy (5
bits per symbol versus 4 bits per hexadecimal digit) [13].
However, hexadecimal digits and Base 32 represent hashes
as a sequence of unrelated units, which one would think,
hinders humans from quickly reading and comparing the
values.
The Unmanaged Internet Architecture (UIA) system rep-
resents hashes with a sequence of English words like
“meals-abut-yuck”, in which each word (unit) is selected
from a ﬁxed size dictionary [4]. With a larger dictionary,
UIA can encode hashes with fewer words. However, a large
dictionary often has to contain similar words, such as “clam”
and “calm”, which are difﬁcult to quickly distinguish.
Researchers consider graphic-based representation a
promising alternative for hash comparison because humans
are good at quickly detecting differences in images. Perrig
et al. [12] propose Random Art to visually represent hashes.
Nevertheless, generating Random Art
is computationally
expensive (around 10 seconds to visualize a 160-bit hash
on a handhold device) because each pixel in a Random
Art image is determined by evaluating a complex arith-
metic expression. Moreover, the resulting image contains an
unknown amount of entropy, which may weaken security
arguments in protocols which leverage Random Art [2].
Ellison et al. [3] propose Flag, a visual hash representa-
tion consisting of four colored strips. With 2n possible colors
in each strip, Flag contains 4n bits of entropy. However, Flag
can only contain limited entropy because humans can have
difﬁculty distinguishing minor variations in colors. Flag also
lacks a visual cue to help users quickly determine the proper
orientation when comparing images across mobile devices
which may be rotated during comparison. T-Flag [7], which
consists of 8 blocks of 8 possible colorblind proof colors
with an embedded visual cue, contains 24 bits of entropy.
However, Flag and T-Flag mainly express hashes by colors,
rather than shapes which can encode a large amount of
entropy (e.g., as Random Art does).
III. PROPOSED HASH COMPARISON SCHEMES
In addition to studying previously proposed hash com-
parison schemes, we propose and study four new schemes:
Flag Extension and three Asian-character-based schemes,
i.e., Chinese characters, Japanese characters, and Korean
characters, as shown in Fig. 1(f)-1(i).
The Flag Extension aims to improve T-Flag by reducing
the number of blocks while adding shapes on top of each
block. A Flag Extension image contains 4 colored blocks
(two rows and two columns). Each block has 8 possible
colors (using the same colorblind proof palette as in T-Flag)
and 8 possible of shapes: ‘#’,‘(cid:2)’,‘I’,‘(cid:2)’,‘×’, ‘∨’, ‘(cid:3)’, and
no shape.
(a) Base32
(b) English words
(c) Random Art
(d) Flag
(e) T-Flag
(f) Flag Extension
(g) Chinese characters
(h) Japanese characters
(i) Korean characters
Figure 1. Example representations generated by the different schemes.
Chinese characters, Japanese characters, and Korean char-
acters contain higher entropy per character compared to
ASCII, and we hypothesize that people who recognize these
characters are able to quickly compare characters. These
schemes can be used to pair two very simple devices without
full displays, e.g., LED displays designed to show single-line
texts, because they only require a terminal-like non-color
display with the supporting codecs (e.g., Unicode), which
are often available on commodity devices.
Our Chinese characters scheme contains 9810 commonly
used traditional and simpliﬁed characters from International
Ideographs Core (IICORE) [14]. This is only a subset
of the CJK Uniﬁed Ideograph Block (which itself covers
20,000 characters), reduced to ﬁt in memory-limited devices
like PDAs and mobile phones. In the Japanese characters
scheme, we use Hiragana, the Japanese phonetic alphabet,
which contains roughly 6 bits of entropy per unit. Our Ko-
rean characters scheme uses Hangul2 (the Korean character
set), which contains roughly 13 bits of entropy per unit.
IV. STUDY DESIGN
In this study, we examine the performance of each hash
comparison scheme with respect to accuracy rate and re-
sponse time. We are also interested in knowing if participant
recruitment method, gender, age, and/or language ability
affects the performance. To collect such data, we built an
online survey where participants can conduct a series of hash
2A Hangul character consists of one of 19 initial jamo, one of 21
medial jamo combinations, and optionally one of 27 concluding jamo
combinations. To generate a unique Hangul character, we select a jamo,
a medial jamo, and/or a concluding jamo, which results in a cardinality of
19×21×28 = 11172. However, many of the combinations are meaningless.
comparisons and submit their background information. To
recruit participants we advertised on an online service and
sent emails to university classes in the US, Japan, Korea,
and Taiwan.
In this section, we ﬁrst present our design goals and a
set of questions to be answered by this study. We then
explain how to generate hash representations and specify
the sampling space for a fair comparison (e.g., similar
amount of entropy) between schemes. Also, we describe
the procedure of our online survey. Finally, we summarize
participant demographics, with details on how we recruited
participants and the gender, age, and language ability, of all
436 participants.
Particularly, we study 9 hash comparison schemes:
Base32, English words, Random Art, Flag, T-Flag, Flag Ex-
tension, Chinese characters, Japanese characters, and Korean
characters. We do not consider hexadecimal digits because
that scheme is similar to Base32 and known to be error-
prone.
A. Design Goals
This study aims to answer the following questions:
• Does the participant recruitment method impact accu-
racy or comparison time?
• Does age or gender impact accuracy or comparison
time?
• Does knowledge of a language impact accuracy or
comparison time?
• What scheme(s) provide the highest accuracy?
• What scheme(s) provide the quickest response time?
We consider the problem of comparing “easy” or “hard”
pairs of hash representations for each scheme. An easy
pair consists of two representations that are either identical
or apparently different. A hard pair, or similar pair,
consists of two representations which are designed to be
similar (but with subtle differences). Ideally, the probability
of encountering a hard pair should be much lower than
the probability of encountering an easy pair. In practice,
however, the probabilities depend on the implementation of
a hash comparison scheme and also on how humans perceive
images. Hence, we separate the analysis of easy pairs and
hard pairs. Easy pairs represent a baseline performance for
each scheme while the hard pairs represent a worst case
scenario.
B. Designing Comparison Pairs
To achieve a fair comparison, ideally each hash repre-
sentation scheme should contain the same amount of infor-
mation (entropy), because it is more difﬁcult to distinguish
between two slightly different representations with higher
entropy. However, some schemes only allow the adjustment
of the entropy in ﬁxed intervals. For example, a Base 32
character contains 5 bits of information, so Base32 contains
5n bits when used with n characters. Without a way to have
equal entropy, while preserving each scheme’s properties, we
design each scheme to carry 22 to 28 bits of information.
Table I summarizes the amount of entropy in each hash
representation in our study.
In the remainder of this subsection, we describe the
sampling space and derive the entropy of each hash compar-
ison scheme. We also explain the strategy to generate hard
pairs,
i.e., select similar-but-distinct representations from
each hash representation’s sampling space.
Base32. A Base32 item consists of 5 characters, with 32
possible values for each character, for a total of 25 bits of
entropy. We create a similar pair by either of the following
two methods: (1) creating another sequence by swapping two
adjacent characters in the original sequence, e.g., VILXX
and VLIXX; (2) creating another sequence by replacing a
character with a very similar character, e.g., (5 ↔ S), (O
↔ Q), (2 ↔ Z). For example, PCSRA and PC5RA.
English words. The English words scheme, which con-
sists of three words selected from a 512-word dictionary,
provides 27 bits of entropy. We construct a similar pair
by replacing one of the three words with a similar word,
which is generated by (1) transposing two adjacent letters
in a word to morph the word into another word (e.g., ‘blub’
and ‘bulb)’; (2) selecting a word which differs by only one
letter (e.g., ‘moons’ and ‘moans’). ‘house-moons-food’
and ‘house-moans-food’ is one example of a hard pair of
English words.
Random Art. The Random art image generator [12] takes
any length of input and processes it with the SHA-1 hash.
Theoretically speaking, it has at most 160 bits of entropy.
However, there is no guarantee that Random Art is collision-
resilient. Our analysis shows that with 91.4% probability a
Random Art image contains 19.71 to 23.71 bits of entropy
(see Appendix A for details). We use the PerceptualDiff
tool [15] to measure the perceptual differences between
two random art images. After generating 2000 Random Art
images, we selected the ﬁve pairs with the least perceptual
difference as the hard/similar pairs.
Flag. We modify Flag to output 24 bits of entropy (6
bits in each of the 4 color strips), and have a visual cue
to help users determine the proper orientation of mobile
devices during image comparison. Without a visual cue, an
image with red-blue-green-yellow strips looks the same as
another image with yellow-green-blue-red strips rotated by
180 degrees. We use 64 colors with each RGB intensity
assigned one of four uniformly selected values (e.g., with
intensities ranging from 0-255 we would use 0, 85, 170,
and 255). To create a similar image, we copy an image and
increase (or decrease) the intensity of one color of one strip
by one level.
T-Flag. T-Flag gives 24 bits of entropy (3 bits in each
of the 8 colored blocks). Each block is assigned a color
out of 8 red-green colorblind proof colors, i.e., Black, Gray,
White, Yellow, Light Pink, Red, Blue, and Brown. To create
a similar image, we copy an image and swap the colors of
two adjacent blocks.
Flag Extension. A Flag Extension image contains 24 bits
of entropy, where each of the 4 blocks contributes 6 bits (3
bits from color and 3 bits from shape). We generate a similar
image by swapping the shapes or colors of two adjacent
blocks.
Chinese characters. To represent a hash by Chinese
characters,
two characters are selected from a set of
9810 characters. Hence, a Chinese representation contains
(9810) = 26.52 bits of entropy. To create a similar
2log2
representation, we replace one of the two characters by a
character that differs by one or two strokes, or by their
‘我’ ↔ ‘找’ or ‘甲’ ↔ ‘申’ are
radical.3 For example,
only different by one or two strokes, and ‘游’ ↔ ‘游’ or
‘获’ ↔ ‘获’ are different by one radical.
Japanese characters. The Japanese character scheme is
(70) = 24.52 bits
composed of four Hiragana and has 4log2
of entropy. A similar pair is generated by modifying a
dakuten or handakuten (the upper-right quotation mark or
(e.g., ‘き’ ↔ ‘ぎ’),
circle) in one of the four characters
or by selecting two very similar Hiragana characters (e.g.,
‘ぬ’ ↔ ‘め’ or ‘は’ ↔ ‘ほ’).
Korean characters. The Korean character scheme, rep-
(11172) = 26.90 bits
resented by two Hangul, gives 2log2
entropy. To generate a similar pair, we replace one jamo with
a very similar jamo,
(e.g., ‘달’ ↔ ‘말’or ‘현’ ↔ ‘한’).
C. Online Study
We performed an online user study to compare the ac-
curacy and time needed for each of the hash comparison
schemes. When participants visited our website, they com-
pleted two main steps: ﬁll in background information and
perform 27 hash comparisons. In Section IV-D, we discuss
how we recruited participants and participant demographics.
Step 1. Fill
in background form Participants were
ﬁrst asked to report their gender, age group, and language
abilities. Speciﬁcally, we asked if the participant was able
to recognize Chinese characters, Japanese characters, and
Korean characters.
Step 2. Compare 27 pairs of hash representations After
collecting demographic information, participants compared
27 pairs of hash representations (i.e., 3 pairs from each
of the nine schemes). The participant were instructed to
compare two hash representations at a time and decide if
the representations were the same or not by pressing “same”
or “different” buttons on the webpage. Fig. 2(a) shows the
instructions from the webpage with two example pairs; a
“same” pair on the left hand side and a “different” pair
on the right hand side. Fig. 2(b) shows a screenshot of a
comparison.
3A radical is a portion of a character that serves as an index in the
dictionary. For example, the radicals of ‘获’ is ‘禾’.
During the comparisons,
the different
schemes and the pairs encountered were randomly assigned.
The detailed procedure was as follows:
the order of
1) The order of the schemes was randomly assigned,
with each participant seeing each scheme once. After
comparing 3 pairs from one scheme, the participant
encounters 3 pairs from a randomly selected not-yet-
encountered scheme.
2) Each pair of representations was selected from a pre-
generated pool. The webpage shows,
a) with probability 1
2 , a pair of two identical repre-
sentations;
b) with probability 1
4 , a pair of two obviously dif-
ferent representations;
c) with probability 1
pair, a hard pair.
4 , a distinct but similar-looking
To simulate different representations that may not be
perfectly aligned, each pair was displayed on the web-
page (Fig. 2(b)) with one of the hash representations
slightly rotated by a uniformly random angle between
±30 degrees.
3) For each question, the participant clicked the “Same”
or the “Diff” button to answer how they perceived the
pair (i.e., as identical or different).
4) The answer and time spent comparing the pair were
recorded and the next pair was shown.
In the experiment, same and different image pairs were
shown with equal probability to ensure that a user that clicks
the same button for all questions achieves a 50% accuracy.
For the pairs which were different, we made half similar
pairs, with the other half obviously different pairs.
D. Participant Demographics
We recruited participants from two sources: 1) university
classes in the US, Japan, Korean, and Taiwan and 2)
Mechanical Turk (MTurk)4 [16]. Since participants were
unsupervised during the survey, participants who spent over
60 seconds for a question were dropped from the survey.
There were 259 male and 177 female participants. The age
of the participants varied with 239 participants 18 to 25 years
old, 163 participants 26 to 40, 31 participants between 41
and 60, and only 3 participants older than 60. Information
about participants’ ability to recognize Asian languages can
be found in Table II. Note that, some rows sum to a number
greater than the number of participants from a given source
because some participants can recognize more than one
Asian language.