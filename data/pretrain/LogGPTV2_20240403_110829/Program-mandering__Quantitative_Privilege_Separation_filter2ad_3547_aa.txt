title:Program-mandering: Quantitative Privilege Separation
author:Shen Liu and
Dongrui Zeng and
Yongzhe Huang and
Frank Capobianco and
Stephen McCamant and
Trent Jaeger and
Gang Tan
Program-mandering: Quantitative Privilege Separation
Shen Liu∗
Dongrui Zeng∗
PI:EMAIL
PI:EMAIL
The Pennsylvania State University
University Park, Pennsylvania
Yongzhe Huang
PI:EMAIL
Frank Capobianco
PI:EMAIL
The Pennsylvania State University
The Pennsylvania State University
University Park, Pennsylvania
University Park, Pennsylvania
Stephen McCamant
PI:EMAIL
University of Minnesota
Twin Cities, Minnesota
Trent Jaeger
PI:EMAIL
Gang Tan
PI:EMAIL
The Pennsylvania State University
The Pennsylvania State University
University Park, Pennsylvania
University Park, Pennsylvania
ABSTRACT
Privilege separation is an effective technique to improve software
security. However, past partitioning systems do not allow program-
mers to make quantitative tradeoffs between security and perfor-
mance. In this paper, we describe our toolchain called PM. It can
automatically find the optimal boundary in program partitioning.
This is achieved by solving an integer-programming model that
optimizes for a user-chosen metric while satisfying the remaining
security and performance constraints on other metrics. We choose
security metrics to reason about how well computed partitions
enforce information flow control to: (1) protect the program from
low-integrity inputs or (2) prevent leakage of program secrets. As
a result, functions in the sensitive module that fall on the optimal
partition boundaries automatically identify where declassification
is necessary. We used PM to experiment on a set of real-world
programs to protect confidentiality and integrity; results show that,
with moderate user guidance, PM can find partitions that have
better balance between security and performance than partitions
found by a previous tool that requires manual declassification.
CCS CONCEPTS
• Security and privacy → Software and application security;
• Software and its engineering → Automated static analysis;
Dynamic analysis.
KEYWORDS
Automatic program partitioning, privilege separation, integer pro-
gramming
∗Both authors contributed equally to this research and are co-first authors.
Permission to make digital or hard copies of all or part of this work for personal or
classroom use is granted without fee provided that copies are not made or distributed
for profit or commercial advantage and that copies bear this notice and the full citation
on the first page. Copyrights for components of this work owned by others than the
author(s) must be honored. Abstracting with credit is permitted. To copy otherwise, or
republish, to post on servers or to redistribute to lists, requires prior specific permission
and/or a fee. Request permissions from permissions@acm.org.
CCS ’19, November 11–15, 2019, London, United Kingdom
© 2019 Copyright held by the owner/author(s). Publication rights licensed to ACM.
ACM ISBN 978-1-4503-6747-9/19/11. . . $15.00
https://doi.org/10.1145/3319535.3354218
ACM Reference Format:
Shen Liu, Dongrui Zeng, Yongzhe Huang, Frank Capobianco, Stephen McCa-
mant, Trent Jaeger, and Gang Tan. 2019. Program-mandering: Quantitative
Privilege Separation. In 2019 ACM SIGSAC Conference on Computer and
Communications Security (CCS ’19), November 11–15, 2019, London, United
Kingdom. ACM, New York, NY, USA, 18 pages. https://doi.org/10.1145/
3319535.3354218
1 INTRODUCTION
Privilege separation in software systems refers to the process of
decomposing a system into multiple modules, each loaded into a sep-
arate protection domain. Privilege separation prevents a software
system from being compromised completely by a single vulnerabil-
ity because any compromised protection domain cannot directly
access the code or data of the parts of the system running in other
protection domains. Calls to functions in other protection domains
are converted into remote procedure calls (RPCs) and data access
is restricted to protection domains where necessary.
While there is clear potential to improve software security through
the use of privilege separation, programmers face challenges in
leveraging privilege separation to achieve security guarantees, to
refactor software systems into working modules, and to maintain
efficient performance in the decomposed system. First, systems
that are privilege separated often aim to assign least privilege [22]
permissions to each protection domain, but it is unclear whether
such permission assignments achieve security guarantees. For ex-
ample, OpenSSH was manually refactored by Provos et al. [20]
into one privileged server process and many unprivileged monitor
processes, each of which handles a user connection. In this setup, a
compromised monitor process should not affect the server process
or other monitor processes. However, only later was it shown that
the privilege separated OpenSSH achieved an approximation of the
strong Clark-Wilson integrity model [23].
Second, manually privilege separating complex software is labor
intensive. Automatic privilege separation aims to partition software
with little user involvement. For instance, Privtrans [4] takes as
input C source code and user annotations about sensitive data
and declassification, and employs static analysis to separate the
application into a master process that handles privileged operations
and an unprivileged slave process. Automatic privilege separation
has great potential for improving software security.
Session 5A: Software SecurityCCS ’19, November 11–15, 2019, London, United Kingdom1023Third, while security is the motivating goal in performing privi-
lege separation, the performance implications of the resulting pro-
gram must also be carefully considered. No matter how protection
domains are isolated (e.g., via the OS process isolation or via some
hardware mechanism such as Intel’s SGX), there is invariably a
performance cost when data and control cross protection-domain
boundaries; as a result, refactoring a monolithic application into
multiple modules in different protection domains comes with a
performance cost, incurred by changing local data/code accesses
into remote data/code accesses, which cross the partition boundary.
Importantly, the performance cost depends on how the application
is partitioned; that is, how boundaries of modules are drawn in the
application and what code is duplicated. If considering only per-
formance, one would just put all code into one protection domain,
reverting back to the original monolithic application; however, se-
curity would not be improved. Similarly, considering only security
could result in bad performance.
Therefore, being able to achieve security goals while still allow-
ing users to make tradeoffs between security and performance is
essential for the success of privilege separation. We call security and
performance partitioning factors, as they are critical for partition-
ing. Many previous tools [4, 14–16, 21, 29, 30], however, consider
only security during privilege separation. Some of these tools (e.g.,
[4, 15]) require user-specified data declassification, a process that
allows sensitive data flow from a sensitive domain (i.e., the domain
that processes sensitive data) to an insensitive domain, to prevent
leakage of secret data and/or use of low-integrity data. For exam-
ple, suppose there is an authentication function that uses a secret
password and a client function f that invokes the authentication
function. By declassifying the return value of the authentication
function, f can then be put into the insensitive domain. This man-
ual declassification process, however, burdens programmers as they
have to decide where to perform declassification. In general, pro-
grammers have to evaluate the performance impact of boundary
crossings and the possible security impact of information flows at
those boundaries, as well as the requirements for writing effective
declassifiers at each candidate boundary.
A few past systems [6, 12, 28] consider both security and per-
formance during partitioning, but none of them quantifies secu-
rity and supports users in making quantitative tradeoffs between
security and performance. We propose a new automatic privilege-
separation framework, called Program-mandering1, abbreviated as
PM. It makes a key observation that many applications’ security
goals are related to information flow and it therefore adopts quanti-
tative information flow as a metric for security. Consequently, PM
enables quantitative tradeoffs between security and performance,
while achieving meaningful security goals. In particular, PM makes
the following contributions:
1Gerrymandering refers to the process of manipulating the boundaries of voting
districts to favor one political party; program-mandering refers to the process of
carefully choosing partitioning boundaries to favor a good tradeoff between security
and performance.
• PM is a privilege-separation framework that guides users
to make quantitative tradeoffs between security and perfor-
mance. By converting privilege separation into an integer-
programming problem, it automatically computes the op-
timal partition, with respect to user-specified budgets on
security and performance.
• PM is the first system that combines quantitative information
flow with privilege separation. This not only provides a
security metric that aligns well with security goals common
in applications, but also reduces users’ burden of performing
manual declassification—the optimal partition computed by
PM automatically gives where data should be declassified.
• We have implemented PM and evaluated it on a set of real
world programs. Our experience shows that PM helps users
make quantitative trade-offs among multiple factors. After
observing initial partitions, users could use PM to improve
the balance between security and performance by setting
simple constraints, in an iterative process.
2 RELATED WORK
Several tools have been proposed to assist programmers in man-
ually partitioning their applications, including Privman [13] and
Wedge [3]. However, they require programmers to manually figure
out a good partition boundary. A number of tools [4, 14–16, 21, 29,
30] have been created for automatically partitioning applications
using program analysis. These tools’ partitioning algorithms, how-
ever, consider only security but not other factors; as a result, they
do not allow tradeoffs among multiple factors. Further, these tools
partition programs, but lack consideration for helping users achieve
security goals; e.g., they expect users to manually choose where
to declassify information flows and sometimes do not account for
flows to external channels.
ProgramCutter [28], Swift [6], and SOAAP [12] are partitioning
systems that consider both security and performance, but none of
them enables a user to make quantitative tradeoffs between security
and performance since they lack metrics for quantifying security.
In detail, ProgramCutter [28] collects system calls that a function
makes and uses that information to isolate a set of functions that
access a sensitive resource. It does not consider the impact of in-
formation flow on partitioning, which is critical to preventing data
leakage and protecting data integrity. For example, if function A
reads a password from a password file and calls function B with that
password, ProgramCutter would not label function B as sensitive
since B does not directly read the file. In contrast, PM tracks how
function A propagates the password inside A and determines how
many bits of sensitive information are passed from A to B.
Swift [6] separates web application code into two components,
one that runs on the web client and one that runs on the web server.
Swift computes a partition that minimizes the number of boundary
crossings (i.e., between the client and server). However, it does
not quantify security. Further, Swift relies on the Jif programming
language [19] for writing the initial program, guaranteeing that
any partition will satisfy information flow requirements. However,
writing programs to satisfy information flow comprehensively of-
ten creates a significant manual burden (e.g., to define and place
declassifiers to resolve information flow errors).
Session 5A: Software SecurityCCS ’19, November 11–15, 2019, London, United Kingdom10241
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
SOAAP [12] is an interactive tool that asks a user to provide
source-level annotations to guide partitioning. SOAAP’s annotation
requirement is heavyweight; for example, it requires annotations
about the partition boundary and what global state can be accessed
by each security domain. In comparison, PM asks for only anno-
tations about sensitive data together with security/performance
budgets, and it automatically finds a partition boundary that sat-
isfies the budgets and is optimized for one metric. While SOAAP
includes a performance simulator to help users decide whether
a partition would meet a performance goal, it does not quantify
security nor does it provide a framework for users to explore the
quantitative tradeoff between security and performance.
Dong et al. [9] performed an empirical study on balancing be-
tween security and performance for a privilege-separated web
browser. Using past vulnerability and profiling data, the case study
quantifies the security and performance benefits for typical kinds
of privilege separation in the context of web browsers. However, it
does not offer a framework that allows users to make security and
performance tradeoffs to privilege separate general applications.
PM partitions programs to control the information flow between
the sensitive and the insensitive domains. DataShield [5] separates
sensitive and non-sensitive data and applies memory safety on
sensitive data and Software-based Fault Isolation [26, 27] on non-
sensitive data; no information flow is allowed between the two
memory regions. Although DataShield instruments each memory
instruction according to its privilege (whether sensitive data is ac-
cessed) and enforces a logical separation of code, it does not split
code into two separate domains. The danger of mixing code of
different privileges in the same domain is that the domain still has
to possess all privileges; the attacker might use a vulnerability to ex-
ecute code of higher privileges unexpectedly. In contrast, privilege
separation tools physically separate code into multiple domains
of differing privileges. Kenali [25] is similar to DataShield, except
that it works on OS kernel code, and applies data-flow integrity on
kernel data critical for access control.
3 A MOTIVATING EXAMPLE
Fig. 1 presents a toy program motivating the need for balancing
security and performance when performing privilege separation.
For brevity, we do not involve global variables in the toy program.
The program is a simplified version of how the thttpd web server
performs authentication. It accepts a username and a password
from the user and performs authentication by using a password
file. The password file can be any one of the five possibilities in the
fname array. The auth function iterates over the five possibilities
and invokes auth2, which checks if the password file exists and,
if so, performs authentication by comparing the user name and
password string with lines in the password file. In the worst case,
auth invokes auth2 five times. Note that the main function has a
vulnerability that can be used to cause a buffer overrun. As a result,
when all three functions are in the same protection domain, an
attacker can use the buffer overrun to take over the program and
learn information in the password file.
For better security, one partition is to put auth2 in its own
protection domain, with the privilege of reading the password
files, and the rest of the code stays in a different protection domain,
char ∗
fname [ 5 ] = { " / d1 / pwd " ,
" / d2 / pwd " ,
. . . } ;