specify the type of the value returned by the indexer, and also specify the
type of the value to use as the index into the indexer between square brackets.
The indexer for the IntBits struct uses an integer as its index type and returns
a Boolean value. It looks like this:
Click here to view code image
struct IntBits
{
    ...
    public bool this [ int index ]
Download from finelybook PI:EMAIL
549
    {
      get => (bits & (1  this.data;
      set => this.data = value;
    }
}
Now consider the following code that uses this property:
Click here to view code image
Wrapper wrap = new Wrapper();
...
int[] myData = wrap.Data;
myData[0]++;
myData[1]++;
This looks pretty innocuous. However, because arrays are reference
types, the variable myData refers to the same object as the private data
variable in the Wrapper structure. Any changes you make to elements in
myData are made to the data array; the expression myData[0]++ has
the very same effect as data[0]++. If this is not your intention, you
should use the Clone method in the get and set accessors of the Data
Download from finelybook PI:EMAIL
553
property to return a copy of the data array, or make a copy of the value
being set, as shown in the code that follows. (Chapter 8, “Understanding
values and references,” discusses the Clone method for copying arrays.)
Notice that the Clone method returns an object, which you must cast to
an integer array.
Click here to view code image
struct Wrapper
{
    private int[] data;
    ...
    public int[] Data
    {
      get { return this.data.Clone() as int[]; }
      set { this.data = value.Clone() as int[]; }
    }
}
However, this approach can become very messy and expensive in
terms of memory use. Indexers provide a natural solution to this
problem—don’t expose the entire array as a property; just make its
individual elements available through an indexer:
Click here to view code image
struct Wrapper
{
    private int[] data;
    ...
    public int this [int i]
    {
        get => this.data[i];
        set => this.data[i] = value;
    }
}
The following code uses the indexer in a similar manner to the
property shown earlier:
Click here to view code image
Wrapper wrap = new Wrapper();
...
int[] myData = new int[2];
myData[0] = wrap[0];
myData[1] = wrap[1];
myData[0]++;
myData[1]++;
Download from finelybook PI:EMAIL
554
This time, incrementing the values in the myData array has no effect
on the original array in the Wrapper object. If you really want to modify
the data in the Wrapper object, you must write statements such as this:
wrap[0]++;
This is much clearer and safer!
Indexers in interfaces
You can declare indexers in an interface. To do this, specify the get keyword,
the set keyword, or both, but replace the body of the get or set accessor with a
semicolon. Any class or structure that implements the interface must
implement the indexer accessors declared in the interface, as demonstrated
here:
Click here to view code image
interface IRawInt
{
    bool this [ int index ] { get; set; }
}
struct RawInt : IRawInt
{
    ...
    public bool this [ int index ]
    {
        get { ... }
        set { ... }
    }
    ...
}
If you implement the interface indexer in a class, you can declare the
indexer implementations as virtual. This allows further derived classes to
override the get and set accessors, such as in the following:
Click here to view code image
class RawInt : IRawInt
{
        ...
        public virtual bool this [ int index ]
        {
Download from finelybook PI:EMAIL
555
          get { ... }
          set { ... }
        }
        ...
}
You can also choose to implement an indexer by using the explicit
interface implementation syntax covered in Chapter 13, “Creating interfaces
and defining abstract classes.” An explicit implementation of an indexer is
nonpublic and nonvirtual (and so cannot be overridden), as shown in this
example:
Click here to view code image
struct RawInt : IRawInt
{
    ...
    bool IRawInt.this [ int index ]
    {
        get { ... }
        set { ... }
    }
    ...
}
Using indexers in a Windows application
In the following exercise, you will examine a simple phone book application
and complete its implementation. You will write two indexers in the
PhoneBook class: one that accepts a Name parameter and returns a
PhoneNumber, and another that accepts a PhoneNumber parameter and
returns a Name. (The Name and PhoneNumber structures have already been
written.) You will also need to call these indexers from the correct places in
the program.
Familiarize yourself with the application
1. Start Microsoft Visual Studio 2017 if it is not already running.
2. Open the Indexers solution, which is located in the \Microsoft
Press\VCSBS\Chapter 16\Indexers folder in your Documents folder.
With this graphical application, a user can search for the telephone
number for a contact, and also find the name of a contact that matches a
Download from finelybook PI:EMAIL
556
given telephone number.
3. On the Debug menu, click Start Debugging.
The project builds and runs. A form appears, displaying two empty text
boxes labeled Name and Phone Number. The form initially displays two
buttons: one to find a phone number when given a name, and one to find
a name when given a phone number. Expanding the command bar at the
bottom of the form reveals an additional Add button that will add a
name/phone number pair to a list of names and phone numbers held by
the application. All buttons (including the Add button in the command
bar) currently do nothing. The application looks like this:
Your task is to complete the application so that the buttons work.
4. Return to Visual Studio 2017 and stop debugging.
5. Display the Name.cs file for the Indexers project in the Code and Text
Editor window. Examine the Name structure. Its purpose is to act as a
holder for names.
Download from finelybook PI:EMAIL
557
The name is provided as a string to the constructor. The name can be
retrieved by using the read-only string property named Text. (The
Equals and GetHashCode methods are used for comparing Names when
searching through an array of Name values—you can ignore them for
now.)
6. Display the PhoneNumber.cs file in the Code and Text Editor window,
and examine the PhoneNumber structure. It is similar to the Name
structure.
7. Display the PhoneBook.cs file in the Code and Text Editor window and
examine the PhoneBook class.
This class contains two private arrays: an array of Name values called
names, and an array of PhoneNumber values called phoneNumbers. The
PhoneBook class also contains an Add method that adds a phone number
and name to the phone book. This method is called when the user clicks
the Add button on the form. The enlargeIfFull method is called by Add
to check whether the arrays are full when the user adds another entry.
This method creates two new, bigger arrays, copies the contents of the
existing arrays to them, and then discards the old arrays.
The Add method is deliberately kept simple and does not check whether
a name or phone number has already been added to the phone book.
The PhoneBook class does not currently provide any functionality with
which a user can find a name or telephone number; you will add two
indexers to provide this facility in the next exercise.
Write the indexers
1. In the PhoneBook.cs file, delete the comment // TODO: write 1st
indexer here and replace it with a public read-only indexer for the
PhoneBook class, as shown in bold in the code that follows. The indexer
should return a Name and take a PhoneNumber item as its index. Leave
the body of the get accessor blank.
The indexer should look like this:
Click here to view code image
sealed class PhoneBook
Download from finelybook PI:EMAIL
558
{
    ...
    public Name this[PhoneNumber number]
    {
        get
        {
        }
    }
    ...
}
2. Implement the get accessor as shown in bold in the code that follows.
The purpose of the accessor is to find the name that matches the
specified phone number. To do this, you need to call the static IndexOf
method of the Array class. The IndexOf method performs a search
through an array, returning the index of the first item in the array that
matches the specified value. The first argument to IndexOf is the array to
search through (phoneNumbers). The second argument to IndexOf is the
item for which you are searching. IndexOf returns the integer index of
the element if it finds it; otherwise, IndexOf returns –1. If the indexer
finds the phone number, it should return the corresponding name.
Otherwise, it should return an empty Name value. (Note that Name is a
structure, so the default constructor sets its private name field to null.)
Click here to view code image
sealed class PhoneBook
{
    ...
    public Name this [PhoneNumber number]
    {
        get
        {
            int i = Array.IndexOf(this.phoneNumbers, number);
            if (i != -1)
            {
                return this.names[i];
            }
            else
            {
                return new Name();
            }
        }
    }
    ...
}
Download from finelybook PI:EMAIL
559
3. Remove the comment // TODO: write 2nd indexer here and replace it
with a second public read-only indexer for the PhoneBook class that
returns a PhoneNumber and accepts a single Name parameter.
Implement this indexer in the same way as the first one, as shown in
bold in the code that follows. (Again, note that PhoneNumber is a
structure and therefore always has a default constructor.)
The second indexer should look like this:
Click here to view code image
sealed class PhoneBook
{
    ...
    public PhoneNumber this [Name name]
    {
        get
        {
            int i = Array.IndexOf(this.names, name);
            if (i != -1)
            {
                return this.phoneNumbers[i];
            }
            else
            {
                return new PhoneNumber();
            }
        }
    }
    ...
}
Notice that these overloaded indexers can coexist because the values
that they index are of different types, which means that their signatures
are different. If the Name and PhoneNumber structures were replaced by
simple strings (which they wrap), the overloads would have the same
signature, and the class would not compile.
4. On the Build menu, click Build Solution, correct any syntax errors, and
then rebuild the solution if necessary.
Call the indexers
1. Display the MainPage.xaml.cs file in the Code and Text Editor window
and then locate the findByNameClick method.
Download from finelybook PI:EMAIL
560
This method is called when the Find By Name button is clicked. This
method is currently empty. Replace the // TODO: comment with the
code shown in bold in the example that follows. This code performs
these tasks:
a. Reads the value of the Text property from the name text box on the
form. This is a string containing the contact name that the user has
typed in.
b. If the string is not empty, the code searches for the phone number
corresponding to that name in the PhoneBook by using the indexer.
(Notice that the MainPage class contains a private PhoneBook field
named phoneBook.) It constructs a Name object from the string, and
passes it as the parameter to the PhoneBook indexer.
c. If the Text property of the PhoneNumber structure returned by the
indexer is not null or empty, the code writes the value of this property
to the phoneNumber text box on the form; otherwise, it displays the
text “Not Found.”
The completed findByNameClick method should look like this:
Click here to view code image
private void findByNameClick(object sender, RoutedEventArgs e)
{
    string text = name.Text;
    if (!String.IsNullOrEmpty(text))
    {
        Name personsName = new Name(text);
        PhoneNumber personsPhoneNumber =
this.phoneBook[personsName];
        phoneNumber.Text =
            String.IsNullOrEmpty(personsPhoneNumber.Text) ?
            "Not Found" : personsPhoneNumber.Text;