Security ’06: 15th USENIX Security Symposium
USENIX Association
tion to extract those code regions that handle the various
browser events that are delivered.
6.1 Recording Browser Function Calls
The “fake” WebBrowser and the host application provide
a controlled environment in which we can instantiate
a suspicious component, send events, and monitor the
component’s reaction. The purpose of the “fake” Web-
Browser COM object is to host the component under
analysis. This involves the provision of an environment
that is “convincing” to a BHO or toolbar. To this end, the
WebBrowser element must offer all Internet Explorer
functionality expected by the browser extensions. Oth-
erwise, a BHO or toolbar might fail during initialization,
preventing any further analysis. Therefore, the Web-
Browser COM object implements several key interfaces
expected by a BHO or toolbar. Most
importantly,
it
implements IConnectionPointContainer,
IConnectionPoint, and IWebBrowser2. The
two interfaces related to ConnectionPoint are
required so that a BHO or toolbar is able to notify our
WebBrowser COM object about its interest in receiving
events (using the IConnectionPoint::Advise()
function). The IWebBrowser2 interface is the main
interface used to interact with the browser. More
precisely, a browser component invokes the functions of
this interface to collect browsing information such as the
current page or URL and to inﬂuence browser behavior.
Since we are interested in the interaction between a
possible spyware component and the browser, we pay
particular attention to calls to the IWebBrowser2
interface.
The WebBrowser element also implements sev-
eral other interfaces that are expected by a toolbar.
These include IOleWindow, IInputObjectSite,
IOleCommandTarget, and IServiceProvider.
Note that implementing an interface does not necessar-
ily imply that it is necessary to faithfully simulate the
functionality of all its procedures. Instead, we usually
provide a stub for every function. This stub always re-
turns success and logs the invocation. However, for cer-
tain frequently-used functions (e.g., those that request
the document or the location of the current page), ap-
propriate objects are returned.
The host application provides the “glue” that will hold
the various components together. To this end, the pro-
gram registers the component under analysis with the
Windows operating system, initializes the COM library,
and instantiates both our WebBrowser and the BHO or
toolbar.
Before events can be sent
its
SetSite method has to be called (with a pointer to
the IUnknown interface of our WebBrowser as an ar-
to a component,
gument). If the component is actually interested in re-
ceiving events, it will respond by querying for the Web-
Browser’s IConnectionPoint interface and call its
Advise function. At his point, the host application can
obtain a reference to the IDispatch interface imple-
mented by the browser extension and start to send events.
Note that all events are delivered through a single func-
tion (the Invoke method of the IDispatch interface),
using the ﬁrst parameter of the function to indicate the
type of the event.
To be able to generate events that are as realistic as
possible, we recorded an actual event stream created by
Internet Explorer over the course of ﬁve days. To this
end, we developed our own BHO that logged all relevant
event information while the browser was used. These
events were then replayed to perform our dynamic tests.
6.2 Locating Event-Handling Code
Given the infrastructure to send browser events to a
Browser Helper Object or toolbar, the next task is to de-
termine the regions of the code that handle events. More-
over, we are interested in determining the separate code
regions associated with each event. Then, we can use
static analysis to extract the control ﬂow graphs that cor-
respond to these events.
If each different type of event would be passed to a
separate function, the start address for the static analy-
sis process could be easily determined as the start ad-
dress of the respective function. Unfortunately, as men-
tioned in the previous section, all events are delivered
through the single Invoke function. Thus, if we were to
use the start address of the Invoke function, we would
be unable to determine which API calls are associated
with which events. To obtain the API calls made in re-
sponse to a speciﬁc event, we have to look deeper into
the component under analysis and ﬁnd the ﬁrst instruc-
tion in the code that is responsible for handling the event.
We call this instruction the ﬁrst event-speciﬁc instruc-
tion. Of course, it is also possible that a component is
not interested in a certain event and provides no special
handling code. The execution typically runs through a
default path, ignoring the information contained in the
event. In this case, there is no event-speciﬁc code.
To determine the ﬁrst event-speciﬁc instructions, we
collect execution traces of the BHO or toolbar when pro-
cessing different events. That is, we send one event of
each type to the component and record the correspond-
ing sequences of machine instructions that are executed
in response. To record the machine instruction traces, we
use the Windows Debug API [21]. The Windows Debug
API offers an interface that is comparable to the ptrace
mechanism provided by some UNIX implementations,
and it provides a parent process with complete control
USENIX Association
Security ’06: 15th USENIX Security Symposium
279
over the execution of a child process. This includes the
possibility to read and write the registers as well the ad-
dress space of the child process, which allows one to set
breakpoints or run a process in single-step mode. By
switching to single-step mode before sending a browser
event, we can record each executed machine instruction
and obtain the desired traces.
The tracing component collects an execution trace for
each of the n events being analyzed. Then the applica-
tion performs a pairwise comparison between all traces.
The idea is to identify the ﬁrst event-speciﬁc instruction
for each event by checking for the ﬁrst instruction that is
unique to the corresponding trace. More formally, a trace
te for an event e can be considered as a string whose sym-
bols are the (addresses of the) instructions that are exe-
cuted. To identify the ﬁrst event-speciﬁc instruction in
te, we determine the longest common preﬁxes between
te and all other traces ti : 0 ≤ i < n, e (cid:3)= i. Assuming
that the longest of the preﬁxes has a length of l, then the
(l + 1)st instruction in trace te is the ﬁrst event-speciﬁc
one. The rationale behind this approach is that we search
for the ﬁrst instruction for which the trace te deviates
from all other traces. As a consequence, when two or
more traces contain the same sequence of instructions,
then these traces have no event-speciﬁc instructions and
are considered to represent the default path (as the differ-
ent types of events had no inﬂuence on the execution).
Consider the example shown in Figure 1. Note that
in this case, we demonstrate the identiﬁcation of event-
speciﬁc instructions using source code. However, the
real analysis is done on binary code. The ﬁgure shows
the traces generated for ﬁve events. As expected, the
correct event-speciﬁc instructions are found for the ﬁrst
three events (line 4 for event A, line 6 for event B, and
line 8 for event C), while the last two events (D and E)
represent the default path. Note that even though the ﬁrst
instruction in trace B that is different from trace A is on
line 5, there is a longer common sequence of this trace
with trace C (as well as D and E). Thus, the event-speciﬁc
instruction for event B is determined to be on line 6.
When collecting traces for Browser Helper Objects or
toolbars, only the instructions that are executed in the
context of the component itself are used to determine
event-speciﬁc instructions. Thus, we remove all instruc-
tions that belong to dynamically loaded libraries from the
traces. The reasons are twofold: First, we are interested
in ﬁnding the ﬁrst unique instruction within the compo-
nent for the static analysis process. Second, a library can
contain initialization code that is executed when one of
its functions is used for the ﬁrst time. This introduces
spurious deviations into the traces that do not correspond
to actual differences in the code executed by the BHO or
toolbar component.
In addition to restricting our analysis to code within
the BHO or toolbar, subsequent repetitions of identical
instruction sequences that are executed as part of a loop
are collapsed into a single instance of this sequence. The
reason is that we occasionally observed that the traces for
two events were identical before and after a loop, while
the loop itself was executed for a different number of
times in each case. This happened, for example, with a
spyware component that was going through an array of
identiﬁers to determine whether the current event (given
its identiﬁer) should be processed. For different event
identiﬁers, the loop terminated after a different number
of iterations because the respective event identiﬁers were
found at different positions in the array. However, for
both traces execution continued on the same path for
a number of instructions until control ﬂow eventually
branched into the event-speciﬁc parts. In such situations,
collapsing multiple loop iterations into one allows us to
identify the actual event-speciﬁc handling code.
7 Static Analysis Step
The goal of the static analysis step is to determine the
interaction of a BHO or toolbar component with the op-
erating system. To this end, we statically examine certain
code regions of a component for the occurrence of oper-
ating system calls.
Before the component is actually analyzed, we check
its API function import table for the occurrence of
calls relevant to the creation of threads or timers (e.g.,
CreateThread or SetTimer). As explained in Sec-
tion 4, if a component could launch threads or create
timers, we have to conservatively assume that any im-
ported API function can be invoked in response to an
event. In this case, no further analysis of the binary is
necessary because we can directly use the calls listed by
the function import table. When neither of these func-
tions is present, however, the static analysis step is re-
quired to identify those API functions that can be called
in response to events.
The ﬁrst task of the static analysis step is to disassem-
ble the target binary and generate a control ﬂow graph
from the disassembled code. A control ﬂow graph (CFG)
is deﬁned as a directed graph G = (V, E) in which
vertices u, v ∈ V represent basic blocks and an edge
e ∈ E : u → v represents a possible ﬂow of control from
u to v. A basic block describes a sequence of instructions
without any jumps or jump targets in the middle. We use
IDA Pro [6] to disassemble the binary. Since IDA Pro is
a powerful disassembler that already provides compre-
hensive information about the targets of control ﬂow in-
structions, the CFG can be generated in a straightforward
manner using a custom-written IDA Pro plug-in. Note
that if our detection technique were to be deployed in
280
Security ’06: 15th USENIX Security Symposium
USENIX Association
1: Invoke(event I) 
 2: {
 3:    if (I == A) 
 4:        handle_A(I);
 5:    else if (I == B) 
 6:        handle_B(I);
 7:    else if (I == C) 
 8:        handle_C(I);
 9:    return;
10: }
 A    B    C    D    E
 1    1    1    1    1
 2    2    2    2    2
 3    3    3    3    3
 4
5
5
7
7
5
6
5
7
8
9
9
10
9
9
10   10   10   10
9
Figure 1: Dynamic traces for different types of events.
default traces
the general public, the disassembly and CFG generation
would be done using a custom disassembler optimized
for our task. During our experiments, we encountered a
number of spyware samples that were compressed with
UPX [16], a packer tool for executables. If this was the
case, we uncompressed the samples prior to performing
static analysis (using the available UPX unpacking util-
ity). Otherwise, IDA Pro would not be able to extract any
valid instructions.
Based on the CFG for the entire component, the next
step is to isolate those parts of the graph that are respon-
sible for handling events. In particular, we are interested
in all subgraphs of the CFG that contain the code to han-
dle the different events. To this end, we use the event-
speciﬁc addresses collected during dynamic analysis and
traverse the entire subgraph reachable from each of those
addresses. While traversing the graph, the static analy-
sis process inspects all instructions to identify those that
represent operating system calls. More speciﬁcally, we
make a list of all possible Windows API calls that can
be reached from each event-speciﬁc address. Finally, the
event speciﬁc lists are merged to obtain a list of all API
calls that are invoked in response to events. At this point,
the analysis process has collected all the information nec-
essary to characterize the component (i.e., browser COM
functions and Windows API calls executed in response to
events).
Note that while the Windows API is the common way
to invoke Microsoft Windows services, current versions
of Windows (starting with Windows NT and its suc-
cessors) also offer a lower-level interface. This inter-
face is called the Windows NT Native API, and it can
be compared to the system call interface on UNIX sys-
tems. Both the Native API kernel interface and the Win-
dows API are offered to accommodate the micro-kernel
architecture of Windows. That is, instead of providing
one single operating system interface, Windows NT of-
fers several different operating system interfaces (e.g.,
OS/2, DOS, POSIX). This allows one to execute applica-
tions that were developed for different operating systems.
The different OS interfaces are implemented by different
operating environment subsystems, which are essentially
a set of system-speciﬁc APIs implemented as DLLs that
are exported to client programs. All subsystems are lay-
ered on top of the Native API, with the Windows API
being the most popular subsystem. Because applications
typically use the Windows API and not the Native API,
we monitor calls to the Windows API to capture the be-
havior of components under analysis. However, to as-
sure that no spyware can bypass our detection technique
by relying directly on the Native API, any direct access
to this interface is automatically characterized as suspi-
cious.
8 Evading Detection
In this section, we discuss the limitations of our detec-
tion technique. In particular, we explore possible mech-
anisms that a spyware author can use to evade detection
and countermeasures that can be taken in order to prevent
such evasion.
Before revisiting our technique, it is important to note
that due to the nature of the component object model
a component that “plugs” into our WebBrowser com-