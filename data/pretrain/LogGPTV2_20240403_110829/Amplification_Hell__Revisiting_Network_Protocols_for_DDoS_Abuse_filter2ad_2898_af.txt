8.3
TABLE VI: Aggregated DRDoS bandwidth per protocol for a victim
(/32) and a victim’s network (/24) if rate limiting is deployed.
To analyze the effects of rate limiting, we assume for
a gedanken experiment
that all protocols rate limited the
requests, e.g., to one request per source IP address and second.
We can then multiply the number of ampliﬁers with the length
of the response to calculate the aggregated attack potential.
Table VI summarizes the total bandwidth an attacker could
still gain in such a setting (column /32). For protocols with
small numbers of ampliﬁers, such as in DNSNS, rate limiting
can indeed limit the harm of attacks to less than 100 Mbit/s.
11
However, for six other services, the aggregated attack band-
width is still in the Gb/s range.
Worse, attackers can evade host-based rate limiting to
some extent by spooﬁng multiple IP addresses from a victim’s
network. This is possible, for example, if adversaries attack a
network instead of a single host. We thus also compute the
bandwidths a victim with an attack surface of a /24 network
would face. With as few as 256 hosts in a network, rate limiting
fails to prevent larger attacks and allows attacks from 32.9 Gb/s
to 22.2 Tb/s for nine protocols. We thus advocate to perform
rate limiting on a per-subnet basis instead of a per-host basis.
Finally, badly-designed rate limiting implementations may
allow for dangerous DoS attacks against the protocol itself.
For example, an attacker could aim to exhaust the rate of
a DNS resolver at authoritative name servers to prevent it
from resolving domains. Luckily, the DNS-based rate limiting
initiative has countered this by falling back to truncating or
TCP. Similarly, an attacker can prevent a player from retrieving
game server status information by exhausting the allowed rate
for the player’s IP address. We leave an evaluation of similar
attacks open to future work.
C. Secure Service Conﬁguration
Many protocols can be hardened against ampliﬁcation by
ﬁxing weak parts in the service conﬁgurations. For example,
conﬁguring a DNS name server that offers recursive name
resolution to the public is considered bad practice. To secure
their servers, administrators can restrict the authorized clients
to the users in their network and discard requests from all
other address ranges. Moreover, authenticating clients would
help to protect other services. For example, most of the
SNMP-enabled devices are exposed to the Internet and use the
default community without password protection – conﬁguring
a password mitigates abuse.
The
reasons
for
server
insecure
conﬁgurations
are
manifold. A major issue are services that are simply enabled
with insecure default conﬁgurations. For example, vendors
often ship devices with conﬁgurations that are vulnerable
to ampliﬁcation attacks, such as network-enabled printers or
consumer routers. In a few cases, a poorly designed protocol
(or one of the protocol’s features) allows attacks and changing
conﬁgurations does not help – such as in the cases of the legacy
protocols QOTD and CharGen.
D. Packet-based Filtering
Reactive countermeasures will help as a last resort against
DRDoS attacks. Defenders, such as upstream providers, can
typically deploy packet-based ﬁltering techniques to block
attack trafﬁc. We asked a CERT about
the features their
anti-DDoS appliances offer for packet-based ﬁltering. We
understood that they typically use four packet-based ﬁltering
techniques to mitigate DRDoS attacks: ﬁlters by (i) IP ad-
dresses, (ii) UDP and TCP ports, (iii) packet lengths, or (iv)
by payload string matching.
We seek to understand to what extent DRDoS attacks
abusing the 14 protocols can be detected by such packet-
based ﬁlters. The distributed nature of DRDoS attacks evades
IP address ﬁlters. We thus analyze if the protocols have
characteristic behavior that matches any of the latter three
packet-based ﬁltering features. We proceed as follows for
each protocol. For (ii), we measure the number of UDP ports
ampliﬁers use to reply to our requests, and compute what ratio
of the ampliﬁers answered with the most popular UDP port (the
statistical mode). For (iii), we proceed likewise for the response
lengths. For (iv), we search for static substrings in all responses
which can be used for payload matching. We explicitly do not
analyze false positives of packet-based ﬁltering approaches.
These approaches are crude (but helpful) methods to separate
attacking protocols from other protocols and are often the only
alternative to null-routing DRDoS victims.
Table VII summarizes our results. For the second and third
major column, we list ﬁrst the number of unique ports/lengths
and then the ratio of ports/lengths matching the statistical
mode.11 The fourth major column shows the number of bytes
we found to be static in all replies (at a ﬁxed offset). The ’+’
indicates that further payload bytes are ﬁxed, but at varying
packet offsets. For example, we observed NetBios responses
from six different source ports that all share at least seven
payload bytes – a vast majority (97.9%) of these packets are
sent using the standard source port, though.
(ii) UDP ports
Protocol
1
SNMP
1
NTP
—
DNSNS
> 1000
DNSOR
6
NetBios
1
SSDP
1
CharGen
QOTD
1
BitTorrent > 1000
> 1000
Kad
Quake 3
174
> 1000
Steam
ZAv2
84
Sality
> 1000
Gameover > 1000
100.0%
100.0%
(iii) Resp len
(iv) PL
239
14.9%
+9B
26.1% >100B
90
+7B
2.1%
— 875
+7B
24.7%
70
+55B
29.1%
21
+17B
36.0%
96
5
76.5%
+36B
+1B
16.7%
10
+12B
24.1%
128
2B
54.8%
54
+19B
0.8%
462
+8B
19.9%
856
13
98.3%
+12B
none
3.7%
33
201
3.3%
none
41.3%
97.9%
100.0%
100.0%
100.0%
12.4%
17.2%
41.7%
8.9%
98.6%
2.1%
0.3%
Detection
Port / len / PL
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
TABLE VII: Packet-based ﬁltering vectors to detect protocol charac-
teristics. The second major column shows if UDP source ports are
characteristic, the third analyzes the response length, and the fourth
shows the number of static bytes for payload inspection.
Table VII shows that we can use the source port to match
over 95% of the packets for seven protocols. Although not
a clear attack indicator, it gives a ﬁrst opportunity to ﬁlter
on other attack criteria, such as content ﬁlters. Length-based
ﬁltering looks ineffective for most protocols, but matches
98% of the packets of the ZeroAccess botnet12. Lastly, 10
of the 14 protocols have a static substring of at least seven
bytes, allowing for payload-based detection. Having said this,
these packet-based detection mechanisms do not necessarily
help to detection attack trafﬁc. Instead, they can typically
only pre-select candidates for attack trafﬁc based on typical
characteristics per protocol — distinguishing legitimate from
malicious trafﬁc remains tricky.
A few services stand out of the set, as they do not offer
any known way for detecting attack trafﬁc. For example,
11We accidentally did not record the source ports in the experiments for
DNSNS and thus had to omit their analysis.
12In fact, ZAv2 spans four separate botnets each running one port. In this
special case, we used these four ports as a mode.
the Kad responses can only be identiﬁed by matching two
bytes of payload – source ports are chosen at random and
responses vary in length. In fact, an attacker abusing Kad can
inﬂuence the response length by varying the number of peers
he requests during a peer exchange. Worse, for two botnets, the
responses are encrypted in such a way that the payloads lack
characteristic substrings, source ports are chosen at random,
and responses are padded with a random number of bytes.
This leaves defenders little chance to identify these protocols
on a per-packet basis.
VI. RELATED WORK
This section describes the related work in the are of DRDoS
attacks. Specht/Lee [30] and Mirkovic/Reiher [18] gave a
general overview and proposed a taxonomy of DDoS attacks.
We will discuss more speciﬁc related research in the following
subsections grouped by topic.
A. DDoS Attack Types
An alternative way to launch powerful DDoS attacks are
networks of remotely-controllable bots that are abused to
craft DDoS attacks. B¨uscher and Holz analyze DirtJumper, a
botnet family with the speciﬁc task to perform DDoS attacks
by abusing the Internet connection of infected PCs [4]. The
DirtJumper botnet attacks at the application-level layer and
does not aim to exhaust bandwidth, though. Kang et al. propose
the Crossﬁre attack, in which bots direct low-intensity ﬂows to
a large number of publicly accessible servers [12]. These ﬂows
are concentrated on carefully chosen links such that they ﬂood
these links and disconnect target servers from the Internet.
Studer and Perrig describe the Coremelt attack, in which bots
send legitimate trafﬁc to each other to ﬂood and disable a
network link between them [32]. All these attacks rely on bots,
while our threat model only assumes that an attacker has any
spooﬁng-enabled Internet uplink. Although the DRDoS attacks
primarily try to congest bandwidth of a single victim, they can
possibly be combined with the aforementioned techniques.
Naoumov and Ross analyze if P2P systems can be abused
for DDoS attacks by aggressively advertizing a victim in
the Distributed Hash Table (DHT) [20]. They manipulate
the Overnet P2P network and show that a potential victim
will receive undesired TCP connections and UDP packets
once it is well-known among the peers. Experiments have
shown that this attack adds two Mbit/s bandwidth and 350
simultaneous TCP connections to victims – clearly falling
behind the abuse potential we have identiﬁed for P2P networks.
Sia [29] and El Defrawy et al. [7] describe similar attacks
poisoning the BitTorrent DHT with equally low DDoS attack
volumes. Sun et al. found that a similar attack on Kad DHT
allows an attacker for bandwidth ampliﬁcation of up to factor
8 [33]. Further stateful attacks have been evaluated by Sun et
al. [34, 35] even for gossip-based P2P networks that do not
have a DHT. However, stateful attacks require peer member-
ship poisoning, which is impractical for attackers. To the best
of our knowledge, we are the ﬁrst to analyze the ampliﬁcation
vulnerabilities in P2P protocols that can be abused for DRDoS
attacks. In contrast to attacks that manipulate P2P membership
information, we described stateless attacks. Stateless attacks
can be launched and stopped without delay in bootstrapping
12
or shutdown, which attackers may abuse for attacks that require
fast reaction times (such as extortion attacks).
Closest to our work, Paxson analyzed the possibility for
DRDoS attacks in 2001 [24]. Paxson’s threat model is reﬂec-
tion in general, including the abuse of (non- to little-ampliﬁed)
protocols such as ICMP and TCP. He also mentions two UDP-
based protocols, DNS and SNMP, as possible ampliﬁcation
vectors. We have discovered ampliﬁcation vectors that evade
nowadays’ detection methods and discovered 12 further UDP-
based protocols that are also vulnerable to ampliﬁcation at-
tacks. In addition, we demonstrate and measure the threat
of ampliﬁcation attacks, for which only anecdotal evidence
existed until now.
B. DDoS Detection and Mitigation
Another ﬁeld of research investigated techniques how to
detect and mitigate DDoS attack. Ioannidis and Bellovin
proposed Pushback [10], in which upstream routers collaborate
to drop undesired packets. Wang et al. propose to counter
bandwidth-congestion attacks by forcing senders to solve small
computational puzzles [39]. Sekar et al. propose LADS, a
Netﬂow and SNMP-driven system to detect anomalies of
DDoS trafﬁc [28]. A few trafﬁc analysis features in LADS are
similar to our method in Section V-D, although we tailored
our approach to DRDoS attacks.
Kreibich et al. introduce the notion of packet asymmetry
to detect unsolicited trafﬁc [13]. Rather than comparing bytes,
they chose to compare packet counters to capture the implicit
signaling of legitimate communication. Our proposal is based