注19：跌认权限。
www.TopSage.com
---
## Page 479
文件与文件系统
467
在复制一个拥有执行权限的文件，例如/bin/pwd，该权限会被保留，除非umask的值
使得它们被删除：
$usaak
显示当的权限抛码
023
m -f foo
$ cp /bin/pwd foo
复例一份系统命令
到除任间存在的文件
$ 1s -1 /bln/pwd foo
列出文件相关信息
-rWX=xr-x
1 root
root
-rWr-xI--
1 jones
deve1
10428 2002-09-21 16:37 f00
最后结果rwXr-Xr--反映部分权限的消失：组的写入访问消失、其他人的写人与执行
也不存在。
最后，我们使用符号形式的参数执行chmod，为所有人加入执行权限：
S cbmod a+x foo
为所有人加入执行权限
S 1s -1 foo
10428 2002-09-21 16:37 foo
列出完长式文件信息
-IWXT-xT-x
1 jones
deve1
最后的权限字符申为rwxr-Xr-x：用户、组与其他人均可执行。这里要注意的是，权限
掩码不会对chmnod操作造成影响：拖码只在文件建立的时候有影响。至于复制的文件。
行为模式和原始的pwd命令一样：
S/bln/pwd
尝试系统版本
/tnp
Spud
以及 Shel1 内置版本
$./foo
/tnp
还有我们对系统版本所复制的
$ f1le foo /bin/pud
/tmp
查看这些文件的信息
fo0:
ELF 32 量 LSB executable, Intel 80386, version 1,
/bin/pwd: ELF 32Ω LSB executable, Intel 80386, vers1on 1
dynamically 1inked (uses shared 1ibs), stripped
dynamically linked (uses shared libs), stripped
请注意我们在引用foo时加上目录前置字符：基于安全性理由，绝不要在PATH列表里
包括当前目录。如果你一定要这么做，也请你将它放在最后一个！
警告：如果你试过上述这些，在试图执行/比ap下的命令时，可能会得到permission-denied的国
应。在提供这样功能的系统上，如GNU/Linux，系统管理员有时会以没有执行权限的模式
加载这个目录（tmp）：请检查/etc/fstab下是否有noexec选项，使用这个选项的另一
执行。你仍然可以将它们放人Shell中而执行，但是你需要知道为什么要这么做。
下面是你删除可执行权限又试图执行程序时，会发生的事：
www.TopSage.com
---
## Page 480
468
附录B
$ chmod a-x foo
除所有人的可执行权限
$ 18 -1 foo
deve1
10428 2002-0921 16:37 foo
列出元长式文件信息
-W---r--
1 jones
bashi ./foo: Permission denied
$./foo
试图执行程序
这里指的不是文件是否有像可执行程序一样的执行能力（ability），而是是否拥有执行权
限（possession of execute permission），决定了它能否像命令一样被执行。这是UNIX
里一个很重要的安全功能。
当你提供执行权限给不应该具有此权限的文件时：
S umask 002
现除默认的都可写入权限
$ echoHello,world'>foo
S xm -f foo
建立一个单行文件
融除任何已存在的文件
S chmod a*x foo
使之可执行
$ 1e -1 foo
显示我们微的变更
$./foo
-TWXIWXT-x
1 jones
deve1
13 200209-21 16:51 foo
试图执行程序
-/foo: line 1: Sello,: cormand not found
$ echo $?
显示退出状态码
127
Shell会要求内核执行./foo及得到失败报告，其使用设置为.ENOEXEC的程序库错误
指示器。Shell接下来会试着自已执行它。在命令行上Hello，world被解释为命令
He11o、参数wor1d。因为在查找路径下找不到这样的命令，所以LShell报告一连串的
错误信息，并回传127退出状态码，详见6.2节。
检查权限时，依序为用户、组，最后才是其他人。它们是由所属的进程决定该设置哪些
权限位。因此很可能文件属于你，但你却不能读，而你的组成员及系统里的其他人却可
以。像这样：
S ecbo·Tble Le a secret'> top-secret
建立单行文件
S chmod 044 top-secret
显示我们的变更
对组与其他人，鼎除所有权最只保留读取权限
$ 18 -1
*+------
1 jones
deve1
cat : top-secret: Pernieeion denied
试着显示文件
S chmod u+r top-secret
充许所有者读取文件
$ 18 -1
17 2002-10-11 14:59 top-secret
显示我们的变更
S cat top-secret
------- -
1 Jones
这时，便能显示了！
zhis is a secret
所有UNIX文件系统都另提供额外的权限位：ser-user-ID、set-group-ID与sticky（粘
连）位。为兼容旧系统并避免增加已存在的行长度，15不使用三个额外的权限字符来显
示这些权限，而是将x改为其他字母。详见chmod（1）、chmod（2）与is（1）手册页。基于
安全性理由，Shell脚本绝不应该设置set-user-ID或set-group-ID权限位：我们发
www.TopSage.com
---
## Page 481
文件与文件系统
469
章已说明过。
有时我们会在商用软件上应用仅允许执行的权限（--X--X--x），以禁止复制、除虫，
与追踪操作，但程序仍可以执行。
目录权限
现在为止，我们讨论的都是一般文件的权限。在目录上，这些权限的解读会稍有不同。
目录的读取，即能列出它的内容，例如使用1s，写入，则表示你能在目录下建立或删除
文件，即便你对目录下的文件不具写人权限：该特权保留给操作系统，以维持文件系统
的一致性，执行访问，即你可以访间文件以及该目录下的子目录（当然受它们自己权限
的管制），特别是你还可以跟随该目录下的路径名称。
由于目录的执行与读取较难区分，我们在这里举例解释：
S umask
显示当前的权限掩码
22
S mkdir test
建立子目录
drwxr-xr-x 2 jones devel 512 Ju1 31 13:34 test/
S ls -Fld teet
显示目录权展
S touch test/the-file
S1e -1 teat
建立空目录
目录内容元长式列出
至此，都为一般行为模式。现在，我们删除读取权限，但留下执行权限：
S chmod a-r test
别除所有人读取目录的权限
dvox--x--x 2 jones. devel :512 Jan 31 16:39 test/
$ ls -lrd test
显示目录权展
1s: test: Permission denied
Sls -1 teat
试图列出日录内容
S 1s -1 test/the-file
-rw-r--r-- 1 jones devel 0 Jul 31 13:34 test/the-fi1e
列出文件本身
第二个1s失败是因为缺乏读取权限，但因为有执行权限，所以第三个1s成功，这里呈
现的是：删除目录的读取权限并不能防止目录下的文件被访问，用户只要知道文件名就
可以这么做。
当我们删除执行访问，却未恢复读取权限时：
Schmod a-x test
到除所有人执行目录的权限
S ls -lrd test
3 jones devel 512 Jul 31 13:34 test/
列出目录
--
www.TopSage.com
---
## Page 482
470
附录B
S1s -1test
1s: test: Pernission denied
试图列出目录内容
$ 1s -1 teat/the-file
试图列出文件
181, test/the-file: Permission denied
test: Permisslon denied,
$ cd teet
试图改变目录
目录树不再允许所有用户润览，root除外。
最后我们恢复读取，但不要恢复执行访问，再重复刚刚做的事：
S chaod a*r teat
加人所有人读取目录的权限
S ls -lrd test
显示日录权展
drw-r-r-- '2 jones devel 512 Ju1 31 13:34 ·test/
5 1a -1 teot
试图列出目录内容
18: test/the-file: Permission denied
total 0
S 1s -1 test/the-f1le
1s: test/the=fi1e: Permission denied
试图列出文件
S cd test
试图改变目录
test: Permission desied.
触乏对目录的执行权限，是无法测览它的内容，或是不能使它成为当前的工作目录。
目录设置黏着位时，里头所含的所有文件就只有它们的所有者或目录所有者才能删除。
此功能最常用在公用的可写人目录，例如/tmp、/var/tmp（过去的/usr/tmp）这些，
还有邮件进来的目录，以防止用户删除不属于他们的文件。
某些系统上，目录设置set-group-ID位时，新建立的文件的组ID即为此目录的组ID而
非所有者所属组。可情的是，这样的权限位并非在所有系统下都如此处理。另有一些系
统，其行为模式需视加载的文件系统为何而定，所以你应该在你系统里，再确认一次
mount命令的手册页，当有好几个用户协同开发项目时，set-group-ID位的设置就相当
好用了。我们可以为此项目建立一个特殊的组，并建立成员，然后再将项目的目录设置
给该组。
部分系统结合sct-group-ID位的设置与group-execute位，这种用法太过复杂，已超出本
书范围，在此不进行介绍。
www.TopSage.com
---
## Page 483
文件与文件系统
471
目录读取与执行权限
为什么读取目录与遥过谊目录至其子目录有不同的含叉？答蒙很简单：它是为了在
看不到父目录的情况下，仍能看到子日录下的文件，最常见的使用就是在用户的网
页结构下。根目录通常为rWX--X--x这样的权限，防止组或其他人到出目录内客
或检查文件。但网页国录的起始，假设是SHOME/public_html，也含其子目录，
我们可以给予它们rWX-Xr-x这样的权限，显在那之下的文件，则至少拥有rW
-=I==的权限。
另一个例子是，假设为了安全性的理由，系统管理员想要对先前未防护的文件子目
录选行读取保护（read-protect），他需要做的就只是副除该子目录项层的根目录
（单一目录）之读取与执行权限chmoda-rxdirname即可：这使所有这之下的
文件都立即无法新的打开（但已打开的到不受影响），即便他们据有个别文件的使
用权限。
注意：有些UNIX系统支持访问控制列表（access control lists，ACL）。它可以提供较细的访问
控制，可针对个别的用户与组指定非默认的权限。可借的是，ACL工具的设置与显示在各
系统间都不尽和同，使其难以在异构环境中使用，在本书中微进一步讨论也不适当。如果
你想了解更多，可以试着使用man-kacl或man-x‘accesscontrol list'，在你
的系统下查找相关的命令。
文件时间戳
UNIX文件的inode条目记录包括三个重要时间戳：访问时间、inode变更时间与修改时
间，这些时间一般是自epoch（注20）算起的秒数计之，cpoch的UNIX系统时间为00:00:00
UTC，January1,1970，不过有些UNIX实现提供更好的计时单位，以UTC（注21）[国
际标准时间（CoordinatedUniversalTime），早期为格林威治时间（Greenwich Mean
Time，GMT）】计算的时间，表示该时间藏不受本地时区设置影响。