### 注19：权限管理

---

### 文件与文件系统
在复制一个具有执行权限的文件（例如`/bin/pwd`）时，该权限会被保留，除非 `umask` 的设置导致这些权限被移除。

```bash
$ umask
023
$ cp /bin/pwd foo
```

上述命令将 `/bin/pwd` 复制为 `foo`。如果当前目录下已存在 `foo`，它将被覆盖。

```bash
$ ls -l /bin/pwd foo
-rwxr-xr-x 1 root root 10428 2002-09-21 16:37 /bin/pwd
-rwXr-x--- 1 jones devel 10428 2002-09-21 16:37 foo
```

从结果可以看到，`foo` 的权限为 `rwXr-x---`，其中组的写入权限和其它用户的写入及执行权限已被移除。

接下来，我们使用符号形式的 `chmod` 命令为所有人添加执行权限：

```bash
$ chmod a+x foo
$ ls -l foo
-rwxr-xr-x 1 jones devel 10428 2002-09-21 16:37 foo
```

此时，所有用户都拥有执行 `foo` 的权限。需要注意的是，`umask` 只在创建新文件时生效，对 `chmod` 操作没有影响。

尝试运行 `foo` 和原始的 `/bin/pwd` 命令：

```bash
$ /bin/pwd
/tmp
$ ./foo
/tmp
$ file foo /bin/pwd
foo: ELF 32-bit LSB executable, Intel 80386, version 1 (SYSV), dynamically linked, stripped
/bin/pwd: ELF 32-bit LSB executable, Intel 80386, version 1 (SYSV), dynamically linked, stripped
```

出于安全考虑，不要将当前目录包含在 `PATH` 中，或将其放在 `PATH` 的最后位置。

**警告**：如果按照上述步骤操作，在某些系统上可能会遇到权限拒绝的问题。这是因为某些系统（如 GNU/Linux）可能以无执行权限的方式挂载 `/tmp` 目录。请检查 `/etc/fstab` 是否包含 `noexec` 选项。

删除 `foo` 的可执行权限后，再次尝试执行它：

```bash
$ chmod a-x foo
$ ls -l foo
-rw-r--r-- 1 jones devel 10428 2002-09-21 16:37 foo
$ ./foo
bash: ./foo: Permission denied
```

这说明是否拥有执行权限决定了文件能否作为命令执行，这是 UNIX 系统的一个重要安全特性。

如果你给不应具有执行权限的文件提供了执行权限，可能会出现以下情况：

```bash
$ umask 002
$ echo 'Hello, world' > foo
$ chmod a+x foo
$ ls -l foo
-rwxrwxr-x 1 jones devel 13 2002-09-21 16:51 foo
$ ./foo
-bash: ./foo: cannot execute binary file: Exec format error
$ echo $?
127
```

在这种情况下，Shell 尝试执行 `./foo`，但由于文件格式错误而失败，并返回退出状态码 127。

检查权限时，依次为用户、组和其他人。因此，文件的所有者可能无法读取文件，而组成员和其他用户却可以。

例如：

```bash
$ echo 'This is a secret' > top-secret
$ chmod 044 top-secret
$ ls -l top-secret
---------- 1 jones devel 17 2002-10-11 14:59 top-secret
$ cat top-secret
cat: top-secret: Permission denied
$ chmod u+r top-secret
$ ls -l top-secret
-r-------- 1 jones devel 17 2002-10-11 14:59 top-secret
$ cat top-secret
This is a secret
```

所有 UNIX 文件系统还提供额外的权限位，如 set-user-ID、set-group-ID 和 sticky 位。为了兼容旧系统并避免增加行长度，这些权限通常通过修改 `x` 权限字符来显示。详细信息请参阅 `chmod(1)`、`chmod(2)` 和 `ls(1)` 手册页。

出于安全原因，Shell 脚本绝不应设置 set-user-ID 或 set-group-ID 权限。

有时，商用软件会使用仅允许执行的权限（`--x--x--x`），以禁止复制、调试和追踪操作，但仍允许程序执行。

### 目录权限

到目前为止，我们讨论的是一般文件的权限。对于目录，这些权限的解释略有不同。

- **读取**：列出目录内容。
- **写入**：在目录中创建或删除文件。
- **执行**：访问目录及其子目录中的文件。

示例：

```bash
$ umask
22
$ mkdir test
$ ls -ld test
drwxr-xr-x 2 jones devel 512 Jul 31 13:34 test/
$ touch test/the-file
$ ls -l test
total 0
-rw-r--r-- 1 jones devel 0 Jul 31 13:34 test/the-file
```

现在，我们删除目录的读取权限，但保留执行权限：

```bash
$ chmod a-r test
$ ls -ld test
d-wx--x--x 2 jones devel 512 Jul 31 16:39 test/
$ ls -l test
ls: cannot open directory 'test': Permission denied
$ ls -l test/the-file
-rw-r--r-- 1 jones devel 0 Jul 31 13:34 test/the-file
```

删除目录的执行权限，但不恢复读取权限：

```bash
$ chmod a-x test
$ ls -ld test
d-w--w---- 2 jones devel 512 Jul 31 16:39 test/
$ ls -l test
ls: cannot open directory 'test': Permission denied
$ ls -l test/the-file
ls: cannot access 'test/the-file': Permission denied
$ cd test
cd: test: Permission denied
```

最后，恢复读取权限，但不恢复执行权限：

```bash
$ chmod a+r test
$ ls -ld test
drw-r--r-- 2 jones devel 512 Jul 31 13:34 test/
$ ls -l test
total 0
ls: cannot access 'test/the-file': Permission denied
$ ls -l test/the-file
ls: cannot access 'test/the-file': Permission denied
$ cd test
cd: test: Permission denied
```

缺乏对目录的执行权限意味着无法浏览其内容或将其设为当前工作目录。

当目录设置了粘连位（sticky bit）时，只有文件的所有者或目录的所有者才能删除目录中的文件。此功能常用于公共可写目录（如 `/tmp`、`/var/tmp` 和邮件目录），以防止用户删除不属于他们的文件。

在某些系统上，目录设置了 set-group-ID 位时，新创建的文件的组 ID 将是目录的组 ID 而非文件所有者的组 ID。这种行为在不同的系统上可能有所不同，请查阅你系统的 `mount` 命令手册页进行确认。

### 目录读取与执行权限

为什么读取目录和通过目录访问其子目录有不同的含义？答案很简单：它允许在看不到父目录的情况下仍能看到子目录下的文件。最常见的用法是在用户的网页结构中。根目录通常具有 `rwx--x--x` 权限，以防止组或其他用户查看目录内容或检查文件。但网页目录（如 `~/public_html`）及其子目录可以具有 `rwxr-xr-x` 权限，使得文件至少具有 `rw-r--r--` 权限。

另一个例子是，假设系统管理员出于安全原因需要对先前未受保护的文件子目录进行读取保护，只需删除该子目录顶层的根目录的读取和执行权限即可：`chmod a-rx dirname`。这将使所有子目录下的文件立即无法被打开（但已打开的文件不受影响），即使用户拥有个别文件的访问权限。

**注意**：一些 UNIX 系统支持访问控制列表（ACL），提供更细粒度的访问控制，可以针对个别用户和组指定非默认权限。不幸的是，ACL 工具的设置和显示在各系统间不尽相同，使其难以在异构环境中使用。如果想了解更多，请在你的系统下查找相关命令的手册页，如 `man -k acl` 或 `man -k 'access control list'`。

### 文件时间戳

UNIX 文件的 inode 条目记录了三个重要的时间戳：访问时间、inode 修改时间和数据修改时间。这些时间通常是从 epoch（即 1970 年 1 月 1 日 00:00:00 UTC）算起的秒数。不过，某些 UNIX 实现提供了更好的计时单位，以 UTC 计算的时间不受本地时区设置的影响。