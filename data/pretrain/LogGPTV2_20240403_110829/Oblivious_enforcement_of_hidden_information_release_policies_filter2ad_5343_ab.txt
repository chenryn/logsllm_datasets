The basic idea of the algorithm that we will present below
is that when a requesting principal pr contacts a principal
pi to ask about some assertion ei, pi must ensure that the
ciphertext that is returned to pr is the encryption of a ran-
dom value if any quoted assertion pj says ej in pi’s release
policy for the truth value of ei is false. If pi always waits for
pj to return a ciphertext corresponding to the truth value of
ej before pi returns an answer to pr, however, a policy cycle
will cause a deadlock.
Our solution is for pi to provisionally act as though the re-
quired ciphertext cj from pj was the encryption of a random
value if a request for cj was previously sent in the current
session but no reply has yet been received. That is, pi homo-
morphically combines the ciphertext ci that it will return to
the requesting principal pr with the encryption of a newly
generated random value. When the real response cj from
pj is eventually received, a number of these random values,
r1, r2, . . . , rn, may have been used, but pi can undo the eﬀect
of r1, r2, . . . , rn by computing (r1r2 ··· rn)−1 and homomor-
phically combining the encryption of this quantity with cj.
Since every ciphertext encrypted for p0 in a session is even-
tually combined into a single ciphertext, (r1r2 ··· rn)−1 will
cancel out r1r2 ··· rn in the ﬁnal ciphertext received by p0.
Speciﬁcally, each principal pi maintains a product table
indexed by the name of a principal, an assertion, and a ses-
sion identiﬁer. The product r1r2 ··· rn of all the random
values that pi generates while waiting for an answer from pj
concerning assertion ej in session sid is stored in table entry
product[pj, ej, sid] and pj’s answer cj is combined with the
encryption of product[pj, ej, sid]−1 when cj becomes avail-
able. Upon receiving a query concerning ei from a request-
ing principal pr in a session initiated by p0 and identiﬁed by
sid, pi initializes the ciphertext ci that will be returned to pr
with Ep0 (si), where si = 1 if ei is true and pi is (condition-
ally) willing to disclose this to p0 via pr, and si is a freshly
chosen random element of the message space M otherwise.
Then pi consults its release policy for disclosing the truth
value of ei to p0 via principal pr to obtain a list of quoted
assertions of the form pj says ej. For each assertion pj says
ej in this list, there are now two possible cases:
• If pi is not currently waiting for a reply from pj about
ej in the current session, then pi queries pj about ej
(also sending the session identiﬁer sid) and assigns 1
to product[pj, ej, sid]. When pj eventually replies with
a ciphertext cj, pi homomorphically combines both cj
and the encryption of product[pj, ej, sid]−1 with the
ciphertext ci that will be returned to pr: ci ← ci ⊗
cj ⊗ Ep0 (product[pj, ej, sid]−1).
• If pi has previously contacted pj about ej but has not
yet received a reply (possibly because this is the sec-
ond time around a cycle of quoted assertions), then
pi chooses a random element r from M and multi-
plies product[pj, ej, sid] by r: product[pj, ej, sid] ←
product[pj, ej, sid] · r. Then pi homomorphically com-
bines the encryption of r with the ciphertext ci that
will be returned to pr: ci ← ci ⊗ Ep0 (r).
Finally, pi returns the resulting ciphertext ci to pr.
While pi may be tempted to cache a ciphertext cj received
from principal pj so that pi will never need to query pj more
than once about any assertion within a single session, this is
inadvisable because the same random value would be reused
multiple times if cj was the encryption of a randomly chosen
element of the message space. That is, reusing cj would
not be indistinguishable from using a fresh element of the
message space chosen uniformly at random.
4. AN EXAMPLE
Suppose that Alice is a reporter who has heard a rumor
about a certain government agency. She asks Bob, who
works at this agency, whether the rumor is true (this is Bob’s
secret sB). Bob is willing to tell sB to Alice if his superior
Carol says that it is all right (Carol says eC ). Carol is not
willing to say that it is all right unless David also approves
(David says eD), while David is not willing to say that it
is all right unless Carol approves (Carol says eC ). Suppose
that Carol and David both approve of Bob telling Alice the
secret, so eC and eD are true.
In our protocol, Alice ﬁrst contacts Bob, who contacts
Carol, which causes Carol to contact David, who then con-
tacts Carol again. At this point the chain ends, since Carol
has already contacted David concerning eD in the current
session. The ciphertexts passed back up the chain from
Carol to Alice are shown in Figure 1. At the end of the
chain, Carol has not yet received a reply from David con-
cerning eD, so she chooses a random element r from M and
sets product[David, eD, sid] ← r. The encryption of r is
combined with the encryption of Carol’s secret sC (which
is 1, since eC is true), and the resulting ciphertext is then
returned to David. At this stage Carol has revealed no in-
formation about her secret value sC , since it is completely
obscured by multiplication with the random value r.
Upon receiving EAlice(rsC ) from Carol, David combines it
with the encryption of his secret sD (which is also 1 in this
case, because eD is true) and passes the resulting ciphertext
up the chain to Carol. While David does not know that this
ciphertext contains the random factor r, he can assume that
it contains the factor sC , which would be a random value
that conceals David’s secret sD unless eC is true. Upon re-
ceiving the combined ciphertext from David, Carol cancels
out the random factor r that she added earlier by combin-
ing EAlice(rsC sD) with EAlice(product[David, eD, sid]−1) =
EAlice(r−1). Carol also multiplies the combined secret by sC
for a second time, but this has no eﬀect since sC = 1 (if eC
were false, then Carol would use a new random value for sC
each time she is queried about eC ). Although r has now been
removed from the ciphertext, Carol’s secret sC is protected
by the inclusion of the factor sD. When Bob receives the
combined ciphertext from Carol, he contributes sB, yield-
ing EAlice(rr−1sBs2
C sD = 1,
Bob’s response to Alice is just EAlice(sB). Thus Alice has
no reason to believe that Bob has consulted anyone about
releasing his secret value sB.
C sD). Since rr−1 = 1 and s2
5. RELATED WORK
Hidden credentials [7, 2], oblivious signature-based enve-
lope (OSBE) [9], and multiauthority attribute-based encryp-
tion [3, 4] are cryptographic mechanisms that allow a mes-
sage to be protected by a release policy whose satisfaction is
veriﬁed by the recipient of the message. In hidden creden-
Alice
Bob
Carol
David
Conﬁrm rumor?
Tell Alice?
Tell Alice?
Tell Alice?
EAlice(rsC )
EAlice(rr−1sBs2
C sD)
EAlice(rr−1s2
C sD)
EAlice(rsC sD)
Figure 1: Queries and replies in the example of Section 4.
tials and OSBE, a message is encrypted in such a way that
only a recipient who possesses certain digital credentials can
decrypt the message. The identity of the intended recipient
needs to be known to the message sender when this infor-
mation is included in the recipient’s digital credentials, as is
usually the case. In multiauthority attribute-based encryp-
tion, a ciphertext is associated with a set of attributes such
that any user who has been issued decryption keys (possibly
by diﬀerent authorities) that correspond to a satisfying set
of attributes can decrypt the message. Thus no knowledge
of the identities of potential recipients is needed at the time
of message encryption. Unlike our work, however, in all of
these schemes decrypting the message implies knowledge of
at least one way of satisfying the sender’s release policy.
Protocols based on scrambled circuit evaluation can be
used to allow an information provider to keep a release policy
partially hidden even when a message recipient satisﬁes the
provider’s policy. The three schemes of progressively greater
complexity presented in [6] respectively reveal a superset of
the attributes in the policy, the number of attributes in the
policy that are satisﬁed, and an upper bound on the total
number of attributes in the policy. Nevertheless, these “hid-
den policies with hidden credentials” protocols still require
the message recipient to supply a set of credentials that po-
tentially satisﬁes the unknown policy.
In our system, the
issuers of the credentials would be contacted directly by the
information provider without any participation from the re-
cipient; the trade-oﬀ, of course, is that partial information
about the policy is revealed to the credential issuers.
Our work is also related to the notion of conﬁdentiality-
preserving distributed proof introduced in [8], which allows
information providers to place release conditions that are
veriﬁed by the querier on facts used in distributed inference.
On the one hand, these release conditions need to be known
to the querier, unlike the hidden dependencies in our pro-
tocol, but on the other, information providers communicate
only with the querier and not with one another, which hides
the source of dependency relationships from the providers of
facts that satisfy those dependencies.
6. CONCLUSION
In this paper we have described a scheme for enforcing in-
formation release policies whose satisfaction cannot be veri-
ﬁed by the principal holding the protected information, but
only by the principal requesting this information. Our con-
struction hides the information release policy being enforced
from the requesting principal and at the same time hides
whether the release policy was satisﬁed from the information
provider. The quoted assertions in the information release
policy can themselves have release conditions that must be
satisﬁed and our system functions correctly even when these
dependencies form cycles.
Acknowledgments
This research was supported by the National Science Foun-
dation under grant number CCF–0916015.
7. REFERENCES
[1] D. Boneh. The decision Diﬃe-Hellman problem. In
Proceedings of the Third International Symposium on
Algorithmic Number Theory, pages 48–63, 1998.
[2] R. W. Bradshaw, J. E. Holt, and K. E. Seamons.
Concealing complex policies with hidden credentials. In
Proceedings of the 11th ACM Conference on Computer
and Communications Security, pages 146–157, 2004.
[3] M. Chase. Multi-authority attribute based encryption.
In Proceedings of the Fourth Theory of Cryptography
Conference, pages 515–534, 2007.
[4] M. Chase and S. S. M. Chow. Improving privacy and
security in multi-authority attribute-based encryption.
In Proceedings of the 16th ACM Conference on
Computer and Communications Security, pages
121–130, 2009.
[5] T. ElGamal. A public key cryptosystem and a
signature scheme based on discrete logarithms. IEEE
Transactions on Information Theory, 31(4):469–472,
1985.
[6] K. Frikken, M. Atallah, and J. Li. Attribute-based
access control with hidden policies and hidden
credentials. IEEE Transactions on Computers,
55(10):1259–1270, 2006.
[7] J. E. Holt, R. W. Bradshaw, K. E. Seamons, and
H. Orman. Hidden credentials. In Proceedings of the
2003 ACM Workshop on Privacy in the Electronic
Society, pages 1–8, 2003.
[8] A. J. Lee, K. Minami, and N. Borisov.
Conﬁdentiality-preserving distributed proofs of
conjunctive queries. In Proceedings of the Fourth ACM
Symposium on Information, Computer, and
Communications Security, pages 287–297, 2009.
[9] N. Li, W. Du, and D. Boneh. Oblivious signature-based
envelope. Distributed Computing, 17(4):293–302, 2005.