regardless of the input.
Namely, send inputsi as the set {ui,j,0, di,j,0}j∈IN(2).
– Garbled keys. S1 sends garbled keys corresponding to input 0n2 (instead of input y).
– {Commit(ui,j,δi,j, Commit(ui,j,1−δi,j}j∈IN(2): replace the commitment of ui,j,1 with com-
– input OT. In the input OT, S1 replaces the garbled key that P1 did not choose with
mitments to 0.
random values.
• (Checked circuits) For i ∈ T , S1 prepares the second message as P2 with the following diﬀer-
ences.
– Circuit OT. S1 replaces the keys ki in the OT, with random values.
– Encrypted values. S1 replaces the values encrypted under key ki with encryption of 0
(under ki).
Indistinguishability. Indistinguishability of the simulation is proven through a sequence of hy-
brids.
Hybrid H0. This is the real world executions. S1 on input y runs as an honest P2.
Hybrid H1. (Changing circuit OT answers). In this hybrid S1 replaces the OT answers as fol-
lows. For i ∈ T (the circuits that will be checked), it replaces the value ki played in the i-th
circuit OT using a random value. For i /∈ T (the circuits that will be evaluated), replaces
the keys not asked by P ∗
1 with random values. Due to security of the OT H1 and H0 are
identical.
31
Hybrid H2. (Replacing PRF with fresh random values). In this hybrid S1 generated the garbled
circuits that must be evaluated (i.e., gci with i /∈ T ) and the OT, commitments etc., using fresh
randomness instead of the PRF evaluated on seedi. uses knowledge of the set T extracted
from the OT. Due to the pseudo-randomness of the PRF H2 and H1 are computationally
indistinguishable.
Hybrid H3. (Changing input OT answers). In this hybrid S1 replaces the keys not asked by P ∗
1 ,
with random values. Due to security of the OT H3 and H2 are identical.
Hybrid H4. (Playing with input 0n2 in the checked circuits). In this hybrid S1 computes the mes-
sages for the circuits that will be checked, running on input 0n2 instead of y. Namely, it
computes the encryption Enc(ki, inputsi ◦ inputsEqi ◦ outputsDecomi) so that it encrypts the
data corresponding to the input 0n2. Due to the semantic security of the encryption scheme,
hybrids H3 and H4 are indistinguishable. At this point S is not using the input y in the
sessions i ∈ T .
Hybrid H5. (Changing commitments ui,j,1 in the evaluated circuits).
In this hybrid, for all the
evaluated circuits i, S1 computes commitments ui,j,1 as commitment to 0. Due to the hiding
of EGCom, hybrids H4 and H5 are computationally indistinguishable.
Hybrid H6,j (with j = 1 to t − |T|). (Replacing evaluated circuits with fake circuits). In Hybrid
H6,j S1 replaces the ﬁrst j evaluated circuits with fake circuits that always output z. Due
to the security of the garbling scheme hybrids H5 and H6,1 and H6,j and H6,j+1 are indistin-
guishable.
Hybrid H7. (Changing the output labels in the cheating recovery box). In this hybrid S1 replaces
the entries corresponding to ¯z in the cheating recovery box. Namely, it replaces encryptions
Enc(label(gci, j, ¯zi), Ki,j,¯zi) with encryption of 0. Due to the semantic security of the underlying
encryption scheme, hybrids H7 and H6,t−|T| are indistinguishable.
Hybrid H8,i. (Playing with input 0n2 in the evaluated circuits). In this hybrid S1 plays with input
yi = 0 in all the evaluated circuits. This means that the input commitments are computed
as EGCom(h; 0, ri), where h = gw. Hybrids H8,i and H8,i+1 can be proved indistinguishable
under the DDH assumptions.
Hybrid H8,n2. This is the procedure of S1 playing in the ideal world.
P2 is corrupted. We describe the strategy of the simulator S2 for the case in which P ∗
2 is malicious.
The strategy of S2 is simple.
• Compute the ﬁrst message honestly as P1 but running with random inputs.
• When receiving the message from P ∗
2 proceed as follows: Emulate an honest P1 until the end
of the protocol. If P1 aborts, then abort. If P1 did not abort, then obtain the list of queries
Q|sid from Fnisc, and learn (qi, seedi) for i ∈ [t]\T .
• If there exists at least an i such that the randomness computed using seedi is consistent with
the circuit gci and all the messages computed for session i, then use seedi to extract P2’s
input.
32
• Send input(sid, y) to the ideal functionality Fnisc.
Indistinguishability. Indistinguishability of the simulation is proven through a sequence of hy-
brids.
Deﬁne a circuit gci to be good if it passes all the checks: Query qi yields to seedi that properly
generates the randomness for (a) the OT, (b) the labels ui,j,b,(c) the commitment to the labels
{Commit(ui,j,δi,j, Commit(ui,j,1−δi,j}j∈IN(2), (d) the circuit gci.
If a set of circuits is good, then it must hold that the input labels of such circuits are all consistent
with the same input3.
Hybrid H0. This is the real execution with S2 running as a honest P1 with input x.
Hybrid H1. In this hybrid S2 extracts the query qi for a good circuit gci that was chosen for
evaluation (due to the cut-and-choose many such i exist). Knowledge of qi allows S2 to re-
compute the garbled circuit gci and knowledge ki (obtained from OT) allows to compute the
input y (S2 obtain y also from the knowledge of Ki,j,0, Ki,j,1 for each j ∈ IN (2), that allows
to reconstruct the trapdoor w and therefore extract from the El-Gamal input commitment).
S2 then computes z = f (x, y) itself without evaluating the circuits. Note that if there exists
an i(cid:48) such that evaluation gci(cid:48) is semi-trusted and that outputs z(cid:48), then an honest P1 would
have extracted w from the two diﬀerent outputs4, and obtains y from the input commitments
(which are statistically binding, therefore there exists one unique y that can be decommitted).
The observability of the gRO allows S2 to extract queries for session sid and therefore derive
the input y.
Due to cut-and-choose, the probability that S2 fails in extracting the input from a good
circuit that was chosen for evaluation is 2−t, and therefore hybrid H0 and H1 are statistically
indistinguishable.
Hybrid H2,i with i = 1, . . . , i = n1. (Changing the input-OT with 0n1.) This hybrid is the same
as H1 except that now the simulator plays in the i-th input OT with xi = 0. Assume that
there is a distinguisher between H2,i and H2,i+1 then one can construct a malicious sender
S∗
OT of the one-sided OT, which is able to distinguish the input of an honest external receiver
R with the same probability.
The reduction work as follows. S∗
receiver R.
More speciﬁcally, this message consists in the parameters g0, h0, g1, h1, a proof proofcons and
the temporary public key ¯pkb that allows to retrieve the k-tuple corresponding to a bit b.
S∗
OT will use the same parameters and the same proof proofcons. Then for each index j  i, S∗
OT computes
parameters ¯pkj so to retrieve bit xj. Instead for index i it will use the parameters received
from the external receiver R.
OT receives the message oneside-COT1(b) from the external
3If not then the proof of equality would not go through. To see why, recall that P ∗
2 sends the El-Gamal commit-
ments of its input, the labels ui,j,b and a proof of equality inputsEq between the labels and the commitment of the
input. Because the El-Gamal commitments are perfectly binding, ﬁnding two accepting proofs inputsEq is impossible.
4Indeed, a semi-trusted has passed the tests for the decommitment of the output recovery box
33
2 , the sender S∗
Now, when receiving the message from P ∗
OT computes the output of the function
using the same procedure of the simulator S2 and using the observability of gRO and outputs
the same view.
Finally, S∗
OT presents the view to the distinguisher, and outputs whatever the distinguisher
outputs. Due to the indistinguishability of the one-sided OT protocol, hybrid H2,i and H2,i+1
are computationally indistinguishable.
Hybrid H3. (Changing the input in circuit-OT.) In this sequence of hybrids we want to show
that regardless of the input played by the simulator in the execution of circuit-OT, due to
the security of the OT, the probability that P1 aborts with a diﬀerent probability than S2 is
negligible.
Towards this end, we consider two sequence of hybrids: in hybrids {H 0
plays the circuit-OT with the i-th input set to 0. Then in hybrids {H ci
plays using as input a random bits.
3,i}i∈[t], the simulator
3,i}i∈[t] the simulator
Hybrid H 0
3,i, for i = 1, . . . , t. In this hybrid we wish to change the bits used in the circuit-OT,
3,i and H 0
3,i+1, S2 plays with oneside-COT1(0). A distin-
OT for
3,i+1 can be reduced to a malicious sender S∗
3,i+1 is that in H3,i S2 plays oneside-COT1(ci)
with all zeros. The diﬀerence between H 0
with a random bit ci, while in hybrid H 0
guisher between hybrids H 0
circuit-OT, as before.
Note that H 0
3,1 = H2,n1.
3,i and H 0
Hybrid H r
4,i, for i = 1, . . . , t. In this hybrid we wish to change the bits used in the circuit-OT
4,i S2 plays
4,i+1, S2 plays with oneside-COT1(ci) with a random
34,i+1 can be reduced to a malicious
4,t corresponds to the description of the simulator S2, and this com-
to be all random. The diﬀerence between H r
oneside-COT1(0), while in hybrid H r
bit ci. A distinguisher between hybrids H r
sender S∗
Note that hybrid H r
pletes the proof.
OT for circuit-OT, as before.
4,i+1 is that in H r
4,i and H r
4,i and H r
Acknowledgment
We thanks Vassilis Zikas for pointing out ways to improve the presentation of our model.
The ﬁrst author is supported by the Check Point Institute for Information Security, the NSF
SaTC MACS project, and NSF Algorithmic Foundations grant no. 1218461 The third author is
supported in part by NSF grants 09165174, 1065276, 1118126 and 1136174, US-Israel BSF grant
2008411, OKAWA Foundation Research Award, IBM Faculty Research Award, Xerox Faculty Re-
search Award, B. John Garrick Foundation Award, Teradata Research Award, and Lockheed-Martin
Corporation Research Award. This material is based upon work supported by the Defense Advanced
Research Projects Agency through the U.S. Oﬃce of Naval Research under Contract N00014 -11
-1-0392. The views expressed are those of the author and do not reﬂect the oﬃcial policy or position
of the Department of Defense or the U.S. Government.
34
References
[AMPR14] Arash Afshar, Payman Mohassel, Benny Pinkas, and Ben Riva. Non-interactive secure
computation based on cut-and-choose. In EUROCRYPT, pages 387–404, 2014.
[BR93]
Mihir Bellare and Phillip Rogaway. Random oracles are practical: A paradigm for
designing eﬃcient protocols. In ACM Conference on Computer and Communications
Security, pages 62–73, 1993.
[Can01]
Ran Canetti. Universally composable security: A new paradigm for cryptographic
protocols. In FOCS, pages 136–145, 2001.
[CDPW07] Ran Canetti, Yevgeniy Dodis, Rafael Pass, and Shabsi Walﬁsh. Universally composable
security with global setup. In TCC, pages 61–85, 2007.
[CDS94]
[CF01]
R. Cramer, I. Damgård, and B. Schoenmakers. Proofs of Partial Knowledge and Sim-
pliﬁed Design of Witness Hiding Protocols. In CRYPTO, pages 174–187, 1994.
Ran Canetti and Marc Fischlin. Universally composable commitments. In CRYPTO,
pages 19–40, 2001.
[CGH98] Ran Canetti, Oded Goldreich, and Shai Halevi. The random oracle methodology, revis-
ited (preliminary version). In STOC, 1998.
[CKL03]
Ran Canetti, Eyal Kushilevitz, and Yehuda Lindell. On the limitations of universally