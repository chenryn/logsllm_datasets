title:Assessing the Impact of Dynamic Power Management on the Functionality
and the Performance of Battery-Powered Appliances
author:Andrea Acquaviva and
Alessandro Aldini and
Marco Bernardo and
Alessandro Bogliolo and
Edoardo Bontà and
Emanuele Lattanzi
Assessing the Impact of Dynamic Power Management on
the Functionality and the Performance of Battery-Powered Appliances
A. Acquaviva, A. Aldini, M. Bernardo, A. Bogliolo, E. Bont`a, E. Lattanzi
Universit`a di Urbino “Carlo Bo”
Istituto di Scienze e Tecnologie dell’Informazione
Piazza della Repubblica 13, 61029 Urbino, Italy
Abstract
In this paper we provide an incremental methodology to as-
sess the effect of the introduction of a dynamic power man-
ager in a mobile embedded computing device. The method-
ology consists of two phases. In the ﬁrst phase, we verify
whether the introduction of the dynamic power manager al-
ters the functionality of the system. We show that this can
be accomplished by employing standard techniques based
on equivalence checking for noninterference analysis. In the
second phase, we quantify the effectiveness of the introduc-
tion of the dynamic power manager in terms of power con-
sumption and overall system efﬁciency. This is carried out
by enriching the functional model of the system with infor-
mation about the performance aspects of the system, and
by comparing the values of the power consumption and the
overall system efﬁciency obtained from the solution of the
performance model with and without dynamic power man-
ager. To this purpose, ﬁrst we employ a more abstract per-
formance model based on the Markovian assumption, then
we use a more realistic performance model – to be validated
against the Markovian one – where general probability dis-
tributions are considered. The methodology is illustrated by
means of its application to the study of a remote procedure
call mechanism – through which a battery-powered device
is used by some application requesting information – and
of a streaming video service – which is accessed by a mo-
bile client equipped with a power-manageable network in-
terface card.
1. Introduction
Reducing the power consumption is one of the major crite-
ria in the design of battery-powered devices typical of mod-
ern mobile embedded systems. This is achieved through the
application of dynamic power management (DPM) tech-
niques, i.e. techniques that – based on runtime conditions –
modify the power consumption of the devices by changing
n
o
i
t
c
u
r
t
s
n
o
c
t
c
e
r
r
o
c
y
b
e
t
a
d
i
l
a
v
noninterference
F
NO−DPM
.
F
DPM
.
p
x
e
d
d
a
g
n
i
m
i
t
M
NO−DPM
.
n
e
g
.
l
p
e
r
g
n
i
m
i
t
G
NO−DPM
perf. comp.
perf. comp.
p
x
e
d
d
a
g
n
i
m
i
t
M
DPM
.
n
e
g
.
l
p
e
r
g
n
i
m
i
t
G
DPM
n
o
i
t
c
u
r
t
s
n
o
c
t
c
e
r
r
o
c
y
b
e
t
a
d
i
l
a
v
Figure 1. Incremental methodology.
their state or by scaling their voltage or frequency. The ap-
proaches to DPM proposed in the literature have been clas-
siﬁed into deterministic schemes, predictive schemes, and
stochastic optimum control schemes. The schemes of the
ﬁrst class schedule the shutdown periods at ﬁxed time in-
stants, possibly depending on the occurrence of some event.
Instead, the schemes of the second class attempt to predict
the device usage behavior in the future based on historical
data patterns. Finally, the schemes of the third class make
probabilistic assumptions – based on observations – about
usage patterns to formulate an optimization problem. The
interested reader is referred to e.g. [1] for a survey of the
various DPM techniques.
Whenever a DPM technique is introduced in a battery-
powered device, the functionality and the performance of
the overall system may be altered. It is therefore important
to be able to assess – in the early stage of the system de-
sign – the impact of the introduction of a DPM, in order to
check that it does not signiﬁcantly change the system func-
tionality and that it does not cause an intolerable degrada-
tion of the system performance.
The objective of this paper is to provide an incremen-
tal methodology to study the effect of employing a DPM
on both the functionality and the performance of a mobile
battery-powered computing device. The proposed method-
ology is based on the application of formal analysis tech-
Proceedings of the 2004 International Conference on Dependable Systems and Networks (DSN’04) 
0-7695-2052-9/04 $ 20.00 © 2004 IEEE 
Authorized licensed use limited to: Tsinghua University. Downloaded on March 20,2021 at 05:37:20 UTC from IEEE Xplore.  Restrictions apply. 
niques to a formal description of the system in which the
considered device is embedded. Formal methods have been
successfully applied to DPM systems in order to optimize
DPM policies [9, 12]. In this paper, instead, we use for-
mal methods to assess the impact of DPM. The applica-
tion of the proposed methodology requires a sufﬁciently ex-
pressive speciﬁcation language, in order to build models of
the system functionality and performance, as well as a soft-
ware tool equipped with the necessary analysis routines, in
order to compare the properties of the models written in
such a language. Although the methodology does not de-
pend on a speciﬁc language, in order to illustrate it we use
the Æmilia [4] architectural description language, together
with its companion tool TwoTowers [2].
As shown in Fig. 1, the proposed methodology relies on
the comparison of three different models of the system with-
out and with DPM, each of which is incrementally obtained
from the previous one by adding further details.
The ﬁrst model of the system addresses only the func-
tional behavior of the system. This model is used to check
whether the introduction of the DPM alters the system func-
tionality or not, regardless of any speciﬁc timing of the sys-
tem activities. This is easily carried out by employing stan-
dard techniques borrowed from the ﬁeld of noninterference
analysis [8, 7]. More precisely, we verify whether the func-
tional model of the system with the DPM activities being
made unobservable is equivalent to the functional model of
the system with the DPM activities being prevented from
occurring (i.e., without the DPM). Should this not be the
case, the modal logic formula generated by the equivalence
checker to distinguish the two functional models can be
used as a diagnostic piece of information to guide the modi-
ﬁcation of the DPM and/or the system in order to avoid mis-
matches. Establishing noninterference prior to the introduc-
tion of a speciﬁc timing, which may rule out some behav-
iors, ensures that the DPM is transparent in itself, not be-
cause of the adoption of ad hoc assumptions.
The functional model is then enriched by means of the
speciﬁcation of the timing of each system activity, which
is provided through exponentially distributed random vari-
ables. The second model considered in the methodology is
thus a Markovian model. This model does not need to be
validated against the functional one, since it is directly ob-
tained by attaching rates to the state transitions of the func-
tional model. The Markovian model can be solved analyti-
cally (in an exact or approximate way) to compare the sys-
tem without and with DPM on the basis of certain average
performance measures – like energy consumption, system
throughput, radio channel utilization, and quality of service
– obtained when varying the DPM operation rates. Such
performance indices can easily be expressed through a com-
bined use of cumulative and instantaneous rewards.
The Markovian model is reﬁned in turn by replacing –
wherever necessary – the exponential delays with gener-
ally distributed delays, in order to more realistically reﬂect
the actual delays characterizing the system and the DPM in
practice. This general model must be validated against the
Markovian one. This is carried out by verifying that both
models result in comparable values for the considered av-
erage performance measures when substituting exponential
distributions for general distributions in the general model.
Once the validation succeeds, the general model (with real-
istic delays) can be simulated to estimate in a realistic set-
ting the same average performance measures as before for
different DPM operation rates, in the presence and in the
absence of the DPM. The comparison of the resulting ﬁg-
ures should guide the system designer in deciding whether
it is worth introducing the DPM in a certain realistic sce-
nario and, if so, in tuning the DPM operation rates without
compromising the achievement of the desired level of qual-
ity of service.
The paper is organized as follows. In Sect. 2 we intro-
duce the two case studies – a remote procedure call mecha-
nism and a streaming video service – that will be used to
illustrate the incremental methodology, together with the
adopted speciﬁcation language Æmilia. In Sect. 3 we ap-
ply noninterference analysis to both case studies, in order
to check that the introduction of DPM does not change the
system functionality perceived at the client side. In Sect. 4
we add exponentially distributed durations to the activities
of the functional models for both case studies, thus yielding
Markovian models to be used for comparing the values of
the performance measures related to the power consumption
and the overall system efﬁciency with and without DPM. In
Sect. 5 we construct realistic models of both case studies
by replacing the exponentially distributed delays with gen-
erally distributed delays. The general models are ﬁrst vali-
dated against the corresponding Markovian ones, then they
are used for comparing the estimates of the same perfor-
mance measures as above with and without DPM. In Sect. 6
we draw some conclusions and we discuss the practical ap-
plication of the proposed methodology.
2. Case Studies and Speciﬁcation Language
The incremental methodology is illustrated through its ap-
plication to two case studies, representative of real-world
DPM systems: a power-manageable server receiving re-
mote procedure calls from a blocking client and a mobile
client accessing a streaming video server through a power-
manageable wireless network interface card. In this section
we introduce the two case studies, which will be hereafter
denoted by rpc and streaming, respectively, together with
the speciﬁcation language Æmilia.
Proceedings of the 2004 International Conference on Dependable Systems and Networks (DSN’04) 
0-7695-2052-9/04 $ 20.00 © 2004 IEEE 
Authorized licensed use limited to: Tsinghua University. Downloaded on March 20,2021 at 05:37:20 UTC from IEEE Xplore.  Restrictions apply. 
busy
req
RCS
req
DPM
shutdown
S
C
idle
RSC
result
result
a)
cies. A trivial policy, where the DPM issues shutdown com-
mands according to a given distribution, independently of
the state of the server. A timeout policy, where shutdowns
are issued upon expiration of a ﬁxed (or randomized) time-
out after the server has entered the idle state.
S
frame
AP
frame
RSC
frame
NIC
frame
B
C
get
2.2. Streaming Video (streaming)
DPM
wakeup
shutdown
ready
empty buffer
b)
Figure 2. A picture of the two case studies: a)
a power-manageable server for remote procedure
calls; b) a streaming video server accessed by
a mobile client through a power-manageable net-
work interface card.
2.1. Remote Procedure Call (rpc)
Fig. 2.a) shows the topology of the rpc benchmark. The
client (C) synchronously interacts with the server (S)
through a full-duplex radio channel implemented by two
half-duplex channels: RCS, from C to S, and RSC, from S
to C. RCS is used by the client to send service requests (req)
to the server, while RSC is used by the server to send the re-
sults (res) back to the client. The server also interacts
with the DPM, which issues shutdown commands in or-
der to put the server in a low-power inactive state. Two
more signals (idle and busy) are used by the server to no-
tify the DPM about every change of its state.
More precisely, the server has four main states: idle (in
which it waits for service requests), busy (in which it de-
livers the requested service), sleeping (entered upon a shut-
down command received from the DPM), and awaking (a
transient state modeling a non-instantaneous wakeup from
sleeping to busy, triggered by a service request arrival).
When idle, the server is sensitive to shutdown commands.
Depending on the application, the server may be also sen-
sitive to shutdown commands when busy, in which case the
shutdown interrupts the service.
On the other side, in its easiest implementation the
blocking client
issues a service request, waits for re-
sults, and takes some time to process the results before is-
suing the next request. A simple timeout mechanism can be
introduced to resend a service request whenever the wait-
ing time exceeds a given threshold. This can happen be-
cause the half-duplex radio channels are not ideal, hence
they may introduce both a propagation delay and a packet
loss probability.
The DPM sends shutdown commands according to a
given policy, possibly based on the knowledge of the cur-
rent state of the server. We shall consider two different poli-
The top-level schematic of the streaming case study is
shown in Figure 2.b). The server (S) asynchronously sends
video frames (frame) to a buffer (B) that is local to the client
(C). The video frames are transmitted through a wireless
link modeled according to the IEEE802.11b [10] standard
for wireless LANs. The server is directly connected to an
access point (AP) that has an internal buffer possibly used
to reshape the trafﬁc, then AP uses a half-duplex radio chan-
nel (RSC) to send the video frames to the client network in-
terface card (NIC) connected to B. The non-blocking client
renders the video stream by taking (get) the video frames
from B at a given rate.
According to the IEEE 802.11b standard, the NIC pro-
vides MAC-level DPM support that can be enabled via soft-
ware. The actual implementation of the DPM support de-
pends on the NIC. We model the protocol policy called PSP,
which consists of placing the NIC in a low-power state –
doze mode – in which it sleeps. Periodically, the NIC wakes
up both to keep synchronized with the network and to check
the AP buffer for possible frames received during the sleep
period. In real systems, the support for the PSP DPM pol-
icy is implemented within the AP and the NIC. In order to
abstract from implementation details and to carry out nonin-
terference analysis, we model the DPM as an external com-
ponent that takes information about the current state of the
AP buffer and sends shutdown and wakeup commands to
the NIC. A shutdown is issued as soon as the AP buffer be-
comes empty, while wakeups are sent periodically.
Since video frames must be reproduced at a given rate,
frame requests (get) issued by the client represent real-time
constraints that are violated whenever the local buffer B is
not ready to provide the requested frame (frame miss). In
addition, a frame may be lost because of a buffer-full event
(frame loss).
2.3. The Speciﬁcation Language Æmilia
We now provide a brief overview of the Æmilia [4] archi-
tectural description language, chosen together with its com-
panion tool TwoTowers [2] to exemplify the incremental
methodology proposed in this paper.
Since a thorough description of Æmilia is beyond the
scope of this work (the interested reader is referred to [4]),
we use the functional model of our rpc case study as an ex-
ample to illustrate the key elements of the language. In par-
Proceedings of the 2004 International Conference on Dependable Systems and Networks (DSN’04) 
0-7695-2052-9/04 $ 20.00 © 2004 IEEE 
Authorized licensed use limited to: Tsinghua University. Downloaded on March 20,2021 at 05:37:20 UTC from IEEE Xplore.  Restrictions apply. 
ticular, we consider a simpliﬁed version of the rpc system
with ideal radio channels, a trivial DPM sending shutdown
requests independently of the current state of the server, a
server sensitive to shutdown commands both in the idle state
and in the busy state, and a blocking client that does not use
any timeout mechanism.
The Æmilia speciﬁcation of the functional model, which
starts with its name and the indication that there are no con-
stant data parameters:
ARCHI_TYPE RPC_DPM_Untimed(void)
is composed of two sections. In the ﬁrst section we deﬁne
the behavior and the interactions of the types of compo-
nents and connectors – generically called architectural el-
ement types (AETs) – that are in the system. The ﬁrst AET
that we deﬁne is related to the rpc server:
ARCHI_ELEM_TYPES
ELEM_TYPE Server_Type(void)
BEHAVIOR
Idle_Server(void; void) =
choice {
 . Busy_Server(),
 . Sleeping_Server()
};
Busy_Server(void; void) =
choice {
 .
Responding_Server(),
 . Sleeping_Server()
};
Responding_Server(void; void) =
choice {
 . Idle_Server(),
 . Sleeping_Server()
};
Sleeping_Server(void; void) =
 . Awaking_Server();
Awaking_Server(void; void) =
 . Busy_Server()
INPUT_INTERACTIONS
UNI receive_rpc_packet; receive_shutdown
OUTPUT_INTERACTIONS
UNI send_result_packet
INPUT_INTERACTIONS
UNI receive_result_packet
OUTPUT_INTERACTIONS
UNI send_rpc_packet