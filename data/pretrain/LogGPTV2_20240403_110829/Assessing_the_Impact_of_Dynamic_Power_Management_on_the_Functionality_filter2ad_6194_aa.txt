# Title: Assessing the Impact of Dynamic Power Management on the Functionality and Performance of Battery-Powered Appliances

# Authors: Andrea Acquaviva, Alessandro Aldini, Marco Bernardo, Alessandro Bogliolo, Edoardo Bontà, Emanuele Lattanzi

# Affiliations:
- Università di Urbino “Carlo Bo”
- Istituto di Scienze e Tecnologie dell’Informazione
- Piazza della Repubblica 13, 61029 Urbino, Italy

## Abstract
This paper introduces an incremental methodology to evaluate the impact of introducing a dynamic power manager (DPM) in a mobile embedded computing device. The methodology comprises two phases. In the first phase, we verify whether the DPM alters the system's functionality using standard techniques based on equivalence checking for noninterference analysis. In the second phase, we quantify the effectiveness of the DPM in terms of power consumption and overall system efficiency. This is achieved by enriching the functional model with performance-related information and comparing the values obtained from the performance model with and without the DPM. We employ both a more abstract Markovian performance model and a more realistic one, validated against the Markovian model. The methodology is illustrated through its application to a remote procedure call mechanism and a streaming video service.

## 1. Introduction
Reducing power consumption is a critical criterion in the design of battery-powered devices, particularly in modern mobile embedded systems. This is often achieved through dynamic power management (DPM) techniques, which modify the power consumption based on runtime conditions by changing the state or scaling the voltage or frequency of the devices. DPM approaches can be classified into deterministic, predictive, and stochastic optimal control schemes. 

When a DPM technique is introduced, it is essential to assess its impact on the system's functionality and performance early in the design process. This paper provides an incremental methodology to study the effect of DPM on both the functionality and performance of a mobile battery-powered computing device. The methodology uses formal analysis techniques applied to a formal description of the system. We use the Æmilia architectural description language and its companion tool, TwoTowers, to illustrate the methodology.

As shown in Figure 1, the methodology involves comparing three different models of the system: one without DPM and two with DPM, each incrementally adding more details.

## 2. Case Studies and Specification Language
The incremental methodology is demonstrated through two case studies: a power-manageable server receiving remote procedure calls and a mobile client accessing a streaming video server via a power-manageable wireless network interface card. We also introduce the Æmilia specification language used in the case studies.

### 2.1. Remote Procedure Call (RPC)
Figure 2(a) shows the topology of the RPC benchmark. The client (C) interacts synchronously with the server (S) through full-duplex radio channels. The server has four main states: idle, busy, sleeping, and awaking. The DPM sends shutdown commands based on the server's state. We consider two policies: a trivial policy where shutdowns are issued according to a given distribution, and a timeout policy where shutdowns are issued after a fixed or randomized timeout.

### 2.2. Streaming Video
Figure 2(b) shows the topology of the streaming video case study. The server (S) asynchronously sends video frames to a buffer (B) local to the client (C). The NIC supports DPM, placing it in a low-power doze mode. Wakeups are sent periodically to check for new frames. Frame requests represent real-time constraints, and frame losses can occur due to buffer-full events.

### 2.3. The Specification Language Æmilia
Æmilia is an architectural description language used to specify the functional and performance models of the system. A simplified example of the RPC system in Æmilia is provided below:

```plaintext
ARCHI_TYPE RPC_DPM_Untimed(void)
{
    ARCHI_ELEM_TYPES
    {
        ELEM_TYPE Server_Type(void)
        {
            BEHAVIOR
            {
                Idle_Server(void; void) = choice { Busy_Server(), Sleeping_Server() };
                Busy_Server(void; void) = choice { Responding_Server(), Sleeping_Server() };
                Responding_Server(void; void) = choice { Idle_Server(), Sleeping_Server() };
                Sleeping_Server(void; void) = Awaking_Server();
                Awaking_Server(void; void) = Busy_Server();
            }
            INPUT_INTERACTIONS
            {
                UNI receive_rpc_packet;
                UNI receive_shutdown;
            }
            OUTPUT_INTERACTIONS
            {
                UNI send_result_packet;
            }
        }
        ELEM_TYPE Client_Type(void)
        {
            INPUT_INTERACTIONS
            {
                UNI receive_result_packet;
            }
            OUTPUT_INTERACTIONS
            {
                UNI send_rpc_packet;
            }
        }
    }
}
```

## 3. Noninterference Analysis
We apply noninterference analysis to both case studies to ensure that the introduction of DPM does not alter the system's functionality as perceived by the client.

## 4. Markovian Models
We add exponentially distributed durations to the activities of the functional models, creating Markovian models to compare performance measures related to power consumption and overall system efficiency with and without DPM.

## 5. Realistic Models
We construct realistic models by replacing exponentially distributed delays with generally distributed delays. These models are validated against the Markovian models and used to compare performance measures with and without DPM.

## 6. Conclusions
We conclude by summarizing the findings and discussing the practical application of the proposed methodology.

---

This revised version aims to provide a clearer, more professional, and coherent presentation of the research.