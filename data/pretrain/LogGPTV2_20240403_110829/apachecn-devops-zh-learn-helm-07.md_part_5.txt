部署到`qa`或类似的测试环境后，可以再次运行前面描述的冒烟测试，以确保`qa`部署的基本功能正常工作。在这个阶段，你也可以包括任何其他的自动化测试，这些测试是在你的应用部署到`prod`之前验证其功能所必需的。这些细节已从该示例管道中省略。
管道的下一阶段称为`Wait for Input`:
```
stage('Wait for Input') {
    when {
        expression {
            return env.BRANCH_NAME == 'master'
        }
    }
    steps {
        container('chart-testing') {
            input 'Deploy to Prod?'
        }
    }
}
```
该输入步骤暂停詹金斯管道，并提示用户一个`Deploy to Prod?`问题。在运行作业的控制台日志中，用户有两个选择— `Proceed`和`Abort`。虽然生产部署可以自动执行，无需这一手动步骤，但许多开发人员和公司更喜欢在`non-prod`和`prod`部署之间有一个人工通道。该`input`命令为用户提供了一个机会来决定在`qa`阶段之后是继续部署还是中止管道。
如果用户决定继续，则执行最后阶段，称为`Deploy to Prod`:
```
dir('nginx-cd') {
  sh "helm upgrade --install nginx-${env.BRANCH_NAME} learnhelm/nginx --values common-values.yaml --values prod/values.yaml -n prod --wait"
}
```
除了生产专用的`values`文件和定义为`helm upgrade --install`命令一部分的`prod`命名空间之外，该阶段几乎与`Deploy to Dev`和`Deploy to QA`阶段相同。
既然已经概述了示例光盘管道，让我们观察一下当您升级您的詹金斯实例时开始的管道运行。
## 运行管道
要查看此光盘管道的运行情况，请导航至`Deploy NGINX Chart`作业的主分支。在詹金斯首页，点击**部署 NGINX 图表**和**主**。您的屏幕应该如下所示:
![Figure 7.15 – The master branch of the Deploy NGINX Chart CD pipeline ](img/Figure_7.15.jpg)
图 7.15–部署 NGINX 图表光盘管道的主分支
导航至该页面后，点击 **#1** 链接，导航至控制台日志:
![Figure 7.16 – The Console Output page for the Deploy NGINX Chart CD pipeline ](img/Figure_7.16.jpg)
图 7.16–部署 NGINX 图表光盘管道的控制台输出页面
当您导航到日志时，您应该会看到一个提示，上面写着`Deploy to Prod?.`我们将很快解决这个问题。首先，让我们回顾一下日志的开头，回顾一下到目前为止管道的执行情况。
你能看到的第一个部署是`dev`部署:
```
+ helm upgrade --install nginx-master learnhelm/nginx --values common-values.yaml --values dev/values.yaml -n dev --wait
Release 'nginx-master' does not exist. Installing it now.
NAME: nginx-master
LAST DEPLOYED: Thu Apr 30 02:07:55 2020
NAMESPACE: dev
STATUS: deployed
REVISION: 1
NOTES:
1\. Get the application URL by running these commands:
  export NODE_PORT=$(kubectl get --namespace dev -o jsonpath='{.spec.ports[0].nodePort}' services nginx-master)
  export NODE_IP=$(kubectl get nodes --namespace dev -o jsonpath='{.items[0].status.addresses[0].address}')
  echo http://$NODE_IP:$NODE_PORT
```
然后，您应该会看到烟雾测试，该测试由`helm test`命令运行:
```
+ helm test nginx-master -n dev
Pod nginx-master-test-connection pending
Pod nginx-master-test-connection pending
Pod nginx-master-test-connection succeeded
NAME: nginx-master
LAST DEPLOYED: Thu Apr 30 02:07:55 2020
NAMESPACE: dev
STATUS: deployed
REVISION: 1
TEST SUITE:     nginx-master-test-connection
Last Started:   Thu Apr 30 02:08:03 2020
Last Completed: Thu Apr 30 02:08:05 2020
Phase:          Succeeded
```
烟雾测试后出现了`qa`部署:
```
+ helm upgrade --install nginx-master learnhelm/nginx --values common-values.yaml --values qa/values.yaml -n qa --wait
Release 'nginx-master' does not exist. Installing it now.
NAME: nginx-master
LAST DEPLOYED: Thu Apr 30 02:08:09 2020
NAMESPACE: qa
STATUS: deployed
REVISION: 1
```
这将我们带到输入阶段，这是我们第一次打开日志时看到的:
![Figure 7.17 – The input step before deploying to prod       ](img/Figure_7.17.jpg)
图 7.17–部署到产品之前的输入步骤
单击**继续**链接继续管道执行，因为单击**中止**将使管道失败并阻止生产部署的发生。然后，您将看到`prod`部署发生:
```
+ helm upgrade --install nginx-master learnhelm/nginx --values common-values.yaml --values prod/values.yaml -n prod --wait
Release 'nginx-master' does not exist. Installing it now.
NAME: nginx-master
LAST DEPLOYED: Thu Apr 30 03:46:22 2020
NAMESPACE: prod
STATUS: deployed
REVISION: 1
```
最后，如果生产部署成功，您将在管道的末尾看到以下消息:
```
[Pipeline] End of Pipeline
Finished: SUCCESS
```
您可以从命令行手动验证部署是否成功。运行`helm list`命令找到`nginx-master`版本:
```
$ helm list -n dev
$ helm list -n qa
$ helm list -n prod
```
每个命令应该列出每个名称空间中的`nginx`版本:
```
NAME 	            NAMESPACE	    REVISION  	
nginx-master	      dev      	    1
```
您也可以使用`kubectl`列出每个命名空间中的 Pods，并验证是否部署了 NGINX:
```
$ kubectl get Pods -n dev
$ kubectl get Pods -n qa
$ kubectl get Pods -n prod
```
每个命名空间的结果将类似于以下内容(`dev`还将有一个在冒烟测试阶段执行的完整测试 Pod):
```
NAME                    READY   STATUS    RESTARTS   AGE
nginx-fcb5d6b64-rmc2j   1/1     Running   0          46m
```
在本节中，我们讨论了如何在 CD 管道中使用 Helm 在 Kubernetes 中跨多个环境部署应用。该管道依赖于 GitOps 在源代码管理中存储配置(即`values.yaml`文件)的实践，并引用这些文件来正确配置 NGINX。了解了 Helm 如何在光盘环境中使用，你现在可以清理你的迷你库集群了。
# 清理
要清理本章练习的迷你库集群，请删除`chapter7`、`dev`、`qa`和`prod`名称空间:
```
$ kubectl delete ns chapter7
$ kubectl delete ns dev
$ kubectl delete ns qa
$ kubectl delete ns prod
```
您也可以关闭您的迷你库虚拟机:
```
$ minikube stop
```
# 总结
在 CI 和 CD 管道中调用 Helm CLI 是进一步抽象 Helm 提供的功能的有效方法。图表开发人员可以通过编写一个配置项管道来自动化端到端的图表开发过程，该管道将图表链接、测试、打包并发布到图表存储库中。最终用户可以编写一个光盘管道，使用 Helm 在多个不同的环境中部署图表，利用 GitOps 确保应用可以作为代码进行部署和配置。编写管道有助于开发人员和公司更快、更容易地扩展应用，方法是对流程进行抽象和自动化，否则这些流程可能会变得乏味并引入人为错误。
在下一章中，我们将介绍 Helm CLI 的另一个抽象选项——编写 Helm 操作符。
# 进一步阅读
要了解更多关于图表测试容器映像的信息，请访问[https://helm.sh/blog/chart-testing-intro/](https://helm.sh/blog/chart-testing-intro/)。
要了解更多关于 Jenkins 和 Jenkins 管道的信息，请查看 Jenkins 项目文档([https://jenkins.io/doc/](https://jenkins.io/doc/))、Jenkins 管道文档([https://jenkins.io/doc/book/pipeline/](https://jenkins.io/doc/book/pipeline/))和多分支管道插件文档([https://plugins.jenkins.io/workflow-multibranch/](https://plugins.jenkins.io/workflow-multibranch/))。
# 问题
1.  CI 和 CD 有什么区别？
2.  CI/CD 和 GitOps 有什么区别？
3.  创建和发布 Helm 图表的 CI/CD 管道中包含哪些高级步骤？
4.  CI 给图表开发者带来了哪些优势？
5.  部署 Helm 图表的光盘管道包括哪些高级步骤？
6.  光盘管道给图表的最终用户带来了哪些优势？
7.  如何将一个应用的配置维护为多个环境的代码？你能做些什么来减少跨`values`文件的样板文件？