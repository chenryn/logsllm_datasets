# Activism
## [Collaborating tools](collaborating_tools.md)
* New: Introduce collaborating tools.
    Collaborating document creation:
    - https://pad.riseup.net
    - https://rustpad.io . [Can be self hosted](https://github.com/ekzhang/rustpad)
    Collaborating through terminals:
    - [sshx](https://sshx.io/) looks promising although I think it uses their servers to do the connection, which is troublesome.
# Life Management
## [Life Review](life_review.md)
* New: Introduce the analysis of life process.
    It's interesting to do analysis at representative moments of the year. It gives it an emotional weight. You can for example use the solstices or my personal version of the solstices:
    - Spring analysis (1st of March): For me the spring is the real start of the year, it's when life explodes after the stillness of the winter. The sun starts to set later enough so that you have light in the afternoons, the climate gets warmer thus inviting you to be more outside, the nature is blooming new leaves and flowers. It is then a moment to build new projects and set the current year on track.
    - Summer analysis (1st of June): I hate heat, so summer is a moment of retreat. Everyone temporarily stop their lives, we go on holidays and all social projects slow their pace. Even the news have even less interesting things to report. It's so hot outside that some of us seek the cold refuge of home or remote holiday places. Days are long and people love to hang out till late, so usually you wake up later, thus having less time to actually do stuff. Even in the moments when you are alone the heat drains your energy to be productive. It is then a moment to relax and gather forces for the next trimester. It's also perfect to develop *easy* and *chill* personal projects that have been forgotten in a drawer. Lower your expectations and just flow with what your body asks you.
    - Autumn analysis (1st of September): September it's another key moment for many people. We have it hardcoded in our life since we were children as it was the start of school. People feel energized after the summer holidays and are eager to get back to their lives and stopped projects. You're already 6 months into the year, so it's a good moment to review your year plan and decide how you want to invest your energy reserves.
    - Winter analysis (1st of December): December is the cue that the year is coming to an end. The days grow shorter and colder, they basically invite you to enjoy a cup of tea under a blanket. It is then a good time to get into your cave and do an introspection analysis on the whole year and prepare the ground for the coming year.
    We see then that the year is divided in two sets of an expansion trimester and a retreat one. We can use this information to plan our tasks accordingly. In the expansion trimester we could invest more energies in the planning, and in the retreat ones we can do more throughout reviews.
### [Life planning](life_planning.md)
* New: [Introduce the month planning process.](life_planning.md#month-plan)
    The objectives of the month plan are:
    - Define the month objectives according to the trimester plan and the insights gathered in the past month review.
    - Make your backlog and todo list match the month objectives
    - Define the philosophical topics to address
    - Define the topics to learn
    - Define the are of habits to incorporate?
    - Define the checks you want to do at the end of the month.
    - Plan when is it going to be the next review.
    It's interesting to do the plannings on meaningful days such as the first one of the month. Usually we don't have enough flexibility in our life to do it exactly that day, so schedule it the closest you can to that date. It's a good idea to do both the review and the planning on the same day.
    We'll divide the planning process in these phases:
    - Prepare
    - Clarify your state
    - Decide the month objectives
    Prepare:
    It's important that you prepare your environment for the planning. You need to be present and fully focused on the process itself. To do so you can:
    - Make sure you don't get interrupted:
        - Check your task manager tools to make sure that you don't have anything urgent to address in the next hour.
        - Disable all notifications
    - Set your analysis environment:
        - Put on the music that helps you get *in the zone*.
        - Get all the things you may need for the review:
            - The checklist that defines the process of your planning (this document in my case).
            - Somewhere to write down the insights.
            - Your task manager system
            - Your habit manager system
            - Your *Objective list*.
            - Your *Thinking list*.
            - Your *Reading list*.
        - Remove from your environment everything else that may distract you
    Clarify your state:
    To be able to make a good decision on your month's path you need to sort out which is your current state. To do so:
    - Clean your inbox: Refile each item until it's empty
    - Clean your todo: Review each todo element by deciding if they should still be in the todo. If they do and they belong to a month objective, add it. If they don't need to be in the todo, refile it.
    - Clean your someday: Review each relevant someday element (not the ones that are archive at greater levels than month) and decide if they should be refiled elsewhere and if they are part of a month objective that should be dealt with this month.
    - Adress each of the trimester objectives by creating month objectives that get you closer to the desired objective.
    Decide the next steps:
    For each of your month objectives:
    - Decide wheter it makes sense to address it this month. If not, archive it
    - Create a clear plan of action for this month on that objective
    - Tweak your *things to think about list*.
    - Tweak your *reading list*.
    - Tweak your *habit manager system*.
## Task Management
### [Org Mode](orgmode.md)
* New: [The orgmode repository file organization.](orgmode.md#the-orgmode-repository-file-organization)
    How to structure the different orgmode files is something that has always confused me, each one does it's own way, and there are no good posts on why one structure is better than other, people just state what they do.
    I've started with a typical [gtd](gtd.md) structure with a directory for the `todo` another for the `calendar` then another for the `references`. In the `todo` I had a file for personal stuff, another for each of my work clients, and the `someday.org`. Soon making the internal links was cumbersome so I decided to merge the personal `todo.org` and the `someday.org` into the same file and use folds to hide uninteresting parts of the file. The reality is that I feel that orgmode is less responsive and that I often feel lost in the file.
    I'm now more into the idea of having files per project in a flat structure and use an index.org file to give it some sense in the same way I do with the mkdocs repositories. Then I'd use internal links in the todo.org file to organize the priorities of what to do next.
    Benefits:
    - As we're using a flat structure at file level, the links between the files are less cumbersome `file:./project.org::*heading`. We only need to have unique easy to remember names for the files, instead of having to think on which directory was the file I want to make the link to. The all in one file structure makes links even easier, just `*heading`, but the disadvantages make it not worth it.
    - You have the liberty to have a generic link like `Work on project` or if you want to fine grain it, link the specific task of the project
    - The todo file will get smaller.
    - It has been the natural evolution of other knowledge repositories such as blue
    Cons:
    - Filenames must be unique. It hasn't been a problem in blue.
    - Blue won't be flattened into Vida as it's it's own knowledge repository
* New: [Syncronize orgmode repositories.](orgmode.md#synchronizations)
    I use orgmode both at the laptop and the mobile, I want to syncronize some files between both with the next requisites:
    - The files should be available on the devices when I'm not at home
    - The synchronization will be done only on the local network
    - The synchronization mechanism will only be able to see the files that need to be synched.
    - Different files can be synced to different devices. If I have three devices (laptop, mobile, tablet) I want to sync all mobile files to the laptop but just some to the tablet).
    Right now I'm already using [syncthing](syncthing.md) to sync files between the mobile and my server, so it's tempting to use it also to solve this issue. So the first approach is to spawn a syncthing docker at the laptop that connects with the server to sync the files whenever I'm at home.
    I've investigated the next options:
    - [Mount the whole orgmode repository with syncthing](orgmode.md#mount-the-whole-orgmode-repository-with-syncthing)
    - [Mount a specific directory to sync](orgmode.md#mount-a-specific-directory-to-sync)
    - [Use the org-orgzly script](orgmode.md#use-the-org-orgzly-script)
## Knowledge Management
### [Anki](anki.md)
* New: [What to do with unneeded cards.](anki.md#what-to-do-with-unneeded-cards)
    You have three options:
    - Suspend: It stops it from showing up permanently until you reactivate it through the browser.
    - Bury: Just delays it until the next day.
    - Delete: It deletes it forever.
    Unless you're certain that you are not longer going to need it, suspend it.
* New: [Configure self hosted synchronization.](anki.md#configure-self-hosted-synchronization)
    Explain how to install `anki-sync-server` and how to configure Ankidroid
    and Anki. In the end I dropped this path and used Ankidroid alone with
    syncthing as I didn't need to interact with the decks from the computer. Also the ecosystem of synchronization in Anki at 2023-11-10 is confusing as there are many servers available, not all are compatible with the clients and Anki itself has released it's own so some of the community ones will eventually die.
# Coding
## Languages
### [Bash snippets](bash_snippets.md)
* New: [Loop through a list of files found by find.](bash_snippets.md#loop-through-a-list-of-files-found-by-find)
    For simple loops use the `find -exec` syntax:
    ```bash
    find . -name '*.txt' -exec process {} \;
    ```
    For more complex loops use a `while read` construct:
    ```bash
    find . -name "*.txt" -print0 | while read -r -d $'\0' file
    do
        …code using "$file"
    done
    ```
    The loop will execute while the `find` command is executing. Plus, this command will work even if a file name is returned with whitespace in it. And, you won't overflow your command line buffer.
    The `-print0` will use the NULL as a file separator instead of a newline and the `-d $'\0'` will use NULL as the separator while reading.
    How not to do it:
    If you try to run the next snippet:
    ```bash
    for file in $(find . -name "*.txt")
    do
        …code using "$file"
    done
    ```
    You'll get the next [`shellcheck`](shellcheck.md) warning:
    ```
    SC2044: For loops over find output are fragile. Use find -exec or a while read loop.
    ```
    You should not do this because:
    Three reasons:
    - For the for loop to even start, the find must run to completion.
    - If a file name has any whitespace (including space, tab or newline) in it, it will be treated as two separate names.
    - Although now unlikely, you can overrun your command line buffer. Imagine if your command line buffer holds 32KB, and your for loop returns 40KB of text. That last 8KB will be dropped right off your for loop and you'll never know it.
### [pytelegrambotapi](pytelegrambotapi.md)
* New: Introduce pytelegrambotapi.
    [pyTelegramBotAPI](https://github.com/eternnoir/pyTelegramBotAPI) is an synchronous and asynchronous implementation of the [Telegram Bot API](https://core.telegram.org/bots/api).
    [Installation](https://pytba.readthedocs.io/en/latest/install.html):
    ```bash
    pip install pyTelegramBotAPI
    ```
* New: [Create your bot.](pytelegrambotapi.md#create-your-bot)
    Use the `/newbot` command to create a new bot. `@BotFather` will ask you for a name and username, then generate an authentication token for your new bot.
    - The `name` of your bot is displayed in contact details and elsewhere.
    - The `username` is a short name, used in search, mentions and t.me links. Usernames are 5-32 characters long and not case sensitive – but may only include Latin characters, numbers, and underscores. Your bot's username must end in 'bot’, like `tetris_bot` or `TetrisBot`.
    - The `token` is a string, like `110201543:AAHdqTcvCH1vGWJxfSeofSAs0K5PALDsaw`, which is required to authorize the bot and send requests to the Bot API. Keep your token secure and store it safely, it can be used by anyone to control your bot.
    To edit your bot, you have the next available commands:
    - `/setname`: change your bot's name.
    - `/setdescription`: change the bot's description (short text up to 512 characters). Users will see this text at the beginning of the conversation with the bot, titled 'What can this bot do?'.
    - `/setabouttext`: change the bot's about info, a shorter text up to 120 characters. Users will see this text on the bot's profile page. When they share your bot with someone, this text is sent together with the link.
    - `/setuserpic`: change the bot's profile picture.
    - `/setcommands`: change the list of commands supported by your bot. Users will see these commands as suggestions when they type / in the chat with your bot. See commands for more info.
    - `/setdomain`: link a website domain to your bot. See the login widget section.
    - `/deletebot`: delete your bot and free its username. Cannot be undone.
* New: [Synchronous TeleBot.](pytelegrambotapi.md#synchronous-telebot)
    ```python
    import telebot
    API_TOKEN = ''
    bot = telebot.TeleBot(API_TOKEN)
    @bot.message_handler(commands=['help', 'start'])
    def send_welcome(message):
        bot.reply_to(message, """\
    Hi there, I am EchoBot.
    I am here to echo your kind words back to you. Just say anything nice and I'll say the exact same thing to you!\
    """)
    @bot.message_handler(func=lambda message: True)
    def echo_message(message):
        bot.reply_to(message, message.text)
    bot.infinity_polling()
    ```
* New: [Asynchronous TeleBot.](pytelegrambotapi.md#asynchronous-telebot)
    ```python
    from telebot.async_telebot import AsyncTeleBot
    bot = AsyncTeleBot('TOKEN')
    @bot.message_handler(commands=['help', 'start'])
    async def send_welcome(message):
        await bot.reply_to(message, """\
    Hi there, I am EchoBot.
    I am here to echo your kind words back to you. Just say anything nice and I'll say the exact same thing to you!\
    """)
    @bot.message_handler(func=lambda message: True)
    async def echo_message(message):
        await bot.reply_to(message, message.text)
    import asyncio
    asyncio.run(bot.polling())
    ```
### [Configure Docker to host the application](python_docker.md)
* New: [Dockerize a PDM application.](python_docker.md#using-pdm)
    It is possible to use PDM in a multi-stage Dockerfile to first install the project and dependencies into `__pypackages__` and then copy this folder into the final stage, adding it to `PYTHONPATH`.
    ```dockerfile
    FROM python:3.11-slim-bookworm AS builder
    RUN pip install pdm
    COPY pyproject.toml pdm.lock README.md /project/
    COPY src/ /project/src
    WORKDIR /project
    RUN mkdir __pypackages__ && pdm sync --prod --no-editable
    FROM python:3.11-slim-bookworm
    ENV PYTHONPATH=/project/pkgs
    COPY --from=builder /project/__pypackages__/3.11/lib /project/pkgs
    COPY --from=builder /project/__pypackages__/3.11/bin/* /bin/
    CMD ["python", "-m", "project"]
    ```
### [Pytest](pytest-xprocess.md)
* New: [Stop pytest right at the start if condition not met.](pytest.md#stop-pytest-right-at-the-start-if-condition-not-met)
    Use the `pytest_configure` [initialization hook](https://docs.pytest.org/en/4.6.x/reference.html#initialization-hooks).
    In your global `conftest.py`:
    ```python
    import requests
    import pytest
    def pytest_configure(config):
        try:
            requests.get(f'http://localhost:9200')
        except requests.exceptions.ConnectionError:
            msg = 'FATAL. Connection refused: ES does not appear to be installed as a service (localhost port 9200)'
            pytest.exit(msg)
    ```
    - Note that the single argument of `pytest_configure` has to be named `config`.
    - Using `pytest.exit` makes it look nicer.
* New: Introduce pytest-xprocess.
    [`pytest-xprocess`](https://github.com/pytest-dev/pytest-xprocess) is a pytest plugin for managing external processes across test runs.
    [Installation](https://pytest-xprocess.readthedocs.io/en/latest/#quickstart):
    ```bash
    pip install pytest-xprocess
    ```
    [Usage](https://pytest-xprocess.readthedocs.io/en/latest/#quickstart):
    Define your process fixture in `conftest.py`:
    ```python
    import pytest
    from xprocess import ProcessStarter
    @pytest.fixture
    def myserver(xprocess):
        class Starter(ProcessStarter):
            # startup pattern
            pattern = "[Ss]erver has started!"
            # command to start process
            args = ['command', 'arg1', 'arg2']
        # ensure process is running and return its logfile
        logfile = xprocess.ensure("myserver", Starter)
        conn = # create a connection or url/port info to the server
        yield conn
        # clean up whole process tree afterwards
        xprocess.getinfo("myserver").terminate()
    ```
    Now you can use this fixture in any test functions where `myserver` needs to be up and `xprocess` will take care of it for you.