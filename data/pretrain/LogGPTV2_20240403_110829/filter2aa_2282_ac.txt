# Proxmark3 and RFID Hacking Tools

## Proxmark3's Interfaces and Components

### Serial Peripheral Interface (SPI)
The SPI is used for critical functions such as driving the coil and reading from the analogue-to-digital converters. The FPGA also implements a synchronous serial port (SSP) for low-frequency data communication between the FPGA and the ARM processor.

**Figure 4: Annotated Proxmark3 (Xilinx Spartan-II FPGA)**
- [Proxmark3 GitHub Repository](https://github.com/Proxmark/proxmark3)
- [Proxmark3 Purchase Link](http://store.ryscc.com/collections/proxmark-3/products/naked-proxmark-3) - $229 as of 7/17/2015

## Proxmark3’s CPU
An Atmel 32-bit RISC processor (AT91SAM7SXX series) handles all high-level functions on the Proxmark3 board. The ARM processor loads configurations into the FPGA for different operational modes, such as switching between high and low frequency modes. All USB communication from the client application is managed by the ARM processor before deciding on any actions involving the FPGA.

**Source Code:**
- [ARM Source Code](https://github.com/Proxmark/proxmark3/tree/master/armsrc)
- [Command Definitions](https://github.com/Proxmark/proxmark3/search?q="define+CMD_ACK"&type=Code)
- [LUA Script for Commands](https://github.com/Proxmark/proxmark3/blob/master/client/lualibs/commands.lua)

**Main Logic:**
- The main logic in the ARM processor is found in `AppMain()` within `appmain.c`.
- After initialization, the ARM loops, checking for USB commands or button presses.
- Commands sent over the USB serial link are represented with opcodes defined across header files and maintained in a LUA script.
- `UsbPacketReceived()` translates these commands into function calls on the ARM.

**Data Handling:**
- Samples from the FPGA are stored in a DMA buffer on the ARM, referred to as BigBuf.
- This data may include samples from the ADC or data for the Mifare emulator.
- In sniffer mode, the ARM can attempt to simultaneously decode signals with both Manchester and Modified Miller encoding, looking for valid signals.
- Contents can be sent to the host for other types of analysis, including visual inspection. (Refer to `BigBuf.c` for buffer-related functions.)

**Figure 5: Atmel 32-bit RISC Microcontroller**

## Proxmark3’s ADC
The Spartan-II FPGA connects to a Texas Instruments TLC5540 analogue-to-digital converter (ADC). This 8-bit ADC sends readings from the coil to the FPGA via an 8-pin bus. The FPGA uses SPI to control the ADC and SSP to share data with the ARM. The TLC5540 can collect up to 40 million samples per second, providing a theoretical maximum of 20MHz according to the Nyquist rate.

**Figure 6: TI TLC5540 8-bit 40MSPS ADC**

## Proxmark3’s Connections
The Proxmark3 design uses a Hirose 4-pin connector for the antenna and mini-USB for both data and power. USB support emulates a USB serial connection, allowing it to operate without driver installation on most systems. The Proxmark3 also offers general-purpose and JTAG pins. For human I/O, there is a single button and multiple lights to provide feedback about the device's status during operation.

**Figure 7: Proxmark3 I/O**

## The NXP PN533 NFC Transceiver Chipset
The PN533 transceiver module is fully compatible with ISO14443a, ISO14443b, and FeliCa tags in reader and writer modes. It is also interoperable with ISO18092 and ECMA 340 peer-to-peer communication and comes in a convenient USB enclosure with libNFC support. This tool benefits from the NXP chipset, ensuring better interoperability, especially with changeable UID tags. The PN533 USB dongle allows for experimentation with Linux RFID tools, such as those included with Kali Linux. The PN533 USB package is available from various sources, generally ranging from $40-$60, including test cards.

**Figure 8: Example PN533 USB Dongle**

**Libnfc Support:**
- Libnfc is a great tool for identifying tags and performing research on target systems.
- The PN533 is one of many available NFC USB peripherals with support for libNFC.
- [Libnfc Documentation](http://nfc-tools.org/index.php?title=Libnfc)

## RFIDler
A product of Aperture Labs, RFIDler was originally funded via Kickstarter and was available for sale as the 'v22-beta' revision board and coil at DEF CON 22. The goal of RFIDler is to create an extremely simple and low-cost circuitry for interacting with low-frequency RFID. The circuits use outputs from a PIC microcontroller along with basic analogue circuitry to form and read 125kHz modulated signals. A 3D case was designed by Aperture Labs and published as a free model on Thingiverse.

**RFIDler Internals:**
- A basic LC tank is used for the antenna, driven by the PIC32 microcontroller and amplified with analogue components.
- Digital potentiometers control thresholds for determining logic levels while interpreting signals.
- Numerous LED outputs visually indicate the device status.
- Automatic command execution allows for basic stand-alone operation.

**Figure 9: The Annotated RFIDler**

**Challenges:**
- The RFIDler acquired at DEF CON 22 has issues reading most tag formats.
- Significant time is required to find the sweet spot and adjust POTSET values.
- A rectangular multi-layer coil antenna tuned for the RFIDler v22-beta board was made, but consistent tag reads were still not possible.
- The RFIDler tends to indicate false positives, which can be misleading.

**References:**
- [PN533 Data Sheet](http://www.nxp.com/documents/short_data_sheet/PN533_SDS.pdf)
- [RFIDler Kickstarter Page](https://www.kickstarter.com/projects/1708444109/rfidler-a-software-defined-rfid-reader-writer-emul)
- [RFIDler 3D Case Model](http://www.thingiverse.com/thing:427536)

---

This optimized version provides a more structured and professional presentation of the information, making it easier to understand and follow.