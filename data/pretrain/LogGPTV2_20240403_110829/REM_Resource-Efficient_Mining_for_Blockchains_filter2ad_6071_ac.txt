which we may represent as a random variable Yi. With-
out loss of generality, we may set τ = 1/(d × rate) and
thus λ = 1 and E[Pois[λ ]] = 1.
We represent the state of an honest miner at timestep n
i=1Yi)−
i=1(Yi−E[Yi]) = (∑n
by a random variable Xn = ∑n
n. Thus Xn ∈ Z is simply difference between the miner’s
actually mined blocks and the expected number.
Our Markov chain consists of a set of states C = Z
representing possible values of Xn (we use the notation C
here, as states represent |Cm| for an honest miner m). Fig-
ure 3 gives a simple example of such a chain (truncated
to only four states).
Our statistical testing regime may be viewed as reject-
ing blocks when a transition is made to a state whose
value is above a certain threshold thresh. We denote the
set of such states Crej = { j| j ≥ thresh} ∈ C and depict
corresponding nodes visually in our example in Figure 3
as red. Pstat sets thresh according to the statistical-testing
regime we describe above and a desired false-rejection
(Type-I) parameter α. Speciﬁcally,
Crej[α] = { j ∈ Z| j ≥ F−1(1− α,τ × rate)}.
(1)
The transition probabilities in our Markov chain are:
if j ≥ i− 1
otherwise
P[i → j|i ∈ C\Crej[α]] =
(cid:26) P( j− i + 1)
(cid:26) P( j + 1)
0
0
(2)
if j ≤ −1
otherwise.
P[i → j|i ∈ Crej[α]] =
(3)
An example of transitions is given in Figure 3. For
instance, from state −1, the next state can be −2 if the
USENIX Association
26th USENIX Security Symposium    1433
P(1)
−1
···
P(0)
P(1)
P(0)
P(2)
0
P(1)
+1
P(3)
P(4)
P(3)
+2
P(2)
P(3)
)
t
a
αs
t
P
(
S
A
v
d
A
···
1.3
1.2
1.1
1
0
α = 0.1
α = 0.2
α = 0.4
α = 0.6
20
40
t [days]
60
)
t
a
t
s
P
(
e
t
s
a
W
0.2
0.1
0
0
α = 0.1
α = 0.2
α = 0.4
α = 0.6
20
40
t [days]
60
Figure 3: Markov chain with states C representing Pstat. Red
nodes show the rejection set Crej = Z+, i.e., thresh = 1. Out-
going edges from 0 are omitted for clarity.
1.2
1.1
)
t
a
αs
t
P
(
S
A
v
d
A
1
0
Advantage (left)
broken CPU (right)
honest CPU (right)
20
40
t [days]
1,500
1,000
500
t
n
u
o
C
k
c
o
l
B
0
60
(a) Left y-axis: adversarial advantage of Pstat. Right y-axis:
the number of blocks mined by a compromised CPU versus an
honest CPU.
0.15
0.1
0.05
)
t
a
αs
t
P
(
e
t
s
a
W
0
0
Waste (left)
Rejected Blocks (right)
20
40
t [days]
20
10
t
n
u
o
C
k
c
o
l
B
0
60
(b) Left y-axis: the waste of Pstat. Right y-axis: the number of
rejected blocks.
Figure 4: 60-day simulation of Pstat. The fastest honest CPU
mines one block per hour. The Markov chain analysis yields a
long-term advantage upper bound of 1.006 and waste of 0.006.
miner doesn’t produce any block in this step with prob-
ability P(0), or state −2 + i if the miner produces i + 1
blocks in this step, thus with probability P(i + 1).
Finally, an upper bound on the false rejection rate
can be derived from the stationary probabilities of the
Markov chain. Letting q(s) denote the stationary proba-
bility of state s,
Waste(Pα
stat) = ∑
s∈Crej[α]
sq(s).
(4)
We compare our analytic bounds with simulation re-
sults in below.
Adversarial Advantage We denote by Σstat the strat-
egy of an adversary that publishes blocks as soon as they
(a) The adversarial advan-
tage of Pstat under different α
Figure 5: 60-day simulation of Pstat, under various α. The
fastest honest CPU mines an expected one block per hour.
(b) The waste of Pstat under
different α
will be accepted by Pstat. In Appendix A.4, we show the
following:
Theorem 1.
where A uses strategy Σstat,
In a (non-degenerate) security game S
Adv
stat)
S(Pα
A
=
1
1− Waste(Pα
stat)
.
Simulation We simulate Pstat to explore its efﬁcacy in
both the average case and the worst case. Figure 4 shows
the result of 1000 runs of a 60-day mining period sim-
ulation under Pstat. We set α = 0.4. We present statis-
tics with respect to the fastest (honest) CPU in the sys-
tem, which for simplicity we assume mines one block
per hour in expectation and refer to simply as “the hon-
est miner.” The adversary uses attack strategy Σstat.
In Figure 4a, the solid blue line shows the average ag-
gregate number of blocks mined by the adversary, and
the dashed one those of the honest miner. The attacker’s
advantage is, of course, the ratio of the two values. Ini-
tially, the adversary achieves a relatively high advantage
(≈ 127%), but this drops below 110% within 55 blocks,
and continues to drop. Our asymptotic analytic bound on
waste (given below) implies an advantage of 100.6%.
Figure 4b shows the average waste of Pstat and abso-
lute number of rejected blocks. The waste quickly drops
below 10%. As blocks accumulate, the statistical power
of Pstat grows, and the waste drops further. Analytically,
we obtain Waste(Pα
stat) = 0.006, or 0.6% from Eqn. 4.
Setting α
Setting the parameter α imposes a trade-off
on system implementers. As noted, α corresponds to the
Type-I error for a single test in Pstat. As Pstat performs
continuous testing, however, a more meaningful secu-
rity measure is Waste(Pα
stat), the rate of falsely rejected
blocks. Similarly there is no notion of Type-II error—
particularly, as our setting is adversarial. Adv
cap-
tures the corresponding notion in REM. As shown in Fig-
ure 5, raising α results in a lower Adv
, but higher
Waste(Pα
stat), and vice versa.
S(Pα
A
S(Pα
A
stat)
stat)
1434    26th USENIX Security Symposium
USENIX Association
Algorithm 1: Miner Loop. The green highlighted
line is executed in a TEE (e.g., an SGX enclave).
1 while True do
2
3
4
template ← read from blockchain agent
hash, difﬁculty ← process(template)
task ← get from useful work client
outcome, PoUW← TEE(task, hash, difﬁculty)
send outcome to useful work client
if PoUW (cid:54)= ⊥ then
5
6
7
8
9
block ← formBlock(template, PoUW)
send block to blockchain agent
5
Implementation Details
We have implemented a full REM prototype using
SGX (§5.1), and as an example application swapped
REM into the consensus layer of Bitcoin-core [18].
We explain how we implemented secure instruction
counting (§5.2), and our hierarchical attestation frame-
work (§5.3) that allows for arbitrary tasks to be used for
work. We explain how to reduce the overhead of at-
testation due to SGX-speciﬁc requirements (§5.4). Fi-
nally (§5.5) we present two examples of PoUW and eval-
uate the overhead of REM.
5.1 Architecture
Figure 1 shows the architecture of REM. As discussed
in §3.2, the core of REM is a miner program that does
useful work and produces PoUWs. Each CPU instruction
executed in the PoUW is analogous to one hash function
computation in PoW schemes. That is, each instruction
has some probability of successfully mining a block, and
if the enclave determines this is the case, it produces a
proof — the PoUW.
Pseudocode of the miner’s iterative algorithm is given
in Algorithm 1.
In a given iteration, it ﬁrst takes a
block template from the agent and calculates the previ-
ous block’s hash and difﬁculty. Then it reads the task to
perform as useful work. Note that the enclave code has
no network stack, therefore it receives its inputs from
the miner untrusted code and returns its outputs to the
miner untrusted code. The miner calls the TEE (SGX
enclave) with the useful task and parameters for mining,
and stores the result of the useful task.
It also checks
whether the enclave returned a successful PoUW; if so,
it combines the agent-furnished template and PoUW into
a legal block and sends it to the agent for publication.
In REM, the miner untrusted layer is implemented as a
Python script using RPC to access the agent.
To securely decide whether an instruction was a “win-
ning” one, the PoUW enclave does the equivalent of
generating a random number and checking whether it
is smaller than value target that represents the desired
system-wide block rate, i.e., difﬁculty. For this purpose,
it uses SGX’s random number generator (SRNG). How-
ever, calling the SRNG and checking for a win after
every single instruction would impose prohibitive over-
head. Instead, we batch instructions by dividing useful
work into subtasks of short duration compared to the
inter-block interval (e.g. 10 second tasks for 10 minute
average block intervals). We let each such subtask run
to completion, and count its instructions. The PoUW en-
clave then calls the SRNG to determine whether at least
one of the instructions has won, i.e., it checks for a re-
sult less than target, weighted by the total number of
executed instructions. If so, the enclave produces an at-
testation that includes the input block hash and difﬁculty.
Why Count Instructions While instructions are rea-
sonable estimates of the CPU effort, CPU cycles would
have been a more accurate metric. However, although cy-
cles are counted, and the counts can be accessed through
the CPU’s performance counters, they are vulnerable to
manipulation. The operating system may set their values