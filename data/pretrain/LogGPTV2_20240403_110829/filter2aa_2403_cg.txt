指令清单 19.64  Optimizing Keil 6/2013 (Thumb mode) 
f  PROC 
  PUSH     {r4,lr} 
  MOVS     r3,r0 
  MOVS     r1,#0 
  MOVS     r2,#1 
  MOVS     r0,r1 
|L0.10| 
  MOVS     r4,r3 
  LSRS     r4,r4,r1 
  LSLS     r4,r4,#28 
  LSRS     r4,r4,#28 
  MULS     r4,r2,r4 
  ADDS     r0,r4,r0 
  MOVS     r4,#0xa 
  MULS     r2,r4,r2 
  ADDS     r1,r1,#4 
  CMP      r1,#0x1c 
  BLE      |L0.10| 
  POP      {r4,pc} 
  ENDP 
指令清单 19.65  Non-optimizing GCC 4.9 (ARM64) 
f: 
  sub     sp, sp, #32 
  str     w0, [sp,12] 
  str     wzr, [sp,28] 
  mov     w0, 1 
异步社区会员 dearfuture(15918834820) 专享 尊重版权
300 
逆向工程权威指南（上册） 
  str     w0, [sp,24] 
  str     wzr, [sp,20] 
  b       .L2 
.L3: 
  ldr     w0, [sp,28] 
  ldr     w1, [sp,12] 
  lsr     w0, w1, w0 
  and     w1, w0, 15 
  ldr     w0, [sp,24] 
  mul     w0, w1, w0 
  ldr     w1, [sp,20] 
  add     w0, w1, w0 
  str     w0, [sp,20] 
  ldr     w0, [sp,28] 
  add     w0, w0, 4 
  str     w0, [sp,28] 
  ldr     w1, [sp,24] 
  mov     w0, w1 
  lsl     w0, w0, 2 
  add     w0, w0, w1 
  lsl     w0, w0, 1 
  str     w0, [sp,24] 
.L2: 
  ldr     w0, [sp,28] 
  cmp     w0, 28 
  ble     .L3 
  ldr     w0, [sp,20] 
  add     sp, sp, 32 
  ret 
指令清单 19.66  Optimizing GCC 4.4.5 (MIPS) (IDA) 
f: 
rl      $v0, $a0, 8 
srl     $a3, $a0, 20 
andi    $a3, 0xF 
andi    $v0, 0xF 
srl     $a1, $a0, 12 
srl     $a2, $a0, 16 
andi    $a1, 0xF 
andi    $a2, 0xF 
sll     $t2, $v0, 4 
sll     $v1, $a3, 2 
sll     $t0, $v0, 2 
srl     $t1, $a0, 4 
sll     $t5, $a3, 7 
addu    $t0, $t2 
subu    $t5, $v1 
andi    $t1, 0xF 
srl     $v1, $a0, 28 
sll     $t4, $a1, 7 
sll     $t2, $a2, 2 
sll     $t3, $a1, 2 
sll     $t7, $a2, 7 
srl     $v0, $a0, 24 
addu    $a3, $t5, $a3 
subu    $t3, $t4, $t3 
subu    $t7, $t2 
andi    $v0, 0xF 
sll     $t5, $t1, 3 
sll     $t6, $v1, 8 
sll     $t2, $t0, 2 
sll     $t4, $t1, 1 
sll     $t1, $v1, 3 
addu    $a2, $t7, $a2 
subu    $t1, $t6, $t1 
addu    $t2, $t0, $t2 
异步社区会员 dearfuture(15918834820) 专享 尊重版权
第 19 章  位  操  作 
301 
addu    $t4, $t5 
addu    $a1, $t3, $a1 
sll     $t5, $a3, 2 
sll     $t3, $v0, 8 
sll     $t0, $v0, 3 
addu    $a3, $t5 
subu    $t0, $t3, $t0 
addu    $t4, $t2, $t4 
sll     $t3, $a2, 2 
sll     $t2, $t1, 6 
sll     $a1, 3 
addu    $a1, $t4, $a1 
subu    $t1, $t2, $t1 
addu    $a2, $t3 
sll     $t2, $t0, 6 
sll     $t3, $a3, 2 
andi    $a0, 0xF 
addu    $v1, $t1, $v1 
addu    $a0, $a1 
addu    $a3, $t3 
subu    $t0, $t2, $t0 
sll     $a2, 4 
addu    $a2, $a0, $a2 
addu    $v0, $t0, $v0 
sll     $a1, $v1, 2 
sll     $a3, 5 
addu    $a3, $a2, $a3 
addu    $v1, $a1 
sll     $v0, 6 
addu    $v0, $a3, $v0 
sll     $v1, 7 
jr      $ra 
addu    $v0, $v1, $v0 
19.7.3  题目 3 
请查阅 MSDN 资料，找到 MessageBox()函数使用了哪些标志位。 
指令清单 19.67  Optimizing MSVC 2010 
_main   PROC 
  push    278595          ; 00044043H 
  push    OFFSET $SG79792 ; 'caption' 
  push    OFFSET $SG79793 ; 'hello, world!' 
  push    0 
  call    DWORD PTR __imp__MessageBoxA@16 
  xor     eax, eax 
  ret     0 
_main   ENDP 
19.7.4 题目 4 
请描述下述代码的功能。 
指令清单 19.68  Optimizing MSVC 2010 
_m$ = 8      
; size = 4 
_n$ = 12     
; size = 4 
_f       PROC 
  mov     ecx, DWORD PTR _n$[esp-4] 
  xor     eax, eax 
  xor     edx, edx 
  test    ecx, ecx 
  je      SHORT $LN2@f 
异步社区会员 dearfuture(15918834820) 专享 尊重版权
302 
逆向工程权威指南（上册） 
  push    esi 
  mov     esi, DWORD PTR _m$[esp] 
$LL3@f: 
  test    cl, 1 
  je      SHORT $LN1@f 
  add     eax, esi 
  adc     edx, 0 
$LN1@f: 
  add   
esi, esi 
  shr     ecx, 1 
  jne     SHORT $LL3@f 
  pop     esi 
$LN1@f: 
  ret     0 
_f      ENDP 
指令清单 19.69  Optimizing Keil 6/2013 (ARM mode) 
f PROC 
  PUSH 
{r4,lr} 
  MOV  
r3,r0 
  MOV       r0,#0 
  MOV       r2,r0 
  MOV       r12,r0 
  B         |L0.48| 
|L0.24| 
  TST       r1,#1 
  BEQ       |L0.40| 
  ADDS      r0,r0,r3 
  ADC       r2,r2,r12 
|L0.40| 
  LSL       r3,r3,#1 
  LSR       r1,r1,#1 
|L0.48| 
  CMP       r1,#0 
  MOVEQ    r1,r2 
  BNE       |L0.24| 
  POP       {r4,pc} 
  ENDP 
指令清单 19.70  Optimizing Keil 6/2013 (Thumb mode) 
f  PROC 
  PUSH    {r4,r5,lr} 
  MOVS    r3,r0 
  MOVS    r0,#0 
  MOVS    r2,r0 
  MOVS    r4,r0 
  B       |L0.24| 
|L0.12| 
  LSLS    r5,r1,#31 
  BEQ    
|L0.20| 
  ADDS   
r0,r0,r3 
  ADCS   
r2,r2,r4 
|L0.20| 
  LSLS   
r3,r3,#1 
  LSRS   
r1,r1,#1 
|L0.24| 
  CMP    
r1,#0 
  BNE    
|L0.12| 
  MOVS   
r1,r2 
  POP    
{r4,r5,pc} 
  ENDP 
异步社区会员 dearfuture(15918834820) 专享 尊重版权
第 19 章  位  操  作 
303 
指令清单 19.71  Optimizing GCC 4.9 (ARM64) 
f: 
  mov      w2, w0 
  mov      x0, 0 
  cbz      w1, .L2 
.L3: 
  and      w3, w1, 1 
  lsr      w1, w1, 1 
  cmp      w3, wzr 
  add      x3, x0, x2, uxtw 
  lsl      w2, w2, 1 
  csel     x0, x3, x0, ne 
  cbnz     w1, .L3 
.L2: 
  ret 
指令清单 19.72  Optimizing GCC 4.4.5 (MIPS) (IDA) 
mult: 
beqz $a1, loc_40 
move $a3, $zero 
move $a2, $zero 
addu $t0, $a3, $a0 
loc_10: 
# CODE XREF: mult+38 
sltu $t1, $t0, $a3 
move $v1, $t0 
andi $t0, $a1, 1 
addu $t1, $a2 
beqz $t0, loc_30 
srl $a1, 1 
move $a3, $v1 
move $a2, $t1 
loc_30: 
# CODE XREF: mult+20 
beqz $a1, loc_44 
sll $a0, 1 
b 
loc_10 
addu $t0, $a3, $a0 
loc_40: 
# CODE XREF: mult 
move $a2, $zero 
loc_44: 
# CODE XREF: mult:loc_30 
move $v0, $a2 
jr 
$ra 
move $v1, $a3 
异步社区会员 dearfuture(15918834820) 专享 尊重版权
第
第 2200 章
章    线
线性
性同
同余
余法
法与
与伪
伪随
随机
机函
函数
数  
“线性同余法”大概是生成随机数的最简方法。虽然现在的随机函数基本不采用这种技术了
①
20.1 x86 
，但是它
原理简单（只涉及乘法、加法和与运算），仍然值得研究。 
#include  
// constants from the Numerical Recipes book 
#define RNG_a 1664525 
#define RNG_c 1013904223 
static uint32_t rand_state; 
void my_srand (uint32_t init) 
{ 
  rand_state=init; 
} 
int my_rand () 
{ 
  rand_state=rand_state*RNG_a; 
  rand_state=rand_state+RNG_c; 
  return rand_state & 0x7fff; 
}  
上述程序包含两个函数。第一个函数用于初始化内部状态，第二个函数生成伪随机数字。 
这个程序中的两个常量来自于参考书目［Pre+07］。本文直接使用 C/C++的#define 语句，把它们定义
为两个宏。C/C++对宏和常量的处理方法有所区别。C/C++编译器的预处理程序会把宏直接替换为相应的值。
所以宏并不像变量那样占用内存。相对而言，编译器把常量当作只读变量处理。因为指针的本质是内存地