851 ms
Figure 3. Performance overhead for Apache.
Y-axis is the performance overhead factor:
execution time divided by native execution
time. Native execution times are listed be-
low each experiment.
We expected the overhead for the shell script to be rel-
atively large, since the web server must spawn a shell and
execute the script each time it is requested. Thus, Val-
grind must retranslate and reinstrument the code for the
shell on each request. Despite this, the performance over-
head was roughly on par with the results for static page
requests. For static page requests we found that the per-
formance overhead was relatively small. As we expected,
the penalty for running under Valgrind grows less apparent
as the size of the request grows. This is because the server
becomes less processor-bound, and more I/O bound. Note
that even in the worst case of a small, 1 KB page, Taint-
Check only causes the response time to be approximately
25 ms instead of 1 ms on a local, high-speed network. This
delay is unlikely to be very noticeable to a user, especially
if the page were being loaded over a wide area network.
Improving performance Note that the current imple-
mentation is a research prototype and is not yet opti-
mized for performance. There are several ways that we
can improve the performance of TaintCheck. First, some
performance overhead is due to the implementation of
Valgrind. We used Valgrind because it is open source
and relatively easy to use. However, as we showed in
our evaluation, programs run several times slower under
Valgrind even when no additional instrumentation is per-
formed. Another x86 emulator, DynamoRio, offers much
better performance than Valgrind, due to better caching
and other optimization mechanisms. According to Kiri-
ansky et. al. [22], DynamoRio causes a bzip2 benchmark
to run approximately 1.05 times slower than when run na-
tively. Our tests show that bzip2 runs 3.1 times slower un-
der Valgrind then when run natively. Hence, TaintCheck
could run signiﬁcantly faster if it were implemented on
a more efﬁcient binary-rewriting mechanism such as Dy-
namoRio.
Second, when performing instrumentation, we could
statically analyze each basic block to eliminate redundant
tracking code. This optimization would signiﬁcantly re-
duce the amount of instrumentation added, causing the
instrumented program to run signiﬁcantly faster. A pre-
liminary implementation of this optimization allowed our
bzip2 benchmark to run only 24 times slower than na-
tive speed, instead of 37 times slower as in our non-
optimized implementation. We expect that further opti-
mization could yield an even larger performance improve-
ment.
5. Detection and analysis of new attacks
TaintCheck’s properties make it a valuable tool for de-
tecting new attacks. An early warning of a new worm
or exploit can buy time to enable other countermeasures,
such as generating and disseminating an attack signature
to ﬁlter trafﬁc, and eventually, patching vulnerable sys-
tems. In Section 6, we show how TaintCheck can also as-
sist in creating a signature for a new attack so that it can be
ﬁltered out at network perimeters. In this section, we de-
scribe the usage scenario for TaintCheck. TaintCheck can
be used at an individual site where it can either be used in
conjunction with other detectors to reduce their false pos-
itives rate, or to provide additional attack information; or
be used independently to check sampled requests. To en-
able faster detection of a new worm, TaintCheck can also
be used in a distributed setting.
5.1. Individual usage
Individual sites can use TaintCheck to detect or prevent
attacks on themselves.2
Ideally, a site could use Taint-
Check to protect its services all of the time. However, this
is impractical in many cases because of TaintCheck’s per-
formance overhead. While a more optimized implementa-
tion of TaintCheck could run much faster than the current
implementation, there will always be some performance
penalty for dynamic taint analysis.
There are several ways that TaintCheck could be used
to detect new attacks. One approach is to use it in con-
junction with a faster detector in order to reduce its false
positive rate and provide additional information about an
2Note that if TaintCheck does not detect an exploit, it could be be-
cause the particular version of the server being used is not vulnerable. In
order to be certain that a request does not contain an exploit, the system
needs to check against every version of the server that it is interested
in protecting. An individual site can protect itself by checking only the
versions of the server that it actually uses.
In particular, we show how TaintCheck can be
attack.
combined with honeypots, or with operating system ran-
domization [10, 20, 8]. TaintCheck can also be used by
itself, sampling requests when it is unable to keep up with
all incoming requests. This approach could detect new
attacks that other detectors may miss.
TaintCheck-enabled honeypots A honeypot is a net-
work resource with no legitimate use. Any activity on a
honeypot is likely to be malicious, making them useful for
detecting new attacks [24]. However, not everything sent
to a honeypot is necessarily an exploit. Requests could be
relatively innocuous probes or sent by mistake by legiti-
mate users. An attacker who discovers a honeypot could
also raise false alarms by sending innocuous requests to
the honeypot. This is particularly a problem if requests
sent to the honeypot are used to automatically generate
attack signatures.
A honeypot could use TaintCheck to monitor all of its
network services. This would allow it to verify whether
requests that it receives are exploits before deciding what
action to take, and provide additional information about
detected attacks.
TaintCheck plus OS randomization Several
tech-
niques have been proposed to randomize parts of the op-
erating system, such as the location of the stack [10], the
location of the heap [10, 8], the system call interface [10],
or even the instruction set [20]. These techniques make
it difﬁcult for an attacker’s code to run correctly on an
exploited system, typically causing a program to crash
once it has been exploited, thus minimizing the damage
caused. However, these techniques alone cannot prevent
future attacks. The attacker is free to attack the vulnerable
program again and again, usually causing the program to
crash, and possibly even exploiting the program if he is
lucky enough to guess the randomized values [38]. Fur-
ther, it is not possible to identify which request caused the
program to crash, or whether that request was actually an
attack.
It is possible to identify which request contained an at-
tack, if any, by using TaintCheck to analyze a log of recent
requests after a program crashes. Once an exploit request
has been identiﬁed, it is possible to take a number of ac-
tions, including generating a signature for the attack, or
simply blocking future requests from the sender.
Standalone TaintCheck We can use TaintCheck inde-
pendently on randomly sampled incoming requests. De-
pending how the sampling is done, TaintCheck can be
used to detect or prevent new attacks with probability pro-
portional to the sampling rate. This is particularly impor-
tant when other detection mechanisms fail to detect such
new attacks.
In order to prevent attacks, sampled requests can be
redirected to a server that is protected by TaintCheck (pos-
sibly on the same machine as the normal server). This ap-
proach has two drawbacks. First, legitimate requests that
are sent to the protected server are served somewhat more
slowly. However, for I/O-bound services, this difference
may not be noticeable as shown in Section 4. Second,
an attacker may be able to detect that he is using the pro-
tected server by measuring the response time. In that case,
he may be able to abort his request before the exploit takes
place, later resending it in hope that it would go to the un-
protected server. For that reason, it may be desirable to
choose what requests to sample on a per user basis rather
than a per request basis.
The other approach is to allow sampled requests to use
the normal server, and replay them in parallel to the Taint-
Check protected server.
In this case, when an attack is
detected the unprotected server may have already been
compromised. However, the system could immediately
quarantine the potentially compromised server, and notify
administrators, thus minimizing any damage.
In either case, once a new attack has been detected by
TaintCheck, it is possible to prevent further attacks by us-
ing TaintCheck to protect the normal server (with a 100%
sampling rate) until the vulnerability can be ﬁxed or an
attack signature can be used to ﬁlter trafﬁc. We discuss
using TaintCheck to help generate a signature in Section
6.
5.2. Distributed usage
Sites using TaintCheck could also cooperate for faster
attack detection. Once one site has detected a new attack,
the information about the attack can be used by anyone to
defend against the attack. Ideally, a signature for an attack
could be generated as soon as one site running TaintCheck
detects the attack. This signature could then be used by
everyone to efﬁciently ﬁlter out attack requests, thus pre-
venting further exploits.
As a concrete example, suppose that a worm author de-
velops a hit list of vulnerable servers and hard codes it
into a worm [42]. Such a worm could spread even more
quickly than fast scanning worms such as Blaster. The
worm author could also throttle the spread of the worm,
which may allow it to infect more machines before the
worm was detected than if it spread as quickly as possible.
Whether by brute force or by stealth, such a worm could
infect a very large number of machines before it was no-
ticed. However, if TaintCheck is deployed on d fraction
of the vulnerable servers, each of which samples requests
with probability s, we would expect to detect the worm by
the time that 1
ds vulnerable servers are compromised. For
example, if 10% of the vulnerable servers sample 10% of
their incoming trafﬁc with TaintCheck, the worm should
be detected around the time that 100 servers have been
compromised. If there are 1 million vulnerable hosts, this
means the new attack can be detected after only 0:01%
vulnerable servers are compromised. By automatically
generating and distributing a signature for the worm, fur-
ther compromises of other vulnerable hosts would be sig-
niﬁcantly reduced.
6. Automatic signature generation
Once a new exploit or worm is detected, it is desirable to
generate a signature for it quickly, so that exploit requests
may be ﬁltered out, until the vulnerability can be patched.
We ﬁrst propose a new approach for automatic signature
generation: using automatic semantic analysis of attack
payloads. We describe the advantages of this approach,
and describe how it could be implemented using Taint-
Check. We then show several ways that TaintCheck can be
used as a classiﬁer in order to enhance automatic signature
generation systems (both existing ones using content pat-
tern extraction, and future ones using automatic semantic
analysis).
6.1. Automatic semantic analysis based signature
generation
Previous automatic signature generation techniques use
content pattern extraction to generate signatures [21, 24,
41]. That is, they consider attack payloads as opaque byte
sequences, and attempt to ﬁnd patterns that are constant
across attack payloads to use as signatures.
We propose a new approach for automatic signature
generation: using automatic semantic analysis of attack
payloads to identify which parts of the payloads are likely
to be constant (i.e., useful in a signature). Semantic anal-
ysis could potentially allow an accurate signature to be
generated given fewer attack payloads than are necessary
in systems that use only content pattern extraction. By
requiring fewer attack payloads, semantic analysis could
generate a signature at an earlier stage of a worm epi-
demic, thus minimizing damage caused by a new worm.
TaintCheck could be used to perform automatic seman-
tic analysis of attack payloads, because it monitors how
each byte of each attack payload is used by the vulnerable
program at the processor-instruction level. As a ﬁrst step,
we have implemented a feature that allows TaintCheck to
identify the value used to overwrite a function pointer or
return address. We also describe several other promising
directions for using TaintCheck to perform automatic se-
mantic analysis.
Figure 4 illustrates how an automatic signature gener-
ation system could use TaintCheck to detect new attacks,
and to perform semantic analysis of attack payloads. In
some cases, the semantic information could be used di-
rectly as a signature. Otherwise, it can be used to give
hints to a content pattern extractor, possibly allowing it to
generate an accurate signature with fewer payloads than it
would require otherwise.
Obtaining overwrite values
In Section 4 we show that
TaintCheck can identify the value used to overwrite a re-
turn address or a function pointer. For most code-injection
exploits, this value needs to point to a ﬁxed area for the ex-
ploit to work correctly; i.e., usually at least the three most
signiﬁcant bytes of this value must remain constant. For
many exploits, this value must occur literally in the attack
payload. In other exploits, the server may perform a de-
coding step (such as URL decoding) in order to obtain the
actual pointer. TaintCheck can distinguish between these
two cases, and trace back to determine which bytes of
the encoded payload correspond to the decoded address.
Hence, TaintCheck is often able to produce a signature
automatically based on the three most signiﬁcant bytes of
a value used to overwrite a jump target such as a return
address or function pointer. Similarly, for existing-code
attacks, there are typically only a few places that are use-
ful for the attack to jump to (e.g., a few global library entry
points). Thus, similar techniques will work for identifying
signatures for existing-code attacks as well.
While a three-byte signature may seem short, it could
be speciﬁc enough for protocols with an uneven distribu-
tion of byte sequences (e.g., text-based protocols such as
HTTP). In our analysis of a week-long trace of incoming
and outgoing HTTP requests containing 59250 connec-
tions from the Intel Research Pittsburgh Lab, 99.97% of
all three-byte sequences occurred in less than .01% of all
connections, and 91.8% of all three-byte sequences never
occurred at all. To further test this idea, we used Taint-
Check to identify the return address used in the ATPhttpd
exploit discussed in Section 4.2.2. We found that the three
most signiﬁcant bytes of this value occurred in only one
request in the week-long trace. The request was a POST
request that was used to upload a binary ﬁle. This corre-
sponds to a false positive rate of .0017%. Hence, the three
most signiﬁcant bytes of the value used to overwrite a re-
turn address or function pointer, which can be identiﬁed
by TaintCheck, are often distinctive enough to be used as a
reasonably accurate signature by themselves, at least until
a more descriptive signature can be found or the vulnera-
bility can be repaired. When it is not speciﬁc enough to be
used by itself, it can still be used as part of a more speciﬁc
signature. Note that our analysis is also consistent with the
ﬁndings in [30], which offers a more extensive analysis
of the usage of return addresses as signatures. In exper-
iments using 19 different real exploits and traces,
[30]
Internet
New W orm Signatures




				



				



				





