Controller script to JavaScript proxy 
Since a browser cannot accept inbound network connections, the JavaScript 
proxy must initiate all communication. When the JavaScript proxy polls the 
controller script for data (such as the next HTTP request to process), the 
response is a JavaScript file with the data set in variables that can be retrieved 
by the JavaScript proxy. Similar techniques are used by the Backframe toolkit.14  
In essence, this is intentional XSS: the document is loaded from the randomly 
generated hostname, but the script is loaded from the attack server’s secondary 
IP address (or secondary hostname). As a result, some anti-XSS filters might 
block this request. However, no XSS is required for a successful attack.  
There are several other methods to transfer data from the controller script 
besides XSS. While the same-origin policy prevents most explicit data exchange, 
JavaScript can still infer data about content from different origins. For example, 
the dimensions of an image are accessible in JavaScript, regardless of which 
server provided the file. This allows for a series of images to be requested by 
JavaScript with one byte encoded in the width and one byte in the height. Firefox 
(and perhaps other browsers) will load a bitmap with headers, but no graphic 
content, allowing the files to be stripped down to 66-bytes. While this technique is 
slow, it is effective. Considering that cross-domain image loading is very common 
on the Internet, it would be extremely difficult to detect and block. 
A similar technique tunnels data through dynamically loaded Cascading Style 
Sheets (CSS)15,16. Again, most data in a different origin CSS cannot be directly 
accessed by JavaScript. However, some data in a style class can be inferred 
once it is applied to a document component. Margin sizes are one example. 
Firefox allows margins to be set to millions of pixels, allowing at least two bytes 
of data to be encoded in each margin setting. Bulk data can be transferred by 
creating series of sequentially named classes. Once the style sheet is loaded, it 
is trivial for JavaScript to apply each class to a DIV tag, measure the actual 
margin sizes, and then decode the data. Since an unlimited number of classes 
can be defined in a single style sheet, performance is much better than the 
image dimension method, and approaches the XSS method. 
Other Anti-DNS Pinning Attacks  
Java LiveConnect 
The Sun Java Virtual Machine (JVM) supports full network connections, but only 
a trusted applet17 can connect to arbitrary hosts. If the code isn’t trusted, it can 
only connect out to the origin server, but on any port. The JVM has its own DNS 
resolver and DNS pinning logic and is believed to be resistant to standard anti-
DNS pinning attacks against applets18. LiveConnect19,20 is a Firefox and Opera 
feature that allows Java applets to interact with the HTML DOM and allows 
JavaScript to instantiate and interact with standard Java classes. When 
LiveConnect is used, the JVM pins the DNS after the webpage is loaded.  
By coordinating a DNS change with the page load, an attacker can successfully 
launch an anti-DNS pinning attack without the DNS cache timeout required in the 
JavaScript / XHR method. More importantly the JVM supports full UDP21 and 
TCP22 sockets, and partially supports ICMP23. This means that virtually any 
application protocol can be supported: SSH, SSL, telnet, SNMP, database 
protocols, CIFS, etc.  
A practical LiveConnect-based attack would be structured much like the XHR 
technique. Instead of an HTTP proxy accepting the attacker’s requests, a 
SOCKS24 proxy is used. To support a wide variety of attack tools, a generic 
SOCKS client25 is tied to the attacker’s IP stack. To improve performance, the 
socket reads and writes on the browser can be handled asynchronously26,27 
within JavaScript. 
Adobe Flash 
Because Flash does not implement any DNS-pinning28, this is more properly 
considered a classic DNS-spoofing attack. Using Flash’s socket functionality in 
ActionScript, it is possible to send arbitrary data over TCP. Two requirements 
significantly limit the flexibility of such an attack. First, in an odd throwback to old 
UNIX “security”, Flash will only connect to TCP port numbers greater than 1023.  
Second, each response has to be in XML format and terminated by a null 
character, effectively making it a one-way transaction29. Despite these 
limitations, any action that can be performed during the first stage of data 
transmission is possible to implement. Some text-based protocols such as HTTP 
or SMTP are partially usable. Some exploits may allow the shell-code to be 
transmitted this way also. 
Proxy Servers 
If the victim browser is configured to use a proxy server, it will usually not resolve 
hostnames for requests, effectively disabling its DNS pinning functionality. Since 
all DNS resolution is performed by the proxy server, anti-DNS pinning attacks are 
product specific. However, proxy servers can easily run for months at a time, 
making it impractical to permanently pin the DNS cache. If a proxy server has 
access to the internal network, it can be used to perform XHR-based anti-DNS 
pinning attacks. It is conceivable that the HTTP CONNECT command could be 
used on a proxy to tunnel any TCP protocol with anti-DNS pinning. If the browser 
is configured to use a SOCKS v5 server, UDP protocols may be possible also. 
Defense Against Anti-DNS Attacks  
The most obvious defense against anti-DNS pinning attacks is to change the 
browsers’ behavior so that DNS records are permanently pinned into the cache. 
Web servers do not go down often, and requiring the user to restart the browser 
is not an unreasonable burden. However, this is not a panacea. It doesn’t 
address browser-restart attacks, or any attacks using external DNS caches such 
as browser plug-ins or proxy servers. 
Realistically, most companies cannot disable JavaScript across the board; too 
many common websites use it. Better web browser security policies would help 
with this. Firefox does support zone-based policies30, but it is a well hidden 
feature that few know about, and it is lacking in granularity. Internet Explorer has 
better granularity for some features, but not for scripting. While IE allows 
XMLHTTPRequest to be globally disabled, it would be more useful to disable it 
for a single security zone without disabling all scripting.  
The NoScript31 add-on for Firefox presents some benefit, but is still lacking in 
granularity and is difficult for most users to manage. Deploying it across an 
enterprise would be very time consuming due to the high level of customization 
required. 
Another Firefox add-on with JavaScript security features is LocalRodeo32. One of 
its features is a monitor of the browser’s DNS cache; if an IP address changes 
(as part of an anti-DNS pinning attack), it will block it. It also attempts to detect 
and 
block 
JavaScript-based 
reconnaissance 
such 
as 
port 
scanning, 
fingerprinting, etc. However, LocalRodeo is a beta tool that most administrators 
should be reluctant to widely deploy in an enterprise. It also does not address 
browser plug-ins or proxy servers. 
While it may become safer, it seems unlikely that downloading and executing 
code from anonymous strangers will ever be safe. As long as technologies like 
Java, JavaScript, ActiveX, browser plug-ins, and even email attachments exist, 
techniques will be available to bypass perimeter firewalls. More consistent 
application of security controls like host hardening & patching, strong 
authentication & encryption, and network segmentation will always provide 
significant protection.  
1 http://www.mozilla.org/projects/security/components/same-origin.html 
2 http://www.ietf.org/rfc/rfc2616.txt, section 15.3 
3 http://viper.haque.net/~timeless/blog/11/  
4 http://shampoo.antville.org/stories/1451301/  
5 http://msdn2.microsoft.com/en-us/library/ms175046.aspx  
6 http://www.cgisecurity.com/lib/XmlHTTPRequest.shtml  
7 https://bugzilla.mozilla.org/show_bug.cgi?id=297078  
8 https://bugzilla.mozilla.org/show_bug.cgi?id=302263  
9 http://www.w3.org/TR/html401/present/frames.html#h-16.5  
10 http://www.w3.org/TR/XMLHttpRequest/  
11 http://msdn2.microsoft.com/en-us/library/ms535874.aspx  
12 http://developer.mozilla.org/en/docs/XMLHttpRequest  
13 http://mgran.blogspot.com/2006/08/downloading-binary-streams-with.html  
14 http://www.gnucitizen.org/projects/backframe/  
15 http://www.bobbyvandersluis.com/articles/dynamicCSS.php  
16 http://www.irt.org/articles/js065/  
17 http://java.sun.com/sfaq/  
18 http://shampoo.antville.org/stories/1566124/  
19 http://developer.mozilla.org/en/docs/LiveConnect  
20 http://java.sun.com/products/plugin/1.3/docs/jsobject.html  
21 http://java.sun.com/j2se/1.5.0/docs/api/java/net/DatagramSocket.html  
22 http://java.sun.com/j2se/1.5.0/docs/api/java/net/Socket.html  
23 http://java.sun.com/j2se/1.5.0/docs/api/java/net/InetAddress.html#isReachable(int)  
24 http://tools.ietf.org/html/rfc1928  
25 http://www.hummingbird.com/products/nc/socks/index.html  
26 http://developer.mozilla.org/en/docs/DOM:window.setTimeout  
27 http://developer.mozilla.org/en/docs/DOM:window.setInterval  
28 http://www.jumperz.net/index.php?i=2&a=3&b=3  
29 
http://www.adobe.com/support/flash/action_scripts/actionscript_dictionary/actionscript_dictionary8
67.html  
30 http://www.mozilla.org/projects/security/components/ConfigPolicy.html  
31 http://noscript.net/  
32 http://databasement.net/labs/localrodeo/