### Using Triggered Event Queues

You can configure event queues with triggers to automatically start a user-written monitoring application when an event is generated. This application processes the event messages and takes appropriate actions, such as informing an operator or initiating an automated administrative task.

#### Event Queue Triggers
- **Trigger Actions**: Event queues can have associated trigger actions that generate trigger messages.
- **Loop Prevention**: If a trigger message would normally cause another event, no additional event is generated to prevent infinite loops.

#### Related Concepts
- **Controlling Events** (Page 18): You can enable or disable events by setting the appropriate values for queue manager and queue attributes.
- **Format of Event Messages** (Page 22): Event messages contain information about the event and its cause, consisting of a message descriptor (MQMD) and message data.

### Application Programming with Shared Queues
#### Conditions for a Trigger Event
- **Unique Correlation Identifier**: To ensure correlation of multiple event messages from different queue managers, each message has a unique `CorrelId` set in the message descriptor (MQMD).

#### Related Reference
- **QSGDisp (MQLONG)**
- **Format of Event Messages**: 
  - **Message Descriptor**: Based on the MQMD structure.
  - **Message Data**: Consists of an event header and event data. The event header contains the reason code, and the event data provides further information about the event.

### Performance Events
Performance events relate to conditions that can affect the performance of applications using a specified queue. These events are scoped to the queue, and operations on one queue do not affect the generation of performance events on another queue.

#### Event Message Generation
- **Event Messages**: Placed on the `SYSTEM.ADMIN.PERFM.EVENT` queue.
- **Reason Code and Statistics**: Each message contains a reason code, performance event statistics, and other relevant data.

#### Types of Performance Events
- **Queue Depth High**
- **Queue Depth Low**
- **Queue Full**
- **Queue Service Interval High**
- **Queue Service Interval OK**

#### Setting Queue Attributes
- **IBM MQ Commands (MQSC)**: Use these commands to set queue attributes.
- **z/OS Operations and Controls Panels**: Alternatively, use these panels to set queue attributes on z/OS.

### Performance Event Statistics
The event data in the event message includes statistics for analyzing the behavior of a specified queue. Table 3 summarizes the key statistics:

| Parameter         | Description                                                                 |
|-------------------|-----------------------------------------------------------------------------|
| TimeSinceReset    | Elapsed time since the statistics were last reset.                           |
| HighQDepth        | Maximum number of messages on the queue since the last reset.                |
| MsgEnqCount       | Number of messages enqueued (MQPUT calls) since the last reset.              |
| MsgDeqCount       | Number of messages dequeued (MQGET calls) since the last reset.              |

#### Resetting Statistics
Statistics are reset under the following conditions:
- A performance event occurs.
- A queue manager stops and restarts.
- The `Reset Queue Statistics` PCF command is issued.
- On z/OS, the `RESET QSTATS` command is issued at the console.

### Queue Service Interval Events
Queue service interval events indicate whether an operation was performed on a queue within a user-defined time interval called the service interval. These events are not supported on shared queues.

#### Types of Queue Service Interval Events
- **Queue Service Interval OK**: Generated if a get operation occurs within the service interval.
- **Queue Service Interval High**: Generated if a get operation does not occur within the service interval.

#### Enabling Queue Service Interval Events
To enable these events, set the appropriate queue manager and queue attributes. Table 4 provides the necessary settings:

| Queue Service Interval Event | Queue Attributes          |
|------------------------------|---------------------------|
| Queue Service Interval High  | QSVCIEV (HIGH)            |
| Queue Service Interval OK    | QSVCIEV (OK)              |
| No Queue Service Interval    | QSVCIEV (NONE)            |
| Service Interval             | QSVCINT (tt) (in ms)      |

### Example: Enabling Queue Service Interval Events
To enable `Queue Service Interval High` events with a 10-second service interval, use the following MQSC commands:
```mqsc
ALTER QMGR PERFMEV(ENABLED)
ALTER QLOCAL('MYQUEUE') QSVCINT(10000) QSVCIEV(HIGH)
```

### Examples of Queue Service Interval Events
Use the following examples to understand the information you can obtain from queue service interval events. The examples illustrate:
- How the queue depth varies over time.
- How the elapsed time as measured by the service timer compares with the service interval.
- Which events are enabled and generated.

#### Example 1: Basic Sequence
- **P1**: An application puts a message onto an empty queue, starting the service timer.
- **G1**: Another application gets the message. Since the elapsed time is greater than the service interval, a `Queue Service Interval High` event is generated.
- **P2**: A second message is put onto the queue, restarting the service timer.
- **G2**: The message is removed within the service interval, generating a `Queue Service Interval OK` event.

#### Example 2: Non-Zero Queue Depth
- **P1**: First put starts the service timer.
- **P2**: Second put does not generate an event.
- **G1**: Get operation resets the service timer but does not generate an event.
- **G2**: Second get occurs within the service interval, generating an `OK` event.

#### Example 3: Sporadic Sequence
- **T(0)**: Queue statistics are reset, and `Queue Service Interval High` events are enabled.
- **P1**: First put starts the service timer.
- **P2**: Second put increases the queue depth to two, but no high event is generated.

These examples help in understanding the behavior of queue service interval events and their impact on queue management.