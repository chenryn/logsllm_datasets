Using triggered event queues
You can set up the event queues with triggers so that when an event is generated, the event message
being put onto the event queue starts a user-written monitoring application. This application can
process the event messages and take appropriate action. For example, certain events might require an
operator to be informed, other events might start an application that performs some administration tasks
automatically.
Event queues can have trigger actions associated with them and can create trigger messages. However,
if these trigger messages in turn cause conditions that would normally generate an event, no event is
generated. not generating an event in this instance ensures that looping does not occur.
Related concepts
“Controlling events” on page 18
You enable and disable events by specifying the appropriate values for queue manager, queue attributes,
or both, depending on the type of event.
“Format of event messages” on page 22
Event messages contain information about an event and its cause. Like other IBM MQ messages, an event
message has two parts: a message descriptor and the message data.
Application programming with shared queues
Conditions for a trigger event
Related reference
QSGDisp (MQLONG)
Format of event messages
Event messages contain information about an event and its cause. Like other IBM MQ messages, an event
message has two parts: a message descriptor and the message data.
• The message descriptor is based on the MQMD structure.
• The message data consists of an event header and the event data. The event header contains the reason
code that identifies the event type. Putting the event message, and any subsequent action, does not
affect the reason code returned by the MQI call that caused the event. The event data provides further
information about the event.
Typically, you process event messages with a system management application tailored to meet the
requirements of the enterprise at which it runs.
When the queue managers in a queue sharing group detect the conditions for generating an event
message, several queue managers can generate an event message for the shared queue, resulting in
several event messages. To ensure that a system can correlate multiple event messages from different
queue managers, these event messages have a unique correlation identifier (CorrelId) set in the message
descriptor (MQMD).
Related reference
“Activity report MQMD (message descriptor)” on page 100
Use this page to view the values contained by the MQMD structure for an activity report
“Activity report MQEPH (Embedded PCF header)” on page 104
Use this page to view the values contained by the MQEPH structure for an activity report
“Activity report MQCFH (PCF header)” on page 105
Use this page to view the PCF values contained by the MQCFH structure for an activity report
Event message reference
Event message format
Event message MQMD (message descriptor)
Event message MQCFH (PCF header)
Event message descriptions
22 Monitoring and Performance for IBM MQ
Performance events
Performance events relate to conditions that can affect the performance of applications that use a
specified queue. The scope of performance events is the queue. MQPUT calls and MQGET calls on one
queue do not affect the generation of performance events on another queue.
Performance event messages can be generated at any appropriate time, not necessarily waiting until an
MQI call for the queue is issued. However, if you use an MQI call on a queue to put or remove a message,
any appropriate performance events are generated at that time.
Every performance event message that is generated is placed on the queue,
SYSTEM.ADMIN.PERFM.EVENT.
The event data contains a reason code that identifies the cause of the event, a set of performance event
statistics, and other data. The types of event data that can be returned in performance event messages
are described in the following list:
• Queue Depth High
• Queue Depth Low
• Queue Full
• Queue Service Interval High
• Queue Service Interval OK
Examples that illustrate the use of performance events assume that you set queue attributes by using the
appropriate IBM MQ commands (MQSC). On z/OS, you can also set queue attributes using the operations
and controls panels for queue managers.
Related reference
“Event types” on page 11
Use this page to view the types of instrumentation event that a queue manager or channel instance can
report
Performance event statistics
The performance event data in the event message contains statistics about the event. Use the statistics to
analyze the behavior of a specified queue.
The event data in the event message contains information about the event for system management
programs. For all performance events, the event data contains the names of the queue manager and the
queue associated with the event. The event data also contains statistics related to the event. Table 3 on
page 23 summarizes the event statistics that you can use to analyze the behavior of a queue. All the
statistics refer to what has happened since the last time the statistics were reset.
Table 3. Performance event statistics
Parameter Description
TimeSinceReset The elapsed time since the statistics were last reset.
HighQDepth The maximum number of messages on the queue since the statistics
were last reset.
MsgEnqCount The number of messages enqueued (the number of MQPUT calls to
the queue), since the statistics were last reset.
MsgDeqCount The number of messages dequeued (the number of MQGET calls to
the queue), since the statistics were last reset.
Performance event statistics are reset when any of the following changes occur:
• A performance event occurs (statistics are reset on all active queue managers).
• A queue manager stops and restarts.
IBM MQ Monitoring and performance 23
• The PCF command, Reset Queue Statistics, is issued from an application program.
• On z/OS only, the RESET QSTATS command is issued at the console.
Related concepts
“Performance events” on page 23
Performance events relate to conditions that can affect the performance of applications that use a
specified queue. The scope of performance events is the queue. MQPUT calls and MQGET calls on one
queue do not affect the generation of performance events on another queue.
“The service timer” on page 25
Queue service interval events use an internal timer, called the service timer, which is controlled by the
queue manager. The service timer is used only if a queue service interval event is enabled.
“Rules for queue service interval events” on page 26
Formal rules control when the service timer is set and queue service interval events are generated.
Related tasks
“Enabling queue service interval events” on page 27
To configure a queue for queue service interval events you set the appropriate queue manager and queue
attributes.
Related reference
Queue Depth High
Reset Queue Statistics
RESET QSTATS
Queue service interval events
Queue service interval events indicate whether an operation was performed on a queue within a user-
defined time interval called the service interval. Depending on your installation, you can use queue service
interval events to monitor whether messages are being taken off queues quickly enough.
Queue service interval events are not supported on shared queues.
The following types of queue service interval events can occur, where the term get operation refers to
an MQGET call or an activity that removes a messages from a queue, such as using the CLEAR QLOCAL
command:
Queue Service Interval OK
Indicates that after one of the following operations:
• An MQPUT call
• A get operation that leaves a non-empty queue
a get operation was performed within a user-defined time period, known as the service interval.
Only a get operation can cause the Queue Service Interval OK event message. Queue Service Interval
OK events are sometimes described as OK events.
Queue Service Interval High
Indicates that after one of the following operations:
• An MQPUT call
• A get operation that leaves a non-empty queue
a get operation was not performed within a user-defined service interval.
Either a get operation or an MQPUT call can cause the Queue Service Interval High event message.
Queue Service Interval High events are sometimes described as High events.
To enable both Queue Service Interval OK and Queue Service Interval High events, set the
QServiceIntervalEvent control attribute to High. Queue Service Interval OK events are automatically
enabled when a Queue Service Interval High event is generated. You do not need to enable Queue Service
Interval OK events independently.
24 Monitoring and Performance for IBM MQ
OK and High events are mutually exclusive, so if one is enabled the other is disabled. However, both
events can be simultaneously disabled.
Figure 3 on page 25 shows a graph of queue depth against time. At time P1, an application issues an
MQPUT, to put a message on the queue. At time G1, another application issues an MQGET to remove the
message from the queue.
Figure 3. Understanding queue service interval events
The possible outcomes of queue service interval events are as follows:
• If the elapsed time between the put and the get is less than or equal to the service interval:
– A Queue Service Interval OK event is generated at time G1, if queue service interval events are
enabled
• If the elapsed time between the put and get is greater than the service interval:
– A Queue Service Interval High event is generated at time G1, if queue service interval events are
enabled.
The algorithm for starting the service timer and generating events is described in “Rules for queue service
interval events” on page 26.
Related reference
Queue Service Interval OK
Queue Service Interval High
QServiceIntervalEvent (MQLONG)
QServiceIntervalEvent (10-digit signed integer)
The service timer
Queue service interval events use an internal timer, called the service timer, which is controlled by the
queue manager. The service timer is used only if a queue service interval event is enabled.
What precisely does the service timer measure?
The service timer measures the elapsed time between an MQPUT call to an empty queue or a
get operation, and the next put or get, provided the queue depth is nonzero between these two
operations.
When is the service timer active?
The service timer is always active (running), if the queue has messages on it (depth is nonzero) and a
queue service interval event is enabled. If the queue becomes empty (queue depth zero), the timer is
put into an OFF state, to be restarted on the next put.
When is the service timer reset?
The service timer is always reset after a get operation . It is also reset by an MQPUT call to an empty
queue. However, it is not necessarily reset on a queue service interval event.
IBM MQ Monitoring and performance 25
How is the service timer used?
Following a get operation or an MQPUT call, the queue manager compares the elapsed time as
measured by the service timer, with the user-defined service interval. The result of this comparison is
that:
• An OK event is generated if there is a get operation and the elapsed time is less than or equal to the
service interval, AND this event is enabled.
• A high event is generated if the elapsed time is greater than the service interval, AND this event is
enabled.
Can applications read the service timer?
No, the service timer is an internal timer that is not available to applications.
What about the TimeSinceReset parameter?
The TimeSinceReset parameter is returned as part of the event statistics in the event data. It specifies
the time between successive queue service interval events, unless the event statistics are reset.
Rules for queue service interval events
Formal rules control when the service timer is set and queue service interval events are generated.
Rules for the service timer
The service timer is reset to zero and restarted as follows:
• After an MQPUT call to an empty queue.
• After an MQGET call, if the queue is not empty after the MQGET call.
The resetting of the timer does not depend on whether an event has been generated.
At queue manager startup the service timer is set to startup time if the queue depth is greater than zero.
If the queue is empty following a get operation, the timer is put into an OFF state.
Queue Service Interval High events
The Queue Service Interval event must be enabled (set to HIGH).
Queue Service Interval High events are automatically enabled when a Queue Service Interval OK event is
generated.
If the service time is greater than the service interval, an event is generated on, or before, the next
MQPUT or get operation.
Queue Service Interval OK events
Queue Service Interval OK events are automatically enabled when a Queue Service Interval High event is
generated.
If the service time (elapsed time) is less than or equal to the service interval, an event is generated on, or
before, the next get operation.
Related tasks
“Enabling queue service interval events” on page 27
26 Monitoring and Performance for IBM MQ
To configure a queue for queue service interval events you set the appropriate queue manager and queue
attributes.
Enabling queue service interval events
To configure a queue for queue service interval events you set the appropriate queue manager and queue
attributes.
About this task
The high and OK events are mutually exclusive; that is, when one is enabled, the other is automatically
disabled:
• When a high event is generated on a queue, the queue manager automatically disables high events and
enables OK events for that queue.
• When an OK event is generated on a queue, the queue manager automatically disables OK events and
enables high events for that queue.
Table 4. Enabling queue service interval events using MQSC
Queue service interval event Queue attributes
Queue Service Interval High QSVCIEV (HIGH)
Queue Service Interval OK QSVCIEV (OK)
No queue service interval events QSVCIEV (NONE)
Service interval QSVCINT (tt) where tt is the service
interval time in milliseconds.
Perform the following steps to enable queue service interval events:
Procedure
1.Set the queue manager attribute PERFMEV to ENABLED.
Performance events are enabled on the queue manager.
2.Set the control attribute, QSVCIEV, for a Queue Service Interval High or OK event on the queue, as
required.
3.Set the QSVCINT attribute for the queue to specify the appropriate service interval time.
Example
To enable Queue Service Interval High events with a service interval time of 10 seconds (10 000
milliseconds) use the following MQSC commands:
ALTER QMGR PERFMEV(ENABLED)
ALTER QLOCAL('MYQUEUE') QSVCINT(10000) QSVCIEV(HIGH)
.
Queue service interval events examples
Use the examples in this section to understand the information that you can obtain from queue service
interval events.
The three subtopic examples provide progressively more complex illustrations of the use of queue service
interval events.
The figures accompanying the examples in each subtopic have the same structure:
• Figure 1 is a graph of queue depth against time, showing individual MQGET calls and MQPUT calls.
IBM MQ Monitoring and performance 27
• The Commentary section shows a comparison of the time constraints. There are three time periods that
you must consider:
– The user-defined service interval.
– The time measured by the service timer.
– The time since event statistics were last reset (TimeSinceReset in the event data).
• The Event statistics summary section shows which events are enabled at any instant and what events
are generated.
The examples illustrate the following aspects of queue service interval events:
• How the queue depth varies over time.
• How the elapsed time as measured by the service timer compares with the service interval.
• Which event is enabled.
• Which events are generated.
Remember: Example 1 shows a simple case where the messages are intermittent and each message is
removed from the queue before the next one arrives. From the event data, you know that the maximum
number of messages on the queue was one. You can, therefore, work out how long each message was on
the queue.
However, in the general case, where there is more than one message on the queue and the sequence
of MQGET calls and MQPUT calls is not predictable, you cannot use queue service interval events to
calculate how long an individual message remains on a queue. The TimeSinceReset parameter, which is
returned in the event data, can include a proportion of time when there are no messages on the queue.
Therefore any results you derive from these statistics are implicitly averaged to include these times.
Related concepts
“Queue service interval events” on page 24
Queue service interval events indicate whether an operation was performed on a queue within a user-
defined time interval called the service interval. Depending on your installation, you can use queue service
interval events to monitor whether messages are being taken off queues quickly enough.
“The service timer” on page 25
28 Monitoring and Performance for IBM MQ
Queue service interval events use an internal timer, called the service timer, which is controlled by the
queue manager. The service timer is used only if a queue service interval event is enabled.
Queue service interval events: example 1
A basic sequence of MQGET calls and MQPUT calls, where the queue depth is always one or zero.
Figure 4. Queue service interval events - example 1
Commentary
1.At P1, an application puts a message onto an empty queue. This starts the service timer.
Note that T0 might be queue manager startup time.
2.At G1, another application gets the message from the queue. Because the elapsed time between P1
and G1 is greater than the service interval, a Queue Service Interval High event is generated on the
MQGET call at G1. When the high event is generated, the queue manager resets the event control
attribute so that:
a.The OK event is automatically enabled.
b.The high event is disabled.
Because the queue is now empty, the service timer is switched to an OFF state.
3.At P2, a second message is put onto the queue. This restarts the service timer.
IBM MQ Monitoring and performance 29
4.At G2, the message is removed from the queue. However, because the elapsed time between P2 and
G2 is less than the service interval, a Queue Service Interval OK event is generated on the MQGET call
at G2. When the OK event is generated, the queue manager resets the control attribute so that:
a.The high event is automatically enabled.
b.The OK event is disabled.
Because the queue is empty, the service timer is again switched to an OFF state.
Event statistics summary
Table 5 on page 30 summarizes the event statistics for this example.
Table 5. Event statistics summary for example 1
Attribute Event 1 Event 2
Time of event T(G1) T(G2)
Type of event High OK
TimeSinceReset T(G1) - T(0) T(G2) - T(G1)
HighQDepth 1 1
MsgEnqCount 1 1
MsgDeqCount 1 1
The middle part of Figure 4 on page 29 shows the elapsed time as measured by the service timer
compared to the service interval for that queue. To see whether a queue service interval event might
occur, compare the length of the horizontal line representing the service timer (with arrow) to that of the
line representing the service interval. If the service timer line is longer, and the Queue Service Interval
High event is enabled, a Queue Service Interval High event occurs on the next get. If the timer line is
shorter, and the Queue Service Interval OK event is enabled, a Queue Service Interval OK event occurs on
the next get.
Queue service interval events: example 2
A sequence of MQPUT calls and MQGET calls, where the queue depth is not always one or zero.
This example also shows instances of the timer being reset without events being generated, for example,
at time P2.
30 Monitoring and Performance for IBM MQ
Figure 5. Queue service interval events - example 2
Commentary
In this example, OK events are enabled initially and queue statistics were reset at time T0.
1.At P1, the first put starts the service timer.
2.At P2, the second put does not generate an event because a put cannot cause an OK event.
3.At G1, the service interval has now been exceeded and therefore an OK event is not generated.
However, the MQGET call causes the service timer to be reset.
4.At G2, the second get occurs within the service interval and this time an OK event is generated. The
queue manager resets the event control attribute so that:
a.The high event is automatically enabled.
b.The OK event is disabled.
Because the queue is now empty, the service timer is switched to an OFF state.
IBM MQ Monitoring and performance 31
Event statistics summary
Table 6 on page 32 summarizes the event statistics for this example.
Table 6. Event statistics summary for example 2
Attribute Event 2
Time of event T(G2)
Type of event OK
TimeSinceReset T(G2) - T(0)
HighQDepth 2
MsgEnqCount 2
MsgDeqCount 2
Queue service interval events: example 3
A sequence of MQGET calls and MQPUT calls that is more sporadic than the previous examples.
Figure 6. Queue service interval events - example 3
32 Monitoring and Performance for IBM MQ
Commentary
1.At time T(0), the queue statistics are reset and Queue Service Interval High events are enabled.
2.At P1, the first put starts the service timer.
3.At P2, the second put increases the queue depth to two. A high event is not generated here because