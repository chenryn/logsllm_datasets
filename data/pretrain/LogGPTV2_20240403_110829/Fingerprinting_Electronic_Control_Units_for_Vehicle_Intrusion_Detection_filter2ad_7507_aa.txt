title:Fingerprinting Electronic Control Units for Vehicle Intrusion Detection
author:Kyong-Tak Cho and
Kang G. Shin
Fingerprinting Electronic Control Units  
for Vehicle Intrusion Detection
Kyong-Tak Cho and Kang G. Shin, University of Michigan
 https://www.usenix.org/conference/usenixsecurity16/technical-sessions/presentation/cho
This paper is included in the Proceedings of the 25th USENIX Security SymposiumAugust 10–12, 2016 • Austin, TXISBN 978-1-931971-32-4Open access to the Proceedings of the 25th USENIX Security Symposium is sponsored by USENIX Fingerprinting Electronic Control Units for Vehicle Intrusion Detection
Kyong-Tak Cho and Kang G. Shin
The University of Michigan
{ktcho, kgshin}@umich.edu
Abstract
As more software modules and external interfaces are
getting added on vehicles, new attacks and vulnera-
bilities are emerging. Researchers have demonstrated
how to compromise in-vehicle Electronic Control Units
(ECUs) and control the vehicle maneuver. To counter
these vulnerabilities, various types of defense mecha-
nisms have been proposed, but they have not been able
to meet the need of strong protection for safety-critical
ECUs against in-vehicle network attacks. To mitigate
this deﬁciency, we propose an anomaly-based intrusion
detection system (IDS), called Clock-based IDS (CIDS).
It measures and then exploits the intervals of periodic
in-vehicle messages for ﬁngerprinting ECUs. The thus-
derived ﬁngerprints are then used for constructing a base-
line of ECUs’ clock behaviors with the Recursive Least
Squares (RLS) algorithm. Based on this baseline, CIDS
uses Cumulative Sum (CUSUM) to detect any abnormal
shifts in the identiﬁcation errors — a clear sign of intru-
sion. This allows quick identiﬁcation of in-vehicle net-
work intrusions with a low false-positive rate of 0.055%.
Unlike state-of-the-art IDSs, if an attack is detected,
CIDS’s ﬁngerprinting of ECUs also facilitates a root-
cause analysis; identifying which ECU mounted the at-
tack. Our experiments on a CAN bus prototype and on
real vehicles have shown CIDS to be able to detect a wide
range of in-vehicle network attacks.
1
Introduction
Security has now become an important and real concern
to connected and/or automated vehicles. The authors
of [9] systematically analyzed different attack vectors in
vehicles (e.g., Bluetooth, Cellular), and showed that in-
vehicle Electronic Control Units (ECUs) can be compro-
mised for remote attacks. Through a compromised ECU,
the adversary can control the vehicle by injecting pack-
ets in the in-vehicle network [20, 23]. Researchers have
also been able to compromise and remotely stop a Jeep
Cherokee running on a highway [7, 25], which triggered
a recall of 1.4 million vehicles. Such a reality of vehi-
cle attacks has made automotive security one of the most
critical issues.
As a countermeasure against such attacks on in-
vehicle networks, two main lines of defense have been
pursued: message authentication and intrusion detec-
tion. Although message authentication provides a certain
level of security and is shown to be efﬁcient for Internet
security, its adoption in in-vehicle networks is hindered
by (i) the limited space available for appending a Mes-
sage Authentication Code (MAC) in in-vehicle messages
and (ii) its requirements of real-time processing and com-
munication.
Various types of Intrusion Detection Systems (IDS)
have been proposed [16, 23, 30, 31]. The essence of
state-of-the-art IDSs is to monitor the contents and the
periodicity of in-vehicle messages and verify whether
there are any signiﬁcant changes in them. Since they
are either constant or predictable in in-vehicle networks,
such approaches can be feasible in most circumstances.
However, there still remain critical attacks which exist-
ing IDSs can neither detect nor prevent, for two main rea-
sons: 1) in-vehicle messages do not carry information on
their transmitters, and thus one cannot tell whether they
originate from genuine transmitters; and 2) lack of the
transmitters’ information makes it very difﬁcult or im-
possible for state-of-the-art IDSs to identify which ECU
has mounted an attack.
To overcome these limitations and defend against var-
ious vehicle attacks, we propose a new anomaly-based
IDS, called Clock-based IDS (CIDS). The need of CIDS
for vehicles is motivated through an analysis of three
representative in-vehicle network attacks — fabrication,
suspension, and masquerade attacks. Our analysis shows
that state-of-the-art IDSs are insufﬁcient, especially in
detecting the masquerade attack due to the absence of
the transmitters’ information in messages. CIDS over-
USENIX Association  
25th USENIX Security Symposium  911
comes these limitations of existing IDSs by ﬁngerprint-
ing in-vehicle ECUs. Researchers have proposed vari-
ous schemes for ﬁngerprinting network devices by esti-
mating their clock skews through the timestamps carried
in their control packet headers [17, 19, 34, 42]. How-
ever, since such embedded timestamps are not available
for in-vehicle networks making them inapplicable, CIDS
ﬁngerprints in-vehicle ECUs in a very different way.
CIDS monitors the intervals of (commonly seen) peri-
odic in-vehicle messages, and then exploits them to esti-
mate the clock skews of their transmitters which are then
used to ﬁngerprint the transmitters. That is, instead of
assuming or requiring timestamps to be carried in mes-
sages for ﬁngerprinting, CIDS exploits the periodic fea-
ture (seen at receivers) of in-vehicle network messages
for ﬁngerprinting transmitter ECUs. This makes CIDS
invulnerable to attackers who use faked timestamps and
thus clock skews — a problem that timestamp-based ﬁn-
gerprinting schemes cannot handle. Based on the thus-
obtained ﬁngerprints, CIDS constructs a norm model
of ECUs’ clock behaviors using the Recursive Least
Squares (RLS) algorithm and detects intrusions with a
Cumulative Sum (CUSUM) analysis. This enables CIDS
to detect not only attacks that have already been demon-
strated or discussed in literature, but also those that are
more acute and cannot be detected by state-of-the-art
IDSs. Our experimental evaluations show that CIDS de-
tects various types of in-vehicle network intrusions with
a low false-positive rate of 0.055%. Unlike state-of-the-
art IDSs, if an intrusion is detected in CIDS, its ﬁnger-
printing capability facilitates identiﬁcation of the (com-
promised) ECU that mounted the attack. We validate
these capabilities of CIDS through experimental evalu-
ations on a CAN bus prototype and on real vehicles.
We focus on building CIDS for Control Area Net-
work (CAN), which is the de facto standard in-vehicle
network.
Its applicability to other in-vehicle network
protocols is also discussed in Section 6. Considering
the ubiquity of CAN and its direct relationship with the
drivers/passengers’ safety, it is critically important to
build as capable a CAN bus IDS as possible.
This paper makes the following contributions:
• Development of a novel scheme of ﬁngerprinting
ECUs by exploiting message periodicity;
• Proposal of CIDS, which models the norm behav-
ior of in-vehicle ECUs’ clocks based on ﬁngerprints
and then detects in-vehicle network intrusions;
• Implementation and validation of CIDS on a CAN
bus prototype as well as on 3 real vehicles.
The rest of the paper is organized as follows. Sec-
tion 2 provides the necessary background of CAN and
IDS-related work, and Section 3 details the attack model
Arbitration
ID
Control
R
B
0
DLC
R
T
R
I
D
E
S
O
F
Data
Data
CRC
ACK
CRC
CRC 
Del
A
C
K
ACK 
Del
EOF
Figure 1: Format of a CAN data frame.
we consider. Section 4 details the design of CIDS, which
is evaluated in Section 5 on a CAN bus prototype as well
as on three real vehicles. Section 6 discusses CIDS fur-
ther, such as its overhead and extension to emerging in-
vehicle networks. Finally, we conclude the paper in Sec-
tion 7.
2 Background
For completeness, we ﬁrst provide necessary background
on the CAN protocol, and then discuss the related work
on security solutions for in-vehicle networks.
2.1 Primer on CAN Protocol
CAN frame. CAN is the most widely deployed in-
vehicle communication protocol, which interconnects
ECUs/nodes through a multi-master, message broadcast
bus system [4]. To maintain data consistency and make
control decisions, data is exchanged between ECUs via
CAN frames, the format of which is shown in Fig. 1.
A CAN frame contains ﬁelds such as ID, Data Length
Code (DLC), Data, and CRC. Since CAN is message-
oriented, instead of containing the transmitter/receiver
address, a CAN frame contains a unique ID which rep-
resents its priority and meaning. For example, a frame
with ID=0x20 may contain wheel speed values whereas
a frame with ID=0x55 may contain temperature values.
Arbitration. Once the CAN bus is detected idle,
nodes with buffered messages to transmit, attempt to ac-
cess the bus. Multiple nodes could attempt to access
the bus simultaneously, i.e., contention occurs for access.
Such a contention is resolved via bus arbitration as fol-
lows. Each node ﬁrst transmits the ID value of its CAN
frame one bit at a time, starting with the most signiﬁ-
cant bit. Since CAN is designed to logically behave as
a wired-AND gate, some contending nodes see an out-
put of 0 from the bus, although they had transmitted 1.
Such nodes withdraw from bus contention and switch
to the receive mode. As a result, among the contend-
ing nodes, the ECU sending the message with the lowest
ID value wins arbitration, and gains exclusive access for
message transmission. Those which have lost arbitration
re-attempt to transmit once the bus becomes idle again.
Synchronization. For proper bitwise message trans-
mission and reception, hard and soft bit synchronizations
are achieved, respectively, by using the Start-of-Frame
(SOF) signal and bit stufﬁng in CAN frames [4]. Al-
912  25th USENIX Security Symposium 
USENIX Association
though these provide alignment of bit edges for message
exchange, they do not synchronize the clocks of ECUs,
i.e., CAN lacks clock synchronization. Thus, since time
instants for ECUs are provided by their own quartz crys-
tal clocks, these clocks, in reality, run at different fre-
quencies, resulting in random drifting of clocks: a drift
of 2400ms over a period of 24 hours is possible [27].
2.2 Related Work
To defend against various types of vehicle cyber attacks,
there have been two main streams of security solutions:
message authentication and intrusion detection.
Message authentication. In the area of Internet se-
curity, cryptographic message authentication provides
strong protection against forgery. Thus, researchers have
attempted to borrow such approaches from the domain
of Internet security to address in-vehicle network secu-
rity problems. However, since the maximum payload
length allowed in the CAN data ﬁeld is only 8 bytes, the
available space for appending a cryptographically secure
Message Authentication Code (MAC) is very limited,
i.e., the protocol speciﬁcation limits its maximum cryp-
tographic strength. To overcome this difﬁculty, rather
than appending a MAC in one CAN frame’s data ﬁeld,
the authors of [38] proposed to truncate it across multi-
ple frames. Instead of the data ﬁeld, the authors of [33]
proposed to use multiple CRC ﬁelds to include 64 bits of
CBC-MAC. The authors of [15] suggested to exploit an
out-of-band channel for message authentication.
Although such preventive measures provide some de-
gree of security, they alone cannot guarantee complete
security due to their inability to handle certain critical
attacks, e.g., Denial-of-Service (DoS). Moreover, their
operations not only require a signiﬁcant amount of pro-
cessing power but also increase message latencies and
bus utilization. Since in-vehicle networks must operate
in real time and ECUs are resource-limited for cost rea-
sons, unlike in the Internet, these “costs” of preventive
measures hinder their adoption [30]. More importantly,
when an adversary has full access to any data stored
in RAM and/or FLASH, including data used for imple-
menting security mechanisms (e.g., shared secret keys),
some cryptographic solutions become incapable [24].
Intrusion detection. To overcome such limitations of
preventive measures, different Intrusion Detection Sys-
tems (IDSs) have been proposed. Some state-of-the-art
IDSs exploit the fact that most CAN messages are peri-
odic, i.e., sent at ﬁxed time intervals. The authors of [30]
proposed an IDS which monitors the intervals of periodic
messages, measures their entropies, and exploits them
for intrusion detection. Similarly, a method of model-
ing the distribution of message intervals, and utilizing it
for intrusion detection was proposed in [23]. In addition
to message frequency, researchers also proposed to ver-
ify the message contents. The authors of [31] exploited
in-vehicle sensors to verify message range, correlation,
etc. Abnormal measurements on brake-related sensors
were detected by using the tire-friction model [10].
Although existing IDSs are capable of detecting most
attacks through the above approaches, they fail to cover
some critical attacks which are more acute, and thus are
not sufﬁcient to provide security. We will elaborate on
such shortcomings of state-of-the-art IDSs while ana-
lyzing the attack scenarios under consideration in Sec-
tion 3.3.
3 Attack Model
We ﬁrst discuss the adversary model under considera-
tion, and then the three representative attack scenarios.
3.1 Adversary Model
Adversaries can physically/remotely compromise more
than one in-vehicle ECU via numerous attack surfaces
and means [9]. We consider an adversary who wants to
manipulate or impair in-vehicle functions. The adversary
can achieve this by either injecting arbitrary messages
with a spoofed ID into the in-vehicle network, which we
refer to as attack messages, or by stopping/suspending
message transmissions of the compromised ECU.
Strong and weak attackers. Depending on their
hardware, software, and attack surfaces, ECUs of dif-
ferent vehicles have different degrees of vulnerabilities,
thus providing attackers different capabilities. So, we
consider two different types of compromised ECUs: fully
and weakly compromised ECUs.
Through a weakly compromised ECU, the attacker is
assumed to be able to stop/suspend the ECU from trans-
mitting certain messages or keep the ECU in listen-only
mode, but cannot inject any fabricated messages. We
call such an attacker with limited capabilities a weak
attacker, and will use this term interchangeably with
“weakly compromised ECU”.
In contrast, with a fully compromised ECU, the at-
tacker is assumed to have full control of it and access
to memory data. Thus, in addition to what a weak at-
tacker can do, the attacker controlling a fully compro-
mised ECU can mount attacks by injecting arbitrary at-
tack messages. We call such an attacker with more attack
capabilities a strong attacker, and will use this term in-
terchangeably with a “fully compromised ECU”. Even
when preventive security mechanisms (e.g., MAC) are
built into the ECUs, since the strong attacker has full ac-
cess to any data stored in their memory, including data
used for implementing security mechanisms (e.g., shared
secret keys), it can disable them [24]. On the other hand,
USENIX Association  
25th USENIX Security Symposium  913
(Strong)
ECU
A
B0
ECU
B
B0
ECU
C
20
(Weak)
ECU
A
ECU
B
B0
From time
Tsusp
B0
ECU
C
20
Without Attack
20
B0
B0
20
B0
20
B0
B0
B0
B0
B0
20
B0
B0
B0
With Attack
CAN Bus
B0
B0
Time
Without Attack
20
B0
20
B0
With Attack
-15(cid:220)
B0
B0
-15(cid:220)
-10(cid:220)
B0
20
20
Tsusp
CAN Bus
-5(cid:220)
B0
Time
(Strong)
(Weak)
ECU
A
B0
From time
Tmasq
ECU
B
B0
ECU
C
20
CAN Bus
Without Attack
20
B0
20
B0
With Attack
B0
B0
Tmasq
20
B0
20
B0
B0
B0
Time
(a) Fabrication attack.
(b) Suspension attack.
(c) Masquerade attack.
Figure 2: Three representative attack scenarios on in-vehicle networks.
a weak attacker can only stop, or listen to message trans-
missions, but cannot start a new one.
Foster et al. [13] have recently proved the possible ex-
istence of these two types of attackers in in-vehicle net-
works. They have shown that the ﬁrmware versions of
telematics units can affect/limit the attacker’s capabili-
ties in injecting and monitoring in-vehicle network mes-
sages. Speciﬁcally, for a certain ﬁrmware version of the
telematics unit, an attacker having control of that ECU
was shown to be able to receive CAN messages but un-
able to send the messages. On the other hand, for some
other ﬁrmware versions, the attacker was capable of both
sending and receiving CAN messages to and from the in-
vehicle network. In other words, the ﬁrmware version of
an ECU determines which type of an attacker — strong
or weak — it can become, if compromised.
types of attackers can exist,
To further comprehend how and why these two
different
let’s consider
one of the most common CAN controllers, Microchip
MCP2515 [1]. For ECUs with such a controller, various
operation modes like conﬁguration, normal, and listen-
only can be selected by user instructions through the
Serial Peripheral Interface (SPI). Thus, user-level fea-
tures for conﬁguring the CAN controller allow attackers
to easily enter different modes (e.g., listen-only mode
for a weak attacker).
In contrast, there are no such
features allowing attackers to easily inject forged mes-
sages. In other words, the speciﬁcation of the ECU hard-
ware/software, if compromised, can restrict the adver-
sary to become a weak attacker only. Note that the re-
quired functionalities of a strong attacker subsume those
of a weak attacker. It is thus easier for an adversary to be-
come a weak attacker than a strong attacker, let alone re-
searchers have already demonstrated how to create such
a strong attacker [9, 20, 23, 24].
3.2 Attack Scenarios
masquerade.1
Fabrication attack. Through an in-vehicle ECU com-
promised to be a strong attacker, the adversary fabricates
and injects messages with forged ID, DLC, and data.
The objective of this attack is to override any periodic
messages sent by a legitimate safety-critical ECU so that
their receiver ECUs get distracted or become inoperable.
For example, as shown in Fig. 2(a), the strong attacker A