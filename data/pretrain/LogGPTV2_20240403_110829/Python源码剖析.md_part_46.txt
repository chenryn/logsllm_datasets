字节码如下：
class A(abiect):
[Pycodeobject for class_O.py]
第12章
首先，“OLOAD_CONST”指令将类A的名称压入到运行时栈中，而接下来的LOAD
我们在字节码段的前面标出了这段字节码位于哪个Pycodeobject中，这样能够更清
好了，
STORE_NAME
LOAD_CONST
LOAD_NAME
LOAD CONST
MAKE_FUNCTION
个基类列表，
现在可以深入到字节码中去了，当Python开始执行class0.py时，开始的一段
Python虚拟机中的类机制
一深度探索动态语言核心技术
图12-16MAKE_FUNCTION指令完成后的运行时栈
当然这里只有一个名为object的基类。
(A)
图12-15class_0.py编译后的符号表和常量表
(code object for A)
(object)
function object >>
>
---
## Page 315
们先看一看，与classA对应的pyCodeobject对象中的常量表和符号表，如图12-17所
der语句，创建了3个PyFunctionobject对象，创建这3个对象有什么用呢？别急，我
的字节码序列：
在Python虚拟机所面对的目标从与class_0.py对应的字节码序列转换到了与classA对应
def
12
发现，这段字节码序列实际上就是来自与A对应的PyCodeobect对象的。换句话说，现
来自在运行时栈中静静仁立的那个pyFunctionobject对象。参考上面的描述，我们可以
并开始执行这个PyFrameobject对象中所包含的字节码序列，很显然，这些字节码序列
08
分析我们已经看到，对cALL_FUNCTION的执行最终将创建一个新的PyFrameObject对象，
Hef
lame=Python!
[PyCodeobject for clasa A]
Python执行引擎在执行CALiFUNCTION时，实际上只是执行了1个赋值语句和3个
RETURN VALUE
STORE NAME
STORE NAME
随后，Python虚拟机开始执行“15CALLFUNCTIONo”指令。从前面对函数机制的
LOAD_LOCALS
STORE_NAME
LOAD_CONST
g(self,
MAKE_FUNCTION
LOAD_CONST
E（self):
LOAD_CONST
LOAD
MAKE_FUNCTION
STORENAME
MAKE_FUNCTION
niE
CONST
aValue
(self
S/names>
0.('Python*)
15
2
(name)
(g)
(code object for function
name
图12-17A编译后的符号表和常量表
(code
object
vaue="p"
for
Python源码剖析
init
function)
name_
12.3用户自定义class
—init
module
一深度探索动态语言核心技术
"1>
285
---
## Page 316
Python源码剖析
286
顶的_locals一脚踢出，踢给之前那个古老的cALL_FUNCTION：
则，以后只能喝西北风了。
_locals带走。徐志摩是不带走一片云彩的，但是我们必须把1ocal名字空间带走，
牵羊，将好不容易得来的clasaA的动态元信息，也就是当前PyFrameobject 中的
PyCodeObject对象中的“15CALL_FUNcTIONo”指令。但是在后退之前，我们要顺手
现在，我们开始向后退，一直要退到我们出发的地方，还记得吗？就是那个class_0.py的
[CALL_PUNCTION]
的class对象吗？看上去好像不太对劲啊，别着急，中国有句老话，“退一步海阔天空”。
与A对应的class对象呀。难道说现在所使用到的pyFxameObiect对象就是代表classA
狗呢？只有有了这个1oca1名字空间，才能知道，这个对应的竟然是一个函数。
在后面给出。想象一下，当你在classA中寻找E时，这个f对应的究竞是阿猫，还是阿
了动态元信息，那么必然会有静态元信息。关于动态元信息和静态元信息的区别，我们将
的东西一
到目前为止创建的有用的东西都被放到了1ocal名字空间中，这里面存放的恰恰是最重要
空间中。
象，并将函数名和其对应的PyFunctionobject对象通过sTORENAME存入到1ocal名字
指令序列对，每个指令序列都会创建一个与类中成员函数对应的PyFunctionobject对
[LOAD_LOCALS]
时栈前面的那段内存中。如果记不太清了，请参考第11章对函数机制的剖析。
f_1ocals是被设置为NULL的，函数机制中局部变量是以一种位置参数的形式放在了运行
的f_locals被创建了，并指向了一个PyDictobject 对象。而在函数机制中，这个
“15CALL_FUNCTIONo”指令，创建新的 PyFrameObject 对象时，PyFrameObject中
object对象的Flocals）中。需要说明的是，与之前看到的函数机制不同，在前面执行
LOAD_LOCALS将E_locals压入运行时栈中，而随后的RETURN_VALUE指令将处于栈
name—”对应的值（“main_"）关联了起来，并放入到1ocal名字空间（pyErame
好了，现在我们手心里捏着ciassA的动态元信息，但不对呀，我们要的应该是一个
更准确地说，现在local名字空间中存放的应该是classA的动态元信息，既然有
到了这时，回头看一看，这一路下来，我们好像创建了很多东西。冷静一下，想一想。
接着，Python虚拟机连续执行了3个（LOADCONST、MAKE_FUNCTION、STORE_NAME）
第12章Python虚拟机中的类机制
开始的LOAD_NAME和STORE_NAME将符号“moau1e_”和全局名字空间中符号
classA的元信息。
深度探索动态语言核心技术
Pyobiect*tsp;
PUSH(X)
continue;
f->f_IoCals）=NULL）
否
---
## Page 317
12.3.1.2
对象的动作：
后，指令“18BUILD_CLASs”开始被激活，Python执行引擎从现在开始正式进入创建class
观察返回的对象，如图12-19所示：
的运行时栈如图12-18所示：
[BUILD_CLASS]
我们可以在cALL_FUNCTION的实现代码中添加打印PyDictObject对象的代码，
CAIL_FUNCTION将接过这个惊险的长传，然后将_1ocals压入到运行时栈中，现在
metaclass
a:1
>>>class A(object)：
module
Py_DECREE(）
SET_TOP(X))
STACKADJ（-2）:
V
PUSH(X）
apstack pointer;
=SECOND(）：//las的基类列表
TOPO
THIRD（）
cail
图12-18
图12-19
def g（self,value):
def
三
1
_funetion(&sp,oparg);
f(self):
(1:Robert,2:Python)
Object x in CALL FUNCTION
//class的名“A”
main
CALL_FUNCTION指令完成后的运行时栈
1/elass的动态元信息_local
探测CALL_FUNCION指令代码中的×
pass
python"
>(f locals)
>
Python源码剖析
12.3用户自定义class
深度探索动态语言核心技术
287
---
## Page 318
12.3.1.2.1
288
Python源码剖析
代码清单12-3
象来表示class的呢？别急，我们马上就进入buila_class中
神秘的build_class在bui1a_elass中究竞发生了什么呢？Python又是用怎样一个对
象。不过对创建nstance对象的剖析将留到下一节中。现在我们还是回过头来看看那个
立起来了，Python虚拟机在以后的执行中可以正常地使用A这个符号了。这里我们所谓的
存放到ocal名字空间中。到此，符号A与其对应的class对象之间的联系已经完全建
性。在BUILD_CLASS之后，运行时栈的情形如图12-20所示：
PyStrirgobject对象“A”的位置上，而最后的3个Py_DECREF保证了这种操作的安全
样，SET_TOP就会将创建的class对象放入到原来运行时栈中存储表示class名称的
“使用符号A”，嗯，没错，就是将这个class对象实例化，创建1nstance对
会调用build_class创建class对象，然后将创建的class对象压入到运行时栈中。
元信息（也就是class的属性表啦）、class名称和class基类列表之后，Pyhon虚拟机
Pyobject *build_class(Pyoblect *methods,Pyobject *bases,Pyobject*name)
[ceval.c]
第12章Python虚拟机中的类机制
在BUILD_CLASS指令结束后，会通过“19STORB NAME1”指令将（“A”，）
需要特别注意的是，在STACKADJ（-2）之后，栈顶指针已经向上移动了两个位置，这
对照图12-18，u、v、w分别是什么对象，现在已经很清晰了。在获得了class动态
else(
else
if
//[1]：检查属性表中是否有指定的metaclas8
Pyobject *metaclass.= NULL,
(eyDlct
获得metaclass
Py_INcREF(metacIass);
metaclass
一深度探索动态语言核心技术
Py_DECREF(W):
PyDECREE(V）:
Check(methods)
图12-20BUILD_CLASS指令结束后的运行时栈
NULL)
Check（bases) && PyTuple_CET_SIZE（bases) >D)[
_Getitemstring (met hods,
object
0）:
class
metaclass_"):
---
## Page 319
元信息中，隐藏着所有的class对象应该如何创建的信息，注意，我们这里说地是所有的
我们称之为静态元信息，也就是在图12-3中需要放到最左侧的metaclass对象。在静态
有任何的信息。在build_class中，metaclass正是关于class对象的另一部分元信息，
动态元信息中包含了class的所有属性。
么属性，什么方法。由于从广义上来讲，方法也是一种属性，所以我们可以说，class的
中并没有包含所有的关于class的元信息，在methods中，只包含了在class中包含什
中，这个动态元信息作为methods出现在了参数列表中。有一点值得注意的是，methods
class对象的metaclass中。
能共用的元信息，比如class 对象的type和class对象的创建策略，这些则存放在了
态的，所以我们称为动态元信息，即我们看到的参数methoas；而对于所有的class都可
是不相同的，这就决定了只能使用动态的机制来保存c1ass的属性，这个元信息只能是动
分离为两部分呢？因为，用户会在py 源文件中定义不同的class，其所包含的属性肯定
型对象中。而为什么关于一个class对象的所有元信息不能包含在metaclass中，却要
经熟悉
的metaclass。
的过程，当然这里我们只考虑为new styleclass确定metaclass的过程。
class对象。
口集合，当然，有的对象可能是不支持某个接口的，但这不影响它们的所有元信息可以完
type'>这个class对象。
metaclass，如果指定了，当然就使用用户自己指定的metaclas8
在build_class中，实际上包含了为classic class和new styleclass确定metaclass
ryIntObject、PyDictobjecE这些对象是Python静态提供的，它们都具有相同的接
对于pyIntobject、PyDictobject这些对象，其所有的元信息都包含在其对应的类
对于这里的A来说，其第一基类（事实上，A只有一个基类）为object，而我们已
但是，对于这个class对象的type是什么，应该如何创建，要分配多少内存，却没
在前面，Python虚拟机获得了关于class的属性表（动态元信息），在buildclass
如果用户没有指定，那么Python虚拟机会选择class的第一基类的type作为该class
首先，Python虚拟机在代码清单12-3的[1]处会检查用户在定义class时是否指定了
result = Pyobject_CallFunctionobjArgs (metaclass,name, bases,methods, NULL);
object._class_
Python源码剖析
12.3
用户自定义class
深度探索动态语言核心技术
289
---
## Page 320
Python源码剖析
12.3.1.2.2
290
PyType_Type中定义的tp_cal1操作。下面来看一看pyType_Type的tp_ca11操作：
始进入创建class对象的幽深处：
参数会被打包到一
class的类名、基类列表和属性列表，在Pyobject_CallFunctionobjArgs中，这儿个
的。换句话说，我们调用一个函数，得到一些输出，同样，我们调用pyType_Type，得到
完成“调用metaclass”的动作，从而完成class对象的创建。
pyobject*Pyobjeat_Cal1(PyObject *func,Pyobjeatarg,DyObject*kw)
pyobjeat_callFunctionobjArgs的其他几个参数中。我们已经知道，这几个参数分别是
个，这一个PyType_Type如何创建出不同的class对象呢？其中的奥妙则集中在
PyType_Type），而pyType_Type作为metaclass的功能正是通过它的可调用性体现出来
metaclass中静态地指定。图12-21展示了多个class对象和元信息的关系。
全存储在其类型对象中：而用户自定义的class对象，其接口集合是动态的，不可能在
[abstract.c]
EypedefPyobject
[object.h]
个class对象。
最终，由于PyType_Type的ob_type还是指向PyType_Type，所以最终将调用到
现在问题来了，
获得了metaclass之后，build_class通过pyobject_Cal1FunctionobjArgs函数
return resultt