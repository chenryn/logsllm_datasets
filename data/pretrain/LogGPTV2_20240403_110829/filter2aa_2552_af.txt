灵活、功能丰富、表达力强和较高的可移植性等特点，在程序设计中备受青睐，是当前使用
最为广泛的编程语言。在 Web 开发中常用于嵌入式设备的开发。 
5） Golang 
Golang 语言，简称 Go 语言，是由三位 Google 工程师开发的一种静态强类型、编译型
语言。Go 语言语法与 C 相近，但具有内存安全、垃圾回收、结构形态及 CSP-style 并发
计算等功能。 
（三） 编写 PoC 或 EXP 等利用 
19 
PoC,是 Proof of Concept 的缩写，即概念验证，特指为了验证漏洞存在而编写的程序
代码。有时也经常被用来作为 0day、Exploit（漏洞利用）的别名。 
EXP，是 Exploit 的缩写，即漏洞利用代码。一般来说，有漏洞不一定就有 EXP，而有
EXP，就肯定有漏洞。 
PoC 和 EXP 的概念仅有细微的差别，前者用于验证，后者则是直接的利用。能够自主编
写 PoC 或 EXP，要比直接使用第三方编写的漏洞利用工具或成熟的漏洞利用代码困难的多。
但对于很多没有已知利用代码的漏洞或 0day 漏洞，自主编写 PoC 或 EXP 就显得非常重要了。 
此外，针对不同的目标或在不同的系统环境中，编写 PoC 或 EXP 的难度也不同。针对
Web 应用和智能硬件/IoT 设备等，编写 PoC 或 EXP 相对容易，属于进阶能力；而针对操作系
统或安全设备编写 PoC 或 EXP 则更加困难，因此属于高阶能力了。 
（四） 社工钓鱼 
社工钓鱼，是指利用社会工程学手法，利用伪装、欺诈、诱导等方式，利用人的安全意
识不足或安全能力不足，对目标机构特定人群实施网络攻击的一种手段。社工钓鱼，既是实
战攻防演习中经常使用的作战手法，也是黑产团伙或黑客组织最为经常使用的攻击方式。在
很多情况下，“搞人”要比“搞系统”容易得多。 
社工钓鱼的方法和手段多种多样。在实战攻防演习中，最为常用，也是最为实用的技能
主要有四种：开源情报收集、社工库收集、鱼叉邮件和社工钓鱼。其中，前面两个都属于情
报收集能力，而后面两个则属于攻防互动能力。 
1） 开源情报收集 
开源情报收集能力，是指在公开的互联网信息平台上，合法收集针对目标机构的关键情
报信息的能力。例如，新闻媒体、技术社区、企业官网、客户资源平台等公开信息分享平台
都是开源情报收集的重要渠道。白帽子可以通过开源情报收集，获取诸如企业员工内部邮箱、
联系方式、企业架构、供应链名录、产品代码等关键情报信息。这些信息都可以为进一步的
攻击提供支撑。 
开源情报收集是白帽子首要的情报收集方式，其关键在于要从海量网络信息中，找到并
筛选出有价值的情报信息组合。通常情况下，单一渠道公开的机构信息，大多没有什么敏感
性和保密性。但如果将不同渠道的多源信息组合起来，就能够形成非常有价值的情报信息。
当然，也不排除某些机构会不慎将内部敏感信息泄露在了互联网平台上。白帽子在互联网平
台上直接找到机构内部开发代码，找到账号密码本的情况也并不少见。 
2） 社工库收集 
社工库收集能力，是指针对特定目标机构的社工库信息的收集能力。 
所谓社工库，通常是指含有大量用户敏感信息的数据库或数据包。这些敏感信息包括但
不限于，如账号、密码、姓名、身份证号、电话号码、人脸信息、指纹信息、行为信息等。
由于这些信息非常有助于攻击方针对特定目标设计有针对性的社会工程学陷阱，因此将这些
信息集合起来的数据包或数据库，就被称为社会工程学库，简称社工库。 
社工库是地下黑产或暗网上交易的重要标的物。不过，在实战攻防演习过程中，白帽子
所使用的社工库资源，必须兼顾合法性问题，这就比黑产团伙建立社工库的难度要大得多。 
3） 鱼叉邮件 
鱼叉邮件能力，是指通过制作和投递鱼叉邮件，实现对机构内部特定人员有效欺骗的一
种社工能力。 
鱼叉邮件是针对特定组织机构内部特定人员的定向邮件欺诈行为，目的是窃取机密数据
或系统权限。鱼叉邮件有多种形式，可以将木马程序作为邮件的附件发送给特定的攻击目标，
20 
也可以构造特殊的、有针对性的邮件内容诱使目标人回复或点击钓鱼网站。鱼叉邮件主要针
对的是安全意识或安全能力不足的机构内部员工。不过，某些设计精妙的鱼叉邮件，即便是
经验的安全人员也难以识别。 
4） 社交钓鱼 
社交钓鱼能力，是指通过社交软件或社交网站与攻击目标内的成员进行沟通交流，骗取
对方信任并借此收集相关情报信息的能力。社交钓鱼，一般建立在使人决断产生认知偏差的
基础上，具体形式包括但不限于：微信、QQ 等社交软件/网站的在线聊天、电话钓鱼、短信
钓鱼等。 
社工钓鱼，其实也是网络诈骗活动的主要方法，但以往实战攻防演习中还很少被使用。
但随着防守方能力的不断提升，直接进行技术突破的难度越来越大，针对鱼叉邮件也有了很
多比较有效的监测方法，于是近两年，社交钓鱼方法的使用就开始越来越多了。 
三、 高阶能力 
（一） 系统层漏洞利用与防护 
为应对各种各样的网络攻击，操作系统内部有很多底层的安全机制。而每一种安全机制，
都对应了一定形式的网络攻击方法。对于白帽子来说，学习和掌握底层的系统安全机制，发
现程序或系统中安全机制设计的缺陷或漏洞，是实现高水平网络攻击的重要基础技能。本小
节总结了实战攻防演习中，最为实用、也是最为常用的 7 种典型的系统层安全机制。 
1） SafeSEH 
当系统遭到攻击时，程序运行就会出现异常，并触发异常处理函数。而要使攻击能够继
续进行，攻击者就常常需要伪造或篡改系统异常处理函数，使系统无法感知到异常的发生。 
SafeSEH，（Safe Structured exception handling）是 Windows 操作系统的一种安全机
制，专门用于防止异常处理函数被篡改，即在程序调用异常处理函数之前，对要调用的异常
处理函数进行一系列的有效性校验，如果发现异常处理函数不可靠或存在安全风险，则应立
即终止异常处理函数的调用。反之，如果 SafeSEH 机制设计不完善或存在缺欠，就有可能被
攻击者利用，欺骗或绕过。 
在本文中，白帽子的 SafeSEH 能力，是指白帽子掌握 SafeSEH 的技术原理，并能够发现
程序或系统中 SafeSEH 机制的设计缺陷，并加以利用实施攻击的能力。 
2） DEP 
DEP，是 Data Execution Protection 的缩写，意为数据执行保护，作用是防止数据页
内的数据被当作执行代码来执行，从而引发安全风险。 
从计算机内存的角度看，数据和代码的处理并没有特别明确区分，只不过是在系统的调
度下，CPU 会对于不同内存区域中的不同数据，进行不一样的计算而已。这就使得系统在处
理某些经过攻击者精心构造的数据时，会误将其中的一部分“特殊数据”当作可执行代码来
执行，从而触发恶意命令的执行。而 DEP 机制设计的重要目的就是仿制这种问题的发生；反
之，如果 DEP 机制设计不完善或存在缺欠，就有可能被攻击者所利用，欺骗或绕过。 
在本文中，白帽子的 DEP 能力，是指白帽子掌握 DEP 的技术原理，并能够发现程序或系
统中 DEP 机制的设计缺陷，并加以利用实施攻击的能力。 
3） PIE 
PIE 是 Position-Independent Executable 的缩写，意为地址无关可执行文件，与 PIC
21 
（Position-Independent Code，地址无关代码）含义基本相同，是 Linux 或 Android 系统
中动态链接库的一种实现技术。 
在本文中，白帽子的 PIE 能力，是指白帽子掌握 PIE 的技术原理，并能够发现程序或系
统中 PIE 机制的设计缺陷，并加以利用实施攻击的能力。 
4） NX 
NX，是 No-eXecute 的缩写，意为不可执行，是 DEP（数据执行保护）技术中的一种，作
用是防止溢出攻击中，溢出的数据被当作可执行代码来执行。NX 的基本原理是将数据所在
内存页标识为不可执行，当操作系统读到这段溢出数据时，就会抛出异常，而非执行恶意指
令。反之，如果 NX 机制设计不完善或存在缺欠，就可以被攻击者利用并发动溢出攻击。 
在本文中，白帽子的 NX 能力，是指白帽子掌握 NX 的技术原理，并能够发现程序或系统
中 NX 机制的设计缺陷，并加以利用实施攻击的能力。 
5） ASLR 
ASLR，Address Space Layout Randomization 的缩写，意为地址空间随机化，是一种
操作系统用来抵御缓冲区溢出攻击的内存保护机制。这种技术使得系统上运行的进程的内存
地址无法被预测，使得与这些进程有关的漏洞变得更加难以利用。 
在本文中，白帽子的 ASLR 能力，是指白帽子掌握 ASLR 的技术原理，并能够发现程序或
系统中 ASLR 机制的设计缺陷，并加以利用实施攻击的能力。 
6） SEHOP 
SEHOP，是 Structured Exception Handler Overwrite Protection 的缩写，意为结构
化异常处理覆盖保护。其中，结构化异常处理是指按照一定的控制结构或逻辑结构对程序进
行异常处理的一种方法。如果结构化异常处理链表上面的某个节点或者多个节点，被攻击者
精心构造的数据所覆盖，就可能导致程序的执行流程被控制，这就是 SEH 攻击。而 SEHOP 就
是 Windows 操作系统中，针对这种攻击给出的一种安全防护方案。 
在本文中，白帽子的 SEHOP 能力，是指白帽子掌握 SEHOP 的技术原理，并能够发现程序
或系统中 SEHOP 机制的设计缺陷，并加以利用实施攻击的能力。 
7） GS 
GS，意为缓冲区安全性检查，是 Windows 缓冲区的安全监测机制，用于防止缓冲区溢出
攻击。 
缓冲区溢出是指当计算机向缓冲区内填充数据位数时，填充的数据超过了缓冲区本身的
容量，于是溢出的数据就会覆盖在合法数据上。理想的情况是：程序会检查数据长度，而且
并不允许输入超过缓冲区长度的字符。但是很多程序都会假设数据长度总是与所分配的储存
空间相匹配，这就为缓冲区溢出埋下隐患，即缓冲区溢出漏洞。GS 就是通过对缓冲区数据
的各种校验机制，防止缓冲区溢出攻击的发生。 
在本文中，白帽子的 GS 能力，是指白帽子掌握 GS 的技术原理，并能够发现程序或系统
中 GS 机制的设计缺陷，并加以利用实施攻击的能力。 
（二） 系统层漏洞挖掘 
系统层漏洞的挖掘需要很多相对高级的漏洞挖掘技术与方法。从实战角度看，以下 6 种
挖掘方法最为实用：代码跟踪、动态调试、Fuzzing 技术、补丁对比、软件逆向静态分析、
系统安全机制分析。 
1） 代码跟踪 
代码跟踪，是指通过自动化分析工具和人工审查的组合方式，对程序源代码逐条进行检
22 
查分析，发现其中的错误信息、安全隐患和规范性缺陷问题，以及由这些问题引发的安全漏
洞，提供代码修订措施和建议。 
2） 动态调试 
动态调试，原指软件作者利用集成环境自带的调试器跟踪自己软件的运行，来协助解决
自己软件的错误。 
不过，对于白帽子来说，动态调试通常是指使用动态调试器（如 OllyDbg x64Dbg 等），
为可执行程序设置断点，通过监测目标程序在断点处的输入输出及运行状态等信息，来反向
推测程序的代码结构、运行机制及处理流程等，进而发现目标程序中的设计缺陷或安全漏洞
的一种分析方法。 
3） Fuzzing 技术 
Fuzzing 技术，是一种基于黑盒（或灰盒）的测试技术，通过自动化生成并执行大量的
随机测试用例来触发软件或系统异常，进而发现产品或协议的未知缺陷或漏洞。 
4） 补丁对比 
每一个安全补丁，都会对应一个或多个安全漏洞。通过对补丁文件的分析，往往可以还