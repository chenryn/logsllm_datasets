title:Detecting Missed Security Operations Through Differential Checking
of Object-based Similar Paths
author:Dinghao Liu and
Qiushi Wu and
Shouling Ji and
Kangjie Lu and
Zhenguang Liu and
Jianhai Chen and
Qinming He
Detecting Missed Security Operations Through Differential
Checking of Object-based Similar Paths
Dinghao Liu
PI:EMAIL
Zhejiang University
Kangjie Lu
PI:EMAIL
University of Minnesota
Qiushi Wu
PI:EMAIL
University of Minnesota
Zhenguang Liu
PI:EMAIL
Zhejiang University
Qinming He∗
PI:EMAIL
Zhejiang University
Shouling Ji∗
PI:EMAIL
Zhejiang University & Binjiang
Institution of Zhejiang University
Jianhai Chen
PI:EMAIL
Zhejiang University
Abstract
Missing a security operation such as a bound check has been a major
cause of security-critical bugs. Automatically checking whether the
code misses a security operation in large programs is challenging
since it has to understand whether the security operation is indeed
necessary in the context. Recent methods typically employ cross-
checking to identify deviations as security bugs, which collects func-
tionally similar program slices and infers missed security operations
through majority-voting. An inherent limitation of such approaches
is that they heavily rely on a substantial number of similar code
pieces to enable cross-checking. In practice, many code pieces are
unique, and thus we may be unable to find adequate similar code
snippets to utilize cross-checking.
In this paper, we present IPPO (Inconsistent Path Pairs as a bug
Oracle), a static analysis framework for detecting security bugs based
on differential checking. IPPO defines several novel rules to identify
code paths that share similar semantics with respect to an object, and
collects them as similar-path pairs. It then investigates the path pairs
for identifying inconsistent security operations with respect to the
object. If one path in a path pair enforces a security operation while
the other does not, IPPO reports it as a potential security bug. By
utilizing on object-based path-similarity analysis, IPPO achieves a
higher precision, compared to conventional code-similarity analysis
methods. Through differential checking of a similar-path pair, IPPO
eliminates the requirement of constructing a large number of similar
code pieces, addressing the limitation of traditional cross-checking
approaches. We implemented IPPO and extensively evaluated it on
four widely used open-source programs: Linux kernel, OpenSSL
∗Shouling Ji and Qinming He are the co-corresponding authors.
Permission to make digital or hard copies of all or part of this work for personal or
classroom use is granted without fee provided that copies are not made or distributed
for profit or commercial advantage and that copies bear this notice and the full citation
on the first page. Copyrights for components of this work owned by others than ACM
must be honored. Abstracting with credit is permitted. To copy otherwise, or republish,
to post on servers or to redistribute to lists, requires prior specific permission and/or a
fee. Request permissions from permissions@acm.org.
CCS ’21, November 15–19, 2021, Virtual Event, Republic of Korea.
© 2021 Association for Computing Machinery.
ACM ISBN 978-1-4503-8454-4/21/11...$15.00
https://doi.org/10.1145/3460120.3485373
library, FreeBSD kernel, and PHP. IPPO found 154, 5, 1, and 1 new
security bugs in the above systems, respectively. We have submitted
patches for all these bugs, and 136 of them have been accepted by
corresponding maintainers. The results confirm the effectiveness
and usefulness of IPPO in practice.
CCS Concepts
• Security and privacy → Systems security; Software and ap-
plication security.
Keywords
Bug Detection; Similar Path; Missing Security Operation; Static Anal-
ysis
ACM Reference Format:
Dinghao Liu, Qiushi Wu, Shouling Ji, Kangjie Lu, Zhenguang Liu, Jianhai
Chen, and Qinming He. 2021. Detecting Missed Security Operations Through
Differential Checking of Object-based Similar Paths. In Proceedings of the
2021 ACM SIGSAC Conference on Computer and Communications Security
(CCS ’21), November 15–19, 2021, Virtual Event, Republic of Korea. ACM, New
York, NY, USA, 18 pages. https://doi.org/10.1145/3460120.3485373
1 Introduction
Large-scale programs usually enforce various kinds of security oper-
ations (e.g., security checks, locks, and reference counting) to ensure
the safety. Correctly using them greatly improves the efficiency and
security of a complex system. However, missing a security operation
is common in large programs, which may lead to severe security
issues. Specifically, according to the statistics in [44], missing secu-
rity operations is the cause of 61% vulnerabilities in the national
vulnerability database (NVD). Consistent with the findings in [44],
we empirically scrutinized recent vulnerabilities in Linux kernels
and found that around 66% of them are caused by missing security
operations. Existing works ([24, 26, 28, 36, 42, 50]) have also stud-
ied the security issues of such bugs in detail, including permission
bypass [5], out-of-bound access [6], high power consumption [8],
deadlock [7], system crash [2], etc.
Though missing security operations can lead to serious conse-
quences, detecting them is difficult as it has to determine whether
Session 5D: Misc: Android and Vulnerabilities CCS ’21, November 15–19, 2021, Virtual Event, Republic of Korea1627the missed security operations are indeed necessary in a specific
context. This, however, requires not only elaborate checking rules,
but also precise and scalable analysis of the complicated data flows
and contexts. There is still a lack of oracles for detecting missed se-
curity operations. To address this problem, researchers have turned
to cross-checking to automatically decide whether a security opera-
tion is needed. Specifically, a general cross-checking based method
consists of two steps: (1) it first collects a substantial number of
functionally or semantically similar code pieces, (2) then it checks
the behaviors of security operations across these code slices. Once
we find that the majority of the code pieces have enforced a secu-
rity operation, we assume that the majority is correct and report
the minority cases that miss the security operation as bugs. The
main advantage of cross-checking is that we can avoid direct code
semantic understanding. Previous works like Juxta [27], Crix [24],
APISan [48], Engler [14], and EECatch [30] employed cross-checking
to infer bugs.
However, the cross-checking technique would suffer from un-
avoidable false negatives due to the following facts. (1) Many code
pieces may be unique, and thus we may not be able to find enough
similar cases to enable cross-checking (e.g., the one-to-one inconsis-
tency mentioned in FICS [9]). In practice, most cross-checking tools
will set a threshold to label the majority patterns, usually 0.8 (e.g.,
0.85 in Crix [24] and 0.8 in APISan [48]), which means that we need
at least four similar correct samples to pick out one inconsistent bug
effectively. Figure 1 shows a counterexample, where both allocation
and release functions are only called once in the entire Linux kernel.
As a result, we cannot infer it as a bug through majority-voting. (2)
The granularity of code slicing is hard to control. In order to make
cross-checking scalable enough to deal with large programs, existing
methods usually abstract their code representation or use specific
rules to limit slice generation (e.g., Simplified Program Dependence
Graph in FICS [9]). Such strategies make the code slicing coarse-
grained and lose some valuable code snippets. (3) The hypothesis
that the majority is correct might not always hold. For example, it is
possible that some poorly documented APIs are often misused (e.g.,
pm_runtime_get_sync() and kobject_init_and_add()) [10, 26]. In
that case, cross-checking would not flag the common misuses as
potential bugs.
In this paper, we present IPPO (Inconsistent Path Pairs as a bug
Oracle), a security bug detection framework that requires only one
pair of similar code paths to determine if a path misses a security
operation. IPPO’s detection is based on the observation that if a
pair of paths are semantically similar with respect to an object, they
are expected to enforce the same security operations against the
object. Given a similar-path pair, if a path enforces a security opera-
tion while the other does not, IPPO reports it as a potential security
bug. By introducing the object-based path-similarity analysis, IPPO
achieves a higher precision than conventional code-similarity anal-
ysis. Meanwhile, unlike traditional cross-checking methods, IPPO
conducts differential checking on each similar-path pair and on
longer requires constructing a large number of similar code pieces.
A key challenge in realizing the idea of IPPO is to construct the
object-based similar-path pairs (OSPP). On the one hand, the specific
semantics and contexts of different paths are complex, and the usages
of an object could be diverse. Thus, it is challenging to automatically
understand the semantics and contexts of the paths. Moreover, it is
...
qp_grp = usnic_ib_qp_grp_create(...);
goto qp_grp_check;
}
...
usnic_uiom_free_dev_list(dev_list);
/* Try to find resouces on a used vf which is in pd */
dev_list = usnic_uiom_get_dev_list(pd->umem_pd);
...
if (!usnic_vnic_check_room(vnic, res_spec)) {
1 /* drivers/infiniband/hw/usnic/usnic_ib_verb.c */
2 static struct usnic_ib_qp_grp*
3 find_free_vf_and_create_qp_grp(...)
4 {
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24 qp_grp_check:
25
26
27
28
29
30 }
Figure 1: A memleak bug identified by IPPO. If usnic_ib_qp_grp_cre-
ate() fails at the first call, dev_list will not be freed on error.
}
...
qp_grp = usnic_ib_qp_grp_create(...);
goto qp_grp_check;
...
return ERR_PTR(-ENOMEM);
usnic_err("Failed to allocate qp_grp\n");
return ERR_PTR(qp_grp ? PTR_ERR(qp_grp) : -ENOMEM);
...
if (usnic_ib_share_vf) {
if (IS_ERR_OR_NULL(qp_grp)) {
}
return qp_grp;
not easy to determine whether two code paths should be considered
similar. On the other hand, analyzing and collecting OSPP is likely to
encounter path explosion, especially in large functions. To address
the first challenge, we develop multiple rules to characterize the
features of code paths in an object-level granularity. As for the second
challenge, we develop techniques to reduce path redundancy, e.g.,
we partition the control-flow graph (CFG) and reduce redundant
structures in similar paths to address the pair- and path-explosion
problems. With the defined rules and techniques, IPPO is able to
precisely and scalably construct OSPP in even large functions.
We have implemented IPPO as several LLVM static analysis passes.
We chose four widely used open-source programs to extensively
evaluate our method: the Linux kernel, the OpenSSL library, the
FreeBSD kernel, and PHP . Two run in the kernel mode, and the
other two run in the user mode. Each bug in them will influence
a massive number of users and devices. IPPO finished the whole
analysis for all programs within two hours and reported 754 missing
security operation cases. By manually checking all of them, we finally
confirmed 154, 5, 1, and 1 new security bugs in the above systems,
respectively, including 82 refcount leak bugs, 57 memleak bugs, 10
missing check bugs, 7 use-after-free bugs, and 5 missing unlock bugs.
We have submitted patches for the new bugs, and 136 of them have
been accepted by community maintainers. The results confirm the
effectiveness, scalability, and portability of IPPO. In summary, the
key contributions of this work are:
• A new system for detecting missed security operations. We
propose a new bug detection framework, IPPO, to address the
important limitations of traditional cross-checking. The missed
security operation detection requires only a pair of code paths
rather than a substantial number of similar code pieces. We im-
plemented IPPO and it supports further extension and flexible
Session 5D: Misc: Android and Vulnerabilities CCS ’21, November 15–19, 2021, Virtual Event, Republic of Korea1628customization on specific kind of security operations. We will
open source IPPO1 to facilitate further researches.
• New techniques for constructing object-based similar-path
pairs. An important technical challenge in IPPO is to construct
path pairs that are semantically similar. To improve the precision,
we develop the object-based similarity analysis. We also develop
a set of rules to refine the similar path construction. In addition,
we propose return value-based sub-CFG and reduced similar path
to address the path-explosion problem.
• Finding and fixing numerous new bugs. With IPPO, we found
numerous new bugs in the Linux kernel, the OpenSSL library, the
FreeBSD kernel, and PHP, which could cause various security and
reliability issues. We have reported these bugs, and most of them
have been fixed by working with the community maintainers.
2 Background and Motivation
2.1 Missing Security Operation Bugs
In this paper, we focus on the missed security operations in similar-
path pairs. Missing security operations introduces bugs when such
security operations are indispensable in a specific context. Figure 2
shows a memory leak bug (CVE-2019-8980 [3]). variable buf allocated
at line 6 is not freed on failure of kernel_read() at line 8, which
allows attacks to cause a DoS by triggering vfs_read failures.
...
if (id != READING_FIRMWARE_PREALLOC_BUFFER)
*buf = vmalloc(i_size);
...
bytes = kernel_read(file, *buf + pos, i_size - pos, &pos);
if (bytes dev);
if (err) {
pr_err("mii_bus %s failed to register\n", bus->id);
put_device(&bus->dev); //Redundant release
return -EINVAL;
1 /* drivers/net/ethernet/agere/et131x.c */
2 int __mdiobus_register(struct mii_bus *bus, struct module *owner)
3 {
4
5
6
7
8 -
9
10
11
12 }
13
14 /* drivers/staging/netlogic/xlr_net.c */
15 static int xlr_setup_mdio(struct xlr_net_priv *priv,
16
17 {
18
19
20
21
22
23
24
25
26 }
mdiobus_free(priv->mii_bus);
pr_err("mdio bus registration failed\n");
return err;
...
err = mdiobus_register(priv->mii_bus);
if (err) {
struct platform_device *pdev)
}
...
Figure 3: CVE-2019-12819, a use-after-free vulnerability.
2.2 Impact of Missing Security Operations
We collected recently published Linux kernel vulnerabilities (pub-
lished between January and August during 2019) in CVE Details
[4] to analyze the impact of missing security operations. We finally
screened out 121 vulnerabilities with certain security impacts and
valid patches. Among these vulnerabilities, we found that 69 (57.0%)
of them are fixed by adding missed security operations directly.
Another 10 (8.3%) vulnerabilities are fixed by adjusting the posi-
tion of security operations, which can also be regarded as a kind of
missing security operations at a specific path location. Three (2.5%)
vulnerabilities are caused by redundant security operations. The
missed security operations including security checks, variable ini-