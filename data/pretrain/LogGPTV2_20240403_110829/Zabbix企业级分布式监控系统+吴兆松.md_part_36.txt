quick
max_allowed_packet=16M
[mysql]
no-auto-rehash
[myisamchk]
key_buffer_size= 20M
sort buffer size =20M
read buffer=2M
write_buffer=2M
[mysqlhotcopy]
interactive-timeout
12.7其他方面
选用更好的硬件配置和快速的磁盘配置等工作应该是在规划之前进行的，如
选用raidl0、SSD固态硬盘、多核CPU、大容量内存等硬件优化。
通常，在优化软件无效的情况下，换更好的硬件会有非常明显的效果，但大
多数情况下，我们还是以优化软件为主。
对于特大型环境，可能由于Zabbix本身对某些方面的性能并未考虑周全，需
要从代码级别进行二次开发优化。当然，这要根据自己的需求来改进。
289
---
## Page 306
第13章ZabbixAPl的使用
利用Zabbix的API功能可以很方便地通过其他程序调用Zabbix，从而实现灵
活的扩展Zabbix方式。本章讲解了ZabbixAPI的使用，对部分ZabbixAPI进行
了分析。希望通过本章的学习，能让读者对Zabbix的API有更深入的认识。
13.1ZabbixAPI简介
ZabbixAPI具有重要的功能，为第三方调用Zabbix、批量操作提供可编程接
口，从而轻松地用于自己的业务系统，将Zabbix 监控系统与运维系统相集成。
ZabbixAPI是基于前端HTTP协议实现的，也就是可以通过HTTP请求实现
的API。API数据传输采用JSONRPC协议。
由于Zabbix的Web前端是用PHP语言编写的，而PHP的性能和相关配置参
数有极大的关系。因此，如果在大型的环境中使用，可以对PHP进行负载均衡，
例如，开启PHP多进程等方式来解决负载问题。除了对服务器本身进行优化外，
尽量减少对API的调用也是集成第三方系统应该遵循的一个原则。
在Zabbix2.2中，所有的API都有对应的官方文档和详细说明，网址为
https://www.zabbix.com/documentation/2.2/manual/api/reference，这里有所有的AP1用法。
13.2 JSON-RPC
既然ZabbixAPI采用JSON-RPC协议传输数据，那么我们先来了解一下这个
协议。
JSON-RPC是基于JSON的跨语言远程调用协议，比XML-RPC、Webservice
等基于文本的协议传输数据量要小；相比Hessian、Java-RPC等二进制协议更便
于调试、实现、扩展，是非常优秀的一种远程调用协议。目前主流语言都已有
JSON-RPC的实现框架，Java语言中较好的JSON-RPC实现框架有Jsonrpc4j、
Jpoxy、JSON-RPC，其中，Jsonrpc4j既可独立使用，又可与Spring无缝结合，比
较适用于基于Spring的项目开发。
1.JSON-RPC协议描述
---
## Page 307
第13章ZabbixAPI的使用
参数说明如下。
·method：调用的方法名。
·params：方法传入的参数，若无参数，则传入[]。
·id：调用标识符，用于标识一次远程调用过程。
服务器收到JSON-RPC的调用请求，然后处理该请求的方法调用，并将方法
调用处理后的结果响应给调用方。返回的数据格式如下。
"result":
"id is 000",
"error":
null,
"id":
1
参数说明如下。
·result：方法返回值，若无返回值或调用出错，则返回null。
error：调用时错误，无错误则返回null。
·id：调用标识符，与调用方传入的标识符一致。
以上就是JSON-RPC协议规范的内容，它非常简单、小巧，且便于用各种语
言实现。
2.ZabbixAPI支持的数据类型
ZabbixAPI支持的数据类型如表13-1所示。
表13-1
类
型
说
明
bool
布尔值true或者false
flag
当该值不等于空或者false时，被认为是true
integer
整数
float
浮点数
string
文本字符串
timestamp
UNIX时间戳
array
数组
关联数组
object
可以是一个数值，也可以是部分参数。
query
extend：返回所有的对象值；
count：返回值的数量
在使用get方法的时候，支持的参数如表13-2所示。
291
---
## Page 308
Zabbix企业级分布式监控系统
表13-2
参
数
类
型
描
述
countOutput
flag
返回结果的个数，而非实际的数据
如果设置为true，用户可对返回的对象进行写操作，默认为
editable
boolean
false
excludeSearch
flag
返回不匹配给定参数的结果
返回过滤后的结果，参数的值可以为一个数组或者是单个值，
filter
object
text字段不能使用此参数
limit
integer
限制返回结果的数量
nodeids
string/array
返回给定节点的对象信息
output
query
返回对象的属性。默认为extend
preservekeys
flag
返回以ID为键的数组
search
object
搜索匹配的字符串，仅用于字符和文本字段
如果设置为true，则返回filter或search字段中所有的值。默
searchByAny
boolean
认值为false
如果设置为true，允许使用“*”作为搜索参数的通配符。默
searchWildcardsEnabled
boolean
认值为false
sortfield
string/array
对给定的参数属性进行排序
sortorder
string/array
排序。ASC为升序排列，DESC为降序排列
startSearch
flag
搜索以某个参数开始的结果
3.Zabbix2.0和Zabbix2.2的API改进
对于Zabbix2.0和Zabbix2.2的API改动，请参考文档：
https://www.zabbix.com/documentation/2.2/manual/api/changes_2.0
2.2
另外，API的变化可参考如下地址中的文档：
https://github.com/itnihao/zabbix-book/tree/master/17-chapter
4.ZabbixAPI代码的路径
ZabbixAPI代码的路径如图13-1所示。
ap
api/
[root@wwwzabbix]#1sap
图13-1
前端PHP的代码中有一个api_jsonrpc.php文件，是API的入口文件。调用时
的 URL 是 http://x.x.x.x/api_jsonrpc.php。
API目录下面是API实现的代码。
292
---
## Page 309
第13章ZabbixAPI的使用
13.3
ZabbixAPI的使用流程
13.3.1使用API的基本步骤
使用API的基本步骤如下。
①连接http://x.x.x.x/api_jsonrpc.php，提供用户名和密码，并标识HTTP头部
Content-Type":"application/json"，HTTP 方法为 post。
②获取SESSIONID。
③通过SESSIONID建立后续的连接。
④提交POST数据，格式为JSON，其中放对应的方法，获取需要的数据。
13.3.2如何使用官方文档获取帮助
ZabbixAPI的使用主要是参考官方文档，这里我们要学习的是如何使用官方
文档。例如，想要获取Host的信息，可查看官方文档，地址如下。
https://www.zabbix.com/documentation/2.2/manual/api/reference/host/get
官方文档以参数列表的形式显示，一些例子已经非常详细地进行了说明。
下面看一个官方的示例，如图13-2所示。
Retrieving data by name
Retrieve all data about twohosts named"Zabbixserver"and"Linuxserver"
Request:
“jsonrpe""2.0"
"method".
"host.get"
params"
"output"
"extend"
“filter"
"host"[
"Linux server"
uth"
"038e1d7b1735c6a5436ee9eae095879e"
"id"
图13-2
其中，params可选的参数有很多，如图13-3所示。
293
---
## Page 310
Zabbix企业级分布式监控系统
参数
类型
描述
spidnob
string/array
Return only hosts that belong to
applicationids
string/array
Return onlyhosts that have the
dserviceids
string/array
Return onlyhosts that are relate
graphids
string/array
Return only hosts that have the
hostids
string/array
Return only hosts with the given
httptestids
string/array
Return only hosts thathave the
interfaceids
string/array
Return only hosts that use the gi
itemids
string/array
Return onlyhosts that have the
maintenanceids
string/array
Return onlyhosts that are affect
monitored_hosts
flag
Return only monitoredhosts.
proxy_hosts
ffag
Retun only proxies.
proxyids
string/array
Return onlyhosts that are monito
图13-3
我们可以只对部分想要用的参数进行筛选，例如，上面的例子中，只用了
output和filter 这两个参数，如果还需要其他参数，则可以直接添加后使用。
13.3.3用CURL模拟API的使用
下面用CURL浏览器来模拟API的使用过程。
1）获取Session的语句如下。
jsonrpc": "2.o", "method":"user.authenticate","params":{"user":"Admin
","password":"zabbix"),"auth":null,"id":0}'http://192.168.0.200:8
090/zabbix/api_jsonrpc.php
得到的结果如下。
"jsonrpc":"2.0",
"result":"0d16a7b7cf3ed8394e020f54ffd48224"
"id":0
详细的HTTP头部如图13-4所示。
auth":nu11,"id:0}http://192.168.0.200:8090/zabbix/api_jsonrpc.php
Date:Mon,16Dec2013 04:42:50GMT
red-By:PHP/5.3.3
K-P
Content-Type:application/json
"jsonrpc":"2.0","result":"0d16a7b7cf3ed8394e020f54ffd48224","id":0}
图13-4
查询MySQL数据库可以看到，SESSIONID已经存在于zabbix.sessions表中，
如图13-5所示。
294
---
## Page 311
第13章2
ZabbixAPI的使用
mysql> select # from zabbix.sessions;
sessionid
043fe9e00e209f86a81c0c4ddaf9bd92
1387163963
05c5f95d1fe4739ad54ac73d5a65f995
1387164206
0
1387169180
16a7b3ed2fff2
1
1387168970
0
1387161490
0
243185f1a3103608329dbcca84145c4c
1387161335
?
2c0cc66f7127c7f89fd6ed483887a0bf
1
1387162713
1387161853
图13-5
2）用Session请求去调用API的host.get方法的语句如下。
shell#curl -i-x POsT -H'Content-Type:application/json'-d
'{"jsonrpc":"2.o","method":"host.get","params":I"output":"extend","f
ilter":("host":""}},"auth":"0d16a7b7cf3ed8394e020f54ffd48224","id":1)
http://192.168.0.200:8090/zabbix/api_jsonrpc.php
得到的结果如图13-6所示。
http://192.168.0.200:8090/zabbix/api
X-PoWered-By:PHP/5.3.3
Content-Length: 654
Connection:close
{"jsonrpc":"2.0","result":[f"maintenances":[],"hostid":"10084","proxy_hostid":"o","h
图13-6
注意，下面的格式是为了方便查看，对结果进行了排版。
["jsonrpc":"2.o","result":[
"maintenances":[l,
"hostid":"10084",
"proxy_hostid":"o",
"host":"Zabbix server",
"status":"o",
"disable until":"0",
"error":"",
"available":"1",
"errors_from":"o",
"lastaccess":"o",
"ipmi _authtype":"-1",
"ipmi_privilege":"2",
"ipmi_username":"",
"ipmi_password":"",
"ipmi_disable_until":"0",
"ipmi_available":"0",
"snmp_disable_until":"0",
"snmp_available":"0",
"maintenanceid":"o",
295
---
## Page 312
Zabbix企业级分布式监控系统
"maintenance_status":"o",
"maintenance_type":"o",
"maintenance_from":"o",
"ipmi_errors_from":"o",
"snmp_errors_from":"o",
"ipmi_error":"",
"snmp_error":"",
"jmx_disable_until":"0",
"jmx_available":"0",
"jmx_errors_from":"o",
"jmx_error":"",
"name":"Zabbix server")
],
"id":1}
上面的结果中显示了如何使用API，使我们对API有了一个宏观的认识。
下面对API进行详细学习。
13.3.4HTTP头部Content-Type设置
HTTP头部Content-Type必须设置为application/json，否则，会提示状态码为
会返回此错误代码），如图13-7所示。
http://192.168.0
200:8090/zabbix/api_jsonrpc.
HTTP/1.0412Pre
econdition Failed
Date:Mon,16 Dec 2013 05:05:22 GMT
Content-Length:0
Connection:close
Content-Type:text/html;charset=uTF-8
图13-7
13.3.5关于用户认证
认证成功的提示内容如下。
"jsonrpc":"2.0",
"result":"0d16a7b7cf3ed8394e020f54ffd48224",
"id":0
认证失败的提示内容如下。
"jsonrpc":"2.0",
"error":
"code":-32602,
296
---
## Page 313
第13章ZabbixAPI的使用
"message":"Invalid params.",
"id":0
所以，在调用API的时候，对是否认证成功需要进行判断，以给出友好的信
息提示，便于排除错误。
13.3.6获取主机信息（用Python写的示例）
关于获取主机信息的API方法，请参看以下地址。
https://www.zabbix.com/documentation/2.2/manual/api/reference/host/get
继续前面的例子，下面用Python语言来实现，具体代码如下。
#!/usr/bin/env python
#coding=utf-8
#导入模块，urllib2是一个模拟浏览器HTTP方法的模块
import json
import urllib2
import sys
from urllib2 import Request, urlopen, URLError, HTTPError
#url and url header
#zabbix的API地址、用户名、密码，这里修改为实际的参数
zabbix_ur1="http://192.168.0.200:8090/zabbix/api_jsonrpc.php"
zabbix_user="admin"
zabbix_pass="zabbix"
auth_code
=""
#auth user and password
#用户认证信息的部分，最终的目的是得到一个SESSIONID
#下面是生成一个JSON格式的数据：用户名和密码
auth_data = json.dumps(
"jsonrpc":"2.o",
"method":"user.login",
"params":
"user":zabbix_user,
"password":zabbix _pass
"id":0
#create request object
request = urllib2.Request(zabbix_url,auth_data)
for key in zabbix _header:
request.add _header (key, zabbix_header [key])
297
---
## Page 314
Zabbix企业级分布式监控系统
#认证和获取SESSIONID
try:
result=urllib2.urlopen(request)
#对于认证出错的处理
except HTTPError, e:
e.code
except URLError, e:
print 'We failed to reach a server.Reason:', e.reason
else:
response=json.loads(result.read())
result.close()
#如果访问成功或者失败，这里的数据会显示如下
sucess result:
{"jsonrpc":"2.o",