    |                                      |
    |                                      |
    |--   ---      ---   ---       ---   --|
    |       |      |       |       |       |
    | EXIT0 |      | EXIT5 |       | EXIT4 |
    |       |      |       |       |       |
    ----------------------------------------
Now we can walk around the rooms again, collecting parts of the flag from each exit:
```
 __    __   __  .___________.
|  |  |  | |  | |           |
|  |__|  | |  | `---|  |----`
|   __   | |  |     |  |     
|  |  |  | |  |     |  |     
|__|  |__| |__|     |__|   
  ______   ______   .__   __.    ___
 /      | /  __  \  |  \ |  |   /  /
|  ,----'|  |  |  | |   \|  |  |  | 
|  |     |  |  |  | |  . `  | /  /  
|  `----.|  `--'  | |  |\   | \  \  
 \______| \______/  |__| \__|  |  | 
                                \__
 __    __        .______              
|  |  |  |       |   _  \             
|  |  |  |       |  |_)  |            
|  |  |  |       |      /             
|  `--'  |       |  |\  \----.        
 \______/   _____| _| `._____| ______ 
           |______|           |______|
 _______   _  _          .___  ___. 
|       \ | || |         |   \/   | 
|  .--.  || || |_        |  \  /  | 
|  |  |  ||__   _|       |  |\/|  | 
|  '--'  |   | |         |  |  |  | 
|_______/    |_|    _____|__|  |__| 
                   |______|         
     ___       _____  .___________.____   
    /   \     | ____| |           |___ \  
   /  ^  \    | |__   `---|  |----` __) | 
  /  /_\  \   |___ \      |  |     |__ <  
 /  _____  \   ___) |     |  |     ___) | 
/__/     \__\ |____/      |__|    |____/
.______             ___    _______ 
|   _  \           / _ \  |   ____|
|  |_)  |         | | | | |  |__   
|      /          | | | | |   __|  
|  |\  \----.     | |_| | |  |     
| _| `._____| _____\___/  |__|     
             |______|    
      .______      ____   
      |   _  \    |___ \  
      |  |_)  |     __) | 
      |      /     |__ <  
      |  |\  \----.___) | 
 _____| _| `._____|____/  
|______|                
```
But once we collect them, a secret door gets opened:
    ----------------------------------------
    |       |      |       |       |       |
    | EXIT6 |      | EXIT2 |       | EXIT1 |
    |       |      |       |       |       |
    |--------      ---------       --------|
    |   ðŸ¤©                                 |
    |                                      |
    |--------                              ----
    |       |                               
    | EXIT3 |                               
    |       |                               
    |--------                              ----
    |                                      |
    |                                      |
    |--------      ---------       --------|
    |       |      |       |       |       |
    | EXIT0 |      | EXIT5 |       | EXIT4 |
    |       |      |       |       |       |
    ----------------------------------------
Once you walk there, you're faced with the final architecture:
```
 â–„â–ˆ     â–ˆâ–„     â–„â–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆ    â–„â–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆ   â–„â–„â–„â–„â–ˆâ–ˆâ–ˆâ–„â–„â–„â–„   
â–ˆâ–ˆâ–ˆ     â–ˆâ–ˆâ–ˆ   â–ˆâ–ˆâ–ˆ    â–ˆâ–ˆâ–ˆ   â–ˆâ–ˆâ–ˆ    â–ˆâ–ˆâ–ˆ â–„â–ˆâ–ˆâ–€â–€â–€â–ˆâ–ˆâ–ˆâ–€â–€â–€â–ˆâ–ˆâ–„ 
â–ˆâ–ˆâ–ˆ     â–ˆâ–ˆâ–ˆ   â–ˆâ–ˆâ–ˆ    â–ˆâ–ˆâ–ˆ   â–ˆâ–ˆâ–ˆ    â–ˆâ–€  â–ˆâ–ˆâ–ˆ   â–ˆâ–ˆâ–ˆ   â–ˆâ–ˆâ–ˆ 
â–ˆâ–ˆâ–ˆ     â–ˆâ–ˆâ–ˆ   â–ˆâ–ˆâ–ˆ    â–ˆâ–ˆâ–ˆ   â–ˆâ–ˆâ–ˆ        â–ˆâ–ˆâ–ˆ   â–ˆâ–ˆâ–ˆ   â–ˆâ–ˆâ–ˆ 
â–ˆâ–ˆâ–ˆ     â–ˆâ–ˆâ–ˆ â–€â–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆ â–€â–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆ â–ˆâ–ˆâ–ˆ   â–ˆâ–ˆâ–ˆ   â–ˆâ–ˆâ–ˆ 
â–ˆâ–ˆâ–ˆ     â–ˆâ–ˆâ–ˆ   â–ˆâ–ˆâ–ˆ    â–ˆâ–ˆâ–ˆ          â–ˆâ–ˆâ–ˆ â–ˆâ–ˆâ–ˆ   â–ˆâ–ˆâ–ˆ   â–ˆâ–ˆâ–ˆ 
â–ˆâ–ˆâ–ˆ â–„â–ˆâ–„ â–ˆâ–ˆâ–ˆ   â–ˆâ–ˆâ–ˆ    â–ˆâ–ˆâ–ˆ    â–„â–ˆ    â–ˆâ–ˆâ–ˆ â–ˆâ–ˆâ–ˆ   â–ˆâ–ˆâ–ˆ   â–ˆâ–ˆâ–ˆ 
 â–€â–ˆâ–ˆâ–ˆâ–€â–ˆâ–ˆâ–ˆâ–€    â–ˆâ–ˆâ–ˆ    â–ˆâ–€   â–„â–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–€   â–€â–ˆ   â–ˆâ–ˆâ–ˆ   â–ˆâ–€ 
```
For WASM we decided to use existing tools: https://github.com/WebAssembly/wabt
There is asembler, disasembler and interpter.
We decided to simply call those tools from python script and collect the outputs.
The only trick was that we get only code without the function header, so we have to place the code in proper structure in order to assemble/disassemble or evaluate.
For this we created a small [wrapper](wasmlib.py).
Once we pass the WASM stage we get the last chunk of the flag:
```
           ___      .__   __.  _______  
          /   \     |  \ |  | |       \ 
         /  ^  \    |   \|  | |  .--.  |
        /  /_\  \   |  . `  | |  |  |  |
       /  _____  \  |  |\   | |  '--'  |
 _____/__/     \__\ |__| \__| |_______/ 
|______|                                
      .______   .______     ______      
      |   _  \  |   _  \   /      |     
      |  |_)  | |  |_)  | |  ,----'     
      |   ___/  |   ___/  |  |          
      |  |      |  |      |  `----.     
 _____| _|      | _|       \______|     
|______|                                
       __     _  _    ____   ___        
      |  |  _| || |_ |___ \  \  \       
      |  | |_  __  _|  __) |  |  |      
      |  |  _| || |_  |__ <    \  \     
      |__| |_  __  _| ___) |   /  /     
 _____(__)   |_||_|  |____/   |  |      
|______|                     /__/  
```
The task was interesting, but the fact that last 2 architectures were "secret" until you reached them was very annoying.
It was kind of a honey-pot challenge.
It seemed doable initially, with Keystone, Capstone and Unicorn, but the further you go, the harder it got.
Entire solver script is [here](solver.py) but it's quite unstable so you might need to run it multiple times before you manage to win.
There is high probability of solver failing for PPC and RISC-V code evaluation.