title:Autonomic Response to Distributed Denial of Service Attacks
author:Daniel F. Sterne and
Kelly Djahandari and
Brett Wilson and
Bill Babson and
Dan Schnackenberg and
Harley Holliday and
Travis Reid
Autonomic Response to Distributed Denial of
Service Attacks(cid:1)
Dan Sterne1, Kelly Djahandari1, Brett Wilson1, Bill Babson1,
Dan Schnackenberg2, Harley Holliday2, and Travis Reid2
1 NAI Labs, 3060 Washington Road, Glenwood, MD 21738
{Dan Sterne,Kelly Djahandari,Brett Wilson}@nai.com, PI:EMAIL
2 Boeing Phantom Works, MS 88-12, PO Box 3999, Seattle, WA 98124-2499
{daniel.d.schnackenberg,travis.s.reid,harley.s.holiday}@boeing.com
Abstract. The Cooperative Intrusion Traceback and Response Archi-
tecture (CITRA) [1] and the Intruder Detection and Isolation Protocol
(IDIP) [2] provide an infrastructure that enables intrusion detection sys-
tems, ﬁrewalls, routers, and other components to cooperatively trace and
block network intrusions as close to their sources as possible. We present
the results of recent testbed experiments using CITRA and IDIP to
defend streaming multimedia sessions against the Stacheldraht DDoS
toolkit. Experimental data suggests that these technologies represent a
promising approach for autonomic DDoS defense.
1 Introduction
Distributed Denial of Service (DDoS) attacks are a critical threat to the Internet.
Increasingly powerful DDoS toolkits are readily available to potential attackers
and essential systems are ill prepared to defend themselves. For example, in
January 2001, Microsoft’s web sites hosting Hotmail, MSN, Expedia, and other
major services were largely inaccessible for 22 hours because of a DDoS attack.
The security community has long known that DDoS attacks are possible, but
only recently have such attacks become so easy to launch and popular with
hackers.
Although technological advances for DDoS defense are beginning to emerge
([3,4]), the current state of practice relies primarily on expert-labor-intensive
manual procedures by network administrators. These procedures consist primar-
ily of two activities: 1) “input debugging” [5], in which administrators at a router
near the DDoS victim use network traﬃc probes and statistics to identify the
router’s physical interfaces through which the DDoS ﬂooding traﬃc enters their
network; and 2) mitigation of network traﬃc ﬂow through those interfaces by in-
serting packet ﬁltering or rate limiting rules into the associated router. Once the
oﬀending input interfaces are identiﬁed, administrators typically contact their
(cid:1) This research was supported by DARPA/Rome Laboratory Contracts F30602-98-C-
0012, F30602-99-C-0181, and F30602-97-C-0309. Distribution Statement “A”, Ap-
proved for Public Release - Distribution Unlimited.
W. Lee, L. M´e, and A. Wespi (Eds.): RAID 2001, LNCS 2212, pp. 134–149, 2001.
c(cid:1) Springer-Verlag Berlin Heidelberg 2001
Autonomic Response to Distributed Denial of Service Attacks
135
counterparts at upstream organizations from which oﬀending traﬃc is being
forwarded (e.g., an Internet service provider - ISP). The upstream organiza-
tions’ administrative personnel carry out input debugging and traﬃc mitigation
procedures on their own routers and contact their upstream counterparts. This
process continues upstream as far as possible until either 1) the ﬂood sources
are identiﬁed and extinguished, or 2) no further upstream cooperation can be
obtained.
These procedures have several crucial drawbacks.
– They require immediate availability of highly skilled network administrators,
who are in chronic short supply.
– They are time consuming, even for network gurus. It may take hours or
longer to diagnose and shutdown a DDoS attack, allowing downtime and
associated costs to mount.
– They do not scale. While it is possible to manually trace and mitigate DDoS
attacks from a small number of networks on an infrequent basis, these proce-
dures are impractical for attacks involving hundreds of networks or repetitive
“whack a mole” attacks in which new ﬂooding sources pop up as current ones
are stopped. Increasingly sophisticated attacks like these are likely to become
common as hacker toolkits evolve.
The Cooperative Intrusion Traceback and Response Architecture (CITRA)
and the Intruder Detection and Isolation Protocol (IDIP) on which it is based
provide an infrastructure enabling intrusion detection systems (IDS), ﬁrewalls,
routers, and other components to cooperatively trace and block network intru-
sions as close to their sources as possible. By automating the manual attack
traceback and mitigation procedures used today, this infrastructure enables net-
works to respond to intrusions autonomically, and in so doing, addresses the
drawbacks cited above.
CITRA and IDIP were initially developed long before the advent of DDoS
toolkits [6], but were intended to help protect networks against a broad spectrum
of attacks. We have recently adapted CITRA and IDIP for DDoS protection
and subjected them to experimental evaluation in a testbed environment. This
paper describes the results of tests using these technologies to defend streaming
multimedia sessions against the Stacheldraht DDoS toolkit [7].
This paper is organized as follows. Section 2 provides background information
about CITRA and IDIP. Section 3 describes our testbed, test scenario, and
measurement procedures. Sections 4 and 5 present experimental results and the
observations we derived from them. Section 6 discusses related work, and Section
7 provides a summary and conclusion.
2 Background
CITRA is based on IDIP1 [1,2,6], a protocol for reporting intrusion-related events
and coordinating attack traceback and automated response actions. As shown
1 In [2] and earlier reports, “IDIP” is used to refer to both a protocol and an architec-
ture. However, for terminological clarity, the authors recently introduced the term
136
D. Sterne et al.
in Figure 1, CITRA components are organized at two fundamental levels. First,
CITRA communities are administrative domains controlled by a management
component called a Discovery Coordinator (DC). Second, CITRA communities
consist of neighborhoods connected to each other via boundary controllers, i.e.,
routers and ﬁrewalls. A CITRA neighborhood is the collection of CITRA-enabled
devices (neighbors) that are adjacent in the sense that no other CITRA nodes
are interposed between them. CITRA utilizes the neighborhood structure to
trace and respond to intrusions; the DC, with human oversight, monitors and
directs activities throughout the community. We are also developing features to
support a third level of organization: cooperation among multiple CITRA com-
munities according to business relationships [1]. Features to support multicom-
munity operation include policy-based restrictions on 1) exchange of traceback
and blocking services, and 2) release and propagation of sensitive information
about perceived attack severity, deployed sensors, and internal topology.
Attack
Boundary
Controller
1
Neighborhood A
Neighborhood B
2
Intrusion
Detection
System
3
Boundary
Controllers
Boundary
Controllers
Community
Discovery
Coordinator
(DC)
Neighborhood C
Intrusion
Detection
System
Fig. 1. Attack Traceback and Mitigation across Neighborhoods within a CITRA Com-
munity
CITRA-enabled devices collect network audit data used in traceback, illus-
trated in Figure 1. If a CITRA-enabled detector detects an attack (step 1),
the detector sends a traceback request to each CITRA neighbor (step 2). Each
boundary controller and host along the potential path of an attack uses its net-
work audit trail to determine if the packets associated with the attack passed
through it. If so, the device sends a traceback request to its neighbors (step 3).
“CITRA” [1] to refer to the architecture, while retaining the use of “IDIP” to refer
to the protocol. We continue that usage here.
Autonomic Response to Distributed Denial of Service Attacks
137
This continues until either the attack is traced back to the source of the attack or
to the edge of the CITRA system. This technique is immune to address spooﬁng
because it relies on empirical (audit) data rather than the contents of IP source
address ﬁelds to determine whether a boundary controller is on the attack path.
At each CITRA component along the attack path, responses are taken in ac-
cordance with CITRA policy mechanisms [1]. For example, at a CITRA-enabled
ﬁrewall or router, the policy may specify that the service (port) being attacked
at a host should be blocked for all requests originating from the attacker’s ad-
dress or network for a speciﬁed time. For CITRA-enabled hosts, the policy may
specify that the oﬀending process should be killed or the oﬀending user’s account
disabled. The current implementation attempts to use the “narrowest” network
response that stops the current attack, minimizing the negative impact the re-
sponse might have on legitimate system users. A key premise underlying CITRA,
IDIP, and corresponding manual procedures used by network administrators is
that moving attack mitigation actions upstream increases their eﬀectiveness and
minimizes the collateral impact on other traﬃc.
Autonomous responses by individual components along the attack path are
temporary, e.g., for two minutes; they stop damage immediately and buy time
for the DC to formulate a more reasoned response. As detectors and CITRA
devices respond to traceback requests, each device sends a report to the DC
describing the responses it has taken. This enables the DC to gain a global
view of how the attack and autonomic responses moved through the community.
By combining this view with system topology information, in principle, the DC
can determine an optimal community response, which it orchestrates by sending
directives to each relevant CITRA platform in the community. For example,
the DC can remove redundant responses along the attack path to minimize
the potential negative impact or increase the duration of a response so that it
becomes relatively permanent.
In addition, by collecting intrusion detection and response information at
the DC, CITRA supports community-wide and cross-community aggregation
and correlation of attacks.
CITRA and IDIP are supported by software libraries that facilitate the in-
tegration of existing components. Over the past several years, a variety of IDSs,
boundary controllers, host-based responders, and other components have been
integrated together, including commercial products and research prototypes [2].
3 Experiment: Autonomic Response to DDoS
Given the emergence of DDoS attacks as a critical risk, the authors sought to 1)
investigate the capability of a CITRA-enabled network to defend itself against
DDoS attacks and 2) further explore the premise that these technologies are
applicable to a wide range of network intrusions.
Although some DDoS traﬃc can be easily distinguished from legitimate traf-
ﬁc, this is not true in the general case. More sophisticated DDoS toolkits generate
traﬃc that “blends in” with legitimate traﬃc and therefore cannot be blocked
138
D. Sterne et al.
by router packet ﬁlters without simultaneously blocking legitimate traﬃc. For
such attacks, traﬃc rate limiting may be more useful than packet ﬁltering. Rate
limiting is an approximate mitigation strategy because it allows some DDoS
traﬃc through and may inadvertently discard some legitimate traﬃc2. Never-
theless, if rate limiting parameters are chosen appropriately, rate limiting can
often ensure that enough useful bandwidth is available for legitimate traﬃc to
allow continuation of critical business activities, albeit at reduced speeds.
With this in mind, the authors integrated a simple rate limiter function on
CITRA-enabled Linux routers so that it could be used as an alternative intrusion
response. The rate limiter utilized token bucket rate limiting services provided
by the netﬁlter subsystem included in a recent release of the Linux kernel (2.4.0-
test2).
3.1 Objective
The overall objective of the experiment was to provide evidence to support or
refute the premise that CITRA and IDIP, as manifested in recent prototypes,
can defend against DDoS attacks. In particular, the authors sought to determine
whether CITRA’s autonomic activation and upstream propagation of rate lim-
iting could provide suﬃcient protection during a Stacheldraht v4 [7] attack to
allow resumption of a representative, bandwidth-intensive network application.
We chose Stacheldraht because it is representative of the DDoS hacker toolkits
that emerged in early 2000. Stacheldraht can generate ICMP and UDP ﬂoods,
TCP Syn ﬂoods, and Smurf attacks. It provides one or more master servers that
issue commands to multiple distributed agents that serve as ﬂooding sources.
Master servers can target ﬂoods at arbitrary machines and ports. This allowed
us to conﬁgure a DDoS attack that is highly disruptive of streaming media ses-
sions.
3.2 Test Application
We chose streaming audio/video as our representative application in the form of
the RealNetworks’ RealSystem c(cid:1) server and RealPlayer c(cid:1) client3. This applica-
tion is one of the most widely used streaming media applications on the Internet.
It provides a number of conﬁguration parameters useful for our experiment in-
cluding choice of transport protocol (TCP, HTTP, or UDP) and audio/video
encoding rates; the latter can be selected according to the bandwidth available
between each client and the server. The RealPlayer client also provides real-
time read-outs of targeted versus actual bandwidth in the form of line graphs or
histograms. We used these to monitor the impact of DDoS attacks.
2 Reliable delivery mechanisms that support legitimate traﬃc will detect lost packets
and retransmit them.
3 RealSystem and RealPlayer are registered trademarks of RealNetworks, Inc.
Autonomic Response to Distributed Denial of Service Attacks
139
3.3 Experiment Topology and Scenario
The experiment topology is shown in Figure 2. The 100Mbps hub in the center
is intended to loosely represent the Internet or the backbone of some other
large network. It provides connectivity among ﬁve other subnets, each of which
represents a diﬀerent organization’s network. Each of these is represented by an
ethernet switch or hub with attached nodes and is connected to the “Internet” via
a CITRA-enabled Linux router. The network at the bottom center of the ﬁgure
represents a server farm and network operations center. The RealSystem server
is attached to this network. The server is used as the DDoS attack’s target. This
conﬁguration models highly-publicized recent DDoS attacks in which internet-
accessible web servers and their surrounding infrastructure were targeted. Figure
2 also shows the primary ﬂow of traﬃc from the server to each client. Not shown
are control channels that ﬂow in the opposite direction, i.e., from each client
back to the server. A CITRA-enabled network IDS also resides on this network.
The detection system is a simple ﬂood threshold detector based on the public
domain utility iplog. Also connected to this network is the server community’s
DC.
Attack Agent Attack Agent
Attack Agent Attack Agent
Attack Agent Attack Agent
100 Mbps
Switch
Linux
Router 2
Linux
Router 5
100 Mbps
Switch
RealPlayer
Client 3
100 Mbps
Switch
100 Mbps
Switch
Linux
Router 3
Linux
Router 1
Detector
100 Mbps
Hub
100 Mbps
Hub
Linux
Router 4
Discovery
Coordinator
Master