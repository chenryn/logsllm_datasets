# 【技术分享】通过劫持DNS解析服务器攻击目标
|
##### 译文声明
本文是翻译文章，文章来源：thehackerblog.com
原文地址：
译文仅供参考，具体内容表达以及含义原文为准。
****
****
**翻译：**[ **pwn_361**
****](http://bobao.360.cn/member/contribute?uid=2798962642)
**预估稿费：300RMB**
**投稿方式：
发送邮件至[linwei#360.cn](mailto:PI:EMAIL)，或登陆[网页版](http://bobao.360.cn/contribute/index)在线投稿**
**  
**
**前言**
在前一篇研究中，我们探讨了当[解析服务器](http://www.inmotionhosting.com/support/domain-names/dns-nameserver-changes/what-is-a-name-server)的域名到期后，允许我们完全接管某些目标域名(这些域名由已经过期的解析服务器解析)的问题。在那个例子中，[我们通过购买一个过期的权威解析服务器的域名，接管了需要权威解析服务器来解析的“maris.int”域名](https://thehackerblog.com/the-international-incident-gaining-control-of-a-int-domain-name-with-dns-trickery/index.html)(建议先看一看这篇文章，同时最好有一些DNS详细协议的相关基础，否则下面的内容不太好理解，有基础的可以直接pass)。这个先前的例子基于两个有问题的域名服务器，一个配置有问题，另一个域名已经过期。由于存在这两个问题，导致了解析服务器的域名完全无法访问到(直到我买了该域名)。从而更容易控制这个域名上承载的域名系统(如果一个解析服务器有问题，客户端会自动去查询下一个工作的解析服务器)。这也引发了一个重要的问题：由于解析服务器的域名过期、或其他可以接管的漏洞，导致一些解析服务器无法工作，那么还有没有这样的域名和解析服务器呢？实际上，有很多方法，可以找到这样的解析服务器。
**一些坏的解析服务器**
如果某解析服务器的域名存在漏洞，我们如果能找到这样的域名，并控制该域名，那么，对于那些经过该域名所在的解析服务器解析的域名，我们都可以很容易的进行各种攻击。为了找到这样的域名，我可能不得不返回去扫描互联网，幸运的是，因为[我们已经有了一个“.int”域名区域的复本](https://thehackerblog.com/the-international-incident-gaining-control-of-a-int-domain-name-with-dns-trickery/index.html)(在前一篇研究文章中，我们已经得到了)，我们可以从这开始。在遍历了这个列表后，我发现了另一个有漏洞的“.int”域名:iom.int。实际上，这个网站的功能是齐全的，并且能正常工作，只是它的四个解析服务器中，有两个解析服务器的域名是过期的。非常有趣，除非你遍历了整个[DNS树](https://technet.microsoft.com/en-us/library/dd197427\(v=ws.10\).aspx)，否则你可能无法发现这个问题。例如，下面是iom.int域名的NS记录查询结果：
如上图所示，我们使用了GOOGLE的8.8.8.8公共DNS解析服务器，来查询iom.int的解析服务器，返回了两个域名，分别是“ns1.zrh1.ch.colt.net”和“ns1.gva.ch.colt.net”，状态码是“NOERROR”。“colt.net”域名当前已经被注册、处在工作中、并且返回了预期的DNS记录。如果是这样的情况，那么漏洞在哪呢？实地上，因为dig的工作方式，我们有一点被误导了。让我们来看一看运行dig时加上“+trace”参数，会发生什么：
如上所示，dig的进程在遍历DNS树。首先，我们看到它向根解析服务器(13台)查询了“.int”顶级域名的解析服务器，结果就是“ns.icann.org”、“ns1.cs.ucl.ac.uk”等5个域名，下一步，dig会随机向一个刚才返回的“.int”的解析服务器查询iom.int域名的解析服务器，如上图，可以看到，返回了多个iom.int域名的解析服务器。然而，dig会继续查询[委托链](https://technet.microsoft.com/en-us/library/cc771640\(v=ws.11\).aspx)，直到得到一个[权威应答](https://blog.opendns.com/2014/07/16/difference-authoritative-recursive-dns-nameservers/)。此外，如果“.int”顶级域名的解析服务器不是iom.int区域的权威区域，因此DNS回应数据包中[权威应答标志](http://www.tcpipguide.com/free/t_DNSMessageHeaderandQuestionSectionFormat.htm)没有被设置。只有返回的解析服务器包含特定区域时，该字段才会被设置。此时域名系统会说：“停止遍历DNS树，你要找的区域属于我这里。”在dig的处理过程中，我们看到：从“.int”顶级解析务器中随机选出了一个解析服务器，然后再向该解析服务器查询iom.int的解析服务器，并找到了iom.int区域的权威解析服务器，并返回给我们。有趣的是，如果dig遇到一些非工作的解析服务器时，比如“ns1.iom.org.ph”和“ns2.iom.org.ph”，dig在这些域名对应的解析服务器上的查询会失败，但是进程不会终止，会自动跳到下一个工作的解析服务器上，并且不会通知我们。
**域名的可用性、注册的真相、粗略的DNS配置**
最初，当我使用我写的一些自定义软件扫描这个漏洞时，我收到一个警告信息：iom.org.ph可以被注册，也就是说该域名还没有被使用，是无效的。但是当我使用dig来进行查询时，我发现了一些奇怪的东西：
上图的查询显示出，当我们查询iom.org.ph域名的A记录(IP记录)时，我们得到了一个有效的IP地址。那么，等一下，iom.org.ph域名真的返回了一个有效的记录吗？如果这个域名不存在(可以被注册)，那怎么还能返回一个记录呢？当我查询这个域名的解析服务器时，事件变的更奇怪了：
从上图的dig结果看到，对于该域名，尽管刚才返回了一个A记录，但是并不存在它的解析服务器(NS记录)。怎么会这样呢？尝试此查询后，我甚至对该域名的可用性没有信心。因此，为了验证我的想法，我进行了以下查询：
好了，根据上图显示，很明显了，所有不存在的“.org.ph”域名都会返回一个A记录(IP)。那么这个IP上到底有什么东西呢？下面的截图是我们访问“ThisCantPossiblyExist.org.ph”域名的结果。
上图已经清楚告诉我们发生了什么。通常，一个域名如果没有被注册，是不会被解析的，但是，“.org.ph”顶级域名存在一个A记录，它被解析了，并将该顶级域名将访问域名的用户，引导到一个充满了可疑广告的页面中，包含一个通知信息：“这个域名可以被注册”。这可能是想从访问该域名(不存在的域名)的人那里赚更多的钱。我不想评论这个策略的道德性或模糊性，只想告诉大家，如何才能用dig探测到这种情况。下面的查询显示了DNS到底是怎么配置的：
在上面的查询中，我们用了通配符来查询任何与“*.org.ph”相匹配的结果，上面的结果很好的说明了事件的原因。
另外，需要做进一步健全性检查时，域名的历史数据是一个很有用的强大工具。我知道的最大的一个DNS历史数据、WHOIS信息、和常规互联网数据收集数据库，是“[Domain
Tools](http://domaintools.com/)”，在联系他们后，他们伸出手来为我提供了一个研究者帐户，而后，我用这些数据得到了有关这个漏洞的所有信息。查询了这个资料库后，我知道了iom.org.ph域名第一次出现这个漏洞(或者第一次过期)的准确时间。
有趣的是，这个历史数据显示，该域名从2013年以后可能就已经过期。并且该问题(已经过期)可能已经存在了很长时间了，这个事实表明，这种类型的漏洞是足够微妙的，以至于在这么长时间都被忽略了。
**接管域名**
一旦我认识到iom.org.ph域名确实可用时，我可以注册这个域名，并将这个域名变成iom.int域名的权威解析服务器。这和我们上一篇文章中maris.int域名很相似，并且有一个有趣的问题。当一个人试图访问iom.int域名时，最终通过我们的解析服务器来查询的可能性是百分之50(根据前面“dig
iom.int
+trace”的结果，读者可以想想为什么是50%)。出现这个结果是因为DNS的轮询调度机制，这是一种利用多个服务器来分散DNS查询负载的技术。这个概念是相当简单的，在DNS系统中，如果你想利用多个服务器来分散DNS的查询负载，对于一个查询，就可能会得到多个结果(这个结果不是最后的IP，而是中间过程中查询到了解析服务器的结果，解析服务器会有多个)。因此，为了均匀的分配负载，你得到的返回结果将会是随机的，这样的话，查询客户端第次查询都会选择一个不同的解析服务器(NS记录)。在这个例子中，当我们查询DNS的A记录时，根据这个机制，有可能在三个IP中随机的返回一个，每个IP的可能性大约是33.33%。举个例子，假设我们要尝试向“.int”顶级域名的解析服务器查询iom.int域名的NS记录(解析服务器)。首先，我们通过下面的步骤得到“.int”顶级域名和解析服务器：
然后，我们随机选出一个(下面假如随机选出了ns.uu.net域名)，并多次向它查询iom.int域名的解析服务器：
正好上面看到的，我们每次查询得到的解析服务器的顺序都不一样。这就是DNS轮询调试机制的好处，每次得到不同的解析服务器会大致均衡DNS查询的负载。然而，这个让我们的攻击变的复杂，因为用户有50%的机会能得到合法的解析服务器。因此，现在的问题是我们如何才能颠覆这个概率，并对我们有利呢？
**轮询调试的概率可以对我们永远有利**
目前，我们无法控制“.int”顶级域名服务器的行为，我们只有大约50%的机会。作为一个攻击者，我们需要弄清楚如何才能使这个概率接近100%。幸运的是，因为DNS的结构，我们可以做的非常接近。
当你访问www.google.com时，你的电脑会进行DNS查询得到一个IP地址，从表面上看，得到这个结果时，它好像没有遍历整个DNS树。相反，它可能会使用一个DNS解析器，并以你的名义执行此过程，并缓存所有的结果。你的电脑在DHCP过程中，会被分配一个大型的DNS解析器(如8.8.8.8或8.8.8.4
DNS服务器)，或者你的本地路由器或电脑中的一个小型的解析器。在解析器后端，会有很多正在进行DNS查询的客户端，同时可以通过缓存结果加快查询速度。因此，当一个客户端在查询www.google.com域名的地址前，如果其它客户端已经查询过，那么这个客户端就不会遍历DNS树，因为该域名的查询结果在缓存中已经有了。在DNS结构中，缓存有优先权，要意识到这一点对我们很重要。这种架构的副作用是很明显的，比如类似Dyn公司遭受DDoS攻击的事件，造成了数百万用户在互联网下线。事实证明，当你把所有的鸡蛋放在一个篮子里，你最好确定篮子可以撑的住。
在完成一次DNS查询后，解析器会暂时保存查询结果，不论回应的TTL是否设置。意味着，例如，如果一个回应包的TTL设置为120，缓存解析器分服从这个设置，并在两分钟内给查询这个域名的其它客户端返回一样的记录。这个值是有上限的，但是它的设置依赖解析器本身，也许设置成长达一个星期也没有问题。
鉴于这种情况，我们可以通过设置TTLs的时间，达到我们的目的，情况基本上归结为：