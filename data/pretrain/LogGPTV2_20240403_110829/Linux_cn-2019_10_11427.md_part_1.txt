---
author: Seth Kenlon
category: 技术
comments_data: []
count:
  commentnum: 0
  favtimes: 1
  likes: 0
  sharetimes: 0
  viewnum: 5923
date: '2019-10-06 11:40:05'
editorchoice: false
excerpt: 也许你并不需要编译 Linux 内核，但你能通过这篇教程快速上手。
fromurl: https://opensource.com/article/19/8/linux-kernel-21st-century
id: 11427
islctt: true
largepic: /data/attachment/album/201910/06/113927vrs6rurljyuza8cy.jpg
permalink: /article-11427-1.html
pic: /data/attachment/album/201910/06/113927vrs6rurljyuza8cy.jpg.thumb.jpg
related:
- displayorder: 0
  raid: 11464
reviewer: wxy
selector: lujun9972
summary: 也许你并不需要编译 Linux 内核，但你能通过这篇教程快速上手。
tags:
- 内核
thumb: false
title: 在 21 世纪该怎样编译 Linux 内核
titlepic: true
translator: LuuMing
updated: '2019-10-06 11:40:05'
---
> 
> 也许你并不需要编译 Linux 内核，但你能通过这篇教程快速上手。
> 
> 
> 
![](/data/attachment/album/201910/06/113927vrs6rurljyuza8cy.jpg)
在计算机世界里， 内核   kernel 是处理硬件与一般系统之间通信的 低阶软件   low-level software 。除过一些烧录进计算机主板的初始固件，当你启动计算机时，内核让系统意识到它有一个硬盘驱动器、屏幕、键盘以及网卡。分配给每个部件相等时间（或多或少）使得图像、音频、文件系统和网络可以流畅甚至并行地运行。
然而，对于硬件的需求是源源不断的，随着发布的硬件越多，内核就必须纳入更多代码来保证那些硬件正常工作。得到具体的数字很困难，但是 Linux 内核无疑是硬件兼容性方面的顶级内核之一。Linux 操作着无数的计算机和移动电话、工业用途和爱好者使用的板级嵌入式系统（SoC）、RAID 卡、缝纫机等等。
回到 20 世纪（甚至是 21 世纪初期），对于 Linux 用户来说，在刚买到新的硬件后就需要下载最新的内核代码并编译安装才能使用这是不可理喻的。而现在你也很难见到 Linux 用户为了好玩而编译内核或通过高度专业化定制的硬件的方式赚钱。现在，通常已经不需要再编译 Linux 内核了。
这里列出了一些原因以及快速编译内核的教程。
### 更新当前的内核
无论你买了配备新显卡或 Wifi 芯片集的新品牌电脑还是给家里配备一个新的打印机，你的操作系统（称为 GNU+Linux 或 Linux，它也是该内核的名字）需要一个驱动程序来打开新部件（显卡、芯片集、打印机和其他任何东西）的信道。有时候当你插入某些新的设备时而你的电脑表示发现了它，这具有一定的欺骗性。别被骗到了，有时候那就够了，但更多的情况是你的操作系统仅仅是使用了通用的协议检测到安装了新的设备。
例如，你的计算机也许能够鉴别出新的网络打印机，但有时候那仅仅是因为打印机的网卡被设计成为了获得 DHCP 地址而在网络上标识自己。它并不意味着你的计算机知道如何发送文档给打印机进行打印。事实上，你可以认为计算机甚至不“知道”那台设备是一个打印机。它也许仅仅是显示网络有个设备在一个特定的地址上，并且该设备以一系列字符 “p-r-i-n-t-e-r” 标识自己而已。人类语言的便利性对于计算机毫无意义。计算机需要的是一个驱动程序。
内核开发者、硬件制造商、技术支持和爱好者都知道新的硬件会不断地发布。它们大多数都会贡献驱动程序，直接提交给内核开发团队以包含在 Linux 中。例如，英伟达显卡驱动程序通常都会写入 [Nouveau](https://nouveau.freedesktop.org/wiki/) 内核模块中，并且因为英伟达显卡很常用，它的代码都包含在任一个日常使用的发行版内核中（例如当下载 [Fedora](http://fedoraproject.org) 或 [Ubuntu](http://ubuntu.com) 得到的内核）。英伟达也有不常用的地方，例如嵌入式系统中 Nouveau 模块通常被移除。对其他设备来说也有类似的模块：打印机得益于 [Foomatic](https://wiki.linuxfoundation.org/openprinting/database/foomatic) 和 [CUPS](https://www.cups.org/)，无线网卡有 [b43、ath9k、wl](https://wireless.wiki.kernel.org/en/users/drivers) 模块等等。
发行版往往会在它们 Linux 内核的构建中包含尽可能多合理的驱动程序，因为他们想让你在接入新设备时不用安装驱动程序能够立即使用。对于大多数情况来说就是这样的，尤其是现在很多设备厂商都在资助自己售卖硬件的 Linux 驱动程序开发，并且直接将这些驱动程序提交给内核团队以用在通常的发行版上。
有时候，或许你正在运行六个月之前安装的内核，并配备了上周刚刚上市令人兴奋的新设备。在这种情况下，你的内核也许没有那款设备的驱动程序。好消息是经常会出现那款设备的驱动程序已经存在于最近版本的内核中，意味着你只要更新运行的内核就可以了。
通常，这些都是通过安装包管理软件完成的。例如在 RHEL、CentOS 和 Fedora 上：
```
$ sudo dnf update kernel
```
在 Debian 和 Ubuntu 上，首先获取你当前内核的版本：
```
$ uname -r
4.4.186
```
搜索新的版本：
```
$ sudo apt update
$ sudo apt search linux-image
```
安装找到的最新版本。在这个例子中，最新的版本是 5.2.4：
```
$ sudo apt install linux-image-5.2.4
```
内核更新后，你必须 [reboot](https://opensource.com/article/19/7/reboot-linux) （除非你使用 kpatch 或 kgraft）。这时，如果你需要的设备驱动程序包含在最新的内核中，你的硬件就会正常工作。
### 安装内核模块
有时候一个发行版没有预计到用户会使用某个设备（或者该设备的驱动程序至少不足以包含在 Linux 内核中）。Linux 对于驱动程序采用模块化方式，因此尽管驱动程序没有编译进内核，但发行版可以推送单独的驱动程序包让内核去加载。尽管有些复杂但是非常有用，尤其是当驱动程序没有包含进内核中而是在引导过程中加载，或是内核中的驱动程序相比模块化的驱动程序过期时。第一个问题可以用 “initrd” 解决（初始化 RAM 磁盘），这一点超出了本文的讨论范围，第二点通过 “kmod” 系统解决。
kmod 系统保证了当内核更新后，所有与之安装的模块化驱动程序也得到更新。如果你手动安装一个驱动程序，你就体验不到 kmod 提供的自动化，因此只要能用 kmod 安装包，就应该选择它。例如，尽管英伟达驱动程序以 Nouveau 模块构建在内核中，但官方的驱动程序仅由英伟达发布。你可以去网站上手动安装英伟达旗下的驱动程序，下载 “.run” 文件，并运行提供的 shell 脚本，但在安装了新的内核之后你必须重复相同的过程，因为没有任何东西告诉包管理软件你手动安装了一个内核驱动程序。英伟达驱动着你的显卡，手动更新英伟达驱动程序通常意味着你需要通过终端来执行更新，因为没有显卡驱动程序将无法显示。
![Nvidia configuration application](/data/attachment/album/201910/06/114010jez62e1zmxf1rpfj.jpg "Nvidia configuration application")
然而，如果你通过 kmod 包安装英伟达驱动程序，更新你的内核也会更新你的英伟达驱动程序。在 Fedora 和相关的发行版中：
```
$ sudo dnf install kmod-nvidia
```
在 Debian 和相关发行版上：
```
$ sudo apt update
$ sudo apt install nvidia-kernel-common nvidia-kernel-dkms nvidia-glx nvidia-xconfig nvidia-settings nvidia-vdpau-driver vdpau-va-driver
```
这仅仅是一个例子，但是如果你真的要安装英伟达驱动程序，你也必须屏蔽掉 Nouveau 驱动程序。参考你使用发行版的文档获取最佳的步骤吧。
### 下载并安装驱动程序