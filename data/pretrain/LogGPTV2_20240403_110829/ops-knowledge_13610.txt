User: I want to make a Python wrapper for another command-line program.
I want to read Python's stdin as quickly as possible, filter and translate it, and then write it promptly to the child program's stdin.
At the same time, I want to be reading as quickly as possible from the child program's stdout and, after a bit of massaging, writing it promptly to Python's stdout.
The Python subprocess module is full of warnings to use communicate() to avoid deadlocks.  However, communicate() doesn't give me access to the child program's stdout until the child has terminated.
Assistant: I think you'll be fine (carefully) ignoring the warnings using Popen.stdin, etc yourself.  Just be sure to process the streams line-by-line and iterate through them on a fair schedule so not to fill up any buffers.  A relatively simple (and inefficient) way of doing this in Python is using separate threads for the three streams.  That's how Popen.communicate does it internally.  Check out its source code to see how.