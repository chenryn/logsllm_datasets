git
===
是目前世界上最先进的分布式版本控制系统
## 补充说明
**git命令** 很多人都知道，Linus在1991年创建了开源的Linux，从此，Linux系统不断发展，已经成为最大的服务器系统软件了。
Linus虽然创建了Linux，但Linux的壮大是靠全世界热心的志愿者参与的，这么多人在世界各地为Linux编写代码，那Linux的代码是如何管理的呢？
事实是，在2002年以前，世界各地的志愿者把源代码文件通过diff的方式发给Linus，然后由Linus本人通过手工方式合并代码！
你也许会想，为什么Linus不把Linux代码放到版本控制系统里呢？不是有CVS、SVN这些免费的版本控制系统吗？因为Linus坚定地反对CVS和SVN，这些集中式的版本控制系统不但速度慢，而且必须联网才能使用。有一些商用的版本控制系统，虽然比CVS、SVN好用，但那是付费的，和Linux的开源精神不符。
不过，到了2002年，Linux系统已经发展了十年了，代码库之大让Linus很难继续通过手工方式管理了，社区的弟兄们也对这种方式表达了强烈不满，于是Linus选择了一个商业的版本控制系统BitKeeper，BitKeeper的东家BitMover公司出于人道主义精神，授权Linux社区免费使用这个版本控制系统。
安定团结的大好局面在2005年就被打破了，原因是Linux社区牛人聚集，不免沾染了一些梁山好汉的江湖习气。开发Samba的Andrew试图破解BitKeeper的协议（这么干的其实也不只他一个），被BitMover公司发现了（监控工作做得不错！），于是BitMover公司怒了，要收回Linux社区的免费使用权。
Linus可以向BitMover公司道个歉，保证以后严格管教弟兄们，嗯，这是不可能的。实际情况是这样的：
Linus花了两周时间自己用C写了一个分布式版本控制系统，这就是Git！一个月之内，Linux系统的源码已经由Git管理了！牛是怎么定义的呢？大家可以体会一下。
Git迅速成为最流行的分布式版本控制系统，尤其是2008年，GitHub网站上线了，它为开源项目免费提供Git存储，无数开源项目开始迁移至GitHub，包括jQuery，PHP，Ruby等等。
历史就是这么偶然，如果不是当年BitMover公司威胁Linux社区，可能现在我们就没有免费而超级好用的Git了。
[Git常用命令清单](https://github.com/jaywcjlove/handbook/blob/master/other/Git%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4%E6%B8%85%E5%8D%95.md)
### 语法
```shell
git [--version] [--help] [-C ] [-c name=value] [--exec-path[=]] [--html-path] [--man-path] [--info-path] [-p | --paginate | --no-pager] [--no-replace-objects] [--bare] [--git-dir=] [--work-tree=] [--namespace=]  []
```
### 选项
```shell
add              将文件内容添加到索引
bisect           通过二进制查找引入错误的更改
branch           列出，创建或删除分支
checkout         检查分支或路径到工作树
clone            将存储库克隆到新目录中
commit           将更改记录到存储库
diff             显示提交，提交和工作树等之间的更改
fetch            从另一个存储库下载对象和引用
grep             打印匹配图案的行
init             创建一个空的Git仓库或重新初始化一个现有的
log              显示提交日志
merge            加入两个或更多的开发历史
mv               移动或重命名文件，目录或符号链接
pull             从另一个存储库或本地分支获取并合并
push             更新远程引用以及相关对象
rebase           转发端口本地提交到更新的上游头
reset            将当前HEAD复位到指定状态
rm               从工作树和索引中删除文件
show             显示各种类型的对象
status           显示工作树状态
tag              创建，列出，删除或验证使用GPG签名的标签对象
```
### 例子
init
`git init` #初始化  
status
`git status` #获取状态  
add
`git add file` # .或*代表全部添加  
`git rm --cached ` # 在commit之前撤销git add操作  
`git reset head` # 好像比上面`git rm --cached`更方便  
commit
`git commit -m "message"` #此处注意乱码  
remote
`git remote add origin PI:EMAIL:JSLite/test.git` #添加源  
push
```shell
git push -u origin master # push 同时设置默认跟踪分支  
git push origin master  
git push -f origin master # 强制推送文件，缩写 -f（全写--force）
```
clone
`git clone git://github.com/JSLite/JSLite.js.git`  
`git clone git://github.com/JSLite/JSLite.js.git mypro` #克隆到自定义文件夹  
`git clone [user@]example.com:path/to/repo.git/` #SSH协议还有另一种写法。  
git clone支持多种协议，除了HTTP(s)以外，还支持SSH、Git、本地文件协议等，下面是一些例子。`git clone  `  
```shell
git clone http[s]://example.com/path/to/repo.git/
git clone ssh://example.com/path/to/repo.git/
git clone git://example.com/path/to/repo.git/
git clone /opt/git/project.git 
git clone file:///opt/git/project.git
git clone ftp[s]://example.com/path/to/repo.git/
git clone rsync://example.com/path/to/repo.git/
```
## 配置
首先是配置帐号信息 `ssh -T PI:EMAIL` 测试。
## 修改项目中的个人信息
```shell
git help config # 获取帮助信息，查看修改个人信息的参数  
git config --global user.name "小弟调调"           # 修改全局名字
git config --global user.email "PI:EMAIL"  # 修改全局邮箱
git config --list         # 查看配置的信息  
```
### 配置自动换行
自动转换坑太大，提交到git是自动将换行符转换为lf
```shell
git config --global core.autocrlf input
```
## 常见使用场景
### 创建SSH密钥
这个密钥用来跟 github 通信，在本地终端里生成然后上传到 github
```shell
ssh-keygen -t rsa -C 'PI:EMAIL' # 生成密钥  
ssh-keygen -t rsa -C "PI:EMAIL" -f ~/.ssh/ww_rsa # 指定生成目录文件名字
ssh -T PI:EMAIL # 测试是否成功  
```
### 多账号ssh配置
**1.生成指定名字的密钥**
`ssh-keygen -t rsa -C "邮箱地址" -f ~/.ssh/jslite_rsa`  
会生成 `jslite_rsa` 和 `jslite_rsa.pub` 这两个文件  
**2.密钥复制到托管平台上**
`vim ~/.ssh/jslite_rsa.pub`
打开公钥文件 `jslite_rsa.pub` ，并把内容复制至代码托管平台上
**3.修改config文件**
`vim ~/.ssh/config` #修改config文件，如果没有创建 `config`  
```shell
Host jslite.github.com
  HostName github.com
  User git
  IdentityFile ~/.ssh/jslite_rsa
Host work.github.com
  HostName github.com
  # Port 服务器open-ssh端口（默认：22,默认时一般不写此行）
  # PreferredAuthentications 配置登录时用什么权限认证 
  #                          publickey|password publickey|keyboard-interactive等
  User git
  IdentityFile ~/.ssh/work_rsa
```
- `Host` 这里是个别名可以随便命名
- `HostName` 一般是网站如：`PI:EMAIL:username/repo.git` 填写 `github.com`
- `User` 通常填写`git`
- `IdentityFile` 使用的公钥文件地址
**4.测试**
```shell
ssh -T PI:EMAIL  # `@`后面跟上定义的Host  
ssh -T work.github.com        # 通过别名测试
ssh -i ~/公钥文件地址 Host别名  # 如 ssh -i ~/.ssh/work_rsa work.github.com
```
**5.使用**
```shell
# 原来的写法
git clone PI:EMAIL:/learngit.git
# 现在的写法
git clone PI:EMAIL:/learngit.git
git clone PI:EMAIL:/learngit.git
```
**5.注意**
如果你修改了id_rsa的名字，你需要将ssh key添加到SSH agent中，如：
```shell
ssh-add ~/.ssh/jslite_rsa
ssh-add -l  # 查看所有的key
ssh-add -D  # 删除所有的key
ssh-add -d  ~/.ssh/jslite_rsa # 删除指定的key
```
### 免密码登录远程服务器
```shell
ssh-keygen -t rsa -P '' -f ~/.ssh/aliyunserver.key
ssh-copy-id -i ~/.ssh/aliyunserver.key.pub PI:EMAIL # 这里需要输入密码一次
```
编辑 `~/.ssh/config`
```shell
Host aliyun1
  HostName 192.168.182.112
  User root
  PreferredAuthentications publickey
  IdentityFile ~/.ssh/aliyunserver.key
```
上面配置完了，可以通过命令登录，不需要输入IP地址和密码 `ssh aliyun1`
### https协议下提交代码免密码
```shell
git clone https://github.com/username/rep.git
```
通过上面方式克隆可能需要密码，解决办法：进入当前克隆的项目 `vi rep/.git/config` 编辑 `config`, 按照下面方式修改，你就可以提交代码不用输入密码了。
```shell
[core]
 repositoryformatversion = 0
 filemode = true
 bare = false
 logallrefupdates = true
 ignorecase = true
 precomposeunicode = true
[remote "origin"]
- url = https://github.com/username/rep.git
+ url = https://用户名:密码@github.com/username/rep.git
 fetch = +refs/heads/*:refs/remotes/origin/*
[branch "master"]
 remote = origin
 merge = refs/heads/master
```
### 文件推向3个git库
**1. 增加3个远程库地址**
```shell
git remote add origin https://github.com/JSLite/JSLite.git  
git remote set-url --add origin https://gitlab.com/wang/JSLite.js.git  
git remote set-url --add origin https://oschina.net/wang/JSLite.js.git  
```
**2. 删除其中一个 set-url 地址**
```shell
usage: git remote set-url [--push]   []
   or: git remote set-url --add  
   or: git remote set-url --delete  
```
`git remote set-url --delete origin https://oschina.net/wang/JSLite.js.git`
**3.推送代码**
```shell
git push origin master
git push -f origin master  # 强制推送  
```
**4.拉代码**
只能拉取 `origin` 里的一个url地址，这个fetch-url  
默认为你添加的到 `origin`的第一个地址  
```shell
git pull origin master   
git pull --all # 获取远程所有内容包括tag  
git pull origin next:master # 取回origin主机的next分支，与本地的master分支合并  
git pull origin next # 远程分支是与当前分支合并  
# 上面一条命令等同于下面两条命令   
git fetch origin  
git merge origin/next  
```
如果远程主机删除了某个分支，默认情况下，git pull 不会在拉取远程分支的时候，删除对应的本地分支。这是为了防止，由于其他人操作了远程主机，导致git pull不知不觉删除了本地分支。  
但是，你可以改变这个行为，加上参数 -p 就会在本地删除远程已经删除的分支。  
```shell
$ git pull -p
# 等同于下面的命令
$ git fetch --prune origin 
$ git fetch -p
```
**5.更改pull**
只需要更改config文件里，那三个url的顺序即可，fetch-url会直接对应排行第一的那个utl连接。
### 修改远程仓库地址
```shell
git remote remove origin  # 删除该远程路径  
git remote add origin PI:EMAIL:JSLite/JSLite.git  # 添加远程路径 
```
### 撤销远程记录
```shell
git reset --hard HEAD~1 # 撤销一条记录   
git push -f origin HEAD:master # 同步到远程仓库  
```
### 放弃本地的文件修改
```shell
git reset --hard FETCH_HEAD # FETCH_HEAD表示上一次成功git pull之后形成的commit点。然后git pull
```
`git reset --hard FETCH_HEAD` 出现错误
```shell
git pull
You are not currently on a branch, so I cannot use any
'branch..merge' in your configuration file.
Please specify which remote branch you want to use on the command
line and try again (e.g. 'git pull  ').
See git-pull(1) FOR details.
```
解决方法：
```shell
git checkout -b temp # 新建+切换到temp分支 
git checkout master
```
### 最简单放弃本地修改内容
```shell
# 如果有的修改以及加入暂存区的话
git reset --hard 
# 还原所有修改，不会删除新增的文件
git checkout . 
# 下面命令会删除新增的文件
git clean -xdf
```
通过存储暂存区stash，在删除暂存区的方法放弃本地修改。
```shell
git stash && git stash drop 
```
### 回滚到某个commit提交
```shell
git revert HEAD~1 # 撤销一条记录 会弹出 commit 编辑
git push # 提交回滚
```
### 回退到某一个版本
```shell
git reset --hard 