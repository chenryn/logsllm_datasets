order to collect execution traces.
Invariant detection is then
performed on the trace collection in order to produce a set of
likely invariants.
(b) Enforcement phase. Given a JavaScript program and the
invariants previously learned, instrumentation is again used to
enforce those invariants.
Figure 2: ZigZag overview. Instrumentation is used in both the learning and enforcement phases to produce and enforce
likely invariants, respectively. Note that instrumentation is only performed once in each case; subsequent loads use a
cached instrumented version of the program.
Data Type
All
Numbers
String
Boolean
Objects
Functions
Invariants
Types
Equality, inequality, oneOf
Length, equality, oneOf, isJSON,
isPrintable, isEmail, isURL, isNumber
Equality
All of the above for object properties
Calling function, return value
Table 1: Invariants supported by ZigZag.
4.1 Invariant Detection
Dynamic program invariants are statistically-likely asser-
tions established by observing multiple program execu-
tions. We capture program state at checkpoints and com-
pare subsets of these states for each individual checkpoint
(we define checkpoints in further detail in Section 4.2).
The underlying assumption is that invariants should hold
not only for the observed executions, but also for future
ones.
However, there is no guarantee that invariants will also
hold in the future. Therefore, ZigZag only uses invariants
which should hold with a high probability. These invari-
ants are later used to decide whether a program execu-
tion is to be considered anomalous. By capturing state
dynamically, ZigZag has insight into user behavior that
purely static systems lack.
ZigZag uses program execution traces to generate
Daikon [13] dtrace files. These dtrace files are then gen-
eralized into likely invariants with a modified version of
Daikon we have developed. Daikon is capable of gen-
erating both univariate and multivariate invariants. Uni-
variate invariants describe properties of a single variable;
examples of this include the length of a string, the per-
centage of printable characters in a string, and the parity
of a number. Multivariate models, on the other hand, de-
scribe relations between two or more variables, for ex-
ample x == y, x +5 == y, or x  5);
__assert(typeof(v1) === ’string’ && v1 === ”x”);
...
} else if ( functionid === 1 ) {
...
}
...
return __incCallCounter();
5 Invariant Enforcement
Figure 4: Example of invariant enforcement over a func-
tion’s input state.
}
};
};
1
2
3
4
5
6
7
8
9
10
11
Given a set of invariants collected during the learning
phase, ZigZag then instruments JavaScript programs to
enforce these invariants. Since templated JavaScript is a
prevalent technique on the modern web for lightweight
parameterization of client-side code, we then present a
technique for adapting invariants to handle this case. Fi-
nally, we discuss possible deployment scenarios and lim-
itations of the system.
Daikon supports invariant output for several
lan-
guages, including C++, Java, and Perl. However, it
does not support JavaScript by default. Groeneveld et
al. implemented extensions to Daikon to support invari-
ant analysis using Daikon [15]. However, we found
that their implementation was not capable of generating
JavaScript for all of the invariants ZigZag must support,
and therefore we wrote our own implementation.
In our implementation, the calltrace and exittrace
functions perform a call to an enforcement function gen-
erated for each function labeled important during the
static analysis step. calltrace examines the function in-
put state, while exittrace examines the return value of
the original function. These functions are generated auto-
matically by ZigZag for each important function. Based
on the invoking program point, assertions corresponding
to learned invariants are executed. Should an assertion
be violated, a course of action is taken depending on the
system configuration. Options include terminating exe-
cution by navigating away from the current site, or alter-
natively reporting to the user that a violation occurred and
continuing execution. Figure 4 shows a possible instance
of the calltrace function, abbreviated for clarity.
5.1 Program Generalization
Modern web applications often make use of lightweight
templates on the server, and sometimes within the
browser as well. These templates usually take the form
of a program snippet or function that largely retains the
same structure with respect to the AST, but during instan-
tiation placeholders in the template are substituted with
// Server-side JavaScript template
var state = {
user: {{username}},
session: {{sessionid}}
// Client-side JavaScript code after template instantiation
var state = {
user: ”UserX”,
session: 0
Figure 5: Example of a JavaScript template.
concrete data – for instance, a timestamp or user iden-
tifier. This is often done for performance, or to reduce
code duplication on the server. As an example, consider
the templated version of the webmail example shown in
Figure 5.
Due to the cost of instrumentation and the prevalence
of this technique, this mix of code and data poses a fun-
damental problem for ZigZag since a templated program
causes – in the worst case – instrumentation on every
resource load. Additionally, each template instantiation
would represent a singleton training set, leading to arti-
ficial undertraining. Therefore, it was necessary to de-
velop a technique for both recognizing when templated
JavaScript is present and, in that case, to generalize in-
variants from a previously instrumented template instan-
tiation to keep ZigZag tractable for real applications.
ZigZag handles this issue by using efficient structural
comparisons to identify cases where templated code is in
use, and then performing invariant patching to account
for the differences between template instantiations in a
cached instrumented version of the program.
Structural comparison. ZigZag defines two pro-
grams as structurally similar and, therefore, candidates
for generalization if they differ only in values assigned to
either primitive variables such as strings or integers, or as
members of an array or object. Objects play a special role
as in template instantiation properties can be omitted or
ordered non-deterministically. As a result ASTs are not
equal in all cases, only similar. Determining whether this
742  24th USENIX Security Symposium 
USENIX Association
Script A
Invariant Patching
Invariants,
merge description
JavaScript
template
instantiations
Structurally-similar
ASTs
Script A invariants patched
for Script A’ using
merge description
Script A’
Patched invariants