g where 1og_time create table test_db_arch.test_track_log like test.test_track_log;
其次是这个操作不够简洁。怎么改进呢，我们可以把 rename 的操作玩得更漂亮，如下：
甚至可以通过跨版本复制来实现升级，比如主库为MySQL5.5版本，从库为5.7版
整个过程持续0.02秒，亿级数据的切换，整体来说效果还是很明显的，也推荐大家在工
MySQL复制的四种类型
MySQL
复制管理
test
test
M
crack
主
图5-7
track
log
从
从
cest
---
## Page 209
键字找到插件。
版本在5.5 以上,并且设置变量have_dynamic_loading 为YES，即判断是否支持动态插件
5.2.2
可以使用类似 CHANGEMASTER TO MASTER_DELAY=600这样的形式。
这种方案的补充。
MySQL5.5版本推出，是对异步和全复制的一种补充，确切的说，应该是对MySQLCluster
保证组内高可用，确保数据最终一致性。有点类似Oracle 里面的 RAC。
强了MySQL 原有的高可用方案（原有的Replication 方案），提供了重要的特性：多写，
定格在 2016 年12月12日，MySQL 5.7.17 GA 的重大特性 group replication 插件推出，增
复制的，实际上MySQLCluster其实发展并不大顺利，更多时候是一个实验室产品，时间
的，相对来说性能要好一些，但是会有丢失数据的情况。
> show variables like 'rpl_semi_sync_master%';
#find
（4）延迟复制是在异步复制的基础上，人为设定主库和从库的数据同步延迟时间，
（3）在异步和全复制之间的一种方案，就是半同步复制（semi-syncreplication）。自
（2）全同步复制，追求强一致性，比如说 MySQLCluster 这样的方式，是属于全同步
当然默认半同步的开关还没有打开。
2 rows in set (o.00 sec)
安装后查看 mysql.plugin，看看插件记录是否存在，
Query OK,
> install plugin rpl_semi_sync_slave soname 'semisync_slave.so';
要安装插件就是两个简单的命令。
./lib64/mysql/plugin/debug/semisync_master.so
select
在 base 目录下，可以很容易找到所需的插件。
1．半同步插件部署
要开启半同步复制，我们需要安装插件，基本的要求是在满足异步复制的情况下，
（1）异步复制，是比较经典的主从复制，搭建主从默认的架构方式，就是属于异步
name
MySQL 半同步复制
* from mysql.plugin;
|dl
_semi_sync_master soname 'semisync_master.so';
semisync_master.so
(0.00 sec)
slave.so
。当前的base 目录为/usr，可以根据关
第5章MySQL运维管理实践丨187
---
## Page 210
188丨MySQL DBA工作笔记：数据库管理、架构优化与运维开发
完成”，这个确认收货的动作就好比半同步里面的IO_thread，通常是异步，会有延时，而
们购物后收到快递，很少会有人去客户端点击“确认收货”，在一段时间后才会显示为“已
回给会话事务成功之前提交事务的方式，如下：
比较直观。打开即可。
两个版本中的两个参数该怎么理解，我们可以通过一个快递的例子来理解，早期我
而在MySQL5.6版本中是什么设置呢，是参数AFTER_COMMIT。
| Variable_name
MySQL5.7版本中新增了一个参数（AFTER_SYNC）来控制半同步模式下主库在返
2.半同步复制在 MySQL 5.6 和5.7的变化
Rpl_semi_sync_slave_status
Slave 端检查，如下：
Master 端检查，如下：
Query OK,0 rows affected (0.01 sec)
>START
Query
>STOP SLAVEIO_THREAD;
当然在 slave 端也需要做同样的操作，然后在 slave 端重启 IO_Thread 即可。
如果在 master 端简单验证，也可以使用 show status。
Rpl_semi_sync_master_status ION
 Variable_name
setglobal
rows in set (0.00 sec)
Variable_name
rpl
rpl
OK,
semi_sync_master_wait_no_slave
semi
sem
SLAVE IO_THREAD;
rpl_semi_sync_slave_enabled=l;
rows
affected (0.01 sec)
一
Value
level
|Value
-十
AFTER_SYNC
Value|
10000
OFF
一
---
## Page 211
提交，所以主从都没有数据，这样就能够满足数据完整性和一致性了。
功，并且如果发生 Master 宕机的场景，不会导致主从不一致，因为此时 Master 端还没有
有了一些差别，如图5-9所示。
Slave反馈收到 Relay Log，只有收到ACK后 Master 才将 commit OK 结果反馈给客户端
面的半同步流程图，这是AFTER_COMMIT 模式，如下图5-8所示。
一种模式就类似于 AFTER_COMMIT，而改进的状态则为 AFTER_SYNC，我们看一看下
现在改进比较明显，我们收货后会马上收到一条提醒信息，显示快递状态“已完成”。第
而 MySQL 5.7版本中的半同步复制，有个叫法是Loss-Less 半同步复制。实现的方式
这种模式（AFTER_SYNC），事务是在提交之前发送给 Slave，当 Slave 没有接收成
Master 的数据写入了 Binlog，Slave 刷新到磁盘（relay log)，同时 Master 需要等待
Binlog_dump
Commit
Engine
thread
binlog
Master
图5-8
SEND
10_thread
Slave
SQLthread
Relay log
第5章MySQL运维管理实践|189
---
## Page 212
190丨MySQL DBA工作笔记：数据库管理、架构优化与运维开发
是10秒，如下。
我们看看半同步复制的开关。
这里为什么是10秒，和一个半同步复制的参数有关。单位是毫秒，所以换算下来就
Query OK,
这个时候在 Master 端插入数据就会很慢。这个过程持续了大概10 秒。
stop slave;
我们模拟网络延迟的情况，直接把 Slave停掉。
>insert into testsync.test values(100);
> create table testsync.test(id int);
然后创建一个表，插入一行数据。很明显执行速度很快。
create database testsync;
rpl_semi_
我们来简单看看半同步复制的一些小测试。
案例5-7：简单测试半同步复制
_sync_master_timeout I 10000 
row
affected (10.00 sec)
Bing dump
binlog
Master
一
Value|
sec)
图5-9
SEND
--
I0_threa
Slave
SQL
Relay
thre
品
---
## Page 213
GTID 是一种很好的分布式 ID 实践方式；通常来说，分布式 ID 有两个基本要求：
AUTO_POSITION=‘X’的方式。
MASTER_AUTO_POSITION=1即可方便的搭建从库，在故障修复中也可以采用MASTER
手工去可以找偏移量的值了，而是通过CHANGEMASTERTOMASTER_HOST=xxx
可以定位和追踪每一个事务，对 DBA 来说意义就很大了，我们可以适当的解放出来，不用
性、故障恢复以及容错能力。
每个在主库上提交的事务在集群中有一个唯一的 ID，这种方式强化了数据库的主备一致
5.2.3
ONat
binlog_dump
master
·全局唯一性
可能大多数读者第一次听到GTID 的时候会感觉有些突兀，但是从架构设计的角度，
2017-02-04T23:41:05.824146+08:00
2017-02-04T23:37:44.551667+08:00 2145633
从 MySQL5.6.5 版本开始新增了一种基于GTID 的复制方式。通过GTID保证了
查看数据库日志，其实也能看到很明确的信息。
> show status like 'Rpl_semi_sync_master_status';
此时的开关是打开的。
我们恢复状态，把 Slave 启动。然后在Master 端继续插入一条记录，速度就很快了。
Slave 端也是 OFF 的状态。
 Rpl_semi_sync_master_status
Variable_name
Rpl
thread
GTID 的管理模式
-二----
semi
to
id（2145900)
_sync_master_status
--
-----
(server
1d:
|Value|
Value
13058)
ION
2145900
OFF
2145900
[Note]
[Note]
[Warning]
[Note]
Start
position
Timeout waiting for
第5章MySQL运维管理实践
Start
switched OFF.
1056976573)
1056976573
semi-sync
191
---
## Page 214
192丨MySQLDBA工作笔记：数据库管理、架构优化与运维开发
table 的部分，如果一个表的列有100个，那么拼出这么一个语句来就是一个复杂工程了。
5.7版本在 mysql库下引入了新的表gtid_executed。
my.cnf中配置如下的几个参数：
但是如果想一次搞定，MySQL会抛出如下的错误。
说这两个场景。
限的。比如下面的两个。