draft−10,A ≤ AdvGC.4
tkhs and (cid:5)
mES.
AdvGC.3
Game C.5. In this game, we replace tkhs and mES derived
in both the tested and its partnered session by a uniformly
random value (cid:5)
Analogously to Game C.3, we can bound the difference
in A’s advantage introduced in this game by the security of
the HKDF.Expand function. The reduction B8, uses its PRF
oracle for the evaluations of HKDF.Expand with the random
key (cid:5)
xES in the tested and its partnered session. Depending on
the oracles behavior it again perfectly simulates either Game
C.4 or Game C.5. We can hence infer that
draft−10,A ≤ AdvGC.5
draft−10,A + AdvPRF−sec
HKDF.Expand.
Game C.6. In this game, we replace MS derived in both the
tested and its partnered session by a uniformly random value
(cid:6)
MS.
Analogously to Game C.5, we can bound the difference
in A’s advantage introduced in this game by the security of
the HKDF.Extract function. The reduction B9, uses its PRF
oracle for the evaluations of HKDF.Extract with the random
key (cid:5)
mES and (cid:5)
mSS in the tested and its partnered session. and
hence we have
AdvGC.5
draft−10,A + AdvPRF−sec
draft−10,A ≤ AdvGC.6
HKDF.Extract.
AdvGC.4
G
.
AdvGC.6
Game C.7. At last, we replace tkapp, RMS, and EMS derived
in both the tested and its partnered session by a uniformly
random value (cid:3)tkapp, (cid:3)RMS, and (cid:3)EMS.
Analogously to Game C.5, we can bound the difference
in A’s advantage introduced in this game by the security of
the HKDF.Expand function. The reduction B10, uses its PRF
oracle for the evaluations of HKDF.Expand with the random
key (cid:6)
MS in the tested and its partnered session, and hence we
have
draft−10,A ≤ AdvGC.7
draft−10,A + AdvPRF−sec
HKDF.Expand.
draft−10,A = 0.
In Game C.7, the session keys as well as the resumption
and exporter master secrets are now chosen independently and
uniformly at random. As the response to its Test query is
hence independent of the test bit btest, the adversary A cannot
distinguish whether it is given the real key or random values
and thus AdvGC.8
Remark 4: Note that the case that the adversary tests the
server session without honest contributive partner in stage 2
however with honest contributive partner in stage 1 has been
skipped, since we can assume two parties both have honest
contributive partners in the ﬁrst stage after case A, which
means that the contribution of the client to SS and ES is
honest even though auth2 = unauth, and thus on the server
side the client has completed his contribution namely gx to
the keys of each stage. In this case the secrecy of the session
keys can be guaranteed and proved just like in case C.
Part 2: s is compromised after handshake
In this part we consider the case where s is compromised
by the query Corrupt(U, V, k) only after the honest client has
received the honest gy and the handshake has been completed,
excluding the trivial case of the client impersonation.
As for the proof in Part 1, our security analysis is the same
three (disjoint) cases that
1) the adversary tests a server session without honest con-
3) the tested session has an honest contributive partner part-
ner in the second stage.
The proof cases A and B are virtually identical to the re-
spective cases in the proof of part 1, though s is compromised
in this case.
Specially, the session key Eadk would be known the ad-
versary since it is not forward secure, and Test query to the
honest client for stage 1 should be prohibited to avoid trivial
attack which has been ruled in the deﬁnition of Corrupt query.
Then in case C, we will rely on the security of ES = gxy
for the privacy of tkhs, tkapp, RMS and EMS.
Case C: Test with Partner in stage 2
Firstly, we need to set the stkey of xSS, Eadk, mSS, FS
to revealed.
Game C.0. Same as Game C.0 in Part 1, therefore,
draft−10,A = Adv2−Key−Secrecy,test with partner
draft−10,A
AdvGC.0
.
tributive partner in the ﬁrst stage,
2) the adversary tests a client session without honest contribu-
tive partner in the second stage,
504504
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:15:40 UTC from IEEE Xplore.  Restrictions apply. 
.
G
AdvGC.0
draft−10,A.
Game C.1. Same as Game C.1 in Part 1, and hence
From now on, we can speak of the session label(cid:2)(cid:2) partnered
draft−10,A ≤ ns.AdvGC.1
with the tested session label(cid:2) in stage 2.
Game C.2. Same as Game C.4 in Part 1,
the chal-
lenger aborts if the adversary makes a random oracle query
HKDF.Extract(0,gxy), and hence
draft−10,A ≤ AdvGC.2
draft−10,A + AdvGap−DH
AdvGC.1
AdvGC.2
HKDF.Expand.
tkhs and (cid:5)
mES, and hence
draft−10,A + AdvPRF−sec
Game C.3. Same as Game C.5 in Part 1, we replace tkhs,
mES derived in both the tested and its partnered session by a
uniformly random value (cid:5)
draft−10,A ≤ AdvGC.3
Game C.4. Same as Game C.6 in Part 1, we replace MS
derived in both the tested and its partnered session by a
uniformly random value (cid:6)
MS. The only difference that now
during the computation of MS = HKDF.Extract(mSS,mES)
only mES has been replaced by a random (cid:5)
mES, however,
without affecting the PRF property of HKDF.Extract. Hence
draft−10,A + AdvPRF−sec
draft−10,A ≤ AdvGC.4
Game C.5. Same as Game C.7 in Part 1, we replace tkapp,
RMS, and EMS derived in both the tested and its partnered
session by a uniformly random value (cid:3)tkapp, (cid:3)RMS, and (cid:3)EMS.
Hence,
HKDF.Extract.
AdvGC.3
draft−10,A ≤ AdvGC.5
draft−10,A + AdvPRF−sec
HKDF.Expand.
In Game C.5., the session keys as well as the resumption
and exporter master secrets are now chosen independently and
uniformly at random. As the response to its Test query is
hence independent of the test bit btest, the adversary A cannot
distinguish whether it is given the real key or random values
and thus AdvGC.5
draft−10,A = 0.
Above all, in the case of s is compromised after 0-RTT
has been completed, 0-RTT is secure against Key Secrecy,
however, the application data on the ﬁrst ﬂight will be public
to the adversary if there is application data to be transferred
during the ﬁrst ﬂight.
AdvGC.4
Note that
the privacy property of the early application
data transmitted on the ﬁrst ﬂight can be guaranteed by the
randomness of Eadk, and this property has been implied
implicitly in the deﬁnition of Key Secrecy which guarantees
the randomness of the key in each stage including Eadk.
Combining the various bounds implied by the above
sequence of game transitions yields the stated security
bound.
B. Preliminaries and Deﬁnitions
B.1 The Decisional Difﬁe-Hellman Assumption (DDH)
Let G be a group of prime order q and g be a generator
the experiment ExpDDH(A) associated
of G. Consider
with an adversary A and security parameter λ. A is given
for a, b, c ∈ Zq. The decisional Difﬁe-
(g, q, gc, ga, gb)
Hellman(DDH) assumption means that it is hard to decide
whether c = ab mod q. Formally, ExpDDH(A) returns 1
iff A can successfully decide whether c = ab mod q. We
= Pr [ExpDDH(A) = 1]. We say that the DDH
deﬁne AdvDDH
problem is hard if AdvDDH
is negligible in λ, for all efﬁcient
G
G
adversaries A.
B.2 The Gap Difﬁe-Hellman Assumption(Gap-DH)
Let G be a group of prime order q and g be a generator
of G. Consider the experiment ExpGap−DH(A) associated
with an adversary A and security parameter λ. A is given
(g, q, ga, gb) for a, b are picked uniformly at random from
Zq. A is also given access to a DDH veriﬁcation oracle
V(g, ga, ., .), which returns 1 iff queried on gx, gax for some
x ∈ Zq. ExpGap−DH(A) returns 1 iff A outputs gab. We
= Pr [ExpGap−DH(A) = 1]. We say that
deﬁne AdvGap−DH
Gap-DH problem is hard if AdvGap−DH
is negligible in λ, for
all efﬁcient adversaries A.
G
G
B.3 Digital Signature Schemes
To deﬁne security consider the experiment ExpEUF−CMA
A digital signature scheme is a triple Sig = (Kg,Sign,Ver),
$←− Kg(λ)
consisting of a key generation algorithm (pk, sk)
$←−
where λ is the security parameter, signing algorithm σ
Sign(sk, m) generating a signature for message m, and ver-
iﬁcation algorithm Ver(pk, σ, m) returning 1, if σ is a valid
signature for m under the key pk, and 0 otherwise.
(A)
associated with an adversary A. First, a pair of keys is
$←− Kg(λ). Then A is given pk, the oracle
generated: (pk, sk)
Sign(sk, .), and it has to output a message and a forgery:
$←− ASign(sk,.)(pk). The adversary wins and the
(m, σ)
experiment returns 1 iff Ver(pk, σ, m) returns 1 and m was
never queried to Sign(sk, .) oracle. We say that Sig is secure
against existential forgeries under adaptive chosen-message
(A)
attacks (EUF-CMA) if AdvEUF−CMA
= 1] is negligible in λ, for all efﬁcient algorithm A.
= Pr [ExpEUF−CMA
Sig
Sig
Sig
B.4 Pseudo-Random Functions (PRF)
PRF
Consider the experiment ExpPRF−sec
A pseudo-random function PRF is a deterministic function
z = PRF(k, x), taking as input a key k and some bit string x,
and returning a string z.
(A) associated with
an adversary A. First, the challenger samples k uniformly
random. Then A is given the oracle PRF(k, .) for arbitrary
values x and obtain the corresponding z. Eventually, A
outputs value x that was never queried to PRF(k, .). The
challenger sets z0 = PRF(k, x) and samples z1 uniformly
$←− {0, 1} and returns zb to
random. Then it tosses a coin b
the adversary. Finally, A outputs a guess b
(cid:2). The adversary
(cid:2). We say that
wins and the experiment returns 1 iff b = b
PRF is a secure pseudo-random function if AdvPRF−sec
= Pr
(A) = 1] is negligible for all efﬁcient algorithm A.
[ExpPRF−sec
PRF
PRF
Consider the experiment ExpCOLL
B.5 Collision-resistant Hash Functions
adversary A. ExpCOLL
m and m
that a hash function H is collision resistant, if AdvCOLL
[ExpCOLL
(A) associated with an
(A) returns 1 iff A outputs two strings
(cid:2), such that m (cid:9)= m
). We say
= Pr
(A) = 1] is negligible for all efﬁcient algorithm A.
(cid:2) and H(m) = H(m
H
H
H
(cid:2)
H
505505
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:15:40 UTC from IEEE Xplore.  Restrictions apply.