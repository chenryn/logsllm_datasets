正常来讲，动调到执行`ZwLoadDriver`函数时单步跟进，应该就能找到真正的加密函数，或者根据字符串列表、函数列表等的耐心查看引用，也可以找到真正的加密函数。很多师傅也是这样做的。
但我单步跟踪后并没有跟进加密函数，根据提示字符串应该是系统版本跟出题人不完全一致导致的问题。
这里研究一下hook的流程。从start开始，可以看到有个`crt`的main函数。
根据这篇[C语言中的main函数为什么被称作程序入口](https://article.itxueyuan.com/JKXWx)，可以知道函数`__scrt_common_main`是用来进行基本的运行时环境初始化，而后继续跟进，这个`__scrt_common_main_seh`函数中继续做初始化工作。
继续跟进。首先注意到下面的`invoke_main`函数，这个函数就是初始化完毕后要执行的主逻辑，也就是前面我们分析的main函数。
而上面的`initterm_e`函数，查阅文档[_initterm, _initterm_e](https://docs.microsoft.com/en-us/cpp/c-runtime-library/reference/initterm-initterm-e?view=msvc-160)可知，该函数遍历函数指针表并对其进行初始化，
第一个指针是表格中的开始位置，第二个指针是结束位置。换句话说就是依次执行从开始指针到结束指针之间的函数（如果存在）。要在main函数前搞事情，一般就是在这里了。
（根据这篇[C++
main函数运行分析](https://blog.csdn.net/yao_hou/article/details/100671430)，在VS里进行复现，可以发现这些运行时环境初始化的代码与ida中反编译出来的代码一致，根据这篇[C/C++启动函数](https://blog.csdn.net/xudacheng06/article/details/7300460)，可以知道这是运行c程序所必须要做的启动函数。）
分别在两个开始位置，设置`dword`类型的数组，来看到底调用了哪些函数。
第一处看起来就是正常的初始化。
第二处我们可以看出调用了一个可疑的`sub_D817F0`函数，跟进去最终能找可疑函数`sub_D83600`。
写代码解一下字符串加密。
    d = [0xB4,0x8C,0x94,0xD5,0xD7,0xB7,0x91,0x82,0x8D,0x90,0x8A,0x97,0x8A,0x8C,0x8D]
    s = 'siyqq3yqq'
    for i in range(len(d)):
        print(chr(d[i]^0xe3),end='')
    print('')
    for i in range(len(s)):
        print(chr(ord(s[i])^0x1D),end='')
    # Wow64Transition
    # ntdll.dll
可以分析出这里的逻辑，首先获取`ntdll`动态链接库的句柄，然后获取其导出函数`Wow64Transition`的地址。查阅文档[VirtualProtect
function](https://docs.microsoft.com/en-us/windows/win32/api/memoryapi/nf-memoryapi-virtualprotect)可知，后面的`VirtualProtect`函数将`Wow64Transition`函数的前4个字节空间的权限改为允许任意操作，之后将其原先的前4字节数据保存，再更改其前4字节为函数`sub_6A1109`的地址（即changed_wow64）。
那hook`Wow64Transition`函数有什么用呢，先看看`sub_6A1109`函数的逻辑。
首先将eax的值保存，之后调用`sub_9C1181`函数，然后调用`buf_func`函数。
跟进`sub_9C1181`函数。
查看`off_9CA804`指针所指数据。
分析可知，该函数就是将eax的值与0x100进行对比，如果相同，那么后面就将调用`sub_9C1028`函数，否则就调用原本应该调用的wow64函数。查看`sub_9C1028`函数可以发现返回值是2047，也就是前面主函数进行check的值，即这里就是真正的加密函数。
那么我自己动调没有被hook成功，就肯定是因为这里赋值给eax的值并不是0x100，下面动调跟一下。
这里断点后继续单步。
可以看出就是`NtLoadDriver`函数，这里将eax赋值为0x105，也就说是函数`NtLoadDriver`的系统调用号是0x105。继续跟进。
之后跳转到`Wow64Transition`函数，而根据前面的分析，这时`Wow64Transition`函数前4字节已经被修改为自己的函数地址，从而进行hook，而检测值就是前面赋值给eax的0x105。而没有被成功hook的原因应该就是这里，在我的系统中`NtLoadDriver`的系统调用号为0x105，而出题人师傅应该是0x100。又去问了动调没问题的Bxb0师傅，师傅经过动调发现他这里赋值给eax就是0x100。所以就是系统不一致的问题。
这里进行相关资料查阅，WOW64 (Windows-on-Windows 64-bit)是一个Windows操作系统的子系统，它为现有的 32
位应用程序提供了32位的模拟，可以使大多数32位应用程序在无需修改的情况下运行在Windows
64位版本上。它在系统层提供了中间层，将win32的系统调用转换成x64进行调用，并且将x64返回的结果转换成win32形式返回给win32程序。技术上说,
WOW64是由三个DLL实现的：Wow64.dll 是Windows NT
kernel的核心接口，在32位和64位调用之间进行转换，包括指针和调用栈的操控。Wow64win.dll为32位应用程序提供合适的入口指针。Wow64cpu.dll负责将处理器在32位和64位的模式之间转换。
也就是说，在64位windows上，32位程序进行系统调用，最终都会根据wow64子系统来进行转换，出题人据此，将32位程序系统调用转换所必须经历的`Wow64Transition`函数进行hook，并在自己的函数中check是否为`ZwLoadDriver`函数，若不是则正常进行转换，继续系统调用，若是的话，就转而执行加密函数。所以前面该程序多处调该`IsWow64Process`函数来检测是否运行在64位系统上。不然不可能经历这个过程。
（企图单步调试观察这个转换过程但失败了，原因是32位调试器不能调试切换到64位模式的程序，用windgb好像可以解决这个问题，这里不再深究）
###  加密过程分析
之后分析前面找到的加密函数。
####  ZwSetInformationThread反调试
写代码解一下字符串加密。这里注意一下ProcName和v6空间也是连着的。
    s1 = 'siyqq3yqq'
    s2 = [118,91,127]+list(map(ord,'IXeBJC^AMXECBxD^IMH'))
    for i in range(len(s1)):
        print(chr(ord(s1[i])^0x1D),end='')
    print('')
    for i in range(len(s2)):
        print(chr(s2[i]^0x2C),end='')
    # ntdll.dll
    # ZwSetInformationThread
则这里首先调用`GetModuleHandleA`函数获取`ntdll`动态链接库模块的句柄，然后调用`GetProcAddress`函数获取`ntdll`动态链接库中的导出函数`ZwSetInformationThread`的地址。后面再调用该函数。
而根据这篇[详解反调试技术](https://blog.csdn.net/qq_32400847/article/details/52798050)，函数`ZwSetInformationThread`拥有两个参数，第一个参数用来接收当前线程的句柄，第二个参数表示线程信息类型，若其值设置为ThreadHideFromDebugger(0x11)，使用语句ZwSetInformationThread(GetCurrentThread(),
ThreadHideFromDebugger, NULL,
0);调用该函数后，调试进程就会被分离出来。该函数不会对正常运行的程序产生任何影响，但若运行的是调试器程序，因为该函数隐藏了当前线程，调试器无法再收到该线程的调试事件，最终停止调试。
也就是说个函数的调用是用于反调试的，若要调试直接patch即可。
之后调用函数`sub_E213ED`，返回值看起来应该是个函数地址，用于后面对输入进行加密。
再之后的一个check其实毫无用处，因为之前main函数在我们input前加了两个word类型的数据，第一个就是32。
最后调用那个通过函数`sub_E213ED`获得的加密函数，对我们的输入每16个字节一组进行加密。
接下来就要找出具体的加密函数究竟是什么。跟进`sub_E213ED`进行分析。
####  cipher.dll装载
这里依次调用了三个函数，逐个分析。
首先分析`sub_E211B8`函数，该函数首先调用了`sub_E21226`函数，再跟进。
函数`sub_E21226`首先调用`GetModuleHandleW`函数，参数为0代表获取当前进程模块的句柄。之后调用`FindResourceW`函数，确定具有指定类型和名称的资源在指定模块中的位置，即在当前程序中寻找资源，根据
[PE文件解析-资源(Resource)](https://blog.csdn.net/zhyulo/article/details/85930045)，PE文件中的资源是按照
**资源类型** -> **资源ID** -> **资源代码页**
的3层树型目录结构来组织资源的，该函数第二个参数为资源ID/资源名lpName，ID是资源的整数标识符，第三个参数为资源类型lpType。根据字符串可以看出这里的资源应该就是一个用来加密的dll。返回值是指定资源的信息块的句柄，之后将此句柄传递给`LoadResource`函数，来获取资源的句柄。之后根据资源句柄，调用`LockResource`函数，来检索指向内存中该资源的指针，从而获取资源地址。
继续分析`sub_E211B8`函数，在调用`sub_E21226`函数后又调用了`sub_E21258`函数，第一个参数就是加载的dll资源的地址，第二个参数是资源的大小，跟进分析。可以看出首先将资源空间权限改为允许任意操作，之后对资源循环异或解密。（动调可以发现这里解密后就是一个dll文件）
回到`sub_E211B8`函数，之后将该`cipher.dll`的前64字节转储，也就是该pe文件的dos头，最后一个数据为 **e_lfanew**
，即相对于文件首的偏移量，用于找到NT头。
之后将该`cipher.dll`的NT头开始的248字节转储，也就是文件整个NT头。32位pe文件NT头大小就是0xF8（248），可选头大小一般为0xE0，而64位NT头中的可选头大小一般为0xF0。
再将NT头开始的第21个dword数据保存，这个数据就是NT头中的`SizeOfImage`。即该dll加载到内存中所需的虚拟内存大小。
再将NT头开始的第2个dword数据的高16位保存，这个数据就是NT头中的`NumberOfSections`。即该dll中的节区数量。
之后根据节区数量依次将节区头转储，32位pe文件节区大小就是40字节。
然后调用`VirtualAlloc`函数，在此babyre程序进程的地址空间中根据`SizeOfImage`分配内存。
之后将NT头开始的第22个dword数据保存，这个数据就是NT头中的`SizeOfHeader`，指明整个pe头的大小。从而根据`SizeOfHeader`将整个PE头加载到刚刚分配的内存空间中。
最后将每个节区，根据内存中节区的起始地址`VirtualAddress`，硬盘文件中节区的起始位置`PointerToRawData`，硬盘文件中节区所占大小`SizeOfRawData`，加载到分配的内存空间中。（这里注意那几个dword数据前面的地址就是节区头地址，则根据节区头位置以及pe文件格式即可判断出这些数据的含义）
再分析`sub_E211EA`函数。还是结合pe结构分析，实现了PE装载器将导入函数输入至IAT的过程，不再详细说明。（这里注意循环每次加5，类型是dowrd，可以看汇编）
最后分析`sub_E2134D`函数，可以发现是进行重定位，因为文件被加载的地址不是`ImageBase`定义的地址，涉及直接寻址的指令都需要重定位，重定位后的地址=需要重定位的地址-默认加载基址+当前加载基址。
综上，这三个函数其实就是实现了一个简单的pe装载器，将储存在资源中的`cipher.dll`解密后加载入内存。最终返回内存中该dll的首地址。
用Resource Hacker打开该程序，可以看到资源类型CIPHER_DLL且资源ID为0x65的资源。
将资源保存后，解密可得到这个dll。
    path = 'your_path/cipher.dll'
    xor_data = list(map(ord,'wow!'))
    buf = b''
    with open(path, 'rb+') as fp:
        buf = fp.read()
        buf = list(buf)
        for i in range(len(buf)):
            buf[i] ^= xor_data[i%len(xor_data)]
    with open(path, 'wb+') as fp:
        buf = bytes(buf)
        fp.write(buf)
查看导出窗口可以发现`Cipher`函数。
也可以直接动调，系统调用号的问题手动改为0x100，过反调试后，`F8`到加密的地方步入，也可以进入到cipher.dll。(函数`sub_E213ED`返回值为dll首地址，加的值0x4F6DE，查看dll后发现就是`AddressOfEntryPoint`的值，即程序最先执行的代码地址)
####  加密算法分析
用ida查看我们提取并解密的`cipher.dll`。
根据带有提示性质的密钥，知道这是sm4加密。没看出来也不要紧，跟进加密函数，能够发现sm4加密的s盒、系统参数fk和固定参数ck。由于传入参数只有我们的输入，因此加密就只是将我们的输入进行sm4的ecb加密，最后进行check。
###  exp
至此分析完毕，根据最后check的加密结果，以及密钥`Ez_5M4_C1pH[@r](https://github.com/r
"@r")!!!`，写脚本得到flag。
    import pysm4
    import binascii
    key = b'Ez_5M4_C1pH@r!!!'
    key = int(binascii.b2a_hex(key).decode(),16)
    res = [0xEA, 0x63, 0x58, 0xB7, 0x8C, 0xE2, 0xA1, 0xE9, 0xC5, 0x29,
        0x8F, 0x53, 0xE8, 0x08, 0x32, 0x59, 0xAF, 0x1B, 0x67, 0xAE,
        0xD9, 0xDA, 0xCF, 0xC4, 0x72, 0xFF, 0xB1, 0xEC, 0x76, 0x73,
        0xF3, 0x06]
    flag = b''
    for i in range(0,len(res),16):
        tmp = int(binascii.b2a_hex(bytes(res[i:i+16])).decode(),16)
        m = pysm4.decrypt(tmp,key)