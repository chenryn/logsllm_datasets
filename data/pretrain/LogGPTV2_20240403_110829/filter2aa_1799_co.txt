must be properly signed (including the IUM EKU in the signature, as for every trustlet) and must de-
clare its capabilities in its metadata section. A secure companion has the full ownership of its managed 
device (this explains why the device is often called secure device). A secure device controller by a secure 
companion supports the following features:
I 
Secure DMA The driver can instruct the device to perform DMA transfer directly in protected
VTL 1 memory, which is not accessible to VTL 0. The secure companion can process the data
sent or received through the DMA interface and can then transfer part of the data to the VTL 0
driver through the standard KMDF communication interface (ALPC). The IumGetDmaEnabler
and IumDmaMapMemory secure system calls, exposed through Iumbase.dll, allow the secure
companion to map physical DMA memory ranges directly in VTL 1 user mode.
I 
Memory mapped IO (MMIO) The secure companion can request the device to map its
accessible MMIO range in VTL 1 (user mode). It can then access the memory-mapped device’s
registers directly in IUM. MapSecureIo and the ProtectSecureIo APIs expose this feature.
I 
Secure sections The companion can create (through the CreateSecureSection API) and map
secure sections, which represent memory that can be shared between trustlets and the main
driver running in VTL 0. Furthermore, the secure companion can specify a different type of SLAT
protection in case the memory is accessed through the secure device (via DMA or MMIO).
A secure companion can’t directly respond to device interrupts, which need to be mapped and 
managed by the associated kernel mode driver in VTL 0. In the same way, the kernel mode driver still 
needs to act as the high-level interface for the system and user mode applications by managing all the 
received IOCTLs. The main driver communicates with its secure companion by sending WDF tasks using 
the UMDF Task Queue object, which internally uses the ALPC facilities exposed by the WDF framework. 
A typical KMDF driver registers its companion via INF directives. WDF automatically starts the driver’s 
companion in the context of the driver’s call to WdfDeviceCreate—which, for plug and play drivers usually 
happens in the AddDevice callback— by sending an ALPC message to the UMDF driver manager service, 
which spawns a new WUDFCompanionHost.exe trustlet by calling the NtCreateUserProcess native API. 
The UMDF secure companion host then loads the secure companion DLL in its address space. Another 
ALPC message is sent from the UMDF driver manager to the WUDFCompanionHost, with the goal to ac-
tually start the secure companion. The DriverEntry routine of the companion performs the driver’s secure 
initialization and creates the WDFDRIVER object through the classic WdfDriverCreate API. 
The framework then calls the AddDevice callback routine of the companion in VTL 1, which usually 
creates the companion’s device through the new WdfDeviceCompanionCreate UMDF API. The latter 
transfers the execution to the Secure Kernel (through the IumCreateSecureDevice secure system call), 
which creates the new secure device. From this point on, the secure companion has full ownership of its 
managed device. Usually, the first thing that the companion does after the creation of the secure de-
vice is to create the task queue object (WDFTASKQUEUE) used to process any incoming tasks delivered 
by its associated VTL 0 driver. The execution control returns to the kernel mode driver, which can now 
send new tasks to its secure companion.
378 
CHAPTER 9 Virtualization technologies
This model is also supported by WDM drivers. WDM drivers can use the KMDF’s miniport mode to 
interact with a special filter driver, WdmCompanionFilter.sys, which is attached in a lower-level position 
of the device’s stack. The Wdm Companion filter allows WDM drivers to use the task queue object for 
sending tasks to the secure companion.
VBS-based enclaves
In Chapter 5 of Part 1, we discuss the Software Guard Extension (SGX), a hardware technology that allows 
the creation of protected memory enclaves, which are secure zones in a process address space where 
code and data are protected (encrypted) by the hardware from code running outside the enclave. The 
technology, which was first introduced in the sixth generation Intel Core processors (Skylake), has suf-
fered from some problems that prevented its broad adoption. (Furthermore, AMD released another 
technology called Secure Encrypted Virtualization, which is not compatible with SGX.)
To overcome these issues, Microsoft released VBS-based enclaves, which are secure enclaves whose 
isolation guarantees are provided using the VSM infrastructure. Code and data inside of a VBS-based 
enclave is visible only to the enclave itself (and the VSM Secure Kernel) and is inaccessible to the NT 
kernel, VTL 0 processes, and secure trustlets running in the system. 
A secure VBS-based enclave is created by establishing a single virtual address range within a normal 
process. Code and data are then loaded into the enclave, after which the enclave is entered for the first 
time by transferring control to its entry point via the Secure Kernel. The Secure Kernel first verifies that 
all code and data are authentic and are authorized to run inside the enclave by using image signature 
verification on the enclave image. If the signature checks pass, then the execution control is transferred 
to the enclave entry point, which has access to all of the enclave’s code and data. By default, the system 
only supports the execution of enclaves that are properly signed. This precludes the possibility that un-
signed malware can execute on a system outside the view of anti-malware software, which is incapable 
of inspecting the contents of any enclave. 
During execution, control can transfer back and forth between the enclave and its containing pro-
cess. Code executing inside of an enclave has access to all data within the virtual address range of the 
enclave. Furthermore, it has read and write access of the containing unsecure process address space. All 
memory within the enclave’s virtual address range will be inaccessible to the containing process. If mul-
tiple enclaves exist within a single host process, each enclave will be able to access only its own memory 
and the memory that is accessible to the host process.
As for hardware enclaves, when code is running in an enclave, it can obtain a sealed enclave report, 
which can be used by a third-party entity to validate that the code is running with the isolation guar-
antees of a VBS enclave, and which can further be used to validate the specific version of code running. 
This report includes information about the host system, the enclave itself, and all DLLs that may have 
been loaded into the enclave, as well as information indicating whether the enclave is executing with 
debugging capabilities enabled.
CHAPTER 9 Virtualization technologies
379
A VBS-based enclave is distributed as a DLL, which has certain specific characteristics:
I 
It is signed with an authenticode signature, and the leaf certificate includes a valid EKU that per-
mits the image to be run as an enclave. The root authority that has emitted the digital certificate
should be Microsoft, or a third-party signing authority covered by a certificate manifest that’s
countersigned by Microsoft. This implies that third-party companies could sign and run their own
enclaves. Valid digital signature EKUs are the IUM EKU (1.3.6.1.4.1.311.10.3.37) for internal Windows-
signed enclaves or the Enclave EKU (1.3.6.1.4.1.311.10.3.42) for all the third-party enclaves.
I 
It includes an enclave configuration section (represented by an IMAGE_ENCLAVE_CONFIG data
structure), which describes information about the enclave and which is linked to its image’s load
configuration data directory.
I 
It includes the correct Control Flow Guard (CFG) instrumentation.
The enclave’s configuration section is important because it includes important information needed 
to properly run and seal the enclave: the unique family ID and image ID, which are specified by the 
enclave’s author and identify the enclave binary, the secure version number and the enclave’s policy 
information (like the expected virtual size, the maximum number of threads that can run, and the 
debuggability of the enclave). Furthermore, the enclave’s configuration section includes the list of 
images that may be imported by the enclave, included with their identity information. An enclave’s 
imported module can be identified by a combination of the family ID and image ID, or by a combina-
tion of the generated unique ID, which is calculated starting from the hash of the binary, and author ID, 
which is derived from the certificate used to sign the enclave. (This value expresses the identity of who 
has constructed the enclave.) The imported module descriptor must also include the minimum secure 
version number. 
The Secure Kernel offers some basic system services to enclaves through the VBS enclave runtime 
DLL, Vertdll.dll, which is mapped in the enclave address space. These services include: a limited subset 
of the standard C runtime library, the ability to allocate or free secure memory within the address range 
of the enclave, synchronization services, structured exception handling support, basic cryptographic 
functions, and the ability to seal data.
EXPERIMENT: Dumping the enclae configuration
In this experiment, we use the Microsoft Incremental linker (link.exe) included in the Windows 
SDK and WDK to dump software enclave configuration data. Both packages are downloadable 
from the web. You can also use the EWDK, which contains all the necessary tools and does not 
require any installation. It’s available at https://docs.microsoft.com/ en-us/windows-hardware/
drivers/download-the-wdk.
Open the Visual Studio Developer Command Prompt through the Cortana search box or 
by executing the LaunchBuildEnv.cmd script file contained in the EWDK’s Iso image. We will 
analyze the configuration data of the System Guard Routine Attestation enclave—which is 
shown in Figure 9-40 and will be described later in this chapter—with the link.exe /dump 
/loadconfig command:
EXPERIMENT: Dumping the enclae configuration
In this experiment, we use the Microsoft Incremental linker (link.exe) included in the Windows 
SDK and WDK to dump software enclave configuration data. Both packages are downloadable 
from the web. You can also use the EWDK, which contains all the necessary tools and does not 
require any installation. It’s available at https://docs.microsoft.com/ en-us/windows-hardware/
drivers/download-the-wdk.
Open the Visual Studio Developer Command Prompt through the Cortana search box or 
by executing the LaunchBuildEnv.cmd script file contained in the EWDK’s Iso image. We will 
analyze the configuration data of the System Guard Routine Attestation enclave—which is 
shown in Figure 9-40 and will be described later in this chapter—with the link.exe /dump 
/loadconfig command:
380 
CHAPTER 9 Virtualization technologies
The command’s output is large. So, in the example shown in the preceding figure, we have 
redirected it to the SgrmEnclave_secure_loadconfig.txt file. If you open the new output file, you 
see that the binary image contains a CFG table and includes a valid enclave configuration pointer, 
which targets the following data:
   Enclave Configuration 
00000050 size 
0000004C minimum required config size 
00000000 policy flags 
00000003 number of enclave import descriptors 
0004FA04 RVA to enclave import descriptors 
00000050 size of an enclave import descriptor 
00000001 image version 
00000001 security version 
0000000010000000 enclave size 
00000008 number of threads 
00000001 enclave flags 
family ID : B1 35 7C 2B 69 9F 47 F9 BB C9 4F 44 F2 54 DB 9D 
image ID : 24 56 46 36 CD 4A D8 86 A2 F4 EC 25 A9 72 02 
ucrtbase_enclave.dll 
0 minimum security version 
0 reserved 
match type : image ID 
family ID : 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 
image ID : F0 3C CD A7 E8 7B 46 EB AA E7 1F 13 D5 CD DE 5D 
unique/author ID : 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 
00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 
bcrypt.dll 
The command’s output is large. So, in the example shown in the preceding figure, we have 
redirected it to the SgrmEnclave_secure_loadconfig.txt file. If you open the new output file, you 
see that the binary image contains a CFG table and includes a valid enclave configuration pointer, 
which targets the following data:
   Enclave Configuration
00000050 size
0000004C minimum required config size
00000000 policy flags
00000003 number of enclave import descriptors
0004FA04 RVA to enclave import descriptors
00000050 size of an enclave import descriptor
00000001 image version
00000001 security version
0000000010000000 enclave size
00000008 number of threads
00000001 enclave flags
family ID : B1 35 7C 2B 69 9F 47 F9 BB C9 4F 44 F2 54 DB 9D
image ID : 24 56 46 36 CD 4A D8 86 A2 F4 EC 25 A9 72 02
ucrtbase_enclave.dll
0 minimum security version
0 reserved
match type : image ID
family ID : 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
image ID : F0 3C CD A7 E8 7B 46 EB AA E7 1F 13 D5 CD DE 5D
unique/author ID : 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
bcrypt.dll
CHAPTER 9 Virtualization technologies
381
0 minimum security version 
0 reserved 
match type : image ID 
family ID : 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 
image ID : 20 27 BD 68 75 59 49 B7 BE 06 34 50 E2 16 D7 ED 
unique/author ID : 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 
00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 
...
The configuration section contains the binary image’s enclave data (like the family ID, image 
ID, and security version number) and the import descriptor array, which communicates to the 
Secure Kernel from which library the main enclave’s binary can safely depend on. You can redo 
the experiment with the Vertdll.dll library and with all the binaries imported from the System 
Guard Routine Attestation enclave.
Enclave lifecycle
In Chapter 5 of Part 1, we discussed the lifecycle of a hardware enclave (SGX-based). The lifecycle of a 
VBS-based enclave is similar; Microsoft has enhanced the already available enclave APIs to support the 
new type of VBS-based enclaves.
Step 1: Creation An application creates a VBS-based enclave by specifying the ENCLAVE_TYPE_VBS 
flag to the CreateEnclave API. The caller should specify an owner ID, which identifies the owner of 
the enclave. The enclave creation code, in the same way as for hardware enclaves, ends up calling the 
NtCreateEnclave in the kernel. The latter checks the parameters, copies the passed-in structures, and 
attaches to the target process in case the enclave is to be created in a different process than the caller’s. 
The MiCreateEnclave function allocates an enclave-type VAD describing the enclave virtual memory 
range and selects a base virtual address if not specified by the caller. The kernel allocates the memory 
manager’s VBS enclave data structure and the per-process enclave hash table, used for fast lookup of 
the enclave starting by its number. If the enclave is the first created for the process, the system also cre-
ates an empty secure process (which acts as a container for the enclaves) in VTL 1 by using the CREATE 
_PROCESS secure call (see the earlier section “Trustlets creation” for further details). 
The CREATE_ENCLAVE secure call handler in VTL 1 performs the actual work of the enclave creation: 
it allocates the secure enclave key data structure (SKMI_ENCLAVE), sets the reference to the container 
secure process (which has just been created by the NT kernel), and creates the secure VAD describ-
ing the entire enclave virtual address space (the secure VAD contains similar information to its VTL 0 
counterpart). This VAD is inserted in the containing process’s VAD tree (and not in the enclave itself). 
An empty virtual address space for the enclave is created in the same way as for its containing process: 
the page table root is filled by system entries only.
0 minimum security version
0 reserved
match type : image ID
family ID : 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
image ID : 20 27 BD 68 75 59 49 B7 BE 06 34 50 E2 16 D7 ED
unique/author ID : 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 
...
The configuration section contains the binary image’s enclave data (like the family ID, image 
ID, and security version number) and the import descriptor array, which communicates to the 
Secure Kernel from which library the main enclave’s binary can safely depend on. You can redo 
the experiment with the Vertdll.dll library and with all the binaries imported from the System 
Guard Routine Attestation enclave.
382 
CHAPTER 9 Virtualization technologies
Step 2: Loading modules into the enclave Differently from hardware-based enclaves, the parent 
process can load only modules into the enclave but not arbitrary data. This will cause each page of the 
image to be copied into the address space in VTL 1. Each image’s page in the VTL 1 enclave will be a 
private copy. At least one module (which acts as the main enclave image) needs to be loaded into the 
enclave; otherwise, the enclave can’t be initialized. After the VBS enclave has been created, an applica-
tion calls the LoadEnclaveImage API, specifying the enclave base address and the name of the module 
that must be loaded in the enclave. The Windows Loader code (in Ntdll.dll) searches the specified DLL 
name, opens and validates its binary file, and creates a section object that is mapped with read-only 
access right in the calling process.
After the loader maps the section, it parses the image’s import address table with the goal to create 
a list of the dependent modules (imported, delay loaded, and forwarded). For each found module, the 
loader checks whether there is enough space in the enclave for mapping it and calculates the correct 
image base address. As shown in Figure 9-40, which represents the System Guard Runtime Attestation 
enclave, modules in the enclave are mapped using a top-down strategy. This means that the main 
image is mapped at the highest possible virtual address, and all the dependent ones are mapped in 
lower addresses one next to each other. At this stage, for each module, the Windows Loader calls the 
NtLoadEnclaveData kernel API.
SgrmEnclave_Secure.dll
ucrtbase_enclave.dll
bcrypt.dll
vertdll.dll
bcryptPrimitives.dll
0x026D'18200000 (Top of the Enclave)
0x026D'08200000 (Enclave Base)
Private and
Free Space
0x026D'18194000
0x026D'1811C000
0x026D'180FC000
0x026D'180C4000
0x026D'18043000
Higher Addresses
FIGURE 9-40 The System Guard Runtime Attestation secure enclave (note the empty space at  
the base of the enclave).
CHAPTER 9 Virtualization technologies
383
For loading the specified image in the VBS enclave, the kernel starts a complex process that al-
lows the shared pages of its section object to be copied in the private pages of the enclave in VTL 1. 
The MiMapImageForEnclaveUse function gets the control area of the section object and validates it 
through SKCI. If the validation fails, the process is interrupted, and an error is returned to the caller. (All 
the enclave’s modules should be correctly signed as discussed previously.) Otherwise, the system at-
taches to the secure system process and maps the image’s section object in its address space in VTL 0. 
The shared pages of the module at this time could be valid or invalid; see Chapter 5 of Part 1 for further 
details. It then commits the virtual address space of the module in the containing process. This creates 
private VTL 0 paging data structures for demand-zero PTEs, which will be later populated by the Secure 
Kernel when the image is loaded in VTL 1.
The LOAD_ENCLAVE_MODULE secure call handler in VTL 1 obtains the SECURE_IMAGE of the new 
module (created by SKCI) and verifies whether the image is suitable for use in a VBS-based enclave (by 
verifying the digital signature characteristics). It then attaches to the secure system process in VTL 1 
and maps the secure image at the same virtual address previously mapped by the NT kernel. This al-
lows the sharing of the prototype PTEs from VTL 0. The Secure Kernel then creates the secure VAD that 
describes the module and inserts it into the VTL 1 address space of the enclave. It finally cycles between 
each module’s section prototype PTE. For each nonpresent prototype PTE, it attaches to the secure 
system process and uses the GET_PHYSICAL_PAGE normal call to invoke the NT page fault handler 
(MmAccessFault), which brings in memory the shared page. The Secure Kernel performs a similar 
process for the private enclave pages, which have been previously committed by the NT kernel in VTL 0 