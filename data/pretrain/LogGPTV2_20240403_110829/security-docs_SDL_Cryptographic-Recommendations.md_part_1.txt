---
layout: Conceptual
title: Microsoft SDL Cryptographic Recommendations
description: This document provides recommendations and best practices for using encryption on Microsoft platforms. It serves as a reference for designing products that use the same APIs, algorithms, protocols, and key lengths required by Microsoft for its own products and services.
ms.date: 12/03/2018
ms.service: security
ms.author: bcowper
author: BruceCowper
ms.topic: conceptual
---

# Microsoft SDL Cryptographic Recommendations

## Introduction

This document outlines recommendations and best practices for using encryption on Microsoft platforms. The content is derived from Microsoft's internal security standards, which form part of the Security Development Lifecycle (SDL). These guidelines are intended to serve as a reference for developers to ensure their products use the same APIs, algorithms, protocols, and key lengths that Microsoft requires for its own products and services.

Developers working on non-Windows platforms can also benefit from these recommendations. Although the API and library names may differ, the best practices for algorithm choice, key length, and data protection are generally applicable across different platforms.

## Security Protocol, Algorithm, and Key Length Recommendations

### SSL/TLS Versions

Products and services should use cryptographically secure versions of SSL/TLS:

- **TLS 1.2** should be enabled.
- **TLS 1.1 and TLS 1.0** should be enabled only for backward compatibility.
- **SSL 3 and SSL 2** should be disabled by default.

### Symmetric Block Ciphers, Cipher Modes, and Initialization Vectors

#### Block Ciphers

For products using symmetric block ciphers:

- **Advanced Encryption Standard (AES)** is recommended for new code.
- **Three-key triple Data Encryption Standard (3DES)** is permissible in existing code for backward compatibility.
- All other block ciphers, including RC2, DES, 2-Key 3DES, DESX, and Skipjack, should only be used for decrypting old data and should be replaced if used for encryption.

A minimum key length of 128 bits is recommended for symmetric block encryption algorithms. The only block encryption algorithm recommended for new code is AES (AES-128, AES-192, and AES-256 are all acceptable, noting that AES-192 lacks optimization on some processors). Three-key 3DES is currently acceptable if already in use in existing code; transitioning to AES is recommended. DES, DESX, RC2, and Skipjack are no longer considered secure and should only be used for decrypting existing data for backward-compatibility. Data should be re-encrypted using a recommended block cipher.

#### Cipher Modes

Symmetric algorithms can operate in various modes, most of which link together the encryption operations on successive blocks of plaintext and ciphertext. Symmetric block ciphers should be used with one of the following cipher modes:

- **Cipher Block Chaining (CBC)**
- **Ciphertext Stealing (CTS)**
- **XEX-Based Tweaked-Codebook with Ciphertext Stealing (XTS)**

Other cipher modes, such as those listed below, have implementation pitfalls that make them more likely to be used incorrectly. In particular, the Electronic Code Book (ECB) mode of operation should be avoided. Reusing the same initialization vector (IV) with block ciphers in "streaming ciphers modes" such as CTR may cause encrypted data to be revealed. Additional security review is recommended if any of the following modes are used:

- **Output Feedback (OFB)**
- **Cipher Feedback (CFB)**
- **Counter (CTR)**
- **Counter with CBC-MAC (CCM)**
- **Galois/Counter Mode (GCM)**
- **Any other modes not on the "recommended" list above**

#### Initialization Vectors (IV)

All symmetric block ciphers should use a cryptographically strong random number as an initialization vector. Initialization vectors should never be a constant value. See the section on Random Number Generators for recommendations on generating cryptographically strong random numbers. Initialization vectors should never be reused when performing multiple encryption operations, as this can reveal information about the data being encrypted, particularly when using streaming cipher modes like Output Feedback (OFB) or Counter (CTR).

### Asymmetric Algorithms, Key Lengths, and Padding Modes

#### RSA

- **RSA** should be used for encryption, key exchange, and signatures.
- **RSA encryption** should use the OAEP or RSA-PSS padding modes. Existing code should use PKCS #1 v1.5 padding mode for compatibility only.
- **Use of null padding** is not recommended.
- **Keys ≥ 2048 bits** are recommended.

#### ECDSA

- **ECDSA with ≥ 256 bit keys** is recommended.
- **ECDSA-based signatures** should use one of the three NIST-approved curves (P-256, P-384, or P-521).

#### ECDH

- **ECDH with ≥ 256 bit keys** is recommended.
- **ECDH-based key exchange** should use one of the three NIST-approved curves (P-256, P-384, or P-521).

#### Integer Diffie-Hellman

- **Key length ≥ 2048 bits** is recommended.
- **The group parameters** should either be a well-known named group (e.g., RFC 7919), or generated by a trusted party and authenticated before use.

## Key Lifetimes

- **All asymmetric keys** should have a maximum five-year lifetime, with a recommended one-year lifetime.
- **All symmetric keys** should have a maximum three-year lifetime, with a recommended one-year lifetime.
- **You should provide a mechanism or process** for replacing keys to achieve the limited active lifetime. After the end of its active lifetime, a key should not be used to produce new data (for example, for encryption or signing), but may still be used to read data (for example, for decryption or verification).

## Random Number Generators

All products and services should use cryptographically secure random number generators when randomness is required.

### CNG

- Use [BCryptGenRandom](https://docs.microsoft.com/en-us/windows/win32/api/bcrypt/nf-bcrypt-bcryptgenrandom) with the BCRYPT_USE_SYSTEM_PREFERRED_RNG flag.

### CAPI

- Use [CryptGenRandom](https://docs.microsoft.com/en-us/windows/win32/api/wincrypt/nf-wincrypt-cryptgenrandom) to generate random values.

### Win32/64

- **Legacy code** can use [RtlGenRandom](https://docs.microsoft.com/en-us/windows-hardware/drivers/ddi/ntifs/nf-ntifs-rtlgenrandom) in kernel mode.
- **New code** should use [BCryptGenRandom](https://docs.microsoft.com/en-us/windows/win32/api/bcrypt/nf-bcrypt-bcryptgenrandom) or [CryptGenRandom](https://docs.microsoft.com/en-us/windows/win32/api/wincrypt/nf-wincrypt-cryptgenrandom).
- The C function [Rand_s](https://docs.microsoft.com/en-us/cpp/c-runtime-library/reference/rand-s?view=msvc-170) is also recommended (which on Windows, calls [CryptGenRandom](https://docs.microsoft.com/en-us/windows/win32/api/wincrypt/nf-wincrypt-cryptgenrandom)).
- **Rand_s()** is a safe and performant replacement for Rand(). Rand() should not be used for any cryptographic applications, but is okay for internal testing only.
- The [SystemPrng](https://docs.microsoft.com/en-us/windows/win32/api/sysinfoapi/nf-sysinfoapi-systemprng) function is recommended for kernel-mode code.

### .NET

- Use [RNGCryptoServiceProvider](https://docs.microsoft.com/en-us/dotnet/api/system.security.cryptography.rngcryptoserviceprovider?view=net-7.0).

### Windows Store Apps

- Store Apps can use [CryptographicBuffer.GenerateRandom](https://docs.microsoft.com/en-us/uwp/api/windows.security.cryptography.cryptographicbuffer.generaterandom?view=winrt-22621) or [CryptographicBuffer.GenerateRandomNumber](https://docs.microsoft.com/en-us/uwp/api/windows.security.cryptography.cryptographicbuffer.generaterandomnumber?view=winrt-22621).

### Not Recommended

- **Insecure functions** related to random number generation include [rand](https://docs.microsoft.com/en-us/cpp/c-runtime-library/reference/rand?view=msvc-170), [System.Random](https://docs.microsoft.com/en-us/dotnet/api/system.random?view=net-7.0) (.NET), [GetTickCount](https://docs.microsoft.com/en-us/windows/win32/api/sysinfoapi/nf-sysinfoapi-gettickcount), and [GetTickCount64](https://docs.microsoft.com/en-us/windows/win32/api/sysinfoapi/nf-sysinfoapi-gettickcount64).
- **Use of the dual elliptic curve random number generator ("DUAL_EC_DRBG")** algorithm is not recommended.

## Windows Platform-Supported Crypto Libraries

On the Windows platform, Microsoft recommends using the crypto APIs built into the operating system. On other platforms, developers may choose to evaluate non-platform crypto libraries for use. Generally, platform crypto libraries will be updated more frequently since they ship as part of an operating system rather than being bundled with an application.

Any usage decision regarding platform vs. non-platform crypto should be guided by the following requirements:

1. The library should be a current, in-support version free of known security vulnerabilities.
2. The latest security protocols, algorithms, and key lengths should be supported.
3. (Optional) The library should be capable of supporting older security protocols/algorithms for backward compatibility only.

### Native Code

- **Crypto Primitives**: If your release is on Windows or Windows Phone, use CNG if possible. Otherwise, use the CryptoAPI (also called CAPI, which is supported as a legacy component on Windows from Windows Vista onward).
- **SSL/TLS/DTLS**: [WinINet](https://docs.microsoft.com/en-us/windows/win32/wininet/about-wininet), [WinHTTP](https://docs.microsoft.com/en-us/windows/win32/winhttp/winhttp-start-page), [Schannel](https://docs.microsoft.com/en-us/windows/win32/secauthn/microsoft-tls-ssl-implementation), [IXMLHTTPRequest2](https://docs.microsoft.com/en-us/windows/win32/api/msxml6/nn-msxml6-ixmlhttprequest2), or [IXMLHTTPRequest3](https://docs.microsoft.com/en-us/windows/win32/api/msxml6/nn-msxml6-ixmlhttprequest3). WinHTTP apps should be built with [WinHttpSetOption](https://docs.microsoft.com/en-us/windows/win32/api/winhttp/nf-winhttp-winhttpsetoption) to support TLS 1.2.
- **Code Signature Verification**: [WinVerifyTrust](https://docs.microsoft.com/en-us/windows/win32/api/wintrust/nf-wintrust-winverifytrust) is the supported API for verifying code signatures on Windows platforms.
- **Certificate Validation** (as used in restricted certificate validation for code signing or SSL/TLS/DTLS): CAPI2 API; for example, [CertGetCertificateChain](https://docs.microsoft.com/en-us/windows/win32/api/wincert/nf-wincert-certgetcertificatechain) and [CertVerifyCertificateChainPolicy](https://docs.microsoft.com/en-us/windows/win32/api/wincert/nf-wincert-certverifycertificatechainpolicy).

### Managed Code

- **Crypto Primitives**: Use the API defined in the System.Security.Cryptography namespace. The CNG classes are available in the .NET Framework and .NET Core.

By following these recommendations, developers can ensure that their products and services meet the high standards of security and compliance required by Microsoft.