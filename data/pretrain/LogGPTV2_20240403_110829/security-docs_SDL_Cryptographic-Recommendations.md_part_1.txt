---
layout: Conceptual
title: Microsoft SDL Cryptographic Recommendations
description: This document contains recommendations and best practices for using encryption on Microsoft platforms. It is meant to be used as a reference when designing products to use the same APIs, algorithms, protocols and key lengths that Microsoft requires of its own products and services.
ms.date: 12/03/2018
ms.service: security
ms.author: bcowper
author: BruceCowper
ms.topic: conceptual
---
# Microsoft SDL Cryptographic Recommendations
## Introduction
This document contains recommendations and best practices for using
encryption on Microsoft platforms. Much of the content here is
paraphrased or aggregated from Microsoftâ€™s own internal security
standards used to create the Security Development Lifecycle. It is meant
to be used as a reference when designing products to use the same APIs,
algorithms, protocols and key lengths that Microsoft requires of its own
products and services.
Developers on non-Windows platforms may also benefit from these
recommendations. While the API and library names may be different, the
best practices involving algorithm choice, key length and data
protection are similar across platforms.
## Security Protocol, Algorithm and Key Length Recommendations
### SSL/TLS versions
Products and services should use cryptographically secure versions of
SSL/TLS:
  - TLS 1.2 should be enabled
  - TLS 1.1 and TLS 1.0 should be enabled for backward compatibility
    only
  - SSL 3 and SSL 2 should be disabled by default
### Symmetric Block Ciphers, Cipher Modes and Initialization Vectors
_Block Ciphers_
For products using symmetric block ciphers:
  - Advanced Encryption Standard (AES) is recommended for new code.
  - Three-key triple Data Encryption Standard (3DES) is permissible in
    existing code for backward compatibility.
  - All other block ciphers, including RC2, DES, 2-Key 3DES, DESX, and
    Skipjack, should only be used for decrypting old data, and should be
    replaced if used for encryption.
For symmetric block encryption algorithms, a minimum key length of 128
bits is recommended. The only block encryption algorithm recommended for
new code is AES (AES-128, AES-192, and AES-256 are all acceptable,
noting that AES-192 lacks optimization on some processors). Three-key
3DES is currently acceptable if already in use in existing code;
transition to AES is recommended. DES, DESX, RC2, and Skipjack are no
longer considered secure. These algorithms should only be used for
decrypting existing data for the sake of backward-compatibility, and
data should be re-encrypted using a recommended block cipher.
_Cipher Modes_
Symmetric algorithms can operate in a variety of modes, most of which
link together the encryption operations on successive blocks of
plaintext and ciphertext.
Symmetric block ciphers should be used with one of the following cipher
modes:
  - [Cipher Block
    Chaining](https://en.wikipedia.org/wiki/Block_cipher_mode_of_operation)
    (CBC)
  - [Ciphertext
    Stealing](https://en.wikipedia.org/wiki/Ciphertext_stealing)
    (CTS)
  - [XEX-Based Tweaked-Codebook with Ciphertext
    Stealing](https://en.wikipedia.org/wiki/Disk_encryption_theory#XEX-based_tweaked-codebook_mode_with_ciphertext_stealing_.28XTS.29)
    (XTS)
Some other cipher modes like those included below have implementation
pitfalls that make them more likely to be used incorrectly. In
particular, the Electronic Code Book (ECB) mode of operation should be
avoided. Reusing the same initialization vector (IV) with block ciphers
in "streaming ciphers modes" such as CTR may cause encrypted data to be
revealed. Additional security review is recommended if any of the below
modes are used:
  - Output Feedback (OFB)
  - Cipher Feedback (CFB)
  - Counter (CTR)
  - Counter with CBC-MAC (CCM)
  - Galois/Counter Mode (GCM)
  - Anything else not on the "recommended" list above
_Initialization Vectors (IV)_
All symmetric block ciphers should also be used with a cryptographically
strong random number as an initialization vector. Initialization vectors
should never be a constant value. See Random Number Generators for
recommendations on generating cryptographically strong random numbers.
Initialization vectors should never be reused when performing multiple
encryption operations, as this can reveal information about the data
being encrypted, particularly when using streaming cipher modes like
Output Feedback (OFB) or Counter (CTR).
### Asymmetric Algorithms, Key Lengths, and Padding Modes
_RSA_
  - RSA should be used for encryption, key exchange and signatures.
  - RSA encryption should use the OAEP or RSA-PSS padding modes.
    Existing code should use PKCS \#1 v1.5 padding mode for
    compatibility only.
  - Use of null padding is not recommended.
  - Keys \>= 2048 bits are recommended
_ECDSA_
  - ECDSA with \>= 256 bit keys is recommended
  - ECDSA-based signatures should use one of the three NIST-approved
    curves (P-256, P-384, or P521).
_ECDH_
  - ECDH with \>= 256 bit keys is recommended
  - ECDH-based key exchange should use one of the three NIST-approved
    curves (P-256, P-384, or P521).
_Integer Diffie-Hellman_
  - Key length \>= 2048 bits is recommended
  - The group parameters should either be a well-known named group
    (e.g., RFC 7919), or generated by a trusted party and authenticated
    before use
## Key Lifetimes
  - All asymmetric keys should have a maximum five-year lifetime,
    recommended one-year lifetime.
  - All symmetric keys should have a maximum three-year lifetime;
    recommended one-year lifetime.
  - You should provide a mechanism or have a process for replacing keys
    to achieve the limited active lifetime. After the end of its active
    lifetime, a key should not be used to produce new data (for example,
    for encryption or signing), but may still be used to read data (for
    example, for decryption or verification).
## Random Number Generators
All products and services should use cryptographically secure random
number generators when randomness is required.
CNG
  - Use
    [BCryptGenRandom](https://msdn.microsoft.com/library/windows/desktop/aa375458.aspx)
    with the BCRYPT\_USE\_SYSTEM\_PREFERRED\_RNG flag
CAPI
  - Use
    [CryptGenRandom](https://msdn.microsoft.com/library/windows/desktop/aa379942.aspx)
    to generate random values.
Win32/64
  - Legacy code can use
    [RtlGenRandom](https://msdn.microsoft.com/library/windows/desktop/aa387694.aspx)
    in kernel mode
  - New code should use
    [BCryptGenRandom](https://msdn.microsoft.com/library/windows/desktop/aa375458.aspx)
    or
    [CryptGenRandom.](https://msdn.microsoft.com/library/windows/desktop/aa379942.aspx)
  - The C function
    [Rand\_s(](https://msdn.microsoft.com/library/sxtz2fa8.aspx))
    is also recommended (which on Windows, calls
    [CryptGenRandom)](https://msdn.microsoft.com/library/windows/desktop/aa379942.aspx)
  - Rand\_s() is a safe and performant replacement for Rand(). Rand()
    should not be used for any cryptographic applications, but is ok for
    internal testing only.
  - The
    [SystemPrng](https://msdn.microsoft.com/library/windows/desktop/dd408060.aspx)
    function is recommended for kernel-mode code.
.NET
  - Use
    [RNGCryptoServiceProvider](https://msdn.microsoft.com/library/system.security.cryptography.rngcryptoserviceprovider.aspx)
Windows Store Apps
  - Store Apps can use
    [CryptographicBuffer.GenerateRandom](https://msdn.microsoft.com/library/windows/apps/windows.security.cryptography.cryptographicbuffer.generaterandom.aspx)
    or
    [CryptographicBuffer.GenerateRandomNumber.](https://msdn.microsoft.com/library/windows/apps/windows.security.cryptography.cryptographicbuffer.generaterandomnumber.aspx)
Not Recommended
  - Insecure functions related to random number generation include
    [rand,](https://msdn.microsoft.com/library/398ax69y.aspx)
    [System.Random](https://msdn.microsoft.com/library/system.random.aspx)
    (.NET),
    [GetTickCount](https://msdn.microsoft.com/library/windows/desktop/ms724408.aspx)
    and [GetTickCount64
    ](https://msdn.microsoft.com/library/windows/desktop/ms724411.aspx)
  - Use of the dual elliptic curve random number generator
    ("DUAL\_EC\_DRBG") algorithm is not recommended.
## Windows Platform-supported Crypto Libraries
On the Windows platform, Microsoft recommends using the crypto APIs
built into the operating system. On other platforms, developers may
choose to evaluate non-platform crypto libraries for use. In general,
platform crypto libraries will be updated more frequently since they
ship as part of an operating system as opposed to being bundled with an
application.
Any usage decision regarding platform vs non-platform crypto should be
guided by the following requirements:
1.  The library should be a current in-support version free of known
    security vulnerabilities
2.  The latest security protocols, algorithms and key lengths should be
    supported
3.  (Optional) The library should be capable of supporting older
    security protocols/algorithms for backwards compatibility only
_Native Code_
  - Crypto Primitives: If your release is on Windows or Windows Phone,
    use CNG if possible. Otherwise, use the CryptoAPI (also called CAPI,
    which is supported as a legacy component on Windows from Windows
    Vista onward).
  - SSL/TLS/DTLS:
    [WinINet,](https://msdn.microsoft.com/library/windows/desktop/aa385331\(v=vs.85\).aspx)
    [WinHTTP,](https://msdn.microsoft.com/library/aa382925\(v=VS.85\).aspx)
    [Schannel,](https://msdn.microsoft.com/library/windows/desktop/ms678421\(v=vs.85\).aspx)
    [IXMLHTTPRequest2,](https://msdn.microsoft.com/library/windows/desktop/hh831151.aspx)
    or
    [IXMLHTTPRequest3.](https://msdn.microsoft.com/library/windows/desktop/dn376398.aspx)
    - WinHTTP apps should be built with [WinHttpSetOption](https://msdn.microsoft.com/library/windows/desktop/aa384114\(v=vs.85\).aspx)in order to support TLS 1.2
  - Code signature verification:
    [WinVerifyTrust](https://msdn.microsoft.com/library/aa388208\(v=VS.85\).aspx)
    is the supported API for verifying code signatures on Windows
    platforms.
  - Certificate Validation (as used in restricted certificate validation
    for code signing or SSL/TLS/DTLS): CAPI2 API; for example, [CertGetCertificateChain](https://msdn.microsoft.com/library/windows/desktop/aa376078\(v=vs.85\).aspx) and [CertVerifyCertificateChainPolicy](https://msdn.microsoft.com/library/windows/desktop/aa377163\(v=vs.85\).aspx)
_Managed Code_
  - Crypto Primitives: Use the API defined in
    System.Security.Cryptography namespace---the CNG classes are