## arm64 , 使用Dockerfile+docker build制作PolarDB | PostgreSQL 开源docker镜像, 集成大量插件方便学习, 并推送到阿里云镜像服务  
### 作者  
digoal  
### 日期  
2023-08-14  
### 标签  
PostgreSQL , PolarDB , docker , 插件 , Dockerfile , docker build  
----  
## 背景  
amd64芯片参考:  
- [《AMD64 , 使用Dockerfile+docker build制作PolarDB | PostgreSQL 开源docker镜像, 集成大量插件方便学习, 并推送到阿里云镜像服务》](../202307/20230710_03.md)  
以上docker镜像是在x86芯片的macOS上做的, 本文基于以上内容重新做了一个apple chip的版本.  
为了图方便, 就不做同时支持multi platform的同名镜像了. apple chip的版本使用了另一个标签: pg14_with_exts_arm64.  
已经集成到[云起实验室]([https://developer.aliyun.com/adc](https://developer.aliyun.com/adc/scenario/exp/f55dbfac77c0467a9d3cd95ff6697a31)), [云起实验]([https://developer.aliyun.com/adc](https://developer.aliyun.com/adc/scenario/exp/f55dbfac77c0467a9d3cd95ff6697a31))永久免费提供给PostgreSQL数据库开源爱好者、PostgreSQL数据库教学.  
## 注意这是个arm64的镜像, 可以在apple chip的macOS中运行.  
## 如何使用这个镜像  
```  
# 拉取镜像, 第一次拉取一次即可. 或者需要的时候执行, 将更新到最新镜像版本.  
docker pull registry.cn-hangzhou.aliyuncs.com/digoal/opensource_database:pg14_with_exts_arm64  
# 启动容器  
docker run -d -it -P --cap-add=SYS_PTRACE --cap-add SYS_ADMIN --privileged=true --name pg --shm-size=1g registry.cn-hangzhou.aliyuncs.com/digoal/opensource_database:pg14_with_exts_arm64
##### 如果你想学习备份恢复、修改参数等需要重启数据库实例的case, 换个启动参数, 使用参数--entrypoint将容器根进程换成bash更好. 如下: 
docker run -d -it -P --cap-add=SYS_PTRACE --cap-add SYS_ADMIN --privileged=true --name pg --shm-size=1g --entrypoint /bin/bash registry.cn-hangzhou.aliyuncs.com/digoal/opensource_database:pg14_with_exts_arm64  
##### 以上启动方式需要进入容器后手工启动数据库实例: su - postgres; pg_ctl start;  
# 进入容器  
docker exec -ti pg bash  
# 连接数据库  
psql  
```  
插件列表:  
- 与amd64 image集成的插件一样. 请参考, [《AMD64 , 使用Dockerfile+docker build制作PolarDB | PostgreSQL 开源docker镜像, 集成大量插件方便学习, 并推送到阿里云镜像服务》](../202307/20230710_03.md)  
使用duckdb:  
```  
# 进入容器  
docker exec -ti pg bash  
# 切换用户  
su - postgres  
# 启动duckdb  
./duckdb  
```  
## 使用docker build + Dockerfile 制作PolarDB | PostgreSQL 开源docker镜像, 集成大量插件方便学习  
1、创建Dockerfile工作目录:  
```  
mkdir ~/pg14  
```  
2、下载Oracle OCI到Dockerfile工作目录. (oracle_fdw, dblink_plus插件依赖oracle library.)  
[《PostgreSQL 商用版本EPAS(阿里云ppas) - 测试环境部署(EPAS 安装、配置、管理、Oracle DBLINK、外表)》](../201801/20180119_01.md)  
http://www.oracle.com/technetwork/database/features/instant-client/index-097480.html  
https://www.oracle.com/database/technologies/instant-client/linux-arm-aarch64-downloads.html  
```  
cd ~/pg14  
unzip instantclient-basic-linux.arm64-19.19.0.0.0dbru.zip  
unzip instantclient-sdk-linux.arm64-19.19.0.0.0dbru.zip  
```  
2\.1、下载几个较大的源码包, 降低在docker build时下载报错导致build失败的概率.  
```  
cd ~/pg14  
curl -Z --connect-timeout 120 -m 36000 --retry 12000 --retry-delay 5 --retry-max-time 1200 -L http://faculty.cse.tamu.edu/davis/GraphBLAS/GraphBLAS-3.1.1.tar.gz -o GraphBLAS-3.1.1.tar.gz
curl -Z --connect-timeout 120 -m 36000 --retry 12000 --retry-delay 5 --retry-max-time 1200 -L https://api.pgxn.org/dist/datasketches/1.7.0/datasketches-1.7.0.zip -o datasketches-1.7.0.zip
curl -Z --connect-timeout 120 -m 36000 --retry 12000 --retry-delay 5 --retry-max-time 1200 -L https://github.com/duckdb/duckdb/releases/download/v0.9.2/libduckdb-linux-aarch64.zip -o libduckdb-linux-aarch64.zip
curl -Z --connect-timeout 120 -m 36000 --retry 12000 --retry-delay 5 --retry-max-time 1200 -L https://github.com/duckdb/duckdb/releases/download/v0.9.2/libduckdb-src.zip -o libduckdb-src.zip
curl -Z --connect-timeout 120 -m 36000 --retry 12000 --retry-delay 5 --retry-max-time 1200 -L https://github.com/duckdb/duckdb/releases/download/v0.9.2/duckdb_cli-linux-aarch64.zip -o duckdb_cli-linux-aarch64.zip  
curl -Z --connect-timeout 120 -m 36000 --retry 12000 --retry-delay 5 --retry-max-time 1200 -L https://github.com/Kitware/CMake/releases/download/v3.27.4/cmake-3.27.4.tar.gz -o cmake-3.27.4.tar.gz
curl -Z --connect-timeout 120 -m 36000 --retry 12000 --retry-delay 5 --retry-max-time 1200 -L https://github.com/Kitware/CMake/releases/download/v3.27.9/cmake-3.27.9-linux-aarch64.tar.gz -o cmake-3.27.9-linux-aarch64.tar.gz
curl -Z --connect-timeout 120 -m 36000 --retry 12000 --retry-delay 5 --retry-max-time 1200 -L https://github.com/mongodb/mongo-c-driver/releases/download/1.17.3/mongo-c-driver-1.17.3.tar.gz -o mongo-c-driver-1.17.3.tar.gz
curl -Z --connect-timeout 120 -m 36000 --retry 12000 --retry-delay 5 --retry-max-time 1200 -L https://github.com/json-c/json-c/archive/json-c-0.15-20200726.tar.gz -o json-c-0.15-20200726.tar.gz
curl -Z --connect-timeout 120 -m 36000 --retry 12000 --retry-delay 5 --retry-max-time 1200 -L https://github.com/microsoft/onnxruntime/releases/download/v1.15.1/onnxruntime-linux-aarch64-1.15.1.tgz -o onnxruntime-linux-aarch64-1.15.1.tgz
curl -Z --connect-timeout 120 -m 36000 --retry 12000 --retry-delay 5 --retry-max-time 1200 -L https://nodejs.org/download/release/v14.21.3/node-v14.21.3.tar.gz -o node-v14.21.3.tar.gz
```
pg_task需要修改postgres.c, 很容易下载失败, 预编译好, 防止制作docker image失败.    
```
cd pg14
docker cp pg:/usr/lib/postgresql/14/lib/pg_task.so ./
docker cp pg:/usr/lib/postgresql/14/lib/bitcode/pg_task ./
docker cp pg:/usr/lib/postgresql/14/lib/bitcode/pg_task.index.bc ./
docker cp pg:/usr/share/postgresql/14/extension/pg_task.control ./
docker cp pg:/usr/share/postgresql/14/extension/pg_task--1.0.sql ./
```
参考文档打包pg_tiktoken:  
- [《PostgreSQL 或PolarDB 使用插件pg_tiktoken - 使用 OpenAI tiktoken库文本向量化(tokenization) - 使用分词算法BPE - NLP 自然语言处理》](../202307/20230706_05.md)  
参考文档打包lantern_extras:  
- [《PolarDB|PG AI 功能练习插件: lantern_extras》](../202309/20230922_01.md)  
参考文档打包pg_bm25, pg_search, svector:  
- [《PostgreSQL pg_bm25(open source by paradedb)：Postgres 内部的弹性质量全文搜索 性能优于tsvector tsrank 20x》](../202310/20231016_03.md)  
参考文档打包pg_idkit:  
- [《PostgreSQL pg_idkit: 集成大量uuid方法和函数插件》](../202312/20231224_01.md)  
参考文档打包 PgDD:      
- [《PostgreSQL PgDD: PostgreSQL Data Dictionary for 开发者, 快速了解数据库概貌》](../202312/20231224_03.md)
参考文档打包 pgmq, pg_later, pg_vectorize :  
- [《PGMQ》](../202401/20240108_01.md)      
- [《pg_later》](../202401/20240108_02.md)   
- [《pg_vectorize》](../202401/20240108_03.md)   
3、准备脚本, 参考末尾`Max depth exceeded`报错, 目的是减少dockerfile步骤. 但是写成一堆脚本不太好调试, 建议先手工制作后再用Dockerfile来制作.  
```  
cd ~/pg14  
```  
```  
vi 1.sh  
```  
```  
#!/bin/bash  
set -vx  
cd /tmp  
sed -i "s@http://\(deb\|security\).debian.org@http://mirrors.aliyun.com@g" /etc/apt/sources.list  
apt-get update  
apt-get reinstall -y apt-transport-https ca-certificates  
sed -i "s@http://mirrors.aliyun.com@https://mirrors.aliyun.com@g" /etc/apt/sources.list  
apt-get update  
apt-get install -y lsb-release wget vim man  
# RUN echo "deb http://apt.postgresql.org/pub/repos/apt $(lsb_release -cs)-pgdg main" > /etc/apt/sources.list.d/pgdg.list  
echo "deb https://mirrors.tuna.tsinghua.edu.cn/postgresql/repos/apt/ $(lsb_release -cs)-pgdg main" > /etc/apt/sources.list.d/pgdg.list  
apt-get install -y gnupg2  
# RUN wget --quiet -O - https://www.postgresql.org/media/keys/ACCC4CF8.asc | apt-key add -  
wget --quiet -O - https://mirrors.tuna.tsinghua.edu.cn/postgresql/repos/apt/ACCC4CF8.asc | apt-key add -  
apt-get update  
apt-get install -y locales  
localedef -i en_US -f UTF-8 en_US.UTF-8  
apt-get install -y curl libicu-dev icu-devtools libbison-dev libfl-dev git libreadline-dev libedit-dev g++ make cmake man-db dnsutils clang libssl-dev default-jdk strace gdb libsqlite3-dev lsof blktrace  
apt-get install -y unixodbc unixodbc-dev bash-completion m4 python3-distutils python glibc-source zlib1g-dev pkg-config default-jre openjdk-17-jdk openjdk-17-jdk-headless  
apt-get install -y postgresql-14 postgresql-client-14 postgresql-server-dev-14 postgresql-doc-14  
apt-get install -y postgresql-14-dirtyread postgresql-14-extra-window-functions postgresql-14-first-last-agg postgresql-14-hll postgresql-14-hypopg  
apt-get install -y postgresql-14-ip4r postgresql-14-mysql-fdw postgresql-14-jsquery postgresql-14-ogr-fdw postgresql-14-oracle-fdw postgresql-14-pgmemcache  
apt-get install -y postgresql-14-pljava postgresql-14-pllua postgresql-14-plpgsql-check postgresql-14-plproxy postgresql-14-prefix postgresql-14-rational  
apt-get install -y postgresql-14-rdkit postgresql-14-orafce postgresql-14-pg-qualstats postgresql-14-pg-stat-kcache  
apt-get install -y postgresql-14-pg-wait-sampling postgresql-14-pgfincore postgresql-14-pgaudit postgresql-14-pgpool2 postgresql-14-pgrouting postgresql-14-pgrouting-doc  
apt-get install -y postgresql-14-pgrouting-scripts postgresql-14-pgsphere postgresql-14-pgvector postgresql-14-pldebugger postgresql-14-pointcloud postgresql-14-plr  
apt-get install -y postgresql-14-postgis-3 postgresql-14-postgis-3-scripts postgresql-14-powa powa-collector postgresql-14-q3c postgresql-14-repack  
apt-get install -y postgresql-14-rum postgresql-14-show-plans postgresql-14-similarity postgresql-14-tablelog postgresql-14-tdigest postgresql-14-wal2json  
apt-get install -y postgresql-14-tds-fdw postgresql-14-plprofiler postgresql-14-cron  
apt-get install -y pgagroal pgpool2 pgbouncer pgxnclient pgagent postgresql-plpython3-14 postgresql-14-icu-ext libpq-dev pgreplay pgbackrest pgbackrest-doc elephant-shed-pgbackrest 
echo "deb https://packagecloud.io/timescale/timescaledb/debian/ $(lsb_release -c -s) main" | tee /etc/apt/sources.list.d/timescaledb.list  
wget --quiet -O - https://packagecloud.io/timescale/timescaledb/gpgkey | gpg --dearmor -o /etc/apt/trusted.gpg.d/timescaledb.gpg  
apt-get update  
apt-get install -y timescaledb-2-postgresql-14 timescaledb-toolkit-postgresql-14 timescaledb-2-loader-postgresql-14  
wget https://packages.groonga.org/debian/groonga-apt-source-latest-bullseye.deb  
apt-get install -y -V ./groonga-apt-source-latest-bullseye.deb  
apt-get update  
apt-get install -y postgresql-14-pgdg-pgroonga
apt-get install -y postgresql-14-credcheck postgresql-14-decoderbufs postgresql-14-mimeo postgresql-14-pgmp postgresql-14-preprepare postgresql-14-prioritize postgresql-14-squeeze postgresql-14-toastinfo postgresql-14-unit pgbadger pg-auto-failover-cli postgresql-14-auto-failover net-tools apt-utils ora2pg pgloader postgresql-14-partman pg-activity 
# 包安装方式暂不支持ARM架构
# https://dev.mysql.com/downloads/repo/apt/
# cd /tmp
# wget -T 36000 -t 0 --waitretry=5 https://repo.mysql.com//mysql-apt-config_0.8.28-1_all.deb
# dpkg -i mysql-apt-config_0.8.28-1_all.deb
# apt-get update
# apt-get install -y mysql-server
# proxysql, High Performance Advanced Proxy for MySQL
# https://proxysql.com/documentation/installing-proxysql/
cd /tmp
dpkg -i proxysql_2.5.5-debian11_arm64.deb
```  
```  
vi 2.sh  
```  
```  
#!/bin/bash  
set -vx  
export ROOT_HOME=/root  
echo "#  add by digoal" >>$ROOT_HOME/.bashrc  
echo "alias rm='rm -i'" >>$ROOT_HOME/.bashrc  
echo "alias cp='cp -i'" >>$ROOT_HOME/.bashrc  
echo "alias ll='ls -larth'" >>$ROOT_HOME/.bashrc  
echo "alias mv='mv -i'" >>$ROOT_HOME/.bashrc  
echo "export PGHOME=/usr/lib/postgresql/14" >>$ROOT_HOME/.bashrc  
echo "export PATH=\$PGHOME/bin:\$PATH" >>$ROOT_HOME/.bashrc  
echo "export LD_LIBRARY_PATH=\$PGHOME/lib:/usr/local/lib:/usr/lib/aarch64-linux-gnu:\$LD_LIBRARY_PATH" >>$ROOT_HOME/.bashrc  
echo "export PGDATA=/var/lib/postgresql/14/pgdata" >>$ROOT_HOME/.bashrc  
echo "export PGUSER=postgres" >>$ROOT_HOME/.bashrc  
echo "export PGHOST=\$PGDATA" >>$ROOT_HOME/.bashrc  
echo "export PGPORT=1921" >>$ROOT_HOME/.bashrc  
echo "export PGDATABASE=postgres" >>$ROOT_HOME/.bashrc  
echo "export LC_ALL=en_US.UTF-8" >>$ROOT_HOME/.bashrc
echo "export PATH=/tmp/cmake-3.27.9/bin:\$PATH" >>$ROOT_HOME/.bashrc
echo "export MANPATH=/tmp/cmake-3.27.9/man:\$MANPATH" >>$ROOT_HOME/.bashrc
. $ROOT_HOME/.bashrc  
export PG_HOME=/var/lib/postgresql  
echo "#  add by digoal" >>$PG_HOME/.bash_profile  
echo "alias rm='rm -i'" >>$PG_HOME/.bash_profile  
echo "alias cp='cp -i'" >>$PG_HOME/.bash_profile  
echo "alias ll='ls -larth'" >>$PG_HOME/.bash_profile  
echo "alias mv='mv -i'" >>$PG_HOME/.bash_profile  
echo "export PGHOME=/usr/lib/postgresql/14" >>$PG_HOME/.bash_profile  
echo "export PATH=\$PGHOME/bin:\$PATH" >>$PG_HOME/.bash_profile  
echo "export LD_LIBRARY_PATH=\$PGHOME/lib:/usr/local/lib:/usr/lib/aarch64-linux-gnu:\$LD_LIBRARY_PATH" >>$PG_HOME/.bash_profile  
echo "export PGDATA=/var/lib/postgresql/14/pgdata" >>$PG_HOME/.bash_profile  
echo "export PGUSER=postgres" >>$PG_HOME/.bash_profile  
echo "export PGHOST=\$PGDATA" >>$PG_HOME/.bash_profile  
echo "export PGPORT=1921" >>$PG_HOME/.bash_profile  
echo "export PGDATABASE=postgres" >>$PG_HOME/.bash_profile  
echo "export LC_ALL=en_US.UTF-8" >>$PG_HOME/.bash_profile
echo "export PATH=/tmp/cmake-3.27.9/bin:\$PATH" >>$PG_HOME/.bash_profile
echo "export MANPATH=/tmp/cmake-3.27.9/man:\$MANPATH" >>$PG_HOME/.bash_profile
echo ". ~/.bash_profile" > $PG_HOME/.profile  
chown postgres:postgres $PG_HOME/.bash_profile  
chown postgres:postgres $PG_HOME/.profile  
```  
```  
vi 3.sh  
```  
```  
#!/bin/bash  
set -vx  
export ROOT_HOME=/root  
. $ROOT_HOME/.bashrc  
export TEMP_DIR=/tmp  
cd $TEMP_DIR  
git clone --depth 1 https://github.com/jaiminpan/pg_jieba  
cd $TEMP_DIR/pg_jieba  
git submodule update --init --recursive --depth 1  
mkdir build  
cd $TEMP_DIR/pg_jieba/build  
cmake -DPostgreSQL_TYPE_INCLUDE_DIR=/usr/include/postgresql/14/server ..  