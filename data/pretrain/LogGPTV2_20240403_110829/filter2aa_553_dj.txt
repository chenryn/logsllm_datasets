char headquarters[40];
...
1086
};
union data {
struct owner owncar;
struct leasecompany leasecar;
};
struct car_data {
char make[15];
int status; /* 私有为0，租赁为1 */
union data ownerinfo;
...
};
假设flits是car_data类型的结构变量，如果flits.status为0，程序将使用
flits.ownerinfo.owncar.socsecurity，如果flits.status为1，程序则使用
flits.ownerinfo.leasecar.name。
14.10.2 匿名联合（C11）
匿名联合和匿名结构的工作原理相同，即匿名联合是一个结构或联合的
无名联合成员。例如，我们重新定义car_data结构如下：
struct owner {
char socsecurity[12];
...
1087
};
struct leasecompany {
char name[40];
char headquarters[40];
...
};
struct car_data {
char make[15];
int status; /* 私有为0，租赁为1 */
union {
struct owner owncar;
struct leasecompany leasecar;
};
.
};
现在，如果 
flits 
是 
car_data 
类型的结构变量，可以用
flits.owncar.socsecurity 代替flits.ownerinfo.owncar.socsecurity。
总结：结构和联合运算符
成员运算符：.
1088
一般注释：
该运算符与结构或联合名一起使用，指定结构或联合的一个成员。如果
name是一个结构的名称， member是该结构模版指定的一个成员名，下面标
识了该结构的这个成员：
name.member
name.member的类型就是member的类型。联合使用成员运算符的方式与
结构相同。
示例：
struct {
int code;
float cost;
} item;
item.code = 1265;
间接成员运算符：->
一般注释：
该运算符和指向结构或联合的指针一起使用，标识结构或联合的一个成
员。假设ptrstr是指向结构的指针，member是该结构模版指定的一个成员，
那么：
ptrstr->member
标识了指向结构的成员。联合使用间接成员运算符的方式与结构相同。
示例：
1089
struct {
int code;
float cost;
} item, * ptrst;
ptrst = &item;
ptrst->code = 3451;
最后一条语句把一个int类型的值赋给item的code成员。如下3个表达式
是等价的：
ptrst->code   item.code    (*ptrst).code
1090
14.11 枚举类型
可以用枚举类型（enumerated type）声明符号名称来表示整型常量。使
用enum关键字，可以创建一个新“类型”并指定它可具有的值（实际上，enum
常量是int类型，因此，只要能使用int类型的地方就可以使用枚举类型）。枚
举类型的目的是提高程序的可读性。它的语法与结构的语法相同。例如，可
以这样声明：
enum spectrum {red, orange, yellow, green, blue, violet};
enum spectrum color;
第1个声明创建了spetrum作为标记名，允许把enum spetrum作为一个类型
名使用。第2个声明使color作为该类型的变量。第1个声明中花括号内的标
识符枚举了spectrum变量可能有的值。因此， 
color 
可能的值是 
red、
orange、yellow 
等。这些符号常量被称为枚举符（enumerator）。然后，便
可这样用：
int c;
color = blue;
if (color == yellow)
...;
for (color = red; color 
#include   // 提供 strcmp()、strchr()函数的原型
#include   // C99 特性
char * s_gets(char * st, int n);
enum spectrum { red, orange, yellow, green, blue, violet };
const char * colors [] = { "red", "orange", "yellow",
1093
"green", "blue", "violet" };
#define LEN 30
int main(void)
{
char choice[LEN];
enum spectrum color;
bool color_is_found = false;
puts("Enter a color (empty line to quit):");
while (s_gets(choice, LEN) != NULL && choice[0] != '\0')
{
for (color = red; color <= violet; color++)
{
if (strcmp(choice, colors[color]) == 0)
{
color_is_found = true;
break;
}
}
if (color_is_found)
1094
switch (color)
{
case red: puts("Roses are red.");
break;
case orange: puts("Poppies are orange.");
break;
case yellow: puts("Sunflowers are yellow.");
break;
case green: puts("Grass is green.");
break;
case blue: puts("Bluebells are blue.");
break;
case violet: puts("Violets are violet.");
break;
}
else
printf("I don't know about the color %s.\n", choice);
color_is_found = false;
puts("Next color, please (empty line to quit):");
1095
}
puts("Goodbye!");
return 0;
}
char * s_gets(char * st, int n)
{
char * ret_val;
char * find;
ret_val = fgets(st, n, stdin);
if (ret_val)
{
find = strchr(st, '\n');  // 查找换行符
if (find)          // 如果地址不是 NULL，
*find = '\0';     // 在此处放置一个空字符
else
while (getchar() != '\n')
continue;     // 清理输入行
}
return ret_val;
1096
}
当输入的字符串与color数组的成员指向的字符串相匹配时，for循环结
束。如果循环找到匹配的颜色，程序就用枚举变量的值与作为case标签的枚
举常量匹配。下面是该程序的一个运行示例：
Enter a color (empty line to quit):
blue
Bluebells are blue.
Next color, please (empty line to quit):
orange
Poppies are orange.
Next color, please (empty line to quit):
purple
I don't know about the color purple.
Next color, please (empty line to quit):
Goodbye!
14.11.5 共享名称空间
C语言使用名称空间（namespace）标识程序中的各部分，即通过名称来
识别。作用域是名称空间概念的一部分：两个不同作用域的同名变量不冲
突；两个相同作用域的同名变量冲突。名称空间是分类别的。在特定作用域
中的结构标记、联合标记和枚举标记都共享相同的名称空间，该名称空间与
普通变量使用的空间不同。这意味着在相同作用域中变量和标记的名称可以
相同，不会引起冲突，但是不能在相同作用域中声明两个同名标签或同名变
1097
量。例如，在C中，下面的代码不会产生冲突：
struct rect { double x; double y; };
int rect; // 在C中不会产生冲突
尽管如此，以两种不同的方式使用相同的标识符会造成混乱。另外，
C++不允许这样做，因为它把标记名和变量名放在相同的名称空间中。
1098
14.12 typedef简介
typedef工具是一个高级数据特性，利用typedef可以为某一类型自定义名
称。这方面与#define类似，但是两者有3处不同：
与#define不同，typedef创建的符号名只受限于类型，不能用于值。
typedef由编译器解释，不是预处理器。
在其受限范围内，typedef比#define更灵活。
下面介绍typedef的工作原理。假设要用BYTE表示1字节的数组。只需像
定义个char类型变量一样定义BYTE，然后在定义前面加上关键字typedef即
可：
typedef unsigned char BYTE;
随后，便可使用BYTE来定义变量：
BYTE x, y[10], * z;
该定义的作用域取决于typedef定义所在的位置。如果定义在函数中，就
具有局部作用域，受限于定义所在的函数。如果定义在函数外面，就具有文