executing foreign code. In other words, legitimate control
ﬂow transfers in the target program cannot allow the at-
tacker to alter the memory protection of a speciﬁc memory
region. Those assumptions cover most practical scenarios
of attacks, without any unrealistic limits. We also assume
that traditional arbitrary code execution defenses are live
on the OS, such as ASLR and DEP. This work focuses on
vcall protection, which is pertinent to forward-edge control
transfers. We assume that other control ﬂow transfers, in-
cluding non-control-data attacks, are protected and cannot
be used to redirect the ﬂow of vcalls.
We assume that the binaries adhere to the Itanium ABI
(see Appendix C); analyzing non-compliant or obfuscated
binaries is outside the scope of this work. We assume the bi-
naries are stripped from auxiliary information, such as debug
and symbol information, including the C++ RTTI (see Ap-
pendix D), and we do not assume any particular optimiza-
tion level. While these assumptions complicate our analysis,
we believe it is unreasonable to assume the presence of side
information when dealing with stripped binaries. The anal-
ysis performed in this paper assumes knowledge of function
entry points in the binaries. We depend on Dyninst [15] in
this regard, which has shown outstanding identiﬁcation ac-
curacy of function entry points in stripped binaries [20, 40],
outperforming various well-established static analysis tools.
Finally, various constructs presented in this paper require
instruction-level analysis that depends on the semantics of
the instruction set being parsed. Therefore, we tailor our
discussion in this paper to x86 32 (e.g., call parameters
passed on stack instead of in registers as in x86 64). Nev-
ertheless, the approach itself does not put any assumptions
on the underlying architecture and can be implemented for
other instruction sets without an issue.
3.2 Vtable Attacks
By exploiting a memory access bug (e.g., use-after-free[2]),
an attacker can launch vtable attacks and achieve arbitrary
code execution by overwriting a C++ object’s memory with
contents of his or her choice (e.g., via heap spraying [12]).
The attacker can inject a fake vtable or perhaps redirect
the object’s vptr to an existing vtable. Without loss of
generality, vtable attacks in C++ can be divided into three
categories [17, 22, 27, 30, 43]:
1) Vtable corruption. This is a legacy attack, where legit-
imate vtable contents are overwritten. The attack is
prevented by all major compilers by storing the vtables
in a read-only memory region.
2) Vtable injection. Here, the attacker ﬁrst injects a fake
vtable into memory, then points the vtable pointer of
a hijacked object to the injected vtable. The injected
vtable can therefore point to arbitrary functions or
gadgets in the executable memory of the process.
3) Vtable reuse. This attack operates the same way as a
vtable injection attack, except that the attacker does
not inject any counterfeit vtables in memory. Instead,
the attacker reuses already existing vtables in the pro-
cess memory.
While the state-of-the-art binary vtable defenses reduce
the vtable attack surface, they do not extract suﬃcient se-
mantics from the binaries, and therefore enforce imprecise
policies that allow a very liberal number of target functions
per vcall site. To address this limitation, we introduce VCI,
a binary rewriting system that fully protects against vtable
corruption, injection, and signiﬁcantly reduces the attack
surface of vtable reuse in C++ binaries. In the following, we
give an overview of how VCI operates and give a simpliﬁed
example of a retroﬁtted program and the integrity policy
enforced by VCI.
3.3 Overview of VCI
Figure 2: Overview of VCI. The input to VCI is a
binary ﬁle (executable or library), and the output
is a binary ﬁle retroﬁtted with integrity checks and
the VCI integrity enforcement library (libvci).
Figure 2 outlines the workﬂow of VCI. It operates as fol-
lows: ﬁrst, it statically analyzes the binary and extracts all
vtables and constructors.
It then reconstructs (partially)
class layouts and hierarchies. Then, it identiﬁes all vcalls in
the binary. VCI then propagates the identiﬁed class types
to all vcall sites, using backward slicing and inter-procedural
data ﬂow analysis. This produces a set of legitimate target
class types and their corresponding vtables for each vcall.
When VCI fails to resolve all target class types of a vcall,
it utilizes the inferred hierarchies and any known targets for
the vcall to construct a set of class types that the vcall may
be invoked on. As our experiments show, this is signiﬁcantly
more precise than prior works which either liberally permit-
ted any class type to be used at any vcall site, or any class
type where the vcall oﬀset is valid. Speciﬁcally, VCI con-
structs and enforces the mapping: F : vcall×class → vtable
by instrumenting checks at each vcall site to test if the vcall
target class is one of the valid target class types for that
vcall.
4. DESIGN AND IMPLEMENTATION
4.1 Identifying Virtual Tables
To extract vtables, VCI scans the binary for assembly
sites that store an address (immediate value) into memory,
where the address resides in a read-only memory region, and
the words (pointer-size sequence of bytes) at positive oﬀsets
of the address are pointers to functions in the code section
(see Algorithm A.1). For each such assembly site, VCI starts
with an empty vtable, and scans the corresponding memory
region, starting at the stored address, one word at a time.
Each word is matched against a set of all function addresses
in the binary.
If a match is found, the word is added to
the vtable, otherwise, the algorithm proceeds on to the next
assembly site. According to the Itanium ABI, the vtable
address referenced by an object’s vptr (i.e., the entry point
of the vtable as seen by the object) is 1) pointer aligned,
and 2) points to the beginning of the virtual function point-
ers array in the vtable. Finally, the algorithm returns the
extracted vtable. Note that the algorithm identiﬁes vtables
143separately. For example, it will identify two separate vtables
for class C in Figure 1; the VTT of C is populated when VCI
reconstructs the class layout.
While VCI may identify false vtables, such as C-style ar-
rays of function pointers (jump tables) stored in a read-only
region, the proposed algorithm is sound. It does not miss
any real vtable in the binary (no false negatives). This is an
important property as missing a legitimate vtable can result
in an incorrect policy or misdetection of attacks. Note that
C-style jump tables that are misidentiﬁed as vtables do not
satisfy later stages of the analysis (e.g., no corresponding
constructors), and their calling convention does not gener-
ally match that of virtual functions (see Sections 4.2 and 4.4).
Overall, overestimation of vtables aﬀects only the precision
of VCI rather than its soundness, by increasing the number
of potential targets of a vcall.
4.2 Identifying Constructors
Each extracted vtable corresponds to one class that de-
clares virtual functions. Each such class will have at least
one constructor and one virtual function declaration. To ex-
tract constructors, VCI applies Algorithm A.2. It searches
the code section for functions that store a pointer to a vtable
at the memory location pointed at by this, i.e., the ﬁrst en-
try in an object’s memory. This is done by searching for
a function that contains an assembly site that stores an
immediate value in memory, where 1) the immediate value
matches the address of one of the extracted vtables; 2) the
destination expression has zero displacement; and 3) the des-
tination expression is a memory location pointed at by the
ﬁrst argument to the function, e.g., mov 0x8(%ebp),%eax;
movl $0x9b0,(%eax). Once identiﬁed, the vtable is scanned
for occurrence of a pointer to that same function. If a pointer
to the function is not found in the vtable, the function is
deemed a constructor. Note that C++ does not allow virtual
constructors, therefore constructors cannot have entries in
the vtable. Similarly, inlined constructors are identiﬁed by
relaxing the ﬁrst argument condition. In this case, the store
instruction that writes the vtable address in the object’s
memory is marked as a construction point.
4.3 Inferring Class Layouts and Hierarchies
When a derived class inherits from a base class, the con-
structor of the derived class calls the base constructor, pass-
ing in the this pointer of the derived class after applying
any necessary pointer adjustments (in case of multiple in-
heritance). The same semantics are also applied when con-
structing member objects.
VCI infers class layouts that consist of oﬀsets to polymor-
phic member objects and base subobjects, and oﬀsets to vta-
bles (the VTT in case of multiple inheritance). The oﬀsets
are computed relative to the class this ptr. We collectively
refer to member objects and base subobjects as subelements.
We deﬁne each subelement by the tuple: (cid:104)cls, offset,
dst, deref(cid:105), where cls is the containing class, offset is
the subelement’s oﬀset from the this pointer of cls, and
dst is the corresponding subelement’s class. deref is a ﬂag
indicating whether the subelement has to be dereferenced
before accessing, e.g., if a member is a pointer to an object,
where in this case the class stores only the subelement’s this
pointer instead of the subelement itself.
Algorithm A.3 outlines the steps taken to infer the layout.
For each class, VCI infers the class layout by, ﬁrst, search-
ing the instructions of the class constructor for assembly call
sites that invoke a constructor. Then, for each identiﬁed call
site, it extracts and analyzes the arguments to the call site to
identify the this pointer of the subelement’s constructor. It
then computes the oﬀset of the subelement’s this pointer to
the class this pointer. Recall that the this pointer points
to the address at which the vtable pointer is stored in an ob-
ject’s memory. VCI computes the oﬀset by analyzing the ad-
justments performed on the this pointer before calling the
subelement’s constructor. For example, mov 0x8(%ebp),%
eax; add 0x4,%eax; mov %eax,(%esp); call sub_ctor()
; constructs a subelement at oﬀset 0x4 from the this pointer
of the class. This results in an expression of the form this
+ oﬀset, where this is the class this pointer, and oﬀset
is the distance to the subelement’s this pointer. Finally,
VCI checks if the subelement needs to be dereferenced be-
fore accessing by checking if the this pointer passed to the
subelement’s constructor is stored in memory after the call
to the subelement’s constructor.
Similarly, VCI populates the class VTT by identifying the
assembly site that stores pointers to vtables, relative to the
this pointer of the class. For example, mov 0x8($ebp),%eax
; mov $0x848,(%eax); add $0x8,%eax; mov $0x88c,(%eax
); corresponds to a VTT of two entries 0x848 at oﬀset 0 and
0x88c at oﬀset 0x8. Note that the ﬁrst entry of the VTT is
the class’ vtable itself.
To reconstruct inheritance relationships between polymor-
phic classes, VCI needs to diﬀerentiate between calls to a
base constructor and calls to construct member objects. Ac-
cording to the ABI, in a derived class, its virtual base class’
subobjects are constructed before its member objects.
In
addition, the compiler has to populate the VTT of the class
before constructing its member objects. In other words, all
calls to constructors that 1) take the derived class’ this
pointer (adjusted) as the top argument on the stack, and
2) occur before storing the vtable address at a zero oﬀset
from the this pointer in the object’s memory, are calls to
base constructors. By identifying this pattern in the assem-
bly of constructors, VCI constructs the “is-a” relationship
among the identiﬁed polymorphic classes. Note that the ac-
tual oﬀsets in the VTT in the binary must match the oﬀsets
VCI extracted for inherited classes. Additionally, the sound-
ness of the inferred hierarchy follows from the soundness of
VCI’s vtable identiﬁcation (no FNs). We do not attempt
to construct the full class hierarchy that includes polymor-
phic and non-polymorphic classes, which is a known hard
problem [16, 23, 26]. VCI uses the identiﬁed inheritance
hierarchy to augment its policy when semantic gaps hinder
the identiﬁcation of all class types that a vcall operates on
(see Section 4.6).
4.4 Identifying Virtual Calls
To extract call sites that invoke virtual functions, i.e., vcall
sites, VCI scans the binary for indirect call sites that reﬂect
the behavior of virtual function dispatches. That is, the in-
direct call target is computed by ﬁrst dereferencing a pointer
(the vtable pointer), then adjusting the resulting address to
pick an entry of the vtable by adding a non-negative con-
stant oﬀset to it, and ﬁnally dereferencing the ﬁnal adjusted
address to retrieve the address of the target function.
In
addition, the same expression used to dereference the vtable
(the this pointer) is passed as the ﬁrst argument (top of
stack) to the indirect call. Note that the oﬀset used in a vcall
site is not a target of attacks as it is always hardcoded in the
assembly as an immediate value or a displacement. However,
144attackers can eﬀectively change the oﬀset by modifying the
vtable address (vptr) referenced by the this pointer.
Though a vtable and a jump table (an array of function
pointers) share common structure, the semantics for invok-
ing virtual functions are diﬀerent from those for dispatching
functions from a jump table. To dispatch a function pointer
from a jump table, the jump table is directly indexed rather
than oﬀset and dereferenced. For example, given an index in
%ecx and a jump table stored at address 0xa034, the target
function from the jump table is invoked by: call 0xa034(,%
ecx,4).2 This dissimilarity in how the indirect call target
is computed enables VCI to ﬁlter out any spurious jump
tables that might have been mislabeled as vtables by Algo-
rithm A.1.
This approach in itself does not yield FPs (false posi-
tives, i.e., incorrectly identifying a call as a vcall) for ABI-
compliant binaries. However, it might incorrectly identify
some speciﬁc C constructs as vcalls in mixed C/C++ bina-
ries. Besides that, special compiler rearrangements and non-
standard calling conventions that may not be handled by the
implementation can result in FNs (false negatives, i.e., miss-
ing valid vcalls). We evaluate the identiﬁcation accuracy of
VCI in Section 5.1 and discuss vcall-like C constructs in Sec-
tion 6.3.
4.5 Class Type Propagation and Pairing
Intra-Procedural Analysis
4.5.1
VCI implements a custom, slicing-based, intra-procedural
analysis algorithm (illustrated in Algorithm A.4) to con-
struct intra-procedural bindings between classes and (v)calls.
It starts by analyzing the assembly sites at which calls are
invoked. For each call site, it extracts a backward slice,
starting at the assembly store point of each argument to the
call site and ending at the entry point to the procedure. VCI
analyzes the slice and decides whether and what classes the
argument depends on, i.e., there is data dependence between
the call parameter and one or more this pointers deﬁned
within the same procedure.
Each backward slice is a Program Dependency Graph
(PDG) constructed via Value-Set Analysis (VSA) [4]. Nodes
in the PDG correspond to program constructs (assignment
expressions) and edges correspond to data and control de-
pendencies between the assignments. Since there is no no-
tion of variables at the binary level, VSA extracts variable-
like abstractions using the semantics of the instructions.
Due to the multi-assignment (multi-source, multi-destination)
nature of assembly instructions, the produced slices are of-
ten cluttered with irrelevant expressions and dependency
paths [36]. To overcome this, VCI analyzes the slice by
traversing backwards all paths in the PDG from the exit
node (i.e., the call argument) to each entry node. For each
path, VCI traces (backwards) the data ﬂow of the argument
through memory and registers, till it reaches a construction
site (the deﬁning constructor) or an entry node. During
this, VCI also maintains a list of all encountered adjust-
ments (via oﬀsets and displacements) that were performed
on the parameter expression, in their order of execution. See
Figure B.2 for a example snippet and its corresponding PDG
generated by VCI.
2Code generated by both GCC and Clang with -O1, -O2, and
-O3. For -O0, GCC and Clang emitted: mov %ecx,%eax;
mov 0xa034(,%eax,4),%eax; call *%eax, which also does
not satisfy the semantics of a vcall.
If such ﬂow exists, then a data dependency is present be-
tween the call parameter and that construction site (and its
corresponding class). In this case the parameter type is re-
solved by pairing it with the eﬀective class resulting from
the corresponding construction site class after applying any
this pointer adjustments. If the resolved parameter is the
ﬁrst parameter of the vcall (i.e., the this pointer), VCI re-
solves the vcall target using the resolved parameter’s vtable
and the vcall oﬀset. It then adds an edge to the CFG be-
tween the vcall and the resolved virtual function address.
If there is no data ﬂow, then the path is ignored. Finally,
if a ﬂow exists but the deﬁning constructor was not found,
that could mean either the deﬁnition point is in a diﬀerent
procedure or there is a semantics gap, which we discuss in
the following sections.
Inter-Procedural Analysis
4.5.2
VCI performs inter-procedural analysis by recursively prop-
agating the this deﬁnitions and parameter type informa-
tion of each procedure down the CFG, through returns and
successor call sites. The analysis traces the this point-
ers of both class objects and members as identiﬁed in Sec-
tion 4.3. Speciﬁcally, class types are propagated across func-
tion boundaries by checking the equivalence of the expres-
sions of the arguments pushed on the stack at the call site
(in the caller function) with those loaded from the stack in
the preamble of the callee. For example, %edx and 0x8(%ebp
) in the following snippet are equivalent: foo: push %edx
; call bar; and bar: mov 0x8(%ebp),%eax. For returns,
class types are recursively propagated across all procedures
exit points (function returns) if there is a data dependency
between the exit point and the this pointers of the objects
referenced in the function body.
Vcall Target Resolution. For vcalls, VCI attempts to re-
solve the vcall target by identifying data ﬂows from the in-
coming this pointer expressions on the stack of the enclosing
(parent) procedure, to the arguments of the vcall. Similar
to Section 4.5.1, this is done by pairing arguments to in-
coming (adjusted) class types via reachability analysis over
a backward slice starting at each argument to the vcall and
ending at the entry of the enclosing procedure. If the ﬁrst
argument (i.e., the this pointer the vcall is invoked on) type
is successfully resolved, VCI ﬁnds the corresponding virtual
function address in the corresponding class’ vtable, at the
oﬀset that appears in the vcall site, and adds an edge to
the CFG between the vcall and the virtual function address.
The algorithm stops when the CFG stops changing.
Due to semantic gaps (see Section 6), it is possible that
VCI fails to resolve all deﬁnition points of a vcall’s this
pointer, resulting in potentially missing some valid vcall
targets. This divides vcalls into three categories: 1) fully
resolved vcalls, where all deﬁnition points were success-
fully paired; 2) partially resolved vcalls, where some but
not all deﬁnition points were resolved; and 3) unresolved
vcalls where all deﬁnition points were not paired with any
type. In the following section, we discuss how VCI generates
and enforces its policy such that it covers all the three cases,
yet be as strict as possible.
4.6 Policy Generation and Enforcement
VCI generates the following policy, based on vcall target
resolution results:
1) For fully resolved vcalls, all legit targets were success-
145fully identiﬁed, and only those targets are considered
valid.
2) For partially resolved vcalls, ﬁnd the common base
classes among the identiﬁed targets and all child classes
that inherit from those common bases (including the
identiﬁed targets). Assume that all vtable functions
at the vcall oﬀset in those classes are valid targets.
3) For unresolved vcalls, i.e., no targets were identiﬁed
for the vcall, assume that all vtable functions at the
same vcall oﬀset are valid targets (the same integrity
policy applied by Prakash et al. [30]).
The policy is implemented by constructing the mapping
F : vcall × class → vtable. VCI stores in the binary a read-
only set C of the extracted class types and their inferred
layouts, one class for each nonempty vtable. Each class is
assigned a unique ID. Then, before each vcall site v, VCI
aggregates a set of IDs Lv of all the class types that v can
be invoked on, based on the three aforementioned policy
cases (for fully, partially, and unresolved vcalls).
It then
injects code in the binary that enforces F by checking for
the following:
the class c(cid:48) accessed by the vcall.
1) There is a class c in C with the same vtable address of
2) The ID of c belongs to the valid IDs Lv, i.e., cID ∈ Lv.
3) The class layout of c(cid:48) matches the layout of c.
If any of the conditions is not met, the execution is aborted
and an alarm is raised. Otherwise, the vcall is dispatched.
Note that no policy is enforced for static (direct) call sites,
e.g., call 660, since they do not pose a threat under our
threat model. In addition, checking the class layout is im-
portant in order to detect reuse attacks that modify the vptr
of an object to point to a diﬀerent vtable than the actual