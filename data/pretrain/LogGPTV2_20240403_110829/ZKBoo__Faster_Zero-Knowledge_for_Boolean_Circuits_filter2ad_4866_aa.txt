title:ZKBoo: Faster Zero-Knowledge for Boolean Circuits
author:Irene Giacomelli and
Jesper Madsen and
Claudio Orlandi
ZKBoo: Faster Zero-Knowledge  
for Boolean Circuits
Irene Giacomelli, Jesper Madsen, and Claudio Orlandi, Aarhus University
 https://www.usenix.org/conference/usenixsecurity16/technical-sessions/presentation/giacomelli
This paper is included in the Proceedings of the 25th USENIX Security SymposiumAugust 10–12, 2016 • Austin, TXISBN 978-1-931971-32-4Open access to the Proceedings of the 25th USENIX Security Symposium is sponsored by USENIX ZKBoo: Faster Zero-Knowledge for Boolean Circuits
Irene Giacomelli
Jesper Madsen
Computer Science Department, Aarhus University
Claudio Orlandi
Abstract
In this paper we describe ZKBoo1, a proposal for practi-
cally efﬁcient zero-knowledge arguments especially tai-
lored for Boolean circuits and report on a proof-of-
concept implementation. As an highlight, we can gen-
erate (resp. verify) a non-interactive proof for the SHA-1
circuit in approximately 13ms (resp. 5ms), with a proof
size of 444KB.
Our techniques are based on the “MPC-in-the-head”
approach to zero-knowledge of Ishai et al. (IKOS), which
has been successfully used to achieve signiﬁcant asymp-
totic improvements. Our contributions include:
◦ A thorough analysis of the different variants of IKOS,
which highlights their pros and cons for practically rele-
vant soundness parameters;
◦ A generalization and simpliﬁcation of their approach,
which leads to faster Σ-protocols (that can be made
non-interactive using the Fiat-Shamir heuristic) for state-
ments of the form “I know x such that y = φ (x)” (where
φ is a circuit and y a public value);
◦ A case study, where we provide explicit protocols,
implementations and benchmarking of zero-knowledge
protocols for the SHA-1 and SHA-256 circuits.
1
Introduction
Since their introduction in the 80s [16], zero-knowledge
(ZK) arguments have been one of the main building
blocks in the design of complex cryptographic protocols.
However, due to the lack of practically efﬁcient solutions
for proving generic statements, their application in real-
world systems is very limited. In particular, while there
is a large body of work considering the efﬁciency of ZK
protocols for algebraic languages (following the seminal
work of Schnorr for discrete logarithm [26]), things are
quite different when it comes to general purpose ZK.
1Sounds like Peekaboo.
A notable exception is the recent
line of work
on succinct non-interactive arguments of knowledge
(SNARKs) (e.g. Pinocchio [23], libsnark [4], etc.).
SNARKs are an extremely useful tool when the size of
the proof and the veriﬁcation time matters: SNARKs are
less than 300 bytes and can be veriﬁed in the order of
5ms, which makes them perfect for applications such as
ZeroCash [3]. However, on the negative side, SNARKs
require very large parameters (which must be generated
in a trusted way) and the time to generate proofs are pro-
hibitive for many applications. As an example, the run-
ning time of the prover for generating a proof for SHA-
1 is in the order of 10 seconds. There is an inherent
reason for this inefﬁciency: current SNARKs technol-
ogy requires to perform expensive operations (in pairing
friendly groups) for each gate in the circuit.
Jawurek et al. [21] proposed a different approach to
efﬁcient ZK, namely using garbled circuits (GC). Using
GC, it is possible to prove any statement (expressed as
a Boolean circuit) using only a (low) constant number
of symmetric key operations per gate in the circuit, thus
decreasing the proving time by more than an order of
magnitude. On the ﬂip-side, GC-based ZK are inher-
ently interactive, and they still require a few public-key
operations (used for implementing the necessary oblivi-
ous transfers).
In this paper we describe efﬁcient ZK protocols for cir-
cuits based on the “MPC-in-the-head” paradigm of Ishai
et al. [19] (IKOS). In IKOS, a prover simulates an MPC
protocol between a number of “virtual” servers (at least
3) and then commits to the views and internal state of the
individual servers. Now the veriﬁer challenges the prover
by asking to open a subset of these commitments. The
privacy guarantee of the underlying MPC protocol guar-
antees that observing the state of a (sufﬁciently small)
subset of servers does not reveal any information. At the
same time, the correctness of the MPC protocol guaran-
tees that if the prover tries to prove a false statement,
then the joint views of some of the server must nec-
USENIX Association  
25th USENIX Security Symposium  1069
essarily be inconsistent, and the veriﬁer can efﬁciently
check that. By plugging different MPC protocols into
this approach, [19] shows how to construct ZK protocols
with good asymptotic properties. However, to the best
of our knowledge, no one has yet investigated whether
the IKOS approach can be used to construct practically
efﬁcient ZK protocols. This paper is a ﬁrst step in this
direction.
Structure of the paper.
In Section 3 we describe the
different variants of the IKOS framework. IKOS presents
two strategies to achieve a negligible soundness error: ei-
ther repeating a passive secure MPC protocol with few
parties, or using a single instance of an active secure
MPC protocol with a large number of parties. While
IKOS only provides asymptotic estimates of the sound-
ness parameters, we concretely estimate the soundness
of IKOS with different kind of MPC protocols and show
that, if one is interested in a (reasonable) soundness er-
ror of 2−80, then the version of IKOS without repetition
does not (unfortunately) lead to any practical advantage.
Then (in Section 4) we present a new interpretation of the
IKOS framework when instantiated with a 2-private 3-
party version of the GMW [15] protocol, where each pair
of parties is connected with an OT-channel. We observe
that in general the OT-channels can be replaced with ar-
bitrary 2-party functionalities. Since those ideal func-
tionalities do not have to be implemented using cryp-
tographic protocols (remember, they are executed be-
tween pair of virtual servers in a simulation performed by
the prover), this increases the degrees of freedom of the
protocol designer and allows to construct more efﬁcient
MPC protocols (or, as we prefer to call them, function
decompositions) that can be used for constructing ZK
protocols. (Note that this class of protocol has not been
studied before, since it does not lead to any advantage
in the standard MPC setting, and therefore we expect fu-
ture work to improve on our approach by designing bet-
ter MPC protocols for this special setting.) All resulting
protocols are Σ-protocols (3-move honest-veriﬁer zero-
knowledge protocols with special soundness) which can
therefore be made non-interactive in the random oracle
model using the Fiat-Shamir heuristic.
Finally (in Section 5) we describe how our approach
can be used to construct very efﬁcient ZK protocols for
proving knowledge of preimages for SHA-1 and SHA-
256. The resulting proofs are incredibly efﬁcient:
the
veriﬁcation time is essentially the same as the veriﬁca-
tion time for SNARKs, but the prover runs approximately
1000 times faster. On the negative side the size of our
proofs scales linearly with the circuit size, but we believe
that in some applications this is a desirable trade-off.
Recent Related Work. Ranellucci et al. [25] proposed
a general-purpose public-coin ZK protocol which can be
based on any commitment scheme. The asymptotic per-
formances are the same as ours (both communication and
computation complexity are linear in the circuit size) but
the concrete constants are higher (e.g., the proofs are ap-
proximately 3 times larger and computation more than
10 times slower). Hazay et al. [18] show how to extend
the IKOS technique to the case of two-party MPC proto-
cols (2PC) with application to adaptive ZK protocols. It
is an open question whether their approach might lead to
concrete efﬁciency improvements.
2 Preliminaries
Standard notations: For an integer n, we write [n] =
{1,2, . . . ,n} and, given A ⊆ [n], |A| denotes the cardi-
nality of A. We say that a function ε is negligible in
n, ε(n) =negl (n), if for every polynomial p there ex-
ists a constant c such that ε(n)  c.
Given two random variables X ad Y with support S,
the statistical distance between X and Y is deﬁned as
SD(X,Y ) = 1
2 ∑i∈S | Pr[X = i ]−Pr[Y = i ]|. Two families
X = {Xk} and Y = {Yk}, k ∈ {0,1}∗ of random variables
are said to be statistically indistinguishable if there exists
a negligible function ε(·) such that for every k ∈ {0,1}∗,
SD(Xk,Yk) ≤ ε(|k|). They are said to be computationally
indistinguishable if for every efﬁcient non-uniform dis-
tinguisher D there exists a negligible function ε(·) such
that for every k ∈ {0,1}∗, | Pr[D(Xk) =1] − Pr[D(Yk) =
1] ≤ ε(|k|).
2.1 Multi-Party Computation (MPC)
Consider a public function f : ({0,1}k)n → {0,1}(cid:27) and
let P1, . . . ,Pn be n players modelled as PPT machines.
Each player Pi holds the value xi ∈ {0,1}k and wants to
compute the value y = f (x) with x = (x1, . . . ,x n) while
keeping his input private. The players can communicate
among them using point-to-point secure channels CHi, j
in the synchronous model. These can be classical se-
cure channels (i.e. encrypted channels) or more powerful
channels (e.g. OT-channel [11, 24]). If necessary, we also
allow the players to use a broadcast channel. To achieve
their goal, the players jointly run a n-party MPC proto-
col Π f . The latter is a protocol for n players that is spec-
iﬁed via the next-message functions:
there are several
rounds of communication and in each round the player
Pi sends into the channel CHi, j (or in the broadcast chan-
nel) a message that is computed as a deterministic func-
tion of the internal state of Pi (his initial input xi and his
random tape ki) and the messages that Pi has received
in the previous rounds of communications. The view of
the player Pj, denoted by ViewPj (x), is deﬁned as the
1070  25th USENIX Security Symposium 
USENIX Association
concatenation of the private input x j, the random tape
k j and all the messages received by Pj during the ex-
ecution of Π f . Each channel CHi, j deﬁnes a relation of
consistency between views. For instance, in a plain chan-
nel two views are consistent if the messages reported in
ViewPj (x) as incoming from Pi are equal to the outgoing
message implied by ViewPi(x) (i (cid:31)= j). More powerful
channels (such as OT channels), are deﬁned via some
function ϕ and we say that two views are consistent if
the view of the sender implies an input x to the channel
and the view of the receiver implies an input y and con-
tains an output z such that z = ϕ(x,y). For instance, in
OT channels x = (m0,m1), y is a bit and z = my.
Finally, the output y can be computed from any of the
view ViewPi(x), i.e. there are n functions Π f ,1, . . . ,Π f ,n
such that y = Π f ,i(ViewPi(x)) for all i ∈ [n]. In order to
be private, the protocol Π f needs to be designed in such
a way that a curious player Pi can not infer information
about x j with j (cid:31)= i from his view ViewPi(x). An addi-
tional security property, robustness, assures that a cheat-
ing player Pi (who may not follow the instructions in the
protocol) can not mislead the honest players, who still
compute the correct output y. More precisely, we have
the following deﬁnition.
Deﬁnition 2.1.
• (Correctness) We say that the pro-
tocol Π f realizes f with perfect (resp. statistical)
correctness if for any input x = (x1, . . . ,x n), it holds
that Pr[ f (x) (cid:31)= Π f ,i(ViewPi(x)) ] = 0 (resp. negligi-
ble) for all i ∈ [n]. The probability is over the choice
of the random tapes ki.
• (Privacy) Let 1 ≤ t < n, the protocol Π f has perfect
t-privacy if it is correct and for all A ⊆ [n] satisfy-
ing |A| ≤ t there exists a PPT algorithm SA such that
the joint views (ViewPi(x))i∈A have the same distri-
bution as SA( f , (xi)i∈A,y), for all x = (x1, . . . ,x n).
statistical
We will
(resp. com-
putational)
the two distributions
SA( f , (xi)i∈A,y) and (ViewPi(x))i∈A are statistically
(resp. computationally) indistinguishable.
speak about
t-privacy if
• (Robustness) Let 0 ≤ r < n, the protocol Π f has
perfect (resp. statistical) r-robustness if it is correct
and for all A ⊆ [n] satisfying |A| ≤r even assuming
that all the players in A have been arbitrarily cor-
rupted, then Pr[ f (x) (cid:31)= Π f ,i(ViewPi(x)) ] = 0 (resp.
negligible) for all i ∈ Ac.
3 Zero Knowledge
In this section we recall the notion of zero-knowledge
and Σ-protocols, we review the IKOS construction [19]
for zero-knowledge, and we discuss different possible in-
stantiations.
3.1 Deﬁnitions
Let R ⊆ {0,1}∗ ×{0,1}∗ be a binary relation represent-
ing some computational problem (e.g. R = {(y,x)|y =
SHA-256(x)}). We will interpret R as a binary func-
tion from {0,1}∗ ×{0,1}∗ to {0,1} (i.e. R(y,x) = 1 ⇔
(y,x) ∈ R) and we will assume that:
• ∀ y and ∀ x, R(y,x) can be computed in polynomial-
time by a probabilistic Turing machine;
• there exists a polynomial p such that if R(y,x) =1
then the length of x is less or equal to p(|y|).
Such relation is called NP relation. With L we indi-
cate the set of the yes-instances of the relation R, i.e.
L = {y|∃x s.t. R(y,x) =1}.
An argument for L is a cryptographic protocols be-
tween two players: the prover P and the veriﬁer V with
the following features. We assume that both P and V
are probabilistic polynomial time (PPT) machines and
that they know y, an instance of the relation R. The sit-
uation is that P wants to convince V that y ∈ L. This
clearly makes sense only if the prover has some advan-
tage over the veriﬁer. Thus, we allow the prover to have
an extra private input (for example P knows x such that
R(y,x) = 1). The protocol is described by instructions
for the players and has different rounds of communi-
cation. At the end of the protocol, the veriﬁer outputs
accept if he is convinced or reject otherwise. If y ∈ L,
we require that an honest veriﬁer convinces an honest
prover with probability 1 (the protocol is complete). On
the other hand, we say that the protocol has soundness
error ε if for all y /∈ L Pr[V (y) =accept ] ≤ ε, no mat-
ter what the prover does. In other words, ε is an upper-
bound of the probability that a cheating prover makes an
honest veriﬁer output accept for a false instance.
However, in many interesting cryptographic applica-
tions, the language L is trivial and therefore the sound-
ness property gives absolutely no guarantees: for every
string y there exist a x s.t., y =SHA-256(x). In this case
we need a stronger property, namely proof-of-knowledge
(PoK), which informally states that the veriﬁer should
output accept only if the prover knows the value x.
Finally, ZK protocols get their name from the zero-
knowledge property: Here, we want to express the re-
quirement that whatever strategy a cheating veriﬁer fol-
lows, he learns nothing except for the truth of the
prover’s claim. In particular, he can not obtain informa-
tion about the private input of P. This is captured using
the simulation-paradigm and saying that the messages
received by the veriﬁer during the protocol can be efﬁ-
ciently simulated only knowing the public input y. More
precisely, we have the following requirement: for any
corrupted PPT veriﬁer V ∗, there is a PPT algorithm S
(the “simulator”) with access to V∗ such that the output
USENIX Association  
25th USENIX Security Symposium  1071
of S(y) and the real conversation between P and V∗ on
input y are indistinguishable.
In the rest of the paper we will be concerned with
public-coin two-party protocols with a speciﬁc commu-
nication pattern known as Σ-protocols.
Deﬁnition 3.1 (Σ-protocol). A protocol ΠR between two
players P and V is a Sigma Protocol for the relation R if
it satisﬁes the following conditions:
• ΠR has the following communication pattern:
1. (Commit) P sends a ﬁrst message a to V ;
2. (Challenge) V sends a random element e to P;
3. (Prove) P replies with a second message z.
• (Completeness) If both players P and V are honest
and y ∈ L, then Pr[ (P,V )(y) =accept ] = 1;
• (s-special soundness) For any y and any set of s ac-
cepting conversations {(a,ei,zi)}i∈[s] with ei (cid:26)= e j if
i (cid:26)= j, a witness x for y can be efﬁciently computed;
• (Special honest-veriﬁer ZK) There exists a PPT
simulator S such that on input y ∈ L and e outputs
a triple (a(cid:25),e,z(cid:25)) with same probability distribution
of real conversations (a,e,z) of the protocol.
Prover
Veriﬁer
commitment a
challenge e
openings z
Figure 1: The communication pattern of a Σ-protocol.
Σ-protocols have several properties (e.g. parallel com-
position, witness indistinguishability) that make them a