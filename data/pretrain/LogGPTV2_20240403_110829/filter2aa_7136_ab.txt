```javascript
// bad：未进行输入验证
Router.get("/vulxss", (req, res) => {
	const { txt } = req.query;
	res.set("Content-Type", "text/html");
	res.send({
		data: txt,
	});
});
// good：按数据类型，进行输入验证
const Router = require("express").Router();
const validator = require("validator");
Router.get("/email_with_validator", (req, res) => {
	const txt = req.query.txt || "";
	if (validator.isEmail(txt)) {
		res.send({
			data: txt,
		});
	} else {
		res.send({ err: 1 });
	}
});
```
*关联漏洞：纵深防护措施 - 安全性增强特性*
#### 1.2 执行命令
**1.2.1 【必须】使用child_process执行系统命令，应限定或校验命令和参数的内容**
- 适用场景包括：`child_process.exec`, `child_process.execSync`, `child_process.spawn`, `child_process.spawnSync`, `child_process.execFile`, `child_process.execFileSync`
- 调用上述函数，应首先考虑限定范围，供用户选择。
- 使用`child_process.exec`或`child_process.execSync`时，如果可枚举输入的参数内容或者格式，则应限定白名单。如果无法枚举命令或参数，则必须过滤或者转义指定符号，包括：```|;&$()> {
	const txt = req.query.txt || "echo 1";
	exec(txt, (err, stdout, stderr) => {
		if (err) { res.send({ err: 1 }) }
		res.send({stdout, stderr});
	});
});
// good：通过白名单，限定外部可执行命令范围
Router.get("/not_vul_cmd_inject", (req, res) => {
	const txt = req.query.txt || "echo 1";
  const phone = req.query.phone || "";
	const cmdList = {
    	sendmsg: "./sendmsg "
	};
	if (txt in cmdList && validator.isMobilePhone(phone)) {
        exec(cmdList[txt] + phone, (err, stdout, stderr) => {
          if (err) { res.send({ err: 1 }) };
          res.send({stdout, stderr});
        });
	} else {
		res.send({
			err: 1,
			tips: `you can use '${Object.keys(cmdList)}'`,
		});
	}
});
// good：执行命令前，过滤/转义指定符号
Router.get("/not_vul_cmd_inject", (req, res) => {
	const txt = req.query.txt || "echo 1";
  let phone = req.query.phone || "";
	const cmdList = {
    	sendmsg: "./sendmsg "
	};
	phone = phone.replace(/(\||;|&|\$\(|\(|\)|>| {
          if (err) { res.send({ err: 1 }) };
          res.send({stdout, stderr});
        });
	} else {
		res.send({
			err: 1,
			tips: `you can use '${Object.keys(cmdList)}'`,
		});
	}
});
```
*关联漏洞：高风险 - 任意命令执行*
#### 1.3 文件操作
**1.3.1 【必须】限定文件操作的后缀范围**
- 按业务需求，使用白名单限定后缀范围。
**1.3.2 【必须】校验并限定文件路径范围**
- 应固定上传、访问文件的路径。若需要拼接外部可控变量值，检查是否包含`..`、`.`路径穿越字符。如存在，应拒绝。
- 使用`fs`模块下的函数方法时，应对第一个参数即路径部分做校验，检查是否包含路径穿越字符`.`或`..`。涉及方法包括但不限于：`fs.truncate`、`fs.truncateSync`、`fs.chown`、`fs.chownSync`、`fs.lchown`、`fs.lchownSync`、`fs.stat`、`fs.lchmodSync`、`fs.lstat`、`fs.statSync`、`fs.lstatSync`、`fs.readlink`、`fs.unlink`、`fs.unlinkSync`、`fs.rmdir`、`fs.rmdirSync`、`fs.mkdir`、`fs.mkdirSync`、`fs.readdir`、`fs.readdirSync`、`fs.openSync`、`fs.open`、`fs.createReadStream`、`fs.createWriteStream`
- 使用express框架的`sendFile`方法时，应对第一个参数即路径部分做校验，检查是否包含路径穿越字符`.`或`..`
- 校验时，应使用`path`模块处理前的路径参数值，或判断处理过后的路径是否穿越出了当前工作目录。涉及方法包括但不限于：`path.resolve`、`path.join`、`path.normalize`等
```javascript
const fs = require("fs");
const path = require("path");
let filename = req.query.ufile;
let root = '/data/ufile';
// bad：未检查文件名/路径
fs.readFile(root + filename, (err, data) => {
	if (err) {
		return console.error(err);
	}
	console.log(`异步读取: ${data.toString()}`);
});
// bad：使用path处理过后的路径参数值做校验，仍可能有路径穿越风险
filename = path.join(root, filename);
if (filename.indexOf("..")  {
		if (err) {
			return console.error(err);
		}
		console.log(data.toString());
	});
};
// good：检查了文件名/路径，是否包含路径穿越字符
if (filename.indexOf("..")  {
		if (err) {
			return console.error(err);
		}
		console.log(data.toString());
	});
};
```
**1.3.3 【必须】安全地处理上传文件名**
- 将上传文件重命名为16位以上的随机字符串保存。
- 如需原样保留文件名，应检查是否包含`..`、`.`路径穿越字符。如存在，应拒绝。
**1.3.4 【必须】敏感资源文件，应有加密、鉴权和水印等加固措施**
- 用户上传的`身份证`、`银行卡`等图片，属敏感资源文件，应采取安全加固。
- 指向此类文件的URL，应保证不可预测性；同时，确保无接口会批量展示此类资源的URL。
- 访问敏感资源文件时，应进行权限控制。默认情况下，仅用户可查看、操作自身敏感资源文件。
- 图片类文件应添加业务水印，表明该图片仅可用于当前业务使用。
#### 1.4 网络请求
**1.4.1 【必须】限定访问网络资源地址范围**
- 应固定程序访问网络资源地址的`协议`、`域名`、`路径`范围。
- 若业务需要，外部可指定访问网络资源地址，应禁止访问内网私有地址段及域名。
```
// 以RFC定义的专有网络为例，如有自定义私有网段亦应加入禁止访问列表。
10.0.0.0/8
172.16.0.0/12
192.168.0.0/16
127.0.0.0/8
```
**1.4.2 【推荐】请求网络资源，应加密传输**
- 应优先选用https协议请求网络资源
*关联漏洞：高风险 - SSRF，高风险 - HTTP劫持*
#### 1.5 数据输出
**1.5.1 【必须】高敏感信息禁止存储、展示**
- 口令、密保答案、生理标识等鉴权信息禁止展示
- 非金融类业务，信用卡cvv码及日志禁止存储
**1.5.2【必须】一般敏感信息脱敏展示**
- 身份证只显示第一位和最后一位字符，如：`3*********************1`
- 移动电话号码隐藏中间6位字符，如：`134***************48`
- 工作地址/家庭地址最多显示到`区`一级
- 银行卡号仅显示最后4位字符，如：`*********************8639`
**1.5.3 【推荐】返回的字段按业务需要输出**
- 按需输出，避免不必要的用户信息泄露
- 用户敏感数据应在服务器后台处理后输出，不可以先输出到客户端，再通过客户端代码来处理展示
*关联漏洞：高风险 - 用户敏感信息泄露*
#### 1.6 响应输出
**1.6.1 【必须】设置正确的HTTP响应包类型**
- 响应头Content-Type与实际响应内容，应保持一致。如：API响应数据类型是json，则响应头使用`application/json`；若为xml，则设置为`text/xml`。
**1.6.2 【必须】添加安全响应头**
- 所有接口、页面，添加响应头 `X-Content-Type-Options: nosniff`。
- 所有接口、页面，添加响应头`X-Frame-Options `。按需合理设置其允许范围，包括：`DENY`、`SAMEORIGIN`、`ALLOW-FROM origin`。用法参考：[MDN文档](https://developer.mozilla.org/zh-CN/docs/Web/HTTP/X-Frame-Options)
- 推荐使用组件： [helmet](https://www.npmjs.com/package/helmet) 
**1.6.3 【必须】外部输入拼接到响应页面前，进行编码处理**
| 场景                                                         | 编码规则                                                     |
| ------------------------------------------------------------ | ------------------------------------------------------------ |
| 输出点在HTML标签之间                                         | 需要对以下6个特殊字符进行HTML实体编码(&, , ", ',/)。示例：& --> &amp;amp; &amp;lt;>--> &amp;gt;" --> &amp;quot;' --> &amp;#x27;  / --> &amp;#x2F; |
| 输出点在HTML标签普通属性内（如href、src、style等，on事件除外） | 要对数据进行HTML属性编码。编码规则：除了阿拉伯数字和字母，对其他所有的字符进行编码，只要该字符的ASCII码小于256。编码后输出的格式为&#xHH;(以&#x开头，HH则是指该字符对应的十六进制数字，分号作为结束符) |
| 输出点在JS内的数据中                                         | 需要进行js编码编码规则：除了阿拉伯数字和字母，对其他所有的字符进行编码，只要该字符的ASCII码小于256。编码后输出的格式为 \xHH （以 \x 开头，HH则是指该字符对应的十六进制数字）Tips：这种场景仅限于外部数据拼接在js里被引号括起来的变量值中。除此之外禁止直接将代码拼接在js代码中。 |
| 输出点在CSS中（Style属性）                                   | 需要进行CSS编码编码规则：除了阿拉伯数字和字母，对其他所有的字符进行编码，只要该字符的ASCII码小于256。编码后输出的格式为 \HH （以 \ 开头，HH则是指该字符对应的十六进制数字） |
| 输出点在URL属性中                                            | 对这些数据进行URL编码Tips：除此之外，所有链接类属性应该校验其协议。禁止JavaScript、data和Vb伪协议。 |
**1.6.4 【必须】响应禁止展示物理资源、程序内部代码逻辑等敏感信息**
- 业务生产（正式）环境，应用异常时，响应内容禁止展示敏感信息。包括但不限于：`物理路径`、`程序内部源代码`、`调试日志`、`内部账号名`、`内网ip地址`等。
```
// bad
Access denied for user 'xxx'@'xx.xxx.xxx.162' (using password: NO)"
```
**1.6.5 【推荐】添加安全纵深防御措施**
- 部署CSP，规则中应引入最新的严格模式特性`nonce-`
```javascript
// good：使用helmet组件安全地配置响应头
const express = require("express");
const helmet = require("helmet");
const app = express();
app.use(helmet());
// good：正确配置Content-Type、添加了安全响应头，引入了CSP
Router.get("/", (req, res) => {
	res.header("Content-Type", "application/json");
	res.header("X-Content-Type-Options", "nosniff");
	res.header("X-Frame-Options", "SAMEORIGIN");
	res.header("Content-Security-Policy", "script-src 'self'");
});
```
*关联漏洞：中风险 - XSS、中风险 - 跳转漏洞*
#### 1.7 执行代码
**1.7.1 【必须】安全的代码执行方式**
- 禁止使用 `eval` 函数
- 禁止使用`new Function("input")()` 来创建函数
- 使用 `setInteval`，`setTimeout`，应校验传入的参数
*关联漏洞：高风险 - 代码执行漏洞*
#### 1.8 Web跨域
**1.8.1 【必须】限定JSONP接口的callback字符集范围**
- JSONP接口的callback函数名为固定白名单。如callback函数名可用户自定义，应限制函数名仅包含 字母、数字和下划线。如：`[a-zA-Z0-9_-]+`
**1.8.2 【必须】安全的CORS配置**
- 使用CORS，应对请求头Origin值做严格过滤、校验。具体来说，可以使用“全等于”判断，或使用严格的正则进行判断。如：`^https://domain\.qq\.com$`
```javascript
// good：使用全等于，校验请求的Origin
if (req.headers.origin === 'https://domain.qq.com') {
    res.setHeader('Access-Control-Allow-Origin', req.headers.origin);
    res.setHeader('Access-Control-Allow-Credentials', true);
}
```
*关联漏洞：中风险 - XSS，中风险 - CSRF，中风险 - CORS配置不当*
#### 1.9 SQL操作
**1.9.1 【必须】SQL语句默认使用预编译并绑定变量**
- 应使用预编译绑定变量的形式编写sql语句，保持查询语句和数据相分离
  ```javascript
  // bad：拼接SQL语句查询，存在安全风险
  const mysql  = require("mysql");
  const connection = mysql.createConnection(options);
  connection.connect();
  const sql = util.format("SELECT * from some_table WHERE Id = %s and Name = %s", req.body.id, req.body.name);
  connection.query(sql, (err, result) => {
  	// handle err..
  });  
  // good：使用预编译绑定变量构造SQL语句
  const mysql  = require("mysql");
  const connection = mysql.createConnection(options);
  connection.connect();