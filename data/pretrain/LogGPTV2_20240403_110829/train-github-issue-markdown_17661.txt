### 1. Problem
I implemented a custom layer based on the `tutorial_dnn_custom_layers` example. I need the output type to be `np.long`, but the default output type is `np.float32`. **Is it possible to set the output type to `np.long`?**

### 2. Key Code
```python
class ALayer(object):
    def __init__(self, params, blobs):
        # Initialization code here
        ...

    # Our layer receives one input. We need to find the max IDs along a specified axis.
    def getMemoryShapes(self, inputs):
        # Memory shape calculation code here
        ...

    def forward(self, inputs):
        data = inputs[0]
        # Find the indices of the maximum values along the specified axis
        res = np.argmax(data, axis=self.axis).astype(np.float32)
        print(res, res.shape, res.dtype)
        return [res]

# This code is run after registering the ALayer.

# Type Error
# When I removed the `astype(np.float32)` in the `forward` function, I encountered the following error after registering the ALayer:
# pyopencv_dnn.hpp:175: error: (-215:Assertion failed) pyOutputs[i].type() == outputs[i].type() in function 'pycvLayer::forward'
```

### Clarification and Solution
To address the issue, you need to ensure that the output type of your custom layer matches the expected type. In this case, you want the output to be of type `np.long`.

Here's how you can modify the `forward` method to achieve this:

```python
import numpy as np

class ALayer(object):
    def __init__(self, params, blobs):
        # Initialization code here
        ...

    # Our layer receives one input. We need to find the max IDs along a specified axis.
    def getMemoryShapes(self, inputs):
        # Memory shape calculation code here
        ...

    def forward(self, inputs):
        data = inputs[0]
        # Find the indices of the maximum values along the specified axis
        res = np.argmax(data, axis=self.axis).astype(np.long)  # Change to np.long
        print(res, res.shape, res.dtype)
        return [res]

# This code is run after registering the ALayer.
```

By changing the `astype` call to `np.long`, you should be able to set the output type to `np.long` and avoid the type mismatch error. If the error persists, you may need to check the expected output type in the `pyopencv_dnn` library and ensure compatibility.