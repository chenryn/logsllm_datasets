# From Trash to Treasure: Timing-Sensitive Garbage Collection

**Authors:** Mathias V. Pedersen and Aslan Askarov  
**Event:** 2017 IEEE Symposium on Security and Privacy  
**Affiliation:** Department of Computer Science, Aarhus University  
**Emails:** {mvp, aslan}@cs.au.dk

## Abstract
This paper investigates information flows through timing channels in the context of automatic memory management. We demonstrate a series of example attacks that show how garbage collectors can be exploited as a shared resource to reliably leak sensitive information at a rate of up to 1 byte/sec on a modern general-purpose computer. This channel is also observable over a network connection in a datacenter-like setting. Subsequently, we present a design for automatic memory management that is provably resilient against such attacks.

## I. Introduction
When a computer system allows third-party code to access sensitive information, it is crucial to ensure the confidentiality of this data. Language-based information flow control (IFC) is a popular approach to address this issue [33]. IFC uses programming language techniques to analyze and control information flows in untrusted programs, either before or during execution. The advantage of this approach is its fine-grained control, which is more precise than coarse-grained systems. However, source-code analysis is limited to flows with control graph representations, and malicious code can still leak sensitive data using runtime side-channels such as CPU caches [28], schedulers [43], or language features like lazy evaluation [8].

This paper examines another critical aspect of program runtime: automatic memory management. We show that memory management can be a vulnerable shared resource, allowing an attacker to exfiltrate sensitive information. We present a series of simple attacks on modern runtimes, including Java's sequential and parallel garbage collections and V8's default garbage collector, to illustrate the potential of these attacks.

### Attack Model
Our threat model assumes an attacker-provided program that operates on confidential information. The attacker observes the public input and output of the program but does not have direct access to the secret input or output. Additionally, the attacker's code is subject to syntactic and runtime checks that prevent it from directly leaking the secret input.

We assume the attacker's program consists of secret-dependent (high) and secret-independent (low) computations. High computations can access sensitive data but cannot communicate directly with the attacker. Low computations can communicate with the attacker or affect the public output, but their execution must not depend on secrets.

Figure 1 illustrates the high-level idea behind the attacks. The high computation influences the amount of allocated and reclaimable memory, which in turn affects the timing of allocations in the low computations via the garbage collector. If there is no free space at the time of an allocation in the low computation, the invocation of the garbage collector introduces observable delays. These delays are observed by two timing measurements, before and after the allocation in the low computation. The attacks do not rely on measuring the timing of the high computations, which are considered secret-independent.

While the attacks may not be surprising, their implications are significant. Automatic memory management is essential for modern object-oriented or functional programming languages. For strong information security, a secure runtime is necessary. Existing prototypes often use source-to-source compilation [26, 34] or language-based monitoring [16, 35], but they reuse commodity runtimes that are vulnerable to the types of attacks we describe here. Although there have been remarks in the literature about the dangers of memory management in information flow settings [29], we are not aware of previously published attacks or proposals focusing on timing channels through memory management.

To address the problem of leaks via garbage collection, we study a model of a programming language that uses an abstract secure runtime and security types to enforce security. Our programming language includes a command for obtaining the current time, allowing us to cover a wide range of attacker models. The formal semantics of the language isolate leaks via garbage collection from other timing channels by using a non-standard primitive that pads the execution time of a command by a specified value.

In summary, the contributions of this paper are:
1. We develop the first amplifiable covert channel via automatic memory management, showing that the channel can be observed both locally and over a network.
2. We observe that garbage collection creates a bi-directional information channel, severely restricting the design space for securing automatic memory management. We present formal requirements that secure garbage collectors must satisfy.
3. We demonstrate that a secure garbage collector can be integrated with traditional information flow analysis to provably establish a noninterference property.

The rest of the paper is structured as follows. Section II provides background on timing channels and garbage collection. Section III explains our attacks and their results. Sections IVâ€“V develop a formal language model for a small imperative language with allocatable arrays and garbage collection. Section VI designs a type system necessary for secure coordination with the runtime. Section VII studies the resulting security guarantees. Section VIII discusses the applicability of real-time garbage collectors in light of the discovered attacks. Sections IX and X discuss related work and conclude.

## II. Background
Programming languages that focus on information flow security statically reject programs containing information flow violations, such as explicit and implicit flows. A common approach is to add security labels to types, corresponding to the confidentiality of the information stored in a variable of the given type. A natural consequence of security labels on types is the notion of a program counter label (pc) that determines the security context of the execution.

However, many such approaches ignore other potential sources of information leakage, particularly timing. Timing dependencies in programs can be direct or indirect [45]. Direct timing dependencies, such as the decision to take one branch or another based on a confidential guard, are difficult to close but have control-flow representation and can be mitigated through language-based techniques [1, 45].

Indirect timing channel attacks arise from interactions with the runtime system or hardware. These are much harder to close because they require careful coordination between the programming language technology and the underlying runtime, often including the OS and CPUs.

This paper focuses on indirect timing channels created by the automatic memory management aspect of the language runtime. We start with a brief overview of basic garbage collection concepts.

### A. Garbage Collection Techniques
A garbage collector identifies heap objects that will definitely not be accessed in the future and reclaims their memory, allowing it to be reused. Objects in the heap can point to other objects, forming a directed graph. The root nodes of this graph are the variables in the program, providing "entry points" into the graph.

Determining whether an object will be accessed in the future is an undecidable problem [22], so garbage collection schemes conservatively approximate this by assuming that every object reachable from the root nodes will be accessed in the future.

The two garbage collection strategies attacked in this paper are mark-and-sweep collectors and copy collectors.

#### a) Mark-and-Sweep
A mark-and-sweep garbage collector operates in two phases: a marking phase, where all reachable objects are marked as "live," and a sweep phase, where unmarked objects are reclaimed. The cost of a mark-and-sweep collection is the sum of the costs of marking and sweeping. The cost of marking is linear in the size of the reachable objects, and the cost of sweeping is linear in the size of the entire heap.

One way to avoid the cost being linear in the size of the entire heap is to use a copy collecting algorithm.

#### b) Copy Collection
A copy collecting garbage collector partitions the heap into two equal-sized partitions: from-space and to-space. An invariant of this algorithm is that only the from-space is modified during program execution.

When the from-space partition is filled, the collector builds a copy of the object graph in the to-space partition, known as the evacuation phase. Afterward, all memory in the from-space is reclaimed, and the to-space becomes the new from-space, and vice versa.

#### c) Generational Collection
Efficient garbage collectors avoid traversing the entire object graph by assuming the weak generational hypothesis, which states that most objects die young. This allows them to focus on recently allocated objects, reducing the overall cost of garbage collection.