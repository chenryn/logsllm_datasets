pitch speed, yaw speed,
reference
reference
pitch, reference yaw
air speed, ground speed, throt-
tle, climb rate, reference air
speed, flight mode, parachute
RC 1 - 4
system clock, flight status,
mission, pre-arm checking
gyroscope,
magnetometer,
GPS
accelerometer,
barometer,
Description
(x,y,z) location of the vehicle
Measured and desired attitude
Physical movement and operation mode
Radio channel inputs from users
System general info. such as the vehicle
is on the ground or free falling
Sensor condition
TABLE XI: The identified physical states. S1-S5 are obtained from
MAVLink and S6 is by parsing the ACK messages from the vehicle.
Fig. 13: Illustration of A.CHUTE1 policy’s binary expression tree. c
and p denote current time (t) and previous time (t−1). A python
code represents propositional distances (P1−P5) and a global
distance derived by P1−P5.
via PyParsing library [57]. Second, to arithmetically calculate the
distances in the source code, it converts the verified MTL formula
in the always form into an MTL formula in the not eventually
form as explained in Section V-B3. Third, we create the binary
expression tree based on the converted MTL formula (as shown in
Figure 13). Then, we traverse the nodes of the tree to automatically
generate the code snippets that calculate the distances and check
a policy violation. We created the code snippets of propositional
and global distances, as explained in Section V-B3.
C. Handling False Positives
We exclude the following Inputset which leads to false positive
policy violations: (1) InputP influencing hardware configurations
(e.g., device IDs), and (2) InputC to turn off engines.
D. Required Time for Porting Effort
When users port PGFUZZ to other RV software, some manual
tasks are required as presented in Section IX (Porting PGFUZZ
to other RVs). We spent a total of 23.4 hours on the manual effort.
Specifically, we deployed PGFUZZ in the order of ArduPilot,
PX4, and Paparazzi, and the manual effort took 13.5, 6.3, and 3.6
hours, respectively. We spent less time on PX4 and Paparazzi than
ArduPilot because the flight control programs have similar or same
flight modes, synonyms, and self-sabotaging inputs.
E. Policy Descriptions
To evaluate PGFUZZ, we use the following 56 policies,
formally expressed with MTL formulas in Table XII.
^∨=onifchute== on:P1 = 1else:P1 = -1if Armed!= true:P2 = 1else:P2 = -1ifMode== FLIP|| Mode== ACRO :P3 = 1else:P3 = -1P4 = (ALT_c–ALT_p) / ALT_cP5 = (CHUTE_ALT_MIN –ALT_c) / CHUTE_ALT_MINif(-1 * MIN (P1, MAX(P2, P3, P4, P5))) ALT_cALT_p 45) ∨ (Throttle ≤
1,500)∨(ALTt  0)→ (Circle_radiust 1,500)→(Circle_radiust >Circle_radiust−1)}
(cid:3) {(Modet = CIRCLE) ∧ (RCroll >1,500) ∧ (Circle_directiont =
clockwise)→(Circle_speedt >Circle_speedt−1)}
(cid:3) {(Modet = CIRCLE) ∧ (RCroll >1,500) ∧ (Circle_directiont =
counterclockwise)→(Circle_speedt Circle_speedt−1)}
(cid:3) {(Modet = CIRCLE) ∧ (RCroll CHUTE_ALT_MIN)}
T3 (cid:3){(GPSfail =on)→(GPScount ALTt−1)}
T3 (cid:3){(Commandt =takeoff)→(ALTt≤MIS_TAKEOFF_ALT)}
T3 (cid:3){(Commandt =takeoff)→(Speed_verticalt =MPC_TKO_SPEED)}
(cid:3){(GPSloss =on)→(♦[0,COM_POS_FS_DELAY+k]GPSfail =on)}
T1
T3 (cid:3){(GPSfail =on)∧(RCt =on)→(Modet =ALTITUDE)}
T3 (cid:3){(GPSfail =on)∧(RCt =o f f )→(Modet =LAND)}
T3 (cid:3){(Modet =Hover)→(Post =Post−1)∧(Yawt =Yawt−1)}
T3
It is the same as A.ALT_HOLD2.
It is the same as A.LOITER1.
T3
T3 (cid:3){(Commandt =takeoff)→(ALTt≤HOME_ALT+5)}
T3 (cid:3){(Modet =HOME)∧(Landt(cid:54)=true)→(ALTt(cid:54)=ALTt−1)∧(Post(cid:54)=Post−1)}
TABLE XII: Policies extracted from the docs and comments on source code of ArduPilot (A) [10], PX4 (PX) [52], and Paparazzi (PP) [32].
18