2．硬件类故障注入
模拟硬盘、CPU、内存等硬件设备故障导致的服务器异常或重
启。
3．性能类故障注入
CPU占用：指定核提升 CPU使用率到特定值；
内存占用：通过额外占用系统的内存，模拟系统无法分配新内
存的状况；
磁盘占用：模拟大量磁盘 IO操作及磁盘写满。
4．数据库/中间件故障注入（MySQL为例）
模拟 MySQL主从故障切换时，观察程序是否会自动重连到正确
的实例；
模拟 MySQL短暂网络抖动后，观察程序是否会重连，以及业务
逻辑是否受影响；
⽹址：SRE-Elite.com 16 4 微信：SRE精英联盟
SRE实践白皮书（2023年）
模拟集群内部分节点异常，数据库是否能正常工作；
模拟MySQL实例内存/磁盘IO繁忙/CPU抢占/磁盘打满等情况，
观察业务的稳态指标表现。
3.6.6.3 监控和分析实验结果
在实验过程中，收集和分析系统性能数据，以评估系统在故障
情况下的表现。根据实验结果评估系统在面对故障时的弹性。如果
系统在实验中表现良好，说明它具有较好的弹性。如果系统在实验
中表现不佳，可能需要进一步调查原因，并考虑采取措施来提高系
统弹性。比较实验结果和基线，看看系统的行为是否符合预期。如
果系统没有按照预期恢复，那么你可能需要调查原因，并修改系统
以提高其弹性。
数据的来源可以是定义的稳态指标，也可以是人工测试获取到
的直观用户体验，客户端日志，服务端日志，服务端链路跟踪
（trace）等综合分析。需要关注的是混沌的持续时间，以便于精准定
位到对应时间窗口的相关信息。
结合监控图表展示，可以实现混沌过程及效果可视化。例如模
拟 CPU升高会拉到对应爆炸半径机器的 CPU曲线图。可以并行配置
稳态指标，一边模拟故障一边观察业务的指标变化，相较于过去的
繁琐沉重的日志分析，混沌工程将故障对程序的影响可视化，程序
对我们不再是黑盒，而是白盒，是否有影响，影响范围有多广，一
目了然。
⽹址：SRE-Elite.com 16 5 微信：SRE精英联盟
SRE实践白皮书（2023年）
3.6.6.4 优化和修复问题
根据实验结果，找出系统薄弱环节，优化和修复问题，提高系
统的弹性。在实施改进计划后，持续跟踪和监控系统的表现，确保
改进措施取得了预期的效果。如果需要，可以进行进一步的混沌实
验来验证改进效果。
通常情况下，系统在上线前会经过功能测试，所以程序在大多
数情况下正常情况下的功能是会正常工作，我们需要主动模拟少数
异常的环境，观察程序在异常发生时候的表现是否符合我们预期。
程序在设计之初就会在架构层考虑冗余和高可用，但是是否真如我
们所预期的表现需要模拟验证。
故障无法避免，特别是分布式应用，在设计之初就要考虑到网
络分区带来的影响，不同程序的场景会根据 CAP 原则做出可用性
（CA）和数据强一致性（CP）的取舍，从而表现出不同现象。通过
模拟故障，发现程序不符合预期的表现，从而优化程序，提升系统
的高可用性。
3.6.6.5 持续迭代和改进
持续监控系统的性能和可靠性，以便在问题再次出现时能够及
时发现和解决。同时，定期运行混沌实验可以帮助你提前发现并解
决潜在问题。定期进行实验和优化，以应对系统不断变化的需求和
环境。
将混沌演练的场景固化为模版，集成到业务的 CI 流水线，每次
正式版本发布自动进行混沌测试，混沌工程自动进行稳态指标判
⽹址：SRE-Elite.com 16 6 微信：SRE精英联盟
SRE实践白皮书（2023年）
断，从而自动化检测当前版本是否带来高可用隐患。相较过去手动
模拟故障的演练方式，混沌工程具有可复用，自动化执行，智能判
断的特点，和 CI 流程集成后变得更加轻量级，使得故障模拟，高可
用检验，告警巡检不再是重成本的工作，可以伴随着每次的版本编
译后部署自动检测，自动生成版本高可用打分报告，使得故障演练
可以脱离运维和测试，由研发人员一键触发闭环。
3.6.7 应用服务 SLI/SLO
3.6.7.1 什么是 SLI/SLO
（1）SLI：由业务相关程序、客户端、中间件产生的监控指标，
每个指标有明确的定义、计算方法，一个功能会包含多个 SLI。
一般把这些指标分为 3 层：用户体验、中间件、基础设施。用
户体验主要是指和用户强相关的一些功能监控，比如登录、购买等
功能，这些往往用户的关键路径，也是我们应该关注的点；中间件
主要指在架构中用到的开源组件等；基础设施就是指网络、物理服
务器、物理电源、磁盘阵列卡等，在建设 SLO 时优先梳理用户体验
层指标。
（2）SLO：用于在时间维度上衡量服务稳定性的上层指标，一
般分功能来进行建设，下层由具体功能用户体验层的监控指标
（SLI）构成，SLO 的最终值是由各个 SLI 的实际情况所共同决定
的。
在特定情况下，可以考虑将 SLO/SLI 与绩效挂钩，这样可以确
保团队的目标与组织的服务质量目标一致。团队成员可能更加积极
⽹址：SRE-Elite.com 16 7 微信：SRE精英联盟
SRE实践白皮书（2023年）
地工作以满足或超越这些目标。同时这样也为团队设定了明确的期
望，并能实现数据驱动的评估方式。但是，与绩效挂钩，团队成员
可能会过度专注于短期指标，而忽视长期目标和创新。建议每个组
织根据客观的实际情况进行使用。
3.6.7.2 如何建设 SLI/SLO
SLO建设步骤：确认 SLO预期 -> 梳理关键链路 -> 梳理 SLI（1
原则+1方法+关键链路） -> 上报 SLI -> 创建监控策略 -> 计算 SLO
-> SLO指标呈现
1．确认预期
和业务负责人、产品、策划、开发等相关干系人一起确认该功
能的预期，即 SLO。需要注意的是，SLO 的设定需要根据服务实际
需求来制定。趋近于 100%的 SLO，将会消耗巨大的成本，但是用户
可能并感受不到变化。过低的 SLO，将会让用户的感受变差。我们
需要确定在不影响用户体验的情况下，确定一个合理的 SLO。
2．梳理关键路径
梳理用户从功能入口到使用该功能的关键路径，比如：
app启动 --> app更新检查 --> app更新 --> 登录 --> 获取昵称 -->
展示昵称
3．梳理 SLI
原则：优先梳理用户体验层 SLI，即用户可以感受到的功能、按
钮
方法：VEALT，从 V（容量）、E（错误）、L（延迟）、A（可用
⽹址：SRE-Elite.com 16 8 微信：SRE精英联盟
SRE实践白皮书（2023年）
率）、T（人工提单，保底分类） 5个维度来梳理，避免漏掉 SLI
将这2个原则套在第2步关键路径的每个节点，即可梳理出一份
相对完整的 SLI列表
4．上报 SLI
对于没有 SLI 需要客户端或服务端从新上报到监控系统，对于
已有的 SLI需要校验其准确性
5．创建监控策略
针对每个 SLI 需要创建一条监控策略，策略的告警阈值根据第
一步定的 SLO 来确定。举个例子，若 SLO 定为 99%，则“app 更新
检查成功率”指标的告警阈值为 < 99%
6．计算 SLO
围绕业务稳定性衡量，一共设计了 5个指标，6个维度，并基于
监控系统计算出相关指标的值。
维度信息
维度 含义 枚举值
velat VELAT 方法论，分别代容量、错 Volume
误、延迟、可用率、工单 Error
Latency
Availability
Ticket
range_time 固定的时间范围，单位：天 1
7
30
180
365
strategy_name 监控策略名 策略名
strategy_id 监控策略ID 策略ID
bk_cc_biz_id 业务ID
⽹址：SRE-Elite.com 16 9 微信：SRE精英联盟
SRE实践白皮书（2023年）
bk_biz_name 业务名
⽹址：SRE-Elite.com 17 0 微信：SRE精英联盟
SRE实践白皮书（2023年）
指标信息
指标 含义 计算公式 包含维度
slo 汇总的 SLO 指标， SLO=（总时间-不稳 range_time
代表当前场景的稳 定时间） / 总时间
定性 不稳定时间=多个 SLI
告警时间并集
slo_error_ti 各个SLI错误消耗详 slo_error_time_info=S velat
me_info 情，根据该指标， UM（SLI告警时间） range_time
strategy_name
可看出哪个指标的
strategy_id
不稳定时间最长
bk_cc_biz_id
每个SLI独立计算
bk_biz_name
slo_error_ti 汇总之后的错误消 不稳定时间=多个 SLI range_time
me 耗 告警时间并集
mttr 告 警 平 均 恢 复 时 mttr = 故障总时间 / 故 range_time
间，值越小越好 障次数
mtbf 平 均 告 警 间 隔 时 mtbf = 正常时间 / 故 range_time
间，值越大越好 障次数
7．SLI/SLO指标呈现
SLO的展示一定要基于对应SLI，目的在于让相关干系人能直观
的看到当前 SLI 下的 SLO、错误消耗等指标。展示的思路根据不同
的用户，大致可以分为三种方式：
（1）业务场景视角的展示。针对业务某一个 SLI 或者某个场景