sign principles across web archives.
Shared Software. Other web archives frequently use the Way-
back Machine’s software, which is open source. For example, the
Wayback Machine’s web crawler (Heritrix [14]) and archive host-
ing/playback software (Wayback/OpenWayback4 [15, 18]) are used
by archives such as the Internet Memory Foundation ([29]), Stan-
ford University Libraries ([46]), OpenGovData’s Russia Archives
([39]), and the US Library of Congress ([32]), among at least 22
national web archives [47]. While each deployment may modify
the software or deploy it differently, the intellectual basis for the
attacks described in this section should apply to these other web
archives. For example, as an anecdote, we spot-checked five Library
of Congress archived pages, finding archive-escapes to scripts and
missing script resources [37, 43]). We also found that the Library of
Congress archive (a) performs nearest-neighbor timestamp match-
ing on resource timestamps (enabling Attack #4) and (b) serves all
content from the same domain, regardless of its original domain
(enabling Attack #2).
Shared Design Principles. Even when code is not shared, a gen-
eral lesson we take from the vulnerabilities we identified is that
by rehosting and remixing web content, web archives can create
unexpected situations which violate the threat model underlying
web security assumptions and primitives. For example, hosting
mutually distrustful content from the same domain violates a key
assumption of the Same-Origin Policy. Additionally, the nature of
web archives in attempting to reproduce a particular moment in
time creates new assumptions that may be violated: e.g., that all
resources seen by the user came from the same time, and not from
the present. Our work surfaces how these assumptions – common
across web archives systems – may be violated.
5 REWRITING HISTORY: OUR ATTACKS
Having discussed our vulnerabilities, we delve into the design of
attacks which exploit these vulnerabilities to rewrite history. For
reference in discussing these attacks, recall that Figure 2 depicts
the lifecycle of a snapshot and possible attacks against it.
4OpenWayback is the community version of Wayback — Internet Archive’s Wayback
repository is forked from OpenWayback
5.1 Attack #1: Archive-Escape Abuse
Preliminaries and Attacker. The precondition for Archive-Escape
Abuse is the presence of an archive-escape vulnerability in the vic-
tim snapshot. The potential attacker is the owner of the destination
of the archive-escape, to whom the client makes a request for the
vulnerable resource. Because the attacker delivers the payload from
their own servers (rather than via the archive) at time-of-access,
we refer to this as an active attack.
Attack Concept. To mount this attack, the attacker (the desti-
nation of an archive-escape), publishes malicious content at the
escaping URL. If the archive-escape is to a static resource like an
image, then the attacker will only be able to affect that resource; if
the archive-escape is a request for a script or stylesheet, then the
attacker can choose arbitrary malicious code to execute.
Sequence of Events for Attack #1.
(1) The victim page is published. (Optional: If the attacker is the
first-party domain wishing to enable future modifications of
itself, the attacker can intentionally include requests which
will result in archive-escapes.)
(2) The page is archived as the victim snapshot.
(3) The victim snapshot, when loaded, causes the client browser
to make an archive-escape request.
(4) The attacker (who owns the domain on which the escaping
script is hosted) serves malicious code in response to the
archive-escape request. The malicious code runs in the client
browser and modifies the appearance of the snapshot so that
the client sees an inaccurate view of the page.
Proof of Concept Attack Implementation. We developed a proof-
of-concept implementation of Attack #1, demonstrating the abil-
ity to attack snapshots of websites over which we have no con-
trol and which were archived years ago. We used our measure-
ments (Section 6) to locate archive-escape vulnerabilities where
the attacker domain was unowned, using whois. Finding that http:
//web.archive.org/web/20110901233330/reuters.com generates an
archive-escape to http://cdn.projecthaile.com/js/trb-1.js, and that
as of 19 March 2017, projecthaile.com had no owner. We purchased
projecthaile.com and hosted our own version of /js/trb-1.js which
modifies specific elements of the reuters.com snapshot. This attack
resulted in the screenshot shown in Figure 1, in which we replaced
a news article image and headline with our own.
As with all of our attacks against snapshots we do not own, we
disabled the attack after confirming that it worked, so as not to
disrupt the public’s view of the snapshot. Additionally, we have
purchased the remaining unowned domains (without hosting any-
thing from them) for this attack to prevent any other attackers from
buying and using them.
Advantages and Disadvantages of Attack #1. Attack #1 is an
active attack, where the attacker’s server delivers payloads directly
to clients, allowing an attacker to modify their attack over time,
customize it per client, or disable the attack entirely. However,
it also means the attack is not permanent. Additionally, defenses
which block archive-escapes are among the easiest for clients to
deploy.
Session H3:  Web SecurityCCS’17, October 30-November 3, 2017, Dallas, TX, USA1746.
(3) In the live web, the malicious code executes, but its effects
are blocked by the browser, according to the Same-Origin
Policy.
(4) The first-party page is archived as a snapshot, including the
5.2 Attack #2: Same-Origin Escape Abuse
Preliminaries and Attacker. Potential Same-Origin Escape at-
tackers include all third-parties embedded in  at time-
of-archive. However, this attack requires foresight — the attacker
needs to have included their payload inside their  at time-
of-archive, so that it can be preserved and served from the archive’s
database. Note that this makes Attack #2 a passive attack, since the
payload is stored and delivered to the client by the archive, rather
than directly from the attacker’s server at time-of-access.
Attack Concept. As described above, this attack abuses the lower
level of isolation which the client browser applies to frames when
they are delivered from a single origin (the archive’s origin) rather
than multiple origins, as they are served on the live web. The first-
party publisher includes the attacker in their page under the as-
sumption that malicious code the attacker writes to deface the first-
party’s page will be unable to do so because of the Same-Origin
Policy, and this assumption is violated in the archival context.
Sequence of Events for Attack #2.
(1) A victim site includes a third-party in an , where
they are now a potential Same-Origin Escape attacker.
(2) The third-party attacker publishes malicious code in its
attacker’s .
(5) When the snapshot is loaded, both the page and the 
are served from web.archive.org. Since they are now served
from the same domain, the Same-Origin Policy no longer
applies, and the malicious code in the  can make
arbitrary modifications to client’s view of the page.
Proof of Concept Attack Implementation. For Attack #2, we
developed a prototype demonstration against a toy website which
we created and archived for demonstration purposes. The reason
is that this attack requires the attacker to be a third-party with
foresight, and we do not have a third-party position on any websites
we do not control which we could use to demonstrate the attack.
Thus, to demonstrate this attack, we published, on the live web,
the victim page of our first-party domain, including an 
of our third-party domain. Inside the , we then deployed
attack code which attempts to modify elements of the first-party
page. On the live web, this attack code fails, due to the Same-Origin
Policy. We then requested that the Wayback Machine “Save Page
Now” for our first-party victim page, causing it to archive that
page and, as part of archiving that page, also archive the attacker’s
 with its attack code. When viewing the snapshot of the
victim page in the archive, both first- and third-party content are
served from the same domain, causing the Same-Origin Policy to no
longer apply, and allowing the third-party code to modify clients’
views of the victim snapshot.
Advantages and Disadvantages of Attack #2. This attack has
several strengths. First, the prerequisites for performing the attack
are minimal, since all that is required is to be a third-party who can
execute Javascript. Third-party frames are commonly embedded
and trusted by websites, and it may even be possible to purchase
advertising space in order to gain the position needed to execute the
attack. Additionally, there are some third-parties who are present
on a large fraction of websites (see Section 6), meaning that for
certain attackers, this attack represents a huge capability to modify
snapshots of a large number of websites.
However, this attack is significantly limited because the attacker
must have foresight: Their attack code, and thus the changes they
wish to cause in the client’s view, must be chosen before time-of-
archive, since the attack code must itself be stored in the archive.
5.3 Attack #3: “Same-Origin Escape” +
“Archive-Escape”
Preliminaries and Attacker. Noting the limitation of Attack #2
requiring foresight, we consider a stronger way to use Same-Origin
Escapes: Attack #3. This attack uses a Same-Origin Escape to create
an intentional archive-escape, allowing the attacker to launch a
later attack without foresight. Attack #3 is applicable any time
Attack #2 is applicable, since it begins with a third-party in an
 executing Attack #2 in order to create a later opportunity
for Attack #1.
Attack Concept. This attack combines Attacks #1 and #2. Here, the
attacker uses a Same-Origin Escape (malicious code in an )
to intentionally cause archive-escapes, with a destination the at-
tacker controls, in the snapshot of the victim page. Once this has
been done, the attacker is now capable of performing archive-escape
abuse, immediately or at a later time.
Sequence of Events for Attack #3.
(1) The attacker must be a third-party who is embedded as an
 on the target page as of time-of-publication.
(2) The attacker chooses a destination payload URL which they
control, and embeds an archive-escape to that URL as the
src attribute of a  tag in their .
(3) The page, along with the , is archived.
(4) Some time in the future, the attacker chooses and publishes
a payload at the archive-escape URL.
(5) When a client browser loads the snapshot, the archived
 is retrieved from the archive, including the script
which causes an archive-escape. The browser retrieves the
payload and executes it in the context of the . Since
the  is archived, it is not isolated by the Same-
Origin Policy (see Section 5.2) allowing the modern attack
script to cause arbitrary modifications to the client’s view of
the snapshot.
Proof of Concept Attack Implementation. Since Attack #3 lever-
age Attack #2 (Same-Origin Escape), we created a similar victim/attacker
pair of testbed websites to demonstrate this attack. We again de-
ployed attack code inside a third-party , but in this case
our attack code used string concatenation to create an archive-
escape to the third-party domain rather than directly modifying the
snapshot content directly. We then hosted the snapshot-modifying
code on the live web at the third-party domain.
Advantages and Disadvantages of Attack #3. This attack allows
archive-escape attacks against a page which does not naturally
generate any archive-escapes to the attacker’s domain, making it
Session H3:  Web SecurityCCS’17, October 30-November 3, 2017, Dallas, TX, USA1747subject to the disadvantages of archive-escape attacks discussed
above.
Since the archive-escape payload can be chosen after time-of-
archive, this attack reduces a Same-Origin Escape attacker’s need
for foresight: they must only choose to enable a future attack by
embedding a small amount of archive-escape generating code in
the , without the need to know how exactly they will
change the snapshot in the future. An attacker such as a content
delivery network or advertiser which appears on many pages could
even choose to seed many pages with archive-escapes in order to
preserve their ability to attack snapshots of many pages later on.
5.4 Attack #4: Anachronism-Injection
Preliminaries and Attacker. The precondition for Anachronism-
Injection is a page which contains at least one resource which has
never been captured by the archive. The potential attacker is the
owner of the domain of that never-archived resource, who is in a
position to publish a malicious version of that resource and cause
that payload to be preserved in the archive as the resource’s first
(and at that point only) capture.
Attack Concept. The attacker publishes payload code to the missing-
resource’s URL on the live web, then uses the archive’s “Save Page
Now” feature to archive the payload. For example, a snapshot from
2000 might include a script capture, also from 2000. If that script has
never been archived, then today, in 2017, the owner of the script’s
domain can publish a malicious payload at the script’s URL and
use the archive’s “Save Page Now” feature to create a capture of
the script with a 2017 timestamp. Once the missing resource has
been archived, it will be the only capture of that resource in the
archive (since a precondition of the attack was that the resource had
never before been archived). As the only capture of the resource, its
timestamp necessarily is (and always will be) the nearest neighbor
to the timestamp requested in the victim snapshot, despite being 17
years distant. Thus the payload will be loaded in the context of the
victim snapshot, as client requests are nearest-neighbor redirected
to the malicious payload’s timestamp. Even if more captures of the
malicious resource are made afterwards, the payload will always
have a timestamp that is strictly earlier, and thus which is closer to
the victim snapshot’s timestamp, than those subsequent captures,
making the attack permanently effective.
Sequence of Events for Attack #4.
(1) A victim snapshot refers to a vulnerable resource which has
never been archived.
(2) The attacker, who owns the vulnerable resource’s domain,
publishes an attack payload on the live web.
(3) The attacker uses the archive’s “Save Page Now” feature to
cause the payload to be preserved as the first and only extant
capture of the vulnerable resource.
(4) When a client browses the victim snapshot, their browser
makes a request for the vulnerable resource at the timestamp
of the snapshot. In response, the archival front-end redirects
the client browser to the malicious, anachronistic capture
of the resource, since it has the timestamp closest to the
requested version.
Proof-of-Concept Attack Implementation. As with Attack #1,
we could demonstrate the Anachronism-Injection attack on snap-