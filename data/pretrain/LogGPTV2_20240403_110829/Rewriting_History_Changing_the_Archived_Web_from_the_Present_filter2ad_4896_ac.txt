### Shared Principles Across Web Archives

#### Shared Software
Many web archives, including the Internet Memory Foundation, Stanford University Libraries, OpenGovData’s Russia Archives, and the US Library of Congress, utilize the open-source software developed by the Wayback Machine. This includes the web crawler, Heritrix [14], and the archive hosting/playback software, Wayback/OpenWayback [15, 18]. These tools are widely adopted, with at least 22 national web archives using them [47]. While each deployment may involve modifications or different configurations, the fundamental principles and vulnerabilities discussed in this section generally apply to these other web archives. For instance, we spot-checked five pages from the Library of Congress archive and found that it is susceptible to archive-escapes to scripts and missing script resources [37, 43]. Additionally, the Library of Congress archive employs nearest-neighbor timestamp matching for resource timestamps (enabling Attack #4) and serves all content from a single domain, regardless of its original domain (enabling Attack #2).

#### Shared Design Principles
Even when specific code is not shared, the rehosting and remixing of web content by web archives can create unexpected situations that violate the threat model underlying web security assumptions. For example, hosting mutually distrustful content from the same domain violates the Same-Origin Policy. Furthermore, the nature of web archives, which aim to reproduce a specific moment in time, introduces new assumptions that can be violated. For instance, it assumes that all resources seen by the user come from the same time, rather than the present. Our work highlights how these common assumptions across web archive systems can be exploited.

### Rewriting History: Our Attacks

#### 5.1 Attack #1: Archive-Escape Abuse
**Preliminaries and Attacker:**
The precondition for Archive-Escape Abuse is the presence of an archive-escape vulnerability in the victim snapshot. The potential attacker is the owner of the destination of the archive-escape, to whom the client makes a request for the vulnerable resource. Since the attacker delivers the payload from their own servers at the time of access, this is considered an active attack.

**Attack Concept:**
To execute this attack, the attacker publishes malicious content at the escaping URL. If the archive-escape is to a static resource like an image, the attacker can only affect that resource. If the archive-escape is to a script or stylesheet, the attacker can choose arbitrary malicious code to execute.

**Sequence of Events:**
1. The victim page is published. (Optional: If the attacker is the first-party domain, they can intentionally include requests that result in archive-escapes.)
2. The page is archived as the victim snapshot.
3. When the victim snapshot is loaded, the client browser makes an archive-escape request.
4. The attacker, who owns the domain on which the escaping script is hosted, serves malicious code in response to the archive-escape request. The malicious code runs in the client browser and modifies the appearance of the snapshot, presenting an inaccurate view of the page.

**Proof of Concept:**
We developed a proof-of-concept implementation of Attack #1, demonstrating the ability to attack snapshots of websites over which we have no control and which were archived years ago. Using our measurements (Section 6), we located archive-escape vulnerabilities where the attacker domain was unowned, using WHOIS. We found that `http://web.archive.org/web/20110901233330/reuters.com` generates an archive-escape to `http://cdn.projecthaile.com/js/trb-1.js`. As of March 19, 2017, `projecthaile.com` had no owner. We purchased `projecthaile.com` and hosted our own version of `/js/trb-1.js`, which modifies specific elements of the `reuters.com` snapshot. This attack resulted in the screenshot shown in Figure 1, where we replaced a news article image and headline with our own.

After confirming the attack worked, we disabled it to avoid disrupting the public's view of the snapshot. Additionally, we purchased the remaining unowned domains (without hosting anything from them) to prevent other attackers from buying and using them.

**Advantages and Disadvantages:**
- **Advantages:** This is an active attack, allowing the attacker to modify the attack over time, customize it per client, or disable it entirely.
- **Disadvantages:** The attack is not permanent, and defenses that block archive-escapes are relatively easy for clients to deploy.

#### 5.2 Attack #2: Same-Origin Escape Abuse
**Preliminaries and Attacker:**
Potential Same-Origin Escape attackers include all third-parties embedded in `<iframe>`s at the time of archiving. This attack requires foresight, as the attacker must include their payload inside the `<iframe>` at the time of archiving, making it a passive attack since the payload is stored and delivered by the archive, not directly from the attacker's server at the time of access.

**Attack Concept:**
This attack exploits the lower level of isolation applied by the client browser to frames served from a single origin (the archive's origin) rather than multiple origins, as they are on the live web. The first-party publisher includes the attacker in their page, assuming that any malicious code written by the attacker will be blocked by the Same-Origin Policy. However, this assumption is violated in the archival context.

**Sequence of Events:**
1. A victim site includes a third-party in an `<iframe>`, making them a potential Same-Origin Escape attacker.
2. The third-party attacker publishes malicious code in their `<iframe>`.
3. The page, along with the `<iframe>`, is archived.
4. When the snapshot is loaded, both the page and the `<iframe>` are served from `web.archive.org`. Since they are now served from the same domain, the Same-Origin Policy no longer applies, and the malicious code in the `<iframe>` can make arbitrary modifications to the client's view of the page.

**Proof of Concept:**
For Attack #2, we developed a prototype demonstration against a toy website we created and archived. We published a victim page on the live web, including an `<iframe>` from our third-party domain. Inside the `<iframe>`, we deployed attack code that attempts to modify elements of the first-party page. On the live web, this attack code fails due to the Same-Origin Policy. We then requested that the Wayback Machine "Save Page Now" for our first-party victim page, causing it to archive the page and the attacker's `<iframe>` with its attack code. When viewing the snapshot, both first- and third-party content are served from the same domain, allowing the third-party code to modify the client's view of the snapshot.

**Advantages and Disadvantages:**
- **Advantages:** The prerequisites for performing the attack are minimal, and third-party frames are commonly embedded and trusted by websites. Some third-parties are present on a large fraction of websites, giving certain attackers significant capabilities to modify snapshots.
- **Disadvantages:** The attacker must have foresight, as the attack code and desired changes must be chosen before the time of archiving.

#### 5.3 Attack #3: “Same-Origin Escape” + “Archive-Escape”
**Preliminaries and Attacker:**
Noting the limitation of Attack #2 requiring foresight, we consider a stronger way to use Same-Origin Escapes: Attack #3. This attack uses a Same-Origin Escape to create an intentional archive-escape, allowing the attacker to launch a later attack without foresight. Attack #3 is applicable whenever Attack #2 is applicable, as it begins with a third-party in an `<iframe>` executing Attack #2 to create a later opportunity for Attack #1.

**Attack Concept:**
This attack combines Attacks #1 and #2. The attacker uses a Same-Origin Escape (malicious code in an `<iframe>`) to intentionally cause archive-escapes, with a destination controlled by the attacker, in the snapshot of the victim page. Once this is done, the attacker can perform archive-escape abuse immediately or at a later time.

**Sequence of Events:**
1. The attacker must be a third-party embedded as an `<iframe>` on the target page at the time of publication.
2. The attacker chooses a destination payload URL they control and embeds an archive-escape to that URL as the `src` attribute of a `<script>` tag in their `<iframe>`.
3. The page, along with the `<iframe>`, is archived.
4. At some future time, the attacker chooses and publishes a payload at the archive-escape URL.
5. When a client browser loads the snapshot, the archived `<iframe>` is retrieved, including the script that causes an archive-escape. The browser retrieves the payload and executes it in the context of the `<iframe>`. Since the `<iframe>` is archived, it is not isolated by the Same-Origin Policy, allowing the modern attack script to cause arbitrary modifications to the client's view of the snapshot.

**Proof of Concept:**
Since Attack #3 leverages Attack #2, we created a similar victim/attacker pair of testbed websites. We deployed attack code inside a third-party `<iframe>`, but in this case, our attack code used string concatenation to create an archive-escape to the third-party domain rather than directly modifying the snapshot content. We then hosted the snapshot-modifying code on the live web at the third-party domain.

**Advantages and Disadvantages:**
- **Advantages:** This attack allows archive-escape attacks against a page that does not naturally generate any archive-escapes to the attacker's domain. The archive-escape payload can be chosen after the time of archiving, reducing the need for foresight.
- **Disadvantages:** It is subject to the disadvantages of archive-escape attacks discussed above.

#### 5.4 Attack #4: Anachronism-Injection
**Preliminaries and Attacker:**
The precondition for Anachronism-Injection is a page containing at least one resource that has never been captured by the archive. The potential attacker is the owner of the domain of that never-archived resource, who can publish a malicious version of that resource and cause it to be preserved in the archive as the resource's first (and only) capture.

**Attack Concept:**
The attacker publishes payload code to the missing-resource’s URL on the live web and uses the archive’s "Save Page Now" feature to archive the payload. For example, a snapshot from 2000 might include a script captured in 2000. If that script has never been archived, the owner of the script’s domain can publish a malicious payload at the script’s URL and use the "Save Page Now" feature to create a capture with a 2017 timestamp. Once the missing resource is archived, it will be the only capture of that resource, and its timestamp will always be the nearest neighbor to the timestamp requested in the victim snapshot, despite being 17 years distant. Thus, the payload will be loaded in the context of the victim snapshot, as client requests are redirected to the malicious payload’s timestamp.

**Sequence of Events:**
1. A victim snapshot refers to a vulnerable resource that has never been archived.
2. The attacker, who owns the vulnerable resource’s domain, publishes an attack payload on the live web.
3. The attacker uses the archive’s "Save Page Now" feature to cause the payload to be preserved as the first and only extant capture of the vulnerable resource.
4. When a client browses the victim snapshot, their browser makes a request for the vulnerable resource at the timestamp of the snapshot. The archival front-end redirects the client browser to the malicious, anachronistic capture of the resource, as it has the closest timestamp.

**Proof of Concept:**
As with Attack #1, we demonstrated the Anachronism-Injection attack on snapshots, showing the feasibility and impact of this type of attack.