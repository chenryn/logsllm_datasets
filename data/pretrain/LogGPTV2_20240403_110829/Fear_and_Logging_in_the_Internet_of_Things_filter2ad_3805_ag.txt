[10]
[11]
[12]
[13]
[14]
[15]
[16]
[17]
[18]
[19]
[20]
[21]
[22]
[23]
[24]
[25]
[26]
“Lack of Web and API Authentication Vulnerability in INSTEON Hub,”
https://goo.gl/x165Ja, 2013.
“PROV-Overview: An Overview of the PROV Family of Documents,”
http://www.w3.org/TR/prov-overview/, 2013.
“Events numbers,” https://goo.gl/zmcaUk, 2014.
“3 Types of Software Architecture for Internet of Things Devices,”
https://goo.gl/u9NTXS, 2015.
“China-Made Handheld Barcode Scanners Ship with Spyware,” https:
//goo.gl/KRT6tP, 2015.
“Critical Flaw identiﬁed In ZigBee Smart Home Devices,” https://goo.
gl/BFBa1X, 2015.
“Delay not working,” https://goo.gl/FwBTNp, 2015.
“Smartapps stopped working last night,” https://goo.gl/cP3o9H, 2015.
“GE (Jasco) Z-Wave fan controller troubleshooting,” https://goo.gl/
X7ExFV, 2016.
“Mirai Attacks,” https://goo.gl/QVv89r, 2016.
“Troubleshooting lights that randomly turn off,” https://goo.gl/wkg2R7,
2016.
“Aeon Labs Siren,” https://goo.gl/yHYtG8, 2017.
“Android Things,” https://developer.android.com/things, 2017.
“Apple HomeKit,” http://www.apple.com/ios/home, 2017.
“AST transformations,” https://goo.gl/YtmPD1, 2017.
“Cypher,” https://neo4j.com/developer/cypher-query-language, 2017.
“Groovy Eval,” https://goo.gl/ykU84y, 2017.
“HMAccessory,” https://goo.gl/jeoLk5, 2017.
“How the AWS IoT Platform Works,” https://goo.gl/aaoJ13, 2017.
“Iris by Lowe’s,” https://www.irisbylowes.com/, 2017.
“Neo4j,” https://neo4j.com, 2017.
“Selenium,” http://www.seleniumhq.org, 2017.
“SmartThings,” https://www.smartthings.com, 2017.
“SmartThings API Documentation,” https://goo.gl/pk3aZi, 2017.
“SmartThings Device,” https://goo.gl/D7fQss, 2017.
“SmartThings IDE,” https://graph.api.smartthings.com, 2017.
“SmartThings Privacy Policy,” https://smartthings.com/privacy, 2017.
“The Groovy programming language,” http://groovy-lang.org/, 2017.
“Vera Logs,” http://wiki.micasaverde.com/index.php/Logs, 2017.
“Wink,” https://www.wink.com/, 2017.
[27]
[28]
[29]
[30]
[31] Y. Acar, M. Backes, S. Bugiel, S. Fahl, P. McDaniel, and M. Smith,
“Sok: Lessons learned from android security research for appiﬁed
software platforms,” in IEEE S&P, 2016, pp. 433–451.
[32] M. N. Aman, K. C. Chua, and B. Sikdar, “Secure data provenance for
the internet of things,” in IoTPTS, 2017, pp. 11–14.
I. Analytics, “IoT Platform Comparison: How the 450 providers stack
up,” https://goo.gl/tv6ij4, July 2017.
[33]
[34] S. Babar, A. Stango, N. Prasad, J. Sen, and R. Prasad, “Proposed
embedded security framework for internet of things (iot),” in Wireless
VITAE, 2011, pp. 1–5.
[35] M. Backes, S. Bugiel, and S. Gerling, “Scippa: system-centric ipc
provenance on android,” in ACSAC, 2014, pp. 36–45.
[36] A. Bates, K. Butler, A. Haeberlen, M. Sherr, and W. Zhou, “Let sdn be
your eyes: Secure forensics in data center networks,” in SENT, 2014.
[37] A. Bates, K. R. B. Butler, and T. Moyer, “Take Only What You Need:
Leveraging Mandatory Access Control Policy to Reduce Provenance
Storage Costs,” in TaPP, 2015.
[38] A. Bates, D. Tian, K. R. Butler, and T. Moyer, “Trustworthy Whole-
System Provenance for the Linux Kernel,” in USENIX Security, 2015.
[39] S. Bauer and D. Schreckling, “Data provenance in the internet of
things,” 2013.
[40] A. Chen, Y. Wu, A. Haeberlen, W. Zhou, and B. T. Loo, “The Good, the
Bad, and the Differences: Better Network Diagnostics with Differential
Provenance,” in ACM SIGCOMM, 2016.
J. Cheney, S. Chong, N. Foster, M. Seltzer, and S. Vansummeren,
“Provenance: a future history,” in OOPSLA, 2009, pp. 957–964.
[41]
[42] T. Denning, T. Kohno, and H. M. Levy, “Computer security and the
modern home,” Communications of the ACM, vol. 56, no. 1, 2013.
[43] M. Dietz, S. Shekhar, Y. Pisetsky, A. Shu, and D. S. Wallach, “Quire:
Lightweight provenance for smart phone operating systems.” in USENIX
Security, 2011.
[44] E. Fernandes, J. Jung, and A. Prakash, “Security Analysis of Emerging
Smart Home Applications,” in IEEE S&P, 2016.
[45] E. Fernandes, J. Paupore, A. Rahmati, D. Simionato, M. Conti, and
A. Prakash, “FlowFence: Practical Data Protection for Emerging IoT
Application Frameworks,” in USENIX Security, 2016.
[46] B. Fouladi and S. Ghanoun, “Honey, i’m home!!-hacking z-wave home
automation systems,” Black Hat USA, 2013.
[47] A. Gehani and D. Tariq, “SPADE: Support for Provenance Auditing in
Distributed Environments,” in Middleware, 2012.
J. Gubbi, R. Buyya, S. Marusic, and M. Palaniswami, “Internet of things
(iot): A vision, architectural elements, and future directions,” Future
generation computer systems, vol. 29, no. 7, pp. 1645–1660, 2013.
[48]
[49] R. Hackett, “Amazon echo’s alexa went dollhouse crazy,” http://fortune.
com/2017/01/09/amazon-echo-alexa-dollhouse/, Jan. 2017.
[50] W. U. Hassan, M. Lemay, N. Aguse, A. Bates, and T. Moyer, “To-
wards Scalable Cluster Auditing through Grammatical Inference over
Provenance Graphs,” in NDSS, 2018.
[51] G. Ho, D. Leung, P. Mishra, A. Hosseini, D. Song, and D. Wagner,
locks: Lessons for securing commodity internet of things
“Smart
devices,” in ASIA CCS, 2016.
J. Huang and M. Cakmak, “Supporting mental model accuracy in
trigger-action programming,” in Ubicomp, 2015, pp. 215–225.
[52]
[53] N. Husted, S. Quresi, and A. Gehani, “Android provenance: diagnosing
device disorders,” in TaPP, 2013.
[54] Y. J. Jia, Q. A. Chen, S. Wang, A. Rahmati, E. Fernandes, Z. M. Mao,
and A. Prakash, “ContexIoT: Towards Providing Contextual Integrity
to Appiﬁed IoT Platforms,” in NDSS, 2017.
[55] V. R. Kebande and I. Ray, “A generic digital forensic investigation
framework for internet of things (iot),” in FiCloud, 2016, pp. 356–362.
[56] K. H. Lee, X. Zhang, and D. Xu, “High Accuracy Attack Provenance
via Binary-based Execution Partition,” in NDSS, 2013.
[57] ——, “LogGC: garbage collecting audit log,” in CCS, 2013.
14
[58] S. Ma, X. Zhang, and D. Xu, “ProTracer: Towards Practical Provenance
Tracing by Alternating Between Logging and Tainting,” in NDSS, 2016.
[59] K.-K. Muniswamy-Reddy, D. A. Holland, U. Braun, and M. Seltzer,
“Provenance-aware Storage Systems,” in ATC, 2006.
[60] C. Nandi and M. D. Ernst, “Automatic trigger generation for rule-based
smart homes,” in PLAS, 2016, pp. 97–102.
[61] S. Notra, M. Siddiqi, H. H. Gharakheili, V. Sivaraman, and R. Boreli,
“An experimental study of security and privacy risks with emerging
household appliances,” in CNS, 2014.
[62] T. Oluwafemi, T. Kohno, S. Gupta, and S. Patel, “Experimental security
analyses of non-networked compact ﬂuorescent lamps: A case study of
home automation security,” in LASER, 2013.
[63] E. Oriwoh and P. Sant, “The forensics edge management system: A
concept and design,” in UIC-ATC, 2013, pp. 544–550.
J. Park, D. Nguyen, and R. Sandhu, “A provenance-based access control
model,” in PST, 2012, pp. 137–144.
[64]
[65] S. Perumal, N. M. Norwawi, and V. Raman, “Internet of things
(iot) digital forensic investigation model: Top-down forensic approach
methodology,” in ICDIPC, 2015, pp. 19–23.
[66] D. Pohly, S. McLaughlin, P. McDaniel, and K. Butler, “Hi-Fi: Collecting
High-Fidelity Whole-System Provenance,” in ACSAC, 2012.
[67] E. Ronen and A. Shamir, “Extended functionality attacks on iot devices:
The case of smart lights,” in EuroS&P, 2016, pp. 3–12.
[68] A. Schreiber and R. Struminski, “Visualizing provenance using comics,”
in TaPP, 2017.
[69] V. Sivaraman, D. Chan, D. Earl, and R. Boreli, “Smart-phones attacking
smart-homes,” in WiSec, 2016, pp. 195–200.
[70] V. Sivaraman, H. H. Gharakheili, A. Vishwanath, R. Boreli, and
O. Mehani, “Network-level security and privacy control for smart-home
iot devices,” in WiMob, 2015, pp. 163–167.
[71] S. Suhail, C. S. Hong, Z. U. Ahmad, F. Zafar, and A. Khan, “Introducing
secure provenance in iot: Requirements and challenges,” in SIoT, 2016.
[72] B. Ur, E. McManus, M. Pak Yong Ho, and M. L. Littman, “Practical
trigger-action programming in the smart home,” in CHI, 2014.
[73] Y. Wu, A. Chen, A. Haeberlen, W. Zhou, and B. T. Loo, “Automated
network repair with meta provenance,” in NSDI, 2017.
[74] T. Yu, V. Sekar, S. Seshan, Y. Agarwal, and C. Xu, “Handling a trillion
(unﬁxable) ﬂaws on a billion devices: Rethinking network security for
the internet-of-things,” in HotNets, 2015.
[75] X. Yuan, O. Setayeshfar, H. Yan, P. Panage, X. Wei, and K. H. Lee,
“Droidforensics: Accurate reconstruction of android attacks via multi-
layer forensic logging,” in ASIA CCS, 2017, pp. 666–677.
[76] S. Zawoad and R. Hasan, “Faiot: Towards building a forensics aware
eco system for the internet of things,” in SCC, 2015, pp. 279–284.
[77] W. Zhou, Q. Fei, A. Narayan, A. Haeberlen, B. T. Loo, and M. Sherr,
“Secure Network Provenance,” in SOSP, 2011.
[78] C. B. Zilles and G. S. Sohi, Understanding the backward slices of
performance degrading instructions. ACM, 2000, vol. 28, no. 2.
APPENDIX
A. The Code Structure of an Example Device Handler
Each Device Handler has a parse method which parses the
message of a device and generates corresponding events. For
each capability the device supports, the Device Handler needs
to implement the command methods the capability deﬁnes.
1
2
3
4
5
6
7
8
9
10
11
12
13
definition (name: "Zigbee Switch") {
capability "Actuator"
capability "Switch"
}
def parse(String description) {
def value = zigbee.parse(description)?.text
def name = value in ["on","off"] ? "switch" : null
return createEvent(name: name, value: value)
}
def on() {
zigbee.smartShield(text: "on").format()
}
def off() {
14
15
}
zigbee.smartShield(text: "off").format()
B. Source Code of the LockItWhenILeave SmartApp
The malicious payload in the app queries an attacker site
to get attack command and attack time at installation time.
The attack function checks if the current time is after the
speciﬁed attack time, then sends a message to a phone and
executes the attack command.
1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
preferences {
input "camera", "capability.videoCamera"
input "lock", "capability.lock"
}
def installed() {
subscribe(location, "mode", modeHandler)
checkUpdate()
}
def modeHandler(evt){
if(evt.value == "Away"){
lock.lock()
camera.on()
runIn(60, attack)
}
}
def checkUpdate(){
httpGet("http://attacker.appspot.com") { resp ->
state.command = resp.data.command
state.time = resp.data.time
}
}
def attack() {
if(now() >= state.time){
sendSms("xxx-xxx-xxxx", "Unlock the door!")
settings.each{k,v->
v."$state.command"()
}
checkUpdate()
}
}
C. Source Code of the FaceDoor SmartApp
The malicious payload in the app subscribes sensitive
events of all authorized devices and stores them in the
state.data global variable. At installation time, the app
creates a scheduler which sends the data to an attacker at
midnight every day.
preferences {
input "motion", "capability.motionSensor"
input "camera", "capability.imageCapture"
input "lock", "capability.lock"
}
def installed() {
subscribe(motion, "motion", motionHandler)
subscribe(camera, "image", faceRecognizer)
spy()
schedule("0 0 0 * * ?", sendData)
}
def motionHandler(evt){
if(evt.value == "active"){
camera.take()
}
}
def faceRecognizer(evt){
if(isAuth(evt.value))
lock.unlock()
}
def spy(){
def attrs = ["codeReport","image", "lock"...]
settings.each{k,v-> attrs.each{
subscribe(v.id, it, spyHandler)
}
}
subscribe(location, spyHandler)
}
def spyHandler(evt){
state.data 
38
39
40
41
}
result = resp.data.auth
}
return result;
16