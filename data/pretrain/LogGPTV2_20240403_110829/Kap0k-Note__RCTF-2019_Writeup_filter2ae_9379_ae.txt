    sl = lambda data : p.sendline(data);
    sla = lambda st,data : p.sendlineafter(st,data);
    sa = lambda st,data : p.sendafter(st,data);
    context.log_level = 'DEBUG';
    p = remote("139.180.215.222 ",20000);
    sa("account:","2"*16);
    sa("password:","1"*16 );
    sa("data:",("1"*36+chr(ord('2')^0xcc)+'23456').encode('hex') );
    p.interactive();
    #rctf{f8b1644ac14529df029ac52b7b762493}
### DontEatME
开头有ZwSetInformationThread的反调试，全部patch掉即可，然后伪随机数生成以一串key，来初始化Blowfish，然后中间那一大段就是Blowfish的解密过程，但是我试了一下，好像不太对，应该是作者魔改了某些地方。  
然后这一坨东西呢，唯一的作用就是生成了dword_4053A8这个表
这里就是根据dword_4053A8和一些判断来check，可以直接跑dfs出答案
    dword_4053A8 = [1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 0L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 0L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 0L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 0L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 0L, 1L, 1L, 1L, 1L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 1L, 1L, 1L, 1L, 0L, 1L, 1L, 1L, 1L, 0L, 1L, 1L, 1L, 1L, 1L, 0L, 1L, 1L, 1L, 1L, 0L, 1L, 1L, 1L, 1L, 0L, 1L, 1L, 1L, 1L, 1L, 0L, 1L, 1L, 1L, 1L, 0L, 1L, 1L, 1L, 1L, 0L, 0L, 0L, 0L, 1L, 1L, 0L, 1L, 1L, 1L, 1L, 0L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 0L, 1L, 1L, 0L, 1L, 1L, 1L, 1L, 0L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 0L, 1L, 1L, 0L, 1L, 1L, 1L, 1L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 1L, 1L, 0L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 0L, 1L, 1L, 1L, 1L, 1L, 1L, 0L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L]
    b = [0x61,0x64,0x73,0x77,0]
    v32 = 10;
    v33 = 0;
    v34 = 5;
    v35 = 160;
    def get(x):
        global v32;
        global v33;
        global v34;
        global v35;
        if (x==0x61):
            v34-=1;
        if (x==0x64):
            v34+=1;
        if (x==0x73):
            v32+=1;
            v35+=16;
        if (x==0x77):
            v32-=1;
            v35-=16;
    def recover(x):
        global v32;
        global v33;
        global v34;
        global v35;
        if (x==0x61):
            v34+=1;
        if (x==0x64):
            v34-=1;
        if (x==0x73):
            v32-=1;
            v35-=16;
        if (x==0x77):
            v32+=1;
            v35+=16;
    ans = [0]*16;
    def dfs(x):
        global v32;
        global v33;
        global v34;
        global v35;
        if x==16:
            if v32==4 and v34==9:
                print ans;
                return ;
            else :
                return;
        for j in b:
            get(j);
            ans[x] = j;
            if dword_4053A8[v35+v34]!=1:
                dfs(x+1);
            recover(j);
        return ;
    dfs(0);
可以发现只有唯一一组解：[100, 100, 100, 100, 119, 119, 119, 97, 97, 97, 119, 119, 119,
100, 100, 100]得到加密后的结果之后，就得逆那个Blowfish，由于不知道作者魔改了什么地方，因此我只好自己手动求逆了
    key_table= [3240133568, 1745476834, 3452267107, 1321242865, 569233882, 3262172914, 804074711, 2212451896, 3586228949, 3213295876, 2580307897, 3987242710, 844129917, 1301868125, 523187267, 1271787320, 262594588, 3722290984]
    t4= [1168098725, 2143783412, 4223038891, 1704033917, 4178117343, 
    ......此处应有省略号......
    4234728569, 227098560, 3450504956, 490211951]
    def f(x):
        a1 = x&0xff;
        a2 = (x&0xff00)>>8;
        a3 = (x&0xff0000)>>16;
        a4 = (x&0xff000000)>>24;
        return t1[a1]+( t2[a2]^(t3[a3]+t4[a4]) );
    def decrypt(xl,xr):
        v10 = 17;
        i = 0;
        for i in range(16):
            xl = xl ^ key_table[v10];
            v10-=1;
            temp = xl;
            xl = xr ^ f(xl);
            xr = temp;
            xl &=0xffffffff;
            xr &=0xffffffff;
            # print i,hex(xl),hex(xr),v10;
        xr^=key_table[0];
        xl^=key_table[1];
        return hex(xr),hex(xl);
    def encrypt(xl,xr):
        v10 = 2;
        i = 0;
        xr^=key_table[0];
        xl^=key_table[1];
        for i in range(16):
            pre_xl = xr ^ key_table[v10];
            v10+=1;
            xr = f(xr)^xl;
            xl  = pre_xl;
            xl &=0xffffffff;
            xr &=0xffffffff;
            # print i,hex(xl),hex(xr),v10;
        return hex(xl),hex(xr);
    a = "64646464777777616161777777646464"
    ans = ""
    for i in range(0,len(a),16):
        a1 = int(a[i:i+8],16);
        a2 = int(a[i+8:i+16],16);
        a1,a2 = encrypt(a2, a1);
        ans +=a1[2:-1];
        ans +=a2[2:-1];
    print ans,len(ans);
    # RCTF{db824ef8605c5235b4bbacfa2ff8e087}
### crack
限制程序输入的前512位只能是0 or
1，然后会根据你的输入来解密一个函数，但由于最后的函数是未知的，因此直接求逆不可能，但程序限制了v27，也就是根据输入取解密后的值x，然后v27-=x，最后要求v27==0，乍一看这只能爆破，但其实猜想一下要使程序能用非爆破的方式求解的话，v27很可能是一个特殊的数字，例如最大值，最小值，如果这么一想，那这其实就是一个在矩阵里按照特殊规则取数，然后求最大值的问题，那么这其实就是非常一个简单的dp问题`f[i][j]=max(f[i-1][j],f[i-1][j-1])+a[i][j]`  
贴一下脚本，写的很急，很丑，且因为担心有多解，还加了一些判断
    #include
    using namespace std;
    unsigned long long f[1111][1111];
    unsigned long long  a[1111][1111];
    unsigned long long t=0;
    int num=0;
    struct ha{
        int v[20];
        int num;
    };
    ha c[1111][1111];
    void get(int x,int y){
        if (x1) {
            cout>a[i][j];
                //cout=0x100758E540F){
                    get(i,j);cout<<endl;
                    cout<<"i get one "<<i<<" "<<j<<"  "<<hex<<f[i][j]<<endl;
                }
            }
        }
    }
可以发现v27的值确实是最大值，且是唯一解  

然后我们动态跟一下解密后的函数: sub_431A020，发现是个vm
先打印一下日志，看看程序在干啥
粗略的打印了一下
    00 Mov reg[0] , 0x26a
    03 Mov reg[1] , reg[0]
    02 reg[0]=input[0]
    1a 01 Mov reg[1] , 0x30  input[i]-=0x30
    0c Sub reg[0] , reg[1]
    03 Mov reg[1] , reg[0]
    ......此处应有省略号......
    06 reg[0]=reg[6] (0x11)
    01 Mov reg[1] , 0x7
    0d Mul reg[0] , reg[1]
    01 Mov reg[1] , 0xf423f
    16 reg[0] == reg[1] reg[0]=0  //check
    01 Mov reg[1] , 0xc36
    1a jump c36
    00 Mov reg[0] , 0x928a000
逻辑很简单
    input="123"
    for i in range(len(input)):
        v6+= (ord(input[i])-0x30)<<i
        print v6;
    print hex(v6);
    # v6*7 == 0xf423f
因为长度是未知的，因此我随便找了一个解79889000968999  
（注意，答案是分两部分，这是第二部分的）  
带到vm里，发现指令数暴增，且由于我这个vm模拟的不全面，还会报错，大致分析了一下后面的功能，可以发现它貌似也在解密什么东西，最主要的是，后面的操作都和input没啥关系，因此直接将第一轮的答案+第二轮带入