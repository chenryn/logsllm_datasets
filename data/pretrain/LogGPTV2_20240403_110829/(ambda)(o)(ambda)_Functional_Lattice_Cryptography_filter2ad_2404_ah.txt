rings—is very natural using the generic pair type (,): whenever types a and b respectively
represent rings 𝐴 and 𝐵, the pair type (a,b) represents the product ring 𝐴 × 𝐵. This just
requires deﬁning the obvious instances of Additive and Ring for (a,b)—which in fact
has already been done for us by the numeric prelude. Products of more than two rings are
immediately supported by nesting pairs, e.g., ((a,b),c), or by using higher-arity tuples
like (a,b,c). A ﬁnal nice feature is that a pair (or tuple) has ﬁxed representation size if
45
all its components do, so arrays of pairs can be stored directly in “unboxed” form, without
requiring any layer of indirection.
3.2.2
Reduce and Lift
Two basic, widely used operations are reducing a Z-element to its residue class in Z𝑞,
and lifting a Z𝑞-element to its smallest integer representative, i.e., in Z ∩ [− 𝑞
2). These
operations are examples of the natural homomorphism, and canonical representative map,
2, 𝑞
for arbitrary quotient groups. Therefore, we deﬁne class (Additive a, Additive b)
=> Reduce a b to represent that b is a quotient group of a, and class Reduce a b =>
Lift b a for computing canonical representatives.4 These classes respectively introduce
the functions
reduce :: Reduce a b => a -> b
lift
:: Lift
b a => b -> a
where reduce ∘ lift should be the identity function.
Instances of these classes are straightforward. We deﬁne an instance Reduce z
(ZqBasic q z) for any suitable integer type z and q representing a modulus that ﬁts
within the precision of z, and a corresponding instance for Lift. For product groups (pairs)
used for CRT representation, we deﬁne the natural instance Reduce a (b1,b2) whenever
we have instances Reduce a b1 and Reduce a b2. However, we do not have (nor do we
need) a corresponding Lift instance, because there is no sufﬁciently generic algorithm to
combine canonical representatives from two quotient groups.
3.2.3
Rescale
Another operation commonly used in lattice cryptography is rescaling (sometimes also called
rounding) Z𝑞 to a different modulus. Mathematically, the rescaling operation ⌊·⌉𝑞′ : Z𝑞 →
4Precision issues prevent us from merging Lift and Reduce into one class. For example, we can reduce an
Int into Z𝑞1 × Z𝑞2 if both components can be represented by Int, but lifting may cause overﬂow.
46
Z𝑞′ is deﬁned as
⌊︁ 𝑞′
⌉︁
𝑞 · (𝑥 + 𝑞Z)
⌉︁
⌊︁ 𝑞′
𝑞 · 𝑥
=
⌊𝑥 + 𝑞Z⌉𝑞′ :=
+ 𝑞′Z ∈ Z𝑞′,
(3.2.1)
where ⌊·⌉ denotes rounding to the nearest integer. (Notice that the choice of representa-
tive 𝑥 ∈ Z has no effect on the result.) In terms of the additive groups, this operation is at
least an “approximate” homomorphism: ⌊𝑥 + 𝑦⌉𝑞′ ≈ ⌊𝑥⌉𝑞′ + ⌊𝑦⌉𝑞′, with equality when 𝑞|𝑞′.
We represent the rescaling operation via class (Additive a, Additive b) => Rescale
a b, which introduces the function
rescale :: Rescale a b => a -> b
Instances. A straightforward instance, whose implementation just follows the mathemati-
cal deﬁnition, is Rescale (ZqBasic q1 z) (ZqBasic q2 z) for any integer type z and
types q1, q2 representing moduli that ﬁt within the precision of z.
More interesting are the instances involving product groups (pairs) used for CRT repre-
sentation. A naïve implementation would apply Equation (3.2.1) to the canonical represen-
tative of 𝑥 + 𝑞Z, but for large 𝑞 this would require unbounded-integer arithmetic. Instead,
following ideas from [GHS12c], here we describe algorithms that avoid this drawback.
To “scale up” 𝑥 ∈ Z𝑞1 to Z𝑞1𝑞2
∼= Z𝑞1 ×Z𝑞2 where 𝑞1 and 𝑞2 are coprime, i.e., to multiply
by 𝑞2, simply output (𝑥 · 𝑞2 mod 𝑞1, 0). This translates easily into code that implements
the instance Rescale a (a,b). Notice, though, that the algorithm uses the value of the
modulus 𝑞2 associated with b. We therefore require b to be an instance of class Mod, which
exposes the modulus value associated with the instance type. The instance Rescale b
(a,b) works symmetrically.
To “scale down” 𝑥 = (𝑥1, 𝑥2) ∈ Z𝑞1 × Z𝑞2
∼= Z𝑞1𝑞2 to Z𝑞1, we essentially need to divide
by 𝑞2, discarding the (signed) remainder. To do this,
1. Compute the canonical representative ¯𝑥2 ∈ Z of 𝑥2.
47
(Observe that (𝑥′
𝑥 = (𝑥1, 𝑥2).)
1 = 𝑥1 − (¯𝑥2 mod 𝑞1), 0) ∈ Z𝑞1 × Z𝑞2 is the multiple of 𝑞2 closest to
2. Divide by 𝑞2, outputting 𝑞−1
2
· 𝑥′
1 ∈ Z𝑞1.
The above easily translates into code that implements the instance Rescale (a,b) a, using
the Lift and Reduce classes described above. The instance Rescale (a,b) b works
symmetrically.
3.2.4
Gadget, Decompose, and Correct
Many advanced lattice cryptosystems use special objects called gadgets [MP12], which
support certain operations as described below. For the purposes of this work, a gadget
is a tuple over a quotient ring 𝑅𝑞 = 𝑅/𝑞𝑅, where 𝑅 is a ring that admits a meaningful
“geometry.” For concreteness, one can think of 𝑅 as merely being the integers Z, but later
on we generalize to cyclotomic rings.
Perhaps the simplest gadget is the powers-of-two vector g = (1, 2, 4, 8, . . . , 2ℓ−1)
over Z𝑞, where ℓ = ⌈lg 𝑞⌉. There are many other ways of constructing gadgets, either
“from scratch” or by combining gadgets. For example, one may use powers of integers other
than two, mixed products, the Chinese Remainder Theorem, etc. The salient property of a
gadget g is that it admits efﬁcient algorithms for the following tasks:
1. Decomposition: given 𝑢 ∈ 𝑅𝑞, output a short vector x over 𝑅 such that ⟨g, x⟩ =
g𝑡 · x = 𝑢 (mod 𝑞).
2. Error correction: given a “noisy encoding” of the gadget b𝑡 = 𝑠 · g𝑡 + e𝑡 mod 𝑞,
where 𝑠 ∈ 𝑅𝑞 and e is a sufﬁciently short error vector over 𝑅, output 𝑠 and e.
48
A key property is that decomposition and error-tolerant encoding relate in the following way
(where the notation is as above, and ≈ hides a short error vector over 𝑅):
𝑠 · 𝑢 = (𝑠 · g𝑡) · x ≈ b𝑡 · x (mod 𝑞).
We represent gadget vectors and their associated operations via the following classes:
class Ring u => Gadget gad u where
gadget
::
Tagged gad [u]
encode
:: u -> Tagged gad [u]
class (Gadget gad u, Reduce r u) => Decompose gad u r where
decompose :: u -> Tagged gad [r]
class Gadget gad u => Correct gad u where
correct
:: Tagged gad [u] -> (u, [LiftOf u])
The class Gadget gad u says that the ring u supports a gadget vector indexed by the type
gad; the gadget vector itself is given by the term gadget. Note that its type is actually
Tagged gad [u]: this is a newtype for [u], with the additional type-level context Tagged
gad indicating which gadget the vector represents (recall that there are many possible
gadgets over a given ring). This tagging aids safety, by preventing the nonsensical mixing
of values associated with different kinds of gadgets. In addition, Haskell provides generic
ways of “promoting” ordinary operations to work within this extra context. (Formally, this
is because Tagged gad is an instance of the Functor class.)
The class Decompose gad u r says that a u-element can be decomposed into a vector
of r-elements (with respect to the gadget index by gad), via the decompose method.5 The
5For simplicity, here we have depicted r as an additional parameter of the Decompose class. Our actual
code adopts the more idiomatic practice of using a type family DecompOf u, which is deﬁned by each instance
of Decompose.
49
class Correct gad u says that a noisy encoding of a u-element (with respect to the gadget)
can be error-corrected, via the correct method.
Note that we split the above functionality into three separate classes, both because their
arguments are slightly different (e.g., Correct has no need for the r type), and because in
some cases we have meaningful instances for some classes but not others.
Instances. For our type ZqBasic q z representing Z𝑞, we give a straightforward instan-
tiation of the “base-𝑏” gadget g = (1, 𝑏, 𝑏2, . . .) and error correction and decomposition
algorithms, for any positive integer 𝑏 (which is represented as a parameter to the gadget
type). In addition, we implement the trivial gadget g = (1) ∈ Z1
𝑞, where the decomposition
algorithm merely outputs the canonical Z-representative of its Z𝑞-input. This gadget turns
out to be useful for building nontrivial gadgets and algorithms for product rings, as described
next.
For the pair type (which, to recall, we use to represent product rings in CRT represen-
tation), we give instances of Gadget and Decompose that work as follows. Suppose we
have gadget vectors g1, g2 over 𝑅𝑞1, 𝑅𝑞2, respectively. Then the gadget for the product ring
𝑅𝑞1 × 𝑅𝑞2 is essentially the concatenation of g1 and g2, where we ﬁrst attach 0 ∈ 𝑅𝑞2 com-
ponents to the entries of g1, and similarly for g2. The decomposition of (𝑢1, 𝑢2) ∈ 𝑅𝑞1 × 𝑅𝑞2
with respect to this gadget is the concatenation of the decompositions of 𝑢1, 𝑢2. All this
translates easily to the implementations
gadget = (++)  (map (,zero)  gadget)  (map (zero,)  gadget)
decompose (a,b) = (++)  decompose a  decompose b
In the deﬁnition of gadget, the two calls to map attach zero components to the entries of
g1, g2, and (++) appends the two lists. (The syntax ,  is standard applicative notation,
which promotes normal functions into the Tagged gad context.)
50
3.2.5
CRTrans
Fast multiplication in cyclotomic rings is made possible by converting ring elements to
the Chinese remainder representation, using the Chinese Remainder Transform (CRT)
over the base ring. This is an invertible linear transform akin to the Discrete Fourier
Transform (over C) or the Number Theoretic Transform (over appropriate Z𝑞), which has a
fast algorithm corresponding to its “sparse decomposition” (see Equation 3.3.1 and [LPR13a,
Section 3] for further details).
Applying the CRT and its inverse requires knowledge of certain roots of unity, and the
inverse of a certain integer, in the base ring. So we deﬁne the synonym type CRTInfo r =
(Int -> r, r), where the two components are (1) a function that takes an integer 𝑖 to the
𝑖th power of a certain principal6 𝑚th root of unity 𝜔𝑚 in r, and (2) the multiplicative inverse
of ˆ𝑚 in r, where ˆ𝑚 = 𝑚/2 if 𝑚 is even, else ˆ𝑚 = 𝑚. We also deﬁne the class CRTrans,
which exposes the CRT information:
class (Monad mon, Ring r) => CRTrans mon r where
crtInfo :: Int -> mon (CRTInfo r)
Note that the output of crtInfo is embedded in a Monad mon, the choice of which can reﬂect
the fact that the CRT might not exist for certain 𝑚. For example, the CRTrans instance for
the complex numbers C uses the trivial Identity monad, because the complex CRT exists
for every 𝑚, whereas the instance for ZqBasic q z uses the Maybe monad to reﬂect the fact
that the CRT may not exist for certain combinations of 𝑚 and moduli 𝑞.
We give nontrivial instances of CRTrans for ZqBasic q z (representing Z𝑞) for prime 𝑞,
and for Complex Double (representing C). In addition, because we use tensors and cyclo-
tomic rings over base rings like Z and Q, we must also deﬁne trivial instances of CRTrans
for Int, Int64, Double, etc., for which crtInfo always returns Nothing.
6A principal 𝑚th root of unity in r is an element 𝜔𝑚 such that 𝜔𝑚
𝑚 − 1 is not a zero divisor
for every prime 𝑡 dividing 𝑚. Along with the invertibility of ^𝑚 in r, these are sufﬁcient conditions for the
index-𝑚 CRT over r to be invertible.
𝑚 = 1, and 𝜔𝑚/𝑡
51
3.2.6 Type-Level Cyclotomic Indices
Recall that there is one cyclotomic ring for every positive integer 𝑚. The index 𝑚 of a
cyclotomic ring, and in particular its factorization, plays a major role in the deﬁnitions of
the ring operations. For example, the index-𝑚 “Chinese remainder transform” is similar to a
mixed-radix FFT, where the radices are the prime divisors of 𝑚. In addition, cyclotomic
rings can sometimes be related to each other based on their indices. For example, the 𝑚th
cyclotomic can be seen as a subring of the 𝑚′th cyclotomic if and only if 𝑚|𝑚′; the largest
common subring of the 𝑚1th and 𝑚2th cyclotomics is the gcd(𝑚1, 𝑚2)th cyclotomic, etc.
In Λ∘𝜆, a cyclotomic index 𝑚 is speciﬁed by an appropriate type m, and the data types
representing cyclotomic rings (and their underlying coefﬁcient tensors) are parameterized
by such an m. Based on this parameter, Λ∘ 𝜆 generically derives algorithms for all the
relevant operations in the corresponding cyclotomic. In addition, for operations that involve
more than one cyclotomic, Λ∘𝜆 expresses and statically enforces (at compile time) the laws
governing when these operations are well deﬁned.
We achieve the above properties using Haskell’s type system, with the help of the pow-
erful data kinds extension [Yor+12] and the singletons library [EW12; ES14]. Essentially,
these tools enable the “promotion” of ordinary values and functions from the data level to
the type level. More speciﬁcally, they promote every value to a corresponding type, and
promote every function to a corresponding type family, i.e., a function on the promoted
types. We stress that all type-level computations are performed at compile time, yielding the
dual beneﬁts of static safety guarantees and no runtime overhead.
We provide a brief overview of the interface for type-level factored numbers below. In
subsection 3.2.7 below we give more details on how cyclotomic indices are represented and
operated upon at the type level. Then in subsection 3.2.8 we describe how all this is used to
generically derive algorithms for arbitrary cyclotomics.
52
Interface. Concretely, Λ∘𝜆 deﬁnes a special data type Factored that represents positive
integers by their factorizations, along with several functions on such values. Singletons
then promotes all of this to the type level. This yields concrete “factored types” Fm for
various useful values of m, e.g., F1, . . . , F100, F128, F256, F512, etc. In addition, it yields
the following type families, where m1, m2 are variables representing any factored types:
• FMul m1 m2 (synonym: m1 * m2) and FDiv m1 m2 (synonym: m1 / m2) respectively
yield the factored types representing 𝑚1 · 𝑚2 and 𝑚1/𝑚2 (if it is an integer; else it
yields a compile-time error);
• FGCD m1 m2 and FLCM m1 m2 respectively yield the factored types representing
gcd(𝑚1, 𝑚2) and lcm(𝑚1, 𝑚2);
• FDivides m1 m2 yields the (promoted) boolean type True or False, depending on
whether 𝑚1|𝑚2. In addition, m1 ‘Divides‘ m2 is a convenient synonym for the
constraint True ~ Divides m1 m2. (This constraint is used section 3.5 below.)
Finally, Λ∘𝜆 also provides several entailments representing number-theoretic laws that
the compiler itself cannot derive from our data-level code. For example, transitivity of the
“divides” relation is represented by the entailment
(k ‘Divides‘ l, l ‘Divides‘ m) :- (k ‘Divides‘ m)
which allows the programmer to satisfy the constraint 𝑘|𝑚 in any context where the con-
straints 𝑘|ℓ and ℓ|𝑚 are satisﬁed.
3.2.7 Promoting Factored Naturals
Operations in a cyclotomic ring are governed by the prime-power factorization of its index.
Therefore, we deﬁne the data types PrimeBin, PrimePower, and Factored to represent
factored positive integers (here the types Pos and Bin are standard Peano and binary
encodings, respectively, of the natural numbers):
53
-- Invariant: argument is prime
newtype PrimeBin
= P
Bin