any server.
Policies A monitor policy speciﬁes what operations the
slave can ask the monitor to perform. The monitor pol-
icy is written into the monitor itself as C code. Therefore,
our model does not limit the complexity or detail of poli-
cies. Our approach guarantees the enforcement of poli-
cies on privileged resources or data since all privileged
calls must go through the monitor.
Many policies are application speciﬁc, and thus need to
1Note our annotations are similar to, but not the same as, subtypes.
be supplied by the programmer. However, there are sev-
eral policies that can be automatically generated. For ex-
ample, many compilers create control ﬂow graphs during
optimization. The control ﬂow graph (CFG) can be used
to build a ﬁnite state machine (FSM) model of possible
privileged calls.
The FSM of privileged calls is produced by the CFG by
ﬁrst removing edges in the CFG that do not lead to a priv-
ileged call. The resulting FSM is collapsed by removing
unprivileged calls. The result is a directed graph of valid
privileged call sequences. The modiﬁed FSM is saved to
a ﬁle, and read in by the monitor at run time during ini-
tialization. Requests from the slave are checked against
the FSM by the monitor: a call is allowed only if there is
an edge from the proceeding call to the current call in the
FSM. As a base case, the monitor initialization routine
(privwrap init) is always allowed.
One potential problem with FSM’s is the call policy may
still be too coarse-grained. For example, if a privileged
call f is made during a loop, the policy will allow an
inﬁnite sequence of calls to f. One approach to further
limit FSM’s is to create a PDA based upon the source.
The PDA may further limit the number of allowable call
sequences.
Others have shown how to automatically create FSM’s,
PDA’s, and similar structures which can be used to limit
the call sequences which can be used by the monitor to
limit call sequences [9, 15, 22, 30, 35, 40]. We do not
duplicate previous work here, as our framework supports
ready integration of ﬁne-grained policies. The policies
are written into the monitor after partitioning. Policies
can be as expressive as needed, since they can be written
directly into the monitor source code.
Note that because our approach enables the monitor to
export a limited interface, policies need only be written
for privileged operations. This fact may make it easier to
write a more precise policy than the system call interpo-
sition approach.
In system call interposition, a model
is needed for both privileged and unprivileged system
calls. The policy in system call interposition is usually
more complex as the number of system calls increases.
Privilege separation limits the number of privileged op-
erations to only the interface exported by the monitor,
which may reduce the complexity of the resulting policy.
1.
2.
int
attribute ((priv)) a;
attribute ((priv)) void
myfunction();
3.
int b = f(a);
Figure 3: Line 1 marks a variable a as privileged. The
annotation is added because the programmer expects a
to be initialized by a privileged function call, f in this
example. a is transmitted to the monitor which executes
f on behalf of the slave. Further, b will also be marked
privileged, and any subsequent use of b will be executed
in the monitor. On line 2, we mark the myfunction
function privileged. Any call to this function will be ex-
ecuted in the monitor.
leged). The purpose of a downgrade is to allow otherwise
privileged data to ﬂow from the monitor to the slave.
Consider a program that reads a ﬁle containing a pub-
lic/private key pair. Accessing the ﬁle is privileged, since
it contains the private key. However, the public key is not
privileged. With privilege separation, the monitor has
access to the ﬁle, while the slave does not. Program-
mers are free to deﬁne cleansing functions that down-
grade data. In the scenario above, the programmer writes
an extension to the monitor that returned only the pub-
lic key to the slave, while maintaining the private key in
the monitor. Cleansing functions are application speciﬁc,
and should be provided by the user.
3 The design and implementation of Priv-
trans
We ﬁrst discuss at a high level the process of running
Privtrans on existing source code to produce the moni-
tor and slave source code. We then discuss how Priv-
trans implements each step in the process, and how we
reduce the number of calls from the slave to the moni-
tor. We also show how the programmer can easily extend
Privtrans for new programs using our base RPC library.
We conclude this section by describing the monitor state
store.
3.1 High-level overview
Downgrading data Since the monitor mediates all ac-
cess to privileged data, it is sometimes useful to down-
grade data (i.e., make previously privileged data unprivi-
We begin by describing the process of adding privilege
separation at a high level. Privtrans takes as input source
code that we wish to have rewritten as two separate pro-
the monitor source code and the slave source
grams:
code.
Annotations First, the programmer adds a few annota-
tions to the source code indicating privileged operations.
Annotations are in the form of C attributes. An annota-
tion may appear on a function deﬁnition or declaration,
or on a variable declaration, such as in Figure 3.
Attribute propagation Privtrans propagates the pro-
grammer’s initial annotations automatically. After prop-
agation, a call site may either have a privileged argument,
or the result may be assigned to a privileged variable.
Additionally, a function callee itself may be marked priv-
ileged. We wish to have the slave ask the monitor to ex-
ecute any such call on its behalf.
Call to the monitor Privtrans automatically changes
a call site that is identiﬁed privileged to call a corre-
sponding wrapper function, called a privwrap function.
A privwrap function asks the monitor to call the correct
function on the slave’s behalf by: 1) marshaling the ar-
guments at the call site, 2) sending those arguments to
the monitor, along with a vector describing the run-time
privileged status of each variable, 3) waiting for the mon-
itor to respond, 4) demarshaling any results, and 5) ar-
range for the proper results to be returned to the slave.
Execution and return in monitor Upon receiving a
message from the slave, the monitor calls the correspond-
ing privunwrap function. The privunwrap function 1) de-
marshals the arguments sent to the monitor, 2) checks the
policy to see if the call is allowed, 3) looks up any priv-
ileged actuals described as privileged in its state store,
4) performs the function requested, 5) if the results are
marked privileged, hashes the results to its state store and
sets the return value of the function to be the hash index,
and 6) marshals the return values and sends them back to
the slave.
Starting the monitor Privtrans inserts a call
to
priv init as the ﬁrst executable line in main.
priv init can optionally fork off the monitor process
and drop the privileges of the slave, or else it contacts an
already running monitor. The slave then waits for notiﬁ-
cation from the monitor that any initialization is success-
ful. Initialization of the monitor consists of initializing
Figure 4: The output of translation partitions the input
source code to create two programs:
the monitor and
the slave. RPC between the monitor and slave is ac-
complished via the privwrap/privunwrap functions. The
monitor may consult a policy engine when asked to per-
form a privileged function. Finally, the monitor may save
results from a function call request in case later refer-
enced by the slave.
the state store, along with any policy-dependent initial-
ization. After priv init returns, the slave can begin
main execution.
This process is depicted in Figure 4. We detail each stage
in the following subsections.
3.2 Locating privileged data
Privtrans uses CIL [22] to read in and transform the
source code. Privtrans performs inter-procedural static
analysis to locate all potentially privileged call sites. To
reduce overhead, Privtrans also inserts run-time checks
to limit the number of calls from the slave to the monitor.
3.2.1 Static analysis and rewriting privileged calls
The programmer annotates a few variables or functions
using C attributes. Privtrans uses two attributes, priv and
unpriv, used to respectively mark privileged and unprivi-
leged variables or functions. The programmer need only
use the unpriv attribute when casting a privileged vari-
able to unprivileged. Privtrans performs propagation of
the initial annotations by adding the priv to any variable
that may become privileged.
3.2.2 Polymorphic functions
Annotations are required since a program may rely upon
conﬁguration ﬁles, environment variables, etc., which
determine whether a call will be privileged. For example,
web-server’s typically read a conﬁguration ﬁle which de-
termine whether to bind to a privileged port (e.g., port
80) or not. Understanding application-speciﬁc conﬁgu-
rations is beyond the scope of static analysis.
Recall that the original program accesses privileged re-
sources through a function call. The slave should ask
the monitor to execute any call where the arguments, re-
turn value, or callee function is marked privileged. Priv-
trans rewrites a call to f that may be privileged to the
corresponding wrapper function privwrap f. Wrap-
per functions such as privwrap f use the underlying
RPC mechanism to ask the monitor to call a function (f
in this case), wait for the reply, and arrange for the proper
return values.
Privtrans static analysis is standard meet-over-all-paths
data-ﬂow analysis: the priv attribute is added to a vari-
able if it can be assigned to by another privileged vari-
able over any path in the program. Privtrans performs
inter-procedural analysis by iteratively adding the privi-
leged attribute across deﬁned functions. Since we do not
have the function body for procedures declared but not
deﬁned, we assume that the privileged attribute could be
added to any pointer argument, i.e., a pointer value could
be a return value.
The priv attribute can be added incrementally to the
source code. Without any privileged annotations, the en-
tire input program will be rewritten as the slave. After
adding a priv attribute, the resulting slave and monitor
can be run to see if they work. If an attribute is missing
the slave will attempt a call without appropriate privi-
leges, and the call will fail. Regression test suites can be
used to insure that the slave and monitor cooperate at all
necessary privileged call sites.
The result of the propagation phase is a set of calls that
potentially should be executed by the monitor. Our anal-
ysis is conservative 2, so any call site that may be privi-
leged is considered privileged. In 3.2.3 we explain how
we augment our static analysis with run-time information
to reduce unnecessary calls to the monitor.
2We do not handle function pointers. The programmer can add the
priv attribute to the pointed-to function if necessary.
During static analysis, we may determine a function
callee is polymorphic, i.e., some calls to the function
are privileged and some are not. Privtrans uses variable
annotations with the priv attribute to support polymor-
phism. If the priv attribute appears on a variable used
as an argument to a function, or assigned to the result
of a function, then the call is considered privileged and
the caller should ask the monitor to perform the called
function.
Consider Figure 5(a). On line 3 there are two calls to
function f2. The ﬁrst call passes a, a privileged vari-
able, while the second call passes b, an unprivileged
variable. The attribute distinguishes between the privi-
leged and unprivileged call. In this example, the ﬁrst call
would be rewritten as privwrap f2, while the second
call would remain unchanged.
3.2.3
Improving static analysis with dynamic infor-
mation
Since static analysis is conservative, not all potential
calls to the monitor are really privileged during run-time.
An example of such a call is given in Figure 5(a). After
static analysis, we determine that f may be a privileged
call, thus we should invoke privwrap f which calls
the monitor to call f.
However, every time the slave asks the monitor to per-
form a call, the slave suffers the overhead of 1) marshal-
ing all arguments on the slave and demarshaling them in
the monitor, 2) calling the monitor, which can result in a
context switch if the monitor and slave are on the same
host, and 3) marshaling the results in the monitor and de-
marshaling them on the slave. Thus, we want to make the
slave only ask the monitor to perform a call if absolutely
necessary.
Normally expensive context or path sensitive analysis is
used to improve the accuracy of simple dataﬂow anal-
ysis. A key insight is that during the process of trans-
lating the input code into the monitor and slave, we can
insert dynamic checks to limit the number of calls from
the slave to the monitor. The dynamic checks allow for
the same or better accuracy in determining privileged call
sites than full context and path sensitive analysis.
In order to limit the number of calls to the monitor, we
add an extra vector to the slave for every privileged callee
1.
2.
3.
4.
5.
attribute ((priv)) a;
int
int b = 0;
f2(a); f2(b);
if ( some expression ) b = a;
b = f(arg1, arg2);
(a) The call to f should be executed in the monitor when the
if statement on line 4 is true, else the call can be executed by
the slave directly. We cannot know statically which case will
happen. Also, on line 3 we encounter the polymorphic function
f2. The ﬁrst call to f2 is privileged, the second is not.
attribute ((priv)) a;
1.
2.
3.
{E UNPRIV,E UNPRIV,E UNPRIV};
4.
5.
int
int b = 0;
int privvec f[3] =
int privvec f2[1] = {E PRIV};
privwrap f2(a, privvec f2);
if ( some expression )
f2(b);
6.
{ privvec f[0] = E PRIV; b = a; }
7.
b = privwrap f(arg1, arg2,
privvec f);
(b) We add a vector describing the run-time privilege status of
the return value and each argument to privwrap f. Initially,
the vector indicates that none of the arguments are privileged.
If the if statement on line 4 is true, we mark b as privileged
and thus f will be executed in the monitor.
Figure 5: Privtrans rewrites the code on the left to make use of the monitor, as shown on the right.
(as determined by static analysis). The vector contains
the current run-time privilege status of variables used at a
possibly privileged call site we found with static analysis.
Each position in the vector contains one of two values:
E PRIV for privileged or E UNPRIV for unprivileged.
An example is given in Figure 5(b).
The vector
“privvec f” describes the run-time privilege status of the
return value and arguments of the call to “f”, read left
to right. When the vector contains only E UNPRIV, the
wrapper “privwrap f” can decide to make the call locally
instead of calling the monitor.
It is safe to use the dynamic information even if the slave
is compromised. Consider the two cases of a compro-
mise: a privileged call is made unprivileged or an other-
wise unprivileged call is considered privileged. The for-
mer case is always safe, since it does not give an attacker
any privileges.
In the latter case, the monitor receives a spurious call that
the slave should be able to make itself. Such spurious
calls are also safe. First, since the slave could have made
the call by itself, the slave is gaining no additional in-
formation or privileges by asking the monitor to perform
the call on its behalf. Second, if the call conﬂicts with
the monitor’s policy it could refuse the call (and possi-
bly exit if a brute force attack is suspected). The second
approach, refusing the call, is the recommended solution.
3.3 RPC and the wrapper functions
library
of