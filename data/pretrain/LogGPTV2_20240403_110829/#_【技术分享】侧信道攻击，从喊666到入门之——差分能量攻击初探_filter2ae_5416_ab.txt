      aes_plaintexts：    可知的输入值，也就是矩阵D，这里大小是1000*16，也就是有16次不同的输入，我们这里只对第一次进行攻击
      traces_noDummy：    能量轨迹，没有插入随机指令作为防护，1000*25000也就是矩阵T
      traces_withDummy：  能量轨迹，插入了随机指令作为侧信道攻击防护，1000*25000也就是矩阵T
      HW：                用来储存汉明重量，便于后面调用        
    %}
    samples = 1000;
    %选择是否进行了随机插值的能量轨迹，下文会进行对比
    analyzed_traces = 'traces_noDummy';
    %analyzed_traces = 'traces_withDummy';
    %选择哪条能量轨迹进行攻击，一共有16条
    byte_to_attack = 1;
    more off
    %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
    % 读取存储空间中aes_plaintexts的第一列
    D = aes_plaintexts(1:samples, byte_to_attack);
    clear aes_plaintexts byte_to_attack
    % 选择能量轨迹
    eval(sprintf('traces = %s(1:samples, :);', analyzed_traces));
    clear analyzed_traces
    %密钥有256种可能，K的空间是256
    K = uint8(0:255);
    %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
    % TASK 2
    %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
    % 计算中间值，这个就是上文中的f(d,k)，这个函数的选取就是我们需要攻击的函数，计算之后是矩阵V
    V = SubBytes(bitxor(repmat(D, 1, length(K)), repmat(K, samples, 1)) + 1);
    % 使用汉明重量计算假设能量值，计算之后是矩阵H
    H = HW(V+1);
    %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
    % 计算相关性
    tr_length = size(traces, 2);
    R = zeros(length(K), tr_length);
    for key_idx = uint16(K)+1
        fprintf('Working on key guess = %dn', K(key_idx));
        %下面计算相关系数矩阵
        for k = 1:tr_length
            r = corrcoef( [double(H(:,key_idx)) double(traces(:,k))] );
            R(key_idx, k) = r(1, 2);
        end
    end
    clear key_idx k r
    %下面我改了一些，有助于快速定位攻击成功的位置
    [b,c]=max(max(R'));  % c的值就是对应的正确密钥值
    plot(R(c,:));
我们看下攻击的结果（运行时间比较长）。下面是TASK 2运行之后，正确密钥0x10的图。图3_1
相比于不正确的密钥，相差很大。图3_2
对于没有进行很好对对齐的能量轨迹（matlab脚本中选择analyzed_traces =
'traces_withDummy';），也有明显的相关性峰值，只不过最大值会缩小。图3_3
**IV.尾声**
**1.优化**
我们先来考虑一下，有什么可以优化的。
所以先要来考虑，为什么要优化。
优化，就是为了可以使用更少的能量轨迹，去攻击泄露更不明显的能量轨迹。或者是绕过一些防御手段，比如掩码防护，或者针对不知到计算细节的特殊加密方案的攻击，等等。
我们再来看一看，有什么地方值得优化，比如生成假设能量模型和对比假设能量模型和实际能量模型，可以使用不同的模型使得获取到的假设模型和比较结果更优化。我们的示例只针对了一个中间量来进行计算，那么对于使用了掩码的能量轨迹，我们可以使用几个中间量进行高阶DPA攻击。对于不知道具体计算过程的算法，可以使用旁路立方体攻击，等等。需要优化的地方还很多。
**2.能量轨迹的获取**
这是个很重要的问题，我没有单独拿出一章来讲的原因是我没有实际操作过，主要是因为没钱买适合的示波器。我会简单的介绍一下。
在2017年斯普林格出版的 Hardware Security and Trust 年刊第四篇 Practical Session:
Differential Power Analysis for
Beginners中，介绍了作者获取IC卡能量轨迹的方法，具有很强的通用性，可以借鉴一下。待我有钱买示波器之后，我也会自己动手做一遍。
diy一个板子，引出IC卡的接触引脚，如图4_1
之后按如下的方法接线，一路测量数据，另外一路测量功率图4_2
使用JSmartCard Explorer通过一个读卡器与接触式IC卡进行交互，使用 PicoScope 6 GUI读取能量轨迹。4.4
图4_3
**V.参考**
《能量分析攻击》（奥地利）Stefan Mangard、Elisabeth Oswald、Thomas Popp，冯登国，周永彬，刘继业 译
科学出版社。以及配套网站，[www.dpabook.org](http://www.dpabook.org)（入门好书）
《密码旁路分析原理与方法》郭世泽 王韬 赵新杰 科学出版社 （进阶必备）
N本斯普林格出版社（springer）年刊 Constructive Side-Channel Analysis and Secure Design
N本斯普林格出版社年刊 Hardware Security and Trust
文件下载
链接： 密码：qgh8