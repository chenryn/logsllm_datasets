-   [部署 Web
    服务器和反向代理](https://access.redhat.com/documentation/en-us/red_hat_enterprise_linux/9/html/deploying_web_servers_and_reverse_proxies/index){.link}
-   `config(5)`{.literal} 和 `ciphers(1)`{.literal} 手册页。
-   [安全使用传输层安全性(TLS)和数据报传输层安全性(DTLS)的建议](https://tools.ietf.org/html/rfc7525){.link}。
-   [Mozilla SSL
    配置生成器](https://mozilla.github.io/server-side-tls/ssl-config-generator/){.link}。
-   [SSL 服务器测试](https://www.ssllabs.com/ssltest/){.link} 。
:::
:::
:::
:::
[]{#configuring-a-vpn-with-ipsec_securing-networks.html}
::: chapter
::: titlepage
# []{#configuring-a-vpn-with-ipsec_securing-networks.html#configuring-a-vpn-with-ipsec_securing-networks}第 4 章 使用 IPsec 配置 VPN {.title}
:::
在 RHEL 9 中，可以使用 `IPsec`{.literal}
协议配置虚拟私有网络(VPN)，`Libreswan`{.literal} 应用程序支持该协议。
::: section
::: titlepage
# []{#configuring-a-vpn-with-ipsec_securing-networks.html#libreswan-as-an-ipsec-vpn-implementation_configuring-a-vpn-with-ipsec}libreswan 作为 IPsec VPN 的实现 {.title}
:::
在 RHEL 中，可以使用 `IPsec`{.literal}
协议配置虚拟私有网络(VPN)，`Libreswan`{.literal}
应用程序支持该协议。`Libreswan`{.literal} 是 `Openswan`{.literal}
应用的延续，`Openswan`{.literal} 文档中的许多示例可与
`Libreswan`{.literal} 互换。
VPN 的 `IPsec`{.literal}
协议是使用互联网密钥交换(`IKE`{.literal})协议进行配置的。术语 IPsec 和
IKE 可互换使用。IPsec VPN 也称为 IKE VPN、IKEv2 VPN、XAUTH VPN、Cisco
VPN 或 IKE/IPsec VPN。同样使用级别 2 隧道协议(`L2TP`{.literal})的 IPsec
VPN 变体通常称为 L2TP/IPsec VPN，其需要可选通道 `xl2tpd`{.literal}
应用程序。
`Libreswan`{.literal} 是一种开源的、用户空间 `IKE`{.literal}
实现。`IKE`{.literal} v1 和 v2 作为用户级守护进程来实现。IKE
协议也加密。`IPsec`{.literal} 协议是通过 Linux
内核实现的，`Libreswan`{.literal} 配置内核以添加和删除 VPN 隧道配置。
`IKE`{.literal} 协议使用 UDP 端口 500 和 4500。`IPsec`{.literal}
协议由两个协议组成：
::: itemizedlist
-   封装的安全有效负载(`ESP`{.literal})，其协议号为 50。
-   经过身份验证的标头(`AH`{.literal})，其协议号为 51。
:::
不建议使用 `AH`{.literal} 协议。建议 `AH`{.literal} 的用户迁移到使用
null 加密的 `ESP`{.literal}。
`IPsec`{.literal} 协议提供了两种操作模式：
::: itemizedlist
-   `隧道模式`{.literal} （默认）
-   `传输模式`{.literal} 。
:::
您可以用没有 IKE 的 IPsec 来配置内核。这称为 `手动密钥`{.literal}
。您还可以使用 `ip xfrm`{.literal}
命令来配置手动密钥，但为了安全起见，强烈建议您不要这样做。`Libreswan`{.literal}
使用 netlink 与 Linux 内核连接。在 Linux 内核中进行数据包加密和解密。
`libreswan`{.literal}
使用网络安全服务(`NSS`{.literal})加密库。`Libreswan`{.literal} 和
`NSS`{.literal} 均通过了 [*联邦信息处理标准*]{.emphasis}
([**FIPS**]{.strong})出版物 140-2 的认证。
::: {.important style="margin-left: 0.5in; margin-right: 0.5in;"}
### 重要 {.title}
由 `Libreswan`{.literal} 和 Linux 内核实现的
`IKE`{.literal}/`IPsec`{.literal} VPN 是推荐在 RHEL 中使用的唯一 VPN
技术。在不了解这样做风险的情况下不要使用任何其他 VPN 技术。
:::
在 RHEL 中，`Libreswan`{.literal} 默认遵循
[**系统范围的加密策略**]{.strong}。这样可确保 `Libreswan`{.literal}
将当前威胁模型包括 （`IKEv2`{.literal}
）的安全设置用作默认协议。如需更多信息，请参阅
[使用系统范围的加密策略](https://access.redhat.com/documentation/en-us/red_hat_enterprise_linux/9/html/security_hardening/using-the-system-wide-cryptographic-policies_security-hardening){.link}。
`Libreswan`{.literal}
不使用术语\"源\"和\"目的地\"或\"服务器\"和\"客户端\"，因为 IKE/IPsec
是对等协议。相反，它使用术语\"左\"和\"右\"来指端点（主机）。这也允许您在大多数情况下在两个端点使用相同的配置。但是，管理员通常选择始终对本地主机使用\"左\"，对远程主机使用\"右\"。
`leftid`{.literal} 和 `rightid`{.literal}
选项充当身份验证过程中相应主机的标识。详情请查看
`ipsec.conf(5)`{.literal} 手册页。
:::
::: section
::: titlepage
# []{#configuring-a-vpn-with-ipsec_securing-networks.html#con_authentication-methods-in-libreswan_configuring-a-vpn-with-ipsec}Libreswan 中的身份验证方法 {.title}
:::
Libreswan 支持多种身份验证方法，每种方法适合不同的场景。
::: title
**预共享密钥(PSK)**
:::
[*预共享密钥*]{.emphasis}
(PSK)是最简单的身份验证方法。出于安全考虑，请勿使用小于 64 个随机字符的
PSK。在 FIPS 模式中，PSK
必须符合最低强度要求，具体取决于所使用的完整性算法。您可以使用
`authby=secret`{.literal} 连接来设置 PSK。
::: title
**原始 RSA 密钥**
:::
[*原始 RSA 密钥*]{.emphasis} 通常用于静态主机到主机或子网到子网 IPsec
配置。每个主机都使用所有其他主机的公共 RSA 密钥手动配置，Libreswan
在每对主机之间建立 IPsec 隧道。对于大量主机，这个方法不能很好地扩展。
您可以使用 `ipsec newhostkey`{.literal} 命令在主机上生成原始 RSA
密钥。您可以使用 `ipsec showhostkey`{.literal} 命令列出生成的密钥。使用
CKA ID 密钥的连接配置需要 `leftrsasigkey=`{.literal} 行。原始 RSA
密钥使用 `authby=rsasig`{.literal} 连接选项。
::: title
**X.509 证书**
:::
[*X.509 证书*]{.emphasis} 通常用于大规模部署连接到通用 IPsec
网关的主机。中心 [*证书颁发机构*]{.emphasis} (CA)为主机或用户签署 RSA
证书。此中心 CA 负责中继信任，包括单个主机或用户的撤销。
例如，您可以使用 `openssl`{.literal} 命令和 NSS `certutil`{.literal}
命令来生成 X.509 证书。因为 Libreswan 使用 `leftcert=`{.literal}
配置选项中证书的昵称从 NSS
数据库读取用户证书，所以在创建证书时请提供昵称。
如果使用自定义 CA
证书，则必须将其导入到网络安全服务(NSS)数据库中。您可以使用
`ipsec import`{.literal} 命令将 PKCS #12 格式的任何证书导入到 Libreswan
NSS 数据库。
::: {.warning style="margin-left: 0.5in; margin-right: 0.5in;"}
### 警告 {.title}
Libreswan 需要互联网密钥交换(IKE)对等 ID
作为每个对等证书的主题替代名称(SAN)，如 [RFC 4945 的 3.1
章节](https://datatracker.ietf.org/doc/html/rfc4945#section-3.1){.link}
所述。通过更改 `require-id-on-certificated=`{.literal}
选项禁用此检查可能会导致系统容易受到中间人攻击。
:::
使用 `authby=rsasig`{.literal} 连接选项，根据使用带 SHA-2 的 RSA 的
X.509 证书进行身份验证。您可以通过将 `authby=`{.literal} 设为
`ecdsa`{.literal} 以及通过基于 `authby=rsa-sha2`{.literal} 的 SHA-2
进行身份验证的 RSA 概率签名方案(RSASSA-PSS)数字签名来进一步限制 ECDSA
数字签名。默认值为 `authby=rsasig,ecdsa`{.literal}。
证书和 `authby=`{.literal}
签名方法应匹配。这可提高互操作性，并在一个数字签名系统中保留身份验证。
::: title
**NULL 身份验证**
:::
[*NULL 身份验证*]{.emphasis}
用来在没有身份验证的情况下获得网状加密。它可防止被动攻击，但不能防止主动攻击。但是，因为
IKEv2 允许非对称身份验证方法，因此 NULL
身份验证也可用于互联网规模的机会主义
IPsec。在此模型中，客户端对服务器进行身份验证，但服务器不对客户端进行身份验证。此模型类似于使用
TLS 的安全网站。使用 `authby=null`{.literal} 进行 NULL 身份验证。
::: title
**保护量子计算机**
:::
除了上述身份验证方法外，您还可以使用 [*Post-quantum Pre-shared
Key*]{.emphasis}
(PPK)方法来防止量子计算机可能的攻击。单个客户端或客户端组可以通过指定与带外配置的预共享密钥对应的
PPK ID 来使用它们自己的 PPK。
使用带有预共享密钥的 IKEv1 可防止量子攻击者。重新设计 IKEv2
不会原生提供这种保护。Libreswan 提供使用 [*Post-quantum Pre-shared
Key*]{.emphasis} (PPK)来保护 IKEv2 连接免受量子攻击。
要启用可选的 PPK 支持，请在连接定义中添加 `ppk=yes`{.literal}。如需要
PPK，请添加 `ppk=insist`{.literal}。然后，可为每个客户端分配一个带有一个
secret 值的 PPK ID，其 secret
值会被传递到带外（最好是使用半字节安全）。PPK
应该具有很强的随机性，而不是基于字典中的单词。PPK ID 和 PPK 数据保存在
`ipsec.secrets`{.literal} 中，例如：
``` screen
@west @east : PPKS "user1" "thestringismeanttobearandomstr"
```
`PPKS`{.literal} 选项指的是静态
PPK。这个实验性功能使用基于一次性平板的动态
PPK。在每个连接中，一次性平板的一个新部件用作 PPK。当使用时，文件中动态
PPK
的那部分被零覆盖，以防止重复使用。如果没有剩下一次性资源，连接会失败。详情请查看
`ipsec.secrets(5)`{.literal} 手册页。
::: {.warning style="margin-left: 0.5in; margin-right: 0.5in;"}
### 警告 {.title}
动态 PPK 的实现是作为不受支持的技术预览提供的。请谨慎使用。
:::
:::
::: section
::: titlepage
# []{#configuring-a-vpn-with-ipsec_securing-networks.html#installing-libreswan_configuring-a-vpn-with-ipsec}安装 Libreswan {.title}
:::
这个流程描述了安装和启动 `Libreswan`{.literal} IPsec/IKE VPN
实现的步骤。
::: itemizedlist
**先决条件**
-   `AppStream`{.literal}存储库已启用。
:::
::: orderedlist
**步骤**
1.  安装 `libreswan`{.literal} 软件包：
    ``` screen
    # dnf install libreswan
    ```
2.  如果要重新安装
    `Libreswan`{.literal}，请删除其旧的数据库文件，并创建一个新的数据库：
    ``` screen
    # systemctl stop ipsec
    # rm /var/lib/ipsec/nss/*db
    # ipsec initnss
    ```
3.  启动 `ipsec`{.literal} 服务，并启用该服务，以便其在引导时自动启动：
    ``` screen
    # systemctl enable ipsec --now
    ```
4.  通过添加 `ipsec`{.literal} 服务，将防火墙配置为允许 IKE、ESP 和 AH
    协议的 500 和 4500/UDP 端口：
    ``` screen
    # firewall-cmd --add-service="ipsec"
    # firewall-cmd --runtime-to-permanent
    ```
:::
:::
::: section
::: titlepage
# []{#configuring-a-vpn-with-ipsec_securing-networks.html#creating-a-host-to-host-vpn_configuring-a-vpn-with-ipsec}创建主机到主机的 VPN {.title}
:::
要将 `Libreswan`{.literal} 配置为在称为 [*left*]{.emphasis} 和
[*right*]{.emphasis} 使用原始 RSA
密钥进行身份验证的两个主机之间创建主机到主机的 `IPsec`{.literal}
VPN，请在两台主机上输入以下命令：
::: itemizedlist
**先决条件**
-   `Libreswan`{.literal} 已安装 ，并在每个节点上启动了
    `ipsec`{.literal} 服务。
:::
::: orderedlist
**步骤**
1.  在每台主机上生成原始 RSA 密钥对：
    ``` screen
    # ipsec newhostkey
    ```
2.  上一步返回生成的密钥的 `ckaid`{.literal}。在 [*左*]{.emphasis}
    主机上使用 `ckaid`{.literal} 和以下命令，例如：
    ``` screen
    # ipsec showhostkey --left --ckaid 2d3ea57b61c9419dfd6cf43a1eb6cb306c0e857d
    ```
    上一命令的输出生成了配置所需的 `leftrsasigkey=`{.literal}
    行。在第二台主机（[*右*]{.emphasis}）上执行相同的操作：
    ``` screen
    # ipsec showhostkey --right --ckaid a9e1f6ce9ecd3608c24e8f701318383f41798f03
    ```
3.  在 `/etc/ipsec.d/`{.literal} 目录中，创建一个新的
    `my_host-to-host.conf`{.literal} 文件。将上一步中
    `ipsec showhostkey`{.literal} 命令的输出中的 RSA
    主机密钥写入新文件。例如：
    ``` screen