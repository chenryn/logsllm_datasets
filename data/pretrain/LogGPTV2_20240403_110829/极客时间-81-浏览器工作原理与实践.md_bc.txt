## 思考时间下面这段代码整合了定时器、Promise 和async/await，你能分析出来这段代码执行后输出的内容吗？    async function foo() {    console.log('foo')}async function bar() {    console.log('bar start')    await foo()    console.log('bar end')}console.log('script start')setTimeout(function () {    console.log('setTimeout')}, 0)bar();new Promise(function (resolve) {    console.log('promise executor')    resolve();}).then(function () {    console.log('promise then')})console.log('script end')欢迎在留言区与我分享你的想法，也欢迎你在留言区记录你的思考过程。感谢阅读，如果你觉得这篇文章对你有帮助的话，也欢迎把它分享给更多的朋友。![](Images/7e91bd5c116048de87e68468f727fc3c.png){savepage-src="https://static001.geekbang.org/resource/image/3f/cb/3f4d5bec2d5c89600b4628581144d8cb.jpg"}
# 21 \| Chrome开发者工具：利用网络面板做性能分析"浏览器中的页面循环系统"模块我们已经介绍完了，循环系统是页面的基础，理解了循环系统能让我们从本质上更好地理解页面的工作方式，加深我们对一些前端概念的理解。接下来我们就要进入新的模块了，也就是"浏览器中的页面"模块，正如专栏简介中所言，页面是浏览器的核心，浏览器中的所有功能点都是服务于页面的，而Chrome开发者工具又是工程师调试页面的核心工具，所以在这个模块的开篇，我想先带你来深入了解下Chrome 开发者工具。**Chrome 开发者工具（简称 DevTools）是一组网页制作和调试的工具，内嵌于Google Chrome 浏览器中**。Chrome开发者工具非常重要，所蕴含的内容也是非常多的，熟练使用它能让你更加深入地了解浏览器内部工作原理。（Chrome开发者工具也在不停地迭代改进，如果你想使用最新版本，可以使用[ChromeCanary](https://www.google.com/intl/en/chrome/canary/)。）作为这一模块的第一篇文章，我们主要聚焦**页面的源头**和**网络数据的接收**，这些发送和接收的数据都能体现在开发者工具的网络面板上。不过为了你能更好地理解和掌握，我们会先对Chrome 开发者工具做一个大致的介绍，然后再深入剖析网络面板。
## Chrome 开发者工具Chrome开发者工具有很多重要的面板，比如与性能相关的有网络面板、Performance面板、内存面板等，与调试页面相关的有 Elements 面板、Sources面板、Console 面板等。``{=html}你可以在浏览器窗口的右上方选择 Chrome 菜单，然后选择"更多工具--\>开发者工具"来打开 Chrome 开发者工具。打开的页面如下图所示：![](Images/500b88bdcedfee8b59eb5ec83126e625.png){savepage-src="https://static001.geekbang.org/resource/image/68/8d/68edf7b09e33b5481b49dc76967b838d.png"}```{=html}```Chrome 开发者工具]{.reference}```{=html}```从图中可以看出，它一共包含了 10 个功能面板，包括了Elements、Console、Sources、NetWork、Performance、Memory、Application、Security、Audits和 Layers。关于这 10 个面板的大致功能，我做了一个表格，感兴趣的话，你可以详细看下：![](Images/8571534a65a6e014ef1e577d1081cf5a.png){savepage-src="https://static001.geekbang.org/resource/image/c5/82/c5eb9603e79547ae3d815254e24d4782.png"}简单来说，Chrome 开发者工具为我们提供了通过界面访问或者编辑 DOM 和 CSSOM的能力，还提供了强大的调试功能和查看性能指标的能力。OK，接下来我们就要重点看下其中重要的 Network 面板，即网络面板。
## 网络面板网络面板由控制器、过滤器、抓图信息、时间线、详细列表和下载信息概要这 6个区域构成（如下图所示）。![](Images/355cc83d16efdf76a32bc609b569264c.png){savepage-src="https://static001.geekbang.org/resource/image/46/57/46fba54f54b9bd43918308f9f1ae1357.png"}```{=html}```网络面板概要图]{.reference}```{=html}```
### 1. 控制器其中，控制器有 4 个比较重要的功能，我们按照下文中的这张图来简单介绍下。![](Images/193733ae285e61227f107eb3a2ff5d4e.png){savepage-src="https://static001.geekbang.org/resource/image/f0/42/f02477088c0499247e0ed37f46ad2a42.png"}```{=html}```控制器概要图]{.reference}```{=html}```-   红色圆点的按钮，表示"开始 / 暂停抓包"，这个功能很常见，很容易理解。-   "全局搜索"按钮，这个功能就非常重要了，可以在所有下载资源中搜索相关内容，还可以快速定位到某几个你想要的文件上。-   Disable cache，即"禁止从 Cache 中加载资源"的功能，它在调试 Web    应用的时候非常有用，因为开启了 Cache 会影响到网络性能测试的结果。-   Online 按钮，是"模拟    2G/3G"功能，它可以限制带宽，模拟弱网情况下页面的展现情况，然后你就可以根据实际展示情况来动态调整策略，以便让    Web 应用更加适用于这些弱网。
### 2. 过滤器网络面板中的过滤器，主要就是起过滤功能。因为有时候一个页面有太多内容在详细列表区域中展示了，而你可能只想查看JavaScript 文件或者 CSS文件，这时候就可以通过过滤器模块来筛选你想要的文件类型。
### 3. 抓图信息抓图信息区域，可以用来分析用户等待页面加载时间内所看到的内容，分析用户实际的体验情况。比如，如果页面加载1秒多之后屏幕截图还是白屏状态，这时候就需要分析是网络还是代码的问题了。（勾选面板上的"Capturescreenshots"即可启用屏幕截图。）