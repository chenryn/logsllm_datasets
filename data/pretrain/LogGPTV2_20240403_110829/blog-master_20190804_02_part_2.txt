3、即使创建了索引，我们还需要知道性能提升有多少。    
在PostgreSQL 生态中，有很多插件来支撑：    
1、TOP SQL：```pg_stat_statements```    
2、pg_qualstats，SQL的真实过滤性、选择性统计(where, join)，用于判断是否需要索引     
3、HypoPG，虚拟索引（用于索引推荐），通过虚拟执行计划，对比后可以知道性能提升有多少。    
有了这几个东西就好办了。    
## 参考如下文档    
https://www.percona.com/blog/2019/07/22/automatic-index-recommendations-in-postgresql-using-pg_qualstats-and-hypopg/    
In my previous blog post, we have seen how the extension hypopg can be helpful in creating hypothetical indexes in PostgreSQL. If you have read it already, you know that it is very useful in verifying whether an Index can improve the performance of an SQL without having to create it in reality. Considering this, is there also a way to automatically suggest which indexes can improve the performance of some of your SQL’s? The answer is… YES!    
In this blog post, we will see how we can get a direct recommendation to improve a specific query, as seen in the following snippet.    
```    
                       query                       |                 recmnded_index                 | percent_improvd     
---------------------------------------------------+------------------------------------------------+-----------------    
 select * from foo.bar where id2 = $1 and id4 = $2 | CREATE INDEX ON foo.bar USING btree (id2, id4) |           99.96    
 select * from foo.bar where id3 = $1              | CREATE INDEX ON foo.bar USING btree (id3)      |           99.93    
(2 rows)    
```    
Without any further delay, let’s discuss the extension pg_qualstats which enables us to achieve this requirement for PostgreSQL versions 9.4 or later. Following that, we will take a look at a logic which could automatically suggest what indexes would be helpful for query optimizations – without much manual work.    
All of the logic discussed in this blog post is reproducible, so please feel free to do so using the commands and try tuning your custom queries in test environments.    
### pg_qualstats    
```pg_qualstats``` is an extension developed by the POWA Team to uncover the need for storing predicates (quals). It stores the predicates found in WHERE clauses and JOIN conditions. This helps us analyze a query execution and opens up the possibility of automatic query optimizations.    
When we query ```pg_stat_statements``` like extensions, we only see the prepared SQL or the SQL without any bind variable values. As you cannot perform an EXPLAIN (to see the execution plan of a Query) without the quals, the only option available is to see if that query was logged in the PostgreSQL log file and then identify the parameters passed to it. Or you can maybe use some arbitrary values, but this requires some manual intervention and time. But, when you create this extension: pg_qualstats, it stores queries along with the actual quals based on the sample rate ( ```pg_qualstats.sample_rate``` ) specified.    
### Creating the extension: pg_qualstats    
For RedHat/CentOS, we can install it using the packages available in the PGDG repository. Once you have added the PGDG repo, simply run the following command:    
```    
# yum install pg_qualstats11    
```    
Similarly for Ubuntu/Debian:    
```    
# apt install postgresql-11-pg-qualstats    
```    
Once installed, you must add ```pg_qualstats``` to ```shared_preload_libraries``` . This requires a restart. As I am also using ```pg_stat_statements``` to get the queryid associated with each query recorded by ```pg_qualstats```, I have the following setting in my postgresql.conf file:    
```    
shared_preload_libraries = 'pg_stat_statements, pg_qualstats'    
```    
Modifying the above parameter requires a restart of your PostgreSQL instance.    
### Some GUCs you should know    
In order to start taking advantage of this extension, you may have to set some of the GUCs (Grand Unified Configuration) in your PostgreSQL server. These can be set using ```ALTER SYSTEM``` or by manually adding the associated entries in your postgresql.conf or postgresql.auto.conf files.    
```pg_qualstats.enabled``` : true or false (to enable or to disable ```pg_qualstats``` ). ON by default.    
```pg_qualstats.track_constants``` : true or false (to enable tracking of each constant. False would reduce the number of entries to track predicates.)    
```pg_qualstats.max``` : The number of queries tracked. Defaults to 1000.    
```pg_qualstats.resolve_oids``` : Just store the oids or resolve them and store at query time. This takes additional space.    
```pg_qualstats.track_pg_catalog``` : Defaults to false. Whether or not the predicates of the objects in pg_catalog schema should be computed.    
```pg_qualstats.sample_rate``` : Default is -1. The fraction of queries to be sampled. -1 defaults to (1/max_connections). When set to 1, everything is sampled. Similarly when set to 0.1, one out of 10 queries are sampled.    
### Quals and Query Examples    
In order to see this in action, let us use ```sysbench-tpcc``` to generate some SQL traffic, and then see some of the details captured.    
Before running ```sysbench-tpcc``` , I have created all the required extensions as seen in the following log. In order to see the queryid (same as the queryid column of ```pg_stat_statements``` ) associated with each qual captured, it is important to have the extension: ```pg_stat_statements``` created. Similarly, to create hypothetical indexes, we need to have the extension: hypopg created.    
```    
percona=# CREATE EXTENSION hypopg;    
CREATE EXTENSION    
percona=# CREATE EXTENSION pg_stat_statements ;    
CREATE EXTENSION    
percona=# CREATE EXTENSION pg_qualstats;    
CREATE EXTENSION    
percona=# \dx    
                                     List of installed extensions    
        Name        | Version |   Schema   |                        Description                            
--------------------+---------+------------+-----------------------------------------------------------    
 hypopg             | 1.1.3   | public     | Hypothetical indexes for PostgreSQL    
 pg_qualstats       | 1.0.8   | public     | An extension collecting statistics about quals    
 pg_stat_statements | 1.6     | public     | track execution statistics of all SQL statements executed    
 plpgsql            | 1.0     | pg_catalog | PL/pgSQL procedural language    
(4 rows)    
percona=# show shared_preload_libraries ;    
     shared_preload_libraries         
----------------------------------    
 pg_stat_statements, pg_qualstats    
(1 row)    
```    
For this test, I have set  ```pg_qualstats.sample_rate``` to 1. Setting this to 1 captured every qual. We can, of course, reduce the sampling to ensure not everything is captured.    
```    
$ psql -d percona -c "ALTER SYSTEM SET pg_qualstats.sample_rate TO 1"     
ALTER SYSTEM    
$ psql -c "select pg_reload_conf()"    
 pg_reload_conf     
----------------    
 t    
(1 row)    
```    
### Installing and running sysbench-tpcc on RedHat/CentOS    
```    
$ sudo yum install https://repo.percona.com/yum/percona-release-latest.noarch.rpm    
$ sudo yum install git sysbench    
$ git clone https://github.com/Percona-Lab/sysbench-tpcc.git    
$ cd sysbench-tpcc    
$ ./tpcc.lua --pgsql-user=postgres --pgsql-port=5432 --pgsql-db=percona --time=10 --threads=2 --report-interval=1 --tables=2 --scale=2 --use_fk=0  --trx_level=RC --db-driver=pgsql prepare    
$ ./tpcc.lua --pgsql-user=postgres --pgsql-port=5432 --pgsql-db=percona --time=10 --threads=2 --report-interval=1 --tables=2 --scale=2 --use_fk=0  --trx_level=RC --db-driver=pgsql run    
```    
After running the benchmark for 10 seconds, we are now ready to query the view: ```pg_qualstats_indexes``` that gives us a nice view of the columns on which there are no indexes.    
```    
percona=# select * from pg_qualstats_indexes;    
    relid    |   attnames   |      possible_types      | execution_count     
-------------+--------------+--------------------------+-----------------    
 customer2   | {c_id}       | {brin,btree,hash}        |               4    
 customer2   | {c_last}     | {brin,btree,hash,spgist} |              33    
 customer1   | {c_id}       | {brin,btree,hash}        |               7    
 customer1   | {c_last}     | {brin,btree,hash,spgist} |               8    
 orders2     | {o_c_id}     | {brin,btree,hash}        |               2    
 order_line1 | {ol_o_id}    | {brin,btree}             |             208    
 order_line2 | {ol_o_id}    | {brin,btree}             |             202    
 order_line2 | {ol_o_id}    | {brin,btree,hash}        |              20    
 stock1      | {s_quantity} | {brin,btree}             |             208    
 stock2      | {s_quantity} | {brin,btree}             |             202    
(10 rows)    
```    
### Automatic Index Recommendations    
In the previous section, we have seen the columns (of tables used in some of the SQLs in WHERE condition) which do not have indexes on them. Indexes on these columns can be considered as recommended indexes. To make this more meaningful, I have written the following function to store the queries that are using these columns as predicates, along with their execution plans before and after creating the recommended index. Using this data, we can understand whether the recommended index is really helpful.    
```    
CREATE OR REPLACE FUNCTION find_usable_indexes()    
RETURNS VOID AS    
$$    
DECLARE    
    l_queries     record;    
    l_querytext     text;    
    l_idx_def       text;    
    l_bef_exp       text;    
    l_after_exp     text;    
    hypo_idx      record;    
    l_attr        record;    
    /* l_err       int; */    
BEGIN    
    CREATE TABLE IF NOT EXISTS public.idx_recommendations (queryid bigint,     
    query text, current_plan jsonb, recmnded_index text, hypo_plan jsonb);    
    FOR l_queries IN    
    SELECT t.relid, t.relname, t.queryid, t.attnames, t.attnums,     
    pg_qualstats_example_query(t.queryid) as query    
      FROM     
        (     
         SELECT qs.relid::regclass AS relname, qs.relid AS relid, qs.queryid,     
         string_agg(DISTINCT attnames.attnames,',') AS attnames, qs.attnums    
         FROM pg_qualstats_all qs    
         JOIN pg_qualstats q ON q.queryid = qs.queryid    
         JOIN pg_stat_statements ps ON q.queryid = ps.queryid    
         JOIN pg_amop amop ON amop.amopopr = qs.opno    
         JOIN pg_am ON amop.amopmethod = pg_am.oid,    
         LATERAL     
              (     
               SELECT pg_attribute.attname AS attnames    
               FROM pg_attribute    
               JOIN unnest(qs.attnums) a(a) ON a.a = pg_attribute.attnum     
               AND pg_attribute.attrelid = qs.relid    
               ORDER BY pg_attribute.attnum) attnames,         
         LATERAL unnest(qs.attnums) attnum(attnum)    
               WHERE NOT     
               (    
                EXISTS     
                      (     
                       SELECT 1    
                       FROM pg_index i    
                       WHERE i.indrelid = qs.relid AND     
                       (arraycontains((i.indkey::integer[])[0:array_length(qs.attnums, 1) - 1],     
                        qs.attnums::integer[]) OR arraycontains(qs.attnums::integer[],     
                        (i.indkey::integer[])[0:array_length(i.indkey, 1) + 1]) AND i.indisunique)))    
                       GROUP BY qs.relid, qs.queryid, qs.qualnodeid, qs.attnums) t    
                       GROUP BY t.relid, t.relname, t.queryid, t.attnames, t.attnums                       
    LOOP    
        /* RAISE NOTICE '% : is queryid',l_queries.queryid; */    
        execute 'explain (FORMAT JSON) '||l_queries.query INTO l_bef_exp;    
        execute 'select hypopg_reset()';    
        execute 'SELECT indexrelid,indexname FROM hypopg_create_index(''CREATE INDEX on '||l_queries.relname||'('||l_queries.attnames||')'')' INTO hypo_idx;          
        execute 'explain (FORMAT JSON) '||l_queries.query INTO l_after_exp;    
        execute 'select hypopg_get_indexdef('||hypo_idx.indexrelid||')' INTO l_idx_def;    
        INSERT INTO public.idx_recommendations (queryid,query,current_plan,recmnded_index,hypo_plan)     
        VALUES (l_queries.queryid,l_querytext,l_bef_exp::jsonb,l_idx_def,l_after_exp::jsonb);            
    END LOOP;        
        execute 'select hypopg_reset()';    
END;    
$$ LANGUAGE plpgsql;    
```    
### The above function uses the following logic:    
Create a Table with name: ```public.idx_recommendations``` where the results are stored. It stores the queries on which the table and column names mentioned in the output of pg_qualstats_indexes are used as predicates, along with their execution plan before and after creating the ```hypothethical indexes``` .    
Get the list of Queries (candidates for query tuning) along with their queryid and the attributes on which an index is recommended for each query. The SQL in the above FOR LOOP is built using a slight modification to the existing view: ```pg_qualstats_indexes```    
```    
 relid |   relname   |  queryid   |  attnames  | attnums |                   query                        
-------+-------------+------------+------------+---------+--------------------------------------------    
 17725 | customer2   |  297872607 | c_id       | {1}     | UPDATE customer2 ....    
 17725 | customer2   |  702831032 | c_id       | {1}     | UPDATE customer2 ....    
 17725 | customer2   | 1509701064 | c_last     | {6}     | SELECT count(c_id) namecnt ....    
 17725 | customer2   | 1539164311 | c_id       | {1}     | SELECT c_discount, c_last, c_credit, w_t    
 17725 | customer2   | 1976730265 | c_last     | {6}     | SELECT c_id FROM customer2 ......    
 17725 | customer2   | 2041891134 | c_id       | {1}     | SELECT c_first, c_middle, c_last, c_stre..    
 17728 | customer1   |  850567043 | c_id       | {1}     | SELECT c_first, c_middle, c_last, c_stre..    
 17728 | customer1   |  977223112 | c_last     | {6}     | SELECT count(c_id) namecnt ....    