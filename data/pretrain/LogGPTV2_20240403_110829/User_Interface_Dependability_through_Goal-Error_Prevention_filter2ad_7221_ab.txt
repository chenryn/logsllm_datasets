When a file has an "ALLOW READ" setting but also inherits a "DENY READ" setting, the user will be denied access to read the file. The distinction between stated permissions (those contained in a user's access control entry) and effective permissions (the actual access a user is granted) can complicate the task of setting file permissions. This is because the low-level permission values that a user manipulates do not always directly translate into the resulting access. In NTFS, the actual access is determined by a nuanced formula that incorporates precedence rules. However, users are primarily concerned with who can access what, rather than with the underlying values and formulas. Therefore, the necessary information for users to evaluate their goals is the effective permissions, which reflect the actual access that will be granted.

A casual observation of the XPFP interface (see Figure 1) reveals that it provides a poor external representation of the file-permissions task. For example, while the main window contains the checkboxes needed to set the permission values, it does not display the effective permissions. Although XPFP can show effective permissions, they are two screens away, requiring users to click the "Advanced" button and then select the "Effective Permissions" tab. Even then, users must choose whose effective permissions they want to see, and viewing multiple entities' effective permissions simultaneously is not possible. When users return to changing permission values, the effective-permissions display disappears. Without a readily available effective-permissions display, or even a cue to indicate their importance, users must mentally maintain the inheritance and precedence rules and compute the effective permissions themselves.

**Figure 1: The XPFP interface.** The interface includes functionality for setting permission values but does not display effective permissions, group-inherited permissions, or ADMINISTRATE permissions.

In addition to the lack of an accessible effective-permissions display, XPFP also hides the ADMINISTRATE permission setting behind the "Advanced" button, and does not provide information about users' group membership or group-inherited permissions. This makes it difficult to track down the source of an effective permission inherited from a group. Users must keep group membership and permission settings in mind while completing tasks, which increases the likelihood of errors.

### 5. Anchor-based Subgoaling

Anchor-based subgoaling (ABS) is a principle that ensures a user interface provides all the necessary information for completing tasks in a clear and accurate manner. The XPFP interface illustrates the problem of omitting or obscuring necessary task information, which ABS aims to address.

#### 5.1 Cognitive Theory

Anchor-based subgoaling is based on the cognitive theory of Pocock et al.'s Technique for Human Error Assessment (THEA), which is derived from Norman's seven-stage execution-evaluation model of human information processing. THEA condenses Norman's stages into four stages where human error can occur: perception, interpretation, and evaluation; goal formulation; plan formulation; and action execution. According to these models, human information processing follows a loop:

1. **Perceive and Interpret Information:** Gather and interpret information from the environment.
2. **Evaluate Problem Status:** Determine if the problem is solved. If not, proceed to the next step.
3. **Formulate a Subgoal:** Set a subgoal based on the perceived information.
4. **Formulate and Execute a Plan:** Create and execute a plan to achieve the subgoal.

Goal errors can occur if the information used to check progress is incorrect or misinterpreted, leading to the wrong subgoal being set. The availability of information to check progress is crucial for correct subgoal selection. In the XPFP interface, hidden effective permissions and group information can lead to goal errors, as users may rely on incorrect or incomplete information.

#### 5.2 Anchor-based Subgoaling Design Procedure

Anchor-based subgoaling bridges the gap between task analysis and the creation of an external representation during the interface design process. A careful task analysis is a prerequisite for implementing ABS. The hierarchical task analysis (HTA) method, described by Kirwan, represents a task as a hierarchy of goals and operations. After the task analysis, the ABS design procedure involves:

- **Phase 1: Identify Required Information**
  - For each goal, identify the information needed to determine when the goal is completed and to set subgoals.
  - For each operation, determine the procedural and declarative knowledge required.

- **Phase 2: Provide Information in the Interface**
  - Incorporate an accurate, clear, and salient representation of the necessary information into the interface design.

#### 5.3 Salmon Interface

The Salmon interface (see Figure 2) was designed using anchor-based subgoaling. It identifies the following information as necessary for establishing correct subgoals and executing operations in a file-permissions interface:

1. **Full List of Atomic Permissions:** 13 atomic permissions.
2. **Stated Permissions:** For all users and groups on the ACL.
3. **Group Membership Data:** How it combines to form a user's effective permissions.
4. **Effective Permissions:** For all users on the ACL.

**Figure 2: The Salmon interface.** The upper pane contains the same information and functionality as the XPFP main window. The lower pane displays effective permissions, including group and individual permissions that combine to form the effective permissions.

The Salmon interface provides this information in a two-pane layout. The upper pane contains the checkboxes for setting permission values, while the lower pane shows the effective permissions and how they are derived. The effective-permissions display is always available, and changes in the upper pane are reflected in the lower pane, with highlights drawing attention to the changes. While all users' effective permissions cannot be viewed simultaneously, the lower pane can be scrolled to access additional information.

### 6. Methodology

A laboratory user study was conducted to observe and document errors in permission-setting tasks, comparing the XPFP and Salmon interfaces.

#### 6.1 Participants

Twenty-four students and research staff at Carnegie Mellon University participated in the study. All participants had backgrounds in science and engineering and were daily computer users. Most had experience with Windows, and some had experience setting file permissions on various operating systems. The participant pool was consistent with occasional users who might need to relearn the task due to infrequent use.

#### 6.2 Apparatus

Participants worked on a Windows XP system, Version 2002, Service Pack 1. They were asked to think aloud during the tasks, and their voice, screen video, and mouse and keyboard actions were recorded. Final permission settings were saved after each task.

#### 6.3 Task Design

To simulate real permission-setting conditions, a hypothetical scenario was created where participants worked in a generic "organization" and had to restrict access to files and folders. The environment included 27 individual users and 6 groups, each containing 6 members. Participants were randomly assigned to either the Salmon or XPFP interface and given seven tasks, with one training task excluded from analysis. The remaining six tasks involved various existing-permissions contexts, with two tasks (Wesley and Jack) focusing on group inheritance, a feature prone to errors in the NTFS permissions model.

The Wesley and Jack tasks required participants to set permissions on a text file so that specific users could read but not change the file. The task statement for the Wesley task was:

"The group ProjectF is working on projectF-data.txt, so everyone in ProjectF can read, write, or delete it. Wesley (username: wesley) has just been reassigned to another project and must not be allowed to change the fileâ€™s contents, but should be allowed to read it. Make sure that effective now, Wesley can read the file projectF-data.txt, but in no way change its contents."

The difference between the Wesley and Jack tasks was the initial setup of permissions, with different groups (ProjectF and ProjectE) already on the access control list for the file.