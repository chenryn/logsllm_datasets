### 7.1 Vulnerabilities in Scanning Systems

Several researchers have reported vulnerabilities in scanning systems. One such vulnerability, CVE-2019-5624 [4], affects RubyZip and Metasploit Pro. This vulnerability allows attackers to exploit path traversal to create a cron job that executes arbitrary code, such as creating a reverse shell. To exploit this, the attacker must import a malicious file into Metasploit Pro as a new project. However, this attack requires social engineering and specific conditions, such as the operating system used by the attacker. As far as we know, this is the only other Remote Code Execution (RCE) vulnerability reported for Metasploit Pro. In contrast, no Cross-Site Scripting (XSS) vulnerabilities have been reported for Metasploit Pro, apart from our findings.

### 7.2 Security Scanners Assessment

Various authors have evaluated the effectiveness and efficiency of security scanners in detecting vulnerabilities. For instance, Doupé et al. [10] introduced WackoPicko, a deliberately vulnerable web application designed to benchmark the performance of security scanners. They compared the detection capabilities of open-source and commercial scanners on the vulnerabilities present in WackoPicko.

Holm et al. [18] conducted a quantitative evaluation of the accuracy of security scanners in detecting vulnerabilities. Additionally, Holm [17] assessed the performance of network security scanners and the effectiveness of remediation guidelines. Mburano et al. [23] compared the performance of OWASP ZAP and Arachni using the OWASP Benchmark Project [13] and the Web Application Vulnerability Security Evaluation Project (WAVSEP) [6]. These projects aim to evaluate the accuracy, coverage, and speed of vulnerability scanners.

To the best of our knowledge, there are no existing proposals for the security assessment of scanning systems. None of the papers listed above consider our attacker model or the potential for security vulnerabilities in security scanners.

### 7.3 Exploiting Redirect Checkers

Redirect locations are contained in the Location header of the HTTP response. According to our attacker model, this value can be controlled by the attacker. If the victim uses a vulnerable redirect checker, the report may convey an attack to the user's browser. The attacker has two main options: forcing URL redirection and exploiting the scanning system's reputation.

In the first case, the attacker delivers an XSS payload, such as `window.location = "http://ev.il/"`. When executed, the browser is forced to open the given location, redirecting the user to a phishing site.

The second case is more subtle. Since the XSS attack is delivered by the scanning system, the attacker can perform a phishing operation and attribute it to the reporting system. For example, the attacker can make the user's browser download a malicious file, pretending it is the scanning system's PDF report. This abuses the scanning system's reputation to lure the victim. The following payload can achieve this:

```javascript
window.location="http://tmpfiles.org/report.pdf"
```

Figure 11 illustrates the effect of injecting such a payload in CheckShortURL.

### 7.4 Related Work

#### 7.4.1 Attacking the Attacker

Although not common in the literature, the concept of attacking the attacker is not entirely new. Typically, it involves the victim carrying out a counter-attack against the aggressor. However, tracking an attack to its source is nearly impossible if the attacker takes proper precautions. To the best of our knowledge, we are the first to consider response-based exploitation of the attacker's scanning systems.

#### 7.4.2 Vulnerability Detection

Many authors have proposed techniques for detecting software vulnerabilities, some of which can be applied to scanning systems. Kals et al. [19] defined the general structure of vulnerability testing environments. Our Test Environment Emulator (TEE) implements their abstract framework, adapted to inject responses instead of requests. The main difference is our test stub, which receives requests from the scanning system under test. We replace the crawling phase with tainted flow enumeration and use a list of polyglots during the attack phase to reduce testing time. Our exploit checker implements their analysis module, focusing on XSS.

Several authors have proposed dynamic taint analysis for vulnerability detection. For example, Xu et al. [32] monitor sensitive sinks in PHP code by rewriting the source code to inject monitoring functions. Avancini and Ceccato [3] also use dynamic taint analysis to maximize code coverage in PHP applications. Vogt et al. [30] and Wang et al. [31] use dynamic taint analysis to prevent and detect XSS attacks, respectively.

Dynamic taint analysis has also been proposed for binary code. Newsome and Song [24] introduced TaintCheck, which tracks tainted sinks to detect attacks. Clause et al. [7] proposed a generic dynamic taint analysis framework for x86 binaries, which could be adapted to fit our methodology.

While these exploit prevention techniques might mitigate some vulnerabilities detected by RevOK, they do not focus on vulnerability detection and require access to the application code.

### 8 Conclusion

In this paper, we introduced a novel methodology based on a new attacker model to detect vulnerabilities in scanning systems. We implemented our methodology and applied our prototype, RevOK, to 78 real-world scanning systems, resulting in the discovery of 36 new vulnerabilities. These results confirm the effectiveness of our methodology and the relevance of our attacker model.

### Acknowledgements

This paper was partially funded by the EU H2020 research project SPARTA (grant agreement n.830892).

### References

[1] Wade Alcorn. Beef Autorun Rule Engine. https://github.com/beefproject/beef/wiki/Autorun-Rule-Engine, Accessed March 19, 2020.
[2] Wade Alcorn. The Browser Exploitation Framework, Accessed March 3, 2020.
[3] Andrea Avancini and Mariano Ceccato. Towards Security Testing with Taint Analysis and Genetic Algorithms. In Proceedings of the ICSE Workshop on Software Engineering for Secure Systems, 2010.
[4] Luca Carettoni. On insecure zip handling, Rubyzip and Metasploit RCE (CVE-2019-5624). https://blog.doyensec.com/2019/04/24/rubyzip-bug.html, Accessed March 19, 2020.
[5] CheckShortURL. CheckShortURL, Accessed March 23, 2020.
[6] Shay Chen. The Web Application Vulnerability Scanner Evaluation Project. https://sourceforge.net/projects/wavsep/, Accessed March 19, 2020.
[7] James Clause, Wanchun Li, and Alessandro Orso. Dytan: A Generic Dynamic Taint Analysis Framework. In Proceedings of the International Symposium on Software Testing and Analysis, 2007.
[8] MITRE Corporation. ATT&CK - Technical Information Gathering. https://attack.mitre.org/tactics/TA0015/, Accessed March 20, 2020.
[9] Supeno Djanali, FX Arunanto, Baskoro Adi Pratomo, Abdurrazak Baihaqi, Hudan Studiawan, and Ary Mazharuddin Shiddiqi. Aggressive Web Application Honeypot for Exposing Attacker’s Identity. In Proceedings of the 1st International Conference on Information Technology, Computer, and Electrical Engineering, 2014.
[10] Adam Doupé, Marco Cova, and Giovanni Vigna. Why Johnny Can’t Pentest: An Analysis of Black-Box Web Vulnerability Scanners. In Proceedings of the International Conference on Detection of Intrusions and Malware, and Vulnerability Assessment, 2010.
[11] Ahmed Elsobky. Unleashing an Ultimate XSS Polyglot. https://github.com/0xsobky/HackVault/wiki/Unleashing-an-Ultimate-XSS-Polyglot, Accessed March 19, 2020.
[12] OWASP Foundation. OWASP Top Ten. https://owasp.org/www-project-top-ten/, 2017.
[13] OWASP Foundation. OWASP Benchmark Project. https://owasp.org/www-project-benchmark/, Accessed March 19, 2020.
[14] Satish Gojare, Rahul Joshi, and Dhanashree Gaigaware. Analysis and Design of Selenium WebDriver Automation Testing Framework. Procedia Computer Science, 2015.
[15] MUNSIRADO Group. Nmap Online, Accessed March 3, 2020.
[16] Web Hypertext Application Technology Working Group. HTML Living Standard, Last updated March 27, 2020.
[17] Hannes Holm. Performance of Automated Network Vulnerability Scanning at Remediating Security Issues. Computers & Security, 2012.
[18] Hannes Holm, Teodor Sommestad, Jonas Almroth, and Mats Persson. A Quantitative Evaluation of Vulnerability Scanning. Information Management & Computer Security, 2011.
[19] Stefan Kals, Engin Kirda, Christopher Kruegel, and Nedelko Jovanovic. SecuBat: A Web Vulnerability Scanner. In Proceedings of the 15th International Conference on World Wide Web, 2006.
[20] Arturs Lavrenovs and F Jesús Rubio Melón. HTTP Security Headers Analysis of Top One Million Websites. In Proceedings of the 10th International Conference on Cyber Conflict (CyCon), 2018.
[21] Arturs Lavrenovs and Gabor Visky. Investigating HTTP Response Headers for the Classification of Devices on the Internet. In Proceedings of the 7th IEEE Workshop on Advances in Information, Electronic and Electrical Engineering (AIEEE), 2019.
[22] Paul Leach, Michael Mealling, and Rich Salz. A Universally Unique Identifier (UUID) URN Namespace. 2005.
[23] Balume Mburano and Weisheng Si. Evaluation of Web Vulnerability Scanners Based on OWASP Benchmark. In Proceedings of the 26th International Conference on Systems Engineering (ICSEng), 2018.
[24] James Newsome, Dawn Song, James Newsome, and Dawn Song. Dynamic Taint Analysis: Automatic Detection, Analysis, and Signature Generation of Exploit Attacks on Commodity Software. In Proceedings of the 12th Network and Distributed Systems Security Symposium, 2005.
[25] Nmap Project. Nmap, Accessed March 23, 2020.
[26] E. J. Schwartz, T. Avgerinos, and D. Brumley. All You Ever Wanted to Know about Dynamic Taint Analysis and Forward Symbolic Execution (but Might Have Been Afraid to Ask). In Proceedings of the IEEE Symposium on Security and Privacy, 2010.
[27] Craig A Shue, Andrew J Kalafut, and Minaxi Gupta. Exploitable Redirects on the Web: Identification, Prevalence, and Defense. In Proceedings of the 2nd USENIX Workshop on Offensive Technologies, 2008.
[28] Alexey Sintsov. Honeypot That Can Bite: Reverse Penetration. In Black Hat Europe Conference, 2013.
[29] SOPHOSLABS. Facebook Worm: Likejacking. https://nakedsecurity.sophos.com/2010/05/31/facebook-likejacking-worm/, Accessed March 19, 2020.
[30] Philipp Vogt, Florian Nentwich, Nenad Jovanovic, Engin Kirda, Christopher Kruegel, and Giovanni Vigna. Cross Site Scripting Prevention with Dynamic Data Tainting and Static Analysis. In Proceedings of the Network and Distributed System Security Symposium (NDSS), 2007.
[31] Ran Wang, Guangquan Xu, Xianjiao Zeng, Xiaohong Li, and Zhiyong Feng. TT-XSS: A Novel Taint Tracking Based Dynamic Detection Framework for DOM Cross-Site Scripting. Journal of Parallel and Distributed Computing, 2018.
[32] Wei Xu, Sandeep Bhatkar, and R Sekar. Practical Dynamic Taint Analysis for Countering Input Validation Attacks on Web Applications. Technical Report SECLAB-05-04, Department of Computer Science, Stony Brook, 2005.

### A. Vulnerability Disclosure

All the vulnerabilities reported in this paper were promptly notified to the scanning system vendors. We followed the ISO 2914712 guidelines for responsible disclosure. Below, we describe each step of the disclosure process and the vendors' feedback.

#### A.1 First Contact

The first step of our responsible disclosure process involved sending a non-technical email notification to each vendor. Here is the email template we used:

**Email Template:**

```
Dear [Vendor Name],

My name is [Your Name]. As part of my research activity on a novel threat model, I found that your platform is likely vulnerable to XSS attacks. Specifically, the vulnerability I discovered could expose your end-users to significant risks.

For these reasons, I am contacting you to start a responsible disclosure process. I kindly ask you to point me to the right channel (e.g., an official bug bounty program or a security officer to contact).

Kind regards,
[Your Name]
```

We sent the email through official channels, such as contact mail or forms, when available. For others, we tried a list of 13 frequent email addresses, including security@, webmaster@, contact@, info@, admin@, and support@. In five cases where these attempts failed, we submitted the corresponding vulnerabilities to OpenBugBounty [13].

#### A.2 Technical Disclosure

After the vendor responded to our initial notification, providing us with the technical point of contact, we sent a detailed technical report describing the vulnerability. The report was structured as follows, accompanied by a screenshot of the Proof of Concept (PoC) exploit inside their system:

**Report Template:**

```
The issue is a Cross-Site Scripting (XSS) attack on your online vulnerability scanning tool. This exposes your users to attacks, potentially leading to data leakage and account takeover.

A malicious server can respond with XSS payloads instead of standard headers. For example, it could respond with the following minimal HTTP response:

```
HTTP/1.1 200 OK
Content-Type: text/html
Content-Length: 25

<script>alert('XSS');</script>
```

Since your website displays this data in a report, this code will display a popup on the user's page. An attacker can include any JavaScript code, taking control of the user's browser (see https://beefproject.com/) and making them perform actions on your website or steal personal information.

I have attached a screenshot of the PoC running on your page. The PoC is completely harmless, both for your website and for you to test. I also hosted a malicious (but harmless) server here: [Server URL]. You can perform any scan you want against it (please let me know if it is offline).

In a few cases, we extended the report with additional details requested by some vendors, such as the CVSSv3 calculation link and an impact evaluation specific to their scanning system.

#### A.3 Vendors' Feedback

Out of the 36 notifications, we received 12 responses to the first contact message, all within 2 days. Among the notified vendors, 5 fixed the vulnerability within 10 days. Another vendor informed us that, although they patched their scanning system, they started a more general investigation of the vulnerability and our attacker model, which will result in a major update in the future. Finally, after fixing the vulnerability, one vendor asked us not to mention them in our research.