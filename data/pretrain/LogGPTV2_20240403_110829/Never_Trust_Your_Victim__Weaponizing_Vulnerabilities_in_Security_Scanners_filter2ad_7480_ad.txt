In terms of vulnerabilities, some researchers already re-
ported weaknesses in scanning systems. The closest to our
work is CVE-2019-5624 [4], a vulnerability in RubyZip that
also affects Metasploit Pro. This vulnerability allows attack-
ers to exploit path traversal to create a cron job that runs
arbitrary code, e.g., to create a reverse shell. To achieve this,
the attacker must import a malicious ﬁle in Metasploit Pro as
a new project. However, as for [9], this attack requires social
engineering as well as other conditions (e.g., about the OS
used by the attacker). As far as we know, this is the only other
RCE vulnerability reported for Metasploit Pro. Instead, apart
from ours, no XSS vulnerabilities have been reported.
7.2 Security scanners assessment
Several authors considered the assessment of security scan-
ners. However, they mainly focus on their effectiveness and
efﬁciency in detecting vulnerabilities.
Doupé et al. [10] present WackoPicko, an intentionally vul-
nerable web application designed to benchmark the effective-
ness of security scanners. The authors provide a comparison
of how open source and commercial scanners perform on the
different vulnerabilities contained in WackoPicko.
Holm et al. [18] perform a quantitative evaluation of the ac-
curacy of security scanners in detecting vulnerabilities. More-
over, Holm [17] evaluated the performance of network secu-
rity scanners, and the effectiveness of remediation guidelines.
Mburano et al. [23] compare the performance of OWASP
ZAP and Arachni. Their tests are performed against the
OWASP Benchmark Project [13] and the Web Application
Vulnerability Security Evaluation Project (WAVSEP) [6].
Both these projects aim to evaluate the accuracy, coverage,
and speed of vulnerability scanners.
To the best of our knowledge, there are no proposals about
the security assessment of scanning systems. Among the pa-
pers listed above, none consider our attacker model or, in
general, the existence of security vulnerabilities in security
scanners.
Figure 11: Phising through CheckShortURL.
Exploiting redirect checkers Redirect locations are con-
tained in the Location header of the HTTP response asking
for a redirection. According to our attacker model, this value
is controller by the attacker. Thus, if the victim uses a vulner-
able redirect checker, the report may convey an attack to the
user browser. Since the goal is phishing, the attacker has two
possibilities, i.e., forcing the URL redirection and exploit the
scanning system reputation.
In the ﬁrst case, the attacker delivers an XSS payload such
as window.location = "http://ev.il/". When it is ex-
ecuted, the browser is forced to open the given location and
to redirect the user to the phishing site.
The second case is even more subtle. Since the XSS attack
is delivered by the scanning system, the attacker can perform a
phishing operation and ascribe it to the reporting system. For
instance, the attacker can make the user browser download
a malicious ﬁle pretending to be the scanning system pdf
report. In this way, the attacker abuses the reputation of the
scanning system to lure the victim. This can be achieved with
the following payload.
window.location="http://tmpfiles.org/report.pdf"
The effect of injecting such a payload in CheckShortURL is
shown in Figure 11.
7 Related Work
In this section, we survey the related literature.
7.1 Attacking the attacker
Although not frequent in the literature, the idea of attacking
the attackers is not completely new. Its common interpretation
is that the victim of an attack carries out a counter-strike
against the host of the aggressor. However, even tracking an
attack to its actual source is almost impossible if the attacker
takes proper precautions (as discussed in Section 6.1). To
the best of our knowledge, we are the ﬁrst to consider the
response-based exploitation of the attackers scanning systems.
26    23rd International Symposium on Research in Attacks, Intrusions and Defenses
USENIX Association
7.3 Vulnerability detection
8 Conclusion
Many authors proposed techniques to detect software vulner-
abilities. In principle, some of these proposals can be applied
to scanning systems.
The general structure of vulnerability testing environments
was deﬁned by Kals et al. [19]. Our TEE implements their
abstract framework by adapting it to inject responses instead
of requests. The main difference is our test stub, that receives
the requests from the scanning system under test. We substi-
tute the crawling phase with tainted ﬂow enumeration (see
Section 4.2). During the attack phase, we substitute the pay-
load list with a list of polyglots, which reduces testing time.
Our exploit checker implements their analysis module as we
also deal with XSS.
Many authors have proposed techniques to perform vulner-
ability detection through dynamic taint analysis. For instance,
Xu et al. [32] propose an approach that dynamically monitors
sensitive sinks in PHP code. It rewrites PHP source code, in-
jecting functions that monitor data ﬂows and detect injection
attempts.
Avancini and Ceccato [3] also use dynamic taint analysis to
carry out vulnerability detection in PHP applications. Brieﬂy,
they implement a testing methodology aiming at maximizing
the code coverage. To check whether a certain piece of code
was executed, they rewrite part of the application under test
to deploy local checks.
These approaches rely on inspecting and manipulating the
source code of the application under test. Instead, we work
under a black-box assumption.
Besides vulnerability detection, some authors even use dy-
namic taint analysis to implement exploit detection and pre-
vention methodologies. Vogt et al. [30] prevent XSS attacks
by combining dynamic and static taint analysis in a hybrid ap-
proach. Similarly, Wang et al. [31] detect DOM-XSS attacks
using dynamic taint analysis. Both these approaches iden-
tify sensitive data sinks in the application code and monitor
whether untrusted, user-provided input reaches them.
Dynamic taint analysis techniques were also proposed for
detecting vulnerabilities in binary code.
Newsome and Song [24] propose TaintCheck, a method-
ology that leverages dynamic taint analysis to ﬁnd attacks
in commodity software. TaintCheck tracks tainted sinks and
detects when an attack reaches them. It requires a monitoring
infrastructure to achieve this.
Clause et al. [7] propose a generic dynamic taint analysis
framework. Similarly to [24], Clause et al. implement their
technique for x86 binary executables. However, the theoretical
framework could be adapted to ﬁt our methodology.
In principle, the exploit prevention techniques mentioned
above might be used to mitigate some of the vulnerabilities de-
tected by RevOK. However, they do not deal with vulnerabil-
ity detection. Moreover, they require access to the application
code.
In this paper we introduced a new methodology, based on a
novel attacker model, to detect vulnerabilities in scanning sys-
tems. We implemented our methodology and we applied our
prototype RevOK to 78 real-world scanning systems. Our ex-
periments resulted in the discovery of 36 new vulnerabilities.
These results conﬁrm the effectiveness of our methodology
and the relevance of our attacker model.
Acknowledgements. This paper was partially funded by
EU H2020 research project SPARTA (grant agreement
n.830892).
References
[1] Wade Alcorn.
Beef autorun
rule
engine.
https://github.com/beefproject/beef/wiki/
Autorun-Rule-Engine, Accessed March 19, 2020.
[2] Wade Alcorn. The Browser Exploitation Framework,
Accessed March 3, 2020.
[3] Andrea Avancini and Mariano Ceccato. Towards Secu-
rity Testing with Taint Analysis and Genetic Algorithms.
In Proceedings of the ICSE Workshop on Software En-
gineering for Secure Systems, 2010.
[4] Luca Carettoni. On insecure zip handling, Rubyzip and
Metasploit RCE (CVE-2019-5624). https://blog.
doyensec.com/2019/04/24/rubyzip-bug.html,
Accessed March 19, 2020.
[5] CheckShortURL. CheckShortURL, Accessed March 23,
2020.
[6] Shay Chen. The Web Application Vulnerability Scan-
ner Evaluation Project. https://sourceforge.net/
projects/wavsep/, Accessed March 19, 2020.
[7] James Clause, Wanchun Li, and Alessandro Orso. Dy-
tan: a generic dynamic taint analysis framework.
In
Proceedings of the International Symposium on Soft-
ware Testing and Analysis, 2007.
[8] MITRE Corporation. ATT&CK - Technical Information
Gathering. https://attack.mitre.org/tactics/
TA0015/, Accessed March 20, 2020.
[9] Supeno Djanali, FX Arunanto, Baskoro Adi
Pratomo, Abdurrazak Baihaqi, Hudan Studiawan,
and Ary Mazharuddin Shiddiqi. Aggressive web
application honeypot for exposing attacker’s identity.
In Proceedings of the 1st International Conference
on Information Technology, Computer, and Electrical
Engineering, 2014.
USENIX Association
23rd International Symposium on Research in Attacks, Intrusions and Defenses    27
[10] Adam Doupé, Marco Cova, and Giovanni Vigna. Why
Johnny can’t pentest: An analysis of black-box web vul-
nerability scanners. In Proceedings of the International
Conference on Detection of Intrusions and Malware,
and Vulnerability Assessment, 2010.
[11] Ahmed Elsobky. Unleashing an Ultimate XSS Poly-
https://github.com/0xsobky/HackVault/
glot.
wiki/Unleashing-an-Ultimate-XSS-Polyglot,
Accessed March 19, 2020.
[12] OWASP Foundation. OWASP Top Ten. https://
owasp.org/www-project-top-ten/, 2017.
[13] OWASP Foundation. OWASP Benchmark Project.
https://owasp.org/www-project-benchmark/,
Accessed March 19, 2020.
[14] Satish Gojare, Rahul Joshi, and Dhanashree Gaigaware.
Analysis and Design of Selenium WebDriver Automa-
tion Testing Framework. Procedia Computer Science,
2015.
[15] MUNSIRADO Group. Nmap Online, Accessed March
3, 2020.
[16] Web Hypertext Application Technology Working Group.
HTML Living Standard, Last updated March 27, 2020.
[17] Hannes Holm. Performance of automated network vul-
nerability scanning at remediating security issues. Com-
puters & Security, 2012.
[18] Hannes Holm, Teodor Sommestad, Jonas Almroth, and
Mats Persson. A quantitative evaluation of vulnerabil-
ity scanning. Information Management & Computer
Security, 2011.
[19] Stefan Kals, Engin Kirda, Christopher Kruegel, and Ne-
nad Jovanovic. SecuBat: A Web Vulnerability Scanner.
In Proceedings of the 15th International Conference on
World Wide Web, 2006.
[20] Arturs Lavrenovs and F Jesús Rubio Melón. HTTP
Security Headers Analysis of Top One Million Websites.
In Proceedings of the 10th International Conference on
Cyber Conﬂict (CyCon), 2018.
[21] Arturs Lavrenovs and Gabor Visky. Investigating HTTP
response headers for the classiﬁcation of devices on the
In Proceedings of the 7th IEEE Workshop
Internet.
on Advances in Information, Electronic and Electrical
Engineering (AIEEE), 2019.
[22] Paul Leach, Michael Mealling, and Rich Salz. A univer-
sally unique identiﬁer (UUID) urn namespace. 2005.
[23] Balume Mburano and Weisheng Si. Evaluation of Web
Vulnerability Scanners Based on OWASP Benchmark.
In Proceedings of the 26th International Conference on
Systems Engineering (ICSEng), 2018.
[24] James Newsome, Dawn Song, James Newsome, and
Dawn Song. Dynamic taint analysis: Automatic detec-
tion, analysis, and signature generation of exploit attacks
In Proceedings of the 12th
on commodity software.
Network and Distributed Systems Security Symposium,
2005.
[25] Nmap project. Nmap, Accessed March 23, 2020.
[26] E. J. Schwartz, T. Avgerinos, and D. Brumley. All You
Ever Wanted to Know about Dynamic Taint Analysis
and Forward Symbolic Execution (but Might Have Been
Afraid to Ask). In Proceedings of the IEEE Symposium
on Security and Privacy, 2010.
[27] Craig A Shue, Andrew J Kalafut, and Minaxi Gupta.
Exploitable Redirects on the Web: Identiﬁcation, Preva-
lence, and Defense. In Proceedings of the 2nd USENIX
Workshop on Offensive Technologies, 2008.
[28] Alexey Sintsov. Honeypot that can bite: Reverse pene-
tration. In Black Hat Europe Conference, 2013.
[29] SOPHOSLABS.
Facebook worm: Likejacking.
https://nakedsecurity.sophos.com/2010/05/
31/facebook-likejacking-worm/, Accessed
March 19, 2020.
on
[30] Philipp Vogt, Florian Nentwich, Nenad Jovanovic, Engin
Kirda, Christopher Kruegel, and Giovanni Vigna. Cross
Site Scripting Prevention with Dynamic Data Tainting
and Static Analysis. In Proceedings of the Network and
Distributed System Security Symposium (NDSS), 2007.
[31] Ran Wang, Guangquan Xu, Xianjiao Zeng, Xiaohong
Li, and Zhiyong Feng. TT-XSS: A novel taint tracking
based dynamic detection framework for DOM Cross-
Site Scripting. Journal of Parallel and Distributed Com-
puting, 2018.
[32] Wei Xu, Sandeep Bhatkar, and R Sekar. Practical dy-
namic taint analysis for countering input validation at-
tacks on web applications. Technical Report SECLAB-
05-04, Department of Computer Science, Stony Brook,
2005.
28    23rd International Symposium on Research in Attacks, Intrusions and Defenses
USENIX Association
A Vulnerability Disclosure
All the vulnerabilities reported in this paper were promptly
notiﬁed to the scanning system vendors. We based our re-
sponsible disclosure process on the ISO 2914712 guidelines.
Below, we describe each disclosure step in detail and the
vendors feedback.
A.1 First contact
The ﬁrst step of our responsible disclosure process consisted
of a non-technical email notiﬁcation to each vendor. We report
our email template below.
Dear ,
my name is 
As part of my research activity on a
novel threat model , I found that your
platform is most likely vulnerable
to XSS attacks .
In particular , the vulnerability I
discovered might expose your end - users
to concrete risks .
For these reasons , I am contacting
you to start a responsible disclosure
process . In this respect , I am kindly
asking you to point me to the right
channel (e.g., an official bug bounty
program or a security officer to
contact ).
Kind regards
We sent the email through ofﬁcial channels, e.g., contact
mail or form, when available. For all the others, we tried with
a list of 13 frequent email addresses, including security@,
webmaster@, contact@, info@, admin@, support@.
In 5 cases the previous attempts failed. Thus, we submitted
the corresponding vulnerabilities to OpenBugBounty.13
A.2 Technical disclosure
After the vendor answered our initial notiﬁcation, providing
us with the technical point of contact, we sent a technical
report describing the vulnerability. The report was structured
according to the following template, which was accompanied
by a screenshot of the PoC exploit inside their system.
The issue is a Cross - Site Scripting
12https://www.iso.org/standard/72311.html
13https://www.openbugbounty.org
attack on your online vulnerability
scanning tool .
This exposes your users to attacks ,
possibly leading to data leakage and
account takeover .
A malicious server can answer with XSS
payloads instead of its standard headers .
For example , it could answer with this
( minimal ) HTTP response :
Since your website displays this data in
a report , this code displays a popup on
the user page , but an attacker can
include any JavaScript code in it ,
taking control of the user browser ( see
https :// beefproject . com /) , and hence
make them perform actions on your
website or steal personal information .
I attached a screenshot of the PoC
running on your page . The PoC is
completely harmless , both for your
website and for you to test .
I also hosted a malicious ( but harmless )
server here if you want to reproduce the
issue : 
You can perform any scan you want
against it ( please let me know if it is
offline ).
In a few cases we extended the report with additional de-
tails, requested by some vendors. For example, some of them
asked for the CVSSv314 calculation link and an impact evalu-
ation speciﬁcally referring their scanning system.
A.3 Vendors feedback
Out of the 36 notiﬁcations, we received 12 responses to the
ﬁrst contact message. All the responses arrived within 2 days.
Among the notiﬁed vendors 5 ﬁxed the vulnerability within 10
days. Another vendor informed us that, although they patched
their scanning system, they started a more general investiga-
tion of the vulnerability and our attacker model. This will
result in a major update in the next future. Finally, after ﬁxing
the vulnerability, one of the vendors asked us not to appear in
our research.
14https://nvd.nist.gov/vuln-metrics/cvss/v3-calculator
USENIX Association
23rd International Symposium on Research in Attacks, Intrusions and Defenses    29