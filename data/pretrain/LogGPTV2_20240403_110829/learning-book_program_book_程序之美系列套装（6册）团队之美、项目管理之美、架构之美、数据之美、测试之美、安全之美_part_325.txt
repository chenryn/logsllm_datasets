白板上画的草图，成为了用户社区建模语言（UserCommunity
ModelingLanguage，UCML）的灵感。此后UCML成为了世界各地大量
的性能测试人员采用的选择建模以及记录系统使用的方法。欲了解
更多关于UCML的信息，请访问
http://www.perftestplus.com/articles/ucml.pdf
这不是内存泄漏
这是在“好的，那么什么是性能测试用例？”插曲发生近2个月之后，
我们终于做好准备在eVersity项目中开始根据一个相当完整的系统使
1859
---
## Page 1861
用模型加载测试。单用户和10个用户的测试，在这个特定的构造上
取得了比性能需求更好的结果，所以我准备运行100个用户的测试。
由于这是第一次同时运行多个使用情景，我定了一个观察点来在测
试运行时观察测试，以及检查一些我可以得到的服务器统计数据。
测试运行了大约一个小时，一切看上去都不错，直到我看到了散点
图（scatterchart），该图表明了所有访问该应用程序服务器的网页
在测试开始约10分钟后开始变慢，且越来越慢，直到测试结束。我
手动试用了网站，没发现什么问题。我检查了负载生成工具的日志
文件，来验证我看到的是否是脚本错误造成的。在确认了这不是我
的问题后，我再次运行了测试，只不过这一次我在运行测试的同时
手动使用该网站。约15分钟后，我发现这些网页越来越慢。我拿起
电话打给了该项目的架构师Sam，告诉他，应用程序服务器上有内存
泄漏。
Sam则问我是否正确地运行测试。我告诉他，是的。我听到他敲击键
盘的声音。他问测试是否仍在运行。我告诉他，是的。他说：“不，
没有内存泄漏。这是你的工具的问题。"然后挂断了电话。
我气坏了。在接下来的两天内，我运行了该测试一次又一次。我仔
细检查了日志文件。我创建了表格和图表。我把他们带到项目会议
上。我开始了缺陷报告。我给了Sadra性能测试环境的网址，并要求
她在我运行测试的同时使用应用程序。几乎每个人都同意，这像内
存泄漏的行为。到了第二天结束时，甚至Sam也同意，这看上去像是
一个内存泄漏。但随后他却接着说，“但事实并非如此。”
在我第一次报告这一问题后的第三天晚上，Sam打电话给我，让我再
次尝试运行测试，然后挂断了电话。我启动了测试。大约20分钟
后，Sam打电话回来问测试进行得如何。它看起来好极了。我问他是
如何修复它的。他只是说，“安装永久许可证密钥。临时许可证只允
许3个同时连接。”
在此后的几周内，Sam都没有跟我说话。由于首先他不是很健谈，所
以我不能肯定，但我认为我得罪了他。然后，令人惊讶的事情发生
了。Sam打电话给我，让我在开发环境中运行“前儿周的那个测试”，
并在结束后把结果送到楼上。
当我拿着结果到楼上时，Sam对我说，“你在前几周的工作令人印象
深刻。我花了超过20小时才追查到关键是在许可证。我们运行的测
试看上去的确像一个内存泄漏，但内存计数器显示还有大量可用内
1860
---
## Page 1862
存。无论如何，从现在开始，让我们一起来看那些奇怪的结果，如
何？”
从那次以后，Sam要求管理层为他的所有项目都指派我。他经常让我
设计和运行一些我并不完全理解的测试，不过这些测试会在一两大
内导致显著的性能改进。我经常打电话给他，说：“我这里有一些古
结果，有时他会想要看一看，其他时间他会让我在一个小时后再运
行测试，但他再也没有以工具问题为理由驳回我的结果。而我再也
没有在和Sam确认我的怀疑之前，就宣布性能问题的原因。
当然，这里美丽的是，Sam来见我，将我视为能帮助他在更少试验和
错误的情况下架构性能更好的应用程序的宝贵资源。回想起来，我
只希望Sam能更健谈一些。
处理不了负荷？修改用户界面吧
在"这不是内存泄漏"事件之后不久，就是为财务规划应用程序做决
定的时候。应用程序功能正常，但我们根本不相信我们可以将性能
提高到足以应付超级杯商业广告一—灵感的高峰。我没有列席关于
选项的讨论，直到客户和开发团队双方都开始担心的至少两个星期
后。我并不知道那天我被邀请参加与客户的“我们要做些什么”会议
的确切原因，但事实证明，无论是谁邀请我，不管他是有意还是无
意，对于他邀请我的这件事我是很开心的。
这个问题的简短版本，该应用程序的所有迹象显示它完全有能力处
理用户加载的返回值，但是，如果预测是接近正确的，那么其体系
结构是无论如何都无法处理超级杯厂告所产生的用户负载新高峰
的。我在当大会议之前不知道，我们曾达到过硬件和基础设施都没
有反应的程度。该应用程序将要在现有的环境运行。现在的问题
是，如何应对营销活动产生的使用高峰？
大约30分钟内，我听到了一个又一个昂贵或不可能的想法，被提出
又被拒绝。最可能的选择似乎是租用4组相同的硬件并为它们找一个
数据中心，我们估计这样的费用足够应付所有情况了。Ted摇了摇
头，嘟曦着类似他不想失去工作的话。
最后，我说话了。我指出，事实上只有两件事，大量用户同时做时
我们无法处理。一个是“生成个性化退休储蓄计划”，另一个是“生成
1861
---
## Page 1863
个性化大学储蓄计划”。我还指出，人们如果要得到一个相对准确的
计划，他们必须输入大量他们手边可能没有的信息。我随后开始设
想，如果我们重新设计用户界面，使用户至少要点击到调查问卷的
最后时，这些选项才出现（而不是在调查问卷的每一页上提供，无
形中鼓励了人们在填入所有信息之后再点击该按钮，这样他们就能
看到图表和图形的变化），这样可能会把生成计划的数量降低到可
以通过营销活动的程度。我还进一步补充说，我们可以在营销活动
结束后把计划生成链接再加回每个网页上。
震惊的表情和惊讶的安静持续了很长时间，以致我开始有些尴尬。
终于，一个我不认识的女人开始在一张纸上潦草地涂画，然后拿出
，是
能可以工作。"每个人都将震惊的目光转向她时，Ted问她说了什
么。她重复了一遍，但补充说，“哦，不完全是他说的那样，但如果
我们....
说实话，她说的话我有一部分不记得了，有一部分我永远无法理
解，因为她似乎在用一些秘密的财务规划语言来同Ted交谈。她一作
完解释，Ted就说：“做吧！"然后每个人都开始微笑，赞扬我解决了
问题。
几周以后，我拿到了一个修改过的用户界面以及使用模型的新的构
造来测试。我们花了几次选代对用户界面进行小的修改和调整，但
是我们实现了我们的目标负荷。我很久以后才发现那次市场营销活
动是成功的，我们的系统挺住了甚至没出一个小故障。事实上，营
销活动做得相当成功，一家大银行收购了该公司，Ted得到了升职，
当然，那家大银行让他们自己的开发人员重建了整个应用程序以运
行在他们首选供应商的硬件和软件上。
这里最明显的美丽是该项目成功了，而我们得出的解决方案既不复
杂也不昂贵。不太明显的美丽在于常常被忽视的、在解决问题的工
作组中包括多个不同角度的人的价值。
这不可能是网络的原因
结果，eVersity项目在该应用程序正式产品化之前就被取消了（这里
的取消，我指的是客户某一天突然打电话告诉我们，他们的整个部
门被解散了），所以我们没有机会看到我们的性能测试是如何准确
1862
---
## Page 1864
了。从好的方面来看，这意味着我们的团队可以工作在几个星期后
出现的一个从客户端服务器到Web呼叫中心的改建项目了。
从性能测试的角度来说，该项目的前几个月非常平静。Sam和其余的
开发人员从一开始就一直和我分享各种信息。委托该项目的客户的
副总裁Jim，曾经是擅长于性能的框架并发人员，所以我们对合同或
交付项定义中有关性能的部分没有任何异议，且历史系统使用文档
已经为我们准备好了。当然，我们同样面临典型的环境、测试数据
和脚本的挑战，但我们都通过协作一一攻克了。
接着，我遇到了迄今为止最奇怪的性能问题。在向数据库请求信息
的网页上，我看到了我称之为“随机4秒"的响应时间模式。在一些研
究和开发人员的帮助下，我们发现这些网页在被请求时，有一半的
情况在大约0.25秒内就返回了。剩余情况中的一半，它们在4.25秒内
返回。再剩余情况的一半，8.25秒，以此类推。
通过共同努力，我们系统地排除所有不会导致随机4秒的东西。事实
上，我们系统地排除了系统中我们可以接触到的每一部分，即除网
络基础设施外的一切。我对于一切都感觉良好，所以当我被告知我
不能同竹部门的任何人交谈时，我以为那是个玩笑。但它不是。看
起来是因为之前的一些开发团队曾把所有问题都归咎于IT部门，浪
费了他们很多时间，因此他们制定了这一政策，以确保类似的事情
不会再次发生。
唯一的与IT部门进行交互的方法是我们发出一份需求备忘录并由Jim
签字，内容包括详细的说明，通过跨部门的邮件发给IT部门的副总
裁。我起草了一份备忘录。Jim签字并送交了。两天后，Jim收到了
写着“不同意"的回复。Jim认为我们应该发送另一份备忘录，说明我
们所做的测试显示网络是我们应该追查的方向。那份备忘录返回时
附带了一张纸条，写着：“已检查。不是我们的问题。”
这种情况持续了一个多月。我们做越多测试，就越相信这是我们控
制以外的东西的结果，而此应用程序的唯一不受我们控制的部分就
是网络。最后，Jim设法安排了一个与IT部门的一小时的电话工作会
议，表面上的理由是“让我们放弃骚扰他们”。我们把一切都设置好
了，这样IT人员在电话上准备好时，我们所有要做的就是点击一个
按钮。我们整个团队都拨入了电话，只是为了确保我们可以回答任
何可能出现的问题。
1863
---
## Page 1865
IT人员在一小时整拨通了电话，并要求我们提供产生负载的机器和
与我们的应用程序相关的服务器的ID号码（即他们部门安装电脑时
贴在机器上的纸条）。几分钟后，他们让我们继续。我们就按下了
按钮。在药5分钟的静默后，我们听到线路里传出不太清晰的说话
声。其中一个IT人员要求我们停止测试。他说，他们将要静音，但
要求我们不要断线。又过了20分钟左右，他们回来了，让我们重新
启动测试，并告知他们问题是否已经解决了。
10分钟不到，我们就确认问题已经解决了。在这10分钟，有人（我
不记得是谁）问T工作人员（他们没有告诉我们他们的名字）他们
发现了什么。他们只是说，看上去像是一个路由器在最近的机架安
装时物理上损坏了，他们已经更换了路由器。
据我们所知，这次的互动并没能使之后的团队与这些IT人员的交流
变得更容易。我一直在想我是多么幸运，能在一个我能获得充分帮
助和支持的团队中工作。从我发现了这个问题一直到IT部门更换损
坏的路由器之间的6个星期时间里，并发人员写了一些公用工具，抽
取系统片断，留到很晚实时监控非工作时间的测试，并花了很多时
间帮助我整理我们所做的测试的文档，就为了证明我们需要T部门
的时间。这些交互才使得我确信性能测试可以是美丽的。
因为它太慢了，我们讨厌它
随机4秒问题解决之后，真正的测试并始了：用户验收测试（User
AcceptanceTest,UAT）。在某些项目中，验收测试不过是走个形式，
但在这个项目（以及在呼叫中心支持软件之后，所有我工作过的项
目）中，验收测试是决定是否能发布的核心。为了这一点，
Susan（呼叫中心经理）和该项目的验收测试组长，享有对任何关于
什么可以在产品中发布以及何时发布的决定的否决权。
验收测试在功能方面如预期一样顺利。需要进行一些小的修改，但
没有什么不合理的或过难实现的。让我们都感到困惑和关注的反馈
意见是，每一个用户验收测试人员都或多或少地提到，应用程序“很
慢"或“时间太长了”。显然，我们很担心，因为没有什么使呼叫中心
代表的一大更糟糕了一一在听看客户各种各样的不满的同时，还要
忍受“谢谢您的耐心等待，我们的系统今天有点慢”。我们感到困惑
是因为我们的网站速度很快，尤其是在公司的网络上，每个用户验
收测试小组由5个代表组成，每人同时接10个模拟电话，或者大约每
1864