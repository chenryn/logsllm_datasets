                        variable = "\"" + variable + "\""
                    line = line.replace(varDeclaration[0], variable)
最后，将所有行都保存在一个新文件中。
    with open('deobfuscatedSample.txt', 'w') as f:
        f.write(output)
下面给出完整的Python3脚本及相关的注释。
    #Created by Max 'Libra' Kersten (@LibraAnalysis)
    import re
    #Define information regarding the original script's location
    powershellPath = 'powershellSample.txt'
    powershellFile = open(powershellPath,'r')
    #Read all lines of the original script
    powershellContent = powershellFile.readlines()
    #The variable which contains all deobfuscated lines
    output = ''
    #The variable which keeps track of the amount of string formats that have been replaced
    formatCount = 0
    #The variable which keeps track of the amount of variables that have been replaced
    variableCount = 0
    #The variable which keeps track of the amount of removed back ticks
    backtickCount = 0
    #Loop through the file, line by line
    for line in powershellContent:
        backtickCount += line.count("`")
        #Replace the back tick with nothing to remove the needless back ticks
        line = line.replace("`", "")
        #Match the string formatting
        matchedLine = re.findall(""""((?:\{\d+\})+)"\s*-[fF]\s*((?:'.*?',?)+)""", line)
        #If one or more matches have been found, continue. Otherwise skip the replacement part
        if len(matchedLine) > 0:
            #Each match in each line is broken down into two parts: the indices part ("{0}{2}{1}") and the strings ("var", "ble", "ia")
            for match in matchedLine:
                #Convert all indices to integers within a list
                indices = list(map(int, re.findall("{(\d+)}", match[0])))
                #All strings are saved in an array
                strings = re.findall("'([^']+?)'", match[1])
                #The result is the correctly formatted string
                result = "".join([strings[i] for i in indices])
                #The current line is altered based on the found match, with which it is replaced
                line = line.replace(match[0], result, 1)
                line = line.replace(match[1], "", 1)
                #Regex the "-f" and "-F" so that "-f[something]" is not replaced
                formatFlag = re.findall("""(-[fF])(?=[^\w])""", line)          
                if len(formatFlag) > 0:
                    for formatFlagMatch in formatFlag:
                        line = line.replace(formatFlagMatch, "")
                #Find all strings between quotation marks.
                varDeclaration = re.findall("""(? 0:
                    for string in varDeclaration:
                        variable = string.replace("\"", "")
                        variable = variable.replace("+", "")
                        variable = variable.replace(" ", "")
                        variable = "\"" + variable + "\""
                        variableCount += 1
                #Replace the variable with the concatenated one
                    line = line.replace(varDeclaration[0], variable)
                formatCount += 1
        #When all matches are done, add the altered line to the output
        output += line
    #When all lines are checked, write the output variable to a file
    with open('deobfuscatedSample.txt', 'w') as f:
        f.write(output)
    print("Amount of removed back ticks:")
    print(backtickCount)
    print("Amount of formatted strings that have been deobfuscated and concatenated:")
    print(formatCount)
    print("Amount of variables that have been concatenated:")
    print(variableCount)
    print("Total amount of modifications:")
    print((backtickCount + formatCount + variableCount))
要想了解这里修改了多少个值，可以使用count变量。这个脚本的输出如下所示。
    Amount of removed back ticks:
    8634
    Amount of formatted strings that have been deobfuscated and concatenated:
    1963
    Amount of variables that have been concatenated:
    51
    Total amount of modifications:
    10648
之前，样本的第一部分如下所示：
    $I7KUHX  =[tYpe]("{7}{2}{5}{10}{13}{1}{4}{9}{14}{12}{0}{3}{11}{6}{8}"-f 'mAR','opse','yst','sh','R','eM.RuNti','T','S','E','v','ME.','ALAsATtrIbu','ces.','intEr','I') ;
    &("{0}{2}{1}"-f'sE','-iTeM','T')  
    ("V"+"Ari"+"Ab"+"LE:cF84") ([TYPe]("{2}{0}{1}{7}{9}{6}{10}{3}{4}{5}{8}" -F'yste','m.RU','s','es','.un','ManaGeDty','rV','nTiME.inTEroP','pe','se','iC')  );
    $7eq=  [tyPe]("{1}{0}" -f '32','INT')  ;
    &("{0}{1}" -f's','ET') tIAfhC  ([tyPE]("{0}{1}" -F'bO','ol')  )  ;
    &("{0}{1}{2}"-f 's','ET','-VARIaBLE') 
    kM5l ( [tYPE]("{0}{1}{2}"-F 'U','I','Nt32')  )  ;
    $XD1h =[TYpE]("{1}{0}{2}"-f'NVE','BItco','rtEr');
    &("{2}{1}{0}"-f'tem','ET-I','s') 
    ("VaRIA"+"BLE"+":Rb"+"h0")  ( [tYPE]("{1}{8}{6}{4}{2}{5}{9}{11}{10}{7}{12}{0}{3}" -F 'S','S','r','s','EM.','EFLecT','t','DEraCC','Ys','iOn.em','BlYbUIl','It.ASSEm','e'))  ; 
    $eGj7  =  [tyPe]("{0}{1}{2}" -F 'aPPDOma','i','N');
    &("{1}{0}{2}"-f 'eT-','S','itEM') 
    VAriablE:tg58U ( [TYpE]("{8}{5}{4}{7}{3}{0}{2}{6}{1}" -F'n','gcOnvENtIoNS','.c','o','.REFLEC','sTeM','ALLin','ti','sy') );  
    &("{0}{1}" -f 'S','eT-iTEm')  
    variablE:urYi12 ( [tYPE]("{2}{3}{0}{1}" -F 'I','RONmENt','eN','V')) ;  
    $9hRwNy  =  [tYpE]("{1}{0}"-f'R','uIntpt') ;
    &("{0}{1}{2}" -f'SeT-i','te','m') 
    ("VARI"+"ABLe:6"+"3"+"Y")  ( [tyPe]("{1}{0}" -f'h','MAT') ) ;  
    $MlHiT=[typE]("{5}{6}{4}{1}{2}{3}{0}"-F 'HAl','OpSe','R','vIcEs.mArs','R','syStEm.RunT','Ime.iNte');
    &("{1}{0}" -f 'T','SE') 
    T2NGf  ( [type]("{0}{2}{1}" -F 'IN','PTR','t')) ;
    $j1v  =[tyPe]("{0}{1}"-F 'Co','NveRt') ; 
    function iN`VokE`-r`F`BuxmE`HAEmZbhI
在自动去混淆之后，它就变成具有可读性的代码了：
    $I7KUHX  =[tYpe]("SysteM.RuNtiME.intEropseRvIces.mARshALAsATtrIbuTE" ) ;   
    &("sET-iTeM")  
    ("VARIABLe:63Y") ([TYPe]("system.RUnTiME.inTEroPserViCes.unManaGeDtype" )  );  
    $7eq=  [tyPe]("INT32"  )  ;    
    &("sET" ) 
    tIAfhC  ([tyPE]("bOol" )  )  ; 
    &("sET-VARIaBLE" ) 
    kM5l ( [tYPE]("UINt32" )  )  ;    
    $XD1h =[TYpE]("BItcoNVErtEr");    
    &("sET-Item") 
    ("VARIABLe:63Y")  ( [tYPE]("SYstEM.rEFLecTiOn.emIt.ASSEmBlYbUIlDEraCCeSs"  ))  ; 
    $eGj7  =  [tyPe]("aPPDOmaiN"  );
    &("SeT-itEM" ) 
    VAriablE:tg58U ( [TYpE]("sysTeM.REFLECtion.cALLingcOnvENtIoNS" ) );  
    &("SeT-iTEm"  )  
    variablE:urYi12 ( [tYPE]("eNVIRONmENt"  )) ;  
    $9hRwNy  =  [tYpE]("uIntptR") ;
    &("SeT-item" ) 
    ("VARIABLe:63Y")  ( [tyPe]("MATh" ) ) ;  
    $MlHiT=[typE]("syStEm.RunTIme.iNteROpSeRvIcEs.mArsHAl" );
    &("SET"  ) 
    T2NGf  ( [type]("INtPTR"  )) ;
    $j1v  =[tyPe]("CoNveRt" ) ; 
    function iNVokE-rFBuxmEHAEmZbhI
这样一来，安全分析人员就可以轻松地分析和重构脚本，而不用为去混淆而劳心劳力了。