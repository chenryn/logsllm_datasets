# 一：前置知识
## 1.WebView
现在很多App中都会内置html5界面，有时候会涉及到与android进行交互，这就需要用到WebView控件，WebView可以做到：
    1.显示和渲染web界面
    2.直接使用html进行布局
    3.与js进行交互
创建WebView拥有两种方法，第一种方法是WebView webview = new
WebView(getApplicationContext());创建；第二种是在xml文件内放在布局中；下面以第二种方法为例
Activity_main.xml文件
MainActivity.java文件
    public void onCreate(Bundle savedInstanceState) {
            super.onCreate(savedInstanceState);
            setContentView(R.layout.activity_main);
            // WebView
            WebView webView = (WebView) findViewById(R.id.eeeewebview);
            webView.loadUrl("https://www.baidu.com");
            webView.setWebViewClient(new WebViewClient(){
                @Override
                public boolean shouldOverrideUrlLoading(WebView view, String url) {
                    //使用WebView加载显示url
                    view.loadUrl(url);
                    //返回true
                    return true;
                }
            });
写完之后运行，发现报错，无法打开网页(net::ERR_CLEARTEXT_NOT_PERMITTED)，
经过搜索在manifest内设置usesCleartextTraffic为true即可  
可以看到百度已经被打开了，啊～因为这个app是我用来测试其他东西的，所以会看到三个奇奇怪怪的按钮
## 2.URI
Uri代表要操作的数据，Android上可用的每种资源 (图像、视频片段、网页等) 都可以用Uri来表示。从概念上来讲，UrI包括URL。
Uri的基本结构是
    大致为[scheme:]scheme-specific-part[#fragment]
    细分为[scheme:][//authority][path][?query][#fragment]
path可以存在多个，以"/"连接 scheme://authority/path1/path2/path3?query#fragment
query可以带参数的返回值也可不带 scheme://authority/path1/path2/path3?id = 1#fragment
举例如下
    http://www.eeeeeeeeeeeeeeeea.cn/about?id=1
scheme是在":"之前，所以他匹配的是http
authority是在"//"之后，所以www.eeeeeeeeeeeeeeeea.cn与其对应
path自然对应的就是about这个页面
query对应的是id=1
在安卓内，除了authority和scheme必须存在，其他的可以选择性的要或者不要
将一个url解析成uri对象的操作是Uri.parse(“
## 3.intent
### 1.intent功能
intent是各大组件之间通信的桥梁，Android有四个组件，分别是Activity，Service，Broadcast Receiver，Content
Provider；组件之间可以进行通信，互相调用，从而形成一个app
每个应用程序都有若干个Activity组成，每一个Activity都是一个应用程序与用户进行交互的窗口，呈现不同的交互界面。因为每一个Acticity的任务不一样，所以经常互在各个Activity之间进行跳转，在Android中这个动作是靠Intent来完成的。通过startActivity()方法发送一个Intent给系统，系统会根据这个Intent帮助你找到对应的Activity，即使这个Activity在其他的应用中，也可以用这种方法启动它。
### 2.显式intent和隐式intent
intent包括两种，一是显式另一个是隐式。显式intent通常是已经知道要启动Activity的包名，多发于同一个app内；隐式intent只知道要执行的动作是什么，比如拍照，录像，打开一个网站。
那么隐式的intent如何启动一个组件呢呢？如果没有约束的话可能会造成一些后果，所以在Manifest文件内定义了intent-filter标签，如果组件中的intentfilter和intent中的intentfilter匹配，系统就会启动该组件，并把intent传给它；若有多个组件都符合，系统变会弹出一个窗口，任我们选择启动该intent的应用(app)。
在intent-filter标签中，我们可以选择三个intent的属性进行设置，包括action，category，data
上图intent-filter定义的action为MAIN，代表app以这个activity开始
### 3.intent属性
#### 1.component
该属性是显式intent特有的，表明要启动的类的全称，包括包名和类名。有它就意味着只有Component
name匹配上的那个组件才能接收你发送出来的显式intent。
下面代码可以启动另一个app的主页面
    Intent intent = new Intent(Intent.ACTION_MAIN);
    intent.addCategory(Intent.CATEGORY_LAUNCHER);            
    ComponentName cn = new ComponentName(packageName, className);            
    intent.setComponent(cn);
    startActivity(intent);
一个activity是否能被其他app的组件启动取决于"android:exported"，true能，false不能。如果是false，这个activity只能被相同app的组件启动，或者是相同user
ID的app的组件启动。
**如果显式设置exported属性，不管这个activity有没有设置intent-filter,那么exported的值就是显式设置的值**
**如果没有设置exported属性，那么exported属性取决于这个activity是否有intent-filter**
**如有intent-filter,那么exported的值就是true**
**如没有intent-filter,那么exported的值就是false**
#### 2.action
一个字符串变量，用来指定Intent要执行的动作类别（比如：view or
pick）。你可以在你的应用程序中自定义action，但是大部分的时候你只使用在Intent中定义的action，你可以通过Intent的setAction()方法设置action。
#### 3.data
一个Uri对象，对应着一个数据。只设置数据的URI可以调用setData()方法，只设置MIME类型可以调用setType()方法，如果要同时设置这两个可以调用setDataAndType()。
#### 4.category
一个包含Intent额外信息的字符串，表示哪种类型的组件来处理这个Intent。任何数量的Category
描述都可以添加到Intent中，你可以通过调用addCagegory()方法来设置category。
#### 5.extras
Intent可以携带的额外key-value数据，你可以通过调用putExtra()方法设置数据，每一个key对应一个value数据。你也可以通过创建Bundle对象来存储所有数据，然后通过调用putExtras()方法来设置数据。
#### 6.flags
用来指示系统如何启动一个Activity（比如：这个Activity属于哪个Activity栈）和Activity启动后如何处理它(比如：是否把这个Activity归为最近的活动列表中)。
# 二：题目环境布置
### 1.docker存在问题
运行run.sh，我自己启动了一遍docker环境，修改了一些部分，最终发现是在server.py文件的 **setup_emulator()函数**
中没有模拟出来手机，只是创建了一个AVD环境，并没有emulator成功
由于自己能力有限，实在不知道如何修好这个docker环境，便就此搁置，导致后面silver droid利用也不完全；如若后续进步，必定再战一次
### 2.server.py脚本内函数
#### 1.adb_broadcast
adb broadcast便是将服务器上的flag传给apk的FlagReceiver，通过adb
shell进入手机，可以查看到flag被存到了"files/flag"内
之前有一个疑问，便是manifest文件将Flagreceiver设置为exported为false和设置了intent-filter，防止外界app进行干扰，那么是怎么将flag传递给FlagReceiver呢？
由于root的情况下，是忽略掉exported的，所以可以对其进行广播
    am broadcast -W -a "com.wuhengctf.SET_FLAG" -n "com.bytectf.silverdroid/.FlagReceiver" -e 'flag' 'flag{eeeeeeee}'
#### 2.adb_activity
通过intent传递url数据，下面可以通过-d选项来指定Intent data URI
    am start -a android.intent.action.VIEW -d  https://www.baidu.com
下面的题目介绍，都是以pixel4为环境打的，因为docker我这边模拟不起来
同时记得自己写的apk要在AndroidManifest.xml内加两句话，可以让其有网络访问的权限
         10*1024*1024: # Limit size 10M
                return None
            with open(tmp_file, 'wb') as fp:
                fp.write(f.content)
            return tmp_file
        except:
            return None
    def proof_of_work():
        print_to_user(f"First, to ensure that the service will not be dos, please answer me a question.")
        prefix = random_hex(6)
        suffix = random_hex(difficulty)
        targetHash = sha256((prefix+suffix).encode()).hexdigest()
        print_to_user(f'Question: sha256(("{prefix}"+"{"x"*difficulty}").encode()).hexdigest() == "{targetHash}"')
        print_to_user(f'Please enter the {"x"*difficulty} to satisfy the above equation:')
        proof = sys.stdin.readline().strip()
        return sha256((prefix+proof).encode()).hexdigest() == targetHash
    def check_apk(path):
        # return True
        try:
            z = zipfile.ZipFile(path)
            for f in z.filelist:
                if f.filename == "AndroidManifest.xml":
                    return True
            return False
        except:
            return False
    def setup_emulator():
      #avdmanager是一个命令行工具，可以用于从命令行创建和管理 Android 虚拟设备 (AVD)，借助 AVD，您可以定义要在 Android 模拟器中模拟的 Android 手机
        subprocess.call(
            "avdmanager" +
            " create avd" +
            " --name 'pixel_xl_api_30'" +
            " --abi 'google_apis/x86_64'" +
            " --package 'system-images;android-30;google_apis;x86_64'" +
            " --device pixel_xl" +
            " --force" +
            ("" if isMacos  else " > /dev/null 2> /dev/null"),
            env=ENV,
            close_fds=True,
            shell=True)
        return subprocess.Popen(
            "emulator" +
            " -avd pixel_xl_api_30" +
            " -no-cache" +
            " -no-snapstorage" +
            " -no-snapshot-save" +
            " -no-snapshot-load" +
            " -no-audio" +
            " -no-window" +
            " -no-snapshot" +
            " -no-boot-anim" +
            " -wipe-data" +
            " -accel on" +
            " -netdelay none" +
            " -no-sim" +
            " -netspeed full" +
            " -delay-adb" +
            " -port {}".format(EMULATOR_PORT) +
            ("" if isMacos  else " > /dev/null 2> /dev/null ") +
            "",
            env=ENV,
            close_fds=True,
            shell=True, #通过操作系统的 shell 执行指定的命令
            preexec_fn=os.setsid)
    def adb(args, capture_output=True):  
      #执行adb命令
        return subprocess.run(
            # "adb {}".format(" ".join(args)) +
            # ("" if isMacos  else " 2> /dev/null"),
            ['adb'] + (['-s', 'emulator-36666']+args if isMacos else args),
            env=ENV,
            # shell=True,
            close_fds=True,
            capture_output=capture_output).stdout
    def adb_install(apk):
        adb(["install", "-t", apk])
    def adb_activity(activity, extras=None, wait=False, data=None):
        args = ["shell", "am", "start"]
        if wait:
            args += ["-W"]
        args += ["-n", activity]
        if extras:
            for key in extras:
                args += ["-e", key, extras[key]]
        if data:
            args += ["-d", data]
        adb(args)
    def adb_broadcast(action, receiver, extras=None):
        args = ["shell", "su", "root", "am", "broadcast", "-W", "-a", action, "-n", receiver]
        if extras:
            for key in extras:
                args += ["-e", key, extras[key]]
        adb(args)
    print_to_user(r"""
    [0;1;35;95m░█[0;1;31;91m▀▀[0;1;33;93m░█[0;1;32;92m░░[0;1;36;96m░▀[0;1;34;94m█▀[0;1;35;95m░█[0;1;31;91m░█[0;1;33;93m░█[0;1;32;92m▀▀[0;1;36;96m░█[0;1;34;94m▀▄[0;1;35;95m░█[0;1;31;91m▀▄[0;1;33;93m░█[0;1;32;92m▀▄[0;1;36;96m░█[0;1;34;94m▀█[0;1;35;95m░▀[0;1;31;91m█▀[0;1;33;93m░█[0;1;32;92m▀▄[0m
    [0;1;31;91m░▀[0;1;33;93m▀█[0;1;32;92m░█[0;1;36;96m░░[0;1;34;94m░░[0;1;35;95m█░[0;1;31;91m░▀[0;1;33;93m▄▀[0;1;32;92m░█[0;1;36;96m▀▀[0;1;34;94m░█[0;1;35;95m▀▄[0;1;31;91m░█[0;1;33;93m░█[0;1;32;92m░█[0;1;36;96m▀▄[0;1;34;94m░█[0;1;35;95m░█[0;1;31;91m░░[0;1;33;93m█░[0;1;32;92m░█[0;1;36;96m░█[0m
    [0;1;33;93m░▀[0;1;32;92m▀▀[0;1;36;96m░▀[0;1;34;94m▀▀[0;1;35;95m░▀[0;1;31;91m▀▀[0;1;33;93m░░[0;1;32;92m▀░[0;1;36;96m░▀[0;1;34;94m▀▀[0;1;35;95m░▀[0;1;31;91m░▀[0;1;33;93m░▀[0;1;32;92m▀░[0;1;36;96m░▀[0;1;34;94m░▀[0;1;35;95m░▀[0;1;31;91m▀▀[0;1;33;93m░▀[0;1;32;92m▀▀[0;1;36;96m░▀[0;1;34;94m▀░[0m
    """)
    if not isMacos:
        if not proof_of_work():
            print_to_user("Please proof of work again, exit...\n")
            exit(-1)
    print_to_user("Please enter your poc url:")
    url = sys.stdin.readline().strip()
    # url should be like "https://xxx" to to ensure that `adb shell` passes intent.data correctly.
    if url.strip('"') == url:
        url = f'"{url}"'
    if not url.startswith('"https://'):
        print_to_user("Invalid poc url.\n")
        exit(-1)
    print_to_user("Preparing android emulator. This may takes about 2 minutes...\n")
    emulator = setup_emulator()
    #只有连接上了模拟器/设备连接上了adb，服务才会被执行，而在Android系统完全启动前执行就会有错误发生