name. Consider two instructions, say, I1 and I2, in a program, where I2 comes after I1.
I1
...
Ix
...
I2
In a data dependency, I2 either uses a result produced by I1, or I2 has a data dependency on an
instruction Ix, which in turn has a data dependency on I1. In both cases, a value is effectively
transmitted from I1 to I2.
In a name dependency, I1 and I2 use the same logical resource or name, such as a register or a
memory location. In particular, if I2 writes to the same register that is either read from or written to
by I1, then I2 would have to wait for I1 to execute before it can execute. These are known as write-
after-read (WAR) and write-after-write (WAW) hazards.
I1 reads (or writes) 
...
I2 writes 
In this case, the dependency is not "real" in that I2 does not need I1's result. One solution to handle
register-name dependencies is to rename the conflicting register used in the instructions so that they
become independent. Such renaming could be done in software (statically, by the compiler) or in
hardware (dynamically, by logic in the processor). The 970FX uses pools of physical rename registers
that are assigned to instructions during the mapping stage in the processor pipeline and released when
they are no longer needed. In other words, the processor internally renames architected registers used
by instructions to physical registers. This makes sense only when the number of physical registers is
(substantially) larger than the number of architected registers. For example, the PowerPC architecture
has 32 GPRs, but the 970FX implementation has a pool of 80 physical GPRs, from which the 32
architected GPRs are assigned. Let us consider a specific example, say, of a WAW hazard, where
renaming is helpful.
; before renaming
r20 r21 + r22 ; r20 is written to
...
r20 r23 + r24 ; r20 is written to... WAW hazard here
r25 r20 + r26 ; r20 is read from
; after renaming
r20 r21 + r22 ; r20 is written to
...
r64 r23 + 424 ; r20 is renamed to r64... no WAW hazard now
r25 r64 + r26 ; r20 is renamed to r64
file://C:\Dokumente und Einstellungen\Silvia\Lokale Einstellungen\Temp\~hh687B.htm 20.08.2007
Chapter 3. Inside an Apple Page 34 of 83
Renaming is also beneficial to speculative execution, since the processor can use the extra physical
registers to reduce the amount of architected register state it must save to recover from incorrectly
speculated execution.
Table 37 lists the available renamed registers in the 970FX. The table also mentions emulation
registers, which are available to cracked and microcoded instructions, which, as we will see in Section
3.3.9.1, are processes by which complex instructions are broken down into simpler instructions.
Table 37. Rename Register Resources
Architected Emulation
(Logical (Logical
Resource Resource) Resource) Rename Pool (Physical Resource)
GPRs 32x64-bit 4x64-bit 80x64-bit.
VRSAVE 1x32-bit Shared with the GPR rename pool.
FPRs 32x64-bit 1x64-bit 80x64-bit.
FPSCR 1x32-bit One rename per active instruction group
using a 20-entry buffer.
LR 1x64-bit 16x64-bit.
CTR 1x64-bit LR and CTR share the same rename pool.
CR 8x4-bit 1x4-bit 32x4-bit.
XER 1x32-bit 24x2-bit. Only two bitsthe overflow bit
OV and the carry bit CAare renamed from
a pool of 24 2-bit registers.
VRs 32x128-bit 80x128-bit.
VSCR 1x32-bit 20x1-bit. Of the VSCR's two defined bits,
only the SAT bit is renamed from a pool
of 20 1-bit registers.
3.3.8. Instruction Set
All PowerPC instructions are 32 bits wide regardless of whether the processor is in 32-bit or 64-bit
computation mode. All instructions are word aligned, which means that the two lowest-order bits of
an instruction address are irrelevant from the processor's standpoint. There are several instruction
formats, but bits 0 through 5 of an instruction word always specify the major opcode. PowerPC
instructions typically have three operands: two source operands and one result. One of the source
operands may be a constant or a register, but the other operands are usually registers.
We can broadly divide the instruction set implemented by the 970FX into the following instruction
categories: fixed-point, floating-point, vector, control flow, and everything else.
3.3.8.1. Fixed-Point Instructions
Operands of fixed-point instructions can be bytes (8-bit), half words (16-bit), words (32-bit), or
double words (64-bit). This category includes the following instruction types:
Fixed-point load and store instructions for moving values between the GPRs and storage
file://C:\Dokumente und Einstellungen\Silvia\Lokale Einstellungen\Temp\~hh687B.htm 20.08.2007
Chapter 3. Inside an Apple Page 35 of 83
Fixed-point load-multiple-word (lmw) and store-multiple-word (stmw), which can be used for
restoring or saving up to 32 GPRs in a single instruction
Fixed-point load-string-word-immediate (lswi), load-string-word-indexed (lswx), store-string-
word-immediate (stswi), and store-string-word-indexed (stswx), which can be used to fetch
and store fixed- and variable-length strings, with arbitrary alignments
Fixed-point arithmetic instructions, such as add, divide, multiply, negate, and subtract
Fixed-point compare instructions, such as compare-algebraic, compare-algebraic-immediate,
compare-algebraic-logical, and compare-algebraic-logical-immediate
Fixed-point logical instructions, such as and, and-with-complement, equivalent, or, or-with-
complement, nor, xor, sign-extend, and count-leading-zeros (cntlzw and variants)
Fixed-point rotate and shift instructions, such as rotate, rotate-and-mask, shift-left, and shift-
right
Fixed-point move-to-system-register (mtspr), move-from-system-register (mfspr), move-to-
MSR (mtmsr), and move-from-MSR (mfmsr), which allow GPRs to be used to access system
registers
Most load/store instructions can optionally update the base register with the effective address of the
data operated on by the instruction.
3.3.8.2. Floating-Point Instructions
Floating-point operands can be single-precision (32-bit) or double-precision (64-bit) floating-point
quantities. However, floating-point data is always stored in the FPRs in double-precision format.
Loading a single-precision value from storage converts it to double precision, and storing a single-
precision value to storage actually rounds the FPR-resident double-precision value to single precision.
The 970FX complies with the IEEE 754 standard[32] for floating-point arithmetic. This instruction
category includes the following types:
[32] The IEEE 754 standard governs binary floating-point arithmetic. The standard's
primary architect was William Velvel Kahan, who received the Turing Award in 1989
for his fundamental contributions to numerical analysis.
Floating-point load and store instructions for moving values between the FPRs and storage
Floating-point comparison instructions
Floating-point arithmetic instructions, such as add, divide, multiply, multiply-add, multiply-
subtract, negative-multiply-add, negative-multiply-subtract, negate, square-root, and subtract
Instructions for manipulating the FPSCR, such as move-to-FPSCR, move-from-FPSCR, set-
FPSCR-bit, clear-FPSCR-bit, and copy-FPSCR-field-to-CR
PowerPC optional floating-point instructions, namely: floating-square-root (fsqrt), floating-
square-root-single (fsqrts), floating-reciprocal-estimate-single (fres), floating-reciprocal-
square-root-estimate (frsqrte), and floating-point-select (fsel)
The precision of floating-point-estimate instructions (fres and frsqrte) is less on the 970FX than on
file://C:\Dokumente und Einstellungen\Silvia\Lokale Einstellungen\Temp\~hh687B.htm 20.08.2007
Chapter 3. Inside an Apple Page 36 of 83
the G4. Although the 970FX is at least as accurate as the IEEE 754 standard requires, the G4 is more
accurate than required. Figure 312 shows a program that can be executed on a G4 and a G5 to
illustrate this difference.
Figure 312. Precision of the floating-point-estimate instruction on the G4 and the G5
// frsqrte.c
#include 
#include 
double
frsqrte(double n)
{
double s;
asm(
"frsqrte %0, %1"
: "=f" (s) /* out */
: "f" (n) /* in */
);
return s;
}
int
main(int argc, char **argv)
{
printf("%8.8f\n", frsqrte(strtod(argv[1], NULL)));
return 0;
}
$ machine
ppc7450
$ gcc -Wall -o frsqrte frsqrte.c
$ ./frsqrte 0.5
1.39062500
$ machine
ppc970
$ gcc -Wall -o frsqrte frsqrte.c
$ ./frsqrte 0.5
1.37500000
3.3.8.3. Vector Instructions
Vector instructions execute in the 128-bit VMX execution unit. We will look at some of the VMX
details in Section 3.3.10. The 970FX VMX implementation contains 162 vector instructions in
various categories.
3.3.8.4. Control-Flow Instructions
A program's control flow is sequentialthat is, its instructions logically execute in the order they
appearuntil a control-flow change occurs either explicitly (because of an instruction that modifies the
control flow of a program) or as a side effect of another event. The following are examples of control-
flow changes:
file://C:\Dokumente und Einstellungen\Silvia\Lokale Einstellungen\Temp\~hh687B.htm 20.08.2007
Chapter 3. Inside an Apple Page 37 of 83
An explicit branch instruction, after which execution continues at the target address specified
by the branch
An exception, which could represent an error, a signal external to the processor core, or an
unusual condition that sets a status bit but may or may not cause an interrupt[33]
[33] When machine state changes in response to an exception, an interrupt is said to
have occurred.
A trap, which is an interrupt caused by a trap instruction
A system call, which is a form of software-only interrupt caused by the system-call (sc)
instruction
Each of these events could have handlerspieces of code that handle them. For example, a trap handler
may be executed when the conditions specified in the trap instruction are satisfied. When a user-space
program executes an sc instruction with a valid system call identifier, a function in the operating
system kernel is invoked to provide the service corresponding to that system call. Similarly, control
flow also changes when the program is returning from such handlers. For example, after a system call
finishes in the kernel, execution continues in user spacein a different piece of code.
The 970FX supports absolute and relative branching. A branch could be conditional or unconditional.
A conditional branch can be based on any of the bits in the CR being 1 or 0. We earlier came across
the special-purpose registers LR and CTR. LR can hold the return address on a procedure call. A leaf
procedureone that does not call another proceduredoes not need to save LR and therefore can return
faster. CTR is used for loops with a fixed iteration limit. It can be used to branch based on its
contentsthe loop counterbeing zero or nonzero, while decrementing the counter automatically. LR and
CTR are also used to hold target addresses of conditional branches for use with the bclr and bcctr
instructions, respectively.
Besides performing aggressive dynamic branch prediction, the 970FX allows hints to be provided
along with many types of branch instructions to improve branch prediction accuracy.
3.3.8.5. Miscellaneous Instructions
The 970FX includes various other types of instructions, many of which are used by the operating
system for low-level manipulation of the processor. Examples include the following types:
Instructions for processor management, including direct manipulation of some SPRs
Instructions for controlling caches, such as for touching, zeroing, and flushing a cache;
requesting a store; and requesting a prefetch stream to be initiatedfor example: instruction-
cache-block-invalidate (icbi), data-cache-block-touch (dcbt), data-cache-block-touch-for-
store (dcbtst), data-cache-block-set-to-zero (dcbz), data-cache-block-store (dcbst), and data-
cache-block-flush (dcbf)
Instructions for loading and storing conditionally, such as load-word-and-reserve-indexed
(lwarx), load-double-word-and-reserve-indexed (ldarx), store-word-conditional-indexed
(stwcx.), and store-double-word-conditional-indexed (stdcx.)
The lwarx (or ldarx) instruction performs a load and sets a reservation bit internal to the
processor. This bit is hidden from the programming model. The corresponding store
instructionstwcx. (or stdcx.)performs a conditional store if the reservation bit is set and clears
file://C:\Dokumente und Einstellungen\Silvia\Lokale Einstellungen\Temp\~hh687B.htm 20.08.2007
Chapter 3. Inside an Apple Page 38 of 83
the reservation bit.
Instructions for memory synchronization,[34] such as enforce-in-order-execution-of-i/o (eieio),
synchronize (sync), and special forms of sync (lwsync and ptesync)
[34] During memory synchronization, bit 2 of the CRthe EQ bitis set to record the
successful completion of a store operation.
Instructions for manipulating SLB and TLB entries, such as slb-invalidate-all (slbia), slb-
invalidate-entry (slbie), tlb-invalidate-entry (tlbie), and tlb-synchronize (tlbsync)
3.3.9. The 970FX Core
The 970FX core is depicted in Figure 313. We have come across several of the core's major
components earlier in this chapter, such as the L1 caches, the ERATs, the TLB, the SLB, register
files, and register-renaming resources.
Figure 313. The core of the 970FX
[View full size image]
The 970FX core is designed to achieve a high degree of instruction parallelism. Some of its
noteworthy features include the following.
It has a highly superscalar 64-bit design, with support for the 32-bit operating-system-bridge[35]
facility.
[35] The "bridge" refers to a set of optional features defined to simplify the
migration of 32-bit operating systems to 64-bit implementations.
file://C:\Dokumente und Einstellungen\Silvia\Lokale Einstellungen\Temp\~hh687B.htm 20.08.2007
Chapter 3. Inside an Apple Page 39 of 83
It performs dynamic "cracking" of certain instructions into two or more simpler instructions.
It performs highly speculative execution of instructions along with aggressive branch prediction
and dynamic instruction scheduling.
It has twelve logically separate functional units and ten execution pipelines.
It has two Fixed-Point Units (FXU1 and FXU2). Both units are capable of basic arithmetic,
logical, shifting, and multiplicative operations on integers. However, only FXU1 is capable of
executing divide instructions, whereas only FXU2 can be used in operations involving special
purpose registers.
It has two Floating-Point Units (FPU1 and FPU2). Both units are capable of performing the full
supported set of floating-point operations.
It has two Load/Store Units (LSU1 and LSU2).
It has a Condition Register Unit (CRU) that executes CR logical instructions.
It has a Branch Execution Unit (BRU) that computes branch address and branch direction. The
latter is compared with the predicted direction. If the prediction was incorrect, the BRU
redirects instruction fetching.
It has a Vector Processing Unit (VPU) with two subunits: a Vector Arithmetic and Logical Unit
(VALU) and a Vector Permute Unit (VPERM). The VALU has three subunits of its own: a
Vector Simple-Integer[36] Unit (VX), a Vector Complex-Integer Unit (VC), and a Vector
Floating-Point Unit (VF).
[36] Simple integers (non-floating-point) are also referred to as fixed-point. The
"X" in "VX" indicates "fixed."
It can perform 64-bit integer or floating-point operations in one clock cycle.
It has deeply pipelined execution units, with pipeline depths of up to 25 stages.
It has reordering issue queues that allow for out-of-order execution.
Up to 8 instructions can be fetched in each cycle from the L1 instruction cache.
Up to 8 instructions can be issued in each cycle.
Up to 5 instructions can complete in each cycle.
Up to 215 instructions can be in flightthat is, in various stages of execution (partially executed)
at any time.
The processor uses a large number of its resources such as reorder queues, rename register pools, and
other logic to track in-flight instructions and their dependencies.
3.3.9.1. Instruction Pipeline
In this section, we will discuss how the 970FX processes instructions. The overall instruction pipeline
is shown in Figure 314. Let us look at the important stages of this pipeline.
file://C:\Dokumente und Einstellungen\Silvia\Lokale Einstellungen\Temp\~hh687B.htm 20.08.2007
Chapter 3. Inside an Apple Page 40 of 83