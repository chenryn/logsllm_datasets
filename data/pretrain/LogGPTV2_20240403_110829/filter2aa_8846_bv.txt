可；
✦>80％的项目在过去
1个月里查看了自动代
码审核的结果。
额外成本
✦代码分析解决计划
的研究和选择；
✦自动化整合的初步
花销和维护；
✦自动化代码审核和
降低风险的项目持续
开销。
额外人员
✦开发人员（1－2天/
年）
✦架构师（1天/年）
✦经理（1－2天/年）
✦安全审计员（3－4
天/年）
相关等级
✦无
65
代码审核 CR3
必须进行全面的代码审核过程，以发现语言级别和特定应用程序的风险
措施
A. 为特定应用程序问题自定义代码分析
代码扫描工具采用了基于知识的内置检测规则，在常
用语言的API和库的基础上检查代码。但是，这类工具对
于理解自定义API和适用于类似检查的设计能力有限。然
而，通过自定义，代码扫描器可成为一个功能强大且通用
的分析引擎，以寻找组织和具体项目的安全问题。
就简单性和自定义分析的能力而言，虽然不同工具的
细节有所不同，但是自定义代码扫描器通常涉及到在特定
的API和对函数调用地方进行指定检查。检查可以包括：
分析内部编码标准的遵守、被传递给自定义界面的未检测
感染数据、对敏感数据处理的跟踪和验证、内部API的正
确使用等。
从使用共享代码库的检查器自定义扫描器是非常有效
的，因为已创建的检查器可在多个项目中使用。要为代码
库自定义工具，安全审计员应检查代码和高层次的设计，
以确定可用的检测器，并与开发人员和利益相关者讨论相
关的执行。
B. 为代码审核建立发布关卡
为了给所有的软件项目设立代码级的安全底线，应在
软件开发生命周期中建立一个特殊的点作为检查点，以满
足达到发布的代码审核最低标准。
首先，这个标准应该比较直接，例如，选择一个或两
个漏洞类型来设定标准，而具有相应结果的项目不能通过。
随着时间的推移，应通过添加额外的通过检查点的标准而
改进。
一般来说，代码审核检查点应发生在执行阶段快结束
以前，并必须在发布前执行。
对于旧系统或暂未活动的项目，应建立例外处理流程，
以允许项目的持续操作，但需要有一个明确的审核时间计
划安排以抑制结果。例外应限制于不超过所有项目的20％。
结果
✦增加对代码分析的
准确性和适用性的信
心结果；
✦整个组织对安全编
码期望的基线；
✦项目团队为判断代
码级安全设立了目标。
额外成功指标
✦>50％的项目使用了
代码分析自定义；
✦>75％的项目在过去
6个月里通过了代码审
核审计。
额外成本
✦扩充和维护自定义
代码审核检查；
✦代码审核审计的持
续项目开销；
✦由未通过代码审核
审计，而导致项目延迟
的企业组织开支。
额外人员
✦架构师（1天/年）
✦开发人员（1天/年）
✦安全审计员（1－2
天/年）
✦业务拥有者（1天/
年）
✦经理（1天/年）
相关等级
✦政策与遵守－2
✦安全架构－3
 66
安全测试
ST1 ST2 ST3
目标 根据编程和软件
需求，建立处理过
程以执行基本的
安全测试。
通过自动化使在
开发过程中的安
全测试更加完善
和有效。
在部署前要求进
行特定应用程序
的安全测试以确
保基本的安全。
措施 A. 从已知安全需
求推出测试用
例；
B. 为软件发布执
行渗透测试。
A. 使用自动化的
安全测试工
具；
B. 将安全测试整
合到开发过程
中。
A. 为特定应用程
序使用自动化
的安全测试；
B. 为安全测试建
立发布关卡。
评估 ✦项目是否明确
指定一些基于需
求的安全测试？
✦大多数项目是
否在发布以前执
行渗透测试？
✦大多数利益相
关者是否意识到
需在发布以前进
行安全测试？
✦项目是否使用
了自动化工具去
评估安全测试用
例？
✦大多数项目是
否遵守一个一致
的过程，为利益相
关者评估并记录
安全测试？
✦安全测试用例
是否为应用程序
特定的逻辑而综
合制作的？
✦常规项目审核
是否需要来自于
安全测试的最低
标准结果？
结果 ✦独立验证围绕
关键业务功能的
预期安全机制；
✦为达到安全性
测试的高级别审
慎调查；
✦对于每个软件
项目安全测试的
特定完善。
✦更加深入以及
更加连贯地验证
软件的安全功能；
✦在发布以前开
发团队实现自我
检查和错误更正；
✦利益相关者在
做出风险认同决
定时，能更好的意
识到开放的威胁
漏洞。
✦应用程序对于
抵抗预期攻击的
表现的组织整体
基准线；
✦为提高自动化
分析准确性的自
定义安全测试组
件；
✦项目团队意识
到了攻击抵抗的