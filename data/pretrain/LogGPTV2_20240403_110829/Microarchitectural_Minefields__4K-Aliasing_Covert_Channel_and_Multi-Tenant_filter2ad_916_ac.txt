measurements are depicted as dark squares and shorter latency
measurements as light squares. For each store address, the
lower 12-bits of a single load address falsely aliases creating a
measurable performance degradation. The latency is reported
as cycles.
The Sandy Bridge and Haswell microarchitecture families
show several high latency measurements off the 4K-aliasing
5
0246810121416182022array size (KB)024681012bandwidth (MB/sec)SNDIVYHSWSKL0816243240485664load offset (B)0816243240485664store offset (B)Sandy Bridge5.66.47.28.08.89.610.4cycle latency0816243240485664load offset (B)0816243240485664store offset (B)Ivy Bridge2345678910latency0816243240485664load offset (B)0816243240485664store offset (B)Haswell1.62.43.24.04.85.66.47.28.0latency0816243240485664load offset (B)0816243240485664store offset (B)Skylake3.04.56.07.59.010.512.0latencydiagonal. We do not employ any scheduling constraints on the
executed benchmarks, so these are likely due to external noise
caused by kernel scheduling events. We calculated the average
penalty for the results to be 4.3 cycles across all families. This
is lower than reported by Intel [10], which reports a best-case
expected 5 cycle penalty for the Sandy Bridge, Ivy Bridge,
and Haswell microarchitectures. The measurement error for the
Skylake microarchitecture, however, is more signiﬁcant which
has an expected 7 cycle penalty.
C. Reﬁned Single Process Benchmark and Results
To eliminate this error, we ran another experiment that
introduces additional
load instructions in the measurement
code. Our goal was to increase the number of 4K-aliasing
events within the window prior to the store’s retirement.
All four microarchitecture families can service at least two
load or store address calculations via their load/store address
functional units [12]. The benchmark in Listing 1 executed one
store and one load, which allows them to execute in parallel
and more quickly recovery from disambiguation misprediction.
The new load instructions added to the measurement code
quickly exhaust the load/store address generation functional
units resources, producing a longer latency. Figure 3 shows
these results. In effect, adding 5 load instructions has increased
the cycle latency in the 4K-aliasing measurement by roughly
4x. This allows 4K-aliasing latency to be clearly distinguished
from normal memory load operations that do not 4K-alias with
preceding stores.
D. Analysis of Multithreaded 4K-Aliasing
The memory-order buffer is local to a processor core such
that any covert channel based upon 4K-aliasing should oc-
cur between hyperthreads. However, in Intel Hyper-Threading
Technology [11] a single processor core splits its execution
resources between two processes. This includes the available
Fig. 3: Cycle latency when (from left to right) a load can get
its data from i) the store buffer via store-to-load forwarding; ii)
L1 data cache; iii) L1 data cache after one 4k-aliasing event;
iv) L1 data cache after three 4K-aliasing events; and v) L1
data cache after ﬁve 4K-aliasing events.
6
Fig. 4: Effect of 4K-aliasing when different processes are
scheduled on the same core as hyperthreads.
slots in the load and store buffer respectively. Recall, however,
that the snoop logic outlined in Section III-C operates on both
a cross-thread and external store commits. The memory snoop
logic responsible for triggering 4K-aliasing, therefore, should
be measureable for both hyperthreads and cross-core threads,
but not cross-core processes. The latter is disambiguated
because they do not share common memory. Accordingly, we
aim to establish the latency of 4K-aliasing due a multithreaded
process and later establish if cross-core 4K-aliasing is measure-
able.
We evaluate two scenarios for multithreaded processes: 1)
We launch multiple processes each of which executes two
threads. One thread executes only 4KB aligned stores and the
other thread executes only 4KB aligned loads; 2) We schedule
these threads such that they hyperthread on different cores. For
example, we schedule P1-T1-C0/P1-T2-C2 and P2-T1-C0/P2-
T2-C2 2 such that C0 and C2 are not hyperthreads. The latter
scenario addresses a necessary condition for establishing the
4K-aliasing covert communication channel, namely whether
4K-aliasing is observable across processes.
Figure 4 shows the results of running this benchmark on
an Intel Core® i7-4770 CPU with 4 physical cores capable of
supporting 2 hyperthreads per core. For this platform core 0
and core 4 are hyperthreads, so too are core 1 and core 5, core
2 and core 6, and core 3 and core 7.
The experiment used code similar to Listing 1 except that
the sweep range for load and store addresses was much wider
to collect a more inclusive series of measurements. Both the
wider search range and execution across available virtual cores
induces system noise caused by both other processes and OS
scheduling events.
The results of this experiment establish several features
of the 4K-aliasing event. First, it is indeed possible for load
addresses from one process to 4K-alias with preceding store
2Here P refers to a process, T refers to a thread launched from that process,
and C refers to the processor core the thread is executed on. So P1-T1-C0
should be read as process 1, thread 1, executes on core 0.
SLFL1D$1-Ld3-Ld5-Ld024681012141618CyclesSNDIVYHSWSKY0100200300400500load offset (B)0100200300400500store offset (B)core 00100200300400500load offset (B)0100200300400500store offset (B)core 40100200300400500load offset (B)0100200300400500store offset (B)core 10100200300400500load offset (B)0100200300400500store offset (B)core 50100200300400500load offset (B)0100200300400500store offset (B)core 20100200300400500load offset (B)0100200300400500store offset (B)core 60100200300400500load offset (B)0100200300400500store offset (B)core 30100200300400500load offset (B)0100200300400500store offset (B)core 7addresses from another unique process. Second, system noise
is clearly observable and dampens the measureable latency
caused by 4K-aliasing. The effects of noise on the measure-
ment is most apparent on core 0 and core 3, but is also apparent
on cores 6 and 7.
E. Analysis of Cross-core 4K-aliasing
The coherency snoop logic outlined in Section III-C indi-
cates that 4K-aliasing occurs across threads that share common
memory to maintain memory ordering in a multiprocessor.
We evaluated whether the 4K-aliasing timing channel could
be measured across processes executed on separate cores. In
all of our experiments, we failed to measure the 4K-aliasing
timing channel when executing two processes scheduled on
separate cores, one of which executed 4KB aligned stores and
the other 4KB aligned loads.
V. MULTI-PROCESS 4K-ALIASING
Based on our analysis in Section IV, memory disambigua-
tion prediction does not distinguish between processes when
predicting a dependency between 4 KB separated loads and
stores. Given that, we set out to show ﬁrst a simple 4K-aliasing
covert communication channel. We use the simple protocol
to then address the challenges in designing a robust covert
channel, and ﬁnally characterize its error rate and channel
capacity.
A. Threat Model and Assumptions
Before outlining the 4K-aliasing covert communication, we
elaborate upon the assumptions we make and threat model
under which covert communication is applicable.
We assume that two cooperating applications are running
on the same system. We use trojan and spy to refer to these
processes as is common in the literature [14]. We also assume
a scenario in which the trojan wishes to communicate a
secret to the spy and no other communication channel exists
between the two parties. We further assume that the trojan
and spy processes are collocated on the same physical CPU
as hyperthreads. The system software, including the operating
system and runtime, are considered to be secure so that neither
the trojan nor the spy can bypass isolation and access controls.
Finally, we assume both the trojan and spy have only user-level
privileges.
B. Simple 4K-Aliasing Covert Communication Channel
A malicious user can communicate with a cooperating
party via a pre-determined protocol using the 4K-aliasing
timing channel. For example, the sender can set all of the
store buffer entries to 4 KB aligned addresses to communicate
a 1. At some later time, the receiver process can schedule itself
to the same core and read the store buffer state by performing
reads on 4 KB boundaries while measuring the load latency.
This initial protocol is shown in Listing 2.
In order to demonstrate the simple covert communication
channel, we execute two processes on the same processor
core as hyperthreads. We refer to these as the trojan and spy
processes hereafter. The trojan aims to communicate a secret
to the spy as a string of binary values. In order to do so, the
trojan ﬁlls the store buffer with addresses aligned on 4 KB
boundary. For the Intel Haswell microarchitecture, the trojan
is responsible for storing at least 42 addresses in the store
buffer. This value will change per microarchitecture but not
signiﬁcantly, see Table II. The spy aims to load values that
will 4K-alias with the trojan’s store addresses such that the
measured execution time in cycles can distinguish between a
1 and 0.
The trojan repeatedly executes stores separated by 4 KB
to transmit a 1, and empties the store buffer to transmit a
0. The trojan drain the store buffer by executing a memory
ordering instruction such as mfence or executing a busy-
wait loop such that the store instructions retire normally. In
our initial experiments, we saw no difference between either
option. However, as will be discussed in Section V-D, the
speed with which the store buffer is drained is integral to
modulating the pulse width during bit transmission. This in
turn has consequences on the covert channel’s capacity via its
bit error rate.
The spy process intermittently probes the store buffer
context for 4 KB aligned addresses by executing loads aligned
on a 4 KB boundary. The cycle time is measured during each
probe block. If the spy process measures an increased cycle
time, then it reasons the trojan is transmitting a 1 bit. If the
spy process measures a decreased cycle time, then the trojan
is transmitting a 0 bit.
C. Results of Simple 4K-Aliasing Covert Channel
Figure 5 presents the results using the simple covert
channel. The x-axis represents time (in ns) with respect to
the start of the spy program. The y-axis displays cycles. The
results show that: 1) 4K-aliasing can be used as a covert
communication channel; 2) given a naive protocol, a separable
cycle latency threshold based on 4K-aliasing events can be
established, e.g. in this case the threshold can be placed at
9 cycles; 3) the simple covert channel suffers from stability
issues apparent between times 100 and 200 ns; and 4) the
Fig. 5: Timing results of 4K-aliasing communication channel
between trojan and spy.
7
050100150200250300350time68101214161820cyclesProtocol: Simple 4K-Aliasing Covert Communication Channel
Datasend[N], Datarecv[N]: data bits to be transmitted/received by the trojan and spy
addr4k: A 4 KB aligned address
latency: Cycle length of servicing 4 KB aligned load
threshold: Experimentally set cycle length capable of distinguishing 4K-aliasing
Trojan’s operation:
Spy’s operation:
while true do
for i = 0 to N − 1 do
store ← addr4k
if Datasend[i] = 1 then
ﬂush store buffer()
else
end if
end for
end while
for i = 0 to MaxProbes− 1 do
start = rdtscp()
load ← addr4k
stop = rdtscp()
if latency > threshold then
else
Datarecv[i] = 1
Datarecv[i] = 0
end if
end for
Listing 2: Simple protocol for establishing a 4K-aliasing covert communication channel between a trojan and spy process.
achievable bit rate while using this protocol is roughly 77 Mbps
given that 27 bits were transmitted over 350 ns.
D. Characterizing a Robust 4K-Aliasing Communication
Channel
Given the previous analysis, there are several challenges
that need to be addressed in establishing a robust 4K-aliasing
covert channel. The ﬁrst involves improving the bit rate and
bit error of the channel. Another challenge is how the trojan
and spy will detect one another. This is necessary as both
a precursor to the trojan knowing when to send the secret,
but also the spy acknowledging its receipt. Finally, the trojan
and spy must be able to recover from failed transmission.
The latter can occur, for instance, when the trojan or spy is
descheduled by the OS. Ideally we would like to construct
a protocol capable of acknowledging and recovering from a
failed transmission with a low bit error rate while maximizing
the channel capacity. We address these challenges in the
following.
Theoretical Bit Transmission Window. Ideally, the bit rate
for the 4K-aliasing communication channel is limited by the
time required to ﬁll
the store buffer with 4 KB aligned
addresses plus the time to issue and measure the 4K-aliasing
event. We assume that the worst-case lifetime of a single 4
KB aligned address available in the store buffer is bounded by
accessing the L1 data cache, which takes 4 clock cycles on
our Intel Core® i7-4770.
In practice, the store will retire more quickly [17]. There-
fore, each store takes roughly 1.2 ns to retire given a 3.4
GHz clock. In the best case then, a 4K-aliasing load can be
issued within 4 cycles of the store in order to allow a bit to be
transmitted every 1.2 ns resulting in a theoretically maximum
channel bit rate of 833 Mbps.
there are several
In practice, however,
limiting factors
preventing the channel from achieving this bit rate. To demon-
strate this, we perform an experiment that aims to measure the
number of cycles it takes for a store buffer entry to be evicted,
which bounds how quickly the spy can recover a trojan bit. In
the trojan process, we repeatedly loop over a store to a 4 KB
aligned address. In the spy process we ﬁrst execute only a 4 KB
aligned load, then a single cycle instruction and a 4 KB aligned
Fig. 6: Practical store bandwidth of 4K-aliasing communica-
tion channel.
load, then two single cycle instructions and 4 KB aligned load.
We stop executing intermediate single cycle instructions when
the observed cycle latency due to 4K-aliasing is masked by
the number of single cycle instruction latencies.
The results of this experiment are shown in Figure 6. Two
features stand out from the results. First, issuing successive
4 KB aligned stores and loads in a tight loop is prone to
noise. Many of the measurements oscillate between 3 to 4
cycle when 4K-aliasing is the dominant feature. This indicates
that some measurements show aliasing, while others show
cumulative effects due to functional unit resource starvation.
Second, the effect of 4K-aliasing is indistinguishable when
four intermediate single cycle instructions are executed before
the 4 KB aligned load. At ﬁve intermediate instructions, 4K-
aliasing is no longer visible as it is dominated by the latency
of the intermediate instructions.
Another aspect of this experiment is that we repeatedly
executed 4 KB aligned stores such that the store buffer was
always maximally ﬁlled with 4 KB aligned addresses. This
implies the 4K-aliasing event should then be measureable after
8
(a) Distribution of 4K-aliasing latency as the interval of
probed addresses increases by 2 KB.
(b) Distribution of 4K-aliasing latency as the interval
of probed addresses increases by 1024 B.
(c) Distribution of 4K-aliasing latency as the interval of
probed addresses increases by 512 B.
(d) Distribution of 4K-aliasing latency as the interval
of probed addresses increases by 256 B.
Fig. 7: Distribution of 4K-aliasing latency.
42 × 4 cycles3, or 49.4 ns per 1.2 ns. Since we execute 4 KB
aligned loads in a tight loop, on average they should execute
and 4K-alias before any store in the trojan process is retired
achieving a more practical bit rate of 19.8 Mbps. The results
conﬁrm this analysis in that 4K-aliasing is observable as long
as a 4 KB aligned load is issued within four cycles of a 4KB
aligned store.
Theoretical Bit Transmission Frequency. Another practical
limitation of the 4K-aliasing covert channel is the frequency at
which the measurements are taken. The frequency is a function
of the offset between each successive 4 KB aligned store/load
address. For example, both store and load addresses can be
separated by 4096 B, 2048 B, 1024 B, 512 B. As long as they
agree on the step size for successive memory operations the
trojan and spy will 4K-alias. Note, that this metric is different