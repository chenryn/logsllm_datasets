# Title: An Effective Android Code Coverage Tool

## Authors:
- Aleksandr Pilgun, SnT, University of Luxembourg, PI:EMAIL
- Olga Gadyatskaya, SnT, University of Luxembourg, PI:EMAIL
- Stanislav Dashevskyi, SnT, University of Luxembourg, PI:EMAIL
- Yury Zhauniarovich, Qatar Computing Research Institute, HBKU, PI:EMAIL
- Artsiom Kushniarou, SnT, University of Luxembourg, PI:EMAIL

## Abstract
The rapid growth of Android applications from third-party developers necessitates advanced security testing and analysis techniques to inspect suspicious apps without access to their source code. Code coverage is a critical metric for evaluating the effectiveness of these techniques and can serve as a fitness function in evolutionary and fuzzy approaches. However, there are currently no reliable tools for measuring fine-grained bytecode coverage of Android apps. In this work, we introduce ACVTool, which instruments Android apps and measures smali code coverage at the class, method, and instruction levels.

**Tool Repository:** [https://github.com/pilgun/acvtool](https://github.com/pilgun/acvtool)

**ACM Reference Format:**
Aleksandr Pilgun, Olga Gadyatskaya, Stanislav Dashevskyi, Yury Zhauniarovich, and Artsiom Kushniarou. 2018. DEMO: An Effective Android Code Coverage Tool. In 2018 ACM SIGSAC Conference on Computer and Communications Security (CCS '18), October 15â€“19, 2018, Toronto, ON, Canada. ACM, New York, NY, USA, 3 pages. [https://doi.org/10.1145/3243734.3278484](https://doi.org/10.1145/3243734.3278484)

## 1. Introduction
Android is the dominant mobile platform today, with millions of devices running it and millions of third-party applications available to users. Unfortunately, this vast ecosystem is plagued by the proliferation of malicious and buggy apps. Consequently, there is a high demand for automated detection techniques for such apps.

A critical challenge in Android app analysis and testing is that apps are submitted to markets, including Google Play, in a compiled and packaged form. Their source code is not accessible to security researchers or even to Google. Therefore, automated analysis and testing tools must operate in a black-box manner, without knowledge of the expected behaviors and without access to the source code.

In this work, we focus on measuring the code coverage of Android apps. This metric is essential for software development and quality assurance across all programming languages and software ecosystems. Researchers and practitioners use code coverage to evaluate the effectiveness of automated testing and security analysis tools. However, obtaining this metric is non-trivial, especially without the source code. Code coverage is typically measured by instrumenting the bytecode, a process that is particularly challenging for Android.

### Related Work
Several tools exist for measuring code coverage over the bytecode of Android apps, but they have limitations. For example, ELLA [6] and InsDal [9] measure code coverage only at the method level, which is too coarse. Another limitation is the low instrumentation success rate. Huang et al. [8] reported a 36% success rate, while BBoxTester [17] achieved a 65% success rate. These tools also suffer from limited empirical evaluation, often using datasets of fewer than 100 apps, and sometimes failing to report the percentage of failed instrumentation attempts.

Some frameworks integrate their own libraries for code coverage measurement, but since this is not their primary contribution, they do not provide details on instrumentation success rates and performance.

### Contribution
In this paper, we present ACVTool, which measures code coverage of Android apps without requiring their source code. ACVTool generates detailed coverage reports suitable for both visual inspection and automatic processing. It also collects crash reports, facilitating the analysis of faults within apps. We have empirically validated ACVTool against a large dataset of third-party apps, achieving a 96.9% instrumentation success rate. The average time required to instrument an app with ACVTool is 36 seconds, making it negligible for standard testing and analysis. ACVTool is self-contained, transparent to the testing environment, and can be integrated with any testing or analysis tool. We have released ACVTool as an open-source project to support the Android research community.

## 2. ACVTool Workflow

### 2.1 Offline Phase
ACVTool's offline phase involves instrumenting the APK file and generating an instrumentation report. The tool places a tracking probe after each original instruction and label, except in specific cases where Dalvik-related limitations prevent probe insertion. To avoid runtime failures, the tracking code is wrapped in a `goto/32` call, ensuring the execution flow returns immediately after the probe is registered.

The offline phase produces an instrumentation report that maps the cells of the binary array to smali code. This report is saved as a serialized code representation in a binary file with the `.pickle` extension and is used in the report generation phase.

### 2.2 Online Phase
During the online phase, the instrumented app is installed on a device or emulator. The broadcast receiver implemented in the `Instrumentation` class is activated. The app can then be exercised manually or automatically while logging code coverage data. After testing, ACVTool generates a specific broadcast to consolidate the runtime information into a runtime report stored in the device's external storage.

### 2.3 Report Generation Phase
In the report generation phase, ACVTool retrieves the runtime report from the device and applies the instrumentation report generated during the offline phase. ACVTool generates code coverage reports in HTML and XML formats. The HTML report provides a browser-viewable representation of the app's smali code with coverage information. The report includes the name of the smali file or package, the number of missed and covered instructions, the code coverage value, and additional columns indicating the amount of uncovered code.

**Figure 1: The ACVTool Workflow**

**Figure 2: Example of an HTML Report**

---

This revised version aims to enhance clarity, coherence, and professionalism, ensuring the content is well-structured and easy to follow.