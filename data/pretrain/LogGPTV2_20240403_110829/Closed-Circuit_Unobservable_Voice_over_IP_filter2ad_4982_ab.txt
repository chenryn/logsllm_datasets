anonymity set,
• prevent an attacker to know if a user is communicating
or not: the users form an unobservability set,
• prevent an attacker to know whether there is ongoing
communications or not in an unobservability set: the
users form a completely unobservable set.
Even if in this paper we do not deal with systems just
allowing the users to form anonymity sets, it is important to
separate the issues associated with each of these cases, as it
shows what security and privacy enhancing features result
of the usage of unobservability providing systems (besides
resistance to global observers).
3.1 Anonymity issues
Sometimes, knowing who is communicating with whom
is much more important than knowing what is being said.
For example, inferring a society strategies and alliances
from the phone-calls made by its CEO is a clear secu-
rity risk. From the privacy protection point of view, if a
user makes a phone-call to Alcoholic Anonymous, it does
not matter much whether the conversation is encrypted. It
would be a clear privacy leak if somebody learnt about this
communication.
3.2 User unobservability issues
If an attacker eavesdrops on a communication link used
by a single user (for example the link directly connected to
a computer in an ofﬁce or in a home connection), the exis-
tence of a communication on this link will probably reveal
the presence of the user in front of his computer and there-
fore his location. Knowing that a user is communicating,
even without knowing with whom is indeed an informa-
tion leading to various location and information inference
issues.
Location issues can be very important for security. For
example, in a military context, the presence of a communi-
cating ofﬁcer is a critical information. In a company, know-
ing whether a given person is in his ofﬁce or not can make
a burglary easier.
In an embassy, the presence of a high
personality in his ofﬁce can engage a distant attack.
Inference from trafﬁc analysis is also a major issue in se-
curity. Again, in a military context, the detection of an air-
strike by a mobile radar can be inferred from a sudden com-
munication burst from the radar to a command center. By
detecting who is communicating in the different wings of a
sensitive building, much information can also be inferred.
For example, an outbreak of communications among the
users in the middle-east section of an intelligence agency
may reveal the discovery of an incoming threat to an eaves-
dropper able to know who is communicating and who is
not.
Of course location and inference issues are also critical
for privacy. For example, learning if a user is communicat-
ing from his home or his ofﬁce can lead to serious privacy
leaks. Unacceptable inference of a user’s habits can be ob-
tained from cross-referencing location data with communi-
cation timings.
3.3 Set unobservability issues
Knowing the number of communications in a set can be a
critical information by itself. In a military context, a sudden
rise on the enemy communications can for example reveal
the imminence of an attack.
Another major issue is that user observability depends
on set observability. Indeed, if an attacker wants to know if
a user U is communicating or not and observes that there is
no communication in the set he will learn with probability 1
that the U is not communicating. Likewise the attacker will
know that the larger the number of communications in the
set is, the more probable is that U is communicating.
Remark that this is a very important issue, but as sets
grow larger the attacker will obtain less and less informa-
tion about a given user. Indeed, granularity will decrease
and therefore the inﬂuence a user has on the number of com-
munications will be relatively smaller and smaller.
4 Trusted third party servers
To obtain low latency unobservable communications,
one can use a trusted third party generating cover trafﬁc and
therefore providing recipient unobservability.
4.1 General construction
The idea is to have a server which routes all the commu-
nications between the users connected to it. The usage of
cover trafﬁc will ensure that all the users connected form a
completely unobservable set. We will call such a server a
tMIX (for trusted MIX2). When a user gets connected to the
tMIX, they both follow protocol 1.
Protocol 1 tMIX connection.
1. The user sets an encrypted link with the tMIX.
2. The user sets an upload cover trafﬁc channel by sending
every tenth of a second a one kilobit packet of encrypted
garbage to the tMIX.
3. The tMIX sets a download cover trafﬁc channel by sending
every tenth of a second a one kilobit packet of encrypted
garbage to the user.
Both the tMIX and the user decrypt all the data they re-
ceive, and dump the result as long as it is recognized as
garbage (for example through a special identiﬁer at the be-
ginning of the decrypted message). When a user A wants to
have a communication with another user B they both follow
protocol 2.
When a set of users is connected to the tMIX, an attacker
will only be able to see that they all send every tenth of
a second an encrypted one kilobit packet to the tMIX and
that they all receive every tenth of a second a one kilobit
packet from the tMIX. As long as the attacker cannot de-
crypt the packets, he is unable to say whether they are en-
crypted garbage or encrypted information and therefore he
2A MIX is a node used to relay messages while hiding the relation
between incoming and outgoing messages [4]
Protocol 2 tMIX communication.
1. A replaces the one kilobit encrypted garbage packets on his
upload channel by one kilobit encrypted packets encapsulat-
ing the information he wants to send to B.
2. Upon reception of these packets the tMIX decrypts them and
recognizes that they are not encrypted garbage.
3. The tMIX forwards these messages to user B’s download
channel by replacing the encrypted garbage he is sending
him by an encryption of the packets received from A.
4. B decrypts the packets received from the tMIX and recog-
nizes an incoming communication from A.
5. B replies to A following the same protocol.
is unable to distinguish whether a user is communicating or
not.
Figure 1. tMIX description.
Likewise the view the attacker has from the whole sys-
tem is the same whether there are communicating users or
not. Therefore the attacker is not only unable to say whether
a user is communicating or not but also whether there are
ongoing communications or not. The set of users forms a
completely unobservable set.
4.2
Implementations
The most evident way to obtain a tMIX is to trust its
administrators not to betray the users and to consider (or
hope!) that the attackers are unable to intrude in it. Indeed,
as well the administrators as an intruder are able to collect
all the trafﬁc analysis information in this single point of fail-
ure.
In classical systems providing anonymity sets for
medium or large latency applications, the usual way to
avoid this issue is to share the trust among a set of relays
that are used one after another. In this set, the relays must
all betray the users (or be compromised by the attacker) to
be able to obtain some trafﬁc analysis information.
This cannot be done in our context for various reasons.
The most important of them is that recipient unobservabil-
ity is provided by the cover trafﬁc sent to the users by the
last relay used, and therefore it is enough to compromise
it to defeat recipient unobservability. More complex trust
distribution techniques can be used to avoid this attack, but
they generally lead to unsatisfactory performance. The sec-
ond main reason not to use trust distribution among differ-
ent servers is that the latency introduced by this approach is
proportional to the number of servers used and in most of
the cases it is impossible to respect the latency restrictions
if more than one relay is used.
Another approach is for the server to use a trusted hard-
ware device inside of which the tMIX is implemented, so
that the server administrators or an attacker intruding on the
server are unable to obtain more information than observing
the communication links.
The trust will not be in this case placed on the server
administrators and on the server resistance to intrusions,
but on the trusted hardware device. This trust consists in
mainly two assumptions. First, that the administrators are
unable to tamper the device to obtain trafﬁc analysis infor-
mation. Second, that the software installed on the trusted
device is secure and does not contain any backdoor. The
ﬁrst assumption is inherent to the usage of a trusted hard-
ware device. The second is a more complex issue. Indeed,
the main question is who installs the tMIX software in the
trusted device ?
Indeed, when using a trusted hardware device, instead
of placing the users trust on the administrators of the tMIX
it is placed on the entity who installed the tMIX software
in the trusted device. There is thus not such a big differ-
ence between the two situations except for one important
point. The software installation can be done off-line, in a
controlled environment and it may be supervised or certi-
ﬁed.
It is however important to keep in mind that in a tMIX
we cannot avoid to place some trust in an entity. This can
be the tMIX administrators or the entity providing a pro-
grammed trusted device. By no means the usage of trusted
hardware ensures a security based uniquely on its tamper-
proof capabilities.
4.3 Performance
Every user needs a 10 Kbits/s duplex channel for its un-
observability. A trusted server can therefore handle a com-
pletely unobservable set of ten thousand users using com-
pletely its 100 Mbits/s connection.
For the approach based on trusted hardware, the main
limitation will be the device I/O throughput. Indeed, last
generation trusted hardware devices have a USB2 commu-
nication interface, however, due to obfuscation needs, the
I/O throughput is usually very low. Using the IBM 4758
high performance secure co-processor, this value is limited
receiving information as he sends the same encrypted infor-
mation to all the users, and he is unable to know which users
are able to decrypt a stream and which are unable. When a
user A gets connected to the bMIX he follows protocol 3.
Figure 2. tMIX performance overview.
Protocol 3 bMIX connection.
to 8 Mbits/s. With such devices, the tMIX will be able
to handle a completely unobservable set of eight hundred
users per co-processor used. Figure 8 presents the perfor-
mance results, n being the number of users connected to
the tMIX. As each user has a 10 Kbits/s upload and down-
load cover trafﬁc channel at his disposal he can only deal
with one communication at a time which limits the maxi-
mum number of simultaneous communications this server
can deal with to n/2. The users’ expansion factors are one
both for the upload and download channels. The server will
receive and send n × 10 Kbits/s which is indicated in the
last line of the performance overview.
5 Broadcast-based servers
In many situations it will not be tolerable to have a single
point of failure for trafﬁc analysis or to consider a trusted
entity, and it will be mandatory to have a communication
system in which even if the server is compromised, no traf-
ﬁc analysis can be done.
5.1 The bMIX
A very simple way to avoid placing trust in anyone is
ﬁrst to encrypt the upload channel cover trafﬁc with a key
shared with the recipient instead of the tMIX when the user
is communicating and with a random key when he is not.
Second, the server will not create a download cover trafﬁc
channel for each user and instead of it he will broadcast all
the users upload cover trafﬁc channels.
1. A exchanges a secret key KAX with each user X connected
to the bMIX.
2. He sets an upload cover trafﬁc channel by sending every
tenth of a second a one kilobit packet of encrypted garbage
to the tMIX.
3. The bMIX broadcasts every tenth of a second all the packets
received from the upload cover trafﬁc channels of the users.
4. For each user X, A tries to decrypt the packets from X’s
upload channel with the secret key KAX. On failure he drops
the result.
When A wants to communicate with another user B he
just encrypts his upload channel with KAB, the secret key
they share. When B will try to decrypt the broadcasted
channels he will discover that the one associated to A gets
decrypted into an incoming communication. He will then
replace the garbage of his upload channel with his reply and
encrypt it with KAB.
Figure 4. bMIX performance overview.
If n users are connected to the server, each will receive
n × 10 Kbits/s quickly saturating his download bandwidth.
This technique is therefore unusable over the Internet for
more than a few users, but can be used in a local area net-
work to form completely unobservable sets of up to one
hundred users (in which case each user will use 1 Mbit/s
of his download bandwidth). Figure 4 resumes the perfor-
mance values. Remark that on a LAN the bMIX will broad-
cast n × 10 Kbits/s (which is represented by a bold n in
Figure 4). If the users are distributed over the Internet, the
bMIX will be unable to broadcast and will have to unicast
n × 10 Kbits/s to each of the n users and therefore have an
upload expansion factor of n2.
Figure 3. bMIX description.
5.2 The sMIX
With such changes, the server, which will be called a
bMIX (for broadcast MIX), is unable to know when a user
is communicating or not. Indeed, he cannot know if the user
is using his upload channel to communicate as he is unable
to decrypt it. The bMIX cannot either know when a user is
To limit bandwidth usage, it is possible to use superposed
sending [5]. Suppose that at a given time there is m inter-
nal communications in a set of users (which implies that
2m users are actively using their upload channels). Let us
note U1,··· , U2m the set of communicating users. Super-
posed sending is a turn-based collaborative technique such
that when implemented in our context can ensure that at any
time:
Figure 5. sMIX description.
• every user knows the number 2m of users actively
transmitting (i.e. not sending garbage), but not who
they are,
• every user has 2m active upload channels C1,··· C2m,