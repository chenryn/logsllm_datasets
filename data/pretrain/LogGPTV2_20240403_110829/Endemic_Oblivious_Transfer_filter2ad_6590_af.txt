change is identically distributed.
Claim 5.10 (Malicious Receiver Security). Πext-E satisﬁes security against a malicious receiver
(Deﬁnition 2.6) with respect to the F E
Proof. Consider the following hybrids which will deﬁne the simulator A(cid:48).
Hybrid 1. A(cid:48) internally runs A while plays the role of S and base OT functionality FOT = F E
OT.
1}i∈nC from A in Step 1. A(cid:48) outputs whatever A outputs. The view of A is
OT functionality.
0, tj
A(cid:48) receives {tj
unmodiﬁed.
20
Hybrid 2. In Step 2 A(cid:48) receives U from A, computes C := T0 + T1 and uniformly samples b ← FnC
2 .
Let Bi := {j | bj = i}. For all i ∈ [m], A(cid:48) attempts to erasure decode ci with erasures indexed
s.t. 0 = b (cid:12) (ci + C(w))
by B0. If ci failed to decode, then there does not exist a w ∈ FkC
and A(cid:48) aborts in Step 4 as S would. Otherwise, let ci decode to wi and A(cid:48) computes xi s.t.
wi = map(xi)
A(cid:48) deﬁnes the circuit Si[1] → {0, 1} with support {xi} and Mi : [1] → Fκ
A(cid:48) sends Si and Mi to F E
unmodiﬁed and the ideal-real output agree on vi,xi.
2 s.t. Mi(1) = H(i, ti).
OT as the receiver’s input to the i-th OT instance. The view of A is
2
Hybrid 3. Assuming A(cid:48) did not abort in Step 4, let E = {j | ∃i ∈ [m], (ci ⊕ C(wi))j = 1} index
the columns of C where A added an error to any codeword ci (w.r.t wi). By the correctness
of Step 4, it holds that E ⊆ B0, otherwise the consistency proof would have failed. By passing
the consistency proof, A learns what bj = 0 for all j ∈ E. Similarly, the probability of passing
the check and Pr[|E| = d] = Pr[bj = 0 | ∀j ∈ E] = 2−d due to the proof being independent of
b. We will see that this is equivalent to A simply guessing E (which is correct with the same
probability) and then being honest.
For all w (cid:54)= wi, A has negl probability of computing g = qi + b(cid:12)C(w). If this was not the case,
then A could compute
g + ti = (ci + C(w)) (cid:12) b = (C(wi) + C(w)) (cid:12) b
This last equality holds due to A(cid:48) aborting if (ci + C(wi)) (cid:12) b (cid:54)= 0. Recall that C has minimum
distance dC ≥ κ and therefore computing g is equivalent A guessing dC ≥ κ bits of b which
happens with probability 2−dC ≤ 2−κ. As such, the probability that A has made a query of the
form H(i, qi + b (cid:12) C(w)) for w (cid:54)= wi is also negligible. If such as query does happen A(cid:48) aborts.
This hybrid is indistinguishably distributed from the previous.
Hybrid 4. When S makes an H query of the form H(i, h) which has not previously be queries, A(cid:48)
such that h = qi + b (cid:12) C(w). First, let us assume
must determine if there is a unique w ∈ FkC
there exists two distinct w, w(cid:48) ∈ FkC
2
2
that result in h. That is,
b (cid:12) (ci + C(w)) = b (cid:12) (ci + C(w(cid:48)))
0 = b (cid:12) (C(w) + C(w(cid:48)))
Recall that C by construction has minimum distance dC ≥ κ and that b is uniformly distributed.
Let δ = C(w) + C(w(cid:48)) and E = {i | δi = 1}, then |E| ≥ dC ≥ κ and for the above to hold we
require bi = 0 | ∀i ∈ E which occurs with probability Pr[bi = 0 | ∀i ∈ E] = 2−|E| ≤ 2−dC ≤ 2−κ.
In such an event the simulations fails but this occurs with negligible probability.
A(cid:48) checks that (h + qi)(cid:96) = 0 for all (cid:96) ∈ {i | bi = 0} and if so uses Gaussian elimination to
determine if there exists a w such that h + qi erasure decodes to w where the erasures are index
by B0 = {i | bi = 0}. If so, A(cid:48) computes x s.t. map(x) = w and sends (Output, x) to the
OT and receives vi,x ← {0, 1}(cid:96) in response. A(cid:48) programs H to output vi,x
i-th instance of F E
on this query. All other H queries are answered as normal. The distribution of H after being
programmed is identical since the input has not previously been queried and in both cases the
result is uniformly distributed.
Hybrid 5. A(cid:48) does not take the input of S and does not program H in Hybrid 5.2. S only interacts
with F E
OT. This change is identically distributed.
21
Deﬁnition 5.11. Let Πext-S be the protocol of Figure 9 where FOT := F S
Lemma 5.12. The Πext-S protocol realizes 1-out-of-N F E
OT security.
OT.
Proof. Follows directly from Lemma 3.1 and Lemma 5.8.
Lemma 5.13. The Πext-S protocol does not realizes 1-out-of-N F S
Proof. Follows directly from Lemma 3.1 with Lemma F.2 for F S
Deﬁnition 5.14. Let Πext-R be the protocol of Figure 9 where FOT := F Su
OT.
Lemma 5.15. The Πext-R protocol realizes 1-out-of-N F R
OT or F R
OT and F.3 for F R
OT.
OT security.
OT security.
Proof. Security against a malicious receiver follows from Lemma 3.1 and Lemma 5.8.
Claim 5.16 (Malicious Sender Security). Πext-E satisﬁes security against a malicious sender (Def-
inition 2.6) with respect to the F R
OT functionality.
Proof. The general security of this claim also follows from Lemma 3.1 and Lemma 5.8. What
remains is programming the random oracle. Observe that the honest receiver uniformly chooses
0 and b ∈ {0, 1}nC is uniformly sampled by the F Su
tj
OT functionality. Now observe that all of the
outputs strings are of the form
vi,j = H(i, qi + b (cid:12) C(map(x)))
= H(i, ti + b (cid:12) (ci + C(map(x)))).
OT, ti is uniformly distributed in the view of A. As such, A has
Prior to receiving the output of F Su
negligible probability of querying strings of this form. Therefore, H can be programmed to return
the ideal output of F R
OT when A queries it.
The second concern is there does not exist distinct x, x(cid:48) ∈ [N ] s.t.
b (cid:12) C(map(x)) = b (cid:12) C(map(x(cid:48)))
as this would result in H(i, qi + b (cid:12) C(map(x))) = vi,x = vi,x(cid:48) = H(i, qi + b (cid:12) C(map(x(cid:48)))) and
thereby allow A to distinguish. However, this happens with negligible probability as described in
claim 2, hybrid 4 of Lemma 5.8.
Deﬁnition 5.17. Let Πext-U be the protocol of Deﬁnition 5.14 where the random oracle H is redeﬁned
as follows.
1. Let H(cid:48) : {0, 1}[m]×FnC
2. In Step 1, S samples k ← FnC
2
2 → {0, 1}κ be a random oracle.
sends an extractable commitment (Deﬁnition A.2)of k to R.
3. After receiving U in Step 2, S decommits to k to R who aborts is the decommitment fails.
4. Both parties deﬁne H(i, x) = H(cid:48)(i, x + k).
22
Lemma 5.18. The Πext-U protocol realizes 1-out-of-N F U
OT security.
Proof.
Claim 5.19 (Malicious Sender Security). Πext-Su+ satisﬁes security against a malicious sender
(Deﬁnition 2.6) with respect to the F U
Proof. The simulation follows the same strategy as Lemma 5.15 except now A is allowed to sample
k and have the parties output messages of the form vi,x := H(i, k + ti + b(cid:12) (ci +C(map(x)))). The
simulator A(cid:48) samples ti uniformly at random after A is bound to their choice of k and therefore
its easy to verify that A has negligible probability of querying H on such an input before receiving
k.
OT oracle.
Claim 5.20 (Malicious Receiver Security). Πext-Su+ satisﬁes security against a malicious receiver
(Deﬁnition 2.6) with respect to the F U
OT oracle.
Proof. The simulation also follows the same strategy as Lemma 5.15 with a few key diﬀerences.
1. A(cid:48) sends a dummy commitment in place of the commitment to k, i.e. a uniform string from
the same distribution.
2. Then A(cid:48) runs the normal simulation described by Lemma 5.15 up to the point that S would
decommit to k except that A(cid:48) does not program H as described.
3. At this point A(cid:48) has received U in step Step 2 and A send a valid proof for Step 4 (by
assumption or A(cid:48) would have aborted). A(cid:48) now uniformly samples k ← FnC
2 and programs
the commitment random oracle to decommit to k. A(cid:48) then programs H(cid:48) to output the ideal
output vi,xi of R for the query H(cid:48)(i, k + ti). Since k ∈ FnC
is uniformly distributed in the view
of A, it follows that A has probability at most q2−nC ≤ q2−κ = negl probability of querying
the oracle at this point, where q is the number of queries that A has made.
2
4. A(cid:48) then sends the decommits of k to A and completes the simulation as Lemma 5.15 does.
5.3 OT Extension with an Ideal Cipher
We now discuss how to eﬃciently implement OT extension by restricting the input domain of the
random oracle H to be {0, 1}nC . In particular, we are interested in the 1-out-of-2 OT case where
nC = κ = 128. The core motivation for OT extension in this setting is the pervasive support for
hardware based implementations of AES, which we will then use as an ideal cipher to hash the
output messages. In this model we design new protocols that satisfy F R
OT-security
and achieve better concrete performance than the protocols analyzed in Section 5.2. These previous
protocols have required a random oracle with input domain [m]×FnC
2 while
maintaining security.
2 which we reduce to FnC
OT,F S
OT and F U
Existing implementations[Rin, Zoh16, Kel, WMK16] have either instantiated H as a strong hash
function such as SHA-256 or using AES. However, in most cases5 that we observed[Rin, Zoh16, Kel],
these instantiation incorrectly reduce the input domain to FnC
2 before applying H which can lead
5The authors of [WMK16, GKWY19] independently identiﬁed the same implementation issue concurrently to us.
[WMK16] securely implement H(i, x) but requires twice the number of ideal cipher calls. See [GKWY19].
23
to full loss of security. In most cases5 the instantiation of H eﬀectively follows the form H(i, x) =
3, c2 ∈ Z2 where H(cid:48) is either a strong cryptographic hash
H(cid:48)(c1x+c2i)+c1x+c2i for constants c1 ∈ Z∗
function or AES with a ﬁxed and public key. Regardless of c1, c2, H(cid:48), it is trivial to ﬁnd collisions
in such an instantiation. For example, let x ∈ FnC
and then it holds that ∀i, i(cid:48) ∈ [m], H(i, x +
i) = H(i(cid:48), x + i(cid:48)).
In the context of the OT extension protocols in the previous section, this
attack translates into a malicious receiver being able to fully break the security. For example, let
c1 = c2 = 1, then R can choose T0 such that ti + i = ti(cid:48) + i(cid:48). It then holds that all the output
messages of the receiver will be the same value. That is, for all i, i(cid:48) ∈ [m], x ∈ [N ], it holds that
vi,x = vi(cid:48),x.
2
One solution is to implement H directly as a random oracle as opposed to ﬁrst adding the input
together. However, in the case of 1-out-of-2 OT this would prevent the eﬃcient use of AES based
hashing. We take a diﬀerent approach by removing the requirement for inputting i into the hash
function, i.e. R outputs H(ti) as opposed to H(i, ti). We prove this approach secure given that T0 is
sampled uniformly. Intuitively, this condition is suﬃcient due to collisions on the input to H being
negligible, i.e. the set {ti + b ⊕ C(x) | ∀i, x} does not collide6.
See Appendix F.6 for details and proofs.
6
Implementation
We give a detailed description of how to instantiate the OT protocols based on Diﬃe-Hellman
key exchange under tigther security loss and based on Kyber in Appendix D. We implement and
benchmark the optimized DH based (Appendix D.2)and the Kyber based protocol along with ﬁve
implementations of our OT extension protocols . See [Rin] for source code. We then compare these
two several other implementation including the Chou & Orlandi [CO15] and Naor & Pinkas [NP01]
OT protocols and the chosen string variant of Keller, Orsini & Scholl [KOS15]. All protocols are
in the random oracle model.
All protocols are implemented using the elliptic curve implementation of Relic Took-kit[AG]
and the assembly based curve25519 of [CO15, CO]. For the OT protocol based on Kyber we adapt
the [SAB+17] key exchange implementation. For our protocol we instantiate the Random Oracle
using Blake2 or the hashing to curve implementation of [AG] and the Ideal Cipher using AES.
We perform experiments on a multi-core Intel Xeon processor at 2.7GHz and 256GB of RAM.
Each party is given a single thread to execute on. The parties communicate over a network loop-
back device. We consider two settings, LAN where the parties have a 10Gbp connection and sub
millisecond latency and a WAN setting where an artiﬁcial latency of 50 ms and throughput of
100Mbps is imposed on the loopback device. We consider computation security parameter κ = 128
and statistical security of λ = 40. Some of the OT protocols take advantage of code written in
assembly which can signiﬁcantly outperform the other c++ implementations.
We begin with the performance results for our OT protocols. These are detailed in Figure 10.
Interestingly, our two protocols are each more eﬃcient than the other depending on the network
setting. The Kyber based protocol protocol is most eﬃcient in the LAN setting. This is due to the
highly eﬃcient operations which essentially comprise of linear algebra. However, the public keys
and encryptions that are send in the Kyber based protocol are 40 times larger than the DH based
OT. For example, a single OT using Kyber requires a total of 5,934 bytes while the DH protocol
requires 145 bytes. In the LAN setting this added communication has little impact. To perform
128 OT the Kyber implementation requires 24 milliseconds while our DH based approach takes
6Assuming b is uniformly sampled.
24
Protocol
[CO15]
[NP01]
This
Security†
Rounds
ASM
GapDH, RO→ “Rand. OT”
DDH, RO → F S
IDDH, RO → F E
OT
OT
LWE, RO → F S
OT or F Su
OT
2
3
1
2
No
Yes
No
No
Some
Yes
1
5
2
5
3
1
1
32
70
6