 focused-penetration
 discovery
 hosts
 targets.txt
 ranges.txt
 services
 vulnerabilities
 privilege-escalation
38
Discovering
 network services
In the last chapter, you learned that the information-gathering phase is broken into
three separate sub-phases:
A
Host discovery
B
Service discovery
C
Vulnerability discovery
You should be finished with the first sub-phase already. If you haven’t done host dis-
covery against your target environment yet, go back and complete chapter 2 before
continuing. In this chapter, you learn how to execute the second sub-phase: service
This chapter covers
 Understanding network services from an 
attacker’s perspective
 Network service discovery using Nmap
 Organizing and sorting Nmap scan output
 Creating protocol-specific target lists for 
vulnerability discovery
39
Network services from an attacker’s perspective
discovery. During service discovery, your goal is to identify any available network ser-
vices listening on the hosts you discovered during sub-phase A that might potentially
be vulnerable to an attack. 
 It’s important to emphasize my use of the words “might potentially be vulner-
able . . . .” Don’t worry just yet about determining for certain whether a service is
vulnerable to attack; I’ll cover that in future chapters. Right now, you should just be
worried about identifying what services are available and how to gather as much
information as you can about them. In other words, if a service exists, it might
potentially be vulnerable, but you shouldn’t be focused on that yet. Why would I ask you
to hold off on determining whether discovered services are vulnerable to attack? Isn’t
that the point of a penetration test? It is; but if you want to be successful, you need to
operate like a real attacker would. 
3.1
Network services from an attacker’s perspective
Think about your favorite heist movie where the criminals are trying to break into a
secure facility—a bank, casino, military base, it doesn’t matter (I’m picturing Ocean’s
Eleven). The “bad guys” don’t just bang on the first door or window they see without
constructing a detailed plan over several days or weeks that takes into consideration
all the specific characteristics of their target as well as the individual strengths of the
team members. 
 The attackers typically obtain a map or schematic of the target and spend a lot of
time analyzing all the different ways into the building: doors, windows, parking
garages, elevator and ventilation shafts, you name it. From an attacker’s perspective,
you can call these entry points or attack surfaces—and that’s exactly what network ser-
vices are: entry points into the target network. These are the surfaces you will attack in
an attempt to gain unauthorized entry into restricted areas of the network.
 If the movie criminals are good at what they do, they avoid simply walking up to
the building and testing the side door to see if it’s unlocked, if for no other reason
than that someone could see them, sound the proverbial alarm, and blow the whole
mission. Instead, they look at all the entry points as a whole and, based on their objec-
tives, their skillset, the available entry points, and how much time and resources they
Warning: Be thorough!
This is worth repeating: resist the urge to dive down the many rabbit holes that you’ll
likely uncover during this sub-phase. Instead, simply take note of potential attack vec-
tors and then move on to completing a thorough service discovery against your entire
scope of targets. 
I understand that it can be tempting to tug at the first thread you come across. After
all, your ultimate goal is to discover and exploit critical weaknesses within the target
environment. I promise you’ll produce more valuable results if you opt to be thorough
rather than rushing to get through this critical component of your pentest.
40
CHAPTER 3
Discovering network services
have to pull off the job, make a sophisticated plan of attack that has a high probability
of success.
 A pentester needs to do the same thing. So don’t worry about how to “get in” to
your target network just yet. Service discovery focuses on identifying as many possible
“doors and windows” (network services) as you can and building a map or schematic.
This is merely an illustrative analogy; you don’t need to build an actual network dia-
gram or schematic but rather a list of all the listening services and any information
you can uncover about them. The more of them you identify, the greater the chance
of finding one that is open or at least has a broken padlock when you move on to dis-
covering vulnerabilities. 
Figure 3.1 shows a graphical depiction of the entire service discovery sub-phase bro-
ken into its individual components. This sub-phase begins with the targets.txt list that
was created during host discovery and ends with a detailed understanding of all the
available network services, stored in separate protocol-specific lists that we’ll use in the
next chapter.
3.1.1
Understanding network service communication
Let’s start this sub-phase by defining exactly what I mean when I say network service. A
network service can be defined as any application or software that is listening for
Nmap port
scans
NSE script
scans
Configuration
details
Software
information
Parse XML
output
Protocol-specific 
target lists
targets.txt
Service
protocol
Open ports
A. Use Nmap to run port scans
    and NSE script scans against
    targets.txt.
B. Enumerate services
   listening on open ports to
   learn as much about them
   as possible.
C. Use a scripted XML parser to
    produce output that is
    organized by service protocol,
    such as HTTP, SMB, SQL…
Figure 3.1
Sub-phase B: service discovery workflow
41
Network services from an attacker’s perspective
requests on a network port from 0 to 65,535. The protocol of a particular service dic-
tates the proper format of a given request as well as what can be contained in the
request response. 
 Even if you haven’t given much thought to network services in the past, you inter-
act with at least one of them every day: the web service. A web service operates within
the constraints of the HTTP protocol. 
NOTE
Should you find yourself having trouble sleeping at night, you can read
about Hypertext Transfer Protocol (HTTP) in RFC 2616: https://www.ietf
.org/rfc/rfc2616.txt. It will most certainly knock you out because it is
extremely dry and deeply technical, just as a good protocol RFC ought to be. 
Every time you type a uniform resource locator (URL) into your web browser, you are
submitting a web request—usually a GET request, to be specific—that contains all the
necessary components set forth by the HTTP protocol specification. Your browser
receives the web response from the web server and renders the information that you
requested.
 Although many different network protocols exist with many different services satis-
fying many different needs, they all behave similarly. If a service or server is “up,” it is
considered to be sitting idly available until a client delivers a request for it to do some-
thing with. Once the server receives a request, it processes the request based on the
protocol specifications and then sends a response back to the client. 
 Of course, there is a lot more going on in the background than what I’ve depicted
in figure 3.2. I’ve intentionally stripped it down to the most basic components to illus-
trate the concept of a client making a request to a server. 
Almost all forms of network attacks revolve around sending some type of carefully
crafted (more often, we just say malicious) service request that takes advantage of a
flaw in the service in such a way that it is forced to execute an operation that is advan-
tageous to the attacker who sent the request. Most of the time, this means sending a
reverse command-shell back to the attacker’s machine. Figure 3.3 is another inten-
tionally oversimplified diagram illustrating the process of a malicious request result-
ing in remote code execution (RCE).
Standard
request
Standard
response
Client
Server
Backend
processing
Figure 3.2
Generic 
illustration of a typical 
network service request 
and response
42
CHAPTER 3
Discovering network services
3.1.2
Identifying listening network services
So far, I have been using the analogy of a large facility and its doors, windows, and
other entry points to illustrate the fact that network services are the things we try to
attack in order to penetrate our target environment. In this analogy, you can either
stand outside the building and look for all the entry points manually or, if you’re
crafty enough, obtain the building schematics that identify where they are.
 During a network pentest, you won’t typically be so lucky as to obtain a compre-
hensive network diagram, so you’ll have to discover which services are listening. This
can be accomplished through port scanning. 
 Using Nmap, you take each IP address that you’ve identified during host discovery,
and you literally ask that IP address, “Is port 0 open? What about port 1? How about
port 2?”—all the way up to 65,535. Most of the time, you won’t receive a response from
the target signaling that the particular port you just scanned is closed. A response of
any kind typically indicates that some sort of network service is listening on that port.
3.1.3
Network service banners
It’s not enough to know that a service is running on a given port. An attacker needs to
know as much about it as possible. Luckily, most services will provide a service banner
when requested to do so. Think of a service banner as being like a sign outside the
Malicious
request
Standard
response
Client
Server
Backend
processing
Unintended
RCE
Remote
access
Figure 3.3
Malicious network service request and response
What’s the difference between a service and a port?
Using a web server as an example, the service would be the particular software that’s
serving up websites to client (browser) requests. For example, the Apache web server
is a very popular open source web server that you will most certainly bump into during
your network pentests. 
The port the web server is listening on can be configured to any number between 0
and 65,535. But typically, you will find web servers listening on port 80 and port 443,
where 80 is used for non-encrypted traffic and 443 is used for SSL/TLS-encrypted
traffic.
43
Port scanning with Nmap
door of a business saying, “Here I am! I’m service XYZ, I’m running version ABC, and
I’m ready to process your requests. If you want to come inside, my door is located at
port #123.”
 Depending on the particular service configuration, the banner may reveal loads of
information, some of which could be useful to you as an attacker. At a minimum, you
want to know what protocol the server is running: FTP, HTTP, RDP, and so on. You
also want to know the name and, if visible, the exact version of the software listening
on that port. This information is critical because it allows you to search public exploit
databases such as www.exploit-db.com for known attack vectors and security weak-
nesses for that particular software version. Here is an example of a service banner con-
tained in the headers of an HTTP request using the curl command. Run the
following command, and be aware that raditz.capsulecorp.local could easily be
replaced with an IP address:
curl --head raditz.capsulecorp.local
HTTP/1.1 403 Forbidden    
Content-Length: 1233
Content-Type: text/html
Server: Microsoft-IIS/10.0    
X-Powered-By: ASP.NET    
Date: Fri, 10 May 2019 17:23:57 GMT
Notice that the output from this command contains all three of the elements (proto-
col, service name, and service version) I mentioned. The protocol is HTTP, which, of
course, was already known; the software running on this web server is Microsoft IIS;
and, specifically, this is version 10.0. In this case, some additional bonus information is
provided. It’s clear this IIS server is configured with ASP.NET, which may mean the
target is using server-side code that is talking to a backend database—something an
attacker would certainly be interested in looking at. During this sub-phase, you should
be focused on identifying every open port running on all of your targets and enumer-
ating each of them to this level of detail so that you have an accurate picture of what is
available to you and the overall attack surface of your target network.
3.2
Port scanning with Nmap
Once again, Nmap is the tool of choice for discovering network services. As with the
ICMP pingsweep example in chapter 2, the idea is to iterate through each IP address
in your targets.txt file. Only this time, rather than check whether the host is up and
replying to ICMP request messages, Nmap is going to see if the host will attempt to
establish a TCP connection with your attacking machine on port 0, then on port 1,
and then on port 2, all the way up to 65,535. 
Listing 3.1
Using curl to request an HTTP service banner
This service is using 
the HTTP protocol.
Specifically, this is a Microsoft IIS web 
server. Version 10.0 lets you know this is 
Windows 2016 or later.
As a bonus, you can see it’s using 
ASP.NET. This means the server is likely 
talking to a backend database server.
44
CHAPTER 3
Discovering network services
 You might be wondering if Nmap needs to “speak” to each individual network pro-
tocol of a given service if it finds one listening on a given port. (Bonus points to you if
you were thinking that, by the way.) The answer is not necessarily. If you are only
checking whether a port is open, there is no need to be able to have meaningful com-
munication with the service listening on that port. Let me explain.
 Imagine you’re walking down the hallway of an apartment building. Some of the
apartments are vacant, and some of them are occupied. Your goal during this thought
experiment is to determine which apartments have tenants living in them. You begin
knocking on doors one at a time. Each time a person opens the door, they attempt to
start a conversation with you in their native language. You may or may not understand
this language, but that’s not important because you are merely scanning the hallway
to see which doors lead to occupied rooms. At each door you test, you note whether
someone answered; then you rudely ignore their conversation attempt and move on
to knock on the next door. This is exactly how port scanning works.
 Coincidently, if you were analogous to the Nmap project, you would be fluent in
most human languages spoken on Earth; this is how you could ask the person who
answers the door to provide additional details about what is going on in that particu-
lar apartment. In a later section, you’ll get to do just that. For the time being, though,
you’re only concerned with figuring out whether someone is there—if the port is
“open.” If a port is “closed,” it simply will not reply to nmap’s connection attempts,
just like a vacant apartment has no one to answer your knock. If a port is open, it will
reply as it usually does when a client that does speak that service’s protocol attempts
to initiate a connection. The fact that the service replies at all lets you know that port
is open.
3.2.1
Commonly used ports
There are obvious reasons why a real enterprise network cannot be used to demon-
strate the proper workflow of an internal network penetration test (INPT). In case the
reasons are not obvious, I will spell them out. The main issue is liability. Without hav-
ing you sign a non-disclosure agreement (NDA), it would be extremely unethical, and
potentially even illegal, to disclose vulnerable details about a company’s network in
the pages of this book. That is why the examples are all created using the Capsulecorp
Pentest network, which I built with virtual machines in my private lab environment. 
 Although I have done everything in my power to model this network off of real
enterprise configurations that I have seen countless times, there is one key difference:
network size. Big enterprises usually have tens of thousands of nodes on their internal
subnet.
NOTE
By the way, the fact that large enterprise networks are so big coinci-
dently makes them easier targets for an attacker because the more systems an
administrator has to secure, the higher the probability of them making an
oversight and missing something important. Bigger isn’t always better.
45
Port scanning with Nmap
I bring this up because it can take a very long time to conduct a thorough port scan
against a large network scope. This is why I have structured this methodology the way
I have. If you are working through the exercises in this book on a similarly sized lab
network, you might wonder why you begin with common TCP ports and don’t start by
scanning all 65k. The answer is related to time and productivity. 
 As soon as possible, a pentester wants to get some information that they can poke
around at manually while waiting for more exhaustive scans, which sometimes take all
day to complete. For this reason, you should always run a quick sweep of your top 10
or 20 favorite ports to give you some initial threads to chase down while you’re waiting
for the meat and potatoes of your service discovery. 
 The purpose of this sweep is to move quickly, so it scans only a select group of ports
that have a higher probability of containing services with potentially exploitable weak-
nesses. Alternatively, you could use Nmap’s --top-ports flag followed by a number to
scan only the top #N ports. I don’t illustrate this method here because Nmap catego-
rizes a “top port” as one that is used most frequently, which doesn’t necessarily make it
the most useful to a pentester. I prefer to instead think of ports that are most com-
monly attacked. An example scan against the Capsulecorp Pentest network using 13
ports commonly identified in modern enterprise networks uses the following com-
mand, all on one line:
nmap -Pn -n -p 22,25,53,80,443,445,1433,3306,3389,5800,5900,8080,8443 
➥ -iL hosts/targets.txt -oA services/quick-sweep 
The following listing shows a snippet of the output.
nmap scan report for 10.0.10.160
Host is up (0.00025s latency).