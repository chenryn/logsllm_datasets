### Security Symposium (Security), Washington, DC, Aug. 2015

[52] M. Rash, “A Collection of Vulnerabilities Discovered by the AFL Fuzzer,” 2017, [https://github.com/mrash/afl-cve](https://github.com/mrash/afl-cve).

[53] S. Rawat, V. Jain, A. Kumar, L. Cojocar, C. Giuffrida, and H. Bos, “VUzzer: Application-aware Evolutionary Fuzzing,” in Proceedings of the 2017 Annual Network and Distributed System Security Symposium (NDSS), San Diego, CA, Feb.–Mar. 2017.

[54] M. Russinovich and D. A. Solomon, *Windows Internals: Including Windows Server 2008 and Windows Vista*. Microsoft Press, 2009.

[55] R. Schaefer, “Fuzzing Adobe Reader for Exploitable Vulns,” [https://kciredor.com/fuzzing-adobe-reader-for-exploitable-vulns-fun-not-profit.html](https://kciredor.com/fuzzing-adobe-reader-for-exploitable-vulns-fun-not-profit.html), 2018.

[56] K. Serebryany, D. Bruening, A. Potapenko, and D. Vyukov, “AddressSanitizer: A Fast Address Sanity Checker,” in Proceedings of the 2012 USENIX Annual Technical Conference (ATC), Boston, MA, Jun. 2012.

[57] A. Souchet, I. Fratric, J. Vazquez, and S. Denbow, “AFL for Fuzzing Windows Binaries,” 2016, [https://github.com/ivanfratric/winafl](https://github.com/ivanfratric/winafl).

[58] A. Souchet, I. Fratric, J. Vazquez, and S. Denbow, “How to Select a Target Function,” [https://github.com/googleprojectzero/winafl#how-to-select-a-target-function](https://github.com/googleprojectzero/winafl#how-to-select-a-target-function), 2016.

[59] A. Souchet, I. Fratric, J. Vazquez, and S. Denbow, “WinAFL Intel PT Mode,” 2019, [https://github.com/googleprojectzero/winafl/blob/master/readme_pt.md](https://github.com/googleprojectzero/winafl/blob/master/readme_pt.md).

[60] N. Stephens, J. Grosen, C. Salls, A. Dutcher, R. Wang, J. Corbetta, Y. Shoshitaishvili, C. Kruegel, and G. Vigna, “Driller: Augmenting Fuzzing Through Selective Symbolic Execution,” in Proceedings of the 2016 Annual Network and Distributed System Security Symposium (NDSS), San Diego, CA, Feb. 2016.

[61] symeon, “Fuzzing the MSXML6 Library with WinAFL,” [https://symeonp.github.io/2017/09/17/fuzzing-winafl.html](https://symeonp.github.io/2017/09/17/fuzzing-winafl.html), 2017.

[62] Syzkaller, “Syzkaller Found Bugs - Linux Kernel,” 2018, [https://github.com/google/syzkaller/issues?q=is%3Aissue+is%3Aopen+label%3Abug](https://github.com/google/syzkaller/issues?q=is%3Aissue+is%3Aopen+label%3Abug).

## Appendix A: Fork Internals

To implement our fork functionality, we reverse-engineered various internal Windows APIs and systems, including `ntdll.dll`, `NtCreateUserProcess`, and the CSRSS (Client/Server Runtime Subsystem). This process allowed us to identify several magic values required by these components. After overcoming these challenges, we were able to implement a practical and robust fork-server for fuzzing.

### Role of CSRSS

The CSRSS is a user-mode process that controls the underlying layer of the Windows environment [54]. It is responsible for allocating console windows and shutting down processes. New processes must connect to it to function properly.

We use native Windows system APIs to communicate directly with the kernel. Figures 6 and 10 display our fork implementation. The steps are as follows:

1. The parent process calls `NtCreateUserProcess` with the appropriate flags, creating a suspended child process with a copy-on-write (CoW) copy of the parent’s address space (line 1). We keep the child process suspended until the parent calls `CsrClientCallServer` to inform the CSRSS that a new process was created (line 12).
2. The parent then resumes the child, which proceeds to self-initialize (line 17). The parent returns from the fork (line 14).
3. In the child process, because the address space matches the parent’s, several global variables (e.g., `CsrServerApiRoutine` in `ntdll.dll`) that would be zero for new processes are already set. The child must de-initialize these manually by zeroing them out (line 18) to avoid crashing in the next step.
4. The child now connects to the CSRSS by calling `CsrClientConnectToServer` (line 20). This step is critical for the child process to function properly.
5. The CSRSS acknowledges the newly created process and thread, and the child process returns from the fork (line 21).

```c
NTSTATUS result = NtCreateUserProcess(
    &hProcess, &hThread, MAXIMUM_ALLOWED, MAXIMUM_ALLOWED,
    NULL, NULL, PROCESS_CREATE_FLAGS_INHERIT_FROM_PARENT | PROCESS_CREATE_FLAGS_INHERIT_HANDLES,
    THREAD_CREATE_FLAGS_CREATE_SUSPENDED,
    NULL, &procInfo, NULL
);

if (!result) { // Parent process
    NotifyCsrssParent(hProcess, hThread);
    ResumeThread(hThread);
    return GetProcessId(hProcess);
} else { // Child process
    memset(pCsrData, 0, csrDataSize);
    ConnectCsrChild();
    return 0;
}
```

**Figure 10:** Fork implementation. Only the core `fork()` function is displayed. Low-level details and helper functions are omitted for brevity. For more detailed code, refer to our project’s source code.

## Appendix B: Tested Harnesses

**Figure 11:** Cumulative distribution plot for our harnesses. The graph shows how many of our harnesses fixed N lines of code (LoC) or fewer. As shown, nearly 70% of the harnesses worked without any modifications at all. 95% of our harnesses could be fuzzed with ≤ 10 LoC modifications.

| Program        | File Size | WinAFL-PT | WinAFL-DR |
|----------------|-----------|-----------|-----------|
| 7zip           | 1115KB    | ✔         | crash     |
| WinRAR         | 557KB     | ✔         | crash     |
| makecab        | 68KB      | ✔         | no inst.  |
| GomPlayer      | 4092KB    | timeout   | no inst.  |
| expand         | 53KB      | ✔         | timeout   |
| VLCPlayer      | 273KB     | ✔         | crash     |
| uriparser      | 157KB     | ✔         | crash     |
| AdobeRdr       | 847KB     | timeout   | timeout   |
| Starcraft      | 453KB     | timeout   | timeout   |
| HWP            | 86KB      | timeout   | timeout   |
| ...            | ...       | ...       | ...       |
| RetroArch      | 32MB      | timeout   | timeout   |
| UltraISO       | 523KB     | timeout   | timeout   |
| ACDSee         | 2724KB    | timeout   | timeout   |
| KGB            | 1683KB    | timeout   | timeout   |
| MuseScore3     | 683KB     | timeout   | timeout   |
| MSSDK          | 5408KB    | timeout   | timeout   |
| ...            | ...       | ...       | ...       |

**Table XI:** Results of testing the generated harnesses with WinAFL. We generated 59 harnesses and tested them on WINNIE, WinAFL-IPT, and WinAFL-DR. WINNIE was able to run all 59 harnesses. WinAFL-IPT and WinAFL-DR failed to run 33 and 30 harnesses, respectively. "No inst." denotes no instrumentation.