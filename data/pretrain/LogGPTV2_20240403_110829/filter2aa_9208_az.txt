For further details see perltie, \*(L"tied \s-1VARIABLE\s0\*(R".
.IP "tied \s-1VARIABLE\s0" 8
.IX Item "tied VARIABLE"
Returns a reference to the object underlying \s-1VARIABLE\s0 (the same value
that was originally returned by the \f(CW\*(C`tie\*(C'\fR call that bound the variable
to a package.)  Returns the undefined value if \s-1VARIABLE\s0 isn't tied to a
package.
.IP "time" 8
.IX Item "time"
Returns the number of non-leap seconds since whatever time the system
considers to be the epoch (that's 00:00:00, January 1, 1904 for Mac \s-1OS\s0,
and 00:00:00 \s-1UTC\s0, January 1, 1970 for most other systems).
Suitable for feeding to \f(CW\*(C`gmtime\*(C'\fR and \f(CW\*(C`localtime\*(C'\fR.
.Sp
For measuring time in better granularity than one second,
you may use either the Time::HiRes module (from \s-1CPAN\s0, and starting from
Perl 5.8 part of the standard distribution), or if you have
\&\fIgettimeofday\fR\|(2), you may be able to use the \f(CW\*(C`syscall\*(C'\fR interface of Perl.
See perlfaq8 for details.
.IP "times" 8
.IX Item "times"
Returns a four-element list giving the user and system times, in
seconds, for this process and the children of this process.
.Sp
.Vb 1
\&    ($user,$system,$cuser,$csystem) = times;
.Ve
.Sp
In scalar context, \f(CW\*(C`times\*(C'\fR returns \f(CW$user\fR.
.IP "tr///" 8
.IX Item "tr///"
The transliteration operator.  Same as \f(CW\*(C`y///\*(C'\fR.  See perlop.
.IP "truncate \s-1FILEHANDLE\s0,LENGTH" 8
.IX Item "truncate FILEHANDLE,LENGTH"
.PD 0
.IP "truncate \s-1EXPR\s0,LENGTH" 8
.IX Item "truncate EXPR,LENGTH"
.PD
Truncates the file opened on \s-1FILEHANDLE\s0, or named by \s-1EXPR\s0, to the
specified length.  Produces a fatal error if truncate isn't implemented
on your system.  Returns true if successful, the undefined value
otherwise.
.Sp
The behavior is undefined if \s-1LENGTH\s0 is greater than the length of the
file.
.IP "uc \s-1EXPR\s0" 8
.IX Item "uc EXPR"
.PD 0
.IP "uc" 8
.IX Item "uc"
.PD
Returns an uppercased version of \s-1EXPR\s0.  This is the internal function
implementing the \f(CW\*(C`\eU\*(C'\fR escape in double-quoted strings.  Respects
current \s-1LC_CTYPE\s0 locale if \f(CW\*(C`use locale\*(C'\fR in force.  See perllocale
and perlunicode for more details about locale and Unicode support.
It does not attempt to do titlecase mapping on initial letters.  See
\&\f(CW\*(C`ucfirst\*(C'\fR for that.
.Sp
If \s-1EXPR\s0 is omitted, uses \f(CW$_\fR.
.IP "ucfirst \s-1EXPR\s0" 8
.IX Item "ucfirst EXPR"
.PD 0
.IP "ucfirst" 8
.IX Item "ucfirst"
.PD
Returns the value of \s-1EXPR\s0 with the first character in uppercase
(titlecase in Unicode).  This is the internal function implementing
the \f(CW\*(C`\eu\*(C'\fR escape in double-quoted strings.  Respects current \s-1LC_CTYPE\s0
locale if \f(CW\*(C`use locale\*(C'\fR in force.  See perllocale and perlunicode
for more details about locale and Unicode support.
.Sp
If \s-1EXPR\s0 is omitted, uses \f(CW$_\fR.
.IP "umask \s-1EXPR\s0" 8
.IX Item "umask EXPR"
.PD 0
.IP "umask" 8
.IX Item "umask"
.PD
Sets the umask for the process to \s-1EXPR\s0 and returns the previous value.
If \s-1EXPR\s0 is omitted, merely returns the current umask.
.Sp
The Unix permission \f(CW\*(C`rwxr\-x\-\-\-\*(C'\fR is represented as three sets of three
bits, or three octal digits: \f(CW0750\fR (the leading 0 indicates octal
and isn't one of the digits).  The \f(CW\*(C`umask\*(C'\fR value is such a number
representing disabled permissions bits.  The permission (or \*(L"mode\*(R")
values you pass \f(CW\*(C`mkdir\*(C'\fR or \f(CW\*(C`sysopen\*(C'\fR are modified by your umask, so
even if you tell \f(CW\*(C`sysopen\*(C'\fR to create a file with permissions \f(CW0777\fR,
if your umask is \f(CW0022\fR then the file will actually be created with
permissions \f(CW0755\fR.  If your \f(CW\*(C`umask\*(C'\fR were \f(CW0027\fR (group can't
write; others can't read, write, or execute), then passing
\&\f(CW\*(C`sysopen\*(C'\fR \f(CW0666\fR would create a file with mode \f(CW0640\fR (\f(CW\*(C`0666 &~
027\*(C'\fR is \f(CW0640\fR).
.Sp
Here's some advice: supply a creation mode of \f(CW0666\fR for regular
files (in \f(CW\*(C`sysopen\*(C'\fR) and one of \f(CW0777\fR for directories (in
\&\f(CW\*(C`mkdir\*(C'\fR) and executable files.  This gives users the freedom of
choice: if they want protected files, they might choose process umasks
of \f(CW022\fR, \f(CW027\fR, or even the particularly antisocial mask of \f(CW077\fR.
Programs should rarely if ever make policy decisions better left to
the user.  The exception to this is when writing files that should be
kept private: mail files, web browser cookies, \fI.rhosts\fR files, and
so on.
.Sp
If \fIumask\fR\|(2) is not implemented on your system and you are trying to
restrict access for \fIyourself\fR (i.e., (\s-1EXPR\s0 & 0700) > 0), produces a
fatal error at run time.  If \fIumask\fR\|(2) is not implemented and you are
not trying to restrict access for yourself, returns \f(CW\*(C`undef\*(C'\fR.
.Sp
Remember that a umask is a number, usually given in octal; it is \fInot\fR a
string of octal digits.  See also \*(L"oct\*(R", if all you have is a string.
.IP "undef \s-1EXPR\s0" 8
.IX Item "undef EXPR"
.PD 0
.IP "undef" 8
.IX Item "undef"
.PD
Undefines the value of \s-1EXPR\s0, which must be an lvalue.  Use only on a
scalar value, an array (using \f(CW\*(C`@\*(C'\fR), a hash (using \f(CW\*(C`%\*(C'\fR), a subroutine
(using \f(CW\*(C`&\*(C'\fR), or a typeglob (using \f(CW\*(C`*\*(C'\fR).  (Saying \f(CW\*(C`undef $hash{$key}\*(C'\fR
will probably not do what you expect on most predefined variables or
\&\s-1DBM\s0 list values, so don't do that; see delete.)  Always returns the
undefined value.  You can omit the \s-1EXPR\s0, in which case nothing is
undefined, but you still get an undefined value that you could, for
instance, return from a subroutine, assign to a variable or pass as a
parameter.  Examples:
.Sp
.Vb 9
\&    undef $foo;
\&    undef $bar{'blurfl'};      # Compare to: delete $bar{'blurfl'};
\&    undef @ary;
\&    undef %hash;
\&    undef &mysub;
\&    undef *xyz;       # destroys $xyz, @xyz, %xyz, &xyz, etc.
\&    return (wantarray ? (undef, $errmsg) : undef) if $they_blew_it;
\&    select undef, undef, undef, 0.25;
\&    ($a, $b, undef, $c) = &foo;       # Ignore third value returned
.Ve
.Sp
Note that this is a unary operator, not a list operator.
.IP "unlink \s-1LIST\s0" 8
.IX Item "unlink LIST"
.PD 0
.IP "unlink" 8
.IX Item "unlink"
.PD
Deletes a list of files.  Returns the number of files successfully
deleted.
.Sp
.Vb 3
\&    $cnt = unlink 'a', 'b', 'c';
\&    unlink @goners;
\&    unlink ;
.Ve
.Sp
Note: \f(CW\*(C`unlink\*(C'\fR will not delete directories unless you are superuser and
the \fB\-U\fR flag is supplied to Perl.  Even if these conditions are
met, be warned that unlinking a directory can inflict damage on your
filesystem.  Use \f(CW\*(C`rmdir\*(C'\fR instead.
.Sp
If \s-1LIST\s0 is omitted, uses \f(CW$_\fR.
.IP "unpack \s-1TEMPLATE\s0,EXPR" 8
.IX Item "unpack TEMPLATE,EXPR"
\&\f(CW\*(C`unpack\*(C'\fR does the reverse of \f(CW\*(C`pack\*(C'\fR: it takes a string
and expands it out into a list of values.
(In scalar context, it returns merely the first value produced.)
.Sp
The string is broken into chunks described by the \s-1TEMPLATE\s0.  Each chunk
is converted separately to a value.  Typically, either the string is a result
of \f(CW\*(C`pack\*(C'\fR, or the bytes of the string represent a C structure of some
kind.
.Sp
The \s-1TEMPLATE\s0 has the same format as in the \f(CW\*(C`pack\*(C'\fR function.
Here's a subroutine that does substring:
.Sp
.Vb 4
\&    sub substr {
\&        my($what,$where,$howmuch) = @_;
\&        unpack("x$where a$howmuch", $what);
\&    }
.Ve
.Sp
and then there's
.Sp
.Vb 1
\&    sub ordinal { unpack("c",$_[0]); } # same as ord()
.Ve
.Sp
In addition to fields allowed in \fIpack()\fR, you may prefix a field with
a % to indicate that
you want a \-bit checksum of the items instead of the items
themselves.  Default is a 16\-bit checksum.  Checksum is calculated by
summing numeric values of expanded values (for string fields the sum of
\&\f(CW\*(C`ord($char)\*(C'\fR is taken, for bit fields the sum of zeroes and ones).
.Sp
For example, the following
computes the same number as the System V sum program:
.Sp
.Vb 4
\&    $checksum = do {
\&        local $/;  # slurp!
\&        unpack("%32C*",<>) % 65535;
\&    };
.Ve
.Sp
The following efficiently counts the number of set bits in a bit vector:
.Sp
.Vb 1
\&    $setbits = unpack("%32b*", $selectmask);
.Ve
.Sp
The \f(CW\*(C`p\*(C'\fR and \f(CW\*(C`P\*(C'\fR formats should be used with care.  Since Perl
has no way of checking whether the value passed to \f(CW\*(C`unpack()\*(C'\fR
corresponds to a valid memory location, passing a pointer value that's
not known to be valid is likely to have disastrous consequences.
.Sp
If there are more pack codes or if the repeat count of a field or a group
is larger than what the remainder of the input string allows, the result
is not well defined: in some cases, the repeat count is decreased, or
\&\f(CW\*(C`unpack()\*(C'\fR will produce null strings or zeroes, or terminate with an
error. If the input string is longer than one described by the \s-1TEMPLATE\s0,
the rest is ignored.
.Sp
See \*(L"pack\*(R" for more examples and notes.
.IP "untie \s-1VARIABLE\s0" 8
.IX Item "untie VARIABLE"
Breaks the binding between a variable and a package.  (See \f(CW\*(C`tie\*(C'\fR.)
Has no effect if the variable is not tied.
.IP "unshift \s-1ARRAY\s0,LIST" 8
.IX Item "unshift ARRAY,LIST"
Does the opposite of a \f(CW\*(C`shift\*(C'\fR.  Or the opposite of a \f(CW\*(C`push\*(C'\fR,
depending on how you look at it.  Prepends list to the front of the
array, and returns the new number of elements in the array.
.Sp
.Vb 1
\&    unshift(@ARGV, '-e') unless $ARGV[0] =~ /^-/;
.Ve
.Sp
Note the \s-1LIST\s0 is prepended whole, not one element at a time, so the
prepended elements stay in the same order.  Use \f(CW\*(C`reverse\*(C'\fR to do the
reverse.
.IP "use Module \s-1VERSION\s0 \s-1LIST\s0" 8
.IX Item "use Module VERSION LIST"
.PD 0
.IP "use Module \s-1VERSION\s0" 8
.IX Item "use Module VERSION"
.IP "use Module \s-1LIST\s0" 8
.IX Item "use Module LIST"
.IP "use Module" 8
.IX Item "use Module"
.IP "use \s-1VERSION\s0" 8
.IX Item "use VERSION"
.PD
Imports some semantics into the current package from the named module,
generally by aliasing certain subroutine or variable names into your
package.  It is exactly equivalent to
.Sp
.Vb 1
\&    BEGIN { require Module; import Module LIST; }
.Ve
.Sp
except that Module \fImust\fR be a bareword.
.Sp
\&\s-1VERSION\s0 may be either a numeric argument such as 5.006, which will be
compared to \f(CW$]\fR, or a literal of the form v5.6.1, which will be compared
to \f(CW$^V\fR (aka \f(CW$PERL_VERSION\fR.  A fatal error is produced if \s-1VERSION\s0 is
greater than the version of the current Perl interpreter; Perl will not