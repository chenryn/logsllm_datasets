Recent work [39] calls into question the ultimate utility of exploit-
based signatures, and research on vulnerability(cid:150)speci(cid:2)c protection
techniques [11, 7, 18] explores methods for defeating exploits de-
Countering attacks and malcode is a hard problem. Spinellis
showed that identi(cid:2)cation of bounded length metamorphic virii is
NP-complete [37] by decomposing the problem into one of graph
isomorphism. In addition, Fogla et al. [17] showed that (cid:2)nding a
polymorphic blending attack is also an NP-complete problem.
TRAFFIC CONTENT ANALYSIS
Snort [36] is a widely deployed open-source signature-based de-
tector. Exploring how to automatically generate exploit signatures
has been the focus of a great deal of research [22, 35, 28, 24, 44,
43, 25, 2]. To generate a signature, most of these systems either ex-
amine the content or characteristics of network traf(cid:2)c or instrument
the host to identify malicious input. Host(cid:150)based approaches (cid:2)lter
traf(cid:2)c through an instrumented version of the application to detect
malcode.
If con(cid:2)rmed, the malcode is dissected to dynamically
generate a signature to stop similar future attacks.
Abstract Payload Execution (APE) [38] treats packet content as
machine instructions. SigFree [42] adopts similar techniques. In-
struction decoding of packets can identify the sled, or sequence of
instructions in an exploit whose purpose is to guide the program
counter to the exploit code. Krugel et al. [23] detect polymorphic
worms by learning a control (cid:3)ow graph for the worm binary. Con-
vergent static analysis [8] also aims at revealing the control (cid:3)ow of
a random sequence of bytes.
Statistical content anomaly detection is another avenue of re-
search, and PayL [40] models the 1-gram distributions of normal
traf(cid:2)c using the Mahalanobis distance as a metric to gauge the nor-
mality of incoming packets. Anagram [21] caches known benign
n-grams extracted from normal content in a fast hash map and com-
pares ratios of seen and unseen grams to determine normality.
COUNTERING POLYMORPHISM
spite differences between instances of their encoded form. The un-
derlying idea relies on capturing the characteristics of the vulnera-
bility (such as a conjunction of equivalence relations on the set of
jump addresses that lead to the vulnerability being exercised. Cui
et al. [12] combine data(cid:3)ow analysis and protocol or data format
parsing to construct network or (cid:2)le system level (cid:147)data patches(cid:148) to
(cid:2)lter input instances related to a particular vulnerability.
Brumley et al. [7] supply an initial exploration of some of the
theoretical foundations of vulnerability(cid:150)based signatures. Vulner-
ability signatures help classify an entire set of exploit inputs rather
than a particular exploit instance. As an illustration of the dif(cid:2)culty
of creating vulnerability signatures, Crandall et al. [11] discuss
generating high quality vulnerability signatures via an empirical
study of the behavior of polymorphic and metamorphic malcode.
The authors present a vulnerability model that explicitly considers
that malcode can be arbitrarily mutated. They outline the dif(cid:2)culty
of identifying enough features of an exploit to generalize about a
speci(cid:2)c vulnerability. For example, the critical features of an ex-
ploit may only exist in a few or relatively small number of input
tokens, and if the attacked application is using a binary protocol,
telltale byte values indicating an attack may be common or oth-
erwise unextraordinary values. For example, the Slammer exploit
essentially contains a single (cid:147)(cid:3)ag(cid:148) value of 0x4. For other pro-
tocols, detecting that the exploit contained the string (cid:147)HTTP(cid:148) or
some URL typically does not provide enough evidence to begin
blocking arbitrary requests (cid:151) or if it does, our analysis indicates
that such exploits can be arbitrarily mutated, thus vastly increasing
the signature database and the processing time for benign traf(cid:2)c.
One way to counter the presence of the engine we propose in
Section 3 is to use an anomaly detection (AD) sensor to shunt sus-
pect traf(cid:2)c (that is, traf(cid:2)c that does not match normal or whitelisted
content) to a heavily instrumented replica to con(cid:2)rm the sensor’s
initial classi(cid:2)cation. In fact, Anagnostakis et al. [2] propose such
an architecture, called a (cid:147)shadow honeypot.(cid:148) A shadow honeypot
is an instrumented replica host that shares state with a production
application and receives copies of messages sent to a production
application (cid:151) messages that a network anomaly detection compo-
nent deems abnormal. If the shadow con(cid:2)rms the attack, it creates
a network (cid:2)lter for that attack and provides positive con(cid:2)rmation
to the anomaly detector.
If the detector misclassi(cid:2)ed the traf(cid:2)c,
the only impact will be slower processing of the request (since the
shadow shares full state with the production application). The in-
tuition behind this approach is that the normal content model for a
site or organization is regular and well(cid:150)de(cid:2)ned relative to the al-
most random distribution representative of possible polymorphic
exploit instances. If content deemed normal is put on the fast path
for service and content deemed abnormal is shunted to a heavily
protected copy for vetting, then we can reliably detect exploit vari-
ants without heavily impacting the service of most normal requests.
Since network traf(cid:2)c may look similar enough across sites, pre-
trained blending attacks such as the ones we explored in section 3
pose a real threat. Future statistical IDS techniques should take
measures to hide the pro(cid:2)les of the normal content from the at-
tacker. If we can force the attacker to guess where to aim his attack
then perhaps we can turn the complexity of n-space to our favor.
6. CONCLUSIONS
Our empirical results demonstrate the dif(cid:2)culty of modeling poly-
morphic behavior. We brie(cid:3)y summarized the achievements of the
shellcoder community in making their code polymorphic and ex-
amined ways to improve some of these techniques. We presented
analytical methods that can help assess the capabilities of polymor-
phic engines and applied them to some state-of-the-art engines. We
explained why signature(cid:150)based modeling works in some cases and
con(cid:2)rmed that the viability of such approaches matches the intu-
itive belief that polymorphism will eventually defeat these method-
ologies. The strategy of modeling malicious behavior leads to an
unending arms race with an attacker. Alternatively, white(cid:150)listing
normal content or behavior patterns (perhaps in randomized ways
in order to defend against blending attacks) might ultimately be
safer than blacklisting arbitrary and highly varied malicious behav-
ior or content.
7. REFERENCES
[1] ALEPH0NE. Smashing the Stack for Fun and Pro(cid:2)t. Phrack
7, 49-14 (1996).
[2] ANAGNOSTAKIS, K. G., SIDIROGLOU, S., AKRITIDIS, P.,
XINIDIS, K., MARKATOS, E., AND KEROMYTIS, A. D.
Detecting Targeted Attacks Using Shadow Honeypots. In
Proceedings of the 14th USENIX Security Symposium.
(August 2005).
[3] BARATLOO, A., SINGH, N., AND TSAI, T. Transparent
Run-Time Defense Against Stack Smashing Attacks. In
Proceedings of the USENIX Annual Technical Conference
(June 2000).
[4] BARRANTES, E. G., ACKLEY, D. H., FORREST, S.,
PALMER, T. S., STEFANOVIC, D., AND ZOVI, D. D.
Randomized Instruction Set Emulation to Distrupt Binary
Code Injection Attacks. In Proceedings of the 10th ACM
Conference on Computer and Communications Security
(CCS) (October 2003).
[5] BHATKAR, S., DUVARNEY, D. C., AND SEKAR, R.
Address Obfuscation: an Ef(cid:2)cient Approach to Combat a
Broad Range of Memory Error Exploits. In Proceedings of
the 12th USENIX Security Symposium (August 2003),
pp. 105(cid:150)120.
[6] BIONDI, P. Shellforge Project, 2006.
http://www.secdev.org/projects/shellforge/.
[7] BRUMLEY, D., NEWSOME, J., SONG, D., WANG, H., AND
JHA, S. Towards Automatic Generation of
Vulnerability-Based Signatures. In Proceedings of the IEEE
Symposium on Security and Privacy (2006).
[8] CHINCHANI, R., AND BERG, E. V. D. A Fast Static
Analysis Approach to Detect Exploit Code Inside Network
Flows. In Proceedings of the 8th International Symposium
on Recent Advances in Intrusion Detection (RAID)
(September 2005), pp. 284(cid:150)304.
[9] COSTA, M., CROWCROFT, J., CASTRO, M., AND
ROWSTRON, A. Vigilante: End-to-End Containment of
Internet Worms. In Proceedings of the Symposium on
Systems and Operating Systems Principles (SOSP) (October
2005).
[10] COWAN, C., PU, C., MAIER, D., HINTON, H., WALPOLE,
J., BAKKE, P., BEATTIE, S., GRIER, A., WAGLE, P., AND
ZHANG, Q. Stackguard: Automatic Adaptive Detection and
Prevention of Buffer-Over(cid:3)ow Attacks. In Proceedings of
the USENIX Security Symposium (1998).
[11] CRANDALL, J. R., SU, Z., WU, S. F., AND CHONG, F. T.
On Deriving Unknown Vulnerabilities from Zero-Day
Polymorphic and Metamorphic Worm Exploits. In
Proceedings of the 12th ACM Conference on Computer and
Communications Security (CCS) (November 2005).
[12] CUI, W., PEINADO, M., WANG, H. J., AND LOCASTO,
M. E. ShieldGen: Automated Data Patch Generation for
Unknown Vulnerabilities with Informed Probing. In
Proceedings of the IEEE Symposium on Security and Privacy
(May 2007).
[13] DETRISTAN, T., ULENSPIEGEL, T., MALCOM, Y., AND
VON UNDERDUK, M. S. Polymorphic Shellcode Engine
Using Spectrum Analysis. Phrack 11, 61-9 (2003).
[14] EREN, S. Smashing the Kernel Stack for Fun and Pro(cid:2)t.
Phrack 11, 60-6 (2003).
[15] ETOH, J. GCC Extension for Protecting Applications From
Stack-smashing Attacks. In
http://www.trl.ibm.com/projects/security/ssp (June 2000).
[16] FERRIE, P., AND SZ ¤OR, P. Zmist Opportunities. http:
//pferrie.tripod.com/papers/zmist.pdf,
2005.
[17] FOGLA, P., AND LEE, W. Evading network anomaly
detection systems: Formal reasoning and practical
techniques. In Proceedings of the 13th ACM Conference on
Computer and Communications Security (CCS) (2006),
pp. 59(cid:150)68.
[18] JOSHI, A., KING, S. T., DUNLAP, G. W., AND CHEN,
P. M. Detecting Past and Present Intrusions through
Vulnerability-Speci(cid:2)c Predicates. In Proceedings of the
Symposium on Systems and Operating Systems Principles
(SOSP) (October 2005).
[19] K2. ADMmutate documentation, 2003.
http://www.ktwo.ca/ADMmutate-0.8.4.tar.gz.
[20] KC, G. S., KEROMYTIS, A. D., AND PREVELAKIS, V.
Countering Code-Injection Attacks With Instruction-Set
Randomization. In Proceedings of the 10th ACM Conference
on Computer and Communications Security (CCS) (October
2003), pp. 272(cid:150)280.
[21] KE WANG, JANAK J. PAREKH, S. J. S. Anagram: A
Content Anomaly Detector Resistant To Mimicry Attack. In
Proceedings of the 9th International Symposium on Recent
Advances in Intrusion Detection (RAID) (2006).
[22] KIM, H.-A., AND KARP, B. Autograph: Toward
Automated, Distributed Worm Signature Detection. In
Proceedings of the USENIX Security Conference (2004).
[23] KRUGEL, C., KIRDA, E., MUTZ, D., ROBERTSON, W.,
AND VIGNA, G. Polymorphic Worm Detection Using
Structural Information of Executables. In Proceedings of the
8th International Symposium on Recent Advances in
Intrusion Detection (RAID) (September 2005), pp. 207(cid:150)226.
[24] LIANG, Z., AND SEKAR, R. Fast and Automated
Generation of Attack Signatures: A Basis for Building
Self-Protecting Servers. In Proceedings of the 12th ACM
Conference on Computer and Communications Security
(CCS) (November 2005).
[25] LOCASTO, M. E., WANG, K., KEROMYTIS, A. D., AND
STOLFO, S. J. FLIPS: Hybrid Adaptive Intrusion
Prevention. In Proceedings of the 8th International
Symposium on Recent Advances in Intrusion Detection
(RAID) (September 2005), pp. 82(cid:150)101.
[26] METASPLOIT DEVELOPEMENT TEAM. Metasploit Project,
2006. http://www.metasploit.com.
[27] NETHERCOTE, N., AND SEWARD, J. Valgrind: A Program
Supervision Framework. In Electronic Notes in Theoretical
Computer Science (2003), vol. 89.
[28] NEWSOME, J., KARP, B., AND SONG, D. Polygraph:
Automatically Generating Signatures for Polymorphic
Worms. In Proceedings of the IEEE Symposium on Security
and Privacy (May 2005).
[29] NEWSOME, J., AND SONG, D. Dynamic Taint Analysis for
Automatic Detection, Analysis, and Signature Generation of
Exploits on Commodity Software. In Proceedings of the
12th Symposium on Network and Distributed System
Security (NDSS) (February 2005).
[30] OBSCOU. Building IA32 ’Unicode-Proof’ Shellcodes.
Phrack 11, 61-11 (2003).
[31] POLYCHRONAKIS, M., ANAGNOSTAKIS, K. G., AND
MARKATOS, E. P. Network-level polymorhpic shellcode
detection using emulation. In Detection of Intrusions and
Malware and Vulnerability Assessment (DIMVA) (2006).
[32] RIX. Writing IA-32 Alphanumeric Shellcodes. Phrack 11,
57-15 (2001).
[33] RUSSELL, S., AND NORVIG, P. Arti(cid:2)cial Intelligence: A
Modern Approach. Prentice Hall, 2002.
[34] SIDIROGLOU, S., GIOVANIDIS, G., AND KEROMYTIS,
A. D. A Dynamic Mechanism for Recovering from Buffer
Over(cid:3)ow Attacks. In Proceedings of the 8th Information
Security Conference (ISC) (September 2005), pp. 1(cid:150)15.
[35] SINGH, S., ESTAN, C., VARGHESE, G., AND SAVAGE, S.
Automated Worm Fingerprinting. In Proceedings of
Symposium on Operating Systems Design and
Implementation (OSDI) (2004).
[36] SNORT DEVELOPMENT TEAM. Snort Project.
http://www.snort.org/.
[37] SPINELLIS, D. Reliable identi(cid:2)cation of bounded-length
viruses is NP-complete. IEEE Transactions on Information
Theory 49, 1 (January 2003), 280(cid:150)284.
[38] TOTH, T., AND KRUEGEL, C. Accurate Buffer Over(cid:3)ow
Detection via Abstract Payload Execution. In Proceedings of
the 5th International Symposium on Recent Advances in
Intrusion Detection (RAID) (October 2002), pp. 274(cid:150)291.
[39] WANG, H. J., GUO, C., SIMON, D. R., AND
ZUGENMAIER, A. Shield: Vulnerability-Driven Network
Filters for Preventing Known Vulnerability Exploits. In
Proceedings of the ACM SIGCOMM Conference (August
2004), pp. 193(cid:150)204.
[40] WANG, K., CRETU, G., AND STOLFO, S. J. Anomalous
Payload-based Worm Detection and Signature Generation. In
Proceedings of the 8th International Symposium on Recent
Advances in Intrusion Detection (RAID) (September 2005),
pp. 227(cid:150)246.
[41] WANG, K., AND STOLFO, S. J. Anomalous Payload-based
Network Intrusion Detection. In Proceedings of the 7th
International Symposium on Recent Advances in Intrusion
Detection (RAID) (September 2004), pp. 203(cid:150)222.
[42] WANG, X., PAN, C.-C., LIU, P., AND ZHU, S. SigFree: A
Signature-free Buffer Over(cid:3)ow Attack Blocker. In
Proceedings of the 15th USENIX Security Symposium
(2006), pp. 225(cid:150)240.
[43] XU, J., NING, P., KIL, C., ZHAI, Y., AND BOOKHOLT, C.
Automatic Diagnosis and Response to Memory Corruption
Vulnerabilities. In Proceedings of the 12th ACM Conference
on Computer and Communications Security (CCS)
(November 2005).
[44] YEGNESWARAN, V., GIFFIN, J. T., BARFORD, P., AND
JHA, S. An Architecture for Generating Semantics-Aware
Signatures. In Proceedings of the 14th USENIX Security
Symposium (2005).