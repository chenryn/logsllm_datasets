Intranet Invasion  
Through Anti-DNS Pinning 
David Byrne, CISSP, MCSE 
Security Architect 
EchoStar Satellite L.L.C. / DISH Network 
PI:EMAIL 
Introduction 
DNS pinning was introduced by web browsers to avoid DNS-spoofing attacks 
facilitated by client-side code execution. A number of factors including incomplete 
implementation, browser plug-in vulnerability, plug-in integration and proxy 
servers have allowed for successful anti-DNS pinning attacks. Using client-side 
code, such as JavaScript, an internet-based attacker can turn a browser into a 
proxy server, directing arbitrary attacks at internal servers. 
DNS Spoofing 
DNS-spoofing attacks against web browsers are primarily intended to trick a 
browser into violating the same-origin policy1. Since same-origin applies to hosts, 
but not IP addresses, an attacker could use a DNS server he controls to erase 
the distinction between two different servers. This is the basic attack sequence: 
1. Get the victim browser to visit a site (probably using XSS), on an attacker-
controlled domain. The hostname is typically randomly generated.  
2. The victim browser queries the DNS server for the attack domain and 
receives the attacker-controlled IP address  
3. The victim browser requests content from the attack server and becomes 
infected with the attack code 
4. The attack code pauses long enough for the DNS record’s TTL to expire 
5. The attack code initiates a new request to the attack server, and requeries 
DNS 
6. The attack DNS server responds with the IP address of a victim server 
7. The attack code connects to the victim server, and does something useful 
8. The results are returned to the attacker 
DNS Pinning 
To prevent DNS Spoofing attacks, browser makers introduced DNS pinning. This 
forces the browser into using a single IP address for any given host. Once the 
DNS response has been received, the browser will “pin” it in the cache as long as 
the browser is running. 
Interestingly, this could be interpreted as a violation of the HTTP 1.1 standard. It 
states that “if HTTP clients cache the results of host name lookups in order to 
achieve a performance improvement, they MUST observe the TTL information 
reported by DNS.” 2 The authors were concerned that while a DNS response was 
cached too long, the IP address could have been assigned to a new party. Any 
requests sent to the IP address would be subject to abuse by the new owner. 
Fundamentals of Anti-DNS Pinning Attacks 
Most techniques for defeating DNS pinning exploit the necessity to eventually 
expire the DNS record. One method has this sequence3: 
1. The victim browser loads attack code 
2. The victim browser closes, either by user action or by attack 
3. When the browser is opened, the attack code is loaded from disk cache 
4. The attack code initiates a request to the attack web server 
5. The attack DNS-server responds with the IP address of the victim server 
This technique is difficult to defeat by browser design because the browser must 
dump its DNS cache eventually, and because a disk-based content cache is 
considered critical for modern browsers. However, it is very difficult to properly 
execute: simply clearing the content cache is enough to stop the attack, and it is 
very difficult to get the cached content reloaded. The biggest obstacle is speed; 
every time the attacker wants to add a victim server, the process must start over. 
Considering that major web browsers do not fully implement DNS pinning, there 
is a much simpler attack4. To support DNS-based fault-tolerance, browsers will 
dump their DNS cache if the web server becomes unavailable. The attack 
sequence becomes much simpler to execute: 
1. The victim browser loads the attack code 
2. The attacker firewalls the attack web server 
3. The attack code initiates a request to the attack web server 
4. The request times out due to the firewall rule, and the victim browser 
dumps its DNS cache 
5. The browser requeries the attack DNS server and receives the IP address 
of the victim server 
A successful attack does not rely on the victim website hosting critical data. 
Secondary attacks against the web server are possible by exploiting 
vulnerabilities such as URL or header-based buffer overflows. A more likely 
scenario would be to find a website vulnerable to SQL injection, then use a 
tertiary vulnerability, such as xp_cmdshell5, to execute arbitrary code on the 
database server. Once arbitrary code can be executed, more traditional and less 
limited techniques to tunnel traffic become available.  
The primary limitation of this method is the lack of control over host headers. 
Since the browser will use the host name initially associated with the attack web 
server, only the default website on the victim web server will be accessible. 
However, there are plenty of servers on the Internet, and many more on intranets 
with default websites. Critical, high-profile sites are likely to have a dedicated 
web server, which means they are probably the default website.  
Regardless, it is important to note that HOST HEADERS ARE NOT A 
RELIABLE SECURITY CONTROL. Multiple vulnerabilities6,7,8 in the past have 
allowed headers, including “host”, to be arbitrarily set in a code-generated 
request. There is no reason to believe that everyone has installed these patches, 
or that similar vulnerabilities will not be found in the future. 
Practical Anti-DNS Attacks Using JavaScript  
Attack Components 
Anti-DNS attacks can be coupled with other JavaScript-based attack techniques 
to turn a victim web browser into a proxy server. This attack scenario has several 
components: 
Victim browser: Tricked into visiting a malicious site, probably via XSS, the 
victim browser loads code that periodically polls the attack server for new 
commands. In the BlackHat demonstration, every 1.5 seconds, JavaScript 
appends a new script tag onto the document body. The source of the tag is a 
request to the controller script, which returns either a blank document, or new 
JavaScript commands. 
Victim web server: The targeted server that the attacker wants access to; most 
likely an intranet web server protected by perimeter firewalls. 
Browser-based JavaScript proxy: The primary purpose of this code is to relay 
requests and responses between the attack server and the victim web server. 
In the demonstration, it is loaded into an iframe9 from the attack server by the 
victim browser’s polling process.  
Attacker’s browser: Interacts with the attack console to run commands on the 
victim browser; sends requests to the HTTP proxy running on the attack 
server. 
Attack server: Relays requests and commands from the attacker to the victim 
browser. There are several ways this could be implemented; in the BlackHat 
demonstration, there are five sub-components:  
Attack DNS server: The attack DNS server is the authoritative name 
server for a domain that the attacker controls. 
Attack web server: The attack web server hosts the browser-based 
attack code and the controller script. 
Controller script: A CGI script with many functions identified by a 
“command” parameter. The script is hosted on two IP addresses; one 
is used for performing the anti-DNS pinning attack with the randomly 
generated hostname; the other is used for communicating commands 
between other components. Key functions include: 
• An attack console listing all active victim browsers, and commands 
that can be sent 
• Periodically polled by the victim browser for new commands 
• Changes DNS records and firewall rules as needed to facilitate the 
actual anti-DNS pinning attack 
• Periodically polled by the JavaScript proxy for new requests to 
process 
• Receives the HTTP responses from the JavaScript proxy 
Database: Used to store commands and requests sent by the attacker, 
until they are retrieved by the victim browser. Also stores responses 
sent by the victim browser until they are retrieved by the attacker. 
HTTP proxy: Receives requests from the attacker’s browser and inserts 
them into the database. Polls the database for the response and sends 
it back to the browser. 
Data Exchange 
JavaScript proxy and victim web server 
The XMLHTTPRequest (XHR) object10,11,12 is used to initiate requests to the 
victim web server. Normally, XHR can only handle text data and will effectively 
strip off the high ASCII bit. By setting the character set to “x-user-defined”, the 
browser will retain all 8-bits of data, allowing for full binary data support13. 
JavaScript proxy to controller script 
Because of the same-origin rule, XHR is not suitable for returning data to the 
attack server. There are two methods used in the demonstration. If it is a small 
amount of text data, an image object is created with the source pointing at the 
controller script. The data is included as a parameter value in the URL’s query 
string. When the image is appended to the document, the browser will 
automatically generate the request. No image is actually returned by the 
controller script.  
For binary data, or large amounts of data that can’t fit into a URL, HTML forms 
are used. Data is stored in a text input box, the form’s action attribute is set to the 
controller script, the method is set to POST, the form’s target is set to an unused 
iframe (to keep the window from loading the action URL), and the form’s 
encoding is set to “multipart/form-data”.  