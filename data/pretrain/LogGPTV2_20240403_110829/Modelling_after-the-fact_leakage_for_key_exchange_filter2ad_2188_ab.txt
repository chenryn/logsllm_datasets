following game:
SIG
1. (sk, vk) $←− KG(1k)
2. (m∗, σ∗) ← EO(·)(vk)
3. If Vfy(vk, m∗, σ∗) =
“true” and m∗
is
not been previously
signed, then E wins.
Oracle O(m, f )
• σ $←− (sk, m)
• for i = 1, . . . , n, γi ←
fi(ski)
• If Σ|γi| ≤ λi, then ap-
pend γi to γ
• Return (σ, γ)
(E) is negligible in k.
SIG is UFCMLA if AdvUFCMLA
SIG
Katz et al.
[20] constructed an UFCMLA-secure signa-
ture scheme in bounded leakage model in which n = 1. It
contains signing and veriﬁcation operations based on NIZK
proofs, where signature can be generated with cost of 2
Exponentiations, and veriﬁed with cost of 4 Exponentiations
(with a simple NIZK proof).
2.2 CPLA2-Secure Public-Key Cryptosystems
We review the deﬁnition of CPLA2 security in the split-
states-model, where the secret key s is split into arbitrarily n
parts such that s = (s1, . . . , sn). The tuple leakage function
f = (f1, . . . , fn) is an adversary chosen eﬃciently computable
adaptive tuple leakage function, which consists of n arbitrary
leakage functions. Each leakage function fi leaks fi(si) from
each si split of the secret key individually. Following we
consider bounded leakage from each split.
Deﬁnition 2. (After-the-fact Leakage-resilient Semantic
Security (CPLA2)). Let k ∈ N be the security parameter and
λ = (λpre, λpost) be a tuple of two vectors, where λpre =
(λpre1 , . . . , λpren ) is the leakage bound vector before the chal-
lenge ciphertext is issued, and λpost = (λpost1 , . . . , λpostn )
is the leakage bound vector after the challenge ciphertext
is issued. Let PKE = (KG, Enc, Dec) be a public-key cryp-
PKE (D) as the advantage of any
tosystem, we deﬁne AdvCPLA2
probabilistic polynomial time (PPT) adversary D, winning
the following game:
1. (s, p) $←− KeyGen(1k).
2. (m0, m1) ← DLeak(f )(p) such that |m0| = |m1|, for
i = 1, . . . , n, Leak(f ) returns fi(si) if Σ|fi(si)| ≤ λprei .
2093. b $←− {0, 1}.
4. C $←− Enc(pk, mb).
5. b(cid:48) ← DLeak(f )(p, C) for i = 1 to i = n, Leak(f ) returns
fi(si) if Σ|fi(si)| ≤ λposti .
6. D wins if b(cid:48) = b.
PKE is CPLA2-secure, if AdvCPLA2
PKE (D) is negligible in k.
Halevi et al. [18] constructed a generic CPLA2-secure public-
key cryptosystem which is secure against bounded leakage in
the split-state model. It can be instantiated with the DDH-
based leakage-resilient public-key cryptosystem of Naor et
al. [30] with decryption cost of 4 Exponentiations.
Remark 1. Both Deﬁnition 1 and 2 can be easily adjusted
into their continuous leakage versions.
We use the deﬁnitions of key derivation functions proposed
by Krawczyk [24]. Secure and eﬃcient key derivation func-
tions are available in the literature, for example based on
HMAC [24].
3. THE GENERIC AFTER-THE-FACT
LEAKAGE-eCK ((·)AFL-eCK) MODEL
The generic after-the-fact leakage eCK model can be in-
stantiated in two diﬀerent ways which leads to two secu-
rity models. Namely, bounded after-the-fact leakage eCK
(BAFL-eCK) model and continuous after-the-fact leakage
eCK (CAFL-eCK) model. The BAFL-eCK model allows the
adversary to obtain a bounded amount of leakage of the
long-term secret keys of the protocol principals, as well as
reveal session keys, long-term secret keys and ephemeral keys.
Diﬀerently, the CAFL-eCK model allows the adversary to
continuously obtain arbitrarily large amount of leakage of
the long-term secret keys of the protocol principals, enforcing
the restriction that the amount of leakage per observation is
bounded.
In both instantiations of the generic (·)AFL-eCK model
the partnering deﬁnition and the adversarial powers are same.
The freshness conditions diﬀer by means of the leakage al-
lowed. So we can deﬁne the partnering and adversarial powers
in the generic (·)AFL-eCK model and deﬁne the freshness
separately in each BAFL-eCK and CAFL-eCK models.
Let U = {U1, ..., UNP } be a set of n parties. We use the
term principal to identify a party involved in a protocol
instance. Each party Ui where i ∈ [1, NP ] has a pair of
long-term public and secret-keys, (pkUi , skUi ). The term
session is used to identify a protocol instance at a principal.
Each principal may have multiple sessions and they may run
concurrently. The oracle Πs
U,V represents the sth session at
the owner principal U , with intended partner principal V .
The principal which sends the ﬁrst protocol message of a
session is the initiator of the session, and the principal which
responds to the ﬁrst protocol message is the responder of the
session.
Deﬁnition 3. (Partner sessions in generic (·)AFL-eCK
U(cid:48),V (cid:48) are said to be partners
U,V and Πs(cid:48)
model). Two oracles Πs
if all of the following hold:
U,V and Πs(cid:48)
1. both Πs
U(cid:48),V (cid:48) have computed session keys;
2. messages sent from Πs
Πs(cid:48)
U(cid:48),V (cid:48) are identical;
U,V and messages received by
3. messages sent from Πs(cid:48)
U(cid:48),V (cid:48) and messages received by
Πs
U,V are identical;
4. U(cid:48) = V and V (cid:48) = U ;
5. Exactly one of U and V is the initiator and the other
is the responder.
The protocol is said to be correct if two partner oracles
compute identical session keys.
3.1 Modelling Leakage
Considering side-channel attacks which can be mounted
against key exchange protocols, the most realistic way is to
obtain the leakage information of secret keys from the pro-
tocol computations which use secret keys for computations.
Following the premise “only computation leaks information”,
we have modeled the leakage in a place where a computation
takes place on secret keys. After issuing a Send query, the
adversary will get a protocol message which is computed
according to the normal protocol computations. So sending
an adversary-chosen adaptive leakage function with the Send
query reﬂects the premise “only computation leaks informa-
tion”.
We introduce a tuple of n adaptively chosen eﬃciently
computable leakage functions f = (f1, f2, . . . , fn); the size
n of the tuple is protocol-speciﬁc. A key exchange protocol
may use more than one cryptographic primitive and each
primitive uses a distinct secret key. Hence, we need to ad-
dress the leakage of secret keys from each of those primitives.
Otherwise, some cryptographic primitives which have been
used to construct a key exchange protocol may be stateful
cryptographic primitives. The execution of a stateful crypto-
graphic primitive is split into a number of sequential stages
and each of these stages use one part of the secret key.
3.2 Adversarial Powers
The adversary A is a probabilistic polynomial time (PPT)
algorithm that controls the whole network. A interacts with
a set of oracles which represent protocol instances. The
following query allows the adversary A to run the protocol.
• Send(U, V, s, m, f ) query: The oracle Πs
U,V , computes
the next protocol message according to the protocol
speciﬁcation and sends it to the adversary A, along
with the leakage f (skU ). A can also use this query to
activate a new protocol instance as an initiator with
blank m and f .
The following set of queries allow the adversary A to
compromise certain session speciﬁc ephemeral secrets and
long-term secrets from the protocol principals.
• SessionKeyReveal(U, V, s) query: A is given the ses-
sion key of the oracle Πs
U,V .
U,V .
• EphemeralKeyReveal(U, V, s) query: A is given the
ephemeral keys (per-session randomness) of the oracle
Πs
• Corrupt(U ) query: A is given the long-term secrets of
the principal U . This query does not reveal any session
keys or ephemeral keys to A.
210Once the oracle Πs
U,V has accepted a session key, asking
the following query the adversary A attempt to distinguish
it from a random session key. The Test query is used to for-
malize the notion of the semantic security of a key exchange
protocol.
• Test(U, s) query: When A asks the Test query, the
challenger ﬁrst chooses a random bit b $←− {0, 1} and
if b = 1 then the actual session key is returned to A,
otherwise a random string chosen from the same session
key space is returned to A. This query is only allowed
to be asked once across all sessions.
Remark 2. (Corrupt query vs Leakage queries). By issu-
ing a Corrupt query, the adversary gets the party’s entire
long-term secret key. Separately, by issuing leakage queries
(using a tuple leakage function f embedded with the Send
query) the adversary gets λ-bounded leakage information
about the long-term secret key(s). It may seem paradoxical
to consider Corrupt and Leakage queries at the same time.
But there is a good reason to consider both.
The eCK model addresses KCI attacks, because the adver-
sary is allowed to corrupt the owner of the test session before
the activation of the test session. In the generic (·)AFL-eCK
model, we allow the adversary to obtain bounded amount
of leakage from the partner of the test session, in addition
to allowing the adversary to corrupt the owner of the test
session.
Hence, the generic (·)AFL-eCK model allows the adversary
to obtain more information than eCK model. Moreover, none
of the existing security models such as BR, CK, CKHMQV,
eCK allow a Send query with a tuple leakage function f .
Hence, we can see that (·)AFL-eCK allows the adversary to
obtain leakage information which none of the existing security
models allow. Further, we emphasize that the technique of
sending a tuple leakage function f with the Send query can be
applied to any of the existing key exchange security models
to obtain their leakage versions.
3.3 The Bounded After-the-fact Leakage eCK
(BAFL-eCK) Model
In the BAFL-eCK model the total amount of leakage of
each secret key of the underlying cryptographic primitives
or each split of the secret key of the underlying stateful
cryptographic primitives are bounded by leakage parameters.
The leakage parameters are primitive-speciﬁc.
If the total leakage bound of the ith cryptographic primi-
tive (or the total leakage bound of the ith state of the stateful
cryptographic primitive) is λi and the leakage function fi
outputs leakage bits of the secret key of the ith crypto-
graphic primitive (or leakage bits of the ith split of the secret
key), then for leakage resilience of ith cryptographic primi-
tive (or the stateful cryptographic primitive), we need that
(cid:80)|fi(ski)| ≤ λi.
Deﬁnition 4. (λ-BAFL-eCK-freshness). Let λ = (λ1, . . . ,
λn) be a vector of n elements (same size as f in Send query).
An oracle Πs
U,V is said to be λ-BAFL-eCK-fresh if and only
if:
1. The oracle Πs
U,V or its partner, Πs(cid:48)
not been asked a SessionKeyReveal.
V,U (if it exists) has
2. If the partner Πs(cid:48)
nations have been asked:
V,U exists, none of the following combi-
(a) Corrupt(U ) and EphemeralKeyReveal(U, V, s).
(b) Corrupt(V ) and EphemeralKeyReveal(V, U, s(cid:48)).
3. If the partner Πs(cid:48)
V,U does not exist, none of the following
combinations have been asked:
(a) Corrupt(V ).
(b) Corrupt(U ) and EphemeralKeyReveal(U, V, s).
4. For all Send(·, U,·,·, f ) queries,(cid:80)|fi(skU i)| ≤ λi.
5. For all Send(·, V,·,·, f ) queries,(cid:80)|fi(skV i)| ≤ λi.
3.4 The Continuous After-the-fact Leakage
eCK (CAFL-eCK) Model
In the CAFL-eCK model, continuous leakage of each secret
key of the underlying cryptographic primitives or each split
of the secret key of the underlying stateful cryptographic
primitives is allowed. The only restriction is, the amount
of leakage per occurrence is bounded by leakage parameters.
The leakage parameters are primitive-speciﬁc.
If the leakage bound of the ith cryptographic primitive is
λi per leakage occurrence and the leakage function fi out-
puts leakage bits of the secret key of the ith cryptographic
primitive, then for leakage resilience of ith cryptographic
primitive we need that fi(ski) ≤ λi, per leakage occurrence.
If the leakage bound of the ith state of the stateful crypto-
graphic primitive is λi per leakage occurrence and the leakage
function fi outputs leakage bits of the ith split of the secret
key, then for leakage resilience of the stateful cryptographic
primitive we need that fi(ski) ≤ λi, per leakage occurrence.
Deﬁnition 5. (λ-CAFL-eCK-freshness). Let λ = (λ1, . . . ,
λn) be a vector of n elements (same size as f in Send query).
An oracle Πs
U,V is said to be λ-CAFL-eCK-fresh if and only
if: Conditions (1)-(3) of Deﬁnition 4 hold, and
4. For each Send(·, U,·,·, f ) query, size of the output of
5. For each Send(·, V,·,·, f ) queries, size of the output of
fi(skU i) ≤ λi.
fi(skV i) ≤ λi.
3.5 Security Game and Security Deﬁnition
We introduce the security game of the generic (·)AFL-eCK
model. If we consider λ-BAFL-eCK-freshness, the security
game is BAFL-eCK, otherwise if we consider λ-CAFL-eCK-
freshness, it is CAFL-eCK security game.
Security of a key exchange protocol in the generic (·)
AFL-eCK model is deﬁned using the following security game,
which is played by PPT adversary A against the protocol
challenger.
• Stage 1: A may ask any of Send, SessionKeyReveal,
EphemeralKeyReveal and Corrupt queries to any ora-
cle at will.
• Stage 2: A chooses a λ-(·)AFL-eCK-fresh oracle and
asks a Test query. The challenger chooses a random
bit b $←− {0, 1}, and if b = 1 then the actual session
key is returned to A, otherwise a random string chosen
from the same session key space is returned to A.
• Stage 3: A may continue asking Send, Corrupt,
SessionKeyReveal and EphemeralKeyReveal queries.
A may not ask a query that violates the λ-(·)AFL-eCK-
freshness of the test session.
211• Stage 4: At some point A outputs the bit b(cid:48) ← {0, 1}
which is its guess of the value b on the test session. A
wins if b(cid:48) = b.
SuccA is the event that the adversary A wins the above
security game.
Deﬁnition 6. ((·)AFL-eCK-security). A protocol π is said
to be (·)AFL-eCK-secure if there is no PPT algorithm A that
can win the (·)AFL-eCK security game with non-negligible
advantage. The advantage of an adversary A is deﬁned as
Adv(·)AFL-eCK
3.6 Practical Interpretation of Security of the
(A) = |2 Pr(SuccA) − 1|.
π
Generic (·)AFL-eCK Model
We review the relationship between the generic (·)AFL-eCK
model real world attack scenarios.
Active adversarial capabilities: Send queries address
the powers of an active adversary who can control the message
ﬂow over the network.
Side-channel attacks: Leakage functions are embedded
with the Send query. Thus, a wide variety of side-channel at-
tacks based on leakage of long-term secrets are addressed,
assuming that the leakage happens when computations take
place in protocol principals. BAFL-eCK model addresses
the situation where the adversary is only allowed to obtain
a bounded amount of total leakage. CAFL-eCK model ad-
dresses a stronger situation, where the adversary is allowed
to obtain continuous leakage, but the amount of leakage per
invocation is bounded.
Cold-boot attacks: Corrupt queries address situations
which reveal the long-term secret keys of protocol principals
like in cold-boot attacks.
Malware attacks: EphemeralKeyReveal queries cover
the malware attacks which steal stored ephemeral keys, given
that the long-term keys may be securely stored separately
from the ephemeral keys in places such as smart cards or
hardware security modules. Separately, Corrupt queries
address malware attacks which steal the long-term secret
keys of protocol principals.
Weak random number generators: After knowing a