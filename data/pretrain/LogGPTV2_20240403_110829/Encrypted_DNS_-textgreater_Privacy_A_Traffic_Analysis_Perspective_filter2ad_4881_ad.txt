DoH resolvers.
Table VI (center-left) shows the result of the comparison. As
expected, training and testing on the same resolver yields the
best results. As in the location setting, we observe an asym-
metric decrease in one of the directions: training on GOOGLE
dataset and attacking CLOUD results in 13% F1-score, while
attacking GOOGLE with a classiﬁer trained on CLOUD yields
similar results as training on GOOGLE itself.
To investigate this asymmetry we rank the features according
their importance for the classiﬁers. For simplicity, we only
report
the result on length unigrams, but we veriﬁed that
our conclusions hold when considering all features together.
Figure 4 shows the top-15 most
important features for a
classiﬁer trained on Google’s resolver (left) and Cloudﬂare’s
(right). The rightmost diagram of each column shows the
importance of these features on the other classiﬁer. Red tones
indicate high importance, and dark colors represent irrelevant
features. Grey indicates that the feature is not present.
We see that the most important features in Google are either
not important or missing in Cloudﬂare (the right column in
left-side heatmap is almost gray). As the missing features are
very important, they induce erroneous splits early in the trees,
and for a larger fraction of the data, causing the performance
drop. However, only one top feature in the classiﬁer trained
on Cloudﬂare is missing in Google, and the others are also
important (right column in right-side heatmap). Google does
miss important features in Cloudﬂare, but they are of little im-
portance and their effect on performance is negligible.
Inﬂuence of end user’s platform. We collect traces for the
700 top Alexa webpages on a Raspberry Pi (RPI dataset) and
an Ubuntu desktop (DESKTOP dataset), both from LOC1. We
see in Table VI (center-right) that, as expected, the classiﬁer
has good performance when the training and testing data come
from the same platform. However, it drops to almost zero when
crossing the datasets.
When taking a closer look at the TLS record sizes from both
platforms we found that TLS records in the DESKTOP dataset
are on average 7.8 bytes longer than those in RPI (see Fig-
ure 12 in Appendix D). We repeated the cross classiﬁcation af-
ter adding 8 bytes to all RPI TLS record sizes. Even though the
classiﬁers do not reach the base experiment’s performance, we
see a signiﬁcant improvement in cross-classiﬁcation F1-score
to 0.614 when training on DESKTOP and testing on RPI, and
0.535 when training on RPI and testing on DESKTOP.
Inﬂuence of DNS client. Finally, we consider different client
setups: Firefox’s trusted recursive resolver or TRR (CLOUD),
Cloudlﬂare’s DoH client with Firefox (CL-FF) and Cloud-
ﬂare’s DoH client with Chrome (LOC2). We collected these
datasets in location LOC2 using Cloudﬂare’s resolver.
Table VI (rightmost) shows that the classiﬁer performs as ex-
pected when trained and tested on the same client setup. When
the setup changes, the performance of the classiﬁer drops
dramatically, reaching zero when we use different browsers.
We hypothesize that the decrease between CL-FF and LOC2
is due to differences in the implementation of the Firefox’s
built-in and Cloudﬂare’s standalone DoH clients.
Regarding the difference when changing browser, we found
that Firefox’ traces are on average 4 times longer than
Chrome’s. We looked into the unencrypted trafﬁc to understand
this difference. We used the man-in-the-middle proxy and
the Lekensteyn’s scripts to decrypt DoH captures for Firefox
conﬁgured to use Cloudﬂare’s resolver. For Google’s resolver,
we man-in-the-middle a curl-doh client7, which also has traces
substantially shorter than Firefox. We ﬁnd that Firefox, besides
resolving domains related to the URL we visit, also issues reso-
lutions related to OSCP servers, captive portal detection, user’s
proﬁle/account, web extensions, and other Mozilla servers.
As a consequence, traces in CL-FF and CLOUD datasets are
substantially larger and contain different TLS record sizes than
any of our other datasets. We conjecture that Chrome performs
similar requests, but since traces are shorter we believe the
amount of checks seems to be smaller than Firefox’s.
4) Robustness Analysis Takeaways: Our
robustness study
shows that to obtain best results across different conﬁgurations
the adversary needs i) to train a classiﬁer for each targeted
setting, and ii) to be able to identify her victim’s conﬁguration.
Even if the adversary needs to train a classiﬁer for each
setting, this is less costly in the case of DoH ﬁngerprinting
as compared to website ﬁngerprinting due to the training
requiring signiﬁcantly less data. Kotzias et al. demonstrated
that
identifying client or resolver is possible, for instance
examining the IP (if the IP is dedicated to the resolver),
or ﬁelds in the ClientHello of the TLS connection (such
as the Server Name Indication (SNI), cipher suites ordering,
etc.) [74]. Even if TLS 1.3 encrypts some of these headers
and are thus not directly available to the adversary, we found
that characteristics of trafﬁc itself are enough to identify a
resolver. We built classiﬁers to distinguish resolver and client
based on the TLS record length. We can identify resolvers
with 95% accuracy, and we get no errors (100% accuracy)
when identifying the client.
When analyzing traces, we observed customization by the
DNS providers that are not part of the standard. For example,
7https://github.com/curl/doh
9
GoogleCloudﬂareSortedbyGoogle’s204-280358-778-863-946185-932Feature(TLSrecordsize)CloudﬂareGoogleSortedbyCloudﬂare’s-208-730181164-6621682141780.0000.0040.0080.0120.0160.020FeatureImportanceTable VI: Performance variation changes in location and infrastructure (F1-score, standard deviations less than 2%).
Location
LOC1
LOC2
LOC3
LOC1
LOC2
LOC3
0.906
0.748
0.680
0.712
0.908
0.626
0.663
0.646
0.917
Resolver
GOOGLE
CLOUD
GOOGLE
CLOUD
0.880
0.862
0.129
0.885
Platform
DESKTOP
RPI
DESKTOP
0.8802
0.0002
RPI
0.0003
0.8940
Client
CLOUD
CL-FF
LOC2
CLOUD
CL-FF
LOC2
0.885
0.109
0.001
0.349
0.892
0.062
0.000
0.069
0.908
the resolver
by mixing the DoH trafﬁc from multiple webpages. Since
it is non-trivial for an adversary to split trafﬁc belonging to
different webpages, such pollution can have an impact on the
attack effectiveness. However, at the time of writing there is no
standard way in the literature to study the impact of polluted
DNS trafﬁc. Designing a method to evaluate this effect is
beyond the scope of this work.
Pollution could also be triggered on the resolver side,
serves both DoH and non-DoH trafﬁc
if
on the same connection. The resolvers
studied in our
experiments, Cloudﬂare and Google, only host one webpage:
one.one.one.one and dns.google.com, respectively.
By analyzing the trafﬁc of a user visiting these webpages,
we observe that
the TLS ﬂows carrying the web content
and the DoH ﬂows corresponding to the domain resolution
can be trivially distinguished using trafﬁc features such as
the number of packets (HTTPS traces are longer than DoH
traces) and the packet sizes (DNS responses are much smaller
than the resources sent over HTTPS). We do not expect this
kind of pollution to be an obstacle for the adversary.
VI. DNS DEFENSES AGAINST FINGERPRINTING
In this section, we evaluate existing techniques to protect
encrypted DNS against trafﬁc analysis. Table VII summarizes
the results. We consider the following defenses:
EDNS(0) Padding. EDNS (Extension mechanisms for DNS)
is a speciﬁcation to increase the functionality of the DNS
protocol [75]. It speciﬁes how to add padding [10], both on
DNS clients and resolvers, to prevent size-correlation attacks
on encrypted DNS. The recommended padding policy is for
clients to pad DNS requests to the nearest multiple of 128
bytes, and for resolvers to pad DNS responses to the nearest
multiple of 468 bytes [76].
Cloudﬂare’s DoH client provides functionality to set EDNS(0)
padding to DNS queries, leaving the speciﬁcs of the padding
policy to the user. We modify the client source code to
follow the padding strategy above. Google’s speciﬁcation also
mentions EDNS padding. However, we could not ﬁnd any
option to activate this feature, thus we cannot analyze it.
In addition to the EDNS(0) padding, we wanted to see whether
simple user-side measures that alter the pattern of requests,
such as the use of an ad-blocker, could be effective counter-
measures. We conduct an experiment where we use Selenium
with a Chrome instance with the AdBlock Plus extension
installed. We do this with DoH requests and responses padded
to multiples of 128 bytes.
Upon responsible disclosure of this work, Cloudﬂare’s added
padding to the responses of their DoH resolver. However,
when analyzing the collected data we discover that they do
not follow the recommended policy. Instead of padding to
multiples of 468 bytes, Cloudﬂare’s resolver pads responses
to multiples of 128 bytes, as recommended for DoH clients.
Figure 5: Cumulative Distribution Function (CDF) of the per-
class mean F1-Score.
Cloudﬂare includes HTTP headers such as CF-RAY to trace a
request through its network. Such customizations can lead to
differences in the trafﬁc among different providers and have
an impact on the classiﬁcation.
Regarding users’ platform, we see little difference between
desktops, laptops, and servers in Amazon Web Services. How-
ever, we observe a difference between these and constrained
devices, such a Raspberry Pi. This different results on a drop in
accuracy when training a classiﬁer on one type and deploying
it on the other.
Finally, our longitudinal analysis reveals that, keeping up
with the changes in DNS traces can be done at low cost by
continuously collecting samples and incorporating them to the
training set.
Survivors and Easy Preys. We study whether there are
websites that are particularly good or bad at evading ﬁnger-
printing under any circumstance. We compute the mean F1-
Score across all conﬁgurations as an aggregate measure of
the attack’s overall performance. We plot the CDF of the
distribution of mean F1-scores over the websites in Figure 5.
This distribution is heavily skewed: there are up to 15% of
websites that had an F1-Score equal or lower than 0.5 and
more than 50% of the websites have a mean F1-Score equal
or lower than 0.7.
We rank sites by lowest mean F1-Score and lowest standard
deviation. At the top of this ranking, there are sites that sur-
vived the attack in all conﬁgurations. Among these survivors,
we found Google, as well as sites giving errors, that get consis-
tently misclassiﬁed as each other. We could not ﬁnd any pattern
in the website structure or the resource loads that explains why
other sites with low F1 survive. At the bottom of the ranking,
we ﬁnd sites with long domain names, with few resources and
that upon visual inspection present low variability.
Data Pollution Our experiments evaluate the scenario where
a user visits a single webpage at a time. However, in many
cases the user might visit more than one page at a time, might
have multiple tabs open, or might have applications running
in the background. These scenarios could pollute the traces
10
00.20.40.60.81MeanF1-Scoreacrossallexperiments00.150.51CDFIn order to also evaluate the recommended policy, we set up
an HTTPS proxy (mitmproxy) between the DoH client and
the Cloudﬂare resolver. The proxy intercepts responses from
Cloudﬂare’s DoH resolver, strips the existing padding, and
pads responses to the nearest multiple of 468 bytes.
As we show below, none of these padding strategies completely
stops trafﬁc analysis. To understand the limits of protection of
padding, we simulate a setting in which padding is perfect,
i.e., all records have the same length and the classiﬁer cannot
exploit
the TLS record size information. To simulate this
setting, we artiﬁcially set the length of all packets in the dataset
to 825, the maximum size observed in the dataset.
DNS over Tor. Tor is an anonymous communication network.
To protect the privacy of its users, Cloudﬂare set up a DNS
resolver that can be accessed using Tor. This enables users
to not reveal their IP to the resolver when doing lookups.
To protect users’ privacy, Tor re-routes packets through so-
called onion routers to avoid communication tracing based on
IP addresses; and it packages content into constant-size cells
to prevent size-based analysis. These countermeasures have so
far not been effective to protect web trafﬁc [16, 17, 18, 19].
We study whether they can protect DNS trafﬁc.
Results. Our ﬁrst observation is that EDNS0 padding is not as
effective as expected. Adding more padding, as recommended
in the speciﬁcation, does provide better protection, but still
yields an F1-score of 0.45, six orders of magnitude greater
than random guessing. Interestingly, usage of an ad-blocker
helps as much as increasing the padding, as shown by the
EDNS0-128-adblock experiment. As shown below, Perfect
Padding would actually deter
the attack, but at a high
communication cost.
As opposed to web trafﬁc, where website ﬁngerprinting
obtains remarkable performance [61, 18, 19], Tor is very
effective in hiding the websites originating a DNS trace.
The reason is that DNS lookups and responses are fairly
small. They ﬁt in one, at most two, Tor cells which in turn
materialize in few observed TLS record sizes. As a result, it
is hard to ﬁnd features unique to a page. Also, DNS traces
are shorter than normal web trafﬁc, and present less variance.
Thus, length-related features, which have been proven to be
very important in website ﬁngerprinting, only provide a weak
1% performance improvement.
Even though Perfect Padding and DNS over Tor offer similar
performance, when we look closely at the misclassiﬁed web-
pages, we see that their behavior is quite different. For Tor, we
observe misclassiﬁcations cluster around six different groups,
and in Perfect Padding they cluster around 12 (different)
groups (see the Appendix for an extended version of the paper
that includes confusion graphs). For both cases, we tested that
it is possible to build a classiﬁer that identiﬁes the cluster a
website belongs to with reasonable accuracy. This means that
despite the large gain in protection with respect to EDNS(0),
the effective anonymity set for a webpage is much smaller than
the total number of webpages in the dataset.
Finally, we evaluate defenses’ communication overhead. For
each countermeasure, we collect 10 samples of 50 webpages,
with and without countermeasures, and measure the difference
in total volume of data exchanged between client and resolver.
Table VII: Classiﬁcation results for countermeasures.
Method
EDNS0-128
EDNS0-128-adblock
EDNS0-468
Perfect Padding
DNS over Tor
DNS over TLS
Precision
0.710 ± 0.005
0.341 ± 0.013
0.452 ± 0.007
0.070 ± 0.003
0.035 ± 0.004
0.419 ± 0.008
Recall
0.700 ± 0.004
0.352 ± 0.011
0.448 ± 0.006
0.080 ± 0.002
0.037 ± 0.003
0.421 ± 0.007
F1-score
0.691 ± 0.004
0.325 ± 0.011
0.430 ± 0.007
0.066 ± 0.002
0.033 ± 0.003
0.395 ± 0.007
Figure 6: Total trafﬁc volume with and without defenses.
We see in Figure 6 that, as expected, EDNS0 padding (both
128 and 468) incur the least overhead, but they also offer the
least protection. DNS over Tor, in turn, offers lower overhead
than Perfect Padding.
Comparison with DNS over TLS (DoT). Finally, we compare
the protection provided by DNS over HTTPS and over TLS,
using the DOT dataset. As in DoH, Cloudﬂare’s DoT resolver
implements EDNS0 padding of DNS responses to a multiple of
128 bytes. The cloudflared DoT client, however, does not
support DoT trafﬁc. Thus, we use the Stubby client to query
Cloudﬂare’s DoT padded to a multiple of 128 bytes.
Our results (shown in the last row of Table VII) indicate
that DoT offers much better protection than DoH – about 0.3
reduction in F1-score. We plot a histogram of sizes of the