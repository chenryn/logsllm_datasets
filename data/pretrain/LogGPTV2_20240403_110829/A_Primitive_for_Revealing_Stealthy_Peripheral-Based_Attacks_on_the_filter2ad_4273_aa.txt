title:A Primitive for Revealing Stealthy Peripheral-Based Attacks on the
Computing Platform's Main Memory
author:Patrick Stewin
A Primitive for Revealing Stealthy
Peripheral-Based Attacks on the Computing
Platform’s Main Memory
Patrick Stewin
Security in Telecommunications, TU Berlin
PI:EMAIL
Abstract. Computer platform peripherals such as network and man-
agement controller can be used to attack the host computer via direct
memory access (DMA). DMA-based attacks launched from peripherals
are capable of compromising the host without exploiting vulnerabilities
present in the operating system running on the host. Therefore they
present a highly critical threat to system security and integrity. Un-
fortunately, to date no OS implements security mechanisms that can
detect DMA-based attacks. Furthermore, attacks against memory man-
agement units have been demonstrated in the past and therefore cannot
be considered trustworthy. We are the ﬁrst to present a novel method for
detecting and preventing DMA-based attacks. Our method is based on
modeling the expected memory bus activity and comparing it with the
actual activity. We implement BARM, a runtime monitor that perma-
nently monitors bus activity to expose malicious memory access carried
out by peripherals. Our evaluation reveals that BARM not only detects
and prevents DMA-based attacks but also runs without signiﬁcant over-
head due to the use of commonly available CPU features of the x86
platform.
Keywords: Direct Memory Access (DMA), DMA Malware, Intrusion
Detection, Operating System Security.
1
Introduction
Computer platform peripherals, or more precisely, dedicated hardware such as
network interface cards, video cards and management controller can be exploited
to attack the host computer platform. The dedicated hardware provides the
attacker with a separate execution environment that is not considered by state-
of-the-art anti-virus software, intrusion detection systems, and other system soft-
ware security features available on the market. Hence, dedicated hardware is
quite popular for stealthy attacks [1–6]. Such attacks have also been integrated
into exploitation frameworks [7, 8].
For example, Duﬂot et al. presented an attack based on a Network Interface
Card (NIC) to run a remote shell to take-over the host [9]. They remotely in-
ﬁltrated the NIC with the attack code by exploiting a security vulnerability.
S.J. Stolfo, A. Stavrou, and C.V. Wright (Eds.): RAID 2013, LNCS 8145, pp. 1–20, 2013.
c(cid:2) Springer-Verlag Berlin Heidelberg 2013
2
P. Stewin
Triulzi demonstrated how to use a combination of a NIC and a video card (VC)
to access the main memory [5, 6] that enables an attacker to steal cryptographic
keys and other sensitive data. Triulzi remotely exploited the ﬁrmware update
mechanism to get the attack code on the system. Stewin et al. exploited a µ-
controller that is integrated in the computer platform’s Memory Controller Hub
(MCH) to hide a keystroke logger that captures, e. g., passwords [4].
All these attacks have in common that they have to access the main mem-
ory via Direct Memory Access (DMA). By doing so, the attacks completely
circumvent hardened security mechanisms that are set up by system software.
Furthermore, the attack does not need to exploit a system software vulnerability.
Devices that are capable of executing DMA transactions are called Bus Mas-
ters. The host Central Processing Unit (CPU) that usually executes security
software to reveal attacks, does not necessarily have to be involved when other
bus masters access the main memory [4]. Due to modern bus architectures, such
as Peripheral Component Interconnect Express (PCIe), a sole central DMA con-
troller, which must be conﬁgured by the host CPU, became obsolete. Firmware
executed in the separate execution environment of the dedicated hardware can
conﬁgure the peripheral’s DMA engine to read from or to write to arbitrary
main memory locations. This is invisible to the host CPU.
In this paper we present our Bus Agent Runtime Monitor (BARM) – a mon-
itor that reveals and stops stealthy peripheral-based attacks on the computing
platform’s main memory. We developed BARM to prove the following hypothe-
sis: The host CPU is able to detect additional (malicious) accesses to the plat-
form’s main memory that originate from platform peripherals, even if the host
CPU is unable to access the isolated execution environment of the attacking pe-
ripheral. With additional access we mean access that is not intended to deliver
data to or to transfer data on behalf of the system software.
BARM is based on a primitive that is able to analyze memory bus activity.
It compares actual bus activity with bus activity that is expected by system
software such as the Operating System (OS) or the hypervisor. BARM reports
an attack based on DMA if it detects more bus activity than expected by the
system software. BARM is able to identify the malicious peripheral.
Several preventive approaches concerning DMA attacks have been proposed.
For example the Input/Output Memory Management Unit (I/OMMU) that can
be applied to restrict access to the main memory. For instance, Intel developed
an I/OMMU and calls the technology Intel Virtualization Technology for Di-
rected I/O (VT-d, [10]). The aim of VT-d is to provide hardware supported
virtualization for the popular x86 platform. Unfortunately, I/OMMUs cannot
necessarily be trusted as a countermeasure against DMA attacks for several rea-
sons. For instance, the I/OMMU (i) must be conﬁgured ﬂawlessly [11], (ii) can
be sucessfully attacked [12–15], and (iii) cannot be applied in case of memory
access policy conﬂicts [4]. Furthermore, I/OMMUs are not supported by every
chipset and system software (e. g., Windows Vista and Windows 7). Another
preventive approach is to check the peripheral ﬁrmware integrity at load time.
Unfortunately, such load time checks do not prevent runtime attacks. Repeating
Revealing Stealthy Peripheral-Based Attacks on Main Memory
3
the checks permanently to prevent runtime attacks is borne at the cost of sys-
tem performance. Note, this also does not necessarily capture transient attacks.
Furthermore, it is unclear if the host CPU has access to the whole Read-Only
Memory (ROM) that stores the peripheral’s ﬁrmware.
To the best of our knowledge we are the ﬁrst to address the challenge of detect-
ing malicious DMA with a primitive that runs on the host CPU. By monitoring
bus activity our method does not require to access the peripheral’s ROM or its
execution environment. Our primitive is implemented as part of the platform’s
system software. The basic idea is: The attacker cannot avoid causing additional
bus activity when accessing the platform’s main memory. This additional bus
activity is the Achilles’ heel of DMA-based attacks that we exploit to reveal and
stop the attack.
Our Proof-of-Concept (PoC) implementation BARM implements a monitoring
strategy that considers transient attacks. The main goal of our technique is to mon-
itor memory access of devices connected to the memory bus. Especially, host CPU
cores fetch data as well as instructions of a signiﬁcant amount of processes. This
is aggravated by the in- and output (I/O) of peripherals such as network interface
cards and harddisks. BARM demonstrates how to meet these challenges.
Contributions: In this work we present a novel method to detect and stop DMA-
based attacks. This includes a new mechanism to monitor the complete memory
bus activity via a primitive executed on the host CPU. Our method is based
on modeling the expected memory bus activity. We further present a reliable
technique to measure the actual bus activity. We reveal malicious memory ac-
cess by comparing the modeled expected activity with the measured activity.
Any additional DMA activity can be assumed to be an attack. In addition, we
can identify the oﬀending peripheral. We implemented and evaluated our inno-
vative detection model in a PoC that we call BARM. BARM is eﬃcient and
eﬀective enough that it can not only detect and stop DMA-based attacks before
the attacker caused any damage. It also considers transient attacks with negli-
gible performance overhead due to commonly available CPU features of the x86
platform.
Finally, our solution against DMA attacks does not require hardware or
ﬁrmware modiﬁcations.
Paper Structure: In Section 2 we present our trust and adversary model. In
Section 3 we explain our general model to detect peripheral-based attacks on the
platform’s main memory. Section 4 covers our PoC implementation of BARM
based on the popular Intel x86 platform with a PCIe bus system. We evaluate
our implementation in Section 5 and discuss related work in Section 6. The last
section presents our conclusions as well as future work.
2 Trust and Adversary Model
In our scenario we assume that an attacker aims to attack a computer platform in
a stealthy manner. The attacker uses the stealth potential of a platform periph-
4
P. Stewin
eral or of dedicated hardware that is connected to the memory bus, respectively.
Furthermore, we assume the attacker is able to attack the target platform dur-
ing runtime. This can be done remotely using a ﬁrmware exploit or a remote
ﬁrmware update mechanism as demonstrated in [16] or in [6], respectively.
The attacker aims to read data from or write data to the main memory via
DMA. Software (system software as well as application software) executed on the
target platform, i. e., on the host CPU, is in a trusted state before the platform
is under attack. That means, that BARM has been started in a trustworthy
manner and hence, BARM will deliver authentic reports. These reports will be
used to apply a certain defense policy in the case an attack has been detected.
We do not count on preventive approaches such as I/OMMUs.
3 General Detection Model
Two core points are the basis for our detection model. First, the memory bus
is a shared resource (see Figure 1). Second, the system software, i. e., the OS,
records all I/O activity in the form of I/O statistics.
Bus masters (CPU and peripherals) are connected to the main memory via
the memory bus. That bus provides exactly one interface to the main memory
that must be shared by all bus masters, see Figure 1. We see this shared resource
as a kind of hook or as the Achilles’ heel of the attacker. The fact of the shared
resource can be exploited by the host CPU to determine if another bus master is
using the bus. For example, if the host CPU cannot access the bus for a certain
amount of time, the OS can conclude that another bus master is using the bus.
To be able to detect that the bus is used by another party is insuﬃcient. The
host CPU needs to assign the detected bus activity to OS I/O. OSes record I/O
activity in the form of I/O statistics. Consider the following case: We assume
that the ethernet controller is the only active bus master. When the ethernet
controller forwards a network packet of size S = s bytes to the OS, it copies the
packet via DMA into the main memory and interrupts the OS. The OS handles
the interrupt and updates its I/O statistics. The OS increases the number of
received network packets by 1 packet and the number of received network packet
bytes by s bytes. Copying a network packet of s bytes always results in the same
by the OS using its I/O statistics and can afterwards be compared with the
amount of expected bus activity Ae. This expected value Ae can be determined
actual measured bus activity value Am that is determined when the OS handles
the interrupt. If Am = Ae no additional bus activity value Aa = Am −Ae could
be measured. If Aa > 0, additional bus activity has been measured. Hence, a
DMA attack is detected due to additional memory access.
How exactly the host CPU/OS determines malicious bus activity is depen-
dent of the implementation. We investigated multiple directions based on timing
measurements and bus transactions monitoring. Experiments with the timing
measurements of bus transactions are described in [11], for example. Timing
measurements of memory transactions are given in [17]. Our experiments re-
vealed that counting bus transaction events is the most reliable method. We
present the implementation of that novel method in Section 4.
Revealing Stealthy Peripheral-Based Attacks on Main Memory
5
(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)
(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)
(cid:28)(cid:17)(cid:26)(cid:19)(cid:15)(cid:8)(cid:1)(cid:15)(cid:16)(cid:9)(cid:18)(cid:15)(cid:24)(cid:24)(cid:19)(cid:18)
(cid:28)(cid:17)(cid:26)(cid:19)(cid:15)(cid:8)(cid:1)(cid:15)(cid:16)(cid:9)(cid:18)(cid:15)(cid:24)(cid:24)(cid:19)(cid:18)
(cid:22)(cid:9)(cid:23)(cid:19)(cid:18)(cid:16)(cid:19)(cid:9)(cid:8)(cid:1)(cid:15)(cid:16)(cid:9)(cid:18)(cid:15)(cid:24)(cid:24)(cid:19)(cid:18)
(cid:22)(cid:9)(cid:23)(cid:19)(cid:18)(cid:16)(cid:19)(cid:9)(cid:8)(cid:1)(cid:15)(cid:16)(cid:9)(cid:18)(cid:15)(cid:24)(cid:24)(cid:19)(cid:18)
(cid:25)(cid:10)(cid:18)(cid:26)(cid:26)(cid:17)(cid:11)(cid:27)(cid:8)(cid:1)(cid:15)(cid:16)(cid:9)(cid:18)(cid:15)(cid:24)(cid:24)(cid:19)(cid:18)
(cid:25)(cid:10)(cid:18)(cid:26)(cid:26)(cid:17)(cid:11)(cid:27)(cid:8)(cid:1)(cid:15)(cid:16)(cid:9)(cid:18)(cid:15)(cid:24)(cid:24)(cid:19)(cid:18)
(cid:1)(cid:2)(cid:3)(cid:1)(cid:2)(cid:3)
(cid:4)(cid:5)
(cid:6)(cid:7)(cid:4)(cid:8)(cid:5)(cid:9)(cid:10)(cid:9)(cid:11)
(cid:1)(cid:1)
(cid:1)(cid:2)(cid:1)(cid:1)(cid:1)
(cid:1)(cid:2)(cid:1)
(cid:1)(cid:3)(cid:1)(cid:1)(cid:3)(cid:1)(cid:1)(cid:1)
(cid:1)(cid:1)
(cid:2)(cid:2)
(cid:3)(cid:3)
(cid:12)(cid:13)(cid:11)(cid:8)(cid:14)(cid:15)(cid:16)(cid:17)(cid:9)(cid:15)(cid:18)
(cid:14)(cid:10)(cid:17)(cid:16)(cid:8)(cid:14)(cid:19)(cid:20)(cid:15)(cid:18)(cid:21)
(cid:14)(cid:10)(cid:17)(cid:16)(cid:8)(cid:14)(cid:19)(cid:20)(cid:15)(cid:18)(cid:21)
(cid:1)(cid:1)(cid:2)(cid:1)(cid:2)(cid:1)(cid:2)(cid:1)(cid:2)(cid:2)(cid:2)(cid:1)(cid:2)(cid:2)(cid:1)(cid:1)(cid:2)(cid:2)(cid:1)(cid:2)(cid:2)(cid:2)(cid:1)(cid:2)(cid:1)(cid:2)
(cid:1)(cid:2)(cid:2)(cid:1)(cid:2)(cid:1)(cid:2)(cid:1)(cid:2)(cid:1)(cid:2)(cid:1)(cid:1)(cid:2)(cid:1)(cid:2)(cid:2)(cid:1)(cid:2)(cid:1)(cid:2)(cid:1)(cid:2)(cid:2)(cid:1)(cid:2)
(cid:2)(cid:2)(cid:1)(cid:2)(cid:1)(cid:2)(cid:2)(cid:1)(cid:2)(cid:1)(cid:2)(cid:1)(cid:2)(cid:1)(cid:2)(cid:2)(cid:1)(cid:2)(cid:1)(cid:2)(cid:1)(cid:2)(cid:1)(cid:2)(cid:1)(cid:2)
(cid:1)(cid:2)(cid:1)(cid:1)(cid:2)(cid:1)(cid:2)(cid:1)(cid:2)(cid:1)(cid:2)(cid:1)(cid:2)(cid:1)(cid:2)(cid:1)(cid:2)(cid:1)(cid:2)(cid:2)(cid:1)(cid:2)(cid:1)(cid:2)(cid:1)(cid:2)
(cid:2)(cid:1)(cid:2)(cid:1)(cid:2)(cid:2)(cid:1)(cid:2)(cid:1)(cid:2)(cid:1)(cid:2)(cid:1)(cid:2)(cid:1)(cid:2)(cid:2)(cid:1)(cid:2)(cid:1)(cid:2)(cid:1)(cid:2)(cid:2)(cid:1)(cid:2)
(cid:2)(cid:1)(cid:2)(cid:2)(cid:1)(cid:2)(cid:1)(cid:2)(cid:2)(cid:1)(cid:2)(cid:1)(cid:2)(cid:1)(cid:2)(cid:1)(cid:1)(cid:2)(cid:1)(cid:1)(cid:2)(cid:1)(cid:2)(cid:1)(cid:1)(cid:1)
(cid:1)(cid:2)(cid:1)(cid:2)(cid:1)(cid:2)(cid:2)(cid:1)(cid:1)(cid:2)(cid:1)(cid:2)(cid:1)(cid:2)(cid:2)(cid:1)(cid:1)(cid:2)(cid:1)(cid:2)(cid:2)(cid:1)(cid:2)(cid:1)(cid:2)(cid:1)
Fig. 1. Bus Master Topology Exploited to Reveal Malicious Memory Access:
If the diﬀerence of the measured bus activity value Am and the expected bus activity
value Ae is greater than 0, additional bus activity Aa is measured and a DMA attack
is revealed.
4 An Implementation of the Detection Model
In this section we describe our implementation of the general detection model
based on bus transaction event counting. The purpose of our PoC implemen-
tion BARM is to prove our hypothesis that we made in Section 1. We imple-
mented BARM for the Intel x86 platform. We developed BARM as a Linux
kernel module. To understand our implementation of BARM we need to provide
some background information in the following subsection.
4.1 Background
In this section we explain the bus system of our implementation platform as well
as the hardware features we use to implement BARM.
Bus Master Transactions: A computer platform has several bus systems,
such as PCIe and Front-Side Bus (FSB). Hence, a platform has diﬀerent kinds
of bus masters depending of the bus systems, see Figure 2.
A bus master is a device that is able to initiate data transfers (e. g., from an
I/O device to the main memory) via a bus, see [20, Section 7.3]. A device (CPU,
I/O controller, etc.) that is connected to a bus is not per se a bus master. The
device is merely a bus agent, see [23, p.13]. If the bus must be arbitrated a bus
master can send a bus ownership request to the arbiter [24, Chapter 5]. When
the arbiter grants bus ownership to the bus master, this master can initiate bus
transactions as long as the bus ownership is granted. In Section 4.2 we describe
the bus masters we considered for our BARM implementation.
Note, this procedure is not relevant for PCIe devices due to its point-to-point
property. The PCIe devices do not have to be arbitrated and therefore, bus
ownership is not required. The bus is not shared as it was formerly the case
with the PCIe predecessor PCI. Nonetheless, the bus master capability of PCIe
devices is controlled by a certain bit, that is called Bus Master Enable (BME).
The BME bit is part of a standard conﬁguration register of the peripheral.
The MCH (out of scope of PCIe) still arbitrates requests from several bus
interfaces to the main memory [21, p.27], see Figure 2. The host CPU is also
a bus master. It uses the Front-Side Bus (FSB) to fetch data and instructions
6
P. Stewin
(cid:1)(cid:2)(cid:3)(cid:4)(cid:5)(cid:6)(cid:7)(cid:8)(cid:9)(cid:10)(cid:11)(cid:12)
(cid:8)(cid:25)(cid:33)(cid:8)(cid:25)(cid:33)
(cid:1)(cid:17)(cid:6)(cid:5)(cid:9)(cid:10)(cid:18)(cid:19)(cid:20)(cid:21)(cid:3)(cid:1)(cid:22)(cid:13)(cid:23)(cid:1)(cid:15)(cid:17)(cid:19)(cid:22)(cid:24)(cid:1)(cid:1)(cid:25)(cid:6)(cid:5)(cid:26)(cid:3)(cid:23)(cid:23)(cid:5)(cid:6)(cid:1)(cid:22)(cid:13)(cid:23)(cid:16)
(cid:25)(cid:6)(cid:5)(cid:26)(cid:3)(cid:23)(cid:23)(cid:5)(cid:6)(cid:1)(cid:27)(cid:1)(cid:12)(cid:5)(cid:23)(cid:10)(cid:1)(cid:28)(cid:9)(cid:10)(cid:3)(cid:6)(cid:29)(cid:30)(cid:26)(cid:3)