                    if (!pSvcBuffer)
                    {
                        LogRel(("OpenGL: svcCall(WRITE_READ_BUFFERED): Invalid buffer (%d)\n", iBuffer));
                        rc = VERR_INVALID_PARAMETER;
                        break;
                    }
                    uint8_t *pBuffer     = (uint8_t *)pSvcBuffer->pData;
                    uint32_t cbBuffer    = pSvcBuffer->uiSize;
                    /* Execute the function. */
                    rc = crVBoxServerClientWrite(u32ClientID, pBuffer, cbBuffer);
通过`iBuffer`索引获取到了`pBuffer`以后，传入`crVBoxServerClientWrite`函数进行处理，我们进入该函数。
    int32_t crVBoxServerClientWrite(uint32_t u32ClientID, uint8_t *pBuffer, uint32_t cbBuffer)
    {
        CRClient *pClient=NULL;
        int32_t rc = crVBoxServerClientGet(u32ClientID, &pClient);
该函数首先调用`crVBoxServerClientGet`获取服务句柄
    int32_t crVBoxServerClientGet(uint32_t u32ClientID, CRClient **ppClient)
    {
        CRClient *pClient = NULL;
        pClient = crVBoxServerClientById(u32ClientID);
        if (!pClient)
        {
            WARN(("client not found!"));
            *ppClient = NULL;
            return VERR_INVALID_PARAMETER;
        }
        if (!pClient->conn->vMajor)
        {
            WARN(("no major version specified for client!"));
            *ppClient = NULL;
            return VERR_NOT_SUPPORTED;
        }
在`crVBoxServerClientGet`函数中，会判断`pClient->conn->vMajor`，如果没有设置则报错。该字段是在`svcCall`中的`SHCRGL_GUEST_FN_SET_VERSION`命令中被设置的
            case SHCRGL_GUEST_FN_SET_VERSION:
            {
    ...........
                    /* Fetch parameters. */
                    uint32_t vMajor    = paParms[0].u.uint32;
                    uint32_t vMinor    = paParms[1].u.uint32;
                    /* Execute the function. */
                    rc = crVBoxServerClientSetVersion(u32ClientID, vMajor, vMinor);
因此，在我们使用`SHCRGL_GUEST_FN_WRITE_BUFFER`之前，应该先使用`SHCRGL_GUEST_FN_SET_VERSION`设置一下版本
    int set_version(int client) {
       int rc = hgcm_call(client,SHCRGL_GUEST_FN_SET_VERSION,"%u%u",CR_PROTOCOL_VERSION_MAJOR,CR_PROTOCOL_VERSION_MINOR);
       if (rc) {
          die("[-] set_version error");
       }
       return 0;
    }
当`int32_t rc = crVBoxServerClientGet(u32ClientID,
&pClient);`执行完获取到服务句柄以后，就继续调用`crVBoxServerInternalClientWriteRead`函数
        pClient->conn->pBuffer = pBuffer;
        pClient->conn->cbBuffer = cbBuffer;
    #ifdef VBOX_WITH_CRHGSMI
        CRVBOXHGSMI_CMDDATA_ASSERT_CLEANED(&pClient->conn->CmdData);
    #endif
        crVBoxServerInternalClientWriteRead(pClient);
        return VINF_SUCCESS;
    }
crVBoxServerInternalClientWriteRead函数如下
    static void crVBoxServerInternalClientWriteRead(CRClient *pClient)
    {
    ............................
        crNetRecv();
        CRASSERT(pClient->conn->pBuffer==NULL && pClient->conn->cbBuffer==0);
        CRVBOXHGSMI_CMDDATA_ASSERT_CLEANED(&pClient->conn->CmdData);
        crServerServiceClients();
        crStateResetCurrentPointers(&cr_server.current);
    ..............
先是调用了`crNetRecv`函数，经过调试，调用链如下
    pwndbg> k
    #0  0x00007f1b3db9ff05 in _crVBoxHGCMReceiveMessage (conn=0x7f1b1cf408c0) at /home/sea/Desktop/VirtualBox-6.0.0/src/VBox/GuestHost/OpenGL/util/vboxhgcm.c:1091
    #1  0x00007f1b3dba13cc in _crVBoxHGCMPerformReceiveMessage (conn=0x7f1b1cf408c0) at /home/sea/Desktop/VirtualBox-6.0.0/src/VBox/GuestHost/OpenGL/util/vboxhgcm.c:2425
    #2  0x00007f1b3dba141c in crVBoxHGCMRecv () at /home/sea/Desktop/VirtualBox-6.0.0/src/VBox/GuestHost/OpenGL/util/vboxhgcm.c:2482
    #3  0x00007f1b3db80238 in crNetRecv () at /home/sea/Desktop/VirtualBox-6.0.0/src/VBox/GuestHost/OpenGL/util/net.c:1307
    #4  0x00007f1b3ddea7b4 in crVBoxServerInternalClientWriteRead (pClient=0x7f1b1d04da10) at /home/sea/Desktop/VirtualBox-6.0.0/src/VBox/HostServices/SharedOpenGL/crserverlib/server_main.c:754
    #5  0x00007f1b3ddeacb1 in crVBoxServerClientWrite (u32ClientID=35, pBuffer=0x7f1b1d04e3f0 "hello", cbBuffer=4096) at /home/sea/Desktop/VirtualBox-6.0.0/src/VBox/HostServices/SharedOpenGL/crserverlib/server_main.c:792
    #6  0x00007f1b3ddce7c7 in svcCall (callHandle=0x7f1b34c93f50, u32ClientID=35, pvClient=0x7f1b3000a7e0, u32Function=14, cParms=3, paParms=0x7f1b5452d560, tsArrival=29122886987445) at /home/sea/Desktop/VirtualBox-6.0.0/src/VBox/HostServices/SharedOpenGL/crserver/crservice.cpp:740
    #7  0x00007f1b6e30325a in hgcmServiceThread (pThread=0x7f1b30003c70, pvUser=0x7f1b30003b10) at /home/sea/Desktop/VirtualBox-6.0.0/src/VBox/Main/src-client/HGCM.cpp:708
    #8  0x00007f1b6e300090 in hgcmWorkerThreadFunc (hThreadSelf=0x7f1b30004050, pvUser=0x7f1b30003c70) at /home/sea/Desktop/VirtualBox-6.0.0/src/VBox/Main/src-client/HGCMThread.cpp:200
    #9  0x00007f1b8ae47aff in rtThreadMain (pThread=0x7f1b30004050, NativeThread=139754983003904, pszThreadName=0x7f1b30004930 "ShCrOpenGL") at /home/sea/Desktop/VirtualBox-6.0.0/src/VBox/Runtime/common/misc/thread.cpp:719
    #10 0x00007f1b8af8e098 in rtThreadNativeMain (pvArgs=0x7f1b30004050) at /home/sea/Desktop/VirtualBox-6.0.0/src/VBox/Runtime/r3/posix/thread-posix.cpp:327
    #11 0x00007f1b859da6ba in start_thread (arg=0x7f1b3e1e1700) at pthread_create.c:333
    #12 0x00007f1b87fd84dd in clone () at ../sysdeps/unix/sysv/linux/x86_64/clone.S:109
可以知道该函数位于`src/VBox/GuestHost/OpenGL/util/net.c`源文件，虽然这里位于`Guset`中的客户端源码，但其实是同样编译了一份给Host用
    pwndbg> p crNetRecv
    $2 = {int (void)} 0x7f1b3db80208 
    pwndbg> vmmap 0x7f1b3db80208
    LEGEND: STACK | HEAP | CODE | DATA | RWX | RODATA
        0x7f1b3db6d000     0x7f1b3dbb3000 r-xp    46000 0      /home/sea/Desktop/VirtualBox-6.0.0/out/linux.amd64/debug/bin/VBoxOGLhostcrutil.so +0x13208
    pwndbg>
可以知道其在`VBoxOGLhostcrutil.so`库中，从调用链可以知道最终调用到`_crVBoxHGCMReceiveMessage`这里会出现问题
    static void _crVBoxHGCMReceiveMessage(CRConnection *conn)
    {
        uint32_t len;
        CRVBOXHGCMBUFFER *hgcm_buffer;
        CRMessage *msg;
        CRMessageType cached_type;
        len = conn->cbBuffer;
        CRASSERT(len > 0);
        CRASSERT(conn->pBuffer);
    #ifndef IN_GUEST
        /* Expect only CR_MESSAGE_OPCODES from the guest. */
        AssertPtrReturnVoid(conn->pBuffer);
        if (   conn->cbBuffer >= sizeof(CRMessageHeader)
            && ((CRMessageHeader*) (conn->pBuffer))->type == CR_MESSAGE_OPCODES)
        {
            /* Looks good. */
        }
        else
        {
            AssertFailed();
            /** @todo Find out if this is the expected cleanup. */
            conn->cbBuffer = 0;
            conn->pBuffer  = NULL;
            return;
        }
    #endif
这里会将我们传入的数据转换为`CRMessageHeader`结构体，然后判断`type`是否为`CR_MESSAGE_OPCODES`，如果不是，则报错
    typedef struct {
        CRMessageType          type;
        unsigned int           conn_id;
    } CRMessageHeader;
由此可见，我们的数据必须符合要求，当检查通过以后
    #ifndef IN_GUEST
        if (conn->allow_redir_ptr)
        {
    #endif
            CRASSERT(conn->buffer_size >= sizeof(CRMessageRedirPtr));
            hgcm_buffer = (CRVBOXHGCMBUFFER *) _crVBoxHGCMAlloc( conn ) - 1;
            hgcm_buffer->len = sizeof(CRMessageRedirPtr);
            msg = (CRMessage *) (hgcm_buffer + 1);
            msg->header.type = CR_MESSAGE_REDIR_PTR;
            msg->redirptr.pMessage = (CRMessageHeader*) (conn->pBuffer);
            msg->header.conn_id = msg->redirptr.pMessage->conn_id;
    #if defined(VBOX_WITH_CRHGSMI) && !defined(IN_GUEST)
            msg->redirptr.CmdData = conn->CmdData;
            CRVBOXHGSMI_CMDDATA_ASSERT_CONSISTENT(&msg->redirptr.CmdData);
            CRVBOXHGSMI_CMDDATA_CLEANUP(&conn->CmdData);
    #endif
            cached_type = msg->redirptr.pMessage->type;
            conn->cbBuffer = 0;
            conn->pBuffer  = NULL;
    #ifndef IN_GUEST
如果`conn->allow_redir_ptr`被设置，会创建一个新的Msg，并设置type为`CR_MESSAGE_REDIR_PTR`，最后使用`crNetDispatchMessage(
g_crvboxhgcm.recv_list, conn, msg, len
);`将消息挂到消息队列上，由此可见这是一种异步多线程的处理方式。最初调用`crNetRecv`就是为了将请求放到队列中慢慢处理。  
回到`crVBoxServerInternalClientWriteRead`函数
        crNetRecv();
        CRASSERT(pClient->conn->pBuffer==NULL && pClient->conn->cbBuffer==0);
        CRVBOXHGSMI_CMDDATA_ASSERT_CLEANED(&pClient->conn->CmdData);
        crServerServiceClients();
        crStateResetCurrentPointers(&cr_server.current);
接下来该调用`crServerServiceClients`函数
    void
    crServerServiceClients(void)
    {
        RunQueue *q;
        q = getNextClient(GL_FALSE); /* don't block */
        while (q) 
        {
            ClientStatus stat = crServerServiceClient(q);
            if (stat == CLIENT_NEXT && cr_server.run_queue->next) {
                /* advance to next client */
                cr_server.run_queue = cr_server.run_queue->next;
            }
            q = getNextClient(GL_FALSE);
        }
    }
以上可以看出，他是依次取出请求对象，然后使用函数`crServerServiceClient`进行处理
    /**
     * Process incoming/pending message for the given client (queue entry).
     * \return CLIENT_GONE if this client has gone away/exited,
     *         CLIENT_NEXT if we can advance to the next client
     *         CLIENT_MORE if we have to process more messages for this client. 
     */
    static ClientStatus
    crServerServiceClient(const RunQueue *qEntry)
    {
        CRMessage *msg;
        CRConnection *conn;
        /* set current client pointer */
        cr_server.curClient = qEntry->client;
        conn = cr_server.run_queue->client->conn;
        /* service current client as long as we can */
        while (conn && conn->type != CR_NO_CONNECTION &&
                     crNetNumMessages(conn) > 0) {
            unsigned int len;
            /*
            crDebug("%d messages on %p",
                            crNetNumMessages(conn), (void *) conn);
            */
            /* Don't use GetMessage, because we want to do our own crNetRecv() calls
             * here ourself.
             * Note that crNetPeekMessage() DOES remove the message from the queue
             * if there is one.
             */
            len = crNetPeekMessage( conn, &msg );
    ..........................
            /* Commands get dispatched here */
            crServerDispatchMessage( conn, msg, len );
该函数调用`crServerDispatchMessage`函数进行opcode的处理
    /**
     * This function takes the given message (which should be a buffer of
     * rendering commands) and executes it.
     */
    static void
    crServerDispatchMessage(CRConnection *conn, CRMessage *msg, int cbMsg)
    {
        const CRMessageOpcodes *msg_opcodes;
        int opcodeBytes;
        const char *data_ptr, *data_ptr_end;
    ...............
        if (msg->header.type == CR_MESSAGE_REDIR_PTR)
        {
    #ifdef VBOX_WITH_CRHGSMI
            pCmdData = &msg->redirptr.CmdData;
    #endif
            msg = (CRMessage *) msg->redirptr.pMessage;
        }
        CRASSERT(msg->header.type == CR_MESSAGE_OPCODES);
        msg_opcodes = (const CRMessageOpcodes *) msg;
        opcodeBytes = (msg_opcodes->numOpcodes + 3) & ~0x03;
    #ifdef VBOXCR_LOGFPS
        CRASSERT(cr_server.curClient && cr_server.curClient->conn && cr_server.curClient->conn->id == msg->header.conn_id);
        cr_server.curClient->conn->opcodes_count += msg_opcodes->numOpcodes;
    #endif
        data_ptr = (const char *) msg_opcodes + sizeof(CRMessageOpcodes) + opcodeBytes;
        data_ptr_end = (const char *)msg_opcodes + cbMsg; // Pointer to the first byte after message data
        enmType = crUnpackGetBufferType(data_ptr - 1,             /* first command's opcode */
                    msg_opcodes->numOpcodes  /* how many opcodes */);