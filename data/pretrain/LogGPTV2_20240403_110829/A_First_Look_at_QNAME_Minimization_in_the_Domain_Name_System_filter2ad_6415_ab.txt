We also found some public resolvers, such as Google Public DNS, that in
some cases appear to support qmin according to our test, but in fact do not.
This is likely caused by a qmin-enabled forwarding resolver, which forwards to, in
Google’s case, 8.8.8.8. Additionally, the non-qmin resolver successively caches
the authoritative for the second-last label and will appear to support qmin for
the TTL of the delegation (10 s in our test). We have developed an improved test
without these issues in the course of this research, but this corrected test did
not yet exist during scheduling of the RIPE Atlas measurement in April 2017.
The improved test, “a.b.random-element.domain.example. TXT”, uses a ran-
dom pattern as the third-last label which is uniquely chosen for each query, pre-
152
W. B. de Vries et al.
venting other measurement queries to ﬁnd a cached delegation for the second-last
label. This improved test is used in measuring the adoption by open resolvers in
Subsect. 3.3, removing false positives from that measurement.
We argue that this ﬂaw had little impact on our results, as (i), RIPE Atlas
measurements are spread out over an hour, whereas our test record has a small
TTL, reducing this risk and (ii) the overall trend over time is still indicative.
The ASNs seen at the authoritative were further used to classify resolvers
in three categories: (1) Internal resolvers have the same ASN for the probe
and the observed resolver IP, (2) External resolvers for which the ASN of the
resolver IP conﬁgured on the probe matches the ASN for the IP observed on
the authoritative, but diﬀers from the ASN in which the probe resides, (3)
Forwarding resolvers, for which the ASN seen on the authoritative diﬀers from
both the ASN associated with the resolver IP conﬁgured on the probe and the
ASN the probe resides in.
Fig. 2. Internal, Forwarding and External resolvers supporting qmin
Figure 2 shows that both External and Forwarding probe/resolver pairs sup-
porting qmin are on the rise, which is mainly due to adoption of the Cloudﬂare
resolver in April 2018. We can also see that qmin support is steadily growing
with Internal resolvers, which do not include the larger public resolvers.
Looking more closely at the Internal resolvers we have identiﬁed, we see
that several ISPs started supporting qmin over the past 1.5 years. Most notably
“Versatel Deutschland GmbH” started supporting qmin on November 9th, 2017;
“Init Seven AG” on August 2nd, 2017; “OVH Systems” on February 1st, 2018;
and “M-Net Telekommunikations GmbH, Germany” on May 1st, 2018. Note that
these do not necessarily cause a visible change in Fig. 2.
3.2 Fingerprinting Resolver Algorithms
As described in Sect. 2, the RFC [7] provides a reference algorithm for qmin.
This is an aggressive algorithm in the sense that it maximizes potential privacy
gains at the cost of performance. It iteratively increases the name length by one
label, querying for the NS type, until it reaches the full name. Then, it switches
to the original query type, thus also this type from all but the ﬁnal name server.
A First Look at QNAME Minimization in the Domain Name System
153
While this algorithm is good for privacy, it can signiﬁcantly impact perfor-
mance, security, and result quality (see Sect. 5). Since the reference algorithm is
merely a suggestion, resolver implementors are free to write their own algorithm.
Using RIPE Atlas measurements, we explore qmin algorithms implemented
in practice. To measure this, we performed a one-oﬀ DNS measurement [4] from
all RIPE Atlas probes able to resolve A records correctly (9,410 probes). We con-
trol the authoritative name server for the queried name, permitting us to identify
query behavior. The queried name consists of 24 labels, including random val-
ues and the probe ID to permit mapping inbound DNS queries to originating
probes. We see inbound queries from 8,894 unique probes (out of 9,410) from
8,179 unique resolvers. Most probes have at least two resolvers conﬁgured, many
overlapping with those of other probes, resulting in 20,716 total inbound queries.
Assigning Signatures: To group resolver behavior, we map the incoming
query behavior observed at our authoritative name server to signatures, con-
taining length, order, and type of inbound queries. Our test domain is at the
second label depth, so we observe queries starting from the third label depth.
For example, an algorithm asking for NS at the 3rd label, then for NS at the 4th
label, and then for A at the ﬁnal, 24th, label, will be mapped to the signature
3NS-4NS-24A.
Signatures of BIND, Knot and Unbound: To have a basis for compar-
ison, we run our domain through each of these three resolvers, which are known
to implement qmin, and determine each of their qmin signatures. BIND and
Unbound also support an additional strict mode, however, this has no eﬀect on
the signature and is related to how NXDOMAIN responses are handled. The result-
ing signatures, and the reference algorithm signature, are shown in Table 2.
Table 2. Top 6 signatures seen at Authoritative Resolvers, mapped to resolver imple-
mentations. Reference implementation not observed.
Type
Signature
Implementation
Count
1
2
3
3
3
4
24A
3NS-24A
3A-4A-5A-8A-11A-14A-17A-21A-24A
3A-4A-5A-6A-9A-12A-15A-18A-22A-24A
3A-4A-7A-10A-13A-16A-20A-24A
3NS-4NS-5NS-24A
Knot 3.0.0
Unbound 1.8.0
BIND 9.13.3
3NS-4NS-5NS-6NS-7NS-...-24NS-24A
Reference
13,892
784
239
193
16
11
0
Signatures in the Wild: We identify four types of signatures, with some
types having multiple variations, see Table 2. The ﬁrst, most common type (#1 )
applies no qmin. These resolvers directly query the full length DNS name. The
second type (#2 ) is a minimalistic qmin approach. After a no-delegation check
below the base domain, the full query name is sent. This is used by the Knot
154
W. B. de Vries et al.
resolver, and, for example, by Cloudﬂare’s public DNS resolver. The third type,
with variations (#3 ), is closer to the reference algorithm, but displays various
ways of skipping labels, as well as always using the A query type instead of the NS
type as suggested by the reference algorithm. Unbound is known to have a similar
implementation [16], conﬁrmed in our experiments. The ﬁnal signature, (#4 )
uses the NS query type, and jumps to querying for the full name after not ﬁnding
a zone cut for three labels. This is consistent with the BIND implementation.
Besides the speciﬁc signatures seen in Table 2, there are many variations of
type #3. This indicates that not only do diﬀerent resolvers implement diﬀerent
algorithms, but they also appear to be conﬁgurable or change over time (e.g. a
new version changes the behavior). In total we see 20 diﬀerent signatures, many
of which only from one speciﬁc resolver. Interestingly, we did not observe the
reference algorithm from any resolver.
3.3 Adoption by Open Resolvers
Aside from resolvers that can be reached from inside networks, such as those
oﬀered by ISPs, there are also a large number of open resolvers on the Internet.
These can range from unsecured corporate DNS resolvers, to large scale public
DNS services, such as those run by Google, OpenDNS, Quad9 and Cloudﬂare.
Rapid7 provides a list of servers that are responsive on UDP port 53, which
are typically DNS servers. We query each such server using the method out-
lined in Subsect. 3.1. The list contains a total of 8M IPv4 addresses, we receive
a response from 64% of these. Of those responding, 32% respond with a NOER-
ROR reply, of which only 72% (≈1.2M) provide a correct reply.
Of those 1.2M, only 19,717 (1.6%) resolvers support qmin. On the authori-
tative side, we only observe 110k unique source IPs, which suggests that many
of the queried resolvers are in fact forwarders. Of the resolvers that implement
qmin, 10,338 send queries from a Cloudﬂare IP, 2,147 from an OVH IP, and 1,616
from a TV Cabo Angola IP address. This shows that most qmin-supporting open
resolvers simply forward to larger public DNS resolvers that implement qmin.
For qmin-enabled resolvers, we compare the ASN of the IP we send our query
to with the ASN of the IP seen at the authoritative for that same query. We ﬁnd
11.5k resolvers to resolve externally, and 8.2k resolvers to resolve internally.
The takeaway is that many open resolvers on the Internet use centralized
public DNS services. Thus, eﬀorts to drive adoption of qmin should focus on
large public DNS providers (e.g. Google, which does not support qmin yet).
4 Passive Measurements at Authoritative Name Servers
As qmin limits the visible information of a query at authoritative name servers,
adoption of qmin likely changes the query proﬁle of resolvers as observed on
the authoritative side. We measure the impact and adoption of qmin with query
data collected at the authoritative name servers of the ccTLD .nl and of K-Root.
A First Look at QNAME Minimization in the Domain Name System
155
Name servers of .nl are authoritative for the delegation of 5.8 million domain
names. If they receive queries for a .nl domain name with 2 or more labels then
they almost always (except for DS records) respond with a set of name servers
that are actually responsible for the queried domain name. Thus, a query for the
NS record of a second level domain name is suﬃcient for the .nl name servers to
answer the query. Similarly, the root servers are authoritative for the 1.5k TLDs
as of October 9, 2018, and a query for just the TLD is suﬃcient in most cases.
We cannot be certain whether resolvers send minimized queries to the author-
itative name servers, but we can count the queries that follow the expected pat-
terns if resolvers were to send minimized queries. For the rest of this section,
and following the observations made in Sect. 3, we count queries as minimized if
the query contains only 2 labels (at .nl) or 1 label (at K-Root). With increasing
qmin adoption, we expect to see an increase in queries that follow these criteria.
Identifying qmin. First, we measure how query patterns seen at the authorita-
tive name servers diﬀer when resolvers implement qmin. We use the list of open
resolvers from Subsect. 3.3 of which we know whether they have qmin enabled.
Then, we count how many queries these resolvers send to the authoritative name
servers of .nl for names with just two labels on 2018-10-11. In total, we observe
1,918 resolvers that do and 27,251 resolvers that do not support qmin.
In Fig. 3 we see that qmin-enabled resolvers send a median of 97% of queries
classiﬁed as minimized, whereas resolvers that have not enabled this feature send
only 12% of their queries classiﬁed as minimized. This conﬁrms that qmin has
an observable impact at authoritative name servers.
Fig. 3. Minimized queries to
.nl. Whiskers at 0.05 and 0.95.
Fig. 4. Share of minimized queries sent to
.nl and K-Root
Resolver Adoption Over Time. Based on the results of the previous section
we expect a visible impact from increasing adoption of qmin at authoritative
name servers. To verify this expectation we count how many queries overall
are sent for 2nd level domain names and TLDs respectively. We analyze .nl
data collected from 2017-06-01 to 2018-09-30 at 2 of the 4 authoritative name
156
W. B. de Vries et al.
servers [35] and rely on the “Day In The Life of the Internet” (DITL) data sets of
K-Root on 2017-04-11 and 2018-04-10 collected by DNS-OARC [15]. We observe
more than 400B queries from 2017-06-01 to 2018-09-30 at .nl and 12B queries
on the two days of the DITL data sets. Figure 4 shows the fraction of minimized
queries.
In the beginning of our measurement, roughly 33% of the queries to .nl where
minimized. A year later, at least 40% of queries were minimized. A peak around
May 2018 correlates with the date on which Unbound enabled qmin by default.
This peak, however, is followed by a steep decline shortly after, which means we
cannot conﬁrm if Unbound enabling qmin by default caused this peak.
At K-Root we also observe an increase from 44% to 48% in queries for domain
names with only one label. Note that query patterns at the root may strongly
vary from one day to another and that many queries are sent to non existing
domain names which can inﬂuence our results [10].
5 Controlled Experiments: Impact on Resolver
Performance and Result Quality
As qmin is deployed at the recursive resolver, we explore how qmin impacts
the performance and the result quality of such a recursive resolver. We compare
three popular qmin-enabled resolvers in their most recent version: Unbound
1.8.0, Knot 3.0.0, and BIND 9.13.3. We use all three resolvers with their default
options, only adjusting to an equal cache size of 4GB and turning DNSSEC
validation oﬀ1. We cycle through all conﬁgurable qmin behaviors for Unbound
and BIND; Knot has relaxed qmin hardcoded. As target domains, we use the
Cisco Umbrella Top 1M [11] list as a sample of popular domain names, and
aggregate all domains names for a 2-week period to avoid daily ﬂuctuations
and weekly patterns [31], resulting in 1.56M domain names. To even out caching
eﬀects, we sort our target domain names in 4 diﬀerent orders. We conduct several
iterations of these measurements from October 1 through October 15, 2018,
starting each measurement with an empty cache. We report means from all
measurement runs, and ﬁnd little variation in all numbers, typically one standard
deviation σ is smaller than 2% of the mean μ. Table 3 gives an overview of our