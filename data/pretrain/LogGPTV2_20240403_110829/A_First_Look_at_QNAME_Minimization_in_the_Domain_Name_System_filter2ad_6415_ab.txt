We have also identified some public resolvers, such as Google Public DNS, that appear to support QNAME minimization (qmin) according to our initial tests, but in fact do not. This discrepancy is likely due to a qmin-enabled forwarding resolver, which forwards queries to 8.8.8.8 in the case of Google. Additionally, a non-qmin resolver may cache the authoritative response for the second-last label and will appear to support qmin for the duration of the delegation's Time to Live (TTL), which was 10 seconds in our test. We have developed an improved test to address these issues, but this corrected test was not available during the scheduling of the RIPE Atlas measurement in April 2017.

The improved test, "a.b.random-element.domain.example. TXT", uses a unique random pattern for the third-last label in each query, preventing other measurement queries from finding a cached delegation for the second-last label. This refined test is used in measuring qmin adoption by open resolvers in Subsection 3.3, thereby eliminating false positives from the measurement.

We argue that this flaw had minimal impact on our results because (i) RIPE Atlas measurements are spread out over an hour, while our test record has a small TTL, reducing the risk of caching, and (ii) the overall trend over time remains indicative.

To classify resolvers, we used the Autonomous System Numbers (ASNs) observed at the authoritative server. Resolvers were categorized into three groups: 
1. **Internal resolvers** have the same ASN for both the probe and the observed resolver IP.
2. **External resolvers** have an ASN for the resolver IP configured on the probe that matches the ASN observed at the authoritative server but differs from the ASN of the probe.
3. **Forwarding resolvers** have an ASN observed at the authoritative server that differs from both the ASN associated with the resolver IP configured on the probe and the ASN of the probe.

Figure 2 illustrates that both External and Forwarding probe/resolver pairs supporting qmin are on the rise, primarily due to the adoption of the Cloudflare resolver in April 2018. We also observe a steady increase in qmin support among Internal resolvers, which do not include the larger public resolvers.

Upon closer examination of the Internal resolvers, we found that several ISPs began supporting qmin over the past 1.5 years. Notably, "Versatel Deutschland GmbH" started supporting qmin on November 9, 2017; "Init Seven AG" on August 2, 2017; "OVH Systems" on February 1, 2018; and "M-Net Telekommunikations GmbH, Germany" on May 1, 2018. However, these changes may not be visibly reflected in Figure 2.

### 3.2 Fingerprinting Resolver Algorithms

As described in Section 2, RFC [7] provides a reference algorithm for qmin. This algorithm is aggressive, maximizing privacy gains at the cost of performance. It iteratively increases the name length by one label, querying for the NS type, until it reaches the full name. Then, it switches to the original query type, thus querying all but the final name server.

While this algorithm enhances privacy, it can significantly impact performance, security, and result quality (see Section 5). Since the reference algorithm is only a suggestion, resolver implementers are free to develop their own algorithms. Using RIPE Atlas measurements, we explored qmin algorithms implemented in practice. To measure this, we conducted a one-off DNS measurement [4] from all RIPE Atlas probes capable of resolving A records correctly (9,410 probes). We controlled the authoritative name server for the queried name, allowing us to identify query behavior. The queried name consisted of 24 labels, including random values and the probe ID, to map inbound DNS queries to originating probes. We received inbound queries from 8,894 unique probes (out of 9,410) from 8,179 unique resolvers. Most probes had at least two resolvers configured, resulting in 20,716 total inbound queries.

#### Assigning Signatures

To group resolver behavior, we mapped the incoming query behavior observed at our authoritative name server to signatures, containing the length, order, and type of inbound queries. Our test domain was at the second label depth, so we observed queries starting from the third label depth. For example, an algorithm asking for NS at the 3rd label, then for NS at the 4th label, and then for A at the final, 24th label, would be mapped to the signature 3NS-4NS-24A.

#### Signatures of BIND, Knot, and Unbound

For comparison, we ran our domain through BIND, Knot, and Unbound, which are known to implement qmin, and determined each of their qmin signatures. BIND and Unbound also support an additional strict mode, but this has no effect on the signature and is related to how NXDOMAIN responses are handled. The resulting signatures and the reference algorithm signature are shown in Table 2.

| Type | Signature | Implementation | Count |
|------|-----------|----------------|-------|
| 1    | 24A       | None           | 13,892 |
| 2    | 3NS-24A   | Knot 3.0.0     | 784   |
| 3    | 3A-4A-5A-8A-11A-14A-17A-21A-24A | Unbound 1.8.0 | 239 |
| 4    | 3A-4A-5A-6A-9A-12A-15A-18A-22A-24A | Unbound 1.8.0 | 193 |
| 5    | 3A-4A-7A-10A-13A-16A-20A-24A | Unbound 1.8.0 | 16 |
| 6    | 3NS-4NS-5NS-24A | BIND 9.13.3 | 11 |
| 7    | 3NS-4NS-5NS-6NS-7NS-...-24NS-24A | Reference | 0 |

#### Signatures in the Wild

We identified four types of signatures, with some types having multiple variations. The first, most common type (#1) applies no qmin. These resolvers directly query the full-length DNS name. The second type (#2) is a minimalistic qmin approach. After a no-delegation check below the base domain, the full query name is sent. This is used by the Knot resolver and, for example, by Cloudflareâ€™s public DNS resolver. The third type, with variations (#3), is closer to the reference algorithm but displays various ways of skipping labels and always uses the A query type instead of the NS type. Unbound is known to have a similar implementation, confirmed in our experiments. The final signature (#4) uses the NS query type and jumps to querying for the full name after not finding a zone cut for three labels, consistent with the BIND implementation.

Besides the specific signatures seen in Table 2, there are many variations of type #3, indicating that different resolvers implement different algorithms and may be configurable or change over time. In total, we observed 20 different signatures, many from one specific resolver. Interestingly, we did not observe the reference algorithm from any resolver.

### 3.3 Adoption by Open Resolvers

In addition to resolvers reachable from inside networks, such as those offered by ISPs, there are many open resolvers on the Internet. These range from unsecured corporate DNS resolvers to large-scale public DNS services like those run by Google, OpenDNS, Quad9, and Cloudflare. Rapid7 provides a list of servers responsive on UDP port 53, typically DNS servers. We queried each server using the method outlined in Subsection 3.1. The list contains 8 million IPv4 addresses, and we received a response from 64% of these. Of those responding, 32% responded with a NOERROR reply, of which only 72% (approximately 1.2 million) provided a correct reply.

Of the 1.2 million, only 19,717 (1.6%) resolvers supported qmin. On the authoritative side, we observed 110,000 unique source IPs, suggesting that many queried resolvers are forwarders. Of the resolvers that implement qmin, 10,338 send queries from a Cloudflare IP, 2,147 from an OVH IP, and 1,616 from a TV Cabo Angola IP address. This shows that most qmin-supporting open resolvers simply forward to larger public DNS resolvers that implement qmin.

For qmin-enabled resolvers, we compared the ASN of the IP we sent our query to with the ASN of the IP seen at the authoritative for the same query. We found 11,500 resolvers to resolve externally and 8,200 resolvers to resolve internally. The takeaway is that many open resolvers on the Internet use centralized public DNS services. Therefore, efforts to drive qmin adoption should focus on large public DNS providers, such as Google, which does not yet support qmin.

### 4 Passive Measurements at Authoritative Name Servers

As qmin limits the visible information of a query at authoritative name servers, its adoption likely changes the query profile of resolvers as observed on the authoritative side. We measured the impact and adoption of qmin with query data collected at the authoritative name servers of the ccTLD .nl and K-Root.

Name servers of .nl are authoritative for the delegation of 5.8 million domain names. If they receive queries for a .nl domain name with 2 or more labels, they almost always respond with a set of name servers responsible for the queried domain name. Similarly, root servers are authoritative for 1,500 TLDs as of October 9, 2018, and a query for just the TLD is sufficient in most cases. We cannot be certain whether resolvers send minimized queries to the authoritative name servers, but we can count the queries that follow the expected patterns if resolvers were to send minimized queries. For the rest of this section, and following the observations made in Section 3, we count queries as minimized if the query contains only 2 labels (at .nl) or 1 label (at K-Root). With increasing qmin adoption, we expect to see an increase in queries that follow these criteria.

#### Identifying qmin

First, we measured how query patterns differ at the authoritative name servers when resolvers implement qmin. We used the list of open resolvers from Subsection 3.3, knowing whether they have qmin enabled. Then, we counted how many queries these resolvers sent to the authoritative name servers of .nl for names with just two labels on October 11, 2018. In total, we observed 1,918 resolvers that do and 27,251 resolvers that do not support qmin.

Figure 3 shows that qmin-enabled resolvers send a median of 97% of queries classified as minimized, whereas resolvers without qmin send only 12% of their queries classified as minimized. This confirms that qmin has an observable impact at authoritative name servers.

#### Resolver Adoption Over Time

Based on the previous section's results, we expect a visible impact from increasing qmin adoption at authoritative name servers. To verify this, we counted the number of queries sent for 2nd level domain names and TLDs. We analyzed .nl data collected from June 1, 2017, to September 30, 2018, at 2 of the 4 authoritative name servers and relied on the "Day In The Life of the Internet" (DITL) data sets of K-Root on April 11, 2017, and April 10, 2018, collected by DNS-OARC. We observed more than 400 billion queries from June 1, 2017, to September 30, 2018, at .nl and 12 billion queries on the two days of the DITL data sets. Figure 4 shows the fraction of minimized queries.

At the beginning of our measurement, roughly 33% of the queries to .nl were minimized. A year later, at least 40% of queries were minimized. A peak around May 2018 correlates with the date when Unbound enabled qmin by default. However, this peak was followed by a steep decline, so we cannot confirm if Unbound enabling qmin by default caused this peak.

At K-Root, we also observed an increase from 44% to 48% in queries for domain names with only one label. Note that query patterns at the root may vary strongly from one day to another, and many queries are sent to non-existing domain names, which can influence our results.

### 5 Controlled Experiments: Impact on Resolver Performance and Result Quality

Since qmin is deployed at the recursive resolver, we explored its impact on the performance and result quality of such a resolver. We compared three popular qmin-enabled resolvers in their most recent versions: Unbound 1.8.0, Knot 3.0.0, and BIND 9.13.3. We used all three resolvers with their default options, adjusting only to an equal cache size of 4GB and turning DNSSEC validation off. We cycled through all configurable qmin behaviors for Unbound and BIND; Knot has relaxed qmin hardcoded. As target domains, we used the Cisco Umbrella Top 1M list as a sample of popular domain names, aggregating all domain names for a 2-week period to avoid daily fluctuations and weekly patterns, resulting in 1.56 million domain names. To even out caching effects, we sorted our target domain names in 4 different orders. We conducted several iterations of these measurements from October 1 through October 15, 2018, starting each measurement with an empty cache. We report means from all measurement runs and found little variation, with one standard deviation Ïƒ typically smaller than 2% of the mean Î¼. Table 3 provides an overview of our findings.