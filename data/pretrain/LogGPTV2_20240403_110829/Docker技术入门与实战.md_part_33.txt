盖设置的默认值：
候指定。在Docker服务启动的时候指定则会成为默认值，后续执行docker
候才能配置，而且不能马上生效：
-P or--publish-all=true|false
-p SPEC or --publish=SPEC-
--link=CONTAINER_NAME：ALIAS——添加到另一个容器的连接。
-h HOSTNAMEor--hostname=HOSTNAME——配置容器主机名。
最后这些选项只能在dockerrun执行时使用，因为它是针对容器的特性内容：
--dns-search=DOMAIN..
--dns=IP_ADDRESS..
下面两个命令选项既可以在启动服务时指定，也可以Docker容器启动（docker run）时
□--ip-forward=true|false-——启用net.ipv4.ip forward，即打开转发功能。
-H SOCKET..
--bip=CIDR-
-b BRIDGE or
下面是跟Docker网络相关的命令参数。其中有些命令选项只有在Docker服务启动的时
口
--icc=true|false-
2.网络相关参数
模式。
口
口
--net=bridge|none| container:NAME_or_ID|host-
--mtu=BYTES——容器网络中的MTU。
--iptables=truelfalse-
.or --host=SOCKET.
一定制dockero的掩码。
--bridge=BRIDGE-
一是否支持容器之间进行通信。
图20-1Docker中的网络
.—指定DNS搜索域。
一使用指定的DNS服务器。
—禁止Docker添加iptables规则。
宿主主机
一映射容器端口到宿主主机。
dockero
lockero
vethYY
172.17.42.1/16
指定容器挂载的网桥。
一映射容器所有端口到宿主主机。
-Docker服务端接收命令的通道
容器
第20章高级网络配置239
一配置容器的桥接
run时可以覆
9.09
---
## Page 254
conf 文件内容保持一致：
resolv.conf、/etc/hostname和/etc/hosts。
20.2配置容器DNS和主机名
240
Docker1.2.0开始支持在运行中的容器里直接编辑/etc/hosts，/etc/hostname和
2.容器内修改配置文件
/etc/hostname文件则记录了容器的主机名：
/etc/hosts文件中默认只记录了容器自身的一些地址和名称：
其中，/etc/resolv.conf文件在创建容器时候，默认会与宿主机/etc/resolv.
启动一个容器，在容器中使用mount命令可以看到这三个文件挂载信息：
实际上，容器中主机名和DNS配置信息都是通过三个系统配置文件来维护的：/etc/
root@75dbd6685305:/#cat/etc/hostname
127.0.0.1
ff02::2
ff02::1
root@75dbd6685305:/#cat/etc/resolv.conf
1.相关配置文件
Docker支持自定义容器的主机名和DNS 配置。
75dbd6685305
ffo0::0
fe00::0
:1
172.17.0.2
root@75dbd6685305:/#cat/etc/hosts
search dockerpool.com
nameserver 8.8.8.8
ro,data=ordered)
errors=remount-ro,data=ordered)
/dev/mapper/ubuntu-
(rw,relatime,errors=remount-ro,data=ordered)
/dev/mapper/ubuntu--vg-root
root@75dbd6685305:/#mount
$sudo docker
第三部分高级话题
localhost ip6-localhost ip6-loopback
ip6-allrouters
ip6-allnodes
ip6-mcastprefix
ip6-localnet
localhost
75dbd6685305
run -it ubuntu
-vg-root on /etc/hostname type ext4 (rw,relatime,
on
/etc/resolv.conftypeext4
国
---
## Page 255
访问到宿主机本地的。
接口。docker0内部接口同时也是宿主机的一个本地接口。因此，容器默认情况下是可以
iptables是Linux系统流行的防火墙软件，在大部分发行版中都自带。
20.3
来。也不会被docker commit 提交。
/etc/resolve.conf文件。
容器的访问控制，主要通过Linux上的iptables防火墙软件来进行管理和实现。
更进一步地，容器要想通过宿主机访问到外部网络，需要宿主机进行转发。
从前面的描述中，我们知道容器默认指定了网关为dockerO网桥上的dockerO内部
1.容器访问外部网络
如果用户想要自定义容器的配置，可以在创建或启动容器时利用下面的参数指定：
但是这些修改是临时的，只在运行的容器中保留，容器终止或重启后并不会被保存下
$sudo sysctl-w net.ipv4.ip_forward=1
如果为0，说明没有开启转发，则需要手动打开：
net.ipv4.ip_forward=1
$ sudo sysctl net.ipv4.ip_forward
在宿主机Linux系统中，检查转发是否打开：
指定DNS搜索域--dns-search=DOMAIN。设定容器的搜索域，当设定搜索域
口指定DNS服务器--dns=IP_ADDRESS。添加DNS服务器到容器的/etc/resolv
口记录其他容器主机名--link=CONTAINER_NAME：ALIAS。选项会在创建容器的时
指定主机名-hHOSTNAMEor --hostname=HOSTNAME。设定容器的主机名
conf中，容器会用指定的服务器来解析所有不在/etc/hosts中的主机名。
3.通过参数指定
容器访问控制
会搜索host.example.com。
为．example.com时，在搜索一个名为host的主机时，DNs不仅搜索host，还
器可以直接使用主机名来与所连接容器通信。
候，添加一个所连接容器的主机名到容器内/etc/hosts文件中。这样，新创建容
器的/etc/hosts看到。
能看到，在容器外部则看不到，既不会在dockerps中显示，也不会在其他的容
它会被写到容器内的/etc/hostname和/etc/hosts。但这个主机名只有容器内
第20章高级网络配置241
---
## Page 256
端口（取决于Dockerfile中的EXPOSE行）。
Docker会在iptable 中为两个互联容器分别添加一条ACCEPT规则，允许相互访问开放的
配置容器间禁止访问，并允许Docker自动修改系统中的iptables规则。
NAME：ALIAS选项来允许访问指定容器的开放端口。
系统上的iptables规则。
icc=false来默认禁止容器之间的相互访问。
FORWARD链上。通过配置--icc=true|false（默认值为true）参数可以控制默认的策略。
动打开宿主机系统的转发服务。
242
此时，iptables的规则可能是类似如下规则：
此时，系统中的iptables规则可能是类似如下规则，禁止所有转发流量：
例如，在启动Docker服务时，可以同时使用icc=false--iptables=true参数来
访问指定端口
同时，如果启动Docker服务时手动指定--iptables=false参数则不会修改宿主机
之后，
在通过-icc=false禁止容器间相互访问后，仍可以通过--link=CONTAINER
为了安全考虑，可以在/etc/default/docker文件中配置DOCKER_OPTS=-
口本地系统的防火墙软件iptables是否允许访问通过。这取决于防火墙的默认规则
口网络拓扑是否已经连通。默认情况下，所有容器都会连接到docker0网桥上，这意
2.容器之间访问
更简单的，在启动Docker服务的时候设定--ip-forward=true，Docker服务会自
ACCEPT
target
Chain FORWARD (policy ACCEPT)
$sudo iptables-nL
DROP
target
Chain FORWARD (policy ACCEPT)
$ sudo iptables-nL
当启动Docker服务时候，默认会添加一条“允许”转发策略到iptables的
访问所有端口
味着默认情况下拓扑是互通的。
容器之间相互访问需要以下两方面的支持。
是允许（大部分情况）还是禁止。
第三部分高级话题
启动容器（dockerrun）时使用--link=CONTAINER_NAME：ALIAS选项。
tcp
prot opt source
all
prot
opt source
172.17.0.2
0.0.0.0/0
172.17.0.3
destination
0.0.0.0/0
destination
tcp spt:80
---
## Page 257
内的端口随机端口到容器的80端口：
部IP地址的网包进行目标地址DNAT，将目标地址修改为容器的IP地址。
统SNAT行动的好处是它能动态从网卡获取地址。
出的流量（即从容器中出来的流量），动态伪装为从系统网卡发出。MASQUERADE行动跟传
地址：
的IP地址10.0.2.2。映射是通过iptables的源地址伪装操作实现的。
络，源地址不能为172.17.0.2，需要进行源地址映射（SourceNAT，SNAT），修改为本地系统
20.4映射容器端口到宿主主机的实现
以一个开放80端口的web容器为例，使用-P时，
查看主机nat表上 POSTROUTING链的规则。该链负责网包要离开主机前，改写其源
Chain PREROUTING (policy ACCEPT 236 packets, 33317 bytes)
$sudoiptables-t nat-nvL
不管用那种办法，其实也是在本地的iptable 的nat 表中添加相应的规则，将访问外
容器允许外部访问，可以在dockerrun 时候通过-p或-P 参数来启用。
2.外部访问容器实现
$sudo iptables -t nat -nvL POSTROUTING
默认情况下，容器可以主动访问到外部网络的连接，但是外部网络无法访问到容器。
注意
其中，
pktsbytes target
Chain POSTROUTING
假设容器内部的网络地址为172.17.0.2，本地网络地址为10.0.2.2。容器要能访问外部网
1.容器访问外部实现
DROP
ACCEPT
分配的容器名，或使用--name 参数指定的名字。不能为容器-h参数配置的主机名。
--link=CONTAINER_NAME：ALIAS中的 CONTAINER_NAME 目前必须是Docker 自动
上述规则将所有源地址在172.17.0.0/16网段，
0MASQUERADEa11--.
all
tcp
i
(policy ACCEPT 12 packets,
0.0.0.0/0
172.17.0.3
prot opt in
!docker0172.17.0.0/16
out
0.0.0.0/0
172.17.0.2
738bytes)
，会自动映射本地49000~49900范文
source
第20章高级网络配置243
，且不是从dockerO接口发
0.0.0.0/0
destination
tcp dpt:80
---
## Page 258
个物理网络。
部接口），它在内核层连通了其他的物理或虚拟网卡，这就将所有容器和本地主机都放到同一
20.5
目标端口修改为80。
来的网包（意味着不是本地主机产生），将目标端口为49153的，修改目标地址为172.17.0.2，
地址。其中规则将所有流量都扔到DOCKER链。而DOCKER链中将所有不是从dockerO进
244
Docker默认指定了dockerO接口的IP地址和子网掩码，让主机和容器之间可以通过
Docker服务默认会创建一个名称为dockerO的Linux网桥（其上有一个docker0内
口如果希望映射永久绑定到某个固定的IP地址，
口
注意以下问题：
tcpdpt:80to:172.17.0.2:80
pkts bytes target
Chain DocKER (2 references)
ADDRTYPE match dst-type LOCAL
$sudo iptables-t nat -nvL
使用-p80:80时，
可以看到，nat表中涉及两条链，PREROUTING链负责包到达网络接口时，改写其目的
pkts bytes target
tcp dpt:49153 to:172.17.0.2:80
pkts bytes target
Chain DOCKER (2 references)
ADDRTYPE match dst-type LOCAL
567 30236 D0CKER
pktsbytes target
Docker服务即可生效。
default/docker中指定DOCKER_OPTS="--ip=IP_ADDRESS"，之后重启
部网络接口，以制定更严格的访问规则。
通过-p IP:host_port:container_port或-p IP::port来指定绑定的外
1这里的规则映射了0.0.0.0，意味着将接受主机来自所有网络接口上的流量。用户可以
567 30236 D0CKER
配置dockerO网桥
0
0
第三部分高级话题
ODNAT
ODNAT
与上面类似，
tcp
prot
protopt
all
all
tcp
prot opt in
optin
!docker0*
in
只是本地端口也为80：
!dockero
in
out
out
out
out
0.0.0.0/0
source
0.0.0.0/0
source
source
source
可以在Docker配置文件/etc/
0.0.0.0/0
0.0.0.0/0
0.0.0.0/0
destination
0.0.0.0/0
destination
0.0.0.0/0
destination
0.0.0.0/0
destination
---
## Page 259
20.6
容器的ethO端口。并且使用本地主机上dockerO接口的IP作为容器的默认网关：
Linux网桥，用户可以使用brctlshow来查看网桥和端口连接信息：
宿主主机网络路由上支持的默认值。这些值都可以在服务启动的时候进行配置。
G
网桥相互通信，
在启动Docker服务的时候，使用-bBRIDGE或--bridge=BRIDGE来指定使用的网桥。
除了默认的dockerO网桥，
注意
$exit
$ ip route
每次创建一个新容器的时候，Docker从可用的地址段中选择一个空闲的IP地址分配给
注意
目前，Docker不支持在启动容器时候指定IP地址。
172.17.0.0/16dev eth0proto kernel
defaultvia172.17.42.1deveth0
default qlen1000
S
docker0
bridge name
$sudo brctl show
也可以在配置文件中配置DOCKER_OPTS，然后重启服务。由于目前Docker网桥是
--mtu=BYTES-
--bip=CIDR-
ip addr showetho
支持VLan等属性。
实际上，Linux网桥可以很容易替换为OpenvSwitch等功能更强大的网桥实现，可以
utils来安装。
brctl命令在Debian、Ubuntu中可以使用sudoapt-get
自定义网桥
inet6fe80::306f:e0ff:fe35:5791/64
inet 172.17.0.3/16 scope globaleth0
link/ether 32:6f:e0:35:57:91 brd ff:ff:ff:ff:ff:ff
valid_lft forever preferred_lft
valid_lft forever preferred_lft
，它还给出了MTU（接口允许接收的最大传输单元），通常是1500Bytes，或
—IP地址加掩码格式，例如192.168.1.5/24。
8000.3a1d7362b4ee
bridge id
一覆盖默认的Dockermtu配置。
用户也可以指定网桥来连接各个容器。
scope1inksrc 172.17.0.3
forever