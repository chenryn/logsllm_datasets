```
### 5、kdialog 命令
`kdialog` 命令与 `zenity` 类似，但它是为 KDE 桌面和 QT 应用设计。你可以使用 `kdialog` 展示对话框。下面示例将在屏幕上显示信息：
```
kdialog --dontagain myscript:nofilemsg --msgbox "File: '~/.backup/config' not found."
```
示例输出：
![Fig.05: Suppressing the display of a dialog ](/data/attachment/album/201804/03/174833kavn8w0ovk0a8g80.png "Kdialog: Suppressing the display of a dialog ")
参见 《[KDE 对话框 Shell 脚本编程](http://techbase.kde.org/Development/Tutorials/Shell_Scripting_with_KDE_Dialogs)》 教程获取更多信息。
### 6、Dialog
[Dialog 是一个使用 Shell 脚本的应用](https://bash.cyberciti.biz/guide/Bash_display_dialog_boxes)，显示用户界面组件的文本。它使用 curses 或者 ncurses 库。下面是一个示例代码：
```
#!/bin/bash
dialog --title "Delete file" \
--backtitle "Linux Shell Script Tutorial Example" \
--yesno "Are you sure you want to permanently delete \"/tmp/foo.txt\"?" 7 60
# Get exit status
# 0 means user hit [yes] button.
# 1 means user hit [no] button.
# 255 means user hit [Esc] key.
response=$?
case $response in
   0) echo "File deleted.";;
   1) echo "File not deleted.";;
   255) echo "[ESC] key pressed.";;
esac
```
参见 `dialog` 手册获取详细信息：`man dialog`。
#### 关于其他用户界面工具的注意事项
UNIX、Linux 提供了大量其他工具来显示和控制命令行中的应用程序，shell 脚本可以使用一些 KDE、Gnome、X 组件集：
* `gmessage` - 基于 GTK xmessage 的克隆
* `xmessage` - 在窗口中显示或询问消息（基于 X 的 /bin/echo）
* `whiptail` - 显示来自 shell 脚本的对话框
* `python-dialog` - 用于制作简单文本或控制台模式用户界面的 Python 模块
### 7、logger 命令
`logger` 命令将信息写到系统日志文件，如：`/var/log/messages`。它为系统日志模块 syslog 提供了一个 shell 命令行接口：
```
logger "MySQL database backup failed."
tail -f /var/log/messages
logger -t mysqld -p daemon.error "Database Server failed"
tail -f /var/log/syslog
```
示例输出：
```
Apr 20 00:11:45 vivek-desktop kernel: [38600.515354] CPU0: Temperature/speed normal
Apr 20 00:12:20 vivek-desktop mysqld: Database Server failed
```
参见 《[如何写消息到 syslog 或 日志文件](https://www.cyberciti.biz/tips/howto-linux-unix-write-to-syslog.html)》 获得更多信息。此外，你也可以查看 logger 手册获取详细信息：`man logger`
### 8、setterm 命令
`setterm` 命令可设置不同的终端属性。下面的示例代码会强制屏幕在 15 分钟后变黑，监视器则 60 分钟后待机。
```
setterm -blank 15 -powersave powerdown -powerdown 60
```
下面的例子将 xterm 窗口中的文本以下划线展示：
```
setterm -underline on;
echo "Add Your Important Message Here"
setterm -underline off
```
另一个有用的选项是打开或关闭光标显示：
```
setterm -cursor off
```
打开光标：
```
setterm -cursor on
```
参见 setterm 命令手册获取详细信息：`man setterm`
### 9、smbclient：给 MS-Windows 工作站发送消息
`smbclient` 命令可以与 SMB/CIFS 服务器通讯。它可以向 MS-Windows 系统上选定或全部用户发送消息。
```
smbclient -M WinXPPro /dev/tcp/localhost/25) &>/dev/null && echo "TCP port 25 open" || echo "TCP port 25 close"
```
下面的代码片段，你可以利用 [bash 循环找出已打开的端口](https://www.cyberciti.biz/faq/bash-for-loop/)：
```
echo "Scanning TCP ports..."
for p in {1..1023}
do
  (echo >/dev/tcp/localhost/$p) >/dev/null 2>&1 && echo "$p open"
done
```
示例输出：
```
Scanning TCP ports...
22 open
53 open
80 open
139 open
445 open
631 open
```
下面的示例中，你的 bash 脚本将像 HTTP 客户端一样工作：
```
#!/bin/bash
exec 3<> /dev/tcp/${1:-www.cyberciti.biz}/80
printf "GET / HTTP/1.0\r\n" >&3
printf "Accept: text/html, text/plain\r\n" >&3
printf "Accept-Language: en\r\n" >&3
printf "User-Agent: nixCraft_BashScript v.%s\r\n" "${BASH_VERSION}"   >&3
printf "\r\n" >&3
while read LINE 
作者：[Vivek Gite](https://www.cyberciti.biz) 译者：[pygmalion666](https://github.com/pygmalion666) 校对：[wxy](https://github.com/wxy)
本文由 [LCTT](https://github.com/LCTT/TranslateProject) 原创编译，[Linux中国](https://linux.cn/) 荣誉推出