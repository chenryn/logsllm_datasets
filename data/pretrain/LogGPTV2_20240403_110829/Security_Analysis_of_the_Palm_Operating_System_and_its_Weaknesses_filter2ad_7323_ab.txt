UInt8 userLen;
UInt8 passwordLen;
UInt8 username[userLen+1];
UInt8 password[passwordLen+1];
};
09 02 13 45 07 04 13 44 0C 08 13 5A 32 15 13 5D
D2 17 EA D3 B5 DF 55 63 22 E9 A1 4A 99 4B 0F 88
Figure 4: 32-byte constant block for use with pass-
words of length 4 characters or less
31 characters in length) is more complicated than
for short length passwords, although it, too, is re-
versible.
Figure 2: Structure sent during the HotSync process
containing encoded password block
A = ASCII password
B = 64-byte constant block
C = encoded password block
Passwords of 4 Characters or Less: By com-
paring the encoded password blocks of various short
passwords (example in Figure 3), it was determined
that a 32-byte constant (Figure 4) was simply being
XORed against the ASCII password block.
A = ASCII password
B = 32-byte constant block
C = encoded password block
The starting index, j, into the constant block where
the XOR operation should begin is calculated by:
j = (A[0] + strlen(A)) % 32;
The encoded password block is then created:
for (i = 0; i >= shift;
Passwords Greater Than 4 Characters: The
encoding scheme for long length passwords (up to
}
C[k] XOR= (unsigned char) temp;
The resultant 32-byte encoded password block (ex-
ample in Figure 6) does not have any immediately
visible remnants of the constant block as the short
length encoding method does. However, it is still
reversible with minimal computing resources.
B1 56 35 1A 9C 98 80 84 37 A7 3D 61 7F 2E E8 76
2A F2 A5 84 07 C7 EC 27 6F 7D 04 CD 52 1E CD 5B
B3 29 76 66 D9 5E 4B CA 63 72 6F D2 FD 25 E6 7B
C5 66 B3 D3 45 9A AF DA 29 86 22 6E B8 03 62 BC
Figure 5: 64-byte constant block for use with pass-
words greater than 4 characters
18 0A 43 3A 17 7D A3 CA D7 9D 75 D2 D3 C8 A5 CF
F1 71 07 03 5A 52 4B B9 70 2D B2 D1 DF A5 54 07
Figure 6: Encoded password block of ASCII pass-
word ‘testa’
4.2 Recommendations
Palm OS 4.0, due to be released at the end of 2001,
appears to have resolved the issue of weak password
obfuscation. However,
it is highly recommended
that a thorough analysis of OS 4.0 takes place before
a security-critical application is deployed.
In the current state, it is recommended that Palm
OS devices should not be trusted to store any criti-
cal or conﬁdential information. In lieu of this, users
and vendors are encouraged to adhere to the follow-
ing guidelines for increased password security:
• Engage a challenge/response mechanism.
These mechanisms will minimize the potential
for adversaries to glean passwords through pas-
sive monitoring of the transport medium. The
transfer of a secret component, even if it is en-
coded or obfuscated, over accessible buses (e.g.,
serial, IR, wireless, or network) is a risky design
decision. Unfortunately, it’s common practice
that applications choose to simply obfuscate
passwords instead of using encryption.
• Encrypt and salt credentials stored on
systems. Simple obfuscation and reversible
transforms lull the user into a false sense of se-
curity and simultaneously show a lack of con-
cern about security from the vendor. The use
of a salt, such as the Palm user name, user
ID, or unique serial number of the Palm de-
vice, minimizes the possibilities of a password
being represented on multiple systems with the
same hash.
• Implement policy to lock and encrypt
data on the device. The Palm OS Se-
curity application provides “system lockout”
functionality in which the Palm device will not
be operational until the correct password is en-
tered. This is meant to prevent an unautho-
rized user from reading data or running appli-
cations on the device. Although this protec-
tion can be bypassed as discussed in §5, it pro-
vides an additional layer of security for partic-
ular deployments. The encryption of data can
be achieved with a number of third-party appli-
cations, though care should be taken to verify
secure storage of the encryption components.
• Implement
an alternative password
scheme. Third-party solutions exist which
provide power-on and data protection by
requiring a handwritten signature, physical
button taps, or other form of password be-
fore allowing access to the device. Ths use
of graphical passwords on PDAs is studied
in [12].
5 Backdoor Debug Modes
Designed into the Palm OS is an RS232-based
“Palm Debugger”, which provides source- and
assembly-level debugging of Palm OS executables
and the administration of databases existing on the
physical device [21].
Entering a short keystroke combination [21], the
Palm OS device enters one of two interfaces pro-
vided by the Palm Debugger and monitors the serial
port for communication. “Console mode” interacts
with a high-level debugger and is used mostly for
the manipulation of databases. “Debug mode” is
typically used for assembly- and register-level de-
bugging. A soft-reset of the Palm device will exit
debug mode, leaving no proof of prior use.
The Palm Debugger can be activated even if the
Palm OS lockout functionality is enabled (which is
currently assumed by most users to be a suﬃcient
protection feature, because a password is required
before the device becomes operational). This prob-
lem is veriﬁed to concern Palm OS versions 3.5.2
and earlier.
Aside from the speciﬁc attack of retrieving the ob-
fuscated system password block by using export
0 "Unsaved Preferences" and decoding as de-
tailed in §4.1, it is possible to access all database
and record information on the entire Palm OS de-
vice [16]. For example, using the import console
command, one can load a Palm OS application into
the device, therefore side-stepping any HotSync or
beaming operations and logging mechanisms. A
complete listing of console and debug commands can
be found in [21].
Because the debug modes communicate with the
host via the serial port, it would be possible to cre-
ate a Palm OS-based application to emulate the re-
quired commands and, with a modiﬁed HotSync ca-
ble, be used for the retrieval of passwords or other
data in a mobile fashion. When the possibility ex-
ists to retrieve data from a portable device while
“in the ﬁeld” and not requiring the use of a desktop
computer, the threat of physical attacks increases
greatly.
5.1 Recommendations
Solutions for this class of attack can be remedied
with minimal changes to the Palm OS. If the de-
vice has been placed in the system lockout mode,
the Palm Debugger functionality should be disabled.
Palm OS 4.0 appears to have removed the activation
of debug functionality during the “system lockout”
mode. In an ideal situation, although a disadvan-
tage to application developers, all debugging func-
tionality should be removed in production devices.
Additionally, logging all Palm Debugger actions, es-
pecially with time stamping, aims towards forensics
readiness and will aid in post-attack analysis.
6 Infection Techniques
Common to most virus applications, and intrinsic
to worms, is the notion of self-replication. Through
self-replication and propagation, the malignant code
can infect programs, devices, users, or combinations
thereof. Hence, it is important to look at avenues
available to such programs to better understand the
risks at hand and determine areas to analyze for
solutions.
Generic applications can be loaded in a number of
diﬀerent fashions. They can even execute without
user knowledge or interaction. Any method of load-
ing data onto the Palm OS device can act as an en-
try point for virus or malicious code infection. Four
major entry points for the Palm OS devices are:
HotSync operations, serial ports, infrared beaming,
and wireless radio. Additionally, applications can
be loaded using the Palm Debugger as described in
§5.
Possibly more threatening and intriguing is the po-
tential for cross-architecture pollination and infec-
tion. As with biology, the life cycle of a pathogen
may involve more than one species of host. A virus
could easily be designed to infect a desktop PC and
contain a secondary payload for the Palm OS device.
Alternatively, a virus on a Palm OS device could
contain a payload aimed to compromise a desktop
PC.
6.1 Application Installation Procedure
The current installation procedure for loading third-
party applications onto a Palm OS device is sim-
plistic in nature and was not designed with secu-
rity in mind. The Install Tool, provided with the
Palm Desktop software, copies the desired applica-
tion into the /Palm//Install directory on
the desktop PC. Upon the next HotSync opera-
tion, the contents in this directory are automatically
loaded onto the Palm OS device. This is one ex-
ample of cross-architecture pollination as the virus
eﬀectively transfers itself to the new platform.
If access control features are implemented in future
Palm OS versions, as they should be, it should be
noted that the permissions remain intact during de-
bug sessions and that global memory accessibility is
not allowed.
No conﬁrmation or authentication mechanisms ex-
ist during the HotSync operation. This shows the
integrity and security of the host PC as an integral
component in this chain of actions. If the host PC
is compromised, the PDA can be considered com-
promised, as well.
6.2.1 Recommendations
6.1.1 Recommendations
Since the user places each individual program in the
directory or otherwise intentionally labels the appli-
cations to be uploaded, user veriﬁcation at synchro-
nization to conﬁrm the applications should be a triv-
ial solution. This could be achieved by automated
prompting on the host PC or by manually inspect-
ing the contents of the /Palm//Install di-
rectory. However, many users have a learned behav-
ior to simply accept system prompts without careful
examination.
Cryptographic signing of applications by the vendor
then veriﬁed by the user or Palm device will also
reduce the chances of illegitimate code being loaded
or executed on the device.
6.2 Desktop Conduits
“Conduits”, in the form of Dynamic Link Libraries
(DLLs), interface with the HotSync Manager pro-
gram on the desktop PC. They enable the transfer
of data between the Palm OS device and a speciﬁc
desktop application during the HotSync process.
The standard conduits for Palm OS transfer Ad-
dress, Date Book, Memo Pad, and To Do List data
to the Palm Desktop software. Palm Expense data
interfaces directly with Microsoft Excel. Third-
party conduits exist which replace the standard con-
duits and will route data to Microsoft Outlook or
Exchange, Lotus Notes, Novell GroupWise, or other
Personal Information Manager (PIM).
Conduits are an extremely likely entry point for the
cross-architecture transfer of malicious code. Aside
from virus infection (such as a macro virus through
the use of Microsoft Word or Excel macro function-
ality), malicious code transferred from the Palm de-
vice to the desktop through a conduit could exploit
a known security problem in the destination desk-
top application. This could lead to compromise of
the desktop machine (such as the execution of arbi-
trary code, theft or erasure of data, or elevation of
privilege).
Cross-architecture infection risks exist
for any
portable device that employs data transfer or syn-
chronization capabilities to other devices. Proper
security practices should exist in the desktop envi-
ronment consisting of, but not limited to, disabling
macros, scripting, and the unprompted execution
of code. Anti-virus software running on the desk-
top should scan the incoming data before passing it
to the destination application. Once the malicious
code has successfully been transferred to the desti-
nation application, it poses the same threats as if a
user executed such a ﬁle directly.
6.3 Creator ID Replacement
Applications running on the Palm OS make use of
a 4-byte Creator ID for identiﬁcation purposes. If
the Creator ID of a malicious application is deﬁned
to be the same as one of the built-in applications, it
will be executed in place of the built-in application.
Launching a Trojan program in this manner will
appear transparent to the user until it is too late and
the malicious action has occurred. Creator IDs of
the basic built-in applications are listed in Table 1.
This behavior has characteristics of a list created in
a Last In First Out (LIFO) fashion. Upon addition
of a new piece of software to the system, its Cre-
ator ID is pushed onto the list. When a program is
launched, a traversal of the list occurs to ﬁnd the
entry point to the program. When the ﬁrst match
on the Creator ID is found, the list traversal exits.
Application Name Creator ID
Address
Calculator
Date Book
Expense
HotSync
Mail
Memo Pad
Preferences
Security
To Do List
addr
calc
date
exps
sync
mail
memo
pref
secr
todo
Table 1: Creator IDs of the basic Palm OS built-in
applications
6.3.1 Recommendations
6.4.2 RF
Vendors can prevent this problem by monitoring the
Creator IDs at the operating system layer and disal-
lowing duplicates. Furthermore, a complete traver-
sal of the list could take place upon each application
launch and if duplicate Creator IDs are found, nei-
ther application is executed and user intervention
would be required. While this opens a window for
denial-of-service-style attacks, it closes an obvious
Trojan horse attack which is potentially much more
damaging.
6.4 Wireless Communications
6.4.1 Infrared
For point-to-point, close quarters communications,
infrared is typically the model of choice. In a stan-
dard IR beaming session, the Palm OS will send
a sysAppLaunchCmdExgAskUser launch code to the
receiving application. Typically, applications do not
have custom handlers for this launch code, in which
case the default response is to present the user with
a dialog box prompting for acceptance or rejection
of the request. If, however, the application handles
the launch code, as detailed in §8.1, and sets the