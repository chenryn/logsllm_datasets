the `      data     ` cookie will cause the server to execute the PHP
code `      phpinfo();     ` , which outputs information about PHP's
configuration on the server. The `     ` [ ]{#c14.xhtml#Page_237
.pagebreak title="237"} phpinfo() function is often used as a
proof-of-concept function to run in bug reports to proof successful PHP
command injection. The following is what happens in detail on the target
server during this attack:
在打印对象之前，我们需要对其进行URL编码1，因为我们将通过cookie注入该对象。将由此代码生成的字符串传递到数据cookie中将导致服务器执行PHP代码phpinfo();，它会输出有关服务器上PHP配置的信息。phpinfo()函数通常用作概念证明函数来运行bug报告以证明成功的PHP命令注入。以下是在目标服务器上此攻击发生的详细过程：
1.  The serialized `       Example2      ` object is passed into the
    program as the `       data      ` cookie.
2.  The program calls `       unserialize()      ` on the
    `       data      ` cookie.
3.  Because the `       data      ` cookie is a serialized
    `       Example2      ` object, `       unserialize()      `
    instantiates a new `       Example2      ` object.
4.  The `       unserialize()      ` function sees that the
    `       Example2      ` class has `       __wakeup()      `
    implemented, so `       __wakeup()      ` is called.
5.  The `       __wakeup()      ` function looks for the object's
    `       $hook      ` property, and if it is not `       NULL      `
    , it runs `       eval($hook)      ` .
6.  The `       $hook      ` property is not `       NULL      ` ,
    because it is set to `       phpinfo();      ` , and so
    `       eval("phpinfo();")      ` is run.
7.  You've achieved RCE by executing the arbitrary PHP code you've
    placed in the `       data      ` cookie.
#### Using Other Magic Methods {#c14.xhtml#h3-123456c14-0004}
So far, we've mentioned the magic methods `      __wakeup()     ` and
`      __destruct()     ` . There are actually four magic methods you'll
find particularly useful when trying to exploit an
`      unserialize()     ` vulnerability: `      __wakeup()     ` ,
`      __destruct()     ` , `      __toString()     ` , and
`      __call()     ` .
到目前为止，我们已经提到了魔术方法\_\_wakeup()和\_\_destruct()。当尝试利用unserialize()漏洞时，实际上有四个魔术方法会特别有用：\_\_wakeup()，\_\_destruct()，\_\_toString()和\_\_call()。
Unlike `      __wakeup()     ` and `      __destruct()     ` , which
always get executed if the object is created, the
`      __toString()     ` method is invoked only when the object is
treated as a string. It allows a class to decide how it will react when
one of its objects is treated as a string. For example, it can decide
what to display if the object is passed into an `      echo()     ` or
`      print()     ` function. You'll see an example of using this
method in a deserialization attack in [ "Using POP Chains" on page 238
]{.xref itemid="xref_target_“Using POP Chains” on page 238"} .
与\_\_wakeup() 和
\_\_destruct()不同的是，它们无论对象是否被创建都会执行，\_\_toString()方法仅在对象被视为字符串时调用。它允许类在对象被视为字符串时决定如何反应。例如，它可以决定如果对象被传递到echo()或print()函数中时要显示什么内容。您将在第238页的"使用POP链"中看到使用此方法的示例。
A program invokes the `      __call()     ` method when an undefined
method is called. For example, a call to
`      $object->undefined($args)     ` will turn into
`      $object->__call('undefined', $args)     ` . Again, the
exploitability of this magic method varies wildly, depending on how it
was implemented. Sometimes attackers can exploit this magic method when
the application's code contains a mistake or when users are allowed to
define a method name to call themselves.
当调用未定义的方法时，程序会调用\_\_call()方法。例如，对\$object-\>undefined(\$args)的调用将变为\$object-\>\_\_call(\'undefined\',
\$args)。再次说明，这个魔术方法的可利用性因其实现方式而大不相同。有时候攻击者可以利用这个魔法方法，当应用程序的代码存在错误或当用户允许定义方法名称调用自己时。
You'll typically find these four magic methods the most useful for
exploitation, but many other methods exist. If the ones mentioned here
aren't exploitable, it might be worth checking out the class's
implementation of the other magic methods to see whether you can start
an exploit from there. Read more about PHP's magic methods at
[https://www.php.net/manual/en/language.oop5.magic.php](https://www.php.net/manual/en/language.oop5.magic.php){.LinkURL}
.
通常情况下，对于利用这四个魔法方法最为有用。但是还存在许多其他的方法。如果在这里提到的方法不可利用，那么检查类的其他魔法方法实现是否可以从那里开始利用，可能会有所帮助。请参阅https://www.php.net/manual/en/language.oop5.magic.php了解更多关于PHP魔法方法的信息。
#### [ ]{#c14.xhtml#Page_238 .pagebreak title="238"} Using POP Chains {#c14.xhtml#h3-123456c14-0005}
So far, you know that when attackers control a serialized object passed
into `      unserialize()     ` , they can control the properties of the
created object. This gives them the opportunity to hijack the flow of
the application by choosing the values passed into magic methods like
`      __wakeup()     ` .
到目前为止，您已经知道当攻击者控制传递给unserialize（）的序列化对象时，他们可以控制创建的对象的属性。这使他们有机会通过选择传递给像\_\_wakeup（）这样的魔术方法的值来劫持应用程序的流程。
This exploit works . . . sometimes. But this approach has a problem:
what if the declared magic methods of the class don't contain any useful
code in terms of exploitation? For example, sometimes the available
classes for object injections contain only a few methods, and none of
them contain code injection opportunities. Then the unsafe
deserialization is useless, and the exploit is a bust, right?
这个漏洞有时候有效。但这种方法存在一个问题：如果类的声明魔术方法在利用方面没有任何有用的代码怎么办？例如，有时可用于对象注入的类仅包含几个方法，而且它们都没有代码注入机会。那么，不安全的反序列化就无用了，漏洞就会失败，对吧？
We have another way of achieving RCE even in this scenario: POP chains.
A *property-oriented programming (POP) chain* is a type of exploit whose
name comes from the fact that the attacker controls all of the
deserialized object's properties. POP chains work by stringing bits of
code together, called *gadgets* , to achieve the attacker's ultimate
goal. These gadgets are code snippets borrowed from the codebase. POP
chains use magic methods as their initial gadget. Attackers can then use
these methods to call other gadgets.
我们在这种情况下有另一种实现 RCE 的方式：POP
链。属性导向编程（POP）链是一种攻击利用方式，其名称源于攻击者控制了所有反序列化对象的属性。POP
链通过将被称为小工具的代码片段串联在一起来实现攻击者的最终目标。这些小工具是从代码库中借用的代码片段。POP
链使用魔术方法作为它们的初始小工具。攻击者可以使用这些方法来调用其他小工具。
If this seems abstract, consider the following example application code,
taken from
[https://owasp.org/www-community/vulnerabilities/PHP_Object_Injection](https://owasp.org/www-community/vulnerabilities/PHP_Object_Injection){.LinkURL}
:
如果这个看上去抽象的话，不妨看一下以下的应用代码示例，取自https://owasp.org/www-community/vulnerabilities/PHP_Object_Injection:。
    class Example
    {
    1 private $obj;
      function __construct()
      {
        // some PHP code...
      }
      function __wakeup()
      {
      2 if (isset($this->obj)) return $this->obj->evaluate();
      }
    }
    class CodeSnippet
    {
    3 private $code;
    4 function evaluate()
      {
        eval($this->code);
      }
    }
    // some PHP code...
    5 $user_data = unserialize($_POST['data']);
    // some PHP code...
[ ]{#c14.xhtml#Page_239 .pagebreak title="239"} In this application, the
code defines two classes: `      Example     ` and
`      CodeSnippet     ` . `      Example     ` has a property named
`      obj     ` [ 1 ]{.CodeAnnotation aria-label="annotation1"} , and
when an `      Example     ` object is deserialized, its
`      __wakeup()     ` function is called, which calls `      obj     `
's `      evaluate()     ` method [ 2 ]{.CodeAnnotation
aria-label="annotation2"} .
这个应用程序定义了两个类：Example和CodeSnippet。Example有一个名为"obj
1"的属性，当反序列化Example对象时，它的\_\_wakeup()函数被调用，该函数调用obj的evaluate()方法。
The `      CodeSnippet     ` class has a property named
`      code     ` that contains the code string to be executed [ 3
]{.CodeAnnotation aria-label="annotation3"} and an
`      evaluate()     ` method [ 4 ]{.CodeAnnotation
aria-label="annotation4"} , which calls `      eval()     ` on the
`      code     ` string.
CodeSnippet类具有名为code的属性，其中包含要执行的代码字符串，并具有一个evaluate（）方法，该方法在代码字符串上调用eval（）。
In another part of the code, the program accepts the POST parameter
`      data     ` from the user and calls `      unserialize()     ` on
it [ 5 ]{.CodeAnnotation aria-label="annotation5"} .
在代码的另一部分，程序接受用户的POST参数数据，并在其上调用unserialize（）
5。
Since that last line contains an insecure deserialization vulnerability,
an attacker can use the following code to generate a serialized object:
由于最后一行包含不安全的反序列化漏洞，攻击者可以使用以下代码生成序列化对象：
    class CodeSnippet
    {
      private $code = "phpinfo();";
    }
    class Example
    {
      private $obj;
      function __construct()
      {
        $this->obj = new CodeSnippet;
      }
    }
    print urlencode(serialize(new Example));
This code snippet defines a class named `      CodeSnippet     ` and set
its `      code     ` property to `      phpinfo();     ` . Then it
defines a class named `      Example     ` , and sets its
`      obj     ` property to a new `      CodeSnippet     ` instance on
instantiation. Finally, it creates an `      Example     ` instance,
serializes it, and URL-encodes the serialized string. The attacker can
then feed the generated string into the POST parameter `      data     `
.
该代码片段定义了一个名为 CodeSnippet 的类，并将其代码属性设置为
phpinfo（）; 。然后它定义了一个名为 Example 的类，并在实例化时将其 obj
属性设置为新的 CodeSnippet 实例。最后，它创建一个 Example
实例，对其进行序列化，然后对序列化的字符串进行 URL
编码。攻击者可以将生成的字符串输入 POST 参数数据中。
Notice that the attacker's serialized object uses class and property
names found elsewhere in the application's source code. As a result, the
program will do the following when it receives the crafted
`      data     ` string.
请注意攻击者的序列化对象使用了应用程序源代码中其他地方发现的类和属性名称。因此，当程序接收到制作的数据字符串时，它将执行以下操作。
First, it will unserialize the object and create an `      Example     `
instance. Then, since `      Example     ` implements
`      __wakeup()     ` , the program will call `      __wakeup()     `
and see that the `      obj     ` property is set to a
`      CodeSnippet     ` instance. Finally, it will call the
`      evaluate()     ` method of the `      obj     ` , which runs
`      eval("phpinfo();")     ` , since the attacker set the
`      code     ` property to `      phpinfo()     ` . The attacker is
able to execute any PHP code of their choosing.
首先，它会反序列化对象并创建一个 Example 实例。然后，由于 Example 实现了
\_\_wakeup()，程序将调用 \_\_wakeup()，并看到 obj 属性被设置为
CodeSnippet 实例。最后，它将调用 obj 的 evaluate() 方法，运行
eval(\"phpinfo();\")，因为攻击者将 code 属性设置为
phpinfo()。攻击者能够执行任何所选择的 PHP 代码。
POP chains achieve RCE by chaining and reusing code found in the
application's codebase. Let's look at another example of how to use POP
chains to achieve SQL injection. This example is also taken from
[https://owasp.org/www-community/vulnerabilities/PHP_Object_Injection](https://owasp.org/www-community/vulnerabilities/PHP_Object_Injection){.LinkURL}
.
POP链通过链接和重用应用程序代码库中发现的代码实现RCE。让我们看另一个使用POP链实现SQL注入的例子。这个例子也来自https://owasp.org/www-community/vulnerabilities/PHP_Object_Injection。
Say an application defines a class called `      Example3     `
somewhere in the code and deserializes unsanitized user input from the
POST parameter `      data     ` :
应用程序在代码的某处定义了一个名为Example3的类，并从POST参数数据反序列化未经过滤的用户输入。
    class Example3
    {
      protected $obj;
      function __construct()
      {
        // some PHP code...
      }
    1 function __toString()
      {
        if (isset($this->obj)) return $this->obj->getValue();
      }
    }
    // some PHP code...
    $user_data = unserialize($_POST['data']);
    // some PHP code...
Notice that `      Example3     ` implements the
`      __toString()     ` magic method [ 1 ]{.CodeAnnotation
aria-label="annotation1"} . In this case, when an `      Example3     `
instance is treated as a string, it will return the result of the