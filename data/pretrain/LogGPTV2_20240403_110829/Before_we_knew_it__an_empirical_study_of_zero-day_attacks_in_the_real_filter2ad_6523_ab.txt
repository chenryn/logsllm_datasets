virus id s use more than one vulnerability, therefore in Zi it
is possible to observe the same virus id more than once.
Identifying exploits in executables. In the second stage
our aim is to identify the exploits that are detected by each
virus id in Z so that we can search for them in the binary
reputation data. The anti-virus telemetry data set records
the hashes of all the malicious ﬁles identiﬁed by Symantec’s
anti-virus products. We represent each ﬁle recorded in the
system with an identiﬁer (ﬁle hash id ). Certain virus id s
detect a large number of ﬁle hash id s because of the poly-
morphism employed by malware authors to evade detection.
This step results in a mapping of threats to their variants,
Ei = {virus idi, f ile hash idi}.
Identifying executables dropped after exploitation.
When exploits are embedded in non-executable ﬁles, we can
ﬁnd their ﬁle hash id s in the anti-virus telemetry data but
not in the binary reputation data. To detect zero-day at-
tacks that employ such exploits, we query the dynamic anal-
ysis data set for ﬁles that are downloaded after successful ex-
ploitations performed by the ﬁle hash id s identiﬁed in the
previous step. This step also produces a mapping of threats
to malicious ﬁles, but instead of listing the exploit ﬁles in
E we add the dropped binary ﬁles. This may result in false
positives because, even if we detect a dropped executable in
the binary reputation data before the disclosure date of the
corresponding vulnerability, we cannot be conﬁdent that this
executable was linked to a zero-day attack. In other words,
the executable may have been downloaded using other in-
fection techniques. Therefore, this step is optional in our
method.
Analyzing the presence of exploits on the Internet.
Having identiﬁed which executables exploit known cve id s,
we search for each executable in the binary reputation data
to estimate when they ﬁrst appeared on the Internet. Be-
cause the binary reputation data indicates the presence of
these ﬁles, and not whether they were executed (or even if
they could have executed on the platform where they were
discovered), these reports indicate attacks rather than suc-
cessful infections. As some virus id s match more than one
variant, the ﬁrst executable detected marks the start of the
attack. After this step, for each virus id in Z we can approx-
imate the time when the attack started in the real world.
Finally, to ﬁnd the
Identifying zero-day attacks.
virus id s involved in zero-day attacks we compare the start
dates of each attack with the disclosure dates of the corre-
sponding vulnerabilities. If at least one of the ﬁle hash id s
of a threat Zi = {virus idi, cve idi} was downloaded be-
fore the disclosure date of cve idi, we conclude that cve idi
is a zero-day vulnerability and that virus idi performed a
zero-day attack.
4.3 Threats to validity
The biggest threat to the validity of our results is selec-
tion bias. As WINE does not include data from hosts with-
out Symantec’s anti-virus products, our results may not be
representative of the general population of platforms in the
world.
In particular, users who install anti-virus software
might be more careful with the security of their computers
and, therefore, might be less exposed to attacks. Although
we cannot rule out the possibility of selection bias, the large
size of the population in our study (11 million hosts and
300 million ﬁles) and the amount of zero-day vulnerabilities
we identify using our automated method (18, which is on
the same order of magnitude as the 31 reported by Syman-
tec analysts during the same period [37]) suggest that our
results have a broad applicability.
Moreover, for the zero-day vulnerabilities detected toward
the beginning of our data collection period, we may underes-
timate the duration of the attacks. We therefore caution the
reader that our results for the duration of zero-day attack
are best interpreted as lower bounds.
5. ANALYSIS RESULTS AND FINDINGS
In this section, we analyze the zero-day vulnerabilities we
discover with the method described in Section 4. We build
our ground truth starting from a January 2012 copy of the
OSVDB database. The binary reputation data we analyze
was collected between February 2008 and March 2012. As
this is the key component of our method, we can only iden-
tify zero-day attacks that occurred between 2008 and 2011.
We ﬁrst apply our method without the optional step that
takes into account the dynamic analysis data. As shown
in Table 2, we identify 18 zero-day vulnerabilities: 3 dis-
closed in 2008, 7 in 2009, 6 in 2010 and 2 in 2011. The sec-
ond column of the table lists the anti-virus signatures linked
to these vulnerabilities; the signatures are described on the
Threat Explorer web site [38]. While the exploit ﬁles asso-
ciated with most vulnerabilities were detected by only one
anti-virus signature—typically a heuristic detection for the
exploit—there are some vulnerabilities associated with sev-
eral signatures. For example, CVE-2008-4250 was exploited
838CVE-2008-2249
CVE-2008-4250
CVE-2009-0084
Bloodhound.Exploit.214
W32.Downadup
W32.Downadup.B
W32.Fujacks.CE
W32.Neeris.C
W32.Wapomi.B
Bloodhound.Exploit.238
2008-10-23
2008-10-23
2008-02-05
312
450 K
2009-04-14
Not known
CVE-2009-0561
Bloodhound.Exploit.251
2009-06-09
Not known
CVE-2009-0658
Trojan.Pidief
2009-02-20
Not known
CVE-2009-1134
Bloodhound.Exploit.254
2009-06-09
Not known
CVE-2009-2501
Bloodhoud.Exploit.277
2009-10-13
Not known
CVE-2009-3126
Bloodhound.Exploit.278
2009-10-13
Not known
CVE-2009-4324
Trojan.Pidief.H
2009-12-14
2009-12-15
CVE-2010-0028
Bloodhound.Exploit.314
2010-02-10
Not known
CVE-2010-0480
Bloodhound.Exploit.324
2010-04-14
Not known
2010-04-11
Not known
2008-10-23
2009-01-11
2008-09-02
2008-07-25
2009-01-07
2009-01-27
2009-03-15
2008-10-14
2010-03-26
2008-11-29
3
1
7
1
6
6
1
127
1
2
3
1
23
20 K
12
16
3
102
1
3
Table 2: The 0-day vulnerabilities identiﬁed by our automated method.
0-day vulnerability Anti-virus signatures
Disclosure
Date
Public
Exploit
Release
Attack Start
Date
Variants
Hosts
targeted
CVE-2008-0015
Bloodhoud.Exploit.259
2009-07-06
Not known
2008-12-09
Not known
2008-12-28
2008-10-14
1
1
2
1
CVE-2010-1241
CVE-2010-2568
CVE-2010-2862
Bloodhound.Exploit.293
Bloodhound.Exploit.343
W32.Stuxnet
W32.Changeup.C
W32.Ramnit
Bloodhound.Exploit.353
2010-07-17
2010-07-18
2008-02-13
3597
1.5 M
CVE-2010-2883
Bloodhound.Exploit.357
2010-09-08
2010-09-07
CVE-2011-0618
Bloodhound.Exploit.412
2011-05-13
Not known
CVE-2011-1331
Trojan.Tarodrop.L
2011-06-16
Not known
2010-08-04
Not known
2009-03-05
2008-12-14
2010-01-03
2009-03-19
4
2
1
13
18
18
1
32
8 months before the disclosure date by Conﬁcker (also known
as W32.Downadup) [23] and four other worms.
The third column of the table lists the disclosure date
of these vulnerabilities, and the ﬁfth column lists the ear-
liest occurrence, observable in WINE, of a ﬁle exploiting
them. For these vulnerabilities, exploits were active in the
real world before disclosure, which indicates that they are
zero-day vulnerabilities. For comparison, in the fourth col-
umn of Table 2 we also report the exploit release dates, as
recorded in public vulnerability databases such as OSVDB.
This information is available for only 4 out of the 18 vul-
nerabilities and in all these cases the exploit release date is
within one day of the vulnerability disclosure, while working
exploits existed in the wild 8–30 months before disclosure.
This emphasizes the importance of analyzing ﬁeld data when
studying zero-day attacks.
To determine whether these vulnerabilities were already
known to have been involved in zero-day attacks, we manu-
ally search all 18 vulnerabilities on Google. From the annual
vulnerability trends reports produced by Symantec [33–37]
and the SANS Institute [28], as well as blog posts on the
topic of zero-day vulnerabilities, we found out that 7 of our
vulnerabilities are generally accepted to be zero-day vulner-
abilities (see Table 3). For example, CVE-2010-2568 is one
of the four zero-day vulnerabilities exploited by Stuxnet and
it is known to have also been employed by another threat for
more than 2 years before the disclosure date (17 July 2010).
As shown in Table 3, most of these vulnerabilities aﬀected
Microsoft and Adobe products.
The zero-day attacks we identify lasted between 19 days
(CVE-2010-0480) and 30 months (CVE-2010-2568), and the
average duration of a zero-day attack is 312 days. Figure 4
also illustrates this distribution. The last column in Table 2
shows the number of hosts targeted before the zero-day at-
tacks was detected. 15 of the zero-day vulnerabilities tar-
geted fewer than 1,000 hosts, out of the 11 million hosts in
our data set. On the other hand, 3 vulnerabilities were em-
ployed in attacks that infected thousands or even millions
of Internet users. For example, Conﬁcker exploiting the vul-
nerability CVE-2008-4250 managed to infect approximately
370 thousand machines without being detected over more
than two months. This example illustrates the eﬀectiveness
of zero-day vulnerabilities for conducting stealth cyber at-
tacks.
We also ask the question whether the zero-day vulnera-
bilities continued to be exploited up until the end of our ex-
839840Attacks 
100000 
CVE-2010-2568 
CVE-2009-4324 
CVE-2010-0028 
CVE-2008-4250 
CVE-2009-0084 
10000 
1000 
100 
10 
1 
C V E - 2 0 1 0 - 2 8 8 3 
Malware variants 
CVE-2009-4324 
CVE-2010-2883 
CVE-2010-0028 
CVE-2011-1331 
100000 
10000 
1000 
100 
10 
1 
CVE-2009-0658 
CVE-2009-0084 
CVE-2010-1241 
CVE-2010-2862 
CVE-2010-0480 
CVE-2009-0561 
CVE-2009-3126 
CVE-2009-2501 
CVE-2008-2249 
CVE-2008-0015 
CVE-2009-1134 
-60 
-40 
-20 
t0 
20 
40 
60 
80 
-100 
-50 
t0  
50 
100 
150 
Time [weeks] 
Time [weeks] 
(a) Attacks exploiting zero-day vulnerabilities before and after the
disclosure (time = t0).
(b) Malware variants exploiting zero-day vulnerabilities
before and after disclosure (time = t0).
Figure 6: Impact of vulnerability disclosures on the volume of attacks. We utilize logarithmic scales to
illustrate an increase of several orders of magnitude after disclosure.
these vulnerabilities over time. Speciﬁcally, we analyze the
variation of the number of malware variants, as they emerge
in the wild, and of the number of times they are detected.
Figure 6a shows how many downloads (before the disclo-
sure date) and detections (after the disclosure date) of the
exploits for the zero-day vulnerabilities were observed until
the last exploitation attempt. The number of attacks in-
creases 2–100,000 times after the disclosure dates of these
vulnerabilities.
Figure 6b shows that the number of variants (ﬁles exploit-
ing the vulnerability) exhibits the same abrupt increase after
disclosure: 183–85,000 more variants are detected each day.
One reason for observing large number of new diﬀerent ﬁles
that exploit the zero-day vulnerabilities might be that they
are repacked versions of the same exploits. However, it is
doubtful that repacking alone can account for an increase
by up to 5 orders of magnitude. More likely, this increase is
the result of the extensive re-use of ﬁeld-proven exploits in
other malware.
Figure 7 shows the time elapsed until all the vulnerabilities
disclosed between 2008 and 2011 started being exploited in
the wild. Exploits for 42% of these vulnerabilities appear in
the ﬁeld data within 30 days after the disclosure date. This
illustrates the fact that the cyber criminals watch closely the