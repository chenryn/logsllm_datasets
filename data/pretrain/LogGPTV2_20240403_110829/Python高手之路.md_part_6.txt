熊猫爱中国www.xiongmaoi.com
熊猫爱中国
对自己的项目这么做，将代码中的有用信息抽取到文档中，只有让这个过程自动化才有意义
的扩展，它可以分析文档字符串和实际的Python代码并自动生成RESTAPI文档。你也可以
你不得不手工编写RESTAPI文档应处理随之而来的其他问题。
但如果写的是一个 HTTP RESTAPI，Sphinx就只能为你的 API生成Python 端的文档，因此
3.3
些功能还是不错的。
要好得多，尤其是可以利用自动发布工具（如Read The Docs）的时候。
只要能从代码中抽取信息帮助生成文档，都值得去做并且将其自动化。这比手工维护文档
针对其他HTTP 框架，如Flask、Bottle和 Tormado,可以使用 sphinxcontrib.httpdomain
（http://pythonhosted.org/sphinxcontrib-httpdomain/）。我个人的观点是，无论任何时候，
提示
WSME（https://pypi.python.org/pypi/WSME）的创建者们有别的主意。他们开发了一个
有时现成的方案还不够。如果你写的是一个在 Python 内部调用的 API 那么问题不大，
可能你现在并不需要所有这些功能，但是如果未来需要的话，提前知道有模块能提供这
●链接到外部文档。
●项目间使用的链接；
Sphinx还提供了很多其他功能，自带或者通过扩展模块，包括
build succeeded.
HTML主题；
扩展Sphinx
第3章文档
输出为Texinfo和EPUB格式；
图表和公式；
0 failures in cleanup code
 0 failures in setup code
0 failures in tests
1test
本电子书仅限学习交流使用，请勿用于商业用途
---
## Page 42
熊猫爱中国www.xiongmaoi.com
熊猫助你开发自己的扩展模块的小模块。
注意
中描述的那样。主方法 run（)会负责完成从代码中抽取文档的实际工作。
Sphinx 扩展 API(http://sphinx-doc.org/ext/appapi.html#sphinx.application.Sphinx.add_directive)
示例3.1 摘自 sphinxcontrib.pecanwsme.rest.setup 的代码
的单条指令。添加的这条指令需要WSME 控制器的类名是完整的限定名来为其生成文档。
尽管 Sphinx 是用 Python开发的，而且默认也主要面向 Python，但是它有很多可用的扩展
完整的方法列表可以在 Sphinx扩展API（htp://sphinx-doc.org/ext/appapi.html）中找到。
setup(app）的函数。app 对象会包含用来将你的代码连接到 Sphinx 事件和指令的方法。
项目生成文档。
使它可以支持其他语言。所以，即使项目同时使用了多种语言，也可以用Sphinx为整个
（如果模块足够通用的话），并且起个名字。Sphinx需要该模块有个预定义的名为
sphinx-contrib 资源库（https://bitbucket.org/birkenfeld/sphinx-contrib/src）包括一组能够帮
RESTControllerDirective 是个指令类，它必须包含特定的属性和方法，就像在
def setup(app):
要开发 Sphinx，首先是要编写一个模块，最好是作为 sphinxcontrib 的一个子模块
app.add_directive('rest-controller', REsTControllerDirective)
本电子书仅限学习交流使用，请勿用于商业用途
3.3扩展Sphinx
53
---
## Page 43
熊猫爱中国www.xiongmaoi.com
熊猫爱中国
本电子书仅限学习交流使用，请勿用于商业用途
---
## Page 44
熊猫爱中国www.xiongmaoi.com
熊猫爱中国
他们自己的工具。其中最成功的 distutils的继任者便是打包库 setuptools，它提供了更频繁的
你的发布中包含了除原生 Python 之外的C语言模块，它甚至也可以自动处理。
示例4.1使用 distutils 的 setup·PY
的是要创造一种简单的方式供开发人员为最终用户自动化软件安装过程。
4.1
究过它背后的运行机制，也没有探究过如何生成自己的 setup·pY。
到麻烦。你应该已经熟知如何用 setup·py 安装 Python 应用程序和库，但是你可能从未深
网，即便如此 Python 也提供了相应的工具，确保你的用户在安装你的软件的过程中不会遇
第4章→
distutils 的开发在2000 年就停止了。从那时起，一些开发人员开始在其基础上继续开发
就这么简单。用户要生成或安装软件只需通过合适的命令运行 setup·py 即可。如果
From distutils.core import setup
#!/usr/bin/python
distutils 自从1998 年便已经是 Python 标准库的一部分了。它最早由Greg Ward开发，
setup(name="rebuildd",
我敢打赌你将来肯定要分发你的软件。你可能只是想将代码打个压缩包然后上传到互联
简史
description="Debian packages rebuild tool",
packages=['rebuildd'])
url="http://julien.danjou.info/software/rebuildd.html",
author_email="PI:EMAIL",
author="Julien Danjou"，
分发
本电子书仅限学习交流使用，请勿用于商业用途
---
## Page 45
熊猫爱中国www.xiongmaoi.com
熊猫爱中
标准库中的distutils。它与 distutils 和 setuptools 的最明显的区别是，它会将包的元数据存储在纯
所以现在 distribute已经被废弃，setuptools又重新成为处理高级Python 安装的标准方式。
项目合并他们的代码库（http://mailpython.org/pipermail/distutils-sig/2013-March/020126.html）。
结局，这个也不例外。2013年3月，setuptools和distribute 两个开发组决定基于原始的 setuptools
它具有一些超越 setuptools 的优点，包括 bug 更少且支持 Python 3。所有的好故事都有个曲折的
样死去。于是，不久后另一伙开发人员又基于 setuptools 创建了一个新的名为 distribute 的库，
示例4.2使用 setuptools的 setup·pY
了一定程度上的向后兼容。
distutils 仍然是包含在 Python 标准库中的软件打包的一种标准方式，因此 setuptools 也提供
更新和更多的高级功能，如自动依赖处理、Egg 分发格式以及 easy*install 命令。由于
38
尽管这一切已经在发生，还是有另一个名为distutils2的项目在开发中，意欲全面取代Python
最终，setuptools的开发也变得缓慢了，因为人们开始认为它很可能像最早的distutils
 setuptools.setup(
import setuptools
 #!/usr/bin/env python 
第4章分发
name="pymunincli",
classifiers=[
packages=['munin'],
url="http://julien.danjou.info/software/pymunincli/",
license="GPL",
description="munin client library",
author_email="PI:EMAIL",
author="Julien Danjou",
version="0.2",
 "Development Status :: 2 - Pre-Alpha"
"uouaAd :: sbenbuet 6utuueiboid
"Operating System ::Os Independent",
"License :: OSI Approved :: GNU General Public License (GPL)",
"Intended Audience :: Information Technology",
"Intended Audience :: Developers",
本电子书仅限学习交流使用，请勿用于商业用途
---
## Page 46
熊猫爱中国www.xiongmaoi.com
熊猫爱中国
在这部分浪费时间。
个障碍。本节将介绍 pbr，
啃文档。这不是一个清晰明确的任务，如同我们在前面讨论过的，选择什么工具通常是第一
具，也是一个不同的选择，名为 pbr。
4.2使用pbr打包
方文档（http://pythonhosted.org/setuptools/）是最新的。
相关信息要谨慎，正因为上述复杂的历史变迁，所以有大量的文档都是过期的。不过至少官
packaging 的最好的功能同时实现了与打包有关的 PEP 中描述的基本内容。
它正致力于取代 distutils，并将（希望是）成为Python 3.4 标准库的一部分。它包含来自
原因，最终在Python3.3标准库中包含 setuptools 的计划再次落空，这一项目在2012年被废弃
在 Windows 上执行原生脚本的支持，而这两个功能 setuptools 都支持。因为这些以及其他一些
是留有distutisl的一些缺陷，例如，晦涩的基于命令的设计，缺少对入口点（entry point）以及
文本文件 setup.cfg 中，这使得开发人员写起来简单并且外部工具读取也容易。然而，它还
pbr是指 Python Build Reasonableness。这个项目已经在 OpenStack（htp://openstack.org）
你可能已经开发过一些包并试图去写 setup·Py，或者从其他项目复制一个，或者自己
现在我已经用了好几页让你对如此多的分发工具更加迷糊，接下来让我们谈谈另一个工
简而言之，setuptools 是目前分发库的主要选择，但在未来要对 distlib 保持关注。
尽管这5个打包工具是实际工作中最常见的，但还是有许多其他的打包库。在网上搜索
●distlib可能将来会取代distutils。
●distutils2（也称为 packaging）已经被废弃。
●distribute从0.7版本开始并入了 setuptols。
·setuptools，领先的包安装标准，曾经被废弃但现在又继续开发。
●distutils 是标准库的一部分，能处理简单的包的安装。
简单回顾一下。
本电子书仅限学习交流使用，请勿用于商业用途
4.2使用pbr打包39
---
## Page 47
熊猫爱中国www.xiongmaoi.com
熊猫爱中国
获得了灵感，利用 setup.cfg 文件来描述包的用途。
内部启动，并围绕 setuptools 开发了一系列用来辅助包的安装和部署的工具。它从 distutils2
40
·利用Sphinx实现文档自动化;
·基于requirements.txt 做自动依赖安装;
pbr 还提供了其他一些功能，例如：
看着眼熟？没错，处理的方式都是直接受distutils2的启发。
packages =
classifier =
home-page = http://pypi.python.org/pypi/foobar
description-file =
summary = Package doing nifty stuff
author-email = PI:EMAIL
author = Dave Null
就两行代码，非常简单。实际上安装所需要的元数据存储在 setup.cfg 文件中：
name= foobar
setuptools.setup(setup_requires=['pbr'], pbr=True)
[files]
license= MIT
[metadata]
foobar
README.rst
第4章分发
Programming Language :: Python
Environment ::Console
Development Status ::4 - Beta
Operating System :: Os Independent
Intended Audience :: Developers
本电子书仅限学习交流使用，请勿用于商业用途
---
## Page 48
熊猫爱中国www.xiongmaoi.com
面加一个斜杠加载和运行代码：
是一个有着不同扩展名的压缩文件，只是Wheel 归档文件不需要安装。可以通过在包名的后
并且安装了wheel包，那么会自动集成为一个命令：
whee1 (https://pypi.python.org/pypi/whee)。
最终敲定之后变得更加复杂，官方标准同已有标准并不兼容。
setuptools 引入的 Egg 格式只是一个有着不同扩展名的压缩文件。这一问题在官方安装标准
大多使用了一些比较通用的归档格式，但它们的元数据和包的结构彼此并不兼容，例如，由
4.3Wheel格式
并且开发很活跃，所以如果计划分发软件的话，应该认真考虑一下使用 pbr。
positional arguments:
$ python wheel-0.21.0-py2.py3-none-any.whl/wheel -h
这条命令将在 dist 目录中创建.whl 文件。和Egg 格式类似，一个 Wheel 归档文件就
python setup.py bdist_wheel
pip(https://pypi.python.org/pypi/pip）从1.4版本开始支持Wheel。如果正在使用 setuptools
[...]
usage:wheel [-h]
在 Python 出现后的大部分时间里，都没有官方的标准分发格式。尽管不同的分发工具
所有这些对开发人员来说只有一点儿或完全没有任何额外工作要做。pbr 目前维护良好
·基于 gitags 的版本管理。
●针对 git 自动创建文件列表;
基于 git history 自动生成 AUTHORS 和 ChangeLog 文件；
(keygen,sign,unsign,verify,unpack,install,install-scripts,
convert,help)
本电子书仅限学习交流使用，请勿用于商业用途
4.3Wheel格式
---
## Page 49
熊猫爱中国www.xiongmaoi.com
熊猫爱中国
① 参见 PEP 453（htp://www.python.org/dev/peps/pep-0453/）及 ensureepip模块。
3.4中。它可以从 PyPI、tarball或者Wheel（参见4.3节）归档中安装或卸载包。
行为（如忽视系统管理员的最佳实践以及缺少卸载功能）而口碑不好。
Egg 归档文件中安装 Python 模块。遗憾的是，easy_install从一开始就因为它有争议的
4.4
国
其有用。
和/或 Python 实现（CPython、PyPy、Jython 等）。这在需要分发用C语言写的模块时尤
运行.jar 文件那样运行普通的压缩文件：
python foobar.zip/mymod
pip 项目提供了更好的安装包的方式。它的开发很活跃，维护良好，并且被包含在Python
Wheel的优点之一在于其命名转换，它允许指定软件的分发是否针对某一特定架构
这等同于：
python foobar.zip
它的使用很简单：
这等同于：
PYTHONPATH=foobar.zip python -m  main
你可能会惊讶地发现，这并不是由 Wheel格式引入的功能。实际上Python还可以像Java
Downloading/unpacking voluptuous
$ pip install --user voluptuous
Running setup.py egg_info for package voluptuous
Storing download in cache at ./.cache/pip/https%3A%2F%2Fpypi.python.org%2
Downloading voluptuous-0.8.3.tar.gz
第4章分发
Fpackages%2Fsource%2Fv%2Fvoluptuous%2Fvoluptuous-0.8.3.tar.gz
包的安装
本电子书仅限学习交流使用，请勿用于商业用途
---
## Page 50
熊猫爱中国www.xiongmaoi.com
用 sdist命令即可，如示例4.3所示。
4.5