### 1. Introduction to Request Buffering

In a distributed system, the same request may be sent twice, potentially leading to system inconsistencies. To mitigate this, requests are buffered. This technique is effective in a single-client environment because the first request received by the backup always corresponds to the last `set_state` request (assuming clients are single-threaded). The multi-client scenario, however, introduces additional complexities, which will be discussed in the next section.

### 2. Multi-Client Implementation

In a multi-client setting, several challenges arise from the asynchronous nature of distributed programming and the limitations of CORBA’s portable interceptors. In the event of a primary server failure, the backup and remaining clients must agree on the state of the system to avoid inconsistencies. Unlike the single-client case, the backup cannot definitively determine whether the system is in one of three possible states: (i) the client has received a reply, (ii) the client has not yet issued the request, or (iii) the client is about to re-issue the request.

#### 2.1 Challenges in Determining System State

1. **Uncertainty in Request Reception**: The backup cannot be certain it has received all `set_state` requests issued before the crash. In the single-client case, this is managed by numbering the client's requests.
2. **Conflicting Requests from Different Clients**: If the backup is asked to become the primary by a client C1, and the last `set_state` information it received corresponds to a request from another client C2, the backup cannot be sure if C2 has received its reply (case i) or if C2 will re-issue the request (case iii).

   - **Case (i)**: The backup must apply the `set_state` information; otherwise, C2 would see a future that would be lost due to the crash, leading to an inconsistency.
   - **Case (ii)**: The backup cannot apply the `set_state` information, as it would need to re-execute C2's request, resulting in another inconsistency.

#### 2.2 Asynchronous Communication and Synchronization

Due to the use of TCP/IP connections, which are inherently asynchronous, these problems have no general solution. We address this by assuming implicit synchrony, where messages are highly likely to reach their destination within a predefined duration. After a given time window, the primary's reply should have been received by the client, or the client should have re-sent the request to the backup.

An atomic broadcast framework could resolve these issues by imposing a total order on all requests. However, CORBA portable interceptors do not support this, as the communication primitives used by the ORB cannot be adapted using PI mechanisms.

### 3. Performance Evaluation

We evaluated the performance of these fault tolerance mechanisms using a simple banking application. The server implements basic bank account operations, and the client accesses the service through CORBA requests. We compared the latency of client requests in three configurations:

- **A. Standalone Banking Application**
- **B. Banking Application with "Transparent" Portable Interceptors** (to measure interception overhead)
- **C. Fault-Free Execution with Full Primary-Backup Replication**

Our testbed consists of hosts with 1GHz i686 processors running Linux 2.4, interconnected over 100Mb/s Ethernet. The client runs on a different host from the server, and in the fault-tolerant configuration, the primary and backup run on the same host. We conducted 1000 experiments, each involving 1000 invocations (account creation, withdrawal, or deposit), and measured the duration of each experiment.

#### 3.1 Results

Figure 3 shows the response latency (mean, minimum, and maximum values) for configurations A, B, and C. The use of "empty" interceptors increases response latency by 15%, while the addition of fault-tolerant interceptors significantly increases overhead. For a more realistic application, the relative cost of these mechanisms would be lower.

Figure 3.B breaks down the overhead per aspect of the mechanism. Costs include serialization of the primary’s state, transfer of information for replica synchronization, and deserialization on the backup.

### 4. Discussion

The previous section described the use of Java serialization and CORBA portable interceptors to implement a simple replication mechanism. Here, we discuss the advantages and limitations of these reflective mechanisms.

#### 4.1 Advantages

- **Java Serialization**: Provides a portable format for the internal state of Java objects, relieving developers from implementing critical aspects of the replication protocol.
- **CORBA Portable Interceptors**: Enable transparent control of client-server interactions without modifying application-level code. They can be easily inserted and changed based on system configuration and environmental conditions.

#### 4.2 Limitations

1. **Input Parameters Modification**: PIs cannot modify a request’s input parameters, limiting their use for non-functional mechanisms like ciphering.
2. **Output Parameters Modification**: PIs cannot modify a request’s output parameters, complicating the handling of checkpoints.
3. **Request Invocation**: PIs must invoke every request, making it difficult to implement certain fault-tolerant mechanisms.
4. **Communication Between PIs**: PIs cannot communicate directly, requiring workarounds like empty methods.
5. **Concurrency Model**: PIs inherit the concurrency model of their associated CORBA object, limiting their ability to implement event loops.
6. **Request Reordering**: PIs cannot reorder requests, making it difficult to handle multiple clients during a primary-to-backup switch.

### 5. Conclusion

This experimental work demonstrates that simple replication mechanisms can be implemented using standardized interception and serialization mechanisms, such as CORBA Portable Interceptors and Java Serialization. Customized PIs can offer a range of fault-tolerance strategies, provided in a non-intrusive manner. However, our work highlights several limitations in CORBA’s interceptors, which could be addressed by a new generation of portable interceptors to facilitate the implementation of replication-based fault tolerance mechanisms.

### 6. References

[1] OMG, “Common Object Request Broker Architecture (CORBA/IIOP) 3.0.2,” 2002-12-02, 2002.
[2] Sun, “Java Object Serialization Specification,” Sun Microsystems, Technical Report November 1998.
[3] CORBA, “Common Object Request Broker Architecture: Core Specification,” ch.23 Fault Tolerant CORBA, OMG formal/02-12-06, December 2002.
[4] R. Baldoni, C. Marchetti, and A. Termini, “Active Software Replication through Three-tier Approach,” presented at 21st IEEE Symposium on Reliable Distributed Systems (SRDS2002), Osaka, Japan, 2002.
[5] L. E. Moser, P. M. Melliar-Smith, and P. Narasimhan, “A Fault Tolerant Framework for CORBA,” presented at 29th International Symposium on Fault-Tolerant Computing, Madison, Wisconsin, USA, 1999.
[6] R. Friedman and E. Hadad, “A Group Adaptor-Based Approach to CORBA Fault-Tolerance,” IEEE distributed systems online, middleware 2001.
[7] J.-C. Ruiz-García, M.-O. Killijian, J.-C. Fabre, and P. Thévenod-Fosse, “Reflective Fault-Tolerant Systems: From Experience to Challenges,” IEEE Transactions on Computers, Special Issue on Reliable Distributed Systems, vol. 52, pp. 237-254, 2003.
[8] Pattie Maes, “Concepts and Experiments in Computational Reflection,” ACM Conference on Object-Oriented Programming Systems, Languages, and Applications (OOPSLA'87), pp.147-155, Orlando, Florida, October 1987.
[9] G. Agha, S. Frolund, R. Panwar, and D. Sturman, “A Linguistic Framework for Dynamic Composition of Dependability Protocols,” presented at DCCA-3, 1993.
[10] B. Garbinato, R. Guerraoui, and K. Mazouni, “Implementation of the GARF Replicated Object Platform,” Distributed System Engineering Journal, vol2, pp 14-27, 1995.
[11] S. Chiba, “A Metaobject Protocol for C++,” presented at ACM Conference on Object Oriented Programming Systems, Languages, and Applications (OOPSLA’95), Austin, Texas, USA, 1995.
[12] F. Taiani, J.-C. Fabre, and M.-O. Killijian, “Towards Implementing Multi-Layer Reflection for Fault-Tolerance,” presented at DSN’2003, The International Conference on Dependable Systems and Networks, San Francisco, CA, USA, 2003.
[13] M.-O. Killijian, J.-C. Ruiz-Garcia, and J.-C. Fabre, “Portable serialization of CORBA objects: a reflective approach,” presented at 2002 ACM SIGPLAN Conference on Object-Oriented Programming Systems, Languages and Applications, OOPSLA 2002, Seattle, Washington, USA, 2002.