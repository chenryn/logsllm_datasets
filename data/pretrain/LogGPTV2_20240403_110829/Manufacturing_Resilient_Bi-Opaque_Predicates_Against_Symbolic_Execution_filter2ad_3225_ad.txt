Fig. 4: Opaque predicate examples attacking the challenges of symbolic execution.
Figure 3 demonstrates a general framework to compose such
opaque predicates. Suppose the input is a code snippet or a
function which contains arguments. Then we can choose an
argument as the symbolic variable and create a challenging
problem related to the variable. The challenging problem
is selected from a repository of predeﬁned templates. We
may create hundreds of such templates by attacking different
challenges of symbolic execution or employ different problem
settings. Finally, we can create opaque predicates based on the
symbolic variable protected by the problem.
Note that at least one symbolic variable should get involved
in a challenging problem. Because only such problems matter
to symbolic execution. If a problem does not include any
symbolic value, all the problem-related instructions would be
pruned by the symbolic execution engine. This can be proved
with Hore Logic [18] following the principle of symbolic
execution [7]. Because involving symbolic variables is a
prerequisite for composing such opaque predicates, we name
our opaque predicates as symbolic opaque predicates. If a
function has no argument, then we have to introduce fake
arguments or employ global symbolic variables.
B. Bi-Opaque Property
Traditional opaque predicates aim to evade from detection,
such that the obfuscated control-ﬂow graph cannot be easily
simpliﬁed. In other words, they try to mislead adversaries
into falsely recognizing them as normal predicates. Failing to
detect them would cause false negative issues for adversaries.
With symbolic opaque predicates, an interesting observation is
that we may also introduce false positive issues, i.e., we may
mislead adversaries into falsely recognizing normal predicates
as opaque predicates.
In this way, a predicate can be opaque in either a way, which
is the novel bi-opaque property of our approach. Speciﬁcally,
we name the two types of opaque predicates: type I opaque
predicate which intends to introduce false negatives and type
II opaque predicate which intends to introduce false positives.
Next, we use several examples to demonstrate how to compose
symbolic opaque predicates with the bi-opaque property.
C. Demonstration
Suppose Figure 4(a)
is a function to obfuscate,
then
Figure 4(b) demonstrates how to obfuscate it with symbolic
opaque predicates. Speciﬁcally,
the predicates employ the
challenge of symbolic memory.
Symbolic memory is a difﬁcult problem for program analysis
because it involves pointer analysis issues, which can be NP-
hard or even undecidable [19]. In this example, we compose
two integer arrays. The symbolic value j%7 points to an
element within the ﬁrst array, and the element serves as an
offset of the second array. The selected element from the
second array is assigned to a new variable i. In this way, i
is a symbolic value protected by the challenging problem, and
we can compose symbolic opaque predicates with i.
For example, we can compose a type I opaque predicate that
cannot be satisﬁed, such as i == j. With the opaque predicate,
we can insert a bogus code block (i.e., Bogus()) which
would never be executed. The security of the predicate depends
on the capability of symbolic execution engines. If a symbolic
execution engine employs no mechanism to handle symbolic
memory, it would generate incorrect constraint models and
falsely recognize the predicate as a normal predicate.
To compose a type II opaque predicate, we ﬁrst select an
ordinary predicate, j == 7. Then we modify the predicate
by introducing a new condition related to i, such as i ==
669
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 10:23:23 UTC from IEEE Xplore.  Restrictions apply. 
1&&j == 7. The modiﬁcation does not change the semantics
of the original predicate because i == 1 is always true when
j equals 7. Such condition can be easily generated because the
value of i can be calculated from any j. In assembly codes, the
new predicate will be dissembled into two predicates i == 1
and j == 7. The second predicate j == 7 will only be
evaluated if the ﬁrst predicate is true. If a symbolic execution
engine does not support symbolic memory, it cannot solve the
constraint of i == 1 and cannot reach the ordinary predicate
j == 7.
D. Template Generalization
With the above example, we have demonstrated how our
idea works in practice. Now we discuss how to implement the
challenging problem as a template.
In general, a template is a code fragment in a compiler pass,
which inserts, deletes, or modiﬁes the program to be compiled.
Algorithm 1 demonstrates such a template which implements
the challenging symbolic memory problem in Figure 4(b). The
algorithm inputs an icmp instruction and outputs symbolic
opaque predicates. Suppose the icmp compares if a symbolic
variable equals to an integer, the template ﬁrst parses the
instruction and get a symbolic variable symV ar and a
constant ciObj. Then, we deﬁne the types of the two arrays
and initialize them. Next, we can create an integer variable i
and initialize it with the value l2 ary[l1 ary[j%7]].
Based on the protected symbolic variable i, we can directly
create a type I opaque predicate with a comparison instruction
i == j. To compose a type II opaque predicate, we have
to introduce one more icmp instruction. The new instruction
compares if i equals to a value, and it should be true if the
original icmp (i.e., inst) is true. In this example, according
to the array setting, when j equals to a constant value, the
value of i can be determined as j%7 + 1.
E. Template Enrichment
Employing only one template is vulnerable to pattern
recognition. We have to create different opaque predicates to
increase the security level. This can be achieved in two ways.
Firstly, we may create more templates by employing different
problem settings. Secondly, we may create new templates by
employing new challenges.
1) Employing New Settings: For each challenge that sym-
bolic execution is faced with, we may compose a great many
templates. Take the symbolic memory as an example, one
can create arrays with different elements, employ a different
modular, use three arrays instead of two arrays, store the array
with heap instead of stack. All such methods ensure that the
resulting symbolic opaque predicates are different in binaries
or assembly codes.
2) Employing new Challenges: Another orthogonal ap-
proach is to employ new challenges, such as ﬂoating-point
number, covert propagation, and concurrent program.
Figure 4(c) is an example that composes opaque predicates
based on the challenge of ﬂoating-point numbers. A ﬂoating-
point number is an approximation of a real number with a
ﬁxed length of digits in the form of signif icant × be
. It
enables the computer to handle very large numbers or very
small numbers with only limited memory space. As a trade off,
ﬂoating-point numbers sacriﬁce the precision. Floating-point
numbers may incur troubles to symbolic execution because
reasoning over rational numbers and real numbers may lead
to inconsistencies [20, 21]. In this example, because the ﬂoat
type cannot represent 0.1 precisely, no matter which value we
assign to symvar, f == 0.1 cannot be satisﬁed. To compose
a type II predicate, we can change the predicate j == 7 to
(1024 + f == 1024)&&(f > 0)&&(j == 7). The new
predicate aims to fool symbolic execution engines that the
constraint (1024+f == 1024)&&(f > 0) cannot be satisﬁed,
which is true in the domain of real numbers. However, it can be
satisﬁed in the domain of ﬂoating-point numbers. For example,
f = 0.000007 is a solution. In this way, the type II opaque
predicate can be satisﬁed when j = 7, which preserves the
semantics. If a symbolic execution engine cannot handle such
ﬂoating-point numbers, it may falsely regarded f == 0.1 as
a normal predicate, and the type II predicate as an opaque
predicate.
Figure 4(d) demonstrates how to compose opaque predicates
by attacking the challenge of covert propagation. Symbolic
execution requires precise tracking on the propagation of the
symbolic values. However, symbolic values may be propagated
in many ways via I/O (input/output) operations. In this
example, the symbolic value j is propagated via a ﬁle on
the disk and then assigned to i. We can compose a type I
opaque constant i! = j, which will always be false. If a
symbolic execution engine cannot track the propagation, it
would treat i as a constant and regard the opaque predicate as
a normal one. To compose a type II opaque predicate, we can
change the predicate j == 7 to i == 7, where i equals to j.
This modiﬁcation keeps the original semantics of the program.
However, a symbolic executor may consider i as a constant
and reach false conclusions.
Figure 4(e) is another example that introduces a simple
parallel computing problem. Parallel programs are difﬁcult to
handle for symbolic executions because the execution order
is not only determined by the programs, but also by the host
computer. Therefore, we cannot generate a static control-ﬂow
graph for the program, which is a basis for classic symbolic
execution to work. In this example, we create two more threads
that modify the value of a symbolic variable j: one thread
increases in to in + 1, and another decreases in to in − 1.
Due to parallel execution, the two threads compute on the same
value of in simultaneously. The value of i is determined by the
thread that terminates late, which should be the second thread
in our example. Finally, the return value of the ThreadProp
function should equal to j−1. Based on the protected symbolic
variable i, we can compose a type I opaque predicate as
i == j, and a type II opaque predicate as i == 6.
Similar to Algorithm 1, we can extract templates based
intend
on such examples. Note that
to enumerate all such templates to create symbolic opaque
predicates. Rather, we would like to show a general framework
this work does not