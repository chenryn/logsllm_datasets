ID = g
ID, sk1
ID1 , c1
ID = g
q
IDt , c1
q
(cid:4)
(cid:4)
(cid:4)
, M
, r
216
K. He et al.
∗
∗
, T
∗||C
, ssk
IDj , where c0∗
∗
j to obtain c0∗
ID1)||···||(c0∗
IDt , c1∗
∗
, C
1 , σ
∗ and runs c1∗
∗
∗ = (svk
ID1 , c1∗
IDj
, T
Challenge: Adversary A submits a message M
∗ and two distinct sets S0, S1
to C. It is required that A has not issued Extraction Query on ID in Phase 1,
where ID ∈ {IDv, IDw}. C ﬁrst runs (svk
∗)←Gen(1λ) and sets T
∗ = gc.
Then, C issues Hash1 Query on IDv to obtain the tuple (cid:11)IDv, Qv, qv, v(cid:12).
If v = 0, C outputs ⊥ and aborts; else C computes X
v = Z qv. C issues
∗
Hash1 Query on all IDj, where IDj ∈ S0/IDv, to obtain the corresponding
tuple (cid:11)IDj, Qj, qj, j(cid:12). If there exists some j = 1, outputs ⊥ and aborts;
j = e(ga, gc)qj . Meanwhile, for all IDj ∈ S0, C queries Hash2
∗
else computes X
j ). Next, C chooses a ran-
∗
Query on X
IDj = H2(X
←IBE.Enc( (cid:2)params, IDj, svk
∗) for IDj ∈ S0. Let
∗||δ
∗||M
dom δ
∗ ←Sig(ssk
IDt). Last, C runs σ
∗
∗
1 = (c0∗
1 ) and
C
∗) to adversary A.
∗
returns CT
Phase 2: A continues to adaptively issue queries as follows:
Extraction Query: Adversary A issues Extraction Query on ID, where ID (cid:5)∈
{IDv, IDw}, C handles them as in Phase 1.
Decryption Query: Adversary A issues Decryption Query on (cid:11)ID, CT(cid:12). C parses
∗
CT = (svk, T, C1, σ), where C1 = (c0
IDt). If svk = svk
or Ver(svk, T||C1, σ) = 0, C outputs ⊥. Otherwise, C does as follows:
– When CT = CT
– When CT = CT
– When (CT = CT
– When CT (cid:5)= CT
∗ and ID ∈ {IDv, IDw}, C outputs ⊥;
∗ and ID ∈ S0 ∩ S1, C outputs M
∗;
∗ and ID (cid:5)∈ {IDv, IDw}),
∗ and ID (cid:5)∈ S0 ∪ S1) or (CT (cid:5)= CT
C answers as in Phase 1;
∗ and ID ∈ {IDv, IDw}, C computes sk1
ID ← IBE.Extract
( (cid:2)msk, ID). If there does not exist j ∈ {1, 2,··· , t}, such that c1
IDj = c1∗
IDv,
C answers as in Phase 1; Otherwise, if there exists some j ∈ {1, 2,··· , t},
∗ ||δ
∗|| M
← IBE.Enc( (cid:2)params, IDv, svk
∗).
IDj = c1∗
such that c1
When ID = IDv, C outputs ⊥, as the corresponding message is svk
∗||M
∗||δ
∗,
∗ has been rejected. When ID = IDw, C answers as in Phase 1.
as svk = svk
ID1)|| ···||(c0
IDv, where c1∗
ID1, c1
IDt, c1
IDv
(cid:4) ∈ {0, 1}.
Guess: A outputs a bit b
It is easy to observe that, if Z = e(g, g)abc, then C has properly simulated
Game1. If Z is uniform and independent in GT then C has properly simulated
Game2. Therefore, if A can distinguish Game1 and Game2 with a non-negligible
advantage, then C also has a non-negligible advantage to resolve the DBDH
problem. However, the DBDH assumption is hard to resolve. Hence, Game1 and
Game2 are computationally indistinguishable.
Lemma 3. Suppose that the IBE scheme are ANO-CCA secure and WROB-
CCA secure, then Game2 and Game3 are computationally indistinguishable.
Proof. Suppose there exists an adversary A who can distinguish Game2 from
Game3, it is easy to construct a PPT algorithm C who makes use of A to break
the IBE scheme’s ANO-CCA security or the IBE scheme’s WROB-CCA security.
C acts as a challenger and plays with adversary A as follows.
Generic Anonymous Identity-Based Broadcast Encryption
217
Setup: C ﬁrst receives the master public key (cid:2)params from the IBE challenger.
Then C picks generator g ∈R G, α ∈R Zp, computes g1 = gα and chooses hash
functions H1, H2, H3. Next, C gives public parameters params = ( (cid:2)params, g, g1,
H1, H2, H3) to A and keeps α itself.
Phase 1: A adaptively issues queries as follows:
– Extraction Query: On input of an identity ID, C ﬁrst issues Extraction Query
on ID to the IBE challenger to obtain sk1
ID =
H1(ID)α. Finally, C returns skID = ( sk0
ID) to adversary A.
– Decryption Query: On input of (cid:11)ID, CT(cid:12), C ﬁrst parses CT as (svk, σ, T ,
ID1) ||···||( c0
IDt). If Ver(svk, T||C1, σ) = 0,
ID)).
ID for j ∈ {1,··· , t}, C returns ⊥; else C considers the
ID, and then C issues Decryption Query
ID) to the IBE challenger and obtains a result L. If L =⊥, C outputs
(cid:4), if not, outputs ⊥; else
(cid:4)
), checks whether
, r
C1), where C1 = (c0
C outputs ⊥; else C computes sk0
If there is no c0
IDj = c0
smallest index j such that c0
on (ID, c1
(cid:4)||δ
(cid:4)||M
⊥; else parses L as svk
(cid:4)
issues Hash3 Query on (δ
, M
T = gr(cid:3)
(cid:4), checks if svk = svk
(cid:4)) and obtains (δ
(cid:4)
(cid:4)
, M
holds, if not, outputs ⊥; else returns M
(cid:4).
ID, and then C computes sk0
ID, sk1
ID = H1(ID)α and c0
ID = H2( e(T , sk0
IDj = c0
ID1, c1
IDt, c1
, gr(cid:3)
∗
, M
∗||δ
IDβ
∗
, T
∗
, T
, C
IDj
IDj , c1
∗). Let C
∗) and sets T
∗||M
∗||M
∗
∗ = (svk
∗←RZp, computes r = H3(δ
∗
∗)←Gen(1λ), sets m
∗ = svk
∗ and two distinct sets S0, S1 to C. It
Challenge: A submits a message M
is required that A has not issued Extraction Query on ID ∈ {IDv, IDw} in
Phase 1. First, C picks δ
∗ = gr.
Second, C runs (svk
∗ and sends m
∗
, ssk
←IBE.Enc
and (IDv, IDw) to the IBE challenger and receives a ciphertext c1∗
∗) from IBE challenger. Third, C chooses a random R ∈ {0, 1}λ
( (cid:2)params, IDβ, m
IDβ = R. For IDj ∈ S0 ∩ S1, C computes c0
and sets c0∗
IDj = H2(e(g1, H1(IDj))r)
←IBE.Enc( (cid:2)params, IDj, svk
∗
and c1
1 be the concatenation
∗||C
∗ ← Sig(ssk
IDj ) for all IDj ∈ Sβ. Fianlly, C runs σ
∗
1 ) and
of (c0
∗) to adversary A.
∗
returns the challenge ciphertext CT
1 , σ
Phase 2: A continues to adaptively issue queries as follows:
Extraction Query: A issues Extraction Query on ID, where ID (cid:5)∈ {IDv, IDw},
C handles them as in Phase 1.
Decryption Query: A issues Decryption Query on (cid:11)ID, CT(cid:12), C parses CT as
∗ or
(svk, σ, T , C1), where C1 = (c0
Ver(svk, T||C1, σ) = 0, then C outputs ⊥. Otherwise, C does as follows:
– When CT = CT
– When CT = CT
– When (CT = CT
– When CT (cid:5)= CT
∗ and ID ∈ {IDv, IDw}, C outputs ⊥;
∗ and ID ∈ S0 ∩ S1, C outputs M
∗;
∗ and ID (cid:5)∈ S0 ∪ S1) or (CT (cid:5)= CT
∗ and ID (cid:5)∈ {IDv, IDw}),
∗ and ID ∈ {IDv, IDw}, C ﬁrst computes sk0
ID = H1(ID)α
ID, C returns
(cid:5)= c0
ID. If c1
IDβ ,
∗), when ID = IDβ,
and c0
ID = H2(e(T, sk0
⊥; else C considers the smallest index j such that c0
C outputs ⊥. Since c1∗
ID)). For each j ∈ {1,··· , t}, if c0
IDj
IDj = c0
∗||M
C answers as in Phase 1;
← IBE.Enc(IDβ, svk
ID1)|| ···||( c0
IDt, c1
IDt). If svk = svk
ID = c1∗
IDβ
∗||δ
∗||δ
ID1, c1
218
K. He et al.
∗||δ
∗||M
∗||δ
IDβ ) and the corresponding message is svk
∗, as
∗ has been rejected; When ID ∈ {IDv, IDw}/{IDβ}. As the IBE
IDβ ) (cid:5)=⊥ with negligi-
ID) to IBE
IBE.Dec(skIDβ , c1∗
svk = svk
scheme is WROB-CCA secure, then IBE.Dec(skID, c1∗
ble probability. Otherwise, C issues Decryption Query on (ID, c1
challenger as in Phase 1.
Guess: A outputs a bit b