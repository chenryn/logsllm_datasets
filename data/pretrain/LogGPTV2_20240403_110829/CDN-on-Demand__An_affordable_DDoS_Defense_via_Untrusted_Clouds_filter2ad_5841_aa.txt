title:CDN-on-Demand: An affordable DDoS Defense via Untrusted Clouds
author:Yossi Gilad and
Amir Herzberg and
Michael Sudkovitch and
Michael Goberman
An Affordable DDoS Defense via Untrusted Clouds
CDN-on-Demand:
Yossi Gilad
The Hebrew University of Jerusalem
Amir Herzberg
Bar-Ilan University
PI:EMAIL
PI:EMAIL
Michael Sudkovitch
Bar-Ilan University
PI:EMAIL
Michael Goberman
Bar-Ilan University
PI:EMAIL
Abstract—We present CDN-on-Demand, a software-based de-
fense that administrators of small to medium websites install
to resist powerful DDoS attacks, with a fraction of the cost of
comparable commercial CDN services. Upon excessive load, CDN-
on-Demand serves clients from a scalable set of proxies that it
automatically deploys on multiple IaaS cloud providers. CDN-on-
Demand can use less expensive and less trusted clouds to minimize
costs. This is facilitated by the clientless secure-objects, which is
a new mechanism we present. This mechanism avoids trusting
the hosts with private keys or user-data, yet does not require
installing new client programs. CDN-on-Demand also introduces
the origin-connectivity mechanism, which ensures that essential
communication with the content-origin is possible, even in case
of severe DoS attacks.
A critical feature of CDN-on-Demand is in facilitating easy
deployment. We introduce the origin-gateway module, which
deploys CDN-on-Demand automatically and transparently, i.e.,
without
introducing changes to web-server conﬁguration or
website content. We implement CDN-on-Demand and evaluate
each component separately as well as the complete system.
I.
INTRODUCTION
The provision of efﬁcient and Denial-of-Service (DoS)
resilient web services has become an important goal for many
websites. This goal is challenged by the unpredictability of
demand for content, including the ‘ﬂash crowds’ phenomenon,
and by increasingly-powerful DoS attacks. One popular ap-
proach for dealing with this problem is to outsource content
distribution to a Content Delivery Network (CDN). CDNs
deploy servers in various locations where they host proxies of
websites, distributing computational and storage resources and
delivering content to clients from a nearby server. CDNs use
various mechanisms to provide scalable and robust services,
including web-caches that reduce latency and communication
volumes, and ﬁlters against clogging trafﬁc. In particular, the
dispersed servers and high-capacity connectivity of the CDN
proved to mitigate ﬂooding DoS attacks (e.g., see [31]).
However, for smaller sites the cost of a CDN service can be
prohibitive. Indeed, despite their beneﬁts, CDNs appear to be
Permission to freely reproduce all or part of this paper for noncommercial
purposes is granted provided that copies bear this notice and the full citation
on the ﬁrst page. Reproduction for commercial purposes is strictly prohibited
without the prior written consent of the Internet Society, the ﬁrst-named author
(for reproduction of an entire paper only), and the author’s employer if the
paper was prepared within the scope of employment.
NDSS ’16, 21-24 February 2016, San Diego, CA, USA
Copyright 2016 Internet Society, ISBN 1-891562-41-X
http://dx.doi.org/10.14722/ndss.2016.23109
Fig. 1: CDN usage by website popularity. We count how many
of X most popular sites use a CDN.
less popular among small and medium websites. In Figure 1 we
present the usage distribution of commercial CDN providers
among the 32K most popular websites (according to Alexa
website-popularity rank [5]).1 Line 1 of Figure 1 conﬁrms
earlier studies [24], [27]: most websites do not use CDNs,
and furthermore, use of CDN declines for less-popular sites
(from the 2000 place onwards). Note that larger organizations
often use their own infrastructure instead of an external CDN
provider.
One reason for the limited use of CDNs is that smaller
organizations may not be able to afford using CDNs on a
regular basis,
i.e., when not under attack, while temporal
migration to a CDN introduces substantial administrative effort
and ﬁnancial costs. In particular, the CDN market is dominated
by a few providers [24], [27], resulting in a less-competitive
market and hence higher costs.
CDN-on-Demand offers an alternative approach for DoS-
resiliency, which may be a better solution for small and
medium websites. Namely, CDN-on-Demand is a software
defense that automatically handles ﬂash crowds and foils DoS
attacks by managing ﬂexible cloud resources, rather than a
service, as offered by CDNs. Since CDN-on-Demand has an
open design, its security, resiliency and performance properties
can be carefully studied and improved, rather than forcing
customers to rely on hard-to-validate claims of full-service
providers which use proprietary mechanisms. Furthermore,
websites can tailor the system to their needs, e.g., to ensure
1We use the method in [24] to identify whether a website uses a CDN: we
query for its A and AAAA DNS records and check whether (1) the records
point using canonical-name to a CDN, or (2) the website delegates DNS
queries for its domain to a CDN’s name server using an NS record; and
(3) we retrieve the homepage of the website and check whether it obtains
web-objects from one of the popular CDNs.
00.050.10.150.21416642561024409616384CDN PopularityNumber of Popular Websites (log-scale)1. Total Sites using CDNs2. Allow HTTPS and using CDNs3. Valid HTTPS and using CDNsthe same host with an attacker’s (allowing a variety of side-
channel attacks, e.g., [34], [44]). We ﬁnd that most websites
using CDNs either do not support HTTPS connections or do
not present valid certiﬁcates (compare line 1 to lines 2, 3 in
Figure 1), illustrating the problem of securing communication
when using CDNs.
Clientless secure-objects form a complementary mecha-
nism to TLS/SSL, that provides security at the HTTP object
level, i.e., each protected object is individually encapsulated
(authenticated and, if needed, encrypted). Our design is client-
less, namely it does not require changes to browsers and
is readily deployable with today’s websites. To support this
mechanism without introducing changes to clients, our imple-
mentation uses a JavaScript agent that clients automatically
download from the content-origin during their ﬁrst connection
to the website. Web object encapsulation, as an alternative or
complementary mechanism to secure connections, was pro-
posed several times since the very early days of web security
(see [9], [13], [33], [36]). However, all proposals required
installing browser extensions or helper applications to perform
the security functions, e.g., validate authenticity of objects
received, which proved a formidable deterrent to adoption (we
provide an extensive discussion of related works at the end of
the paper). Clientless secure-objects allow CDN-on-Demand
to utilize cheaper untrusted providers and to switch between
providers to optimize costs (without sharing the site’s private
key or certiﬁcate), while avoiding the deployment hurdles of
introducing changes to clients (web-browsers).
Ensuring content-origin connectivity. CDNs offer several
effective defenses against DoS. One basic defense is due
to the fact that most of the website’s content is static and
cached by the CDN and therefore provided directly from the
CDN’s servers, which are difﬁcult to attack (by being well
connected, replicated and protected by ﬁltering rules). CDN-
on-Demand, similarly, leverages the robust connectivity and
distributed infrastructure of IaaS cloud providers to efﬁciently
deliver content. When necessary, e.g., under DoS, CDN-on-
Demand ‘scales-up’ by using more proxy servers in the cloud
to ensure good service.
However, some HTTP requests require communication
with the content-origin, e.g., to support dynamic content or
update web-objects stored on proxies. Such ‘origin-bound
requests’ are vulnerable to additional DoS attacks, focused
on the content-origin and its communication with the proxies.
An attack might clog the connection between the CDN and
the content-origin, blocking requests (or responses). The only
defenses currently offered by CDNs against this threat are (1)
to allow only trafﬁc between the CDN and content-origin,
dropping other packets, and (2) to use a secret, hidden IP
address for the content-origin. These defenses are typically
expensive and not always available. In particular, use of hidden
IP address is often infeasible, especially to smaller websites of
the kind we focus on, who wish to serve clients directly from
their server when trafﬁc load permits. Finally, these defenses
often fail: attackers are often able to discover the ‘hidden’ IP
address (see [40], [26]).
CDN-on-Demand includes the origin-connectivity mech-
anism, which ensures that
the origin’s server and website
content remain reachable despite severe DDoS attacks. CDN-
Fig. 2: Comparative evaluation of CDN service cost per month
desired user experience. In contrast, with service-based CDNs,
even merely comparing and changing providers can be chal-
lenging.
To distribute content in face of strong DoS attacks, CDN-
on-Demand deploys proxy servers on multiple Infrastructure-
as-a-Service (IaaS) cloud providers, optimizing resource use
to minimize expenses. Due to its ﬂexibility, CDN-on-Demand
can signiﬁcantly reduce costs compared to ‘full’ CDN ser-
vices; Figure 2 compares costs between CDN-on-Demand
and several CDNs, including both widely-known CDNs and
relatively inexpensive CDNs. The ﬁgure also compares the
cost of deploying CDN-on-Demand, again comparing costs
using well-known, reputed clouds (EC2 and GCE), to costs
using less-known providers (ProﬁtBricks and VirtualServer).
CDN-on-Demand costs are signiﬁcantly lower, and use of the
less-expensive providers can further save over half of the costs.
Less expensive cloud services, are typically less trusted,
e.g., machines shared with other customers or less popular
providers. In order to securely use such less expensive - and
less trusted - providers, CDN-on-Demand does not require
entrusting providers with the website’s private key or certiﬁ-
cate. This also solves an important concern with CDNs [24].
We achieve this property by protecting the website content,
delivered to clients from CDN-on-Demand, using a novel
clientless secure-objects mechanism.
Reducing trust in CDN proxies. Currently, the only content-
security mechanism available using standard web clients is
HTTPS (i.e., SSL/TLS), securing the communication chan-
nel between clients and proxies, but leaving the proxy with
complete access to the content. Furthermore, Liang et al. [24]
show that there are currently two options to support HTTPS
connections using CDNs, both problematic. In the ﬁrst option,
the website shares its private key with the CDN; this presents
challenges, for example when the website decides to switch
to another CDN provider. In the second option, the website
allows a certiﬁcation authority to issue the CDN a certiﬁcate.
As shown in [24], this approach is also vexed, since websites
have difﬁculty revoking the certiﬁcate issued to the CDN.
Note that even if the CDN operator is honest, one of its
servers may be compromised; it may store copies of the data
or keys in vulnerable locations, or deploy a web-server on
2
 0 100 200 300 400 500 600 700CloudflareAmazon CloudfrontMicrosoft AzureFastlyCdn77MAXCDNCacheflyCDN-on-Demand(EC2,GCE)CDN-on-Demand(ProfitBricks,VirtualServer)USDon-Demand deploys manager servers that monitor performance
of the content-origin; when loss-rates grow,
the managers
deploy proxies over IaaS clouds and modify the website’s
DNS mapping, directing clients to proxies. In order to ensure
that communication between the content-origin and the proxies
remains possible (to support dynamic content, updates and
clientless secure-objects), CDN-on-Demand uses a different
mechanism than suggested by today’s CDNs: the system au-
tomatically establishes a clogging-resilient tunnel between the
content-origin and CDN-on-Demand. This tunneling defense
does not require hiding the content-origin’s IP addresses. In-
stead, it performs efﬁcient whitelist ﬁltering using the proxy’s
IP addresses and randomized service port numbers, to allow
only proxies to access the content-origin server, combined with
redundant coding,
to facilitate loss-tolerant communication
with the content-origin.
Organization: Section II presents an overview of CDN-
on-Demand. Section III describes the clientless secure-objects
mechanism. Section IV describes the origin-connectivity
mechanism. Section V describes the origin-gateway module,
which facilitates deployment of CDN-on-Demand with ex-
isting websites. Section VI presents the proxy management
mechanisms and Section VII evaluates CDN-on-Demand’s
performance and cost using our prototype. Sections VIII and
Section IX present related works and our conclusions.
II. SYSTEM OVERVIEW
This section presents an overview of CDN-on-Demand’s
design. We ﬁrst describe the properties of the system, which
match the goals outlined in the introduction. We then illustrate
the deployment scenario, highlighting the system’s compo-
nents. Lastly, we describe the system’s bootstrap mechanism,
which facilitates its ‘on-demand’ property.
A. Properties
Robustness to DoS attacks. CDN-on-Demand ensures avail-
ability of all website content even when under severe DoS
attacks, in particular, bandwidth-DoS attacks that attempt to
clog communication to the website.
Secure use of untrusted providers. To allow maximal ﬂexi-
bility and reduce costs, CDN-on-Demand deploys over multi-
ple low-cost IaaS-cloud providers. It ensures content-security
against rogue providers or compromised cloud machines.
Efﬁcient resource utilization. To establish an affordable sys-
tem, CDN-on-Demand does not introduce signiﬁcant overhead
or costs when the website is not under attack or handling a
ﬂash-crowd. When the load on the content-origin server is too
high, CDN-on-Demand automatically allocates the resources