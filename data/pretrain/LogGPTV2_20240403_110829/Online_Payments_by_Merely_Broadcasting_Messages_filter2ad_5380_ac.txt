### Bob's Representative Replica and Dependency Certificates

Bob’s representative replica is responsible for collecting and aggregating CREDIT messages related to the same incoming payment. These messages are then consolidated into a dependency certificate, which is stored in Bob’s xlog. In the event of a failure in Bob’s representative, the certificate is not lost; it is permanently stored as CREDIT messages across the replicas that approved the payment, allowing for its reconstruction from these replicas.

Replicas must track used certificates to ensure that each payment is applied only once. This prevents replicas from mistakenly applying a dependency twice, such as in a replay attack. The pseudocode for adjusting Listings 3 and 4 to account for dependencies can be found in [27, Appendix B].

### Role of Certificates in Sharded Environments

Certiﬁcates play a crucial role in sharded environments, as they are transferable across shards. This allows Bob to spend the money mentioned in the dependency not only within his representative’s shard but also across different shards (§V). When Bob submits an outgoing payment, his representative replica attaches the accumulated dependencies alongside the payment.

### Comparison: Astro I vs. Astro II

Astro II is well-suited for environments with limited bandwidth, such as wide-area networks (WANs), while Astro I has lower computational requirements and is better suited for systems where computing resources are scarce. With a batching scheme, the cost of digital signatures in Astro II can be amortized, making it more efficient in typical wide-area network deployments where bandwidth is the limiting factor. Our experimental evaluation (§VI-C) supports this hypothesis.

The two systems handle transitive transactions differently. Astro I queues insufficiently funded transactions until enough funds arrive, while Astro II uses a dependencies mechanism to prove that the spender has sufficient funds to issue a payment. Additionally, Astro II is amenable to sharding, which simplifies the transfer of trust between shards using digital signatures.

### Asynchronous Sharding in Astro II

In our payment protocol (§III), we initially assumed full replication, where all replicas maintain a complete copy of the system state and approve and settle every payment. However, this design faces scalability issues as the number of replicas and clients increases. To address these, Astro II implements sharding, a well-known technique for scaling out both in terms of replicas and clients.

In Astro II, each shard executes an instance of the basic payment protocol for its associated clients. After broadcasting and approving a payment, honest replicas in the spender’s shard unicast CREDIT messages to the beneficiary’s representative in another shard. These messages include all details of the payment and a signature indicating approval. The representative of the beneficiary interprets f+1 distinct CREDIT messages as a dependency certificate, proving the payment’s acceptance by the spender’s shard. This certificate is stored and added to the beneficiary’s balance when their next outgoing transaction is settled.

Traditional sharded designs use a 2PC protocol, which relies on synchrony and has a delay of 3 communication steps, with a complexity of O(m) or up to O(m²) in Byzantine cases. In contrast, our protocol based on CREDIT messages requires only one communication step and has a complexity of O(m). Our experiments with Astro II implementing the Smallbank Application [31] show negligible overhead (§VI-C2).

### Experimental Evaluation

We evaluate the performance of Astro I and II against a consensus-based baseline, BFT-SMaRt, using Amazon EC2. Each replica runs on a separate t2.medium VM, equipped with 4GiB of RAM and 2 vCores, deployed across four European regions. Clients are placed in Ireland, and each request represents a payment of about 100 bytes.

For throughput, we measure the number of payments settled per second (pps) over a 60-second runtime, averaged across 3 runs. BFT-SMaRt clients connect to all replicas, while Astro clients connect to a single, random replica.

### Performance Results

Our microbenchmarks show that Astro II outperforms BFT-SMaRt and Astro I, especially at larger system sizes. Figure 3 illustrates the throughput evolution as a function of system size, with a log-scale axis to highlight performance differences.

---

This optimized text provides a clearer, more coherent, and professional presentation of the original content.