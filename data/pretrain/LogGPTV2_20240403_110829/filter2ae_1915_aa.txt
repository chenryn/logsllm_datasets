# 前言
目前，越来越多的企业选择将企业的域环境部署到云服务器中，虽然关于Windows的活动目录架构研究越来越多，但是云上域的相关介绍却少之又少，Dirk-jan
Mollema通过对Azure AD的深入研究，结合自己开发诸多工具的经验，编写了ROADtools。
# ROADtools - 微软Azure AD渗透框架
在过去的一年半中，我对Azure AD及其工作方式进行了大量的摸索。 Azure
AD在企业中越来越普遍，因此安全性也变得越来越重要。尽管传统的Windows Server Active
Directory已经拥有大量的研究和工具，但我认为Azure
AD在这方面是落后的。在本文中，我将介绍ROADtools框架中的第一个工具：ROADrecon。该框架是在我研究期间开发的，希望对任何想要分析Azure
AD的人（无论是从红队还是从蓝队的角度）都有所启发。这篇文章是该系列文章的第一部分，在该系列文章中，我将深入介绍Azure AD和ROADtools框架。
ROADtools和ROADrecon都是免费的开源工具，可以在我的[GitHub](https://github.com/dirkjanm/ROADtools)上找到。我还直播编写了此处的大多数内容，您可以[在油管上观看](https://www.youtube.com/watch?v=o5QDt30Pw_o)。
# 为什么使用这个框架
每当我发现自己在探索新网络或研究新主题时，我都想通过一种易于理解的方式去了解尽可能多的信息。在Active
Directory环境中，使用LDAP来查询信息相对简单，并且有许多工具可以查询此信息并将其转换为更易于使用的格式。我之前编写了一个简单的工具[ldapdomaindump](https://github.com/dirkjanm/ldapdomaindump)，试图保存所有可以离线收集的信息，以便我能快速知道“该用户还属于哪一个组”或“他们是否有对系统X有价值的组”？
后来，很多公司经常使用Microsoft Office 365并将其产品迁移到Azure，实际Azure上并没有一个工具可以让人快速了解其环境。 Azure
Portal需要通过多次点击才能找到需要内容，并且可以禁用除管理员以外的任何用户。各种Powershell模块、.NET库和其他查询Azure
AD的官方方法对它们提供的信息、身份验证方法和适用于它们的限制都提供了不同程度的支持。当研究Azure
AD时，我希望有一种方法，可以使用任何身份验证方法（无论是否合法获得）来访问所有可能的信息，并且可以离线使用。由于没有一种官方方法可以提供这种可能性，我很快意识到构建自定义框架是实现它的唯一方法。因此，我为自己设定了一些目标：
  * 为红队和蓝队提供工具，以一种便捷的方式浏览所有Azure AD数据。
  * 从互联网端显示可用的丰富信息，他可以是拥有一套有效凭证的任何人。
  * 更好地了解Azure AD的工作原理和可能性。
  * 提供一个框架，人们可以在该框架上建立并扩展其用例。
从编写ldapdomaindump的过程中，我确实学到了一些东西，它将所有信息保留在内存中，直到计算出所有递归组成员关系为止，然后将其写入磁盘。正如预期的那样，在其中有数千个用户的环境中，这种实用性相当糟糕。我花了很多时间思考如何做（还编写了更多的实际代码），而忽略了所有访问Azure
AD的方式，所以今天是 **R** ogue **O** ffice 365 and **A** zure (active) **D** irectory
tools的第一个版本！
# ROADrecon
这个框架中的第一个(可能也是最常用的)工具是ROADrecon。简而言之，它是这样做的:
  * 使用自动生成的元数据模型在磁盘上创建SQLAlchemy支持的数据库。
  * 使用Python中的异步HTTP调用将Azure AD图中的所有可用信息转储到此数据库。
  * 提供插件来查询这个数据库并且输出它到一个有用的格式。
  * 在Angular中提供一个广泛的接口，可以直接查询离线数据库进行分析。
## 从哪里获取数据
因为Azure AD是一种云服务，所以没有办法逆向它是如何工作的，也没有一个中央存储库来存储你可以访问的所有数据。因为Azure AD与Windows
Server AD完全不同，所以也没有LDAP来查询目录。在研究Azure并查看Azure Portal中的请求时，我注意到Azure
Portal在调用Azure AD图的另一个版本，即`1.61-internal`版本。
Azure AD图的内部版本比微软提供的任何官方API都要公开更多的数据。我谈到了一些有趣的东西，你可以在我的[BlueHat Seattle
talk](https://dirkjanm.io/assets/raw/Im in your cloud
bluehat-v1.0.pdf。io/assets/raw/Im在你的云bluehat-1.0.pdf)里发现这个API。虽然人们可能不应该使用这个版本，但它仍然对任何用户都是可用的。默认情况下，即使当Azure
Portal受到限制，也可以以一个通过身份验证的用户身份查询有关该目录的几乎所有信息。
下一个问题是如何以结构化的方式在本地存储这些数据。API将所有内容以JSON对象的形式进行流处理，这种格式对于传输数据很有用，但当存储和搜索数据却不是这样。所以理想情况下，我们应该有一个数据库，其中对象及其关系被自动存储和映射。为此，ROADrecon使用SQLAlchemy对象关系映射器(ORM)。这意味着，ROADrecon定义对象的结构及其关系，SQLAlchemy决定如何从底层数据库存储和检索这些对象。为了创建对象结构，ROADrecon使用Azure
AD图公开的OData元数据定义。这个XML文档定义了目录中的所有对象类型、以及它们的属性和关系。
我写了一些相当简陋的代码，将大部分元数据XML自动转换为整洁和定义良好的数据库结构，如下所示:
然后SQLAlchemy为这个模型创建数据库，默认情况下是一个SQLite数据库，但是也支持PostgreSQL(在我的测试中，性能差异很小，但是SQLite看起来稍微快一些)。这样做的主要优点是事后查询数据非常容易，而不需要自己编写任何SQL查询。
这个数据库模型实际上不是ROADrecon的一部分，而是roadlib,
ROADtools的中央库组件。这样做的原因是，如果你想构建一个外部工具，与ROADrecon填充的数据库接口交互，你实际上不需要自己导入ROADrecon及其所有依赖。相反，您可以导入包含数据库逻辑的库，它不依赖于ROADrecon用于转换和显示数据的所有第三方代码。
## 导出数据
在Azure AD中，ROADrecon使用3个步骤来转储和探索数据:
  1. 认证 - 使用用户名/密码、访问令牌、设备代码流等
  2. 将数据转储到磁盘
  3. 浏览数据或使用插件将其转换为有用的格式
### 认证
身份验证是开始收集数据的第一步。ROADrecon提供了相当多的认证选项:
    usage: roadrecon auth [-h] [-u USERNAME] [-p PASSWORD] [-t TENANT] [-c CLIENT] [--as-app] [--device-code] [--access-token ACCESS_TOKEN]
                          [--refresh-token REFRESH_TOKEN] [-f TOKENFILE] [--tokens-stdout]
    optional arguments:
      -h, --help            show this help message and exit
      -u USERNAME, --username USERNAME
                            Username for authentication
      -p PASSWORD, --password PASSWORD
                            Password (leave empty to prompt)
      -t TENANT, --tenant TENANT
                            Tenant ID to auth to (leave blank for default tenant for account)
      -c CLIENT, --client CLIENT
                            Client ID to use when authenticating. (Must be a public client from Microsoft with user_impersonation permissions!).
                            Default: Azure AD PowerShell module App ID
      --as-app              Authenticate as App (requires password and client ID set)
      --device-code         Authenticate using a device code
      --access-token ACCESS_TOKEN
                            Access token (JWT)
      --refresh-token REFRESH_TOKEN
                            Refresh token (JWT)
      -f TOKENFILE, --tokenfile TOKENFILE
                            File to store the credentials (default: .roadtools_auth)
      --tokens-stdout       Do not store tokens on disk, pipe to stdout instead