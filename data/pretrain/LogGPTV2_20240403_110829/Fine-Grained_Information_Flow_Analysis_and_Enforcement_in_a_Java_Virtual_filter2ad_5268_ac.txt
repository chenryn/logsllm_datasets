An assignment statement always represents a ﬂow of infor-
mation from a right-hand side expression (RHS) to a left
hand side (LHS). Afterwards, the LHS identiﬁer should get
a label which is at least as restrictive as the label of RHS
expression. If, after the assignment, the LHS identiﬁer does
not contain any information about its previous value, then
the least restrictive label of the LHS variable which is as re-
strictive as the label of RHS is the label of the RHS. For all
assignments other than an assignment to an array element,
the label of the LHS is the label of the RHS expression.
The label of an array represents all the elements in the ar-
ray, hence when there is an assignment to an array element
(of unknown index), the label of an array should be as at
least as restrictive as its current label and the label of the
RHS expression.
3.4.5 Expressions
An expression consists of one or more operands and an op-
erator acting on it. For unary expressions, the label of the
operand is the label of the expression. For expressions with
multiple operands, the label of the expression is the! of
the labels of the operands.
IF Statements
3.4.6
If statements are responsible for an implicit ﬂow of infor-
mation. We therefore raise the value of pc to be at least as
restrictive as the label of the branching condition i.e. pc =
pc! condition. A condition is a type of an expression, and
its label is calculated just like any other binary expression.
3.4.7 Unconditional Goto and Break Statements
An unconditional goto statement or a break statement do not
lead to an explicit ﬂow of information. They purely affect
the control ﬂow of a program and may lead to some implicit
information ﬂow. Static analysis takes such implicit ﬂows
into account.
3.4.8 Exceptions
For dynamic analysis, we consider exceptions as uncondi-
tional jumps, either to a catch statement in the method or to
method exit if the method does not handle that exception.
There is no implicit or explicit ﬂow of information. Excep-
tions purely affect the control ﬂow graph of the method,
which affects the static analysis. We discuss the effects
of exceptions to the analysis and how they can be used as
covert channels in some more detail below.
3.4.9 Return Statements
Similar to exceptions and unconditional goto statements, re-
turn statements are also considered as unconditional jumps
to the exit block of a control ﬂow graph. It is the responsi-
bility of the method to assign the label of the return value
to pcLabel of the global class before returning; therefore
statements are instrumented appropriately to do this at all
method exits.
3.5. Static Analysis
Purely dynamic information ﬂow techniques do not have
information about all paths of execution to make safe de-
cisions about declassifying pc. This makes them too con-
servative. Hybrid information ﬂow analysis uses a dy-
namic technique without being overly conservative by tak-
ing help from static analysis. Statically collected informa-
tion about all branches of execution is communicated to the
runtime mechanism. The runtime mechanism then declas-
siﬁes pc whenever it is safe to do so. Before declassifying
the pc, it raises the labels of all the variables with implicit
information to be as high as the pc. This ensures that all
469469
entities that have implicit information about the condition
have adequately high labels before the value of pc is low-
ered. This approach can also be thought of as emulating
the effects of calculating all labels on all branches. Hence
an observer will not be able to determine which branch got
executed.
Static analysis provides the following information to the
runtime mechanisms: (1) all the variables that have implicit
information about a condition, and (2) all points in the con-
trol ﬂow graph where there is no implicit information about
a condition. These points are called declassiﬁcation points
for pc.
We use the immediate postdominator of a conditional
statement as a declassiﬁcation point. To understand why
an immediate postdominator is a safe declassiﬁcation point,
consider how the control ﬂow of a program can be used for
implicit ﬂows. If the control ﬂow of a program is a straight
line with no conditional jumps, then all the nodes will be
executed and the knowledge of an execution of a node will
not indicate any additional information about the program.
However on conditional jumps, the value of the condition
determines which nodes get executed and therefore knowl-
edge of whether a node executed can be used to infer the
value of the condition. There is an implicit ﬂow of informa-
tion from the condition to all the nodes whose execution is
affected by the condition.
By deﬁnition, a postdominator node always gets exe-
cuted irrespective of the value of the condition, hence there
is no implicit information about the condition in the con-
trol ﬂow at that point. Therefore pc, which tracks the label
of implicit information in the control ﬂow graph can be re-
calculated at that point without the label from the condition.
We instrument code at the immediate postdominator node to
calculate the new value of the pc. Recalculating the pc may
not always lower its value, since the control ﬂow may still
contain information about conditional jumps that occurred
even earlier in the control ﬂow graph.
We use a simple backward dataﬂow analysis to ﬁnd post-
dominator information about the graph. The dataﬂow equa-
tions for the analysis are given below. This algorithm is
derived from the dominator algorithm described in [12].
$p ∈ successor(n)
Dom(p) ∪ n
P ostdom(n0) = n0
P ostdom(n) = 
Static analysis is also responsible for identifying and in-
strumenting code to ensure that the labels of all the variables
that have implicit information about the condition are raised
as high as the label of the condition before declassifying pc.
Implicit information ﬂows from the condition variable to all
the variables that are assigned in all the branches of the con-
dition.
We use side-effect analysis to identify all the variables
that can be assigned under the condition. Side-effect anal-
ysis is a whole program analysis that computes all possi-
ble side-effects for each statement. This analysis in turn is
dependent on points-to analysis which ﬁnds all possible ob-
jects that a particular reference may point to at run time. The
precision of the side-effect analysis has a big effect on the
precision of our static analysis. However, we implemented
our analysis in a way that a new side-effect analysis can be
easily plugged in, with very little changes to the code.
After we identify all the variables that can change under
a condition, we instrument the code to increase their labels
to be at least as strict as program counter label in the imme-
diate postdominator node. Once we have raised the labels of
the affected variables, we declassify the pc. Declassifying
before this point would be unsafe.
3.6. Unchecked Exceptions
A limitation of our analysis is its inability to handle
implicit ﬂows through unchecked exceptions. Unchecked
exceptions are exceptions that are not caught within the
method raising the exception. In Java, many bytecode in-
structions can potentially throw an exception such as null
pointer, divide by zero, and array out of bounds.
From a static analysis point of view, an unchecked ex-
ception is an additional edge in the control ﬂow graph from
the instruction throwing it to the method exit. If not han-
dled properly, it can leak an arbitrary amount of information
through implicit ﬂows. In the following Java example, one
can know the value of secret by counting the number of *’s
that are printed.
i=0;
while(true){
i++;
if (secret == i)
throw MyException;
print(’*’);
}
Unfortunately, handling every unchecked exception
would make our analysis overly conservative as there will
be an edge from every bytecode that can throw an exception
to the exit block. Since there are so many bytecodes that can
potentially throw unchecked exceptions, most of the nodes
in the control ﬂow graph would have exit block as their im-
mediate postdominator. This limitation is an inherent draw-
back of using Java. It applies equally to information-ﬂow
systems extend the Java language such as Myers’ Jﬂow and
Jif [30, 31].
470470
Section 1
3.50
3.00
2.50
2.00
1.50
1.00
0.50
0.00
Arithmetic Assignment
Cast
Create
Array
Create
Objects
Exceptions Math
Method
Serial
Functions
Calls
read/write
Figure 4. JavaGrande Section 1, normalized slowdowns relative to the unmodiﬁed benchmarks.
4. Implementation and Results
We have implemented the described hybrid information
ﬂow system for Java using the Soot framework [36] for the
underlying bytecode analysis. We used IBM’s JikesRVM
as our virtual machine platform. To assess the performance
overhead of our analysis, we benchmarked the performance
of the resulting prototype using the JavaGrande [11] Ver-
sion 2.0 benchmarks. These benchmarks consists of three
sections. They are:
• Section 1 – Low Level Operations: low level opera-
tions such arithmetic, assignments, casts, method calls,
object creation, math functions, serial read/writes, and
exception handling.
• Section 2 – Kernels: operations such as FFT, Fourier
coefﬁcient analysis, and matrix multiplication, which
are frequently used in scientiﬁc applications.
• Section 3 – Large Scale Applications: large-scale ap-
plications that use large amounts of processing, I/O,
network bandwidth or memory. The applications in-
cluded are computational ﬂuid dynamics, monte carlo
simulation, and 3D ray tracer.
Calculating labels at runtime for a ﬁne-grained analysis
can incur a substantial overhead. We were conscious about
this and structured our code in ways that made optimiza-
tions opportunities explicit to the compiler or the JIT. For
example, we laid out objects in such a way that the ﬁeld
offset can be resolved at compile time. Also, for instance
ﬁelds, the object offset is made final so that the compiler
can optimize away the calculation of the instance ﬁeld off-
set.
During the instrumentation phase, we focused on the
semantics of label calculations and did not optimize for
any redundant label calculations. In a later stage, we ran
standard compiler optimizations that are built into the Soot
framework. Since we optimized instrumented bytecode us-
ing Soot’s optimizations, we also performed the same opti-
mizations for the unmodiﬁed benchmarks to present a fair
comparison.
We ran the benchmarks on a Pentium-4 processor at
a clock frequency of 1.7 GHz, running the Linux kernel
2.6.12 with 1 Gigabyte of memory. The JikesRVM image
was created using the “production” conﬁguration. Both the
modiﬁed and unmodiﬁed benchmarks were optimized us-
ing the soot -O ﬂag, which provides simple intraprocedu-
ral bytecode optimizations such as common subexpression
elimination.
Figure 4 shows the result of the Section 1 micro bench-
marks. The diagram presents the slowdown as a factor of
the unmodiﬁed benchmarks normalized to 1. The calcula-
tion is α/β, where α is the operations/second of unmodi-
ﬁed benchmarks and β is the operations/second for instru-
mented code with information ﬂow analysis. To interpret
the results, ‘x’ means that the instrumented application with
information ﬂow analysis ran ‘x’ times slower than the un-
modiﬁed application. Smaller numbers are better.
Most of the micro benchmarks have slowdowns of 25-
50% relative to the original code. Assignment as expected
has the highest overhead and is 3 times slower that the orig-
inal. This is because assignment is where explicit ﬂow of
information happens, and hence there is a need to recalcu-
late the label for the right hand side. For every assignment,
the following two calculations are required: (1) calculation
of the RHS label, and (2) OR’ing the RHS label with the pc,
to ensure that the resultant label is higher than the program
counter label.
Calculation of the RHS label depends on whether it is
a ﬁeld and whether it is local. For locals, the label access
is inexpensive since it is stored in another label. However,
471471
Section 2
Section 3
3
2.5
2
1.5
1
0.5
0
Series
LUFact
HeapSort
Crypt
FFT
SOR
Sparse
Matmult
2.5
2
1.5
1
0.5
0
MolDyn
MonteCarlo
RayTracer
AlphaBetaSearch
Figure 5. JavaGrande Sections 2 & 3, normalized slowdowns relative to the unmodiﬁed benchmarks.
for ﬁeld accesses depending on whether the ﬁeld is static
or an instance ﬁeld, the label accesses are different. For
static ﬁelds, it is a lookup into the static label array as the
location is statically determined. For instance ﬁelds, there
is a ﬁeld lookup to ﬁnd the object offset, an addition with
the ﬁeld offset, an array access, and an OR operation with