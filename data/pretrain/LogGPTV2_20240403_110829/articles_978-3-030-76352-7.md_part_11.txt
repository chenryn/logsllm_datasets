H.Hacidetal.(Eds.):ICSOC2020Workshops,LNCS12632,pp.63–66,2021.
https://doi.org/10.1007/978-3-030-76352-7_9
64 X. Liu et al.
and reasoning interfaces based on graph embedding models. Those application
interfaces could be used to develop third-party applications.
Theplatformprovidesaprocessthathasfourmainphases:graph namespace
applying, knowledge graph schema creating, resource uploading, graph embedding
model training. In the first phase, the platform handles requests from a tenant
and creates a graph namespace, which is an environment for identifying one
tenant’sgraphdataandseparatingfromothers’graphdata.Inthesecondphase,
tenants create knowledge graph schemas using GUI provided by the platform,
after system manager examines and verifies those schemas, the platform aligns
and merges those schemas. In the third phase, tenants upload resources using
REST API provided by the platform, and those resources would be integrated
into a knowledge graph in the graph namespace automatically. In the fourth
phase, the platform will train and deploy several graph embedding models such
as TransE [2], TransH [9], and TransD [3] according to tenants’ needs.
Therestofthepaperisorganizedasfollows.InSect.2,wepresentanoverview
of the platform, while in Sect.3 we describe our demonstration scenario. In
Sect.5, we conclude and outline future work.
2 System Overview
We provide the architecture of the platform, as shown in Fig.1. In the architec-
ture, the platform has five main components: Web Frontend, Backend Service,
Knowledge Graph Construction Service, Graph Embedding Model Management
Service, Graph Database Management Service.
Fig.1. The platform architecture
As shown in Fig.1, tenants mainly interact with the web frontend. A tenant
couldapplyforgraphnamespace,viewgraphnamespacestatus,anddeletegraph
A Crowdsourcing-Based Knowledge Graph Construction Platform 65
namespace through interacting with web frontend. The tenant could create and
edit graph schema, and after the schema gets verified, the tenant could get the
REST API token for uploading resources. Also, the tenant could start a graph
embedding model training job. The web frontend is developed using React and
get data from backend service by REST API provided by backend service.
The backend service mainly deals with schema aligning, resource process-
ing, graph embedding model training job scheduling, and service routing. The
schemaisbasedonOWL[5],andalignedinawaythatcombineslinguistic-based
strategy[8]andstructure-basedstrategy[6].Afterhavingaunifiedschema,het-
erogeneous resources could be transformed into a unified format. Then those
resources will be put into a resource queue, which will be consumed by knowl-
edge graph construction service. When a tenant requests for training a graph
embedding model, the backend service will choose a graph embedding model
management service registered on Zookeeper, which represents a service reg-
istry.ThebackendserviceisdevelopedusingJavaandSpringBootandinteracts
with other services by REST API or GRPC.
The knowledge graph construction service fetch resources from the resource
queue and integrate those resources into the knowledge graph in the speci-
fied graph namespace. The knowledge graph construction service is written in
Python, and the service is exported as REST API using the flask framework.
We use RabbitMQ as a resource queue so that multiple knowledge graph con-
structionservicescouldsubscribetothequeuetospeeduptheknowledgegraph
construction process, and it could be ensured that the resources won’t get lost.
The graph embedding model management service mainly provides model
training and model deploying service. When there comes a model training job
frombackend,theserviceexportsgraphdatafromgraphdatabasemanagement
service and starts training. After that, the service writes model parameters to
the file system. And then, the deploying service would be notified and loads
model parameters from the file system. The graph embedding model manage-
ment service registers to Zookeeper once it gets start up so that the backend
could discover the service. The service is developed using Python and Pytorch,
and the service is exported using the flask framework.
ThegraphdatabasemanagementserviceusesDockercontainerstorunNeo4j
graph databases. The service is developed using Python and Py2Neo, which is
a client library for working with Neo4j and exported using flask framework.
3 Demonstration Scenario
We demonstrate the platform by constructing a real case of a knowledge graph.
First,atenantlogintotheplatformandapplyagraphnamespace.Thenseveral
tenants create knowledge graph schemas according to their resource format.
Afterthesystemmanagerexaminesandverifiestheschemas,theschemaswould
be aligned and merged with a unified schema, and the tenants who create the
schemas could get the tokens for uploading resources. While tenants upload
their resources, the knowledge graph in the graph namespace gets constructed
incrementally.
66 X. Liu et al.
4 Where to Watch This Video
Thedemofileistitled“ACrowdsourcing-BasedKnowledgeGraphConstruction
Platform”. It is a MP4 video format, no sound. It can be found in the following
link: https://youtu.be/xBosip57XCs.
5 Conclusion and Future Work
Thispaperpresentedanovelplatformthattakesadvantage ofcrowdsourcingto
construct and manage knowledge graphs. The platform aims to provide knowl-
edge graph automatic construction as a service and reduce the tenants’ effort to
constructknowledgegraphs.Currently,theplatformisusedindifferentprojects
inordertoconstructknowledgegraphsandmakeuseofthem.Inthefuture,the
platform will be enriched with more powerful features such as, knowledge graph
refinementsupportwiththehelpofthird-partyknowledgegraphs,incrementally
graph embedding model support to increase its applicability.
Acknowledgement. Research in this paper is partially supported by the National
KeyResearchandDevelopmentProgramofChina(No2018YFB1402500),theNational
Science Foundation of China (61802089, 61832004, 61772155, 61832014).
References
1. Bollacker, K., Evans, C., Paritosh, P., Sturge, T., Taylor, J.: Freebase: a collabo-
ratively created graph database for structuring human knowledge. In: Proceedings
of the 2008 ACM SIGMOD International Conference on Management of Data, pp.
1247–1250 (2008)
2. Bordes,A.,Usunier,N.,Garcia-Duran,A.,Weston,J.,Yakhnenko,O.:Translating
embeddingsformodelingmulti-relationaldata.In:AdvancesinNeuralInformation
Processing Systems, pp. 2787–2795 (2013)
3. Ji, G., He, S., Xu, L., Liu, K., Zhao, J.: Knowledge graph embedding via dynamic
mappingmatrix.In:Proceedingsofthe53rdAnnualMeetingoftheAssociationfor
Computational Linguistics and the 7th International Joint Conference on Natural
Language Processing (Volume 1: Long Papers), pp. 687–696 (2015)
4. Lehmann, J., et al.: Dbpedia-a large-scale, multilingual knowledge base extracted
from wikipedia. Semant. Web 6(2), 167–195 (2015)
5. McGuinness, D.L., Van Harmelen, F., et al.: Owl web ontology language overview.
W3C recommendation 10(10), 2004 (2004)
6. Melnik, S., Garcia-Molina, H., Rahm, E.: Similarity flooding: a versatile graph
matching algorithm and its application to schema matching. In: Proceedings 18th
International Conference on Data Engineering, pp. 117–128. IEEE (2002)
7. Suchanek,F.M., Kasneci,G.,Weikum,G.:Yago:acoreofsemanticknowledge.In:
Proceedingsofthe16thInternationalConferenceonWorldWideWeb,pp.697–706
(2007)
8. Tang,J.,Li,J.,Liang,B.,Huang,X.,Li,Y.,Wang,K.:UsingBayesiandecisionfor
ontology mapping. J. Web Semant. 4(4), 243–262 (2006)
9. Wang, Z., Zhang, J., Feng, J., Chen, Z.: Knowledge graph embedding by translat-
ing on hyperplanes. In: Twenty-Eighth AAAI Conference on Artificial Intelligence
(2014)
Data Interaction for IoT-Aware Wearable
Process Management
B
Stefan Scho¨nig1( ), Richard Jasinski2, and Andreas Ermer2
1 Institute for Management Information Systems, University of Regensburg,
Regensburg, Germany
PI:EMAIL
2 Maxsyma GmbH & Co. KG, Floß, Germany
{rjasinski,aermer}@maxsyma.de
Abstract. Process execution and monitoring based on Internet of
Things (IoT) data can enable a more comprehensive view on processes.
Inourpreviousresearch,wedevelopedanapproachthatimplementsan
IoT-aware Business Process Management System (BPMS), comprising
an integrated architecture for connecting IoT data to a BPMS. Fur-
thermore, a wearable process user interface allows process participants
to be notified in real-time at any location in case new tasks occur. In
manysituationsoperatorsmustbeabletodirectlyinfluencedataofIoT
objects, e.g., to control industrial machinery or to manipulate certain
device parameters from arbitrary places. However, a BPM controlled
interaction and manipulation of IoT data has been neglected so far. In
this demo paper, we extend our approach towards a framework for IoT
data interaction bymeans ofwearableprocess management. BPM tech-
nologyprovidesatransparentandcontrolledbasisfordatamanipulation
within the IoT.
· ·
Keywords: Internet of Things Process execution Data interaction
1 Introduction and Relevance
Business process management (BPM) is considered as powerful technology to
control, design, and improve processes. Processes are executed within systems
that are part of the real world involving humans, computer systems as well as
physical objects [1]. Internet of Things (IoT) as well as Cyber-Physical Systems
(CPS),denotingtheinter-networkingofphysicaldevices,havebecomeverypop-
ular these days [2]. Process execution, monitoring and analytics based on IoT
datacanenableamorecomprehensiveviewonprocesses.Embeddingintelligence
bywayofreal-timedatagatheringfromdevicesandsensorsandconsumingthem
throughBPMtechnology helpsbusinessestoachieve costsavings andefficiency.
Inourpreviousresearch[3–5],wedevelopedanapproachthatimplementsan
IoT-aware BPMS called iot2flow, comprising an architecture for connecting IoT
data to a BPMS. Furthermore, we developed a wearable process user interface
(cid:2)c SpringerNatureSwitzerlandAG2021
H.Hacidetal.(Eds.):ICSOC2020Workshops,LNCS12632,pp.67–71,2021.
https://doi.org/10.1007/978-3-030-76352-7_10
68 S. Scho¨nig et al.
Fig.1. Overview of wearable IoT data provision and IoT data manipulation
thatallowsoperatorstobenotifiedinreal-timeatanylocationincasenewtasks
occur. In many situations operators must be able to directly influence data of
IoTobjects,e.g.,tocontrolindustrialmachineryortomanipulatecertaindevice
parameters from arbitrary places. However, a BPM controlled interaction and
manipulation of IoT data has been neglected so far. In this demo paper, we
extendourapproachtowardsafullyimplementedframeworkforIoTdatainter-
action by means of wearable process management (cf. Fig.1). BPM technology
providesatransparentandcontrolledbasisfordatamodificationwithintheIoT.
Additionally, we provide voice control for IoT data modification. The approach
hasbeenintroducedinproductionprocessesofcorrugationindustryplantswhere
paper is glued together to produce corrugated paper as raw material for card-
board boxes. Based on the presented approach operators productivity improved
in terms of reduced stop times and increased production speed. The iot2flow
frameworkiscurrentlyinuseinseveralproductionplants.Thetoolsetiscontin-
uouslydeveloped,enhancedandimproved.Ascreencastpresentingthecomplete
tool is available at https://www.youtube.com/watch?v=gt9aJwTto2EE.
2 Involved Technology and Innovative Aspects
2.1 Bidirectional Connection of IoT Data Sources
WebuilduponthestandardmodellingnotationBPMN2.0andusetheCamunda
BPMS (https://camunda.com). We communicate with the workflow engine by
means of the Camunda Rest API. In order to connect IoT objects, we imple-
mentedanIoTmiddlewarethatsupportsIoTprotocolslikeMQTT,TCPaswell
as PLC protocols such as OPC-UA and Simatic S7 (cf. Fig.2). The IoT middle-
ware specifies a mapping from IoT variables to process variables. Based on this,
it keeps the BPMS updated with the latest IoT values. All running instances of
a particular processreceive the corresponding data value. The application cycli-
cally acquires the IoT values and sends them to the BPMS. Given the current
IoT data values, the engine calculates available activities.
2.2 Wearable Process Execution Interface
Participantsareseamlesslynotifiedwheninteractionisrequired,independentof
wheretheuserislocated.Thisrequiresarealtimenotificationonmobiledevices
Data Interaction for IoT-Aware Wearable Process Management 69
Fig.2. IoT variable and voice command definition
of users. During process execution, available tasks for a specific participant are
directly sent to mobile devices. As a mobile user interface we implemented an
Android based smartwatch application. The IoT middleware cyclically requests
the available user tasks from the Camunda API for each defined user and pub-
lishes them to the MQTT topic. The application allows users to start and com-
plete tasks as well as to initiate new process instances. It is possible to start or
complete tasks and processes. IoT and Industry 4.0 applications heavily depend
on data modification during process execution. Production parameters and set-
tings need to be changed and data needs to be fed into a system. Such data
provision and manipulation can be controlled and scheduled with the help of
the underyling process model. Therefore, we enhanced the existing architecture
by means of wearable data interaction functionality that fills this gap towards
a full fledged IoT-aware BPMS. The introduced data perspective is conceptu-
ally divided into (i) Data Provision and (ii) Data Modification. To classifiy the
implemented concepts, we refer to the well-known Workflow Data Patterns [6].
2.3 Data Visibility and Provision
Sensor and machine data must be provided in real-time to trigger events or as a
meanstosupporttaskexecution.OurtoolsupportstheprovisionofIoTdatato
bereferencedinprocessmodelsandtherunninginstances(PatternP7Workflow
Data, Pattern P5 Case Data). IoT data can also be provisioned independently
fromanyprocess(PatternP8EnvironmentalData).Theinteractionpatternisa
push-orientedenvironmenttoworkflowpattern(P25).Operatorsfrequentlyneed
relevant information such documents or videos during the execution of tasks.
The iot2flow tool implements the provision of media to wearables. The files to
beprovidedarespecifiedintheBPMNdiagram.Thisfunctionimplementsatask
data visibility pattern (Pattern P1). The underlying implementation follows a
pull-oriented environment to task interaction pattern (Pattern P16).
2.4 Data Modification
Process participants are able to actively influence environmental data, e.g. pro-
duction parameters, in real-time from arbitrary locations. BPM technology
70 S. Scho¨nig et al.
Fig.3. Wearable process command and data manipulation interfaces
serves as a controlling instance ensuring that data access is restricted to specific
situations, e.g., whole certain tasks are active, or to specific user groups. The
iot2flow framework implements two different ways to manipulate IoT data: (i)
user input controls on wearables) and(ii) speech recognition directly on wearable
devices.Thefirstoptionistodefineauserinputcontroleitherasstringbasedor
anumericaltextfieldthatisboundtoataskinthemodel.Thetextfieldisshown
on the device when the corresponding task is started. The inserted content is
directly mapped either to an instance variable or to an external IoT variable.
Thesecondoptionisbasedonspeechrecognitionfueledbyresearchinneural
networks. We rely on an end-to-end (E2E) model approach that runs entirely
on the device. iot2flow allows to specify terms combined with either boolean or
numericalvaluesthatcanbeprovidedbymeansofspeechrecognition.Themap-
pingfromthetermtotheIoTvariableisdefinedintheIoTmiddleware. Opera-
tors initiate the speech recognition mode during execution and declare both the
term as well as the new value for the variable. This value is directly transfered
to the IoT device. iot2flow provides the possibility to constrain the scope of
commands to tasks, processes and/or user groups. This way, not the whole list
of voice commands is applicable in every situation but restricted according to
the visibility patterns P1 and P7 as well as to specific resources.
References
1. Sch¨onig, S., Aires, A.P., Ermer, A., Jablonski, S.: Workflow support in wearable
productioninformationsystems.In:Mendling,J.,Mouratidis,H.(eds.)CAiSE2018.
LNBIP,vol.317,pp.235–243.Springer,Cham(2018).https://doi.org/10.1007/978-
3-319-92901-9 20
2. Mosterman, P.J., Zander, J.: Industry 4.0 as a cyber-physical system study. Softw.
Syst. Model. 15(1), 17–29 (2016)
3. Sch¨onig, S., Ermer, A., Market, M., Jablonski, S.: Sensor-enabled wearable process
support in corrugation industry. BPM Industry Track, pp. 118–129 (2019)