to reuse the existing memory interface. For example, a cache
line in the Rocket Core is 64 bytes. To handle one cache miss,
DFITAGGER only needs 8 tag bits (one bit per eight bytes),
but for the ﬁxed size of memory interface, it has to fetch 64
bytes from the tag table. In fact, this 64-byte unit, which we
call one tag table entry, naturally stores the tags for a 4 KB
memory block; so tag cache allows us to generate only one
memory access per 4 KB data access.
2) Tag Valid Bits: The second optimization technique takes
advantage of the fact that most of the memory loads are not
checked, so there is no need to always reﬁll the cache line
with corresponding tag bits. Leveraging this observation, we
add a Tag Valid Bit (TVB) to each memory unit in the caches
to further reduce unnecessary accesses to the tag table. TVB is
updated as follows. When the cache has to reﬁll a line but the
request from the inner cache or the processor core does not
explicitly asks for tag bits, the cache generates a reﬁll request
to the outer cache or DFITAGGER, and clears the TVB for the
memory units in the line. Later, if an incoming load (with tag)
55
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:12:03 UTC from IEEE Xplore.  Restrictions apply. 
request hits in the cache, but the TVB for the corresponding
memory unit is not set, the cache will reﬁll the line again with
the valid tags. Note that any write hit will set the TVB because
store operations always update the tag bit. Finally, when a
cache line is evicted and written back to main memory, the
cache forwards TVB to DFITAGGER, so the later can update
the tag cache accordingly.
3) Meta Tag Table: The third technique leverages the fact
that most of the memory units are tagged with 0 and only
a few ones will be tagged with 1. This means that most tag
table entries would be ﬁlled with 0. To take advantage of this
observation, DFITAGGER maintains a Meta Tag Table (MTT) in
the main memory and a Meta Tag Directory (MTD) as a register.
Each bit of the MTT entries is set to 1 if the corresponding tag
table entry contains 1, and each bit of MTD is set to 1 if the
corresponding MTT entry has 1. Utilizing them, DFITAGGER
can avoid fetching tag table entries from the main memory if
they are ﬁlled with 0. It also enables DFITAGGER to avoid (1)
updating the tag table entry for a given write miss if that entry
is ﬁlled with 0; and (2) write back to main memory if both the
evicted tag cache and the main memory copy are ﬁlled with 0.
D. Protecting the Tag Tables
The design of HDFI requires that the tag table and the meta
tag table in the main memory are protected from the malicious
modiﬁcations. To do so, we leverage the fact that DFITAGGER
is sitting between the cache and the main memory, hence we
can use it to mediate all modiﬁcations to the main memory. That
is, once the memory chunk used for tag tables are assigned
to DFITAGGER, it drops any access to this memory chunk.
Because tag is always provided by DFITAGGER, this effectively
prevents any malicious modiﬁcations to the tag tables. Note
that our current design cannot prevent DMA-based attacks; we
will discuss this issue in §IX.
V. SECURITY APPLICATIONS
In this section, we demonstrate how HDFI can be utilized
to build security solutions with simpliﬁed designs, improved
performance, and better security. We want to use these examples
to highlight the generality of HDFI (i.e., the ability to support
different security applications), as well as its ease of adoption.
Regarding backward compatibility, it completely depends on
the security solution. Some security mechanisms like shadow
stack could allow mixing protected and unprotected code, but
other solutions like VTable protection will not allow such
mixing.
In each application example, we focus on protecting one
type of security critical data, such as return addresses, function
pointers, etc. However, as there is no overlapping between the
protected data (i.e., the meaning of the tag bit is not ambiguous),
we can integrate all mechanisms together to maximize the
defense against memory corruption based attacks.
To implement these examples, we either directly modiﬁed
the source code or augmented compilers to emit HDFI’s new
instructions. However, we want to emphasize again that this is
not a limitation of HDFI—as long as a security solution can
make the target program use HDFI’s new instructions, it will
be able to leverage the isolation provided by HDFI.
A. Shadow Stack
In Example 1, we have demonstrated how to use HDFI to
implement a virtual shadow stack for protecting the return
addresses. To implement this scheme, we just need to change
6 lines in GCC (Example 2). Implementation in the LLVM
toolchain is similarly simple, with only 4 lines of changes—in
function storeRegToStackSlot/loadRegFromStackSlot, which
are
function prologues/epilogues, we use
sdset1/ldchk1 instead of normal store/load. Because these
functions are also used to handle register spills/restores, our
(LLVM-based) shadow stack also protects spilled registers,
which can also be an attack vector [16].
invoked at
return "ldchk1\t%0,%1";
return "ld\t%0,%1";
else
else
// if dest == REG && src == MEM
if (flag_safe_stack && (REGNO (dest) == RETURN_ADDR_REGNUM))
1 char *riscv_output_move (rtx dest, rtx src) {
2
3
4
5
6
7
8
9
10
11
12 }
Example 2: How to use HDFI to implement shadow stack in GCC,
with only 6 lines of changes.
// if dest == MEM && src == REG
if (flag_safe_stack && (REGNO (src) == RETURN_ADDR_REGNUM))
return "sdset1\t%z1,%0";
return "sd\t%z1,%0";
Supporting context saving and restoring like setjmp/longjmp
has always been a challenge for hardware-based shadow
stacks [46, 59, 81]. However, for a HDFI-based shadow stack,
supporting this feature is straightforward—just like saving
registers to the stack, when saving current context to jmp_buf,
we set the tag of the corresponding memory to 1. Then, when
restoring the context, we check if the memory tag is still
1. If attackers try to overwrite jmp_buf, the load check will
fail. Furthermore, because HDFI-based shadow stack is still
memory-based, it naturally supports deep recursion. It can even
support modifying return addresses as long as they are always
stored using sdset1 and loaded with ldchk1. Finally, unlike
SmashGuard [59], because HDFI is orthogonal to the execution
privilege level, HDFI-based shadow stack does not need any
support from the OS kernel and can also be used to protect
kernel stacks.
B. Standard Library Enhancement
Runtime libraries like the dynamic linker (ld.so) and the
standard C library are important parts of every program’s
runtime security. Unfortunately, many compiler-based security
solutions neglected them, thus leave holes for attacks [9, 39, 60].
In this subsection, we describe enhancements made to the
libraries to prevent attacks.
1) Heap Metadata Protection: Many standard C libraries
like glibc (GNU C Library) uses a variant of Doug Lea’s
Malloc [45] that supports multi-threading, called (ptmalloc).
ptmalloc uses double-linked lists to manage freed memory
chunks. When removing a memory chunk from this list, it
66
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:12:03 UTC from IEEE Xplore.  Restrictions apply. 
performs a general unlinking process. If there exist a heap buffer
overﬂow vulnerability, attackers can exploit this vulnerability
to tamper with these metadata (pointers), which will allow
attackers to overwrite an arbitrary address with arbitrary
data [39]. Moreover, despite that many integrity checks have
been applied to the heap implementation to stop heap-based
attacks, attackers still ﬁnd their ways to bypass them [31, 33].
To prevent such attacks, we can leverage HDFI to protect the
integrity of these metadata—similar to return addresses, when
linking a freed chunk, we set the tags of forward and backward
pointers to 1; then when unlinking a chunk, we check if the
tag is still 1. By doing so, if attackers overwrite these pointers
(with normal writes), the tag will be set to 0, which will be
captured by the load check.
2) Global Offset Table Protection: Global Offset Table
(GOT) is a data structure for dynamic linking. Since GOT
is modiﬁable by default and affects the program’s control ﬂow,
GOT overwriting [60] has been used for changing control
ﬂow with memory corruption based attacks. To protect the
GOT, we enforce that whenever a dynamic linked function
is invoked, the target address is loaded by ldchk1. To tag
the initial pointer (i.e., the call to the resolver), we leveraged
the fact that for position-independent executables (PIE), GOT
table entries need to be patched due to address space layout
randomization (ASLR); so we modiﬁed the relocation routine
to tag the initial GOT values with 1. Then during runtime,
after resolving a real function address, we make the loader use
sdset1 to update the GOT value.
3) Exit Handler Protection: Another attack surface is the
exit handler [9]. To prevent attackers from manipulating the exit
handler, pointer encryption [29] is applied in glibc. However,
because performance was top priority when designing this
scheme, the encryption is implemented in an ad hoc manner and
can be easily bypassed with information leakage. To protect the
exit handler, we use HDFI to enforce that it is always registered
with sdset1 and loaded with ldchk1. Since attackers cannot
tag an exit handler with 1, they cannot abuse it to execute
arbitrary code.
C. VTable Pointer Protection
As virtual function calls comprise a large portion of indirect
control transfer in large C++ programs like browsers [71],
virtual function table pointers (a.k.a., vfptr) have become a
popular attack target [86]. In these attacks, attackers try to
exploit memory corruption vulnerabilities to control the vfptr
so as to invoke arbitrary code, which has been demonstrated
to be very powerful [62]. For this reason, many systems have
been proposed to defeat such attacks [7, 38, 71, 85, 86].
Leveraging HDFI, we also implemented a protection mech-
anism based on one security invariant: only a constructor
function can initialize a vfptr. This invariant can be enforced
in two simple steps: (1) when initializing a C++ object, we
use sdset1 to initialize its vfptr; and (2) when performing a
virtual call, we always use ldchk1 to load the vfptr.
Compared with existing protection mechanisms, our imple-
mentation is much simpler in that it requires no sophisticated
static analysis and/or runtime instrumentation. At the same
time, it is also very effective. More speciﬁcally, there are
two typical attacks against VTable: injection attacks and reuse
attacks. In VTable injection attacks, attackers try to forge a
vfptr pointing to a crafted VTable. With our protection, this
is no longer feasible because the values assigned to vfptr are
always static/constant. In VTable reuse attacks, attackers try
to make the vfptr point to an existing VTable, but usually
at a wrong offset [62]. Although our mechanism cannot fully
prevent all VTable reuse attacks, it signiﬁcantly increases the
difﬁculty of attacks, because (1) making the vfptr point to a
wrong offset is no longer feasible, because constructors always
assign the correct value; and more importantly, (2) crafting
a counterfeit object is also much more difﬁcult, i.e., once
combined with techniques that can prevent illegal jumping to
the middle of a function (e.g., shadow stack and CPS), the
only way to modify the vfptr is to invoke a constructor, who
will initialize a legitimate object and overwrites the crafted
data from attackers.
D. Code Pointer Separation
Control ﬂow hijacking is one of the most popular and
powerful attacks. In all control ﬂow hijacking attacks, attackers
seize control by corrupting one or more code pointers. Based
on this observation, researchers have proposed code pointer
separation (CPS) [43], a technique that isolates code pointers
into a safe region to prevent attackers from tampering with
them. In their original implementation, the isolation is enforced
using segment on 32-bit x86 processors or randomization (or
masking) on 64-bit x86 processors and ARM processors. As
discussed in §I, these approaches introduce (1) additional
memory overhead for data shadowing, and (2) additional
performance overhead for shadow data lookup, which is very
problematic on benchmarks where code pointer dereference is
more frequent, such as C++ programs and language interpreters.
Moreover, their randomization-based approach is subject to
brute-force attacks [32], and their masking-based approach
introduces an additional 5% performance overhead [43].
By utilizing HDFI, we can eliminate all these drawbacks.
Speciﬁcally, using the same static analysis from CPS, we can
identify all code pointers that need to be protected. With this
information, instead of instrumenting the target program to
load/store code pointers from the safe region with an additional
runtime library, we instrument the program to (1) always use
sdset1 instructions to store code pointers, and (2) always use
ldchk1 instructions to load code pointers. Because no other
instructions can store code pointers, our approach has the
same effectiveness as segments and masking based approaches.
However, because there is no additional lookup step(s), the
performance of our approach is better when there are many
indirect calls.
One drawback of our solution is that we need to add one
additional step to tag static code pointers that are initialized by
the OS kernel or the dynamic loader, e.g., virtual function
pointers in the VTables. For PIE code, we can reuse our
modiﬁcation to the relocation procedure to perform this task.
77
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:12:03 UTC from IEEE Xplore.  Restrictions apply. 
E. Kernel Protection
Although control ﬂow hijacking attacks are the most popular
attack type, non-control data attacks are also feasible [14],
especially for kernel attacks [66]. More importantly, existing
kernel-wide protection mechanisms all imposes very high
performance overhead; regardless of whether it is masking-
based [19] or context-switch-based [66]. As a generic data
isolation mechanism, HDFI can also be used to replace those
expensive isolation mechanisms thus reduce the performance
overhead of these solutions.
Similar to CPS, porting Kenali [66] to utilize HDFI is
straightforward. Speciﬁcally, we replace: (1) its randomization-
based stack protection with the shadow stack described in §V-A;
(2) the expensive, context switch-based update operations with
sdset1; (3) all read to sensitive data with ldchk1; (4) global
object shadowing with tagging (i.e., similar to function pointers
in the VTable, we wrote a small early initialization routine to
tag sensitive global object); and (5) we eliminate its complicated
object shadowing mechanism.
F. Information Leak
In all of the above applications, we try to prevent attackers
from injecting data into the trusted region, but HDFI can also be
used to prevent attackers from reading sensitive data from the
trusted region. For example, in the Heartbleed attack [15],
attackers exploited a buffer overread vulnerability in the
OpenSSL library to steal the private key associated with the
website’s certiﬁcate. To prevent such attacks, we can (1) tag
the memory used to store the private key as 1, (2) replace
all legitimate read access to the key with ldchk1, and (3)
implement a simple sanitation routine that uses ldchk0 to
check if the buffer to be written to network contains any data
with tag 1.
VI. IMPLEMENTATION
Components Language
Scala (Chisel)
Architecture
Assembler
C
Linux Kernel C
Total
Lines of Code
Modiﬁed Added Total
1,803 2,198
16
60
1,871 2,274
395
-
8
403
16
52
TABLE II: Components of HDFI and their complexities in terms of
their lines of code.
In this section, we provide the implementation detail of
HDFI. Table II shows the lines of code used to implement
HDFI, excluding empty lines and comments.
A. Hardware
We implemented a prototype of HDFI by modifying the
Rocket Chip Generator [73]. The generated system includes
a Rocket Core [74] as its main processor, which has 16KB
of L1 instruction and data caches. Modifying the generator
itself instead of a generated instance allows us to generate
and evaluate multiple versions of HDFI with various features
88
Extra components for MTT
Extra resource for MTT
MTD
Acq. distributor
MTTE Cache
Tag Cache
Arbiter
Arbiter1
Arbiter2