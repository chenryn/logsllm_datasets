## PostgreSQL 字符集,encoding,character sets,collate,ctype,本土化 - libc,icu   
### 作者                                                                    
digoal                                                                    
### 日期                                                                    
2019-05-28                                                                    
### 标签                                                                    
PostgreSQL , 字符集 , encoding , character sets , collate , ctype , 本土化     
----                                                                    
## 背景     
创建数据库时，允许指定字符集，以及本土化相关的collate, ctype信息。    
```    
postgres=# \h create database    
Command:     CREATE DATABASE    
Description: create a new database    
Syntax:    
CREATE DATABASE name    
    [ [ WITH ] [ OWNER [=] user_name ]    
           [ TEMPLATE [=] template ]    
           [ ENCODING [=] encoding ]    
           [ LC_COLLATE [=] lc_collate ]    
           [ LC_CTYPE [=] lc_ctype ]    
           [ TABLESPACE [=] tablespace_name ]    
           [ ALLOW_CONNECTIONS [=] allowconn ]    
           [ CONNECTION LIMIT [=] connlimit ]    
           [ IS_TEMPLATE [=] istemplate ] ]    
URL: https://www.postgresql.org/docs/12/sql-createdatabase.html    
```    
这些值应该怎么填？    
## PG 支持哪些字符集    
对应的代码是    
src/backend/utils/mb/encnames.c    
1、数据库支持的ENCODING    
https://www.postgresql.org/docs/12/multibyte.html    
Server = 'YES' 表示是数据库端支持的字符集，NO表示这是客户端字符集。    
## PG 支持哪些本土化设置，每种字符集有对应的本土化设置    
1、每一个encoding支持哪些collate, cypte    
```    
select pg_encoding_to_char(collencoding),* from pg_collation     
where (pg_encoding_to_char(collencoding)='' and collname<>'default' and collprovider<>'i')    
or    
pg_encoding_to_char(collencoding)='EUC_CN';    
 pg_encoding_to_char |  oid  |   collname   | collnamespace | collowner | collprovider | collisdeterministic | collencoding | collcollate  |  collctype   | collversion     
---------------------+-------+--------------+---------------+-----------+--------------+---------------------+--------------+--------------+--------------+-------------    
                     |   950 | C            |            11 |        10 | c            | t                   |           -1 | C            | C            |     
                     |   951 | POSIX        |            11 |        10 | c            | t                   |           -1 | POSIX        | POSIX        |     
 EUC_CN              | 13077 | zh_CN        |            11 |        10 | c            | t                   |            2 | zh_CN        | zh_CN        |     
 EUC_CN              | 13078 | zh_CN.gb2312 |            11 |        10 | c            | t                   |            2 | zh_CN.gb2312 | zh_CN.gb2312 |     
 EUC_CN              | 13081 | zh_SG        |            11 |        10 | c            | t                   |            2 | zh_SG        | zh_SG        |     
 EUC_CN              | 13082 | zh_SG.gb2312 |            11 |        10 | c            | t                   |            2 | zh_SG.gb2312 | zh_SG.gb2312 |     
(6 rows)    
```    
euc_cn    
```    
select pg_encoding_to_char(collencoding),     
collcollate,     
collctype     
from pg_collation     
where (pg_encoding_to_char(collencoding)='' and collname<>'default' and collprovider<>'i')    
or    
pg_encoding_to_char(collencoding)='EUC_CN';    
 pg_encoding_to_char | collcollate  |  collctype       
---------------------+--------------+--------------    
                     | C            | C    
                     | POSIX        | POSIX    
 EUC_CN              | zh_CN        | zh_CN    
 EUC_CN              | zh_CN.gb2312 | zh_CN.gb2312    
 EUC_CN              | zh_SG        | zh_SG    
 EUC_CN              | zh_SG.gb2312 | zh_SG.gb2312    
(6 rows)    
```    
sql_ascii    
```    
postgres=# select pg_encoding_to_char(collencoding),     
collcollate,     
collctype     
from pg_collation     
where (pg_encoding_to_char(collencoding)='' and collname<>'default' and collprovider<>'i')    
or    
pg_encoding_to_char(collencoding)='SQL_ASCII';    
 pg_encoding_to_char | collcollate | collctype     
---------------------+-------------+-----------    
                     | C           | C    
                     | POSIX       | POSIX    
(2 rows)    
```    
例子    
```  
postgres=# select pg_encoding_to_char(collencoding),   
collcollate,   
collctype   
from pg_collation   
where (pg_encoding_to_char(collencoding)='' and collcollate<>'' and collprovider<>'i')  
or  
pg_encoding_to_char(collencoding)='EUC_JP';  
 pg_encoding_to_char | collcollate  |  collctype     
---------------------+--------------+--------------  
                     | C            | C  
                     | POSIX        | POSIX  
 EUC_JP              | ja_JP        | ja_JP  
 EUC_JP              | ja_JP.eucjp  | ja_JP.eucjp  
 EUC_JP              | ja_JP.ujis   | ja_JP.ujis  
 EUC_JP              | japanese     | japanese  
 EUC_JP              | japanese.euc | japanese.euc  
(7 rows)  
postgres=# create database db123 with template template0  encoding 'EUC_JP' lc_collate 'ja_JP' lc_ctype 'japanese';  
CREATE DATABASE  
```  
## 当客户端与数据库端字符集不相同时，如何转换字符集    
```    
postgres=# \h create conver    
Command:     CREATE CONVERSION    
Description: define a new encoding conversion    
Syntax:    
CREATE [ DEFAULT ] CONVERSION name    
    FOR source_encoding TO dest_encoding FROM function_name    
URL: https://www.postgresql.org/docs/12/sql-createconversion.html    
```    
CREATE CONVERSION defines a new conversion between character set encodings. Also, conversions that are marked DEFAULT can be used for automatic encoding conversion between client and server. For this purpose, two conversions, from encoding A to B and from encoding B to A, must be defined.    
To be able to create a conversion, you must have EXECUTE privilege on the function and CREATE privilege on the destination schema.    
查看pg_conversion系统表    
```    
postgres=# select     
pg_encoding_to_char(conforencoding),    
pg_encoding_to_char(contoencoding),conproc,*     
from pg_conversion;    
 pg_encoding_to_char | pg_encoding_to_char |            conproc             | oid  |            conname             | connamespace | conowner | conforencoding | contoencoding |            conproc             | condefault     
---------------------+---------------------+--------------------------------+------+--------------------------------+--------------+----------+----------------+---------------+--------------------------------+------------    
 SQL_ASCII           | MULE_INTERNAL       | ascii_to_mic                   | 4400 | ascii_to_mic                   |           11 |       10 |              0 |             7 | ascii_to_mic                   | t    
 MULE_INTERNAL       | SQL_ASCII           | mic_to_ascii                   | 4401 | mic_to_ascii                   |           11 |       10 |              7 |             0 | mic_to_ascii                   | t    
 KOI8R               | MULE_INTERNAL       | koi8r_to_mic                   | 4402 | koi8_r_to_mic                  |           11 |       10 |             22 |             7 | koi8r_to_mic                   | t    
 MULE_INTERNAL       | KOI8R               | mic_to_koi8r                   | 4403 | mic_to_koi8_r                  |           11 |       10 |              7 |            22 | mic_to_koi8r                   | t    
 ISO_8859_5          | MULE_INTERNAL       | iso_to_mic                     | 4404 | iso_8859_5_to_mic              |           11 |       10 |             25 |             7 | iso_to_mic                     | t    
 MULE_INTERNAL       | ISO_8859_5          | mic_to_iso                     | 4405 | mic_to_iso_8859_5              |           11 |       10 |              7 |            25 | mic_to_iso                     | t    
 WIN1251             | MULE_INTERNAL       | win1251_to_mic                 | 4406 | windows_1251_to_mic            |           11 |       10 |             23 |             7 | win1251_to_mic                 | t    
 MULE_INTERNAL       | WIN1251             | mic_to_win1251                 | 4407 | mic_to_windows_1251            |           11 |       10 |              7 |            23 | mic_to_win1251                 | t    
 WIN866              | MULE_INTERNAL       | win866_to_mic                  | 4408 | windows_866_to_mic             |           11 |       10 |             20 |             7 | win866_to_mic                  | t    
```    
## 如何使用UDF接口，转换字符集     
https://www.postgresql.org/docs/12/functions-string.html    
```    
postgres=# \df *.*conv*    
                                   List of functions    
   Schema   |           Name           | Result data type | Argument data types | Type     
------------+--------------------------+------------------+---------------------+------    
 pg_catalog | convert                  | bytea            | bytea, name, name   | func    
 pg_catalog | convert_from             | text             | bytea, name         | func    
 pg_catalog | convert_to               | bytea            | text, name          | func    
 pg_catalog | pg_conversion_is_visible | boolean          | oid                 | func    
(4 rows)    
```    
convert_from  Convert string to the database encoding. The original encoding is specified by src_encoding. The string must be valid in this encoding.    
convert_to    Convert string to dest_encoding.    
convert       Convert string to dest_encoding. The original encoding is specified by src_encoding. The string must be valid in this encoding. Conversions can be defined by CREATE CONVERSION. Also there are some predefined conversions. See Table 9.11 for available conversions.    
## 如何根据encodign id查询字符集    
查询当前数据库字符集    
指定字符集名，查询字符集ID    
查询客户端字符集    
查询指定字符集的最大宽度    
根据字符集ID，查询对应的字符集名称    
```    
postgres=# \df *.*encod*    
                                  List of functions    