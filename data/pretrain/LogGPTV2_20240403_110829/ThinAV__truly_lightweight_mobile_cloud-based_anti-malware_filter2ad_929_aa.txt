# ThinAV: Truly Lightweight Mobile Cloud-based Anti-malware

**Authors:**
- Chris Jarabek
- David Barrera
- John Aycock

**Affiliations:**
- **Chris Jarabek and John Aycock:**
  - Department of Computer Science
  - University of Calgary
  - 2500 University Drive NW, Calgary, AB, Canada T2N 1N4
  - Email: [PI:EMAIL]

- **David Barrera:**
  - School of Computer Science
  - Carleton University
  - 1125 Colonel By Drive, Ottawa, ON, Canada K1S 5B6
  - Email: [PI:EMAIL]

## Abstract
This paper introduces ThinAV, an anti-malware system for Android that leverages pre-existing web-based file scanning services for malware detection. The primary goal in developing ThinAV was to assess the feasibility of providing real-time anti-malware scanning over a wide area network (WAN) while considering resource limitations. Our research provides a practical alternative to many high-budget, resource-intensive, cloud-based security solutions. Evaluation results show that ThinAV functions effectively over a WAN, making it a highly practical solution for anti-malware protection on smartphones.

**Keywords:** Android, Malware, Cloud Computing, Anti-virus

## 1. Introduction
The exponential rise in malware has led to numerous research papers addressing this issue, often citing reports from Gartner and Symantec. However, few have explored the opposite question: how small can anti-malware be? This is particularly relevant for mobile devices, where resource constraints are significant. By "small," we refer to minimal software on the end host and minimal supporting infrastructure.

We began answering this question for desktop computers by writing a small Python program to intercept file accesses under Linux. We used existing cloud-based anti-malware services like Kaspersky, VirusChief, and VirusTotal to check files for malicious content. These services allow users to upload files and receive reports on any detected malware.

On desktops, this approach faced challenges due to the large number of different files being accessed, leading to poor local cache performance and frequent uploads. Additionally, the potential for sensitive data in uploaded files raised privacy concerns.

However, for mobile devices, especially Android, our idea fits better and works well. A survey of malware on Android, iOS, and Symbian devices found that all instances of malware on Android were spread through application packages. Given the multiple app markets and the ease of installing apps from various sources, there is a clear need for anti-malware protection on Android.

Google has developed Bouncer, an internal anti-malware scanning system for their market. However, this only covers one source of applications. ThinAV provides lightweight, cloud-based anti-malware protection for Android, combining a small client with the ability to leverage multiple online anti-malware services. It addresses file access latency and privacy by scanning only apps and not user data, and by proxying scan requests to avoid IP address profiling.

## 2. Related Work
Cloud-based malware scanning systems, such as CloudAV, inspired ThinAV. CloudAV uses a lightweight client but relies on a local cloud service with twelve parallel virtual machines (VMs). An extension of CloudAV to mobile settings did not address performance in low-bandwidth, high-latency environments. In contrast, ThinAV is truly lightweight, using a small client and existing internet-based anti-malware services.

Many cloud-based anti-malware systems focus on load balancing, with well-provisioned cloud servers performing intensive processing. Some systems, like Meteor, use existing information sources to provide security guarantees, but their server-side components are unimplemented.

## 3. System Architecture

### 3.1 Overview
ThinAV is an anti-malware system for Android that offloads scanning to existing third-party malware scanning services. It is designed to be lightweight, modular, and extensible. ThinAV consists of two main components: an Android client and a server. The client submits applications for scanning, and the server forwards these to third-party services and notifies the client of the scan results. A Killswitch module periodically scans installed apps for post-installation detection.

### 3.2 Threat Model
Android provides strong application isolation by assigning each app a unique UNIX user ID (UID). Once installed, apps cannot modify their code dynamically, and the OS and pre-installed system apps are trusted. Our threat model assumes:
1. Side-loaded apps cannot be executed without being installed through the OS-provided PackageInstaller.
2. Installed apps cannot modify their code dynamically.
3. The OS and pre-installed system apps are trusted.

### 3.3 Server
The ThinAV server receives scan requests and submits them to scanning modules. It is implemented in Python using the Flask web framework and runs on Linux. The server uses a local cache to store previous scan results, improving performance by reducing the need for repeated scans.

### 3.4 Safe Installer
Safe Installer prevents malicious applications from being installed. It modifies the Android Package Installer to communicate with the ThinAV server. When an app is being installed, the Safe Installer checks the app's hash against the server. If no scan report exists, the app is uploaded to the server for scanning. Based on the scan result, the installation is either allowed or blocked.

### 3.5 Killswitch
The Killswitch addresses scenarios where malicious apps are installed before ThinAV or when apps become malicious after installation. It operates independently of the installation mechanism and can be scheduled to run at regular intervals. The Killswitch can upload all apps for analysis, manually check for malicious apps, and regularly scan the device for malware.

### 3.6 Scanning Modules
ThinAV can be configured to use any third-party malware scanning service with a public API or web interface. Currently, it supports Kaspersky, VirusChief, VirusTotal, and ComDroid. These services allow users to upload files and receive malware reports.

## 4. Evaluation
[This section would include detailed evaluation results, including performance metrics, user experience, and effectiveness in detecting malware.]

## 5. Limitations
[This section would discuss the limitations of ThinAV, such as potential false positives, dependency on third-party services, and any other constraints.]

## 6. Conclusions
[This section would summarize the key findings, contributions, and future work related to ThinAV.]

---

**Note:** The sections on evaluation, limitations, and conclusions are placeholders and should be filled with detailed content based on the research and testing results.