i=1(x + xi) =
t−1
i=0( ˆGγi
(cid:20)
(cid:20)
t
Linear combination between ˆH ςf (γ) and ˆH ςf (γ)g(γ) :
assume that there exist two coeﬃcients a, b to satisfy
) · e( ˆG
+ b
f (γ) aγg(γ)
(cid:2)
i , ˆH ςf (γ)
γ+x
e( ˆG
bf (γ)
γ+xi , ˆH ςf (γ)g(γ)
) = T
aγ
γ+x
(cid:2)
i
γ+xi
= 1. To solve this equa-
So that, we have
tion, we have (a − 1)γ2 + (axi + b − xi − x
xix
b = xi = x
xi (cid:5)= x
i −
(cid:3)
(cid:3)
i) = 0. It is easy ﬁnd that our solution is a = 1 and
(cid:3)
i, but it contradicts with the assumption of
(cid:3)
i in f (γ) and g(γ).
(cid:3)
i for all xi and x
(cid:3)
i)γ + (bx
Next, we provide another problem, called GDHE2 prob-
lem, which is used to prove the security of our SBE scheme
for negative membership (Cut-mode on u (cid:5)∈ S):
Theorem 2
((n, t)-GDHE2 Problem). Let γ, ς,  ∈ Z
∗
p
be three secret random variables, f (X) and g(X) are two
polynomials described above, and ˆG, ˆH be generators of S.
Given the values in (F1, F2, F3)-GDHE2 problem with
(cid:6)
⎧⎪⎪⎪⎪⎨
⎪⎪⎪⎪⎩
F1(γ, ς, ) =
F2(γ, ς, ) =
F3(γ, ς, ) =
ˆG, ˆGγ, ··· , ˆGγt−1
(cid:4)
,
ˆGγf (γ),·· · , ˆGγm f (γ), ˆGςγf
ˆH , ˆH γ, ·· · , ˆH γn ,
ˆH f (γ)g(γ), ˆH ςf (γ)g(γ)
2(γ)g(γ),
e( ˆG, ˆH)f
(cid:7)
,
(cid:5)
2(γ)
,
and T R←− GT , decide whether e( ˆG, ˆH)ς·f
2(γ)·g(γ) = T . For
any algorithm A that makes a total of at most q queries
to the oracles computing the group operation and the bi-
linear pairing, the advantage of A is AdvIND
GDHE2,A(n, t) ≤
(q+2s+2)2·d
, where s = n + t + m + 4 and d = 2n.
2p
We provide the proof of this theorem in Appendix C. We
here give a simple comparison with GDHE1 and GDHE2 in
Table 1. As seen from this table, most of items are shared
between two problems except a slight diﬀerent: GDHE1 has
2(γ) and GDHE2 is ˆH ςf (γ). This means
a unique item ˆGςγf
that there is a strong correlation between two problems.
Table 1: Comparison with GDHE1 and GDHE2
Common Elements
ˆG, ˆGγ,· ·· , ˆGγt−1
,
ˆGγf (γ), ·· · , ˆGγm f (γ)
ˆH , ˆH γ, ··· , ˆH γn,
ˆH f (γ)g(γ), ˆH ςf (γ)g(γ)
e( ˆG, ˆH)f
2(γ)g(γ)
F1
F2
F3
GDHE1 GDHE2
ˆGςγf
2(γ)
ˆH ςf (γ)
We now prove the semantic security of our SBE scheme
based on the security model in Section 2, which has the se-
mantic security against chosen plaintext attacks (IND-CPA)
with colluders. Usually, we need two separate proofs that
prove the security of SBE scheme under two diﬀerent modes,
Select-mode and Cut-mode, respectively. However, we found
that these two proofs has too many similarities according to
the comparison result in Table 1. Therefore, we combine
two proofs into a full proof of our SBE scheme. Based on
(n, t)-GTDHE1 and (n, t)-GTDHE2, the security of our SBE
scheme satisﬁes the following theorem:
Theorem 3
(Security of SBE Scheme). Our SBE
scheme for both Select-mode and Cut-mode is semantically
secure against chosen plaintext attacks with colluders assum-
ing the (n, t)-GDHE1 and (n, t)-GDHE2 problem is hard in
S for 0 ≤ t ≤ n.
The proof of this theorem is presented in Appendix D.
Note that, our scheme is secure for arbitrary large collusion
of corrupted users because the number of corrupted users t
is not restricted in the above theorem.
5. PERFORMANCE EVALUATION
5.1 Parameter Gneration
Our scheme is constructed on the general bilinear map
group system S = (p, G1, G2, GT , e(·,·)) with prime order
p, where decisional Diﬃe-Hellman is hard. We set up our
systems using bilinear pairings introduced by Boneh and
Franklin [10]. We deﬁne the bilinear pairing takes the form
e : E(Fq) × E(Fq) → F
∗
q2 (The deﬁnition given here is from
[11, 12]), where p is a prime and k = 2 is the embedding
degree (or security multiplier). It turns out the total number
q2 ) = (q + 1)2. The
of elements is (cid:6)E(Fq) = q + 1 and (cid:6)E(F
order p is some prime factor of q + 1. We invoke this kind of
pairing directly based on the Stanford’s PBC library 2. In
order to ensure the security of our scheme, we uses 256-bit
base ﬁeld, which is equivalent to 128-bit security (κ=128-
bit) for symmetric encryption [13].
5.2 Performance Analysis
We ﬁrst provide the performance analysis from two as-
pects: computation costs and communication overheads. Here,
we assume that t denotes the size of included or excluded
subset and m denotes the manixium number of aggregated
users. We present the computation cost of our SBE scheme
in Table 2. We use [E] to denote the computation cost
of an exponent operation in G, namely, gx, where x is a
positive integer in Zp and g ∈ G or GT . We neglect the
computation cost of algebraic operations and simple modu-
lar arithmetic operations because they run fast enough [14].
The most complex operation is the computation of a bilin-
ear map e(·,·) between two elliptic points (denoted as [B]).
The symbols ZAgg(t) and P Agg(t) denote two aggregation
algorithms where t denotes the size of subset. It is easy to
ﬁnd that the encryption and decryption costs are related to
the performance of aggregation algorithms, but if the ag-
gregation algorithms are excluded, all algorithms have the
constant number of operations after m, t are set.
Then, we analyze the storage and communication costs of
our scheme. This means that the length of integer is l0 = |q|
in Zp. Similarly, we have l1 = l2 = 2|q| in G1 and G2,
and lT = 2|q| in GT for the embedding degree k = 2. The
storage and communication costs of our scheme is shown in
Table 3. We neglect the storage/communication cost of the
2http://crypto.standord.edu/pbc/times.html
197Table 2: Computation overhead of our scheme.
All
3[E]
2[B]
SBE
Select
(1 + m)[E] + 1[B]
Cut
2[E]
PAgg(t)+3[E]
ZAgg(t)+2[B]
ZAgg(t)+3[E]
PAgg(t)+2[B]
Setup
KeyGen
Encrypt
Decrypt
subset of user’s identities because the size of each identity
cannot too large as a easy-to-remember string. It is also easy
to ﬁnd that the private key, the ciphertext, and the session
key has the constant and short size (e.g., only 64-byte for a
ciphertext with point compression) regardless of the size of
subset in ciphertext.
Table 3: The storage/communication overhead.
Algorithm
SBE
Our system
Setup
KeyGen
Encrypt
Decrypt
PK
mk
SK(k)
C
ek
l2 + lT + ml1 + nl2
l0 + lT
l1
l1 + l2
lT
(m+n+2)*64-Byte
192Byte
64-Byte
128-Byte
64-Byte
In short, our scheme has the advantages as follows:
• The computation cost is low if there exist fast algo-
rithms to realize the aggregation of subset.
• The size of private key and ciphertext is constant and
short regardless of the size of subset in ciphertext.
The size of public key is related to the size of community
(or the total number of users). This is not a large problem in
applications because the users have access to a large shared
storage medium in which the proﬁles can be stored [2]. For
example, we usually provide a on-line search service for i-
dentity query from the proﬁle list in public key. In other
applications, each user only needs to store part of proﬁles,
such as his friends’ identities, because encryption and de-
cryption just need to input a subset of speciﬁed users rather
than to know all users.
6. EXPERIMENTAL RESULTS
Using GMP and JPBC libraries, we have developed a
Java-language cryptographic library upon which our SBE
cryptosystem can be constructed. This Java library contain-
s Pairing-based algorithms on elliptic curves and has been
tested on both Windows and Mac OSX platforms. Our S-
BE cryptosystem is a lightweight software about 600 lines
of code built on Eclipse. To evaluate the performance of our
SBE cryptosystem, our experiments are run in a Mac laptop
with 2.0GHz processor and 4G RAM.
6.0.1 Performance of Aggregation Functions
At ﬁrst, we evaluate the performance of two aggregation
functions. It is easy to analyze the computational costs of t-
wo functions from Section 3.4: the ZeorsAggr function needs
∗
O(t2) times multiplication operations in Z
p and O(t) times
exponent operations in G1; and the PolesAggr function need-
s O(t2) times exponent operations in G2 and O(t2) times
∗
xGCD operations in Z
p. Hence, the computational costs of
PolesAggr is far greater than (roughly t times as) that of Ze-
rosAggr due to the cost of operations in G1 and G2 is much
larger than that in Z
∗
p.
We give the result of experiments for two aggregation
functions in Figure 5, in which time consumptions of two
Figure 5: Time overheads of aggregation functions.
functions are showed under the diﬀerent size of subsets (from
10 to 100). From this ﬁgure, it is easy to ﬁnd that the com-
putational costs of ZerosAggr is proportional to the size of
subset, and the costs of PolesAggr grows rapidly for the sus-
tained growth of subset sizes. The memory overheads of two
algorithms are proportional to the size of subset. These re-
sults are completely consistent with our previous theoretical
analysis. However, the time consumption is still high for a
large-size subset, so that we can improve the performance
by using parallel algorithm or fast elliptic curve algorithm.
6.0.2 Performance under Different Modes
We next analyze the performance of encryption and de-
cryption processes according to three modes, including All,
Select, and Cut in Figure 6. The left sugﬁgure shows the
time consumption of encryption for these three modes in
which the encryption overhead in Select-mode is greatest of
all. The similar result of decryption is showed in the right
subﬁgure but the decryption overhead in Cut-mode is great-
est of all instead of Select-mode. When the system is not
large, the users can choose Select-mode or Cut-mode accord-
ing to application requirements, e.g., the Select-mode is used
to reduce the overhead of decryption for mobile terminals
with limited power (smart phone or sensor node) while leav-
ing heavy encryption for high-power servers.
In addition,
the aggregation functions could be preprocessed in some ap-
plications with the ﬁxed receivers, such that encryption and
decryption can be achieved rapidly.
The same results are listed in Table 4. As seen from this
table, the overhead of encryption or decryption is constant
in All-mode no matter how large the total number of users is
in system. In Select-mode, the encryption overhead is more
higher than that of decryption due to the time consump-
tion of PolesAggr is much larger than that of ZerosAggr.
The similar situation also appears in Cut-mode where the
decryption overhead is more higher than that of encryption
based on the same reason. However, no matter what mode
we pick, the ciphertext is only two points on an elliptic curve
and the size of ciphertexts is constant for any mode.
Table 4: Time consumption of encryption and de-
cryption under the diﬀerent modes.
Size
1
20
40
60
80
100
All
0.00959
0.01239
0.01164
0.0109
0.01055
0.01066
Encryption
Select
0.01106
0.55603
2.21912
5.02113
8.99909
14.19017
Cut
0.01585
0.11251
0.22061
0.3162
0.418
0.5107
Decryption
All
0.01059
0.01056
0.01046
0.00815
0.0081
0.00775
Select
0.01267
0.10591
0.21214
0.31277
0.41469
0.50979
Cut
0.0137
0.63935
2.39276
5.30531
9.40407
14.6477
198Figure 6: Time overheads of diﬀerent modes in SBE.
Figure 7: Time overhead of diﬀerent algorithms in SBE.
6.0.3 Performance of SBE Cryptosystem
Finally, we provide the result of experiments to illustrate
the performance of our SBE cryptosystem. Our experiments
were implemented by a test (and demo) routine about 1000
lines of code. At ﬁrst, we tested the total overheads of en-
cryption and decryption under the diﬀerent modes. As seen