6. Evaluation
We evaluated the key aspects of our system using a wide
range of software on Linux and FreeBSD operating systems.
Below, we present our ﬁndings and results.
6.1 Compatibility
In this section, we evaluate the compatibility improve-
ment oﬀered by our approach. We ﬁrst present statistics on
the identiﬁcation of non-standard returns, together with an
explanation for their prevalence. We then demonstrate the
improved compatibility by testing our instrumentation on
low-level and real-world software.
6.1.1 Non-standard Return Statistics
We ran our static analysis tool on executables and shared
libraries from an Ubuntu 12.04 32 bit Linux desktop distri-
bution, and a FreeBSD 10.1 32 bit desktop distribution. We
have identiﬁed hundreds of non-standard return instances
from diﬀerent modules. Figure 4 shows the number of non-
standard return instances and the modules containing them
for diﬀerent directories of Linux and FreeBSD.
To better understand the impact of non-standard returns
to shadow stack compatibility, we need to further zoom in
and see if they exist in widely used binary modules. Figure 5
shows the prevalence of non-standard returns in some of the
widely used modules.
6.1.2 Non-standard Return Summary
Type
Software
Size Description
Low-level
libunwind
1.9
Low-level
libtask
scp
python
latex
vim
gedit
evince
Real-world
Real-world
Real-world
Real-world
Real-world
Real-world
Real-world mplayer
Real-world wireshark
2.0
2.1
6.7
7.8
9.1
22
26
46
58
Run a test program unwinding its
own stack based on libunwind API
Run a tcp proxy that uses user level
threads API provided by libtask
Copy 10 ﬁles to server
Run pystone 1.1 benchmark
Compile 10 tex ﬁles to dvi
Edit text ﬁle, search, replace, save
Edit text ﬁle, search, replace, save
View 10 pdf ﬁles
Play 10 mp3s
Capture packets for 10 min
Figure 6: Low-level and real-world software testing
In this section, we summarize some of the most common
reasons for the prevalence of non-standard returns, based on
an analysis of our static analysis results.
1. Programming language design and implementation
In addition to subroutine abstraction, return instructions
can also be used to implement other control ﬂow abstrac-
tions such as coroutines or light-weight threads. Under
these situations, they are used to transfer control between
contexts, and therefore do not match calls.
2. Operating system design and implementation
Operating systems also provide programmers various ab-
stractions to ease their job. These abstractions may use
return to implement control ﬂow behavior across OS bound-
ary. UNIX signals, as discussed, are probably the most
prominent example in this category.
3. Optimization “tricks”
In the engineering of some software constructs, program-
mers tend to make “clever” uses of assembly instructions.
This also happens to return instructions.
6.1.3 Testing Low-level and Real-World Software
In order to further evaluate the compatibility of our ap-
proach, we tested it with some low-level libraries and real-
world software. For each binary module tested, we ﬁrst
ran our static analysis to identify non-standard returns and
RAstore instructions. The results are then fed into our in-
strumentation module to generate hardened binaries. The
instrumented software is ﬁnally executed for testing. For
multi-threaded programs used in this evaluation, we used
Pin [28] for our testing.
Figure 6 shows the low-level and real-world software we
have tested, and how we tested them. The “Size” column
speciﬁes the total mapped code size (in MB) of all modules
of the program. No incompatibilities were found on any
of these programs, demonstrating that our approach works
well even on low-level software. The total size of all software
tested in this evaluation is almost 200MB.
6.2 Protection
6.2.1
Our system instruments all software modules including
executables, shared libraries, and dynamic loader. More-
over, it protects all backward edges including both standard
and non-standard returns. Return capabilities greatly re-
strict the scope of attacks possible. A coarse-grained CFI
permits any return to target any of the instructions follow-
ing a call in a program.
In contrast, our approach limits
return to one of the return addresses that are already on the
Security Analysis
RCAP-stack. Moreover, each time an attack makes use of
a return address other than the top entry on RCAP-stack,
the intervening entries are popped oﬀ, thus further reducing
the choice of possible targets for the next return.
Note that although JOP and COP gadgets can be used in
advanced code-reuse attacks, the vast majority of them still
rely on ROP gadgets [17, 14, 6, 18], and therefore can be
defeated by our system.
Stack Pivoting. In ROP attacks, controlling the stack is
the most important goal of the attacker. This is because,
(a) fake return addresses need to be prepared on stack so
that control ﬂow can be repeatedly redirected in the manner
chosen by the attacker, and (b) the stack supplies the data
used in ROP computation.
Attackers basically have two choices to control the stack.
The ﬁrst is to corrupt the stack, usually through a stack
buﬀer overﬂow. The second is to pivot the stack, i.e., hi-
jack the stack pointer to point to attacker controlled data.
Among these two, stack pivoting is more versatile because
vulnerabilities other than buﬀer overﬂow could be used. It
is also more convenient because the entire stack could be
controlled, without being limited by factors such as the lo-
cation of the vulnerable buﬀer, or the maximum length of
overﬂow.
Our system readily defeats ROP based on both stack cor-
ruption and stack pivoting. As the eﬀectiveness for stack
corruption is clear, we focus on the latter. Speciﬁcally, in
a single RCAP-stack scheme, stack pivoting based ROP
is blocked because the required return capabilities won’t
be present on RCAP-stack. When multiple RCAP-stacks
are used, although stack pivoting could cause new RCAP-
stack creation, this does not compromise security as the new
RCAP-stack starts out with zero return capabilities on it.
Note that RCAP-stack protection is critical for defeating
stack pivoting. This is because in addition to stack pivoting,
the attacker could also craft and pivot an RCAP-stack by
corrupting the RCAP-stack pointer. While previous solu-
tions may be vulnerable to such attacks [15, 12], our system
is resistant because RCAP-stack pointer resides in protectd
memory as well.
TOCTTOU Threats. For standard returns, our instru-
mentation pushes return capability onto RCAP-stack at the
time of a call, i.e., the instant that return capability is issued.
This is diﬀerent from schemes that push return capability
at function prologue [8, 12], and hence provide a (narrow)
window for TOCTTOU attacks.
However, we note that our instrumentation does have a
delay to store return capability in the case of a non-standard
return: i.e., it happens at RAstore instruction, rather than
return address generation instruction. This is due to limited
data ﬂow tracking of our analysis, and is not an issue when
annotation is possible.
Storing return capability at a later time may give some
window for attackers, because they can modify the gener-
ated return capability before its store on both stacks. How-
ever, attacker capabilities for utilizing non-standard returns
is greatly limited because of the following two reasons. First,
CFI is still enforced as our base policy. Even if return capa-
bilities for non-standard returns can be altered by attackers,
it has to satisfy CFI at least, and therefore the forged capa-
bility can only grant transfer to instructions after calls. Sec-
ond, as shown in Section 6.1.1, there are limited number of
Figure 7: CPU overhead of shadow stack systems on SPEC 2006
non-standard returns. Repeatedly corrupting return capa-
bilities before store, eﬀectively chaining such limited gadgets
and bypassing CFI would be very diﬃcult.
6.2.2 Experimental Evaluation of ROP Defense
We evaluated the eﬀectiveness of our approach using two
real-world ROP attacks. Our ﬁrst test was the ROPEME
attack [27], which exploits a buﬀer overﬂow vulnerability in
a test program. The attack is two-staged. In the ﬁrst stage,
the attack uses a limited set of gadgets in non-randomized
executable code to leak out the base address of libc. This
enables the attacker to bypass ASLR as it relates to tar-
geting gadgets in libc. In the second stage of the attack,
ROPEME uses a payload consisting of a chain of libc gad-
gets. The stack is pivoted to this payload, and control is
transferred to libc gadgets. Our defense blocked the attack
at the ﬁrst stage, because a backward edge control ﬂow vio-
lation was identiﬁed when the vulnerable function returned
with an overwritten return address.
Our second test was to protect a vulnerable Linux hex
editor: HT Editor 2.0.20. A specially crafted long input
could overﬂow the stack and lead to ROP attack [1]. As
with the ﬁrst attack, we detected the very ﬁrst control ﬂow
violation and successfully defeated this ROP attack as well.
6.3 Performance Overhead
We have measured the CPU overhead of our instrumen-
tation on SPEC 2006 benchmark. We tested on a x86-32
Linux machine because it is the only environment currently
supported by PSI [50]. For all the benchmarked programs,
we transformed all involved executables and shared libraries.
The results are presented in Figure 7, where an empty bar in
the histogram indicates an unavailable performance number.
We compare our performance with that of our base plat-
form PSI [50] and Lockdown [35], a recent dynamic instru-
mentation based shadow stack implementation. From Fig-
ure 7, we can see that the performance overhead of our sys-
tem is about 17% on average. Our optimization (Section 5.3)
accelerates several control-ﬂow intensive benchmarks such
as 429.mcf and 447.dealll by 9% and 403.gcc, 458.sjeng,
471.omnetpp, and 453.povray by 5%. For the common set
of programs we had with Lockdown, our overhead is 13%
while theirs is about 24%.
Parallel shadow stack [12] achieves lower overhead by em-
ploying a variety of optimizations. They report overheads in
the range of 3.7% to 4.6%. Their approach does not operate
on binaries, but instead, on the assembly code produced by
a compiler. As a result, they avoid the overhead of address
translation. In addition, they do not enforce CFI. Consid-
ering these are the two major source of overhead for the
PSI platform we used, our added overhead of 4% makes our
performance comparable to theirs.
7. Related Work
Bounds-Checking. The most comprehensive defense for
memory corruption attacks is based on bounds-checking [24,
45, 46, 3, 29]. Unfortunately, these techniques introduce
considerable overheads, while also raising signiﬁcant com-
patibility issues [42]. LBC [20] achieves lower overheads
while greatly improving compatibility by trading oﬀ the abil-
ity to detect non-contiguous buﬀer overﬂows. Code pointer
integrity [26] signiﬁcantly reduces overheads by selectively
protecting only those pointers whose corruption can lead to
control-ﬂow hijacks.
Control-Flow Integrity. Control-ﬂow integrity can sig-
niﬁcantly limit an attacker’s choices for diverting control
ﬂow [2, 51, 49]. The modest performance overheads of these
techniques can be further signiﬁcantly reduced using mod-
ern CPU features such as the Last Branch Record (LBR)
[34, 7]. The downside, however, is a looser policy that can
be more easily bypassed. Indeed, several researchers have
shown that in general, coarse-grained CFI techniques canbe
defeated [17, 14, 18, 6]. The biggest culprit behind this
weakness is the policy applied for returns, which typically
allows control to go back to any instruction that follows
a call. Shadow stack schemes such as ours eliminate this
weakness. The second major source of CFI weakness is the
large number of valid targets for indirect calls, especially in
C++ programs. Forward-edge CFI techniques [43] can sig-
niﬁcantly narrow down these targets using information such
as function signatures.
G-Free [32] is a novel ROP defense technique that elimi-
nates unintended gadgets. It requires programs to be recom-
piled, and introduces a rewriting phase on the compiler’s
assembly code output. This phase ensures that the return
opcode will not occur in the middle of valid instructions.
To guard against the use of gadgets ending with intended
return instructions, G-Free “encrypts” return addresses by
XOR-masking with a secret key, but this scheme is weak
against adversaries that can leak return addresses on the
stack. Shadow stack approaches avoid this weakness.
 0 20 40 60 80 100 120 140400.perlbench401.bzip2403.gcc429.mcf445.gobmk456.hmmer458.sjeng462.libquantum464.h264ref471.omnetpp473.astar433.milc435.gromacs437.leslie3d444.namd447.dealII450.soplex453.povray454.calculix459.GemsFDTD465.tonto470.lbm481.wrf482.sphinx3average-set1averageOverhead %PSI-baseRCAP-stackLockdownCode Randomization. These techniques may be aimed at
randomizing the actual instruction content, or simply their
locations. Instruction-space randomization (ISR) [25, 4] is a