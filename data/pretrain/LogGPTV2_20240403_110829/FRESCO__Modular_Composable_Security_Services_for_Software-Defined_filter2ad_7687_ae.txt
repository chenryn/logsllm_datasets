consider handling of set action commands, which we con-
sider to be a signiﬁcant distinguisher for OpenFlow net-
works. More recently, researchers have proposed develop-
ing language abstractions to guarantee consistency of ﬂow
updates in software-deﬁned networks [32]. In contrast, our
complementary work on the FRESCO security enforcement
kernel is focused on detection of rule update conﬂicts and
security policy violations. The Onix platform [20] pro-
vides a generalized API for managing a distributed control
plane in Software Deﬁned Networks. The techniques and
the strategies developed in Onix for managing a distributed
network information base are complementary and can be
integrated into FRESCO.
10 Conclusion
Despite the success of OpenFlow, developing and de-
ploying complex OF security services remains a signiﬁcant
challenge. We present FRESCO, a new application develop-
ment framework speciﬁcally designed to address this prob-
lem. We introduce the FRESCO architecture and its integra-
tion with the NOX OpenFlow controller, and present sev-
eral illustrative security applications written in the FRESCO
scripting language. To empower FRESCO applications
with the ability to produce enforceable ﬂow constraints that
can defend the network as threats are detected, we present
the FRESCO security enforcement kernel. Our evalua-
tions demonstrate that FRESCO introduces minimal over-
head and that it enables rapid creation of popular security
functions with signiﬁcantly (over 90%) fewer lines of code.
We believe that FRESCO offers a powerful new framework
for prototyping and delivering innovative security applica-
tions into the rapidly evolving world of software-deﬁned
networks. We plan to release all developed code as open
source software to the SDN community.
11 Acknowledements
This material is based in part upon work supported
by the Defense Advanced Research Projects Agency
(DARPA) and the United States Air Force under Contract
No. FA8750-11-C-0249, the Army Research Ofﬁce under
Cyber-TA Grant no. W911NF-06-1-0316, and the National
Science Foundation under Grant no. CNS-0954096. All
opinions, ﬁndings and conclusions or recommendations ex-
pressed herein are those of the author(s) and do not neces-
sarily reﬂect the views of the U.S. Air Force, DARPA, U.S.
Army Research Ofﬁce, or the National Science Foundation.
It is approved for Public Release, Distribution Unlimited.
References
[1] E. Al-Shaer and S. Al-Haj. FlowChecker: Conﬁguration
Analysis and Veriﬁcation of Federated Openﬂow Infrastruc-
tures. In Proceedings of the 3rd ACM Workshop on Assur-
able and Usable Security Conﬁguration, SafeConﬁg, pages
37–44, New York, NY, USA, 2010. ACM.
[2] E. Al-shaer, W. Marrero, A. El-atawy, and K. Elbadawi. Net-
work Conﬁguration in A Box: Towards End-to-End Ver-
In The
iﬁcation of Network Reachability and Security.
17th IEEE International Conference on Network Protocols
(ICNP), 2009.
[3] J. R. Ballard, I. Rae, and A. Akella. Extensible and Scal-
able Network Monitoring Using OpenSAFE. In INM/WREN,
2010.
[4] Z. Cai, A. L. Cox, and T. E. Ng. Maestro: A System for
In Rice University Technical
Scalable OpenFlow Control.
Report, 2010.
[5] M. Canini, D. Venzano, P. Peresini, D. Kostic, and J. Rex-
ford. A NICE Way to Test OpenFlow Applications. In Pro-
ceedings of NSDI, 2012.
[6] M. Casado, M. J. Freedman, J. Pettit, J. Luo, N. McKeown,
and S. Shenker. Ethane: Taking Control of the Enterprise. In
Proceedings of ACM SIGCOMM, 2007.
[7] M. Casado, T. Garﬁnkel, M. Freedman, A. Akella, D. Boneh,
N. McKeowon, and S. Shenker. SANE: A Protection Ar-
chitecture for Enterprise Networks. In Proceedings Usenix
Security Symposium, August 2006.
[8] A. El-atawy, T. Samak, Z. Wali, E. Al-shaer, F. Lin, C. Pham,
and S. Li. An Automated Framework for Validating Firewall
Policy Enforcement. Technical report, De-Paul University,
2007.
[9] N. Foster, R. Harrison, M. Freedman, C. Monsanto, J. Rex-
ford, A. Story, and D. Walker. Frenetic: A Network Program-
ming Language. In ACM SIGPLAN Inernational Conference
on Functional Programming, 2011.
[10] A. Greenberg, G. Hjalmtysson, D. A. Maltz, A. Myers,
J. Rexford, G. Xie, H. Yan, J. Zhan, and H. Zhang. A Clean
Slate 4D Approach to Network Control and Management.
In Proceedings of ACM Computer Communications Review,
2005.
[11] G. Gu, R. Perdisci, J. Zhang, and W. Lee. BotMiner: Cluster-
ing Analysis of Network Trafﬁc for Protocol- and Structure-
Independent Botnet Detection. In Proceedings of USENIX
Security Symposium (Security’08), 2008.
[12] G. Gu, P. Porras, V. Yegneswaran, M. Fong, and W. Lee.
BotHunter: Detecting malware infection through ids-driven
dialog correlation. In Proceedings of the 16th USENIX Se-
curity Symposium (Security’07), August 2007.
[13] N. Gude, T. Koponen, J. Pettit, B. Pfaff, M. Casado, N. McK-
eown, and S. Shenker. NOX: Towards an Operating System
for Networks. In Proceedings of ACM SIGCOMM Computer
Communication Review, July 2008.
[14] J. H. Jafarian, E. Al-Shaer, and Q. Duan. OpenFlow Random
Host Mutation: Transparent Moving Target Defense using
Software-Deﬁned Networking. In Proceedings of ACM Sig-
comm HotSDN Workshop, 2012.
[15] J. Jung, R. Milito, and V. Paxson. On the Adaptive Real-time
Detection of Fast Propagating Network Worms. In Proceed-
ings of Conference on Detection of Intrusions and Malware
and Vulnerability Assessment (DIMVA), 2007.
[16] J. Jung, V. Paxson, A. Berger, and H. Balakrishnan. Fast
Portscan Detection Using Sequential Hypothesis Testing. In
Proceedings of IEEE Symposium on Security and Privacy,
2004.
[17] P. Kazemian, G. Varghese, and N. McKeown. Header Space
Analysis: Static Checking for Networks. In Proceedings of
NSDI, 2012.
[18] A. Khurshid, W. Zhou, M. Caesar, and P. B. Godfrey. Veri-
Flow: Verifying Network-Wide Invariants in Real Time. In
Proceedings of ACM Sigcomm HotSDN Workshop, 2012.
[19] E. Kohler, R. Morris, B. Chen, J. Jannotti, and F. Kaashoek.
The Click Modular Router. ACM Transactions on Computer
Systems, August 2000.
[20] T. Koponen, M. Casado, N. Gude, J. Stribling, L. Poutievski,
M. Zhu, R. Ramanathan, Y. Iwata, H. Inoue, T. Hama, and
S. Shenker. Onix: A Distributed Control Platform for Large-
scale Production Networks. In The Symposium on Operating
Systems Design and Implementation (NSDI), 2010.
[21] A. Liu. Formal Veriﬁcation of Firewall Policies. In Proceed-
ings of the 2008 IEEE International Conference on Commu-
nications (ICC), Beijing,China, May 2008.
[22] A. Liu and M. Gouda. Diverse Firewall Design. IEEE Trans-
actions on Parallel and Distributed Systems (TPDS), 19(8),
2008.
[23] N. McKeown, T. Anderson, H. Balakrishnan, G. Parulkar,
L. Peterson, J. Rexford, S. Shenker, and J. Turner. Open-
In Pro-
Flow: Enabling Innovation in Campus Networks.
ceedings of ACM SIGCOMM Computer Communication Re-
view, April 2008.
[24] S. A. Mehdi, J. Khalid, and S. A. Khayam. Revisiting Traf-
ﬁc Anomaly Detection Using Software Deﬁned Networking.
In Proceedings of Recent Advances in Intrusion Detection,
2011.
[25] Mininet. Rapid Prototyping for Software Deﬁned Net-
http://yuba.stanford.edu/foswiki/
works.
bin/view/OpenFlow/Mininet/.
[26] J. C. Mogul, J. Tourrilhes, P. Yalagandula, P. Sharma, A. R.
Curtis, and S. Banerjee. DevoFlow: Cost-effective Flow
Management for High Performance Enterprise Networks. In
Proceedings of the Ninth ACM SIGCOMM Workshop on Hot
Topics in Networks, 2010.
[27] A. Nayak, A. Reimers, N. Feamster, and R. Clark. Reso-
nance: Dynamic Access Control for Enterprise Networks. In
Proceedings of WREN, 2009.
[28] NMAP.ORG. Nmap: Open Source Network Discovery and
Auditing Tool. http://nmap.org.
[29] OpenFlow. OpenFlow 1.1.0 Speciﬁcation. http://www.
openflow.org/documents/openflow-spec-v1.
1.0.pdf.
[30] OpenFlowHub.
BEACON.
http://www.
openflowhub.org/display/Beacon.
[31] P. Porras, S. Shin, V. Yegneswaran, M. Fong, M. Tyson, and
G. Gu. A Security Enforcement Kernel for OpenFlow Net-
works. In Proceedings ACM SIGCOMM Workshops on Hot
Topics in Software Deﬁned Networking (HotSDN), August
2012.
[32] M. Reitblatt, N. Foster, J. Rexford, and D. Walker. Consistent
Update for Software-Deﬁned Networks: Change You Can
Believe In! In Under Submission, 2011.
[33] RFC4765. The intrusion detection message exchange format
http://www.ietf.org/rfc/rfc4765.
(idmef).
txt.
[34] S. Schechter, J. Jung, and A. Berger. Accuracy Improv-
ing Guidelines for Network Anomaly Detection Systems.
In Proceedings of International Symposium on Recent Ad-
vances Intrusion Detection.
[35] V. Sekar, Y. Xie, M. Reiter, and H. Zhang. A Multi-
Resolution Approach for Worm Detection and Containment.
In Proceedings of International Conference on Dependable
Systems and Networks (DSN), June 2006.
[36] D. Senn, D. Basin, and G. Caronni. Firewall Conformance
Testing. In The 17th IFIP International Conference on Test-
ing of Communicating Systems (TestCom), pages 226–241,
2005.
[37] R. Sherwood, G. Gibb, K.-K. Yap, G. Appenzeller,
M. Casado, N. McKeown, and G. Parulkar. Can the Produc-
tion Network Be the Testbed. In Proceedings of Operating
System Design and Implementation, 2010.
[38] Snort. http://snort.org.
[39] J. Twycross and M. M. Williamson. Implementing and test-
ing a virus throttle. In Proceedings of the USENIX Security
Symposium, 2003.
[40] A. Voellmy and P. Hudak. Nettle: Functional Reactive Pro-
gramming of OpenFlow Networks. In Yale University Tech-
nical Report, 2010.
[41] A. Voellmy, H. Kim, and N. Feamster. Procera: A Language
for High-Level Reactive Network Control. In Proceedings of
ACM Sigcomm HotSDN Workshop, 2012.
[42] G. Xie, J. Zhan, D. Maltz, H. Zhang, A. Greenberg,
G. Hjalmtysson, and J. Rexford. On Static Reachabil-
In The 24th IEEE Interna-
ity Analysis of IP Networks.
tional Conference on Computer Communications (INFO-
COM), pages 2170–2183, 2005.
[43] T.-F. Yen and M. K. Reiter. Are Your Hosts Trading or Plot-
ting? Telling P2P File-sharing and Bots Apart. In Proceed-
ings of IEEE ICDCS, 2010.
A Appendix
A.1 FRESCO Security Enforcement Kernel
It is possible that the ﬂow rules created by non-security-
related OF applications conﬂict with the ﬂow constraints
distributed by FRESCO applications. A conﬂict arises when
one or more ﬂow rules would allow a ﬂow from one end
point to another that is speciﬁcally prohibited by a ﬂow con-
straint rule produced by a FRESCO application. To manage
FRESCO ﬂow constraints and perform conﬂict evaluation,
we introduce the FRESCO SEK as an embedded NOX ex-
tension.
Two main components of OpenFlow rules are match con-
ditions and actions. The former speciﬁes packet header
ﬁelds that must match for the rule’s associated actions to
trigger. The FRESCO SEK maintains the set of active
constraint rules produced by registered FRESCO modules.
Constraint rules inserted into the FRESCO SEK security
constraints table are considered active, and must be ex-
plicitly deactivated by a registered FRESCO module. Be-
cause non-FRESCO applications can publish ﬂow rules that
potentially violate FRESCO’s network security policy, The
FRESCO SEK employs two protection mechanisms to pre-
vent such violations. The ﬁrst mechanism is rule prioriti-
zation, in which ﬂow rules produced by FRESCO applica-
tions are published to the switch using the highest rule prior-
ity. This immediately overrides any active ﬂow rules in the
switch’s ﬂow table that may contradict FRESCO’s security
policy. Second, the FRESCO SEK applies a conﬂict detec-
tion algorithm between each new ﬂow rule and the security
constraints table, rejecting the new ﬂow rule if a conﬂict
is detected. Conﬂict detection is performed in two passes:
alias set rule reduction, and then rule set conﬂict evaluation.
A conﬂict can also happen between security constraints
enforced by different FRESCO applications. In this case,
the FRESCO SEK can still detect conﬂicts but it needs to
determine which constraint should be enforced. By default,
FRESCO SEK keeps the ﬁrst enforced constraint (i.e., ig-
nore following conﬂicted constraint), but it is easy to be
conﬁgured by the administrators to apply other approaches
(e.g., keep the last enforced constraint, or based on some
priority settings).
A.1.1 Alias Set Rule Reduction
To detect conﬂicts between a candidate rule set and
FRESCO’s constraint rule sets, the source and destination
As a practical consideration, because OpenFlow rules
permit both wildcard ﬁeld matches and IP address network
masks, determining alias set intersection involves more than
simple membership equality checks. To accommodate this,
we deﬁne comparison operators that determine if a ﬁeld
speciﬁcation is (i) more encompassing (“wider”), (ii) more
speciﬁc (“narrower”), (iii) equal, or (iv) unequal. Thus, an
intersection occurs when the pairwise comparisons between
all ﬁelds of a candidate rule are wider than, equal to, or nar-
rower than that of the corresponding ﬁelds of the constraint
table rule.
For a formalization of the above, we ﬁrst deﬁne some
terms: (i) Si is the ith entry of security constraints, (ii) Fi
is the ith entry of ﬂow rules, (iii) SCi,j is the jth item of
the ith entry of the condition part of the security constraint,
(iv) SAi is the ith entry of the action part of the security
constraint, (v) F Ci,j is the jth item of the ith condition
part of a ﬂow rule from non-FRESCO applications, and (vi)
F Ai is the ith action part of the ﬂow rule. At this time,
both SCi,j and F Ci,j are sets whose elements are one of
the speciﬁc value or some ranges and j ∈ {1, 2, ..., 14}.
Rule contradiction is then formalized using the following
notation:
if there is any Si, satisfying SCi,j ∩ F Ci,j (cid:54)= (cid:11) and
SAi (cid:54)= F Ai, for all j, thenFi is conﬂicted with Si
(6)
Finally, upon an update to the security constraints ta-
ble, rule set conﬂict resolution is performed against all ﬂow
rules currently active within the switch. If a conﬂict is de-
tected in which the switch rule is found to be wider than the
FRESCO rule, SEK initiates a request to the switch to ﬂush
the resident rule.
(1)
(2)
(3)
(4)
(5)
IP addresses, their ports, and wild card members 3 for each
rule in a rule set are used to derive rules with alias sets
representing IP addresses and ports. The initial alias sets
contain the ﬁrst rule’s IP addresses, network masks, and
ports (where 0 [zero] represents any port). If the rule’s ac-
tion causes a ﬁeld substitution via a set action, the resultant
value is added to the appropriate alias set. These sets are
then compared to the next rule’s alias sets. If there is an
intersection between both the source and address sets, the
union of the respective sets is used as the subsequent rule’s
alias sets. For example, given the FRESCO rule,
a → b drop packet
its source alias set is (a), while its destination alias set is (b).
The derived rule is
(a) → (b) drop packet
For the candidate (evasion) rule set,
1 a → c set (a ⇒ a’)
2 a’ → c set (c ⇒ b)
3 a’ → b forward packet
the intermediate alias sets are
1 a → c set (a ⇒ a’)
2 a’ → c set (c ⇒ b)
3 a’ → b forward packet (a, a’) (c, b) forward packet
(a, a’) (c)
(a, a’) (c, b)
and the derived rule is
(a, a’) ⇒ (c, b) forward packet
A.1.2 Rule Set Conﬂict Evaluation
The FRESCO SEK ﬁrst performs alias set rule reduction
on the candidate rule set. These validity checks are then
performed between each derived FRESCO constraint rule
cRule and each derived ﬂow rule fRule, as follows:
1. Skip any cRule/fRule pair with mismatched proto-
types.
2. Skip any cRule/fRule pair whose actions are both ei-
ther forward or drop packet.
3. If cRule’s alias sets intersect those of fRule’s, declare
a conﬂict.
Thus, given the example security constraint table in
Equation 2 and the candidate rule set in Equation 5, assum-
ing that both rules are TCP protocol, the ﬁrst candidate rule
passes the ﬁrst two checks. However, for the third check,
because the intersection of the source and destination alias
sets results in (a) and (b), respectively, the candidate rule is
declared to be in conﬂict.
3For OpenFlow 1.1, the examined members include the source and des-
tination network mask ﬁelds (for OpenFlow 1.0 these are implicitly deﬁned
by the wildcard ﬁeld).