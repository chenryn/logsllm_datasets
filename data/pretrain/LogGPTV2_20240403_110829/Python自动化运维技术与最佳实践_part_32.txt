Md_1
密，与项目中 setting-Py 的 SECRBT_KEY 变
SECRET_KEY -"ctmsamp;8hrgow_sjejt
量保持败
图13-10服务器端模块目录结构
9fzsmh_o) -= (byt.5mg=e3#foya6u*
服务器端任务模块由Modulehandle类及其两个方法组成，其中_init_O方法作用为初
始化模块基本信息，包括操作主机列表、模块ID、模块扩展参数等；runO方法实现组件API
的调用以及返回执行结果。针对“重启进程服务”这个任务模块，下面分别介绍3个组件的
不同实现方法。
1）编写Ansible组件ID为“1007”模块。
根据Ansible组件模块的开发原理，通过调用command模块实现远程命令执行，使用
copy模块实现文件远程同步，详细源码如下：
[ /home/test/OMServer/modules/ansible/Mid_1007.py 1
 -*- coding: utf-8 -*-
from Public_lib import *
重容应用模块进租服务
class Hodulehandle () :
def __init__(self,moduleid, hosts, sys_paran_row) 1
self.hosts = **
相始化方法无须改动
self,Runresult - **
self,module1d =module1d 模块 ID
self.sys_paran_azray- sys_param_row
模块扩展参数列表
---
## Page 264
第13章从零开始打造B/S自动化运维平台243
任务下发、执行方法
def run(self) :
try:
根据模块扩展参数定义执行的不国命令集
commonname=str (self ,sys_param_array[0])
if conmonname*"resin*:
self.command=*/etc/init,d/resin restart*
elif conmonname==*nginx*:
elif connonname=a*haproxy";
self.command="/etc/init.d/nginx restart"
self.command="/etc/init,d/haproxy restart*
elif commonname=="apache*:
self .command="/etc/init.d/httpd restart"
elif commonname==*mysq1*:
self,command="/etc/init,d/mysq] restart*
elif connonname=="lighttpd*:
self.command=*/etc/init,d/1ighttpd restart*
调用 Ansible 提供的 API (command 模块)。 执行选程命令
pattern=self.hosts, forks=forks,
self.Runresult = ansible.runner.Runner(
module_nane=*command*, module_args=se1 f .command, ) -run ()
return“No hostsfound，请确认主机已经添加ansible环境！”
:o'uotidaoxg sdaoxo
return self.Runresult返丽执行结果
return str (e)
2）编写Saltstack组件ID为“1007模块。
fle”参数实现远程命令执行及文件远程同步，详细源码（部分）如下：
[/home/test/OMServer/modules/saltstack/Mid_1007.py]
def run(self) :
try:
client = salt.client.Localclient ()
调用Saltstack提供的aPI（cmd.run模块），执行远程命令
-...
self.Runresult = client.cmd(self.hosts, *cmd.run*, [self.command],\
expr_form='1ist')
if len(self,Runresult) == 0:
except Exception,e1
return str (e)
return self.Runresult
返罚执行给果
3）编写Fune组件ID为“1007”模块。
根据Func组件模块的开发原理，通过调用client.command.runO方法实现远程命令执行，
使用client.copyfile.copyfileO方法实现文件远程同步，详细源码（部分）如下：
---
## Page 265
244第三部分案例篇
[ /home/test/OMServer/modules/func/Mid_1007.py ]
def run (self) :
client = fc.Overlord (self.hosts)
调用 Func 提供的 API(connand, run 模块)，执行远程命令
commonname=str (se1f ,sys_param_array [0])
self .Runresult=client,command,run (self ,command)
except Exception, e1
return self.Runresult
return str (e)
返图执行结票
任务模块编写完成后，启动服务端服务，运行以下命令：
cd /home/test/OMServer
 python OMservermain-Py 6
最后，打开浏览器访问 http://omserver.domain.com，效果见图13-11。
OMServer
图13-11远程操作功能截图
RC4 加 密算法参 考文章 http:/www.snip2code.com/Snippet/27937/Blockout-encryption-
decryption-methods-p。
---
## Page 266
第14章
Clupderie
打造Linux系统安全审计功能
随着互联网逐渐深人我们日常生活的方方面面，网络安全威胁也随之严重，比如服务
器渗透、数据窃取、恶意攻击等。为了解决网络安全的问题，人们采取了各式各样的防护
措施来保证网络或服务的正常运行，其中系统安全审计是记录入侵攻击主机的一个重要凭
证：实时跟踪黑客的操作记录，可在第一时间监测到攻击者的行为，并让管理员采取相应
的应对措施；同时也可作为日后攻击者的犯罪证据，为后续的审计工作提供数据依据，具
有可靠性、完整性、不可抵赖等特点。本章将介绍在OMServer平台扩展Linux系统安全审
计功能。
14.1平台功能介绍
安全审计功能作为OMServer平台的一部分，扩展了Linux系统安全审计的功能，实现
实时跟踪所有Limux服务器系统登录账号的操作记录，由于操作记录异地集中式存储，即使
攻击者做了事后的操作痕迹清理也无济于事。该功能结合Linux系统的history（命令行历史
记录）工作机制实现，同时设置用户全局环境/etc/profile的history属性变量，实现定制系统
用户实时触发事件，在该事件中加人Python编写的上报脚本，实现数据的实时跟踪，最后利
用OMServer的前端作为实时输出展示，平台首页截图见图14-1。
---
## Page 267
246第三部分案例篇
OMServer
EVW3
图14-1平台首页截图
14.2
系统构架设计
OMServer平台安全审计的功能同样基于B/S结构，服务端的数据来源于业务集群Agent
实时上报，使用MySQL数据库作为数据存储，客户端采用prototypejs前端架构实现数据同
步展示，系统架构图见图14-2。
办公设备
办公设备
OIServer
止务服务器集郡（Fyt
图14-2系统架构图
从图14-2中可以看出系统的整体架构，首先管理员在业务服务器集群部署Python数据
---
## Page 268
第14章打造Linux系统安全审计功能247
上报脚本，通过OMServer提供的cgi接口实现数据接收、人库，最后通过访问前端页面来
查看、跟踪服务器上报的审计信息，整个流程结束。
14.3
数据库结构设计
14.3.1
数据库分析
安全审计服务器端功能是在OMServer平台上进行扩展，追加一张server_history表，用
于操作事件信息的存储，且与server_list的IP字段配置外键关联。表信息说明如下。
server_history：操作事件表。
server_list：服务器列表。
14.3.2
数据字典
server_list服务器列表。
字段名
数据类型
默认值
光许非空
自动退增
备注
server_name
char(13)
NO
主机名称
server_wip
char(15)
NO
主机外网IP
server_ip
char(12)
NO
主机内网IP
server_op
char(10)
NO
主机操作系统
server_app_id
int(11)
NO
服务应用分类ID
server_history操作事件表。
字段名
数据类型
默认值
允许非空
自动速增
备注
ID
int(11)
NO
是
主键ID
history_id
int(11)
NO
事件ID
Nistory_jip
char(15)
NO
事件IP地址
bistory_user
char(15)
ON
事件用户名
history_datetime
datetime
NO
事件时间
b_datetime
timestamp
CURRENT_TIMESTAMP
NO
人库时间
his
char(255)
NO
事件命令
数据库模型功能沿用了OMServer系统中主机表（server_list）的层次结构，且追加了
操作事件表（server_history）。其中，将表 server_history 的 history_ip字段设置成外键，与
server_ist表中的 server_lip字段进行关联，详细见图14-3的数据库模型。
---
## Page 269
248第三部分案例篇
enerhst
eerfnate
B (1)
T B NT(L0
01]24 gAeps
*leny_p OvR(I1)
Dss
+sever_oRs,fNT.0
图14-3平台数据库模型
14.4
系统环境部署
14.4.1
系统环境说明
系统安全审计功能的服务器端作为OMServer项目的App存在，关于服务器端Web
Server的环境搭建本节将不再说明。为了便于读者理解，下面对上报主机系统环境配置、
Agent与服务器端Python实现方法进行详细说明，环境设备角色如表14-1所示。
表14-1系统环境说明表
角色
主机名
IP
环境说明
WEBServer
SN2012-07-010
192.168.1.10
DjangouwsgiMySQL环境
AppServer
SN2012-07-021
192.168.1.21
Python 2.4 成以上:
AppServer
SN2012-07-022
192.168.1.22
Python 2.4 或以L上
14.4.2上报主机配置
系统安全审计功能主机上报需要完成两个任务，一为配置用户profile，二为编写上报
Python脚本，下面一一进行说明。
（1）系统用户环境配置
通过配置Linuxprofile的history相关变量来实现与安全审计功能的对接，包括指定系统
账号history存放路径、存储长度、扩展信息、PROMPT_COMMAND事件等，更多见以下配
---
## Page 270
第14章打造Linux系统安全审计功能249
置及含义说明。
 vi /etc/profile
add by OMAudit
连加以下配置
export SISTFIL&-s8oME/.bash_history
指定用户bistory 日为存放路径
export HISTSI28-1200定h1story 余令输出的记承数
export HISTFIL&SIzE-1200指定历史记录文件，bash_history的最大存储行数
export HISTCONrROL=1gnoredups
不记录连续重复的命令
export HISTTIMEFORMAT=whoan1°#F $*history 命令星示务前记录的用户与时网，例如：
,- 991g 91:20:02 50-90102 1003_ 
PROMPT_COHAND变量最为核心，实现了指定内容在出现bash 提示特菌执行的功能：
“history -a”目首新增的history 命令写入histiles 中：“history-c”到除记录的所有命
“history=r”histfiles 时内客读到内存中，即可以通过history查看；
令（仅内存)
命令，且作为参数传遗给 OoAuditmain.py 脚水，做后续的命令数据信患上报
cxport PROMPT_COeAND=*history
OMAudit_agent -py s (history 1) *
shopt -s histappend
历史清单得以添加形式加入HISTFILE变量指定的文件，而不是覆盖
typeset -r PROMPT_COMAND
设置关键变量只读，提高安全性
typeset -r HISTTIMEPORMAT
保存配置后使其生效，运行“source/etc/profile”命令，profile环境配置完成。
（2）客户端上报脚本
提交到OMServer主机，其中config.Py为上报agent的配置文件，涉及三个选项，详细说
明如下：
[ /home/test/OMAudit/config.py ]
 -*- coding: utf-8 -*-
#1/usx/bin/env python
Net_driver=“ethO”为便于记录上报来源主机，获取指定网卡驱动的IP池址
OMServer_address = *onserver, domain,com*
OMServer服务幕端地址，作分上报的目的
Connect_TimeOut=3指定上授超时时间，单位为秒
OMAudit_agent.py 作为主上报agent程序，负责信息的上报，采用了httplib 模块作为
HTTP客户端，详细源码及说明如下：
[ /home/test/OMAudit/OMAudit_agent.py ]
1/usr/bin/env python