                  if (av != &main_arena)
                    victim->size |= NON_MAIN_ARENA;
                  check_malloced_chunk (av, victim, nb);
                  void *p = chunk2mem (victim);
                  alloc_perturb (p, bytes);
                  return p;
                }
如果申请的大小和该 `unsorted bin` 的大小刚好相等，就直接返回， 否则就把它放到相应的 `bin` 里面去。
    if (in_smallbin_range (size))
                {
                  victim_index = smallbin_index (size);
                  bck = bin_at (av, victim_index);
                  fwd = bck->fd;
                }
              else
                {
                  victim_index = largebin_index (size);
                  bck = bin_at (av, victim_index);
                  fwd = bck->fd;
                  .......
                  .......
如果 `size` 在 `smallbin` 里就放到 `smallbin` ，否则就放到 `large bin`
### 搜索 Largebin
接下来就会去搜索 `largebin` 了
    if (!in_smallbin_range (nb))
            {
              bin = bin_at (av, idx);
              /* skip scan if empty or largest chunk is too small */
              if ((victim = first (bin)) != bin &&
                  (unsigned long) (victim->size) >= (unsigned long) (nb))
                {
                  victim = victim->bk_nextsize;
                  while (((unsigned long) (size = chunksize (victim)) bk_nextsize;
                  /* Avoid removing the first entry for a size so that the skip
                     list does not have to be rerouted.  */
                  if (victim != last (bin) && victim->size == victim->fd->size)
                    victim = victim->fd;
                  remainder_size = size - nb;
                  unlink (av, victim, bck, fwd);
                  /* Exhaust */
                  if (remainder_size size |= NON_MAIN_ARENA;
                    }
                  /* Split */
                  else
                    {
                      remainder = chunk_at_offset (victim, nb);
                      /* We cannot assume the unsorted list is empty and therefore
                         have to perform a complete insert here.  */
                      bck = unsorted_chunks (av);
                      fwd = bck->fd;
          if (__glibc_unlikely (fwd->bk != bck))
                        {
                          errstr = "malloc(): corrupted unsorted chunks";
                          goto errout;
                        }
                      remainder->bk = bck;
                      remainder->fd = fwd;
                      bck->fd = remainder;
                      fwd->bk = remainder;
                      if (!in_smallbin_range (remainder_size))
                        {
                          remainder->fd_nextsize = NULL;
                          remainder->bk_nextsize = NULL;
                        }
                      set_head (victim, nb | PREV_INUSE |
                                (av != &main_arena ? NON_MAIN_ARENA : 0));
                      set_head (remainder, remainder_size | PREV_INUSE);
                      set_foot (remainder, remainder_size);
                    }
                  check_malloced_chunk (av, victim, nb);
                  void *p = chunk2mem (victim);
                  alloc_perturb (p, bytes);
                  return p;
                }
            }
### 使用 Top chunk
    victim = av->top;
          size = chunksize (victim);
          // 如果 top chunk 大小足够大就从 top chunk 里面分配
          if ((unsigned long) (size) >= (unsigned long) (nb + MINSIZE))
            {
              remainder_size = size - nb;
              remainder = chunk_at_offset (victim, nb);
              av->top = remainder;
              set_head (victim, nb | PREV_INUSE |
                        (av != &main_arena ? NON_MAIN_ARENA : 0));
              set_head (remainder, remainder_size | PREV_INUSE);
              check_malloced_chunk (av, victim, nb);
              void *p = chunk2mem (victim);
              alloc_perturb (p, bytes);
              return p;
            }
          /* When we are using atomic ops to free fast chunks we can get
             here for all block sizes.  */
          else if (have_fastchunks (av))
            {
              malloc_consolidate (av);
              /* restore original bin index */
              if (in_smallbin_range (nb))
                idx = smallbin_index (nb);
              else
                idx = largebin_index (nb);
            }
          /*
             Otherwise, relay to handle system-dependent cases
           */
          else
            {
              void *p = sysmalloc (nb, av);
              if (p != NULL)
                alloc_perturb (p, bytes);
              return p;
            }
        }
如果 `top chunk` 的大小足够就直接切割分配，否则如果此时还有 `fastbin` 就触发 `malloc_consolidate`
重复上述流程，如果没有 `fastbin` 调用 `sysmalloc` 分配内存
## Free 源码分析
### _GI___libc_free
首先是 `_GI___libc_free`
    void __fastcall _GI___libc_free(void *ptr)
    {
      if ( _free_hook )
      {
        _free_hook(ptr, retaddr);
      }
      else if ( ptr )
      {
        v1 = (unsigned __int64)ptr - 16;
        v2 = *((_QWORD *)ptr - 1);
        if ( v2 & 2 )                               // 判断size位，判断是不是 mmap 获得的 chunk
        {
          if ( !mp_.no_dyn_threshold
            && v2 > mp_.mmap_threshold
            && v2 = (unsigned __int64)dumped_main_arena_end) )
          {
            mp_.mmap_threshold = v2 & 0xFFFFFFFFFFFFFFF8LL;
            mp_.trim_threshold = 2 * (v2 & 0xFFFFFFFFFFFFFFF8LL);
          }
          munmap_chunk((mchunkptr)((char *)ptr - 16));
        }
        else
        {
          av = &main_arena;
          if ( v2 & 4 )
            av = *(malloc_state **)(v1 & 0xFFFFFFFFFC000000LL);
          int_free(av, (mchunkptr)v1, 0);
        }
      }
    }
如果存在 `free_hook` ， 就会直接调用 `free_hook(ptr)` 然后返回。否则判断被 `free` 的 内存是否是 `mmap`
获取的 ，如果是则使用 `munmap_chunk` 回收内存，否则进入 `_int_free`
### _int_free
首先会做一些简单的检查
    size = chunksize (p);
      //检查指针是否正常，对齐
      if (__builtin_expect ((uintptr_t) p > (uintptr_t) -size, 0)
          || __builtin_expect (misaligned_chunk (p), 0))
        {
          errstr = "free(): invalid pointer";
        errout:
          if (!have_lock && locked)
            (void) mutex_unlock (&av->mutex);
          malloc_printerr (check_action, errstr, chunk2mem (p), av);
          return;
        }
    // 检查 size 是否 >= MINSIZE ，且是否对齐
      if (__glibc_unlikely (size mutex);
              locked = 1;
              chunk_at_offset (p, size)->size size = av->system_mem; // 
              }))
          {
            errstr = "free(): invalid next size (fast)";
            goto errout;
          }
        set_fastchunks(av);
        unsigned int idx = fastbin_index(size);
        fb = &fastbin (av, idx);
        mchunkptr old = *fb, old2;