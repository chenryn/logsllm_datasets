title:DEMO: Integrating MPC in Big Data Workflows
author:Nikolaj Volgushev and
Malte Schwarzkopf and
Andrei Lapets and
Mayank Varia and
Azer Bestavros
DEMO: Integrating MPC in Big Data Workﬂows
Nikolaj Volgushev
Boston University
PI:EMAIL
Malte Schwarzkopf
MIT CSAIL
PI:EMAIL
Andrei Lapets
Boston University
PI:EMAIL
Mayank Varia
Boston University
PI:EMAIL
Azer Bestavros
Boston University
PI:EMAIL
ABSTRACT
Secure multi-party computation (MPC) allows multiple parties to
perform a joint computation without disclosing their private in-
puts. Many real-world joint computation use cases, however, in-
volve data analyses on very large data sets, and are implemented by
software engineers who lack MPC knowledge. Moreover, the col-
laborating parties – e.g., several companies – often deploy different
data analytics stacks internally. These restrictions hamper the real-
world usability of MPC. To address these challenges, we combine
existing MPC frameworks with data-parallel analytics frameworks
by extending the Musketeer big data workﬂow manager [4]. Mus-
keteer automatically generates code for both the sensitive parts of a
workﬂow, which are executed in MPC, and the remaining portions
of the computation, which run on scalable, widely-deployed analyt-
ics systems. In a prototype use case, we compute the Herﬁndahl-
Hirschman Index (HHI), an index of market concentration used
in antitrust regulation, on an aggregate 156 GB of taxi trip data
over ﬁve transportation companies. Our implementation computes
the HHI in about 20 minutes using a combination of Hadoop and
VIFF [1], while even “mixed mode” MPC with VIFF alone would
have taken many hours. Finally, we discuss future research ques-
tions that we seek to address using our approach.
1.
INTRODUCTION
Big data analytics are a key part of modern business processes.
Companies and regulatory agencies can draw vital insights from
running such analytics, especially when they are executed across
data sets from multiple sources. However, the justiﬁed privacy con-
cerns related to proprietary data sets are a major hurdle to running
such computations across multiple competing organizations, even
if knowing the result serves a common interest.
Secure multi-party computation (MPC) is a cryptographic tech-
nique that allows independent parties to jointly compute a shared
result without revealing their private inputs to the computation.
MPC has been an active area of cryptography research since the
1980s [15], and recent advances focus on applied aspects of MPC;
MPC frameworks such as VIFF [1], Sharemind [3], and Wyste-
ria [10] allow end-users to run arbitrary programs in MPC, as long
Permission to make digital or hard copies of part or all of this work for personal or
classroom use is granted without fee provided that copies are not made or distributed
for proﬁt or commercial advantage and that copies bear this notice and the full citation
on the ﬁrst page. Copyrights for third-party components of this work must be honored.
For all other uses, contact the owner/author(s).
CCS’16 October 24-28, 2016, Vienna, Austria
c(cid:13) 2016 Copyright held by the owner/author(s).
ACM ISBN 978-1-4503-4139-4/16/10.
DOI: http://dx.doi.org/10.1145/2976749.2989034
as they are completely re-implemented in the chosen framework’s
front-end language.
However, many real-world use-cases only necessitate MPC for
a few crucial operations as part of a larger workﬂow. While some
MPC frameworks support a “mixed-mode” operation that combines
local computation with secure, distributed MPC steps [10],1 real-
world use of MPC currently still faces three key challenges:
1. MPC integrates poorly with existing analytics workﬂows and
widely-used data processing systems;
2. Signiﬁcant expert knowledge is required to implement and
run analytics in an MPC framework; and
3. MPC frameworks scale poorly to large data sets, since they
do not support efﬁcient data-parallel processing outside MPC.
In this work, we address these three challenges. By doing so, we
demonstrate that use of MPC can be made viable for societally im-
portant use cases that involve large data sets, such as bank stress
tests and early detection of market oligopolies (§2).
To make MPC more accessible to non-experts and industry data
analysts, we have added support for secure multi-party computa-
tion to the Musketeer big data workﬂow manager [4]. Muske-
teer automatically generates code for a variety of data processing
frameworks (such as Hadoop, Spark, and Naiad) from a high-level
workﬂow description (e.g., a SQL language). With our extensions,
Musketeer generates MPC code automatically from programs spec-
iﬁed in a relational language inspired by LINQ [8], requiring no ex-
pert knowledge. It also automatically embeds the MPC into larger
workﬂows that involve private processing steps on multiple orga-
nizations’ heterogeneous data analytics clusters. Even if organiza-
tions use different data processing stacks, we automatically gener-
ate both the preprocessing code and the “glue code” for embedding
MPC in the workﬂow. Speciﬁcally, our contributions are:
1. Proof-of-concept integration of MPC into typical “big data”
workﬂows speciﬁed in a high-level relational language (§3).
2. The extension of the Musketeer workﬂow manager with au-
tomatic code generation for secure MPC steps (§4).
3. Implementation of an example use case that highlights the
advantages of our approach: a market share computation in
which private sales records are preprocessed to compute the
Herﬁndahl-Hirschman index in “mixed-mode” MPC (§5).
1 The “mixed-mode” term is overloaded: sometimes, it is used
to mean a combination of different types of MPC (e.g., arithmetic
MPC based on secret sharing [12] and boolean MPC based on gar-
bled circuits [15]). Our system can also support the latter (§7).
Our evaluation compares the runtime of our market share compu-
tation to two extremes: ﬁrst, not using MPC and allowing a trusted
third party (e.g., a regulator) to run the computation; and second,
running the entire computation in an MPC framework. We ﬁnd
that our integrated workﬂow executes almost as fast as the inse-
cure baseline while requiring no trusted third party, and that it runs
substantially faster than when using an MPC framework only.
2. EXAMPLE USE CASES
Having MPC as part of a data analytics workﬂow enables numer-
ous use cases. Many examples involve computations across busi-
ness competitors, either because the aggregate result is of interest
to all of them, or because a regulating authority has an interest in
monitoring the market. We discuss two concrete examples below.
Bank stress tests. In the wake of the global ﬁnancial crisis of
2008-09, ﬁnancial regulators have devised metrics to measure sys-
temic market risk. Currently, such stress tests are laboriously exe-
cuted, with each bank manually aggregating data for submission to
the regulator and covering only a part of its assets and investments.
Instead, banks could use MPC to jointly run continuous stress
tests on their respective books in their entirety by integrating MPC
into their existing data analytics stacks. Abbe et al. [2] suggested
the use of MPC for this problem, while Narayan et al. [9] model
the computation as a graph propagation problem with added differ-
ential privacy.
Market concentration. Antitrust and competition law require
regulating agencies to monitor the concentration of revenue across
the participants in many markets. This can be notoriously difﬁ-
cult when private companies – who are under no obligation to pub-
lish their revenues – are involved. For example, the Herﬁndahl-
Hirschman index [5], a standard measure of market concentration,
requires the (private) market shares of each participant as inputs.2
MPC allows this computation to be performed without market par-
ticipants having to disclose their revenue composition.
3. USABILITY GOALS
In earlier work, we integrated MPC with a MapReduce plat-
form [13]. By building atop a workﬂow manager like Muske-
teer [4], this work generalizes our approach beyond a speciﬁc sys-
tem (e.g., MapReduce), and achieves several usability beneﬁts.
1. Code generation is automated: the participating parties need
no in-house MPC implementation or deployment expertise,
since Musketeer generates all necessary code automatically.
2. Portability across data analytics stacks: different companies
can map a high-level joint computation to their individual
existing data analytics stacks (e.g., Hadoop, Spark, Naiad)
via Musketeer, and have these systems automatically feed
data into the MPC.
3. Automatic framework choice: since Musketeer’s scheduler
already supports automated choice of good backends for a
computation, we can extend its performance model to pick-
and-choose between different MPC paradigms and combine
them depending on the operators used.
The key premise of Musketeer is to decouple the speciﬁcation of
data-parallel workﬂows in a high-level frontend language from their
execution in a parallel backend execution engine. Musketeer takes
the user’s workﬂow and translates it into a common intermedi-