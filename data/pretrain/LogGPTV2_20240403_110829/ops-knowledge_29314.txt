User: 请解答这个和日志有关的问题Is this RSA/AES combination good? The team of developers I am part of is trying to develop a safe way to exchange sensitive data between a server and mobile devices.

We have come up with the following algorithm:


Device generates private RSA key, and sends the public key to server.
Server generates unique to user AES key and uses the RSA public key to encrypt it and send it back to device.
Device gets the AES key. Uses it to encrypt password and username and sends it to the server.
Server decrypts the username and password. If there is a match, the AES key is used for secure communication for X amount of time or until log-out. Else, the process must be restarted.


Is it safe enough? Are there ways it can be improved? What are the faults? 

Edit: After reading the comments, what is a safer alternative and why?

Edit2: Ok, i get it. I won't use my own implementation, will find something already tried and proven.

Assistant: All of the weaknesses in your protocol can be summed up as "use SSL" or even "use SSL, dammit !".

In more details:


All the protocol is of course vulnerable to impersonation, specifically the double impersonation that is also known as Man-in-the-Middle attack.
Similarly, if any of potential attackers that can eavesdrop on the line decides to do a modification of the data in transit, then he can, and your client and server will be none the wiser.
Experience shows that saying "encrypt all the data with that key" and then doing it correctly is awfully complex. SSL itself took almost 15 years to do that, and many implementations are still not up to it. Padding oracles, predictable IV, MAC verification timing, verified closure, protection against resequencing and replay of packets...


As an overall assessment: don't do that.