attempt to parse the rest of the file.  Compare with \*(L"require\*(R", which can
do a similar check at run time.
.Sp
Specifying \s-1VERSION\s0 as a literal of the form v5.6.1 should generally be
avoided, because it leads to misleading error messages under earlier
versions of Perl which do not support this syntax.  The equivalent numeric
version should be used instead.
.Sp
.Vb 3
\&    use v5.6.1;         # compile time version check
\&    use 5.6.1;          # ditto
\&    use 5.006_001;      # ditto; preferred for backwards compatibility
.Ve
.Sp
This is often useful if you need to check the current Perl version before
\&\f(CW\*(C`use\*(C'\fRing library modules that have changed in incompatible ways from
older versions of Perl.  (We try not to do this more than we have to.)
.Sp
The \f(CW\*(C`BEGIN\*(C'\fR forces the \f(CW\*(C`require\*(C'\fR and \f(CW\*(C`import\*(C'\fR to happen at compile time.  The
\&\f(CW\*(C`require\*(C'\fR makes sure the module is loaded into memory if it hasn't been
yet.  The \f(CW\*(C`import\*(C'\fR is not a builtin\*(--it's just an ordinary static method
call into the \f(CW\*(C`Module\*(C'\fR package to tell the module to import the list of
features back into the current package.  The module can implement its
\&\f(CW\*(C`import\*(C'\fR method any way it likes, though most modules just choose to
derive their \f(CW\*(C`import\*(C'\fR method via inheritance from the \f(CW\*(C`Exporter\*(C'\fR class that
is defined in the \f(CW\*(C`Exporter\*(C'\fR module.  See Exporter.  If no \f(CW\*(C`import\*(C'\fR
method can be found then the call is skipped.
.Sp
If you do not want to call the package's \f(CW\*(C`import\*(C'\fR method (for instance,
to stop your namespace from being altered), explicitly supply the empty list:
.Sp
.Vb 1
\&    use Module ();
.Ve
.Sp
That is exactly equivalent to
.Sp
.Vb 1
\&    BEGIN { require Module }
.Ve
.Sp
If the \s-1VERSION\s0 argument is present between Module and \s-1LIST\s0, then the
\&\f(CW\*(C`use\*(C'\fR will call the \s-1VERSION\s0 method in class Module with the given
version as an argument.  The default \s-1VERSION\s0 method, inherited from
the \s-1UNIVERSAL\s0 class, croaks if the given version is larger than the
value of the variable \f(CW$Module::VERSION\fR.
.Sp
Again, there is a distinction between omitting \s-1LIST\s0 (\f(CW\*(C`import\*(C'\fR called
with no arguments) and an explicit empty \s-1LIST\s0 \f(CW\*(C`()\*(C'\fR (\f(CW\*(C`import\*(C'\fR not
called).  Note that there is no comma after \s-1VERSION\s0!
.Sp
Because this is a wide-open interface, pragmas (compiler directives)
are also implemented this way.  Currently implemented pragmas are:
.Sp
.Vb 8
\&    use constant;
\&    use diagnostics;
\&    use integer;
\&    use sigtrap  qw(SEGV BUS);
\&    use strict   qw(subs vars refs);
\&    use subs     qw(afunc blurfl);
\&    use warnings qw(all);
\&    use sort     qw(stable _quicksort _mergesort);
.Ve
.Sp
Some of these pseudo-modules import semantics into the current
block scope (like \f(CW\*(C`strict\*(C'\fR or \f(CW\*(C`integer\*(C'\fR, unlike ordinary modules,
which import symbols into the current package (which are effective
through the end of the file).
.Sp
There's a corresponding \f(CW\*(C`no\*(C'\fR command that unimports meanings imported
by \f(CW\*(C`use\*(C'\fR, i.e., it calls \f(CW\*(C`unimport Module LIST\*(C'\fR instead of \f(CW\*(C`import\*(C'\fR.
.Sp
.Vb 3
\&    no integer;
\&    no strict 'refs';
\&    no warnings;
.Ve
.Sp
See perlmodlib for a list of standard modules and pragmas.  See perlrun
for the \f(CW\*(C`\-M\*(C'\fR and \f(CW\*(C`\-m\*(C'\fR command-line options to perl that give \f(CW\*(C`use\*(C'\fR
functionality from the command\-line.
.IP "utime \s-1LIST\s0" 8
.IX Item "utime LIST"
Changes the access and modification times on each file of a list of
files.  The first two elements of the list must be the \s-1NUMERICAL\s0 access
and modification times, in that order.  Returns the number of files
successfully changed.  The inode change time of each file is set
to the current time.  For example, this code has the same effect as the
Unix \fItouch\fR\|(1) command when the files \fIalready exist\fR.
.Sp
.Vb 3
\&    #!/usr/bin/perl
\&    $now = time;
\&    utime $now, $now, @ARGV;
.Ve
.Sp
\&\fBNote:\fR  Under \s-1NFS\s0, \fItouch\fR\|(1) uses the time of the \s-1NFS\s0 server, not
the time of the local machine.  If there is a time synchronization
problem, the \s-1NFS\s0 server and local machine will have different times.
.Sp
Since perl 5.7.2, if the first two elements of the list are \f(CW\*(C`undef\*(C'\fR, then
the \fIutime\fR\|(2) function in the C library will be called with a null second
argument. On most systems, this will set the file's access and
modification times to the current time (i.e. equivalent to the example
above.)
.Sp
.Vb 1
\&    utime undef, undef, @ARGV;
.Ve
.IP "values \s-1HASH\s0" 8
.IX Item "values HASH"
Returns a list consisting of all the values of the named hash.
(In a scalar context, returns the number of values.)
.Sp
The values are returned in an apparently random order.  The actual
random order is subject to change in future versions of perl, but it
is guaranteed to be the same order as either the \f(CW\*(C`keys\*(C'\fR or \f(CW\*(C`each\*(C'\fR
function would produce on the same (unmodified) hash.  Since Perl
5.8.1 the ordering is different even between different runs of Perl
for security reasons (see \*(L"Algorithmic Complexity Attacks\*(R" in perlsec).
.Sp
As a side effect, calling \fIvalues()\fR resets the \s-1HASH\s0's internal iterator,
see \*(L"each\*(R".
.Sp
Note that the values are not copied, which means modifying them will
modify the contents of the hash:
.Sp
.Vb 2
\&    for (values %hash)      { s/foo/bar/g }   # modifies %hash values
\&    for (@hash{keys %hash}) { s/foo/bar/g }   # same
.Ve
.Sp
See also \f(CW\*(C`keys\*(C'\fR, \f(CW\*(C`each\*(C'\fR, and \f(CW\*(C`sort\*(C'\fR.
.IP "vec \s-1EXPR\s0,OFFSET,BITS" 8
.IX Item "vec EXPR,OFFSET,BITS"
Treats the string in \s-1EXPR\s0 as a bit vector made up of elements of
width \s-1BITS\s0, and returns the value of the element specified by \s-1OFFSET\s0
as an unsigned integer.  \s-1BITS\s0 therefore specifies the number of bits
that are reserved for each element in the bit vector.  This must
be a power of two from 1 to 32 (or 64, if your platform supports
that).
.Sp
If \s-1BITS\s0 is 8, \*(L"elements\*(R" coincide with bytes of the input string.
.Sp
If \s-1BITS\s0 is 16 or more, bytes of the input string are grouped into chunks
of size \s-1BITS/8\s0, and each group is converted to a number as with
\&\fIpack()\fR/\fIunpack()\fR with big-endian formats \f(CW\*(C`n\*(C'\fR/\f(CW\*(C`N\*(C'\fR (and analogously
for BITS==64).  See \*(L"pack\*(R" for details.
.Sp
If bits is 4 or less, the string is broken into bytes, then the bits
of each byte are broken into 8/BITS groups.  Bits of a byte are
numbered in a little-endian-ish way, as in \f(CW0x01\fR, \f(CW0x02\fR,
\&\f(CW0x04\fR, \f(CW0x08\fR, \f(CW0x10\fR, \f(CW0x20\fR, \f(CW0x40\fR, \f(CW0x80\fR.  For example,
breaking the single input byte \f(CW\*(C`chr(0x36)\*(C'\fR into two groups gives a list
\&\f(CW\*(C`(0x6, 0x3)\*(C'\fR; breaking it into 4 groups gives \f(CW\*(C`(0x2, 0x1, 0x3, 0x0)\*(C'\fR.
.Sp
\&\f(CW\*(C`vec\*(C'\fR may also be assigned to, in which case parentheses are needed
to give the expression the correct precedence as in
.Sp
.Vb 1
\&    vec($image, $max_x * $x + $y, 8) = 3;
.Ve
.Sp
If the selected element is outside the string, the value 0 is returned.
If an element off the end of the string is written to, Perl will first
extend the string with sufficiently many zero bytes.   It is an error
to try to write off the beginning of the string (i.e. negative \s-1OFFSET\s0).
.Sp
The string should not contain any character with the value > 255 (which
can only happen if you're using \s-1UTF\-8\s0 encoding).  If it does, it will be
treated as something which is not \s-1UTF\-8\s0 encoded.  When the \f(CW\*(C`vec\*(C'\fR was
assigned to, other parts of your program will also no longer consider the
string to be \s-1UTF\-8\s0 encoded.  In other words, if you do have such characters
in your string, \fIvec()\fR will operate on the actual byte string, and not the
conceptual character string.
.Sp
Strings created with \f(CW\*(C`vec\*(C'\fR can also be manipulated with the logical
operators \f(CW\*(C`|\*(C'\fR, \f(CW\*(C`&\*(C'\fR, \f(CW\*(C`^\*(C'\fR, and \f(CW\*(C`~\*(C'\fR.  These operators will assume a bit
vector operation is desired when both operands are strings.
See \*(L"Bitwise String Operators\*(R" in perlop.
.Sp
The following code will build up an \s-1ASCII\s0 string saying \f(CW'PerlPerlPerl'\fR.
The comments show the string after each step.  Note that this code works
in the same way on big-endian or little-endian machines.
.Sp
.Vb 2
\&    my $foo = '';
\&    vec($foo,  0, 32) = 0x5065726C;     # 'Perl'
.Ve
.Sp
.Vb 2
\&    # $foo eq "Perl" eq "\ex50\ex65\ex72\ex6C", 32 bits
\&    print vec($foo, 0, 8);              # prints 80 == 0x50 == ord('P')
.Ve
.Sp
.Vb 11
\&    vec($foo,  2, 16) = 0x5065;         # 'PerlPe'
\&    vec($foo,  3, 16) = 0x726C;         # 'PerlPerl'
\&    vec($foo,  8,  8) = 0x50;           # 'PerlPerlP'
\&    vec($foo,  9,  8) = 0x65;           # 'PerlPerlPe'
\&    vec($foo, 20,  4) = 2;              # 'PerlPerlPe'   . "\ex02"
\&    vec($foo, 21,  4) = 7;              # 'PerlPerlPer'
\&                                        # 'r' is "\ex72"
\&    vec($foo, 45,  2) = 3;              # 'PerlPerlPer'  . "\ex0c"
\&    vec($foo, 93,  1) = 1;              # 'PerlPerlPer'  . "\ex2c"
\&    vec($foo, 94,  1) = 1;              # 'PerlPerlPerl'
\&                                        # 'l' is "\ex6c"
.Ve
.Sp
To transform a bit vector into a string or list of 0's and 1's, use these:
.Sp
.Vb 2
\&    $bits = unpack("b*", $vector);
\&    @bits = split(//, unpack("b*", $vector));
.Ve
.Sp
If you know the exact length in bits, it can be used in place of the \f(CW\*(C`*\*(C'\fR.
.Sp
Here is an example to illustrate how the bits actually fall in place:
.Sp
.Vb 1
\&    #!/usr/bin/perl -wl
.Ve
.Sp
.Vb 5
\&    print >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
\&    $off, $width, $bits, $val, $res
\&    .
\&    __END__
.Ve
.Sp
Regardless of the machine architecture on which it is run, the above
example should print the following table:
.Sp
.Vb 131
\&                                      0         1         2         3
\&                       unpack("V",$_) 01234567890123456789012345678901
\&    ------------------------------------------------------------------
\&    vec($_, 0, 1) = 1   ==          1 10000000000000000000000000000000
\&    vec($_, 1, 1) = 1   ==          2 01000000000000000000000000000000