name            | log_recovery_conflict_waits
setting         | off
unit            | 
category        | Reporting and Logging / What to Log
short_desc      | Logs standby recovery conflict waits.
extra_desc      | 
context         | sighup
vartype         | bool
source          | default
min_val         | 
max_val         | 
enumvals        | 
boot_val        | off
reset_val       | off
sourcefile      | 
sourceline      | 
pending_restart | f
```
增加 track_wal_io_timing GUC参数, 支持wal日志buffer write, fsync IO等待时长统计 , 在pg_stat_wal视图中查看     
- 场景: DBA效能  
- 价值: 了解wal buffer io, fsync io的等待时长统计. 掌握IO资源使用情况和WAL瓶颈分析  
- DEMO:
```
postgres=# select * from pg_settings where name='track_wal_io_timing';
-[ RECORD 1 ]---+--------------------------------------------------
name            | track_wal_io_timing
setting         | off
unit            | 
category        | Statistics / Query and Index Statistics Collector
short_desc      | Collects timing statistics for WAL I/O activity.
extra_desc      | 
context         | superuser
vartype         | bool
source          | default
min_val         | 
max_val         | 
enumvals        | 
boot_val        | off
reset_val       | off
sourcefile      | 
sourceline      | 
pending_restart | f
```
增加 idle_session_timeout GUC参数, 断开长时间空闲的会话    
- 场景: DBA效能  
- 价值: 减少空闲会话的资源占用  
- DEMO:
```
postgres=# select * from pg_settings where name='idle_session_timeout';
-[ RECORD 1 ]---+-------------------------------------------------------------------------------
name            | idle_session_timeout
setting         | 0
unit            | ms
category        | Client Connection Defaults / Statement Behavior
short_desc      | Sets the maximum allowed idle time between queries, when not in a transaction.
extra_desc      | A value of 0 turns off the timeout.
context         | user
vartype         | integer
source          | default
min_val         | 0
max_val         | 2147483647
enumvals        | 
boot_val        | 0
reset_val       | 0
sourcefile      | 
sourceline      | 
pending_restart | f
```
增加 client_connection_check_interval GUC参数, 协议层支持心跳包, 如果客户端已离线, 可以快速中断这个客户端此前运行中的长SQL - Detect POLLHUP/POLLRDHUP while running queries  
- 场景: 分析师、开发者、DBA效能  
- 价值: 用户如果发现SQL较慢, 直接退出终端, 在执行中的不接受中断信号过程中的SQL要等执行结束才会退出, 现在不需要等执行结束, 检测到客户端推出后SQL即刻推出.   
- DEMO:
```
postgres=# select * from pg_settings where name='client_connection_check_interval';
-[ RECORD 1 ]---+-------------------------------------------------------------------------------
name            | client_connection_check_interval
setting         | 0
unit            | ms
category        | Connections and Authentication / Connection Settings
short_desc      | Sets the time interval between checks for disconnection while running queries.
extra_desc      | 
context         | user
vartype         | integer
source          | default
min_val         | 0
max_val         | 2147483647
enumvals        | 
boot_val        | 0
reset_val       | 0
sourcefile      | 
sourceline      | 
pending_restart | f
```
5、SQL 命令增强:   
REINDEX command 增加 tablespace 选项, 支持重建索引到指定表空间  
- 场景: DBA效能  
- 价值: 更好的利用块设备  
- DEMO:
```
Command:     REINDEX
Description: rebuild indexes
Syntax:
REINDEX [ ( option [, ...] ) ] { INDEX | TABLE | SCHEMA | DATABASE | SYSTEM } [ CONCURRENTLY ] name
where option can be one of:
    CONCURRENTLY [ boolean ]
    TABLESPACE new_tablespace
    VERBOSE [ boolean ]
```
REINDEX command 支持分区表, 自动重建所有子分区的索引.   
- 场景: DBA效能  
- 价值: 提高分区表索引重建的便捷度  
6、插件功能增强:   
新增 pg_surgery 插件, 可用于修复 corrupted tuple   
- 场景: DBA效能  
- 价值: 修复损坏数据  
- DEMO:
```
修复损坏的事务日志
test=> select * from t1 where ctid = '(0, 1)';
ERROR:  could not access status of transaction 4007513275
DETAIL:  Could not open file "pg_xact/0EED": No such file or directory.
test=# select heap_force_kill('t1'::regclass, ARRAY['(0, 1)']::tid[]);
 heap_force_kill 
-----------------
(1 row)
test=# select * from t1 where ctid = '(0, 1)';
(0 rows)
```
```
修复错误(wrapped)的xid
test=> vacuum t1;
ERROR:  found xmin 507 from before relfrozenxid 515
CONTEXT:  while scanning block 0 of relation "public.t1"
test=# select ctid from t1 where xmin = 507;
 ctid  
-------
 (0,3)
(1 row)
test=# select heap_force_freeze('t1'::regclass, ARRAY['(0, 3)']::tid[]);
 heap_force_freeze 
-------------------
(1 row)
test=# select ctid from t1 where xmin = 2;
 ctid
-------
 (0,3)
(1 row)
```
新增 old_snapshot 插件, 打印快照跟踪条目(每分钟一条, OldSnapshotTimeMapping结构)的内容 , old_snapshot_threshold 相关  
- 场景: DBA效能  
- 价值: 了解历史事务快照, 分析快要达到REDO快照超时的事务, 每个时间段当时数据库的未分配事务信息
- DEMO:
```
pg_old_snapshot_time_mapping(array_offset OUT int4, end_timestamp OUT timestamptz, newest_xmin OUT xid) returns setof record
``` 
pg_amcheck插件增加heap table数据页格式错误、逻辑错误检测功能  
- 场景: DBA效能  
- 价值: 检查数据块逻辑错误  
- DEMO:
```
postgres=# create extension amcheck ;
CREATE EXTENSION
$ pg_amcheck -v postgres
pg_amcheck: including database "postgres"
pg_amcheck: in database "postgres": using amcheck version "1.3" in schema "public"
pg_amcheck: checking heap table "postgres"."public"."tbl"
pg_amcheck: checking btree index "postgres"."public"."idx_t_1"
pg_amcheck: checking btree index "postgres"."public"."idx_tbl_2"
... ...
```
### 详见  
1、PostgreSQL 14 makes numerous improvements to VACUUM :   
create index concurrently 不管多久都不会影响垃圾回收了. 以前的版本有个函数getoldestxmin获取实例中最老的未结束事务号, 这个事务号以后产生的垃圾不能被回收, 所以create index如果花了1小时, 这1小时内实例所产生的垃圾要等index创建结束后才能回收.   
- [《PostgreSQL 14 preview - VACUUM: ignore indexing operations with CONCURRENTLY  (getoldestxmin优化, 更多垃圾可以被回收, 防止long create index导致膨胀)》](../202102/20210224_01.md)      
支持 vacuum 强制加速参数 vacuum_failsafe_age , vacuum_multixact_failsafe_age. 加速时将跳过index, 忽略delay配置, 全速前进, 防止 xid wraparound.   
- [《PostgreSQL 14 preview - 支持 vacuum 强制加速参数 vacuum_failsafe_age , vacuum_multixact_failsafe_age.  防止 xid wraparound》](../202104/20210408_03.md)      
当一个表里面有dead tuple的PAGEs占比低于BYPASS_THRESHOLD_PAGES时, 将跳过此次垃圾回收对这个表的index的vacuum. 因为就算访问到了这些dead tuple对应的索引, 回表时也不会额外的访问很多heap page.   
- [《PostgreSQL 14 preview - BYPASS_THRESHOLD_PAGES vacuum 优化, 避免每次都需要vacuum index, 当LP_DEAD覆盖的page较少时, 跳过index vacuum》](../202104/20210408_01.md)      
Autovacuum now analyzes partitioned tables and can propagate information about row counts to parent tables.   
There are also performance gains in ANALYZE that can be controlled with maintenance_io_concurrency parameter.  
- [《PostgreSQL 14 preview - analyze 支持prefetch 加速IO》](../202103/20210317_01.md)      