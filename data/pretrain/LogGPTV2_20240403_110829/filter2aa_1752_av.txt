 1设备 8  9。
内的设备集内将集的
单存内。内的
。
– 243 –
 7 
文件理
读 /dev/random 时的。作的
子或的。
理上能单的能
的的。的理上存的 (周
的), 内能对能
的。 0 时读将对的以能满读
。
/dev/urandom 性; 即内以对
设备的读。对性的程 ( GNU
Privacy Guard 的) 。程
 /dev/urandom  /dev/random。内的 I/O 
时读 /dev/random 段的时间。、
的。
7.6 带外通信
Unix 文件。单的读写操作 Unix 
能的对的能操作。时程的文
件。对设备对设备的读将对件读写
设备将件。进程何读的（
（DTR进程设的校
调 ioctl()。 ioctl 理 I/O 的
以进
#include 
int ioctl (int fd, int request, ...);
调
fd
文件的文件
request 内进程对文件 fd 何操
作。
能或式（或
给内。
– 244 –
 7 
文件理
的程 CDROMEJECT 以 CD-ROM 设备出
。设备程的。程的能 eject
#include 
#include 
#include 
#include 
#include 
#include 
#include 
int main (int argc, char *argv[])
{
int fd, ret;
if (argc \n”, argv[0]);
return 1;
}
/*
* Opens the CD-ROM device, read-only. O_NONBLOCK
* tells the kernel that we want to open the
device
* even if there is no media present in the
drive.
*/
fd = open (argv[1], O_RDONLY | O_NONBLOCK);
if (fd 
int inotify_init (void);
时 inotify init()  -1设 errno
EMFILE
inotify 的实。
ENFILE
文件的。
ENOMEM 内存。
我们对 inotify 进以
int fd;
fd = inotify_init ( );
if (fd == -1) {
perror (”inotify_init”);
exit (EXIT_FAILURE);
}
7.7.2 监视
进程 inotify 设。（watch descrip-
tor示 Unix 相的。
内进程何件（读写或。
– 247 –
 7 
文件理
inotify 以文件。时 inotify 
文件（子的文件的的
件。
7.7.2.1 增加新监视
调 inotify add watch() 文件或 path 上
件 mask 实 fd 
#include 
int inotify_add_watch (int fd, const char *path,
uint32_t mask);
时调新的。时 inotify add watch() 
-1设 errno
EACCESS 读 path 的文件。的进程能读文件。
EBADF
文件 fd 效的 inotify 实。
EFAULT
效的 path 。
EINVAL
 mask 效的件。
ENOMEM 内存。
ENOSPC
inotify 。
7.7.2.2 监视掩码
或 inotify 件的进或 
IN ACCESS
文件读。
IN MODIFY
文件写。
IN ATTRIB
文件（或扩展属性
。
IN CLOSE WRITE
文件以写式。
IN CLOSE NOWRITE 文件以写式。
IN OPEN
文件。
IN MOVED FROM
文件出。
IN MOVED TO
文件。
– 248 –
 7 
文件理
IN CREATE
文件。
IN DELETE
文件。
IN DELETE SELF
对。
IN MOVE SELF
对。
的件单或件
IN ALL EVENTS 的件。
IN CLOSE
   及   的  件（    IN CLOSE WRITE 
IN CLOSE NOWRITE。
IN MOVE
   及   的  件（    IN MOVED FROM 
IN MOVED TO。
我们存的 inotify 实新的
int wd;
wd = inotify_add_watch (fd, ”/etc”, IN_ACCESS |
IN_MODIFY);
if (wd == -1) {
perror (”inotify_add_watch”);
exit (EXIT_FAILURE);
}
子对 /etc 读写。 /etc 文件读或写
inotify 件 inotify 文件 fd fd  wd 提。我们
 inotify 示件。
7.7.3 inotify 事件
我们   inotify event  inotify 件
#include 
struct inotify_event {
int wd; /* watch descriptor */
uint32_t mask; /* mask of events */
uint32_t cookie; /* unique cookie */
uint32_t len; /* size of ’name’ field */
– 249 –
 7 
文件理
char name[]; /* null-terminated name */
};
同 inotify add watch()  wd 示 mask 示
件。 wd 文件件 name 存对的
文件。 len 零。的 len  name 
 name  null 进以的 inotify event 能对
。 inotify event 的时 len
能 strlen()。
 wd  /home/rlove IN ACCESS。读文件 /home-
/rlove/canon 时 name 将 cannon len 将 6。相对我们时以
同 /home/rlove/canon len 将 0 name 将 0（
。
cookie 相的件。我们将。
7.7.3.1 读取 inotify 事件
 inotify 件单读 inotify 实相的文件即
。 inotify 提 slurping 性性以单读读件（
 read() 小。段 name 读 inotify 件的
方。
我们实 inotify 实对实的。我们读
处理的件
char
buf[BUF_LEN]__attribute__((aligned(4)));
ssize_t len, i = 0;
/* read BUF_LEN bytes’ worth of events */
len = read (fd, buf, BUF_LEN);
/* loop over every read event until none remain */
while (i wd, event->mask,
event->cookie, event->len, (event->mask &
IN_ISDIR) ? ”yes” : ”no”);
/* if there is a name, print it */
if (event->len)
printf (”name=%s\n”, event->name);
/* update the index to the start of the next
event */
i += sizeof (struct inotify_event) + event->len;
}
 inotify 文件的操作文件程能 select()
poll() epoll() 。进程单程进文件 I/O 时
 inotify 件。
 inotify 件。件 inotify 能件
IN IGNORED
wd 的。能
或对存时。我们将
件。
IN ISDIR
作对。（设作对文件。
IN Q OVERFLOW inotify 出。内内存内对件
的小。处理的件上
时内件将。读
小以件。
IN UNMOUNT
对的设备。对效内将
 IN IGNORED 件。
能件设们。
程将处理件的。
件
/* Do NOT do this! */
if (event->mask == IN_MODIFY)
printf (”File was written to!\n”);
else if (event->mask == IN_Q_OVERFLOW)
– 251 –
 7 
文件理
printf (”Oops, queue overflowed!\n);
相的进
if (event->mask & IN_ACCESS)
printf (”The file was read from!\n”);
if (event->mask & IN_UNMOUNTED)
printf (”The file’s backing device was
unmounted!\n);
if (event->mask & IN_ISDIR)
printf (”The file is a directory!\n”);
7.7.3.2 关联” 移动” 事件
N MOVED FROM  IN MOVED TO 件自作的
给新。” 能”
文件的程更效（程对的文件
进程将件。
我们 inotify event 的 cookie 段。
段 cookie零将件的。设进程
 /bin  /sbin。 /bin  7 /sbin  8。
文件 /bin/compass  /sbin/compass内将 inotify 件。
件将 wd  7 mask  IN MOVED FROM name  com-
pass。件将 wd  8 mask  IN MOVED TO name  com-
pass。件 cookie 相同 12。
文件内件。件的 wd 的。
的文件或出的进程将
的件。 cookie 的件程
的。
7.7.4 高级监视选项
新的时以 mask 或
– 252 –
 7 
文件理
IN DONT FOLLOW 设 path 的文件或
 inotify add watch() 
。
IN MASK ADD
       对  存    的 文 件 调  ino-
tify add watch()更新新提的 mask。
 mask 设提的件的
。
IN ONESHOT
设内给对上件自
。实上单的。
IN ONLYDIR
     设    提  的 对     时 
   。  path   文 件   调  ino-
tify add watch() 。
 init.d  /etc  /etc/init.d 时
对 /etc/init.d 的
int wd;
/*
* Watch ’/etc/init.d’ to see if it moves, but
only if it is a
* directory and no part of its path is a symbolic
link.
*/
wd = inotify_add_watch (fd, ”/etc/init.d”,
IN_MOVE_SELF | IN_ONLYDIR | IN_DONT_FOLLOW);
if (wd == -1)
perror (”inotify_add_watch”);
7.7.5 删除 inotify 监视
实示能调 inotify rm watch( )  inotify 实
#include 
– 253 –
 7 
文件理
int inotify_rm_watch (int fd, uint32_t wd);
调 inotify rm watch()  inotify 实（文件的 fd 
 wd 的 0。
int ret;
ret = inotify_rm_watch (fd, wd);
if (ret)
perror (”inotify_rm_watch”);
时调 -1设 errno
EBADF
效的 inotify 实 fd。
EINVAL wd 给 inotfy 实上的效。
时内 IN IGNORED 件。内
操作的时件。的文件文件
的。内 IN IGNORED。性以程
 IN IGNORED 件处理对件处理。对 GNOME
s Beagle 理的上的的
的。
7.7.6 获取事件队列大小
处理件小以 inotify 实文件上 ioctl（
 FIONREAD。的以示的的
unsigned int queue_len;
int ret;
ret = ioctl (fd, FIONREAD, &queue_len);
if (ret   FIONREAD。
7.7.7 销毁 inotify 实例
 inotify 实及的实的文件单
int ret;
/* ’fd’ was obtained via inotify_init( ) */
ret = close (fd);
if (fd == -1)
perror (”close”);
然文件内自文件进程出
时。
– 255 –
 8 
内存理
第 8 章
内存管理
对进程内存的。的内内
存理存（allocation内存操（manipulation的
内存 (release)。
allocate (内存的) 
的的。然更的内存。然
的操作的进程的内
存何的。
将进程段内存的方以及方
的。我们将及设操作内存内的方