    {
      char v3[145]; // [esp+50h] [ebp-2C8h]
      char v4; // [esp+E1h] [ebp-237h]
      char v5[28]; // [esp+E4h] [ebp-234h]
      char Source[5]; // [esp+100h] [ebp-218h]
      __int16 i; // [esp+108h] [ebp-210h]
      char Dest[512]; // [esp+10Ch] [ebp-20Ch]
      __int16 offset; // [esp+30Ch] [ebp-Ch]
      LPSTR lpMultiByteStr; // [esp+310h] [ebp-8h]
      int cbMultiByte; // [esp+314h] [ebp-4h]
      cbMultiByte = WideCharToMultiByte(1u, 0, (LPCWSTR)argv[1], -1, 0, 0, 0, 0);
      lpMultiByteStr = (LPSTR)sub_4011F0(cbMultiByte);
      WideCharToMultiByte(1u, 0, (LPCWSTR)argv[1], -1, lpMultiByteStr, cbMultiByte, 0, 0);
      offset = *(_WORD *)lpMultiByteStr; // offset = argv[1]
      if ( offset  DynELF 的原理可以看沐师傅的一篇 [_分析_](http://muhe.live/2016/12/24/what-DynELF-does-> basically/)
[_exploit
here_](https://github.com/bash-c/pwn_repo/blob/master/jarvisOJ_level4/solve.py)
## Test Your Memory (300)
这道题目分数给高了，难度大概只是和 level2 相当，构造 rop chain 直接调用 system(“cat flag”)
即可，唯一需要注意的是程序最后有一个 strncmp，需要保证此时 strncmp 比较的两个两个地址都是可读的
      if ( !strncmp(s, s2, 4u) )
        puts("good job!!\n");
      else
        puts("cff flag is failed!!\n");
    +-----------+
    |padding    |
    |......     |
    |           |
    +-----------+
    |padding    | 
           int mprotect(void *addr, size_t len, int prot);
    DESCRIPTION
           The mprotect() function shall change the access protections to be  that  speci‐
           fied  by prot for those whole pages containing any part of the address space of
           the process starting at address addr and continuing for len bytes. The  parame‐
           ter  prot  determines  whether  read,  write,  execute,  or some combination of
           accesses are permitted to the data being mapped. The prot  argument  should  be
           either  PROT_NONE  or  the  bitwise-inclusive  OR  of one or more of PROT_READ,
           PROT_WRITE, and PROT_EXEC.
    NAME
           mmap — map pages of memory
    SYNOPSIS
           #include 
           void *mmap(void *addr, size_t len, int prot, int flags,
               int fildes, off_t off);
    DESCRIPTION
           The mmap() function shall establish a mapping between an  address  space  of  a
           process and a memory object.
mprotect 函数用于改变某段地址的权限（rwxp），mmap 用于申请一段空间，根据参数不同可以设置这段空间的权限。
这道题目开启了 NX 保护，并假设禁用了 system 和 execve 函数（实际并没有），因此可以考虑通过 mprotect 改变 .bss/.data
权限或者通过 mmap 申请一段具有可执行权限的空间写 shellcode 的方法来 get shell，重点介绍如何使用 mprotect。
  1. 第一次 rop 使用 **write(1, elf.got[‘write’], rdx)** leak 出 libc 基地址
  2. 第二次 rop 使用 **mprotect(0x00600000, 0x1000, 7)** 把 .bss 段设为有可执行权限
  3. 第三次 rop 通过 **read(0, elf.bss() + 0x500, 0x100)** 把 shellcode 读到 .bss 并返回到 shellcode
需要注意的是第一次 rop 时，与 level3 相似，调试可以发现 rdx 是大于 6的，因此可以不用通用 gadget 来设置 rdx；
但第二次使用 mprotect 时必须设置 rdx 寄存器，这时候我们已经 leak 除了 libc 基地址，因此可以 **使用** **libc**
**中的 gadget** **来设置 rdx** ，也不需要用通用 gadget。
并且 **mprotect** **指定的内存区必须包含整个内存页，区间长度必须是页大小的整数倍** 。
也想过使用 mmap 来申请一段内存，但 mmap 需要控制 6 个寄存器，找了半天没有找到太好的 gadget，就没有再继续尝试了，如果有大佬能使用
mmap 来申请空间请务必指教。
[_exploit
here_](https://github.com/bash-c/pwn_repo/blob/master/jarvisOJ_level5/exp_mprotect.py)
## Add (300)
一道 mips 的题目，环境的搭建同样可以参考我之前写过的一篇 [_分析_](http://m4x.fun/post/arm_pwn/)。而IDA 的
hexray 对 mips 没有太好的支持，可以使用 [_jeb-mips_](https://www.pnfsoftware.com/jeb/mips)
或者 [_retdec_](https://github.com/avast-tl/retdec)
来反编译，但实际效果也只是能看，最准确的方法还是直接读汇编。
先看输入的部分，输入遇到 \n 才会停止，因此存在栈溢出
同时程序中有一处打印栈上输入地址的
    loc_400B5C:
    la      $t9, printf
    la      $a0, aYourInputWasP  # "Your input was %p\n"
    jalr    $t9 ; printf
    move    $a1, input
    lw      $gp, 0x98+var_88($sp)
    move    $v1, input
    b       loc_400984
    li      $s2, 0x80
跳转过来的条件是 strcmp(input, s4) 相等
    la      $t9, strcmp
    move    $a0, input       # s1
    jalr    $t9 ; strcmp
    move    $a1, $s4         # s2
    lw      $gp, 0x98+var_88($sp)
    beqz    $v0, loc_400B5C
    move    $a0, input       # s
再向上找 s4 是什么
    la      $t9, srand
    move    $at, $at
    jalr    $t9 ; srand
    li      $a0, 0x123456    # seed
    lw      $gp, 0x98+var_88($sp)  # srand(0x123456)
    addiu   $s4, $sp, 0x98+challenge
    la      $t9, rand
    move    $at, $at
    jalr    $t9 ; rand
    addiu   input, $sp, 0x98+buf
    lw      $gp, 0x98+var_88($sp)
    lui     $a1, 0x40
    la      $t9, sprintf
    la      $a1, aD          # "%d"
    move    $a2, $v0
    jalr    $t9 ; sprintf    # sprintf(s4, "%d", rand())
    move    $a0, $s4         # s
大致流程是
    srand(0x123456);
    int tmp = rand();
    sprintf(s4, "%d", tmp);
随机种子是固定的，也即是随机值固定，因此 s4 的值也就知道了，通过这个功能我们能得到栈上输入的地址，程序没有开 NX 保护，输入
shellcode，并返回到 shellcode 即可。
通过调试可以快速确定覆盖返回地址所需的偏移量。
[_exploit
here_](https://github.com/bash-c/pwn_repo/blob/master/jarvisOJ_add/solve.py)
## [61dctf]calc.exe (300)
这道题没开 NX 保护，很大概率就是使用 shellcode 来 get shell 了。这个题目主要麻烦在代码量太大，还是 strip 后的
binary，看起来很是费力。
但这种代码量大的题目一般漏洞都很明显（代码量又大漏洞又难找，那题还怎么做），仔细分析，程序中存在一个如下的结构体（不是完全正确，程序没有看完）
    struct NODE
    {
    	char *name;
    	char *type;
    	void (*method)();
    	int len;
    }
所有的变量和函数以这种结构体的形式存储，其中有一个很敏感的函数指针，如果能控制函数指针，就能控制 eip 了。
再往下看，程序有一个 var 可以声明变量，命令格式为 var variable = “value”
        if ( !strcmp(s1, "var") )
        {
          argv1 = strtok(0, " ");
          argv2 = strtok(0, " ");
          if ( !argv2 )
            break;
          if ( argv2 && *argv2 == '=' )
          {
            argv3 = strtok(0, " ");
            if ( !argv3 )
            {
              puts("invalid syntax");
              break;
            }
            if ( *argv3 == '"' )
            {
              nptra = argv3 + 1;
              v26 = strchr(nptra, '"');