.IP "信号" 4
.IX Item "Signals"
SIGCHLD、可能还有 SIGPIPE 这两个讯号要抓到。当背景程序执行完成后就会送出 SIGCHLD 讯号。而当你写入一个子程序已经关闭的档案把手时就会收到 SIGPIPE 讯号（一个未抓住的 SIGPIPE 可能导致你的程式无声无息地死去）。用 system("cmd&") 的话不会有这样的问题。
.IP "僵尸进程" 4
.IX Item "Zombies"
你得做准备，在子程序结束时“收成”它：
.Sp
.Vb 1
\&    $SIG{CHLD} = sub { wait };
.Ve
.Sp
.Vb 1
\&    $SIG{CHLD} = 'IGNORE';
.Ve
.Sp
You can also use a double fork. You immediately \fIwait()\fR for your
first child, and the init daemon will \fIwait()\fR for your grandchild once
it exits.
.Sp
.Vb 8
\&        unless ($pid = fork) {
\&                unless (fork) {
\&            exec "what you really wanna do";
\&            die "exec failed!";
\&                }
\&        exit 0;
\&        }
\&    waitpid($pid,0);
.Ve
.Sp
在 Signals 有范例程式教你怎么做。用 system("prog &") 的 话不会有僵 程序的问题。
.Sh "如何截获控制字符/信号？"
.IX Subsection "How do I trap control characters/signals?"
你并不能真的 ``捕捉'' 一个控制字元。而是控制字元产生一个讯号让你捕捉。关于讯号的资料可以在 Signals 以及骆驼书第六章里找到。
.PP
要小心的是，大多 C 程式库无法重新进入 [re-entrant]。因此当你要尝试着在一 个处理器里做 print() 动作，而这个处理器是由另一个stdio 的动作所叫出来的 话，你的内部结构可能会处于失调状态，而程式可能会丢出记忆核心 (dump core)。 有的时候你可以用 syswrite() 取代 print() 以避免这个状况。
.PP
除非你极为小心，否则在一个讯号处理器中，唯一安全可做的是：设定一个变数后离开。而在第一个情况下，你在设定变数的时候应确定 malloc() 不会被叫出来 （譬如，设定一个已经有值的变数）。
.PP
例如：
.PP
.Vb 5
\&    $Interrupted = 0;   # 确定它有个值
\&    $SIG{INT} = sub {
\&        $Interrupted++;
\&        syswrite(STDERR, "ouch\en", 5);
\&    }
.Ve
.PP
然而，因为系统呼叫会自己重新启动，你将会发现如果你用的是“慢的”呼叫，像 、read()、connect() 或 wait()，那么将它们停下的唯一办法是使 用“跳远”的方式跳出来；也就是产生一个例外讯号。参看在 Signals 里对阻挡性 flock() 的逾时处理器的说明，或骆驼书第六 章。
.Sh "在 Unix 系统中如何修改 shadow 文件？"
.IX Subsection "How do I modify the shadow password file on a Unix system?"
如果你的 perl 安装正确的话，在 perlfunc 里描述的 getpw*() 函数应该就能够读取隐式密码档了（只有读取权）。要更动该档案内容，做一个新的密码档（这个档案的格式因系统而异，请看 passwd(5) ）然后用 pwd_mkdb(8)（参考 pwd_mkdb(5)）来安装新的密码档。
.Sh "如何设置时间和日期？"
.IX Subsection "How do I set the time and date?"
假设你有足够的权限，你应该可以用 date(1) 程式来设定系统的时间与日期。 （但没有针对个别程序修改时间日期的方法）这机制在 Unix、MS-DOS、Windows 和 NT 下都能用；VMS 下则要用 set time 。
.PP
然而，如果你只是要更动你的时区，只消设定一个环境变数即可：
.PP
.Vb 3
\&    $ENV{TZ} = "MST7MDT";                  # unixish
\&    $ENV{'SYS$TIMEZONE_DIFFERENTIAL'}="-5" # vms
\&    system "trn comp.lang.perl.misc";
.Ve
.Sh "如何 sleep() 或 alarm() 少于一秒的时间?"
.IX Subsection "How can I sleep() or alarm() for under a second?"
如果你要比 sleep() 所提供的最小单位一秒更精细的话，最简单的方法就是用 select 里面写的 select() 函数。试一试 Time::HiRes 和 BSD::Itimer 模块 (可以从 CPAN 下载，从 Perl 5.8 开始 Time::HiRes 成为标准发行的一部分).
.Sh "如何测度少于一秒的时间？"
.IX Subsection "How can I measure time under a second?"
一般来说，你可能做不到。 Time::HiRes 模组（CPAN 有，从 Perl 5.8 开始成为标准发行的一部分）在某些系统上能达到此 功能。
.PP
总之，你可能做不到。但是如果你的 Perl 支援 syscall() 函数并支援类似 gettimeofday(2) 的系统呼叫，你也许可以这么做：
.PP
.Vb 1
\&    require 'sys/syscall.ph';
.Ve
.PP
.Vb 1
\&    $TIMEVAL_T = "LL";
.Ve
.PP
.Vb 1
\&    $done = $start = pack($TIMEVAL_T, ());
.Ve
.PP
.Vb 2
\&    syscall(&SYS_gettimeofday, $start, 0) != -1
\&               or die "gettimeofday: $!";
.Ve
.PP
.Vb 3
\&       ##########################
\&       # DO YOUR OPERATION HERE #
\&       ##########################
.Ve
.PP
.Vb 2
\&    syscall( &SYS_gettimeofday, $done, 0) != -1
\&           or die "gettimeofday: $!";
.Ve
.PP
.Vb 2
\&    @start = unpack($TIMEVAL_T, $start);
\&    @done  = unpack($TIMEVAL_T, $done);
.Ve
.PP
.Vb 2
\&    # fix microseconds
\&    for ($done[1], $start[1]) { $_ /= 1_000_000 }
.Ve
.PP
.Vb 3
\&    $delta_time = sprintf "%.4f", ($done[0]  + $done[1]  )
\&                                            -
\&                                 ($start[0] + $start[1] );
.Ve
.Sh "如何做 atexit()或 setjmp()/longjmp()的动作？（异常处理）"
.IX Subsection "How can I do an atexit() or setjmp()/longjmp()? (Exception handling)"
第五版的 Perl 增加了 END 区块，可以用来模拟 atexit()的效果。当程式或执行 绪(thread) 终了时就会去呼叫该包装的 END 区块（参考 perlmod 文件）。
.PP
For example, you can use this to make sure your filter program
managed to finish its output without filling up the disk:
.PP
.Vb 3
\&    END {
\&        close(STDOUT) || die "stdout close failed: $!";
\&    }
.Ve
.PP
如果当程式被没有抓到的讯号终结了，END 区块就不会被呼叫到，所以当你用 END 时应再加上
.PP
.Vb 1
\&        use sigtrap qw(die normal-signals);
.Ve
.PP
Perl 的例外处理机制就是它的 eval() 运算子。你可以把 eval() 当做 setjmp 而die()当做 longjmp 来使用。更详细的说明请参考 Signals 和 Camel书第六章里关于讯号的那段，尤其是描述有关 flock() 的逾时处理器那段。
.PP
如果你只对例外处理的部分有兴趣，试试 exceptions.pl 程式库（包含在标准 perl里）。
.PP
如果你要的是 atexit() 语法（以及 rmexit()），试试 CPAN 里的 AtExit 模组。
.ie n .Sh "为何我的 sockets程式在 System V (Solaris)系统下不能用？“不支持的协议”这个错误讯息又是什么意思？"
.el .Sh "为何我的 sockets程式在 System V (Solaris)系统下不能用？“不支持的协议”这个错误讯息又是什么意思？"
.IX Subsection "Why doesn't my sockets program work under System V (Solaris)?  What does the error message Protocol not supported mean?"
有些 Sys-V 根底的系统，特别像 Solaris 2.X，已重新将一些标准的 socket常数 定义过了。由于这些常数在各种架构下都是定值，所以在 perl程式码中常被人写 死在里面。处理此问题的适当方式 是用 ``use Socket'' 来取得正确的值。
.PP
须注意尽管 SunOS 和 Solaris 在二进位执行档上相容，这些值是相异的。自己去 想为什么吧。
.Sh "如何从 Perl里呼叫系统中独特的 C函数？"
.IX Subsection "How can I call my system's unique C functions from Perl?"
通常是写个外部的模组来处理 - 参看“我要如何学到将 C 与 Perl 连结在一起？ [h2xs, xsubpp]” 这问题的答案。然而，如果此函数是个系统呼叫，而你的系统 有支援 syscall()，那么可以用 syscall 函数（说明在 perlfunc 里）。
.PP
切记先查查看你的 perl 版本中所附的模组以及 CPAN 里的模组，因为也许某人已 经写了个这样的模组。
On Windows, try Win32::API.  On Macs, try Mac::Carbon.  If no module
has an interface to the C function, you can inline a bit of C in your
Perl source with Inline::C.
.Sh "在哪里可以找引入档来做 ioctl()或 syscall()？"
.IX Subsection "Where do I get the include files to do ioctl() or syscall()?"
以前这些档案会由标准 perl 发行中所附的 h2ph 工具来产生。这个程式将 C 标 头档案里的 cpp(1)指令转换成内含副程式定义的档案，像 &SYS_getitimer，你可 以把它当做函数的参数。这样做并不怎么完美，但通常可达成任务。简单的像 errno.h 、syscall.h 和socket.h 这些档案都没问题，但像 ioctl.h 这种较难的档案总是需要人工编辑。以下是安装 *.ph 档案的步骤：
.PP
.Vb 3
\&    1.  成为超级用户
\&    2.  cd /usr/include
\&    3.  h2ph *.h */*.h
.Ve
.PP
如果你的系统支援动态载入，那么为了可移植性、而且合理的做法是使用 h2xs（也 是 perl的标准配备）。这个工具将 C 标头档案转换成 Perl 的衍伸档案 (extensions)。 h2xs 的入门要看 perlxstut 。
.PP
如果你的系统不支援动态载入，你可能仍应使用 h2xs。参看 perlxstut 和 MakeMaker （简单来说，就是用 make perl 、而非 make 来重 建一份使用新的静态连结的 perl）。
.Sh "为何 setuid perl程式会抱怨关于系统核心的问题？"
.IX Subsection "Why do setuid perl scripts complain about kernel problems?"
有些作业系统的核心有臭虫使得 setuid 程式在先天上就不安全。Perl提供你一些方法（在 perlsec 里有写）可跳过这些系统的缺陷。
.Sh "如何打开对某程式既输入又输出的管道 (pipe)？"
.IX Subsection "How can I open a pipe both to and from a command?"
IPC::Open2 模组（perl 的标准配件）是个好用的方法，它在内部是藉着pipe()、 fork() 和 exec() 来完成此工作。不过切记要读它文件里关于锁死的警告 ( 参见 IPC::Open2 )。参见 perlipc 中的 \*(L"Bidirectional Communication with Another Process\*(R" 和
\&\*(L"Bidirectional Communication with Yourself\*(R"
.PP
You may also use the IPC::Open3 module (part of the standard perl
distribution), but be warned that it has a different order of
arguments from IPC::Open2 (see IPC::Open3).
.Sh "为何用 system()却得不到一个指令的输出呢？"
.IX Subsection "Why can't I get the output of a command with system()?"
你把 system() 和反向引号 (``) 的用法搞混了。 system() 会执行一个指令然后 传回指令结束时的状况资讯（以一个 16 进位值表示：低位元是程序中止所收到的 讯号，高位元才是真正离开时的传回值）。反向引号 (``) 执行一个指令并且把它 所送出的东西送到 STDOUT。
.PP
.Vb 2
\&    $exit_status   = system("mail-users");
\&    $output_string = `ls`;
.Ve
.Sh "如何捕捉外部指令的 STDERR？"
.IX Subsection "How can I capture STDERR from an external command?"
有叁种基本方式执行外部指令：
.PP
.Vb 3
\&    system $cmd;                # 使用 system()
\&    $output = `$cmd`;           # 使用 backticks (``)
\&    open (PIPE, "cmd |");       # 使用 open()
.Ve
.PP
在 system() 下，STDOUT 和 STDERR 都会输出到和 script 本身的 STDOUT, STDERR相同的出处，除非指令本身将它们导向它处。反向引号和 open() 则 只 读取指令的 STDOUT 部份。
.PP
你也可以使用 IPC::Open3 模组.  Benjamin
Goldberg provides some sample code:
.PP
To capture a program's \s-1STDOUT\s0, but discard its \s-1STDERR:\s0
.PP
.Vb 7
\&    use IPC::Open3;
\&    use File::Spec;
\&    use Symbol qw(gensym);
\&    open(NULL, ">", File::Spec->devnull);
\&    my $pid = open3(gensym, \e*PH, ">&NULL", "cmd");
\&    while(  ) { }
\&    waitpid($pid, 0);
.Ve
.PP
To capture a program's \s-1STDERR\s0, but discard its \s-1STDOUT:\s0
.PP
.Vb 7
\&    use IPC::Open3;
\&    use File::Spec;
\&    use Symbol qw(gensym);
\&    open(NULL, ">", File::Spec->devnull);
\&    my $pid = open3(gensym, ">&NULL", \e*PH, "cmd");
\&    while(  ) { }
\&    waitpid($pid, 0);
.Ve
.PP
To capture a program's \s-1STDERR\s0, and let its \s-1STDOUT\s0 go to our own \s-1STDERR:\s0
.PP
.Vb 5
\&    use IPC::Open3;
\&    use Symbol qw(gensym);
\&    my $pid = open3(gensym, ">&STDERR", \e*PH, "cmd");
\&    while(  ) { }
\&    waitpid($pid, 0);
.Ve
.PP
To read both a command's \s-1STDOUT\s0 and its \s-1STDERR\s0 separately, you can
redirect them to temp files, let the command run, then read the temp
files:
.PP