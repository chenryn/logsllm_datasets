# PostgreSQL 窗口函数

## 目标
- 定义窗口函数
- 了解专用窗口函数的种类
- 掌握常用窗口函数
- 熟练使用聚合函数作为窗口函数
- 利用窗口函数框架计算移动平均

## “窗口”概念的由来
- **定义**：窗口函数也称为 OLAP 函数，其名称是为了让用户快速理解而设定的。
- **解释**：通过 `PARTITION BY` 分组后的记录集合被称为“窗口”。虽然从语义上讲，“组”可能更合适，但在 SQL 中，“组”通常指使用 `GROUP BY` 分割后的记录集合。为了避免混淆，在使用 `PARTITION BY` 时称为窗口。
- **注意**：可以不指定 `PARTITION BY`，此时整个表被视为一个大窗口。

## 窗口函数应用场景
1. 分区排序
2. 动态 Group By
3. Top N 查询
4. 累计计算
5. 层次查询

## 窗口函数的分类
- **聚合函数作为窗口函数**：如 `SUM`、`AVG`、`COUNT`、`MAX`、`MIN`。
- **专用窗口函数**：如 `RANK`、`DENSE_RANK`、`ROW_NUMBER`。

### 聚合函数与窗口函数
- 将聚合函数写在窗口函数语法中，即可作为窗口函数使用。
- 标准 SQL 定义的 OLAP 专用函数，如 `RANK`、`DENSE_RANK` 和 `ROW_NUMBER`，统称为专用窗口函数。

## 专用窗口函数详解
### RANK 函数
- 计算排序时，如果存在相同位次的记录，则会跳过之后的位次。
- 示例：有 3 条记录排在第 1 位时，结果为 1 位、1 位、1 位、4 位……

```sql
SELECT ename, job, sal,
       RANK() OVER (PARTITION BY job ORDER BY sal) AS rankin
FROM emp;
```

### ROW_NUMBER 函数
- 赋予唯一的连续位次。
- 示例：有 3 条记录排在第 1 位时，结果为 1 位、2 位、3 位、4 位……

```sql
SELECT ename, job, sal,
       ROW_NUMBER() OVER (PARTITION BY job ORDER BY sal) AS unique_rankin
FROM emp;
```

### DENSE_RANK 函数
- 即使存在相同位次的记录，也不会跳过之后的位次。
- 示例：有 3 条记录排在第 1 位时，结果为 1 位、1 位、1 位、2 位……

```sql
SELECT ename, job, sal,
       DENSE_RANK() OVER (PARTITION BY job ORDER BY sal) AS dense_rankin
FROM emp;
```

## 使用技巧
- 使用 `RANK` 或 `ROW_NUMBER` 时无需参数，只需保持括号为空。
- 示例：

```sql
SELECT ename, job, sal,
       RANK() OVER (PARTITION BY job ORDER BY sal) AS rankin,
       DENSE_RANK() OVER (PARTITION BY job ORDER BY sal) AS dense_rank,
       ROW_NUMBER() OVER (PARTITION BY job ORDER BY sal) AS row_rankin
FROM emp;
```

## 适用范围
- **位置限制**：窗口函数只能在 `SELECT` 子句中使用，不能在 `WHERE` 或 `GROUP BY` 子句中使用。
- **原因**：窗口函数是对 `WHERE` 或 `GROUP BY` 处理后的结果进行操作。提前进行排序处理会导致错误的结果。

## 作为窗口函数使用的聚合函数
- 所有聚合函数都能用作窗口函数，语法与专用窗口函数相同。
- 示例：

```sql
-- 计算 price 的累计结果
SELECT name, price,
       SUM(price) OVER (ORDER BY name) AS current_sum
FROM product;

-- 计算 sal 的累计结果
SELECT ename, sal,
       SUM(sal) OVER (ORDER BY ename) AS current_sum
FROM emp;
```

## 指定框架（汇总范围）
- 使用 `ROWS` 和 `PRECEDING` 关键字指定框架。
- 示例：计算移动平均

```sql
SELECT name, price,
       AVG(price) OVER (ORDER BY name ROWS 2 PRECEDING) AS moving_avg
FROM product;
```

- **解释**：`ROWS 2 PRECEDING` 表示截止到之前的 2 行，即当前记录 + 之前 1 行 + 之前 2 行。

### 同时指定前后行
- 使用 `FOLLOWING` 替换 `PRECEDING` 可以指定“截止到之后 ~ 行”。

```sql
SELECT name, price,
       AVG(price) OVER (ORDER BY name ROWS BETWEEN 1 PRECEDING AND 1 FOLLOWING) AS moving_avg
FROM product;
```

## 两个 ORDER BY
- `OVER` 子句中的 `ORDER BY` 仅用于决定窗口函数的计算顺序，对最终结果的排列顺序无影响。
- 在 `SELECT` 语句末尾使用 `ORDER BY` 子句指定排序顺序。

## 总结
- **专用窗口函数**：`RANK`、`ROW_NUMBER`、`DENSE_RANK`。
- **将聚合函数作为窗口函数使用**：需要带参数。
- **框架的用法**：计算移动平均。

## 练习
1. 设计一张表存储高中生每门课程的每场考试成绩，包括学号、姓名、年级、班级、科目、成绩、考试场次。
2. 写入一些测试数据。
3. 使用窗口函数查询最近一次考试，每个人班级每科排名、总分排名，年级每科排名、总分排名，与班级第一名的科目分差和总分分差，与年级第一名的科目分差和总分分差。