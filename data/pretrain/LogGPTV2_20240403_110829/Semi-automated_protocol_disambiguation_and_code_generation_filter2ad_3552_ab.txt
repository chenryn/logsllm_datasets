language syntax and semantics. It describes the syntax of
words and phrases using primitive categories such as noun
(N), noun phrase (NP), or sentence (S), and complex categories
comprised of primitive categories, such as S\NP (to express
that it can combine a noun phrase on the left and form a
Semantic Parsing
Disambiguation
Paragraph Extraction
Header Struct Extraction
LF to Graph Conversion
Internal Inconsistency Checks
0
0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
1
2
3
|
Code
|
Type
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
|
|
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
|
|
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
|
|
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
Internet Header + 64 bits of Original Data Datagram
Checksum
unused
Field Description Relations
• Assign
• Associate
• Various
1. Type
2. Argument Ordering
3. Predicate Ordering
4. Distributivity
Associativity Check
Final LF Selection
Figure 1: SAGE components.
Code Generator
Filter Non-executable LFs
LF to Code Conversion
Code Snippet Reordering
Code Stitching
Dynamic
Code
&
Static
Framework
Final Executable Code
sentence). It describes semantics with lambda expressions
such as 𝜆𝑥 .𝜆𝑦.@Is(𝑦, 𝑥) and 𝜆𝑥 .@Compute(𝑥).
CCG encodes these in a lexicon, which users can extend to
capture domain-specific knowledge. For example, we added
the following lexical entries to the lexicon to represent con-
structs found in networking standards documents:
(1) checksum → NP: "checksum"
(2) is → {(S\NP)/NP: 𝜆𝑥 .𝜆𝑦.@Is(𝑦, 𝑥)}
(3) zero → {NP: @Num(0)}
This expresses the fact (a) “checksum” is a special word in
networking, (b) “is” can be assignment, and (c) zero can be a
number. CCG can use this lexicon to generate a logical form
(LF) that completely captures the semantics of a phrase such
as “checksum is zero”: {S: @Is("checksum", @Num(0))}. Our
code generator (§5) produces code from these.
Challenges. sage must surmount three challenges before
using CCG: (a) specify domain-specific syntax, (b) specify
domain-specific semantics, (c) extract structural and non-
textual elements in standards documents (described below).
Next we describe how we address these challenges.
Specifying domain-specific syntax. Lexical entry (1)
above specifies that checksum is a keyword in the vocabulary.
Rather than having a person specify such syntactic lexical
entries, sage creates a term dictionary of domain-specific
nouns and noun-phrases using the index of a standard
networking textbook. This reduces human effort. Before
we run the semantic parser, CCG, we also need to identify
nouns and noun-phrases that occur generally in English, for
which we use an NLP tool called SpaCy [28].
Specifying domain-specific semantics. CCG has a built-
in lexicon that captures the semantics of written English.
Even so, we have found it important to add domain-specific
lexical entries. For example, the lexical entry (2) above shows
that the verb is can represent the assignment of a value to a
protocol field. In sage, we manually generate these domain-
specific entries, with the intent that these semantics will
generalize to many RFCs (see also §6). Beyond capturing
domain-specific uses of words (like is), domain-specific se-
mantics capture idiomatic usage common to RFCs. For ex-
ample, RFCs have field descriptions (like version numbers,
packet types) that are often followed by a single sentence
that has the (fixed) value of the field. For CCG to parse this,
it must know that the value should be assigned to the field.
Similarly, RFCs sometimes represent descriptions for differ-
ent code values of a type field using an idiom of the form
“0 = Echo Reply”. §6 quantifies the work involved in gener-
ating the domain-specific lexicon.
Extracting structural and non-textual elements.
Finally, RFCs contain stylized elements, for which we wrote
pre-processors. RFCs use indentation to represent content
hierarchy and descriptive lists (e.g., field names and their
values). Our pre-processor extracts these relationships
to aid in disambiguation (§4) and code generation (§5).
RFCs also represent packet header fields (and field widths)
using ASCII art; we extract field names and widths and
directly generate data structures (specifically, structs in C)
to represent headers to enable automated code generation
(§5). Some RFCs [53] also contain pseudo-code, which we
represent as logical forms to facilitate code generation.
Running CCG. After pre-processing, we run CCG on each
sentence of an RFC. Ideally, CCG should output exactly one
logical form for a sentence. In practice, it outputs zero or
more logical forms, some of which arise from limitations in
CCG, and some from ambiguities inherent in the sentence.
4 DISAMBIGUATION
Next we describe how sage leverages domain knowledge
to automatically resolve some ambiguities, where semantic
parsing resulted in either 0 or more than 1 logical forms.
4
4.1 Why Ambiguities Arise
To show how we automatically resolve ambiguities, we take
examples from the ICMP RFC [61] for which our semantic
parser returned either 0 or more than 1 logical forms.
Zero logical forms. Several sentences in the ICMP RFC
resulted in zero logical forms after semantic parsing, all of
which were grammatically incomplete, lacking a subject:
A The source network and address from the original data-
B The internet header plus the first 64 bits of the original
gram’s data
datagram’s data
C If code = 0, identifies the octet where an error was detected
D Address of the gateway to which traffic for the network
specified in the internet destination network field of the
original datagram’s data should be sent
Such sentences are common in protocol header field descrip-
tions. The last sentence is difficult even for a human to parse.
More than 1 logical form. Several sentences resulted in
more than one logical form after semantic parsing. The fol-
lowing two sentences are grammatically incorrect:
E If code = 0, an identifier to aid in matching timestamp and
replies, may be zero
F If code = 0, a sequence number to aid in matching timestamp
and replies, may be zero
The following example needs additional context, and contains
imprecise language:
G To form a information reply message, the source and des-
tination addresses are simply reversed, the type code
changed to 16, and the checksum recomputed
A machine parser does not realize that source and destina-
tion addresses refer to fields in the IP header. Similarly, it is
unclear from this sentence whether the checksum refers to
the IP checksum or the ICMP checksum. Moreover, the term
type code is confusing, even to a (lay) human reader, since
the ICMP header contains both a type field and a code field.
Finally, this sentence, discussed earlier (§2.1), is under-
specified, since it does not describe which byte the checksum
computation should end at:
H The checksum is the 16-bit ones’s complement of the one’s
complement sum of the ICMP message starting with the
ICMP Type
While sentences G and H are grammatically correct and
should have resulted in a single logical form, the CCG parser
considers them ambiguous as we explain next.
Causes of ambiguities: zero logical forms. Examples A
through C are missing a subject. In the common case when
these sentences describe a header field, that header field
is usually the subject of the sentence. This information is
available to sage when it extracts structural information
from the RFC (§3). When a sentence that is part of a field
description has zero logical forms, sage can re-parse that
sentence by supplying the header. This approach does not
work for D; this is an incomplete sentence, but CCG is unable
to parse it even with the supplied header context. Ultimately,
we had to re-write that sentence to successfully parse it.
Causes of ambiguities: more than one logical form.
Multiple logical forms arise from more fundamental limi-
tations in machine parsing. Consider Figure 2, which shows
multiple logical forms arising for a single sentence. Each log-
ical form consists of nested predicates (similar to a statement
in a functional language), where each predicate has one or
more arguments. A predicate represents a logical relation-
ship (@And), an assignment (@Is), a conditional (@If), or
an action (@Action) whose first argument is the name of
a function, and subsequent arguments are function param-
eters. Finally, Figure 2 illustrates that a logical form can be
naturally represented as a tree, where the internal nodes are
predicates and leaves are (scalar) arguments to predicates.
Inconsistent argument types. In some logical forms,
their arguments are incorrectly typed, so they are obviously
wrong. For example, LF1 in Figure 2, the second argument
of the compute action must be the name of a function, not a
numeric constant. CCG’s lexical rules don’t support type
systems, so cannot eliminate badly-typed logical forms.
Order-sensitive predicate arguments. The parser gen-
erates multiple logical forms for the sentence E. Among
these, in one logical form, code is assigned zero, but in the
others, the code is tested for zero. Sentence E has the form “If
A, (then) B”, and CCG generates two different logical forms:
@If(A,B) and @If(B,A). This is not a mistake humans would
make, since the condition and action are clear from the sen-
tence. However, CCG’s flexibility and expressive power may
cause over-generation of semantic interpretations in this cir-
cumstance. This unintended behavior is well-known [27, 80].
Predicate order-sensitivity. Consider a sentence of the
form “A of B is C”. In this sentence, CCG generates two
distinct logical forms. In one, the @Of predicate is at the
root of the tree, in the other @Is is at the root of the tree.
The first corresponds to the grouping “(A of B) is C” and
the second to the grouping “A of (B is C)”. For sentences of
this form, the latter is incorrect, but CCG unable to generate
disambiguate between the two.
Predicate distributivity. Consider a sentence of the form
“A and B is C”. This sentence exemplifies a grammatical struc-
ture called coordination [72]2. For such a sentence, CCG will
generate two logical forms, corresponding to: “(A and B) is C”
and “(A is C) and (B is C)” (in the latter form, “C” distributes
over “A” and “B”). In general, both forms are equally correct.
However, CCG sometimes chooses to distribute predicates
2For example: Alice sees and Bob says he likes Ice Cream.
5
Sentence
For computing the checksum, the checksum field should be zero
LF 1 @AdvBefore(@Action(’compute’,’0’),@Is(@And(’checksum_field’,’checksum’),’0’))
LF 2 @AdvBefore(@Action(’compute’,’checksum’),@Is(’checksum_field’,’0’))
LF 3 @AdvBefore(’0’,@Is(@Action(’compute’,@And(’checksum_field’,’checksum’)),’0’))
LF 4 @AdvBefore(’0’,@Is(@And(’checksum_field’,@Action(’compute’,’checksum’)),’0’))
LF 2:
@AdvBefore
@Action
@Is
’compute
’checksum’
’checksum_field’
’0’
Figure 2: Example of multiple LFs from CCG parsing of “For computing the checksum, the checksum should be zero”.
#1
@StartsWith
#2
@StartsWith
@Is
’icmp_type’
@Is
’icmp_type’
’checksum’
@Of
’checksum’
@Of
@Of
’icmp_message’
Ones
@Of
Ones
OnesSum
Figure 3: LF Graphs of sentence H.
OnesSum
’icmp_message’
when it should not. This occurs because CCG is unable to
distinguish between two uses of the comma: one as a con-
junction, and the other to separate a dependent clause from
an independent clause. In sentences with a comma, CCG
generates logical forms for both interpretations. RFCs con-
tain some sentences of the form “A, B is C”3. When CCG
interprets the comma to mean a conjunction, it generates a
logical form corresponding to “A is C and B is C”, which, for
this sentence, is clearly incorrect.
Predicate associativity. Consider sentence H, which has
the form “A of B of C”, where each of A, B, and C are
predicates (e.g., A is the predicate @Action("16-bit-ones-
complement"). In this example, the CCG parser generates
two semantic interpretations corresponding to two different
groupings of operations (one that groups A and B, the other
that groups B and C: Figure 3). In this case, the @Of predi-
cate is associative, so the two logical forms are equivalent,
but the parser does not know this.
4.2 Winnowing Ambiguous Logical Forms
We define the following checks to address each of the above
types of ambiguities (§4.1), which sage applies to sentences
with multiple logical forms, winnowing them down (often)
to one logical form (§6). These checks apply broadly because
of the restricted way in which specifications use natural
language. While we derived these by analyzing ICMP, we
show that these checks also help disambiguate text in other
RFCs. At the end of this process, if a sentence is still left with
multiple logical forms, it is fundamentally ambiguous, so
sage prompts the user to re-write it.
Type. For each predicate, sage defines one or more type
checks: action predicates have function name arguments,
3If a higher-level protocol uses port numbers, they are assumed to be in the
first 64 data bits of the original datagram’s data.
6
assignments cannot have constants on the left hand side,
conditionals must be well-formed, and so on.
Argument ordering. For each predicate for which the order
of arguments is important, sage defines checks that remove
logical forms that violate the order.
Predicate ordering. For each pair of predicates where one
predicate cannot be nested within another, sage defines
checks that remove order-violating logical forms.
Distributivity. To avoid semantic errors due to comma am-
biguity, sage always selects the non-distributive logical form
version (in our example, “(A and B) is C”).
Associativity. If predicates are associative, their logical
form trees (Figure 3) will be isomorphic. sage detects
associativity using a standard graph isomorphism algorithm.
5 CODE GENERATION
Next we discuss how we convert the intermediate represen-
tation of disambiguated logical forms to code.
5.1 Challenges
We faced two main challenges in code generation: (a) rep-
resenting implicit knowledge about dependencies between
two protocols or a protocol and the OS and (b) converting a
functional logical form into imperative code.
Encoding protocol and environment dependencies.
Networked systems rely upon protocol stacks, where
protocols higher in the stack use protocols below them. For