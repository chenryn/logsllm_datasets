cant load of mathematical computations, our implementation uses
concurrency, as provided by Python’s coroutines from the asyncio
library. Our implementation is self-contained and does not depend
on external libraries. In particular, we fully implemented the MPC
sub-protocols for multiplication [2] and number comparison [5].
To improve the performance of an MPC evaluation of a given
(arithmetic) circuit, it is usually better to construct the whole circuit
(which is a directed acyclic graph over addition and multiplication
gate nodes), and then to compute in parallel all gates in a given
layer of the circuit, since those gates are independent. However,
such implementations result in great inflexibility, as they are hard
to read, maintain and modify. Therefore, we decided to depend on
the asynchronous nature of the network, and use network corou-
tines for asynchronous development of each gate by itself, and
Session 8: Poster & Demo Session CCS ’21, November 15–19, 2021, Virtual Event, Republic of Korea2400DEMO: A Secure Voting System for Score Based Elections
CSS’21, November 15–19, 2021, Seoul, South Korea
Voters
latency
(msec)
L
14
108
683
112
469
2,211
W
1,679
1,787
1,721
2,132
2,018
2,565
Max
load
(per sec)
L
W
100
300
67
111
19
26
77
90
37
30
6
9
D M
3
3
3
9
9
9
2
8
32
2
8
32
Time to
compute
the winner
(sec)
L
0.12
0.80
5.12
0.39
2.13
13.92
W
5.99
21.89
41.85
7.29
24.03
51.44
Network
transport
(MB)
L
0.06
0.34
2.53
0.28
1.73
10.77
W
0.02
0.11
0.77
0.19
0.60
4.19
Table 1: Election measurements for D talliers and M candi-
dates (L and W stand for LAN and WAN)
pass the responsibility of scheduling the network buffers to the
operating system’s network schedulers. Such schedulers run effi-
cient algorithms for managing network traffic, which are based
on heavily-researched network queueing disciplines. One possible
consequence of our approach is that it might result in large num-
bers of small packets that could reduce efficiency. We address that
potential problem by tweaking Nagle’s algorithm [4] as needed.
Using the config.json file that was sent by the election admin-
istrator at the initiation of the election campaign, the talliers set the
synchronous network and start accepting ballots from the voters
and replying with the vote validation result. After the voting period
ends, the talliers engage in an MPC protocol that computes the
winner(s).
The reader is referred to the ReadMe file in our GitHub project
for more explanations about the system. In particular, it includes
instructions on how to set up a new election campaign, how to vote,
and how the results are announced. The readme file includes also
screenshots of the different module interfaces.
4 EXPERIMENTS
We evaluated our system on both LAN and WAN. All benchmarks
were performed with D ∈ {3, 9} talliers, M ∈ {2, 8, 32} candi-
dates, and one (K = 1) winner. The underlying field was Zp with
p = 231 − 1. We implemented all five voting rules, but in the pre-
sented benchmarks the voting rule was Range with L = 10. We
simulated ballots from N = 104 voters, using two extreme vot-
ing throughput scenarios: one with sequential voting and one in
which all ballots were submitted simultaneously. However, our cur-
rent implementation can be applied efficiently for up to roughly
500M voters, and can handle even larger scenarios by simple code
adjustments.
When running local elections (say, selecting a faculty dean or
members to a company’s board), the talliers’ servers are expected
to be nodes in a LAN. Such settings result in short Round Trip
Time. We ran the LAN tests on AWS EC2 m5d.4xlarge (16 cores, 3.1
GHz Intel Xeon Platinum 8175M processors, with 64GB memory).
The machines were selected in the same availability zone in a data
center in Ohio, over a network with bandwidth 7.5Gbps.
To simulate elections with voters that are spread over a wide area
(say, national elections), we tested the performance of our voting
system when the talliers are nodes in a WAN. To that end we set up
a WAN over Amazon servers (16 cores, 3.1 GHz Intel Xeon Platinum
8175M processors, with 64GB memory), with talliers that are spread
evenly in Ohio, Ireland and Singapore. Such settings result in longer
Round Trip Time, which significantly affect the runtime of MPC
computations. The network bandwidth was around 26-40 MBps.
In the sequential voting scenario, we generated a slow and steady
stream of votes, and measured the voter’s latency, i.e., the time that
elapsed since the voter had submitted her ballot until she received a
confirmation that the ballot was legal and processed (Table 1, third
column). On the other hand, in the simultaneous voting scenario,
where all N = 104 ballots were submitted at the same time, we
measured the max load per second, i.e., the number of ballots that
could be processed simultaneously (Table 1, fourth column). In
addition, we measured in both scenarios the time to compute the
winner of the election, at the completion of the election period
(Table 1, fifth column), and the total network transport usage for
each tallier (Table 1, sixth column). All measured values are reported
for both LAN and WAN (left and right sub-columns, respectively).
The measurements on LAN show that even our current imple-
mentation of the demo can hold against high loads of voters, so
that it can be readily deployed in real life elections.
When measuring on WAN, the CPU usage was very low (around
5-10%) because the main bottleneck was the network. Memory us-
age was high (up to 260 MB), mainly due to network buffers. We
witnessed a better transport layer utilization owing to our configu-
ration of the operating system that uses Nagle’s algorithm [4].
On the voter’s end, the time to generate secret shares from the
voter’s ballot vector with M = 8 candidates and D = 9 talliers
was around 25 ± 1 µsec on a PC (4 cores, 3.5 GHz Intel Core i5-
6600K processors, with 8GB memory), and around 30 ± 2 µsec on a
mobile phone (OnePlus 3T, 4 cores, 2.35 GHz Qualcomm MSM8996
Snapdragon 821 processors, with 6GB memory). Those are clearly
practical runtimes.
5 CONCLUSION
We demonstrate that the secure electronic voting protocol of Dery
et al. [3], based on secure multiparty computation (MPC), is practi-
cal, even with a relatively large number of talliers and over WAN.
One of our conclusions is that in application scenarios where the
main bottleneck is the network (rather than CPU time), it is ben-
eficial to write the system in a high level language, like Python,
which increases openness, readability, and mutability, and hence
potentially also increases the trust in the system. We encourage
developers of similar applications to follow that direction.
ACKNOWLEDGMENTS
Lihi Dery’s work was supported by the Ariel Cyber Innovation
Center in conjunction with the Israel National Cyber Directorate
in the Prime Minister’s Office.
REFERENCES
[1] David Chaum. 1988. Elections with Unconditionally-Secret Ballots and Disruption
[2] Ivan Damgård and Jesper Buus Nielsen. 2007. Scalable and Unconditionally Secure
Equivalent to Breaking RSA. In EUROCRYPT. 177–182.
Multiparty Computation. In CRYPTO. 572–590.
[3] Lihi Dery, Tamir Tassa, and Avishay Yanai. 2021. Fear not, vote truthfully: Secure
Multiparty Computation of score based rules. Expert Syst. Appl. 168 (2021), 114434.
[4] John Nagle. 1995. Congestion control in IP/TCP internetworks. Comput. Commun.
Rev. 25 (1995), 61–65.
[5] Takashi Nishide and Kazuo Ohta. 2007. Multiparty Computation for Interval,
Equality, and Comparison Without Bit-Decomposition Protocol. In PKC. 343–360.
[6] Adi Shamir. 1979. How to Share a Secret. Commun. ACM 22 (1979), 612–613.
Session 8: Poster & Demo Session CCS ’21, November 15–19, 2021, Virtual Event, Republic of Korea2401