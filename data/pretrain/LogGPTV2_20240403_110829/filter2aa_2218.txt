Discover vulnerabilities with CodeQL
Security Researcher @ CyCraft
CHROOT‚Äôs member
Programming lover ü§ì
qazbnm456
@boik_su
Boik Su
Agenda
‚Ä¢ Brief introduction to CodeQL
‚Ä¢ CodeQL‚Äôs Tricks
‚Ä¢ Replicate CVEs to Ô¨Ånd you CVEs
‚Ä¢ More powerful pattern Ô¨Ånder
‚Ä¢ Regression Tests
‚Ä¢ ClientDependency Massacre
‚Ä¢ Conclusion
3
Agenda
‚Ä¢ Brief introduction to CodeQL
‚Ä¢ CodeQL‚Äôs Tricks
‚Ä¢ Replicate CVEs to Ô¨Ånd you CVEs
‚Ä¢ More powerful pattern Ô¨Ånder
‚Ä¢ Regression Tests
‚Ä¢ ClientDependency Massacre
‚Ä¢ Conclusion
4
Brief introduction to CodeQL
CodeQL‚Äôs variant analysis and powerful analyzers
5
How Semmle QL works
Analysis Overview
Analyses
‚Ä¢ CodeQL ships with extensive libraries to empower variant analysis 
‚Ä¢ Static Analysis
‚Ä¢ Data Flow Analysis
‚Ä¢ Taint Analysis
‚Ä¢ CFG Analysis
‚Ä¢ Supported languages include C/C++, C#, Java, Javascript, Python and 
more
7
Static Analysis
‚Ä¢ Find static things among the Snapshot Database
‚Ä¢ Fast and accurate to Ô¨Ånd Ô¨Çaws that don‚Äôt require complex requirements to 
meet
‚Ä¢ Hardcoded password strings, dangerous functions, etc
Static Analysis
‚Ä¢ from Method m where m.getName() = "Execute" select m
‚Ä¢ from VariableAccess va
where va.getTarget().getName().regexpMatch(‚Äú.*pass(wd|word|code).*‚Äù)
select va.getTarget()
Static Analysis
Data Flow Analysis
‚Ä¢ DataFlow node carries a single value due to the value-preserving Ô¨Çow
‚Ä¢ Find out how things Ô¨Çow back and forth among data nodes
‚Ä¢ Baby steps to discovering intriguing paths
Data Flow Analysis
‚Ä¢ from AspNetRemoteFlowSource remote, Method m, MethodCall mc
where m.getDeclaringType().getABaseType().hasQualiÔ¨ÅedName("System.Web.IHttpHandler") and
m.isSourceDeclaration() and
DataFlow::localFlow(remote, DataFlow::exprNode(mc.getAnArgument())) and
mc.getEnclosingCallable() = m
select m, mc
Taint Analysis
‚Ä¢ DataFlow node carries a single value due to the value-preserving Ô¨Çow
‚Ä¢ Taint tracking extends data Ô¨Çow by including non-value-preserving Ô¨Çow 
steps
‚Ä¢ For example, 
‚Ä¢ If x is a tainted string then y is also tainted
Taint Analysis
‚Ä¢ class MyTaint extends TaintTracking::ConÔ¨Åguration {
MyTaint() { this = "‚Ä¶" }
override predicate isSource(DataFlow::Node source) { ‚Ä¶ }
override predicate isSink(DataFlow::Node sink) { ‚Ä¶ }
}
from MyTaint taint, DataFlow::Node source, DataFlow::Node sink
where taint.hasFlow(source, sink)
select source, ‚ÄúDataÔ¨Çow to $@.‚Äù, sink, sink.getNode()
CFG Analysis
‚Ä¢ A diÔ¨Äerent program representation in terms of intraprocedural control Ô¨Çow 
graphs (CFGs)
‚Ä¢ Phrased in terms of basic blocks rather than single control Ô¨Çow nodes
‚Ä¢ I don‚Äôt see it being used often
Agenda
‚Ä¢ Brief introduction to CodeQL
‚Ä¢ CodeQL‚Äôs Tricks
‚Ä¢ Replicate CVEs to Ô¨Ånd you CVEs
‚Ä¢ More powerful pattern Ô¨Ånder
‚Ä¢ Regression Tests
‚Ä¢ ClientDependency Massacre
‚Ä¢ Conclusion
16
Replicate CVEs to Ô¨Ånd you CVEs
Model threats to Ô¨Ånd them somewhere else
17
Why would we do this?
‚Ä¢ It‚Äôs because that some vulnerabilities were Ô¨Åxed by just mitigating 
reporters‚Äô provided cases
‚Ä¢ By replicating these vulnerabilities by modeling with CodeQL, it‚Äôs possibly 
to Ô¨Ånd the same Ô¨Çaws through other paths
‚Ä¢ It‚Äôs also possible to Ô¨Ånd the same Ô¨Çaws from other projects or repositories
‚Ä¢ This is called ‚ÄúVariant Analysis‚Äù, the process of using a known vulnerability 
as a seed to Ô¨Ånd similar problems in other code bases
Keybase hostname-validation regular expression
‚Ä¢ Look at these two regular expressions
‚Ä¢ '\.twitter\.com/([\\w]+)[/]?$'
‚Ä¢ '\.twitter\.com/[\\w]+[/]?$'
Keybase hostname-validation regular expression
‚Ä¢ Look at these two regular expressions
‚Ä¢ '\.twitter\.com/([\\w]+)[/]?$'
‚Ä¢ '\.twitter\.com/[\\w]+[/]?$'
‚Ä¢ The issue stems from the fact that it use \. instead of \\. in these two 
regular expression
Keybase hostname-validation regular expression
Let‚Äôs model this Ô¨Çaw
‚Ä¢ from InvokeExpr c
where c.getCalleeName() = "RegExp"
select c
Step 1: Find all occurrence
‚Ä¢ from InvokeExpr c, StringLiteral s
where c.getCalleeName() = "RegExp" and
    s.getStringValue().matches(‚Äú%.*%") and
    s.getEnclosingStmt() = c.getEnclosingStmt()
select c
Step 2: Find all occurrence with ".*" inside
Electron 1.2.2 - 4.2.12
Regular expression failure upon checking a website‚Äôs URL to activate the 
webExtension
The Patch
Escape correctly all special characters
Umbraco CMS Local File Inclusion
‚Ä¢ The ClientDependency package, used by Umbraco, exposes the 
"DependencyHandler.axd" Ô¨Åle in the root of the website
‚Ä¢ This Ô¨Åle is used to combine and minify CSS and JavaScript Ô¨Åles, which 
are supplied in a base64 encoded string
‚Ä¢ /DependencyHandler.axd?
s=L3VtYnJhY28vbGliL2pxdWVyeS9qcXVlcnkubWluLmpz&t=Css&cdv=1
‚Ä¢ /umbraco/lib/jquery/jquery.min.js
Umbraco CMS Local File Inclusion
Umbraco CMS Local File Inclusion
‚Ä¢ According to Umbraco Security Advisories, there are multiple times of LFI 
in ClientDependency
‚Ä¢ It‚Äôs a good target for Variant
Analysis
‚Ä¢ Umbraco Forms seems to be a
good target next 
Umbraco CMS Local File Inclusion
GET /DependencyHandler.axd
?s=http://umbraco.example.com/web.conÔ¨Åg&t=Css&cdv=1
Let‚Äôs model this Ô¨Çaw
‚Ä¢ In Asp.Net, it‚Äôs common to implement the IHttpHandler interface in order 
to intercept users‚Äô requests
‚Ä¢ Therefore, those classes are good sources for us!
‚Ä¢ After reviewing the source code of ClientDependency, we know that the 
WriteFileToStream function is responsible for the vulnerability
‚Ä¢ Hence, this function is good sink
Let‚Äôs model this Ô¨Çaw
‚Ä¢ Model two previous Ô¨Çaws with CodeQL
‚Ä¢ Then, pop up a new LFI issue within ClientDependency 1.8.2.1 - 1.9.8
Let‚Äôs model this Ô¨Çaw
‚Ä¢ Model two previous Ô¨Çaws with CodeQL
‚Ä¢ Then, pop up a new LFI issue within ClientDependency 1.8.2.1 - 1.9.8
‚Ä¢ Source Node
Let‚Äôs model this Ô¨Çaw
‚Ä¢ Model two previous Ô¨Çaws with CodeQL
‚Ä¢ Then, pop up a new LFI issue within
ClientDependency 1.8.2.1 - 1.9.8
‚Ä¢ Sink Node
Agenda
‚Ä¢ Brief introduction to CodeQL
‚Ä¢ CodeQL‚Äôs Tricks
‚Ä¢ Replicate CVEs to Ô¨Ånd you CVEs
‚Ä¢ More powerful pattern Ô¨Ånder
‚Ä¢ Regression Tests
‚Ä¢ ClientDependency Massacre
‚Ä¢ Conclusion
33
More powerful pattern Ô¨Ånder
Find something through semantics
34
Pattern Finder
‚Ä¢ Method 1: Grep / Strings / Regular Expression
‚Ä¢ Method 2: UML Class Diagram
‚Ä¢ Method 3: CodeQL
35
Grep / Strings / Regular Expression
‚Ä¢ Pros
‚Ä¢ Fast, eÔ¨Écient and intuitive
‚Ä¢ Better to locate certain objects
‚Ä¢ Cons
‚Ä¢ Subject to non-relevant items having similar names
‚Ä¢ Hard to track back to the origins
UML Class Diagram
‚Ä¢ Pros
‚Ä¢ Fast, eÔ¨Écient and intuitive
‚Ä¢ Relational mappings
‚Ä¢ Cons
‚Ä¢ Performance degrades when code is complicated
‚Ä¢ Meanwhile, it becomes increasingly diÔ¨Écult to keep track of all these 
relationships
UML Class Diagram
‚Ä¢ CVE-2018-1000861
‚Ä¢ RCE exists in the Stapler web framework used by Jenkins
‚Ä¢ Stapler staplers most objects to URLs
‚Ä¢ Use UML to Ô¨Ånd a good gadget to jump into the RCE chain
UML Class Diagram
‚Ä¢ CVE-2018-1000861
‚Ä¢ RCE exists in the Stapler web framework used by Jenkins
‚Ä¢ Stapler staplers most objects to URLs
‚Ä¢ Use UML to Ô¨Ånd a good gadget to jump into the RCE chain
CodeQL
‚Ä¢ Pros
‚Ä¢ Cover even more general and tricky cases
‚Ä¢ Easy to maintain and good to be sustainable
‚Ä¢ Cons
‚Ä¢ Need professionals to enact patterns
‚Ä¢ Takes time to process and compute
Umbraco CMS Local File Inclusion
‚Ä¢ CVE-2020-XXXX
‚Ä¢ Pre-Auth RCE if we can leak the machineKey
‚Ä¢ UmbracoEnsuredPage class is to initiate a pre-auth 
check of a user before the page is accessed
‚Ä¢ How do we Ô¨Ånd an easy-to-use breach to get RCE
Unauthenticated Accessible Page
The Umbraco Pages that you can access directly w/o authentication
Umbraco CMS Local File Inclusion
‚Ä¢ CVE-2020-XXXX
‚Ä¢ Pre-Auth RCE if we can leak machineKey
‚Ä¢ UmbracoEnsuredPage class is to initiate a pre-auth 
check of a user before the page is accessed
‚Ä¢ How do we Ô¨Ånd an easy-to-use breach to get RCE
‚Ä¢ /umbraco/ping.aspx seems to be a good target
Agenda
‚Ä¢ Brief introduction to CodeQL
‚Ä¢ CodeQL‚Äôs Tricks
‚Ä¢ Replicate CVEs to Ô¨Ånd you CVEs
‚Ä¢ More powerful pattern Ô¨Ånder
‚Ä¢ Regression Tests
‚Ä¢ ClientDependency Massacre
‚Ä¢ Conclusion
45
Regression Tests
SSDLC adoption
46
What‚Äôs SSDLC
‚Ä¢ SSDLC, aka S-SDLC, is the initialism of Secure Software Development 
Life Cycle
‚Ä¢ Simply put, add security activities to the system development lifecycle. 
Preferably in every phase of the SDLC, and formalized
‚Ä¢ Part of DevSecOps
How to use CodeQL as Tests
‚Ä¢ DeÔ¨Åne common pitfalls with CodeQL by professionals
‚Ä¢ Hardcoded Strings, OOB access, etc
‚Ä¢ Public research and paper of Variant Analysis using CodeQL
‚Ä¢ Since it‚Äôs community-driven, lgtm has already provided a bunch of rules
‚Ä¢ It also provides rules speciÔ¨Åcally for security
Client-side URL redirect
Client-side URL redirection based on unvalidated user input may cause 
redirection to malicious web sites
Untrusted XML is read insecurely
Untrusted XML is read with an insecure resolver and DTD processing enabled
Bean Stalking: Growing Java beans into RCE
Variant Analysis journey that started analyzing CVE-2018-16621 and ended up 
opening a can of worms by @pwntester
Agenda
‚Ä¢ Brief introduction to CodeQL
‚Ä¢ CodeQL‚Äôs Tricks
‚Ä¢ Replicate CVEs to Ô¨Ånd you CVEs
‚Ä¢ More powerful pattern Ô¨Ånder
‚Ä¢ Regression Tests
‚Ä¢ ClientDependency Massacre
‚Ä¢ Conclusion
52
ClientDependency Massacre
Impacting Umbraco CMS since 2015
forums.asp.net
(Recap) Umbraco CMS Local File Inclusion
‚Ä¢ CVE-2020-XXXX
‚Ä¢ Pre-Auth RCE if we can leak machineKey
‚Ä¢ UmbracoEnsuredPage class is to initiate a pre-auth 
check of a user before the page is accessed
‚Ä¢ How do we Ô¨Ånd an easy-to-use breach to get RCE
‚Ä¢ /umbraco/ping.aspx seems to be a good target
Turn LFI into RCE
‚Ä¢ In ASP.NET, machineKey is the golden key to the following components
‚Ä¢ ViewState
‚Ä¢ Forms Authentication
‚Ä¢ Out-Of-Process Session
‚Ä¢ machineKey will be generated uniquely and automatically
‚Ä¢ Developers can also specify their ones to support web farms
Turn LFI into RCE
‚Ä¢ In ASP.NET, machineKey is the golden key to the following components
‚Ä¢ ViewState
‚Ä¢ Forms Authentication
‚Ä¢ Out-Of-Process Session
‚Ä¢ machineKey will be generated uniquely and automatically
‚Ä¢ Developers can also specify their ones to support web farms
Demystify the ViewState
Demystify the ViewState
‚Ä¢ ASP.NET uses machineKey to decrypt and validate the __VIEWSTATE or 
forms authentication and so on
‚Ä¢ Before ASP.NET 4.5, ViewState is considered to be insecure and defaults 
to be unencrypted. It means that anyone can see the plaintext by 
inspecting the __VIEWSTATE hidden Ô¨Åelds
‚Ä¢ ViewState gets encrypted by default after ASP.NET 4.5 and even MACed 
for good after ASP.NET 4.5.2
‚Ä¢ Then, to achieve RCE, we take the leaked key to craft a malign serialized 
object that meets the requirements of both encryption and validation
Umbraco CMS Local File Inclusion
‚Ä¢ CVE-2020-XXXX
‚Ä¢ Pre-Auth RCE if we can leak machineKey
‚Ä¢ UmbracoEnsuredPage class is to initiate a pre-auth 
check of a user before the page is accessed
‚Ä¢ How do we Ô¨Ånd an easy-to-use breach to get RCE
‚Ä¢ /umbraco/ping.aspx seems to be a good target
Umbraco 7
Agenda
‚Ä¢ Brief introduction to CodeQL
‚Ä¢ CodeQL‚Äôs Tricks
‚Ä¢ Replicate CVEs to Ô¨Ånd you CVEs
‚Ä¢ More powerful pattern Ô¨Ånder
‚Ä¢ Regression Tests
‚Ä¢ ClientDependency Massacre
‚Ä¢ Conclusion
61
The future of CodeQL
‚Ä¢ Community-driven set of rules for both linting and security checking
‚Ä¢ With more languages get supported, CodeQL can cover wider range of 
libraries and codebases
‚Ä¢ CVE could be generalized and Repeatable
Thank you ‚ò∫ 
Question?
PI:EMAIL