# Discovering Vulnerabilities with CodeQL

**Speaker:**
- **Boik Su (qazbnm456)**
  - Security Researcher @ CyCraft
  - CHROOT‚Äôs Member
  - Programming Lover ü§ì
  - Contact: @boik_su

## Agenda
1. Brief Introduction to CodeQL
2. CodeQL‚Äôs Tricks
3. Replicating CVEs to Find New Ones
4. More Powerful Pattern Finder
5. Regression Tests
6. ClientDependency Massacre
7. Conclusion

---

## 1. Brief Introduction to CodeQL

### Overview of CodeQL
- **CodeQL** is a powerful query language for code analysis, enabling variant analysis and robust analyzers.
- **Semmle QL** works by providing extensive libraries for static, data flow, taint, and control flow graph (CFG) analyses.
- **Supported Languages**: C/C++, C#, Java, JavaScript, Python, and more.

### Static Analysis
- **Purpose**: Identify static issues in the Snapshot Database.
- **Examples**: Hardcoded passwords, dangerous functions.
- **Query Example**:
  ```ql
  from Method m where m.getName() = "Execute" select m
  from VariableAccess va
  where va.getTarget().getName().regexpMatch(".*pass(wd|word|code).*")
  select va.getTarget()
  ```

### Data Flow Analysis
- **Purpose**: Track how data flows through the program.
- **Example**:
  ```ql
  from AspNetRemoteFlowSource remote, Method m, MethodCall mc
  where m.getDeclaringType().getABaseType().hasQualifiedName("System.Web.IHttpHandler") and
        m.isSourceDeclaration() and
        DataFlow::localFlow(remote, DataFlow::exprNode(mc.getAnArgument())) and
        mc.getEnclosingCallable() = m
  select m, mc
  ```

### Taint Analysis
- **Purpose**: Extend data flow analysis to include non-value-preserving steps.
- **Example**:
  ```ql
  class MyTaint extends TaintTracking::Configuration {
    MyTaint() { this = "‚Ä¶" }
    override predicate isSource(DataFlow::Node source) { ‚Ä¶ }
    override predicate isSink(DataFlow::Node sink) { ‚Ä¶ }
  }
  from MyTaint taint, DataFlow::Node source, DataFlow::Node sink
  where taint.hasFlow(source, sink)
  select source, ‚ÄúDataflow to $@.‚Äù, sink, sink.getNode()
  ```

### Control Flow Graph (CFG) Analysis
- **Purpose**: Represent program control flow in terms of basic blocks.
- **Usage**: Less common but useful for detailed control flow analysis.

---

## 2. CodeQL‚Äôs Tricks

### Why Replicate CVEs?
- **Reason**: Some vulnerabilities are only partially fixed, leaving similar issues unaddressed.
- **Process**: Use known vulnerabilities as seeds to find similar problems in other codebases.
- **Example**: Keybase hostname-validation regular expression issue.

### Finding Vulnerabilities
- **Step 1**: Identify all occurrences of a specific pattern.
  ```ql
  from InvokeExpr c
  where c.getCalleeName() = "RegExp"
  select c
  ```
- **Step 2**: Filter occurrences with specific patterns.
  ```ql
  from InvokeExpr c, StringLiteral s
  where c.getCalleeName() = "RegExp" and
        s.getStringValue().matches("%.*%") and
        s.getEnclosingStmt() = c.getEnclosingStmt()
  select c
  ```

### Case Study: Umbraco CMS Local File Inclusion
- **Issue**: ClientDependency package exposes `DependencyHandler.axd` file.
- **Exploit**: Combine and minify CSS/JS files using base64 encoding.
- **Vulnerability**: Multiple LFI issues in ClientDependency.
- **Modeling**: Implement IHttpHandler interface and identify `WriteFileToStream` function as the sink.

---

## 3. Replicating CVEs to Find New Ones

### Benefits
- **Variant Analysis**: Use known vulnerabilities to find similar issues in other projects.
- **Example**: Electron 1.2.2 - 4.2.12, Regular expression failure in URL validation.

### Modeling Flaws
- **Source Node**: Classes implementing `IHttpHandler`.
- **Sink Node**: `WriteFileToStream` function.
- **Result**: Identified new LFI issue in ClientDependency 1.8.2.1 - 1.9.8.

---

## 4. More Powerful Pattern Finder

### Methods
- **Grep/Strings/Regular Expression**: Fast and efficient but prone to false positives.
- **UML Class Diagram**: Effective for relational mappings but performance degrades with complexity.
- **CodeQL**: Covers general and tricky cases, easy to maintain but requires expertise.

### Case Study: Jenkins Stapler RCE
- **CVE-2018-1000861**: RCE in the Stapler web framework.
- **Method**: Use UML to find gadgets for the RCE chain.

---

## 5. Regression Tests

### Secure Software Development Life Cycle (SSDLC)
- **Definition**: Add security activities to the SDLC.
- **Integration**: Part of DevSecOps.
- **Usage**: Define common pitfalls with CodeQL, use public research and community-driven rules.

### Examples
- **Client-side URL Redirect**: Unvalidated user input causing redirection to malicious sites.
- **Untrusted XML**: Reading insecurely with DTD processing enabled.
- **Bean Stalking**: Analyzing CVE-2018-16621 to find related vulnerabilities.

---

## 6. ClientDependency Massacre

### Impact on Umbraco CMS
- **CVE-2020-XXXX**: Pre-Auth RCE if machineKey is leaked.
- **Target**: `/umbraco/ping.aspx` for easy-to-use breach.
- **Exploitation**: Craft a malign serialized object using the leaked key.

### Turning LFI into RCE
- **MachineKey**: Key component for ViewState, Forms Authentication, and Out-Of-Process Session.
- **ViewState**: Defaults to encrypted and MACed after ASP.NET 4.5.2.
- **RCE**: Use leaked machineKey to craft a valid serialized object.

---

## 7. Conclusion

### Future of CodeQL
- **Community-Driven Rules**: For linting and security checking.
- **Language Support**: Expanding to cover more languages and codebases.
- **Generalization and Repeatability**: CVEs can be generalized and repeated.

### Thank You
- **Questions?**
- **Contact**: [PI:EMAIL]

---

This revised version aims to provide a clear, coherent, and professional presentation of the content.