col verification in the context of CEO and DEO, but neither imple-
mented their algorithm nor considered any other properties. Inter-
estingly, some years later, STS-MAC and STS-ID were proven to be
secure against UKS attacks using the traditional symbolic model of
signatures in [70]. This was possible since the traditional symbolic
model did not take these signature behaviours into account, thereby
missing the previously published UKS attacks [25, 67].
Baek and Kim [25] recommended adoption of an alternative
variant of STS-MAC, dubbed ‘key agreement mechanism 7’ in
ISO/IEC 11770-3 [57], which we show in Figure 3 as STS-ISO. Here,
instead of including the identities of the communicating parties
under the signature, they are directly MACed. We analyse this pro-
tocol in Tamarin with respect to these DEO and CEO equations
and find the protocol is proven secure under this model. We return
to the security of this STS variant in the next section.


Session 9D: SignaturesCCS ’19, November 11–15, 2019, London, United Kingdom2169ska, certa
Alex
x ←$ Zp
дx
skb, certb
Blake
y ←$ Zp
дy , certb , Sigskb
certa , Sigska
(idb , дx , дy), MACдxy (дx , дy , idb)
(ida , дx , дy), MACдxy (дx , дy , ida)
K :=дxy
Figure 3: Sketch of STS-ISO [38], which includes the identities of the
communicating parties.
3.2 Malleability
Signature schemes that are provably secure in the standard sense
of being EUF-CMA may still be malleable. If a signature scheme is
malleable, successful verification does not preclude that the signa-
ture was modified. In contrast, non-malleability implies that if a
signature is verified under an honest public key, the signature is
the same as one produced by the honest party.
Non-malleability is not implied by the standard forgery defini-
tion, which only describes the difficulty of producing a signature
which verifies under a different message. For example, ECDSA [71]
and EdDSA are malleable. Interestingly, whether or not this poses
a problem is the subject of dispute between signature scheme de-
signers and implementers. For example, Ed25519 was originally
designed without regard for malleability [31], whereas the IETF
standardisation body decided to explicitly require implementations
to enforce non-malleability [61].
In practice, the design of security protocols may implicitly rely
on the assumption of non-malleability, while their instantiation
may only use a EUF-CMA-provably secure signature scheme.
Symbolic model for malleability: We provide an additional
capability to the adversary allowing them to make a new signature
out of an old one. This can be done in several straightforward ways;
the main insight is to ensure to explicitly express the “malleable”
part of the signature construction. Thus, the adversary cannot
change arbitrary parts of the signature, since that would break the
normal assumptions, but only the malleable part which otherwise
does not affect unforgeability.
This can be modeled in Tamarin’s framework by extending the
term model for signatures with an additional argument, abstracting
the malleable information. The signature convention then becomes
sign(m, rep, sk)
where m represents the signed payload data, sk the signing key, and
rep the malleable format. The corresponding verification remains
similar to the existing one, in the sense that it ignores rep and
works as before on m and sk. We also provide the adversary with
an operation that allows them to change the malleable part:
functions : mangle /2
equations : mangle ( sign (m ,r , sk ) , repnew )= sign (m , repnew , sk )
Malleability: Model for malleable signature schemes.
This additional capability enables the adversary, given a single
signature, to produce an arbitrary number of different ones, that
all verify under the same public key and message.
Using this model, we analyse STS-ISO. Now the property of
strong session agreement fails, as the adversary can alter a signature
whilst it is in flight, but both parties believe it is valid. Consequently
one party accepts a message which was not transmitted by the other,
breaking agreement.
Unlike the other properties in this section, malleability has long
been accepted as problematic behaviour, leading to the introduction
of a stronger definition of signature scheme security, Strong Exis-
tential Unforgeability under an Adaptive Chosen Message Attack
(SEF-CMA) [22, 43]: instead of finding a new message with corre-
sponding signature, the adversary just has to find a new valid pair,
and may reuse a queried message. Signatures with SEF-CMA are not
malleable, and implementing STS-ISO with such a scheme would
provide strong session agreement. In §3.5 we analyse a protocol
which achieves this without requiring a SEF-CMA scheme.
3.3 Re-signing
As we saw in §2.2, traditional symbolic models have considered
the distinction between message-revealing and message-hiding
signatures. However, in some signatures schemes a signature over
a message reveals the hash of that message, preserving secrecy
but allowing an adversary to re-sign the hashed messaged under
their own key. We model this by providing the adversary with the
explicit capability to re-sign signatures, even if the signature is
message-hiding and the message is secret.








rule : ReSign
[ In ( sign (m ,r , sk1 ) , sk2 ) ]
-->
[ Out ( sign (m ,r , sk2 )) ]
Re-sign: Model for re-signing an unknown message.
To illustrate the implications, we introduce the following syn-
thetic variant of STS-MAC which we call STS-KSIG and present in
Figure 4. Here, identities are fixed in the first message. However, the
protocol has dropped the MAC value in favour of directly signing
the secret value.
Analysing this protocol with the key substitution model finds
no attacks, since the responder’s view initiator’s key is fixed before
the initiator discloses a signature. However, when we add the re-
signing equation we immediately discover an UKS attack, as the
adversary can form a new signature on the secret key from Blake’s
response, consequently claiming Blake’s DH public key as their own,
despite not knowing the shared key. Much like the UKS attacks on
STS-MAC and and STS-ISO, this attack violates identity agreement.
3.4 Colliding Signatures
Stern et al. [71] give an algorithm to produce a signature and public
ECDSA key against which two messages of the adversary’s choice
both verify. Ed25519 allows this behaviour to a much greater de-
gree: selecting signature and public key values from the order-eight
Session 9D: SignaturesCCS ’19, November 11–15, 2019, London, United Kingdom2170skb, certb
Blake
y ←$ Zp
ska, certa
Alex
x ←$ Zp
ska, certa
Alex
x ←$ Zp
дx , certa
дy , certb , Sigskb
(дxy , дx , дy)
(дxy , дx , дy)
Sigska
K :=дxy
дx ,certa
(cid:16)
(дxy , дx , дy)(cid:17)
(дxy , дx , дy)(cid:17)
Sigskb
(cid:16)
дy , certb , aencpka
aencpkb
Sigska
K :=дxy
skb, certb
Blake
y ←$ Zp
Figure 4: Sketch of STS-KSIG, a synthetic variant of STS-MAC which
fixes the identities in the first message but drops the MAC in favour
of signing the secret.
Figure 5: Sketch of STS-SCRYPT, which patches STS-KSIG by asym-
metrically encrypting the signatures.
3.5 Fixing STS-MAC
An alternative to STS-ID was proposed in [38], which we refer to as
STS-KDF and show in Figure 6. STS-KDF works just like STS-MAC
but then uses a Key Derivation Function (KDF) to bind the shared
key to the identities of the participants, KDF(дxy, ida, idb), instead
of using only the shared Diffie-Hellman secret дxy.
ska, certa
Alex
x ←$ Zp
skb, certb
Blake
y ←$ Zp
дx
(cid:122)(cid:32)(cid:32)(cid:32)(cid:32)(cid:32)(cid:32)(cid:32)(cid:32)(cid:32)(cid:32)(cid:32)(cid:32)(cid:32)(cid:125)(cid:124)(cid:32)(cid:32)(cid:32)(cid:32)(cid:32)(cid:32)(cid:32)(cid:32)(cid:32)(cid:32)(cid:32)(cid:32)(cid:32)(cid:123)
(cid:122)(cid:32)(cid:32)(cid:32)(cid:32)(cid:32)(cid:32)(cid:32)(cid:32)(cid:32)(cid:32)(cid:32)(cid:32)(cid:32)(cid:125)(cid:124)(cid:32)(cid:32)(cid:32)(cid:32)(cid:32)(cid:32)(cid:32)(cid:32)(cid:32)(cid:32)(cid:32)(cid:32)(cid:32)(cid:123)
σb
(дx , дy), MACдxy (σb)
Sigskb
σa
(дx , дy), MACдxy (σa)
дy , certb ,
certa ,
Sigska
K :=KDF(дxy, ida, idb)


subgroup leads to verification passing for any message with high
probability. The design paper for Ed25519 [31, Page 7] explicitly
notes this behaviour and argues it is not problematic, while imple-
mentations are split: LibSodium rejects low order elements [60],
but Go’s standard library currently accepts them [16].
Definition. We say a signature scheme has non-colliding signa-
tures if it is computationally infeasible for an adversary to produce a
public key and signature combination such that verification of more
than one message succeeds with non-negligible probability. I.e., it is
infeasible to select private and public keys and a signature, sk, pk, s,
such that there exist messages m1, m2, for which Vf(s, m1, pk) = true
and Vf(s, m2, pk) = true.
Colliding signatures violate two implicit properties that protocol
designers sometimes rely on:
(i) if a signature verifies against a particular public key and mes-
sage, then the signer knew the message that was signed; and
(ii) for a given signature and public key, there exists a unique
message which will verify under it.


functions : weak /1
equations : verify ( sign (m1 ,r , weak (x)) ,m2 , pk ( weak (x))) = true
Colliding Signatures: Model for colliding signatures.
This model allows for the worst case behaviour, where a partic-
ular signature and public key will verify for any message without
requiring the adversary to pick the messages they wish to collide in
advance. We consider a (synthetic) variant of the previous protocol
where the signatures are encrypted under the recipient’s public key,
dubbed STS-SCRYPT and shown in Figure 5, using the equational
theory for colliding signatures. STS-SCRYPT patches STS-KSIG
to prevent the adversary from re-signing a message; as well, the
key substitution equations cannot be applied as there is no visible
signature for the adversary to steal.
However, running Tamarin with our colliding signature equa-
tion reveals an attack. The adversary can simply register a colliding
public key and asymmetrically encrypt their own colliding signa-
ture. The resulting value will verify with high probability, even
though the adversary does not know the message being signed.
Figure 6: Sketch of STS-KDF [38], which patches STS-MAC by in-
cluding the identities of the communicating parties in the KDF.
Noting that KDFs were poorly understood (at the time), the au-
thors explicitly recommended using STS-ID over STS-KDF. It has
been nearly two decades since their paper was published and we
can now say that KDFs have stood the test of time. We analyse
STS-KDF in Tamarin, allowing the adversary to use all of the new
properties we have discussed in the previous section and find that
Tamarin proves that all three properties hold, making this protocol
the only STS variant we have considered which satisfies all three
security requirements (in this signature model) whilst only using
EUF-CMA signatures. However, can we be sure no additional sig-
nature equations exist which will break this protocol? We return
to this question in §4.
Session 9D: SignaturesCCS ’19, November 11–15, 2019, London, United Kingdom21713.6 Summary
We summarise our analysis results in Table 2. We note that the
traditional symbolic model fails to find any of the attacks we have
discussed here. Our attack finding models only slightly increase
running times, which implies the approach is tractable. This is
better than we expected, considering the additional behaviours that
Tamarin must consider, and that we did not introduce any new
heuristics for this model.
We have seen several properties of signature schemes, none
of which are implied by EUF-CMA, the traditional (and still most
common) definition of signature scheme security, nor are they the
result of implementation mistakes. In practice, many signature
schemes in fact do not meet these properties: in Table 1 we gave
a list of widely-used signature schemes and whether the subtle
behaviours are present.
In contrast, the existing definitions of symbolic signatures in
current tools implicitly assume all of these properties hold, which
means that they cannot discover the corresponding attacks. To
remedy this, we presented symbolic models for the absence of these
properties, which enable finding those “invisible” attacks.
Full sources to all of our models are available at [58].
4 IMPROVED SYMBOLIC MODEL FOR
VERIFICATION
In the previous section, we characterised a number of behaviours
not captured by the traditional symbolic signature model and re-
paired the deficiency. However, each improvement is ad-hoc, de-
signed to only capture a known behaviour, and provides no as-
surance that further, more subtle, behaviour has not been omit-
ted. Thus, while the models in the previous section are extremely
effective for attack finding, they raise the obvious question for
verification: did we model enough, or do we miss more attacks?
In this section, we address this through the development of an
entirely new symbolic model for the verification algorithm of digital
signatures, directly inspired by the standard computational security
definition for signatures and which we call Symbolic Verification of
Signatures (SVS). It is a symbolic model for signature verification
that makes minimal assumptions, relying only on the implications
of existential unforgeability.
4.1 Specification
Revisiting the definitions of correctness and forgery resistance from
§2.1, we note the behaviour of the verification function is specified
only when the public key is honestly generated. To reiterate, the
first requirement is to accept correctly generated signatures for
honest public keys:
∀pk, sk, m ∈ M : (pk, sk) ← gen()
⇒ verify(sign(sk, m), m, pk) = true
The second implies that if a signature can be verified with an hon-
estly generated public key for some message m, then m and the
matching signing key were previously used to sign:
∀pk, sk, m ∈ M, s : (pk, sk) ← gen()
∧ verify(s, m, pk) = true ⇒ previously: sign(sk, m)
We note that whereas sign can be a probabilistic algorithm, verify