straight-forward fashion.
2In this paper only this speciﬁc proof of a representation is
needed.
The Functionality Maintains a Private State:
• Two commitment maps comm0, comm1 containing the
committed (key, value) pairs of P0, P1 respectively.
• A binary variable commit initialized to true.
Commit Functionality:
• On message (commit, (k0,j0 , v0,j0 )) from party P0:
– If commit = true: add (k0,j0 , v0,j0 ) to comm0
else: abort.
• On message (commit, (k1,j1 , v1,j1 ) from party P1:
– If commit = true: add (k1,j1 , v1,j1 ) to comm1
else: abort.
Comparison Functionality:
• On message (compare, (v0,j0 , k0,j0 , k1,j1 , σ)) from P0
and message(cid:0)compare, (v(cid:48)
0,j0 , σ(cid:48))(cid:1) from P1:
1,j1 , k(cid:48)
1,j1 , k(cid:48)
– Set commit = false.
– If k0,j0 (cid:54)= k(cid:48)
– If σ (cid:54)= σ(cid:48) ∨ σ /∈ {0, 1} ∨ σ(cid:48) /∈ {0, 1}: abort.
– If comm0[k0,j0 ]
0,j0 ∨ k1,j1 (cid:54)= k(cid:48)
(cid:17)
(cid:16)
1,j1 ] is not a commitment to v(cid:48)
is not a commitment to v0,j0 or
1,j1 : abort.
to Pσ and (⊥) to Pσ.
comm1[k(cid:48)
else: return
1,j1 : abort.
?= v(cid:48)
v0,j0
1,j1
Figure 1: Ideal Functionality FV P ET for VPET.
2.5 Pedersen Commitment Scheme
The commitment scheme by Pedersen is perfectly hiding
and computationally binding under the DL assumption [46].
Commitment to x ∈ Z∗
q , Cx = gx · hr
q : r ←r Z∗
Decommitment: Reveal x, r.
3. VERIFIABLE PRIVATE EQUALITY
TEST (VPET)
two parties P0 and
In the following we consider
P1 which each hold a map,
a collection of
i.e.,
(key, value) pairs, as input. We denote these maps
as M0 = ((k0,0, v0,0), . . . , (k0,n0 , v0,n0 ))
for P0 and as
M1 = ((k1,0, v1,0), . . . , (k1,n1 , v1,n1 )) for P1 where n0, n1 are
the largest indices in the respective maps (i.e., the maps
have size n0 + 1 and n1 + 1). The values vδ,jδ (δ ∈ {0, 1}
and 0 ≤ jδ ≤ nδ) in the maps are conﬁdential. All keys kδ,jδ
are public and are required to be unique.
In this setting, our goal is to enable both parties to per-
form an arbitrary number of consecutive comparisons (i.e.,
equality tests) of any arbitrary pair of values v0,j0 , v1,j1 while
guaranteeing security in the presence of malicious adver-
saries. In addition, we aim for a solution which is symmetric,
i.e., for each comparison both parties can jointly select one
party (P0 or P1) which learns the result of the comparison.
As we will see in Section 4, this in particular allows for the
construction of higher-level protocols which are mutual, i.e.,
in which both parties learn the result.
Existing solutions for PET can be used to securely test two
values for equality in a privacy-preserving manner. However,
when considering multiple, consecutive comparisons of val-
ues in ﬁxed maps, securing the individual comparisons alone
Party P0 with Input
M0 = ((k0,0, v0,0), . . . , (k0,j0 , v0,j0 ), . . . , (k0,n0 , v0,n0 )
for all (k0,j0 , v0,j0 ) ∈ M0:
q
r0,j0 ←r Z∗
C0,j0 = gv0,j0 · hr0,j0
πC0,j0
α0,j0 = gr0,j0 ∧ C0,j0 = gv0,j0 · hr0,j0 )
= ZKREP ((r0,j0 , v0,j0 ) |
Party P1 with Input
M1 = ((k1,0, v1,0), . . . , (k1,j1 , v1,j1 ), . . . , (k1,n1 , v1,n1 ))
for all (k1,j1 , v1,j1 ) ∈ M1:
q
r1,j1 ←r Z∗
C1,j1 = gv1,j1 · hr1,j1
πC1,j1
α1,j1 = gr1,j1 ∧ C1,j1 = gv1,j1 · hr1,j1 )
= ZKREP ((r1,j1 , v1,j1 ) |
(cid:68)(cid:16)
(cid:68)(cid:16)
(cid:16)
(cid:16)
k0,j0 ,
C0,j0 , α0,j0 , πC0,j0
comm0 =
−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−→
comm1 =
←−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−
C1,j1 , α1,j1 , πC1,j1
k1,j1 ,
(cid:17)(cid:17)(cid:69)
(cid:17)(cid:17)(cid:69)
If any πC1,j1
⇒ abort.
does not verify:
If any πC0,j0
⇒ abort.
does not verify:
Figure 2: VPET: Commitment Phase
is not suﬃcient. In particular, malicious adversaries may use
incorrect values for a speciﬁc comparison (e.g., values which
correspond to a diﬀerent key or values which are not in the
map altogether).
We address this problem by introducing the novel notion
called Veriﬁable Private Equality Test (VPET) which allows
for comparisons on committed data. In particular, by forcing
P0 and P1 to commit to all their (key, value) pairs, VPET
ensures that both input maps can no longer be modiﬁed
once the ﬁrst comparison has taken place. Furthermore, for
each comparison both parties specify a key k0,j0 (k1,j1 ) to
a value v0,j0 (v1,j1 ) in the other party’s map which enables
both parties to verify that the comparison was indeed carried
out on v0,j0 and v1,j1 .
3.1 Intuition
Our newly designed VPET protocol has two main phases.
First, in the commitment phase, both parties commit to
their respective input maps. This is completed before the
ﬁrst comparison may take place. Second, in the compar-
ison phase, the parties may perform an arbitrary number
of comparisons. Our construction uses Pedersen commit-
ments (see Section 2.5) and each comparison is carried out
as an equality test on blinded values. Furthermore, we em-
ploy light-weight zero-knowledge signatures of knowledge
(see Section 2.4) to prove correctness of the computation
as well as usage of the correct values in each comparison.
Below, we ﬁrst describe the ideal functionality for VPET
(Section 3.2). In Section 3.3 we then detail the actual pro-
tocol. The proofs of protocol correctness and security are
given in Sections 3.4 and 3.5.
3.2
Ideal Functionality for VPET
Figure 1 shows the ideal functionality FV P ET for VPET.
During the commitment phase, both parties P0 and P1
commit to their (key, value) pairs by sending a message
(commit, (k, v)) for each (k, v) in their input map. The ideal
functionality accepts commitments as long as no comparison
has taken place yet, i.e., while commit = true.
In order to request the comparison of v0,j0 with v1,j1
where (k0,j0 , v0,j0 ) ∈ M0 and (k1,j1 , v1,j1 ) ∈ M1 such that
Pσ ∈ {P0, P1} learns the result of the comparison, P0
sends (compare, (v0,j0 , k0,j0 , k1,j1 , σ)) to the ideal function-
ality. Similarly, to request the comparison of v(cid:48)
1,j1 ) ∈ M1 such that
0,j0
where (k(cid:48)
Pσ(cid:48) ∈ {P0, P1} learns the result of the comparison, P1 sends
0,j0 , σ(cid:48)(cid:1)(cid:1) to the ideal functionality.
0,j0 ) ∈ M0 and (k(cid:48)
1,j1 , k(cid:48)
(cid:0)compare,(cid:0)v(cid:48)
1,j1 with v(cid:48)
1,j1 , k(cid:48)
0,j0 , v(cid:48)
1,j1 , v(cid:48)
After receiving a compare message from both parties, the
0,j0 and k1,j1 = k(cid:48)
functionality ﬁrst marks the commitment phase as ﬁnished
by setting commit = false. It then checks whether both
parties agree on the elements which are to be compared, i.e.,
whether k0,j0 = k(cid:48)
1,j1 . Similarly, the func-
tionality checks whether both parties agree on the recipient
of the result, i.e., whether σ = σ(cid:48). Finally, it checks whether
the values v0,j0 , v(cid:48)
1,j1 are consistent, i.e., whether the com-
mitments correspond to the indicated keys k0,j0 , k(cid:48)
1,j1 . If all
checks pass, Pσ learns one bit output out ∈ {0, 1} indicating
1,j1 and Pσ learns nothing (⊥).
whether v0,j0 = v(cid:48)
3.3 Protocol for VPET
Analogous to the ideal functionality, the actual VPET
protocol is implemented in two phases (see Figures 2 and 3).
Commitment Phase.
Party P0 (resp. P1) commits to all its (key, value) pairs
(k1,j1 , v1,j1 ) ∈ M1) by comput-
(k0,j0 , v0,j0 ) ∈ M0 (resp.
ing Pedersen commitments C0,j0 (C1,j1 ) and representations
α0,j0 (α1,j1 ). By constructing a zero-knowledge proof of a
representation, party P0 (P1) proves that it knows the pair
(v0,j0 , r0,j0 ) ((v1,j1 , r1,j1 )), that the commitment was com-
puted correctly, and that α0,j0 = gr0,j0 (α1,j1 = gr1,j1 ). A
vector containing all the keys k0,j0 (k1,j1 ) paired with a cor-
responding tuple of commitments and proofs is sent to the
other party. If the validation of any proof fails, the respective
party aborts the protocol. If all proofs pass, by soundness
of the zero-knowledge proof system the commitments were
computed correctly and the exponents of α0,j0 (α1,j1 ) corre-
spond to the exponents of the h-parts of the commitments.
Comparison Phase.
The protocol given in Figure 3 implements the comparison
(i.e., equality test) of values vσ,jσ and vσ,jσ (corresponding
to keys kσ,jσ , kσ,jσ ) in which party Pσ ∈ {P0, P1} learns the
result. Speciﬁcally, the bit σ determines which party learns
the result. I.e., in case of σ = 0∧ σ = 1, P0 learns the result
and in case of σ = 1 ∧ σ = 0, P1 learns the result.
is
the
4-tuple
For each comparison, the input for party Pσ (party
Pσ)
(vσ,jσ , Cσ,jσ , rσ,jσ , commσ[kσ,jσ ])
((vσ,jσ , Cσ,jσ , rσ,jσ , commσ[kσ,jσ ])). The ﬁrst three ele-
ments refer to the party’s set element, the corresponding
commitment, and the randomness used when committing
to vσ,jσ (vσ,jσ ). The last element is the commitment
corresponding to key kσ,jσ (kσ,jσ ) which has been received
during the commitment phase. The information about
vσ,jσ (vσ,jσ ) contained in commσ[kσ,jσ ] (commσ[kσ,jσ ])
Pσ’s Input (vσ,jσ , Cσ,jσ , rσ,jσ , commσ[kσ,jσ ])
Rσ ←r Z∗
q ,
πσ = ZKDL
(cid:0)Rσ|Xσ = C Rσ
Xσ = (Cσ,jσ )Rσ
(cid:1)
σ,jσ
−−−−−−−−−−−−−−−−−−−−−−→ If πσ does not verify:
Xσ, πσ
Pσ’s Input (vσ,jσ , Cσ,jσ , rσ,jσ , commσ[kσ,jσ ])
⇒ abort
Rσ ←r Z∗
q
X(cid:48)
σ = X Rσ
πσ,1 = ZKEDL
Xσ = C Rσ
σ,jσ
(cid:0)Rσ|X(cid:48)
rσ,jσ
σ
Zσ = Y
πσ,2 = ZKEDL (rσ,jσ|
σ , Xσ = (Cσ,jσ )Rσ , Yσ = hRσ
(cid:17)
σ ∧
σ = X Rσ
∧ Yσ = hRσ
Zσ = Y
rσ,jσ
σ
∧ ασ,jσ = grσ,jσ
(cid:17)
If πσ,1, πσ,2 do not verify:
⇒ abort
· Z
−Rσ
X(cid:48)
σ = X Rσ
σ
−Rσ·rσ,jσ
σ · Y
X(cid:48)(cid:48)
σ = X(cid:48)
σ = X(cid:48)
If X(cid:48)(cid:48)
σ: 1 else: 0
σ
σ
X(cid:48)
←−−−−−−−−−−−−−−−−−−−−−−
σ, Xσ, Yσ, Zσ, πσ,1, πσ,2
Figure 3: VPET: Comparison Phase for values with keys kσ,jσ , kσ,jσ .
enables Pσ (Pσ) to verify that vσ,jσ (vσ,jσ ) was used in the
comparison.
As part of the comparison, Pσ ﬁrst blinds Cσ,jσ with a
random element Rσ, creates a proof πσ, and sends the re-
sulting value Xσ and proof πσ to Pσ. The guarantees of
πσ are two-fold. First, it ensures that the blinding was com-
puted correctly. Second, it enables Pσ to verify that Pσ used
vσ,jσ , since Pσ knows the correct Cσ,jσ from the commitment
phase.
If the proof veriﬁes, Pσ chooses random Rσ and blinds
both its own value Cσ,jσ and the received Xσ using Rσ. Pσ