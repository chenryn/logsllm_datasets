that provided a satisfying subset of the features described
in Section 3.1.
3.3
Sbi: A Multi-Use Bidirectional Scheme
3.4
We now present a new proxy re-signature scheme, denoted
Sbi, using the short signatures due to Boneh, Lynn, and
Shacham [10, 9].
(Recall that by “short” we mean that
signatures of 171 bits have roughly the same security as 1024
bit RSA signatures [10].) This scheme requires a bilinear
map, as discussed in Section 2, where the map e : G1×G1 →
G2 operates over two groups G1, G2 of prime order q =
Θ(2k). The global parameters are (e, q, G1, G2, g, H), where
g generates G1 and H is a hash function from arbitrary
strings to elements in G1 as deﬁned in [7].
• Key Generation (KeyGen): On input the security
parameter 1k, select a random a ∈ Zq, and output the
key pair pk = ga and sk = a.
• Re-Signature Key Generation (ReKey): On input
two secret keys sk A = a, sk B = b (the public keys are
not required for this algorithm), output the resignature
key rk A→B = b/a (mod q).
(Observe that the key rk A→B = b/a can be securely
generated in several ways, depending on the applica-
tion. For example, generation of rk A→B may run as
follows: (1) the proxy sends a random r ∈ Zq to Al-
ice, (2) Alice sends r/a to Bob, (3) Bob sends rb/a
to the proxy, and (4) the proxy recovers b/a. We are
clearly assuming private and authenticated channels
and no collusion. Bidirectional schemes make no secu-
rity guarantees in the event of collusion.)
• Sign (Sign): On input a secret key sk = a and a
message m, output σ = H(m)a.
• Re-Sign (ReSign): On input a re-signature key rk A→B,
a public key pk A, a signature σ, and a message m,
check that Verify(pk A, m, σ) = 1. If σ does not verify,
output ⊥; otherwise, output σ
• Verify (Verify): On input a public key pk A, a message
A→B .
= σrk
(cid:1)
m, and a purported signature σ, output 1 if e(σ, g) =
e(H(m), pk A) and 0 otherwise.
Proof of the following theorem appears in the full ver-
sion of this paper [3]. Although this scheme is very simple,
proving its security takes some work.
Theorem 3.1
(Security of Sbi). In the random or-
acle model, bidirectional proxy re-signature scheme Sbi is
correct and secure under the Computational Diﬃe-Hellman
(CDH) assumption in G1 (External and Internal Security);
that is, for random g ∈ G1 and x, y ∈ Zq, given (g, gx, gy),
it is hard to compute gxy.
Discussion of Scheme Sbi. This scheme is useful for many
network authentication applications because it is multi-use,
which allows for long signing chains. It is also bidirectional,
which means that the re-signing key rk A→B can be used to
transform Alice’s signatures into Bob’s or vice versa. Bidi-
rectionality is desirable for some applications, but a poten-
tial security risk in others. (The construction of a scheme
that is both multi-use and unidirectional remains an open
problem.) Transparency is guaranteed by the fact that the
signature algorithm is deterministic and, since each user just
stores one signing key, the scheme is also key optimal.
Suni and S
Schemes
∗
uni: Single-Use Unidirectional
We now present two proxy re-signature schemes, denoted
∗
Suni and S
uni respectively. These schemes are unidirectional
since the re-signature key rk A→B can be used to change Al-
ice’s signatures into Bob’s, but not vice versa. The schemes
∗
Suni and S
uni diﬀer in a single feature: In Suni, the re-
signature key is made public or easily computable by any-
∗
one while in S
uni, this key is secret and stored at the proxy.
Applications of unidirectional schemes with both public and
private re-signature keys will be provided in Section 4.
Each signer has a strong and weak secret key associated
to their single public key. The intuition behind the unidi-
rectional schemes is to use the re-signature key to transform
Alice’s signatures computed under her strong secret into sig-
natures computed under Bob’s weak secret. Signatures un-
der any “weak secret” cannot be converted, which makes the
schemes single-use. Notice that we must deal with scenarios
where signatures from several users are converted into sig-
natures from a single user (and vice-versa). This rules out
trivial solutions based on bidirectional schemes with multi-
ple public keys per user.
3.4.1 Suni with Public Re-Signature Key
Our scheme requires a bilinear map, as discussed in Sec-
tion 2, where the map e : G1 × G1 → G2 operates over two
groups G1, G2 of prime order q = Θ(2k). The global param-
eters are (e, q, G1, G2, g, h, H), where g and h are generators
of G1 and H is a hash function from arbitrary strings to
elements in Zq.
• Key Generation (KeyGen): On input the security
parameter 1k, select a random a ∈ Zq, and output the
key pair pk = (ga, h1/a) and sk = a. We think of
sk = a as the “strong” secret, and the value ha as the
“weak” secret.
(Note: a user need only output the second component
h1/a of her public key if she wishes to receive delega-
tions; it does not play a role in signature veriﬁcation.
Also, the second component can be veriﬁed against the
ﬁrst as e(ga, h1/a) = e(g, h).)
• Re-Signature Key Generation (ReKey): On input
a public key pk A = (ga, h1/a) and a secret key sk B =
b, output the re-signature key rk A→B = hb/a. Let
rk A→B be public for this scheme.
• Sign (Sign): On input a secret key sk = a and a
message m, select a random k ∈ Zq, set r = hk, s =
a(H(m||r) + k) (mod q); output the pair σ = (r, s).
We call a signature of this form a ﬁrst-level signature.
Optionally, the signer could chose to output a signa-
ture that could not be re-signed, where the last ele-
ment of σ is set to haH(m||r)+ak instead. We call this
a second-level signature.
• Re-Sign (ReSign): On input a re-signature key rk A→B,
a public key pk A, a (ﬁrst-level) signature σ, and a mes-
sage m, check that Verify(pk A, m, σ) = 1. If σ = (r, s)
does not verify, output ⊥; otherwise, set r
= r and
(cid:1)
s
= (rk A→B)s, and output σ
= (r
, s
(cid:1)
(cid:1)
(cid:1)
(cid:1)
).
• Verify (Verify): On input a public key pk = (pk (1),
pk (2)), a message m, and a purported signature σ =
(r, s) (if σ is a ﬁrst-level signature, set s = hs), output
1 if e(g, s) = e(pk (1), rhH(m||r)) and 0 otherwise.
Proof of the following theorem appears in the full version
of this paper [3].
Theorem 3.2
(Security of Suni). In the random or-
acle model, unidirectional proxy re-signature scheme Suni is
correct and secure under the CDH and 2-DL assumptions
in G1 (External and Internal Security); the latter that given
2
(g, ga, ga
compute a.
∗
uni with Private Re-Signature Key
), for random g ∈ G1 and a ∈ Zq, it is hard to
3.4.2 S
In Suni, re-signature keys are public. This does not render
the system as vulnerable as the BBS scheme, since at least
the delegatee remains secure. For many of the applications
we will shortly discuss in Section 4, our schemes Sbi and
Suni will be suﬃcient. However, it would also be desirable
to have a unidirectional scheme where the proxy key can be
kept private. We brieﬂy propose how one might consider
∗
naturally modifying Suni into a new scheme S
uni to achieve
these properties. The setup and global parameters hold from
Suni. The following algorithms change:
• Re-Signature Key Generation (ReKey
): The re-
signature key is rk A→B = hb/a as before, plus the
proxy stores pk B. The proxy keeps rk A→B private.
∗
• Re-Sign (ReSign
∗
): On input a re-sig. key rk A→B,
a public key pk A, a (ﬁrst-level) signature σ, and a
message m, check that Verify(pk A, m, σ) = 1. If σ =
(r, s) does not verify, output ⊥; otherwise choose a
random w ∈ Zq, set r
=
B )w, and generate a signature proof of knowledge
(pk
(cid:1)
(1)
B (i.e., the
of the discrete logarithm of t
u
(cid:1)
ﬁrst part of Bob’s public key) on message (r
)
using a new global hash function ˆH : {0, 1}∗ → Zq.
= (rk A→B)sw, t
(cid:1)
= r, s
for base pk
, s
, t
(1)
(cid:1)
(cid:1)
(cid:1)
(cid:1)
(cid:1)
(This last step can be eﬃciently done using Schnorr’s
technique [23].) Output σ
= (r
, u
, s
, t
).
(cid:1)
(cid:1)
(cid:1)
(cid:1)
(cid:1)
• Verify (Verify
∗
(cid:1)
u
, and (2) e(g, s
) = e(t
, r
(cid:1)
(cid:1)
(cid:1)
hH(m||r
(cid:2))).
): The veriﬁer now checks: (1) the proof
The scheme S
∗
uni is a natural extension of Suni and we
conjecture its security is based on the same assumptions.
We leave a formal analysis of it as a subject for future work.
∗
Discussion of Schemes Suni and S
uni. The only concep-
tional diﬀerence between these two schemes is that in Suni
the re-signature key is necessarily public (i.e., it is prey to
∗
the Section 3.2 attack), while in S
uni the proxy can keep
the re-signature key private. (The re-randomization added
∗
to ReSign
thwarts this attack.)
Even though the re-signature key rk A→B in Suni is public,
which allows anyone to translate between signatures, it does
not reveal any information about Alice’s (delegatee) signing
keys to anyone (because it was computed by Bob with her
public key). This is important since the delegatee should
not be taking on any security risk. Furthermore, no third
party can use this key to sign arbitrary messages for Bob
(delegator) – and Alice can only recover Bob’s weak secret
hb. This does not give Alice any new signing capability that
she didn’t have before: Alice could sign on behalf of Bob
anyway, either by herself (Suni) or jointly with the proxy
∗
(S
uni). (We stress that Alice won’t be able to generate Bob’s
ﬁrst-level signatures in any case.)
Bob does run the risk, however, that Alice may publish
hb, allowing anyone to produce second-level signatures for
Bob. Yet, such a risk for the delegator seems inevitable.
Both of these schemes are exclusively for single-use appli-
cations (i.e., a signature translated from Alice to Bob cannot
be again translated from Bob to Carol). One such applica-
tion is a company mail server turning employee’s signatures
into a group signature before public release. An interesting
open problem is designing a scheme that is simultaneously
unidirectional and multi-use.
Happily, these schemes are non-interactive since Bob only
needs Alice’s public key to delegate to her (i.e., rk A→B).
One potential drawback is that the original and re-signed
values can be linked; that is, given a ﬁrst-level signature
pair (r, s), the ReSign algorithm produces a new second-level
signature pair (r
. Never-
theless, weak transparency is achieved because the delegator
can also produce second-level signatures from ﬁrst-level ones
due to the fact that he knows the re-signature key.
)) with r = r
) (or (r
, u
, s
, s
, t
(cid:1)
(cid:1)
(cid:1)
(cid:1)
(cid:1)
(cid:1)
(cid:1)
Temporary Delegations (and Revocations). What if Bob
only wishes to allow Alice’s signatures to be turned into his,
via giving rk A→B to the proxy, for the span of one week? If
the proxy is honest, Bob may simply issue it these instruc-
tions. However, if Bob does not fully trust the proxy, is his
only option to change his public key? Fortunately, the an-
swer is no. Applying techniques similar to those by Ateniese
et al. [2] for building temporary re-encryption schemes, we
propose the following change to our schemes. At each time
period i, a trusted party broadcasts a new global parameter
hi ∈ G1, which replaces h(i−1) in the signing, veriﬁcation,
and re-signature key generation algorithms. This method
eﬀectively revokes all re-signature keys at each time period,
but takes only a single broadcast value and leaves all certiﬁed
public keys valid.
4. APPLICATIONS
Blaze, Bleumer, and Strauss [5] suggested several interest-
ing applications of proxy re-signatures relating to key man-
agement. We begin by taking a closer look at how proxy
re-signatures can help relieve some of the common key man-
agement headaches. Next, we explore a broader set of ap-
plications and show that proxy re-signatures can be used to
form weak (but easy to manage) group signatures, a space-
eﬃcient proof that a certain path was taken in a graph (e.g.,
a packet followed a prescribed path through the network),
and more.
4.1 Exploring BBS Key Management
In particular, BBS [5] pointed out that proxy re-signatures
can be used to change or add new public key pairs to a sys-
tem without obtaining new certiﬁcates, notably simplifying
key management. Let us explore this idea in more detail.
Certifying Keys is Expensive, Can We Share? Since
certiﬁcation of new public keys is a procedure that can be
expensive and time consuming, using proxy re-signatures is
a way to share existing certiﬁcates. Signatures under new
keys can be transformed into ones that can be veriﬁed with
public keys that are already certiﬁed. Consider also that
)
m
(
A
B