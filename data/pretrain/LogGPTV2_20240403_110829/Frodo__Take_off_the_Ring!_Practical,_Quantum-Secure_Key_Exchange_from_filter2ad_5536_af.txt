2,048
1,022
564
11,288
12,968
4,096
1,824
1,027
564
11,296
12,976
non-post-quantum key exchange at the 128-bit classical security level. The compiler is gcc version
4.8.4 and software is compiled for the x86_64 architecture.
We integrated our C implementation of our LWE protocol, as well as all the other implementa-
tions, into OpenSSL v1.0.1f3 following Stebila’s OpenSSL v1.0.1f fork for the R-LWE experiments in
[14], to allow for comparison of all algorithms in the same context and to facilitate the HTTPS per-
formance evaluation.4 Our implementation includes a common API for post-quantum key exchange
methods, making it easier to add and compare new candidates as they become available. Finally,
our implementation and evaluation uses AES256 GCM authenticated encryption and SHA384 to
ensure post-quantum security for symmetric key operations.
We use a common hardware platform for all measurements. Standalone cryptographic opera-
tions were measured on the same computer, which acted as the server for measuring speed of TLS
connections. This is an n1-standard-4 Google Cloud VM instance5 with 15 GB of memory, which
has 4 virtual CPUs; in our instance, each of these was implemented as a single hardware hyper-
thread on a 2.6GHz Intel Xeon E5 (Sandy Bridge). Clients for measuring the throughput of TLS
connections were run on an n1-standard-32 Google Cloud VM instance with 120 GB of memory
and 32 virtual CPUs, which ensured that we could fully load the server. Although some implemen-
tations included optimizations using the AVX2 instruction set, the cloud servers we used did not
support AVX2; while vectorization of matrix operations using AVX2 will improve performance, our
results may be more indicative of performance on widespread non-AVX2 hardware.
19
7.1 Standalone cryptographic operations
Table 4 reports the performance of standalone post-quantum cryptographic operations, as well as
standard cryptographic operations for comparison. We obtained these results by integrating their
implementations into OpenSSL as discussed above, and in particular using the openssl speed
command. In the table, Alice0 denotes Alice’s initial ephemeral key and message generation (e.g.,
Alice’s operations up to and including her message transmission in Figure I); Bob denotes Bob’s
full execution, including ephemeral key and message generation and key derivation (all of Bob’s
operations in Figure I); and Alice1 denotes Alice’s ﬁnal key derivation (e.g., Alice’s operations
upon receiving Bob’s message in Figure I).
Discussion. Microbenchmarks of LWE-based key exchange are very promising when compared
with other protocols. At approximately 1.3ms for each party, the runtime of Frodo is orders of
magnitude faster than SIDH, faster than NTRU (on the server side), about 1.8× slower than ECDH
nistp256, and about 9× slower than R-LWE (NewHope). While there is a large gap between
the microbenchmark performance of LWE against R-LWE, we recall that LWE has the increased
conﬁdence of using generic rather than ideal lattices, and we will observe in the next section that
this gap is signiﬁcantly narrowed when measured in an application that uses TLS. Additionally,
we observe that the runtime of our paranoid parameters requires a slight (between 14% and 19%)
overhead in bandwidth and compute in return for much higher security.
Our modiﬁcations to openssl speed allowed us to benchmark the impact of freshly generating
the matrix A for each connection versus using a precomputed A. For our recommended parameters,
the time to generate A was 0.54ms ± 0.01, which is 42% of Alice’s total runtime (similarly for Bob).
This is substantial, and means that optimization of this step is valuable (see §6 for more details);
our original naive implementation was several times slower. This also highlights the beneﬁt that
could come from caching A: a busy TLS server might reuse the same A for an hour or a day while
still limiting the risk of global all-for-the-price-of-one attacks.
Embedded system. We also performed micro-benchmarks on the low-cost, community-supported
BeagleBone Black development platform which has a AM335x 1GHz ARM Cortex-A8. We mea-
sured the standalone functionality using the GNU/Linux perf infrastructure with gcc version 4.6.3;
measurements are averages over thousands of runs. For the Frodo recommended parameters, Alice0
takes 77.5M cycles; Bob takes 80.22M cycles; and Alice1 takes 1.09M cycles.
7.2 HTTPS connections
Table 5 reports the performance of a TLS-protected web server using the various key exchange
mechanisms, following the methodology of Gupta et al. [35] that was used by Bos et al.
[14].
The methodology reports performance with HTTP payloads of 4 diﬀerent sizes (1 byte, 1 KiB,
10 KiB, and 100 KiB), to demonstrate the diminishing importance of key exchange performance on
TLS performance as payload size increases in realistic workloads. For each key exchange primi-
tive, we measured performance using RSA signatures (with 3072-bit keys) and ECDSA signatures
3https://www.openssl.org/
4While §5.3 notes that moving the server’s signature to later in the handshake is required to achieve
provable security of the full LWE-based ciphersuite under the decision LWE assumption, our prototype
implementation does not make this complex change in OpenSSL as the purpose of our implementation is to
measure performance, which would be the same regardless of where the signature is in the handshake. This
would be required for deployed implementations to match the security theorem; fortunately current TLS 1.3
drafts include this change, so eventually TLS 1.3 implementations will provide this.
5https://cloud.google.com/compute/docs/machine-types#standard_machine_types
20
Figure V: A typical curve describing latency vs. throughput (connections/sec.) measured across
diﬀerent loads on the HTTPS server. Scales of axes vary with ciphersuites.
Ciphersuite
Key exchange
ECDHE
BCNS
NewHope
NTRU
Sig.
ECDSA
RSA
ECDSA
RSA
ECDSA
RSA
ECDSA
RSA
1B
1187 ± 61
814 ± 3.5
922 ± 89
722 ± 4.2
1616 ± 166
983 ± 61
725 ± 3.4
553 ± 20
Frodo Recomm.
ECDSA 923 ± 49
703 ± 4.2
RSA
Connections/second
Connection time (ms) Handshake
w/load
size (B)
1 KiB
1107 ± 103
810 ± 5.2
10 KiB 100 KiB w/o load
14.2 ± 0.25
16.1 ± 0.89
961 ± 68
710 ± 12
1088 ± 103
790 ± 5.9
907 ± 83
710 ± 9.7
1413 ± 39
970 ± 67
723 ± 8.8
534 ± 7.3
892 ± 59
700 ± 6.2
893 ± 16
716 ± 2.7
1351 ± 148
949 ± 36
708 ± 17
548 ± 1.4
819 ± 83
638 ± 3.7
985 ± 77
771 ± 41
612 ± 31
512 ± 4.9
18.8 ± 0.48
20.5 ± 0.51
12.1 ± 0.12
13.1 ± 1.5
20.0 ± 0.96
19.9 ± 0.91
878 ± 70
698 ± 1.8
843 ± 68
635 ± 16
18.3 ± 0.5
20.7 ± 0.6
Hybrid ciphersuites
22.2
24.7
35.8
36.9
18.6
20.0
27.2
29.6
31.5
32.7
37.7
40.2
25.2
28.0
34.3
36.8
36.4
39.9
1,264
1,845
9,455
9,964
5,005
5,514
3,181
3,691
23,725
24,228
9,595
10,177
5,151
5,731
3,328
3,908
23,859
24,439
BCNS+ECDHE
NewHope+ECDHE
NTRU+ECDHE
Frodo+ECDHE
ECDSA
RSA
ECDSA
RSA
ECDSA
RSA
ECDSA
RSA
736 ± 19
567 ± 1.7
1095 ± 54
776 ± 1.4
590 ± 1.0
468 ± 0.3
735 ± 12
552 ± 0.5
735 ± 3.8
567 ± 1.0
1075 ± 58
775 ± 3.7
589 ± 1.0
467 ± 0.4
716 ± 1.5
551 ± 1.9
728 ± 6.4
559 ± 2.4
1017 ± 16
765 ± 2.4
578 ± 3.2
456 ± 3.6
701 ± 20
544 ± 1.6
664 ± 7.3
503 ± 3.2
776 ± 1.4
686 ± 8.6
539 ± 5.4
424 ± 24
667 ± 7
516 ± 1.8
23.1 ± 0.28
24.6 ± 0.09
16.5 ± 0.79
18.13 ± 0.85
22.5 ± 0.2
24.2 ± 0.21
22.9 ± 0.5
24.5 ± 0.3
Table 5: Performance of Apache HTTP server using post-quantum key exchange, measured in