You should run VACUUM periodically to clean out expired rows. For tables that are heavily
modified, it is useful to run VACUUM every night in an automated manner. For tables with few
134 CHAPTER11. PERFORMANCE
test=> EXPLAIN SELECT customer_id FROM customer;
NOTICE: QUERY PLAN:
Seq Scan on customer (cost=0.00..15.00 rows=1000 width=4)
EXPLAIN
Figure11.3: UsingEXPLAIN
modifications, VACUUM should be run less frequently. The command exclusivelylocks the table
whileprocessing.
You can run VACUUM in two ways. Using VACUUM alone vacuums all tables in the database.
UsingVACUUMtablenamevacuumsasingletable.
11.5 VACUUM ANALYZE
TheVACUUMANALYZEcommandresemblesVACUUM,butalsocollectsstatisticsabouteachcolumn’s
proportion of duplicate values and the maximum and minimum values. POSTGRESQL uses this
information when decidinghow to efficientlyexecutecomplex queries. You should run VACUUM
ANALYZEwhenatableisinitiallyloadedandwhenatable’sdatachangesdramatically.
TheVACUUMmanualpageshowsalloftheVACUUMoptions.
11.6 EXPLAIN
EXPLAIN causesPOSTGRESQL to displayhow a query will be executed, rather than executingit.
Asanexample,Figure11.3showsaSELECTquerypreceededbythewordEXPLAIN. Inthefigure,
POSTGRESQL reports a sequential scan will be used on customer, meaning it will read the entire
table. The cost is an estimate of the work required to executethe query (the numbers are only
meaningfulforcomparison). Therowsindicatesthenumberofresultrowsexpected. Thewidthis
thenumberofbytesperrow.
Figure11.4 showsmoreinterestingexamplesof EXPLAIN. ThefirstEXPLAINshowsaSELECT
with the restriction customer_id = 55. The command reports another sequential scan, but the
restriction causesPOSTGRESQL to estimate that ten rows will be returned. A VACUUM ANALYZE
commandisthenrun,causingthenextquerytoproperlyestimatethatonerow willbereturned
insteadoften. Anindexiscreated,andthequeryrerun. Thistime,anindexscanisused,allowing
POSTGRESQLtogodirectlytotherowswherecustomer_idequals55. ThenextEXPLAINshowsa
querywithnoWHERErestriction. POSTGRESQLrealizesthattheindexisuselessandperformsa
11.6. EXPLAIN 135
test=> EXPLAIN SELECT customer_id FROM customer WHERE customer_id = 55;
NOTICE: QUERY PLAN:
Seq Scan on customer (cost=0.00..22.50 rows=10 width=4)
EXPLAIN
test=> VACUUM ANALYZE customer;
VACUUM
test=> EXPLAIN SELECT customer_id FROM customer WHERE customer_id = 55;
NOTICE: QUERY PLAN:
Seq Scan on customer (cost=0.00..17.50 rows=1 width=4)
EXPLAIN
test=> CREATE UNIQUE INDEX customer_custid_idx ON customer (customer_id);
CREATE
test=> EXPLAIN SELECT customer_id FROM customer WHERE customer_id = 55;
NOTICE: QUERY PLAN:
Index Scan using customer_custid_-
idx on customer (cost=0.00..2.01 rows=1 width=4)
EXPLAIN
test=> EXPLAIN SELECT customer_id FROM customer;
NOTICE: QUERY PLAN:
Seq Scan on customer (cost=0.00..15.00 rows=1000 width=4)
EXPLAIN
test=> EXPLAIN SELECT * FROM customer ORDER BY customer_id;
NOTICE: QUERY PLAN:
Index Scan using customer_custid_-
idx on customer (cost=0.00..42.00 rows=1000 width=4)
EXPLAIN
Figure11.4: MorecomplexEXPLAINexamples
136 CHAPTER11. PERFORMANCE
test=> EXPLAIN SELECT * FROM tab1, tab2 WHERE col1 = col2;
NOTICE: QUERY PLAN:
Merge Join (cost=139.66..164.66 rows=10000 width=8)
-> Sort (cost=69.83..69.83 rows=1000 width=4)
-> Seq Scan on tab2 (cost=0.00..20.00 rows=1000 width=4)
-> Sort (cost=69.83..69.83 rows=1000 width=4)
-> Seq Scan on tab1 (cost=0.00..20.00 rows=1000 width=4)
EXPLAIN
Figure11.5: EXPLAINexampleusingjoins
sequentialscan. ThelastqueryhasanORDERBYthatmatchesanindex,soPOSTGRESQLusesan
indexscan.
Even more complex queries can be studied using EXPLAIN, as shown in Figure 11.5. In this
example, tab1 and tab2 are joined on col1 and col2. Each table is sequentially scanned, and the
resultsorted. Thetworesultsarethenmergejoinedtoproduceoutput. Italsosupportshashjoin
andnestedloopjoinmethods. Itchoosesthejoinmethoditbelievestobethefastest.
11.7 Summary
A variety of tools are available to speed up POSTGRESQL queries. Although their use is not
required,theycanproducehugeimprovementsinqueryspeed. Section 20.8outlinesmoresteps
thatdatabaseadministratorscantaketoimproveperformance.
Chapter 12
Controlling Results
When a SELECT query is issued in psql, it travels to the POSTGRESQL server, is executed, and
theresultthen sentback to psql to be displayed. POSTGRESQLallows you to exertfine-grained
controloverwhichrowsarereturned. Thischapterexploresthemethodsavailabletoachievethis
goal.
12.1 LIMIT
The LIMIT and OFFSET clauses of SELECT allow the user to specify which rows to return. For
example, suppose customer has 1,000 rows with customer_id values ranging from 1 to 1,000.
Figure 12.1 shows queries using LIMIT and LIMIT…OFFSET. The first query sorts the table by
customer_idandusesLIMITtoreturnthefirstthreerows. Thesecondqueryissimilar,exceptthat
itskipstothe997throwbeforereturningthreerows.
Notice that each query uses ORDER BY. Although this clause is not required, LIMIT without
ORDERBYreturnsrandomrowsfromthequery,whichwouldbeuseless.
LIMITimprovesperformancebyreducingthenumberofrowsreturnedtotheclient. Ifanindex
matches the ORDER BY, sometimes LIMIT can evenproduce results without executingthe entire
query.
12.2 Cursors
Ordinarily, all rows generated by a SELECT are returned to the client. Cursors allow a SELECT
querytobenamed,andindividualresultrowsretrievedasneededbytheclient.
Figure12.2showsanexampleofcursorusage. Notethatcursoractivitymusttakeplaceinside
atransaction. Todeclarecursors,youuseDECLARE…CURSORFORSELECT….Theresultrowsare
retrieved using FETCH. MOVE allows the user to move the cursor position. CLOSE releases all
137
138 CHAPTER12. CONTROLLINGRESULTS
test=> SELECT customer_id FROM customer ORDER BY customer_id LIMIT 3;
customer_id
-------------
1
2
3
(3 rows)
test=> SELECT customer_id FROM customer ORDER BY customer_-
id LIMIT 3 OFFSET 997;
customer_id
-------------
998
999
1000
(3 rows)
Figure12.1: Examplesof LIMITandLIMIT/OFFSET
rows stored in the cursor. See the DECLARE, FETCH, MOVE, and CLOSE manual pages for more
information.
12.3 Summary
LIMIT specifies which rows to return in the result. Cursors allow dynamic row retrieval. The
differencebetweenLIMITandcursorsisthatLIMITspecifiestherowsaspartoftheSELECT,while
cursors allow dynamic fetching of rows. Both LIMIT and cursors offer new ways to tailor your
queriessothatyouobtainexactlythedesiredresults.
12.3. SUMMARY 139
test=> BEGIN WORK;
BEGIN
test=> DECLARE customer_cursor CURSOR FOR
test-> SELECT customer_id FROM customer;
SELECT
test=> FETCH 1 FROM customer_cursor;
customer_id
-------------
1
(1 row)
test=> FETCH 1 FROM customer_cursor;
customer_id
-------------
2
(1 row)
test=> FETCH 2 FROM customer_cursor;
customer_id
-------------
3
4
(2 rows)
test=> FETCH -1 FROM customer_cursor;
customer_id
-------------
3
(1 row)
test=> FETCH -1 FROM customer_cursor;
customer_id
-------------
2
(1 row)
test=> MOVE 10 FROM customer_cursor;
MOVE
test=> FETCH 1 FROM customer_cursor;
customer_id
-------------
13
(1 row)
test=> CLOSE customer_cursor;
CLOSE
test=> COMMIT WORK;
COMMIT
Figure12.2: Cursorusage
Chapter 13
Table Management
ThischaptercoversavarietyoftopicsinvolvedinmanagingSQLtables.
13.1 Temporary Tables
Temporary tables are short-lived tables—they exist only for the duration of a database session.
Whenadatabasesessionterminates,itstemporarytablesareautomaticallydestroyed. Figure13.1
illustratesthis concept. In the figure, CREATETEMPORARYTABLEcreatesa temporary table. On
psql exit, the temporarytable is destroyed. Restartingpsql revealsthat thetemporary tableno
longerexists.
Temporary tables are visible only to the session that creates them; they remain invisible to
otherusers. Infact,severaluserscancreatetemporarytableswiththesamename,andeachuser
will see only his version of the table. (See Table 13.1 for an example.) Temporary tables even
maskordinarytableswiththesamename.
TemporarytablesareidealforholdingintermediatedatausedbythecurrentSQLsession. For
example, suppose you need to do many SELECTs on the result of a complex query. An efficient
strategyistoexecutethecomplexqueryonce,thenstoretheresultinatemporarytable.
Asanexample,Figure13.2usesSELECT…INTOTEMPORARYTABLEtocollectallPennsylvania
customersintoatemporarytable. Italsocreatesatemporaryindexonthetemporarytable. The
User1 User2
CREATETEMPORARYTABLEtemptest(colINTEGER) CREATETEMPORARYTABLEtemptest(colINTEGER)
INSERTINTOtemptestVALUES(1) INSERTINTOtemptestVALUES(2)
SELECTcolFROMtemptestreturns1 SELECTcolFROMtemptestreturns2
Table13.1: Temporarytableisolation
141
142 CHAPTER13. TABLEMANAGEMENT
$ psql test
Welcome to psql, the PostgreSQL interactive terminal.
Type: \copyright for distribution terms
\h for help with SQL commands
\? for help on internal slash commands
\g or terminate with semicolon to execute query
\q to quit
test=> CREATE TEMPORARY TABLE temptest(col INTEGER);
CREATE
test=> SELECT * FROM temptest;
col
-----
(0 rows)
test=> \q
$ psql test
Welcome to psql, the PostgreSQL interactive terminal.
Type: \copyright for distribution terms
\h for help with SQL commands
\? for help on internal slash commands
\g or terminate with semicolon to execute query
\q to quit
test=> SELECT * FROM temptest;
ERROR: Relation ’temptest’ does not exist
Figure13.1: Temporarytableauto-destruction
13.2. ALTERTABLE 143
test=> SELECT *
test-> INTO TEMPORARY customer_pennsylvania
test-> FROM customer
test-> WHERE state = ’PA’;
SELECT
test=> CREATE index customer_penna_custid_idx ON customer_-
pennsylvania (customer_id);
CREATE
Figure13.2: Exampleoftemporarytableuse
customer_pennsylvaniatablecanthenbeusedinsubsequentSELECTqueries. Multipleuserscan
performthisoperationatthesametimewiththesametemporarynameswithoutfearofcollision.
13.2 ALTER TABLE
ALTERTABLEallowsthefollowingoperations:
• Renametables
• Renamecolumns
• Addcolumns
• Addcolumndefaults
• Removecolumndefaults
Figure13.3showsexamplesoftheseoptions.
13.3 GRANT and REVOKE
When a tableis created, only its owner can accessit. If the owner wants others to haveaccess,
he must change the table’s permissions using the GRANT command. Figure 13.4 shows some
examplesof theuseof GRANT. AvailableprivilegesareSELECT,UPDATE,DELETE,RULE,andALL.
Accesscanbe granted to individualusers, groups, or everyone(PUBLIC). The rulesfor granting
accessarecoveredinSection13.6.
REVOKEremovespermissionsfromatable. SeetheGRANTandREVOKEmanualpagesformore
information.
144 CHAPTER13. TABLEMANAGEMENT
test=> CREATE TABLE altertest (col1 INTEGER);
CREATE
test=> ALTER TABLE altertest RENAME TO alterdemo;
ALTER
test=> ALTER TABLE alterdemo RENAME COLUMN col1 TO democol;
ALTER
test=> ALTER TABLE alterdemo ADD COLUMN col2 INTEGER;
ALTER
test=> -- show renamed table, renamed column, and new column
test=> \d alterdemo
Table "alterdemo"
Attribute | Type | Modifier
-----------+---------+----------
democol | integer |
col2 | integer |
test=> ALTER TABLE alterdemo ALTER COLUMN col2 SET DEFAULT 0;
ALTER
test=> -- show new default value
test=> \d alterdemo
Table "alterdemo"
Attribute | Type | Modifier
-----------+---------+-----------
democol | integer |
col2 | integer | default 0
test=> ALTER TABLE alterdemo ALTER COLUMN col2 DROP DEFAULT;
ALTER
Figure13.3: ALTERTABLEexamples
13.4. INHERITANCE 145
test=> CREATE TABLE permtest (col INTEGER);
CREATE
test=> -- now only the owner can use permtest
test->
test=> GRANT SELECT ON permtest TO meyers;
CHANGE
test=> -- now user ’meyers’ can do SELECTs on permtest
test=>
test=> GRANT ALL ON permtest TO PUBLIC;
CHANGE
test=> -- now all users can perform all operations on permtest
test=>
Figure13.4: ExamplesoftheGRANTcommand
13.4 Inheritance
Inheritanceallowsthecreationofanewtablerelatedtoanexistingtable. Figure 13.5 showsthe
creation of an inheritedtable. With inheritance,the childtable receivesall of the columns of its
parent,plustheadditionalcolumnsitdefines. Intheexample,child_testgetscol1fromparent_test,
plusthecolumncol2.
Inheritancealsolinksrowsinparentandchildtables. Iftheparenttableisreferencedwithan
asterisk suffix, rows from the parent and all children are accessed. Figure 13.6 shows insertion