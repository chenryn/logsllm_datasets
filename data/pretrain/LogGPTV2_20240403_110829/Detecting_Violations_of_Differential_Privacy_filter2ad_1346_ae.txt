Histogram algorithm requires input queries to differ in at most one
element. Here we evaluate with different scale parameters for the
added Laplace noise.
The correct Histogram algorithm adds independent Lap(1/ϵ0)
noise to each query answer, as shown in Algorithm 9. Since at most
one query answer may differ by at most 1, returning the maximum
value is ϵ0-differentially private [14].
To mimic common mistakes made by novices of differential
privacy, we also evaluate on an incorrect variant where Lap(ϵ0)
noise is used in the algorithm (Algorithm 10). We note that the
incorrect variant here satisfies 1/ϵ0-differential privacy, rather the
claimed ϵ0-differential privacy.
Figures 3a and 3b show the test results for the correct and in-
correct variants respectively. Here, Figures 3a indicates that the
correct implementation satisfies the claimed privacy budgets. For
the incorrect variant, the claimed budgets of 0.2 and 0.7 are cor-
rectly rejected; this is expected since the true privacy budgets are
1/0.2 and 1/0.7 respectively for this incorrect version. Interestingly,
the result indicates that for ϵ0 = 1.5, this algorithm is likely to
be more private than claimed (the line rise around 0.6 rather than
0.000.250.500.751.001.251.501.752.00Testϵ0.00.20.40.60.81.0PValueϵ0=0.2ϵ0=0.7ϵ0=1.50.000.250.500.751.001.251.501.752.00Testϵ0.00.20.40.60.81.0PValueϵ0=0.2ϵ0=0.7ϵ0=1.50.000.250.500.751.001.251.501.752.00Testϵ0.00.20.40.60.81.0PValueϵ0=0.2ϵ0=0.7ϵ0=1.50.000.250.500.751.001.251.501.752.00Testϵ0.00.20.40.60.81.0PValueϵ0=0.2ϵ0=0.7ϵ0=1.5Detecting Violations of Differential Privacy
CCS ’18, October 15–19, 2018, Toronto, ON, Canada
(a) Correct Histogram algorithm with Lap(1/ϵ0) noise.
(b) Incorrect Histogram algorithm with Lap(ϵ0) noise. It
provides more privacy than advertised when ϵ0 ≥ 1 and
less privacy than advertised when ϵ0 < 1.
Figure 3: Results of Histogram algorithm and its variants
Algorithm 11: SVT [28].
input:Q: queries to the database, ϵ0: privacy budget
T : threshold, N : bound of outputting True’s
∆: sensitivity
1 function SVT(Q, T , ϵ0, ∆, N ):
2
3
out ← []
η1 ← Lap(2 ∗ ∆/ϵ0)
˜T ← T + η1
count ← 0
foreach q in Q do
η2 ← Lap(4 ∗ N ∗ ∆/ϵ0)
if q + η2 ≥ ˜T then
out ← True :: out
count ← count + 1
if count ≥ N then
Break
end
out ← False :: out
else
end
end
return (out)
1.5). Again, this is expected since in this case, the variant is indeed
1/1.5 = 0.67-differentially private.
5.3 Sparse Vector
The Sparse Vector Technique (SVT) [18] (see Algorithm 11) is a
powerful mechanism for answering numerical queries. It takes a list
of numerical queries and simply reports whether their answers are
above or below a preset threshold T . It allows the program to output
some noisy query answers without any privacy cost. In particular,
arbitrarily many “below threshold” answers can be returned, but
only at most N “above threshold” answers can be returned. Because
of this remarkable property, there are many variants proposed in
both published papers and practical use. However, most of them
turn out to be actually not differentially private[28]. We test our
tool on a correct implementation of SVT and the major incorrect
variants summarized in [28]. In the following, we describe what
the variants do and list their pseudocodes.
SVT [28]. Lyu et al. have proposed an implementation of SVT
5.3.1
and proved that it satisfies ϵ0-differential privacy. This algorithm
(Algorithm 11) tries to allocate the global privacy budget ϵ0 into
two parts: half of the privacy budget goes to the threshold, and
the other half goes to values which are above the threshold. There
will not be any privacy cost if the noisy value is below the noisy
threshold, in which case the program will output a False. If the
noisy value is above the noisy threshold, the program will output a
True. After outputting a certain amount (N ) of True’s, the program
will halt.
Figure 4a shows the test result for this correct implementation.
All lines rise around the true privacy budget, indicating that our
tool correctly conclude that this algorithm is correct.
iSVT 1 [38]. One incorrect variant (Algorithm 12) adds no
5.3.2
noise to the query answers, and has no bound on the number of
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
True’s that the algorithm can output. This implementation does not
satisfy ϵ0-differential privacy for any finite ϵ0.
This expectation is consistent with the test result shown in Figure
4b: the p-value never rises at any test ϵ. This result strongly indicates
that this implementation with claimed privacy budget 0.2, 0.7, 1.5
is not private for at least any ϵ ≤ 2.2.
0.000.250.500.751.001.251.501.752.00Testϵ0.00.20.40.60.81.0PValueϵ0=0.2ϵ0=0.7ϵ0=1.50.000.250.500.751.001.251.501.752.00Testϵ0.00.20.40.60.81.0PValueϵ0=0.2ϵ0=0.7ϵ0=1.5CCS ’18, October 15–19, 2018, Toronto, ON, Canada
Zeyu Ding, Yuxin Wang, Guanhong Wang, Danfeng Zhang, and Daniel Kifer
Algorithm 12: iSVT 1 [38]. This does not add noise to the
query answers, and has no bound on number of True’s to output
(i.e., N ). This is not private for any privacy budget ϵ0 .
input:Q: queries to the database, ϵ0: privacy budget
Algorithm 14: iSVT 2 [11]. This one has no bounds on number
of True’s (i.e, N ) to output. This is not private for any finite
privacy budget ϵ0.
input:Q: queries to the database, ϵ0: privacy budget
T : threshold, ∆: sensitivity
1 function iSVT1(Q, T , ϵ0, ∆):
2
3
out ← []
η1 ← Lap(2 ∗ ∆/ϵ0)
˜T ← T + η1
// no bounds on number of outputs
foreach q in Q do
// adds no noise to query answers
η2 ← 0
if q + η2 ≥ ˜T then
out ← True :: out
out ← False :: out
else
end
end
return (out)
1 function iSVT3(Q, T , ϵ0, ∆, N ):
2
3
out ← []
η1 ← Lap(4 ∗ ∆/ϵ0)
˜T ← T + η1
count ← 0
foreach q in Q do
// noise added doesn’t scale with N
η2 ← Lap(4 ∗ ∆/(3 ∗ ϵ0))
if q + η2 ≥ ˜T then
out ← True :: out
count ← count + 1
if count ≥ N then
Break
end
out ← False :: out
else
end
end
return (out)
4
5
6
7
8
9
10
11
12
13
14
15
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
4
5
6
7
8
9
10
11
12
13
14
15
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
Algorithm 13: iSVT 3 [27]. The noise added to queries doesn’t
scale with N . The actual privacy cost is 1+6N4
input:Q: queries to the database, ϵ0: privacy budget
T : threshold, N : bound of outputting True’s
∆: sensitivity
ϵ0.
Algorithm 15: iSVT 4 [36]. When the noisy query answer is
above the threshold, output the actual value of noisy query
answer.
input:Q: queries to the database, ϵ0: privacy budget
T : threshold, N : bound of outputting True’s
∆: sensitivity
T : threshold, ∆: sensitivity
1 function iSVT2(Q, T , ϵ0, ∆):
2
3
out ← []
η1 ← Lap(2 ∗ ∆/ϵ0)
˜T ← T + η1
// no bounds on number of outputs
foreach q in Q do
η2 ← Lap(2 ∗ ∆/ϵ0)
if q + η2 ≥ ˜T then
out ← True :: out
out ← False :: out
else
end
end
return (out)
1 function iSVT4(Q, T , ϵ0, ∆, N ):
2
3
out ← []
η1 ← Lap(2 ∗ ∆/ϵ0)
˜T ← T + η1
count ← 0
foreach q in Q do
η2 ← Lap(2 ∗ N ∗ ∆/ϵ0)
if q + η2 ≥ ˜T then
Break
end
out ← False :: out
else
end
end
return (out)
// output numerical value instead of boolean value
out ← (q + η2) :: out
count ← count + 1
if count ≥ N then
iSVT 2 [11]. Another incorrect variant (Algorithm 14) has
5.3.3
no bounds on the number of True’s the algorithm can output. With-
out the bounds, the algorithm will still output True even if it has
exhausted its privacy budget. So this variant is not private for any
finite ϵ0.
Figure 4c indicates this implementation with privacy budget
ϵ0 = 0.2 is most likely not private for any ϵ ≤ 0.5. When ϵ0 = 0.7,
Detecting Violations of Differential Privacy