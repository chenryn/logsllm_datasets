C. Vulnerability Triage
The UBSan violations triggered by SAVIOR could lead to
various consequences and some of them might be harmless.
Therefore, we manually examine all the UBSan violations
triggered by SAVIOR. These violations include those trig-
gered in the 8 programs in Table V and also those from mjs,
catdoc, and c++filt. We do not include the results of
mjs, catdoc, and c++filt in the evaluation above, as
all fuzzers trigger fewer than 10 UBSan violations. A small
difference would result in a big variance in comparison.
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 09:58:09 UTC from IEEE Xplore.  Restrictions apply. 
1590
024681012141618202224Time (hour)020406080100120# of UBSan violationsAFLAFLGOANGORADRILLERQSYMSAVIOR024681012141618202224Time (hour)0200040006000800010000# of covered basic blocksAFLAFLGOANGORADRILLERQSYMSAVIOR024681012141618202224Time (hour)0246810121416# of UBSan violationsAFLAFLGOANGORADRILLERQSYMSAVIOR024681012141618202224Time (hour)010002000300040005000# of covered basic blocksAFLAFLGOANGORADRILLERQSYMSAVIOR024681012141618202224Time (hour)05101520# of UBSan violationsAFLAFLGOANGORADRILLERQSYMSAVIOR024681012141618202224Time (hour)0200400600800# of covered basic blocksAFLAFLGOANGORADRILLERQSYMSAVIOR024681012141618202224Time (hour)0.02.55.07.510.012.515.017.5# of UBSan violationsAFLAFLGOANGORADRILLERQSYMSAVIOR024681012141618202224Time (hour)010002000300040005000# of covered basic blocksAFLAFLGOANGORADRILLERQSYMSAVIOR024681012141618202224Time (hour)020406080100120140# of UBSan violationsAFLAFLGOANGORADRILLERQSYMSAVIOR024681012141618202224Time (hour)02000400060008000# of covered basic blocksAFLAFLGOANGORADRILLERQSYMSAVIOR024681012141618202224Time (hour)0.02.55.07.510.012.515.017.5# of UBSan violationsAFLAFLGOANGORADRILLERQSYMSAVIOR024681012141618202224Time (hour)01000200030004000500060007000# of covered basic blocksAFLAFLGOANGORADRILLERQSYMSAVIOR024681012141618202224Time (hour)010203040# of UBSan violationsAFLAFLGOANGORADRILLERQSYMSAVIOR024681012141618202224Time (hour)0500100015002000250030003500# of covered basic blocksAFLAFLGOANGORADRILLERQSYMSAVIOR024681012141618202224Time (hour)01020304050607080# of UBSan violationsAFLAFLGOANGORADRILLERQSYMSAVIOR024681012141618202224Time (hour)0100020003000400050006000# of covered basic blocksAFLAFLGOANGORADRILLERQSYMSAVIORProg.
tcpdump
tiff2ps
readelf
xmllint
djpeg
tiff2pdf
jasper
objdump
Avg.
AFL
2029
748
91
588
2746
1488
649
780
1139
Number of reached UBSan labels
AFLGO
1235
927
79
580
2588
1467
660
715
1031
ANGORA DRILLER QSYM
1333
770
102
456
2546
919
679
844
956
2509
852
106
568
2707
1369
731
906
1218
1906
931
104
567
2713
1448
691
835
1149
SAVIOR
2582
970
183
597
2746
1478
752
1039
1289
TABLE VI: Number of unique UBSan labels reached by
different fuzzers in 24 hours. On average SAVIOR reaches
19.68% and 15.18% more labels than DRILLER and QSYM.
Prog.
tcpdump
tiff2ps
readelf
libxml
tiff2pdf
djpeg
objdump
jasper
Ave.
AFLGO
+3/42.9% +0/0%
Improvements by bug-guided veriﬁcation
ANGORA DRILLER QSYM
+4/4%
+0/0%
AFL
+10/11% +22/41.5% +29/76.3% +9/9.9%
+4/133% +0/0%
+10/82% +9/72.2% +16/107% +9/68.4% +8/63.2% +7/29.2%
+4/33.3% +4/33.3% +5/166.7% +4/33.3% +4/33.3% +0/0%
+1/7.7% +4/44.4% +3/27.2% +5/62.5% +0/0%
+5/50%
+0/0%
+7/5.2% +7/5.2%
+0/0%
+7/10.9% +7/11.7% +11/17.2% +7/11.7% +6/9.5% +0/0%
+0/0%
+7/30.4% +7/26.9% +7/26.9% +0/0%
+5/40.1% +6/21.5% +10/61.2% +5/22.2% +4.3/25% +1.8/4.5%
SAVIOR
+8/7%
+0/0%
+0/0%
+0/0%
+0/0%
TABLE VII: New UBSan violations triggered with bug-
guided veriﬁcation in the evaluation with real-world programs.
“+X/Y%” means “X” new violations are triggered, increasing
the total number by “Y%”.
Program
tcpdump
libjpeg
objdump
readelf
libtiff
jasper
mjs
catdoc
c++ﬁlt
Total
Defect categories
OOB
Logic Error
6
8
41
1
20
21
1
3
1
102
102
23
4
9
0
2
0
0
1
141
Note
Exploitable*
6+
0+
4+
10+
0+
2+
0+
3+
0
25+
Confirmed
N/A
N/A
7
3
N/A
2
1
1
2
16
TABLE VIII: Triage of UBsan violations triggered by SAV-
IOR in 24 hours.
Triage Result: In total, we collect 481 UBSan violations and
we manually classify them based on their consequences and
present the results in Table VIII. Speciﬁcally, 102 of them lead
to OOB reads/writes and 141 of them result in logic errors.
Those logic errors consist of different categories, such as
incorrect computation, wrong outputs, and polluted conditional
variables. Among the 243 OOB and logic errors, 16 of them
have been conﬁrmed by the developers. Our further analysis
so far reveals at least 25 of them are exploitable for goals such
as information leak and control ﬂow manipulation.
The remaining 238 cases are likely harmless according to
our triage result. They mainly consist of the following cate-
gories: (1) the variables triggering UBSan violations are used
as storage (e.g., int as char[4]) instead of computation-
related objects; (2) the affected variables expire immediately
after the violations; (3) the program already considers the case
of UBSan violations and has handlers.
Case Studies: From each of the three categories (OOB, logic
errors, and those without harm), we pick a case and explain
the details here. All the cases have been ﬁxed.
The ﬁrst case is an OOB in readelf. The code is shown
below. The variable inote.namesz is copied from input.
By making it equal to 0, (inote.namesz − 1) under-ﬂows
to the maximal unsigned value. It causes an OOB access to
inote.namedata.
//readelf.c:18303
if(inote.namedata[inote.namesz-1] != '\0')
1 static bool process_notes_at(...){
2
3
4
5 }
...
The second case is a logic error in libtiff. Variable
twobitdeltas[delta] is controlled by user. With a
specially crafted input, one can cause an overﬂow in the re-
sult of lastpixel + twobitdeltas[delta], making
SETPIXEL set the wrong pixel value to the decoded image.
1 static int ThunderDecode(...){
2
3
4
//tif_thunder.c:125
if((delta = ((n >> 4) & 3)) != DELTA2_SKIP)
SETPIXEL(op, lastpixel + twobitdeltas[
delta]);
...
5
6 }
The last case is harmless, as the program already considers
overﬂow. This case locates in libxml. As shown below,
with a special input, the variable okey can be overﬂowed.
However,
the program modulo okey with dict->size
before using it, making the overﬂow harmless.
1 static int xmlDictGrow(...) {
2
3
4
5
6 }
// dict.c:417
okey = xmlDictComputeQKey(...);
key = okey % dict->size;
...
VI. RELATED WORKS
The lines of works mostly related to our work include ad-
vanced fuzzing, concolic execution, the state-of-the-art hybrid
testing techniques, and those that facilitate guided testing.
A. Advanced Fuzzing
Many recent works focus on improving the capability of
code exploration in fuzzing. CollAFL [39] aims to reduce
hash collision in coverage feedback to decrease false negatives.
PTrix [30] enables path-sensitive fuzzing based on efﬁcient
hardware tracing. TFUZZ [56] transforms tested programs
to bypass complex conditions and improve code coverage,
and later uses a validator to reproduce the inputs that work
for the original program. To generate high-quality seeds,
ProFuzzer [72] infers the structural information of the inputs.
Along the line of seed generation, Angora [29] assumes a
black-box function at each conditional statement and applies
gradient descent to ﬁnd satisfying input bytes. This method
is later improved by NEUZZ [63] with a smooth surrogate
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 09:58:09 UTC from IEEE Xplore.  Restrictions apply. 
1591
function to approximate the behavior of the tested program.
Compared with these approaches, SAVIOR takes the bug-
driven guidance to maximize bug coverage and veriﬁes the
(non-)existence of these bugs in the explored paths.
B. Concolic Execution
Symbolic execution, a systematic approach introduced in the
1970s [46, 48] for program testing, has attracted new attention
due to the advances in satisﬁability modulo theory [33, 34, 40].
However, classic symbolic execution has the problems of
high computation cost and path explosion. To tackle these
issues, Sen proposes concolic execution [59], which combines
the constraint solving from symbolic execution and the fast
execution of concrete testing. Concolic execution increases
the coverage of random testing [41, 42] while also scales
to large software. Hence,
it has been adopted in various
frameworks [26, 31, 60, 61]. Recently, concolic execution is
also widely applied in automated vulnerability detection and
exploitation, in which the concolic component provides critical
inputs by incorporating security-related predicates [24, 28].
However, concolic execution operates based on emulation or
heavy instrumentation, incurring tremendous execution over-
head. Purely relying on concolic execution for code explo-
ration is less practical for large software that involves large
amounts of operations. In contrast, hybrid testing runs fuzzing
for code exploration and invokes concolic execution only on
hard-to-solve branches. This takes advantage of both fuzzer’s
efﬁciency and concolic executor’s constraint solving.
C. Hybrid Testing
Majundar et al. [51] introduce the idea of hybrid concolic
testing a decade ago. This idea offsets the deﬁciency of
both random testing and concolic execution. Speciﬁcally, their
approach interleaves random testing and concolic execution
to deeply explore a wide program state space. Subsequent
development reinforces hybrid testing by replacing random
testing with guided fuzzing [55]. This approach could rapidly
contributing more high-quality seeds to concolic execution.
Recently, DRILLER [66] engineers the state-of-the-art hy-
brid testing system. It more coherently combines fuzzing and
concolic execution and can seamlessly test various software
systems. Despite the advancement, DRILLER still achieves
unsound vulnerability detection. DigFuzz [74] is a more recent
work that tries to better coordinate the fuzzing and concolic
execution components. Using a Monte Carlo algorithm, Dig-
Fuzz predicts the difﬁculty for a fuzzer to explore a path and
prioritizes to explore seeds with a higher difﬁculty score.
Moreover, motivated by the growing demands in software
testing, researchers have been reasoning the performance of
hybrid testing. As commonly understood, hybrid testing is
largely restricted by the slow concolic execution. To this end,
QSYM [73] implements a concolic executor that tailors the
heavy but unnecessary computations in symbolic interpretation
and constraint solving. It leads to times of acceleration.