token transfer (e.g., CVE-2018-10376) is not critical because
it can be reverted by the contract’s admin, whereas wrong
Ether transfer is irreversible.
Problem deﬁnition Our problem is then deﬁned as follows.
Given a smart contract S, construct a smart contract T such
that T satisﬁes the following.
• Soundness: T is free of any of the above vulnerabilities.
• Preciseness: For every symbolic trace tr of S, if tr does
not suffer from any of the vulnerabilities, there exists a
symbolic trace tr(cid:48) in T which, given the same inputs,
produces the same outputs and states.
• Efﬁciency: T ’s execution speed and gas consumption are
minimally different from those of S.
Note that the ﬁrst two are about the correctness of construc-
tion, whereas the last one is about the performance in terms
of computation and gas overhead.
IV. DETAILED APPROACH
In this section, we present the details of our approach.
The key challenge is to precisely identify where vulner-
abilities might arise and ﬁx them accordingly. Note that
precisely identifying control/data-dependency is a prerequi-
site for precisely identifying vulnerabilities. One approach
to identify vulnerabilities is through static analysis based on
over-approximation. For instance, multiple existing tools (e.g.,
Securify [4] and Ethainter [5]) over-approximate Etherum
semantics using rewriting rules and leverage rewriting systems
such as Datalog to identify vulnerabilities through critical
pattern matching. While useful (and typically efﬁcient) in
detecting vulnerabilities, such approaches are not ideal for
our purpose for multiple reasons. First, there are often many
false alarms as they perform abstract interpretation locally (i.e.,
context/path-insensitive analysis). In our setting, once a vul-
nerability is identiﬁed, we ﬁx it by introducing additional run-
time checks. False alarms thus translate to runtime overhead
in terms of both time and gas. Second, existing approaches are
often incomplete, i.e., not all dependencies are captured. For
instance, Securify ignores data dependency through storage
variables, i.e., the dependency due to SSTORE(c,b) is lost
if c is not a constant, whereas Ethainter ignores control
dependency completely. Thirdly, rewriting systems such as
Datalog may terminate without any result, in which case the
analysis result may not be sound. Therefore, in our work, we
Authorized licensed use limited to: Tsinghua University. Downloaded on February 25,2022 at 12:27:22 UTC from IEEE Xplore.  Restrictions apply. 
1221
Algorithm 1: sGuard
1 establish a bound for each loop;
2 enumerate symbolic traces T r;
3 foreach trace tr in T r do
let dp ← dependency(tr);
4
f ixReentrancy(tr, dp);
5
f ixT xOriginAndArithemic(tr, dp);
6
propose an algorithm which covers all dependencies with high
precision and always terminates with the correct result.
The details of our algorithm is shown in Algorithm 1.
From a high-level point of view, it works as follows. First,
symbolic traces are systematically enumerated, up to certain
threshold number of iterations for each loop. Second, each
symbolic trace is checked to see whether it is subject to
certain vulnerability according to our deﬁnitions. Lastly, the
corresponding source code of the vulnerability is identiﬁed
based on the AST and ﬁxed. In the following, we present
details of each step one-by-one.
A. Enumerating Symbolic Traces
Note that our deﬁnitions of vulnerabilities are based on sym-
bolic traces. Thus, in this ﬁrst step, we set out to collect a set
of symbolic traces T r. As deﬁned in Section III-B, a symbolic
trace is a sequence of the form (cid:104)s0, op0,··· , sn, opn, sn+1(cid:105).
In the following, we focus on symbolic traces that are maxi-
mum, i.e., the last opcode opn is either REVERT, INVALID,
SELFDESTRUCT, RETURN, or STOP.
Systematically generating the maximum symbolic traces is
straightforward in the absence of loops, i.e., we simply apply
the symbolic semantic rules iteratively until it terminates. In
the presence of loops, however, as the condition to exit the loop
is often symbolic, this procedure would not terminate. This is a
well-known problem for symbolic execution and the remedy
is typically to bound the number of iterations heuristically.
Such an approach however does not work in our setting, since
we must identify all data/control dependency to identify all
potential vulnerabilities. In the following, we establish a bound
on the number of iterations on the loops which we prove is
sufﬁcient for identifying the vulnerabilities that we focus on.
Given a smart contract S = (V ar, init, N, i, E), a loop
is in general a strongly connected component in S. Thanks
to structural programming, we can always identify the loop
heads, i.e., the control location where a while-loop starts or a
recursive function is invoked. In the following, we associate
each location n ∈ N with a bound, denoted as bound(n). If n
is a loop head, bound(n) intuitively means how many times n
has to be visited in at least one of symbolic traces we collect.
If n is not part of any strongly connected component, we have
bound(n) = 1. Otherwise, bound(n) is deﬁned as follows.
• If (n, opn, n(cid:48)) ∈ E and n(cid:48) is the loop head, bound(n) = 0
if opn is not an assignment; otherwise bound(n) = 1.
• If (n, opn, n(cid:48)) ∈ E, n(cid:48) is not the loop head and there is
no m such that (n, opn, m) ∈ E, i.e., n is not branching,
Fig. 8: An example on how the bound(n) is computed
bound(n) = bound(n(cid:48)) if opn is not an assignment;
otherwise bound(n) = bound(n(cid:48)) + 1.
• If (n, opn, m0) ∈ E and (n, opn, m1) ∈ E, i.e., n is
branching, bound(n) = bound(m1) + bound(m2).
Intuitively, the bound of a loop head is computed based on
the number of branching statements and assignment statements
inside the loop. That is, the bound of a loop head n can be
computed by traversing the CFG in the reverse order, i.e.,
from the exiting nodes of the loop to n. Every execution path
maintains a bound, which equals to the number of assignment
statements in that path. If two execution paths meet at a
branching statement then the new bound is set to the sum of
their bounds. In our implementation, the bounds for every node
n ∈ N are statically computed using a ﬁxed-point algorithm,
with a complexity of O((#N )2) where #N is the number
of nodes. Once the bounds are computed, we systematically
enumerate all maximum symbolic traces such that each loop
head n is visited at most bound(n) times. It is straightforward
to see that this procedure always terminates and returns a ﬁnite
set of symbolic traces.
Example IV.1. In the following, we illustrate how bound(x <
100) is computed. The example is shown in the Figure 8 where
the graph on the right represents the source code on the left
(a.k.a. control ﬂow graph which can be constructed using ex-
isting approaches [15]). Assignment statements are highlighted
in blue. There is a total of 3 paths P 1, P 2, P 3 in the while-
loop, and they visit 5 assignment statements. Since we follow
both branches of an if-statement, there exists a symbolic trace
tr containing P 1, P 2, P 3 regardless of the order. Trace tr is
of the form (cid:104)··· , opi,··· , opj,··· , opk,··· , op(cid:48)
i,···(cid:105) where
opi and op(cid:48)
i are executed opcodes of the loop head x < 100;
opj is mapped to y < 100 and opk is mapped to z < 100.
There are 5 assignment statements between opi and op(cid:48)
i and
the bound of the loop head is 5. Note that the number of
assignment statements in the example is the number of SWAPs
appeared in between opi and op(cid:48)
i.
The following establishes the soundness of our approach,
Authorized licensed use limited to: Tsinghua University. Downloaded on February 25,2022 at 12:27:22 UTC from IEEE Xplore.  Restrictions apply. 
1222
functiontransfer(uintx, uinty,uintz, uintm, uintn) {while(x < 100) {x = y +1;if(y < 100) {y = z +1;if(z < 100) {z = m +1;} else{m = n +1;}} else{n = x +1;}}msg.sender.send(x);}x < 100x = y + 1y < 100y = z + 1z < 100z = m + 1m = n + 1n = x + 1msg.sender.send(x)P1P2P3i.e., using the bounds, we are guaranteed to never miss any of
the 4 kinds of vulnerabilities that we focus on.
Lemma 1. Given a smart contract, if there exists a symbolic
trace which suffers from intra-function reentrancy vulnerabil-
ity (or cross-function reentrancy, or dangerous tx.origin, or
arithmetic vulnerability), there must be one in T r.
We sketch the proof in the following. All vulnerabilities
in Section III are deﬁned based on control/data dependency
between opcodes. That means we always have a vulnerable
trace, if there is, one as long as the set of symbolic traces we
collect exhibit all possible dependency between opcodes. To
see that all dependencies are exhibited in the traces we collect,
we distinguish two cases. All control dependency between
opcodes are identiﬁed as long as all possible branches in the
smart contract are executed. This condition is satisﬁed based
on the way we collect traces in T r. This argument applies to
data dependency between opcodes which do not belong to any
loop as well. Next, we consider the data dependency between
opcodes inside a loop. Note that with each loop iteration, there
are two possible cases: no new data dependency is identiﬁed
(i.e., the data dependency reaches ﬁxed point) or at least 1 new
dependency is identiﬁed. If the loop contains n assignments,
in the worst case, all of these opcodes depend on each other
and we need a trace with n iterations to identify all of them.
Based on how we compute the bound for the loop heads, the
trace is guaranteed to be in T r. Thus, we establish that the
above lemma is proved.
i.e.,
It is well-known that symbolic execution engines may suffer
from the path explosion problem. SGUARD is not immune
as well,
the number of symbolic paths explored by
SGUARD is in general exponential in the loop bounds. Existing
symbolic execution engines address the problem by allowing
users to conﬁgure a bound K which is the maximum number
of times any loop is unrolled. In practice, it is highly non-
trivial to know what K value should be used. Given the impact
of K, i.e., the number of paths are exponential in the value of
K, existing tools often set K to be a small number by default,
such as 3 in sCompile [16] and 5 in Manticore [17]; and it is
unlikely that users would conﬁgure it differently. While having
a large K leads to the path explosion problem, having a small
K leads to false negatives. For instance, with K = 3, the
overﬂow vulnerabilities due to the two expressions m = n+1,
n = x + 1 in the Figure 8 would be missed as this bound
is not sufﬁcient to infer dependency from variable x on m
and n. In contrast, SGUARD automatically identiﬁes a loop
bound for each loop which guarantees that no vulnerabilities
are missed. In Section V, we empirically evaluate whether the
path explosion problem occurs often in practice.
B. Dependency Analysis
Given the set of symbolic traces T r, we then identify
dependency between all opcodes in every symbolic trace in
T r, with the aim to check whether the trace suffers from any
vulnerability. In the following, we present our approach to
capture dependency from symbolic traces.
Algorithm 2: build CFG
1 let edges ← ∅;
2 foreach trace tr in Tr do
3
4
5
6
foreach opi, pci in tr do
if opi = JUMPI then
let edge ← (pci, pci+1) ;
add edge to edges;
7 return edges;
Algorithm 3: fd(tr, opi)
1 let opcodes ← ∅;
2 foreach opj that taints opi do
3
4
add opj to opcodes ;
if opj is an assignment opcode then
5
6
7
8
9
10
11
12
if opj reads data from memory which was written by an
assignment opcode opk then
add opk to opcodes ;
add fd(tr, opk) to opcodes;
if opj reads data from storage which was written by an
assignment opcode opk then
if opk is not visited then
add opk to opcodes;
foreach trace tr(cid:48) contains opk do
add fd(tr(cid:48), opk) to opcodes;
13 return opcodes;
Given a symbolic trace T r, an opcode opi, we aim to
identify a set of opcodes dp in T r such that: (soundness) for
all opk in dp, opi depends on opk; and (completeness) for all
opk in T r, if opi depends on opk then opk ∈ dp. To identify
dp, we systematically identify all opcodes that opi is control-
dependent on in T r, all opcodes that opi is data-dependent on
in T r and then compute their transitive closure.
To systematically identify all control-dependency, we build
a control ﬂow graph (CFG) from T r (as shown in Algo-
rithm 2). Afterwards, we build a post-dominator tree based on
the CFG using a workList algorithm [18]. The result is a set
P D(opi) which are the opcodes that post-dominate opi. The
set of opcodes which opi control-depend on in the symbolic
trace tr is then systematically identiﬁed as the following.
{ op | op ∈ tr;∃ (opm, opn) ∈ succs(op),
opi ∈ P D(opm), opi /∈ P D(opn) }
where succs(op) returns successors of op according to CFG.
Identifying the set of opcodes which opi is data-dependent
on is more complicated. Data dependency arises from 3 data
sources, i.e., stack, memory and storage. In the following,
we present our over-approximation based algorithm which
traces data-ﬂow on these data sources in order to capture data
dependency. Although an opcode typically reads and writes
data to the same data source, an opcode may write data to
a different data source in some cases. That makes data-ﬂow
tracing complicated, i.e., data ﬂows from stack to memory
Authorized licensed use limited to: Tsinghua University. Downloaded on February 25,2022 at 12:27:22 UTC from IEEE Xplore.  Restrictions apply. 
1223
through MSTORE, memory to stack through MLOAD, stack to
storage through SSTORE and storage to stack through SLOAD.
Since only assignment opcodes (i.e., SWAP, MSTORE, and
SSTORE) create data dependency, we thus design an algorithm
to identify data-dependency based on the assignment opcodes
in tr. The details are presented in the Algorithm 3, which
takes a symbolic trace tr and opcode opi as input and returns
a set of opcodes that opi is data-dependent on.
Algorithm 3 systematically identiﬁes those opcodes in tr
which taint opi. An opcode opj is said to taint another opcode
opi if opi reads data from stack indexes written by opj, or
there exists an opcode opt such that opj taints opt and opt
taints opi. For each opj that taints opi, there are three possible
dependency cases.
• Stack dependency: opi is data-dependent on opj if opj is
an assignment opcode (i.e., SWAP) (lines 3-4)
• Memory dependency: opj is data-dependent on opk if
opj reads data from memory which was written by the
assignment opcode opk (i.e., MSTORE) (lines 5-7)
• Storage dependency: opj is data-dependent on opk if
opj reads data from storage which was written by the
assignment opcode opk (i.e., SSTORE) (lines 8-12)
Note that the algorithm is recursive, i.e., if opk is added into
the set of opcodes to be returned, a recursive call is made to
further identify those opcode that opk is data-dependent on
(lines 7 and 12). Further note that since storage is globally
accessible, the analysis may be cross different traces in T r
(line 11).
Algorithm 3 in general over-approximates. For instance,
because memory and storage addresses are likely symbolic
values, a reading address and a writing address are often
incomparable, in which case we conservatively assume that
the addresses may be the same. In other words, R(opj) ∩
W (opk) (cid:54)= ∅ is true if either R(opj) or W (opk) is a symbolic
address.
C. Fixing the Smart Contract
Once the dependencies are identiﬁed, we check whether
each symbolic tr suffers from any of the vulnerabilities deﬁned
in Section III-C and then ﬁx the smart contract accordingly. In
general, a smart contract is ﬁxed as follows. Given a vulnerable
trace tr, according to our deﬁnitions in Section III-C, there
must be an external call opc ∈ C in tr. Furthermore, there
must be some other opcode op that opc depends on which
together makes tr vulnerable (e.g., if op is SSTORE, tr suffers
from reentrancy vulnerability; if op is ADD, SUB, MUL or
DIV, tr suffers from arithmetic vulnerability). The idea is
to introduce runtime checks right before op so as to prevent
the vulnerability. According to the type of vulnerability, the
runtime checks are injected as follows.
• To prevent intra-function reentrancy vulnerability, we add
a modiﬁer nonReentrant to the function F containing
op. Note that the nonReentrant modiﬁer works as a