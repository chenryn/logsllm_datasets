PLOOKASIDE_LIST_EX is the opaque data structure to initialize, which must be allocated from non-paged
memory, regardless of whether the lookaside list is to manage paged or non-paged memory.
The allocation and free functions are optional, just as they are with the classic API. These are their
prototypes:
Chapter 8: Advanced Programming Techniques (Part 1)
236
PVOID AllocationFunction (
_In_ POOL_TYPE PoolType,
_In_ SIZE_T NumberOfBytes,
_In_ ULONG Tag,
_Inout_ PLOOKASIDE_LIST_EX Lookaside);
VOID FreeFunction (
_In_ __drv_freesMem(Mem) PVOID Buffer,
_Inout_ PLOOKASIDE_LIST_EX Lookaside);
Notice the lookaside list itself is a parameter. This could be used to access driver data that is part of a larger
structure containing the lookaside list. For example, suppose the driver has the following structure:
struct MyData {
ULONG SomeData;
LIST_ENTRY SomeHead;
LOOKASIDELIST_EX Lookaside;
};
The driver creates an instance of that structure (maybe globally, or on a per-client basis). Let’s assume it’s
created dynamically for every client creating a file object to talk to a device the driver manages:
// if new is overriden as described eariler in this chapter
MyData* pData = new (NonPagedPool) MyData;
// or with a standard allocation call
MyData* pData = (MyData*)ExAllocatePoolWithTag(NonPagedPool,
sizeof(MyData), DRIVER_TAG);
// initilaize the lookaside list
ExInitializeLookasideListEx(&pData->Lookaside, MyAlloc, MyFree, ...);
In the allocation and free functions, we can get a pointer to our MyData object that contains whatever
lookaside list is being used at the time:
PVOID MyAlloc(POOL_TYPE type, SIZE_T size, ULONG tag,
PLOOKASIDE_LIST_EX lookaside) {
MyData* data = CONTAINING_RECORD(lookaside, MyData, Lookaside);
// access members
//...
}
The usefulness of this technique is if you have multiple lookaside lists, each having their own “context”
data. Obviously, if you just have one such list stored globally, you can just access whatever global variables
you need.
Chapter 8: Advanced Programming Techniques (Part 1)
237
Continuing with ExInitializeLookasideListEx - PoolType is the pool type to use; this is where the
driver selects where allocations should be allocated from. Size, Tag and Depth have the same meaning as
they do in the classic API.
The Flags parameter can be zero, or one of the following:
• EX_LOOKASIDE_LIST_EX_FLAGS_RAISE_ON_FAIL - raise an exception instead of returning
NULL to the caller in case of an allocation failure.
• EX_LOOKASIDE_LIST_EX_FLAGS_FAIL_NO_RAISE - this flag can only be specified if a custom
allocation routine is specified, which causes the pool type provided to the allocation function to
be ORed with the POOL_QUOTA_FAIL_INSTEAD_OF_RAISE flag that causes a call to ExAl-
locationPoolWithQuotaTag to return NULL on quota limit violation instead of raising the
POOL_QUOTA_FAIL_INSTEAD_OF_RAISE exception. See the docs for more details.
The above flags are mutually exclusive.
Once the lookaside list is initialized, allocation and deallocation are done with the following APIs:
PVOID ExAllocateFromLookasideListEx (_Inout_ PLOOKASIDE_LIST_EX Lookaside);
VOID ExFreeToLookasideListEx (
_Inout_ PLOOKASIDE_LIST_EX Lookaside,
_In_ __drv_freesMem(Entry) PVOID Entry);
Of course, the terms “allocation” and “deallocation” are in the context of a lookaside list, meaning
allocations could be reused, and deallocations might return the block to the cache.
Finally, a lookaside list must be deleted with ExDeleteLookasideListEx:
VOID ExDeleteLookasideListEx (_Inout_ PLOOKASIDE_LIST_EX Lookaside);
Calling Other Drivers
One way to talk to other drivers is to be a “proper” client by calling ZwOpenFile or ZwCreateFile
in a similar manner to what a user-mode client does. Kernel callers have other options not available for
user-mode callers. One of the options is creating IRPs and sending them to a device object directly for
processing.
In most cases IRPs are created by one of the three managers, part of the Executive: I/O manager, Plug &
Play manager, and Power manager. In the cases we’ve seen so far, the I/O manager is the one creating
IRPs for create, close, read, write, and device I/O control request types. Drivers can create IRPs as well,
initialize them and then send them directly to another driver for processing. This could be more efficient
than opening a handle to the desired device, and then making calls using ZwReadFile, ZwWriteFile
Chapter 8: Advanced Programming Techniques (Part 1)
238
and similar APIs we’ll look at in more detail in a later chapter. In some cases, opening a handle to a device
might not even be an option, but obtaining a device object pointer might still be possible.
The kernel provides a generic API for building IRPs, starting with IoAllocateIrp. Using this API
requires the driver to register a completion routine so the IRP can be porperly freed. We’ll examine these
techniques in a later chapter (“Advanced Programming Techniques (Part 2)”). In this section, I’ll introduce
a simpler function to build a device I/O control IRP using IoBuildDeviceIoControlRequest:
PIRP IoBuildDeviceIoControlRequest(
_In_
ULONG IoControlCode,
_In_
PDEVICE_OBJECT DeviceObject,
_In_opt_
PVOID InputBuffer,
_In_
ULONG InputBufferLength,
_Out_opt_ PVOID OutputBuffer,
_In_
ULONG OutputBufferLength,
_In_
BOOLEAN InternalDeviceIoControl,
_In_opt_
PKEVENT Event,
_Out_
PIO_STATUS_BLOCK IoStatusBlock);
The API returns a proper IRP pointer on success, including filling in the first IO_STACK_LOCATION, or
NULL on failure. Some of the parameters to IoBuildDeviceIoControlRequest are the same provided
to the DeviceIoControl user-mode API (or to its kernel equivalent, ZwDeviceIoControlFile) -
IoControlCode, InputBuffer, InputBufferLength, OutputBuffer and OutputBufferLength.
The other parameters are the following:
• DeviceObject is the target device of this request. It’s needed so the API can allocate the correct
number of IO_STACK_LOCATION structures that accompany any IRP.
• InternalDeviceControl indicates whether the IRP should set its major function to IRP_MJ_INTER-
NAL_DEVICE_CONTROL (TRUE) or IRP_MJ_DEVICE_CONTROL (FALSE). This obviously depends
on the target device’s expectations.
• Event is an optional pointer to an event object that gets signaled when the IRP is completed by the
target device (or some other device the target may send the IRP to). An event is needed if the IRP
is sent for synchronous processing, so that the caller can wait on the event if the operation has not
yet completed. We’ll see a complete example in the next section.
• IoStatusBlock returns the final status of the IRP (status and information), so the caller can examine
it if it so wishes.
The call to IoBuildDeviceIoControlRequest just builds the IRP - it is not sent anywhere at this
point. To actually send the IRP to a device, call the generic IoCallDriver API:
NTSTATUS IoCallDriver(
_In_ PDEVICE_OBJECT DeviceObject,
_Inout_ PIRP Irp);
IoCallDriver advances the current I/O stack location to the next, and then invokes the target driver’s
major function dispatch routine. It returns whatever is returned from that dispatch routine. Here is a very
simplified implementation:
Chapter 8: Advanced Programming Techniques (Part 1)
239
NTSTATUS IoCallDriver(PDEVICE_OBJECT DeviceObject, PIRP Irp {
// update the current layer index
DeviceObject->CurrentLocation--;
auto irpSp = IoGetNextIrpStackLocation(Irp);
// make the next stack location the current one
Irp->Tail.Overlay.CurrentStackLocation = irpSp;
// update device object
irpSp->DeviceObject = DeviceObject;
return (DeviceObject->DriverObject->MajorFunction[irpSp->MajorFunction])
(DeviceObject, Irp);
}
The main question remaining is how to we get a pointer to a device object in the first place? One way is
by calling IoGetDeviceObjectPointer:
NTSTATUS IoGetDeviceObjectPointer(
_In_
PUNICODE_STRING ObjectName,
_In_
ACCESS_MASK DesiredAccess,
_Out_ PFILE_OBJECT *FileObject,
_Out_ PDEVICE_OBJECT *DeviceObject);
The ObjectName parameter is the fully-qualified name of the device object in the Object Manager’s
namespace (as can be viewed with the WinObj tool from Sysinternals). Desired access is usually
FILE_READ_DATA, FILE_WRITE_DATA or FILE_ALL_ACCESS. Two values are returned on success: the
device object pointer (in DeviceObject) and an open file object pointing to the device object (in FileObject).
The file object is not usually needed, but it should be kept around as a means of keeping the device object
referenced. When you’re done with the device object, call ObDereferenceObject on the file object
pointer to decrement the device object’s reference count indirectly. Alternatively, you can increment the
device object’s reference count (ObReferenceObject) and then decrement the file object’s reference
count so you don’t have to keep it around.
The next section demostrates usage of these APIs.
Putting it All Together: The Melody Driver
The Melody driver we’ll build in this section demonstrates many of the techniques shown in this chapter.
The melody driver allows playing sounds asynchronously (contrary to the Beep user-mode API that plays
sounds synchronously). A client application calls DeviceIoControl with a bunch of notes to play, and
the driver will play them as requested without blocking. Another sequence of notes can then be sent to
the driver, those notes queued to be played after the first sequence is finished.
Chapter 8: Advanced Programming Techniques (Part 1)
240
It’s possible to come up with a user-mode solution that would do essentially the same thing, but this can
only be easily done in the context of a single process. A driver, on the other hand, can accept calls from
multiple processes, having a “global” ordering of playback. In any case, the point is to demonstrate driver
programming techniques, rather than managing a sound playing scenario.
We’ll start by creating an empty WDM driver, as we’ve done in previous chapters, named KMelody. Then
we’ll add a file named MelodyPublic.h to serve as the common data to the driver and a user-mode client.
This is where we define what a note looks like and an I/O control code for communication:
// MelodyPublic.h
#pragma once
#define MELODY_SYMLINK L"\\??\\KMelody"
struct Note {
ULONG Frequency;
ULONG Duration;
ULONG Delay{ 0 };
ULONG Repeat{ 1 };
};
#define MELODY_DEVICE 0x8003
#define IOCTL_MELODY_PLAY \
CTL_CODE(MELODY_DEVICE, 0x800, METHOD_BUFFERED, FILE_ANY_ACCESS)
A note consists of a frequency (in Hertz) and duration to play. To make it a bit more interesting, a delay
and repeat count are added. If Repeat is greater than one, the sound is played Repeat times, with a delay
of Delay between repeats. Duration and Delay are provided in milliseconds.
The architecture we’ll go for in the driver is to have a thread created when the first client opens a handle
to our device, and that thread will perform the playback based on a queue of notes the driver manages.
The thread will be shut down when the driver unloads.
It may seem asymmetric at this point - why not create the thread when the driver loads? As we shall
see shortly, there is a little “snag” that we have to deal with that prevents creating the thread when the
driver loads.
Let’s start with DriverEntry. It needs to create a device object and a symbolic link. Here is the full
function:
Chapter 8: Advanced Programming Techniques (Part 1)
241
PlaybackState* g_State;
extern "C" NTSTATUS
DriverEntry(PDRIVER_OBJECT DriverObject, PUNICODE_STRING RegistryPath) {
UNREFERENCED_PARAMETER(RegistryPath);
g_State = new (PagedPool) PlaybackState;
if (g_State == nullptr)
return STATUS_INSUFFICIENT_RESOURCES;
auto status = STATUS_SUCCESS;
PDEVICE_OBJECT DeviceObject = nullptr;
UNICODE_STRING symLink = RTL_CONSTANT_STRING(L"\\??\\KMelody");
do {
UNICODE_STRING name = RTL_CONSTANT_STRING(L"\\Device\\KMelody");
status = IoCreateDevice(DriverObject, 0, &name, FILE_DEVICE_UNKNOWN,
0, FALSE, &DeviceObject);
if (!NT_SUCCESS(status))
break;
status = IoCreateSymbolicLink(&symLink, &name);
if (!NT_SUCCESS(status))
break;
} while (false);
if (!NT_SUCCESS(status)) {
KdPrint((DRIVER_PREFIX "Error (0x%08X)\n", status));
delete g_State;
if (DeviceObject)
IoDeleteDevice(DeviceObject);
return status;
}
DriverObject->DriverUnload = MelodyUnload;
DriverObject->MajorFunction[IRP_MJ_CREATE] =
DriverObject->MajorFunction[IRP_MJ_CLOSE] = MelodyCreateClose;
DriverObject->MajorFunction[IRP_MJ_DEVICE_CONTROL] = MelodyDeviceControl;
return status;
}
Most of the code should be familiar by now. The only new code is the creation of an object of type
Chapter 8: Advanced Programming Techniques (Part 1)
242
PlaybackState. The new C++ operator is overloaded as described earlier in this chapter. If allocating a
PlaybackState instance fails, DriverEntry returns STATUS_INSUFFICIENT_RESOURCES, report-
ing a failure to the kernel.
The PlaybackState class is going to manage the list of notes to play and most other functionality specific
to the driver. Here is its declaration (in PlaybackState.h):
struct PlaybackState {
PlaybackState();
~PlaybackState();
NTSTATUS AddNotes(const Note* notes, ULONG count);
NTSTATUS Start(PVOID IoObject);
void Stop();
private:
static void PlayMelody(PVOID context);
void PlayMelody();
LIST_ENTRY m_head;
FastMutex m_lock;
PAGED_LOOKASIDE_LIST m_lookaside;
KSEMAPHORE m_counter;
KEVENT m_stopEvent;
HANDLE m_hThread{ nullptr };
};
m_head is the head of the linked list holding the notes to play. Since multiple threads can access
this list, it must be protected with a synchronization object. In this case, we’ll go with a fast mutex.
FastMutex is a wrapper class similar to the one we saw in chapter 6, with the added twist that it’s
initialized in its constructor rather than a separate Init method. This is comvenient, and possible, because
PlaybackState is allocated dynamically, causing its constructor to be invoked, along with constructors
for data members (if any).
The note objects will be allocated from a lookaside list (m_lookaside), as each note has a fixed size, and
there is a strong likelihood of many notes coming and going. m_stopEvent is an event object that will
be used as a way to signal our playback thread to terminate. m_hThread is the playback thread handle.
Finally, m_counter is a sempahore that is going to be used in a somewhat counter-intuitive way, its
internal count indicating the number of notes in the queue.
As you can see, the event and semaphore don’t have wrapper classes, so we need to initialize them in the
PlaybackState constructor. Here is the constructor in full (in PlaybackState.cpp) with an addition of a
type that is going to hold a single node:
Chapter 8: Advanced Programming Techniques (Part 1)
243
struct FullNote : Note {
LIST_ENTRY Link;
};
PlaybackState::PlaybackState() {
InitializeListHead(&m_head);
KeInitializeSemaphore(&m_counter, 0, 1000);
KeInitializeEvent(&m_stopEvent, SynchronizationEvent, FALSE);
ExInitializePagedLookasideList(&m_lookaside, nullptr, nullptr, 0,
sizeof(FullNote), DRIVER_TAG, 0);
}
Here are the initialization steps taken by the constructor:
• Initialize the linked list to an empty list (InitializeListHead).
• Initialize the semaphore to a value of zero, meaning no notes are queued up at this point, with a
maximum of 1000 queued notes. Of course, this number is arbitrary.
• Initialize the stop event as a SynchronizationEvent type in the non-signaled state (KeInitializeEvent).
Technically, a NotificationEvent would have worked just as well, as just one thread will be
waiting on this event as we’ll see later.
• Initialize the lookaside list to managed paged pool allocations with size of sizeof(FullNote).
FullNote extends Note to include a LIST_ENTRY member, otherwise we can’t store such objects
in a linked list. The FullNote type should not be visible to user-mode, which is why it’s defined
provately in the driver’s source files only.
DRIVER_TAG and DRIVER_PREFIX are defined in the file KMelody.h.
Before the driver finally unloads, the PlaybackState object is going to be destroyed, invoking its
destructor:
PlaybackState::~PlaybackState() {
Stop();
ExDeletePagedLookasideList(&m_lookaside);
}
The call to Stop signals the playback thread to terminate as we’ll see shortly. The only other thing left to
do in terms of cleanup is to free the lookaside list.
The unload routine for the driver is similar to ones we’ve seen before with the addition of freeing the
PlaybackState object:
Chapter 8: Advanced Programming Techniques (Part 1)
244
void MelodyUnload(PDRIVER_OBJECT DriverObject) {
delete g_State;
UNICODE_STRING symLink = RTL_CONSTANT_STRING(L"\\??\\KMelody");
IoDeleteSymbolicLink(&symLink);
IoDeleteDevice(DriverObject->DeviceObject);
}
The IRP_MJ_DEVICE_CONTROL handler is where notes provided by a client need to be added to the queue
of notes to play. The implementation is pretty straightforward because the heavy lifting is performed by
the PlaybackState::AddNotes method. Here is MelodyDeviceControl that validates the client’s
data and then invokes AddNotes:
NTSTATUS MelodyDeviceControl(PDEVICE_OBJECT, PIRP Irp) {
auto irpSp = IoGetCurrentIrpStackLocation(Irp);
auto& dic = irpSp->Parameters.DeviceIoControl;
auto status = STATUS_INVALID_DEVICE_REQUEST;