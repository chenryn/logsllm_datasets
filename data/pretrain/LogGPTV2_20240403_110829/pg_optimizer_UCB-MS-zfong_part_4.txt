{
int i;
int high;
int low;
float s;
s=1.0;
for(i=0;i c no c no c tocompute c tocompute c
cc c c c c c c c
£ > ‡ no no selectivity selectivity
cc c c c c c c c
cc > c £ c  c ofclauses c > c
cc B-tree c intops c ‡ c containing c ‡ c
cc B-tree c areaops c AREAEQ c ‘‘operator’’ c = c
cc B-tree c areaops c AREALT c whenused c 
cc B-tree c areaops c AREAGE c c ‡ c
cc c c c c c
hash hashops = =
cc c c c c c
cc B-tree c intops c .’’ So a clause
1 1
containing ‘‘=’’may haveaselectivity of hhh, while aclausewith‘‘>’’hasaselectivity of hh. Although
10 4
this may be an oversimplification, usually relations materialized from embedded queries will be small.
Soiftheresultingplanisnottheoverallbestchoiceinactuality,thechosenplanwillnotbeabadplan.
30
Asanalternative,piecesofnested-attributequeriescanbeoptimized atruntime. Thiscanbeadvan-
tageous not only because relation sizes and attribute distributions are known, but also because it enables
the optimizer to consider special paths. For example, it may be possible to process an embedded query
using a B-tree index that sorts its records in ascending order. If the tuples materialized from this query
are later merge-sorted using an ascending sort, due to the available index path, the query processor need
notexplicitly sorttherelation. Aruntimeoptimizerwouldbeabletonotethis.
Althoughmoreintelligentqueryplansaregenerated,thereisagreatdealofplanningoverheadasso-
ciatedwithruntimeoptimization. ForeverytuplegeneratedbyP1,asubqueryoftheform:
retrieve(TEMP.batting-history.avg)where
TEMP.batting-history.year=‘‘1986’’and
TEMP.position=‘‘catcher’’
must beoptimized, whereTEMP istherelation materialized fromEMP.hobbies. Subsequently,forevery
tuplegeneratedbytheabovequery,thefollowingquery:
retrieve(TEMP¢.avg)where
TEMP¢.year=‘‘1986’’
mustalsobeoptimized, whereTEMP¢ ismaterialized fromTEMP.batting-history. Duetothisextraover-
head,theefficiencyofruntimeoptimizationisquestionable.
3.6. Query Plans
Theplancreatedbytheoptimizerisatreeofnodes. Eachnodecorrespondstosomescan,join,sort,
or hash, or creation of a subresult. Scan and join nodes contain information indicating which attributes
should be retrieved, which qualifications must be satisfied, and any other information relevant to the par-
ticular type of scan or join. Sort and hash nodes indicate which attributes should be placed into a tem-
porary and the operator used to perform the sort or hash. A subresult node interconnects subplans and
plans, indicating which attributes should be retrieved and from where. As an optimization, the topmost
result nodecontains constant qualifications, i.e.thosewithout variables,sotheseclausescanbeexamined
priortoanyotherprocessing.
31
A possible (not necessarily the optimal) plan for the query introduced in the previous subsection is
shown in figure 3.9. There are a few things about the tree that should be elaborated on to avoid
hhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhh
R1
retrieve(EMP.name,TEMP3.avg)
P1 R2
MERGESORT retrieve(TEMP3.avg)
TEMP1andEMP
retrieving
EMP.name,EMP.hobbies P2
where
SCAN
TEMP1.dname=EMP.dept
TEMP2
retrieving
batting-history
where
SCAN INDEXSCAN position=catcher
TEMP1 EMPusing
deptindex
retrieving
nameandhobbies MATERIALIZE
SORT
TEMP1.hobbies
DEPT
intoTEMP2
P3
ondname
intoTEMP1
SCAN
TEMP3
retrievingavg
INDEXSCAN
where
DEPTusing
year=1986
floorindex
where
floor=1
retrieving
MATERIALIZE
dname
TEMP2.batting-history
intoTEMP3
Figure3.9
Samplequeryplantree
hhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhh
32
misconceptions. First of all, the materialization steps shown are not executed at runtime if the necessary
embedded queries have already been preexecuted, and their results remain valid. Furthermore, as will
becomeapparentlater,thesematerializationstepsareactuallyimplicitintheplantree.
From the figure, it would appear that throughout the plan tree, relation entries are explicitly
identified using relation and attribute names. This would imply that the query processor would have to
matchidentifiers tolocatevaluesthat originate fromnodeselsewhereinthetree. Forexample,references
to TEMP1 and EMP attributes in the mergesort node would be found by searching for an appropriate
identifier within tuplesthat originate fromthetwonodesbelowthemergesortnode. This,however,isnot
the case. Explicit references are shown only for readability. Rather, an attribute is identified by its rela-
tive position within a specified tuple. By using this relative value and a descriptor associated with tuples
returnedbyeachnode,thequeryprocessorcanlocateadesiredattributeinstantaneously.
Thenamesoftemporariesassociatedwithmaterialized relations,again,areshownonlyforreadabil-
ity. Intheactualplantree,theserelationsareidentifiedbytheattributecontainingthequeriesthatwillbe
used to build the temporary. For example, TEMP2 would be identified by the relative attribute identifier
ofTEMP1.hobbies,whileTEMP3wouldbeidentifiedbyTEMP2.batting-history. Byexaminingthecon-
tents of these referenced attribute entries, the query executor can determine whether materialization is
necessary. Thus,thematerializationstepisimplicitintheseattributereferences.
For temporaries associated with sorts and hashes, the name of the temporary shown in the tree
servesmerelyasanidentifier. Itislefttotheruntimeexecutortocreatetheactualname.
4. IMPLEMENTATIONISSUES
This section does not attempt to describe in detail the actual implementation of the POSTGRES
optimizer. Rather,itfocusesonimportantdecisionsmadeinbuildingtheoptimizer.
33
4.1. Choice ofLanguage
Query optimization requires a great deal of element manipulation. The optimizer must separate,
modify, and regroup elements within a query’s target list and qualification to create new components for
individual nodes in the plan tree. A programming language like LISP is well-suited for this type of pro-
cessingbecausethe language contains functionsanddatastructuresspecifically designedforobjectmani-
pulation tasks. Consequently, for ease of implementation, we chose to write the POSTGRES query
optimizerinLISP.
FranzLISP, Opus42 [FRAN85]wasthe selected LISP dialect. Itwaschosenbecauseit wasreadily
available and also because it supports a foreign function interface. A foreign function interface allows
LISP code to call routines written in other programming languages. This featureis ofutmost importance
because the optimizer must call C routines to access information from database system catalogs, given