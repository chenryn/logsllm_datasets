      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AmazonEKSClusterPolicy
        - arn:aws:iam::aws:policy/AmazonEKSServicePolicy
  EksClusterSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: eks-cluster-control-plane-sg
      GroupDescription: EKS Cluster Control Plane Security Group
      VpcId: !Ref VpcId
      Tags:
        - Key: Name
          Value: eks-cluster-sg
  EksCluster:
    Type: AWS::EKS::Cluster
    Properties:
      Name: eks-cluster
      RoleArn: !Sub ${EksServiceRole.Arn}
      ResourcesVpcConfig:
        SubnetIds: !Ref Subnets
        SecurityGroupIds: 
          - !Ref EksClusterSecurityGroup
```
该模板需要两个输入参数——目标 VPC 标识和目标子网标识。`EksServiceRole`资源创建一个 IAM 角色，该角色授予`eks.awsamazon.com`服务代表您管理 EKS 集群的能力，如`ManagedPolicyArns`属性中引用的托管策略所指定的。然后，您必须为控制平面通信定义一个空的安全组，最后定义 EKS 集群资源，引用`RoleArn`属性的`EksServiceRole`资源，并定义一个以输入`ApplicationSubnets`为目标并使用`EksClusterSecurityGroup`资源的 VPC 配置。
现在，您可以使用`aws cloudformation deploy`命令部署该模板，如下所示:
```
> export AWS_PROFILE=docker-in-aws
> aws cloudformation deploy --template-file stack.yml --stack-name eks-cluster \
--parameter-overrides VpcId=vpc-f8233a80 Subnets=subnet-a5d3ecee,subnet-324e246f,subnet-d281a2b6\
--capabilities CAPABILITY_NAMED_IAM
Waiting for changeset to be created..
Waiting for stack create/update to complete
Successfully created/updated stack - eks-cluster
```
创建群集大约需要 10 分钟，创建后，您可以使用 AWS CLI 获得有关群集的更多信息:
```
> aws eks describe-cluster --name eks-cluster --query cluster.status "ACTIVE"
> aws eks describe-cluster --name eks-cluster --query cluster.endpoint
"https://E7B5C85713AD5B11625D7A689F99383F.sk1.us-east-1.eks.amazonaws.com"
> aws eks describe-cluster --name eks-cluster --query cluster.certificateAuthority.data
"LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSUN5RENDQWJDZ0F3SUJBZ0lCQURBTkJna3Foa2lHOXcwQkFRc0ZBREFWTVJNd0VRWURWUVFERXdwcmRXSmwKY201bGRHVnpNQjRYRFRFNE1EY3lNakV3TURRME9Gb1hEVEk0TURjeE9URXdNRFEwT0Zvd0ZURVRNQkVHQTFVRQpBeE1LYTNWaVpYSnVaWFJsY3pDQ0FTSXdEUVlKS29aSWh2Y05BUUVCQlFBRGdnRVBBRENDQVFvQ2dnRUJBUEh5CkVsajhLMUQ4M1V3RDFmdlhqYi9TdGZBK0tvWEtZNkVtZEhudnNXeWh1Snd2aGhkZDU2M0tVdGJnYW15Z0pxMVIKQkNCTWptWXVocG8rWm0ySEJrckZGakFFZDVIN1lWUXVOSm15TXdrQVV5MnpFTUU5SjJid3hkVEpqZ3pZdmlwVgpJc05zd3pIL1lSa1NVSElDK0VSaCtURmZJODhsTTBiZlM1R1pueUx0VkZCS3RjNGxBREVxRE1BTkFoaEc5OVZ3Cm5hL2w5THU2aW1jT1VOVGVCRFB0L1hxNGF3TFNUOEgwQlVvWGFwbEt0cFkvOFdqR055RUhzUHZHdXNXU3lkTHMKK3lKNXBlUm8yR3Nxc0VqMGhsbHpuV0RXWnlqQVU5Ni82QXVKRGZVSTBING1WNkpCZWxVU0tTRTZBOU1GSjRjYgpHeVpkYmh0akg1d3Zzdit1akNjQ0F3RUFBYU1qTUNFd0RnWURWUjBQQVFIL0JBUURBZ0trTUE4R0ExVWRFd0VCCi93UUZNQU1CQWY4d0RRWUpLb1pJaHZjTkFRRUxCUUFEZ2dFQkFIRkRIODZnNkNoR2FMejBQb21EK2tyc040SUMKRzhOb0xSc2xkTkJjQmlRczFYK0hKenNxTS9TN0svL1RhUndqVjRZTE1hbnBqWGp4TzRKUWh4Q0ZHR1F2SHptUApST1FhQXRjdWRJUHYySlg5eUlOQW1rT0hDaloyNm1Yazk1b2pjekxQRE1NTlFVR2VmbXUxK282T1ZRUldTKzBMClpta211KzVyQVVFMWtTK00yMDFPeFNGcUNnL0VDd0F4ZXd5YnFMNGw4elpPWCs3VzlyM1duMWh6a3NhSnIrRHkKUVRyQ1p2MWJ0ZENpSnhmbFVxWXN5UEs1UDh4NmhKOGN2RmRFUklFdmtYQm1VbjRkWFBWWU9IdUkwdElnU2h1RAp3K0IxVkVOeUF3ZXpMWWxLaGRQQTV4R1BMN2I0ZmN4UXhCS0VlVHpaUnUxQUhMM1R4THIxcVdWbURUbz0KLS0tLS1FTkQgQ0VSVElGSUNBVEUtLS0tLQo="
```
本章后面的内容都需要群集端点和证书颁发机构数据，因此请注意这些值。
# 为 EKS 配置 kubectl
创建 EKS 集群后，现在需要将新集群添加到本地`kubectl`配置中。默认情况下，`kubectl`知道的所有集群都被定义在一个名为`~/.kube/config`的文件中，如果你使用的是 Mac 的 Docker 或 Windows 的 Docker，这个文件目前将包含一个名为`docker-for-desktop-cluster`的集群。
以下代码演示了如何将您的 EKS 集群和相关配置添加到`~/.kube/config`文件中:
```
apiVersion: v1
clusters:
- cluster:
    insecure-skip-tls-verify: true
    server: https://localhost:6443
  name: docker-for-desktop-cluster
- cluster:
 certificate-authority-data: 
 server: https://E7B5C85713AD5B11625D7A689F99383F.sk1.us-east-1.eks.amazonaws.com
 name: eks-cluster
contexts:
- context:
    cluster: docker-for-desktop-cluster
    user: docker-for-desktop
  name: docker-for-desktop
- context:
 cluster: eks-cluster
 user: aws
 name: eks
current-context: docker-for-desktop-cluster
kind: Config
preferences: {}
users:
- name: aws
 user:
 exec:
 apiVersion: client.authentication.k8s.io/v1alpha1
 args:
 - token
 - -i
 - eks-cluster
 command: aws-iam-authenticator
 env:
 - name: AWS_PROFILE
 value: docker-in-aws
- name: docker-for-desktop
  user:
    client-certificate-data: ...
    client-key-data: ...
```
您必须首先向`clusters`属性添加一个名为`eks-cluster`的新集群，指定您之前在创建 EKS 集群后捕获的证书颁发机构数据和服务器端点。然后，您必须添加名为`eks`的上下文，这将允许您在本地 Kubernetes 服务器和您的 EKS 集群之间进行切换，最后，向用户部分添加名为`aws`的新用户，该用户部分由`eks`上下文用来向您的 EKS 集群进行认证。`aws`用户配置将 kubectl 配置为执行您之前安装的`aws-iam-authenticator`组件，传递参数`token -i eks-cluster`并使用您的本地`docker-in-aws`配置文件来验证访问。执行此命令将自动向`kubectl`返回一个认证令牌，该令牌可用于向您的 EKS 集群进行认证。
有了前面的配置，您现在应该能够访问名为`eks`的新上下文，并验证与 EKS 群集的连接，如下所示:
```
> kubectl config get-contexts
CURRENT   NAME                 CLUSTER                      AUTHINFO            NAMESPACE
*         docker-for-desktop   docker-for-desktop-cluster   docker-for-desktop
          eks                  eks-cluster                  aws
> kubectl config use-context eks
Switched to context "eks".
> kubectl get all Assume Role MFA token code: ******
NAME                TYPE        CLUSTER-IP   EXTERNAL-IP   PORT(S)   AGE
service/kubernetes  ClusterIP   10.100.0.1           443/TCP   1h
```
请注意，如果您正在使用我们在前面章节中设置的**多因素认证** ( **MFA** )配置，每次您对您的 EKS 集群运行`kubectl`命令时，都会提示您输入一个 MFA 令牌，这将很快变得令人厌烦。
要暂时禁用多功能事务机，您可以使用`aws iam remove-user-from-group`命令从用户组中删除您的用户帐户:
```
# Removes user from Users group, removing MFA requirement
# To restore MFA run: aws iam add-user-to-group --user-name justin.menga --group-name Users
> aws iam remove-user-from-group --user-name justin.menga --group-name Users
```
然后在`~/.aws/config`文件中为您的本地 AWS 配置文件注释`mfa_serial`行:
```
[profile docker-in-aws]
source_profile = docker-in-aws
role_arn = arn:aws:iam::385605022855:role/admin
role_session_name=justin.menga
region = us-east-1
# mfa_serial = arn:aws:iam::385605022855:mfa/justin.menga
```
# 创建工作节点
设置 EKS 的下一步是创建将加入您的 EKS 集群的工作节点。与完全由 AWS 管理的 Kubernetes 主节点不同，您负责创建和管理您的工作节点。AWS 提供了一个 EKS 优化的 AMI，包括加入 EKS 集群和作为 EKS 工人操作所需的所有软件。您可以浏览[https://docs . AWS . Amazon . com/eks/latest/user guide/eks-optimized-AMI . html](https://docs.aws.amazon.com/eks/latest/userguide/eks-optimized-ami.html)获取您所在地区的最新 AMI ID:
![](img/75c0a503-604b-4852-bf2b-bc5234c54df1.png)
Amazon EKS-Optimized AMI
在撰写本书时，EKS 优化的 AMI 需要使用我们在前面章节中了解到的 **cfn-init** 框架进行大量配置。创建工作节点的推荐方法是使用由 AWS 发布的预定义 CloudFormation 模板，该模板已经包含了在[https://docs . AWS . Amazon . com/eks/latest/user guide/launch-workers . html](https://docs.aws.amazon.com/eks/latest/userguide/launch-workers.html)中指定的所需配置:
![](img/86d253f0-e18a-494d-9ca2-56ee21b93408.png)
Worker CloudFormation template URL
现在，您可以通过在 AWS 控制台中选择**服务** | **云信息**，单击**创建栈**按钮，并粘贴您之前在**选择模板**部分中获得的工作者模板 URL，为您的工作者节点创建一个新的云信息栈:
![](img/cafa3d9c-5393-4aa9-9be5-7aaeec57b1ec.png)
Creating a worker node CloudFormation stack
点击**下一步**后，系统会提示您输入栈名称(您可以指定一个`eks-cluster-workers`或类似的名称)，并提供以下参数:
*   **集群名称**:指定您的 EKS 集群的名称(在我们的示例中为`eks-cluster`)。
*   **集群控制平面安全组**:控制平面安全组的名称。在我们的示例中，我们之前在创建 EKS 集群时创建了一个名为`eks-cluster-control-plane-sg`的安全组。
*   **节点组名**:这定义了将为您的员工创建的 EC2 自动缩放组的部分名称。对于我们的场景，您可以指定一个`eks-cluster-workers`或类似的名称。
*   **节点自动缩放组大小** **和** **节点自动缩放组大小**:默认分别设置为 1 和 3。请注意，云信息模板将自动缩放组的所需大小设置为`NodeAutoScalingGroupMaxSize`参数的值，因此您可能需要降低该值。
*   **节点实例类型**:您可以使用预定义的工作人员云信息模板指定的最小实例类型是`t2.small`。对于 EKS 来说，节点实例类型不仅在 CPU 和内存资源方面很重要，而且在网络需求方面对 pod 容量也有影响。eks 网络模型(https://docs . AWS . Amazon . com/eks/latest/user guide/pod-networking . html)使用弹性网络接口(ENI)和运行在每个 ENI 上的辅助 IP 地址的组合，将 EKS 集群中的每个 pod 公开为在你的 VPC 内可到达的 IP 地址。您可以参考[https://docs . AWS . Amazon . com/AWSEC2/latest/user guide/using-Eni . html # available pereni](https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/using-eni.html#AvailableIpPerENI)，它描述了各种 EC2 实例类型的每个接口的最大 eni 和辅助 IP 地址数量，并最终确定了每个节点可以运行的最大 pods 数量。
*   **节点映像标识**:指定您所在地区的 EKS 优化急性心肌梗死的标识(参见之前的截图)。
*   **KeyName** :指定您的帐户中现有的 EC2 密钥对(例如，您在本书前面创建的 admin 密钥对)。
*   **VpcId** :指定您的 EKS 集群所在的 VpcId。
*   **子网**:指定您想要放置员工的子网。
配置好所需的各种参数后，单击**下一步**按钮两次，最后确认云信息可以创建 IAM 资源，然后单击**创建**按钮部署您的工作节点。成功创建栈后，打开栈的**输出**选项卡，记下`NodeInstanceRole`输出，这是下一个配置步骤所需的:
![](img/b95ee581-3246-49f3-89ed-40a29347f66e.png)
Obtaining the NodeInstanceRole output
# 将工作节点加入您的 EKS 集群
成功部署云信息栈后，您的工作节点将尝试加入您的集群，但是在他们加入之前，您需要通过将名为`aws-auth`的 AWS 认证器`ConfigMap`资源应用于您的集群来授予对工作节点的 EC2 实例角色的访问权限。
A ConfigMap is simply a key/value data structure used to store configuration data that can be used by different resources in your cluster. The `aws-auth` ConfigMap is used by EKS to grant AWS users the ability to interact with your cluster, which you can read more about at [https://docs.aws.amazon.com/eks/latest/userguide/add-user-role.html](https://docs.aws.amazon.com/eks/latest/userguide/add-user-role.html). You can also download a sample `aws-auth` ConfigMap from [https://amazon-eks.s3-us-west-2.amazonaws.com/1.10.3/2018-06-05/aws-auth-cm.yaml](https://amazon-eks.s3-us-west-2.amazonaws.com/1.10.3/2018-06-05/aws-auth-cm.yaml).
要创建`aws-auth`配置图，在`todobackend-aws/eks`文件夹中创建一个名为`aws-auth-cm.yaml`的文件:
```
apiVersion: v1
kind: ConfigMap
metadata:
  name: aws-auth
  namespace: kube-system
data:
  mapRoles: |
    - rolearn: arn:aws:iam::847222289464:role/eks-cluster-workers-NodeInstanceRole-RYP3UYR8QBYA
      username: system:node:{{EC2PrivateDNSName}}
      groups: