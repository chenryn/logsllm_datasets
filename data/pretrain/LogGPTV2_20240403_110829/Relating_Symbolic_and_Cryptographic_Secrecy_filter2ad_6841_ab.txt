1
2
3
4
0
128
1000
1032
1200
2.2 Notation
The symbol “:=” denotes deterministic and “←” prob-
R←” denotes the uniform random
abilistic assignment, and “
choice from a set. Messages are strings over an alphabet Σ.
The length of a message m is denoted as len(m), and ↓ is
an error element available as an addition to the domains and
ranges of all functions and algorithms. The list operation
is denoted as l := (x1, . . . , xj), and the arguments are un-
ambiguously retrievable as l[i], with l[i] = ↓ if i > j. A
database D is a set of functions, called entries, each over
a ﬁnite domain called attributes. For an entry x ∈ D, the
value at an attribute att is written x.att. For a predicate
pred involving attributes, D[pred] means the subset of en-
tries whose attributes fulﬁll pred . If D[pred] contains only
one element, the same notation is used for this element. Fi-
nally, NEGL denotes the set of all negligible functions, i.e.,
g : N → R≥0 ∈ NEGL iff for all positive polynomials Q,
∃k0∀k ≥ k0 : g(k) ≤ 1/Q(k)
2.3 Details about the State Representation
The overall representation of a state of the Dolev-Yao-
style model of [11] is a database D of the existing terms
with their type (top-level operator), argument list, han-
dles, index, and lengths as database attributes. The length
is needed because encryption cannot completely hide the
length of messages. The non-atomic arguments of a term
are given by the indices of the respective subterm.
lows, where H denotes the set of user indices.
In detail, the database attributes of D are deﬁned as fol-
• ind ∈ INDS, called index, consecutively numbers
all entries in D. The set INDS is isomorphic to N;
it is used to distinguish index arguments from oth-
ers. The index serves as a primary key attribute of
the database, i.e., one can write D[i] for the selection
D[ind = i].
• type ∈ typeset deﬁnes the type of the entry. In par-
ticular, the type data denotes payloads, skse and ska
denote secret encryption and authentication keys, pkse
and pka corresponding public tags, and symenc and
aut denote symmetric encryptions and authenticators.
Other types will be introduced when ﬁrst used.
• arg = (a1, a2, . . . , aj) is a possibly empty list of argu-
ments. Many values ai are indices of other entries in D
Figure 1. Example of the database represen-
tation of terms
and thus in INDS. They are sometimes distinguished
by a superscript “ind”.
• hnd u ∈ HNDS ∪ {↓} for u ∈ H ∪ {a} are handles
by which a user or adversary u knows this entry. The
value ↓ means that u does not know this entry. The set
HNDS is yet another set isomorphic to N. Handles
always get a superscript “hnd”.
• len ∈ N0 denotes the “length” of the entry.
An example is shown in Figure 1. The left side indi-
cates the main action that has happened so far, the sending
of an authenticated list with one element, a payload m. The
database ﬁrst contains the symmetric authentication key of
type ska together with a public key tag of type pka. (These
tags are needed to deal with situations where the adversary
can distinguish whether several symmetric authenticators or
encryptions have been made with the same key. Their ab-
stract length is deﬁned to be 0 for technical reasons which
will not matter in the following.) In the example, both par-
ticipants know the secret key, i.e., have a handle to it, while
honest participants never have handles to the public key
tags. Then the database contains the payload data, the list,
and the authenticated message. The example assumes that
this message has arrived safely so that Pn has a handle to
it, but has not yet been parsed by the recipient. After pars-
ing, the list and m get handles 3 and 4 for Pn, respectively.
Note that the handles are indeed local names, i.e., different
for the two participants.
2.4 The Real Cryptographic Library
In the real implementation of the cryptographic library
in [11, 12, 9], the central database of all terms with han-
dles (local names) for each user is replaced by a different
machine for each user u. This machine contains a database
Du with only three main attributes: the handle hndu for this
user u, the real cryptographic bitstring word, and the type
type. The users can use exactly the same commands as to
the ideal library, e.g., en- or decrypt a message etc. These
commands now trigger real cryptographic operations. The
operations essentially use standard cryptographically secure
Proceedings of the 2005 IEEE Symposium on Security and Privacy (S&P’05) 
1081-6011/05 $ 20.00 IEEE
is called Conf(Sys). A conﬁguration is runnable, i.e., for
each value k of a security parameter one gets a well-deﬁned
probability space of runs. The view of a machine in a run
is the restriction to all in- and outputs this machine sees and
its internal states. Formally, the possible runs run conf in
a conﬁguration conf and the view view conf (M) of a ma-
chine M in conf are a family of random variables with one
element for each security parameter value k. The notation
r ∈ run conf abbreviates that r is a possible run of conf ,
i.e., it belongs to the carrier set of an arbitrary random vari-
able in run conf .
2.7 Reactive Simulatability
The security proof of [11] states that the real library is at
least as secure as the ideal library. This is captured using
the notion of reactive simulatability, which is the crypto-
graphic notion of secure implementation. For reactive sys-
tems, it means that whatever might happen to an honest
user in a (typically real) system Sys 1 can also happen in a
(typically more ideal) system Sys 2 given as a speciﬁcation:
For every user H and every real structure and real adver-
sary this user may interact with, there exists a correspond-
ing ideal structure and ideal adversary such that the view of
H is computationally indistinguishable in the two conﬁgu-
rations. This is illustrated in Figure 2. Indistinguishability
is a well-known cryptographic notion from [30].
(cid:3)
k
Deﬁnition 2.1 (Computational Indistinguishability) Two
families (vark)k∈N and (var
)k∈N of random variables on
common domains Dk are computationally indistinguish-
able (“≈”) iff for every algorithm D (the distinguisher) that
is probabilistic polynomial-time in its ﬁrst input,
|P (D(1k, vark) = 1) − P (D(1k, var
) = 1)| ∈ NEGL,
(cid:3)
k
(as a function of k).
3
Intuitively, given the security parameter and an element
(cid:3)
chosen according to either vark or var
k, D tries to guess
which distribution the element came from.
Deﬁnition 2.2 (Reactive Simulatability) For two systems
Sys 1 and Sys 2, one says Sys 1 ≥sec Sys 1 (at least as secure
as) iff for every polynomial-time conﬁguration conf 1 =
( ˆM1, S , H, A1) ∈ Conf(Sys 1), there exists a polynomial-
time conﬁguration conf 2 = ( ˆM2, S , H, A2) ∈ Conf(Sys 2)
(H).
(with the same H) such that view conf 1
The relation ≥sec is also called simulatability. Universal
simulatability, written ≥univ
sec , means that A2 does not depend
on H (only on ˆM1, S , and A1), and blackbox simulatability
that A2 consists of a simulator Sim that depends only on
( ˆM1, S ) and uses A1 as a blackbox submachine.
3
(H) ≈ view conf 2
primitives, but with certain additional tagging, randomiza-
tion etc. Send commands now trigger the actual sending of
bitstrings between machines and/or to the adversary.
2.5 Overall Framework and Adversary Model
So far we described the ideal and real cryptographic li-
brary informally. We now give an overview of the under-
lying system model and introduce some more notation for
later use. The underlying machine model is an IO-automata
model. Hence the overall ideal Dolev-Yao-style library,
with its database D, is represented as a machine.
It is
called trusted host. Actually there is one possible trusted
cryH for every subset H of a set {1, . . . , n} of users,
host TH
denoting the possible honest users. It has ports inu? for in-
puts from and outu! for outputs to each user u ∈ H and
for u = a, denoting the adversary. The use of ports for
attaching different channels to a machine and their naming
follows the CSP convention, e.g., the cryptographic library
obtains messages at inu? that have been output by a user
machine at inu!.
Using the notation of [11], the ideal cryptographic li-
brary is a system Sys cry,id
n,L that consists of several structures
cryH }, S cryH ), one for each value of H. Each structure
({TH
consists of a set of machines, here only containing the ma-
cryH , and a set S cryH := {inu?, outu! | u ∈ H}
chine TH
cryH that the honest users con-
denoting those ports of TH
nect to. The set S cryH is called service ports or informally
:=
the user interface. Formally, the system is Sys cry,id
cryH }, S cryH ) | H ⊆ {1, . . . , n}}, where L denotes a
{({TH
tuple of length functions needed to compute the “length” of
the abstract terms in the database. The parameters n and
L will not matter any further and are hence omitted in the
following.
In the real implementation of the cryptographic library,
| u ∈
the same interface is served by a set ˆM cryH := {Mcry
H} of real cryptographic machines. The corresponding
E,S,A,SE := {( ˆM cryH , S cryH ) | H ⊆
system is called Sys cry,real
{1, . . . , n}}, where E, S, A, and SE denote the crypto-
graphic schemes used for asymmetric encryption, signa-
tures, symmetric authentication, and symmetric encryption,
respectively.
n,L
u
2.6 Conﬁgurations, Runs, and Views
When considering the security of a structure ( ˆM , S ),
an arbitrary probabilistic machine H is connected to the
user interface to represent all users, and an arbitrary ma-
chine A is connected to the remaining free ports (typi-
cally the network) and to H to represent the adversary. In
polynomial-time security proofs, H and A are polynomial-
time. The resulting tuple ( ˆM , S , H, A) is called a conﬁg-
uration, and the set of all conﬁgurations of a system Sys
Proceedings of the 2005 IEEE Symposium on Security and Privacy (S&P’05) 
1081-6011/05 $ 20.00 IEEE
should represent the same message; hence we have selec-
tion functions for these message parts both in inputs and
in outputs. For instance, for a two-party secure channel
with inputs (send, m) and outputs (receive, m), the selec-
tion functions for inputs and outputs would both select m,
i.e., the second list element. On input a command contain-
ing a selected payload m, the replacement machine replaces
m by a random payload n of the same length, stores the tu-
ple (m, n) in a set T called a replacement table, and outputs
the command with the replaced parameters. To ensure in-
distinguishable behavior to the users, the replacement ma-
chine further uses table-lookup in T to transform messages
received from the network back into their original form.
We start the formal deﬁnitions by deﬁning suitable se-
lection functions.
Deﬁnition 3.1 (Payload Selection Function) A payload se-
lection function is a function that assigns every string l a
potentially empty set of non-overlapping substrings of l. 3
We now formally introduce the replacement machine. The
selection functions of secret input and output parts are
called f and g. In order to wrap a structure with service
ports S by a replacement machine, we give the replace-
ment machine these ports so that the overall user interface
remains unchanged, see Figure 3, and we use a consistently
renamed version of the port set to link the replacement ma-
chine and the original machines. The complement of a port
set, i.e., the ports the connecting machines need, is denoted
by S C.
Deﬁnition 3.2 (Replacement Machine) Let a port set S and
payload selection functions f , g be given. Let L: N →
N ∪ {∞} be arbitrary. The replacement machine RS ,f,g,L
for S , f , g, and L is deﬁned as follows: It has the port set
S and a renamed version S (cid:3)
of S C. It has an initially empty
set T called replacement table and the following transition
rules:
in S ,
• On input a message l at a port
let
{m1, . . . , mn} := f(l). Replace every payload mi
for which there exists exactly one ni with (mi, ni) ∈
T by ni in l. For the remaining payloads mi set
R← {0, 1}len(mi) \ {n | ∃m : (m, n) ∈ T},
ni
T := T ∪ {(mi, ni)}, and replace mi by ni in l. Out-
put the resulting string l
to the underlying system at
the corresponding port.
(cid:3)
• On input a message l at a port
let
{n1, . . . , nj} := g(l). Replace every payload ni for
which there exists exactly one mi with (mi, ni) ∈ T
to the honest
by mi in l. Output the resulting string l
user at the corresponding port.
in S (cid:3)
(cid:3)
,
H
S
M1
A1
H
S
M2
A2
Figure 2. Simulatability example: The two
views of H must be indistinguishable
Clearly, black-box simulatability implies universal simu-
latability; the cryptographic library has been proven with
blackbox simulatability. An essential feature of this deﬁ-
nition of simulatability is a composition theorem [27, 13],
which roughly says that one can design and prove a larger
system based on the ideal system Sys id, and then securely
replace Sys id by the real system Sys real.
3 Secrecy of Payload Messages
Since we work in a reactive environment and since we
quantify over all users, we cannot simply deﬁne the secrecy
of payloads by demanding that the adversary does not learn
them at all since the users themselves might send him the
payloads. Thus we have to capture that the adversary does
not learn any information about the payloads from the sys-
tem. E.g., even a secure channel would clearly not offer
secrecy in the strict sense that the adversary does not learn
the transmitted payloads at all, since the honest sender or re-
cipient might send the same payloads to the adversary. We
therefore have to separate information that leaks by user be-
havior from information that leaks in the system. We ﬁrst
present a general cryptographic deﬁnition that captures this
separation. We then prove that this type of payload secrecy
is preserved by “as secure as”. Finally, we deﬁne a sym-
bolic payload secrecy notion for protocols over the ideal
Dolev-Yao-style cryptographic library that also comprises
this separation, and we prove that this symbolic payload se-
crecy implies cryptographic payload secrecy for the proto-
col using the real cryptographic library.
3.1 General Cryptographic Message Secrecy
To capture the separation between information leakage
by a protocol and information leakage by the users in a re-
active framework, we deﬁne a replacement machine R that
replaces message parts that are supposed to be secret by ran-
dom ones at the system interface. If the system leaks no in-
formation about these message parts, then this replacement
will not be distinguishable, no matter what information the
honest users leak about the real messages. The replacement
must be done consistently for different in- and outputs that
Proceedings of the 2005 IEEE Symposium on Security and Privacy (S&P’05) 
1081-6011/05 $ 20.00 IEEE
H
RS,f,g,L
A
S
S’
^
M’
conf
S
S’
H
FS,L
^