神秘的undef
14);
既
户
S
---
## Page 327
8.2.9指定连接参数
一个对绑定到该列的那个变量的引用。列编号从1开始。
Perl变量。当获取行时，这些变量将自动更新为相应的列值，从而让检索操作变得非常有效率。
自己对这些变量进行赋值。
取行时，它可以让你通过检索各个列值的方式，把“输出”自动参数化为变量，而你完全不用
8.2.8把查询结果绑定到脚本变量
下面这个示例演示了如何把列绑定到某个变量，以及如何在行获取循环里访问这些变量：
可以参数化这条语句的“输入”。
有一种方法可以取代这种单个调用bind_col（）的做法，即把所有变量引用一次性全部传递
假设你有一个查询，用于检索member表里的姓名。你可以让 DBI把所选列的值自动赋给
在语句字符串里有了占位符，你便可以在执行语句时把它们替换为具体值。
可以在DSN里设定某些选项，方法就是把它们追加到整个字符串的最开头部分，并且各自
口如果密码设定为 undef 或一个空串，则不发送密码。
口如果定义了环境变量DBI_DSN，并且数据源名称（DSN）未定义或者为一个空串，则会
如果省略了连接参数，那么DBI将会根据以下规则进行确定使用什么值。
与服务器建立连接的最直接办法是，把所有的连接参数设定为connect（）方法的参数：
请在 execute()之后和获取行之前调用bind_columns（）。
print “$last_name, $first_name, $suffix\n" while $sth->fetch ();
$sth->bind_columns
$sth->execute ();
请在execute（)之后和获取行之前调用bind_col（）。每次调用都应该指定一个列编号和
口
口
print "slast_name,
$sth->bind_col
$sth->bind_col
sth->bind_col
统上，默认为ODBC。
$sth=$dbh-
如果用户名设定为undef 或一个空串，则在Unix上，默认为登录名；而在Windows 系
如果省略了主机名，
在Windows系统上，如果没有定义用户名，则使用环境变量USER。
用户名和密码（不包括它们为空串的情况），则会使用环境变量DBI_USER和DBI_PASS。
使用环境变量 DBI_DSN。如果定义了环境变量 DBI_USER 和 DBI_PASS，并且没有定义
FROM member ORDER BY 1ast_name,first_name
SELECT last_name,
S
(\$last_name,\sfirst_name,
$first_name,$suffix\n"while $sth->fetch ();
\$last_name);
($suffix);
\sfirst_
，则DBI会尝试连接本地主机。
。DBI也提供了一种相应的名为“参数绑定”的输出操作。在获
name);
$suffix);
first_name,suffix
first_name,suffix
password):
\$suffix);
8.2Perl DBI概述
。换句话说，你
307
---
## Page 328
线“\”，必须改写为Perl语言字符串里的斜线“/”。）
路径保存起来，接着，在连接完成之后，通过chdir（)重新返回该目录。
符或冒号。
符的路径名可以被解释为该驱动器的相对路径。
笨拙。
径名通常以一个驱动器盘符和一个冒号开始。之所以会成为一个问题，那是因为DBI会把这个
的更多信息请参考附录F。
如果只想读取标准选项文件里的[client]组，则可以像下面这样指定选项：
则可以把它们列在一个[sampdb]组里，然后像下面这样使用数据源值：
[client]组里的参数会被用上。例如，你有某些选项，专门用于与 sampdb 数据库有关的脚本，
mysql_read_default_group 选项。这个选项使得在这个选项文件里指定的那个组以及
它读取全局性选项文件（如Unix系统上的/etc/my.cnf，或者Windows系统上的c：\my.ini），
参数。
当前用户自己的选项文件。如果采用这种方式来编写脚本，则可以不用在脚本里写出各个连接
SENV{HOME}包含运行此脚本的那个用户的主目录路径名，因此它所使用的连接参数都将来自于
任何运行该脚本的用户，而其文件名则像下面这样被参数化：
的内容如下：
308
my $dsn = "DBI:mysql:sampdb;mysql_read_default_file=$ENV(HOME) /.my.cnf";
（3）如果不想让连接操作影响到当前目录，则需要在调用connect（）之前，把当前目录的
(2）把DSN里mysql_read_default_file选项的值设置为这个文件名，但不带驱动器盘
（1）利用chdir（)把位置切换到选项文件所在的驱动器的根目录，以便那些不带驱动器盘
在Windows系统上使用mysql_read_default_file选项会遇到这样一个难题，即文件路
my $dsn = "DBI:mysql:sampdb;mysql_read_default_group=sampdb";
使用 mysql_read_default_file 选项会导致让脚本只读取指定的选项文件。如果还想让
下面这段代码演示了怎样使用选项文件C：\my.ini。（
与指定数据源字符串的选项相关的更多信息请参考附录 H。与 MySQL选项文件格式相关
my $dsn = "DBI:mysql:sampdb;mysql_read_default_group=client";
在这种情况下，connect（）调用会尝试使用用户名 sampdb和密码secret来连接位于主机
当这个脚本在执行时，会到指定的文件读取连接参数。假设，/home/paul/.my.cnf 文件
chdir
my $orig_dir = cwd ();
#保存当前目录路径名
password=secret
user=sampadm
[client]
使用C：\my.ini 里的参数进行连接
切换到文件所在的那个驱动器的根目录
第8章用Perl DBI编写MySQL程序
"C:/
ordie
chdir:$!\n";
（请注意，
Windows路径名里的反斜
---
## Page 329
如果你的连接参数放置在选项文件里，则在运行使用了这段代码的脚本时，不必输入这些参数。
接参数或者在标准选项文件的[client]组里找到的连接参数，建立与MySQL服务器的连接。
在这里展示一次连接代码，以便我们在编写脚本时，把精力集中在脚本的主体上面：
程序所具有的行为。你的DBI脚本也应该与这种行为保持一致。
于在选项文件里找到的任何相同选项。这么做是有道理的，因为这正是标准的MySQL客户端
码值，将改写那些在选项文件找到的连接参数。例如，你可能会想让脚本解析来自命令行的选
特定的用户进行连接）。在调用connect（)时，
对于本章开发的其他命令行脚本，我将使用标准的连接设置，从而省掉有关的代码。我只
MySQL的标准客户端程序与Getopt模块在处理命令行选项方面有所不同。MySQL的标准
当进入8.4节进行Web编程时，我们将对这段连接代码稍做修改，但其基本思想是相同的。
$dbh->disconnect();
每个脚本的结尾部分都相似，只需要在退出之前断开连接即可：
这段代码首先会初始化DBI，接着会查找命令行里的连接参数，然后使用来自命令行的连
#连接服务器
sdsn
#构造数据源
Getoptions(
my($host_name,$password,$port_num,$socket_name,$user_name);
#默认参数－开始时全部未定义
$Getopt::Long::bundling =1;
SGetopt:：Long::ignorecase=0；#所有选项都区分大小写
use Getopt::Long;
#如果在命令行给定了连接参数，则解析它们
use strict;
#!/usr/bin/perl
使用选项文件，并不会妨碍你在connect（）调用里指定连接参数（例如，想让脚本以某个
chdir （$orig_dir）or die "Cannot chdir:$!\n";
my $dbh = DBI->connect ($dsn, undef, undef,\%conn_attrs）;
sd
or exit（1）;
sn
#=i表示在选项后面需要提供一个整数值
切换回原来的那个目录
'socket|S=s"
"port|P=i"
"password|p=s"
i
";mysql_read_default_group=client";
"DBI:mysql:sampdb";
=>
=>
\$user_name
\$socket_name,
\$port_num,
\$password,
\shost_name
if shost_name;
-uname表示的是-uname，而非-u-n-a-m
PrintError
显式指定的连接参数，如主机名、用户名和密
=>0，AutoCommit=>1）;
8.2Perl DBI概述
-e
309
---
## Page 330
没有引号。一种正确指定这类语句的方式是像下面这样使用quote（）：
语句输出来看看是什么情况：
假设在客户端程序mysql里输入了下面这样一条语句：
条。如果在执行这条语句之前先输出它，你便会惊奇地看到实际发送到服务器的内容是什么。
本里就不行了。为什么会这样？”最为常见的情况是：DBI脚本执行的语句并非是你所想的那
8.2.10.1使用输出语句进行调试
操作信息，这是其他调试手段无法做到的。
通
可以配合使用。第一种技术是，在脚本里随处放置一些输出语句。这样可以让你随意输出调试
8.2.10调试
选项时必须带上一个值。
示你输入密码：．
名。如果像下面这样执行此脚本，那么Getopt模块将错误地把mytb1解释为密码值，而不会提
密码值时，可能会导致歧义，除非它是命令行的最后一个参数，或者在该选项的后面紧跟着另
带上密码值，也可以不带；并且如果没有给出密码值，则会提示用户输入。
客户端程序的选项处理代码有点特别：在指定密码选项（--password 或-p）时，其后面可以
310
用、更系统化，并且可以在启用之后自动完成。DBI的跟踪功能，还能让你看到驱动程序的
息，只是你必须手工添加这些语句。第二种技术是，使用DBI内建的跟踪功能。这种方式更
如果要调试不能正常工作的DBI脚本，则通常会用到两种技术，它们既可以单独使用，也
这里有一个常见的问题：“我的语句在 mysql客户端程序里执行得挺好的，可是在 DBI脚
对于Getopt 模块，如果想让提供给--password 和-p的密码值变成可选的，那么在不提供
$last = $dbh->quote （"Brown");
从这个输出结果可以清楚地看到，前后两条语句根本不一样。VALUES（)列表里的那些值都
结果如下所示：
尽管语句都相同，但这一次却不工作了。或者两条语句是否真的相同呢？试着用下面这条
$expiration = $dbh->quote ("2012-06-03");
INSERT INTO member (last_name,first_name,expiration)
print "$stmt\n";
$last = "Brown";
接着，在DBI脚本里试图去做同样的事情（当然，要去掉语句末尾的分号)：
mysql> INSERT INTo member (last_name,first_name,expiration)
对于像前面所示的那段代码，在Perl语言框架里，为避免出现此类问题，要求在给出密码
sfirst
VALUES(Brown,Marcia,2012-06-03)
$rows = $dbh->do ($stmt);
$first = "Marcia";
VALUEs($last,$first,$expiration)
INSERT INTO member (last_name,first_name,expiration)
第8章用Perl DBI编写MySQL程序
->VALUES('Brown','Marcia','2012-06-03'）;
$abh->quote("Marcia
“）
---
## Page 331
的跟踪级别：
是来自某个特定句柄，所有的内容都将写到这个文件。
踪与该查询相关联的语句句柄：
跟踪报告时，这种做法非常有用。例如，发现某个特定的 SELECT查询有问题，那么可以只跟
以启用单独的句柄级的跟踪功能。
件。下面这个调用会建立一个1级跟踪，而调试信息会被送往STDERR：
文件名，那么调试信息将被发送到 STDERR；如果指定了文件名，则调试信息会被发送到这个文
DBI_TRACE来对你所运行的所有DBI脚本的跟踪机制施加影响。
等这样一些内容。这些信息对于跟踪问题有着巨大的帮助。
你看到你正在执行的语句的文本（包括已完成占位符替换后的结果）、quote（)方法的调用结果
有0（关闭）到15（信息量最大）共16个级别。一般情况下，1~4级最有用。例如，2级能让
8.2.10.2利用跟踪机制进行调试
值只有在调用do（)时才会被计算出来。当使用占位符时，跟踪调试功能往往是更有效的调试方法。
给do（)方法：
除使用trace（）外，还可以使用TraceLevel属性。此属性可以用于设置或读取给定句柄
如果在调用trace（)时，指定了一个文件名参数，那么不管跟踪输出是来自DBI全局，还
利用 DBI->trace（），可以跟踪所有的DBI操作。对于某个拥有更多细致操作的办法，可
你可以在各个脚本里使用trace（）方法对跟踪机制进行控制，也可以通过设置环境变量
DBI提供了一个能够生成调试信息的跟踪机制，能找出脚本行为发生异常的原因。该机制
my $cur_level
$dbh->(TraceLevel}=3;
$sth->trace(1);
如果要禁用跟踪，可以把跟踪级别设定为0：
DBI->trace(1);
不幸的是，当使用第二种方式时，无法利用输出语句查看整条语句的内容，因为占位符对应的
$last="Browm";
另一种方式是，使用占位符来指定语句，并把将要插到语句中的那些值，以参数形式传递
$sth->execute();
DBI->trace（0);
DBI->trace(2,"trace.out");
下面这个调用会建立一个2级跟踪，并且调试信息会被送往trace.out文件：
$rows = Sdbh->do($stmt,undef,$last,$first,$expiration);
$expiration = "2012-06-03";
sstmt
sfirst="Marcia";
$rows = $dbh->do ($stmt);