  * 0xC023: Password Authentication Protocol （PAP）
  * 0xC223: Challenge Handshake Authentication Protocol （CHAP）
  * 0x8021: IPCP报文，它是NCP协议的一种 （用来协商分配 ip）
  * 0x0021: IP报文
LCP(Link Control Protocol) 是链路控制协议，是 PPP 协议的一个成员协议，PPP 协议在 LCP 阶段默认不做认证协商，LCP
的认证只作为一个可选的参数。
接入集中器和客户端双方通过交互LCP配置报文来协商数据链路。
协商内容包括验证方式、最大接收单元 MRU、魔术字（Magic Number）等选项。 在此阶段 LCP
的状态机发生两次改变，进入会话阶段后，检测到链路可用，则物理层会向链路层发送一个 UP 事件，链路层收到该事件后，会将LCP的状态机从当前状态改变为
Request-Sent（请求发送）状态。 LCP 开始发送 Config-Request 报文（即上图中 LCP 下面的 CODE 字段，为 1 代表
Config-Request）来协商数据链路，无论哪一端接收到了 Config-Ack 报文（LCP 的 CODE 字段为 2）时，
LCP的状态机又要发生改变，从当前状态改变为 Opened 状态，进入 Opened 状态后收到 Config-Ack
报文的一方则完成了当前阶段，应该向下一个阶段跃迁，下一个阶段可能是 Authentication（如 PAP 或 CHAP），也可能是 Network
Layer Protocol（NLP）。 同理可知，另一端也是一样的，但须注意的一点是在链路配置阶段双方是链路配置操作过程是相互独立的。
如果配置了验证，将进入Authentication阶段，CHAP 或 PAP 验证。如果没有配置验证，则直接进入 Network Layer
Protocol 阶段，即开始分配 ip 等操作。
这是在网上找的 LCP 报文格式，其实更建议大家配合 wireshark 抓包来看。
上面我的提到了 LCP 中的 code，LCP协议使用Code字段区分11种报文格式，详细的表见下，平时我们用的比较多的就是 1 和 2
  * Identifier：标识域的值表示进行协商报文的匹配关系。 标识域目的是用来匹配请求和响应报文。当对端接收到该配置请求报文后，无论使用何种报文回应对方，但必须要求回应报文中的ID要与接收报文中的ID一致。换句话说，在一个协商数据链路阶段，这个字段的值都是一样的，在本次我的例子抓包中为 1。
  * Length：它是代码域Code、标志域Identified、长度域Length和数据域Data四个域长度的总和。
下面是一张图，用来说明 req 与 ack 的交互。
从这张图中可以相信不难理解之前的话了，A 和 B 初始都在 Request-Sent（请求发送）状态。 然后两者都开始发送 Config-Request
报文，只有 A 和 B 都收到了对方的 Config-Ack 报文。 才标志着 LCP 状态变迁的完成，可以向下一个阶段 NLP 或者
Autiontication（PAP 或 CHAP）跃迁。
在协商数据链路配置阶段，点对点（PPPoE是点对点协议）双方至少都发了一个 Config-Request
报文，该报文中包含了发送方对于所有的配置参数的期望值。
关于在协商数据链路配置阶段可能出现的报文，我给大家找了一页 PPT
  * 如果对方对于自己发送的 Config-Request 回应了一个 Config-Ack，则说明对方能识别所有选项，并且全部能够被接受；
  * 如果对方对于自己发送的 Config-Request 回应了一个 Config-Nak，则说明对方能识别所有选项，但只有部分能够被接受；
  * 如果对方对于自己发送的 Config-Request 回应了一个 Config-Rej，则说明对方有部分选项不能被识别，或者不能被接受；
  * 如果双方最终收到对方发送的 Config-Ack 报文，则说明对方对于自己提出的配置参数的协商已经取得了一致，这同时也标志着链路建立顺利结束。
如果接收到了 Config-Nak 或者 Config-Rej，这也就意味着自己必须修改相应配置参数的期望值，然后向对方重新发送一个Config-Request报文，且等待对方新的回应。
但是就我抓到的过程中，没看见过在这个阶段有 Config-Nak 的出现。
有了上面的基础，我们再来看我的抓包历史记录
其实大多不用管，只需要知道收到一个 Config-Request 得回一个 Config-Ack，并且自己也得发一个 Config-Request，并等待接收到对方的 Config-Ack。
但是我抓了好几次包，测试了不少次，发现一般情况下，一方在第一次接收到对方的 Config-Request 报文时会回应一个 Config-Rej。后续才开始对接收到的 Config-Request 回应 Config-Ack。
据此我们可以写出代码。
    #处理 PPP LCP 请求
    def send_lcp(self, pkt):
        # 初始化 clientMap
        if not self.clientMap.get(pkt.src):
            self.clientMap[pkt.src] = {"req": 0, "ack": 0}
        # 处理 LCP-Configuration-Req 请求
        if bytes(pkt.payload)[8] == 0x01:
            # 第一次 LCP-Configuration-Req 请求返回 Rej 响应包
            if self.clientMap[pkt.src]['req'] == 0:
                self.clientMap[pkt.src]['req'] += 1
                print("第 %d 次收到LCP-Config-Req" % self.clientMap[pkt.src]["req"])
                print("处理Req请求，发送LCP-Config-Rej包")
                self.send_lcp_reject_packet(pkt)
                print("发送LCP-Config-Req包")
                self.send_lcp_req_packet(pkt)
            # 后面的 LCP-Configuration-Req 请求均返回 Ack 响应包
            else:
                self.clientMap[pkt.src]['req'] += 1
                print("第 %d 次收到LCP-Config-Req" % self.clientMap[pkt.src]["req"])
                print("处理Req请求，发送LCP-Config-Ack包")
                self.send_lcp_ack_packet(pkt)
        # 处理 LCP-Configuration-Rej 请求
        elif bytes(pkt.payload)[8] == 0x04:
            print("处理Rej请求，发送LCP-Config-Req包")
            self.send_lcp_req_packet(pkt)
        # 处理 LCP-Configuration-Ack 请求
        elif bytes(pkt.payload)[8] == 0x02:
            self.clientMap[pkt.src]['ack'] += 1
            print("第 %d 收到LCP-Config-Ack" % self.clientMap[pkt.src]["ack"])
        else:
            pass
clientMap 请无视，最开始是打算支持多个 client，并做记录使用，但是发现拦截根本不用实现这个。
其中的方法我们先不展开，到时候会给大家把所有代码放上来，根据方法名大家应该能猜到是用来干嘛的。
###  Authentication 阶段
链路建立起来后，应该向下一个阶段跃迁，下一个阶段一般是 Authentication。一般来说就只有 PAP 和 CHAP。
CHAP 在高校拨号客户端中使用还并不算多，大多采用 PAP，所以 CHAP 我们暂且按下不表，相信要是你能看完这篇文章并自己动手实践的话，CHAP
的分析对你来说也是手到擒来。
在这里我们主要介绍 PAP 认证以及最最关键的环节：抓取账号密码。
PAP 的 Protocol 字段为 0xc023
PAP 包格式见下图
从中我们可以看到 CODE 字段为 1，代表一个 Authentication-Request。前面我们说过了，Identifier
字段在链路建立阶段，这个字段的值是一样的，然后跃迁到下一阶段后，这个字段的值随着每个请求递增。
PAP 包的认证方式是由被认证端主动发起，被认证端发送明文口令至认证端，由对方认证。
PAP 并不能防止重放和穷举等攻击，而 CHAP 是由认证端主动发起（challenge 挑战），具体的安全提升大家可以自行查阅相关资料。
其中的 CODE 字段我们可以参见下表
CODE 值 | 报文名称  
---|---  
1 | Authentication-Request  
2 | Authentication-Ack  
3 | Authentication-Nak  
我们所做的是拦截，所以我们只需要关心 Authentication-Request 的 Data 字段就好，Data 字段中，Peer-ID（用户名）字段，Password字段，它们都是明文的。
这里多说一点关于 Authentication-Ack 和 Authentication-Nak，如果认证成功，认证端会返回一个 Ack
并携带成功信息给被认证端，相反，认证失败会返回 Nak 并携带相关信息。
所以我们要做的就是在收到 Authentication-Request 包时解析出账号密码即可完成我们的小 demo 了。
代码如下
    # 解析pap账号密码
    def get_papinfo(self, pkt):
        # pap-req
        _payLoad = bytes(pkt.payload)
        if _payLoad[8] == 0x01:
            _nUserLen = int(_payLoad[12])
            _nPassLen = int(_payLoad[13 + _nUserLen])
            _userName = _payLoad[13:13 + _nUserLen]
            _passWord = _payLoad[14 + _nUserLen:14 + _nUserLen + _nPassLen]
            print("get User:%s,Pass:%s" % (str(_userName), str(_passWord)))
            #self.send_pap_authreject(pkt)
            if pkt.src in self.clientMap:
                del self.clientMap[pkt.src]
            print("欺骗完毕....")
0x01 即代表 CODE 字段的 Authentication-Request。我们只需要从这个包里面按照抓包中的格式进行解析即可获取账号密码。
总体完成代码我会放在文章最后
## 遇到的一些坑
就算是一个并不算很困难的东西，但是在做这个东西的过程中还是遇到了不少坑，我在这里记录一下，免得后人和我一样踩坑。
最开始我想着因为都是本机搭建 client 和 server，那么我直接把链路层的 source 和 destination 的 mac
都设置为本机的物理网卡 mac，也就是全部采用第一个 PADI 包中的 source mac，但是我发现 除了最开始的 PADI 和 PADO，后面的包，用
wireshark 根本抓不到，我猜想是不是两个 mac 相同的原因，导致包被丢弃了 client 没收到，或者 client 本身接到这个包，但是发现两个
mac 相同。 于是不继续发送 PADR 了，这个原因我并不明白，可以完整捕获流程的只能是 server
搭建在虚拟机或者网关也就是路由器。这个结果让我十分沮丧。然后我采用了几种我能想到的办法，但是均不奏效。
  9. 最容易想到的应该是伪造 server mac 了。但并不能抓到，我怀疑是没办法找到这个 mac，可能丢弃了，但是我不理解为什么就算找不到应该也会发个包吧，不至于抓包记录都没有。
  10. 我用工具搭建了一个TAP网卡，我用 wireshark 看了下，包的流经是先经过 TAP 网卡，然后 TAP 会作为一个二层交换机，修改源 mac 和目标 mac 后发往以太物理网卡，然后我采用 server 监听 TAP 网卡，发响应包采用物理网卡，但是依旧是后续进行不下去，虽说这两个mac不一样，但是 client 那边依旧没响应，不知道是 client 丢弃了这个包还是说 client 那边没收到。
###  解决
当然这个问题到最后解决了，这里感谢一下老陈的指点。
其实比较简单，问题就是 npcap，毕竟 scapy 和 wireshark 都推荐这个，我也就采用了这个，但是就像前面所说的，就算伪造
mac，应该也会流经物理网卡，但是 npcap 本地发的包收不到client响应包。
所以采用 winpcap 就能正常了，包括两个 mac 相同也可以抓到。
至于这个具体是什么导致的，还是说是一个 bug，并不是太清楚。
## 你还可以做哪些有趣的事情
拦截以后，你可以自己配合自己的路由器进行拨号。
甚至大胆一点，你也可以尝试给客户端一个成功的 Authentication-Ack，看客户端会是什么效果，要是你继续模拟完整个流程，包括
IPCP，那么客户端会按照你的想法给你发送心跳包吗？
## 代码地址
[PPPoE-Intercept](https://github.com/akkuman/pppoe-intercept)
## 参考资料
  * [How To : 从Netkeeper 4.X客户端获取真实账号](https://blog.sunflyer.cn/archives/460)
  * [RFC 2516 – A Method for Transmitting PPP Over Ethernet (PPPoE)](https://datatracker.ietf.org/doc/rfc2516/)
  * [RFC 1570 – PPP LCP Extensions](https://datatracker.ietf.org/doc/rfc1570/)
  * [RFC 1661 – The Point-to-Point Protocol (PPP)](https://datatracker.ietf.org/doc/rfc1661/)
  * [点到点协议PPP-百度文库](https://wenku.baidu.com/view/e644ba4f33687e21af45a916)
  * [PPP（three P）基本原理](http://support.huawei.com/huaweiconnect/enterprise/huawei/m/ViewThread.html?tid=364813)
  * [PPPoE-hijack](https://github.com/Karblue/PPPoE-hijack)
  * [PPPoE工作原理以及PPPoE帧格式](http://www.360doc.com/content/12/0312/20/3725126_193822217.shtml)
## 致谢
感谢踩坑无助的时候[老陈](https://blog.sunflyer.cn/)的提点