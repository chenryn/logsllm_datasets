### 一、前言
在分析过众多的基础漏洞后，我将漏洞的利用投向真实合约环境中。而最近“币圈”的点点滴滴吸引着我，所以我阅读了一些代币合约并分析与代币系统相关的合约漏洞。
本文针对一种部署在以太坊上的博彩合约进行分析，包括代码分析以及漏洞测试，最后针对真实以太坊环境进行分析。
### 二、庞氏代币介绍
对于刚刚接触区块链的同学来说，应该会经常听到人们谈论“币圈”。而“币圈”也是推动区块链成为家喻户晓产品的一个重要的因素。而在形形色色的区块链金融产品中，我们或多或少会看到“庞氏”骗局的影子。
所谓 **“庞氏”骗局**
就是：他们向投资者承诺，如果你向某合约投资一笔以太坊，它就会以一个高回报率回赠你更多的以太币，然而高回报只能从后续的投资者那里源源不断地吸取资金以反馈给前面的投资者。
例如某些基于EOS开发的博彩类产品，所采用的的投注方式就是“玩家使用EOS代币与项目方发行的代币MEV进行替换”，然后利用代币再进行博彩。除了在智能合约中“埋雷”，发行代币“血洗”玩家，开发者其实还有个“杀手锏式”的方法让参与者的钱乖乖进入他的口袋，那就是开发“庞氏骗局”智能合约。常见的是一种“庞氏骗局合约”，该合约是这样设定的：如果你向某合约投资一笔以太币，它就会以高回报率回赠更多的以太币，高回报的背后是从后续投资者那里源源不断地吸取资金以反馈给前面的投资者。
对于区块链来说，它的底层机制能够降低信任风险。区块链技术具有开源、透明的特性，系统的参与者能够知晓系统的运行规则，验证账本内容和账本构造历史的真实性和完整性，确保交易历史是可靠的、没有被篡改的，相当于提高了系统的可追责性，降低了系统的信任风险。
所以这也就是为什么有如此多的用户选择将资金投入到区块链平台中。
### 三、合约分析
#### 1 合约介绍
在本文中，我们来介绍`ETHX`代币合约。ETHX是一个典型的庞氏代币合约。该合约可以看成虚拟币交易所，但只有ETH和ETHX (ERC20
token)交易对，每次交易，都有部分的token分配给整个平台的已有的token持有者，因此token持有者在持币期间，将会直接赚取新购买者和旧抛售者的手续费。所以这也不断激励着用户将自己以太币投入到合约中，以便自己占有更多的股份来获取到更多的利润。
与我上次分析的`Fomo3D`合约类似，此合约当你投入了一定以太币后，就需要等相当长的时间才能够把本金赚足。而在这个过程中又不断有新用户参与到合约中，而源源不断的自己最后的获益者也就是合约创建者本人了。
下面我们就针对这个合约进行详细的分析，来看看合约创建者是以何思路来设计这个合约的。
#### 2 代码分析
以太坊合约详情如下：
代码如下：
    pragma solidity ^0.4.19;
    // If you wanna escape this contract REALLY FAST
    // 1. open MEW/METAMASK
    // 2. Put this as data: 0xb1e35242
    // 3. send 150000+ gas
    // That calls the getMeOutOfHere() method
    // Wacky version, 0-1 tokens takes 10eth (should be avg 200% gains), 1-2 takes another 30eth (avg 100% gains), and beyond that who the fuck knows but it's 50% gains
    // 10% fees, price goes up crazy fast ETHCONNNNNNNNNNNECT! www.ethconnectx.online
    contract EthConnectPonzi {
        uint256 constant PRECISION = 0x10000000000000000;  // 2^64
        // CRR = 80 %
        int constant CRRN = 1;
        int constant CRRD = 2;
        // The price coefficient. Chosen such that at 1 token total supply
        // the reserve is 0.8 ether and price 1 ether/token.
        int constant LOGC = -0x296ABF784A358468C;
        string constant public name = "ETHCONNECTx";
        string constant public symbol = "ETHX";
        uint8 constant public decimals = 18;
        uint256 public totalSupply;
        // amount of shares for each address (scaled number)
        mapping(address => uint256) public balanceOfOld;
        // allowance map, see erc20
        mapping(address => mapping(address => uint256)) public allowance;
        // amount payed out for each address (scaled number)
        mapping(address => int256) payouts;
        // sum of all payouts (scaled number)
        int256 totalPayouts;
        // amount earned for each share (scaled number)
        uint256 earningsPerShare;
        event Transfer(address indexed from, address indexed to, uint256 value);
        event Approval(address indexed owner, address indexed spender, uint256 value);
        //address owner;
        function EthConnectPonzi() public {
            //owner = msg.sender;
        }
        // These are functions solely created to appease the frontend
        function balanceOf(address _owner) public constant returns (uint256 balance) {
            return balanceOfOld[_owner];
        }
        function withdraw(uint tokenCount) // the parameter is ignored, yes
          public
          returns (bool)
        {
            var balance = dividends(msg.sender);
            payouts[msg.sender] += (int256) (balance * PRECISION);
            totalPayouts += (int256) (balance * PRECISION);
            msg.sender.transfer(balance);
            return true;
        }
        function sellMyTokensDaddy() public {
            var balance = balanceOf(msg.sender);
            transferTokens(msg.sender, address(this),  balance); // this triggers the internal sell function
        }
        function getMeOutOfHere() public {
            sellMyTokensDaddy();
            withdraw(1); // parameter is ignored
        }
        function fund()
          public
          payable 
          returns (bool)
        {
          if (msg.value > 0.000001 ether)
                buy();
            else
                return false;
          return true;
        }
        function buyPrice() public constant returns (uint) {
            return getTokensForEther(1 finney);
        }
        function sellPrice() public constant returns (uint) {
            return getEtherForTokens(1 finney);
        }
        // End of useless functions
        // Invariants
        // totalPayout/Supply correct:
        //   totalPayouts = \sum_{addr:address} payouts(addr)
        //   totalSupply  = \sum_{addr:address} balanceOfOld(addr)
        // dividends not negative:
        //   \forall addr:address. payouts[addr]  1000000 ether)
                revert();
            var sender = msg.sender;
            // 5 % of the amount is used to pay holders.
            var fee = (uint)(msg.value / 10);
            // compute number of bought tokens
            var numEther = msg.value - fee;
            var numTokens = getTokensForEther(numEther);
            var buyerfee = fee * PRECISION;
            if (totalSupply > 0) {
                // compute how the fee distributed to previous holders and buyer.
                // The buyer already gets a part of the fee as if he would buy each token separately.
                var holderreward =
                    (PRECISION - (reserve() + numEther) * numTokens * PRECISION / (totalSupply + numTokens) / numEther)
                    * (uint)(CRRD) / (uint)(CRRD-CRRN);
                var holderfee = fee * holderreward;
                buyerfee -= holderfee;
                // Fee is distributed to all existing tokens before buying
                var feePerShare = holderfee / totalSupply;
                earningsPerShare += feePerShare;
            }
            // add numTokens to total supply
            totalSupply += numTokens;
            // add numTokens to balance
            balanceOfOld[sender] += numTokens;
            // fix payouts so that sender doesn't get old earnings for the new tokens.
            // also add its buyerfee
            var payoutDiff = (int256) ((earningsPerShare * numTokens) - buyerfee);
            payouts[sender] += payoutDiff;
            totalPayouts += payoutDiff;
        }
        function sell(uint256 amount) internal {
            var numEthers = getEtherForTokens(amount);
            // remove tokens
            totalSupply -= amount;
            balanceOfOld[msg.sender] -= amount;
            // fix payouts and put the ethers in payout
            var payoutDiff = (int256) (earningsPerShare * amount + (numEthers * PRECISION));
            payouts[msg.sender] -= payoutDiff;
            totalPayouts -= payoutDiff;
        }
        function getTokensForEther(uint256 ethervalue) public constant returns (uint256 tokens) {
            return fixedExp(fixedLog(reserve() + ethervalue)*CRRN/CRRD + LOGC) - totalSupply;
        }
        function getEtherForTokens(uint256 tokens) public constant returns (uint256 ethervalue) {
            if (tokens == totalSupply)
                return reserve();
            return reserve() - fixedExp((fixedLog(totalSupply - tokens) - LOGC) * CRRD/CRRN);
        }
        int256 constant one       = 0x10000000000000000;
        uint256 constant sqrt2    = 0x16a09e667f3bcc908;
        uint256 constant sqrtdot5 = 0x0b504f333f9de6484;
        int256 constant ln2       = 0x0b17217f7d1cf79ac;
        int256 constant ln2_64dot5= 0x2cb53f09f05cc627c8;
        int256 constant c1        = 0x1ffffffffff9dac9b;
        int256 constant c3        = 0x0aaaaaaac16877908;
        int256 constant c5        = 0x0666664e5e9fa0c99;
        int256 constant c7        = 0x049254026a7630acf;
        int256 constant c9        = 0x038bd75ed37753d68;
        int256 constant c11       = 0x03284a0c14610924f;
        function fixedLog(uint256 a) internal pure returns (int256 log) {
            int32 scale = 0;
            while (a > sqrt2) {
                a /= 2;
                scale++;
            }
            while (a <= sqrtdot5) {
                a *= 2;
                scale--;
            }
            int256 s = (((int256)(a) - one) * one) / ((int256)(a) + one);
            // The polynomial R = c1*x + c3*x^3 + ... + c11 * x^11
            // approximates the function log(1+x)-log(1-x)
            // Hence R(s) = log((1+s)/(1-s)) = log(a)
            var z = (s*s) / one;
            return scale * ln2 +
                (s*(c1 + (z*(c3 + (z*(c5 + (z*(c7 + (z*(c9 + (z*c11/one))
                    /one))/one))/one))/one))/one);
        }
        int256 constant c2 =  0x02aaaaaaaaa015db0;
        int256 constant c4 = -0x000b60b60808399d1;
        int256 constant c6 =  0x0000455956bccdd06;
        int256 constant c8 = -0x000001b893ad04b3a;
        function fixedExp(int256 a) internal pure returns (uint256 exp) {
            int256 scale = (a + (ln2_64dot5)) / ln2 - 64;
            a -= scale*ln2;
            // The polynomial R = 2 + c2*x^2 + c4*x^4 + ...
            // approximates the function x*(exp(x)+1)/(exp(x)-1)
            // Hence exp(x) = (R(x)+x)/(R(x)-x)
            int256 z = (a*a) / one;