20
4.6
14.7
50
11.5
36.8
100
23
73.5
200
46
147
MD5
SHA1
Table 3. Times for performing d hashes on
50 B data, in microseconds, based on the
Crypto++ 5.2.1 Benchmarks [6].
broadcast message—either to authenticate the message us-
ing the color key of the sending router (which that router
doesn’t know) or one to produce an HMAC with the color
key of the sending router (in the direct connection to the
sender case). That is, the verﬁcation step for the chromatic
leap-frog scheme involves computing a single hash, which
is benchmarked as .23 microseconds for MD5 or .74 mi-
croseconds for SHA1 [6]. The setup step for the chromatic
leap-frog scheme requires d− 1 hashes, where d is the num-
ber of colors used in our scheme. Thus, we can use Table 3
to estimate the additional setup time for performing a broad-
cast in the chromatic leap-frog scheme.
Like standard digital signatures, the leap-frog scheme re-
quires a non-trivial static key pre-distribution to the routers,
namely each of the keys for each neighbor set. Such a distri-
bution scheme might be appropriate for a LAN or even a set
of wireless base stations. Thus, leap-frog checking would
be an efﬁcient means to achieve integrity in network broad-
casts. But leap-frog checking is not an efﬁcient solution in
dynamic networks, including peer-to-peer and ad hoc net-
works, where routers can be added to the network dynam-
ically. For such dynamic scenarios, the integrity checking
scheme we describe in Section 3 would be a better choice.
Security. We claim that our leap-frog schemes can detect
the existence of a malicious router that attempts to modify a
broadcast message from a different sender or that attempts
to inject a spoofed message with a source ID other than it-
self. This claim can of course be extended to multiple ma-
licious routers, assuming that they do not collude (that is,
a malicious router is willing to implicate a malicious router
other than itself). Of course, if the network is not bicon-
nected and a malicious router is an articulation point, then
it can drop messages without being detected. So let us as-
sume that the network is biconnected (which is usually the
case in practice).
Assuming that a router x has no knowledge of the key
k(x) shared by x’s neighbors (or the key ki corresponding
to x’s color), the message sent by x contains a keyed HMAC
that uses a key unknown to x, but known to the predecessor
and successor of x on this path. Thus, without inverting a
cryptographic hash function, if x modiﬁes a broadcast mes-
sage or if x attempts to send a spoofed message, it will be
caught.
Of course, if two malicious routers x and y are adjacent
and colluding, then x can change a message and compute an
HMAC for it using k(y). If y is then willing to compute an
HMAC for this changed message using a key k(z) and send
this to a third router z, then z will accept the false message.
Indeed, if the colluding and adjacent routers x and y simply
report their respective neighbor keys k(x) and k(y) to the
other, then either x or y can create a falsiﬁed message with-
out any additional help from the other router. So we must
assume in the leap-frog scheme that malicious routers do
not collude. This is likely a reasonable assumption in prac-
tice, and we should not be surprised that this scheme has
reduced security over a scheme based on public-key digital
signature veriﬁcation, which would be many times slower.
3 Diverse Key Distribution
Let us now discuss the technique of diverse key distribu-
tion. As mentioned above, the main idea of this technique
is to distribute a small number of keys to each router so that
every pair of routers shares a set keys, but it would take a
considerable number of routers to collude to cover all of
these keys.
3.1 Achieving Diversity Through Overlapping
and Uncensorable Key Sets
Let us begin with a few deﬁnitions. Let K be a set of
keys that are to be distributed to a set S of n devices so that
each device i in S will store a set Ki of L keys from K.
We say that such a key distribution is d-overlapping if the
number of keys shared by any two devices is at least d, that
is,
|Ki ∩ Kj| ≥ d,
for i (cid:2)= j. We deﬁne such a key distribution to be g-
uncensorable1 if, for any two devices i and j, the number
of other devices needed to cover all of the keys in the inter-
section of i and j’s key sets is at least g, that is, we need at
least g sets, Ki1 , Ki2 , . . . , Ki
g so that
Ki ∩ Kj ⊆ Ki1
∪ Ki2
∪ · · · ∪ Ki
g .
A key distribution {K1, K2, . . . , Kn} is (d, g)-diverse if it
is d-overlapping and g-uncensorable. The goal, of course,
is to construct a (d, g)-diverse key distribution of small size,
L, but with d and g being as large as possible. Before we
describe a way of constructing such a key distribution, let us
describe how we could use it to achieve improved integrity
in network routing.
1Our deﬁnition of a g-uncensorable key distribution is equivalent to
a (2, g − 1)-cover-free set system, using the terminology of Stinson et
al. [30].
Proceedings of the 2005 IEEE Symposium on Security and Privacy (S&P’05) 
1081-6011/05 $ 20.00 IEEE
3.2 Broadcasting among Devices Having a Diverse
Key Distribution
A (d, g)-diverse key distribution allows us to have a rich
and robust set of keys to use in HMACs for any message
that is to be broadcast in our network. For example, sup-
pose a device, i, wants to broadcast a message M . The
device i can simply use all of the keys in its Ki set, creating
an HMAC for each one (this requires L calls to a one-way
hash function). A device j receiving the message M and its
HMACs can then be assured that it has at least d keys in its
Kj set that it shares with i; hence, these keys can be used to
validate at least d of the HMACs that i sent (this takes be-
tween d and L calls to a one-way hash function). Moreover,
should all these HMACs (using keys in Ki ∩ Kj) turn out
to be valid, then the device j can place considerable trust in
the integrity of the message M , for it would take at least g
of the routers on the path from i to j to collude in order to
change M to some alternate M (cid:1) in way that could still be
validated with all of the keys in Ki ∩ Kj. (See Figure 2.)
A
Alice
E
B
`
Eve
Bob
Figure 2. An illustration of using HMACs with
a diverse key distribution. Notice that the
keys B1 and C0 are shared between Alice and
Bob but not Eve.
3.3 Achieving Greater Integrity Through Inter-
mediate Validations
The above scheme has the nice property that honest in-
termediate routers, sitting between the devices i and j, need
do no additional work for the sake of validation. They just
need to forward the packets from i to j. We can optionally
add intermediate validation to our scheme, however, with
modest overhead. This would allow us, for example, to stop
falsiﬁed packets supposedly being sent from i to j long be-
fore they reach j. The idea would be to have each inter-
mediate router m check the validity of the message coming
from i using the keys in the set Ki ∩Km (or even just a small
random sample from this set, since this validation will be re-
Proceedings of the 2005 IEEE Symposium on Security and Privacy (S&P’05) 
1081-6011/05 $ 20.00 IEEE
peated by the other honest routers on the path from i to j). If
the device m discovers that the message has been compro-
mised, then device m can simply discard the packet, saving
device j (and the other downstream routers) the trouble.
3.4 Constructing a Diverse Key Distribution
Of course, the efﬁciency of using HMACs with a diverse
key distribution depends on our being able to create such
a distribution using a small universe, K, of keys. That is,
we would like L to be small, while allowing for d and g to
be relatively large. Fortunately, we can create such a key
distribution without too much overhead, for we show in this
section that can distribute to each router i a suitably-chosen
random set Ki of L keys, taken from a universe K of 2L
keys, in way that is likely to be (d, g)-diverse, where L is
Θ(log n), d is Ω(log n), and g is Ω(log L).
Such a distribution would go as follows. We begin by
setting L as a security parameter, but keeping L to be
O(log n), where n is the number of routers. For example,
as we show later in this section, we could choose L to be
20 to achieve a 97% likelihood of detecting any falsiﬁed
packet, or we could set L to be 8(cid:7)log n(cid:8) to achieve a near
certain probability of detecting any falsiﬁed packet. Given
the security parameter L, we create K to be a set of 2L
randomly-chosen keys. This will be our key universe.
We pair up the keys in K into L pairs, with one mem-
ber of each pair being viewed as a “0-bit” key and the
other being viewed as a “1-bit” key. We number these pairs
1, 2, . . . , L. We then assign to each device i a random string
of L bits, b1b2 . . . bL, and we build the set Ki by selecting
the keys from K that correspond to the bits in this string.
That is, if bl = 0, then we include in Ki the l-th 0-bit key;
otherwise, if bl = 1, then we include in Ki the l-th 1-bit
key. This simple random selection process is related to the
randomized bucketed key assignment scheme of Garay et
al. [9] and is likely to give us a diverse key distribution.
Theorem 1: Foranypairofdevices i and j, |Ki ∩ Kj| ≥
L/8,withhighprobability. Theprobabilitythisinequality
doesn’tholdislessthan1/2L/4.
Proof: Since the keys in Ki and Kj are selected according
to the bits in random L-bit strings, the expected size of |Ki∩
Kj| is L/2. By a Chernoff Bound (e.g., see [19]),
Pr(|Ki ∩ Kj| < L/8) <
,
(cid:1)
(cid:2)L/8
4
e3
where e is the base of the natural logarithm. Using the ap-
proximation e = 2.71828 . . ., we can simplify this as
Pr(|Ki ∩ Kj| < L/8) <
1
2L/4 .
(cid:9)(cid:10)
So, for example, if we like to guarantee that any two
routers share at least 2 keys with 97% likelihood, then we
should choose L ≥ 20. Likewise, if want to guarantee that
two routers share log n keys with probability at least
1 − 1
n2 ,
then we should choose L ≥ 8 log n. Thus, we can use this
theorem and the security parameter L to derive bounds on
the d-overlap of our key distribution. The next theorem al-
lows us to derive similar bounds on the g-uncensorability of
our key distribution.
Theorem 2: Foranysubset K(cid:1)
i of N keystakenfromaset
Ki, the expectednumberof other Kj sets needed to cover
K(cid:1)
i isΩ(log N ).
Proof: Since the odds of matching a particular key after m
tries is 1 − 1/2m, the probability of matching all N keys
after m tries is
(cid:2)N
(cid:1)
1 − 1
2m
.
For this probability to reach 1/2, m needs to be Ω(log N ).
(cid:9)(cid:10)
So, we can conclude, then, that a randomly chosen key
distribution, as described above, will be likely to be (d, g)-
diverse, where we can, for example, choose the parameters
so that L is Θ(log n), d is Ω(log n), and g is Ω(log L).
3.5 Dealing with Network Updates
Unlike our leap-frog scheme, the diverse key distribu-
tion scheme is quite tolerant of network updates. Adding
a new node x to the network requires only that we provide
x with L keys so as to maintain the (d, g)-diverse property
for the set of distributed keys. The randomized construction
described above does this, with high probability (assuming
the current number of nodes is proportional to the original
number), and it does not require any changes to existing
keys. Likewise, adding or removing edges in the network
requires no changes to the key sets.
3.6 Evaluation and Analysis
Let us analyze the efﬁciency and security of our diverse
key distribution scheme.
Efﬁciency.
In terms of efﬁciency, the prime competitor
with our key distribution scheme is the key distribution
scheme of Eschenauer and Gligor [8]. Their scheme dif-
fers from ours in two ways. First, they create a large
Proceedings of the 2005 IEEE Symposium on Security and Privacy (S&P’05) 
1081-6011/05 $ 20.00 IEEE
key pool from which they will sample keys for each de-
vice. For example, they advocate creating a key pool of
size roughly 10n for use with n devices. Our key pool is
much smaller, as we advocate a key pool of size O(log n)
for creating a (log n, log log n)-diverse distribution of keys.
Thus, the key-pool overhead in our scheme improves on
that of Eschenauer and Gligor [8] by an exponential fac-
tor. To be fair, we should mention that the goals of Es-
chenauer and Gligor’s scheme are different than ours, since
their scheme is focused on secure point-to-point message
integrity, whereas we are interested in this paper on network
broadcast integrity.
Second, Eschenauer and Gligor [8] perform key distri-
bution by having devices select a set of keys randomly from
the pool, whereas we assign keys according to a random
bit ID assigned to the device. This difference is admittedly
subtle, but it allows for the possibility in our scheme that
a system manager could use a deterministically-chosen set
of error-correcting codes to determine the keys per device,
thereby avoiding the use of randomization. We leave as an
open problem, therefore, the construction of a set of error-
correcting codes that determine a (d, g)-diverse set of keys
for large values of d and g.
In terms of implementation, the setup for a broadcast in
our scheme using a (d, g)-diverse key distribution requires
g hashes, and the veriﬁcation step requires d hashes, each
on strings of size roughly 50 bytes. Thus, we can reuse the
estimates from Table 3 to estimate both the setup and veriﬁ-
cation times for this scheme. For example, if d is 20 and g is
50, then the additional setup time is 36.8 microseconds for
SHA1 hashing and the additional time for the veriﬁcation
step is 14.7 microseconds.
Security. As mentioned above, if the nodes in our net-
work have a (d, g)-diverse set of keys, then, in order to in-
ject a spoofed message or modify an existing message, an
adversary would have to capture g key sets (or have g nodes
collude to perform the requested action). Moreover, in or-
der to falsify the broadcast of a message sent from node i
and received by node j, the set of g malicious nodes would
have to be positioned along the path from i to j.
4 Applications
In this section we detail how the above data integrity
techniques for routing packets can be used in conjunction