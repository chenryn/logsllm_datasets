Proceedings of the 2003 International Conference on Dependable Systems and Networks (DSN’03) 
0-7695-1959-8/03 $17.00 (c) 2003 IEEE
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 04:30:24 UTC from IEEE Xplore.  Restrictions apply. 
model the leaking behavior or update the model.
3.2. Adaptive rejuvenation scheme
We introduce the scheme for adaptive rejuvenation, with
respect to both the statistics and dynamics of the system,
based on adapted performance estimates. The rejuvenation
scheme determines when to acquire data pertaining to mem-
ory leakage and when to recollect the lost resource. Any in-
spection point is a potential point for rejuvenation. Both in-
spection and rejuvenation operations use system resources
and induce certain cost. We attempt to reduce the total cost.
For illustration, we assume the following performance cri-
teria: the probability of the system failure between any two
consecutive inspection points should not be above a pre-
scribed threshold.
The inspection points are determined as below: The ini-
tial time t0 is set at the ﬁnish of the last rejuvenation op-
eration and is considered the ﬁrst inspection point. At the
current inspection point tc, the next inspection point is de-
termined. Let τp be the threshold on the failure probability
over the time period between tc and tn. To meet the perfor-
mance criteria, tn is bounded from above as follows,
(cid:3) tn
(cid:4)
−
tc
(cid:5)
h(t, M)dt
≤ τp,
or,
1 − exp
(cid:3) tn
tc
h(t, M)dt ≤ − ln(1 − τp).
(10)
To minimize the inspection frequency, we select tn so that
the interval (tc, tn) is as large as possible. In the presence
of memory leakage, h(t, M) increases with time. Conse-
quently, the interval length tn − tc decreases with time and
invokes frequent inspection. To prevent this from happen-
ing, we introduce a lower bound T∆ on the interval length.
When the interval length is smaller than T∆, a rejuvenation
operation is scheduled immediately.
We summarize the rejuvenation scheduling as fol-
lows.
◦ Specify a threshold τp on the failure probability and a
lower bound T∆ on the length of the interval between
two consecutive inspection points,
◦ At any inspection point tc, get the adapted estimate of
◦ Determine the next inspection point tn,
h(t), as shown in Section 3.1,
(cid:6)
t :
(cid:3) t
tc
(cid:7)
h(t)dt ≤ − ln(1 − τp)
,
(11)
tn = max
◦ If tn > tc + T∆, let the system operation continue until
the next inspection point; otherwise schedule an imme-
diate rejuvenation operation.
By this policy, the rejuvenation sequence is a subsequence
of the inspection sequence and neither of them is necessarily
equispaced. We illustrate the scheduling policy in Figure 4.
The horizontal axis is the time from the last rejuvenation t0,
h(t)
t
1
t
2
t
3
t
Figure 4. Illustration of rejuvenation schedul-
ing
and the vertical axis is the estimated failure rate, which is
adjusted according to the on-line measurements. At time t0,
we determine the next inspection point t1 by equation (10).
That is, the area under h(t) between t0 and t1 is no larger
than − ln(1−τp). At t1, we collect the data pertaining to the
memory loss and lift the estimate adaptively. According to
the adjusted estimation, we obtain the next inspection point
t2. Notice that the intervals are decreasing in length, which
indicates the presence of an aging source. Assume that at
t3, we have t4 − t3 < T∆. A rejuvenation operation takes
places at t3. As a result, t0 is reset and (cid:7)(t0) = 0. The
∗(t0), which is obtained by
failure rate at t0 is set as the h
solving the leak-less model described in Section 2.
4. Numerical Illustrations
We present a set of numerical results to illustrate the key
aspects of the adaptive software rejuvenation (ASR) frame-
work and their impacts. We specify ﬁrst the system for
the illustrative experiments shown in this section. The total
amount of the system resource is M. The arrival of resource
requests is a Poisson process with rate λ. The resource hold-
ing time per request follows an exponential distribution with
parameter µ. The resource amount per request is a random
variable of Erlang distribution with parameter (α, γ), the
mean value of which is α/γ, see (6). The parameters are set
with the values in the table below. In the leak-present case,
M λ
100
0.8
µ
0.2
γ
7
α
30
we assume that the expected leak function is (cid:7)(t) = βλt,
Proceedings of the 2003 International Conference on Dependable Systems and Networks (DSN’03) 
0-7695-1959-8/03 $17.00 (c) 2003 IEEE
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 04:30:24 UTC from IEEE Xplore.  Restrictions apply. 
where β = 25/24, t is the time from the last rejuvena-
tion. For the solution of the non-homogeneous CTMC, as
in Figure 2, we use a piecewise constant function to approx-
imate the leak function (cid:7)(t), namely, (cid:7)(ti) = βλti, where
ti are equispaced. The numerical solutions for the model
described in Section 2 are obtained by using MATHEMAT-
ICA and SHARPE [10].
4.1. Degradation due to resource loss
A degradation model must address a degradation source
or aging agent and give a quantitative description of the
measurable, pertinent data. We are concerned, in particu-
lar, with degradation due to resource loss. The amount of
lost resource can be detected in many systems [5]. A prin-
ciple of our methodology for degradation modeling is that
the impact of resource loss on performance degradation be
differentiated from that of the other affecting factors, such
as the workload.
Figure 5 shows the impact of resource loss on the sys-
tem reliability and on the failure rate. The dash lines are for
the leak-free case and the solid lines are for the leak-present
case. The upper plot shows that for any value p ∈ (0, 1), the
failure probability of the leak-present reaches it earlier than
that without leaking. This can be seen more clearly from
the comparison in the failure rate in the lower plot. While
the failure rate remains within a relatively low and narrow
range in the leak-free case, it is increasing monotonically
with time in the leak-present case and, therefore, manifest-
ing the aging phenomenon. We note that the temporal range
in the lower plot is shorter than that in the upper plot for the
illustration purpose.
4.2. Optimal rejuvenation with adaptive approach
The adaptive rejuvenation approach introduced in Sec-
tion 3.2 explores more search space for the rejuvenation op-
timization problem. For illustration purpose, we set the tol-
erance τp = 0.05 on the failure probability and the lower
bound T∆ = 2 on the length of the interval between two
consecutive inspection points.
Initially, by model-based
analysis, we obtain an estimate of the failure rate and select
the ﬁrst inspection point at t1 = 14.5. Further inspection
ﬁnds that the amount of leaked memory at t1 is 4, which is
lower than the expected leak at t1, (cid:7)(t1) = βλt1 = 12. We
adjust our estimation as shown in Figure 6 and select the
next inspection point at t2 = 20.5. We adapt the estimates
at t = 20.5 and then at t = 24 similarly. At t = 24, we
schedule a rejuvenation because the next inspection point
is not far enough. As long as the aging agent is active, the
inspection intervals are getting smaller from the last rejuve-
nation point to the next one, as shown in Figure 6.
1
0.9
0.8
0.7
0.6
)
t
(
F
0.5
0.4
0.3
0.2
0.1
0
0
0.12
0.1
0.08
)
t
(
h
0.06
0.04
0.02
0
0
with leak
without leak
100
200
time
300
400
500
with leak
without leak
10
20
30
time
40
50
60
Figure 5. Performance degradation due to re-
source loss: the failure time distribution (top)
and the failure rate (bottom)
5. Conclusion
We have presented the framework of adaptive soft-
ware rejuvenation (ASR). We have illustrated the ideas
and techniques within the speciﬁc context of performance
degradation due to resource leaks. The adaptive analysis
and method for integrating model-based and measurement-
based approaches is novel, to our knowledge. Both the
statistics and dynamics of an operating software system are
respected. The adaptation method enables improvements
in performance estimation and rejuvenation scheduling. In
modeling, our methodology differs from previous meth-
ods. Especially, our model for performance degradation due
to resource leaks provides a direct connection between re-
source leaks and the failure rate. We demonstrated in Sec-
tion 4 an increasing failure rate in the presence of resource
leaks.
The objective of the ASR framework is to make reju-
venation more effective in practical applications. To this
end, application-speciﬁc models, application-speciﬁc opti-
mization objectives, and implementation-speciﬁc issues are
to be developed. Presently, a rejuvenation testbed is under
Proceedings of the 2003 International Conference on Dependable Systems and Networks (DSN’03) 
0-7695-1959-8/03 $17.00 (c) 2003 IEEE
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 04:30:24 UTC from IEEE Xplore.  Restrictions apply. 
[8] S. Garg, A. van Moorsel, K. Vaidyanathan, and K. S.
Trivedi. A methodology for detection and estimation of
software aging.
In Proceedings of the 1998 International
Symposium on Software Reliability Engineering, pages 283–
292, Paderborn, Germany, November 1998.
[9] Y. Huang, C. Kintala, N. Kolettis, and N. D. Fulton. Soft-
ware rejuvenation: Analysis, module and applications.
In
Proceedings of the 25th International Symposium on Fault
Tolerant Computing, pages 381–390, Pasadena, CA, June
1995.
[10] R. Sahner, K. S. Trivedi, and A. Puliaﬁto. Performance
and Reliability Analysis of Computer Systems: An Example-
Based Approach Using the SHARPE Software Package.
Kluwer Academic Publishers, Boston, November 1995.
[11] P. K. Sen. Estimates of the regression coefﬁcient based on
Kendall’s tau. Journal of the American Statistical Associa-
tion, 63:1379–1389, 1968.
[12] A. T. Tai, S. N. Chau, L. Alkalaj, and H. Hecht. On-board
preventive maintenance: Analysis of effectiveness and opti-
mal duty period. In Proceedings of the Third International
Workshop on Object-Oriented Real-Time Dependable Sys-
tems, pages 40–47, Newport Beach, CA, 1997.
[13] K. Vaidyanathan and K. S. Trivedi. A measurement-based
model for estimation of resource exhaustion in operational
software systems. In Proceedings of the 10th International
Symposium on Software Reliability Engineering, pages 84–
93, Boca Raton, Florida, November 1999.
0.12
0.1
0.08
)
t
(
h
0.06
0.04
0.02
0
0
a priori estimate
adapted estimate
rejuvenation
5
10
15
time
20
25
30
35
Figure 6. Illustration of the rejuvenation pol-
icy
development.
We would like to add that the ASR framework requires
that the adaptive analysis be efﬁcient. Since many solutions
are obtained by numerical algorithms, it is important to de-
velop models with respect to computational feasibility and
complexity on the one side and develop algorithms that ex-
ploit the model structures on the other side.
References
[1] A. Avritzer and E. J. Weyuker. Monitoring smoothly degrad-
ing systems for increased dependability. Empirical Software
Engineering Journal, 2(1):59–77, 1997.
[2] A. Bobbio, M. Sereno, and C. Anglano. Fine grained soft-
ware degradation models for optimal software rejuvenation
policies. Performance Evaluation, 46:45–62, 2001.
[3] K. Cassidy, K. Gross, and A. Malekpour. Advanced pattern
recognition for detection of complex software aging in on-
line transaction processing servers.
In Proceedings of the
2002 International Conference on Dependable Systems and
Networks, pages 478–482, Washington D.C., 2002.
[4] T. Dohi., K. Goseva-Popstojanova, and K. S. Trivedi. Statis-
tical non-parametric algorithms to estimate the optimal soft-
ware rejuvenation schedule. In Proceedings of the 2000 Pa-
ciﬁc Rim International Symposium on Dependable Comput-
ing, pages 77–84, Los Angeles, CA, December 2000.
[5] C. Erickson. Memory leak detection in embedded systems.
Linux Journal, Web Article 6059, March 2003.
[6] S. Garg, A. Puliaﬁto, M. Telek, and K. S. Trivedi. Analysis
of software rejuvenation using Markov regenerative stochas-
tic Petri Nets.
In Proceedings of the Sixth International
Symposium on Software Reliability Engineering, pages 180–
187, Toulouse, France, October 1995.
[7] S. Garg, A. Puliaﬁto, M. Telek, and K. S. Trivedi. Analy-
sis of preventive maintenance in transactions based software
systems. IEEE Transactions on Computers, 47(1):96–107,
January 1998.
Proceedings of the 2003 International Conference on Dependable Systems and Networks (DSN’03) 
0-7695-1959-8/03 $17.00 (c) 2003 IEEE
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 04:30:24 UTC from IEEE Xplore.  Restrictions apply.