diﬀerent categories, and EX denotes the current execution context.
58
J. Zeng et al.
Table 1. Resolved access types based on the behavior.
Behavior
Oi is created by calling kmalloc
Oi is freed by calling kfree
A memory read ﬁeld Fj of Oi
Read (Oi, Fj ) ∧ Fj ∈ pointer ﬁeld
A memory write to ﬁeld j of Oi
Category
Creation (Oi)
Deletion (Oi)
Read (Oi, Fj )
Traversal (Oi, Fj )
Write (Oi, Fj )
Initialization (Oi, Fj ) Write (Oi, Fj ) ∧ ﬁrst time write to Fj
Other contexts, e.g., periodical access
Others
To save both mem-
ory and disk space of
our meta-data, we also
encode EX. Basically,
EX is composed with
(1) the low level access
behavior that includes the
program counter (PC) of
Read, Traversal, Write,
Initialization of (Oi, Fk), or the entry address of kmalloc or kfree if it is
object creation/deletion, as well as the encoding of these accesses; (2) middle
level callsite chain and the corresponding oﬀset in the running kernel stack to
locate each function’s return address; and (3) the top level context that is either
a syscall number, or an interrupt number, or the value of MSB19(esp) of ker-
nel thread. We also encode EX with an integer and use a hash table to store
the mapping between the integer and the concrete execution context. Our tap
points uncovering will scan the dumped meta-data to eventually uncover the tap
points.
3.3 Tap Points Uncovering
Once collected the record describing how a particular type of monitored kernel
object is accessed, the ﬁnal step of AutoTap is to perform an oﬄine analysis
to further derive the tap points for each type of kernel object. At a high level,
for a given syntactic type of a kernel object, we traverse our memory-dumped
HTtype and locate its ﬁeld access context . For each EX, we rebuild
a context-chain according to our encoding. The top of the chain is the highest
level execution context (i.e., syscall, interrupt, or kernel thread), followed by the
callsite chain. Examples of such context-chains are illustrated in Fig. 3. After
having the context-chain, we are then ready to extract the tap points.
Fig. 3. Enumerated and simpliﬁed cases for tap points uncovering. Note that si denotes
ith syscall, ii denotes ith interrupt, ti denotes ith kernel thread, f, g, h etc. all denotes
function calls, Ti represents the syntactic type, and Ti[m] denotes the ﬁeld m of Ti.
Automatic Uncovering of Tap Points from Kernel Executions
59
Introspection Related Tap Points. Among all the tap points, those related
to object creation, deletion, traversal, and ﬁeld read are of particular interest
to introspection, especially for the detection of hidden kernel objects. In the
following, we present how we uncover these tap points:
– Object Creation and Deletion. Given a speciﬁc syntactic type Ti (note
that syntactic type is used to ﬁnd the tap points, and semantic type is used to
pinpoint the one we want) for a kernel object, we scan the context-chain, if the
leaf node of the chain creates/deletes a kernel object with the matched type,
then the tap points in this context chain will be included in the result. Ideally,
if the leaf node is unique among all the types, we can directly output the
PC that calls the leaf function as the corresponding tap points for this type.
However, these functions might also create other types of object. Therefore,
we will scan the context-chain again, and compare with other types to produce
the ﬁnal result.
Speciﬁcally, there are at most three cases for the creation and deletion related
tap points. One is the leaf node that is unique among all observed types
(Fig. 3(a)), and as discussed we directly output the call-site PC of the leaf
function as the tap points (function h and function k in this case) and these
tap points are context-insensitive. Otherwise, we scan further and compare
their parent functions (Fig. 3(b) and (c)). If they diﬀer at their closest parent
function, then we use the call-chain from the diﬀed parent function to the leaf
node (Fig. 3(b)) and use the chained call-site PC as the tap points and these
tap points are context-sensitive; otherwise we will scan until we reach their root
node, and in this case we will use the entire context chain (Fig. 3(c)). Recall
that there must exist a unique callchain for each syntactic object (Sect. 3.1).
Therefore, we will not have a case in which we cannot ﬁnd the unique context
chain even though we have reached the root.
– Object Traversal. The tap points for object traversal are critical for intro-
spection, especially if we aim to identify the hidden objects. To identify such
tap points, we scan the context chain: if we observe there is a pointer ﬁeld
read from object Oi to reach object Oj, we conclude there is an object traver-
sal in the observed function with the tap point of the P C that performs the
read operation. If this P C only accesses this particular type of object, we just
use this P C as the tap points; otherwise, we will use the call-chain as what
we do in object creation/deletion tap points discovery. Also, we can identify
recursive type traversal if both Oi and Oj share the same type, otherwise it
will be a non-recursive traversal.
– Object Field Read. Pointer ﬁeld read can allow us to identify the object
traversal tap points. Non pointer ﬁeld can also lead to certain interesting tap
points. Similarly to how we identify object traversal tap points where we focus
on the pointer ﬁeld, we will also derive all the non pointer ﬁeld read tap points.
Other Tap Points. In addition, there are also other types of tap points, such
as object ﬁeld initialization and object ﬁeld (hot) write. Though these tap points
may not be directly used in introspection, they could be useful for kernel function
60
J. Zeng et al.
reverse engineering in general. AutoTap does support identify these tap points.
For instance, it becomes straightforward to identify the initialization point (the
ﬁrst time memory write). The only issue is there may not exist a centralized func-
tion that initializes all the ﬁeld of an object. For example, as shown in Fig. 3(d),
the leaf node may just initialize partial ﬁelds of an object. Therefore, we need to
hoist the ﬁeld initialization information to their parent functions. Such hoist opera-
tion is a recursive procedure and we will use the lowest parent function that cannot
expand the scope further of the ﬁelds of Ti as the initialization tap points for the
observed ﬁeld. We are also interested in several other particular interesting types of
tap points, such as the periodic functions that are executed in the timer interrupts.
We will demonstrate how to use these tap points in Sect. 5.
4 Evaluation
We have implemented AutoTap. The online analysis component is built atop
Pemu [29] by reusing a large amount of code base from Argos [30], and the
oﬄine component is built using python. In this section, we present our evaluation
result.
Experiment Setup. The input to AutoTap is the kernel API speciﬁca-
tion, the available kernel data structure deﬁnitions for kernel module devel-
opers, and the test cases to run the kernel. We acquired kernel API speciﬁca-
tion, namely, function name, the type of its arguments and return values from
/lib/modules/KERNEL VERSION/build. We extracted the kernel data structure
deﬁnitions from the available kernel header ﬁles. In order to intercept the kernel
APIs for object tracking and semantic type inference, we identiﬁed their function
entry addresses from /proc/kallsyms.
To run the kernel, we
used the test cases from
the Linux-test-project [1],
as what we have done in
FpCk [14]. We took 10
recent released Linux ker-
nels, presented in the ﬁrst
column of Table 2, as the
guest OS for the test, and
executed them inside our
VMM. The testing host
OS runs ubuntu-12.04
with
3.5.0-51-
generic. The evaluation
was performed on a machine
with a 64-bit Intel Core i-7
CPU with 8 GB physical memory.
e
r
u
t
c
u
r
t
S
a
t
a
D
c
i
t
c
a
t
n
y
S
#
kernel
  1,500
  1,000
  2,500
  2,000
  500
  0
Untyped
Typed by Header Files
Typed by Kernel API
8
2
6
.
.
2
9
2
6
.
.
2
0
3
6
.
.
2
8
1
7
2
.
.
6
2
.
.
8
1
3
6
.
.
8
2
3
6
.
.
2
.
2
3
3
6
.
.
2
Linux Kernel
.
8
8
3
6
.
.
2
2
5
0
.
.
3
8
5
2
.
.
3
n
a
e
m
Fig. 4. Type resolution result for each kernel
To identify a tap point for a particular type of object, AutoTap ﬁrst derives
all the tap points for each syntactic type, and then us0es the resolved semantic
Automatic Uncovering of Tap Points from Kernel Executions
61
type (e.g., task struct) associated with the syntactic type to eventually pin-
point the tap points of introspection interest. Therefore, we ﬁrst present the
result regarding how AutoTap performed to identify the tap points for the
syntactic type, and then the tap points for the semantic type.
Result for Syntactic Types. We ﬁrst report how our kernel object tracking
component performed in Fig. 4. As shown in this ﬁgure, our kernel object tracking
component identiﬁes on average 1.8 thousand unique syntactic types. We can see
about 57 % of them can be semantically typed by using the kernel APIs. With the
public open kernel module development header ﬁles, it can type additionally 35 %
of them. In other words, close to 90 % of the data structures can be semantically
typed.
Next, we report how our second and third components performed in Table 2.
Speciﬁcally, the result of our object access resolution is reported from the 2nd
column to the 7th column. The number of the top level context, namely syscall
context, is reported in the 2nd column, interrupt in the 3th column, and kernel
thread in the 4th column. We can notice that on average, AutoTap observed 219
system call contexts, 7 interrupt/exception contexts (e.g., page fault, timer,
keyboard, device-not-available), and 29 kernel thread contexts. Regarding
the middle level context, we report the total number of function call-site chain in
the |F C| column, and there are 104,971 unique call-site chains associated with
these traced types. Finally, for the lowest level context, we report the total num-
ber of ﬁeld read tap points in |P CR| and write tap points in |P CW| columns. We
can notice that there is a signiﬁcant large number of the unique ﬁeld read/write
access contexts. If we perform manual analysis, it is very challenging to system-
atically identify them all.
Finally, we report the statistics of the tap points uncovered for the introspec-
tion in the rest columns of Table 2. In total, we report ﬁve categories of intro-
spection related to tap points: object creation, object deletion, object recursive
type traversal (RT raversal), object non-recursive type traversal (NT raversal), and
object ﬁeld read (FRead). For each category, we report the number of the tap
points that are context-insensitive (i.e., we can directly use the corresponding
PC as the tap points) in column |P C|, and context-sensitive (i.e., we need to
inspect the call-chain in the corresponding stack frame when the PC is executed)
Table 2. Overall result of tap points uncovered for each tested kernel.
Object Access Resolution
Tap Points Uncovered
Kernel
2.6.27.18
2.6.28
2.6.29
2.6.30
2.6.31.8
2.6.32.8
2.6.33
2.6.38.8
3.0.52
3.2.58
FRead
|P C| |F C|
61632
4209
54706
4235
56866
4102
62927
4367
74504
4159
62115
3943
65531
4082
3838
62361
66432
4445
4373
89204
|Sys| |Int| |T hd| |F C| |P CR| |P CW | |P C| |F C| |P C| |F C| |P C|
89
219
89
218
90
216
97
217
97
217
93
218
94
217
217
97
113
222
227
109
Creation Deletion RT raversal NT raversal
|F C|
21585
18460
18251
20303
21679
18192
14084
18881
20538
27619
|P C|
1402
1435
1515
1598
1482
1500
1221
1541
1695
1739
|F C|
2408
2313
2375
2341
2497
2322
2208
2479
2695
3967
136729
134027
132004
136593
147573
194353
176407
185327
238132
270936
23
22
29
28
28
31
31
33
36
35
77634
73285
69547
40457
74121