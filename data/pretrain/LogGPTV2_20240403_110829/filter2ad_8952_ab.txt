例子：
    python sqlmap.py -u "http://192.168.136.131/sqlmap/mysql/basic/get_int.php?id=1"
    --auth-type Basic --auth-cred "testuser:testpass"
**HTTP协议的证书认证**
参数：`–auth-cert`
当Web服务器需要客户端证书进行身份验证时，需要提供两个文件:`key_file，cert_file`。
`key_file`是格式为PEM文件，包含着你的私钥，`cert_file`是格式为`PEM`的连接文件。
**HTTP(S)代理**
参数：`–proxy,–proxy-cred`和`–ignore-proxy`
使用`–proxy`代理是格式为：`http://url:port。`
当`HTTP(S)`代理需要认证是可以使用`–proxy-cred`参数：`username:password`。
`–ignore-proxy`拒绝使用本地局域网的`HTTP(S)`代理。
**HTTP请求延迟**
参数：`–delay`
可以设定两个`HTTP(S)`请求间的延迟，设定为0.5的时候是半秒，默认是没有延迟的。
**设定超时时间**
参数：`–timeout`
可以设定一个`HTTP(S)`请求超过多久判定为超时，`10.5`表示`10.5`秒，默认是`30`秒。
**设定重试超时**
参数：`–retries`
当`HTTP(S)`超时时，可以设定重新尝试连接次数，默认是3次。
**设定随机改变的参数值**
参数：`–randomize`
可以设定某一个参数值在每一次请求中随机的变化，长度和类型会与提供的初始值一样。
利用正则过滤目标网址
参数：`**–scope**`
例如：
    python sqlmap.py -l burp.log --scope="(www)?\.target\.(com\|net\|org)"
**避免过多的错误请求被屏蔽**
参数：`–safe-url,–safe-freq`
有的web应用程序会在你多次访问错误的请求时屏蔽掉你以后的所有请求，这样在sqlmap进行探测或者注入的时候可能造成错误请求而触发这个策略，导致以后无法进行。
**绕过这个策略有两种方式：**
  1. `--safe-url`：提供一个安全不错误的连接，每隔一段时间都会去访问一下。
  2. `--safe-freq`：提供一个安全不错误的连接，一段频率后会访问一次。
**关掉URL参数值编码**
参数：`–skip-urlencode`
根据参数位置，他的值默认将会被URL编码，但是有些时候后端的web服务器不遵守RFC标准，只接受不经过`URL`编码的值，这时候就需要用`–skip-urlencode`参数。
**每次请求时候执行自定义的python代码**
参数：`–eval`
在有些时候，需要根据某个参数的变化，而修改另个一参数，才能形成正常的请求，这时可以用–eval参数在每次请求时根据所写python代码做完修改后请求。
例子：
    python sqlmap.py -u
    "http://www.target.com/vuln.php?id=1&hash=c4ca4238a0b923820dcc509a6f75849b"
    --eval="import hashlib;hash=hashlib.md5(id).hexdigest()"
上面的请求就是每次请求时根据id参数值，做一次`md5`后作为`hash`参数的值。
#### 注入
**测试参数**
参数：`-p`
如： `-p “id,user-anget”`
**指定要跳过测试的参数**
参数：`–skip`
如：`–skip=”user-angent.referer”`
对于伪静态链接，可以在想测试的参数后面加*，它会测试那个指定的参数
例如：
    python sqlmap.py -u "http://targeturl/param1/value1\*/param2/value2/"
**指定数据库**
参数：`–dbms`
不指定会自动探测，如果知道最好指定
    MySQL、Oracle、PostgreSQL、Microsoft SQL Server、Microsoft
    Access、SQLite、Firebird、Sybase、SAP MaxDB、DB2
**指定服务器系统**
参数：`–os`
不指定会自动探测，支持的有：`Linux、Windows`。
**指定无效的大数字**
参数：`–invalid-bignum`
当你想指定一个报错的数值时，可以使用这个参数，例如默认情况系`id=13，sqlmap`会变成`id=-13`来报错，你可以指定比如`id=9999999`来报错。
**指定无效的逻辑**
参数：`–invalid-logical`
原因同上，可以指定`id=13`把原来的`id=-13`的报错改成`id=13 AND 18=19`。
**注入payload**
参数：`–prefix,–suffix`
在有些环境中，需要在注入的`payload`的前面或者后面加一些字符，来保证`payload`的正常执行。
例如，代码中是这样调用数据库的：
    $query = "SELECT * FROM users WHERE id=(’" . $_GET[’id’] . "’) LIMIT 0, 1";
这时你就需要`–prefix`和`–suffix`参数了：
    python sqlmap.py -u "http://192.168.136.131/sqlmap/mysql/get_str_brackets.php?id=1" -p id --prefix
    "’)" --suffix "AND (’abc’=’abc"
这样执行的SQL语句变成：
    $query = "SELECT * FROM users WHERE id=(’1’)  AND (’abc’=’abc’)
    LIMIT 0, 1";
**修改注入的数据**
参数：`–tamper`
`sqlmap`除了使用`CHAR()`函数来防止出现单引号之外没有对注入的数据修改，你可以使用`–tamper`参数对数据做修改来绕过WAF等设备。  
下面是一个`tamper`脚本的格式：
    # Needed imports
    from lib.core.enums import PRIORITY
    # Define which is the order of application of tamper scripts against
    # the payload
    __priority__ = PRIORITY.NORMAL
    def tamper(payload):
    '''
    Description of your tamper script
    '''
    retVal = payload
    # your code to tamper the original payload
    # return the tampered payload
    return retVal
可以查看 `tamper/` 目录下的有哪些可用的脚本
例如：
    $ python sqlmap.py -u "http://192.168.136.131/sqlmap/mysql/get_int.php?id=1" --tamper tamper/between.py,tamper/randomcase.py,tamper/space2comment.py -v 3
    [hh:mm:03] [DEBUG] cleaning up configuration parameters
    [hh:mm:03] [INFO] loading tamper script 'between'
    [hh:mm:03] [INFO] loading tamper script 'randomcase'
    [hh:mm:03] [INFO] loading tamper script 'space2comment'
    [...]
    [hh:mm:04] [INFO] testing 'AND boolean-based blind - WHERE or HAVING clause'
    [hh:mm:04] [PAYLOAD] 1)/**/And/**/1369=7706/**/And/**/(4092=4092
    [hh:mm:04] [PAYLOAD] 1)/**/AND/**/9267=9267/**/AND/**/(4057=4057
    [hh:mm:04] [PAYLOAD] 1/**/AnD/**/950=7041
    [...]
    [hh:mm:04] [INFO] testing 'MySQL >= 5.0 AND error-based - WHERE or HAVING clause'
    [hh:mm:04] [PAYLOAD] 1/**/anD/**/(SELeCt/**/9921/**/fROm(SELeCt/**/counT(*),CONCAT(cHar(
    58,117,113,107,58),(SELeCt/**/(case/**/whEN/**/(9921=9921)/**/THeN/**/1/**/elsE/**/0/**/
    ENd)),cHar(58,106,104,104,58),FLOOR(RanD(0)*2))x/**/fROm/**/information_schema.tables/**/
    group/**/bY/**/x)a)
    [hh:mm:04] [INFO] GET parameter 'id' is 'MySQL >= 5.0 AND error-based - WHERE or HAVING
    clause' injectable
    [...]
#### 探测
**探测等级**
参数：`–level`
共有五个等级，默认为`1，sqlmap`使用的`payload`可以在`xml/payloads.xml`中看到，你也可以根据相应的格式添加自己的`payload`。
这个参数不仅影响使用哪些`payload`同时也会影响测试的注入点，`GET`和`POST`的数据都会测试，`HTTP
Cookie`在`level`为2的时候
就会测试，`HTTP User-Agent/Referer`头在`level`为3的时候就会测试。
总之在你不确定哪个`payload`或者参数为注入点的时候，为了保证全面性，建议使用高的`level`值。
**风险等级**
参数：`–risk`
共有四个风险等级，默认是1会测试大部分的测试语句，2会增加基于事件的测试语句，3会增加OR语句的SQL注入测试。
在有些时候，例如在UPDATE的语句中，注入一个OR的测试语句，可能导致更新的整个表，可能造成很大的风险。
测试的语句同样可以在`xml/payloads.xml`中找到，你也可以自行添加`payload`。
**页面比较**
参数：`–string,–not-string,–regexp,–code`
默认情况下sqlmap通过判断返回页面的不同来判断真假，但有时候这会产生误差，因为有的页面在每次刷新的时候都会返回不同的代码，
比如页面当中包含一个动态的广告或者其他内容，这会导致sqlmap的误判。此时用户可以提供一个字符串或者一段正则匹配，
在原始页面与真条件下的页面都存在的字符串，而错误页面中不存在（使用–string参数添加字符串，–regexp添加正则），
同时用户可以提供一段字符串在原始页面与真条件下的页面都不存在的字符串，而错误页面中存在的字符串（–not-string添加）。
用户也可以提供真与假条件返回的HTTP状态码不一样来注入，例如，响应200的时候为真，响应401的时候为假，可以添加参数–code=200。
参数：`–text-only,–titles`
有些时候用户知道真条件下的返回页面与假条件下返回页面是不同位置在哪里可以使用–text-only（HTTP响应体中不同）–titles（HTML的title标签中不同）。
#### 注入技术
**测试是否是注入**
参数：`–technique`
这个参数可以指定`sqlmap`使用的探测技术，默认情况下会测试所有的方式。
支持的探测方式如下：
    B: Boolean-based blind SQL injection（布尔型注入）
    E: Error-based SQL injection（报错型注入）
    U: UNION query SQL injection（可联合查询注入）
    S: Stacked queries SQL injection（可多语句查询注入）
    T: Time-based blind SQL injection（基于时间延迟注入）
**设定延迟注入的时间**
参数：`–time-sec`
当使用继续时间的盲注时，时刻使用`–time-sec`参数设定延时时间，默认是5秒。
**设定UNION查询字段数**
参数：`–union-cols`
默认情况下sqlmap测试UNION查询注入会测试1-10个字段数，当–level为5的时候他会增加测试到50个字段数。
设定`–union-cols`的值应该是一段整数，如：12-16，是测试12-16个字段数。
**设定UNION查询使用的字符**
参数：`–union-char`
默认情况下`sqlmap`针对`UNION`查询的注入会使用NULL字符，但是有些情况下会造成页面返回失败，而一个随机整数是成功的，
这是你可以用`–union-char`只定UNION查询的字符。
**二阶SQL注入**
参数：`–second-order`
有些时候注入点输入的数据看返回结果的时候并不是当前的页面，而是另外的一个页面，这时候就需要你指定到哪个页面获取响应判断真假。
`–second-order`后面跟一个判断页面的URL地址。
**列数据**
参数：`-b,–banner`
大多数的数据库系统都有一个函数可以返回数据库的版本号，通常这个函数是version()或者变量@@version这主要取决与是什么数据库。
**用户**
参数：`-current-user`
在大多数据库中可以获取到管理数据的用户。
**当前数据库**
参数：`–current-db`
返还当前连接的数据库。
**当前用户是否为管理用**
参数：`–is-dba`
判断当前的用户是否为管理，是的话会返回True。
**列数据库管理用户**
参数：`–users`
当前用户有权限读取包含所有用户的表的权限时，就可以列出所有管理用户。
**列出并破解数据库用户的hash**
参数：`–passwords`
当前用户有权限读取包含用户密码的彪的权限时，sqlmap会现列举出用户，然后列出hash，并尝试破解。
    $ python sqlmap.py -u "http://********/sqlmap/pgsql/get_int.php?id=1" --passwords -v 1
    [...]
    back-end DBMS: PostgreSQL
    [hh:mm:38] [INFO] fetching database users password hashes
    do you want to use dictionary attack on retrieved password hashes? [Y/n/q] y
    [hh:mm:42] [INFO] using hash method: 'postgres_passwd'
    what's the dictionary's location? [/software/sqlmap/txt/wordlist.txt]
    [hh:mm:46] [INFO] loading dictionary from: '/software/sqlmap/txt/wordlist.txt'
    do you want to use common password suffixes? (slow!) [y/N] n
    [hh:mm:48] [INFO] starting dictionary attack (postgres_passwd)
    [hh:mm:49] [INFO] found: 'testpass' for user: 'testuser'
    [hh:mm:50] [INFO] found: 'testpass' for user: 'postgres'
    database management system users password hashes:
    [*] postgres [1]:
    password hash: md5d7d880f96044b72d0bba108ace96d1e4
    clear-text password: testpass
    [*] testuser [1]:
    password hash: md599e5ea7a6f7c3269995cba3927fd0093
    clear-text password: testpass
可以看到sqlmap不仅勒出数据库的用户跟密码，同时也识别出是PostgreSQL数据库，并询问用户是否采用字典爆破的方式进行破解，
这个爆破已经支持`Oracle`和`Microsoft SQL Server`。
也可以提供-U参数来指定爆破哪个用户的`hash`。
**列出数据库管理员权限**
参数：`–privileges`
当前用户有权限读取包含所有用户的表的权限时，很可能列举出每个用户的权限，sqlmap将会告诉你哪个是数据库的超级管理员。
也可以用-U参数指定你想看哪个用户的权限。
**列出数据库管理员角色**
参数：`–roles`
当前用户有权限读取包含所有用户的表的权限时，很可能列举出每个用户的角色，也可以用-U参数指定你想看哪个用户的角色。
仅适用于当前数据库是`Oracle`的时候。
**列出数据库系统的数据库**
参数：`–dbs`
当前用户有权限读取包含所有数据库列表信息的表中的时候，即可列出所有的数据库。
**列举数据库表**
参数：`–tables,–exclude-sysdbs,-D`
当前用户有权限读取包含所有数据库表信息的表中的时候，即可列出一个特定数据的所有表。
    sqlmap -u "http://192.168.163.138/mutillidae/index.php?page=user-info.php&username=111&password=12123&user-info-php-submit-button=View+Account+Details"
    --tables -D dvwa
如果你不提供-D参数来列指定的一个数据的时候，sqlmap会列出数据库所有库的所有表。
–exclude-sysdbs参数是指包含了所有的系统数据库。
需要注意的是在Oracle中你需要提供的是TABLESPACE_NAME而不是数据库名称。
**列举数据库表中的字段**
参数：`–columns,-C,-T,-D`
当前用户有权限读取包含所有数据库表信息的表中的时候，即可列出指定数据库表中的字段，同时也会列出字段的数据类型。
如果没有使用-D参数指定数据库时，默认会使用当前数据库。
    $ python sqlmap.py -u "http://*******/sqlmap/sqlite/get_int.php?id=1" --columns -D testdb -T users -C name
    [...]