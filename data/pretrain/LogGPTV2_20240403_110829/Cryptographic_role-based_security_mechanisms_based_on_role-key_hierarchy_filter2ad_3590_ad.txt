have ∪rj 6(cid:22)rk {τk} ⊂ ∪ri 6(cid:22)rk {τk}. Conversely, if ∪rj 6(cid:22)rk {τk} ⊂
∪ri 6(cid:22)rk {τk}, then we know ∪rj 6(cid:22)rk {rk} ⊂ ∪ri6(cid:22)rk {rk}. This
relation can become ∪ri (cid:22)rk {rk} ⊂ ∪rj (cid:22)rk {rk}. Since ri ∈
∪ri (cid:22)rk {rk}, we have rj ≺ ri. Hence, the theorem holds.
7
Due to Ui is chosen at random, this scheme do not per-
mit the collision among the role keys, i.e., pki = pkj for
i 6= j. The following theorem tells us that this collision is
neglectable only if the security parameter s is large enough,
moreover, the fast sort algorithm can help us to ﬁnd the
collision.
.
Theorem 2. The collision probability among n integers,
which are chosen from p integers at random, is less than
(n+1)2
4p
Proof. Firstly, the collision probability between t ran-
i=1,Pt
dom integers {ai}t
i=1 and r random integers {bi}r
i=1 bi, is 1
p , where a1, · · · , at ∈R Z∗
Pr
of 3 ≤ t + r ≤ n is Pn
p and b1, · · · , br ∈ Z∗
p.
Secondly, the number of all possible cases of t + r = k is ⌊ k
2 ⌋
for 1 ≤ t, r < n, such that the number of all possible cases
4 < (n+1)2
.
Hence, in terms of Bernoulli’s inequality, the collision prob-
ability is 1 − (1 − 1
. Note that
p )
we do not assume that ai and bj are diﬀerent for 1 ≤ i ≤ t
and 1 ≤ j ≤ r.
2 ⌋ <Pn
4 ≤ (n+1)2
2 = n(n+1)
p = (n+1)2
4p
k=3⌊ k
(n+1)2
k=1
k
4
4
1
i=1 ai =
Since the total number of roles is far less than the size of
space of keys, this theorem means that the collision prob-
ability is neglectable for n ≪ p, e.g., given n = 1000 and
p = 2s = 2160, the collision probability is less than 220
2162 =
2−142. Note that the security of RKH is not related to the
combination of the role-keys, but rely heavily on the hard-
ness of forging [ 1
ξ+x ]G under the bilinear map group system.
The following theorem indicates that the role hierarchy in
RBAC is hidden into role-key hierarchy:
Theorem 3. Under the above assignment, role hierarchy
is in one-to-one correspondence with key hierarchy.
Proof. We show that role hierarchy can be uniquely rep-
resented by key hierarchy: Assume two diﬀerent roles ri
and rj have the same key representation, i.e., ∪ri 6(cid:22)rk {rk} =
∪rj 6(cid:22)rk {rk}, such that ∪ri(cid:22)rk {rk} = ∪rj (cid:22)rk {rk}. This im-
plies that two roles have the same seniors. But we know
ri ∈ ∪ri (cid:22)rk {rk} and rj ∈ ∪rj (cid:22)rk {rk}. Since ri 6= rj, we
have ∪ri(cid:22)rk {rk} 6= ∪rj (cid:22)rk {rk}, which is a contradiction.
Conversely, we show that key hierarchy may also recover
role hierarchy by the following algorithm:
1. For each role ri, it gets the set of roles ∪rj 6(cid:22)rk {rk}
Uk, then compute Ri = ∪rj (cid:22)rk {rk} =
R \ ∪rj 6(cid:22)rk {rk}. Finally, it inserts the Ri into a record
in the search table T .
from P ri6(cid:22)rk
2. While T is not empty, it does the following steps:
(a) It ﬁnds the records Ri’s, which include only one
element, as the set of current roles C, then deletes
these records from the table T ;
(b) For each record Ri ∈ T , if Ri \ C = {ri}, then it
outputs ri ≺d rj for all rj ∈ Ri ∩ C, else it erases
the elements in C, i.e., Ri = Ri \ C;
Let h is the height of role hierarchy. The algorithm recurs h
times and the outputs of recurrence are all edges of one layer
in role hierarchy. This means that this algorithm can recover
the original role hierarchy in polynomial-time. Therefore,
the theorem holds.
e(Wi, Bi,j) · e(Ai,j, H) = e
τ0 + Xrl6(cid:22)ri
 G,
τl
(cid:19)−c
R′ = (cid:18) e (Wi, C2) · e (C1, H)
= e(G, H)
e(G, H)
· e(Wi, H)s
1
τl + xi,j
H
· e
xi,j
τl + xi,j
G, H
(9)
τ0 + Prl6(cid:22)ri
τ0 + Prl6(cid:22)ri
= (cid:18) e(Wi, Bi,j + [β]H) · e(Ai,j + [α]Wi, H)
= (cid:18) e(Wi, Bi,j) · e(Wi, [β]H) · e(Ai,j, H) · e([α]Wi, H)
e(G, H)
e(G, H)
(cid:19)−c
= (e(Wi, [β]H) · e([α]Wi, H))−c · e(Wi, H)s
= e(Wi, H)−c(α+β) · e(Wi, H)s = e(Wi, H)r.
· e(Wi, H)s
(cid:19)−c
· e(Wi, H)s
(10)
(cid:44)(cid:81)(cid:83)(cid:88)(cid:87)
(cid:44)(cid:87)(cid:72)(cid:85)(cid:68)(cid:87)(cid:76)(cid:82)(cid:81)(cid:3)(cid:20)
(cid:44)(cid:87)(cid:72)(cid:85)(cid:68)(cid:87)(cid:76)(cid:82)(cid:81)(cid:3)(cid:21)
(cid:44)(cid:87)(cid:72)(cid:85)(cid:68)(cid:87)(cid:76)(cid:82)(cid:81)(cid:3)(cid:22)
(cid:44)(cid:87)(cid:72)(cid:85)(cid:68)(cid:87)(cid:76)(cid:82)(cid:81)(cid:3)(cid:23)
(cid:20)
(cid:21)
(cid:22)
(cid:23)
(cid:24)
(cid:25)
(cid:26)
(cid:27)
(cid:94)(cid:21)(cid:15)(cid:22)(cid:15)(cid:23)(cid:15)(cid:24)(cid:15)(cid:25)(cid:15)(cid:26)(cid:15)(cid:27)(cid:96)
(cid:94)(cid:20)(cid:15)(cid:22)(cid:15)(cid:23)(cid:15)(cid:24)(cid:15)(cid:25)(cid:15)(cid:26)(cid:15)(cid:27)(cid:96)
(cid:94)(cid:21)(cid:15)(cid:23)(cid:15)(cid:24)(cid:15)(cid:25)(cid:15)(cid:26)(cid:15)(cid:27)(cid:96)
(cid:94)(cid:22)(cid:15)(cid:24)(cid:15)(cid:25)(cid:15)(cid:26)(cid:15)(cid:27)(cid:96)
(cid:94)(cid:21)(cid:15)(cid:23)(cid:15)(cid:25)(cid:15)(cid:26)(cid:15)(cid:27)(cid:96)
(cid:94)(cid:24)(cid:15)(cid:26)(cid:15)(cid:27)(cid:96)
(cid:94)(cid:22)(cid:15)(cid:24)(cid:15)(cid:25)(cid:15)(cid:27)(cid:96)
(cid:94)(cid:96)
(cid:20)
(cid:21)
(cid:22)
(cid:23)
(cid:24)
(cid:25)
(cid:26)
(cid:27)
(cid:94)(cid:20)(cid:96)
(cid:94)(cid:21)(cid:96)
(cid:94)(cid:20)(cid:15)(cid:22)(cid:96)
(cid:94)(cid:20)(cid:15)(cid:21)(cid:15)(cid:23)(cid:96)
(cid:94)(cid:20)(cid:15)(cid:22)(cid:15)(cid:24)(cid:96)
(cid:94)(cid:20)(cid:15)(cid:21)(cid:15)(cid:22)(cid:15)(cid:23)(cid:15)(cid:25)(cid:96)
(cid:94)(cid:20)(cid:15)(cid:21)(cid:15)(cid:23)(cid:15)(cid:26)(cid:96)
(cid:94)(cid:20)(cid:15)(cid:21)(cid:15)(cid:22)(cid:15)(cid:23)(cid:15)(cid:24)(cid:15)(cid:25)(cid:15)(cid:26)(cid:15)(cid:27)(cid:96)
(cid:20)
(cid:21)
(cid:22)
(cid:23)
(cid:24)
(cid:25)
(cid:26)
(cid:27)
(cid:94)(cid:96)
(cid:94)(cid:96)
(cid:94)(cid:22)(cid:96)
(cid:94)(cid:23)(cid:96)
(cid:94)(cid:22)(cid:15)(cid:24)(cid:96)
(cid:94)(cid:22)(cid:15)(cid:23)(cid:15)(cid:25)(cid:96)
(cid:94)(cid:23)(cid:15)(cid:26)(cid:96)
(cid:94)(cid:22)(cid:15)(cid:23)(cid:15)(cid:24)(cid:15)(cid:25)(cid:15)(cid:26)(cid:15)(cid:27)(cid:96)
(cid:20)
(cid:21)
(cid:22)
(cid:23)
(cid:24)
(cid:25)
(cid:26)
(cid:27)
(cid:94)(cid:96)
(cid:94)(cid:96)
(cid:94)(cid:96)
(cid:94)(cid:96)
(cid:94)(cid:24)(cid:96)
(cid:94)(cid:25)(cid:96)
(cid:94)(cid:26)(cid:96)
(cid:94)(cid:24)(cid:15)(cid:25)(cid:15)(cid:26)(cid:15)(cid:27)(cid:96)
(cid:20)
(cid:21)
(cid:22)
(cid:23)
(cid:24)
(cid:25)
(cid:26)
(cid:27)
(cid:94)(cid:96)
(cid:94)(cid:96)
(cid:94)(cid:96)
(cid:94)(cid:96)
(cid:94)(cid:96)
(cid:94)(cid:96)
(cid:94)(cid:96)
(cid:94)(cid:27)(cid:96)
(cid:94)(cid:20)(cid:15)(cid:21)(cid:96)
(cid:20)(cid:16)(cid:33)(cid:22)(cid:15)(cid:20)(cid:16)(cid:33)(cid:23)(cid:15)(cid:21)(cid:16)(cid:33)(cid:23)
(cid:94)(cid:22)(cid:15)(cid:23)(cid:96)
(cid:22)(cid:16)(cid:33)(cid:24)(cid:15)(cid:22)(cid:16)(cid:33)(cid:25)(cid:15)
(cid:23)(cid:16)(cid:33)(cid:25)(cid:15)(cid:23)(cid:16)(cid:33)(cid:26)
(cid:94)(cid:24)(cid:15)(cid:25)(cid:15)(cid:26)(cid:96)
(cid:94)(cid:27)(cid:96)
(cid:24)(cid:16)(cid:33)(cid:27)(cid:15)(cid:25)(cid:16)(cid:33)(cid:27)(cid:15)(cid:26)(cid:16)(cid:33)(cid:27)
Figure 6: Example of extracting role hierarchy from
key hierarchy.
Based on the algorithm in Theorem 3, Figure 6 describes
an example of extracting role hierarchy from key hierarchy
in Figure 5. It shows that the algorithm is eﬀective.
We show that our scheme is secure against collusion, where
two or more users, belonging to diﬀerent roles, cooperate to
discover a user key to which they are not entitled. To dis-
cuss the security against collusion, we make use of a hard
problem, which is called Strong Diﬃe-Hellman (SDH) prob-
lem:
Definition 6. [k-SDH problem]: Given hG, [x]G, [x2]G,
p and G be
· · · , [xk]Gi to compute hc,h 1
a generator chosen from G1 (or G2).
x+ci Gi where c ∈ Z∗
The standard collusion security is based on static collud-
ers. Since we consider dynamic user management, we extend
the security deﬁnition to the one that is a bit more general
than in [7]. More speciﬁcally, we allow the adversary to see
the role key before choosing the corrupted users. Based on
this deﬁnition, we have the following theorem:
Theorem 4. Under the above assignment, the role-based
cryptosystem (RBC) scheme is fully collusion secure. Given
a role-key hierarchy H = {U, K, R, (cid:22)} with |U | = n and
|R| = m, it is (n, n, m)-collusion secure against framing
user attack and role’s privilege attack under Strong Diﬃe-
Hellman (SDH) assumption.
8
We present a proof of this theorem in Appendix B, where
the whole proof for framing attack is given and the proof for
role’s privilege attack is stated brieﬂy because it can be ob-
tained from the former. The proof of this theorem indicates
that the security is held even if G makes public. Moreover,
this theorem clariﬁes that the security of this scheme is inde-
pendent of the number of colluders, k. That is, the scheme
can support the inﬁnity users (at most 2s users, where s is
the security parameter) in theory. When k = 1, the proof
of this theorem indicates that the security of the scheme
against passive adversary (without collusion) is based on
the hard problem (G, [ξ]G) → (c, [ 1
ξ+c ]G) for c ∈R Z∗
p.
5.3 Role-based Signature/Authencation Scheme
The above construction can be applied to derive a role-
based authentication (RBA) and signature (RBS) scheme.
We propose a lightweigh signature scheme to realize the
anonymity and traceability. Further, this scheme can eas-
ily turn into a zero-knowledge RBA scheme. Given H =
{U, K, R, (cid:22)}, a user carries out the following process to sign
a message M :
• Sign(pki, ski,j, M ): The signing algorithm takes a group
public key pki = (H, Wi, {Uk}rk ∈↑ri ), a user private
key ski,j = (labi,j, Ai,j, Bi,j), and a message M ∈
{0, 1}∗, and proceeds as follows:
1. Picks a random nonce α, β ← Z∗
p and computes
C1 = Ai,j + [α]Wi
C2 = Bi,j + [β]H
T = [β]Wi
;
(11)
2. Picks blinding values r ← Z∗
p and compute helper
values S:
S = e(Wi, H)r;
(12)
3. Computes a challenge value c ∈ Z∗
p using Hash:
c = Hash(pk, M, C1, C2, T, S);
(13)
4. Computes s = r + c(α + β):
Finally, the signature is σ ← (C1, C2, T, c, s).
• V erif y(pki, σ, M ): The veriﬁcation algorithm takes a
role key pki, a purported signature σ = (C1, C2, T, c, s),
and a message M ∈ {0, 1}∗, and proceeds the following
steps: