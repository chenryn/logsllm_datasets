title:Attacks Only Get Better: Password Recovery Attacks Against RC4 in
TLS
author:Christina Garman and
Kenneth G. Paterson and
Thyla van der Merwe
Attacks Only Get Better: Password Recovery 
Attacks Against RC4 in TLS
Christina Garman, Johns Hopkins University; Kenneth G. Paterson and  
Thyla Van der Merwe, University of London
https://www.usenix.org/conference/usenixsecurity15/technical-sessions/presentation/garman
This paper is included in the Proceedings of the 
24th USENIX Security Symposium
August 12–14, 2015 • Washington, D.C.
ISBN  978-1-939133-11-3
Open access to the Proceedings of  the 24th USENIX Security Symposium is sponsored by USENIXAttacks Only Get Better: Password Recovery Attacks Against RC4 in TLS
Christina Garman
Johns Hopkins University
PI:EMAIL
Kenneth G. Paterson
Royal Holloway, University of London
PI:EMAIL
Thyla van der Merwe
Royal Holloway, University of London
PI:EMAIL
Abstract
Despite recent high-proﬁle attacks on the RC4 algorithm
in TLS, its usage is still running at about 30% of all
TLS trafﬁc. We provide new attacks against RC4 in TLS
that are focussed on recovering user passwords, still the
pre-eminent means of user authentication on the Inter-
net today. Our new attacks use a generally applicable
Bayesian inference approach to transform a priori infor-
mation about passwords in combination with gathered
ciphertexts into a posteriori likelihoods for passwords.
We report on extensive simulations of the attacks. We
also report on a “proof of concept” implementation of the
attacks for a speciﬁc application layer protocol, namely
BasicAuth. Our work validates the truism that attacks
only get better with time: we obtain good success rates in
recovering user passwords with 226 encryptions, whereas
the previous generation of attacks required around 234
encryptions to recover an HTTP session cookie.
1
Introduction
TLS in all current versions allows RC4 to be used as its
bulk encryption mechanism. Attacks on RC4 in TLS
were ﬁrst presented in 2013 in [2] (see also [13, 16]).
Since then, usage of RC4 in TLS has declined, but it
still accounted for around 30% of all TLS connections
in March 2015.1 Moreover, the majority of websites still
support RC42 and a small proportion of websites only
support RC4.3
1According to data obtained from the International Computer Sci-
ence Institute (ICSI) Certiﬁcate Notary project, which collects statis-
tics from live upstream SSL/TLS trafﬁc in a passive manner; see
http://notary.icsi.berkeley.edu.
2According to statistics obtained from SSL Pulse; see https://
www.trustworthyinternet.org/ssl-pulse/.
3Amounting to 0.79% according to a January 2015 sur-
see
vey of about 400,000 of
the Alexa top 1 million sites;
https://securitypitfalls.wordpress.com/2015/02/01/
january-2015-scan-results/.
We describe attacks recovering TLS-protected pass-
words whose ciphertext requirements are signiﬁcantly
reduced compared to those of [2]. Instead of the 234 ci-
phertexts that were needed for recovering 16-byte, base64-
encoded secure cookies in [2], our attacks now require
around 226 ciphertexts. We also describe a proof-of-
concept implementation of these attacks against a spe-
ciﬁc application-layer protocol making use of passwords,
namely BasicAuth.
1.1 Our Contributions
We obtain our improved attacks by revisiting the statis-
tical methods of [2], reﬁning, extending and applying
them to the speciﬁc problem of recovering TLS-protected
passwords. Passwords are a good target for our attacks
because they are still very widely used on the Internet for
providing user authentication in protocols like BasicAuth
and IMAP, with TLS being used to prevent them being
passively eavesdropped. To build effective attacks, we
need to ﬁnd and exploit systems in which users’ pass-
words are automatically and repeatedly sent under the
protection of TLS, so that sufﬁciently many ciphertexts
can be gathered for our statistical analyses.
Bayesian analysis We present a formal Bayesian anal-
ysis that combines an a priori plaintext distribution with
keystream distribution statistics to produce a posteriori
plaintext likelihoods. This analysis formalises and ex-
tends the procedure followed in [2] for single-byte attacks.
There, only keystream distribution statistics were used
(speciﬁcally, biases in the individual bytes in the early
portion of the RC4 keystream) and plaintexts were as-
sumed to be uniformly distributed, while here we also
exploit (partial) knowledge of the plaintext distribution
to produce a more accurate estimate of the a posteriori
likelihoods. This yields a procedure that is optimal (in
the sense of yielding a maximum a posteriori estimate for
the plaintext) if the plaintext distribution is known exactly.
USENIX Association  
24th USENIX Security Symposium  113
1
In the context of password recovery, an estimate for the
a priori plaintext distribution can be empirically formed
by using data from password breaches or by synthetically
constructing password dictionaries. We will demonstrate,
via simulations, that this Bayesian approach improves per-
formance (measured in terms of success rate of plaintext
recovery for a given number of ciphertexts) compared to
the approach in [2].
Our Bayesian analysis concerns vectors of consecu-
tive plaintext bytes, which is appropriate given passwords
as the plaintext target. This, however, means that the
keystream distribution statistics also need to be for vec-
tors of consecutive keystream bytes. Such statistics do not
exist in the prior literature on RC4, except for the Fluher-
McGrew biases [10] (which supply the distributions for
adjacent byte pairs far down the keystream). Fortunately,
in the early bytes of the RC4 keystream, the single-byte
biases are dominant enough that a simple product distri-
bution can be used as a reasonable estimate for the distri-
bution on vectors of keystream bytes. We also show how
to build a more accurate approximation to the relevant
keystream distributions using double-byte distributions.
(Obtaining the double-byte distributions to a suitable de-
gree of accuracy consumed roughly 4800 core-days of
computation; for details see the full version [12].) This
approximation is not only more accurate but also neces-
sary when the target plaintext is located further down the
stream, where the single-byte biases disappear and where
double-byte biases become dominant. Indeed, our double-
byte-based approximation to the keystream distribution
on vectors can be used to smoothly interpolate between
the region where single-byte biases dominate and where
the double-byte biases come into play (which is exhib-
ited as a fairly sharp transition around position 256 in the
keystream).
In the end, what we obtain is a formal algorithm that
estimates the likelihood of each password in a dictio-
nary based on both the a priori password distribution
and the observed ciphertexts. This formal algorithm is
amenable to efﬁcient implementation using either the
single-byte based product distribution for keystreams or
the double-byte-based approximation to the distribution
on keystreams. The dominant terms in the running time
for both of the resulting algorithms is O(nN) where n is
the length of the target password and N is the size of the
dictionary used in the attack.
An advantage of our new algorithms over the previous
work in [2] is that they output a value for the likelihood
of each password candidate, enabling these to be ranked
and then tried in order of descending likelihood.
Note that our Bayesian approach is quite general and
not limited to recovery of passwords, nor to RC4 – it can
be applied whenever the plaintext distribution is approx-
imately known, where the same plaintext is repeatedly
encrypted, and where the stream cipher used for encryp-
tion has known biases in either single bytes or adjacent
pairs of bytes.
Evaluation We evaluate and compare our password re-
covery algorithms through extensive simulations, explor-
ing the relationships between the main parameters of our
attack:
• The length n of the target password.
• The number S of available encryptions of the pass-
word.
• The starting position r of the password in the plain-
text stream.
• The size N of the dictionary used in the attack, and
the availability (or not) of an a priori password dis-
tribution for this dictionary.
• The number of attempts T made (meaning that our
algorithm is considered successful if it ranks the cor-
rect password amongst the top T passwords, i.e. the
T passwords with highest likelihoods as computed
by the algorithm).
• Which of our two algorithms is used (the one com-
puting the keystream statistics using the product dis-
tribution or the one using a double-byte-based ap-
proximation).
• Whether the passwords are Base64 encoded before
being transmitted, or are sent as raw ASCII/Unicode.
Given the many possible parameter settings and the
cost of performing simulations, we focus on comparing
the performance with all but one or two parameters or
variables being ﬁxed in each instance.
Proofs of concept Our ﬁnal contribution is to apply
our attacks to speciﬁc and widely-deployed applications
making use of passwords over TLS: BasicAuth and (in
the full version [12]), IMAP. We introduce BasicAuth and
describe a proof-of-concept implementation of our attacks
against it, giving an indication of the practicality of our
attacks. We do the same for IMAP in the full version [12].
For both applications, we have signiﬁcant success rates
with only S = 226 ciphertexts, in contrast to the roughly
234 ciphertexts required in [2]. This is because we are
able to force the target passwords into the ﬁrst 256 bytes
of plaintext, where the large single-byte biases in RC4
keystreams come into play. For example, with S = 226
ciphertexts, we would expect to recover a length 6 Ba-
sicAuth password with 44.5% success rate after T = 5
attempts; the rate rises to 64.4% if T = 100 attempts are
114  24th USENIX Security Symposium 
USENIX Association
2
made. In practice, many sites do not conﬁgure any limit
on the number of BasicAuth attempts made by a client;
moreover a study [5] showed that 84% of websites sur-
veyed allowed for up to 100 password guesses (though
these sites were not necessarily using BasicAuth as their
authentication mechanism). As we will show, our result
compares very favourably to the previous attacks and to
random guessing of passwords without any reference to
the ciphertexts.
However, there is a downside too: to make use of the
early, single-byte biases in RC4 keystreams, we have to
repeatedly cause TLS connections to be closed and new
ones to be opened. Because of latency in the TLS Hand-
shake Protocol, this leads to a signiﬁcant slowdown in
the wall clock running time of the attack; for S = 226, a
latency of 100ms, and exploiting browsers’ propensity to
open multiple parallel connections, we estimate a running
time of around 300 hours for the attack. This is still more
than 6 times faster than the 2000 hours estimated in [2].
Furthermore, the attack’s running time reduces propor-
tionately to the latency of the TLS Handshake Protocol,
so in environments where the client and server are close
– for example in a LAN – the execution time could be a
few tens of hours.
2 Further Background
2.1 The RC4 algorithm
Originally a proprietary stream cipher designed by Ron
Rivest in 1987, RC4 is remarkably fast when implemented
in software and has a very simple description. Details of
the cipher were leaked in 1994 and the cipher has been
subject to public analysis and study ever since.
RC4 allows for variable-length key sizes, anywhere
from 40 to 256 bits, and consists of two algorithms,
namely, a key scheduling algorithm (KSA) and a pseudo-
random generation algorithm (PRGA). The KSA takes
as input an l-byte key and produces the initial internal
state st0 = (i, j, S ) for the PRGA; S is the canonical
representation of a permutation of the numbers from 0
to 255 where the permutation is a function of the l-byte
key, and i and j are indices for S . The KSA is speciﬁed
in Algorithm 1 where K represents the l-byte key array
and S the 256-byte state array. Given the internal state
str, the PRGA will generate a keystream byte Zr+1 as
speciﬁed in Algorithm 2.
2.2 Single-byte
Keystream
biases
in
the RC4
RC4 has several cryptographic weaknesses, notably the
existence of various biases in the RC4 keystream, see for
example [2, 10, 14, 15, 19]. Large single-byte biases are
Algorithm 1: RC4 key scheduling (KSA)
input
output :initial internal state st0
begin
:key K of l bytes
for i = 0 to 255 do
S [i] ← i
j ← 0
for i = 0 to 255 do
j ← j + S [i] +K [i mod l]
swap(S [i], S [ j])
i, j ← 0
st0 ← (i, j, S )
return st0
Algorithm 2: RC4 keystream generator (PRGA)
input
output :keystream byte Zr+1
:internal state str
updated internal state str+1
begin
parse (i, j, S ) ← str
i ← i + 1
j ← j + S [i]
swap(S [i], S [ j])
Zr+1 ← S [S [i] +S [ j]]
str+1 ← (i, j, S )
return (Zr+1,str+1)
prominent in the early postions of the RC4 keystream.
Mantin and Shamir [15] observed the ﬁrst of these biases,
in Z2 (the second byte of the RC4 keystream), and showed
how to exploit it in what they called a broadcast attack,
wherein the same plaintext is repeatedly encrypted under
different keys. AlFardan et al. [2] performed large-scale
computations to estimate these early biases, using 245
keystreams to compute the single-byte keystream distribu-
tions in the ﬁrst 256 output positions. They also provided
a statistical approach to recovering plaintext bytes in the
broadcast attack scenario, and explored its exploitation
in TLS. Much of the new bias behaviour they observed
was subsequently explained in [18]. Unfortunately, from
an attacker’s perspective, the single-byte biases die away
very quickly beyond position 256 in the RC4 keystream.
This means that they can only be used in attacks to extract
plaintext bytes which are found close to the start of plain-
text streams. This was a signiﬁcant complicating factor
in the attacks of [2], where, because of the behaviour
of HTTP in modern browsers, the target HTTP secure
cookies were not so located.
USENIX Association  
24th USENIX Security Symposium  115
3
2.3 Double-byte
Keystream
biases
in
the RC4
Fluhrer and McGrew [10] showed that there are biases
in adjacent bytes in RC4 keystreams, and that these so-
called double-byte biases are persistent throughout the
keystream. The presence of these long-term biases (and
the absence of any other similarly-sized double-byte bi-
ases) was conﬁrmed computationally in [2]. AlFardan
et al. [2] also exploited these biases in their double-byte
attack to recover HTTP secure cookies.
Because we wish to exploit double-byte biases in early
portions of the RC4 keystream and because the anal-
ysis of [10] assumes the RC4 permutation S is uni-
formly random (which is not the case for early keystream
bytes), we carried out extensive computations to esti-
mate the initial double-byte keystream distributions: we
used roughly 4800 core-days of computation to generate
244 RC4 keystreams for random 128-bit RC4 keys (as
used in TLS); we used these keystreams to estimate the
double-byte keystream distributions for RC4 in the ﬁrst
512 positions.
While the gross behaviour that we observed is domi-
nated by products of the known single-byte biases in the
ﬁrst 256 positions and by the Fluhrer-McGrew biases in
the later positions, we did observe some new and inter-
esting double-byte biases. Since these are likely to be of
independent interest to researchers working on RC4, we
report in more detail on this aspect of our work in the full
version [12].
2.4 RC4 and the TLS Record Protocol
We provide an overview of the TLS Record Protocol with
RC4 selected as the method for encryption and direct the
reader to [2, 6, 7, 8] for further details.
Application data to be protected by TLS, i.e, a sequence
of bytes or a record R, is processed as follows: An 8-byte
sequence number SQN, a 5-byte header HDR and R are
concatenated to form the input to an HMAC function.
We let T denote the resulting output of this function. In
the case of RC4 encryption, the plaintext, P = T||R, is
XORed byte-per-byte with the RC4 keystream. In other
words,
is either established via the the full TLS Handshake Pro-
tocol or TLS session resumption. The ﬁrst few bytes to
be protected by RC4 encryption is a Finished message
of the TLS Handshake Protocol. We do not target this
record in our attacks since this message is not constant
over multiple sessions. The exact size of this message is
important in dictating how far down the keystream our
target plaintext will be located; in turn this determines
whether or not it can be recovered using only single-byte
biases. A common size is 36 bytes, but the exact size