0, ..., N − 1 with 0 the ﬁrst data packet sent and N − 1 the last one. Let fi
denote the subﬂow on which packet i was sent. The nth subﬂow blocks bn is
deﬁned as bn = {max(bn−1)+1}∪{i | i−1 ∈ bn and fi = fi−1}, with b0 = {−1}
and f−1 =⊥. As an example, if the proxy sends two data packets on s0, then
A First Analysis of Multipath TCP on Smartphones
65
three on s1, retransmits the second packet on s0 and sends the last two packets
on s1, we will have b1 = {0, 1}, b2 = {2, 3, 4}, b3 = {5} and b4 = {6, 7}. This
notion is implemented in our analysis scripts [2]. A connection balancing the
traﬃc with several subﬂows will produce lot of small subﬂow blocks whereas
a connection sending all its data over one single subﬂow will have only one
subﬂow block containing all the connection’s packets. Figure 4 shows the number
of subﬂow blocks that each connection contains. Each curve contains connections
carrying their labeled amount of total bytes from proxy to smartphones. For
most of the large connections, Multipath TCP balances well the packets over
diﬀerent subﬂows. In particular, 26.4 % of connections carrying more than 1 MB
have more than 100 subﬂow blocks. As expected, the shorter the connection
is, more the subﬂow blocks tend to contain most of the connection traﬃc. For
short connections carrying less than 10 KBytes, 72.8 % of them contain only
one subﬂow block, and therefore they only use one subﬂow. This number raises
concerns about unused subﬂows. If connections having at least two subﬂows
are considered, over their 276,133 subﬂows, 41.2 % of them are unused in both
directions. It is worth noting that nearly all of these unused subﬂows are actually
additional subﬂows, leading to 75.6 % of unused additional subﬂows. This is
clearly an overhead, since creating subﬂows that are not used consumes bytes
and energy [18] on smartphones since the interface over which these subﬂows are
established is kept active.
There are three reasons that explain those unused subﬂows. Firstly, a sub-
ﬂow can become active after all the data has been exchanged. This happens
frequently since 62.9 % of the connections carry less than 2000 bytes of data.
In practice, for 21 % of the unused additional subﬂows the proxy received their
third ACK after that it had ﬁnished to send data. Secondly, as suggested in
Sect. 5.2, the diﬀerence in round-trip-times between the two available subﬂows
can be so large that the subﬂow with the highest RTT is never selected by the
packet scheduler. If the server does not transmit too much data, the congestion
window on the lowest-RTT subﬂow remains open and the second subﬂow is not
used. Though, 36.2 % of the unused additional subﬂows have a better RTT for
the newly-established subﬂow than the other available one. However, 59.9 % of
these subﬂows belong to connections carrying less than 1000 bytes (90.1 % less
than 10 KBytes). Thirdly, a subﬂow can be established as a backup subﬂow [9].
Indeed, a user can set the cellular subﬂow as a backup one, e.g., for cost purpose.
2.1 % of the unused additional subﬂows were backup subﬂows.
5.5 Reinjections and Retransmissions
In addition to unused subﬂows, another Multipath TCP speciﬁc overhead is the
reinjections. A reinjection [20] is the transmission of the same data over two or
more subﬂows. Since by deﬁnition, reinjections can only occur on connections
that use at least two subﬂows, this analysis considers the subtrace T2. A reinjec-
tion can be detected by looking at the Multipath TCP Data Sequence Number
(DSN). If a packet A with DSN x is sent ﬁrst on the subﬂow 1 and after another
packet B with the same DSN x is sent on the subﬂow 2, then B is a reinjection
66
Q. De Coninck et al.
of A. mptcptrace [10] was extended to detect them. A reinjection can occur for
several reasons: (i) handover, (ii) excessive losses over one subﬂow or (iii) the
utilization of the Opportunistic Retransmission and Penalization (ORP) algo-
rithm [17,20]. This phenomenon has been shown to limit the performance of
Multipath TCP in some wireless networks [21]. Typically, Multipath TCP rein-
jections are closely coupled with regular TCP retransmissions. Figure 5 shows
the CDF of the reinjections and retransmissions sent by the proxy. The number
of retransmitted and reinjected bytes are normalized with the number of unique
bytes sent by the proxy over each connection. 52.7 % of the connections using at
least two subﬂows experience retransmissions on one of their subﬂows whereas
reinjections occur on 29.3 % of them. This percentage of retransmissions tends to
match previous analysis of TCP on smartphones [6,12]. 68.7 % of T2 connections
have less than 1 % of their unique bytes retransmitted, and 85 % less than 10 %.
79.7 % of the connections have less than 1 % of their unique bytes reinjected,
and 89.8 % less than 10 %. Observing more retransmissions than reinjections
is expected since retransmissions can trigger reinjections. In the studied trace,
the impact of reinjections remains limited since over more than 11.8 GBytes of
unique data sent by proxy, there are only 86.8 MB of retransmissions and 65 MB
of reinjections. On some small connections, we observe more retransmitted and
reinjected bytes than the unique bytes. This is because all the data sent over
the connection was retransmitted several times. On Fig. 5 the thousand of con-
nections having a fraction of retransmitted bytes over unique bytes greater or
equal to 1 carried fewer than 10 KB of unique data, and 83.3 % of them fewer
than 1 KB. Concerning the reinjections, the few hundred of connections in such
case carried less than 14 KB, 63.4 % of them carried less than 1 KB and 76.1 %
of them less than 1428 bytes.
5.6 Handovers
One of the main beneﬁts of Multipath TCP is that it supports seamless han-
dovers which enables mobility scenarios [9,15]. A handover is here deﬁned as
F
D
C
1.0
0.9
0.8
0.7
0.6
0.5
10 -5
Additional SFs
1.0
0.8
0.6
0.4
0.2
F
D
C
Retransmission
Reinjection
10 -4
10 -3
10 0
Fraction of unique bytes
10 -2
10 -1
10 1
0.0
0.0
0.2
0.8
Fraction of total unique bytes
0.4
0.6
1.0
Fig. 5. Fraction of bytes that are rein-
jected/retransmitted by the proxy on T2.
Fig. 6. Fraction of total data bytes on non-
initial subﬂows sent by the proxy on T3.
A First Analysis of Multipath TCP on Smartphones
67
a recovery of a failed subﬂow by another one. A naive solution is to rely on
REMOVE ADDRs to detect handover. However, this TCP option is sent unreliably.
Indeed, 22.1 % of the connections experiencing handover have no REMOVE ADDR.
This paper proposes an alternative methodology implemented in [2] that relies
on the TCP segments exchanged. Let LAi be the time of the last (non-RST) ACK
sent by the smartphone seen on subﬂow i (that was used to send data) and LPj
the time of the last (non-retransmitted) segment containing data on subﬂow j.
If ∃ k, l | k (cid:6)= l, no FIN seen from the smartphone on subﬂow k, LAl > LAk
and LPl > LAk, then the connection experiences handover. Notice that only han-
dovers on the subﬂows carrying data are detected. Among the connections that use
at least two subﬂows, 25.7 % experience handover. It has also the advantage to be
implementation independent since it does not use the ADD ADDRs or REMOVE ADDRs
options that are not supported by all implementations [5].
Based on the subtrace T3, Fig. 6 shows the fraction of unique bytes that
were sent by the proxy on the additional subﬂows on connections experiencing
handover. This illustrates the connections that could not be possible if regular
TCP was used on these mobile devices. Indeed, an handover is typically related
to the mobility of the user who can go out of the reachability of a network.
Notice that this methodology can also detect handover in the smartphone to
proxy ﬂow. Indeed, 20.4 % of connections experience handover with all data sent
by the proxy on the initial subﬂow because the smartphone sent data on another
subﬂow after having lost the initial one.
6 Conclusion
This work brings the ﬁrst results about real Multipath TCP traﬃc on
smartphones. In addition to analyzing the released trace, this paper proposes
techniques to quantify the utilization of the subﬂows and presents a simple imple-
mentation independent methodology to detect handover. The analysis tools are
also available for the community [2]. The results shows that Multipath TCP
oﬀers beneﬁts for long connections, since it allows seamless handovers. However,
with the default algorithms, the protocol brings some overheads, in particular
with the establishment of unused subﬂows. This opens new areas of improve-
ments to adapt Multipath TCP with the smartphone case, in particular the
path manager.
Acknowledgements. This work was partially supported by the EC within the FP7
Trilogy2 project. We would like to thank Gregory Detal and S´ebastien Barr´e for the
port of the latest Multipath TCP Linux kernel on the Nexus 5 and Patrick Delcoigne
and his team for the cellular measurements.
68
Q. De Coninck et al.
References
1. Chen, Y.-C., et al.: A measurement-based study of MultiPath TCP performance
over wireless networks. In: IMC 2013, pp. 455–468. ACM, New York (2013). http://
doi.acm.org/10.1145/2504730.2504751
2. De Coninck, Q., Baerts, M.: Analysis
scripts
(2015). http://github.com/
multipath-tcp/mptcp-analysis-scripts
3. De Coninck, Q., et al.: Poster: evaluating android applications with Multipath
TCP. In: MOBICOM 2015, pp. 230–232. ACM (2015). http://dx.doi.org/10.1145/
2789168.2795165
4. Deng, S., et al.: WiFi, LTE, or both?: measuring multi-homed wireless internet
performance. In: IMC 2014, pp. 181–194. ACM, New York (2014). http://doi.acm.
org/10.1145/2663716.2663727
5. Eardley, P.: Survey of MPTCP Implementations. Internet-Draft draft-eardley-
mptcp-implementations-survey-02, IETF Secretariat, July 2013. http://tools.ietf.
org/html/draft-eardley-mptcp-implementations-survey-02
6. Falaki, H., et al.: A ﬁrst look at traﬃc on smartphones. In: IMC 2010, pp. 281–287.
ACM, Melbourne (2010). http://dx.doi.org/10.1145/1879141.1879176
7. Ferlin, S., Dreibholz, T., Alay, ¨O.: Multi-path transport over heterogeneous wireless
networks: does it really pay oﬀ? In: Proceedings of the IEEE GLOBECOM. IEEE,
Austin, December 2014. http://dx.doi.org/10.1109/GLOCOM.2014.7037567
8. Ferlin-Oliveira, S., et al.: Tackling the challenge of buﬀerbloat in multi-path trans-
port over heterogeneous wireless networks. In: 2014 IEEE 22nd International Sym-
posium of Quality of Service (IWQoS), pp. 123–128, May 2014. http://dx.doi.org/
10.1109/IWQoS.2014.6914310
9. Ford, A., Raiciu, C., Handley, M., Bonaventure, O.: TCP Extensions for Multi-
path Operation with Multiple Addresses. RFC 6824, January 2013. http://www.
rfc-editor.org/rfc/rfc6824.txt
10. Hesmans, B., Bonaventure, O.: Tracing Multipath TCP connections. SIGCOMM
Comput. Commun. Rev. 44(4), 361–362 (2014). http://doi.acm.org/10.1145/
2740070.2631453
11. Hesmans, B., Tran-Viet, H., Sadre, R., Bonaventure, O.: A ﬁrst look at real multi-
path TCP traﬃc. In: Steiner, M., Barlet-Ros, P., Bonaventure, O. (eds.) TMA 2015.
LNCS, vol. 9053, pp. 233–246. Springer, Heidelberg (2015). http://dx.doi.org/
10.1007/978-3-319-17172-2 16
12. Huang, J., et al.: Anatomizing application performance diﬀerences on smartphones.
In: MobiSys 2010, pp. 165–178. ACM (2010). http://dx.doi.org/10.1145/1814433.
1814452
13. Mellia, M., Carpani, A., Cigno, R.L.: TStat: TCP statistic and analysis tool. In:
Ajmone Marsan, M., Listanti, G.C.M., Roveri, A. (eds.) QoS-IP 2003. LNCS,
vol. 2601, pp. 145–157. Springer, Heidelberg (2003). http://www.tlc-networks.
polito.it/mellia/papers/Tstat QoSIP.ps
14. Paasch, C., Barre, S., et al.: Multipath TCP in the Linux Kernel. http://www.
multipath-tcp.org
15. Paasch, C., et al.: Exploring Mobile/WiFi handover with Multipath TCP. In:
ACM SIGCOMM CellNet Workshop, pp. 31–36 (2012). http://doi.acm.org/10.
1145/2342468.2342476
16. Paasch, C., et al.: Experimental evaluation of Multipath TCP schedulers. In: CSWS
2014, pp. 27–32. ACM, New York. http://doi.acm.org/10.1145/2630088.2631977
A First Analysis of Multipath TCP on Smartphones
69
17. Paasch, C., et al.: On the beneﬁts of applying experimental design to improve
Multipath TCP. In: CoNEXT 2013, pp. 393–398. ACM, New York (2013).
http://inl.info.ucl.ac.be/publications/beneﬁts-applying-experimental-design-impro
ve-multipath-tcp
18. Peng, Q., et al.: Energy eﬃcient Multipath TCP for mobile devices. In: MobiHoc
2014, pp. 257–266. ACM, New York (2014). http://doi.acm.org/10.1145/2632951.
2632971
19. Raiciu, C., et al.: Opportunistic mobility with Multipath TCP. In: MobiArch 2011,
pp. 7–12. ACM, New York (2011). http://doi.acm.org/10.1145/1999916.1999919
20. Raiciu, C., et al.: How hard can it be? designing and implementing a deploy-
able Multipath TCP. In: NSDI 2012, pp. 29–29. USENIX Assoc., Berkeley
(2012).
http://inl.info.ucl.ac.be/publications/how-hard-can-it-be-designing-and-
implementing-deployable-multipath-tcp
21. Sup Lim, Y., et al.: Cross-layer path management in multi-path transport protocol
for mobile devices. In: INFOCOM 2014, pp. 1815–1823. IEEE, April 2014. http://
dx.doi.org/10.1109/INFOCOM.2014.6848120