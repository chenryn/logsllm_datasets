title:MemCloak: Practical Access Obfuscation for Untrusted Memory
author:Weixin Liang and
Kai Bu and
Ke Li and
Jinhong Li and
Arya Tavakoli
MemCloak: Practical Access Obfuscation for Untrusted Memory
Weixin Liang
Zhejiang University
Kai Bu∗
Zhejiang University
Ke Li
Zhejiang University
Jinhong Li
Zhejiang University
Arya Tavakoli
Simon Fraser University
ABSTRACT
Access patterns over untrusted memory have long been exploited to
infer sensitive information like program types or even secret keys.
Most existing obfuscation solutions hide real memory accesses
among a suciently large number of dummy memory accesses.
Such solutions lead to a heavy communication overhead and more
often apply to the client/server scenario instead of the CPU/memory
architecture. Sporadic obfuscation solutions strive for an aordable
memory bandwidth cost at the expense of security degradation. For
example, they may have to obfuscate accesses over a limited range
of memory space to control the overhead.
In this paper, we present MemCloak to obfuscate accesses through-
out the entire memory space with an O(1) communication overhead.
We advocate leveraging data redundancy to achieve extremely ef-
cient obfuscation. Loading multiple duplicates of a data block in
memory, MemCloak enables the CPU to fetch the same data by
accessing dierent memory locations. This breaks the condition
for snooping the access pattern. Moreover, we leverage data ag-
gregation to improve memory utilization. It enables the CPU to
fetch the same aggregated data block times from the same mem-
ory location but each time for a dierent data block therein. This
further prohibits an attacker from correlating memory accesses.
We propose a series of optimization techniques to compress the
position that tracks memory layout. The optimized position map
is hundreds of times smaller than the traditional position map. It
takes only several megabytes for protecting a 4 GB memory and
can t in an on-chip cache or buer. We implement MemCloak
using the gem5 simulator and validate its performance using highly
memory-intensive MiBench benchmarks.
CCS CONCEPTS
• Security and privacy → Hardware security implementa-
tion; Hardware-based security protocols;
KEYWORDS
Access pattern obfuscation, Oblivious RAM, side-channel attack
∗Corresponding Author: PI:EMAIL
Permission to make digital or hard copies of all or part of this work for personal or
classroom use is granted without fee provided that copies are not made or distributed
for prot or commercial advantage and that copies bear this notice and the full citation
on the rst page. Copyrights for components of this work owned by others than ACM
must be honored. Abstracting with credit is permitted. To copy otherwise, or republish,
to post on servers or to redistribute to lists, requires prior specic permission and/or a
fee. Request permissions from permissions@acm.org.
ACSAC ’18, December 3–7, 2018, San Juan, PR, USA
© 2018 Association for Computing Machinery.
ACM ISBN 978-1-4503-6569-7/18/12...$15.00
https://doi.org/10.1145/3274694.3274695
ACM Reference Format:
Weixin Liang, Kai Bu, Ke Li, Jinhong Li, and Arya Tavakoli. 2018. Mem-
Cloak: Practical Access Obfuscation for Untrusted Memory. In 2018 An-
nual Computer Security Applications Conference (ACSAC ’18), December
3–7, 2018, San Juan, PR, USA. ACM, New York, NY, USA, 11 pages. https:
//doi.org/10.1145/3274694.3274695
1 INTRODUCTION
The pattern of memory accesses has long been exploited for side-
channel attacks. Specically, the pattern refers to the sequence
of addresses accessed during program execution [18]. It can be
used to construct the control ow graph (CFG) of a program [3].
An extensive measurement study demonstrates the uniqueness of
CFGs across dierent programs [46]. For example, among 1,334
procedures of Alpha compiler’s Standard C library, only 0.05% of
all possible pairs of their CFG match for procedures with 15 or
more blocks. An attacker can thus monitor a program’s memory
access pattern, construct the corresponding CFG, and then identify
exactly which program is running. If a CFG reveals a cryptographic
function in use, the attacker may even compromise the secret key
[25, 46]. For example, Die-Hellman [12] and RSA [28] involves
a loop of conditional branches using the value of each bit of the
secret key for condition check [46]. A bit one directs the program
execution to an IF-branch code segment while a bit zero to an ELSE-
branch code segment. Using the snooped CFG, the attacker can
easily infer two possible secret keys—one is the secret key per se
and the other is its complement.
However, how to obfuscate accesses for untrusted memory in a
practically ecient way remains unsolved. Dierent from emerging
trusted memory capable of cryptographic computation [2, 5, 31],
widely-deployed conventional untrusted memory1 cannot perform
computation and the addresses sent to memory have to remain
in plain text. A fundamental obfuscation technique called Oblivi-
ous RAM (ORAM) [18] therefore hides a real access among many
dummy accesses. Apparently, ORAM imposes a high communica-
tion overhead on memory bandwidth and gains few practical imple-
mentations in the CPU/memory scenario. With the recent blossom
of cloud computing where network bandwidth might be of less
concern, ORAM gradually applies more to obfuscating data-access
patterns on a remote server and attracts many improvements in the
client/server scenario [8, 10, 11, 13, 15, 18, 26, 27, 34, 37, 38, 42, 43].
Sporadic attempts at the CPU/memory scenario trade security for
eciency [24, 40, 45, 46]. For example, HIDE [46] needs to fetch
all blocks in the same chunk (i.e., one or more continuous pages)
of a previously fetched and cached block. Then it permutes block
locations within the chunk, records the new block-address mapping
1For ease of presentation, we hereafter use the terms of untrusted memory and memory
interchangeably whenever no confusion arises.
187
ACSAC ’18, December 3–7, 2018, San Juan, PR, USA
Weixin Liang, Kai Bu, Ke Li, Jinhong Li, and Arya Tavakoli
in the position map, and writes all blocks back to memory. HIDE
has to limit the overhead by conning the obfuscation to only a
small range of the memory space.
In this paper, we take the challenge and present the design and
implementation of MemCloak. It obfuscates accesses for untrusted
memory with an O(1) communication overhead and an on-chip
cacheable/buerable position map. We achieve such a minimum
communication overhead by leveraging data redundancy. The root
cause for leaking the access pattern is that currently the CPU al-
ways accesses the same memory location for fetching the same
data block therein. If we can enable the CPU to access dierent
locations for the same block, access pattern leakage is avoided. To
this end, the data redundancy technique we propose loads multiple
dierently-encrypted copies of each block in memory. We leverage
data aggregation to improve memory utilization. The data aggre-
gation technique XORs multiple data blocks into one. When all
but one of the blocks inside the aggregate are already fetched and
cached, the CPU can fetch the aggregate and extract the remaining
block therein by lightweight XOR computation. With both data
redundancy and data aggregation techniques, the CPU can fetch the
same block by accessing dierent memory locations and access the
same memory location for fetching dierent blocks. This prohibits
an attacker from correlating memory accesses and thus protects
the access pattern.
We further propose a series of optimization techniques to com-
press the size of the position map over hundreds of times. We use
computation-based address mapping to remove the destination
addresses from the position map. We also remove keys (for data
encryption/decryption) from the position map by deriving them
from the addresses on the y. Given that one key reason for the
possibly giant map size is that it dedicates an entry for each block,
we restructure the position map in a page-level fashion and each
page-oriented entry maintains much less information for blocks in
that page. Another challenge arises when we replenish new data
duplicates by piggybacking them in dummy writes. Each read ac-
cess should be associated with a dummy write and vice versa to
protect the access type (i.e., read or write) [5]. If we simply nd a
feasible computation function that can map a new duplicate to an
empty location, we have to deal with frequent address collisions
and cumbersome map update. We address this challenge by using
another address as an address’s mapping alias. This way, we can
randomly map an address across the entire memory space without
heavy re-computation. Based on the preceding optimization tech-
niques, MemCloak can compress a 1 GB traditional position map
to a several-megabyte one, practically ttable in an on-chip cache.
In summary, we make the following contributions to obfuscating
accesses over untrusted memory.
• Obfuscate memory accesses with a minimum O(1) communi-
cation overhead (Section 3). The proposed techniques of data
redundancy and data aggregation break access correlation
by enabling the CPU to access the same data from dierent
locations and to access the same location for dierent data.
• Compress the traditional position map over hundreds of
times to t in an on-chip cache or buer (Section 4).
• Implement MemCloak using gem5 [7], a widely used sim-
ulator for computer architecture research (Section 5). Our
188
TCB
CPU
Cache
MC
Information Leakage 
Memory
Address Bus
Data Bus
Plain Text
Encrypted Data
Figure 1: Side-channel attack over memory access patterns
[36]. The CPU, cache, and memory controller (MC) reside in
a trusted computing base (TCB). A passive attacker snoops
both the plain-text address bus and the encrypted data bus
to infer the pattern of memory accesses.
modication accounts for 2,000+ lines of C/C++ code over
gem5’s 250K lines. We execute MemCloak over three highly
memory-intensive benchmarks—dijkstra, susan, and jpeg
encode—from the MiBench benchmark suite [19] (Section 6).
The results demonstrate that MemCloak can nearly random-
ize access patterns with a minimized overhead.
2 PROBLEM
In this section, we raise a question about the practicality of how
to eciently obfuscate access patterns over untrusted memories.
We rst review known side-channel attacks over memory accesses.
Existing countermeasures introduce many more dummy accesses
to hide a real access, leading to a high overhead.
2.1 Side-Channel Attack over Memory Accesses
The pattern of memory accesses (i.e., the sequence of addresses) has
long been exploited for side-channel attacks. As shown in Figure 1,
while CPU and memory chips are secure, both the address bus (for
the CPU to transmit a memory address to the memory) and the
data bus (for data transmission between the CPU and memory) are
vulnerable to eavesdropping attacks. Shielding the data bus from
eavesdropping attacks simply requires data encryption [4, 9, 17, 22,
32, 35, 39, 41]. Such a cryptographic protection, however, fails to
harden the address bus. This is because traditional memory chips do
not support cryptographic computation. Addresses sent to memory
have to remain in plain text [31]. An attacker can easily discover
memory access patterns and exploit them for side-channel attacks.
Such attacks may reveal the reused code of a running program [46]
or even secret keys of AES encryption [25].
The rst example attack uses memory access patterns to infer
what program is running. This is achieved by control-ow graph
(CFG) matching [46]. A CFG graphically represents all paths that
might be traversed through a program during its execution [3].
Zhuang et al. conducted an extensive measurement and demon-
strated that most programs have a unique CFG [46]. Take, for ex-
ample, the Standard C library of the Alpha compiler including 1,334
procedures, each with at least 5 blocks. When comparing all pos-
sible pairs of CFGs generated for all these procedures, only 5% of
the comparisons match. The more blocks a procedure has, the less
likely its CFG matches with that of other procedures. For example,
only 0.1% of the comparisons match for procedures with 10 or more
blocks. The number drops to 0.05% if the comparisons focus on
MemCloak: Practical Access Obfuscation for Untrusted Memory
ACSAC ’18, December 3–7, 2018, San Juan, PR, USA
only procedures with at least 15 blocks. Leveraging this property
of CFG uniqueness, an attacker can passively monitor the address
bus, detect jumps upon accesses to discontinuous locations, and
construct the CFG. Once the constructed CFG matches with that of
a procedure in standard libraries, the attacker identies the running
program with a high probability.
Even worse, memory access patterns may leak critical data such
as secret keys [25, 46]. Zhuang et al. [46] use the private-key op-
erations of Die-Hellman [12] and RSA [28] for example. Such
operations involve a loop of conditional branches using the value
of each bit of the secret key for condition check. A bit one directs
the program execution to an IF-branch code segment while a bit
zero to an ELSE-branch code segment. Given that an attacker can
identify such operations through CFG matching [46], it can further
infer from the observed CFG that which bits of the secret key are
identical. Although the attacker cannot distinguish between the
IF-branch and ELSE-branch code segments, it can determine two
values using the observed CFG—one is the secret key per se and the
other is its complement. A little more eorts like exercising these
two values over snooped encrypted data will help the attacker nail
down the exact secret key.
2.2 Burdensome Obfuscation of Access Pattern
Obfuscation solutions for untrusted memory usually base them-
selves on ORAM technique. ORAM associates with a high overhead
as it protects the access pattern through hiding a real access among
a suciently large number of dummy accesses [18]. Following
ORAM, the CPU sends to memory a number of addresses including
the one of the real interest. Memory then responds with data blocks
stored on the received addresses. Note that each data block should
be encrypted before being loaded into memory. Otherwise, data
correlation leaks memory access patterns. After the CPU receives
these encrypted data blocks, it rst decrypts the interested one and
then operates on it. To invalidate the correlation of two accesses
to the same location, the CPU shues the addresses of received
data blocks, re-encrypts each of them, and writes the re-encrypted
data back to the corresponding locations. Intuitively, fetching all
n data blocks in the entire memory upon each memory access
promises the most secure obfuscation. However, this incurs a high
communication overhead of O(n).
The major design technique toward ecient ORAM is modeling
memory layout with a certain structure for ease of hiding where
fetched data blocks are written back. For example, ORAM uses a
hierarchical structure to achieve an O(polylog n) communication
overhead [18] while Path ORAM uses a tree structure to achieve an
O(log3 n) overhead [34]. The state-of-the-art Floram uses dual mem-
ory chips to achieve an O(log n) overhead [13]. We refer interested
readers to Floram [13] for a comprehensive review of ORAM evolve-
ment [10, 11, 15, 18, 26, 27, 34, 37, 38, 42, 43] and to SEAL-ORAM
[8] for an experimental evaluation of typical ORAM solutions for
remote access of cloud data.
No matter how ecient an ORAM-based solution can be, it has
to impose a suciently large number of dummy accesses to hide the
access pattern. This is why ORAM solutions have been considered
more practical to a server-client environment such as remote access
of cloud data [8, 36] instead of the CPU-memory communication
as in Figure 1. It is also worth mentioning that, Path ORAM [34],
as the base of many ORAM solutions, needs to store many dummy
blocks in memory to mitigate system deadlocks when reshuing
cannot proceed because all buckets along a tree path are full. Even
if wasting 50% of memory capacity for storing dummy blocks (i.e.,
100% memory overhead), system deadlocks can still occur.
2.3 Toward Practically Ecient Obfuscation
In this paper, we take on the challenge of obfuscating memory
access patterns with an O(1) communication overhead. This low
overhead is essential for protecting CPU-memory communication
in a practically ecient way. Ideally, we expect that an extremely
ecient obfuscation solution require zero additional memory ac-
cess. That is, for each read request, the solution still simply lets the
CPU send the read address to memory and then let memory send
back the corresponding data. Similarly, for each write request, the
CPU sends both the write address and the corresponding data to
memory. A memory access operation thus requires two commu-
nication messages, one on the address bus and the other on the
data bus. Without further protection, however, a memory request
can easily leak the type (i.e., read or write) that might be leveraged
for improving attacking probability. Therefore, most previous ob-
fuscation solutions for either untrusted memory [34] or trusted
memory [5] use a dierent-type dummy request to hide the type