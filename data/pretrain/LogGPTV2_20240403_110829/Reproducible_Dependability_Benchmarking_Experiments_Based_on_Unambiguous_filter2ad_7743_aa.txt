# Reproducible Dependability Benchmarking Experiments Based on Unambiguous Benchmark Setup Descriptions

## Authors
Kerstin Buchacker, Mario Dal Cin, Hans-Jörg Höxer, Roland Karch, Volkmar Sieh, Oliver Tschäche

### Abstract
Dependability benchmarking extends traditional performance benchmarking by incorporating dependability aspects. A key feature of any benchmark is the ability to fairly evaluate and compare a system's attributes. To avoid biased results, independent teams should be able to replicate the benchmark and achieve similar outcomes. This paper introduces a VHDL-based method for semantically unambiguous descriptions of both static and dynamic aspects of benchmarks. The proposed approach uses VHDL as a precise description and modeling language without imposing restrictions on the actual evaluation methods. We present a dependability benchmarking experiment using this method.

### 1. Introduction
Benchmarks are essential for comparing systems, often serving as marketing tools. Credibility requires that the exact benchmark configuration be detailed enough for others to reproduce and validate the results. Ideally, all aspects of the benchmark configuration should be described semantically unambiguously.

Current benchmarks, such as those from the Transaction Processing Council (TPC) and the Standard Performance Evaluation Corporation (SPEC), publish detailed full-disclosure reports (often several hundred pages long) that include hardware specifications and source code. Most benchmarking and fault injection experiments involve numerous small programs and scripts run semi-automatically from the command line.

In fields like physics, chemistry, and biology, experimental setups are described in such detail that independent teams can reproduce and validate them. In computer science, this can be achieved by creating a formal, machine-readable model of the entire experiment setup. In some cases, this model can be fed into a program or automaton for automatic evaluation.

We have chosen VHDL as the formal description language due to its well-defined semantics for both static and dynamic models. Other languages, such as UML, lack the necessary unambiguous semantic specification. Our approach uses a single VHDL model to describe the experiment and its evaluation in detail and completeness. The model identifies necessary inputs, such as hardware and software components, user input, and benchmark elements like workloads and faultloads. The use of VHDL does not restrict the evaluation method; the experiment can be conducted using real hardware, a virtual machine, or VHDL simulation. If the model is semantically unambiguous and the evaluations are correct, all methods should yield the same results.

The following sections explain our implementation. Section 2 covers the physically available, more or less static components, i.e., the hardware. Section 3 discusses the interaction between the user or environment and the hardware. Section 4 presents a prototype experiment to test and validate our approach. Section 5 concludes the paper.

### 2. Hardware
The hardware is described using structural VHDL, detailing the complete physical system, which may consist of multiple machines and interconnection networks. The finest granularity at the component level includes commercial off-the-shelf (COTS) components like network interface cards, hard disks, and motherboards.

#### 2.1. Configuration
Figure 1 shows a graphical representation of the structural VHDL model of a single machine's hardware. In a networking context, a single machine is often referred to as a node.

The node in Figure 1 is a typical server (e.g., in a 19-inch rack in a separate server room) without a monitor and keyboard. It includes CPU, memory, video card, mem-to-isa bridge, IDE controller, serial, and Ethernet card as separate components. As a server, it has four disks connected to the IDE controller. The `ctrl` component models external switches (power and reset) on the machine's casing. Interfaces to the outside world include Ethernet and serial interfaces, and buttons or switches on the casing. These interfaces can be input-only, output-only, or bidirectional. Even if present, they may not be connected (e.g., the video card interface in Figure 1).

Once components like the node in Figure 1 are defined, they can be used to build larger structures by connecting their interfaces to appropriate buses. The node in Figure 1 is reused in Section 4, detailing our benchmarking experiment setup.

A textual VHDL model of a small client-server setup with three nodes (two clients and a server) interconnected via a common network is shown in Figure 2. The Ethernet interfaces of the nodes are connected to a common Ethernet (lines 2, 4, and 6 in Figure 2).

This hierarchical approach allows us to build complex setup descriptions entirely in VHDL, starting from simple predefined components and reusing components defined at each level.

#### 2.2. Hardware Faults
For pure performance benchmarks, an unambiguous definition of the configuration is sufficient. For dependability benchmarks, we must consider hardware failures as part of the faultload. [13] first proposed using VHDL components with integrated fault descriptions. We build on this idea to define the failure behavior of basic components in our VHDL model.

While [13] uses classical low-level VHDL components at the gate level, we use relatively high-level COTS hardware components. The fault descriptions for these high-level components differ from bit-flips and stuck-ats for gate-level components but can still be described in VHDL. The following paragraphs discuss how to model possible faults using an Ethernet card as an example.

Figure 3 shows the VHDL model of the Ethernet card in Figure 1, including its failure behavior. Figure 4 visualizes the connections between the VHDL components in Figure 3. The `ethcore` entity is a black box with functionality compatible with the NE2000 Ethernet interface card. The ISA interface of `ethcore` is directly connected to the ISA interface of `ethcard`. The unidirectional interfaces `oeth` (output) and `ieth` (input) of `ethcore` are connected to the bidirectional interface `eth` of `ethcard`. The `oeth` and `ieth` signals are inputs to the processes `ifault` and `ofault`.

Each process has another input signal, a fault signal. The fault signals are of the special VHDL type `fault`, defined as a boolean value occurring with a certain frequency. The interval is the mean time to failure, and the duration is the mean fault activation time. These parameters are used for documentation and should ideally be based on known failure statistics. They can later be used to calculate measures of interest from the collected data.

Processes defined within the same architecture share the same fault signals, ensuring consistent failure behavior across the model.

### Figures
**Figure 1.** Graphical Representation of a Hardware Description in Structural VHDL

**Figure 2.** Structural VHDL Code for a Small Client-Server System

**Figure 3.** Example of a VHDL Component Description Including Failure Behavior

**Figure 4.** Visualization of VHDL Component Connections

---

This optimized version aims to enhance clarity, coherence, and professionalism while maintaining the original content and structure.