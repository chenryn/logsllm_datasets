# 【技术分享】Windows8.1中的沙箱逃逸问题
|
##### 译文声明
本文是翻译文章，文章来源：blogspot.com
原文地址：
译文仅供参考，具体内容表达以及含义原文为准。
****
翻译：[Ox9A82](http://bobao.360.cn/member/contribute?uid=2676915949)
预估稿费：200RMB
投稿方式：发送邮件至[linwei#360.cn](mailto:PI:EMAIL)，或登陆[网页版](http://bobao.360.cn/contribute/index)在线投稿
**前言**
这篇文章要讲解一个Windows 8.1系统中的未被修补的漏洞，这个漏洞可以允许你对作业（job
object）的限制进行逃逸。从而可以有助于开发Chrome浏览器中的沙盒逃逸利用程序，也适用于类似的其它沙盒保护机制。
如果你正试图开发一个款用户模式的安全沙盒程序，那么你是在依赖于系统底层机制的“施舍”。因为，就算你使尽了浑身解数用上了各种安全机制，有时操作系统本身的编写人员就会断送掉你的努力。这本来是我在Shmoocon
and Nullcon上面的演讲话题，主题是在Windows系统上保证一个用户态沙盒安全可靠的困难性。
**Windows 作业对象**
我们首先讲解一下Windows里的Job object到底是什么和Chrome利用它干什么。严格上来说作业其实跟安全没什么关系。job
object是一种把进程分组起来管理，然后限制访问通用资源的数量和种类的方式。如果你熟悉Unix，那么它很类似ulimit而且功能更强大一些。一个很明确的作用，就是用它来限制一个进程能做的事情。举例来说，Chrome渲染器进程属于以下的job
object。
这个作业对象限制了进程访问一些UI的功能，比如剪贴板。但是它同时还限制了作业中的活动进程只能有一个。这意味着如果你想在作业中新建一个子进程将会被拒绝，并且这项措施是在内核中实现的。当你使用一个受限的token运行时，这只是一个障碍而已。然而，当使用一个普通的用户时你可以使用系统服务例如：WMI或者计划任务来逃逸。
存在一些漏洞会受益于创建子进程，所以打破作业的限制对于构造利用链是很有用的。接下来，我们来看一下可以让我们打破作业对象限制的漏洞。
**控制台驱动的漏洞**
在早期版本的Windows系统中（XP及之前），控制台窗口由客户端-服务器运行时子系统负责处理，比如广为人知的CSRSS。这个子系统实现Win32窗口系统的用户态部分。但是这样就有一个不利条件，你不能正确应用主题到窗口上，这就是为什么控制台窗口看起来与XP系统不协调。因此在Windows的更高版本中，引入了一个新进程，conhost.exe，它将在用户的桌面上生成以处理控制台窗口。然而，CSRSS仍然参与到创建conhost进程的新实例中。
所有在Windows 8.1中改变。代替CSRSS负责，引入了一个新的内核驱动程序condrv.sys。驱动程序公开设备对象 Device
ConDrv，可以从任何用户上下文访问，即使一个严重锁定作为Chrome渲染器。事实上，没有已知的方法来删除访问驱动程序。使用设备IO控制代码将命令发送到驱动程序。感兴趣的命令是CdpLaunchServerProcess，负责创建conhost可执行文件。直接调用它是有点涉及，特别是在64位版本的Windows，所以我们可以只调用Windows
API AllocConsole，它会为我们做。
让我们看看CdpLaunchServerProcess调用的创建conhost.exe进程新实例的代码。
    NTSTATUS CdpCreateProcess(PHANDLE handle, 
                              HANDLE token_handle, 
                              PRTL_USER_PROCESS_PARAMETERS pp) {  
      HANDLE thread_handle;
      NTSTATUS result;    
      PROCESS_ATTRIBUTE_LIST attrib_list;
      SetProcessExecutable(&attrib_list, L"\SystemRoot\System32\Conhost.exe");
      SetProcessToken(&attrib_list, token_handle);
      result = ZwCreateUserProcess(
                 handle,
                 &thread_handle,
                 ...,
                 PROCESS_BREAKAWAY_JOB,  // Process Flags
                 CREATE_SUSPENDED,       // Thread Flags
          ...,                         
                 &attrib_list);
      if ( result < 0 ) 
        *handle = NULL;
      else
        ObCloseHandle(thread_handle, 0);    
      return result;
    }
在这段与漏洞直接相关的代码中有两个非常重要的事情需要注意。首先，它调用一个Zw形式的系统调用NtCreateUserProcess。这个前缀表示将调用系统调用，就像它是来自内核模式而不是用户模式的系统调用。这是很重要的，因为它意味着任何安全检查都会在进程创建过程中被绕过。如果驱动程序调用正常的Nt形式函数，它将不可能从像Chrome渲染器那样的环境中进行逃逸，如果没有它conhost.exe文件就无法打开（试图打开会返回拒绝访问），使这个函数很快失效。
第二个重要的事情是传递PROCESS_BREAKAWAY_JOB标志作为进程标志。虽然这个函数没有文档，但是通过逆向工程的内核代码，你会发现这个标志的意思是新进程不应该与父进程处于一个作业中。这意味着一个受限的作业对象可以被逃逸。当在内核中处理这个标志期间，会检查SeTcbPrivilege;然而，当从内核模式调用时，不管调用者是谁这个检查都会被绕过。
最终结果是：
文件安全检查被绕过，导致conhost进程被创建。
因为PROCESS_BREAKAWAY_JOB标记已通过，因此具有限制性的作业对象将会被逃逸。
对于受限的作业对象（如Chrome GPU进程或Adobe
Reader）的某些用户，你想利用这个问题的所需的全部操作就是调用AllocConsole。但是，我们将看到对于Chrome渲染器来说它不是那么简单的。
在Chrome渲染器中利用这个问题
我们想去尝试利用一下Chrome渲染器，Chrome渲染器是Chrome中使用最多的锁定沙箱进程。我们碰到的第一个挑战是让代码在渲染器的上下文中运行以测试这个漏洞。
渲染器中的通用测试代码
最显而易见的想法就是使用DLL注入，不幸的是这是说起来容易做起来难的事情。渲染器进程的主令牌限制严格，以至于几乎不可能在磁盘上打开一个文件，所以当你注入一个新的线程来加载DLL文件时，将会打开失败。
现在，你可以重新编译Chromium然后调整一下沙箱的策略，就可以访问磁盘的任意位置。但从M37以后，有一种方法使得我们可以欺骗并利用一个release版程序。M37增加了对DirectWrite字体渲染的支持，为了实现这一点，沙盒策略中添加了一条允许读取Windows字体目录。因此，如果我们将我们的DLL放入％windir％
Fonts我们就可以让它加载。当然，为了实现这一点，你需要在系统上以管理员身份执行代码，因此它不会对Chrome的安全造成威胁。我们还需要调整一些DLL的构建设置，假设你使用Visual
Studio，具体来说：
删除manifest，因为它不能在限制性的沙箱中使用。
静态链接DLL，因为一旦初始化你就不能轻易的打开其他DLL了。
**测试Exploit**
当一个dll文件可由Chrome的渲染器进程打开时，我们就可以注入一个线程，然后调用LoadLibrary以在进程中执行代码。作为我们的第一次测尝试，我们先试着调用AllocConsole，看看会发生什么。如果我们使用进程监视器进行监视，我们会发现正在创建的conhost进程，但它永远不会执行，事实上，它几乎是以负的状态码立即退出的。
如果我们把退出状态码转换成一个无符号整数，我们得到了0xC0000022相当于STATUS_ACCESS_DENIED。
显然，很一些什么东西很不高兴，然后杀死了这个过程。为了理解到底发什么了什么，让我们再看一些进程创建后的代码。
    NTSTATUS CdpLaunchServerProcess(
                FILE_OBJECT* ConsoleFile, 
                PRTL_USER_PROCESS_PARAMETERS pp) {
        HANDLE hToken;
        HANDLE hProcess;