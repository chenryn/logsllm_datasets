_color$ = 8    ; size = 4 
_width$ = 12   ; size = 4 
_height$ = 16 ; size = 4 
_depth$ = 20   ; size = 4 
??0box@@QAE@HHHH@Z PROC ; box::box, COMDAT 
; _this$ = ecx 
    push esi 
    mov   esi, ecx 
    call ??0object@@QAE@XZ ; object::object 
    mov   eax, DWORD PTR _color$[esp] 
    mov   ecx, DWORD PTR _width$[esp] 
    mov   edx, DWORD PTR _height$[esp] 
    mov   DWORD PTR [esi+4], eax 
    mov   eax, DWORD PTR _depth$[esp] 
    mov   DWORD PTR [esi+16], eax 
    mov   DWORD PTR [esi], OFFSET ??_7box@@6B@ 
异步社区会员 dearfuture(15918834820) 专享 尊重版权
526 
逆向工程权威指南（下册） 
    mov   DWORD PTR [esi+8], ecx 
    mov   DWORD PTR [esi+12], edx 
    mov   eax, esi 
    pop   esi 
    ret   16 
??0box@@QAE@HHHH@Z ENDP ; box::box 
它的内存布局略有不同：第一个字段是某个 box::’vftable’（虚拟函数表）的指针（具体名称由 MSVC
编译器设置）。 
在这个表中，我们看到一个指向数据表box::RTTI Complete Object Locator的链接和一个指向类成员函
数box::dump()的链接。它们的正规名称分别是虚拟方法表和RTTI
①
51.2  ostream 输出流 
。虚拟 方法表存储着各方法的地址，RTTI
表存储着类型的信息。另外，RTTI表为C++程序提供了“强制转换运算符”dynamic_cast（将基类类型的指
针或引用安全地转换为派生类型的指针或引用）和“类型查询操作符”typeid。在上述指令调用类成员函数
时，它所使用的类名称仍然是文本型字符串。基于代码中dump()函数的实例情况可知，在通过调用指向基
类的指针（或引用）调用其虚拟函数（类实例：：虚方法）时，指针最终会指向派生类实例的同名虚拟方法
——构造函数会把指针实际指向的对象实例的类型信息存储在数据结构之中。 
在内存数据表里检索虚拟方法的内存地址必定要消耗额外的 CPU 时间。因此虚拟方法的运行速度比一
般的方法要慢一些。 
在 GCC 生成的相应代码中，RTTI 表的构造稍微有些不同。 
我们来看一个经典的例子“hello world!”，这里我们试图采用输出流的方式重新实现它。 
#include  
int main() 
{ 
    std::cout  > 
    add   esp, 8 
    xor   eax, eax 
    ret   0 
_main ENDP 
我们把源程序稍微修改一下： 
#include  
int main() 
{ 
    std::cout  > 
    add   esp, 8 
    push OFFSET $SG37112 ; 'world!' 
    push eax  
    ; result of previous function execution 
    call ??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?  
     $char_traits@D@std@@@0@AAV10@PBD@Z ; std::operator > 
    add   esp, 8 
    xor   eax, eax 
    ret   0 
_main ENDP 
如果我们用 f()函数来表示“ 
#include  
struct std_string 
{ 
    union 
    { 
        char buf[16]; 
        char* ptr; 
    } u; 
    size_t size;  
// AKA 'Mysize' in MSVC 
    size_t capacity; // AKA 'Myres' in MSVC 
}; 
void dump_std_string(std::string s) 
{ 
    struct std_string *p=(struct std_string*)&s; 
    printf ("[%s] size:%d capacity:%d\n", p->size>16 ? p->u.ptr : p->u.buf, p->size, p-> capacity); 
}; 
int main() 
{ 
异步社区会员 dearfuture(15918834820) 专享 尊重版权
第 51 章  C++ 
529 
    std::string s1="short string"; 
    std::string s2="string longer that 16 bytes"; 
    dump_std_string(s1); 
    dump_std_string(s2); 
    // that works without using c_str() 
    printf ("%s\n", &s1); 
    printf ("%s\n", s2); 
}; 
源代码的功能应当不需要解释。 
需要注意的有以下几点： 
只要字符串长度没有超过 16 个字符，编译器就不会使用堆（heap）存储字符串的缓冲区。在实际的程
序中，多数字符串确实是短字符串。很明显，微软研发人员将 16 字符串作为长短字符串的分割点。 
虽然我们没有在主程序 main()的最后调用成员函数 c_str()，但是这个程序可以通过编译，也能在屏幕
上显示出字符串的内容。 
这就是为什么这个程序能运转起来。 
第一个例子的字符串不足 16 个字符，因此它会被保存到字符串缓冲区。这个缓冲区实际位于 std:string
对象的起始地址（可视为结构体型数据）。这个区域里的数据，采取了标准的 ASCIIZ 的数据结构。因此 printf()
函数在处理指针时直接处理了相应的 ASCIIZ 字符串。所以，源程序可以显示第一个字符串的内容。 
第二个字符串的长度大于 16 字节，更危险。编程人员很容易在此疏忽大意、忘记此时应当使用 string
对象的成员函数 c_str()。之所以本例这样还能正常工作，是因为指向缓冲区的指针正好位于结构体的开始
部分。某些人可能在相当长的时间里一直这么写代码，而一直不觉得会有问题；直到他们遇到超长字符串
引发程序崩溃的时候，他们才会开始意识到问题的存在。 
GCC 
GCC 在实现 std::string 的时候使用了 MSVC 里没有的变量——reference count。 
另外一个有趣的事情是：指向 std::string 实例的指针，并不是指向结构体的起始地址，而是指向了字符
串缓冲区的指针。文件 libstdc++-v3/include/bits/ basic_string.h 解释了这一问题。它说，这是为了便于调试
程序： 
* The reason you want _M_data pointing to the character %array and 
* not the _Rep is so that the debugger can see the string 
* contents. (Probably we should add a non-inline member to get 
* the _Rep for the debugger to use, so users can check the actual 
* string length.) 
 之所以使用_M_data（而不采用_Rep）指向字符串数列%array，原因在于调试人员能看到字符串的内
容。也许我们可以增加一个非内驻的成员_Rep 以调试，但是使用者可以检查实际的字符串长度。 
有兴趣的读者可以下载看看：http://gcc.gnu.org/onlinedocs/libstdc++/libstdc++-html-USERS-4.4/a010 
68.html。 
考虑到有关问题之后，我们调整了上一个小节使用的源程序： 
指令清单 51.22  GCC 例子 
#include  
#include  
struct std_string 
{ 
    size_t length; 
    size_t capacity; 
    size_t refcount; 
异步社区会员 dearfuture(15918834820) 专享 尊重版权
530 
逆向工程权威指南（下册） 
}; 
void dump_std_string(std::string s) 
{ 
    char *p1=*(char**)&s; // GCC type checking workaround 
    struct std_string *p2=(struct std_string*)(p1-sizeof(struct std_string)); 
    printf ("[%s] size:%d capacity:%d\n", p1, p2->length, p2->capacity); 
}; 
int main() 
{ 
    std::string s1="short string"; 
    std::string s2="string longer that 16 bytes"; 
    dump_std_string(s1); 
    dump_std_string(s2); 
    // GCC type checking workaround: 
    printf ("%s\n", *(char**)&s1); 
    printf ("%s\n", *(char**)&s2); 
}; 
因为 GCC 的类型检查规则更为苛刻，所以我们不得不做很多针对性的修改。即使这个程序的 printf()
函数同样可以在不依赖 c_str()函数的情况下打印字符串内容。 
一个更加复杂的例子 
#include  
#include  
int main() 
{ 
    std::string s1="Hello, "; 
    std::string s2="world!\n"; 
    std::string s3=s1+s2; 
    printf ("%s\n", s3.c_str()); 
}  
指令清单 51.23  MSVC 2012 编译的程序 
$SG39512 DB 'Hello, ', 00H 
$SG39514 DB 'world!', 0aH, 00H 
$SG39581 DB '%s', 0aH, 00H 
_s2$ = -72 ; size = 24 
_s3$ = -48 ; size = 24 
_s1$ = -24 ; size = 24 
_main PROC 
    sub  esp, 72 
    push 7 
    push OFFSET $SG39512 
    lea   ecx, DWORD PTR _s1$[esp+80] 
    mov   DWORD PTR _s1$[esp+100], 15 
    mov   DWORD PTR _s1$[esp+96], 0 
    mov   BYTE PTR _s1$[esp+80], 0 
    call ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z ;  
    std::basic_string,std::allocator >::assign 
    push 7 
    push OFFSET $SG39514 
    lea   ecx, DWORD PTR _s2$[esp+80] 
    mov   DWORD PTR _s2$[esp+100], 15 
    mov   DWORD PTR _s2$[esp+96], 0 
异步社区会员 dearfuture(15918834820) 专享 尊重版权
第 51 章  C++ 
531 
    mov   BYTE PTR _s2$[esp+80], 0 
    call ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z ;  
     std::basic_string,std::allocator >::assign 
    lea   eax, DWORD PTR _s2$[esp+72] 
    push eax 
    lea   eax, DWORD PTR _s1$[esp+76] 
    push eax 
    lea   eax, DWORD PTR _s3$[esp+80] 
    push eax 
    call ??$?HDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA?AV?$basic_string@DU?  
     $char_traits@D@std@@V?$allocator@D@2@@0@ABV10@0@Z ; std::operator+,std::allocator > 
    ; inlined c_str() method: 
    cmp   DWORD PTR _s3$[esp+104], 16 
    lea   eax, DWORD PTR _s3$[esp+84] 
    cmovae eax, DWORD PTR _s3$[esp+84] 
    push eax 
    push OFFSET $SG39581 
    call _printf 
    add   esp, 20 
    cmp   DWORD PTR _s3$[esp+92], 16 
    jb    SHORT $LN119@main 
    push DWORD PTR _s3$[esp+72] 
    call ??3@YAXPAX@Z  
; operator delete 
    add   esp, 4 
$LN119@main: 
    cmp   DWORD PTR _s2$[esp+92], 16 
    mov   DWORD PTR _s3$[esp+92], 15 
    mov   DWORD PTR _s3$[esp+88], 0 
    mov   BYTE PTR _s3$[esp+72], 0 
    jb    SHORT $LN151@main 
    push DWORD PTR _s2$[esp+72] 
    call ??3@YAXPAX@Z  
; operator delete 
    add   esp, 4 