            def process_IN_CREATE(self, event):
                print "[!] Create : " + event.pathname
                DeleteFileOrDir(event.pathname)
            #删除
            def process_IN_DELETE(self, event):
                print "[!] Delete : " + event.pathname
            #文件属性被修改，如chmod、chown命令
            def process_IN_ATTRIB(self, event):
                print "[!] Attribute been modified:" + event.pathname
            #文件被移来，如mv、cp命令
            def process_IN_MOVED_TO(self, event):
                print "[!] File or dir been moved to here: " + event.pathname
                DeleteFileOrDir(event.pathname)
    def DeleteFileOrDir(target):
        if os.path.isdir(target):
            fileslist = os.listdir(target)
            for files in fileslist:
                DeleteFileOrDir(target + "/" + files)
            try:
                os.rmdir(target)
                print "     >>> Delete directory successfully: " + target
            except:
                print "     [-] Delete directory failed: " + target
        if os.path.isfile(target):
            try:
                os.remove(target)
                print "     >>> Delete file successfully" + target
            except:
                print "     [-] Delete file filed:  " + target
    def Monitor(path):
            wm = WatchManager()
            mask = IN_DELETE | IN_CREATE | IN_MOVED_TO | IN_ATTRIB
            notifier = Notifier(wm, EventHandler())
            wm.add_watch(path, mask,rec=True)
            print '[+] Now Starting Monitor:  %s'%(path)
            while True:
                    try:
                            notifier.process_events()
                            if notifier.check_events():
                                    notifier.read_events()
                    except KeyboardInterrupt:
                            notifier.stop()
                            break
    if __name__ == "__main__":
        parser = argparse.ArgumentParser(
            usage="%(prog)s -w [path]",
            description=('''
                Introduce：Simple Directory Monitor!  by ssooking''')
        )
        parser.add_argument('-w','--watch',action="store",dest="path",default="/var/www/html/",help="directory to watch,default is /var/www/html")
        args=parser.parse_args()
        Monitor(args.path)
关于pyinotify
库的用法不再赘述，可以看到我在上述代码中创建了一个事件监控处理的类EventHandler，在这个示例中，我们仅仅关注创建、删除、修改属性、移动操作事件，并且我定义了一个DeleteFileOrDir方法用于自动删除增加的目录或者文件。运行测试截图：
我们可以编写功能更加细化的程序，实现如：
监控文件变更，
禁止创建、修改、删除任何文件或目录，
自动删除新增文件，
把被修改的文件改回去,
删除畸形隐藏文件等功能。我们使用pyinstaller把我代码打包为linux的elf可执行文件。-F参数表示打包为独立可运行文件，命令执行完之后自动生成：build、dist文件夹和SimpleMonitor.spec文件，你可以在dist目录里找到生成的elf程序。
打包的文件在CTFDefense项目的Monitor目录下
**4\. 网络监控断异常连接**
linux安全防护一定少不了 iptables了，使用iptables需要有管理员权限。对于比赛环境，我们完全可以配置一个近乎苛刻的配置防火墙策略。
具体我们可以做哪些工作呢，举一些例子：
**（1）关闭所有网络端口，只开放一些比赛的必要端口，也可以防止后门的连接**
    #开放ssh
    iptables -A INPUT -p tcp --dport 22 -j ACCEPT
    iptables -A OUTPUT -p tcp --sport 22 -j ACCEPT
    #打开80端口
    iptables -A INPUT -p tcp --dport 80 -j ACCEPT
    iptables -A OUTPUT -p tcp --sport 80 -j ACCEPT
    #开启多端口简单用法
    iptables -A INPUT -p tcp -m multiport --dport 22,80,8080,8081 -j ACCEPT
    #允许外部访问本地多个端口 如8080，8081，8082,且只允许是新连接、已经连接的和已经连接的延伸出新连接的会话
    iptables -A INPUT -p tcp -m multiport --dport 8080,8081,8082,12345 -m state --state NEW,ESTABLISHED,RELATED -j ACCEPT
    iptables -A OUTPUT -p tcp -m multiport --sport 8080,8081,8082,12345 -m state --state ESTABLISHED -j ACCEPT
**（2）限制ssh登陆，进行访问控制**
    iptable -t filter -A INPUT -s 123.4.5.6 -p tcp --dport 22 -j DROP   //禁止从123.4.5.6远程登陆到本机
    iptables -A INPUT -s 123.4.5.6/24 -p tcp --dport 22 -j ACCEPT  //允许123.4.5.6网段远程登陆访问ssh
**（3）限制IP连接数和连接速率**
我们可以限制IP的网络连接数和速度等，限制过快的连接频率，这样可以在一定程度上限制对方的扫描器。狠一点的话，甚至可以让对方只能以手工点网页的速度与访问+_+
    #单个IP的最大连接数为 30
    iptables -I INPUT -p tcp --dport 80 -m connlimit --connlimit-above 30 -j REJECT
    #单个IP在60秒内只允许最多新建15个连接
    iptables -A INPUT -p tcp --dport 80 -m recent --name BAD_HTTP_ACCESS --update --seconds 60 --hitcount 15 -j REJECT
    iptables -A INPUT -p tcp --dport 80 -m recent --name BAD_HTTP_ACCESS --set -j ACCEPT
    #允许外部访问本机80端口，且本机初始只允许有10个连接，每秒新增加2个连接，如果访问超过此限制则拒接 （此方式可以限制一些攻击）
    iptables -A INPUT -p tcp --dport 80 -m limit --limit 2/s --limit-burst 10 -j ACCEPT
    iptables -A OUTPUT -p tcp --sport 80 -j ACCEPT
再猥琐一点，可以定时断开已经建立的连接，让对方只能断断续续的访问~~
**（4）数据包简单识别，防止端口复用类的后门或者shell**
假设病毒木马程序通过22，80端口向服务器外传送数据，这种方式发向外发的数据不是我们通过访问网页请求而回应的数据包。我们可以禁止这些没有通过请求回应的数据包。
    iptables -A OUTPUT -p tcp --sport 22 -m state --state ESTABLISHED -j ACCEPT
    iptables -A OUTPUT -p tcp --sport 80 -m state --state ESTABLISHED -j ACCEPT
    iptables -A OUTPUT -p tcp --sport 443 -m state --state ESTABLISHED -j ACCEP
**（5）限制访问**
如果对方来势太凶，我们可以限制或者封杀他们的ip段。
    iptable -t filter -A FORWARD -s 123.4.5.6 -d 123.4.5.7 -j DROP  //禁止从客户机123.4.5.6访问123.4.5.7上的任何服务
    #封杀123.4.5.6这个IP或者某个ip段
    iptables -I INPUT -s 123.4.5.6 -j DROP
    iptables -I INPUT -s 123.4.5.1/24 -j DROP
**（6）过滤异常报文**
iptables有一个TCP匹配扩展协议–tcp-flags，功能是过滤TCP中的一些包，比如SYN包，ACK包，FIN包，RST包等等。举个例子，我们知道SYN是建立连接，RST是重置连接，如果这两个同时出现，就知道这样的包是有问题的，应该丢弃。下面的例子是利用–tcp-flags参数，对一些包进行标识过滤，扔掉异常的数据包。
    iptables -A INPUT -p tcp --tcp-flags SYN,FIN,ACK,RST SYN         #表示 SYN,FIN,ACK,RST的标识都检查，但只匹配SYN标识
    iptables -A INPUT -p tcp --syn                         #匹配SYN标识位
    iptables -A INPUT -p tcp --tcp-flags ALL FIN,URG,PSH -j DROP       #检查所有的标识位，匹配到FIN URG PSH的丢弃
    iptables -A INPUT -p tcp --tcp-flags ALL NONE -j DROP           #丢弃没标志位的包
    iptables -A INPUT -p tcp --tcp-flags ALL SYN,RST,ACK,FIN,URG -j DROP #匹配到SYN ACK FIN URG的丢弃
    iptables -A INPUT -p tcp --tcp-flags ALL SYN,FIN,RST -j DROP      #匹配到SYN ACK FIN RST的丢弃
    iptables -A INPUT -p tcp --tcp-flags ALL SYN,FIN,PSH -j DROP      #匹配到SYN FIN PSH的丢弃
    iptables -A INPUT -p tcp --tcp-flags ALL SYN,FIN,RST,PSH -j DROP    #匹配到SYN FIN RST PSH的丢弃