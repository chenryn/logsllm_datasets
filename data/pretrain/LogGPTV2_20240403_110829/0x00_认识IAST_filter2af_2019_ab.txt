    public class AttachLauncher {
      public static void main(String[] args) throws IOException, AttachNotSupportedException, AgentLoadException, AgentInitializationException {
        System.out.println("Hello,This is TestAgent Program!");
        System.out.println("running JVM start ");
        List list = VirtualMachine.list();
        System.out.println(list.size());
        for (VirtualMachineDescriptor vmd : list) {
          // 匹配目标主程序所在jvm，并加载agent
          if (vmd.displayName().endsWith("com.r17a.demo.Main")) {
            System.out.println("attaching agent to jvm:" + vmd.displayName() + ",jvmid is " + vmd.id());
            VirtualMachine virtualMachine = VirtualMachine.attach(vmd.id());
            virtualMachine.loadAgent("yourpath/agent-1.0-SNAPSHOT.jar");
            virtualMachine.detach();
            System.out.println("attach finsh!");
          }
        }
      }
    }
首先运行Main.java，保证主程序已启动在运行状态，执行AttachLauncher加载agent，运行结果如下：
#### 小结
premain和agentmain两者区别如下：
  * premain在JVM启动时通过命令行加载代理，agentmain采用attach方式向目标JVM中加载代理；
  * premain是所有类首次加载并且进入程序main()方法之前，premain方法就会被激活，然后所有被加载的类都会执行`ClassFileTransformer`列表中的回调方式，`ClassFileTransformer`中的类是虚拟机加载的所有类，这个是由于代理加载的顺序比较靠前决定的。agentmain是被代理的目标JVM有可能很早之前已经启动，类已经被加载完成，这个时候需要借助`Instrumentation#retransformClasses(Class... classes)`让对应的类可以重新转换，从而激活重新转换的类执行`ClassFileTransformer`列表中的回调。
### ASM：
#### 字节码结构
字段 | 长度 | 说明  
---|---|---  
魔数(magic_number) | 4字节 | class的标志CAFEBABE  
版本(version) | 4字节 | 次版本minor version+主版本major version，  
常量池(constant_pool) | 2字节+cp_info*(n-1) |
常量池计数器+常量池数据区=常量数量n+cp_info*(n-1)。不同类型的常量数据结构不同，数值型结构都是tag+bytes，比如CONSTANT_Interger_info为1字节的tag值为3，4字节的bytes为int值；UTF8编码的字符串CONSTANT_Utf8_info的结构是tag(1字节,值为1)+length(2字节,字符串长度)+bytes(长度为length的字符串)；ref索引型结构基本都是tag+index+index或者tag+index，比如CONSTANT_Class_info结构为tag(1字节,值为7)+index(2字节,指向类的权限定名常量项的索引)，CONSTANT_Fieldref_Class_info  
访问标志(access_flag) | 2字节 | 表示类、方法等的修饰符，如ACC_PUBLIC 0x0001，ACC_STATIC
0x0008，那么public static就是ACC_PUBLIC和ACC_STATIC或运算后的结果0x0009  
本类索引(this_class) | 2字节 | 类的全限定名的索引，指向常量池该类的CONSTANT_Class_info  
父类索引(super_class) | 2字节 | 父类的全限定名的索引  
接口索引(interfaces) | 4字节 | 接口计数器+接口信息，即2字节表示实现接口的数量，n个字节是所有接口名称的常量索引值  
字段表(fileds) | 2字节+field_info*n |
字段计数器(2字节)+field_info*n。field_info包括权限修饰符、字段名索引、描述符索引、属性个数、属性列表  
方法表(methods) | 2字节+method_info*n |
方法计数器(2字节)+method_info*n。method_info包括权限修饰符、方法名索引、描述符索引、属性个数、属性列表  
特殊属性表(attributes) | 2字节+attribute_info | 描述文件中类或接口所定义属性的基本信息。  
方法表是我们字节码增强操作非常关注的一部分，所以特别说明下。方法表的属性部分包括不限于
>   * Code区：JVM指令操作码区，在进行字节码增强时重点操作的就是Code区这一部分。
>   *
> LineNumberTable：行号表，Java源码的行号与Code区字节码指令的对应关系，将Code区的操作码和源代码中的行号对应，Debug时会起到作用（源代码走一行，需要走多少个JVM指令操作码）。
>   *
> LocalVariableTable：本地变量表，包含This和局部变量，之所以可以在每一个方法内部都可以调用This，是因为JVM将This作为每一个方法的第一个参数隐式进行传入。当然，这是针对非Static方法而言。
>
字节码操作指令(opcode)类型包括加载存储、运算和类型转换、控制转移、对象操作、方法调用、线程同步、异常处理等，具体可以参考：
#### ASM字节码增强技术
ASM工具可以修改字节码，核心包有Core API、Tree API、Commons和Util等，ASM转换类的两种方法就是基于事件触发的Core
API和基于对象的Tree API。Core API采用事件驱动方法，按照class内容顺序解析文档，当解析触发事件则回调函数处理事件；而Tree
API是采用树型结构先将class解析成树结构的数据然后进行处理。本文关注的主要是Core
API，想要了解更多可以阅读：[asm4-guide](http://download.forge.objectweb.org/asm/asm4-guide.pdf)。Core
API最重要的就是ClassReader、ClassVisitor和ClassWriter这三个类。
> ClassReader： **字节码读取和分析引擎**
> ，负责解析class文件，将class内容解析成对应上面字节码结构的各个节点。当有事件发生，触发相应的ClassVisitor、MethodVisitor进行处理，这个类可以看作一个事件产生器。
>
> ClassVisitor：是一个抽象类 使用时需要继承， **ClassVisitor定义解析class字节码时想要触发的事件** ，可以通过
> **ClassVisitor的visit方法修改原始的字节码**
> ，ClassVisitor的每个visitXxx方法都对应于同名的类文件结构节点，比如visitAttribute、visitField、visitMethod等。这样当ClassReader.accept()传入ClassVisitor实例时，ClassVisitor定义ClassReader在解析class的不同节点时需要触发的事件，然后调用ClassVisitor中对应节点的方法。
> 这个类可以看作一个事件筛选器。
>
> ClassWriter：继承了ClassVisitor接口，可以 **拼接生成字节码**
> ，调用toByteArray将字节码byte数组形式返回。code
这里要特别强调下MethodVisitor，它有非常多用来操作code区(上面字节码部分提到的方法表属性中的)指令码的方法，也是经常会用到的：
方法 | 描述  
---|---  
visitCode() | 开始解析Code属性  
visitInsn(int opcode) | 访问一个零参数要求的字节码指令，如ACONST_NULL  
visitIntInsn(int opcode, int operand) | 访问一个零操作栈要求但需要有一个int参数的字节码指令，如BIPUSH  
visitVarInsn(int opcode, int var) | 访问一个关于局部变量的字节码指令，如ALOAD  
visitTypeInsn(int opcode, String type) | 访问一个关于类型的字节码指令，如CHECKCAST  
visitFieldInsn(int opcode, String owner, String name, String desc) |
访问一个有关于字段的字节码，如PUTFIELD  
visitMethodInsn(int opcode, String owner, String name, String desc) |
访问一个有关于方法调用的字节码，如INVOKESPECIAL  
visitJumpInsn(int opcode, Label label) | 访问跳转字节码，如IFEQ  
visitInvokeDynamicInsn(String name, String desc, Handle bsm,Object... bsmArgs)
| 基于INVOKEDYNAMIC，动态方法调用，会在lambda表达式和方法引用里用到  
visitLdcInsn(Object cst) | 基于LDC、LDC_W和LDC2_W，将一个常量加载到操作栈用  
visitIincInsn(int var, int increment) | 基于IINC、IINC_W，自增/减表达式  
visitTableSwitchInsn(int min, int max, Label dflt, Label... labels) |
基于TABLESWITCH，用于进行table-switch操作  
#### ASM操作示例：
    package com.r17a.demo.asm;
    public class Test {
      public void test(){
        System.out.println("the program is  running!");
      }
    }
我们尝试将一个Test.class文件读取，然后将test方法的开始和结束加上字符串输出，将其增强为：
    package com.r17a.demo.asm;
    public class Test {
      public void test(){
        System.out.println("here enhanced: enter");
        System.out.println("the program is  running!");
        System.out.println("here enhanced: leave");
      }
    }
首先我们自定义一个ClassVisitor用来定义事件，也就是来修改test方法：
    package com.r17a.demo.asm;
    import org.objectweb.asm.ClassVisitor;
    import org.objectweb.asm.MethodVisitor;
    import org.objectweb.asm.Opcodes;
    public class TestClassVisitor extends ClassVisitor implements Opcodes {
      public TestClassVisitor(ClassVisitor cv) {
        super(Opcodes.ASM5, cv);
      }
      @Override
      public void visit(int version, int access, String name, String signature, String superName, String[] interfaces) {
        super.visit(version, access, name, signature, superName, interfaces);
      }
      @Override
      public MethodVisitor visitMethod(int access, String name, String desc, String signature, String[] exceptions) {
        MethodVisitor mv = cv.visitMethod(access, name, desc, signature, exceptions);
        // 当方法名为test时候进行修改
        if(name.equals("test")){
          mv = new TestMethodVisitor(mv);
        }
        return mv;
      }
      class TestMethodVisitor extends MethodVisitor implements Opcodes{
        public TestMethodVisitor(MethodVisitor mv) {
          super(Opcodes.ASM5, mv);
        }
        @Override
        public void visitCode() {
          super.visitCode();
          // 在开始扫描code区时 即方法开始时添加方法调用System.out.println("here enhanced: enter");
          // 首先System.out是一个field: public final static PrintStream out = null;
          mv.visitFieldInsn(Opcodes.GETSTATIC,"java/lang/System","out","Ljava/io/PrintStream;");
          // 将字符串常量加载到栈
          mv.visitLdcInsn("here enhanced: enter");
          // 调用println:  public void println(String x)
          mv.visitMethodInsn(Opcodes.INVOKEVIRTUAL,"java/io/PrintStream","println","(Ljava/lang/String;)V",false);
        }
        @Override
        public void visitInsn(int opcode) {
          //    int IRETURN = 172; // visitInsn
          //    int LRETURN = 173; // -          //    int FRETURN = 174; // -          //    int DRETURN = 175; // -          //    int ARETURN = 176; // -          //    int RETURN = 177; // -          // 判断opcode是否处于结束状态，return或者抛出异常的情况，在结束前添加字节码
          if ((opcode >= Opcodes.IRETURN && opcode <= Opcodes.RETURN) || opcode == Opcodes.ATHROW){
            mv.visitFieldInsn(Opcodes.GETSTATIC,"java/lang/System","out","Ljava/io/PrintStream;");
            mv.visitLdcInsn("here enhanced: leave");
            mv.visitMethodInsn(Opcodes.INVOKEVIRTUAL,"java/io/PrintStream","println","(Ljava/lang/String;)V",false);
          }
          super.visitInsn(opcode);
        }
      }
    }
通过ClassReader、ClassVisitor、ClassWriter来实现具体的修改，并通过自定义TestClassLoader重新加载类，在调用test方法：
    package com.r17a.demo.asm;
    import org.objectweb.asm.ClassReader;
    import org.objectweb.asm.ClassWriter;
    import org.objectweb.asm.ClassVisitor;
    import java.io.File;
    import java.io.FileOutputStream;
    import java.io.IOException;
    import java.lang.reflect.Method;
    public class AsmTest {
        public static void main(String[] args) throws Exception {