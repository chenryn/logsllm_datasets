## 3××3××类状态码表示客户端请求的资源发生了变动，客户端必须用新的 URI重新发送请求获取资源，也就是通常所说的"重定向"，包括著名的 301、302跳转。"**301 MovedPermanently**"俗称"永久重定向"，含义是此次请求的资源已经不存在了，需要改用改用新的URI 再次访问。与它类似的是"**302 Found**"，曾经的描述短语是"**MovedTemporarily**"，俗称"临时重定向"，意思是请求的资源还在，但需要暂时用另一个URI 来访问。301 和 302 都会在响应头里使用字段**Location**指明后续要跳转的URI，最终的效果很相似，浏览器都会重定向到新的URI。两者的根本区别在于语义，一个是"永久"，一个是"临时"，所以在场景、用法上差距很大。比如，你的网站升级到了 HTTPS，原来的 HTTP不打算用了，这就是"永久"的，所以要配置 301 跳转，把所有的 HTTP流量都切换到 HTTPS。再比如，今天夜里网站后台要系统维护，服务暂时不可用，这就属于"临时"的，可以配置成302 跳转，把流量临时切换到一个静态通知页面，浏览器看到这个 302就知道这只是暂时的情况，不会做缓存优化，第二天还会访问原来的地址。"**304 Not Modified**" 是一个比较有意思的状态码，它用于If-Modified-Since等条件请求，表示资源未修改，用于缓存控制。它不具有通常的跳转含义，但可以理解成"重定向已到缓存的文件"（即"缓存重定向"）。301、302 和 304 分别涉及了 HTTP协议里重要的"重定向跳转"和"缓存控制"，在之后的课程中我还会细讲。
## 4××4××类状态码表示客户端发送的请求报文有误，服务器无法处理，它就是真正的"错误码"含义了。"**400 BadRequest**"是一个通用的错误码，表示请求报文有错误，但具体是数据格式错误、缺少请求头还是URI 超长它没有明确说，只是一个笼统的错误，客户端看到 400只会是"一头雾水""不知所措"。所以，在开发 Web应用时应当尽量避免给客户端返回 400，而是要用其他更有明确含义的状态码。"**403Forbidden**"实际上不是客户端的请求出错，而是表示服务器禁止访问资源。原因可能多种多样，例如信息敏感、法律禁止等，如果服务器友好一点，可以在body 里详细说明拒绝请求的原因，不过现实中通常都是直接给一个"闭门羹"。"**404 NotFound**"可能是我们最常看见也是最不愿意看到的一个状态码，它的原意是资源在本服务器上未找到，所以无法提供给客户端。但现在已经被"用滥了"，只要服务器"不高兴"就可以给出个404，而我们也无从得知后面到底是真的未找到，还是有什么别的原因，某种程度上它比403 还要令人讨厌。4××里剩下的一些代码较明确地说明了错误的原因，都很好理解，开发中常用的有：-   405 Method Not Allowed：不允许使用某些方法操作资源，例如不允许 POST    只能 GET；-   406 Not    Acceptable：资源无法满足客户端请求的条件，例如请求中文但只有英文；-   408 Request Timeout：请求超时，服务器等待了过长的时间；-   409 Conflict：多个请求发生了冲突，可以理解为多线程并发时的竞态；-   413 Request Entity Too Large：请求报文里的 body 太大；-   414 Request-URI Too Long：请求行里的 URI 太大；-   429 Too Many    Requests：客户端发送了太多的请求，通常是由于服务器的限连策略；-   431 Request Header Fields Too Large：请求头某个字段或总体太大；
## 5××5××类状态码表示客户端请求报文正确，但服务器在处理时内部发生了错误，无法返回应有的响应数据，是服务器端的"错误码"。"**500 Internal Server Error**"与 400类似，也是一个通用的错误码，服务器究竟发生了什么错误我们是不知道的。不过对于服务器来说这应该算是好事，通常不应该把服务器内部的详细信息，例如出错的函数调用栈告诉外界。虽然不利于调试，但能够防止黑客的窥探或者分析。"**501 Not Implemented**"表示客户端请求的功能还不支持，这个错误码比 500要"温和"一些，和"即将开业，敬请期待"的意思差不多，不过具体什么时候"开业"就不好说了。"**502 BadGateway**"通常是服务器作为网关或者代理时返回的错误码，表示服务器自身工作正常，访问后端服务器时发生了错误，但具体的错误原因也是不知道的。"**503 ServiceUnavailable**"表示服务器当前很忙，暂时无法响应服务，我们上网时有时候遇到的"网络服务正忙，请稍后重试"的提示信息就是状态码503。503是一个"临时"的状态，很可能过几秒钟后服务器就不那么忙了，可以继续提供服务，所以503响应报文里通常还会有一个"**Retry-After**"字段，指示客户端可以在多久以后再次尝试发送请求。
## 小结1.  [状态码在响应报文里表示了服务器对请求的处理结果；]{.orange}2.  [状态码后的原因短语是简单的文字描述，可以自定义；]{.orange}3.  [状态码是十进制的三位数，分为五类，从 100 到 599；]{.orange}4.  [2××类状态码表示成功，常用的有 200、204、206；]{.orange}5.  [3××类状态码表示重定向，常用的有 301、302、304；]{.orange}6.  [4××类状态码表示客户端错误，常用的有 400、403、404；]{.orange}7.  [5××类状态码表示服务器错误，常用的有 500、501、502、503。]{.orange}
## 课下作业1.  你在开发 HTTP 客户端，收到了一个非标准的状态码，比如    4××、5××，应当如何应对呢？2.  你在开发 HTTP 服务器，处理请求时发现报文里缺了一个必需的 query    参数，应该如何告知客户端错误原因呢？欢迎你把自己的答案写在留言区，与我和其他同学一起讨论。如果你觉得有所收获，欢迎你把文章分享给你的朋友。![](Images/8967302dff3cbd6b81bdd21b26af89a0.png){savepage-src="https://static001.geekbang.org/resource/image/11/ad/11d330fe6de5b9fe34464a6994162dad.png"}![unpreview](Images/4913a489805db29b38aefa585223c013.png){savepage-src="https://static001.geekbang.org/resource/image/56/63/56d766fc04654a31536f554b8bde7b63.jpg"}
# 13 \| HTTP有哪些特点？通过"基础篇"前几讲的学习，你应该已经知道了 HTTP协议的基本知识，了解它的报文结构，请求头、响应头以及内部的请求方法、URI和状态码等细节。你会不会有种疑惑："HTTP协议好像也挺简单的啊，凭什么它就能统治互联网这么多年呢？"所以接下来的这两讲，我会跟你聊聊 HTTP协议的特点、优点和缺点。既要看到它好的一面，也要正视它不好的一面，只有全方位、多角度了解HTTP，才能实现"扬长避短"，更好地利用 HTTP。今天这节课主要说的是 HTTP协议的特点，但不会讲它们的好坏，这些特点即有可能是优点，也有可能是缺点，你可以边听边思考。![](Images/3baccecf9ccf583ff8c7aaa7a08ed58f.png){savepage-src="https://static001.geekbang.org/resource/image/78/4a/7808b195c921e0685958c20509855d4a.png"}
## 灵活可扩展首先， [HTTP 协议是一个"灵活可扩展"的传输协议]{.orange}。HTTP协议最初诞生的时候就比较简单，本着开放的精神只规定了报文的基本格式，比如用空格分隔单词，用换行分隔字段，"header+body"等，报文里的各个组成部分都没有做严格的语法语义限制，可以由开发者任意定制。所以，HTTP 协议就随着互联网的发展一同成长起来了。在这个过程中，HTTP协议逐渐增加了请求方法、版本号、状态码、头字段等特性。而 body也不再限于文本形式的 TXT 或HTML，而是能够传输图片、音频视频等任意数据，这些都是源于它的"灵活可扩展"的特点。``{=html}而那些 RFC文档，实际上也可以理解为是对已有扩展的"承认和标准化"，实现了"从实践中来，到实践中去"的良性循环。也正是因为这个特点，HTTP才能在三十年的历史长河中"屹立不倒"，从最初的低速实验网络发展到现在的遍布全球的高速互联网，始终保持着旺盛的生命力。
## 可靠传输第二个特点， [HTTP 协议是一个"可靠"的传输协议]{.orange}。这个特点显而易见，因为 HTTP 协议是基于 TCP/IP 的，而 TCP本身是一个"可靠"的传输协议，所以 HTTP自然也就继承了这个特性，能够在请求方和应答方之间"可靠"地传输数据。它的具体做法与 TCP/UDP差不多，都是对实际传输的数据（entity）做了一层包装，加上一个头，然后调用Socket API，通过 TCP/IP 协议栈发送或者接收。不过我们必须正确地理解"可靠"的含义，HTTP 并不能 100%保证数据一定能够发送到另一端，在网络繁忙、连接质量差等恶劣的环境下，也有可能收发失败。"可靠"只是向使用者提供了一个"承诺"，会在下层用多种手段"尽量"保证数据的完整送达。当然，如果遇到光纤被意外挖断这样的极端情况，即使是神仙也不能发送成功。所以，"可靠"传输是指在网络基本正常的情况下数据收发必定成功，借用运维里的术语，大概就是"3个 9"或者"4 个 9"的程度吧。