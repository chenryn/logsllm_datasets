### Space-Partitioning Trees in PostgreSQL: Realization and Performance âˆ—

**Authors:**  
Mohamed Y. Eltabakh, Ramy Eltarras, Walid G. Aref  
*Computer Science Department, Purdue University*  
Email: {meltabak, rhassan, aref}@cs.purdue.edu

**Abstract**  
Many evolving database applications require non-traditional indexing mechanisms beyond B+-trees and hash tables. SP-GiST is an extensible indexing framework that supports a wide variety of space-partitioning trees, such as tries, quadtrees, and kd-trees. This paper presents the implementation and realization of SP-GiST-based indexes within PostgreSQL. We address the challenges, experiences, and performance issues encountered during this process. Performance comparisons are conducted within PostgreSQL to evaluate the update and search performances of SP-GiST-based indexes against B+-tree and R-tree for string, point, and line segment datasets. The results highlight the potential performance gains of SP-GiST-based indexes.

1. **Introduction**  
Many emerging database applications necessitate the use of non-traditional indexing mechanisms beyond B+-trees and hash tables. Database vendors have recognized this need and have initiated efforts to support various non-traditional indexes, such as those in Oracle [37] and IBM DB2 [1].

One of the major hurdles in implementing non-traditional indexes within a database engine is the wide variety of such indexes. Additionally, there is significant overhead associated with realizing and integrating these indexes into the engine. Generalized search trees (e.g., GiST [21] and SP-GiST [3, 4]) are designed to address this problem by providing a framework for rapid prototyping of indexes within a database engine.

The contributions of this paper are as follows:
1. We implemented SP-GiST within PostgreSQL to extend the available access methods to include space-partitioning trees like quadtrees, tries, and kd-trees. Our implementation makes SP-GiST portable, meaning it can be realized within PostgreSQL without recompiling the database.
2. We extended the index operations in SP-GiST to include prefix and regular expression matching, as well as a generic incremental nearest-neighbor (NN) search for SP-GiST-based indexes.
3. We conducted extensive experiments within PostgreSQL to compare the performance of SP-GiST indexes against B+-tree and R-tree. Our results show that a disk-based SP-GiST trie performs more than two orders of magnitude better than the B+-tree for regular expression match searches, and a disk-based SP-GiST kd-tree performs over 300% better than an R-tree for point match searches.
4. We implemented a disk-based suffix tree index using SP-GiST to support substring match searching. Our experiments demonstrate that the suffix tree performs more than three orders of magnitude better than existing techniques.
5. We made the PostgreSQL version of SP-GiST available for public access and download at: [www.cs.purdue.edu/spgist](http://www.cs.purdue.edu/spgist).

The rest of this paper is organized as follows. In Section 2, we highlight related work. In Section 3, we provide an overview of space-partitioning trees, the challenges they present from a database indexing perspective, and how these challenges are addressed in SP-GiST. Section 4 describes the implementation of SP-GiST within PostgreSQL. Section 5 introduces a new nearest-neighbor search functionality for SP-GiST. Section 6 presents performance results for a disk-based SP-GiST trie versus the B+-tree for string datasets, and a disk-based SP-GiST kd-tree and PMR quadtree versus the R-tree for two-dimensional point and line segment datasets. Section 7 contains concluding remarks.

2. **Related Work**  
Multidimensional searching is a fundamental operation for many database applications. Several index structures beyond B-trees [6, 11] and hash tables [14, 31] have been proposed for multidimensional data, including the R-tree and its variants [7, 20, 34], the quadtree and its variants [15, 18, 26, 41], the kd-tree [8] and its disk-based variants [9, 32], and the trie and its variants [2, 10, 16]. Extensions to the B-tree have been proposed to index multidimensional data [5, 13]. Extensible indexing frameworks have been proposed to instantiate a variety of index structures efficiently without modifying the database engine. GiST (Generalized Search Trees) is an extensible framework for B-tree-like indexes [21]. SP-GiST (Space Partitioning Generalized Search Trees) is an extensible framework for the family of space-partitioning trees [3, 4, 19].

3. **Overview, Challenges, and SP-GiST**  
The main characteristic of space-partitioning trees is that they partition the multi-dimensional space into disjoint (non-overlapping) regions. Figure 1, Figure 2, and Figure 3 illustrate examples of space-partitioning trees. Partitioning can be either space-driven (e.g., Figure 2), where the space is decomposed into equal-sized partitions regardless of the data distribution, or data-driven (e.g., Figure 3), where the dataset is split into equal portions based on some criteria, such as one of the dimensions.

There are many types of trees in the class of space-partitioning trees that differ in various ways. For simplicity, we highlight some important variations in the context of the trie data structure:

- **Path Shrinking (Figure 1)**: The problem is that lengthy and skinny paths from the root to a leaf may need to be avoided. Paths of one child can be collapsed into one node. For example, the Patricia trie allows for leaf-shrinking (shrinking single-child nodes at the leaf level, e.g., Figure 1(b)), path-shrinking (shrinking single-child nodes at non-leaf levels, e.g., Figure 1(c)), or no shrinking at all (Figure 1(a)).

- **Node Shrinking (Figure 2)**: With space-driven partitions, some partitions may end up being empty. The question is whether to allow these empty partitions to be omitted. For example, the difference between the standard trie (Figure 2(a)) and the forest trie (Figure 2(b)) is that the latter allows empty partitions to be eliminated.

- **Clustering**: This is one of the most serious issues when addressing disk-based space-partitioning trees. The problem is that tree nodes do not map directly to disk pages; they are usually much smaller. The question is how to pack tree nodes into disk pages to reduce disk I/Os for tree search and update. An optimal node-packing algorithm already exists to solve this issue [12].

Other important characteristics of space-partitioning trees include the bucket size of leaf nodes, the resolution of the underlying space, support for various data types, node splitting (when to trigger a split and how to perform it), and concurrency control. For more discussion on these issues as they relate to space-partitioning trees, refer to the relevant literature.

SP-GiST provides a set of interface parameters and external method interfaces to handle the differences among various SP-GiST-based indexes. The interface parameters include:

- **NodePredicate**: Specifies the predicate type at the index nodes.
- **KeyType**: Specifies the data type stored at the leaf nodes.
- **NumberOfSpacePartitions**: Specifies the number of disjoint partitions produced at each decomposition.
- **Resolution**: Limits the number of space decompositions and is set based on the required granularity.
- **PathShrink**: Specifies how the index tree can shrink. It can take one of three values: NeverShrink, LeafShrink, and TreeShrink.
- **NodeShrink**: A Boolean parameter that specifies whether empty partitions should be kept in the index tree.
- **BucketSize**: Specifies the maximum number of data items a data node can hold.

For example, to instantiate the trie variants presented in Figures 1(a), (b), and (c), we set PathShrink to NeverShrink, LeafShrink, and TreeShrink, respectively. To instantiate the trie variants in Figures 2(a) and 2(b), we set NodeShrink to FALSE and TRUE, respectively. For the quadtree and kd-tree in Figures 3, NumberOfSpacePartitions is set to 4 and 2, respectively.

The SP-GiST external methods include the method PickSplit() to specify how the space is decomposed and how the data items are distributed over the new partitions.

**Acknowledgments**  
This work was supported in part by the National Science Foundation under Grants IIS-0093116, IIS-0209120, and 0010044-CCR.