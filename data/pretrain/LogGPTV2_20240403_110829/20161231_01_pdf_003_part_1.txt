Space-partitioning Trees in PostgreSQL: Realization and Performance ∗
MohamedY. Eltabakh Ramy Eltarras WalidG. Aref
ComputerScience Department,Purdue University
{meltabak,rhassan, aref}@cs.purdue.edu
Abstract balancedtrees(B+-tree-liketrees),e.g.,R-trees[7,20,34],
SR-trees[25], andRD-trees[22], while SP-GiST supports
Many evolving database applications warrant the use the class of space-partitioning trees, e.g., tries [10, 16],
of non-traditional indexing mechanisms beyond B+-trees quadtrees [15, 18, 26, 30], and kd-trees [8]. Both frame-
andhashtables. SP-GiSTisanextensibleindexingframe- works have internal methodsthat furnish generaldatabase
workthatbroadenstheclassofsupportedindexestoinclude functionalities, e.g., generalized search and insert algo-
disk-basedversionsofawidevarietyofspace-partitioning rithms, as well as user-defined external methods and pa-
trees, e.g.,disk-basedtrie variants, quadtreevariants, and rametersthattailorthegeneralizedindexintooneinstance
kd-trees. This paper presents a serious attempt at imple- index from the correspondingindex class. GiST has been
menting and realizing SP-GiST-basedindexes inside Post- tested in prototype systems, e.g., in Predator [36] and in
greSQL.SeveralindextypesarerealizedinsidePostgreSQL PostgreSQL[39],andisnotthefocusofthisstudy.
facilitatedbyrapidSP-GiSTinstantiations.Challenges,ex- The purpose of this study is to demonstrate feasibility
periences,andperformanceissuesareaddressedinthepa- and performance issues of SP-GiST-based indexes. Us-
per. Performance comparisons are conducted from within ingSP-GiSTinstantiations,severalindextypesarerealized
PostgreSQLtocompareupdateandsearchperformancesof rapidlyinsidePostgreSQLthatindexstring,point,andline
SP-GiST-basedindexesagainstthe B+-tree andthe R-tree segment data types. In addition, several advanced search
forstring,point,andlinesegmentdatasets. Interestingre- operations are developed inside the SP-GiST framework.
sultsthathighlightthepotentialperformancegainsofSP- Inparticular,inadditiontothestandardindexmaintenance
GiST-basedindexesarepresentedinthepaper. and search mechanisms, we realized the nearest-neighbor
(NN) search algorithm proposed in [23] to support NN
searchoverspacepartitioningtrees. Performancecompar-
1 Introduction isons are conducted from within PostgreSQL to compare
update and search performances of (1) a disk-based trie
variant against the B+-tree for a variety of string dataset
Manyemergingdatabaseapplicationswarranttheuseof
collections, (2) a disk-based kd-tree variant against the
non-traditionalindexingmechanismsbeyondB+-treesand
R-tree for two-dimensional point dataset collections, and
hash tables. Database vendorshave realized this needand
(3) a disk-based quadtreevariant(the PMR-quadtree[30])
have initiated efforts to support several non-traditionalin-
againsttheR-tree forline segmentdatasets. Inadditionto
dexes,e.g.,(Oracle[37],andIBMDB2[1]).
theperformancegainsandtheadvancedsearchfunctionali-
One of the major hurdles in implementing non-
tiesprovidedbySP-GiSTindexes,itistheabilitytorapidly
traditionalindexesinsideadatabaseengineistheverywide
prototypetheseindexesinsideaDBMSthatismostattrac-
variety of such indexes. Moreover, there is tremendous
tive.
overhead associated with realizing and integrating any of
Thecontributionsofthispaperareasfollows:
these indexes inside the engine. Generalized search trees
(e.g., GiST [21] and SP-GiST [3, 4]) are designed to ad-
1. We realized SP-GiST inside PostgreSQL to extend
dressthisproblem.
the available access methods to include the class of
Generalized search trees (GiST [21]) and Space-
space-partitioningtrees,e.g.,quadtrees,tries,kd-trees
partitioning Generalized search trees (SP-GiST [3, 4]) are
and suffix trees. Our implementation methodology
software engineering frameworks for rapid prototyping of
makesSP-GiSTportable,i.e.,SP-GiSTisrealizedin-
indexesinsideadatabaseengine.GiSTsupportstheclassof
sidePostgreSQLwithoutrecompilingPostgreSQL.
∗ThisworkwassupportedinpartbytheNationalScienceFoundation
underGrantsIIS-0093116,IIS-0209120,and0010044-CCR. 2. We extended the index operations in SP-GiST to in-
clude prefix and regular expression match, and a extensible framework for the family of space-partitioning
genericincrementalNNsearchforSP-GiST-basedin- trees [3, 4, 19]. Extensible indexing structures are impor-
dexes. tantinthecontextofobject-relationaldatabasemanagement
systemstosupportnewdatatypes. Theimplementationof
3. WeconductedextensiveexperimentsfromwithinPost- GiSTinInformixDynamicServerwithUniversalDataOp-
greSQL to compare the performance of SP-GiST in- tion(IDS/UDO)ispresentedin[27].Commercialdatabases
dexesagainsttheB+-treeandR-tree.Ourresultsshow havesupportedextensibleindexingframeworks,e.g., IBM
that a disk-based SP-GiST trie performsmore than 2 DB2 [1], andOracle[37]. The performanceof variousin-
ordersofmagnitudebetterthantheB+-treeforaregu- dexstructureshavebeenstudiedextensively. Forexample,
larexpressionmatchsearch,andthatadisk-basedSP- amodelfortheR-treeperformanceisproposedin[40]. R-
GiSTkd-treeperformsmorethan300%betterthanan tree and quadtree variants are compared in [24] and from
R-treeforapointmatchsearch.
withinOracleSpatialin[28].
4. We realized a disk-bsed suffix tree index using SP-
3 Space-partitioning Trees: Overview, Chal-
GiSTtosupportsubstringmatchsearching.Ourexper-
imentsdemonstratethatthesuffixtreeperformsmore lenges, and SP-GiST
than 3 orders of magnitude better than existing tech-
niques. The main characteristic of space-partitioning trees is
thattheypartitionthemulti-dimensionalspaceintodisjoint
5. We made the PostgreSQL version of SP-GiST
(non-overlapping)regions. RefertoFigures1,2,and3,for
available for public access and download at:
afewexamplesofspace-partitioningtrees. Partitioningcan
www.cs.purdue.edu/spgist.
beeither(1)space-driven(e.g.,Figure2),wherewedecom-
pose the spaceinto equal-sizedpartitionsregardlessof the
Therestofthispaperproceedsasfollows. InSection2,we
data distribution, or (2)data-driven(e.g., Figure 3), where
highlight related work. In Section 3, we overview space-
wesplitthedatasetintoequalportionsbasedonsomecri-
partitioning trees, the challenges they have from database
teria,e.g.,basedononeofthedimensions.
indexing point of view, and how these challenges are ad-
There are many types of trees in the class of space-
dressedinSP-GiST.Section4describestheimplementation
partitioning trees that differ from each other in various
of SP-GiST inside PostgreSQL. Section 5 presents a new
ways. Withoutloss of generality,and forthe simplicityof
nearest-neighborsearchfunctionalityforSP-GiST.InSec-
this discussion, we highlightbelow some of the important
tion 6, we present the performanceresults of a disk-based
variationsinthecontextofthetriedatastructure.
SP-GiSTtrievs. theB+-treeforstringdatasets,andadisk-
based SP-GiST kd-tree and PMR quadtree vs. the R-tree
• Path Shrinking (refer to Figure 1) - The problem is
for two-dimensional point and line segment data sets, re-
that we may want to avoid lengthy and skinny paths
spectively.Section7containsconcludingremarks.
from a root to a leaf. Paths of one child can be col-
lapsed into one node. For example, the Patricia trie
2 RelatedWork allowsforleaf-shrinking(Shrinkingsinglechildnodes
at the leaf level nodes, e.g., Figure 1(b)), while it is
also possible to allow for path-shrinking (Shrinking
Multidimensional searching is a fundamentaloperation
singlechildnodesatthenon-leaflevelnodes,e.g.,Fig-
for many database applications. Several index structures
ure1(c)),orevennoshrinkingatall(Figure1(a)).
beyondB-trees [6, 11] and hash tables [14, 31] have been
proposedfor multidimensionaldata, e.g., [17, 29, 33, 35].
• Node Shrinking (refer to Figure 2) - The problemis
These index structures include the R-tree and its variants,
thatwithspace-drivenpartitions,somepartitionsmay
e.g., [7, 20, 34], the quadtree and its variants, e.g., [15,
end up being empty. So, the question is: Do we al-
18, 26, 41], the kd-tree [8] and its disk-based variants,
low that empty partitions be omitted? For example,
e.g., [9, 32], and the trie and its variants [2, 10, 16]. Ex-
the differencebetween the standard trie (Figure 2(a))
tensionstotheB-treehavebeenproposedtoindexmultidi-
andtheforesttrie(Figure2(b))isthatthelatterallows
mensional data, e.g., [5, 13]. Extensible indexing frame-
foremptypartitionstobeeliminated.
works have been proposed to instantiate a variety of in-
dex structures in an efficient way and without modifying • Clustering - This is one of the most serious issues
the database engine. Extensible indexing frameworks are when addressing disk-based space-partitioning trees.
firstproposedin [38]. GiST (GeneralizedSearchTrees) is Theproblemis thattreenodesdonotmapdirectlyto
an extensible frameworkfor B-tree-like indexes[21]. SP- diskpages.Infact,treenodesareusuallymuchsmaller
GiST (Space Partitioning Generalized Search Trees) is an thandiskpages. So,thequestionis: Howdowepack
indexes. To handle the differencesamong the various SP-
s
s s
GiST-based indexes, SP-GiST provides a set of interface
parametersandasetofexternalmethodinterfaces(forthe
p t
p star pa star developers).
Theinterfaceparametersinclude:
a a space spade
a
• NodePredicate:Thisparameterspecifiesthepredicate
c d r space spade typeattheindexnodes.
e e star • KeyType:Thisparameterspecifiesthedatatypestored
attheleafnodes.
space spade
• NumberofSpacePartitions: This parameter specifies
(a) (b) (c)
thenumberofdisjointpartitionsproducedateachde-
Figure 1. Trie variants. (a) No tree shrink, composition.
(b)Leafshrink,(c)Pathshrink.
• Resolution:Thisparameterlimitsthenumberofspace
~ … b … t ….. z ~ b t z decompositions and is set depending on the required
granularity.
~ …l … i … ~ a … o … ~ l i ~ a o
zero zero
• PathShrink: This parameter specifies how the index
tree can shrink. PathShrink takes one of three possi-
blue bit take top blue bit take top blevalues:NeverShrik,LeafShrink,andTreeShrink.
(a) (b)
• NodeShrink: A Boolean parameter that specifies
whethertheemptypartitionsshouldbekeptinthein-
Figure 2. Trie variants. (a) No node shrink,
dextreeornot.
(b)Nodeshrink.
• BucketSize: This parameter specifies the maximum
treenodesintodiskpageswiththeobjectiveofreduc- numberofdataitemsadatanodecanhold.
ing disk I/Os for tree search and update? An optimal
node-packingalgorithmalreadyexiststhatsolvesthis For example, to instantiate the trie variants presented
issue[12]. in Figure 1(a), (b), and (c), we set PathShrink to Never-
Shrink,LeafShrink,andTreeShrink,respectively.Toinstan-
Othercharacteristicsofimportancetospace-partitioning
tiatethetrievariantspresentedinFigures2(a)and 2(b)we
trees include the bucket size of leaf nodes, the resolution
set NodeShrink to FALSE and TRUE, respectively. In the
oftheunderlyingspace,thesupportforvariousdatatypes,
caseofthequadtreeandthekd-treepresentedinFigures3,
thesplittingofnodes(whentotriggerasplitandhownode
NoOfSpacePartitionsissetto4and2,respectively.
splitting is performed), and how concurrency control of
TheSP-GiSTexternalmethodsincludethemethodPick-
space-partitioningtreesisperformed. Formorediscussion
Split()tospecifyhowthespaceisdecomposedandhowthe
ontheseissuesastheyrelatetospace-partitioningtrees,the
data items are distributed over the new partitions. Pick-