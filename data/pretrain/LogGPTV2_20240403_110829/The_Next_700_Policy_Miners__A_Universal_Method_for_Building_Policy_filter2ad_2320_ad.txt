−βEf(cid:55)→b[L (Auth, X; φ)]
f(cid:55)→b′[L (Auth, X; φ)]
−βE
Define I∗ by letting fI∗ = arg maxb ˜qf (b), for f ∈ F (φ).
return I∗.
β ← α × β .
˜qf (b) ←
(cid:17) .
7
8
9
10
Observe that the policy miner requires values for the hyper-
parameters α, β, and T as input. Adequate values can be computed
using machine-learning methods like grid search [64].
Session 1D: ForensicsCCS ’19, November 11–15, 2019, London, United Kingdom1027.1 Simplifying the computation of
expectations
One need not be knowledgeable about deterministic annealing or
mean-field approximations to implement Algorithm 1 in a stan-
dard programming language. The only part requiring knowledge in
probability theory is the computation of the expectations in line 7.
We now define the notion of diverse random variables and show
that expectations of some diverse random variables can easily be
computed recursively using some basic equalities.
Definition 10. A random variable X is diverse if (i) it can be con-
structed from constant values and random facts using only arith-
metic and Boolean operations and (ii) any random fact is used in
□
the construction at most once.
Example 4. Let (u, p) ∈ U × P and let V , W , and Y be flexi-
ble relation symbols. Then V X (u, p) + W X (u, p) is diverse, but
V X (u, p) W X (u, p) +W X (u, p) Y X (u, p) +V X (u, p) Y X (u, p) is not,
□
since each random fact there occurs more than once.
Corollary 1. Let φ ∈ L and (u, p) ∈ U ×P, then φX (u, p) is diverse
iff every atomic formula that occurs in φ occurs exactly once.
This corollary is a direct consequence of Definition 10. Observe
that, for φ ∈ L, one can check in time linear in φ’s length that
every atomic formula occurring in φ occurs exactly once.
Example 5. Recall the formula φ
defined in Section 4.5. Ob-
serve that each atomic formula occurs exactly once. Hence, for
(u, p) is diverse. □
(u, p) ∈ U × P, the random variable
The following lemma, proved in Appendix A, shows how to
recursively compute Ef(cid:55)→b[L (Auth, X; φ)] when φX (u, p) is diverse.
Lemma 2. Let f and g be facts, φ be a formula in L, (u, p) ∈
i ψi )X (u, p) are
diverse. Then the following equalities hold.
U × P, and {ψi}i ⊆ L. Assume that φX (u, p) and ((cid:86)
(cid:102)
(cid:103)
b∈Range(g) ˜qg (b) b
(cid:42)(cid:44)(cid:94)
(cid:103)
(cid:103)
Ef(cid:55)→b[g] =
 =
b
(cid:80)
(cid:89)
= 1 − Ef(cid:55)→b
(cid:88)
Ef(cid:55)→b
(¬φ)X (u, p)
(u, p)
if f = g and
otherwise.
Ef(cid:55)→b
Ef(cid:55)→b[L (Auth, X; φ)] =
(cid:12)(cid:12)(cid:12)Auth(u, p) − Ef(cid:55)→b
(cid:102)
φX (u, p)
(cid:103)(cid:12)(cid:12)(cid:12) .
ψ X
i (u, p)
(cid:43)(cid:45)X
φX (u, p)
Ef(cid:55)→b
RBAC
N
RBAC
N
(cid:17)X
(cid:102)
(cid:102)
(cid:16)
ψi
φ
.
.
i
i
(u,p)∈U ×P
Recall that ∧ and ¬ form a complete set of Boolean operators.
So one can also use this lemma to compute expectations of diverse
random variables of the form (φ → ψ )X (u, p) and (φ ∨ ψ )X (u, p).
8 RBAC MINING WITH UNICORN
We explain next how to use Unicorn to build an RBAC miner.
8.1 RBAC policies
∈ L is a template
We already explained how the formula φ
formula for the language of all RBAC policies with at most N
roles. To implement Algorithm 1, we only need a procedure to
RBAC
N
. Since, as noted in Example 5,
(u, p) is diverse, we can apply Lemma 2 to show that
L
L
φ
=
(cid:17)(cid:103)
RBAC
N
RBAC
N
RBAC
N
(cid:17)X
Ef(cid:55)→b
(cid:17)(cid:103)
(cid:102)
(cid:16)Auth, X; φ
(cid:16)
compute Ef(cid:55)→b
(cid:102)
(cid:16)Auth, X; φ
(cid:12)(cid:12)(cid:12)(cid:12)Auth(u, p) − Ef(cid:55)→b
(cid:88)
(cid:21)
(cid:20)(cid:16)
(cid:17)X
(cid:16)
(u, p)
1 − Ef(cid:55)→b
b
(cid:103)
(cid:80)
Ef(cid:55)→b
(cid:102)
UAX (u, ri )
UAX (u, ri )
(u,p)∈U ×P
(cid:89)
RBAC
N
where,
1 −
i ≤N
(cid:102)
=
=
φ
(cid:102)
Ef(cid:55)→b
(cid:103)
(cid:20)(cid:16)
(cid:103)
b ˜qUAX (u,ri ) (b) b
is computed analogously.
RBAC
N
φ
(u, p)
(cid:17)X
(cid:102)
(cid:21)(cid:12)(cid:12)(cid:12)(cid:12) .
(cid:103)(cid:17)
Ef(cid:55)→b
PAX (ri , p)
,
if UAX (u, ri ) = f
otherwise.
PAX (ri , p)
Ef(cid:55)→b
Observe how the computations of expectations is reduced to
a simple rewriting procedure by applying Lemma 2. We can now
implement an RBAC miner by implementing Algorithm 1 in a
standard programming language and using the results above to
compute the needed expectations.
8.2 Simple RBAC policies
The objective function used above has a limitation. When the num-
(u, p) is very large, we might
ber of role constants N used by φ
obtain a policy ˜I that assigns each role to exactly one user. The role
assigned to a user would be assigned all permissions that the user
needs. As a result, L(Auth, ˜I; φ
) = 0, but ˜I is not a desirable
policy. We can avoid mining such policies by introducing in the ob-
jective function a regularization term that measures the complexity
of the mined policy I. A candidate regularization term is:
RBAC
N
RBAC
N
(cid:88)
(cid:88)
i ≤N
u∈U
(cid:42)(cid:46)(cid:44)
∥I∥ =
UAI (u, ri ) +
PAI (ri , p)
(cid:88)
p∈P
(cid:43)(cid:47)(cid:45) .
Observe that ∥I∥ measures the sizes of the relations UAI and PAI,
for i ≤ N , thereby providing a measure of I’s complexity. We now
define the following loss function:
RBAC (Auth, I) = λ ∥I∥ + L(Auth, I; φ).
Lr
(cid:103)
(cid:102)
The computation of Ef(cid:55)→b
Here λ > 0 is a trade-off hyper-parameter, which again must be
fixed before executing the policy miner and can be estimated using
grid search. Note that Lr
RBAC penalizes not only policies that sub-
stantially disagree with Auth, but also policies that are too complex.
now also requires
computing Ef(cid:55)→b[∥X∥], where ∥X∥ is the random variable obtained
by replacing each occurrence of I in ∥I∥ with X. Fortunately, one
can see that ∥X∥ is diverse. Hence, we can use the linearity of
expectation and Lemma 2 to compute all needed expectations.
9 MINING SPATIO-TEMPORAL RBAC
RBAC (Auth, X)
Lr
POLICIES
We now use Unicorn to build the first policy miner for RBAC
extensions with spatio-temporal constraints [1, 4, 5, 8, 19, 41]. In
policies in these extensions, users are assigned permissions not only
Session 1D: ForensicsCCS ’19, November 11–15, 2019, London, United Kingdom103according to their roles, but also based on constraints depending
on the current time and the user’s and the permission’s locations.
The syntax for specifying these constraints allows for policies like
“a user is assigned the role Engineer from Monday through Friday
and from 8:00 AM until 5:00 PM” or “the role Engineer is granted
permission to access any object within a radius of three miles from
the main building.”
(t, u, p) ∈ L for a policy lan-
guage that we call spatio-temporal RBAC. This is an extension of
RBAC with a syntax for spatial constraints based on [4, 5] and a
syntax for temporal constraints based on temporal RBAC [6].
We present a template formula φ
st
(cid:16)
ψUA(t, u, ri ) ∧ ψPA (t, ri , p)
(cid:17)
.
(cid:95)
i ≤N
st
φ
(t, u, p) =
Here, we assume the existence of a sort TIME and that t is a vari-
able of this sort representing the time when u exercises p. We
also assume the existence of a sort SPACE that we use to specify
spatial constraints. The formulas ψUA(t, u, ri ) and ψPA(t, ri , p) de-
scribe when a user is assigned the role ri and when a permission
is assigned to the role ri, respectively. We use the rigid constants
r1, . . . , rN to denote roles.
The grammar Γst below defines the syntax of ψUA and ψPA.
⟨cstr_list⟩ ::= ⟨cstr⟩ ( ∧⟨cstr⟩ )∗
⟨cstr⟩ ::= ⟨sp_cstr⟩ ( ∨ ⟨sp_cstr⟩ )∗ |
(cid:17)
⟨tmp_cstr⟩ ( ∨ ⟨tmp_cstr⟩ )∗
⟨sp_cstr⟩ ::= (¬?) isWithin(cid:16)Loc (o) , d, b
⟨tmp_cstr⟩ ::= ψcal (t)
(cid:17)
An expression in this grammar is a conjunction of constraints,
each of which is either a disjunction of temporal constraints or a
disjunction of spatial constraints.
9.1 Modeling spatial constraints
A spatial constraint is a (possibly negated) formula of the form
, where o is a variable of sort USERS or
PERMS, Loc (o) denotes o’s location, d is a flexible constant sym-
bol of a sort whose carrier set is N≤M = {0, 1, . . . , M} (where
M is a value fixed in advance), and b is a flexible constant sym-
bol of a sort describing the organization’s physical facilities. For
holds when the user
isWithin(cid:16)Loc (o) , d, b
example, isWithin(cid:16)Loc (u) , 4, MainBuilding
(cid:17)
Intuitively, the formula isWithin(cid:16)Loc (o) , d, b
represented by u is within 4 space units of the main building.
evaluates whether
the entity represented by o is located within d spatial units from b.
Observe that a policy miner does not need to compute interpreta-
tions for rigid function symbols like Loc or rigid relation symbols
like isWithin, since they already have a fixed interpretation.
9.2 Modeling temporal constraints
A temporal constraint is a formula ψcal (t) that represents a periodic
expression [6], which describes a set of time intervals. We give here
a simplified overview and refer to the literature for details [6].
Definition 11. A periodic expression is a tuple (yearSet, monthSet,
daySet, hourSet, hourDuration) ∈
× N. A time instant is a
2N(cid:17)4
(cid:17)
(cid:16)
tuple (y, m, d, h) ∈ N4. The time instant satisfies the periodic ex-
pression if y ∈ yearSet, m ∈ monthSet, d ∈ daySet, and there is an
h′ ∈ hourSet such that h′ ≤ h ≤ h′ + hourDuration.
□
Previous works on analyzing temporal RBAC with SMT solvers [40]
show that temporal constraints can be expressed as formulas in L.
Furthermore, one can verify that any expression in Γst and, there-
fore, φ
st is in L.
(cid:16)Auth, I; φ
st(cid:17)
As an objective function, we use λ ∥I∥ + L
. Here,
∥I∥ counts the number of spatial constraints plus the sum of the
weighted structural complexities of all temporal constraints [66]. For
computing expectations, one can show that ∥X∥ is diverse and that
st occurs exactly once. Hence, one can
every atomic formula in φ
compute all necessary expectations using the linearity of expecta-
tion and Lemma 2.
10 EXPERIMENTS
In this section, we experimentally validate two hypotheses. First,
using Unicorn, we can build policy miners for a wide variety of
policy languages. Second, the policies mined by these miners have
as low complexity and high generalization ability as those mined
by the state of the art.
10.1 Datasets
Our experiments are divided into the following categories.
Mine RBAC policies from access control matrices. We use three ac-
cess control matrices from three real organizations, named “health-
care”, “firewall”, and “americas” [25]. For healthcare, there are 46
users and 46 permissions, for firewall, there are 720 users and 587
permissions, and for americas, there are more than 10,000 users and
around 3,500 permissions. We refer to these access control matrices
as RBAC1, RBAC2, and RBAC3.
Mine ABAC policies from logs. We use four logs of access requests
provided by Amazon for a Kaggle competition in 2013 [43], where
participants had to develop mining algorithms that predicted from
the logs which permissions must be assigned to which users. We
refer to these logs as ABAC1, ABAC2, ABAC3, and ABAC4.
Mine business-meaningful RBAC policies from access control ma-
trices. We use the access control matrix provided by Amazon for
the IEEE MLSP 2012 competition [38], available at the UCI ma-
chine learning repository [50]. It assigns three types of permissions,
named “HOST”, “PERM_GROUP”, and “SYSTEM_GROUP” to 30,000
users. The number of permissions for each type are approximately
1,700, 6,000, and 20,000, respectively. For each type of permission,
we sampled 5,000 users from all 30,000 users and used all permis-
sions of that type to build an access control matrix. We explain in
detail how we create these matrices in Appendix D.1. We refer to
these matrices as BM-RBAC1, BM-RBAC2, and BM-RBAC3.
Mine XACML policies from access control matrices. We use Con-
tinue [27, 47], the most complex set of XACML policies in the
literature. We use seven of the largest policies in the set. For each
of them, we compute the set of all possible requests and decide
which of them are authorized by the policy. We then mine a policy
from this set of decided requests. For the simplest policy, there are
around 60 requests and for the most complex policy, there are more
Session 1D: ForensicsCCS ’19, November 11–15, 2019, London, United Kingdom104than 30,000 requests. We call these seven sets of requests XACML1,
XACML2, ..., XACML7.
Mine spatio-temporal RBAC policies from logs. There are no pub-
licly available datasets for mining spatio-temporal RBAC policies.
Based on policies provided as examples in recent works [4, 5], we
created a synthetic policy and a synthetic log by creating 1,000
access requests uniformly at random and evaluating them against
the policy. We refer to this log as STARBAC. The synthetic policy
is described in Appendix D.2.
10.2 Methodology
For RBAC and ABAC, we mine two policies in the corresponding
policy language’s syntax. The first one using a miner built using