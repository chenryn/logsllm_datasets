### Common Problems Unique to Server-Side Code

The following issues are commonly encountered in the server-hosted portion of any web application and, due to their specific programming language or software component dependencies, are unlikely to occur on the client side.

#### Buffer Overflow
A buffer overflow occurs when a program allows more data to be stored in a particular memory region than it can accommodate, leading to the overwrite of adjacent vital data structures. This vulnerability is primarily found in low-level programming languages such as C and C++, where it can often be exploited to execute attacker-supplied code.

#### Command Injection (SQL, Shell, PHP, etc.)
Command injection vulnerabilities arise when insufficient input filtering or output escaping allows attacker-controlled strings to be processed as statements in an interpreted language used by the application. The consequences depend on the capabilities of the language, but code execution is a common outcome. This is somewhat similar to Cross-Site Scripting (XSS) in its nature.

#### Directory Traversal
Directory traversal vulnerabilities occur when insufficient input filtering, particularly the failure to properly handle “../” segments in filenames, allows an application to read or write files at arbitrary locations on the disk. The severity of the consequences depends on additional constraints, but unconstrained file-writing bugs are often easily exploitable for running attacker-supplied code.

#### File Inclusion
- **Local File Inclusion (LFI)**: This is largely synonymous with read-related directory traversal, where an attacker can include and read local files.
- **Remote File Inclusion (RFI)**: This involves exploiting file inclusion vulnerabilities by specifying a URL instead of a valid file path. Some scripting languages use a single API for both local file access and remote URL fetching, which can be leveraged to retrieve and execute files from an attacker-controlled server.

#### Format-String Vulnerability
Format-string vulnerabilities occur in functions that accept templates ("format strings") followed by parameters to insert into the template. Commonly found in C (e.g., `printf(...)`, `syslog(...)`), these vulnerabilities allow attackers to supply the template, potentially leading to data leaks or code execution, depending on the template system and language specifics.

#### Integer Overflow
Integer overflow vulnerabilities are specific to languages with limited or no range checking. They occur when a developer fails to detect that an integer has exceeded its maximum value, causing it to roll over to zero, a large negative number, or another unexpected result. This can lead to inconsistent program states or, more critically, to reading or writing data at incorrect memory locations, which may facilitate code execution. Integer underflow is the opposite, where the value rolls over to a very large positive number after crossing the minimum permissible value.

#### Pointer Management Vulnerabilities
In languages that use raw memory pointers (such as C and C++), using uninitialized or invalid (dangling) pointers can lead to vulnerabilities like use-after-free and double free. These issues corrupt the internal state of the program and typically allow an attacker to execute arbitrary code.

### Epilogue

As we conclude "The Tangled Web," I hope you have found this exploration of browser security as enlightening as I have. My aim is that the insights shared here will guide you in your future endeavors, wherever they may lead.

Reflecting on the robustness of the modern web and the fragility of its foundations, I am struck by the contrast. In real life, modern societies operate on a delicate balance, relying on the integrity and restraint of countless strangers. Our world is, in essence, an elaborate honor system that most of us voluntarily participate in. This trust, while sometimes misplaced, is essential for the advancement of our civilization.

Yet, in the online world, we often demand a level of security and perfection that seems unattainable. We criticize developers for cryptographic mistakes but overlook simple physical security flaws. Perhaps this stems from the fact that human communities have had millennia to develop social norms in the physical realm, while the online ecosystem is still in its infancy and lacks a well-established code of conduct.

What if our pursuit of absolute security in the digital world is misguided? As the complexity of our online interactions grows, the likelihood of creating perfectly secure software diminishes. Extreme paranoia may hinder our progress. Perhaps, as with early civilizations, our insistence on absolute security could lead to collapse. However, from the rubble, new, more enlightened societies will emerge, and their nature remains to be seen.

### Notes

**Chapter 1**
1. D.E. Bell and L.J. La Padula, *Secure Computer System: Unified Exposition and Multics Interpretation* (ESD-TR-75-306), MITRE Corporation for US Air Force (1976).
2. C.E. Landwehr, C.L. Heitmeyer, and J.D. McLean, "A Security Model for Military Message Systems: Retrospective," 17th Annual Computer Security Applications Conference, New Orleans, LA (2001).
3. V. Bush, "As We May Think," Atlantic Monthly (July 1945).
4. R. Dhamija, J.D. Tygar, and M. Hearst, "Why Phishing Works," CHI 2006, Montreal, Canada.
5. C. Jackson, D.R. Simon, D.S. Tan, and A. Barth, "An Evaluation of Extended Validation and Picture-in-Picture Phishing Attacks," Usable Security, Lowlands, Trinidad and Tobago (2007).
6. C. Jackson and A. Barth, "Beware of Finer-Grained Origins" and "Beware of Coarser-Grained Origins," Web 2.0 Security and Privacy, Oakland, CA (2008).
7. "Security Exploit Uses Internet Explorer to Attack Mozilla Firefox," MozillaZine (July 11, 2007).

**Page 19**
1. Net Applications website, accessed June 13, 2011.

**Chapter 2**
1. T. Berners-Lee, R. Fielding, and L. Masinter, "Uniform Resource Identifier (URI): Generic Syntax," IETF RFC 3986 (2005).
2. T. Berners-Lee, L. Masinter, and M. McCahill, "Uniform Resource Locators (URL)," IETF RFC 1738 (1994).
3. R. Fielding, J. Gettys, J. Mogul, H. Frystyk, L. Masinter, P. Leach, and T. Berners-Lee, "Hypertext Transfer Protocol—HTTP/1.1," IETF RFC 2616 (1999).
4. "Uniform Resource Identifiers (URI) Schemes per RFC4395," IANA (June 6, 2011).
5. P. Mockapetris, "Domain Names—Implementation and Specification," IETF RFC 1035 (1987).
6. T. Berners-Lee, "Universal Resource Identifiers in WWW," IETF RFC 1630 (1994).
7. P. Hoffman, L. Masinter, and J. Zawinski, "The mailto URL Scheme," IETF RFC 2368 (1998).
8. "HTML 4.01 Specification: Forms," W3C (1999).
9. P. Faltstrom, P. Hoffman, and A. Costello, "Internationalizing Domain Names in Applications (IDNA)," IETF RFC 3490 (2003).
10. A. Costello, "Punycode: A Bootstring Encoding of Unicode for Internationalized Domain Names in Applications (IDNA)," IETF RFC 3492 (2003).
11. E. Gabrilovich and A. Gontmakher, "The Homograph Attack," Communications of the ACM (2002).
12. E. Rescorla, "HTTP Over TLS," IETF RFC 2818 (2000).
13. J. Postel and J. Reynolds, "File Transfer Protocol (FTP)," IETF RFC 959 (1985).
14. F. Anklesaria, M. McCahill, P. Lindner, D. Johnson, D. Torrey, and B. Alberti, "The Internet Gopher Protocol," IETF RFC 1436 (1993).
15. E. Rescorla and A. Schiffman, "The Secure HyperText Transfer Protocol," IETF RFC 2660 (1999).
16. L. Masinter, "The 'data' URL Scheme," IETF RFC 2397 (1998).
17. "What Are rss: and feed: Links?" Brindys (n.d.).
18. M. Zalewski, "A Note on an MHTML Vulnerability," Lcamtuf’s blog (March 11, 2011).

**Chapter 3**
1. T. Berners-Lee, "The Original HTTP as defined in 1991," W3C archives (1991).
2. T. Berners-Lee, R. Fielding, and H. Frystyk, "Hypertext Transfer Protocol—HTTP/1.0," IETF RFC 1945 (1996).
3. R. Fielding, J. Gettys, J. Mogul, H. Frystyk, L. Masinter, P. Leach, and T. Berners-Lee, "Hypertext Transfer Protocol—HTTP/1.1," IETF RFC 2616 (1999).
4. HTTPbis Working Group, "Httpbis Status Pages."
5. A. Luotonen, "Tunneling TCP-Based Protocols Through Web Proxy Servers," IETF draft (1998).
6. S. Chen, Z. Mao, Y.M. Wang, and M. Zhang, "Pretty-Bad-Proxy: An Overlooked Adversary in Browsers’ HTTPS Deployments," Microsoft Research (2009).
7. "Mozilla Cross-Reference mozilla1.8.0," Mozilla code repository.
8. K. Moore, "MIME (Multipurpose Internet Mail Extensions) Part Three: Message Header Extensions for Non-ASCII Text," IETF RFC 2047 (1996).
9. N. Freed and K. Moore, "MIME Parameter Value and Encoded Word Extensions: Character Sets, Languages, and Continuations," IETF RFC 2231 (1997).
10. Mozilla Bug Tracking System, Mozilla bug #418394.
11. T. Berners-Lee, "Basic HTTP as defined in 1992: Methods," W3C archives (1992).
12. L. Dusseault, "HTTP Extensions for Web Distributed Authoring and Versioning (WebDAV)," IETF RFC 4918 (2007).
13. See note 12 above.
14. M. Pool, "Meantime: Non-Consensual HTTP User Tracking Using Caches" (2000).
15. L. Montulli, "Persistent Client State HTTP Cookies" (1994).
16. D. Kristol and L. Montulli, "HTTP State Management Mechanism," IETF RFC 2109 (1997).
17. D. Kristol and L. Montulli, "HTTP State Management Mechanism," IETF RFC 2965 (2000).
18. A. Barth, "HTTP State Management Mechanism," IETF RFC 6265 (2011).
19. J. Franks, P. Hallam-Baker, J. Hostetler, S. Lawrence, P. Leach, A. Luotonen, and L. Stewart, "HTTP Authentication: Basic and Digest Access Authentication," IETF RFC 2617 (1999).
20. R. Tschalär, "NTLM Authentication Scheme for HTTP" (2003).
21. E. Rescorla, "HTTP Over TLS," IETF RFC 2818 (2000).
22. P. Hallam-Baker, "The Recent RA Compromise," Comodo IT Security (blog) (March 23, 2011).
23. S. Chen, R. Wang, X.F. Wang, and K. Zhang, "Side-Channel Leaks in Web Applications: A Reality Today, a Challenge Tomorrow," Microsoft Research (2010).
24. C. Evans, "Open Redirectors: Some Sanity," Security: Hacking Everything (blog) (June 25, 2010).

**Chapter 4**
1. T. Berners-Lee, "HTML Tags," W3C archives (1991).
2. T. Berners-Lee and D. Connolly, "Hypertext Markup Language—2.0," IETF RFC 1866 (1995).
3. D. Raggett, "HTML 3.2 Reference Specification," W3C (1997).
4. D. Raggett, A. Le Hors, and I. Jacobs, "HTML 4.01 Specification," W3C (1999).
5. I. Hickson, "HTML5," W3C draft, revision 1.5019 (2011).
6. G. Coldwind, "Too general charset = detection in meta," Mozilla bug 640529 (2011).

**Chapter 5**
1. H. Wium Lie and B. Bos, "Cascading Style Sheets, Level 1," W3C (1996).
2. T. Çelik, E.J. Etemad, D. Glazman, I. Hickson, P. Linss, and J. Williams,