random number generators (especially for session management purposes); insufficient
authentication and authorization checks (in particular, overly trusting the browser-
originating data); incorrect uses of cryptography (inventing one’s own algorithms is
usually a no-no); and so on. For a remarkably detailed discussion of these and many
other failure patterns, see The Art of Software Security Assessment by Dowd,
McDonald, and Schuh (Addison-Wesley, 2006).
Common Problems Unique to Server-Side Code
The following issues are commonly encountered in the server-hosted portion
of any web application and, by virtue of being tied to specific programming
languages or software components, are unlikely to occur on the client side.
Buffer overflow
A condition where a program allows more information to be stored in
aparticular memory region than there is space to accommodate the
incoming data, leading to the unexpected overwrite of other vital data
structures. Buffer overflows happen chiefly in low-level programming
languages, such as C or C++, and in these languages, they can be fre-
quently leveraged to execute attacker-supplied code.
Command injection (SQL, shell, PHP, and so on)
A problem where, due to insufficient input filtering or output escaping,
attacker-controlled strings may be unintentionally processed as state-
ments in an interpreted language used by the application. (In a distant
sense, this is similar to XSS.) The consequences depend on the capabili-
ties of the language, but in most cases, code execution is the eventual
outcome.
Directory traversal
A problem where, due to insufficient input filtering (most commonly,
the failure to properly recognize and handle “../” segments in filenames),
an application can be tricked into reading or writing files at arbitrary loca-
tions on the disk. Any consequences depend on additional constraints,
but unconstrained file-writing bugs are usually easily exploitable to run
attacker-supplied code.
File inclusion
If used without a qualifier or prefixed with local (LFI), the term is largely
synonymous with read-related directory traversal. Remote file inclusion
(RFI), on the other hand, is an alternative way to exploit file-inclusion
vulnerabilities by specifying a URL rather than a valid file path. In some
scripting languages, a single, common API opens local files and fetches
remote URLs. In these cases, the ability to retrieve the file from an
attacker-controlled server may offer substantial benefits, depending
onhow the data is subsequently processed.
Common Web Vulnerabilities 265
Format-string vulnerability
A handful of commonly used library functions accept templates (“format
strings”), followed by a set of parameters that the function is expected
toinsert into the template at predefined locations. Such an approach is
particularly common in C (printf(...), syslog(...), and so on), but it is not
limited to that language. Format-string vulnerabilities are caused by
unintentionally permitting attackers to supply the template to one of
these functions. Depending on the capabilities of the template system
and the specifics of the language, this error may lead to anything from
minor data leaks to code execution.
Integer overflow
A vulnerability specific to languages with limited or no range checking. The
flaw is caused by the developer failing to detect that an integer exceeded
the maximum possible value and rolled back to zero, to a very large neg-
ative integer, or to some other hardware-specific and unexpected result.
Depending on how the value is used, this may put the program in an
inconsistent state or, worse, lead to the reading or writing of data at an
incorrect memory location (which, in turn, may lend itself to code exe-
cution). Integer underflow is the opposite effect: crossing the minimum
permissible value and rolling over to a very large positive integer.
Pointer management vulnerabilities
In languages that encourage or require the use of raw memory pointers
(chiefly C and C++), it is possible to use pointers that are either uninitial-
ized or no longer valid (“dangling”), leading to vulnerabilities such as use
after free, double free, and many more. These vulnerabilities will corrupt the
internal state of the program and usually allow an attacker to execute
attacker-supplied code.
266 Chapter 18
E P I L O G U E
Well, who would have thought. This concludes The
Tangled Web! I hope you’ve enjoyed reading this book
as much as I’ve enjoyed exploring the world of browser
security over the last decade or so. I also hope that what
you’ve discovered on these pages will guide you in your
future journeys, wherever they may be.
As for what to make of it all: To me, the stark contrast between the amaz-
ing robustness of the modern Web and the inexplicable unsoundness of its
foundations was difficult to reconcile at first. In retrospect, I think it offers
animportant insight into our own, unreasonable attitude about securing the
online world.
I am haunted by the uncomfortable observation that in real life,
modernsocieties are built on remarkably shaky ground. Every day, each of
usdepends on the sanity, moral standards, and restraint of thousands of ran-
dom strangers—from cab drivers, to food vendors, to elevator repair techs.
The rules of the game are weakly enforced through a series of deterrence
mechanisms, but if crime statistics are to be believed, their efficacy is remark-
ably low. The problem isn’t just that most petty criminals think they can get
away with their misdeeds but that they are usually right.
In this sense, our world is little more than an incredibly elaborate honor
system that most of us voluntarily agree to participate in. And that’s probably
okay: Compliance with self-imposed norms has proven to be a smart evolu-
tionary move, and it is a part of who we are today. A degree of trust is simply
essential to advancing our civilization at a reasonable pace. Too, paradoxi-
cally, despite short-term weaknesses, accelerated progress makes usall a lot
stronger and more adaptable in the long run.
It is difficult to understand, then, why we treat our online existence in
such a dramatically different way. For example, why is it that we get upset at
developers who use cryptography incorrectly, but we don’t mind that the
locks on our doors can be opened with a safety pin? Why do we scorn web
developers who can’t get input validation right, but we don’t test our break-
fast for laxatives or LSD?
The only explanation I can see is that humankind has had thousands of
years to work out the rules of social engagement in the physical realm. Dur-
ing that time, entire societies have collapsed, new ones have emerged, and
an increasingly complex system of behavioral norms, optimized for the pres-
ervation of communities, has emerged in the process. Unfortunately for us,
we have difficulty transposing these rules into the online ecosystem, and this
world is so young, it hasn’t had the chance to develop its own, separate code
of conduct yet.
The phenomenon is easy to see: While your neighbor will not try to sneak
into your house, he may have no qualms about using your wireless network
because doing so feels much less like a crime. He may oppose theft, but he
may be ambivalent about unlawfully duplicating digital content. Or he may
frown upon crude graffiti in the neighborhood but chuckle at the sight of a
defaced website. The parallels are there but just aren’t good enough.
What if our pursuit of perfection in the world of information security
stems from nothing but a fundamental misunderstanding of how human com-
munities can emerge and flourish? The experts of my kind preach a model of
networked existence based on complete distrust, but perhaps wrongly so: As
the complexity of our online interactions approaches that of real life, the odds
of designing perfectly secure software are rapidly diminishing. Meanwhile, the
extreme paranoia begins to take a heavy toll on how quickly we can progress.
Perhaps we are peddling a recipe for a failure. What if our insistence on
absolute security only takes us closer to the fate of so many other early civili-
zations, which collapsed under the weight of their flaws and ultimately van-
ished? I find this perverse thought difficult to dismiss. Fortunately, we know
that from the rubble, new, more enlightened societies will certainly emerge
one day. Their ultimate nature is anyone’s guess.
268 Epilogue
N O T E S
Chapter 1
1. D.E. Bell and L.J. La Padula, Secure Computer System: Unified Exposition
andMultics Interpretation (ESD-TR-75-306), Bedford, MA: MITRE Corpo-
ration for US Air Force (1976), http://csrc.nist.gov/publications/history/
bell76.pdf.
2. C.E. Landwehr, C.L. Heitmeyer, and J.D. McLean, “A Security Model for
Military Message Systems: Retrospective,” paper presented at the 17th
Annual Computer Security Applications Conference, New Orleans, LA
(2001), http://www.acsa-admin.org/2001/papers/141.pdf.
3. V. Bush, “As We May Think,” Atlantic Monthly (July 1945), http://
www.theatlantic.com/doc/194507/bush/.
4. R. Dhamija, J.D. Tygar, and M. Hearst, “Why Phishing Works,” paper
presented at the Conference on Human Factors in Computing Systems,
Montreal, Canada (2006), http://people.seas.harvard.edu/~rachna/papers/
why_phishing_works.pdf.
5. C. Jackson, D.R. Simon, D.S. Tan, and A. Barth, “An Evaluation of
Extended Validation and Picture-in-Picture Phishing Attacks,” paper
presented at Usable Security, Lowlands, Trinidad and Tobago (2007),
http://usablesecurity.org/papers/jackson.pdf.
6. C. Jackson and A. Barth, “Beware of Finer-Grained Origins,” paper pre-
sented at Web 2.0 Security and Privacy, Oakland, CA (2008), http://seclab
.stanford.edu/websec/origins/fgo.pdf; C. Jackson, and A. Barth, “Beware of
Coarser-Grained Origins,” paper presented at Web 2.0 Security and Pri-
vacy, Oakland, CA (2008), http://seclab.stanford.edu/websec/origins/scheme/.
7. “Security Exploit Uses Internet Explorer to Attack Mozilla Firefox,”
MozillaZine (July 11, 2007), http://www.mozillazine.org/talkback
.html?article=22198.
Page 19
1. Net Applications website, http://marketshare.hitslink.com/browser-market-share
.aspx?qprid=0, http://marketshare.hitslink.com/browser-market-share.aspx?qprid=2
(accessed June 13, 2011).
Chapter 2
1. T. Berners-Lee, R. Fielding, and L. Masinter, “Uniform Resource Identi-
fier (URI): Generic Syntax,” IETF Request for Comments 3986 (2005),
http://www.ietf.org/rfc/rfc3986.txt.
2. T. Berners-Lee, L. Masinter, and M. McCahill, “Uniform Resource Loca-
tors (URL),” IETF Request for Comments 1738 (1994), http://www.ietf
.org/rfc/rfc1738.txt.
3. R. Fielding, J. Gettys, J. Mogul, H. Frystyk, L. Masinter, P. Leach, and T.
Berners-Lee, “Hypertext Transfer Protocol—HTTP/1.1,” IETF Request
for Comments 2616 (1999), http://www.ietf.org/rfc/rfc2616.txt.
4. “Uniform Resource Identifer (URI) Schemes per RFC4395,” Internet
Assigned Numbers Authority (June 6, 2011), http://www.iana.org/
assignments/uri-schemes.html.
5. P. Mockapetris, “Domain Names—Implementation and Specification,”
IETF Request for Comments 1035 (1987), http://www.ietf.org/rfc/
rfc1035.txt.
6. T. Berners-Lee, “Universal Resource Identifiers in WWW,” IETF Request
for Comments 1630 (1994), http://www.w3.org/Addressing/rfc1630.txt.
7. P. Hoffman, L. Masinter, and J. Zawinski, “The mailto URL Scheme,”
IETF Request for Comments 2368 (1998), http://www.ietf.org/rfc/
rfc2368.txt.
8. “HTML 4.01 Specification: Forms,” World Wide Web Consortium (1999),
http://www.w3.org/TR/html401/interact/forms.html#h-17.13.4.1.
9. P. Faltstrom, P. Hoffman, and A. Costello, “Internationalizing Domain
Names in Applications (IDNA),” IETF Request for Comments 3490
(2003), http://www.ietf.org/rfc/rfc3490.txt.
10. A. Costello, “Punycode: A Bootstring Encoding of Unicode for Interna-
tionalized Domain Names in Applications (IDNA),” IETF Request for
Comments 3492 (2003), http://www.ietf.org/rfc/rfc3492.txt.
11. E. Gabrilovich and A. Gontmakher, “The Homograph Attack,” Commu-
nications of the ACM (2002), http://www.cs.technion.ac.il/~gabr/papers/
homograph_full.pdf.
270 Notes for Pages 17–35
12. E. Rescorla, “HTTP Over TLS,” IETF Request for Comments 2818 (2000),
http://www.ietf.org/rfc/rfc2818.txt.
13. J. Postel and J. Reynolds, “File Transfer Protocol (FTP),” IETF Request
for Comments 959 (1985), http://www.ietf.org/rfc/rfc959.txt.
14. F. Anklesaria, M. McCahill, P. Lindner, D. Johnson, D. Torrey, and B.
Alberti, “The Internet Gopher Protocol,” IETF Request for Comments
1436 (1993), http://www.ietf.org/rfc/rfc1436.txt.
15. E. Rescorla and A. Schiffman, “The Secure HyperText Transfer Proto-
col,” IETF Request for Comments 2660 (1999), http://www.ietf.org/rfc/
rfc2660.txt.
16. L. Masinter, “The ‘data’ URL Scheme,” IETF Request for Comments
2397 (1998), http://www.ietf.org/rfc/rfc2397.txt.
17. “What Are rss: and feed: Links?” http://www.brindys.com/winrss/
feedformat.html.
18. M. Zalewski, “A Note on an MHTML Vulnerability,” Lcamtuf’s blog
(March11, 2011), http://lcamtuf.blogspot.com/2011/03/note-on-mhtml-
vulnerability.html.
Chapter 3
1. T. Berners-Lee, “The Original HTTP as defined in 1991.” World Wide
Web Consortium archives (1991), http://www.w3.org/Protocols/HTTP/
AsImplemented.html.
2. T. Berners-Lee, R. Fielding, and H. Frystyk, “Hypertext Transfer
Protocol—HTTP/1.0,” IETF Request for Comments 1945 (1996),
http://www.ietf.org/rfc/rfc1945.txt.
3. R. Fielding, J. Gettys, J. Mogul, H. Frystyk, L. Masinter, P. Leach, and
T.Berners-Lee, “Hypertext Transfer Protocol—HTTP/1.1,” IETF Request
for Comments 2616 (1999), http://www.ietf.org/rfc/rfc2616.txt.
4. HTTPbis Working Group, “Httpbis Status Pages,” http://tools.ietf.org/wg/
httpbis/.
5. A. Luotonen, “Tunneling TCP-Based Protocols Through Web Proxy
Servers,” IETF draft (1998), http://tools.ietf.org/id/draft-luotonen-web-proxy-
tunneling-01.txt.
6. S. Chen, Z. Mao, Y.M. Wang, and M. Zhang, “Pretty-Bad-Proxy: An
Overlooked Adversary in Browsers’ HTTPS Deployments,” Microsoft
Research (2009), http://research.microsoft.com/pubs/79323/pbp-final-with-
update.pdf.
7. “Mozilla Cross-Reference mozilla1.8.0,” Mozilla code repository, http://
mxr.mozilla.org/mozilla1.8.0/source/nsprpub/pr/src/misc/prtime.c#1045.
8. K. Moore, “MIME (Multipurpose Internet Mail Extensions) Part Three:
Message Header Extensions for Non-ASCII Text,” IETF Request For
Comments 2047 (1996), http://www.ietf.org/rfc/rfc2047.txt.
Notes for Pages 36–50 271
9. N. Freed and K. Moore, “MIME Parameter Value and Encoded Word
Extensions: Character Sets, Languages, and Continuations,” IETF
Request for Comments 2231 (1997), http://www.ietf.org/rfc/rfc2231.txt.
10. Mozilla Bug Tracking System, Mozilla bug #418394, https://bugzilla
.mozilla.org/show_bug.cgi?id=418394.
11. T. Berners-Lee, “Basic HTTP as defined in 1992: Methods,” World Wide
Web Consortium archives (1992), http://www.w3.org/Protocols/HTTP/
Methods.html.
12. L. Dusseault, “HTTP Extensions for Web Distributed Authoring and
Versioning (WebDAV),” IETF Request for Comments 4918 (2007),
http://www.ietf.org/rfc/rfc4918.txt.
13. See note 12 above.
14. M. Pool, “Meantime: Non-Consensual HTTP User Tracking Using
Caches” (2000), http://sourcefrog.net/projects/meantime/.
15. L. Montulli, “Persistent Client State HTTP Cookies” (1994), http://curl
.haxx.se/rfc/cookie_spec.html.
16. D. Kristol and L. Montulli, “HTTP State Management Mechanism,” IETF
Request for Comments 2109 (1997), http://www.ietf.org/rfc/rfc2109.txt.
17. D. Kristol and L. Montulli, “HTTP State Management Mechanism,” IETF
Request for Comments 2965 (2000), http://tools.ietf.org/rfc/rfc2965.txt.
18. A. Barth, “HTTP State Management Mechanism,” IETF Request for
Comments 6265 (2011), http://www.ietf.org/rfc/rfc6265.txt.
19. J. Franks, P. Hallam-Baker, J. Hostetler, S. Lawrence, P. Leach, A.
Luotonen, and L. Stewart, “HTTP Authentication: Basic and Digest
Access Authentication,” IETF Request for Comments 2617 (1999),
http://www.ietf.org/rfc/rfc2617.txt.
20. R. Tschalär, “NTLM Authentication Scheme for HTTP” (2003), http://
www.innovation.ch/personal/ronald/ntlm.html.
21. E. Rescorla, “HTTP Over TLS,” IETF Request for Comments 2818 (2000),
http://www.ietf.org/rfc/rfc2818.txt.
22. P. Hallam-Baker, “The Recent RA Compromise,” Comodo IT Security
(blog) (March 23, 2011), http://blogs.comodo.com/it-security/data-security/
the-recent-ra-compromise/.
23. S. Chen, R. Wang, X. F. Wang, and K. Zhang, “Side-Channel Leaks
inWeb Applications: A Reality Today, a Challenge Tomorrow,”
Microsoft Research (2010), http://research.microsoft.com/pubs/119060/
WebAppSideChannel-final.pdf.
24. C. Evans, “Open Redirectors: Some Sanity,” Security: Hacking Everything
(blog) (June 25, 2010), http://scarybeastsecurity.blogspot.com/2010_06_01
_archive.html.
272 Notes for Pages 50–66
Chapter 4
1. T. Berners-Lee, “HTML Tags,” World Wide Web Consortium archives
(1991), http://www.w3.org/History/19921103-hypertext/hypertext/WWW/
MarkUp/Tags.html.
2. T. Berners-Lee and D. Connolly, “Hypertext Markup Language—2.0,”
IETF Request for Comments 1866 (1995), http://www.ietf.org/rfc/
rfc1866.txt.
3. D. Raggett, “HTML 3.2 Reference Specification,” World Wide Web
Consortium (1997), http://www.w3.org/TR/REC-html32.
4. D. Raggett, A. Le Hors, and I. Jacobs, “HTML 4.01 Specification,” World
Wide Web Consortium (1999), http://www.w3.org/TR/html401/.
5. I. Hickson, “HTML5,” World Wide Web Consortium draft, revision
1.5019 (2011), http://dev.w3.org/html5/spec/Overview.html.
6. G. Coldwind, “Too general charset = detection in meta,” Mozilla
bug640529 (2011), https://bugzilla.mozilla.org/show_bug.cgi?id=640529.
Chapter 5
1. H. Wium Lie and B. Bos, “Cascading Style Sheets, Level 1,” World
WideWeb Consortium, (1996), http://www.w3.org/TR/CSS1/.
2. T. Çelik, E.J. Etemad, D. Glazman, I. Hickson, P. Linss, and J. Williams,