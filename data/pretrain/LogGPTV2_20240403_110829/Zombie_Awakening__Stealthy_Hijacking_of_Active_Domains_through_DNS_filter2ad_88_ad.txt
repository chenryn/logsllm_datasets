-
-
-
r
e
d
i
v
o
r
P
g
n
i
t
s
o
H
S
N
D
CloudFlare [18]
Amazon Route 53 [6]
GoDaddy DNS hosting [36]
Oracle Dyn [27]
Domain.com [29]
Contabo [19]
Hetzner Online GmbH [38]
CentOS Web Panel [60]
RU Center [67]
DNS Made Easy [30]
DigitalOcean [26]
NS1 [59]
SEO Web Hosting [39]
Hurricane Electric Hosted DNS [31]
ClouDNS [17]
GeoScaling [35]
1984 Hosting [34]
Total
-
-
-
-
-
-
Yes
Yes
4/6
0/149
3/3
2/2
-∗
-∗
628/1304
∗No PVDs found in our dataset.
Table 1: The study of DNS hosting providers where the ad-
versary can make unauthorized claims on another party’s
domain. (•: PVDs dropped;◦: no PVDs dropped)
with prior research [42, 46], our study involves more resolvers, in-
cluding those never analyzed before, such as the CloudFlare public
resolver.
To perform domain hijacking in an ethical way (Section 4.4), we
utilized a domain under our control. Specifically, we registered a
domain, configured its RRs to include a Zref (an exploitable stale NS
record in SLDns) and further built up a zombie resolution path with
a DNS hosting provider (i.e., DigitalOcean), as stated in Section 3.
Then, we sent a series of DNS queries on the domain to each resolver
to verify whether it can be utilized to execute the Zaw attack. We
designed two experiments: one against public resolvers, and the
other against popular DNS implementations. In the following, we
elaborate on the study.
Public resolvers – experiment setting. In our study, we config-
ured our own domain so that the TLDns were not consistent with
its SLDns. Specifically, the domain has two NS records in its TLD
zone and four NS records in its SLD zone. Among four records in
SLDns, two of them are identical to the NS records in the TLDns
and two others considered to be under the attacker’s control. This
configuration setting is chosen to obtain a more realistic measure-
ment because, based on our observation in Section 5.2 there is an
overlap in the NS records between TLDns and SLDns which affects
the probability of selecting the Zref. Furthermore, TLDns were
configured to respond with the A record carrying the IP set by the
domain owner (IPcorrect), while the two nameservers in SLDns
were set to respond with the attacker’s IP (IPattacker). We also
confirmed that our DNS client did not cache any DNS response.
We chose a short TTL value (i.e., 30 seconds) for the A record
carrying IPcorrect to make it quickly expire in the resolver’s cache
so we could force the resolver to launch a recursive resolution
process for follow-up requests4. Also, we set the TTL for the A
record of IPattacker as 4 hours to ensure that it would stay in the
resolver once it is cached and, therefore, increases the chance to
find a cache-hit at one of the multiple instances of the resolver. In
particular, it applies to resolvers that implement anycast addressing
where the endpoint address has multiple routing paths to two or
more destinations for load balancing [2].
Public resolvers – experiment. During the experiment, we is-
sued unique queries for each resolver in our dataset to avoid the
answer being cached by any intermediate server, as in [21]. In par-
ticular, each subdomain (i.e., resolverID.ourDomain.tld) is used
to query its corresponding resolver.
Using such queries, we performed a 3-step domain hijacking
attack for each resolver in our dataset. First, we queried the A record
for our generated subdomain to cause the resolver to cache the
record with IPcorrect. The purpose here is to mimic the real world
scenario in which resolvers cache DNS records for popular domains.
Second, we queried the NS record of our domain to evaluate whether
the resolver could overwrite cached TLDns with the SLDns (i.e.,
the four NS in SLDns with two records controlled by the attacker).
Third, we repeated the first step until we received IPattacker as
a response. In our experiment, this has been done up to 50 times.
For each unsuccessful attempt, we queried the NS records again
(the second step) to improve the chances of success in the next
attempt to receive IPattacker. This is because popular public DNS
resolvers use anycast for load balancing [51], and by repeating this
second step, we make it more likely to have the SLDns (including
the Zrefs) cached by as many affiliated resolvers as possible. The
limit on the number of attempts was chosen for ethical reasons to
avoid overloading the resolvers.
To confirm that the resolver cached the attacker’s A record, we
further queried each popular resolver for the A records of the sub-
domains. This test was conducted within one hour after the third
step. We found that all vulnerable resolvers had the record cached.
In our research, we repeated this experiment five times on each
resolver to calculate the average number of attempts required to
have the attacker’s A record cached by vulnerable resolvers.
Public resolvers – findings. In our experiment, we performed
the above 3-steps probing all resolvers.
The result with 12 top public resolver operators [78] is presented
in Table 3 (in Appendix B): 10 out of them (83.33%) have at least
one affected resolver. The operators include CloudFlare public DNS,
OpenDNS, and Quad9. In addition, we found that a successful at-
tack took 1 to 28 attempts with an average of 6.5 over all affected
providers and a median of 3.
We further investigated whether these high-profile resolvers val-
idate DNSSEC-signed domains, which can mitigate the Zaw threat
(see Section 6). Specifically, we queried each resolver for a domain
with a broken DNSSEC configuration (i.e., www.dnssec-failed
.org). If the resolver returns an A record, we know that it does not
4Note that the TTL setting here just serves the purpose of understanding whether
public resolvers can be manipulated and in Section 5.2 we report another study that
measures the attack complexity under real-world TTLs.
4.4 Ethical Consideration
To avoid the potential negative impact of our experiments on real
world online services, i.e., poisoning the cache of DNS resolvers with
invalid records of active domains, we directly sent our queries to
TLDs nameservers and PVDs’ authoritative servers. None of these
queries were delivered through a caching resolver (Section 4.1).
Also, we only conducted the experiments on affected resolvers on
domains that we control and avoided affecting resolutions of the
PVDs (Section 4.3). Moreover, we have reported our findings to the
owners of vulnerable domains and will help to address the problem
when needed. Also, we plan to share our findings with DNS hosting
provider and resolver operators.
5 ANALYSIS AND MEASUREMENT
In this section, we discuss our findings based on the in-depth analy-
sis of 628 hijackable domains identified in our research and measure
the efforts required by an attacker to launch a successful Zaw attack.
5.1 Characteristics of Hijackable Domains
Landscape. In total, we discovered 628 hijackable domains un-
der the threat of Zaw attack. Four vulnerable domains are under
the selected sponsored TLDs, and the remaining (624) are among
the Alexa’s top 1M. Figure 5a (in Appendix C) shows the top-11
categories of found hijackable domains. These were categorized
based on information from Website Categorify [15], with 195 do-
mains uncategorized. The hijackable domains fall under a wide
range of different categories. The most prevalent category is Sports
with 63 domains, which mainly consists of sports betting web-
sites (e.g., correctscore1x2.com), followed by business websites
with 34 domains (e.g., quecentre.com), financial websites (e.g.,
sharmastocks.com) with 31 domains, and shopping websites with
31 domains (e.g., brandhousedirect.com.au). Exploiting these do-
mains may cause an imminent financial loss if hijacked. Also, we
identified 18 vulnerable domains categorized as “cloud/hosting”
(e.g., avrohost.com), which are regarded as security-critical since
the security of these services could affect all the businesses hosted
there. In addition, we found 6 vulnerable domains that belong to
government entities: 4 Saudi Arabian, one Colombian, and one
Malaysia, all under their corresponding ccTLD (i.e., gov.ccTLD).
Also found are 31 education-related websites; for example, one
university in the US (swau.edu), and 2 in Russia (msun.ru, and
usma.ru). An attacker can exploit the high trust level of these gov-
ernment and education domains to orchestrate a wide range of
illicit activities, such as phishing attacks to collect identity infor-
mation, and malware distribution. We elaborate on the cases with
high security impact in Section 5.3
The distribution of the hijackable domains among the affected
providers from our methodology in Section 4.2 is shown in Figure 5b
(in Appendix C). We observed that 244 of the vulnerable domains
(38.85%) have Zrefs pointing to Hetzner Online GmbH. Given that its
DNS hosting service is free, an adversary can exploit any of these
domains with no cost.
TLDs of hijackable domains. Figure 5c (in Appendix C) shows
the top-10 TLDs of the hijackable domains observed in our research.
The most prevalent TLD is .com with 380 domains (i.e., 60%). This
Figure 4: Geolocation distribution of the affected resolves.
support DNSSEC [70]. In our study, we observed that all top pop-
ular resolvers support DNSSEC except for Yandex.DNS. However,
among all 628 vulnerable domains discovered, only one is properly
DNSSEC-signed (Section 5.2).
Among 11,613 open resolvers [28], 11,072 responded to our
queries and 7,044 are vulnerable to our cache poisoning attack
(63.62% of the responding resolvers). Interestingly, only 1541 of the
vulnerable resolvers (21.88%) support DNSSEC. Figure 4 shows the
distribution of these resolvers’ geolocations: most of them are in
US, followed by Russia. We also concluded that the resolver of the
organization is affected. The attacker’s IP address was found to be
still in the cache four hours after our experiment.
DNS implementation – experiment setting. We further looked
into the behaviors of six DNS implementations (i.e., Bind, Unbound,
Microsoft, PowerDNS, MaraDNS, and DJB dnscache) 5 in the pres-
ence of the Zaw attack. Specifically, we investigated whether an
explicit query of the NS record is required to activate the Zaw attack
(step 3 in Figure 2b). The experiment setting is very similar to that
for the study on the public DNS, except that we assumed no overlap
between TLDns and SLDns, and all SLD nameservers under the
attacker’s control, for the purpose of removing nondeterminism in
nameserver selection.
DNS implementations – experiment. Our experiments were
performed in the following two scenarios: 1) immediately querying
for the A record to find out whether the resolver will query any SLD
nameserver in its default resolution path; 2) explicitly querying for
an NS record before querying for the A record. Whenever IPattacker
is returned as a response, the resolver is considered vulnerable. Note
that the cache of the resolver was cleared before the experiment
under each scenario.
DNS implementation – findings. As shown in Table 4 (Appen-
dix B), none of the tested DNS implementations include SLDns in
their standard resolution path under their default settings 6. How-
ever, Bind, Unbound, PowerDNS, Microsoft DNS, and DJB dnscache
are confirmed to be vulnerable to the Zaw attack when the NS
record is explicitly queried for.
5DNSmasq was omitted since it is not a standalone recursive resolver, and its behavior
depends on the selected upstream DNS server. Therefore, its susceptibility to our
attack depends on whether the upstream DNS server is vulnerable. Also, Big IP was
not included due to some technical challenges and limited support to our trial account.
6Activating “harden-referral-path" option in Unbound will cause the attack to succeed
even if the NS was not queried explicitly.
is expected due to its popularity [41]. In regard to country code
TLDs (i.e., ccTLDs), .gr and .ir are found to have most hijack-
able domains (42 and 22 domains, respectively). We argue that in
some cases the existence of the Zref is due to the transition of the
DNS hosting from the affected provider to a new DNS server (as
investigated below in Zref origin investigation). We also observed
in Section 4.2 that domain.com is not currently supporting .ir do-
mains. Domain.com claims that this decision is due to Federal laws
that prohibit providing service to some locations, including Iran.
So, the large number of hijackable .ir domains that have a Zref
pointing to other providers could be due to a burst of transition
from international providers to in-house DNS servers, as an attempt
to maintain the domains’ availability. To support this claim, we
manually sampled some .ir domains and found that their active
NS records are indeed pointing to Iranian hosting services (e.g.,
darkoobhost.com). However, the Zref still existed in the SLDns.
For the .gr, we observed the transition to in-house services (e.g.,
datapack.net); however, the justification for the burst is not clear.
Exploitable Duration. To investigate the duration of exploitabil-
ity, we conducted a longitudinal study spanning over 91 days. Fig-
ure 6 (in Appendix C) shows the distribution of the duration in
which hijackable domains hold Zrefs. Our results showed that 565
(89.97%) out of the 628 domains were vulnerable for at least 30 days,
while 410 (65.29%) domains remained vulnerable for the whole anal-
ysis duration. The long vulnerability duration provides an adversary
with a good opportunity to act maliciously and exploit it. However,
only 31 (4.93%) domains were found vulnerable for fewer than 10
days. When manually sampling these domains to explore the origin,
we found 8 IT related domains, all either personal blogs or small IT
business. This could indicate a careful clean up by domain owners.
Zref origin investigation. We argue that part of the reason why
a Zref exists is when the domain’s zone information from one DNS
hosting provider is imported to a new DNS server. To this end, we
utilized PDNS data to examine the historical DNS records for all the
hijackable domains. Specifically, if a Zref occurs at the TLDns and
then later disappears, it suggests a transition has happened to a new
DNS server. As a result, we indeed observed 109 (17.36%) hijackable
domains showed the transition behaviors. It is important to note
that PDNS data is mainly dependent on the resolution requests for
the domains, thus, the number was estimated as a lower bound.
5.2 Measuring Attack Complexity
We measure the complexity of a Zaw attack in terms of: (1) the
possibility for an adversary to find a time slot (i.e., a valid A record
not in the cache) to poison the records of the hijackable domains, (2)
the probability for an affected resolver to select a Zref, and (3) proper