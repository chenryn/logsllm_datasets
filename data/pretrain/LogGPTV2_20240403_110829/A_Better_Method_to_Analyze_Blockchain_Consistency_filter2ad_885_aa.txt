title:A Better Method to Analyze Blockchain Consistency
author:Lucianna Kiffer and
Rajmohan Rajaraman and
Abhi Shelat
A Better Method to Analyze Blockchain Consistency
Lucianna Kiffer, Rajmohan Rajaraman and abhi shelat
Northeastern University
{lkiffer,rraj}@ccs.neu.edu,PI:EMAIL
ABSTRACT
The celebrated Nakamoto consensus protocol [16] ushered in sev-
eral new consensus applications including cryptocurrencies. A
few recent works [7, 17] have analyzed important properties of
blockchains, including most significantly, consistency, which is a
guarantee that all honest parties output the same sequence of blocks
throughout the execution of the protocol.
To establish consistency, the prior analysis of Pass, Seeman and
Shelat [17] required a careful counting of certain combinatorial
events that was difficult to apply to variations of Nakamoto. The
work of Garay, Kiayas, and Leonardas [7] provides another method
of analyzing the blockchain under the simplifying assumption that
the network was synchronous.
The contribution of this paper is the development of a simple
Markov-chain based method for analyzing consistency properties of
blockchain protocols. The method includes a formal way of stating
strong concentration bounds as well as easy ways to concretely
compute the bounds. We use our new method to answer a number
of basic questions about consistency of blockchains:
and extend them to other protocols;
• Our new analysis provides a tighter guarantee on the con-
sistency property of Nakamoto’s protocol, including for pa-
rameter regimes which [17] could not consider;
• We analyze a family of delaying attacks first presented in [17],
• We analyze how long a participant should wait before con-
• We analyze the consistency of CliqueChain, a variation of
• We provide the first rigorous consistency analysis of GHOST
sidering a high-value transaction “confirmed”;
the Chainweb [14] system;
[20] and also analyze a folklore “balancing"-attack.
In each case, we use our framework to experimentally analyze
the consensus bounds for various network delay parameters and
adversarial computing percentages.
We hope our techniques enable authors of future blockchain
proposals to provide a more rigorous analysis of their schemes.
ACM Reference Format:
Lucianna Kiffer, Rajmohan Rajaraman and abhi shelat. 2018. A Better Method
to Analyze Blockchain Consistency. In 2018 ACM SIGSAC Conference on
Computer and Communications Security (CCS ’18), October 15–19, 2018,
Toronto, ON, Canada. ACM, New York, NY, USA, Article 4, 16 pages. https:
//doi.org/10.1145/3243734.3243814
Permission to make digital or hard copies of all or part of this work for personal or
classroom use is granted without fee provided that copies are not made or distributed
for profit or commercial advantage and that copies bear this notice and the full citation
on the first page. Copyrights for components of this work owned by others than the
author(s) must be honored. Abstracting with credit is permitted. To copy otherwise, or
republish, to post on servers or to redistribute to lists, requires prior specific permission
and/or a fee. Request permissions from permissions@acm.org.
CCS ’18, October 15–19, 2018, Toronto, ON, Canada
© 2018 Copyright held by the owner/author(s). Publication rights licensed to ACM.
ACM ISBN 978-1-4503-5693-0/18/10...$15.00
https://doi.org/10.1145/3243734.3243814
1 INTRODUCTION
In 2008, Nakamoto [16] proposed the celebrated blockchain pro-
tocol which uses proofs of work to implement a public, immutable
and ordered ledger of records suitable for applications such as
cryptocurrencies. While standard consensus/Byzantine agreement
mechanisms could be used to achieve such an immutable ordered
sequence of records, the amazing aspect of Nakamoto’s protocol
is that it functions in a fully permissionless setting and works as
long as more than half of the computing power in the network fol-
lows the protocol. In contrast, prior work on Byzantine agreement
showed strong lower-bounds in fixed-party settings when even just
one-third of the participants were adversarial.
Thus, it is remarkable that the honest parties using Nakamoto
can reach agreement on a sequence of blocks. This property has
been strongly validated by the Bitcoin network over almost 10 years
of operation during which the participation has grown by 12 orders
of magnitude from millions of hashes/second to million trillions of
hashes/second!
To understand this phenomena, the original Nakamoto paper
provided the first intuitive analysis as to how the protocol achieved
consensus. Specifically, the paper shows that if an honest participant
adds a block B to the chain and then waits for k more blocks to
be added, the probability that an attacker (with less than 50% of
the computational power) can build an alternative chain that does
not include B drops exponentially with k. While intuitive, this
analysis unfortunately does not consider other attacks, and thus
does not fully establish the consensus property for the protocol. For
example, the analysis does not consider an adversary that attempts
to introduce small disagreements between honest miners so as to
split their computational power among several “forks”.
Garay, Kiayas and Leonardos [7] provided the first formal model-
ing of Nakamoto consensus and proved that the protocol achieved a
common prefix-property. More specifically, if µ denotes the fraction
of honest parties, ρ denotes the fraction of adversarial power, and
p represents the hardness of the proof of work, they show that
2 − pλ + 1 ≥ 0, then “the
if µ > λρ for some λ > 1 such that λ
blockchains maintained by the honest players will possess a large
common prefix.” However, their analysis only considered a “static
setting in which the participants operate in a synchronous commu-
nication network in the presence of an adversary that controls a
subset of the players.” In particular, players were either honest or ad-
versarial throughout the protocol, and the network model ensured
delivery of messages “in the next round.” Assuming a synchronous
network is a very strong, possibly unrealistic assumption; indeed,
Nakamoto’s protocol is explicitly designed to work in a network
with message delays such as the public Internet. Furthermore, the
notion of common-prefix is not strong enough because it does not
preclude the chain from alternating between two different versions
on even and odd rounds.
Session 4C: Blockchain 1CCS’18, October 15-19, 2018, Toronto, ON, Canada729To address these issues, Pass, Seeman, and Shelat [17] provide a
different formal model for studying the properties of Nakamoto’s
protocol. In particular, they introduce an idealized model for the
protocol execution that can capture adaptive corruptions (and un-
corruptions) of parties and a partially synchronous network in which
the adversary can adaptively and individually delay messages up
to some delay limit ∆. They also introduce a stronger notion of
consistency and then proceed to show how Nakamoto can achieve
this notion when the hardness of the proof of work p is set with
an appropriate relation to ∆ and the number of participants n.
Their analysis is precise enough to make concrete claims about the
relationship between p, ∆, and n for which consistency holds and
also for which a simple delay attack can violate consistency.
In subsequent work in 2017, Garay, Kiayas and Leonardos [8]
studied aspects of how the hardness p is adjusted as more players
join the protocol during epochs in the Nakamoto consensus protocol
and how this epoch must be sufficiently large to avoid certain
attacks. Techniques from this paper were also used to update [7];
in particular, the updated version of the latter extends the analysis
to the partially synchronous model but is not precise enough to
make concrete claims about the parameters.
1.1 Contributions
In this paper we show how Markov chains can be used to model
blockchain protocols to both simplify the analysis of blockchain
protocols and attacks and to make precise claims about parameter
relationships. To introduce our method, in §4.2 we show how to
replicate the analysis of Nakamoto’s protocol done by Pass et al. [17]
using a Markov model. We validate our method by recovering
essentially the same bound.
By inspecting this graphical Markov model, however, we discov-
ered cases in which the counting of events in [17] under-counts
a special event. Based on this insight, we show in §4.3 how our
Markov model exactly counts so called “convergence opportuni-
ties” and thus leads to more accurate bounds on consistency (see
Thm 4.4). To illustrate this new result, Fig. 1 replicates a graph
from [17] showing a relationship between proof of work hardness
) and
and adversary control. Against the original analysis (
attack (
) shows
higher resilience at lower parameters where the previous analyses
provided no lower bounds.
), our new result from the Markov model (
To further illustrate our technique, in §5 we introduce Cliquechain,
a specific example of the Chainweb protocol [14] for which we can
use our techniques to show the same consistency lower-bound as
Nakamoto’s protocol. Chainweb proposes a blockchain protocol
that creates a braid of various parallel chains. The main idea is that
at each level the chains reference each other according to some
base graph, and thus in order to replace one block in any chain,
you must also replace the blocks in the parallel chains that refer-
ence it. The protocol claims to be able to handle 10K transactions
per second over hundreds or thousands of parallel chains, but the
analysis in the paper again only considers variations of the 50%
attack. Our analysis on consistency does not support this 10k claim.
Bitcoin, running Nakamoto’s protocol with network delay of about
10 seconds, can handle approximately 7 txns/sec, we show that the
Cliquechain protocol with any number of chains is bounded by the
)
n
o
i
t
c
a
r
f
y
r
a
s
r
e
v
d
A
(
ρ
1
2
3
10
1
10
0
Delay attack from [17]
Consistency from [17]
Our first Markov Model
Consistency Thm 4.4
2
4
60 100
1
c (blocktime in terms of network delay ∆)
10
25
Figure 1: Replication of [17, Fig. 1], “Minimum percentage of
computing power an adversary must hold in order to break
consistency" using same parameters n = 105 and ∆ = 1013,
p = 1
c ∆ , but illustrating the new bound from our Thm. 4.4.
same throughput as Nakamoto’s protocol for the same consistency
guarantee.
In §6, we extend our techniques to establish that the protocol
GHOST [20] also has the same consistency lower bounds. GHOST’s
main claim is also that it can handle higher transaction rates than
Nakamoto’s protocol while being resilient to 50% attacks.
For each protocol we also analyze variants of attacks using our
technique and provide probability distributions for how long the
attacks last. In §4.4 we first show a very simple Markov model
that captures the ‘50% attack’ on Nakamoto presented in [17]. As
discussed so far, the notion of blockchain consistency considered in
the literature is still an asymptotic notion that requires the “proba-
bility of a fork” to fall exponentially with some parameter T . We
use this same attack model to answer very pragmatic questions
about blockchains: For example “how long should one wait before
confirming a transaction?” While folklore holds that one should ig-
nore (i.e., wait for) the last T = 6 blocks, we provide a more precise
answer to this question by modeling an attack in which the goal
of the adversary is to “undo” a recently confirmed transaction. We
show, for example, that T = 6 is a surprisingly low default for chains
like Ethereum which use more aggressive network parameters.
Since this delay attack is not successful on GHOST, we present
another attack, the ‘Balancing Attack’, with a Markov chain in §6.4
which captures a simplified version of the attack on GHOST. We use
this model to capture a lower bound on transaction confirmation
time for the GHOST protocol in Fig. 11
Our work is not the first to employ Markov-based analysis of
blockchains. Indeed, Eyal and Sirer [6] develop a Markov model to
analyze the success of the selfish mining attack on Nakamoto’s pro-
tocol. Our work, however, is the first to use Markov-based models
to analyze consistency against any adversary, and provides a gen-
eral framework to analyze specific attacks on various blockchain
protocols. Previous studies on consistency [7, 8, 17] have advocated
using Markov methods, but have considered them too complicated
to analyze: for instance, the authors of [17] write “the Markov chain
that arises from this problem is too complicated to analyze using
Session 4C: Blockchain 1CCS’18, October 15-19, 2018, Toronto, ON, Canada730standard concentration bounds for Markov chains.” We show that
consistency of several blockchain protocols as well as the impact
of specific attacks are well-captured by natural Markov chains, and
can be analyzed using a judicious combination of (a) derivation of
steady-state distributions; (b) concentration bounds for generalized
Markov chains; (c) generating functions for deriving probability
of significant events; and (d) simplification of the Markov chain,
where appropriate. Even in cases, where we are unable to derive
closed-form bounds in terms of the parameters involved, we are
still able to numerically calculate the measures of interest.
We hope that subsequent papers proposing blockchain protocols
can employ these techniques to frame and analyze properties about
their protocols.
1.2 Related Work
Chainweb and GHOST are two examples of a new class of blockchain
protocols which consider DAG-based chains instead of a linear
chain. Other such examples include the inclusive protocol of Lewen-
berg, Sompolinsky and Zohar [13] which use the DAG to reward
miners for work but whose security is inherited by the security
of GHOST or any other tree-based chain selection policy. SPEC-
TRE, another protocol from the authors of the inclusive protocol
[19], extends the DAG idea by having miners point to all recent
child-free blocks they know in any newly mined block. They claim
security by relaxing the restriction on linearity of transactions.
PHANTOM [21] builds on SPECTRE and organizes the DAG-based
chains in such a way that the blocks mined by honest players form a
well-connected cluster of blocks; in particular, their aim is to ensure
that the largest set of blocks with inter-connectivity exceeding a
certain threshold is composed of honest mined blocks. However,
none of these protocols give a formal argument for the consistency
properties put forth in either [7, 17], but instead mostly rule out
specific attacks.
In [11] and [12], Kiayias et al. analyze both Nakatomoto’s proto-
col and GHOST in a synchronous setting where honest messages
are delivered in the following round, but the adversary can reorder
them. They show an attack on the growth rate of the main-chain to
delay transaction confirmation time in this model of both GHOST
and Nakamoto’s protocol. Their results show that the attack pro-
duces greater delays in the GHOST protocol. In our analysis we
consider a stronger adversary that can delay honest messages up
to the network delay, and focus on consistency attacks (instead of
chain growth attacks) which also delay confirmation time.
Sleepy [18] proposes a new blockchain in a model with a CRS
and a PKI and participants who sometimes become inactive; they
show how to replace a proof of work with another rate-limiting
mechanism. We believe our techniques directly apply because they
apply the same counting as [17] (see, e.g. Lemma 2 in [18]).
The Algorand schemes [2, 9] construct a blockchain from im-
proved Byzantine agreement protocols; as far as we can tell, they
require a 2/3 fraction of honest users and thus rely on different
techniques for proving consistency.
The choice of network delay in this paper is supported by mea-
surements of real delays in active blockchain systems [5]. Aposto-
laki et al. show how an ISP can partition the Bitcoin network and
delay messages [1] thus justifying our choice to allow the adversary
the power to rearrange and delay messages between players.
2 THE MODEL
We rely on the formalization of blockchain protocols introduced by
Garay, Kiayas and Leonardos [7] and Pass, Seeman, and shelat [17].
A blockchain is a pair of algorithms (Π, ext); Π is a stateful
algorithm that maintains a local state variable C—called the chain—
which contains a set of abstract records called blocks, each of which
contains a message m. The algorithm ext maps a set of blocks
to a sequence of messages; e.g. ext(C) denotes the sequence of
messages obtained by applying ext to C. The overall aim is for
players to receive messages as inputs and then attempt to include
their message in their own chain and those of others.
A blockchain protocol is executed in a partially asynchronous
network model that involves the following components: (We use κ
to denote the security parameter)
Environment: An environment, represented by Z (1κ ), is used to
model all of the external factors related to an execution. It
activates the n players, each either honest or corrupt and
provides all of the inputs for the protocol.1
Honest players: The honest players run a given blockchain protocol
specified by (Π, C); each honest player keeps a copy of their
current view of the blockchain and tries to contribute to it
by building blocks at the end of their chain.
Adversary: The corrupted players, who are at most a ρ fraction
of the n players, are controlled by an adversary A. The ad-
versary is given two advantages: (a) the adversary is able
to delay and reorder all messages players receive up to a
delay of ∆ rounds; (b) the adversary can control the actions
of each corrupt node; for instance, all corrupt nodes could
work on the same block or different ones. Thus, the model
gives more power to the adversary than might be realistic in
an actual deployment, thus yielding conservative bounds on
the performance of the system.