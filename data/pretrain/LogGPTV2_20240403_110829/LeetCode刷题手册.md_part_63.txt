## Page 642
代码
解题思路
继承词有许多可以形成它的词根，则用最短的词根替换它。要求输出替换之后的句子。
现在，给定一个由许多词根组成的词典和一个句子。你需要将句子中的所有继承词用词根替换掉。如果
another(另一个)。
称这个词为 继承词(successor)。例如，词根an，跟随着单词 other(其他)，可以形成新的单词
在英语中，我们有一个叫做词根(root)的概念，
题目大意
Note:
Example 1:
You need to output the sentence after the replacement.
it, replace it with the root with the shortest length.
successor in the sentence with the root forming it. If a successor has many roots can form
Now, given a dictionary consisting of many roots and a sentence. You need to replace all the 
other, which can form another word another.
 another longer word - let's call this word successor. For example, the root an, followed by
In English, we have a concept called root, which can be followed by some other words to form 
题目
648. Replace Words
·这一题有 2 种解题思路，第一种就是单纯的用 Map 查找。第二种是用 Trie 去替换。
package leetcode
·给出一个句子和一个可替换字符串的数组，如果句子中的单词和可替换列表里面的单词，有相同的
 5. 1 >1
high = mid 
 low = mid + 1 
---
## Page 648
代码
解题思路
注意：
个，则尽可能多的利用它们。
灰度(向下舍入)，平均灰度的计算是周围的8个单元和它本身的值求平均，如果周围的单元格不足八
包含整数的二维矩阵 M 表示一个图片的灰度。你需要设计一个平滑器来让每一个单元的灰度成为平均
题目大意
Note:
·将二维数组中的每个元素变为周围 9 个元素的平均值。
·矩阵的长和宽的范围均为[1,150]。
·给定矩阵中的整数范围为[0,255]。
1. The value in the given matrix is in the range of [0, 255].
func imageSmoother(M [][]int) [][]int {
package leetcode
Fort
Fort
For the point (O,0),
Explanation:
[[0,0,0]
Output:
[0,0,0]]
[0,0,0］,
[[1,1,1],
Input:
[1,1,1]]
[1,0,1],
for y := O; y = 0 &&x-1 >= 0 { 
if x+l = 0 { 
if y+1= 0 && x+l = 0 {
Top Left 
Check Coners
 Check left
Top Right 
---
## Page 650
Example 3: 
Example 2:
Example 1: 
counted into the length calculation.
most non-null nodes in the level, where the nul1 nodes between the end-nodes are also 
binary tree, but some nodes are null.
tree is the maximum width among all levels. The binary tree has the same structure as a full 
Given a binary tree, write a function to get the maximum width of the given tree. The width of a 
662. Maximum Width of Binary Tree
The width of one level is defined as the length between the end-nodes (the leftmost and right 
题目
(5,3).
Output: 2 
Input:
(5,3,null,9).
  e  h se e u aixa   e 
output:4
Input:
---
## Page 651
解题思路
注意:答案在32位有符号整数的表示范围内。
题目大意
Example 4:
的长度。
每一层的宽度被定义为两个端点（该层最左和最右的非空节点，两端点间的null节点也计入长度）之间
树与满二叉树（full binary tree）结构相同，但一些节点为空。
给定一个二叉树，编写一个函数来获取这个树的最大宽度。树的宽度是所有层中的最大宽度。这个二叉
Note: Answer will in the range of 32-bit signed integer.
·这一题可能有人会想着先补全满二叉树，然后每层分别找左右边界。这种方法提交以后会卡在
·给出一个二叉树，求这棵树最宽的部分。
(6,null,null,null,null,null,null,7). 
Explanation:The maximum width existing in the fourth level with the length 8
Output: 8 
Input:
(3,2).
Explanation: The maximum width existing in the second level with the length 2
Output: 2
Input:
度即可。此题的关键在于如何有效的找到每一层的左右边界。
为 nul1 的节点和最右边不为 nul1 的节点。这两个节点之间都是算宽度的。最终输出最大的宽
104／108这组测试用例上，这组测试用例会使得最后某几层填充出现的满二叉树节点特别多，
这一题可以用 BFS 也可以用 DFS，但是用 BFS 比较方便。按照层序遍历，依次算出每层最左边不
6
V
---
## Page 652
代码
node.Left.Right})
package leetcode
·由于此题要找每层的左右边界，实际上每个节点的Va1值是我们不关心的，那么可以把这个值用
func widthofBinaryTree(root *TreeNode) int {
queue = append(queue, &TreeNode{O, root.Left, root.Right})
if root.Left == nil && root.Right == nil {
if root == nil {
 Definition for a binary tree node.
for len(queue) != O {
queue, res := []*TreeNode{}, 0
就是本题的最终答案。
标上号，用 BFS 层序遍历每一层，每一层都找到左右边界，相减拿到宽度，动态维护最大宽度,
层满二叉树中的序号是 2*×，它的右孩子在下一层满二叉树中的序号是2*×+1。将所有节点都
来标号，标记成该节点在每层中的序号。父亲节点在上一层中的序号是×，那么它的左孩子在下一
最终导致 Memory Limit Exceeded 了。
var left, right *int 
 return 0
for i := O; i  newVal {
 queue = append(queue, &TreeNode{newval, node.Left.Left,
newVal := node.Val * 2 
//根据满二叉树父子节点的关系，得到下一层节点在本层的编号
 left = &newVal
---
## Page 653
Example 1:
you need to return the k-th smallest number in this table.
Given the height m and the length n of a m * n Multiplication Table, and a positive integer k,
number quickly from the multiplication table? 
Nearly every one have used the Multiplication Table. But could you find out the k-th smallest
题目
668. Kth Smallest Number in Multiplication Table
node.Right.Right?)
return res
case left != nil && right != nil:
//某层只有两个点，那么此层宽度为两点之间的距离
:u =i ay61  1u == 4yal '1u == zu61  l1u =i 4a a59
//某层只有一个点，那么此层宽度为1
switch{
 res = max(res,
res = max(res, 1) 
if node.Right != nil {
 queue = append(queue, &TreeNode{newVal, node.Right.Left,
if right == nil ll *right < newval {
newVal := node.Val*2 + 1 
//根据满二叉树父子节点的关系，
 right = &newval
 left = &newval
right = &newval
*right-*left+1)
，得到下一层节点在本层的编号
---
## Page 654