            for _,rule in pairs(uarules) do
                if rule ~="" and ngxmatch(ua,rule,"isjo") then
                    log('UA',ngx.var.request_uri,"-",rule)
                    say_html()
                return true
                end
            end
        end
        return false
    end
  * url检查
    --[[
        ngx.var.request_uri api获取的url与规则库提取的urlrules做黑名单匹配
        匹配成功时调用log()函数记录日志，并返回403页面
    ]]
    function url()
        if UrlDeny then
            for _,rule in pairs(urlrules) do
                if rule ~="" and ngxmatch(ngx.var.request_uri,rule,"isjo") then
                    log('GET',ngx.var.request_uri,"-",rule)
                    say_html()
                    return true
                end
            end
        end
        return false
    end
  * args检查
    --[[
        ngx.req.get_uri_args() api获取url的args
        判断args值是否为table类型，如果是则使用concat拼接数据
        再将args的值与规则库提取的argsrules做黑名单匹配
        匹配成功时调用log()函数记录日志，并返回403页面
    ]]
    function args()
        for _,rule in pairs(argsrules) do
            local args = ngx.req.get_uri_args()
            for key, val in pairs(args) do
                if type(val)=='table' then
                    if val ~= false then
                        data=table.concat(val, " ")
                    end
                else
                    data=val
                end
                if data and type(data) ~= "boolean" and rule ~="" and ngxmatch(unescape(data),rule,"isjo") then
                    log('GET',ngx.var.request_uri,"-",rule)
                    say_html()
                    return true
                end
            end
        end
        return false
    end
  * cookie检查
    --[[
        ngx.var.http_cookie api获取的cookie与规则库提取的ckrules做黑名单匹配
        匹配成功时调用log()函数记录日志，并返回403页面
    ]]
    function cookie()
        local ck = ngx.var.http_cookie
        if CookieCheck and ck then
            for _,rule in pairs(ckrules) do
                if rule ~="" and ngxmatch(ck,rule,"isjo") then
                    log('Cookie',ngx.var.request_uri,"-",rule)
                    say_html()
                return true
                end
            end
        end
        return false
    end
  * body检查
post方法：
    --[[
        ngx.req.init_body api创建一个4k的缓存区，sock接收每个请求最大4k数据进行检查
        正则匹配请求体数据，发现Content-Disposition: form-data时进入文件检查流程，对文件后缀名与规则库提取的black_fileExt做黑名单匹配
        然后对请求体与规则库提取的postrules做黑名单匹配
        匹配成功时调用log()函数记录日志，并返回403页面
    ]]
    ngx.req.init_body(128 * 1024)  -- buffer 128k
    sock:settimeout(0)
    local content_length = nil
    content_length=tonumber(ngx.req.get_headers()['content-length'])  -- 获取请求包总长度
    local chunk_size = 4096
    if content_length  Since v0.10.13, when the limit is exceeded, it will return a second value
> which is the string "truncated".
#### 03 不设限的请求长度绕过
在进行body检查阶段，检测到post方法时会取请求的前4k数据进行检查，把恶意数据写入在4k之后便可以绕过waf
    -- waf.lua
    local chunk_size = 4096
    if content_length 
  * 
  * 
  * 
  * 
  * 
  * 
  * 
  * 
  * 
  * 