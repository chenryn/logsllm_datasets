[23], in fact, segment routing would provide faster recovery
compared to the current Internet, also achieving higher routing
ﬂexibility [19].
SR-MPLS [54] is MPLS-based segment routing in which a
sender speciﬁes the forwarding path by adding stacked MPLS
labels to the packet header. Thanks to the MPLS data plane—
enabling ﬂexible and efﬁcient network programming—and the
backward compatibility with existing MPLS-enabled networks,
SR-MPLS is being considered as one of the most viable
approaches. The segment-routing architecture has evolved to
also embrace the IPv6 data plane, called SRv6 (segment
routing for IPv6) [10]. With the introduction of the network
programming concept into SRv6, it mitigates the signiﬁcant
encapsulation overhead, a list of 128-bits IPv6 addresses.
Recently, segment-routing approaches have been presented as
promising technologies that would fuel 5G innovation [24],
[43]. In addition, the SCION future Internet architecture can
express segment routing semantics at inter-domain scale by
expressing paths at AS-level granularity [61], [44].
III. OVERVIEW
The goal of this paper is to build a lightweight architecture
that enables secure, scalable, and ﬁne-grained network slicing.
That is, each host expresses consent towards incoming trafﬁc
while the network only delivers authorized packets to their
respective destinations. In this section, we describe the desired
properties for our architecture, a high-level system model that
we consider to achieve the goal, and the assumptions.
A. Desired Properties
Scalability. The new architecture should allow a high degree of
expressiveness for the deﬁnition of virtual networks in multi-
tenancy environments, such that it achieves scalable network
virtualization.
Flexibility. Network administrators should be able to explicitly
regulate the communication policies without an ambiguity that
might lead to the failure of network isolation. In addition, the
virtual network should be easily updatable at any time.
Security. Our architecture must ensure that packets without
receivers’ consent do not reach their intended destinations, so
that the virtual network is completely isolated. In addition,
the sender should not be able to transfer the authorization to
another sender.
Practicality. We consider the practicality of our architecture
from the following two perspectives:
•
Performance Overhead: The additional
latency for
acquiring the receiver’s consent should be on the
order of a round-trip time (RTT) and degradation of
the packet-forwarding performance due to the veriﬁer
should be minimal.
3
Second, we separate the role of the AD and the veriﬁer. In
our model, an AD issues authorization proofs that the senders
embed into each packet. Then a veriﬁer ensures that packets
have valid proofs. We separate the two functionalities for two
reasons. 1) The performance requirement between the two
functionalities are vastly different since veriﬁers handle data
packets and need to process packets at a signiﬁcantly higher
rate. 2) Decoupling the functionality fosters deployability since
we can assign the roles to the most appropriate entity (i.e.,
incentive-compatible for each functionality). Note that we are
not the ﬁrst to consider this separation, which is also made by
capability-based systems [47], [38].
Third, we also split the role of an endhost and the SVTEP.
Similar to the existing network-virtualization schemes, an
SVTEP functions as the tunnel endpoint bridging two virtual
network segments to be logically connected. The SVTEP
acquires authorization proofs from the AD and performs en- or
de-capsulation for inbound or outbound packets, respectively.
In this design, unchanged endhosts are supported, which
improves deployability.
It is important to note that the separation of roles does not
mean that the functions cannot be collocated. For example,
although the receiver delegates the authorization process to
its AD, the receiver could still issue a path segment itself. In
addition, a large security service provider, such as Cloudﬂare,
can act as both an AD and a veriﬁer. However, the functional
separation means that our protocol should work even if the
functions are implemented by different network entities that
are not collocated. We discuss various deployment models and
their implications later in Section VIII.
C. Assumptions
Source Authentication. Our architecture requires packets
to be authenticated to their corresponding sender so that a
malicious sender cannot impersonate a legitimate sender to
acquire receiver’s consent and send packets pretending to be
the legitimate sender. There are well-established cryptographic
mechanisms [29], [32], [9] that can be used to authenticate
packets to their corresponding sender.
Secure Cryptography. We assume that cryptographic primi-
tives that we use are secure: signatures and message authenti-
cation codes (MACs) cannot be forged, and encryption cannot
be broken, as long as the cryptographic keys remain secret.
Time Synchronization. We also assume that entities in the
network (i.e., senders, veriﬁers, and ADs) are loosely time
synchronized within a few seconds by using a protocol such
as NTP. Time synchronization is used to enforce the time
constraints of a receiver’s consent, but does not affect to the
control plane in SVLAN.
IV. SVLAN ARCHITECTURE
We now describe the details of our architecture.
A. Path Segment as Receiver’s Consent
Receiver’s consent is an integral part of our architecture,
achieving dynamic network virtualization based on each re-
ceiver’s needs. With the concept of segment routing, we utilize
the path segment as the receiver’s consent towards incoming
Fig. 2: High-level overview of SVLAN.
•
Deployability: We must ensure that entities that would
deploy the two functionalities (i.e., authorization del-
egate and veriﬁer) should be incentive-compatible.
In addition, compatibility with the existing network-
virtualization protocols and devices needs to be en-
sured.
B. System Model
Figure 2 depicts a high-level overview of our architecture,
which consists of three functional entities in addition to the
sender and the receiver: 1) an authorization delegate (AD) of
the receiver that authorizes communication from the sender to
the receiver, 2) a veriﬁer that ensures the sender has acquired
consent from the receiver, and 3) stateless virtual tunnel
endpoints (SVTEPs) that bridge trafﬁc between SVLAN
segments.
SVLAN communication proceeds in four steps:
1)
2)
3)
4)
The receiver (or network administrator) uploads its
receiving policy to the AD, which represents a virtual
network conﬁguration that speciﬁes who can send
packets to the receiver.
In preparation for a data transmission, the sender’s
SVTEP acquires the consent of the receiver by re-
questing an authorization proof from the receiver’s
AD. The AD evaluates the receiver’s policy and
issues an authorization proof as a proof of consent.
The sender’s SVTEP sends a packet to the receiver.
In this packet, the sender includes the authorization
proof that represents the receiver’s consent.
The veriﬁer ensures that the packet is valid by verify-
ing the validity of the proof, and forwards the packet
only if the packet is valid.
Separation of Roles. A central property of SVLAN’s design
is its separation of the various roles. There are three important
aspects to our model:
First, the process of providing consent (i.e., authorizing
a sender) is split between two entities: the receiver and its
AD. The receiver generates the receiving policies; however,
the AD—not the receiver—grants consent, i.e., provides autho-
rization proofs, based on the receiver’s policy. The separation
increases resilience against DoC attacks by allowing receivers
to choose well-provisioned ADs.
4
In the state-centric approach, we can place all necessary
information onto the veriﬁcation instructions that
the AD
provides to the veriﬁer. Speciﬁcally,
the AD generates a
separate veriﬁcation instruction for each sender (or for each
ﬂow) and sends the instructions to the veriﬁer. The veriﬁer
stores all received instructions in its forwarding table; then for
each incoming packet, it ﬁnds a matching instruction using the
packet content (e.g., network and transport headers) and only
forwards packets if it can ﬁnd a matching instruction. This
approach is similar to software-deﬁned networks (SDN), such
as the OpenFlow protocol: the AD can be compared to the
centralized controller in SDN; veriﬁcation instructions to the
forwarding instructions; and the veriﬁer to the SDN switch.
This approach reduces bandwidth overhead since we do
not add any additional
information—authorization proof—
to data packets. However, it increases state overhead at the
veriﬁer, since the veriﬁer needs to store per-sender or per-ﬂow
instructions.
In the asymmetric-centric approach, we can place autho-
rization proofs in the packets. Speciﬁcally, we can deﬁne a
certiﬁcate for the AD and use digital signatures using the
corresponding private key to create the authorization proofs.
For example, to create a per-sender authorization proof, we
use a digital signature over the address of the sender. When
the veriﬁer receives a packet, it ensures that the authorization
proof is valid by verifying the digital signature in the proof.
This design avoids the state overhead at the veriﬁer, since
the veriﬁer does not need to maintain per-sender or per-
ﬂow forwarding instructions. However, this approach requires
asymmetric cryptography, which is computationally expensive.
Speciﬁcally, the AD needs to generate signatures when creating
authorization proofs, and the veriﬁer needs to verify signatures
when authorizing packets. Furthermore, the high computa-
tional overhead introduces the signature-ﬂooding vulnerability.
Segment with Authorization Proof. We combine the two
strawman approaches to beneﬁt from both. Speciﬁcally, our
design avoids a large amount of state found in the ﬁrst ap-
proach and, at the same time, avoids asymmetric cryptography
required for the second approach.
We design the proof based on message authentication codes
(MACs) using a shared key k between the AD and the veriﬁer
as shown in Equation (1). Namely, the proof is the MAC with
the path segment, the address of the sender, the expiration time
of the proof and the number of proofs as its input:
Proof (k, Seg S→R, Addr S, ExpTime, N ) =
MACk (Seg S→R | Addr S | ExpTime | N )
(1)
This avoids the disadvantages of the strawman approaches
and satisﬁes the requirements. Since modern hardware can
compute symmetric cryptography efﬁciently, our design en-
ables efﬁcient processing on the AD and the veriﬁer. Further-
more, our design requires only per-AD state on the veriﬁer to
store the symmetric keys shared with the ADs. That is, the
AD does not need to create per-sender or per-ﬂow forwarding
instructions for the veriﬁer, and the veriﬁer does not need to
store these instructions. Lastly, our design prevents a sender
from sharing the path segments, since the segment (Seg S→R)
Fig. 3: Only authorized senders can retrieve valid path seg-
ments and forward packets to the receiver.
trafﬁc; only authorized senders are able to acquire the path
segments that steer packets to the destination, so that only
members in the same virtual network can communicate, as
Figure 3 shows. We extend the concept of path segment as
receiver’s consent even further to be more secure, by providing
segments with authorization proofs that indicate the validity of
the segments.
Requirements. We now identify the requirements for design-
ing the authorization based on the desired properties.
•
•
•
•
Ensure that a segment is only valid for authorized
senders. That is, a segment cannot be transferred to
or shared with any other sender.
Ensure that the bandwidth overhead due to segments
and authorization proofs in the packets remains small.
ADs must be able to compute and disseminate the
valid path segments efﬁciently.
Veriﬁers must be able to verify the path segments
efﬁciently to ensure that there is no signiﬁcant increase
of the processing delay. To this end, we should not
require large amounts of state, e.g., per-host state,
on veriﬁers. In addition, packet veriﬁcation should
not require additional communication overhead (e.g.,
a challenge–response protocol [2], [39]) for checking
the validity of the segments.
Strawman Approaches. The process of authorizing packets
is based on two pieces of information that the AD provides to
the veriﬁer and the SVTEP. The ﬁrst piece of information is
provided to the veriﬁer as a veriﬁcation instruction to evaluate
if an incoming packet has been authorized by its receiver.
The second piece of information is provided to the sender-side
SVTEP as the authorization proof, which the SVTEP includes
in every packet and the veriﬁer uses to verify receiver consent.
There are various ways to design the authorization process
based on the amount of information placed on the above-
mentioned two pieces of information. We ﬁrst present two
strawman approaches (state centric and asymmetric centric)
that place all necessary information in one of the two pieces.
Then, we present our design, which represents a middle ground
and combines the advantages of the two approaches.
5
and sender’s address (Addr S) are inputs to compute the proof
and the shared key is known only to the AD and the veriﬁer.
Similar to the SDN controller in [48], the AD generates
and distributes the shared keys with the veriﬁers; the key
sharing can be done over the secure communication channel.
The centralized key distribution simpliﬁes key management,
and thus sophisticated key-establishment protocols are not
required.
B. Protocol
This section describes the three protocols (Figure 2) in
SVLAN: getSegment(), send() and verify().
getSegment(). The sender, S, must obtain the consent of
a receiver, R, to send a packet to the receiver. To this end, the
sender-side tunnel endpoint (SVTEPS) asks for path segments
including authorization proof from the receiver’s AD. The AD
creates an authorization proof for the sender after it veriﬁes
the sender’s authorization using the receiver’s receiving policy.
Speciﬁcally, the protocol proceeds as follows:
1)
S requests an authorization proof to A (R’s AD):
S → A : Addr S | Addr R
2) A checks R’s receiving policy and issues segments
with proof:
A → S : Seg S→R | Addr A | ExpTime | N |
Proof 1≤i≤N (ki, Seg Vi→R, Addr S, ExpTime, N )
On the request message (1), the sender provides the address
(Addr S) from which it would use to send a packet to the