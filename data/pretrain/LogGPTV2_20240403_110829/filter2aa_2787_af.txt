    __int64 v49; // rsi
    unsigned int v50; // eax
    unsigned int v51; // edi
    __int64 v52; // r8
    unsigned __int64 v53; // rax
    unsigned int v54; // edi
    unsigned int v56; // [rsp+28h] [rbp-50h]
    __int64 v57; // [rsp+30h] [rbp-48h]
    v5 = a1;
    LOWORD(v6) = _byteswap_ushort(*a1);
    v7 = v6;
    LOWORD(v8) = _byteswap_ushort(v5[1]);
    v9 = v8;
    LOWORD(v10) = _byteswap_ushort(v5[2]);
    v11 = v10;
    v12 = _byteswap_ushort(v5[3]);
    v0 = *a3;
    v1 = a3[1];
    v15 = 0x104D9AF0;
    v16 = 0x4E43E792i64;
    v17 = 0x9C87CF24;
    v18 = 0i64;
    v57 = a2;
    while (1)
    {
        v22 = *(unsigned __int16*)(a2 + v18);
        v23 = v22 * (unsigned __int16)v7;
        if (!(_DWORD)v23)
            break;
        v24 = (((unsigned int)((v23 | (unsigned __int64)(v23 > 16) - 
(unsigned int)v23) >> 16) + 1;
        v25 = *(unsigned __int16*)(a2 + v18 + 2);
        if ((_DWORD)v18 == 96)
            goto LABEL_16;
    LABEL_7:
        v26 = v9 + v25;
        LOWORD(v11) = *(_WORD*)(a2 + v18 + 4) + v11;
        v27 = v12 * *(unsigned __int16*)(a2 + v18 + 6);
        if (v27)
            v28 = ((unsigned int)(__ROL4__(v27, 16) - v27) >> 16) + 1;
        else
            LOWORD(v28) = 1 - v12 - *(_WORD*)(a2 + v18 + 6);
        v29 = v1 - ((v0 + ((v0 >> 5) ^ (16 * v0))) ^ (v15 + *(_DWORD*)(a2 + 
2i64 * ((v15 >> 10) & 6))));
        v30 = *(unsigned __int16*)(a2 + v18 + 8);
        v31 = v30 * (unsigned __int16)(v24 ^ v11);
        v56 = v15;
        if ((_DWORD)v31)
            v32 = (((unsigned int)((v31 | (unsigned __int64)(v31 > 
16) - (unsigned int)v31) >> 16) + 1;
        else
            v32 = 1 - (unsigned __int16)(v24 ^ v11) - v30;
        v33 = v17;
        v34 = *(_DWORD*)(v57 + 2i64 * (v17 & 4));
        v35 = v16;
        v36 = v29;
        v37 = (v16 + v34) ^ (v29 + ((v29 >> 5) ^ (16 * v29)));
        v38 = (unsigned __int16)v32 + (unsigned __int16)(v28 ^ v26);
        v39 = *(unsigned __int16*)(v57 + v18 + 10);
        v40 = v39 * (unsigned __int16)v38;
        if ((_DWORD)v40)
            v41 = (((unsigned int)((v40 | (unsigned __int64)(v40 > 
16) - (unsigned int)v40) >> 16) + 1;
        else
            v41 = 1 - v38 - v39;
        v19 = v35;
        v1 = v36;
        v20 = v33;
        a2 = v57;
        v15 = v56 + 0x3DF64CA2;
        v0 -= v37;
        v21 = v32 + v41;
        v7 = v41 ^ v24; // here
        v12 = v21 ^ v28; // v12 changes
        v9 = v41 ^ v11; // v9 changes
        v18 += 12i64;
        v16 = (unsigned int)(v19 + 0x3DF64CA2);
        v17 = v20 + 0x7BEC9944;
        v11 = v21 ^ v26; // v11 changes
    }
    v24 = 1 - v7 - v22;
    v25 = *(unsigned __int16*)(a2 + v18 + 2);
    if ((_DWORD)v18 != 96)
        goto LABEL_7;
LABEL_16:
    v42 = (unsigned __int16)v11 + v25;
    v43 = v12 * *(unsigned __int16*)(a2 + 102);
    v44 = v1;
    if (v43)
        v45 = ((unsigned int)(__ROL4__(v43, 16) - v43) >> 16) + 1;
    else
        LOWORD(v45) = 1 - v12 - *(_WORD*)(a2 + 102);
    v46 = _byteswap_ulong((unsigned __int16)v24) >> 16;
    v47 = (v42 > 8);
    v50 = _byteswap_ulong((unsigned __int16)(*(_WORD*)(a2 + 100) + v9));
    v51 = v50;
    v53 = ((v49 > 16;
    v54 = v48 | v53 ^ v44;
    dec[0] = v0;
    dec[1] = v1;
    return (int)v54;
}
int main() {
    unsigned char flag[] = "flag{1111111111111111111111111}";
    uint32 dec[2*4+1] = { 0 };
    for (int i = 0; i > 9;
cursrc = (char *)src;
for i in range(total_time):
  key2 = -1
  for j in range(0x200):
    key1 = j & 0x1F;
    c = cursrc[j] ^ key2 ^ dst[key1];
    key2 = cursrc[j];
    cursrc[j] = c - key1;
  cursrc += 512;
eNj0y_web
0x200 28020c212141d70021 (!!A!
0x400 6b2122200320223602 k!"  "6
0x600 0274215a2003280278 t!Z (x
0x800 2104200320046b2105 !  k!
0xa00 290308211f201fa721 )! !
0xc00 808000211d2005201d !  
0xe00 222021212320222124 " !!# "!$
0x1000 602167206620674a21 `!g f gJ!
0x1200 020c21a30120072802 ! (
0x1400 21dc01200720dc0136 !  6
0x1600 072005200036022c20   6, 
0x1800 80001a200528020821  (!
0x1a00 410021042003200036 A!  6
0x1c00 41012123202220236a A!# " #j
0x1e00 021821072007210820 !  
0x2000 25712126201f212702 %q!& !'
:00 0e200e200d3a00000c   
0x2400200a0d000c010b2003wwww
Key
keyemB
0x2400 200a0d000c010b2003  
0x2600 0220216a2122202221  !j!" "!
0x2800 02280248215c200228 (H!\ (
0x2a00 0020022802d8082194  (!
0x2c00 0220bf016a21c00120  j! 
0x2e00 410372360204200420 Ar6  
0x3000 6a2106200828021022 j!("
0x3200 787120036b22022006 xq k" 
0x3400 8d80800021040c010b !
  kAd00200720026b4100 
0x3800 0041002802c08d8080 A(
0x3a00 808000410041002802 AA(
0x3c00 20006a210020052007  j!  
0x3e00 200241486a22082000  AHj 
0x4000 200041027441888c80  AtA
 4200 2802102200450d0020 ("E
0x4400 210320004101742100 ! At!
0x4600 0b0a002000109a8080 
0x4800 021020022005360218   6
0x4a00 200536020c0c010b02  6
0x4c00 220520054180800f6a " Aj
0x4e00 006a2203417f6a2001 j"A•j 
0x5000 3f0a00696e70757420 ?
input
eNj0y_weba5SemB9Q\xaf\x8f\xf4
0x0 0061736d0100000001320960017f00 asm2 `•
0x200 28020c212141d7002122202120226c (!!A!" ! "l
0x400 6b2122200320223602742003201f36 k!"  "6t  6
0x600 0274215a2003280278215b2059205a t!Z (x![ Y Z
0x800 2104200320046b2105200524808080 !  k! $
0xa00 290308211f201fa7212020200f0b98 )! !   
0xc00 808000211d2005201d360200200528 !  6 (
0xe00 222021212320222124202320244921 " !!# "!$ # $I!
0x1000 602167206620674a21684101216920 `!g f gJ!hA!i 
0x1200 020c21a301200728022c21a4012007 ! (,! 
0x1400 21dc01200720dc0136020c0c020b20 !  6 
0x1600 072005200036022c20052001360228   6,  6(
0x1800 80001a20052802082147200528021c  (!G (
0x1a00 410021042003200036020820032802 A!  6 (
0x4e00006a2203417f6a20013a0000200241ww
key
wasm
retﬂagﬂag
0x1c00 41012123202220236a212420052024 A!# " #j!$  $
0x1e00 021821072007210820062109200820 !  !   
x2000 25712126201f212702402026450d00 %q!& !'@ &E
:A!00e200d3a00000c010b4100210f   
0x2400 200a0d000c010b200328020c210b20  
 (! 
0x2600 0220216a2122202221234103212441  !j!" "!#A!$A
0x2800 02280248215c2002280218215d205c (H!\ (!] \
0x2a00 0020022802d80821940120022802d4  (! (
0x2c00 0220bf016a21c00120c00124808080  j! $
0x2e00 410372360204200420064103742206 Ar6  At"
 00 6a2106200828021022000d000b200b j!("
0x3200 787120036b22022006492105024020 xq k" I!@ 
0x3400 8d80800021040c010b4100427f3702 !AB•7
  kA(720026b41002802b88d8080 
0x3800 0041002802c08d8080003602f48980 A(6
0x3a00 808000410041002802e08980800020 AA( 
0x3c00 20006a2100200520076a21050b2005  j!  j! 
0x3e00 200241486a220820006b2200410172  AHj k"Ar
0x4000 200041027441888c8080006a210602  AtAj!
  6802102200450d0020052000360210 ("E
0x4400 210320004101742100200420034104 ! At!  A
0x4600 0b0a002000109a808080000bf40e01 
0x4800 0210200220053602180b2001280214   6 (
0x4a00 200536020c0c010b0240200341146a  6@ Aj
0x4c00 220520054180800f6a411076410271 " AjAvAq
0x4e00 006a2203417f6a20013a0000200241 j"A•j : A
0x5000 3f0a00696e707574206e6577207061 ?
input new pa
eNj0y_weba5SemB1Y.lstrip("web")!
ﬂash-1
void __cdecl sub_8000081C(int a1, int a2, int a3, int a4)
{
  __int16 v4; // $a0
  __int16 v5; // $a0
  __int16 v6; // $a0
  __int16 v7; // $a0
  __int16 v8; // $a0
  __int16 v9[3]; // [sp+10h] [+10h]
  __int16 v10; // [sp+16h] [+16h]
  int v11; // [sp+18h] [+18h]
  int v12; // [sp+20h] [+20h]
  unsigned __int16 v13; // [sp+28h] [+28h]
  unsigned __int16 v14; // [sp+2Ch] [+2Ch]
  unsigned __int16 v15; // [sp+32h] [+32h]
  __int16 v16; // [sp+36h] [+36h]
  __int16 v17; // [sp+3Ah] [+3Ah]
  *(_DWORD *)v9 = 0;
  while ( 1 )
  {
    if ( *(_DWORD *)v9 )
      break;
    *(_DWORD *)&v9[1] = *(unsigned __int16 *)instructions;
    instructions = (int *)((char *)instructions + 2);
    if ( (unsigned __int16)v9[2] < 0xEu )
    {
      switch ( v9[2] )
      {
        case 0:
          v17 = pop_magic();
          v4 = v17 + pop_magic();
          push_magic(v4);
          break;
        case 1:
          v16 = pop_magic();
          v5 = v16 - pop_magic();
          push_magic(v5);
          break;
        case 2:
          v15 = pop_magic();
          dword_80003D28 = v15 * (unsigned __int16)pop_magic();
          break;
        case 3:
          v6 = dword_80003D28 % (unsigned int)(unsigned __int16)pop_magic();
          push_magic(v6);
          break;
        case 4:
          v14 = pop_magic();
          v7 = v14 < (unsigned int)(unsigned __int16)pop_magic();
          push_magic(v7);
          break;
        case 5:
          v13 = pop_magic();
          v8 = v13 == (unsigned __int16)pop_magic();
          push_magic(v8);
          break;
        case 6:
          v12 = *(__int16 *)instructions;
          instructions = (int *)((char *)instructions + 2);
          __asm
          {
            mtc0    $zero, Count # Timer Count
            mtc0    $zero, Count # Timer Count
          }
          if ( pop_magic() )
          {
            instructions = (int *)((char *)instructions + 2 * (v12 / 2));
            }
          break;
        case 7:
          v11 = *(__int16 *)instructions;
          instructions = (int *)((char *)instructions + 2);
          __asm
          {
            mtc0    $zero, Count # Timer Count
            mtc0    $zero, Count # Timer Count
          }
          if ( !pop_magic() )
          {
            instructions = (int *)((char *)instructions + 2 * (v11 / 2));
            }
          break;
        case 8:
          push_magic(*(_WORD *)input);
          input += 2;
          break;
        case 9:
          v10 = *(_WORD *)instructions;
          instructions = (int *)((char *)instructions + 2);
          push_magic(v10);
          break;
        case 0xA:
          push_magic(inputlen);
          break;
        case 0xB:
          inputlen = pop_magic();