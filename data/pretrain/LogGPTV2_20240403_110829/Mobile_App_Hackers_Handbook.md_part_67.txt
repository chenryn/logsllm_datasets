this and related APIs are not stored to a log anywhere analogously to Android’s logcat, for example. If the app is
not being debugged (that is, via Visual Studio), the logging calls essentially have no effect.
Some apps, however, may log to their Local directory, either via hand-rolled logging code, or via a known
framework.
A logging solution is available on MSDN at https://code.msdn.microsoft .com/windowsapps/A-logging-
solution-for-c407d880.
Two other free application logging frameworks are WPClogger (http://wpclogger .codeplex.com/) and Splunk
MINT Express (https://mint.splunk.com/).
When auditing applications, testers should examine calls to logging-style APIs and ensure that they are not
logging anything potentially sensitive to the filesystem, such as passwords and other credentials.
Identifying Insecure Data Storage
Secure data storage on mobile devices is one of the most important aspects of mobile application security. A
large number of applications for all mobile platforms need to store data, which is often sensitive, and should not
be easily handed over to a would-be attacker. Even so, developers still store data in unencrypted forms in
databases, flat files, and other file storage formats.
Such insecure data storage is particularly concerning in the context of a sensitive mobile application, such as
one used for banking or one that deals with sensitive documents, and even more so given that data at rest on a
Windows Phone device’s filesystem is by default unencrypted, unless the device is enterprise-linked to an
ActiveSync server with the RequireDeviceEncryption setting enabled.
This section discusses how you can identify instances of data storage by an application where data is being
stored in plaintext format and is not being protected using cryptographic methods.
The standard interface for encrypting arbitrary data blobs on the Windows platforms is DPAPI, the Data
Protection API. However, even this mechanism has its weaknesses, particularly in the context of Windows
Phone devices. However, we’ll cover weaknesses in using DPAPI for data security in “Insecure Cryptography and
Password Use—Data Protection API Misuse on Windows Phone”.
Unencrypted File Storage
Many apps store data to files in their filesystem sandbox for later use. The reasons for storing data vary widely,
because Windows Phone apps serve a multitude of purposes.
Some apps that need to store data for later consumption deal with sensitive information, such as personally
identifiable information (PII). Naturally, such data needs to be protected from prying eyes to prevent
information disclosure; for example, in the event of a lost and stolen device. This protection is particularly
needed for Windows Phone 8.x devices, which only have device encryption when they are enterprise-joined
(despite having a screen unlock password).
Even so, it’s still a common occurrence for Windows Phone apps to store data, often sensitive, in plaintext on
the filesystem.
Although many mobile applications don’t actually deal with particularly sensitive information, many do; in fact,
the range of applications now available for all the popular mobile computing platforms is quite large; for
example, you can find apps for banking, betting, social networking, human resources management, document
processing, emailing, and otherwise electronically communicating, just to name a few.
A sample scenario could involve an HR management application. All things considered, it’s true to say that HR
software generally deals with information that is quite sensitive, spanning categories such as employee
information, client information, payroll data, and even health-related information pertaining to particular
people. These categories are all data that no Chief Information Security Officer (CISO) would like to see make it
into the wrong hands.
Suppose that a hypothetical HR app downloads a CSV file. This file is essentially a people directory for a
company. The file contains full names, job titles, contact details, dates of births, and salary information for use
by the app in carrying out its HR operative functions.
Every time the hypothetical application connects to the backend API and authenticates, it downloads the people
directory CSV and saves it to the app’s Local folder. This is commonly done using HttpClient, WebClient, or
another web-related API.
Using the HttpClient class, the application could download a file and save it to its local storage using the
IsolatedStorageFile and IsolatedStorageFileStream APIs, via code such as the following:
try
{
var httpClient = new HttpClient();
var response = await httpClient.GetAsync(new
Uri("https://mobile.mycompany.com "),
HttpCompletionOption.ResponseHeadersRead);
response.EnsureSuccessStatusCode();
using(var isolatedStorageFile =
IsolatedStorageFile.GetUserStoreForApplication())
{
bool checkQuotaIncrease = IncreaseIsolatedStorageSpace(e.Result.Length);
string csvFile = "employee_info.csv";
using(var isolatedStorageFileStream =
new IsolatedStorageFileStream(csvFile,
FileMode.Create, isolatedStorageFile))
{
using(var stm = await response.Content.ReadAsStreamAsync())
{
stm.CopyTo(isolatedStorageFileStream);
}
}
}
}
catch(Exception)
{
// failed to download and store file..
}
At this point, assuming the download and file I/O operations went as expected, the CSV file in question would
reside in the app’s Local folder under the name employee_info.csv. It would be ready for processing and use in
the app’s normal functionality.
Notice that after the CSV data is downloaded; no cryptography is carried out on the file before it is saved to disk.
Unfortunately, storing a sensitive file is where many apps stop, leaving the file on the filesystem in its
unencrypted form; many apps make no effort to apply any encryption on their sensitive files at all.
It may be that many unsuspecting mobile developers assume that because files are in the app’s sandbox, they
are generally safe from theft in their unencrypted form. Furthermore, there seems to be the expectation that
most devices are surely encrypted in some standard, secure way to provide privacy if a device is lost or stolen.
Such assumptions may be correct in that, normally, third-party apps on a device are not supposed to be able to
reach into other apps’ sandboxes and steal files.
However, as previously mentioned, Windows Phone devices that are not enterprise-enrolled do not have device
encryption enabled, and all data on the eMMC (flash storage module) could be extracted without difficulty from
a lost or stolen device.
Furthermore, even if a Windows Phone device is encrypted, when the device is powered on, the filesystem is not
“at rest”, and as such, successful attacks on the device would enable files to be extracted from the filesystem of
the switched-on device. It’s therefore vigilant from a security perspective that sensitive data stored by an app is
stored in encrypted form, with proper key management practices in place, and data security should never rely on
device encryption (BitLocker), which may or may not be enabled in the first place.
Using a capability-unlocked device with filesystem access, you can browse each app’s directory structure in
search of interesting files that have been stored in their plaintext form. Files are most likely to be found in the
app’s Local folder, or a subdirectory thereof, under C:\Data\Users\DefApps\APPDATA\{GUID}\Local, where
{GUID} is the app’s identifier.
If you review an application that stores sensitive data to the filesystem without applying strong, industry-
standard cryptography (coupled with secure key management), it’s fair to say that this kind of storage method
represents a security risk, which should ultimately be considered a bug. The risk is particularly ever-present for
devices that do not have device encryption enabled, which at the time of writing is all devices that are not
enterprise enrolled. For an attacker with physical access to an unencrypted device, accessing the sensitive data
would be as easy as removing the eMMC from the device, mounting it, and then browsing the filesystem.
Other attacks such as privilege escalation, sandbox breaches, and remote attacks (think drive-by browser
attacks) essentially render device encryption irrelevant, because data is not at rest; hence in all cases, it should
be considered that sensitive data should always be encrypted by the app itself that is storing it.
Insecure Database Storage
In regard to data that is best stored in a much more relational and structured way, a database is a common
solution for all kinds of apps. Windows Phone apps are no exception.
Of course, at least in the context of Windows Phone, most databases are in reality stored to the device as files.
We discuss this as an implementation issue on its own instead of in the previous section, because databases
encompass a group of storage technologies in their own right.
Two families of databases find common usage in Windows Phone apps: local databases, which are Windows
Phone’s standard native databases, and SQLite databases.
In apps that use either of these two database types (or both), sometimes encryption is applied to the database,
and sometimes it is not. Even when cryptography is used in an effort to keep databases safe, developers make
some common mistakes that only superficially protect data, leaving it only slightly more secure than if it were
stored in plaintext—think insecure key management (including hard-coded keys).
We’ll discuss each of the two database families and how to spot when insecure database storage has been
implemented, including some instances in which cryptography has been employed.
Local Databases
Windows Phone provides standard interfaces to create, manipulate, and access databases that are known as
“local databases”. Developers do not drive these databases via SQL queries directly, but instead by Language
Integrated Query (LINQ), which is a .NET component that adds data querying capabilities to the .NET
languages.
Under the hood, local databases are still SQL based, but Windows Phone does not expose interfaces for talking
to databases using raw queries. Instead, a LINQ-to-SQL layer converts LINQ queries on databases into SQL
queries, and the database is driven in this way, with the LINQ-to-SQL layer acting as a translation interface or
proxy. In fact, no public APIs exist for making SQL queries on databases.
The entire LINQ-to-SQL architecture is quite different from what developers brought up on SQL are used to, but
the LINQ-to-SQL paradigm is object oriented and provides powerful methods for accessing and manipulating
data when you understand some core concepts and patterns.
For a general introduction on Windows Phone local databases, LINQ-to-SQL, and its architecture, study the
MSN article located at http://msdn.microsoft.com/en-
us/library/windows/apps/hh202860(v=vs.105).aspx#BKMK_UsingtheDatabase; a full introduction to local
databases/LINQ-to-SQL is beyond the scope of this chapter. We do, however, cover some basics of Windows
Phone local databases here so that you will be able to identify instances of insecure data storage when databases
are being used.
Use of a local database in a Windows Phone app begins with the definition of a data context. You do this
programmatically by defining a class that extends the DataContext class. You then define additional classes to
specify the table and column structure of the database, using the [Table] and [Column] attributes appropriately.
For example, an HR application could define a database to hold information on the company’s employees, using
code such as the following:
public class EmployeeDataContext : DataContext
{
public TaskDataContext(string connectionString)
: base(connectionString)
{
}
public Table Employees;
}
[Table]
public class Employee
{
[Column(IsPrimaryKey = true, IsDbGenerated = true, DbType =
"INT NOT NULL Identity", CanBeNull = false, AutoSync = AutoSync.OnInsert)]
public string PersonName { get; set; }
[Column]
public string JobTitle { get; set; }
[Column]
public string PhoneNumber { get; set; }
[Column]
public string EmailAddress { get; set; }
[Column]
public string HomeAddress { get; set; }
[Column]
public DateTime EmploymentStartDate { get; set; }
}
The preceding EmployeeDataContext class definition declares that the database should have one table, which is
structurally defined by the Employees class, defined below it. The Employees class, marked as a table definition
by the [Table] attribute, essentially defines a table that has columns for an employee’s full name, job title,
phone number, email address, home address, and employment start date. All of these are aptly marked using the
[Column] attribute, and their full name is marked as being a primary key for insertions and queries.
Notice the EmployeeDataContext class’s constructor definition:
public TaskDataContext(string connectionString)
: base(connectionString)
{
}
Interpreting the TaskDataContext constructor above, whenever an instance of the TaskDataContext class is
instantiated, TaskDataContext’s constructor immediately passes its string argument to the constructor its base
class, DataContext. This string, incidentally, is the database’s connection string; this must be passed to the base
class (DataContext) to successfully connect to the database (or to create the database, if the database is being
used for the first time).
So, for example, when a developer wishes to use their database, or create a database representable by the
EmployeeDataContext for the first time, they could use code similar to the following:
EmployeeDataContext db = new EmployeeDataContext("isostore:/EmployeeDB.sdf");
If(db.DatabaseExists() == false) {
Db.CreateDatabase();
}
The preceding code attempts to connect to the database named EmployeeDB .sdf (which will be in the app’s
Local folder), and if the database does not already exist, it will create it.
The string passed to EmployeeDataContext, that is, isostore:/EmployeeDB.sdf, is the database’s connection
string, which the class will pass on to DataContext upon new EmployeeDataContext object instantiation.
However, note in the preceding example code where the connection string passed to the data context class was
isostore:/EmployeeDB.sdf, that no password is specified in the connection string. Thus the created database
would be completely unencrypted, unless the application itself manually encrypts data before its submission to
the database. If sensitive data is being stored in a local database that is created without a password in its
connection string, then this in itself constitutes a security issue.
The local database API supports passwords being used in connection strings. Use of a password in the
connection string during database creation results in the database’s contents being AES-128 encrypted, with the
key being generated by SHA-256 hashing the given password. An encrypted employee database could be created
using a data context definition as follows, with the password being MySecretDbPassword.
EmployeeDataContext db = new EmployeeDataContext("Data
Source='isostore:/EmployeeDB.sdf';Password='MySecretDbPassword'");
if(db.DatabaseExists() == false) {
db.CreateDatabase();
}
Although the database will indeed be AES-128 encrypted in the preceding case, the password being used is hard-
coded into the connection string. This in itself also represents a security risk, because all users of the app will
have a database encrypted with exactly the same key. This offers little more protection than having no
cryptography applied to the database at all, because any attacker able to reverse-engineer the app will glean
knowledge of the hard-coded password that is used in all cases. Unfortunately, hard-coded keys and passwords
are quite common in mobile apps for all platforms, in addition to those for Windows Phone.
Even if a database password is not hard-coded, but is instead derived from system constants such as the
DeviceUniqueId, you should again consider it a security issue if the stored data is sensitive, because the
password may be easily derived by an attacker.
Database passwords should not be hard-coded, and should not be derivable from system data from the device
(such as from a MAC address, or from DeviceUniqueId, for example). Instead, they should be derived from a
secret phrase known only by the user, such as using PBKDF2 (Password-Based Key Derivation Function, 2).
Local databases are stored in an app’s Local folder, and often have the .sdf file extension, so checking for
unencrypted databases manually is easy to do using full filesystem access that has been gleaned via capability
unlocking.
SQLite-Based Databases
The standard SQLite distribution for Windows Phone does not support cryptography out of the box, so sensitive
data being stored in a SQLite database created and managed by the standard package is likely to represent a
security risk.
However, two fairly well-used SQLite packages do support cryptography; namely, SQLCipher and the SQLite
Encryption Extension (SEE). Both of these packages require licenses to use and are not freeware. SEE supports
AES-128, AES-256, and RC4, whereas SQLCipher solely uses AES-256.
To create a database (and subsequently use it thereafter) with encryption using SQLCipher, developers must use
the SetPassword() method on their SQLiteConnection object, like so:
string connectionString = "Data
Source=sqlcipher.db;Pooling=false;Synchronous=Full;";
string password = "password123";
using(var conn = new SQLiteConnection(connectionString)) {
conn.SetPassword(password);
conn.Open();
[ ... ]
When using SEE (SQLite Encryption Extension), applications specify a key using the PRAGMA statement after
instantiating their SQLiteConnection object, as in:
string connectionString = "Data
Source=sqlcipher.db;Pooling=false;Synchronous=Full;";
string password = "password123";
using(var conn = new SQLiteConnection(connectionString)) {
conn.Execute(String.Format("PRAGMA key='{0}';", password);
[ ... ]
In both use cases (SEE and SQLCipher), if an application uses a static hard-coded password for a sensitive
database, or the password is somehow derived from non-secret data (such as DeviceUniqueId), this should be
considered a security issue. Of course, you should also consider sensitive data being stored without a password a
bug.
SQLite databases are generally stored in the app’s Local folder and tend to have the .db file extension. You can
check databases extracted from a device for cryptography using the sqlite3 application, using a hex editor, or by
analyzing the output of the strings mydatabase.db.
Insecure Random Number Generation
Using cryptographically random data is important in security-critical applications, so that data derived from the
entropy source can be relied on in security-sensitive situations.
One particular situation when secure generation of random data is important is in generation of cryptography
keys. The reason why, of course, is quite obvious: If cryptography keys are predictable to an attacker, the key
may be discovered, and the data protected by the key may be decrypted.
Windows Phone exposes two main APIs that may be used for generating random data: System.Random and
RNGCryptoServiceProvider. System.Random should not be used for generating cryptography keys, passwords, or
other similar security-sensitive values that need to be cryptographically random. In short, consider the use of
the System.Random API in these contexts (such as for cryptography key generation) a security vulnerability. We
discuss why in the coming subsections.
System.Random’s Predictability
System.Random is provided by the .NET Framework to generate pseudo-random data that is admittedly not