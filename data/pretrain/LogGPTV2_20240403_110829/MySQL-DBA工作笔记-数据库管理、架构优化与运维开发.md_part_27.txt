table
Field
VIRTUAI
1(data->"s.location")
NOT NULL AUTO_INCREMENT,
`json_test`
partitions
int(11)
Type
（user_name）
ref
type
Nul1
idx_username
possible_keys
图4-20
图4-19
idx_username(user_name);
MUL
PRI
Key
，可以清晰地看到是有一个辅助索引。
Default|Extra
| idx_username|387
key
VIRTUAL GENERATED
auto_increment
key_len
第4章SQL开发规范和基础|145
const
|ref
""jianrong"';
'jianrong';
rows|filtere
100.
---
## Page 168
146丨MySQLDBA工作笔记：数据库管理、架构优化与运维开发
我们可能常用的是这条语句：
4.3.1
语法的含义更广一些，比如增，创建表我们也算增的范畴；改，修改字段也算是改的范畴。
会标记下来，回头来看，
4.3
适用，许多数据库也在标准之上定制了自己的一些特有语法，下一节我们就来扒一扒。
是普通话，类似于通用的 SQL 标准，但是普通话之外还有粤语等方言，可以在特定的区域内
所以 MySQL 实现算是一种辅助。
要考虑通过空间换时间的思路来改进。毕竟JSON 是半结构化数据,不是关系型锁擅长的，
我们可以化繁为简，把所有的 SQL 都按照增、删、改、查这4个维度来对待，只是有些
学习完数据类型之后，我们需要熟悉一下 MySQL 特有的 SQL，
Create table test as select *from testl limit 0;
如果要复制表结构信息，
新增类我们涵盖 create、insert、alter、新增文件等 4 类。
接下来我们会按增、删、改、查这4个维度来梳理一下特有的 SQL。
关于SQL，有一张概览图，如下图4-21所示。
关于 SQL，我们总是会有无穷无尽相关的话题，有时候碰到了一些不错的 SQL 功能
1. create 语句
MySQL特有的SQL
新增类
恢复库
备份库
删除库
数据库
创建库
←
删表
建表
也收集了不少了。
据
下面的语句真是简洁有力，会把表 testl 的结构复制出来，
表间关系
设计
结构
约束
主键/外键
是否为空
字段长度
字段类型
字段名称
图4-21
查-Select
改-Update
删-Delete
增-Insert
分组查询
使用聚集函查询
模糊查询（Like/in
数据排序（arder by）
多表查询
(group by/having)
between.and)
就好比中文一般指的
---
## Page 169
4.3.2
段值范围导出到 emp.lst 文件中，这个操作需要 file 的权限。
式就是不支持的：
较清晰，相比多条SQL语句效果要好太多。
出下面这样的错误：
e. o  t a    
 ERROR 1786 (HYO00): Statement violates GTID consistency: CREATE TABLE ...
MySQL 里面的 drop 语句还是蛮有特点，drop index 操作要和表关联起来。
MySQL里原生的 select into 可以实现文件导出的功能，
如果在MySQL 中加入一个字段，指定位置，可以使用关键字AFTER，如下：
4. alter 语句
INSERT INTO tbl_name (coll,col2) VALUES(col2*2,15);
这种方式是可行的，但是如果字段顺序做下调整就不支持了，需要注意，如下的方
INSERT INTO tbl_name (col1,col2) VALUES(15,col1*2);
下面的语句看起来比较特别，解析 MySQL binlog 会发现，里面的 insert 语句是这个样子的。
INSERT INTO table (a, b， c) VALUES (1,2,3)
如果你直接删除一个索引，就会抛出如下的错误。
1. drop 语句
5.select into语句
比如下面的动态值，设置表达式的方式，MySQL就有自己的口味。
3.insert 语句中的表达式
INSERT INTO table SET a=l,b=2，c=3;
MySQL支持的特有的 insert 语句，下面是 mysqldump 导出的语句格式，这种方式比
2.insert语句
create table test like testl;
其实这个操作我们可以使用 MySQL 特有的 SQL，来轻松复制表结构。
同时还有个缺点，那就是上面这种方式不会复制相关的索引信息。
但是这条语句有一个局限性，那就是在开启了GTID 模式的情况下是不可用的，会报
删除类
，(2,3,4);
比如把表 emp 的数据根据字
第4章SQL开发规范和基础”147
---
## Page 170
148丨MySQLDBA工作笔记：数据库管理、架构优化与运维开发
如果你把它归档到一个历史数据库中而暂时不清理数据，这种方式就很快捷。
据值和子查询两种方式，细节的部分可以参考下面的专题分析。
的作用就是动态逻辑，即如果匹配到数据则执行变更，如果没有则插入数据。它支持数
modify更加直接一些。
修改字段b 的类型或者属性以及修改字段名称，Change 会比较适合；而修改数据类型，
4.3.3
种方式的，当然从数据安全的角度来说，是不建议这类操作的。
replace into x values(...)
delete A, B from A, B where A.id = B.aid
在 Oracle 中有 merge into 的语法，可以达到一个语句同时完成修改和添加数据的功
Query OK, 0 rows affected (0.o5 sec)
rename table testsync.t_fund_info to test.t_user_login_record;
replace into x select * from y
MySQL 里面的 replace 语句还是很有特色的，和 Oracle 里面的 merge into 类似，主要
3.replace 语句
ALTER TABLE t1 MODIFY b BIGINT NOT NULL;
ALTER TABLE
Change 和 modify 用法有些相似，但是细究起来还是各有自己适合的使用场景，比如
2. change 和 modify 
update A, B set A.a = al, B.b = b1 where A.id = B.aid
级联操作对删除适用，对更新也是适用的。
MySQL里面支持级联删除，
2.级联删除
或者是用比较经典的写法，如下：
Records:0
Query OK,
专题 4-1：解读 Replace into 语句
这个功能很可能被大家忽略，但是实际上这个功能很实用，比如要把一个表清理，
4.rename 语句
或者
1．级联更新
可以使用如下的方式：
修改类
tl
Duplicates:0
CHANGE b b BIGINT NOT NULL;
下面的语句会级联删除数据，Oracle 目前还是不支持这
Warnings: 0
---
## Page 171
所示。
的数据，replace into 是直接更新还是删除，然后插入呢。
确实蛮有意思。
用细则。
能，MySQL 里面没有 merge into 的语法，却有 replace into。我们来看看 replace into 的使
首先用explain extended 的方式，这种方式会得到很多执行计划的细节信息，如图 4-22
我们可以先试试trace的方法，是否能够有所收获。
看起来数据像是被替换了，又好像是删除后，
2 rows in set (0.00 sec)
>select * from users
完成之后数据的情况如下：
> replace into users(user_id, user_name) values(l, 'cc');
我们先看看replace into的使用。比如插入下面的一条记录。
要搞明白这一点很重要，因为这个直接会影响到数据的准确性。
好了，我们来看看replace into 的使用，如果向表里插入数据，而表里已经存在同样
2rows in set (0.00 sec)
> select * from users
数据情况如下：
Query OK,
>insert
 user_id | user_name
user_id |user_name
插入2行数据，可能搞Oracle 的同学就不适应了，SQL 怎么能这么写，不过用起来
primary key(user_id)
aser
createtableusers(
为了方便演示，
1
into users (user_id,user_name) values(1,'aa'),(2,'bb');
bb
aa
2
Duplicates:0
char(64)
：我首先创建一个表 users，如下：
default null
Warnings:0
，重新覆盖的。怎么验证呢。
第4章SQL开发规范和基础|149
---
## Page 172
150丨MySQLDBA工作笔记：数据库管理、架构优化与运维开发
且还能顺带验证，何乐而不为。
我们重新创建一个表users2，和 users 的唯一不同在于 user_id使用了 auto_increment 的方式。
explain
Create Table:
**HW cREATE TABLE users2G
这个时候查看建表的 DDL，如下：
QueryOK，
>INSERT INTO users2 (user_id,user_name) VALUES (1, 'aa'), (2, 'bb'), (3, 'cc');
插入3行数据，如下：
user_name varchar(64) default null,
user_id int(11)
CREATETABLE
这个时候不要气饺，要知道办法总比困难多。我们可以换一个新的思路来测试，而
输出结果如下图4-23所示，还是没有得到很详细的信息。
Query OK,
> replace into users(user_id, user_name) values(1, 'dd');
Records:
)engine=innodb default charset=UTF8;
> set optimizer_trace="enabled=on";
>select *from information_schema.optimizer_trace\G
我们换一个方式，在5.6以上版本使用optimizer_trace，如下：
根据输出来看，这种方式得不到预期的数据结果。
set
user_name
user
"steps":[
Table:users2
id
key(u
sec)
int(11)
2
Duplicates:
varchar(64) DEFAULT NULL,
CREATE TABLEuSers2
ser
users2`
unsigned not null AUTO_INCREMENT,
id)
 unsigned NOT NULL AUTO_INCREMENT,
row
Warnings:0
replace into users(user_id, user_name) values(1, 'dd')
图4-23
图4-22
NULLINULL
(pp.'t）snteA
NULLINULL
NULL|No tables used
Extra
---
## Page 173
看 user_id是递增还是保留当前的值。
或者唯一性索引，user_id 存在主键，我们给 user_name 创建一个唯一性索引。
好了，重要的时刻到了，我们看看下面语句的效果。只在语句中提及 user_name，看
Records:0Duplicates:0
Query OK,
>alter table users2 add unique key users2_uq_name(user_name);
这个时候还是很难得出一个结论，切记不要想当然。replace into需要表中存在主键
Create Table:
> SHOW CREATE TABLE users2\G
再次查看auto_increment的值还是4，如下：
> SELECT * FROM users2;
数据情况如下，原来是user_id为1的数据做了变更。
Query OK，
> REPLACE INTO users2 (user_id,user_name） VALUES (l, 'dd');
我们先做一个replace into的操作。
3 rows in set (0.00 sec)
SELECT * FROM users2
数据情况如下：
row in set (0.00 sec)
ENGINE=InnoDB AUTO_INCREMENT=4 DEFAULT CHARSET=utf8
user_id`int(1l) unsigned NOT NULL AUTO_INCREMENT
rows in set (0.01 sec)
user_id | user_name
user_id | user_name
row in set (0.01 sec)
ENGINE=InnoDB AUTO_INCREMENT=4 DEFAULT CHARSET=utf8
PRIMARY KEY (`user_id)
rows affected (0.o0 sec)
rows
CREATETABLE
user_
1d
一十
Warnings:0
`users2
第4章SQL开发规范和基础|
151
---
## Page 174
152丨MySQL DBA工作笔记：数据库管理、架构优化与运维开发
然我们有过程有结论，也算是一种不错的尝试了。
user
用 replace into 的姊妹篇语句 insert into on duplicate key，后面需要使用 update 选项。
如果插入数据时存在重复的数据，而是更新当前记录的情况，该怎么办呢，这时可以使
非基于当前数据的 update。
如此一来我们使用 replace into 的时候就需要格外注意，可能有些操作非我们所愿,
其实再次查看 replace into 的使用，发现日志中已经赫然提醒“2 rows affected"，当
> select *from users2;
Query OK,
> replace into users2(user_id,user_name) select 2,'bbbb'