disregards about a half of the functions in x86 C binaries as
its algorithm relies heavily on the .eh_frame as Ghidra. We
found that Clang does not emit FDEs for 32-bit binaries.
We conclude that FunSeeker achieves signiﬁcantly better
precision and recall rates compared to the existing tools when
dealing with CET-enabled binaries. The results imply that
none of the exiting tools leverages end-branch instructions
when identifying functions, and we note that FunSeeker
is a highly compatible system that can be easily adopted by
those tools.
D. Run-time Overhead of FunSeeker
We also measured the average time required by each tool to
analyze a binary. The time columns of Table III illustrate the
results. The table does not include execution time for Ghidra
and IDA Pro because both tools perform various analyses other
than just function identiﬁcation. Thus, for fair comparisons, we
omitted those two tools.
On average, FunSeeker and FETCH respectively spent
1.181 seconds and 6.031 seconds for analyzing a single binary
in our dataset. That is, FunSeeker was 5.1× faster than
FETCH on average. To analyze all the binaries in our dataset,
FETCH had to spend 10.8 more hours than FunSeeker.
We believe this is because FETCH employs more complicated
techniques, such as examining stack frame heights and calling
conventions, to precisely identify tail call targets. This result
conﬁrms that FunSeeker is substantially faster than the
state-of-the-art tools while achieving the highest precision and
recall rates.
VI. LIMITATION AND FUTURE WORK
By design, FunSeeker operates only on CET-enabled
binaries. That is, it does not handle legacy binaries. However,
we note that CET is enabled by default on modern compilers
and OSes. Therefore, FunSeeker will eventually beneﬁt
function identiﬁcation and binary analysis.
Although linear sweep disassembly can achieve nearly
100% instruction coverage for regular binaries as noted by
[3], it is not always the case when the binary code contains
hand-written assembly or inlined data, which can cause a false
positive for FunSeeker. Incorporating recursive disassembly
or superset disassembly [7], [29] with FunSeeker to improve
instruction coverage is promising future work.
GCC and Clang provide the -mmanual-endbr option
to disable automatic end-branch insertion. Instead, they allow
the users to manually control where to insert an end-branch
instruction through a function attribute. Although this option
can affect the precision of FunSeeker, the impact will be
marginal. First, all the indirect branch targets should still have
an end-branch instruction, because otherwise, the program will
crash. Second, since FunSeeker performs a linear-sweep
Authorized licensed use limited to: Tsinghua University. Downloaded on August 07,2022 at 13:17:22 UTC from IEEE Xplore.  Restrictions apply. 
564
disassembly to detect direct call targets, it will still be able
to discover most of the regular functions as discussed in
§V-B. Finally, FunSeeker can only miss some direct tail
call targets and unreachable functions, but their portion is only
about 1.24% according to our study (Figure 3).
Although our main focus was on Intel CET, we believe
our algorithm can be easily extended to handle ARM BTI
instructions because end-branch instructions in both architec-
tures behave almost the same. It is indeed promising future
work to handle BTI-enabled ARM binaries.
VII. RELATED WORK
A. Hardware-assisted Defenses
Memory corruption bugs have been a signiﬁcant threat to
computer security. Various defense mechanisms have been
proposed to date, but only a few of them are used in practice
due to their performance overhead. Control-Flow Integrity
(CFI) [1] is a representative defense technique that can effec-
tively mitigate control-ﬂow hijack exploits, such as [8], [9],
[31], [41], [44].
Recently, modern CPUs are shipped with security features
to address the performance challenge. Pointer Authentication
(PA) of ARMv8-A [40] detects illicit modiﬁcation of pointers.
PA generates a cryptographic message authentication code,
named Pointer Authentication Code (PAC), and embeds it
in the unused bits of the pointer. PAC is veriﬁed before
dereferencing the pointer to ensure its validity. Also, Branch
Target Identiﬁcation (BTI) is a new instruction introduced by
ARMv8-A [5] to enforce CFI for forward indirect branches.
Memory Protection eXtension (MPX) of Intel provides
hardware-assisted bound checking [21]. MPX includes a set of
new instructions to create, propagate, store, and check pointer
bounds. In addition, Intel’s Memory Protection Key (MPK)
allows a user process to manage its own page table permission.
MPK enables a user to set up a non-readable code page, which
is called an execute-only code page. Control-ﬂow Enforcement
Technology (CET) [22] is the most recent security feature
introduced by Intel. CET provides hardware-level CFI with
minimal performance overhead.
B. Function Identiﬁcation
Function identiﬁcation is the cornerstone of binary analysis
and reverse engineering because Control-Flow Graph (CFG)
recovery techniques often rely on the assumption that function
entries are known [43]. For this reason, mainstream binary
analysis tools [17], [30] often employ a set of heuristics to
identify functions. They often combine call graph traversal
with compiler-speciﬁc pattern matching to identify function
entries. However, pattern matching in general is not robust
against varying binary patterns.
Machine Learning (ML) based approaches [6], [35], [42],
[46], [49] have been proposed to address this challenge.
ByteWeight [6] builds a preﬁx tree model to compute the
probability of function start. Shin et al. [42] utilize a bidi-
rectional Recurrent Neural Network (RNN) model to detect
function boundaries. FID [46] extracts semantic features from
each basic block with symbolic execution, and leverages three
machine-learning algorithms to identify functions. XDA [35]
employs a deep learning-based language model to identify
functions. Recently, DeepDi [49] models different relations
between instructions and utilizes such relations to generate a
feature vector. As Koo et al. [26] recently reported, those ML-
based approaches are prone to errors when handling unseen
binary patterns as they are largely dependent on the training
dataset. On the other hand, FunSeeker does not require a
training phase.
Static-analysis-based approaches [4], [39] have also been
proposed to overcome the limitations of the pattern-based
approaches. Qiao et al. [39] examines the statically observable
properties of candidate functions to ﬁlter out spurious func-
tions. Nucleus [4] presents a compiler-agnostic function detec-
tion algorithm to ﬁnd entry points through an intra-procedural
control ﬂow analysis. All these approaches are orthogonal
to FunSeeker, and can beneﬁt from FunSeeker. For
example, one could employ FunSeeker as a preprocessing
step for function identiﬁcation.
Recently, researchers [2], [33], [37], [38], [48] have started
to pay speciﬁc attention to the .eh_frame section to identify
function entries. The .eh_frame section provides a way to
unwind the stack when an exception is raised. This is useful
because modern compilers use frame pointers, e.g., RBP, as a
general purpose register [19], [20]. FETCH [33] systematically
analyzes the .eh_frame section information to be able
to precisely identify functions. Interestingly, however, about
56.3% of the functions in our Clang binary dataset have no
corresponding call frame information (in the .eh_frame
section) and about 3.3% of the FDEs are related to .part or
.cold functions, which are not a real function. We believe both
FETCH and FunSeeker are complementary to each other.
VIII. CONCLUSION
In this paper, we demonstrated FunSeeker, a novel func-
tion identiﬁcation tool that works on CET-enabled binaries.
To build our system, we ﬁrst systematically analyzed how
Intel CET’s end-branch instructions are used in real-world
binaries. We then extracted several usage patterns to design an
efﬁcient function identiﬁcation algorithm, whose complexity
is linear in the size of the target binary. Even if the sim-
plistic design, FunSeeker was able to achieve signiﬁcantly
higher performance compared to the existing state-of-the-art
tools. Furthermore, FunSeeker is highly compatible and
lightweight so that it can be easily adopted by existing tools.
Consequentially, our study conﬁrms that CET can eventually
beneﬁt binary analysis tools.
ACKNOWLEDGEMENT
We thank the anonymous reviewers for their feedback.
We also thank Erik van der Kouwe for shepherding our
paper. This work was supported by Institute of Information
& communications Technology Planning & Evaluation (IITP)
grant funded by the Korea government (MSIT) (No.2021-0-
01332, Developing Next-Generation Binary Decompiler).
Authorized licensed use limited to: Tsinghua University. Downloaded on August 07,2022 at 13:17:22 UTC from IEEE Xplore.  Restrictions apply. 
565
REFERENCES
[1] M. Abadi, M. Budiu, U. Erlingsson, and J. Ligatti, “Control-ﬂow
integrity,” in Proc. of the ACM Conference on Computer and Commu-
nications Security, 2005, pp. 340–353.
[2] J. Alves-Foss and J. Song, “Function boundary detection in stripped
binaries,” in Proc. of the Annual Computer Security Applications Con-
ference, 2019, pp. 84–96.
[3] D. Andriesse, X. Chen, V. van der Veen, A. Slowinska, and H. Bos,
“An in-depth analysis of disassembly on full-scale x86/x64 binaries,” in
Proc. of the USENIX Security Symposium, 2016, pp. 583–600.
[4] D. Andriesse, A. Slowinska, and H. Bos, “Compiler-agnostic function
detection in binaries,” in Proc. of IEEE European Symposium on Security
and Privacy, 2017, pp. 177–189.
[5] ARM,
“Branch
target
identiﬁcation
(BTI),”
https://developer.
arm.com/documentation/ddi0596/2021-06/Base-Instructions/
BTI--Branch-Target-Identiﬁcation-.
[6] T. Bao, J. Burket, M. Woo, R. Turner, and D. Brumley, “BYTEWEIGHT:
Learning to recognize functions in binary code,” in Proc. of the USENIX
Security Symposium, 2014, pp. 845–860.
[7] E. Bauman, Z. Lin, and K. Hamlen, “Superset disassembly: Statically
rewriting x86 binaries without heuristics,” in Proc. of the Network and
Distributed System Security Symposium, 2018.
[8] T. Bletsch, X. Jiang, V. W. Freeh, and Z. Liang, “Jump-oriented
programming: A new class of code-reuse attack,” in Proc. of the ACM
Symposium on Information, Computer and Communications Security,
2011, pp. 30–40.
[9] S. Checkoway, L. Davi, A. Dmitrienko, A.-R. Sadeghi, H. Shacham, and
M. Winandy, “Return-oriented programming without returns,” in Proc.
of the ACM Conference on Computer and Communications Security,
2010, pp. 559–572.
[10] S. Crane, C. Liebchen, A. Homescu, L. Davi, P. Larsen, A.-R. Sadeghi,
S. Brunthaler, and M. Franz, “Readactor: Practical code randomization
resilient to memory disclosure,” in Proc. of the IEEE Symposium on
Security and Privacy, 2015, pp. 763–780.
[11] GCC,
“gcc/calls.c,”
https://github.com/gcc-mirror/gcc/blob/releases/
gcc-10/gcc/calls.c#L578.
[12] ——, “gcc/ChangeLog-2018,” https://github.com/gcc-mirror/gcc/blob/
[27] V. Kuznetsov, L. Szekeres, M. Payer, G. Candea, R. Sekar, and D. Song,
“Code-pointer integrity,” in Proc. of the USENIX Symposium on Oper-
ating System Design and Implementation, 2014, pp. 147–163.
[28] LLVM, “[x86] added support for nocf check attribute for indirect branch
tracking,” https://reviews.llvm.org/D41879.
[29] K. Miller, Y. Kwon, Y. Sun, Z. Zhang, X. Zhang, and Z. Lin, “Probabilis-
tic disassembly,” in Proc. of the International Conference on Software
Engineering, 2019, pp. 1187–1198.
[30] National Security Agency, “Ghidra,” https://ghidra-sre.org.
[31] Nergal, “The advanced return-into-lib(c) exploits (pax case study),” http:
//phrack.org/issues/58/4.html.
[32] C. Pang, R. Yu, Y. Chen, E. Koskinen, G. Portokalidis, B. Mao, and
J. Xu, “SoK: All you ever wanted to know about x86/x64 binary
disassembly but were afraid to ask,” in Proc. of the IEEE Symposium
on Security and Privacy, 2021, pp. 833–851.
[33] C. Pang, R. Yu, D. Xu, E. Koskinen, G. Portokalidis, and J. Xu,
“Towards optimal use of exception handling information for function
detection,” in Proc. of the International Conference on Dependable
Systems Networks, 2021, pp. 338–349.
[34] V. Pappas, M. Polychronakis, and A. D. Keromytis, “Smashing the
gadgets: Hindering return-oriented programming using in-place code
randomization,” in Proc. of
the IEEE Symposium on Security and
Privacy, 2012, pp. 601–615.
[35] K. Pei, J. Guan, D. W. King, J. Yang, and S. Jana, “XDA: Accurate,
robust disassembly with transfer learning,” in Proc. of the Network and
Distributed System Security Symposium, 2021.
[36] M. Prasad and T.-c. Chiueh, “A binary rewriting defense against stack
based buffer overﬂow attacks,” in Proc. of the USENIX Annual Technical
Conference, 2005, pp. 211–224.
[37] S. Priyadarshan, H. Nguyen, and R. Sekar, “On the impact of exception
handling compatibility on binary instrumentation,” in Proc. of ACM
Workshop on Forming an Ecosystem Around Software Transformation,
2020, pp. 23–28.
[38] ——, “Practical ﬁne-grained binary code randomization,” in Proc. of the
Annual Computer Security Applications Conference, 2020, pp. 401–414.
[39] R. Qiao and R. Sekar, “Function interface analysis: A principled
approach for function recognition in cots binaries,” in Proc. of the
International Conference on Dependable Systems Networks, 2017, pp.
201–212.
[40] Qualcomm Technologies, Inc., “Pointer authentication on ARMv8.3.”
[41] H. Shacham, “The geometry of innocent ﬂesh on the bone: Return-into-
libc without function calls (on the x86),” in Proc. of the ACM Conference
on Computer and Communications Security, 2007, pp. 552–561.
[42] E. C. R. Shin, D. Song, and R. Moazzezi, “Recognizing functions
in binaries with neural networks,” in Proc. of the USENIX Security
Symposium, 2015, pp. 611–624.
[43] Y. Shoshitaishvili, R. Wang, C. Salls, N. Stephens, M. Polino,
A. Dutcher, J. Grosen, S. Feng, C. Hauser, C. Kruegel, and G. Vigna,
“(state of) the art of war: Offensive techniques in binary analysis,” in
Proc. of the IEEE Symposium on Security and Privacy, 2016, pp. 138–
157.
[44] K. Z. Snow, F. Monrose, L. Davi, A. Dmitrienko, C. Liebchen, and A.-R.
Sadeghi, “Just-in-time code reuse: On the effectiveness of ﬁne-grained
address space layout randomization,” in Proc. of the IEEE Symposium
on Security and Privacy, 2013, pp. 574–588.
[45] M. Telesklav and S. Tauner, “Comparative analysis and enhancement of
cfg-based hardware-assisted cﬁ schemes,” Transactions on Embedded
Computing Systems, vol. 20, no. 5, pp. 1–25, 2021.
[46] S. Wang, P. Wang, and D. Wu, “Semantics-aware machine learning for
function recognition in binary code,” in Proc. of IEEE International
Conference on Software Maintenance and Evolution, 2017.
[47] R. Wartell, V. Mohan, K. W. Hamlen, and Z. Lin, “Binary stirring: Self-
randomizing instruction addresses of legacy x86 binary code,” in Proc.
of the ACM Conference on Computer and Communications Security,
2012, pp. 157–168.
[48] D. Williams-King, H. Kobayashi, K. Williams-King, G. Patterson,
F. Spano, Y. J. Wu, J. Yang, and V. P. Kemerlis, “Egalito: Layout-
agnostic binary recompilation,” in Proc. of the International Conference
on Architectural Support for Programming Languages and Operating
Systems, 2020, pp. 133–147.
[49] S. Yu, Y. Qu, X. Hu, and H. Yin, “DeepDi: Learning a relational
graph convolutional network model on instructions for fast and accurate
disassembly,” in Proc. of the USENIX Security Symposium, 2022.
https://github.com/gcc-mirror/gcc/blob/
https://tinyurl.com/yc575bb5.
master/gcc/ChangeLog-2018.
“gcc/doc/extend.texi,”
[13] ——,
master/gcc/doc/extend.texi#L7134.
[14] ——,
“gcc/gcc/conﬁg/i386/i386-features.c,”
https://github.com/
gcc-mirror/gcc/blob/master/gcc/conﬁg/i386/i386-features.c#L2056.
[15] ——, “x86: Default CET run-time support to auto,” https://github.com/
gcc-mirror/gcc/commit/8d286dd118a5bd16f7ae0fb9dfcdcfd020bea803.
[16] Hex-Rays SA., “FLIRT,” https://hex-rays.com/products/ida/tech/ﬂirt/.
[17] ——, “IDA Pro,” https://www.hex-rays.com/products/ida/.
[18] J. Hiser, A. Nguyen-Tuong, M. Co, M. Hall, and J. W. Davidson, “ILR:
Where’d my gadgets go?” in Proc. of the IEEE Symposium on Security
and Privacy, 2012, pp. 571–585.
[19] H.J. Lu, “gcc/changelog-2010,” https://github.com/gcc-mirror/gcc/blob/
master/gcc/ChangeLog-2010.
[20] ——, “Turn on -fomit-frame-pointer by default for 32bit linux/x86,”
https://gcc.gnu.org/legacy-ml/gcc-patches/2010-08/msg00922.html.
[21] Intel,
“Intel memory
protection
extensions
enabling
guide,”
https://www.intel.com/content/www/us/en/developer/articles/guide/
intel-memory-protection-extensions-enabling-guide.html.
[22] ——, “A technical look at intel’s control-ﬂow enforcement technology,”
https://www.intel.com/content/www/us/en/developer/articles/technical/
technical-look-control-ﬂow-enforcement-technology.html.
[23] M. Jung, S. Kim, H. Han, J. Choi, and S. K. Cha, “B2R2: Building an
efﬁcient front-end for binary analysis,” in Proc. of the NDSS Workshop
on Binary Analysis Research, 2019.
[24] S. Kim, M. Faerevaag, M. Jung, S. Jung, D. Oh, J. Lee, and S. K. Cha,
“Testing intermediate representations for binary analysis,” in Proc. of the
International Conference on Automated Software Engineering, 2017, pp.
353–364.
[25] H. Koo, Y. Chen, L. Lu, V. P. Kemerlis, and M. Polychronakis,
“Compiler-assisted code randomization,” in Proc. of the ACM Confer-
ence on Computer and Communications Security, 2018, pp. 461–477.
[26] H. Koo, S. Park, and T. Kim, “A look back on a function identiﬁcation
the Annual Computer Security Applications
problem,” in Proc. of
Conference, 2021, pp. 158–168.
Authorized licensed use limited to: Tsinghua University. Downloaded on August 07,2022 at 13:17:22 UTC from IEEE Xplore.  Restrictions apply. 
566