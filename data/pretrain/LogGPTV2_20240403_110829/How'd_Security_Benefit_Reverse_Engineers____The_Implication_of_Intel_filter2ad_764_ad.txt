### Disregards About Half of the Functions in x86 C Binaries

The algorithm in question heavily relies on the `.eh_frame` section, similar to Ghidra. We found that Clang does not emit Frame Description Entries (FDEs) for 32-bit binaries. Our evaluation shows that FunSeeker achieves significantly better precision and recall rates compared to existing tools when dealing with Control-Flow Enforcement Technology (CET)-enabled binaries. This implies that none of the existing tools leverage end-branch instructions for function identification. Additionally, FunSeeker is highly compatible and can be easily integrated into these tools.

### D. Run-time Overhead of FunSeeker

We also measured the average time required by each tool to analyze a binary. The results are illustrated in Table III. For fairness, we excluded Ghidra and IDA Pro from this comparison because they perform various analyses beyond function identification.

On average, FunSeeker and FETCH spent 1.181 seconds and 6.031 seconds, respectively, to analyze a single binary in our dataset. This means FunSeeker was 5.1 times faster than FETCH. To analyze all the binaries in our dataset, FETCH took 10.8 more hours than FunSeeker. This performance difference is likely due to FETCH's use of more complex techniques, such as examining stack frame heights and calling conventions, to accurately identify tail call targets. These results confirm that FunSeeker is substantially faster than state-of-the-art tools while achieving the highest precision and recall rates.

### VI. Limitation and Future Work

FunSeeker is designed to work only with CET-enabled binaries, meaning it does not handle legacy binaries. However, CET is enabled by default in modern compilers and operating systems, so FunSeeker will benefit future function identification and binary analysis tasks.

Although linear sweep disassembly can achieve nearly 100% instruction coverage for regular binaries, this is not always the case when the binary code contains hand-written assembly or inlined data, which can cause false positives for FunSeeker. Incorporating recursive disassembly or superset disassembly [7], [29] could improve instruction coverage and is a promising area for future work.

GCC and Clang provide the `-mmanual-endbr` option to disable automatic end-branch insertion, allowing users to manually control where to insert an end-branch instruction through a function attribute. While this option can affect the precision of FunSeeker, the impact is marginal. All indirect branch targets must still have an end-branch instruction, otherwise, the program will crash. Since FunSeeker performs a linear-sweep disassembly to detect direct call targets, it will still discover most regular functions. FunSeeker may miss some direct tail call targets and unreachable functions, but their portion is only about 1.24% according to our study (Figure 3).

Although our main focus was on Intel CET, we believe our algorithm can be easily extended to handle ARM Branch Target Identification (BTI) instructions, as end-branch instructions in both architectures behave similarly. Extending FunSeeker to handle BTI-enabled ARM binaries is a promising direction for future work.

### VII. Related Work

#### A. Hardware-assisted Defenses

Memory corruption bugs have been a significant threat to computer security. Various defense mechanisms have been proposed, but only a few are used in practice due to performance overhead. Control-Flow Integrity (CFI) [1] is a representative technique that effectively mitigates control-flow hijack exploits, such as [8], [9], [31], [41], [44].

Modern CPUs now include security features to address performance challenges. Pointer Authentication (PA) in ARMv8-A [40] detects illicit modifications of pointers by generating a cryptographic message authentication code (PAC) embedded in the unused bits of the pointer. PA verifies PAC before dereferencing the pointer to ensure its validity. Branch Target Identification (BTI) in ARMv8-A [5] enforces CFI for forward indirect branches. Intel's Memory Protection eXtension (MPX) provides hardware-assisted bound checking [21], including new instructions for creating, propagating, storing, and checking pointer bounds. Intel's Memory Protection Key (MPK) allows user processes to manage their own page table permissions, enabling non-readable code pages. Control-Flow Enforcement Technology (CET) [22] is the most recent security feature introduced by Intel, providing hardware-level CFI with minimal performance overhead.

#### B. Function Identification

Function identification is crucial for binary analysis and reverse engineering, as Control-Flow Graph (CFG) recovery often assumes known function entries [43]. Mainstream binary analysis tools [17], [30] use heuristics to identify functions, combining call graph traversal with compiler-specific pattern matching. However, pattern matching is not robust against varying binary patterns.

Machine Learning (ML) approaches [6], [35], [42], [46], [49] have been proposed to address this challenge. ByteWeight [6] builds a prefix tree model to compute the probability of function start. Shin et al. [42] use a bidirectional Recurrent Neural Network (RNN) model to detect function boundaries. FID [46] extracts semantic features from each basic block using symbolic execution and applies three machine-learning algorithms to identify functions. XDA [35] employs a deep learning-based language model to identify functions. DeepDi [49] models different relations between instructions to generate a feature vector. Koo et al. [26] reported that ML-based approaches are prone to errors with unseen binary patterns, as they depend heavily on the training dataset. In contrast, FunSeeker does not require a training phase.

Static-analysis-based approaches [4], [39] have also been proposed to overcome the limitations of pattern-based methods. Qiao et al. [39] examine statically observable properties to filter out spurious functions. Nucleus [4] presents a compiler-agnostic function detection algorithm through intra-procedural control flow analysis. These approaches are orthogonal to FunSeeker and can benefit from it, for example, by using FunSeeker as a preprocessing step for function identification.

Recently, researchers [2], [33], [37], [38], [48] have focused on the `.eh_frame` section to identify function entries. The `.eh_frame` section provides a way to unwind the stack during exceptions, useful because modern compilers use frame pointers like RBP as general-purpose registers [19], [20]. FETCH [33] systematically analyzes the `.eh_frame` section to precisely identify functions. However, about 56.3% of the functions in our Clang binary dataset have no corresponding call frame information, and about 3.3% of the FDEs are related to `.part` or `.cold` functions, which are not real functions. We believe both FETCH and FunSeeker are complementary.

### VIII. Conclusion

In this paper, we presented FunSeeker, a novel function identification tool for CET-enabled binaries. We first analyzed how Intel CET's end-branch instructions are used in real-world binaries and then designed an efficient function identification algorithm with linear complexity. Despite its simplicity, FunSeeker achieved significantly higher performance compared to existing state-of-the-art tools. Furthermore, FunSeeker is highly compatible and lightweight, making it easy to integrate into existing tools. Our study confirms that CET can benefit binary analysis tools.

### Acknowledgment

We thank the anonymous reviewers for their feedback and Erik van der Kouwe for shepherding our paper. This work was supported by the Institute of Information & Communications Technology Planning & Evaluation (IITP) grant funded by the Korea government (MSIT) (No.2021-0-01332, Developing Next-Generation Binary Decompiler).