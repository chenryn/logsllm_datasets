        def clear_pkt_fields(self):
            self.pkt_fields = []
        def find_target_nas(self):
            self.clear_pkt_fields()
            self.add_pkt_field(0xa4, '\x00\x00\x02\x01')
            self.add_pkt_field(0xa6, '\x78\x00\x00\x00')
            self.add_pkt_field(0x01, p32(0x1))    # packet type
            # ...
            self.add_pkt_field(0xb9, '\x00\x00\x00\x00\x00\x00\x00\x00')
            self.add_pkt_field(0x7c, '00:50:56:c0:00:08')
            self.build_send_packet()
        def quick_conf(self):
            self.clear_pkt_fields()
            self.add_pkt_field(0xa4, '\x00\x00\x02\x01')
            self.add_pkt_field(0xa6, '\x78\x00\x00\x00')
            self.add_pkt_field(0x01, p32(0x4))    # packet type
            self.add_pkt_field(0x20, p32(0x1))    # packet subtype
            self.add_pkt_field(0x19, '00:11:32:8f:64:3b')
            self.add_pkt_field(0x2a, 'BnvPxUcU5P1nE01UG07BTUen1XPPKPZX')
            self.add_pkt_field(0x21, 'NAS_NEW')
            # ...
            self.add_pkt_field(0xb9, "\x00\x00\x00\x00\x00\x00\x00\x00")
            # ...
            self.add_pkt_field(0x7c, "00:50:56:c0:00:08")
            self.build_send_packet()
        # ...
    if __name__ == "__main__":
        ds_assistant = DSAssistantClient("ds_assistant")
        ds_assistant.find_target_nas()
        # ...
###  安全问题
**密码泄露**
前面提到，`pkt_id`字段表明对应数据的含义，如数据包类型、用户名、`mac`地址等。其中，`pkt_id`为`0x1`时对应的值表示整个数据包的类型，常见的数据包类型如下。其中，`netsetting`、`quickconf`和`memory
test`数据包中包含加密后的管理员密码信息，对应的`pkt_id`为`0x2a`。
以`quickconf`数据包为例，如上图所示。可以看到，`pkt_id`为`0x1`时对应的值为`0x4`，同时`pkt_id`为`0x2a`时对应的内容为`BnvPxUcU5P1nE01UG07BTUen1XPPKPZX`。通过逆向分析可知，函数`MatrixDecode()`用于对加密后的密码进行解密。因此，可以很容易地获取到管理员的明文密码。
    ~/DSM_DS3617xs_15284/hda1$ sudo chroot . ./call_export_func -d BnvPxUcU5P1nE01UG07BTUen1XPPKPZX
    MatrixDecode(BnvPxUcU5P1nE01UG07BTUen1XPPKPZX) result: HITB2021AMS
由于`Synology
Assistant`和`findhostd`之间以广播的方式进行通信，且数据包以明文形式进行传输，在某些情形下，通过监听广播数据包，局域网内的用户可以很容易地获取到管理员的明文密码。
**密码窃取**
在对`findhostd`进行`fuzz`的过程中，注意到`Synology Assistant`中显示的`DiskStation`状态变为了`"Not
configured"`。难道是某些畸形数据包对`DiskStation`进行了重置？经过分析后发现，是由于某些数据包欺骗了`Synology
Assistant`：`DiskStation`是正常的，而`Synology Assistant`却认为其处于未配置状态。
通常情况下，管理员会选择通过`Synology Assistant`对设备进行重新配置，并设置之前用过的用户名和密码。此时，由于`Synology
Assistant`和`findhostd`之间以广播的方式进行通信，且数据包以明文形式进行传输，故密码泄露问题又出现了。因此，在某些情形下，通过发送特定的广播数据包，局域网内的用户可以欺骗管理员对`DiskStation`进行”重新配置”，通过监听局域网内的广播数据包，从而窃取管理员的明文密码。另外，即使`Synology
Assistant`和`DSM`版本都支持通信加密，由于向下兼容性，这种方式针对最新的版本仍然适用。
**null byte off-by-one**
这个问题同样也和`Synology Assistant`有关。在`fuzz`的过程中，发现`Synology
Assistant`中显示的一些内容比较奇怪。其中，`"%n"`、`"%x"`和`"%p"`等是针对`string`类型预置的一些`fuzz`元素。注意到，在`"Server
name"`中显示的内容除了`"%n"`之外，尾部还有一些额外的内容如`"00:11:32:8Fxxx"`，这些多余的内容对应的是`"MAC
address"`。正常情况下，`"MAC address"`对应的内容不会显示到`"Server name"`中。
通过对`6.1-15030`版本的`DSAssistant.exe`进行分析和调试，函数`sub_1272E10()`负责对`string`类型的数据进行处理，将其从接收的数据包中拷贝到对应的内部缓冲区。前面提到过，针对每个`pkt_id`项，都有一个对应的`offset`字段和`max_length`字段。当对应数据长度的大小正好为`max_length`时，额外的`'\x00'`在`(1)`处被追加到缓冲区末尾，而此时该`'\x00'`其实是写入了邻近缓冲区的起始处，从而造成`null
byte off-by-one`。
    size_t __cdecl sub_1272E10(int a1, _BYTE *a2, int a3, int a4, size_t a5, int a6, int a7)
    {
      // ...
      v7 = (unsigned __int8)*a2;
      if ( (int)v7 > a3 - 1 )
        return 0;
      if ( !*a2 )
        return 1;
      if ( a5  The `_snprintf()` function formats and stores count or fewer characters and
> values (including a terminating null character that is always appended
> **unless count is zero or the formatted string length is greater than or
> equal to count characters** ) in buffer. // Windows
>
> The functions `snprintf()` and `vsnprintf()` **write at most size bytes
> (including the terminating null byte (‘\0’))** to str. // Linux
因此，对于某些在内部缓冲区中处于邻近的`pkt_id`(如`0x5b`和`0x5c`)，通过构造特殊的数据包，可以使得前一项内容末尾的`'\x00'`被下一项内容覆盖，从而可能会泄露邻近缓冲区中的内容。
      pkt_id            offset  max_len
    0000005a 00000000 00000aa8 00000080 00000000 00000000
    0000005b 00000000 00000b28 00000080 00000000 00000000    <===
    0000005c 00000000 00000ba8 00000004 00000000 00000000
## 小结
本文从局域网的视角出发，对群晖`NAS`设备上的`findhostd`服务进行了分析，包括`Synology
Assistant`与`findhostd`之间的通信机制、`syno_finder`协议格式的解析、协议`fuzzing`等。最后，分享了在其中发现的部分问题。
## 相关链接
  * [Create Wireshark Dissector in Lua](https://cq674350529.github.io/2020/09/03/Create-Wireshark-Dissector-in-Lua/)
  * [syno_finder](https://github.com/cq674350529/pocs_slides/tree/master/scripts/wireshark_plugins/syno_finder)
  * [Kitty Fuzzing Framework](https://github.com/cisco-sas/kitty)
  * [Synology-SA-19:38 Synology Assistant](https://www.synology.cn/zh-cn/security/advisory/Synology_SA_19_38)