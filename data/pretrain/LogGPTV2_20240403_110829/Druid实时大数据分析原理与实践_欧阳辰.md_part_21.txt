## Page 190
["timestamp":"2016-08-27T08:50:00.563Z","event_name":"browse_commodity","user_id":3,"age
{"timestamp":"2016-08-27T08:50:00.563Z","event_name":"browse_commodity","user_id":1,"age
{"timestamp":"2016-08-27T08:50:00.563Z","event_name":"browse_commodity","user_id":2,"age
["timestamp":"2016-08-27T08:50:00.563Z","event_name":"brQwse_commodity","user_id":1,"age
166
":"90+","city":"Beijing","commodity":"A","category":"3c","count":1}
"dataSource":"dianshang_order",
"queryType":"timeseries",
我们可以通过如下查询，查询UV：
"granularity”:"day"”,
样例数据如下：
"tuningConfig": {
"rejectionPolicy":
"basePersistDirectory":"/rc/data/druid/realtime/basePersist"
"windowPeriod":"PT10m",
"intermediatePersistPeriod":"PT10m"
"maxRowsInMemory":500000,
"type":"index",
"ioConfig":
"type":"none"
"firehose":{
"type";"index"
"filter":"*.json",
"type":"local",
"baseDir":"/rc/data/druid/tmp/test-data"
Druid实时大数据分析原理与实践
---
## Page 191
2.Sketch Operation
用 Post-Aggregator。
7.2.2
第7章
1.SketchEstimator
SketchOperation的使用如下：
SketchEstimator的使用如下：
如前所述，DataSketch还能查询既浏览了A商品又浏览了B商品的用户数。这就需要使
"func"：，//并、交、补
SketchEstimator用于计算Sketch的预估值。
"type"
"result":{
"timestamp"
得到结果如下：
"intervals":["2016-08-27/2016-08-28"]
"aggregations":[
"name"：，
"type"
"name":,
DataSketch Post-Aggregator
"theta_user_id":7.0
高级功能和特性
aggregator or that of type thetaSketchSetop>
："thetaSketchSetOp"
:"thetaSketchEstimate"
："2016-08-27T00:00:00.000Z"
170
---
## Page 192
168
"dimensions":[
"aggregations":
那么查询既浏览了A商品又浏览了B商品的用户数如下：
SketchOperation用于Sketch的集合运算。
"size"：//ThetaSketch的数据包大小，取值为2的指数整数，默认值为16384
"fields"
"dataSource":
"type"：
"filter":{
"aggregator":
"type":"filtered"
"filter":{
"aggregator":{
：，//所需要操作的列名数组
"value":
"type":"selector",
"dimension":“commodity",，
"type":
"fieldName":"theta_user_id",
"name":"B_theta_user_id",
"value":"A"
"type":"selector",
"dimension":"commodity",
"type":"thetaSketch"
"name":"A_theta_user_id",
"fieldName":"theta_user_id",
"dianshang_order",
门，
"filtered"
"thetaSketch"
，
Druid实时大数据分析原理与实践
---
## Page 193
第7章
"postAggregations":
"intervals":
"granularity":
"filter":
"2016-08-27/2016-08-28"
"fields":
"type":""or"
高级功能和特性
"field":{
type":
'name":
"fields":
"type"：
"name":
"value":
"type": "selector",
"dimension":"commodity",
"value":
"type": "selector",
"dimension": "commodity",
"day”
"thetaSketchEstimate"
"final_unique_users"
"thetaSketchSetOp"
"final_unique_users_sketch",
"INTERSECT"
"type": "fieldAccess"
"fieldName":"B_theta_user_id"
"type": "fieldAccess"
"fieldName":"A_theta_user_id",
"B"
"A”
169
---
## Page 194
数据结构代表一个压缩成Bitmap的 R-Tree结果，用于Segment 中列的序列化和反序列化。
github.com/metamx/bytebuffer-collections地址获得。其关键实现为ImmutableRTree.java。这个
过滤节点。
的长方形/长方体等包围起来，并且建立树状索引，在查询时利用二叉树的查询方法，快速
二维平面、三维空间数到更多的纬度。R-Tree的基本原理就是将空间中的临近点，通过最小
7.3.1
Druid的空间索引为系统内置功能，支持一些简单的空间索引和查询。
7.3
170
Druid的实现方式是直接使用MetaMarkets公司的数据结构库，该库的实现可以从https://
Druid的空间索引设计使用的是常规的 R-Tree 数据结构，支持多维空间坐标，从简单的
空间索引的索引文件为独立文件，文件名为 spatial.drd。
Druid支持空间索引列，数据列基于空间坐标或者区域范围。与其他几个扩展不一样，
"version":"v1"
"timestamp":"2016-08-27T00:00:00.000Z",
"event":
查询结果如下：
"queryType":"groupBy"
地理查询（GeographicQuery）
基本原理
"B_theta_user_id":6.0,
"A_theta_user_id": 3.0,
"final_unique_users":2.0
Druid实时大数据分析原理与实践
---
## Page 195
"filter":
7.3.3
引。
7.3.2
"dataSpec"
第7章
dims
dimName
"type":"spatial",
空间过滤的语法如下：
性
"dimension":"spatialDim",
"dimensions":
"format":"JSON"
"bound":{
"spatialDimensions":[
在数据定义中，Druid提供了空间纬度的定义。下面是一个例子，描述如何定义空间索
空间过滤（Spatial Filter）
空间索引（Spatial Indexing）
高级功能和特性
"maxCoords":[30.0,40.0]
"minCoords":[10.0,20.0],
"type";"rectangular",
包含空间维度的名字列表
构造。
空间维度的名字。空间维度可以从其他维度构造，或者从已经存在的维度
描述
"dims":["lat",
"dimName":"coordinates"
，如果一个空间纬度已经存在，那么它必须是坐标值的数组
[n6u01.
否
是
是否必需
171
---
## Page 196
定的Broker，采用Jetty提供的异步、非阻塞的 HttpClient发送请求，然后把返回的结果集发
7.4.1
用，例如某些不重要的查询耗时过长，会影响其他重要查询的情况。
Broker集合，把不重要的查询路由到剩下的Broker集合。这种隔离方式在某些场景下非常有
由到不同的Broker。它用来实现Broker层面的查询隔离，例如把热数据查询路由到指定的
7.4
例如IP库的一些附属索引信息。
也慢于很多专业的空间数据库，
坐标，例如经度、纬度等。支持的查询过滤条件也比较少（长方形或半径），地理索引的性能
7.3.5
2.半径（Radius）
7.3.4
172
radius
coords
属性
maxCoords
minCoords
属性
长方形（Rectangular）
Router是Broker 之前的一层代理，它接收来自于客户端的请求，根据路由规则获取指
当集群规模达到TB级别时，就可以考虑使用Router（路由器）。Router用于把查询路
目前，Druid虽然支持空间索引，但是坐标系还是基于笛卡儿坐标，而不是真正的地理
目前支持两种基本边界条件：一是长方形；二是半径。
Router概览
Router
地理查询小结
边界条件（BoundaryCondition）
浮点表示的半径值
原点的坐标[x,yz]
描述
最大坐标轴列表[xyz]
最小坐标轴列表[xyz.]
描述
，该功能的应用范围还不广，多用作分析数据库的一个补充，
Druid实时大数据分析原理与实践
是
是
是否必需
是
是
是否必需
---
## Page 197
会自动探测新加入的节点，以及剔除失败的节点，只有当同一服务名有多个Broker节点时，
有相同服务名的Broker分到同一组。在Broker配置服务名的方式如下：
示意图如图7-6所示。
Broker集合，将“_default_tier”层上的查询路由到“broker:cold”的Broker集合。整体架构
在生产环境中有两个tier（层），即“hot”和“_default_tier”，“hot”层加载最近一个月的热
送到客户端。接下来我们就通过经典的冷热数据分层的例子来讲解Router的架构及其使用。
第7章高级功能和特性
才用RoundRobin方式选取。
目录下创建临时节点存放自己的Host和Port等元数据信息。使用临时节点的好处是Curator
druid.service=broker:hot
数据，“_default_tier”层加载所有的数据。希望将“hot”层上的查询路由到“broker:hot”的
当前服务名为“broker:hot”的Broker启动时会在$[druid.discovery.curator.path}/broker/hot
在Router中利用CuratorDiscovery服务发现机制，根据服务名对Broker进行分组，将具
·druid.router.defaultBrokerServiceName，默认的服务名，当所有的路由规则都满足不了，
·druid.router.tierToBrokerMap，有序的Map，Map中元素的顺序代表优先级，排序越靠
Router中两个重要的配置项如下：
或者选取的服务名中所有Broker都不可用时，使用默认的服务名。
前，优先级越高。键是tier，是我们在历史节点中配置的层，值是Broker的服务名。
i
图7-6整体架构示意图
Broker
Broker
Brokencold
Cold Tie
173
---
## Page 198
级（最先出现）的Broker。举例来说，按照上述代码执行以后，获得的tier就是“broker:hot”。
for(Map.Entryentry:tierConfig.getTierToBrokerMap().entrySet（)){
则的tieredReplicants中，如满足则跳出循环。
重合，说明查询适用该规则。接下来按照顺序遍历tierToBrokerMap，检查tier是否出现在规
{"hot":"broker:hot","_default_tier":"broker:cold"}
的配置如下：
到服务名的话，就进人步骤3。
果规则中的tier在tierToBrokerMap中存在，则使用其对应的Broker服务名；如果仍然找不
询中的DataSource查找其适用的规则列表，然后使用查询中的intervals匹配适用的规则。如
上，就跳过以后的策略；如果匹配不上，则进入步骤2。
7.4.2
174
if (baseRule.getTieredReplicants().containsKey(entry.getKey()){
tierToBrokerMap是有序的，元素的顺序代表了优先级，tier匹配过程就是找到最高优先
break;
brokerServiceName =entry.getValue();
规则中的Period为“P1M"，表示规则适用的intervals为最近一个月，和查询的intervals
将最近一个月的数据，分别加载到“hot”和“_default_tier”两个层中。tierToBrokerMap
"period":"P1M"
先讲一下tier匹配。仍然以冷热数据分层的场景为例，DataSource的规则配置如下：
（3）使用默认的服务名。
（2）使用tier匹配，Router会定期调用Coordinator的接口获取所有的规则，首先根据查
"type":"loadByPeriod"
"tieredReplicants":
（1）首先使用${druid.routerstrategies}中配置的路由策略列表逐个去匹配，
路由规则
"hot":1
"_default_tier":1,
Druid实时大数据分析原理与实践
，如果能匹配
---
## Page 199
策略了。
策略的顺序很重要，因为一旦满足策略条件，选取出Broker服务名后，就不再执行后面的
7.4.4
7.4.3
第7章
strategies
druid.router.
pollPeriod
druid.router.
ServiceName
coordinator-
druid.router.
rulesEndpoint
druid.router.
defaultRule
druid.router.
Map
tierToBroker-
druid.router.
ServiceName
defaultBroker
druid.router.
属性
Router需要配置一系列的路由策略，用来选取具体的 Broker服务名去执行查询。路由
接下来，
路由策略
配置
高级功能和特性
对配置中重要的属性进行讲解。
有序的JSON数组