scanning. To further clarify p and q are correlated dynamic
opaque predicates, we go one step further in the third round
to verify whether ¬p ⇒ ¬q holds as well. To this end, we
automatically generate a new input that follows the path of
¬p ∧ ¬q. If ¬p ⇒ ¬q is also true, we continue to compare
trace segments guided by both p ∧ q and ¬p ∧ ¬q to make
sure two paths are semantically equivalent. Further details
about the detection process are discussed in Section 4.
3.2 Example
We create a motivating example (shown in Figure 5) to
illustrate our core method. Figure 5 contains three diﬀer-
ent kinds of opaque predicates. Note that the two dynamic
opaque predicates are constructed using pointer deference
(line 13 ∼ line 27). The predicates in line 13 and line
20 are correlated, since they evaluate to the same value at
any given run. In any case, the same instruction sequence
{y = x + 1; y = y + 2; x = y + 3;} will be executed.
Consider an execution of the code snippet given x = 4 as
input. Figure 6 shows a source-level view of such execution
trace. We perform backward slicing and symbolic execution
New traceSymbolic formulas Tautology check Invariant opaque predicatesImplication check  Input generationOriginal traceThe first roundThe second roundContextual opaque predicatesDynamic opaque predicatesThe third roundSemantics-based binary diffingReduced path conditionCulprit branches  3  int *p = &x;  4  int *q = &x;  5  int y = 0;  6  if (x*x  3)  9  {                       // contextual opaque predicate10      if (x*x-4x+3 > 0)11          x = x 5 ⇒ x > 0
∀x ∈ Z. x > 3 ⇒ x2 − 4x + 3 > 0
∀x ∈ Z. x%4 = 0 ⇒ x%2 = 0
∀x ∈ Z. x%9 = 0 ⇒ x%3 = 0
∀x ∈ Z. x%10 = 0 ⇒ x%5 = 0
∀x ∈ Z. 3|(7x − 5) ⇒ 9|(28x2 − 13x − 5)
∀x ∈ Z. 5|(2x − 1) ⇒ 25|(14x2 − 19x − 19)
∀x, y, z ∈ Z. (2 (cid:45) x ∧ 2 (cid:45) y) ⇒ x2 + y2 (cid:54)= z2
1
2