```  
attach分区  
```  
alter table tbl_user attach partition tbl_user_0 FOR VALUES WITH ( MODULUS 4, REMAINDER 0);  
alter table tbl_user attach partition tbl_user_1 FOR VALUES WITH ( MODULUS 4, REMAINDER 1);  
alter table tbl_user attach partition tbl_user_2 FOR VALUES WITH ( MODULUS 4, REMAINDER 2);  
alter table tbl_user attach partition tbl_user_3 FOR VALUES WITH ( MODULUS 4, REMAINDER 3);  
alter table tbl_log0 attach partition tbl_log0_0 FOR VALUES WITH ( MODULUS 4, REMAINDER 0);  
alter table tbl_log0 attach partition tbl_log0_1 FOR VALUES WITH ( MODULUS 4, REMAINDER 1);  
alter table tbl_log0 attach partition tbl_log0_2 FOR VALUES WITH ( MODULUS 4, REMAINDER 2);  
alter table tbl_log0 attach partition tbl_log0_3 FOR VALUES WITH ( MODULUS 4, REMAINDER 3);  
alter table tbl_log1 attach partition tbl_log1_0 FOR VALUES WITH ( MODULUS 4, REMAINDER 0);  
alter table tbl_log1 attach partition tbl_log1_1 FOR VALUES WITH ( MODULUS 4, REMAINDER 1);  
alter table tbl_log1 attach partition tbl_log1_2 FOR VALUES WITH ( MODULUS 4, REMAINDER 2);  
alter table tbl_log1 attach partition tbl_log1_3 FOR VALUES WITH ( MODULUS 4, REMAINDER 3);  
alter table tbl_log2 attach partition tbl_log2_0 FOR VALUES WITH ( MODULUS 4, REMAINDER 0);  
alter table tbl_log2 attach partition tbl_log2_1 FOR VALUES WITH ( MODULUS 4, REMAINDER 1);  
alter table tbl_log2 attach partition tbl_log2_2 FOR VALUES WITH ( MODULUS 4, REMAINDER 2);  
alter table tbl_log2 attach partition tbl_log2_3 FOR VALUES WITH ( MODULUS 4, REMAINDER 3);  
alter table tbl_log3 attach partition tbl_log3_0 FOR VALUES WITH ( MODULUS 4, REMAINDER 0);  
alter table tbl_log3 attach partition tbl_log3_1 FOR VALUES WITH ( MODULUS 4, REMAINDER 1);  
alter table tbl_log3 attach partition tbl_log3_2 FOR VALUES WITH ( MODULUS 4, REMAINDER 2);  
alter table tbl_log3 attach partition tbl_log3_3 FOR VALUES WITH ( MODULUS 4, REMAINDER 3);  
```  
以上，部署了两个表的sharding，其中一个为一级分区，另一个是二级分区。   
### 使用  
读  
写  
更新  
JOIN   
排序  
聚合  
```  
master=> insert into tbl_user select generate_series(1,10000), md5(random()::text), clock_timestamp();  
INSERT 0 10000  
Time: 2068.634 ms (00:02.069)  
master=> select * from tbl_user where id=1;  
 id |               info               |          crt_time            
----+----------------------------------+----------------------------  
  1 | ce4195228b81c7324e74c7581e2f9b6b | 2019-11-22 14:32:46.963279  
(1 row)  
Time: 2.868 ms  
master=> explain verbose select * from tbl_user where id=1;  
                                     QUERY PLAN                                        
-------------------------------------------------------------------------------------  
 Append  (cost=100.00..125.20 rows=6 width=44)  
   ->  Foreign Scan on public.tbl_user_0  (cost=100.00..125.17 rows=6 width=44)  
         Output: tbl_user_0.id, tbl_user_0.info, tbl_user_0.crt_time  
         Remote SQL: SELECT id, info, crt_time FROM public.tbl_user WHERE ((id = 1))  
(4 rows)  
Time: 0.740 ms  
master=> insert into tbl_log select random()*10000, generate_series(1,100000), md5(random()::text), clock_timestamp();  
INSERT 0 100000  
master=> select * from tbl_log where orderid =1;  
  id  | orderid |               info               |         crt_time            
------+---------+----------------------------------+---------------------------  
 3913 |       1 | ea78241381ffc6f18e97d575b8173cb7 | 2019-11-22 14:54:29.76664  
(1 row)  
Time: 10.395 ms  
master=> explain verbose select * from tbl_log where orderid =1;  
                                             QUERY PLAN                                               
----------------------------------------------------------------------------------------------------  
 Append  (cost=100.00..494.35 rows=20 width=52)  
   ->  Foreign Scan on public.tbl_log0_0  (cost=100.00..123.56 rows=5 width=52)  
         Output: tbl_log0_0.id, tbl_log0_0.orderid, tbl_log0_0.info, tbl_log0_0.crt_time  
         Remote SQL: SELECT id, orderid, info, crt_time FROM public.tbl_log_0 WHERE ((orderid = 1))  
   ->  Foreign Scan on public.tbl_log1_0  (cost=100.00..123.56 rows=5 width=52)  
         Output: tbl_log1_0.id, tbl_log1_0.orderid, tbl_log1_0.info, tbl_log1_0.crt_time  
         Remote SQL: SELECT id, orderid, info, crt_time FROM public.tbl_log_0 WHERE ((orderid = 1))  
   ->  Foreign Scan on public.tbl_log2_0  (cost=100.00..123.56 rows=5 width=52)  
         Output: tbl_log2_0.id, tbl_log2_0.orderid, tbl_log2_0.info, tbl_log2_0.crt_time  
         Remote SQL: SELECT id, orderid, info, crt_time FROM public.tbl_log_0 WHERE ((orderid = 1))  
   ->  Foreign Scan on public.tbl_log3_0  (cost=100.00..123.56 rows=5 width=52)  
         Output: tbl_log3_0.id, tbl_log3_0.orderid, tbl_log3_0.info, tbl_log3_0.crt_time  
         Remote SQL: SELECT id, orderid, info, crt_time FROM public.tbl_log_0 WHERE ((orderid = 1))  
(13 rows)  
Time: 1.186 ms  
master=> explain verbose select * from tbl_log where id=1;  
                                          QUERY PLAN                                             
-----------------------------------------------------------------------------------------------  
 Append  (cost=100.00..494.35 rows=20 width=52)  
   ->  Foreign Scan on public.tbl_log0_0  (cost=100.00..123.56 rows=5 width=52)  
         Output: tbl_log0_0.id, tbl_log0_0.orderid, tbl_log0_0.info, tbl_log0_0.crt_time  
         Remote SQL: SELECT id, orderid, info, crt_time FROM public.tbl_log_0 WHERE ((id = 1))  
   ->  Foreign Scan on public.tbl_log0_1  (cost=100.00..123.56 rows=5 width=52)  
         Output: tbl_log0_1.id, tbl_log0_1.orderid, tbl_log0_1.info, tbl_log0_1.crt_time  
         Remote SQL: SELECT id, orderid, info, crt_time FROM public.tbl_log_1 WHERE ((id = 1))  
   ->  Foreign Scan on public.tbl_log0_2  (cost=100.00..123.56 rows=5 width=52)  
         Output: tbl_log0_2.id, tbl_log0_2.orderid, tbl_log0_2.info, tbl_log0_2.crt_time  
         Remote SQL: SELECT id, orderid, info, crt_time FROM public.tbl_log_2 WHERE ((id = 1))  
   ->  Foreign Scan on public.tbl_log0_3  (cost=100.00..123.56 rows=5 width=52)  
         Output: tbl_log0_3.id, tbl_log0_3.orderid, tbl_log0_3.info, tbl_log0_3.crt_time  
         Remote SQL: SELECT id, orderid, info, crt_time FROM public.tbl_log_3 WHERE ((id = 1))  
(13 rows)  
Time: 0.928 ms  
master=> explain verbose select * from tbl_log join tbl_user using (id) where tbl_log.orderid=1;  
                                                          QUERY PLAN                                                             
-------------------------------------------------------------------------------------------------------------------------------  
 Append  (cost=223.65..1098.94 rows=120 width=92)  
   ->  Hash Join  (cost=223.65..274.58 rows=30 width=92)  
         Output: tbl_log0_0.id, tbl_log0_0.orderid, tbl_log0_0.info, tbl_log0_0.crt_time, tbl_user_0.info, tbl_user_0.crt_time  
         Hash Cond: (tbl_user_0.id = tbl_log0_0.id)  
         ->  Foreign Scan on public.tbl_user_0  (cost=100.00..146.12 rows=1204 width=44)  
               Output: tbl_user_0.info, tbl_user_0.crt_time, tbl_user_0.id  
               Remote SQL: SELECT id, info, crt_time FROM public.tbl_user  
         ->  Hash  (cost=123.59..123.59 rows=5 width=52)  
               Output: tbl_log0_0.id, tbl_log0_0.orderid, tbl_log0_0.info, tbl_log0_0.crt_time  
               ->  Append  (cost=100.00..123.59 rows=5 width=52)  
                     ->  Foreign Scan on public.tbl_log0_0  (cost=100.00..123.56 rows=5 width=52)  
                           Output: tbl_log0_0.id, tbl_log0_0.orderid, tbl_log0_0.info, tbl_log0_0.crt_time  
                           Remote SQL: SELECT id, orderid, info, crt_time FROM public.tbl_log_0 WHERE ((orderid = 1))  
   ->  Hash Join  (cost=223.65..274.58 rows=30 width=92)  
         Output: tbl_log1_0.id, tbl_log1_0.orderid, tbl_log1_0.info, tbl_log1_0.crt_time, tbl_user_1.info, tbl_user_1.crt_time  
         Hash Cond: (tbl_user_1.id = tbl_log1_0.id)  
         ->  Foreign Scan on public.tbl_user_1  (cost=100.00..146.12 rows=1204 width=44)  
               Output: tbl_user_1.info, tbl_user_1.crt_time, tbl_user_1.id  
               Remote SQL: SELECT id, info, crt_time FROM public.tbl_user  
         ->  Hash  (cost=123.59..123.59 rows=5 width=52)  
               Output: tbl_log1_0.id, tbl_log1_0.orderid, tbl_log1_0.info, tbl_log1_0.crt_time  
               ->  Append  (cost=100.00..123.59 rows=5 width=52)  
                     ->  Foreign Scan on public.tbl_log1_0  (cost=100.00..123.56 rows=5 width=52)  
                           Output: tbl_log1_0.id, tbl_log1_0.orderid, tbl_log1_0.info, tbl_log1_0.crt_time  
                           Remote SQL: SELECT id, orderid, info, crt_time FROM public.tbl_log_0 WHERE ((orderid = 1))  
   ->  Hash Join  (cost=223.65..274.58 rows=30 width=92)  
         Output: tbl_log2_0.id, tbl_log2_0.orderid, tbl_log2_0.info, tbl_log2_0.crt_time, tbl_user_2.info, tbl_user_2.crt_time  
         Hash Cond: (tbl_user_2.id = tbl_log2_0.id)  
         ->  Foreign Scan on public.tbl_user_2  (cost=100.00..146.12 rows=1204 width=44)  
               Output: tbl_user_2.info, tbl_user_2.crt_time, tbl_user_2.id  
               Remote SQL: SELECT id, info, crt_time FROM public.tbl_user  
         ->  Hash  (cost=123.59..123.59 rows=5 width=52)  
               Output: tbl_log2_0.id, tbl_log2_0.orderid, tbl_log2_0.info, tbl_log2_0.crt_time  
               ->  Append  (cost=100.00..123.59 rows=5 width=52)  
                     ->  Foreign Scan on public.tbl_log2_0  (cost=100.00..123.56 rows=5 width=52)  
                           Output: tbl_log2_0.id, tbl_log2_0.orderid, tbl_log2_0.info, tbl_log2_0.crt_time  
                           Remote SQL: SELECT id, orderid, info, crt_time FROM public.tbl_log_0 WHERE ((orderid = 1))  
   ->  Hash Join  (cost=223.65..274.58 rows=30 width=92)  
         Output: tbl_log3_0.id, tbl_log3_0.orderid, tbl_log3_0.info, tbl_log3_0.crt_time, tbl_user_3.info, tbl_user_3.crt_time  
         Hash Cond: (tbl_user_3.id = tbl_log3_0.id)  
         ->  Foreign Scan on public.tbl_user_3  (cost=100.00..146.12 rows=1204 width=44)  
               Output: tbl_user_3.info, tbl_user_3.crt_time, tbl_user_3.id  
               Remote SQL: SELECT id, info, crt_time FROM public.tbl_user  
         ->  Hash  (cost=123.59..123.59 rows=5 width=52)  
               Output: tbl_log3_0.id, tbl_log3_0.orderid, tbl_log3_0.info, tbl_log3_0.crt_time  
               ->  Append  (cost=100.00..123.59 rows=5 width=52)  
                     ->  Foreign Scan on public.tbl_log3_0  (cost=100.00..123.56 rows=5 width=52)  
                           Output: tbl_log3_0.id, tbl_log3_0.orderid, tbl_log3_0.info, tbl_log3_0.crt_time  
                           Remote SQL: SELECT id, orderid, info, crt_time FROM public.tbl_log_0 WHERE ((orderid = 1))  
(49 rows)  
Time: 1.575 ms  
master=> explain verbose select * from tbl_log join tbl_user using (id) ;  
                                                          QUERY PLAN                                                             
-------------------------------------------------------------------------------------------------------------------------------  
 Append  (cost=1058.55..6333.02 rows=103736 width=92)  
   ->  Merge Join  (cost=1058.55..1453.58 rows=25934 width=92)  
         Output: tbl_log0_0.id, tbl_log0_0.orderid, tbl_log0_0.info, tbl_log0_0.crt_time, tbl_user_0.info, tbl_user_0.crt_time  
         Merge Cond: (tbl_user_0.id = tbl_log0_0.id)  
         ->  Sort  (cost=207.73..210.74 rows=1204 width=44)  
               Output: tbl_user_0.info, tbl_user_0.crt_time, tbl_user_0.id  
               Sort Key: tbl_user_0.id  
               ->  Foreign Scan on public.tbl_user_0  (cost=100.00..146.12 rows=1204 width=44)  
                     Output: tbl_user_0.info, tbl_user_0.crt_time, tbl_user_0.id  
                     Remote SQL: SELECT id, info, crt_time FROM public.tbl_user  
         ->  Sort  (cost=850.83..861.60 rows=4308 width=52)  
               Output: tbl_log0_0.id, tbl_log0_0.orderid, tbl_log0_0.info, tbl_log0_0.crt_time  
               Sort Key: tbl_log0_0.id  
               ->  Append  (cost=100.00..590.78 rows=4308 width=52)  
                     ->  Foreign Scan on public.tbl_log0_0  (cost=100.00..142.31 rows=1077 width=52)  
                           Output: tbl_log0_0.id, tbl_log0_0.orderid, tbl_log0_0.info, tbl_log0_0.crt_time  
                           Remote SQL: SELECT id, orderid, info, crt_time FROM public.tbl_log_0  
                     ->  Foreign Scan on public.tbl_log0_1  (cost=100.00..142.31 rows=1077 width=52)  
                           Output: tbl_log0_1.id, tbl_log0_1.orderid, tbl_log0_1.info, tbl_log0_1.crt_time  
                           Remote SQL: SELECT id, orderid, info, crt_time FROM public.tbl_log_1  
                     ->  Foreign Scan on public.tbl_log0_2  (cost=100.00..142.31 rows=1077 width=52)  
                           Output: tbl_log0_2.id, tbl_log0_2.orderid, tbl_log0_2.info, tbl_log0_2.crt_time  
                           Remote SQL: SELECT id, orderid, info, crt_time FROM public.tbl_log_2  
                     ->  Foreign Scan on public.tbl_log0_3  (cost=100.00..142.31 rows=1077 width=52)  
                           Output: tbl_log0_3.id, tbl_log0_3.orderid, tbl_log0_3.info, tbl_log0_3.crt_time  
                           Remote SQL: SELECT id, orderid, info, crt_time FROM public.tbl_log_3  
   ->  Merge Join  (cost=1058.55..1453.58 rows=25934 width=92)  
         Output: tbl_log1_0.id, tbl_log1_0.orderid, tbl_log1_0.info, tbl_log1_0.crt_time, tbl_user_1.info, tbl_user_1.crt_time  
         Merge Cond: (tbl_user_1.id = tbl_log1_0.id)  
         ->  Sort  (cost=207.73..210.74 rows=1204 width=44)  
               Output: tbl_user_1.info, tbl_user_1.crt_time, tbl_user_1.id  
               Sort Key: tbl_user_1.id  
               ->  Foreign Scan on public.tbl_user_1  (cost=100.00..146.12 rows=1204 width=44)  
                     Output: tbl_user_1.info, tbl_user_1.crt_time, tbl_user_1.id  
                     Remote SQL: SELECT id, info, crt_time FROM public.tbl_user  
         ->  Sort  (cost=850.83..861.60 rows=4308 width=52)  
               Output: tbl_log1_0.id, tbl_log1_0.orderid, tbl_log1_0.info, tbl_log1_0.crt_time  
               Sort Key: tbl_log1_0.id  
               ->  Append  (cost=100.00..590.78 rows=4308 width=52)  
                     ->  Foreign Scan on public.tbl_log1_0  (cost=100.00..142.31 rows=1077 width=52)  
                           Output: tbl_log1_0.id, tbl_log1_0.orderid, tbl_log1_0.info, tbl_log1_0.crt_time  
                           Remote SQL: SELECT id, orderid, info, crt_time FROM public.tbl_log_0  
                     ->  Foreign Scan on public.tbl_log1_1  (cost=100.00..142.31 rows=1077 width=52)  
                           Output: tbl_log1_1.id, tbl_log1_1.orderid, tbl_log1_1.info, tbl_log1_1.crt_time  
                           Remote SQL: SELECT id, orderid, info, crt_time FROM public.tbl_log_1  
                     ->  Foreign Scan on public.tbl_log1_2  (cost=100.00..142.31 rows=1077 width=52)  
                           Output: tbl_log1_2.id, tbl_log1_2.orderid, tbl_log1_2.info, tbl_log1_2.crt_time  
                           Remote SQL: SELECT id, orderid, info, crt_time FROM public.tbl_log_2  
                     ->  Foreign Scan on public.tbl_log1_3  (cost=100.00..142.31 rows=1077 width=52)  
                           Output: tbl_log1_3.id, tbl_log1_3.orderid, tbl_log1_3.info, tbl_log1_3.crt_time  
                           Remote SQL: SELECT id, orderid, info, crt_time FROM public.tbl_log_3  
   ->  Merge Join  (cost=1058.55..1453.58 rows=25934 width=92)  
         Output: tbl_log2_0.id, tbl_log2_0.orderid, tbl_log2_0.info, tbl_log2_0.crt_time, tbl_user_2.info, tbl_user_2.crt_time  
         Merge Cond: (tbl_user_2.id = tbl_log2_0.id)  
         ->  Sort  (cost=207.73..210.74 rows=1204 width=44)  
               Output: tbl_user_2.info, tbl_user_2.crt_time, tbl_user_2.id  