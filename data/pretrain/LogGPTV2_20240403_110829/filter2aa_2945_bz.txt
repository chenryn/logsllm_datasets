### Handling Age-Restricted Items in Orders

When placing an order that includes age-restricted items, follow these steps:

1. **Switch to the Application and Create a New Order:**
   - If your order contains any age-restricted items, switch back to the application and create a new order that includes one or more of these items.

2. **Examine the Audit File:**
   - Open the `audit-nnnnnn.xml` file using Visual Studio.
   - This file lists the age-restricted items in the order along with the order number and date. The file is in XML format and should look similar to the following example:
     ```xml
     <Audit>
       <OrderNumber>123456</OrderNumber>
       <Date>2023-10-01</Date>
       <AgeRestrictedItems>
         <Item>Alcohol</Item>
         <Item>Tobacco</Item>
       </AgeRestrictedItems>
     </Audit>
     ```
   - Close the file in Visual Studio after examining the list.

3. **Examine the Dispatch File:**
   - Open the `dispatch-nnnnnn.txt` file using Notepad.
   - This file contains a summary of the order, including the order ID and value. It is a plain text file and should look similar to the following example:
     ```
     Order ID: 123456
     Value: $100.00
     ```
   - Close Notepad and return to Visual Studio 2017. Stop debugging if necessary.

### Project Structure in Visual Studio

The solution in Visual Studio consists of several projects:

- **Delegates:**
  - Contains the main application. The `MainPage.xaml` file defines the user interface, and the `MainPage.xaml.cs` file contains the application logic.
  
- **AuditService:**
  - Implements the auditing process. It is packaged as a class library and contains a single class named `Auditor`. The `Auditor` class exposes a public method `AuditOrder` that examines an order and generates the `audit-nnnnnn.xml` file if the order contains any age-restricted items.

- **DeliveryService:**
  - Handles the shipping logic, also packaged as a class library. The `Shipper` class provides a public method `ShipOrder` that handles the shipping process and generates the dispatch note.

- **DataTypes:**
  - Contains the data types used by the other projects. The `Product` class defines the details of the products displayed by the application, and the `ProductsDataSource` class holds the product data (currently a small hard-coded set). The `Order` and `OrderItem` classes implement the structure of an order, where each order contains one or more order items.

### Examining the Delegates Project

1. **MainPage.xaml.cs:**
   - Display the `MainPage.xaml.cs` file in the Code and Text Editor window.
   - Examine the private fields and the `MainPage` constructor:
     ```csharp
     private Auditor auditor = null;
     private Shipper shipper = null;

     public MainPage()
     {
         ...
         this.auditor = new Auditor();
         this.shipper = new Shipper();
     }
     ```
   - The `auditor` and `shipper` fields contain references to instances of the `Auditor` and `Shipper` classes, respectively, and the constructor initializes these objects.

2. **CheckoutButtonClicked Method:**
   - Locate the `CheckoutButtonClicked` method, which runs when the user clicks the "Checkout" button to place an order:
     ```csharp
     private void CheckoutButtonClicked(object sender, RoutedEventArgs e)
     {
         try
         {
             // Perform the checkout processing
             if (this.requestPayment())
             {
                 this.auditor.AuditOrder(this.order);
                 this.shipper.ShipOrder(this.order);
             }
             ...
         }
         ...
     }
     ```
   - This method implements the checkout processing. It requests payment from the customer and then invokes the `AuditOrder` method of the `auditor` object followed by the `ShipOrder` method of the `shipper` object. Additional business logic can be added here as needed.

### Decoupling the Checkout Processing

To decouple the business processing for the checkout operation from the application, you will create a `CheckoutController` component. This component will implement the business logic for the checkout process and expose a delegate that enables the application to specify which components and methods should be included within this process.

#### Creating the CheckoutController Component

1. **Add a New Project:**
   - In Solution Explorer, right-click the `Delegates` solution, point to `Add`, and then click `New Project`.
   - In the `Add New Project` dialog box, under `Visual C#`, select the `Class Library (Universal Windows)` template. Name the project `CheckoutService` and click `OK`.

2. **Set Up the CheckoutController Class:**
   - Rename the `Class1.cs` file to `CheckoutController.cs`.
   - Add a reference to the `DataTypes` project in the `CheckoutService` project.
   - Add the following using directive to the `CheckoutController.cs` file:
     ```csharp
     using DataTypes;
     ```
   - Define a public delegate type called `CheckoutDelegate` and a public delegate called `CheckoutProcessing`:
     ```csharp
     public class CheckoutController
     {
         public delegate void CheckoutDelegate(Order order);
         public CheckoutDelegate CheckoutProcessing = null;
     }
     ```

3. **Move and Implement Methods:**
   - Cut the `requestPayment` method from the `MainPage` class and paste it into the `CheckoutController` class.
   - Add the `StartCheckoutProcessing` method to the `CheckoutController` class:
     ```csharp
     public void StartCheckoutProcessing(Order order)
     {
         // Perform the checkout processing
         if (this.requestPayment())
         {
             if (this.CheckoutProcessing != null)
             {
                 this.CheckoutProcessing(order);
             }
         }
     }
     ```

4. **Update the MainPage Class:**
   - Add a reference to the `CheckoutService` project in the `Delegates` project.
   - Add a private variable `checkoutController` of type `CheckoutController` to the `MainPage` class and initialize it to `null`.
   - Instantiate the `CheckoutController` component in the `MainPage` constructor and add references to the `AuditOrder` and `ShipOrder` methods:
     ```csharp
     public MainPage()
     {
         ...
         this.checkoutController = new CheckoutController();
         this.checkoutController.CheckoutProcessing += this.auditor.AuditOrder;
         this.checkoutController.CheckoutProcessing += this.shipper.ShipOrder;
     }
     ```
   - Update the `CheckoutButtonClicked` method to use the `CheckoutController`:
     ```csharp
     private void CheckoutButtonClicked(object sender, RoutedEventArgs e)
     {
         try
         {
             // Perform the checkout processing
             this.checkoutController.StartCheckoutProcessing(this.order);
             // Display a summary of the order
             ...
         }
         ...
     }
     ```

### Testing the Application

1. **Build and Run the Application:**
   - On the `Debug` menu, click `Start Debugging` to build and run the application.
   - Select some items (including at least one age-restricted item) and click `Checkout`.
   - Note the order number when the "Order Placed" message appears and click `Close`.

2. **Verify the Files:**
   - Switch to File Explorer and navigate to the `%USERPROFILE%\AppData\Local\Packages\yyy\LocalState` folder, where `yyy` is the GUID for the application.
   - Verify that a new `audit-nnnnnn.xml` file and `dispatch-nnnnnn.txt` file have been created, and examine them to ensure they contain the correct order details.

### Lambda Expressions and Delegates

Lambda expressions provide a concise way to define methods inline, especially useful for small, single-purpose methods. For example, in the automated factory scenario, you can use a lambda expression to adapt the `StopFolding` method:
```csharp
this.stopMachinery += (() => folder.StopFolding(0));
```
This lambda expression will call the `StopFolding` method with the appropriate parameter when the `stopMachinery` delegate is invoked.

### Enabling Notifications Using Events

Events allow you to define and trap significant actions and automatically invoke a delegate to handle the situation. You declare an event in a class intended to act as an event source. For example, in the automated factory, a `TemperatureMonitor` class can raise a `MachineOverheating` event if a machine exceeds its thermal radiation boundary.

#### Declaring an Event

You declare an event similarly to how you declare a field, but the type must be a delegate, and you must prefix the declaration with the `event` keyword:
```csharp
public event StopMachineryDelegate MachineOverheating;
```

#### Subscribing to an Event

You subscribe to an event using the `+=` operator. For example:
```csharp
tempMonitor.MachineOverheating += (() => { folder.StopFolding(0); });
tempMonitor.MachineOverheating += welder.FinishWelding;
tempMonitor.MachineOverheating += painter.PaintOff;
```

#### Unsubscribing from an Event

You unsubscribe from an event using the `-=` operator:
```csharp
tempMonitor.MachineOverheating -= (() => { folder.StopFolding(0); });
```

By following these steps, you can effectively manage and decouple the checkout process, ensuring that the application remains flexible and maintainable.