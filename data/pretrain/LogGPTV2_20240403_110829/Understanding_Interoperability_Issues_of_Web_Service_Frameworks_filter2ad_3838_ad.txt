JBossWS CXF 4.2.3 [11]
Microsoft WCF .NET 
Framework 
4.0.30319.17929 [12] 
gSOAP Toolkit 2.8.16 
[19] 
Zend Framework [20] 
suds Python 0.4 [21] 
1)  The  tool  does  not  compile  automatically.  A  script  was  added  to  perform  the  task;  2)
Compilation  performed  via  an  ant  task  generated  by  the  tool;  3)  Compilation  is  not  possible.
Client object instantiation was checked instead. 
Zend_Soap_Client 
suds Python client 
wsdl2h.exe and 
soapcpp2.exe 
VB .NET 
Jscript NET 
C++ 
PHP 
Python 
Yes1) 
N/A3) 
N/A3) 
wsdl.exe 
Yes1) 
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 08:26:18 UTC from IEEE Xplore.  Restrictions apply. 
classes available in each platform language (Java and C#) as 
input/output parameters of individual services, we used this 
step to exclude (from the evaluation) the services for which 
the  frameworks  were  not  able  to  generate  a  WSDL 
document. In the end, we were able to create 2489 service in 
Glassfish, 2248 in JBoss AS, and 2502 services in IIS. For 
the sake of the experiments, we optimistically assume that if 
the platform is unable to create the service it is due to the 
fact  that  the  class  cannot  be  used  as  part  of  the  service 
interface  as  the  server  platform  in  unable  to  handle  the 
specific data type and cannot bind it to any XSD data type 
in the WSDL document. 
b)  Client artifact generation 
After generating the WSDL document for all services, 
we  then  try  to  generate  client  artifacts  for  each  WSDL 
produced.  This  procedure  is  executed  not  only  with  the 
client-side artifact generation tool of the same framework at 
the server-side, but with all client-side frameworks selected 
for  testing.  The  goal  is  to  uncover  potential  artifact 
generation issues that can prevent developers from creating 
a functional web service client. 
c)  Client artifact compilation 
In this step we try to compile the artifacts generated in 
the previous step. Erratic generation tools, or tools using an 
incorrectly produced WSDL might silently reach this phase, 
having already produced the artifacts code without signaling 
a failure. If the artifacts cannot be compiled, it is a clear sign 
that  something  is  not  correct  and  must  be  analyzed  in  the 
classification step. 
d)  Results classification 
As referred, the analysis of the results targets the output 
production at each of the three previous steps described.  In 
general, we verify the existence of errors and warnings. An 
error  occurs  when  no  output  is  produced  after  executing  a 
given  approach  step  (the  error  may  be  signaled  by  the  tool 
being  used,  or  not).  A  warning  occurs  when  the  tool 
produces output but also points out some issue (e.g., unsafe 
operations being used), during its execution. Besides errors, 
a simple tool warning in one of the three steps may result in 
a potentially severe interoperability problem later on. 
After  the  service  description  generation  step  and  since 
the current WSDL generation tools did not produce a single 
warning during this step in our experimental evaluation, we 
used  a  WS-I  tool  to  check  the  service  interface  for  WS-I 
Basic Profile 1.1 compliance [9]. The goal is to understand
which service interfaces might generate a future problem and 
to give us an easier way of pinpointing that future problem to 
this  early  step.  As  such,  we  optimistically  assume,  at  this 
point, that a problematic WSDL can proceed through testing. 
A relevant aspect is that some frameworks do not support 
artifact compilation (i.e., the service proxies are dynamically 
generated  at  runtime).  In  these  cases,  and  to  keep  the 
communication  step  excluded  from  the  evaluation,  the 
results classification phase should test if the created objects 
can be instantiated without any error (in order to verify if this 
step produced the right output). 
Notice  that  errors  in  any  of  the  first  three  steps  of  the 
Testing  Phase  (i.e.,  Service  Description  Generation;  Client 
Artifact  Generation;  and  Client  Artifact  Compilation)  are 
quite disruptive. If one step results in an error, the next step 
will  not  be  performed.  This  means  that  if  a  WSDL  for  a 
the  Service 
given  service  cannot  be  created  during 
Description Generation Step, a  client  developer  will  not  be 
able to generate artifacts. In the same manner, a failure in the 
generation  of  artifacts  will  obviously 
the 
impossibility  to  compile  artifacts.  In  turn,  a  failure  during 
artifact compilation can also prevent the creation of the client 
and,  in  consequence,  the  invocation  and  execution  of  the 
service.  Thus,  these  steps  represent  clearly  interoperability-
critical points that must be analyzed. Obviously, and besides 
errors, a simple warning in one of the three steps may result 
in a potentially severe interoperability problem later on. Our 
goal  for  now  is  to  detect  and  mark  potential  issues  on  the 
very  first  critical  steps  of 
typical  web  services 
development  procedure  (which,  in  case  of  error,  prevent 
posterior  Communication  and  Execution  steps  from  being 
carried out successfully). 
result 
the 
in 
IV.  RESULTS AND DISCUSSION 
In this section we present the results of our experimental 
evaluation.  We  performed  interoperability  tests  using  the 
conditions described in Section III, leading to a total number 
of  79629  tests  executed.  The  tests  disclosed  a  quite  large 
number  of  errors  and  warnings  scattered  across  the  three 
different  steps  of  the  Testing  Phase.  Fig.  4  provides  an 
overview of the warnings and errors that we found in each 
step  of  the  Testing  Phase  and  per  each  server  framework. 
Table  III  presents  a  more  detailed  view  of  the  number  and 
type of issues detected in each step for each tool combination 
used. Please refer to Table III for the details on the overall 
numbers  presented  in  the  following  paragraphs.  Also,  full 
details can be found in [22]. 
As  we  can  see  in  Fig.  4,  in  the  Service  Description 
Generation Step the error count is zero, since we do not use 
the  14785  services  (out  of  a  total  of  22024)  for  which  the 
frameworks  were  unable  to  produce  a  WSDL.  Among  the 
remaining  7239  services,  (for  which  the  frameworks  were 
able to produce a WSDL) we have encountered a total of 86 
warnings (see also Table III), corresponding to services that 
do  not  pass  the  WS-I  compliance  test  [7].  From  these  86 
services, 80 belong to the .NET tests and only 4 services (of 
).,-
)).+
*%%)
')-.
''**
*'.
)+)
'
' %
&(
)
) %
'&
'*+
+ (%-
-%
%%%% %
% )
))))))
	

Figure 4.   Overview of the experimental results. 
"

 

 










*%%%
)%%%
(%%%
'%%%
&%%%
%
327327327
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 08:26:18 UTC from IEEE Xplore.  Restrictions apply. 
the 86) will reach the final step of the study without showing 
some kind of error. 
In  the  Client  Artifact  Generation  Step,  4763  tests 
produced at least one warning and 287 resulted in errors (out 
of the total 79629). The JScript .NET clients are responsible 
for  about  99.8%  of  all  warnings  due  to  an  incompatibility 
with the Java platforms (Metro and JBossWS) that generates 
warnings  at  every  execution  of  the  tool.  The  remaining 
warnings  correspond  to  other  tools  trying  to  generate 
artifacts  from  the  WSDL  documents  that  failed  the  WS-I 
check.  About  97%  of  the  errors  in  this  step  are  produced 
when  using  WSDL  documents  that  failed  the  WS-I  check. 
The remaining 3% are actually the result of processing WS-I 
compliant service interfaces. 
During  the  Client  Artifact  Compilation  Step  the  tools 
produced 14478 warnings. All of these are due to compiling 
the  artifacts  produced  by  Axis1  and  Axis2  (see  also  Table 
III) and are non-disruptive warnings, which refer to the use 
of ‚Äúunchecked or unsafe operations‚Äù. Regarding the errors in 
this  step,  we  detected  1301  tests  resulting  in  compilation 
errors  that  were,  in  most  cases,  due  to  generation  of  code 
carrying  naming  collisions  or  missing  parameters  and  even 
crashes of the compilation tool (the Jscript .NET compilation 
the  message  ‚Äú131 
tool  crashed 
INTERNAL COMPILER CRASH‚Äù).  The  compilation  of  the 
Axis1 and Jscript .NET artifacts account for the vast majority 
of  the  compilation  errors  (approximately  68%  and  30%, 
respectively).  The  remaining  errors  occur  when  compiling 
the Visual Basic .NET, Axis2 artifacts. 
A.  Main findings and trends  
tests,  with 
in  some 
the  experimental  evaluation. 
In this section we summarize the main findings observed 
the  Service 
during 
Description Generation Step  we  noticed  that,  under  certain 
conditions,  the  server  platforms  actually  publish  service 
descriptions,  even  when  the  service  interfaces  do  not  pass 
WS-I compliance. In our view, this should not occur as the 
servers are publishing a potentially problematic WSDL. This 
is confirmed by the fact that about 95.3% of the services that 
In 
that 
did not pass the WS-I compliance check also did not reach 
the final approach step without showing some kind of error. 
Despite  its  utility,  the  WS-I  compliance  check  is  not 
useful to detect all types of problematic WSDL documents. 
As  an  example,  we  encountered  2  WSDL  documents 
published  by  JBossWS  that  passed  the  WS-I  tests  and  still 
were unusable, since they did not describe any operation to 
be invoked by clients. A WSDL generation tool should fail 
or  at  least  show  a  warning  when  a  service  description 
document is created and misses critical information (such as 
operations).  In  fact,  we  advocate 
the  minimum 
occurrence  of  operation  elements  in  WSDL  XML  Schema 
definition [28] should be changed to 1 (currently is 0). This 
would allow tools to stop when such a problematic WSDL is 
created. Note that, despite this issue in JBossWS, the Metro 
framework in the GlassFish server signaled the problem by 
refusing  to  deploy  these  same  services,  which  is  a  more 
adequate behavior when the goal is reaching interoperability.  
The Client Artifact Generation Step is not very prone to 
errors, as visible in Fig. 4 and Table III. As referred, the vast 
majority  of  the  errors  were  caused  by  the  unusable  WSDL 
documents  mentioned  in  the  previous  paragraph.  This  is 
probably due to the fact that, in most cases, the generation of 
the clients is a very automated task, where each statement is 
translated to a specific piece of code, and this will obviously 
fail  when  something  quite  unexpected  is  being  processed 
(such  as  a  WSDL  without  operations).  Despite  this,  Axis1, 
Apache CXF and JBossWS did not signal any problem when 
using  the  WSDL  documents  without  operations,  which  is 
obviously  not  the  right  behavior  for  the  users  of  the  tools 
(since the tools are silently failing to produce usable code), 
and also shows the silent propagation of a severe issue to the 
client side. 
The  Client  Artifact  Compilation  Step  appears  to  be  a 
more error prone step, where we found the majority of errors 
(refer  to  Table  III  and  Fig.  4).  On  the  other  hand,  if  we 
exclude  the  Axis  platforms  warnings  (which  are  all  of  the 
same type and refer to the use of unchecked operations), the 
total  number  of  warnings  found  in  this  step  drops  to  zero. 
TABLE III.  
EXPERIMENTAL RESULTS 
WS-I Warnings 
Metro 
2 out of 2489 services 
Generation 
Compilation 
JBossWS CXF 
4 out of 2248 services 
WCF .NET 
80 out of 2502 services 
Generation 
Compilation 
Generation 
Compilation 
Client-side FW  Warning Errors  Warning Errors  Warning Errors  Warnings  Errors  Warnings  Errors  Warnings  Errors 
Metro 
Apache Axis1 
Apache Axis2 
Apache-CXF 
JBoss 
.NET C#: 
.NET Visual Basic 
.NET JScript 
gSOAP 
Zend Framework 
Suds Python 
a) WSDL for the service based on the class javax.xml.ws.wsaddressing.W3CEndpointReference fails the WS-I check; b) WSDL for the service based on the class java.text.SimpleDateFormat fails the 
WS-I check; c) Services based on  java.util.concurrent.Future and javax.xml.ws.Response are WS-I compliant but do not provide operations that can be invoked; d) WSDL for the service based on the 
class javax.xml.ws.wsaddressing.W3CEndpointReference fails the WS-I check; e) WSDL  for the service based on the class java.text.SimpleDateFormat fails the WS-I check; f) 77.NET services that fail 
the WS-I check; g) WS-I compliant services based on System.Data.DataTable and System.Data.DataTableCollection; h) WS-I compliant services based on System.Net.Sockets.SocketError. 
0  77f) 
0 
0 
0  77f) 
0  77f) 
1f) 
1f) 
1f) 
0 
0 
1 
3c),d) 
1d) 
2c) 
1d) 
1d) 
4c),d),e) 
4c),d),e) 
4c),d),e) 
0 
0 
1d) 
0 
2502 
2502 
0 
0 
0 
0 
0 
0 
- 
- 
1e) 
0 
0 
0 
0 
0 
0 
2248 
2c 
2c 
2c 
0 
0 
0 
0 
0 
0 
0 
2489 
0 
0 
0 
0 
2489 
2489 
0 