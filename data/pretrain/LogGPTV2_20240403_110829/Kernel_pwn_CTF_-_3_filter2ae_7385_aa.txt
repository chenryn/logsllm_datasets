# Kernel pwn CTF 入门 - 3
|
##### 译文声明
本文是翻译文章
译文仅供参考，具体内容表达以及含义原文为准。
## 四、小试牛刀
> 接上文 [Kernel pwn CTF 入门 – 2](https://www.anquanke.com/post/id/255883)
###  5\. kernel 的 UAF 利用
####  b. Kernel ROP
#####  1) 终端设备类型简介
在 Linux 中 `/dev` 目录下，终端设备文件通常有以下几种：
> 注意：以下这些类型的终端不一定在所有发行版 linux 上都存在，例如 `/dev/ttyprintk` 就不存在于我的 kali linux 上。
  1. 串行端口终端 （ **/dev/ttySn** ） ：是用于与串行端口连接的终端设备，类似于 Windows 下的 COM。
  2. 控制终端 （ **/dev/tty** ） ： **当前进程** 的控制终端设备文件，类似于符号链接，会具体对应至某个实际终端文件。  
> 可以使用 `tty` 命令查看其具体对应的终端设备，也可以使用 `ps -ax` 来查看进程与控制终端的映射关系。
> 在 qemu 下，可以通过指定`-append 'console=ttyS0'` 参数，设置 linux kernel tty 映射至
> `/dev/ttySn` 上。
  3. 虚拟终端与控制台 （ **/dev/ttyN, /dev/console** ） ：在Linux 系统中，计算机显示器通常被称为 **控制台终端** (Console)。而在 linux **初始字符界面** 下，为了同时处理多任务，自然需要多个终端的切换。这些终端由于是用软件来模拟以前硬件的方式，是虚拟出来的，因此也称为 **虚拟终端** 。  
> 虚拟终端和控制台的差别需要参考历史。在以前，终端是通过串口连接上的，不是计算机本身就有的设备，而控制台是计算机本身就有的设备，一个计算机只有一个控制台。
>
> 简单的说， **控制台是直接和计算机相连接的原生设备，终端是通过电缆、网络等等和主机连接的设备**
>
> 计算机启动的时候，所有的信息都会显示到控制台上，而不会显示到终端上。也就是说，控制台是计算机的基本设备，而终端是附加设备。
>
> 由于控制台也有终端一样的功能，控制台有时候也被模糊的统称为终端。
>
> 计算机操作系统中，与终端不相关的信息，比如内核消息，后台服务消息，都可以显示到控制台上，但不会显示到终端上。
>
> 由于时代的发展，硬件资源的丰富，终端和控制台的概念已经慢慢淡化。
这种虚拟终端的切换与我们X11中图形界面中多个终端的切换不同，它属于 **更高级别终端的切换** 。我们日常所使用的图形界面下的终端，属于某个
**虚拟图形终端界面** 下的多个 **伪终端** 。
可以通过键入 `Ctrl+Alt+F1` （其中的 F **x** 表示切换至第 **x** 个终端，例如 F1）来切换虚拟终端。
> tty0则是当前所使用虚拟终端的一个别名，系统所产生的信息会发送到该终端上。
默认情况下，F1-F6均为字符终端界面，F7-F12为图形终端界面。
> 当切换至字符终端界面后，可再次键入 `Ctrl+Alt+F7`切回图形终端界面。
  4. 伪终端 （ **/dev/pty** ）： **伪终端(Pseudo Terminal)** 是成对的 **逻辑** 终端设备，其行为与普通终端非常相似。所不同的是伪终端没有对应的硬件设备，主要目的是实现双向信道，为其他程序提供终端形式的接口。当我们远程连接到主机时，与主机进行交互的终端的类型就是伪终端，而且日常使用的图形界面中的多个终端也全都是伪终端。伪终端的两个终端设备分别称为 master 设备和 slave 设备，其中 slave 设备的行为与普通终端无异。当某个程序把某个 master 设备看作终端设备并进行读写，则该读写操作将实际反应至该逻辑终端设备所对应的另一个 slave 设备。通常 slave 设备也会被其他程序用于读写。因此这两个程序便可以通过这对逻辑终端来进行通信。 
现代 linux 主要使用 **UNIX 98 pseudoterminals** 标准，即 **pts(pseudo-terminal slave,
/dev/pts/n)** 和 **ptmx(pseudo-terminal master, /dev/ptmx)** 搭配来实现 pty。
伪终端的使用一会将在下面详细说明。
  5. 其他终端 （诸如 **/dev/ttyprintk** 等等）。这类终端通常是用于特殊的目的，例如 **/dev/ttyprintk** 直接与内核缓冲区相连：
#####  2) 伪终端的使用
伪终端的具体实现分为两种
  * UNIX 98 pseudoterminals，涉及 `/dev/ptmx` （master）和 `/dev/pts/*`（slave）
  * 老式 BSD pseudoterminals，涉及 `/dev/pty[p-za-e][0-9a-f]`(master) 和 `/dev/tty[p-za-e][0-9a-f]`(slave)
这里我们只介绍 UNIX 98 pseudoterminals。
`/dev/ptmx`这个设备文件主要用于打开一对伪终端设备。当某个进程 open 了 `/dev/ptmx`后，该进程将获取到一个指向
**新伪终端master设备（PTM）** 的文件描述符，同时对应的 **新伪终端slave设备（PTS）** 将在
`/dev/pts/`下被创建。不同进程打开 `/dev/ptmx` 后所获得到的 PTM、PTS 都是互不相同的。
进程打开 /dev/ptmx 有两种方式
  1. 手动使用 `open("/dev/ptmx", O_RDWR | O_NOCTTY)` 打开
  2. 通过标准库函数 `getpt`
        #define _GNU_SOURCE             /* See feature_test_macros(7) */
    #include 
    int getpt(void);
  3. 通过标准库函数 `posix_openpt`
        #include 
    #include 
    int posix_openpt(int flags);
> 上述几种方式完全等价，只是 **使用标准库函数** 的方式会更通用一点，因为 ptmx 在某些 linux 发行版上可能不位于
> `/dev/ptmx`，同时标准库函数还会做其他额外的检测逻辑。
进程可以调用`ptsname(ptm_fd)`来获取到对应的 PTS 的路径。
需要注意的是，必须先顺序调用以下两个函数后才能打开 PTS:
  1. `grantpt(ptm_fd)`：更改 slave 的模式和所有者，获取其所有权
  2. `unlockpt(ptm_fd)`：对 slave 解锁
伪终端主要用于两个应用场景
  * 终端仿真器，为其他远程登录程序（例如 ssh）提供终端功能
  * 可用于向 **通常拒绝从管道读取输入** 的程序（例如 su 和 passwd）发送输入
上述几步是使用伪终端所必须调用的一些底层函数。但在实际的伪终端编程中，更加常用的是以下几个函数：
> 我们可以通过阅读这些函数的源代码来了解伪终端的使用方式。
  * `openpty`：找到一个空闲的伪终端，并将打开好后的 master 和 slave 终端的文件描述符返回。源代码如下: 
        /* Create pseudo tty master slave pair and set terminal attributes
       according to TERMP and WINP.  Return handles for both ends in
       AMASTER and ASLAVE, and return the name of the slave end in NAME.  */
    int
    openpty (int *amaster, int *aslave, char *name,
      const struct termios *termp, const struct winsize *winp)
    {
    #ifdef PATH_MAX
      char _buf[PATH_MAX];
    #else
      char _buf[512];
    #endif
      char *buf = _buf;
      int master, ret = -1, slave = -1;
      *buf = '\0';
      master = getpt ();
      if (master == -1)
        return -1;
      if (grantpt (master))
        goto on_error;
      if (unlockpt (master))
        goto on_error;
    #ifdef TIOCGPTPEER
      /* Try to allocate slave fd solely based on master fd first. */
      slave = ioctl (master, TIOCGPTPEER, O_RDWR | O_NOCTTY);
    #endif
      if (slave == -1)
        {
          /* Fallback to path-based slave fd allocation in case kernel doesn't
           * support TIOCGPTPEER.
           */
          if (pts_name (master, &buf, sizeof (_buf)))
            goto on_error;
          slave = open (buf, O_RDWR | O_NOCTTY);
          if (slave == -1)
            goto on_error;
        }
      /* XXX Should we ignore errors here?  */
      if (termp)
        tcsetattr (slave, TCSAFLUSH, termp);
    #ifdef TIOCSWINSZ
      if (winp)
        ioctl (slave, TIOCSWINSZ, winp);
    #endif
      *amaster = master;
      *aslave = slave;
      if (name != NULL)
        {
          if (*buf == '\0')
            if (pts_name (master, &buf, sizeof (_buf)))
              goto on_error;
          strcpy (name, buf);
        }
      ret = 0;
     on_error:
      if (ret == -1) {
        close (master);
        if (slave != -1)
          close (slave);
      }
      if (buf != _buf)
        free (buf);
      return ret;
    }
  * `login_tty`：用于实现在指定的终端上启动登录会话。源代码如下所示： 
        int login_tty (int fd)
    {
        // 启动新会话
      (void) setsid();
        // 设置为当前 fd 为控制终端
    #ifdef TIOCSCTTY
      if (ioctl(fd, TIOCSCTTY, (char *)NULL) == -1)
        return (-1);
    #else
      {
        /* This might work.  */
        char *fdname = ttyname (fd);
        int newfd;
        if (fdname)
          {
            if (fd != 0)
        (void) close (0);
            if (fd != 1)
        (void) close (1);
            if (fd != 2)
        (void) close (2);
            newfd = open (fdname, O_RDWR);
            (void) close (newfd);
          }
      }
    #endif
      while (dup2(fd, 0) == -1 && errno == EBUSY)
        ;
      while (dup2(fd, 1) == -1 && errno == EBUSY)
        ;
      while (dup2(fd, 2) == -1 && errno == EBUSY)
        ;
      if (fd > 2)
        (void) close(fd);
      return (0);
    }
  * `forkpty`：整合了`openpty`, `fork` 和 `login_tty`，在网络服务程序可用于为新登录用户打开一对伪终端，并创建相应的会话子进程。源代码如下： 
        int
    forkpty (int *amaster, char *name, const struct termios *termp,
       const struct winsize *winp)
    {
      int master, slave, pid;
      // 启动新 pty
      if (openpty (&master, &slave, name, termp, winp) == -1)
        return -1;
      switch (pid = fork ())
        {
        case -1:
          close (master);
          close (slave);
          return -1;
        case 0:
          /* Child.  */
          close (master);
          if (login_tty (slave))
      _exit (1);
          return 0;
        default:
          /* Parent.  */
          *amaster = master;
          close (slave);
          return pid;
        }
    }
#####  3) tty_struct 结构的利用
当我们执行 `open("/dev/ptmx", flag)` 时，内核会通过以下函数调用链，分配一个 `struct tty_struct` 结构体：
    ptmx_open (drivers/tty/pty.c)
    -> tty_init_dev (drivers/tty/tty_io.c)
      -> alloc_tty_struct (drivers/tty/tty_io.c)
`struct tty_struct` 的结构如下所示：
> sizeof(struct tty_struct) == 0x2e0
    struct tty_struct {
      int  magic;
      struct kref kref;
      struct device *dev;
      struct tty_driver *driver;
      const struct tty_operations *ops;
      int index;
      /* Protects ldisc changes: Lock tty not pty */
      struct ld_semaphore ldisc_sem;
      struct tty_ldisc *ldisc;
      struct mutex atomic_write_lock;
      struct mutex legacy_mutex;
      struct mutex throttle_mutex;
      struct rw_semaphore termios_rwsem;
      struct mutex winsize_mutex;
      spinlock_t ctrl_lock;
      spinlock_t flow_lock;
      /* Termios values are protected by the termios rwsem */
      struct ktermios termios, termios_locked;
      struct termiox *termiox;  /* May be NULL for unsupported */
      char name[64];
      struct pid *pgrp;    /* Protected by ctrl lock */
      struct pid *session;
      unsigned long flags;
      int count;
      struct winsize winsize;    /* winsize_mutex */
      unsigned long stopped:1,  /* flow_lock */
              flow_stopped:1,
              unused:BITS_PER_LONG - 2;
      int hw_stopped;
      unsigned long ctrl_status:8,  /* ctrl_lock */
              packet:1,
              unused_ctrl:BITS_PER_LONG - 9;
      unsigned int receive_room;  /* Bytes free for queue */
      int flow_change;
      struct tty_struct *link;
      struct fasync_struct *fasync;