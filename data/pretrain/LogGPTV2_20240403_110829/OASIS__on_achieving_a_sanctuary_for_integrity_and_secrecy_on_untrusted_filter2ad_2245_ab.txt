+
X
Certy(x, K+
X )
sign message m with party X’s private key K−
X
verify signature σ on message m using party
X’s public key K+
X
certiﬁcate issued by y that binds the identity
x to the public key K+
X
key derivation function (KDF), which accepts as inputs an
owner supplied seed, So, and the PUF-derived secret root
key, Kp. This master processor secret, Kpo, can then be
used, in turn, to derive symmetric keys for bulk encryption,
authentication, and asymmetric operations. The details are
provided in Section 4.1.
All keys are stored inside the CPU in a set of special pur-
pose cache registers (CR.∗) which are only available within
the OASIS environment and only accessible by the OASIS
instructions. Table 2 lists the keys stored in CR.∗. Observe
that the root key, Kp, is only used for the derivation of the
master processor secret. More importantly, the entire key
hierarchy is based on an owner seed (So), enabling person-
alization and device transferability.
ISE Overview and Flow. Next, we describe how the
PUF-based root-of-trust is used to enable the desired secu-
rity objectives of Section 2.2 by deﬁning ﬁve new instruc-
tions: init[], create[], launch[], unbind[], and bind[].
We distinguish between three stages in the life cycle of the
CPU. The ﬁrst stage is performed by the hardware manufac-
turer (Figure 1(a)). After manufacture, the HWM initializes
the master processor key Kp by calling init[]. The output
of this operation is helper data he and a hash H(pe, he),
15Table 2: Variables used in Instruction Set and Protocol.
Hidden Variables: values accessible by processor
IEE entry
IEE entry
IEE entry
init[]
create[]
launch[]
Raw PUF response
Root key generated from PUF
pe
Kp
So
Secret seed value set by platform owner
IEE exit
IEE exit
unbind[]
p∗,q∗
Primes corresponding to an RSA private key
CR.Kpo Master platform secret for a speciﬁc owner
seed
CR.Kpo auth
Platform key for authenticating data from un-
trusted storage
CR.Kpo encr
Platform key for encrypting data before trans-
fer to untrusted storage
CR.Kpo code
Platform key used to derive code speciﬁc keys
CR.Spo bind
Platform binding secret used to derive asym-
metric binding keys
CR.K−1
po bind
Platform private binding key, derived deter-
ministically from CR.Spo bind
CR.P CR Platform conﬁguration registers
CR.KC
Unique cryptographic key for code C′
Visible Variables: values accessible by software
K+
po bind
Platform public binding key, derived deter-
ministically from CR.Spo bind
he Helper data used for noise reduction of pe
hP K
Helper data used for generating asymmetric
keys
which is published and available to anyone using the de-
vice. We assume that the function init[] can be called
only once or a limited number of times to prevent attacks
that exploit repeated invocations of the generator function
f_init_PUF[] (described below) to learn pe [9]. Given that
the HWM does not have control of the PUF response pe (or
by extension Kp as it is derived from pe), the init[] instruc-
tion enables the limited trust (P 1.5), low cost (P 2.1), self
contained (P 2.2), and the minimal TCB (P 3.1) properties
of Section 2.2.
The second stage corresponds to the set-up of the key
hierarchy for OASIS, performed by the device owner (Fig-
ure 1(b)). This is accomplished by calling the create[]
instruction, whose main purpose is to derive symmetric and
asymmetric keys. These keys will be used to exchange conﬁ-
dential and authenticated messages between the prover (de-
vice owner) and the veriﬁer (user) and to guarantee external
veriﬁability (P 1.1). The main output of the instruction is a
public key, which has been derived from the PUF-based root
key Kp and a seed So known only to the device owner. This
allows for transferability of the platform (P 1.4) as a new
device owner can create his/her own public/private keypair
(K +
o. Fur-
thermore, even though the device owner initiates generation
of the public/private keypair, only the CPU can access the
private key and thus decrypt messages encrypted with the
public key.
po bind) by choosing a diﬀerent seed S′
po bind, K −1
The third and last stage corresponds to the execution of
code on the device by the user (Figure 1(c)). Users will
launch the code to be executed by issuing the launch[]
instruction. This instruction populates the CR.∗ registers
with the symmetric keys derived from the PUF helper data
he, the device owner’s seed So, and the public key informa-
(a)
(b)
bind[]
IEE exit
(c)
Figure 1: OASIS session during (a) initialization by
the manufacturer, (b) setup by the device owner,
and (c) code execution by the user.
tion generated using create[] in the previous stage. Then,
the unbind[] instruction can be called to check the input’s
integrity with respect to a code-speciﬁc key and decrypt any
input whose conﬁdentiality is preserved by the veriﬁer. The
instruction provides two options, one using public-key and
one using symmetric-key primitives. The asymmetric option
is used the ﬁrst time the application is called to transmit a
secret symmetric key, KV P , only known to the veriﬁer (user)
of the platform P . After this initial set-up, the veriﬁer can
use fast symmetric-key operations to verify integrity and
conﬁdentiality of its data (P 3.3). At this point the code C
can be executed in the isolated execution environment, state
is saved (and encrypted if desired), and integrity informa-
tion is computed on the state using bind[] (P 1.3). Finally,
all OASIS memory and internal registers are cleared out,
and control is returned to the OS. Observe that any pro-
gram can in principle be executed in a secure environment
using these last three instructions, providing for a minimal
and simple programming interface (P 3.2). Furthermore, the
bind[] and unbind[] instructions, together with the key hi-
erarchy derived with the help of create[], enable external
veriﬁability (P 1.1) and program state binding (P 1.2), not
only to a particular program but also to a speciﬁc CPU, a
property unique to OASIS.
4.1 OASIS Functions and Instructions
We describe the functions and instructions used in the
design of OASIS. We make a distinction between functions
(which are only internally available to instructions) and in-
structions, (which are externally available for call by execut-
ing software).3 In practice, functions and instructions might
be implemented as digital logic, integrity-checked ﬁrmware,
microcode, or another process-speciﬁc mechanism.
4.1.1 Function Descriptions
We have omitted explicit pseudocode deﬁnitions for sev-
eral functions where the speciﬁc implementation is left to
the hardware manufacturer. Table 3 lists these functions.
The functionality of f_read_PUF[], f_init_PUF[] and f_
fuzzy_extract_PUF[] is brieﬂy discussed next.
3Instructions and functions are denoted using a ﬁxed-width
identiﬁer. Functions begin with ‘f_’. See Table 1.
16Table 3: Hardware Manufacturer Implemented Functions
pe ← f_read_PUF[]
he, H(pe, he) ← f_init_PUF[pe, rand]
Kp ← f_fuzzy_extract_PUF[pe, he, H(pe, he)]
p, q ← f_find_primes[Spo_bind, RSAParam.size]
po bind,
K+
K−1
po bind
← f_rsa_key_gen[p, q, e]
The function f_read_PUF[] does not accept any inputs;
it simply outputs the raw PUF response pe. We provide
two functions to interact with a (robust) fuzzy extractor [5,
9] as is common in the literature: (1) The function f_init_
PUF[pe, rand] accepts a raw PUF response pe and a random
value rand and outputs helper data he and a hash H(pe, he).
The helper data he can be used to reconstruct a uniformly
random value Kp from a noisy raw PUF response p′
e. The
hash is used to guarantee that only values of Kp constructed
with the original helper data he are used for further process-
ing in OASIS. (2) The function f_fuzzy_extract_PUF[p′
e,
he, H(pe, he)] accepts a (noisy) raw PUF response p′
e and
helper data he and outputs a uniformly random value Kp
which can be used as a cryptographic key. The function f_
fuzzy_extract_PUF[] checks for correctness in the value of
H(pe, he) and outputs a special symbol ⊥ if the input does
not correspond to the computed value. If the output is ⊥,
the instruction calling f_fuzzy_extract_PUF[] should take
appropriate action. In the case of OASIS, we clear all key
registers and abort execution.
We assume the use of existing hardware-supported fuzzy
extractor implementations [4, 30]. The functions f_read_
PUF[], f_init_PUF[] and f_fuzzy_extract_PUF[] are only
available to the OASIS hardware instructions deﬁned in Sec-
tion 4 and they cannot be accessed by any software directly.
Func 1 Spo bind ← f_create_sym_keys[So, he, H(pe, he)]
e, he, H(pe, he)]
p′
e ← f_read_PUF[]
Kp ← f_fuzzy_extract_PUF[p′
Clear p′
e
CR.Kpo ← KDFKp (So)
Spo bind ← KDFCR.Kpo (“bind”)
CR.Kpo auth ← KDFCR.Kpo (“auth”)
CR.Kpo encr ← KDFCR.Kpo (“encr”)
CR.Kpo code ← KDFCR.Kpo (“code”)
if Kp =⊥ then
Clear CR.∗
Spo bind ←⊥
Clear Kp
return Spo bind
Function 1. This function loads the helper parameter h′
e
and the hash H(pe, he) into memory. Next, the PUF is
read and the fuzzy extractor is invoked to generate the plat-
form symmetric secret key, Kp. Internally, the fuzzy extrac-
tor checks whether the inputs H(pe, he) and he correspond
with the reconstructed value. A special symbol ⊥ is output
should the values be diﬀerent.
The key Kp and the (device owner) supplied seed So are
used to derive the master processor secret, CR.Kpo. The
seed value So allows the device owner to personalize the
processor keys. The symmetric key CR.Kpo is used for the
derivation of four symmetric platform keys: (i) CR.Spo bind,
the platform binding secret, (ii) CR.Kpo auth, the platform
key used for authenticating data residing in untrusted stor-
age from prior invocations (iii) CR.Kpo encr, the platform
key used for encrypting data and (iv) CR.Kpo code, the plat-
form key used to derive code-speciﬁc keys.
In all cases,
keys are derived via a KDF, which in turn may use pseudo-
random functions (e.g., HMAC, CMAC) as building blocks.
Constructions of key derivation functions accepting secret
and public parameters are well-known [7, 22]. At the end
of the process, the function checks if the fuzzy extractor
returned the special symbol ⊥, which would indicate that
either the PUF response was too noisy and therefore it was
not possible to reconstruct Kp or H(pe, he) 6= H(p′
e). In
either case, all OASIS registers are cleared and the function
returns the special symbol ⊥ indicating failure. After the
check, Kp is cleared and Spo bind is returned.
e, h′
Func 2a hP K ← f_create_asym_keys[Spo_bind]
p, q, ← f_find_primes[Spo_bind, RSAParam.size]
po bind,
( K+
po bind) ← f_rsa_key_gen[p, q, e]
CR.K−1
po bind}CR.Kpo encr ← EncCR.Kpo encr (CR.K−1
po bind}CR.Kpo encr , K+
{K−1
τ ← MACCR.Kpo auth({K−1
po bind)
po bind)
hP K ← n{K−1
if Spo bind =⊥ then
po bind}CR.Kpo encr , K+
po bind, τo
Clear CR.∗
Clear hP K
return hP K
Function 2a. This function generates the processor asym-
metric keys. The f_find_primes[] function picks a random
seed value of size RSAParam.size and begins search until the
ﬁrst prime is found. The process is repeated for the second
prime using a new seed value. f_find_primes[] returns se-
cret primes, p and q. The function f_rsa_key_gen[] takes
the primes and a public exponent as inputs and generates
the keypair K +
po bind. Notice that the RSA private
key K −1
po bind is composed of p, q, and the inverse of the RSA
public exponent modφ(N ), where N = p · q. Methodolo-
gies to generate primes are well-understood and standard-
ized [18]. The RSA private key K −1
po bind is encrypted us-
ing CR.Kpo encr, and a message authentication code τ is
computed over this value and the corresponding public key
K +
po bind. Finally, a data store hP K , containing the asym-
metric keys and τ , is returned.
po bind, K −1
Func 2b hP K ← f_create_asym_keys[Spo_bind]
po bind,
( K+
po bind) ← f_ecc_key_gen[Spo_bind, ECCParam]
CR.K−1
po bind}CR.Kpo encr ← EncCR.Kpo encr (CR.K−1
po bind}CR.Kpo encr , K+
{K−1
τ ← MACCR.Kpo auth({K−1
po bind)
po bind)
hP K ← n{K−1
if Spo bind =⊥ then
po bind}CR.Kpo encr , K+
po bind, τo
Clear CR.∗
Clear hP K
return hP K
Function 2b. We describe an alternative implementation
of the f_create_asym_keys[] (Function 2a) using elliptic
curves in Function 2b. The implementation of this function
17is analogous but much more eﬃcient than its RSA counter-
part, since there is no prime search step. Key generation
is a single elliptic curve multiplication, which in general is
eﬃcient. In addition, this version has the advantage of small
area overhead, if support for asymmetric operations is im-
plemented at the hardware level. These advantages come
at the cost of a signiﬁcant increase in the time required to
perform a signature veriﬁcation operation (when compared
to RSA). It is up to the HWM to decide which implementa-
tion is more appropriate based on its own requirements and
constraints.
Func 3 K +
po bind ← f_read_asym_keys[hP K]
τ ′ ← MACCR.Kpo auth (cid:16)hP K .n{K−1
po bind}CR.Kpo encr , K+
po bindo(cid:17)
if hP K .τ 6= τ ′ then