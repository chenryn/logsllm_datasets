3.2 导入
我们已经了解如何把代码组织到包里，现在让我们来看看如何导入这些包，以便可以访问包
内的代码。import 语句告诉编译器到磁盘的哪里去找想要导入的包。导入包需要使用关键字
import，它会告诉编译器你想引用该位置的包内的代码。如果需要导入多个包，习惯上是将
import语句包装在一个导入块中，代码清单3-3展示了一个例子。
代码清单3-3 import声明块
import ( strings 包提供了很多关于字符串的操作，如查找、替换或
"fmt" 者变换。可以通过访问http://golang.org/pkg/strings/或者在终端
"strings"
运行godoc strings来了解更多关于strings包的细节。
)
编译器会使用Go环境变量设置的路径，通过引入的相对路径来查找磁盘上的包。标准库中
的包会在安装 Go 的位置找到。Go 开发者创建的包会在 GOPATH 环境变量指定的目录里查找。
GOPATH指定的这些目录就是开发者的个人工作空间。
举个例子。如果Go安装在/usr/local/go，并且环境变量GOPATH设置为/home/myproject:/home/
mylibraries，编译器就会按照下面的顺序查找net/http包：
/usr/local/go/src/pkg/net/http 这就是标准库源
/home/myproject/src/net/http
代码所在的位置。
/home/mylibraries/src/net/http
一旦编译器找到一个满足import语句的包，就停止进一步查找。有一件重要的事需要记
住，编译器会首先查找Go的安装目录，然后才会按顺序查找GOPATH变量里列出的目录。
如果编译器查遍 GOPATH 也没有找到要导入的包，那么在试图对程序执行 run 或者 build
的时候就会出错。本章后面会介绍如何通过go get命令来修正这种错误。
3.2.1 远程导入
目前的大势所趋是，使用分布式版本控制系统（Distributed Version Control Systems，DVCS）
来分享代码，如GitHub、Launchpad还有Bitbucket。Go语言的工具链本身就支持从这些网站及
类似网站获取源代码。Go工具链会使用导入路径确定需要获取的代码在网络的什么地方。
例如：
import "github.com/spf13/viper"
用导入路径编译程序时，go build命令会使用GOPATH的设置，在磁盘上搜索这个包。事实上，
这个导入路径代表一个URL，指向GitHub上的代码库。如果路径包含URL，可以使用Go工具链从
DVCS获取包，并把包的源代码保存在GOPATH指向的路径里与URL匹配的目录里。这个获取过程
使用go get命令完成。go get将获取任意指定的URL的包，或者一个已经导入的包所依赖的其
他包。由于go get的这种递归特性，这个命令会扫描某个包的源码树，获取能找到的所有依赖包。
3.2.2 命名导入
如果要导入的多个包具有相同的名字，会发生什么？例如，既需要 network/convert 包
来转换从网络读取的数据，又需要file/convert包来转换从文本文件读取的数据时，就会同
时导入两个名叫convert的包。这种情况下，重名的包可以通过命名导入来导入。命名导入是
指，在import语句给出的包路径的左侧定义一个名字，将导入的包命名为新名字。
例如，若用户已经使用了标准库里的fmt包，现在要导入自己项目里名叫fmt的包，就可
以通过代码清单3-4所示的命名导入方式，在导入时重新命名自己的包。
代码清单3-4 重命名导入
01 package main
02
03 import (
04 "fmt"
05 myfmt "mylib/fmt"
06 )
07
08 func main() {
3.3 函数init 41
09 fmt.Println("Standard Library")
10 myfmt.Println("mylib/fmt")
11 }
当你导入了一个不在代码里使用的包时，Go编译器会编译失败，并输出一个错误。Go开发
团队认为，这个特性可以防止导入了未被使用的包，避免代码变得臃肿。虽然这个特性会让人觉
得很烦，但Go开发团队仍然花了很大的力气说服自己，决定加入这个特性，用来避免其他编程
语言里常常遇到的一些问题，如得到一个塞满未使用库的超大可执行文件。很多语言在这种情况
会使用警告做提示，而Go开发团队认为，与其让编译器告警，不如直接失败更有意义。每个编
译过大型 C 程序的人都知道，在浩如烟海的编译器警告里找到一条有用的信息是多么困难的一件
事。这种情况下编译失败会更加明确。
有时，用户可能需要导入一个包，但是不需要引用这个包的标识符。在这种情况，可以使用
空白标识符_来重命名这个导入。我们下节会讲到这个特性的用法。
空白标识符 下划线字符（_）在Go语言里称为空白标识符，有很多用法。这个标识符用来抛弃不
想继续使用的值，如给导入的包赋予一个空名字，或者忽略函数返回的你不感兴趣的值。
3.3 函数 init
每个包可以包含任意多个init函数，这些函数都会在程序执行开始的时候被调用。所有被
编译器发现的init函数都会安排在main函数之前执行。init函数用在设置包、初始化变量
或者其他要在程序运行前优先完成的引导工作。
以数据库驱动为例，database 下的驱动在启动时执行 init 函数会将自身注册到 sql 包
里，因为sql包在编译时并不知道这些驱动的存在，等启动之后sql才能调用这些驱动。让我
们看看这个过程中init函数做了什么，如代码清单3-5所示。
代码清单3-5 init函数的用法
01 package postgres
02
03 import (
04 "database/sql"
创建一个postgres驱动的
05 )
实例。这里为了展现init的
06
07 func init() { 作用，没有展现其定义细节。
08 sql.Register("postgres", new(PostgresDriver))
09 }
这段示例代码包含在PostgreSQL数据库的驱动里。如果程序导入了这个包，就会调用init
函数，促使PostgreSQL的驱动最终注册到Go的sql包里，成为一个可用的驱动。
在使用这个新的数据库驱动写程序时，我们使用空白标识符来导入包，以便新的驱动会包含
到sql包。如前所述，不能导入不使用的包，为此使用空白标识符重命名这个导入可以让init
函数发现并被调度运行，让编译器不会因为包未被使用而产生错误。
现在我们可以调用sql.Open方法来使用这个驱动，如代码清单3-6所示。
代码清单3-6 导入时使用空白标识符作为包的别名
01 package main
02
03 import ( 使用空白标识符导入
04 "database/sql"
包，避免编译错误。
05
06 _ "github.com/goinaction/code/chapter3/dbdriver/postgres"
07 )
08 调用sql包提供的Open方法。该方法能
09 func main() {
工作的关键在于 postgres 驱动通过自
10 sql.Open("postgres", "mydb")
己的init函数将自身注册到了sql包。
11 }
3.4 使用 Go 的工具
在前几章里，我们已经使用过了go这个工具，但我们还没有探讨这个工具都能做哪些事情。
让我们进一步深入了解这个短小的命令，看看都有哪些强大的能力。在命令行提示符下，不带参
数直接键入go这个命令：
$ go
go这个工具提供了很多功能，如图3-1所示。
图3-1 go命令输出的帮助文本
通过输出的列表可以看到，这个命令包含一个编译器，这个编译器可以通过 build 命令启
动。正如预料的那样，build 和 clean 命令会执行编译和清理的工作。现在使用代码清单 3-2
里的源代码，尝试执行这些命令：
go build hello.go
当用户将代码签入源码库里的时候，开发人员可能并不想签入编译生成的文件。可以用
clean命令解决这个问题：
go clean hello.go
调用 clean后会删除编译生成的可执行文件。让我们看看 go工具的其他一些特性，以
及使用这些命令时可以节省时间的方法。接下来的例子中，我们会使用代码清单 3-7 中的样
例代码。
代码清单3-7 使用io包的工作
01 package main
02
03 import (
04 "fmt"
05 "io/ioutil"
06 "os"
07
08 "github.com/goinaction/code/chapter3/words"
09 )
10
11 // main是应用程序的入口
12 func main() {
13 filename := os.Args[1]
14
15 contents, err := ioutil.ReadFile(filename)
16 if err != nil {
17 fmt.Println(err)
18 return
19 }
20
21 text := string(contents)
22
23 count := words.CountWords(text)
24 fmt.Printf("There are %d words in your text．\n", count)
25 }
如果已经下载了本书的源代码，应该可以在$GOPATH/src/github.com/goinaction/code/chapter3/words
找到这个包。确保已经有了这段代码再进行后面的内容。
大部分 Go 工具的命令都会接受一个包名作为参数。回顾一下已经用过的命令，会想起 build
命令可以简写。在不包含文件名时，go工具会默认使用当前目录来编译。
go build
因为构建包是很常用的动作，所以也可以直接指定包：
go build github.com/goinaction/code/chapter3/wordcount
也可以在指定包的时候使用通配符。3 个点表示匹配所有的字符串。例如，下面的命令会编译
chapter3目录下的所有包：
go build github.com/goinaction/code/chapter3/...
除了指定包，大部分Go命令使用短路径作为参数。例如，下面两条命令的效果相同：
go build wordcount.go
go build .
要执行程序，需要首先编译，然后执行编译创建的 wordcount 或者 wordcount.exe 程
序。不过这里有一个命令可以在一次调用中完成这两个操作：
go run wordcount.go
go run命令会先构建wordcount.go里包含的程序，然后执行构建后的程序。这样可以节省
好多录入工作量。
做开发会经常使用 go build 和 go run 命令。让我们看另外几个可用的命令，以及这些
命令可以做什么。
3.5 进一步介绍 Go 开发工具
我们已经学到如何用go这个通用工具进行编译和执行。但这个好用的工具还有很多其他没
有介绍的诀窍。
3.5.1 go vet
这个命令不会帮开发人员写代码，但如果开发人员已经写了一些代码，vet命令会帮开发人
员检测代码的常见错误。让我们看看vet捕获哪些类型的错误。
Printf类函数调用时，类型匹配错误的参数。
定义常用的方法时，方法签名的错误。
错误的结构标签。
没有指定字段名的结构字面量。
让我们看看许多Go开发新手经常犯的一个错误。fmt.Printf函数常用来产生格式化输出，
不过这个函数要求开发人员记住所有不同的格式化说明符。代码清单3-8中给出的就是一个例子。
代码清单3-8 使用go vet
01 package main
02
03 import "fmt"
04
05 func main() {
06 fmt.Printf("The quick brown fox jumped over lazy dogs", 3.14)
07 }
这个程序要输出一个浮点数3.14，但是在格式化字符串里并没有对应的格式化参数。如果对
这段代码执行go vet，会得到如下消息：
go vet main.go
main.go:6: no formatting directive in Printf call
go vet工具不能让开发者避免严重的逻辑错误，或者避免编写充满小错的代码。不过，正
像刚才的实例中展示的那样，这个工具可以很好地捕获一部分常见错误。每次对代码先执行 go
vet再将其签入源代码库是一个很好的习惯。
3.5.2 Go 代码格式化
fmt是Go语言社区很喜欢的一个命令。fmt工具会将开发人员的代码布局成和Go源代码
类似的风格，不用再为了大括号是不是要放到行尾，或者用 tab（制表符）还是空格来做缩进而
争论不休。使用go fmt后面跟文件名或者包名，就可以调用这个代码格式化工具。fmt命令会
自动格式化开发人员指定的源代码文件并保存。下面是一个代码执行go fmt前和执行go fmt
后几行代码的对比：
if err != nil { return err }
在对这段代码执行go fmt后，会得到：
if err != nil {
return err
}
很多Go开发人员会配置他们的开发环境，在保存文件或者提交到代码库前执行go fmt。
如果读者喜欢这个命令，也可以这样做。
3.5.3 Go 语言的文档
还有另外一个工具能让 Go 开发过程变简单。Go 语言有两种方法为开发者生成文档。如果
开发人员使用命令行提示符工作，可以在终端上直接使用go doc命令来打印文档。无需离开终
端，即可快速浏览命令或者包的帮助。不过，如果开发人员认为一个浏览器界面会更有效率，可
以使用 godoc 程序来启动一个 Web 服务器，通过点击的方式来查看 Go 语言的包的文档。Web
服务器godoc能让开发人员以网页的方式浏览自己的系统里的所有Go语言源代码的文档。
1．从命令行获取文档
对那种总会打开一个终端和一个文本编辑器（或者在终端内打开文本编辑器）的开发人员来
说，go doc是很好的选择。假设要用Go语言第一次开发读取UNIX tar文件的应用程序，想
要看看archive/tar包的相关文档，就可以输入：
go doc tar
执行这个命令会直接在终端产生如下输出：
PACKAGE DOCUMENTATION
package tar // import "archive/tar"
Package tar implements access to tar archives．It aims to cover most of the
variations, including those produced by GNU and BSD tars.
References:
http://www.freebsd.org/cgi/man.cgi?query=tar&sektion=5
http://www.gnu.org/software/tar/manual/html_node/Standard.html
http://pubs.opengroup.org/onlinepubs/9699919799/utilities/pax.html
var ErrWriteTooLong = errors.New("archive/tar: write too long") ...
var ErrHeader = errors.New("archive/tar: invalid tar header")
func FileInfoHeader(fi os.FileInfo, link string) (*Header, error)
func NewReader(r io.Reader) *Reader
func NewWriter(w io.Writer) *Writer
type Header struct { ..．}
type Reader struct { ..．}
type Writer struct { ..．}
开发人员无需离开终端即可直接翻看文档，找到自己需要的部分。
2．浏览文档