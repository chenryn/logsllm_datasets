### D-Bus IPC
D-Bus是Android中众多程序库之一，这些程序库在运行Android 4.3的设备上超过200个。然而，并非所有底层程序库都是标准的。例如，Bionic是一个值得注意的特例。Bionic是一种基于BSD C运行时库的变种，旨在提供更小的内存占用、更好的性能优化，并避免GNU通用公共许可证（GPL）的问题。虽然Bonomic在内存使用和性能方面有所改进，但它并不像GNU libc那样完整，甚至比不上其源头的BSD libc实现。为了进一步降低C运行时库的内存占用，Android开发者还实现了一个自定义的动态链接器和线程API。这些库通常是用原生代码编写的，因此容易受到内存破坏漏洞的影响，这使得该层成为探索Android安全性的一个特别有趣的部分。

### 核心服务
核心服务是指构建基本操作系统环境的服务和Android原生组件。这些服务包括初始化用户空间的服务（如 `init`）、提供关键调试功能的服务（如 `adbd` 和 `debuggerd`）等。需要注意的是，某些核心服务可能是特定于硬件或版本的，本节无法详尽描述所有的用户空间服务。

#### init
`init` 程序通过执行一系列命令来初始化用户空间环境。与传统的基于运行级别脚本的方法不同，Android 使用自定义的 `init` 实现。它根据 `/init.rc` 文件中的指令来执行命令。对于特定设备的指令，可能会有一个名为 `/init.[hw].rc` 的文件，其中 `[hw]` 是特定设备的硬件代号。以下是 HTC One V 手机上的 `/init.rc` 文件内容示例：

```plaintext
service dbus /system/bin/dbus-daemon --system --nofork
    class main
    socket dbus stream 660 bluetooth bluetooth
    user bluetooth
    group bluetooth net_bt_admin

service bluetoothd /system/bin/bluetoothd -n
    class main
    socket bluetooth stream 660 bluetooth bluetooth
    socket dbus_bluetooth stream 660 bluetooth bluetooth
    group bluetooth net_bt_admin misc
    disabled

service dx_drm_server /system/bin/DxDrmServerIpc -f -o allow_other \
    Discretix DRM
    /data/DxDrm/fuse
on property:ro.build.tags=test-keys
    start htc_ebdlogd
on property:ro.build.tags=release-keys
    start htc_ebdlogd_rel

service zchgd_offnode /system/bin/zchgd -pseudooffmode
    group root graphics
    user root
    disabled
```

这些初始化脚本指定的任务包括：
- 通过 `service` 指令启动开机时应运行的服务或守护进程。
- 通过每个服务条目下的参数指定服务应运行的用户和用户组环境。
- 设置系统范围内的属性和配置选项，这些属性和配置选项将公开给 Property 服务。
- 通过 `on` 指令注册在特定事件发生时（如修改系统属性或挂载文件系统）要执行的动作或命令。

#### Property 服务
Property 服务位于 Android 初始化服务中，提供一个持久性的、内存映射的、基于键值对的配置服务。许多操作系统和框架层组件依赖这些属性，其中包括网络接口配置、无线电选项以及安全相关设置。属性可以通过多种方式读取和设置，例如使用命令行工具 `getprop` 和 `setprop`，或者在原生代码中使用 `libcutils` 库中的 `property_get` 和 `property_set` 函数，也可以使用 `android.os.SystemProperties` 类以编程方式读取和设置。

在一台 HTC One V 手机上运行 `getprop` 命令，可以看到输出结果中包含 DalvikVM 配置、当前壁纸设置、网络接口配置以及厂商特定的更新 URL 等信息。

```plaintext
[dalvik.vm.dexopt-flags]: [m=y]
[dalvik.vm.heapgrowthlimit]: [48m]
[dalvik.vm.heapsize]: [128m]
[dhcp.wlan0.dns1]: [192.168.1.1]
[dhcp.wlan0.dns2]: []
[dhcp.wlan0.gateway]: [192.168.1.1]
[dhcp.wlan0.ipaddress]: [192.168.1.125]
[dhcp.wlan0.leasetime]: [7200]
[ro.htc.appupdate.exmsg.url]: [http://apu-msg.htc.com/extra-msg/rws/and-app/msg]
[ro.htc.appupdate.exmsg.url_CN]: [http://apu-msg.htc.com.cn/extra-msg/rws/and-app/msg]
[ro.htc.appupdate.url]: [http://apu-chin.htc.com/check-in/rws/and-app/update]
[service.brem.bt.activation]: [0]
[service.brem.bt.avrcp_pass_thru]: [0]
[ro.secure]: [0]
[ro.serialno]: [Hr26rvo1493]
[ro.setupwizard.enterprise_mode]: [1]
[ro.setupwizard.mode]: [DISABLED]
[ro.sf.lcd_density]: [240]
[ro.telephony.default_network]: [0]
[ro.vendor.extension_library]: [/system/lib/libqc-opt.so]
[ro.use_data_netmgrd]: [true]
```

一些以 `ro` 为前缀的属性被设置为只读，即使 root 用户也无法更改它们。

#### 无线接口层 (RIL)
无线接口层（RIL）将在第11章中详细介绍，它为智能手机提供了必要的通信功能。没有 RIL，Android 设备将无法拨打电话、发送或接收短信，或者在没有 Wi-Fi 网络时上网。因此，RIL 在任何具有蜂窝数据或电话功能的 Android 设备上都会运行。

#### debuggerd
Android 的基本崩溃报告功能由 `debuggerd` 守护进程提供。当 `debuggerd` 启动时，它会打开到 Android 日志功能的连接，并在一个抽象命名空间套接字上监听客户端连接。每当程序开始运行时，链接器会安装信号处理程序并处理某些信号。当捕获到某个信号时，内核会执行信号处理函数 `debugger_signal_handler`，该函数会连接到由 `DEBUGGER_SOCKET_NAME` 定义的套接字，通知 `debuggerd` 目标进程已经崩溃，从而触发崩溃报告的生成。

#### ADB
Android 调试桥（ADB）由几个部分组成，包括在 Android 设备上运行的 `adbd` 守护进程、在主机工作站上运行的 ADB 服务器以及相应的 ADB 命令行客户端。ADB 服务器管理客户端与目标设备上运行的守护进程之间的连接，支持各种任务，如执行 shell 命令、调试应用（通过 Java 调试网络协议）、套接字和端口转发、文件传输以及安装/卸载应用包等。

例如，可以运行 `adb devices` 命令来列出已连接的设备。如果 ADB 在主机上尚未运行，它会在 5037/tcp 上监听客户端连接。然后可以通过序列号指定目标设备并运行 `adb shell` 命令，获取设备上的命令行 shell。

```plaintext
* daemon not running. starting it now on port 5037 *
$ adb devices
* daemon started successfully *
List of devices attached
HT26MTv01493 device
D025A0A024441MGK device
adb -s Hr26rrv01493 shell
root@android:/ #
```

通过进程列表搜索（例如使用 `pgrep`），可以看到 ADB 守护进程 `adbd` 已在目标设备上运行。

```plaintext
root@android: / # busybox pgrep -l adbd
2103 /sbin/adbd
```

ADB 对于开发和调试 Android 设备和模拟器非常重要，我们将在本书中频繁使用它。有关如何使用 ADB 命令的详细信息，请参阅 [官方文档](http://developer.android.com/tools/help/adb.html)。

#### Volume 守护进程 (vold)
Volume 守护进程（`vold`）负责安装和卸载各种文件系统。例如，插入 SD 卡时，`vold` 会处理这一事件，检查 SD 卡的文件系统错误（如通过启动 `fsck`）并将 SD 卡挂载到相应路径（即 `/mnt/sdcard`）。当卡被取出后，`vold` 会卸载目标卷。

`vold` 还处理 Android Secure Container (ASEC) 文件的安装和卸载。当应用包存储在不安全的文件系统（如 FAT）上时，ASEC 会对它们进行加密。这些文件在应用加载时通过环回设备挂载，通常挂载到 `/mnt/asec`。

不透明二进制块（OBB）也是由 `vold` 进行安装和卸载的。这些文件与应用一起打包，用于存储由共享密钥加密的数据。与 ASEC 容器不同，OBB 的安装和卸载是由应用自身而非系统执行的。以下代码片段演示了使用 `SuperSecretKey` 作为共享密钥创建 OBB 的过程：

```java
storageRef.mountObb(obbFile, "SuperSecretKey", obbListener);
storageRef = (StorageManager) getSystemService(STORAGE_SERVICE);
obbContent = storageRef.getMountedObbPath(obbFile);
```

鉴于 `vold` 以 root 身份运行，它的功能和潜在的安全漏洞使其成为一个诱人的攻击目标。有关针对 `vold` 和其他类似服务的特权提升攻击的详细信息，请参阅第3章。

#### 其他服务
许多 Android 设备上还运行着许多其他服务，提供一些额外的功能。表 2-2 重点介绍了一些常见的用户空间原生服务及其用途和权限级别（UID、GID 和辅助用户组）。

| 服务名称 | 描述 | UID、GID 和辅助用户组 |
| --- | --- | --- |
| netd | 在 Android 2.2 及以上版本中存在，用于配置网络接口，运行 PPP 守护程序（pppd）、以太网及其他类似服务 | UID: 9/root, GID: 9/root |
| mediaserver | 负责启动媒体相关服务，如 Audio Flinger、MediaPlayer Service、Camera Service 和 Audio Policy Service | UID: 1013/media, GID: 1005/audio, 用户组: 1006/camera, 1026/drmpc, 3001/net_bt_admin |

这些服务在系统的 `init.rc` 文件中指明。