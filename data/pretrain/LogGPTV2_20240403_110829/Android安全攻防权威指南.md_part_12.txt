 libdbus; D-Bus 的 IPC 
这些只是Android的大量程序库中的一小部分，一个运行Android4.3的设备中包含了超过
200个共享程序库。
然而，并非所有的底层程序库都是标准的，Bionic就是一个值得注意的特例。Bionic是BSD
C运行时库的一个变种，旨在提供更小的内存使用空间，更好的优化，同时避免产生GNU公共
许可证（GPL）授权间题。这些差异也带来了少许代价。Bionic的1ibc并不像GNU1ibe那么
完整，甚至比不上Bionic源头的BSDlibc实现。Bionic中也包含了大量自己的代码，为了努力
降低C运行时库的内存使用空间，Android开发者还实现了一个自定义的动态链接器和线程APl。
这些库是使用原生代码开发的，因而很容易出现内存破坏漏洞，这使得该层成为探索Android
安全性时的一个特别有趣的部分。
2.核心服务
核心服务是指建立基本操作系统环境的服务与Android原生组件。这些服务包括初始化用户
空间的服务（如 init）、提供关键调试功能的服务（如 adbd和 debugggerd）等。注意，某些核心
服务可能是硬件或版本特定的，本节当然不能详尽描述所有的用户空间服务。
· init
init程序通过执行一系列命令对用户空间环境进行初始化。然面，Android使用自定义的init
实现。代替从/etc/initd路径执行基于运行级别的 shell脚本，Android基于从/init.rc中找到的指令
来执行命令。对于设备特定的指令，可能存在一个名为/init.[hw].rc的文件，这里[hw]是特定设备
的硬件代号。以下是HTCOneV手机上/initrc文件中的内容代码片段。
service dbus /system/bin/dbus-daenon --system --nofork
class main
socket dbus stream 660 bluetooth bluetooth
user bluetooth
group bluetooth net_bt_adnin
service bluetoothd /8ystem/bin/bluetoothd -n
class main
---
## Page 48
32
第2章Android的安全设计与架构
socket bluetooth stream 660 bluetooth bluetooth
socket dbus_bluetooth stream 660 bluetooth bluetooth
init.rc does not yet support applying capabilities, so run as root and
# let bluetoothd drop uid to bluetooth vith the right linux capabilities
group bluetooth net_bt_adnin nisc
disabled
service bluetoothd_one /system/bin/bluetoothd -n
class main
socket bluetooth stream 660 bluetooth bluetooth
 init.rc does not yet support applying capabilities, so run as root and
socket dbus_bluetooth stream 660 bluetooth bluetooth
group bluetooth net_bt_adnin misc
disabled
oneshot
service dx_drm_server /systen/bin/DxDrmServerIpc -f -o al1ow_other \
 Discretix DRM
/data/DxDrm/fuse
on property1ro.build,tags=test-keys
start htc_ebdlogd
on property:ro.bu11d,tags=release-keys
start htc_ebdlogd_rel
service zchgd_offnode /system/bin/zchgd -pseudooffmode
group root graphics
user root
disabled
这些初始化脚本指定几个任务，包括：
口通过service指令，启动在开机时应该运行的服务或守护进程；
口通过每个服务条目下缩进的参数，指定服务应该在哪个用户和用户组环境下运行；
口设置向Property服务公开的系统范围属性与配置选项；
口通过on指令，注册在特定事件发生时，如修改系统属性或装载文件系统，要执行的动作
或命令。
·Property服务
Property服务位于Android的初始化服务中，它提供了一个持续性的（每次启动）、内存映射
的、基于键值对的配置服务。许多操作系统和框架层的组件都依赖于这些属性，其中包括网络接
口配置、无线电选项甚至安全相关设置，其中的细节将在第3章中讨论。
属性可以通过多种方式进行读取和设置。例如，分别使用命令行实用程序getprop和
setProp 进行读取和设置，在原生代码中分别使用1ibcutils库中的property_get 和
property_set 函数以编程方式读取和设置，或使用android.os.SystemProperties类
以编程方式读取和设置（这个类函数又会继续调用上述原生函数）。Propery服务的概述如图
2-2所示。
---
## Page 49
2.3深入理解各个层次
33
属性设置器
属性读取器
Proper服务
读取
加载
MA
特久文件
图2-2Android 系统的 Property 服务
在Android设备（在本例中是一台HTC OneV手机）上运行getprop命令，可以看到输出
结果中包含DalvikVM配置、当前设置壁纸、网络接口配置设置和厂商特定的更新URL等。
[dalvik,vm.dexopt-flags]: [m=y]
rooteandroid:/ # getprop
[da1vik,vm.heapgrowth1init]:[48m]
[dalvik.vm.heapsize] : [128m]
[dhcp ,wlan0 dns1] : [192.168.1.1]
+ + -
[dhep .wlan0. dns2] : []
[dhcp w1an0, dns3]:
[dhcp -wlan0.dns4] : []
[1
[dhcp  -wlan0 . gateway] : [192 .168.1 .11
[dhcp -wlan0 ipaddress] : [192.168.1.125]
[dhcp wlan0.1easetime] : [7200]
[ro.htc appupdate,exmsg.ur1] :
 = 
[http: / /apu-msg-htc , com/extra-msg/rws/and-app/msg]
[ro.hte appupdate,exmnsg -ur1_CN] :
[ro.hte,appupdate,ur1]:
[http: //apu-m8g.htcconm,com, cn/extra-msg/rws/andapp/msg]
[http: / /apuchin.htc.com/check-Iin/rws/and-app/update]
[service.brem.bt.activation] : [0]
[service.brem.bt avrcp_pass_thra] : [0]
被设置为“只读”的一些属性不可更改，即便是root用户（尽管有一些设备特有的例外情况）。
这些属性以ro为前级。
[ro.secure] : [0]
[ro.serialno] : [Hr26rvo1493]
[ro,setupwizard.enterprise_mode] : [1]
---
## Page 50
34
第2章Android的安全设计与架构
[ro,setupwizard.mode] : [DISABLED]
[ro.sf .1cd_density] : [240]
[ro.telephony-default_network] : [0]
[ro.vendor,extension_1ibrary] : [ /eystem/1ib/1ibqe-opt.so]
[ro.u8e_data_netmgrd] : [true]
你会在第3章读到更多关于Property服务及其安全影响的细节。
·无线接口层
将在第11章中详细介绍的无线接口层（RIL），为智能手机提供了手机本身应该有通讯功能。
如果没有这个组件，Android设备将无法拨打电话，发送或接收短信，或者在没有Wi-Fi网络时
上网。因此，它会在任何拥有蜂窝数据或电话功能的Android设备上运行。
● debuggerd
Android的基本崩溃报告功能是由一个称为debuggerd的守护进程提供的，当调试器守护进
程启动时，它将打开到Android日志功能的一个连接，然后在一个抽象名字空间套接字开始监听
客户端的连人。每次程序开始运行，链接器会安装信号处理程序，然后处理某些信号。
当要捕获的某个信号发生时，内核执行信号处理函数debugger_signal_handler。这个
函数连接到之前提到的由DEBUGGER_SOCKET_NAME定义的套接字上，连接之后，链接器将通知
套接字的另一端（即debuggcrd）目标进程已经崩溃了。这会通知debuggerd应该调用它的处理流
程并创建一个崩溃报告。
● ADB
Android调试桥（ADB）是由几个部件组成的，包括在Android设备上的 adbd守护进程，在
宿主工作站上运行的adb服务器，以及相应的adb命令行客户端。adb服务器管理客户端与在目
标设备上运行的守护进程之间的连接，便于各种任务操作，比如执行一个shell、调试应用（通过
Java调试网络协议）、套接字和端口转发、文件传输，以及安装/卸载应用包等。
作为一个简单的例子，你可以运行adbdevices命令来列出你连接的设备。因为ADB在
我们的主机上尚未运行，因此它会被初始化，在5037/hcp上监听客户端连接。然后你可以通过序
列号来指明一个目标设备，并运行adb shel1命令，这会获得一个在设备上运行的命令行shell。
• daemon not running. starting it now on port 5037 *
$ adb devices
* daemon started successfully *
List of devices attached
HT26MTv01493 device
D025A0A024441MGK device
adb -s Hr26rrv01493 she11
root9android:/ #
通过对进程列表进行grep搜索（此例中使用pgrep）也可以看到，ADB守护进程adbd已在
目标设备上运行。
rootlandroid: / # busybox pgrep -1 adbd
2103 /8bin/adbd
---
## Page 51
2.3深入理解各个层次35
ADB对于使用Android设备和模拟器进行开发是非常关键的.因此我们将在本书中频繁使用
它。你可以从htp://developer.android.com/tools/help/adb.html找到如何使用adb命令的详细信息。
·Volume守护进程
Volume守护进程，或称为vold，是Android系统上负责安装和卸载各种文件系统的服务。例
如，插人SD卡时，vold会处理这一事件，检查SD卡的文件系统错误（如通过启动fsck）并将
SD卡安装到相应的路径（也就是/mnt/sdcard）。当卡被用户取出后，vold会卸载目标卷。
vold 也处理Android Secure Container（ASEC）文件的安装与卸载。当应用包存储到FAT等
不安全的文件系统上时，ASEC会对其进行加密处理。它们会在应用加载时通过环回（loopback）
设备进行安装，通常挂接到/mnt/asec。
不透明二进制块（OBB）也是由vold进行安装和卸载的。这些文件与应用共同打包，以存
储由一个共享密钥加密的数据。然而与ASEC容器不同的是，对OBB的安装和卸载是由应用自
身面非系统来执行的。以下代码片段演示了使用 SuperSecretKey作为共享密钥创建一个OBB
的过程。
storageRef .mountObb (obbFi1e, *SuperSecretKey*, obbListener) :
storageRef - (StorageManager) getSystemService (STORAGE_SERVICE) 
obbContent = storageRef .getMountedobbPath(obbFile):
鉴于vold是以root身份运行的，它的功能和潜在的安全漏润都让它成为一个诱人的目标。
你可以在第3章看到针对vold和其他类似服务进行特权提升攻击的详细介绍。
·其他服务
在许多Android设备上还运行着许多其他服务，提供一些不一定是必需的额外功能（取决于
设备和服务）。表2-2重点介绍其中的一些服务、它们的用途及在系统中的权限级别（UID、GID
和运行用户所属的辅助用户组，这些会在系统的init.rc文件中指明）
表2-2用户空间的原生服务
描述
UID、GID 和辅助用户组
netd
在Android2.2以上版本中存在，由网络管理服务用于配置网络
接口，运行PPP守护程序（pPPpd）、以太网与其他类似服务
UID; 9/root
mediaserver
GID, 9/root
负责启动媒体相关服务，这些服务包括 Audio Flinger，Media
Plasyer Service, Camera Service fI Audio Policey Service
UID; 1013 / media
GID, 1005 / aadio
用户组：1006/camera
1026/ drmpc
3001 / net_bt_admin