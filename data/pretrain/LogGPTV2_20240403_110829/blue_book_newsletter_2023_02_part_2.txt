        The different ways to click are:
        * None: The normal click of the driver.
        * wait: Wait until the element is clickable and then click it.
        * position: Deduce the position of the element and then click it with a javascript script.
        """
        if mode is None:
           driver.find_element(By.XPATH, xpath).click()
        elif mode == 'wait':
            # https://stackoverflow.com/questions/59808158/element-isnt-clickable-in-headless-mode
            WebDriverWait(driver, 20).until(
                EC.element_to_be_clickable((By.XPATH, xpath))
            ).click()
        elif mode == 'position':
            # https://stackoverflow.com/questions/16807258/selenium-click-at-certain-position
            element = driver.find_element(By.XPATH, xpath)
            driver.execute_script("arguments[0].click();", element)
    ```
### [sh](python_sh.md)
* New: [Passing environmental variables to commands.](python_sh.md#passing-environmental-variables-to-commands)
    The `_env` special `kwarg` allows you to pass a dictionary of environment variables and their corresponding values:
    ```python
    import sh
    sh.google_chrome(_env={"SOCKS_SERVER": "localhost:1234"})
    ```
    `_env` replaces your processâ€™s environment completely. Only the key-value pairs in `_env` will be used for its environment. If you want to add new environment variables for a process in addition to your existing environment, try something like this:
    ```python
    import os
    import sh
    new_env = os.environ.copy()
    new_env["SOCKS_SERVER"] = "localhost:1234"
    sh.google_chrome(_env=new_env)
    ```
* New: [Use commands that return a SyntaxError.](python_sh.md#use-commands-that-return-a-syntaxerror)
    `pass` is a reserved python word so `sh` fails when calling the password store command `pass`.
    ```python
    pass_command = sh.Command('pass')
    pass_command('show', 'new_file')
    ```
### [Typer](typer.md)
* New: [Print to stderr.](typer.md#print-to-stderr)
    You can print to "standard error" with a Rich `Console(stderr=True)`
    ```python
    from rich.console import Console
    err_console = Console(stderr=True)
    err_console.print("error message")
    ```
# DevOps
## Infrastructure as Code
### [Gitea](gitea.md)
* New: [Disable the regular login, use only Oauth.](gitea.md#disable-the-regular-login-use-only-oauth)
    You need to add a file inside your [`custom` directory](https://docs.gitea.io/en-us/customizing-gitea/). The file is too big to add in this digest, please access the article to get it.
* New: [Configure it with terraform.](gitea.md#configure-it-with-terraform)
    Gitea can be configured through terraform too. There is an [official provider](https://gitea.com/gitea/terraform-provider-gitea/src/branch/main) that doesn't work, there's a [fork that does though](https://registry.terraform.io/providers/Lerentis/gitea/latest/docs). Sadly it doesn't yet support configuring Oauth Authentication sources. Be careful [`gitea_oauth2_app`](https://registry.terraform.io/providers/Lerentis/gitea/latest/docs/resources/oauth2_app) looks to be the right resource to do that, but instead it configures Gitea to be the Oauth provider, not a consumer.
    In the article you can find how to configure and use it to:
    * [Create an organization](gitea.md#create-an-organization)
* New: [Create an admin user through the command line.](gitea.md#create-an-admin-user-through-the-command-line)
    ```bash
    gitea --config /etc/gitea/app.ini admin user create --admin --username user_name --password password --email email
    ```
    Or you can change [the admin's password](https://discourse.gitea.io/t/how-to-change-gitea-admin-password-from-the-command-terminal-line/1930):
    ```bash
    gitea --config /etc/gitea/app.ini admin user change-password -u username -p password
    ```
    feat(gtd): Introduce Getting things done
    First summary of David Allen's book Getting things done. It includes:
    * [Theory principles](gtd.md#theory-principles)
      * [Managing commitments](gtd.md#managing-commitments)
      * [Managing stuff](gtd.md#managing-stuff)
      * [Managing actions](gtd.md#managing-actions)
      * [Workflow steps](gtd.md#workflow-steps)
        * [Capture what has our attention.](gtd.md#capture)
        * [Clarify what each item means and what to do about it.](gtd.md#clarify-and-organize)
        * [Organize the results.](gtd.md#clarify-and-organize)
        * [Reflect on the options.](gtd.md#reflect)
        * [Engage the chosen options.](gtd.md#engage)
    * [Setting up the system](gtd.md#setting-up-the-system)
      * [Setting up the space](gtd.md#setting-up-the-space)
      * [Setting up your filing system](gtd.md#setting-up-your-filing-system)
### [Chezmoi](helm_installation.md)
* New: Introduce chezmoi.
    [Chezmoi](https://www.chezmoi.io/) stores the desired state of your dotfiles in
    the directory `~/.local/share/chezmoi`. When you run `chezmoi apply`, `chezmoi`
    calculates the desired contents for each of your dotfiles and then makes the
    minimum changes required to make your dotfiles match your desired state.
    What I like:
    - Supports `pass` to retrieve credentials.
    - Popular
    - Can remove directories on `apply`
    - It has a `diff`
    - [It can include dotfiles from an URL](https://www.chezmoi.io/user-guide/include-files-from-elsewhere/)
    - [Encrypt files with gpg](https://www.chezmoi.io/user-guide/encryption/gpg/)
    - [There's a vim plugin](https://github.com/alker0/chezmoi.vim)
    - Actively maintained
    - Good documentation
    What I don't like:
    - Go templates, although
      [it supports autotemplating](https://www.chezmoi.io/user-guide/templating/#creating-a-template-file)
      and it's
      [well explained](https://www.chezmoi.io/user-guide/templating/#template-variables)
    - Written in Go
    In the article you can also find:
    * [How to install it](chezmoi.md#installation)
    * [How to use it](chezmoi.md#basic-usage)
    * [How to install a binary from an external url](chezmoi.md#install-a-binary-from-an-external-url)
* Correction: Update the project url of helm-secrets.
    From https://github.com/futuresimple/helm-secrets to https://github.com/jkroepke/helm-secrets
### [Helmfile](dotdrop.md)
* New: [Troubleshoot Yaml templates in go templates.](helmfile.md#yaml-templates-in-go-templates)
    If you are using a `values.yaml.gotmpl` file you won't be able to use `{{ whatever }}`. The solution is to extract that part to a yaml file and include it in the go template. For example:
    * `values.yaml.gotmpl`:
      ```gotmpl
      metrics:
      serviceMonitor:
        enabled: true
        annotations:
        additionalLabels:
          release: prometheus-operator
      {{ readFile "prometheus_rules.yaml" }}
      ```
    * `prometheus_rules.yaml`
      ```yaml
      prometheusRule:
        enabled: true
        additionalLabels:
          release: prometheus-operator
        spec:
          - alert: VeleroBackupPartialFailures
            annotations:
              message: Velero backup {{ $labels.schedule }} has {{ $value | humanizePercentage }} partialy failed backups.
            expr: increase(velero_backup_partial_failure_total{schedule!=""}[1h]) > 0
            for: 15m
            labels:
              severity: warning
      ```
* New: Introduce dotdrop.
    The main idea of [Dotdrop](https://deadc0de.re/dotdrop/)is to have the ability
    to store each dotfile only once and deploy them with a different content on
    different hosts/setups. To achieve this, it uses a templating engine that allows
    to specify, during the dotfile installation with dotdrop, based on a selected
    profile, how (with what content) each dotfile will be installed.
    What I like:
    - Popular
    - Actively maintained
    - Written in Python
    - Uses jinja2
    - Has a nice to read config file
    What I don't like:
    - [Updating dotfiles doesn't look as smooth as with chezmoi](https://dotdrop.readthedocs.io/en/latest/usage/#update-dotfiles)
    - Uses `{{@@ @@}}` instead of `{{ }}` :S
    - Doesn't support `pass`.
    - Not easy way to edit the files.
### [Terraform](terraform.md)
* New: [How to store sensitive information in terraform.](terraform.md#sensitive-information)
    One of the most common questions we get about using Terraform to manage infrastructure as code is how to handle secrets such as passwords, API keys, and other sensitive data.
    In the article you'll find how to store your sensitive data in:
    * [The Terraform state](terraform.md#sensitive-information-in-the-terraform-state): Using the state backend encryption
    * [The Terraform source code](terraform.md#sensitive-information-in-the-terraform-source-code): Using`sops` and `gpg`.
### [Dotfiles](dotfiles.md)
* New: Introduce dotfiles.
    [User-specific application configuration is traditionally stored in so called dotfiles](https://wiki.archlinux.org/title/Dotfiles)
    (files whose filename starts with a dot). It is common practice to track
    dotfiles with a version control system such as Git to keep track of changes and
    synchronize dotfiles across various hosts. There are various approaches to
    managing your dotfiles (e.g. directly tracking dotfiles in the home directory
    v.s. storing them in a subdirectory and symlinking/copying/generating files with
    a shell script or a dedicated tool).
    Note: this is not meant to configure files that are outside your home directory,
    use Ansible for that use case.
    You can find different ways to track your dotfiles:
    * [Tracking dotfiles directly with Git](dotfiles.md#tracking-dotfiles-directly-with-git)
    * [Using Ansible to manage the dotfiles](dotfiles.md#using-Ansible-to-manage-the-dotfiles)
    * [Using dotfiles specific tools, and an analysis of the state of the
      art](dotfiles.md#tools)
## Infrastructure Solutions
### [Velero](velero.md)
* New: Introduce velero.
    [Velero](https://velero.io/) is an open source tool to safely backup and restore, perform disaster recovery, and migrate Kubernetes cluster resources and persistent volumes.
    In the article you'll also find how to:
    * [Install the client](velero.md#client-installation)
    * [Configure the server](velero.md#server-configuration)
    * [Monitor it with Prometheus](velero.md#monitorization)
    * [Restore backups](velero.md#restore-backups)
    And an [overview of the whole application
    infrastructure](velero.md#overview-of-velero).
## Automating Processes
### [cruft](cruft.md)
* Correction: Suggest to use copier instead.
    [copier](https://github.com/copier-org/copier) looks a more maintained solution nowadays.
### [letsencrypt](letsencrypt.md)
* New: Introduce letsencrypt.
    [Letsencrypt](https://letsencrypt.org/) is a free, automated, and open certificate authority brought to you by the nonprofit Internet Security Research Group (ISRG). Basically it gives away SSL certificates, which are required to configure webservers to use HTTPS instead of HTTP for example.
    In the article you can also find:
    * [How to configure a wildcard dns when the provider is not
      supported](letsencrypt.md#configure-a-wildcard-dns-when-the-provider-is-not-supported)
## Storage
### [OpenZFS storage planning](zfs_storage_planning.md)
* New: Introduce ZFS storage planning.
### [OpenZFS](sanoid.md)
* New: [How to create a pool and datasets.](zfs.md#usage)
* New: [Configure NFS.](zfs.md#configure-nfs)
    With ZFS you can share a specific dataset via NFS. If for whatever reason the dataset does not mount, then the export will not be available to the application, and the NFS client will be blocked.
    You still must install the necessary daemon software to make the share available. For example, if you wish to share a dataset via NFS, then you need to install the NFS server software, and it must be running. Then, all you need to do is flip the sharing NFS switch on the dataset, and it will be immediately available.
* New: [Backup.](zfs.md#backup)
    Please remember that [RAID is not a backup](https://serverfault.com/questions/2888/why-is-raid-not-a-backup), it guards against one kind of hardware failure. There's lots of failure modes that it doesn't guard against though:
    * File corruption
    * Human error (deleting files by mistake)
    * Catastrophic damage (someone dumps water onto the server)
    * Viruses and other malware
    * Software bugs that wipe out data
    * Hardware problems that wipe out data or cause hardware damage (controller malfunctions, firmware bugs, voltage spikes, ...)
    That's why you still need to make backups.
    ZFS has the builtin feature to make snapshots of the pool. A snapshot is a first class read-only filesystem. It is a mirrored copy of the state of the filesystem at the time you took the snapshot. They are persistent across reboots, and they don't require any additional backing store; they use the same storage pool as the rest of your data.
    If you remember [ZFS's awesome nature of copy-on-write](https://pthree.org/2012/12/14/zfs-administration-part-ix-copy-on-write/) filesystems, you will remember the discussion about Merkle trees. A ZFS snapshot is a copy of the Merkle tree in that state, except we make sure that the snapshot of that Merkle tree is never modified.
    Creating snapshots is near instantaneous, and they are cheap. However, once the data begins to change, the snapshot will begin storing data. If you have multiple snapshots, then multiple deltas will be tracked across all the snapshots. However, depending on your needs, snapshots can still be exceptionally cheap.
    The article also includes:
    * [ZFS snapshot lifecycle management](zfs.md#zfs-snapshot-lifecycle-management)
    * [Restore a backup](zfs.md#restore-a-backup)
* New: Introduce Sanoid.
    [Sanoid](https://github.com/jimsalterjrs/sanoid/) is the most popular tool right now, with it you can create, automatically thin, and monitor snapshots and pool health from a single eminently human-readable TOML config file.
    The article includes:
    * [Installation](sanoid.md#installation)
    * [Configuration](sanoid.md#configuration)
    * Pros and cons
    * [Usage](sanoid.md#usage)
    * [Troubleshooting](sanoid.md#troubleshooting)
## Authentication
### [Authentik](authentik.md)
* New: Introduce Authentik.
    [Authentik](https://goauthentik.io/) is an open-source Identity Provider focused on flexibility and versatility.
    What I like:
    * Is maintained and popular
    * It has a clean interface
    * They have their own [terraform provider](https://registry.terraform.io/providers/goauthentik/authentik/latest/docs/resources/application) Oo!
    What I don't like:
    * It's heavy focused on GUI interaction, but you can export the configuration to YAML files to be applied without the GUI interaction.
    * The documentation is oriented to developers and not users. It's a little difficult to get a grasp on how to do things in the platform without following blog posts.
    In the article you can also find:
    * [How to install it](authentik.md#installation)
    * [How to configure and use the terraform provider](authentik.md#terraform)
    * [How to configure some applications, such as gitea](authentik.md#gitea)
    * [How to configure the user registration by invitation
      link](authentik.md#configure-the-invitation-flow)