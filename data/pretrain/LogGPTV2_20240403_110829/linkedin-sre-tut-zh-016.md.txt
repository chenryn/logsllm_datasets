# 域名服务器（DNS）
> 原文：
域名是网站的简单易读的名称。互联网只理解 IP 地址，但由于记忆不连贯的数字并不实用，所以改用域名。这些域名被 DNS 基础设施翻译成 IP 地址。当有人试图在浏览器中打开[www.linkedin.com](https://www.linkedin.com)时，浏览器试图将[www.linkedin.com](https://www.linkedin.com)转换成 IP 地址。这个过程称为 DNS 解析。描述这一过程的简单伪代码如下
```sh
ip, err = getIPAddress(domainName)
if err:
  print(“unknown Host Exception while trying to resolve:%s”.format(domainName)) 
```
现在让我们试着理解 getIPAddress 函数内部发生了什么。浏览器将拥有自己的 DNS 缓存，在其中检查是否有域名到已经可用的 IP 地址的映射，在这种情况下，浏览器使用该 IP 地址。如果不存在这样的映射，浏览器会调用 gethostbyname syscall 来请求操作系统查找给定域名的 IP 地址
```sh
def getIPAddress(domainName):
    resp, fail = lookupCache(domainName)
    If not fail:
       return resp
    else:
       resp, err = gethostbyname(domainName)
       if err:
         return null, err
       else:
          return resp 
```
现在让我们理解当调用 [gethostbyname](https://man7.org/linux/man-pages/man3/gethostbyname.3.html) 函数时操作系统内核做什么。Linux 操作系统查看文件 [/etc/nsswitch.conf](https://man7.org/linux/man-pages/man5/nsswitch.conf.5.html)
```sh
hosts:      files dns 
```
这一行意味着操作系统必须首先在文件(/etc/hosts)中查找，然后如果在/etc/hosts 中没有匹配项，就使用 DNS 协议进行解析。
文件/etc/hosts 的格式为
IP 地址 FQDN [FQDN]。*
```sh
127.0.0.1 localhost.localdomain localhost
::1 localhost.localdomain localhost 
```
如果该文件中存在匹配的域，则操作系统会返回该 IP 地址。让我们给这个文件添加一行
```sh
127.0.0.1 test.linkedin.com 
```
然后做平 test.linkedin.com
```sh
ping test.linkedin.com -n 
```
```sh
PING test.linkedin.com (127.0.0.1) 56(84) bytes of data.
64 bytes from 127.0.0.1: icmp_seq=1 ttl=64 time=0.047 ms
64 bytes from 127.0.0.1: icmp_seq=2 ttl=64 time=0.036 ms
64 bytes from 127.0.0.1: icmp_seq=3 ttl=64 time=0.037 ms 
```
如前所述，如果/etc/hosts 中不存在匹配，操作系统会尝试使用 DNS 协议进行 DNS 解析。linux 系统向/etc/resolv.conf 中的第一个 IP 发出 DNS 请求。如果没有响应，请求将被发送到 resolv.conf 中的后续服务器。resolv.conf 中的这些服务器称为 DNS 解析器。DNS 解析器由 [DHCP](https://en.wikipedia.org/wiki/Dynamic_Host_Configuration_Protocol) 填充或由管理员静态配置。 [Dig](https://linux.die.net/man/1/dig) 是一个用户空间 DNS 系统，它创建并向 DNS 解析器发送请求，并将收到的响应打印到控制台。
```sh
#run this command in one shell to capture all DNS requests
sudo tcpdump -s 0 -A -i any port 53
#make a dig request from another shell
dig linkedin.com 
```
```sh
13:19:54.432507 IP 172.19.209.122.56497 > 172.23.195.101.53: 527+ [1au] A? linkedin.com. (41)
....E..E....@.n....z...e...5.1.:... .........linkedin.com.......)........
13:19:54.485131 IP 172.23.195.101.53 > 172.19.209.122.56497: 527 1/0/1 A 108.174.10.10 (57)
....E..U..@.|.  ....e...z.5...A...............linkedin.com..............3..l.
..)........ 
```
数据包捕获显示向 linkedin.com 的 172.23.195.101:53(这是/etc/resolv.conf 中的解析器)发出请求，并从 IP 地址为 linkedin.com 108.174.10.10 的 172.23.195.101 收到响应
现在让我们试着理解 DNS 解析器是如何找到 linkedin.com 的 IP 地址的。DNS 解析器首先查看其缓存。由于网络中的许多设备都可以查询域名 linkedin.com，因此域名解析结果可能已经存在于缓存中。如果存在缓存未命中，它将启动 DNS 解析过程。DNS 服务器将“linkedin.com”断开为。，“com。”和“linkedin.com .”并从“.”开始 DNS 解析。的“.”被称为根域，DNS 解析软件知道这些 IP。DNS 解析器查询根域名服务器，以找到能够对“com”的详细信息做出响应的正确域名服务器。“com”的权威名称服务器的地址被退回。现在，DNS 解析服务联系“com”的权威名称服务器获取“linkedin.com”的权威名称服务器。一旦知道了“linkedin.com”的权威名称服务器，解析器就联系 linkedin 的名称服务器以提供“linkedin.com”的 IP 地址。这整个过程可以通过运行
```sh
dig +trace linkedin.com 
```
```sh
linkedin.com.       3600    IN  A   108.174.10.10 
```
这个 DNS 响应有 5 个字段，其中第一个字段是请求，最后一个字段是响应。第二个字段是生存时间，表示 DNS 响应的有效时间，以秒为单位。在这种情况下，linkedin.com 的这种映射在 1 小时内有效。这就是解析器和应用(浏览器)维护其缓存的方式。任何超过 1 小时的 linkedin.com 请求都将被视为缓存未命中，因为映射的 TTL 已经过期，整个过程必须重新进行。第 4 个字段表示 DNS 响应/请求的类型。一些不同的 DNS 查询类型是 A、AAAA、NS、TXT、PTR、MX 和 CNAME。- A 记录返回域名的 IPV4 地址- AAAA 记录返回域名的 IPV6 地址- NS 记录返回域名的权威名称服务器- CNAME 记录是域名的别名。一些域指向其他域名，解析后一个域名会给出一个 IP，该 IP 也用作前一个域名的 IP。示例 www.linkedin.com 的 IP 地址与 2-01-2c3e-005a.cdx.cedexis.net 相同。-为简洁起见，我们不讨论其他 DNS 记录类型，这些记录的 RFC 可在[此处](https://en.wikipedia.org/wiki/List_of_DNS_record_types)获得。
```sh
dig A linkedin.com +short
108.174.10.10
dig AAAA linkedin.com +short
2620:109:c002::6cae:a0a
dig NS linkedin.com +short
dns3.p09.nsone.net.
dns4.p09.nsone.net.
dns2.p09.nsone.net.
ns4.p43.dynect.net.
ns1.p43.dynect.net.
ns2.p43.dynect.net.
ns3.p43.dynect.net.
dns1.p09.nsone.net.
dig www.linkedin.com CNAME +short
2-01-2c3e-005a.cdx.cedexis.net. 
```
有了 DNS 的这些基础知识，让我们看看 SREs 使用 DNS 的用例。
## SRE 角色中的应用
本节涵盖了 SRE 可以从 DNS 中获得的一些常见解决方案
1.  每个公司都必须为内部网站点和内部服务(如数据库和其他内部应用，如 wiki)建立内部 DNS 基础设施。因此，基础设施团队必须为这些域名维护 DNS 基础设施。这种 DNS 基础设施必须进行优化和扩展，以便它不会成为单点故障。内部 DNS 基础设施的故障会导致微服务的 API 调用失败和其他级联效应。
2.  DNS 也可以用于发现服务。例如，主机名 serviceb.internal.example.com 可以列出在 example.com 公司内部运行服务 b 的实例。云提供商提供选项来启用 DNS 发现([示例](https://docs.aws.amazon.com/whitepapers/latest/microservices-on-aws/service-discovery.html#dns-based-service-discovery))
3.  云提供商和 CDN 提供商使用 DNS 来扩展他们的服务。在 Azure/AWS 中，负载平衡器被赋予一个 CNAME，而不是 IPAddress。它们通过更改别名域名的 IP 地址来更新负载平衡器的 IP 地址。这也是为什么此类别名域名的记录只有 1 分钟那么短的原因之一。
4.  DNS 还可以用来使客户获得离他们位置更近的 IP 地址，这样，如果该公司在地理上是分散的，他们的 HTTP 呼叫可以得到更快的响应。
5.  SRE 还必须明白，由于 DNS 基础设施中没有验证，这些响应可能是欺骗性的。这受到其他协议的保护，如 HTTPS(稍后讨论)。DNSSEC 保护免受伪造或操纵的 DNS 响应。
6.  过时的 DNS 缓存可能是一个问题。一些[应用](https://stackoverflow.com/questions/1256556/how-to-make-java-honor-the-dns-caching-timeout)可能仍在使用过期的 DNS 记录进行 api 调用。这是 SRE 在进行维护时必须警惕的事情。
7.  DNS 负载平衡和服务发现还必须了解 TTL，并且只有在等待 TTL post 对 DNS 记录进行更改后，才能从池中删除服务器。如果不这样做，由于服务器在 TTL 之前被移除，一定部分的流量将会失败。