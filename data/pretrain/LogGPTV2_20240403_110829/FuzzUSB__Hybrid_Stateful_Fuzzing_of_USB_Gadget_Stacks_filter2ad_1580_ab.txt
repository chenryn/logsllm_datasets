device
device
device
device
host+device
Device
Dep
HW
SW
SW
Hybrid
SW
SW
SW
State
Mach
N
N
N
N
N
N
Y
TABLE I: State-of-the-art USB fuzzers. E and C represent the
enumeration and communication phases respectively while CC
denotes the configuration phase. HW represents the need for dedicated
hardware; SW relies on software only; Hybrid means supporting both
HW and SW.
(i.e., a top-down approach). Second, a malicious USB host
device may send out malformed or malicious USB packets to
exploit the USB gadget stack of the USB smart device (i.e., a
bottom-up approach).
Following the Android example, a malicious Android app
may try to exploit the USB gadget stack running inside the
kernel space to achieve privilege escalation, while a malicious
desktop device may send out malicious USB packets to steal
secret information from the attached device without a user’s
permission. It is also possible for adversaries to leverage both
exploitation directions together to enable more sophisticated
attacks, as shown in the PoC exploit in Appendix C.
III. MOTIVATION
Modern peripherals and smart devices have been a popular
target of recent attacks. Within the large attack surface of these
devices, the USB gadget stack is a valuable and high-profile
target for the following reasons. First, since the USB gadget
stack supports versatile USB features as discussed in §II, it
offers prevalence and large attack surfaces — ranging from
charging and storage to MIDI, etc. Second, the USB gadget
stack usually runs with high privilege (i.e., the kernel privilege).
Lastly, such attacks can be carried out with zero privilege on
the victim device. In other words, unlike typical privilege
escalation attacks, attacks targeting a USB gadget stack usually
do not assume a specific prior requirement, such as providing
the right passcode or installing a custom malicious application.
Instead, simply connecting a USB cable to the USB smart
device satisfies all the attack requirements.
Surprisingly, despite the prevalence and large attack surface
of the USB gadget stack, we found that little attention has
been paid to this area especially in terms of fuzzing. Table I
summarizes existing USB fuzzing tools, all of which focus on
USB host stack fuzzing and assume a malicious USB peripheral
trying to exploit vulnerabilities within a host using a USB
connection. These fuzzers usually have limited coverage in
handling the three phases of USB workflows. In particular, they
usually target one single phase of USB communication (e.g.,
enumeration), mutating the input used by a single channel.
In addition, some fuzzers, such as FaceDancer [19] and
umap2 [18], require dedicated programmable USB hardware
to generate malformed USB packets, limiting their scalability.
Authorized licensed use limited to: Tsinghua University. Downloaded on August 07,2022 at 12:39:18 UTC from IEEE Xplore.  Restrictions apply. 
32214
Fig. 2: Usage of the different USB gadget communication channels
in a standard USB connection.
A naive approach to fuzz USB gadget stacks would be using
existing fuzzers (e.g., usb-syzkaller) and switching the fuzzing
direction from gadget-to-host to host-to-gadget.2. However,
such an approach is unlikely to achieve significant code
coverage or find bugs efficiently. In fact, as we will show
in the rest of this section, to achieve both a wide breadth (e.g.,
fuzzing different phases) and a high depth (e.g., reaching deep
USB core-logic code) in USB gadget stacks, a fuzzer has to
tackle fundamental challenges that are specific to both the
protocol design and the stack implementation.
Compared with the existing works, to the best of our knowl-
edge, FUZZUSB is the first USB gadget stack stateful fuzzing
framework, covering all three phases of USB connection and
communication, and relying on software emulation to achieve
bug reproducibility and scalability.
A. Challenge 1: Multi-channel Inputs
As mentioned earlier and shown in Figure 2, there are
three phases involved in the lifetime of a USB gadget driver:
configuration, enumeration, and communication. Accordingly,
each phase has its own input space and dedicated USB
endpoints for data transfer. These endpoints are the basic
communication units defined by the USB specification, and
they are indexed by numbers (e.g., endpoint 0). In the rest of
this paper, we call them input channels. As shown in Figure 2,
there are three input channels, init, control, and data, which
are used in different phases.
The init channel (Ch1) refers to the ConfigFS interface
exposed to gadget applications, providing the USB device
information to instantiate the corresponding USB product
(functionality), using the UDC during the configuration phase.
The control channel (Ch2) represents the USB control transfer,
using endpoint 0 during the enumeration phase. The data
channel (Ch3, Ch4, etc.) groups all the possible USB data
transfers using different endpoints during the communication
phase, after a USB connection is established. Note that the data
channel could contain multiple sub-channels for data transfer
depending on the complexity of the USB functionality exposed
by a device. For instance, a USB headset might contain 3 data
transfer sub-channels, one for the microphone, one for the
speakers, and one for volume control.
It is noteworthy that we need to carefully address these
multi-channel inputs across different phases, in terms of the
mutation strategy used for USB gadget fuzzing. For example,
mutating the data channel during the enumeration phase would
2We will compare FUZZUSB with this naive approach as the baseline in
our evaluation.
Fig. 3: Standard message exchange during the configuration and
enumeration phases. Circles in color represent feasible gadget states
along with their transitions.
only waste computing resources due to the inactivity of the
communication phase. Similarly, even though both the init
and control channels are available during the communication
phase, mutating the control channel to trigger a new USB
enumeration process might not be desired for fuzzing, since
it breaks the current USB connection while mutating the init
channel could trigger race conditions among different parts of
gadget driver code as we will see later. As a result, when to
fuzz each channel and how to mutate the input targeting each
channel determine the effectiveness and efficiency of fuzzing
the USB gadget stack.
Unfortunately, existing fuzzing techniques hardly tackle these
essential issues. As shown in Table I, state-of-the-art USB
host stack fuzzing only considers single-channel input, e.g.,
the device channel, since USB host stacks are usually not
configurable from the user space, and the system call interface
is too generic to fuzz USB host stacks directly. Similarly,
USB host stack fuzzers focus on a specific phase, e.g., the
enumeration phase, aiming at triggering bugs from different
USB device drivers rather than detecting deep bugs within a
driver. As we will discuss in §IV, we maximize the effectiveness
and efficiency of USB gadget stack fuzzing by considering
multi-channel inputs using a proper mutation strategy, based
on the current phase and state of the driver.
B. Challenge 2: Statefulness
In addition to the multiple phases of the USB communication,
each USB gadget driver also implements a fine-grained state
machine internally. Figure 3 illustrates the standard message
exchanges from the perspective of gadget drivers during
the configuration and enumeration phases. To configure the
functionality of a USB gadget, a user-mode configuration
process (e.g., a gadget-specific application) within the USB
smart device delivers a sequence of setup data to the driver in an
ordered way up until binding. In the following enumeration, the
USB host communicates with the gadget driver and maintains
states internally via exchanging different messages (USB
requests and responses) in a specific order. While each gadget
driver follows the same state changes within the first two
phases, different gadgets implement different state machines
for the communication phase.
Authorized licensed use limited to: Tsinghua University. Downloaded on August 07,2022 at 12:39:18 UTC from IEEE Xplore.  Restrictions apply. 
42215
ConfigurationEnumerationData communicationInit (Ch1)Connect (Ch2)Comm (Ch3,Ch4)PhaseChannelHostGadget driverscontrol requests…ConfigurationEnumerationGadget userspacegadget createbinding…connectedSSSSS……return -1;
...
com->buf->signature != BULK_CB_SIGN)
...
// process received SCSI command
if (com->buf->cmd == WRITE) {
// wait for actual data payload from the host
recv_data_from_host (com->buf, ..) // Ch3: transition point
...
// write the received data into backing store
kernel_write(buf)
...
// wait for SCSI command from the host
recv_data_from_host (com->buf, ..) // Ch3: transition point
...
// check validity of the received SCSI command
if (com->buf->cmd_size != BULK_CB_WRAP_LEN ||
1 /* accept a SCSI command */
2 int get_next_cmd(struct fsg_common *com) {
3
4
5
6
7
8
9
10
11
12 }
13 /* handle the SCSI command */
14 int do_scsi_cmd(struct fsg_common *com) {
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34 }
35 /* SCSI command handling function in mass storage gadget */
36 while (...) {
37
38
39
40
41
42 }
// read the data from backing store
kernel_read (buf)
...
// send the data to the host, and expect valid ack
send_data_to_host (buf, ..) // Ch3: transition point
if (fail to receive ack)
}
else if (com->buf->cmd == READ) {
if (get_next_cmd(com))
if (do_scsi_cmd(com))
continue;
continue;
...
return -1;
}
...
Fig. 4: Simplified code used by the mass storage gadget.
Example: mass storage gadget driver. Figure 4 presents a
simplified example of Small Computer System Interface (SCSI)
communication, within the mass storage class (MSC) gadget
driver. In this example, the gadget enters a loop and waits for
a SCSI command from the host (line 35). Once received, it
performs validity checks in get_next_cmd(), and then it
starts to process the command message (line 37). Depending
on the received SCSI command, the gadget might need to
receive the following payload from the host, which could be
data to be stored into the storage system afterward (line 17-23),
or send data from the storage to the host (line 24-30).
Figure 5 depicts the corresponding state machine. According
to the state machine, a sequence of state transitions can lead the
exploration to deeper code locations (in the example, lines 22
and 29). To visit all the states present in the state machine, the
host needs to feed different state-specific values to trigger
the different state transitions. Without considering such a
statefulness of the gadget driver, random input from the host
side is unlikely to reach further states, causing the execution to
terminate early (e.g., line 10). As a result, how to extract the
internal state machines within each gadget driver correctly and
in a scalable fashion and how to leverage these state machines
to achieve stateful fuzzing determine the effectiveness and
efficiency of fuzzing the USB gadget stack.
Unfortunately, existing fuzzing techniques hardly tackle the
Fig. 5: Partial gadget state machine for the SCSI communication.
Fig. 6: Architecture of FUZZUSB.
statefulness of USB device drivers. As shown in Table I, most of
the existing solutions do not consider the internal state machines
within USB device drivers, due to either covering only one
phase (e.g., enumeration) or having incomplete support for the
communication phase. For the same reason, the state-of-the-art
USB fuzzer [16], although having reported more than 100
bugs, can only find shallow bugs. In fact, most of the bugs it
found are located in the driver initialization code [14, 20]. For
instance, syzkaller is mostly based on pre-defined templates,
which are manually written by domain experts replicating USB
communications. This is a common approach to addressing
stateful communication. However, manually written templates
are neither generic nor scalable to cover a variety of internal
state machines implemented by USB gadget stacks. As we will
discuss in §IV, we maximize the effectiveness and efficiency
of USB gadget stack fuzzing by guiding the fuzzer using
new state-coverage and transition-coverage feedbacks, besides
the typical code-coverage. To provide such new feedbacks,
FUZZUSB automatically extracts internal state machines using
static analysis and symbolic execution from each gadget driver.
Note that the stateful fuzzing technique developed here is
generic and can be applied to USB host stack fuzzing as well.
IV. DESIGN
To tackle the challenges of USB gadget fuzzing discussed
in §III, we design FUZZUSB to support multi-channel input
mutations and state-guided fuzzing targeting the USB gadget
stack. In this section, we outline the overall design and
workflow of FUZZUSB, and explain its key components in
detail.
A. Approach Overview
Figure 6 depicts an overview of FUZZUSB. The inputs of
FUZZUSB are USB gadget drivers within OS kernels (e.g.,
Linux kernel). FUZZUSB conducts both static and symbolic
Authorized licensed use limited to: Tsinghua University. Downloaded on August 07,2022 at 12:39:18 UTC from IEEE Xplore.  Restrictions apply. 
52216
payload…WRITEinitREAD…ackwait for ackwait for SCSI cmdwait for data to writeruntime moduleGadgetcodeState machinesState coverageFuzzerGadgetstack…1(§IV-B)Input channels(§IV-C)Static/symbolic modulestatic moduleMutation rules(§IV-D,E)2analysis to extract internal state machines automatically from
the source code of the gadget drivers (§IV-B). Static analysis
not only finds program locations controlling the internal
state machines of the drivers, but also facilitates the path
prioritization of symbolic execution to avoid path explosion.
After this step, symbolic execution follows the execution paths
prioritized by the static analysis and extracts the internal state
machines representing the functionality and behavior of the
gadget drivers.
In its runtime module, FUZZUSB takes the extracted state
machines and mutation rules as inputs to generate state-
aware fuzzing inputs. The mutation rules guide a fuzzer to
mutate inputs towards desired state transitions, and provide
the flexibility to tune the mutation strategy as needed (§IV-C).
During fuzzing, FUZZUSB further orchestrates the mutation
generation and distribution to the multiple input channels
(§IV-D). Meanwhile, coverage information, i.e., both the code
coverage and the state coverage, is fed back to FUZZUSB
driving mutations to generate the next-round fuzzing input
(§IV-E).
B. Building State Machines
To realize state-guided fuzzing, we adopt the finite state
machine (FSM) approach as the state representation. Instead of
relying on system call dependencies (e.g., open-then-write)
to infer the driver state (as implemented in related work [8–
10, 28, 29]), we use a state machine, explicitly representing
the possible internal states of the target programs (i.e., gadget
code). This approach allows a fuzzer to know available states
and transitions ahead of time and trigger state changes directly.
In particular, our state machine helps the fuzzer figure out
what to fuzz in a given state and how to transition from one
state to another. To this end, we first introduce the definition
of states and transitions in the context of USB gadget drivers.
Next, we explain how we extract internal state machines from
USB gadget drivers automatically by combining static analysis
and symbolic execution.
1) States and Transitions: As discussed in §III-B, the
effectiveness of stateful fuzzing depends on how well and
faithfully we extract states and transitions from gadget code,
which contains multiple receive and send operations
reading from and writing to channels. We define a new state
for each code line in which one of these I/O operations (either
receive or send) is executed. Considering the example in
Figure 4, they have three states, corresponding to the I/O
operations happening at lines 5, 19, and 29. We then consider
the gadget to be in a specific state based on the last I/O
operation performed. Moreover, every time a new I/O operation
is performed, we consider the gadget state transitioning from
the current state to the state corresponding to the latest I/O
operation executed. For instance, in Figure 4, after line 5 is
executed, the gadget will transition to the next state. If line 19
is later executed, the gadget will transition to another state.
We call such an I/O operation a transition point. Based
on our observation, transition points are identifiable in a
generic way as they rely on standard USB gadget APIs (e.g.,
usb_ep_queue()) provided by the underlying USB gadget
core subsystem in the OS kernels [30]. Moreover, all the
gadgets follow the standard USB protocol for the first two
communication phases (i.e., configuration and enumeration),
thus sharing the same states and transitions. In the data com-
munication phase, however, different gadget drivers implement
different functionality (e.g., mass storage in §III), resulting in
different states and transitions, and essentially different state
machines.
2) State Machine Construction: Based on the insight above,
we construct a state machine for each gadget, as described in
Algorithm 1. At a high level, we follow a two-stage program
analysis technique, including static and symbolic analysis, to
obtain input values that trigger specific state transitions during
fuzzing.
Static analysis. As the first step, FUZZUSB shortlists a
number of code paths changing states, aiming at scaling the
symbolic execution in the following step. To this aim, FUZ-
ZUSB performs static inter-procedural backward slicing [31].
In the gadget code, we keep track of all of the transition
function calls, which are standard Linux USB gadget APIs
(e.g., usb_ep_queue()). Given a USB gadget driver, we
find out where a transition function is used, i.e., transition
points (line 2 in Algorithm 1). From each transition point,
FUZZUSB performs slicing in a backward direction along with
the data- and control- dependent paths, until reaching the entry
points of the gadget, which are usually dispatcher functions
for input channels (line 3). We repeat this for all transition
points, optimizing and leaving only execution paths that can
lead to transitions. The result of the sliced driver is used as
the target code for the next step of the analysis.
Symbolic analysis. To identify concrete fuzzing input values
triggering transitions across states, we employ symbolic execu-
tion on the sliced gadget code. Our symbolic analysis attempts
to obtain concrete input values to reach the transition points
from either entry points or different transition points. Since
gadget drivers may have multiple entry points due to multiple
input channels, we carry out symbolic execution per entry
point (lines 5-19). We first symbolically taint memory buffers
that are controllable by input, then iterate over instructions
from an entry point function. Meanwhile, we keep collecting
path constraints and updating symbolic states. When reaching
a transition point, we retrieve concrete values by solving the
collected symbolic constraints (line 13). We use these values
as a concrete input to trigger a transition between the current
and next state according to the state machine of the gadget.
After refreshing (removing) the constraints that have been used,
we restart the symbolic execution from that transition point as
a new starting point of the execution (line 18). We repeat the