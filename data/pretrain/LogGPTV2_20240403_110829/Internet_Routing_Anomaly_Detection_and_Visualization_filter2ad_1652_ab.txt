Internet topology has a well-connected core with high fan-
outs toward the edges. Operationally, this picture would
not be useful — even the most sophisticated layout algo-
rithm would just generate a huge ink blob. TAMP remedies
this by pruning the graph so that only the most heavily used
parts remain. Our default is to prune all edges and nodes
which carry less than 5% of total preﬁxes in the graph. We
found experimentally that this default generates meaningful
pictures for a range of networks, from universities to enter-
prises to ISPs. TAMP also employs hierarchical pruning,
in which increasing thresholds are applied as it walks down
the graph farther away from the root. This is in response
to feedback we received from network operators. An op-
erator cares most and has control over elements in his own
domain. All routers at his site are important to him, no mat-
ter how unsubstantial the number of preﬁxes carried by a
router. Sometimes, a router announcing just a few preﬁxes
can cause serious problems.
Figure 2 is a TAMP picture of Berkeley showing how it
reaches the outside world using BGP. This picture uses a
combination of hierarchical pruning and the default thresh-
old: all BGP peers, Nexthops and neighbor ASs are shown,
and ASs which carry less than 5% of the total preﬁxes are
pruned. The leftmost rectangle is the TAMP root and repre-
sents the Berkeley campus (our REX recorder). Almost all
of preﬁxes comes from CalREN, 80% of that are from the
commodity Internet through QWest, and then fanning out to
other Tier-1 providers; 6% of the preﬁxes are from Abilene
PeerX’s RIB
Prefx          NH  ASPath
1.2.1.0/24   A    1
1.2.3.0/24   A    1
1.2.4.0/24   A    1
5.6.7.0/24   A     2
PeerY’s RIB
Prefx          NH  ASPath
1.2.2.0/24   A    1
1.2.3.0/24   A    1
1.2.4.0/24   A    1
8.9.0.0/16   B     3
1.2.1.0/24
1.2.3.0/24
1.2.4.0/24
5.6.7.0/24
w=4
PeerX
AS2
5.6.7.0/24
w=1
NexthopA
AS1
1.2.1.0/24
1.2.3.0/24
1.2.4.0/24
w=3
1.2.2.0/24
1.2.3.0/24
1.2.4.0/24
w=3
PeerY
8.9.0.0/16
w=1
1.2.2.0/24
1.2.3.0/24
1.2.4.0/24
w=3
NexthopA
AS1
8.9.0.0/16
w=1
AS3
NexthopB
AS2
w=1
PeerX
w=4
NexthopA
w=4
AS1
root
w=3
PeerY
w=1
NexthopB
w=1
AS3
(a)
(b)
(c)
Figure 1. Constructing a TAMP picture.
102838 (82%)
128.32.0.66
102838 (82%)
6092 (5%)
128.32.0.70
6092 (5%)
128.32.1.3
3 (<1%)
108938 (87%)
128.32.0.251
125580 (100%)
11423
calrenN
7405 (6%)
108469 (86%)
11537
abilene
701
alternet
1239
sprint
26546 (21%)
14445 (12%)
125580 (100%)
128.32.0.90
UC Berkeley
8/24 11:53
125604 prefixes
125588 (100%)
128.32.1.200
2 (<1%)
128.32.0.203
4 (<1%)
4 (<1%)
128.32.1.222
1 (<1%)
1 (<1%)
169.229.51.229
1 (<1%)
128.32.0.249
1 (<1%)
128.32.1.221
2 (<1%)
169.229.0.157
2 (<1%)
2 (<1%)
1 (<1%)
1 (<1%)
64666
 private
169.229.51.225
209
qwest
9037 (7%)
7286 (6%)
3356
level3
8540 (7%)
3561
cwusa
7018
att
Figure 2. TAMP visualization of Berkeley’s BGP.
which is Internet2. TAMP is able to show high-level rout-
ing policies of a network. It would be difﬁcult to see this
information from routing table dumps at routers. Note that
TAMP is not limited to using all BGP routes at a router; it
can map any set of routes, such as only routes from a par-
ticular neighbor AS, or only routes tagged with a speciﬁc
community, and so on. By appropriately choosing this set
of routes, many problems can be diagnosed. Later in Sec-
tion 4, we discuss a number of routing problems exposed by
using the TAMP technique.
A router’s TAMP tree changes frequently and continu-
ously over time as it receives BGP messages from its peers.
A route announcement with an AS path that is not part of
the existing tree would create additional edges for the tree.
If the AS path is already part of the tree, the weight (and
width) of each affected edge must be incremented. Like-
wise, a route withdrawal can remove parts of the tree, or
decrement the weights (and widths) of some edges. Given
a stream of BGP events, TAMP tracks the routing changes
expressed by the events to generate frames of TAMP pic-
tures to form an animation. We do not attempt to display
every single routing change in an animation; the human eye
would not be able to see an edge losing 10,000 preﬁxes over
a few seconds at granularity of one preﬁx at a time. Instead,
the algorithm generates an animation with a ﬁxed play dura-
tion of 30 seconds, regardless of the actual event timerange
(which can range from seconds to days). The animation
uses the standard 25 frames per second, each frame consol-
idating multiple routing changes on each edge of a TAMP
graph.
TAMP animations use a number of additional visual
cues. Figure 3 is a snapshot of a TAMP animation. At
the bottom is an animation clock, displaying the time into
the incident currently being shown. The plot to the right of
the controls shows how the number of preﬁxes varied with
time on whichever edge is selected in the TAMP graph. In
this case, the selected edge is core1-b to 10.3.4.5, and since
there is only one preﬁx, 4.5.0.0/16, the impulses on the plot
tell us that the edge is ﬂapping between carrying and not
carrying the preﬁx. The edge colors indicate how the routes
are changing: black means not changing; blue means the
edge is losing preﬁxes; green means the edge is gaining pre-
ﬁxes; yellow means the preﬁx count is ﬂapping too fast to
animate; and an edge that has lost preﬁxes also has a gray
shadow that indicates the largest number of preﬁxes it ever
carried. The thickness of the non-gray part of an edge is
proportional to the number of preﬁxes it is currently carry-
ing.
Figure 3. Snapshot of a TAMP animation.
3.2 Anomaly Detection: Stemming
BGP sends out a million messages not because a million
incidents happened. Instead, because the protocol can only
talk at the preﬁx level, it cannot express directly and explic-
itly the one or two incidents that occurred, e.g. peering ses-
sion reset, route ﬂap, connectivity change. The challenge is
to ﬁnd the structure of the few incidents in the events. Stem-
ming detects routing anomalies by ﬁnding the most strongly
correlated components in a stream of BGP events, with each
component representing a set of related routing changes.
Stemming contains a statistical correlation algorithm
modeled after principal component analysis. The algorithm
works as follows. A BGP event (cid:2) is a route announcement
(withdrawal) from a peer (cid:0) for a preﬁx  with (old) path
attributes Nexthop (cid:4) and AS path (cid:5)(cid:0) (cid:6) (cid:6) (cid:6) (cid:5). We can ex-
press (cid:2) as a sequence as follows: (cid:7) (cid:0) (cid:0)(cid:4)(cid:5)(cid:0) (cid:6) (cid:6) (cid:6) (cid:5). Let’s
call all such sequences comprising a BGP event stream
(cid:8) (cid:0) (cid:7)(cid:0)(cid:9) (cid:6) (cid:6) (cid:6) (cid:7). For each possible sub-sequence  of each
(cid:7), the algorithm counts the number of times  appears in (cid:8).
It then ranks all sub-sequences in descending order of their
counts, and picks the highest ranking sub-sequence (cid:0). The
algorithm identiﬁes the last pair of adjacent elements in this
(cid:0) as the problem location. We term this pair of elements
a stem. The set of preﬁxes  affected by this problem is
the set of  in (cid:8) containing (cid:0). The set of events (cid:12) which
makes up this problem is the set of (cid:2) containing any of the
preﬁxes in  . In other words, (cid:12) is a strongly correlated
component in the event stream that represents a set of rout-
ing changes. We can apply the algorithm recursively to an
event stream: the algorithm ﬁnds the ﬁrst component (cid:12), re-
moves (cid:12) from the stream from consideration, then ﬁnds the
next component, and so on.
Figure 4 is an illustration. There are 10 route with-
drawals during an event spike of a million at Berkeley.
Eight out of the 10 withdrawals share a common portion,
11423-209, while the remaining paths comprise different
ASs. This pattern occurs because there was a failure that led
to the withdrawals. The last edge of the common portion,
in this case 11423-209, would be the failure location. If the
failure was one hop down between 209 and 7018, the com-
mon portion would be 11423-209-7018, and the last edge,
209-7018, is the failure location.
W 192.96.10.0/24 11423 209 701 1299 5713
W 207.191.23.0/24 11423 11422 209 4519
W 192.96.10.0/24 11423 209 701 1299 5713
W 212.22.132.0/23 11423 209 1239 3228 21408
W 203.14.156.0/24 11423 209 701 705
W 209.5.188.0/24 11423 11422 209 1239 3602
W 12.2.41.0/24
W 12.96.77.0/24
W 62.80.64.0/20
W 62.80.64.0/20
11423 209 7018 13606
11423 209 7018 13606
11423 209 1239 5400 15410
11423 209 1239 5400 15410
Figure 4. Route withdrawals during an event
spike.
One of Stemming’s important characteristics is tempo-
ral independence: it does not try to infer causality in BGP
events and does not depend on event ordering. Stemming
is a correlation technique, and correlation is a well-deﬁned
property at any time-scale. For anomalies such as peering
loss, session reset or leaked routes, the time-scale would
be short, in the order of convergence times. So if Stemming