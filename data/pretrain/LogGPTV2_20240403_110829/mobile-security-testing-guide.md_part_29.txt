Android Platform APIs
Go through the permissions with the developer to identify the purpose of every permission set and remove
unnecessary permissions.
Besides going through the AndroidManifest.xml file manually, you can also use the Android Asset Packaging tool to
examine permissions.
$ aapt d permissions com.owasp.mstg.myapp
uses-permission: android.permission.WRITE_CONTACTS
uses-permission: android.permission.CHANGE_CONFIGURATION
uses-permission: android.permission.SYSTEM_ALERT_WINDOW
uses-permission: android.permission.INTERNAL_SYSTEM_WINDOW
Please reference this permissions overview for descriptions of the listed permissions that are considered dangerous.
READ_CALENDAR,
WRITE_CALENDAR,
READ_CALL_LOG,
WRITE_CALL_LOG,
PROCESS_OUTGOING_CALLS,
CAMERA,
READ_CONTACTS,
WRITE_CONTACTS,
GET_ACCOUNTS,
ACCESS_FINE_LOCATION,
ACCESS_COARSE_LOCATION,
RECORD_AUDIO,
READ_PHONE_STATE,
READ_PHONE_NUMBERS,
CALL_PHONE,
ANSWER_PHONE_CALLS,
ADD_VOICEMAIL,
USE_SIP,
BODY_SENSORS,
SEND_SMS,
RECEIVE_SMS,
READ_SMS,
RECEIVE_WAP_PUSH,
RECEIVE_MMS,
READ_EXTERNAL_STORAGE,
WRITE_EXTERNAL_STORAGE.
Custom Permissions
Apart from enforcing custom permissions via the application manifest file, you can also check permissions
programmatically. This is not recommended, however, because it is more error-prone and can be bypassed more
easily with, e.g., runtime instrumentation. It is recommended that the ContextCompat.checkSelfPermission() method
is called to check if an activity has a specified permission. Whenever you see code like the following snippet, make
sure that the same permissions are enforced in the manifest file.
private static final String TAG = "LOG";
int canProcess = checkCallingOrSelfPermission("com.example.perm.READ_INCOMING_MSG");
if (canProcess != PERMISSION_GRANTED)
throw new SecurityException();
Or with ContextCompat.checkSelfPermission which compares it to the manifest file.
if (ContextCompat.checkSelfPermission(secureActivity.this, Manifest.READ_INCOMING_MSG)
!= PackageManager.PERMISSION_GRANTED) {
213
Android Platform APIs
//!= stands for not equals PERMISSION_GRANTED
Log.v(TAG, "Permission denied");
}
Requesting Permissions
If your application has permissions that need to be requested at runtime, the application must call a
requestPermissions method in order to obtain them. The app passes the permissions needed and an integer request
code you have specified to the user asynchronously, returning once the user chooses to accept or deny the request in
the same thread. After the response is returned the same request code is passed to the app's callback method.
private static final String TAG = "LOG";
// We start by checking the permission of the current Activity
if (ContextCompat.checkSelfPermission(secureActivity.this,
Manifest.permission.WRITE_EXTERNAL_STORAGE)
!= PackageManager.PERMISSION_GRANTED) {
// Permission is not granted
// Should we show an explanation?
if (ActivityCompat.shouldShowRequestPermissionRationale(secureActivity.this,
//Gets whether you should show UI with rationale for requesting permission.
//You should do this only if you do not have permission and the permission requested rationale is not c
ommunicated clearly to the user.
Manifest.permission.WRITE_EXTERNAL_STORAGE)) {
// Asynchronous thread waits for the users response.
// After the user sees the explanation try requesting the permission again.
} else {
// Request a permission that doesn't need to be explained.
ActivityCompat.requestPermissions(secureActivity.this,
new String[]{Manifest.permission.WRITE_EXTERNAL_STORAGE},
MY_PERMISSIONS_REQUEST_WRITE_EXTERNAL_STORAGE);
// MY_PERMISSIONS_REQUEST_WRITE_EXTERNAL_STORAGE will be the app-defined int constant.
// The callback method gets the result of the request.
}
} else {
// Permission already granted debug message printed in terminal.
Log.v(TAG, "Permission already granted.");
}
Please note that if you need to provide any information or explanation to the user it needs to be done before the call to
requestPermissions , since the system dialog box can not be altered once called.
Handling the permissions response
Now your app has to override the system method onRequestPermissionsResult to see if the permission was granted.
This is where the same request code is passed that was created in requestPermissions .
The following callback method may be used for WRITE_EXTERNAL_STORAGE .
@Override //Needed to override system method onRequestPermissionsResult()
public void onRequestPermissionsResult(int requestCode, //requestCode is what you specified in requestPermissio
ns()
String permissions[], int[] permissionResults) {
switch (requestCode) {
case MY_PERMISSIONS_WRITE_EXTERNAL_STORAGE: {
if (grantResults.length > 0
&& permissionResults[0] == PackageManager.PERMISSION_GRANTED) {
// 0 is a canceled request, if int array equals requestCode permission is granted.
} else {
// permission denied code goes here.
Log.v(TAG, "Permission denied");
}
214
Android Platform APIs
return;
}
// Other switch cases can be added here for multiple permission checks.
}
}
Permissions should be explicitly requested for every needed permission, even if a similar permission from the same
group has already been requested. For applications targeting Android 7.1 (API level 25) and older, Android will
automatically give an application all the permissions from a permission group, if the user grants one of the requested
permissions of that group. Starting with Android 8.0 (API level 26), permissions will still automatically be granted if a
user has already granted a permission from the same permission group, but the application still needs to explicitly
request the permission. In this case, the onRequestPermissionsResult handler will automatically be triggered without
any user interaction.
For example if both READ_EXTERNAL_STORAGE and WRITE_EXTERNAL_STORAGE are listed in the Android Manifest but only
permissions are granted for READ_EXTERNAL_STORAGE , then requesting WRITE_LOCAL_STORAGE will automatically have
permissions without user interaction because they are in the same group and not explicitly requested.
Permission Analysis
Always check whether the application is requesting permissions it actually needs. Make sure that no permissions are
requested which are not related to the goal of the app. For instance: a single-player game that requires access to
android.permission.WRITE_SMS , might not be a good idea.
Dynamic Analysis
Permissions for installed applications can be retrieved with Drozer. The following extract demonstrates how to
examine the permissions used by an application and the custom permissions defined by the app:
dz> run app.package.info -a com.android.mms.service
Package: com.android.mms.service
Application Label: MmsService
Process Name: com.android.phone
Version: 6.0.1
Data Directory: /data/user/0/com.android.mms.service
APK Path: /system/priv-app/MmsService/MmsService.apk
UID: 1001
GID: [2001, 3002, 3003, 3001]
Shared Libraries: null
Shared User ID: android.uid.phone
Uses Permissions:
- android.permission.RECEIVE_BOOT_COMPLETED
- android.permission.READ_SMS
- android.permission.WRITE_SMS
- android.permission.BROADCAST_WAP_PUSH
- android.permission.BIND_CARRIER_SERVICES
- android.permission.BIND_CARRIER_MESSAGING_SERVICE
- android.permission.INTERACT_ACROSS_USERS
Defines Permissions:
- None
When Android applications expose IPC components to other applications, they can define permissions to control
which applications can access the components. For communication with a component protected by a normal or
dangerous permission, Drozer can be rebuilt so that it includes the required permission:
$ drozer agent build --permission android.permission.REQUIRED_PERMISSION
215
Android Platform APIs
Note that this method can't be used for signature level permissions because Drozer would need to be signed by the
certificate used to sign the target application.
When doing the dynamic analysis: validate whether the permission requested by the app is actually necessary for the
app. For instance: a single-player game that requires access to android.permission.WRITE_SMS , might not be a good
idea.
Testing for Injection Flaws (MSTG-PLATFORM-2)
Overview
Android apps can expose functionality through custom URL schemes (which are a part of Intents). They can expose
functionality to
other apps (via IPC mechanisms, such as Intents, Binders, Android Shared Memory (ASHMEM), or
BroadcastReceivers),
the user (via the user interface).
None of the input from these sources can be trusted; it must be validated and/or sanitized. Validation ensures
processing of data that the app is expecting only. If validation is not enforced, any input can be sent to the app, which
may allow an attacker or malicious app to exploit app functionality.
The following portions of the source code should be checked if any app functionality has been exposed:
Custom URL schemes. Check the test case "Testing Custom URL Schemes" as well for further test scenarios.
IPC Mechanisms (Intents, Binders, Android Shared Memory, or BroadcastReceivers). Check the test case
"Testing Whether Sensitive Data Is Exposed via IPC Mechanisms" as well for further test scenarios.
User interface
An example of a vulnerable IPC mechanism is shown below.
You can use ContentProviders to access database information, and you can probe services to see if they return data.
If data is not validated properly, the content provider may be prone to SQL injection while other apps are interacting
with it. See the following vulnerable implementation of a ContentProvider.
The AndroidManifest.xml above defines a content provider that's exported and therefore available to all other apps.
The query function in the OMTG_CODING_003_SQL_Injection_Content_Provider_Implementation.java class should be
inspected.
@Override
public Cursor query(Uri uri, String[] projection, String selection,String[] selectionArgs, String sortOrder) {
SQLiteQueryBuilder qb = new SQLiteQueryBuilder();
qb.setTables(STUDENTS_TABLE_NAME);
switch (uriMatcher.match(uri)) {
case STUDENTS:
qb.setProjectionMap(STUDENTS_PROJECTION_MAP);
break;
case STUDENT_ID:
// SQL Injection when providing an ID
qb.appendWhere( _ID + "=" + uri.getPathSegments().get(1));
Log.e("appendWhere",uri.getPathSegments().get(1).toString());
break;
216
Android Platform APIs
default:
throw new IllegalArgumentException("Unknown URI " + uri);
}
if (sortOrder == null || sortOrder == ""){
/**
* By default sort on student names
*/
sortOrder = NAME;
}
Cursor c = qb.query(db, projection, selection, selectionArgs,null, null, sortOrder);
/**
* register to watch a content URI for changes
*/
c.setNotificationUri(getContext().getContentResolver(), uri);
return c;
}
While the user is providing a STUDENT_ID at content://sg.vp.owasp_mobile.provider.College/students , the query
statement is prone to SQL injection. Obviously prepared statements must be used to avoid SQL injection, but input
validation should also be applied so that only input that the app is expecting is processed.
All app functions that process data coming in through the UI should implement input validation:
For user interface input, Android Saripaar v2 can be used.
For input from IPC or URL schemes, a validation function should be created. For example, the following
determines whether the string is alphanumeric:
public boolean isAlphaNumeric(String s){
String pattern= "^[a-zA-Z0-9]*$";
return s.matches(pattern);
}
An alternative to validation functions is type conversion, with, for example, Integer.parseInt if only integers are
expected. The OWASP Input Validation Cheat Sheet contains more information about this topic.
Dynamic Analysis
The tester should manually test the input fields with strings like OR 1=1-- if, for example, a local SQL injection
vulnerability has been identified.
On a rooted device, the command content can be used to query the data from a Content Provider. The following
command queries the vulnerable function described above.
# content query --uri content://sg.vp.owasp_mobile.provider.College/students
SQL injection can be exploited with the following command. Instead of getting the record for Bob only, the user can
retrieve all data.
# content query --uri content://sg.vp.owasp_mobile.provider.College/students --where "name='Bob') OR 1=1--''"
Drozer can also be used for dynamic testing.
Testing for Fragment Injection (MSTG-PLATFORM-2)
217
Android Platform APIs
Overview
Android SDK offers developers a way to present a Preferences activity to users, allowing the developers to extend
and adapt this abstract class.
This abstract class parses the extra data fields of an Intent, in particular, the
PreferenceActivity.EXTRA_SHOW_FRAGMENT(:android:show_fragment) and
PreferenceActivity.EXTRA_SHOW_FRAGMENT_ARGUMENTS(:android:show_fragment_arguments) fields.
The first field is expected to contain the Fragment class name, and the second one is expected to contain the input
bundle passed to the Fragment .
Because the PreferenceActivity uses reflection to load the fragment, an arbitrary class may be loaded inside the
package or the Android SDK. The loaded class runs in the context of the application that exports this activity.
With this vulnerability, an attacker can call fragments inside the target application or run the code present in other
classes' constructors. Any class that's passed in the Intent and does not extend the Fragment class will cause a
java.lang.CastException, but the empty constructor will be executed before the exception is thrown, allowing the code
present in the class constructor run.
To prevent this vulnerability, a new method called isValidFragment was added in Android 4.4 KitKat (API Level 19). It
allows developers to override this method and define the fragments that may be used in this context.
The default implementation returns true on versions older than Android 4.4 KitKat (API Level 19); it will throw an
exception on later versions.
Static Analysis
Steps:
Check if targetSdkVersion less than 19.
Find exported Activities that extend the PreferenceActivity class.
Determine whether the method isValidFragment has been overridden.
If the app currently sets its targetSdkVersion in the manifest to a value less than 19 and the vulnerable class does
not contain any implementation of isValidFragment then, the vulnerability is inherited from the PreferenceActivity.
In order to fix, developers should either update the targetSdkVersion to 19 or higher. Alternatively, if the
targetSdkVersion cannot be updated, then developers should implement isValidFragment as described.
The following example shows an Activity that extends this activity:
public class MyPreferences extends PreferenceActivity {
@Override
protected void onCreate(Bundle savedInstanceState) {
super.onCreate(savedInstanceState);
}
}
The following examples show the isValidFragment method being overridden with an implementation that allows the
loading of MyPreferenceFragment only:
@Override
protected boolean isValidFragment(String fragmentName)
{
return "com.fullpackage.MyPreferenceFragment".equals(fragmentName);
}
Example of Vulnerable App and Exploitation
218