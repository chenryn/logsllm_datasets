这两种隐蔽通道都是依靠使用通信技术与其他未经授权的主体交换信息。 因为隐蔽通道的性质
是与众不同的， 并且位于正常的数据传送环境之外 ， 所以对其进行检测十分困难。 针对任何隐蔽通
道活动的 最佳防护措施是实现审计和分析 日 志文件。
257
258
CISSP 官方学习 指南(第 7 版)
9. 11.2 基于设计或编码缺陷的攻击和安全问题
较差的设计方法、 可疑的实现应用和措施， 或者不充分的测试， 都可能导致特定的攻击。 某些
攻击是由蓄意的设计方案导致的， 此时代码中构建了 能够回避访问控制、 登录或其他安全检查的特
殊入口点， 这些代码往往是在开发阶段添加的， 但是在投入生产时未被去除。 从我们的角度出发，
因为这些入口 点通过设计避开了安全措施， 所以它们恰如其分的名字为后门， 本章稍后的 "维护钩
子和特权程序" 部分会进行更多的介绍 。 广泛的测试和代码检查要求找出 这样隐蔽的访问方式， 在
开发的最后 阶段能够轻易地去除后门， 但在测试和维护阶段， 却极难检测 后 门 。
尽管功能测试对于商业代码或应用来说非常普遍， 但是随着对病毒和蠕虫攻击、 SQL 注入攻击、
跨站脚本攻击和广泛使用 的联机公共站点偶尔受到毁损或破坏的广泛宣传， 对安全问题的单独测试
在近几年来逐步受到关注和赢得信誉。 接下来， 我们将介绍常见的攻击或安全脆弱性来源， 这些来
源是由于设计、 实现、 预先释放代码清除故障或完全彻底的编码错误导致的。 尽管可以避免， 但是
查找和修复这样的缺陷要求从开发项 目 启动时就严格采用注重安全的设计方式， 并且需要额外的时
间和精力进行测试和分析。 尽管这有助于解释软件安全性往往存在的可悲状态 ， 但是决不可原谅 !
1 初始化和失败状态
在毫无准备的情况下 ， 系统突然崩愤， 接着又重新恢复， 这个过程就可能存在两个会危及系统
安全控制的机会。 许多系统在关机过程中会卸载安全控制。 可信恢复能够保证在发生系统崩横时，
所有的控制措施都完整无缺。 在可信恢复的过程中， 系统能确保在安全控制失效的情况下不发生任
何访问 活动 。 甚至在系统恢复阶段， 所有控制方法都还在完整地运行着。
例如， 假设系统崩溃时， 还有一个数据库事务正在为被分类为绝密数据的数据库向磁盘写入数
据。 没有受到保护的系统可能会允许未经授权的用户在数据写入磁盘之前访问这些临时数据。 支持
可信恢复的系统能够保证不会发生破坏数据机密性的行为， 即使在系统崩渍的过程中也是如此。 这
个过程要求通过精心的策划和详细的步骤来处理系统故障。 虽然 自动恢复过程构成了 整个恢复过程
的一部分， 但是人为的干预仍然是必要的。 很显然， 如果需要这样的人工操作 ， 那么对执行恢复操
作 的人 员进行适当 的身份标识和身份认证同样也是必不可少的 。
2 输入和参数检查
缓冲区溢出是一种声名狼蒲的安全破坏行为。 在编程人员未能充分验证输入数据时， 尤其是在
没有对软件接受为输入的数据量进行限制时， 就会出现缓冲 区溢出 。 因 为这样的数据往往存储在某
个输入缓冲区内， 所以在超出缓冲 区正常的最大空间时， 额外的数据就被称为溢出 。 因此， 试图将
恶意入侵或代码作为程序输入部分时导致的攻击类型被称为缓冲区溢出 。 遗憾的是， 在许多系统中 ，
在高特权级别或与接受这种输入的进程相联系的任何特权级别遭到攻击的系统常常会直接造成数据
溢出。 对于几乎所有类型的操作系统(包括 Windows、 Unix、 Linux 与其他操作系统)来说， 在任何己
知 的安全脆弱性种类中， 缓冲区溢出提供了最易 见和最深切 的危害和攻击机会。
缓冲区溢出脆弱性的责任方往往是编写非净化代码的编程人员 。 如果编程人员能够尽职， 那么
可 以完全消除缓冲区溢出 ， 不过在将数据存储到任何数据结构之前， 编程人员必须检查所有的输入
数据和参数(并且限制作为输入提供的数据量)。 验证数据的有效性是消除缓冲区滋出 的唯一方法。
除此之外， 一旦发现缓冲区溢出， 受影响的系统就必须以常见的方式应用关键的安全更新， 从而避
第9章 安全脆弱性、 威胁和对施
免遭受攻击。
@ 真实场景
检查代码是否存在缓冲区溢出
| 在 2002 年初， 习 惯以 Microso企 公司 发言人身份出现的 Bill Ga阳 公布 了 "可信计算计划" ， 这
个计划希望通过改变一系 列设计原理来从安全角度解决 Miαωo企 操作 系 统和应用 程序 中 长期存在
的安全问题。 对这个话题的讨论从 2002 年持续到 2003 年， 而缓冲区·溢出主题反复出现(实际上比
Microsoft 安全公告报告的与这类问题相关的安全缺陷更为频繁， 在涉及安全的编程牵制吴中 ， 缓冲 区
溢出仍然是最严重和最常见的错误类型之一)。 作 为其他许多 开发组织和软件开发环境构建器(开发
人员 用 于创建其他软件的软件工具)经常遇到 的情况， 对防范缓冲 区攻击的意识的提高导效开发过程
中 的许 多 阶段发生 了 变化:
• 设计人员 必须为输入数据指定边界或规定可接受的输入值， 并且在请求输入时必须限制要
接受 、 分析和处理的数据量。
• 构造请求 、 接受和处理输入的代码时， 开发人 员 必须遵循上述限制 。
• 测试人员 必须通过检查确保不会发生缓冲 区溢出 ， 并且在测试输入处理代码时尝试回避或
绕开安全设直。
著名 的信息安全专家 Bruce Schneier在其著作Secrets & Li臼:Digiω1 Security in a Networked 肋rld
(Wiley， 2004)中提出 了 一个重要论点: 安全测试实 际上与标准测试活动(例如， 单元测试、 模块测试、
验收测试和质量保证检查， 请参看术语表)大相径庭; 作为开友过程的一部分， 标准测试是软件多年
以来例行完成的活动。 Microsoft 公司 (以及其他开发公司 )尚未明确 的是: 改变设计和测试原理是否
就等同 于采取严格措施挫败缓存区溢出(Miαosoft 报告的 某些较为严 重的安全漏洞持续被缓存区溢
出 或缓存 区 溢位困扰， 或者将这种脆弱性的起因 标识为 " 未经检查的缓冲 区 " ) 。
3. 维护钩子和特权程序
维护钩子程序是只有系统开发人员才知道的系统入口点。 这些入口点也被称为后门 。 虽然维护
挂接程序的存在明显地违反了安全策略， 但是它们仍然出现在许多系统中 。 后门 的最初 目 的是: 出
于维护系统的原因或者在正常的访问 由于疏忽导致失效时， 能够提供有保证的访问。 后 门存在的 问
题是: 这种访问类型避开了所有的安全控制措施， 并且为所有知道后门存在的人提供了不受限制的
访问。 必须明确禁止这些入口 点， 并且通过监控审计 日 志来发现那些表明可能是未经授权的管理员
访问行为 。
另 一种常见的系统脆弱性是幸自字在执行过程中安全级别被提高的情况。 这些程序必须被认真编
写和测试， 从而不会允许任何出 口 点和/或入口 点存在， 以防提高主体的安全级别。 确保所有运行在
较高安全级别的程序 都只 能被适当 的用 户访问， 并且这些用户 会坚 决抵制滥用 。
4. 增量攻击
某些攻击形式以缓慢的、 渐进的增量方式发生， 而不是通过明显的或可识别的活动来危害系统
的 安全性或完整性 。 数据欺骗和 salami 攻击就是两种这样的攻击形式。
当攻击者获得访问系统的权限并且在存储、 处理、 输入、 输出或事务处理期间对数据进行细小
259
CISSP 官方学 习指南(第 7 版)
的 、 随机的或增量的改变时(而不是明显地改变文件内容或破坏、 删除整个文件)， 就会发生数据欺
骗 。 如果没有通过执行加密或某种完整性检查(例如 ， 校验和或消息摘要)并在每次文件读写时都加
以应用来保护文件和数据 ， 那么就很难检测这些变化。 加密的文件系统、 文件级别的加密技术或某
些文件监控形式(包括诸如 Tripwire 之类的应用程序所执行的完整性检查)通常足以保证不会发生数
据欺骗。 数据欺骗通常被认为是一种大多 由 内 部人员 、 很少由外部人员(也就是外部入侵者)进行的
攻击。 很显然， 因 为数据欺骗是一种修改数据的攻击 ， 所 以我们将其视为主动攻击。
根据所有己公布的报告， salami 攻击更为神奇。 这种攻击的名字指的是系统化地削减账户或其
他财务记录中 的资产， 井且每次都有规律地减少少量资产值。 打个比方， 顾客将购买的意大利香肠
送入切片机进行加工 ， 攻击者每次都只偷取一小片香肠。 在现实应用 中 ， 尽管没有这种攻击的文字
记录， 但是大多数安全专家都承认 salami 攻击是可能的， 尤其会涉及组织的内 部人员 。 只 有通过适
当 的职责分离和对代码的适当控制， 组织才能完全阻止或消除这种攻击。 设置金融交易监控器来跟
踪很小的资金或价值转移有助于检测这样的活动 ， 向员工正式通报这种活动也有助于防止 salami 攻
击企图 。
注意 :
如果对salami 攻击或 salami 技术感兴趣， 那 么读者可以观看电影 《办公空 间 》、 《通天神偷》 和
《超人 3 ))。
9. 11.3 编程
我们 己经在前面提到过编程中 的最大缺陷: 缓存区溢出 ， 它是由于编程人员没有检查或净化输
入数据的格式和/或大小而造成的。 在程序中还存在其他潜在的缺陷。 任何不能妥善处理异常的程序
都处于不稳定状态的危险之中。 程序为 了执行正常的任务而提升 了 自 己的安全级别以后， 就很有可
能导致崩溃 。 如果攻击者在适当时成功地使程序崩溃， 那么他们就能达到较高的安全级别并造成对
系 统机密性、 完整性和可用性的损害 。
无论是直接执行还是间接执行， 所有的程序都必须经过完整的测试以遵从安全模型。 确认你所
安装的任何软件使用的都是最新版本， 并且知道任何己知的安全脆弱性。 因为每种安全模型和每种
安全策略都是不同的 ， 所以必须确保执行的软件不会超出准许的授权。 编写安全代码是很困难的，
不过确实是可能的。 确 保使用 的所有程序在设计时都考虑 了 安全性问题。
260
9.1 1 .4 计时、 状态改变和通信中 断
计算机系统执行任务时具有严格的精确度。 计算机的优越性在于可重复执行任务。 攻击者可以
根据任务执行的可预测性来开发攻击程序。 常见的算法的事件顺序是先检查可用资源， 然后在被准
许的情况下进行访问。 检查时间σìme Of Check， TOC)是指主体检查客体状态的时间 。 在返回要访
问 的客体之前， 系统可以做出几种决定。 当做出可以访问客体的决定时， 程序在使用时间σime Of
Use， TOU)访问 客体。 在 TOC 与 TOU 之间存在 的时间差对于攻击者来说是充足的， 攻击者能够在
这段时间 内用另一个符合自 己需要的客体来替换原先的客体。 检查时间到使用时间σime-OιCheckTo-Time-OιUse， TOC盯OU)攻击通常被称为竞争条件， 这是由于攻击者与合法的进程进行竞争，
从而希望在客体被使用之前对其进行替换。
第 9 章 安全脆弱性 、 威胁和对施
TOCπOU 攻击的一个经典例子是: 数据文件在其身份被验证之后和读取数据之前被替换。 通
过将数据文件替换为攻击者选择和设计的另一个文件， 攻击者就能够以多种方式控制程序的活动。
当然， 攻击者必须对要攻击的程序和系统有深入了解。
同样， 当资源的状态或整个系统发生改变时， 攻击者可以试图在两种 己知的状态之间采取行动。
通信中断也为攻击者提供了一段可以利用 的短暂时间 。 在资源的状态检查出现在对资源采取行动之
前的任何时候， 都存在发起潜在攻击的机会窗口 。 这些攻击必须在安全策略和安全模型中加以解决。
TOCTTOU 攻击、 竞争条件漏洞利用及沟通障碍被称为状态攻击， 因为它们攻击一个系统状态过波
到 另一个状态之间的时差 、 数据流控制和数据传输。
9.1 1 .5 技术和过程完整性
评估和理解系统架构中 的漏洞是很重要的 ， 特别是关于技术和流程的整合方面。 由于多种的技
术和复杂的过程在规划新的和定制的业务功能时相互交叉， 新的问题和安全问题就会显现出来。 随
着系统的集 成 ， 注意力应该放在潜在的单点故障方面 ， 以及面 向 服务架构(Servi臼-Oriented