I'm trying to write an `Error` implementation which supports a set of
"important" error, plus a catch-all for various minor errors caused by low-
level subsystems. The code looks something like this:
    use std::error::Error;
    pub enum DecodingError {
        EncodingUnknown,
        //...several named errors here...
        /// Other errors, the details of which are probably unimportant.
        Unexpected(Box)
    }
    impl Error for DecodingError {
        fn description(&self) -> &str { "decoding error" }
        fn detail(&self) -> Option { None }
        fn cause(&self) -> Option {
            match self {
                &DecodingError::Unexpected(cause) => Some(&*cause),
                _ => None
            }
        }
    }
This yields the following error in `cause`:
> :14:9: 17:10 error: mismatched types: expected
> `core::option::Option`, found
> `core::option::Option` (expected no bounds, found
> `Send`)
I should presumably be able to convert a `Box` to an `&Error`
safely, but I can't figure out a way to do it.