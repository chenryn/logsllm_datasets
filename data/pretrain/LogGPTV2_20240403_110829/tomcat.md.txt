### Tomcat与Catalina

**Tomcat** 是一个由一系列可配置组件构成的 Web 容器，而 **Catalina** 是 Tomcat 的 Servlet 容器实现。Catalina 包含了所有容器组件，并通过松耦合的方式集成 Coyote（连接器），以完成按照请求协议进行数据读写。此外，它还包括启动入口和 shell 程序等。

#### Catalina 结构
以下是 Catalina 的源码结构：

![Catalina 源码结构](media/image2.png){width="3.884931102362205in" height="3.2391786964129485in"}

Catalina 的主要结构如下：

![Catalina 结构](media/image3.png){width="5.661167979002625in" height="3.082191601049869in"}

![Container 结构](media/image5.png){width="6.0in" height="2.51875in"}

![Container 配置](media/image6.png){width="6.0in" height="1.8256944444444445in"}

#### 配置文件 `server.xml`

`server.xml` 是 Tomcat 的核心配置文件，用于定义服务器、引擎、主机和上下文等组件。

```xml
<!-- 引擎 -->
<Engine name="Catalina" defaultHost="localhost">
  <!-- 虚拟主机或站点 -->
  <Host name="localhost" appBase="webapps">
    <!-- 表示一个 Web 应用 -->
    <Context path="/myapp" docBase="myapp"/>
  </Host>
</Engine>
```

#### 请求处理流程

**Mapper 组件**：将用户请求的 URL 定位到一个 Servlet。

**工作原理**：Mapper 组件保存了 Web 应用的配置信息，即容器组件与访问路径的映射关系。例如，Host 容器中的域名、Context 容器中的 Web 应用路径以及 Wrapper 容器中的 Servlet 映射路径。这些配置信息可以想象成一个多层的 Map。

当一个请求到达时，Mapper 组件通过解析请求 URL 中的域名和路径，在其保存的 Map 中查找，从而定位到一个 Servlet。最终，一个请求 URL 只会定位到一个 Wrapper 容器，也就是一个 Servlet。

![请求处理流程](media/image7.png){width="7.1982524059492565in" height="3.3283584864391953in"}

### Tomcat 安全配置

1. **删除 `webapps` 目录下的所有文件**，禁用 Tomcat 管理界面。
2. **注释或删除 `tomcat-users.xml` 文件内的所有用户权限**。
3. **更改或禁用关闭 Tomcat 的指令**：
   - 测试步骤：使用 `telnet` 连接到 Tomcat 服务器的 8005 端口，输入 `SHUTDOWN` 即可关闭 Tomcat 服务器。
   - ![关闭 Tomcat 指令](media/image8.png){width="6.0in" height="2.0319444444444446in"}
4. **定义错误页面**：
   - ![定义错误页面](media/image9.png){width="6.0in" height="2.6527777777777777in"}

### Tomcat 应用安全

![Tomcat 应用安全](media/image10.png){width="6.0in" height="0.6in"}

### Tomcat 传输安全

- **启用 HTTPS**：确保数据在传输过程中的安全性。
- **配置 SSL/TLS**：使用强加密算法和证书。

![Tomcat 传输安全](media/image11.png){width="6.0in" height="2.2715277777777776in"}

![SSL/TLS 配置](media/image12.png){width="6.0in" height="2.767361111111111in"}

通过以上配置，可以有效提升 Tomcat 服务器的安全性。