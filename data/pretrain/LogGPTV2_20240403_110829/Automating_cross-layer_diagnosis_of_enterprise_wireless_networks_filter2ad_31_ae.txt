### Remote Host Identification and DNS Resolution

Remote hosts are identified through domain names, which necessitates the use of the Domain Name System (DNS) to resolve these names into IP addresses. Once the DNS resolves the IP address of the destination, the host can begin sending actual data.

### End-System Startup Delay Analysis

To analyze the delay associated with end-system startup, we define a set of candidate selection rules to isolate stations that are truly starting up, as opposed to those re-associating after a period of idleness. A station is deemed to be starting up if the first packet we see from it is a scan request. We only consider stations that eventually succeed in associating with one of our access points and send at least one TCP packet.

### Distribution of Startup Times

Figure 11 shows the distribution of startup times for clients that successfully connect to our network. The "First to TCP" curve represents the total wall-clock time from the first probe request to the first TCP segment. Surprisingly, most hosts take more than ten seconds before they begin communicating on the network, with the average host taking almost a minute. We conjecture that a significant portion of this time is spent idling, meaning the machine is not actively trying to make progress towards sending data.

### Validation of Conjecture

To validate our conjecture, we determine whether each successive span was successful or not. If successful, the time between spans is likely due to delays on the end host. Conversely, time between failed spans is assumed to be due to some sort of network timeout. A scan is considered successful if it is not followed by a subsequent scan. Association, DHCP, and DNS are deemed successful if the last packet in the span was outgoing from the base station to the client (i.e., an ACK).

The "without OS delay" line removes estimated OS delays from the measured startup latency by subtracting idle time between successful spans, under the presumption that any delay in initiating the subsequent span is due to the end host (i.e., the operating system has not yet initialized the network stack).

### Idle Time and Unsuccessful Spans

The average host spends almost eight seconds idling, presumably because the operating system is booting or resuming from power-save mode. However, if we sum only the duration of successful spans, the average host spends over 20 seconds during or after unsuccessful spans. The "good only" line represents a best-case scenario with no idle time between stages.

### Breakdown of Successful Spans

Even the successful spans take a non-trivial amount of time. Figure 12 breaks down the various stages in the startup process, using span durations and ignoring the time between spans. Clients spend the majority of their time scanning for an appropriate access point. Association itself generally takes less than 10 ms, after which communication with hosts beyond the access point can begin. DHCP, which depends on a remote server, can take anywhere from 10 ms to five seconds to obtain an IP address. ARP, while frequently fast, often takes longer than one second in more than half the cases due to the "ARP to self" request, which must timeout.

### Timeouts and Unsuccessful Spans

Figure 13 shows that while some stages like DNS and association frequently timeout in about 10 ms, they can take tens of seconds in the worst case. The minimum DHCP timeout is 100 ms, and failed scans are extremely expensive, with a minimum of seven seconds. Failed scans indicate that there are no desirable access points in range, and most stations wait for at least ten seconds before re-scanning the network. Some hosts continue to scan for extended periods, possibly because they never find an AP they wish to join.

### Dynamic Address Assignment Using DHCP

Finally, we model dynamic address assignment using DHCP, which is an inherent aspect of most 802.11 wireless networks. DHCP is convenient for both users and network administrators but can impose noticeable and annoying delays. Clients initiate DHCP transactions for various reasons: their lease has expired, their existing lease is starting to expire, they associate with a new AP, or they re-associate with a previous AP. Table 3 shows a breakdown of the reasons why clients in our building initiate DHCP transactions for a typical weekday. The dominant reason is clients contacting the server to start the lease renewal process.

### Duration of DHCP Transactions

Figure 14 plots the distribution of DHCP transaction durations for a typical weekday. Most transactions complete in a reasonable amount of time, with 75% completing in under six seconds. However, over 10% of transactions take longer than a minute, which is quite noticeable for users connecting to the network for the first time that day.

### Operating System Dependence

Users sometimes wonder if wireless behavior depends on their operating system. Based on Ethernet vendor codes for MAC addresses and the "Vendor Class" option in the DHCP protocol, we can determine the manufacturer of the operating system and networking hardware for almost all of the 186 stations in the trace. Apple clients consistently experience longer DHCP transactions than Windows clients, partly due to the Zeroconf standard used by default in OS X, which adds an additional ten seconds to the startup time.

### Conclusion

Modern enterprise networks are complex, making even simple faults difficult to diagnose, especially in 802.11-based wireless access networks. We believe that diagnosis must be automated, and networks should address transient failures without human involvement. To this end, we have developed models that accurately determine the impact of protocol behavior from the physical layer to the transport layer. While some sources of delay can be directly measured, many components, such as AP queuing, backoffs, and contention, must be inferred. We also explore overheads due to mobility management, including scanning, association, ARP, DHCP, and authentication. Our models, demonstrated through traces of wireless traffic in a four-story office building, show that a holistic analysis is necessary to cover the range of problems experienced in real networks.

### Acknowledgments

We thank Lou Forbis for assisting with our wireless production network, Jim Madden for supporting our network measurement efforts, Aditya Akella for insightful feedback, and Michelle Panik for detailed feedback and copy-editing. This work was supported in part by the UCSD Center for Networked Systems (CNS), Ericsson, NSF CAREER grant CNS-0347949, and U.C. Discovery CoRe grant 01-10099 as a Calit2-sponsored research project.

### References

[References listed here as provided in the original text]

This optimized version aims to improve clarity, coherence, and professionalism, making the content more accessible and easier to understand.