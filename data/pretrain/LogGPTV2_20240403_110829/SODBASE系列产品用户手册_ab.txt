  SELECT T1,T2,T3
  FROM T1:data-src1,T2:data-src1,T3:data-src1PATTERN T1;T2;T3 //T1 T2 T2 顺序发生
  WHERE T1.name=T3.name
  AND T2.name='Google'
  AND T1.price > (1+0.2)*T2.price
  AND JAVA:com.example.ClassName:greaterThan(T1.price,T2.price)
		  WITHIN 500	
首先拖入三个input，并输入name，分别为T1，T2，T3。工作
区面板右键菜单选择“配置依赖库”：
其中点击选择文件按钮用来选择你所需要导入的jar包，
选择完成后路径会显示在右边：
最后拖入output，并连接各节点：
在Studio中，自定义函数和自定义适配器的jar包都可以通
过配置，并进行测试。（注：模型在CEP
Server服务器部署则需要Web过配置，并进行测试。（注：模型在CEP
Server服务器部署则需要Web
容器中放置jar文件，重启Web容器。）
1.2.2.6 SODBASE CEP的时间窗口
SODBASE
CEP属于监测（detection-oriented）和统计(aggregation-oriented)
结合的引擎。建模中级联节点是“一级公民”，完整的
模型是多个计算节点级联而成的。根据大量实践经验，
两种时间窗口可以满足绝大多数应用需求。
第一种：事件监测窗口。例如监测“下单后，没有付款
成功，就出货”的事件。
在SODSQL中表示为WITHIN time,例如上图中WITHIN
3。在这种窗口下，设检测输出复杂事件e1的结束时间_en
d_time_，则下一个检测出的复杂事件e2的开始时间_start_ti
me_可以小于等于e1._end_time。
第二种：分批统计窗口。例如持续监测“每当股价超过第二种：分批统计窗口。例如持续监测“每当股价超过
阈值后，开启1分钟窗口，统计1分钟内这只股票均价。
这1分钟内的超过阈值事件，就不再开启新的1分钟窗口
”。
在这种窗口下，设检测输出复杂事件e1的结束时间_end_ti
me_，则下一个检测出的复杂事件e2的开始时间_start_time_
需满足e2._start_time_>=e1._end_time_，等于情况只在同一时间
点有多个事件时才会发生。
在WITHIN time 后加关键字BATCHMODE，例上图中 WITHIN 3
BATCHMODE，表示监测到满足条件复杂事件后，清空前面窗
口1缓冲区。BATCHMODE主要和Kleen
closure模式配套使用。SODSQL的修改可以使用Studio在XML中
修改。
两种窗口的相同点
两种窗口输出的复杂事件e,都需满足|e._end_time_-e._start_time_|,=,
v
x
h5
h5
h5
h5
h5
h5
h5
h5
h5
h5
!x
z
|
°
²
´
è
ê
ì
ð
ò
ô
ö
ø
ú
h5
h5
h5
h5
h5
h5
h5
h5
h5ú
h5
h5
h5
h5
h5
h5
h5
h5
h5
h5
h5
h5
h5
h5
h5
h5
h5
h5
h5
h5
h5
h5
h5
h5
j¸
h5
h5
h5
h5
h5
h5
h5
j;
h5
h5
j¬
h5
h5
h5
j/
h5
h5
h5
h5
h5
h5
h5
h5
h5
h5
h5
h5
h5
h5
h5
h5
h5
h5