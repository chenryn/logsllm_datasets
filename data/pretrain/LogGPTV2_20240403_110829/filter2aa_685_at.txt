program is doing
Suspends the main thread 
for 3 seconds; sleep’s 
parameter is in ms
When the loop finishes, lineFlowVar 
can be read immediately using the ^ 
operator. This line displays the input 
that was read by readLine.
Licensed to   
159
Parsing data
sleep(3000) statement with another procedure that does some useful work on the
main thread. For example, you might draw your application’s user interface or call
the asynchronous I/O event loop’s poll procedure, as in chapter 3. 
6.2.3
Exceptions in threads
The ways exceptions behave in separate threads may be surprising. When a thread
crashes with an unhandled exception, the application will crash with it. It doesn’t mat-
ter whether you read the value of the FlowVar or not.
FUTURE VERSIONS
This behavior will change in a future version of Nim, so
that exceptions aren’t raised unless you read the value of the FlowVar.
The following listing shows this behavior in action.
import threadpool
proc crash(): string =
raise newException(Exception, "Crash")
let lineFlowVar = spawn crash()
sync()
Save listing 6.9 as listing6.nim, and then compile and run it. You should see a trace-
back in the output pointing you to the raise statement in the crash procedure.
THE RAISES PRAGMA
The raises pragma can be used to ensure that your
threads handle all exceptions. To make use of it, you can define the crash
procedure like so: proc crash(): string {.raises: [].} = … . This will mark
the crash procedure as raising no exceptions. Exceptions that are allowed to
be raised by the procedure can be specified in the square brackets.
In summary, the simplicity of both passing arguments to a spawned procedure and
receiving the procedure’s result makes spawn good for tasks that have a relatively short
runtime. Such tasks typically produce results at the end of their execution, and as such
don’t need to communicate with other threads until their execution stops.
 For long-running tasks that need to communicate with other threads periodically,
the createThread procedure defined in the threads module should be used instead. 
6.3
Parsing data
Now that you know how to use threads in Nim, let’s look at a practical example of how
they can be used. The example in this section involves parsers and shows a practical
use case involving Nim’s concurrency and parallelism features.
 A lot of data is generated every day from many different sources and intended for
many different applications. Computers are very useful tools for processing this data,
but in order for that data to be consumed, the computers must understand the format
the data is stored in.
Listing 6.9
Exceptions in a spawned procedure
Licensed to   
160
CHAPTER 6
Parallelism
 A parser is a software component that takes data as input and builds a data structure
out of it. The input data is typically in the form of text. In chapter 3, you looked at the
JSON data format and at how it was parsed, using the json module, into a data struc-
ture that could then be queried for specific information.
 There often comes a time when you need to write a custom parser for a simple
data format. There are many ways such a task can be tackled in Nim.
 In this section, I’ll show you how to write a parser for Wikipedia’s page-view data.2
This data is useful for many different applications, but in this section we’ll create an
application that will find the most popular page in the English Wikipedia. In the pro-
cess, you’ll do the following:
 Learn the structure and format of the Wikipedia page-counts files
 Use different techniques to write a parser for the page-counts format
 Read large files by breaking them up into conveniently sized chunks or fragments
WIKIPEDIA API
Wikipedia recently introduced a Pageview API (https://wikitech
.wikimedia.org/wiki/Analytics/PageviewAPI) that supplements the raw page-
view data and makes finding the most popular page in the English Wikipedia
much easier. If you’re writing an application that needs to find the most popular
pages on Wikipedia, you may want to use the API instead. Parsing the raw data
manually is less efficient, but you’ll find the example applicable to other tasks.
At the end of this section, I’ll also show you how to parallelize the parser, allowing it to
perform better on systems with multicore CPUs.
6.3.1
Understanding the Wikipedia page-counts format
The raw page-count data can be downloaded from Wikipedia here: https://dumps
.wikimedia.org/other/pagecounts-all-sites/.
 The data files are organized into specific years and months. For example, the page-
count data for January 2016 is available at https://dumps.wikimedia.org/other/
pagecounts-all-sites/2016/2016-01/. The data is then further subdivided into days
and hours. Each file at the preceding URL represents the visitors within a single hour.
The files are all gzipped to reduce their size.
 Download the following file and then extract it: https://dumps.wikimedia
.org/other/pagecounts-all-sites/2016/2016-01/pagecounts-20160101-050000.gz.
FOR WINDOWS USERS
On Windows, you may need to install 7-Zip or another
application for extracting gzipped archives.
The file may take a while to download, depending on your internet speed. It’s around
92 MB before extraction, and around 428 MB after extraction, so it’s a fairly large file.
The parser will need to be efficient to parse that file in a timely manner.
2 https://wikitech.wikimedia.org/wiki/Analytics/Data/Pagecounts-all-sites.
Licensed to   
161
Parsing data
 The file is filled with lines of text separated by newline characters. Each line of text
consists of the following four fields separated by spaces:
domain_code page_title count_views total_response_size
domain_code contains an abbreviated domain name; for example, en.wikipedia.org is
abbreviated as en. page_title contains the title of the page requested; for example,
Dublin for http://en.wikipedia.org/wiki/Dublin. count_views contains the number
of times the page has been viewed within the hour. Finally, total_response_size is
the number of bytes that have been transferred due to requests for that page.
 For example, consider the following line:
en Nim_(programming_language) 1 70231
This means that there was one request to http://en.wikipedia.org/wiki/Nim_(pro-
gramming_language) that accounted in total for 70,231 response bytes.
 The file I asked you to download is one of the smaller files from January 2016. It
contains data about the Wikipedia pages visited from January 1, 2016, 4:00 a.m. UTC,
to January 1, 2016, 5:00 a.m. UTC. 
6.3.2
Parsing the Wikipedia page-counts format
There are many different options when it comes to parsing the page-counts format.
I’ll show you how to implement a parser using three different methods: regular
expressions, the split procedure, and the parseutils module.
PARSING USING REGULAR EXPRESSIONS
A common way to parse data is using regular expressions (regexes), and if you’ve ever
dealt with string processing in any way, you’ve likely come across them. Regular
expressions are very popular, and often when developers need to parse a string, they
immediately jump to using regular expressions.
 Regular expressions are by no means a magical solution to every parsing problem.
For example, writing a regular expression to parse arbitrary HTML is virtually impossi-
ble.3 But for parsing a simple data format like the Wikipedia page-counts format, reg-
ular expressions work well.
LEARNING ABOUT REGULAR EXPRESSIONS
Explaining regular expressions in
depth is beyond the scope of this chapter. If you aren’t familiar with them, I
encourage you to read up on them online.
Regular expressions are supported in Nim via the re module. It defines procedures
and types for using regular expressions to parse and manipulate strings.
WARNING: EXTERNAL DEPENDENCY
The re module is an impure module,
which means it depends on an external C library. In re’s case, the C library is
called PCRE, and it must be installed alongside your application for your
application to function properly.
3 That doesn’t stop people from trying: http://stackoverflow.com/questions/1732348/regex-match-open-tags-
except-xhtml-self-contained-tags.
Licensed to   
162
CHAPTER 6
Parallelism
Let’s focus on parsing a single line first. The following listing shows how you can do
that with the re module.
import re
let pattern = re"([^\s]+)\s([^\s]+)\s(\d+)\s(\d+)"
var line = "en Nim_(programming_language) 1 70231"
var matches: array[4, string]
let start = find(line, pattern, matches)
doAssert start == 0
doAssert matches[0] == "en"
doAssert matches[1] == "Nim_(programming_language)"
doAssert matches[2] == "1"
doAssert matches[3] == "70231"
echo("Parsed successfully!")
WARNING: THE RE CONSTRUCTOR
Constructing a regular expression is an
expensive operation. When you’re performing multiple regex matches with
the same regular expression, make sure you reuse the value returned by the
re constructor.
Save listing 6.10 as listing7.nim, and then compile and run it. The program should
compile and run successfully, displaying “Parsed successfully!”
PCRE PROBLEMS
If the program exits with an error similar to could not
load: pcre.dll, you’re missing the PCRE library and must install it.
The code for parsing strings with regular expressions is straightforward. As long as
you know how to create regular expressions, you should have no trouble using it.
 The re module also includes other procedures for parsing and manipulating
strings. For example, you can replace matched substrings using the replace proce-
dure. Take a look at the documentation for the re module for more information
(http://nim-lang.org/docs/re.html). 
PARSING THE DATA MANUALLY USING SPLIT
You can also parse data manually in many different ways. This approach provides mul-
tiple advantages but also a few disadvantages. The biggest advantage over using regu-
lar expressions is that your application will have no dependency on the PCRE library.
Manual parsing also makes it easier to control the parsing process. In some cases, the
biggest disadvantage is that it takes more code to parse data manually.
Listing 6.10
Parsing data with the re module
A new regex pattern is 
constructed using the re 
constructor.
This matches array will hold 
the matched substrings of line.
The re module defines 
the find procedure.
The find procedure is used to find 
matching substrings as specified 
by the subgroups in the regex. 
The substrings are put into the 
matches array.
The return value 
indicates the starting 
position of the matching 
string; -1 is returned if 
no match was made.
The first matching group will capture the
substring "en", followed by the second
matching group, which will capture
"Nim_(programming_language)", and so on.
Licensed to   
163
Parsing data
 For such a simple data format as the Wikipedia page-counts format, you can use
the split procedure defined in the strutils module. The following listing shows
how split can be used to parse “en Nim_(programming_language) 1 70231.”
import strutils
var line = "en Nim_(programming_language) 1 70231"
var matches = line.split()
doAssert matches[0] == "en"
doAssert matches[1] == "Nim_(programming_language)"
doAssert matches[2] == "1"
doAssert matches[3] == "70231"
This solution will work very well for this use case, but for more-complex data formats,
you may want a solution that’s more flexible. The most flexible way to parse a string is
to iterate over every character in that string using a while loop. This method of pars-
ing is very verbose, but it’s useful in certain circumstances, such as when parsing more-
complex data formats like HTML. Nim’s parseutils module defines procedures that
make parsing using such methods much easier. 
PARSING DATA MANUALLY USING PARSEUTILS
The following listing shows how the parseutils module can be used to parse “en
Nim_(programming_language) 1 70231.”
import parseutils
var line = "en Nim_(programming_language) 1 70231"
var i = 0
var domainCode = ""
i.inc parseUntil(line, domainCode, {' '}, i)
i.inc
var pageTitle = ""
i.inc parseUntil(line, pageTitle, {' '}, i)
i.inc
var countViews = 0
i.inc parseInt(line, countViews, i)
i.inc
var totalSize = 0
i.inc parseInt(line, totalSize, i)
Listing 6.11
Parsing using split
Listing 6.12
Parsing using parseutils
The strutils module defines 
the split procedure.
By default, the split procedure splits 
the string when it finds whitespace. 
The returned sequence will be @["en", 
"Nim_(programming_language)", "1", 
"70231"].
The contents of the resulting 
matches variable are the 
same as in listing 6.10.
Imports parseutils, which 
defines parseUntil
Defines a counter to keep
track of the program’s
current position in the string
Copies characters 
starting at index i from 
the line string to the 
string specified in the 
second argument, until 
line[i] == ' '. The 
returned value is the 
number of characters 
captured, and it’s used 
to increment i.
Parses an int starting at index i in the 
line string. The parsed int is stored in the 
second argument. The returned value is 
the number of characters captured.
Defines a string or int variable where 
the parsed token will be stored
Skips whitespace character 
by simply incrementing i
Licensed to   
164
CHAPTER 6
Parallelism
doAssert domainCode == "en"
doAssert pageTitle == "Nim_(programming_language)"
doAssert countViews == 1
doAssert totalSize == 70231
The code in listing 6.12 is far more complex than the previous listing, but it allows for
far greater flexibility.
 The parseutils module also defines many other procedures that are useful for
parsing. They’re mostly convenience wrappers over a while loop. For example, the
equivalent code for i.inc parseUntil(line, domainCode, {' '}, i) is the following:
while line[i] != ' ':
domainCode.add(line[i])
i.inc
Because of the flexibility of this parser, the code can parse the last two fields into inte-
gers in a single step. That’s instead of having to first separate the fields and then parse
the integer, which is inefficient.
 In summary, the split procedure is the simplest approach, but it’s slower than
parseutils because it needs to create a sequence and new strings to hold the
matches. In comparison, the parsing code that uses parseutils only needs to create
two new strings and two new integers; there’s no overhead associated with the creation
of a sequence.
 The regex parsing code is also simpler than parseutils, but it suffers from the
PCRE dependency and is also slower than the parseutils parser.
 This makes the parseutils parser the best solution for this use case, even though
it’s slightly more complex and significantly more verbose. Its speed will come in handy
when parsing the 7,156,099 lines in the pagecounts-20160101-050000 file. 
6.3.3
Processing each line of a file efficiently
The Wikipedia page-counts files are large. Each measures around 500 MB and contains
around 10 million lines of data. The pagecounts-20160101-050000 file that I asked you
to download measures 428 MB and contains 7,156,099 lines of page-count data.
 In order to parse this file efficiently, you’ll need to consume the file in fragments.
Reading the full file into your program’s memory would consume at least 428 MB of
RAM, and the actual consumption would likely be far larger due to various overheads.
That’s why it’s a good idea to read large files by breaking them up into conveniently
sized, smaller fragments, otherwise known as chunks.
USING AN ITERATOR TO READ A FILE IN FRAGMENTS
Nim defines an iterator called lines that iterates over each line in a file. This iterator
doesn’t need to copy the full file’s contents into the program’s memory, which makes
it very efficient. The lines iterator is defined in the system module.
 The following listing shows how the lines iterator can be used to read lines from
the pagecounts-20160101-050000 file.
Licensed to   
165
Parsing data
import os
proc readPageCounts(filename: string) =
for line in filename.lines:
echo(line)
when isMainModule:
const file = "pagecounts-20160101-050000"
let filename = getCurrentDir() / file
readPageCounts(filename)
Save listing 6.13 as sequential_counts.nim, and then compile and run it. The program
will take around a minute to execute because it will display each line of the page-
counts file. You may terminate it by pressing Ctrl-C. As it runs, you can observe the
memory usage, which should remain low. 
PARSING EACH LINE
You can now add the parsing code from listing 6.12 to the code in listing 6.13. Listing
6.14 shows how the parser can be integrated into listing 6.13, with the changes high-
lighted in bold.
import os, parseutils
proc parse(line: string, domainCode, pageTitle: var string,
      countViews, totalSize: var int) =
var i = 0
domainCode.setLen(0)
i.inc parseUntil(line, domainCode, {' '}, i)
i.inc
pageTitle.setLen(0)
i.inc parseUntil(line, pageTitle, {' '}, i)
i.inc
countViews = 0
i.inc parseInt(line, countViews, i)
i.inc
totalSize = 0
i.inc parseInt(line, totalSize, i)
proc readPageCounts(filename: string) =
var domainCode = ""
var pageTitle = ""
Listing 6.13
Iterating over each line in a file
Listing 6.14
Parsing each line in a file
The os module defines the 
getCurrentDir procedure.
Defines a readPageCounts procedure 
that takes the filename of the page-
counts file as an argument
Iterates through each line in the 
file located at filename using the 
lines iterator
Displays each line that was read
Defines a file constant and assigns 
it the name of the page-counts file
Checks whether this module is being 
compiled as the main module
Defines a filename 
variable and assigns it the 
path of the program’s 
current working directory 
joined with file. The / 
operator is defined in the 
os module and is used to 
concatenate file paths.
Calls  the readPageCounts 
procedure and passes the 
value of the filename 
variable as an argument
The variables in which the parsed 
tokens are stored are passed by 
reference. This is efficient because 
new strings don’t have to be 
allocated for each call to parse.
The length of the string is reset to 
0. This is much more efficient 
than assigning "" because setLen 
reuses memory instead of 
allocating new strings.
The integer variables are 
simply reset to 0.
Licensed to   
166
CHAPTER 6
Parallelism
var countViews = 0
var totalSize = 0
for line in filename.lines:
parse(line, domainCode, pageTitle, countViews, totalSize)
echo("Title: ", pageTitle)
when isMainModule:
const file = "pagecounts-20160101-050000"
let filename = getCurrentDir() / file
readPageCounts(filename)
Replace the code in sequential_counts.nim with the code in listing 6.14. The follow-
ing listing shows what some of the output from sequential_counts.nim may look like.
...
Title: List_of_digital_terrestrial_television_channels_(UK)
Title: List_of_diglossic_regions
Title: List_of_dignitaries_at_the_state_funeral_of_John_F._Kennedy
Title: List_of_dimensionless_quantities
Title: List_of_diners
Title: List_of_dinosaur_genera
Title: List_of_dinosaur_specimens_with_nicknames
Title: List_of_dinosaurs
...
The code in listing 6.14 employs a number of optimizations. First, the biggest slow-
downs in Nim applications are often caused by too many variables being allocated and
deallocated. The parse procedure could return the parsed tokens, but that would
result in a new string being allocated for each iteration. Instead, the parse procedure
here accepts a mutable reference to two strings and two ints, which it then fills with
the parsed tokens. A file that takes 9.3 seconds to parse without this optimization takes
7.8 seconds to parse with the optimization. That’s a difference of 1.5 seconds.