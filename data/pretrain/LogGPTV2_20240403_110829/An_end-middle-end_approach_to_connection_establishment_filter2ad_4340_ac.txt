5:
6:
7:
8:
9: end if
10: MSG ← new REGISTER(E,AL)
11: for all AP in FWDTO do
12:
13: end for
SENDTO(MSG, AP)
return
end if
address A that wishes to accept ﬂows sends the REGISTER(E, A)
message to the local P-Box (Figure 2). When a P-Box receives a
REGISTER message (Algorithm 1), it adds the mapping to its local
registration table (assuming the endpoint is authenticated and au-
thorized to register with that P-Box). If the P-Box has any parent
P-Boxes, the P-Box propagates a mapping between the endpoint’s
name and the P-Box’s own address to all the parents. This pro-
cess is repeated recursively until the REGISTER reaches the core.
For instance, in Figure 2, E1’s registration is forwarded by his in-
host P-Box to P 2 then to P 1, E2’s registration to P 5 then to both
P 3, P 4, and E3’s registration to P 6. Now, if the outermost P-Box
is a contact P-Box registered for E’s domain, then the registration
process terminates as the reverse route from the DNS to the end-
point is complete (e.g. for E1, E2). Otherwise, to complete the
route the message is forwarded one last hop to the contact P-Boxes
for that domain (e.g. for E3); this second case is typically encoun-
tered by roaming endpoints.
As an optimization, wildcards in REGISTER messages are used
N1
6
1
E1
2
Core
5
Token
P-Box for 
M-Box requiring 
Message containing 
FlowNegotiate (E1->E2)
FlowNegotiate (E2->E1)
1
2
5
3
6
1
4
3
N2
4
E2
Figure 3: Flow negotiation over name-routed signaling.
to register default routes. A principal can register a default route for
all services owned to point to his primary endhost, while a domain
(or sub-domain) administrator can register a default route for all
endpoints in that domain (or sub-domain) to go through a P-Box he
administers. During name-routing, the most speciﬁc registration is
used (i.e. a route for the endpoint is preferred over a route for the
principal, which is preferred over a route for the longest matching
domain portion).
2.3.4 Access Control
Flow requests may be rejected by P-Boxes in the network in one
of two ways. First, the lack of a registration for a given service or
principal will cause a P-Box to reject a ﬂow request for that service
or principal. Second, an endpoint or P-Box administrator may spec-
ify that ﬂow requests for registered names be additionally ﬁltered
by the name of the requester, either as a whitelist or a blacklist.
These ﬁlters are installed in much the same way as name-routes.
An endpoint Edst that wishes to disallow ﬂow requests from Esrc
sends the DISALLOW(Edst, Esrc) message to the local P-Box; wild-
cards can be used in either endpoint name to broaden the scope of
the ﬁlter. A P-Box administrator may likewise do a DISALLOW(Edst,
Esrc) at its P-Box. Either way, P-Boxes may forward the ﬁlter up
the name-routing tree (as with REGISTER messages), but unlike
REGISTER messages, the ﬁlter message does not need to bubble
up all the way to the top. The ﬁlter should nevertheless go beyond
the local (in-host) P-Box to allow for in-network ﬁltering. How to
resolve conﬂicting ﬁlters is a matter of local policy.
2.3.5 Name-Routing
Name-routing is performed over the tree-overlay created by P-
Boxes and endpoints in the registration process. An endpoint Esrc
that wishes to initiate a ﬂow with Edst sends a FLOWNEGOTIATE
(Esrc, Edst, Asrc, [ ]) message to its local P-Box. Esrc and Edst
are the endpoint names (no wildcards allowed), and Asrc is the
network address of the initiator. The P-Box authorizes the ﬂow
based on installed ﬁlters and local network policy. If authorized,
the P-Box forwards the message towards the destination as illus-
trated in Algorithm 2: if the local registration table has an entry
matching Edst, the message is forwarded to the associated address.
If no matching entry exists and the P-Box has a parent P-Box, the
message is forwarded to the parent. If no parent P-Box exists (out-
ermost P-Box), the message is forwarded to a contact P-Box for
the destination domain. Local policy may be consulted to pick one
or more of many candidate P-Boxes to forward to (e.g. for multi-
homed networks).
return false
Algorithm 2 PROCESSFLOWNEGOTIATE(ES,ED,AS,T)
Require: ES is source endpoint
Require: ED is destination endpoint (EDU,EDD,EDS)
Require: AS is effective source address
Require: T is address-routing state {τ1...n}
Require: ES is authenticated and authorized to contact ED
Ensure: Endpoints acquire address-routing information needed
1: if DISALLOWEDBYFILTER(ED,ES) then
2:
3: end if
4: if EXISTSINREGISTRATIONTABLE(ED) then
FWDTO ← REGISTEREDADDRESS(ED)
5:
6: else if HAVEPARENTPBOX() then
FWDTO ← SELECTPARENTPBOXADDRESS()
7:
8: else
FWDTO ← SELECTCONTACTPBOXADDRESSFOR(EDD)
9:
10: end if
11: TOK ← CREATEAUTHTOKEN()
12: if BEHINDNAT(AS) or EXPLICITMBOX() then
13:
14: else
15:
16: end if
17: T’ ← T ∪ {(TOK,AS)}
18: MSG ← new FLOWNEGOTIATE(ES,ED,AS’,T’)
19: SENDTO(MSG, FWDTO)
AS’ ← GETMBOXEXTERNALADDRESS()
AS’ ← AS
Core
1
2
Token
M-Box requiring 
Message containing 
FlowInit
1
1
2
N1
E1
N2
E2
Figure 4: Flow initialization over address-routed signaling (performed after
ﬂow negotiation in Figure 3).
Before forwarding the FLOWNEGOTIATE, the P-Box modiﬁes
it by adding τi : (token, nexthop), which is the state needed by
endpoints and M-Boxes to initialize the address-routed path. τ con-
tains an authorization token, which is a nonce signed by the P-Box.
If the Asrc advertised by the endpoint is behind a NAT M-Box, or
if the M-Box terminates the address-routed ﬂow (e.g. application
level M-Boxes that must be explicitly addressed), the P-Box re-
places Asrc with the address of the M-Box — this is the address
that the remote endpoint should send packets to.
In such cases,
the M-Box will, however, eventually need the original Asrc for
address-routing of processed packets; for this purpose, the P-Box
uses the nexthop ﬁeld in τ to communicate Asrc to the M-Box.
This addition of tokens is illustrated in Figure 3 where each P-Box
enroute adds a token required by its M-Box.
When the destination receives the FLOWNEGOTIATE, it learns
the effective address of the initiator and a set of tokens τ1...n that it
needs to initialize its data path. The destination name-routes its own
address (Adst) and the acquired tokens τ1...n back to the initiator
in a FLOWNEGOTIATE message, which allows the initiator to learn
the destination’s effective address and tokens.
2.4 Address-routed Messages
FORWARDPACKET(P)
return
Algorithm 3 PROCESSPACKET(P)
Require: P is an address-routed packet
Ensure: Only authorized ﬂow packets can pass
1: if FOREXISTINGFLOW(P) or FORMYPBOX(P) then
2:
3:
4: end if
5: if PACKETISFLOWINIT(P) then
6:
7:
8:
9:
10:
11:
12:
13:
14:
15:
16: end if
17: RESPONDWITHREFERRAL(P)
FWDTO ← GETNEXTHOPIN(τi)
CREATENATSTATE(P, FWDTO)
end if
FORWARDPACKET(P)
return
for all τi in P do
if ISVALIDAUTHTOKENFORME(τi) then
if IAMANAT(P) then
end if
end for
ization installs any necessary per-ﬂow state in M-Boxes enroute.
The initialization process is described as follows: both endpoints
address-route a FLOWINIT(Aself , Apeer(cid:2) , Pself , τ1...n) message to
the remote endpoint; the message is sent to the peer’s effective ad-
dress Apeer(cid:2) over IP from the local source address Aself . Pself is
the local transport port allocated for the ﬂow, and τ1...n are the to-
kens accumulated in the FLOWNEGOTIATE. The message is natu-
rally routed through M-Boxes for networks on the IP-path between
the endpoints as shown in Figure 4.
At each M-Box, the message is checked for the presence of a
τi with a valid authorization token for that M-Box. If found, the
message is forwarded to the next-hop as per normal IP routing. If
an M-Boxes requires additional state to forward the message (e.g.
NATs), the M-Box initializes this state from the nexthop ﬁeld in
τi. Port-translating NAT M-Boxes also translate the advertised port
Pself for outbound messages as per normal NAT operation; this
allows the remote endpoint to learn the effective port to use. Once
both endpoints have sent FLOWINIT messages, application data can
ﬂow along the address-routed path.
As mentioned earlier, if a M-Box receives a message without a
valid authorization token, the M-Box responds with a REFERRAL
message for its associated P-Box (Algorithm 3). The only excep-
tion is a message sent to the associated P-Box, as the P-Box must
by default be reachable from both inside and outside that network
to route new name-routed messages.
Note that M-Boxes, in general, are not explicitly addressed. This
is needed so IP routers retain the ability to route around network
failures (particularly around a failed M-Box). If a M-Box fails, the
IP route may fail over to another M-Box in the same network; the
second M-Box generates a referral for the ﬁrst data packet routed
through it (due to lack of ﬂow state). In such cases, the endpoint
attempts to re-initialize the address-routed ﬂow through the new
M-Box with the tokens it used to initialize the ﬁrst M-Box; this is
likely to succeed and data ﬂow can resume immediately. In cases
where the IP route fails over to a different network altogether (with
potentially different ﬂow policies), the original set of tokens is in-
sufﬁcient and the endpoint must re-negotiate the ﬂow over name-
routed signaling through the referred P-Box before re-initializing
the new address-routed path.
2.5 Security Considerations
Endpoints use the peer address and τ1...n acquired over name-
routed signaling to initialize the address-routed path. The initial-
P-Boxes, M-Boxes, referrals, tokens, names and name-routed
messages are new elements for attackers to attack, and through
them, attack ﬂow establishment. We now discuss how the archi-
tecture defends against these new attacks.
NUTSS brings Akamai-like protection to all endpoints. NUTSS
allows for massive replication of P-Boxes and M-Boxes by being
ﬂexible about (and dynamically discovering) where they are placed
in the network. Furthermore, the NUTSS token mechanism can
be co-opted by approaches, such as capabilities [62], to provide
DDoS protection to endhosts. While this approach is similar to
that taken by Akamai [1], NUTSS operates at the network layer
and need not rely a single large proxy provider. NUTSS assumes
the presence of external DDoS protection mechanisms [30, 4, 5, 61,
62, 27, 2, 26] to protect P-Boxes and M-Boxes at the IP level. Other
than that, standard defenses (crypto-puzzles [59], CAPTCHAs [56]
etc.) delivered over the name-routed path apply against resource
exhaustion attacks.
We assume that standard authentication protocols on the name-
routed path are used by P-Boxes and endpoints to establish trust in
each other. P-Box to P-Box communication may be secured with
keys exchanged out-of-band when possible (e.g. when establishing
customer-provider relationships, or stored in DNS). NUTSS does
not mandate the mechanism for establishing trust. As today, trust
can be established through reputation-based “webs-of-trust” [64],
mutually trusted certiﬁcate authorities [54], trusted hardware [51],