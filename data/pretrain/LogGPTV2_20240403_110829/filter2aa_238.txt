### 使用Unicode编码绕过Resin的安全校验

在Resin服务器中，URI和参数名以及参数值都可以使用Unicode编码。例如，如果根目录下存在`b.jsp`文件，可以通过以下URL访问：

```
http://127.0.0.1:8083/%u0062%u002e%u006a%u0073%u0070
```

需要注意的是，在这种情况下，`getRequestURI()`方法返回的仍然是Unicode编码后的值。如果项目使用`getRequestURI()`对路径进行权限校验，攻击者可以利用这种方式绕过安全检查。

#### 实验验证

在泛微系统上测试这种方法时，发现会直接返回500错误。通过查看日志，定位到具体的报错位置如下：

**报错位置：**
- `WEB-INF/myclasses/weaver/security/filter/SecurityMain.class`

**堆栈跟踪：**

```java
Xss(Exception):sw=java.lang.IllegalArgumentException: URLDecoder: Illegal hex characters in escape (%) pattern - For input string: "u0"
  at java.net.URLDecoder.decode(URLDecoder.java:194)
  at java.net.URLDecoder.decode(URLDecoder.java:100)
  at weaver.security.core.SecurityCore.uriDecode(SecurityCore.java:8733)
  at weaver.security.core.SecurityCore.return404(SecurityCore.java:540)
  at weaver.security.filter.SecurityMain.process(SecurityMain.java:82)
  at sun.reflect.GeneratedMethodAccessor68.invoke(Unknown Source)
  at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
  at java.lang.reflect.Method.invoke(Method.java:498)
  at weaver.filter.SecurityFilter.doFilterInternal(SecurityFilter.java:51)
  at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:76)
  at com.caucho.server.dispatch.FilterFilterChain.doFilter(FilterFilterChain.java:87)
  at com.caucho.server.webapp.WebAppFilterChain.doFilter(WebAppFilterChain.java:187)
  at com.caucho.server.dispatch.ServletInvocation.service(ServletInvocation.java:265)
  at com.caucho.server.http.HttpRequest.handleRequest(HttpRequest.java:273)
  at com.caucho.server.port.TcpConnection.run(TcpConnection.java:682)
  at com.caucho.util.ThreadPool$Item.runTasks(ThreadPool.java:730)
  at com.caucho.util.ThreadPool$Item.run(ThreadPool.java:649)
  at java.lang.Thread.run(Thread.java:748)
```

#### 深入分析

进一步分析`return404`和`uriDecode`方法，发现`path`为`req.getRequestURI()`。如果路径中含有`%`字符，则会调用`URLDecoder`进行解码。如果解码失败（如遇到非法的十六进制字符），则会抛出异常。

尝试先进行Unicode编码再进行URL编码的方法，但测试结果表明这种方法不可行，因为只会进行URL解码而无法匹配到Servlet。

#### Resin源码分析

在`com.caucho.server.dispatch.InvocationDecoder#normalizeUriEscape`方法中，如果字符`ch`等于`37`（即`%`），则会调用`scanUriEscape`方法进行解码。

```java
private static String normalizeUriEscape(byte[] rawUri, int i, int len, String encoding) throws IOException {
    ByteToChar converter = ByteToChar.create();
    if (encoding == null) {
        encoding = "utf-8";
    }
    try {
        converter.setEncoding(encoding);
    } catch (UnsupportedEncodingException var7) {
        log.log(Level.FINE, var7.toString(), var7);
    }
    try {
        while (i < len) {
            // 解码逻辑
        }
    } catch (IOException e) {
        throw e;
    }
}
```

#### 绕过WAF

通过上述方法，可以尝试绕过一些基于URL解码的安全防护措施（如WAF）。然而，需要注意的是，这种方法可能会引发其他安全问题或导致系统不稳定。因此，在实际应用中应谨慎使用，并确保系统的安全性。