Performance. We benchmarked (Figure 11) and compared the
performance of three WebAssembly cryptographic libraries:
(A) HACL∗ compiled to C via KreMLin then compiled to
WebAssembly via Emscripten, (B) libsodium compiled to
WebAssembly via Emscripten, and (C) our KreMLin-compiled
WHACL∗. We measured, for each cryptographic primitive, the
run time of batches of 1 to 100 thousands operations on a
machine equipped with an Intel i7-8550U processor.
We ﬁrst compare (A) and (B). When executed as a C
library, HACL∗ is known to have comparable performance
with libsodium (with assembly optimizations disabled) [18].
Consequently, when compiled with Emscripten, we ﬁnd that
the code for most HACL∗ primitives (A) is roughly as fast as
the code from libsodium (B). However, we ﬁnd that the gener-
ated WebAssembly code for Curve25519 and Ed25519 from
HACL∗ (A) is 6-11x slower than the code from libsodium
1264
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:40:34 UTC from IEEE Xplore.  Restrictions apply. 
(B). This is because HACL∗ relies on 128-bit arithmetic
in these primitives, which is available on C compilers like
gcc and clang, but in WebAssembly, 128-bit integers need
to be encoded as a pair of 64-bit
integers, which makes
the resulting code very slow. Instead, libsodium switches to
a hand-written 32-bit implementation, which is signiﬁcantly
faster. If and when HACL∗ adds a 32-bit implementation for
these primitives, we expect the performance gap to disappear.
This experience serves as a warning for naive compilations
from high-performance C code to WebAssembly, irrespective
of the compilation toolchain.
The more interesting comparison is between (C) and (A).
Compared to the Emscripten route (A), our custom backend
(C) generates code that is between 2.1x (SHA256) and 5.2x
(Ed25519/verify) slower. This is a direct consequence of our
emphasis on auditability and compactness: KreMLin closely
follows the rules from Figure 8 and performs strictly no
optimization besides inlining. As such, KreMLin, including the
Wasm backend, amounts to 11,000 lines of OCaml (excluding
whitespace and comments). Looking forward, we see two
avenues for improving performance.
First, we believe a large amount of low-hanging fruits
remain in KreMLin. For instance, a preliminary investigation
reveals that the most egregious slowdown (Ed25519) is likely
due to the use of 128-bit integers. Barring any optimizations,
a 128-bit integer is always allocated as a two-word struct
(including subexpressions), which in turn adds stack manage-
ment overhead. We plan to optimize this away, something we
speculate Emscripten already does.
Second, JIT compilers for Wasm are still relatively new [32],
and also contain many low-hanging fruits. Right now, the
Emscripten toolchain uses a WebAssembly-speciﬁc optimizer
(Binaryen) that compensates for the limitations of browser
JITs. We hope that whichever optimizations Binaryen deems
necessary soon become part of browser JITs, which will help
close the gap between (C) and (A).
C. Secret Independence in WebAssembly
When compiling veriﬁed source code in high-level program-
ming language like F∗ (or C) to a low-level machine language
like WebAssembly (or x86 assembly), a natural concern is
whether the compiler preserves the security guarantees proved
about source code. Verifying the compiler itself provides the
strongest guarantees but is an ambitious project [29].
Manual review of the generated code and comprehensive
testing can provide some assurance, and so indeed we exten-
sively audit and test the WebAssembly generated from our
compiler. However, testing can only ﬁnd memory errors and
correctness bugs. For cryptographic code, we are also con-
cerned that some compiler optimizations may well introduce
side-channel leaks even if they were not present in the source.
A Potential Timing Leak in Curve25519.js. We illustrate the
problem with a real-world example taken from the Curve25519
code in LibSignal-JavaScript, which is compiled using Em-
scripten from C to JavaScript (not to WebAssembly). The
source code includes an fadd function in C very similar to
the one we showed in III. At the heart of this function is 64-
bit integer addition, which a C compiler translates to some
constant-time addition instruction on any modern platform.
Recall, however, that JavaScript has a single numeric type,
IEEE-754 double precision ﬂoats, which can accurately repre-
sent 32-bit values but not 64-bit values. As such, JavaScript is
a 32-bit target, so to compile fadd, Emscripten generates and
uses the following 64-bit addition function in JavaScript:
function i64Add(a, b, c, d) {
/* x = a + b*2ˆ32 ; y = c + d*2ˆ32 ; result = l + h*2ˆ32 */
a = a|0; b = b|0; c = c|0; d = d|0;
var l = 0, h = 0;
l = (a + c)>>>0;
// Add carry from low word to high word on overﬂow.
h = (b + d + (((l>>>0) >>0))|0))>>>0;
return ((tempRet0 = h,l|0)|0);
}
This function now has a potential side-channel leak, because
of the (l>>>0) >>0) subterm, a direct comparison be-
tween l and a, one or both of which could be secret. Depending
on how the JavaScript runtime executes this comparison, it
may take different amounts of time for different inputs, hence
leaking these secret values. These kinds of timing attacks are
an actual concern for LibSignal-JavaScript, in that an attacker
who can measure ﬁne-grained running time (say from another
JavaScript program running in parallel) may be able to obtain
the long-term identity keys of the participants.
This exact timing leak does not occur in the WebAssembly
output of Emscripten, since 64-bit addition is available in
WebAssembly, but how do we know that other side-channels
are not introduced by one of the many optimizations? This
is a problem not just for Emscripten but for all optimizing
compilers, and the state-of-the-art for side-channel analysis
of cryptographic code is to check that the generated machine
code preserves so-called “constant-time” behaviour [33], [34].
We propose to build a validation pass on the WebAssembly
code generated from KreMLin to ensure that it preserves the
side-channel guarantees proved for the Low∗ source code.
To ensure that these guarantees are preserved all the way to
machine code, we hope to eventually connect our toolchain to
CT-Wasm [35], a new proposal that advocates for a notion of
secrets directly built into the WebAssembly semantics.
Secrets in HACL∗. HACL∗ code manipulates arrays of
machine integers of various sizes and by default, HACL∗ treats
all these machine integers as secret, representing them by an
abstract type (which we model as α in λow∗) deﬁned in a
secret integer library. The only public integer values in HACL∗
code are array lengths and indices.
The secret
integer library offers a controlled subset of
integer operations known to be constant-time, e.g. the library
rules out division or direct comparisons on secret integers.
Secret integers cannot be converted to public integers (al-
though the reverse is allowed), and hence we cannot print a
secret integer, or use it as an index into an array, or compare
its value with another integer. This programming discipline
1265
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:40:34 UTC from IEEE Xplore.  Restrictions apply. 
CLASSIFY
C ⊢ i ∶ π
C ⊢ i ∶ σ
BINOPPUB
o is constant-time
C ⊢ t.binop o ∶ m m → m
BINOPPRIV
o is not constant-time
C ⊢ t.binop o ∶ π π → π
LOAD
C ⊢ t.load ∶ ∗σ π → σ
LOCAL
C((cid:3)) = m
C ⊢ get local (cid:3) ∶ [] → m
COND
(cid:6)⇀
i1 ∶ (cid:6)⇀
m → π
C ⊢
(cid:6)⇀
i1 then
C ⊢ if
C ⊢
(cid:6)⇀
i2 else
(cid:6)(cid:6)⇀
i{2,3} ∶ (cid:6)⇀
(cid:6)⇀
i3 ∶ (cid:6)⇀
m → (cid:6)⇀
m
m π → (cid:6)⇀
m
Fig. 12. Secret Independence Checker (selected rules)
guarantees a form of timing side-channel resistance called
secret independence at the level of the Low∗ source [9].
Carrying this type-based information all the way to Web-
Assembly, we develop a checker that analyzes the generated
WebAssembly code to ensure that secret
independence is
preserved, even though Low∗ secret integers are compiled to
regular integers in WebAssembly. We observe that adding
such a checker is only made possible by having a custom
toolchain that allows us to propagate secrecy information from
the source code to the generated WebAssembly. It would
likely be much harder to apply the same analysis to arbitrary
optimized WebAssembly generated by Emscripten.
We ran our analysis on the entire WHACL∗ library; the
checker validated all of the generated WebAssembly code.
We experimented with introducing deliberate bugs at various
points throughout the toolchain, and were able to conﬁrm that
the checker declined to validate the resulting code.
Checking Secret Independence for WebAssembly. The rules
for our secret independence checker are presented in Figure 12.
We mimic the typing rules from the original WebAssembly
presentation [4]: just like the typing judgement captures the
effect of an instruction on the operand stack via a judgement
C ⊢ i ∶
m captures the
information-ﬂow effect of an instruction on the operand stack.
The context C maps each local variable to either π (public)
or σ (secret). The mode m is one of π, σ or ∗σ. The ∗σ mode
indicates a pointer to secret data, and embodies our hypothesis
that all pointers point to secret data. (This assumption holds
for the HACL∗ codebase, but we plan to include a more ﬁne-
grained memory analysis in future work.)
(cid:6)⇀
t , our judgement C ⊢ i ∶ (cid:6)⇀
m → (cid:6)⇀
(cid:6)⇀
t →
m1 → (cid:6)⇀
(cid:6)⇀
m
(cid:6)⇀
m2 and (cid:6)⇀
For brevity, Figure 12 omits administrative rules regarding
sequential composition; empty sequences; and equivalence
between (cid:6)⇀
m2. The mode of local
m
variables is determined by the context C (rule LOCAL). Con-
stant time operations accept any mode m for their operands
(rule BINOPPUB); if needed, one can always classify data
(rule CLASSIFY) to ensure that the operands to BINOPPUB
are homogeneous. For binary operations that are not constant-
m1 → (cid:6)⇀
Fig. 13. LibSignal*: We write an F∗ speciﬁcation for the Signal protocol and
verify its security by transcribing it into a ProVerif model. We then write a
Low∗ implementation of Signal and verify it against the spec using F∗. We
compile the code to WebAssembly, link it with WHACL∗ and embed both
modules within a defensive JavaScript wrapper in LibSignal-JavaScript.
time (e.g. equality, division), the rules require that the operands
be public. Conditionals always take a public value for the
condition (rule COND). For memory loads, the requirement
is that the address be a pointer to secret data (always true of
all addresses), and that the index be public data (rule LOAD).
In order to successfully validate a program, the checker
needs to construct a context C that assigns modes to variables.
For function arguments, this is done by examining the original
λow∗ type for occurrences of α, i.e. secret types. For function
locals, we use a simple bidirectional inference mechanism,
which exploits the fact that i) our compilation scheme never
re-uses a local variable slot for different modes and ii) classi-
ﬁcations are explicit, i.e. the programmer needs to explicitly
cast public integers to secret in HACL∗.
V. LIBSIGNAL*: VERIFIED LIBSIGNAL IN WEBASSEMBLY
As our main case study, we rewrite and verify the core
protocol code of LibSignal in F*. We compile our implemen-
tation to WebAssembly and embed the resulting code back
within LibSignal-JavaScript to obtain a high-assurance drop-
in replacement for this popular library, which is currently used
in the desktop versions of WhatsApp, Skype, and Signal.
Our Signal implementation is likely the ﬁrst cryptographic
protocol implementation to be compiled to WebAssembly, and
is certainly the ﬁrst to be veriﬁed for correctness, memory
safety, and side-channel resistance. In particular, we carefully
design a defensive API between our veriﬁed WebAssembly
code and the outer LibSignal JavaScript code so that we can
try to preserve some of the strong security guarantees of the
Signal protocol, even against bugs in LibSignal.
Our methodology and it components are depicted in Fig-
ure 13. We ﬁrst describe the Signal protocol and how we
specify it in F∗. Then, we detail our veriﬁed implementation
in Low∗ and its integration into LibSignal-JavaScript.
A. An F∗ Speciﬁcation for the Signal Protocol
Signal is a cryptographic protocol that allows two devices
to exchange end-to-end encrypted messages via an untrusted
server that is used only to store and forward encrypted data
and public key material. Figures 15 and 16 depict the message
ﬂow and the main cryptographic computations in the protocol.
1266
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:40:34 UTC from IEEE Xplore.  Restrictions apply. 
Asynchronous Session Initiation (X3DH). The ﬁrst phase of
the conversation (Figure 15) is sometimes called X3DH [2]. It
consists of two messages that set up a bidirectional mutually-
authenticated channel between an initiator I and responder R,
who are identiﬁed by their long-term Difﬁe-Hellman identity
keys ((i, gi), (r, gr)).
A distinctive feature of X3DH, in comparison with classic
channel-establishment protocols like TLS, is that it is asyn-
chronous : I can start sending messages even if R is ofﬂine,
as long as R has previously uploaded some public key material
(called prekeys) to the messaging server. Hence, to begin the
conversation with R, I must know R’s public key gr, and must
have downloaded R’s signed Difﬁe-Hellman prekey gs (signed
with r), and an optional one-time Difﬁe-Hellman prekey go.
We assume that I knows the private key for its own public
key gi, and that R remembers the private keys r, s and o.
As depicted in Figure 15, I constructs the ﬁrst session
initiation message in three steps:
● Initiate: I generates a fresh Difﬁe-Hellman keypair
(e, ge) and uses e and its identity key i to compute 3
(or optionally 4) Difﬁe-Hellman shared secrets in combi-
nation with all the public keys it currently knows for R
(gr, gs, go). It then puts the results together to derive an
initial root key (rk 0) for the session.
● SendRatchet: I generates a second Difﬁe-Hellman key-
pair (x, gx) and uses it