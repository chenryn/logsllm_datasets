### Indicators for HTTPS and HTTP in the Address Bar

HTTPS and HTTP indicators are displayed on the address bar. A **GOOD** design includes displaying these indicators (such as lock or exclamation icons) to show whether a page meets the TLS requirements. A **BAD** design omits these indicators entirely. Displaying the scheme ("https://" or "http://") also serves as an indicator, although it is less intuitive than icons and thus receives a **NEUTRAL** rating.

### TLS Indicator: Content and Indicator Proximity

Content must not be displayed in a way that confuses hosted content or browser indicators. In this study, we conducted tests T6 and T7 to evaluate whether lock emojis in titles and long sub-domain names could confuse users. According to our guidelines, IABIs should not allow lock emojis to mimic HTTPS indicators or long sub-domain names to mislead users, which would be considered **GOOD** ratings for T6 and T7. A **NEUTRAL** rating is given when both security indicators and lock emojis are displayed (T6). For T7, a **NEUTRAL** rating is assigned if the domain name is not displayed (though this is a **BAD** design in T2), and a **BAD** design refers to those that ignore this principle and allow the two items to mislead users.

The results of our analysis for T2 through T7 are presented in Section 4.3.

### Analyzing Risks during Page Navigation

When a user navigates a web page within an app's IABI, it is particularly risky to input username and password information in a login form, as IABIs are more vulnerable to phishing attacks compared to standalone browsers [18]. Therefore, well-designed IABIs should provide specific and additional warnings to remind users of the risks associated with entering passwords on login pages. This should apply to both insecure HTTP login pages and HTTPS login pages with valid but illegitimate certificates, as attackers can create phishing pages using CA-issued (valid) certificates on similar domains (e.g., alibababa.com instead of alibaba.com).

To test this, we evaluated whether IABIs show specific or additional warnings during navigation of a login page, compared to their normal behavior on non-login pages (T8). We used URL8 and URL10, which are example HTTP and HTTPS login pages, respectively. For Facebook and FB Messenger, we used our university’s HTTP login page since URL10 is already the Facebook login page. For each IABI, we navigated to the two login pages, entered a username and password, and checked for specific warnings.

A **GOOD** rating was given if the IABI provided specific warnings for both HTTP and HTTPS login pages. A **NEUTRAL** rating was assigned if the IABI displayed a warning for at least one login page, and a **BAD** rating if no such warning was provided for either page. The test results for T8 are shown in Section 4.4.

### Cross-Platform Analysis Results

This section begins with an overview of the test apps used in our analysis (Section 4.1). Sections 4.2, 4.3, and 4.4 cover our analysis results on IABIs handling URLs before web page opening, during web page opening, and during web page navigation, respectively.

#### 4.1 Test Apps and Overall Analysis Results

Table 1 lists the category, number of ratings on the Apple Store, and installs on Google Play for the 25 high-profile applications we analyzed. These apps were selected because they have an IABI and are representative of popular apps from various usage categories. In each category, the apps are sorted by popularity on the Apple Store, as users in China typically do not use Google Play to install Android apps.

Table 2 provides an overview of our analysis results, with details discussed in Sections 4.2, 4.3, and 4.4. When an app uses Chrome Custom Tabs (CCT) or SFSafariViewController (SF) to implement IABI, its behavior is consistent (as defined in CCT and SF; see row “CCT/SF” in Table 2). Therefore, our analysis focuses more on the "own IABI" implementation, where each app makes its own design and implementation decisions. As the results on Android and iOS are generally the same, we will first discuss the Android platform followed by a brief comparison with iOS results.

#### 4.2 Usability Risks before Page Opening

As discussed in Section 3.1, this part of the analysis concerns how the URL is displayed before the end user opens it.

##### 4.2.1 T1: Displayed URLs before Page Opening

Figure 3 shows screenshots of a few representative apps and how they display a URL before the end user clicks on it. After analyzing the different handling, we categorized them into three groups: **Good**, **Neutral**, and **Bad**.

- **GOOD**: The most common method (used by about 50% of our subject apps) is to display the complete URL (see Case 1 in Figure 3). This is considered a **GOOD** practice as it allows end users to see the full URL without being misled by maliciously crafted favicons or titles (see the **BAD** cases later).