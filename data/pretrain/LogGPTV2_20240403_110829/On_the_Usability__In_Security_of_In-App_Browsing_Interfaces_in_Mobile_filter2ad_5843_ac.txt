the HTTPS and HTTP indicators are displayed on the address
bar. A GOOD rating is to display the indicators (lock/exclama-
tion icons) to show whether a page meets the TLS requirement.
A BAD design does not show any indicators. Displaying the
scheme (“https://” or “http://”) also serves as an indicator, al-
though not as intuitive as icons and therefore receives a NEU-
TRAL score.
4) TLS indicator: Content and Indicator Proximity. Content
MUST NOT be displayed in a manner that confuses hosted con-
tent or browser indicators. In this paper, we conduct T6 and T7
to test whether the lock emoji in the titles and long sub-domain
names could confuse the users. According to this guideline, the
IABIs should not allow lock emoji to mimic the HTTPS indica-
tors or allow the long sub-domain name to mislead users, which
are the GOOD ratings of T6 and T7. We define NEUTRAL as
displaying both the security indicators and the lock emoji (T6).
In T7, NEUTRAL is not displaying the domain name (though it is
a BAD design in T2), and a BAD design refers to those ignoring
this principle and allowing the two items to mislead users.
The results of our analysis into T2 ∼ T7 are presented in Sec-
tion 4.3.
3.3 Analyzing Risks on Page Navigating
When a user navigates a web page in an app’s IABI, it is dangerous
to input the username and password information in a login form
because IABIs are more vulnerable to phishing attacks than stan-
dalone browsers [18]. Therefore, well-designed IABIs should give
specific and extra warnings to remind users of the risk of inputting
passwords during navigating a login page. Moreover, they should
cover not only insecure HTTP login pages but also HTTPS login
pages with vaild but illegitimate certificates. That is because an
attacker can forge a phishing page with the title of a popular page
(e.g., alibaba.com) by simply using a CA-issued (valid) certificate
on a similar domain (e.g., alibababa.com) and thus meet the TLS
requirement.
Based on this consideration, we test whether IABIs would show
a specific or extra warning during navigation of a login page as
compared with their normal behaviors on a non-login page (T8). We
conduct this test using URL8 and URL10, which are example HTTP
and HTTPS login pages, respectively. Note that for Facebook and FB
Messenger, we use our university’s HTTP login page since URL10
is already the Facebook login page. For each IABI, we navigate to
the two login pages, input a username and a password, and check
whether the IABI shows a specific warning on our operation.
Specifically, we assign a GOOD rating if the subject IABI pro-
vides specific warnings for both HTTP and HTTPS login pages.
In contrast, we give the NEUTRAL and BAD ratings if the subject
IABI displays a warning for at least one login page or has no such
warning for both pages, respectively. We show the test results of
T8 in Section 4.4.
4 CROSS-PLATFORM ANALYSIS RESULTS
We begin this section with an overview of the test apps used in our
analysis (Section 4.1). Section 4.2, 4.3, and 4.4 cover our analysis
results on IABIs handling of URLs before web page opening, during
web page opening, and during web page navigation, respectively.
4.1 Test Apps and Overall Analysis Results
Table 1 shows the category, number of ratings on Apple Store, and
installs on Google Play of the 25 high-profile applications we use
in our analysis. We reiterate that these apps are selected because
they have an IABI and they are good representations of popular
apps from various usage categories. In each category, we sort these
apps according to their popularity on Apple Store because users in
China typically do not use Google Play to install Android apps.
Table 2 presents an overview of our analysis results, with details
discussed in Section 4.2, 4.3, and 4.4. Note that when an app uses
Chrome Custom Tabs (CCT) or SFSafariViewController (SF) to
implement IABI, its behavior will always be the same (defined in
CCT and SF; see row “CCT/SF” in Table 2). Therefore, our analysis
and discussion below focus more on the analysis of “own IABI”
implementation, where each subject app makes its own call on the
389On the Usability (In)Security of In-App Browsing Interfaces in Mobile Apps
RAID ’21, October 6–8, 2021, San Sebastian, Spain
Table 1: Subject mobile apps we tested and # of their Apple
Store ratings and Google Play installs.
Category
Chat
Social
Email
Business
News
App Name
WeChat
FB Messenger
QQ
Snapchat
LINE
Telegram
KakaoTalk
Hangouts
Instagram
Weibo
Facebook
Twitter
Tumblr
VK Russia
Gmail
163 Mail
Mail.ru
QQ Mail
Alipay
LinkedIn
Toutiao
Reddit
Baidu
Zhihu
Quora
# of Ratings
4,000,000+
1,000,000+
700,000+
300,000+
200,000+
60,000+
60,000+
40,000+
10,000,000+
500,000+
400,000+
200,000+
200,000+
200,000+
100,000+
100,000+
100,000+
50,000+
600,000+
50,000+
2,000,000+
1,000,000+
800,000+
700,000+
70,000+
# of Installs
100M-500M
1B-5B
5B-10B
1B-5B
500M-1B
100M-500M
100M-500M
1B-5B
1B-5B
1B-5B
5B-10B
500M-1B
100M-500M
100M-500M
5B-10B
50M-100M
50M-100M
100M-500M
1B-5B
500M-1B
100M-500M
1M-50M
1M-50M
100M-500M
1M-50M
design and implementation. As the results on Android and iOS are
the same in most subject apps, in the following detailed discussions,
we will first focus on our analysis on the Android platform followed
by a brief comparison with results on iOS.
4.2 Usability Risks before Page Opening
As discussed in Section 3.1, this part of the analysis concerns how
the URL is displayed before end users opens it.
4.2.1 T1: Displayed URLs before page opening. Figure 3 provides
screenshots of a few representative apps on how they display a URL
before end users click on it. After analyzing the different handling,
we categorize them into three buckets — Good, Neutral, and Bad1.
GOOD. The most common way (accounts for roughly 50% of
our subject apps) is displaying the complete URL; see Case 1 in
Figure 3. We consider this a GOOD practice as end users can see
the full URL without being misled by maliciously crafted favicons
or titles (see the BAD cases later).