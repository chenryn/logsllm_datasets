## Page 197
输入/输出、文件与命令执行
185
改变目录时更薪PS1的个人版本
（无法如实运行，见内文）
cd(){
cd *sa*
真的改变目录了吗！？
PS1=*$(x*+*/)\$ *
x=$ (pwd)
取得当前目录的名称，并传给变量x
献断前面的组成部分后、指定给PS1
1
这里有一点美中不足：Shell函数如何访问真正的cd命令？这里所显示的cd"Sθ”只
会再次调用此函数，导致无限递归。我们需要的是转义策略，告诉Shell要避开函数的
查找并访问真正的命令。这正是内建命令command的工作，见例7-4.
例7-4：变更目录时更新PS1
cd---改变目录时更新PS1的私人版本
cd (){
conmand cd *$e*
实账改变目录
PS1=*$(x#**/}\$ "
x=$ (pwd)
取得当前目录的名称，传递给变量x
截断能面的组成部分，指定给PS1
command
语法
gquemmBxe]wexboxd[d-1pueuwo
用途
在盘技要执行的命令时，为了要避开Shell的也含函数。这允评从函数中访问
与内建命今同名的命令的内建版本，
主要选项
-P
当查找命令时，使用SPATH的联认值，保证我到系统的工具。
行为
command会通过查阅特殊的与一数的内建命今，以找出指定的program，并
沿着SPATH壹找。使用-D选项，别会使用SPATH的联认值，而非当前的设置。
如果program为特殊内建命令，则任何的语法错误都不会退出Shell，且任何
前置的变量描定在命令完成后，即不再有效。
登告
command非特殊内建命令，将函数命名为command的Shell程序设计人灵可
能会觉得很失望吧！
www.TopSage.com
---
## Page 198
186
第7章
POSIX标准为特殊内建命令提供两个附加特性：
特殊内建工具语法上的错误，会导致Shell执行该工具时退出，然而当语法错误出
现在一般内建命令时，并不会导致Shell执行该工具时退出。如果特殊内建工具遇
到语法错误时不退出Shell，则它的退出值应该非零。
以特殊内建命令所标明的变量指定，在内建命令完成之后仍会有影响：这种情况不
会发生在一般内建命令或其他工具的情况下。
第二项需要解释一下，我们先前在6.1.1节里替提及，你可以在命令前面指定一个变量
赋值，且变量值在被执行命令的环境申不影响当前Shell内的变量或是接下来的命令：
PATH=/bant/usr/bin1/usr/ucb awk *,::*
然而，当这样的指定用于特殊内建命令时，即使用在特殊内建命令完成之后，仍然会有
影响。
表7-9列出本章到目前为止尚未介绍的命令，这些命令中的大部分对于Shell脚本而言为
特殊情况或不相关情况，不过我们在这里还是作一些简介，让你了解它们在做什么以及
使用它们的时机：
alias, unalias
分别用于别名的定义与删除。当命令被读取时，Shell会展开别名定义。别名主要
用于交互式Shell：例如alias‘rm=Im-i'，指的是强制rm在执行时要进行确
认。Shell不会作递归的别名展开，因此此定义是合法的。
bg、fg、jobs,ki11
这些命令用于工作控制，它是一个操作系统工具，可将工作移到后台执行，或由后
台执行中移出。
fc
是“fixcommand”的缩写，该命令设计用来在交互模式下使用。它管理Shell之
前已存储的执行过的命令历史，允许交互式用户再次调用先前用过的命令，编辑它
以及再重新执行它。
这条命令原先是在ksh下开发的，提供像BSDC Shell—csh里的”1-history
这样的机制。不过fc现已被ksh、bash以及zsh所提供的交互式命令行编辑功
能所取代。
times
该命令会打印由Shell及所有子进程所累积执行选今的CPU时间。它对于目常的脚
本编写不是那么有用。
www.TopSage.com
---
## Page 199
输入/输出、文件与命令执行
umask
TopSage.com
用来设置文件建立时的权限掩码，详见附录B里的说明。
剩下的两个命令在脚本中是用得到的。第一个是用来等待后台程序完成的wait命令。
如未加任何参数，wait会等待所有的后台工作完成：否则，每个参数可以是后台工作
的进程编号（processID），见13.2节，或是工作控制的工作规格。
最后，，（点号）也是非需重要的命令。它是用来读取与执行包含在各别文件中的命令。
例如，当你有很多个Shell函数想要在多个脚本中使用时，正确方式是将它们放在各自
的库文件里，再以点号命令来读取它们：
my_fumcs在函数中读取
如指定的文件未含斜杠，则Shell会查找SPATH下的目录，以找到该文件。该文件无须
是可执行的，只要是可读取的即可。
注意：任何读进来的（read-in）文件都是在当前Shell下执行。因此，变量赋值、函数定义，以及
cd的目录变更都会有效。这和简单地执行各自的Shell脚本是很不同的，后者在个别的进
程中执行，且完全不对当前的Shell有任何影响。
7.9.1set命令
set命令可以做的事相当广泛（注5）。就连使用的选项语法也与众不同，这是POSIX
为保留历史的兼容性而存在的命令。也因为这样，这个命令有点难懂。
set命令最简单的工作就是以排序的方式显示所有Shell变量的名称与值。这是调用它
时不加任何选项与参数时的行为。其输出是采用Shell稍后可以重读的形式一包含适
当的引号，这个想法是出自Shell脚本有可能需要存储它的状态，在之后会通过，（点
号）命令恢复它。
set的另一项任务是改变位置参数（S1、S2等）。使用--的第一个参数来结束设置它
自己的选项，则所有接下来的参数都会取代位置参数，即使它们是以正号或负号开头。
注5;
它因此逸反了做好一件享的款件设计原则，这是因为，StevenBourne希望能避免有太
多的保留命令内里在Shel1里。
www.TopSage.com
---
## Page 200
188
第7章
set
语法
set
set
--[arguments...]
set [-short-options][-olong-option 1[arguments
set[+short-options ].[+o long-option ][arguments.
1
set -0
set +o
用途
为了打印当前Shell的所有变量名称及其位、为了设置或解除设置Shell选项
的值（可改变Shell行为的方式），以及为了改变位置参数的值。
主要选项
见内文。
行为
无选项或参数，则以Shell精后可读取的形式来打印所有Shell变量的名
称与值。
选项为--及参数，则以提供的参数取代位置参数。
开头为-的短选项，或以-O开头的长选项，别可打开特定的Shell选项：
额外的非选项（nonoption）参数可设置位至参数，详见内文。
以+开头的短选项，或以+o开头的长选项，则可美闭特定的Shell选项。
详见内文，
单一的-O可以一种不特别指定的格式打印Shel1选项的当前设置。
ksh93与bash都会打印排序后的列表，其中每一行是一个选项名称与单
调 on 或off：
$net-0
off
来自bash
allexport
+ + +
单一的+o则是显示Shell选项的当前设置，其采用Shell之后可以重读
的方式，以获得选项设置的相同设置。
除了表7-10所列的之外，实际的Shell还据有其他额外的短与长选项，第14
章有详细介绍。如果可移桂性对你来说很重要，请不要用它们。
有些/bin/sh版本完全不认得set-o的用法。
www.TopSage.com
---
## Page 201
输入/输出、文件与命令执行
189
最后，set被用来打开或停用Shell选项（Shelloption），指的是改变Shell行为模式的
内部设置。这里就是复杂的地方了，从历史来看，Sbell选项是以单个字母来描述，以负
号打开并且以正号关闭。POSIX另加人了长选项，打开或关闭分别是用-o或+O。每个
单个字母选项都有相对应的长名称选项。表7-10列出部分选项，并简短说明了它们的功
能。
表7-10:POSIXShell选项
短选项
-8
al1export
输出所有后续被定义的变量。
-b
notify
立即显示工作完成的信息，而不是等待下一个提示号。供交
互式使用。
-C
noclobber
不允许>重定向到已存在的文件。>1运算符可使此选项的设
置无效。供交互式使用。
-e
errexit
当命令以非零状态退出时，剩退出Shell.
-f
nog1ob
停用通配符展开。
-h
当函数被定义（而非当函数被执行）时，寻找井记住从函数
体中被调用的命令位置（XSI），
monitor
打开工作控制（默认是打开的）。供交互式使用。
-n
noexec
读取命令且检查语法错误，但不要执行它们，交互式Shell被
允许忽略此选项。
=12
nounset
视未定义的变量为错误，而非为null。
A=
verbose
在执行前先打印命令（逐字打印）。
-x
xtrace
在执行前先显示命令（在展开之后）。
ignoreeof
不允许以 Ctrl-D退出 Shell。
nolog
关闭函数定义的命令历史记录功能。
v1
使用vi风格的命令行编辑。供交互式使用。
你可能感到意外的地方是：set并非用来设置Shell变量（不像BSDCShell里的相同
命令那样）。该工作是通过简单的variablervalue指定实现的。
注章：：尽管不是POSIX的一部分，set-Oemacs命令还是在很多Shell中实现出来（ksh88.
ksh93、bask，zsb）。如果你已习惯使用emacs，则使用此命令可让你的单行小窗口编辑
器可以接受emacs命令，以与你的Shell历史一起运行。
www.TopSage.com
---
## Page 202
190
第象字网
特殊变量S-是一个字符串，表示当前已打开的Shell选项。每个选项的短选项字母会出1m1
现在字符串中（假如该选项是打开的话）。这可被用来测试选项设置，像这样：
case $- in
*C*)
启用noclobber选项
esac
警告：值得玩味的是，当POSIX标准可让用户存储与恢复Shell变量与捕提（trap）的状态时，它
却没有统一的方式来存储函数定义的列表供面后再利用。这似乎是该标准的小疏失，我们
将于14.1节中作说明。
7.10小结
read命令会读取行并将数据分割为各个字段，供赋值给指明的Shell变量。搭配-r选
项，可控制数据要如何被读取。
I/O重定向允许你改变程序的来源与目的地，或者将多个程序一起执行于subShell或代
码块里。除了重定向到文件和从文件重定向之外，管道还可以用于将多个程序连接在一
起。嵌人文件则提供了行内输入。
文件描述符的处理是基本操作，特别是文件描述符1与2，会重复地用在日常的脚本编
写中。
printf是一个深具灵活性，但有点复杂的命令，用途是产生输出。大部分时候，它可
以简单地方式使用，但其实它的力量有时候是很有必要性且深具价值的。
Shell会执行许多的展开（或替换）在每个命令行的文字上：波浪号展开式（如果有支
持）与通配符、变量展开、算术展开及命令替换。通配符现已包含POSIX字符集，用来
针对文件名内的字符进行独立于locale的匹配。为了使用上方便，点号文件井未包含在
通配符展开中，变量与算术展开于第6章已做过说明，命令替换有两种形式：为原
始形式，而$（...）为较新、较好写的形式。
引用会保护不同的源代玛元件，免于被Shell作特珠处理。单个的字符可能会以前置反
斜杠的方式引用使用。单引号会保护所有括起来的字符：引号括起的所有文字都不作处
理，且你不可以将单引号内嵌到以单引号引用的文字内，双引号则是组合括起来的项目，
从而视为单一的单词或参数，但是变量、算术与命令替换仍旧应用到内容中。
eva1命令的存在是为了取代一般命令行替换与执行顺序，让Shell脚本可以动志地构建
www.TopSage.com
---
## Page 203
输入/输出、文件与命令执行
16T
命令。这个功能很好用，但得小心使用。因为Shell拥有这么多种的替换功能，花点时
间了解Shell在执行输入行时的顺序绝对是很有帮助。