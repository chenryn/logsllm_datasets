# Thoth: Comprehensive Policy Compliance in Data Retrieval Systems

## Authors
Eslam Elnikety, Aastha Mehta, Anjo Vahldiek-Oberwagner, Deepak Garg, and Peter Druschel  
Max Planck Institute for Software Systems (MPI-SWS)

## Abstract
Data retrieval systems process data from various sources, each subject to its own data use policy. Ensuring compliance with these policies, despite bugs, misconfigurations, or operator errors, is a significant challenge in large, complex, and rapidly evolving systems. Thoth addresses this by providing an efficient, kernel-level compliance layer for data use policies. Declarative policies are attached to the system's input and output files, key-value tuples, and network connections, specifying the data's integrity and confidentiality requirements. Thoth tracks data flow through the system and enforces policies regardless of bugs, misconfigurations, compromised application code, or actions by unprivileged operators. Thoth requires minimal changes to existing systems and incurs modest overhead, as demonstrated using a prototype Thoth-enabled data retrieval system based on Apache Lucene.

## 1. Introduction
Online data retrieval systems typically serve a searchable corpus of documents, web pages, blogs, personal emails, online social network (OSN) profiles and posts, real-time microblogs, stock and news tickers. Examples include large providers like Amazon, Facebook, eBay, Google, and Microsoft, as well as smaller, domain-specific sharing, trading, and networking sites run by organizations, enterprises, and governments.

Each data item served or used by a retrieval system may have its own usage policy. For instance, email is private to its sender/receiver(s), OSN data and blogs are limited to friends, and corporate documents are limited to employees. External data stream providers may restrict the use of (meta)data and require expiration. The provider’s privacy policy may require that a user’s query and click stream be used only for personalization. Additionally, providers must comply with local laws, which may require them to filter certain data items within a given jurisdiction.

Ensuring compliance with applicable policies is labor-intensive and error-prone [36]. The policy in effect for a data item may depend on checks and settings in many components and several layers of a system, making it difficult to audit and reason about. Moreover, any bug, misconfiguration, or compromise in a large and evolving application codebase could violate a policy. This problem affects both large providers with complex, fast-evolving systems and smaller providers with limited IT budgets. Reports of data losses are common [14, 1, 44, 11, 13].

The stakes are high: providers stand to lose customer confidence, business, and reputation, and may face fines. Therefore, developing technical mechanisms to enforce policies in data retrieval systems is crucial. The Grok system, for example, combines lightweight static analysis with heuristics to annotate source code to check for policy violations in Bing’s back-end [36].

Existing policy compliance systems for data retrieval, including Grok, usually target column-specific policies—policies that apply uniformly to all data of a specific type, e.g., "no IP address can be used for advertising." However, no existing work covers individual policies specific to individual data items or a given client’s data items. For example, Alice’s blog posts, but not Bob’s, may be subject to the policy "visible only to Alice’s friends." Similarly, the expiration time of every item in a news ticker may be different. This paper addresses this significant and important gap in policy enforcement by presenting Thoth, a policy compliance layer integrated into the Linux kernel to enforce both individual and column-specific policies efficiently.

### Key Insights in Thoth’s Design
1. **Policy Separation from Application Code**: Thoth separates policies from application code. Policies specifying confidentiality and integrity requirements can be associated with any data conduit (file, key-value tuple, named pipe, or network connection) and are enforced on all application code that accesses the conduit's data or derived data. Thoth provides a declarative language for specifying policies, including standard access (read/write) policies and data declassification policies.

2. **Dynamic Analysis for Individual Policies**: Unlike column-specific policies, individual policies may not be amenable to static analysis because a given program variable may contain data with different individual policies over time at the same program point. Thoth uses dynamic analysis, intercepting I/O in the kernel, tracking data flow at the granularity of conduits and processes, and enforcing policies at process boundaries. This incurs a runtime overhead, but our optimized prototype implementation measures an overhead of 0.7% on indexing and 3.6% on query throughput in Apache Lucene. While this overhead may be too high for large-scale data retrieval systems, it is suitable for medium-scale, domain-specific systems.

3. **Typed Declassification for Functional Integrity**: The complexity of data retrieval systems often necessitates some declassification to maintain functionality. For example, a search process that consults an index computed over a corpus containing private data cannot produce readable results without declassification. Thoth introduces typed declassification, allowing declassification of data in specific forms (types). This pragmatic design point in the security-functionality trade-off limits the possibility of data leaks to a narrow channel.

### Contributions
1. **A Policy Language for Expressing Individual Access and Declassification Policies** (Section 2).
2. **Design of a Kernel-Level Monitor for Enforcing Policies via I/O Interception and Lightweight Taint Propagation** (Section 3).
3. **Application of the Design to Medium-Scale Data Retrieval Systems, Specifically Apache Lucene** (Sections 2 and 5).
4. **An Optimized Prototype Implementation and Experimental Evaluation to Measure Overheads** (Sections 4 and 6).

## 2. Thoth Policies
Thoth is a kernel-level policy compliance layer that helps data retrieval system providers enforce confidentiality and integrity policies on the data they collect and serve. Providers attach policies to data sources (documents, live streams, posts, profiles, user click history, etc.) based on clients' privacy preferences, external (e.g., legal) and internal usage requirements. Thoth tracks data flows by intercepting all IPC and I/O in the kernel and propagates source policies along these flows. It enforces policy conditions when data leaves the system or when declassification occurs.

### Policy Language Overview
A Thoth policy can be attached to any conduit—a file, key-value tuple, named pipe, or network socket that stores or carries data. The policy on a conduit protects the confidentiality and integrity of the data and is specified in two layers:

1. **Access Control Policy**: Specifies which principals may read and update the conduit under what conditions.
2. **Declassification Policy**: Protects data derived from the conduit by restricting the policies of downstream conduits. This layer allows declassification by progressively relaxing access policies as more declassification conditions are met.

#### Layer 1: Access Policies
The first layer of a conduit’s policy contains rules that specify who can read and update the conduit’s state under what conditions. These rules are written in Datalog syntax, which has been widely used for declarative specification of access policies [18, 20, 30].

**Example (Client Policies)**: Consider a search engine that indexes clients’ private data. A relevant security goal might be that Alice’s private emails and profile should be visible only to Alice, and only she should be able to modify this data. This can be expressed by attaching read and update rules to each conduit holding Alice’s private items, allowing these operations only in the context of a session authenticated with Alice’s key. The read rule would be `read :- sKeyIs(kAlice)`, and the update rule would be `update :- sKeyIs(kAlice)`.

For Alice’s friends-only blog and OSN profile, the read rule can be extended to:
```datalog
read :- sKeyIs(kAlice) ∨ (sKeyIs(K) ∧ ("Alice.acl", Offset) says isFriend(K))
```
This allows read access if the session is authenticated with Alice’s key or if the key K exists in Alice’s friend list.

#### Layer 2: Declassification Policies
The second layer of a conduit’s policy controls the policies of downstream conduits. This rule is written as `(declassify :- cond)`, where `cond` is a condition or predicate on all downstream sequences of conduits. For example, a declassification policy might say that in any downstream sequence of conduits, the access policies must allow read access only to Alice until the calendar year is at least 2017, after which the policies may allow read access to anyone. This represents the declassification policy “private to Alice until the end of 2016.”

We represent such declassification policies using linear temporal logic (LTL) syntax, which is well-known for representing predicates that change over time [32]. We allow new connectives and predicates to express expressive declassification policies, such as `c1 until c2` and `isAsRestrictive(p1, p2)`.

### Table 1: Thoth Policy Language Predicates and Connectives
| Type | Predicate | Description |
|------|-----------|-------------|
| Arithmetic/String | `add(x,y,z)` | `x = y + z` |
| | `sub(x,y,z)` | `x = y - z` |
| | `mul(x,y,z)` | `x = y * z` |
| | `div(x,y,z)` | `x = y / z` |
| | `rem(x,y,z)` | `x = y % z` |
| | `concat(x,y)` | `x || y` |
| | `vType(x, y)` | Is `x` of type `y`? |
| Relational | `eq(x,y)` | `x = y` |
| | `neq(x,y)` | `x != y` |
| | `lt(x,y)` | `x < y` |
| | `gt(x,y)` | `x > y` |
| | `le(x,y)` | `x <= y` |
| | `ge(x,y)` | `x >= y` |
| Conduit | `cNameIs(x)` | `x` is the conduit pathname |
| | `cIdIs(x)` | `x` is the conduit id |
| | `cIdExists(x)` | `x` is a valid conduit id |
| | `cCurrLenIs(x)` | `x` is the conduit length |
| | `cNewLenIs(x)` | `x` is the new conduit length |
| | `hasPol(c, p)` | `p` is conduit `c`'s policy |
| | `cIsIntrinsic` | Does this conduit connect two confined processes? |
| Session | `sKeyIs(x)` | `x` is the session’s authentication key |
| | `sIpIs(x)` | `x` is the session’s source IP address |
| | `IpPrefix(x,y)` | `x` is IP prefix of `y` |
| | `timeIs(t)` | `t` is the current time |
| Content | `(c,off) says (x1, ..., xn)` | `x1, ..., xn` is the tuple found in conduit `c` at offset `off` |
| | `(c,off) willsay (x1, ..., xn)` | Ditto for the update of `c` in the current transaction |
| | `each in (c,off) says (x1, ..., xn) {condition}` | For each tuple in `c` at offset `off`, assign to `x1, ..., xn` and evaluate condition |
| | `each in (c,off) willsay (x1, ..., xn) {condition}` | Ditto for the update of `c` in the current transaction |
| Declassification Rules | `c1 until c2` | Condition `c1` must hold on the downstream flow until `c2` holds |
| | `isAsRestrictive(p1,p2)` | Permission `p1` is at least as restrictive as `p2` |

---

This revised text aims to provide a clear, coherent, and professional presentation of the Thoth system, its design, and its contributions.