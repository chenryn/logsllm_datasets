(b) Markov chain applied using task access
Spotting the Diﬀerence. A careful analysis on our results reveals that for
three users the Markov chains classiﬁers perform remarkably bad, in contrast
with the good results exhibited for the other users. While this is an undesired
result, it helps us understand the limitations and challenges of this approach.
After closely examination of users 10, 12 and 13 logs, the problem seems to be
that these users have a very odd ﬁle system structure. User 10 has very few ﬁle
system objects; user 12 has all her ﬁles in a single directory, namely: Desktop;
and user 13 has divided her ﬁle system into several physical or logical drive units.
These issues make some users especially diﬃcult to protect.
Due also to these users’ odd ﬁle system structure, the automatic determina-
tion of what directories constitute a task, using the depth cut point procedure
introduced in §3.2, selects directories that are not suitable as a task, or yields
too few tasks to operate with. It is important to remark that the automatic task
selection is an artiﬁcial construction because we do not have that information
directly from the user on the WUIL dataset, suggesting the importance of a
correct mapping between directories and tasks. More importantly, they suggest
that an organization could ﬁx and then enforce a set of policies (where to keep
ﬁles, how many diﬀerent directories to keep them in, etc.) so as to nudge users
toward using reasonable ﬁle storage habits.
Beneﬁts of a Task-Based Approach to Masquerade Detection. What
makes the use of a task-based approach relevant is the size of the associated
model, as it will always be much easier and faster to build and maintain a model
that often is two orders of magnitude smaller. While one may easily anticipate
462
J.B. Cami˜na, J.Rodr´ıguez, and R. Monroy
Table 6. Size of Markov chain models for every user at the 80 - 20% experiment
User Objects Tasks
1674
88667
1406
14259
660
3204
906
18440
177372 2822
6371
50529
1725
62185
1575
26812
3604
58161
27236
857
30466 10645
35220
3041
530691 4768
1497
7653
66079
3401
164725 8949
4384
43798
592
3340
408
8234
961
6650
Average 71186
3012
1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
this beneﬁt from Table 2, we list, in Table 6, the size of the Markov chain models
that resulted from using the 80 - 20% experiment.
Also, the ﬁle system of a user is in constant change with ﬁles being created
and deleted. Tasks are more resilient to change, because a user does not change
her activities with a high frequency. So, most ﬁle system changes are transparent
when using our task abstraction, making it less necessary for a constant update
of the associated model. Thus, working with our abstraction demands fewer
storage and computing resources, with a slightly better performance rate than
working with pure objects.
5.2 Mean-Windows-to-First-Alarm
Another evaluation element is how many windows takes to a classiﬁer to start
detecting abnormal behavior. In order to analyze this, we used the concept of
Mean-Windows-to-First-Alarm (MWFA) [21], that represents the average num-
ber of windows that must pass before a window is classiﬁed as abnormal. Table 7
shows the MWFA for each type of attack. MWFA can be used to anticipate how
much information the masquerader can gain access to before the MDS detects him.
From Table 7, we notice that, as the level of attack automation increases, Markov
chains require more windows to detect an attack than Na¨ıve Bayes. So, to quickly
detect a masquerader, it seems that Na¨ıve Bayes is better; however, one has to
keep in mind that Markov chains detect attack windows more accurately than
Na¨ıve Bayes. Another important aspect to observe is that, in general, task-based
classiﬁers detect more quickly a masquerade than the object-based ones.
Given that we work only with 20 users, we cannot guarantee that the un-
derlying classiﬁcation performance distribution is normal. So, for a statistical
test, we used Wilcoxon signed rank to disprove the null hypothesis that the two
Towards a Masquerade Detection System Based on User’s Tasks
463
Table 7. Mean number of windows to ﬁrst alarm per attack
Attack
type
Basic
Intermediate
Advanced
Markov chain
Na¨ıve Bayes
Task-based Object-based Task-based Object-based
2.4
18.2
10.1
2.1
58.45
9.95
4.02
2.59
2.5
6.03
5.19
1.51
underlying distributions are related and not independent, meaning that the re-
sults between the two classiﬁers are statistically equivalent.
Applying the test for the AUC of task-based Markov chains against Na¨ıve
Bayes, we have found that the null hypothesis is rejected, with a p − value
of 0.0137. However, doing so for the AUC of task-based Markov chain against
object-based Na¨ıve Bayes, we have found that there is not enough evidence to
reject the null hypothesis. With these results, we conclude that for our exper-
iments the Markov chain classiﬁer signiﬁcantly outperforms Na¨ıve Bayes, but
that the performance diﬀerence from using task or object accesses is not sig-
niﬁcant. This result corroborates that the task-based approach for masquerade
detection performs as well as the object-based one, but with a more stable, easier
to maintain, and smaller representation of the user behavior.
Our experiments were all run on a HP EliteBook 6930p machine with 4GB
of RAM (of which 3.84GB usable) running a 64 bits MS Windows 7 OS with an
Intel R(cid:4) CoreTM 2 Duo CPU P8400.
6 Conclusions and Further Work
We have conjectured that a ﬁle-system navigation approach to masquerade de-
tection provides a means for reasoning at a higher-level of abstraction. Taking
a step towards establishing this conjecture, we have introduced a task-based
abstraction, where each task holds diﬀerent but related objects. In order to eval-
uate the usefulness of our task abstraction, we have used the WUIL dataset
and designed some experiments with two diﬀerent classiﬁers: Markov chains and
Na¨ıve Bayes. First, we have found that a task-based MDS is as powerful as an
object-based one. Second, we have found that Markov chains outperforms Na¨ıve
Bayes, because it accounts for event temporal relationships.
Even though a task-based MDS does not outperform an object-based one, if
we take into account the size of a Markov chain model, the task-based approach
provides a clear advantage. Also it is important to remark that the task-based
approach provides secondary beneﬁts: it encompasses a big part of the accesses,
and it is more resilient to ﬁle system changes, meaning that the model has to
be updated with less frequency than the object-based one. Considering all these
advantages, we conclude that it is worth using our task abstraction.
In this paper, we have worked with a single abstraction, but in order to create
a competitive MDS, other abstractions must be used. Fortunately, the ﬁle system
navigation approach is a rich source of abstractions. Ongoing work, for example,
explores using the locality memory-cache principle, which considers both time
464
J.B. Cami˜na, J.Rodr´ıguez, and R. Monroy
(temporal locality), and ﬁle location (spatial locality). Other abstractions that
are worth exploring include ﬁle usage information (hot ﬁles against cold ﬁles),
and the ﬁle system structure depth a user commonly works at.
At present, we are gathering data from new users for WUIL, especially MS
Windows 8 users. We would like to test further how our task abstraction works
with these new kinds of users. We would also like to explore any correlation
between the performance of a classiﬁer and some users’ ﬁle system character-
istics, like tidiness and organization. We would like to investigate whether it is
possible to create some policies that a user has to follow, which could make it
easier to protect her, and which at the same time would make it harder for a
masquerader to steal critical information. Also, ongoing research is concerned
with further analyzing our results, from a user perspective, giving, for example,
the number of false alarms that may result per day, etc.
Acknowledgments. This paper has largely beneﬁted from numerous discus-
sions with Luis ´Angel Trejo-Rodr´ıguez. We thank both the anonymous referees,
and the members of the NetSec group at Tecnol´ogico de Monterrey, Estado de
M´exico, for providing invaluable, useful suggestions and advice on an earlier ver-
sion of this paper. The ﬁrst authors were respectively supported by CONACYT
student scholarships 329962 and 376099, and by COMECYT with travel grants,
while the third author was in part supported by CONACYT grant 105698.
References
1. Cami˜na, B., Monroy, R., Trejo, L.A., S´anchez, E.: Towards building a masquerade
detection method based on user ﬁle system navigation. In: Batyrshin, I., Sidorov,
G. (eds.) MICAI 2011, Part I. LNCS (LNAI), vol. 7094, pp. 174–186. Springer,
Heidelberg (2011)
2. Cami˜na, J.B., Hern´andez-Gracidas, C., Monroy, R., Trejo, L.: The windows-
users and -intruder simulations logs dataset (WUIL): An experimental framework
for masquerade detection mechanisms. Expert Systems with Applications 41(3),
919–930 (2014)
3. Schonlau, M., DuMouchel, W., Ju, W., Karr, A., Theus, M., Vardi, Y.: Computer
intrusion: Detecting masquerades. Statistical Science 16(1), 58–74 (2001)
4. Razo-Zapata, I., Mex-Perera, C., Monroy, R.: Masquerade attacks based on user’s
proﬁle. Journal of Systems and Software 85(11), 2640–2651 (2012)
5. Pusara, M., Brodley, C.: User re-authentication via mouse movements. In: Proceed-
ings of the 2004 ACM Workshop on Visualization and Data Mining for Computer
Security, VizSEC/DMSEC 2004, pp. 1–8. ACM (October 2004)
6. Killourhy, K., Maxion, R.: Why did my detector do that?! - predicting keystroke-
dynamics error rates. In: Jha, S., Sommer, R., Kreibich, C. (eds.) RAID 2010.
LNCS, vol. 6307, pp. 256–276. Springer, Heidelberg (2010)
7. Sankaranarayanan, V., Pramanik, S., Upadhyaya, S.: Detecting masquerading users
in a document management system. In: Proceedings of the IEEE International
Conference on Communications, ICC 2006, vol. 5, pp. 2296–2301. IEEE Computer
Society Press (June 2006)
Towards a Masquerade Detection System Based on User’s Tasks
465
8. Salem, M.B., Stolfo, S.J.: Modeling user search behavior for masquerade detection.
In: Sommer, R., Balzarotti, D., Maier, G. (eds.) RAID 2011. LNCS, vol. 6961, pp.
181–200. Springer, Heidelberg (2011)
9. Posadas, R., Mex-Perera, J.C., Monroy, R., Nolazco-Flores, J.A.: Hybrid method
for detecting masqueraders using session folding and hidden Markov models. In:
Gelbukh, A., Reyes-Garcia, C.A. (eds.) MICAI 2006. LNCS (LNAI), vol. 4293, pp.
622–631. Springer, Heidelberg (2006)
10. Garg, A., Rahalkar, R., Upadhyaya, S., Kwiat, K.: Proﬁling users in GUI based
systems masquerade detection. In: 2006 IEEE Information Assurance Workshop,
pp. 48–54. IEEE Computer Society Press (June 2006)
11. Weiss, A., Ramapanicker, A., Shah, P., Noble, S., Immohr, L.: Mouse movements
biometric identiﬁcation: A feasibility study. In: Student/Faculty Research Day.
CSIS, Pace University, pp. 1–8 (May 2007)
12. Messerman, A., Mustaﬁc, T., Camtepe, S., Albayrak, S.: Continuous and
non-intrusive identity veriﬁcation in real-time environments based on free-text
keystroke dynamics. In: Proceedings of the International Joint Conference on Bio-
metrics, IJCB 2011, pp. 1–8. IEEE Computer Society Press (October 2011)
13. Song, Y., Ben-Salem, M., Hershkop, S., Stolfo, S.: System level user behavior bio-
metrics using ﬁsher features and gaussian mixture models. In: Security and Privacy
Workshops, SPW 2013, pp. 52–59. IEEE Computer Society Press (May 2013)
14. Denning, D.E.: An intrusion-detection model. IEEE Transactions on Software En-
gineering 13(2), 222–232 (1987)
15. Schonlau, M.: Masquerading user data (Matthias Schonlau’s home page) (1998),
http://www.schonlau.net
16. Maxion, R., Townsend, T.: Masquerade detection using truncated command lines.
In: Proceedings of the International Conference on Dependable Systems and Net-
works, DSN 2002, vol. 600, pp. 219–228. EEE Computer Society Press (June 2002)
17. Maxion, R.: Masquerade detection using enriched command lines. In: Proceedings
of the International Conference on Dependable Systems and Networks, DSN 2003,
vol. 22, pp. 5–14. IEEE Computer Society Press (June 2003)
18. gGreenberg, S.: Using Unix: Collected traces of 168 users. Technical Report
88/333/45, Department of Computer Science, University of Calgary (1988)
19. Salem, M.B., Hershkop, S., Stolfo, S.J.: A survey of insider attack detection re-
search. In: Stolfo, S.J., Bellovin, S.M., Hershkop, S., Keromytis, A., Sinclair, S.,
Smith, S.W. (eds.) Insider Attack and Cyber Security: Beyond the Hacker. Ad-
vances in Information Security, pp. 69–90. Springer (2008)
20. Bertacchini, M., Fierens, P.: A survey on masquerader detection approaches. In:
Proceedings of V Congreso Iberoamericano de Seguridad Inform´atica, CIBSI 2009.
Universidad de la Rep´ublica de Uruguay, pp. 46–60 (November 2009)
21. Jha, S., Tan, K.M., Maxion, R.A.: Markov chains, classiﬁers, and intrusion detec-
tion. In: Proceedings of the 14th IEEE Computer Security Foundations Workshop,
CSFW 2001, pp. 206–219. IEEE Computer Society Press (June 2001)
22. Killourhy, K., Maxion, R.: Comparing anomaly-detection algorithms for keystroke
dynamics. In: Proceedings of the International Conference on Dependable Systems
Networks, DSN 2009, pp. 125–134. IEEE Computer Society Press (June 2009)