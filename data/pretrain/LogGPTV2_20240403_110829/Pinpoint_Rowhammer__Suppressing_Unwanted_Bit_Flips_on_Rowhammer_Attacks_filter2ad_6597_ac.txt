flip can occur on a co-resident page, which is on the victim row.
The co-resident physical page could be mapped to the virtual page
used by the same attack process or the virtual page used by another
process, which includes the system process. The effects of unwanted
bit flips are related to the process they corrupt. If they corrupt a
system process memory, the bit flips may cause a system crash or
segmentation fault. Moreover, even if a non-critical process memory
is corrupted, the corrupted process may suffer from various errors.
Co-resident pages in a row are determined by the mapping algo-
rithm between the physical addresses and memory bank/row, which
depends on the hardware configuration. A single-channel config-
uration and a dual-channel configuration have different mapping
algorithms [18, 27]. In a single-channel configuration, two pages
are co-resident in a row (Figure 4). In contrast, a dual-channel con-
figuration has more than two pages in a row because consecutive
Table 2: Effects of unwanted bit flips. ((cid:32)) The attack suffers
the problem. ((cid:35)) The attack is resistant to the problem. ((cid:71)(cid:35))
We added footnotes to special cases.
Co-resident page
corruption
Attack
failure
(cid:32)
(cid:32)
(cid:32)
(cid:32)
†
(cid:71)(cid:35)
(cid:32)
(cid:32)
†
(cid:71)(cid:35)
(e.g., system crash)
Privilege escalation[20]
Sandbox escape[20]
Rowhammer.js[8]
Dedup est machina[3]
Flip Feng Shui[19]
Xiao et al.[27]
Drammer[25]
Gruss et al.[7]
† Attackers can check the presence of unwanted bit flips on the victim
page because attackers have the read permission to the victim page.
‡ All pages in the victim row are controlled by the attacker unless map-
ping algorithm between physical addresses and memory addresses is
complex (i.e., dual-channel configuration).
(cid:32)
(cid:32)
(cid:32)
(cid:32)
(cid:32)
(cid:32)
‡
(cid:71)(cid:35)
(cid:32)
cache line accesses are interleaved in two channels. With an in-
crease in the number of co-resident pages, there is an increase in
the probability that the Rowhammer attack will induce unwanted
bit flips on co-resident pages.
4 METHOD: PINPOINT ROWHAMMER
We develop a novel Rowhammer method to suppress unwanted bit
flips during the Rowhammer attacks, namely, Pinpoint Rowham-
mer. The proposed method is designed to achieve two goals: in-
ducing the target bit flip and suppressing unwanted bit flips. The
method leverages the dependency between bit flips and data pat-
terns. In the remainder of this section, we show the dependency
between bit flips and data patterns. Thereafter, we present a detailed
discussion on Pinpoint Rowhammer.
Threat Model. It is assumed that an attacker accesses a victim
machine with user privileges. The attacker can change the data of
aggressor rows, which belong to the attacker. However, the attacker
pages in DRAMsingle-channel configuration……dual-channel configurationpages in physical address spacepage C0x000000000xFFFFFFFF0x0018A0000x0018B0000x0018C0000x0018D000page Dpage Apage BSession 7: Hardware and SystemsAsiaCCS ’19, July 9–12, 2019, Auckland, New Zealand553Figure 5: Eight data patterns for dependency check
cannot change the data of the victim row. Moreover, the data stored
in the victim row at the time of the attack is unknown. Hence,
the victim row is filled with random data in the evaluation. It is
assumed that the attacker conducts double-sided Rowhammer using
transparent hugepages, as achieved in [20].
4.1 Dependency between Bit Flips and Data
Patterns
Pinpoint Rowhammer is based on the key observation that induc-
tion of a bit flip depends on the data of the aggressor and victim
rows. Prior work found that there is a relationship between a bit flip
and the data of other cells [13]. Moreover, a couple of data patterns
were found to induce more bit flips than others [13, 14].
We hypothesize that a bit flip is induced only if a particular data
pattern is stored in the aggressor rows. We conduct experiments
with eight data patterns, which are generated by modifying the data
of the upper aggressor row, victim row, and lower aggressor row
(Figure 5). A pattern is denoted as pijk; where i, j, and k represent
the data of the upper aggressor row, victim row, and lower aggressor
row, respectively. The effectiveness of a pattern with respect to a
cell f (c, pijk) and a set of effective patterns for a cell E(c) are
defined as follows:
(cid:26) 1
E(c) = {pijk | f (c, pijk) = 1}
(2)
We investigate the number of data patterns that flip a cell |E(c)|.
Figure 6 shows that 32.4% of the vulnerable cells are flipped by one
data pattern. At the same time, 65.5% of the vulnerable cells are
flipped by two patterns. Only 2.2% of the vulnerable cells are flipped
by three or four patterns, and no cell is flipped by more than four
patterns. The results indicate that most cells are flipped by a couple
of specific data patterns. This confirms the hypothesis that a bit flip
is induced by Rowhammer with a particular data pattern, and this
observation is used to develop Pinpoint Rowhammer.
4.2 Pinpoint Rowhammer
The main idea of Pinpoint Rowhammer is the use of different
data patterns on the target bit and non-target bits. For the target
bit, an effective pattern pe is used to induce the bit flip (where
f (c, pijk) =
if cell c is flipped by pijk
0 otherwise
(1)
Figure 6: The number of effective patterns for a cell
Figure 7: Victim data–agnostic data patterns
pe ∈ E(ctarget)). Meanwhile, an ineffective pattern pi is used for
each non-target bit, to suppress unwanted bit flips (where pi ∈
E(cnon-target)).
The simplest approach to leverage ineffective patterns is to select
one of them. However, the selection of a pattern is unreliable due
to the probability of using misclassified patterns. As explained in
Section 3.1, vulnerable cells may not be flipped during a Rowham-
mer scan with a pattern, although the pattern is effective to the
cell. Consequently, the pattern is misclassified as ineffective to the
cells in that case. If this misclassified pattern is selected for the
suppression of the bit flip, Rowhammer may induce unwanted bit
flips during the reproduction phase, and the simple approach fails.
In this study, we develop an alternating pattern to reduce the effect
of misclassified effective patterns.
Alternating Pattern. We observe two characteristics of bit flips
from the experiments in Section 3 and Section 4. First, a large
number of accesses is needed to flip a vulnerable cell (Figure 2).
Second, a vulnerable cell is only flipped by Rowhammer with its
effective patterns (Figure 6). Hence, it is concluded that a large
number of accesses with an effective pattern is needed to flip a
vulnerable cell.
We propose a scheme to break the two characteristics for sup-
pressing bit flips, namely, an alternating pattern. The alternating
pattern alters the ineffective patterns during a Rowhammer attack,
instead of relying on one ineffective pattern. It uses two or more
ineffective patterns alternately with an interval. Thus, the number
of accesses with a single pattern is reduced. Even if a misclassified
effective pattern is used, the number of accesses with the misclas-
sified pattern is insufficient to induce bit flips. Therefore, the two
characteristics are not preserved, and bit flips are suppressed.
To alter the ineffective patterns, the number of usable patterns
and their effectiveness should be determined. Among the upper ag-
gressor row, victim row, and lower aggressor row, an attacker has a
rowupperrowvictimrowlowerrowupperrowvictimrowlowerp0000 0 0 … 0 0 0 … 0 0 0 … p1111 1 1 … 1 1 1 … 1 1 1 … p0010 0 0 … 1 1 1 … 0 0 0 … p1101 1 1 … 0 0 0 … 1 1 1 … p1000 0 0 … 0 0 0 … 1 1 1 … p0111 1 1 … 1 1 1 … 0 0 0 … p1010 0 0 … 1 1 1 … 1 1 1 … p0101 1 1 … 0 0 0 … 0 0 0 … 32.35%65.49%0.85%1.3%one patterntwo patternsthree patternsfour patternsover four patternsrowupperrowvictimrowlowerp0* 0** * …0 0 0 … 0 0 0 … p0* 1** * …1 1 1 … 0 0 0 … p1* 0** * …0 0 0 … 1 1 1 … p1*1** * …1 1 1 … 1 1 1 … Session 7: Hardware and SystemsAsiaCCS ’19, July 9–12, 2019, Auckland, New Zealand554write permission to the upper and lower aggressor rows. Therefore,
four victim-agnostic patterns are obtained by changing the data of
the upper and lower aggressor rows (Figure 7). A victim-agnostic
pattern is denoted as pi∗j; where i and j represent the data of the
upper and lower aggressor rows, respectively. The effectiveness of
a victim-agnostic pattern is calculated as follows. First, we iden-
tify two related data patterns that have the same upper and lower
data with the given victim-agnostic pattern. For example, p011 and
p001 are two related patterns for p0∗1. A victim-agnostic pattern is
considered as effective to a bit when at least one of the two related
patterns is effective.
f (c, pi∗j) = f (c, pi0j) || f (c, pi1j)
(3)
This is because an attacker has no knowledge of the data stored in
the victim row at the time of the attack. The data can be either 0 or 1;
thus, the attacker should avoid using a victim-agnostic pattern that
may cause bit flips depending on the data of the victim row. In the
above example, if either p011 or p001 is effective, p0∗1 is considered
as effective. Otherwise, p0∗1 is considered as ineffective.
We explain the alternating pattern using an example, as pre-
sented in Figure 8. The example shows five cells, and the alternating
pattern suppresses their bit flips. Other cells are omitted for brevity.
Figure 8a shows the results of the scan phase. According to the re-
sults, c0, c2, and c3 are vulnerable cells, whereas c1 and c4 are not vul-
nerable. We alternate the ineffective patterns for each cell. Figure 8a
shows that E(c0) = {p0∗0, p1∗0} and E(c0) = {p0∗1, p1∗1}. Therefore,
we alternate p0∗1 and p1∗1 for c0 (Figure 8b). At the same time, the
results show that E(c1) = ϕ and E(c1) = {p0∗0, p0∗1, p1∗1, p1∗0}; thus,
we alternate p0∗0, p0∗1, p1∗1 and p1∗0 for c1. Each cell follows its
own sequence of the ineffective patterns. A cell is rarely flipped by
all the four patterns. In that case, a sequence of the four patterns is
used for the cell. At time t0, the data stored in c0, c1, c2, c3, and c4
are p0∗1, p0∗0, p0∗0, p0∗1, and p0∗0, respectively. Subsequently, the
attacker writes the next ineffective pattern to each cell, i.e., p1∗1,
p0∗1, p0∗1, p1∗1, and p0∗1. As shown in Figure 8, a batch of 12 data
patterns is repeated, and the interval of the same pattern is t12 − t0.
The size of the interval affects the bit flip suppression rate and the
attack success rate. This phenomenon is discussed further in this
section.
We conduct a proof-of-concept experiment to measure the effec-
tiveness of the alternating pattern. We randomly select 512 rows,
which have 355 vulnerable cells. We conduct Rowhammer to them
with the alternating pattern. Among the 355 cells, the alternating
pattern suppresses 351 (98.9%) vulnerable cells. The alternating
pattern is dependent on the effectiveness of patterns retrieved from
the scan phase. However, the effectiveness of patterns can be mis-
classified because of the undetected vulnerable cells. Therefore, the
worst case of the alternating pattern is that all the vulnerable cells
are not detected during the scan phase. In that case, the alternating
pattern uses effective patterns without recognizing that they are
effective. We measure the suppression rate of the alternating pat-
tern in the worst case scenario, wherein all the detected vulnerable
cells are neglected. Thus, we alternate p0∗0, p0∗1, p1∗1 and p1∗0 for
every vulnerable cell regardless of the patterns’ actual effectiveness.
The alternating pattern suppresses 341 (96.1%) of the cells, even in
the worst case scenario. As mentioned before, although effective
patterns are involved in the alternating pattern, the number of
(a) Result of scan phase. The check mark represents a bit flip, and the
hyphen represents no bit flip.
(b) An example of the alternating pattern. Each pattern is abbreviated
as a number.
Figure 8: Building blocks of Pinpoint Rowhammer
Figure 9: An example of Pinpoint Rowhammer that flips
c2.
accesses of the effective patterns is reduced when compared with
Rowhammer with a single effective pattern. Hence, the worst case
results show the suppression rate that is comparable to the typical
alternating pattern.
Putting It Together. Pinpoint Rowhammer uses an effective
pattern for the target bit and the alternating pattern for other bits.
Figure 9 shows an example of a Pinpoint Rowhammer process
that attempts to flip the cell c2. For simplicity, the example uses the
same results of the scan phase presented in Figure 8a. The target
cell (c2) has two effective patterns (p1∗1 and p1∗0). If a target cell has
multiple effective patterns, the patterns are empirically prioritized
in the order of p1∗1, p0∗0, p1∗0, and p0∗1. Therefore, we use p1∗1 to
flip c2. It should be noted that Pinpoint Rowhammer also repeats a
batch of 12 data patterns (from the data0–data12) as the alternating
pattern.
rowupperrowvictimrowlower… 0 0 0 0 0 … 0 0 0 0 0 … p0*0c0 c1 c2  c3  c4---1 1 1 1 1 … 0 0 0 0 0 … p0*1--- - - …c01 1 1 1 1 … 1 1 1 1 1 … p1*1--- - …c00 0 0 0 0 … 1 1 1 1 1 … p1*0--- …c0c4c3c2c1c012112…42243242231311243243321324424333132232231411222223t0time2322334132t1 t2…12112t12period Tp0*0 (  1  )p0*1 (  2  )p1*1 (  3  )p1*0 (  4  )t1112312…42343243231331243343323324434333332233231431222323t0time2332334332t1 t2…12312t12period Tp0*0 (  1  )p0*1 (  2  )p1*1 (  3  )p1*0 (  4  )data0data1data2data0t11data11c4c3c2c1c0Session 7: Hardware and SystemsAsiaCCS ’19, July 9–12, 2019, Auckland, New Zealand555Figure 10: Operation sequence of Pinpoint Rowhammer
Pinpoint Rowhammer is required to use write operations be-
cause the alternating pattern overwrites the data of aggressor rows.
The results obtained from previous work [13] and this study (Fig-
ure 11) reveal that Rowhammer using write operations is less effec-
tive than Rowhammer using read operations. Thus, we reduce the