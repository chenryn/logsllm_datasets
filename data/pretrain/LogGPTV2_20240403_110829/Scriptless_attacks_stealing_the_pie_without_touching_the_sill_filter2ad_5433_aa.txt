**Title: Scriptless Attacks: Stealing the Pie Without Touching the Sill**

**Authors:**
- Mario Heiderich
- Marcus Niemietz
- Felix Schuster
- Thorsten Holz
- Jörg Schwenk

**Affiliation:**
Horst Görtz Institute for IT-Security, Ruhr-University Bochum, Germany

**Contact:**
{firstname.lastname}@rub.de

**Abstract:**
Cross-Site Scripting (XSS) attacks have garnered significant attention from the security community due to their high practical impact. Numerous defense techniques have been proposed to address the causes and effects of XSS vulnerabilities. As a result, adversaries often find it challenging to inject or execute arbitrary scripting code in many real-world scenarios.

In this paper, we investigate the remaining attack surface after XSS and similar scripting attacks are mitigated by preventing JavaScript execution. We explore whether an attacker needs JavaScript or similar functionality to perform information theft. Surprisingly, we find that attackers can abuse Cascading Style Sheets (CSS) in combination with other web technologies such as plain HTML, inactive SVG images, or font files. Through several case studies, we introduce "scriptless attacks" and demonstrate that an adversary can extract sensitive information from well-protected websites without executing code. Specifically, we show that seemingly benign features can be used to build side-channel attacks that measure and exfiltrate almost any data displayed on a website.

We conclude the paper with a discussion of potential mitigation techniques against scriptless attacks. Additionally, we have implemented a browser patch that enables a website to determine if it is being loaded in a detached view or pop-up window, which is useful for preventing certain types of scriptless attacks.

**Categories and Subject Descriptors:**
K.6.5 [Security and Protection]: Unauthorized access

**General Terms:**
Security

**Permission to Use:**
Permission to make digital or hard copies of all or part of this work for personal or classroom use is granted without fee provided that copies are not made or distributed for profit or commercial advantage and that copies bear this notice and the full citation on the first page. To copy otherwise, to republish, to post on servers or to redistribute to lists, requires prior specific permission and/or a fee.

**CCS'12, October 16–18, 2012, Raleigh, North Carolina, USA.**
Copyright 2012 ACM 978-1-4503-1651-4/12/10 ...$15.00.

**Keywords:**
Scriptless Attacks, XSS, CSS, SVG, HTML5, Attack Fonts

**1. Introduction:**
In the era of Web 2.0 technologies and cloud computing, a rich set of powerful online applications is available, enabling activities such as online banking, e-commerce, email composition, and management of personal medical records. It is crucial to understand the measures necessary to protect such data, especially concerning security and privacy.

A prominent real-life attack vector is Cross-Site Scripting (XSS), where an adversary injects malicious scripts into a trusted website. These scripts can manipulate the web page and gain access to sensitive resources like cookies, authentication tokens, and CSRF tokens. Due to their high practical impact, XSS attacks have attracted significant attention from the security community.

**Preventing XSS by Preventing Executability of Code:**
Numerous defense techniques have been proposed to stop XSS attacks, primarily by deactivating or limiting JavaScript execution. Tools such as NoScript, Content Security Policy (CSP), and HTML5-sandboxed Iframes are commonly used. However, modern Web 2.0 applications often require JavaScript, and disabling it can also disable protection mechanisms.

XSS attacks require three preconditions:
1. **Injectability:** The attacker must be able to inject data into the Document Object Model (DOM).
2. **Executability:** Injected JavaScript (or other code) must be executed.
3. **Exfiltration Capability:** Stolen data must be delivered to another domain for analysis and exploitation.

Recent trends indicate that these preconditions are often met in many web applications. Current mitigation approaches focus on preventing executability, as injectability is a desired feature in many Web 2.0 applications.

**Beyond Script-based Attacks:**
In this paper, we evaluate whether restricting scripting content is sufficient for attack mitigation. We raise the question of whether an attacker needs JavaScript to perform XSS-like attacks. Our attack model assumes that injectability remains possible, but scripting is completely disabled, ensuring that JavaScript content will not be executed. We show that an adversary can inject arbitrary markup, such as CSS, to achieve partial JavaScript-like behavior. Using CSS in combination with other web techniques, an attacker can steal sensitive data, including passwords, from a given site. For example, we demonstrate how an attacker can obtain credit card numbers from a form without relying on JavaScript execution.

**Contributions:**
In summary, our contributions are:
1. **Attack Surface Analysis:** We describe an attack surface resulting from the delimitation of scripting capabilities in modern web applications. We label this class of attacks as "scriptless attacks" because they do not require executing (JavaScript) code.
2. **Novel Attack Vectors:** We discuss several sophisticated attack vectors that can extract sensitive data, such as credit card numbers, without executing script code. These attacks utilize a sequence of benign features to create a powerful side-channel attack. We demonstrate the use of proprietary and W3C-standardized browser functionality to achieve data leakage.
3. **Defense Mechanisms:** We elaborate on existing defense mechanisms, specifically CSP, and identify gaps in CSP-based protection. We introduce a new browser feature, implemented as a Firefox patch, that helps mitigate scriptless attacks and other attack techniques such as double-click-jacking and drag & drop attacks.

**2. Attack Surface and Scenarios:**
In recent years, the bar for successful attacks has been raised due to the introduction of numerous advanced defense techniques. This is partly due to the rise of HTML5 and the growing use of HTML in non-browser environments. Consequently, many environments now require protection from HTML-based attacks, leading to the development of various defense approaches.

Given these defense strategies, we expect attackers to develop techniques that function in contexts where script execution is either prohibited or heavily limited. A viable attack scenario is to retrieve and leak data across domains by abusing seemingly benign features. The attacks introduced in this paper target systems that are "injectable" but cannot execute JavaScript. We term our approach "scriptless attacks" and aim to achieve data leaks similar to those possible with classical XSS attacks.

The following list briefly describes some scenarios where scriptless attacks can be applied:

[Continue with the detailed scenarios and further sections of the paper]