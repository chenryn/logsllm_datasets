title:Scriptless attacks: stealing the pie without touching the sill
author:Mario Heiderich and
Marcus Niemietz and
Felix Schuster and
Thorsten Holz and
J&quot;org Schwenk
Scriptless Attacks –
Stealing the Pie Without Touching the Sill
Mario Heiderich, Marcus Niemietz, Felix Schuster, Thorsten Holz, Jörg Schwenk
Horst Görtz Institute for IT-Security
Ruhr-University Bochum, Germany
{ﬁrstname.lastname}@rub.de
ABSTRACT
Due to their high practical impact, Cross-Site Scripting (XSS)
attacks have attracted a lot of attention from the security
community members. In the same way, a plethora of more
or less eﬀective defense techniques have been proposed, ad-
dressing the causes and eﬀects of XSS vulnerabilities.
As a result, an adversary often can no longer inject or even
execute arbitrary scripting code in several real-life scenarios.
In this paper, we examine the attack surface that remains
after XSS and similar scripting attacks are supposedly mit-
igated by preventing an attacker from executing JavaScript
code. We address the question of whether an attacker really
needs JavaScript or similar functionality to perform attacks
aiming for information theft. The surprising result is that
an attacker can also abuse Cascading Style Sheets (CSS) in
combination with other Web techniques like plain HTML,
inactive SVG images or font ﬁles. Through several case
studies, we introduce the so called scriptless attacks and
demonstrate that an adversary might not need to execute
code to preserve his ability to extract sensitive information
from well protected websites. More precisely, we show that
an attacker can use seemingly benign features to build side
channel attacks that measure and exﬁltrate almost arbitrary
data displayed on a given website.
We conclude this paper with a discussion of potential mit-
igation techniques against this class of attacks. In addition,
we have implemented a browser patch that enables a website
to make a vital determination as to being loaded in a de-
tached view or pop-up window. This approach proves useful
for prevention of certain types of attacks we here discuss.
Categories and Subject Descriptors
K.6.5 [Security and Protection]: Unauthorized access
General Terms
Security
Permission to make digital or hard copies of all or part of this work for
personal or classroom use is granted without fee provided that copies are
not made or distributed for proﬁt or commercial advantage and that copies
bear this notice and the full citation on the ﬁrst page. To copy otherwise, to
republish, to post on servers or to redistribute to lists, requires prior speciﬁc
permission and/or a fee.
CCS’12, October 16–18, 2012, Raleigh, North Carolina, USA.
Copyright 2012 ACM 978-1-4503-1651-4/12/10 ...$15.00.
Keywords
Scriptless Attacks, XSS, CSS, SVG, HTML5, Attack Fonts
1.
INTRODUCTION
In the era of Web 2.0 technologies and cloud computing,
a rich set of powerful online applications is available at our
disposal. These Web applications allow activities such as on-
line banking, initiating commercial transactions at the on-
line stores, composing e-mails which may contain sensitive
information, or even managing personal medical records on-
line.
It is therefore only natural to wonder what kind of
measures are necessary to protect such data, especially in
connection with security and privacy concerns.
A prominent real-life attack vector is Cross-Site Scripting
(XSS), a type of injection attack in which an adversary in-
jects malicious scripts into an otherwise benign (and trusted)
website [11, 27]. Speciﬁcally, XSS supplies an attacker with
an option of manipulating a Web page across diﬀerent sites
with the help of scripts. For this kind of attacks, JavaScript
is typically employed as the language of choice; once the
malicious script executes, it has full access to all resources
that belong to the trusted website (e.g., cookies, authentica-
tion tokens, CSRF tokens). Because of their high practical
impact, XSS attacks and related browser-security research
have attracted a lot of attention from the security commu-
nity during the recent years [20, 22, 29, 31, 32, 41, 46, 48, 51].
Preventing XSS by Preventing Executability of Code.
Following the developments and published work mentioned
above, a plethora of more or less feasible defense techniques
has been proposed. All these attempts have a clear goal:
stopping XSS attacks [6, 26, 31, 41, 44]. In general, one can
say that if an attacker manages to execute JavaScript on
the target domain, then she can control the whole Web page
navigated at by the victim. Therefore, a recommended miti-
gation strategy would be to deactivate/limit JavaScript code
execution for security reasons, employing tools such as No-
Script [33], Content Security Policy (CSP) [43], or, alter-
natively, making use of HTML5-sandboxed Iframes. This
approach is reasonable if an application can function with-
out external JavaScript, which is not always the case for
modern Web 2.0 applications. Furthermore, a website in-
creases its robustness and upgrades protection level against
attacks – one example of such action being frame-busting
code in order to mitigate classical clickjacking attacks [40].
As a result, limiting or disabling JavaScript synchronously
disables the aforementioned protection mechanism.
760Going back one step, we note that XSS attacks need to
meet three preconditions guaranteeing their success:
1. Injectability: the attacker must be able to inject data
into the Document Object Model (DOM) rendered by
the Web browser.
2. Executability: if JavaScript (or any other code) is in-
jected, it must be executed.
3. Exﬁltration Capability: attacker-harvested data must
be delivered to another domain or resource for further
analysis and exploitation.
The fact that XSS recently replaced SQL injection and re-
lated server-side injection attacks as the number one threat
in the OWASP ranking [36] indicates that these three pre-
conditions are fulﬁlled by many Web applications. As ob-
served above, several current mitigation approaches against
XSS concentrate on the second precondition, mainly since
injectability is often a desired feature in many Web 2.0 ap-
plications. Internet users are encouraged to contribute con-
tent and data exchange between diﬀerent Web applications
through the DOM is increasingly used. Thus, server- and
client-side XSS ﬁlters try to remove scripts from the injected
content, or, they try to modify/replace these scripts in a way
that they are not executed in the browser’s DOM. The typ-
ical advise reads:
in case we successfully prevent injected
JavaScript from being reﬂected or executed, a Web applica-
tion can be considered secure against XSS attacks.
Note that a browser’s rendering engine is often used in
other tools, such as e-mail clients or instant messengers, to
display HTML content. By default, scripting is disabled in
these kinds of software to prevent attacks like XSS in the
context of e-mail processing or instant messaging. Again,
the defense approach is to temper the attacks by preventing
the second precondition from occurring.
Beyond Script-based Attacks.
In this paper, we evaluate whether restricting scripting
content is suﬃcient for attack mitigation by examining it
in practice. We raise the question of an attacker actually
needing JavaScript (or another language) to perform XSS
attacks. The attack model that we use throughout the pa-
per is as follows. First, we assume that precondition 1 re-
mains fulﬁlled, which is reasonable in modern web applica-
tions as explained above. Secondly, we nonetheless assume
that scripting is completely disabled, so that we can be sure
that XSS attacks would not work because the precondition
of executability is not met (i.e., JavaScript content will not
be executed). Precondition 3 is granted by a vast major-
ity of web applications, since extensive eﬀorts are required
to make sure that HTTP requests to arbitrary external do-
mains are being blocked by the application itself.
It is important to note that this attack model enables
an adversary to inject arbitrary markup such as Cascading
Style Sheet (CSS) markup into a website. We show that
CSS markup, which is traditionally considered to be only
used for decoration/display purposes, actually enables an
attacker to perform malicious activities. More precisely, we
demonstrate that an adversary can use CSS in combination
with other Web techniques such as inactive SVG images,
font ﬁles, HTTP requests, and plain inactive HTML, all to
achieve a partial JavaScript-like behavior. As a result, an
adversary can steal sensitive data, including passwords, from
a given site. For this work, our running example is a Web
application that contains a form for entering credit card in-
formation. We introduce several novel attacks that we call
scriptless attacks, as an attacker can obtain the credit card
number by injecting markup to this page without relying on
any kind of (JavaScript) code execution. We present several
proof-of-concept scriptless attacks with increasing sophisti-
cation, illustrating the practical feasibility of our techniques.
Neither of the discussed attacks depends on user interaction
on the victim’s part, but uses a mix of benign HTML, CSS
and Web Open Font Format (WOFF [23]) features combined
with a HTTP-request-based side channel to measure and ex-
ﬁltrate almost arbitrary data displayed on the website.
It must be highlighted that traditional server- and client-
side defense mechanism designed to prevent XSS, such as
HTMLPuriﬁer, NoScript or several other tested XSS ﬁlter-
ing solutions, are not yet fully prepared to address our script-
less attacks. This is mainly due to the fact that we do not
rely on injecting scripts or executing code.
As a further contribution, we propose new protection mech-
anisms against this new class of attacks. Since ﬁltering of the
attack vectors may aﬀect the regular content of the website,
we focus on eliminating conditions under which the proposed
attacks can be executed, essentially preventing requests to
the attacker’s server. We have implemented a browser patch
that gives a website a capacity to determine whether it is
being loaded in a detached view or pop-up window. This ap-
proach proves useful for preventing certain types of scriptless
attacks and other attack vectors.
Contributions.
In summary, we make the following three contributions in
this paper:
• We describe an attack surface that is resulting from a
delimitation of scripting capabilities for untrusted con-
tent in modern web applications. We show how an at-
tacker can deploy malicious code in a heavily restricted
execution context. We label this class scriptless attacks
because they do not need to execute (JavaScript) code.
• We discuss several novel attack vectors that are sophis-
ticated enough to extract sensitive data (our running
example pertains to obtaining credit card numbers)
from a given website, doing so without executing script
code. The attacks utilize a sequence of benign features
which combined together bring about an attack vector
causing data leakage. We demonstrate that propri-
etary features, as well as W3C-standardized browser
functionality, can be used to concatenate harmless fea-
tures to function as a capable and powerful side chan-
nel attack. The described attacks relate to Cross-Site
Request Forgery (CSRF) and protection CSP and they
are suitable for leaking almost arbitrary data displayed
on a given website. Furthermore, we identify web- and
SVG-fonts as powerful tools for assisting attackers in
obtaining and exﬁltrating sensitive data from injected
websites. We have implemented proof-of-concept ex-
amples for all attacks.
• We elaborate on the existing defense mechanisms di-
rected at scriptless attacks, speciﬁcally referring to
protection techniques such as the Content Security Pol-
icy (CSP) [43]. Regrettably, we also identify gaps in
761the CSP-based protection and cover the limitations
of X-Frame-Options header in regards to scriptless
attacks. Furthermore, we introduce a new browser
feature which we have implemented for the Firefox
browser in a form of a patch helpful for mitigating
scriptless attacks. As an additional upshot, this fea-
ture can also assist the mitigation of several other at-
tack techniques, such as double-click-jacking and drag
& drop attacks [21].
2. ATTACK SURFACE AND SCENARIOS
In the past few years, the bar for a successful attack
has been signiﬁcantly raised upon the introduction of many
anew and sophisticated techniques preventing attacks against
web applications. We speculate that this is mainly caused by
a large number of published exploits, the rise of technologies
connected to HTML5, and the ever-growing popularity of
HTML usage in non-browser environments, i.e., a browser’s
rending engine is used in a wide variety of contexts such as
instant messaging tools like Pidgin and Skype, e-mail clients
such as Outlook, Thunderbird and Opera Mail, entertain-
ment hard- and software, and ultimately operating systems
such as Windows 8. As a result, all these environments re-
quire protection from HTML-based attacks. This has led
to the steady development of numerous defense approaches
(e.g., [6, 26, 31, 41, 44]). It is additionally worth noting that
the number of users that install security extensions like No-
Script is growing: NoScript blocks a large range of attacks
against website users by simply prohibiting JavaScript exe-
cution [33]. Consequently, attacks against web applications
have become more diﬃcult and a website that deploys lat-
est defense techniques can already resist a large number of
attack vectors.
Given all these defense strategies, we expect that attack-
ers will thrive towards developing techniques that function
in rendering contexts that either do not allow script execu-
tion or heavily limit the capabilities of an executed script.
For instance, HTML5 suggests using sandboxed Iframes for
untrusted content; these essentially limit script execution
up to fully blocking it and they will become crucial trust
tokens for future web applications. A very basic question
hence comes to mind: can an adversary still perform mali-
cious computations in such a restricted context?
A continuously viable attack scenario is to develop tech-
niques to retrieve and leak data across domains by (ab)using
seemingly benign features and concatenating them into ac-
tual attack vectors. We presume that these scenarios will
gain signiﬁcance in the future, as a number of defense tech-
niques discussed above carries on growing. The attacks
here-introduced are based on this exact approach and target
systems that are “injectable”, yet they cannot execute any
JavaScript (or another language) code. Thus, we term our
approach scriptless attacks. During the creation of these at-
tacks, our goal was to achieve data leaks similar to the ones
possible for classical XSS attacks.
The following list brieﬂy describes some scenarios where