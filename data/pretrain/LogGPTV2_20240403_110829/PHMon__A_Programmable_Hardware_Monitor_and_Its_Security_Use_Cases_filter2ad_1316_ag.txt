以下是优化后的文本，使其更加清晰、连贯和专业：

---

**参考文献**

[46] LO, D., CHEN, T., ISMAIL, M., AND SUH, G. E. 基于数据流引导过滤的运行时监控，具有可调节开销。《高性能计算机体系结构国际研讨会论文集》(HPCA)，2015年。

[47] LUK, C.-K., COHN, R., MUTH, R., PATIL, H., KLAUSER, A., LOWNEY, G., WALLACE, S., REDDI, V. J., AND HAZELWOOD, K. Pin：使用动态插桩构建定制程序分析工具。《编程语言设计与实现会议论文集》(PLDI)，2005年。

[48] MIJAT, R. 更好的跟踪带来更好的软件：介绍新的ARM CoreSight系统跟踪宏单元和跟踪内存控制器。ARM白皮书，2010年。

[49] MOON, H. 防止内存破坏攻击的硬件技术。博士论文，首尔国立大学，2017年。

[50] NAGARAJAN, V., KIM, H.-S., WU, Y., AND GUPTA, R. 多核上的动态信息流跟踪。《编译器与计算机架构交互作用研讨会论文集》(INTERACT)，2008年。

[51] NAGARAKATTE, S., MARTIN, M. M., AND ZDANCEWIC, S. Watchdog：用于安全和手动内存管理的硬件。《计算机体系结构国际研讨会论文集》(ISCA)，2012年。

[52] NAGARAKATTE, S., MARTIN, M. M., AND ZDANCEWIC, S. Watchdoglite：基于硬件加速的编译器指针检查。《代码生成与优化国际研讨会论文集》(CGO)，2014年。

[53] NAGARAKATTE, S., ZHAO, J., MARTIN, M. M., AND ZDANCEWIC, S. Softbound：高度兼容且完整的C语言空间内存安全。《编程语言设计与实现会议论文集》(PLDI)，2009年。

[54] NEWSOME, J., AND SONG, D. 动态污点分析：自动检测、分析和生成针对商品软件的漏洞攻击签名。《网络和分布式系统安全研讨会论文集》(NDSS)，2005年。

[55] OLEKSENKO, O., KUVAISKII, D., BHATOTIA, P., FELBER, P., AND FETZER, C. Intel MPX解释：对Intel MPX系统堆栈的跨层分析。《ACM计算系统测量与分析会议论文集》(SIGMETRICS)，2018年。

[56] OZDOGANOGLU, H., VIJAYKUMAR, T., BRODLEY, C. E., KUPERMAN, B. A., AND JALOTE, A. SmashGuard：防止函数返回地址安全攻击的硬件解决方案。《IEEE计算机交易》(TC) 55, 10 (2006)。

[57] OZSOY, M., DONOVICK, C., GORELIK, I., ABU-GHAZALEH, N., AND PONOMAREV, D. 恶意软件感知处理器：一种高效的在线恶意软件检测框架。《高性能计算机体系结构国际研讨会论文集》(HPCA)，2015年。

[58] PAPPAS, V., POLYCHRONAKIS, M., AND KEROMYTIS, A. D. 使用间接分支跟踪透明缓解ROP攻击。《USENIX安全研讨会论文集》，2013年。

[59] QIN, F., WANG, C., LI, Z., KIM, H.-S., ZHOU, Y., AND WU, Y. Lift：一种低开销的实际信息流跟踪系统，用于检测安全攻击。《微架构国际研讨会论文集》(MICRO)，2006年。

[60] REDDI, V. J., SETTLE, A., CONNORS, D. A., AND COHN, R. S. Pin：一种用于计算机体系结构研究和教育的二进制插桩工具。《计算机体系结构教育研讨会论文集》(WCAE)，2004年。

[61] AMD公司。AMD64架构程序员手册第2卷：系统编程。https://support.amd.com/techdocs/24593.pdf, 2006年。

[62] ARM公司。ARM安全技术：使用TrustZone构建安全系统。http://infocenter.arm.com/help/topic/com.arm.doc.prd29-genc-009492c/PRD29-GENC-009492C_trustzone_security_whitepaper.pdf, 2009年。

[63] Digilent公司的ZedBoard Zynq FPGA开发板文档。http://www.digilentinc.com/Products/Detail.cfm?Prod=ZEDBOARD/, 2017年。

[64] 英特尔公司。英特尔可信执行技术。https://www.intel.com/content/dam/www/public/us/en/documents/white-papers/trusted-execution-technology-security-paper.pdf, 2006年。

[65] 英特尔公司。英特尔内存保护扩展简介。https://software.intel.com/en-us/articles/introduction-to-intel-memory-protection-extensions/, 2013年。

[66] 英特尔公司。英特尔64和IA-32架构软件开发者手册。系统编程指南，第3C部分（2016年）。

[67] 英特尔公司。控制流强制技术预览。https://software.intel.com/sites/default/files/managed/4d/2a/control-flow-enforcement-technology-preview.pdf, 2017年。

[68] 微软公司。微软安全开发生命周期。https://www.microsoft.com/en-us/sdl/process/verification.aspx/, 2017年。

[69] Nangate公司。45nm开放式单元库。

[70] SCHNEIDER, F. B. 可执行的安全策略。《ACM信息与系统安全事务》(TISSEC) 3, 1 (2000)。

[71] SCHUMILO, S., ASCHERMANN, C., GAWLIK, R., SCHINZEL, S., AND HOLZ, T. kAFL：用于操作系统内核的硬件辅助反馈模糊测试。《USENIX安全研讨会论文集》，2017年。

[72] SCHUSTER, F., TENDYCK, T., PEWNY, J., MAASS, A., STEEGMANS, M., CONTAG, M., AND HOLZ, T. 评估当前反ROP防御的有效性。《攻击、入侵和防御研究国际研讨会论文集》(RAID)，2014年。

[73] SINGH, B., EVTYUSHKIN, D., ELWELL, J., RILEY, R., AND CERVESATO, I. 使用硬件性能计数器检测内核级Rootkit。《亚洲计算机与通信安全会议论文集》(AsiaCCS)，2017年。

[74] SINHA, K., AND SETHUMADHAVAN, S. 使用REST实现实际内存安全。《计算机体系结构国际研讨会论文集》(ISCA)，2018年。

[75] SINNADURAI, S., ZHAO, Q., AND FAI WONG, W. 透明影子栈：防止恶意返回地址修改的运行时保护。http://citeseerx.ist.psu.edu/viewdoc/download?doi=10.1.1.120.5702&rep=rep1&type=pdf, 2008年。

[76] SONG, C., MOON, H., ALAM, M., YUN, I., LEE, B., KIM, T., LEE, W., AND PAEK, Y. HDFI：硬件辅助的数据流隔离。《安全与隐私研讨会论文集》(S&P)，2016年。

[77] STEPHENS, N., GROSEN, J., SALLS, C., DUTCHER, A., WANG, R., CORBETTA, J., SHOSHITAISHVILI, Y., KRUEGEL, C., AND VIGNA, G. Driller：通过选择性符号执行增强模糊测试。《网络和分布式系统安全研讨会论文集》(NDSS)，2016年。

[78] SUH, G. E., LEE, J. W., ZHANG, D., AND DEVADAS, S. 通过动态信息流跟踪实现安全程序执行。《编程语言和操作系统支持的体系结构国际会议论文集》(ASPLOS)，2004年。

[79] SZEKERES, L., PAYER, M., WEI, T., AND SONG, D. SoK：内存中的永恒战争。《安全与隐私研讨会论文集》(S&P)，2013年。

[80] THOZIYOOR, S., MURALIMANOHAR, N., AHN, J. H., AND JOUPPI, N. P. CACTI 5.1。技术报告，HPL-2008-20，HP实验室，2008年。

[81] VENKATARAMANI, G., DOUDALIS, I., SOLIHIN, Y., AND PRVULOVIC, M. Flexitaint：一种用于动态污点传播的可编程加速器。《高性能计算机体系结构国际研讨会论文集》(HPCA)，2008年。

[82] VENKATARAMANI, G., ROEMER, B., SOLIHIN, Y., AND PRVULOVIC, M. Memtracker：高效且可编程的支持内存访问监控和调试。《高性能计算机体系结构国际研讨会论文集》(HPCA)，2007年。

[83] WATERMAN, A., LEE, Y., PATTERSON, D. A., AND ASANOVI ´C, K. RISC-V指令集手册，第1卷：基本用户级ISA。技术报告UCB/EECS-2011-62，加州大学伯克利分校EECS系，2011年。

[84] YUAN, P., ZENG, Q., AND DING, X. 硬件辅助的细粒度代码重用攻击检测。《攻击、入侵和防御研究国际研讨会论文集》(RAID)，2015年。

[85] ZALEWSKI, M. American Fuzzy Lop (AFL)模糊测试器。http://lcamtuf.coredump.cx/afl/, 2017年。

[86] ZHANG, M., QIAO, R., HASABNIS, N., AND SEKAR, R. 一个安全的静态二进制插桩平台。《虚拟执行环境国际会议论文集》(VEE)，2014年。

[87] ZHOU, B., GUPTA, A., JAHANSHAHI, R., EGELE, M., AND JOSHI, A. 硬件性能计数器能否检测恶意软件：神话还是事实？《亚洲计算机与通信安全会议论文集》(ASIACCS)，2018年。

[88] ZHOU, P., QIN, F., LIU, W., ZHOU, Y., AND TORRELLAS, J. iWatcher：用于软件调试的高效架构支持。《计算机体系结构国际研讨会论文集》(ISCA)，2004年。

[89] ZHOU, P., TEODORESCU, R., AND ZHOU, Y. HARD：基于锁集的硬件辅助竞态条件检测。《高性能计算机体系结构国际研讨会论文集》(HPCA)，2007年。

**附录**

在本附录中，我们介绍了PH-Mon的动作单元(AU)设计的微架构细节。如第4.1节所述，PH-Mon从RoCC接口接收提交日志，然后根据配置的监控规则对提交日志进行事件检测并执行后续操作。一旦MU找到匹配项，MU会向AU发送激活信号及匹配包。匹配包包括地址(MU_addr)、数据(MU_data)和MU标识号(MU_id)。MU_addr包含提交日志中指令的地址（即pc_src元素），而MU_data是可编程的，可以包含提交日志条目之一的内容。MU_id指定触发激活信号的MU的索引。AU将来自MU的传入匹配包入队到匹配队列中，同时为早先到达的包执行操作。为了执行操作，如图3所示，AU由四个不同的微架构组件组成：配置单元(CFUs)、本地寄存器文件、算术逻辑单元(ALU)和控制单元(CU)。在接下来的小节中，我们将详细解释AU的每个微架构组件。

**A.1 配置单元(CFUs)**

在PH-Mon设计中，每个MU都配有一个CFU。每个CFU由三个主要组件组成：动作配置表、conf_ctr和conf_ptr。动作配置表包含了PH-Mon在MU找到匹配项并触发激活信号后应执行的动作列表（由用户编程）。conf_ctr和conf_ptr分别保存总动作数量和当前动作的索引。动作配置表中的每个条目称为动作描述，包括类型(Type)、输入1(In1)、输入2(In2)、功能(Fn)、输出(Out)和数据(Data)元素（见图3）。

类型(Type)指定了以下四种类型之一：ALU操作、内存操作、中断和跳过操作。对于ALU操作，In1和In2作为ALU的可编程输入参数；而对于内存操作，In1和In2被解释为内存请求的数据和地址。在这两种情况下，In1和In2都可以编程为持有本地寄存器文件中维护的本地寄存器值或立即数。输出(Out)元素指定了ALU/内存操作的结果存储位置。功能(Fn)元素确定了ALU操作的功能或内存请求的类型。数据(Data)元素仅适用于ALU操作，作为立即数据。注意，在内存操作的情况下，PH-Mon通过RoCC接口经L1数据缓存发送内存请求。中断操作触发一个中断，该中断将由操作系统处理。跳过操作提供了提前终止操作的选项。在这种情况下，当ALU操作的结果等于零时，AU将跳过当前事件的剩余操作。

**A.2 本地寄存器文件**

本地寄存器文件包括三个专门用于内存请求及其响应的寄存器：Mem_addr、Mem_data和Mem_resp，以及三个通用寄存器：Local_1、Local_2和Local_3。内存操作使用Mem_addr和Mem_data寄存器作为请求的地址和数据，结果存储在Mem_resp寄存器中。用户可以使用Local_1、Local_2和Local_3寄存器进行ALU操作。

**A.3 算术逻辑单元(ALU)**

我们在PH-Mon中包含了一个小型ALU，以支持各种操作。ALU操作限制在PH-Mon内部；然而，这些操作可以与其他PH-Mon的操作（即内存操作和中断）结合，为用户提供影响进程执行的能力。我们的ALU的输入和输出参数（包括In1、In2、Fn和Out）都是可编程的。Fn参数决定了ALU功能，包括以下10种不同的操作：加法、减法、逻辑左移、逻辑右移、设置小于、设置等于、AND、OR、XOR和NOP。

**A.4 控制单元(CU)**

CU负责所有与执行操作相关的任务。我们的CU由一个小的状态机组成，具有三种状态：就绪、等待和忙。根据CU的当前状态，它执行以下一项或多项任务：从匹配队列中出队一个匹配包、更新本地寄存器文件、接收下一个动作描述、执行一个动作。一旦执行完所有列出的操作，CFU通知CU。在这种情况下，CU进入就绪状态，并为匹配队列中存储的下一个元素重复上述所有任务。

---

希望这些优化能帮助您更好地传达您的内容。如果有任何进一步的需求，请随时告诉我！