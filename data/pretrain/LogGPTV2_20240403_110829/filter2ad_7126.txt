title:Detecting malware through temporal function-based features
author:Eitan Menahem and
Asaf Shabtai and
Adi Levhar
POSTER: Detecting Malware through Temporal
Function-Based Features
Eitan Menahem, Asaf Shabtai, Adi Lavher
Information System Engineering Department,
{eitanme, shabtaia, adilev}@post.bgu.ac.il
Ben-Gurion University of the Negev
Be’er Sheva, 84105, Israel
ABSTRACT
In order to evade detection by anti-virus software, malware
writers use techniques, such as polymorphism, metamor-
phism and code re-writing. The result is that such malware
contain a much larger fraction of “new” code, compared to
benign programs, which tend to maximize code reuse.
In
this research we study this interesting property and show
that by performing “archaeological” analysis of functions re-
siding within binary ﬁles (i.e., estimating the functions‘ cre-
ation date), a new set of informative features can be derived.
We show that these features provide a good indication for
the existence of malicious code within binary ﬁles. Prelim-
inary experiments of the proposed temporal function-based
features with a set of over 12,000 ﬁles indicates that the
proposed set of features can be useful for the detection of
malicious ﬁles (accuracy of over 90% and AUC of 0.96).
Categories and Subject Descriptors
C.2.0 [Computer-Communication Networks]: security
and protection; H.2.8 [Information Systems]: Database
Applications - data mining
Keywords
Malware, Static analysis, Machine learning
1.
INTRODUCTION
Anti-virus vendors are facing huge quantities (thousands)
of suspicious ﬁles every day [1]. These ﬁles are collected
from various sources including dedicated honeypots, third
party providers and ﬁles reported by customers either auto-
matically or explicitly. Such a large amount of ﬁles makes
the eﬃcient and eﬀective inspection of ﬁles particularly im-
portant and challenging. Analysis techniques for detecting
malware have been proposed. Basically static and dynamic
analysis is distinguished. In dynamic analysis (also known
as behavioral analysis), the detection consists of information
that is collected from the operating system at runtime (i.e.,
Permission to make digital or hard copies of part or all of this work for personal or
classroom use is granted without fee provided that copies are not made or distributed
for proﬁt or commercial advantage, and that copies bear this notice and the full ci-
tation on the ﬁrst page. Copyrights for third-party components of this work must be
honored. For all other uses, contact the owner/author(s). Copyright is held by the
author/owner(s).
CCS’13, November 4–8, 2013, Berlin, Germany.
ACM 978-1-4503-2477-9/13/11.
http://dx.doi.org/10.1145/2508859.2512505.
during the execution of the program), such as system calls,
network access and ﬁles and memory modiﬁcations [2]. This
approach suﬀers from several limitations. First, it is diﬃcult
to setup the appropriate conditions in which the malicious
payload of the program will be activated (such as the vul-
nerable application that the malware exploits). Second, it
is not clear what is the required period of time needed to
observe the appearance of the malicious activity for each
malware. Third, many malicious programs nowadays apply
anti-forensic and anti-debugging methods, thus limiting the
ability to analyze them during runtime. Fourth, masquerad-
ing techniques, such as polymorphism and metamorphism,
may be applied on the malware’s system-calls to conceal
malicious behavioral signatures.
In static analysis, information about the program or its
expected behavior consists of explicit and implicit obser-
vations in its binary/source code. The main advantage of
static analysis is that it is able to process a ﬁle without ac-
tually executing it and thereby providing rapid classiﬁcation
[7]. Up until recently, static analysis solutions were primar-
ily implemented using the signature-based method, which
relies on the identiﬁcation of unique strings in the binary
code [1]. While being very precise, signature-based meth-
ods are useless against unknown malicious code [3]. Thus,
generalization of the detection methods was crucial in order
to detect new versions and types of malware, before their
execution.
Modern static analysis techniques automate and extend
the idea of heuristic-based methods. In these methods the
binary code of a ﬁle is represented, for example, using byte
sequence (i.e., byte n-grams) or using OpCode sequences
(i.e., OpCode n-grams), and classiﬁers are used to learn pat-
terns in the code in order to classify unknown ﬁles as ma-
licious or benign [1],[5],[4]. Recent studies have shown that
Figure 1:
Illustrating the proposed temporal
function-based features. Each section represents a
function, detected within the (cid:12)le’s code (dark black
sections indicate unlabeled sections). The age of
each function is relative to the release date of the
(cid:12)le - T.
1379Figure 2: The process of creating the dated function repository.
by using these types of features for representing binary ﬁles,
classiﬁers can be trained with very accurate classiﬁcation
results.
To avoid being detected by signature-based techniques
and heuristic methods, sophisticated malware programmers
conceal suspicious (unique) byte n-grams and OpCode se-
quences by rewriting entire code segments, or by using poly-
morphism and metamorphism techniques [8]. While these
techniques render the detection techniques based on byte n-
gram and OpCode sequences useless, they result in binary
programs that contain bulks of “new” functions, never pre-
viously seen in other executable ﬁles.
In this research we propose a novel method for detect-
ing malware that employ the above mentioned evasion tech-
niques. Our main assumption is that such techniques distort
the malware’s temporal proﬁle, making it distinct from be-
nign programs (in other words, attackers have coding styles,
in terms of code reuse, that signiﬁcantly diﬀer from legiti-
mate code writers). To derive a temporal proﬁle, our method
performs “archeological” analysis of the tested binary ﬁle,
i.e., estimating the creation date of the functions residing
within the ﬁle’s code. Using this information, a series of
temporal features, representing the ﬁle’s temporal proﬁle,
are then extracted. These features can be exploited for var-
ious analysis tasks, including for detecting malware. Since
usually in machine learning applications the learning algo-
rithm can beneﬁt from a larger set of features, and especially
from features that provide diﬀerent views on the instances
(i.e., executable ﬁles), combining the proposed temporal fea-
tures (i.e., new view) together with byte/OpCode n-grams
features can be very eﬀective for improving the performance
of malware detection applications.
Fig. 1 illustrates the proposed temporal function-based
features. Each section represents a function detected within
the ﬁle’s code (note that dark black sections indicate un-
labeled sections). The age of each function is relative to
the release date of the ﬁle - T. For example, the youngest
function detected within the ﬁle is the top left-most function
with age T-2. It also can be seen that 16.7% of the functions
is between the age 12 and 24 months. One function could
not be set with a creation date (i.e., undated function).
2. THE PROPOSED METHOD
The proposed classiﬁcation method is based on tempo-
ral features that are computed for functions detected within
executable ﬁles. These features are computed based on the
estimated “age of functions” (i.e., coding time of function).
The proposed method consists of two main phases: (1) cre-
ating a repository of dated functions; and (2) extracting fea-
tures for classiﬁcation using the dated functions repository.
2.1 Creation of Dated Functions Repository
In this phase a repository of common functions is created,
and each function is assigned with a creation date. This
process is presented in Fig. 2. First, given a corpus of
benign executable ﬁles, the system sets the creation date of
each ﬁle. This is done by extracting relevant dates for each
ﬁle from diﬀerent sources (e.g., the release date of the ﬁle
as was publish in Web, or the compilation date that was
extracted from the ﬁle’s Portable Executable (PE) header).
Next, from each ﬁle, a collection of functions is extracted.
The functions extraction procedure (presented in [5] [6]) is
performed by sequentially scanning the ﬁle using a sliding
window. Each window is classiﬁed by a machine learning
model (C4.5 decision tree), trained to detect prologues and
epilogues patterns of functions, without disassemble process
(i.e., by processing the binary ﬁle). Once a function pro-
logue is detected, the algorithm scans for the last function
epilogue prior to a following prologue. When a pair of mark-
ers are found (prologue and epilogue), the new function’s
boundaries are stored as a ‘function’ object.
Finally, we detect similar functions and set the creation
date of each function. We choose the Levenshtein distance
as the distance function between the byte-sequence of two
functions. Each function is compared to all other extracted
functions of the same length. We count the number of dif-
ferent bytes between the two bytes sequences and normalize
it by the length.
If the result was less than a predeﬁned
threshold (we set this threshold to 15%), we determine that
the compared functions are identical. The last step is setting
the creation date the functions. We set the creation date of
each function based on the dates of the ﬁles from where it
was extracted from - we set the date of the ˆa ˘AIJoldestˆa ˘A˙I
ﬁle as the function date, after removing outliers. The result
of this phase is a repository of dated functions.
2.2 Feature Extraction
We extract the following 13 features using the dated func-
tion repository: percentage of dated/undated functions (func-
tions extracted from a given ﬁle and were detected/not de-
tected in the function repository), the age in years of the
“oldest”/”youngest” function in the ﬁle, functions median
and average age in years, percentage of functions from last
2, 5 and 10 years, and the percentage of functions older than
10, 15 and 20 years.
In order to induce a classiﬁer based on the deﬁned fea-
tures, we use two sets of ﬁles - benign (diﬀerent from the ﬁles
used in the previous phase of creating the dated functions
1380Figure 3: Histograms of functions‘ estimated age.
Figure 4: ROC curve for the RotFst classi(cid:12)er.
repository, to avoid over-ﬁtting) and malware. For each ﬁle
we ﬁrst extract its functions using the same method used
for creating the dated functions repository. To determine
the functions‘ origin date, each extracted function is com-
pared with functions of the same length in the “dated func-
tions repository” (using Levenshtein distance). If a match
function is found, the tested function is assigned with the
origin date of the matching function. Finally, given the ex-
tracted functions and their corresponding creation dates, we
compute the ﬁle’s temporal function-based features vector,
which comprises the ﬁle’s temporal proﬁle.
3. EXPERIMENTS AND RESULTS
For the experiments we used the following ﬁle sets. The
ﬁrst set contains 850 benign executable ﬁles, downloaded
using a web crawler from various web-sites (such as, ﬁle-
hippo.com and oldapps.com), which indicated the ﬁles‘ orig-
inal date. Since most of the downloaded ﬁles were com-
pressed or packed, we used the Universal Extractor1 tool for
decompressing the packed ﬁles. We then ﬁltered in the rel-
evant ﬁles only (i.e., exe and dll). These ﬁles were used to
generate the dated functions repository. At the end of this
process, the dated functions repository contained a total of
1,999,209 diﬀerent (dated) functions. To train and evalu-
ate the malware detection classiﬁer we used 6,756 benign
and 6,169 malware ﬁles. The benign ﬁles were collected
from the ”‘Program ﬁles”’ and ”‘System32”’ directories of
several computers and were veriﬁed to be benign using the
McAfee anti-virus. The malware ﬁles were taken from the
VX-heavens collection.
For each ﬁle in the repository we extracted the temporal
function- based features and conducted a 10-fold cross vali-
dation experiment. Our ﬁrst observation is that on average,
the dated functions percentage in benign ﬁles was 35.8% and
only 11.4% in malicious ﬁles. In addition, Fig. 3 depicts the
proportion of functions in benign and malicious ﬁles within
diﬀerent age clusters. It can be seen that the percentage of
functions from last year is 8.4% for benign ﬁles compared
to 30.1% in malicious ﬁles. A notable diﬀerence can also
be observed for functions that are from the last 2 year and
5 years. The best classiﬁcation results were obtained when
using a Rotation Forest (RotFst) classiﬁer (Random Forest
as the base classiﬁer), with an average accuracy of 90% and
an area under the ROC curve of 0.96 (see Fig. 4).
1Universal
http://legroom.net/software/uniextract
Extractor
decompressing
tool:
4. CONCLUSION AND FUTURE WORK
In this paper we propose a novel method for detecting
malware, based on the ﬁle’s temporal proﬁle (time-based
features). For future work we are planning to focus on the
evaluation of the proposed method on a larger ﬁle set and on
combining these temporal-based features with other types of
features such as byte or OpCode n-grams.
5. REFERENCES
[1] Griffin, K., Schneider, S., Hu, X., and Chiueh,
T.-c. Automatic generation of string signatures for
malware detection. In Recent Advances in Intrusion
Detection (2009), Springer, pp. 101–120.
[2] Jacob, G., Debar, H., and Filiol, E. Behavioral
detection of malware: from a survey towards an
established taxonomy. Journal in computer Virology 4,
3 (2008), 251–266.
[3] Moser, A., Kruegel, C., and Kirda, E. Limits of
static analysis for malware detection. In Computer
Security Applications Conference, 2007. ACSAC 2007.
Twenty-Third Annual (2007), IEEE, pp. 421–430.
[4] Moskovitch, R., Feher, C., Tzachar, N., Berger,
E., Gitelman, M., Dolev, S., and Elovici, Y.
Unknown malcode detection using opcode
representation. In Intelligence and Security Informatics.
Springer, 2008, pp. 204–215.
[5] Potashnik, D., Fledel, Y., Moskovitch, R.,
Elovici, Y., et al. Monitoring, analysis, and ﬁltering
system for purifying network traﬃc of known and
unknown malicious content. Security and
Communication Networks 4, 8 (2011), 947–965.
[6] Shabtai, A., Menahem, E., and Elovici, Y. F-sign:
Automatic, function-based signature generation for
malware. Systems, Man, and Cybernetics, Part C:
Applications and Reviews, IEEE Transactions on 41, 4
(2011), 494–508.
[7] Shabtai, A., Moskovitch, R., Elovici, Y., and
Glezer, C. Detection of malicious code by applying
machine learning classiﬁers on static features: A
state-of-the-art survey. Information Security Technical
Report 14, 1 (2009), 16–29.
[8] Yin, H., Song, D., Egele, M., Kruegel, C., and
Kirda, E. Panorama: capturing system-wide
information ﬂow for malware detection and analysis. In
Proceedings of the 14th ACM conference on Computer
and communications security (2007), ACM,
pp. 116–127.
1381