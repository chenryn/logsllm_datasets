 **I'm submitting a ...**
    [x] bug report => search github for a similar issue or PR before submitting
    [ ] feature request
    [ ] support request => Please do not submit support request here, instead see https://github.com/angular/angular/blob/master/CONTRIBUTING.md#question
**Current behavior**
Component's and directive's initialization occur in declaration order. This
can lead to the loss of a directives specific host binding such as
`@HostBinding('class.specific') classSpecific = true;`, when a component
"blanket" binds the same parent attribute such as `@HostBinding('class')
classList = '';`.
_Component overwrites directive specified attributes_
    @NgModule({
      declarations: [
        MyDirective,
        MyComponent,
      ],
    })
_Component writes blanket attributes and directive extends these attributes_
    @NgModule({
      declarations: [
        MyComponent,
        MyDirective,
      ],
    })
**Expected behavior**
In my opinion directives should be treated as an extensions of a component's
functionallity and therefore initialize after said component. This should also
take into account modules and their declaration/import order should not change
behavior.
**Minimal reproduction of the problem with instructions**
https://plnkr.co/edit/iOF42haUAv379suApgS4?p=preview
**What is the motivation / use case for changing the behavior?**
Consistency and by extension stability. In our use-case we recieve a list of
classes from the back-end (or another source) which we want to bind to the
component host container's class list to avoid uneccessary nesting. In
addition we also want to have directives that specifically affect the
component without being overwritten.
  * **Angular version:** 4.0.1
  * **Browser:** all
  * **Language:** all