#security
security:
authorization: enabled
```
```bash
service mongod restart
```
---
### Key-value
#### Redis
**官网**
- https://redis.io/
**安装**
- **包管理器方式**
  在 CentOS 和 Red Hat 系统中,首先添加 EPEL 仓库,然后更新 yum 源:
  ```bash
  wget -O /etc/yum.repos.d/epel.repo http://mirrors.aliyun.com/repo/epel-7.repo
  yum clean all
  yum makecache
  yum install -y redis
  ```
  在 debian 中
  ```bash
  apt install -y redis-server
  systemctl start redis # 安装好后启动 Redis 服务即可
  ```
- **源代码编译方式安装**
  在官网下载 tar.gz 的安装包,或者通过 wget 的方式下载
  ```bash
  wget http://download.redis.io/releases/redis-5.0.5.tar.gz
  tar -zxvf redis-5.0.5.tar.gz
  cd redis-5.0.5
  make
  yum install -y tcl tcl-devel
  make test
  make MALLOC=libc
  make install
  ```
  ```bash
  ./usr/local/bin/redis-server
  ctrl+z
  bg
  redis-cli
  ```
使用 redis-cli 进入 Redis 命令行模式操作
```bash
redis-cli
127.0.0.1:6379> ping
PONG
127.0.0.1:6379> exit
```
**开启远程访问**
为了可以使 Redis 能被远程连接,需要修改配置文件,路径为 /etc/redis.conf
```vim
vim /etc/redis.conf
#bind 127.0.0.1
requirepass 密码	      # 设置 redis 密码
```
```bash
service redis restart   # 当然还要记得开防火墙
```
连接测试
```bash
redis-cli -h [ip] -p 6379 -a [PASSWORD]
```
**压测**
Redis-benchmark 是官方自带的 Redis 性能测试工具,可以有效的测试 Redis 服务的性能.
```bash
redis-benchmark -h 127.0.0.1 -p 6379 -c 100 -n 100000
# 100 个并发连接,100000 个请求,检测 host 为 localhost 端口为 6379 的 redis 服务器性能
redis-benchmark -h 127.0.0.1 -p 6379 -q -d 100
# 测试存取大小为100字节的数据包的性能
redis-benchmark -t set,lpush -n 100000 -q
# 只测试某些操作的性能
redis-benchmark -n 100000 -q script load "redis.call('set','foo','bar')"
# 只测试某些数值存取的性能
```
**使用教程**
- [reids](../数据库/redis/redis.md)
---
#### Memcached
**官网**
- https://memcached.org/
**安装**
- **软件包安装**
  ```bash
  yum install -y memcached
  cat /etc/sysconfig/memcached
  ```
- **源代码编译方式安装**
  在官网下载 tar.gz 的安装包,或者通过 wget 的方式下载
  ```bash
  wget http://memcached.org/latest
  tar -zxvf memcached-1.x.x.tar.gz
  cd memcached-1.x.x
  ./configure --prefix=/usr/local/memcached
  make && make test
  make install
  ```
**运行**
```bash
systemctl start memcached
systemctl enable memcached
firewall-cmd --add-port=11211/tcp --permanent
firewall-cmd --reload
```
---
### 图形
#### Neo4j
**官网**
- https://neo4j.com
**安装**
依赖 jdk,安装过程见 [JDK](#JDK)
下载 neo4j,这里以 2.3.9 为例
```bash
tar -zvxf neo4j-community-2.3.9-unix.tar.gz
cd neo4j-community-2.3.9/conf
```
```vim
vim neo4j-server.properties
org.neo4j.server.webserver.address=0.0.0.0
```
```bash
cd ../bin
firewall-cmd --permanent --zone=public --add-port=7474/tcp
firewall-cmd --reload
./neo4j start
```
访问 127.0.0.1:7474,初始账号密码 neo4j,进去后会要求你修改密码
---
## 文件服务
### filebrowser
> 一个在线网盘服务,只能在线看图片,在线看视频是不支持的 ^w^
**项目地址**
- https://github.com/filebrowser/filebrowser
**安装**
```bash
curl -fsSL https://raw.githubusercontent.com/filebrowser/get/master/get.sh | bash
filebrowser -r /path/to/your/files
```
**使用**
```bash
filebrowser -a [你自己的IP] -r [文件夹路径]
```
默认账号密码 admin
---
### NFS
**服务端**
安装
```bash
yum install -y nfs-utils
```
修改配置文件
```vim
vim /etc/exports
/public 192.168.xxx.xxx(ro)
```
启服务
```bash
mkdir /public
vim /etc/selinux/config
	SELINUX=disabled
firewall-cmd --zone=public --add-service=rpc-bind --permanent
firewall-cmd --zone=public --add-service=mountd --permanent
firewall-cmd --zone=public --add-port=2049/tcp --permanent
firewall-cmd --zone=public --add-port=2049/udp --permanent
firewall-cmd --reload
service rpcbind start
service nfs start
```
**客户端**
安装,创建用户
```bash
yum install -y nfs-utils
mkdir /mnt/nfsfiles
useradd nfsuser1
passwd nfsuser1
```
验证共享是否成功
```bash
showmount -e 192.168.xxx.xxx
```
挂载共享目录
```vim
vim /etc/fstab
192.168.xxx.xxx:/public /mnt/nfsfiles/	nfs defaults 0 0
```
```
su -l nfsuser1
```
**验证**
服务器
```bash
cd /public/
echo "hello" > hello.txt
```
客户端
```bash
cd /mnt/nfsfiles/
cat hello.txt
```
**更多配置案例**
见 [nfs.md](./实验/nfs.md)
---
### Samba
**官网**
- https://www.samba.org
**服务端**
安装
```
yum install -y samba
```
修改配置文件
```vim
vim /etc/samba/smb.conf
[smbshare]
path = /smbshare	                # 共享目录
public = yes
writeable=yes
hosts allow = 192.168.1xx.33/32	  # 允许主机
hosts deny = all
create mask = 0770	              # 创建文件的权限为 0770;
```
```bash
testparm  # 验证配置文件有没有错误
```
**用户配置**
```bash
# 添加用户,设置密码
useradd smb1
smbpasswd -a smb1(密码:smb123456)
# 将用户添加到 samba 服务器中,并设置密码
pdbedit -a smb1(密码:smb123456)
# 查看 samba 数据库用户
pdbedit -L
```
创建共享目录,设置所有者和所属组
```bash
mkdir /smbshare
chown smb1:smb1 /smbshare
```
关闭 selinux (需要重启)
```vim
vim /etc/selinux/config
SELINUX=disabled
```
```bash
firewall-cmd --zone=public --add-service=samba --permanent
firewall-cmd --reload
systemctl restart smb
```
**客户端**
```bash
yum install -y samba
mkdir /data/web_data
mount -t cifs -o username=smb1,password='smb123456' //192.168.xx+1.xx/webdata /data/web_data
```
**更多配置案例**
见 [Samba.md](./实验/Samba.md)
---
### sharry
**官网**
- https://github.com/eikek/sharry
**安装**
```bash
cd /tmp
wget https://github.com/eikek/sharry/releases/download/release%2F1.6.0/sharry-restserver-1.6.0.zip
unzip sharry-restserver-1.6.0.zip
mv sharry-restserver-1.6.0 sharry
/tmp/sharry/bin/sharry-restserver
```
访问 http://localhost:9090/
---
### Vsftp
**官网**
- https://security.appspot.com/vsftpd.html
**匿名访问**
|参数|作用|
| :------------- | :------------- |
|anonymous_enable=YES |	允许匿名访问模式 |
|anon_umask=022 |	匿名用户上传文件的umask值|
|anon_upload_enable=YES |	允许匿名用户上传文件|
|anon_mkdir_write_enable=YES |	允许匿名用户创建目录|
|anon_other_write_enable=YES |	允许匿名用户修改目录名称或删除目录|
```vim
vim /etc/vsftpd/vsftpd.conf
anonymous_enable=YES
anon_umask=022
anon_upload_enable=YES
anon_mkdir_write_enable=YES
anon_other_write_enable=YES
```
```bash
setenforce 0  # 关闭 selinux
firewall-cmd --permanent --zone=public --add-service=ftp
firewall-cmd --reload
systemctl restart vsftpd
systemctl enable vsftpd
```
现在就可以在客户端执行 ftp 命令连接到远程的 FTP 服务器了.
在 vsftpd 服务程序的匿名开放认证模式下,其账户统一为 anonymous,密码为空.而且在连接到 FTP 服务器后,默认访问的是 `/var/ftp` 目录.
我们可以切换到该目录下的 pub 目录中,然后尝试创建一个新的目录文件,以检验是否拥有写入权限:
```bash
[root@linuxprobe ~]# ftp 192.168.10.10
Connected to 192.168.10.10 (192.168.10.10).
220 (vsFTPd 3.0.2)
Name (192.168.10.10:root): anonymous
331 Please specify the password.
Password:此处敲击回车即可
230 Login successful.
Remote system type is UNIX.
Using binary mode to transfer files.
ftp> cd pub
250 Directory successfully changed.
ftp> mkdir files
257 "/pub/files" created
ftp> rename files database
350 Ready for RNTO.
250 Rename successful.
ftp> rmdir database
250 Remove directory operation successful.
ftp> exit
221 Goodbye.
```
---
**本地用户**
|参数 |	作用|
| :------------- | :------------- |
|anonymous_enable=NO 	|禁止匿名访问模式|
|local_enable=YES |	允许本地用户模式|
|write_enable=YES |	设置可写权限|
|local_umask=022 |	本地用户模式创建文件的umask值|
|userlist_deny=YES 	|启用"禁止用户名单",名单文件为 ftpusers 和 user_list|
|userlist_enable=YES |	开启用户作用名单文件功能|
```vim
vim /etc/vsftpd/vsftpd.conf
anonymous_enable=NO