However, if the same program serves multiple interfaces, then each interface must have a unique identifier
so that the server can unambiguously determine the operations invoked.
When MIG creates a reply message corresponding to a request message, the reply identifier is
conventionally the sum of the request identifier and the number 100.
The serverdemux declaration section can be used to specify an alternative name for the server
demultiplexing routine in the server-interface module. The demultiplexing routine examines the request
message, calling the appropriate subsystem routine based on the msgh_id value in the message header. If
the value is out of bounds for the subsystem, the demultiplexing routine returns an error. The default name
for this routine is _server, where  is the name specified through the
subsystem statement.
serverdemux somethingelse_server ;
The type specifications section is used for defining data types corresponding to parameters of the calls
exported by the user-interface module. MIG supports declarations for types such as simple, structured,
pointer, and polymorphic.
/*
* Simple Types
* type type-name = type-description;
*/
type int = MACH_MSG_TYPE_INTEGER_32;
type kern_return_t = int;
type some_string = (MACH_MSG_TYPE_STRING, 8*128);
/*
* Structured and Pointer Types
* type type-name = array [size] of type-description;
* type type-name = array [*:maxsize] of type-description;
* struct [size] of type-description;
file://C:\Dokumente und Einstellungen\Silvia\Lokale Einstellungen\Temp\~hh46E8.htm 20.08.2007
Chapter 9. Interprocess Communication Page 55 of 153
* type type-name = ^ type-description;
*/
type thread_ids = array[16] of MACH_MSG_TYPE_INTEGER_32;
type a_structure = struct[16] of array[8] of int;
type ool_array = ^ array[] of MACH_MSG_TYPE_INTEGER_32;
type intptr = ^ MACH_MSG_TYPE_INTEGER_32;
type input_string = array[*:64] of char;
A polymorphic type is used to specify an argument whose exact type is not determined until runtimea
client must specify the type information as an auxiliary argument at runtime. MIG automatically includes
an additional argument to accommodate this. Consider the following simple definition file:
/* foo.defs */
subsystem foo 500
#include 
#include 
type my_poly_t = polymorphic;
routine foo_func(
server : mach_port_t;
arg : my_poly_t);
The MIG-generated code for foo_func() has the following prototype:
kern_return_t
foo_func(mach_port_t server,
my_poly_t arg,
mach_msg_type_name_t argPoly);
A type declaration can optionally contain information specifying procedures for translating or deallocating
types. Translation allows a type to be seen differently by the user- and server-interface modules. A
deallocation specification allows a destructor function to be specified. In Section 9.6.2 we will see an
example involving translation and deallocation specifications.
Import declarations are used to include header files in MIG-generated modules. MIG can be directed to
include such headers in both the user- and server-interface modules, or in only one of the two.
/*
* import header-file;
* uimport header-file;
* simport header-file;
*/
import "foo.h"; /* imported in both modules */
uimport ; /* only in user-interface module */
simport ; /* only in server-interface module */
The operations section contains specifications for one or more types of IPC operations. The specification
includes a keyword for the kind of operation being described, the name of the operation, and the names
and types of its arguments. When MIG compiles the specification file, it generates client and server stubs
for each operation. A client stub resides in the user-interface module. Its job is to package and send the
message corresponding to a procedure call invocation in the client program. The server stub resides in the
server-interface module. It unpacks received messages and calls the programmer's server code that
implements the operation.
file://C:\Dokumente und Einstellungen\Silvia\Lokale Einstellungen\Temp\~hh46E8.htm 20.08.2007
Chapter 9. Interprocess Communication Page 56 of 153
Operation types supported by MIG include Routine, SimpleRoutine, Procedure, SimpleProcedure,
and Function. Table 92 shows the characteristics of these types.
Table 92. Operation Types Supported by MIG
Operation Type Reply Received? Error Returned?
Routine Yes Yes, a kern_return_t return value
specifying whether the operation was
successfully completed
SimpleRoutine No Yes, the return value from Mach's
message-sending primitive
Procedure Yes No
SimpleProcedure No No
Function Yes No error code returned, but a value
from the server function is returned
The following is an example of an operation specification:
routine vm_allocate(
target_task : vm_task_entry_t;
inout address : vm_address_t;
size : vm_size_t;
flags : int);
A parameter specification contains a name and a type and may optionally be adorned by one of the
keywords in, out, or inout, representing that the argument is only sent to the server, is sent by the server
on its way out, or both, respectively.
In the operations section, the skip keyword causes MIG to skip assignment of the next operation ID,
resulting in a hole in the sequence of operation IDs. This can be useful to preserve compatibility as
interfaces evolve.
The options declarations section is used for specifying special-purpose or global options that affect the
generated code. The following are examples of options:
 WaitTime used for specifying the maximum time in milliseconds that the user-interface code will
wait for receiving a reply from the server
 MsgType used for setting the message type (e.g., to mark messages as being encrypted)
 UserPrefix used for specifying a string that will be a prefix of client-side function names that call
IPC operations
 ServerPrefix used for specifying a string that will be a prefix of server-side function names that
implement IPC operations
 Rcsid used for specifying a string that will cause static string variables called Sys_server_rcsid
and Sys_user_rcsid to be declared in the server and user modules, respectively, with their
constant values each being the specified string
Numerous examples of MIG specification files exist in /usr/include/mach/ and its subdirectories.
file://C:\Dokumente und Einstellungen\Silvia\Lokale Einstellungen\Temp\~hh46E8.htm 20.08.2007
Chapter 9. Interprocess Communication Page 57 of 153
9.6.2. Using MIG to Create a Client-Server System
Let us use MIG to create a simple client-server system. A MIG server is a Mach task that provides
services to its clients using a MIG-generated RPC interface. Our MIG server will serve two routines: one
to calculate the length of a string sent by the client and another to calculate the factorial of a number sent
by the client. In our example, the client will send the string inline, and the server will send only simple
integers. Recall that when an interface call returns out-of-line data, it is the caller's responsibility to
deallocate the memory by calling vm_deallocate(). For example, we could add another operation to our
interface, say, one that reverses the string sent by the client and returns the reversed string by allocating
memory for it in the caller's address space.
We call our MIG server the Miscellaneous Server. Its source consists of the following four files:
A header file containing useful definitions and prototypes used by both the client and the server
(misc_types.h)
The MIG specification file (misc.defs)
Setup and main loop for the server (server.c)
Demonstration of the interface (client.c)
Figure 926 shows the common header file. We define two new data types: input_string_t, which is a
character array 64 elements in size, and xput_number_t, which is another name for an integer.
Figure 926. Common header file for the Miscellaneous Server and its client
// misc_types.h
#ifndef _MISC_TYPES_H_
#define _MISC_TYPES_H_
#include 
#include 
#include 
#include 
#include 
// The server port will be registered under this name.
#define MIG_MISC_SERVICE "MIG-miscservice"
// Data representations
typedef char input_string_t[64];
typedef intxput_number_t;
typedef struct {
mach_msg_header_t head;
// The following fields do not represent the actual layout of the request
// and reply messages that MIG will use. However, a request or reply
// message will not be larger in size than the sum of the sizes of these
// fields. We need the size to put an upper bound on the size of an
// incoming message in a mach_msg() call.
NDR_record_t NDR;
union {
input_string_t string;
xput_number_tnumber;
} data;
kern_return_t RetCode;
mach_msg_trailer_t trailer;
file://C:\Dokumente und Einstellungen\Silvia\Lokale Einstellungen\Temp\~hh46E8.htm 20.08.2007
Chapter 9. Interprocess Communication Page 58 of 153
} msg_misc_t;
xput_number_t misc_translate_int_to_xput_number_t(int);
int misc_translate_xput_number_t_to_int(xput_number_t);
void misc_remove_reference(xput_number_t);
kern_return_t string_length(mach_port_t, input_string_t, xput_number_t *);
kern_return_t factorial(mach_port_t, xput_number_t, xput_number_t *);
#endif // _MISC_TYPES_H_
Figure 927 shows the specification file. Note the type specification of xput_number_t. Each MIG type
can have up to three corresponding C types: a type for the user-interface module (specified by the
CUserType option), a type for the server module (specified by the CServerType option), and a translated
type for internal use by server routines. The CType option can be used in place of CUserType and
CServerType if both types are the same. In our case, the CType option specifies the C data type for the
MIG type xput_number_t.
Figure 927. MIG specification file for the Miscellaneous Server
/*
* A "Miscellaneous" Mach Server
*/
/*
* File: misc.defs
* Purpose: Miscellaneous Server subsystem definitions
*/
/*
* Subsystem identifier
*/
Subsystem misc 500;
/*
* Type declarations
*/
#include 
#include 
type input_string_t = array[64] of char;
type xput_number_t = int
CType : int
InTran : xput_number_t misc_translate_int_to_xput_number_t(int)
OutTran : int misc_translate_xput_number_t_to_int(xput_number_t)
Destructor : misc_remove_reference(xput_number_t)
;
/*
* Import declarations
*/
import "misc_types.h";
/*
* Operation descriptions
*/
/* This should be operation #500 */
routine string_length(
server_port : mach_port_t;
in instring : input_string_t;
out len : xput_number_t);
file://C:\Dokumente und Einstellungen\Silvia\Lokale Einstellungen\Temp\~hh46E8.htm 20.08.2007
Chapter 9. Interprocess Communication Page 59 of 153
/* Create some holes in operation sequence */
Skip;
Skip;
Skip;
/* This should be operation #504, as there are three Skip's */
routine factorial(
server_port : mach_port_t;
in num : xput_number_t;
out fac : xput_number_t);
/*
* Option declarations
*/
ServerPrefix Server_;
UserPrefix Client_;
We use the InTran, OutTran, and Destructor options to specify procedures that we will provide for
translation and deallocation. Translation is useful when a type must be seen differently by the server and
the client. In our example, we want the type in question to be an xput_number_t for the server and an int
for the client. We use InTran to specify misc_translate_int_to_xput_number_t() as the incoming
translation routine for the type. Similarly, misc_translate_xput_number_t_to_int() is the outgoing
translation routine. Since xput_number_t is actually just another name for an int in our case, our
translation functions are trivial: They simply print a message.
Real-life translation functions can be arbitrarily complex. The kernel makes heavy use of translation
functions. See Section 9.6.3 for an example.
We also use the Destructor option to specify a deallocation function that MIG will call at the appropriate
time.
Figure 928 shows the source for the server.
Figure 928. Programmer-provided source for the Miscellaneous Server
// server.c
#include "misc_types.h"
static mach_port_t server_port;
extern boolean_t misc_server(mach_msg_header_t *inhdr,
mach_msg_header_t *outhdr);
void
server_setup(void)
{
kern_return_t kr;
if ((kr = bootstrap_create_service(bootstrap_port, MIG_MISC_SERVICE,
&server_port)) != BOOTSTRAP_SUCCESS) {
mach_error("bootstrap_create_service:", kr);
exit(1);
}
if ((kr = bootstrap_check_in(bootstrap_port, MIG_MISC_SERVICE,
&server_port)) != BOOTSTRAP_SUCCESS) {
file://C:\Dokumente und Einstellungen\Silvia\Lokale Einstellungen\Temp\~hh46E8.htm 20.08.2007
Chapter 9. Interprocess Communication Page 60 of 153
mach_port_deallocate(mach_task_self(), server_port);
mach_error("bootstrap_check_in:", kr);
exit(1);
}
}
void
server_loop(void)
{
mach_msg_server(misc_server, // call the server-interface module
sizeof(msg_misc_t), // maximum receive size
server_port, // port to receive on
MACH_MSG_TIMEOUT_NONE); // options
}
// InTran
xput_number_t
misc_translate_int_to_xput_number_t(int param)
{
printf("misc_translate_incoming(%d)\n", param);
return (xput_number_t)param;
}
// OutTran
int
misc_translate_xput_number_t_to_int(xput_number_t param)
{
printf("misc_translate_outgoing(%d)\n", (int)param);
return (int)param;
}
// Destructor
void
misc_remove_reference(xput_number_t param)
{
printf("misc_remove_reference(%d)\n", (int)param);
}
// an operation that we export
kern_return_t
string_length(mach_port_t server_port,
input_string_t instring,
xput_number_t *len)
{
char *in = (char *)instring;
if (!in || !len)