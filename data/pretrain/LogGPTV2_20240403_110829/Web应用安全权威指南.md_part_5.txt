    **表 3-2 常见的 MIME 类型**
      ----------------- ----------
      MIME类型          含义
      text/plain        文本
      text/html         HTML文档
      application/xml   XML文档
      text/css          CSS
      mage/gif          GIF图像
      image/jpeg        JPEG图像
      image/png         PNG图像
      application/pdf   PDF文档
      ----------------- ----------
    分号之后的 charset=UTF-8 表示 HTTP
    响应的字符编码。字符编码必须被正确设置，具体原因及设置方法请参考第 6
    章。
-   **如果将 HTTP 比喻为对话**
    由于 HTTP
    会持续不断进行请求与响应，所以将其比喻为人们的对话或许会更形象。以显示时间的脚本为例，将这个最简单的
    HTTP 消息以对话的形式呈现的话，大概就像下面这样 [2]{.注释编号} 。
    > 顾客：现在几点了？
    >
    > 店员：15 点 21 分。
    接下来，我们看一个复杂些的 HTTP
    消息的例子------"输入－确认－注册"模式的表单。
[1]{.注释编号下} 如果 HTTP 协议版本为 1.0，Host 头信息也可以省略。
[2]{.注释编号下} 将 HTTP 比喻成对话的灵感，源于书籍《Web
背后的技术》\[1\] 与《Web 技术入门》\[2\]。
#### **输入 - 确认 - 注册模式** {line-num="131 132"}
这里，通过观察"输入－确认－注册"模式中输入表单（Input Form）的 HTTP
消息，希望能够有助于读者更深入地理解 HTTP。
以下分别为输入页面（31-002.php）、确认页面（31-003.php）和注册页面（31-004.php）的代码。
> **代码清单 /31/31-002.php**
``` {.代码无行号 line-num="139 140 141 142 143 144 145 146 147 148 149 150"}
 个人信息输入 
姓名 
邮箱地址 
性别  女
 男 
```
> **代码清单 /31/31-003.php**
``` {.代码无行号 line-num="153 154 155 156 157 158 159 160 161 162 163 164 165 166 167 168 169 170 171"}
 确认 
姓名 :
邮箱地址 :
性别 :
">
">
">
```
> **代码清单 /31/31-004.php**
``` {.代码无行号 line-num="174 175 176 177 178 179 180 181 182 183 184 185 186 187 188"}
 注册成功 
姓名 :
邮箱地址 :
性别 :
已注册
```
要在虚拟机上执行的话，可以点击 /31/
菜单中的"31-002：输入－确认－注册"链接。然后就会显示如下页面（图 3-8）。
![{%}](Image00020.jpg)
**图 3-8 输入页面**
在页面上填入姓名、邮箱和性别后点击"确认"按钮。这时，HTTP
请求消息就可以在 Fiddler 中看到（图 3-9）。
![{%}](Image00021.jpg)
**图 3-9 在输入页面填写完毕后点击"确认"时 Fiddler 中显示的 HTTP
请求消息**
-   **POST 方法**
    此处显示的是从图 3-9 的请求消息中摘取的一些重要内容。
        POST /31/31-003.php HTTP/1.1
        Referer: http://example.jp/31/31-002.php
        Content-Type: application/x-www-form-urlencoded
        Content-Length: 70
        Host: example.jp
                                                                        消息体
         ┐
        name=%E5%BE%B3%E4%B8%B8%E6%B5%A9&mail=PI:EMAIL&gender=%E7%94%B7┘
    请求行开头处的方法变成了 POST。与 GET
    不同的是，空行下面所填写的值也被发送了。而这部分内容就被称为消息体（Message
    Body）。
-   **消息体**
    通过 POST
    方法发送的请求消息中包含消息体。与响应消息一样，消息头和消息体用空行相隔。要通过
    POST 方法发送的值被放在请求的消息体中。
    与 POST 发送值相关的消息头为 Content-Length 和 Content-Type。
    Content-Length 为消息体的字节数。
    Content-Type 为发送值的 MIME 类型，可通过 HTML 的 form
    元素设置。默认为
    application/x-www-form-unlencoded。这种类型的格式为，"名称 =
    值"的组合通过 &
    相连，其中，名称和值都经过了百分号编码（Percent-Encoding）。
-   **百分号编码**
    中文和特殊符号等不能直接用于 URL，而如果要将它们用在 URL
    上的话就需要经过百分号编码。百分号编码是将字符以字节为单位转换成 %xx
    的形式。xx 为该字节的十六进制写法。例如，将图 3-8
    中输入的文字"德"进行 UTF-8 编码，可得到 E5 BE B3
    字节列，百分号编码后即为 %E5%BE%B3。
    根据百分号编码的规则，空格应为 %20，但在
    application/x-www-form-unlencoded 的情况下，空格则被特殊处理为
    +[3]{.注释编号} 。所以，将"I\'m a
    programmer"进行百分号编码的话，结果就为
    I%27m+a+programmer（撇号变成了 %27）。
-   **Referer**
    请求消息中有时含有 Referer
    头信息。它能告诉我们当前请求是从哪个页面链接过来的，值就是那个页面的
    URL。除了通过 form 元素发送的请求，a 元素生成的链接或 img
    元素的图像等也会产生 Referer 头信息。
    Referer 头信息有时是提升安全性的帮手，有时却能成为问题之源。
    Referer 有益的一面体现在，当我们为了确保安全性而主动检验 Referer
    头信息时，通过查看
    Referer，能够确认应用程序的跳转是否跟预期一样。但是，同其他头信息一样，Referer
    也能由访问者本人通过 Fiddler
    之类的工具修改，或者被浏览器插件和其他安全方面的软件修改或删除，所以未必会正确显示链接的来源
    [4]{.注释编号} 。
    当 URL 中包含敏感信息时，Referer 就可能会引发安全问题。比如，URL
    中包含的会话 ID 通过 Referer
    泄漏给外界，从而使自己的身份被他人恶意冒名顶替，就是一个典型的案例。具体情况将在
    4.6.3 节详述。
    > **要点**  URL 中包含重要信息时，就有被 Referer 头信息泄密的风险。
-   **GET 和 POST 的使用区别**
    如何区别使用 GET 方法和 POST 方法呢？
    HTTP 1.1 协议的规范文档 RFC2616[5]{.注释编号} 的第 9 章和第 15
    章中，记载了区别使用两者的注意点。
    -   GET 方法仅用于查阅（获取资源）
    -   GET 方法被认为没有副作用
    -   发送敏感数据时应使用 POST 方法
    这里出现了"副作用"这个概念。副作用是指，除了获取资源（内容）以外的其他操作。比如，追加
    / 更新 / 删除服务器端的数据、购买商品、注册 /
    删除用户等操作。换言之，更新类的页面必须使用 POST 方法。
    另外，GET 方法使用的是 URL
    后紧跟查询字符串的形式来传递参数，但由于浏览器和服务器能够处理的 URL
    长度是有限的 [6]{.注释编号} ，所以，当传递的信息量很大时，使用 POST
    方法更安全。
    敏感信息应使用 POST 发送，这是因为 GET 方法有下列风险。
    -   URL 中指定的参数经由 Referer 泄漏
    -   URL 中指定的参数残留在访问日志（Access Log）中
    为解决以上问题，当所发送的请求符合以下任一条件时就应使用 POST
    方法，都不符合时才使用 GET 方法。
    -   请求中包含数据更新等副作用时
    -   发送敏感信息时
    -   发送的信息量很多时
-   **hidden 参数能够被更改**
    继续刚才的输入表单（图 3-8），点击"确认"按钮后浏览器的页面如图 3-10
    所示。
    ![{%}](Image00022.jpg)
    **图 3-10 确认画面**
    虽然在页面上看不到，但用户在前页面输入的值会以 hidden 参数的形式在
    HTML 源代码中记录下来。
    与 FTP 协议或 telnet 协议不同，HTTP
    协议无法记忆客户端的当前状态。这种特性被称为 HTTP 的无状态性
    [7]{.注释编号} 。因此，状态的记忆需要借助响应（HTML）中的 hidden
    参数。
    在页面上点击"注册"按钮后，hidden 参数将被发送给 Web
    服务器。此时，在向服务器发送数据之前，我们可以尝试使用 Fiddler 改变
    hidden 参数的值。
    首先，在 Fiddler 的 Rules 菜单中，选择"Automatic
    Breakpoints"-"Before Requests"（图 3-11）。
    ![{%}](Image00023.jpg)
    **图 3-11 在 Rules 菜单中选择"Automatic Breakpoints"-"Before
    Requests"**
    此状态下，点击"注册"按钮后，Fiddler 的界面就变成了图 3-12
    所示的情形（选择右侧上方的"WebForms"）。现在，Fiddler
    截获到了浏览器的请求消息，并且还未将其传送给服务器。
    ![{%}](Image00024.jpg)
    **图 3-12 Fiddler 接收浏览器的请求消息**
    编辑方框中的内容，如图 3-13 所示。
    ![{%}](Image00025.jpg)
    **图 3-13 变更浏览器的请求消息**
    接下来，点击"Run to
    Completion"按钮，变更后的请求就会被发送给服务器。此时，IE 上会显示图
    3-14
    的页面（虽然显示了"成功注册"的消息，但事实上并没有进行注册处理）。