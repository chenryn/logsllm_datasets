title:Automated Symbolic Proofs of Observational Equivalence
author:David A. Basin and
Jannik Dreier and
Ralf Sasse
Automated Symbolic Proofs of Observational Equivalence
David Basin
Inst. of Information Security
Dept. of Computer Science
ETH Zurich, Switzerland
PI:EMAIL
Jannik Dreier
Inst. of Information Security
Dept. of Computer Science
PI:EMAIL
ETH Zurich, Switzerland
Ralf Sasse
Inst. of Information Security
Dept. of Computer Science
ETH Zurich, Switzerland
PI:EMAIL
ABSTRACT
Many cryptographic security deﬁnitions can be naturally
formulated as observational equivalence properties. How-
ever, existing automated tools for verifying the observational
equivalence of cryptographic protocols are limited: they do
not handle protocols with mutable state and an unbounded
number of sessions. We propose a novel deﬁnition of obser-
vational equivalence for multiset rewriting systems. We then
extend the Tamarin prover, based on multiset rewriting, to
prove the observational equivalence of protocols with muta-
ble state, an unbounded number of sessions, and equational
theories such as Diﬃe-Hellman exponentiation. We demon-
strate its eﬀectiveness on case studies, including a stateful
TPM protocol.
Categories and Subject Descriptors
D.2.4 [Software/Program Veriﬁcation]: Formal meth-
ods; K.4.4 [Electronic Commerce]: Security
General Terms
Security, Veriﬁcation
Keywords
Protocol veriﬁcation, observational equivalence, symbolic model
1.
INTRODUCTION
Security protocols are the backbone of secure communi-
cation in open networks. It is well known that their design
is error-prone and formal proofs can increase conﬁdence in
their correctness. Most tool-supported proofs have focused
on trace properties, like secrecy as reachability and authenti-
cation as correspondence. But observational equivalence has
received increasing attention and it is frequently used to ex-
press security properties of cryptographic protocols. Exam-
ples include stronger notions of secrecy and privacy-related
.
properties of voting and auctions [12, 14, 15, 16], game-
based notions such as ciphertext indistinguishability [5], and
authenticated key-exchange security [6, 18].
Our focus in this paper is on symbolic models [4] for ob-
servational equivalence. The key advantage of using a sym-
bolic model is that it enables a higher degree of automation
in tools [9, 11, 8, 7, 25] for protocol analysis. These tools can
quickly ﬁnd errors in protocols or demonstrate their correct-
ness with respect to symbolic abstractions. Moreover, they
do not require a manual, tedious, and error-prone proof for
each protocol. Unfortunately, none of the above tools are
capable of analyzing protocols with mutable state for an
unbounded number of sessions with respect to a security
property based on observational equivalence. Note that mu-
table state is a key ingredient for many kinds of protocols
and systems, for example to specify and analyze security
APIs for hardware security modules [19].
In this paper, we develop a novel and general deﬁnition of
observational equivalence in the symbolic setting of multiset
rewriting systems. We present an algorithm suitable for pro-
tocols with mutable state, an unbounded number of sessions,
as well as equational properties of the cryptographic opera-
tions, such as Diﬃe-Hellman exponentiation. Our algorithm
is sound but not complete, yet it succeeds on a large class of
protocols. We illustrate this through case studies using our
implementation of the algorithm in the Tamarin prover.
As case studies we verify the untraceability of an RFID
protocol, and ﬁnd an attack on the TPM Envelope protocol
when using deterministic encryption. Note that some proto-
cols, such as TPM Envelope, have been analyzed before with
symbolic methods [13]. However, their analyses were carried
out with respect to weaker trace-based security properties
such as the unreachability of a state where the adversary
can derive secrets. Formulating security properties in terms
of observational equivalence is much closer to the properties
used in game-based cryptographic proofs than trace prop-
erties are. For example, game-based protocol analysis often
uses the standard test [21] of distinguishing real–or–random,
where the adversary is unable to distinguish the real secret
from an unrelated randomly generated value.
Contribution. We give a novel deﬁnition of observational
equivalence in the multiset rewriting framework and an as-
sociated algorithm which is the ﬁrst that supports mutable
state, an unbounded number of sessions, and Diﬃe-Hellman
exponentiation. We implement this algorithm in an exten-
sion of the Tamarin prover and we demonstrate its practi-
cality in diﬀerent case studies that illustrate its features.
The resulting proofs are largely automated, with limited
manual input needed to select proof strategies in some cases.
Structure. We introduce our general system model based
on multiset rewriting in Section 2. We motivate and de-
ﬁne observational equivalence for multiset rewrite systems
in Section 3. We show how to prove observational equiv-
alence in Section 4 and sketch its implementation in the
Tamarin prover. Afterwards we present our case studies in
Section 5. We close with related work and draw conclusions
in Section 6.
2. PRELIMINARIES AND MODEL
Let S∗ denote the set of sequences over S. For a sequence
s, we write si for its i-th element, |s| for its length, and
idx(s) = {1, . . . ,|s|} for the set of its indices. We use []
to denote the empty sequence, [s1, . . . , sk] to denote the se-
quence s of length k, and s · s(cid:48) to denote the concatenation
of the sequences s and s(cid:48).
We specify properties of functions by equations. Given a
signature ΣFun of functions and a set V of variables, TΣFun (V )
denotes the set of terms built using functions from ΣFun and
variables from V . Terms without variables are called ground
terms and denoted TΣFun . An equation over the signature
ΣFun is an unordered pair of terms s, t ∈ TΣFun (V ), written
s (cid:39) t. An equational presentation is a pair E = (ΣFun; E) of
a signature ΣFun and a set of equations E. The correspond-
ing equational theory =E is the smallest ΣFun-congruence
containing all instances of the equations in E. We often
leave the signature ΣFun implicit and identify the equations
E with the equational presentation E. Similarly, we use =E
for the equational theory =E . We say that two terms s and
t are equal modulo E iﬀ s =E t. We use the subscript E to
denote the usual operations on sets, sequences, and multi-
sets where equality is modulo E instead of syntactic equality.
For example, we write ∈E for set membership modulo E.
Example 1. To model symmetric key encryption, let ΣFun
be the signature consisting of the functions enc(·,·) and
dec(·,·) together with the equation dec(enc(x, k), k) (cid:39) x.
We model systems using multiset rewrite rules. These
rules manipulate multisets of facts which model the current
state of the system, with terms as arguments. Formally,
given a signature ΣFun and a (disjoint) set of fact symbols
ΣFact, we deﬁne Σ = ΣFun ∪ ΣFact, and we deﬁne the set of
facts as F = {F (t1, . . . , tn)|ti ∈ TΣFun , F ∈ ΣFact of arity n}.
We assume that ΣFact is partitioned into linear and persis-
tent fact symbols; a fact F (t1, . . . , tn) is called linear if its
function symbol F is linear, and persistent if F is persis-
tent. Linear facts model resources that can only be con-
sumed once, whereas persistent facts can be consumed as
often as needed. We denote by F (cid:93) the set of ﬁnite multisets
built using facts from F, and by G(cid:93) the set of multisets of
ground facts.
The system’s possible state transitions are modeled by
labeled multiset rewrite rules. A labeled multiset rewrite rule
is a tuple (id, l, a, r), written id : l−−[ a ]→r, where l, a, r ∈ F (cid:93)
and id ∈ I is a unique identiﬁer. Given a rule ri = id :
l−−[ a ]→r, name(ri) = id denotes its name, prems(ri) = l
its premises, acts(ri) = a its actions, and concs(ri) = r its
conclusions. Finally ginsts(R) denotes the ground instances
of a set R of multiset rewrite rules, lfacts(l) is the multiset
of all linear facts in l, and pfacts(l) is the set of all persistent
facts in l. We use mset(s) to highlight that s is a multiset,
and we use set(s) for the interpretation of s as a set, even if
it is a multiset. We use regular set notation {·} for multisets
as well, whenever it is clear from the context whether it is a
set or a multiset.
Example 2. The following multiset rewrite rules describe
a system that constructs terms containing nested applica-
tions of the functions one(·) and two(·) inside a fact built
with the symbol M using the ﬁrst three rules below. Using
the ﬁnal rule, Echeck, the system can compare a constructed
term with the value stored in the InEnv(·) fact.
Env = { Enull : −−[]→M(null),
Eone : M(x)−−[]→M(one(x)),
Etwo : M(x)−−[]→M(two(x)),
Echeck : M(x), InEnv(x)−−[]→OutEnv(true) }
In our semantics of multiset rewriting, we associate each
fact F with a recipe recipe(F ), representing how this fact
was derived. This will be important for deﬁning observa-
tional equivalence later. Speciﬁcally, we deﬁne a sequence
of the premises seq≤(l) and conclusions seq≤(r) of a rule
id : l−−[ a ]→r by ordering all facts under the total order ≤.
Usually, ≤ will just be the lexicographic order, where if the
same fact symbol appears repeatedly, we order the instances
of each such fact lexicographically by the terms inside the
fact. If these terms are also identical, the facts can appear
in any order. Given a rule id : l−−[ a ]→r, for a fact F ∈ r,
where k is the index of F in seq≤(r), and l1, . . . , ln = seq≤(l),
we have
recipe(F ) = idk(newvars(F ), [recipe(l1), . . . , recipe(ln)]),
where newvars(F ) denotes the list of new variables. New
variables are those that appear in F but not in any of the
premises. Thus, we include their instantiations, e.g., [{a/x}]
for the list containing the new variable x instantiated with a.
This list is ordered by the appearance of the new variables
inside F . This deﬁnition requires computing the recipes for
the facts l1, . . . , ln recursively. Moreover, by abuse of nota-
tion, we deﬁne the recipe of a rule id as
recipe(id) = id([newvars(r1), . . . , newvars(rm)],
[recipe(l1), . . . , recipe(ln)]),
where r1, . . . , rm = seq≤(r). It consists of the list of lists of
new variables and the list of all recipes of the premises. We
denote by ρ the set of all recipes of rules.
The semantics of a set of multiset rewrite rules P are given
by a labeled transition relation →P ⊆ G(cid:93) × (G(cid:93) × ρ) × G(cid:93),
deﬁned by the transition rule:
ri = id : l−−[ a ]→r ∈E ginsts(P )
pfacts(l) ⊆ S
lfacts(l) ⊆(cid:93) S
S
set(a)
−−−−−−→
recipe(id)
P ((S \(cid:93) lfacts(l)) ∪(cid:93) mset(r))
Note that the initial state of an LTS derived from multiset
rewrite rules is the empty set of facts ∅. Each transition
transforms a multiset of facts S into a new multiset of facts,
according to the rewrite rule used. Moreover each transition
is labeled by the actions a of the rule, as well as the rule’s
recipe recipe(id). These labels are used in our deﬁnition of
observational equivalence below, for example that each in-
terface transition must be simulated by the same transition.
Since we perform multiset rewriting modulo E, we use ∈E
System Sys
InSys
OutSys
Interface
IF
OutEnv
InEnv
Environment Env
Figure 1: System model
for the rule instance. As linear facts are consumed upon
rewriting, we use multiset inclusion, written ⊆(cid:93), to check
that all facts in lfacts(l) occur suﬃciently often in S. For
persistent facts, we only check that each fact in pfacts(l)
occurs in S. To obtain the successor state, we remove the
consumed linear facts and add the generated facts.
Example 3
(Pairs). Consider two systems, where the
ﬁrst system outputs a pair of identical values
SA = { A : −−[]→OutSys((x, x)) }
and the second system may output two diﬀerent values
SB = { B : −−[]→OutSys((x, y)) } .
In SA, we have that
∅ −−−−−−−−→
A([{m/x}],[])
{OutSys((m, m))} .
In SB, we can either take a similar transition
∅ −−−−−−−−−−−→
B([{m/x,m/y}],[])
{OutSys((m, m))}
or alternatively
∅ −−−−−−−−−−−→
B([{m/x,n/y}],[])
{OutSys((m, n))} .
3. OBSERVATIONAL EQUIVALENCE
Observational equivalence expresses that two systems ap-
pear the same to the environment. This can be used to
specify security properties such as the inability of an at-
tacker to distinguish between two instances of a protocol. It
also has applications in system veriﬁcation, for example in
formalizing that the environment sees no diﬀerence between
interacting with an ideal system or a concrete implementa-
tion. To deﬁne observational equivalence, we must model
the system, the environment, and their interface.
In our model, depicted in Fig. 1, we model both the Sys-
tem Sys and the environment Env using multiset rewrite
rules. We require that the sets of facts and rules used by the
system and the environment are disjoint, and that their sig-
natures provide “communication facts” OutSys, InSys, OutEnv,
and InEnv as an interface for interaction. Their interaction
is described by the following interface rules.
OUT = {OU T : OutSys(M )−−[ O ]→InEnv(M )}
IN = {IN : OutEnv(M )−−[ I ]→InSys(M )}
IF = OUT ∪ IN
The OUT rule forwards the system’s output to the environ-
ment’s input and the IN rule forwards the environment’s
output to the system’s input.
In our interface rules, each input and output is labeled
using the action O, for system output, or I, for system
input. We model that the environment can only observe
these interactions, but not the internal state or transitions
within the system, which should be invisible to the environ-
ment. We reﬂect this in the recipes by deﬁning the recipe
of the InEnv(M ) fact as a conclusion of the OUT-rule diﬀer-
ently from other facts in the system or environment rules.
Namely, we deﬁne recipe(InEnv(M )) = OUT1([], x), where x
is a new variable. Similarly we deﬁne the recipe of the rule as
recipe(OUT) = OUT([], x). This replaces the recipe of the
OutSys(M ) fact, which is considered to be internal to the
system, with a variable. Note that this replacement makes
the book-keeping of recipes inside the system unnecessary;
however we keep them in our formalization as it simpliﬁes
the deﬁnition of the LTS as we therefore do not need to
distinguish between system and environment transitions.
Example 4
(Pairs revisited). Consider the two sys-
tems from Example 3 and the following environment, which
can check whether the two values in a pair are equal:
Env = { C : InEnv(x, x)−−[]→OutEnv(true) } .
Then in SA ∪ IF ∪ Env we have
∅ −−−−−−−−→
A([{m/x}],[])
O−−−−−−→
−−−−−−−−−−−→
OUT([],z)
{OutSys((m, m))}
{InEnv((m, m))}
{OutEnv(true)} .
In SB ∪ IF ∪ Env we have similar transitions:
{OutSys((m, m))}
C([],[OUT1([],z)])
∅ −−−−−−−−−−−→
B([{m/x,m/y}],[])