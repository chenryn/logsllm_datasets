53.3
53.6
11.8
1.7
Recycling
-
0.28
0.29
0.49
0.78
0.8
1.2
0.3
Speedup (×)
-
21
20.6
104
68
67
9.83
5.66
MACs have the advantage to defeat all the adversaries
and to keep the original parameters of Bloom ﬁlters. The
drawback is that the query time is increased compare to non-
cryptographic hash functions.
IX. RELATED WORK
Our work is closely related to algorithmic complexity
attacks which were ﬁrst introduced in [29] and formally de-
scribed by Crosby and Wallach in [2]. The goal of algorithmic
complexity attacks is to force an algorithm to run in the worst
case execution time instead of running in average time. For a
hash table, it means that the search operation runs in linear time
instead in constant time. The general impact of these attacks
was DoS [39](due to the signiﬁcant consumption of resources)
or the creation of covert channels [40]. Algorithmic complexity
attacks have successfully been mounted against many data
structures and algorithms: hash tables [2], [7], [30]–[32],
quick-sort [33], skip-lists [34], machine learning [35], regular
expressions [36], packet analyzers [37] and ﬁle-systems [38].
In most of these works, weak non-cryptographic hash func-
tions were responsible for the attacks. Our work contributes
to algorithmic complexity attacks in three aspects. First, it
extends algorithmic complexity attacks to a data structure
having false positives. Second, our pollution attacks and false
positive ﬂooding are simpler and relatively much easier to
mount compared to the pre-image attacks described by Crosby
and Wallach [2]. They choose a bucket identiﬁer, id in the
hash table and search for keys x1, . . . , xn which go to this
bucket, i.e., h(x1) = ··· = h(xn) = id (multiple pre-images).
Third, we provide different adversary models to analyze Bloom
ﬁlters. These models encompass previous attacks and hence
can be re-used to analyze other data structures. For instance,
the attacks on hash table and skip-lists combine a chosen-
insertion and query-only adversary. For attacks against quick-
sort and regular expressions, it is a chosen-insertion adversary.
The problem of saturation of Bloom ﬁlters is well-identiﬁed
in the software development community,
typically in the
situations where the number of insertions is not controlled.
We show the best strategy for an adversary to pollute and
saturate a ﬁlter in the chosen-insertion model and present
the entailed complexity. Similarly, the use of Bloom ﬁlters
is often criticized by the web crawler community due to the
intrinsic false-positives (see [19]). Our paper materializes those
criticisms and shows how fast they may arise.
Several countermeasures have been proposed to prevent
algorithmic complexity attacks. Crosby et al. [2] suggest using
universal hash functions [28]. They are used in the Bloom
ﬁlter included in the HERITRIX web spider [21]. Aumasson
et al. have applied several tools from cryptanalysis in [7] to
attack non-cryptographic hash functions. They also propose a
new function SIPHASH [7] as an efﬁcient and secure alterna-
tive. It is interesting to notice that Venkataraman et al. [41]
design probabilistic counting algorithms for fast detection of
superspreaders, and pay attention to the implementation: “We
use the OPENSSL implementation of the SHA-1 hash function,
picking a random key during each run, so that the adversary
cannot predict the hashing values.” However, they also advert
the usage of non-cryptographic hash functions: “For a real
implementation, one can use a more efﬁcient hash function.”
The authors in [42] have also used keyed hash functions to
compute packet statistics in the presence of an adversary.
An abounding literature is devoted on designing secure
Bloom ﬁlters [43] or private Bloom ﬁlters [44]. These re-
place the usual hash functions by group ciphers. Bellovin et
al. [44] use Pohlig-Hellman encryption for instance. These
cryptographic primitives resist pre-image and second pre-
image attacks at the cost of a higher computational time.
Kerschbaum [45] has used partially homomorphic encryption
to make private queries to a Bloom ﬁlter. Unfortunately, the
scheme is computationally intensive, and hence can not be
adapted to build high performance data structures.
Särelä et al. [46] study the security of multicast protocols
based on Bloom ﬁlters. In these protocols, the Bloom ﬁlter
represents the group entities. The authors propose a tech-
nique called BloomCasting, which enables controlled multicast
packet forwarding. In order to control the entities who may
send/receive packets to/from a group, the authors suggest to
use keyed hash functions (among other possible alternatives
such as a secret permutation) for Bloom ﬁlters.
Our idea of recycling bits of cryptographic digests is
inspired by Nyberg accumulator [47]. Independently from
the Bloom’s work, Nyberg has proposed a data structure to
solve the set-membership query problem. Without going into
the details, the solution relies on a “long hash function”:
large digests which are afterwards reduced to obtain the
accumulator. Our attacks against Bloom ﬁlters do not hold
against Nyberg accumulator because it would require ﬁnding
pre-images for full digests of cryptographic hash functions.
However, Nyberg’s accumulator is larger than Bloom ﬁlters
(by a factor log n) which makes it less attractive to developers.
We keep the idea of “long hash function” by recycling bits of
cryptographic digests in Bloom ﬁlters. To obtain long digests,
Nyberg suggests to combine cryptographic hash functions and
pseudo-random generators. We salt and recycle bits.
The recommendations of the NIST [8] on the usage of
cryptographic hash functions is a reference document for
truncated digests. However, developers are still ignoring the
threats of short truncated digests. RFC 6920 [48] also dedicates
a few paragraphs to the threats associated with truncated
digests, but it gives no speciﬁc consequences. Our work gives
a concrete example of these threats.
X. CONCLUSION
Lumetta et al. have explained in [49] how the power of two
choices can reduce Bloom ﬁlter’s false positive probability.
The technique has the advantage of keeping the ﬁlter size
unchanged at the cost of more hashing. Our work demonstrates
the power of evil choices in Bloom ﬁlters.
It is surprising that despite the far reaching attacks of
Crosby et al. [2] and the several ensuing booster shots [7], [31],
non-cryptographic hash functions are still present in sensitive
software solutions. If non-cryptographic hash functions are
prevalent, cryptographic ones are rarely used properly. After
our work, we wish that software developers would become
more cautious before truncating hashes or employing weak
hash functions.
There are three natural extensions to our work: variants
of Bloom ﬁlters, probabilistic counting algorithms [50] and
extensible-output hash functions. Variants of Bloom ﬁlters are
interesting to extend our adversary models. Many of these
variants either add new functionalities or improve on the
efﬁciency. Another important question related to these ﬁlters
is the existence of other solutions having a better worst-case
false positive probability than the classical one.
Probabilistic counting algorithms [50] are very popular in
computing statistics on large datasets with a reduced memory.
Hashing (and the truncation that comes along) is the core
mechanism. It will be interesting to analyze their existing
implementations in an adversarial setting.
The ideal hash function for Bloom ﬁlters should be an
efﬁcient and secure keyed hash function with extensible output.
Recently, the NIST has released the SHA- 3 standard [10].
It includes two extensible-output functions SHAKE-128 and
SHAKE-256. We look forward to knowing if they can be keyed
and how do they perform with Bloom ﬁlters.
ACKNOWLEDGMENT
This research was supported by the Labex PERSYVAL-LAB
(ANR–11-LABX-0025) and the project-team SCCyPhy. The
authors thank Pascal Lafourcade for reading a draft of the
paper and for providing his feedback.
REFERENCES
[1] B. H. Bloom, “Space/Time Trade-offs in Hash Coding with Allowable
Errors,” Commun. ACM, vol. 13, no. 7, pp. 422–426, 1970.
[2] S. A. Crosby and D. S. Wallach, “Denial of Service via Algorithmic
Complexity Attacks,” in USENIX Security Symposium. Washington,
USA: USENIX Association, December 2003, pp. 3–3.
[3] T. H. Cormen, C. E. Leiserson, R. L. Rivest, and C. Stein, Introduction
to Algorithms, Third Edition, 3rd ed. The MIT Press, 2009.
[4] A. J. Menezes, S. A. Vanstone, and P. C. V. Oorschot, Handbook of
Applied Cryptography, 1st ed. CRC Press, Inc., 1996.
[5] A. Appleby, “SMHasher - Test your hash functions.” 2010, https://code.
google.com/p/smhasher/.
[6] R. Jenkins, “A Hash Function for Hash Table Lookup,” 1996, http:
//www.burtleburtle.net/bob/hash/doobs.html.
J.-P. Aumasson and D. J. Bernstein, “SipHash: A Fast Short-Input PRF,”
in Progress in Cryptology - INDOCRYPT 2012, ser. Lecture Notes in
Computer Science 7668. Kolkata, India: Springer, December 2012,
pp. 489–508.
[7]
111111
[8] Q. Dang, “Recommendation for Applications Using Approved Hash
Algorithms,” National Institute of Standards & Technology, Tech. Rep.
SP 800-107 Revision 1, august 2012.
[9] National institute of standards and technology, “Secure Hash Standard
(SHS),” National Institute of Standards & Technology, Tech. Rep. FIPS
PUB 180-4, march 2012.
[10] ——, “SHA-3 Standard: Permutation-Based Hash and Extendable-
Output Functions,” National Institute of Standards & Technology, Tech.
Rep. FIPS PUB 202, may 2014, draft.
[11] A. Broder and M. Mitzenmacher, “Network Applications of Bloom
Filters: A Survey,” Internet Mathematics, vol. 1, no. 4, 2005.
[13]
[12] L. Fan, P. Cao, J. M. Almeida, and A. Z. Broder, “Summary cache:
a scalable wide-area web cache sharing protocol,” IEEE/ACM Trans.
Netw., vol. 8, no. 3, pp. 281–293, 2000.
J. W. Byers, J. Considine, M. Mitzenmacher, and S. Rost, “Informed
content delivery across adaptive overlay networks,” in Conference on
Applications, Technologies, Architectures, and Protocols for Computer
Communication - ACM SIGCOMM 2002. Pittsburgh, PA, USA: ACM,
August 2002, pp. 47–60.
[14] E.-J. Goh, “Secure Indexes,” Cryptology ePrint Archive, Report
2003/216, 2003, http://eprint.iacr.org/2003/216/.
[15] C. Dong, L. Chen, and Z. Wen, “When private set intersection meets big
data: an efﬁcient and scalable protocol,” in ACM SIGSAC conference
on Computer & communications security - CCS ’13. Berlin, Germany:
ACM, November 2013.
[16] P. Bose, H. Guo, E. Kranakis, A. Maheshwari, P. Morin, J. Morrison,
M. H. M. Smid, and Y. Tang, “On the false-positive rate of Bloom
ﬁlters,” Inf. Process. Lett., vol. 108, no. 4, pp. 210–213, 2008.
[17] D. Guo, Y. Liu, X. Li, and P. Yang, “False negative problem of counting
bloom ﬁlter,” Knowledge and Data Engineering, IEEE Transactions on,
vol. 22, no. 5, pp. 651–664, May 2010.
“Giga Alert,” http://www.gigaalert.com/products.php.
[18]
[19] C. Olston and M. Najork, “Web Crawling,” Foundations and Trends in
Information Retrieval, vol. 4, no. 3, pp. 175–246, 2010.
“Scrapy,” http://scrapy.org/.
“Heritrix,” https://webarchive.jira.com/wiki/display/Heritrix/Heritrix.
[20]
[21]
[22] N. Nikiforakis, F. Maggi, G. Stringhini, M. Z. Raﬁque, W. Joosen,
C. Kruegel, F. Piessens, G. Vigna, and S. Zanero, “Stranger danger:
exploring the ecosystem of ad-based URL shortening services,” in
International World Wide Web Conference, WWW ’14. Seoul, Republic
of Korea: ACM, April 2014, pp. 51–62.
[23] N. Gupta, A. Aggarwal, and P. Kumaraguru, “bit.ly/can-do-better,” IIT
Kanpur, February 2014, poster presented at Security Privacy Sympo-
sium - SPS 2014.
[24] P. S. Almeida, C. Baquero, N. M. Preguiça, and D. Hutchison, “Scalable
Bloom Filters,” Inf. Process. Lett., vol. 101, no. 6, pp. 255–261, 2007.
[25] A. Kirsch and M. Mitzenmacher, “Less hashing, same performance:
Building a better Bloom ﬁlter,” Random Struct. Algorithms, vol. 33,
no. 2, pp. 187–218, 2008.
[26] D. Wessels, Squid: The Deﬁnitive Guide . O’Reilly Media, 2004.
[27] A. Rousskov and D. Wessels, “Cache digests,” in Computer Networks
and ISDN Systems, 1998, pp. 22–23.
[28] L. Carter and M. N. Wegman, “Universal Classes of Hash Functions
(Extended Abstract),” in ACM Symposium on Theory of Computing -
STOC. Boulder, CO, USA: ACM, May 1977, pp. 106–112.
[29] A. Peslyak, “Designing and Attacking Port Scan Detection Tools,”
Phrack Magazine, vol. 8, no. 453, p. 13, 1998, http://phrack.org/issues/
53/13.html#article.
[30] N. Bar-Yosef and A. Wool, “Remote Algorithmic Complexity Attacks
against Randomized Hash Tables,” in International Conference on
Security and Cryptography - SECRYPT 2007.
Barcelona, Spain:
Springer Berlin Heidelberg, July 2007, pp. 117–124.
[31] A. Klink and J. Wälde, “Multiple implementations denial-of-service
via hash algorithm collision,” Open Source Computer Security Incident
Response Team, Tech. Rep. oCERT advisory 2011-003, march 2011.
[32] U. Ben-Porat, A. Bremler-Barr, H. Levy, and B. Plattner, “On the
Vulnerability of Hardware Hash Tables to Sophisticated Attacks,” in
112112
Networking (1), ser. Lecture Notes in Computer Science, vol. 7289.
Springer, 2012, pp. 135–148.
[33] M. D. McIlroy, “A killer adversary for quicksort,” Softw. Pract. Exper.,
vol. 29, no. 4, pp. 341–344, Apr. 1999.
[34] D. Bethea and M. K. Reiter, “Data Structures with Unpredictable
Timing,” in European Symposium on Research in Computer Security
- ESORICS 2009, ser. Lecture Notes in Computer Science, vol. 5789.
Saint-Malo, France: Springer, September 2009, pp. 456–471.
[35] L. Huang, A. D. Joseph, B. Nelson, B. I. P. Rubinstein, and J. D.
Tygar, “Adversarial machine learning,” in ACM Workshop on Security
and Artiﬁcial Intelligence, AISec 2011, , 21, 2011. Chicago, IL, USA:
ACM, October 2011, pp. 43–58.
[36] S. A. Crosby, “Denial of Service through Regular Expressions,” in
USENIX Security Symposium: Work-In-Progress Reports. Washington,
USA: USENIX Association, December 2003, p. 1.
[37] A. Papadogiannakis, M. Polychronakis, and E. P. Markatos, “Tolerating
Overload Attacks Against Packet Capturing Systems,” in USENIX An-
nual Technical Conference. Boston, MA, USA: USENIX Association,
June 2012, pp. 197–202.
[38] X. Cai, Y. Gui, and R. Johnson, “Exploiting Unix File-System Races
via Algorithmic Complexity Attacks,” in IEEE Symposium on Security
and Privacy - S&P 2009. Oakland, California, USA: IEEE Computer
Society, 2009, pp. 27–41.
J. Mirkovic and P. L. Reiher, “A taxonomy of DDoS attack and DDoS
defense mechanisms,” Computer Communication Review, vol. 34, no. 2,
pp. 39–53, 2004.
[39]
[40] X. Sun, L. Cheng, and Y. Zhang, “A Covert Timing Channel via
Algorithmic Complexity Attacks: Design and Analysis,” in IEEE In-
ternational Conference on Communications, ICC 2011.
IEEE, June
2011, pp. 1–5.
[41] S. Venkataraman, D. X. Song, P. B. Gibbons, and A. Blum, “New
streaming algorithms for fast detection of superspreaders,” in Network
and Distributed System Security Symposium, NDSS 2005. San Diego,
CA, USA: The Internet Society, 2005.
[42] S. Goldberg, D. Xiao, E. Tromer, B. Barak, and J. Rexford, “Path-
quality monitoring in the presence of adversaries,” in International
Conference on Measurement and Modeling of Computer Systems,
SIGMETRICS 2008. Annapolis, MD, USA: ACM, June 2008, pp.
193–204.
[43] R. Nojima and Y. Kadobayashi, “Cryptographically Secure Bloom-
Filters,” Transactions on Data Privacy, vol. 2, no. 2, pp. 131–139, 2009.
[44] S. Bellovin and W. R. Cheswick, “Privacy-Enhanced Searches Using
Encrypted Bloom Filters,” in DIMACS/PORTIA Workshop on Privacy-
Preserving Data Mining.
Piscataway, NJ, USA: DIMACS/PORTIA,
March 2004, pp. 274–285.
[45] F. Kerschbaum, “Public-Key Encrypted Bloom Filters with Applications
to Supply Chain Integrity,” in Data and Applications Security and
Privacy XXV - 25th Annual IFIP WG 11.3 Conference, DBSec 2011,
ser. Lecture Notes in Computer Science 6818. Richmond, VA, USA:
Springer, July 2011, pp. 60–75.
[46] M. Särelä, C. E. Rothenberg, A. Zahemszky, P. Nikander, and J. Ott,
“BloomCasting: Security in Bloom Filter Based Multicast,” in Nordic
Conference on Secure IT Systems, NordSec 2010, ser. Lecture Notes
in Computer Science, vol. 7127. Espoo, Finland: Springer, 2010, pp.
1–16.
[47] K. Nyberg, “Fast Accumulated Hashing,” in Fast Software Encryption
- FSE 1996, ser. Lecture Notes in Computer Science, vol. 1039.
Cambridge, UK: Springer, February 1996.
[48] S. Farrell, D. Kutscher, C. Dannewitz, B. Ohlman, A. Keranen, and
P. Hallam-Baker, “Naming Things with Hashes,” Internet Requests for
Comments, RFC Editor, RFC 6920, April 2013, http://tools.ietf.org/
html/rfc6920.
[49] S. S. Lumetta and M. Mitzenmacher, “Using the Power of Two Choices
to Improve Bloom Filters,” Internet Mathematics, vol. 4, no. 1, pp. 17–
33, 2007.
[50] P. Flajolet, “Theory and practice of probabilistic counting algorithms
(abstract of invited talk),” in Workshop on Analytic Algorithmics and
Combinatorics - ANALC 2004.
New Orleans, LA, USA: SIAM,
January 2004, p. 152.