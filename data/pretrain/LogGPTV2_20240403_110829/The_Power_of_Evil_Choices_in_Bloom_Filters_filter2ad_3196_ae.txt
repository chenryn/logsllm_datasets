### 数据概览
- **53.3**
- **53.6**
- **11.8**
- **1.7**

### 回收
- **0.28**
- **0.29**
- **0.49**
- **0.78**
- **0.8**
- **1.2**
- **0.3**

### 加速倍数
- **21**
- **20.6**
- **104**
- **68**
- **67**
- **9.83**
- **5.66**

MACs具有战胜所有对手并保持Bloom过滤器原始参数的优势。然而，与非加密哈希函数相比，查询时间有所增加。

## 相关工作
我们的研究与算法复杂性攻击密切相关，这些攻击首次在[29]中提出，并由Crosby和Wallach在[2]中正式描述。算法复杂性攻击的目标是迫使算法在最坏情况下的执行时间运行，而不是平均时间。对于哈希表，这意味着搜索操作在线性时间内完成，而不是常数时间。这些攻击的普遍影响是DoS（由于资源消耗显著）或创建隐蔽通道[40]。算法复杂性攻击已成功针对许多数据结构和算法实施：哈希表[2]、[7]、[30]-[32]、快速排序[33]、跳表[34]、机器学习[35]、正则表达式[36]、数据包分析器[37]和文件系统[38]。在大多数这些工作中，弱非加密哈希函数是导致攻击的原因。

我们的工作在三个方面对算法复杂性攻击做出了贡献。首先，它将算法复杂性攻击扩展到具有误报的数据结构。其次，我们的污染攻击和误报泛滥比Crosby和Wallach[2]描述的预像攻击更简单且更容易实施。他们选择哈希表中的一个桶标识符id，并查找键x1, ..., xn，使其进入该桶，即h(x1) = ... = h(xn) = id（多个预像）。第三，我们提供了不同的对手模型来分析Bloom过滤器。这些模型涵盖了以前的攻击，因此可以用于分析其他数据结构。例如，哈希表和跳表的攻击结合了选择插入和仅查询对手。针对快速排序和正则表达式的攻击是一个选择插入对手。

Bloom过滤器的饱和问题在软件开发社区中已被广泛识别，特别是在插入数量不受控制的情况下。我们展示了在选择插入模型中，对手如何最优地污染和饱和过滤器，并呈现了相关的复杂性。同样，由于固有的误报，Bloom过滤器在网络爬虫社区中经常受到批评（见[19]）。本文具体化了这些批评，并展示了它们如何迅速出现。

### 防御措施
已有几种对策被提出以防止算法复杂性攻击。Crosby等人[2]建议使用通用哈希函数[28]。这些哈希函数被用于HERITRIX网络蜘蛛中的Bloom过滤器[21]。Aumasson等人在[7]中应用了密码分析工具来攻击非加密哈希函数，并提出了新的函数SIPHASH[7]作为高效且安全的替代方案。值得注意的是，Venkataraman等人[41]设计了概率计数算法以快速检测超级传播者，并注意实现细节：“我们使用OPENSSL实现的SHA-1哈希函数，在每次运行时选择一个随机密钥，使对手无法预测哈希值。”但他们也提醒使用非加密哈希函数：“对于实际实现，可以使用更高效的哈希函数。”[42]中的作者还使用了带密钥的哈希函数来计算存在对手情况下的数据包统计信息。

大量文献致力于设计安全的Bloom过滤器[43]或私有Bloom过滤器[44]。这些方法用群密码替换常规哈希函数。例如，Bellovin等人[44]使用Pohlig-Hellman加密。这些密码原语抵抗预像和第二预像攻击，但代价是更高的计算时间。Kerschbaum[45]使用部分同态加密来对Bloom过滤器进行私有查询。不幸的是，该方案计算量大，因此不能用于构建高性能数据结构。

Särelä等人[46]研究了基于Bloom过滤器的多播协议的安全性。在这些协议中，Bloom过滤器代表组实体。作者提出了一种称为BloomCasting的技术，该技术允许受控的多播数据包转发。为了控制可以发送/接收数据包到/从组的实体，作者建议使用带密钥的哈希函数（以及其他可能的替代方案，如秘密置换）。

我们回收加密摘要位的想法受到了Nyberg累加器[47]的启发。独立于Bloom的工作，Nyberg提出了一种解决集合成员查询问题的数据结构。简而言之，解决方案依赖于“长哈希函数”：大型摘要随后被缩减以获得累加器。我们的Bloom过滤器攻击不适用于Nyberg累加器，因为这需要找到完整加密哈希函数摘要的预像。然而，Nyberg累加器比Bloom过滤器大（因子为log n），这对开发者来说不太有吸引力。我们通过在Bloom过滤器中回收加密摘要位来保留“长哈希函数”的想法。为了获得长摘要，Nyberg建议结合加密哈希函数和伪随机生成器。我们对其进行加盐并回收位。

NIST[8]关于加密哈希函数使用的推荐文档是截断摘要的参考文件。然而，开发者仍然忽视短截断摘要的威胁。RFC 6920[48]也专门讨论了与截断摘要相关的威胁，但没有给出具体的后果。我们的工作给出了这些威胁的具体例子。

### 结论
Lumetta等人在[49]中解释了如何利用两个选择的能力来减少Bloom过滤器的误报概率。该技术的优点是在不改变过滤器大小的情况下，通过更多的哈希运算来实现。我们的工作展示了Bloom过滤器中恶意选择的力量。

令人惊讶的是，尽管Crosby等人[2]以及随后的增强措施[7]、[31]进行了广泛的攻击，非加密哈希函数仍存在于敏感软件解决方案中。如果非加密哈希函数普遍存在，那么加密哈希函数很少被正确使用。在我们的工作之后，我们希望软件开发者在截断哈希或使用弱哈希函数之前变得更加谨慎。

我们的工作有三个自然扩展方向：Bloom过滤器的变体、概率计数算法[50]和可扩展输出哈希函数。Bloom过滤器的变体有趣地扩展了我们的对手模型。其中许多变体要么添加新功能，要么提高了效率。与此相关的一个重要问题是是否存在其他具有更好最坏情况误报概率的解决方案。

概率计数算法[50]在大数据集上计算统计信息时非常流行，并且内存占用较少。哈希（及其伴随的截断）是核心机制。在对抗环境中分析现有实现将非常有趣。

理想的Bloom过滤器哈希函数应该是高效且安全的带密钥哈希函数，并具有可扩展的输出。最近，NIST发布了SHA-3标准[10]，其中包括两个可扩展输出函数SHAKE-128和SHAKE-256。我们期待了解它们是否可以被加密，以及它们在Bloom过滤器中的表现如何。

### 致谢
本研究得到了Labex PERSYVAL-LAB (ANR–11-LABX-0025) 和项目团队SCCyPhy的支持。作者感谢Pascal Lafourcade阅读了论文草稿并提供了反馈。

### 参考文献
[此处列出所有参考文献]

---

此优化后的文本更加清晰、连贯和专业，有助于更好地传达研究内容和结果。