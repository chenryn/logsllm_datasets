Dan Hubbard
VP Security  Research
Perpetual Beta = Live Testing = Trouble
Airline Terminals using Active Script
Start : Middle : End
Wait, the Web has version numbers?
Web Two Dot UH-OH or Exploit 2.0
An introduction to HoneyJax
– Definitions
– Reasons for deploying them
– Types: Passive, Active HoneyJax, Passive Aggressive
– Reporting data from Accounts
– Disclosure for web site vulnerabilities
– Legal Aspects / Grab Bag
Conclusion
One of these things is not like the other
Its a bird, is it a plane, no its Web 2.0 : 80% top 20 Web sites
have Web 2.0 “philosophies”
(src: O’REILLY)
XML HTTP Request 
When Microsoft created XMLHttpRequest in Internet 
Explorer 5, which let browser-side JavaScript communicate 
with the web server in the background without requiring the 
browser to display a new web page. That made it possible to 
develop more fluid and responsive web applications. Mozilla 
soon implemented XMLHttpRequest in its browsers, as did 
Apple (in the Safari browser) and Opera. 
Several dozen *very* loosely defined standards mashed 
together
At the heart of it all are JavaScript and XML
Web “Two Dot Uh-Oh”
Losing control of your destiny: User Created Content
Who do you trust: Social Networks
Unattended Installs and Code Injection: R.S.S 
Mushy Peas: Mash-ups
ANY ANY PORT 80: Security is often the last ones to know
But I have a firewall: Its about the information not the 
network
If I told you to jump of a bridge…: Its just sooooo easy and 
being web 2.0 is cool
Threats  User-created content
Property owner gives / leases space to user
400 Million + pages change dramatically 
close real-time
Content stripping done but very difficult to 
enforce (JavaScript obfuscation deluxe)
Easy to test for vulnerabilities, little disclosure:
Can you say “Web borne Worms”
Allow dynamic/graphic content (jscript, qt, mov)
Trust within user-networks
Used a many-to-many communication platform
User-created Content  Hidden IFRAME 
w/WMF, CSS auth page phish, Wikipedia 
Trojan
Social Networks (1 account : 70M views ~2 M 
“friends”)
Interlinking of hundreds of millions of users
Communication platform not just content 
“Email is so yr 2000”
More contacts = better site / success
One “friend” can infect millions through their network
One account compromise can be used to gain user trust
Social Networks  “My network is bigger 
than yours”
Its not just about entertainment. Business colleagues, 
networking with associates, recruiting, etc., gaining 
popularity
SideBar: Un-attended installations (can they 
happen?)
RSS: Meta-Feeds 
RSS: Pulling data every X seconds
Introduction to HoneyJax
HoneyPots  HoneyClients  HoneyJax
HoneyPots: 
Emulate OS and Applications behavior
HoneyClients: 
Emulate client applications behavior
HoneyJax: 
Emulate user accounts, profiles, 
and web social networks . 
Can also emulate user behavior
Reasons for deploying HoneyJax
95% of all BLOG comments are SPAM (src: Akismet)
SPAM -> P0RN -> Phishing -> Malicious Code
One new weapon in arsenal to help research Web 2.0 threats
The threat playing field is changing and research needs to 
evolve with it
Can be used by web property-owners also
Assist in:
• Tracking and trending attacks, attackers, predators
• Escalation to abuse or security department of property 
owners
• Track common techniques
• Collect samples of binary code for detection / protection
• Collect URL’s and script code for detection / protection
• Monitor outbreaks (yes more Web worms are coming)
Types of HoneyJax
Passive HoneyJax:
Accounts in web 2.0 space that are not 
luring users to add them to 
their network in any way.
Active HoneyJax:
Accounts and BOT’s in web 2.0 space 
that are designed to join networks 
actively and solicit users to join theirs
and reply to requests.
Passive Aggressive HoneyJax:
Accounts that are designed to lure users to visit them through 
their characteristics. Eg: p0rn, baby boomers looking for friends, 
music band, common interest groups, popular merchandise, 
contests
Passive HoneyJax : Luring a Fraudster
Passive HoneyJax : Spam first !
Passive Aggressive HoneyJax : Luring $$$$
Passive Aggressive HoneyJax : My Friends
Active HoneyJax : 4 Types 
Open Source
Commercial
Proof-of-Concept (i.e. copy-code)
Do your own
Active HoneyJax : Open Source
Active HoneyJax : Commercial
Active HoneyJax : POC
Active HoneyJax : DYO 
Reporting and Forensics
HoneyJax accounts should be setup to send email or SMS 
when new attempts to access the account are added
Spider/Bot should connect to HoneyJax accounts and 
fingerprint content looking for changes. Make sure that 
dynamic content changes by the host are accounted for. All 
changes should be kept and stored
Data should be mined for URL’s that are dropped
Content should be analyzed from data mined
Binaries should be sandboxed, etc…
JavaScript should be run through decoder and tested 
HTML code should be tested for candidates to send to 
sandbox
Report information to vendor, web property owner, etc..
The LAW and the T&C’s
As with any honey technologies check with your legal team 
before you deploy these
Check Acceptable Use Policies / Terms and Conditions
Be weary of “commercial” software that allows you to 
manage profiles, add friends, etc..
Disclosure of Website Vulnerabilities : Its not 
just about the browser !
Website Security has to be taken more seriously !
Massive amounts of problems with sites not being patched, 
configured incorrectly, allowing bad data, conduit for others
Website security or lack thereof is a HUGE problem
Cross site scripting, open redirectors, allowing binary file posts, 
not scanning upload files, poor script filtering are all big problems
PHP BB, SQL, old Web servers, old OS all too common
Problem with tracking?
– No version numbers : how about time-stamp + example + hash
– No reporting : security departments must field reports on 
websites and do more testing, re-testing
– Change controls: force security into the process
– No public credit: MS and Google started doing this, others 
should start
– Property owners: get to know who is in your backyard
– How about a web owner area on OSVDB?
Grab Bag
What if there is a reference in one of my HoneyJax but the 
site is down?
– A: Is there a reputation for it?
• Query search engines for link references and cached 
pages
• What is the age of the domain 
• History the site hosted malcode/phishing in the past
• Who registered it 
• Where is the IP located
• Who are its neighbors
My boss told me that I need to make our website “Web 2.0”, 
should I?
– A: Get the security team involved. Make sure they buy-off 
on all design, implementation, and have a reproducible 
security testing process, mitigation techniques, and 
incident reporting and handling
Conclusion
Don’t run with Scissors
– Before you deploy Web 2.0 be educated on the risks
If you must have user-created content…
– Filter, Filter, Filter, Pen-test, Pen-Test, report, update
If you are a security researcher..
– Advanced JavaScript may not be as cool as ASM but its 
powerful. Live it, learn it, you don’t have to love it
The good, the bad, and the ugly
– There is a lot of good, productive, useful Web 2.0 
functionalities. But with functionality comes security risk. 
Security standards, policies, and practices must balance the 
scales with functionality. Its not too late !
dhubbard /AT/ websense /DOT/ com