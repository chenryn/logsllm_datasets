to model how packets are forwarded to n. We refer to this
Figure 1: Link Flooding Attacks (LFAs) work by routing
many legitimate low-volume ﬂows over the same set of
physical links in order to cause congestion. LFAs assume
that the attacker can discover the network topology, usu-
ally using traceroute-like tracing.
on arbitrary IP Time-to-Live (TTL) values; (ii) change
the source and destination addresses of packets (e.g.,
UDP packets for traceroute) depending on the orig-
inal destination address and the TTL; and (iii) restore the
original source and destination addresses when replies
(e.g., ICMP packets) to modiﬁed packets arrive. Our im-
plementation uses the P4 programming language [14],
which fulﬁlls the above criteria. Yet, NetHide could also
be implemented on top of existing router ﬁrmware.
2.2 Attacker model
We assume an attacker who controls a set of hosts (e.g.,
a botnet) that can inject trafﬁc in the network. The at-
tacker’s goal is to perform a Link Flooding Attack (LFA)
such as Coremelt [38] or Crossﬁre [26]. The objective
of these attacks is to isolate a network segment by con-
gesting one or more links. The attacker aims to congest
links by creating low-volume ﬂows from many differ-
ent sources (bots) to many destinations (public servers
or other bots) such that all these ﬂows cross the targeted
links (illustrated in Fig. 1). An attacker’s budget limits
the number of ﬂows she can run and we quantify the at-
tacker’s strength based on her budget. Because the addi-
tional trafﬁc is low-volume, it is hard to separate it from
legitimate (also low-volume) trafﬁc. This makes detect-
ing and mitigating LFA attacks a hard problem [41].
To mount an efﬁcient and stealthy LFA, the attacker
must know enough (source, destination) pairs that com-
municate via the targeted link(s). Otherwise, she would
have to create so many ﬂows that she no longer re-
mains efﬁcient. Similarly to [26, 38], we assume the
attacker has no prior knowledge of the network topol-
ogy. However, the attacker can learn the network topol-
ogy using traceroute-like tracing techniques [17].
traceroute works by sending a series of packets
(probes) to the destination with increasing TTL values.
In response to these probes, each router along the path to
the destination sends an ICMP time exceeded message.
More speciﬁcally, traceroute leverages the fact that
USENIX Association
27th USENIX Security Symposium    695
BotnetPublic serverstree as a forwarding tree. For simplicity, we write l ∈ Tn
to denote that the link l is contained in the forwarding
tree Tn, i.e., Tn = (N,Ln) with l ∈ Ln. We use T to denote
the set of all forwarding trees.
A ﬂow (s,d) ∈ F is a pair of a source node s and des-
tination node d. Note that the budget of the strongest at-
tacker is given by the total number |F| of possible ﬂows.
We use Ts→d to refer to the path from source node s to
destination node d according to the forwarding tree Td.
In the style of [26], we deﬁne the ﬂow density fd for a
link l ∈ L as the number of ﬂows that are routed via this
link (in any direction). The maximum ﬂow density that
a link can handle without congestion is denoted by the
link’s capacity c. A topology (N,L,T ) is secure if the
ﬂow density for any link in the topology does not exceed
its capacity, i.e., ∀l ∈ L : fd(T,l) ≤ c(l). Note that no at-
tacker (with any budget) can attack a secure topology as
all links have enough capacity to handle the total number
of ﬂows from all the (source, destination) pairs in F.
2.4 Problem statement
We address the following network obfuscation problem:
Given a physical topology P, the goal is to compute an
obfuscated (virtual) topology V such that V is secure and
is as similar as possible to P. In other words, the goal
is to deceive the attacker with a virtual topology V . For
the similarity between the physical topology P and the
obfuscated topology V , we refer to §3 where we present
metrics which represent the accuracy of paths reported
by traceroute and the utility of link failures in P be-
ing closely represented in V .
We remark on a few important points. First, if P is se-
cure, then the obfuscation problem should return P since
we require that V is as similar as possible to P. Second,
for any network and any attacker, the problem has a triv-
ial solution since we can always come up with a network
that has an exclusive routing path for each (source, desti-
nation) pair. However, for non-trivial notions of similar-
ity, it is challenging to discover an obfuscated network V
that similar to P.
3 NetHide
We now illustrate how NetHide can compute a secure and
yet usable (i.e., “debuggable”) obfuscated topology on a
simple example depicted in Fig. 3. Speciﬁcally, we con-
sider the task of obfuscating a network with 6 routers:
A, . . . ,F in which the core link (C,D) acts as bottleneck
and is therefore a potential target for an LFA.
Inputs NetHide takes four inputs: (i) the physical net-
work topology graph; (ii) a speciﬁcation of the forward-
ing behavior (a forwarding tree for each destination ac-
cording to the physical topology and incorporating po-
tential link weights); (iii) the capacity c of each link (how
many ﬂows can cross each link before congesting it);
along with (iv) the set of attack ﬂows F to protect against.
If the position of the attacker(s) is not known (the de-
fault), we deﬁne F to be the set of all possible ﬂows be-
tween all (source,destination) pairs.
Given these inputs, NetHide produces an obfuscated
virtual topology V which: (i) prevents the attacker(s)
from determining a set of ﬂows to congest any link; while
(ii) still allowing non-malicious users to perform network
diagnosis. A key insight behind NetHide is to formulate
this task as a multi-objective optimization problem that
allows for a ﬂexible tradeoff between security (encoded
as hard constraints) and usability (encoded as soft con-
straints) of the virtual topology. The key challenge here
is that the number of obfuscated topologies grows expo-
nentially with the network size, making simple exhaus-
tive solutions unusable. To scale, NetHide only considers
a subset of candidate solutions amongst which it selects
a usable one. Perhaps surprisingly, we show that this pro-
cess leads to desirable solutions.
Pre-selecting a set of secure candidate topologies
NetHide ﬁrst computes a random set of obfuscated
topologies. In addition to enabling NetHide to scale, this
random selection also acts as a secret which makes it sig-
niﬁcantly harder to invert the obfuscation algorithm.
NetHide obfuscates network topologies along two di-
mensions: (i) it modiﬁes the topology graph (i.e., it adds
or removes links); and (ii) it modiﬁes the forwarding be-
havior (i.e., how ﬂows are routed along the graph). For
instance, in Fig. 3, the two shown candidate solutions
V1 and V2 both contain two virtual links used to “route”
ﬂows from A to E and from B to F.
Selecting a usable obfuscated topology While there ex-
ist many secure candidate topologies, they differ in terms
of usability, i.e., their perceived usefulness for benign
users. In NetHide, we capture the usability of a virtual
topology in terms of its accuracy and utility.
The accuracy measures the logical similarity of the
paths reported when using traceroute against the
original and against the obfuscated topology. Intuitively,
a virtual topology with high accuracy enables network
operators to diagnose routing issues such as sub-optimal
routing. Conversely, tracing highly inaccurate topologies
is likely to report bogus information such as trafﬁc jump-
ing between geographically distant points for no appar-
ent reason. As illustration, V2 is more accurate than V1 in
Fig. 3 as the reported paths have more links and routers
in common with the physical topology.
The utility metric measures the physical similarity be-
tween the paths actually taken by the tracing packets in
the physical and the virtual topology. Intuitively, utility
696    27th USENIX Security Symposium
USENIX Association
Figure 3: NetHide operates in two steps: (i) computing a secure and usable virtual topology; and (ii) deploying the
obfuscated topology in the physical network.
captures how well events such as link failures or conges-
tion in the physical topology are observable in the virtual
topology. For instance, we illustrate that V2 has a higher
utility than V1 in Fig. 3 by considering the failure of the
link (D,E). Indeed, a non-malicious user would observe
the failure of (D,E) (which is not obfuscated) when trac-
ing V2 while it would observe the failure of link (A,E)
instead of (D,E) when tracing V1.
Given V1, V2 and the fact that V2 has higher accuracy
and utility, NetHide deploys V2.
Deploying the obfuscated topology NetHide obfuscates
the topology at runtime by modifying tracing packets
(i.e., IP packets whose TTL expires somewhere in the
network). NetHide intercepts and processes such packets
without impact on the network performance, directly in
the data plane, by leveraging programmable network de-
vices. Speciﬁcally, NetHide intercepts and possibly alters
tracing packets at the edge of the network before send-
ing them to the pretended destination in the physical net-
work. That way, NetHide ensures that tracing packets tra-
verse the corresponding physical links, and preserves the
utility of traceroute-like tools. Observe that any al-
teration of tracing packets is reverted before they leave
the network, which makes NetHide transparent. In con-
trast, simpler approaches which answer to tracing pack-
ets at the network edge or from a central controller (e.g.,
[28, 39]) render network debugging tools unusable.
Consider again Fig. 3 (right). If router A receives a
packet towards E with TTL=2, this packet needs to ex-
pire at router D according to the virtual topology. Since
the link between A and D does not exist physically, the
packet needs to be sent to D via C, and it would thus ex-
pire at C. To prevent this and to ensure that the packet
expires at D, NetHide increases the TTL by 1. Observe
that, in addition to ensure the utility (see above), making
the intended router answer to the probe also ensures that
the measured round trip times are realistic (cf. §5).
4 Generating secure topologies
In this section, we ﬁrst explain how to phrase the task of
obfuscating a network topology as an optimization prob-
lem. We then present our implementation which consists
of roughly 2000 lines of Python code and uses the Gurobi
ILP solver [9].
4.1 Optimization problem
Given a topology P = (N,L,T ), a set of ﬂows F, and
capacities c, the network obfuscation problem is to gen-
erate a virtual topology V = (N(cid:48),L(cid:48),T(cid:48)) such that: (i) V
is secure; and (ii) the accuracy and utility metrics are
jointly maximized; we deﬁne these metrics shortly.
NetHide generates V by modifying P in three ways:
(i) NetHide can add virtual nodes to the topology graph
that do not exist in P; (ii) NetHide adds virtual links to
connect physical or virtual nodes in V ; and (iii) NetHide
can modify the forwarding trees for all nodes in V .
We show the constraints that encode the security and
the objective function that captures the closeness in terms
of accuracy and utility in Fig. 4 and explain them below.
Security constraints The main constraint is the security
(C1) imposed on V . This being a hard constraint (as op-
posed to be part of the objective function) means that if
USENIX Association
27th USENIX Security Symposium    697
InputTopologyobfuscation(§4)PhysicaltopologyABEFCDTopologydeployment(§5)usingprogrammablenetworkdevicesVirtualtopologyABEFCDdstTTLactionsE2TTL=3, dst=DRandom sample ofcandidatesolutionsSelect topologywithmaximal accuracyandutility(V2)bottlenecklink (C,D)Accuracycompare(,)compare(,) = 2 common= 2 commonUtilityfor failure of link (D,E)________observe failure (A,E)observe no failurePOAccuracycompare(,)compare(,)= 3 common= 3 commonUtilityfor failure of link (D,E)________observe failure (D,E)observe no failurePP………dstTTLactionsA3TTL=4………dstTTLactionsF3TTL=4………dstTTLactionsB3TTL=4………c(C,D) < fd(C,D)▪Physical topology▪Routing behavior▪Set of flows▪Capacity of each linkInput:virtuallinkV1V2(cid:0)wacc · acc ( f ,P,V ) + wutil · util ( f ,P,V )(cid:1)
Objective function
V ∑
max
f∈F
where wacc ∈ [0,1], wutil ∈ [0,1], wacc + wutil = 1
∀l ∈ L(cid:48) : fd(V,l) ≤ c(l)
Hard Constraints
(Security)
(Complete) n ∈ N ⇒ n ∈ N(cid:48)
(Reach)
∀n ∈ N(cid:48) : |{Tn|Tn ∈ T(cid:48)}| = 1
∀T ∈ T(cid:48) : ∀l ∈ T : l ∈ L(cid:48)
(n,n(cid:48)) ∈ L(cid:48) ⇒ {n,n(cid:48)} ∈ N(cid:48)
(C1)
(C2)
(C3)
(C4)
(C5)
Figure 4: NetHide optimization problem. NetHide ﬁnds a
virtual topology that is secure and has maximum accu-
racy compared with the physical topology.
NetHide ﬁnds a virtual topology V , then V is secure with
respect to the attacker model and the capacities.
To ensure that the virtual topology V is valid, NetHide
incorporates additional constraints capturing that: (C2)
all physical nodes in N are also contained in the virtual
topology with nodes N(cid:48); (C3) there is exactly one vir-
tual forwarding tree for each node; and (C4-5) links and
nodes in the virtual forwarding trees are contained in N(cid:48).
Objective function The objective of NetHide is to ﬁnd a
virtual topology that maximizes the overall accuracy (cf.
§4.2) and utility (cf. §4.3). As shown in Fig. 4, we deﬁne
the overall accuracy and utility as a weighted sum of the
accuracy and utility values of all ﬂows in the network.
4.2 Accuracy metric
The accuracy metric is a function that maps two paths
for a given ﬂow to a value v ∈ [0,1]. In our case, this
value captures the similarity between a path Ts→d in P
for a given ﬂow (s,d) and the (virtual) path T(cid:48)
s→d for the
same ﬂow (s,d) in V . Formally, given a ﬂow (s,d), the
accuracy is deﬁned as:
|Ts→d| +(cid:12)(cid:12)T(cid:48)
acc ((s,d),P,V ) = 1− LD(Ts→d,T(cid:48)
s→d)
s→d
(cid:12)(cid:12)
Where LD(Ts→d,T(cid:48)
and |Ts→d| denotes the length of the path from s to d.
s→d) is Levenshtein distance [32]