replaced by x.
Isabelle distinguishes between object level (−→) and meta-
level (=⇒) implication, and similarly for universal quantiﬁ-
cation, but this distinction is unimportant for our purposes.
The notation [[A1; . . . ; An]] =⇒ A represents an implication
with assumptions A1, . . . , An and conclusion A.
All functions must be explicitly declared (keyword con-
sts). Non-recursive deﬁnitions are deﬁned via the meta-
equality (≡), recursive ones are introduced by primrec.
The rules for inductively deﬁned sets are introduced by in-
ductive. For each inductive deﬁnition Isabelle generates
the corresponding induction principle (rule induction) and
the case analysis principle (rule inversion).
The statements we prove are preceded by lemma or the-
orem, with no formal diﬀerence between them.
Isabelle
provides powerful proof tactics based on rewriting and the
classical reasoner, which implements a tableau based prover
for predicate logic and sets.
Isabelle has been extensively used for the formalization of
programming language semantics, and in particular for the
formalization of the Java language, see e.g. [12, 19].
3. NON-INTERFERENCE FOR
CONCURRENT SYSTEMS
3.1 The Language and Type System
We start by deﬁning the memory as a mapping from lo-
cations to values. The type of locations and values is left
unspeciﬁed (we can introduce new types in Isabelle by a type
declaration, which merely introduces its name).
typedecl loc
typedecl val
types memory = loc ⇒ val
Another possibility, which allows for diﬀerent implementa-
tions of memories without aﬀecting much the formalization,
is to introduce memories as an abstract type, equipped with
lookup and update functions that are assumed to satisfy the
expected equational properties. Such an approach has the
advantage of avoiding the use of higher-order functions (the
function aexp below is higher-order), but it is of no concern
to us here, since Isabelle supports such functions.
Processes are built up from arithmetic and boolean ex-
pressions. Following [4, Assumption 3.2], we assume that
expressions always evaluate to a result. Since Isabelle is a
logic of total functions, it can be done simply by treating
expressions as functions from memories to results.
types aexp = memory ⇒ val
types bexp = memory ⇒ bool
Another possibility, which is slightly more abstract, is to
introduce arithmetic expressions and boolean expressions as
abstract types, and deﬁne evaluation functions that take as
argument a memory and an arithmetic expression (resp. a
boolean expression) and return as result a value (resp. a
boolean).
The program syntax is deﬁned via a datatype deﬁnition.
Our language is more general than the one presented in [4],
where programs of the form (PkQ);; R are not allowed.
datatype par =
(skip)
(- :== -)
(-;; -)
(if - then - else -)
(while - do -)
(- k -)
Skip
| Assign loc aexp
| Seq par par
| Cond bexp par par
| While bexp par
| Par par par
Enclosed in parentheses we give concrete syntax for each
construct. We use :== for assignments and ;; for sequential
composition to avoid clashes with the predeﬁned := and ; of
Isabelle.
The semantics of commands, shown in ﬁgure 1, is induc-
tively deﬁned via transition rules between conﬁgurations. A
conﬁguration is a pair (P , µ) where P is a program and µ is
the memory. We use a readable inﬁx syntax for transitions
rules (most of the deﬁnitions presented in this paper are en-
dowed with a readable inﬁx syntax whose formal declaration
is not always explicitly shown here). In the rule for Assign,
7→ v ] stands for memory update and is
the expression µ[l
deﬁned as
λx . if x =l then v else µ x
The rule Seq1 replaces the rule
(P , µ) −→1 (P 0, µ0) =⇒ (skip;; P , µ) −→1 (P 0, µ0)
used in [4]. This modiﬁcation has two advantages: it solves
a minor ﬂaw in the proof of non-interference presented in
[4] and more importantly, enables reduction of programs of
the form skip;; skip;; . . .
;; skip, which would otherwise be
irreducible. We also add rules ParL1 and ParR1 giving thus
a reasonable semantics to all programs of type par. In par-
ticular, programs of the form (PkQ);; R can be reducible in
our system.
The types of data and expressions are security levels. In
[4] they are modeled as elements of a lattice. For our pur-
poses, it suﬃces to declare a new type level as an instance
of the axiomatic class partial-order, which is a predeﬁned
type class with three axioms: reﬂexivity, transitivity and
antisymmetry (w.r.t. a binary relation “v”). Note that we
eliminate the need to have meet and join of security levels
by modifying the typing rules in an appropriate fashion.
Type judgments are of the form ‘ P . t s, where t is
a lower bound on the level of the assigned variables of P
and s is the guard type, i.e. an upper bound on the level
of the loop and conditional guards occurring in P. In [4]
the context Γ is a mapping from variables to security levels.
Our formalization leaves contexts unspeciﬁed and assumes
instead the existence of a function that extracts the security
level of locations.
consts getlevel :: loc ⇒ level
The type system is relative to functions seca and secb that
provide the security level of arithmetic and boolean expres-
sions, respectively.
consts seca :: aexp ⇒ level
consts secb :: bexp ⇒ level
It is inductively deﬁned by the set of inference rules shown
in ﬁgure 2. To simplify proofs, we formalize syntax-directed
rules which already include the necessary subtyping rela-
tions. This avoids the use of the meet and join operators
as well as dealing with the subtyping rule proper, which we
can easily derive from the system above.
lemma Subtyping:
[[ ‘ P . [t, s]; t 0 v t; s v s 0 ]] =⇒ ‘ P . [t 0, s 0]
The deﬁnition of non-interference presupposes a set of low
security levels which is downward-closed.
consts L :: level ⇒ bool
axioms Ldown: [[ L x 0; x v x 0 ]] =⇒ L x
Equality on memories is deﬁned relative to L.
constdefs
eqmem :: memory ⇒ memory ⇒ bool (- ’ -)
µ ’ µ0 ≡ ∀ x . L (getlevel x ) −→ µ x =µ0 x
In the sequel we assume that the security level of expressions
is correct in the sense that evaluating a low expression with
low equal memories should yield the same result. Such an
assumption corresponds to [4, Assumption 3.3.].
axioms
beh-aexp: [[ µ ’ µ0; L (seca a) ]] =⇒ (a µ)=(a µ0)
beh-bexp: [[ µ ’ µ0; L (secb b) ]] =⇒ (b µ)=(b µ0)
3.2 Properties of Typed Programs
In this section we formally deﬁne and prove some prop-
erties of typable programs. A program is typable if there
exist types such that a typing judgment can be derived in
the system.
constdefs typable :: par ⇒ bool
typable P ≡ ∃ t s. ‘ P . [t, s]
The ﬁnal goal is to establish that typable programs are se-
cure in the sense of non-interference. Some preliminary lem-
mas are needed. The ﬁrst one states that types are preserved
along execution.
lemma subject-reduction:
[[ ‘ P . [t, s] ; (P , µ) −→1 (P 0, µ0) ]] =⇒ ‘ P 0 . [t, s]
Following [4], we use various notions of bisimulation to state
and reason about non-interference. First we deﬁne the re-
lation →→ as the reﬂexive closure of −→1. It is deﬁned as a
set of pairs of conﬁgurations inductively generated by two
rules:
execr-reﬂ: cf →→ cf
execr-inj : cf −→1 cf 0 =⇒ cf →→ cf 0
We say that Q is a derivative of P , written P ; Q, if we
can deduce it from the following rules:
der-reﬂ: P ; P
der-step: [[ (P , µ) −→1 (P 0, µ0); P 0 ; Q ]] =⇒ P ; Q
(Semantically) high programs are programs that never mod-
ify the low part of the memory. The formal deﬁnition is
shown below.
It is followed by some lemmas which are
needed in the proofs of non-interference:
constdefs ship :: par ⇒ bool
ship P ≡ ∀ P 0 µ Q µ0.
(P ; P 0 ∧ (P 0, µ) −→1 (Q, µ0)) −→ µ ’ µ0
lemma ship-sr :
lemma ship-skip: ship skip
lemma ship-seq:
lemma ship-par :
[[ (P , µ) −→1 (Q, µ0); ship P ]] =⇒ ship Q
[[ ship P ; ship Q ]] =⇒ ship (P ;; Q)
[[ ship P ; ship Q ]] =⇒ ship (P k Q)
Observe that with our deﬁnition of derivative any program
Q that can be obtained by reducing P via the operational se-
mantics, allowing arbitrary changes in the memory through-
out the reduction, is a derivative of P. This gives us the
right deﬁnition of high programs. In [4], Q is deﬁned as a
derivative of P , if for some µ and µ0 we have (P , µ) −→∗
(Q, µ0), where −→∗ is the reﬂexive and transitive closure of
−→1. With this deﬁnition, however, the lemma ship-sr is
not true. Matos et al. also correct this problem by giving
an equivalent deﬁnition [15].
The predicate bis, shown in ﬁgure 3, deﬁnes when a rela-
tion R on conﬁgurations is a bisimulation. In this deﬁnition,
sym R means that the relation R is symmetric. (Note that
two stronger notions of bisimulation, namely quasi-strong
and strong bisimulations, are deﬁned in [4]. The ﬁrst one
is needed to prove non-interference for the sequential sub-
language. Thanks to our generalization of the language we
do not need this deﬁnition to prove non-interference of par-
allel programs. However, both of them will be necessary
in section 4.2 when we prove non-interference for scheduled
thread systems.)
The domain of bisimulations characterizes secure programs.
constdefs
secure :: par ⇒ bool
secure P ≡ ∃ S . (P , P ) ∈ S
∧ bis {((P , µ), (Q, ν)). (P , Q) ∈ S ∧ µ ’ ν}
The ﬁrst result establishes bisimilarity of high programs us-
ing the relation S 0.
constdefs S 0 :: (par × par ) set
S 0 ≡ {(P , Q). ship P ∧ ship Q}
We deﬁne the corresponding relation R0 between conﬁgura-
tions and prove that it is a bisimulation.
constdefs R0 :: ((par × memory) × (par × memory)) set
R0 ≡ {((P , s), (Q, t)). P S 0 Q ∧ s ’ t}
lemma R0-is-bis: bis R0
We deﬁne bounded and guarded programs.
constdefs bounded :: par ⇒ bool
bounded P ≡ ∀ t s. ‘ P . [t, s] −→ L t
constdefs guarded :: par ⇒ bool
guarded P ≡ ∃ t s. ‘ P . [t, s] ∧ (L s)
Observe that from the typing rule Seq and the Ldown axiom,
we can prove the following property of bounded programs:
lemma bounded-seq: bounded Q =⇒ bounded (P ;; Q)
A program which is not bounded cannot write on variables
of low level, and therefore such a program is high.
Assign:
Seq1:
Seq2:
CondT:
CondF:
WhileT:
WhileF:
ParL1:
ParL2:
ParR1:
ParR2:
(x :== a, µ) −→1 (skip, µ[x 7→ (a µ)])
(skip;; P, µ) −→1 (P, µ)
(P, µ) −→1 (P0, µ0) =⇒ (P;; Q, µ) −→1 (P0;; Q, µ0)
b µ =⇒ (if b then P else Q, µ) −→1 (P, µ)