certain attribute), thus resulting in larger ciphertexts and slower
decryption.
4 SECURITY OF FAME
The security proof proceeds via a series of hybrids. A hybrid de-
scribes how the challenger Chal interacts with an adversary A.
The zeroth hybrid, Hyb0, is of course the one where Chal and A in-
teract according to ExptΠ,A (1λ, b) (§2.3) with Π being our scheme
Fame. The only difference is that the hash function H is assumed
to behave like a random oracle.
The first step in the security analysis is to rewrite Fame in a
compact form by interpreting the outputs of random oracle appro-
priately and using the notation defined in §2.4 to represent group
elements. This compact form will be the first hybrid, Hyb1. Here
one can see the connections to CGW more clearly.
The compact form also simplifies rest of the proof presentation.
So we discuss Hyb1 at length first and give a high-level overview
of the proof after that.
4.1 Compact representation
Let Samp be an algorithm that on input a prime p, outputs
z⊥ :=
(4.1)
Z :=
where u1, u2 ←R Z∗
properties of this algorithm.
0
1
p. Appendix C.2 discusses some interesting
We define a modified version of the IND-CPA game ExptFame,A
(1λ, b), called Hyb1, in this section. To begin with, the challenger
Chal sets up the ABE scheme as follows:
Setup. Run GroupGen(1λ) to obtain (p, G, H, GT , e, д, h) as be-
fore. Pick (A, a⊥), (B, b⊥) ← Samp(p) and d1, d2, d3 ←R Zp. Let
d denote the column vector (d1, d2, d3)T. Set pk := ([A]2,[dTA]T ),
msk := (д, h, A, B,[d]1).
In order to simulate the random oracle, Chal maintains two lists
L and Q. The list L has entries of the form (x, Wx) or (j, Uj) where
x is an arbitrary binary string, j is a positive integer, and Wx , Uj
are 3 × 3 matrices over Zp.8 The list Q has entries of the form (q, r)
u1
 ,
0
u2
1
u1−1
u2−1
−1
 ,
would have to be parameterized by the degree d of attribute reuse, and the number of
pairings required for decryption would also increase by a factor of d.
8Assume that the x and j are appropriately encoded so that they don’t collide.
8
p
where q is either xℓt or 0jℓt (for ℓ ∈ {1, 2, 3} and t ∈ {1, 2}) or
something else, and r is an element of G.
Adversary A can make one of three types of oracle queries:
(1) xℓt: Chal checks if (xℓt, r) ∈ Q for some r or not. If such
an entry is found then it returns r, otherwise it checks if
(x, Wx) ∈ L for some Wx or not. If such an entry is found
x A)ℓ,t]1 is computed, (xℓt, r) is added to Q,
then r := [(WT
and r is returned. Else, it picks Wx ←R Z3×3
, adds (x, Wx)
to L, computes r := [(WT
x A)ℓ,t]1, adds (xℓt, r) to Q, and
returns r.
(2) 0jℓt: Chal checks if (0jℓt, r) ∈ Q for some r or not. If such
an entry is found then it returns r, otherwise it checks if
(j, Uj) ∈ L for some Uj or not. If such an entry is found then
j A)ℓ,t]1 is computed, (0jℓt, r) is added to Q, and
r := [(UT
r is returned. Else, it picks Uj ←R Z3×3
, adds (x, Uj) to L,
computes r := [(UT
j A)ℓ,t]1, adds (0jℓt, r) to Q, and returns
r.
(3) Anything else, say q: Chal checks if (q, r) ∈ Q for some r or
not. If such an entry is found then it returns r, otherwise a
random element from G, say r′, is picked, (q, r′) is added to
Q, and r′ is returned.
Key generation. When A makes a key query S, Chal retrieves
Wy for every y ∈ S and U1 from the list L. (If one of them is not
available then a random 3 × 3 matrix is generated like above. The
list L is also updated accordingly.) Now pick r1, r2, σ ′ ←R Zp as
well as σy ←R Zp for y ∈ S. Let r = (r1, r2)T and compute
p
sk0 := [Br]2,
sky := [WyBr + σya⊥]1,
sk′ := [d + U1Br + σ
′a⊥]1
for all y ∈ S. Then return (sk0, {sky}y∈S , sk′) as the key.
Encryption. When A sends messages msg0, msg1 and a policy
(M, π), Chal retrieves [(WT
j A)ℓ,t]1 for all i =
1, . . . , n1, j = 1, . . . , n2, ℓ, t from the list Q. (If a π(i)ℓt or 0jℓt is
not found in Q, then it follows the same process as in (1) or (2)
above, respectively.) Now pick s1, s2 ←R Zp, set s to be (s1, s2), and
compute
π(i)A)ℓ,t]1 and [(UT
WT
n2
cti :=
π(i)As +
j=1
ct′ := [dTAs]T · msgb ,
1
(M)i, j UT
j As
ct0 := [As]2,
for i = 1, . . . , n1. Return ciphertext (ct0, ct1, . . . , ctn1 , ct′).
4.2 High-level overview
Even though Hyb0, with the algorithms of Fame, looks very differ-
ent from Hyb1, they are in fact identical from the point of view of
any adversary. At a high level, the Wx , Uj matrices have enough
entropy to make (WT
j A)ℓ,t look random for every ℓ, t.
Further, when the hashed values in the ciphertexts/keys of Fame
are interpreted in the way the challenger simulates them, one can
then carefully manipulate them to show that they match with those
in Hyb1.
The structure of ciphertexts and keys in Hyb1 appears similar
to that of CGW’s CP-ABE scheme [19, Appendix B.2]. One clear
x A)ℓ,t , (UT
and important difference is that while our ciphertexts and keys
have only the first component in group H, theirs are composed
entirely of elements from G and H, respectively. From a security
perspective, we have an additional a⊥ component in our keys that
is not present in theirs. We define a sequence of hybrids, called
Group-I hybrids, to get rid of this component. These hybrids are
specific to our proof.
Group-I has 3Q hybrids from Hyb2,1,1 to Hyb2,3,Q , where Q
is the number of key queries an adversary makes. These hybrids
modify the key components one by one. First, DLIN is used to
replace Br by Br + ˆra⊥ (Definition 2.4, §2.5) for a random ˆr because
the linear independence of a⊥ from B (Lemma C.1) makes Br + ˆra⊥
a random vector. Second, the Wx matrices have one unit of residual
entropy even given WT
x A and Wx B (same with Uj), which can
be exploited to absorb the extra a⊥ component without affecting
the challenge ciphertext and other parts of the keys. This type of
information-theoretic step is usually called parameter-hiding in
dual-system encryption based proofs [19, 56]. Lastly, DLIN is used
to revert back to Br.
We then define another set of hybrids, called Group-II hybrids,
to show that the encryption of any message is indistinguishable
from the encryption of a random message. Group-II has 3Q + 2
hybrids: Hyb3, Hyb4,1,1, . . ., Hyb4,3,Q , and Hyb5. The first among
them, Hyb3, uses DLIN to replace As by As + ˆsb⊥ in the challenge
ciphertext, possible again due to linear independence. The new
form of ciphertext is called semi-functional, a term first used by
Waters [56]. The sequence from Hyb4,1,1 to Hyb4,3,Q is somewhat
similar to Hyb2,1,1 to Hyb2,3,Q in terms of the changes made to
key components. The residual entropy in Wx , Uj is used towards a
different purpose now: to introduce some structured randomness
into the key.
Moving from Hyb4,1,1 to Hyb4,3,Q requires more care because
the ciphertext is semi-functional. We must make sure that while the
keys are being transformed, the ciphertext can still be generated
given just a DLIN tuple. Furthermore, the parameter-hiding step
affects not only the keys but the ciphertext too. At this stage, we use
the fact that none of the keys issued to the adversary can decrypt
the challenge ciphertext.
Hyb4,3,Q is almost the same as Hyb2,3,Q , the last of the Group-I
hybrids, except that the ciphertext is semi-functional and the keys
have some extra randomness. The last step, which leads to Hyb5,
moves this randomness to the ciphertext, so that it is indistinguish-
able from the encryption of a random message.
4.3 Main theorem
We now formally state the security property of Fame.
Theorem 4.1. Fame, defined in Figure 3.1, is fully secure (Def 2.3)
under the DLIN assumption on asymmetric pairing groups (Def 2.4)
in the random oracle model. Concretely, for any PPT adversary A
making Q key queries in the IND-CPA security game, there exists a
PPT adversary B such that
AdvA
Fame(λ) ≤ (8Q + 2)AdvB
DLIN(λ) + (16Q + 6)/p,
where p = Θ(λ) is the order of the pairing group.
and how we go from one hybrid to the next (C.1). Then we show
why a hybrid in the sequence is indistinguishable from the next
one (C.3). And finally we prove the theorem with the help of these
indistinguishable hybrids (C.4).
5 IMPLEMENTATION & EVALUATION
We implement ABE schemes in Python 2.7.10 using the Charm 0.43
framework [7]. We use MNT224 curve for pairings because it is the
best Type-III curve in PBC, the default pairing library in Charm. It
provides 96-bit security level [59]. All running times below were
measured on a Macbook Pro laptop with a 2.7 GHz Intel Core i5
processor and 8GB RAM. The implementation code is available on
GitHub [2].
Table 5.1 lists the average time taken by various operations on
MNT224 in milliseconds. One can see that operations on group
H are significantly more expensive than on G, from 7 times for
multiplication to as much as 775 times for hashing. Pairing is a very
expensive operation too: if we put exponentiation and hashing in H
aside then pairing is at least thrice as costly as any other operation.
It is also important to note that the size of an element in H is 3
times that of G. 9
Groups Multiplication
G
H
GT
.009
.065
.020
Exponentiation
1.266
14.412
3.356
10.243
Hash
.099
76.767
-
Pairing
Table 5.1: Average time taken by various operations on the
MNT224 curve. Pairing operation is listed separately. All
times are measured in milliseconds correct to three decimal
places.
We use access policies of type ‘Attr1 AND Attr2 AND ... AND
AttrN’ as in Green et al. [31] because all the N attributes are then
required for decryption. We say that such a policy is of size N .
We test all the schemes against policies and attribute sets of size
10, 20, . . . , 100. As argued by Green et al., large policy sizes are
quite likely in typical use cases (e.g., a restriction window involving
a Unix time value). We first convert the policies into a Boolean
formula and then to an MSP using Lewko-Waters’ method, the
advantage being that the matrix generated has only 0, 1 or −1
entries and the reconstruction coefficients are always just 0 or 1
(see §2.1 for a detailed discussion.)
CP-ABE. Besides Fame, we implement Bethencourt et al.’s (BSW)
[16, Section 4.2], Waters’ [57, Section 3] and CGW’s [20, Appendix
B.2] CP-ABE schemes under the same setting. There are other im-
plementations of the first two schemes but, as far we know, CGW’s
schemes have not been implemented before, nor have any other
fully secure schemes. Below, we compare with both the SXDH
(1-linear) and DLIN (2-linear) instantiations of CGW, the two as-
sumptions under which it gives the best performance. They are
referred to as CGW-1 and CGW-2, respectively, for brevity.
A proof of the above theorem can be found in Appendix C. There,
we first formally describe the hybrids that will be used in the proof,
9Though the numbers here are specifically for the MNT224 curve, other Type-III curves
like Bareto-Naehrig have similar disparity between groups G and H [33].
9
(a) Key generation
Figure 5.1: Ciphertext-policy attribute-based encryption.
(b) Encryption
(c) Decryption
(a) Key generation
Figure 5.2: Key-policy attribute-based encryption.
(b) Encryption
(c) Decryption
We chose BSW because it was the first scheme proposed for CP-
ABE, and it is quite popular in the community for its simplicity and
efficiency, but proved secure only under the generic group model
(GGM). Waters’ scheme was the first to be proved in the standard
model, albeit only selectively. CGW is an obvious choice since it is
the most efficient fully secure scheme (in the standard model) for a
bounded universe of attributes.
It is worth noting that both BSW’s and Waters’ schemes were
built using symmetric bilinear maps, which have serious security
issues [24, 37]. We implement them in the asymmetric setting using
the MNT224 curve (see Appendix D and E). In this process, the
number of elements in ciphertexts or keys, and the number of group
operations used in any of the algorithms is not affected. We believe
that the modified version of Waters’ scheme can be proved secure
under a variant of the assumption he uses. Modifying BSW required
more care because it uses a hash function. However, since BSW
is proven secure in the generic group model, the security of the
modified scheme is obvious (in the same model). 10
Figure 5.3 (left) shows the time it takes to run the set-up al-
gorithms of the CP-ABE schemes we implemented. For bounded
10Please note that there are various ways to convert a Type-I scheme to Type-III, and
this process is already quite challenging for identity-based encryption [3, 6, 8]. We
try to balance the total work fairly between encryption and key-generation (see Table
5.2), and avoid the use of expensive operations like hashing in H (see Table 5.1).
10
Scheme Uni size
Our
CGW-1
CGW-2
Waters
BSW
-
100
100
100
-
Time
0.11s
2.23s
5.13s
0.64s
0.08s
Scheme Uni size
Our
CGW-1