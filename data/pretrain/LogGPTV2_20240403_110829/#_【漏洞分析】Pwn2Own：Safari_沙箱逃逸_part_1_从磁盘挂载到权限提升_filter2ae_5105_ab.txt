### 优化后的文本

#### 列出 `/dev/disk*` 设备
```sh
$ ls -alih /dev/disk*
    589 brw-r-----  1 root  operator    1,   0 Mar 15 10:27 /dev/disk0
    594 brw-r-----  1 root  operator    1,   1 Mar 15 10:27 /dev/disk0s1
    598 brw-r-----  1 root  operator    1,   3 Mar 15 10:27 /dev/disk0s2
    596 brw-r-----  1 root  operator    1,   2 Mar 15 10:27 /dev/disk0s3
    600 brw-r-----  1 root  operator    1,   4 Mar 15 10:27 /dev/disk1
```

#### 分区 `/dev/disk0s1` 的特性
- **分区类型**: EFI 分区
- **文件系统格式**: FAT32
- **用途**: 主要用于 BIOS 固件更新和启动引导
- **适用范围**: 几乎所有版本的 MacBook 设备
- **挂载状态**: 通常情况下，该设备并未挂载
- **权限管理**: 由于采用 FAT 格式，不支持 Unix 文件权限管理，因此可以对其进行写入操作

#### 使用 `hdiutil` 创建可写设备
可以通过 `hdiutil` 工具来创建一个可写设备。然而，在默认策略下，我们未能成功利用该工具。
- **参考文档**: [hdiutil](https://developer.apple.com/legacy/library/documentation/Darwin/Reference/ManPages/man1/hdiutil.1.html)

#### 利用 cron 服务进行权限提升
在 macOS 中，尽管 `cron` 服务默认未运行，但当我们在 `/var/at/tabs` 目录下创建任务文件时，`launchd` 会自动启动 `cron` 进程以完成任务调度。

**步骤**:
1. 将磁盘挂载到 `/var/at/tabs`。
2. 在 `/var/at/tabs/root` 下写入 payload。
3. 添加以下 cron 任务以每分钟执行一次：
    ```sh
    * * * * * touch /tmp/pwned
    ```

**结果**:
- 该指令将使用 root 权限每分钟执行一次。
- 成功利用该漏洞提升权限。

**PoC 代码**:
- 可以从 [这里](https://github.com/phoenhex/files/blob/master/pocs/poc-mount.sh) 下载 PoC 代码。
- 需要安装 `clang` 编译器。

**示例**:
```sh
$ ./poc-mount.sh
Just imagine having that root shell. It's gonna be legen...
wait for it...
dary!
./poc-mount.sh: line 77:  3179 Killed: 9               race_link
sh-3.2# id
uid=0(root) gid=0(wheel) groups=0(wheel),1(daemon),2(kmem),3(sys),4(tty),5(operator),8(procview),9(procmod),12(everyone),20(staff),29(certusers),61(localaccounts),80(admin),401(com.apple.sharepoint.group.1),33(_appstore),98(_lpadmin),100(_lpoperator),204(_developer),395(com.apple.access_ftp),398(com.apple.access_screensharing),399(com.apple.access_ssh)
sh-3.2#
```

#### 沙盒逃逸研究
调用 Disk Arbitration 服务提供的 API 时，需要提供一个验证令牌（authorization token）。当发起挂载请求时，`diskarbitrationd` 服务会检查令牌中的 `system.volume.*.mount` 权限。

**代码示例**:
```c
DAReturn status;
status = kDAReturnNotPrivileged;
// ...
AuthorizationRef authorization;
// [[ 1 ]]
authorization = DASessionGetAuthorization( session );
if ( authorization )
{
    AuthorizationFlags  flags;
    AuthorizationItem   item;
    char *              name;
    AuthorizationRights rights;
    flags = kAuthorizationFlagExtendRights;
    // ...
    if ( DADiskGetDescription( disk, kDADiskDescriptionDeviceInternalKey ) == kCFBooleanTrue )
    {
        // [[ 2 ]]
        asprintf( &name, "system.volume.internal.%s", right );
    }
    // ...
    if ( name )
    {
        item.flags       = 0;
        item.name        = name;
        item.value       = NULL;
        item.valueLength = 0;
        rights.count = 1;
        rights.items = &item;
        // [[ 3 ]]
        status = AuthorizationCopyRights( authorization, &rights, NULL, flags, NULL );
        if ( status )
        {
            status = kDAReturnNotPrivileged;
        }
        free( name );
    }
}
```

**步骤**:
1. 从当前会话中取出用户令牌。
2. 生成 `system.volume.internal.mount` 权限标志。
3. 使用 `AuthorizationCopyRights` 函数检查用户令牌是否具有该权限。

#### 在 Safari 沙箱中触发漏洞
**条件**:
- 通过 IPC 接口访问 `diskarbitrationd` 服务 – √
- 向任意目录写入内容 – √
- 获取验证令牌 – ×
- 允许建立软链接 – ×

**沙箱规则**:
- Safari 可以写入 `/private/var/folders//C/com.apple.WebKit.WebContent+com.apple.Safari` 下的所有目录。
- 沙箱环境禁止创建任何软链接。

**结论**:
- 无法在沙箱环境中直接利用该漏洞。
- 在下一篇文章中，我们将介绍更多漏洞信息，这些漏洞可以帮助绕过软链接创建限制和沙箱的验证权限检查。