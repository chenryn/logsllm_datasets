    $ ls -alih /dev/disk*
    589 brw-r-----  1 root  operator    1,   0 Mar 15 10:27 /dev/disk0
    594 brw-r-----  1 root  operator    1,   1 Mar 15 10:27 /dev/disk0s1
    598 brw-r-----  1 root  operator    1,   3 Mar 15 10:27 /dev/disk0s2
    596 brw-r-----  1 root  operator    1,   2 Mar 15 10:27 /dev/disk0s3
    600 brw-r-----  1 root  operator    1,   4 Mar 15 10:27 /dev/disk1
其中 /dev/dis0s1 满足我们的需求，该分区是 EFI 分区，格式为 FAT32，主要用于 BIOS 固件更新和启动引导，并存在于几乎所有版本的
MacBook 设备中。通常情况下，该设备并没有挂载。而由于该分区属于 FAT 格式，并不支持 Unix*
的文件权限管理，所以我们可以正常对其进行写入操作。
除此之外，我想还可以通过
[hdiutil](https://developer.apple.com/legacy/library/documentation/Darwin/Reference/ManPages/man1/hdiutil.1.html)
来建立一个可写设备，但是在默认策略下，没有利用成功。
第二个问题稍微有点棘手，花了一点时间。即使在新版 macOS 中，也有 [cron
服务](https://en.wikipedia.org/wiki/Cron) 的背影，但是该服务默认并没有运行。然而当我们在 /var/at/tabs
建立任务文件时，launchd 会自动启动 cron 进程来完成任务调度。因此，我们可以将磁盘挂载到 /var/at/tabs，并在
/var/at/tabs/root 下写入 payload，最终以 root 身份执行命令：
    * * * * * touch /tmp/pwned
该指令会在每分钟执行一次，当然，使用的是 root 权限。至此，我们成功利用该漏洞完成权限提升，PoC 代码可以
[访问这里](https://github.com/phoenhex/files/blob/master/pocs/poc-mount.sh)
进行下载，注意需要安装 clang 编译器：
    $ ./poc-mount.sh
    Just imagine having that root shell. It's gonna be legen...
    wait for it...
    dary!
    ./poc-mount.sh: line 77:  3179 Killed: 9               race_link
    sh-3.2# id
    uid=0(root) gid=0(wheel) groups=0(wheel),1(daemon),2(kmem),3(sys),4(tty),5(operator),8(procview),9(procmod),12(everyone),20(staff),29(certusers),61(localaccounts),80(admin),401(com.apple.sharepoint.group.1),33(_appstore),98(_lpadmin),100(_lpoperator),204(_developer),395(com.apple.access_ftp),398(com.apple.access_screensharing),399(com.apple.access_ssh)
    sh-3.2#
其实，该漏洞类似于 Windows 操作系统下的 UAC bypass，我们可以结合其他漏洞作为一个向量，进一步攻击目标。
**进一步研究沙盒逃逸**
对于调用 Disk Arbitration 服务提供的
API，我们需要提供一个[验证令牌](https://developer.apple.com/reference/security/authorization_services)（authorization
token）。当我们发起一个挂载请求时，diskarbitrationd 服务会检查 token 中的 system.volume.*.mount 权限，*
代表我们要挂在的磁盘类型。例如，当我们对 /dev/disk0s1 内部磁盘（internal disk
partition）进行挂载时，diskarbitrationd 在 DAAuthorize 函数中会对 token
进行验证（system.volume.internal.mount）：
    DAReturn status;
    status = kDAReturnNotPrivileged;
        // ...
        AuthorizationRef authorization;
        // [[ 1 ]]
        authorization = DASessionGetAuthorization( session );
        if ( authorization )
        {
            AuthorizationFlags  flags;
            AuthorizationItem   item;
            char *              name;
            AuthorizationRights rights;
            flags = kAuthorizationFlagExtendRights;
            // ...
                            if ( DADiskGetDescription( disk, kDADiskDescriptionDeviceInternalKey ) == kCFBooleanTrue )
                            {
                                // [[ 2 ]]
                                asprintf( &name, "system.volume.internal.%s", right );
                            }
            // ...
            if ( name )
            {
                item.flags       = 0;
                item.name        = name;
                item.value       = NULL;
                item.valueLength = 0;
                rights.count = 1;
                rights.items = &item;
                // [[ 3 ]]
                status = AuthorizationCopyRights( authorization, &rights, NULL, flags, NULL );
                if ( status )
                {
                    status = kDAReturnNotPrivileged;
                }
                free( name );
            }
        }
在步骤 [[ 1 ]] 中，程序从当前会话中取出用户令牌，该令牌由该 IPC 请求发起者提供。接着在步骤 [[ 2 ]] 中生成
system.volume.internal.mount 权限标志，最后在 [[ 3 ]] 中，使用 AuthorizationCopyRights
函数来检查用户令牌是否具有该权限。[AuthorizationCopyRights
](https://developer.apple.com/reference/security/1395770-authorizationcopyrights?language=objc)则在
com.apple.authd 服务中实现。
**在 Safari 沙箱中触发漏洞**
我们总结一下当前的条件，看看能否触发在沙箱环境中的 Safari 触发该漏洞：
通过 IPC 接口访问 diskarbitrationd 服务 – √
向任意目录写入内容 – √
我们只需要找到一个 Safari 可写的目录即可，我们会在该目录下建立软链接，最终将其挂载到 /var/at/tabs 下。而在 WebProcess.sb
的沙箱规则中：
    (if (positive? (string-length (param "DARWIN_USER_CACHE_DIR")))
        (allow file* (subpath (param "DARWIN_USER_CACHE_DIR"))))
我们对 /private/var/folders//C/com.apple.WebKit.WebContent+com.apple.Safari
下的所有目录具有可写权限。
获取验证令牌 – ×
虽然本地用户可以正常获取到验证令牌，但是在沙箱环境下，除非指定明确的规则，否则无法创建正确的访问令牌。不幸的是，WebProcess.sb
并没有指定该选项（allow authorization-right-obtain ），因此我们无法通过该途径进行利用。
允许建立软链接 – ×
Safari 沙箱明令禁止任何链接创建操作：
    (if (defined? 'vnode-type)
            (deny file-write-create (vnode-type SYMLINK)))
在下一篇文章中，我们将会带来更多的漏洞信息，使用这些漏洞，我们可以绕过软链接创建限制，并且绕过沙箱的验证权限检查。