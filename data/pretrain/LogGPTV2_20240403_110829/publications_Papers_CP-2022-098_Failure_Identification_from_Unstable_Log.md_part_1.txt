Failure Identification from Unstable Log Data using
Deep Learning
Jasmin Bogatinovski∗, Sasho Nedelkoski∗, Li Wu∗, Jorge Cardoso†, Odej Kao∗
∗Distributed and Operating Systems, Technical University Berlin, Germany
†Huawei Munich Research, Munich, Germany
{jasmin.bogatinovski, odej.kao}@tu-berlin.de
Abstract—The reliability of cloud platforms is of significant the available monitoring data, with log data (logs for short)
relevancebecausesocietyincreasinglyreliesoncomplexsoftware commonly being utilized. Other monitoring data, like key
systemsrunningonthecloud.Toimproveit,cloudprovidersare
performance indicator metrics (KPI, e.g., memory utilization, 2202
automatingvariousmaintenancetasks,withfailureidentification
I/O bytes), provide clues for detecting failures, however, they
frequently being considered. The precondition for automation is
theavailabilityofobservabilitytools,withsystemlogscommonly do not provide a verbose description of the type of the
being used. The focus of this paper is log-based failure identi- failure [4] making the failure identification incomplete. For
fication. This problem is challenging because of the instability example, a sharp increase in the curve of memory utilization rpA
of the log data and the incompleteness of the explicit logging
only indicates that the memory utilization increases, but it
failure coverage within the code. To address the two challenges,
cannottellwhyithappensinisolation.Incomparison,logsare
we present CLog as a method for failure identification. The
key idea presented herein based is on our observation that by textualdatarecordingeventswithdifferentgranularity,provid- 6
representing the log data as sequences of subprocesses instead ing human-understandable clues for the failure and its type.
]ES.sc[
of sequences of log events, the effect of the unstable log data is For example, from several repetitions of the two consecutive
reduced. CLog introduces a novel subprocess extraction method
loglines,“l :Interfacechangedstatetoup.”and”l :Interface
1 2
that uses context-aware neural network and clustering methods
changed state to down.”, operators can detect a failure in the
to extract meaningful subprocesses. The direct modeling of log
event contexts allows the identification of failures with respect system, assign its type “Interface Flapping”, conclude that the
to the abrupt context changes, addressing the challenge of interface is flapping and obtain clues for potential root causes
insufficient logging failure coverage. Our experimental results (bad cable connection a common suspect in this example). A
1v63620.4022:viXra
demonstratethatthelearnedsubprocessesrepresentationsreduce
singlelogiscomposedofastaticeventtemplatedescribingthe
the instability in the input, allowing CLog to outperform the
event (e.g., ”Interface changed state to (cid:104)∗(cid:105).”) and parameters
baselines on the failure identification subproblems – 1) failure
detectionby9-24%onF1scoreand2)failuretypeidentification (e.g., up) giving variable event information.
by 7% on the macro averaged F1 score. Further analysis shows The focus of this study is the problem of log-based failure
the existent negative correlation between the instability in the identification.Traditionally,itisaddressedbymanualanalysis,
inputeventsequencesandthedetectionperformanceinamodel-
likekeywordsearchoffailurewords(e.g.,”fail”)orloglevels
agnostic manner.
with great severity (e.g., ”error”) [5]. Owning to the unprece-
Index Terms—failure identification; system reliability; log
denteddevelopmentofthecloudsystems,logsareconsistently
data; cloud computing; deep learning;
generated in large volumes (several TB per day [3]), making
I. INTRODUCTION thetaskofmanuallog-baseddiagnosiscumbersome.Thereby,
automatic approaches for log-based failure identification are
Cloud systems are a mixture of complex multi-layered
increasingly researched and adopted [6]–[10].
software and hardware. They enable applications of ever-
Current approaches 1) identify failures from single log
increasing heterogeneity and complexity powering different
lines [10] or 2) exploit groups/contexts of log events (i.e.,
technologies such as the Internet of Things, distributed pro-
co-occurring event templates/events) in form of log se-
cessing frameworks, databases, virtual reality, among others.
quences [11] (i.e., series of event templates with external
The emergence of complexity within the cloud relates to
identifier) and count vectors [7]. Depending on the assumed
diverse maintenance challenges, with an important challenge
input, different challenges emerge. When considering groups
of being prone to failures [1]. The failures have a significant
of log events, the challenge of unstable log sequences oc-
impact on the performance affecting user experience and
curs [6]. Unstable log sequences are sequences from the same
leadingtoeconomiclosses[2].Therefore,accurateandtimely
typeofworkloadexecutionhavingslightlydifferentsequential
failure identification is crucial for enhancing the reliability of
structures. Fig. 1 depicts examples of unstable sequences
the cloud and its services.
causedbydifferentreasons.Inthesequencesofeventsdenoted
Cloudprovidersareconsideringmanyapproachestoaddress
with ”Event Duplication” and ”Missing Event”, the original
the problem of failure identification, commonly by adopting
sequence (E2,E5,E1,E4,E6) is modified by repeating a
various data-driven methods [3]. Their fundament resides in
single event ”E4” or dropping the event ”E1”, accordingly.
©2022IEEE.PermissionfromIEEEmustbeobtainedforalluses,inany
Thetwosequencesstillrepresentnormalsystembehaviourbut
currentorfuturemedia,includingreprinting/republishingthismaterialfor
advertisingorpromotionalpurposes.ThispaperisacceptedatIEEE
CCGrid2022.Forcitationsusereferencesfromtheconferenceproceedings.
have slightly different structures. Such problems are common occurring log event templates), their number is significantly
in cloud systems where the log data is analyzed at a central smallerthantheeventnumberusedtorepresentthesequences.
place.Thenetworkerrors,limitedthroughput,orstorageissues The two key benefits of the change in the representation are
are referenced causes for events repeating or dropping. There that – a) by representing the log event sequences by a smaller
are other sources of instabilities (e.g., the preprocessing of number of subprocesses, we directly reduce the entropy in
raw logs), altering the normal log sequences in a similar the input representation, reducing the effect of the unstable
way. Notably, the instability causes similar properties of the log sequences; b) the modeling of contexts allows detect-
unstable normal and failure sequences (e.g., shortened lengths ing failures in terms of abrupt context changes, addressing
or contexts differ in a single event), making it harder to the challenge of insufficient logging failure coverage. The
distinguish them from one another. For example, the two challenge that arises is the extraction of subprocesses. 2) To
sequences in Fig. 1, labeled ”Misidentifying Event” and address it, we contribute a novel method for unsupervised
”Failure”, differ just within one event on the fourth position subprocesses extraction based on context-aware deep learning
(”E7” and ”E3”). The first arises due to an error in the log and clustering methods. 3) Our experimental results on two
event preprocessing, while the second is because the template datasets from OpenStack (with 172 failures) demonstrate that
describes a failure event. Therefore, the instability inflicts a CLog outperforms the baselines on the two failure identifica-
modelingchallengeandincreasestheentropyinthedata.From tion subproblems: failure detection (by 9-24% on F1 score)
modelingperspective,thisrequiresaccountingfortheunequal and failure type identification (by 7% on macro average F1
importance of the log events within the contexts, impairing score).Byinjectingunstableeventsequences,weshowCLog’s
the detection performance otherwise [6]. robust performance dropping by just 6% under a severe ratio
of unstable sequences. 4) Finally, we contribute by open-
Normal Sequence E2 E5 E1 E4 E6 sourcing the datasets and method for reproducibility purposes
andfosteringtheresearchonthispracticallyrelevantproblem.
Event Duplication E2 E5 E1 E4 E4 E6
The remaining of the paper is structured as follows. Sec-
Missing Event E2 E5 E4 E6
tion II gives the key observation for the approach, alongside
Misidentified EventE2 E5 E1 E7 E6
the problem definition. Section III describes the proposed
Failure Sequence E2 E5 E1 E3 E6
methodology. Section IV discusses the experimental results
“Instance Failure” in response to four research questions. Section V discusses
the related work for the two sub-problems of failure detection
Fig.1. Examplesofunstableandfailurelogeventsequences.
andfailuretypeidentification. SectionVIconcludesthepaper
The methods using single log lines do not suffer from the and gives directions for future work.
problem of unstable logs, predominantly due to incorporating
information about the semantics of the log events [8]. These II. PRELIMINARY
approaches demonstrate strong performance [10] however,
A. Problem Definition
they cannot detect failures that are not explicitly logged.
For example, in the aforenamed failure with type ”Interface In this paper, we address the problem of log-based fail-
Flapping” (with logs l ,l ), none of the two logs has a log ure identification [5]. We decompose the problem into two
1 2
level with greater severity (i.e., ”error” or ”critical”), nor do subproblems, i.e., (1) failure detection and (2) failure type
they explicitly describe a failure. The failure can be detected identification, defined in the following.
just within the context of several repetitions of the specific Failure Detection (FD). Let L = {l ,l ...l ...l } be a
1 2 i n
pair of logs. Furthermore, these types of contextual failures setofntime-orderedlogsfromcloudservices,andthereexist
occuroften.Forexample,forthereleasePike(version3.12.1) anindexsetJ∈Ncapturingdependencyrelationbetweenthe
of a popular cloud resource managing system OpenStack, logs, i.e., s = (l ∈ L|j ∈ J), where l denotes individual
j ji ji
there are more than 20% of failures not explicitly logged log of the sequence s . Further, we assume that there exist
j
within a single log line [12]. Acknowledging that developers a function p+ denoting the normality score of the sequence
have an insufficient understating of the complexities of the p+(φ(s )):Rd (cid:55)→R, where φ:S(cid:55)→Rd is the representation
j
running system environment during development results in function of sequence s into d-dimensional numerical vector
j
insufficient failure logging coverage [3]. Conclusively, the space, and S is the available sequence set. The task of failure
failuresthatdonotmanifestinindividuallinesmakethefailure detection is defined as finding the set A = {s ∈ S|a a ,j ∈J}, where a ,a are constants such
j j 2 1 2
(e.g., presence/absence of frequently co-occurring logs). that a <a . Although the individual logs l in the sequence
1 2 i
Contributions. 1) To overcome the two challenges, in this s candescribenormalevents,theoverallsequencecandenote
j
paperasthemaincontribution,weintroduceCLog–amethod a failure. The index set J in the context of logs can represent
for log-based failure identification. The key idea of CLog is taskID,processID,orworkloadID.Itcanbegivenapriori(as
reducing the instability of the input log event sequences by considered here) or reconstructed by an additional procedure.
representingthemassequencesofsubprocesses(i.e.,groupsof We assume that the majority of the log messages l and the
i
similar contexts). Since subprocesses represent contexts (co- sequences s describe normal system behaviour.
j
Failure Type Identification (FTI). Given a set of detected III. CLOG:METHODFORLOG-BASEDFAILURE
failure sequences A and the set of failure types identifiers IDENTIFICATION
T = {t ,t ...t }, where w denotes the number of unique
1 2 w Toaddresstheproblemoffailureidentification,wepropose
failuretypeidentifiers,thetaskoffailuretypeidentificationis
CLog. Fig. 3 gives an overview of the method. It has three
finding a function f(φ(s )):A(cid:55)→T.
i parts1)logparsing,2)context-awaresubprocessesextraction,
Failure Identification (FI). Given the sets L,T,S, and and 3) failure identification. The log parsing, as a general
J, the task of failure identification is finding the set preprocessingprocedureinloganalysis[13],extractstheevent
A˜ = {(s 1,t 1),...(s i,t i)...(s |A|,t |A|)}, where the failure templates from the incoming raw log event sequences, trans-
sequences iisdetectedbyestimatingthenormalityscorefunc- forming the raw log sequences into sequences of log events.
tionp˜+(φ˜(s i))andthethresholdsa˜ 1anda˜ 2,whileitstypet iis The event sequences are processed by the context-aware
identifiedbytheestimateoff˜(φ˜(s i)).Theestimatesofφ˜(s i), subprocesses extraction part, converting them into sequences
p˜+(φ˜(s i)) and f˜(φ˜(s i)) further are used for representing, and of subprocesses. This part leverages our observation that by
failure identification on novel sequences. CLog addresses the representing the log sequences on a level of subprocesses,
problem by finding suitable representation for the sequences the entropy of the representation sequence is smaller. This
φ˜(s i) (Section III-B), which are used to find estimates for p˜+ increases the stability of the input and reduces the impact
(Section III-C1) and f˜(Section III-C2). of the unstable logs. Finally, the processed log sequences of
subprocesses are given as input into the failure identification
part.Thelatteriscomposedoftwomodules(a)failuredetector
subprocesses/symbols and(b)failuretypeidentification(FTI).Thegoalofthefailure
6 10 yportne
50 detector is to detect the failure sequences of subprocesses.
5
518 raw events
4 518 raw event orig.seq. The FTI module further identifies the failure types based egareva
on operators experience. CLog has two modes of operation:
3
2 offline and online. During the offline phase, the parameters
1 of the log parser, context-aware subprocesses part, and failure
60s 120s 180s 240s 300s orgi.seq.len. identification parts are learned, and the models are induced
window size
and stored. In the online phase, the stored models are loaded
Fig.2. Entropy(measuringinstability)increaseswithmoreuniquesymbols. andusedtoidentifyfailures.Inthefollowing,wedescribethe
internal mechanisms of the three parts of CLog in detail.
time axis window size (e.g., 60s)