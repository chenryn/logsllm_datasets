title:Explanation Beats Context: The Effect of Timing &amp; Rationales
on Users' Runtime Permission Decisions
author:Yusra Elbitar and
Michael Schilling and
Trung Tin Nguyen and
Michael Backes and
Sven Bugiel
Explanation Beats Context: The Effect of Timing & 
Rationales on Users’ Runtime Permission Decisions
Yusra Elbitar, CISPA Helmholtz Center for Information Security, Saarland University; 
Michael Schilling, CISPA Helmholtz Center for Information Security; Trung Tin 
Nguyen, CISPA Helmholtz Center for Information Security, Saarland University; 
Michael Backes and Sven Bugiel, CISPA Helmholtz Center for Information Security
https://www.usenix.org/conference/usenixsecurity21/presentation/elbitar
This paper is included in the Proceedings of the 30th USENIX Security Symposium.August 11–13, 2021978-1-939133-24-3Open access to the Proceedings of the 30th USENIX Security Symposium is sponsored by USENIX.The Effect of Timing & Rationales on Users’ Runtime Permission Decisions
Explanation Beats Context:
Yusra Elbitar§*, Michael Schilling§, Trung Tin Nguyen§*, Michael Backes§, Sven Bugiel§
§ CISPA Helmholtz Center for Information Security, * Saarland University
Abstract
Current mobile platforms leave it up to the app developer
to decide when to request permissions (timing) and whether
to provide explanations why and how users’ private data are
accessed (rationales). Given these liberties, it is important
to understand how developers should use timing and ratio-
nales to effectively assist users in their permission decisions.
While guidelines and recommendations for developers ex-
ist, no study has systematically investigated the actual inﬂu-
ence of timing, rationales, and their combinations on users’
decision-making process. In this work, we conducted a com-
parative online study with 473 participants who were asked
to interact with mockup apps drawn from a pool of 120 vari-
ations of 30 apps. The study design was guided by devel-
opers’ current permission request practices derived from a
dynamic analysis of the top apps on Google Play. Our results
show that there is a clear interplay between timing and ra-
tionales on users’ permission decisions and the evaluation
of their decisions, making the effect of rationales stronger
when shown upfront and limiting the effect of timing when
rationales are present. We therefore suggest adaptation to the
available guidelines. We also ﬁnd that permission decisions
depend on the individuality of users, indicating that there is
no one-ﬁts-all permission request strategy, upon we suggest
better individual support and outline one possible solution.
1 Introduction
Mobile platforms such as Android and iOS handle some of
users’ most private data, can precisely record information
using available sensors, and are “always on”. To keep users in
control, these platforms make it possible for users to delegate
access rights (permissions) to apps. As such, the user decides
which app is granted which permissions, while it is up to the
app developer to decide when to ask the user for permission
and whether to provide an explanation as to why and how
data is accessed. The timing of permission requests, along
with the accompanying explanations or “rationales”, form a
one-way communication channel from developers to users.
This channel conveys information meant to help users make
informed permission decisions which reﬂect their individual
values and privacy preferences in a given context.
Prior work [1] as well as current Google guidelines [2]
contain recommendations for developers about when and how
permissions should be requested. Although the available ad-
vice seems straightforward, there is not enough scientiﬁc evi-
dence to thoroughly support it. We unfortunately do not know
how timing, rationales, and their combinations affect users’
decisions, which strategies in asking for permissions help
users the most, and whether those guidelines agree with users’
preferences. In the literature, a large body of work has focused
on understanding the reasons behind users’ permission deci-
sions [3–9], but all those prior studies have been conducted
either on the obsolete install-time permission model or on the
current permission model but without considering the differ-
ent variations depending on timing and rationales within the
model itself. Other researchers studied the isolated effect of
rationales on users’ permission decisions [10] or developers’
current rationale practices [10, 11]. Prior works that consid-
ered both timing and rationales only reported the status quo
of developers’ current permission request practices [12]. This
leaves a gap in the understanding of the effects and interac-
tions of these variables on users’ decisions and whether these
decisions mirror the individual interests of users.
In this work, we will focus on how timing (upfront/in-
context) and rationales (presence/absence) affect users’ per-
ception of their decision as well as how developers can use
these factors to best support users in deciding whether to
grant permissions. To answer those questions, we conducted
the ﬁrst analysis (to the best of our knowledge) of the com-
munication channel for permission requests between the app
developer and the user from both perspectives. We started by
dynamically analyzing the top apps on Google Play to explore
how developers currently request permissions at app runtime
(Section 4). During this ﬁrst step, we captured over 2,500
dangerous permission requests. Based on those ﬁndings, we
then designed and conducted a comparative user study with
USENIX Association
30th USENIX Security Symposium    785
473 participants from Amazon MTurk to investigate the effect
of timing, presence/absence of rationales, and their interac-
tions on users’ permission decisions (Section 5). Our study
focused on one standardized rationale design and wording
which was informed by the empirical analysis. To ensure gen-
eralizability, we provided participants with realistic settings
by using a total of 30 interactive mockup apps. We created
four versions of each app to request a permission for each pos-
sible combination of timing and rationales (i.e., upfront with
and without rationale, and in context with and without ratio-
nale). Throughout our study we collected answers to around
1,800 permission requests which capture participants’ permis-
sion decision, their perception of having made an informed
decision, their satisfaction with the decision, their perceived
control over the decision, and how clearly they understood
the purpose of the requested permission.
Our results (Section 6) indicate a mutual interplay between
the timing of permission requests and rationales. Overall, we
found that rationales increase grant rates and have a positive
effect on users’ perception of their decisions. However, this
effect is stronger when rationales are added upfront rather
than in context. As for timing, on one hand, asking for per-
missions in context has a positive effect on users’ perception
when no rationales are present. On the other hand, requesting
permissions in context always has a positive effect on grant
rates, regardless of the presence of rationales. Based on these
ﬁndings (Section 7), we suggest the adaptation of Google’s
current guidelines [2] to better support users in their decision-
making process. Going beyond these aspects, however, we
also found that permission decisions depend on individual dif-
ferences between users. As a consequence, we argue that there
is no one-size-ﬁts-all permission request strategy. Therefore,
current mobile platforms could beneﬁt from built-in support
for users to customize permission requests. This could be
realised through a system setting that would enable users to
conﬁgure when they would like to see permission requests
and whether they prefer to see rationales.
2 Background
Apps run in a limited-access sandbox and need permissions
for certain features (e.g., camera and microphone) and user’s
private data (e.g., contacts and location). In previous versions
of Android, permissions were requested at app installation
time, meaning that users could either grant all requested per-
missions or abort the installation process. In Oct. 2015, An-
droid 6.0 introduced the runtime permission model, where
dangerous permissions (i.e., permissions that protect sensi-
tive data or functionalities) are requested at runtime. Un-
der this model, similar permissions are grouped together
(e.g., Read_Contacts and Write_Contacts belong to the
CONTACTS group). To request a permission, the developer
uses the requestPermissions() API which the user sees as
a system dialog of the requested permission group (Figure 1a).
(a) Permission request
(b) Sample rationale
Figure 1: Android’s permission dialog and a sample rationale.
The runtime permission model encourages developers to
help users understand why an app requires certain permissions.
Developers can decide when a permission is requested and if
they want to provide rationales, thereby implicitly opening
a one-way communication channel with the users to inform
them about the intentions of the app. The request can either
be made upfront at app launch or in context, when the app ac-
cesses the protected resource. As for rationales, developers are
free to choose the design and wording of rationales (e.g., Fig-
ure 1b). A rationale can either be provided before or after a per-
mission request, or only after the request has been denied us-
ing the shouldShowRequestPermissionRationale() API.
In the light of these liberties, it is essential to understand the
effect of timing and presence/absence of rationales on users’
decision-making process to better support developers in re-
questing permissions.
3 Related Work
Both developers and users are an essential part of the runtime
permission model. On one hand, developers provide informa-
tion about permission requests through context and rationales
in hope of permission approvals that are necessary for the in-
tended functionalities of their apps. On the other hand, users
utilize the provided information to make an informed decision
in accordance with their individual preferences. Unfortunately,
users are often not able to make informed decisions because
they do not understand the requested permissions, their pur-
pose, and the risks involved with granting them [7, 13–15].
Consequently, their expectations are often violated [4].
As a solution, prior research suggested providing rationales
to clarify why the requested permission is needed by the
app [16–22]. Tools using automated procedures to extract this
information were created to help developers who might forget
to explain all permission usages or are not aware of all usages
(e.g., due to 3rd party code) [8,23,24]. Additionally, the status
quo of rationales revealed that only a small portion of apps
provide rationales [10, 11], and if provided they do not com-
municate useful information, except that a speciﬁc permission
is required [11]. Based on these ﬁndings, the challenge is to
help developers create meaningful rationales [25], which is or-
thogonal to understanding the effect of the presence/absence
of rationales on users’ permission decisions.
786    30th USENIX Security Symposium
USENIX Association
(a) Step 1 identiﬁes timing of permission requests: A set of
heuristics are applied on extracted paths, consisting of a list
of app-states from start to each permission request.
(b) Step 2 identiﬁes rationales: Extracted paths are rerun
twice, in the ﬁrst run all permissions are denied, in the second
run rationales are extracted.
Figure 2: Steps of the empirical analysis
Other tools to support developers include solutions to au-
tomatically migrate install-time permission requests to the
runtime permission model [12, 26], or guidelines on how
permissions should generally be requested to minimize the
burden on users [1]. Recent work also developed a tool that
warns developers if their requested permissions are unlikely
to be requested by similar apps [27].
To reduce the burden on users, previous work suggested
to predict users’ permission decisions [5] based on a set of
privacy proﬁles [5, 6, 28–30] or to provide them with pri-
vacy nudges [9, 31]. Researchers also proposed a permission
manager that would allow users a ﬁne-grained permission con-
trol [32]. This line of work considers the current permission
model as inadequate or incomplete and takes a more radical
approach to aid users in their permission decisions. However,
these changes need to be adopted by system vendors.
The reasons why users grant or deny permissions has re-
ceived considerable attention in research. It was shown that
users’ decisions often depend on the functionality associated
with the permission [3–7], the perceived permission sensitiv-
ity [3,4,8], the user’s prior privacy experience [9] and privacy
concerns [3]. We considered all these factors as control vari-
ables in our study with the aim of extending previous work.
4 Empirical Analysis
We conducted an empirical analysis of rationales and timing
of permission requests in the top apps from Google Play. The
main goal of this analysis was to provide a valid foundation
for the standardized rationale design and select the apps for
the user study (see Sections 5.5 and 5.6 for more details). Our
crawler collected the top 100 free apps in each category from
Play (Dec. 2018–June 2019). We expected to ﬁnd a repre-
sentative sample of apps using runtime permission requests,
since we conducted the analysis three years after the runtime
permission model was introduced (with the release of An-
droid 6 in Oct. 2015) and one month after this model became
mandatory for all new apps and app updates [33]. The top
100 apps varied during the 7-months long crawling period.
We therefore collected more than 200,000 unique apps.
Our initial approach to detect timing of permission requests
and rationales was to use static analysis. However, we discov-
ered that this approach cannot provide reliable information
about the exact position of permission requests in the GUI
control-ﬂow. Thus, we used static analysis only to reduce the
number of apps that will be subjected to dynamic analysis by
ﬁltering out all apps that do not request dangerous permissions
in their manifest and do not call the requestPermissions()
API. We also removed non-English as well as game-related
apps. From the resulting set of 12,794 apps, we then randomly
selected 10,000 apps for further analysis.
4.1 Classiﬁcation of Permission Requests
For the dynamic analysis we extended DroidBot [34], a
lightweight test input generator for Android apps. In two anal-
ysis steps, we determined the timing of permission requests
(step 1) and the presence of rationales (step 2).
Identify timing (step 1): This step occupied most of the
dynamic analysis time (~30–60 min per app). As shown in
Figure 2a, we ﬁrst installed and launched the app of interest.
Then we waited around 60 seconds before exploring the app.
This step was important to correctly identify upfront permis-
sion requests that would otherwise have been categorized as
in-context because some apps take time to load (e.g., using a
splash screen). The output of the dynamic analysis was the
shortest path to all permission requests found. Each path con-
sisted of a list of states from app launch to the permission
request of interest, on which we applied a set of heuristics to
USENIX Association
30th USENIX Security Symposium    787
Perm.req. 1Perm.req. 2App statesInstall and explore APKUpfront or in context?APKInitialstateInstall APKand run paths,deny all perm. req.App statesRationale 1Rationale 2+With or without rationale?Rerun pathsPathsAPKPerm.req. 1Perm.req. 2Initialstateidentify the timing. For example, if the permission request ap-
peared without clicking on some UI element, we considered
the timing upfront.
Identify rationales (step 2): To also ﬁnd rationales that
were only displayed after a permission has been denied, we
ﬁrst reinstalled the app, followed each permission request path
from step 1, and denied all requests (as shown in Figure 2b).
Then, we ran each path again and collected the resulting app
states, possibly with new rationale messages. To extract these
messages, we used rationales that were obtained with a CNN
classiﬁer by previous work [11] in a Latent Semantic Analy-
sis (LSA) to group similar rationales under one topic. These
topics were then used in a semantic similarity analysis [35]
that assigned a score to each sentence in the permission re-
quest path. All sentences that were at least 40% similar to
a rationale topic were then manually veriﬁed as rationales.
We used the evaluation of 100 randomly selected permission
requests (50 categorized with rationale and 50 without) as a
benchmark to evaluate this threshold. The classiﬁcation of
this subset had a precision of 94% and a recall of 100%.
From our initial app set, we successfully analyzed 7,998
apps and found 2,071 apps that requested at least one dan-
gerous permission at runtime (total of 2,569 permission re-
quests). Upon closer inspection, we found that part of this
discrepancy was due to the fact that many apps included the
requestPermissions() API in third-party library code that