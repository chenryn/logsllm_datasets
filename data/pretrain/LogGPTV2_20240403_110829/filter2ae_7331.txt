# 【缺陷周话】第48期：动态解析代码

## 译文声明
本文为翻译文章。译文仅供参考，具体内容及含义以原文为准。

## 1. 动态解析代码概述
许多编程语言支持动态解析源代码指令，这使得程序能够根据用户输入执行相应的命令。如果不对这些输入进行适当的验证，程序可能会误认为用户提供的指令是无害的，并直接执行这些指令。攻击者可以通过特定的URL将任意代码传递给`eval()`语句，从而导致远程代码执行。这种攻击会利用目标Web服务的权限，包括操作系统命令的执行权限。本文将以Java语言为例，分析“动态解析代码”缺陷的原因及其修复方法。更多详细信息，请参阅CWE ID 95: Improper Neutralization of Directives in Dynamically Evaluated Code (‘Eval Injection’)（[http://cwe.mitre.org/data/definitions/95.html](http://cwe.mitre.org/data/definitions/95.html)）。

## 2. 动态解析代码的危害
该漏洞可被攻击者利用来注入恶意代码，进而访问受限的数据和文件。几乎在所有情况下，注入恶意代码都会导致数据完整性受损，甚至可能导致任意代码执行。从2018年1月至2019年8月，CVE中记录了一条与此相关的漏洞信息：

| CVE | 概述 |
| --- | --- |
| CVE-2018-7046 | Kentico 版本9到11中的任意代码执行漏洞允许远程认证用户通过页面 -> 编辑 -> 模板 -> 编辑模板属性来动态解析上下文代码以执行任意操作系统命令。注意：供应商已修复该漏洞，授权用户可以编辑和更新ascx代码布局。 |

## 3. 示例代码

### 3.1 缺陷代码
以下代码片段展示了如何获取JavaScript脚本字符串并将其作为命令执行。第15行获取请求参数`script`，第16行调用`Context`类的静态方法`enter()`，返回与当前线程关联的对象`cx`。第17行对象`cx`调用`initStandardObjects()`方法初始化标准对象，并返回一个`Scriptable`实例化对象`scope`。第18行调用`evaluateString()`方法执行JavaScript脚本字符串`code`。当`script`参数值合法时，程序将正常运行。例如，当`script`值为 `"8 + 7 * 2"` 时，`result`变量将被赋值为22。然而，攻击者可能提供有效的但具有恶意的操作。如果底层语言提供了访问系统资源或执行系统命令的途径，这种攻击会更加危险。例如，JavaScript允许调用Java对象。如果攻击者将`"java.lang.Runtime.getRuntime().exec("shutdown -hnow")"`指定为`script`的值，则主机系统将会执行关机命令。

使用代码卫士对该示例代码进行检测，可以检出“动态解析代码”缺陷，显示等级为高。缺陷出现在第18行，如图1所示：
图1：动态解析代码检测示例

### 3.2 修复代码
在修复后的代码中，第18行调用了`setClassShutter()`方法，其参数是一个实现了`ClassShutter`接口的子类。该接口的方法`visibleToScripts()`用于控制程序中的类是否对脚本可见。第23行指定了不允许脚本访问或使用`java.lang.Runtime`包下的所有类及方法。再次使用代码卫士对修复后的代码进行检测，可以看到“动态解析代码”缺陷已被消除。如图2所示：
图2：修复后检测结果

## 4. 如何避免动态解析代码
应尽可能避免动态解析源代码。如果应用程序的功能确实需要动态解析代码，不应直接执行未经验证的用户输入。建议创建一份合法操作和数据对象的列表，用户只能从中选择内容。