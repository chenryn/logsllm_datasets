SEM, m can be replaced with a suitable keyed (or,
more accurately, randomized) hash such as the well-
known HMAC [14]. (In that case, Alice would send
HM ACr(m) where r is a one-time random value
used a key in the HMAC computation.)
Alice may also (optionally) enclose her SAS
certiﬁcate.
1This can happen if a wireless device, e.g., a cell phone,
is momentarily out of range of any base station.
Step 2. Having received Alice’s request, SEM
obtains CertA (either from the request or from
If revoked,
local storage) and checks its status.
SEM replies with an error message and halts the
protocol. Otherwise, SEM compares the signature
index in the request to its own signature counter.
In case of a mismatch, SEM replies to Alice with
the lowest-numbered half-signature produced in
the last protocol run and aborts.
Next, SEM proceeds to verify the received public
key (SK i
A) based on Alice’s SAS root key contained
in the certiﬁcate. (If this is Alice’s initial request,
the signature counter is initialized to n − 1, as
mentioned above.) Speciﬁcally, SEM checks that
hn−i
A (SK i
A. In case of a mismatch, SEM
replies to Alice with the last recorded half-signature
and aborts the protocol.
A) = SK n
Next, SEM signs the requested message with its
private key to produce:
A]SEM .
Other attributes may also be included in SEM’s
half-signature, e.g., a timestamp. SEM decrements
Alice’s signature counter, records the half-signature
and returns the latter to Alice.
[CertA, m, i, SK i
In the above, SEM assures that – for a given SAS
certiﬁcate – exactly one signature is created for
A] tuple. We refer to this property as
each [i, SK i
the SAS Invariant.
records
Step 3. Alice (who is assumed to be in possession
of SEM’s certiﬁcate at all times) veriﬁes SEM’s
it and decrements her
half-signature,
signature counter.
If SEM’s half-signature fails
veriﬁcation or its attributes are wrong (e.g., it signs
a diﬀerent message than m or includes an incorrect
signature counter j 6= i), Alice aborts the protocol
and concludes that a hostile attack has occurred.2
(See Section 7 below.)
Finally, Alice’s SAS signature on message m has the
following format:
SIGi = [CertA, m, i, SK i
A]SEM , SK i−1
The second part, namely SK i−1
is Alice’s half-
A ,
signature. As mentioned earlier, it is actually a
one-time signature: hA(SK i−1
A ) = SK i
A.
A
Note that Alice must use her one-time keys in
In particular, Alice must not re-
unless,
strict sequence.
quest a SEM half-signature using SK i−1
A
2Our communication channel assumption rules out non-
malicious packets errors.
in the last protocol run, she obtained SEM’s half-
signature containing SK i
A.
5.3 SAS Signature Veriﬁcation
SAS signature veriﬁcation comes in two ﬂavors:
light and full. The particular choice depends on the
veriﬁer’s trust model. Recall that the philosophy
of SAS is based on much greater (yet not uncon-
ditional) trust placed in a SEM than in a regular
user. If a veriﬁer (Bob) fully subscribes to this, i.e.,
trusts a SEM more than Alice, he can chose light
veriﬁcation. Otherwise, if Bob is equally suspicious
of SEMs as of ordinary users, he can choose full
veriﬁcation.
Light veriﬁcation involves the following steps:
1. Obtain and verify3 CertSEM
2. Verify
SEM’s
[CertA, m, i, SK i
A]SEM
RSA
half-signature:
3. Verify Alice’s half-signature: hA(SK i−1
A )
SK i
A
Full veriﬁcation requires, in addition:
4. Verify CertA
5. Check that i < n
6. Verify Alice’s SAS root key: hn−i
A)
A (SK i
SK n
A
?=
?=
Note that light veriﬁcation does not involve check-
ing Alice’s SAS certiﬁcate. Although this may
seem counter-intuitive, we claim that SAS signature
format (actually SEM’s half-signature) already in-
cludes CertA as a signed attribute. Therefore, for a
veriﬁer who trusts the SEM, step 2 above implicitly
veriﬁes CertA.
It is easy to see that, owing to the trusted nature
of a SEM and the SAS Invariant, light veriﬁcation
is usually suﬃcient. However, if a stronger property
(such as non-repudiation) is desired, full veriﬁcation
may be used.
5.4 State and Registration
As follows from the protocol description above,
both Alice and the SEM maintain state. Alice’s
SAS state amounts to the following:
CertA, CertSEM , SK 0
A, i,{SIGn, ..., SIGn−i−1}
3This may be done infrequently.
The ﬁrst three values are self-explanatory. The
fourth is Alice’s current signature counter, (i), and
the rest is the list of previously generated signatures
for the same CertA. The state kept by the SEM (for
each user) is similar:
CertA, i,{SIGn, ..., SIGn−i−1}
The amount of state might seem excessive at ﬁrst,
especially considering that some users might be on
small limited-storage devices. There are some opti-
mizations, however. First, we note that Alice can
periodically oﬀ-load her prior signatures to some
other storage (e.g., to a workstation or a PC when
the PDA is charging). Also, it is possible to dras-
tically reduce state maintenance for both users and
SEMs if successive signatures are accumulated. For
example, each SEM’s half-signature can addition-
ally contain the hash of the last prior SAS signa-
ture. This optimization results in storage require-
ments comparable to those of a traditional signature
scheme.
Registration in SAS can be done either oﬀ- or
on-line.
In the oﬀ-line case, SEM obtains Alice’s
SAS certiﬁcate via manual (local or remote) instal-
lation by an administrator or by fetching it from the
directory service. To register on-line, Alice simply
includes her SAS certiﬁcate as an optional ﬁeld in
the initial SAS signature request to the SEM. Be-
fore processing the request as described above, the
SEM checks if the same certiﬁcate is already stored.
If not, it installs in the certiﬁcate database and cre-
ates a new user entry. (See Figure 2.)
6 Analysis
We now consider the eﬃciency and security as-
pects of the SAS signature method.
6.1 Eﬃciency
The cost of our signature protocol can be broken
up as follows:
1. Network overhead: round-trip delay between
Alice and SEM
2. SEM computation: signature computation plus
other overhead (including hash veriﬁcation of
user’s one-time public key, database processing,
etc.)
3. User computation: veriﬁcation of the SEM
half-signature and other (commitment to stor-
age) overhead.
Clearly, (1) and (3) are extra steps as compared
with a traditional signature method. The extra cost
of light signature veriﬁcation (referring to the steps
in the previous section) is only in Step 3 which con-
sists of a single hash operation. Full veriﬁcation
costs an additional certiﬁcate validation (Step 4) as
well as (n − i) hash operations in Step 5.
6.2 Security Analysis
We claim that
the SAS signature method
achieves the same security level as a traditional dig-
ital signature scheme if SAS signature and veriﬁca-
tion protocols are executed correctly. Due to space
limitations, we only present an informal security
analysis.
To forge a SAS signature, an adversary can at-
tempt to:
TYPE 1: forge a SEM’s half-signature (i.e., an
RSA signature) or
TYPE 2: ﬁnd
a
quantity SK∗
A) = SK i
A.
H(SK∗
included in SEM’s half-signature.
that
A is
A such
Recall that SK i
Figure 2. SEM architecture
Clearly, a TYPE 1 attack is an attack on the un-
derlying signature scheme, i.e., RSA, and, as such, is
not speciﬁc to the SAS method. Therefore, we only
consider TYPE 2 attacks. However, ﬁnding SK∗
A
implies a successful attack on either the collision-
resistance or the one-wayness property of the un-
derlying hash function hA(). Even we were to allow
A) ?= SK i
the possibility of the adversary mounting a success-
ful TYPE 2 attack, the scheme remains secure if full
veriﬁcation is used. (Recall that full veriﬁcation in-
cludes not only checking H(SK∗
A but also
hn−i
A) ?= SK n
A (SK i
A.)
We observe that,
in any practical digital sig-
nature scheme, a collision-resistant one-way hash
function is ﬁrst applied to the message in order to
produce a ﬁxed-length digest which is then signed.
Hence, a successful TYPE 2 attack on a SAS signa-
ture is, at the same time, an attack on the digital
signature scheme.
6.3 Disputes
In case of a dispute between a signer (Alice) and a
veriﬁer (Bob), the latter submits the disputed SAS
signature to an unbiased arbitrator who starts by
verifying the following:
• Alice’s and SEM’s certiﬁcates are valid and cer-
tiﬁed by a CA.
• SEM’s half-signature is valid.
• Alice’s one-time key is a hash pre-image of the
value in SEM’s half-signature.
• The SAS root key in CertA can be derived from
the one-time public key by repeated hashing.
This is essentially the full SAS signature veriﬁcation
as described earlier. If any of the above steps fails,
the arbitrator rules in Alice’s favor. Otherwise, Bob
wins the dispute.
Assuming the above procedure succeeds, Alice
is asked to produce a diﬀerent SAS signature with
the same one-time key (i.e., same one-time signa-
ture). If Alice can come up with such a signature
(meaning that the message signed is diﬀerent from
the one in the disputed signature), the arbitrator
concludes that Alice’s SEM cheated or was compro-
mised. This conclusion is based on the apparent
violation of the SAS Invariant.
If Alice fails to
produce a diﬀerent signature, the arbitrator con-
cludes that Alice attempted to cheat.
7 Denial of Service
The SAS signature protocol, unlike traditional
signature schemes,
involves multiple parties and
communication.
It is therefore subject to Denial
of Service (DoS) attacks. Since we assume that the
communication channel is reliable (cf. Section 4.3),
only hostile DoS attacks are of interest. Also, our
channel assumption states that all messages even-
tually get through; thus, attacks on the communi-
cation media are ruled out.
There are two types of DoS attacks: user attacks
and SEM attacks. The purpose of a user attack
is to deny service to a particular user whereas the
purpose of a SEM attack is to deny service to all
users served by a SEM. User attacks can be further
divided into request and reply attacks. Request at-
tacks involves modifying (or injecting) a user’s sig-
nature request and a reply attack – modifying a
SEM’s reply.
7.1 User Attacks
Suppose that an adversary (Eve) intercepts the
signature request and mounts a request attack. In
this case, SEM receives a request that is perfectly
legitimate (well-formed) from its point of view. It
proceeds to sign it and send the signed reply back
to Alice. Clearly, Alice discards the reply because it
contains a signature for a diﬀerent message. If Eve
prevents the reply from reaching Alice, she gains no
advantage since, as explained above, forging a signa-
ture requires Eve to come up with a one-time public
key which she cannot do without breaking the hash
function. Even if the reply does not arrive immedi-
ately, according to our communication assumption,
it eventually reaches Alice who promptly detects an
attack.
A slight variation on the above occurs when Eve
has in her possession the last SAS signature gener-
ated by Alice. In this case, Eve can contact Alice’s
SEM with a well-formed request and without Alice’s
knowledge, i.e., Alice is oﬀ-line. However, this at-
tack results in the same outcome as the above. This
is because, eventually, Alice requests a new signa-
ture and SEM replies with the last (signed) reply.
Alice, once again, detects an attack.
We note that these attacks can be prevented: one
way to do so is for Alice not to reveal her i-th signa-
ture until (i− 1)-st signature is computed. In other
words, every other signature would be used strictly
for this purpose. Then, if we suppose that Alice-
SEM communication is private, revealing SIGi to
Bob (or Eve) is safe since a successful request to Al-
ice’s SEM would require knowledge of SKi−1 which
Alice does not reveal until the next signature is re-
quested. Yet another solution is to use a second,
diﬀerent hash chain for the sole purpose to authen-
ticate Alice’s requests to the SEM.
All in all, request attacks, while possible, are de-
tected by the SAS signature protocol due to its “fail-
stop” property: any manipulation of the signature
request is detected by the user who can then inval-
idate its own certiﬁcate.
User reply attacks are comparatively less eﬀec-
tive. If Eve modiﬁes SEM’s reply, short of forging
an RSA signature, Alice detects that the reply is not
what she expected and continues re-transmitting
her signature request.
7.2 SEM Attacks
By virtue of serving a multitude of regular users,
a SEM is a natural DoS attack target. This is not
unique to SAS. For instance, it is easy to mount an
eﬀective DoS attack against an OCSP [1] (or even
worse, a TSP [16]) server.
It suﬃces for the ad-
versary to ﬂood the victim server with well-formed
requests, i.e., requests for which the server is “au-
thoritative” in OCSP. Since the server must digi-
tally sign all replies, it will slowly grind to a halt.
In SAS, it is appreciably more diﬃcult for the
adversary to launch this type of an attack. The
stateful nature of the SEM requires each signature
request to be well-formed: it must contain the ex-
pected value of the current one-time public-key, i.e.,
the pre-image of the previously used public-key. All
other requests are promptly discarded.
Therefore, in order to force the SEM to perform
any heavy-weight tasks (of which signing is really
the only one), the adversary must mount simulta-
neous user request attacks on as many users as pos-
sible thus hoping to ﬂood the SEM. However, even if
this were possible, the attack would quickly subside
since the SEM will only perform a single signature
operation per user before demanding to see a pre-
image (next one-time public key). As we already
established, ﬁnding the pre-image of the last signed
one-time public key is computationally infeasible.
7.3 Loss of State
As SAS requires a non-trivial amount of state to
be maintained by both users and SEMs, we need to
consider the potential disaster scenarios that result
in a loss of state.
Suppose that Alice looses all records of her prior
signatures along with the signature counter. We
further assume that she still has possession of her
SAS certiﬁcate and the secret hash chain seed. Since