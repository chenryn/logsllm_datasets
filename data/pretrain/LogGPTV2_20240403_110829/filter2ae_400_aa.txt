原文在此->[Signing-Into-Billion-Mobile-Apps-Effortlessly-With-OAuth20](https://www.blackhat.com/docs/eu-16/materials/eu-16-Yang-Signing-Into-Billion-Mobile-Apps-Effortlessly-With-OAuth20-wp.pdf)。  
译文在不改变原文的基础进行了部分调整。  
术语：
  * [implicit flow](https://labs.hybris.com/2012/06/05/oauth2-the-implicit-flow-aka-as-the-client-side-flow/)
#### 摘要
主流的身份提供商（IdP）使用OAuth2.0协议来支持单点登录服务。由于此协议最初设计用于满足第三方网站的授权需求，所以在使用OAuth来支持移动应用程序（app）身份验证时，研究人员已经发现了很多的缺陷。据我们所知，之前包括BlackHat
USA'16 [3]，CCS'14 [2]和ACSAC'15
[5]提到的所有攻击都需要与受害者进行交互。例如通过恶意应用程序网络窃听等。但我们发现了第三方app开发人员不合理的使用OAuth导致的一种影响甚广的新型攻击手法，攻击者可以远程利用该攻击，悄无声息的登录受害者的app帐户。为了证明该漏洞的普遍性和严重影响，我们编写了一个exp来检测在美国和中国排名前600的android应用，这些应用都使用了顶级IdP（即Facebook
，Google或新浪）提供的基于OAuth2.0的身份验证服务。结果令人震惊：这些应用程序平均有41.21％容易受到新的攻击。我们已经向受影响的IdP汇报了我们的发现，并收到了他们不同形式的确认/奖励。
### 1\. 介绍
由于第三方网站采用的基于OAuth2.0的单点登录（SSO）服务广受用户喜爱，最近，许多主流身份提供商（IdP）（如Facebook，Google和Sina）已经将OAuth2.0协议进行了调整，以在其社交媒体平台上支持第三方app的SSO。但由于移动应用程序SSO服务的端到端系统设置和操作环境的差异，原来的OAuth2.0协议不够用了。这一点尤其体现在OAuth2.0标准没有定义关键的安全要求和协议细节用来管理SSO过程中第三方（客户端）移动应用程序与其对应的后端服务器之间的交互。因此，各个IdP厂商基于OAuth2.0的应用程序编程接口（API）开发了不同的扩展用来以支持自己平台上的第三方移动应用程序的SSO服务。不幸的是，第三方移动应用程序开发人员无法完全理解IdP提供的文档，同时文档上也并未清晰的记录了可能的安全问题和API使用说明。更糟的是，第三方应用程序开发人员缺乏SSO-API的安全使用指南规范。  
由于上述的问题，我们进一步对使用了顶级IdP服务的第三方移动应用程序进行了测试，发现了一种影响非常广的基于OAuth2.0的SSO服务的问题。这个问题的本质非常普通，仅仅是因为第三方应用的服务器在接受来自客户端app的授权信息不需经过认证，反过来看，这个漏洞其实是依赖于IdP客户移动app发送的信息被篡改所导致的。根据这个新发现的漏洞，我们写了exp，攻击者可以通过OAuth2.0
1毫不费力地登录受害者的移动应用程序帐户，而无需欺骗或与受害者进行交互，例如通过恶意应用程序或网络窃听等等。就目前来说我们的攻击是基于Android平台进行展示的，但攻击手法本身是平台无关的：只要使用了基于OAuth2.0的SSO服务的app，iOS或Android用户都会受到影响。
### 2\. 背景
第三方移动应用的SSO服务细节涉及到四个部分：
  * a. 第三方移动应用程序的后端服务器（app Server）
  * b. IdP的后端服务器（IdP Server）
  * c. 第三方移动应用（App）
  * d. IdP的移动应用（IdP App）
OAuth的最终目的是让IdP服务器（IdP Server）向app Server发出身份证明，比如access token。通过access
token，app Server可以获取到由IdP服务器管理的用户信息，并进一步根据该信息识别用户并授权登录。
#### 2.1 移动平台上的OAuth 2.0协议流程
图1描述了OAuth协议在网站和移动平台上实现的流程。为简单起见，我们首先介绍移动端OAuth实现的协议流程，然后指出与Web站点SSO服务的差异。请注意，由于OAuth不是为手机app设计的，所以RFC和IdP不会为第三方移动应用程序开发人员提供完整的调用流程图。尽管如此，但早已有研究员针对移动端的OAuth安全方面投入了大量的精力[2,3,5,6]，一个被认为是安全的实施方案如下：
  1. 用户访问app，并尝试通过IdP进行登录。app通过手机操作系统（Android）提供的安全通道将应用信息（如包名，签名和请求的权限等）发送给IdP的客户端。
  2. 通过调用低级系统API，IdP客户端（IdP app）可以验证app的应用信息。如果信息无误，那么IdP客户端（IdP app）会向IdP服务器（IdP Server）发送授权请求。
  3. IdP Server收到请求后，会比较来自IdP客户端（IdP app）的授权请求的信息和由第三方移动应用开发者预先注册的信息。如果相同，则IdP服务器（IdP Server）将通过自己的IdP客户端（IdP App）向第三方手机客户端（app）发出access token（AT）和可选的用户信息。
  4. IdP app通过安全通道将access token（AT）返回给app（第三方客户端应用程序）。
  5. 第三方客户端应用程序（app）将AT发送到其后端服务器（app Server）。
  6. 第三方后端服务器（app Server）调用由IdP提供的重要安全SSO-API来调试access token。
  7. 在验证access token的有效性之后，IdP服务器（IdP Server）会向第三方应用服务器（app Server）发送授权信息，同时指明access token发给哪个app。
  8. 只有在授权信息正确的情况下，第三方应用服务器（app Server）才能通过access token获取用户数据。
  9. IdP服务器（IdP Server）返回与access token关联的用户信息。
  10. 通过用户信息，第三方应用程序服务器（app Server）可以识别用户并授权登录。
#### 2.2 OpenID连接协议
由于OAuth2.0最初是为授权而设计的，为了适应认证需求，这就涉及了多次高延迟的请求，即图1（b）的步骤6到步骤9。为了更好地支持使用OAuth2.0进行身份验证（即减少请求次数），像Google和Facebook这样的IdP开发了OpenID
Connect（OIDC）协议[4]和拓展。具体而言，IdP服务器需要对用户信息进行数字签名。如图2所示，签名的用户信息以及原始的access
token，随后会被发送到app Server（第三方移动应用程序的后端服务器）。由于签名不能被攻击者篡改/伪造，app
Server现在可以通过签名直接识别用户。换句话说，app Server可以立即从签名中提取用户信息，而不需要进行高延迟的API调用。  
#### 2.3 网站OAuth实现的不同
从图1所示的协议实现流程图去看，网站和移动端的差异看起来似乎很简单，但实际上正是因为这种简单的不同，导致重要的安全结论并促使OAuth在移动平台上实现的复杂化。可以看到在网站使用OAuth过程中，有三个部分在交互：  
（i）第三方web服务器（Client Server）  
（ii）IdP的后端服务器（IdP Server）  
（iii）终端用户的浏览器（Browser），要求能够支持第三方网站OAuth2.0的SSO。  
而之前聊到过的移动端SSO交互过程，却涉及到了4个部分（a、b、c、d）。首先，（c）和（d）都在用户设备上运行，并且可能被篡改。其次，OAuth2.0协议标准并未涉及到（a）和（c）以及（c）和（d）之间的交互和安全问题。第三，在同一用户设备上可能同时存在（c）和（d），第三方移动应用程序开发人员可能会忍不住直接在（c）和（d）之间进行认证交换（恰好与（a）和（b）之间的直接验证相反，就像OAuth2.0标准中定义的（i）和（ii）之间的直接验证交换一样）。这里再看一个例子，与web服务供应商不同，IdP供应商要求移动应用程序开发人员在OAuth中使用与IdP特定业务逻辑（即授权代码流与隐式流）紧密相关的授权流程，即授权码流程vs无授权码流程（参考文章第二段第二句话[implicit
flow](https://labs.hybris.com/2012/06/05/oauth2-the-implicit-flow-aka-as-the-client-side-flow/)）。此外，典型的移动应用程序的客户端负责更多的消息交换，相反，在第三方网站（及其相应的web服务）的情况下，这些消息是由后端服务器管理。  
### 3\. 不同的错误实现形式