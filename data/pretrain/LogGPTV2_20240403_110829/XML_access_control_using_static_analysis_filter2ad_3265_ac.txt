∗· (Σ
E
E
)
A ∪ {})
4.4 Step 3: Creating query automata
Given a FLWR expression of XQuery, we ﬁrst extract the
XPath expressions occurring in it. If an XPath expression
contains variables, we replace each of them with the XPath
expression associated with that variable.
It is important to distinguish XPath expressions in RE-
TURN clauses and those in other (FOR, LET, and WHERE)
clauses. XPath expressions in FOR-LET-WHERE clauses
examine elements or attributes, but do not access their sub-
ordinate elements. On the other hand, XPath expressions
in RETURN clauses return subtrees including subordinate
elements and attributes.
As an example, consider the XQuery expression given in
Section 2.4. From this XQuery expression, we extract the
following XPath expressions. Observe that the variable $r
is expanded.
FOR-LET-WHERE
/record
/record/diagnosis/pathology/@type
RETURN
/record/diagnosis/pathology
/record//comment
Next, we create a query automaton M r for each r of the
If r occurs in a FOR-LET-
extracted XPath expressions.
WHERE clause, then M r is deﬁned as M [r]. Observe that
we over-estimate r, since we would like to err on the safe
side in our static analysis. When r occurs in a RETURN
clause, M r is deﬁned as an automaton that accepts a path
if and only if some of its sub-paths matches r. Formally,
L(M r
) = L(M [r])· (Σ
E
∗· (Σ
A ∪ {}).
)
This automaton can easily be constructed from M [r].
As an example, let r be /record//comment, which is the
last XPath expression occurring in the RETURN clause.
Then, M r accepts /record/comment, /record/comment/@type,
/record/comment/record, /record/comment/diagnosis, and
so forth.
4.5 Step 4: Comparison of automata
We are now ready to compare schema automata, access
control automata, and query automata. For simplicity, we
ﬁrst assume that predicates do not appear in the access con-
trol policy.
The path expression r is always-granted if every path ac-
cepted by both the schema automaton M G and query au-
tomaton M r is accepted by the access control automaton
M Γ; that is,
L(M r
) ∩ L(M G
) ⊆ L(M Γ
).
When schemas are unavailable, we assume that M G allows
all paths and examine if
L(M r
) ⊆ L(M Γ
).
The path expression r is always-denied if no path is ac-
cepted by all of the schema automaton, query automaton,
and access control automaton; that is,
) ∩ L(M Γ
) = ∅.
When schemas are unavailable, we examine if
) ∩ L(M G
L(M r
L(M r
) ∩ L(M Γ
) = ∅.
The path expression r is statically indeterminate if it is
neither always-granted or always-denied.
As an example, we use the XQuery expression in Section 2.4,
the DTD in Section 2.2, and the access control policy in
Section 3.1. We have already constructed a schema automa-
ton in Section 4.2, an access control automaton in Section 4.3,
and a query automaton for /record//comment in Section 4.4.
It can be easily seen that L(M r) ∩ L(M G) is a singleton set
containing /record/comment and that L(M Γ) does not con-
tain this path. Thus, the last XPath expression ($r//comment)
in the example query is always-denied.
When predicates appear in the access control policy, we
have to use M Γ and M Γ rather than M Γ. We use an under-
estimation M Γ when we want to determine whether or not
a query is always-granted. That is, we examine if
L(M r
) ∩ L(M G
) ⊆ L(M Γ
).
When schemas are unavailable, we examine if
L(M r
) ⊆ L(M Γ
)
Likewise, we use an over-estimation M Γ when we determine
whether or not a path expression is always-denied. That is,
we examine if
L(M r
) ∩ L(M G
) ∩ L(M Γ) = ∅.
role name
1 M (Maintainer)
2 MM (Member Mgmt.)
3
4
IM (Item Mgmt.)
S (Seller)
5 B (Buyer)
6 V (Visitor)
7 UB (Buyer: US only)
8 US (Seller: US only)
item info.
is
information is
rule semantics
Access to all
granted.
Access to all member info.
is
granted, but access to item
info. is not.
Access to all
granted.
A seller cannot see privacy
info., and personal info. (credit
card info.
and proﬁles). A
seller can see who bought his
item. Otherwise, access to
anonymous bidder info.
and
buyer info. is denied.
A buyer cannot see privacy
info., and personal
info. A
buyer can see his own bids and
purchases. Otherwise, access
to anonymous bidder info. and
buyer info is denied.
A visitor cannot see privacy
info., and personal info. A vis-
itor cannot see who sells, bids
and buy an item.
The same access permission as
Buyer except that access to for-
eign items is denied.
The same access permission as
Seller except that access to for-
eign items is denied.
9 UV (Visitor: US only) The same access permission as
Visitor except that access to
foreign items is denied.
Table 1: The sample access control policy
When schemas are unavailable, we examine if
L(M r
) ∩ L(M Γ) = ∅.
4.6 Query Optimization
When an XPath expression r in a XQuery expression is
always-denied, we can replace r by an empty list. This
rewriting makes it unnecessary to evaluate r as well as to
perform run-time checking of the access control policy for r,
and may trigger further optimization if we have an optimizer
for XQuery.
Recall our example XQuery expression in Section 2.4.
When the role is Doctor, static analysis reports that ev-
ery XPath expression is always-granted. Run-time checking
is thus unnecessary. If the role is Intern, static analysis re-
ports that the last XPath expression is always-denied. We
can thus rewrite the query as follows. Observe that com-
ments are not returned by this rewritten query.
{
for $r in document("medical_record")/record
where $r/diagnosis/pathology/@type="Gastric Cancer"
return
$r/diagnosis/pathology
}
5. EXPERIMENTS
We have implemented our static analysis algorithm in
Java (see Appendix A). In this section, we present two ex-
Role: Maintainer
+R, /
Seller
Role:
+R, /
-R, //person[@id != $userid]/creditcard
-R, //person[@id != $userid]/profile
-R, //bidder/personref
-R, //closed auction[seller/@person != $userid]/buyer
-R, //privacy
Role: Visitor
+R, /
-R, //person
-R, //bidder/personref
-R, //seller
-R, //buyer
-R, //privacy
Figure 4: The deﬁnition of sample policy
periments based on this implementation. In the ﬁrst exper-
iment, we evaluate how much the cost of query evaluation
will be reduced by our static analysis and query optimiza-
tion. In the second experiment, we measure the scalability
of our static analysis for very large policies and schemas.
5.1 Effectiveness of Static Analysis
We wish to show the percentage of queries that are made
more eﬃcient, for average, real-world cases. For each query,
we also benchmark the performance increase. First, using a
well-known collection of queries, we show which queries are
made more eﬃcient. Second, using an example document
and the same collection of queries, we measure the number
of nodes exempted from access or runtime access checks.
Settings. We use the sample queries and the DTD devel-
oped by the XMark project5, which is a well-known bench-
mark framework for XQuery based on an auction scenario.
An auction document consists of a list of auction items, par-
ticipants information., etc. The benchmark has 20 sample
queries. For example, the following is Query #4.
for $b in document("auction.xml")//open_auction
where $b/bidder/personref[@person="person18829"]
before $b/bidder/personref[@person="person10487"]
return {$b/reserve/text()}
There are 77 element types deﬁned by the DTD. We wrote
a sample access control policy in which 9 roles are deﬁned.
Each role is associated with 1 through 15 access control
rules. Their semantics are summarized in Table 1. We list a
part of the policy deﬁnitions in Figure 4. Take, for example,
the rules associated with the role Seller. The ﬁrst rule says
that a Seller is allowed to read the document root (/). Fur-
thermore, this grant permission (+R) propagates downward,
i.e., from the document root (/) to all other nodes. However,
there are other rules with denial permission. Recall that the
$userid variable represents the id of the user requesting the
access. Therefore, a buyer can read the contents of his own
//person/creditcard and //person/profile, but not the
credit cards and proﬁles of other users.
Note that the sample policy is a value-based policy, i.e.,
XPath predicates appear in the rules. As described in Sec-
5The XMark project page is available at http://monetdb.
cwi.nl/xml/.
Query #
Query #
1
1
2
2
3
3
4
4
5
5
6
6
7
7
8
8
9
9
10
10
11
11
12
12
13
13
14
14
15
15
16
16
17
17
18
18
19
19
20
20
Query #
Query #
1
1
2
2
3
3
4
4
5
5
6
6
7
7
8
8
9
9
10
10
11
11
12
12
13
13
14
14
15
15
16
16
17
17
18
18
19
19
20
20
M
M
MM
MM
IM
IM
S
S
B
B
V
V
US
US
UB
UB
UV
UV
GGGGGGGGGGGGGGGGGGGG
GGGGGGGGGGGGGGGGGGGG
-DGGGGG
-DGGGGG
GDGGGGDDGGGDG
GDGGGGDDGGGDG
-GDDDDD
-GDDDDD
DGDDDDGGDDDDD
DGDDDDGGDDDDD
-GGGDGGG
-GGGDGGG
-GGG
-GGG
-GGG
-GGG
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-GGGGGGG
-GGGGGGG
-GGGGGGG
-GGGGGGG
DGGDDGGGDDDDDDGGDGGD
DGGDDGGGDDDDDDGGDGGD
-G
-G
-G
-G
-D
-D
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-