taint propagation. However, for backward taint propagation
we reverse the edge direction rules of the control ﬂow graph
to propagate the dependencies in reverse order starting from
the point of interest. This is motivated by the approach taken
by Extractocol [18], which applies inverted taint propagation
rules in Flowdroid to swap the premise and conclusion of the
rules. Our previous work in [19] similarly use inverted tainting
rules for backward taint propagation.
More speciﬁcally, for assignment statements a tainted left-
hand side taints the right-hand side, and for function calls the
taint information of a callee’s arguments is propagated to the
caller’s arguments. We track the tainted objects until there are
no more objects to propagate, either at the object’s deﬁnition
or destruction.
A typical app also contains functionality that generates web
requests to entities other than a web API endpoints of interest.
For example, most ad libraries or analytics libraries have func-
761
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:38:14 UTC from IEEE Xplore.  Restrictions apply. 
tionality to communicate with backend servers, often through a
web API. These are outside the scope of our investigation, and
we therefore exclude popular ad and analytics libraries such as
Google AdMob. The goal of the program slicing module is to
generate program slices that directly relate to HTTP requests
and response processing.
We use static taint analysis to track information ﬂow to
web API endpoints. However, unlike traditional static taint
analysis whose primary goal is to determine the existence of
data ﬂow from taint sources to sinks, in this case we utilize it to
track ﬂows through network-bound objects for reconstructing
web API message templates. Missing a single statement that
has a relationship with the web API message would result in
false negatives. Therefore, it is critical that we capture a robust
representation of the dependencies that lead to the point of
interest invocations. To this end, Flowdroid ﬁts well into our
approach since it effectively solves many of the shortcomings
of static analysis.
Having extracted the network-aware program slices, we
can build the program dependence graph and add additional
augmentation, including constraints from UI elements.
identify the edges that
2) Path Constraints: The constraint extraction module
takes the ﬁltered program slices as input. We leverage many
of the existing functionality of Flowdroid,
including call-
graph construction, points-to analysis, def-use chains, and
taint analysis. The goal of the path constraints module is
to reconstruct the app’s program dependence graph. Since
the dependence graph constructed directly from Flowdroid
cannot
the Android
framework APIs, or does not consider UI elements, we must
make additional augmentations to generate a complete set of
path constraints for any given POI. We augment the built-in
PDG output with additional information from the UI as well as
implicit call information added by the Edgeminer results [20].
We refer to this as an Augmented Program Dependence Graph
(APDG). Our approach ensures that both implicit and explicit
call edges are added to our APDG, improving our accuracy
and reducing false negatives.
implicitly call
To build the APDG, we analyze the Jimple IR slices from
the Program Slicing module and start from each event handler
(onCreate, onClick, onTextChanged, etc.), recursively adding
the callee edges, including the implicit edges known from
EdgeMiner. The results is a set of APDG’s, each starting from
the event handler functions. Furthermore, we analyze the UI
resource ﬁles to identify the Activities and UI elements and
connect them to their respective handlers. We augment our call
graph with UI information so that we can utilize and capture
constraints deﬁned in the XML resource ﬁles, such as max
data input length or data types.
Asynchronous Events: Asynchronous event handling is very
common in Android programming. For example, an app may
construct a portion of the web API request query string into
an object and later, a click event would actually read the saved
object to generate the HTTP request. This is not easily handled
in static analysis, because the ordering of the events may be
lost. For example, FlowDroid assumes an arbitrary ordering of
these events, which can lead to a false negative or incomplete
results. It results in a failure to identify the full dependen-
cies across all events, resulting in an incomplete dependency
graph. Our backward analysis approach in WARDroid naturally
solves this problem because it sequentially backtracks from
the network API point of interest and naturally reconstructs
the order of events as it moves backwards. It also captures
implicit events with minimal effort. Dynamic analysis could
not solve this problem because it lacks sufﬁcient code coverage
capabilities and would result in higher false negative rates.
To further reduce false negatives, we also utilize the re-
sults from Edgeminer [20] which previously solved the issue
of asynchronous and implicit events and identiﬁed 19,647
additional callbacks, as opposed to only 181 identiﬁed by
Flowdroid. Therefore, to enhance the coverage of WARDroid,
we directly use EdgeMiner’s results and added the list to
Flowdroid’s conﬁguration ﬁles. This adds support for many
popular implicit callbacks commonly observed in web request
calls and HTTP libraries, such as AsyncTask and others.
The resulting constraints are expressed in the format of
Z3 [13], and we can then use the string solver (Z3-str [17])
to solve the constraints, or negation of the path constraint
expressions.
3) UI Analysis: We also augment the program dependence
graph using information extracted from the app’s resource ﬁles
that deﬁne the activity layouts. First, we must identify and
correlate a given input element from the XML to the event
listener in the program slice. We identify and tag the ID from
the activity XML ﬁles, resource ﬁles, and the manifest ﬁle.
Event handlers can be directly referenced in the XML, or the
listeners contain a single callback that the framework uses
to initiate the corresponding event handler. We extract the
constraints imposed by UI elements, and tag the corresponding
event handler node in the program dependence graph.
The UI elements impose additional constraints that may be
deﬁned in either of the resource XML ﬁles that conﬁgure the
UI elements. WARDroid handles constraints as deﬁned in Table
I.
TABLE I
SAMPLE UI CONSTRAINTS
Control
Spinner
Checkbox
RadioGroup
TimePicker
DatePicker
android:maxLength
android:numeric
Constraint
x ∈ {spinnerOptions()}
x = {true|f alse}
x ∈ {radioOptions()}
isV alidT ime(x)
isV alidDate(x)
len(x) 
{HTTP Header}
{content}
We model the HTTP request templates using the HTTP pro-
tocol ﬁelds that deﬁne the Method, Scheme, URI, Body, and
Content parameters. Table II illustrates an example template.
The constraints are encoded in the parameters, header, and
body ﬁelds.
VI. WEB API HIJACKING OPPORTUNITIES
Uncovering Web API Hijacking opportunities is facilitated
by the output of WARDroid via the resulting HTTP templates.
Web API hijacking opportunities for speciﬁc API endpoints
are uncovered through evaluation of inconsistencies by gener-
ating requests from the request templates that violate one or
more constraints expressed in the template. Since these are not
conﬁrmed attacks at this phase, we call them opportunities for
exploit similar to [3]. These would only fall into the realm of
actual exploitable vulnerabilities after they have been tested
or shown to lead to actual violation of the security of the
application or user data privacy.
To evaluate the inconsistencies, we employ a string match-
ing approach to automatically test sample requests to de-
termine inputs that could be successful. We further built
heuristics into the test module to identify the server technology
from the response headers. For example, some servers will
disclose the runtime framework, database, and other details
that can be used to ﬁngerprint the server. In our prototype,
we use simple heuristics to identify the web server runtime
(PHP, asp.net, etc) and the backend server (MySQL, mssql).
These are used to suggest further inputs that utilize domain
knowledge, such as generating a simple SQL injection type
input value.
A. Ethical Approach
Our ﬂow-sensitive constraint building process outputs a Z3-
compliant formula as well as a regular expression that repre-
sents the request template that can be replayed by replacing
concrete values for regular expression values that is readable
by a human analyst for manual replay as well as automated
replay.
WARDroid converts the constraints for URI, request tem-
plate, and response objects into regular expressions form for
We were very careful in our analyses to ensure that we
would not cause any harm to the API servers or the mobile
apps. The scope of our work did not require an IRB from
our University, similar to related works such as [3], [22]. All
testing was done in a responsible manner to ensure we did not
cross any ethical boundary. We used test and demo accounts
where possible, and we ensured that no private data was ever
saved from any successful exploit. In one case study, we
763
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:38:14 UTC from IEEE Xplore.  Restrictions apply. 
worked with the app developer and obtained full permission
to test their API.
B. Server Testing
To validate web API hijacking opportunities, we need to
generate concrete values from the resulting HTTP templates
recovered from the apps. At this point, we do not need the
app or the Android framework as we can directly replay
these requests using an HTTP library. For this purpose, we
built a prototype python-based module. The request generation
module takes the constraints expressions from the HTTP
templates and utilizes the Z3-Str constraint solver to assist
in generating concrete values.
1) Generating Input: Using the extracted path constraints
encoded in the request templates, we identify possible invalid
input parameter values by solving constraint negations. To this
end, we use Z3-Str with the regular expression extension. We
additionally take the approach of NoTamper [3] to iteratively
solve the constraint disjuncts rather than solving a complete
negation of the entire constraint.
2) Generating Requests: The request generation module
involves two tasks: (1) constructing new logical constraint
formulas whose solutions correspond to potentially invalid
inputs and (2) solving those formulas to build requests from
templates with concrete values.
Each invalid request sample would ideally test for a unique
opportunity on the web server rather than repeating the same
effective probe. To avoid redundant invalid requests, we con-
vert the constraint formula to disjunctive normal form, and
then we construct an invalid input for each disjunct while
solving the rest of the formula to produce a valid input.
First, we generate concrete requests that satisfy the con-
straints. We generate two valid requests for each template and
then replay these valid requests to the server and save the
response data. Then, we compare both responses and remove
all differences. This effectively removes the noise, such as date
stamps, and useless server-generated values that may change
across responses. The result is two response data traces that
represents the similarity for responses to requests that are
accepted by the server. We manually validate these to check
that we are indeed comparing two responses to truly valid
requests to the API. This will essentially serve as our ground
truth to subsequently compare invalid requests.
3) Evaluating Responses: Lastly, we generate potentially
invalid requests and collect the response for each one. For
each response, we remove the elements that also occur in any
of the saved valid responses for that template (sanitization).
Then, we employ an edit distance algorithm to measure the
distance between the sanitized responses for the invalid input
and any of the responses from the valid input. Intuitively, if
the two responses are similar to each other, we can infer that
the invalid request was accepted by the server.
To determine if invalid inputs were accepted by the server,
our approach compares the sanitized server response against
a response that is known to have been generated by benign
(valid) inputs. Since the server’s responses are typically text-
based JSON or XML or HTML, we can employ string simi-
larity detection. In our case, since the responses are typically
produced by a single web server, it is likely that the responses
are similar, and therefore we implement a custom response
comparison strategy. We evaluate the edit distance between
the sanitized response (sanitized against a valid response) and
another known valid response in a simple cross-validation
approach. Our experiments and manual veriﬁcation prove that
this approach achieves decent accuracy in classifying server
responses. We leave a more robust approach to future work.
VII. EVALUATION