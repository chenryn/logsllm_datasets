4. 写在最后
经过了一番对比，和一些实例的展示，可以看出 Paramiko 是一个专业、让人省心的 ssh 利器，个
人认为 Paramiko 模块是运维人员必学模块之一，如果你恰好需要在 Python 代码中实现 ssh 到远程
服务器去获取一些信息，那么我把 Paramiko 推荐给你。
7.2 代码 BUG 变得酷炫的利器
当我们写的一个脚本或程序发生各种不可预知的异常时，如果我们没有进行捕获处理的时候，通常
都会致使程序崩溃退出，并且会在终端打印出一堆 密密麻麻 的 traceback 堆栈信息来告诉我们，是
哪个地方出了问题。
就像这样子，天呐，密集恐惧症要犯了都
上面这段 traceback
只有黑白两个颜色，无法像代码高亮那样，对肉眼实现太不友好了
无法直接显示报错的代码，排查问题慢人一步，效率太低
那有没有一种办法，可以解决这些问题呢？
当然有了，在 Python 中，没有什么问题是一个库解决不了的，如果有，那就等你去开发这个库。
今天要介绍的这个库呢，叫做 pretty-errors ，从名字上就可以知道它的用途，是用来美化错误
信息的。
通过这条命令你可以安装它
$ python3 -m pip install pretty-errors
1. 环境要求
由于使用了 pretty-errors 后，你的 traceback 信息输出，会有代码高亮那样的效果，因此当你在
使用测试使用 pretty-error 时，请确保你使用的终端可以输出带有颜色的字体。
在 windows 上你可以使用 Powershell，cmder 等
在 Mac 上你可以使用自带的终端，或者安装一个更好用的 iTerm2
2. 效果对比
随便写一个没有使用 pretty-errors ，并且报错了的程序，是这样子的。
而使用了 pretty_errors 后，报错信息被美化成这样了。
是不是感觉清楚了不少，那种密密麻麻带来的焦虑感是不是都消失了呢？
当然这段代码少，你可能还没感受到，那就来看下 该项目在 Github上的一张效果对比图吧
3. 配置全局可用
可以看到使用了 pretty_errors 后，无非就是把过滤掉了一些干扰我们视线的无用信息，然后把有用
的关键信息给我们高亮显示。
既然既然这样，那 pretty_errors 应该也能支持我们如何自定义我们选用什么样的颜色，怎么排版
吧？
答案是显而易见的。
pretty_errors 和其他库不太一样，在一定程度上（如果你使用全局配置的话），它并不是开箱即用
的，你在使用它之前可能需要做一下配置。
使用这一条命令，会让你进行配置，可以让你在该环境中运行其他脚本时的 traceback 输出都自动
美化。
$ python3 -m pretty_errors
配置完成后，你再运行任何脚本，traceback 都会自动美化了。
不仅是在我的 iTerm 终端下
在 PyCharm 中也会
唯一的缺点就是，原先在 PyCharm 中的 traceback 可以直接点击  直接跳转到对应错误文
件代码行，而你如果是在 VSCode 可以使用 下面自定义配置的方案解决这个问题（下面会讲到，参
数是： display_link ）。
因此，有些情况下，你并不想设置 pretty_errors 全局可用。
那怎么取消之前的配置呢？
只需要再次输出 python -m pretty_errors ，输出入 C 即可清除。
4. 单文件中使用
取消全局可用后，你可以根据自己需要，在你需要使用 pretty-errors 的脚本文件中导入
pretty_errors ，即可使用
import pretty_errors
就像这样
import pretty_errors
def foo():
1/0
if __name__ == "__main__":
foo()
值得一提的是，使用这种方式，若是你的脚本中，出现语法错误，则输出的异常信息还是按照之前
的方式展示，并不会被美化。
因此，为了让美化更彻底，官方推荐你使用 python -m pretty_errors
5. 自定义设置
上面的例子里，我们使用的都是 pretty_errors 的默认美化格式，展示的信息并没有那么全。
比如
它并没有展示报错文件的绝对路径，这将使我们很难定位到是哪个文件里的代码出现错误。
如果能把具体报错的代码，给我们展示在终端屏幕上，就不需要我们再到源码文件中排查原因
了。
如果使用了 pretty_errors 导致异常信息有丢失，那还不如不使用 pretty_errors 呢。
不过，可以告诉你的是， pretty_errors 并没有你想象的那么简单。
它足够开放，支持自定义配置，可以由你选择你需要展示哪些信息，怎么展示？
这里举一个例子
import pretty_errors
## 
pretty_errors.configure(
separator_character = '*',
filename_display = pretty_errors.FILENAME_EXTENDED,
line_number_first = True,
display_link = True,
lines_before = 5,
lines_after = 2,
line_color = pretty_errors.RED + '> ' + pretty_errors.default_config.li
ne_color,
code_color = ' ' + pretty_errors.default_config.line_color,
)
## 
def foo():
1/0
if __name__ == "__main__":
foo()
在你像上面这样使用 pretty_errrs.configure 进行配置时，抛出的的异常信息就变成这样了。
当然了， pretty_errors.configure() 还可以接收很多的参数，你可以根据你自己的需要进行配
置。
5.1 设置颜色
header_color ：设置标题行的颜色。
timestamp_color ：设置时间戳颜色
default_color ：设置默认的颜色
filename_color ：设置文件名颜色
line_number_color ：设置行号颜色。
function_color ：设置函数颜色。
link_color ：设置链接的颜色。
在设置颜色的时候， pretty_errors 提供了一些常用的 颜色常量供你直接调取。
BLACK ：黑色
GREY ：灰色
RED ：红色
GREEN ：绿色
YELLOW ：黄色
BLUE ：蓝色
MAGENTA ：品红色
CYAN ：蓝绿色
WHITE ：白色
而每一种颜色，都相应的匹配的 BRIGHT_ 变体 和 _BACKGROUND 变体，
其中， _BACKGROUND 用于设置背景色，举个例子如下。
5.2 设置显示内容
line_number_first 启用后，将首先显示行号，而不是文件名。
lines_before ： 显示发生异常处的前几行代码
lines_after ： 显示发生异常处的后几行代码
display_link ：启用后，将在错误位置下方写入链接，VScode将允许您单击该链接。
separator_character ：用于创建标题行的字符。默认情况下使用连字符。如果设置为 '' 或
者 None ，标题将被禁用。
display_timestamp ：启用时，时间戳将写入回溯头中。
display_locals
启用后，将显示在顶部堆栈框架代码中的局部变量及其值。
display_trace_locals
启用后，其他堆栈框架代码中出现的局部变量将与它们的值一起显示。
5.3 设置怎么显示
line_length ：设置每行的长度，默认为0，表示每行的输出将与控制台尺寸相匹配，如果你设
置的长度将好与控制台宽度匹配，则可能需要禁用 full_line_newline ，以防止出现明显的双
换行符。
full_line_newline ：当输出的字符满行时，是否要插入换行符。
timestamp_function
调用该函数以生成时间戳。默认值为 time.perf_counter 。
top_first
启用后，堆栈跟踪将反转，首先显示堆栈顶部。
display_arrow
启用后，将针对语法错误显示一个箭头，指向有问题的令牌。
truncate_code
启用后，每行代码将被截断以适合行长。
stack_depth
要显示的堆栈跟踪的最大条目数。什么时候 0 将显示整个堆栈，这是默认值。
exception_above
启用后，异常将显示在堆栈跟踪上方。
exception_below ：
启用后，异常显示在堆栈跟踪下方。
reset_stdout
启用后，重置转义序列将写入stdout和stderr；如果您的控制台留下错误的颜色，请启用此选
项。
filename_display
设置文件名的展示方式，有三个选项： pretty_errors.FILENAME_COMPACT 、
pretty_errors.FILENAME_EXTENDED ，或者 pretty_errors.FILENAME_FULL
以上，就是我对 pretty_errors 的使用体验，总的来说，这个库功能非常强大，使用效果也特别
酷炫，它就跟 PEP8 规范一样，没有它是可以，但是有了它会更好一样。对于某些想自定义错误输
出场景的人， pretty_errors 会是一个不错的解决方案，明哥把它推荐给你。
7.3 少有人知的 Python "重试机制"
为了避免由于一些网络或等其他不可控因素，而引起的功能性问题。比如在发送请求时，会因为网
络不稳定，往往会有请求超时的问题。
这种情况下，我们通常会在代码中加入重试的代码。重试的代码本身不难实现，但如何写得优雅、
易用，是我们要考虑的问题。
这里要给大家介绍的是一个第三方库 - Tenacity ，它实现了几乎我们可以使用到的所有重试场
景，比如：
1. 在什么情况下才进行重试？
2. 重试几次呢?
3. 重试多久后结束？
4. 每次重试的间隔多长呢？
5. 重试失败后的回调？
在使用它之前 ，先要安装它
$ pip install tenacity
最基本的重试
无条件重试，重试之间无间隔
from tenacity import retry
@retry
def test_retry():
print("...")
raise Exception
test_retry()
无条件重试，但是在重试之前要等待 2 秒
from tenacity import retry, wait_fixed
@retry(wait=wait_fixed(2))
def test_retry():
print("...")
raise Exception
test_retry()
设置停止基本条件
只重试7 次
from tenacity import retry, stop_after_attempt
@retry(stop=stop_after_attempt(7))
def test_retry():
print("...")
raise Exception
test_retry()
重试 10 秒后不再重试
from tenacity import retry, stop_after_delay
@retry(stop=stop_after_delay(10))
def test_retry():
print("...")
raise Exception
test_retry()
或者上面两个条件满足一个就结束重试
from tenacity import retry, stop_after_delay, stop_after_attempt
@retry(stop=(stop_after_delay(10) | stop_after_attempt(7)))
def test_retry():
print("...")
raise Exception
test_retry()
设置何时进行重试
在出现特定错误/异常（比如请求超时）的情况下，再进行重试
from requests import exceptions
from tenacity import retry, retry_if_exception_type
@retry(retry=retry_if_exception_type(exceptions.Timeout))
def test_retry():
print("...")
raise exceptions.Timeout
test_retry()
在满足自定义条件时，再进行重试。
如下示例，当 test_retry 函数返回值为 False 时，再进行重试
from tenacity import retry, stop_after_attempt, retry_if_result
def is_false(value):
return value is False
@retry(stop=stop_after_attempt(3),
retry=retry_if_result(is_false))
def test_retry():
return False
test_retry()
多个条件注意顺序
如果想对一个异常进行重试，但是最多重试3次。
下面这个代码是无效的，因为它会一直重试，重试三次的限制不会生效，因为它的条件是有顺序
的，在前面的条件会先被走到，就永远走不到后面的条件。
import time
from requests import exceptions
from tenacity import retry, retry_if_exception_type, stop_after_attempt
@retry(retry=retry_if_exception_type(exceptions.Timeout), stop=stop_after_attempt(3)
)
def test_retry():
time.sleep(1)
print("retry")
raise exceptions.Timeout
test_retry()
如果你把 stop_after_attempt 写到前边，就没有问题了。
import time
from requests import exceptions
from tenacity import retry, retry_if_exception_type, stop_after_attempt
@retry(stop=stop_after_attempt(5), retry=retry_if_exception_type(exceptions.Timeout)
)
def test_retry():
time.sleep(1)
print("retry")
raise exceptions.Timeout
test_retry()
重试后错误重新抛出
当出现异常后，tenacity 会进行重试，若重试后还是失败，默认情况下，往上抛出的异常会变成
RetryError，而不是最根本的原因。
因此可以加一个参数（ reraise=True ），使得当重试失败后，往外抛出的异常还是原来的那个。
from tenacity import retry, stop_after_attempt
@retry(stop=stop_after_attempt(7), reraise=True)
def test_retry():
print("...")
raise Exception
test_retry()
设置回调函数
当最后一次重试失败后，可以执行一个回调函数
from tenacity import *
def return_last_value(retry_state):
print("")
return retry_state.outcome.result() # 
def is_false(value):
return value is False
@retry(stop=stop_after_attempt(3),
retry_error_callback=return_last_value,
retry=retry_if_result(is_false))
def test_retry():
print("...")
return False
print(test_retry())
输出如下
...
...
...
False
7.4 规整字符串提取数据的神器
从一段指定的字符串中，取得期望的数据，正常人都会想到正则表达式吧？
写过正则表达式的人都知道，正则表达式入门不难，写起来也容易。
但是正则表达式几乎没有可读性可言，维护起来，真的会让人抓狂，别以为这段正则是你写的就可
以驾驭它，过个一个月你可能就不认识它了。
今天给你介绍一个好东西，可以让你在某些场景下摆脱正则的噩梦，那就是 Python 中一个非常冷
门的库 -- parse 。
1. 真实案例
拿一个最近使用 parse 的真实案例来举例说明。
下面是 ovs 一个条流表，现在我需要收集提取一个虚拟机（网口）里有多少流量、多少包流经了这
条流表。也就是每个 in_port 对应的 n_bytes、n_packets 的值 。
cookie=0x9816da8e872d717d, duration=298506.364s, table=0, n_packets=480, n_bytes=201
60, priority=10,ip,in_port="tapbbdf080b-c2" actions=NORMAL
如果是你，你会怎么做呢？
先以逗号分隔开来，再以等号分隔取出值来？
你不防可以尝试一下，写出来的代码应该和我想象的一样，没有一丝美感而言。
我来给你展示一下，我是怎么做的？
可以看到，我使用了一个叫做 parse 的第三方包，是需要自行安装的
$ python -m pip install parse
从上面这个案例中，你应该能感受到 parse 对于解析规范的字符串，是非常强大的。
2. parse 的结果
parse 的结果只有两种结果：
1. 没有匹配上，parse 的值为None
>>> parse("halo", "hello") is None
True
>>>
1. 如果匹配上，parse 的值则 为 Result 实例