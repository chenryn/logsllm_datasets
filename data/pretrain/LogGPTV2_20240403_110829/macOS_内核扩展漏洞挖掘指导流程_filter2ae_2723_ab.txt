sMethods 是驱动的一个非常重要的攻击面，因此找到并识别出相关的结构是重要的一步。大家可以使用工具 [11] 来识别、处理相关结构。
识别前：
识别后：
大家还可以使用工具 [12] 来为结构添加索引，如下图：
###  识别 externalMethods 的参数
大家可以使用工具 [13] 来处理，处理前：
处理前的反编译结果：
处理后的效果：
处理后的反编译效果：
该工具没有做 CFG 跟踪，无法处理所有情况，剩下的情况需要大家手工处理，手工处理的方式为，选中相关的指令行：
然后使用快捷键：T，调出菜单为寄存器指定类型：
确认无误后，点击 OK。这种方法也可以用来处理虚表、类等结构。
###  获取类的布局信息
在逆向部分的开头我们已经说明了，逆向主要逆的就是数据结构。这里会介绍一种逆向数据结构的可复用的流程与方法，这种逆向方法使用脚本来表达逆向的结果，具体的逆向结果参考
[14]。
内核扩展中的类对成员变量的设置主要在 init 与 start 两个函数中完成，下面我们以 AppleCamIn::start 为例来说明对类结构的还原。
处理的脚本如下图：
start 函数的初始反编译效果如下图：
将 v6 转成 IOPCIDevice *，方法是右键 v6，在弹出的菜单中选择：Convert to struct *:
转换后的效果图如下：
可以看到虚表已经被识别出来的。通过 this->gap[31] = (__int64)v6; 知道，有一个成员变量是
IOPCIDevice，我们在脚本中为类添加一个成员变量：
其中成员的偏移量的计算方法为：gap 的类型是 int64，gap 中每个成员的大小为 8 字节，成员相对于 gap 的偏移量为 31 *
8，因此总的偏移量为：8 + 31 * 8。也可以在反汇编窗口看直接的偏移量，然后在脚本中使用直接偏移量：
然后执行脚本，再次按 F5，刷新反编译结果，可以看到：
继续识别成员变量，IOPCIDevice::mapDeviceMemoryWithRegister 返回的类型是 IOMemoryMap *，我们将 v9
转换成对应的类型：
从反编译结果中我们我们知道 AppCamIn 类有个成员变量是 IOMemoryMap *，gap_0x8 的类型是 int64，起始偏移量为
this[15]，相对偏移量为 9 * 0x8，总的偏移量为：this[15] + 9 * 0x8 = 0x8 * 15 + 9 *
0x8，将成员变量添加到类结构中：
再次执行脚本，F5 刷新反编译结果：
以此类推，可以完成类成员的识别与结构化。
###  识别 sysctl 结构
使用工具 [15] 来查找、识别 sysctl 结构。
###  逆向部分总结
一句话：不要急躁，如果找不到漏洞，那就什么都不用想，按照如上的流程与方法，安安静静的做好逆向。
## 常见漏洞与审计
基本的错误类型大家可以通过阅读推荐资料 [1] 来熟悉、掌握。对于 Mac 平台特有的错误类型，大家可以通过阅读 Google Project Zero
的漏洞报告来学习。这里多说一句，Google Project Zero 对行业的贡献不只只是提高了 IT
基础设施的安全性，同时也为我们提供了关于漏洞的、大量的、真实的漏洞与利用资料，大家一定要充分利用。
另外，就像这个世界上每天都会发生地震一样，漏洞领域每天都会有漏洞被公开，面对每天大量的信息我们该如何应对？这里给大家的建议是：1、只关注当前领域的信息，对于其他的信息如果时间不够，可以略过。什么是当前领域？我们当前做二进制漏洞，二进制漏洞就是我们当前的领域，具体包括：漏洞披露、利用方法与思路、漏洞挖掘生产力工具。2、对于具体的二进制漏洞，我们没有时间去复现每一个漏洞，实现每一个利用，大家可以锻炼下自己的抽象、总结能力：通读漏洞报告后，用一句话总结出错误类型或利用技巧方面的创新。
言归正传，完成逆向处理后，大家可以相对容易的找到如下几个常见的安全问题：
  1. memcpy, bcopy 等溢出问题。
  2. 整数的溢出、符号问题。
  3. 竞态条件问题。
  4. 二进制协议，即：从用户空间向内核中传递一个结构体。
  5. 直接的信息泄露，即：从内核向用户空间拷贝数据，大小可控。
之所以说容易是指：这些错误涉及的功能比较小，我们通过在反编译结果中跟踪用户空间可控的数据在内核空间的传递，就可以相对直观的发现。
## 资源与工具
[01]、bsd-traps.json
[02]、mach-traps.json
[03]、mig-list-all.json
[04]、sysctl.json
[05]、external-method-info.json
[06]、osx-kext-open-test
[07]、macOS-Class-Info-v10.12.4-16E195-class.xlsx
[08]、osx-kernel-create-vtable-structure.py
[09]、osx-kernel-got-formatter.py
[10]、osx-kernel-create-seg-for-vtable.py
[11]、osx-kernel-external-method.py
[12]、osx-kernel-external-method-ui.py
[13]、osx-kernel-external-arg-formatter.py
[14]、re-result/RE_AppleCamIn.py
[15]、osx-kernel-sysctl-formatter.py
[16]、hexrays-vt-jumper.py
## 推荐资料
[1]、《The Art of Software Security Assessment: Identifying and Preventing
Software Vulnerabilities》，ISBN: 978-0321444424
## 关于涅槃团队（Nirvan Team）
隶属于 360 公司信息安全部，主要负责公司所有 iOS App
的安全，同时进行苹果平台相关的安全研究，包括：操作系统层面的漏洞挖掘与利用；在工程中提升攻防效率与生产力的方法与工具。该团队在苹果系统中发现了大量漏洞，多次获得苹果官方致谢。该团队积极参与社区分享，发表大量技术文章，并多次在国内外的安全会议上发表主题演讲，分享相关的研究成果。邮箱：[PI:EMAIL](mailto:PI:EMAIL)