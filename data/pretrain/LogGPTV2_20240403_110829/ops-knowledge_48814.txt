User: The obvious ways I can think of to make a Python environment exit, is either sys.exit(), or os._exit(). However, sys.exit() doesn't work outside the main thread, and os._exit() doesn't run shutdown handlers (e.g. those registered via atexit.register). Also, when there are non-daemon threads running, just exiting the main thread (as might be effected through thread.interrupt_main, for instance) won't make the rest of the environment shut down, either.
Is there a way to make Python exit from another thread than the main thread, which runs shutdown handlers?
Assistant: That depends on what you mean by "orderly".
Even if you don't have any non-daemonic threads, if you call sys.exit() from main thread, the other threads will not complete in an "orderly" fashion.  There's no guarantee they will clean up after themselves.
The only really clean way to do it is for the main thread to signal the other threads they should complete and abort (e.g. by setting a flag or an Event which they check periodically), wait for them to complete (by joining them), and then return from its main function.