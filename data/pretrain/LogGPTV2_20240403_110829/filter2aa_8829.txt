# John-Bull (crypto, 141p, 29 solved)
In the challenge we get [code and encryption results](John_Bull.txt).
The encryption code is quite simple:
```python
def make_key(k):
    while True:
        r = getRandomInteger(k)  `gcd(e,phi(n))!=1`.
This is quite obvious since:
`phi(n) = phi((p**2)*q) = phi(p**2) * phi(q) = p*(p-1) * (q-1)` 
And in our case `e = n = (p**2)*q`
So `phi(n)` and `e` share a factor `p`.
One approach we could try would be to divide `e` by `p` and calculate `d` for such `e`, but as a result we would just get `flag**p mod n` which doesn't help us much because we can't easily calculate k-th modular root.
But we took a different path and guessed that `flag` might not be padded and thus it would be reasonably short.
Specifically shorter not only than `n`, which is expected, but also shorted than `p*q`.
We could calculate `ciphertext % (p*q)` transforming this problem back to classic RSA.
We were lucky and this approach worked just fine:
```python
enc = enc % (p * q)
e = p * p * q
fi = (p - 1) * (q - 1)
d = modinv(e, fi)
flag_p = gmpy2.powmod(enc, d, (p * q))
print(long_to_bytes(flag_p))
```
Which gave us `ASIS{_Wo0W_Y0u_4r3_Mas73R_In____Schmidt-Samoa___}`
Whole solver [here](john.py)
As it turns out this is an existing cryptosystem, and could have been solved by:
```python
d = modinv(n, lcm(p - 1, q - 1))
flag_p = gmpy2.powmod(enc, d, (p * q))
print(long_to_bytes(flag_p))
```