# Calling Convention and Stack Alignment

### Introduction
- **Source**: [arianlim.wordpress.com](http://arianlim.wordpress.com)

### Stack Alignment in 64-bit ABI
- The 64-bit Application Binary Interface (ABI) mandates that the stack must be aligned to a 16-byte boundary after all function arguments have been arranged.
- A random `mov` instruction cannot guarantee the required stack alignment.
- Directly inserting a `call` instruction without proper alignment can lead to incorrect argument placement in registers.

### Using Jump Instructions
- **Solution**: Use a `jmp` instruction to transfer execution to an assembly stub generated at runtime.
- **Steps**:
  1. Recreate the overwritten instruction.
  20. Set up the system to call a function.
  3. Execute the desired code (good or bad).
  4. Jump back to resume normal execution.

### Checklist for Overwriting Instructions
- Save and restore caller-saved and callee-saved registers.
- Align the stack to the 16-byte boundary.
- Recreate the overwritten instruction.
- Arrange function arguments in the correct registers.
- Invoke your custom code.
- Resume execution as if nothing happened.

### Example: Overwriting `add_freelist`
- **Instruction**: Updates the freelist.
- **Constraint**: Cannot overwrite with a `call` instruction because the system state is not ready for a function call.
- **Solution**: Use a `jmp` instruction, which is 5 bytes wide. Insert two one-byte NOPs to maintain the binary size.

### Assembly Stub
- **Function**: 
  ```c
  void handler(VALUE freed_object) {
      mark_object_freed(freed_object);
      return;
  }
  ```

### Memprof: Memory Profiler for Ruby
- **Installation**: `gem install memprof`
- **GitHub Repository**: [github.com/ice799/memprof](https://github.com/ice799/memprof)
- **Sample Output**:
  ```ruby
  require 'memprof'
  Memprof.start
  require "stringio"
  StringIO.new
  Memprof.stats
  ```

  - **Output**:
    ```
    108 /custom/ree/lib/ruby/1.8/x86_64-linux/stringio.so:0:__node__
     14 test2.rb:3:String
      2 /custom/ree/lib/ruby/1.8/x86_64-linux/stringio.so:0:Class
      1 test2.rb:4:StringIO
      1 test2.rb:4:String
      1 test2.rb:3:Array
      1 /custom/ree/lib/ruby/1.8/x86_64-linux/stringio.so:0:Enumerable
    ```

- **Web-based Heap Visualizer and Leak Analyzer**: [memprof.com](http://memprof.com)

### Performance Benchmarking
- **Normal Ruby**:
  ```sh
  [joe@mawu:/Users/joe/code/defcon/memprof/ext]% ab -c 10 -n 200 http://blah:4567/hi/JOE
  Requests per second:    26.80 [#/sec] (mean)
  Time per request:       373.108 [ms] (mean)
  ```

- **Optimized Ruby**:
  ```sh
  [joe@mawu:/Users/joe/code/defcon]% ab -c 10 -n 200 http://blah:4567/hi/JOE
  Requests per second:    30.33 [#/sec] (mean)
  Time per request:       329.708 [ms] (mean)
  ```

### Injectso: Library Injection
- **Author**: Shaun Clowes
- **Description**: Injects libraries into running processes using `ptrace(2)`.
- **Steps**:
  1. Attach to the target process using `ptrace`.
  2. Save a copy of a small piece of the program stack and register set.
  3. Create a fake stack frame with a saved return address of 0.
  4. Set the register set to point to `dlopen`, execute it, and handle the segfault on return.
  5. Restore the stack and register set, then resume normal execution.

### Challenges
- Remote memory allocation.
- Generating segfaults in running processes.
- Binary patching complexity.
- User library acceptance.
- Handling already running processes.

### Defense Mechanisms
- Enable the NX (No eXecute) bit.
- Strip debug information.
- Statically link binaries.
- Place `.text` code in ROM.
- Avoid loading DSOs at runtime.
- Disable `ptrace`.
- Monitor `/proc/<pid>/maps`.

### Future Research
- Exploring alternative binary formats.

### References
- [timetobleed.com](http://timetobleed.com)
- [Steven Edwards' Email](http://www.winehq.org/pipermail/wine-devel/2007-November/060846.html)

### Questions?
- **Contact**: Joe Damato
- **Twitter**: @joedamato
- **Website**: [timetobleed.com](http://timetobleed.com)