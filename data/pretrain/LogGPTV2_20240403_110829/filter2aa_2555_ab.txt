calling convention
arianlim.wordpress.com
Isn’t ready? What?
• The 64bit ABI says that the stack must be 
aligned to a 16byte boundary after any/all 
arguments have been arranged.
• Since the overwrite is just some random 
mov, no way to guarantee that the stack is 
aligned.
• If we just plop in a call instruction, we 
won’t be able to arrange for arguments to 
get put in the right registers.
• So now what?
jmp
• Can use a jmp instruction.
• Transfer execution to an assembly stub 
generated at runtime.
• recreate the overwritten instruction
• set the system up to call a function
• do something good/bad
• jmp back when done to resume execution
picasaweb.google.com/lh/photo/-R3BPlqOq8MfQGFTduIqCA
checklist
• save and restore caller/callee saved 
registers.
• align the stack.
• recreate what was overwritten.
• arrange for any arguments your 
replacement function needs to end up in 
registers.
• invoke your code.
• resume execution as if nothing happened.
this instruction updates the freelist and comes from 
add_freelist:
Can’t overwrite it with a call instruction because the 
state of the system is not ready for a function call.
The jmp instruction and its offset are 5 bytes wide.
Can’t grow or shrink the binary, so insert 2 one byte 
NOPs.
address of assembly stub
this instruction updates the freelist and comes from 
add_freelist:
Can’t overwrite it with a call instruction because the 
state of the system is not ready for a function call.
The jmp instruction and its offset are 5 bytes wide.
Can’t grow or shrink the binary, so insert 2 one byte 
NOPs.
must jump back here
shortened assembly 
stub
shortened assembly 
stub
void handler(VALUE freed_object) 
{
        mark_object_freed(freed_object);
        return;
}
and it actually works.
gem install memprof
http://github.com/ice799/memprof
listverse.ﬁles.wordpress.com
Sample Output
require 'memprof'
Memprof.start
require "stringio"
StringIO.new
Memprof.stats
    108 /custom/ree/lib/ruby/1.8/x86_64-linux/stringio.so:0:__node__
     14 test2.rb:3:String
      2 /custom/ree/lib/ruby/1.8/x86_64-linux/stringio.so:0:Class
      1 test2.rb:4:StringIO
      1 test2.rb:4:String
      1 test2.rb:3:Array
      1 /custom/ree/lib/ruby/1.8/x86_64-linux/stringio.so:0:Enumerable
a web-based heap visualizer and leak analyzer
memprof.com
memprof.com
a web-based heap visualizer and leak analyzer
a web-based heap visualizer and leak analyzer
memprof.com
memprof.com
a web-based heap visualizer and leak analyzer
memprof.com
a web-based heap visualizer and leak analyzer
memprof.com
a web-based heap visualizer and leak analyzer
community.devexpress.com
config.middleware.use(Memprof::Tracer)
{
  "time": 4.3442,
  "rails": {
    "controller": "test",
    "action": "index"
  },
  "request": {
    "REQUEST_PATH": "/test,,
    "REQUEST_METHOD": "GET"
  },
total time for request
rails controller/action
request env info
  "mysql": {
    "queries": 3,
    "time": 0.00109302
  },
  "gc": {
    "calls": 8,
    "time": 2.04925
  },
config.middleware.use(Memprof::Tracer)
8 calls to GC
2 secs spent in GC
3 mysql queries
  "objects": {
    "created": 3911103,
    "types": {
      "none": 1168831,
      "object": 1127,
      "float": 627,
      "string": 1334637,
      "array": 609313,
      "hash": 3676,
      "match": 70211
    }
  }
}
config.middleware.use(Memprof::Tracer)
3 million objs created
lots of strings
lots of arrays
regexp matches
object instances
1 million method calls
smiley-faces.org
mindfulsecurity.com
evil lives
http://github.com/ice799/memprof/tree/dnw
• makes ruby faster!11!!1
• hooks read syscall
• looks for magic cookie (JOE)
• turns off GC
• Ruby is fast.
it makes ruby faster!!1!
look a bullshit 
benchmark!
it makes ruby faster!!1!
#NORMAL RUBY!!!!11!!
[joe@mawu:/Users/joe/code/defcon/memprof/ext]% ab -c 10 -n 200 http://blah:
4567/hi/JOE
Benchmarking blah (be patient)
Completed 100 requests
Completed 200 requests
Finished 200 requests
Concurrency Level:      10
Time taken for tests:   7.462 seconds
Complete requests:      200
Failed requests:        0
Write errors:           0
Requests per second:    26.80 [#/sec] (mean)
Time per request:       373.108 [ms] (mean)
Time per request:       37.311 [ms] (mean, across all concurrent requests)
it makes ruby faster!!1!
# fast0r RUBY!!!11!111
[joe@mawu:/Users/joe/code/defcon]% ab -c 10 -n 200 http://blah:4567/hi/JOE
Benchmarking blah (be patient)
Completed 100 requests
Completed 200 requests
Finished 200 requests
Concurrency Level:      10
Time taken for tests:   6.594 seconds
Complete requests:      200
Failed requests:        0
Write errors:           0
Requests per second:    30.33 [#/sec] (mean)
Time per request:       329.708 [ms] (mean)
Time per request:       32.971 [ms] (mean, across all concurrent requests)
you can do anything
• this example is stupid, but you can do 
anything.
• hook read/write and phone home with 
data.
• fork a backdoor when a speciﬁc cookie is 
seen
• whatever
break.com
zanyvideos.com
injectso
• written by Shaun Clowes
• injects libraries into running processes 
using ptrace(2).
• super clever hack!
hockeydrunk.com
injecting live processes
• ptrace(2)
• allows you to view and modify the 
register set and address space of another 
process
• permissions on memory are ignored
fucking injectso, how 
does it work?
• attach to target process using ptrace
• save a copy of a small piece of the program 
stack.
• save a copy of the register set
• create a fake stack frame with a saved return 
address of 0
fucking injectso, how 
does it work?
• set register set to point at dlopen
• rip = &dlopen
• rdi = dso name
• rsi = mode
• let er rip, waitpid and it’ll segfault on return 
to 0.
• restore stack, register set, resume as 
normal.
ptrace
evil dso
• remote allocating 
memory is a pain in 
the ass.
• generating segfaults in 
running processes 
might be bad (core 
dumps, etc).
• binary patching is 
hard, doing it with 
ptrace is harder.
• getting the user to 
use your library 
might be hard.
• already running 
processes will need 
to be killed ﬁrst.
• need to poison each 
time app is started.
• binary patching is 
hard.
realmofraven.com
combine ‘em
• use injectso hack to load an evil dso
• evil dso will take it from there
64bit injectso port
• ported by Stealth
• http://c-skills.blogspot.com/2007/05/
injectso.html
• i did some trivial cleanup and put the codez 
on github
• http://github.com/ice799/injectso64
• tested it on 64bit ubuntu VM, works.
injectso 
+ 
evil-binary-patching-dso
customdynamics.com
customdynamics.com
buycostumes.com
emeraldinsight.com
how to defend against it
• NX bit                                -                  call mprotect
• strip debug information        -   mostly prebuilt binaries
• statically link everything        -  extremely large binaries
• put all .text code in ROM     -                           maybe?
• don’t load DSOs at runtime  -           no plugins, though
• disable ptrace                      -               no gdb/strace.
• check /proc//maps       -                            word.
slashgear.com
my future research: 
exploring alternative 
binary formats.
slayerinc.com
globalhealthandﬁtness.com
alignment
thomasgroup.com
calling convention
arianlim.wordpress.com
object ﬁle and 
library formats
tandemfs.org
questions?
joe damato
@joedamato
timetobleed.com
http://timetobleed.com/string-together-global-offset-tables-to-build-a-ruby-memory-proﬁler/
http://timetobleed.com/hot-patching-inlined-functions-with-x86_64-asm-metaprogramming/
http://timetobleed.com/rewrite-your-ruby-vm-at-runtime-to-hot-patch-useful-features/
http://timetobleed.com/dynamic-linking-elf-vs-mach-o/
http://timetobleed.com/dynamic-symbol-table-duel-elf-vs-mach-o-round-2/
tallteacher.ﬁles.wordpress.com
“Interesting Behavior of 
OS X”
• Steven Edwards (PI:EMAIL)
• november 29 2007
• http://www.winehq.org/pipermail/wine-
devel/2007-November/060846.html
leopard has a pe 
loader?
handle = dlopen("./procexp.exe", RTLD_NOW | RTLD_FIRST );
steven-edwardss-imac:temp sedwards$ ./a.out
dlopen(./procexp.exe, 258): Library not loaded: WS2_32.dll
 Referenced from: /Users/sedwards/Library/Application
Support/CrossOver/Bottles/winetest/drive_c/windows/temp/
procexp.exe
 Reason: image not found
cfs2.tistory.com