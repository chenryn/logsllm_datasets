# 探索日志收集和运输
一直以来，有两大选手争夺“原木收集和运输”的宝座。分别是*Logstash*([https://www.elastic.co/products/logstash](https://www.elastic.co/products/logstash))和*fluent*([https://www.fluentd.org/](https://www.fluentd.org/))。两者都是开源的，都被广泛接受和积极维护。虽然两者各有利弊，但 Fluentd 最终比云原生分布式系统更具优势。它消耗的资源更少，更重要的是，它不依赖于单个目的地(弹性搜索)。虽然 Logstash 可以将日志推送到许多不同的目标，但它主要是为弹性搜索而设计的。因此，其他测井解决方案采用了 Fluentd。
从今天开始，无论您采用哪种日志产品，它都有可能支持 Fluentd。通过 Fluentd 进入*云原生计算基金会*([https://www.cncf.io/](https://www.cncf.io/))项目列表可以看出这种采用的高潮。甚至弹性搜索用户也开始采用 Fluentd 而不是 Logstash。以前通常被称为**ELK**(**elastic search**、 **Logstash** 、 **Kibana** )栈，现在被称为**EFK**(**elastic search**、**fluent**、 **Kibana** )。
我们将顺应潮流，采用 Fluentd 作为收集和运输日志的解决方案，无论目的地是 Papertrail、Elasticsearch 还是其他地方。
我们将很快安装 Fluentd。但是，由于 Papertrail 是我们的第一个目标，我们需要创建和设置一个帐户。现在，请记住，我们需要从集群的所有节点收集日志，正如您已经知道的，Kubernetes 的 DaemonSet 将确保 Fluentd Pod 将在我们的每台服务器上运行。
# 通过 Papertrail 探索集中式日志记录
我们将探索的第一个集中式日志解决方案是*paper trail*([https://papertrailapp.com/](https://papertrailapp.com/))。我们将把它作为日志即服务解决方案的一个代表，它可以省去我们安装，更重要的是，维护一个自我托管的替代方案。
Papertrail 的特点是实时跟踪、按时间戳过滤、强大的搜索查询、漂亮的颜色，以及其他一些在浏览我们集群中生成的日志时可能(或可能不)必不可少的东西。
我们需要做的第一件事是注册，或者，如果这不是您第一次尝试 Papertrail，请登录。
```
 1  open "https://papertrailapp.com/"
```
如果您的系统中已经有用户，请按照说明注册或登录。
你会很高兴地发现 Papertrail 提供了一个免费的计划，允许存储一天 50 MB 的可搜索日志，以及一整年的可下载档案。这应该足以运行我们将要探索的示例。如果你有一个相对较小的集群，这应该会让你无限期地继续下去。它们的价格是合理的，即使你的集群更大，每月日志超过 50 MB。
可以说，它们是如此便宜，以至于我们可以说，与在自己的集群中运行替代解决方案相比，它提供了更好的投资回报。毕竟，没有什么是免费的。即使是基于开源的自托管解决方案也会在维护时间和计算能力方面产生成本。
目前，重要的是，我们将使用 Papertrail 运行的示例将完全在他们的免费计划内。
如果你有一个小手术，Papertrail 会很好地工作。但是，如果您有许多应用和一个更大的集群，您可能会想知道 Papertrail 是否可以扩展以满足您的需求。别担心。他们的客户之一是 GitHub，他们可能比你大。Papertrail 可以处理(几乎)任何负载。它对你来说是否是一个好的解决方案还有待发现。继续读。
让我们去开始屏幕，除非你已经在那里。
```
 1  open "https://papertrailapp.com/start"
```
如果您被重定向到欢迎屏幕，则您没有通过认证(您的会话可能已过期)。登录并重复前面的命令，进入开始屏幕。
单击添加系统按钮。
如果您阅读说明，您可能会认为设置相对容易。确实如此。但是，Kubernetes 不作为选项之一提供。如果您将*的值从*下拉列表更改为*其他值...*，你会看到一个相当大的日志源列表，可以插入到 Papertrail 中。尽管如此，仍然没有 Kubernetes 的迹象。名单上最接近的是*Docker*。即使是那个也不行。别担心。我为你准备了一些说明，或者更准确地说，我从 Papertrail 网站的文档中提取了这些说明。
请注意屏幕顶部的`Your logs will go to logsN.papertrailapp.com:NNNNN and appear in Events`信息。我们很快就需要这个地址，所以我们最好将这些值存储在环境变量中。
```
 1  PT_HOST=[...]
 2
 3  PT_PORT=[...]
```
请用主机替换第一个`[...]`。它应该类似于`logsN.papertrailapp.com`，其中`N`是 Papertrail 分配给您的号码。第二个`[...]`应替换为前面提到的消息中的端口。
现在我们已经将主机和端口存储在环境变量中，我们可以探索收集日志并将其发送到 Papertrail 的机制。
因为我已经声称大多数供应商都采用 Fluentd 来收集日志并将其发送到他们的解决方案中，所以 Papertrail 也推荐它也就不足为奇了。来自网络安全管理软件产品(Papertrail 的母公司)的人们用定制的 Fluentd 创建了一个我们可以使用的映像。反过来，我创建了一个 YAML 文件，其中包含了运行它们的映像所需的所有资源。
```
 1  cat logging/fluentd-papertrail.yml
```
如您所见，YAML 定义了一个带有 ServiceAccount、SolarWind 的 Fluentd 的 DaemonSet，以及一个使用一些环境变量来指定主机和日志应该发送到的端口的配置图。
在应用之前，我们必须更改 YAML 中的`logsN.papertrailapp.com`和`NNNNN`条目。此外，我更喜欢在`logging`名称空间中运行所有与日志相关的资源，所以我们也需要改变这一点。
```
 1  cat logging/fluentd-papertrail.yml \
 2      | sed -e \
 3      "PI:EMAIL@$PT_HOST@g" \
 4      | sed -e \
 5      "s@NNNNN@$PT_PORT@g" \
 6      | kubectl apply -f - --record
 7
 8  kubectl -n logging \
 9    rollout status ds fluentd-papertrail
```
现在我们在集群中运行 Fluentd，并且它被配置为将日志转发到我们的 Papertrail 帐户，我们应该返回到它的用户界面。
请在浏览器中切换回 Papertrail 控制台。您应该会看到一个绿色框，说明日志已收到。单击事件链接。
![](img/cbe13042-656d-4b4f-9703-0cc7617f5aed.png)
Figure 7-1: Papertrail's Setup Logging screen
接下来，我们将生成一些日志，并探索它们如何出现在 Papertrail 中。
```
 1  cat logging/logger.yml
 2  apiVersion: v1
 3  kind: Pod
 4  metadata:
 5    name: random-logger
 6  spec:
 7    containers:
 8    - name: random-logger
 9      image: chentex/random-logger
```
那个豆荚使用的`chentex/random-logger`映像只有一个目的。它定期输出随机日志条目。
让我们创造`random-logger`。
```
 1  kubectl create -f logging/logger.yml
```
请等待一两分钟，积累一些日志条目。
```
 1  kubectl logs random-logger
```
输出应该类似于下面的输出。
```
...
2018-12-06T17:21:15+0000 ERROR something happened in this execution.
2018-12-06T17:21:20+0000 DEBUG first loop completed.
2018-12-06T17:21:24+0000 ERROR something happened in this execution.
2018-12-06T17:21:27+0000 ERROR something happened in this execution.
2018-12-06T17:21:29+0000 WARN variable not in use.
2018-12-06T17:21:31+0000 ERROR something happened in this execution.
2018-12-06T17:21:33+0000 DEBUG first loop completed.
2018-12-06T17:21:35+0000 WARN variable not in use.
2018-12-06T17:21:40+0000 WARN variable not in use.
2018-12-06T17:21:43+0000 INFO takes the value and converts it to string.
2018-12-06T17:21:44+0000 INFO takes the value and converts it to string.
2018-12-06T17:21:47+0000 DEBUG first loop completed.
```
如您所见，容器正在输出随机条目，其中一些为`ERROR`，另一些为`DEBUG`、`WARN`和`INFO`。消息也是随机的。毕竟，这不是一个真正的应用，而是一个生成日志条目的简单映像，我们可以用它来探索我们的日志解决方案。
请返回 Papertrail 用户界面。您应该注意到我们系统中的所有日志都是可用的。一些来自 Kubernetes，而另一些来自系统级服务。
来自`go-demo-5`的也在，还有我们刚装的`random-logger`。我们将关注后者。
让我们假设我们通过警报发现有问题，并且我们将范围限制在`random-logger`应用。警报帮助我们检测到问题，我们通过挖掘指标将其缩小到单个应用。我们仍然需要查阅日志来找到原因。根据我们所知道的(或发明的)，合乎逻辑的下一步是只检索与`random-logger`相关的日志条目。
请在屏幕下方的搜索栏中输入`random-logger`，并按回车键。
![](img/10d4a911-f534-4f12-9cc7-111825990d08.png)
Figure 7-2: Papertrail's Events screen
从现在开始，我们将只看到包含单词`random-logger`的日志条目。这并不一定意味着只显示该应用的日志条目。相反，任何提到这个词的地方都会显示在屏幕上。我们所做的是指示 Papertrail 在所有日志条目中执行自由文本搜索，并且只检索那些包含前面提到的单词的条目。
虽然跨所有记录的自由文本搜索可能是最常用的查询，但是我们还可以使用其他一些方法来过滤日志。我们不会把它们都检查一遍。相反，请点按“搜索”栏右侧的“搜索提示”按钮，并自己探索语法。如果这几个例子还不够，请单击完整的语法指南链接。
![](img/3649c719-cc5c-41d6-8527-a99601654bc3.png)
Figure 7-3: Papertrail's Syntax & Examples screen