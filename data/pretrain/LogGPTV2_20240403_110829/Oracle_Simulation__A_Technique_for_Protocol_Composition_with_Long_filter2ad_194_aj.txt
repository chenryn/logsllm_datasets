0 (k); P D0
0(k);
(cid:107)SF 0
0 ;
0 (k); F A(k)(cid:107)S1
P 1
∼=OKE1 ,Ok
F P S ,ORQ
0 (k); P D0
0;
0(xB, k); out(k)
0, xB)
if xB /∈ s(cid:48) then
P D1
else out(k, ga(cid:48)
if xA /∈ s(cid:48) then
SF 1
else out(k, gb(cid:48)
0 (xA, k); out(k)
0, xA)
0 then
if xB = gb(cid:48)
out(k, ga(cid:48)
0, xB)
else if xB /∈ s(cid:48) then
P D1
0(xB, k); bad
else out(k, gb(cid:48)
0, xA)
if xA = ga(cid:48)
out(k, gb(cid:48)
else if xB /∈ s(cid:48) then
SF 1
0 (xA, k); bad
else out(k, gb(cid:48)
0, xA)
0 then
0, xA)
(cid:107)SF 0
0 ;
Note that k is a fresh name that could be considered as a long term secret, i.e., in p.
i (k(cid:48)); RP (k(cid:48))(cid:107)SF 1
0 (k(cid:48)); RS(k(cid:48)) ∼=OKE1 ,OF P S (cid:107)iP D1
i (k(cid:48)); QP (k(cid:48))(cid:107)SF 1
i (k(cid:48)); QS(k(cid:48))
And P-1):
(cid:107)iP D1
With the oracles:
• Ok
allows to simulate (K-1) the other honest sessions of P D and SF , it corresponds
F P S
to Osign
P ,skS ,s,Osign
S ,skP ,s,Oa(cid:48)
i,b(cid:48)
T (cid:48)
T (cid:48)
of Section 9.2.
i
• ORQ allows to simulate (S-1) the continuation, i.e., protocols of the form
in(k); P D1(k); RP (k)(cid:107)in(k); SF 1(k); RQ(k)
We prove Condition K-3 under the corresponding EUF-CMA axioms in Appendix E.
Remark that to ensure that the forwarding agent only signs the sid sent by P D, it is required
that the encryption scheme is an authenticated encryption scheme.
47
Part III
Composition in the CCSA logic
10 Oracles in the CCSA Logic
We extend the semantics of the CCSA logic so that it now refers to attackers that can have
access to an extra oracle O. We then lift the notion of soundness for the axioms to support
oracles, deﬁning the notion of O-soundness.
10.1 Syntax and Semantics
While the cryptographic library of the CCSA logic stays as is, the computational model must
now also depend on some oracle that is given to the attacker, and the corresponding random
oracle tape.
Deﬁnition 19. A computational model M is an extension of a cryptographic library Mf ,
which provides an oracle O, and an additional PTOM AO
for each symbol g ∈ G, that takes
as input an inﬁnite random tape ρr, a security parameter 1η and a sequence of bitstrings.
g
We deﬁne the interpretation of extended terms as, given M, η, σ, ρs , ρO and ρr:
• [[n]]η,σM,ρs,ρr,ρO := An(1η, ρs) if n ∈ N
• [[x]]η,σM,ρs,ρr,ρO = [[xσ]]η,σM,ρs,ρr,ρO
• [[f (u)]]η,σM,ρs,ρr,ρO = Af (1η, [[u]]η,σM,ρs,ρr,ρO ) if f ∈ Σ
• [[g(u)]]η,σM,ρs,ρr,ρO = AO(ρs,ρO)
We also adapt the deﬁnition of the interpretation of ∼.
([[u]]η,σM,ρs,ρr,ρO , ρr, 1η) if g ∈ G
if x ∈ X
g
Deﬁnition 20. Given a computational model M, including an oracle O, two sequences of
terms t, u, and an assignment σ of the free variables of t, u to ground terms, we have M, σ |=O
t ∼ u if, for every polynomial time oracle Turing machine AO,
ρs;ρr;ρO , ρr, 1η) = 1}
|Pρs,ρr,ρO{AO(ρs,ρO)([[t]]σ,η
−Pρs,ρr,ρO{AO(ρs,ρO)([[u]]σ,η
ρs;ρr;ρO , ρr, 1η) = 1}|
is negligible in η. Here, ρs, ρr, ρO are drawn according to a distribution such that every ﬁnite
preﬁx is uniformly sampled.
10.2 Oracle Soundness
To perform proofs in the logic, we need to design axioms that are sound w.r.t. an attacker
that has access to O; we say that the axiom is O-sound in this case. They should be easy to
verify for actual libraries, yet powerful enough for the proofs that we intend to complete. The
purpose of this Section is to provide such axioms. We ﬁrst extend the notion of soundness to
oracles.
Deﬁnition 21. Given a family of computational models F using oracle O, a set of ﬁrst order
formulas A is O-sound (w.r.t. F) if, for every ψ ∈ A, every M ∈ F, M |=O ψ.
48
With such a deﬁnition, if A is O-sound (w.r.t. F) and A |= φ (where φ is a closed formula),
then, for every M ∈ F, M |=O φ.
Example 10.1 (Function application). For any O, F, function f, terms t1, . . . , tn, u1, . . . , un
t1, . . . , tn ∼ u1, . . . , un =⇒ f (t1, . . . , tn) ∼ f (u1, . . . , un)
is O sound.
Example 10.2. Given a single key encryption oracle O for key k, the formula
enc(0, r, k) ∼ enc(1, r, k)
is
• not sound (nor O-sound) in general,
• sound but not O-sound for non randomized SPRP encryption,
• O-sound for IND-CPA encryption.
Note that the axioms that are designed in [11] cannot be borrowed directly. For instance,
n ∼ n(cid:48), where n, n(cid:48) are names, is a standard axiom: two randomly generated numbers of the
same length cannot be distinguished. However, if either n or n(cid:48) is in the support of O, some
information on their interpretation can be leaked by the oracle. The axiom n ∼ n(cid:48) is sound,
but not O-sound. We have to modify this axioms as follows:
Lemma 22. For any oracle O with support n, the axiom ∀k, k(cid:48) /∈ n, k ∼ k(cid:48) is O-sound.
Proof. We are given a cryptographic library, and oracle O with support n, and two names k,
k(cid:48) not in the support. We are also given AO which is a distinguisher over k ∼ k(cid:48). We deﬁne
a PTTM A(cid:48) which on input (m, ρr, 1η):
• Splits ρr into three distinct inﬁnite tapes ρso, ρra, ρro.
• Simulates AO(ρso,ρro)(m, ρra, 1η).
Let us a prove that A(cid:48) is a distinguisher over k ∼ k(cid:48), which contradicts the unconditional
soundness of this axiom when there is no oracle.
We denote by πk(ρs, η) the tapes where every bit of ρs which does not correspond to a
c(ρs, η) where all bits for k are set to 0. We then have
name of k is set to 0, and similarly πk
for any PTOM AO:
ρs , ρr, 1η) = 1}
Pρs,ρr,ρO{AO(ρs,ρO)([[k]]σ,η
c (ρs,η), ρr, 1η) = 1}
=1 Pρs,ρr,ρO{AO(πk(ρs,η),ρO)([[n]]σ,η
πk
=2 Pρs1,ρs2,ρr,ρO{AO(ρs1,ρO)([[n]]σ,η
ρs2, ρr, 1η) = 1}
=3 Pρso,ρs,ρra,ρro{AO(ρso,ρro)([[k]]σ,η
ρs , ρra, 1η) = 1}
ρs , ρr, 1η) = 1}
=4 Pρs,ρr{A(cid:48)([[k]]σ,η
1. Thanks to the deﬁnition of support, the oracle answers the same on πk(ρs, η) and ρs;
2. we split ρs in two, to replace independent tapes πk(ρs, η) and πk
c(ρs, η);
49
3. we rename random tapes;
4. by construction of A(cid:48).
This shows that A(cid:48) has the same advantage as AO against k ∼ k(cid:48), which concludes the
proof.
Other axioms in [11] can be extended without problem. For instance the transitivity of ∼
or the function application axiom:
Lemma 23. For any O, f ∈ F, terms t1, . . . , tn, u1, . . . , un
t1, . . . , tn ∼ u1, . . . , un =⇒ f (t1, . . . , tn) ∼ f (u1, . . . , un)
is O sound.
In general, what we have is that any axiom independent from the oracle support is sound.
Lemma 24. For any O, and terms t, s, such that all names in t, s do not appear in supp(O),
we have that t ∼ s is sound if and only if t ∼ s is O-sound.
This allows us to derive, given an oracle and a recursive set of axiom, the set of axioms
which is sound w.r.t. an oracle.
For instance, the general DDH axiom is, for any names a, b, c, ga, gb, gab ∼ ga, gb, gc. If we
denote by s the support of some oracle, the O-sound DDH version is simply the set of formulas
DDHs for all name a, b, c /∈ s, ga, gb, gab ∼ ga, gb, gc. Here, the notation gx corresponds to
g(n)r(x), where g is the function which extracts a group generator and r the function which
evaluates names into exponents. We may consider that we have two interpretations of those
function such that DDH holds.
EUF-CMA We deﬁne a CCSA version of the tagged EUF-CMA axiom. It is a direct
adaptation of the CCSA EUF-CMA axiom to match the behaviour of the tagged EUF-CMA
axiom (Figure 3).
Deﬁnition 25. Given a name sk and a function symbol T , we deﬁne the generic axiom scheme
EUF-CMAT,sk as, for any term t such that sk is only in key position:
if ( checksign(t, pk(sk)))
then T ( getmess(t))
.(cid:87)
else (cid:62)
sign(x,sk)∈St(t) (t .= sign(x, sk))
∼ (cid:62)
The tagged signing oracles is deﬁned as previously, only adding the extra argument to the
tagging function.
Deﬁnition 26. Given a name sk and a function T , we deﬁne the generic signing oracle Osign
as follows:
T,sk
Osign
T,sk (m) := if T (m) then output(sign(m, sk)))
50
Proposition 27. For any computational model in which the interpretation of sign is EUF-CMA,
any name sk, and any boolean function T , EUF-CMAT,sk is Osign
Proof. Let us assume that soundness is violated. We then have a term t and a computational
model such that t does not satisfy EUF-CMAT,sk.
It means that the formula on the left
hand side holds. As in t the secret key sk only occurs in key positions, we can simulate t by
sampling all names, performing applications of function symbols, and sometimes calling the
oracle Osign
to obtain a signature. t may also depend on attacker function symbols that have
access to an oracle Osign
that produces exactly the
same distribution of t for any ﬁxed value of sk.
. Thus, we can build a PTOM AOsign
T,sk -sound.
T,sk,Osign
T,sk
sk
sk
sk be the PTOM which:
Let BOsign
• simulates AOsign
• for every call made by A to Osign
T,sk
T,sk, by sampling all names itself, except sk;
the case query the signing oracle to get the signature, else fails.
with input m, B checks that T (M ) holds, and if it is
sk
is exactly the same as AOsign
The probability distribution of BOsign
also
produces an output o which violates the EUF-CMAT,sk axiom. We thus have that o is a
valid signature, and is either not well tagged or does not correspond to a sub-term of t.
made by B either correspond to a well tagged message or to a sub
term of t, we know that o does not correspond to a signature produced by the signing oracle.
BOsign
is thus an attacker which given access to a signing oracle can produce a signature for a
message not signed by the oracle, i.e., an attacker which can win the EUF-CMA axiom.
As all calls to Osign
sk , so BOsign
T,sk,Osign
sk
sk
sk
11 Computational Soundness of the logic
11.1 Protocols
Given a protocol P , we reuse from [11] the deﬁnition of Φ(fold(P )) which we will denote tP .
It is only needed for technical proofs. We remark here that with the notations of [11], we
would have ρ1 = ρs and ρ2 = ρr.
The correction of the term representing a protocol with respect to the protocol oracles is
given by the following Lemma.
Lemma 28. Given a protocol P (which is action deterministic), a functional model Mf , an
P , σ := {x1 (cid:55)→
oracle O, a security parameter η ∈ N, an history tape θ = ∅, tP = t1
d1, . . . , xn (cid:55)→ dn} an assignment of the free variables in tP to D, for every ρs, ρr, ρO,
P , . . . , tn
P ]]σ,η
P ]]σ,η
ρs,ρr,ρO =
ρs,ρr,ρO , . . . , [[tn
[[t1
OP (ρs,∅)(d1(ρs, ρr, η, ρO)), . . . ,OP (ρs, d1(ρs, ρr, η, ρO), . . . , dn−1(ρs, ρr, η, ρO))(dn(ρs, ρr, η, ρO))
Proof. While straightforward, the proof relies on the deﬁnitions of protocol execution in a
model deﬁned in [11] and the soundness of the folding, which we do not recall here. We
extend Mf into a computational model M in such a way that
ρs,ρr,ρO , . . . , [[ti−1
for i = 1, . . . , n. We then have [[tP ]]M = [[t1
[[gi]]([[t1
P ]]σ,η
P ]]σ,η
P ]]σ,η
ρs,ρr,ρO , ρr) = di(ρs, ρr, η, ρO)
ρs,ρr,ρO , . . . , [[tn
ρs,ρr,ρO.
P ]]σ,η
51
The folding soundness from [11] implies that P ∼M fold(P ). The proof actually im-
plies pointwise equality of the executions of P and fold(P ) in M. If we denote ψ(P ) (resp
ψ(fold(P ))) the sequence of outputs of the execution of P (resp fold(P )) in this model, we
thus have that ψ(P ) = ψ(fold(P )).
We directly have by deﬁnition of the tP that [[tP ]]M = [[Φ(fold(P )]]M = ψ(fold(P )).
Finally, by construction of OP which emulates exactly the execution of P we have ψ(P ) =
OP (ρs,∅)(d1(ρs, ρr, η, ρO)), . . . ,OP (ρs, d1(ρs, ρr, η, ρO), . . . , dn−1(ρs, ρr, η, ρO))(dn(ρs, ρr, η, ρO))
which concludes the proof.
Introduction of attacker’s functions
11.2
As in [11], we may replace the variables occurring in the protocol P (or its folding tP ) with
terms that include the attacker functions g ∈ G.
be the sequence of terms deﬁned by:
, we let(cid:102)tP =(cid:102)t0
P , . . . ,(cid:102)tn
P , . . . , tn
P
0 = ∅
P{x0 (cid:55)→ g0()} and φP
P {x0 (cid:55)→ g0(), x1 (cid:55)→ g1(φP
P
If tP = t0
• (cid:102)t0
• (cid:103)ti+1
P = t0
i ,(cid:103)ti+1
P
P = ti+1
1 ), . . . , xi+1 (cid:55)→ gi+1(φP
We then denote σP the substitution {x0 (cid:55)→ g0(), x1 (cid:55)→ g1(φP
i+1)} and φP
1 ), . . . , xn (cid:55)→ gn(φP
i+1 = φP
n )}.
There is exactly one attacker function for every message produced by the protocol, and the
function symbol are deﬁned independently from the protocol.The functions are placeholder
for the attacker actions, whom we give the previous answers he may have obtained in the
protocol.
Example 11.1. We consider the protocol which for a given key sk, will allow the at-
tacker to perform one decryption and will then output an encryption. We may have tP =
dec(x, sk), enc(y, r, sk), where x and y are the two expected inputs. Then(cid:102)tP = dec(g0()), sk), enc(g1(dec(g0()), sk), r, sk).
When we interpret this term, the attacker can choose the evaluation of g0 and g1. He can at
ﬁrst provide the protocol with a message and obtain its decryption, and can then compute a
new message, maybe based on the previous decryption he obtained.
Once we have ﬁxed the cryptographic library, and we consider two protocols P and Q, a
computational such that(cid:102)tP (cid:54)∼(cid:102)tQ means that we have multiple PPTOMs which can compute
messages so that in the end, a ﬁnal PPTOM can distinguish the two protocols. We may from