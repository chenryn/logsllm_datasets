### Definitions and Notations

Let \( N = \{ a \in (tND(t) \setminus P) \mid a \text{ is a snapshot Boolean variable asserted to false} \} \). Let \( P \cup N \) be a partition of \( tND(t_i) \) such that:
- \( P = \{ a \in 2^{tND(t_i)} \setminus \emptyset \mid a \text{ is a snapshot Boolean variable asserted to true} \} \)
- \( N = \{ a \in (2^{tND(t_i)} \setminus \emptyset \cap P) \mid a \text{ is a snapshot Boolean variable asserted to false} \} \)

A snapshot of \( t \), denoted by \( tss(t) \), is a set of asserted snapshot Boolean variables such that:
- If \( t \) is a XOR-split, then \( tss(t) = P \cup N \).
- If \( t \) is an OR-split, then \( tss(t) = P \cup N \).

**Remark 20:** Clearly, \( P \cap N = \emptyset \). Note that \( P \) and \( P \) are always nonempty sets, but \( N \) can be empty. When \( N \) is empty, it means that all the Boolean terms of the outgoing condition of the task \( t \) are true, i.e., all snapshot Boolean variables are asserted to true.

**Notation 21:** We denote by \( tss(t) \subseteq tND(t) \) to specify that \( tss(t) \) is a snapshot with all snapshot Boolean variables in \( tND(t) \).

**Example 22:** The task \( t_2 \) of the workflow from Figure 1 has the task snapshot \( tss_1(t_2) = P \cup N \), where \( P_1 = \{a_1\} \) and \( N_1 = \{a_3\} \), i.e., \( a_1 \) is asserted to true and \( a_3 \) is asserted to false. It also has the task snapshot \( tss_2(t_2) = P \cup N \), where \( P_2 = \{a_3\} \) and \( N_2 = \{a_2\} \), i.e., \( a_3 \) is asserted to true and \( a_2 \) is asserted to false.

### Workflow Snapshot

**Definition 23:** Workflow snapshot. Let \( WG \) be a workflow. Suppose that \( ND = \{i_1, i_2, \ldots, i_k\} \), i.e., \( t_{i_1}, t_{i_2}, \ldots, t_{i_k} \) are the non-deterministic tasks of \( WG \). For every \( l \in \{1, \ldots, k\} \), let \( tss(t_{il}) \) be a snapshot of \( t_{il} \). A snapshot of \( WG \), denoted by \( wss(WG) \), is an element of the form \( (tss(t_{i_1}), tss(t_{i_2}), \ldots, tss(t_{i_k})) \).

### Behavioral Task Models

| EA Model Structure | Behavioral Task Model | Task Snapshot |
|--------------------|-----------------------|---------------|
| \( t: f_E \rightarrow f_C \) | \( b(t)/b(t,s) \) | \( s = tss(t) \) |
| \( t: a_1 \cdot a_2 \cdot \ldots \cdot a_l \) | \( a_1 = a_2 = \ldots = a_l = a_j \) | — |
| \( t: a_i \cdot a_{j_1} \cdot a_{j_2} \cdot \ldots \cdot a_{j_l} \) | \( a_i = a_{j_1} = a_{j_2} = \ldots = a_{j_l} \) | — |
| \( t: a_1 \oplus a_2 \oplus \ldots \oplus a_l \) | \( a_j = a_1 \oplus a_2 \oplus \ldots \oplus a_l \) | — |
| \( t: a_i \oplus a_{j_1} \oplus a_{j_2} \oplus \ldots \oplus a_{j_l} \) | \( a_{j_1} = a_i \wedge a_{j_1} \), \( a_{j_2} = a_i \wedge a_{j_2} \), ..., \( a_{j_l} = a_i \wedge a_{j_l} \) | \( s \in tND(t) \) |
| \( t: a_1 \otimes a_2 \otimes \ldots \otimes a_l \) | \( a_j = a_1 \otimes a_2 \otimes \ldots \otimes a_l \) | — |
| \( t: a_i \otimes a_{j_1} \otimes a_{j_2} \otimes \ldots \otimes a_{j_l} \) | \( a_{j_1} = a_i \wedge a_{j_1} \), \( a_{j_2} = a_i \wedge a_{j_2} \), ..., \( a_{j_l} = a_i \wedge a_{j_l} \) | \( s \in tND(t) \) |
| \( t: a_i a_j \) | \( a_i = a_j \) | — |

**Example 24:** The workflow from Figure 1 has several snapshots. As \( ND = \{2, 6\} \), \( wND(WG) = \{tND(t_2), tND(t_6)\} \), \( tND(t_2) = \{a_2, a_3\} \), \( tND(t_6) = \{a_7, a_8\} \). Let \( tss(t_2) = P \cup N \), where \( P = \{a_2\} \) and \( N = \{a_3\} \), i.e., \( a_2 \) is asserted to true and \( a_3 \) is asserted to false. Let \( tss(t_6) = P \cup N \), where \( P = \{a_7\} \) and \( N = \{a_8\} \), i.e., \( a_7 \) is asserted to true and \( a_8 \) is asserted to false. Then one snapshot of \( WG \) is \( (tss(t_2), tss(t_6)) = (P \cup N, P \cup N) \), i.e., \( a_2 = \text{true} \), \( a_3 = \text{false} \), \( a_7 = \text{true} \), \( a_8 = \text{false} \).

**Remark 25:** If \( t \) is a XOR-split, then it has \( |tND(t)| \) snapshots. If \( t \) is an OR-split, then it has \( 2^{|tND(t)|} - 1 \) snapshots. If the workflow \( WG \) does not contain non-deterministic tasks, \( ND = \emptyset \). Therefore, there are no workflow snapshots.

### Behavioral Task Model

**Definition 26:** A behavioral task model of a task \( t \) is a behavioral expression denoted by \( b(t) \) when \( t \) is a deterministic task; and if \( t \) is a non-deterministic task, it is denoted by \( b(t, s) \), where \( s \) is a task snapshot. The behavioral expressions \( b(t) \) and \( b(t, s) \) are expressed in Table 2 and depend on the type of the EA models associated with them.

### Positive and Negative Behavioral Expressions

**Definition 27:** Let \( WG \) be a workflow. Let \( t: f_E \rightarrow f_C \) be an EA model. If \( t \) is a deterministic task, i.e., \( t: f_E \rightarrow f_C \) is an AND-join, AND-split, XOR-join, OR-join, or Sequence, we say that \( b(t) \) is positive when:
- (a) If \( t \) is an AND-join or AND-split, all its Boolean terms are true.
- (b) If \( t \) is a XOR-join, OR-join, or Sequence, both sides of its equalities are true.

If \( t \) is a non-deterministic task, i.e., \( t: f_E \rightarrow f_C \) is a XOR-split or an OR-split, we say that \( b(t, s) \) is positive when:
- (a) If \( t: f_E \rightarrow f_C \) is a XOR-split, there is only one of its equalities with both sides true.
- (b) If \( t: f_E \rightarrow f_C \) is an OR-split, there is at least one of its equalities with both sides true.

If \( t \) is any task of \( T \), we say that \( t \) is negative if it is not positive.

### Behavioral Workflow Model

**Definition 28:** Let \( WG \) be a workflow. The behavioral workflow model of \( WG \) (denoted by \( B(WG, s) \)) is a system of equalities formed by the behavioral task models of all tasks \( t_i \in T \):
- **Case 1:** If \( WG \) does not contain non-deterministic tasks, then the behavioral workflow model is \( \bigwedge_{i=1}^n b(t_i) \).
- **Case 2:** If \( WG \) contains non-deterministic tasks, suppose that \( t_{i_1}, t_{i_2}, \ldots, t_{i_k} \) are the non-deterministic tasks of \( WG \). For any workflow snapshot \( s = (s_{i_1}, s_{i_2}, \ldots, s_{i_k}) = wss(WG) = (tss(t_{i_1}), tss(t_{i_2}), \ldots, tss(t_{i_k})) \), the behavioral workflow model is \( \bigwedge_{i=1}^n b(t_i, s_i) \), where
  - \( b(t_i, s_i) = b(t_i) \) for \( i \in \{1, \ldots, n\} \setminus \{i_1, i_2, \ldots, i_k\} \)
  - \( b(t_{i_l}, s_{i_l}) \) for \( l \in \{1, 2, \ldots, k\} \)

**Remark 29:** If all the tasks \( t_i \in T \) are deterministic and therefore there are no workflow snapshots, we can denote \( B(WG, s) \) simply by \( B(WG) \).

**Example 30:** The workflow from Figure 1 has the following behavioral workflow model \( B(WG, s) \):
- \( a_2 = a_4 \), \( a_3 = a_5 \), \( a_7 = a_9 \), \( a_8 = a_{10} \)
- \( a_1 = a_6 = a_{11} \), \( a_{12} = a_{13} \)
- \( a_7 = a_6 \wedge a_7 \), \( a_8 = a_6 \wedge a_8 \), \( a_{11} = a_9 \oplus a_{10} \)
- \( a_2 = a_1 \wedge a_2 \), \( a_3 = a_1 \wedge a_3 \), \( a_{12} = a_4 \otimes a_5 \)

### Logical Termination

**Definition 31:** We say that \( WG \) logically terminates if \( a \) is true whenever \( a \) is true. We say that \( WG \) never logically terminates if \( a \) is false whenever \( a \) is true.

**Definition 32:** Let \( WG \) be a workflow and \( B(WG, s) \) be its behavioral workflow model. We say that \( B(WG, s) \) is positive if \( a \) in \( B(WG, s) \) is true, whenever \( a \) is asserted to true in \( B(WG, s) \). We say that \( B(WG, s) \) is negative if \( a \) in \( B(WG, s) \) is false, whenever \( a \) is asserted to true in \( B(WG, s) \).

**Theorem 33:** Let \( WG \) be a workflow and let \( B(WG, s) \) be its behavioral workflow model. Then, \( WG \) logically terminates if and only if \( B(WG, s) \) is positive.

**Proof:**
- **Case 1:** Suppose that \( WG \) does not contain non-deterministic tasks, i.e., all the tasks present in \( WG \) are deterministic. Then, \( B(WG, s) = B(WG) = \bigwedge_{i=1}^n b(t_i) \). Since \( WG \) is formed by all its EA models, and according to Definition 26, every EA model \( t: f_E \rightarrow f_C \) is described by its behavioral task model \( b(t) \), consequently the behavior of the workflow is described by \( B(WG) \). Hence, \( a \) is true when \( a \) is true in \( WG \) if and only if \( a \) is true when \( a \) is true in \( B(WG) \), i.e., \( WG \) logically terminates if and only if \( B(WG) \) is positive.
- **Case 2:** Suppose that \( WG \) contains non-deterministic tasks. Suppose that \( ND = \{i_1, i_2, \ldots, i_k\} \), i.e., \( t_{i_1}, t_{i_2}, \ldots, t_{i_k} \) are the non-deterministic tasks of \( WG \). Let \( s = (s_{i_1}, s_{i_2}, \ldots, s_{i_k}) = (tss(t_{i_1}), tss(t_{i_2}), \ldots, tss(t_{i_k})) \) be a workflow snapshot of \( WG \). Then \( B(WG, s) = \bigwedge_{i=1}^n b(t_i, s_i) \), where \( b(t_i, s_i) \) is defined by (1). Bearing in mind that \( WG \) is formed by all its EA models, and according to Definition 26, every EA model \( t: f_E \rightarrow f_C \) is described by its behavioral task model \( b(t, s) \), then the behavior of the workflow is described by \( B(WG, s) \). Therefore, \( a \) is true when \( a \) is true in \( WG \) if and only if \( a \) is true when \( a \) is true in \( B(WG, s) \), i.e., \( WG \) logically terminates if and only if \( B(WG, s) \) is positive.

**Theorem 34:** Let \( WG \) be a workflow and let \( B(WG, s) \) be its behavioral workflow model. Then, \( WG \) never logically terminates if and only if \( B(WG, s) \) is negative.

**Proof:** Using similar arguments as those from the proof of the previous theorem, we can state that \( a \) is false whenever \( a \) is true in \( WG \) if and only if \( a \) is false when \( a \) is true in \( B(WG, s) \). Thus, \( WG \) never logically terminates if and only if \( B(WG, s) \) is negative.

### Conclusions

To guarantee that workflows successfully terminate, it is necessary to verify their properties at design time. In this paper, we present a formal theory based on graphs to check the termination of workflows. In our approach, we model workflows with tri-logic acyclic directed graphs and develop a snapshot-based formalism to investigate the termination of workflows. The analysis of graph-based workflows is important since many of the most well-known and widespread workflow systems use a notation based on graphs. While it is possible to transform a graph-based workflow into a Petri net-based workflow and then verify its termination, we believe that it is more practical for workflow vendors to directly implement into their systems the theory that we have developed. This solution will allow commercial applications to be less complex and eliminate the need to implement a software layer to interpret Petri nets. The contribution of our work will enable the development of a new set of tools that will support and allow business process analysts to verify the correct design of their workflows in an early phase of the workflow lifecycle development.

### References

[1] W.M.P. van der Aalst. The application of Petri nets to workflow management. The Journal of Circuits, Systems and Computers, 8(1):21–66, 1998.

[2] P. Attie, et al. Specifying and enforcing intertask dependencies. In Proc. 19th Int. Conference on Very Large Data Bases, pp. 134–145, Ireland, 1993.

[3] J. Cardoso and G. Cravo Verifying the logical termination of workflows. In Proc. 5th Annual Hawaii International Conference on Statistics, Mathematics and Related Fields, pp. 330–346, ISSN: 1550-3747, 16-18 January, Hawaii, USA, 2006.

[4] Umeshwar Dayal, et al. Organizing long-running activities with triggers and transactions. In ACM SIGMOD international conference on Management of data table of contents, pp. 204–214, 1990.

[5] J. Eder, et al. A workflow system based on active databases. In Proceedings of CON’94, Workflow Management: Challenges, Paradigms and Products, pp. 249–265, Austria, 1994.

[6] A.H.M. ter Hofstede and E.R. Nieuwland. Task structure semantics through process algebra. Software Engineering Journal, 8(1):14–20, 1993.

[7] J. Klingemann, et al. Deriving service models in cross-organizational workflows. In Proceedings of RIDE-Information Technology for Virtual Enterprises (RIDE-VE’99), pp. 100–107, Sydney, Australia, 1999.

[8] METEOR. Meteor (managing end-to-end operations) project homepage, 2004.

[9] P. Muth, et al. Enterprise-wide workflow management based on state and activity charts. In Proceedings NATO Advanced Study Institute on Workflow Management Systems and Interoperability. Springer Verlag, 1998.

[10] M.P. Singh. Semantical considerations on workflows: An algebra for inter-task dependencies. In Fifth International Workshop on Database Programming Languages, Electronic Workshops in Computing, Italy, 1995.