for the attacker. The reason we do this is that, in fact,
the other inputs included in event descriptions such as IRQ
appear to provide relatively little entropy. (Of course a real
attacker would need to predict these values as well, but again
we will be generous to the attacker.)
Input and output events. For a given platform (Xen,
VMware, EC2, or no-virtualization) we analyze the traces
of inputs and outputs of /dev/(u)random starting at boot and
assign an identiﬁer to each input and output event so that
we can compare events across all t trials in each dataset.
We identify input events by the type of event (disk event
or interrupt by IRQ) and the index speciﬁc to that event
type in each trial. Grouping identiﬁers across all t trials, a
given identiﬁer, say (IRQ 16, 20), is a t-dimensional vector
of cycle counter values representing the cycle counters from
the 20th occurrence of interrupts on IRQ 16 across all trials.
Similarly, we group output events by their sequence in
a given trace. To analyze the security of output i, we ﬁrst
ﬁx a trial, then determine all the input events between the
output and the preceding output (i − 1). We call this input
sequence Si. Grouping inputs into sequences is critical to the
analysis: since we assume the only observable behavior of
/dev/(u)random is the output, then an attacker must correctly
predict all inputs in a given sequence to guess the internal
state of the RNG. The complexity of this operation then
grows exponentially with the length of any input sequence.
We deﬁne α ≥ 0 as the number of lower bits of a group
of cycle counters that appear to be uniformly distributed for
any given input event. For any input event, some number of
upper bits may provide some adversarial uncertainty, but for
simplicity we ignore these and focus only on the lowest α
bits.
Statistical test for uniformity. To determine how many
low bits appear
to provide uncertainty, we use the
Kolmogorov-Smirnov (KS) 1-sample test [29]. The KS test
determines the maximum difference between the cumulative
distribution function of a set of samples compared to a
reference distribution. We proceed as follows for a candidate
α value and a particular input event which recall consists of
a t-dimensional vector of cycle counters. We mask the upper
(64− α) bits of each cycle counter value to produce a list of
t α-bit values. We then compare these values to the uniform
distribution over [0, 2α − 1] using the KS test. The KS test
564
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:01:43 UTC from IEEE Xplore.  Restrictions apply. 
rejects any set of samples when the maximum difference
is above some predeﬁned threshold for a given signiﬁcance
level. Typical signiﬁcance levels include 0.1, 0.05, 0.025,
and 0.001 [29]; we chose 0.1 which is most conservative
(it favors smaller values for α). We ﬁnd the largest α that
passes this KS test.
Any given event may be highly correlated with some
previous event and an attacker can use this correlation to
her advantage. To account for this, we also apply the above
tests to relative cycle counter values. That is, for an input
event E we compute, for a previous input or output event
E(cid:2), the relative cycle counter value obtained by subtracting
from the cycle counter of E the cycle counter value of E(cid:2)
(from the same trace). Then we compute the maximum α
that passes the KS test for uniformity using these relative
cycle counter values for E. We repeat this for every event E(cid:2)
preceding E, and only keep the minimal α value computed.
We also experimented with using a χ2 test in place of KS
in the procedures just described. The results were largely
the same for equivalent signiﬁcance levels, with the KS test
being slightly more conservative (it chose smaller α values).
We therefore use KS and only report on it.
Computing complexity. For output i from /dev/(u)random,
let Si be sequence of input events that precede i (but occur
after i − 1) and let (cid:4)i be the length of Si (the number of
input events). Sequence lengths may vary from trial to trial
on the same platform, due to slight timing differences during
the boot sequence. Sequence length is a key component to
the complexity of predicting input values since each input
in a sequence increases the attacker’s search space by a
multiplicative factor. So we compute the complexity of pre-
dicting a given sequence individually for each trial and we
analyze both the minimum and median values. We compute
the complexity of predicting the cycle counters for the events
minAlpha(x). This is
in input sequence Si as: si =
the same as computing the logarithm of the size of the search
tree for cycle counters when the attacker must only predict
the lower αj bits for each event j ∈ Si where the bits are
all independently chosen.
To determine the complexity of predicting output i, we
compute κi = max{s1, s2, . . . , si}. We use maximum
instead of sum for simplicity, since in general the cumulative
complexity is dominated by the most complex sequence.
Again, we compute κi individually for each trial and then
examine the minimum value across all trials.
x∈Si
(cid:2)
To summarize, 2κi represents a lower bound on an adver-
sary’s ability to predict the ith output of the RNG during boot
assuming that the low α bits for each event (the α varies
between events) are uniform. Unless speciﬁed otherwise, this
will be the standard method for computing lower-bounds on
attack complexity, and although it is a heuristic, we believe
it to be a good one.
Figure 5 shows the complexities for the platforms we
tested during the ﬁrst few seconds of boot. These values
were computed using t = 200 boots on each platform
using our instrumented kernel. In all cases the ﬁrst output is
vulnerable; see discussion below. Beyond that, our analysis
shows that the lower-bounds on attacks increase very rapidly,
with Xen and the native platform exhibiting the smallest
complexity for the second output, an attack complexity
least 2129. The non-virtualized platform reaches a
of at
min κi = 1024 at output 140 which is generated 4.0 seconds
after boot (not shown). After 5 seconds on all platforms the
attack complexity reaches the maximal value for this RNG:
1024 bits. Note that the times of outputs reported in this
table are relative to the time the Linux kernel is initialized,
which does not include the time in the VM manager’s startup
and guest boot loader (e.g., this is about ∼3.5 seconds in
VMware).
We observe that very long input sequences dominate the
cumulative attack complexity κi, which is not surprising.
In all trials on all platforms, we observed max((cid:4)i)) ≥ 395
in the ﬁrst 5 seconds after boot, that is, all boots have at
least one sequence of 395 or more inputs. This means that
each input cycle counter needs to carry only 2.6 bits of
uncertainty on average for κi to reach its maximum value
of 1024. On a platform with a 1.8 GHz clock (the slowest
platform we tested, EC2), this represents an average jitter
for input events of 2.9ns.
Note that this analysis assumes that the cycle counters of
input events are not under the control of an attacker and that
cycle counter values are not leaked to an attacker through a
side channel. Although such attacks may be possible, they
require an attacker to control or inﬂuence nearly all inputs
to the RNG or gain knowledge of nearly all bits of each of
the tens of thousands of inputs that occur during boot.
First output entropy hole. Note that Figure 5 shows that
the complexity of predicting the ﬁrst output is zero. The ﬁrst
output of /dev/(u)random always occurs before any inputs
are added to the RNG. Because the VM is supplied with
zeroed memory pages, the Linux RNGs always start in a
predictable state and so this output is deterministic. We
observe this behavior on both VMware and Xen. The ﬁrst
output, always the 64-bit hexadecimal value 0x22DAE2A8
862AAA4E, is used by boot init stack protector. The cur-
rent cycle counter is added to this RNG output (the canary
equals CC + (CC (cid:8) 32) where CC is cycle counter) to
initialize the stack canary of the init process. Fortunately, the
cycle counter adds some unpredictability, but our analysis of
the ﬁrst GRI output (see Section IV-B) indicates that cycle
counters early in boot carry about 27 bits of uncertainty,
which is signiﬁcantly weaker than the ideal security of 64-
bits for a uniformly random stack canary.
B. GRI boot-time analysis
To predict the 32-bit output of the GRI RNG, an attacker
needs to know the state of the GRI before the call (HV and
565
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:01:43 UTC from IEEE Xplore.  Restrictions apply. 
i
1
2
5
10
15
Ti
0
0.9
1.0
1.2
3.6
Native
(cid:2)i
si
0
0
129
48
0
0
0
0
0
0
κi
0
129
129
129
129
Ti
0
0.1
0.2
2.1
2.1
Xen
si
0
129
0
24
0
(cid:2)i
0
9
0
3
1
κi
0
129
700
1024
1024
Ti
0
1.0
1.0
5.2
5.2
VMware
(cid:2)i
si
0
0
794
66
0
0
1024
75
0
0
κi
0
784
784
784
1024
Ti
0
1.1
1.1
1.4
2.6
EC2
si
0
216
0
0
0
(cid:2)i
0
15
0
0
1
κi
0
134
785
1024
1024
i
1
2
5
10
VMware GRI
Ti
0.3
0.3
0.4
0.4
κi
22
33
76
109
τi
27
44
94
171
(Left) Complexity estimates for predicting the ﬁrst /dev/(u)random outputs generated during boot. Ti is the maximum time in seconds (relative
Figure 5.
to boot start) that output i was requested; (cid:2)i is median sequence length; si is the median sequence complexity; and κi is the minimum cumulative
complexity across all trials on a given platform. (Right) Complexity estimates for GRI outputs. Here τi is the actual attack complexity (in bits) of the
attack we implemented.
S, 128-bits and 512-bits, respectively) as well as the inputs
used (J, CC, and P ). When booting on a VM, the initial
state of HV and S are all zeroes. S remains zero until it
is initialized from /dev/(u)random (after approximately 100
calls to GRI in our observations). If the correlation between
the jifﬁes counter J and the cycle counter CC is known
(they are based on the same underlying clock), then the
only unknown to an attacker is CC at the time each output
is generated. The worst case scenario occurs on VMware
where the cycle counter is virtualized by default, and so
begins at 0 each time a VM is booted. In our experiments
with VMware, we observed only 2 unique values of J at the
time the ﬁrst call to GRI is made. So if an attacker correctly
guesses the CC and it’s associated J value, then futures
values of J can be computed using the ratio of cycles to
timer ticks. We therefore focus only on the cycle counter.
We use a complexity estimate similar to that in the last
section, except that when bounding the complexity for output
i of the GRI RNG we do not assume the attacker knows the
prior outputs. If we did, then each output would only have as
much uncertainty as a single cycle counter carries — the GRI
RNG does not attempt to deal with checkpointing attacks
and never adds entropy except during output generation.
For GRI, we deﬁne si
to be the minimum number of
lower bits α that appear uniformly distributed across the
cycle counters used when output i is generated across all
t trials. We use the same algorithm for computing α as
we use for /dev/(u)random. Our computation of κi for GRI
differs, we deﬁne κi as the sum of all preceding sj values:
κi =
j∈[i] sj. Here we are excluding checkpointing
attacks.
(cid:2)
Figure 5 (right
table) shows the resulting complexity
estimates κi for the ﬁrst few outputs i of GRI from 200
boots on VMware (results on Xen and EC2 were similar).
If we exclude the secret value S from GRI, which is a known
value at the start of boot, then GRI has a maximal security
state of 128-bits (the size of its hash chaining variable). GRI