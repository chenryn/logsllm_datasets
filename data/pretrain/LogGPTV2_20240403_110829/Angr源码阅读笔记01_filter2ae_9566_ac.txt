                # we still want to try as hard as we can to figure out where it comes from
                # so we can get the calling convention as close to right as possible.
                elif reloc.resolvewith is not None and reloc.resolvewith in SIM_LIBRARIES:
                    sim_lib = SIM_LIBRARIES[reloc.resolvewith]
                    if self._check_user_blacklists(export.name):
                        if not func.is_weak:
                            l.info("Using stub SimProcedure for unresolved %s from %s", func.name, sim_lib.name)
                            self.hook_symbol(export.rebased_addr, sim_lib.get_stub(export.name, sim_proc_arch))
                    else:
                        l.info("Using builtin SimProcedure for unresolved %s from %s", export.name, sim_lib.name)
                        self.hook_symbol(export.rebased_addr, sim_lib.get(export.name, sim_proc_arch))
                # Step 2.4: If 2.3 didn't work (the symbol didn't request a provider we know of), try
                # looking through each of the SimLibraries we're using to resolve unresolved
                # functions. If any of them know anything specifically about this function,
                # resolve it with that. As a final fallback, just ask any old SimLibrary
                # to resolve it.
                elif missing_libs:
                    for sim_lib in missing_libs:
                        if sim_lib.has_metadata(export.name):
                            if self._check_user_blacklists(export.name):
                                if not func.is_weak:
                                    l.info("Using stub SimProcedure for unresolved %s from %s", export.name, sim_lib.name)
                                    self.hook_symbol(export.rebased_addr, sim_lib.get_stub(export.name, sim_proc_arch))
                            else:
                                l.info("Using builtin SimProcedure for unresolved %s from %s", export.name, sim_lib.name)
                                self.hook_symbol(export.rebased_addr, sim_lib.get(export.name, sim_proc_arch))
                            break
                    else:
                        if not func.is_weak:
                            l.info("Using stub SimProcedure for unresolved %s", export.name)
                            the_lib = missing_libs[0]
                            if export.name and export.name.startswith("_Z"):
                                # GNU C++ name. Use a C++ library to create the stub
                                if 'libstdc++.so' in SIM_LIBRARIES:
                                    the_lib = SIM_LIBRARIES['libstdc++.so']
                                else:
                                    l.critical("Does not find any C++ library in SIM_LIBRARIES. We may not correctly "
                                               "create the stub or resolve the function prototype for name %s.", export.name)
                            self.hook_symbol(export.rebased_addr, the_lib.get(export.name, sim_proc_arch))
                # Step 2.5: If 2.4 didn't work (we have NO SimLibraries to work with), just
                # use the vanilla ReturnUnconstrained, assuming that this isn't a weak func
                elif not func.is_weak:
                    l.info("Using stub SimProcedure for unresolved %s", export.name)
                    self.hook_symbol(export.rebased_addr, SIM_PROCEDURES['stubs']['ReturnUnconstrained'](display_name=export.name, is_stub=True))
####  2.2.7 第七步
    # Step 7: Run OS-specific configuration
            self.simos.configure_project()
​ 执行 OS 特定的配置，函数原型在`./simos/simos.py`
     def configure_project(self):
            """
            Configure the project to set up global settings (like SimProcedures).
            """
            self.return_deadend = self.project.loader.extern_object.allocate()
            self.project.hook(self.return_deadend, P['stubs']['CallReturn']())
            self.unresolvable_jump_target = self.project.loader.extern_object.allocate()
            self.project.hook(self.unresolvable_jump_target, P['stubs']['UnresolvableJumpTarget']())
            self.unresolvable_call_target = self.project.loader.extern_object.allocate()
            self.project.hook(self.unresolvable_call_target, P['stubs']['UnresolvableCallTarget']())
            def irelative_resolver(resolver_addr):
                # autohooking runs before this does, might have provided this already
                # in that case, we want to advertise the _resolver_ address, since it is now
                # providing the behavior of the actual function
                if self.project.is_hooked(resolver_addr):
                    return resolver_addr
                base_state = self.state_blank(addr=0,
                    add_options={o.SYMBOL_FILL_UNCONSTRAINED_MEMORY, o.SYMBOL_FILL_UNCONSTRAINED_REGISTERS})
                resolver = self.project.factory.callable(resolver_addr, concrete_only=True, base_state=base_state)
                try:
                    if isinstance(self.arch, ArchS390X):
                        # On s390x ifunc resolvers expect hwcaps.
                        val = resolver(0)
                    else:
                        val = resolver()
                except AngrCallableMultistateError:
                    _l.error("Resolver at %#x failed to resolve! (multivalued)", resolver_addr)
                    return None
                except AngrCallableError:
                    _l.error("Resolver at %#x failed to resolve!", resolver_addr)
                    return None
                return val._model_concrete.value
            self.project.loader.perform_irelative_relocs(irelative_resolver)
###  2.3 Hook
​ angr的一大特色SimProcedure依赖于Hook功能，angr提供了以下几个常用的hook功能函数
    def hook(self, addr, hook=None, length=0, kwargs=None, replace=False):
    def hook_symbol(self, symbol_name, obj, kwargs=None, replace=None):
    def _hook_decorator(self, addr, length=0, kwargs=None):
​ hook 用于将某段代码替换为其他的操作。其中参数 `hook` 是一个 `SimProcedure`
的实例，如果没有指定该参数，则假设函数作为装饰器使用。被 hook 的地址及实例 `hook` 被放入字典
`self._sim_procedures`。`hook_symbol()` 首先解析符号名得到对应的地址，然后调用 `hook()`
####  2.3.1 hook()
用自定义的函数hook住一段代码。它用于内部提供库函数的符号，并用于插桩执行或修改控制流。当没有指定hook时，它将返回一个允许容易hook的函数装饰器
    #
        # Public methods
        # They're all related to hooking!
        #
        # pylint: disable=inconsistent-return-statements
        def hook(self, addr, hook=None, length=0, kwargs=None, replace=False):
            """
            Hook a section of code with a custom function. This is used internally to provide symbolic
            summaries of library functions, and can be used to instrument execution or to modify
            control flow.
            When hook is not specified, it returns a function decorator that allows easy hooking.
            Usage::
                # Assuming proj is an instance of angr.Project, we will add a custom hook at the entry
                # point of the project.
                @proj.hook(proj.entry)
                def my_hook(state):
                    print("Welcome to execution!")
            :param addr:        The address to hook.
            :param hook:        A :class:`angr.project.Hook` describing a procedure to run at the given address. You may also pass in a SimProcedure class or a function directly and it will be wrapped in a Hook object for you.
            :param length:      If you provide a function for the hook, this is the number of bytes that will be skipped by executing the hook by default.
            :param kwargs:      If you provide a SimProcedure for the hook, these are the keyword arguments that will be passed to the procedure's `run` method eventually.
            :param replace:     Control the behavior on finding that the address is already hooked. If true, silently replace the hook. If false (default), warn and do not replace the hook. If none, warn and replace the hook.
            """
            if hook is None:
                # if we haven't been passed a thing to hook with, assume we're being used as a decorator
                return self._hook_decorator(addr, length=length, kwargs=kwargs)
            if kwargs is None: kwargs = {}
            l.debug('hooking %s with %s', self._addr_to_str(addr), str(hook))
            if self.is_hooked(addr):
                if replace is True:
                    pass
                elif replace is False:
                    l.warning("Address is already hooked, during hook(%s, %s). Not re-hooking.", self._addr_to_str(addr), hook)
                    return
                else:
                    l.warning("Address is already hooked, during hook(%s, %s). Re-hooking.", self._addr_to_str(addr), hook)
            if isinstance(hook, type):
                raise TypeError("Please instanciate your SimProcedure before hooking with it")
            if callable(hook):
                hook = SIM_PROCEDURES['stubs']['UserHook'](user_func=hook, length=length, **kwargs)
            self._sim_procedures[addr] = hook
​ 首先我们来看看参数部分：
  * addr：要Hook的地址
  * hook：一个angr.project.Hook类，描述要在给定地址运行的过程。您也可以直接传递SimProcedure类或函数，它将为您包装在Hook对象中
  * length：如果为Hook提供需要替换函数，则这是默认情况下通过执行Hook掉该函数后将跳过的字节数
  * kwargs：如果为Hook函数提供的是SimProcedure对象，则这些是关于SimProcedure的关键字参数，最终将传递给过程的run方法
  * replace：主要是控制如果发现地址已经被hook后的操作 
    * true：无提示地直接更换hook
    * false：发出警告信息并不替换该hook（为缺省值）
    * none：发出警告并替换该hook
    self._sim_procedures[addr] = hook
> **callable()** 函数用于检查一个对象是否是可调用的。如果返回 True，object 仍然可能调用失败；但如果返回 False，调用对象
> object 绝对不会成功
​ 被 hook 的地址及实例 `hook` 被放入字典 `self._sim_procedures`
​ 之后还有一些其它函数
    def is_hooked(self, addr):
            """
            Returns True if `addr` is hooked.
            :param addr: An address.
            :returns:    True if addr is hooked, False otherwise.
            """
            return addr in self._sim_procedures
    def hooked_by(self, addr):
            """
            Returns the current hook for `addr`.
            :param addr: An address.
            :returns:    None if the address is not hooked.
            """
            if not self.is_hooked(addr):
                l.warning("Address %s is not hooked", self._addr_to_str(addr))
                return None
            return self._sim_procedures[addr]
    def unhook(self, addr):
            """
            Remove a hook.
            :param addr:    The address of the hook.
            """
            if not self.is_hooked(addr):
                l.warning("Address %s not hooked", self._addr_to_str(addr))
                return
            del self._sim_procedures[addr]
####  2.3.2 hook_symbol
​
现实情况中我们更喜欢提供函数名（也就是一种符号名）来指代地址，而不是直接提供地址，且在动态加载库中也更为实际，所以在angr中`hook_symbol()`
首先解析符号名得到对应的地址，然后再调用 `hook()`
    def hook_symbol(self, symbol_name, simproc, kwargs=None, replace=None):
            """
            Resolve a dependency in a binary. Looks up the address of the given symbol, and then hooks that
            address. If the symbol was not available in the loaded libraries, this address may be provided
            by the CLE externs object.
            Additionally, if instead of a symbol name you provide an address, some secret functionality will
            kick in and you will probably just hook that address, UNLESS you're on powerpc64 ABIv1 or some
            yet-unknown scary ABI that has its function pointers point to something other than the actual
            functions, in which case it'll do the right thing.
            :param symbol_name: The name of the dependency to resolve.
            :param simproc:     The SimProcedure instance (or function) with which to hook the symbol
            :param kwargs:      If you provide a SimProcedure for the hook, these are the keyword
                                arguments that will be passed to the procedure's `run` method
                                eventually.
            :param replace:     Control the behavior on finding that the address is already hooked. If
                                true, silently replace the hook. If false, warn and do not replace the
                                hook. If none (default), warn and replace the hook.
            :returns:           The address of the new symbol.
            :rtype:             int
            """
            if type(symbol_name) is not int:
                sym = self.loader.find_symbol(symbol_name)
                if sym is None:
                    # it could be a previously unresolved weak symbol..?
                    new_sym = None
                    for reloc in self.loader.find_relevant_relocations(symbol_name):
                        if not reloc.symbol.is_weak:
                            raise Exception("Symbol is strong but we couldn't find its resolution? Report to @rhelmot.")
                        if new_sym is None:
                            new_sym = self.loader.extern_object.make_extern(symbol_name)
                        reloc.resolve(new_sym)
                        reloc.relocate([])
                    if new_sym is None:
                        l.error("Could not find symbol %s", symbol_name)
                        return None
                    sym = new_sym
                basic_addr = sym.rebased_addr
            else:
                basic_addr = symbol_name
                symbol_name = None
            hook_addr, _ = self.simos.prepare_function_symbol(symbol_name, basic_addr=basic_addr)
            self.hook(hook_addr, simproc, kwargs=kwargs, replace=replace)
            return hook_addr
​ 我们来看看参数部分：
  * symbol_name：需要解析地函数名称
  * simproc：需要hook的SimProcedure实例（或函数）
  * kwargs：如果为Hook函数提供的是SimProcedure对象，则这些是关于SimProcedure的关键字参数，最终将传递给过程的run方法
  * replace：主要是控制如果发现地址已经被hook后的操作 
    * true：无提示地直接更换hook
    * false：发出警告信息并不替换该hook（为缺省值）
    * none：发出警告并替换该hook