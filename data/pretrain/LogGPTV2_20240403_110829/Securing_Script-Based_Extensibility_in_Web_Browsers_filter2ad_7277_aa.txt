title:Securing Script-Based Extensibility in Web Browsers
author:Vladan Djeric and
Ashvin Goel
Securing Script-Based Extensibility in Web Browsers
Vladan Djeric, Ashvin Goel
University of Toronto
Abstract
Web browsers are increasingly designed to be ex-
tensible to keep up with the Web’s rapid pace of
change. This extensibility is typically implemented
using script-based extensions. Script extensions
have access to sensitive browser APIs and content
from untrusted web pages. Unfortunately, this pow-
erful combination creates the threat of privilege es-
calation attacks that grant web page scripts the full
privileges of extensions and control over the entire
browser process.
This paper makes two contributions. First, it
describes the pitfalls of script-based extensibility
based on our study of the Firefox web browser. We
ﬁnd that script-based extensions can lead to arbi-
trary code injection and execution control, the same
types of vulnerabilities found in unsafe code. Sec-
ond, we propose a taint-based system to track the
spread of untrusted data in the browser and to de-
tect the characteristic signatures of privilege escala-
tion attacks. We evaluate this approach by using ex-
ploits from the Firefox bug database and show that
our system detects the vast majority of attacks with
almost no false alarms.
1
Most web browsers today provide powerful exten-
sibility features, including native and script-based
extensions. Native extensions (or plugins) are typi-
cally used when performance is critical (e.g., virtual
machines for Java, Flash, media players, etc.), while
script extensions ensure memory safety and have the
advantage of being inherently cross-platform and
amenable to rapid development. Examples of pop-
ular script extensions include the Firefox Adblock
extension [1] that ﬁlters content from blacklisted ad-
vertising URLs, and Greasemonkey [4] that allows
users to install arbitrary scripts in web pages for cus-
tomization or to create client-side mashup pages.
Introduction
Script extensions must have access to both sensi-
tive browser APIs and content from untrusted web
pages. For example, Adblock must be able to ac-
cess the local disk to store its URL blacklist and
access web pages to ﬁlter their content. This com-
bination is needed for writing powerful extensions,
but it creates challenges for securely executing web
page scripts. Speciﬁcally, when extensions interact
with web pages, there is a risk of a privilege escala-
tion attack that grants web page scripts the full privi-
leges of script extensions and control over the entire
browser process. Privilege escalation vulnerabilities
are perhaps even more critical than memory safety
vulnerabilities because script-based attacks can of-
ten be executed reliably.
Our goals in this paper are two-fold: 1) under-
standing the nature of script-based privilege escala-
tion vulnerabilities, 2) proposing methods to secure
the Firefox browser against them. Privilege esca-
lation vulnerabilities are common in Firefox, and
comprise roughly a third of the critical vulnerabil-
ity advisories. They arise from unsafe extension be-
haviors or bugs in the Firefox security mechanisms
that regulate interactions between trusted native or
extension scripts and untrusted web page scripts.
These vulnerabilities have appeared regularly in ev-
ery version of the browser and exist even in the lat-
est versions. This is despite continuing effort from a
dedicated team of security developers that have pro-
gressively improved the browser security model.
The Firefox security model consists of a com-
bination of stack inspection and one-way names-
pace isolation. The stack inspection mechanism,
implemented at the boundary of the script and na-
tive code, regulates accesses to sensitive native in-
terfaces based on the principals of the caller. For
example, a local ﬁle access is denied if the current
stack contains a frame associated with an untrusted
principal.1 Namespace isolation is used to enforce
the same-origin policy for web page scripts. This
policy limits interactions between scripts and doc-
uments loaded from different origins. The names-
pace isolation is one way in that script extensions
1A principal represents the code’s origin and, for web page
scripts, it consists of a scheme, host, port combination.
are privileged and allowed to access content names-
paces, but web page scripts should not be able to
obtain a reference to the privileged namespace. This
policy is designed to enforce the same-origin policy
and defend against privilege escalation attacks.
These security mechanisms are well understood,
but they have two ﬂaws: 1) relying entirely on prin-
cipals as a measure of trustworthiness for stack in-
spection, and 2) depending on one-way namespace
isolation to work correctly. In practice, an exploit
can leverage browser bugs or vulnerable extensions
to confuse the browser into assigning wrong princi-
pals to code or executing data or code with wrong
principals, thus defeating stack inspection. Second,
reference leaks can occur because of interactions
between privileged and unprivileged scripts, com-
promising namespace isolation and allowing un-
privileged scripts to affect the execution of privi-
leged scripts. As a result, we ﬁnd that arbitrary code
injection and execution control vulnerabilities that
commonly exist in unsafe code can also occur with
script-based extensibility.
Based on the ﬂaws described above, our solution
for securing the Firefox browser consists of com-
bining tainting with the existing stack-based secu-
rity model. Our approach guarantees that tainted
data will not be executed as privileged code. Taint-
ing all data from untrusted origins and propagating
the tainted data throughout the browser provides a
much stronger basis for making security decisions.
In essence, our attack detectors “second guess” the
security decisions of the browser by taking into ac-
count one additional piece of information, i.e.
the
taint status. This solution is conceptually simple
and well-suited for the browser’s security model be-
cause namespace isolation already provides a se-
curity barrier between the taint sources in content
namespaces and privileged code residing in exten-
sion namespaces. As a result, we show that it is un-
likely that attacks will be detected erroneously, even
if we fully taint all data and scripts from web pages.
The contributions of this paper are two-fold: 1)
we analyze and classify script-based privilege esca-
lation vulnerabilities in the commonly used Firefox
browser, 2) we use taint-based stack inspection to
design effective signatures for script-based exploits
and evaluate this approach. We use Firefox version
1.0 for the evaluation because it has several priv-
ilege escalation vulnerabilities and easily-available
exploits. Our results show that we can detect the
vast majority of attacks with almost no false alarms
and modest overhead.
Below, Section 2 provides background on the
Firefox security model. Section 3 presents our
classiﬁcation of privilege escalation vulnerabilities
and sample exploits. Section 4 describes our taint-
based approach for securing script-based extensi-
bility. Section 5 provides an evaluation of our ap-
proach. Section 6 describes related work in the
area and Section 7 presents our conclusions and de-
scribes future work.
2 The Firefox Browser
In this section, we provide an overview of the Fire-
fox architecture and its security model.
2.1 Architecture
Figure 1 shows a simpliﬁed version of the Fire-
fox architecture relevant to this work. The basic
browser functionality is provided by native C++
components written using Mozilla’s cross-platform
component model (XPCOM). XPCOM components
implement functionality such as ﬁle and socket ac-
cess, the document object model (DOM) for rep-
resenting HTML documents, and higher-level ab-
stractions, such as bookmarks, and expose this func-
tionality via the XPIDL interface layer. The Script
Security Manager (SSM) is an XPCOM component
responsible for implementing the browser’s security
mechanisms.
The JavaScript
interpreter accesses XPCOM
functionality via the XPConnect translation layer.
This layer allows the interpreter and the XPCOM
classes to work with each others data types transpar-
ently. XPConnect also serves as the primary secu-
rity barrier for enforcing the browser’s same origin
policy and restricting access to sensitive XPCOM
interfaces.
Firefox’s script extensions and privileged UI
scripts, shown in Figure 1, are loaded from lo-
cal ﬁles through URIs with the “chrome” protocol.
They are privileged and have access to a greater
number of XPCOM interface methods than web
page scripts and are not subject to the browser’s
same origin policy. Similar to other browsers, Fire-
fox also supports native plugins for Java, Flash, etc.
of operations (e.g., call a function F, get a property
A, set a property B), and the object is the principal
of the object that is the target of the operation. This
security mechanism is implemented in the Script
Security Manager, and invoked by XPConnect to
regulate access to sensitive XPCOM interfaces and
by the interpreter to limit access to sensitive func-
tions and object properties.
The principal of a web page script is deﬁned by
the origin of the document containing the script (its
protocol, hostname, and port). The Script Security
Manager determines the subject principal by walk-
ing down the JavaScript stack until it ﬁnds a stack
frame with a script principal. The object principal is
determined by walking up the object’s parent chain
(scope chain) in its namespace until an ancestor ob-
ject with a principal is found. For web pages, the ob-
ject’s parent chain leads to a top-level HTML docu-
ment associated with the window object.
3 Script-Based Privilege Escalation
Privilege escalation vulnerabilities are created by
unsafe extension behaviors or bugs in the Firefox
security mechanisms that regulate interactions be-
tween privileged and unprivileged code.
In this
section, we ﬁrst discuss different classes of script-
based privilege escalation vulnerabilities and then
describe examples of real vulnerabilities.
3.1 Vulnerability Classiﬁcation
Our analysis of the Firefox bug database revealed
four main classes of privilege escalation vulnera-
bilities: code compilation, luring, reference leaks
and insufﬁcient argument sanitization. Most of the
known Firefox vulnerabilities can be attributed to
one or more of these classes.
3.1.1 Code Compilation Vulnerabilities
Similar to cross-site scripting (XSS) vulnerabil-
ities that occur in web sites, code compilation
vulnerabilities allow arbitrary strings from content
namespaces to be compiled into JavaScript byte-
code with privileged principals. Unlike a stati-
cally typed language such as Java, JavaScript al-
lows arbitrary strings to be converted into byte code
at runtime through eval and eval-like functions
such as setTimeout. The eval function com-
piles a string into byte code and executes it with
Figure 1: The Firefox architecture.
Although potential security vulnerabilities can ex-
ist within plugin implementations, we do not ad-
dress them. However, with appropriate sandboxing
of plugins [14, 23], we would be able to monitor any
script interactions with the plugins.
2.2 Security Model
two security schemes,
Firefox primarily uses
namespace isolation and a subject-verb-object
model based on stack inspection. Namespace iso-
lation is used to enforce the same origin policy for
web page scripts, and stack inspection regulates ac-
cess to sensitive XPCOM components. We de-
scribe each in more detail below.
2.2.1 Namespace Isolation
The browser runs scripts within an object names-
pace that deﬁnes the objects available to the script.
A window object lies at the root of the namespace
for each web page. For example, web page scripts
manipulate HTML by invoking the DOM methods
of the document object that is a property of this win-
dow object.
The browser enforces the same origin policy by
running web page scripts from different web pages
in different namespaces. These scripts are only al-
lowed to access other namespaces from the same
origin (described below). Extension scripts are al-
lowed to access all content namespaces. Extension
namespaces are hidden from the web page scripts,
and extensions are not expected to invoke web page
scripts directly.
2.2.2 Subject-Verb-Object Model
Firefox uses a “Subject-Verb-Object” access control
model. The subject is the principal of the currently
executing code, the verb is one of a limited number
XPCOM classesXPIDL InterfacesXPConnectJS InterpreterBookmarks objectsBookmarks objectsDOM objectsDOM objectsExtensionJSWeb pageJSBrowserUIJSSSMSSMthe principal of the calling script, even if the string
was obtained from a different namespace. Code
compilation vulnerabilities occur if attackers can
trick privileged code into compiling strings sup-
plied by the attacker, or if they can ﬁnd bugs in
the rules for assigning principals to newly com-
piled byte code. For example, it can be danger-
ous for privileged code to load URIs from untrusted
namespaces as the URIs are capable of carrying
script code inline. For example, the “javascript”
protocol
(e.g., javascript:alert(’Hello
World’);) allows executing text after the proto-
col name as a script in the current namespace.
This problem may seem simple, but it has been
the cause of several security bugs in Firefox. For
example, even after vulnerable code was patched to
sanitize URIs before loading them, exploits were
possible because they did not account for nested
URIs such as view-source:javascript:.
3.1.2 Luring Vulnerabilities
Luring vulnerabilities allow malicious scripts to
trick privileged code into calling a privileged func-
tion of the attacker’s choosing instead of the in-
tended callee. Stack inspection prevents unprivi-
leged scripts from calling the privileged functions
directly, so malicious scripts must lure privileged
code into making these calls.Luring is possible be-
cause script extensions routinely access DOM ob-
jects in content namespaces.
These DOM ob-
jects are simply JavaScript wrappers for native XP-
COM objects with well-deﬁned, native interfaces.
However, JavaScript’s ﬂexibility allows web page
scripts to modify these wrapper objects.
In ver-
sions of Firefox after 1.0.3, privileged code is pro-
tected by automatically created “safety wrappers”
that hide any wrapper changes made by untrusted
code. However, if the safety wrapper code contains
bugs (as has often been the case), privileged code
again becomes vulnerable to luring attacks.
In order to execute privileged code, an attacker
can choose one of three possible kinds of callees: 1)
an eval-like native function, 2) a privileged function
accidentally leaked into the content sandbox (see
next section), or 3) a privileged native method that
legitimately exists in content namespaces. The third
category consists of XPCOM methods that are vis-
ible to ordinary web page scripts because they are
meant to be invoked by digitally signed web page
scripts. For example, the preference() method
of the navigator object allows privileged scripts
to read or write the browser’s conﬁguration, such as
the browser’s homepage and security settings. Or-
dinary web page scripts cannot invoke the sensitive
preference() method directly, but since every
function is also an object in JavaScript, web page
scripts can obtain an object reference to this method
and potentially trick buggy privileged code into in-
voking the reference.
3.1.3 Reference Leak Vulnerabilities
Reference leak vulnerabilities occur when web page
scripts gain access to references in the extension
namespace [11]. These leaks are compromises in
the isolation between privileged and unprivileged
namespaces. They allow an attacker to modify data
or code deﬁned in a privileged namespace and call
arbitrary functions within the privileged namespace,
potentially leading to arbitrary execution control.
Reference leaks are dangerous because privileged
code that depends on namespace isolation may be-
come accessible to web page scripts or it may be-
come vulnerable to code compilation or luring at-
tacks. Reference leaks can occur due to bugs in na-
tive code that deals with namespaces. Also, careless
extensions may place references to privileged ob-
jects in an untrusted namespace. Finally, reference
leaks can lead to cross-principal conﬁdentiality vio-
lations, but we do not address conﬁdentiality in this
paper.
3.1.4
Vulnerabilities can also occur if a browser extension
uses unsanitized data from untrusted namespaces as
arguments to privileged XPCOM APIs. For exam-
ple, if an extension used to download Flash videos
from web pages uses the name of the movie ﬁle on
a web page as part of the local ﬁlename to which
the ﬁle is saved, it may be open to directory traver-
sal attacks (e.g., using “../” to access normally inac-
cessible directories) that would not be detected by
the browser’s stack inspection mechanism.
If the
overwritten ﬁle were an extension JavaScript ﬁle, it
would lead to a privilege escalation attack. This spe-
ciﬁc class of vulnerability has not been documented
in the Firefox bug database, but we consider it a
Insufﬁcient Argument Sanitization
onLinkIconAvailable: function(Href)
{
if (favIcon && ...)
{
favIcon.setAttribute("src",
Href);
}
}
evalCode = "clonedFunction = \
function deliverPayload(){...}; \
clonedFunction()";
myElem = document.getElementById
("myMarquee");
xbl object = myElem.init.call;
eval(evalCode, xbl object);
Figure 2: Target code invoked when a LINK tag is
found in the current web page.
Figure 3: Exploit code that allows untrusted func-
tions to be associated with privileged principals.
likely vulnerability for extensions.
3.2 Examples
We describe some examples of privilege escala-
tion vulnerabilities from the Firefox bug database
to show that these vulnerabilities can be subtle and
easy to overlook.
3.2.1 URI Code Injection
Figure 2 shows an example of browser JavaScript
containing a code compilation vulnerability that can
lead to URI code injection (Bug 290036). This GUI
code displays a favicon (16x16 pixel icon) image
next to the browser’s URL bar. Normally the icon’s
URI, which is speciﬁed by the current web page,
would be the HTTP address of the favicon image,