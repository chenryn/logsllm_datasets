particular static signature, and perhaps even completely bypass the static engine.
The following diagram demonstrates the static engine scanning flow:
Antivirus – the basics     9
Figure 1.1 – Antivirus static engine illustration 
Using a dynamic engine, antivirus software becomes a little more advanced. This type of 
engine can detect malware dynamically (when the malware is executed in the system).
The dynamic engine is a little more advanced than the static engine, and its role is to 
check the file at runtime, through several methods.
The first method is API monitoring – the goal of API monitoring is to intercept API calls 
in the operating system and to detect the malicious ones. The API monitoring is done by 
system hooks. 
The second method is sandboxing. A sandbox is a virtual environment that is separated 
from the memory of the physical host computer. This allows the detection and analysis of 
malicious software by executing it within a virtual environment, and not directly on the 
memory of the physical computer itself.
Running malware inside a sandboxed environment will be effective against it especially 
when not signed and detected by the static engine of the antivirus software.
One of the big drawbacks of such a sandbox engine is that malware is executed only for 
a limited time. Security researchers and threat actors can learn what period of time the 
malware is executing in a sandbox for, suspend the malicious activity for this limited 
period of time, and only then run its designated malicious functionality.
10     Introduction to the Security Landscape
The following diagram demonstrates the dynamic engine scanning flow:
Figure 1.2 – Antivirus dynamic engine illustration 
Using a heuristic engine, antivirus software becomes even more advanced. This type of 
engine determines a score for each file by conducting a statistical analysis that combines 
the static and dynamic engine methodologies.
Heuristic-based detection is a method, that based on pre-defined behavioral rules, can 
detect potentially malicious behavior of running processes. Examples of such rules can be 
the following:
• If a process tries to interact with the LSASS.exe process that contains users' 
NTLM hashes, Kerberos tickets, and more
• If a process that is not signed by a reputable vendor tries to write itself into a 
persistent location
• If a process opens a listening port and waits to receive commands from a Command 
and Control (C2) server
The main drawback of the heuristic engine is that it can lead to a large number of false 
positive detections, and through several simple tests using trial and error, it is also possible 
to learn how the engine works and bypass it.
The following diagram demonstrates the heuristic engine scanning flow:
Figure 1.3 – Antivirus heuristic engine illustration 
Antivirus bypass in a nutshell     11
Another type of engine that is widely used by antivirus software is called the unpacker 
engine. In Chapter 5, Bypassing the Static Engine, we will discuss what a packer is, how the 
unpacking process works, and how to bypass antivirus software using packing.
One of the major drawbacks of today's advanced antivirus software centers on their use 
of unpackers, tools used by antivirus engines to reveal malicious software payloads that 
have undergone "packing," or compression, to hide a malicious pattern and thus thwart 
signature-based detection.
The problem is that there are lots of packers today that antivirus software does not have 
unpackers for. In order to create automated unpacker software, security researchers from 
the antivirus software vendor must first perform manual unpacking – and only then can 
they create an automated process to unpack it and add it to one of their antivirus engines.
Now that we understand the basic engines that exist in almost every antivirus software, 
we can move on to recognize practical ways to bypass them to ultimately reach the point 
where we are running malware that lets us remotely control the endpoint even while the 
antivirus software is up and running.
Antivirus bypass in a nutshell
In order to prove the central claim of this book, that antivirus software cannot protect 
the user completely, we decided to conduct research. Our research is practically tested 
based on our written and compiled EXE files containing code that actually performs the 
techniques we will explain later on, along with payloads that perform the bypass. The goal 
of this research wasn't just to obtain a shell on the endpoint, but rather to actually control 
it, transmit remote commands, download files from the internet, steal information, initiate 
processes, and many more actions – all without any alert from the antivirus software.
It is important to realize that just because we were able to bypass a particular antivirus 
software, that does not mean that it is not good software or that we are recommending 
against it. The environment in which the antivirus software was tested is a LAN 
environment and it is entirely possible that in a WAN environment, the result might have 
been different.
The communication between the malware and the C2 server was done using the TCP 
protocol in two ways:
• Reverse shell
• Bind shell
12     Introduction to the Security Landscape
The difference between these two methods lies in how communication is transmitted from 
the malware to the attacker's C2 server. Using the method of the bind shell, the malware 
acts as a server on the victim endpoint, listening on a fixed port or even several ports. 
The attacker can interact with the endpoint using these listening port(s) at any time the 
malware is running.
Using the reverse shell method, the listening fixed port will be open on the attacker's C2 
server and the malware acts as a client, which in turn will connect to the attacker's C2 
server using a random source port that is opened on the victim endpoint.
The following diagram demonstrates the differences between reverse and bind shell:
Figure 1.4 – Reverse shell and bind shell
Most of the time, threat actors will prefer to base their malicious payload to interact 
with their C2 servers on the reverse shell technique. This is because it is relatively easy to 
implement; it will work behind Network Address Translation (NAT) and it will probably 
have the chance to fool antivirus software and firewall solutions.
Summary     13
Summary
In today's world, antivirus software is an integral part of security for endpoints including 
computers and servers, ranging from ordinary users to the largest organizations.
Most companies depend on antivirus software as a first or even last line of defense 
against cyber threats. Because of this, we decided to research antivirus software, find 
vulnerabilities in their engines, and most importantly, discover ways to bypass them to 
prove that they simply do not provide a completely bulletproof solution.
To conduct antivirus bypass research, it is crucial to understand the cybersecurity 
landscape. Every day, new risks and threats for home and business users emerge. It 
is important to get familiar with security solutions that provide better cybersecurity.      
Additionally, it's important, of course, to understand the basic solution, the antivirus, and 
to understand its inner workings and fundamentals to conduct better antivirus research. 
This helps both users and organizations evaluate whether their antivirus software provides 
the expected level of security.
In the next chapter, you will learn about the fundamentals and the usage of various tools 
that will help in conducting antivirus research lead gathering that will eventually influence 
the next levels of antivirus bypass research.
2
Before Research 
Begins
To get started researching antivirus software, we first have to take several preliminary 
steps to ensure that our research will be at the highest possible level and take the least 
possible time.
Unlike "regular" research, which security researchers and reverse engineers conduct 
on files, antivirus research is different in its ultimate goal. We must understand that 
antivirus software is in fact a number of files and components joined together, and most 
of these files and components are operated through a central process, which is usually the 
antivirus's GUI-based process.
In this chapter, you will understand how antivirus works in the Windows environment. 
Furthermore, you will learn how to gather antivirus research leads by using basic dynamic 
malware analysis tools to perform antivirus research.
In this chapter, we will explore the following topics:
• Getting started with the research
• The work environment and lead gathering 
• Defining a lead
• Working with Process Explorer
16     Before Research Begins
• Working with Process Monitor
• Working with Autoruns
• Working with Regshot
Technical requirements
Previous experience with malware analysis tools is required. 
Getting started with the research
The number of files and components that make up antivirus software can reach the 
hundreds, with each file being proficient in a different antivirus model. For example, a 
particular process is responsible for monitoring files within the operating system, while 
another is responsible for static file scanning, another process can run the antivirus 
service on the operating system, and so on.
Choosing the right files and components for investigative purposes is critical, as all 
research takes time. We do not want to waste our time researching a file or component 
that is irrelevant for bypassing antivirus software.
That is why, before we conduct the research itself, we have to gather research leads and 
assign them a particular priority. For example, consider how much time and resources to 
invest in each lead.
Additionally, it is important to understand that most antivirus software has a self-
protection mechanism. Its goal is to make it difficult for malware to turn off the antivirus 
or make changes without end user authorization. Even though some antivirus software 
may use self-protection, it will still be possible to bypass these self-protection techniques.
The work environment and lead gathering
Before we start conducting antivirus research, we have to first understand some of the 
more fundamental aspects of how our operating system functions.
Here are the three main concepts that are important to us while gathering leads.
The work environment and lead gathering     17
Process 
A process is an object of a file that is loaded from the hard disk to the system's memory 
when executed. For example, mspaint.exe is the process name for the Windows Paint 
application:
Figure 2.1 – Process Explorer in Windows 10
Figure 2.1 shows processes running on Windows 10, using the Process Explorer tool.
18     Before Research Begins
Thread
A thread is a unit that is assigned by the operating system in order for the CPU to execute 
the code (CPU instructions) in a process. In a process, you can have multiple threads but 
it is mandatory to have at least one main thread:
Figure 2.2 – Running threads under a process in Windows 10
Registry 
The registry is the Windows operating system database that contains information 
required to boot and configure the system. The registry also contains base configurations 
for other Windows programs and applications:
The work environment and lead gathering     19
Figure 2.3 – Illustration of the registry
In addition, it will be helpful before we begin to clarify what a lead is and why it is 
necessary to gather leads.
To research antivirus software, we used virtualization software called VMware Fusion in 
the Macintosh line of products. If you are using a Windows-based machine, you can use 
VMware Workstation to install a Windows 10 virtual operating system. After installing 
the operating system, we install VMware Tools and the AVG Antivirus software for lead 
gathering. At that point, it is important to perform a snapshot so that later on, we can go 
back and start fresh each time, without worrying that something will get in the way of our 
lead gathering.
20     Before Research Begins
Defining a lead
The antivirus research lead is a file that we know the purpose of in the overall operation 
of the antivirus software and that we have found suitable to add to our research. Lead files 
are the most relevant files in antivirus research.
We can compare lead gathering to the first stage of a penetration test, known as 
reconnaissance. When we are performing reconnaissance on a target, that information is a 
type of lead, and we can use it to advance toward accomplishing our goal.
To gather leads, we must discover how the antivirus software works on the operating 
system and what its flow is.
As we wrote earlier, the work environment we used to conduct these examples of lead 
gathering is Windows 10 with AVG 2020 installed. In order to gather leads, we used a 
range of dynamic malware analysis tools in this chapter, such as the Sysinternals suite 
(https://docs.microsoft.com/en-us/sysinternals/downloads/
sysinternals-suite) and Regshot (https://sourceforge.net/projects/
regshot/).
Working with Process Explorer
Once we understand what processes are in the operating system, we will want to see them 
on our endpoint, in order to gather antivirus research leads.
To see a list of processes running on the operating system, we will use the Process 
Explorer tool (https://docs.microsoft.com/en-us/sysinternals/
downloads/process-explorer), which will provide us with a lot of relevant 
information about the processes that are running in the operating system:
Working with Process Explorer     21
Figure 2.4 – The first glimpse of Process Explorer
In Figure 2.4, you can see a list of the processes that are currently running in the Windows 
operating system, with a lot of other relevant information.
22     Before Research Begins
In order to conduct the research in the right way, it is important to understand the data 
provided by Process Explorer. From left to right, we can see the following information:
• Process – the filename of the process with its icon
• CPU – the percentage of CPU resources of the process
• Private Bytes – the amount of memory allocated to the process
• Working Set – the amount of RAM allocated to this process
• PID – the process identifier
• Description – a description of the process
• Company Name – the company name of the process:
Figure 2.5 – Process Explorer columns
Process Explorer gives the option to add more columns, to get more information about 
any process in the operating system.
You can get the information by right-clicking on one of the columns and then clicking 
Select Columns:
Figure 2.6 – The Select Columns button
After clicking the Select Columns button, a window with additional options will open, 
and you can click on the options that you want to additionally add to the main Process 
Explorer columns:
Working with Process Explorer     23
Figure 2.7 – Select Columns options
To get data about a specific process in the operating system, we can double-click on the 
process name and then we will get the following window:
Figure 2.8 – Interesting data about the process we clicked
24     Before Research Begins
Some interesting data about the process can include the following:
• Image – information about the process, including its version, build time, path, and 
more
• Performance – information regarding the performance of the process 
• Performance Graph – graph-based information regarding the performance of the 
process
• Disk and Network – the count of disk and network Input/Output (I/O)
• CPU Graph – graph-based data about the CPU usage, dedicated GPU memory, 
system GPU memory, and more
• Threads – the threads of the process
• TCP/IP – ingoing and outgoing network connections
• Security – the permissions of the process
• Environment – the environment variables 
• Job – the list of processes that are assigned to a job object
• Strings – strings that are part of the process (image-level and memory-level)
In order for the antivirus software to conduct monitoring on every process that exists 
within the operating system, it usually executes a hook.
This hook is usually a DLL that is injected into every process running within the operating 
system, and it contains within it some type of information that will interest us later on. In 
order to view which DLLs are involved, along with their names and paths, we can use the 
Process Explorer tool, find the process we wish to investigate, select it by clicking on it, 
then press Ctrl + D. This is the result:
Working with Process Explorer     25
Figure 2.9 – Two interesting DLL files of AVG Antivirus
We can see here (in the rectangle in Figure 2.9) that two DLLs of AVG Antivirus have 
been added to the process in the operating system. Later on, these leads can be further 
investigated.
Let's do the same thing, but this time on the System process (PID 4):
Figure 2.10 – Twelve interesting sys files of AVG Antivirus
Here, we can see that 12 AVG sys files have been loaded to the System process.
26     Before Research Begins
Including the two DLLs we saw in the previous screenshot, we now have 14 files we can 
investigate later on, and these are our 14 leads for future research.
Tip
You can use Process Explorer's Description column to shorten your research 
time and it can help you understand what a file is supposed to do.
Working with Process Monitor
Now that we have seen how to gather leads using Process Explorer as well as which 
antivirus processes are running and monitoring the actions of the operating system 
without any user involvement, we can continue gathering research leads. This time, we 
will find the process the antivirus software uses to conduct file scans. We'll locate this lead 
through operating system monitoring using the Process Monitor tool.
Processor Monitor (https://docs.microsoft.com/en-us/sysinternals/
downloads/procmon) is a tool that can be used to observe the behavior of each process 
in the operating system. For example, if we run the notepad.exe process, writing 
content into it, and then save the content into a file, Process Monitor will be able to see 
everything that happened from the moment we executed the process, until the moment 
we closed it, like in the following example:
Working with Process Monitor     27
Figure 2.11 – Actions of notepad.exe shown in Process Monitor
28     Before Research Begins
You can double-click on any of the events to get more data about a specific event. The 
following screenshot is the Event Properties window after we double-clicked it:
Figure 2.12 – Event Properties window in Process Monitor
There are three tabs that can help us to know more about the event:
• Event – information about the event, such as the date of the event, the result of the 
operation that created the event, the path of the executable, and more 
• Process – information about the process in the event
• Stack – the stack of the process
Before we run a scan on a test file, we first need to run Process Monitor (procmon.exe).
After starting up Process Monitor, we can see that there are many processes executing 
many actions on the operating system, so we need to use filtering.
The filter button is on the main toolbar:
Figure 2.13 – The filter button
Working with Process Monitor     29
We will need to use filtering by company because the company name is the one absolutely 
certain thing we know about the process that's about to be executed. We don't know the 
name of the process that's going to be executed on the disk, and we don't know what its 
process ID will be, but we know the company name we are looking for will be AVG. To the 
company name, we can add the contains condition:
Figure 2.14 – Filter by company name example
Then, with the Process Monitor tool running in the background, let's take the test file we 
want to scan, right-click on it, and select Scan selected items for viruses:
Figure 2.15 – The Scan selected items for viruses button
30     Before Research Begins
After selecting Scan selected items for viruses, we will return to Process Monitor and 
observe that two processes are involved in the scan – one called AVGUI.exe and one 
called AVGSvc.exe:
Figure 2.16 – The results of the filter we used
From this, we can now conclude that the AVGSvc.exe process, which is the AVG service, 
is also involved in scanning the file for viruses. After that, the process called AVGUI.exe, 
which is AVG's GUI process, begins executing. So based on this, we can add these two 
processes to our research leads list.
After the file scanning, it is possible to see the execution flow in a tree view of the antivirus 
processes that were involved in the file scanning, by pressing Ctrl + T:
Working with Process Monitor     31
Figure 2.17 – The Process Tree window of Process Monitor
The Process Tree view can give us a lot of information about the flow of executed 
processes in the system that can indicate to us which parent processes create which child 
processes. This can help us understand the components of the antivirus software.
Tip
To show only EXE files in Process Monitor, you can filter by Path and choose 