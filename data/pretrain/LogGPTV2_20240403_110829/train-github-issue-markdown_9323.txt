Subject: Potential Issue with `scipy.stats.wilcoxon` Signed Rank Test for Identical Series

Hello,

I would like to report a potential issue with the `scipy.stats.wilcoxon` signed rank test, specifically when the two input series are identical. This issue was also mentioned in a Stack Overflow post (http://stackoverflow.com/questions/38454893/error-in-scipy-wilcoxon-signed-rank-test-for-equal-series?noredirect=1#comment64315624_38454893), but it has not been resolved or disproven.

Here is the code and the observed behavior:

```python
import scipy as sp

x1 = [29.39958, 29.21756, 29.350915, 29.34911, 29.212635]

# Using zero_method="wilcox" and correction=True
result_wilcox = sp.stats.wilcoxon(x1, x1, zero_method="wilcox", correction=True)
print(result_wilcox)  # Output: WilcoxonResult(statistic=0.0, pvalue=nan)

# Using zero_method="pratt"
result_pratt = sp.stats.wilcoxon(x1, x1, zero_method="pratt")
print(result_pratt)  # Output: WilcoxonResult(statistic=0.0, pvalue=0.043114446783075355)
```

### Issue Description:
- When using `zero_method="wilcox"` and `correction=True`, the p-value is `nan`, which is expected because the test cannot be performed on identical series.
- However, when using `zero_method="pratt"`, the p-value is `0.043114446783075355`, which is not consistent with the expected behavior. The p-value should not be valid for identical series.

### Expected Behavior:
- For identical series, the p-value should be undefined (`nan`) or at least indicate that the test is not applicable.
- The `pratt` method is supposed to be more conservative, but it is providing a lower p-value, which is counterintuitive.

### Conclusion:
- There appears to be an inconsistency in the implementation of the `pratt` zero method. It should not return a valid p-value for identical series, and it should not provide better (lower) p-values compared to the `wilcox` method.

I hope this helps in identifying and addressing the issue. Thank you for your attention.

Best regards,
[Your Name]