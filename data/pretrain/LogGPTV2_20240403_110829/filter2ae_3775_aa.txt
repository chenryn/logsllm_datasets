原文：
在上一篇中，我们为读者详细介绍了基于类型混淆漏洞的沙箱逃逸技术。在本文中，我们将继续介绍整型溢出漏洞方面的知识。
**\----[ 3.2 - 整数溢出漏洞**
* * *
**\------[ 3.2.1 - 背景知识**
* * *
当算术运算的结果太大从而导致变量的位数不够用时，就会发生整数溢出。在Java中，整数是使用32位表示的带符号数。正整数的取值范围从0x00000000（0）到0x7FFFFFFF（2
^ 31-1）。负整数的取值范围为从0x80000000（-2 ^ 31）到0xFFFFFFFF（-1）。如果值0x7FFFFFFF（2 ^
31-1）继续递增的话，则结果就不是2 ^ 31，而是（-2 ^ 31）了。那么，我们如何才能利用这个漏洞来禁用安全管理器呢？
在下一节中，我们将分析CVE-2015-4843[20]的整数溢出漏洞。很多时候，整数会用作数组中的索引。利用溢出漏洞，我们可以读取/写入数组之外的值。这些读/写原语可以用于实现类型混淆攻击。在上面的CVE-2017-3272的介绍中说过，安全分析人员可以通过这种攻击来禁用安全管理器。
**\------[ 3.2.2 - 示例： CVE-2015-4843**
* * *
Redhat公司的Bugzilla[19]对这个漏洞的进行了简短的介绍：在java.nio包中的Buffers类中发现了多个整数溢出漏洞，并且相关漏洞可用于执行任意代码。
漏洞补丁实际上修复的是文件java/nio/Direct-X-Buffer.java.template，它用于生成DirectXBufferY.java形式的类，其中X可以是“Byte”、“Char”、“Double”、“Int”、“Long”、“Float”或“Short”，Y可以是“S”、“U”、“RS”或“RU”。其中，“S”表示该数组存放的是带符号数，“U”表示无符号数，“RS”表示只读模式下的有符号数，而“RU”表示只读模式下的无符号数。每个生成的类_C_都会封装一个可以通过类_C_的方法进行操作的特定类型的数组。例如，DirectIntBufferS.java封装了一个32位有符号整型数组，并将方法get()和set()分别定义为将数组中的元素复制到DirectIntBufferS类的内部数组，或者将内部数组中的元素复制到该类外部的数组中。以下代码摘自该漏洞的补丁程序：
    14:      public $Type$Buffer put($type$[] src, int offset, int length) {
     15:  #if[rw]
     16: -        if ((length  Bits.JNI_COPY_FROM_ARRAY_THRESHOLD) {
     17: +        if (((long)length  Bits.JNI_COPY_FROM_ARRAY_THRESHOLD) {
     18:              checkBounds(offset, length, src.length);
     19:              int pos = position();
     20:              int lim = limit();
     21: @@ -364,12 +364,16 @@
     22:
     23:  #if[!byte]
     24:              if (order() != ByteOrder.nativeOrder())
     25: -                Bits.copyFrom$Memtype$Array(src,
                            offset  Bits.JNI_COPY_FROM_ARRAY_THRESHOLD) {
     357:             checkBounds(offset, length, src.length);
     358:             int pos = position();
     359:             int lim = limit();
     360:             assert (pos  rem)
     363:                 throw new BufferOverflowException();
     364:
     365:
     366:             if (order() != ByteOrder.nativeOrder())
     367:                 Bits.copyFromIntArray(src,
     368:                                             (long)offset  0) {
     187:         /* do not change this code, see WARNING above */
     188:         if (length > MBYTE)
     189:             size = MBYTE;
     190:         else
     191:             size = (size_t)length;
     192:
     193:         GETCRITICAL(bytes, env, dst);
     194:
     195:         dstInt = (jint *)(bytes + dstPos);
     196:         endInt = srcInt + (size / sizeof(jint));
     197:         while (srcInt < endInt) {