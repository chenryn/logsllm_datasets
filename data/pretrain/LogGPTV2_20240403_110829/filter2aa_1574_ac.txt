print seq
# [182, 268, 419, 63, 150, 0, 66, 148, 707, 60, 242, 651, 137, 426, 
524, 326, 221, 46, 199, 205, 265, 152, 71, 289, 141, 86, 140, 293, 191, 
335, 143, 69, 5, 93, 386, 158, 339, 85, 79, 459, 57, 115, 476, 290, 
345, 48, 255, 104, 184, 365, 206, 105, 193, 569, 114, 130, 2, 41, 1, 
97, 160, 321, 166, 487, 394, 378, 250, 75, 65, 29, 495, 218, 234, 222, 
371, 211, 226, 238, 412, 153, 131, 480, 286, 172, 313, 161, 506, 146, 
72, 508, 348, 21, 94, 111, 54, 154, 44, 187, 424, 526, 322, 42, 119, 
179, 254, 332, 95, 717, 270, 312, 766, 246, 177, 127, 194, 304, 269, 8, 
662, 236, 98, 483, 197, 560, 275, 78, 641, 91, 209, 198, 232, 273, 264, 
469, 39, 635, 165, 23, 219, 112, 278, 231, 180, 204, 576, 181, 251, 
553, 58, 223, 157, 50, 19, 455, 163, 20, 436, 358, 122, 538, 425, 121, 
225, 77, 515, 192, 239, 125, 217, 727, 604, 32, 445, 489, 383, 607, 
134, 587, 240, 113, 350, 120, 514, 92, 259, 494, 90, 73, 287, 196, 6, 
162, 214, 593, 229, 186, 581, 448, 64, 49, 758, 679, 388, 56, 87, 497, 
208, 51, 243, 203, 637, 30, 530, 318, 109, 409, 586, 82, 381, 156, 407, 
116, 256, 99, 341, 81, 279, 647, 53, 353, 285, 228, 404, 294, 4, 725, 
210, 7, 207, 174, 315, 359, 62, 375, 701, 570, 376, 620, 720, 439, 274, 
16, 133, 709, 124, 328, 68, 460, 592, 202, 681, 492, 551, 28, 363, 144, 
754, 443, 155, 138, 645, 401, 135, 430, 74, 190, 718, 428, 518, 333, 
584, 619, 319, 342, 531, 216, 35, 474, 136, 308, 302, 393, 525, 168, 
33, 644, 132, 314, 457, 316, 646, 668, 677, 622, 249, 400, 454, 397, 
299, 519, 557, 338, 356, 656, 624, 280, 310, 472, 694, 384, 444, 385, 
370, 347, 596, 170, 611, 565, 580, 352, 666, 364, 390, 213, 715, 129, 
Xor the ï¬‚ag_enc picture with encrypted black picture and recover the column 
permutation
479, 237, 632, 15, 344, 488, 108, 368, 733, 12, 325, 736, 31, 510, 164, 
17, 317, 84, 411, 639, 173, 449, 167, 282, 247, 298, 410, 520, 738, 
145, 271, 536, 176, 765, 467, 11, 473, 175, 434, 18, 101, 672, 669, 
432, 756, 625, 142, 408, 391, 22, 169, 403, 324, 767, 43, 559, 549, 
648, 337, 389, 284, 416, 461, 688, 263, 367, 433, 429, 171, 361, 599, 
653, 603, 523, 83, 334, 67, 126, 351, 693, 212, 452, 517, 59, 490, 195, 
667, 442, 421, 450, 288, 739, 547, 695, 753, 747, 253, 712, 566, 710, 
27, 735, 621, 14, 499, 548, 742, 123, 628, 178, 697, 630, 503, 615, 
283, 692, 512, 464, 252, 374, 606, 542, 613, 414, 627, 682, 636, 446, 
305, 657, 541, 45, 696, 349, 379, 55, 543, 88, 600, 147, 478, 501, 70, 
550, 36, 516, 235, 360, 686, 545, 380, 96, 698, 685, 323, 590, 13, 728, 
605, 532, 535, 362, 760, 670, 743, 451, 612, 40, 638, 233, 555, 417, 
47, 732, 544, 100, 118, 504, 37, 748, 493, 498, 537, 678, 117, 556, 
309, 564, 272, 423, 76, 633, 295, 262, 552, 614, 89, 623, 594, 705, 
749, 343, 482, 500, 458, 496, 574, 306, 652, 643, 561, 562, 431, 24, 
704, 300, 10, 654, 329, 618, 573, 261, 276, 582, 128, 396, 151, 244, 
260, 468, 139, 759, 185, 277, 680, 38, 591, 102, 721, 484, 9, 597, 331, 
107, 406, 585, 649, 664, 392, 568, 266, 330, 751, 398, 690, 528, 676, 
307, 427, 658, 511, 220, 437, 26, 546, 481, 671, 183, 418, 722, 241, 
373, 706, 327, 567, 640, 405, 724, 757, 572, 292, 301, 673, 642, 589, 
189, 674, 420, 34, 149, 631, 583, 730, 665, 447, 617, 529, 726, 110, 
106, 563, 513, 626, 741, 505, 311, 683, 440, 740, 471, 723, 755, 745, 
522, 744, 661, 533, 357, 702, 369, 372, 689, 558, 291, 413, 3, 456, 
399, 354, 675, 80, 281, 521, 61, 366, 711, 224, 227, 737, 466, 588, 52, 
509, 734, 355, 659, 571, 713, 248, 103, 507, 691, 539, 540, 382, 750, 
595, 731, 267, 502, 25, 346, 422, 716, 415, 188, 320, 763, 577, 575, 
201, 453, 699, 610, 703, 491, 655, 230, 660, 719, 700, 762, 486, 746, 
752, 527, 475, 684, 650, 629, 377, 303, 578, 714, 441, 534, 601, 634, 
159, 729, 387, 470, 215, 609, 761, 340, 462, 200, 616, 463, 708, 554, 
602, 297, 435, 245, 438, 296, 598, 608, 465, 402, 764, 395, 663, 258, 
336, 477, 687, 485, 579, 257]
from PIL import Image
a = Image.open('tql.png')
c = Image.open('flag_enc.png')
buf = c.load()
buff = a.load()
b = Image.new("RGB", (768, 768))
seq = [182, 268, 419, 63, 150, 0, 66, 148, 707, 60, 242, 651, 137, 426, 
524, 326, 221, 46, 199, 205, 265, 152, 71, 289, 141, 86, 140, 293, 191, 
335, 143, 69, 5, 93, 386, 158, 339, 85, 79, 459, 57, 115, 476, 290, 
345, 48, 255, 104, 184, 365, 206, 105, 193, 569, 114, 130, 2, 41, 1, 
97, 160, 321, 166, 487, 394, 378, 250, 75, 65, 29, 495, 218, 234, 222, 
371, 211, 226, 238, 412, 153, 131, 480, 286, 172, 313, 161, 506, 146, 
72, 508, 348, 21, 94, 111, 54, 154, 44, 187, 424, 526, 322, 42, 119, 
179, 254, 332, 95, 717, 270, 312, 766, 246, 177, 127, 194, 304, 269, 8, 
662, 236, 98, 483, 197, 560, 275, 78, 641, 91, 209, 198, 232, 273, 264, 
469, 39, 635, 165, 23, 219, 112, 278, 231, 180, 204, 576, 181, 251, 
553, 58, 223, 157, 50, 19, 455, 163, 20, 436, 358, 122, 538, 425, 121, 
225, 77, 515, 192, 239, 125, 217, 727, 604, 32, 445, 489, 383, 607, 
134, 587, 240, 113, 350, 120, 514, 92, 259, 494, 90, 73, 287, 196, 6, 
162, 214, 593, 229, 186, 581, 448, 64, 49, 758, 679, 388, 56, 87, 497, 
208, 51, 243, 203, 637, 30, 530, 318, 109, 409, 586, 82, 381, 156, 407, 
116, 256, 99, 341, 81, 279, 647, 53, 353, 285, 228, 404, 294, 4, 725, 
210, 7, 207, 174, 315, 359, 62, 375, 701, 570, 376, 620, 720, 439, 274, 
16, 133, 709, 124, 328, 68, 460, 592, 202, 681, 492, 551, 28, 363, 144, 
754, 443, 155, 138, 645, 401, 135, 430, 74, 190, 718, 428, 518, 333, 
584, 619, 319, 342, 531, 216, 35, 474, 136, 308, 302, 393, 525, 168, 
33, 644, 132, 314, 457, 316, 646, 668, 677, 622, 249, 400, 454, 397, 
299, 519, 557, 338, 356, 656, 624, 280, 310, 472, 694, 384, 444, 385, 
370, 347, 596, 170, 611, 565, 580, 352, 666, 364, 390, 213, 715, 129, 
479, 237, 632, 15, 344, 488, 108, 368, 733, 12, 325, 736, 31, 510, 164, 
17, 317, 84, 411, 639, 173, 449, 167, 282, 247, 298, 410, 520, 738, 
145, 271, 536, 176, 765, 467, 11, 473, 175, 434, 18, 101, 672, 669, 
432, 756, 625, 142, 408, 391, 22, 169, 403, 324, 767, 43, 559, 549, 
648, 337, 389, 284, 416, 461, 688, 263, 367, 433, 429, 171, 361, 599, 
653, 603, 523, 83, 334, 67, 126, 351, 693, 212, 452, 517, 59, 490, 195, 
667, 442, 421, 450, 288, 739, 547, 695, 753, 747, 253, 712, 566, 710, 
27, 735, 621, 14, 499, 548, 742, 123, 628, 178, 697, 630, 503, 615, 
283, 692, 512, 464, 252, 374, 606, 542, 613, 414, 627, 682, 636, 446, 
305, 657, 541, 45, 696, 349, 379, 55, 543, 88, 600, 147, 478, 501, 70, 
550, 36, 516, 235, 360, 686, 545, 380, 96, 698, 685, 323, 590, 13, 728, 
605, 532, 535, 362, 760, 670, 743, 451, 612, 40, 638, 233, 555, 417, 
47, 732, 544, 100, 118, 504, 37, 748, 493, 498, 537, 678, 117, 556, 
309, 564, 272, 423, 76, 633, 295, 262, 552, 614, 89, 623, 594, 705, 
749, 343, 482, 500, 458, 496, 574, 306, 652, 643, 561, 562, 431, 24, 
704, 300, 10, 654, 329, 618, 573, 261, 276, 582, 128, 396, 151, 244, 
260, 468, 139, 759, 185, 277, 680, 38, 591, 102, 721, 484, 9, 597, 331, 
107, 406, 585, 649, 664, 392, 568, 266, 330, 751, 398, 690, 528, 676, 
307, 427, 658, 511, 220, 437, 26, 546, 481, 671, 183, 418, 722, 241, 
373, 706, 327, 567, 640, 405, 724, 757, 572, 292, 301, 673, 642, 589, 
189, 674, 420, 34, 149, 631, 583, 730, 665, 447, 617, 529, 726, 110, 
106, 563, 513, 626, 741, 505, 311, 683, 440, 740, 471, 723, 755, 745, 
522, 744, 661, 533, 357, 702, 369, 372, 689, 558, 291, 413, 3, 456, 
399, 354, 675, 80, 281, 521, 61, 366, 711, 224, 227, 737, 466, 588, 52, 
509, 734, 355, 659, 571, 713, 248, 103, 507, 691, 539, 540, 382, 750, 
595, 731, 267, 502, 25, 346, 422, 716, 415, 188, 320, 763, 577, 575, 
201, 453, 699, 610, 703, 491, 655, 230, 660, 719, 700, 762, 486, 746, 
752, 527, 475, 684, 650, 629, 377, 303, 578, 714, 441, 534, 601, 634, 
159, 729, 387, 470, 215, 609, 761, 340, 462, 200, 616, 463, 708, 554, 
602, 297, 435, 245, 438, 296, 598, 608, 465, 402, 764, 395, 663, 258, 
336, 477, 687, 485, 579, 257]
Holy Grail War
Program is compiled with Graal VM
No library function names
High level optimization
Looks like a cipher:
Test with 11111111 and 111111111111 and 1111111111111111: 8byte block
Test with 1111111111111111 and 1111111122222222: ECB
Find the encrypting routine location by debugging:
The encryption happens in 0x4023C0
Watch the data in variables to guess the logic
Extract each round's data and solve: (To save spaces we only paste part one here)
ptr = 0
for j in xrange(768):
    col = []
    for i in xrange(768):
        pix = [x for x in buf[i, j]]
        # print pix
        for k in xrange(3):
            pix[k] ^= buff[i, j][0] 
        col.append(tuple(pix))
        # b.putpixel((i, j), tuple(pix))
        ptr = (ptr + 1) % 25
    for i in xrange(768):
        b.putpixel((seq[i], j), col[i])
b.save('flagaaa.png')
```
- Get the flag
![](https://i.imgur.com/Ybv2u28.png)
    # part0
    s = Solver()
    box = [
      2213650158,
      3662015778,
      259288452,
      1498852205,
      2300035311,
      2052912054,
      2036798173,
      1611266847,
      1784399209,
      929847251,
      3921284408,
      3196248184,
      2005232833,
      2725498862,
      3558091907,
      24343718,
      2746134120,
      45425412,
      238898078,
      514883775,
      816330571,
      2230390543,
      42087689,
      3503996843,
      3360904134,
      1989027470,
      215817026,
      3723744644,
      4225474772,
      2707256193,
      2213848054,
      3572155370
    ]
    def sbox(i):
        return box[i - 0x63c1a] & 0xffffffff
    def __ROL4__(c, r):
        return ((c I', s.model()[input1].as_long()) + 
struct.pack('>I', s.model()[input2].as_long())
An asymmetric cryptography system based on quadratic matrix equation
Binary is quite large but it's easy to recognize the code is doing matrix multiply and sum
algorithm with modulos 0xFFFFFFFB
Key generation algorithm
Generate 3 random 8*8 matrices, pubkey_1, pubkey_2 and privkey
Calculate pubkey_3 by the equation
pubkey_1 * privkey * privkey + pubkey_2 * privkey + pubkey_3 = 0
Encryption algorithm
Generate a random 8*8 matrix
Read the plaintext and expand it into a 8*8 matrix
a = random * pubkey_1
b = random * pubkey_2
c = random * pubkey_3 + plaintext
The ciphertext is (a, b, c)
Decryption algorithm
a = cipher_1 * privkey * privkey
b = cipher_2 * privkey
plaintext matrix = a + b + cipher_3
Solve
Given flag.enc  and public key
Plaintext can be recovered if we know the random matrix
pubkey_1  and pubkey_2  are not invertible but pubkey_1+pubkey_2  is invertible 
(adding two matrix together will increase the rank)
Calculate random matrix by (cipher_1 + cipher_2) * (pubkey_1 + 