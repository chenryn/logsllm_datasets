ilarity between images cannot be trivially compared, while
text contents can be extracted and compared easily as shown
below.
On a Web page, each text content exists in a special con-
text. Corresponding to the DOM tree, the text content is a
leaf node and its context is the path from the root to this
leaf node. For two Web pages, by extracting and comparing
their context-aware text contents that are essential to users,
we can effectively detect the noticeable HTML Web page
difference between the enabled and disabled cookie usages.
Figure 4 depicts the recursive algorithm to extract the text
content.
The contentExtract algorithm preorder traverses the
37th Annual IEEE/IFIP International Conference on Dependable Systems and Networks (DSN'07)0-7695-2855-4/07 $20.00  © 2007whole DOM tree in time O(n). During the preorder traver-
sal, each non-noise text node is associated with its context,
resulting in a context-content string; and then the context-
content string is added into set S. The ﬁnal return result is
set S, which includes all the context-content strings. Note
that in lines 2 to 4, only those non-noise text nodes are qual-
iﬁed for the addition to set S. Similar to [4], scripts, styles,
obvious advertisement text, date and time string, and op-
tion text in dropdown list (such as country list or language
list) are regarded as noises. Text nodes that contain no al-
phanumeric characters are also treated as noises. All these
checkings guarantee that we can extract a relatively concise
context-content string set from the DOM tree.
Assume S1 and S2 are two context-content string sets
extracted from two DOM trees A and B, respectively. To
compare the difference between S1 and S2, again based on
the Jaccard similarity coefﬁcient, we deﬁne the normalized
context-content string set similarity metric in Formula 3:
N T extSim(S1, S2) =
|S1 ∩ S2| + s
|S1 ∪ S2|
(3)
Formula 3 is a variation [9] of the original Jaccard simi-
larity coefﬁcient. The extra added s on the numerator stands
for the number of those context-content strings that are not
exactly same, while having the same context preﬁx, in S1
and S2. Intuitively, between two sets S1 and S2, Formula 3
disregards the difference caused by text content replacement
occurred in the same context, it only considers the differ-
ence caused by text content appeared in each set’s unique
context. This minor modiﬁcation is especially helpful in re-
ducing the noises caused by advertisement text content and
other dynamically changing text contents.
4.3. Making Decision
As discussed above, to accurately identify useful cook-
ies, CookiePicker has to differentiate the HTML Web page
differences caused by Web page dynamics from those
caused by disabling cookies. Assume that tree A is parsed
from a Web page retrieved with cookies enabled and tree
B is parsed from the same Web page with cookies dis-
abled. CookiePicker examines these two trees by using
both algorithms presented above.
If the return results of
both NTreeSim and NTextSim are less than the two tun-
able thresholds, Thresh1 and Thresh2, respectively, Cook-
iePicker will make a decision that the difference is due to
cookie usage. Figure 5 depicts the ﬁnal decision algorithm.
5. System Evaluation
In this section, we ﬁrst brieﬂy describe the implementa-
tion of CookiePicker, then we validate its efﬁcacy through
if NTreeSim(A, B, l) ≤ Thresh1 and
NTextSim(S1, S2) ≤ Thresh2 then
return the difference is caused by cookies;
Algorithm: decision(A, B, l)
1.
2.
3.
4.
5.
6.
return the difference is caused by noises;
else
endif
Figure 5: CookiePicker Decision Algorithm.
two sets of live experiments, and ﬁnally we discuss the po-
tential evasion against CookiePicker.
5.1. Implementation
We implemented CookiePicker as a Firefox extension.
Being one of the most popular Web browsers, Firefox is
very extensible and allows programmers to add new fea-
tures or modify existing features. Our CookiePicker exten-
sion is implemented in about 200 lines of XML user inter-
face deﬁnition code, 1,600 lines of Javascript code, and 600
lines of C++ code. Javascript code is used for HTTP re-
quest/response monitoring and processing, as well as cook-
ies record management. The HTML page difference detec-
tion algorithms are implemented in C++, because Javascript
version runs very slow. C++ code is compiled into a shared
library in the form of an XPCOM (Cross-Platform Com-
ponent Object Mode) component, which is accessible to
Javascript code.
5.2. Evaluation
We installed CookiePicker on a Firefox version 1.5.0.8
Web browser and designed two sets of experiments to val-
idate the effectiveness of CookiePicker in identifying the
useful ﬁrst-party persistent cookies. The ﬁrst set of ex-
periments is to measure the overall effectiveness of Cook-
iePicker and its running time in a generic environment;
while the second set of experiments focuses on the Web
sites whose persistent cookies are useful only, and exam-
ines the identiﬁcation accuracy of CookiePicker upon use-
ful persistent cookies. For all the experiments, the regu-
lar browsing window enables the use of persistent cookies,
while the hidden request disables the use of persistent cook-
ies by ﬁltering them out from HTTP request header. The
two thresholds used in CookiePicker Decision algorithm are
all set to 0.85, i.e., Thresh1=Thresh2=0.85. The parameter
l for NTreeSim algorithm is set to 5, i.e, the top ﬁve level
of DOM tree starting from the body HTML node will be
compared by NTreeSim algorithm.
37th Annual IEEE/IFIP International Conference on Dependable Systems and Networks (DSN'07)0-7695-2855-4/07 $20.00  © 20075.2.1. First Set of Experiments
Web Site
From each of the 15 categories we measured [24] in direc-
tory.google.com, we randomly choose two Web sites that
use persistent cookies. Thus, in total there are 30 Web sites
in the ﬁrst set of experiments. As listed in the ﬁrst column
of Table 1, these 30 Web sites are represented as S1 to S30
for privacy concerns.
Inside each Web site, we ﬁrst visit over 25 Web pages
to stabilize its persistent cookies and the “useful” values of
the persistence cookies, i.e, no more persistent cookies of
the Web site are marked as “useful” by CookiePicker af-
terwards. Then, we count the number of persistent cookies
set by the Web site and the number of persistent cookies
marked as useful by CookiePicker. These two numbers are
shown in the second and third columns of Table 1, respec-
tively. Among the total 30 Web sites, the persistent cook-
ies from ﬁve Web sites (S1,S6,S10,S16,S27) are marked as
“useful” by CookiePicker, and the persistent cookies from
the rest of 30 Web sites are identiﬁed as “useless”. In other
words, CookiePicker indicates that we can disable the per-
sistent cookies in about 83.3% (25 out of 30) of testing
Web sites. To further validate the testing result above, we
check the uselessness of the persistent cookies for those 25
Web sites through careful manual veriﬁcation. We ﬁnd that
blocking the persistent cookies of those 25 Web sites does
not cause any problem to a user. Therefore, none of the clas-
siﬁed “useless” persistent cookies is useful, and no back-
ward error recovery is needed.
For those ﬁve Web sites that have some persistent cook-
ies marked as “useful”, we verify the real usefulness of
these cookies by blocking the use of them and then com-
paring the disabled version with a regular browsing window
over 25 Web pages in each Web site. The result is shown in
the fourth column of Table 1. We observe that three cookies
from two Web sites (S6,S16) are indeed useful. However,
for the other three Web sites (S1,S10,S27), their persistent
cookies are useless but are wrongly marked as “useful” by
CookiePicker. This is mainly due to the conservative thresh-
old setting. Currently the values of both thresholds are set to
0.85, i.e., Thresh1=Thresh2=0.85. The rationale behind the
conservative threshold setting is that we prefer to have all
useful persistent cookies be correctly identiﬁed, even at the
cost of some useless cookies being mis-classiﬁed as “use-
ful”. Thus, the number of backward error recovery is mini-
mized.
In Table 1, the ﬁfth and sixth columns show the average
running time of the detection algorithms and the entire du-
ration of CookiePicker, respectively. It is clear that the run-
ning time of the page difference detection is very short with
an average of 14.6 ms over the 30 Web sites. The average
identiﬁcation duration is 2,683.3 ms, which is reasonable
short considering the fact that the average think time of a
user is more than 10 seconds [12]. Note that Web sites S4,
Persistent Marked
Useful
2
0
0
0
0
2
0
0
0
1
0
0
0
0
0
1
0
0
0
0
0
0
0
0
0
0
1
0
0
0
7
-
2
4
5
4
4
2
1
3
1
1
2
4
1
9
2
25
4
1
3
6
3
1
4
1
3
1
1
1
2
2
103
-
Real
Useful
0
0
0
0
0
2
0
0
0
0
0
0
0
0
0
1
0
0
0
0
0
0
0
0
0
0
0
0
0
0
3
-
Detection
Time(ms)
8.3
9.3
14.8
36.1
5.4
5.7
17.0
7.4
13.2
5.7
2.7
21.7
8.0
11.9
8.5
5.8
7.5
23.1
18.0
8.9
14.4
13.1
28.8
23.6
30.7
5.03
8.7
10.7
7.7
57.6
-
14.6
CookiePicker
Duration (ms)
1,821.6
5,020.2
1,427.5
9,066.2
698.9
1,437.5
3,373.2
2,624.4
1,415.4
1,141.2
941.3
2,309.9
614.9
1,122.4
948.0
455.9
11,426.3
4,056.9
3,860.5
3,841.6
936.1
993.3
2,430.1
2,381.1
550.1