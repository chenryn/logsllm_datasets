mation leakage. We indeed ﬁrst exhibit a counterexample, to show that the use of a standard
secure pseudo-random number generator can lead to a construction that is vulnerable to side-
channel attacks. But then, we prove that with a stronger security property for the standard
pseudo-random number generator, namely leakage-resilience, the whole construction remains
secure even in the presence of leakage.
In Section 4.5, we instantiate the generator G with the pseudo-random function AES in counter
mode with the truncated product U as the secret key. Depending on the parameters, several
calls to the pseudo-random function are required. We show hereafter that when the implemen-
tation is leaking, this construction faces vulnerabilities.
As shown in [MOP07] and later in [BGS15], several calls to AES with known inputs and one sin-
gle secret key may lead to very eﬃcient side-channel attacks that can help to recover the secret
— 93 —
Chapter 6. Robustness Against Side-Channel Attacks
key. Because of the numerous executions of AES with the same key, one essentially performs a
diﬀerential power analysis (DPA) attack. Then, for the above construction, during a leak-next,
even with a safe state, the DPA can reveal the secret key of the internal AES, that is also used to
generate the new internal state from public plaintexts. This internal state, after the leak-next,
can thus be recovered, whereas it is considered as safe in the security game. A next-ror challenge
can then be easily broken.
Furthermore, even if one uses only a few executions with the same key, with a counter as input,
the adversary can predict future outputs. This vulnerability applies to AES with predictable
inputs. As determined by the security games, the adversary chooses a leakage function fnext,Π
to further collect the leakage during the product and the truncation between the internal state
S and the public seed X0. Assume that this function is fnext,Π(S, X0) =
AES(cid:16)h
X0·(cid:16)
(cid:17)im
(cid:17)(cid:16)
C0 +l n+‘
m
m(cid:17)λ
AES[X0·S]m1
(C0)||...||AES[X0·S]m1
(C0+d n
me−1)
1
1
with C0 an integer arbitrarily chosen by the attacker. With this leakage function set, the
adversary makes a set-state-call and ﬁx the counter C to C0. This counter is a part of the global
internal state. Even if this is not the random pool considered by S, this is under the control
of the adversary. As the internal state is now compromised, suﬃcient calls to D-refresh are
made to refresh S so that its entropy increases above the threshold γ∗. Then, the attacker can
ask a leak-next-query and gets back the leakage fnext,Π(S, X0) described above. Eventually, the
attacker asks a challenge next-ror-query, and either gets the real output or a random one. The
λ bits it got from the leakage are exactly the ﬁrst λ bits of the real output. The attacker has
consequently a signiﬁcant advantage in the next-ror challenge.
6.3 Recovering and Preserving Security With Leakage
In this section, we adapt the notions of recovering and preserving introduced in Section 4.2 to
capture side channel attacks. The former essentially deals with the capacity for the generator
to accumulate the entropy from the inputs in the internal state, with the refresh algorithm, and
then to recover a safe state even after being compromised. The latter deals with the quality of
the internal state, even with adversarially chosen and known inputs. The quality of the internal
state will then be measured by the ability of the adversary to distinguish the output randomness
(by the next algorithm) from a truly random output, using one next-ror query. Since more oracles
are available, contrarily to Section 4.2, our security games will be interactive and adaptive: the
leak-refresh and leak-next oracles are available during the recovering and preserving sequences,
and not just the D-refresh oracle.
Recovering Security with Leakage. It considers an adversary that compromises the state
to some arbitrary value S0, either by asking for the state (get-state), setting it (set-state) or
learning information with the collected leakage or with the output (leak-refresh, leak-next or
next-ror) when the internal state is unsafe. Afterwards, suﬃcient calls to D-refresh are made to
increase the entropy estimate c above the threshold γ∗. This is the recovering process, which
should make the bit b involved in the next-ror procedure indistinguishable: when the internal
state is considered as safe, the output randomness R should look indistinguishable from random.
The security game is the following, where D is the distribution sampler, and f = (frefresh, fnext)
denotes the union of the leakage functions related to the execution of refresh and next, both
proposed by the adversary.
— 94 —
6.3. Recovering and Preserving Security With Leakage
Even if leak-refresh and leak-next-queries are possible, they are not allowed with compromised
states, since it would make c drop to 0.
In the recovery process, the entropy should almost
always increase, but never drop to 0.
proc. initialize(D)
seed $← setup;
σ0 ← 0;
S
FOR k = 1 TO qr DO
$← {0, 1}n b
(σk, Ik, γk, zk) ← D(σk−1)
$← {0, 1};
END FOR
k ← 0;
OUTPUT seed, (γk, zk)k=1,...,qr
proc. ﬁnalize(b∗)
IF b = b∗ RETURN 1
ELSE RETURN 0
proc. getinput
k ← k + 1
OUTPUT Ik
proc. set-state(S∗)
S ← S∗
c ← 0
proc. D-refresh
k ← k + 1;
S = refresh(S, Ik);
c = min(c + γk, n)
proc. leak-refresh
k ← k + 1;
L = frefresh(S, Ik, seed);
S = refresh(S, Ik);
c = max(0, c − λ);
IF c < γ∗,
c = 0
RETURN L
proc. next-ror
(S(0), R(0)) ← next(S)
(S(1), R(1)) $← {0, 1}n+‘
RETURN (S(b), R(b)),
(Ik+1, . . . , Iqr)
proc. leak-next
L = fnext(S, seed);
(S, R) = next(S);
IF c < γ∗,
c = 0
ELSE c = α
RETURN (L, R)
Figure 6.3 – Procedures in Security Game LRECOV(qr, qn, λ, γ∗)
1. The challenger generates a seed seed $← setup and a bit b
$← {0, 1} uniformly at random. It
sets σ0 = 0 and for k = 1, . . . , qr, it computes (σk, Ik, γk, zk) ← D(σk−1), initializes k = 0
and sets c = 0 It then gives back the seed and the values γ1, . . . , γqr and z1, . . . , zqr to the
adversary.
2. The adversary gets access to an oracle getinput which on each invocation increments k :=
k + 1 and outputs Ik.
3. At some point the adversary A outputs a new internal state S0 ∈ {0, 1}n and an integer
d such that k + d ≤ qr and γk+1 + ··· + γk+d ≥ γ∗ and makes d calls to one-refresh
with the d inputs Ik+1,··· , Ik+d: for j = 1, . . . , d, the challenger updates the state Sj :=
refresh(Sj−1, Ik+j) and updates c ← c + γk sequentially.
4. The challenger allows queries to the oracles leak-refresh, and leak-next. These queries are
processed, respectively, as {Lj = frefresh(Sj−1, Ik, seed); Sj = refresh(Sj−1, Ik); c = c −
λ; if c < γ∗, then c = 0}, and {Lj = fnext(Sj−1, seed); (Sj, Rj) = next(Sj−1); if c <
γ∗, then c = 0, else c = α}, with the new input Ik provided by the distribution sampler
for the kth refresh-query. These queries are answered, respectively, by the information
leakage L, and by the information leakage L together with the randomness R;
5. Eventually, under the restriction that c never dropped to 0, the challenger sets (S(0), R(0)) ←
next(S) and generates (S(1), R(1)) $← {0, 1}n+‘. It then gives (S(b), R(b)) to the adversary,
together with the next inputs Ik+1, . . . , Iqr (if k was the number of refresh-queries asked
up to this point);
6. The adversary A outputs a bit b∗.
In this game, we deﬁne the advantage of the adversary A as |2 Pr[b∗ = b] − 1|. Note that
we restrict our game to executions where c never dropped to 0, but one could have answered
independently to b otherwise (e.g., always using (S(0), R(0))).
— 95 —
Chapter 6. Robustness Against Side-Channel Attacks
Deﬁnition 38 (Recovering Security with Leakage). A pseudo-random number generator with
input is said (t, qr, qn, γ∗, λ, ε)-recovering with leakage if for any adversary A running within
time t, its advantage in the above game with parameters qr (number of D-refresh and leak-refresh-
queries), qn (number of leak-next-queries), γ∗, and λ is at most ε.
Preserving Security with Leakage. This security notion considers a safe internal state. After
several calls to D-refresh and leak-refresh with known (and even chosen) inputs, the internal state
should remain safe. An initial state S0 is generated with entropy n. Then it is refreshed with
arbitrary many calls to either D-refresh or leak-refresh, as long as the leakage does not decrease
the entropy below the threshold γ∗. This is the preserving process, which should make the bit
b involved in the next-ror procedure indistinguishable: since the internal state is considered as
safe, the output randomness R should look indistinguishable from random. The security game
proc. D-refresh(I)
S = refresh(S, I)
proc. initialize(D)
seed $← setup;
$← {0, 1}n;
S
$← {0, 1};
b
OUTPUT seed
proc. ﬁnalize(b∗)
IF b = b∗ RETURN 1
ELSE RETURN 0
proc. leak-refresh(I)
L = frefresh(S, I, seed);
S = refresh(S, I);
c = max(0, c − λ);
IF c < γ∗,
c = 0
RETURN L
proc. next-ror
(S(0), R(0)) ← next(S)
(S(1), R(1)) $← {0, 1}n+‘
RETURN (S(b), R(b))
proc. leak-next
L = fnext(S, seed);
(S, R) = next(S);
IF c < γ∗,
c = 0
ELSE c = α
RETURN (L, R)
Figure 6.4 – Procedures in Security Game LPRES(qr, qn, γ∗, λ)
is the following, where D is the distribution sampler, and f = (frefresh, fnext) denotes the union of
the leakage functions during the execution of refresh and next, both proposed by the adversary.
$← {0, 1}n, a seed seed ← setup, and a bit
It sets c = n and then gives back the seed to the
1. The challenger generates an initial state S0
$← {0, 1} uniformly at random.
b
adversary;
2. The adversary A gets seed and can ask as many queries as it wants to the oracles D-refresh,
leak-refresh, and leak-next, but with chosen inputs I to the refresh-queries. These queries are
thus processed, respectively, as {Sj = refresh(Sj−1, I)}, {Lj = frefresh(Sj−1, I, seed); Sj =
refresh(Sj−1, I); c = c − λ; if c < γ∗, then c = 0}, and {Lj = fnext(Sj−1, seed); (Sj, Rj) =
next(Sj−1); if c < γ∗, then c = 0, else c = α}, with the input I provided by the adversary.
Theses queries are answered, respectively, by nothing, by the information leakage Lj, and
by the information leakage Lj together with the randomness Rj;
3. Eventually, under the restriction that c never dropped to 0, the challenger sets (S(0), R(0)) ←
next(S), and generates (S(1), R(1)) $← {0, 1}n+‘. It then gives (S(b), R(b)) to the adversary;
4. The adversary A outputs a bit b∗.
As above, we deﬁne the advantage of the adversary A as |2 Pr[b∗ = b] − 1|, and the restriction
that c never dropped to 0 could have been dealt another way.
— 96 —
6.3. Recovering and Preserving Security With Leakage
Deﬁnition 39 (Preserving Security with Leakage). A pseudo-random number generator with
input is said (t, qr, qn, γ∗, λ, ε)-preserving with leakage if for any adversary A running within
time t, its advantage in the above game with parameters qr (number of D-refresh and leak-refresh-
queries), qn (number of leak-next-queries), γ∗, and λ is at most ε.
From these two security notions, one can prove the following theorem, inspired from the analysis
presented in Section 4.2.
Theorem 15. If a pseudo-random number generator with input is (t, qr, qn, γ∗, λ, εr)-recovering
with leakage and (t, qr, qn, γ∗, λ, εp)-preserving with leakage then it is also (t0, qr, qn, qs, γ∗, λ, qn ·
(εr + q · εp))-leakage-resilient robust where t0 ≈ t, where the adversary can ask at most q =
qr + qn + qs queries, where qr is the number of calls to D-refresh/leak-refresh, qn the number of
calls to next-ror/leak-next, and qs the number of calls to get-state/set-state.
Proof. This proof follows the one presented in Section 4.2. It splits the leakage-resilient robust-
ness game in preserving with leakage steps and recovering with leakage steps.
In the game of leakage-resilient robustness, we term next-queries the calls to the
Queries.
oracle next-ror. Since qn is a bound on the next-ror and leak-next queries, this is also a bound on
the next-queries. Actually, there are unsafe/compromised next-queries, when the internal state
is unsafe and so the entropy estimate c is below the threshold γ∗ before the query and reset to
0 after the query, and safe/uncompromised next-queries, when the internal state is safe before
the next-ror-query.
For uncompromised next-queries, the output randomness R should look indistinguishable from
truly random, while for compromised next-queries, there is no guarantee. As in Section 4.2,
we split the uncompromised next-queries in two sets: the preserving with leakage queries, if the
entropy estimate is above the threshold γ∗ since the previous next-query; and the recovering
with leakage queries, if the entropy estimate dropped below the threshold γ∗ and has thus been
reset to 0. For the latter queries, we reuse the notion of mRED (most recent entropy drain) to
deﬁne the most recent query to one of the oracles get-state, set-state, leak-refresh or leak-next
that reset c to 0.
Sequence of Games. Let us now deﬁne the sequence of games. Let game G0 be the initial
real-or-random game. Game Gi modiﬁes the ﬁrst i uncompromised next-queries by outputting
a uniformly random R, and by setting the internal state S uniformly at random. We note that
Gqn is then independent of b, since all the safe next-ror-queries are answered randomly, while
the unsafe next-ror-queries are anyway always answered by the real value of R. Game Gi+ 1
acts
according to the nature of the (i + 1)th uncompromised next-query: If it is preserving, then it
acts as Gi+1, if it is recovering, it acts as Gi. Then, one can show that
2
• If the generator is (t, qr, qn, γ∗, λ, εp)-preserving with leakage, then | Pr[Gi = 1]−Pr[Gi+ 1
=
1]| ≤ εp. This applies thanks to our security games that make c evolve the same way if
the entropy of the input is assumed to be zero, when c is above γ∗;
2
• If the generator is (t, qr, qn, γ∗, λ, εr)-recovering with leakage, then | Pr[Gi+ 1
= 1]−Pr[Gi+1 =
1]| ≤ (qri+qni+qsi)·εr, where qri, qni, and qsi are numbers of refresh, next and state queries
between the ith uncompromised next-queries and the (i + 1)th uncompromised next-query.
Again, this applies since c drops to zero as soon as it decreases below γ∗,and so this cannot
happen in a recovering phase.
2
Let us prove these two results. We ﬁrst consider the distance between the games Gi and
Gi+ 1
. We assume that we are in a preserving with leakage case, otherwise the two games Gi and