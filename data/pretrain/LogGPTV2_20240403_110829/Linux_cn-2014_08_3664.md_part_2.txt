### 文章概览
分享次数: 11  
浏览量: 34,650  
日期: 2014-08-22 10:16:00  
编辑推荐: 否  
摘要: 使用Linux或Unix系统的用户可能对`#!`这个符号并不陌生，但是否真正了解它的含义呢？本文将为您简要介绍Shebang（`#!`）这一符号。该符号的名称为“Shebang”或“Sha-bang”。  
来源链接: <http://smilejay.com/2012/03/linux_shebang/>  
文章ID: 3664  
是否为精选内容: 否  
大图链接: /data/attachment/album/201811/24/213153for8ck8kv98wl6kp.jpg  
永久链接: /article-3664-1.html  
图片链接: /data/attachment/album/201811/24/213153for8ck8kv98wl6kp.jpg.thumb.jpg  
相关文章:
- 排序: 0
- ID: 9188
审核者: 无  
选择器: 无  
总结: 使用Linux或Unix系统的用户可能对`#!`这个符号并不陌生，但是否真正了解它的含义呢？本文将为您简要介绍Shebang（`#!`）这一符号。该符号的名称为“Shebang”或“Sha-bang”。  
标签:
- Shebang
- 释伴  
缩略图: 否  
标题: 释伴：Linux 上的 Shebang 符号(`#!`)  
是否有标题图片: 是  
翻译者: 无  
更新时间: 2014-08-22 10:16:00

---

![](/data/attachment/album/201811/24/213153for8ck8kv98wl6kp.jpg)

使用 Linux 或 Unix 系统的用户可能都对 `#!` 这个符号并不陌生，但是你真的了解它吗？

![](/data/attachment/album/201408/22/110421y6evt7fsvd88pjxd.jpg)

本文将为你简单介绍一下 Shebang (`#!`) 这个符号。

### Shebang 的定义

Shebang（`#!`）的正式名称为 “Shebang” 或 “Sha-bang”。长期以来，shebang 没有统一的中文译名。Linux 中国翻译组成员 GOLinux 提议将其译作“释伴”，既是对解释伴随行的简称，也是 shebang 的音译。

### 词源与历史

Shebang 名字来源于 SHArp 和 bang，或 haSH bang 的缩写，代表了 `#!` 在 Unix 中的典型称呼。在 Unix 术语中，`#` 号通常被称为 sharp、hash 或 mesh；而 `!` 则常被称作 bang。另一种观点认为，shebang 名字中的 "sh" 来自于默认 shell——Bourne shell 的名称 sh，因为经常通过 shebang 调用。

在 2010 年版的 [Advanced bash scripting guide](http://tldp.org/LDP/abs/html/) (修订版 6.2) 中，shebang 被称为 "sha-bang"，并提到也可以写作 "she-bang" 或 "sh-bang"，但并未提及 "shebang" 这一形式。

丹尼斯·里奇在回答关于此特性命名的问题时说：
> 
> 发件人："Ritchie, Dennis M (Dennis) CTR"  
> 收件人：未指定  
> 日期：Thu, 19 Nov 2009 18:37:37 -0600  
> 主题：RE: What do -you- call your #! line?  
>
> 我不记得我们曾给它起过一个正式的名字。引入这一特性的时间相对较晚——我认为是从伯克利 Unix 的 UCB 会议上的某人那里得到的灵感；我可能是最早实现它的人之一，但这个想法是别人的创意。
>
> 至于名字，可能是类似“hash-bang”的描述性英国风格词汇，但我从未在任何场合使用这种昵称来称呼它。
>
> 此致,
> Dennis

### Shebang 的用途

Shebang (`#!`) 通常出现在 Unix 系统脚本的第一行，指明执行该脚本文件的解释器。

1. 如果脚本文件中没有 `#!` 行，则执行时会默认使用当前 Shell 解释脚本（即 `$SHELL` 环境变量所指向的 Shell）。
2. 若 `#!` 后跟随的是一个可执行文件，则在运行脚本时，系统会将文件名及其参数作为参数传递给该解释程序。
3. 当 `#!` 指定的解释程序没有可执行权限时，会报错 "bad interpreter: Permission denied"。如果指定的解释程序不是可执行文件，那么会被忽略，脚本将由当前 Shell 执行。
4. 如果 `#!` 指定的解释程序不存在，会报错 "bad interpreter: No such file or directory"。注意：`#!` 后的解释程序需写其绝对路径（如 `#!/bin/bash`），系统不会自动从 `$PATH` 中查找解释器。
5. 当以 `bash test.sh` 命令形式运行脚本时，`#!` 行将被忽略，脚本将由命令行中明确指定的 bash 解释执行。