# Windows平台常见反调试技术梳理（上）
##### 译文声明
本文是翻译文章，文章原作者 apriorit，文章来源：apriorit.com
原文地址：
译文仅供参考，具体内容表达以及含义原文为准。
## 0x00 前言
在软件领域，逆向工程是针对应用程序的研究过程，目的是获取应用程序未公开的工作原理及使用的具体算法。虽然软件逆向可以用于[合法场景](https://www.apriorit.com/competences/reverse-engineering)（比如恶意软件分析或者未公开文档的系统研究），但也可能被黑客用于非法活动。
Apriorit的[研究及逆向团队](https://www.apriorit.com/competences/reverse-engineering)决定与大家分享在这方面的专业经验，也会分享常用的一些简单和高级技术，大家可以使用这些技术避免自己的软件被非法逆向。当然，这些小伙伴们是最纯粹的黑客，他们可以借此机会展示自己的实力，让大家了解经验丰富的逆向工程如何绕过这些防护机制（他们也提供了几个代码示例）。
我们的小伙伴们给出了一些防护技术，包括效果一般以及效果较好的几种技术，大家可以根据自己情况决选择具体的方案。
本文适用于对反逆向技术感兴趣的所有软件开发者以及逆向工程师。为了理解本文介绍的所有示例及反调试技术，大家需要具备汇编知识、一些WinDbg经验以及使用API函数在Windows平台上开发的经验。
## 0x01 反调试方法
为了分析软件，我们可以使用多种方法：
1、数据交换过程中使用报文嗅探软件来分析网络上交换的数据；
2、反汇编软件二进制代码，获取对应的汇编语言；
3、反编译二进制数据或者字节码，以便在高级编程语言中重构源代码。
本文介绍了常用的反破解和反逆向保护技术，也就是Windows平台中的反调试方法。这里我们需要注意的是，我们不可能完全避免软件被逆向分析。各种反逆向技术的主要目标只是尽可能地提高逆向分析过程的复杂度。
想要成功防护逆向分析，最好的方法就是了解逆向分析的切入点。本文介绍了常用的反调试技术，从最简单的开始讲解，也介绍了如何绕过这些技术。我们不会关注不同的软件保护理论，只立足于具体的例子。
###  IsDebuggerPresent
也许最简单的反调试方法就是调用`IsDebuggerPresent`函数，该函数会检查用户模式调试器是否正在调试该进程。示例代码如下：
    int main()
    {
        if (IsDebuggerPresent())
        {
            std::cout = _WIN32_WINNT_WIN8; }
    BOOL IsVistaOrHigher() { return GetVersionWord() >= _WIN32_WINNT_VISTA; }
**如何绕过**
为了绕过`IsDebuggerPresent`检查机制，我们可以在检查代码执行之前，将`BeingDebugged`设置为0。我们可以使用DLL注入来完成该任务：
    mov eax, dword ptr fs:[0x30]  
    mov byte ptr ds:[eax+2], 0
对于x64进程：
    DWORD64 dwpeb = __readgsqword(0x60);
    *((PBYTE)(dwpeb + 2)) = 0;
###  TLS回调
检查main函数中是否存在调试器并不是最好的方法，并且逆向人员在分析反汇编代码时首先就会观察这个位置。在main中设置的检查机制可以通过`NOP`指令擦除，从而解除防护机制。如果使用了CRT库，main线程在将控制权交给main函数之前已经有个调用栈。因此我们也可以在TLS回调中检查是否存在调试器。可执行模块入口点调用之前会调用这个回调函数。
    #pragma section(".CRT$XLY", long, read)
    __declspec(thread) int var = 0xDEADBEEF;
    VOID NTAnopPI TlsCallback(PVOID DllHandle, DWORD Reason, VOID Reserved)
    {
        var = 0xB15BADB0; // Required for TLS Callback call
        if (IsDebuggerPresent())
        {
            MessageBoxA(NULL, "Stop debugging program!", "Error", MB_OK | MB_ICONERROR);
            TerminateProcess(GetCurrentProcess(), 0xBABEFACE);
        }
    }
    __declspec(allocate(".CRT$XLY"))PIMAGE_TLS_CALLBACK g_tlsCallback = TlsCallback;
###  NtGlobalFlag
在Windows
NT中，`NtGlobalFlag`全局变量中存放着一组标志，整个系统都可以使用这个变量。在启动时，系统会使用注册表中的值来初始化`NtGlobalFlag`全局系统变量：
    [HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\Control\Session Manager\GlobalFlag]
这个变量的值可以用于系统跟踪、调试以及控制场景。变量标志没有公开文档，但SDK中包含`gflags`工具，我们可以使用该工具来编辑一个全局标志值。PEB结构同样包含`NtGlobalFlag`字段，并且在位结构上没有与`NtGlobalFlag`全局系统变量对应。在调试过程中，`NtGlobalFlag`字段会设置如下标志：
    FLG_HEAP_ENABLE_TAIL_CHECK (0x10)
    FLG_HEAP_ENABLE_FREE_CHECK (0x20)
    FLG_HEAP_VALIDATE_PARAMETERS (0x40)
为了判断进程是否由调试器所启动，我们可以检查PEB结构中的`NtGlobalFlag`字段。在x32及x64系统中，这个字段分别相对PEB结构的偏移地址为`0x068`以及`0x0bc`。
    0:000> dt _PEB NtGlobalFlag @$peb 
    ntdll!_PEB
       +0x068 NtGlobalFlag : 0x70
对于x64进程：
    0:000> dt _PEB NtGlobalFlag @$peb
    ntdll!_PEB
       +0x0bc NtGlobalFlag : 0x70
如下代码片段演示了基于`NtGlobalFlag`字段的反调试技术：
    #define FLG_HEAP_ENABLE_TAIL_CHECK   0x10
    #define FLG_HEAP_ENABLE_FREE_CHECK   0x20
    #define FLG_HEAP_VALIDATE_PARAMETERS 0x40
    #define NT_GLOBAL_FLAG_DEBUGGED (FLG_HEAP_ENABLE_TAIL_CHECK | FLG_HEAP_ENABLE_FREE_CHECK | FLG_HEAP_VALIDATE_PARAMETERS)
    void CheckNtGlobalFlag()
    {
        PVOID pPeb = GetPEB();
        PVOID pPeb64 = GetPEB64();
        DWORD offsetNtGlobalFlag = 0;
    #ifdef _WIN64
        offsetNtGlobalFlag = 0xBC;
    #else
        offsetNtGlobalFlag = 0x68;
    #endif
        DWORD NtGlobalFlag = *(PDWORD)((PBYTE)pPeb + offsetNtGlobalFlag);
        if (NtGlobalFlag & NT_GLOBAL_FLAG_DEBUGGED)
        {
            std::cout e_lfanew);
    }
    PIMAGE_SECTION_HEADER FindRDataSection(PBYTE pImageBase)
    {
        static const std::string rdata = ".rdata";
        PIMAGE_NT_HEADERS pImageNtHeaders = GetImageNtHeaders(pImageBase);
        PIMAGE_SECTION_HEADER pImageSectionHeader = IMAGE_FIRST_SECTION(pImageNtHeaders);
        int n = 0;
        for (; n FileHeader.NumberOfSections; ++n)
        {
            if (rdata == (char*)pImageSectionHeader[n].Name)
            {
                break;
            }
        }
        return &pImageSectionHeader[n];
    }
    void CheckGlobalFlagsClearInProcess()
    {
        PBYTE pImageBase = (PBYTE)GetModuleHandle(NULL);
        PIMAGE_NT_HEADERS pImageNtHeaders = GetImageNtHeaders(pImageBase);
        PIMAGE_LOAD_CONFIG_DIRECTORY pImageLoadConfigDirectory = (PIMAGE_LOAD_CONFIG_DIRECTORY)(pImageBase
            + pImageNtHeaders->OptionalHeader.DataDirectory[IMAGE_DIRECTORY_ENTRY_LOAD_CONFIG].VirtualAddress);
        if (pImageLoadConfigDirectory->GlobalFlagsClear != 0)
        {
            std::cout PointerToRawData + pImageSectionHeader->SizeOfRawData);
            if (NULL == pMappedImageBase) __leave;
            PIMAGE_NT_HEADERS pImageNtHeaders = GetImageNtHeaders(pMappedImageBase);
            PIMAGE_LOAD_CONFIG_DIRECTORY pImageLoadConfigDirectory = (PIMAGE_LOAD_CONFIG_DIRECTORY)(pMappedImageBase 
                + (pImageSectionHeader->PointerToRawData
                    + (pImageNtHeaders->OptionalHeader.DataDirectory[IMAGE_DIRECTORY_ENTRY_LOAD_CONFIG].VirtualAddress - pImageSectionHeader->VirtualAddress)));
            if (pImageLoadConfigDirectory->GlobalFlagsClear != 0)
            {
                std::cout  dt _PEB ProcessHeap @$peb
    ntdll!_PEB
       +0x018 ProcessHeap : 0x00440000 Void
    0:000> dt _HEAP Flags ForceFlags 00440000 
    ntdll!_HEAP
       +0x040 Flags      : 0x40000062
       +0x044 ForceFlags : 0x40000060
对于x64进程：
    0:000> dt _PEB ProcessHeap @$peb
    ntdll!_PEB
       +0x030 ProcessHeap : 0x0000009d`94b60000 Void
    0:000> dt _HEAP Flags ForceFlags 0000009d`94b60000
    ntdll!_HEAP
       +0x070 Flags      : 0x40000062
       +0x074 ForceFlags : 0x40000060
如果进程正在被调试，那么`Flags`和`ForceFlags`字段都会被设置成与调试相关的值：
1、如果`Flags`字段没有设置`HEAP_GROWABLE`（`0x00000002`标志），那么该进程正在被调试；
2、如果`ForceFlags`的值不为0，那么该进程正在被调试。
需要注意的是，`_HEAP`结构并没有公开，并且不同操作系统版本中`Flags`和`ForceFlags`字段的偏移值也有所不同。如下代码演示了基于堆标志的反调试技术：
    int GetHeapFlagsOffset(bool x64)
    {
        return x64 ?
            IsVistaOrHigher() ? 0x70 : 0x14: //x64 offsets
            IsVistaOrHigher() ? 0x40 : 0x0C; //x86 offsets
    }
    int GetHeapForceFlagsOffset(bool x64)
    {
        return x64 ?
            IsVistaOrHigher() ? 0x74 : 0x18: //x64 offsets
            IsVistaOrHigher() ? 0x44 : 0x10; //x86 offsets
    }
    void CheckHeap()
    {
        PVOID pPeb = GetPEB();