ity of correct peers in each quorum, transmission of m is
guaranteed.
Unfortunately, this simple protocol is costly. If all quo-
rums have size η and the path length is (cid:96), then the mes-
sage complexity is (cid:96)η2. Typically, for a DHT of n nodes,
η = Θ(log n) and, as in Chord [47], (cid:96) = O(log n), which
gives O(log3 n) messages; this is likely too costly for prac-
tical values of n. Saia and Young [42] mitigate this prob-
lem using a randomized protocol which provably achieves
O(log2 n) messages in expectation; however, the constants
in their protocols are prohibitively large.
Recently, Young et al. [52] demonstrated that the prob-
lem can be solved using threshold cryptography [14]. Using
a distributed key generation (DKG) protocol over the Inter-
net [24] and a threshold digital signature scheme [9], they de-
sign two robust communication protocols, RCP-I and RCP-
II, that respectively require O(log2 n) messages and O(log n)
messages in expectation. Importantly, these protocols can
tolerate adversarial peers up to any number less than 1/3 of
a quorum in the asynchronous communication setting and
less than 1/2 of a quorum in the synchronous communication
setting. They also do not require any trusted party or costly
global updating of public/private keys outside of each quo-
rum. The protocols work in the elliptic curve cryptography
(ECC) based discrete logarithm setting, and its security is
based the gap Diﬃe–Hellman (GDH) assumption [11]. The
paper also includes results from microbenchmarks conducted
over PlanetLab showing that these protocols are practical for
deployment under signiﬁcant levels of churn and adversarial
behaviour. We ﬁnd this work to be the most up-to-date so-
lution for robust and spamming-resistant communication in
DHTs and use it as a starting point towards query privacy.
Privacy in communication over DHTs has also been under
consideration over the last few years [31, 29, 30, 35, 34, 50].
However, most of these PETs concentrate on sender (or re-
quester) privacy, and generally aim at a scalable anonymous
web browsing system: a future replacement for Tor [16].
Our aim in this paper is diﬀerent; we want to achieve pri-
vacy for keys in DHT queries (or query privacy). Never-
theless, we observe that our query privacy mechanism can
further enhance anonymity in almost all of the above PETs.
Our approach is also signiﬁcantly better in terms of message
complexity than redundant routing [34], where a requester
makes multiple queries to confuse an observer.
3. SYSTEM MODEL AND ASSUMPTIONS
In this section, we discuss the quorum-based DHT system
model, and the adversary and communication assumptions
that we make in our protocols. As we develop our anonymity
solution on top of robust communication protocols by Young
et al. [52], our model is nearly the same as their model.
For ease of exposition, we do not consider the link failures
and crash-recovery mechanism in that work, which in turn
follows from the underlying DKG architecture [24]. How-
ever, our protocols indeed work even under these assump-
tions without any modiﬁcation.
3.1 Adversary and Communication Assump-
tions
We work in the asynchronous communication model (un-
bounded message delays) with Byzantine faults. However,
to ensure the liveness of the protocols, we need the weak syn-
chrony communication assumption by Castro and Liskov [12],
which states that the message delay does not grow longer
indeﬁnitely. Note that this assumption arrives from the un-
derlying robust communication protocols and is unrelated
to our privacy preserving mechanism.
In a P2P system, each peer is assumed to have a unique
name or identiﬁer p and an IP address paddr. Peers p and q
can communicate directly if each has the other in its routing
table (RT ).
Similar to the majority of anonymous communication net-
works [16, 29, 30, 35], we do not assume a global adversary
that can control the whole network and break anonymity
by observing all communication by every peer. Such an ad-
versary seems impractical in large-scale geographically dis-
tributed DHT deployments. However, we assume that our
partial adversary knows the network topology and controls a
small fraction of the DHT peers. Following prior works [39,
40, 43, 52, 53], we consider around 10% of all peers to be
under adversarial control. The adversary cannot observe
communication at the majority of nodes; however, it may
try to break query privacy, spam honest nodes, or disrupt
the communication by actively attacking traﬃc that reaches
peers under its control.
We assume that the 10% adversarially controlled nodes
are spread out evenly over the DHT, and strictly less than
1/3 of the peers in any quorum are faulty which is the
best possible resiliency in the asynchronous setting. This
bound on the adversary is possible using mechanisms like
the cuckoo-rule developed by Awerbuch and Scheideler [6],
which restricts the adversary from acquiring many peers in
the same quorum. Further, all faulty peers in a quorum may
be under the control of a single adversary, and collude and
coordinate their attacks on privacy, safety and liveness.
Finally, our adversary is computationally bounded with
security parameter κ. We assume that it is infeasible for the
adversary to solve the GDH problem [11] in an appropri-
ate setting for signatures and the decisional Diﬃe–Hellman
(DDH) problem [10] in another setting for OT.
3.2 Quorums
In a variety of approaches used to maintain quorums, one
may view the setup of quorums as a graph where peers corre-
spond to quorums and edges correspond to communication
capability between quorums. This is referred to as the quo-
rum topology in the literature. Figure 1 shows how quorums
can be linked in a DHT such as Chord [47].
We assume the following four standard invariants [52] are
true for the quorum topology under consideration:
Goodness. Each quorum has size η = Ω(log n) and must
have strictly fewer than 1/3 faulty peers.
Membership. Every peer belongs to at least one quorum.
Intra-Quorum Communication. Every peer can commu-
nicate directly to all other members of its quorums.
Inter-Quorum Communication. if Qi and Qj share an
edge in the quorum topology, then p ∈ Qi may commu-
nicate directly with any member of Qj and vice versa.
To the best of our knowledge, no practical implementation
of a quorum topology yet exists. However, as indicated in
the literature [5, 6, 7, 19, 33], maintaining the above four
invariants looks plausible in real-world DHTs.
In a DHT where the above four invariants are maintained,
the general communication mechanism in Young et al. [52]
works as shown in Figure 2. Assume that a peer p wants
A peer p sequentially communicates with Q1, Q2, and so on,
until it reaches Q(cid:96) who owns the searched-for key.
Figure 2: Iterative Communication in Robust DHTs
using Quorums
to send a query m associated with a key that belongs to
quorum Q(cid:96), which it does not know. The recipients of the
request are generally a set of peers D ⊆ Q(cid:96). Peer p requests
authorization from peers in its quorum Q1. These autho-
rizations are based on a rule set [19] that deﬁnes acceptable
behavior in a quorum (e.g., the number of data lookup oper-
ations a peer may execute during a predeﬁned time period).
This rule set is known to every peer within a quorum and
is possibly the same across all quorums; it reduces the im-
pact of spamming attacks. Peer p receives Proof(Q1) in
the form of a signature if authorized. It then sends this to
quorum Q2 from its routing table, which is responsible for
the key being searched for. One or more members of Q2 ver-
ify the signature and provides p routing information and a
Proof(Q2) for Q3, which will convince Q3 that p’s actions
are legitimate (i.e., approved by its quorum). The protocol
continues until p reach Q(cid:96).
As mentioned in Section 2, it possible to achieve robust
communication without using any of the above cryptogra-
phy. However, use of cryptography provides eﬃciency and
reduce the message complexity by at least a linear factor.
Note that we do not discuss membership update operations
for quorums in this paper as they remain exactly the same
as those in previous work [52, 53].
4. CRYPTOGRAPHIC TOOLS
Here, we describe the cryptographic tools that we use in
our solution. In particular, we review distributed key gener-
ation, threshold signature and oblivious transfer protocols.
4.1 Threshold Signatures
The use of distributed key generation (DKG) and thresh-
old signatures in our privacy preserving schemes comes from
the underlying robust DHT architecture. In this architec-
ture, threshold signatures are used to authenticate the com-
munication between quorums. In an (η, t)-threshold signa-
ture scheme, a signing (private) key sk is distributed among
η peers either by a trusted dealer (using veriﬁable secret
sharing) or in a dealerless fashion (using DKG). Along with
private key shares ski for each party, the distribution algo-
rithm also generates a veriﬁcation (public) key P K and the
associated public key shares (cid:100)P K. To sign a message m, any
subset of t + 1 or more peers use their shares to generate the
signature shares σi. Any party can combine these signature
shares to form a message-signature pair S = (m, σ) = [m]sk
that can be veriﬁed using the public key P K.
In this work, we refer to a message-signature pair S as
a signature. Further, it is possible to verify the individual
signature shares σi using the public key shares (cid:100)P K. We as-
sume that no computationally bounded adversary that cor-
rupts up to t peers can forge a signature S(cid:48) = (m(cid:48), σ(cid:48)) for
a message m(cid:48). Malicious behaviour by up to t peers cannot
prevent generation of a signature.
Among three known practical threshold signature schemes
[21, 44, 9], Young et al. employed the threshold version [9] of
the Boneh-Lynn-Shacham (BLS) signature scheme [11] for
their robust DHT design. They reason that, unlike Shoup’s
construction [44], the key generation in threshold BLS signa-
ture scheme does not mandate a trusted dealer, and unlike
Gennaro et al.’s construction [21], the signing protocol in
threshold BLS signature scheme does not require any in-
teraction among peers or any zero-knowledge proofs. They
also mention eﬃciency of the BLS signature scheme in terms
of size and generation algorithm as compared to the other
options and employ it to authenticate the communication
between the quorums.
4.2 Distributed Key Generation—DKG
As a trusted party is not feasible in the P2P paradigm, the
underlying robust DHT architecture also needs a complete
distributed setup in the form of DKG to generate distributed
signing keys. An (η, t)-DKG protocol allows a set of η nodes
to construct a shared secret key sk such that its shares ski
are distributed across the nodes and no coalition of fewer
than t nodes may reconstruct the secret.
In the discrete
logarithm setting, there is also an associated public key P K
and a set of public key shares (cid:100)P K in DKG for veriﬁcation
as required for threshold signatures.
For the robust DHT architecture, Young et al. use a DKG
protocol [24] deﬁned for use over the Internet. We continue
to use threshold BLS signatures over this DKG setup in our
privacy preserving enhancement.
4.3 Oblivious Transfer—OT
The ﬁrst notion of oblivious transfers was introduced in
1981 by Rabin [37]. A 1-out-of-2 oblivious transfer (OT) [17]
allows a chooser1 p to decide between two messages held by
a server2 q. Moreover, OT protocols also guarantee that the
server learns nothing, while the chooser obtains at most one
of the messages. The concept may be generalized to 1-out-
of-ν OT, where q holds ν messages from which p may pick
only one. In this work we will use this to obtain the relevant
entry of the routing table from a quorum; the use of oblivious
transfers ensures that the query remains secret, while at the
same time spamming is prevented, since a malicious p is
guaranteed to receive only a single entry.
We utilize an OT protocol by Naor and Pinkas [32, Pro-
tocol 3.1] as it fulﬁlls all our needs; see Appendix A for an
overview. The protocol provides 1-out-of-ν string OT, as we
require. It is round optimal and requires only one message
per party (OT-request from p and OT-response from q), ex-
cept an OT-setup message that we may piggyback in the sur-
rounding protocol. Moreover, it requires no zero-knowledge
proofs, and also works in the elliptic curve cryptography
(ECC) setting. The computation complexity of the proto-
col is dominated by the number of exponentiations; both
server and chooser must on average perform two of these.
In addition to the low computational costs, the overall com-
munication amounts to roughly 3ν group elements.
The construction of Naor and Pinkas allows transfer of
group elements; i.e., strings of approximately 256 bits in the
ECC setting. This is not suﬃcient for an entire entry of
a routing table. Rather than increasing the group size or
performing multiple OTs, we simply let a peer q symmetri-
cally (AES) encrypt each entry of the routing table using a
random key. The encrypted table is then sent to peer p who
uses an OT execution to obtain the AES key for the relevant
entry from peer q.
For protocol RCPqp-I in Section 5.2, we will require a
chooser p to run an OT with multiple members of the same
quorum. We could reduce p’s computation by ensuring that
all parallel OT instances are verbatim copies here. This
would naturally require that the all servers use the same
source of randomness for OT-setup and for AES keys. This
can be achieved easily using a parameterized pseudorandom
function (PRF): φ(r,·). The private key r required for φ
can easily agreed upon as part of a DKG execution, as it
should be known to all quorum members. When the quo-
rum executes an OT instance with chooser p, it may use p’s