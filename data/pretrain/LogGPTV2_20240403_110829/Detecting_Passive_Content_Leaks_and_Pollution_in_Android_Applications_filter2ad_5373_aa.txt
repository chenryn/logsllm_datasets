title:Detecting Passive Content Leaks and Pollution in Android Applications
author:Yajin Zhou and
Xuxian Jiang
Detecting Passive Content Leaks and Pollution in Android Applications
Yajin Zhou Xuxian Jiang
Department of Computer Science
North Carolina State University
yajin PI:EMAIL PI:EMAIL
Abstract
In this paper, we systematically study two vulnerabili-
ties and their presence in existing Android applications (or
“apps”). These two vulnerabilities are rooted in an unpro-
tected Android component, i.e., content provider, inside vul-
nerable apps. Because of the lack of necessary access con-
trol enforcement, affected apps can be exploited to either
passively disclose various types of private in-app data or
inadvertently manipulate certain security-sensitive in-app
settings or conﬁgurations that may subsequently cause se-
rious system-wide side effects (e.g., blocking all incoming
phone calls or SMS messages). To assess the prevalence of
these two vulnerabilities, we analyze 62, 519 apps collected
in February 2012 from various Android markets. Our re-
sults show that among these apps, 1, 279 (2.0%) and 871
(1.4%) of them are susceptible to these two vulnerabilities,
respectively. In addition, we ﬁnd that 435 (0.7%) and 398
(0.6%) of them are accessible from ofﬁcial Google Play
and some of them are extremely popular with more than
10, 000, 000 installs. The presence of a large number of
vulnerable apps in popular Android markets as well as the
variety of private data for leaks and manipulation reﬂect
the severity of these two vulnerabilities. To address them,
we also explore and examine possible mitigation solutions.
1
Introduction
Smartphones are becoming increasingly popular. Ac-
cording to a recent report from Gartner [3], the worldwide
smartphone sales are increased by 47% in the fourth quar-
ter of 2011. From the same report, Google’s Android has
already taken over other competing mobile platforms to be-
come the market leader (by having more than 50% of smart-
phones shipped). Moreover, mobile platform vendors and
other relevant parties in the ecosystem (e.g., carriers) create
centralized marketplaces or app stores to streamline the dis-
tribution of mobile applications (or simply apps). Because
of these factors, the total number of apps available for users
to download is huge. For instance, as of September 2012,
there are around 675, 000 and 700, 000 apps available on
Google Play [4] and the Apple App Store [2], respectively.
In this paper, we present a systematic study of two vul-
nerabilities existing in a large number of Android apps.
Both of these vulnerabilities stem from a built-in Android
component, i.e., content provider, which is by default ac-
cessible by all running apps on the phone, including un-
trusted ones.1 Due to the open access, this particular com-
ponent could be potentially exploited to not only passively
disclose various types of private in-app data, but also in-
advertently manipulate certain security-sensitive in-app set-
tings or conﬁgurations that may subsequently cause serious
system-wide side effects (e.g., blocking all incoming phone
calls or SMS messages).
To elaborate, we consider the ﬁrst vulnerability a
passive content leak as it can cause affected apps to pas-
sively disclose (private) in-app data. This kind of vulner-
ability is different from previous ﬁndings about legitimate
apps (e.g., Pandora [9]) as well as in-app advertisement
libraries [26] that may actively leak private information.
Also, we ﬁnd the passive content leak vulnerability affects
a large number of mobile apps in current Android markets,
including the ofﬁcial Google Play. In fact, among 62, 519
Android apps we collected from various Android markets in
February 2012, 2.0% of them suffer from this vulnerability.
These vulnerable apps include popular mobile browsers,
widely-used instant messengers (IMs) and social network
apps, and even some popular mobile security apps.
Different from the ﬁrst one, the second vulnerability, i.e.,
content pollution, can be potentially leveraged to further
manipulate certain in-app data managed by these vulnera-
ble apps. The manipulated data can be a part of security-
sensitive settings (e.g., ﬁrewall rules or job lists) that are be-
ing enforced or executed by affected apps. As a result, they
1With the latest release of Android 4.2 in October 2012, Android apps
that target API level 17 will have the default “exported” set to “false” for
content providers, hence reducing the attack surface for apps [1]. But prob-
lems remain for earlier Android versions and still affect apps that target
API level below 17.
1
may be “inﬂuenced” to cause undesirable side effects to the
system. Example side effects include allowing or denying
certain phone calls and SMS messages from speciﬁc phone
numbers chosen by attackers. Our study shows that this vul-
nerability is also widely present in real-world apps. Among
the same set of 62, 519 apps, 1.4% of them are affected by
this vulnerability.
To systematically assess the prevalence of these vulner-
able apps, we have designed and implemented a tool called
ContentScope. Our tool ﬁrst examines a given app and
checks whether it exposes the public content provider in-
terfaces (represented as start functions). If yes, we then
locate those Android functions or routines that actually op-
erate on internal databases with private data (denoted as
terminal functions). After that, our tool performs path-
sensitive data-ﬂow analysis along execution paths from
start functions to terminal functions, so that we can auto-
matically derive necessary constraints and prepare “appro-
priate” inputs to evaluate the presence of content leakage or
pollution vulnerabilities. The inputs will then be dynami-
cally fed into the app on a real phone for conﬁrmation.
We have applied the ContentScope tool to 62, 519 apps
collected in February 2012 from various Android markets,
including the ofﬁcial Google Play. Using the tool, we
detected 1, 456 vulnerable apps (or 2.3% of our dataset).
Speciﬁcally, 1, 279 apps (or 2.0%) suffer from passive
content leaks, 871 apps (or 1.4%) are susceptible to
content pollution, and 694 apps (or 1.1%) contain both
vulnerabilities. Among these vulnerable apps, 435 (0.7%)
and 398 (0.6%) of them were downloaded from the ofﬁcial
Google Play.
After identifying these vulnerable apps, we further per-
form a break-down to better understand them. Speciﬁcally,
by analyzing apps with passive content leaks, we aim to
understand the types of personal information that may be
passively leaked. Our results show that the relevant per-
sonal information for leaks includes, but not limited to, (1)
incoming and/or outgoing SMS messages (268 apps); (2)
contacts stored in the phone (128 apps); (3) conversations
in popular IMs such as MSN (121 apps); (4) user creden-
tials such as user name, password and authentication tokens
of popular social network websites such as Facebook and
Twitter (80 apps); (5) browser history and bookmarks (70
apps); and (6) incoming and/or outgoing phone call logs
(61 apps). These vulnerable apps include popular mobile
browsers, widely-used instant messengers (IMs) and social
network apps, and even mobile security apps.
Similarly, when analyzing apps with the content
pollution vulnerability, we aim to understand possible side
effects from them. Our results show that by polluting in-
ternal databases, we could effectively manipulate certain
blacklists or whitelists (for outgoing/incoming phone calls
as well as SMS messages) that are maintained by vulnera-
ble apps. In other words, security-sensitive settings (such
as ﬁrewall rules) can be arbitrarily changed by any app on
the phone without any permission. Our results further show
that some vulnerable apps can be even exploited to down-
load additional unwanted apps (and other arbitrary types of
ﬁles) from remote servers in the background without user’s
awareness. (The downloaded app can be later automatically
triggered for installation, albeit with user approval.)
Among the detected vulnerable apps, some of them are
extremely popular, having been downloaded from Google
Play for more than 10, 000, 000 times. After identifying
them, since February 2012, we have been actively report-
ing our ﬁndings to the corresponding developers. Some de-
velopers have taken our reports seriously and immediately
followed our suggestions to ﬁx their apps. However, we
also experienced some difﬁculties in communicating with
other developers, either by being unable to ﬁnd their valid
contact information or by not receiving any response to our
reports.
We note that several recent works [15, 17, 19, 20, 27]
also attempted to examine potential risks and implications
from unprotected interfaces of Android apps. However, our
work differs from them by not focusing on invoking esca-
lated privileged operations (e.g., from an app without any
permission).
Instead, we exclusively focus on the open
content provider interface of Android apps and study po-
tential risks that may lead to passive privacy leakage and
unintended manipulation of security-sensitive data. To the
best of our knowledge, our paper is the ﬁrst to systemat-
ically study these two issues and quantitatively report the
prevalence of affected apps.
The rest of this paper is organized as follows: In Section
2, we elaborate the threat model and assumptions of this
work. We then present the overall system design in Section
3, followed by its implementation details in Section 4. After
that, we report the evaluation results in Section 5. We also
discuss possible solutions and improvements in Section 6.
Finally, we describe related work in Section 7 and conclude
the paper in Section 8.
2 Threat Model and Assumptions
In this paper, we assume the following adversary model.
In order to launch the above-mentioned passive content
leaks and/or pollution attacks, a malicious app needs to be
installed on the same smartphone as the vulnerable app. Af-
ter installation on the phone, we do not assume the mali-
cious app will request any dangerous permission2 to launch
2A dangerous permission means the permission is deﬁned at the dan-
gerous protection level [27] and will need to be explicitly approved by
users before being granted to third-party apps. In the following, for sim-
plicity, we will use permission to present dangerous permission if not oth-
erwise speciﬁed.
Android
Markets
App
Repository
Step 1
Select
Step 2
Determine
Step 3
Classify
Candidate Apps
Vulnerable Apps
Vulnerable Apps
Vulnerability
Statistics
Figure 1. The ContentScope design
ContentScope
the attack. Even so, the malicious app can manage to ob-
tain private or conﬁdential data (such as contacts, SMS mes-
sages or browser histories) that may be maintained by vul-
nerable apps. Further, the malicious app can potentially
manipulate certain in-app data that could be a part of secu-
rity settings or conﬁgurations to introduce unintended side-
effects in the running system. We note that to transport the
stolen private data to a remote server under the attacker’s
control, the malicious app does need the corresponding IN-
TERNET permission.
3 Design
To analyze these two vulnerabilities and assess their
prevalence in existing apps, we design the ContentScope
system to scalably and accurately examine a large number
of apps from existing Android markets. In particular, we
consider a passive content leak occurs when an app does not
properly protect its internal (private) database and allows it
to be freely accessible to any running apps. Similarly, con-
tent pollution happens if any app without necessary autho-
rization or permission can manipulate another app’s internal
database or settings, which can be security-sensitive.
In Figure 1, we show the overall architecture of the
ContentScope system, which involves several steps to de-
termine vulnerable apps. The ﬁrst step is to select candidate
apps that may potentially be susceptible to these two vulner-
abilities. For that purpose, we extract essential vulnerabil-
ity characteristics to signiﬁcantly reduce the number of apps
that need to be subsequently examined. In other words, the
selected candidate apps are expected to be a small portion
of all existing apps. After that, the second step is to analyze
candidate apps and determine whether they are indeed vul-
nerable. Finally, to further assess the threat level of these
vulnerable apps, we accordingly examine them and present
a break-down on the types of leaked or polluted content as
well as the associated side effects. In the following, we il-
lustrate each step in detail.
3.1 Candidate App Selection
To select candidate apps, our strategy is to extract es-
sential characteristics of these two vulnerabilities. Speciﬁ-
cally, these two vulnerabilities share a similar nature of hav-
ing an exploitable content provider interface. Note that the
content provider interface in Android is designed to con-
cisely encapsulate a structured set of local data (typically
in the form of SQLite databases) while providing neces-
sary mechanisms to regulate the accesses to encapsulated
data. By default, this interface is open so that any app can
leverage it to communicate with each other. In the mean-
time, an app can protect its interface by (1) either setting
a property named exported to false in its manifest ﬁle (or
more precisely AndroidManifest.xml) to ensure that the in-
terface is only available to itself or others with the same user
ID or (2) deﬁning custom permissions to expose them only
to apps that are granted these custom permissions. More-
over, each (custom) permission has a protection level, which
determines how dangerous the permission is and the way
this permission can be granted to other apps. A certain
protection level (i.e., signatureOrSystem) is reserved for
pre-loaded apps in the phone ﬁrmware while others (i.e.,
normal, dangerous, and signature) can be requested by
third-party apps.
If there is no protection level speciﬁed
for a custom permission, the default protection level normal
will be used.
In this paper, we focus on existing third-party apps avail-
able in various Android markets. Therefore, we mainly
target custom permissions with normal, dangerous, and
signature protection levels.
It is also important to note
that for a permission at normal protection level, any app
can request it and the Android runtime will automatically
grant access, without asking for user’s explicit approval.
This differs from permissions at the dangerous level, which
demand explicit approval from users, or at the signature
level, which require apps to be signed with the same devel-
oper key.
In Figure 2 we show a manifest ﬁle which de-
ﬁnes a content provider named ExampleProvider. Be-
cause it does not specify the exported property explic-
itly,
this content provider is open to all apps on the
phone by default. The app deﬁnes a custom permis-
sion com.example.app.permission to protect this content
provider. However the protectionLevel property of this
custom permission is normal, which means this permission
will be automatically granted to any app that requests it.
1  
2  
4      ...
5      
6          
10         
11     
12     
15     
16
17 
Figure 2. An example AndroidManifest.xml
ﬁle that deﬁnes a content provider
Accordingly, to locate those candidate apps, our sys-
tem ﬁrst parses their manifest ﬁles to determine whether
there is any content provider component deﬁned.
If yes,
we extract the corresponding attributes. The ﬁrst one is
the exported property as it speciﬁes whether or not the
content provider is accessible by other apps.
(If it is not
deﬁned, the default true value is assumed, which means
any app can access it.) The second one is to detect the
presence of any custom permission(s) to regulate the read
or write accesses to the content provider. More speciﬁ-
cally, there are three closely-related ones: readPermission,
writePermission, and permission. The readPermission
and writePermission explicitly specify the respective per-
mission used to query and make changes to the data
managed by content provider.
If they are missing, the
permission attribute will be used.
In other words, our system chooses those apps as candi-
dates if they explicitly export a content provider by setting
true in its exported attribute or implicitly export this in-
terface without specifying this attribute.
In addition, our
system also selects those apps, which may have custom
permissions, but the corresponding protection level(s) are
not deﬁned or deﬁned at the normal level. After that, for
bookkeeping purposes, we further extract other attributes of
the content provider component from these candidate apps,
including the name property, which speciﬁes the speciﬁc
class implementing the content provider interface, as well as
authorities, which is used by the Android runtime to lo-
cate the content provider itself. All these relevant attributes
will be collected along with the app information and saved
into a local database for subsequent analysis.
3.2 Vulnerable App Determination
After selecting candidate apps, our next step is to ana-
lyze them to locate vulnerable ones. In order to effectively
manage a structured set of data in a local SQLite database,
the Android framework provides well-deﬁned APIs to ease
the creation and maintenance of content providers. Specif-
ically, these APIs are provided in a number of system-
wide classes, including SQLiteDatabase (which contains
the methods to create, delete and execute SQL commands)
and SQLiteQueryBuilder (which helps build SQL queries).
In other words, content providers can leverage these meth-
ods to implement their own standardized APIs that can
be invoked to query and make changes to records in lo-
cal databases. To simplify our discussion, we call these
Android APIs that actually manipulate local databases
terminal functions.
From another perspective, the content provider compo-
nent essentially encapsulates local content and exports them