introduced by Cramer and Shoup [12]. A TCR hash function H guarantees that given a random
element x which is from the valid domain of H, a PPT adversary A cannot ﬁnd y (cid:54)= x such that
H,A = P r[(x, y) ← A(1k) : H(x) = H(y), x (cid:54)= y, x, y ∈ DH] be the
H(x) = H(y). We let AdvT CR
advantage of A in successfully ﬁnding collisions from a TCR hash function H, where DH is the valid
input domain of H, k is the security parameter. If a hash function is chosen from a TCR hash function
family, AdvT CR
H,A is negligible.
4 A New CP-ABPRE with CCA Security
In this section we construct a new CP-ABPRE in the random oracle model with CCA security. Prior
to proposing the scheme, we ﬁrst introduce some intuition behind our construction. We choose Waters
ABE (the most eﬃcient construction proposed in [26]) as a basic building block of our scheme due to
the following reasons. The construction of Waters ABE scheme enables us to convert the scheme to
be an ABE Key Encapsulation in the random oracle model. Speciﬁcally, in our construction a content
key that is asymmetrically encrypted under an access policy is used to hide a message in a symmetric
way. Furthermore, Waters ABE scheme utilizes LSSS to support any monotonic access formula for
ciphertexts. It is a desirable property for CP-ABPRE systems when being implemented in practice.
In addition, the construction for ciphertexts, whose size is linear in the size of formula, is able to help
us relieve the communication cost incurred by re-encryption and the generation of re-encryption key.
CCA Security. As discussed in Section 1.1, the biggest challenge would be how to achieve CCA
security while not jeopardizing the properties of attribute-based re-encryption, unidirectionality and
collusion resistance. In our construction, we use some technique, which is like the FO [14] conversion,
to capture CCA security. Speciﬁcally, in the construction of ciphertext we utilize a TCR hash function
to “sign” the ciphertext’s components as well as the description of LSSS, and meanwhile, construct a
“veriﬁcation key” to check the validity of such a “signature”. In algorithm Enc, it can be seen that
the “signature” is D and the veriﬁcation key is A3 such that the validity of ciphertext can be checked
?|= (M, ρ). In
by e(A2, g1) ?= e(g, A3) and e(A3, H4(A1, A3, (B1, C1), ..., (Bl, Cl), (M, ρ))) ?= e(g1, D), S
algorithm ReEnc, the proxy could ﬁrst check the above equations so as to guarantee the re-encryption
to intake correct values. Besides the well-formness of the components {(Bi, Ci)|1 ≤ i ≤ l} should be
veriﬁed as they are the input for re-encryption as well. To capture such a requirement, we let the
, H3(ρ(i))wi)). After fulﬁlling the re-encryption,
the proxy will output the re-encrypted ciphertext (S, (M, ρ), A1, A3, (B1, C1), ..., (Bl, Cl), D, A4,
rk4). For a legitimate delegatee, he/she is able to check the validity of the re-encrypted ciphertext as
(M, ρ), A1, A3, (B1, C1), ..., (Bl, Cl) are “signed” by D and S is “signed” in rk4 (which will be further
elaborated later). Besides, A4 is tightly related to the original ciphertext’s components A1 and A3 due
to a fact that A3
, g) ?= e(A2, ga) ·(cid:81)
proxy check e((cid:81)
can tell whether A4 is mutated or not.
?= gH1(m,β)
1
i∈I Bwi
i
i∈I (e(C−1
i
11
As to the generation of re-encryption key rkS→(M(cid:48),ρ(cid:48)) from an attribute set S to a new access
policy (M(cid:48), ρ(cid:48)), it can be seen that S and (M(cid:48), ρ(cid:48)) are “signed” in D(cid:48), and the signature can be checked
by A(cid:48)
2. rk1, rk3, Rx are tightly related to rk4 via δ, and rk1 is bound with rk2 with θ, where rk4 is
the encryption of δ under (M(cid:48), ρ(cid:48)) with CCA security. Here if rk1, rk2, rk3 and Rx are mutated by an
adversary, the corresponding re-encryption will yield an invalid results corresponding to rk4; on the
other hand, if the description of S and (M(cid:48), ρ(cid:48)), and the encryption rk4 are mutated, the proxy can
tell by checking e(A(cid:48)
l(cid:48)), S, (M(cid:48), ρ(cid:48)))) ?= e(g, D(cid:48)). Thus the construction
precludes an adversary from generating a new and valid re-encryption key rkS(cid:48)→(M(cid:48),ρ(cid:48)) or rkS→(M(cid:48)(cid:48),ρ(cid:48)(cid:48))
based on knowledge of rkS→(M(cid:48),ρ(cid:48)).
1), ..., (B(cid:48)
2, H6(A(cid:48)
2, (B(cid:48)
l(cid:48), C(cid:48)
1, C(cid:48)
1, A(cid:48)
Taking a more speciﬁc look at the re-encryption key, we can see that only the private key of
the delegator is taken as an input. Accordingly, our scheme is non-interactive in the generation of
re-encryption key (which saves the bandwidth of communication) and unidirectional. Due to the
construction of rk1 an adversary cannot compromise the entire private key of the delegator without
knowledge of θ even if it colludes with the corresponding delegatee. This captures collusion resistance.
As to single-hop property, it can be achieved as follows. Algorithm ReEnc shows that A3 (i.e. gs
1) is a
necessary component for re-encryption. However, such a component is not included in rk4 such that
rk4 is out of the capability of being re-encrypted. Thus our scheme is single-hop as well.
Note that the deﬁnition of the relevant variables used above can be seen in our scheme.
The description of our new CP-ABPRE scheme with CCA security is as follows. Unless stated
otherwise, we let U be the attributes universe in the system, and S be an attribute set, S ⊆ U.
1. Setup(1k,U). Given a security parameter k and U, run (p, g, G, GT , e) ← BSetup(1k). Choose two
p, a random generator g1 ∈ G, and set the following TCR hash functions
random values a, α ∈ Z∗
p, H2 : GT → {0, 1}2k, H3 : {0, 1}∗ → G, H4 : {0, 1}∗ → G, H5 : {0, 1}k → Z∗
H1 : {0, 1}2k → Z∗
p,
H6 : {0, 1}∗ → G. The public parameters are param = (p, g, G, GT , e, g1, ga, e(g, g)α, H1, H2,
H3, H4, H5, H6), and the master secret key is msk = gα.
2. KeyGen(msk, S). Given msk and an attribute set S, choose t ∈R Z∗
K = ga·t · gα, L = gt,∀x ∈ S Kx = H3(x)t.
as
p, and set the private key skS
3. Enc((M, ρ), m). Taking an LSSS access structure (M, ρ) (M is an l × n matrix, and the function ρ
associates rows of M to attributes) and a message m ∈ {0, 1}k as input, the encryption algorithm
works as follows.
(a) Choose β ∈R {0, 1}k, set s = H1(m, β) and a random vector v = (s, y2, ..., yn), where y2, ..., yn ∈R
(b) For i = 1 to l, set λi = v · Mi, where Mi is the vector corresponding to the ith row of M .
(c) Choose r1, ..., rl ∈R Z∗
Z∗
p.
p, set
A1 = (m||β) ⊕ H2(e(g, g)α·s), A2 = gs, A3 = gs
Bl = (ga)λl · H3(ρ(l))
−rl, Cl = grl, D = H4(A1, A3, (B1, C1), ..., (Bl, Cl), (M, ρ))s,
1, B1 = (ga)λ1 · H3(ρ(1))
−r1, C1 = gr1, ...,
and output the original ciphertext C(M,ρ) = ((M, ρ), A1, A2, A3, (B1, C1), ..., (Bl, Cl), D).
Note that {ρ(i)|1 ≤ i ≤ l} are the attributes used in the access structure (M, ρ). Like [26], we
allow an attribute to be associated with multiple rows of matrix M , i.e. the function ρ is not
injective.
4. ReKeyGen(skS, S, (M(cid:48), ρ(cid:48))). Given a private key skS = (K, L, Kx) and the corresponding attribute
set S, and an LSSS access structure (M(cid:48), ρ(cid:48)), the re-encryption key is generated as follows, where
x ∈ S, M(cid:48) is an l(cid:48) × n(cid:48) matrix, and the function ρ(cid:48) associates rows of M(cid:48) to attributes.
– The delegator does the following encryption:
(a) Choose β(cid:48), δ ∈R {0, 1}k, set s(cid:48) = H1(δ, β(cid:48)) and a random vector v(cid:48) = (s(cid:48), y(cid:48)
2, ..., y(cid:48)
n(cid:48)), where
y(cid:48)
2, ..., y(cid:48)
n(cid:48) ∈R Z∗
p.
12
i = v(cid:48) · M(cid:48)
1, ..., B(cid:48)
(b) For i = 1 to l(cid:48), set λ(cid:48)
l(cid:48) ∈R Z∗
(c) Choose r(cid:48)
1, ..., r(cid:48)
−r(cid:48)
1, C(cid:48)
H3(ρ(cid:48)(1))
1 = gr(cid:48)
..., (B(cid:48)
l(cid:48), C(cid:48)
l(cid:48)), S, (M(cid:48), ρ(cid:48)))s(cid:48)
..., (B(cid:48)
l(cid:48), C(cid:48)
l(cid:48)), D(cid:48)).
– The delegator chooses θ ∈R Z∗
i is the vector corresponding to the ith row of M(cid:48).
1 ·
1 = (ga)λ(cid:48)
1, C(cid:48)
2, (B(cid:48)
1),
2, (B(cid:48)
1, C(cid:48)
1),
1, rk2 = gθ, rk3 = LH5(δ), ∀x ∈ S Rx =
, rk4 = C(M(cid:48),ρ(cid:48)), and outputs the re-encryption key rkS→(M(cid:48),ρ(cid:48)) = (S, rk1, rk2, rk3, rk4, Rx).
i , where M(cid:48)
p, compute A(cid:48)
), A(cid:48)
2 = gs(cid:48)
l(cid:48) = (ga)λ(cid:48)
l(cid:48) , D(cid:48) = H6(A(cid:48)
, and output the ciphertext C(M(cid:48),ρ(cid:48)) = ((M(cid:48), ρ(cid:48)), A(cid:48)
p, and sets rk1 = KH5(δ) · gθ
1 = (δ||β(cid:48)) ⊕ H2(e(g, g)α·s(cid:48)
l(cid:48) = gr(cid:48)
l(cid:48) ·H3(ρ(cid:48)(l(cid:48)))
, B(cid:48)
1, A(cid:48)
1, A(cid:48)
KH5(δ)
x
l(cid:48) , C(cid:48)
−r(cid:48)
constants such that (cid:80)
5. ReEnc(rkS→(M(cid:48),ρ(cid:48)), C(M,ρ)). Parse the original ciphertext C(M,ρ) as ((M, ρ), A1, A2, A3, (B1, C1),
..., (Bl, Cl), D), and the re-encryption key rkS→(M(cid:48),ρ(cid:48)) as (S, rk1, rk2, rk3, rk4, Rx). Recall that M
is an l × n matrix. Let I ⊂ {1, ..., l} be deﬁned as I = {i : ρ(i) ∈ S}, {wi ∈ Z∗
p}i∈I be a set of
i∈I wi · λi = s if {λi} are valid shares of any secret s according to M and
S |= (M, ρ)10.
(a) The proxy is able to verify whether the re-encryption key rkS→(M(cid:48),ρ(cid:48)) contains valid S and
(M(cid:48), ρ(cid:48)) or not by checking
2, H6(A(cid:48)
e(A(cid:48)
1, A(cid:48)
2, (B(cid:48)
1, C(cid:48)
1), ..., (B(cid:48)
l(cid:48), C(cid:48)
l(cid:48)), S, (M(cid:48), ρ(cid:48)))) ?= e(g, D(cid:48)).
(b) Verify the validity of the original ciphertext
e(A2, g1) ?= e(g, A3), e(A3, H4(A1, A3, (B1, C1), ..., (Bl, Cl), (M, ρ))) ?= e(g1, D), S
(cid:89)
i∈I
e(
Bwi
i
, g) ?= e(A2, ga) ·(cid:89)
i∈I
(e(C−1
i
, H3(ρ(i))wi)).
?|= (M, ρ),
(1)
If Eq. (1) does not hold, output ⊥. Otherwise, proceed.
((cid:81)
(c) Compute A4 =
e(A2,rk1)/e(A3,rk2)
i∈I (e(Bi,rk3)·e(Ci,Rρ(i)))wi ) , and output the re-encrypted ciphertext CR
(M(cid:48),ρ(cid:48)) =
(S, (M, ρ), A1, A3, (B1, C1), ..., (Bl, Cl), D, A4, rk4).
6. Dec(S, skS, C(M,ρ)). Parse the original ciphertext C(M,ρ) as ((M, ρ), A1, A2, A3, (B1, C1), ...,
(Bl, Cl), D), and the private key skS (for an attribute set S) as (K, L, Kx) (x ∈ S). Note that
p}i∈I be a set of constants such that
let I ⊂ {1, ..., l} be deﬁned as I = {i : ρ(i) ∈ S}, {wi ∈ Z∗
(1) Verify Eq. (1). If Eq. (1) does not hold, output ⊥. Otherwise, proceed.
(cid:80)
i∈I wi · λi = s.
(2) Compute Z = e(A2, K)/((cid:81)
i∈I (e(Bi, L) · e(Ci, Kρ(i)))wi) and m||β = H2(Z) ⊕ A1, output m if
A3 = gH1(m,β)
7. DecR(S(cid:48), skS(cid:48), CR
1
, and output ⊥ otherwise.
(M(cid:48),ρ(cid:48))). Parse the re-encrypted ciphertext CR
..., (Bl, Cl), D, A4, rk4), and the private key skS(cid:48) (for an attribute set S(cid:48)) as (K(cid:48), L(cid:48), K(cid:48)
(a) Recover δ||β(cid:48) as follows. Let I(cid:48) ⊂ {1, ..., l(cid:48)} be deﬁned as I(cid:48) = {i : ρ(cid:48)(i) ∈ S(cid:48)}, {w(cid:48)
a set of constants such that(cid:80)
(M(cid:48),ρ(cid:48)) as (S, (M, ρ), A1, A3, (B1, C1),
x) (x ∈ S(cid:48)).
p}i∈I(cid:48) be
i} are valid shares of any secret s(cid:48) according
i = s(cid:48) if {λ(cid:48)
i ∈ Z∗
i∈I(cid:48) w(cid:48)
i · λ(cid:48)
to M(cid:48) and S(cid:48) |= (M(cid:48), ρ(cid:48)).
i. Verify
e(A(cid:48)
2, H6(A(cid:48)
1, A(cid:48)
2, (B(cid:48)
1, C(cid:48)
1), ..., (B(cid:48)