Guess Where I am:
Android模拟器躲避的检测与应对
胡文君(MindMac) 肖梓航(Claud Xiao)
模拟器检测技术
模拟器技术应用广泛
• Google、安全企业使用模拟器检测恶意代码
• 为什么用模拟器而不是真机？
– 经济成本低
– 高度可定制
– 易于开发
– 容易部署
模拟器检测技术现状
•
Timothy Vidas and Nicolas Christin,  Evading Android Runtime Analysis 
via Sandbox Detection, ASIACCS’14
•
赵闽 and 倪超，逃离安卓动态检测&订票助手一日谈，HitCon 2013
•
Tim Strazzere, Dex Education 201:Anti-Emulators, HitCon 2013
•
Patrick Schulz, Android Emulator Detection by Observing Low-level 
Caching Behavior
•
Felix Matenaar and Patrick Schulz, Detecting Android SandBoxes
•
Jon Oberheide and Charlie Miller, Dissecting the Android Bouncer, 
SummerCon 2012
•
Nicholas J. Percoco and Sean Schulter, Adventures in BouncerLand, Black 
Hat USA 2012
•
Vaibhav Rastogi, Yan Chen and William Enck, AppsPlayGround: 
Automatic Security Analysis of Smartphone Applications, CODASPY’ 13
模拟器检测技术的分类
• 模拟检测技术从上至下可分为4类
用户层行为和数据
Android系统层特征
Linux系统层特征
模拟器体系结构特征
基于用户层行为和数据检测模拟器
• 存在API Demos、Dev Tools等一般模拟器上
的应用程序
• 联系人、短信、电话记录、相册是否为空？
• 应用程序安装数量很少 or 只有模拟器上默
认的应用程序
• logcat一直处于运行状态？Log中记录敏感
数据信息，如短信发送的目的地址和内容？
基于Android系统层特征检测模拟器
• 电话号码 == 15555215554-5584,etc
• 电池状态与电量
• wifi、GPS等硬件特征
• Build.Device == generic, etc
• 反射调用SystemProperties.get获取属性值
• 读取/system/build.prop文件
• Monkey行为模拟事件
基于Linux系统层特征检测模拟器
• 通过驱动信息特征检测模拟器
• 通过设备文件特征检测模拟器
• 通过执行shell命令检测模拟器
• 通过Native Code检测模拟器
基于模拟器体系结构特征检测模拟器
• 模拟器CPU信息异于真实机器
• DexLabs-Qemu二进制翻译技术
• BlueBox-模拟器底层缓存行为
Felix Matenaar and Patrick Schulz
基于模拟器体系结构特征检测模拟器
• 模拟器CPU信息异于真实机器
– adb shell
– cat /proc/cpuinfo
反模拟器对抗的应用不理想
• 使用模拟器的分析系统考虑到了模拟器检测行为的存在
• 各分析系统针对性地使用了反模拟器检测技术
• 最新研究结果表明实际效果并不理想
– Timothy Vidas and Nicolas Christin,  
Evading Android Runtime Analysis via 
Sandbox Detection, ASIACCS’14
图片来源：Evading Android Runtime Analysis via Sandbox Detection, 
ASIACCS’14
我们的问题
• 如何判断Android应用程序是否存在反模拟器
行为？
• 真实世界中，有多大比例的应用程序会进行
模拟器检测？采用何种手段进行检测？检测
模拟器的目的？
• 如何构造更真实的模拟器，欺骗应用程序其
运行在真机环境？
如何判断Android应用程序是否
存在反模拟器行为？
反模拟器行为真实案例
• 通过Build.MODEL获取设备型号
• 与特定字符串进行比较
获取设备型号
与特定字符串比较
模拟器标识
模拟器检测
反模拟器行为检测思路
• 反编译APK
• 搜索特定API以及字符串
• 若存在获取系统信息，并与特定字符串比较，
则认为存在模拟器检测行为
反模拟器行为特征(40条特征)
• TelephonyManager类的API
– (getDeviceId, 000000000000000)
– (getDeviceId, 012345678912345)
– (getSubscriberId,310260000000000)
– (getVoiceMailNumber, 15552175049)
– ...
• Build类字段
– (BRAND, generic)
– (DEVICE, generic)
– (HARDWARE, goldfish)
– (HOST, android-test)
– ...
反模拟器行为特征(40条特征)
• 特征文件
– /dev/socket/qemud
– /dev/qemu_pipe
– /dev/qemu_trace
– ......
• 系统属性
– (ro.hardware, goldfish)
– (ro.product.device, generic)
– (ro.product.model, sdk)
– (ro.product.name, sdk)
– .......
无法检测基于用户层行为和数据、模拟器体系结构特征的反模拟器行为！
真实世界中，有多大比例的应用
程序会进行模拟器检测？采用何
种手段进行检测？检测模拟器的
目的？
实验样本空间
• 正常应用程序
– 来源：Google Play 2013
– 样本规模：14,195
• 恶意代码样本
– 来源：AndroMalShare
– 样本规模：8,939
正常应用有近50%命中特征
• 49.996%的样本命中特征
• 分析发现大部分命中特征来源于广告模块
• 过滤广告模块，仍然有21.606%样本命中特
征
基于正常应用的统计数据
1329 
1270 
1232 
808 
776 
744 
743 
695 
543 
539 
512 
461 
446 
413 
405 
396 
363 
332 
320 
311 
745 
542 
643 
409 
271 
340 
337 
486 
267 
214 
340 
298 
244 
152 
119 
260 
211 
118 
159 
162 
261 
258 
282 
194 
139 
138 
175 
184 
107 
116 
123 
121 
110 
66 
64 
117 
33 
87 
53 
77 
0
200
400
600
800
1000
1200
1400
# Apps
# De te cte d Apps
# De te cte d Apps(Ad Filte red)
基于正常应用的统计数据
284 
279 
198 
170 
133 
113 
83 
57 
56 
27 
27 
27 
23 
20 
17 
12 
12 
11 
8 
76 
123 
100 
136 
52 
44 
63 
34 
2 
23 
25 
20 
16 
17 
16 
7 
11 
9 
6 
24 
73 
53 
58 
25 
20 
25 
14 
2 
10 
11 
9 
9 
4 
12 
2 
2 
6 
3 
0
50
100
150
200
250
300
# Apps
# De te cte d Apps
# De te cte d Apps(Ad Filte red)
反模拟器行为多来自于第三方库
• 大部分应用程序自身并没有反模拟器行为，其模拟
器检测部分代码来自于以下几类
– 广告模块: Google Ad, Millennial Media, etc
– 社交类库: Facebook, Twitter, etc
– 支付类库: PayPal，Amazaon, etc
– 视频类库: Youtube, etc
– 游戏引擎: LGame, etc
– 其他第三方库: SamSung S-Pen，Mozilla JavaScript, etc
模拟器检测方法-Google Ad
• 反射调用SystemProperties.get方法获取系统属性
• 比较模拟器对应的特征值检测模拟器
模拟器检测方法-PayPal
• 调用TelephonyManager.getDeviceId获取设备Id
• 与字符串000000000000000比较判断是否为模拟器
恶意样本反模拟器行为低于正常样本
• 19.029%的恶意样本命中特征
• 部分命中特征仍来源于广告模块，但远低于
正常应用中所占比例
• 过滤广告模块，仍然有15.360%恶意样本命
中特征
模拟器检测方法-Pincer
• MD5