is against adversaries that receive up to m examples
of RTT instances and their solutions, where m is a
parameter.
• Small probability of guessing the answer correctly: We
require that the probability that a random guess pro-
duces a correct answer to the test is small. For exam-
ple, a test that presents an image of a person and asks
the viewer to type whether this is a male or a female
is insuﬃcient for our purpose, since a random guess of
the answer is correct with probability of at least 50%.
An example of a test that satisﬁes this requirement is
one that displays a random 6 character string rendered
in a way that is hard for OCR programs to decode, and
asks the user to type the string.
Recent research eﬀorts in this area include a patent by Lil-
libridge et al [14], a paper by J. Xu et al [22], and a workshop
at Xerox PARC [25] sponsored by the CAPTCHA project
at CMU [6]. The CAPTCHA web site includes examples of
RTTs, as well as source code. Reverse Turing tests are cur-
rently used in commercial deployments: Yahoo!, AltaVista,
and PayPal use them to ensure that only human users sign
up for certain of their services [26, 1, 21]. A typical imple-
mentation of such a test presents the user with a distorted
text image, presumably one that cannot be parsed by cur-
rent OCR (Optical Character Recognition) programs, and
requires the subject of the test to type the characters of the
image (the encoding of the image is typically 6K to 30K
bytes long).
2.1 Security of RTTs
Of course, it is not clear whether a true reverse Turing
test (RTT) exists at all, and the success of any real-world
deployment of a proposed RTT depends on a moving target:
the current state of the art in designing programs to carry
out the (presumably) diﬃcult human task on which the test
is based, as well as reductions in the cost of computational
resources due to Moore’s law. There are, however, good
indications that RTTs that are based on images of distorted
strings are rather secure, at least for our application:
• Alta Vista use RTTs in the following way. Users that
submit URLs to the Alta Vista search engine are re-
quired to pass an RTT before the URL is accepted [1].
This requirement was added after it was realized that
web spammers were using automated programs to sub-
mit many URLs, in order to increase the ranking of
their web pages. Alta Vista report that the number of
submitted URLs was reduced by 90% after the RTT
test was added to the URL submission process.
163• A diﬀerent indication is presented in a recent paper [2],
written by experts in OCR technology. The conclusion
of that paper is optimistic with regard to the future
of RTTs, suggesting that “The slow pace of evolution
of OCR... suggests that pessimal print will defy auto-
mated attacks for many years”.
• Furthermore, in our paper we design solutions for dic-
tionary attacks that use RTTs. These constructions
ensure that in order to guess a password correctly the
attacker must pass many RTTs. We therefore do not
have to require that solving the RTTs is infeasible for
automated adversaries. The constructions are secure
as long as the task of breaking RTTs requires some
considerable computational investment from the ad-
versary.
A note on accessibility. A possible issue with the current
implementations of RTTs is that they are based on visual
capabilities of humans. Solving them might prove hard for
people with vision problems, or with other disabilities. Any
attempt to design a solution that will be widely used must
address this issue. A possible solution is to enable visually
impaired users to use audible RTTs that ask users to type
back a sequence of letters that is read over a noisy back-
ground. In fact, PayPal enables users to choose this type of
RTT instead of the default visual test.
3. USER AUTHENTICATION PROTOCOLS
We ﬁrst describe a basic protocol that provides good secu-
rity against dictionary attacks but aﬀects the usability and
scalability of the system. We then describe a protocol that
solves the usability and scalability issues.
3.1 A basic protocol
The basic protocol combines reverse Turing tests (RTTs)
with any password based user authentication system in the
following way:
Users are required to pass an RTT before start-
ing the authentication process (namely, before
entering their username and password).
This solution prevents automated programs from trying
many passwords, since each password guessing attempt re-
quires the adversary to answer an RTT. A detailed discus-
sion of the security appears in Section 4.
Intuitively, any
attack against the original login scheme that requires N lo-
gin attempts, now requires the adversary to answer N RTTs.
This either means that the adversary should perform N in-
teractions with human users that answer the RTTs, in which
case the operation of the attacker is deﬁnitely slowed down,
or requires the adversary to design an automated program
that breaks the RTTs. Furthermore, even if the adversary
designs such an automated RTT solver, it would still slow
down the operation of the dictionary attack, unless it can
break RTTs in negligible time2.
In spite of its improved security, this method is not opti-
mal for large-scale systems, for two major reasons.
Usability: For a system to be widely deployed, it should
provide users with a user experience that is as similar as
2In this paper we refer to the adversary as “it” in order to
emphasize that we assume it to be an automated adversary.
possible to their existing experience. Currently the user’s
login procedure is a fairly automatic mental task: the user
types the same username and password in every login at-
tempt. A system that asks users to pass an RTT before
entering their username and password requires them to pass
a much more demanding task than the one required by the
current procedure. This would probably annoy many users.
Scalability: The solution requires an RTT to be gener-
ated for every login attempt. Current systems require users
to pass an RTT when they register for a new service (for
example in Yahoo! or Paypal), and this happens much less
frequently than login attempts. It is not clear whether RTT
generation can scale up easily to generate and serve an RTT
per login attempt.
Comment:
In order to solve the scalability problem, a
protocol could require users to answer an RTT only for a
fraction of their login attempts. The drawback of this ap-
proach is that the decision whether to require an RTT is per-
formed before the user enters the username and password.
An adversary that mounts a dictionary attack can choose to
continue with the login process if it is not required to pass
an RTT, and abort it if an RTT is required. If RTTs are re-
quired for a fraction p of the login attempts, the adversary’s
operation is slowed down by a factor of 1/(1− p), which is a
small factor unless p is very close to 1 . We show below how
to achieve scalability while requiring the attacker to solve a
large number of RTTs.
Another naive protocol operates by letting users login to
their accounts without solving an RTT, except for the fol-
lowing condition: if a wrong password is entered for an ac-
count then all subsequent login attempts to this account re-
quire the user to pass an RTT. This requirement is in eﬀect
until a successful login is performed to this account. This
method does not require an adversary to pass an RTT for the
ﬁrst attempt of testing a password for an account, but does
require it to solve RTTs for each additional login attempt
to this particular account. This protocol provides reason-
able protection against an adversary that tries to break into
an individual account. However the protocol is ﬂawed as
it provides little security against a global password attack.
An adversary that is interested in breaking into any account
from a large user base could still test a single password for
every username without ever having to pass an RTT, and
would likely succeed if a (signiﬁcant) fraction of the users
have chosen weak passwords (e.g. if there are 100,000 users
and 50% of them choose passwords from a small dictionary
of 10,000 words). Furthermore, when the legitimate users lo-
gin to their accounts after a login attempt was made by the
adversary, they solve the RTT and enable the adversary to
test an additional password per account for every successful
login (although the users can identify that an unsuccessful
login attempt was performed, it would still be hard for the
system administrator to distinguish between the legitimate
and the illegitimate login attempts).
3.2 A protocol answering the usability and
scalability issues
A major observation that substantially improves the pro-
tocol is that each user typically uses a limited set of comput-
ers, and that it is unlikely that a dictionary attack would
be mounted against this user’s account from one of these
computers. This observation can be used to answer the scal-
ability and usability issues, while reducing security by only
164a negligible amount. Another helpful observation is that it
would be hard for the adversary to attack accounts even if
it is required to answer RTTs for only a fraction of its login
attempts (and we show below how to do this without run-
ning into the problem pointed out in the comment above).
This enables a great improvement in the scalability of the
system.
The protocol assumes that the server has a reliable way of
identifying computers. For example, in a web based system
the server can identify a web browser using cookies (see [10]
for a discussion of how to use cookies securely in the context
of user authentication). Other identiﬁcation measures could
be, for example, based on network addresses or special client
programs used by the user. To simplify the exposition we
assume that the login process uses a web browser, and that
cookies are enabled. (Our protocol can handle cookie theft,
as we describe below.) The protocol is described in Figure 1.
We ﬁrst describe the usability and scalability eﬀects of this
protocol, and then discuss its security.
User login protocol
Initialization: Once the user has successfully logged into
an account, the server places in the user’s computer a cookie
that contains an authenticated record of the username, and
possibly an expiration date. (“Authenticated” means that no
party except for the server is able to change the cookie data
without being detected by the server. This can be ensured,
for example, by adding a MAC that is computed using a key
known only to the server. See [10] for details.) Cookies of this
type can be stored in several computers, as long as each of
them was used by the user.
Login:
1. The user enters a username and a password. If his com-
puter contains a cookie stored by the login server then
the cookie is retrieved by the server.
2. The server checks whether the username is valid and
whether the password is correct for this username.
3. If the username/password pair is correct, then
(a) If the cookie is correctly authenticated and has
not yet expired, and the user identiﬁcation record
stored in the cookie agrees with the entered user-
name, then the user is granted access to the server.
(b) Otherwise (there is no cookie, or the cookie is
not authenticated, or the user identiﬁcation in the
cookie does not agree with the entered username)
the server generates an RTT and sends it to the
user. The user is granted access to the server only
if he answers the RTT correctly.
4. If the username/password pair is incorrect, then
(a) With probability p (where 0 < p ≤ 1 is a system
parameter, say p = 0.05), the user is asked to an-
swer an RTT. When his answer is received he is
denied access to the server, regardless of whether
it is correct or not.
(b) With probability 1 − p, the user is immediately
denied access to the server.
Comment: The decision whether or not to serve
an RTT must be a deterministic function of the
entered username/password pair. That is, for any
speciﬁc pair of username and password values, the
user is either always asked to pass an RTT, or is
never asked to answer one.
Figure 1: The login protocol
3.2.1 Usability
The user is experiencing almost the same interaction as in
the original login protocol (that uses no RTTs). The only
diﬀerence is that he is required to pass an RTT in two in-
stances (1) when he tries to login from a new computer for
the ﬁrst time, and (2) when he enters a wrong password
(with probability p). We assume that most users are likely
to use a small set of computers to access their accounts, and
use other computers very infrequently (say, while traveling
without a laptop). We also have evidence, from the use
of RTTs in Yahoo!, Alta Vista and Paypal, that users are
willing to answer RTTs if they are not asked to do so very
frequently. Based on these observations we argue that the
suggested protocol could be implemented without substan-
tially downgrading the usability of the login system.
3.2.2 Scalability and the operation of the server
The main diﬀerence in the operation of the server, com-
pared to a login protocol that does not use RTTs, is that it
has to generate RTTs whenever they are required by the pro-
tocol. To simplify the analysis assume that most users use
a small set of computers, and very seldom use a computer
that they haven’t used before. We can therefore estimate
that the server is required to generate RTTs only for a frac-
tion p of the unsuccessful login attempts. This is a great
improvement compared to the basic protocol of Section 3.1,
which requires the server to generate an RTT for every login
attempt. Note that the overhead decreases as p is set to a
smaller value.
As for the cost of adding the new protocol to an existing
system, note that no changes need to be made to the ex-
isting procedure, where the authentication module receives
a username/password pair and decides whether they corre-
spond to a legitimate user. The new protocol can use this
procedure as a subroutine, together with additional code
that decides whether to require the user to pass an RTT,
and whether to accept the user as legitimate.
Caching: The security of the protocol is not aﬀected if
the same RTT is given every time that the same username
and password are provided. That is, the RTT itself could be
a deterministic function of the username and password that
are entered by the user. The server can then, for example,
cache, for every username, the RTT that is required when
the correct password is entered. When the user tries to lo-
gin (from a computer that does not contain his identifying
cookie), and the server recognizes that the correct password
was entered, it can retrieve the cached RTT, and send it to
the user. This change is preferable from both the scalability
and usability perspectives. Scalability is improved since the
server does not have to generate an RTT every time the user
logs into the account from a new machine. Assuming that
most of the times the user uses the same set of machines
and enters his correct password, the server is only required
to generate RTTs for about a fraction p of the login at-
tempts of the dictionary attack. Usability is improved since
the user is always presented with the same RTT. We can
expect that the task of solving the RTT will become pretty
automatic, and therefore the login experience would not be
very diﬀerent from the current one, even when the user uses
new computers.
Finally we sketch a variant of the scheme, in which p = 1,
i.e., for every failed login attempt the user is served an RTT.
In this case the decision whether to serve an RTT no longer
165depends on the entered username/password pair. Thus the
protocol can be simpliﬁed from a two-round to a one-round
protocol,
if the server has already retrieved the relevant
cookie from the user before the login screen is displayed to
the user. In this case a user who cannot present the required
cookie is given a login screen that contains ﬁelds for entering
his username/password pair and a randomly generated RTT
challenge. This variant seems particularly easy to integrate
with an existing authentication module.