*160
*238
*1245
*1247
*6
*6
%
4.51
1.56
3.13
6.25
0.78
6.25
100
62.50
59.50
60.79
60.89
4.69
4.69
25.64
Library
Algo
Libgcrypt
(v1.6.3)
AES
CAST5
SEED
Stribog
Tiger
Whrilpool
EdDSA
DSA
Elgamal
RSA
Secret
Entity
Symmetric key
Password
used in
PBKDF2
Session key
(hence
Private key)
Private key
Private key
mod (p-1)
Private key
mod (q-1)
Vulnerable
Routine
Encryption
Key Generation
Key Derivation
Vulnerable
Portion (gcc)
2 T-Boxes [11:89]
1 S-Box [38:62]
1 SS-Box [88:12]
4 S-Boxes [51:49]
2 S-Boxes [53:47]
4 S-Boxes [45:55]
Vulnerable
Portion (llvm)
2 T-Boxes [50:50]
1 S-Box [48:52]
1 SS-Box [27:73]
4 S-Boxes [51:49]
2 S-Boxes [58:42]
4 S-Boxes [52:48]
256
128
128
512
512
512
Signing
ec_mul
ec_mul
Key generation
Modular
exponentiation
powm
powm
OpenSSL
(v1.0.2)
CAST5
SEED
Symmetric key Key generation
1 S-Box [55:45]
1 SS-Box [47:53]
1 S-Box [84:16]
1 SS-Box [67:33]
1 if (c) {
2
3 }
result = result*2;
=⇒
(a)
1 staging_area[0] =
result;
2 staging_area[1] =
result*2;
3 result = staging_area[c
];
(b)
Figure 8: Example for O5: Control-to-Data Dependency
Transformation.
next level are always placed in a different pages. Figure 7 (c) shows
the arrangement of functions in the code staging area such that the
functions are grouped together in the same page. We apply this to
the execution sub-tree of mul_mod function in powm.
5.3 Peephole Optimizations
We apply a local peephole optimization to convert the control-
dependent code to data-dependency which eliminates the need for
code multiplexing.
O5: Control-to-Data Dependency Transformation. Masking data
page accesses is easier and hence we can convert the input depen-
dent code accesses to data accesses. For example, the if-condition
on value of c in Figure 8 (a) can be rewritten as Figure 8 (b).
Speciﬁcally, we perform an if-conversion such that the code is al-
ways executed and the condition is used to decide whether to retain
the results or discard them [20]. In the case of EdDSA, we ﬁrst
fetch the value of res into SAdata (Refer to Figure 3 for code
details). We execute add_points unconditionally and we use
test_bit as a selector to decide if the value in SAdata is to be
used. In the case where test_bit returns true, the actual res in
SAdata is used in the operation and is updated, else it is discarded.
The page fault pattern will be deterministic since add_points
will be executed on all iterations of the loop and the operand of
the function is always from SAdata. This optimization is applied
before the compiler transformation, hence its security follows from
the basic security invariant outlined in Section 4.3.
All our strategies O1-O5 are supported by our compiler aug-
mentation with programmer directives. Note that, our optimization
strategies are sound — the compiler still asserts that the transfor-
mation preserves the PF-obliviousness of the program. We discuss
the empirical effectiveness of these strategies in Section 6.4.
6. EVALUATION
Evaluation Goals. We aim to evaluate the effectiveness of our
proposed solutions for following main goals:
• Does our defense apply to all of our case studies?
• What are the performance trade-offs of our defense?
• How much performance improvements do developer-assisted
transformation offer?
Platform. SGX hardware is not yet fully rolled out and is not pub-
licly available for experimentation. As a recourse, we conduct all
our experiments on PODARCH [44]; a system similar to previous
hypervisor solutions [18] and conceptually similar to SGX. Our
machine is a Dell Latitude 6430u host, conﬁgured with Intel(R)
Core(TM) i7-3687U 2.10GHz CPU, 8GB RAM. We conﬁgure PO-
DARCH with one CPU, 2GB RAM and 64-bit Linux 3.2.53 Kernel
on Debian Jessie for all the experiments. We use LLVM v3.4 with
the default optimization ﬂags for compiling our vanilla and patched
case studies. All the results are averaged over ﬁve runs.
6.1 Case Studies
Selection Criteria. Our defense techniques can be applied to an
application if it satisﬁes the conditions of balanced-execution tree.
We checked the programs FreeType, Hunspell, and libjpeg dis-
cussed in [51] but they exhibit unbalanced execution tree. Trans-
forming these programs to exhibit balanced execution tree causes
an unacceptable performance loss, even without our defense [48].
Hence, we limit our evaluation to cryptographic implementations.
We present our results from the study of a general purpose cryp-
tographic library Libgcrypt v1.6.3 which is used in GnuPG and a
SSL implementation library OpenSSL v1.0.2 [2,3,5]. Table 1 sum-
marizes the results of our study. Interested readers can refer to the
extended version of the paper for the experimental details of each
case study attack [43]. We analyzed the programs compiled with
the two most-used compiler toolchains: gcc v4.8.2 and LLVM
v3.4. For both the compilers, we statically compiled all our pro-
grams with the default optimization and security ﬂags for compila-
tion. Of the 24 routines we analyze in total from both the libraries,
10 routines are vulnerable to pigeonhole attacks on both the com-
pilers. Since our emphasis is not on the attacks, we highlight only
the important ﬁndings below.
Table 2: Performance Summary. Columns 3, 5, 12 denotes the number of page faults incurred at runtime. Columns 10 and 14
represent the total percentage overhead. > symbol denotes the program did not complete within 10 hours after which we terminated
it. A negative overhead means patched code executes faster than the baseline. Tc and Te denote the time spent in preparing the
staging area and actual execution respectively.
Unoptimized
Deterministic Multiplexing
Optimized
Deterministic Multiplexing
Library
Cases
AES
CAST5
EdDSA
powm
SEED
Stribog
Tiger
Whirlpool
CAST5
SEED
Libgcrypt
(v1.6.3)
OpenSSL
(v1.0.2)
Vanilla
PF
4 - 5
2
0
0
2
5
3
5
2
2
T (ms)
4.711
3.435
10498.674
5318.501
1.377
27.397
2.020
27.052
11.249
3.684
—
7.357
8.050
PF Tc (ms) Te (ms)
4.013
4
2
2.578
0
0
2
5
3
5
2
2
4.559
329.743
64.482
141.829
17.083
8.998
Tc / T (%) Ovh (%) Opt
T (ms)
11.370
10.629
>10 hrs
64.70
75.74
—
141.35 O1,O2
209.47 O1,O2
>300000 O5
>400000 O3
O4
307.79 O1, O2
1143.13 O1, O2
3119.69 O1, O2
459.99 O1, O2
125.60 O1, O2
245.69 O1, O2
70575.27
PF
4
1
0
0
0
1
4
2
4
1
1
T (ms)
4.566
3.086
13566.122
399614.244
5513.712