# md5(unix)原理分析
|
##### 译文声明
本文是翻译文章，文章来源：phithon
原文地址：
译文仅供参考，具体内容表达以及含义原文为准。
看到t00ls上有同学在问这个问题:
[https://www.t00ls.net/thread-31914-1-1.html](https://www.t00ls.net/thread-31914-1-1.html)
里面有说到通过注入拿到网站的密码,加密方式是md5(unix),破解不了于是很尴尬。我们通过他文中给出的hash入手,来分析一下unix(md5)的原理与破解方法。
目标hash:
    $1$Dx1bONFt$Hsrx102ek28d03B5dqgAv/
实际上,我们要先明白一点。无论是何种哈希,说到底是摘要算法,是将任意长度的任意字节对应成固定长度的一段字节。
这段摘要字节因为包含很多不易显示的字符,所以人们通常使用hex或者base64等类似方法将它转换成可见字符显示出来。
所以这个hash也一样,我们用$将hash切割成三部分:”1“、”Dx1bONFt“、”Hsrx102ek28d03B5dqgAv/“
,给这三部分分别起个名字:magic、salt、password。
其中password实际上就是哈希完成后的字符串,再通过类似base64的算法转换成了可见字符串。
**Magic**
magic是表明这一段哈希是通过什么算法得到的,对应关系如下:
    $0 = DES
    $1 = MD5
    $2a(2y) = Blowfish
    $5 = SHA-256
    $6 = SHA-512
目标hash的magic==1,说明是md5加密。
当然内部实现不会是单纯单次md5,但总体来说是以MD5为hash函数,通过多次计算得到的最终值。
类似,这个是sha-256的哈希(明文 admin):
    $5$DnnkiE71Scb5$lHT.SBfgQKoiTi8cF.cbuxlZ9ZBVFG8CGDxh8CpgPe8
这个是sha-512的哈希(明文 admin):
    $6$I7iRFjXdW9rZA2$/4WJ35KCqtrfc3BFmoargIm8WiKhY5cSBuJIb7ItjO0I7Dj99ZVIPZ3fgKvxaDgZqrWNWwL5aSVwQUkd8D7LT0
对比发现,magic值确实不同。除了通过magic来判断密文的加密方式以外,通过哈希的长度也可以判断。比如原哈希Hsrx102ek28d03B5dqgAv/,我们可以用以下代码来看看其长度:
    php -r "echo strlen(base64_decode('Hsrx102ek28d03B5dqgAv/'));"
[](https://dn-leavesongs.qbox.me/content/uploadfile/201511/20491446888251.jpg)
可见结果为16,正是md5的摘要的长度(hex后长度为32),这样也能佐证这个哈希的加密方式为md5。
**Salt**
salt是此次哈希的盐值,长度是8位,超过8的后面的位数将不影响哈希的结果。
在正常情况下,进行加密的时候,这个盐值是随机字符串,所以说其实这个哈希:
    $1$Dx1bONFt$Hsrx102ek28d03B5dqgAv/
我们可以类比为
    1ecaf1d74d9e936f1dd3707976a800bf:Dx1bONFt
这个值1ecaf1d74d9e936f1dd3707976a800bf也不是我胡编的,是将原hash用base64解码后再转换为hex得到的。
而实际上原hash并不是base64编码,只是用类似base64编码的一种算法。这里用base64举例,具体算法后面会讲到
所以很多同学一看到$1$xxx$abcdef这样的密码就懵逼了,其实完全不必,你可就把他理解为abcdef:xxx。
**Password**
password就是加密完成后得到的hash。
我这里给出其php实现的具体算法:
    namespace Md5Crypt;
    class Md5Crypt 
    {
        static public $itoa64 = './0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz'; 
                // [a-zA-Z0-9./]
        static protected function to64($v, $n) 
        {
            $itoa64 = self::$itoa64;
            $ret = '';
            while(--$n >= 0) {
                $ret .= $itoa64{$v & 0x3f};   
                $v = $v >> 6;
            }
            return $ret;
        }
        static public function apache($pw, $salt = NULL) 
        {
            $Magic = '$apr1$';
            return self::unix($pw, $salt, $Magic);
        }
        static public function unix($pw, $salt = NULL, $Magic = '$1$') 
        {
            $itoa64 = self::$itoa64;
            if($salt !== NULL) {
                // Take care of the magic string if present
                if(substr($salt, 0, strlen($Magic)) == $Magic) {
                    $salt = substr($salt, strlen($Magic), strlen($salt));
                }
                // Salt can have up to 8 characters
                $parts = explode('$', $salt, 1);
                $salt = substr($parts[0], 0, 8);
            } else {
                $salt = '';
                mt_srand((double)(microtime() * 10000000));
                while(strlen($salt)  0; $pl -= 16) {
               $ctx .= substr($final, 0, ($pl > 16) ? 16 : $pl);
            }
            // Now the 'weird' xform
            for($i = strlen($pw); $i; $i >>= 1) {   
                if($i & 1) {                // This comes from the original version,
                    $ctx .= pack("C", 0);   // where a memset() is done to $final
                } else {                    // before this loop
                    $ctx .= $pw{0};
                }
            }
            $final = pack('H*', md5($ctx)); // The following is supposed to make
                                            // things run slower
            for($i = 0; $i  12]);
在渗透过程中,我们也可以直接用工具生成这类密码。比如htpasswd工具,以下是生成密码的一些方法:
[  
](https://dn-leavesongs.qbox.me/content/uploadfile/201511/bfd11446888299.jpg)