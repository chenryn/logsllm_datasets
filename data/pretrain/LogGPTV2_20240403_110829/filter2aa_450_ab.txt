Fetaures
Method
Result
MacDonell
et al.
7
351
148
C++
lexical &
layout
Case-based 
reasoning
     88.0%
Frantzeskou et al.
8
107
145
Java
lexical &
layout
Nearest
neighbor
    100.0%
Elenbogen and 
Seliya
12
83
100
C++
lexical &
layout
C4.5 decision tree
      74.7%
Shevertalov et. al.
20
N/A
N/A
Java
lexical &
layout
Genetic 
algorithm
         80%
Frantzeskou et al.
30
333
172
Java
lexical &
layout
Nearest 
neighbor
      96.9%
Ding and
Samadzadeh
46
225
N/A
Java
lexical &
layout
Nearest 
neighbor
      75.2%
Ours
35
315
68
C++
lexical &
layout &
syntactic
Random
forest
100.0%
Ours
250
2,250
77
C++
  98.0%
Ours
1,600
14,400
70
C++
  93.6%
August 10, 2018
57
Comparison to related work
Related
Work
Author
Size
Instances
Average
LOC
Language
Fetaures
Method
Result
Frantzeskou 
et al.
30
333
172
Java
lexical &
layout
Nearest 
neighbor
96.9%
Ding and
Samadzadeh
46
225
N/A
Java
lexical &
layout
Nearest 
neighbor
75.2%
Ours 35
315
68
C++
lexical &
layout &
syntactic
Random 
forest
100.0%
Ours 250
2,250
77
C++
  98.0%
Ours 1,600
14,400
70
C++
  93.6%
August 10, 2018
58
Comparison to related work
Related
Work
Author
Size
Instance
s
Average
LOC
Language
Fetaures
Method
Result
Frantzeskou 
et al.
30
333
172
Java
lexical &
layout
Nearest 
neighbor
96.9%
Ding and
Samadzadeh
46
225
N/A
Java
lexical &
layout
Nearest 
neighbor
75.2%
Ours 35
315
68
C++
lexical &
layout &
syntactic
Random 
forest
100.0%
Ours 250
2,250
77
C++
  98.0%
Ours 1,600
14,400
70
C++
93.6%
August 10, 2018
59
Comparison to related work
Related
Work
Author
Size
Instances
Average
LOC
Language
Fetaures
Method
Result
MacDonell
et al.
7
351
148
C++
lexical &
layout
Case-based 
reasoning
  88.0%
Frantzeskou et al.
8
107
145
Java
lexical &
layout
Nearest
neighbor
 100.0%
Elenbogen and 
Seliya
12
83
100
C++
lexical &
layout
C4.5 decision 
tree
  74.7%
Shevertalov et. al.
20
N/A
N/A
Java
lexical &
layout
Genetic 
algorithm
     80%
Frantzeskou et al.
30
333
172
Java
lexical &
layout
Nearest 
neighbor
  96.9%
Ding and
Samadzadeh
46
225
N/A
Java
lexical &
layout
Nearest 
neighbor
  55.2%
Ours
35
315
68
C++
lexical &
layout &
syntactic
Random
forest
100.0%
Ours
250
2,250
77
C++
Random
forest
  98.0%
August 10, 2018
60
Publications
Usenix 2015:
Aylin Caliskan-Islam, Richard Harang, Andrew Liu, Arvind Narayanan, Clare Voss, Fabian Yamaguchi, and 
Rachel Greenstadt. 
De-anonymizing Programmers via Code Stylometry. 24th Usenix Security Symposium (Usenix 2015).
Random Forest Classifier
 A           B            C           D
De-anonymizing Programmers
Fuzzy Parsing
Identifying 
Programmer Fingerprints
Language 
Processing
Supervised 
Machine Learning
Privacy and Security 
Implications
Source Code
August 10, 2018
61
Publications  &   Code on github 
NDSS 2018:
Aylin Caliskan, Fabian Yamaguchi, Edwin Dauber, Richard Harang, Konrad Rieck, Rachel Greenstadt, and Arvind Narayanan.
When Coding Style Survives Compilation: De-anonymizing Programmers from Executable Binaries (NDSS 2018).
Usenix 2015:
Aylin Caliskan-Islam, Richard Harang, Andrew Liu, Arvind Narayanan, Clare Voss, Fabian Yamaguchi, and Rachel 
Greenstadt. 
De-anonymizing Programmers via Code Stylometry. 24th Usenix Security Symposium (Usenix 2015).
62
Source code stylometry
•Everyone learns coding on an individual basis, as a result 
code in a unique way,
       which makes de-anonymization possible.
•Software engineering insights 
• programmer style changes while implementing sophisticated functionality 
• differences in coding styles of programmers with different skill sets
•Identify malicious programmers.
August 10, 2018
63
Case 2: Obfuscation
•Who is the programmer of this obfuscated source code?
•Code is obfuscated to become unrecognizable.
•Our authorship attribution technique is impervious to common 
off-the-shelf source code obfuscators.
August 10, 2018
64
Case 3: Copyright investigation
•Copyleft programs are free but licensed
•Did this programmer take a copyleft code and 
distribute it commercially?
• Jacobsen vs Katzer (Java Model Railroad Interface)
•Two-class machine learning classification task
• Class 1: the copyleft code
• Class 2: the copyright code
August 10, 2018
65
Case 3: Copyright investigation
30 pairs of authors each with 9 program files Classification Accuracy
Two-class task 100%
Jacobsen
Katzer
August 10, 2018
66
Case 5: Coding style throughout years
•Is programming style consistent?
•If yes, we can use code from different years for 
authorship attribution.
2014
2012
…
…
August 10, 2018
67
Case 5: Coding style throughout years
•Is programming style consistent?
•If yes, we can use code from different years for 
authorship attribution.
2014
2012
…
…
August 10, 2018
68
Case 5: Coding style throughout years
•Coding style is preserved up to some degree throughout years.
Train on 25 authors from 2012
to identify the author of 
25 files in 2014
train
test
96% accuracy
August 10, 2018
69
Case 5: Coding style throughout years
•98% accuracy, train and test in 2014
•96% accuracy, train on 2012, test on 2014
Train on 25 authors from 2012
to identify the author of 
25 files in 2014
train
test
96% accuracy
August 10, 2018
70
• Insights about programmers and coding style:
• Implementing harder functionality makes programming style more unique
Case 6: Difficult tasks & advanced coders
Same set of 62 authors
Classification 
Accuracy
Solving 7 easy problems
98%
Solving 7 more difficult problems
99%
August 10, 2018
71
• Insights about programmers and coding style.
• Better programmers have more distinct coding style
Two sets of 62 authors
Classification 
Accuracy
Less advanced programmers
97%
More advanced programmers
98%
Case 6: Difficult tasks & advanced coders
August 10, 2018
72
Feature set: Using ‘only’ the Python equivalents of syntactic 
features
 Application
Programmers
Instances
Result
Python programmer de-anonymization
229
2,061
  53.9%
Top-5 relaxed classification
229
2,061
  75.7%
Python programmer de-anonymization
23
   207
  87.9%
Top-5 relaxed classification
23
   207
  99.5%
Case 7: Generalizing the approach - python
August 10, 2018
73
Comparison to related work
preprocessing
extract features
majority vote
 A            B             C             D
random forest
fuzzy AST parser
600 contestants – C++
de-anonymized programmers
August 10, 2018
74
Comparison to related work
August 10, 2018
Related Work
Number of 
Programmers
Number of 
Training Samples
Classifier
Accuracy
Rosenblum et al.
20
8-16
SVM
77%
This work
20
8
SVM
90%
This work
20
8
Random forest
99%
Rosenblum et al.
191
8-16
SVM
51%
This work
191
8
Random forest
92%
This work
600
8
Random forest
83%
75
Amount of Training Data Required for 
De-anonymizing 100 Programmers
August 10, 2018
76
Reducing Suspect Set Size: 
Top-n Classification
August 10, 2018
77
Open world: 
Classification thresholds for verification
August 10, 2018
78
Reconstructing original features
August 10, 2018
• Original vs predicted features
• Average cos similarity: 0.81
• Original vs decompiled features
• Average cos similarity: 0.35
This suggests that original 
features are transformed but 
not entirely lost in compilation.
79
Ongoing work - DARPA
•Malware author attribution
•Dataset with ground truth
•Automated malware analysis
August 10, 2018
80
Future work
•De-anonymizing collaborative code
• Group fingerprint vs individual fingerprint
•Anonymizing source code
• Obfuscation is not designed for anonymization
August 10, 2018
81
Underground forums
•Micro-text
•L33t sp34k
•Multi-lingual
•Products
•Doppelgänger Finder
• Carders
No technical difference between 
security-enhancing and privacy-infringing
August 10, 2018
82