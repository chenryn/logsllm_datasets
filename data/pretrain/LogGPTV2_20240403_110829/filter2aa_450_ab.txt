### Comparison to Related Work

| Author                     | Size  | Instances | Average LOC | Language | Features               | Method                  | Result   |
|----------------------------|-------|-----------|-------------|----------|------------------------|-------------------------|----------|
| MacDonell et al.           | 7     | 351       | 148         | C++      | Lexical & Layout        | Case-based Reasoning    | 88.0%    |
| Frantzeskou et al.         | 8     | 107       | 145         | Java     | Lexical & Layout        | Nearest Neighbor        | 100.0%   |
| Elenbogen and Seliya        | 12    | 83        | 100         | C++      | Lexical & Layout        | C4.5 Decision Tree      | 74.7%    |
| Shevertalov et al.         | 20    | N/A       | N/A         | Java     | Lexical & Layout        | Genetic Algorithm       | 80.0%    |
| Frantzeskou et al.         | 30    | 333       | 172         | Java     | Lexical & Layout        | Nearest Neighbor        | 96.9%    |
| Ding and Samadzadeh        | 46    | 225       | N/A         | Java     | Lexical & Layout        | Nearest Neighbor        | 75.2%    |
| Our Approach (1)           | 35    | 315       | 68          | C++      | Lexical, Layout, Syntactic | Random Forest          | 100.0%   |
| Our Approach (2)           | 250   | 2,250     | 77          | C++      | Lexical, Layout, Syntactic | Random Forest          | 98.0%    |
| Our Approach (3)           | 1,600 | 14,400    | 70          | C++      | Lexical, Layout, Syntactic | Random Forest          | 93.6%    |

### Publications
- **Usenix 2015:**
  - Aylin Caliskan-Islam, Richard Harang, Andrew Liu, Arvind Narayanan, Clare Voss, Fabian Yamaguchi, and Rachel Greenstadt.
  - "De-anonymizing Programmers via Code Stylometry." 24th Usenix Security Symposium (Usenix 2015).

- **NDSS 2018:**
  - Aylin Caliskan, Fabian Yamaguchi, Edwin Dauber, Richard Harang, Konrad Rieck, Rachel Greenstadt, and Arvind Narayanan.
  - "When Coding Style Survives Compilation: De-anonymizing Programmers from Executable Binaries." NDSS 2018.

### Source Code Stylometry
- **Key Insights:**
  - Each programmer learns coding in a unique way, leading to distinct coding styles.
  - Coding style can change when implementing complex functionality.
  - Different skill levels lead to different coding styles.
  - Identifying malicious programmers through their coding style is possible.

### Case Studies
#### Case 2: Obfuscation
- **Question:** Who is the programmer of this obfuscated source code?
- **Details:** Code is obfuscated to become unrecognizable.
- **Result:** Our authorship attribution technique is robust against common off-the-shelf source code obfuscators.

#### Case 3: Copyright Investigation
- **Context:** Copyleft programs are free but licensed.
- **Question:** Did this programmer take copyleft code and distribute it commercially?
- **Example:** Jacobsen vs. Katzer (Java Model Railroad Interface)
- **Method:** Two-class machine learning classification task.
  - Class 1: The copyleft code
  - Class 2: The copyrighted code

#### Case 5: Coding Style Over Years
- **Question:** Is programming style consistent over time?
- **If Yes:** We can use code from different years for authorship attribution.
- **Experiment:**
  - Train on 25 authors from 2012 to identify the author of 25 files in 2014.
  - **Results:**
    - 98% accuracy (train and test in 2014)
    - 96% accuracy (train on 2012, test on 2014)

#### Case 6: Difficult Tasks & Advanced Coders
- **Insights:**
  - Implementing harder functionality makes programming style more unique.
  - Better programmers have more distinct coding styles.
- **Experiments:**
  - Solving 7 easy problems: 98% accuracy
  - Solving 7 difficult problems: 99% accuracy
  - Less advanced programmers: 97% accuracy
  - More advanced programmers: 98% accuracy

#### Case 7: Generalizing the Approach - Python
- **Feature Set:** Using only the Python equivalents of syntactic features.
- **Experiments:**
  - Python programmer de-anonymization:
    - 229 programmers, 2,061 instances: 53.9% accuracy
    - Top-5 relaxed classification: 75.7% accuracy
  - Smaller dataset:
    - 23 programmers, 207 instances: 87.9% accuracy
    - Top-5 relaxed classification: 99.5% accuracy

### Comparison to Related Work
- **Preprocessing:**
  - Extract features
  - Majority vote
- **Techniques:**
  - Fuzzy AST parser
  - Random forest
- **Application:**
  - 600 contestants – C++
  - De-anonymized programmers

### Training Data Requirements
- **Number of Programmers:** 100
- **Training Samples:** 8
- **Classifier:**
  - SVM: 77% (Rosenblum et al.)
  - SVM: 90% (This work)
  - Random Forest: 99% (This work)
  - SVM: 51% (Rosenblum et al., 191 programmers)
  - Random Forest: 92% (This work, 191 programmers)
  - Random Forest: 83% (This work, 600 programmers)

### Reducing Suspect Set Size
- **Top-n Classification:**
  - Open world: Classification thresholds for verification

### Reconstructing Original Features
- **Comparison:**
  - Original vs. predicted features: Average cosine similarity: 0.81
  - Original vs. decompiled features: Average cosine similarity: 0.35
- **Conclusion:** Original features are transformed but not entirely lost in compilation.

### Ongoing Work - DARPA
- **Malware Author Attribution:**
  - Dataset with ground truth
  - Automated malware analysis

### Future Work
- **De-anonymizing Collaborative Code:**
  - Group fingerprint vs. individual fingerprint
- **Anonymizing Source Code:**
  - Obfuscation is not designed for anonymization

### Underground Forums
- **Micro-text, L33t sp34k, Multi-lingual:**
  - Products: Doppelgänger Finder, Carders
- **Note:** No technical difference between security-enhancing and privacy-infringing techniques.

**Date: August 10, 2018**