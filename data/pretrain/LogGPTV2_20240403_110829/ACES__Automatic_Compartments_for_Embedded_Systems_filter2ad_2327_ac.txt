memory read-only and enabling execution of the default
code region, as will be explained in Section 5.3. Stack
protection and allowing execution of the code vertex in
the current compartment each requires one MPU region.
This leaves four MPU regions for ACES to use to enable
access to data and peripheral regions. Every code vertex
USENIX Association
27th USENIX Security Symposium    71
with an out-degree greater than four iteratively merges
data or peripheral vertices until its out-degree is less than
or equal to four. After lowering, the ﬁnal region graph is
exported as a JSON ﬁle, which the program instrumen-
tation uses to create the compartments.
5.3 Program Instrumentation
Program instrumentation creates a compartmentalized
binary, using the ﬁnal region graph and the LLVM bit-
code generated during program analysis.
It is imple-
mented by the addition of a custom pass to LLVM and
modiﬁcations to LLVM’s ARM backend. To instrument
the program, all compartment transitions must be iden-
tiﬁed, each memory region must be placed so the MPU
can enforce permissions on it, and the MPU conﬁgura-
tion for each region must be added.
Using the ﬁnal region graph, any control edge with a
source and destination in different compartments is iden-
tiﬁed as a compartment transition. We refer to the func-
tion calls that cause a transition as compartment entries,
and their corresponding returns as compartment exits.
Each compartment transition is instrumented by modi-
ﬁcation to LLVM’s ARM backend. It associates meta-
data to each compartment entry and replaces the call in-
struction (i.e., BL or BLX on ARM) with an SVC in-
struction. The return instructions of any function that
may be called by a compartment entry are replaced with
an SVC instruction. The SVC instruction invokes the
compartment switching routine, which changes compart-
ments and then, depending on the type of SVC executed,
completes the call or return.
The compartment pseudo code for the compartment
switching routine is shown in Algorithm 1, and is called
by the SVC handler.
It switches compartments by re-
conﬁguring the MPU, and uses a compartment stack to
keep track of the compartment entries and exits. This
stack is never writable by the compartment, protecting it
from unauthorized writes. The stack also enables deter-
mining if a compartment entry needs to change compart-
ments or just return to the existing compartment. This
is needed because functions with an instrumented return
can be called from within and outside of a compartment.
When called from within a compartment there will be no
entry on the compartment stack. Thus, if the return ad-
dress does not match the top of the compartment stack,
the compartment switching routine exits without modify-
ing the MPU conﬁguration. This also results in the com-
partment exit routine executing more frequently than the
compartment entry routine, as seen in Figure 5.
While, LLVM can instrument source code it compiles,
it cannot instrument pre-compiled libraries. Ideally, all
source code would be available, but as a fallback, ACES
places all pre-compiled libraries and any functions they
call in an always executable code region. When called,
this code executes in the context of the callee. Thus, the
data writable by the library code is restricted to that of
the calling compartment. This is advantageous from a
security perspective, as it constrains the libraries’ access
to data/peripherals based on the calling context. We envi-
sion in the future libraries could be distributed as LLVM
bitcode instead of machine code, enabling ACES to ana-
lyze and instrument the code to create compartments.
After instrumenting the binary, ACES lays out the pro-
gram in memory to enable the MPU to enforce permis-
sions. The constraints of the MPU in our target platform
require that each MPU region be a power of two in size
and the starting address must be a multiple of its size.
This introduces a circular dependency between determin-
ing the size of a region and its layout in memory. ACES
breaks this dependency by using two linker scripts se-
quentially. The ﬁrst ignores the MPU restrictions and
lays out the regions contiguously. The resulting binary
is used to determine the size of all the regions. After
the sizes are known, the second linker script expands
each region to a power of two and lays out the regions
from largest to smallest, starting at the highest address in
Flash/RAM and working down. This arrangement mini-
mizes the memory lost to fragmentation, while enabling
each region to be located at a multiple of its size. ACES
then generates the correct MPU conﬁguration for each
region and uses the second linker script, to re-compile the
program. The MPU conﬁguration is embedded into read-
only memory (Flash), protecting it against attacks that
modify the stored conﬁguration in an attempt to change
access controls. The output of the second linker script is
a compartmented binary, ready for execution.
5.4 Micro-emulator for Stack Protection
The micro-emulator enables protection of writes on the
stack, as described earlier in Section 4.6. The MPU
restrictions prohibits perfect alignment of the MPU re-
gion to the allocated stack when entering a compartment.
Thus, some portions of the allocated stack may remain
accessible in the entered compartment. To minimize this,
we disable as many sub-regions of the MPU as possible,
while still allowing the current compartment to write to
all the unallocated portions of the stack. With less restric-
tive MPUs—e.g., the ARMv8-M MPU only requires re-
gions be multiples of 32 bytes in size and aligned on a 32
byte boundary—this stack protection becomes stronger.
In addition, the micro-emulator handles all writes where
our static analysis under approximates and enables ac-
cess to areas smaller than the MPU’s minimum region
size.
The micro-emulator can be implemented by modify-
ing the memory permissions to allow access to the fault-
72    27th USENIX Security Symposium
USENIX Association
⊲ Compartment Entry
⊲ Target Addr. in LR
else
Fault
Get MPU Conﬁg from Metadata for Target
Lookup SVC Number from PC
if SVC 100 then
Look up Metadata from PC
if Target in Metadata then
end if
Set MPU Conﬁguration
Fixup Ret. Addr. to Skip Over Metadata
Push Stack MPU Conﬁg to Comp. Stack
Push Fixed Up Ret. Addr. to Comp. Stack
Adjust Stack MPU region
Fixup Stack to Exit into Target
Exit SVC
Algorithm 1 Compartment Switching Procedure
1: procedure CHANGE COMPARTMENTS
2:
3:
4:
5:
6:
7:
8:
9:
10:
11:
12:
13:
14:
15:
16:
17:
18:
19:
20:
21:
22:
23:
24:
25:
26:
27:
28:
29:
30: end procedure
Get Return MPU Conﬁg using LR
Set MPU Conﬁg
Pop Comp. Stack
Pop Stack MPU Conﬁg
Restore previous Stack MPU Conﬁg
end if
Fixup Stack to Exit to Ret. Addr.
Exit SVC
if Ret. Addr is on Top of Comp. Stack then
else if SVC 101 then
⊲ Compartment Entry
else
end if
Call Original SVC
ing location and re-executing the store instruction, or em-
ulating the store instruction in software. Re-executing
requires a way to restore the correct permissions imme-
diately after the store instruction executes. Conceptually,
instruction rewriting, copying the instruction to RAM, or
using the debugger to set a breakpoint can all achieve
this. However, code is in Flash preventing rewriting in-
structions; copying the instruction to RAM requires mak-
ing RAM writable and executable, thus exposing the sys-
tem to code injection attacks. This leaves the debugger.
However, on ARMv7-M devices, it can only be used by
the internal software or an external debugger, not both.
Using the debugger for our purpose prevents a developer
from debugging the application. Therefore, we choose to
emulate the write instructions in software.
The micro-emulator is called by the MemManage
Fault handler, and emulates all the instructions that write
to memory on the ARMv7-M architecture. As the em-
ulator executes within an exception, it can access all
memory. The handler emulates the instruction by per-
forming all the effects of the instruction (i.e., writing to
memory and updating registers) in its original context.
When the handler exits, the program continues execut-
ing as if the faulting instruction executed correctly. The
emulator can be compiled in record or enforce mode. In
record mode (used during training for benign runs), the
addresses of all emulated writes are recorded on a per
compartment basis. This allows the generation of the
white-list for the allowable accesses. The white-list con-
tains start and stop address for every addresses accessible
through the emulator for each compartment. When gen-
erating the list, any recorded access to a global variable
is expanded to allow access to all addresses. For exam-
ple, if a single address of a buffer is accessed, the white
list will contain the start and stop address for the entire
buffer. The current emulator policy therefore grants ac-
cess at variable granularity. This means the largest pos-
sible size of all variables does not have to be exercised
during the recording runs. However, as peripherals often
have memory mapped conﬁguration register (e.g., setting
clock sources) and other registers for performing is func-
tion (e.g., sending data). The white-list only allows ac-
cess to peripheral addresses that were explicitly accessed
during recording. Thus, a compartment could conﬁgure
the peripheral, while another uses it.
6 Evaluation
To evaluate the effectiveness of ACES we compare the
Na¨ıve Filename, Optimized Filename, and Peripheral
compartmentalization policies. Our goal is not to iden-
tify the best policy, but to enable a developer to compare
and contrast the security and performance characteristics
of the different policies. We start with a case study to il-
lustrate how the different compartmentalization policies
impact an attacker. We then provide a set of static met-
rics to compare policies, and ﬁnish by presenting the pol-
icy’s runtime and memory overheads. We also compare
the ACES’ policies to Mbed µVisor, the current state-of-
the-art in protecting bare-metal applications.
For each policy, ﬁve representative IoT applications
are used. They demonstrate the use of different peripher-
als (LCD Display, Serial port, Ethernet, and SD card) and
processing steps that are typically found in IoT systems
(compute based on peripheral input, security functions,
data sent through peripheral to communicate). PinLock
represents a smart lock. It reads a pin number over a se-
rial port, hashes it, compares it to a known hash, and if
the comparison matches, sends a signal to an IO pin (akin
to unlocking a digital lock). FatFS-uSD implements
a FAT ﬁle system on an SD card. TCP-Echo imple-
ments a TCP echo server over Ethernet. LCD-Display
reads a series of bitmaps from an SD card and displays
them on the LCD. Animate displays multiple bitmaps
from an SD card on the LCD, using multiple layers of
the LCD to create the effect of animation. All except
PinLock are provided with the development boards and
written by STMicroelectronics. We create four binaries
for each application, a baseline without any security en-
hancement, and one for each policy. PinLock executes
on the STM32F4Discovery [49] development board and
the others execute on the STM32F479I-Eval [48] devel-
opment board.
USENIX Association
27th USENIX Security Symposium    73
6.1 PinLock Case Studies
To illustrate ACES’ protections we use PinLock and
examine ways an attacker could unlock the lock with-
out entering the correct pin. There are three ways an
attacker could open the lock using a memory corrup-
tion vulnerability. First, overwriting the global variable
which stores the correct pin. Second, directly writing to
the memory mapped GPIO controlling the lock. Third,
bypassing the checking code with a control-ﬂow hijack
attack and executing the unlock functionality. We as-
sume a write-what-where vulnerability in the function
HAL UART Receive IT that can be used to perform
any of these attacks. This function receives characters
from the UART and copies them into a buffer, and is de-
ﬁned in the vendor provided Hardware Abstraction Li-
braries (HAL).
Memory Corruption: We ﬁrst examine how ACES im-
pacts the attackers ability to overwrite the stored pin. For
an attacker to overwrite the stored pin, the vulnerable
function needs to be in a compartment that has access
to the pin. This occurs when either the global variable is
in one of the compartments’ data regions or its white-
In our example, the target value is stored in the
list.
In the Na¨ıve Filename and Op-
global variable key.
timized Filename policies the only global variable ac-
cessible to HAL UART Receive IT’s compartment is
a UART Handle, and thus the attacker cannot overwrite
key. With the peripheral policy key is in a data region
accessible by HAL UART Receive IT’s compartment.
Thus, key can be directly overwritten. Directly writing
the GPIO registers is similar to overwriting a global vari-
able and requires write access to the GPIO-A peripheral.
Which is not accessible to HAL UART Receive IT’s
compartment under any of the policies.
Control-Flow Hijacking: Finally, the attacker can un-
lock the lock by hijacking control-ﬂow. We consider an
attack to be successful if any part of the unlock call chain,
shown in Listing 1, is executable in the same compart-
ment as HAL UART Receive IT. If this occurs, the
attacker can redirect execution to unlock the lock ille-
gally. We refer to this type of control-ﬂow attack as di-
rect, as the unlock call chain can be directly executed.
For our policies, this is only possible with the Peripheral
policy. This occurs because HAL UART Receive IT
and main are in the same compartment. For the other
policies HAL UART Receive IT’s compartment does
not include any part of the unlock call chain. A second
type of attack—a confused deputy attack—may be pos-
sible if there is a valid compartment switch in the vul-
nerable function’s compartment to a point in the unlock
call chain. This occurs if a function in the same com-
partment as the vulnerable function makes a call into the
unlock call chain. This again only occurs with the Pe-
Listing 1: PinLock’s unlock call chain and ﬁlename of
each call
main // main.c
unlock // main.c
BSP LED On // stm32f401 discovery.c
HAL GPIO WritePin // stm32f4xx hal gpio.c
Table 1:
Summary of ACES’ protection on Pin-
Lock for memory corruption vulnerability in function
HAL UART Receive IT. (X) – prevented, ✗– not pre-
vented
Policy
Overwrite
Control Hijack
Global
GPIO
Direct
Deputy
Na¨ıve Filename
Optimized Filename
Peripheral
X
X
✗
X
X
X
X
X
✗
X
X
✗
ripheral policy, as main contains a compartment switch
into unlock’s compartment. A summary of the attacks
and the policies protections against them is given in Ta-
ble 1.
6.2 Static Compartment Metrics
The effectiveness of the formed compartments depends
on the applied policy. We examine several metrics of
compartments that can be used to compare compartmen-
talization policies. Table 2 shows these metrics for the
three compartmentalization policies. All of the met-
rics are calculated statically using the ﬁnal region graph,
PDG, and the binary produced by ACES.
Number of Instructions and Functions: The ﬁrst set
of metrics in Table 2 are the number of instructions
and the number of functions used in the ACES binaries,
with percent increase over baseline shown in parenthe-
ses. To recap, the added code implements: the compart-
ment switching routine, instruction emulation, and pro-
gram instrumentation to support compartment switching.
They are part of the trusted code base of the program and
thus represent an increased risk to the system that needs
to be offset by the gains it makes in security. ACES’
runtime support library is the same for all applications
and accounts for 1,698 of the instructions added. The
remaining instructions are added to initiate compartment
switches. As many compartments are formed, we ﬁnd
in all cases the number of instructions accessible at any
given point in execution is less than the baseline. This
means that ACES is always reducing the code that is
available to execute.
Reduction in Privileged Instructions: Compartmental-
ization enables a great reduction in the number of in-
structions that require execution in privileged mode, Ta-
ble 2, shown as “% Priv.”. This is because it enables
74    27th USENIX Security Symposium
USENIX Association
Table 2: Static Compartment Evaluation Metrics. Percent increase over baseline in parentheses for ACES columns.
Application Policy
ACES
#Regions
Instr. Per Comp Med. Degree
Exposure
#ROP