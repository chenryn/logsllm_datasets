# Performance and Evaluation of MPInspector on Property Violation Detection

## Table 5: Performance of MPInspector on Property Violation Detection
| Time (hh:mm) | Formal Code | Translation | Time (ms) | Total Time (h:mm) |
|--------------|-------------|-------------|-----------|-------------------|
| 02:29        | 0.04        | 125         | 06:32     | 0.06              |
| 04:37        | 0.06        | 1627        | 02:29     | 0.67              |
| 05:31        | 0.67        | 1917        | 04:37     | 0.04              |
| 09:38        | 0.04        |             | 05:31     | 0.03              |
| 07:46        | 0.03        |             | 09:38     | 0.08              |
| 04:53        | 0.08        |             | 07:46     | 0.03              |
| 00:23        | 0.03        |             | 04:53     | 0.03              |
| 03:13        | 0.03        |             | 00:23     | 1.26              |
| 08:02        | 1.26        |             | 03:13     | 1.18              |
| 03:47        | 1.18        |             | 08:02     | 0.03              |
| 04:07        | 0.03        |             | 03:47     | 0.03              |
| 05:11        | 0.03        |             | 04:07     | 0.03              |

## Protocol Precision and False Positive Rate

| Platform          | Protocol    | Version | Precision | False Positive Rate |
|-------------------|-------------|---------|-----------|---------------------|
| EMQ X             | MQTT        | v3.1.1  | 1.00      | 0.00                |
| Tuya Smart        | MQTT        | v3.1.1  | 1.00      | 0.00                |
| Azure IoT         | MQTT        | v3.1.1  | 1.00      | 0.00                |
| Bosch IoT         | MQTT        | v3.1.1  | 1.00      | 0.00                |
| AWS IoT           | MQTT        | v3.1.1  | 1.00      | 0.00                |
| Aliyun Cloud      | MQTT        | v3.1.1  | 1.00      | 0.00                |
| Google IoT Core   | MQTT        | v3.1.1  | 1.00      | 0.00                |
|                   | MQTT        | v5.0    | 1.00      | 0.00                |
|                   | CoAP        |         | 1.00      | 0.00                |
| Aliyun Cloud      | CoAP        |         | 1.00      | 0.00                |
| ActiveMQ          | AMQP1.0     |         | 1.00      | 0.00                |
| Average           |             |         | 1.00      | 0.00                |

### Interaction Logic Extraction
For interaction logic extraction, we evaluated four Message Passing (MP) implementations: Mosquitto, EMQ X, ActiveMQ, and Tuya Smart. The first three were chosen because they are open-source, allowing our experts to refer to their code for ground truth. Although Tuya Smart is not open-source, with the assistance of their security team, we could manually review and confirm the results. We were unable to validate the other six platforms due to lack of access to their source code. The validation showed that the state machines learned by MPInspector are consistent with these four implementations.

### Model Translation
We successfully translated all MP state machines into Tamarin code and validated that the codes can run successfully.

### Property Violation Detection
Identifying all security property violations in an MP implementation is challenging. Therefore, we engaged 45 experts to manually confirm each identified property violation by MPInspector. Specifically, the experts acted as attackers to perform Proof of Concept (PoC) attacks under the threat models specified in Section 3. For secrecy properties, they attempted to retrieve the values of the parameters specified in the target secrecy properties by reversing the traffic, application, and device. If the parameter value could be retrieved, the corresponding secrecy property was considered violated. For authentication properties, they tried to complete the interactions by forging the messages in the target authentication properties. If the interactions could be completed, the target authentication properties were considered violated. The average precision of property violation detection across the ten MP implementations was 100%.

### Performance Overhead
We evaluated the overhead of each component in MPInspector and the end-to-end system. The overall overhead of MP implementations is determined by the time consumption of the interaction logic extraction module, as other modules' overhead is less than 2152 ms. The average overhead of the end-to-end system is approximately 4.5 hours. Given that interaction logic extraction is a one-time task, the overhead of MPInspector is acceptable.

## Discussions

### Lessons Learned
Based on our evaluation, we conclude that existing popular MPs do not meet security requirements primarily for the following reasons:

1. **Gap between Implementations and Specifications**: Many real-world MP implementations do not fully match the standard specifications, which may be too complex for developers to follow. This leads to conflicting implementations. For example, the MQTT on Bosch IoT Hub allows two clients with the same ClientID to connect to the broker, while the AMQP on ActiveMQ retains the connection state of a client even when the client is offline. These implementations violate their specifications and can be vulnerable.

2. **Gap between Constrained Resources and Security Requirements**: In the resource-constrained IoT context, developers often cut down some security functions. For instance, Google IoT Core does not support server-side authentication, and the updated version of MQTT on Tuya Smart does not support certificate-based authentication but uses a vulnerable PSK algorithm instead. These incomplete security mechanisms are due to the challenges in managing credentials for numerous devices and the inability of resource-constrained devices to support large certificate files.

3. **Gap between MP Security Design and Adversarial Environments**: Most developers do not carefully consider adversarial environments in MP design. First, adversarial device-sharing cases are not considered, leading to potential client identity hijacking. Second, the access control of participants is improper. For example, the request/response mechanism introduced by MQTT V5.0 does not limit a clientâ€™s authority on the response topic, which may cause malicious message injection.

### Suggestions
Based on our security analysis, we make the following suggestions for manufacturers:
1. **Secure Communications**: Ensure message integrity and confidentiality. Use SSL/TLS with careful configurations, and additional message encryption is highly recommended.
2. **Strict Authentication Mechanisms**: Both the device and server should authenticate the initial connection and every subsequent message. Use timestamps or message sequences to avoid replay attacks.
3. **Dynamic Credential Management**: Clients' credentials should be dynamically granted or revoked from the device. Currently, most MP implementations hard-code the device credentials into SDKs, making updates difficult.
4. **Fine-Grained Access Control**: Implement fine-grained resource access control. Protect the identity of a client and her resources carefully.

### Limitations and Future Work
A limitation of MPInspector is that it only infers the interaction logic and parameter-level semantics of MP implementations. Future work could explore fine-grained testing and more flexible model learning strategies to capture more detailed information. For example, bit-wise mutation of specific parameters in MP messages can help detect if the implementation has appropriately checked the input messages. Additionally, applying NLP techniques to analyze protocol specifications could extract meta properties more efficiently. Studying SaaS applications might yield different results compared to studying real devices, as IoT vendors may configure SaaS applications and introduce additional security mechanisms.

## Related Work

### State Machine Learning
Several works focus on automatically extracting state machines from protocol implementations. While effective under white-box settings, they are less helpful for MP implementations, as many are not open-source. MPInspector, in contrast, does not require source code. Model learning has also been applied to analyze TLS [29] and TLS hostname verification [51].

### Formal Verification of Protocols
Formal verification tools like ProVerif [24] and Tamarin [17] have proven valuable in assessing the security of protocols such as TLS 1.3 [23, 28], LTE [34], and 5G AKA [22, 27]. Our framework focuses on the security analysis of protocol implementations, extending the idea of combining model learning and model checking in a more automated way for MP implementations.

### Security Studies on IoT Protocols
Researchers have studied the security of IoT communication protocols like BLE, ZigBee, and Z-Wave [12, 50]. However, little work has been done on the security of IoT MPs such as MQTT, AMQP, and CoAP. Previous work [16] revealed that attackers can exploit MQTT by connecting to the server without authentication, and [47, 53] confirmed this in real-world scenarios. [35] performed security evaluations on IoT devices using a "shared devices attack model," and [48] presented HomeSnitch to identify device behavior in smart homes. Andrea et al. [49] developed MQTTSA to detect configuration flaws in MQTT deployments based on source code. The closest work to ours is [36], which performs a manual security evaluation on MQTT and identifies several design vulnerabilities. MPInspector is an automatic approach, covering more MPs and revealing four new attacks.

## Conclusion
To systematically understand the security of MPs implemented on IoT platforms, we present MPInspector, an automatic and systematic framework to recover MP implementations and reveal gaps between protocol implementations and desired security properties. MPInspector achieves automated and systematic security analysis by combining model learning and formal analysis. We applied MPInspector to ten implementations of three popular MPs on nine leading commercial IoT platforms, identifying 252 property violations and eleven attacks. We also provide insights into MP implementation flaws and discuss mitigation and future work. To facilitate future IoT security research, we have open-sourced MPInspector at [52].

## Acknowledgments
We appreciate our shepherds Omar Chowdhury and Adwait Nadkarni, and all anonymous reviewers for their valuable comments. We also thank Chenyang Lyu, Yuwei Li, Tianyu Du, Changjiang Li, Yuan Chen, Hong Liang, and Han Bao for proofreading this paper. This work was partly supported by NSFC under No. U1936215, 61772466, and U1836202, the Zhejiang Provincial Natural Science Foundation for Distinguished Young Scholars under No. LR19F020003, the Fundamental Research Funds for the Central Universities (Zhejiang University NGICS Platform), the State Key Laboratory of Information Security (Institute of Information Engineering, Chinese Academy of Sciences, Beijing 100093) (2020-MS-12), the Zhejiang Provincial Natural Science Foundation under No. LQ21F020010, and the Ant Financial Research Funding.

## References
[References listed here]

---

This revised text aims to improve clarity, coherence, and professionalism, making it easier to read and understand.