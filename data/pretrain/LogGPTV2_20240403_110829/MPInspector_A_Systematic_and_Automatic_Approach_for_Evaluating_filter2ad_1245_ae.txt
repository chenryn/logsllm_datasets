02:29
04:37
05:31
09:38
07:46
04:53
00:23
03:13
08:02
03:47
04:07
05:11
Formal code
Translation
Time (ms)
Total
Time
(h:mm)
0.04
0.06
0.67
0.04
0.03
0.08
0.03
0.03
1.26
1.18
125
1627
1917
06:32
02:29
04:37
05:31
09:38
07:46
04:53
00:23
03:13
08:02
03:47
04:07
05:11
Table 5: Performance of MPInspector on property violation detection.
EMQ X
Tuya Smart Mosquitto
Azure IoT
Bosch IoT
AWS IoT
Protocol
Precision
False Positive rate
Google IoT
Core
MQTT
v3.1.1
1.00
0.00
Core
MQTT
v3.1.1
1.00
0.00
Hub
MQTT
v3.1.1
1.00
0.00
Hub
MQTT
v3.1.1
1.00
0.00
Aliyun
Cloud
MQTT
v3.1.1
1.00
0.00
MQTT
v3.1.1
1.00
0.00
MQTT
v5.0
1.00
0.00
CoAP
1.00
0.00
Aliyun
Cloud
CoAP
1.00
0.00
ActiveMQ
Average
AMQP1.0
1.00
0.00
/
1.00
0.00
sentences. For more details on precision of message semantics
extraction, please refer to Table 4.
As for interaction logic extraction, we choose four MP im-
plementations for the evaluation, including Mosquitto, EMQ
X, ActiveMQ, and Tuya Smart. The ﬁrst three are chosen
because they are open-source, thus our experts can refer to
their code for the ground truth. Although Tuya Smart is not
open-source, with the help of their security team, we can
manually review and conﬁrm the result of Tuya Smart. We
cannot validate the other six platforms as we do not have ac-
cess to their source code. The validation shows that the state
machines learned by MPInspector are consistent with these
four implementations. As for model translation, we success-
fully translate all MP state machines into Tamarin code and
validate that the codes can successfully run.
Evaluation on property violation detection. Since it is dif-
ﬁcult to identify all the security property violations of an MP
implementation in practice, we also resort to the 45 experts to
manually conﬁrm each of the identiﬁed property violations by
MPInspector. Therefore, we only report precision. Specif-
ically, the experts act as attackers to perform PoC attacks
under the threat models speciﬁed in Section 3. For secrecy
properties, they try their best to retrieve the values of the
parameters speciﬁed in the target secrecy properties by re-
versing the trafﬁc, application and device. If the parameter
value can be retrieved, we consider the corresponding secrecy
property is violated. As for authentication properties, they
try to complete the interactions by forging the messages in
the target authentication properties. If the interactions can
be completed by them, we consider the target authentication
properties are violated. As a result, the average precision of
property violation detection on the ten MP implementations
is 100%. For more details on the property violation detection,
please refer to Table 5.
Performance overhead. We evaluate the overhead of each
component in MPInspector and the end-to-end system. The
overall overhead of MP implementations is determinated by
the time consumption of the interaction logic extraction mod-
ule, as other modules’ overhead is less than 2152 ms. The
average overhead of the end-to-end system is ~4.5 hours. Con-
sidering the interaction logic extraction is a one-shot task, the
overhead of MPInspector is acceptable. For more details on
precision of performance overhead, please refer to Table 4.
6 Discussions
6.1 Lessons
Based on our evaluation, we conclude that existing popular
MPs do not meet the security requirements mainly for the
following three reasons.
Gap between implementations and speciﬁcations. Many
real-world MP implementations do not completely match the
standard speciﬁcation, which on the other hand might be too
complex for developers to follow. Developers usually have
their own understanding about MPs, which leads to some con-
ﬂicting implementations. For example, the MQTT on Bosch
IoT Hub allows two clients with the same ClientID to be con-
nected to the broker, while the AMQP on ActiveMQ keeps the
connection state of a client even when the client is ofﬂine.The
above implementations all violate their speciﬁcations and can
be vulnerable.
USENIX Association
30th USENIX Security Symposium    4217
Gap between constraint resources and security require-
ments. Under the resource-constrained IoT context, devel-
opers usually cut down some security functions. For exam-
ple, Google IoT Core does not support authentication on the
server-side, and the updated version of MQTT on Tuya Smart
does not support authentication based on certiﬁcations but
leverages a vulnerable PSK algorithm instead. These incom-
plete security mechanisms are due to that the credential man-
agement of numerous devices is challenging and resource-
constrained devices cannot support big certiﬁcate ﬁles.
Gap between the MP security design and adversarial en-
vironments. In terms of the MP design, we ﬁnd that most
developers do not carefully consider the adversarial environ-
ments. First, the adversarial device-sharing cases are not con-
sidered. The devices’ credentials in some MP implementa-
tions are not updated, which may lead to client identity hijack-
ing. Second, the access control of participants is improper.
For instance, the request/response mechanism introduced by
MQTT V5.0 does not limit a client’s authority on the response
topic, which may cause malicious message injection.
Suggestions. With the observations from the security analysis,
we make the following suggestions for manufacturers. First,
manufacturers should guarantee secure communications. The
message integrity and conﬁdentiality should be carefully pro-
tected. MP implementations should use SSL/TLS with careful
conﬁgurations, and additional message encryption is highly
recommended. Second, manufacturers need to adopt strict
authentication mechanisms. The device and server should
not only authenticate the initial connection but also authenti-
cate the messages sent to the agents in every phase. Besides,
the timestamp or message sequences should be applied to
avoid replay attacks. Third, clients’ credentials should be dy-
namically granted to the device or revoked from the device.
Currently, most MP implementations have hard-coded the
device credential into the SDKs, which makes it hard for up-
dating the credentials. Last but not least, the client and server
should have ﬁne-grained resource access control. In particu-
lar, we suggest that the identity of a client and her resource
should be carefully protected.
6.2 Limitations and Future Work
A limitation of MPInspector is that we only infer the inter-
action logic and parameter-level semantics of the MP imple-
mentations. An interesting future work is to explore the ﬁne-
grained testing and more ﬂexible model learning strategies to
catch more ﬁne-grained information of MP implementations.
To illustrate, a bit-wise mutation of a speciﬁc parameter in
MP messages can help detect if the implementation has ap-
propriately checked the input messages. In addition, it will
also be more efﬁcient to apply NLP techniques to analyze the
protocol speciﬁcations to extract the meta properties. Also,
it is worth mentioning that studying SaaS appliactions might
get different results comparing to studying real devices as
IoT vendors may conﬁgure the SaaS appliactions and intro-
duce some security mechanisms to accomplish the interaction
between clients and the server.
7 Related Work
State machine learning. A few literature [40] works on au-
tomatically extracting state machines from protocol imple-
mentations. While these works are effective under the white
box setting where the protocol’s source code is available, they
are not very helpful for MP implementations as most of them
are not open-source. In comparison, MPInspector does not
use the source code. Model learning has also been applied to
analyze TLS in [29]. A similar approach is also used in TLS
hostname veriﬁcation [51].
Formal veriﬁcation of protocols. In the meanwhile, num-
bers of veriﬁcation tools are developed such as ProVerif [24]
and Tamarin [17]. Those tools with formal veriﬁcation have
been proved valuable in assessing the security of protocols,
such as TLS 1.3 [23, 28], LTE [34] and 5G AKA [22, 27].
By contrast, our framework focuses on the security analysis
on protocol implementations. The idea of combining model
learning and model checking was applied in the analysis of
TCP and SSH protocols [32, 33]. Comparing to these works,
we extend this idea in a more automatic way and come up
with the ﬁrst framework for the security analysis of MP im-
plementations.
Security studies on IoT protocols. Researchers have stud-
ied the security of IoT communication protocols such as BLE,
ZigBee, and Z-Wave [12, 50]. However, little work has been
done to understand the security of IoT MPs, such as MQTT,
AMQP, and CoAP. There are only a few ad-hoc attacks re-
ported. Previous work [16] reveals that attackers can exploit
MQTT by connecting the server without authentication and
[47, 53] conﬁrmed the attack in real world. [35] performed
security evaluation on IoT devices’ interaction applying the
"shared devices attack model". [48] presented HomeSnitch to
identify a device’s behavior in smart home. In addition, An-
drea et al. [49] constructed a tool called MQTTSA to detect
the conﬁguration ﬂaw in MQTT deployments based on the
source code. The closest to our work is [36], which performs
a manual security evaluation on MQTT and identiﬁes several
design vulnerabilities. We compare MPInspector with [36]
in detail in Section 5.3.3. MPInspector is an automatic ap-
proach, covers more MPs and reveals four more new attacks.
8 Conclusion
To systematically understand the security of MPs imple-
mented on IoT platforms, we present MPInspector, an auto-
matic and systematic framework to recover MP implementa-
tions and reveal the gap between protocol implementations
and the desired security properties. MPInspector achieves
4218    30th USENIX Security Symposium
USENIX Association
automated and systematic security analysis by combining
model learning and formal analysis. We apply MPInspector
to ten implementations of three popular MPs on nine leading
commercial IoT platforms, and identify 252 property viola-
tions and eleven attacks. We also present the understanding
of the MP implementation ﬂaws and discuss the mitigation
and future work. To facilitate future IoT security research, we
open source MPInspector at [52].
Acknowledgments
We sincerely appreciate our shepherds Omar Chowdhury and
Adwait Nadkarni, and all the anonymous reviewers for their
valuable comments to improve our paper. We also thank
Chenyang Lyu, Yuwei Li, Tianyu Du, Changjiang Li, Yuan
Chen, Hong Liang and Han Bao for proofreading this paper.
This work was partly supported by NSFC under No.
U1936215, 61772466, and U1836202, the Zhejiang Provincial
Natural Science Foundation for Distinguished Young Scholars
under No. LR19F020003, the Fundamental Research Funds
for the Central Universities (Zhejiang University NGICS Plat-
form), the State Key Laboratory of Information Security (In-
stitute of Information Engineering, Chinese Academy of Sci-
ences, Beijing 100093) (2020-MS-12), the Zhejiang Provin-
cial Natural Science Foundation under No. LQ21F020010,
and the Ant Financial Research Funding.
References
[1] The Constrained Application Protocol (CoAP). https:
//tools.ietf.org/html/rfc7252s.
[2] ActiveMQ. https://activemq.apache.org/.
[3] Aliyun Cloud. https://iot.aliyun.com.
[4] AMQP Version 1.0. https://www.amqp.org/resou
rces/specifications.
[5] AWS IoT Core. https://aws.amazon.com/iot/.
[6] Azure IoT Hub.
https://azure.microsoft.com/
services/iot-hub/.
[7] Bosch IoT Hub. https://developer.bosch-iot-s
uite.com.
[8] Competitive Landscape: IoT Platform Vendors. https:
//www.gartner.com/en/documents/3983934/co
mpetitive-landscape-iot-platform-vendors.
Accessed May 22, 2020.
[10] EMQ X. https://github.com/emqx/emqx-coap.
[11] Google IoT Core. https://cloud.google.com/sol
utions/iot/.
[12] Honey, I’m home!!- Hacking Z-Wave Home Automa-
tion Systems. https://www.blackhat.com/us-13/
archives.html#Fouladi.
[13] IoT Cloud Platform Landscape. https://www.post
scapes.com/internet-of-things-platforms/.
[14] JSON Web Tokens(JWT).
rg/html/rfc7519.
https://tools.ietf.o
[15] Mosquitto. https://mosquitto.org/.
[16] Taking Over The World Through Mqtt Aftermath.
https://www.blackhat.com/docs/us-17/thursd
ay/us-17-Lundgren-Taking-Over-The-World-T
hrough-Mqtt-Aftermath.pdf.
[17] The Tamarin Manual. http://tamarin-prover.gi
thub.io/manual/.
[18] Tuya Smart. https://en.tuya.com/.
[19] Why Should You Build Your Own IoT Platform.
https://medium.com/tomorrow-plus-plus/wh
y-should-you-build-your-own-iot-platform-d
ff51578c0c.
[20] A. Al-Fuqaha, M. Guizani, M. Mohammadi, M. Aled-
hari, and M. Ayyash. Internet of things: A survey on
enabling technologies, protocols, and applications. IEEE
Commun. Surveys. Tuts., 17(4):2347–2376, 2015.
[21] D. Angluin. Learning regular sets from queries and
counterexamples. Inform. and Comput., 75(2):87–106,
1987.
[22] D. Basin, J. Dreier, L. Hirschi, S. Radomirovic, R. Sasse,
and V. Stettler. A formal analysis of 5G authentication.
In CCS, pages 1383–1396, 2018.
[23] K. Bhargavan, B. Blanchet, and N. Kobeissi. Veriﬁed
models and reference implementations for the TLS 1.3
standard candidate. In IEEE S&P, pages 483–502. IEEE,
2017.
[24] B. Blanchet et al. An efﬁcient cryptographic protocol
In CSFW, volume 1,
veriﬁer based on prolog rules.
pages 82–96. Citeseer, 2001.
[9] eBay’s 2017 Shopping Report Shows Strong IoT
https://www.androidheadlines.com
Growth.
/2018/01/ebays-2017-shopping-report-shows
-strong-iot-growth.html.
[25] Z. B. Celik, L. Babun, A. K. Sikder, H. Aksu, G. Tan,
P. McDaniel, and A. S. Uluagac. Sensitive information
tracking in commodity iot. In USENIX Security, pages
1687–1704, 2018.
USENIX Association
30th USENIX Security Symposium    4219
[26] T. S. Chow. Testing software design modeled by ﬁnite-
state machines. 1995.
[27] C. Cremers and M. Dehnel-Wild. Component-based
formal analysis of 5G-AKA: Channel assumptions and
session confusion. In NDSS, 2020.
[28] C. Cremers, M. Horvat, J. Hoyland, S. Scott, and
T. van der Merwe. A comprehensive symbolic anal-
ysis of TLS 1.3. In CCS, pages 1773–1788, 2017.
[29] J. De Ruiter and E. Poll. Protocol State Fuzzing of TLS
Implementations. In USENIX Security, pages 193–206,
2015.
[30] R. Dey, S. Sultana, A. Razi, and P. J. Wisniewski. Ex-
ploring smart home device use by airbnb hosts. In Ex-
tended Abstracts of CHI Conference on Human Factors
in Computing Systems, pages 1–8, 2020.
[31] D. Dolev and A. Yao. On the security of public key
protocols. IEEE Transactions on information theory,