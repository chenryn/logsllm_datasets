# A Log Mining Approach to Failure Analysis of Enterprise Telephony Systems

**Authors:**
- Chinghway Lim
- Navjot Singh
- Shalini Yajnik

**Conference:**
International Conference on Dependable Systems & Networks, Anchorage, Alaska, June 24-27, 2008

**Affiliations:**
1. Department of Statistics, University of California, Berkeley, CA 94720
2. Avaya Labs, 233 Mt. Airy Rd., Basking Ridge, NJ 07920

**Contact:**
- lim@stat.berkeley.edu
- {singh, shalini}@avaya.com

## Abstract
Log monitoring techniques for characterizing system and user behavior have gained significant popularity. Common applications include syslog mining for detecting and predicting system failures, web log mining to characterize web usage patterns, and error/debug log analysis for anomaly detection. In this paper, we discuss our experiences with applying log mining techniques to large enterprise telephony systems. Our goal is to detect and, in some cases, predict system anomalies. We describe the challenges encountered in analyzing such logs and propose solutions. The key differentiators of our approach are the use of individual message frequencies to characterize system behavior and the ability to incorporate domain-specific knowledge through user feedback. The techniques we propose are generalizable and can be packaged into automated tools for log analysis.

## 1. Introduction
Large, complex telephony applications, such as enterprise Voice-over-IP (VoIP) systems, call centers, and contact centers, require high reliability and availability to prevent downtime, which can lead to business and revenue loss, and in some cases, even loss of life. These systems are designed with high availability in mind, but occasional failures due to bugs, misconfigurations, or operator errors still occur. During downtime, system administrators and service support staff often manually analyze system trace and debug logs to identify the cause of the failure. This process is time-consuming and inefficient, especially for large, multi-threaded systems where each module writes its own debug and trace messages to a log file.

System logs (both debug and trace logs) provide a detailed view of the system state and can help detect and predict anomalous behavior. Research has focused on using log data to improve system reliability, including web log analysis for targeted advertising, syslog and transaction log mining for failure detection, and log visualization for system state determination. Early work involved statistical modeling of errors and failure prediction, while more recent approaches include frequent pattern and sequential pattern mining to detect common event patterns before failures.

Despite the wealth of information in system logs, they remain underutilized due to their unstructured nature. Most previous log analysis methods rely on predefined textual patterns, which may not be present in trace/debug logs generated by developers for testing and debugging. Our goal is to use data mining and statistical analysis techniques to detect and predict failures in large enterprise telephony systems, ultimately automating the skills of experienced system administrators and service support personnel.

## 2. Overview of Enterprise Telephony System
Avaya is a leading vendor of enterprise voice communication equipment and applications. An enterprise telephony system (Figure 1) consists of several components, including the Communication Manager (CM), gateways, and IP-capable endpoints. The CM implements most of the telephony features, such as phone authentication, registration, call routing, signaling, and initiation/termination. In large deployments, a single CM can support hundreds of thousands of IP phones and handle peak busy hour calls.

From a software perspective, the CM is a complex system with millions of lines of code, comprising over 50 processes that handle various computing and communication tasks. Each process writes trace and debug messages to a shared CM log file. The log entries follow a specific format: Date:Time:Sequence:ProcessName(PID):Priority:[Payload]. The payload contains unstructured trace and debug messages.

### 2.1 Log Collection
To understand the failure behavior of CM deployments, we collected debug/trace logs from live systems. Due to time and bandwidth constraints, the log size was limited to about four hours, with approximately three hours of pre-failure data. We retrieved 714 log files from 460 live CMs spanning 24 different releases, each containing a failure that caused a system restart. Additionally, we extracted log data for 108 days from a single system with no prior knowledge of failures.

## 3. Analysis Goals
Our study aimed to determine whether useful information could be extracted from CM debug/trace logs. We had three main goals:

1. **Signature of a Log:** Determine the signature of a log file under normal operating conditions. The signature is defined by the type and frequency of messages and their distribution over time.
2. **Categorizing Failures:** Automatically derive the characteristic footprint of each failure from the logs to aid in troubleshooting.
3. **Predicting Failures:** Use the logs to predict and preempt failures by identifying sequences of events that lead to system crashes.

Analyzing log data is complex due to several factors:
- **Corrupted or Lost Messages:** Logs can be corrupted or lost, especially under heavy load or failure conditions.
- **Large Data Volume:** The volume of log data can be massive, requiring efficient data reduction techniques.
- **Domain-Specific Content:** Log content is highly domain-specific, requiring detailed knowledge of the application to determine if a behavior is anomalous.

## 4. Log Preprocessing
In the CM application, multiple processes and threads write to the same log file, leading to partially written or corrupted messages. The first preprocessing step was to clean the log file by removing corrupted messages and unprintable characters. We identified the semantic information in the process name and payload field, defining the "Effective Message" as ProcessName:[Payload]. To determine the log signature, we extracted unique effective messages from all log files, resulting in about 2.5 million unique messages out of 11.5 million total messages. Reducing the unique message space is crucial for computational efficiency and effective analysis.

## 5. Data Mining and Statistical Analysis
We applied data mining and statistical analysis techniques to the preprocessed log data. For logs with known failure markers, we analyzed the signature and identified patterns leading to failures. For logs with no known failure markers, we used these techniques to predict potential failures based on observed patterns.

## 6. Conclusion
Our study demonstrates the effectiveness of log mining techniques in detecting and predicting failures in large enterprise telephony systems. By combining data mining and statistical analysis, we can automate the skills of experienced system administrators and service support personnel, making log analysis more efficient and reliable.

---

This optimized version provides a clearer and more professional structure, ensuring that the text is coherent and easy to follow.