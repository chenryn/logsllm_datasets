31
31
31
31
31
31
61
61
61
61
123
61
61
123
123
61
61
121
–
–
|U|
|O|
|C|
–
–
–
–
–
–
–
–
–
15.2M
15.2M
14.7M
14.5M
14.6M
14.5M
14.5M
322K
139M
17M 87.1M
116M
4.9M 40.2M
68.4M
Mbps
pps
0.48
148M
709
2.38
155M 3.5K
168M 21.2K 14.28
169M 21.2K 14.28
168M 21.2K 14.28
167M 21.2K 14.28
169M 21.2K 14.28
170M 22.1K 21.03
99M 22.1K 14.85
7.55
7.55
7.58
7.58
30.3M 49.1M 78M 22.6K 15.19
44.3M 61.3M 97.1M 24.4K 16.39
44.0M 61.2M 85.1M 24.2K 16.26
44.2M 61.5M 94.7M 24.4K 16.39
44.5M 61.7M 96.4M 12.1K
8.15
44.1M 61.4M 80.7M 24.4K 16.37
31.7M 49.6M 92M 25.8K 17.35
37.8M 48.1M 71.3M 26.3K 20.70
11.2K
11.2K
11.3K
11.3K
119M
127M
Table 4: Summary of scans performed.
However, the most widely-used means of investigation is
through a whois lookup on oﬀending IP addresses, followed
by a direct email to the party listed therein. In the event a
complaint is received, our policy is to reply as quickly as pos-
sible with an explanation of our traﬃc, a link to the project
web-page, and an oﬀer to blacklist the network. Dynamic
blacklisting in IRLscanner is implemented through periodic
reading of a ﬂat ﬁle of blocked networks and simply removing
them from the BGP hash table. Under the assumption that
network administrators who complain will do so again later,
blacklisted networks are maintained across scans. However,
given that no analysis was provided in prior work [13], [17],
[43] to justify preemptively removing subnets or addresses,
our initial scan started with an empty blacklist.
The ﬁnal issue one must also be aware of is that signiﬁ-
cant care should be taken to avoid negatively impacting the
local network, where internal stateful ﬁrewalls and IDS are
particularly vulnerable (from the load perspective) to large
volumes of traﬃc destined to billions of unique destinations.
We have experienced a number of issues with department
and campus-wide IDS/ﬁrewall installations at our institu-
tion, which all had to be manually bypassed for this project
to proceed.
4. EXPERIMENTS
In this section, we test our design decisions by performing
several Internet-wide scans. We defer in-depth analysis of
the actual scan data to a later paper, instead focusing on
high-level observations and results.
4.1 Overview
As the goal of scanning is to produce the set of hosts oﬀer-
ing a given service, each targeted IP address must eventually
be classiﬁed into one of four categories. Deﬁne open set O to
contain all hosts that responded positively to a scan packet
(e.g., a SYN-ACK to a TCP SYN), closed set C to represent
IPs responding negatively using the same protocol (e.g., a
TCP RST to a SYN packet), unreachable set U to consist of
IPs that return ICMP unreachable or TTL expired errors,
and dead set D to designate hosts from which no reply was
received at all. Note that excluding bogus responses and
strange ﬁrewall/NAT behavior, O ∪ C ∪ U ∪ D = S and the
individual sets do not overlap.
Through development of IRLscanner and in the course of
other projects, we have performed 21 Internet-wide scans
since February 2008. To test a wide range of possibilities
and demonstrate the general feasibility of service discovery,
we targeted UDP, TCP, and ICMP protocols on both pop-
ular services (e.g., HTTP, DNS) and those often used for
nefarious purposes (e.g., SMTP, EPMAP). Table 4 summa-
rizes our scanning activity. We initially started slowly with
a 30-day scan duration from a single source IP to gauge the
feedback, then increased the sending rate over subsequent
scans until we achieved a duration of 24 hours, which is over
20 times faster than any documented scan [17]. The number
of source IPs m varied based on their availability in our sub-
net and speciﬁc goals of the measurement, generally ranging
from 31 to 123. In comparison, the highest IP diversity in
related work was m = 25 in [5], followed by m = 8 in [17].
4.2 UDP/ICMP Scans
We started with seven DNS scans due to an interest in
public recursive DNS servers. These scans produced between
14.5M and 15.2M responses in each run, which represents a
30% growth from the 10.5M found in [13] less than 9 months
prior. We discovered a stable set of 4.4M servers that re-
sponded to every DNS scan over a period of three months,
which indicates that the number of consistently available
hosts is far fewer than might be expected from the responses
to a single scan.
Of further interest is the reduction in found hosts from
15.2M to 14.7M when scan duration reduced to 24 hours
in DNS3. This suggests that faster scan durations produce
a lower cumulative response among the targets, which in
part may be attributed to the lower possibility of counting
the same host multiple times under diﬀerent DHCP’ed IPs.
To investigate whether previous scanning activity in some
immediate past inﬂuences the response rate in subsequent
scans, we probed DNS on four consecutive days in May 2008
(i.e., 96 hours of continuous scanning) and received roughly
116Year
Data Source
2000 Padhye [40]
2004 Medina [33]
2005 Veal [54]
2008
2010 HTTPOP T
Langley [27]
IPs
ECN
MSS
4.55K 1.15% 93.71%
84.4K 2.09%
475
–
–
–
–
TS
–
85%
76.4%
SACK
40.75%
67.79%
–
–
1.35M 1.07%
37.8M 2.32% 99.47% 74.77% 60.94% 83.08% 6.21%
–
WS
EOL
–
–
–
–
–
–
–
–
Table 5: Prevalence of TCP options in the Internet (dashes represent unreported values).
the same number of responses in each case, which indicates
that the Internet is memoryless (at least at our scan rates).
Our last UDP scan was on ECHO port 7, which simply
replies with a verbatim copy of the received packet and to
our knowledge has never been scanned in the literature. We
chose this port as a representative of a sensitive UDP service
largely because of its notoriety for broadcast ampliﬁcation
attacks [32]. Later in the paper, we deal with the huge
volume of complaints and speculation that ensued in the co-
operative intrusion-detection community, but note that even
though best practice is to disable this service, we neverthe-
less received replies from 321, 675 unique IP addresses.
Our lone ICMP scan was a simple echo request [17], [43]
that garnered 139M replies, representing a 20% gain over a
similar scan performed in June 2007 [17].
4.3 TCP Scans
Our experiments targeted TCP with 12 scans using three
target ports, two combinations of TCP ﬂags, and one set of
TCP options. TCP has not been scanned in the literature
with T less than three months [5] and has not included any
options or ﬂags other than SYN [5], [17], [42], [43].
We start by describing the performed scans in an increas-
ing order of their sensitivity. We initially scanned HTTP
with a duration more than 90 times shorter than the only
previous attempt [5], discovering 30.3M hosts in July 2008
and 44.5M in August 2009, the latter of which is a 140% in-
crease compared to 18.5M IPs found in 2006 [5]. The other
two services we targeted with SYN scans were SMTP, which
is frequently probed by spammers searching for open relays,
and EPMAP, which is heavily scanned for network recon-
naissance prior to attack [32], discovering 17M and 4.9M
hosts respectively. Given the large number of Windows hosts
in the Internet, the EPMAP result seems low, which suggests
that many ISPs ﬁlter SYN traﬃc on port 135.
To determine the feasibility of scanning with other types of
TCP packets, we performed three measurements with ACK
packets (i.e., SMTPA, EPMAPA, and HTTPAS), which can
be used not only to determine a host’s liveness (i.e., an
ACK normally elicits a RST from non-ﬁrewalled stacks),
but also to bypass stateless ﬁrewalls. Both SMTPA and
EPMAPA were executed concurrently with the correspond-
ing SYN scan (i.e., two packets were sent to each IP) in
order to allow us to detect and characterize ﬁrewalls. Ob-
serve in the table that SMTPA found 12M more hosts (i.e.,
116M total) than SMTPS whose |O| + |C| is only 104.1M.
Without ﬁrewalls, the two sets should be identical. Simi-
larly, EPMAPA elicited 23M more responses (i.e., 68M total)
compared to EPMAPS (i.e., 45.1M). The EPMAPA scan
also suggests that ﬁltering is heavily applied on port 135
not only for SYN packets, but for ACKs as well.
For HTTPAS, we scanned the entire BGP space with ACK
packets, then immediately followed the resulting RST re-
sponses with a SYN packet. We present our motivation and
the results from this approach in a later section.
4.4 TCP Options
Over the last decade there has been an interest in the
literature [27], [33], [40], [54] regarding the deployment of
various extensions to TCP (e.g., SACK, ECN) in network
stacks of both end-systems and intermediate network devices
(e.g., routers, NATs, ﬁrewalls). While our ﬁrst 20 scans did
not utilize any options, the last scan HTTPOP T not only
attempted to negotiate ECN [45], but also transmitted four
TCP options – MSS (maximum segment size), WS (win-
dow scaling), SACK (selective acknowledgments), and TS
(timestamps), which are normally echoed in the SYN-ACK
if the corresponding target supports it. The order of options
transmitted by the scanner followed that in Windows Server
2008 (i.e., MSS, NOP, WS, SACK, TS).
Observe in Table 4 that in July 2010 HTTPOP T yielded
only 37.8M responses, which represents a nearly 15% reduc-
tion from HTTP scans a year earlier. This does not align
well with the 30% annual growth rate during 2006-2009 and
suggests that option-heavy packets indeed produce a dra-
matically lower response rate in the Internet.2 While this
single scan is insuﬃcient to conclusively pinpoint which op-
tions are responsible for the dropped SYN packets, the most
likely culprit is ECN. A similar result was found in [33], [40],
where between 1 and 8% of the tested web servers were un-
able to accept ECN connections due to various protocol is-
sues in end-systems and interference from ECN-challenged
intermediate devices [33]. The larger percentage of ECN fail-
ures in our dataset is likely caused by the broader range of
sampled embedded stacks (e.g., printers, cameras, modems).
Our next task is to analyze the number of responsive hosts
that support each of the options. Prior work [27], [33], [40],
[54] has examined this problem on a smaller scale using tra-
ditional (i.e., non-embedded) web servers and found that
ECN support ranged from 1 to 2%, while each of SACK,
MSS, and TS was enabled in at least 40% of the hosts. Table
5 summarizes these ﬁndings and shows our results, including
two new ﬁelds – window scaling (WS) and end-of-options-list
(EOL). Excluding a few nonsensical replies, the percentage
of hosts that accept ECN still remains small (i.e., 2.32%),
having grown by only 1.3% over the last 10 years.
As shown in the next column of the table, MSS is now
included in almost all connections, up from 94% in 2000.
While in our earlier experiments the source port remained
constant for the duration of each scan, HTTPOP T randomly
varied the source port of each connection (using a separate 2-
byte LCG that skipped reserved ports), which was encoded
in the TCP timestamp of the outgoing SYN packet and later
checked against the destination port of the SYN-ACK. As
2Other reasons include increased deployment of ISP ﬁre-
walls, new OS patches that block port 80, and fewer hosts
on the Internet, none of which is historically probable.
117Device
Linux (2.4 or 2.6 kernel)
Windows XP/Server 2003
Windows Vista/7/Server 2008
Windows Server 2003 SP2
FreeBSD
%
Found
13.0M 32.9
6.3M 15.8
5.6M 14.0
8.9
3.5M
1.5M
3.8
Table 6: Top 5 devices.
the table shows, approximately 75% of the responsive IPs
returned the correct timestamp. Ignoring a handful of bogus
replies, the remaining 25% of the hosts did not support TS.
Next, SACK results suggest a 20% increase from 2000 and
a 6% decrease from 2004, though our numbers are again
aﬀected by the wider coverage of embedded devices than in
prior work. While WS is often used to enable high-speed
transfers in networks with large bandwidth-delay products,
a surprising 83% of hosts support it. Finally, over 6% of
Internet devices are compelled to use EOL, even though this
optional ﬁeld typically serves no practical purpose.
4.5 Remote OS Fingerprinting
While service discovery projects usually focus on enumer-
ating open set O, further information about the hosts them-
selves is often critical to the depth and usefulness of mea-
surement studies [5], [13]. With the goals of resource eﬃ-
ciency and maximal politeness at remote networks, in this
section we focus on determining the operating system of dis-
covered hosts in O, which could be used to estimate the
global impact of known security vulnerabilities [35], approx-
imate Internet-wide market share [37], or track hosts with
dynamic IP addresses [13]. The main diﬃculty in executing
such a study is that most existing tools [39], [57] not only trip
IDS alarms and crash older end-hosts with unusual combina-
tions of TCP/IP ﬂags, but also require substantial overhead
(e.g., 16 packets for Nmap) in Internet-wide use [50], [55].
It is thus not surprising that large-scale OS proﬁling has not
been attempted in the literature.
Instead of traditional ﬁngerprinting methods, we utilize a
single-packet technique called Snacktime [50], which exploits
OS-dependent features in SYN-ACKs such as the TCP win-
dow, IP time-to-live, and the sequence of RTOs (retransmis-
sion timeouts) of the SYN-ACK during TCP handshakes.
While initial results on accuracy were promising [50], [55],
Snacktime’s requirement that outgoing TCP RST packets
be dropped, long period needed to produce an answer (e.g.,
several minutes), and limited database (i.e., 25 signatures
last updated in 2003) has previously restricted its useful-
ness. Given that we must already send a TCP SYN packet
to every host in O, modifying the Snacktime technique for
use on an Internet-wide scale would result in no additional
sent packets to enumerate remote OSes.
To implement a scalable Snacktime, we take advantage
of our custom network driver to block outgoing TCP RST
packets in response to arriving SYN-ACKs. Since IRLscan-
ner already captures all incoming packets (including delayed
retransmissions), it is a perfect platform for massively par-
allelizing the Snacktime technique. After a scan completes,
we generate the RTOs of each target from the packet dump,
then run a custom implementation of the Snacktime match-
ing algorithm that gives preference to general classes of op-
erating system in the case of ambiguity and reduces the mi-
crosecond precision of RTOs to manage random queuing de-
Device Type
General purpose
Network device
Printer
Networked storage
Media
Other embedded
Total
%
Found
32.4M 81.8