# Summary of Scans Performed

|Scan ID|Responses (M)|Unique IPs (M)|
|---|---|---|
|31|15.2|14.7|
|31|15.2|14.5|
|31|15.2|14.6|
|31|15.2|14.5|
|31|15.2|14.5|
|31|15.2|14.5|
|61|14.5|14.5|
|61|14.5|14.5|
|61|12.3|14.5|
|61|12.3|14.5|
|61|12.3|14.5|
|61|12.3|14.5|
|61|12.3|14.5|
|61|12.3|14.5|
|61|12.3|14.5|
|61|12.3|14.5|
|61|12.3|14.5|
|61|12.3|14.5|
|61|12.3|14.5|
|61|12.3|14.5|

**Table 4: Summary of scans performed.**

## Investigation and Response to Offending IP Addresses

The most common method for investigating suspicious IP addresses is through a whois lookup, followed by direct email communication with the listed party. If a complaint is received, our policy is to respond promptly, explaining our traffic, providing a link to the project webpage, and offering to blacklist the network. Dynamic blacklisting in IRLscanner is achieved by periodically reading a flat file of blocked networks and removing them from the BGP hash table. Assuming that network administrators who complain will do so again, blacklisted networks are maintained across scans. However, since no prior work [13], [17], [43] provided analysis to justify preemptively removing subnets or addresses, our initial scan started with an empty blacklist.

### Network Impact Considerations
Significant care must be taken to avoid negatively impacting the local network, especially stateful firewalls and IDS, which are vulnerable to large volumes of traffic. We have encountered several issues with department and campus-wide IDS/firewall installations at our institution, all of which had to be manually bypassed for this project to proceed.

## Experiments

In this section, we test our design decisions by performing several Internet-wide scans. We defer in-depth analysis of the actual scan data to a later paper, focusing instead on high-level observations and results.

### Overview

The goal of scanning is to produce the set of hosts offering a given service. Each targeted IP address must be classified into one of four categories:
- **Open Set (O):** Hosts that responded positively (e.g., SYN-ACK to a TCP SYN).
- **Closed Set (C):** Hosts that responded negatively using the same protocol (e.g., TCP RST to a SYN packet).
- **Unreachable Set (U):** Hosts that return ICMP unreachable or TTL expired errors.
- **Dead Set (D):** Hosts from which no reply was received at all.

Excluding bogus responses and strange firewall/NAT behavior, \( O \cup C \cup U \cup D = S \) and the individual sets do not overlap.

Since February 2008, we have performed 21 Internet-wide scans. To test a wide range of possibilities and demonstrate the general feasibility of service discovery, we targeted UDP, TCP, and ICMP protocols on both popular services (e.g., HTTP, DNS) and those often used for nefarious purposes (e.g., SMTP, EPMAP). Table 4 summarizes our scanning activity. We initially started with a 30-day scan duration from a single source IP to gauge feedback, then increased the sending rate over subsequent scans until we achieved a duration of 24 hours, which is over 20 times faster than any documented scan [17]. The number of source IPs \( m \) varied based on their availability in our subnet and specific goals of the measurement, generally ranging from 31 to 123. In comparison, the highest IP diversity in related work was \( m = 25 \) in [5], followed by \( m = 8 \) in [17].

### UDP/ICMP Scans

We started with seven DNS scans due to an interest in public recursive DNS servers. These scans produced between 14.5M and 15.2M responses in each run, representing a 30% growth from the 10.5M found in [13] less than 9 months prior. We discovered a stable set of 4.4M servers that responded to every DNS scan over a period of three months, indicating that the number of consistently available hosts is far fewer than might be expected from the responses to a single scan.

Of further interest is the reduction in found hosts from 15.2M to 14.7M when scan duration reduced to 24 hours in DNS3. This suggests that faster scan durations produce a lower cumulative response among the targets, partly due to the lower possibility of counting the same host multiple times under different DHCP'ed IPs. To investigate whether previous scanning activity influences the response rate in subsequent scans, we probed DNS on four consecutive days in May 2008 (i.e., 96 hours of continuous scanning) and received roughly the same number of responses in each case, indicating that the Internet is memoryless (at least at our scan rates).

Our last UDP scan was on ECHO port 7, which simply replies with a verbatim copy of the received packet and has never been scanned in the literature. We chose this port as a representative of a sensitive UDP service largely because of its notoriety for broadcast amplification attacks [32]. Despite best practice being to disable this service, we received replies from 321,675 unique IP addresses.

Our lone ICMP scan was a simple echo request [17], [43] that garnered 139M replies, representing a 20% gain over a similar scan performed in June 2007 [17].

### TCP Scans

Our experiments targeted TCP with 12 scans using three target ports, two combinations of TCP flags, and one set of TCP options. TCP has not been scanned in the literature with T less than three months [5] and has not included any options or flags other than SYN [5], [17], [42], [43].

We start by describing the performed scans in increasing order of their sensitivity. We initially scanned HTTP with a duration more than 90 times shorter than the only previous attempt [5], discovering 30.3M hosts in July 2008 and 44.5M in August 2009, the latter of which is a 140% increase compared to 18.5M IPs found in 2006 [5]. The other two services we targeted with SYN scans were SMTP, which is frequently probed by spammers searching for open relays, and EPMAP, which is heavily scanned for network reconnaissance prior to attack [32], discovering 17M and 4.9M hosts respectively. Given the large number of Windows hosts in the Internet, the EPMAP result seems low, suggesting that many ISPs filter SYN traffic on port 135.

To determine the feasibility of scanning with other types of TCP packets, we performed three measurements with ACK packets (i.e., SMTPA, EPMAPA, and HTTPAS), which can be used not only to determine a host’s liveness but also to bypass stateless firewalls. Both SMTPA and EPMAPA were executed concurrently with the corresponding SYN scan to allow us to detect and characterize firewalls. Observe in the table that SMTPA found 12M more hosts (i.e., 116M total) than SMTPS whose \( |O| + |C| \) is only 104.1M. Without firewalls, the two sets should be identical. Similarly, EPMAPA elicited 23M more responses (i.e., 68M total) compared to EPMAPS (i.e., 45.1M). The EPMAPA scan also suggests that filtering is heavily applied on port 135 not only for SYN packets but for ACKs as well.

For HTTPAS, we scanned the entire BGP space with ACK packets, then immediately followed the resulting RST responses with a SYN packet. We present our motivation and the results from this approach in a later section.

### TCP Options

Over the last decade, there has been an interest in the deployment of various extensions to TCP (e.g., SACK, ECN) in network stacks of both end-systems and intermediate network devices (e.g., routers, NATs, firewalls). While our first 20 scans did not utilize any options, the last scan HTTPOP T not only attempted to negotiate ECN [45] but also transmitted four TCP options – MSS (maximum segment size), WS (window scaling), SACK (selective acknowledgments), and TS (timestamps), which are normally echoed in the SYN-ACK if the corresponding target supports it. The order of options transmitted by the scanner followed that in Windows Server 2008 (i.e., MSS, NOP, WS, SACK, TS).

Observe in Table 4 that in July 2010, HTTPOP T yielded only 37.8M responses, representing a nearly 15% reduction from HTTP scans a year earlier. This does not align well with the 30% annual growth rate during 2006-2009 and suggests that option-heavy packets indeed produce a dramatically lower response rate in the Internet. While this single scan is insufficient to conclusively pinpoint which options are responsible for the dropped SYN packets, the most likely culprit is ECN. A similar result was found in [33], [40], where between 1 and 8% of the tested web servers were unable to accept ECN connections due to various protocol issues in end-systems and interference from ECN-challenged intermediate devices [33]. The larger percentage of ECN failures in our dataset is likely caused by the broader range of sampled embedded stacks (e.g., printers, cameras, modems).

Our next task is to analyze the number of responsive hosts that support each of the options. Prior work [27], [33], [40], [54] has examined this problem on a smaller scale using traditional (i.e., non-embedded) web servers and found that ECN support ranged from 1 to 2%, while each of SACK, MSS, and TS was enabled in at least 40% of the hosts. Table 5 summarizes these findings and shows our results, including two new fields – window scaling (WS) and end-of-options-list (EOL). Excluding a few nonsensical replies, the percentage of hosts that accept ECN still remains small (i.e., 2.32%), having grown by only 1.3% over the last 10 years.

As shown in the next column of the table, MSS is now included in almost all connections, up from 94% in 2000. While in our earlier experiments the source port remained constant for the duration of each scan, HTTPOP T randomly varied the source port of each connection (using a separate 2-byte LCG that skipped reserved ports), which was encoded in the TCP timestamp of the outgoing SYN packet and later checked against the destination port of the SYN-ACK. As the table shows, approximately 75% of the responsive IPs returned the correct timestamp. Ignoring a handful of bogus replies, the remaining 25% of the hosts did not support TS.

Next, SACK results suggest a 20% increase from 2000 and a 6% decrease from 2004, though our numbers are again affected by the wider coverage of embedded devices than in prior work. While WS is often used to enable high-speed transfers in networks with large bandwidth-delay products, a surprising 83% of hosts support it. Finally, over 6% of Internet devices are compelled to use EOL, even though this optional field typically serves no practical purpose.

### Remote OS Fingerprinting

While service discovery projects usually focus on enumerating the open set \( O \), further information about the hosts themselves is often critical to the depth and usefulness of measurement studies [5], [13]. With the goals of resource efficiency and maximal politeness at remote networks, in this section, we focus on determining the operating system of discovered hosts in \( O \), which could be used to estimate the global impact of known security vulnerabilities [35], approximate Internet-wide market share [37], or track hosts with dynamic IP addresses [13]. The main difficulty in executing such a study is that most existing tools [39], [57] not only trip IDS alarms and crash older end-hosts with unusual combinations of TCP/IP flags but also require substantial overhead (e.g., 16 packets for Nmap) in Internet-wide use [50], [55].

Instead of traditional fingerprinting methods, we utilize a single-packet technique called Snacktime [50], which exploits OS-dependent features in SYN-ACKs such as the TCP window, IP time-to-live, and the sequence of RTOs (retransmission timeouts) of the SYN-ACK during TCP handshakes. While initial results on accuracy were promising [50], [55], Snacktime’s requirement that outgoing TCP RST packets be dropped, long period needed to produce an answer (e.g., several minutes), and limited database (i.e., 25 signatures last updated in 2003) has previously restricted its usefulness. Given that we must already send a TCP SYN packet to every host in \( O \), modifying the Snacktime technique for use on an Internet-wide scale would result in no additional sent packets to enumerate remote OSes.

To implement a scalable Snacktime, we take advantage of our custom network driver to block outgoing TCP RST packets in response to arriving SYN-ACKs. Since IRLscanner already captures all incoming packets (including delayed retransmissions), it is a perfect platform for massively parallelizing the Snacktime technique. After a scan completes, we generate the RTOs of each target from the packet dump, then run a custom implementation of the Snacktime matching algorithm that gives preference to general classes of operating systems in the case of ambiguity and reduces the microsecond precision of RTOs to manage random queuing delays.