Message:
IP:                             10.244.2.75
Replication Controllers:        simmemleak (1/1 replicas created)
Containers:
  simmemleak:
    Image:  saadali/simmemleak
    Limits:
      cpu:                      100m
      memory:                   50Mi
    State:                      Running
      Started:                  Tue, 07 Jul 2015 12:54:41 -0700
    Last Termination State:     Terminated
      Exit Code:                1
      Started:                  Fri, 07 Jul 2015 12:54:30 -0700
      Finished:                 Fri, 07 Jul 2015 12:54:33 -0700
    Ready:                      False
    Restart Count:              5
Conditions:
  Type      Status
  Ready     False
Events:
  FirstSeen                         LastSeen                         Count  From                              SubobjectPath                       Reason      Message
  Tue, 07 Jul 2015 12:53:51 -0700   Tue, 07 Jul 2015 12:53:51 -0700  1      {scheduler }                                                          scheduled   Successfully assigned simmemleak-hra99 to kubernetes-node-tf0f
  Tue, 07 Jul 2015 12:53:51 -0700   Tue, 07 Jul 2015 12:53:51 -0700  1      {kubelet kubernetes-node-tf0f}    implicitly required container POD   pulled      Pod container image "gcr.io/google_containers/pause:0.8.0" already present on machine
  Tue, 07 Jul 2015 12:53:51 -0700   Tue, 07 Jul 2015 12:53:51 -0700  1      {kubelet kubernetes-node-tf0f}    implicitly required container POD   created     Created with docker id 6a41280f516d
  Tue, 07 Jul 2015 12:53:51 -0700   Tue, 07 Jul 2015 12:53:51 -0700  1      {kubelet kubernetes-node-tf0f}    implicitly required container POD   started     Started with docker id 6a41280f516d
  Tue, 07 Jul 2015 12:53:51 -0700   Tue, 07 Jul 2015 12:53:51 -0700  1      {kubelet kubernetes-node-tf0f}    spec.containers{simmemleak}         created     Created with docker id 87348f12526a
```
在上述示例中， `Restart Count: 5` 表示Pod中的 `simmemleak` 容器已终止并重启了5次。
可使用 `kubectl get pod` 的`-o go-template=...` 选项来获取先前终止的Containers的状态：
```shell
[13:59:01] $ kubectl get pod -o go-template='{{range.status.containerStatuses}}{{"Container Name: "}}{{.name}}{{"\r\nLastState: "}}{{.lastState}}{{end}}'  simmemleak-hra99
Container Name: simmemleak
LastState: map[terminated:map[exitCode:137 reason:OOM Killed startedAt:2015-07-07T20:58:43Z finishedAt:2015-07-07T20:58:43Z containerID:docker://0e4095bba1feccdfe7ef9fb6ebffe972b4b14285d5acdec6f0d3ae8a22fad8b2]]
```
您可以看到容器由于 `reason:OOM Killed` 而终止，其中`OOM`代表Out Of Memory。
## Local ephemeral storage (alpha feature)（ephemeral-storage，本地临时存储（Alpha功能））
Kubernetes 1.8版本引入了一种新的资源，用于管理本地临时存储的ephemeral-storage。 在每个Kubernetes Node中，kubelet的根目录（默认 `/var/lib/kubelet` ）和日志目录（ `/var/log` ）存储在Node的根分区上。 此分区也可由Pod通过EmptyDir Volume、容器日志、镜像层以及容器可写层等进行共享和使用。
该分区是“短暂的”，应用程序不能对此分区的性能SLA（例如磁盘IOPS）有期望。 Local ephemeral storage管理仅适用于根分区；镜像层和可写层的可选分区超出了Local ephemeral storage的范围。
**注意：**如果使用可选的运行时分区，根分区将不会保存任何镜像层或可写层。
> 译者按：
>
> SLA：
>
> IOPS：
>
> 系统SLA和监控流程： 
### Requests and limits setting for local ephemeral storage（local ephemeral storage的request和limit设置）
Pod的每个容器可指定以下一个或多个：
- `spec.containers[].resources.limits.ephemeral-storage`
- `spec.containers[].resources.requests.ephemeral-storage`
`ephemeral-storage` 的request和limit以字节为单位。可使用整数或定点整数来表示内存，并使用如下后缀之一：E、P、T、G、M、K。也可使用：Ei，Pi，Ti ，Gi，Mi，Ki。 例如，以下代表大致相同的值：
```
128974848, 129e6, 129M, 123Mi
```
例如，以下Pod有两个容器。每个容器有一个2GiB的local ephemeral storage的request。每个容器的local ephemeral storage的limit是4GiB。因此，Pod有4GiB的local ephemeral storage的request，limit为8GiB。
```yaml
apiVersion: v1
kind: Pod
metadata:
  name: frontend
spec:
  containers:
  - name: db
    image: mysql
    resources:
      requests:
        ephemeral-storage: "2Gi"
      limits:
        ephemeral-storage: "4Gi"
  - name: wp
    image: wordpress
    resources:
      requests:
        ephemeral-storage: "2Gi"
      limits:
        ephemeral-storage: "4Gi"
```
### How Pods with ephemeral-storage requests are scheduled（如何调度设置了ephemeral-storage request的Pod）
当您创建一个Pod时，Kubernetes Scheduler将为Pod选择一个Node。每个Node具有能够为Pod提供的local ephemeral storage最大量值。（有关详细信息，请参见 [“Node Allocatable”](https://kubernetes.io/docs/tasks/administer-cluster/reserve-compute-resources/#node-allocatable) 。Scheduler确保调度的容器的资源需求总和小于Node的容量。
### How Pods with ephemeral-storage limits run（如何运行设置了ephemeral-storage limit的Pod）
对于容器级别的隔离，如果容器可写层和日志的使用超出其存储限制，则该Pod将被驱逐。对于Pod级别的隔离，如果所有容器的local ephemeral storage使用量的综合超过限制，则Pod将被驱逐，同理，Pod的EmptyDir也是如此。
## Opaque integer resources (alpha feature) （不透明的整数资源（alpha特征））
**废弃通知：**从 `Kubernetes v1.8` 开始，该特性已被 [deprecated](https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/#) 。
既已废弃，就没有翻译的必要了。多抱半小时老婆吧。该功能的替代品是Extended Resources。
## Extended Resources（扩展资源）
Kubernetes 1.8版引入了Extended Resources。Extended Resources是 `kubernetes.io` 域名之外的完全资格的资源名称。Extended Resources允许集群运营商发布新的Node级别的资源，否则系统将无法识别这些资源。 Extended Resources数量必须是整数，不能过大。
用户可像CPU和内存一样使用Pod spec中的Extended Resources。 Scheduler负责资源计算，以便分配给Pod的资源部超过可用的资源量。
API Server将Extended Resources的数量限制为整数，例如 `3Ki` 和 `3Ki` 是有效的，`0.5`和`1500m` 是无效的。
**注意：**扩展资源替代 [Opaque Integer Resources](https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/#opaque-integer-resources-alpha-feature) 。 用户可使用 `kubernetes.io/` 域名之外的任何域名前缀，而非以前的 `pod.alpha.kubernetes.io/opaque-int-resource-` 前缀。
使用Extended Resources需要两步。首先，集群操作员必须在一个或多个Node上发布per-node Extended Resource。第二，用户必须在Pod中请求Extended Resource。
要发布新的Extended Resource，集群操作员应向API Server提交 `PATCH` HTTP请求，从而指定集群中Node的 `status.capacity` 。在此操作之后，Node的 `status.capacity` 将包含一个新的资源。 `status.allocatable` 字段由kubelet异步地使用新资源自动更新。请注意，由于Scheduler在评估Pod适应度时，会使用Node的`status.allocatable`值，所以在 使用新资源PATCH到Node容量 和 第一个Pod请求该Node上资源 之间可能会有短暂的延迟。
**示例：**
如下是一个示例，显示如何使用 `curl` 构建一个HTTP请求，该请求在Node `k8s-node-1` （Master是`k8s-master` ）上发布了5个“example.com/foo”资源。
```shell
curl --header "Content-Type: application/json-patch+json" \
--request PATCH \
--data '[{"op": "add", "path": "/status/capacity/example.com~1foo", "value": "5"}]' \
http://k8s-master:8080/api/v1/nodes/k8s-node-1/status
```
**注意** ：在上述请求中， `~1` 是PATCH路径中字符 `/` 的编码。 JSON-Patch中的操作路径值被拦截为JSON指针。 有关更多详细信息，请参阅 [IETF RFC 6901, section 3](https://tools.ietf.org/html/rfc6901#section-3) 。
要在Pod中使用Extended Resource，请将资源名称作为 `spec.containers[].resources.requests` map中key。
**注意：**Extended resources不能提交过大的值，因此如果request和limit都存在于容器spec中，则两者必须相等。
> TODO：这是什么意思？
只有当所有资源的request都满足时（包括cpu、内存和任何Extended Resources），Pod才会被调度。只要资源的request无法被任何Node满足，Pod将保持在 `PENDING` 状态。
**示例：**
下面的Pod有如下request：2 cpus和1“example.com/foo”（extended resource）。
```yaml
apiVersion: v1
kind: Pod
metadata:
  name: my-pod
spec:
  containers:
  - name: my-container
    image: myimage
    resources:
      requests:
        cpu: 2
        example.com/foo: 1
```
## Planned Improvements（计划改进）
Kubernetes 1.5仅允许在容器上指定资源量。计划对Pod中所有容器共享资源的计费进行改进，例如 [emptyDir volumes](https://kubernetes.io/docs/concepts/storage/volumes/#emptydir) 。
Kubernetes 1.5仅支持容器级别的CPU/内存的request/limit。 计划添加新的资源类型，包括node disk space resource和用于添加自定义 [resource types](https://github.com/kubernetes/community/blob/master/contributors/design-proposals/scheduling/resources.md) 的框架。
Kubernetes通过支持多层的 [Quality of Service](http://issue.k8s.io/168) 支持overcommitment of resources。
> overcommitment of resources：笔者理解就是资源超售。
>
> Quality of Service在部分K8s文档上也被简写成QoS。
在Kubernetes 1.5中，对于不同云提供商，或对于同一个云提供商中的不同机器类型，一个CPU单位表达的是不同的意思。 例如，在AWS上，Node的容量在 [ECUs](http://aws.amazon.com/ec2/faqs/) 中报告，而在GCE中报告为逻辑内核。我们计划修改cpu资源的定义，从而使得在提供商和平台之间更一致。
## What’s next
- 掌握 [assigning Memory resources to containers and pods](https://kubernetes.io/docs/tasks/configure-pod-container/assign-memory-resource/) 的实践经验。
- 掌握 [assigning CPU resources to containers and pods](https://kubernetes.io/docs/tasks/configure-pod-container/assign-cpu-resource/) 的实践经验。
- [Container](https://kubernetes.io/docs/api-reference/v1.8/#container-v1-core)
- [ResourceRequirements](https://kubernetes.io/docs/resources-reference/v1.8/#resourcerequirements-v1-core)
## 原文