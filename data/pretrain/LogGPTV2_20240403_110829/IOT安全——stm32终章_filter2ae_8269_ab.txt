            DMA_InitStructure.DMA_MemoryDataSize = DMA_MemoryDataSize_Byte;     
            //设置dma模式
            DMA_InitStructure.DMA_Mode = DMA_Mode_Normal ;
            //设置dma的优先级   
            DMA_InitStructure.DMA_Priority = DMA_Priority_Medium;  
            //使能
            DMA_InitStructure.DMA_M2M = DMA_M2M_Enable;
            //初始化通道       
            DMA_Init(DMA1_Channel4, &DMA_InitStructure);        
            DMA_Cmd (DMA1_Channel4,DISABLE); 
    }
另外，我们知道dma最后一步需要借助中断来触发对应的事件，所以配置dma还需要配置相应的NVIC，这部分生成的代码较为简单，我就不再一一说明了。
最终我们只需要编写中断服务函数即可完成dma的使用。
## 简单易学的usart
说起数据传输，似乎很简单，就是一人收一人发，TX表示的就是数据发送，RX表示数据接收，这俩看上去花里胡哨，实际上就是我们第一篇中说过的引脚”进化“来了，我们在stm32cube中设置好了usart开启，软件就会帮我们搞定，最终即可轻松利用中断处理函数来编写代码。
看上去不难，但实际上需要协调的地方很多，用起来简单，学明白还是需要时间的。标准的usart全双工的异步串行通信（当然有标准的就有不标准的），NRZ
标准格式，还需要有同步的波特率，我们一个个来解释这些概念
  * 全双工即收发双方可以同时发送数据，半双工是可以一边发完另一边发，单工就是永远只能有一边发送
  * 串行就是数据像是穿成一根线，一个一个的发送，并行就是好几根线，一块发送
  * 异步是双方时钟不同，你玩你的我玩我的，同步则是双方严格按照时钟
  * NRZ标准格式即Non-return-to-zero Code，就是传输每一位数据都不用归零，比如刚传输一个1，那么之后就一直是1，直到下一个传输为0，除了NRZ，还有RZ格式，即每次传输完一个数据，就变回0，等待下一次传输。这两种方式各有利弊，RZ最突出的特点就是自同步性，它不需要其他时钟就可以实现同步，因为接收者只需要接收归零状态之后的即可，缺点也显而易见——带宽浪费了，而NRZ则恰好相反，它没有了自同步性，但是对于带宽的利用大大增加了。
  * 波特率是每秒钟传输的数据位数，说白了就是双方一个同步的约定，一旦破了这个约定，数据还是那些数据，但就会出现乱码等现象。
看完了这些我们再看一下USART的格式
可以看到它以frame来组织数据，也就是帧。每一个数据帧以start
bit为起始，是一个低电平信号，如果开始就是一个高电平信号就直接说明这个帧不是数据帧，接着就是数据位，一般是低位在前，高位在后，然后是奇偶校验位，奇校验就是1出现次数为奇数次，偶校验就是1出现的次数为偶数次，这些都非常简单。
最后是停止位，这里的停止位非常有讲究，它的主要功能其实是为了消除累积误差的，我们在上一篇文章就知道了，多个设备都是在以自己的时钟频率运行的，虽说有各种各样的机制，但还是免不了会出现轻微的误差现象，这时，有一个停止位，各设备可以在接收停止位时进行时钟的校正同步，由此可知，停止位越多，各设备之间的”误差“就可以越大，但是同样会导致带宽的浪费。
usart支持三种方式的传输：
  * 轮询式，即cpu不断的查询io设备，有请求就处理，效率低到可怕，对应的库函数为HAL_UART_Transmit()和HAL_UART_Receive()，由于cpu不可能一直在这等待发送，它采取了超时管理的机制。
  * 中断式，即io设备完成操作时发送请求给cpu，调用中断处理函数进而处理，对应的库函数为HAL_UART_Transmit_IT()和HAL_UART_Receive_IT()
  * dma式，即我们上面详细说明的方式，也是效率最高的方式，对应的库函数为HAL_UART_Transmit_DMA()和HAL_UART_Receive_DMA()
usart同样利用中断来触发事件，包括：
  * HAL_UART_TxHalfCpltCallback()，发送一半数据触发
  * HAL_UART_TxCpltCallback()，发送全部数据触发
  * HAL_UART_RxHalfCpltCallback()，接收一般数据触发
  * HAL_UART_RxCpltCallback()，接收全部数据后触发
  * HAL_UART_ErrorCallback()，传输出现错误触发
了解了上面的基础知识，我们就可以开始梳理usart的编写逻辑了
  * 配置相关的时钟（包括设备、对应的IO引脚，参考上一篇文章）
  * 配置TX、RX并使能
  * 配置波特率
  * usart设备使能
  * 配置usart相关的中断
    //配置波特率  
    USART_InitStructure.USART_BaudRate = 115200;  
    //配置数据宽度
    USART_InitStructure.USART_WordLength = USART_WordLength_8b;  
    //配置停止位宽度
    USART_InitStructure.USART_StopBits = USART_StopBits_1;  
    USART_InitStructure.USART_Parity = USART_Parity_No;  
    USART_InitStructure.USART_HardwareFlowControl = USART_HardwareFlowControl_None;  
    USART_InitStructure.USART_Mode = USART_Mode_Rx | USART_Mode_Tx;
最后编写中断函数进行数据发送
    void USART3_IRQHandler(void)  
    {  
      static int tx_index = 0;  
      static int rx_index = 0;  
      //判断usart发送是否准备就绪
      if (USART_GetITStatus(USART3, USART_IT_TXE) != RESET) 
      {  
        //发送数据
        USART_SendData(USART3, String[tx_index++]);  
        if (tx_index >= (sizeof(String) - 1))  
          tx_index = 0;  
      }  
      //判断usart接收是否准备就绪
      if (USART_GetITStatus(USART3, USART_IT_RXNE) != RESET) 
      {  
        String[rx_index++] = USART_ReceiveData(USART3);  
        if (rx_index >= (sizeof(String) - 1))  
          rx_index = 0;  
      }  
    }
我们还可以重定向printf函数来实现printf利用usart发送数据，我们知道，printf是fputc的进一步封装，因此我们重写相应函数即可
    int fputc(int ch,FILE *f)
    {
        USART_GetFlagStatus(USART1, USART_FLAG_TC)///判断usart是否准备就绪
        //发送字符
        USART_SendData(USART1, (unsigned char) ch);
        //等待发送完成
        while(USART_GetFlagStatus(USART1,USART_FLAG_TC)!=SET);
        return(ch);
    }
## 总结
到这里我们已经可以完整复现整个题目的流程了，相信大家也完全可以解答一开始我在[《IOT安全—— _stm32_
从做题到复现》](https://www.anquanke.com/post/id/229321)中提出的几个问题，也完全可以自己出一些简单的stm32固件题目。
作为一个物联网安全的小白，第一次接触这类题目真的是会感觉到异常的”难“，不仅仅是对题目、知识点的陌生，更多的是对于硬件设备、底层代码编写的恐惧，希望大家在这几篇文章后能多少得到一些物联网学习的知识，也能借助这些知识举一反三，慢慢走出这份恐惧，在未来越来越多的物联网安全问题中更快进步。