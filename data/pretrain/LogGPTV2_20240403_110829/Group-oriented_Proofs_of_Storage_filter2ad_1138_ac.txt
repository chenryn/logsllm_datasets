ϕ(sk, m) =
1
H(m)
mod ξ(N )
and
(cid:122)(g, ϕ(sk, m)) = gϕ(sk,m) mod N
where ξ(N ) is the Euler totient function of N . For any
x ∈R Z∗, the function (cid:122) satisﬁes homomorphic composabil-
ity property, that is,
(cid:122)(g, ϕ(sk, m))x = gx·
1
H(m) = (cid:122)(gx, ϕ(sk, m)).
Deﬁne the testing algorithm Ξ to output “1” if and only if
both
and
σH(m) = g
¨yH(m) = ¨x
hold. Hence, it also satisﬁes homomorphic veriﬁability.
3.2 Our GPoS Construction
Let Sk = (KGen, Sign, Vrfy) be a secure signature scheme
which has the properties described in Section 3.1. Also
let St = (KGen, Sign, Vrfy) be a secure standard signature
scheme. Suppose the group consists of n members and
H0 : {0, 1}∗ → R be a collision-resistant hash function.
For GPoS construction with the above deﬁned properties,
a group member id(cid:96) only holds his/her secret key in the
form of (cid:122)(g, ϕ(gsk, id(cid:96))), where gsk denotes a group secret
key. Thus, he/she cannot directly use gsk or ϕ(gsk, id(cid:96)) for
producing meta-data (signature for a ﬁle block). We explain
how to employ trapdoor technique to circumvent this issue.
In detail, the group member id(cid:96) can randomly pick (secret)
values αi ∈R R and compute the corresponding powers ui =
gαi as public parameters. When signing on a list of messages
{mi}, the member id(cid:96) ﬁrst evaluates a linear function
(cid:88)
fe = f ({mi, αi}) =
over ring R, and then computes
Hence, under group public key gpk, the test algorithm Ξ can
go through as follows
Ξ
gpk; id(cid:96), (cid:122)(g, ϕ(gsk, id(cid:96))); gfe , σ
= 1.
(cid:48)(cid:17)
(cid:16)
Now we are ready to describe our generic construction.
Setup(1λ): The group manager invokes Sk.KGen(1λ) to ob-
tain a pair of public/secret keys, and sets them as the
group public key and group secret key (gpk, gsk).
KeyExt(gpk, gsk, id(cid:96)): For each member id(cid:96) (1 ≤ (cid:96) ≤ n) in
the group, the group manager computes a signature of
his/her identity as follows
sk(cid:96) ← Sk.Sign(gsk, id(cid:96)) ∈ Σ.
Such a signature serves as his/her secret key. When
receiving sk(cid:96), the member id(cid:96) is able to validate it by
invoking Sk.Vrfy with group public key gpk.
PrFile(gpk, sk(cid:96), F ): Given a ﬁle F , the member id(cid:96) splits it
into blocks such that each block has s sectors (as ele-
ments in R) as follows
F = {Fi = (fi,1,··· , fi,s) : 1 ≤ i ≤ r}.
(1)
Then choose a random ﬁle identiﬁer f id ∈R R and
(s + 1) random values α0, α1,··· , αs ∈R R. Compute
uj = gαj ∈ G
for each 0 ≤ j ≤ s. Let τ0 be the concatenation string
of
(gpk, id(cid:96), u0, u1,··· , us, f id, r)
Generate the ﬁle tag by the following steps:
• Compute (tpk, tsk) ← St.KGen(1λ) to obtain a
pair of public/secret keys;
• Compute ϑ ← St.Sign(tsk, τ0) to obtain a signa-
ture of string τ0.
• Send the ﬁle tag τ = (τ0, tpk, ϑ) to the group
manager.
For each ﬁle block Fi (1 ≤ i ≤ r), the member id(cid:96)
computes
s(cid:88)
θi = α0H0(f id (cid:107) i) +
αjfi,j ∈ R
j=1
and generates meta-data as
σi ← skθi
(cid:96) ∈ Σ
Send the processed ﬁle
∗
= {(Fi, σi) : 1 ≤ i ≤ r}
F
αimi
to the cloud storage server. Deletes the random values
α0, α1,··· , αs, secret key tsk and the ﬁle locally.
(cid:48)
σ
= ((cid:122)(g, ϕ(gsk, id(cid:96))))fe = (cid:122)(gfe , ϕ(gsk, id(cid:96))).
In this way, it is easy to see that the component gfe can be
recovered using public parameters {ui} and messages {mi}.
Chall(gpk, τ ): The auditor runs the algorithm as follows.
1. Invoke St.Vrfy(tpk, τ0, ϑ) to validate the ﬁle tag τ .
If it is invalid, outputs “0” and terminates.
782. Pick a random subset Q ⊆ [1, r] and choose a
random value βi ∈R R for each i ∈ Q. Send the
challenge
C = (f id, Q,{βi : i ∈ Q})
to the cloud storage server.
PrfGen(gpk, F ∗, C): The cloud storage server computes the
aggregated ﬁle block (cid:126)µ = (µ1,··· , µs) and meta-data
σ as follows
(cid:88)
i∈Q
µj =
and
βifi,j ∈ R for each j ∈ [1, s],
(cid:89)
i∈Q
σ =
i ∈ Σ.
σβi
(2)
with regard to the integrity auditing of outsourced ﬁles is
considered.
Suppose a PPT adversary A who controls a set Sc of group
members and breaks the soundness of the proposed generic
GPoS scheme. Let the adversary play the security game
described in Deﬁnition 2 by interacting with the challenger
C. We show that if the adversary can output a (forged) valid
pair of challenge/proof (C(cid:48), R(cid:48)) with regard to a ﬁle F (cid:48) and a
tag τ(cid:48), then we can construct an algorithm B by interacting
with A to break the CDH assumption.
Setup: The adversary A sends the corrupted set Sc to B.
On input a security parameter λ, the challenger generates a
pair of group public key and secret key (gpk, gsk). Send gpk
to B, who forwards it to the adversary A.
Queries: The adversary can adaptively interact with the
simulator B who maintains all the intermediate information,
that is, all the queries and responses.
• Processing ﬁle: For each query from A with a ﬁle F
and a member identity id(cid:96), the simulator B passes them
to C. If the identity has not been queried before, then
the challenger ﬁrst invokes KeyExt to extract a private
key sk(cid:96) for it. After running the algorithm PrFile, the
challenger gives the private key sk(cid:96), a ﬁle tag τ and a
list of meta-data {σi}1≤i≤r to B, where the ﬁle iden-
tiﬁer f id (an element in τ ) is randomly chosen by C.
The simulator B forwards the received information to
A. If id(cid:96) (cid:54)∈ Sc, then sk(cid:96) cannot be given to A.
• Integrity auditing: For this type of queries, the sim-
ulator and the adversary play the roles as a veriﬁ-
er and a prover, respectively. For any ﬁle F that
has been queried for processing, the simulator B runs
Chall(gpk, τ ) to generate a challenge
C = (f id, Q,{βi : i ∈ Q})
and sends it to A. The adversary responds with a proof
R = ((cid:126)µ, σ). The simulator veriﬁes the proof P by
running Verify(gpk, τ, C, R) and gives the veriﬁcation
results to A.
End-Game: Finally, the adversary outputs a (forged)
valid pair of challenge/proof (C(cid:48), P (cid:48)) with regard to a ﬁle F (cid:48)
and a tag
(cid:48)
τ
= (τ
(cid:48)
0, tpk, ϑ
(cid:48)
)
that is, the pair of
(cid:48)
= (f id, Q,{βi : i ∈ Q})
C
(cid:48)
R
(cid:48)
= ((cid:126)µ
(cid:48)
)
, σ
satisfy the testing algorithm Ξ. Note that ﬁle F (cid:48) has been
queried for processing. Assume it belongs to some member
id(cid:96) (cid:54)∈ Sc and has identiﬁer f id, both of which are speciﬁed
in τ(cid:48). As we discussed, the forged and real proofs have the
following representations, that is,
(cid:48)
σ
= (cid:122)(cid:16)
= (cid:122)(cid:16)
(cid:80)
u
0
· s(cid:89)
i∈Q βiH0(f id(cid:107)i)
i∈Q βiH0(f id(cid:107)i)+(cid:80)s
(cid:80)
µ(cid:48)
j , ϕ(gsk, id(cid:96))
(cid:17)α0
j=1
u
j
(cid:17)
g, ϕ(gsk, id(cid:96))
j=1 αj µ(cid:48)
j
Return the proof R = ((cid:126)µ, σ) to the auditor.
Verify(gpk, τ, C, R): If R cannot be parsed, output “0” and
(cid:32)
terminates. Otherwise, check
(cid:80)
i∈Q βiH0(f id(cid:107)i)
Ξ
gpk; id(cid:96), sk(cid:96); u
0
j=1
If so, output “1”; otherwise, output “0”.
3.3 The Security
(cid:33)
· s(cid:89)
uµj
j , σ
?= 1.
(3)
Theorem 1. The proposed GPoS scheme is correct.
Proof. We only show Equation (3) holds as the other
parts are straightforward. Observing that
sk(cid:96) = (cid:122)(g, ϕ(gsk, id(cid:96)))
(cid:17)θiβi
we have
σ =
g
i∈Q
i∈Q
i∈Q θiβi
σβi
i =
g, ϕ(gsk, id(cid:96))
(cid:89)
g, ϕ(gsk, id(cid:96))
(cid:122)(cid:16)
(cid:17)(cid:80)
(cid:89)
= (cid:122)(cid:16)
= (cid:122)(cid:16)
i∈Q βi(α0H0(f id(cid:107)i)+(cid:80)s
(cid:80)
= (cid:122)(cid:16)(cid:89)
gβiα0H0(f id(cid:107)i) ·(cid:89)
s(cid:89)
= (cid:122)(cid:16)(cid:89)
gβiα0H0(f id(cid:107)i) · s(cid:89)
(cid:80)
= (cid:122)(cid:16)
· s(cid:89)
(cid:80)
i∈Q βiH0(f id(cid:107)i)
i∈Q
i∈Q
i∈Q
u
j
j=1
j=1
u
0
(cid:17)
(cid:17)
(cid:17)
j=1 αj fi,j ), ϕ(gsk, id(cid:96))
gβiαj fi,j , ϕ(gsk, id(cid:96))
i∈Q βifi,j
, ϕ(gsk, id(cid:96))
(cid:17)
j=1
It can be seen that σ has the same component ϕ(gsk, id(cid:96)) as
the secret key sk(cid:96). According to the deﬁnition of algorithm
Ξ, the correctness follows.
Theorem 2. Suppose that the signature scheme St for
ﬁle tags is existentially unforgeable. The proposed GPoS
scheme is sound for any PPT adversary A if the CDH as-
sumption holds.
Proof. Since the unforgeability of group members’ secret
keys is guaranteed by a secure signature scheme Sk, it is
omitted in the following discussion while only the soundness
uµj
j , ϕ(gsk, id(cid:96))
.
and
79and
σ = (cid:122)(cid:16)
= (cid:122)(cid:16)
· s(cid:89)
(cid:80)
i∈Q βiH0(f id(cid:107)i)
(cid:80)
i∈Q βiH0(f id(cid:107)i)+(cid:80)s
uµj
j , ϕ(gsk, id(cid:96))
(cid:17)α0
j=1
u
0
(cid:17)
g, ϕ(gsk, id(cid:96))
j=1 αj µj
.
Notice that, at least one pair of {(µ(cid:48)
j, µj)}1≤j≤s should be
diﬀerent, since otherwise, σ(cid:48) = σ would also hold. Without
j = µj for 2 ≤
loss of generality, assume µ(cid:48)
j ≤ s. In this case, the simulator, having the private key
1 (cid:54)= µ1, while µ(cid:48)
sk(cid:96) = (cid:122)(g, ϕ(gsk, id(cid:96))) ∈ G
and the public parameter u1 = gα1 ∈ G with unknown ex-
ponents, can compute the CDH answer (cid:122)(g, ϕ(gsk, id(cid:96)))α1
as follows(cid:18) σ(cid:48)
(cid:19) 1
µ(cid:48)
1−µ1 =
σ
(cid:16)(cid:122)(g, ϕ(gsk, id(cid:96)))α1(µ(cid:48)
1−µ1)(cid:17) 1
µ(cid:48)
1−µ1
= (cid:122)(g, ϕ(gsk, id(cid:96)))α1 .
Thus, the simulator breaks the CDH assumption.
Theorem 3. The proposed GPoS scheme is ownership
privacy-preserving against the cloud storage server.
Proof. On one hand, it is easy to see that, when audit-
ing an outsourced ﬁle with respect to a group member id(cid:96),
the cloud storage server does not know this speciﬁc mem-
bership. On the other hand, the produced meta-data in the
processed ﬁle look random to the cloud server if the elements
in both the ring R and the group G are uniformly distribut-
ed. Since all the values such as αi-es are randomly chosen
in R, the meta-data σi ∈ G are random elements in G and
independent of the ﬁle owner’s identity in the view of the
cloud storage server.
4.
INSTANTIATIONS
p be a collision-resistant hash function.