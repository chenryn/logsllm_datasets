equivalence, which is diﬃcult to perform correctly. In fact, query containment and
equivalence is NP-complete for conjunctive queries and undecidable for queries
involving negation [24]. Our data-centric approach bypasses the complexities and
intricacies of syntax analysis.
4 Data-Centric User Proﬁles
A relational database often consists of multiple relations with attributes and
relationships speciﬁed by multiple primary key and foreign key constraints. One
can visualize a database as a single relation, called the Universal Relation [25],
incorporating the attribute information from all the relations in the database.
Our approach proﬁles users as follows: for each query we compute a statistical
“summary” of the query’s result tuples. The summary for a query is represented
by a vector of ﬁxed dimension regardless of how large the query’s result tuple
set is. This way, past queries (i.e. normal queries) from a user can be intuitively
thought of as a “cluster” in some high dimensional space. We’d like to emphasize
that clustering is only one of several statistical learning technique we will adopt
for this problem. The term clustering is used here to give the reader an intuitive
sense of the model. When a new query comes, if it “belongs” to the user’s cluster,
it will be classiﬁed as normal, and abnormal otherwise.
Our query summary vector is called an S-Vector. An S-Vector is a multi-
variate vector composed of real-valued features, each representing a statistical
measurement; it is deﬁned by the columns of the universal relation correspond-
ing to a database. Each attribute of the universal relation contributes a number
of features to the S-Vector according to the following rules.
Table 1. Statistics Vector Format for Sample Database Schema
Database Schema
S-Vector Features
Relation Attribute
Product
Product.type(varchar) Product.type.ncount
Product.type.ndistinct
Product.cost.Min
Product.cost(numeric) Product.cost.Max
Product.cost.Mean
Product.cost.StdDev
Product.cost.Median
Numeric Attributes: each numeric attribute contributes the measurements
Min (value), Max (value), Mean, Median and Standard deviation.
Non-Numeric Attributes: the standard statistics do not make sense for non-
numeric attributes (e.g., char and varchar). For categorical attributes, one op-
tion is to expand a k-value attribute into k binary-valued attributes (value 1
if the category is represented in the set of result tuples and 0 otherwise) and
compute statistics on them as usual. However, the expansion of categorical at-
tributes may result in an S-vector that has far too many dimensions, aﬀecting
the time-performance of the learner. We compromise by replacing each categori-
cal attribute with two numeric dimensions representing the total count of values,
as well as the number of distinct values for this attribute in the query result.
The S-Vector format for a database is determined by its schema; the value
of the S-Vector for a query is determined by executing the query and computing
the relevant attribute statistics based on the set of result tuples. Table 1 shows
the S-Vector format for a database consisting of a single relation. To illustrate
how an S-Vector value for a query is generated, consider the following query
executed against the database in Table 1:
SELECT p.cost
FROM PRODUCT p
WHERE p.type = ’abc’;
For this query, the result schema consists of the single column Product.cost
and statistics computed on the result tuples are used to populate the Prod-
uct.Min, Product.Max, Product.Mean, Product.StdDev and Prod-
uct.Median features of the S-Vector format for the database – the result is the
S-Vector representation of this query.
5 A Data-Centric Taxonomy of Query Anomalies
In order to evaluate the eﬀectiveness and accuracy of a threat detection engine,
a taxonomy of query anomalies can help us reason about potential solutions.
Subsequent experiments can analyze the performance of detection schemes with
respect to speciﬁc anomalies in light of this taxonomy. We shall classify query
anomalies based on how “far” the anomalous query is from a normal query. From
a data centric view point, two queries are represented by the two result sets, each
of which consists of the result schema (the columns) and the result tuples (the
rows). If the result schemas are (very) diﬀerent, the two queries are diﬀerent.
If the result schemas are similar, then we need to look into how diﬀerent the
result tuples are. On this basis we classify query anomalies. Table 2 provides the
taxonomy summary.
Table 2. A Taxonomy of Query Anomalies
Anomaly Cases Types
Type 1
Diﬀerent Schema/
Diﬀerent Results
Type 2
Similar Schema/
Diﬀerent Results
Type 3
Similar Schema/ Similar Semantics
Similar Results
(a) Distinct Syntax Yes
(b) Similar Syntax
No
(b) Diﬀerent Syntax/ Yes
Diﬀerent Semantics
(a) Diﬀerent Syntax/ False Positive
Detected by
Syntax-Centric? Data-Centric?
Yes
Yes
Detected by Attack Models
Masquerade
SQL-Injection
Data-Harvesting
Data Harvesting
Yes
Yes
Yes
(True Positive)
No (Rare)
Type 1: Distinct Schema and Tuples Anomalous queries of this type
have result sets whose columns and rows are very diﬀerent from those of normal
queries. Intuitively, anomalous queries of this type should be detected by both
the syntax-based and the data-centric approaches. The syntax-based approach
works because queries that diﬀer in the result schema should have distinct SQL
expressions (especially in the SELECT clause). The data-centric approach works
because the S-vector of the anomalous query not only diﬀer in the dimensions
(the result schema) but also in the magnitudes in each dimension (the statistics
of the result tuples). From the insider threat perspective, data harvesting and
masquerading can both result in this type of anomaly. As an example, consider
the following two queries to the database described in Table 1:
Query 1: SELECT p.cost
Query 2: SELECT p.type
FROM PRODUCT p
WHERE p.type = ’abc’;
FROM PRODUCT p
WHERE p.cost  100;
Yet the result tuples are the complement of that of the normal query. Thus, we
further classify type-2 anomalous queries into type-2a and type-2b, where type-
2a contains type-2 anomalous queries whose syntax are also distinct from normal
ones, and type-2b contains the rest. The intuition is that a syntax-based scheme
such as that in [14] is unlikely to be able to detect type-2b anomalous queries.
Indeed, the scheme in [14] represents the above type-2b example query and
the normal example query identically. Furthermore, type-2b anomalous queries
can be rewritten in multiple ways (e.g. p.cost != 100), varying combinations
of constants, arithmetic and logical operators; even very detailed syntax-based
models may be hard-pressed to consider all variations. We will show that data-
centric schemes are likely able to detect both of these anomalous types.
From the insider threat perspective, data harvesting and masquerading can
both result in type-2 anomaly. Another example of a well-known attack class
that may fall in this category is SQL injection since a typical attack is one that
injects input causing condition checks to be bypassed resulting in the output of
all tuples – e.g., a successful exploit of the ﬁrst example above may lead to the
execution of:
SELECT *
FROM PRODUCT p
WHERE 1;
Type 3: Similar Schema and Tuples A query whose execution results in
a similar schema and tuples as a normal one is considered to be similar from a
data-centric viewpoint. Clearly, if the queries also have the same syntax, then
their resulting schemas and tuples are the same and they are identical from both
the data-centric and syntax-centric view.
The interesting case arises when a query producing the same result as a
normal query is syntactically diﬀerent from the normal query. The question is,
should we consider such a query “anomalous”?
On the one hand, it seems to be obvious that a user accessing the same data
schema and tuples as those in his normal access patterns should not be ﬂagged
as malicious regardless of how diﬀerent the syntax of the queries he issued. For
example, the following two queries should be considered identical:
SELECT p.type
FROM PRODUCT p
WHERE p.cost < 100;
SELECT p.type
FROM PRODUCT p
WHERE p.cost < 100 AND p.type IN (
SELECT q.type
FROM PRODUCT q
);
The two queries have identical outputs, semantics, and thus user intent. We
will refer to an “anomalous” query of this type a type-3a query. Note again that
“anomalous” is not the same as “malicious.” Our approach will not raise a red
ﬂag, while the syntax-based approach would issue a false positive.
On the other hand, two queries resulting in the same output might actually
reveal more information than what is in the output. To see this, we have to look
a little deeper into the semantics of the queries. Consider the following query in
relation to the ones from the previous paragraph.
SELECT p.type
FROM PRODUCT p
WHERE true;
Now assume, for the sake of illustration, that the attacker is attempting to see
all product types (data harvesting). If the above query returns more (or diﬀerent
tuples) with respect to the ﬁrst example, then the data-centric approach should,
conceptually detect this. But in the rare case when the result tuples are exactly
the same, this would (as expected) be permitted by the data-centric approach.
However, the attacker has now gained the additional information (based on his
results from the query from the previous paragraph), that all product types in
the database cost less than 100, and has reﬁned his knowledge regarding some
entity. We call to this type of anomalous query type-3b.
This kind of successive knowledge accrual has received much interest in the
areas of privacy preserving data mining and query auditing ([27, 28]). The attack
here arises from information reﬁnement through temporal interaction between a
user and a database and not from a property of the query itself (i.e., its syntax
or result data). Exploiting temporal features from a data-centric viewpoint is an
important future research direction of ours. It should be noted, however, that it is
diﬃcult for an attacker to intentionally exploit this condition, since presumably
he is unable to predict the nature of query output to ensure that result statistics
are unchanged from a normal query. In any case, addressing this type of attacks
is beyond the scope of this paper.
6
Experimental Validation
6.1 The Test Environment
The test environment consists of a real and currently active web application
for Graduate Student Admissions (called GradVote) that relies on a Postgresql
database at the back-end. Users of the system query the database primarily via
the web application. The users fall into several roles, including Chair, Faculty
and Staﬀ.
The database schema consists of 20 relations with multiple (over 20 for some
tables) numeric and non-numeric attributes and 39 multi-level views (i.e., the
views refer to base relations as well as to other views). The training and testing
datasets consist of tens of thousands user queries labeled both by individual user-
name as well as by user-role. These views are signiﬁcantly complex, possessing
multiple subqueries, complex joins and statistical attributes.
Our system, QStatProﬁler, is positioned in the middle of the interaction
channel between the application and the database. It observes the queries to the