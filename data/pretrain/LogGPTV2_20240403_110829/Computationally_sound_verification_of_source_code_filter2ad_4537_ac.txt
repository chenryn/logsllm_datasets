⋄
write d(t1, . . . , tn) = ⊥.
To unify the notations for constructors, destructors, and
: Tn → T as
nonces, we deﬁne the partial function eval f
follows: If f is a constructor or nonce, eval f (t1, . . . , tn) :=
f(t1, . . . , tn) if f(t1, . . . , tn) ∈ T and eval f (t1, . . . , tn) :=
⊥ otherwise.
:=
f(t1, . . . , tn) if f(t1, . . . , tn) 6= ⊥ and eval f (t1, . . . , tn) := ⊥
otherwise.
is a destructor, eval f (t1, . . . , tn)
If
f
5In RCF, every construct from the language (including
lambda-abstractions) is represented in FOL/F formulae by
a special function symbol; see the full version of [16].
391A deduction relation ⊢CoSP between 2T and T formalizes
which terms can be deduced from other terms. The intuition
of S ⊢CoSP m for S ⊆ T and m ∈ T is that the term m can
be deduced from the terms in S.
The constructors, destructors, and nonces, together with
the message type and the deduction relation form a symbolic
model. Such a symbolic model describes a particular Dolev-
Yao-style theory.
Definition 4
(Symbolic model). A symbolic model
M = (C, N, T, D, ⊢CoSP) consists of a set of constructors C, a
set of nonces N, a message type T over C and N with N ⊆ T,
a set of destructors D over T, and a deduction relation ⊢CoSP
⋄
over T.
For a symbolic model, we specify a computational imple-
mentation Impl which assigns an algorithm to each construc-
tor and destructor, and speciﬁes the distribution of nonces.
A CoSP protocol Π is deﬁned as a tree with labelled
nodes and edges. We distinguish computation nodes, which
describe constructor applications, destructors applications,
and nonce creations, output and input nodes, which describe
communication, and control nodes, which allow the adver-
sary to inﬂuence the control ﬂow of the protocol. Compu-
tation and output nodes refer to earlier computation and
input nodes; the messages computed at these earlier nodes
are then taken as arguments by the constructor/destructor
applications or sent to the adversary.
For CoSP protocols, both a symbolic and a computational
execution are deﬁned by traversing the tree.
In the sym-
bolic execution, the computation nodes operate on terms,
and the input/output nodes receive/send terms to the (sym-
bolic) adversary. The successors of control nodes are chosen
non-deterministically. In the computational execution, the
computation nodes operate on bitstrings (using a computa-
tional implementation Impl), and the input/output nodes
receive/send bitstrings to the (polynomial-time) adversary.
The adversary chooses the successors of control nodes.
Definition 5
(Trace property). A trace property
℘ is an eﬃciently decidable and preﬁx-closed set of (ﬁnite)
lists of node identiﬁers. Let M = (C, N, T, D, ⊢CoSP) be a
symbolic model and Π a CoSP protocol. Then Π symboli-
cally satisﬁes a trace property ℘ iﬀ every node trace of Π is
in ℘.
Let Impl be a computational implementation of M and let
Π be a CoSP protocol. Then (Π, Impl) computationally sat-
isﬁes a trace property ℘ iﬀ for all probabilistic polynomial-
time adversaries E, the node trace is in ℘ with overwhelming
⋄
probability.
Definition 6
(Computational soundness). A com-
putational implementation Impl of a symbolic model M =
(C, N, T, D, ⊢CoSP) is computationally sound for a class P of
CoSP protocols iﬀ for every trace property ℘ and for every
eﬃcient CoSP protocol Π, we have that (Π, Impl) computa-
tionally satisﬁes ℘ whenever Π symbolically satisﬁes ℘ and
⋄
Π ∈ P .
4. THE DOLEV-YAO LIBRARY
In this paper, we do not restrict our attention to a spe-
ciﬁc symbolic library. We instead provide a computational
soundness result for any symbolic library fulﬁlling certain
conditions that we detail in this section.
4.1 The library
We ﬁrst deﬁne a general Dolev-Yao model, which is a sym-
bolic model subject to certain natural restrictions.
Definition 7
(DY Model). We say that a symbolic
model M = (C, D, N, T, ⊢CoSP) is a DY model if N = NE ⊎ NP
for countably inﬁnite NE, NP, and equals/2 ∈ D where
equals(x, x) := x and equals(x, y) := ⊥ for x 6= y, and ⊢CoSP
is the smallest relation such that m ∈ S ⇒ S ⊢CoSP m,
n ∈ NE ⇒ S ⊢CoSP n, and such that for any constructor or
destructor f/n ∈ C ∪ D and for any t1, . . . , tn ∈ T satisfying
∀i ∈ [1, n].S ⊢CoSP ti and ⊥ 6= eval f (t1, . . . , tn) ∈ T, we have
⋄
S ⊢CoSP f(t1, . . . , tn).
In the following, we will only reason about DY models. In-
tuitively, in a DY library each CoSP term m is represented
by message M , where message is a private constructor that
tags all values which the library operates on and M is an
encoding of m. CoSP constructors are represented by RCF
constructors and nonces are represented by RCF names. For
each constructor and destructor f, the library exports a func-
tion lib f such that σM
DY(lib f ) (message M1, . . . , message Mn)
returns some message M if eval f (m1, . . . , mn) returns m, or
none if eval f (m1, . . . , mn) returns ⊥. In addition, the library
exports a function nonce that picks a fresh name (to be used
as a nonce) and functions send and recv for sending and re-
ceiving terms of the form message M over a public channel.
con-
taining
the
one presented in Section 5.4), we would represent
a ciphertext with key ek(k) and randomness
r as
The decryption function in
message(enc(ek(k), m, r)).
the library would then be deﬁned by σM
:=
λx.match x with (message(dk(y)), message(enc(ek(y), z, w)))
then some(message(z)) else none. A nonce would be repre-
sented as message(nonce(λx.a!x)) for some fresh name a.6
if we have a symbolic model
(such as
and decryptions
encryptions
DY(lib dec)
example,
For
Instead of giving a deﬁnition that is speciﬁc to a particular
DY model, we will give a general deﬁnition of a DY library
for a DY model. In the following, we assume an arbitrary
embedding ι of terms T into the set of closed RCF values.
We further assume a ﬁxed name achan used internally by the
library for communication and we assume that there is a
value-context Cι[] (a value with a hole) such that {Cι[a] :
a 6= achan is a name} = ι(N).
Definition 8
(C, D, N, T, ⊢CoSP) is a substitution σM
RCF functions satisfying the following conditions:
(DY Library). A DY library for M =
DY from variables to
• Let message be a private constructor.
• dom σM
• σM
function
DY = {lib f | f ∈ C ∪ D} ∪ {nonce, send , recv }.
pure
for
is
a
holds
such
all m1, . . . , mn
the
T:
then
DY(lib f ) (message ι(m1), . . . , message ι(mn)) →∗
then
DY(lib f ) (message ι(m1), . . . , message ι(mn)) →∗
DY(lib f )
following
If m
σM
some message
σM
none. In all other cases, σM
DY(lib f ) (. . .) is stuck.
eval f (m1, . . . , mn)
that
∈
⊥,
If m
ι(m).
:=
• σM
• σM
DY(nonce) = fun → νa.message Cι[a].
DY(send ) = (fun x → (match x with message
6=
=
⊥,
then achan !message x else stuck )). Here stuck is a pure
diverging RCF expression.
6For
message(nonce(a)) if a is a name.
syntactic reasons, RCF forbids
to simply write
392DY(recv ) = fun → achan ?
• σM
• fv (range(σM
• For any variable x ∈ dom σM
DY)) = ∅ and fn(range(σM
DY, and any mpc-free value
M 6= x, we have σM
DY. (We call a sub-
stitution satisfying this condition condition equality-
⋄
friendly.)
DY(x) 6= M σM
DY)) = achan.
The requirement that σM
DY is equality-friendly is a techni-
cal condition to ensure that the outcome of equality-tests in
a program execution does not depend on the internal code
of the library functions.
To interface an expression A with a library σM
DY, we use
DY. We will only consider programs A
the expression AσM
such that fn(A) = ∅ and fv (A) ⊆ dom σM
DY.
In σM
DY, all messages M are protected by the private con-
structor message. However, if an opponent would be allowed
to perform a pattern match on message, he could get the in-
ternal representation of M and thus, e.g., extract the plain-
text from an encryption. Similarly, an adversary applying
message could produce invalid messages. Thus, when using
σM
DY, we have to restrict ourselves to pc-free opponents. The
following variant of robust →-safety models this.
Definition 9
(Robust →-σ-safety). Let σ be a sub-
stitution. We call an RCF expression a σ-opponent iﬀ
fv (O) ⊆ dom σ and O is pc-free and contains neither as-
sertions nor assumptions and achan /∈ fn(O).
An RCF expression A with fv (A) ⊆ dom σ is robustly
→-σ-safe iﬀ the application (O A)σ is →-safe for all σ-
⋄
opponents O.
Note that in contrast to Deﬁnition 2, we explicitly apply
the substitution σ representing the library to the opponent.
This is because a pc-free opponent has to invoke library func-
tions in order to perform encryptions, outputs, etc. Further-
more, we will also need that the programs we analyze oper-
ate on terms tagged by message only through the library. In
order to enforce this (and other invariants that will be used
in various locations in the proofs) we introduce the following
well-formedness condition:
Definition 10. Let A be an RCF expression and M =
(C, N, T, D, ⊢) a DY model. We say M ⊢ A iﬀ fv (A) ⊆ {lib f :
f ∈ C ∪ D} ∪ {nonce, send , recv } and achan /∈ fn(A) and
A is pc-free and the FOL/F-formulae in A do not contain
⋄
forbidden function symbols.
4.2 Dolev-Yao transition relation
The COSP framework assumes the atomicity of crypto-
graphic operations. In general, however, Dolev-Yao libraries
may deﬁne these operations by a sequence of commands,
which may lead to non-atomic computations. For this rea-
son, a convenient tool for the embedding of a language in
COSP is the deﬁnition of a symbolic semantics where crypto-
graphic operations are executed atomically. This is achieved
by deﬁning a new reduction relation A ; B, which diﬀers
from the standard reduction relation A → B in that crypto-
graphic operations are atomically performed. The relation
; is deﬁned like the normal reduction relation →, but ad-
ditionally satisﬁes the following rules:
send (message M ) ; achan !message M
recv N ; achan ?
σM
DY(f ) M →∗ N =⇒ f M ; N
(f ∈ dom σM
DY)
Note that these rules have been designed to be in one-to-
one correspondence with the semantics of σM
DY as deﬁned in
Deﬁnition 8.
Using the deﬁnition of ;, we can reformulate the notion
of safety. Our formulation is justiﬁed by Lemma 1 below.
Definition 11
(;-σ-Safety). A structure S is stati-
cally σ-safe iﬀ P σ ⊢ Cσ where P are the active assumptions
and C the active assertions of S.
An expression A is ;-σ-safe if for all S such that A ;
we have that S is statically σ-safe.
∗ S
⋄
In contrast to Deﬁnition 9, when deﬁning robust safety
with respect to ;, we to not apply σ to the opponent or the
program, because σ is hard-coded into ;:
Definition 12
(Robust ;-σ-safety). An RCF ex-
pression A with fv (A) ⊆ dom σ is robustly ;-σ-safe iﬀ the
⋄
application O A is ;-σ-safe for all σ-opponents O.
A necessary ingredient for the computational soundness
result is the proof that if a program is →-safe then it is also
;-σM
DY-safe.
Lemma 1. Let A be pc-free. If AσM
DY is →-safe then A is
;-σM
DY-safe.
5. COMPUTATIONAL SOUNDNESS
In this section, we present the computational soundness
result for Dolev-Yao libraries.
5.1 Deﬁnitions
Since RCF only has semantics in the symbolic model
(without probabilism and without the notion of a compu-
tational adversary) we need to introduce the notion of a
computational execution of RCF expressions. In the compu-
tational execution, we let the adversary have the full control
over the scheduling and all non-deterministic decisions. This
models the worst case; a setting in which scheduling deci-
sions are taken randomly can be reduced to this setting. Our
computational execution maintains a state that consists of
the current process S and an environment η. Cryptographic
messages (i.e., bitstrings received by the adversary or com-
puted by cryptographic operations) are represented in S by
free variables. The bitstrings corresponding to these vari-
ables are maintained in the environment η. In each step of
the execution, the adversary is given the process S (together
with a set of equations E that tell him for which x, y we have
η(x) = η(y)), and then can decide which of the diﬀerent re-
duction rules from the RCF semantics should be applied to S.
Note that giving S to the adversary does not leak any secrets
since these are only contained in η. If the adversary requests
that a function application lib f (x) is executed, where lib f is
a function in the DY library, the computational implemen-