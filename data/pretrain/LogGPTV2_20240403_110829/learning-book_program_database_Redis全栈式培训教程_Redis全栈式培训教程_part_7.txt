春风阁讲堂出品
---
## Page 76
5.5.Redis持久化RDB+AOF详解
5.5.1.混合持久化原理简介
Redis-4.x后支持了RDB和AOF混合使用。重启Redis时，我们很少使用RDB来恢复内存状态，因为会丢失大量数据。我们通常使用AOF日志重
放，但是重放AOF日志性能相对RDB来说要慢很多，这样在Redis实例很大的情况下，启动需要花费很长的时间。Redis-4.0为了解决这个问题，
带来了一个新的持久化选项一一混合持久化。将RDB文件的内容和增量的AOF日志文件存在一起，这里的AOF日志不再是全量的日志，而是RDB久
化开始到RDB持久化结束的这段时间发生的增量AOF日志，通常这部分AOF日志很小。Redis-4.x混合持久化机制如下图：
redis
snapshot
从开始写RDB文件开始，新接收到操作指令
RDB
AOF
春风阁讲堂出品
76
---
## Page 77
5.5.2.配置参数演示
aofuserdb-preamble yes
#开启混合持久化
生成流程：
1.正常周期生成aof文件
2.正常触发rewrite重写机制
3.采用bgrewriteaof 重写命令生成aof压缩文件
恢复流程：
1.在同时开启混合持久化时，重启时只会加载aof文件，不会加载rdb文件
问题注意：
1.dir路径一般设置为绝对路径，防止在不同的文件夹下启动，生成的aof文件混乱
2.正常kil1时生成不会生成文件
3.aof在运行时删除后，redis不会自动生成，可以采取bgrewriteaof或者重启方式生成
春风阁讲堂出品
---
## Page 78
5.5.3.四种方式文件对比
持久方式
生成文件
恢复流程
文件内容
RDB持久方式
正常周期、手动生成、kil1
从RDB文件恢复
AOF持久方式
正常周期、手动生成
从AOF文件恢复
两种方式组合
RDB和AOF按各自规则生成
从AOF文件恢复
混合持久化
RDB和AOF按各自规则生成
从AOF文件恢复
AOF包括了RDB头部+AOF混写
春风阁讲堂出品
78
---
## Page 79
5.6.Redis用于纯缓存模式
5.6.1.核心原理介绍
在某些业务场景下，我们只是使用的是热点数据缓存，在这种场景下，我们不需要数据的备份与恢复
纯缓存模式=禁用rdb持久化+禁用aof持久化
5.6.2.配置参数演示
Save **
#禁用rdb
appendonly no
#禁用aof
问题注意：
1.在此模式下，一般需要应用自已考虑数据的重新加载
2.禁用rdb持久化模式下，我们仍然可以使用命令save、bgsave生成rdb文件
3.禁用aof持久化模式下，我们仍然可以使用命令bgrewriteaof生成aof文件
4.当存在主从复制时，Redis默认会开启rdb复制，除非强制使用无盘复制
春风阁讲堂出品
79
---
## Page 80
6.Redis特性介绍
6.1.Redis中的管道原理
6.1.1.pipeline出现的背景
Redis客户端执行一条命令分4个过程：
发送命令一）命令排队一）命令执行一）返回结果
这个过程称为Roundtriptime（简称RTT，往返时间），Redis的原生批命令（mget和mset）有效节约了RTT，但大部分命令不支持批量操作，
需要消耗N次RTT，这个时候需要pipeline来解决这个问题
Pipeline是为了解决RTT往返回时，仅仅是将命令打包一次性发送，对整个Redis的执行不选成其它任何影响
春风阁讲堂出品
---
## Page 81
6.1.2.普通命令与管道对比
以下两图分别展示了未使用管道和使用了管道的流程图，可以发现管道技术节省了N-1次的RTT时间
发送命令1
redis
返回结果1
计算1
发送命令2
返回结果2
计算2
client
网络
发送命令N
计算N
返回结果N
redis
及送pipeline命令
PIPEUINE组成命令块
cmd N
cmd2
cmd 1
单线程执行
结果N
结果2
结果
返回结果N
春风阁讲堂出品
8/
---
## Page 82
6.1.3.管道与原生批命令对比
原生批命令（mset，mget）与Pipeline对比
特征
原生批命令
管道命令
原子性
原子性的（所有的Redis单命令都是原子性的）
pipeline是非原子性，中途异常退出，不回滚
命令
一命令+多个key
多个命令
实现方式
服务端实现
需要服务端与客户端共同完成
6.1.4.管道与脚本对比对比
1.Redis的Script会当成一个命令，具有原子性，在执行Script的时候不会被其他的命令插入，因此更适合于处理事务：
2.管道虽然也会将多个命令一次性传输到服务端，但在服务端执行的时候仍然是多个命令，如在执行CMD1的时候，外部另一个客户端提交了
CMD9，会先执行完CMD9再执行管道中的CMD2，因此事实上管道是不具有原子性的
6.1.5.pipeline的使用注意事项
1.使用pipeline组装的命令个数不能太多，否则数据量过大，增加客户端的等待时间，还可能造成网络阻塞，可以适当地将大量命令的拆分
多个小的pipeline命令完成（看具体情况）
2.pipeline特别命令数据初始化加载程序，可大大提供效率
春风阁讲堂出品
82
---
## Page 83
6.1.6.管道实例演示
1.脚本演示
(echo -en ~ping\r^n SET key1 val1\r\nGET key1\r\nINCR counter\r\nINCR counter\r\nINCR counter\r^n: sleep 1) | nc localhost 6379
2.客户端代码演示
参考代码工程redis
春风阁讲堂出品
---
## Page 84
6.2.Redis的发布与订阅
6.2.1.发布/订阅原理简介
发布/订阅模式模式包含两种角色：发布者和订阅者。订阅者可以订阅一个或多个通道（channel），而发布者可以向指定的通道（channel）中发送
消息，所有此通道的订阅者都会收到消息。拿一个现实生活中的例子来比喻的话，发布者就像一个电台广播员，订阅者就像听众，广播员将消息通
过将消息发送到一个频道中，而这个频道的听众就会听到播音员的声音
下图展示了频道channel1，以及订阅这个频道的三个客户端一一client2、client5和client1之间的关系
当有新消息通过PUBLISH命令发送给频道channel1时，这个消息就会被发送给订阅它的三个客户端
PUBLISH channel1 message
channel1
channel1
subscribesubscribe
subscribe
messagemessage
message
client2
client5
client1
client2
client5
client1
发布/订阅其实是一个轻量的队列，只不过数据不会被持久化，
一般用来处理实时性较高的异步消息
春风阁讲堂出品
84
---
## Page 85
6.2.2.发布/订阅演示
1.演示客户端A、B订阅消息，客户端C发布消息
a)：客户端A和B执行：SUBSCRIBEc1
b)：客户端C执行：PUBLISHc1test1
c)：查看A和B接收到的消息
2.演示客户端A发布消息，代码端订阅消息
a)：客户端A发布消息，代码端订阅消息
b)：查看代码端接收到的消息
3.参考代码工程redis
发布/订阅核心命令参考如下：
序号
命令说明
序号
命令说明
PUBLISH channel message -将信息发送到指定的频道
4
SUBSCRIBEchannel[channel..]-订阅给定的一个或多个频道的信息
2
PSUBSCRIBEpattern[pattern..]-批量订阅多个频道
5
PUNSUBSCRIBE[pattern[pattern...]]批量退订多个频道
PUBSUB subcommand [argument [argument .. ]]
6
UNSUBSCRIBE[channe1[channel...]]-指退订给定的频道。
查看订阅与发布系统状态。
春风阁讲堂出品
89
---
## Page 86
6.3.Redis中的流技术
6.3.1.Redis流介绍
RedisStream是Redis5.0版本新增加的数据结构。
RedisStream主要用于消息队列（MQ，Message Queue），Redis本身是有一个Redis发布订阅（pub/sub）来实现消息队列的功能，但它有
个缺点就是消息无法持久化，如果出现网络断开、Redis宕机等，消息就会被丢弃。
简单来说发布订阅（pub/sub）可以分发消息，但无法记录历史消息。而RedisStream提供了消息的持久化和主备复制功能，可以让任何客户
端访问任何时刻的数据，并且能记住每一个客户端的访问位置，还能保证消息不丢失。
Redis中的流技术参考了Kafka等分布式消息原理，因些某些概念比较类似
春风阁讲堂出品
86
---
## Page 87
6.3.2.Redis流ID规则
流（stream）中信息条目（一个Stream条目，由一个或多个键值对组成的）的ID必须是单调增的，为此，redis采用时间戳+自增id这种方式
来保证，并且这两个数都是64bit，不会有溢出问题，最后一点，redis在增加信息条目时会检查当前id与上一条目的id，自动纠正错误的情况，
一定要保证后面的id比前面大。
一个流中信息条目的ID必须是单调增的，这是流的基础
几个特殊的ID：
-+：最小和最大可能出现的Id
8：当前流中最大的id，可用于将要到来的信息
>：用于XREADGROUP命令中，表示迄今还没有发送给组中使用者的信息，会更新消费者组的最后ID
*：用于XADD命令中，让系统自动生成id
春风阁讲堂出品
---
## Page 88
6.3.3.Redis消息结构
Consumer
Pending_ids[]
Consumer
Last_deliveredLid
Pending_ids[]
Consumer group
Consumer
Last_delivered_id
Pending_ids[]
Streamdirection
Stream drection
ID1ID2ID3
ID4
ID5
ID6ID7
ID8ID9ID10ID11ID12ID13ID14ID15ID16
Consumergroup
Message content
Last_delivered_id
ConsumerGroup：消费组，使用XGROUPCREATE命令创建，一个消费组有多个消费者（Consumer）。
last_delivered_id：游标，每个消费组会有个last_delivered_id，任意一个消费者读取了消息都会使游标last_delivered_id往前移动。
pending_ids：消费者（Consumer)的状态变量，作用是维护消费者的未确认的id。pending_ids记录了当前已经被客户端读取的消息，但是还没
有ack（Acknowledge character：确认字符）。
春风阁讲堂出品
88
---
## Page 89
6.3.4.Redis流实例演示
1.
演示创建流、创建消费者组
xadd mystream * id 1 name longge
#生产消息
xde1 mystream 16545212215810
#删除某条消息
xrange mystream  +
#查看消息列表
XREAD count 1 streams mystream 0
#读取一条消息
xgroup create mystream group1 0
#创建消费者组
xreadgroup group groupl c1 count 1 streams mystream >
#消费者读消息
xpending streaml group1  + 10 c1
#查看待确认的列表
XACK mystream group1 16545227330490
#确认消息
Redis流命令参考：
序号
命令说明
行数
命令说明
XADD
-添加消息到末尾
6
XACK
-将消息标记为”已处理
2
XTRIM
对流进行修剪，限制长度
10
XGROUPSETID-为消费者组设置新的最后递送消息ID
3
XDEL
删除消息
11
XGROUP DELCONSUMER
-删除消费者
A
XLEN
获取流包含的元素数量，即消息长度
12
XGROUP DESTROY
-删除消费者组
5
XRANGE
获取消息列表，会自动过滤已经删除的消息
13
XPENDING
显示待处理消息的相关信息
6
XREVRANGE
反向获取消息列表，ID从大到小
14
XCLAIM
－转移消息的归属权
7
XREAD-以阻塞或非阻塞方式获取消息列表
15
XINF0
-查看流和消费者组的相关信息
8
XGROUP CREATE
创建消费者组
16
XREADGROUP GROUP
-读取消费者组中的消息
春风阁讲堂出品
89
---
## Page 90
6.4.Redis中的过期策略
6.4.1.过期策略介绍
我们在setkey的时候，可以给它设置一个过期时间，比如expirekey60。指定这key在60s后过期，60s后，Redis是如何处理的嘛？我们
先来介绍几种过期策略
1.定时过期
是会占用大量的CPU资源去处理过期的数据，从而影响缓存的响应时间和吞吐量
2.情性过期
只有当访问一个key时，才会判断该key是否已过期，过期则清除。该策略可以最大化地节省CPU资源，却对内存非常不友好。极端情况可能
出现大量的过期key没有再次被访问，从而不会被清除，占用大量内存
3.定期过期
每隔一定的时间，会扫描一定数量的数据库的expires字典中一定数量的key，并清除其中已过期的key。该策略是前两者的一个折中方案。通
4.Redis中同时使用了情性过期和定期过期两种过期策略
假设Redis当前存放30万个key，并且都设置了过期时间，如果你每隔100ms就去检查这全部的key，CPU负载会特别高，最后可能会挂掉。
因此，Redis采取的是定期过期，每隔100ms就随机抽取一定数量的key来检查和删除的。
但是呢，最后可能会有很多已经过期的key没被删除。这时候，Redis采用情性删除。在你获取某个key的时候，Redis会检查一下，这个key
如果设置了过期时间并且已经过期了，此时就会删除。
春风阁讲堂出品
---
## Page 91
6.5.Redis内存淘汰策略
6.5.1.淘汰策略介绍
1.  volatilelru
当内存不足以容纳新写入数据时，从设置了过期时间的key中使用LRU（最近最少使用）算法进行淘汰：
2.  allkeyslru:
当内存不足以容纳新写入数据时，从所有key中使用LRU（最近最少使用）算法进行淘汰。
3.volatile1fu:
4.0版本新增，当内存不足以容纳新写入数据时，在过期的key中，使用LFU算法进行删除key。
4. allkeyslfu:
4.0版本新增，当内存不足以容纳新写入数据时，从所有key中使用LFU算法进行淘汰：
5. volatilerandom:
当内存不足以容纳新写入数据时，从设置了过期时间的key中，随机淘汰数据：。
6.a11keys-random:
当内存不足以容纳新写入数据时，从所有key中随机淘汰数据。
7.volatilettl:
当内存不足以容纳新写入数据时，在设置了过期时间的key中，根据过期时间进行淘汰，越早过期的优先被淘汰：
8.noeviction:
默认策略，当内存不足以容纳新写入数据时，新写入操作会报错。
春风阁讲堂出品
16
---
## Page 92
6.5.2.淘汰策略演示
maxmemory20m
maxmemorypolicy noeviction
演示场景：
1.配置maxmemory-policy淘汰策略为noeviction，压测一段时间后，内内会溢出
2.配置maxmemory-policy淘汰策略为allkeys-lru，压测较长时间后，内存仍不会溢出，抽查较早的key，发现被清空了