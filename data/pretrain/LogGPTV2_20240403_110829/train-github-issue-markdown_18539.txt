I think this should be marked as feature request, but it's not as much a
request as a curious question (and a scream of pain, yes). From now on I'm
going to talk about neo4j-embedded API, not Cypher.
Since most methods on most entities return Iterables or Iterators, further
processing of the results turns into a fairly painful procedure. I don't know
whether I'm one from just a few or there are a lot of people with the same
problem, but if you could, please consider (if not replacing, at least
providing along) some methods that return Streams. Wouldn't it be great if
end-users could so something like this:  
`node.getRelationships(type, direction).map(mapper).collect(collector)`?
IMHO, switching to Stream API might even turn out to be a good choice since
there all kinds of facilities: lazy loading of huge amounts of data, short-
circuiting on some operations and so on.
Currently we are using helpers like the following across out neo4j projects:  
`StreamSupport.stream(iterable.spliterator(), false);`  
It works, but introduces some amount of boilerplate and duplicated code and,
what's more important, it's just a trivial wrapper. Knowing that Stream API
provides a fair amount of additional `Characteristic`s for optimizing
operations on streams, it seems to me that bringing this functionality to
neo4j kernel would be more effective.
P.S. By the way, let me thank you for being that close to community. Seeing as
your developers kindly address issues here and on stackoverflow/google groups
and closely communicating with user base is quite an inspiration, really.
P.P.S. This it _totally_ unrelated, but is there any possibility of
introducing a typed `getProperty()` method that could infer it's return type?
Now we have just this:`String s = (String)node.getProperty("key")`, but it
would be (again, not that important, but probably just nice) `String s =
node.getProperty("key")` or (dummy example)
`System.out.println(node.getProperty(someKey))`. Here's an excerpt
from the code we use for this:
    public  T getProperty(final String key, final T deflt) {
        Objects.requireNonNull(key);
        return (T)node.getProperty(key, deflt);
    }