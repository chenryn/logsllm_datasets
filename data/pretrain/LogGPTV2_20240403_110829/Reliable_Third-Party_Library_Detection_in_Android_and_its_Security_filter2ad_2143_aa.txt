title:Reliable Third-Party Library Detection in Android and its Security
Applications
author:Michael Backes and
Sven Bugiel and
Erik Derr
Large-scale Third-party Library Detection in
Android Markets
Menghao Li∗, Pei Wang†, Wei Wang∗, Shuai Wang†, Dinghao Wu†, Jian Liu∗§, Rui Xue‡§, Wei Huo∗§ , Wei Zou∗§
∗Key Laboratory of Network Assessment Technology, Institute of Information Engineering, Chinese Academy of Sciences, China
†College of Information Sciences and Technology, The Pennsylvania State University, University Park, PA 16802, USA
‡State Key Laboratory of Information Security, Institute of Information Engineering, Chinese Academy of Sciences, China
§School of CyberSpace Security at University of Chinese Academy of Sciences, China
{limenghao,wwei,liujian6,xuerui,huowei,zouwei}@iie.ac.cn, {pxw172,szw175,dwu}@ist.psu.edu,
Abstract—With the thriving of mobile app markets, third-
party libraries are pervasively used in Android applications.
The libraries provide functionalities such as advertising, location,
and social networking services, making app development much
more productive. However, the spread of vulnerable and harmful
third-party libraries can also hurt the mobile ecosystem, leading
to various security problems. Therefore,
third-party library
identiﬁcation has emerged as an important problem, being the
basis of many security applications such as repackaging detection,
vulnerability identiﬁcation, and malware analysis.
Previously, we proposed a novel approach to identifying third-
party Android libraries at a massive scale. Our method uses
the internal code dependencies of an app to recognize library
candidates and further classify them. With a ﬁne-grained feature
hashing strategy, we can better handle code whose package and
method names are obfuscated than historical work. We have
developed a prototypical tool called LibD and evaluated it with
an up-to-date dataset containing 1,427,395 Android apps. Our
experiment results show that LibD outperforms existing tools in
detecting multi-package third-party libraries with the presence
of name-based obfuscation,
leading to signiﬁcantly improved
precision without the loss of scalability.
In this paper, we extend our early work by investigating the
possibility of employing effective and scalable library detection
to boost the performance of large-scale app analyses in the
real world. We show that the technique of LibD can be used
to accelerate whole-app Android vulnerability detection and
quickly identify variants of vulnerable third-party libraries. This
extension paper sheds light on the practical value of our previous
research.
Keywords-Android; third-party library; software mining; code
similarity detection
I. INTRODUCTION
The mobile app markets of Android have been rapidly
growing in the past decade. By July 2015, Android has
become the largest mobile application platform, measured in
the number of available apps [2]. Third-party libraries make
app development much more convenient by offering ready-
made implementations of speciﬁc functionalities, e.g., adver-
tisement, navigation, and social network services. A previous
study shows that, in some extreme cases, an Android app can
include more than 30 different third-party libraries [3].
Widely used third-party libraries leads to new software
engineering problems that hurt the security and stability of the
The ﬁrst and second authors contributed equally to this work. Dinghao
Wu and Jian Liu are the corresponding authors. A preliminary version [1]
of this article appeared in Proceedings of the 39th ACM/IEEE International
Conference on Software Engineering (ICSE), Buenos Aires, Argentina, May
20–28, 2017.
apps. For example, with advanced reverse engineering tech-
niques, adversaries are able to tamper with popular advertising
libraries and direct the revenues to a station under their control,
while preserving the other functionalities of the original apps.
The adversaries can then publish the compromised and repack-
aged apps into an unofﬁcial Android market to lure downloads.
In this way, an attacker can contaminate a large number of apps
by just tampering with a few libraries. For another example,
when a popular social network library contains a security
vulnerability, the threat from this vulnerability would spread
to many different apps and inﬂuence tons of users.
To countermeasure the emerging threats caused by vulner-
able and harmful third-party libraries, the security community
has longed for reliable techniques to accurately identify li-
braries in mobile apps at a large scale. There are currently
two approaches to recognizing third-party libraries in Android
apps. The ﬁrst is based on whitelists of known libraries. A
whitelist is typically generated through manual analysis [4], [5]
and has to be constantly maintained to stay updated. Therefore,
it
is comprehensive,
considering that there are currently millions of mobile apps
available and new libraries keep emerging. Therefore,
the
whitelist-based method usually leads to both precision loss
and high operation cost.
is hard to guarantee that such a list
The other approach is to directly extract libraries from apps
without a priori knowledge about the libraries [6]–[10]. In the
extraction process, a mobile app is ﬁrst sliced into different
components which are regarded as library candidates. Then,
a similarity metric or a feature-based hashing algorithm is
designed to classify these candidates. If similar candidates
are found in many different applications, the candidates are
considered to be the same library, or variants of the same
library.
The second approach is currently the state of the art.
Although the results reported by historical research have been
very promising, there is still room for improvement due to
several common limitations of the existing methods. Our
investigation shows that most of these methods are heavily
dependent on Java package names and package structures for
detecting and classifying library candidates. However, package
names can be easily mangled by obfuscation and package
structures may vary in different versions of the same library.
We have recently proposed a new library detection and
classiﬁcation technique that can effectively overcome the
aforementioned limitations and improve the accuracy of third-
1
party library detection in Android apps [1]. Different from
previous work that recognizes library candidates according to
Java package names and structures, we extract the candidates
based on the reference and inheritance relations among classes
and methods, with the assistance of auxiliary information
excavated from app metadata. In contrast of others, our
method only treats Java package names and structures as
supplementary information. After collecting these candidates,
our classiﬁcation technique decides if there exist enough apps
sharing the same group of candidates. If so, that group is
considered to be large enough to represent a third-party library.
Our classiﬁcation method is implemented through a novel
feature hashing strategy, such that we can avoid pair-wise
candidate comparison, which is required by many approaches
based on binary similarity measurement. This design allows
the classiﬁer to scale to millions of Android apps. Overall,
our research provides a more general solution to the third-
party library identiﬁcation problem on Android.
In this paper, we extend and enrich the library detection
research by demonstrating the practical value of our new
library detection method. We notice that many market-wide
Android application analyses can be signiﬁcantly enhanced
and accelerated with an effective and scalable library detector.
We frame two scenarios where our library detector serves as
a boosting gadget for an important and heavy-weight Android
analysis task. In the ﬁrst scenario, we show that vulnerability
analysis for a large number of apps can be made much less
time-consuming by caching the partial analysis results of third-
party libraries, which may be included by many apps, with
only minor losses of overall analysis accuracy. In the second
scenario, our library detection method is employed to identify
defective variants of third-party libraries at a massive scale.
We have implemented our library detection method in a tool
called LibD and evaluated it with 1,427,395 apps collected
from 45 third-party Android app markets. Compared to similar
tools like LibRadar [8] and WuKong [7], LibD not only
identiﬁes a much larger number of third-party libraries from
the dataset but also ﬁnds them with better precision. We
additionally designed two application scenarios to showcase
how LibD can practically aid real-world Android analyses
performed on market-size datasets.
In summary, we make the following contributions in this
series of research:
• We developed a new third-party library identiﬁcation
technique for the Android mobile platform. Our method
can overcome various limitations shared by the majority
of previously proposed approaches. In particular, our
method is resilient to Java package name-based obfus-
cation and diversiﬁed package structures.
• We implemented our identiﬁcation technique in a tool
called LibD and tested its performance with over a
million Android apps collected from 45 different markets.
Compared to other similar tools, LibD is able to report
better results in terms of both quantity, i.e., the number
of identiﬁed third-party libraries, and quality, i.e., the
identiﬁcation precision.
• We integrated LibDinto SmartDroid, a practical Android
app vulnerability detection framework. With the help of
LibD, SmartDroid becomes 5.5 times faster.
• With LibD, we were able to identify 10,801 vulnerable
variants library from over a million of Android apps,
featuring different vulnerability patterns.
• To beneﬁt the research community, we LibD available
at https://github.com/IIE-LibD/libd.git. Other researchers
will be able to build various software engineering and
security applications based on our work.
The rest of the paper is organized as follows. We ﬁrst
discuss the limitations of the previous work that motivated our
research in Section II. We then present our third-party library
detection method and its implementation in Section III. The
experiment results are presented in Section IV. We elaborate
on two case studies in Section V and Section VI, which are to
demonstrate the practical value of third-party library detection
in different scenarios. We discuss a few potential issues in
Section VIII, review related work in Section IX, and conclude
the paper in Section X.
II. MOTIVATION
In this section, we elaborate on two major limitations of
previous research, which motivated the development of our
new third-party library identiﬁcation technique. According to
our investigation, the two limitations stem from similar design
decisions shared by existing techniques. The assumptions
behind these decisions, although valid in many cases, do
impose constraints that affect the generality of the techniques.
The ﬁrst assumption which may be problematic is that the
instances of an Android library included by different apps
have the same package name. This assumption is the basis of
the pre-clustering algorithms used in similarity-based library
identiﬁcation [9], [10]. Since these methods need to compute
the pair-wise similarity among all library candidates in the
dataset,
they have to ﬁrst partition the dataset and group
candidates that are likely to be in the same cluster; otherwise,
the classiﬁcation will not scale. Most similarity-based identi-
ﬁcation techniques use package names to tentatively cluster
the candidates before undertaking ﬁne-grained comparison.
However, using package names as a feature for clustering
becomes unreliable when obfuscation is in place. Package
name obfuscation is one of the most widely used obfuscation
methods for Java code. A recent study on Android libraries
showed that over half of the inspected instances are protected
by obfuscation techniques [3]. As a consequence, identiﬁcation
methods utilizing package names as the primary features to
detect and classify libraries are likely incapable of handling a
considerable portion of Android apps on the shelves.
Some researchers have realized that deeply depending on
package names can make the identiﬁcation method less robust.
A recently developed library detection tool called LibRadar [8]
employed an algorithm that takes package name obfuscation
into consideration. Instead of binary difﬁng, LibRadar classi-
ﬁes library candidates through feature hashing. Therefore, Li-
bRadar does not need pair-wise similarity comparison between
library candidates and does not need package names for pre-
clustering. However, LibRadar recognizes library candidates
according to the directory structures of the packages. In
2
App 1
App 2
Different versions
of the same library
Fig. 1: Variants of the same library with different package structures
particular, LibRadar requires a library candidate to be a subtree
in the package hierarchy. This is another assumption that may
not be valid in reality, because we found that a library can be
differently packaged in its different versions, as illustrated by
a real-world example in Fig. 1.
Motivated by the reasoning above, we aim to develop a
new third-party library identiﬁcation method that does not take
the two aforementioned assumptions for granted. Although
our method does not completely abandon the package-level
information, we utilize it as supplementary features in the
identiﬁcation process.
A. Overview
III. METHOD
We now outline the design of the proposed approach. As
shown in Fig. 2, the overall workﬂow consists of four steps.
We ﬁrst decompile the input app and recover the intermediate
representation (IR) of the Dalvik bytecode of the app, named
smali [11]. Information is then retrieved from the smali code
at different levels, i.e., packages, classes, and methods. We
also collect
the relations among these program elements,
including inclusion, inheritance, and invocation relations. We
then leverage the retrieved information to build the instances
of potential libraries. Note that each instance has standalone
functionality and consists of one or multiple packages. The
next step is to extract the features of each instance as the
signature for testing equivalence. In this work, we propose a
feature that is sensitive to minor code mutations while resilient
to name-based obfuscations. With a predeﬁned threshold of
occurrence, third-party libraries are identiﬁed by clustering
instances with equivalent signatures. That is, if the number of
occurrences of a feature in the dataset reaches the threshold,
we consider the corresponding code component as a library.
For efﬁcient comparison, we encode the instance feature into
a text sequence and hashes it into a short representation using
MD5.
We implemented our technique in a prototype called LibD,
which consists of 3,529 lines of Python code. We set up the
experiment environment on OpenStack, a cloud computing
platform [12]. We implemented a scheduler with 408 lines
of code to manage machines and issue tasks on this platform.
Ten virtual machines were employed to analyze Android apps
in parallel.
B. App Decompilation
The ﬁrst step of our approach is to decompile the input
Android apps. As shown in Fig. 3(a), a directory tree is
3
generated by decompiling an Android app. Each node on the
directory tree can include Java classes as well as subdirectories
(i.e., the edges to the successor nodes). Note that each tree
node with a set of class is a Java package [13]. In this research,
we group package nodes on the directory tree to recover third-
party library instances. There also exist some other nodes
that only contain subdirectories (e.g., com/tencent node
in Fig. 3(a)). These nodes are mostly ignored by our analysis.
Following the practice of previous work [7], [14]–[17], we
employ two widely used analysis tools, i.e., Apktool [18] and
Androguard [19], to decompile the input apps. Apktool is
used to extract the tree structures of the decompiled apps.
We recover the whole directory structures with all classes
in each directory. In addition, we use Androguard to ﬁnd
relations between packages, classes, and methods. Three kinds
of relations are collected to help us infer boundaries of closely
coupled components in an app. We now introduce each relation
in detail.
• Inclusion relation. The ﬁrst relation describes the parent-
child structures on a directory tree. Considering the
path that leads from com/tencent to /connect in
Fig. 3(a), such path represents an inclusion relation.
• Inheritance relation. We also record the program in-
heritance relations; inheritance relations can be directly
read from the decompiled smali code. Fig.3(b) shows the
inheritance relations between package /common and two
other packages.
• Call relation. This relation represents the inter-package
function calls. Fig.3(c) describes the call relation be-
tween packages /connect/auth, /tauth and /
open. For example, by identifying the function call be-
tween methods in Auth..$..listener.smali and
AuthActivity.smali, /tauth (i.e., callee) and /
connect/auth (i.e., caller) are considered to have the
call relation.
C. Library Instance Recovery
One of the key contributions in this paper is our systematic
approach to recovering the boundaries of third-party libraries.
We introduce a concept called homogeny package union,
which is the basic unit in app partition. We further group
homogeny package unions into different components based
on inter-union function calls. Each component is expected
to be highly cohesive while loosely coupled with the rest
of packages in the app. Such components are considered to
candidates of libraries. We now detail our technique to recover
library instances in a two-step approach.
1) Homogeny Package Union Construction: The ﬁrst step is
to ﬁnd highly-correlated packages regarding the inclusion and
inheritance relations (§III-B). Before discussing our algorithm,
we ﬁrst deﬁne three terms as follows.
Deﬁnition 1: Homogeny package. Let Pi and Pj be two
packages of the input app, we say Pi and Pj are homogeny
packages if there are inclusion or inheritance relations between
them.
Deﬁnition 2: Homogeny graph. A homogeny graph is a
directed graph H = (V, E), where V is the set of all the app
packages, and E is the set of inclusion or inheritance relations.
Fig. 2: The architecture of LibD
Fig. 3: Packages in a typical app directory tree and three critical relations.
Deﬁnition 3: Homogeny package union. A homogeny
package union consists of one or several homogeny packages;
each union is a weakly connected component on the homogeny
graph. A weakly connected component is a maximal connected
subgraph of the undirected graph resulted from replacing
all the directed edges with undirected edges in the original
directed graph.
Algorithm 1 describes how we ﬁnd homogeny package
unions. We construct the homogeny graph with every package
in the app and their inclusion and inheritance relations as
the graph edges (line 2 and lines 5–6). Note that before
constructing the graph, we ﬁrst eliminate two kinds of special
packages (lines 3–4). The ﬁrst elimination (line 3) rules out
packages at the root of a directory tree. According to our
observation, an app usually does not contain classes in the
root directory. Instead, developers typically deploy code bases
starting from the second level of a directory tree. Studies on
2,000 popular apps found that only three apps have classes
at directory roots. Further investigation shows all of these
class are used to impede reverse engineering. The second
elimination (line 4) trims off all standard Android libraries
(e.g., android/support/v4), as our main focus is on the