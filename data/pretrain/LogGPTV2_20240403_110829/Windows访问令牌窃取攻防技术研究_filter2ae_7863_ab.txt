我的目标是找到允许令牌操作的`SYSTEM`进程在安全设置上存在哪些不同，我决定比较一下`winlogon.exe`以及`spoolsv.exe`。这两个进程都是`SYSTEM`进程，但我只能从`winlogon.exe`中窃取`SYSTEM`访问令牌。
**Session ID**
我使用[Process Explorer](https://docs.microsoft.com/en-us/sysinternals/downloads/process-explorer)打开这两个进程，尝试手动探索这两者之间的不同点。我记得Nick在推特中提到过`winlogon.exe`的“Session
ID”为`1`，这是最大的不同。
我将该进程与其他“友好型”进程作比较，发现其他进程的Session ID都为`0`。不幸的是，这并不是我想寻找的不同点。
图. 比较两个“友好型”进程的Session ID
**Process Explorer中的高级安全设置**
我决定深入分析`winlogon.exe`以及`spoolsv.exe`在高级安全设置（Advanced Security
Settings）上的区别。我注意到这两者在管理员组的高级权限上有所不同。对于`winlogon.exe`，管理员组具备“Terminate”、“Read
Memory”以及“Read Permissions”权限，而`spoolsv.exe`上的管理员组并不具备这些权限。
我试着在`spoolsv.exe`上应用所有权限，然后尝试窃取访问令牌。不幸的是，这种方法并不能弹出`SYSTEM`命令行窗口。
我试着再次启动/停止进程，想看一下进程启动时能否应用这些权限，同样以失败告终。
**Get-ACL**
我决定在PowerShell中使用[Get-ACL](https://docs.microsoft.com/en-us/powershell/module/microsoft.powershell.security/get-acl?view=powershell-6)来观察`winlogon.exe`以及`spoolsv.exe`所对应的安全描述符。
图. `winlogon.exe`及`spoolsv.exe`对应的Get-ACL结果
这两个进程对应的`Owner`、`Group`以及`Access`似乎完全相同。接下来我决定使用[ConvertFrom-SddlString](https://docs.microsoft.com/en-us/powershell/module/microsoft.powershell.utility/convertfrom-sddlstring?view=powershell-6)来解析`SDDL`（Security Descriptor Definition
Language，安全描述符定义语言），来分析其中的不同点。
图. `winlogon.exe`及`spoolsv.exe`对应的SDDL
`BUILTIN\Administrators`组对应的`DiscretionaryAcl`似乎相同。这里我有点无计可施，但还是想最后看一下Process
Explorer。
**TokenUser以及TokenOwner**
再次在Process Explorer中观察高级安全设置，我发现所有“友好型”进程的`Owner`字段对应的都是本地管理员组。
图. `winlogon.exe`及`unsecapp.exe`对应的`TokenOwner`字段
我将这个字段与无法窃取访问令牌的其他`SYSTEM`进程作比较，我发现`Owner`的确是一个不同的因素。
图. `spoolsv.exe`及`svchost.exe`的`TokenOwner`字段
我的小伙伴（@[jaredcatkinson](https://twitter.com/jaredcatkinson)）还提到一点，Process
Explorer中的`Owner`字段实际上对应的是`TokenOwner`，并且我们可以使用[GetTokenInformation()](https://docs.microsoft.com/en-us/windows/win32/api/securitybaseapi/nf-securitybaseapi-gettokeninformation)来提取该信息。
我还在GitHub上找到一个非常方便的PowerShell脚本（[Get-Token.ps1](https://gist.github.com/vector-sec/a049bf12da619d9af8f9c7dbd28d3b56)），可以用来枚举所有进程以及线程令牌。
图. 利用`Get-Token.ps1`解析出来的`winlogon.exe`所对应的令牌对象
观察`winlogon.exe`，我们可以看到`UserName`以及`OwnerName`字段的值有所不同。分析该脚本的具体实现，我发现这些字段对应的是[`TOKEN_USER`](https://docs.microsoft.com/en-us/windows/win32/api/winnt/ns-winnt-token_user?redirectedfrom=MSDN) 以及[
`TOKEN_OWNER` ](https://docs.microsoft.com/en-us/windows/win32/api/winnt/ns-winnt-token_owner?redirectedfrom=MSDN)结构。
`TOKEN_USER`结构标识与访问令牌相关的用户，`TOKEN_OWNER`标识利用该访问令牌创建的进程的所有者。这似乎是允许我们从某些`SYSTEM`进程中窃取访问令牌的主要不同点。
前面提到过，对于某些`SYSTEM`进程，`OpenProcess()`可以执行成功，但`OpenProcessToken()`会返回拒绝访问错误。现在我可以回答这个问题，这是因为我并不是这些进程的`TOKEN_OWNER`。
如下一行代码可以用来解析`Get-Token`的输出，寻找`UserName`为`SYSTEM`，但`OwnerName`不为`SYSTEM`的对象。然后抓取每个对象的`ProcessName`及`ProcessID`信息。
    Get-Token | Where-Object {$_.UserName -eq ‘NT AUTHORITYSYSTEM’ -and $_.OwnerName -ne ‘NT AUTHORITY\SYSTEM’} | Select-Object ProcessName,ProcessID | Format-Table
非常棒，我们应该能够从这些`SYSTEM`进程中窃取访问令牌，模拟`SYSTEM`访问令牌。接下来让我们验证一下这个猜想。
我手动遍历了这个PID列表，发现大多数进程的确能够用于控制访问令牌，然而还是存在一些例外进程。
图. 对`wininit.exe`和`csrss.exe`执行`OpenProcess()`时会返回拒绝访问错误
**Protected Process Light**
前面提到过，某些`SYSTEM`进程在我调用`OpenProcess()`时，会返回拒绝访问错误，无法窃取令牌。我使用Process
Explorer观察这些进程，发现了可能解释该行为的一个共同属性：`PsProtectedSignerWinTcb-Light`。
仔细阅读[Alex
Ionescu](https://twitter.com/aionescu?lang=en)发表的一篇[研究文章](http://www.alex-ionescu.com/?p=34)以及StackOverflow上的一篇[文章](https://stackoverflow.com/questions/40698608/openprocess-is-it-possible-to-get-error-access-denied-for-process-query-limited)，我了解到这个`Protected`属性与PPL（Protected Process Light）有关。
如果指定的访问权限为`PROCESS_QUERY_LIMITED_INFORMATION`，那么PPL只允许我们在该进程上调用`OpenProcess()`。我们的测试程序需要以`PROCESS_QUERY_INFORMATION`访问权限来调用`OpenProcess()`，以便返回的句柄能够与`OpenProcessToken()`配合使用，因此这样就会出现“System
Error — Code 5”（拒绝访问）错误。
在测试检测机制时，我了解到`OpenProcessToken()`所需的最小访问权限为`PROCESS_QUERY_LIMITED_INFORMATION`，这与微软提供的[官方描述](https://docs.microsoft.com/en-us/windows/win32/api/processthreadsapi/nf-processthreadsapi-openprocesstoken)有所不同。我修改了调用`OpenProcess()`期间所需的访问权限，最终成功拿到了`SYSTEM`级别的命令提示符。
## 0x05 测试结果
当我们使用`PROCESS_QUERY_INFORMATION`访问权限对某些`SYSTEM`进程调用`OpenProcess()`时，我们可以成功窃取这些进程的访问令牌。这些进程包括：
    dllhost.exe
    lsass.exe
    OfficeClickToRun.exe
    svchost.exe（只适用于某些PID）
    Sysmon64.exe
    unsecapp.exe
    VGAuthService.exe
    vmacthlp.exe
    vmtoolsd.exe
    winlogon.exe
对于受PPL保护的某些`SYSTEM`进程，如果我们以`PROCESS_QUERY_LIMITED_INFORMATION`访问权限调用`OpenProcess()`，还是能够窃取访问令牌，这些进程包括：
    csrss.exe
    Memory Compression.exe
    services.exe
    smss.exe
    wininit.exe
其中有些进程可能与我的Windows开发环境有关，我建议大家在自己的环境中进行测试。
## 0x06 总结
稍微总结一下，我们可以从`winlogon.exe`中窃取访问令牌，模拟`SYSTEM`上下文。在本文中，我深入介绍了如何利用SACL以及Windows安全日志来检测对访问令牌的操作行为。
我也尝试寻找与`winlogon.exe`包含相似属性的其他`SYSTEM`进程，本文重点介绍了寻找这些进程的方法，最终找到了能够窃取访问令牌的其他`SYSTEM`进程。此外，我还深入研究了为什么某些进程能够用于操控访问令牌，而有些令牌无法完成该任务的具体原因。
为了从`SYSTEM`进程中窃取访问令牌，该进程必须满足如下条件：
  * 如果想在某个进程上调用`OpenProcessToken()`，那么`BUILTIN\Administrator`必须为`TokenOwner`；
  * 如果`SYSTEM`进程受PPL（Protected Process Light）保护，那么我们必须使用`PROCESS_QUERY_LIMITED_INFORMATION`访问权限来调用`OpenProcess()`。
希望大家能从本文中了解关于Windows API、SACL、Windows进程、Windows令牌以及控制访问令牌的一些知识