title:Graybox Stabilization
author:Anish Arora and
Murat Demirbas and
Sandeep S. Kulkarni
Graybox Stabilization 
Ankh Arora* 
Murat Demirbas* 
Sandeep S. Kulkarnil 
*Computer and Info. Science 
The Ohio State University 
Columbus, Ohio 432 10 USA 
Abstract 
Research  in system stabilization has traditionally re- 
lied  on  the  availability  of  a  complete  system  imple- 
mentation.  As  such,  it would appear that the scalabil- 
ity  and  reusability  of  stabilization  is  limited  in  prac- 
tice.  Towards  redressing  this  perception,  in  this pa- 
per;  we  show  f o r   the first  time  that  system  stabiliza- 
tion  may  be  designed knowing  only  the  system  speci- 
fication  but  not  the  system  iniplementation.  We  refer 
to stabilization designed  thus as being  “gruybox” and 
idenrib  “local everywhere-eventually specijications ” as 
being  anienable  to  design  of  graybox  stabilization. 
We illustrate the design  of  graybox stabilization using 
tiniestanydxzsed distributed mutual exclusion as our ex- 
an&. 
1  Introduction 
Research  in stabilization  [8-113  has traditionally re- 
lied on the availability of a complete system  implemen- 
tation.  The standard approach to reasoning uses knowl- 
edge of all implementation  variables and actions to ex- 
hibit  an  “invariant” condition  such that if  the system  is 
properly initialized then  the invariant is always satisfied 
and  if  the  system  is  placed  in  an  arbitrary  state  then 
continued execution  of  the system eventually reaches a 
state from where the invariant is always satisfied.  Like- 
wise,  the  generic  methods  for  designing  stabilization 
[ 1,3,12,18] also assume implementation-specific details 
as  input:  13, 121 assume  the  availability  of  the  imple- 
mentation  invariant, [ 11 relies on  the knowledge of  the 
+I-614-292-1836 
; 
F a :  
(I 
http://www.cis.ohio-state.edu/{- 
Email:  { anish,demirbas} @cis.ohio-state.edu, PI:EMAIL; 
Td: 
; 
Web: 
demirbas}, 
http://www.cse.msu.eduhandeep  ; This work was partially sponsored 
by  NSA Grant MDA904-96-1-01 I I ,   NSF Grant NSF-CCR-9972368, 
an Ameritech Faculty Fellowship, and grants from Microsoft Research 
and Michigan State University. 
+I-614-292-291 1 
ankh,- 
+Computer Science and Eng. 
Michigan State University 
East Lansing, Michigan 48824 USA 
implementation  actions,  and  [ 181 takes  as input  a “lo- 
cally checkable” consistency predicate derived from im- 
plementation. 
favor  of  “graybox”  knowledge- 
The  apparently  intimate  connection  between  stabi- 
lization and the details of implementation has raised the 
following serious concerns:  (1) Stabilization is not fea- 
sible  for many  applications whose  implementation de- 
tails are not available, for instance, closed-source appli- 
cations.  (2) Even  if  implementation  details  are  avail- 
able,  stabilization  is  not  scalable as  the  complexity  of 
calculating the  invariant of  large  implementations may 
be exorbitant. (3) Stabilization lacks reusability since it 
is specific to a particular implementation. 
Towards  addressing  these  concerns, 
in  this  pa- 
per,  we  show 
that  system  stabilization  may  be 
achieved  without  knowledge  of  implementation  de- 
tails.  We  eschew  “whitebox”  knowledge-of 
system 
implementation-in 
of system specification-for 
the design of stabilization. 
Since specifications  focus more  on  “what”  as opposed 
to  “how”  and  since  implementations  usually  introduce 
new control and data details,  specifications are typically 
more  succinct  than  implementations,  and  thus,  gray- 
box  stabilization offers the promise of scalability.  Also, 
since specifications admit multiple implementations and 
since system components are often reused, graybox sta- 
bilization offers the promise of  scalability and reusabil- 
ity. 
Contributions of the paper.  To the best of our knowl- 
edge,  this  is  the  first  time  that  system  stabilization  is 
shown to be provable without whitebox knowledge.  As 
one piece of evidence, we offer the following quote due 
to Varghese [ 181 (parenthetical comments are ours): 
In  fact,  the  only  method  we know to prove  a 
behavior stabilization result (i.e., stabilization 
with respect to system specification) is to first 
prove a corresponding execution  stabilization 
result (i.e., stabilization with respect to system 
implementation) . . . 
0-7695-1101-5/01 $10.00 0 2001 IEEE 
389 
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 03:58:03 UTC from IEEE Xplore.  Restrictions apply. 
Secondly,  in  this  paper,  we  introduce  the  con- 
cept  of  everywhere  speciJications  (and  the  more  gen- 
eral  everywhere-eventually speciJications),  which  are 
amenable to  the design  of  graybox stabilization.  Intu- 
itively  speaking, these  specifications  demand that their 
implementations  always  (respectively,  eventually)  sat- 
isfy  them  from  every  state.  By  designing  a  system 
“wrapper” that achieves stabilization at the level of such 
a specification, it follows that every system  implemen- 
tation satisfying that specification achieves stabilization 
by  using  that  wrapper.  Further,  for  effective  design 
of  stabilization  in  distributed  systems,  we  identify  the 
subclass of local everywhere speciJications (resp., local 
everywhere-eventually specijications):  these  specifica- 
tions  are decomposable into  parts  each  of  which  must 
be  always  (resp., eventually) satisfied by  some system 
process from all of its states without relying on its envi- 
ronment (including other processes). 
Thirdly, we illustrate the design of graybox stabiliza- 
tion  in  the context  of  timestamp-based distributed  mu- 
tual  exclusion  (TME).  Since TME  itself  is  not  an  ev- 
erywhere specification, we present a local everywhere- 
eventually  specification  Lspec  that  satisfies TME, and 
then  design  a wrapper  W  for Lspec  such that  for  any 
implementation  that  satisfies Lspec, wrapping that  im- 
plementation  with W yields  stabilization of that imple- 
mentation.  By way of example, we observe that Ricart- 
Agrawala ME and Lamport ME programs satisfy Lspec, 
and, hence, W adds stabilization to both of them without 
knowing how they are implemented. 
Organization of the paper.  In Section 2, we show that 
local everywhere-eventually specifications are amenable 
to  design  of  graybox  stabilization. 
In  Section  3,  we 
present our “local everywhere-eventually  specification”, 
Lspec, for TME. Then, in Section 4, we design the wrap- 
per  W  for  Lspec.  In  Section  5 ,  we  show that  Ricart- 
Agrawala’s  TME  program  [14],  and  Lamport’s  TME 
program  [ 131 satisfy  Lspec, and  hence  W  adds  stabi- 
lization to both of them.  We  make concluding remarks 
in Section 6. 
2  Graybox Design 
In  this  section,  after  some  preliminary  definitions 
that  express  both  specifications  and  implementations 
in  uniform  terms,  we justify  why  “local  everywhere- 
eventually  specifications”  are  amenable  to  design  of 
graybox stabilization. 
Systems: Specifications and Implementations.  Let C 
be a state space. 
DeJnition.  A system S  is a set of (possibly  infinite) se- 
quences over C, with at least one sequence starting from 
every  state in  C, and a set of  initial states chosen from 
C. 
%‘e  refer  to  the  state  sequences of  S  as  its  compu- 
tations. Intuitively, the requirement that S contain some 
computation starting from every C state captures that the 
computations of  S are expressed  fully, albeit in the ab- 
sence  of  faults,  S  only  exhibits computations that  start 
from. its initial  states.  Also, we refer to an abstract sys- 
tem  as a spec$cation,  and  to  a  concrete  system as an 
inipleinentation. 
Remark: Of course, implementations often use some 
components of states that are not used  by  specifications 
(intuitively, such components are “hidden” from specifi- 
cations). In our set up, this is captured by allowing spec- 
ifications to be  independent  of  the  values  of  such  state 
components.  For example, an  implementation  may use 
a set  or a queue (cf.  Ricart-Agrawala’s and Lamport’s 
programs in Section 5) whereas a specification does not 
conlain any such variables.  (End of Remark.) 
Henceforth,  let  C  be  an  implementation  and  A  a 
specification. 
Defizition.  C  iniplenzents A, denoted [C  C  .4]initr iff 
every computation of C that starts from some initial state 
of  C  is  a  computation of  A  starting  from some initial 
state of A. 
Dejinition.  C  eveiywhere  inzplenients  -4,  denoted 
A], iff every computation of C is a computation 
[C 
pf A. 
Definition.  C everywhere-eventually itnplenients A, de- 
noted  [C C  C*A], iff  every  computation of  C  can  be 
written  as an  arbitrary  finite prefix  from the state space 
C fldlowed by  a computation of A4. 
Dejinitioti.  C  is stabilizing to A  iff  every  computation 
of C has a suffix that is a suffix of some computation of 
4  that starts at an initial  state of A. 
Note  that  the  definition  of  stabilization  allows  the 
possibility that A is stabilizing to A. 
2.1  Graybox stabilization via 
local everywhere-eventually specifications 
Given  a specification  A, the  graybox approach is  to 
design  a  wrapper  W  such that  adding W  to  A  yields 
a  system  that  is stabilizing  to  A.  Its  goal  is  to ensure 
for any C, which  implements A, adding W to C would 
yield  a  system  that  also  stabilizes  to  A.  This  goal  is 
however  not  readily  achieved  for all  specifications.  In 
fact, even for specifications A where A is stabilizing to 
A ‘we may observe: 
C implements A and A is stabilizing to A 
does not imply that C is stabilizing to A. 
By  way  of counterexample, consider Figure  1.. Here 
SO,  sl, s2,  s 3 , .  . . and s* are states in  C, and SO is the 
390 
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 03:58:03 UTC from IEEE Xplore.  Restrictions apply. 
initial  state of  both  A and C. In  both  A and C, there 
is only one computation that starts from the initial state, 
namely “SO,  sl, s2, s 3 , .  . .”; hence, [C 
A]init. But 
“s*, s2,  s 3 , .  . .”  is  a  computation  that  is  in  A  but  not 
in C. Letting F  denote a transient state corruption fault 
that yields s* upon  starting from SO,  it  follows  that  al- 
though  A is  stabilizing  to A if  F  occurs initially,  C is 
not. 
^* 
/ s* 
F,,,‘ 
S l  
@>* 
- s2 
- s3 
Figure 1. [C + AIinit 
We  are  therefore  led  to  considering  the  following 
class of specifications. 
Definition.  Everywhere spec9cations  are specifications 
that demand their implementations to everywhere imple- 
ment  them.  That is, an everywhere specification A de- 
mands that its implementations C also satisfy [C C A]. 
Definition.  Everywhere-eventually  specifications  are 
specifications  that  demand  their  implementations  to 
everywhere-eventually  implement  them.  That  is,  an 
everywhere-eventually  specification A demands that its 
implementations C also satisfy [C C C*A]. 
We show that these specifications satisfy the goals of 
graybox design. First, observe that: 
iC  C A] and A is stabilizing to A 
does imply that C is stabilizing to A. 
Next,  we prove the more  general  case:  If  adding  a 
wrapper  W  to an  everywhere specification  A yields  a 
system that  is  stabilizing  to  A, then  adding  W to  any 
everywhere implementation C of A also yields a system 
that is stabilizing to A. Our formulation of “addition” of 
one system to another in terms of the operator  0 (pro- 
nounced “box”) only assumes that  0 is monotonic  in 
both arguments with respect to everywhere implements. 
That is, for systems X ,  Y and 2 :  
Proposition 0. 
[X c  YI  =+  ( [ X  0 z E  Y  0 21 
~ ~ ~ O X C ~ O Y I
)
 U 
Using Proposition 0, we prove the following lemma. 
Lemma 1. 
([C E  AI  A  [W’ c W ] )  
=+  [(C 0 W’) c  (A  U Wl 
0 
From the lemma, our goal follows trivially: 
Theorem 2. 
(Stabilization via everywhere specifications) 
If  [C  C A], A  0 W is stabilizing to A, [W’ 2  W ]  
then  C  0 W’ is stabilizing to A. 
0 
Corollary 3. 
C*A], [C*A 5 C*(A I] W ) ] ,  
If  [C 
A  I]  W is stabilizing to A, and [W’ C W ]  