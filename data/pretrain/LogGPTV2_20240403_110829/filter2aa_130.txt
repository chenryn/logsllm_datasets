JDBC内存Dump密码 - 1
JDBC内存Dump密码
引⾔
在红队⾏动中经常会遇到拿到 Webshell 后找不到数据库密码存放位置或者是数据库密码被加密的情况(需要逆向代码查找解密逻辑)。
在此提出两种在从运⾏时获取所有的数据库连接信息(密码)的⽅式
第⼀种⽅式实现效果
服务端数据库加密 Demo
成功获取到解密后的数据库密码  插件已经集成到哥斯拉 https://github.com/BeichenDream/Godzilla/releases/
JDBC内存Dump密码 - 2
实现原理⽅式⼀
⼀般不使⽤数据库连接池情况下 我们通常使⽤ Java 的⼯⼚类 DriverManager 获取数据库连接
Java
跟进逻辑
Java
从 getConnection 的具体实现逻辑来看 主要是从静态变量 registeredDrivers 变量遍历所有已经注册的数据库驱动并调⽤数据库驱动的
connect ⽅法获取数据库连接 如果数据库驱动返回 NULL 或抛出异常则再次循环 如果数据库驱动返回 Connection 则退出循环返回数
据库连接
这个时候我们就可以想到假如我们⾃⼰注册⼀个数据库驱动上去是不是就能获取到数据库密码了
实现代码如下
这⾥需要注意两点
⼀.  在遍历 registeredDrivers 时会调⽤ isDriverAllowed ⽅法判断调⽤者的 ClassLoader 是否为数据库驱动的 ClassLoader ⽗级或者
同级  Java 为什么这么设计呢 因为获取数据库驱动涉及到了双亲委派相关的知识  这⾥举例 A,B ClassLoader,如果 A 加载了⼀个数据
库驱动,⽽ B 获取到 A 的加载数据库驱动 会导致在 A 被 GC 回收的时候会因为 B 引⽤了 A 导致 A 不会被释放  所以如果我们想获取当前
进程所有的容器的数据库密码 我们需要把我们的驱动加载到系统类上
DriverManager.getConnection(DB_URL,userName,aes(password));
    @CallerSensitive
    public static Connection getConnection(String url,String user, String password)
              private static Connection getConnection(String url, 
.
java util.Properties info, Class caller)
JDBC内存Dump密码 - 3
⼆. 我们要把我们的数据库驱动放在第⼀位
很简单是吧 有了这个东东我们不需要再反编译代码去找密钥了
但是这种⽅法只适⽤于调⽤ Java 官⽅提供的 DriverManager ⼯⼚类
实现原理—⼆
在上⾯我们知道数据库驱动都要兼容 JDBC 的接⼝也就是要实现 Driver 接⼝
第三⽅数据库连接池也遵守了 JDBC 的规则 数据库连接池会调⽤对于驱动的 Driver.connect ⽅法获取数据库连接
所以我们可以使⽤ Java Agent 直接去 hook 所有已经实现了 Driver 接⼝的类
代码已开源在 Github 
bingo
输⼊命令 java -jar DatabaseInject.jar list 获取所有正在运⾏的 JVM
找到要注⼊的进程 这⾥以 tomcat 为例(什么都可以注只要是实现了 jdbc 的接⼝)
再次刷新⽹⻚访问数据库
https://github.com/BeichenDream/InjectJDBC
JDBC内存Dump密码 - 4
成功的获取了数据库解密后的密码