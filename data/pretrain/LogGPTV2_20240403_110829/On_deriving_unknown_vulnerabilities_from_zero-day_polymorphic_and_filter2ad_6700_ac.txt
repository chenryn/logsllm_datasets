for Slammer.
Strong, explicit equality
predicates are discovered
when a CMP, CMPS,
SCAS, or TEST instruction
is followed by any
instruction that checks
the Zero Flag (ZF) and
ZF indicates equality.
Examples are conditional
equality jumps such as
JE, conditional moves,
or “REP SCAS”.
Operations such as ADDs,
other arithmetic operations,
bit shifts, or logical bit
operations simply create
a new Operation expression
which can be written into
the slot for QuadExpressions
and will be encapsulated as
a QuadExpression the next
time it is read. The same
applies to DoubleExpressions,
and 8-bit operations are
straightforward.
Assembly Example
mov edx,[ECX]
What DACODA Does in C++-like Pseudo-code
WriteRegisterByteExpr(INDEXOFEDX, 0, ReadMemByteExpr(ecx+0));
WriteRegisterByteExpr(INDEXOFEDX, 1, ReadMemByteExpr(ecx+1));
WriteRegisterByteExpr(INDEXOFEDX, 2, ReadMemByteExpr(ecx+2));
WriteRegisterByteExpr(INDEXOFEDX, 3, ReadMemByteExpr(ecx+3));
mov al,bh
WriteRegisterByteExpr(INDEXOFEAX, 0,
ReadRegisterByteExpr(INDEXOFEBX, 1));
mov [EBP+10],cl
mov dx,[ECX]
WriteMemByteExpr(ebp+10, ReadRegisterByteExpr(INDEXOFECX, 0));
DoubleExprFromMem = MakeNewDoubleMem(ecx);
AddrResolved = MakeNewDoubleRegister(INDEXOFECX);
ExprForDX = new Lookup(AddrResolved, DoubleExprFromMem);
WriteDoubleRegister(INDEXOFEDX, ExprForDX);
mov edx,[EBP+ﬀﬀfbf4]
ExprForEDX = MakeNewQuadMem(ebp+0xﬀﬀfbf4);
WriteQuadRegister(INDEXOFEDX, ExprForEDX);
jmp [42cfa23b+EDX<<2] AddrResolved = new Operation(“ADD”,
MakeNewQuadConstant(0x42cfa23b),
new Operation(“SHR”, MakeNewQuadRegister(INDEXOFEDX),
cmp edx,[ESI]
je 7123abcd
add eax,[EBX]
shr
eax,3
new Constant(2)));
AddToListOfKnownPredicates(“EQUAL”, AddrResolved,
MakeNewQuadConstant(0x42cfa23b+edx<<2));
ZFLAG.left = MakeNewQuadRegister(INDEXOFEDX);
ZFLAG.right = MakeNewQuadMem(esi);
if ((ZFLAG.right != NULL) &&
(ZFLAG.left == NULL)) ZFLAG.left = new Constant(edx);
if ((ZFLAG.left != NULL) &&
(ZFLAG.right == NULL)) ZFLAG.right = new Constant([esi]);
P = new Predicate(“EQUAL”, ZFLAG.Left, ZFLAG.Right);
if (ZF == 1 && ((ZFLAG.Left != NULL) || (ZFLAG.Right != NULL)))
AddToListOfKnownPredicates(P);
WriteQuadRegister(INDEXOFEAX, new Operation(
“ADD”, MakeNewQuadRegister(INDEXOFEAX),
MakeNewQuadMem(ebx));
WriteQuadRegister(INDEXOFEAX, new Operation(
“SHR”, MakeNewQuadRegister(INDEXOFEAX),
new Constant(3));
mov [ECX],eax
WriteQuadMem(ecx,
MakeNewQuadRegister(INDEXOFEAX));
Table 2: Special Rules and Example Instructions.
Exploit
OS
LSASS (Sasser)
Windows XP
DCOM RPC (Blaster)
Windows XP
Workstation Service
Windows XP
RPCSS
Windows Whistler
SQL Name Resolution (Slammer) Windows Whistler
Windows Whistler
SQL Authentication
Windows 2000
Zotob
Windows Whistler
IIS (Code Red II)
RedHat Linux 6.2
wu-ftpd Format String
rpc.statd (Ramen)
RedHat Linux 6.2
innd
RedHat Linux 6.2
Apache Chunk Handling (Scalper) OpenBSD 3.1
ntpd
Turkey ftpd
FreeBSD 4.2
FreeBSD 4.2
Port(s)
445 TCP
135 TCP
445 TCP
135 TCP
1434 UDP
1433 TCP
445 TCP
80 TCP
21 TCP
111 & 918 TCP
119 TCP
80 TCP
123 TCP
21 TCP
bid [52] Vulnerability Discovery
Class
10108
Buﬀer Overﬂow
8205
Buﬀer Overﬂow
9011
Buﬀer Overﬂow
8459
Buﬀer Overﬂow
5311
Buﬀer Overﬂow
5411
Buﬀer Overﬂow
14513
Buﬀer Overﬂow
2880
Buﬀer Overﬂow
1387
Format String
1480
Format String
Buﬀer Overﬂow
1316
Integer Overﬂow 5033
2540
Buﬀer Overﬂow
Oﬀ-by-one B.O.
2124
eEye
Last Stage of Delirium
eEye
eEye
David Litchﬁeld
Dave Aitel
Neel Mehta
eEye
tf8
Daniel Jacobiwitz
Michael Zalewski
N. Mehta, M. Litchﬁeld
Przemyslaw Frasunek
Scrippie
Table 3: Exploits Analyzed by DACODA.
Table 1 shows how QuadExpressions are handled. A more
straightforward way to handle QuadExpressions would be to
place a pointer to the QuadExpression into all four bytes’
expressions for that 32-bit word and let the index of each
byte determine which of the four bytes in the QuadExpres-
sion it should reference, which is how DoubleExpressions are
handled. For QuadExpressions, however, this causes numer-
ous performance and memory consumption problems. The
scheme in Table 1 is more eﬃcient but may drop some in-
formation if, for example, a QuadExpression is written to a
register, then a labeled byte is written into a higher order
byte of that register, and then the QuadExpression is read
from the register. From our experience such cases should be
extremely rare, and it would be relatively straightforward to
ﬁx but Table 1 is the implementation used to generate the
results in Section 4.
4. EXPLOITS ANALYZED BY DACODA
This section will summarize the results produced by DA-
CODA, detail Code Red II as a concrete example, and then
enumerate complexities, challenges, and facts worth noting
about the exploits analyzed. We adopt the idea of tokens
from Polygraph [28] and consider a byte to be tokenizable if
DACODA discovers some strong, explicit equality predicate
about it.
4.1 Summary
Table 3 summarizes the exploits that DACODA has an-
alyzed. All of the Windows exploits except one (SQL Au-
thentication) were actual attacks or worms from the Internet
to DACODA honeypots, while all others were performed by
the authors. Identifying the packets involved in each attack
was done manually by inspection of the dumped network
traﬃc. Since all packets for each attack were either UDP or
TCP we used a summary algorithm that used knowledge of
these protocols so that the results could remain more intu-
itive by not including predicates about the transport layer
protocol header, unless they also include labeled bytes from
a data ﬁeld (such as what happens in reverse DNS lookups).
When DACODA discovers a predicate, the Current Priv-
ilege Level (CPL) of the processor is checked to determine
whether the predicate is discovered while running kernel-
space code or while running user-space code. These results
are presented in Table 4. The CR3 register in the Pentium
is used to index the base of the page table of the current
task and is therefore a satisfactory replacement for a pro-
cess ID (PID). Table 4 also shows the results generated by
DACODA as to how many diﬀerent processes are involved
in predicate discovery and are therefore an integral part of
understanding the attack. This table includes not only con-
ventional processes but also processes that run only in kernel
space such as the Windows SYSTEM process.
Table 5 summarizes the results from preliminary, naive
signature generation using DACODA. Note that we make
no strong claims as to DACODA’s completeness because it
is possible that a byte may have a strong equality predicate
that is not due to an explicit check for equality. It is also
possible that tokens discovered by DACODA are not really
invariant for various reasons described later in this section.
Also, multiple bytes may be involved with a single predicate
and a single byte may be involved with multiple predicates,
so there is not a one-to-one relationship between bytes and
predicates. Surprisingly, some predicates are repeated such
as the “GET” token from Code Red II which is checked four
times in four diﬀerent places by the IIS web server. The
numbers for predicates and tokens are provided here as an
approximation to get a sense of the design space and may
vary slightly from the true invariant signatures for these
exploits. The format for Table 5 is such that “3(18)” means
that there are three tokens that are 18 bytes in length.
Validation of the results was done, to the extent possible,
by comparing the results to our knowledge of the exploits
and the protocols involved.
4.2 Code Red II as a Concrete Example
The UNICODE encoding of the bogus Structured Excep-
tion Handling pointer and payload are captured by DA-
CODA’s symbolic expressions, as is the fact that the row
spaces and ranges of , γ, and π are not disjoint sets of
bytes. DACODA also shows that the exploit vector permits
a great deal of polymorphism.
The exploit vector for Code Red II is a GET request:
GET /default.ida?XXXXXXXXXXXXXXXXXXXXXXXXXXXX
XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX
XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX
XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX
XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX
XXXXXXXXXXXXXXXX%u9090%u6858%ucbd3%u7801
%u9090%u6858%ucbd3%u7801%u9090%u6858%ucbd3
%u7801%u9090%u9090%u8190%u00c3%u0003%u8b00
%u531b%u53ff%u0078%u0000%u00=a HTTP/1.0\x0d\n.
the
tokens
equality
“.ida?”,
DACODA discovers
strong
“GET\x20/”,
predicates
for
the UNI-
CODE tokens “%u”,
spaces, new line characters, and
“%u00=a\x20,HTTP/1.0\x0d\n”. Only a single “%u” is
necessary to cause ASCII to UNICODE conversion and
overﬂow the buﬀer. The “.ida” ﬁle can have any ﬁlename,
real or not, and can also end with “.idq”. Thus the
following is a valid exploit vector for the same vulnerability:
GET /notarealfile.idq?UOIRJVFJWPOIVNBUNIVUWIF
OJIVNNZCIVIVIGJBMOMKRNVEWIFUVNVGFWERIOUNVUNWI
UNFOWIFGITTOOWENVJSNVSFDVIRJGOGTNGTOWGTFGPGLK
JFGOIRWTPOIREPTOEIGPOEWKFVVNKFVVSDNVFDSFNKVFK
GTRPOPOGOPIRWOIRNNMSKVFPOSVODIOREOITIGTNJGTBN
VNFDFKLVSPOERFROGDFGKDFGGOTDNKPRJNJIDH%u1234D
SPPOITEBFBWEJFBHREWJFHFRG=bla HTTP/1.0\x0d\n.
Though it contains no real bogus control data or payload,
it will cause the bogus control ﬂow transfer to occur (from
the return pointer, not the SEH pointer in this case). The
current DACODA implementation treats all operations as
uninterpreted functions so there is one spurious tokeniza-
tion for this exploit, the one that includes “00=a”, which
should be just “=”. This is because the “=” character is
located by bit shifts instead of direct addressing, and DA-
CODA cannot determine that the other three characters are
dropped before the explicit equality check without semantic
information about the bit shifts. This is the only example of
such a problem with uninterpreted functions we discovered.
4.3 Complexities and Challenges
This section discusses some of the facts that must be taken
into account when designing an automated worm analysis
technique for deriving protection for an unknown vulnera-
bility from a zero-day polymorphic and metamorphic worm
exploit.
Exploit Name
LSASS
DCOM RPC
Workstation Service
Total
Predicates Predicates
305
120