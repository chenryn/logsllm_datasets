∈ (cid:6)+
• Atstart
(cid:3), where
, Atexhaust
, Atend
0
represents the real time start instant.
• Atend
∈ [Atstart
, +∞[
represents the real time termination instant.
• Atexhaust
∈ [Atstart
, +∞[
represents the real time instant when resource exhaus-
≤ Atend, system correctness
tion occurs. If Atexhaust
may be corrupted through exhaustion-failures.
So, under P SM, a system is deﬁned by a set of triples
A, one for each of its executions. Next, we formally deﬁne
what is an exhaustion-safe system under P SM.
Deﬁnition 2.5. A system A is exhaustion-safe if and only if
Atend
 Tend,∀A.
> Tend ⇒ Atexhaust
It is easy to see that Atexhaust
⇒ A is exhaustion-safe.
Atend
Property 2.7. If Atexhaust has a bounded value Texhaust
≤ Texhaust,∀A), then A is exhaustion-safe
(i.e., Atexhaust
It is also easy to see that A is exhaustion-safe ⇒ Atend
 Tend,∀A.
Proof. See Property 2.6.
Therefore, if one wants to design an exhaustion-safe syn-
chronous system with a bounded lifetime, then one has to
guarantee that no resource exhaustion occurs during the
limited period of time delimited by Tend.
Note that Corollary 3.1 only applies to synchronous sys-
tems with a bounded lifetime. If the system lifespan is un-
bounded (e.g., server), then we can prove the following.
Corollary 3.2. If A is a synchronous system with an un-
≤ Tend,∀A), and
bounded lifetime (i.e., (cid:1)Tend : Atend
≤
Atexhaust has a bounded value Texhaust (i.e., Atexhaust
Texhaust,∀A), then A is not exhaustion-safe.
Proof. If Atend does not have a known bound, it is impossi-
< Texhaust,∀A, and therefore,
ble to guarantee that Atend
by Property 2.7, A is not exhaustion-safe.
In fact, synchronous systems may suffer accidental or
malicious faults. These faults may have two bad effects:
provoking timing failures that increase Atend; causing re-
source degradation which decreases Atexhaust. Thus, in a
synchronous system, an adversary can not only perform at-
tacks to either crash or control some resources, but also vi-
olate the timing assumptions, even if during a limited inter-
val. For this reason, there is currently among the research
community a common belief that synchronous systems are
fragile, and that secure systems should be built under the
asynchronous model.
it
This
section showed that
is possible to have
exhaustion-safe f fault/intrusion-tolerant synchronous sys-
tems as long as they have a bounded lifetime. However, care
must be taken that timing assumptions are not violated dur-
ing system execution, namely in the presence of malicious
faults.
Proceedings of the 2005 International Conference on Dependable Systems and Networks (DSN’05) 
0-7695-2282-3/05 $20.00 © 2005 IEEE
Authorized licensed use limited to: Tsinghua University. Downloaded on March 20,2021 at 12:09:59 UTC from IEEE Xplore.  Restrictions apply. 
3.2 Asynchronous systems
The distinguishing feature of an asynchronous system is
the absence of timing assumptions, which means arbitrary
delays for the execution of operations and message deliver-
ies, and unbounded drift rates for the local clocks [7, 12, 6].
This model is quite attractive because it leads to the design
of programs and components that are easier to port or in-
clude in different environments.
If one considers an asynchronous system A under P SM,
then A can be built in such a way that termination is even-
tually guaranteed (sometimes only if certain conditions be-
come true). However, it is impossible to determine exactly
when termination will occur. In other words, the termina-
tion instant Atend is unbounded. Therefore, it is necessary
to analyze the relation between Atend and Atexhaust, in or-
der to assess if A is exhaustion-safe.
Can an asynchronous system A be exhaustion-safe? De-
<
spite the arbitrariness of Atend, the condition Atend
Atexhaust must always be maintained. This can only be
if Atexhaust has an inﬁnite
guaranteed in two situations:
value or if Atexhaust is correlated with Atend in a way that
veriﬁes the condition. Whereas the former condition would
mean the impossibility of a failure occurring in the system,
which common sense indicates as a very difﬁcult or impos-
sible goal to attain, the latter is very hard to achieve as well.
We give a solution through an adequate system architecture,
as we will explain later in the paper.
Traditionally, dependable asynchronous systems resort
to some form of redundancy, to be able to handle compo-
nent failures. A usual assumption in the design of these
systems is to impose a limit on maximum number of com-
ponents that can fail during execution. For instance, a reli-
3 (cid:13) out of
able broadcast protocol requires that at most (cid:12) n−1
n components can fail maliciously [1].
In a system that starts with a certain level of redundancy,
the assumption that a ﬁxed number of f components may
fail results in a (not necessarily known) bounded value for
Atexhaust: the time necessary to crash/corrupt f + 1 com-
ponents. Notice that this sort of “doom’s timer” is started
at system boot and tends to decrease as the system evolves.
Many systems naively assume that all components are cor-
rect when each execution of a protocol is initiated. Un-
less a protocol begins to run at system boot, or the system
is completely re-constructed just before the protocol starts,
this assumption is not plausible. Although asynchronous al-
gorithms are designed without timing considerations, once
cast into a system design they gain an indirect relation with
time through the inexorable path of resource exhaustion.
Our enriched distributed system model captures this rela-
tion through A and allows one to reason formally about it.
Given that Atend does not have a known bound in asyn-
chronous systems, one can prove the following corollary of
Property 2.7, similar to Corollary 3.2:
Corollary 3.3. If A is an asynchronous system (i.e., (cid:1)Tend :
≤ Tend,∀A), and Atexhaust has a bounded value
Atend
≤ Texhaust,∀A), then A is not
Texhaust (i.e., Atexhaust
exhaustion-safe.
Proof. See Corollary 3.2.
Even though real systems working under the asyn-
chronous model have a bounded Atexhaust, they have been
used with success for many years. This happens because,
until recently, only accidental faults (e.g., crash or omis-
sion) were a threat to systems. This type of faults, being
accidental by nature, occur in a random manner. There-
fore, by studying the environment in detail and by appro-
priately conceiving the system, one can achieve an asyn-
chronous system that behaves as if it were exhaustion-safe,
with a high probability. That is, despite having the failure
syndrome as we have proved, it would be very difﬁcult to
observe it in practice.
However, when we start considering malicious faults, a
different reasoning must be made. This type of faults is in-
tentional (not accidental) and therefore their distribution is
not random: the actual distribution may be shaped at will by
an adversary whose main purpose is to break the system. In
these conditions, having a bounded Atexhaust (e.g., station-
ary maximum bound for node failures) in an asynchronous
system A may turn out to be catastrophic for the safety of
the system. That is, our moderating comments above do
not apply to intrusion-tolerant systems working under the
asynchronous model.
Consequently, Atexhaust should not have a bounded
value if A is an asynchronous system operating in a environ-
ment prone to anything more severe than accidental faults.
The goal should then be to somehow unbound Atexhaust and
maintain it always above Atend.
This section showed that
is impossible to have
exhaustion-safe f fault/intrusion-tolerant asynchronous
systems, namely in the presence of malicious faults.
it
3.3 Proactive recovery in asynchronous systems
One of the most interesting approaches to avoid resource
exhaustion due to malicious compromise of components is
through proactive recovery [14] (which can be seen as a
form of dynamic replication [15]). The aim of this mech-
anism is conceptually simple – components are periodi-
cally rejuvenated to remove the effects of malicious at-
tacks/failures. If the rejuvenation if performed frequently
often, then an adversary is unable to corrupt enough re-
sources to break the system. Proactive recovery has been
suggested in several contexts. For instance, it can be used
to refresh cryptographic keys in order to prevent the dis-
closure of too many secrets [11, 10, 8, 21, 2, 20, 13].
It
Proceedings of the 2005 International Conference on Dependable Systems and Networks (DSN’05) 
0-7695-2282-3/05 $20.00 © 2005 IEEE
Authorized licensed use limited to: Tsinghua University. Downloaded on March 20,2021 at 12:09:59 UTC from IEEE Xplore.  Restrictions apply. 
may also be utilized to restore the system code from a se-