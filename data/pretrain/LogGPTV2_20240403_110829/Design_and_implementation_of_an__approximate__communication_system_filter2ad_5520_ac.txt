(b) No PHY convolution
codes.
)
y
a
r
G
R
E
B
l
(
/
)
k
c
o
B
R
E
B
Figure 7: BER of various bit positions when using Gray, and
Block data coding schemes. The overall uncoded BER of dur-
−3 for both schemes. 10
ing the experiment was order of 10
million QAM-64 symbols were transmitted.
(
101
100
10-1
10-2
MSBs
MIDs
LSBs
500 Kb/s
 O(10-4)
3450 Kb/s
O(10-3) 
5760 Kb/s
O(10-2)
Applied load, BER observed
)
y
a
r
G
R
E
B
l
(
/
)
k
c
o
B
R
E
B
(
101
100
10-1
10-2
MSBs
MIDs
LSBs
-30
-35
-40
-45
-60
-65
-70
-55
-50
RSSI
Figure 8: Variation in BER gains at different bit-positions with
Block relative to Gray with varying RSSI, and with PHY con-
volution coding at rate 1/2. The horizontal line corresponds to
the case where both schemes offer equal error protection for a
given bit position.
WiFi trafﬁc as the source of interference. As a nearby WiFi source,
would back-off on sensing transmissions from our system, we had
to place our interfering source with some care. To turn the WARP
radio and the interfering laptop into a hidden nodes for each other.
For this, we reduced the signal strength on the laptop and placed
it at a far by location such that the achieved throughput for both
systems at their highest data-rates(manually ﬁxed) was same re-
gardless of whether the other node was working on not. We then
increased the power on the laptop to a level such that it started in-
terfering with the Warp node(conﬁrmed by increased errors when
the laptop was transmitting).
We show the BER gain in the plot. The external interferer in-
jects regular 802.11 trafﬁc into the wireless medium, which causes
signiﬁcant symbol errors in the data transmitted between WARP
nodes. Across all levels of interference Block provides signiﬁcantly
higher protection of MSBs than Gray.
3. DESIGN & IMPLEMENTATION OF APEX
The previous section validates that unequal error protection for
different bit positions is consistently possible across very diverse
wireless channel conditions. In this section, we describe our spe-
ciﬁc approximate communication scheme that can leverage these
Figure 9: Variation in BER gain at various bit positions of
Block relative to Gray in presence of an external interferer.
Convolution coding at rate 1/2. The horizontal line corresponds
to the case where both schemes offer equal error protection for
a given bit position.
speciﬁc constellation maps to improve the performance of media
applications in a natural way.
In particular, we focus on video streams in which content is par-
titioned into multiple classes, and each class has a different levels
of importance in correct decoding of the stream. This is commonly
observed in all MPEG-based video streams in which a “Group of
Pictures” (GOP) consist of a sequence of I-, P-, and B-frames that
have been coded together.
The application (or an application helper) provides a simple es-
timate of the relative priority value of these different data bits and
passes it down the stack. There are many effective ways to compute
priority of data bits to an application [22, 32], and in this paper we
use a relatively simple one based on decoding dependencies. More
speciﬁcally, in Apex the value of any data unit i is proportional to
the number of data bytes, that require i for successful decoding at
the receiver. In our case, we use frames within a GOP as a data
unit. Hence, all bytes of a given frame type in a GOP has the same
value, making it easy to perform the computation once for each
GOP. By design, I-frame data is necessary to decode the highest
number of dependent frames, and hence they have the highest pri-
ority. B-frames have no other dependent except themselves, so they
have the least priority. P-frame has a priority which is intermedi-
ate of the two other frame types. The relative priorities of the three
frame types can change between different GOPs. As mentioned be-
fore, better ways of deﬁning the value of different bytes are, indeed,
possible, we choose to use our simple approach, as it is sufﬁcient
to illustrate the performance of approximate communication.
We also note, that our approach generalizes to any other media
encoding, where the content is structured in layers, and there is
different levels of priority (value) for each layer.
The MAC-PHY layer of Apex is provided with a few different
constellation maps. In our case, we use two alternatives — Block
and Gray. Based on the application-speciﬁed value of different data
units, the MAC and PHY layers of Apex makes two simple deci-
sions: (i) given a constellation map, how to place application data
bits to bit positions for the desired levels of protection, and (ii)
which speciﬁc constellation map to use. We discuss how each of
these components is implemented by making small changes to an
802.11-style PHY-MAC subsystem, while retaining all its features.
Placing application data bits to bit positions: Each constel-
20lation map provides varying degree of protection for different bit
positions of a symbol. However, once a constellation map has been
chosen, there is only one optimal way to place application data bits
to various protection levels to maximize value of protected data —
greedily. Given x data bits across all priority levels, and m bits per
symbol, the total number of symbols available is x/m. We start
by placing the highest priority bits to the most protected bit posi-
tions of each of these symbols. We move over to the next protected
bit positions, if we exhaust the most protected bit positions. Once
we complete assigning all highest priority bits, we move to bits
at the next priority level. We continue until we exhaust all bits.
Unlike a traditional communication system, where each wireless
frame carries data bits from a single video frame, in approximate
communication, each typical wireless frame carries data bits from
an I-frame, a P-frame, and a B-frame. The I-frame bits within the
wireless frame will be most protected, while the B-frame bits will
be least protected. Note that the above greedy approach does not
require that the number of protection levels available in different
bit positions be equal to the number of desired priority levels in ap-
plication data, and it just provides a relative ordering in the level of
protection for these bits.
Also, the above approach ensures that we do not need a ﬁxed ra-
tio of I-, P- and B- frame data. As the excess data bits belonging to
one priority level can be sent by using all bit positions in a symbol.
Choosing a constellation map: As Section 2.1 shows, constel-
lation maps differ in the level of protection available at different bit
positions. Hence, the choice of a constellation map depends on the
relative utility of protecting different application bits differently.
In order to evaluate the utility of a constellation map, we need
to estimate the BERs at different bit positions for different constel-
lation maps. For this, we add a small number of well-known pilot
symbols into each wireless frame (1 pilot byte for every 100 bytes).
The receiver will decode these symbols with the different constel-
lation maps in consideration, e.g., Gray and Block. Since the pilot
symbols are known, the receiver can estimate the BERs for dif-
ferent positions and provide this as a feedback in the 802.11-style
ACK frame. Note that such BER computation occurs at transmis-
sion speeds, as such computation already occurs for wireless frame
decoding and ACK generation. We use a single byte to carry each
BER value of the MSBs, MIDs, and LSBs of 64-QAM, for a to-
tal overhead of 6 additional bytes for both schemes in the ACK
frame. (16-QAM and 256-QAM has two and four protection levels
respectively, and the overheads in the ACK frame are 4 and 8 bytes
respectively.)
With this information, the transmitter can calculate the utility,
u(E), of a constellation map, E, as follows. Let vi be the value
associated with application data units at the ith priority level. Let pj
indicate the protection level of the jth signiﬁcant bit position group.
and let xij be the number of application data units with priority
level i be allocated to bit positions with protection level j (using
the greedy approach). Then, u(E) =
j pjxij, where vi is
presented as an input from the application, and is computed once
for each video stream GOP. xij is obtained from our bit mapping
strategy, and can also be computed per constellation map, once for
each video stream GOP, and pj is received as feedback in the ACK
frame. We pick the constellation map that maximizes this value.
We illustrate the beneﬁts of switching constellation maps as part of
our evaluation in Section 4. This computation itself is quite fast.
Hence, in principle, the constellation map can be changed for every
frame. However, in our implementation the decoding process for
the different constellation maps happen, not in the FPGA of the
WARP radios, but in the associated laptops. This adds latencies
to the process such that our constellation map usually changes at a
i vi
P
P
2-bit
constellation
map selector
Priority-level size fields
in octets (4 X 1 byte)
Interspersed
pilot symbols
( 1 byte/100 bytes)
PLCP hdr (72 bits)
BPSK
rate = 1/2
rate indicated by signal
symbols (same as 802.11a)
Figure 11: Modiﬁcations to PHY PLCP header and payload for
Apex.
rate of once every ten packets or more. Our evaluation illustrates
the performance advantages of this dynamic choice inspite of this
latency. The actual gains of this component in a real system is,
therefore, likely to be even better.
Interaction with choice of modulation scheme and PHY rate
of transmission: Approximate communication has a direct inter-
action with the choice of data modulation scheme and the PHY
layer transmission rate of data units.
In general, any good rate
and modulation selection scheme will ensure that the approxima-
tion property of symbol errors hold. In our work, we implement a
rate selection scheme that is based on the SoftRate algorithm [34],
which is known to be fairly agile and accurate. Each change in the
rate triggers an immediate re-evaluation of the speciﬁc constella-
tion map, although the constellation map might sometimes change
at an even faster rate, if necessary due to change in channel con-
ditions. We anticipate that the performance of the system can be
improved even further if the rate selection decision is combined
with the constellation map selection. In this paper we do not ex-
plore this joint problem further, and relegate it as part of our future
work.
Modiﬁcations to PHY PLCP header and payload: A few mod-
iﬁcations need to be made to the PHY layer PLCP header. First, we
added a two-bit constellation map selector within the PLCP header,
to inform the receiver which encoding scheme is used in the wire-
less frame. This limits the number of constellation map alternatives
to four, which we believe should be sufﬁcient for most applications.
We also added information on how the data of different priority lev-
els are placed into various bit positions using our greedy approach.
This can be simply expressed by indicating the number of bytes
(expressed in multiples of eight bytes) in each level (the greedy
algorithm for placing data bits to bit positions can be used to parti-
tion the transmitted data). We limit ourselves to four priority levels
for application data currently. We add a one-byte ﬁeld in the PLCP
header for each level, for a total of four additional bytes. This limits
the maximum payload size to 2048 bytes.
Note that only the two-bit constellation map selector is placed in
the early part of the PLCP header to be transmitted at the base data
rate, e.g., 802.11a uses BPSK with 1/2 PHY convolution codes,
and using a pre-deﬁned constellation map (Gray). The four prior-
ity level size ﬁelds are in the latter part of the PLCP header can be
transmitted at higher data rates like the rest of the frame. Hence,
although the PLCP header increases from 40 bits to 72 bits, only
two of these additional bits need to be transmitted at the base rate.
Finally, we add the pilot symbols through the data ﬁeld for BER es-
timation of different bit positions with different constellation maps.
This is presented in Figure 11.
Modiﬁcations to the digital component of the PHY layer pipeline:
We describe modiﬁcations needed to a standard 802.11 PHY layer
pipeline to implement all features in Apex, and present it pictorially
in Figure 10. All components in the picture are from the 802.11a
21Application
UDP/IP
vi
Transmitter
Data
I    P    B
Control
Control
MAC
pj
ACK frame
Data frame
Receiver
Controller
Digital
PHY
Scrambler
Convolution
Encoder
Gray
Block-II
Mapper
RF
front
end
RF
front
end
Demapper
Gray
Block-II
I
P
B
Inter-
leaver
Analog
PHY
Analog
PHY
De-inter-
leaver
I
P
B
Application
UDP/IP
Data
I     P   B
Controller
De-
scrambler
MAC
Control
Digital
PHY
Viterbi
Decoder
Figure 10: Changes to basic 802.11 layers for approximate communication in Apex. I, P, B labels are for illustration purpose only
indicating three arbitrary priority layers. Shaded parts are modiﬁcations made.
reference pipeline and the shaded parts of the picture indicate loca-
tions where some changes are needed.
In the transmitter, data is available to the PHY pipeline in multi-