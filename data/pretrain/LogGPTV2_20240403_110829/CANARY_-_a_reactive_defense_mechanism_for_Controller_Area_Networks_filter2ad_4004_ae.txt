Figure 16 shows the effect on ID 0x2F coming from the left-
hand side of the network. This ID has a cycle time of 10ms,
the recorded delays between two consecutive occurrences of
the ID is denoted as dt in the ﬁgures. The effects are minor
on the left side of the network, a limited number of frames
may be delayed or possibly lost when relays are triggered.
But the cycle time remains steadily around 10ms. The plot
for the right hand side of the network (where the ID is re-
sent by the bus guardian) shows that the inter-arrival time
may drift from the original 10ms to up to 20ms. These drifts
occur on the right-hand side in case when frames are ﬁrst
lost due to relay triggering and then re-sent from the buffer.
By computing the mean arrival time on the right side, we
get 10.805ms compared to 9.99986ms on the left side and
9.99987ms on the right side in the original trace. This means
that there are not many frames that drift from the expected
cycle time of 10ms and is consistent with our estimation that
4270    30th USENIX Security Symposium
USENIX Association
Table 2: Frame loss at various relay trigger rates with adversarial activity (DoS attack) and load-balancing
Buffering
None
1 frame
32 frames
Retransmission
Load balanced
Load balanced
Load balanced
Filter size
512
512
512
Adversary
DoS 1ms
DoS 1ms
DoS 1ms
Relay Rate (s)
0.1
0.1
0.1
LTC
110470
119124
119121
RTC
102111
112873
112939
LFC
8742
57
0
RFC
10782
96
0
LF% RF%
10.5%
7.9%
0.09%
0.05%
0.0%
0.0%
7 – 10% of the frames require buffered retransmission that
causes additional delays.
6.5
Immediate improvements: faster relays,
more relays
Faster relays exist2, e.g., solid state relays that operate in
the 0.5− 1ms range are common and have a higher life ex-
pectancy since they have no mechanical parts. But even the
off-the-shelf relays that we used in the experiments (5ms op-
eration time) proved highly effective and eventually led to 0%
frame loss. In case of the load-balancing algorithm, i.e., the
worst case for an attack, the 100ms triggering rate results in
little or no errors at all (5ms out of 100ms means that relays
impede a maximum of 5% from the total bus time). We now
determine the theoretical upper-bound for the relay triggering
rate based on relay operating time and bus parameters.
Maximum relay triggering rate. Since the bus is temporarily
unavailable during the relay operation time (less than 5ms
with the relays that we used), all frames that are scheduled for
sending during this period will be automatically re-sent when
the bus becomes available. We determined a theoretical upper-
bound for the rate at which the relays can be triggered λrelay
depending on the relay operating time trelay, frame arrival rate
λbus and frame time tframe as follows:
λrelay ≤ 1− λbus ×tframe
trelay
The relation follows from the fact that for any ﬁxed time
interval T the bus has to be available to accommodate λbus×T
frames. But during this period the bus will be unavailable
for λrelay × T × trelay. This leads to the following condition
T − λrelay × T ×trelay ≥ λbus × T ×tframe which divided by T
gives the upper bound for λrelay. As a practical example, for a
500Kbps bus, setting tframe = 200µs, i.e., the average time of a
CAN frame, and λbus = 2000 fps, i.e., the usual 50% busload,
having trelay = 5ms we get λrelay = 120. That is, the relays
can be triggered at 8.3ms cycles without losing frames on the
bus. The upper side of Figure 17 summarizes these results by
depicting the rate λrelay as a function of relay operation time
trelay for a 500Kbps bus with tframe = 200µs. The lower side of
Figure 17 extends this depiction for a frame arrival rate from
500 up to 4000 frames (a 50% bus-load for the highest CAN
data-rate, i.e., 1Mbps). This is a theoretical bound, in practice,
2https://www.ni.com/ro-ro/innovations/white-papers/06/
how-to-choose-the-right-relay.html
Figure 17: Maximum relay triggering rate λrelay as function of
relay operation time trelay (up) and λrelay as function of relay
operation time trelay and frame arrival rate λbus (down)
the CAN controller (or the upper-layer software) must be able
to buffer frames in order to cope with the relay rate.
Adding more relays. Given the nature of in-vehicle net-
works, it is expected that adversaries will use predictable
locations as entry points, e.g., the OBD port, the infotainment
or telematics units, etc. Consequently, a small number of re-
lays can be conveniently placed at key locations on the bus.
However, for a comprehensive treatment, we cannot exclude
the scenario where an adversary taps the bus at random lo-
cations. In this case adding more relays may increase the
chances to isolate the intruder if he is unaware of the exact
topology. The complexity of interwinding the relays with the
ECUs increases exponentially. Concretely, for k controllers
and n relays the number of placements corresponds to the
number of k + 1 compositions of integer n (the composition
of an integer is a way of writing it as a sum of exactly k posi-
tive integers). Indeed, assuming that the relays can be placed
anywhere, to the left and right of each ECU, there are k + 1
bus segments starting from the left side of the ﬁrst ECU, i.e.,
the ﬁrst bus segment, to the right side of the last ECU, i.e.,
the k + 1 bus segment. The number of k compositions of an
integer n is given by the binomial coefﬁcient(cid:0)n−1
(cid:1) and thus
k−1
USENIX Association
30th USENIX Security Symposium    4271
Figure 19: Probability to receive at least one adversarial frame
p1 during ﬁltering time T at adversary rate λadv
ity increases exponentially. Figure 19 depicts p1 in relation
with ﬁltering time T ∈ [0.010,2] and λadv ∈ [1,10]. An ar-
rival rate of 10 frames per second corresponds to a 100ms
cycle time which is a slow cycle time for in-vehicle network,
cycle times usually go as low as 10ms. But even if the ad-
versary frames arrive at an average of 1 fps, the probability
to receive one adversarial frame in T = 4s is quite high at
98.16%. Parameter T can tuned in the localization algorithm,
i.e., Algorithm 1, according to speciﬁc needs.
Multiple adversaries. Our defense mechanism was de-
signed to address a single adversary (or compromised unit)
that taps the bus. We believe that this scenario covers most
practical needs, but indeed, it may happen for adversaries to
be present at multiple locations. For example, if adversaries
are present at the two bus ends they may evade the local-
ization mechanism since the attack comes from both sides
of the bus and they may further cause a full DoS. As a di-
rect extension to CANARY, to address this, we can add new
transceivers to the bus as suggested in Figure 20. This would
allow monitoring individual segments and removing them
from the bus if needed, i.e., the Bus Guardian can disconnect
any of the nodes in Figure 20 and individually monitor any
of the nodes. However, this solution will increase the wiring
complexity and implementation costs which may be unnec-
essary for most practical needs. A decision on the correct
trade-off would require further investigations which due to
obvious space constraints are unsuitable for the current work.
Figure 20: A multiple adversary scenario and multi-
transceiver Bus Guardian
Figure 18: Relay placements for n = 8..12 relays on a k ∈
{4,6,8} ECU network (up) and possible placements given
n ∈ [1,12] and k ∈ [1..8] (down)
there are(cid:0)n−1
(cid:1) placements for n relays on the segments of a
k
bus with k controllers. The upper side of Figure 18 shows the
number of possible placements in a network with k ∈ {4,6,8}
controllers for n = 8..12 relays. The number quickly increases
to 500 possible placements for 12 relays. The lower side of
Figure 18 shows the number of possible placements as a func-
tion of the number of ECUs 1..8 and number of relays 1..12.
The interwinding options quickly reach the order of several
hundreds.
6.6 Further analysis: intermittent adversaries
and multiple adversaries
Intermittent intrusions. Due to the efﬁcient binary search,
an intruder can be localized in roughly log2(n) packets that
are recognized by the ﬁlter as intrusions. An intruder may
try to mount a low-rate attack or even send attack frames
intermittently in order to avoid detection. If adversarial frames
do not occur at some ﬁx cycle time but occur independently
in time (unaffected by each other), we can use the Poisson
distribution to model the occurrence of at least one adversarial
frame in a speciﬁc time interval T . That is, assuming that the
time of occurrence for adversary frames follow a Poisson
distribution with mean arrival rate λadv frames per second, the
probability that k adversary frames occur in time T is:
Pr[k] =
(λadv × T )ke−λadv×T
k!
The probability to receive at least one adversary frame in
time T immediately follows as p1 = 1− Pr[0]. This probabil-
4272    30th USENIX Security Symposium
USENIX Association
6.7 Remaining challenges and limitations
While our work is the ﬁrst to propose an effective mecha-
nism for defending the CAN bus against DoS attacks, the
solution that we envision has several limitations which we
now enumerate and leave as potential future work.
Re-certiﬁcation and costs. Relays with automotive certi-
ﬁcation are common, in fact relays have been used inside
cars long before the CAN bus. The topology induced by our
modiﬁcations is still a bus compliant to ISO 11898 which
should make certiﬁcation feasible. Of course, certiﬁcation
will call for additional investigations on various issues, e.g.,
electromagnetic compatibility, which are out of reach for a
ﬁrst research communication. Porting the solution will induce
additional costs related to wiring and components, i.e., the
wires, relays, resistors and the bus guardian. However, the
relay-resistor pairs should be placed only at critical positions
around ECUs that can be easily corrupted or ports that are
easy to access so that they can be isolated from the network.
CAN buses usually connect less than a dozen ECUs, buses
with 2-8 ECUs are common, and thus a dozen relays or so
may be sufﬁcient. The length of a CAN bus wire is typically
between 3-15 meters and CANARY will require an amount
of cable equal to the length of the bus to tap the two bus ends,
one control wire and one power supply wire for each relay-
resistor pair. At a minimum, CANARY may require similar
modiﬁcations to existing after-market car access control sys-
tems, e.g., remote start-stop systems, that are connected to
the CAN bus which hosts the electronic immobilizer of the
car (usually the body control module) and which may also
add relays to each door to facilitate remote access. By using
relays, CANARY can disconnect (upon intrusions) the OBD
port or the infotainment unit which are not vital for the car
to function anyway. Due to physical difﬁculties in accessing
random points of the in-vehicle wiring, adversaries will likely
use predictable locations as entry points which can be efﬁ-
ciently protected by a small number of relays. Porting the
full scale CANARY mechanism would indeed require more
complex wiring. But according to recent estimates from the
industry [13], common cars already have around 2.2 km of
wires that connect 100 sensors and control units. Compared
to these, CANARY should call only for a small additional
fraction.
Further experiments. Our experimental model would
greatly beneﬁt from testing in a car-on-bench setup. The
collected in-vehicle trafﬁc that we use in the experiments
perfectly mimics the behaviour of the bus from the real car
but it is hard to predict the behaviour of the physical vehicle
under an attack or when the active defense mechanism is trig-
gered. Such tests will be particularly necessary if CANARY
is placed behind some safety-critical subsystems and this type
of evaluation would be required in case of re-certiﬁcations.
Finally, a powerful attacker that has full knowledge of the car
topology (including the wiring of the active defense mech-
anism) and which can tap the bus at any random location
(possibly even in more than one location at the same time)
would be extremely difﬁcult or impossible to stop by the
mechanism. In this respect, a systematic evaluation of all at-
tacker entry points inside vehicles may provide better insights
on the correct placement of the active relays.
Further applications of the proposed mechanism outside
the automotive domain in areas where the CAN bus is also
in use, e.g., industrial control systems, avionics, etc., may be
also considered as future challenges.
7 Conclusion
Due to its bus topology and ID-oriented arbitration, the CAN
bus remains vulnerable to message injections and in particular
to DoS attacks. While cryptography can stop malicious mes-
sages from being accepted by legitimate nodes, it provides
no solution against DoS attacks. The procedure presented in
our work may help in this respect. Isolating the intruder and
ﬁltering/redirecting trafﬁc provides an efﬁcient mechanism
that prevents the adversary from gaining full control over the
bus. Since relays are cheap and the proposed algorithms easy
to implement, there should not be many practical constraints
in implementing the proposed solution or at least part of it.
The relays that we use have an operation time of 5ms and
changing them to faster solid-state relays will bring even bet-
ter performances. Even with the relays from our setup, the
frame-loss was reduced to zero by buffering frames during
retransmissions. Notably, the relay action on the bus causes
no frame loss since the clever error control mechanism of
CAN sets room for transmitting the frames until the acknowl-
edgement bit conﬁrms successful reception. The few frames
that were lost in our experiments were due to overlaps during
retransmissions and the issue was solved by a rather small
software buffer. The results from our experiments are on a