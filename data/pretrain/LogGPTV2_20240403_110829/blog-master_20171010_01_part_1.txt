## PostgreSQL flashback(闪回) 功能实现与介绍  
### 作者      
digoal      
### 日期       
2017-10-10       
### 标签      
PostgreSQL , 脏读 , 事务 , flashback , 闪回 , drop , truncate , dml           
----                  
## 背景      
闪回的需求往往是救命的需求，因为通常情况下数据库正常运行是不需要闪回的，往往是出现了误操作，被攻击，被注入后，数据库的数据被删除或恶意纂改并且纂改的事务已提交，也就是说纂改已经被持久化了。  
这种情况下需要闪回来救命，回到被破坏前的状态。  
### 闪回的目标分为两种：  
DML闪回和DDL闪回。  
DML闪回指对INSET, UPDATE, DELETE操作的闪回。DDL闪回指DROP, TRUNCATE操作的闪回。  
### 闪回的实现分两种：  
1、物理回退，相当于使用物理备份和归档进行时间点恢复，全库恢复到误操作前的状态。  
（可以新建一个库用于恢复，恢复到目标时间点，恢复后，将误操作前的数据导出来，再导入线上数据库。）  
2、在当前库回退，在当前库，将误操作影响的数据找出来。  
### 闪回的手段：  
1、物理回退，PG内核已支持时间点恢复，只要有误操作前的全量备份和所有归档即可。  
2、当前库回退，使用HOOK，可以实现DROP和TRUNCATE操作的回收站功能。  
3、使用延迟垃圾回收、脏读、行头事务号、事务提交日志，可以实现DML操作的闪回。  
以前写的一些闪回方案：  
[《PostgreSQL 闪回 - flash back query emulate by trigger》](../201408/20140828_01.md)    
[《PostgreSQL Oracle 兼容性之 - 事件触发器实现类似Oracle的回收站功能》](../201504/20150429_01.md)    
[《PostgreSQL 回收站功能 - 基于HOOK的recycle bin pgtrashcan》](../201404/20140403_01.md)    
[《PostgreSQL 最佳实践 - 任意时间点恢复源码分析》](../201608/20160823_04.md)    
[《PostgreSQL 最佳实践 - 在线增量备份与任意时间点恢复》](../201608/20160823_03.md)    
[《阿里云ApsaraDB RDS for PostgreSQL 最佳实践 - 6 任意时间点恢复》](../201512/20151220_06.md)    
[《PostgreSQL PITR THREE recovery target MODE: name,xid,time USE CASE - 2》](../201302/20130205_01.md)    
[《PostgreSQL PITR THREE recovery target MODE: name,xid,time USE CASE - 1》](../201302/20130204_01.md)    
本文将详细介绍“使用延迟垃圾回收、脏读、行头事务号、事务提交日志，实现DML操作的闪回。”的方法。  
## flashback 前提  
1、延迟VACUUM，确保误操作的数据还没有被垃圾回收。  
```  
vacuum_defer_cleanup_age = 1000000  # 延迟100万个事务再回收垃圾，误操作后在100万个事务内，如果发现了误操作，才有可能使用本文提到的方法闪回。  
```  
2、记录未被freeze，确保无操作的数据，以及后面提交的事务号没有被freeze(抹去)。  
```  
vacuum_freeze_min_age = 50000000   # 事务年龄大于5000万时，才可能被抹去事务号。  
```  
3、开启事务提交时间跟踪，确保可以从xid得到事务结束的时间。（开启事务结束时间跟踪后，会开辟一块共享内存区存储这个信息。）。  
```  
track_commit_timestamp = on     # 开启事务结束时间跟踪  
```  
4、事务提交时间跟踪未抹去。可以加大BUFFER来增加可跟踪的事务数。（重启数据库不影响，有持久化已有的跟踪记录）  
```  
Size  
CommitTsShmemBuffers(void)  
{  
        return Min(16, Max(4, NBuffers / 1024));  
}  
```  
```  
cd $PGDATA  
ll  
drwx------ 2 digoal users 4.0K Oct 10 10:28 pg_commit_ts  
```  
## flashback 准备工作  
1、将xid转换为txid的函数，见本文末尾。（因为记录的行头部，存储的是XID，而不是TXID，而查询事务提交状态，用的是TXID，因此需要转换一下。）  
2、脏读插件pg_dirtyread（用于读取脏页）  
https://github.com/ChristophBerg/pg_dirtyread  
```  
create extension pg_dirtyread ;  
```  
3、根据txid查询事务提交状态  
```  
postgres=# select txid_status(2);  
 txid_status   
-------------  
 committed  
(1 row)  
```  
4、根据xid查询事务提交时间  
```  
postgres=#  select xmin,xmax,xid_to_txid(xmin),txid_status(xid_to_txid(xmin)),pg_xact_commit_timestamp(xmin) from trac ;  
   xmin   |   xmax   | xid_to_txid | txid_status |   pg_xact_commit_timestamp      
----------+----------+-------------+-------------+-------------------------------  
 40477717 | 40477727 | 25810281493 | committed   | 2017-10-10 10:29:21.269612+08  
 40477719 | 40477727 | 25810281495 | committed   | 2017-10-10 11:15:05.875067+08  
(2 rows)  
```  
5、使用脏读插件，将需要flashback的数据（连同头信息xmin,xmax）写入临时表，根据以上两种方法生成如下字段：  
写入事务提交状态、事务提交时间。(xmin)  
删除事务提交状态、事务提交时间。(xmax)  
```  
create table tmp_xxx as   
select   
       xid_to_txid(xmin) as xmin_txid, txid_status(xid_to_txid(xmin)) as xmin_cmstat, pg_xact_commit_timestamp(xmin) as xmin_ts,   
       xid_to_txid(xmax) as xmax_txid, txid_status(xid_to_txid(xmax)) as xmax_cmstat, pg_xact_commit_timestamp(case xmax when 0 then null else xmax end) as xmax_ts,  
       xmin as xmin1,xmax as xmax1,dead,oid,  
       id  -- 目标表字段  
from   
(  
  SELECT * FROM pg_dirtyread('table'::regclass)  
  as t (tableoid oid, ctid tid, xmin xid, xmax xid, cmin cid, cmax cid, dead boolean, oid oid,   
       id int)  -- 目标表字段  
) t;  
```  
例如  
```  
postgres=# select   
       xid_to_txid(xmin) as xmin_txid, txid_status(xid_to_txid(xmin)) as xmin_cmstat, pg_xact_commit_timestamp(xmin) as xmin_ts,   
       xid_to_txid(xmax) as xmax_txid, txid_status(xid_to_txid(xmax)) as xmax_cmstat, pg_xact_commit_timestamp(case xmax when 0 then null else xmax end) as xmax_ts,  
       xmin as xmin1,xmax as xmax1,dead,oid,  
       id  -- 目标表字段  
from   
(  
  SELECT * FROM pg_dirtyread('trac'::regclass)  
  as t (tableoid oid, ctid tid, xmin xid, xmax xid, cmin cid, cmax cid, dead boolean, oid oid,   
       id int)  -- 目标表字段  
) t;  
  xmin_txid  | xmin_cmstat |            xmin_ts            |  xmax_txid  | xmax_cmstat |            xmax_ts            |  xmin1   |  xmax1   | dead | oid | id   
-------------+-------------+-------------------------------+-------------+-------------+-------------------------------+----------+----------+------+-----+----  
 25810281493 | committed   | 2017-10-10 10:29:21.269612+08 | 25810281526 | committed   | 2017-10-10 17:25:34.593189+08 | 40477717 | 40477750 | f    |   0 |  1  
 25810281495 | committed   | 2017-10-10 11:15:05.875067+08 | 25810281528 | committed   | 2017-10-10 17:25:47.410793+08 | 40477719 | 40477752 | f    |   0 |  2  
 25810281503 | aborted     |                               |           0 |             |                               | 40477727 |        0 | t    |   0 |  2  
 25810281503 | aborted     |                               |           0 |             |                               | 40477727 |        0 | t    |   0 |  2  
 25810281513 | committed   | 2017-10-10 16:56:12.206339+08 | 25810281528 | committed   | 2017-10-10 17:25:47.410793+08 | 40477737 | 40477752 | f    |   0 |  2  
 25810281514 | committed   | 2017-10-10 16:56:13.706233+08 |           0 |             |                               | 40477738 |        0 | f    |   0 |  3  
 25810281515 | committed   | 2017-10-10 16:56:15.108331+08 |           0 |             |                               | 40477739 |        0 | f    |   0 |  4  
 25810281516 | committed   | 2017-10-10 16:56:16.092184+08 | 25810281521 | committed   | 2017-10-10 16:56:58.684832+08 | 40477740 | 40477745 | f    |   0 |  5  
 25810281517 | committed   | 2017-10-10 16:56:17.207356+08 | 25810281519 | committed   | 2017-10-10 16:56:48.011544+08 | 40477741 | 40477743 | f    |   0 |  6  
 25810281518 | aborted     |                               |           0 |             |                               | 40477742 |        0 | t    |   0 |  6  
 25810281518 | aborted     |                               |           0 |             |                               | 40477742 |        0 | t    |   0 |  6  
 25810281518 | aborted     |                               |           0 |             |                               | 40477742 |        0 | t    |   0 |  6  
 25810281518 | aborted     |                               |           0 |             |                               | 40477742 |        0 | t    |   0 |  7  
 25810281518 | aborted     |                               |           0 |             |                               | 40477742 |        0 | t    |   0 |  7  
 25810281518 | aborted     |                               |           0 |             |                               | 40477742 |        0 | t    |   0 |  7  
 25810281519 | committed   | 2017-10-10 16:56:48.011544+08 | 25810281528 | committed   | 2017-10-10 17:25:47.410793+08 | 40477743 | 40477752 | f    |   0 |  2  
 25810281520 | aborted     |                               |           0 |             |                               | 40477744 |        0 | t    |   0 |  2  
 25810281521 | committed   | 2017-10-10 16:56:58.684832+08 | 25810281528 | committed   | 2017-10-10 17:25:47.410793+08 | 40477745 | 40477752 | f    |   0 |  2  
 25810281523 | committed   | 2017-10-10 17:21:39.000214+08 | 25810281526 | committed   | 2017-10-10 17:25:34.593189+08 | 40477747 | 40477750 | f    |   0 |  1  
 25810281523 | committed   | 2017-10-10 17:21:39.000214+08 | 25810281526 | committed   | 2017-10-10 17:25:34.593189+08 | 40477747 | 40477750 | f    |   0 |  1  
 25810281523 | committed   | 2017-10-10 17:21:39.000214+08 | 25810281526 | committed   | 2017-10-10 17:25:34.593189+08 | 40477747 | 40477750 | f    |   0 |  1  
 25810281523 | committed   | 2017-10-10 17:21:39.000214+08 | 25810281526 | committed   | 2017-10-10 17:25:34.593189+08 | 40477747 | 40477750 | f    |   0 |  1  
 25810281523 | committed   | 2017-10-10 17:21:39.000214+08 | 25810281526 | committed   | 2017-10-10 17:25:34.593189+08 | 40477747 | 40477750 | f    |   0 |  1  
(23 rows)  
postgres=# select xmin,xmax,* from trac ;  
   xmin   | xmax | id   
----------+------+----  
 40477738 |    0 |  3  
 40477739 |    0 |  4  
(2 rows)  
```  
## flashback 实践  
1、根据pg_xlogdump找到精确的误操作xid，以及事务提交对应的时间戳。（或者使用用户提供的时间戳，大概的误操作前的时间。）  
参考：  
[《PostgreSQL 使用pg_xlogdump找到误操作事务号》](../201512/20151210_01.md)    
2、回退到过去的某个时间点（采用基于临时表的VIEW来展现） （根据事务提交顺序，逆序，逐个事务排除，逐个事务回退。）    
```  
select * from tmp_xxx where   
  (  
    xmin_cmstat='committed' and xmin_ts <= '$ts'   
    and  
    (xmax_cmstat='committed' and xmax_ts < '$ts') is distinct from true  
  )  
;  
```  
例子  
```  
select * from tmp_xxx where   
  (  
    xmin_cmstat='committed' and xmin_ts <= '2017-10-10 16:56:58.684832+08'   
    and  
    (xmax_cmstat='committed' and xmax_ts < '2017-10-10 16:56:58.684832+08') is distinct from true  
  )  
;  
  xmin_txid  | xmin_cmstat |            xmin_ts            |  xmax_txid  | xmax_cmstat |            xmax_ts            |  xmin1   |  xmax1   | dead | oid | id   
-------------+-------------+-------------------------------+-------------+-------------+-------------------------------+----------+----------+------+-----+----  
 25810281493 | committed   | 2017-10-10 10:29:21.269612+08 | 25810281526 | committed   | 2017-10-10 17:25:34.593189+08 | 40477717 | 40477750 | f    |   0 |  1  
 25810281495 | committed   | 2017-10-10 11:15:05.875067+08 | 25810281528 | committed   | 2017-10-10 17:25:47.410793+08 | 40477719 | 40477752 | f    |   0 |  2  
 25810281513 | committed   | 2017-10-10 16:56:12.206339+08 | 25810281528 | committed   | 2017-10-10 17:25:47.410793+08 | 40477737 | 40477752 | f    |   0 |  2  
 25810281514 | committed   | 2017-10-10 16:56:13.706233+08 |           0 |             |                               | 40477738 |        0 | f    |   0 |  3  
 25810281515 | committed   | 2017-10-10 16:56:15.108331+08 |           0 |             |                               | 40477739 |        0 | f    |   0 |  4  
 25810281516 | committed   | 2017-10-10 16:56:16.092184+08 | 25810281521 | committed   | 2017-10-10 16:56:58.684832+08 | 40477740 | 40477745 | f    |   0 |  5  
 25810281519 | committed   | 2017-10-10 16:56:48.011544+08 | 25810281528 | committed   | 2017-10-10 17:25:47.410793+08 | 40477743 | 40477752 | f    |   0 |  2  
 25810281521 | committed   | 2017-10-10 16:56:58.684832+08 | 25810281528 | committed   | 2017-10-10 17:25:47.410793+08 | 40477745 | 40477752 | f    |   0 |  2  
(8 rows)  
```  
3、找出被误操作事务 删除、更新、插入 的记录（OLD ROW(被删除、更新前的), NEW ROW(更新后的、误插入的)）。     
```  
select * from tmp_xxx where xmax1=? and xmax_cmstat='committed' and xmin_cmstat='committed';    -- 被某个XID删除、更新前的数据。  
select * from tmp_xxx where xmin1=? and xmin_cmstat='committed';                                -- 被某个XID插入、更新后的数据。  
```  