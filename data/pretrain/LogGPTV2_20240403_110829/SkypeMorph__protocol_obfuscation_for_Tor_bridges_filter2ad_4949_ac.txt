After the above connection setup, it is possible to send the
re-encrypted TLS messages through the established channel.
As discussed in previous sections, in order to maximize the
resemblance to real Skype traﬃc, we modify the output of
SkypeMorphSkypeMorphTor TraﬃcTor TraﬃcSkype Video Traﬃc102our application to closely match that of Skype. The mod-
iﬁcation is done on the packet sizes and inter-arrival times
of consecutive packets. For the packet sizes, two scenar-
ios are considered: In the ﬁrst scenario, we obtain our re-
sulting packet sizes using the na¨ıve traﬃc shaping method
discussed in Section 4.2. We use the higher-order statistics
mentioned above to produce joint probability distributions
for the next inter-packet delay and packet size, given the
values outputted previously. We sample from this condi-
tional distribution to produce the delay and size of the next
packet.
For the second scenario, the Traﬃc Morphing method of
Section 4.3 is used; however, this method only supports ﬁrst-
order statistics.
The overview of the SkypeMorph architecture is shown
in Figure 3. The red arrows represent the Tor traﬃc. On
one side the Tor traﬃc is passed to SkypeMorph, where the
traﬃc shaping mechanisms morph the traﬃc to resemble a
Skype call on the wire. On the other side the Tor traﬃc is
reconstructed.
6.
IMPLEMENTATION
In this section we describe our prototype implementation
of SkypeMorph on Linux, which is implemented in C and
C++ with the boost libraries [1]. The prototype is built into
two executable ﬁles called smclient and smserver, which
realize the client C and the bridge S of the previous section,
respectively. We describe in the following the two phases in
the execution of our prototype, namely, the setup and the
traﬃc-shaping phases.
6.1 Setup Phase
As in the previous section, both the client and the bridge
log into Skype using the Skype API, exchange public keys,
and then start their Skype video conversation. As we men-
tioned in Section 4, there are various TCP connections ac-
companied with the Skype video conversation, which stay
active even after the conversation is ﬁnished. In order to re-
tain these TCP connections, our prototype implementation
performs the following tricks:
• A TCP transparent proxy component is built into our
prototype, which transparently relays all TCP connec-
tions the Skype runtime outputs and receives. We take
advantage of the TPROXY extension in iptables, avail-
able in the Linux kernel since version 2.6.28. Corre-
sponding iptables rules are created when our proto-
type starts execution.
• As a consequence of retaining the Skype TCP con-
nections, the Skype runtime has to stay active during
the SkypeMorph session. Hence the UDP port PC or
PS will still be assigned to the Skype runtime when
SkypeMorph starts to tunnel Tor traﬃc; therefore,
SkypeMorph has to operate on another UDP port. To
overcome this, the Skype runtime on the client op-
erates on another UDP port, say P (cid:48)
C , and smclient
creates an iptables rule RC with SNAT target to al-
ter the source port of all Skype UDP packets from P (cid:48)
C
to PC . When smclient starts to tunnel Tor traﬃc,
it ﬁrst deletes rule RC , and it then operates on UDP
port PC . On the bridge side, the Skype runtime oper-
ates on UDP port PS, and smserver runs on another
UDP port P (cid:48)
S. When smserver starts to communi-
cate with smclient, it ﬁrst creates an iptables rule
RS that redirects traﬃc towards UDP port PS to P (cid:48)
S;
it then runs on P (cid:48)
S. Note that SkypeMorph starts its
tunneling task only when the Skype video call is ﬁn-
ished; thus the iptables rules RC and RS aﬀect only
the client Skype runtime and the bridge SkypeMorph.
This prevents the censor from noticing port changes
between the genuine Skype video call traﬃc and the
SkypeMorph traﬃc.
For the cryptographic features, we use the curve25519-
donna [27] library to generate elliptic-curve Diﬃe-Hellman
keys shared between smclient and smserver. Each Skype-
Morph instance derives four keys: two for outgoing and in-
coming message encryption, and another two keys for out-
going and incoming message authentication purposes.
6.2 Trafﬁc-shaping Phase
In the traﬃc-shaping phase, an smclient and smserver
pair can be viewed together as a SOCKS proxy that relays
streams between a Tor client and a Tor bridge. Between sm-
client and smserver, bytes in Tor streams are exchanged in
segments by a simple reliable transmission mechanism over
encrypted UDP communication, and they are identiﬁed by
sequence numbers. Reliable transmission is supported by
acknowledgments over sequence numbers. The cryptogra-
phy functions are provided by CyaSSL7, a lightweight SSL
library also used in SkypeKit. We give more details below.
SkypeMorph UDP Packet Layout
First, we present the layout of the SkypeMorph UDP
packets transmitted between smclient and smserver. We
set the maximum size of a single packet to be 1460 bytes to
avoid packet fragmentation, because 1500 bytes, including
the IP header, is a common MTU over the Internet. Thus,
besides a ﬁxed 8-byte UDP header, each packet contains
up to 1452 bytes of SkypeMorph data. The ﬁrst 8 bytes
are an HMAC-SHA256-64 message authentication code for
the remaining bytes in the packet. We use the 256-bit AES
counter mode stream cipher algorithm to encrypt the rest
of the packet, which, prior to encryption, is formatted into
ﬁve ﬁelds:
• type: This 1-byte ﬁeld denotes the purpose of the
packet. Currently there are two types: regular data
and a termination message; the latter is used to in-
form the packet receiver to terminate the communica-
tion session.
• len: This is a 16-bit unsigned integer denoting the size
of the contained Tor stream segment. This allows the
packet receiver to discard the padding data.
• seq: This ﬁeld contains the sequence number, a 32-bit
unsigned integer, of the ﬁrst byte of the contained Tor
stream segment.
• ack: This ﬁeld contains the ack number, a 32-bit un-
signed integer used to identify those bytes that have
been properly received.
• msg: This ﬁeld is of length up to 1425 bytes and con-
tains a Tor stream segment (of length len, above) and
the padding data (taking up the rest of the packet).
7http://www.yassl.com/yaSSL/Home.html
103We output the MAC, followed by the random AES initial
counter, and then the encrypted payload, as seen in Figure 4.
Figure 4: SkypeMorph UDP packet body layout, where the
size (in bytes) is under the name for each ﬁeld. The shaded
parts are encrypted using 256-bit AES counter mode. All
bytes after the mac ﬁeld are included in the HMAC-SHA256-
64 computation.
Traﬃc Shaping Oracle
We next discuss the traﬃc shaping oracle component,
which controls the sizes and timings of each successive UDP
packet to be sent. We implement both the na¨ıve and the
Traﬃc Morphing methods in the oracle to compare them.
The goal of the oracle is to provide traﬃc shaping parame-
ters.
When using the na¨ıve method, the oracle ﬁrst reads the
nth-order distributions of the packet sizes and inter-packet
delays of Skype traﬃc, as noted in the extended version of
this paper. [33] We currently have gathered data for up to
n = 3, but nothing in principle prevents us from gather-
ing more. For each query, the oracle remembers the last n
answers x1, . . . , xn, where xn is the last packet size output,
and the xi alternate between packet sizes and inter-packet
delay times. It then selects the nth-order distribution X of
inter-packet delays, conditioned on the values of x1, . . . , xn,
and randomly draws an inter-packet delay te from X. Next
the size of the packet se is outputted similarly from the dis-
tribution X(cid:48) of sizes, where X(cid:48) depends on x2, . . . , xn, se.
The oracle responds to the query with the pair (se, te).
For the traﬃc morphing method, the oracle ﬁrst reads
distributions of the packet sizes of the Tor traﬃc, the inter-
packet delays of the Skype traﬃc, and a pre-computed mor-
phing matrix. We use the morpher library from the Mor-
pher Project8 to compute the expected packet size se. The
Traﬃc Morphing morpher library does not take timings into
account. It expects to receive a packet input to it, and to
send out that packet immediately, possibly padded to a new
size to emulate the target distribution. As such, the packet
timing distribution of the output of Traﬃc Morphing is iden-
tical to its input distribution, which is not what we want.
We need to decouple the arriving packets from the sent pack-
ets, so arriving data is placed into a buﬀer, and we adopt
the technique of the na¨ıve method to sample from the packet
timing distribution to yield te. The oracle randomly selects
a packet size so from the Tor traﬃc packet size distribution,
and calls the morpher library to compute the output packet
size se. The pair (se, te) is then the answer to the query.
Packetizer
The communication between smclient and smserver is
handled by a packetizer, whose structure is shown in Fig-
ure 5. The purpose of the packetizer is to relay Tor streams
with UDP packets such that the traﬃc exposed to the censor
is indistinguishable from that of Skype video calls.
The data stream received from Tor over the pluggable
transport SOCKS connection is ﬁrst buﬀered in a sending
8https://gitorious.org/morpher/morpher
Figure 5: Structure of the packetizer.
buﬀer, and then retrieved in segments corresponding to the
sizes produced by the traﬃc shaping oracle. On the other
end, the received Tor stream segments are rearranged in
order in a receiving buﬀer according to their sequence num-
bers, and then form the incoming Tor stream.
The packetizer creates two threads, t_send and t_recv,
such that:
• Thread t_send ﬁrst queries the oracle for the expected
packet size se and delay te. It then checks the sending
buﬀer to determine if any re-transmission is needed,
and it locates and reads up to se bytes from the send-
ing buﬀer. Currently re-transmission is triggered when
three duplicated ack numbers are received, which is an
approach found in most TCP implementations. Then
an encrypted UDP packet of size se is created with any
necessary random padding bytes. Next, t_send sleeps
for time te and then sends the packet out.
• Thread t_recv is blocked until a new UDP packet is re-
ceived. It decrypts the packet to get a Tor stream seg-
ment, which is then pushed into the receiving buﬀer.
The receiving buﬀer returns the sequence number seqr
of the last byte that is ready to be committed to the
TCP stream. Similar to TCP, seqr+1 is used as the ack
number to be sent in the next outgoing UDP packet.
Any in-order segments that have been received are de-
livered to Tor over the pluggable transport SOCKS
connection and are removed from the receiving buﬀer.
As we observed from Skype video call traﬃc, when the
network bandwidth is limited, the distributions of packet
sizes and inter-packet delays change accordingly. To mimic
this behaviour, our prototype ﬁrst determines bandwidth
changes by measuring the number r of re-transmissions oc-
curring per second. Based on r, the oracle selects the most
relevant distributions and computes the traﬃc shaping pa-
rameters. The dependence on r can be tuned through ex-
periments to match the most relavent distributions.
As outlined above, our current implementation uses a sim-
ple TCP-like acknowledgement and retransmission scheme
to ensure the in-order delivery of the underlying Tor data.
An attacker may attempt to disrupt this scheme by dropping
some fraction of all Skype video traﬃc. This will cause a
modest decrease in the quality of actual Skype video conver-
sations, but may cause a disproportionate decrease in Skype-
104Morph’s eﬀective throughput due to repeated retransmis-
sions. We anticipate that a more advanced reliable transport
algorithm, such as one using selective acknowledgements,
may help to ameliorate this issue.
7. EXPERIMENTS
We performed our experiment in two parts. First we cap-
tured network traces of the Skype application to form a
better understanding of how it operates. Our experimen-
tal testbed for this part consisted of several hosts running
diﬀerent operating systems, including Microsoft Windows,
Linux and mobile devices. Using these traces we were able
to obtain an empirical distribution of packet sizes and inter-
packet arrival times for Skype video calls, which were used
as input to the SkypeMorph traﬃc-shaping oracle for draw-
ing samples and generating the morphing matrix. Next, we
used the SkypeMorph proxy for browsing and downloading
over a bridge set up on a node in the same local network as
the Tor client.
Figure 6 shows the cumulative distributions of packet sizes
and inter-arrival delays between consecutive packets both
for SkypeMorph (both with the na¨ıve and enhanced Traﬃc
Morphing traﬃc shapers) and for the original Tor distribu-
tion and the Skype video call distribution we obtained in
the ﬁrst part of the experiment. The graphs depict how
closely the SkypeMorph output follows that of the Skype
video calls, both in packet sizes and inter-packet delays;
indeed, all three lines overlap almost perfectly. Also, the
Kolmogorov-Smirnov test [35] for both the packet sizes and
inter-packet delays shows no statistically signiﬁcant diﬀer-
ence between the Skype video and SkypeMorph distribu-
tions, using either the na¨ıve traﬃc-shaping or the enhanced
traﬃc morphing methods. This is of course expected, as the
traﬃc shaping oracle is designed to match the Skype distri-
bution. In addition, using the na¨ıve traﬃc-shaping method,
we also match the higher-order Skype traﬃc distributions.
The distribution of regular Tor traﬃc, however, is consid-
erably diﬀerent, and this shows the utility of our method.
The original Traﬃc Morphing [47] technique does not take
into account timings, so its distributions would match Skype
video for the packet sizes, but regular Tor traﬃc for the
inter-packet timings.
In order to evaluate the performance of SkypeMorph, we
tried downloading the g++ Debian package from a mirror lo-
cated in South America9 by directly connecting to a bridge
operated by us at a rate of 40–50 KB/s. Using the same
bridge, we downloaded the ﬁle over SkypeMorph, using each
of the na¨ıve traﬃc shaping and enhanced Traﬃc Morph-
ing methods, and compared the average download speed,
network bandwidth used, and overhead percentage. We re-
peated the experiment 25 times for each method. The results
are given in Table 1.
The overhead given is the percentage that the total net-
work bandwidth (including TCP/IP or UDP/IP headers,
retransmissions, padding, TLS, etc.) exceeds the size of the
ﬁle downloaded. Although the very high variance makes it
hard to see just by comparing the summary statistics in the
table, the raw data shows that normal bridge traﬃc con-
sistently incurs a 12% overhead, due to overheads incurred
by Tor, TLS, and TCP/IP. The overhead of SkypeMorph
9http://ftp.br.debian.org/debian/pool/main/g/gcc-
4.4/g++-4.4_4.4.5-8_i386.deb
is a little more than twice that; we incur the extra cost of
sending padding when not enough data is available to ﬁll
the packet size informed by the traﬃc shaping oracle. We
see that the na¨ıve traﬃc shaping method and the enhanced
Traﬃc Morphing method perform very similarly; indeed, the
Kolmogorov-Smirnov test reports that there is no statisti-
cally signiﬁcant diﬀerence between the results of those two
methods (p > 0.5). Do note, however, that this overhead in-
cludes no silent periods, i.e., times for which we have no Tor
traﬃc in our buﬀer, and so everything sent on the wire is
padding. Taking these silent periods into account, the over-
head is increased by the current bandwidth usage (in this
experiment, about 43 KB/s). This is the same behaviour as
an ordinary Skype video call; data is transmitted at an ap-
proximately constant rate, whether or not the participants
are actually communicating.
8. DISCUSSION AND FUTURE WORK
Overhead. As seen in the previous section, we found
that when inter-packet timing is introduced to the Traﬃc
Morphing technique, the traﬃc becomes less distinguishable
from Skype traﬃc (the target distribution), but it also be-
comes less eﬀective in reducing the overhead. The overhead
in SkypeMorph is highly dependent on how much Tor traﬃc
is available to the proxy. SkypeMorph will always send the
same amount of data as a real Skype video connection would;
if there is not that much useful Tor traﬃc to send, the rest is
padding. Hence, if we experience many silent periods—when
the proxy’s sending buﬀer is empty—the overhead grows due
to the padding sent by the proxy.
Mobile Bridges. A side advantage of SkypeMorph is