![里程表翻转](/data/attachment/album/202307/15/114250n0zzuo1plnciubo2.jpg)
Glibc 项目也 [支持 64 位时间](https://www.phoronix.com/scan.php?page=news_item&px=Glibc-More-Y2038-Work)，那么就大功告成了，对吗？不幸的是，根据 [Debian 邮件列表中的讨论](https://groups.google.com/g/linux.debian.ports.arm/c/_KBFSz4YRZs) 来看，情况并非如此。发行版面临难以选择的问题，要么为 32 位系统提供所有二进制软件包的两个版本，要么为安装介质提供两个版本。在后一种情况下，32 位时间的用户将不得不重新编译其应用程序并重新安装。正如往常一样，专有应用程序才是一个真正的头疼问题。
### Linux 稳定 ABI 里到底包括什么内容？
理解稳定 ABI 有些微妙。需要考虑的是，尽管大部分 sysfs 是稳定 ABI，但调试接口肯定是不稳定的，因为它们将内核内部暴露给用户空间。Linus Torvalds 曾表示，“不要破坏用户空间”，通常情况下，他是指保护那些 “只想它能工作” 的普通用户，而不是系统程序员和内核工程师，后者应该能够阅读内核文档和源代码，以了解不同版本之间发生了什么变化。下图展示了这个区别。
![稳定性保证](/data/attachment/album/202307/15/114251g9349fv0o10cg1i3.png)
普通用户不太可能与 Linux ABI 的不稳定部分进行交互，但系统程序员可能无意中这样做。除了 `/sys/kernel/debug` 以外，sysfs（`/sys`）和 procfs（`/proc`）的所有部分都是稳定的。
那么其他对用户空间可见的二进制接口如何呢，包括 `/dev` 中的设备文件、内核日志文件（可通过 `dmesg` 命令读取）、文件系统元数据或在内核的 “命令行” 中提供的 “引导参数”（在引导加载程序如 GRUB 或 u-boot 中可见）呢？当然，“这要视情况而定”。
### 挂载旧文件系统
除了 Linux 系统在引导过程中出现挂起之外，文件系统无法挂载是最令人失望的事情。如果文件系统位于付费客户的固态硬盘上，那么问题确实十分严重。当内核升级时，一个能够在旧内核版本下挂载的 Linux 文件系统应该仍然能够挂载，对吗？实际上，“这要视情况而定”。
在 2020 年，一位受到伤害的 Linux 开发人员在内核的邮件列表上 [抱怨道](https://lwn.net/ml/linux-kernel/20201006050306.GA8098@localhost/)：
> 
> 内核已经接受这个作为一个有效的可挂载文件系统格式，没有任何错误或任何类型的警告，而且已经这样稳定地工作了多年……我一直普遍地以为，挂载现有的根文件系统属于内核用户空间或内核现有系统边界的范围，由内核接受并被现有用户空间成功使用的内容所定义，升级内核应该与现有用户空间和系统兼容。
> 
> 
> 
但是有一个问题：这些无法挂载的文件系统是使用一种依赖于内核定义，但并未被内核使用的标志的专有工具创建的。该标志未出现在 Linux 的 API 头文件或 procfs/sysfs 中，而是一种 [实现细节](https://en.wikipedia.org/wiki/Encapsulation_(computer_programming))。因此，在用户空间代码中解释该标志意味着依赖于“[未定义行为](https://en.wikipedia.org/wiki/Undefined_behavior)”，这是个几乎会让每个软件开发人员都感到战栗的短语。当内核社区改进其内部测试并开始进行新的一致性检查时，“[man 2 mount](https://www.man7.org/linux/man-pages/man2/mount.2.html)” 系统调用突然开始拒绝具有专有格式的文件系统。由于该格式的创建者明确是一位软件开发人员，因此他未能得到内核文件系统维护者的同情。
![施工标志上写着工作人员在树上进行工作](/data/attachment/album/202307/15/114251b5duztzcg5514uir.jpg)
### 线程化内核的 dmesg 日志
`/dev` 目录中的文件格式是否保证稳定或不稳定？[dmesg 命令](https://www.man7.org/linux/man-pages/man1/dmesg.1.html) 会从文件 `/dev/kmsg` 中读取内容。2018 年，一位开发人员 [为 dmesg 输出实现了线程化](https://lkml.org/lkml/2018/11/24/180)，使内核能够“在打印一系列 `printk()` 消息到控制台时，不会被中断和/或被其他线程的并发 `printk()` 干扰”。听起来很棒！通过在 `/dev/kmsg` 输出的每一行添加线程 ID，实现了线程化。密切关注的读者将意识到这个改动改变了 `/dev/kmsg` 的 ABI，这意味着解析该文件的应用程序也需要进行相应的修改。由于许多发行版没有编译启用新功能的内核，大多数使用 `/bin/dmesg` 的用户可能没有注意到这件事，但这个改动破坏了 [GDB 调试器](https://sourceware.org/gdb/current/onlinedocs/gdb/) 读取内核日志的能力。
确实，敏锐的读者会认为 GDB 的用户运气不佳，因为调试器是开发人员工具。实际上并非如此，因为需要更新以支持新的 `/dev/kmsg` 格式的代码位于内核自己的 Git 源代码库的 “树内” 部分。对于一个正常的项目来说，单个代码库内的程序无法协同工作就是一个明显的错误，因此已经合并了一份 [使 GDB 能够与线程化的 /dev/kmsg 一起工作的补丁](https://lore.kernel.org/all/PI:EMAIL/)。
### 那么 BPF 程序呢？
[BPF](https://opensource.com/article/19/8/introduction-bpftrace) 是一种强大的工具，可以在运行的内核中监控甚至实时进行配置。BPF 最初的目的是通过允许系统管理员即时从命令行修改数据包过滤器，从而支持实时网络配置。[Alexei Starovoitov 和其他人极大地扩展了 BPF](https://lwn.net/Articles/740157/)，使其能够跟踪任意内核函数。跟踪明显是开发人员的领域，而不是普通用户，因此它显然不受任何 ABI 保证的约束（尽管 [bpf() 系统调用](https://www.man7.org/linux/man-pages/man2/bpf.2.html) 具有与其他系统调用相同的稳定性承诺）。另一方面，创建新功能的 BPF 程序为“[取代内核模块成为扩展内核的事实标准手段](https://lwn.net/Articles/909095/)”提供了可能性。内核模块使设备、文件系统、加密、网络等工作正常，因此明显是“只希望它工作”的普通用户所依赖的设施。问题是，与大多数开源内核模块不同，BPF 程序传统上不在内核源代码中。
2022 年春季，[一个提案](https://lwn.net/ml/ksummit-discuss/CAO-hwJJxCteD_BHZTeqQ1f7gWOHoj+PI:EMAIL/) 成为了焦点，该提案提议使用微型 BPF 程序而不是设备驱动程序补丁，对广泛的人机接口设备（如鼠标和键盘）提供支持。
随后进行了一场激烈的讨论，但这个问题显然在 [Torvalds 在开源峰会上的评论](https://lwn.net/ml/ksummit-discuss/PI:EMAIL/) 中得到解决：
> 
> 他指出，如果你破坏了“普通（非内核开发人员）用户使用的真实用户空间工具”，那么你需要修复它，无论是否使用了 eBPF。
> 
> 
> 
一致意见似乎正在形成，即希望其 BPF 程序在内核更新后仍能正常工作的开发人员 [将需要将其提交到内核源代码库中一个尚未指定的位置](https://lwn.net/ml/ksummit-discuss/PI:EMAIL/)。敬请关注后继发展，以了解内核社区对于 BPF 和 ABI 稳定性将采取什么样的政策。
### 结论
内核的 ABI 稳定性保证适用于 procfs、sysfs 和系统调用接口，但也存在重要的例外情况。当内核变更破坏了“树内”代码或用户空间应用程序时，通常会迅速回滚有问题的补丁。对于依赖内核实现细节的专有代码，尽管这些细节可以从用户空间访问，但它并没有受到保护，并且在出现问题时得到的同情有限。当像 Y2038 这样的问题无法避免 ABI 破坏时，会以尽可能慎重和系统化的方式进行过渡。而像 BPF 程序这样的新功能提出了关于 ABI 稳定性边界的尚未解答的问题。
### 致谢
感谢 [Akkana Peck](https://shallowsky.com/blog/)、[Sarah R. Newman](https://www.socallinuxexpo.org/scale/19x/presentations/live-patching-down-trenches-view) 和 [Luke S. Crawford](https://www.amazon.com/Book-Xen-Practical-System-Administrator/dp/1593271867) 对早期版本材料的有益评论。
*（题图：MJ/da788385-ca24-4be5-bc27-ad7e7ef75973）*
---
via: 
作者：[Alison Chaiken](https://opensource.com/users/chaiken) 选题：[lkxed](https://github.com/lkxed) 译者：ChatGPT 校对：[wxy](https://github.com/wxy)
本文由 [LCTT](https://github.com/LCTT/TranslateProject) 原创编译，[Linux中国](https://linux.cn/) 荣誉推出