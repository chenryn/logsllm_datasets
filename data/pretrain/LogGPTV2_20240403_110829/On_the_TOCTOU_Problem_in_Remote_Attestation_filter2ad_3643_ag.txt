### 优化后的文本

#### 代码部分
```c
void Hacl_HMAC_SHA2_256_hmac_entry() {
    uint8_t key[64] = {0};
    uint8_t verification[32] = {0};

    if (memcmp(CHALL_ADDR, CTR_ADDR, 32) > 0) {
        memcpy(key, KEY_ADDR, 64);
        hacl_hmac(verification, (uint8_t*) CHALL_ADDR, key, 64, 32);

        if (!memcmp(VRF_AUTH, verification, 32)) {
            hacl_hmac(key, key, 64, 32);
            hacl_hmac((uint8_t*) MAC_ADDR, key, 32, ATTEST_SIZE);
            memcpy(CTR_ADDR, CHALL_ADDR, 32);
        }
    }

    return;
}
```

#### 文本部分

**Figure 9: SW-Att 实现与 Vrf 身份验证 [10]**

为了防止对手冒充 Vrf 并向 Prv 发送虚假的认证请求，VRASED 设计支持在执行 SW-Att 时对 Vrf 进行身份验证。该实现基于协议 [59]。在此协议中，Chal 由 Vrf 选择为单调递增的随机数，即连续请求 i 和 i + 1 的 Chali 和 Chali+1 满足 Chali < Chali+1。因此，Adv 可以生成 tLMT || HAdv 使得：

VerifyVrf(HAdv, Chal, M, t0, tLMT) = 1
并且
∃t0 ≤ ti ≤ tat t {AR(ti) ≠ M}

根据定义，Construction 1 中的 Verify 结果为 1 仅当 tLMT 不可忽略。

**C. 定理 6.1 的证明**

我们现在证明，如果公式 15、16 和 17 的属性成立，那么存在 Adv 在 TOCTOU 安全游戏中赢得 RAT AB 的情况下，也存在另一个 Adv 在 RA 安全游戏中赢得 VRASED，从而与初始前提矛盾。

**证明：**

假设存在一个多项式时间的 Adv，在 Definition 4.1 的游戏中获胜的概率为 Pr[Adv,RA-TOCTOU-game] > negl(l)。因此，Adv 可以生成响应 LMTAdv || HAdv 使得：

VerifyVrf(HAdv, Chal, M, t0, T, LMTAdv) = 1
并且
∃t0 ≤ ti ≤ tat t {AR(ti) ≠ M}

根据 Construction 2 的定义，如果 LMTAdv 与 Vrf 存储在挑战时间关联对 P = (ChalP, tP) 中的 ChalP 不同，则 Verify 输出 0。如果 LMTAdv = ChalP，它对应于在 t0 之前发送的挑战值（假设 Vrf 合理选择了 t0）。因此，为了获胜，Adv 必须选择 LMTAdv = ChalP。

由于 LMT ∈ AR，通过声称符合上述限制的 LMTAdv 值，Adv 使预期的内存值 M 也反映 LMT = LMTAdv。此时，Adv 有两种可能的操作：修改 AR 以调用 Attest 且 AR(tatt) = M；或者即使 AR(tatt) ≠ M 也能获得 HAdv。首先我们证明后者是 Adv 的唯一选项。

假设 Adv 尝试设置 AR(tatt) = M 以调用 Attest。在这种情况下，我们强调关于 RAT AB 的三点观察：
1. 根据 LTL 语句 17，任何在第 i 次和第 (i + 1) 次认证计算之间的 AR 修改，将导致 AR 在随后的 RA 响应中反映 LMT = Chali+1。因此，前提 ∃t0 ≤ ti ≤ tat t {AR(ti) ≠ M} 必然会更新 LMT。
2. 从 VRASED 认证（见附录 A），对于成功认证的连续 RA 挑战 Chali 和 Chali+1，总是有 Chali < Chali+1。
3. 作为 Definition 3.2 游戏步骤 3 的响应，AdvRA 回复 σ = HAdv。

因为 VerifyVrf(HAdv, Chal, M, t0, T, LMTAdv) = 1，所以 σ = HMAC(KDF(K, Chal), M)（AdvRA 获胜的第一个条件），对于包含 LMT = LMTAdv 的预期 M。另一方面，因为在时间 ti 处修改了内存，必须有 AR(t) 的 LMT ≠ LMTAdv。因此，满足 AR(t) ≠ M 的剩余条件意味着 AdvRA 在 Definition 3.2 游戏中获胜的概率为：

Pr[Adv,RA-game] = Pr[Adv,RA-TOCTOU-game] > negl(l)

□

**D. 使用 SANCUS 实现 RAT A**

为了展示 RAT A 的通用性，我们还在 SANCUS [20] 上实现了它：这是一种面向同一类嵌入式设备的硬件 RA 架构。据我们所知，除了用于验证实现的 VRASED 之外，SANCUS 是唯一针对低端嵌入式系统的开源 RA 架构，这正是我们的选择原因。请注意，此实现旨在展示 RAT A 的通用性，并且从 RAT A-with-VRASED 得出的可证明安全保证不适用于此处。由于 SANCUS 没有提供正式的安全模型和分析，目前无法证明 RAT A 在 SANCUS 上的组合安全性。

由于 RAT A 作为一个独立的监控器运行，不会干扰 CPU 或底层 RA 架构的功能，因此将 RAT A 适配到 SANCUS 几乎不需要额外努力。我们用 RAT AA 描述这个实现，RAT AA 更简单且不依赖于 Vrf 身份验证。与基于 VRASED 的实现的主要区别在于 SANCUS 支持隔离的软件模块（SMs），每个 SM 作为独立程序单独认证。需要注意的是，即使 SANCUS 支持认证和进程间隔离，也无法提供 TOCTOU 安全性，因为 Prv 程序内存可以通过物理重新编程或利用隔离应用程序代码中的漏洞进行修改，而无需 Vrf 的知识。因此，类似于 VRASED 的 RA 情况，RAT A 也补充了 SANCUS 的安全保证。

要启用 SANCUS 上的 RAT A 功能，必须小心配置软件二进制文件，使特定 SM 的程序内存与 RAT A 的 AR 区域重合。这样，SM 的程序内存将自动由 RAT A 模块检查，SANCUS 对此类 SM 程序内存的认证也将覆盖 LMT（因为 LMT ∈ AR），从而为 Vrf 提供最新修改时间的认证证明。

请注意，这种方法需要每个 SM 有一个 RAT A 模块，因为多个 SM 意味着将 Prv 程序内存划分为多个 AR 和相应的 LMT 区域。然而，由于低端设备通常只运行很少的进程，预计成本仍然可控。

由于 SANCUS 与 VRASED（OpenMSP430）在同一 MCU 上实现，因此无需对 RAT A 硬件模块进行内部修改，其额外的硬件成本与表 2 报告的一致。为了支持多个 SM 的 TOCTOU-Secure 认证，此成本线性增长，即一个 RAT A 硬件模块的成本乘以需要支持 TOCTOU-Secure 认证的独立 SM 数量。在 RAT AA 中，所有这些模块可以共享同一个安全只读同步时钟。

**Session 11A: 认证和固件安全**
CCS '21, 2021年11月15日至19日, 虚拟活动, 韩国