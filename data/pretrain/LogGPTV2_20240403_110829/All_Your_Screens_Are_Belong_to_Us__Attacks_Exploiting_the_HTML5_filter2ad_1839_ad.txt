an attacker can still steal the secret information because the
attacker can see the pages containing sensitive information
by opening them in a new window. The attacker can make it
imperceptible to the user by opening and closing the window
really fast. Similarly,
they can also collect personal and
account activity information. We use the following examples
to illustrate such attacks.
Account Activity Snifﬁng. Websites hosting sensitive account
activity information are vulnerable when X-Frame-Options are
not enabled. Here we chose PayPal as an example.
•
Paypal:
https://www.paypal.com/us/cgi-bin/webscr?cmd=
43
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:01:26 UTC from IEEE Xplore.  Restrictions apply. 
implemented CSRF defense, can be stolen by the combination
of the view-source link and the screen sharing API. The defenses
that block JavaScript queries against history snifﬁng can also
be compromised because an attacker can see a user’s history
directly from the screen. SSL cannot guarantee the integrity
and conﬁdentiality of the user’s session with a trusted website
because the attacker is able to access the raw data that is already
decrypted in the client side.
C. Discussion about Potential Defenses
As we discussed in the last section, current defenses
deployed by browsers and websites are not designed against
the screen sharing API and cannot stop all attacks. This
demonstrates that new defenses need to be developed to secure
the API. Therefore, we propose several potential defenses
against screen sharing atttacks. These defenses can be classiﬁed
into 3 categories : security enhancement for browser vendors,
best practices for websites and best practices for users. We
compare the usability and security of the potential defenses
(see Table III) and analyze the details of these methodologies in
the following sections. A privacy-preserving and more usable
solution will require further investigation.
1) Security Enhancement
in Browsers: To defend and
mitigate against these attacks, browser vendors can enforce
constraints over screen sharing. We discuss potential defenses
below, and compare the pros and cons of these approaches.
Restrict loading View-source Links The view-source option
is vulnerable because attackers can exploit it to get access to
source code that contains sensitive information such as CSRF
tokens. Browsers should prevent view-source links to be opened
through JavaScript. The page that displays the page-source
should be opened only when the user makes an explicit
request through the browser UI and not programmatically
using JavaScript. This lightweight approach can reduce the
attack surface introduced by screen sharing. Chrome has
removed the access to view-source pages in iframes via
Javascript after this issue was reported. This issue is also
patched in the latest Firefox version. However, these patches
can not defend against viewing the cross-origin page in pop-ups.
Incognito Mode. One of the most intuitive ways to defend
against screen sharing attacks is to enforce incognito mode
when screen sharing is initiated. However,
this approach
itself cannot throughly assure privacy during screen sharing.
Before incognito mode is launched, attackers can pop up
windows containing sensitive information and hide them in the
background. Once the screen sharing session starts, attackers
can change the focus of the screen to display those hidden
windows.
Fig. 17. The attacker can collect sensitive personal information from PayPal
by displaying the account information page.
of screen sharing on a benign website, the screen sharing attack
could also be fulﬁlled. For instance, if the user has a friend
whose account has been compromised, the friend could invite
the user into a screen sharing session and convince the user
to click adversarial links. Generally speaking, once the screen
sharing session starts, the attack becomes possible.
Second, the adversary is capable of playing some tricks
to render the attack invisible to user due to the limitation of
human vision. The user can hardly notice the ﬂashing content
and almost transparent content. Even if the user observes
something suspicious and stops the screen sharing, the attacker
has already captured the sensitive information and ﬁnished the
attack. Finally, to make the attack even less observable, the
attacker can combine the timing attacks to determine whether
the user is logged into the target websites. The attacker may
choose to only launch attacks when the user has active sessions
with the target websites.
B. Deﬁciencies of Current Defenses
In Section IV, we demonstrate a variety of attacks that
could compromise the integrity and conﬁdentiality of trusted
websites. Modern browsers such as Google Chrome and Firefox
may be vulnerable to those attacks because the defenses they
currently adopt do not consider the security implications of the
screen sharing API. Those defenses make certain assumptions
that are no longer valid if screen sharing is being used.
As listed in Table II, the assumptions of the CSRF, history
snifﬁng, and SSL defenses are not valid in the context of
screen sharing. The CSRF tokens, which is the most widely
44
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:01:26 UTC from IEEE Xplore.  Restrictions apply. 
Defenses
CSRF defense using secret
validation tokens
Block JavaScript queries for
CSS styles
SSL
False Assumptions
Secret validation tokens are secured by the
browser
History information is guarded by the browser
Content transmitted via SSL is not readable
to the attacker
Attacks
Attacker can use the view-source link to expose
the tokens
iframe and window objects can directly expose
an user’s history
Read the data after the browser decrypts it and
renders on the screen.
TABLE II.
DEFICIENCIES OF CURRENT DEFENSES FOR SCREEN SHARING ATTACK
Category
For browser vendors
Approach
Restrict loading view-
source links
Usability
High, no user interac-
tion
Incognito mode
Medium, require ba-
sic user interaction
Fine-grained sharing
Share one-tab at a
time and constrain
cross-origin content
Implement
proper
CSRF defenses
Implement X-Frame-
Options headers
Log out other web-
sites
to
Low, need user
conﬁgure tediously
Medium, require ba-
sic user interaction
High, no user interac-
tion needed
High, no user interac-
tion needed
Low, need user
conﬁgure tediously
to
For websites
For users
Security
Medium, can block
CSRF attacks, but
not
the secrecy at-
tacks
Medium,
block
seeing
pages
High, can block most
attacks
High, can block most
attacks
cannot
user
from
pre-opened
can
Medium,
not
block secrecy attack
Medium,
not
block pop-up attacks
High, can block most
attacks
can
Implementation Effort
Minor, remove a feature
Medium, add feaure to run
incognito mode when shar-
ing screen
Medium, add a feature
Medium, add a feature
Medium, add a feature
Medium, add a feature
None
TABLE III.
COMPARISON OF POTENTIAL DEFENSES
Fine-grained Sharing. Setting up a ﬁne-grained scope for
screen sharing and/or asking users to specify the domains they
want to share help to conﬁne the capability of attackers. When
users share content at the DOM element level, the attacker can
only obtain the DOM elements the users choose to share. This
presumes that users know which elements contain sensitive
information and they are not tricked into sharing elements
they do not want to share. However, because it is tedious
for users to select the DOM elements every time, they might
tend to select more elements than intended, or even all of the
elements to share. The same usability issues might also arise
when users are asked about what domains they want to share.
Users might end up approving the screen sharing website to
handle information from more origins than needed.
Share one-tab at a time and constrain cross-origin content.
The idea is to only allow sharing content of one tab each time
and set up constraints for cross-origin content, as is illustrated
in Figure 18.
First, we can prevent attacks of collecting information from
Screen Sharing Website 
Tab B 
Tab A 
Cross-
Origin 
Content 
Only  one tab is 
shared at a time 
Prevent cross-
origin content 
from being 
displayed 
Fig. 18. Defense by sharing one-tab at a time and constraining cross-origin
content
other tabs by enforcing users to only share one tab at a time.
Every time the user wants to share another tab, he needs to
choose the new tab and reinitiate screen sharing. The new tab
45
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:01:26 UTC from IEEE Xplore.  Restrictions apply. 
will be reloaded before it is shared to make sure no historic
information is leaked to the sharing server. The sharing process
will be disabled in the former tab and enabled in the new tab.
By enforcing this approach, the attacks which exploit bugs
to pop out windows or change the focus of screens will be
blocked. Most of the screen sharing use cases involve a single
tab and are not affected by this defense.
Secondly, we constrain the content in the iframe during
screen sharing to prevent attackers from getting useful infor-
mation, such as tokens or other credentials, by framing to
other websites. There are two options to block the cross-origin
information leakage in iframes. One option is to blank out
the cross-origin content in the iframe. If the attacker tries to
embed iframes to other origins, they will only get empty pages.
However, it might bring along some usability issues to the user.
Another is blocking third-party cookies. Even if attackers try
to iframe to victim websites and the user has logged into their
account in the victim website, the attackers can only get the
login page. If they want to collect sensitive personal information
or account information, they will need the user to log in from
the iframe again. This approach will break some applications
which depend on third-party cookies, such as advertisements
and the Facebook Like button. Though the constraints on iframe
content might reduce usability, they improve the security of
the API and they are only enabled when users are sharing the
screen.
Limiting screen sharing to only one tab at a time and using
iframe cross-origin ﬁlters will reduce the attack surface and
retain most of the screen sharing use cases. It is the most
promising idea which strikes a balance between security and
usability. Chrome starts to work on tab pickers for screen
sharing, while blocking third party content
is still under
discussion.
2) Best Practices for Websites: Websites can defend against
the basic attacks that exploit screen sharing by implementing
controls such as X-Frame-Options and verifying the ORIGIN
header, however they cannot defend against sophiscated screen
sharing attacks such as stealing information by opening new
windows. In the following sections, we discuss about these
standard defenses which can be used to reduce the attack surface
and their deﬁciencies.
Implement CSRF defenses with ORIGIN header. Websites
can prevent CSRF attacks in which the attacker steals the secret
token by viewing it in the source by verifying the ORIGIN
header. So even if the attacker gets the token via the shared
screen, he would not be able to complete the attack if the server
veriﬁes the ORIGIN. Note that ORIGIN header should not be
used as an alternative to CSRF tokens but should be used as an
additional defense, since the ORIGIN header is only supported
in WebKit-based browsers, not Firefox or Internet Explorer..
Implement X-Frame-Options headers. Websites can prevent
their sensitive pages to be loaded inside malicious websites,
thus preventing the attacker to view-source inside an iframe.
However, the attacker can still get around this defense by
opening the target webpage in a new pop-up window.
Avoid using Double Submit Cookies. Instead of generating
a new token, the double submit cookies technique [18] uses
a session ID as a random token. The session ID present in
the cookie is copied in the page source and is submitted as