information ﬂow in query names, and the inbound ﬂow
in server responses.
In the absence of outbound data,
the client sends low-frequency queries to poll the tun-
nel server for any pending data. The functionality of
these tunnels ranges from a simple client-to-server vir-
tual circuit to full IP-level connectivity. Examples are
NSTX [13], dns2tcp [7], Iodine [10], OzymanDNS [15],
tcp-over-dns [25], and Heyoka [14]. DNS exﬁltration has
also been a tool in the attacker’s toolbox for a number of
years (per [22] and the references therein).
Beyond query names, the DNS message format con-
tains a variety of ﬁelds that could be used for embed-
In addition to the
ding data (as we detail in § 5.1).
DNS-speciﬁc message ﬁelds, timing (e.g., the timing of
queries) provides a rich vector for embedding data. This
is not unique to DNS trafﬁc, but present in all Internet
trafﬁc, allowing any message to be encoded in the inter-
arrival times between packets. Gianvecchio et al. [12]
showed how to automatically construct timing channels
that mimic the statistical properties of legitimate net-
work trafﬁc to evade detection. Our detection technique
avoids such complication by measuring information con-
tent rather than particular statistical properties.
One approach for detecting covert communication
over DNS examines the statistical properties of DNS traf-
ﬁc streams. Karasaridis et al. propose DNS tunnel detec-
tion by computing hourly the Kullback-Leibler distance
between baseline and observed DNS packet-size distri-
butions [16]. To defeat such temporal statistical anomaly
detectors, Butler et al. propose stealthy half-duplex and
full-duplex DNS tunneling schemes [5]. They also pro-
pose the use of Jensen-Shannon divergence of per-host
byte distributions of DNS payloads to detect tunneled
trafﬁc. Their detection technique only ﬂags whether
the aggregate trafﬁc contains tunneled communication; it
does not identify the potential tunneled domains. In addi-
tion, the detection rate depends to a large extent on the ra-
tio of tunneled trafﬁc to normal trafﬁc. In [3], the authors
show that domain names in legitimate DNS queries have
1-, 2-, and 3-gram ﬁngerprints following Zipf distribu-
tions, which distinguishes them from the higher-entropy
names used in DNS tunneling. The evaluations in these
works do not particularly address practicality for opera-
tional use, however, since the authors validate their hy-
potheses on short, low-volume benign and synthetic tun-
neled traces collected using free DNS tunneling tools. As
we discuss in § 5.2, large-scale DNS trafﬁc often exhibits
extensive diversity in multiple dimensions, which likely
will exacerbate issues of false positives.
Our work overlaps with work on algorithmically-
generated domain names by Yadav et al. [29]. The most
salient difference is that their algorithm assumes a spe-
ciﬁc model of name construction (distributions of letters
and bigrams). Instead of focusing on speciﬁc name pat-
terns and missing communication that uses different en-
codings, we measure the aggregate information content
of a query stream regardless of how encodings are gen-
erated for the query name, type or timing.
Detection of timing channels has been studied before,
and we mention here only a few recent results. Cabuk
et al. [6] observe that timing-based tunnels often in-
troduce artiﬁcial regularity in packet inter-arrival times
and present detection methods based on this characteris-
tic. More generally, Gianvecchio and Wang [11] identify
timing-based tunnels in general Internet trafﬁc (not just
DNS) by using conditional entropy measures to identify
the subtle distortions introduced by the tunnel in packet
inter-arrival time distributions. These works use time in-
tervals of 20 msec or more; we use a more conservative
10 msec timing resolution, and do not assume the pres-
ence of detectable distortions.
While the general problem of surreptitious communi-
cation has received extensive examination in the litera-
ture of covert channels and steganography, more closely
related to our work is previous research on bounding the
volume of surreptitious communication in other proto-
cols. Borders et al. studied this problem for HTTP, ob-
serving that covert communication is constrained to the
user-generated part of an outgoing request [1, 2]. By
removing ﬁxed protocol data and data derived from in-
bound communication, the authors show how to deter-
mine a close approximation to the true volume of infor-
mation ﬂows in HTTP requests. An analogous approach
for our problem domain would be to track the domain
names a system receives from remote sources (such as
web pages and incoming email), and to exclude lookups
for these names as potentially conveying information.
Such tracking, however, appears infeasible without re-
quiring extensive per-system monitoring.
30  22nd USENIX Security Symposium 
14
USENIX Association
11 Summary
We have presented a comprehensive procedure to de-
tect stealthy communication that an adversary transmits
via DNS queries. We root our detection in establishing
principled bounds on the information content of entire
query streams. Our approach combines careful encod-
ing and ﬁltering stages with the use of lossless compres-
sion, which provides guarantees that we never underes-
timate information content regardless of the speciﬁc en-
coding(s) an attacker employs.
We demonstrated that our procedure detects conven-
tional tunnels that encode information in query names,
as well as previously unexplored tunnels that repeatedly
query names from a ﬁxed alphabet, vary query types, or
embed information in query timing. We applied our de-
tection procedure to 230 billion lookups from a range
of production networks and addressed numerous chal-
lenges posed by anomalous-yet-benign DNS query traf-
ﬁc.
In our assessment we found that for datasets with
lookups by individual clients and a threshold of detect-
ing 4 kB/day of exﬁltrated data per client and domain, the
procedure typically ﬂags about 1–2 events per week for
enterprise sites. For a bound of 10 kB, it typically ﬂags
50 per day for extremely aggregated logs at the scale of
a national ISP. In addition, buried within this vast num-
ber of lookups our procedure found 59 conﬁrmed tunnels
used for surreptitious communication.
Acknowledgments
Our thanks to Partha Bannerjee, Scott Campbell, Haixin
Duan, Robin Sommer, and James Welcher for facilitating
some of the data and processing required for this work.
Our thanks too to Christian Rossow and the anonymous
reviewers for their valuable comments.
This work would not have been possible without the
support of IBM’s Open Collaboration Research awards
program. In addition, elements of this work were sup-
ported by the U.S. Army Research Ofﬁce under MURI
grant W911NF-09-1-0553, and by the National Sci-
ence Foundation under grants 1161799, 1223717, and
1237265. Any opinions, ﬁndings, and conclusions or
recommendations expressed in this material are those of
the authors and do not necessarily reﬂect the views of the
sponsors.
References
[1] BORDERS, K., AND PRAKASH, A. Towards Quantiﬁca-
tion of Network-Based Information Leaks via HTTP. In
Proceedings of the 3rd USENIX Workshop on Hot Topics
in Security (2008), USENIX Association.
[2] BORDERS, K., AND PRAKASH, A. Quantifying Infor-
mation Leaks in Outbound Web Trafﬁc. In Proceedings
of the IEEE Symposium on Security and Privacy (2009),
USENIX Association.
[3] BORN, K., AND GUSTAFSON, D. Detecting DNS Tun-
nels Using Character Frequency Analysis. In Proceedings
of the 9th Annual Security Conference (2010).
[4] BROMBERGER, S.
DNS as a Covert Channel
http://energy.gov/
Within Protected Networks.
sites/prod/ﬁles/oeprod/DocumentsandMedia/
DNS Exﬁltration 2011-01-01 v1.1.pdf, 2011.
[5] BUTLER, P., XU, K., AND YAO, D. Quantitatively an-
alyzing stealthy communication channels.
In Proceed-
ings of International Conference on Applied Cryptogra-
phy and Network Security (2011).
[6] CABUK, S., BRODLEY, C. E., AND SHIELDS, C.
Ip
covert timing channels: design and detection.
In Pro-
ceedings of the 11th ACM conference on Computer and
communications security (New York, NY, USA, 2004),
CCS ’04, ACM, pp. 178–187.
[7] DEMBOUR, O.
DNS2tcp.
http://www.hsc.fr/
ressources/outils/dns2tcp/index.html.en.
[8] DNStunnel. http://www.dnstunnel.de/.
[9] Dynamic Internet Technology. http://www.dit-inc.us/.
[10] EKMAN, E., AND ANDERSSON, B. Iodine, tunnel IPv4
over DNS. http://code.kryo.se/iodine/, 2011.
[11] GIANVECCHIO, S., AND WANG, H. An entropy-based
approach to detecting covert timing channels. Depend-
able and Secure Computing, IEEE Transactions on 8, 6
(Nov/Dec. 2011), 785–797.
[12] GIANVECCHIO, S., WANG, H., WIJESEKERA, D., AND
JAJODIA, S. Model-based covert timing channels: Au-
tomated modeling and evasion.
In Proceedings of the
11th international symposium on Recent Advances in In-
trusion Detection (Berlin, Heidelberg, 2008), RAID ’08,
Springer-Verlag, pp. 211–230.
[13] GIL, T. NSTX (IP-over-DNS). http://thomer.com/
howtos/nstx.html.
[14] Heyoka. http://heyoka.sourceforge.net/.
[15] KAMINSKY, D. OzyManDNS.
[16] KARASARIDIS, A., MEIER-HELLSTERN, K., AND
HOEFLIN, D. Detection of DNS anomalies using ﬂow
data analysis. In Global Telecommunications Conference
(GLOBECOM) (2006).
[17] KREIBICH, C., WEAVER, N., NECHAEV, B., AND PAX-
SON, V. Netalyzr: Illuminating the edge network. In Pro-
ceedings of the ACM Internet Measurement Conference
(IMC) (Melbourne, Australia, November 2010), pp. 246–
259.
[18] MOCKAPETRIS, P. Domain names—implementation
and speciﬁcation. RFC 1035, Internet Engineering Task
Force, Nov. 1987.
[19] MOSKOWITZ, I. S., AND KANG, M. H. Covert chan-
nels - here to stay? In Proceedings of the Ninth Annual
Conference on Computer Assurance (1994), pp. 235–244.
[20] MOZILLA. Public Sufﬁx List. Published online at http:
//publicsufﬁx.org/. Last accessed on May 4, 2012.
USENIX Association  
15
22nd USENIX Security Symposium  31
[21] PAXSON, V. Empirically-Derived Analytic Models of
IEEE/ACM Transactions
Wide-Area TCP Connections.
on Networking 2, 4 (Aug. 1994), 316–336.
[22] RICKS, B. DNS Data Exﬁltrationa Using SQL In-
http://www.defcon.org/images/defcon-16/
jection.
dc16-presentations/defcon-16-ricks.pdf, 2008.
[23] SHKARIN, D. PPMd. http://www.compression.ru/ds/
ppmdj1.rar, 2006.
[24] Security Information Exchange. http://sie.isc.org/.
[25] tcp-over-dns.
http://analogbit.com/software/
tcp-over-dns.
[26] VIXIE, P. Extension Mechanisms for DNS (EDNS0).
RFC 2671 (Proposed Standard), Aug. 1999.
[27] VIXIE, P., AND DAGON, D. Use of Bit 0x20 in DNS
Labels to Improve Transaction Identity. Work in progress,
Internet Engineering Task Force, 2008.
[28] Wi-Free. http://wi-free.com/.
[29] YADAV, S., REDDY, A. K. K., REDDY, A. N., AND
RANJAN, S. Detecting algorithmically generated mali-
cious domain names. In Proceedings of the 10th annual
conference on Internet measurement (2010), IMC ’10,
ACM, pp. 48–61.
A Full Names for Examples
For completeness, Figure 7 lists the full names of various DNS
lookups that in the main body of the text we elided portions
for readability. Note that for some names we introduced minor
changes for privacy considerations.
B Issues Evaluating the SIE Dataset
The SIE data’s extreme volume and qualitatively different na-
ture necessitated several changes to our analysis procedure.
Our access to the data was via a Hadoop cluster, requiring cod-
ing of our algorithms in the Pig and Scala languages. These
provide efﬁcient support for only a subset of the functionality
we employed when analyzing the other datasets. A signiﬁcant
difference in this regard was that we were conﬁned to only us-
ing gzip for compression; bzip2 and ppmd were not available.
Another important difference concerns the deﬁnition of
“client”. A single large American ISP dominates the SIE data,
representing roughly 90% of the trafﬁc. This ISP uses clusters
of resolvers to process requests. Thus, a single abstract resolver
manifests as multiple “client IP addresses”, which we deter-
mined come from the same /28 address preﬁx. Therefore we
treat query source IP addresses equivalent in their top 28 bits as
constituting a single source.
This extreme aggregation leads to signiﬁcant increases in de-
tections, as we are now measuring the information volume for
queries aggregated across potentially hundreds of thousands
of clients. One particular increase in benign alerts arises due
to popular names with short TTLs (e.g., www.google.com).
With so many clients, every popular name becomes immedi-
ately refetched whenever its TTL expires, leading to a steady
stream of closely-spaced lookups. This very high level of ag-
gregation also generates such a large volume of detections for
5.1o19sr00ors95qo0p73415p3r8r8q777634r5o86osn295ss2rqos
s3r9601ro3.1r1p7r4719o34393648s2345nn60qnqoop45psos37n
551s002n80850sr2r8n3.r1105qqq28r7pn82843rp76383qr6344q
qpq7rpnrp63o957687r980r.rrqs656p04pn614q6n76o97883op73
r0p787rn92.i.02.s.sophosxl.net
g63uar2ejiq5tlrkg3zezf2fksjrxpxyvro4ce5yz65udnjn.dagbuu
5pkocwcaxkntmxzwvkbulhg3qlj6ho7jwobeddjqvv.gepxfdwfhu7
6on6gza2nkringxp35e6g3ftpqlpl5h6uofgo.kukjy4jvybu7jhrl
hrgxe7es3lmkxdrpmpb4lg7wmbpygjg7.gef2uoemc6pi88tz.er.s
potify.com
awyvrvcataaaegdid5tmr7eteje2kst35frnnr3kupbfc6hr.gq3dey
4qnjvqtoltoj2dq5bxnmaauaaeaiaaeg7xa4ut3ilu.license.cra
shplan.com
www.10.1.2.3.static.because.dul.is.rfc.ignorant.edu.za.
static.because.dul.is.rfc.ignorant.edu.za.research.edu
JohnsonHouse\032Officejet\032J6400\032\032The\032Johnso
n\032MacBook. ipp. tcp.johnsonhouse1.members.mac.com
(a) Example DNS names with more than 100 bytes in length (cf. § 5.2).
1751913.86c0ade0d13143ab83d7e4f60cbd204c.00000000.xello
.xobni.com
1753942.86c0ade0d13143ab83d7e4f60cbd204c.00000000.xello
.xobni.com
1756950.86c0ade0d13143ab83d7e4f60cbd204c.00000000.xello
.xobni.com
1758762.86c0ade0d13143ab83d7e4f60cbd204c.00000000.xello
.xobni.com
(b) Example DNS names with little variation between consecutive
queries.
p9b-8-na-5w-2z3-djmu-7pk-qy-0-bok-re9-ym-v9h-av-njx-2es
.info
(c) Example DNS name reﬂecting malware activity (cf. § 7.2).
ldap. tcp.standardname-des-ersten-standorts. sites.dc.
msdcs.isi26.isi.fhg.de
(d) Example DNS name originating from client misconﬁguration
(cf. § 7.2).
Figure 7: Full names of examples used in the main text. We
line-break each name at 54/55 characters.
reverse lookups that we excluded them from the SIE analysis,
which removes about 10% of the queries.
As previously discussed in § 4, we emphasize that the role of
the SIE dataset for our evaluation is simply to give us a (huge)
target environment in which to validate that we can ﬁnd actual
tunnels. We do not envision our procedure as operationally vi-
able for this environment; nor does such an environment strike
us as making sense in terms of conforming with our threat
model, which focuses on tightly controlled enterprises, rather
than wide-open ISPs.
Given this perspective, to keep our own manual analysis
tractable, for SIE we used a detection threshold I of 10 kB
rather than the 4 kB value we use for the other datasets.
We also explored the effects of other analysis changes. First,
we investigated conducting our analysis on the SIE queries re-
duced to distinct, sorted names. This transformation removes
our opportunity of assessing query name-codebook informa-
tion vectors, but preserves our ability to estimate data con-
veyed through the query name-content vector—the only type
of encoding employed by known DNS tunneling tools. Table 2
shows this version of the SIE data as SIEUNIQ. The reduction
in analyst load is quite signiﬁcant, more than a factor of three.
32  22nd USENIX Security Symposium 
16
USENIX Association