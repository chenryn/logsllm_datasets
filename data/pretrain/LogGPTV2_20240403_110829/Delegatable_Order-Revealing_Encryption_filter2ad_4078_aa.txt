title:Delegatable Order-Revealing Encryption
author:Yuan Li and
Hongbing Wang and
Yunlei Zhao
A Comparative Evaluation of Order-Revealing Encryption
Schemes and Secure Range-Query Protocols
Dmytro Bogatov
Boston University
Boston, MA 02215
PI:EMAIL
George Kollios
Boston University
Boston, MA 02215
PI:EMAIL
Leonid Reyzin
Boston University
Boston, MA 02215
PI:EMAIL
ABSTRACT
Database query evaluation over encrypted data can allow
database users to maintain the privacy of their data while
outsourcing data processing. Order-Preserving Encryption
(OPE) and Order-Revealing Encryption (ORE) were de-
signed to enable eﬃcient query execution, but provide only
partial privacy. More private protocols, based on Searchable
Symmetric Encryption (SSE), Oblivious RAM (ORAM) or
custom encrypted data structures, have also been designed.
In this paper, we develop a framework to provide the ﬁrst
comprehensive comparison among a number of range query
protocols that ensure varying levels of privacy of user data.
We evaluate ﬁve ORE-based and ﬁve generic range query
protocols. We analyze and compare them both theoret-
ically and experimentally and measure their performance
over database indexing and query evaluation. We report
not only execution time but also I/O performance, commu-
nication amount, and usage of cryptographic primitive op-
erations. Our comparison reveals some interesting insights
concerning the relative security and performance of these
approaches in database settings.
PVLDB Reference Format:
Dmytro Bogatov, George Kollios and Leonid Reyzin. A Com-
parative Evaluation of Order-Revealing Encryption Schemes and
Secure Range-Query Protocols. PVLDB, 12(8): 933-947, 2019.
DOI: https://doi.org/10.14778/3324301.3324309
1.
INTRODUCTION
Order-Preserving Encryption (OPE) was proposed by Ag-
rawal et al. [1] in their seminal paper. The main idea is to
“encrypt” numerical values into ciphertexts that have the
same order as the original plaintexts. This is a very useful
primitive since it allows a database system to make compar-
isons between chiphertexts and get the same results as if it
had operated on plaintexts. A scheme was proposed in [1]
but no security analysis was given.
Boldyreva et al. [8] were the ﬁrst to treat OPE schemes
from a cryptographic point of view, providing security mod-
licensed under
This work is
the Creative Commons Attribution-
NonCommercial-NoDerivatives 4.0 International License. To view a copy
of this license, visit http://creativecommons.org/licenses/by-nc-nd/4.0/. For
any use beyond those covered by this license, obtain permission by emailing
info@vldb.org. Copyright is held by the owner/author(s). Publication rights
licensed to the VLDB Endowment.
Proceedings of the VLDB Endowment, Vol. 12, No. 8
ISSN 2150-8097.
DOI: https://doi.org/10.14778/3324301.3324309
els and rigorous analysis. The ideal functionality of such a
scheme is to leak only the order of the plaintexts and noth-
ing more. However, it was shown by Boldyreva et al. [8]
that the ideal functionality is not achievable if the scheme is
stateless and immutable. In order to achieve the ideal func-
tionality, Popa, Li, and Zeldovich [56] proposed a mutable
scheme that constructs a binary tree on plaintexts and uses
paths as ciphertexts. This tree is the encrypted full state of
the dataset, and once an insertion or a deletion rebalances
the tree, multiple ciphertexts get mutated. Kerschbaum [39]
proposed an improvement on this scheme that also hides the
frequency of each plaintext (how many times a given value
appears).
Furthermore, in order to improve the security of these
schemes, Boneh et al. [10] proposed to generalize OPE to Or-
der-Revealing Encryption (ORE). In ORE, ciphertexts have
no particular order and look more like typical semantically
secure encryptions. The database system has a special com-
parison function that can be used to compare two cipher-
texts. These schemes are more secure than OPE schemes,
although they still leak some information, and in general are
more expensive to compute. Since these schemes leak some
information, a number of recent works considered attacks
on systems that may use these schemes [31, 32, 53, 26, 38,
12, 22, 44, 4, 65]. Most of these attacks assume the attacker
possesses auxiliary information and no other protections are
available.
OPE / ORE schemes can be used with almost no changes
to the underlying database engine. To provide greater secu-
rity, a number of more complex protocols for protecting data
in outsourced databases have been proposed. These con-
structions are often interactive, rely on custom data struc-
tures and are optimized for certain tasks, such as range
queries. Naturally, the more secure the protocol is, the
larger performance overhead it incurs. The most secure of
these — Oblivious RAM (ORAM) based protocol — pro-
vides strong, well-understood, cryptographic privacy guar-
antees with no information leakage.
Applications that can beneﬁt from such schemes and pro-
tocols include cloud access security brokers (CASBs) and
ﬁnancial and banking applications.
Indeed, a number of
commercial CASBs including Skyhigh Networks [60] and Ci-
pherCloud [19] have been using some form of OPE or ORE
schemes in their systems. In addition, ﬁnancial institutions
may be able to encrypt their data using the aforementioned
schemes in order to provide another layer of security, as-
suming that the performance overhead is acceptable. For
many of these applications the auxiliary information that is
needed for the attacks mentioned above is either unavailable
or diﬃcult to get.
Currently, it is a very challenging task for users to choose
an appropriate data privacy approach for their application,
because the security and performance tradeoﬀ is not well un-
derstood. Both security and performance of every approach
need to be thoroughly evaluated. Characterizing security
beneﬁts of diﬀerent approaches remains an open problem,
unlikely to be solved in the immediate future. However, it
is possible to evaluate the performance of each approach,
so as to enable better-informed decisions about whether the
improved performance of some schemes is worth the uncer-
tainty about the security they achieve.
We emphasize that it is not trivial to evaluate the perfor-
mance of these schemes. Many of the papers presenting the
above approaches provide only a theoretical treatment and
concentrate more on the security deﬁnitions and analysis
and less on the performance. Some of these constructions
have not been even implemented properly. Furthermore,
even though the main target of these schemes and proto-
cols are database applications, most of them have not been
evaluated in database settings.
To address this problem, in this paper we design a new
framework that allows for systematic and extensive com-
parison of OPE and ORE schemes and secure range query
protocols in the context of database applications. We em-
ploy these schemes in database indexing techniques (i.e. B+
trees) and query protocols and we report various costs in-
cluding I/O complexity.
The main contribution of this work is to present an exper-
imental evaluation using both real and synthetic datasets
using our new framework that tracks not only time but
also primitive usage, I/O complexity, and communication
cost.
In the process, we present improvements for some
of the schemes that make them more eﬃcient and/or more
secure. To make understanding of these schemes easier for
the reader, we present the main ideas behind these construc-
tions, discuss their security deﬁnitions and leakage proﬁles,
and provide an analysis of implementation challenges for
each one.
1.1 Related work
A number of OPE schemes have been proposed recently
including [1, 55, 8, 9, 62, 40, 66, 35, 39, 36, 68, 67, 47, 23,
48]. Popa, Li, and Zeldovich [56] present a nice analysis
of these schemes and they are the ﬁrst to show that using a
stateful scheme you can achieve the ideal security guarantees
for OPE. We pick two of these schemes (BCLO [8] and FH-
OPE [39]) that are the most representative and outperform
other schemes.
In addition, there are a number of ORE schemes [10, 18,
46, 16, 15, 11, 28, 24] that have been proposed. We choose
the most practical and most secure of them [18, 46, 16], to
include in the comparison. Also, there are some approaches
that assume an outsourced setting where the client may have
to communicate with the server during query processing [58,
41, 5, 21]. We choose two of these protocols [58, 41] because
they are based on order-preserving approaches and therefore
have similar security models with ORE schemes. We would
like to point out that there are some other methods that
can be used to run range queries on encrypted data that use
diﬀerent types of schemes and techniques. See [5] and [49]
for an overview of other methods. In this paper we consider
two of the protocols proposed in [21] that use Searchable
Symmetric Encryption (SSE). We stress that the schemes
and protocols discussed here should be used with care, and it
is up to the practitioner how to use them given their security
and performance proﬁles.
2. SECURITY PERSPECTIVE
Each scheme and protocol we analyze has its own secu-
rity deﬁnition, which captures diﬀerent leakage levels. We
attempt to unify these deﬁnitions and analyze them under
a common framework. We also attempt to assess relative
security of these deﬁnitions and analyze their leakages.
In this work we mostly consider the snapshot model, where
the attacker can observe all the database contents at one
time instant. Note that this excludes timing attacks such
as measuring encryption time. All security deﬁnitions of
the schemes and protocols that we discuss here are based on
this model. Also, the snapshot attacker is the most common
attacker that we face today [5]. The idea is that a hacker
or an insider can steal the entire encrypted database and all
its contents at some point in time.
Beyond the snapshot model, it is also possible to consider
a stronger adversary who can track communication volume
and data access patterns in real time. Approaches that help
protect against such an attacker include ORAM for protec-
tion against access pattern leakage and diﬀerential privacy
for protection against communication volume leakage. Al-
though this model is not a primary target of this paper, our
benchmark includes a protocol (Section 4.5.2) that is secure
in this setting to show the cost of adding such protection.
We wanted to speciﬁcally comment on a work of Grubbs
et al. [27], which demonstrates a series of attacks against
OPE and ORE schemes. The attacks can be very success-
ful, but they depend on certain prerequisites. First, all
attacks assume the existence of a well-correlated auxiliary
dataset. Second, the binomial attack, which works against
a “perfectly secure frequency-hiding scheme”, reliably re-
covers only high-frequency elements. Finally, the attacks
are speciﬁcally devastating against encrypted strings (e.g.
ﬁrst and last names) as opposed to numerical data, and we
also do not recommend using OPE / ORE for strings (see
Section 2.1). One of the conclusions of our work is that
security is negatively correlated with performance and it is
up to a practitioner to trade oﬀ security and performance
constraints.
2.1 A note on variable-length inputs
A generic OPE / ORE scheme accepts bit-strings of any
length as inputs, and treats them as numbers or processes
them bit-by-bit. We warn against supplying raw bytes of
variable length (e.g. encoded strings) to OPE and ORE
schemes, as such an approach will introduce both perfor-
mance and security challenges.
From the performance standpoint, the complexity of OPE
/ ORE schemes usually depends on the input length at least
linearly (see Table 1). 32-bit numbers already introduce a
noticeable overhead for some (usually more secure) schemes,
and supplying arbitrary-length inputs may worsen perfor-
mance by at least an order of magnitude.
Security of such a construction will be minimal as most
schemes leak some information about the magnitude of the
diﬀerence, and longer inputs will naturally be treated as
larger numbers. Thus, the diﬀerence between long and short
inputs will be apparent. We refer to the work of Grubbs et
al. [27] as they have a practically supported discussion of
security consequences of using OPE / ORE with arbitrary
strings.
On the other hand, other protocols in our benchmark can
usually handle variable-length inputs as long as they ﬁt into
a single block for the underlying block cipher.
3. OPE AND ORE SCHEMES
An Order-Revealing Encryption scheme is a triple of poly-
nomial-time algorithms KGen, Enc and Cmp. KGen gener-
ates a key of parameterized length (the λ parameter). Enc
takes a numerical input (as a bit string) and produces a
ciphertext. Cmp takes two ciphertexts generated by the
scheme and outputs whether the ﬁrst plaintext was strictly
less than the second. Note that being able to check this
condition is enough to apply all other comparison opera-
tors (). Also note that an ORE scheme does
not include a decryption algorithm, because one can sim-
ply append a symmetric encryption of the plaintext to the
produced ciphertext and use it for decryption.1 An Order-
Preserving Encryption (OPE) scheme is a particular case of
an ORE scheme where ciphertexts are numerical and thus
Cmp routine is trivial (the numerical order of ciphertexts is
the same as underlying plaintexts). OPE may optionally in-
clude a decryption algorithm, since appending a symmetric
ciphertext is no longer possible.
Both OPE and ORE schemes by deﬁnition allow to totally
order the ciphertexts. This is their inherent leakage (by
design) and all the OPE / ORE security deﬁnitions account
for this and possibly additional leakage.
We proceed by describing and analyzing the OPE / ORE
schemes we have benchmarked. All plaintexts are assumed
to be 32-bit signed integers, or n-bit inputs in complexity
analysis. OPE ciphertexts are assumed to be 64-bit signed
integers.
From here, we will use the term ORE to refer to both
OPE and ORE, unless explicitly stated otherwise. Each
scheme has its own subsection where the ﬁrst part is the
construction overview followed by security discussion, and
the second part is our theoretical and experimental analysis.
3.1 BCLO OPE
The OPE scheme by Boldyreva et al. [8] was the ﬁrst
OPE scheme that provided formal security guarantees and
was used in one of the ﬁrst database systems that executes
queries over encrypted data (CryptDB [57]). The core prin-
ciple of their construction is the natural connection between
a random order-preserving function and the hypergeometric