eﬀectively. Thus clients should download new information regularly, but wait for
a given time threshold (say, an hour) before using any newly-published nodes.
Dummy traﬃc to old nodes may also help thwart trickle attacks.
Directory servers compile node availability and performance information by
sending traﬃc through MIXes in their directories. In its basic form this can be
very similar to the current ping servers [27], but in the future we can investigate
integrating more complex and attack-resistant reputation metrics. Even this rep-
utation information introduces vulnerabilities: for example, an adversary trying
to do traﬃc analysis can get more traﬃc by gaining a high reputation [14]. We
can defend against these attacks by building paths from a suitably large pool of
nodes [16] to bound the probability that an adversary will control an entire path;
but there will always be a tension between giving clients accurate and timely
information and preventing adversaries from exploiting the directory servers to
manipulate client behavior.
6
Nym management and single-use reply blocks
Current nymservers, such as nym.alias.net [28], maintain a set of (mailbox,
reply block) pairs to allow users to receive mail without revealing their identi-
ties. When mail arrives to , the nymserver attaches the
payload to the associated reply block and sends it oﬀ into the MIX-net. Because
these nymservers use the Type I remailer network, these reply blocks are persis-
tent or long-lived nyms — the MIX network does not drop replayed messages, so
the reply blocks can be used again and again. Reply block management is much
simpler in this model because users only need to replace a reply block when one
of the nodes it uses stops working.
The Mixminion design protects against replay attacks by dropping messages
with repeated headers — so its reply blocks are necessarily single-use. There are
a number of approaches for building nymservers from single-use reply blocks.
In the ﬁrst approach, nymservers keep a stock of reply blocks for each mail-
box, and use a reply block for each incoming message. As long as the owner of
the pseudonym keeps the nymserver well-stocked, no messages will be lost. But
it is hard for the user to know how many new reply blocks to send; indeed, under
this approach, an attacker can deny service by ﬂooding the mailbox to exhaust
the available reply blocks and block further messages from getting delivered.
A more robust design uses a protocol inspired by e-mail retrieval protocols
such as IMAP [11] or POP [33]: messages arrive and queue at the nymserver,
and the user periodically checks the status of his mail and sends a suﬃcient
batch of reply blocks so the nymserver can deliver that mail. In this case, the
nymserver doesn’t need to store any reply blocks. The above ﬂooding attack still
works, but now it is exactly like ﬂooding a normal IMAP or POP mailbox, and
the usual techniques (such as allowing the user to delete mails at the server or
specify which mails to download and let the others expire) work ﬁne. The user
can send a set of indices to the server after successfully receiving some messages,
to indicate that they can now be deleted.
13
Of course, there are diﬀerent legal and security implications for the two de-
signs. In the ﬁrst design, no mail is stored on the server, but it must keep valid
reply blocks on hand. The second case is in some sense more secure because the
server need not store any reply blocks, but it also creates more liability because
the server keeps mail for each recipient until it is retrieved. The owner of the
pseudonym could provide a public key that the nymserver uses to immediately
encrypt all incoming messages, to limit the amount of time the nymserver keeps
plaintext messages.
The best implementation depends on the situations and preferences of the
volunteers running the nymservers. Hopefully there will be enough volunteers
that users can choose the model that makes them most comfortable.
7
Maintaining anonymity sets
7.1
Transmitting large ﬁles with Mixminion
We would like to use Mixminion as a transport layer for higher-level applications
such as anonymous publication systems [15], but much research remains before
we can provide security for users transferring large ﬁles over Mixminion.
Alice wants to send a large ﬁle to Bob; thus she must send many Mixminion
messages. Conventional wisdom suggests that she should pick a diﬀerent path
for every message, but an adversary that owns all the nodes in any of the paths
could learn her identity — without any work at all. (Even an adversary owning a
very small fraction of the network can perform this attack, since the Mixminion
message size is small.)
Alice seems more likely to maintain her unlinkability by sending all the mes-
sages over the same path. On the other hand, a passive adversary can still watch
the ﬂood of messages traverse that path. We must hope the honest nodes will
hide message streams enough to foil these attacks. The multiple-message tagging
attacks described in Section 3.5 make the situation even more dangerous.
A compromise approach is to pick a small number of paths and use them
together. Still, if the messages are sent all at once, it seems clear we’re going
to need some really good cover traﬃc schemes before we can oﬀer security. The
same problem, of maintaining anonymity when sending many messages, comes
up when the owner of a pseudonym is downloading his mail from a nymserver.
7.2
Batching Strategy and Network Structure
A MIX-net design groups messages into batches and chooses paths; the ap-
proaches it uses aﬀect the degree of anonymity it can provide [3]. We might
deﬁne ideal anonymity for a MIX-net to be when an attacker can gain no infor-
mation about the linkage between messages entering and leaving the network,
other than that the maximum time between them is equal to the maximum
network latency.
This ideal is not achieved by protocols like Mixmaster that use random delays:
if the maximum latency of such a network is t, then the anonymity set of a
14
message leaving the network may be much smaller than all messages that entered
over a time t. Also, because Mixmaster is both asynchronous (messages can enter
and leave the network at any time) and uses free routes, it is subject to the
attacks described in [7]. We would like to explore a strategy called synchronous
batching. This approach seems to prevent these attacks even when free routes
are used, and seems to improve the trade-oﬀ between latency and anonymity.
The network has a ﬁxed batch period, tbatch, which is closely related to the
maximum desired latency; a typical value could be 3–6 hours. Messages entering
the network in each batch period are queued until the beginning of the next
period. They are then sent through the MIX-net synchronously, at a rate of one
hop per hop period. All paths are a ﬁxed length ℓ hops, so that if no messages are
dropped, the messages introduced in a given batch will progress through their
routes in lock-step, and will all be transmitted to their ﬁnal destinations ℓ hop
periods later. Each subheader of a message speciﬁes the hop period in which it
must be received, so that it cannot be delayed by an attacker (which would be
fatal for this design).
The latency is between ℓthop and tbatch + ℓthop, depending on when the mes-
sage is submitted. Typically we would have thop .
3. Anonymous. From a trickle to a ﬂood: Active attacks on several mix types. Sub-
mitted to Information Hiding Workshop 2002.
4. Adam Back, Ulf M¨oller, and Anton Stiglic. Traﬃc analysis attacks and trade-oﬀs
in anonymity providing systems. Proceedings of the Information Hiding Workshop
2001. .
5. Oliver Berthold, Hannes Federrath, and Stefan K¨opsell. Web MIXes: A system
for anonymous and unobservable Internet access. In Designing Privacy Enhancing
Technologies, LNCS Vol. 2009, pages 115–129. Springer-Verlag, 2000.
6. Oliver Berthold and Heinrich Langos. Dummy traﬃc against long term intersection
attacks. In Privacy Enhancing Technologies 2002. Springer-Verlag, 2002.
7. Oliver Berthold, Andreas Pﬁtzmann, and Ronny Standtke.
The disadvan-
tages of free MIX routes and how to overcome them.
In Designing Pri-
vacy Enhancing Technologies, LNCS Vol. 2009, pages 30–45. Springer-Verlag,
2000. .
8. Daniel Bleichenbacher and Anand Desai. A construction of a super-pseudorandom
cipher. Manuscript.
9. David Chaum. Untraceable electronic mail, return addresses, and digital pseudo-
nyms. Communications of the ACM, 4(2), February 1982.
.
10. Lance Cottrell. Mixmaster and remailer attacks.
.
11. M. Crispin. Internet Message Access Protocol — Version 4rev1. IETF RFC 2060,
December 1996. .
12. Yvo Desmedt and Kaoru Kurosawa. How to break a practical MIX and design
a new one. In Advances in Cryptology - EUROCRYPT 2000, LNCS Vol. 1803.
Springer-Verlag, 2000. .
13. T. Dierks and C. Allen.
The TLS Protocol — Version 1.0.
IETF RFC 2246,
January 1999. .
14. Roger Dingledine, Michael J. Freedman, David Hopwood, and David Molnar. A
Reputation System to Increase MIX-net Reliability. Proceedings of the Information
Hiding Workshop 2001. .
15. Roger Dingledine, Michael J. Freedman, and David Molnar.
The free haven
project: Distributed anonymous storage service. In Workshop on Design Issues
in Anonymity and Unobservability, July 2000. .
16. Roger Dingledine and Paul Syverson. Reliable MIX Cascade Networks through
Reputation. Proceedings of Financial Cryptography 2002.
.
17. Electronic Frontiers Georgia (EFGA). Anonymous remailer information.
.
16
18. D. Goldschlag, M. Reed, and P. Syverson.
Onion routing for anonymous and
private internet connections. Communications of the ACM, 42(2):39–41, 1999.
.
19. C. Gulcu and G. Tsudik. Mixing E-mail with Babel. In Network and Distributed
Security Symposium - NDSS ’96. IEEE, 1996.
.
20. J. Helsingius. anon.penet.fi press release.
.
21. Markus Jakobsson. Flash Mixing. In Principles of Distributed Computing - PODC
’99. ACM, 1999. .
22. Anja Jerichow, Jan M¨uller, Andreas Pﬁtzmann, Birgit Pﬁtzmann, and Michael
Waidner.
Real-Time MIXes: A bandwidth-eﬃcient anonymity protocol.
IEEE
Journal on Selected Areas in Communications 1998.
.
23. D. Kesdogan, M. Egner, and T. B¨uschkes. Stop-and-go MIXes providing prob-
abilistic anonymity in an open system. In Information Hiding Workshop 1998,
LNCS Vol. 1525. Springer Verlag, 1998.
.
24. Michael Luby and Charles Rackoﬀ. How to construct pseudorandom permutations
from pseudorandom functions. SIAM Journal on Computing, 17(2):373–386, 1988.
25. Tal Malkin. Private Information Retrieval. PhD thesis, MIT, 2000.
.
26. Tim May. Description of early remailer history. E-mail archived at .
27. Tim May. Description of Levien’s pinging service.
.
28. David Mazi`eres and M. Frans Kaashoek. The design, implementation and operation
of an email pseudonym server.
.
29. M. Mitomo and K. Kurosawa. Attack for Flash MIX. In Advances in Cryptology -
ASIACRYPT 2000, LNCS Vol. 1976. Springer-Verlag, 2000.
.
30. Mixminion. Mixminion: a type III anonymous remailer.
.
31. Mixminion. Type III (Mixminion) MIX protocol speciﬁcations.
.
32. Ulf M¨oller and Lance Cottrell.
Mixmaster Protocol — Version 2.
Un-
ﬁnished draft, January 2000.
.
33. J. Myers and M. Rose. Post Oﬃce Protocol — Version 3. IETF RFC 1939 (also
STD0053), May 1996. .
34. C. Andrew Neﬀ.
A veriﬁable secret shuﬄe and its application to e-voting.
In
P. Samarati, editor, 8th ACM Conference on Computer and Communications
Security (CCS-8), pages 116–125. ACM Press, November 2001.
.
35. M. Ohkubo and M. Abe. A Length-Invariant Hybrid MIX. In Advances in Cryp-
tology - ASIACRYPT 2000, LNCS Vol. 1976. Springer-Verlag, 2000.
36. J. Postel. Simple Mail Transfer Protocol. IETF RFC 2821 (also STD0010), August
1982. .
17
37. Charles Rackoﬀ and Daniel R. Simon. Cryptographic defense against traﬃc anal-
ysis. In ACM Symposium on Theory of Computing, pages 672–681, 1993.
.
38. J. Raymond. Traﬃc analysis: Protocols, attacks, design issues, and open problems.
In Workshop on Design Issues in Anonymity and Unobservability, pages 10–29,
July 2000. .
39. RProcess. Potato Software.
.
40. Zero Knowledge Systems. Freedom version 2 white papers.
.
41. Paul Syverson, Michael Reed, and David Goldschlag. Onion Routing access conﬁg-
urations. In DARPA Information Survivability Conference and Exposition (DIS-
CEX 2000), volume 1, pages 34–40. IEEE CS Press, 2000.
.
18