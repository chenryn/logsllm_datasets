### Stealing Secrets: A Detailed Analysis

#### Introduction
This section discusses a method for stealing secrets in JavaScript, specifically through dynamic property access and manipulation of the `this` keyword. The process involves cross-origin resource sharing (CORS) and is demonstrated with a rewritten malicious "Like" script. The transformations applied by JaTE (JavaScript TEE) are underlined in the code.

#### Code Example
```javascript
jate.enterContext("facebook.com");
var scope = jate.createScope("facebook.com");
try {
    with (scope) {
        var s = function() {
            var stolen = processThis(this).data.secret;
        };
        var stolen = data["se" + "cret"];
        s();
        stolen = data.getSecret();
        eval(processEval("stolen = this.data.secret"));
    }
} finally { 
    jate.exitContext(); 
}
```

**Figure 3: Rewritten malicious “Like” script. Underlined code segments are added by JaTE.**

- **A:** Through dynamic property access (line 1)
- **B:** Using `this`, which resolves to the global object (lines 2-5)
- **C:** Using a function defined in first-party code (line 6)
- **D:** By executing dynamic code (line 7)

#### Transformations
The script is transformed using three simple rules:
1. A global function declaration (e.g., `function s`) is turned into a variable declaration and assignment and moved to the top of the script to simulate declaration hoisting.
2. `this` is replaced with `processThis(this)`.
3. Direct `eval` is transformed to rewrite its argument before evaluation.

Using these rules, JaTE can mediate all cross-compartment accesses, even those from dynamic code.

#### Compartments and Trust Boundaries
Compartments represent trust boundaries within the same JavaScript execution environment. Each party is confined within its own compartment, and JaTE mediates all cross-compartment interactions. The threat model considered here aims to:
- Protect the first-party from third-party attacks.
- Protect multiple mutually distrusting third parties from each other.

In this scenario, there is no need to transform first-party scripts, and the host compartment holds an unmediated reference to `window`.

#### Detailed Steps
1. **Step (3):** Lines 2-4 create a new compartment for `facebook.com`. This compartment starts with only a mediated reference to `window` as the global object. If permitted by the policy, it can obtain mediated references to objects reachable by the original `window`.
2. **Step (4):** Lines 5-7 were originally a function declaration (lines 2-4). The object `s` is unmediated in `facebook.com`'s compartment because it is created by `facebook.com`.
3. **Step (5):** Line 8: The policy permits obtaining a mediated reference to `data` but does not allow reading the value of `secret`, which is a primitive string. This stops attack (A).
4. **Step (6):** Line 9 is an unmediated function call. However, since the transformation has rewritten the body of `s`, accesses to `this` now return a reference to a mediated version of `window`. The policy again stops reading of `secret`, thus stopping attack (B).
5. **Step (7):** Line 10 obtains a mediated reference to `getSecret` and performs a mediated cross-compartment function call, which is denied by the policy, stopping attack (C).
6. **Step (8):** Line 11 evaluates the string after rewriting it just-in-time. The rewritten code is:
   ```javascript
   stolen = processThis(this).data.secret
   ```
   This makes the attack semantically equivalent to the one on line 6, and hence attack (D) is also stopped.

### Design

#### Core Mechanisms
This section describes the core mechanisms to implement the compartment model for multiple mutually-distrusting principals.

#### Proxies
JaTE's compartment design relies on Proxies, a feature of ECMAScript 6 (ES 6). A proxy can be created for any object `w` as follows:
```javascript
pw = new Proxy(w, { get: getHandler });
```
Where `getHandler` is a function. A read operation `pw.x` will invoke `getHandler`, which can check if the access should be permitted and then invoke `w.x`. If the policy check fails, the operation is not passed on to `w`, and the handler raises an exception.

#### Mediating Global Object Access
To intercept all free variable accesses, we construct a scope object and enclose third-party code inside a `with (scope) {}` block. The scope is a proxy object, and its `has-trap` returns true, preventing direct access to the global object.

#### Mediating Cross-Compartment Accesses
- **First-Party (Host):** Has direct access to the global object and most built-in objects.
- **Third-Party Code:** Starts with just the virtual global object in its compartment.

During execution, a principal can introduce new objects into its compartment in two ways:
1. **Creating New Objects:** These are direct objects, and their accesses are not mediated.
2. **Importing Objects:** Through interactions that are mediated using proxy traps:
   - **Get Trap:** Returns a direct reference if the result is an object owned by the principal, otherwise, a proxy is created and returned.
   - **Set Trap:** Similar to the get trap, but the direction of transfer is reversed.
   - **Call Trap:** Treats a call as a switch from the caller’s to the callee’s compartment, followed by get operations to retrieve parameter values and the return value.

#### Handling JavaScript Challenges
1. **Handling `this`:** JaTE replaces all occurrences of `this` with `processThis(this)`.
2. **Handling `caller`:** JaTE ensures that third-party code cannot reach the caller's stack frames.
3. **Handling Native Prototypes:** JaTE intercepts native prototype accesses and returns proxies.
4. **Handling `eval`:** JaTE wraps indirect `eval` calls using a function and rewrites the code. Direct `eval` is handled differently to ensure it executes in the correct scope.

### Conclusion
By using compartments and Proxies, JaTE effectively mediates all cross-compartment accesses, protecting the first-party from third-party attacks and ensuring secure execution of JavaScript code.