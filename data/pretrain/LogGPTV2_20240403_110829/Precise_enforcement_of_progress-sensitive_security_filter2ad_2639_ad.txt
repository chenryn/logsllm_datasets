S2 ={l
S3 ={l
(cid:48) | l
(cid:48) | l
(cid:48) | l
(cid:48) ∈ S ∧ l
(cid:48) ∈ S ∧ l
(cid:48) ∈ S ∧ l
(cid:48) (cid:118) l}
(cid:48) (cid:54)(cid:118) l ∧ l (cid:118) l
(cid:48) (cid:54)(cid:118) l ∧ l (cid:54)(cid:118) l
(cid:48)}
(cid:48)}
Set S1 contains levels that ﬂow to l, including l itself. Set S2
contains all levels that are strictly higher than l, and set S3 is the
set of levels that are incomparable with l. Figure 5b visualizes this
partitioning for an arbitrary lattice when S contains all levels.
Example. Consider S = {N, H} and l = M. Then, according to
the deﬁnition above, S1 = ∅, S2 = {H}, and S3 = {N}.
Recall that the set S is the set of levels such that an output may
reveal information at those levels. After an output on channel l, we
need to consume budgets for levels in S2 and S3, but not S1. The
budget for levels in S1 need not be consumed because information
at any level l(cid:48) ∈ S1 is allowed to ﬂow to level l. Output on channel l
may, however, reveal information at levels in S2 and S3. We deﬁne
the updated release counter R(cid:48) as a function of l(cid:48) for which it holds
that
(cid:40)
(cid:48)
(cid:48)
(l
R
) =
R(l(cid:48)) + 1 if l(cid:48) (cid:54)(cid:118) l and ∃l(cid:48)(cid:48) ∈ S2 ∪ S3. l(cid:48) (cid:118) l(cid:48)(cid:48)
R(l(cid:48))
otherwise
This deﬁnition increments release counter for all levels l(cid:48) that do
not ﬂow to l, and for which there is a bound l(cid:48)(cid:48) in S2 ∪ S3. The
condition on the ﬁrst line of the above deﬁnition ensures that we do
(a) 4-element Hasse diagram (b) Disjoint sets in update function
Figure 5: Example security lattice and disjoint sets in update
to arbitrary security lattices. The extension is non-trivial, and is
particularly interesting for budgeted semantics.
Assume an arbitrary lattice of security levels L with bottom and
top elements ⊥ and (cid:62) respectively. We extend the syntax for cast
to the form castl,l(cid:48)
p [c] where l and l(cid:48) are security levels. Level l is an
upper bound on the information that the oracle is permitted to use to
reason about the termination behavior of command c. In Section 2,
this level is implicitly assumed to be L. Level l(cid:48) is an upper bound
on what information is allowed to be leaked by (non)termination of
program c. This level is only relevant for budgeted semantics, as
explained below, and in Section 5 it is implicitly assumed to be H.
We do not place any restrictions on the relationship between lev-
els l and l(cid:48). However, if l(cid:48) (cid:118) l then the termination behavior of
the loop is permitted to reveal no more information than the oracle
uses to reason about termination behavior, and so the budgeted se-
mantics give no additional beneﬁt over the standard semantics. We
thus expect (but do not require) that l(cid:48) (cid:54)(cid:118) l.
Example. To clarify our exposition throughout this section we use
an example four-element security lattice, illustrated by the Hasse
diagram in Figure 5a. This lattice contains four security levels
L, M, N, H, such that L (cid:118) M (cid:118) H and L (cid:118) N (cid:118) H, but
M (cid:54)(cid:118) N and N (cid:54)(cid:118) M (and also H (cid:54)(cid:118) M (cid:54)(cid:118) L and H (cid:54)(cid:118) N (cid:54)(cid:118) L).
Consider the following example program, where variables m, n,
and h have security levels M, N, and H respectively.
h := h + m + n;
castL,H [while h > 0 do skip; ]
outputM (1);
outputL(1);
This program contains a loop that introduces a progress channel:
termination of the loop depends on information at levels H, M,
and N. The two outputs to levels M and L expose this progress
channel. Let us look carefully at what information is revealed by
each of these outputs.
The output on M reveals information about H and N to level M.
Similarly, output on level L reveals information about M, N, and
H to level L. Note that both outputs are potentially dangerous,
leaking information to adversaries observing on different channels.
If the order of the two output commands is swapped, as in pro-
gram
h := h + m + n;
castL,H [while h > 0 do skip];
outputL(1);
outputM (1);
then we regard only the ﬁrst output as leaking information. This
is because an observer of channel M is also permitted to observe
channel L (since L (cid:118) M). Thus, the ﬁrst output reveals to level
M (and L and N) that the loop terminated, and the second output
to level M does not provide any additional information.
887R
Command
initial state
castL,H [while h do skip]
outputM (1)
outputL(1)
Figure 6: Example of budget update in multi-level setting
L M N H
0
0
0
0
1
0
0
1
S
∅
{H}
{M}
∅
0
0
0
1
0
0
1
1
S-CAST
O(p, m, o) ∈ {TERMINATE, DIVERGE}
(cid:104)castl,l(cid:48)
p [c], m, o, R, S(cid:105) −→ (cid:104)c, m, o, R, S(cid:105)
= S ∪ {l
S-CAST-BUDGET
(cid:48)}
(cid:48)
S
(cid:104)castl,l(cid:48)
O(p, m, o) = UNKNOWN
p [c], m, o, R, S(cid:105) −→ (cid:104)c, m, o, R, S
(cid:48)(cid:105)
S-OUTPUT
m(e) = v
(cid:48)
(R
(cid:48)
. R
(cid:48)
) = update(R, S, l)
) ≤ B(l
)
(cid:48)
, S
(cid:48)
(l
(cid:48)
∀l
(cid:104)outputl(e), m, o, R, S(cid:105) −→ (cid:104)stop, m, o :: (v, l), R
(cid:48)
(cid:48)(cid:105)
, S
Figure 7: Budgeted semantics for multi-level setting: selected rules
not unnecessary consume budgets for levels that are not bounded
by a level in S2 ∪ S3. For example, when S2 ∪ S3 is an empty set,
R does not change.
For the updated pending release bits S(cid:48), which security levels
should be in it? Clearly all of set S1, as if l(cid:48) ∈ S1, a future output
at a level l(cid:48)(cid:48) such that l(cid:48) (cid:54)(cid:118) l(cid:48)(cid:48) will reveal information about l(cid:48) via
a progress channel. Sets S2 and S3 do not need to be in S(cid:48), as
we have already accounted for information leaked via the progress
channel for these levels. We may, however, need to add level l to S(cid:48).
If S2 is non-empty, then there is a level l(cid:48) ∈ S2 such that l (cid:118) l(cid:48).
Thus, it is possible that information at level l ﬂowed to level l(cid:48),
where it inﬂuenced the termination behavior of the program. Thus,
a future output may reveal via a progress channel information at
level l that has not yet been accounted for in the budget. We thus
deﬁne the updated pending release bits S(cid:48) as follows.
(cid:48) (cid:44) S1 ∪ {l | S2 (cid:54)= ∅}
S
Example. Figure 6 presents an example program together with the
set of pending levels and the values of release counters for every
level, during this program execution when h = 0.
6.2 Semantics
Figure 7 presents budgeted semantics for the extended language.
The semantics for the multi-level setting resembles the budgeted
semantics of Section 5.1, with the difference that it uses release
counter R and the set of pending levels S. Program conﬁgura-
tions have the form (cid:104)c, m, o, R, S(cid:105). As before, the semantics is
parametrized over the termination oracle. Generalization of the ter-
mination oracle to multi-level setting is straightforward, and we
omit it here. The only notable aspect is that when the oracle is
given cast label p for cast castl,l(cid:48)
p [c], the oracle is permitted to use
only information up to level l to reason about the termination be-
havior of command c.
As before, rule S-CAST does not modify the release counter R
or pending levels S. Rule S-CAST-BUDGET applies when the or-
acle returns UNKNOWN. Recall that level l(cid:48) is an upper bound on
the termination level of c. This means that (non)termination of c
reveals information up to l(cid:48). Subsequently, any output on level l(cid:48)(cid:48)
such that l(cid:48)(cid:48) (cid:54)(cid:118) l(cid:48) must consume some part of the termination bud-
get for l(cid:48). Therefore, this rule adds l(cid:48) to the set of pending levels.
Finally, rule S-OUTPUT updates the release counter and the pend-
ing levels before an output on channel l. Given updated R(cid:48) and S(cid:48),
the execution is allowed when the budget constraints are satisﬁed.
6.3 Typing rules
Most of the typing rules from Figure 3 can be extended to the
multi-level case in a straightforward manner by replacing any oc-
currence of level L with level ⊥. The rule for castl,l(cid:48)
p [c] is more
interesting and we show it below.
(cid:48)(cid:48) (cid:118) l
Γ, pc (cid:116) l (cid:96) c : l
(cid:48)(cid:48)
Γ, pc (cid:96) castl,l(cid:48)
p [c] : pc (cid:116) l
l
(cid:48)
The rule requires that c is well-typed with some termination
level l(cid:48)(cid:48). The only requirement on l(cid:48)(cid:48) is that it needs to be bounded
by level l(cid:48). Because information up to l may be used by the oracle,
we require that c is well-typed under context pc (cid:116) l. This prevents
laundering information through the termination oracle itself. For a
similar reason, the termination level of this command is set to pc(cid:116)l.
To illustrate this rule, let us consider a few examples.
Example. Program castL,M [while h > 0 do skip] is not well-
typed because the termination level of the while loop is H, and
M (cid:54)(cid:118) H.
On the other hand, the program castL,H [while h > 0 do skip] is
well-typed.
Example. Program
castM,H [
outputL(1)
while h > 0 do h := h − m
]
is rightfully rejected by the type system. The release event in this
program is subtle. The oracle is allowed to use information up to
level M. This means that if m > 0, and the oracle can deduce
that the while loop will terminate, then the low output preceding
the loop will occur. On the other hand, if m ≤ 0, the oracle must
return UNKNOWN. The presence of the low output right before the
loop will therefore depend on level M, which violates progress-
sensitive noninterference.
On nested casts Unlike the simple type system of Section 3,
nested casts are allowed in the presence of multiple security levels.
The following examples illustrates how such scenario may appear
in the presence of budgeted semantics.
Example. Consider the program below which has two nested casts.
castL,M [ while m > 0 do {
. . .
castL,H [while h > 0 do h−−] . . .
} ]
outputL(1) ;
Assume that the termination oracle is unable to prove termination
of the outer cast statement, but can prove termination of the inner
cast statement. In this case, by the time the execution reaches the
output statement, one unit of M leakage budget is consumed, while
no leakage budget of H is consumed.
Soundness To formulate soundness for multiple levels we gener-
alize our deﬁnitions from Section 4.
First, observe that our deﬁnition of projection from Section 4
easily extends to multiple levels. This allows us to generalize the
888cast [ while x < 10 do {
y := 0
while y < 10 do y := y + 1
x := x + 1 } ]
Listing 4: Example program with nested loops where x, y are high
variables
deﬁnition of ↓ to multiple levels. Similarly, we generalize deﬁni-
tions of attacker knowledge at level l, release event from level l,
and progress release event from level l. Using these deﬁnitions, we
can formulate soundness for multiple security levels.
Theorem 3 (Budgeted progress release at l). Given a program c
such that Γ,⊥ (cid:96) c : l(cid:48) for some security level l(cid:48) then execution of c
with budget B contains at most B(l) release events from level l, all
of which are progress release events.
A proof of this theorem is available in the companion technical
report [34].
7. EVALUATION
We have evaluated the feasibility of our approach in two parts.
First, we have implemented the (non-budgeted) language seman-
tics and type system for a simple interactive imperative language,
including an implementation of a suitable termination oracle. This