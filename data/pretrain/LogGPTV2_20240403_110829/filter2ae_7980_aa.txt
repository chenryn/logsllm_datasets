**作者：时钟@RainSec  
本文为作者投稿，Seebug Paper 期待你的分享，凡经采用即有礼品相送！ 投稿邮箱：PI:EMAIL**
## qiling
当时题目就给了一个qiling的使用的用例，甚至和官方文档上面的用例差不多因此肯定是库的问题。
    #!/usr/bin/env python3
    import os
    import sys
    import base64
    import tempfile
    # pip install qiling==1.4.1
    from qiling import Qiling
    def my_sandbox(path, rootfs):
        ql = Qiling([path], rootfs)
        ql.run()
    def main():
        sys.stdout.write('Your Binary(base64):\n')
        line = sys.stdin.readline()
        binary = base64.b64decode(line.strip())
        with tempfile.TemporaryDirectory() as tmp_dir:
            fp = os.path.join(tmp_dir, 'bin')
            with open(fp, 'wb') as f:
                f.write(binary)
            my_sandbox(fp, tmp_dir)
    if __name__ == '__main__':
        main()
大致分析qiling源代码发现其加载模拟文件的流程如下（可以看qiling项目core.py文件，其中实现了一个Qiling的类）：
  1. 在实例初始化阶段设置一系列基础信息比如当前平台的操作系统及其架构等。
  2. 设置运行参数
  3. 设置需要的roofs目录，这里也是出问题的一个关键点
  4. 设置操作系统和结构
  5. 设置大小端序和机器长度
  6. 初始化QlCoreStructs结构体，主要是用来pack的
  7. 加载loader，主要就是根据os type导入loader文件夹下的不同文件。
  8. log日志操作
  9. 加载qiling自己实现的内存管理器和寄存器管理器（这个根据interpreter成员来决定是否加载）
  10. 根据不同arch架构来加载qiling自己的实现的arch，就在目录的arch下
  11. 根据interpreter成员来决定是否初始化QlCoreHooks
  12. 启动之前加载loader，加载目标（linux的话里面其实实现了ELF的解析以及加载到内存的整个过程，甚至如果提供了interpreter也可以进行加载，详情可以看loader文件夹下的elf.py），然后起了一个守护页，看注释应该是保护内存的，至此初始化工作完成。
  13. 根据interpreter成员来决定是否选择不同的执行模式，一般直接初始化osHook通过os运行目标文件
上面是大致的加载过程，下面分析一下文件是怎么运行起来的（以模拟linux操作系统为例），运行的方式大致是分为运行qiling独立实现的解释器和不使用qiling独立实现的解释器两种，（作者大佬说是区块链智能合约解释器，这块我不是很懂，好像是智能合约bytecode执行，这里主要说os
run）
在QlOsLinux类里面找到相应的run函数：
        def run(self):
            if self.ql.exit_point is not None:
                self.exit_point = self.ql.exit_point
            try:
                if self.ql.code:
                    self.ql.emu_start(self.entry_point, (self.entry_point + len(self.ql.code)), self.ql.timeout, self.ql.count)
                else:
                    if self.ql.multithread == True:
                        # start multithreading
                        thread_management = thread.QlLinuxThreadManagement(self.ql)
                        self.ql.os.thread_management = thread_management
                        thread_management.run()
                    else:
                        if  self.ql.entry_point is not None:
                            self.ql.loader.elf_entry = self.ql.entry_point
                        elif self.ql.loader.elf_entry != self.ql.loader.entry_point:
                            entry_address = self.ql.loader.elf_entry
                            if self.ql.archtype == QL_ARCH.ARM and entry_address & 1 == 1:
                                entry_address -= 1
                            self.ql.emu_start(self.ql.loader.entry_point, entry_address, self.ql.timeout)
                            self.ql.enable_lib_patch()
                            self.run_function_after_load()
                            self.ql.loader.skip_exit_check = False
                            self.ql.write_exit_trap()
                        self.ql.emu_start(self.ql.loader.elf_entry, self.exit_point, self.ql.timeout, self.ql.count)
看了看emu_start，主要是利用unicorn进行模拟执行的。然后看了看linux
OS的初始化，总结下来觉得qiling实现的东西还是很多的，比如自己的os
loader，arch，syscall，hook等，以x86_64架构下的linux为例子看其是如何加载自己的syscall的。
            # X8664
            elif self.ql.archtype == QL_ARCH.X8664:
                self.gdtm = GDTManager(self.ql)
                ql_x86_register_cs(self)
                ql_x86_register_ds_ss_es(self)
                self.ql.hook_insn(self.hook_syscall, UC_X86_INS_SYSCALL)
                # Keep test for _cc
                #self.ql.hook_insn(hook_posix_api, UC_X86_INS_SYSCALL)
                self.thread_class = thread.QlLinuxX8664Thread     
    def hook_syscall(self, ql, intno = None):
            return self.load_syscall()
load_syscall本身比较复杂，通过代码可以看出它都实现了那些[syscall](https://github.com/qilingframework/qiling/blob/master/qiling/os/linux/map_syscall.py)，这里的大部门都是直接使用的系统底层的一些syscall，并不是麒麟自己实现的，可以看他的load_syscall函数[实现](https://github.com/qilingframework/qiling/blob/839e45ed86e56304b93f81a53cf08383d942a494/qiling/os/posix/posix.py#L173)，不过在posix文件夹下的syscall文件夹里面发现其实qiling自己也实现了大量的syscall，这俩种syscall在使用时的区别主要在于要模拟的文件源码中是直接使用的syscall还是类似open的这种函数形式，前者会调用qiling自身实现的，后者则会直接调用对应的系统调用（这块基于推理和调试，不过大致qiling的系统调用就是通过hook进行检测然后通过回调调用对应的代码这样子），调用回溯如下：
其实从上面就可以看出，qiling本身实现的功能还是很多的，比如内存管理，动态模拟不同架构等，但是根据从大佬哪里偷来的经验，首先像python这种高级语言，内存出现问题是很不常见的，大多都是逻辑问题，那么就很可能是实现跟底层系统进行交互的设计出现问题，比如实现的syscall，这也是rwctf的考点。
## 漏洞分析
        以qiling实现的[ql_syscall_open](https://github.com/qilingframework/qiling/blob/94bf7a3bc4e3ea0cffaaa52dbc477c11030f631b/qiling/os/posix/syscall/fcntl.py#L15)为例子：
    def ql_syscall_open(ql: Qiling, filename: int, flags: int, mode: int):
        path = ql.os.utils.read_cstring(filename)
        real_path = ql.os.path.transform_to_real_path(path)
        relative_path = ql.os.path.transform_to_relative_path(path)
        flags &= 0xffffffff
        mode &= 0xffffffff
        idx = next((i for i in range(NR_OPEN) if ql.os.fd[i] == 0), -1)
        if idx == -1:
            regreturn = -EMFILE
        else:
            try:
                if ql.archtype== QL_ARCH.ARM and ql.ostype!= QL_OS.QNX:
                    mode = 0
                #flags = ql_open_flag_mapping(ql, flags)
                flags = ql_open_flag_mapping(ql, flags)
                ql.os.fd[idx] = ql.os.fs_mapper.open_ql_file(path, flags, mode)
                regreturn = idx
            except QlSyscallError as e:
                regreturn = - e.errno
        ql.log.debug("open(%s, 0o%o) = %d" % (relative_path, mode, regreturn))
        if regreturn >= 0 and regreturn != 2:
            ql.log.debug(f'File found: {real_path:s}')
        else:
            ql.log.debug(f'File not found {real_path:s}')
        return regreturn
首先通过绝对路径获取模拟执行文件在rootfs下的相对路径，然后将flags传递给ql_open_flag_mapping，然后进行open操作，将得到的fd通过idx索引进行一个存储。
其大致的函数调用链如下：
> ql_syscall_open --> open_ql_file ---> os.open
        def open_ql_file(self, path, openflags, openmode, dir_fd=None):
            if self.has_mapping(path):