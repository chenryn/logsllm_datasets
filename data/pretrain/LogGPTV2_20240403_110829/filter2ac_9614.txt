# Title: Libsafe: Transparent System-wide Protection Against Buffer Overflow Attacks

## Authors: Timothy K. Tsai and Navjot Singh
### Avaya Labs Research, Basking Ridge, NJ, USA
#### Email: fttsai, PI:EMAIL

## Abstract
Libsafe is a practical solution designed to protect against the most common forms of buffer overflow attacks, which often result in granting the attacker full privileges on the target system. Implemented as a shared library, Libsafe intercepts calls to vulnerable standard library functions. By inspecting the process stack and function arguments, Libsafe ensures that return addresses cannot be overwritten, thereby preventing the most common form of buffer overflow attack.

While security concerns encompass a wide range of issues and vulnerabilities, buffer overflow vulnerabilities are among the most commonly exploited. Security advisories from leading organizations frequently highlight buffer overflow problems. These vulnerabilities are significant for several reasons:
1. **Privilege Escalation**: A successful buffer overflow attack often results in a root shell, providing the attacker with root privileges. This allows them to modify or view files, install backdoors, or set up further attacks such as distributed denial of service (DDoS) attacks.
2. **Remote Exploitation**: Many buffer overflows can be triggered remotely by targeting commonly provided services. Since these attacks occur at the application level, firewalls are ineffective in preventing them.
3. **Ease of Exploitation**: The proliferation of exploit code makes it possible for even unsophisticated attackers to carry out buffer overflow attacks.

The primary cause of buffer overflows is poor programming practices. Consider the following example:

```c
char *src = "hello world";
char dest[5];
strcpy(src, dest);
```

In this case, the `dest` buffer, which has only five bytes allocated, cannot fully contain the 11 bytes in the `src` string. The `strcpy` function, unaware of the actual size of the `dest` buffer, copies the entire 11 bytes, causing an overflow and potentially overwriting the memory immediately following `dest`. If `dest` is on the stack, the overwritten memory may include a stored return address.

When the return instruction corresponding to the overwritten return address is executed, the process control flow is diverted to the new return address. Attackers often include a short piece of attack code within the `src` string and a new return address pointing to the start of this code. Typically, the attack code spawns an interactive shell. If the attacked process runs with root privileges, the newly spawned shell also has root privileges.

The ideal solution to buffer overflow vulnerabilities is to patch the code to eliminate the underlying programming bug. However, if the code is widely deployed, manual patching or upgrading can be logistically challenging. Additionally, new latent buffer overflow bugs are continuously being discovered and created.

Libsafe is a run-time solution that inserts wrapper code at the beginning of functions deemed vulnerable to buffer overflows. A large number of known buffer overflow vulnerabilities are based on a relatively small set of standard library functions. The Libsafe wrapper code performs a sanity check on the buffers passed as parameters. By intelligently examining the stack, the wrapper code estimates a maximum safe size for each destination buffer. If the data written to the destination buffer does not exceed this size, no return addresses can be overwritten. While this technique does not detect all buffer overflows, it successfully identifies a surprisingly large number of known exploits.

The wrapper code for all functions is placed in a shared library. Leveraging a feature in the dynamic `ld.so` loader for Linux, the Libsafe shared library is linked with all processes on the machine.

A key feature of Libsafe is its ease of use. No source code modification or recompilation is required. Installation takes just a few minutes and does not require expertise in the machine, applications, Libsafe, or general security issues. The performance overhead is minimal, typically around 1%. Importantly, Libsafe protects against both known and undiscovered vulnerabilities and exploits.

Libsafe has been included in major Linux distributions and is available for direct download from the project website at [http://www.research.avayalabs.com/project/libsafe](http://www.research.avayalabs.com/project/libsafe). The website also provides white papers, conference papers, and other documentation.

**Note**: Libsafe for Windows NT uses a different mechanism based on a registry key.

*Proceedings of the International Conference on Dependable Systems and Networks (DSN'02)*  
*0-7695-1597-5/02 $17.00 Â© 2002 IEEE*  
*Authorized licensed use limited to: Tsinghua University. Downloaded on March 19, 2021, at 04:14:51 UTC from IEEE Xplore. Restrictions apply.*