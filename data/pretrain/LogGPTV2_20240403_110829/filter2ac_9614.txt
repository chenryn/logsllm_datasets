title:Libsafe: Transparent System-wide Protection Against Buffer Overflow
Attacks
author:Timothy K. Tsai and
Navjot Singh
Libsafe: Transparent System-wide Protection Against Buffer Overﬂow Attacks
Timothy Tsai and Navjot Singh
Avaya Labs Research,
Basking Ridge, NJ USA,
email: fttsai,PI:EMAIL
Abstract
Libsafe is a practical solution that protects against the
most common forms of buffer overﬂow attacks. Such at-
tacks often result in granting the attacker full privileges on
the target system. Libsafe is implemented as a shared li-
brary that intercepts calls to vulnerable standard library
functions. Based on an inspection of the process stack and
the function arguments, Libsafe ensures that no return ad-
dresses can be overwritten, thus preventing the most com-
mon form of buffer overﬂow attack.
Although security concerns encompass a wide range of
issues and vulnerabilities, perhaps the most commonly ex-
ploited vulnerability is the buffer overﬂow vulnerability.
Advisories issued by leading security organizations include
many warnings about buffer overﬂow problems. Buffer
overﬂows are signiﬁcant in several ways. First, the most
common outcome of a successful attack is a root shell,
which is an interactive shell with root privileges. With a
root shell, the attacker is able to modify or view ﬁles, install
back doors, or set up further attacks, such as distributed de-
nial of service attacks. Second, many buffer overﬂows can
be triggered remotely by targeting commonly provided ser-
vices. Since the attack is carried out at the application level,
ﬁrewalls are useless in preventing attacks against required
services. Third, the proliferation of exploit code permits
even unsophisticated attackers to perpetrate buffer overﬂow
attacks.
The main problem underlying buffer overﬂows is bad
programming. A common data structure is the buffer or
array. When the buffer contains characters, it is called a
string. Consider the following example, which contains a
buffer overﬂow vulnerability.
char *src = "hello world";
char dest[5];
strcpy(src, dest);
In this case, the dest buffer, which only has ﬁve bytes
allocated to it, cannot fully contain the 11 bytes in the src
string. However, because the strcpy function does not
know the actual size of the dest buffer, it unwittingly
copies the full 11 bytes of src to dest, overﬂowing the
dest buffer and overwriting the contents of the memory
immediately following dest. If dest exists on the stack,
the overwritten memory may contain a stored return ad-
dress.
In such a case, when the return instruction corre-
sponding to the overwritten return address is executed, the
process control ﬂow is diverted to the new return address.
A common method of attack includes a short piece of at-
tack code as part of the src string and a new return address
that points to the start of the attack code. Usually the attack
code contains shellcode, which simply spawns an interac-
tive shell. If the attacked process executes with root priv-
ileges, as is the case with many system services, then the
newly spawned shell also runs with root privileges.
The ostensibly perfect solution to buffer overﬂow vulner-
abilities is to patch the code to eliminate the underlying pro-
gramming bug. However, if the code has been widely de-
ployed, then manual patching or upgrading involves signif-
icant logistical challenges. Furthermore, new latent buffer
overﬂow bugs are constantly being discovered, as well as
being created.
Libsafe is a run-time solution that inserts wrapper code
at the start of functions that are deemed to be vulnerable to
buffer overﬂows. A large number of known buffer overﬂow
vulnerabilities are based on a relatively small set of standard
library functions. The Libsafe wrapper code performs a san-
ity check on the buffers passed to the function as parame-
ters. By intelligently examining the stack, the wrapper code
estimates a maximum safe size for each destination buffer.
If the size of the data written to the destination buffer does
not exceed the maximum safe size, then no return addresses
can be overwritten. Although this technique does not detect
all buffer overﬂows, a surprisingly large number of known
exploits are successfully detected.
The wrapper code for all functions is placed in a shared
library. By leveraging a feature in the dynamic ld.so
loader for Linux1, the Libsafe shared library is linked with
all processes on the machine.
A key feature of Libsafe is its extreme ease of use. No
source code or recompilation is required.
Installation re-
quires only a few minutes. No expertise regarding the ma-
chine or applications being protected, Libsafe, or even gen-
eral security issues are needed. The performance overhead
is minimal, usually around 1%. Perhaps best of all, Libsafe
protects against vulnerabilities and exploits that have yet to
be discovered.
Libsafe has been included in major Linux distributions.
Direct download is also available from the project web site
at http://www.research.avayalabs.com/project/libsafe. The
web site also offers white papers, conference papers, and
other documentation.
1Libsafe for Windows NT uses a different mechanism based on a reg-
istry key.
Proceedings of the International Conference on Dependable Systems and Networks (DSN’02) 
0-7695-1597-5/02 $17.00 © 2002 IEEE 
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 04:14:51 UTC from IEEE Xplore.  Restrictions apply.