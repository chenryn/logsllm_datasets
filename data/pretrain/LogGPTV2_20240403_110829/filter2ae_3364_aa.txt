URLClassLoader可以从远程HTTP服务器上加载.class文件，从而执行任意代码。
# JAVA Classloader
字节码的本质是一个字节数组byte[]
## defineClass
加载class或者jar文件，都会经过ClassLoader加载器的loadClass本地寻找类,findClass远程加载类，defineClass处理字节码，从而变成真正的java类。
因为defineClass被调用时，类对象不会被初始化，只有被显式调用构造函数时才能初始化。而且defineClass是protect类型，所以使用反射
    Method defineClass = ClassLoader.class.getDeclaredMethod("defineClass", String.class, byte[].class, int.class, int.class);
    defineClass.setAccessible(true);
## TemplateSImpl
> 依赖：
>  
>  
>     
>              org.apache.commons
>              commons-collections4
>              4.0
>          
>  
defineClass作用域不开放，所以一般不直接使用。但有一些例外，比如TemplateSImpl。(类方法很少会调用到除public外的方法)，该类的内部类TransletClassLoader重写了defineClass方法
    Class defineClass(final byte[] b) {
        return defineClass(null, b, 0, b.length);
    }
java声明方法默认default，能被外部调用。而调用到TransletClassLoader为下列调用链。
`TemplatesImpl#getOutputProperties() -> TemplatesImpl#newTransformer()
->TemplatesImpl#getTransletInstance() ->
TemplatesImpl#defineTransletClasses()-> TransletClassLoader#defineClass()`
使用到defineTransletClasses的其实有`getTransletInstance、getTransletClasses、getTransletIndex`三种，但是getTransletInstance生成的对象会被包含于Transformer
最后两个getOutputProperties()和newTransformer都是public类，所以可以略去最后一步直接newTransformer()实现.
    ObjectInputStream.GetField gf = is.readFields();
            _name = (String)gf.get("_name", null);
            _bytecodes = (byte[][])gf.get("_bytecodes", null);
            _class = (Class[])gf.get("_class", null);
            _transletIndex = gf.get("_transletIndex", -1);
            _outputProperties = (Properties)gf.get("_outputProperties", null);
            _indentNumber = gf.get("_indentNumber", 0);
            if (is.readBoolean()) {
                _uriResolver = (URIResolver) is.readObject();
            }
            _tfactory = new TransformerFactoryImpl();
  * 在TemplatesImpl的readObject序列化中可以看到`_name,_bytecodes,_class,_transletIndex,_outputProperties,_indentNumer,_tfactory`都需要设置值进行初始化，但是有些不影响后续利用的不用管，只用设置`_name`为任意字符串，`_bytecode`为恶意字节码数组，`_tfactory.get`为TransformerFactoryImpl对象。
由于是私有属性，需要用到反射`obj.getClass().getDeclaredField()`修改属性值
  * 该TemplatesImpl加载的字节码必须为AbstractTranslet子类，因为defineTransletClasses里会对传入类进行一次判断
    for (int i = 0; i  依赖：
>  
>  
>     
>              commons-collections
>              commons-collections
>              3.1
>          
>  
  * CC1是依靠TransformedMap直接执行Runtime实例的exec，那根据以上内容，可以直接执行TemplatesImpl下的newTransformer。
只需要修改ConstantTransformer的对象为TemplatesImpl。InvokerTransforomer执行的方法为newTransformer，由于newTransformer不需要参数，所以参数列表和参数内容null就行了
    package org.example;
    import com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl;