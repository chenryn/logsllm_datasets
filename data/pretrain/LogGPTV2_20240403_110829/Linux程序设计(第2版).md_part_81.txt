码里多待一会儿，让“加工厂”等在那里。
shared_stuff = (struct shared_use_st *)shared_menory;
shared_stuff->written_by_you =0:
while(running)(
if tshared_stuff-xwritten_by_yoal{
sleep(rand()4};/*make the otber process wait for us!*/
if（strncmp(shared_stuff->some_text，*end*，3）=s 0){
running = 0;
5）最后，共享内存从进程上脱离下来，随即被删除了，如下所示：
if (shndt(shared_menory) = -1)(
fprintfistderr.*stmdt failed\n*):
oxit [EXIT_FAILURE):
F
if
(shnct1（shmid.IPC_RMID.0)==-1){
fprintf（stderr,*shnctl(IPC_RMID)failed\n*);
exit(EXIT_FAILURE):
加入jaVa编程群：524621833
---
## Page 426
408
Linux程序设计
exit (EXIT_SUCCESS):
6）我们的第二个程序shm2.c是“加工厂”程序，我们通过它给“消费者”输入数据。它与
shml.c很相象，程序清单如下所示：
include 
#include 
#include 
include 
include 
#include 
#include 
#include *shm_con.h*
int main()
int running =1;
struct shared_use_st *shared_stuff;
char baffer{BUFSIZ]:
int shmid:
shmid = shmget((key_t)1234, sizeof (struct shared_use_st). 0666 | IPC_CREAT):
if（shmid == -1)(
fprintf(stderr,
*shnget failed\n*);
exit(EXIT_PAILORE):
shared_memory = shnat (shmid, (void *)0, 0);
fprintf（stderr,*shmat failed\n);
exit (EXIT_PAILURE):
printf(*Memory attached at ax`n*.(int)shared_memory):
shared_stuff =(atruct shared_use_st *)shared_memory:
while(running){
while(shared_scuff->written_by_you #x 1)(
printf(*waiting for client...\n*);
sleep(1):
printf（·Bnter some text:*);
1
fgets(buffer.BUFSIz, stdin):
strncpy(shared_stuff->some_text,buffer, TExT_sZ);
shared_stuff->written_by_you = 1;
if （strncnp（buffer，*end*.3）= 0）(
running = 0;
if （ahmdt（shared_memory) ws -1)(
fprintf（stderr,"shndt tailed\n);
exit(EXIT_FAILURE):
exit (EXIT_SUCCESS);
在运行这个程序的时候，我们将看到如下所示的样本输出：
$ sb1 6
[1]294
加入java编程群：524621833
---
## Page 427
第13章信号量、消息队列和共事内存409
Menory attached at 50007000
Memory attached at 50007000
$hm2
Enter some text:hello
You wrote:hello
waiting for client.
waiting for client
You wrote: Linux!
waiting for client
waiting for client
waiting for client,
操作注释：
第一个程序shml创建了一个共享内存段并且把它连接到自己的地址空间。我们在共享内存
的开始处设置了一个shared_use_st结构，结构里有一个written_by_you标志；只要共享内存里有
了数据，就设置这个标志。这个标志置位时，程序读取文本、把文本打印出来，再清除这个标
志表示已经读完数据。我们用一个特殊的字符串“end”来退出循环。接下来，程序脱离共享内
存段并副除了它。
第二个程序shm2通过同样的键字“1234”取得并连接上同一个共享内存段。然后提示用户
输人一些文本。如果written_by_you标志处于置位状态.说明客户进程还没有把上一次的数据读
完，还必须等待它。当另一个进程清除了这个标志之后，shm2写人新数据并置位该标志。它使
用特别设定的“end”字符串来结束并脱离共享内存段。
是我们自己准备的整数变量written_by_you。我们可以在实际程序里把它改进为传递一条消息的
办法（比如使用一个管道或IPC消息（马上就要讲到）、生成一个信号，或者使用一个信号量等
办法）在程序读、写这两部分之间进行同步。
13.2.3共享内存总结
共享内存为多个进程之间的数据共享和数据传递提供了一个高效率的解决方案。它本身不
具备同步功能，所以我们需要用其他工具来同步对共享内存的访向和操作。典型的做法是：共
享内存为一大片内存提供了高效的数据共享访问，而这片内存上的访问同步工作则由一小条消
息来完成。
13.3消息队列
我们来学习第三个也是最后一个IPC功能：消息队列。
13.3.1概述
消息队列与命名管道有许多相似之处，但少了管道在打开和关闭方面的麻烦。但使用消息
也并没有彻底解决我们在命名管道方面遇到的问题，比如管道满时的阻塞问题等。
加入jaVa编程群：524621833
---
## Page 428
410Linux程序设计
消息队列提供了从一个进程向另外一个进程发送块数据的方法。而且，每个数据块都被
认为是有一个类型，接收者进程接收的数据块可以有不同的类型值。发送消息可以让使我们差
不多完全同避命名管道上的同步和阻塞问题。更好的是，现在多少有了一些“预报”紧急消息
的能力，但消息队列也有管道一样的不足，就是每个数据块的最大长度是有上限的，系统上全
体队列的最大总长度也有一个上限。
X/Open技术规范规定了这些上限，但却没有提供检查发现这些上限的办法，只告诉我们超
越这些限制会是某些消息队列功能失常的原因之-。Linux提供了两个常数定义MSGMAX和
MSGMNB，分别代表了一条消息的最大字节长度和·个队列的最大长度。不同系统上的这些宏
定义可能会不一样，甚至可能根本就没有。
13.3.2消息队列函数
消息队列函数的定义如下所示：
#include 
int msget1(int ssgid, int cnd, atruct msgid_ds *buf);
int msggat(key_t key, int msgflg);
int nsgand(int ssqid, const void *msg.ptr, size_t msg_sz, int msgflg);
int msgrev（int msqid, void *g
asg_ptr, size_t mag.sz, long int msgtype, int nagflg);
与信号量和共享内存的情况类似，头文件sys/types.h和/sys/ipc.h一般也不能少。
1.msgget函数
我们用msgget函数来创建和访问--个消息队列：
Int msgget (key_t key. int msgflg };
和其他IPC功能类似，必须由程序提供--个键字参数key，也就是某个消息队列的名字。特
殊键值IPC_PRIVATE的作用是创建一个仅能由本进程访问的私用消息队列。第二个参数msgflg
也由九个权限标志构成。由IPC_CREAT定义的特殊位必须与其他标志按位OR（或）在一起才能
创建出一个新的消息队列。即使在设置了IPC_CREAT标志后给出的是一个现有的消息队列的键
字，也并不是一个错误。如果该消息队列已经存在，就忽略IPC_CREAT标志作用。
如果操作成功，msgget将返回一个正整数，即一个消息队列标识码；如果失败，返回“-1"。
2.msgsnd函数
msgsnd函数的作用是让我们把一条消息添加到消息队列里去：
int asgend(int msgid, conat void *msg_ptr, size_t asg_sz, Int magflg);
消息的结构在两方面受到制约。首先，它必须小于系统规定的上限值；其次，它必须以
个“longint”长整数开始，接收者函数将利用这个长整数确定消息的类型。在用到消息的时候，
最好是把你的消息结构定义为下面这个样子：
long int megsage_type;
/*The data you wish to transfer */
因为在接收消息时肯定要用到message_type，所以不能放着它不填。我们必须要在自已的数
加入jaVa编程群：524621833
---
## Page 429
第13章信号量、消息队列和共享内存
据结构里加上这个长整数，最好是把它初始化为-个确定的已知值。
第一个参数msgid是由msget函数返回的消息队列标识码。
第二个参数msg_ptr是一个指针，指针指向准备发送的消息，而消息必须像刚才说的那样以
一个“longint”长整数开始。
第三个参数msg_sz是msg_ptr指向的消息的长度。这个长度不能把保存消息类型的那个
“longint”长整数计算在内。
第叫个参数msgflg控制着当前消息队列满或到达系统（在队列消息方面的）上限时将要发生
的事情。如果msgflg中的IPC_NOWAIT标志被置位，这个函数就会立刻返回，消息不发了，返
回值是“-1”；如果msgflg中的IPC_NOWAIT标志被清除.发送者进程就会挂起，等待队列中腾
出空间来。
如果操作成功，这个函数将返回“0”；如果失败，返回“-1”。如果调用成功，就会对消息
做一个拷贝并把它放到队列里去。
3.msgrcv函数
msgrcv函数的作用是从一个消息队列里检索消息：
int magrev(int msqid, void *mng_ptr, size_t msg_sz, long int msgtype, int msgflg);
第-个参数msqid是由msgget函数返回的消息队列标识码。
第二个参数msg_pr是一个指针，指针指向准备接收的消息，而消息必须象前面msgsnd函数
部分介绍的那样以一个“longint”长整数开始。
第三个参数msg_sz是msg_ptr指向的消息的长度，不包括保存消息类型的那个长整数。
第四个参数msgtype是一个“longint”长整数，它可以实现接收优先级的简单形式如果
msgtype的值是“o"，就提取队列中的第--个可用消息；如果它的值大于零，消息类型与之相同
的第一个消息将被检索出来。如果它小于零，则消息类型值等于或小于msgtype的绝对值的第.
个消息将被检索出来。
这样说着挺复杂，但用起来就好理解厂。如果你只是想按照消息的发送顺序来检索它们，
把msgtype设置为零就行了。如果你只是想检索某一特定类型的消息，把msgtype设置为相应的
第五个参数msgflg控制着认列中没有相应类型的消息可供接收时将要发生的事情。如果
msgflg中的IPC_NOWAIT标志被置位，这个函数就会立刻返同，返回值是“-1”；如果msgflg中
的IPC_NOWAIT标志被清除，接收者进程就会挂起，等待一条对应类型的消息到达。
如果操作成功，msgrcv函数将返回实际放到接收缓冲区里去的字符个数，面消息则被拷贝
到msg_ptr指向的用户缓冲区里，然后删除队列里的数据。如果失败，返回“-1”。
4.msgctl函数
最后一个消息队列函数是msgctl，它的作用与共享内存的控制函数很相似。
int megctl(int msqid, int coamand, struct maqid_ds *buf )1
血msqid_ds结构至少应该包含以下成员：
struct msgid_ds(
uid_tmsg_perm.uidj
加入jaVa编程群：524621833
---
## Page 430
412
Linux程序设计
uid_t mag_pern.gid
mode_t mng_perm.mode)
，
第一个参数msqid是由msgget函数返回的消息队列标识码。
第二个参数command是将要采取的动作。它有三个可取值如表13-3所示：
表13-3
命令
说明
IPC_STAT
把msqid_ds结构中的数据设置为消息队列的当前关联值
IPC_SET
在进鞋有足够权限的前提下，把消息队列的当前关联值设置为msgid_ds数据结构中
给出的值
IPC_RMID
剧除消息队列
如果操作成功，它将返回“0"，失败则返回“-1”。如果删除一个消息队列的时候还有进程
等在msgsnd或msgrcv函数里，这两个函数将会失败。
在学习了消息队列的定义之后，我们来看它们的实际工作情况。和前面一样，我们将编写
两个程序，一个是接收消息用的msgl.c，另一个是发送消息用的msg2.c。我们将允许两个程序
都能创建消息队列，但最后由接收者在接收完最后一条消息后删除它。
动手试试：消息队列
1)下面是接收者的程序清单：
linclude 
include 
include 
include 
#include 
#include 
p
#include 
struct my_nsg_st {
1ong int my_nsg_type;
char some_text [BUFSIZ];
)：
int main()
int running = 1;
struct oy_msg_st some_data;
int msgid;
2)首先，我们来创建消息队列：
msgid = m8gget ((key_t)1234, 0666 1 IPC_CREAT);
if （msgid xz -1)(
fprintf(stderr.
exit (EXIT_FAILURE):
*msgget failed with error: 4d\n*,errno);
1
加入jaVa编程群：524621833
---
## Page 431
第13章信号量、消惠队列和共享内存
413
3）接着从队列里检索消息，直到遇见“end”消息为止。最后，删除消息队列。
while(running)(
if (msgrev(msgid.(void *)sone_data， BUFSI2）
fprintf(stderr, *msgrcv failed with error:ed\n*,errno);