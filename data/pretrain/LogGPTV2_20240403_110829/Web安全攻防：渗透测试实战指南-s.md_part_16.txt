$pos=strpos($db_string,*\'′,$pos+ 1);
if($pos== FALSE)
break;
$clean,=substr($db_string,$old_pos,$pos-$old_pos);
wh11e(TRUE)
$pos1=strpos($db_string,*\**,$pos+ 1);
$pos2=strpos($db_string,*\\′,$pos+ 1);
1f($pos1=** FALSE)
break;
---
## Page 152
第4章Web安全原理制析4133
elseif($pos2== FALSE 11$pos2>$pos1)
$pos=$pos1;
xjeajq
$pos=$pos2+ 1;
$clean,='$s$';
T +sods=sodptos
$clean.=substr($db_string,$o1d_pos);
$clean= trim(strtolower(preg_replace(array(*~\s+s′),array('*),$clean)));
//老版本的MySQL不支持union，常用的程序里也不使用union，但是一些累客使用它，所以
要检查它
If(strpos($clean, *union′)I== FALSE &&
preg_match(‘~(|[^a-z]}union($|[^[a-z])~s′,$clean) != e)
$fai1= TRUE;
$error="union detect";
//发布版本的程序可能几乎不包括“"“#”这样的注释，但是黑客经常使用它们
elseif(strpos($clean,°/*′) > 2 1|strpos($clean,*--') 1== FALSE
I|strpos($clean, *#′) ( FALSE)
$fa11= TRUE;
Serror="comment detect";
//这些函数不会被使用，但是黑客会用它来操作文件，dowm掉数据库
elseif(strpos($clean,′sleep′) 1== FALSE &&
preg_match(*~(^|[^a-z])sleep($|[^[a-z])~s′,$clean) (= e)
$fail= TRUE;
$error=*sloun down detect*;
elseif(strpos($clean, *benchmark’) 1== FALSE &&
preg_match(*~(~|[^a-z])benchmark($|[^[a-z] )~s′,$clean) != e)
{
$fai1= TRUE;
$error="slown down detect";
---
## Page 153
134Web安全政防：渗透测试实战指南
elseif(strpos($clean, *load_file′) !== FALSE &&
preg_match(*~(~|[^a-z])1oad_f11e($|[^[a-z])~s°,$clean) 1= e)
$fa11= TRUE;
Serror=*file fun detect";
elself(strpos($clean, 'into outf1le′) 1== FALSE &&
preg_match(*~(~|[^a-z])into\s+outf1le(s|[^[a-z])~s*,$clean) 1= θ)
Sfai1= TRUE;
Serror=*f1le fun detect*;
//老版本的mySQL不支持子查询，我们的程序里可能也用得少，但是黑客可以使用它查询数据
库敏感信息
elseif(preg_match(*~\([^)]*?select~s′,$clean) != @)
1
$fail- TRUE;
1f(lempty($fai1))
{
fputs(fopen($log_file, a+′),*$userIP| |SgetUr1||$db_stringl |$error\\n°);
exit(*Safe Alert: Request Error step
21*);
）
else
return$db_string;
）
}
使用过滤的方式，在一定程度上可以防止SQL注入漏洞，但仍然存在被绕过的可
能。
2.使用预编译语句
而是使用占位符进行数据库的增加、删除、修改、查询。
---
## Page 154
第4章Web安全原理剖析135
4.4XSS基础
4.4.1XSS漏洞介绍
跨站脚本（Cross-Site Scripting，简称为XSS或跨站脚本或跨站脚本攻击）是一种
针对网站应用程序的安全漏洞攻击技术，是代码注入的一种。它允许恶意用户将代
码注入网页，其他用户在浏览网页时就会受到影响。恶意用户利用XSS代码攻击成功
后，可能层到很高的权限（如执行一些操作）、私密网页内容、会话和cookie等各种
内容。
XSS攻击可以分为三种：反射型、存储型和DOM型。
4.4.2XSS漏洞原理
1.反射型XSS
反射型XSS又称非持久型XSS，这种攻击方式往往具有一次性。
攻击方式：攻击者通过电子邮件等方式将包含XSS代码的恶意链接发送给目标用
户。当目标用户访问该链接时，服务器接收该目标用户的请求并进行处理，然后服
务器把带有XSS代码的数据发送给目标用户的浏览器，测览器解析这段带有XSS代码
的恶意脚本后，就会触发XSS漏洞。
2.存储型XSS
存储型XSS又称持久型XSS，攻击脚本将被永久地存放在目标服务器的数据库或
文件中，具有很高的隐蔽性。
攻击方式：这种攻击多见于论坛、博客和留言板，攻击者在发帖的过程中，将
恶意脚本连同正常信息一起注入帖子的内容中。随着帖子被服务器存储下来，恶意
脚本也永久地被存放在服务器的后端存储器中。当其他用户测览这个被注入了恶意
脚本的帖子时，恶意脚本会在他们的浏览器中得到执行。
例如，恶意攻击者在留言板中加入以下代码。
(>()
---
## Page 155
136Web安全攻防：渗透测试实战指南
当其他用户访问留言板时，就会看到一个弹窗。可以看到，存储型XSS的攻击方
式能够将恶意代码永久地嵌入一个页面中，所有访问这个页面的用户都将成为受害
者。如果我们能够谨慎对待不明链接，那么反射型XSS攻击将没有多大作为，而存储
型XSS则不同，由于它注入在一些我们信任的页面，因此无论我们多么小心，都难免
会受到攻击。
3.DOM型XSS
DOM全称DocumentObjectModel，使用DOM可以使程序和脚本能够动态访问和
更新文档的内容、结构及样式。
DOM型XSS其实是一种特殊类型的反射型XSS，它是基于DOM文档对象模型的
一种漏洞
HTML的标签都是节点，而这些节点组成了DOM的整体结构一节点树。通过
HTMLDOM，树中的所有节点均可通过JavaScript进行访间。所有HTML元素（节点）
均可被修改，也可以创建或删除节点。HTMLDOM树结构如图4-80所示。
文档
文档标题
文本：
图4-80HTMLDOM树
在网站页面中有许多元素，当页面到达浏览器时，浏览器会为页面创建一个顶
级的Documentobject文档对象，接着生成各个子文档对象，每个页面元素对应一个文
档对象，每个文档对象包含属性、方法和事件。可以通过JS脚本对文档对象进行编辑，
从而修改页面的元素。也就是说，客户端的脚本程序可以通过DOM动态修改页面内
---
## Page 156
第4章Web安全原理制析137
容，从客户端获取DOM中的数据并在本地执行。由于DOM是在客户端修改节点的，
所以基于DOM型的XSS漏润不需要与服务器端交互，它只发生在客户端处理数据的
阶段。
攻击方式：用户请求一个经过专门设计的URL，它由攻击者提交，而且其中包
含XSS代码。服务器的响应不会以任何形式包含攻击者的脚本。当用户的浏览器处理
这个响应时，DOM对象就会处理XSS代码，导致存在XSS漏洞。
4.4.3反射型XSS攻击
“提交”按钮时，“11”将被输出到“输出”表单中，效果如图4-81所示。
C192.168.1.101
图4-81输入参数被输出到页面
当访 (间 http:/192.168.1.101/xss/xss1.php?xss_input_value=>时，输出到页面的HTML代码变为>，可以看到，输入的双引号闭合了value属性的双引号，输入
的>闭合了input标签的变成了HTML
标签，如图4-82所示。
---
## Page 157
138Web安全政防：渗造测试实战指南
Gtai>
K
输购肝境型通代码/4t
清输入你想基现的字特串
=alert(/xs*/) />*
图4-82输入XSS代码
接下来，在浏览器渲染时，执行了，JS函数alertO
导致浏览器弹框，显示“/xss/”，如图4-83所示。
通维人你是现的字特
提交壹询
确定
图4-83浏览器执行了XSS代码
4.4.4反射型XSS代码分析
在反射型XSS PHP代码中，通过GET获取参数xss_input_value的值，然后通过echo
输出一个input标签，并将xss_input_value的值放入input标签的value中。当访问xss_
input_value=>img src=1onerror=alert(/xss/)/>时，输出到页面的HTML代码变为
img src=1 onerror=alert(/xss/) />>，此段HTMLf代码有两
---
## Page 158
第4章Web安全原理剖析139
个标签，标签和标签，而标签的作用就是让浏览器弹框显示"/xss/”，
代码如下所示。
XSs利用输出的环境构造代码
把我们输入的字符串输出到input里的value属性里
请输入你想显现的字符申
,oua
jelsef
,oga
}
?>
4.4.5
储存型XSS攻击
储存型XSS页面实现的功能是：获取用户输入的留言信息、标题和内容，然后将
标题和内容插入到数据库中，并将数据库的留言信息输出到页面上，如图4-84所示。
标题：
内容：
提交
图4-84输入留言信息
---
## Page 159
140Web安全政防：渗透测试实践指南
当用户在标题处写入1，内容处写入2时，数据库中的数据如图4-85所示。
+选项
-T→
idtitle content
编绩复制删除11
+
.9 橙为
图4-85保存留言信息到数据库
当输入标题为，然后将标题输出到页面时，页面
执行了，导致弹出窗口。此时，这里的XSS是持久性
的，也就是说，任何人访间时该URL时都会弹出一个显示“/xSs/”的框，如图4-86所
示。
内
图4-86存储型XSS
4.4.6储存型XSS代码分析
在存储型XSS的PHP代码中，获取POST参数title和参数content，然后将参数插入
数据库表XSS中，接下来通过select查询将表XSS中的数据查询出来，并显示到页面上，
代码如下所示。
---
## Page 160
第4章Web安全原理剖析141
留言板
输入留言内容
标冠：
内容：/textarea>
ctr>标题内容;
while($row = mysqli_fetch_array($result2))
_。*[a[,]os,<>。oua
$row[′content']."";
_。 ouoa
?>
当用户在标题处写入时，数据库中的数据如图
4-87所示。
id title
content
1 11
图4-87存储到数据库中的XSS代码
---
## Page 161
142Web安全政防：渗逸测试实战指南
当将title输出到页面时，页面执行了，导致弹窗。
4.4.7[
DOM型XSS攻击
区里会显示输入的内容
输入
普换
图4-88 HTML页面
11
11
替换
图4-89替换功能
，“
框，如图4-90所示。
图4-90 DOM XSS
---
## Page 162
第4章Web安全原理制析143
从HTML源码中可以看到，存在JS函数tihuanO，该函数的作用是通过DOM操作
将元素id1（输出位置）的内容修改为元素dom_input（输入位置）的内容，如图4-91
所示。
(htal)
head
(eta bttgregeisv=”Content-Type* coetest=′text/stsl : charset*utf-8* />
(title>Test(/title)
fanetien tibsan O {
documest. getEleestByIe(*id1°), ineerHmL, = documest. get&lemest8y[4(°dos_input"°), valse:
/
(/acript)
body>