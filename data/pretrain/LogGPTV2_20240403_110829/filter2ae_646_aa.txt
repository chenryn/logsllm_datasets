来源：[IceSword Lab](http://www.iceswordlab.com/2017/10/09/ChromeOs-Userdata-Protection-Mechanism-Based-On-eCryptfs/ "IceSword Lab")  
作者：suezi@IceSword Lab
#### 一、概述
Chromebook
的使用场景模式是允许多人分享使用同一台设备，但是同时也要保护每个用户数据的私密性，使得每个使用者都不允许访问到对方的隐私数据，包括：账户信息、浏览历史记录和
cache、安装的应用程序、下载的内容以及用户自主在本地产生的文本、图片、视频等。本文试图从较高的角度阐述 ChromeOS 是如何通过 eCryptfs
机制保护用户数据隐私。
#### 二、eCryptfs 简介
eCryptfs 在 Linux kernel 2.6.19 由 IBM 公司的 Halcrow，Thompson 等人引入，在 Cryptfs
的基础上实现，用于企业级的文件系统加密，支持文件名和文件内容的加密。本质上 eCryptfs 就像是一个内核版本的 Pretty Good
Privacy（PGP）服务，插在 VFS和下层物理文件系统之间，充当一个“过滤器”的角色。用户应用程序对加密文件的写请求，经系统调用层到达 VFS
层，VFS 转给 eCryptfs 文件系统组件处理，处理完毕后，再转给下层物理文件系统；读请求流程则相反。
eCryptfs 的设计受到 OpenPGP 规范的影响，核心思想：eCryptfs 通过一种对称密钥加密算法来加密文件的内容或文件名，如
AES-128，密钥 FEK（File Encryption Key）随机产生。而 FEK 通过用户口令或者公钥进行保护，加密后的 FEK
称EFEK（Encrypted File Encryption Key），口令/公钥称为 FEFEK（File Encryption Key
Encryption Key）。在保存文件时，将包含有 EFEK、加密算法等信息的元数据（metadata）放置在文件的头部或者 xattr
扩展属性里（本文默认以前者做为讲解），打开文件前再解析 metadata。
图一 eCryptfs的系统架构
eCryptfs 的系统架构如图一所示，eCryptfs 堆叠在 EXT4
文件系统之上，工作时需要用户程序和内核同时配合，用户程序主要负责获取密钥并通过(add_key/keyctl/request_key)系统调用传送到内核的
keyring，当某个应用程序发起对文件的读写操作前，由 eCryptfs 对其进行加/解密，加/解密的过程中需要调用 Kernel 的 Crypto
API（AES/DES etc）来完成。以对目录 eCryptfs-test 进行加密为例，为方便起见，在 Ubuntu
系统下测试eCryptfs的建立流程，如图二所示，通过mount指令发起eCryptfs的建立流程，然后在用户应用程序 eCryptfs-utils
的辅助下输入用于加密FEK的用户口令及选择加密算法等，完成挂载后意味着已经开始对测试目录 eCryptfs-test 的所有内容进行加密处理。测试中在
eCryptfs-test 目录下增加需要加密的文件或目录的内容，当用户 umount 退出对 eCryptfs-test
目录的挂载后再次查看该目录时，发现包括文件名和文件内容都进行了加密，如图三所示。
图二 eCryptfs使用时的建立流程
图三 eCryptfs加密后的文件
图四 eCryptfs对文件的加解密流程
实现上，eCryptfs 对数据的加/解密流程如图四所示，对称密钥加密算法以块为单位进行加密/解密，如AES-128。eCryptfs
将加密文件分成多个逻辑块，称为 extent，extent 的大小可调，但是不能大于实际物理页，默认值等于物理页的大小，如32位的系统下是 4096
字节。加密文件的头部存放元数据，包括元数据长度、标志位、旗标、EFEK 及相应的 signature，目前元数据的最小长度为 8192
字节。加/解密开始前，首先解密FEKEK取出FEK。当读入一个 extent 中的任何部分的密文时，整个 extent 被读入 Page Cache，通过
Kernel Crypto API 进行解密；当 extent 中的任何部分的明文数据被写回磁盘时，需要加密并写回整个 extent。
#### 三、eCryptfs 详述
eCryptfs 在内核中的实现代码位于 kernel/fs/ecryptfs，下面以 eCryptfs 使用到的关键数据结构、eCryptfs
init、eCryptfs mount、file creat、file open、file read、file write
的顺序分别介绍eCryptfs是如何工作。另外，eCryptfs 还实现了/dev/ecryptfs的 misc
设备，用于内核与应用程序间的消息传递，如密钥请求与响应，属于非必选项，因此这里不对其进行介绍。
##### eCryptfs 相关的数据结构
eCryptfs 关键的数据结构包括 eCryptfs 文件系统相关
file、dentry、inode、superblock、file_system_type 描述、auth token 认证令牌描述、eCryptfs
加密信息描述等。
eCryptfs 文件系统相关的数据结构如清单一所示，下文将会重点介绍 `file_system_type` 中的 mount 函数，即
ecryptfs_mount。
###### 清单一 eCryptfs文件系统相关的数据结构
    /* ecryptfs file_system_type */
    static struct file_system_type ecryptfs_fs_type = {
        .owner = THIS_MODULE,
        .name = "ecryptfs",
        .mount = ecryptfs_mount,
        .kill_sb = ecryptfs_kill_block_super,
        .fs_flags = 0
    };
    /* superblock private data. */
    struct ecryptfs_sb_info {
        struct super_block *wsi_sb;
        struct ecryptfs_mount_crypt_stat mount_crypt_stat;
        struct backing_dev_info bdi;
    };
    /* inode private data. */
    struct ecryptfs_inode_info {
        struct inode vfs_inode;
        struct inode *wii_inode;
        struct mutex lower_file_mutex;
        atomic_t lower_file_count;
        struct file *lower_file;
        struct ecryptfs_crypt_stat crypt_stat;
    };
    /* dentry private data. Each dentry must keep track of a lower vfsmount too. */
    struct ecryptfs_dentry_info {
        struct path lower_path;
        union {
            struct ecryptfs_crypt_stat *crypt_stat;
            struct rcu_head rcu;
        };
    };
    /* file private data. */
    struct ecryptfs_file_info {
        struct file *wfi_file;
        struct ecryptfs_crypt_stat *crypt_stat;
    };
eCryptfs 支持对文件名（包括目录名）进行加密，因此特意使用了 `struct ecryptfs_filename` 的结构封装文件名，如清单二所示。
###### 清单二 文件名的数据结构
    struct ecryptfs_filename {
        struct list_head crypt_stat_list;
        u32 flags;
        u32 seq_no;
        char *filename;
        char *encrypted_filename;
        size_t filename_size;
        size_t encrypted_filename_size;
        char fnek_sig[ECRYPTFS_SIG_SIZE_HEX];
        char dentry_name[ECRYPTFS_ENCRYPTED_DENTRY_NAME_LEN + 1];
    };
`struct
ecryptfs_auth_tok`用于记录认证令牌信息，包括用户口令和非对称加密两种类型，每种类型都包含有密钥的签名，用户口令类型还包含有算法类型和加盐值等，如清单三所示。为了方便管理，使用时统一将其保存在`struct
ecryptfs_auth_tok_list_item`链表中。
###### 清单三 认证令牌信息的数据结构
    struct ecryptfs_auth_tok {
        u16 version; /* 8-bit major and 8-bit minor */
        u16 token_type;
        u32 flags;
        struct ecryptfs_session_key session_key;
        u8 reserved[32];
        union {
            struct ecryptfs_password password;  //用户口令类型
            struct ecryptfs_private_key private_key; //非对称加密类型
        } token;
    }
    struct ecryptfs_password {
        u32 password_bytes;
        s32 hash_algo;
        u32 hash_iterations;
        u32 session_key_encryption_key_bytes;
        u32 flags;
        /* Iterated-hash concatenation of salt and passphrase */
        u8 session_key_encryption_key[ECRYPTFS_MAX_KEY_BYTES];
        u8 signature[ECRYPTFS_PASSWORD_SIG_SIZE + 1];
        /* Always in expanded hex */
        u8 salt[ECRYPTFS_SALT_SIZE];
    };
    struct ecryptfs_private_key {
        u32 key_size;
        u32 data_len;
        u8 signature[ECRYPTFS_PASSWORD_SIG_SIZE + 1];
        char pki_type[ECRYPTFS_MAX_PKI_NAME_BYTES + 1];
        u8 data[];
    };
eCryptfs 在 mount 时会传入全局加解密用到密钥、算法相关数据，并将其保存在 `struct
ecryptfs_mount_crypt_stat`，如清单四所示
###### 清单四 mount 时传入的密钥相关数据结构
    struct ecryptfs_mount_crypt_stat {
        u32 flags;
        struct list_head global_auth_tok_list;
        struct mutex global_auth_tok_list_mutex;
        size_t global_default_cipher_key_size;
        size_t global_default_fn_cipher_key_bytes;
        unsigned char global_default_cipher_name[ECRYPTFS_MAX_CIPHER_NAME_SIZE + 1];
        unsigned char global_default_fn_cipher_name[
            ECRYPTFS_MAX_CIPHER_NAME_SIZE + 1];
        char global_default_fnek_sig[ECRYPTFS_SIG_SIZE_HEX + 1];
    };
eCryptfs 读写文件时首先需要进行加/解密，此时使用的密钥相关数据保存在`struct ecryptfs_crypt_stat`结构中，其具体数值在
open 时初始化，部分从 mount 时的 `ecryptfs_mount_crypt_stat` 复制过来，部分从分析加密文件的 metadata
获取，该数据结构比较关键，贯穿 eCryptfs 的文件 open、read、write、close 等流程，如清单五所示。
###### 清单五 ecryptfs_crypt_stat 数据结构
    struct ecryptfs_crypt_stat {
        u32 flags;
        unsigned int file_version;
        size_t iv_bytes;
        size_t metadata_size;
        size_t extent_size; /* Data extent size; default is 4096 */
        size_t key_size;
        size_t extent_shift;
        unsigned int extent_mask;
        struct ecryptfs_mount_crypt_stat *mount_crypt_stat;
        struct crypto_ablkcipher *tfm;
        struct crypto_hash *hash_tfm; /* Crypto context for generating
                           * the initialization vectors */
        unsigned char cipher[ECRYPTFS_MAX_CIPHER_NAME_SIZE + 1];
        unsigned char key[ECRYPTFS_MAX_KEY_BYTES];
        unsigned char root_iv[ECRYPTFS_MAX_IV_BYTES];
        struct list_head keysig_list;
        struct mutex keysig_list_mutex;
        struct mutex cs_tfm_mutex;
        struct mutex cs_hash_tfm_mutex;
        struct mutex cs_mutex;
    };
##### eCryptfs init过程
使用 eCryptfs 前，首先需要通过内核的配置选项“CONFIG_ECRYPT_FS=y”使能 eCryptfs，因为加解密时使用到内核的 crypto
和 keystore
接口，所以要确保“CONFIG_CRYPTO=y”，“CONFIG_KEYS=y”，“CONFIG_ENCRYPTED_KEYS=y”，同时使能相应的加解密算法，如