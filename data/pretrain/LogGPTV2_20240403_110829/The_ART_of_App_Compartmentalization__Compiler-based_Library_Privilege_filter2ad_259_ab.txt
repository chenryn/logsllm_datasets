breaking Android’s signature-based same origin model (F2: ✗; F4: ✓).
Since those techniques modify the code prior to installation, they
do not require higher privileges to operate (F5: ✓). Such rewriting
and IRM techniques have previously been used in different privacy-
enhancing solutions [13, 17, 18, 24, 29, 37] and the PEDAL [25]
and NativeGuard [36] approaches target specifically the privilege
separation of libraries. NativeGuard in particular focuses on mov-
ing native code libraries to a dedicated process and reconnecting
them to the host via inter-process communication (F1: ✓). PEDAL,
in contrast, runs host and library in the same process (F1: ✗), but
restricts the library through hooking into APIs that access sensitive
Session E2:  Securing Mobile AppsCCS’17, October 30-November 3, 2017, Dallas, TX, USA1039Table 1: Techniques used to integrate advertising libraries with host application.
Ad Lib
Google Play Services Ads†
Flurry
Facebook Audience
Google Admob
InMobi
MoPub
Millennial Media
Tapjoy
AdColony
Amazon Ads
Share [9]
Method
Invocation
Field
Access
Inherit
Class
Implement
Interface
Custom
Exception
Layout
Arrang.
Android
Manifest
25.94%
17.85%
12.11%
9.30%
6.45%
6.13%
5.41%
4.29%
3.91%
3.11%
✓
✓
✓
✓
✓
✓
✓
✓
✓
✓
✓
✓
✓
✓
✓
✓
✓
✓
✓
✓
✓
✓
✓
✗
✗
✓
✗
✗
✓
✗
✗
✓
✓
✓
✓
✓
✓
✓
✓
✓
✗
✗
✗
✗
✗
✓
✓
✗
✗
✗
✓
✓
✓
✓
✓
✓
✓
✗
✓
✓
✓
✓
✓
✓
✓
✓
✓
✓
✓
✓
† The successor of AdMob and comprised of several advertising networks; we only focus on the basic package that includes Banner and Interstitial ads
✓: technique used by library; ✗: technique not used by library
Table 2: Comparison of existing (advertisement) library privilege separation approaches.
Features
F1: Robust Privilege Separation
F2: Preserves Same-Origin Model
F3: No Firmware Modification
F4: Developer Agnostic
F5: No privilege escalation/App virt.
FlexDroid [31] AdDroid [27] AdSplit [32] AFrame [39] NativeGuard [36]
System-centric
Application layer
PEDAL [25]
✗
✓
✗
✗
✓
✓
✓
✗
✗
✓
✓
✓
✗
✓
✓
✓
✓
✗
✗
✓
✓: Solution provides feature; ✗: Solution does not provide feature
✓
✗
✓
✓
✓
✗
✗
✓
✓
✓
CompARTist
✓
✓
✓
✓
✗
resources. Lastly, although not designed for privilege-separation of
third-party libraries but instead of WebView components by using
app rewriting techniques, the very recent WIREFrame [16] shares
some design ideas with our CompARTist (see later Section 5), e.g.,
in that it establishes an IPC-based channel between host app and
remote WebView for remote procedure calls, lifecycle management,
or restoring visual fidelity. In CompARTist we, in contrast, show
how such a channel can be established through a compiler-based
rewriting.
4.2 Advertisement Blocking
The growing popularity of mobile advertisements also gave rise to
a range of approaches that, in contrast to compartmentalization
and monitoring, follows a more extreme path and blocks advertise-
ments altogether. The downside of this approach is that it inhibits
the free distribution model by reducing the developers’ revenue
from displaying ads. Tools such as AdAway [2], AdGuard [5] and
AdblockPlus [4] utilize network-based filtering by either altering
the device’s hosts file or employing VPN-based content blocking.
In addition, AdblockBrowser [3] provides a fully-featured browser
with a deeply-integrated advertisement blocking functionality. In
contrast, APKLancet [38] is capable of pruning a range of third-
party libraries, in particular, advertisement libraries, by removing
the libs’ code from the app’s codebase. In-app ad-blocking solu-
tion [12] utilizes app virtualization to strip ads from apps.
Figure 3: System overview of CompARTist.
5 SYSTEM DESIGN
We present the design and implementation of CompARTist.
5.1 System Overview
The overall design of our CompARTist is depicted in Figure 3. The
goal of CompARTist is to privilege-separate advertisement libraries
from their host apps with a strong security boundary between li-
brary and host app. Since Android’s privileges are bound to UIDs,
we opted in our solution for splitting an ad-supported target app
into two different applications, each with a distinct UID. This sepa-
rates advertisement libraries into a separate process with separate
privileges through a distinct UID (F1: ✓). Since advertisement li-
braries are usually integrated into their host app (see Section 3), the
CompARTistServices/FileSysADHOSTshared      permissionsshared      MAC/DACORIGINAL APPADHOSTHOSTSUPPORTServices/FileSysADhost     permissionshost     MAC/DACad     permissionsad     MAC/DACLIBSUPPORTprocess  boundaryHOST APPAD APPSession E2:  Securing Mobile AppsCCS’17, October 30-November 3, 2017, Dallas, TX, USA1040Figure 4: Inter-application Communication Channel
primary challenge for such an approach is to re-integrated the host
app and library across process boundaries. While such separation
and re-integration can be achieved through firmware extensions or
application rewriting (see Section 4), we present a new trade-off in
the design space for Android security solutions by establishing such
separation and re-integration based on an extension of the dex2oat
on-device compiler. Operating entirely at application-level and at
compile-time, this approach abstains from firmware modifications
(F3: ✓), app repackaging and resigning (F2: ✓), and app developer
involvement (F4: ✓) by relying solely on the ability to load the app
code produced by an extended compiler backend1 (F5: ✗).
In the remainder of this section, we explain the design and imple-
mentation of the three main components of our solution: 1) a new
IPC-based channel between host app and library that makes the
previously locally integrated library remotely callable and, further,
allows to synchronize the runtime states between library and app
(Section 5.2); 2) an extension for the dex2oat compiler that inte-
grates host support for the new communication channel into the
host app and replaces the library through an opaque proxy for the
separated library (Section 5.3); and 3) a new advertisement service
app that encapsulates and privilege-separates the advertisement
libraries as well as displays the ads on screen (Section 5.4).
5.2 Inter-Application Communication Channel
Since the originally app-local procedure calls to advertisement libs
are not possible anymore in an isolated lib design, we need an inter-
application communication channel to deliver such calls remotely
across process boundaries. We take advantage of the Binder frame-
work [30], Android’s inter-process communication (IPC) mecha-
nism, to replace the original calls to the advertisement library with
remote procedure calls and transfer data, such as method param-
eters, between the host app and advertising service app. Figure 4
illustrates this channel and its components are explained in the
following.
5.2.1 Communication Protocol and APIs. The first general chal-
lenge for our solution is the handling of data marshalling. On An-
droid, any data that should be transferred via Binder IPC has to
1CompARTist requires access to a particular protected directory of an app to replace
the oat file that is loaded by the system. Escalated privilege, e.g., root access, is needed
merely to overwrite the original oat file.
Figure 5: Example protocol run for creating a new AdView in-
stance and calling method setAdUnitId(String) on this in-
stance.
be either a primitive type (e.g., integer), String or a complex type,
like a class, that implements the Parcelable interface to marshal
the complex type into primitive types for transmission. However,
library classes that were never intended to be sent via IPC, since
they are only used in local invocations, do not implement this in-
terface and are by-design not transmittable via Binder IPC. As a
consequence, our channel cannot be used to transmit them, because
it is unclear how to marshal and unmarshal those complex library
classes. Thus, in CompARTist, we build on a generic protocol for
remotely creating and operating on objects of library classes: those
objects are constructed and stored at the ad service side and ref-
erences to those objects are passed via IPC to the host app, which
can use those references to invoke methods or access fields on the
referenced objects. As generic, parcelable container data structure
to transmit method parameters, parameter type information, and
references to class instances in our protocol, we introduce a het-
erogeneous key-value store with corresponding serialization and
de-serialization logic called WrapClass.
We define three kinds of interfaces for our new inter-application
communication channel that host app and advertisement service
app can use to call each other via above mentioned WrapClass-based
protocol: advertisement invocation API, callback API, and synchro-
nization API. For each of those interface types, we automatically
2 feature. Those
create Stub and Proxy classes using Android’s AIDL
classes make these communication channels more easily accessible
2https://developer.android.com/guide/components/aidl.html
AdHelperAdServiceproxyproxystubstubBINDER IPCAd Invocation APIsSync APIsCallback APIs.identity:123.classtype: adtype.localId.prim_objectwrapclassprimitivesString...WrapClass objectprimitivesString...ad objectHOSTCOMPONENTSADCOMPONENTSHOST SIDEAD SIDEAd ObjectHOSTAdHelpermAdView = new AdView(host.context)WrapClass(Host)newInstanceService("AdView", wrapclass[])storeObject(host.context)wrapclassAdServicegetStoredObject(wrapclass)WrapClass(Service)ad.contextADAdView_constructor.newInstance(ad.context)adViewstoreObject(adView)wrapclassgetStoredObject(wrapclass)adviewproxy HashMap(id, adView).......mAdView.setAdUnitId(adid)storeObject(adid)wrapclasswrapclass = getWrapClassFromObject(adviewproxy)invokeVirtualMethodService("AdView.setAdUnitId", wrapclass, wrapclass[])getStoredObject(wrapclass)adViewadidAdView_setAdUnitId.invoke(adView, adid)voidstoreObject(void)wrapclassgetStoredObject(wrapclass)void A2A1A3A4A5A6A7B1B2B4B3B5B6B7Session E2:  Securing Mobile AppsCCS’17, October 30-November 3, 2017, Dallas, TX, USA1041for the host app and ad service app, respectively. The full inter-
faces for each of those interface types are listed in Appendix A. A
particular benefit of these APIs is that they abstract from library
specific methods, thus avoiding the need to generate a tailored Stub
and Proxy for every available advertisement library and easing the
process of adding support for new libraries.
(1) Advertisement Invocation API. Generally speaking, there are
three ways for host components to communicate with the adver-
tisement library (see also Section 3): instance creation, field access,