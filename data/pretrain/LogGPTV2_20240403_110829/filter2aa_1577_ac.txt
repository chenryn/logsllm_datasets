0.5%
API 开发者的策略和行为画像
19
API 开发者的策略和行为画像
API开发需要广泛借助各类工具，涵盖设计、文档管理、测试等各个
环节，但普遍将易用性视为选择工具的重要关注因素
从开发工具的使用上，我们不难看出开发者对于工具的依赖，开发者使用的工具类型覆
盖了设计、文档管理、测试等API开发管理周期的各个环节，且各类开发工具的使用比例相
近，API设计器、API功能/性能/压力测试工具、编码规范工具、源码版本管理工具、API网
关工具、API文档工具、单元测试工具、服务虚拟化工具、代码评审工具在受访者中的使用
率均超过了30%。
而在同类型开发工具的选择上，大部分开发者首先关注开发工具的易用性。另外，与现
有工具的集成、使用效率、先进的功能/特性等也成为开发者重点考虑的因素，而对于是否
开源、是否拥有活跃的社区、学习曲线的关注度并不高。
4.
编码规范工具
源码版本管理工具
API网关工具
API文档工具
单元测试工具
服务虚拟化工具（Mock）
代码评审工具
安全测试工具
API调用分析
37.4%
API功能/性能/压力测试工具
37.9%
API设计器
38.5%
36.2%
34.6%
33.2%
32.9%
32.2%
31.4%
21.1%
0%
10%
20%
30%
40%
12.9%
API市场门户
9.7%
开发者使用哪些API相关的开发工具
20
在评估API工具时，开发者优先考虑哪些因素
与现有工具的集成
效率
先进的功能/特性
对脚本的支持
成本
是否开源
是否拥有活跃的社区
是否有现成客户案例（最佳实践）
学习曲线
43.2%
易用性
58.5%
43.1%
39.8%
28.1%
26.4%
22.5%
21.2%
19.5%
0%
10%
20%
30%
40%
50%
60%
18.4%
API 开发者的策略和行为画像
21
API设计流程和工具
在本章中，我们聚焦API产品生命周期
的一个重要阶段——API设计，观察开
发者如何看待、以及使用哪些标准和工
具实现API设计流程
第四部分
半数开发者已经拥有正式的API设计流程，近四成开发者已经实现了
文档驱动的设计方式
建立设计流程的重要性已经得到了开发者的普遍认可，共计约75%的开发者对拥有正
式的API设计流程持正面态度，其中约48%的开发者认为设计流程非常重要、且已经建立
设计流程。
而从设计方式来看，约48%的开发者停留在代码驱动的设计方式，也有38%的开发者
已经实现了文档驱动的设计方式。
显然，API应用的开发正在向成规模、成体系的团队化开发模式演进，这将加速API应
用的快速创新和发展，并对API应用的后续服务提供保障。在这样的背景下，API开发文档
中记录的详细信息将在日后成为团队协作共享的宝贵资源，其重要性愈发凸显。
是否建立正式的API设计流程
目前的API设计方式
1.
有，设计非常重要
目前没有，未来可能有
有，设计不是很重要
1%
48%
27%
6%
18%
没有
不确定
代码驱动：在编写好代码之后再在代码中补充API注解，
然后生成API文档
文档驱动：在编写代码之前先设计好API定义，然后生成
框架代码
无固定方式
其他
48%
38%
1%
13%
API 设计流程和工具
23
RESTful作为优秀的接口设计标准被广泛使用
RESTful是目前使用最为普遍的一种接口设计方式，作为一个优秀的接口设计标准，
被54.4%的受访者采用。
客观来说，兼容性和可扩展性仍然是软件设计的主要挑战，RESTful风格的API具备
的天然优势使其受到广大开发者欢迎，例如通过HTTP协议降低客户端的耦合、具有极好
的开放性，显然已经取代了SOAP和WSDL等接口设计。
但并没有哪种标准是必然优于另外一种的，如gRPC和RESTful API都提供了一套通
讯机制，但gRPC有更加严格的接口约束条件，且能够大幅减少需要传输的数据量，在需
要对接口进行严格约束、或者对于性能有更高要求的场景更加适用。
通用的API或Web Service定义标准的使用情况
2.
Websocket
AsyncAPI
WSDL
API Blueprint
SOAP
Thrift
WADL
RAML
ISO 8583
17.1%
GraphQL
19.7%
16.8%
gRPC
Socket
24.5%
REST
54.4%
23.0%
15.1%
15.1%
12.4%
9.3%
9.0%
5.5%
0%
10%
20%
30%
40%
50%
60%
4.2%
我们没有用到API标准
2.8%
API 设计流程和工具
24
开源编辑器（如Swagger编辑器）
API管理工具中的设计器（例如Apigee、Azure）
IDE
文本编辑器
Postman
SwaggerHub
MuleSoft Anypoint API Designer
Apiary
Stoplight
26.4%
18.7%
17.1%
12.4%
10.2%
6.0%
3.0%
2.2%
0%
10%
20%
30%
1.6%
其他
2.4%
开源编辑器依然是开发者进行API设计的首选工具，大部分开发者希
望获得或已经实现了通过API设计文档自动生成代码的能力
创建优质的API需要借助强大的工具、语言以及档案所优化的迭代流程来实现，工具和
技术可以从根本上改善这一设计过程。接口描述语言提供支持性的工具以简化编写描述的任
务，这一点已经非常常见，RAML、Swagger等单一功能的开源编辑器都提供了优秀的编
辑工具以支持各自的语言，它们依然是开发者进行API设计的首选，有26.4%的受访将其作
为主要工具，而API管理工具普遍能够提供更全面的功能和更简洁的页面，也有18.7%的受
访者使用。从另一个角度来看，有41%的开发者表示能够通过API设计文档自动生成代码，
另外有25%的开发者希望通过工具获得借助设计文档自动生成代码的能力。
通用的API或Web Service定义标准的使用情况
能否通过API设计文档自动生成代码
3.
能够
不能
41%
34%
25%
希望API开发工具能提供从API设计自动生成代码功能
API 设计流程和工具
25
API测试流程和工具
本章我们将看到API测试在API产品生
命周期中的重要作用，还涉及不同测试
工具的使用情况、提供高质量API面临
的主要障碍等问题
第五部分
质量低下的API直接影响项目交付时间、SLA要求，严重时甚至对
使用者造成用户或公司品牌损失
随着第三方API在项目中扮演愈发关键的角色，API的质量将直接影响软件项目的交付
质量。23.9%的受访者认为低质量的API会延长项目交付时间，18.6%的受访者认为会导
致项目无法满足SLA。同时有20%的受访者担忧，质量低下的API会导致公司丢失客户或
用户，并对公司品牌造成损失。显然，提供更好的API质量保障方案，将为使用者选择API
增加更多信心。
因API质量低下给使用者带来的主要风险
1.
延长项目交付时间
无法满足SLA（服务等级协议）
降低项目交付速度
影响内部依赖于API的团队
丢失客户/用户
对公司/品牌造成损失
合规风险
23.9%
18.6%
17.6%
16.7%
14.2%
3.2%
5.8%
API 测试流程和工具
27
缺少预算
没有时间
缺少工具/系统之间的集成
缺乏经验和技能
缺少足够的精力
缺少有效协作
缺乏合适的工具和技术
16.4%
6.3%
0%
0%
10%
20%
30%
30%
20%
10%
11.6%
11.9%
13.4%
12.1%
11.6%
12.4%
20.9%
16.8%
16.1%
20.8%
13.8%
15.1%
缺乏合适的工具和技术是保障API质量的最大障碍
在保障API质量的调研中，缺乏合适的工具和技术是使用者和开发者面临的最大障碍，
分别有20.9%的使用者、20.8%的开发者选择了该选项。其他障碍中，较为集中的选项还
包括：缺少足够的精力、缺乏经验和技能、缺少有效协作等。
可以得知，在尚未成熟的API生态中，市场亟需好的API开发工具和经验指导，具备专
业能力的API开发机构或将加速API生态的建立和发展。
使用者（左侧）和开发者（右侧）在保障API质量方面面临的最大障碍
2.
API 测试流程和工具
28
无论是API开发者还是使用者，已经建立API测试流程的受访者均超
过半数，API测试将成为整体自动化策略的重要组成部分
在API使用者中，52%的受访者表示已建立正式的API测试流程，而在开发者中这一比
例提高到了56%，另外分别有26%和22%的受访者表示目前没有，但未来可能建立测试流
程。
显然，建立API测试流程的重要性已经成为共识，伴随越来越多的公司转向DevOps方
向，以实现持续集成和持续部署开发，这意味着更快的反馈效率和更短的交付时间，API测
试将成为整体自动化策略的重要组成部分。
API使用者（外层）和开发者（内层）是否建立正式的API测试流程
3.
有，测试非常重要
目前没有，未来可能有
有，测试不是很重要
52%
56%
26%
22%
3.9%
5%1%
1.9%
16.2%
16%
没有
不确定
API 测试流程和工具
29
大多数受访者使用过多个API 测试工具，YAPI、Postman应用最
为广泛
目前，有多种第三方工具帮助工程师实现API的自动化测试，其中使用最广泛的是：提
供综合接口管理服务的YAPI、以及高效的探索型API测试工具Postman。
在所有受访者中，76.5%的API使用者和43.2%的API开发者使用过多个API测试工
具，表明API测试工具的市场竞争较为激烈，也说明还没有哪款测试工具赢得了用户的绝对
信任。
API使用者使用哪些API测试工具
4.
Karate DSL
Dredd
REST-Assured
Katalon
Pact
JMeter
Tricentis Tosca
Parasoft