CREATE TABLE  
CREATE TABLE  
CREATE TABLE  
CREATE TABLE  
postgres=# \dt t_*  
        List of relations  
 Schema | Name | Type  |  Owner     
--------+------+-------+----------  
 public | t_1  | table | postgres  
 public | t_10 | table | postgres  
 public | t_2  | table | postgres  
 public | t_3  | table | postgres  
 public | t_4  | table | postgres  
 public | t_5  | table | postgres  
 public | t_6  | table | postgres  
 public | t_7  | table | postgres  
 public | t_8  | table | postgres  
 public | t_9  | table | postgres  
(10 rows)  
```  
将结果设置到COLUMN ALIAS的变量中  
```  
postgres=# select 'abcd' as col1, 1 as col2  
postgres-# \gset  
postgres=# \echo :col1  
abcd  
postgres=# \echo :col2  
1  
```  
列出已设置的PSQL变量  
```  
postgres=# \set  
AUTOCOMMIT = 'on'  
COMP_KEYWORD_CASE = 'preserve-upper'  
DBNAME = 'postgres'  
ECHO = 'none'  
ECHO_HIDDEN = 'off'  
ENCODING = 'UTF8'  
ERROR = 'false'  
FETCH_COUNT = '0'  
HIDE_TABLEAM = 'off'  
HISTCONTROL = 'none'  
HISTSIZE = '500'  
HOST = '/data01/pg12/pg_root12000'  
IGNOREEOF = '0'  
LASTOID = '0'  
LAST_ERROR_MESSAGE = ''  
LAST_ERROR_SQLSTATE = '00000'  
ON_ERROR_ROLLBACK = 'off'  
ON_ERROR_STOP = 'off'  
PORT = '12000'  
PROMPT1 = '%/%R%# '  
PROMPT2 = '%/%R%# '  
PROMPT3 = '>> '  
QUIET = 'off'  
ROW_COUNT = '1'  
SERVER_VERSION_NAME = '12beta1'  
SERVER_VERSION_NUM = '120000'  
SHOW_CONTEXT = 'errors'  
SINGLELINE = 'off'  
SINGLESTEP = 'off'  
SQLSTATE = '00000'  
USER = 'postgres'  
VERBOSITY = 'default'  
VERSION = 'PostgreSQL 12beta1 on x86_64-pc-linux-gnu, compiled by gcc (GCC) 4.8.5 20150623 (Red Hat 4.8.5-36), 64-bit'  
VERSION_NAME = '12beta1'  
VERSION_NUM = '120000'  
col1 = 'abcd'  
col2 = '1'  
```  
扩展方式返回结果  
```  
\x  
query;  
或  
\gx  
```  
```  
postgres=# \p  
select 'abcd' as col1, 1 as col2  
postgres=# \g  
 col1 | col2   
------+------  
 abcd |    1  
(1 row)  
postgres=# \gx  
-[ RECORD 1 ]  
col1 | abcd  
col2 | 1  
```  
### 7、每隔N秒执行一次query buffer中的SQL  
```  
postgres=# \p  
select 'abcd' as col1, 1 as col2  
postgres=# \watch 1  
Sat 08 Jun 2019 10:33:55 AM CST (every 1s)  
 col1 | col2   
------+------  
 abcd |    1  
(1 row)  
Sat 08 Jun 2019 10:33:56 AM CST (every 1s)  
 col1 | col2   
------+------  
 abcd |    1  
(1 row)  
```  
### 8、条件判定逻辑  
gset执行并设置变量到column alias  
```  
-- check for the existence of two separate records in the database and store  
-- the results in separate psql variables  
SELECT  
    EXISTS(SELECT 1 FROM customer WHERE customer_id = 123) as is_customer,  
    EXISTS(SELECT 1 FROM employee WHERE employee_id = 456) as is_employee  
\gset  
\if :is_customer  
    SELECT * FROM customer WHERE customer_id = 123;  
\elif :is_employee  
    \echo 'is not a customer but is an employee'  
    SELECT * FROM employee WHERE employee_id = 456;  
\else  
    \if yes  
        \echo 'not a customer or employee'  
    \else  
        \echo 'this will never print'  
    \endif  
\endif  
```  
### 9、大对象操作  
```  
postgres=# \lo_import '/tmp/abcd'  
could not open file "/tmp/abcd": No such file or directory  
postgres=# \lo_import '/tmp/abc'  
lo_import 16516  
postgres=#  \lo_list  
         Large objects  
  ID   |  Owner   | Description   
-------+----------+-------------  
 16516 | postgres |   
(1 row)  
postgres=# \lo_export 16516 '/tmp/copy_abc'  
lo_export  
postgres=# \! diff '/tmp/copy_abc' '/tmp/abc'  
postgres=# \! head -n 2 '/tmp/copy_abc'  
create table h (id int, info text0;  
;  
postgres=# \! head -n 2 '/tmp/abc'  
create table h (id int, info text0;  
;  
postgres=# select * from pg_largeobject_metadata;  
  oid  | lomowner | lomacl   
-------+----------+--------  
 16516 |       10 |   
(1 row)  
```  
清理大对象  
```  
postgres=#        \lo_unlink 16516  
lo_unlink 16516  
postgres=#        \lo_list  
      Large objects  
 ID | Owner | Description   
----+-------+-------------  
(0 rows)  
postgres=# select * from pg_largeobject_metadata ;  
 oid | lomowner | lomacl   
-----+----------+--------  
(0 rows)  
postgres=# select * from pg_largeobject;  
 loid | pageno | data   
------+--------+------  
(0 rows)  
```  
### 10、COPY PSQL的客户端服务器上的文件到数据库，或COPY数据库数据（表或者SQL）的结果到执行PSQL的客户端。  
[《PostgreSQL 服务端COPY和客户端COPY - 暨PG有哪些服务端操作接口》](../201805/20180516_03.md)    
[《PostgreSQL copy (quote,DELIMITER,...) single byte char 的输入》](../201805/20180510_01.md)    
### 11、连接其他数据库  
```  
postgres=# create role abc login;  
CREATE ROLE  
postgres=# \c 'hostaddr=127.0.0.1 dbname=postgres user=abc port=12000'  
You are now connected to database "postgres" as user "abc".  
连接当前实例的其他DB或USER，可以简写  
\c dbname username  
例如  
postgres=> \c postgres postgres  
You are now connected to database "postgres" as user "postgres".  
```  
### 12、列出当前连接信息  
```  
postgres=#   \conninfo  
You are connected to database "postgres" as user "postgres" via socket in "/data01/pg12/pg_root12000" at port "12000".  
```  
### 13、列出对象信息、权限  
S包括系统对象  
```  
Informational  
  (options: S = show system objects, + = additional detail)  
  \d[S+]                 list tables, views, and sequences  
  \d[S+]  NAME           describe table, view, sequence, or index  
  \da[S]  [PATTERN]      list aggregates  
  \dA[+]  [PATTERN]      list access methods  
  \db[+]  [PATTERN]      list tablespaces  
  \dc[S+] [PATTERN]      list conversions  
  \dC[+]  [PATTERN]      list casts  
  \dd[S]  [PATTERN]      show object descriptions not displayed elsewhere  
  \dD[S+] [PATTERN]      list domains  
  \ddp    [PATTERN]      list default privileges  
  \dE[S+] [PATTERN]      list foreign tables  
  \det[+] [PATTERN]      list foreign tables  
  \des[+] [PATTERN]      list foreign servers  
  \deu[+] [PATTERN]      list user mappings  
  \dew[+] [PATTERN]      list foreign-data wrappers  
  \df[anptw][S+] [PATRN] list [only agg/normal/procedures/trigger/window] functions  
  \dF[+]  [PATTERN]      list text search configurations  
  \dFd[+] [PATTERN]      list text search dictionaries  
  \dFp[+] [PATTERN]      list text search parsers  
  \dFt[+] [PATTERN]      list text search templates  
  \dg[S+] [PATTERN]      list roles  
  \di[S+] [PATTERN]      list indexes  
  \dl                    list large objects, same as \lo_list  
  \dL[S+] [PATTERN]      list procedural languages  
  \dm[S+] [PATTERN]      list materialized views  
  \dn[S+] [PATTERN]      list schemas  
  \do[S]  [PATTERN]      list operators  
  \dO[S+] [PATTERN]      list collations  
  \dp     [PATTERN]      list table, view, and sequence access privileges  
  \dP[tin+] [PATTERN]    list [only table/index] partitioned relations  
  \drds [PATRN1 [PATRN2]] list per-database role settings  
  \dRp[+] [PATTERN]      list replication publications  
  \dRs[+] [PATTERN]      list replication subscriptions  
  \ds[S+] [PATTERN]      list sequences  
  \dt[S+] [PATTERN]      list tables  
  \dT[S+] [PATTERN]      list data types  
  \du[S+] [PATTERN]      list roles  
  \dv[S+] [PATTERN]      list views  
  \dx[+]  [PATTERN]      list extensions  
  \dy     [PATTERN]      list event triggers  
  \l[+]   [PATTERN]      list databases  
  \sf[+]  FUNCNAME       show a function's definition  
  \sv[+]  VIEWNAME       show a view's definition  
  \z      [PATTERN]      same as \dp  
```  
### 14、执行psql服务器上的文件  
```  
  \i FILE                execute commands from file    
  \ir FILE               as \i, but relative to location of current script     
```  
```  
postgres=# \a  
Output format is unaligned.  
postgres=# \t on  
postgres=# select format('create table abc_%s (id int);', i) from generate_series(1,10) i  
postgres-# \g '/tmp/abcd'  
postgres=# \! cat '/tmp/abcd'  
create table abc_1 (id int);  
create table abc_2 (id int);  
create table abc_3 (id int);  
create table abc_4 (id int);  
create table abc_5 (id int);  
create table abc_6 (id int);  
create table abc_7 (id int);  
create table abc_8 (id int);  
create table abc_9 (id int);  
create table abc_10 (id int);  
```  
```  
postgres=# \i '/tmp/abcd'  
CREATE TABLE  
CREATE TABLE  
CREATE TABLE  
CREATE TABLE  
CREATE TABLE  
CREATE TABLE  
CREATE TABLE  
CREATE TABLE  
CREATE TABLE  
CREATE TABLE  
postgres=# \dt  
public|abc_1|table|postgres  
public|abc_10|table|postgres  
public|abc_2|table|postgres  
public|abc_3|table|postgres  
public|abc_4|table|postgres  
public|abc_5|table|postgres  
public|abc_6|table|postgres  
public|abc_7|table|postgres  
public|abc_8|table|postgres  
public|abc_9|table|postgres  
```  
## 小结  
psql是非常强大的PostgreSQL客户端，可以极大提高数据库管理人员的管理便捷性。  
## 参考  
man psql  
#### [PostgreSQL 许愿链接](https://github.com/digoal/blog/issues/76 "269ac3d1c492e938c0191101c7238216")
您的愿望将传达给PG kernel hacker、数据库厂商等, 帮助提高数据库产品质量和功能, 说不定下一个PG版本就有您提出的功能点. 针对非常好的提议，奖励限量版PG文化衫、纪念品、贴纸、PG热门书籍等，奖品丰富，快来许愿。[开不开森](https://github.com/digoal/blog/issues/76 "269ac3d1c492e938c0191101c7238216").  
#### [9.9元购买3个月阿里云RDS PostgreSQL实例](https://www.aliyun.com/database/postgresqlactivity "57258f76c37864c6e6d23383d05714ea")
#### [PostgreSQL 解决方案集合](https://yq.aliyun.com/topic/118 "40cff096e9ed7122c512b35d8561d9c8")
#### [德哥 / digoal's github - 公益是一辈子的事.](https://github.com/digoal/blog/blob/master/README.md "22709685feb7cab07d30f30387f0a9ae")
![digoal's wechat](../pic/digoal_weixin.jpg "f7ad92eeba24523fd47a6e1a0e691b59")
#### [PolarDB 学习图谱: 训练营、培训认证、在线互动实验、解决方案、生态合作、写心得拿奖品](https://www.aliyun.com/database/openpolardb/activity "8642f60e04ed0c814bf9cb9677976bd4")
#### [购买PolarDB云服务折扣活动进行中, 55元起](https://www.aliyun.com/activity/new/polardb-yunparter?userCode=bsb3t4al "e0495c413bedacabb75ff1e880be465a")
#### [About 德哥](https://github.com/digoal/blog/blob/master/me/readme.md "a37735981e7704886ffd590565582dd0")