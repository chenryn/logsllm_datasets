4.3 Verifying Hindsight Results
Since Hindsight is the first framework of its kind, there is no other
way to verify its results than to do it manually. To this end, we have
augmented our ABB testing logic to generate an analyst-friendly,
self-contained HTML file that includes, for every (APK, ABB) tuple,
1) all the device screenshots that were generated and used while
testing the ABB on the APK, and 2) the Hindsight’s vulnerability
analysis result generated by the ABB evaluation logic.
This HTML page is reviewed manually to determine whether
a human expert would concur with the automatically-generated
vulnerability result. If not so, a check-box in the HTML file is
ticked to mark that result as “Not Accepted”. All this information
is uploaded to a server and stored in a database to keep track of
verification results. This design allowed us to efficiently review
the results of Hindsight when applied to 2,324 APKs and precisely
quantify its correctness.
For the current dataset, it took approximately 60 person-hours
to finish one round of verification. The observed error rate is 1.5%
where the ABB evaluation logic makes a wrong judgement (both
false positives and false negatives). Overall, the fraction of “Not Ac-
cepted” results is low enough to consider Hindsight results generally
dependable.
It is worth noting that such manual verification is only required
to debug Hindsight to establish the credibility of its implementation,
and does not need to be repeated every time Hindsight is used.
5 EVALUATION
Using Hindsight we tested each of the 2,324 browser APKs, belong-
ing to 128 distinct browser families, to the 27 attack building blocks
(ABBs) presented in Section 2. Out of more than 62K vulnerability
reports for different combinations of APK and ABBs, Hindsight
failed on 2,260 tests, i.e. the error rate (or more precisely, the uncer-
tainty rate) is approximately 3.6%. Note that this error rate includes
the 1.5% error rate due to false positives/false negatives discussed
in Section 4.3 as well as the cases where the framework itself knows
that there has been an error (e.g. browser crash, or inability to find
the URL bar). That covers 292 APKs or less than 12.6%, which have
at least one failed test. To account for this uncertainty we present,
where applicable, our results using a lower bound (i.e. all ABBs
marked as “Error” are, in reality, “Not Vulnerable”) and an upper
0%25%50%75%100%0510152025Number of vulnerabilitiesFraction of APKsResultsLowerboundUpperboundFigure 5: Fraction of browser APKs affected by at least one of ABBs
across five classes; whiskers denote the lower and upper bounds.
Figure 6: Fraction of browser families affected by at least one of
ABBs across five classess; whiskers denote the lower and upper
bounds.
bound (i.e. all ABBs marked as “Error” are, in reality, “Vulnerable”)
of browser vulnerability.
5.1 General Findings
Overall, using Hindsight, we found that 2,292 of the 2,324 evaluated
APKs (98.6%), were vulnerable to at least one ABB. Figure 4 shows
how the number of vulnerabilities grows with the fraction of tested
browser APKs, i.e. 50% of APKs are vulnerable to more than 12
ABBs.
To understand which classes of ABBs are more successful than
others, in Figure 5, we show the vulnerability of browsers to the five
different types of ABBs (Event Routing, URL, Address Bar, Security
Indicators, and Content). A browser APK is marked vulnerable to a
class of attacks if it is vulnerable to at least one ABB belonging to
that class. Among others, we find that even the least popular class of
ABBs (Event Routing) affects more than 25% of the tested browser
APKs, with the most popular classes (URL and content) affecting
almost 100% of the evaluated browsers. Similarly, we see that APKs
belonging to popular browsers are, in general, as vulnerable as the
rest of the browsers and that our level of uncertainty (denoted via
whiskers at the top of each bar) does not alter the observed vulner-
ability trends. Figure 6 presents the same information grouped by
browser families. A browser family is marked vulnerable to a class
of attacks if at least one of its APKs is vulnerable to at least one
ABB belonging to that class. There, we see that i) the latest versions
of browser families are as vulnerable, if not more vulnerable, than
older versions of the same browser family, ii) the relative popularity
of vulnerability classes remains the same as for distinct APKs, and
iii) certain ABBs, such as, the ones belonging to the Address Bar
class, affect less browser families than individual APKs. The differ-
ences between Figure 5 and Figure 6 are because our 2,324 APKs are
not uniformly spread in the 128 browser families, allowing different
patterns to emerge when quantifying vulnerabilities as a fraction
of browser families versus as a fraction of APKs.
5.2 Longitudinal Analysis
One of the main motivations of our research is the rapid upgrade cy-
cle of modern browsers and its effect on vulnerability reports. Most
apps, including browsers, are updated on a weekly or monthly basis
including new features and bug fixes. As such, any quantification
of security that past researchers manually obtained [2, 3, 6, 30, 32]
(a) All browsers
(b) Most popular browsers
Figure 7: Average number of vulnerabilities over the years
was already outdated by the time their research was made available
to the public. Since Hindsight is an automated, browser-agnostic
vulnerability testing framework, it allows us to, not only obtain
vulnerability reports for all latest browser apps but also, to study
the vulnerability trends through time.
Using years as our time granularity, we group APKs belonging
to the same browser family (via their package names), order them
according to their version numbers, and extract their release date
as described in Section 3.2.
Figure 7a reveals how the average number of vulnerabilities for
every browser APK varies from year to year, starting from 2011 (the
year of our oldest APK) to 2016 (the year of our most recent APKs).
0%25%50%75%100%Event routingURLAddress bar     Security indicatorsContentVulnerability class% of browser APKsBrowser Sample:OverallPopular0%25%50%75%100%Event routingURLAddress bar     Security indicatorsContentVulnerability class% of browser familiesAPK Version: Any OlderLatestllllll121314151617201120122013201420152016Year spanAvg. number of vulnerabilitiesResults:lLowerboundUpperboundllll5.07.510.012.515.017.5201120122013201420152016Year spanAvg. number of vulnerabilitieslChromeDolphinFirefoxOperaOpera MiniOverallUC BrowserTable 6: The most popular ABBs and their percentage of affected APKs and browser families per year
Top ABBs
1st
2nd
APKs
3rd
4th
5th
1st
2nd
3rd
4th
5th
Browser families
2011
2012
2013
2014
2015
2016
9 (100%)
9 (95.64%)
9 (98.81%)
25 (96.16%)
25 (96.68%)
7, 9, 10, 11, 13, 14, 15, 16, 17, 18, 19, 21, 22 (100%)
25 (97.75%)
7 (95.37%)
7 (98.42%)
9 (94.44%)
9 (93.70%)
10, 26 (96.63%)
25 (94.55%)
25 (97.43%)
7 (93.25%)
7 (93.20%)
7 (85.39%)
10 (74.93%)
22 (83.37%)
15 (76.03%)
22 (85.57%)
19 (58.42%)
26 (71.39%)
26 (78.02%)
18 (74.97%)
15, 18 (68.66%)
9 (100%)
7, 9 (100%)
7, 9 (98.15%)
9 (98.94%)
9 (100%)
7, 9, 10, 11, 13, 14, 15, 16, 17, 18, 19, 21, 22 (100%)
22 (80.95%)
26 (80.49%)
26 (74.07%)
22 (82.98%)
22 (88.31%)
10, 26 (90.48%)
10 (82.93%)
22 (77.78%)
7 (96.81%)
25 (97.40%)
7, 25 (95.24%)
25 (95.12%)
25 (96.30%)
25 (97.87%)
7 (98.70%)
21 (76.19%)
22 (78.05%)
21 (70.37%)
21 (71.28%)
21 (67.53%)
As before, we present both the lower-bound and upper-bound of
vulnerabilities to account for errors during Hindsight’s runs. There
we observe a wave-like pattern with decreases in 2012 and 2015
and increases in the remaining years. At the same time, one can see
that there was never a year with browsers affected by, on average,
less than 11 vulnerabilities and that there are more vulnerabilities
in 2016 than there were in 2011 and 2012. The large difference
between upper-bound and lower-bound in 2011 is an artifact of
unstable versions of browsers which crash often and unpredictably
combined with the small overall number of APKs for 2011.
To quantify how popular browsers are different than the rest,
in Figure 7b, we show the average number of vulnerabilities per
year for six popular browsers. There we see that, while the number
of vulnerabilities is uniform when considering all browsers at the
same time (average number of vulnerabilities ranges from 11.5 to
13.4), different browser families exhibit different trends. Firefox
has been steadily decreasing in vulnerability since 2013 whereas
families like Opera, Dolphin, and Chrome have been increasing.
UC Browser exhibits a wave-like pattern and has, on average, the
most vulnerabilities of popular browsers in 2016.
Table 6 shows the most popular ABBs for the tested APKs and
browser families from 2011 through 2016. There we can see the
evolution from 2011 where all evaluated APKs and browser families
were vulnerable to thirteen different ABBs to the remaining years
where different ABBs, such as, #7, #9 (both related to how a browser
shows a long URL) and #25 (showing mixed-content images) emerge
as the most potent ones. ABBs #7 and #9 are dangerous because
they allow attackers to masquerade their websites as belonging
to trustworthy brands, and ABB #25 can be used to steal session
cookies that are not marked with HTTPOnly [40] and use them for
session hijacking attacks [9, 36]. On a more positive note, we see
that while most browsers used to execute JavaScript originating
from a mixed inclusion from 2012 to 2014 (ABB #26), this behavior
is becoming less popular.
Lastly, Figure 8 shows how different classes of vulnerabilities
have affected mobile browsers over the years. There we see that
even though most classes have had a fairly uniform effect on
browser APKs, event routing has been increasing in popularity
since 2014. Since Hindsight treats every browser as a black box it
cannot provide us with the reason why event-routing ABBs have
become more applicable than they used to be. Through manual
investigation and experimentation we concluded that one of the
main reasons for this is a vulnerable behavior of the Chromium’s
Touch Adjustment feature used in Android’s WebView with SDK
version 23, and consequently browsers using embedded WebView
component were affected.
Figure 8: Fraction of APKs affected by at least one ABB in a class
across the years
5.3 Popularity versus Vulnerability
As described in Section 3.1, the 128 browser families evaluated in
this paper are as popular as Google Chrome with more than a billion
installations (Rank 1) and as “unpopular” as the Shark Browser with
less than 1K installations (Rank 13).
In Figure 9a, we explore the correlation between the ranking of
each APK and its vulnerability to the five classes of ABBs. There
we see that the most popular browsers are not necessarily the most
secure. In fact, we observe that browsers that are in the last three
ranks of popularity (10-13) exhibit significantly less vulnerabilities
than more popular browsers. For example, upon manual inspec-
tion of the Shark browser (located in Rank 13), we witnessed that
browser never show a page’s title and always shows the URL bar,
regardless of swiping, rotation, and page length. Because of these
design choices, the Shark browser is not vulnerable to any of the
ABBs belonging to the Address Bar class.
Figure 9b focuses on the vulnerabilities exhibited by the APKs
belonging to the six most popular browsers families. We observe
that 100% of the APKs belonging to all six families have at least one
vulnerability and Chrome and Opera exhibit similar vulnerability
patterns. Firefox appears to be the most secure of the six browsers
(confirming the time series presented earlier in Figure 7b) whereas,
next to Firefox, UC Browser and Dolphin are the only browsers not
vulnerable to the evaluated Event-Routing ABBs.
5.4 HTTPS
In recent years, HTTPS has been steadily increasing in adoption
partly because of initiatives like Let’s Encrypt which assists web-
sites in obtain free-of-charge certificates [25], search engines us-
ing HTTPS as a positive ranking signal [7], and modern desktop
llllll0%25%50%75%100%201120122013201420152016Year span% of affected APKslEvent routingURLAddress barSecurity indicatorsContent(a) Accross ranking levels
(b) Top-6 popular browsers
Figure 9: Fraction of APKs affected by at least one ABB in a class
later time. In this section we answer this question by analyzing the
evolution of vulnerability patterns for each of our 27 ABBs.
By analyzing the Yes/No results of our ABBs for each version
of a given browser family, we discovered that we can categorize
most vulnerability patterns using six patterns: i) always vulnerable
(YES), ii) always safe (NO), iii) introduction of a new vulnerability
(noYES), iv) removal of an existing vulnerability (yesNO), v) tem-
porary vulnerable (noYESno), and vi) temporary safe (yesNOyes).
Figure 11 shows the distribution of these six patterns per each ABB
number and class of vulnerabilities.
For some vulnerability classes (like Event Routing and Address
Bar), the distribution of patterns is similar across ABBs. Contrast-
ingly, for vulnerabilities belonging to the Security Indicators class,
in additions to ABBs that covary (e.g., #20 and #23), we also observe
ABBs with clearly different patterns (e.g., #21 and #22). Our find-
ings suggest that for vulnerabilities related to event routing and a
browser’s address bar, the correspondent ABBs are interconnected
and rely on a single cause (e.g. the handling of touch events and
the automatic hiding of the address bar). This is promising because,
if true, it allows for multiple attacks to be stopped by a few secure
design choices. This, however, is not true for ABBs related to Con-
tent, URL and Security indicators, meaning that each vulnerability
will likely require a different countermeasure.
Overall, on Figure 11 we observe highly undesirable, from a secu-
rity perspective, cases where YES and noYES patterns dramatically
dominate, e.g., for ABBs #7, #9, #21, #22, and #25. Moreover, we also
find cases which reveal the temporary adoption of insecure features
(noYESno) and the regression from a secure version to a less secure
one (yesNOyes). As an example of the noYESno pattern we find
that the Dolphin Browser Express was, for a number of versions,
hiding the address bar while the user was giving input. Similarly,
Opera Mini temporary showed a page’s title instead of its URL.
An example of the regression pattern (yesNOyes) is the Dolphin
browser which was temporarily showing the TLD+1 part of a do-
main when the URL was long but later reverted back to its original
insecure behavior (showing the left-most part of a URL). Similarly,
the ASUS browser temporarily stopped hiding its address bar when
a user was scrolling a long page. These patterns are clear signs of
security versus usability trade-offs, which highlights the need of
educating both browser vendors as well as users about mobile web
UI attacks and equipping them with tools, such as, Hindsight, that