ture of uEmail and authToken under the IDP’s private
key. This allows us skip generating random guesses about
whether it is possible to forge the (uEmail, authToken)
pair by the attacker. This can signiﬁcantly improve the pre-
cision, which we discussed in Section 6.
In other cases,
the exact relationship between data elements is not directly
available via whitebox analysis. For example, no client-side
code reveals whether authToken is tied to sp.com or is
the same for all SPs registered with the IDP. Our analysis
needs to infer if there is a one-to-one relation between them.
Redundant Message Elements. Numerous HTTP data el-
ements are contained in the HTTP traces, but most of them
are irrelevant to the authentication protocol. The cookie
cookie1 (line 10 in Figure 1-(c)) is one of such examples.
Including redundant element when using off-the-shelf veri-
ﬁcation tools can signiﬁcantly increase the veriﬁcation time
or even lead to a non-termination. One of the challenges for
scalability is to identify and eliminate irrelevant parameters
systematically from the traces.
2.3 AUTHSCAN Overview
To overcome these challenges, we develop a tool called
AUTHSCAN which requires no prior knowledge of the pro-
tocol. AUTHSCAN is a system that aids security analysts. It
takes the following three inputs.
• Test Harness. The security analyst provides AUTH-
SCAN with at least one implementation of the proto-
col and provides login credentials (such as username
and password) of at least two test accounts. The an-
alyst can optionally provide additional test cases in-
volving many different users and/or different partici-
pants (such as different SPs) to utilize AUTHSCAN’s
full capability—the more test cases, the more precise
is the inferred protocol.
• Protocol Principals & Public keys.
In each test
case,
the analyst speciﬁes the principals relevant
to the protocol, such as the SP, the IDP and the
user being authenticated in the running example.
In addition, AUTHSCAN takes as inputs the inter-
face APIs (web URIs) that can be queried to ob-
tain public keys of principals involved in the proto-
col. For instance, JavaScript function loadPubKey
at line 26 in the running example internally makes an
XmlHttpRequest (not shown) to retrieve the public
key of the IDP; such web interfaces need to be identi-
ﬁed by the analyst.
• Oracle. AUTHSCAN generates new protocol execu-
tions internally during testing. For each internal run
generated, AUTHSCAN needs to query a test oracle
that indicates whether authentication is successful or
not. For AUTHSCAN, this is speciﬁed as an HTTP re-
quest that AUTHSCAN can make to verify a successful
completion. In the running example, AUTHSCAN can
generate an HTTP request to access Alice’s personal
information at the IDP using authToken to check if
the protocol run succeeds.
Output. AUTHSCAN produces two outputs. First, it pro-
duces a speciﬁcation of the inferred protocol, which can act
as a starting point for a variety of manual and automatic
analysis [17]. Second, it produces a vulnerability report for
all the attacks that it ﬁnds.
Figure 2: Overview of AUTHSCAN
Conﬁgurable Options. AUTHSCAN is designed to enable
checking a variety of security properties under several dif-
ferent attacker models. Additionally, it is designed to incor-
porate domain knowledge that the security analyst is willing
to provide to improve the precision. We next explain these
conﬁgurable parameters of our system and defaults.
• Attacker Models. By default, AUTHSCAN checks for
ﬂaws against two standard attacker models:
the net-
work attacker [24] and the web attacker [15,17]. How-
ever, it is possible to extend these models with new
ones. For example, we can consider a ﬁlesystem at-
tacker which steals authorization tokens stored on the
client device. Such attacks have been found recently
on the Android DropBox application [8].
• Security Properties. By default, AUTHSCAN checks
for authentication of the inferred protocols. Check-
ing authentication corresponds to two precise, formal
deﬁnitions provided in previous work: injective corre-
spondences [32] and secrecy [44]. Additional proper-
ties can be added to AUTHSCAN.
• Cryptographic Functions Names.
AUTHSCAN
needs to infer the functions which implement crypto-
graphic primitives such as signature veriﬁcation,
hashes and so on,
in the executed client-side
JavaScript code (e.g. verify at line 27 in Fig-
ure 1-(c)). By default, AUTHSCAN performs this
automatically.
It has a built-in list of browser
APIs (such as Window.postMessage()) and pop-
ular JavaScript
libraries that provide such func-
tions (such as Node.js [4] and Mozilla jwcrypto [9]).
In addition, it has a small set of standardized crypto-
graphic primitives.
It can identify functions in the
executed client-side code that mimic the behavior of
these standardized functions using blackbox testing2.
Security analysts can improve AUTHSCAN’s preci-
sion and efﬁciency by providing additional names of
2Alternative heavy-weight methods (e.g., [43]) to identify crypto-
graphic functions using whitebox analyses are possible.
JavaScript source code functions that compute crypto-
graphic function terms.
3 AUTHSCAN System Design
In this section, we present an overview of our techniques
and introduce an intermediate language called TML to cap-
ture the full semantics of the extracted protocol.
3.1 Approach Overview
Figure 2 shows the internal design steps in our system.
AUTHSCAN performs three high-level steps: protocol ex-
traction, protocol veriﬁcation and attack conﬁrmation.
In the protocol extraction step, AUTHSCAN iteratively
processes test cases one-by-one from its input test har-
ness until the test harness is exhausted. For each test
case, it records the network HTTP(S) trafﬁc and client-side
JavaScript code execution traces through a web browser.
Using this information, AUTHSCAN generates an initial ab-
straction of the protocol speciﬁcation.
It then performs
a reﬁnement process to subsequently obtain more precise
speciﬁcations3. In each reﬁnement step, AUTHSCAN em-
ploys a hybrid inference technique which combines both
whitebox program analysis on the JavaScript code (if avail-
able) and blackbox fuzzing. The reﬁnement process stops
if a ﬁxpoint is reached (i.e., no new semantics can be in-
ferred). Our protocol extraction techniques are detailed in
Section 4.
At the end of the protocol extraction step, AUTHSCAN
generates a protocol speciﬁcation in an intermediate lan-
guage called TML, which can capture the actions exe-
cuted by each participant and the semantics of the data
exchanged in the protocol execution. AUTHSCAN con-
verts TML to applied pi-calculus, which is a widely-used
speciﬁcation language for security protocols. This proto-
col speciﬁcation then can be automatically checked using
3By precise, we mean that each reﬁnement contains more expressive
semantics about actions performed by protocol participants and more rela-
tionships between data terms exchanged in the protocol.
Protocol Extraction Trace Capturing Refinement Verification Tool Attack Message Construction Protocol Verification Probe Attack Confirmation ProVerif PAT Abstraction Initialization Model Translation Hybrid Inference Security Properties Configurable Options  Oracle Protocol Principals & Keys Test Harness Inputs Crypto Functions Attack Models  TML Model Candidate Attack Flaws Local  Trace Pool Warning AVISPA off-the-shelf veriﬁcation tools for various security prop-
erties, against different attackers.
In this work, we use
ProVerif [18] and PAT [38] as the veriﬁcation tools be-
cause they can model an unbounded number of parallel
sessions4. AUTHSCAN models various semantic restric-
tions, such as the same-origin policy, HTTP headers like
Referrer, cookies, secure channels (HTTPS, origin-
speciﬁed postMessage), and insecure channels (HTTP,
unchecked postMessages), before querying off-the-
shelf veriﬁcation tools for precise reasoning, as detailed
in [17]. Off-the-shelf veriﬁcation tools verify these secu-
rity properties and generate counterexamples which violate
the properties. The counterexamples serve as unconﬁrmed
or candidate attacks.
The last step of AUTHSCAN is attack conﬁrmation step.
In principle, our techniques can generate imprecise protocol
speciﬁcations; therefore, some of the candidate attacks may
not be true security ﬂaws. AUTHSCAN can conﬁrm HTTP
attacks by converting counterexamples into HTTP network
trafﬁc, relaying them in a live setting and conﬁrming true
positives using the analyst-speciﬁed oracle.
In the cases
where AUTHSCAN does not know the attacker’s knowledge
set enough to generate conﬁrmed attacks, it generates secu-
rity warnings containing precise communication tokens that
need to be manually reviewed by the security analyst.
3.2 Target Model Language
The semantics of our inferred authentication protocol
is represented in an abstract language called Target Model
Language (TML). TML serves as a bridge between protocol
implementations and formal models supported by veriﬁca-
tion tools. It captures enough implementation-level details
to check correctness, and at the same time, it can be trans-
lated into formal speciﬁcations that can be used as inputs to
off-the-shelf security protocol veriﬁcation tools.
We design TML based on the language proposed by
Woo and Lam [44], referred as WL model in this work;
we add new extensions which are necessary for our pro-
tocol inference. We explain the TML semantics in an intu-
itive way here to ease understanding; the terminology used
(underlined) has precise semantics as deﬁned in WL [44].
The TML representation of our running example is shown
in Figure 3.
TML Syntax. TML represents an authentication pro-
tocol as a protocol schema. AUTHSCAN observes sev-
eral concrete executions of a protocol, each of which is
an instantiation of the protocol schema—for instance, our
running example is an instantiation of our target proto-
col with two speciﬁc participants namely idp.com and
sp.com.
the protocol schema is a 2-tuple
Formally,
4In this paper, we only use ProVerif to explain our idea. Bounded-state
model checkers like AVISPA [10] can also be used but are not implemented
as backends yet.
Initial Conditions
(I1) ∀x, y : x has y
(I2) ∀x, y : x has key(x, y) ∧ y has key(x, y)
(I3) ∀x, y : x has ky
(I4) r has sessionIDr ∧ p has sessionIDr
(I5) r has CSRF T okenr ∧ p has CSRF T okenr
(I6) Z has assoc(i, authtoken)
(I7) i has kB ∧ r has kB
SP C(i) Protocol
SC1: BeginInit(j)
SC2: NewAssoc({p, i}, assoc(j, spid))
SC3: Send(r,{[assoc(j, spid), next]}kB ) // Step x
SC4: Receive(r,{[M, N, {[M, N ]}
SC5: Send(j,[M, N ]) //Step |
SC6: EndInit(j)
SP S(j) Protocol
SS1: BeginRespond(i)
SS2: Receive(i,[M, assoc(M, N )]) //Step |
SS3: EndRespond(i)
IDP C(r) Protocol
IC1: Receive(i,{X, Y }kB ) //Step x
IC2: Send(p,{{X, sessionIDr, CSRF T okenr}}key(r,p)) //Step y
IC3: Receive(p,{{M, N, P}}key(r,p))//Step z
IC4: Send(Y,{[M, N, P ]}kB )//Step {
IDP S(p) Protocol
IS1: Receive(r,{{assoc(T, U ), sessionIDr,
IS2: NewAssoc({p, j}, assoc(i, authtoken))
IS3: Send(r,{i, assoc(i, authtoken),
CSRF T okenr}}key(r,p)) //Step y
]}kB ) //Step {
−1
IDP S
k
{[i, assoc(i, authtoken)]}
}key(r,p)) //Step z
−1
IDP S
k
Figure 3: The TML model of running example in Figure 1. M, N,
P, T and U are variables. I2 and the session keys in IC2, IC3,
IS1 and IS3 model HTTPS communication. Cross domain re-
strictions by the browser’s SOP are modeled as encryption using
the key kB (initialized in I7). j and p are identities of SP and IDP
respectively, i.e., their domains. The behavior of Alice is modeled
together on SP client side, thus i stands for Alice’s uEmail which
is Alice’s identity. sessionID and CSRFToken have been in-
ferred to be nonces (I4 and I5). The authToken is inferred to
be guessable (I6).
(Init, P roSet). The P roSet is a set of local protocols
{P1(X1), P2(X2), . . . Pi(Xi)}, where each local protocol
Pi is executed by a protocol participant Xi. The local pro-
tocol speciﬁes a sequence of actions that one participant can
perform. The complete speciﬁcation is characterized by a
set of local protocols to be executed by multiple partici-
pants. Xi are variables in the schema that may be instan-
tiated by concrete principals (such as idp.com) in a pro-
tocol instance. The second part of the protocol schema is
a set of initial conditions Init, such as the initial knowledge
set of each protocol participant prior to the start of the pro-
tocol. In the TML of our running example (Figure 3), we
infer 7 initial conditions (I1-I7); we explain how these
are derived during protocol extraction in Section 4.
Actions.
the participant
executes a sequence of actions. Actions can be either
communication actions, which send/receive messages with
In executing a local protocol,
Table 1: The Action Schema in IML
BeginInit(r)
EndInit(r)
BeginRespond(i) Accept(N )
EndRespond(i)
Send(p, M )
Receive(p, M )
NewNonce(n)
NewSecret(S, n)
NewKeyPair(k, k−1)
NewAssoc(S, assoc(m1, . . . , mn) )
other participants, or internal actions which result in updat-
ing local state (or, formally the knowledge set) of that par-
ticipant. These actions are listed in Table 1. The semantics
of these actions are fairly intuitive as their names suggest,
with the exception of NewAssoc which is explained later
in this section. For example, BeginInit(r) states that an
initiator of the protocol begins its role with a responder r.
EndInit(r) states that the initiator ends the protocol with
the responder r; BeginRespond(i) and EndRespond(i)
are similarly deﬁned with i being the initiator. Send(p, M )
or Receive(p, M ) means sending or receiving M to/from