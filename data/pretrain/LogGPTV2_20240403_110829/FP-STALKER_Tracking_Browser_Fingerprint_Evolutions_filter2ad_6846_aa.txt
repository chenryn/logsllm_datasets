title:FP-STALKER: Tracking Browser Fingerprint Evolutions
author:Antoine Vastel and
Pierre Laperdrix and
Walter Rudametkin and
Romain Rouvoy
2018 IEEE Symposium on Security and Privacy
FP-STALKER:
Tracking Browser Fingerprint Evolutions
Antoine Vastel
Univ. Lille / Inria
Pierre Laperdrix
INSA / Inria
Walter Rudametkin
Univ. Lille / Inria
Romain Rouvoy
Univ. Lille / Inria / IUF
PI:EMAIL
PI:EMAIL
PI:EMAIL
PI:EMAIL
Abstract—Browser ﬁngerprinting has emerged as a technique
to track users without their consent. Unlike cookies, ﬁngerprint-
ing is a stateless technique that does not store any information
on devices, but instead exploits unique combinations of attributes
handed over freely by browsers. The uniqueness of ﬁngerprints
allows them to be used for identiﬁcation. However, browser
ﬁngerprints change over time and the effectiveness of tracking
users over longer durations has not been properly addressed.
In this paper, we show that browser ﬁngerprints tend to
change frequently—from every few hours to days—due to, for
example, software updates or conﬁguration changes. Yet, despite
these frequent changes, we show that browser ﬁngerprints can
still be linked, thus enabling long-term tracking.
FP-STALKER is an approach to link browser ﬁngerprint
evolutions. It compares ﬁngerprints to determine if they originate
from the same browser. We created two variants of FP-STALKER,
a rule-based variant that is faster, and a hybrid variant that
exploits machine learning to boost accuracy. To evaluate FP-
STALKER, we conduct an empirical study using 98, 598 ﬁnger-
prints we collected from 1, 905 distinct browser instances. We
compare our algorithm with the state of the art and show that,
on average, we can track browsers for 54.48 days, and 26 % of
browsers can be tracked for more than 100 days.
I.
INTRODUCTION
Websites track their users for different reasons, including
targeted advertising, content personalization, and security [2].
Traditionally, tracking consists in assigning unique identiﬁers
to cookies. However, recent discussions and legislation have
brought to light the privacy concerns these cookies imply;
more people are sensitive to these issues. A study conducted
by Microsoft in 2012 observed that they were unable to keep
track of 32 % of their users using only cookies, as they were
regularly deleted [26]. Cookie erasure is now common as many
browser extensions and private modes automatically delete
cookies at the end of browsing sessions.
In 2010, Eckersley introduced a tracking technique called
browser ﬁngerprinting that leverages the user’s browser and
system characteristics to generate a ﬁngerprint associated to
the browser [8]. He showed that 83.6 % of visitors to the
PANOPTICLICK website1 could be uniquely identiﬁed from
a ﬁngerprint composed of only 8 attributes. Further studies
have focused on studying new attributes that increase browser
ﬁngerprint uniqueness [7], [10], [14], [18], [19], [20], while
others have shown that websites use browser ﬁngerprinting as
a way to regenerate deleted cookies [1].
1https://panopticlick.eff.org
However, ﬁngerprint uniqueness, by itself, is insufﬁcient
for tracking because ﬁngerprints change. One needs to keep
track of these evolutions to link them to previous ﬁngerprints.
Recent approaches exploit ﬁngerprint uniqueness as a defense
mechanism by adding randomness to break uniqueness [12],
[13], [21], but they did not address linkability.
The goal of this paper is to link browser ﬁngerprint evo-
lutions and discover how long browsers can be tracked. More
precisely, FP-STALKER detects if two ﬁngerprints originate
from the same browser instance, which refers to an installation
of a browser on a device. Browser instances change over
time, e.g. they are updated or conﬁgured differently, causing
their ﬁngerprints to evolve. We introduce two variants of FP-
STALKER: a rule-based and an hybrid variant, which leverage
rules and a random forest.
We evaluate our approach using 98, 598 browser ﬁnger-
prints originating from 1, 905 browser instances, which we
collected over two years. The ﬁngerprints were collected using
two browser extensions advertised on the AmIUnique website2,
one for Firefox3 and the other for Chrome4. We compare
both variants of FP-STALKER and an implementation of the
algorithm proposed by Eckersley [8]. In our experiments, we
evaluate FP-STALKER’s ability to correctly link browser ﬁn-
gerprints originating from the same browser instance, as well
as its ability to detect ﬁngerprints that originate from unknown
browser instances. Finally, we show that FP-STALKER can
link, on average, ﬁngerprints from a given browser instance
for more than 51 days, which represents an improvement of
36 days compared to the closest algorithm from the literature.
In summary, this paper reports on four contributions:
1) We highlight the limits of browser ﬁngerprint uniqueness
for tracking purposes by showing that ﬁngerprints change
(50 % of browser instances changed their
frequently
ﬁngerprints in less than 5 days, 80 % in less than 10 days);
2) We propose two variant algorithms to link ﬁngerprints
from the same browser instance, and to detect when a
ﬁngerprint comes from an unknown browser instance;
3) We compare the accuracy of our algorithms with the
state of the art, and we study how browser ﬁngerprinting
frequency impacts tracking duration;
4) Finally, we evaluate the execution times of our algorithms,
and we discuss the impact of our ﬁndings.
2https://amiunique.org
3https://addons.mozilla.org/ﬁrefox/addon/amiunique/
4https://chrome.google.com/webstore/detail/amiunique/
pigjfndpomdldkmoaiiigpbncemhjeca
© 2018, Antoine Vastel. Under license to IEEE.
DOI 10.1109/SP.2018.00008
728
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:32:59 UTC from IEEE Xplore.  Restrictions apply. 
TABLE I: An example of a browser ﬁngerprint
Attribute
Source
Value Examples
Accept
Connection
Encoding
Headers
Languages
HTTP header
HTTP header
HTTP header
HTTP header
HTTP header
User-agent
HTTP header
text/html,application/xhtml+xml,application
/xml;q=0.9,image/webp,*/*;q=0.8
close
gzip, deﬂate, sdch, br
Connection Accept X-Real-IP DNT Cookie
Accept-Language Accept-Encoding User-Agent Host
en-US,en;q=0.8,es;q=0.6
Mozilla/5.0 (Windows NT 10.0; Win64; x64)
AppleWebKit/537.36 (KHTML, like Gecko)
Chrome/54.0.2840.99 Safari/537.36
Canvas
Cookies
Do not track
Local storage
Platform
Plugins
Resolution
Timezone
WebGL
Fonts
JavaScript
JavaScript
JavaScript
JavaScript
JavaScript
JavaScript
JavaScript
JavaScript
Javascript
Flash
yes
yes
no
MacIntel
Plugin 0: Chrome PDF Viewer; ; mhiehjai.
Plugin 1: Chrome PDF Viewer; Portable
Document Format; internal-pdf-viewer.
Plugin 2: Native Client; ; internal-nacl-plugin.
2560x1440x24
-180
NVIDIA GeForce GTX 750 Series; Microsoft
List of fonts installed on the device
.
The remainder of this paper is organized as follows.
Section II gives an overview of the state of the art. Section III
analyzes how browser ﬁngerprints evolve over time. Section IV
introduces Eckersley’s algorithm as well as both variants of
FP-STALKER. Section V reports on an empirical evaluation,
a comparison to the state of the art, and a benchmark of our
approach. Finally, we conclude in Section VI.
II. BACKGROUND & MOTIVATIONS
aims
a) Browser ﬁngerprinting:
to identify web
browsers without using stateful identiﬁers, like cookies [8]. A
browser ﬁngerprint is composed of a set of browser and system
attributes. By executing a script in the browser, sensitive meta-
data can be revealed, including the browser’s parameters, but
also operating system and hardware details. As this technique
is completely stateless, it remains hard to detect and block,
as no information is stored on the client side. Individually,
these attributes may not give away much information but,
when combined, they often form a unique signature, hence
the analogy with a ﬁngerprint. Most of the attributes in a
ﬁngerprint are collected through JavaScript APIs and HTTP
headers, but extra information can also be retrieved through
plugins like Flash. Table I illustrates a browser ﬁngerprint
collected from a Chrome browser running on Windows 10.
b) Browser ﬁngerprinting studies: have focused on
uniquely identifying browsers. Mayer [17] was the ﬁrst to point
out, in 2009, that a browser’s “quirkiness” that stems from its
conﬁguration and underlying operating system could be used
for “individual identiﬁcation”. In 2010, the PANOPTICLICK
study was the ﬁrst large-scale demonstration of browser ﬁn-
gerprinting as an identiﬁcation technique [8]. From about
half a million ﬁngerprints, Eckersley succeeded in uniquely
identifying 83.6 % of browsers. Since then, many studies have
been conducted on many different aspects of this tracking
technique. As new features are included within web browsers
to draw images, render 3D scenes or process sounds, new
attributes have been discovered to strengthen the ﬁngerprinting
process [5], [7], [9], [10], [18], [19], [20]. Additionally, re-
searchers have performed large crawls of the web that conﬁrm
729
a steady growth of browser ﬁngerprinting [1], [2], [9], [22].
While most of these studies focused on desktops, others
demonstrated they could successfully ﬁngerprint mobile device
browsers [11], [14]. Finally, a study we conducted in 2016
conﬁrmed Eckersley’s ﬁndings, but observed a notable shift in
some attributes [14]. While the lists of plugins and fonts were
the most revealing features in 2010, this has rapidly changed
as the Netscape Plugin Application Programming Interface
(NPAPI) has been deprecated in Chrome (September 2015) and
Firefox (March 2017). Browser ﬁngerprinting is continuously
adapting to evolutions in browser technologies since highly
discriminating attributes can change quickly.
c) Browser ﬁngerprinting defenses: have been designed
to counter ﬁngerprint tracking. The largest part of a browser
ﬁngerprint is obtained from the JavaScript engine. However,
the values of these attributes can be altered to mislead ﬁn-
gerprinting algorithms. Browser extensions, called spoofers,
change browser-populated values, like the User-agent or
the Platform, with pre-deﬁned ones. The goal here is to
expose values that are different from the real ones. However,
Nikiforakis et al. showed that they may be harmful as they
found that these extensions “did not account for all possible
ways of discovering the true identity of the browsers on which
they are installed” and they actually make a user “more
visible and more distinguishable from the rest of the users,
who are using their browsers without modiﬁcations” [22].
Torres et al. went a step further by providing the concept of
separation of web identities with FP-BLOCK, where a browser
ﬁngerprint is generated for each encountered domain [24].
Every time a browser connects to the same domain, it will
return the same ﬁngerprint. However, it keeps presenting the
same limitation as naive spoofers since the modiﬁed values are
incomplete and can be incoherent. Laperdrix et al. explored the
randomization of media elements, such as canvas and audio
used in ﬁngerprinting, to break ﬁngerprint linkability [12].
They add a slight random noise to canvas and audio, that is
not perceived by users, to defeat ﬁngerprinting algorithms.
Finally, the TOR browser is arguably the best overall de-
fense against ﬁngerprinting. Their strategy is to have all users
converge towards a normalized ﬁngerprint. The TOR browser
is a modiﬁed Firefox that integrates custom defenses [23].
In particular, they removed plugins, canvas image extraction
is blocked by default, and well-known attributes have been
modiﬁed to return the same information on all operating
systems. They also defend against JavaScript font enumeration
by bundling a set of default fonts with the browser. However,
using TOR can degrade the user’s experience (e.g., due to
latency) and can break some websites (e.g., due to disabled
features, websites that block the TOR network). Furthermore,
the unique browser ﬁngerprint remains limited, as changes to
the browser’s conﬁguration, or even resizing the window, can
make the browser ﬁngerprint unique.
d) Browser ﬁngerprint linkability: is only partially ad-
dressed by existing studies. Eckersley tried to identify re-
turning users on the PANOPTICLICK website with a very
simple heuristic based on string comparisons that made correct
guesses 65 % of the time [8]. Although not related to browsers,
the overall approach taken by Wu et al. to ﬁngerprint Android
smartphones from permissionless applications [25] is similar
in nature to our work. They collected a 38-attribute ﬁngerprint,
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:32:59 UTC from IEEE Xplore.  Restrictions apply. 
including the list of system packages, the storage capacity
of the device and the current ringtone. Using a naive Bayes
classiﬁer, they were able to successfully link ﬁngerprints from
the same mobile device over time. However, the nature of
the data in [25] strongly differs from the focus of this work.
In particular, the attributes in a browser ﬁngerprint are not
composed of strong identiﬁers, like the current wallpaper, and
the browser does not share personal information from other
parts of the system as do applications on Android. For these
reasons, the results are not comparable.
To the best of our knowledge, beyond the initial contribu-
tion by Eckersley, no other studies have looked into the use of
advanced techniques to link browser ﬁngerprints over time.
III. BROWSER FINGERPRINT EVOLUTIONS
This paper focuses on the linkability of browser ﬁngerprint
evolutions over time. Using ﬁngerprinting as a long-term
tracking technique requires not only obtaining unique browser
ﬁngerprints, but also linking ﬁngerprints that originate from
the same browser instance. Most of the literature has focused
on studying or increasing ﬁngerprint uniqueness [7], [8], [14].
While uniqueness is a critical property of ﬁngerprints, it is
also critical to understand ﬁngerprint evolution to build an
effective tracking technique. Our study provides more insights
into browser ﬁngerprint evolution in order to demonstrate the
effectiveness of such a tracking technique.
a) Input dataset: The raw input dataset we collected
contains 172, 285 ﬁngerprints obtained from 7, 965 different
browser instances. All browser ﬁngerprints were obtained from
AmIUnique extensions for Chrome and Firefox installed from
July 2015 to early August 2017 by participants in this study.
The extensions load a page in the background that ﬁngerprints
the browser. Compared to a ﬁngerprinting website, the only
additional information we collect is a unique identiﬁer we
generate per browser instance when the extension is installed.
This serves to establish the ground truth. Moreover, we pre-
process the raw dataset by applying the following rules:
1) We remove browser instances with less than 7 browser
ﬁngerprints. This is because to study the ability to track
browsers, we need browser instances that have been
ﬁngerprinted multiple times.
2) We discard browser instances with inconsistent ﬁnger-
prints due to the use of countermeasures that artiﬁcially
alter the ﬁngerprints. To know if a user installed such a
countermeasure, we check if the browser or OS changes
and we check that the attributes are consistent among
themselves. Although countermeasures exist in the wild,
they are used by a minority of users and, we argue,
should be treated by a separate specialized anti-spooﬁng
algorithm. We leave this task for future work.
After applying these rules, we obtain a ﬁnal dataset of