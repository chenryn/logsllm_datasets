affected by this defense.
B. Software Targets
We use four versions of cryptographic functions in
libgcrypt 1.6.3 and libgcrypt 1.8.5 as targets: EdDSA 25519,
EdDSA 25519-hardened, EdDSA 25519-secure (1.8.5 only),
RSA, and ECDSA P-256. EdDSA 25519-hardened has a
rudimentary side channel mitigation, while the side-channel
mitigation in EdDSA 25519-secure is considered state-of-the-
art. We emphasize that we are not interested in the suscepti-
bility of these algorithms to side channels per se, but rather in
showing that ABSynthe is a generic testing solution to evaluate
any such function. Next, we provide further information on
these software targets.
EdDSA 25519 Figure 5 shows a point-scalar multiplication
with secret-dependent code path. This is an elliptic curve
secret key operation, where the secret is the scalar variable.
The ABSynthe instrumentation has been automatically applied
as explained in Section VI-A. EdDSA 25519 operates on
the Curve25519 elliptic curve. A point-scalar multiplication
proceeds in a series of point doublings and additions, under
control of the secret scalar k. The doublings are unconditional,
but the additions happen only for 1-valued bits in k. As a result,
the control ﬂow can be used to infer the pattern of secret key
bits in the scalar.
EdDSA 25519-hardened This is a variant of EdDSA 25519
which explicitly mitigates against secret-dependent control
ﬂow side-channel attacks. Speciﬁcally, it performs the du-
plication and addition operations unconditionally, and only
conditionally uses the result of the addition. While not a
state-of-the-art mitigation anymore (a more secure version
is discussed next), this is an illustrative example of a side
channel mitigation that is less secure than it would seem at
ﬁrst glance. As we shall see, ABSynthe is able to detect
1Since doing this work, the authors have been made aware of the ARM
Machine Readable Architecture speciﬁcation [28], and we include a short
discussion of this limitation in Section VIII-B.
the conditional exchange with high reliability automatically,
proving the value in incorporating ABSynthe into an analysis
cycle when designing side channel mitigations. In our results,
we designate this variant ED25519-hardened.
EdDSA 25519-secure This is a variant of EdDSA 25519 with
state-of-the-art side-channel mitigations for secret-dependent
computations. This variant also does the duplication and ad-
dition operations unconditionally, and conditionally uses the
result of the addition, but without control ﬂow-level condi-
tionals. We expect ABSynthe not to be to able to synthesize
a successful attack against this target. As there is no secret
dependent control ﬂow, we manually annotate the loop with
the secret key bit being processed.
RSA We use the simpliﬁed RSA code in libgcrypt that follows
the familiar square-and-multiply pattern while processing a
secret key exponent, usually referred to as d. The squaring
is unconditional, but the multiply is conditional on a 1-bit in
d. Thus, the control ﬂow of the modular exponentiation can
be directly mapped to the secret key bits in d.
ECDSA NIST P-256 Our ﬁfth example target is also ECC
point-scalar multiplication code, but of a different type from
EdDSA 25519. The NIST P-256 curve follows a similar
multiplication procedure, but ﬁrst converts k to Non-Adjacent
Form (NAF). This is a representation where each position
can be valued 0, -1 or 1, and on average, only one third of
the digits will be non-zero. This allows a multiplication to
be evaluated with fewer point additions (and, for -1 values,
subtractions). Control ﬂow for this multiplication has 3 cases:
the k digit is 0, -1 or 1. In the case of 0, only a doubling is
performed. In the case of 1, a point doubling and addition is
performed. In the case of -1, a point doubling and subtraction.
This means that recovering the control ﬂow of a target gives
us the representation of k in NAF. If desired, it can be trivially
transformed into a binary representation. We show that this 3-
label detection case too can be done in ABSynthe with high
reliability. For more information on NAF, see [29, 30].
The target code is automatically instrumented as explained
in Section VI-A.
C. Classiﬁcation Reliability
As mentioned earlier, we use the Gaussian Naive Bayes
(GNB) classiﬁer to assess the quality of the synthesized side
channels by ABSynthe. GNB allows fast training and testing
and gives a baseline of reliability for the RNN which we use
to aid complete key recovery later. RNNs take much longer to
train and test, but they typically perform better than the GNB
classiﬁer and do not require synchronization with the target.
We design experiments to obtain contention-based mea-
surements for all instructions available on a processor. For each
instruction, we instantiate a side channel, and collect traces in
the spy program with the associated ground truth. All of this
can be parallelized and since each capture is quite short, this
one-time process just takes around an hour for each software
target and machine combination.
(a) Signal of best-performing single-instruction side channel on
the Broadwell-NIST-P256 target (no clear separation in PCA).
(b) Signal of evolved side channel (with clear separation).
(c) DE algorithm progressively ﬁnding better side channels.
Fig. 11: Raw signal processing and classiﬁcation on Intel
Broadwell, applied to the NIST P-256 target. In (a) and (b),
we use a 2-dimensional PCA to show that the DE algorithm
can better discriminate between 0 and 1 key bits than the best-
performing side-channel primitive (as evidenced by the clear
separation in the PCA plot). The bottom ﬁgure shows how DE
can progressively ﬁnd a better side channel through mixing
different side-channel primitives together.
spy are running in separate KVM instances. We collect 100
traces, give the GNB model 75 training traces (providing
empirically accurate results), and test the reliability on the
remaining 25 traces. It takes around 10 seconds to train the
model for each scenario. Furthermore, we seek to enhance
the performance of the side-channel primitives by combining
instructions using the evolutionary algorithm as discussed in
Section VI-B. We ﬁrst show the complete results for this
analysis before showing how the evolutionary algorithm can
improve the quality of the signal.
On Intel Broadwell and AMD EPYC Zen, we further
experiment with virtualized environments, where target and
The spy traces that we collect are aligned and correspond
to a small number of secret ground truth values, which are
11
02550100200signal (cycles)Raw signal, 2 capturesSecret -102550100200signal (cycles)Raw signal, 2 capturesSecret 002550100200signal (cycles)Raw signal, 2 capturesSecret 102550Time (samples)2024Normalized signal02550Time (samples)2024Normalized signal02550Time (samples)2024Normalized signal505PCA[0]42024PCA[1]PCA of processed signal,183 capturessecret -1secret 0secret 102550100150signal (cycles)Raw signal, 2 capturesSecret -102550100150signal (cycles)Raw signal, 2 capturesSecret 002550100150signal (cycles)Raw signal, 2 capturesSecret 102550Time (samples)2024Normalized signal02550Time (samples)2024Normalized signal02550Time (samples)2024Normalized signal505PCA[0]42024PCA[1]PCA of processed signal,182 capturessecret -1secret 0secret 102505007501000125015001750trial0.250.200.150.100.050.000.05f1 improvementBroadwell ED25519-hardened - 0.848 (improvement +0.053)Broadwell NIST - 0.985 (improvement +0.019)TABLE II: F1 score reliability results for best-performing primitive side channels, as well as our evolved side channels. We test
on 4 different microarchitectures (Intel Skylake, Intel Xeon Broadwell, AMD Zen and ARM Cavium Vulcan). For the x86_64
microarchitectures, we test all possible instructions and show the 4 best performing ones (Instr4, Instr3, Instr2 and Instr1, in
order). DE corresponds to our evolved side channel, which is an improvement in some cases. On ARM, we only use hand-written
side channel snippets that stress memory (e.g., loads, but no cache eviction) and ALU operations (e.g., XORs). These classiﬁers
operate on aligned signals and classify into secrets. The classiﬁer in the LSTM column operates on unaligned secrets (discussed
in Section VII-D.)
Intel Xeon Broadwell
native
native
native
native
Cross-VM (Debian Stretch)
Cross-VM (Debian Stretch)
Cross-VM (Debian Stretch)
Cross-VM (Debian Stretch)
Intel Skylake
native
native
native
native
native
native
native
native
native
native
AMD EPYC Zen+
native
native
native
native
Cross-VM (Debian Stretch)
Cross-VM (Debian Stretch)
Cross-VM (Debian Stretch)
Cross-VM (Debian Stretch)
ARM Thunder X2 Vulcan
native
native
native
native
Software Target
gcrypt 1.6.3 EDDSA 25519
gcrypt 1.6.3 EDDSA 25519-hardened
gcrypt 1.6.3 ECDSA P-256
gcrypt 1.6.3 RSA
gcrypt 1.6.3 EDDSA 25519
gcrypt 1.6.3 EDDSA 25519-hardened
gcrypt 1.6.3 ECDSA P-256
gcrypt 1.6.3 RSA
Software Target
GnuPG 2.2.17/gcrypt 1.6.3 EDDSA 25519
gcrypt 1.8.5 ECDSA P-256
gcrypt 1.8.5 EDDSA 25519
gcrypt 1.8.5 EDDSA 25519-hardened
gcrypt 1.8.5 EDDSA 25519-secure
gcrypt 1.8.5 RSA
gcrypt 1.6.3 ECDSA P-256
gcrypt 1.6.3 EDDSA 25519
gcrypt 1.6.3 EDDSA 25519-hardened
gcrypt 1.6.3 RSA
Software Target
gcrypt 1.6.3 EDDSA 25519
gcrypt 1.6.3 EDDSA 25519-hardened
gcrypt 1.6.3 ECDSA P-256
gcrypt 1.6.3 RSA
gcrypt 1.6.3 EDDSA 25519
gcrypt 1.6.3 EDDSA 25519-hardened
gcrypt 1.6.3 ECDSA P-256
gcrypt 1.6.3 RSA
Software Target
gcrypt 1.6.3 EDDSA 25519
gcrypt 1.6.3 EDDSA 25519-hardened
gcrypt 1.6.3 RSA
gcrypt 1.6.3 ECDSA P-256
Instr4 F1
0.97
0.76
0.94
0.81
0.96
0.66
0.97
0.72
Instr4 F1
0.98
0.99
0.99
0.77
0.53
0.73
0.98
0.99
0.78
0.74
Instr4 F1
0.98
0.73
0.95
0.66
0.83
0.82
0.67
0.53
Instr3 F1
0.98
0.77
0.94
0.81
0.97
0.66
0.98
0.72
Instr3 F1
0.99
0.99
0.99
0.79
0.53
0.73
0.98
0.99
0.78
0.74
Instr3 F1
0.98
0.73
0.95
0.67
0.84
0.83
0.67
0.53
Instr2 F1
0.98
0.79
0.94
0.83
0.98
0.68
0.98
0.73
Instr2 F1
0.99
0.99
0.99
0.79
0.53
0.73
0.98
0.99
0.80
0.75
Instr2 F1
0.98
0.74
0.95
0.68
0.84
0.83
0.68
0.56
ALU F1
0.79
0.51
0.51
0.77
Instr1 F1
0.98
0.79
0.97
0.88
0.99
0.68
0.98
0.80
Instr1 F1
0.99
1.00
0.99
0.81
0.53
0.74
0.98
0.99
0.81
0.76
Instr1 F1
0.98
0.74
0.95
0.68
0.86
0.89
0.70
0.57
LOADS F1
0.74
0.52
0.43
0.33
DE F1
0.98
0.84
0.97
0.88
0.99
0.70
0.98
0.80
DE F1
1.00
1.00
1.00
0.90
0.53
0.82
0.99
1.00
0.91
0.79
DE F1
0.99
0.85
0.96
0.75
0.86
0.89