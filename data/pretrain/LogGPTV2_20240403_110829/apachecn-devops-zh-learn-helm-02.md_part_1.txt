# 二、准备 Kubernetes 和 Helm 环境
Helm 是一款工具，提供了多种优势，帮助用户更轻松地部署和管理 Kubernetes 应用。然而，在用户开始体验这些好处之前，他们必须满足几个先决条件。首先，用户必须能够访问 Kubernetes 集群。接下来，用户应该同时拥有 Kubernetes 和 Helm 的命令行工具。最后，用户应该了解 Helm 的基本配置选项，以便在尽可能少摩擦的情况下提高工作效率。
在本章中，我们将概述开始使用 Helm 所需的工具和概念。本章将涵盖以下主题:
*   使用 Minikube 准备本地 Kubernetes 环境
*   设置`kubectl`
*   设置头盔
*   配置头盔
# 技术要求
在本章中，您将在本地工作站上安装以下技术:
*   迷你库比
*   VirtualBox(虚拟方块)
*   舵
这些工具可以通过软件包管理器安装，也可以直接从下载链接下载。我们将提供在 Windows 上使用`Chocolatey`包管理器、在 macOS 上使用`Homebrew`包管理器、在基于 Debian 的 Linux 发行版中使用`apt-get`包管理器以及在基于 RPM 的 Linux 发行版中使用`dnf`包管理器的说明。
# 用 Minikube 准备本地 Kubernetes 环境
如果不能访问 Kubernetes 集群，Helm 将无法部署应用。为此，我们来讨论一个选项，用户可以在自己的机器上运行自己的集群——Minikube。
Minikube 是一个社区驱动的工具，允许用户轻松地将一个小的单节点 Kubernetes 集群部署到他们的本地机器上。使用 Minikube 创建的集群是在一个**虚拟机** ( **虚拟机**)中创建的，因此它可以被创建，然后以一种与运行该虚拟机的主机操作系统隔离的方式被丢弃。Minikube 为 Kubernetes 提供了一个很好的实验方法，它也可以用来学习如何使用 Helm 以及本书中提供的例子。
在接下来的几节中，我们将介绍如何安装和配置 Minikube，以便您在学习如何使用 Helm 时有一个可用的 Kubernetes 集群。有关更全面的说明，请参考 https://minikube.sigs.k8s.io/docs/s 官方 Minikube web sit[e](https://minikube.sigs.k8s.io/docs/start/)tart/的*入门*页面。
## 安装 Minikube
Minikube 和本章中将要安装的其他工具一样，拥有为 Windows、macOS 和 Linux 操作系统编译的二进制文件。在 Windows 和 macOS 上安装最新版本 Minikube 最简单的方法就是通过包管理器，比如 Windows 的`Chocolatey`和 macOS 的`Homebrew`。
Linux 用户将发现通过从 Minikube 的 GitHub 发行版页面下载最新的`minikube`二进制文件更容易安装，尽管这种方法也可以在 Windows 和 macOS 上使用。
以下步骤描述了如何根据您的机器和安装首选项安装 Minikube。请注意，Minikube v 1 . 5 . 2 版是在编写和开发本书中使用的示例时使用的。
要通过软件包管理器安装它(在 Windows 和 macOS 上)，请执行以下操作:
*   对窗口使用以下命令:
    ```
    > choco install minikube
    ```
*   对 macOS 使用以下命令:
    ```
    $ brew install minikube
    ```
以下步骤向您展示了如何通过下载链接安装它(在 Windows、macOS 和 Linux 上)。
`Minikube`二进制文件可以直接从 https://github.com/kubernetes/minikube/reGit[中心的发布页面下载/租赁:](https://github.com/kubernetes/minikube/releases/tag/v1.5.2)
1.  At the bottom of the releases page, there is a section called *Assets*, which consists of the Minikube binaries available for the various supported platforms:
    ![Figure 2.1: The Minikube binaries from the GitHub releases page ](img/Figure_2.1.jpg)
    图 2.1:GitHub 发行版页面中的 minikube 二进制文件
2.  在**资产**部分，应该下载与目标平台对应的二进制文件。下载完成后，应该将二进制文件重命名为`minikube`。例如，如果您正在下载 Linux 二进制文件，您将运行以下命令:
    ```
    $ mv minikube-linux-amd64 minikube
    ```
3.  为了执行`minikube`，Linux 和 macOS 用户可能需要通过运行`chmod`命令来添加可执行位:
    ```
    $ chmod u+x
    ```
4.  `minikube`然后应该被移动到由`PATH`变量管理的位置，这样它就可以在命令行的任何位置执行。 `PATH`变量包含的位置因您的操作系统而异。对于 macOS 和 Linux 用户，可以通过在终端中运行以下命令来确定这些位置:
    ```
    $ echo $PATH
    ```
5.  Windows 用户可以通过在命令提示符或 PowerShell 中运行以下命令来确定`PATH`变量的位置:
    ```
    > $env:PATH
    ```
6.  然后，您可以使用`mv`命令将`minikube`二进制文件移动到新位置。以下示例将`minikube`移动到 Linux 上一个常见的`PATH`位置:
    ```
    $ mv minikube /usr/local/bin/
    ```
7.  您可以通过运行`minikube version`并确保显示的版本与下载的版本一致来验证您的 Minikube 安装:
    ```
    $ minikube version
    minikube version: v1.5.2
    commit: 792dbf92a1de583fcee76f8791cff12e0c9440ad-dirty
    ```
虽然您已经下载了 Minikube，但您还需要一个虚拟机管理程序来运行您的本地 Kubernetes 集群。这可以通过安装 VirtualBox 来实现，我们将在下一节中描述。
## 安装虚拟盒子
Minikube 依赖于虚拟机管理程序的存在，以便在虚拟机上安装单节点 Kubernetes 集群。在本书中，我们选择讨论 VirtualBox 作为虚拟机管理程序选项，因为它是最灵活的，并且在 Windows、macOS 和 Linux 操作系统上可用。每个操作系统的附加虚拟机管理程序选项可以在 https://minikube.sigs.k8s.io/docs/start/的官方 Minikube 文档中找到。
与 Minikube 一样，VirtualBox 可以通过 Chocolatey 或 Homebrew 轻松安装，但也可以使用基于 Debian 的 Linux 的`apt-get`和基于 RPM/RHEL 的 Linux 的`dnf`轻松安装:
*   使用以下代码在 Windows 上安装 VirtualBox:
    ```
    > choco install virtualbox
    ```
*   使用以下代码在 macOS 上安装 VirtualBox:
    ```
    $ brew cask install virtualbox
    ```
*   使用以下代码在基于 Debian 的 Linux 上安装 VirtualBox:
    ```
    $ apt-get install virtualbox
    ```
*   使用以下代码在基于 RHEL 的 Linux 上安装 VirtualBox:
    ```
    $ dnf install VirtualBox
    ```
安装 VirtualBox 的替代方法可以在 https://www.virtualbox.org/wiki/Downloads 的官方下载页面[找到。](https://www.virtualbox.org/wiki/Downloads)
安装 VirtualBox 后，Minikube 必须配置为利用 VirtualBox 作为其默认虚拟机管理程序。这种配置将在下一节中进行。
## 将 VirtualBox 配置为指定的虚拟机管理程序
通过将`minikube`的`vm-driver`选项设置为`virtualbox`，VirtualBox 可以成为默认虚拟机管理程序:
```
$ minikube config set vm-driver virtualbox
```
请注意，此命令可能会产生以下警告:
```
These changes will take effect upon a minikube delete and then a minikube start
```
如果工作站上没有活动的 Minikube 集群，可以安全地忽略此消息。该命令指出，在删除并重新创建集群之前，任何现有的 Kubernetes 集群都不会将 VirtualBox 用作虚拟机管理程序。
对 VirtualBox 的更改可以通过评估`vm-driver`配置选项的值来确认:
```
$ minikube config get vm-driver
```
如果一切正常，输出如下:
```
Virtualbox
```
除了配置默认虚拟机管理程序，您还可以配置分配给 Minikube 集群的资源，这将在下一节中讨论。
## 配置 Minikube 资源分配
默认情况下，Minikube 将为其虚拟机分配两个 CPU 和 2 GB 内存。这些资源对于本书中的每一个例子来说都是足够的，除了 [*第七章*](07.html#_idTextAnchor335) 中的那些资源更密集。如果您的机器有可用资源，您应该将默认内存分配增加到 4gb(CPU 分配可以保持不变)。
运行以下命令，将新 Minikube 虚拟机的默认内存分配增加到 4 GB (4000 MB)。
```
$ minikube config set memory 4000
```
这种变化可以通过运行`minikube config get memory`命令来验证，类似于之前验证`vm-driver`变化的方式。
让我们通过讨论 Minikube 的基本用法来继续探索 Minikube。
## 探索基本用法
在本书中，理解典型的 Minikube 操作中使用的关键命令将非常方便。在执行本书过程中提供的例子时，理解它们也是必不可少的。幸运的是，Minikube 是一个很容易上手的工具。
Minikube 有三个关键子命令:
*   `start`
*   `stop`
*   `delete`
`start`子命令用于创建单节点 Kubernetes 集群。它将创建一个虚拟机，并在其中引导集群。一旦群集准备就绪，该命令将终止:
```
$ minikube start
 minikube v1.5.2 on Fedora 30
  Creating virtualbox VM (CPUs=2, Memory=4000MB, Disk=20000MB) ...
  Preparing Kubernetes v1.16.2 on Docker '18.09.9' ...
  Pulling images ...
  Launching Kubernetes ...
  Waiting for: apiserver
  Done! kubectl is now configured to use 'minikube'
```
`stop`子命令用于关闭集群和虚拟机。集群和虚拟机的状态保存到磁盘，用户可以再次运行`start`子命令快速开始工作，而不必从头构建新的虚拟机。当您处理完一个稍后要返回的集群时，您应该尝试养成运行`minikube stop`的习惯:
```
$ minikube stop
  Stopping 'minikube' in virtualbox ...
  'minikube' stopped.
```