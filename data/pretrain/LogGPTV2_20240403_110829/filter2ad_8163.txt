## Bug Bounty: 3000美元赏金 - 在Tokopedia中绕过两个XSS过滤器

为了便于阅读，附件中提供了漏洞挖掘的视频。

在Tokopedia中，我成功绕过了两个XSS过滤器，并发现了一个反射型XSS漏洞。

### TL;DR
Tokopedia平台有一个XSS过滤器，如果GET请求包含某些字符，该过滤器会编码参数。通过将关闭标签拆分为两个不同的参数，可以绕过此过滤器。

### 之前的漏洞
早在2018年5月，我在Tokopedia平台上发现了一个简单的反射型XSS漏洞，存在于JavaScript上下文中。我向Tokopedia安全团队报告了这一问题，但他们回复说这是一个重复报告。当时我没有进一步检查这个漏洞是否已被修复。

今年3月，我在浏览旧邮件时找到了当时的报告。我重新测试了这个漏洞，最终在同一页面上再次发现了它。

### 标签过滤
当你在Tokopedia平台上搜索火车票时，会被重定向到如下URL：
```
https://tiket.tokopedia.com/kereta-api/search/Jakarta-Gambir-GMR/Bandung-Bandung-BD?adult=1&infant=0&trip=departure&dep_date=16-09-2019&ori=GMR&dest=BD
```

所有GET参数都被存储在JavaScript变量`dataJs.query`中。由于这些参数位于JavaScript上下文中，要触发XSS攻击，必须执行以下步骤：

1. **绕过JavaScript：** 插入一个`</script>`标签。这会使HTML解析器错误地关闭当前上下文，并开始新的脚本内容。
2. **绕过JavaScript变量中的`dataJs.query`：** 插入一个`"}; alert(1); //`字符串。这将导致JavaScript解析器关闭变量并直接执行我们的受控脚本，忽略其余部分。

在我的早期报告中，我使用了第一种方法。服务器没有对危险字符（如`</script>`）进行编码。有趣的是，服务器也没有对`ori`和`dest`参数进行编码。如果在这两个参数中插入`</script>`会发生什么呢？

显然，服务器确实清理了参数，但仅当`</script>`出现在同一个参数中时才会生效。

### 绕过过滤器
我查阅了一些XSS负载，并找到了一种方法：使用`//`代替`>`来关闭标签。我们来试试看。

**结果：**
Chrome抛出了一个错误：`Uncaught SyntaxError: Invalid or unexpected token`。这表明我们在正确的方向上取得了进展。接着，我尝试插入XSS负载，但它不起作用，因为JavaScript解析器不将其视为结束标记。

然后，我更改了XSS负载，并找到了`<\u002fscript>`。我们知道，在同一参数中插入`</script>`会被编码。但如果我们将`</script>`拆分到不同的参数（例如`ori`和`dest`）呢？在这种情况下，它们之间会有其他字符。这仍然是一个有效的结束标签吗？

**结果：**
事实证明，这是一种有效的方法！Chrome的XSS审核工具屏蔽了该页面，表明存在反射型XSS。我在Firefox上进行了测试，确认其有效。

这是我使用的完整负载：
```
https://tiket.tokopedia.com/kereta-api/search/Jakarta-Gambir-GMR/Bandung-Bandung-BD?dep_date=26-06-2019&adult=1&infant=0&trip=departure&ori=<\u002fscript>&dest=>alert(1)<\u002fscript>
```

### 时间线
- 2019年3月28日：向Tokopedia安全团队报告了漏洞。
- 2019年4月8日：发送了一封后续电子邮件。该漏洞已得到修复，报告的严重性也很高。
- 2019年6月11日：Tokopedia奖励IDR 3,000,000，并颁发证书。