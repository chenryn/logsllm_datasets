title:RevARM: A Platform-Agnostic ARM Binary Rewriter for Security Applications
author:Taegyu Kim and
Chung Hwan Kim and
Hongjun Choi and
Yonghwi Kwon and
Brendan Saltaformaggio and
Xiangyu Zhang and
Dongyan Xu
RevARM: A Platform-Agnostic ARM Binary Rewriter
Taegyu Kim
Purdue University
PI:EMAIL
for Security Applications
Chung Hwan Kim
Hongjun Choi
Purdue University
NEC Laboratories America
PI:EMAIL
PI:EMAIL
Yonghwi Kwon
Purdue University
PI:EMAIL
Brendan Saltaformaggio
Georgia Institute of Technology
PI:EMAIL
Xiangyu Zhang
Purdue University
PI:EMAIL
Dongyan Xu
Purdue University
PI:EMAIL
ABSTRACT
ARM is the leading processor architecture in the emerging mobile
and embedded market. Unfortunately, there has been a myriad
of security issues on both mobile and embedded systems. While
many countermeasures of such security issues have been proposed
in recent years, a majority of applications still cannot be patched
or protected due to run-time and space overhead constraints and
the unavailability of source code. More importantly, the rapidly
evolving mobile and embedded market makes any platform-specific
solution ineffective. In this paper, we propose RevARM, a binary
rewriting technique capable of instrumenting ARM-based binaries
without limitation on the target platform. Unlike many previous bi-
nary instrumentation tools that are designed to instrument binaries
based on x86, RevARM must resolve a number of new, ARM-specific
binary rewriting challenges. Moreover, RevARM is able to handle
stripped binaries, requires no symbolic/semantic information, and
supports Mach-O binaries, overcoming the limitations of existing
approaches. Finally, we demonstrate the capabilities of RevARM in
solving real-world security challenges. Our evaluation results across
a variety of platforms, including popular mobile and embedded sys-
tems, show that RevARM is highly effective in instrumenting ARM
binaries with an average of 3.2% run-time and 1.3% space overhead.
ACM Reference Format:
Taegyu Kim, Chung Hwan Kim, Hongjun Choi, Yonghwi Kwon, Bren-
dan Saltaformaggio, Xiangyu Zhang, and Dongyan Xu. 2017. RevARM:
A Platform-Agnostic ARM Binary Rewriter for Security Applications. In
Proceedings of ACSAC 2017. ACM, New York, NY, USA, 13 pages. https:
//doi.org/10.1145/3134600.3134627
1 INTRODUCTION
ARM is the de facto standard for a variety of mobile and embedded
platforms — including smartphones and tablet computers, the “In-
ternet of Things” (IoT) devices, unmanned aerial vehicles (UAVs),
and other robotic vehicle systems. Unfortunately, as ARM-based
systems gain popularity, security threats to these systems have also
Permission to make digital or hard copies of all or part of this work for personal or
classroom use is granted without fee provided that copies are not made or distributed
for profit or commercial advantage and that copies bear this notice and the full citation
on the first page. Copyrights for components of this work owned by others than ACM
must be honored. Abstracting with credit is permitted. To copy otherwise, or republish,
to post on servers or to redistribute to lists, requires prior specific permission and/or a
fee. Request permissions from permissions@acm.org.
ACSAC 2017, December 4–8, 2017, San Juan, PR, USA
© 2017 Association for Computing Machinery.
ACM ISBN 978-1-4503-5345-8/17/12...$15.00
https://doi.org/10.1145/3134600.3134627
increased significantly. Many severe security vulnerabilities have
been exposed recently in both mobile devices and embedded devices.
For example, popular mobile platforms have experienced private
information leaks through private API abuse [19, 63], many IoT
devices have been exploited by malicious attackers for the invasion
of victims’ privacy [15, 17], and more importantly, compromised
UAVs threaten privacy, financial loss, and even human lives [4].
These incidents happen mainly because many ARM-based devices
remain unpatched and vulnerable to malicious attacks [28, 33].
Considering a large number of such applications on ARM-based
platforms are not open-source, a precise ARM binary rewriting
technique is highly desired. For example, most apps for iOS and
Android smartphones and tablets are closed-source. App developers
submit only the binary files of the apps to the marketplaces and
even the distributors (e.g., Google and Apple) do not have access
to the source code. While the submitted binary files go through
the vendor’s vetting process for security, privacy, and reliability, it
has been shown that such vetting processes can be easily tricked
by attackers [42]. Besides mobile applications, embedded systems
also commonly deploy only closed-source binaries. A few examples
include flight controller software for UAVs [11], IoT devices [21],
and robotic vehicles [32]. Security challenges in such binary-only
software can all be resolved with an accurate and practical binary
rewriting technique. For example, during the existing app vetting
process, one can instrument function calls in order to prevent the
use of private APIs, which has been reported as a major threat
in iOS platforms [42]. Such a binary rewriting technique is also
much in demand by embedded systems. For instance, S.F. Express
(one of China’s leading logistics providers) has recently adopted
UAVs for package delivery [10]. However, their UAVs run closed-
source embedded software [11], and attackers have already found
ways to hijack UAVs [9]. Consequently, it is highly desirable for
service providers to be able to secure their software through binary
rewriting techniques that are ready to be deployed in such cases.
Unfortunately, despite the pressing need for a highly effective
ARM binary rewriting technique, existing techniques have several
limitations. Dynamic analysis techniques incur large run-time and
space overhead which often leads to high energy consumption. They
are hardly deployed due to the nature of resource-scarce embedded
system environments. Moreover, many existing dynamic analysis
techniques [37, 40, 45, 50, 51] do not support non-rooted mobile
devices, hence limiting their applicability. Many static binary instru-
mentation techniques cannot instrument stripped binaries which
Table 1: Comparison of static binary rewriting techniques
for stripped binaries. I: Fine-grained instrumentation at
arbitrary locations, MP: Multiple platform support, LSB:
Large-scale binary support, RO: Run-time overhead, SO:
Space overhead.
BISTRO [43]
Uroboros [62]
SecondWrite (2011) [52]
SecondWrite (2013) [34]
Dyninst [39]
Pebil [49]
REINS [65]
PSI [68]
RevARM
LSB
✓
✓
I MP
✗
✓
✓
✗
Target
x86
x86
LLVM ✓ ✓ ✗ [2, 61, 65]
LLVM ✓ ✓
x86
✓
x86
✗
x86
✗
x86
✗
ARM ✓ ✓
✗ [2, 61]
✓
✓
✓
✓
✓
✗
✗
✓
✓
RO
SO
Medium Medium
Low
Low
Low
High
Medium
Low
High
Low
Low
High
High
High
High
High
High
Low
Table 2: Differences between the ARM and x86 architectures.
Branch instructions
Program counter
Instruction modes
Instruction lengths
* These instructions are unique in ARM.
ARM
B, BL, BLX, IT*, TBB*, TBH*, etc
Readable and writable
ARM and Thumb modes
Fixed (16 or 32 bits)
x86
CALL, JMP, JE, etc
Not directly accessible
-
Variable lengths
do not have symbolic or relocation information [41, 44, 54, 55]. Fur-
ther, most instrumentation techniques are incapable of supporting
ARM binaries, instrumenting any instruction at arbitrary locations,
or providing platform-agnostic instrumentation. We summarize the
limitations of the existing techniques in Table 1.
To overcome the above issues, we propose RevARM, a platform-
agnostic ARM-based binary rewriting technique for security appli-
cations. Unlike existing trampoline-based approaches which intro-
duce additional control flow to the instrumented program (leading
to a large overhead), RevARM leverages an insertion/replacement-
based approach (“insertion-based” for short) which inserts and
replaces ARM instructions with negligible run-time and space over-
head. Further, our insertion-based approach enables fine-grained
instrumentation at arbitrary binary locations. This capability en-
ables powerful security applications that other approaches are not
able to support, such as instruction-level code diversification and
advanced software fault isolation (SFI) enforcement [56, 67] which
we demonstrated in §4.
To enable insertion-based ARM binary instrumentation, RevARM
addresses a number of challenges unique to the ARM architecture,
which prior work in x86 binary rewriting did not encounter/handle.
Based on our thorough analysis of ARM and x86, we found several
fundamental differences between the two architectures, summa-
rized in Table 2. These differences motivated our design of RevARM
to overcome four key challenges unique to ARM binary rewriting:
(1) the If-Then instruction, (2) branch table instructions, (3) direct ac-
cess to the program counter (PC), and (4) run-time instruction mode
switching. Further, RevARM supports both Mach-O and stripped
ARM-based binaries, which cover a majority of ARM-based mobile
and embedded platforms.
In summary, the contributions of this paper are as follows:
• We present the design and implementation of the RevARM tech-
nique. To the best of our knowledge, RevARM is the first fine-
grained platform-agnostic ARM binary rewriting technique that
is able to instrument instructions at arbitrary binary locations.
• We introduce a number of previously-unresolved, ARM-specific
challenges that must be addressed to enable insertion-based ARM
binary rewriting, and show how RevARM overcomes these chal-
lenges in detail.
• We demonstrate the effectiveness of RevARM in security applica-
tions through a number of case studies: inserting NOP instructions
for code diversification, patching vulnerable functions using ex-
tracted function binary code, preventing private API abuses in
iOS with SFI, and fine-grained run-time status monitoring of a
UAV control system. Our evaluation results show that RevARM
introduces only negligible run-time and space overhead while
providing powerful ARM binary rewriting capabilities.
2 BACKGROUND AND MOTIVATION
In general, binary instrumentation techniques can be categorized
into two groups: trampoline-based and insertion-based. Trampoline-
based instrumentation can be further divided into detour-based
and patch-based. In this section, we discuss why we chose to use
insertion-based instrumentation.
Detour-based Instrumentation: Detour-based instrumentation
techniques, such as Dyninst [39], Etch [54], and Detours [45], over-
write original instructions at a target instrumentation point with a
branch instruction. Whenever the branch instruction is executed,
it passes control to a newly inserted instruction block, called a
trampoline. Trampolines contain both the added instrumentation
logic and the original instructions overwritten by the branch in-
struction. This approach introduces new control flows to and from
the trampoline, which incur run-time overhead and space overhead
(for the inserted trampoline and control transfer code).
Further, there are corner cases that detour-based instrumentation
cannot handle, hence the correctness of the instrumented program
cannot be guaranteed. Fig. 1 shows an example case which detour-
based instrumentation cannot correctly handle. In this example, the
binary code represents a switch statement in C with four switch
cases (case 0-2 and default). The value of R2 determines which
case will be selected. The goal of the instrumentation is to limit the
range of memory addresses for the LDR instruction in case 0. As
described in Fig. 1a, BIC is inserted to limit the range of R5 — which
the load instruction takes as an operand. A detour-based instrumen-
tation creates a trampoline (Tramp) and overwrites two original
instructions (the LDR instructions) with a branch instruction (B.W
Tramp). The trampoline contains the added instruction (BIC) and
the two original instructions. The branch instruction at the end
(B.W 0x8E6C) of the trampoline ensures that the rest of the original
program is executed after the trampoline. It is important that a
long-range branch instruction (four bytes) is used here because the
location of the trampoline can be far from the target instrumenta-
tion point. However, this violates the correctness of the program
since the original instructions may span multiple basic blocks. As
described in Fig. 1b, there is a control flow from the switch table to
case 1. In this case, the switch table does not know that case 1
(a) Before instrumentation.
(b) Detour-based approach.
(c) Our approach.
Figure 1: Comparison between detour-based instrumentation and our approach.
was also moved to the trampoline, and thus the program will show
unexpected behavior.
Patch-based Instrumentation: Patch-based approaches [49, 64]
duplicate the target code to a new location. The instrumentation is
then applied to the duplicated code but not the original code. The
original code is modified to pass control to the duplicated code. The
aforementioned problem of detour-based instrumentation is solved
in this approach since new control flows are introduced while pre-
serving the original instructions. However, introduced control flows
leads to large run-time overhead. Further, this approach introduces
large space overhead for the duplicated code.
Our Approach: RevARM leverages insertion-based instrumenta-
tion, which directly inserts new instructions into target instrumen-
tation points without creating a trampoline or new control flow
transitions. In comparison with the two other approaches, RevARM
enables fine-grained instrumentation. In other words, RevARM nei-
ther introduces complex control flow transitions that can jeopardize
program stability (like trampoline-based instrumentation) nor du-
plicates original code which introduces large space overhead (like
patch-based instrumentation). Instead, RevARM stretches the target
binary to create slots for the new instructions to be inserted while
preserving the control flow. For example, inserting target instruc-