nouncement. We then made sure to request a certiﬁcate
from a CA located in the hijacked section of the Inter-
net. We repeated this process with and without origin
AS prepending. Similar to the case above, we obtained a
certiﬁcate without needing access to the victim’s server.
3.2.3 AS-Path Poisoning and Trafﬁc Interception
We launched an AS-path poisoning attack and tested the
capability of these attacks to perform interception of en-
crypted trafﬁc. We ﬁrst observed the AS path and next
hop of the route used by the mux at the Amsterdam In-
ternet Exchange for the victim’s preﬁx. Next, we set up a
static route to forward all trafﬁc destined to the victim’s
preﬁx to the next hop we had recorded (the only trafﬁc
that did not match this rule was trafﬁc from the IP used
by a CA for domain control veriﬁcation).
We then made a route announcement for a sub-preﬁx
(that contained the victim’s domain) with every AS be-
tween the adversary and the victim prepended to the AS
path. Because the announcement was for a sub-preﬁx,
all ASes routed trafﬁc to the adversary with the excep-
tion of the ASes between the adversary and the victim
(which did not adopt the announcement because of loop
prevention). Since the ASes between the victim and the
adversary did not adopt the malicious announcement, the
static route we conﬁgured to the victim allowed the ad-
versary to properly forward all of the trafﬁc to the victim
and cause no effect on global connectivity.
With trafﬁc forwarding in place, we approached a CA
and requested a certiﬁcate. The trafﬁc from the CA’s
server was not forwarded to the victim and was instead
answered by the adversary’s server, allowing us to ob-
tain a trusted TLS certiﬁcate with no impact on the vic-
tim’s connectivity. We then deployed this certiﬁcate to a
web server run by the adversary. Finally, we removed the
routing rule for trafﬁc forwarding to the victim and an-
swered HTTPS requests using the adversary’s web server
Let’s
Encrypt
35s
GoDaddy Comodo
Symantec GlobalSign
<10min
51s
6min
4min
No
No3
No
No
No
No
No
No
No
No
HTTP
HTTP
Email
Email
Email
certiﬁcate
Human
Interaction
Multiple
Vantage
Points
Time to
issue
Validation
Method
Attacked
Table 3: The 5 CAs we attacked and obtained certiﬁcates
from. We found that all CAs were automated and none
had any defenses against BGP attacks.
and trusted certiﬁcate. To measure the effect of this at-
tack on real users, we simulated an innocuous user of the
victim’s domain by continually running HTTPS AJAX
calls to the victim’s domain. We observed that with no
interruption in connectivity, the AJAX calls went from
being securely sent to the victim’s server to being read
by the adversary. We were able to execute this attack
in as little as 35 seconds (from BGP announcement to
HTTPS trafﬁc decryption).
3.3 Certiﬁcate Authorities Attacked
In addition to the variety of BGP attacks used, we also as-
sessed the vulnerability of various CAs to the use of these
BGP attacks to obtain bogus certiﬁcates. Table 3 lists
the CAs we approached for certiﬁcates. For each CA,
we launched a sub-preﬁx hijack attack against a victim’s
HTTP server (for HTTP veriﬁcation) or Email server (for
email veriﬁcation) depending on the veriﬁcation method
preferred by the CA. Since the sub-preﬁx hijack attack
is the most detectable attack, if a CA does not notice
such an attack and signs a certiﬁcate, it must have no
BGP defense in place and thus will not be able to detect
any more advanced attacks.1 We also recorded the rele-
vant server logs to see if CAs had fetched the relevant re-
sources on our servers from multiple IP addresses (indi-
cating deployment of multiple vantage points). No CAs
had such a countermeasure in place. We also noted the
speed that each CA issued a certiﬁcate. All CAs signed
our requests with no direct human interaction,2 allow-
ing for an adversary to obtain a certiﬁcate very rapidly.
Since our experiment, Let’s Encrypt has deployed one of
our suggested countermeasures.
1As noted in Section 3.2.2 and Section 3.2.3, we also performed
BGP equally-speciﬁc-preﬁx attacks and AS-Path poisoning attacks
against a chosen CA (and not against all CAs).
2The longer delay from several CAs is due to the time it took us to
manually request certiﬁcates from those CAs through web interfaces.
3No vantage points were deployed at time of attack. Let’s Encrypt
has since implemented multiple vantage point veriﬁcation in their stag-
ing environment, where it is being tested before full release.
USENIX Association
27th USENIX Security Symposium    839
3.4 Attacks on Victim DNS
In addition to spooﬁng HTTP/Email domain veriﬁca-
tion by hijacking the victim’s HTTP/Email servers, we
launched attacks targeting the victim’s DNS server. Once
we had captured trafﬁc to the victim’s authoritative DNS
server, we ran an adversarial DNS server conﬁgured to
give a fake response for the A records associated with
the victim’s domain. When the CA performed a DNS
lookup required for HTTP/Email veriﬁcation, our adver-
sarial DNS server responded with the IP of the adver-
sary’s server. The CA then sent the HTTP request/Email
to the adversary’s server instead of the victim’s server.
3.5 Ethical Considerations
While performing these experiments, we made sure
to not harm or interfere with the operations of real
users or real web sites by following three important
guidelines: 1) We only requested certiﬁcates for domains
we registered strictly for the purpose of this experiment.
Thus, these domains had no real users, and no users
were affected when we obtained certiﬁcates for these
domains. 2) We only made BGP announcements for IP
preﬁxes that were allocated to us through the PEERING
testbed, and all BGP announcements were originated by
an AS belonging to the PEERING testbed. Thus, our
experiment did not affect any other Internet trafﬁc. 3)
We did not generate any network trafﬁc with a source
address that we did not control (source IP spooﬁng). By
following these guidelines, our experiments used real
Internet infrastructure but did not affect any real users.
In this section, we demonstrate real-world BGP at-
tacks that successfully obtain bogus certiﬁcates from the
ﬁve largest CAs. We show that network-level adversaries
can undermine the security properties offered by HTTPS
by targeting domain validation protocols and attack users
that are seemingly visiting a “secure” site. This moti-
vates our work in Section 5 on developing countermea-
sures to prevent these attacks from ever harming real
users. We have also reached out to Let’s Encrypt to dis-
cuss the deployment of countermeasures.
4 Quantifying Vulnerability of Domains
and CAs
The degree of vulnerability of the PKI to the various at-
tacks outlined above depends on several factors like the
topological relationship between the adversary and the
victim and the length of the victim’s preﬁx. We aim to
measure these factors and quantitatively assess the via-
bility of the attacks. Speciﬁcally, we aim to analyze what
fraction of certiﬁcate signings could have been spoofed
using one of the attacks above. Our measurement of do-
mains reveals that 72% of domains are vulnerable to sub-
preﬁx attacks (that can be launched by any AS on the In-
ternet). All of the domains are vulnerable to an equally-
speciﬁc-preﬁx attack, from an average of 70% of ASes
on the Internet (speciﬁc to any given victim domain).
4.1 Data Collection
To gather data about TLS domains, we scraped the Cer-
tiﬁcate Transparency logs through crt.sh [4] and resolved
the domain names in the common name ﬁeld of certiﬁ-
cates to an IP address. For each certiﬁcate, we resolve
the common name to an IP address using our local DNS
resolver.4 We then map the IP address to the IP preﬁx
and origin AS using Level3’s routing table from the time
the certiﬁcate was issued (see Section 5.2.1 for an expla-
nation of our use of historical BGP data). We chose 10 of
the 14 top CAs listed on W3Techs CA usage survey from
17th November 2017 [8] for our study. The 10 CAs were
selected because of their consistent logging of Domain
Validated (DV) certiﬁcates to Certiﬁcate Transparency.
We performed ﬁltering to exclude domains that fail to
resolve to an IP address. Also, because of the large vol-
ume of certiﬁcates being signed, we were forced to rate
limit our certiﬁcate scraping.5 Over the period between
3/11/17 and 8/7/17, we generated a dataset of 1.8 million
certiﬁcates after ﬁltering.
4.2 Vulnerability to Sub-Preﬁx Attacks
We ﬁrst evaluate the vulnerability to sub-preﬁx attacks,
where the adversary AS announces a longer preﬁx than
the original preﬁx. We evaluate vulnerability of both do-
mains and CAs to such attacks.
4.2.1 Vulnerability of Domains
Because the majority of ASes ﬁlter BGP announcements
to preﬁxes longer than /24, only domains running on pre-
ﬁxes shorter than /24 are vulnerable to sub-preﬁx attacks.
That said, our data shows that 72% of domains (1.3 mil-
lion in our dataset) requesting certiﬁcates ran on pre-
ﬁxes shorter than /24 at the time of requesting certiﬁ-
cate. Figure 4 shows the complete distribution of do-
mains over different IP preﬁx length. Thus, a sub-preﬁx
hijack/interception attack is very viable on the PKI.
4Wildcard certiﬁcates were ignored because some CAs require DNS
veriﬁcation for wildcard certiﬁcates [5] and thus do not contact the
server running at the domain’s A record.
5To ensure our sample was representative, we obtained another
sample of certiﬁcates directly from Let’s Encrypt’s logs (the CA most
affected by the rate limiting) and compared the distribution of preﬁx
lengths and originating ASes. We found these distributions to be simi-
lar implying that our research ﬁndings were not signiﬁcantly impacted
by the rate limiting.
840    27th USENIX Security Symposium
USENIX Association
Comodo
GoDaddy
Let’s
Encrypt
64.78.149.164 68.178.177.122 91.199.212.132 69.58.183.55 114.179.250.1
/20
Symantec GlobalSign
/11
/20
AS30060 AS4713
4
0
5
IP Used
IP Preﬁx
Origin AS AS13649
Num.
Providers
# Tier 1
Providers
Resilience
of
CAs
(section
4.3.2)
0.887
4
/22
AS26496
4
/24
AS48447
4
4
1
4
0.731
0.217
0.440
AS4713
is Tier 1
0.587
Figure 4: Number of domains hosted in an IP preﬁx of a
given length. Only 28% of domains are on /24 preﬁxes.
Remark: While works on BGP attacks in other appli-
cations have recommended that ASes announce /24s to
prevent sub-preﬁx attacks [44, 45], this is not feasible for
domain owners. Owing to the very large number of do-
mains with TLS certiﬁcates, running every domain on a
/24 would cause a sizable increase in BGP routing table.
Thus, in the absence of feasible countermeasures, 72% of
domains are vulnerable to sub-preﬁx attacks. This moti-
vates our work on designing new countermeasures for
PKI in Section 5.
4.2.2 Vulnerability of CAs
CAs are also a target for attacks. Of the ﬁve CAs we per-
formed attacks on, only one (Comodo) ran the IP used
for veriﬁcation out of a /24 preﬁx. Table 4 shows the IPs
we observed CAs using for veriﬁcation and the preﬁx
length for each IP. We also show the originating AS and
the number of providers (including tier 1 networks) of
the originating AS. Unlike the large number of domains,
there is a fairly small number of CAs, and it would be
reasonable for CAs to run the IPs used for domain con-
trol veriﬁcation on a /24 preﬁx to avoid sub-preﬁx hi-
jacks. In addition, Comodo and GoDaddy operate their
own ASes, meaning that running the veriﬁcation servers
on a /24 IP preﬁx would require only an update in routing
policy. For CAs that do not control their own BGP an-
nouncements, we recommend negotiations with the rel-
evant ISPs because running domain control veriﬁcation
servers on /24 IP preﬁxes has a sizable security beneﬁt
with little additional cost as explained in Section 2.2.1.
4.3 Vulnerability
Preﬁx Hijacking
to
Equally-Speciﬁc-
To assess the vulnerability of domains and CAs to
equally-speciﬁc-preﬁx attacks, we used the notion of re-
silience [31]. An AS of a CA v is resilient to an attack
Table 4: This table shows the IPs used by various CAs to
perform domain control veriﬁcation.
launched by a false origin AS a on a victim domain AS
t, if v is not deceived by a and still sends its trafﬁc to t.
For a given (v, a, t) pair, resilience is calculated by:
¯β (t,v,a) =
p(v,t)
p(v,t) + p(v,a)