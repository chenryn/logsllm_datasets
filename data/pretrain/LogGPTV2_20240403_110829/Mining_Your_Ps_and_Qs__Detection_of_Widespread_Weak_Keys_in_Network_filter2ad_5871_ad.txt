t
p
t+1
Experiment
To test our hypothesis, we modiﬁed
OpenSSL 1.0.0g to control all the entropy inputs used
during key generation, generated a large number of RSA
keys, and determined how many were identical or fac-
torable. To simulate the effects of slower clock speeds,
we dilated the clock time returned by time() and re-
peated the experiment using dilation multipliers of 1–32.
In all, we generated 14 million keys. We checked for
common factors within each batch of 100 keys.
The results we obtained, illustrated in Figure 6, are
consistent with our hypothesis. No factorable keys are
generated for low starting offsets, as both p and q are
generated before the second changes. As the initial off-
set increases, there is a rapid phase change to generat-
ing factorable keys, as generation of q values begins to
overlap the second boundary. Eventually, the fraction of
factorable keys falls as the second boundary occurs dur-
ing the generation of more p values, resulting in distinct
moduli with no common factors.
5.3 DSA signature weaknesses and Dropbear
The DSA signature vulnerabilities we observed indicate
that entropy problems impact not only key generation but
also the continued runtime behavior of server software
during normal usage. This is somewhat surprising, since
we might expect the operating system to collect sufﬁ-
cient entropy eventually, even in embedded devices. We
investigated Dropbear, a popular light-weight SSH imple-
mentation. It maintains its own entropy pools seeded from
the operating system at launch, on Linux with 32 bytes
read from urandom. This suggests a possible explanation
for the observed problems: the operating system had not
collected enough entropy when the SSH server started,
and, from then on, even though the system entropy pool
may have had further entropy, the running SSH daemon
did not.
To better understand why these programs produce vul-
nerable DSA signatures, we examined the source code
for the current version of Dropbear, 0.55. The ephemeral
key is generated as output from an internal entropy pool.
Whenever Dropbear extracts data from its entropy pool, it
increments a static counter and hashes the result into the
pool state. No additional randomness is added until the
counter (a 32-bit integer) overﬂows. This implies that, if
two Dropbear servers are initially seeded with the same
value from urandom, they will provide identical signature
randomness as long as their counters remain synchronized
and do not overﬂow.
(We note that Dropbear contains a routine to generate k
in a manner dependent on the message to be signed, which
would ensure that distinct messages are always signed
with distinct k values and protect against the vulnerability
that we explore here. However, that code is disabled by
default.)
We looked for evidence of synchronized sequences
of ephemeral keys in the wild by making further SSH
requests to a handful of the Dropbear hosts from our
scan. We chose two hosts with the SSH version string
dropbear-0.39 that had used identical DSA public keys
and r values and found that the signatures followed an
identical sequence of r values. We could advance the
sequence of one host by making several SSH requests,
then cause the other host to catch up by making the same
number of requests. When probed again an hour later,
both hosts remained in sync. This suggests that the Drop-
bear code is causing vulnerabilities on real hosts in the
manner we predicted.
Several other implementations, including hosts identify-
ing OpenSSH and the Siemens Gigaset routers displayed
similar behavior when rescanned. Because OpenSSL adds
the current clock time to the entropy pool before extract-
ing these random values, this suggests that some of these
devices do not have a working clock at all.
6 Discussion
6.1 RSA vs. DSA in the face of low entropy
We believe that the DSA signature vulnerabilities pose
more cause for concern than the RSA factorization vul-
nerability. The RSA key factorization vulnerability that
we investigated occurs only for certain patterns of key
generation implementations in the presence of low en-
tropy. In contrast, the DSA signature vulnerability can
compromise any DSA private key—no matter how well
generated—if there is ever insufﬁcient entropy at the time
the key is used for signing. It is not necessary to search for
a collision, as we did; it sufﬁces for an attacker to be able
to guess the ephemeral private key k. The most analogous
attacks against RSA of which we are aware show that
some types of padding schemes can allow an attacker to
discover the encrypted plaintext or forge signatures [10].
We are unaware of any attacks that use compromised RSA
signatures to recover the private key.
We note that our ﬁndings show a larger fraction of
SSH hosts are compromised by the DSA vulnerability
than by factorable RSA keys, even though our scanning
techniques have likely only revealed a small fraction of
the hosts prone to repeating DSA signature randomness.
In contrast, the factoring algorithm we used has found all
of the repeated RSA primes in our sample of keys.
There are speciﬁc countermeasures that implementa-
tions can use to protect against these attacks. If both
prime factors of an RSA modulus are generated from a
PRNG without adding additional randomness during key
generation, then low entropy would result in repeated but
not factorable keys. These are more readily observable,
but may be trickier to exploit, because they do not imme-
diately reveal the private key to a remote attacker. To pre-
vent DSA randomness collisions, the randomness for each
signature can be generated as a function of the message
and the pseudorandom input. (It is very important to use
a cryptographically secure PRNG for this process [4].) Of
course, the most important countermeasure is for imple-
mentations to use sufﬁcient entropy during cryptographic
operations that require randomness, but defense-in-depth
remains the prudent course.
6.2 /dev/(u)random as a usability failure
The Linux documentation states that “[a]s a general rule,
urandom should be used for everything except long-lived
GPG/SSL/SSH keys” [1]. However, all the open-source
implementations we examined used urandom to generate
keys by default. Based on a survey of developer mailing
lists and forums, it appears that this choice is motivated by
two factors: random’s extremely conservative behavior
and the mistaken perception that urandom’s output is
secure enough.
As others have noted, Linux is very conservative at
crediting randomness added to the entropy pool [23],
and random further insists on using freshly collected ran-
domness that has not already been mixed into the output
PRNG. The blocking behavior means that applications
that read from random can hang unpredictably, and, in
a headless device without human input or disk entropy,
there may never be enough input for a read to complete.
While blocking is intended to be an indicator that the sys-
tem is running low on entropy, random often blocks even
though the system has collected more than enough entropy
to produce cryptographically strong PRNG output—in a
sense, random is often “crying wolf” when it blocks.
Our experiments suggest that many of the vulnerabil-
ities we observed may be due to the output of urandom
being used to seed entropy pools before any entropic
inputs have been mixed in. Unfortunately, the existing in-
terface to urandom gives the operating system no means
of alerting applications to this dangerous condition. Our
recommendation is that Linux should add a secure RNG
that blocks until it has collected adequate seed entropy
and thereafter behaves like urandom.
6.3 Are we seeing only the tip of the iceberg?
Nearly all of the vulnerable hosts that we were able to
identify were headless or embedded devices. This raises
the question of whether the problems we found appear
only in these types of devices, or if instead we are merely
seeing the tip of a much larger iceberg.
Based on the experiments described in Section 5.1, we
conjecture that there may exist further classes of vulnera-
ble keys that were not visible to our methods, but could be
compromised with targeted attacks. The ﬁrst class is com-
posed of embedded or headless devices with an accurate
real-time clock. In these cases, keys generated during the
boot-time entropy hole may appear distinct, but depend
only on a conﬁguration-speciﬁc state and the boot time.
These keys would not appear vulnerable in our scanning,
but an attacker may be able to enumerate some or all of
such a reduced key space for targeted implementations.
A more speculative class of potential vulnerability con-
sists of traditional PC systems that automatically generate
cryptographic keys on ﬁrst boot. We observed in Sec-
tion 5.1 that an experimental machine running RHEL 5
and 6 did collect sufﬁcient entropy in time for SSH key
generation, but that the margin of safety was slim. It is
conceivable that some lower-resource systems may be
vulnerable.
Finally, our study was only able to detect vulnerable
DSA ephemeral keys under speciﬁc circumstances where
a large number of systems shared the same long-term key
and were choosing ephemeral keys from the same small
set. There may be a larger set of hosts using ephemeral
keys that do not repeat across different systems but are
nonetheless vulnerable to a targeted attack.
We found no evidence suggesting that RSA keys from
standard implementations that were generated interac-
tively or subsequent to initial boot are vulnerable.
6.4 Directions for future work
In this work, we examined keys from two cryptographic
algorithms on two protocols visible via Internet-wide
scans of two ports . A natural direction for future work
is to broaden the scope of all of these choices. Entropy
problems can also affect the choice of Difﬁe-Hellman key
parameters and keying material for symmetric ciphers. In
addition, there are many more subtle attacks against RSA,
DSA, and ECDSA that we did not search for. We focused
on keys, but one might also try to search for evidence of
repeated randomness in initialization vectors in ciphertext
or salts in cryptographic hashes.
We also focused solely on services visible to our scans
of the public Internet. Similar vulnerabilities might be
found by applying this methodology to keys or other cryp-
tographic data obtained from other resource-constrained
devices that perform cryptographic operations, such as
smart cards or mobile phones.
The observation that urandom can produce predictable
output on some types of systems at boot may lead to at-
tacks on other services that automatically begin at boot
and depend on good randomness from the kernel. It war-
rants investigation to determine whether this behavior
may undermine other security mechanisms such as ad-
dress space layout randomization or TCP initial sequence
numbers.
7 Defenses and Lessons
The vulnerabilities we have identiﬁed are a reminder that
secure random number generation continues to be a chal-
lenging problem. There is a tendency for developers at
each layer of the software stack to silently shift respon-
sibility to other layers; a far better practice would be
a defense-in-depth approach where developers at every
layer apply careful security design and testing and make
assumptions clear. We suggest defensive strategies and
lessons for several important groups of stakeholders.
For OS developers:
Provide the RNG interface applications need.
Typi-
cal security applications require a source of randomness
that is guaranteed to be of high quality and has pre-
dictable performance; neither Linux’s /dev/random nor
/dev/urandom strikes this balance. The operating sys-
tem should maintain a secure PRNG that refuses to return
data until it has been seeded with a minimum amount
of true randomness and is continually seeded with fresh
entropy collected during operation.
Communicate entropy conditions to applications. The
problem with /dev/urandom is that it can return data
even before it has been seeded with any entropy. The OS
should provide an interface to indicate how much entropy
it has mixed into its PRNG, so that applications can gauge
whether the state is sufﬁciently secure for their needs.
Test RNGs thoroughly on diverse platforms. Many of the
entropy sources that Linux supports are not available on
headless or embedded devices. These behaviors may not
be apparent to OS developers unless they routinely test
the internals of the entropy collection subsystem across
the full spectrum on platforms the system supports.
For library developers:
Default to the most secure conﬁguration. Both OpenSSL
and Dropbear default to using /dev/urandom instead
of /dev/random, and Dropbear defaults to using a less
secure DSA signature randomness technique even though
a more secure technique is available as an option. In
general, cryptographic libraries should default to using
the most secure mechanisms available.
Use RSA and DSA defensively. Crypto libraries can
take speciﬁc steps to prevent weak entropy from resulting
in the immediate leak of private keys due to co-factorable
RSA moduli and repeated DSA signature randomness
(see Section 6.1).
For application developers:
Generate keys on ﬁrst use, not on install or ﬁrst boot.
If
keys must be generated automatically, it may be better to
defer generation until the keys are needed.
Heed warnings from below.
If the OS or cryptography
library being used raises a signal that insufﬁcient entropy
is available (such as blocking), applications should de-
tect this signal and refuse to perform security-critical
operations until the system recovers from this potentially
vulnerable state. Developers have been known to work
around low-entropy states by ignoring or disabling such
warnings, with extremely dangerous results [22].
For device manufacturers:
Avoid factory-default keys or certiﬁcates. While some
defense is better than nothing, default keys and certiﬁcates
provide only minimal protection.
Seed entropy at the factory. Devices could be initialized
with truly random seeds at the factory. Sometimes it is al-
ready necessary to conﬁgure unique state on the assembly
line (such as to set MAC addresses), and entropy could
be added at the same time.
Ensure entropy sources are effective. Embedded or head-
less devices may not have access to sources of randomness
assumed by the operating system, such as user-input de-
vices or disk timing. Device makers should ensure that
effective entropy sources are present, and that these are
being harvested in advance of cryptographic operations.
Use hardware random number generators when possible.
Security-critical devices should use a hardware random
number generator for cryptographic randomness when-
ever possible.
For certiﬁcate authorities:
Check for repeated, weak, and factorable keys Certiﬁ-
cate authorities have a uniquely broad view of keys con-
tained in TLS certiﬁcates. We recommend that they repeat
our work against their certiﬁcate databases and take steps
to protect their customers by alerting them to potentially
weak keys.
For end users:
Regenerate default or automatically generated keys.
Cryptographic keys and certiﬁcates that were shipped
with the device or automatically generated at ﬁrst boot
should be manually regenerated. Ideally, certiﬁcates and
keys should be generated on another device (such as a
desktop system) with access to adequate entropy.
Check for known weak keys. We have created a key-
check service that individuals can use to check their TLS
certiﬁcates and SSH host keys against our database of
keys we have identiﬁed as vulnerable.
For security and crypto researchers:
Secure randomness remains unsolved in practice. The
fact that all major operating systems now provide cryp-
tographic RNGs might lead security experts to believe