368–377
locking down network connections
375–377
securing communications with TLS
368–369
using service mesh for TLS 370–374
setting up 532–534
Linux 533–534
MacOS 532–533
Windows 534
L
LANGSEC movement 48
lateral movement 375
layer-7 (Application-layer DoS attacks) 65
LDAP (Lightweight Directory Access Protocol) 72, 
271
groups 271–273
installing directory server 531
Linkerd 372–374
linkerd annotation 372
linkerd check - -pre command 372
linkerd check command 372
link-local IP address 363
link-preview microservice 353–354, 357–360
LinkPreviewer class 367
links field 358
Linux
setting up Java and Maven on 525
setting up Kubernetes 533–534
Minikube 534
VirtualBox 534
List objects 403
list_files scope 224
load balancer 10
load event 104
load() method 421
localStorage object 164
login
building UI for Natter API 138–142
implementing token-based 112–115
login(username, password) function 140
logout 143–145
long-lived secrets 423–425
lookupPermissions method 279, 306, 316
loopback address 363
M
MAC (mandatory access control) 223, 267
MAC (message authentication code) 172, 456, 
496, 504
macaroons 319–330
contextual caveats 321
first-party caveats 325–328
macaroon token store 322–324
third-party caveats 328–330
answers to exercises 330
creating 329–330
MacaroonsBuilder class 326, 329
MacaroonsBuilder.create() method 322
macaroon.serialize() method 322
MacaroonsVerifier 323
MacaroonTokenStore 324
macKey 192, 324
INDEX
545
macKey.getEncoded() method 322
macOS
setting up Java and Maven 523–524
setting up Kubernetes 532–533
Minikube 533
VirtualBox 532–533
MACSigner class 192
MACVerifier class 192–193
MAF (multi-factor authentication) 22
Main class 30, 34, 46, 51, 54, 75–76, 200, 318, 418
main() method 46, 59, 93, 280, 288, 318, 394–395, 
418, 493–494
mandatory access control (MAC) 223, 267
man-in-the-middle (MitM) attack 485
marker interfaces 207
Maven 523, 531
installing
Authorization Server 525–531
Docker 525
LDAP directory server 531
setting up
Linux 525
macOS 523–524
Windows 525
max-age attribute 82, 122
max_time parameter 262
member attribute 272
member role 278
- -memory flag 344
message authentication 497
message authentication code (MAC) 172, 456, 
496, 504
Message class 358
MessageDigest class 133
MessageDigest.equals 180
MessageDigest.isEqual method 134–135, 175, 413
messages table 32
microservice APIs in Kubernetes 335–382
deploying Natter on Kubernetes 339–368
building H2 database as Docker 
container 341–345
building Natter API as Docker 
container 349–353
calling link-preview microservice 357–360
deploying database to Kubernetes 345–349
deploying new microservice 355–357
DNS rebinding attacks 366–368
link-preview microservice 353–354
preventing server-side request forgery (SSRF) 
attacks 361–365
securing incoming requests 377–381
securing microservice communications 368–377
locking down network connections 375–377
securing communications with TLS 368–369
using service mesh for TLS 370–374
microservices 3, 335
microservices architecture 8
Minikube
Linux 534
MacOS 533
Windows 534
minikube config set vm-driver virtualbox 
command 533
minikube ip command 345, 360, 368
misuse-resistant authenticated encryption 
(MRAE) 475–478
MitM (man-in-the-middle) attack 485
mkcert utility 80–81, 246, 379, 400, 402, 406, 451
mode of operation, block cipher 196
model-view-controller (MVC) 34
modern token-based authentication 146–180
allowing cross-domain requests with CORS
147–154
adding CORS headers to Natter API
151–154
CORS headers 150–151
preflight requests 148
hardening database token storage 170–180
authenticating tokens with HMAC 172–177
hashing database tokens 170–171
protecting sensitive attributes 177–180
tokens without cookies 154–169
Bearer authentication scheme 160–162
deleting expired tokens 162–163
storing token state in database 155–160
storing tokens in Web Storage 163–166
updating CORS filter 166
XSS attacks on Web Storage 167–169
monotonically increasing counters 497
MRAE (misuse-resistant authenticated 
encryption) 475–478
mTLS (mutual TLS) 374, 396–414
certificate-bound access tokens 410–414
client certificate authentication 399–401
using service mesh 406–409
verifying client identity 402–406
with OAuth2 409–410
multicast delivery 441
multi-factor authentication (MAF) 22
multistage build, Docker 342
MVC (model-view-controller) 34
mvn clean compile exec:java command 38
N
-n option 415
NaCl (Networking and Cryptography 
Library) 198–200, 473
name constraints 370
namespace 345
INDEX
546
Natter API 27–33, 62–97
access control 87–97
access control lists (ACLs) 90–92
adding new members to Natter space 94–95
avoiding privilege escalation attacks 95–97
enforcing 92–94
enforcing authentication 89
adding CORS headers to 151–154
adding scoped tokens to 220–222
addressing threats with security controls
63–64
audit logging for accountability 82–87
authentication to prevent spoofing 70–77
authenticating users 75–77
creating password database 72–74
HTTP Basic authentication 71
registering users in Natter API 74–75
secure password storage with Scrypt 72
building login UI 138–142
calling from JavaScript 102–104
deploying on Kubernetes 339–368
building H2 database as Docker 
container 341–345
building Natter API as Docker 
container 349–353
calling link-preview microservice 357–360
deploying database to Kubernetes 345–349
deploying new microservice 355–357
DNS rebinding attacks 366–368
link-preview microservice 353–354
preventing server-side request forgery (SSRF) 
attacks 361–365
double-submit cookies for 133–138
encrypting private data 78–82
enabling HTTPS 80–81
strict transport security 82
implementation 29
initializing database 32–33
overview 28–29
rate-limiting for availability 64–69
setting up project 30–31
using capability URIs in 303–307
returning capability URIs 305–306
validating capabilities 306–307
natter-api namespace 345, 375, 380, 401
natter-api-service 367
natter-api-service.natter-api 367
natter_api_user permissions 73, 84
natter-tls namespace 380
nbf claim 187
NEED_TASK 447
NEED_UNWRAP 446
NEED_UNWRAP_AGAIN 447
NEED_WRAP 447
network connections, locking down 375–377
network policies, Kubernetes 375
Network security 8
network segmentation 368
Networking and Cryptography Library 
(NaCl) 198–200, 473
network-level DoS attack 64
nextBytes() method 158
NFRs (non-functional requirements) 14
nginx.ingress.kubernetes.io/auth-tls-error-
page 400
nginx.ingress.kubernetes.io/auth-tls-pass-certifi-
cate-to-upstream 400
nginx.ingress.kubernetes.io/auth-tls-secret 400
nginx.ingress.kubernetes.io/auth-tls-verify-
client 400
nginx.ingress.kubernetes.io/auth-tls-verify-
depth 400
nodePort attribute 352
nodes, Kubernetes 337
nonce (number-used-once) 201, 262–263, 497
nonce() method 504
nonces 503–504
non-functional requirements (NFRs) 14
non-repudiation 14
NOT_HANDSHAKING 447
number-used-once (nonce) 201, 262–263, 497
O
OAEP (Optimal Asymmetric Encryption 
Padding) 257
OAuth2 217–266
ACE-OAuth (Authorization for Constrained 
Environments using OAuth2) 511–517
authorization code grant 230–238
hardening code exchange with Proof 
Key for Code Exchange (PKCE)
236–237
redirect URIs for different types of 
client 235–236
refresh tokens 237–238
client credentials grant 385–388
introducing 226–230
authorization grants 228–229
discovering OAuth2 endpoints 229–230
types of clients 227–228
JWT bearer grant for 389–396
client authentication 391–393
generating 393–395
service account authentication 395
mutual TLS (mTLS) with 409–410
OpenID Connect (OIDC) 260–266
hardening 263–264
ID tokens 260–262
passing ID tokens to APIs 264–266
INDEX
547
OAuth2 (continued)
scoped tokens 218–224
adding to Natter 220–222
difference between scopes and 
permissions 223–224
single sign-on (SSO) 258–259
token exchange 431–435
validating access tokens 239–258
encrypted JWT 256
JWTs 249–256
letting AS decrypt tokens 258
securing HTTPS client configuration 245–247
token introspection 239–244
token revocation 248
OAuth2TokenStore 243, 248
Object array 272
object-oriented (OO) 296
ocaps (object-capability-based security) 296
OCSP (online certificate status protocol) 369
off-heap memory 483
offline access control 518–521
offline authorization 520–521
offline user authentication 518–520
OIDC (OpenID Connect) 185, 260–266, 497
hardening 263–264
ID tokens 260–262
passing ID tokens to APIs 264–266
onboarding 489
one-off key provisioning 480–481
online certificate status protocol (OCSP) 369
OO (object-oriented) 296
OP (OpenID Provider) 260–261
OPA (Open Policy Agent) 289
open redirect vulnerability 232, 364–365
OpenID Provider (OP) 260–261
Optimal Asymmetric Encryption Padding 
(OAEP) 257
Optional class 112
Optional.empty() method 117
optional_no_ca option 414
OR operator 135
ORM (object-relational mapper) 45
OSCORE (Object Security for Constrained 
RESTful Environments) 499–506
deriving context 500–503
encrypting message 504–506
generating nonces 503–504
Oscore class 502, 504
output
exploiting XSS Attacks 54–57
implementing protections 58–61
preventing XSS 57–58
producing safe 53–61
OWASP (Open Web Application Security 
Project) 39
OWL (Web Ontology Language) 281
owner field 77
owner role 278
P
package statement 287
padding oracle attack 202
PAP (Policy Administration Point) 290
PartyU 470
PASETO 186
password hashing algorithm 72
passwords
creating database for 72–74
storage with Scrypt 72
Path attribute 121
path traversal 420
path traversal vulnerability 484
PDP (Policy Decision Point) 290
PEM (Privacy Enhanced Mail) 80
PEP (Policy Enforcement Point) 290
perfect forward secrecy 453
permissions 90
difference between scopes and 223–224
mapping roles to 276–277
mitigating SQL injection attacks with 45–47
permissions table 90, 269, 271, 277–278
permit() method 284, 286
perms attribute 307
persistent cookie 122
personally identifiable information (PII) 24
phantom token pattern 429–431
PII (personally identifiable information) 24
PIP (Policy Information Point) 290
PKCE (Proof Key for Code Exchange) 236–237
PKI (public key infrastructure) 369, 409, 479
pods 337
podSelector 375
POLA (principle of least authority) 45–46, 90, 
250, 295
Policy Administration Point (PAP) 290
policy agents 289–290
Policy Decision Point (PDP) 290
Policy Enforcement Point (PEP) 290
Policy Information Point (PIP) 290
policy sets 290
PoP (proof-of-possession) tokens 410, 517
post-compromise security 484–486
postMessage operation 280
- -pre argument 372
preflight requests 148
prepared statements 43–44