r = 0.2
(cid:96) = log(6)
(cid:96) = log(4)
(cid:96) = log(2)
Accuracy
rad I = 0.3
c = 0.95
216 KB
318 KB
974 KB
Accuracy
rad I = 0.3
c = 0.95
34 KB
51 KB
156 KB
c = 0.99
359 KB
539 KB
1.7 MB
c = 0.99
54 KB
86 KB
279 KB
c = 0.9
162 KB
235 KB
698 KB
c = 0.9
26 KB
38 KB
112 KB
Table 1: Bandwidth overhead for restaurants in Paris and in
Buenos Aires for various levels of privacy and accuracy.
returns information (in JSON format) including location, address,
name, rating, and opening times for all restaurants up to 300 meters
from the location (48.85412, 2.33316) – which corresponds to the
coordinates of Café Les Deux Magots in Paris.
We have used the APIs nearbysearch and radarsearch
to calculate the average number of POIs per km2 and the average
size of POIs’ information (in KB) respectively. We have considered
two queries: restaurants in Paris, and restaurants in Buenos Aires.
Our results show that there is an average of 137 restaurants per km2
in Paris and 22 in Buenos Aires, while the average size per POI is
0.84 KB.
Combining this information with the AOR overhead depicted
in Figure 9, we can derive the average bandwidth overhead for
each query and various combinations of privacy and accuracy lev-
els. For example, using the parameter combination of our run-
ning example (privacy level  = log(4)/0.2, and accuracy level
c = 0.95, rad I = 0.3) we have a 10.7 ratio for an average of
38 ((cid:119) (137/10002) × (3002 × π)) restaurants in the AOI. Thus
the estimated bandwidth overhead is 39 × (10.7 − 1) × 0.84KB
(cid:119) 318 KB.
Table 1 shows the bandwidth overhead for restaurants in Paris
and Buenos Aires for the various combinations of privacy and ac-
curacy levels. Looking at the worst case scenario, from a bandwidth
overhead perspective, our combination of highest levels of privacy
and accuracy (taking (cid:96) = log(2) and c = 0.99) with the query
for restaurants in Paris (which yields to a large number of POIs –
signiﬁcantly larger than average) results in a signiﬁcant bandwidth
overhead (up to 1.7MB). Such overhead reduces sharply when de-
creasing the level of privacy (e.g., from 1.7 MB to 557 KB when
using (cid:96) = log(4) instead of (cid:96) = log(2)). For more standard queries
yielding a lower number of POIs, in contrast, even the combina-
tion of highest privacy and accuracy levels results in a relatively
insigniﬁcant bandwidth overhead.
Concluding our bandwidth overhead analysis, we believe that
the overhead necessary to enhance an LBS application with geo-
indistinguishability guarantees is not prohibitive even for scenarios
resulting in high bandwidth overhead (i.e., when combining very
high privacy and accuracy levels with queries yielding a large num-
ber of POIs). Note that 1.7MB is comparable to 35 seconds of
Youtube streaming or 80 seconds of standard Facebook usage [3].
Nevertheless, for cases in which minimizing bandwidth consump-
tion is paramount, we believe that trading bandwidth consumption
for privacy (e.g., using (cid:96) = log(4) or even (cid:96) = log(6)) is an ac-
ceptable solution.
Figure 8: (α, δ)-usefulness for r = 0.2 and various values of (cid:96).
Figure 9: AOR vs AOI ratio for various levels of privacy and
accuracy (using ﬁxed r = 0.2 and radI = 0.3).
5.2 Bandwidth overhead analysis
As expressed by Proposition 5.2, in order to implement an LBS
application enhanced with geo-indistinguishability and accuracy it
sufﬁces to use the Planar Laplace mechanism and retrieve POIs for
an enlarged radius rad R. For each query made from a location x,
the application needs to (i) obtain z = PL(x), (ii) retrieve POIs
for AOR = B(z, rad R), and (iii) ﬁlter the results from AOR to AOI
(as explained in step 3 above). Such implementation is straight-
forward and computationally efﬁcient for modern smart-phone de-
vices. In addition, it provides great ﬂexibility to application devel-
oper and/or users to specify their desired/allowed level of privacy
and accuracy. This, however, comes at a cost: bandwidth overhead.
In the following we turn our attention to investigating the band-
width overhead yielded by our approach. We will do so in two
steps: ﬁrst we investigate how the AOR size increases for different
privacy and LBS-speciﬁc parameters, and then we investigate how
such increase translates into bandwidth overhead.
Figure 9 depicts the overhead of the AOR versus the AOI (repre-
sented as their ratio) when varying the level of conﬁdence (c) and
privacy ((cid:96)) and for ﬁxed values rad I = 0.3 and r = 0.2. The
overhead increases slowly for levels of conﬁdence up to 0.95 (re-
gardless of the level of privacy) and increases sharply thereafter,
yielding to a worst case scenario of a about 50 times increase for
the combination of highest privacy ((cid:96) = log(2)) and highest conﬁ-
dence (c = 0.99).
In order to understand how the AOR increase translates into band-
width overhead, we now investigate the density (in km2) and size
(in KB) of POIs by means of the Google Places API [2]. This
API allows to retrieve POIs’ information for a speciﬁc location,
radius around the location, and POI’s type (among many other
optional parameters). For instance, the HTTPS request:
https://maps.googleapis.com/maps/api/place/nearby
search/json?location=48.85412,2.33316 &
radius=300 & types=restaurant & key=myKey
9105.3 Further challenges: using an LBS multi-
ple times
As discussed in Section 3.3, geo-indistinguishability can be nat-
urally extended to multiple locations. In short, the idea of being
(cid:96)-private within r remains the same but for all locations simultane-
ously. In this way the locations, say, x1, x2 of a user employing
the LBS twice remain indistinguishable from all pair of locations
at (point-wise) distance at most r (i.e., from all pairs x(cid:48)
2 such
that d(x1, x(cid:48)
1) ≤ r and d(x2, x(cid:48)
2) ≤ r).
A simple way of obtaining geo-indistinguishability guarantees
when performing multiple queries is to employ our technique for
protecting single locations to independently generate approximate
locations for each of the user’s locations. In this way, a user per-
forming n queries via a mechanism providing -geo-indistinguisha-
bility enjoys n-geo-indistinguishability (see Section 3.3).
1, x(cid:48)
This solution might be satisfactory when the number of queries
to perform remains fairly low, but in other cases impractical, due to
the privacy degradation. It is worth noting that the canonical tech-
nique for achieving standard differential privacy (based on adding
noise according to the Laplace distribution) suffers of the same pri-
vacy degradation problem ( increases linearly on the number of
queries). Several articles in the literature focus on this problem
(see [32] for instance). We believe that the principles and tech-
niques used to deal with this problem for standard differential pri-
vacy could be adapted to our scenario (either directly or motiva-
tionally).
6. COMPARISON WITH OTHER METHODS
In this section we compare the performance of our mechanism
with that of other ones proposed in the literature. Of course it is not
interesting to make a comparison in terms of geo-indistinguisha-
bility, since other mechanisms usually do not satisfy this property.
We consider, instead, the (rather natural) Bayesian notion of pri-
vacy proposed in [36], and the trade-off with respect to the quality
of service measured according to [36], and also with respect to the
notion of accuracy illustrated in the previous section.
The mechanisms that we compare with ours are:
1. The obfuscation mechanism presented in [36]. This mech-
anism works on discrete locations, called regions, and, like
ours, it reports a location (region) selected randomly accord-
ing to a probability distribution that depends on the user’s
location. The distributions are generated automatically by a
tool which is designed to provide optimal privacy for a given
quality of service and a given adversary (i.e., a given prior,
representing the side knowledge of the adversary). It is im-
portant to note that in presence of a different adversary the
optimality is not guaranteed. This dependency on the prior
is a key difference with respect to our approach, which ab-
stracts from the adversary’s side information.
2. A simple cloaking mechanism.
In this approach, the area
of interest is assumed to be partitioned in zones, whose size
depends on the level of privacy we want yo achieve. The
mechanism then reports the zone in which the exact location
is situated. This method satisﬁes k-anonymity where k is the
number of locations within each zone.
In both cases we need to divide the area of interest into a ﬁnite
number of regions, representing the possible locations. We con-
sider for simplicity a grid, and, more precisely, a 9 × 9 grid con-
sisting of 81 square regions of 100 m of side length. In addition,
for the cloaking method, we overlay a grid of 3 × 3 = 9 zones.
Figure 10 illustrates the setting: the regions are the small squares
with black borders. In the cloaking method, the zones are the larger
squares with blue borders. For instance, any point situated in one
of the regions 1, 2, 3, 10, 11, 12, 19, 20 or 21, would be reported
as zone 1. We assume that each zone is represented by the central
region. Hence, in the above example, the reported region would
be 11.
Privacy and Quality of Service.
As already stated, we will use the metrics for privacy and for the
quality of service proposed in [36].
The ﬁrst metric is called Location Privacy (LP) in [36]. The
idea is to measure it in terms of the expected estimation error of a
“rational” Bayesian adversary. The adversary is assumed to have
some side knowledge, expressed in terms of a probability distribu-
tion on the regions, which represents the a priori probability that
the user’s location is situated in that region. The adversary tries to
make the best use of such prior information, and combines it with
the information provided by the mechanism (the reported region),
so to guess a location (remapped region) which is as close as pos-
sible to the one where the user really is. More precisely, the goal is
to infer a region that, in average, minimizes the distance from the
user’s exact location.
Formally, LP is deﬁned as:
(cid:88)
LP =
r,r(cid:48),ˆr∈R
π(r)K(r)(r
(cid:48)
)h(ˆr|r
(cid:48)
)d(ˆr, r)
where R is the set of all regions, π is the prior distribution over
the regions, K(r)(r(cid:48)) gives the probability that the real region r is
reported by the mechanism as r(cid:48), h(ˆr|r(cid:48)) represents the probability
that the reported region r(cid:48) is remapped into ˆr, in the optimal remap-
ping h, and d is the distance between regions. “Optimal” here
means that h is chosen so to minimize the above expression, which,
we recall, represents the expected distance between the user’s exact
location and the location guessed by the adversary.
As for the quality of service, the idea in [36] is to quantify its
opposite, the Service Quality Loss (SQL), in terms of the expected
distance between the reported location and the user’s exact location.
In other words, the service provider is supposed to offer a quality
proportional to the accuracy of the location that he receives. Unlike
the adversary, he is not expected to have any prior knowledge and
he is not expected to guess a location different from the reported
one. Formally:
SQL =
π(r)K(r)(r
(cid:48)
(cid:48)
, r)
)d(r
(cid:88)
r,r(cid:48)∈R
where π, K(r)(r(cid:48)) and d are as above.
It is worth noting that for the optimal mechanism in [36] SQL
and LP coincide (when the mechanism is used in presence of the
same adversary for which it has been designed), i.e. the adversary
does not need to make any remapping.
Comparing the LP for a given SQL.
In order to compare the three mechanisms, we set the parameters
of each mechanism in such a way that the SQL is the same for
all of them, and we compare their LP. As already noted, for the
optimal mechanism in [36] SQL and LP coincide, i.e. the optimal
remapping is the identity, when the mechanism is used in presence
of the same adversary for which it has been designed. It turns out
that, when the adversary’s prior is the uniform one, SQL and LP
coincide also for our mechanism and for the cloaking one.
We note that for the cloaking mechanism the SQL is ﬁxed and
it is 107.03 m. In our experiments we ﬁx the value of SQL to be
911Figure 10: The division of the map into regions and zones.
Figure 12: Location Privacy for SQL = 107.03 m.
AOR), and c so that the condition of accuracy is satisﬁed for both
methods, and then compute the respective LP measures. Let us ﬁx
rad I = 200 m, and let us choose a large conﬁdence factor, say,
c = 0.99. As for rad R, it will be determined by the cloaking
method.
√
Since the cloaking mechanism is deterministic, in order for the
condition to be satisﬁed the AOR for a given location x must extend
around the zone of x by at least rad I, In fact, x could be in the
border of the zone. Given that the cloaking method reports the
center of the zone, and that the distance between the center and
the border (which is equal to the distance between the center and
2 · 150 m, we derive that rad R must be at
√
any of the corners) is