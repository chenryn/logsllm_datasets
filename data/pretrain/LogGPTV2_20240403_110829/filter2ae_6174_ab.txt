抽象理解了`.txt`文件上传过程后，我们发现了利用之前局限性LFI漏洞的方法，如果能够对`upload_path`设置进行可控的任意修改，那么之后`.txt`文件就能被上传到我们制定的目录。
如图，我们可以修改`upload_path`指向任意目录，比如：如果WordPress使用了默认主题`twentyninteen`，那么我们只要修改`upload_path`为`wp-content/themes/twentyninteen`就能绕过之前`include()`没有办法上传文件到主题目录，但又必须包含在主题目录下文件的限制，从而继续利用了。通过结合两个弱点，我们即可完成一个任意php代码执行（RCE啊我艹）
## 寻找有效利用
上述案例只是一个漏洞的示例，完整流程是当两个位于不同位置的弱点，能组合利用的时候才能完整触发。因此，传统的【用户输入】→【危险函数】审计方法是不可能很好发现这种利用方法的，如果只看`include()`的代码块只能找到个无法利用的弱点，虽然对于修补潜在风险发现问题马上修补这个方法已经够了，但作为漏洞研究员，我们不能直观的把这些弱点与其他组件的功能联系起来利用，所以我们需要一种更标准的审计挖掘方法(思路)帮助我们快速统计各种弱点并尝试组合，将这些低位弱点按正确的逻辑顺序拼成一个牛批的高危0day。
因此，我们重新组织挖掘方法分为四个步骤来开展审计。
### （一）组件识别分类
由于影响较小的弱点之间的联系，通常位于【Web应用程序的逻辑】和【框架的整体结构】之间，因此将【Web应用程序】解构成【模块组件】是有意义的，每个【模块组件】相对于【整体结构】和【web应用程序】都有独特的存在目的，所以不能简单地只把整个【Web应用程序】看作是一堆的函数和类去直接审计。
例如，分出一个【主题组件】它就只处理WordPress主题相关的功能和逻辑。另一个【文件组件】可能是WordPress的文件管理组件，它只负责处理所有文件操作。考虑这些组件的另一种方法是黑盒测试：组件接收数据、进行处理、继续传递。例如【主题组件】接收数据，它就应该显示博客文章的类型，以及此处应该使用模板的数据。（稍后我们通过一个实例来理解）
### （二）按功能列举组件
当研究员审计特定功能时我们应该去细分【模块组件】，如实现“文章创建”的功能，就可以细分成由很多【模块组件】组成。
例如，在WordPress中创建文章时【用户输入】将通过多个【模块组件】传递，最后整体组成“文章评论”功能：
  1. 首先针对XSS攻击进行了清理（XSS过滤组件）
  2. 然后针对SEO进行了优化（SEO组件）
  3. 然后将文章存储在数据库中（数据库组件）
  4. 从数据库中获取并再次修改（编辑组件）
  5. 嵌入到生成的HTML页面（主题组件）
如上，我们可以将“文章创建”功能分解成WordPress中的五个不同【模块组件】所组成。
### （三）按列举联动审计
将功能分解为多个模块组件，我们就可以对每个参与的模块组件按顺序跟进并发问：“这个模块组件为什么在这？又TM是干嘛的？有没有可能出错？”
例如，在（二）中，当我们分析WordPress文章创建时存在一个【SEO组件】，该组件在过滤输入后，会修改文章中的HTML标签，因此关于问题“这TM是干嘛的？有没有可能出错？”，分析发现，该【SEO组件】用来分析、修改和优化文章中用于SEO的中HTML标签。
如果可以截断解析和影响修改过程则可能会出现XSS漏洞。 我们将在稍后提供更多实际示例，这些示例讲述了我们如何找到单个组件中的漏洞。
当研究人员明确了寻找目的时，他们可以更有效地搜索或扫描单个组件中的缺陷。从模块组件归类（模块组件多少取决于被审计功能目的、复杂程度等）中审计单个组件的缺陷，使我们可以发现影响较小的缺陷，否则这些小缺陷很容易被忽略。
### （四）构造漏洞利用链
总结前面的步骤，我们首先必须：
  1. 将web应用细分为（与安全相关的）各种组件
  2. 将功能抽象为一系列模块组件的集合，并了解这些组件如何相互关联
  3. 找出相关模块组件中的一个或多个弱点
然后，我们可以挖掘所发现的弱点与其余功能之间的关系，思考如何将它们组合在一起变成一个完整的exp-chain。
在这最后一步中我们可能遇上一系列困难。这些弱点仍然存在于源代码中的原因通常是“总之存在某些限制”导致无法直接利用。但是，只要研究人员了解了各步骤的局限性，以及找到bypass的解决方案，他就可以开始整体审计找出最终关键的切入点。由于这些限制是开发中非常普遍的，因此在应用程序中仍然存在这种（因有限制没有被修改的）弱点的可能性非常高。
为了完整利用上文中“局限性LFI漏洞”的那个例子，我们必须找到一个新的切入点，让我们可以将 **任何文件** 上传到 **特定目录**
。由于此类错误不会直接导致远程代码执行，因此我们可以大胆假设，其他挖洞的人和官方review说不定将其忽略了。为了有效地发现一个能bypass限制的利用点，我们可以看看该模块组件存在于哪些功能里，然后在这几个使用了问题组件的功能中，去寻找能触发组件漏洞的第一个入点，这样我们审计工作量就从“大海捞针”全局搜寻，缩减为“有的放矢”的只审计包含问题组件的那几个功能了。
上文中“身份验证的远程执行代码漏洞”的示例我们就是这样做审计的。回顾一下：
  1. 我们发现了一个允许包含某个目录中的任意文件的LFI漏洞但是该目录不可访问，但不能将包含PHP代码的文件放入其中。
  2. 突破限制的唯一方法是使用其他功能将用户可控的文件上传或移动到该特定目录。
清楚了这一点后，我们将研究范围减小到WordPress的插件更新组件和文件上传组件上。然后，我们使用了如上审计的步骤，将每个功能分解为一系列包含在内的组件，以便从漏洞点的上游组件中，找到允许我们将文件上传到特定目录的利用点。下一节中查看更复杂的示例。
### 漏洞分析
在本节中，我们通过分析源代码功能再分解为组件，并归纳组件之间的联系，来演示审计WordPress的方法。然后，我们来分析一下此方法所找到的真实的安全漏洞。并非审计过程中的所有部分能对应到特定的一个审计公式或固定准则（也有经验之谈和fuzz瞎猜），但是我们总结的方法能让流程更简洁易懂。
下面我们将进一步介绍有关WordPress内部结构的技术细节（无需事先预习WordPress知识）。每个错误的出现都关乎我们需要的特定功能缺陷，最后建立出完整的exp-chain。我们首先在WordPress的管理员面板找到了一些小错误，并将这些小错误联系到一个需要身份验证的代码执行漏洞。但是该漏洞需要管理员权限（这不是我想要的）。为了提升威力，我们尝试降低权限在目标站点上寻找能未授权RCE的切入点。
最终，我们设法找到了一个未授权的漏洞，该漏洞使我们可以接管高权用户的会话，并利用任何已经过身份验证的用户会话来远程执行我们的payload。
（ 未完，下一篇见:P ）
  * 翻译自《How we found 5 0days in WordPress》- RIPS Technologies