title:ZEXE: Enabling Decentralized Private Computation
author:Sean Bowe and
Alessandro Chiesa and
Matthew Green and
Ian Miers and
Pratyush Mishra and
Howard Wu
2020 IEEE Symposium on Security and Privacy
Zexe: Enabling Decentralized Private Computation
Sean Bowe
∗
†
, Alessandro Chiesa
, Matthew Green
, Ian Miers
Zcash, PI:EMAIL
∗
‡
§
†
, Pratyush Mishra
, Howard Wu
†
†
UC Berkeley, {alexch,pratyush,howardwu}@berkeley.edu
‡
§
Johns Hopkins University, PI:EMAIL
Cornell Tech, PI:EMAIL
We design,
Abstract—Ledger-based systems that support rich applications
often suﬀer from two limitations. First, validating a transaction
requires re-executing the state transition that it attests to. Second,
transactions not only reveal which application had a state
transition but also reveal the application’s internal state.
implement, and evaluate Zexe, a ledger-based
system where users can execute oﬄine computations and sub-
sequently produce transactions, attesting to the correctness of
these computations,
that satisfy two main properties. First,
transactions hide all information about the oﬄine computations.
Second, transactions can be validated in constant time by anyone,
regardless of the oﬄine computation.
The core of Zexe is a construction for a new cryptographic
primitive that we introduce, decentralized private computation
(DPC) schemes. In order to achieve an eﬃcient implementation of
our construction, we leverage tools in the area of cryptographic
proofs, including succinct zero knowledge proofs and recursive
proof composition. Overall, transactions in Zexe are 968 bytes re-
gardless of the oﬄine computation, and generating them takes less
than 1 min plus a time that grows with the oﬄine computation.
We demonstrate how to use Zexe to realize privacy-preserving
analogues of popular applications: private user-deﬁned assets and
private decentralized exchanges for these assets.
I. Introduction
Distributed ledgers are a mechanism for maintaining data
across a distributed system while ensuring that every party
has the same view of the data, even in the presence of
corrupted parties. Ledgers can provide an indisputable history
of all “events” logged in a system, thus enabling multiple
parties to collaborate with minimal trust, as any party can
ensure the system’s integrity by auditing history. Interest in
distributed ledgers has soared recently, catalyzed by their use
in cryptocurrencies (peer-to-peer payment systems) and by
their potential as a foundation for new forms of ﬁnancial
systems, governance, and data sharing. In this work we study
two limitations of ledgers, one about privacy and the other
about scalability.
A privacy problem. The main strength of distributed ledgers
is also their main weakness: the history of all events is available
for anyone to read. This severely limits a direct application of
distributed ledgers.
For example, in ledger-based payment systems such as Bit-
coin [Nak09], every payment transaction reveals the payment’s
sender, receiver, and amount. This not only reveals private
ﬁnancial details of individuals and businesses using the system,1
1Even just revealing addresses in transactions can reveal much information
about the ﬂow of money [RH11; RS13; AKR+13; MPJ+13; SMZ14; KGC+17].
There are even companies that oﬀer analytics services on the information
stored on ledgers [Ell13; Cha14].
but also violates fungibility, a fundamental economic property
of money. This lack of privacy becomes more severe in smart
contract systems like Ethereum [Woo17], wherein transactions
not only contain payment details, but also embed function calls
to speciﬁc applications. In these systems, every application’s
internal state is necessarily public, and so is the history of
function calls associated to it.
This problem has motivated prior work to ﬁnd ways to
achieve meaningful privacy guarantees on ledgers. For example,
the Zerocash protocol [BCG+14] provides privacy-preserving
payments, and Hawk [KMS+16] enables general state transi-
tions with data privacy, that is, an application’s data is hidden
from third parties.
However, all prior work is limited to hiding the inputs and
outputs of a state transition, but not which transition function
is being executed. That is, prior work achieves data privacy but
not function privacy. In systems with a single transition function
this is not a concern.2 In systems with multiple transition
functions, however, this leakage is problematic. For example,
Ethereum currently supports thousands of separate ERC-20
“token” contracts [Eth18], each representing a distinct currency
on the Ethereum ledger; even if these contracts each individually
adopted a protocol such as Zerocash to hide details about token
payments, the corresponding transactions would still reveal
which token was being exchanged. Moreover, the leakage of
this information would substantially reduce the anonymity set
of those payments.
A scalability problem.
Public auditability in the afore-
mentioned systems (and many others) is achieved via direct
veriﬁcation of state transitions that re-executes the associated
computation. This creates the following scalability issues.
First, note that
in a network consisting of devices with
heterogeneous computing power, requiring every node to re-
execute transactions makes the weakest node a bottleneck, and
this eﬀect persists even when the underlying ledger is “perfect”,
that is, it conﬁrms every valid transaction immediately. To
counteract this and to discourage denial-of-service attacks
whereby users send transactions that take a long time to
validate, current systems introduce mechanisms such as gas to
make users pay more for longer computations. However, such
mechanisms can make it unproﬁtable to validate legitimate
but expensive transactions, a problem known as the “Veriﬁer’s
2For example, in Zerocash the single transition function is the one governing
cash ﬂow of a single currency.
© 2020, Pratyush Mishra. Under license to IEEE.
DOI 10.1109/SP40000.2020.00050
947
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 10:02:38 UTC from IEEE Xplore.  Restrictions apply. 
Dilemma” [LTK+15]. These problems have resulted in Bitcoin
forks [Bit15] and Ethereum attacks [Eth16].
In sum, there is a dire need for techniques that facilitate
the use of distributed ledgers for rich applications, without
compromising privacy (of data or functions) or relying on
unnecessary re-executions. Prior works only partially address
this need, as discussed in Section I-B below.
A. Our contributions
We design, implement, and evaluate Zexe (Zero knowledge
EXEcution), a ledger-based system that enables users to
execute oﬄine computations and subsequently produce publicly-
veriﬁable transactions that attest to the correctness of these
oﬄine executions. Zexe simultaneously provides two main
security properties.
• Privacy: a transaction reveals no information about the
oﬄine computation, except (an upper bound on) the number
of consumed inputs and created outputs.3 One cannot link
together multiple transactions by the same user or involving
related computations, nor selectively censor transactions
based on such information.
• Succinctness: a transaction can be validated in time that
is independent of the cost of the oﬄine computation whose
correctness it attests to. Since all transactions are indistin-
guishable, and are hence equally cheap to validate, there is
no “Veriﬁer’s Dilemma”, nor a need for mechanisms like
Ethereum’s gas.
Zexe also oﬀers rich functionality, as oﬄine computations
in Zexe can be used to realize state transitions of multiple
applications (such as tokens, elections, markets) simultaneously
running atop the same ledger. The users participating in
applications do not have to trust, or even know of, one another.
Zexe supports this functionality by exposing a simple, yet
powerful, shared execution environment with the following
properties.
• Extensibility: users may execute arbitrary functions of their
choice, without seeking anyone’s permission.
• Isolation: functions of malicious users cannot interfere with
the computations and data of honest users.
• Inter-process communication: functions may exchange data
with one another.
DPC schemes. The technical core of Zexe is a protocol for
a new cryptographic primitive for performing computations
on a ledger called decentralized private computation (DPC).
Informally, a DPC scheme supports a simple, yet expressive,
programming model in which units of data, which we call
records, are bound to scripts (arbitrary programs) that specify
the conditions under which a record can be created and
consumed (this model is similar to the UTXO model; see
Remark III.3). The rules that dictate how these programs
interact can be viewed as a “nano-kernel” that provides a
3One can ﬁx the number of inputs and outputs (say, ﬁx both to 2), or
carefully consider side channels that could arise from revealing bounds on the
number of inputs and outputs.
shared execution environment upon which to build applications.
From a technical perspective, DPC can be viewed as extending
Zerocash [BCG+14] to the foregoing programming model,
while still providing strong privacy guarantees, not only within
a single application (which is a straightforward extension) but
also across multiple co-existing applications (which requires
new ideas that we discuss later on). The security guarantees of
DPC are captured via an ideal functionality, which our protocol
provably achieves.
Applications. To illustrate the expressivity of the RNK, we
show how to use DPC schemes to construct privacy-preserving
analogues of popular applications such as private user-deﬁned
assets and private decentralized or non-custodial exchanges
(DEXs). Our privacy guarantees in particular protect against
vulnerabilities of current DEX designs such as front-running
[BDJ+17; BBD+17; EMC19; DGK+19]. Moreover, we sketch
how to use DPC to construct a privacy-preserving smart
contract system. See Sections III-A and V for details.
Techniques for eﬃcient implementation. We devise a set of
techniques to achieve an eﬃcient implementation of our DPC
protocol, by drawing upon recent advances in zero knowledge
succinct cryptographic proofs (namely, zkSNARKs) and in
recursive proof composition (proofs attesting to the validity of
other proofs).
Overall, transactions in Zexe with two input records and
two output records are 968 bytes and can be veriﬁed in
tens of milliseconds, regardless of the oﬄine computation;
generating these transactions takes less than a minute plus a
time that grows with the oﬄine computation (inevitably so).
This implementation is achieved in a modular fashion via a
collection of Rust libraries (see Fig. 6), in which the top-level
one is libzexe. Our implementation also supports transactions
with any number m of input records and n of output records;
transactions size in this case is 32m + 32n + 840 bytes (the
transaction stores the serial number of each input record and
the commitment of each output record).
A perspective on costs. Zexe is not a lightweight construction,
but achieves,
tolerable eﬃciency for the
ambitious goals it sets out to achieve: data and function
privacy, and succinctness, with rich functionality, in a threat
model that requires security against all eﬃcient adversaries.
Relaxing any of these goals (assuming rational adversaries or
hardware enclaves, or compromising on privacy) will lead to
more eﬃcient approaches.
in our opinion,
The primary cost in our system is, unsurprisingly, the cost
of generating the cryptographic proofs that are included in
transactions. We have managed to keep this cost to roughly a
minute plus a cost that grows with the oﬄine computation. For
the applications mentioned above, these additional costs are
negligible. Our system thus supports applications of real-world
interest today (e.g., private DEXs) with reasonable costs.
B. Related work
Avoiding naive re-execution. A number of proposals for
improving the scalability of smart contract systems, such as
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 10:02:38 UTC from IEEE Xplore.  Restrictions apply. 
948
TrueBit [TR17], Plasma [PB17], and Arbitrum [KGC+18],
avoid naive re-execution by having users report the results
of their computations without any cryptographic proofs, and
instead putting in place incentive mechanisms wherein others
can challenge reported results. The user and challenger engage
in a so-called refereed game [FK97; CRR11; CRR13; JSS+16;
Rei16], mediated by a smart contract acting as the referee, that
eﬃciently determines which of the two was “telling the truth”.
In contrast, in this work correctness of computation is ensured
by cryptography, regardless of any economic motives; we thus
protect against all eﬃcient adversaries rather than merely all
rational and eﬃcient ones. Also, unlike our DPC scheme, the
above works do not provide formal guarantees of strong privacy
(challengers must be able to re-execute the computation leading
to a result and in particular must know any private inputs).
Private payments. Zerocash [BCG+14], building on earlier
work [MGG+13], showed how to use distributed ledgers
to achieve payment systems with strong privacy guarantees.
The Zerocash protocol, with some modiﬁcations,
is now
commercially deployed in several cryptocurrencies, including
Zcash [Zcaa]. Solidus [CZJ+17] enables customers of ﬁnancial
institutions (such as banks) to transfer funds to one another in
a manner that ensures that only the banks of the sender and
receiver learn the details of the transfer; all other parties (all
other customers and banks) only learn that a transfer occurred,
and nothing else. zkLedger [NVV18] enables anonymous
payments between a small number of distinguished parties
via the use of homomorphic commitments and Schnorr proofs.
None of these protocols support scripts (small programs that
dictate how funds can be spent), let alone arbitrary state
transitions as in Zexe.
Privacy beyond payments. Hawk [KMS+16], combining
ideas from Zerocash and the notion of an evaluator-prover
for multi-party computation, enables parties to conduct oﬄine
computations and then report their results via cryptographic
proofs. Hawk’s privacy guarantee protects the private inputs
used in a computation, but does not hide which computation
was performed. That said, we view Hawk as complementary to
our work: a user in our system could in particular be a semi-
trusted manager that administers a multi-party computation and
generates a transaction about its output. The privacy guarantees
provided in this work would then additionally hide which
computation was carried out oﬄine.
Zether [BAZ+19] is a system that enables publicly known
smart contracts to reason about homomorphic commitments
in zero knowledge, and in particular enables these to transact
in a manner that hides transaction amounts; it does not hide
the identities of parties involved in the transaction, beyond
a small anonymity set. Furthermore, the cost of verifying a
transaction scales linearly with the size of the anonymity set,
whereas in Zexe this cost scales logarithmically with the size
of anonymity set.
Succinct blockchains. Coda [MS18] uses arbitrary-depth
recursive composition of SNARKs to enable blockchain nodes
to verify the current blockchain state quickly. In contrast, Zexe
uses depth-2 recursive composition to ensure that all blockchain
transactions are equally cheap to verify (and are moreover
indistinguishable from each other), regardless of the cost of the
oﬄine computation. In this respect, Coda and Zexe address
orthogonal scalability concerns.
MPC with ledgers. Several works [ADM+14b; ADM+14a;
KMB15; KB16; BKM17; RCGJ+17] have applied ledgers to
obtain secure multi-party protocols that have security properties
that are diﬃcult to achieve otherwise, such as fairness. These
approaches are complementary to our work, as any set of
parties wishing to jointly compute a certain function via one
of these protocols could run the protocol “under” our DPC
scheme in such a way that third parties would not learn any
information that such a multi-party computation is happening.
Hardware enclaves. Kaptchuk et al. [KGM19] and Eki-
den [CZK+18] combine ledgers with hardware enclaves, such as
Intel Software Guard Extensions [MAB+13], to achieve various
integrity and privacy goals for smart contracts. Beyond ledgers,
several systems explore privacy goals in distributed systems by
leveraging hardware enclaves; see for example M2R [DSC+15],
VC3 [SCF+15], and Opaque [ZDB+17]. All of these works are
able to eﬃciently support rich and complex computations. In
this work, we make no use of hardware enclaves, and instead
rely entirely on cryptography. This means that on the one
hand our performance overheads are more severe, while on
the other hand we protect against a richer class of adversaries
(all eﬃcient ones). Moreover, the techniques above depend on
secure remote attestation capabilities, which have recently been
broken for systems like SGX [VBMW+19].
II. Technical challenges
We now describe the key technical challenges that arise when
trying to design a ledger-based system which achieves the goals
of this paper, namely enabling arbitrary oﬄine computations
while simultaneously providing privacy and succinctness.
Most of the challenges we face revolve around achieving
privacy. Indeed, if privacy is not required, there is a straight-
forward folklore approach that provides succinctness and low
veriﬁcation cost: each user accompanies the result reported in a
transaction with a succinct cryptographic proof (i.e., a SNARK)
attesting to the result’s correctness. Others who validate the
transaction can simply verify the cryptographic proof, and
do not have to re-execute the computation. Even this limited
approach rules out a number of cryptographic directions, such
as the use of Bulletproofs [BCC+16; BBB+18] (which have
veriﬁcation time linear in the circuit complexity), but can be