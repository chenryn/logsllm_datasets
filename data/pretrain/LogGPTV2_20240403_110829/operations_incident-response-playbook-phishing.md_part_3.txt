If the user has clicked the link in the email (on-purpose or not), then this action typically leads to a new process creation on the device itself. Depending on the device this was performed, you need perform device-specific investigations. For example, Windows vs Android vs iOS. In this article, we have described a general approach along with some details for Windows-based devices. If you are using Microsoft Defender for Endpoint (MDE), then you can also leverage it for iOS and soon Android.
You can investigate these events using Microsoft Defender for Endpoint.
1. **VPN/proxy logs**
    Depending on the vendor of the proxy and VPN solutions, you need to check the relevant logs. Ideally you are forwarding the events to your SIEM or to Microsoft Sentinel.
2. **Using Microsoft Defender for Endpoint**
    This is the best-case scenario, because you can use our threat intelligence and automated analysis to help your investigation. For more details, see [how to investigate alerts in Microsoft Defender for Endpoint](/windows/security/threat-protection/microsoft-defender-atp/investigate-alerts).
    The **Alert process tree** takes alert triage and investigation to the next level, displaying the aggregated alerts and surrounding evidences that occurred within the same execution context and time period.
    ![Example of the alert process tree](./media/incident-response-playbook-phishing/alertprocesstree.png)
3. **Windows-based client devices**
    Make sure you have enabled the [**Process Creation Events**](/windows/security/threat-protection/auditing/event-4688) option. Ideally, you should also enable [command-line Tracing Events](/windows-server/identity/ad-ds/manage/component-updates/command-line-process-auditing).
    On Windows clients, which have the above-mentioned Audit Events enabled prior to the investigation, you can check Audit Event 4688 and determine the time when the email was delivered to the user:
    ![Example of Audit Event 4688](./media/incident-response-playbook-phishing/eventproperties.png)
    ![Another example of Audit Event 4688](./media/incident-response-playbook-phishing/eventproperties1.png)
### On what endpoint was the email opened?
The tasks here are similar to the previous investigation step: [Did the user click links in the email?](#did-the-user-click-links-in-the-email)
### Was the attached payload executed?
The tasks here are similar to the previous investigation step: [Did the user click links in the email?](#did-the-user-click-links-in-the-email)
### Was the destination IP / URL touched or opened?
The tasks here are similar to the previous investigation step: [Did the user click links in the email?](#did-the-user-click-links-in-the-email)
### Was malicious code executed?
The tasks here are similar to the previous investigation step: [Did the user click links in the email?](#did-the-user-click-links-in-the-email)
### What sign-ins happened with the account?
Check the various sign-ins that happened with the account.
### Federated scenario
The audit log settings and events differ based on the operating system (OS) Level and the Active Directory Federation Services (ADFS) Server version.
See the following sections for different server versions.
#### Server 2012 R2
By default, security events are not audited on Server 2012 R2. You need to enable this feature on each ADFS Server in the Farm. In the ADFS Management console and select **Edit Federation Service Properties**.
![federatedproperties](./media/incident-response-playbook-phishing/Federatedservices.png)
You also need to enable the **OS Auditing Policy**.
Open the command prompt, and run the following command as an administrator.
```DOS
auditpol.exe /set /subcategory:"Application Generated" /failure:enable /success:enable
```
For more details, see [how to configure ADFS servers for troubleshooting](/previous-versions/windows/it-pro/windows-server-2003/cc738766(v=ws.10)?redirectedfrom=MSDN#BKMK_97).
You may want to also download the ADFS PowerShell modules from:
- [GitHub](https://github.com/Microsoft/adfsToolbox/tree/master/eventsModule)
- [Microsoft scriptcenter](https://github.com/Microsoft/adfsToolbox/tree/master/eventsModule)
#### Server 2016 and newer
By default, ADFS in Windows Server 2016 has basic auditing enabled. With basic auditing, administrators can see five or less events for a single request. But you can raise or lower the auditing level by using this command:
```powershell
Set-AdfsProperties -AuditLevel Verbose
```
For more details, see [auditing enhancements to ADFS in Windows server](/windows-server/identity/ad-fs/technical-reference/auditing-enhancements-to-ad-fs-in-windows-server).
If you have Microsoft Entra Connect Health installed, you should also look into the Risky IP report. The failed sign-in activity client IP addresses are aggregated through Web Application proxy servers. Each item in the Risky IP report shows aggregated information about failed AD FS sign-in activities that exceed the designated threshold.
:::image type="content" source="./media/incident-response-playbook-phishing/timestamp.png" alt-text="Example of the risky IP report":::
For more details, see [Risky IP report](/azure/active-directory/hybrid/how-to-connect-health-adfs-risky-ip).
#### Server 2012 R2
**Event ID 342** â€“ "The user name or password are incorrect" in the ADFS admin logs.
For the actual audit events, you need to look at the Security events logs and you should look for events with Event ID 411 for *Classic Audit Failure* with the source as *ADFS Auditing*. Also look for Event ID 412 on successful authentication.
**Event ID 411** - *SecurityTokenValidationFailureAudit Token* validation failed. See inner exception for more details.
![Example of an event 411](./media/incident-response-playbook-phishing/tokenvalidation.png)
![Example of an event 412](./media/incident-response-playbook-phishing/Event412.png)
You may need to correlate the Event with the corresponding Event ID 501.
#### Server 2016 and newer
For the actual audit events you need to look at the security events logs and you should look for events with look for Event ID 1202 for successful authentication events and 1203 for failures
Example for Event ID1202:
*Event ID 1202 FreshCredentialSuccessAudit The Federation Service validated a new credential. See XML for details.*
Example for Event ID 1203:
*Event ID 1203 FreshCredentialFailureAudit The Federation Service failed to validate a new credential. See XML for failure details.*
![Example of an event 1203](./media/incident-response-playbook-phishing/event1203.png)
![Example of an event 4624](./media/incident-response-playbook-phishing/Event4624.png)
To get the full list of ADFS Event ID per OS Level, refer to [GetADFSEventList](https://adfshelp.microsoft.com/AdfsEventViewer/GetAdfsEventList).
### Managed scenario
Check the Microsoft Entra sign-in logs for the user(s) you are investigating.
- Navigate to the [Microsoft Entra admin center > Sign-in](https://portal.azure.com/#blade/Microsoft_AAD_IAM/ActiveDirectoryMenuBlade/SignIns) screen
- Check the [sign-in activities](/graph/api/resources/signinactivity)
- Check the [PowerShell function on GitHub](https://github.com/poshchap/Azure-AD-Users-PoSh/blob/master/Get-AzureADUserLastSignInActivity.ps1)
In the Microsoft Entra admin center, navigate to the [Sign-ins](https://portal.azure.com/#blade/Microsoft_AAD_IAM/ActiveDirectoryMenuBlade/SignIns) screen and add/modify the display filter for the timeframe you found in the previous investigation steps as well as add the user name as a filter, as shown in this image.
:::image type="content" source="./media/incident-response-playbook-phishing/DisplayFilter.png" alt-text="Example of a display filter":::
You can also search using Graph API. For example, filter on **User properties** and get **lastSignInDate** along with it. Search for a specific user to get the last signed in date for this user.
For example, `https://graph.microsoft.com/beta/users?$filter=startswith(displayName,'Dhanyah')&$select=displayName,signInActivity`
Or you can use the PowerShell command `Get-AzureADUserLastSignInActivity` to get the last interactive sign-in activity for the user, targeted by their object ID. This example writes the output to a date and time stamped CSV file in the execution directory.
```powershell
Get-AzureADUserLastSignInActivity -TenantId 536279f6-1234-2567-be2d-61e352b51eef -UserObjectId 69447235-0974-4af6-bfa3-d0e922a92048 -CsvOutput
```
Or you can use this command from the AzureADIncidentResponse PowerShell module:
```powershell
Get-AzureADIRSignInDetail -UserId PI:EMAIL -TenantId 536279f6-1234-2567-be2d-61e352b51eef -RangeFromDaysAgo 29 -RangeToDaysAgo 3
```
### Investigate source IP address
Based on the source IP addresses that you found in the Microsoft Entra sign-in logs or the ADFS/Federation Server log files, investigate further to know from where the traffic originated.
### Managed user
For a managed scenario, you should start looking at the sign-in logs and filter based on the source IP address:
:::image type="content" source="./media/incident-response-playbook-phishing/managedusersip.png" alt-text="Example of a managed user IP address]":::
Or you can use this command from the AzureADIncidentResponse PowerShell module:
```powershell
Get-AzureADIRSignInDetail -IpAddress 1.2.3.4 -TenantId 536279f6-1234-2567-be2d-61e352b51eef -RangeFromDaysAgo 29 -RangeToDaysAgo 3 -OutGridView
```
When you look into the results list, navigate to the **Device info** tab. Depending on the device used, you'll get varying output. Here are a few examples:
- Example 1 - Un-managed device (BYOD):
  :::image type="content" source="./media/incident-response-playbook-phishing/unmanageddevice.png" alt-text="Example of a unmanaged device":::
- Example 2 - Managed device (Microsoft Entra join or Microsoft Entra hybrid join):
  :::image type="content" source="./media/incident-response-playbook-phishing/Manageddevice.png" alt-text="Example of a managed device":::
Check for the DeviceID if one is present. You should also look for the OS and the browser or *UserAgent* string.
:::image type="content" source="./media/incident-response-playbook-phishing/DeviceID.png" alt-text="Example of a device ID":::
Record the *CorrelationID*, *Request ID* and *timestamp*. You should use *CorrelationID* and *timestamp* to correlate your findings to other events.
### Federated user/application
Follow the same procedure that is provided for [Federated sign-in scenario](#federated-scenario).
Look for and record the *DeviceID, OS Level, CorrelationID, RequestID.*
### Investigate the identified DeviceID
This step is relevant for only those devices that are known to Microsoft Entra ID. For example, from the previous steps, if you found one or more potential device IDs, then you can investigate further on this device. Look for and record the *DeviceID* and *Device Owner*.
### Investigate each AppID
The starting point here are the sign-in logs and the app configuration of the tenant or the federation servers' configuration.
#### Managed scenario
From the previously found sign-in log details, check the *Application ID* under the **Basic info** tab:
:::image type="content" source="./media/incident-response-playbook-phishing/managedscenario1.png" alt-text="managedscenario":::
Note the differences between the Application (and ID) to the Resource (and ID). The application is the client component involved, whereas the Resource is the service / application in Microsoft Entra ID.
With this AppID, you can now perform research in the tenant. Here's an example:
```powershell
Get-MgApplication -Filter "AppId eq '30d4cbf1-c561-454e-bf01-528cd5eafd58'"
```
```Output
Id                                       AppId                                    DisplayName
3af6dc4e-b0e5-45ec-8272-56f3f3f875ad     30d4cbf1-c561-454e-bf01-528cd5eafd58     Claims X-Ray
```
With this information, you can search in the Enterprise Applications portal. Navigate to **All Applications** and search for the specific AppID.
:::image type="content" source="./media/incident-response-playbook-phishing/enterpriseapps.png" alt-text="Example of an application ID":::
## Additional incident response playbooks
Examine guidance for identifying and investigating these additional types of attacks:
- [Password spray](incident-response-playbook-password-spray.md)
- [App consent](incident-response-playbook-app-consent.md)
- [Microsoft DART ransomware approach and best practices](incident-response-playbook-dart-ransomware-approach.md)
## Incident response resources
- [Overview](incident-response-overview.md) for Microsoft security products and resources for new-to-role and experienced analysts
- [Planning](incident-response-planning.md) for your Security Operations Center (SOC)
- [Microsoft Defender XDR](/microsoft-365/security/defender/incidents-overview) incident response
- [Microsoft Defender for Cloud (Azure)](/azure/defender-for-cloud/managing-and-responding-alerts)
- [Microsoft Sentinel](/azure/sentinel/investigate-cases) incident response