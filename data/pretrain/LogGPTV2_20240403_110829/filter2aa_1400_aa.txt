### Apple Watch Jailbreaking: An In-Depth Analysis

#### July 27-30, 2017

**Speaker: Max Bazaliy**

Max Bazaliy is a security researcher at Lookout and the lead researcher on the Pegasus exploit chain. His expertise lies in advanced exploitation techniques, and he is a co-founder of the Fried Apple team. Max has also authored jailbreaks for iOS, tvOS, and watchOS.

### What is the Apple Watch?

- **Released in 2015**
- **Processor:** Apple S1/S2
- **Architecture:** ARMv7k (32-bit)
- **Features:**
  - Taptic Engine
  - 512 MB RAM
  - watchOS

### Why Jailbreak an Apple Watch?

Jailbreaking an Apple Watch provides several benefits, including:
- Access to the file system
- Ability to run tools like radare or Frida on the watch
- Potential as an attack vector for iPhones

### Apple Watch Security

The Apple Watch incorporates multiple layers of security:
- **Secure Boot Chain**
- **Mandatory Code Signing**
- **Sandboxing**
- **Exploit Mitigations**
- **Secure Enclave Processor (2nd generation only)**
- **Data Protection**

### Possible Attack Vectors

- **Malformed USB Descriptor Over Debug Port:**
  - Exploiting the debug port with malformed data.
- **Malformed Email, Message, Photo, etc.:**
  - Limited by the sandbox but can be more effective through application extensions, which provide more freedom in choosing bugs.

### Step-by-Step Jailbreaking Process

1. **Leak Kernel Base:**
   - Use vulnerabilities to leak the base address of the kernel.
2. **Dump Whole Kernel:**
   - Extract the entire kernel from memory.
3. **Find Gadgets and Set Up Primitives:**
   - Identify useful code sequences (gadgets) and set up necessary primitives.
4. **Disable Security Restrictions:**
   - Bypass the security measures to gain full access.
5. **Run SSH Client on the Watch:**
   - Enable remote access via SSH.

### Bugs of Interest

- **WatchOS 2.x:**
  - **CVE-2016-4656:** osunserialize bug
  - **CVE-2016-4669:** mach_port register bug
- **WatchOS 3.1.3:**
  - **CVE-2016-7644:** set_dp_control_port bug
  - **CVE-2017-2370:** voucher extract recipe bug

### Leaking Kernel Base

- **Vulnerabilities:**
  - **CVE-2016-4655 and CVE-2016-4680:**
    - **Issue:** Missing bounds checking in object constructors.
    - **Exploit:** Use an OSNumber object with a high number of bits to copy values from the stack, leading to kernel stack memory leakage.
    - **Trigger:** Can be triggered from within an appâ€™s sandbox.

### Dumping the Kernel

- **Problem:** No available WatchOS kernel dumps and no keys for WatchOS kernels.
- **Solution:**
  - Read the kernel as OSString chunks.
  - Use a vtable offset to fake an OSString.
  - The vtable is stored in the `__DATA.__const` section of the kernel.

### Getting the Vtable

- **Methods:**
  - **__DATA.__const Leak:**
    - The `__DATA.__const` address is in the Mach-O header.
    - Add 0x224 to the kernel base to get the `__DATA.__const` address.
    - Dereference and branch to the address via a fake vtable.
  - **Known Offset:**
    - Get the vtable offset from a similar XNU build.
    - Use a known delta from the `__DATA.__const` start.
    - Tune the address with a small adjustment.
  - **Next Free Node Trick:**
    - Mark OSString memory as free.
    - The next node pointer will be interpreted as a vtable.
    - A call to `retain()` will branch out of node bounds.
    - If the OSString size equals the `retain()` offset, it can branch to the start of the next node.
  - **Heap Spray and OOB Branch:**
    - Spray the heap with OSString objects.
    - Free a few OSStrings.
    - The next free chunk pointer is dereferenced as a vtable.
    - The free chunk is surrounded by OSStrings, allowing an out-of-bounds (OOB) branch to the vtable.

### Conclusion

Jailbreaking the Apple Watch involves a series of sophisticated steps, leveraging specific vulnerabilities and techniques. By understanding the security mechanisms and potential attack vectors, researchers can develop methods to bypass these protections and gain full control over the device.