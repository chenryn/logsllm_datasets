**作者：[Hcamael@知道创宇404实验室](http://0x48.pw)**  
**英文版本：**
感恩节那天，meh在Bugzilla上提交了一个exim的uaf漏洞：，这周我对该漏洞进行应急复现，却发现，貌似利用meh提供的PoC并不能成功利用UAF漏洞造成crash
#### 漏洞复现
首先进行漏洞复现
##### 环境搭建
复现环境：ubuntu 16.04 server
    # 从github上拉取源码
    $ git clone https://github.com/Exim/exim.git
    # 在4e6ae62分支修补了UAF漏洞，所以把分支切换到之前的178ecb：
    $ git checkout ef9da2ee969c27824fcd5aed6a59ac4cd217587b
    # 安装相关依赖
    $ apt install libdb-dev libpcre3-dev
    # 获取meh提供的Makefile文件，放到Local目录下，如果没有则创建该目录
    $ cd src
    $ mkdir Local
    $ cd Local
    $ wget "https://bugs.exim.org/attachment.cgi?id=1051" -O Makefile
    $ cd ..
    # 修改Makefile文件的第134行，把用户修改为当前服务器上存在的用户，然后编译安装
    $ make && make install
然后再修改下配置文件`/etc/exim/configure`文件的第364行，把 `accept hosts = :` 修改成 `accept hosts
= *`
##### PoC测试
从获取到meh的debug信息，得知启动参数：
    $ /usr/exim/bin/exim -bdf -d+all
PoC有两个:
  1. 
  2. 
需要先安装下pwntools，直接用pip装就好了，两个PoC的区别其实就是padding的长度不同而已
然后就使用PoC进行测试，发现几个问题：
  1. 我的debug信息在最后一部分和meh提供的不一样
  2. 虽然触发了crash，但是并不是UAF导致的crash
debug信息不同点比较：
    # 我的debug信息
    12:15:09  8215 SMTP>> 500 unrecognized command
    12:15:09  8215 SMTP> 250 1 byte chunk received
    12:15:09  8215 chunking state 0
    12:15:09  8215 SMTP> 501 missing size for BDAT command
    12:15:09  8215 host in ignore_fromline_hosts? no (option unset)
    12:15:09  8215 >>Headers received:
    12:15:09  8215 :
    ...一堆不可显字符
    **** debug string too long - truncated ****
    12:15:09  8215
    12:15:09  8215 search_tidyup called
    12:15:09  8215 >>Headers after rewriting and local additions:
    12:15:09  8215 :
    ......一堆不可显字符
    **** debug string too long - truncated ****
    12:15:09  8215
    12:15:09  8215 Data file name: /var/spool/exim//input//1eKcjF-00028V-5Y-D
    12:15:29  8215 LOG: MAIN
    12:15:29  8215   SMTP connection from (test) [10.0.6.18] lost while reading message data
    12:15:29  8215 SMTP>> 421 Lost incoming connection
    12:15:29  8215 LOG: MAIN PANIC DIE
    12:15:29  8215   internal error: store_reset(0x2443048) failed: pool=0      smtp_in.c  841
    12:15:29  8215 SMTP>> 421 Unexpected failure, please try later
    12:15:29  8215 LOG: MAIN PANIC DIE
    12:15:29  8215   internal error: store_reset(0x2443068) failed: pool=0      smtp_in.c  841
    12:15:29  8215 SMTP>> 421 Unexpected failure, please try later
    12:15:29  8215 LOG: MAIN PANIC DIE
    12:15:29  8215   internal error: store_reset(0x2443098) failed: pool=0      smtp_in.c  841
    12:15:29  8215 SMTP>> 421 Unexpected failure, please try later
    12:15:29  8215 LOG: MAIN PANIC DIE
    12:15:29  8215   internal error: store_reset(0x24430c8) failed: pool=0      smtp_in.c  841
    12:15:29  8215 SMTP>> 421 Unexpected failure, please try later
    12:15:29  8215 LOG: MAIN PANIC DIE
    12:15:29  8215   internal error: store_reset(0x24430f8) failed: pool=0      smtp_in.c  841
    12:15:29  8215 SMTP>> 421 Unexpected failure, please try later
    12:15:29  8215 LOG: MAIN PANIC DIE
    12:15:29  8215   internal error: store_reset(0x2443128) failed: pool=0      smtp_in.c  841
    12:15:29  8215 SMTP>> 421 Unexpected failure, please try later
    12:15:29  8215 LOG: MAIN PANIC DIE
    12:15:29  8215   internal error: store_reset(0x2443158) failed: pool=0      smtp_in.c  841
    12:15:29  8215 SMTP>> 421 Unexpected failure, please try later
    12:15:29  8215 LOG: MAIN PANIC DIE
    12:15:29  8215   internal error: store_reset(0x2443188) failed: pool=0      smtp_in.c  841
    12:16:20  8213 child 8215 ended: status=0x8b
    12:16:20  8213   signal exit, signal 11 (core dumped)
    12:16:20  8213 0 SMTP accept processes now running
    12:16:20  8213 Listening...
                 --------------------------------------------    # meh的debug信息
    10:31:59 21724 SMTP>> 500 unrecognized command
    10:31:59 21724 SMTP> 250 1 byte chunk received
    10:31:59 21724 chunking state 0
    10:31:59 21724 SMTP> 501 missing size for BDAT command
    10:31:59 21719 child 21724 ended: status=0x8b
    10:31:59 21719   signal exit, signal 11 (core dumped)
    10:31:59 21719 0 SMTP accept processes now running
    10:31:59 21719 Listening...
发现的确是抛异常了，但是跟meh的debug信息在最后却不一样，然后使用gdb进行调试，发现：
    RAX  0xfbad240c
    *RBX  0x30
    *RCX  0xffffffffffffffd4
     RDX  0x2000
    *RDI  0x2b
    *RSI  0x4b7e8e ◂— jae    0x4b7f04 /* 'string.c' */
    *R8   0x0
    *R9   0x24
    *R10  0x24
    *R11  0x4a69e8 ◂— push   rbp
    *R12  0x4b7e8e ◂— jae    0x4b7f04 /* 'string.c' */
    *R13  0x1a9
    *R14  0x24431b8 ◂— 0x0
    *R15  0x5e
    *RBP  0x2000
    *RSP  0x7ffd75b862c0 —▸ 0x7ffd75b862d0 ◂— 0xffffffffffffffff
    *RIP  0x46cf1b (store_get_3+117) ◂— cmp    qword ptr [rax + 8], rdx
    --------------     > 0x46cf1b     cmp    qword ptr [rax + 8], rdx
    ------------     Program received signal SIGSEGV (fault address 0xfbad2414)
根本就不是meh描述的利用UAF造成的crash，继续研究，发现如果把debug
all的选项`-d+all`换成只显示简单的debug信息的选项`-dd`，则就不会抛异常了
    $ sudo ./build-Linux-x86_64/exim -bdf -dd
    ......
     8266 Listening...
     8268 Process 8268 is handling incoming connection from [10.0.6.18]
     8266 child 8268 ended: status=0x0
     8266   normal exit, 0
     8266 0 SMTP accept processes now running
     8266 Listening...
又仔细读了一遍meh在Bugzilla上的描述，看到这句，所以猜测有没有可能是因为padding大小的原因，才导致crash失败的？所以写了代码对padding进行爆破，长度从0-0x4000，爆破了一遍，并没有发现能成功造成crash的长度。
> This PoC is affected by the block layout(yield_length), so this line:
> `r.sendline('a'*0x1250+'\x7f')` should be adjusted according to the program
> state.
所以可以排除是因为padding长度的原因导致PoC测试失败。
而且在漏洞描述页，我还发现Exim的作者也尝试对漏洞进行测试，不过同样测试失败了，还贴出了他的debug信息，和他的debug信息进行对比，和我的信息几乎一样。(并不知道exim的作者在得到meh的Makefile和log后有没有测试成功)。
所以，本来一次简单的漏洞应急，变为了对该漏洞的深入研究
#### 浅入研究
UAF全称是use after free，所以我在free之前，patch了一个printf：
    # src/store.c
    ......
    448 void
    449 store_release_3(void *block, const char *filename, int linenumber)
    450 {
    ......
    481    printf("--------free: %8p-------\n", (void *)bb);
    482    free(bb);
    483    return;
    484    }
重新编译跑一遍，发现竟然成功触发了uaf漏洞：
    $ /usr/exim/bin/exim -bdf -dd
     8334 Listening...
     8336 Process 8336 is handling incoming connection from [10.0.6.18]
    --------free: 0x1e2c1b0-------     8334 child 8336 ended: status=0x8b
     8334   signal exit, signal 11 (core dumped)
     8334 0 SMTP accept processes now running
     8334 Listening...
然后gdb调试的信息也证明成功利用uaf漏洞造成了crash：
    *RAX  0xdeadbeef
    *RBX  0x1e2e5d0 ◂— 0x0
    *RCX  0x1e29341 ◂— 0xadbeef000000000a /* '\n' */
    *RDX  0x7df
    *RDI  0x1e2e5d0 ◂— 0x0
    *RSI  0x46cedd (store_free_3+70) ◂— pop    rbx
    *R8   0x0
     R9   0x7f054f32b700 ◂— 0x7f054f32b700
    *R10  0xffff80fab41c4748
    *R11  0x203
    *R12  0x7f054dc69993 (state+3) ◂— 0x0
    *R13  0x4ad5b6 ◂— jb     0x4ad61d /* 'receive.c' */
    *R14  0x7df
    *R15  0x1e1d8f0 ◂— 0x0
    *RBP  0x0
    *RSP  0x7ffe169262b8 —▸ 0x7f054d9275e7 (free+247) ◂— add    rsp, 0x28
    *RIP  0xdeadbeef
    ------------------------------------------    Invalid address 0xdeadbeef
PS: 这里说明下`./build-Linux-x86_64/exim`这个binary是没有patch
printf的代码，`/usr/exim/bin/exim`是patch了printf的binary
到这里就很奇怪了，加了个printf就能成功触发漏洞，删了就不能，之后用`puts`和`write`代替了`printf`进行测试，发现`puts`也能成功触发漏洞，但是`write`不能。大概能猜到应该是stdio的缓冲区机制的问题，然后继续深入研究。
#### 深入研究
来看看meh在Bugzilla上对于该漏洞的所有描述：
    Hi, we found a use-after-free vulnerability which is exploitable to RCE in the SMTP server.
    According to receive.c:1783, 
    1783     if (!store_extend(next->text, oldsize, header_size))
    1784       {
    1785       uschar *newtext = store_get(header_size);
    1786       memcpy(newtext, next->text, ptr);
    1787       store_release(next->text);
    1788       next->text = newtext;
    1789       }
    when the buffer used to parse header is not big enough, exim tries to extend the next->text with store_extend function. If there is any other allocation between the allocation and extension of this buffer, store_extend fails.
    store.c
    276 if ((char *)ptr + rounded_oldsize != (char *)(next_yield[store_pool]) ||
    277     inc yield_length[store_pool] + rounded_oldsize - oldsize)
    278   return FALSE;
    Then exim calls store_get, and store_get cut the current_block directly.
    store.c
    208 next_yield[store_pool] = (void *)((char *)next_yield[store_pool] + size);
    209 yield_length[store_pool] -= size;
    210
    211 return store_last_get[store_pool];
    However, in receive.c:1787, store_release frees the whole block, leaving the new pointer points to a freed location. Any further usage of this buffer leads to a use-after-free vulnerability.
    To trigger this bug, BDAT command is necessary to perform an allocation by raising an error. Through our research, we confirm that this vulnerability can be exploited to remote code execution if the binary is not compiled with PIE.
    An RIP controlling PoC is in attachment poc.py. The following is the gdb result of this PoC:
    Program received signal SIGSEGV, Segmentation fault.
    0x00000000deadbeef in ?? ()
    (gdb)
     -------------------------------------------------------------    In receive.c, exim used receive_getc to get message.
    1831     ch = (receive_getc)(GETC_BUFFER_UNLIMITED);
    When exim is handling BDAT command, receive_getc is bdat_getc.
    In bdat_getc, after the length of BDAT is reached, bdat_getc tries to read the next command.
    smtp_in.c
     536 next_cmd:
     537   switch(smtp_read_command(TRUE, 1))
     538     {
     539     default:
     540       (void) synprot_error(L_smtp_protocol_error, 503, NULL,
     541     US"only BDAT permissible after non-LAST BDAT");
    synprot_error may call store_get if any non-printable character exists because synprot_error uses string_printing.
    string.c
     304 /* Get a new block of store guaranteed big enough to hold the
     305 expanded string. */
     306
     307 ss = store_get(length + nonprintcount * 3 + 1);
     ------------------------------------------------------------------    receive_getc becomes bdat_getc when handling BDAT data.
    Oh, I was talking about the source code of 4.89. In the current master, it is here:
    https://github.com/Exim/exim/blob/master/src/src/receive.c#L1790
    What this PoC does is:
    1. send unrecognized command to adjust yield_length and make it less than 0x100
    2. send BDAT 1
    3. send one character to reach the length of BDAT
    3. send an BDAT command without size and with non-printable character -trigger synprot_error and therefore call store_get
    // back to receive_msg and exim keeps trying to read header
    4. send a huge message until store_extend called
    5. uaf