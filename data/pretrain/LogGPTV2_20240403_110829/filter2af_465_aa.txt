**作者：崎山松形@RainSec**  
**本文为作者投稿，Seebug Paper 期待你的分享，凡经采用即有礼品相送！ 投稿邮箱：PI:EMAIL**
## 前言
最近在搞Iot的时候接触到Qiling框架，用了一段时间后感觉确实模拟功能挺强大的，还支持Fuzz，于是开始学习对Iot
webserver这样的程序进行Fuzz。
官方给出了类似的例子如Tenda AC15 的httpd的fuzz脚本，但是也就光秃秃一个脚本还是需要自己来一遍才能学到一些东西；因为面向的是Iot
webserver的Fuzz因此需要对嵌入式设备中常用web开源框架有一些了解，这里是对于Boa框架的fuzz案例。
**环境准备** ：
  * qiling-dev branch：这里并没有选择直接pip安装，方便修改源码
  * AFL++：在python中可以`import unicornafl`就行
        git clone https://github.com/AFLplusplus/AFLplusplus.git
        make -C AFLplusplus
        cd AFLplusplus/unicorn_mode ; ./build_unicorn_support.sh
  * 一个坑是最好获取版本高于3.15的`cmake`要不然编译的时候有些cmake参数识别有问题，我遇到的就是:`cmake -S unicorn/ -B unicorn/build -D BUILD_SHARED_LIBS=no`问题
  * 需要对Qiling，AFL有些了解
**Fuzz思路** ：
Iot设备就连环境模拟都比较棘手就就更别说Fuzz了，但是Qiling提供的`进程快照(snapshot)`功能给了我们一个不错的思路，这也是Qiling官方Fuzz案例的一个思路：
**即对某函数部分Fuzz(Partial Fuzz)**
## Tenda-AC15
Qiling使用4个脚本来实现对该款路由器上httpd程序的Fuzz
首先是`saver_tendaac15_httpd.py`用于保存fuzz的起始状态快照，主要代码如下：
    def save_context(ql, *args, **kw):
        ql.save(cpu_context=False, snapshot="snapshot.bin")
    def check_pc(ql):
        print("=" * 50)
        print("Hit fuzz point, stop at PC = 0x%x" % ql.arch.regs.arch_pc)
        print("=" * 50)
        ql.emu_stop()
    def my_sandbox(path, rootfs):
        ql = Qiling(path, rootfs, verbose=QL_VERBOSE.DEBUG)
        ql.add_fs_mapper("/dev/urandom","/dev/urandom")
        ql.hook_address(save_context, 0x10930)        # 2 and sys.argv[1] == "-t":
            main(sys.argv[2], enable_trace=True)
        else:
            main(sys.argv[1])
  * 恢复快照：ql.restore(snapshot="snapshot.bin")
  * 变异数据缓存定位：fuzz_mem=ql.mem.search(b"CCCCAAAA")
  * 以hook方式从起始地址附近的开始fuzz：ql.hook_address(callback=start_afl, address=0x10930+8)
最后开始Fuzz
    #!/usr/bin/sh
    AFL_DEBUG_CHILD_OUTPUT=1 AFL_AUTORESUME=1 AFL_PATH="$(realpath ./AFLplusplus)" PATH="$AFL_PATH:$PATH" ./AFLplusplus/afl-fuzz -i afl_inputs -o afl_outputs -U -- python3 ./fuzz_tendaac15_httpd.py @@
**说实话这样连最关键的fuzz范围`0x10930`，`0x7a0cc`怎么来的都不知道当时逆向定位这两个地址也是一头雾水毫无特征，还是得自己实操**
因此选定了Boa框架(之前了解过源码)从零开始对其进行Fuzz
## Boa Fuzz
选择一个网上有许多漏洞分析的设备：vivetok
摄像头，固件[链接](https://objects.githubusercontent.com/github-production-repository-file-5c1aeb/84257798/3128058?X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=AKIAIWNJYAX4CSVEH53A%2F20221208%2Fus-east-1%2Fs3%2Faws4_request&X-Amz-Date=20221208T052257Z&X-Amz-Expires=300&X-Amz-Signature=9a257e351faa9f25e49c6ddc70e3fe94bc94eed63d940d5c70fe1f71570f4120&X-Amz-SignedHeaders=host&actor_id=57476305&key_id=0&repo_id=84257798&response-content-disposition=attachment%3Bfilename%3DCC8160-VVTK-0100d.flash.zip&response-content-type=application%2Fx-zip-compressed)；而且webservre为Boa框架
Poc：
    echo -en "POST /cgi-bin/admin/upgrade.cgi HTTP/1.0\nContent-Length:AAAAAAAAAAAAAAAAAAAABBBBCCCCDDDDEEEEFFFFGGGGHHHHIIIIXXXX\n\r\n\r\n"  | ncat -v 192.168.57.20 80
**_Boa框架_** ：
主要处理逻辑在`process_requests`函数中：
               /*获取就绪队列并处理*/
        current = request_ready;
        while (current) {
            time(&current_time);
            if (current->buffer_end && /* there is data in the buffer */
                current->status != DEAD && current->status != DONE) {
                retval = req_flush(current);
                /*
                 * retval can be -2=error, -1=blocked, or bytes left
                 */
                if (retval == -2) { /* error */
                    current->status = DEAD;
                    retval = 0;
                } else if (retval >= 0) {
                    /* notice the >= which is different from below?
                       Here, we may just be flushing headers.
                       We don't want to return 0 because we are not DONE
                       or DEAD */
                    retval = 1;
                }
            } else {/*主要处理请求部分在这里*/
                switch (current->status) {
                case READ_HEADER:
                case ONE_CR:
                case ONE_LF:
                case TWO_CR:
                    retval = read_header(current);    //解析request头部，该函数类似与FILE_IO
                    break;                            //函数request内部有8192+1字节的buffer，data的头尾指针等，最终调用
                case BODY_READ:                       //bytes = read(req->fd, buffer + req->client_stream_pos, buf_bytes_left);读取
                    retval = read_body(current);
                    break;
                case BODY_WRITE:
                    retval = write_body(current);
                    break;
                case WRITE:
                    retval = process_get(current);
                    break;
                case PIPE_READ:
                    retval = read_from_pipe(current);
                    break;
                case PIPE_WRITE:
                    retval = write_from_pipe(current);
                    break;
                case DONE:
                    /* a non-status that will terminate the request */
                    retval = req_flush(current);
                    /*
                     * retval can be -2=error, -1=blocked, or bytes left
                     */
                    if (retval == -2) { /* error */
                        current->status = DEAD;
                        retval = 0;
                    } else if (retval > 0) {
                        retval = 1;
                    }
                    break;
                case DEAD:
                    retval = 0;
                    current->buffer_end = 0;
                    SQUASH_KA(current);
                    break;
                default:
                    retval = 0;
                    fprintf(stderr, "Unknown status (%d), "
                            "closing!\n", current->status);
                    current->status = DEAD;
                    break;
                }
            }
主要看中间的Switch case：
  * read_header：解析request头部，该函数类似FILE_IO函数
  * request内部有8192+1字节的buffer，data的头尾指针等，最终调用bytes = read(req->fd, buffer + req->client_stream_pos, buf_bytes_left);读取client发送的请求
  * 会提取并解析头部信息
  * 对于GET传参，主要使用read_header, read_from_pipe, write_from_pipe完成cgi的调用
  * 对于POST传参，主要调用read_header, read_body, write_body完成cgi调用
就拿read_header函数来说，厂商应该会在里面增加一些url过虑以及响应处理，在这个摄像头中漏洞也确实出在这个函数：
没有对`Content-Length`成员做限制； **根据源码中提示字符串`Unknown status (%d),
closing`可以轻松定位到这几个函数**:
那么接下来就尝试利用Qiling 启动这个程序并且Partial Fuzz函数"read_header"
### 模拟启动
**模拟启动的宗旨(我的)是遇到啥错误修最后一个报错点**
启动模板：
    import os, sys
    sys.path.append('/home/iot/workspace/Emulator/qiling-dev')
    from qiling import Qiling
    from qiling.const import QL_INTERCEPT, QL_VERBOSE
    def boa_run(path: list, rootfs: str, profile: str = 'default'):
        ql = Qiling(path, rootfs, profile=profile, verbose=QL_VERBOSE.OFF, multithread=False)
        """setup files"""
        ql.add_fs_mapper('/dev/null', '/dev/null')
        """hooks"""
        ql.run()
    if __name__ == '__main__':
        os.chdir('/home/iot/workspace/Emulator/qiling-dev/vivetok')
        path = ['./rootfs/usr/sbin/httpd', "-c", "/etc/conf.d/boa", "-d"]
        rootfs = './rootfs'
        profile = './boa_arm.ql'
        boa_run(path=path, rootfs=rootfs, profile=profile)
* * *
**尝试启动**
首先遇到的是：gethostbyname:: Success
在IDA中定位到：
函数原型：
    struct hostent *gethostbyname(const char *hostname);
    struct hostent{
        char *h_name;  //official name
        char **h_aliases;  //alias list
        int  h_addrtype;  //host address type
        int  h_length;  //address lenght
        char **h_addr_list;  //address list
    }
获取返回的结构体还挺复杂的，问题的原因是 在调用`gethostname`将获得 **ql_vm**
作为主机名所以当以此调用`gethostbyname`无法获得主机信息，所以hook这个函数，并提前开辟空间存放伪造信息：
    """
    struct hostent{
        char *h_name;  //official name
        char **h_aliases;  //alias list
        int  h_addrtype;  //host address type
        int  h_length;  //address lenght
        char **h_addr_list;  //address list
    }
    """
    def hook_memSpace(ql: Qiling):
        ql.mem.map(0x1000, 0x1000, info='my_hook')
        data = struct.pack('<IIIII', 0x1100, 0x1100, AF_INET, 4, 0x1100)
        ql.mem.write(0x1000, data)
        ql.mem.write(0x1100, b'qiling')
    def lib_gethostbyname(ql: Qiling):
        args = ql.os.resolve_fcall_params({'name':STRING})
        print('[gethostbyname]: ' + args['name'])
        ql.arch.regs.write('r0', 0x1000)
还有一个严重问题就是模拟过程中程序自动采用`ipv6`协议，这就很烦因为qiling的ipv6协议支持的不是很好
#### ipv6 socket
**_AttributeError: 'sockaddr_in' object has no attribute 'sin6_addr'_**
问题处在对ipv6的系统调用bind：
    elif sa_family == AF_INET6 and ql.os.ipv6:
        sockaddr_in6 = make_sockaddr_in(abits, endian)
        sockaddr_obj = sockaddr_in6.from_buffer(data)
        port = ntohs(ql, sockaddr_obj.sin_port)
        host = inet6_ntoa(sockaddr_obj.sin6_addr.s6_addr)
        if ql.os.bindtolocalhost:
            host = '::1'
        if not ql.os.root and port <= 1024:
            port = port + 8000
    def make_sockaddr_in(archbits: int, endian: QL_ENDIAN):
        Struct = struct.get_aligned_struct(archbits, endian)
        class in_addr(Struct):
            _fields_ = (
                ('s_addr', ctypes.c_uint32),
            )
        class sockaddr_in(Struct):
            _fields_ = (
                ('sin_family', ctypes.c_int16),
                ('sin_port',   ctypes.c_uint16),
                ('sin_addr',   in_addr),
                ('sin_zero',   ctypes.c_byte * 8)
            )
        return sockaddr_in
    def make_sockaddr_in6(archbits: int, endian: QL_ENDIAN):
        Struct = struct.get_aligned_struct(archbits, endian)
        class in6_addr(Struct):
            _fields_ = (