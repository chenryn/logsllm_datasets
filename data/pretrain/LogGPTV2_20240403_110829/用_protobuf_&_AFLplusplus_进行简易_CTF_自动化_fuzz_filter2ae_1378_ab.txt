          ProtoToDataHelper(stream, msg);
        }
        else {
          // printf("[afl_custom_post_process] LoadProtoInput Error\n");   
          // std::ofstream err_bin("err.bin");
          // err_bin.write((char*)buf, buf_size);
          // abort();
          // 如果加载失败，则返回 Exit Choice
          /// NOTE: 错误的变异 + 错误的 trim 将会导致 post process 加载失败，尤其是 trim 逻辑。
          /// TODO: 由于默认的 trim 会破坏样例，因此需要手动实现一个 trim，这里实现了一个空 trim，不进行任何操作
          ProtoToDataHelper(stream, menuctf::ExitChoice());
        }
        const std::string str = stream.str();
        uint8_t *new_buf = (uint8_t *) realloc((void *)saved_buf, str.size());
        if (!new_buf) {
          *out_buf = buf;
          return buf_size;
        }
        *out_buf = saved_buf = new_buf;
        memcpy((void *)new_buf, str.c_str(), str.size());
        return str.size();
      }
      int32_t  afl_custom_init_trim(void *data, uint8_t *buf, size_t buf_size) {
        /// NOTE: disable trim
        return 0;
      }
      size_t afl_custom_trim(void *data, uint8_t **out_buf) {
        /// NOTE: unreachable
        return 0;
      }
    }
  * 当然，编写上面的代码需要做一次又一次的测试，这里放上笔者的测试代码片段。这部分测试代码位于 `afl-libprotobuf-mutator/src/dump.cc`。 
        inline std::string slurp(const std::string& path) {
      std::ostringstream buf; 
      std::ifstream input (path.c_str()); 
      buf set_size(12);
          choice->set_content("[menuctf::AllocChoice]");
          msg.add_choice()->set_allocated_alloc_choice(choice);
        }
        // update 2 20 "[menuctf::UpdateChoice]"
        {
          auto choice = new menuctf::UpdateChoice();
          choice->set_idx(2);
          choice->set_size(20);
          choice->set_content("[menuctf::UpdateChoice]");
          msg.add_choice()->set_allocated_update_choice(choice);
        }
        // DeleteChoice 3
        {
          auto choice = new menuctf::DeleteChoice();
          choice->set_idx(3);
          msg.add_choice()->set_allocated_delete_choice(choice);
        }
        // ViewChoice 4
        {
          auto choice = new menuctf::ViewChoice();
          choice->set_idx(4);
          msg.add_choice()->set_allocated_view_choice(choice);
        }
        // ExitChoice
        {
          auto choice = new menuctf::ExitChoice();
          msg.add_choice()->set_allocated_exit_choice(choice);
        }
        std::ofstream output_file("output.bin", std::ios::binary);
        // 这里保存的 Serialize 必须使用 Partial 保存，
        msg.SerializePartialToOstream(&output_file);
        output_file.close();
      }
      // std::cout << "msg DebugString: " << msg.DebugString() << std::endl;
      std::stringstream stream;
      ProtoToDataHelper(stream, msg);
      std::cout << stream.str() << std::endl;
      return 0;
    }
  * 接下来只需在 `afl-libprotobuf-mutator` 文件夹下执行 `./build.sh && make`即可，完成后，在当前工作路径下将会生成 `dumper`、`libmutator.so`以及`mutator`三个文件。我们可以利用 dumper 对上面的代码进行测试，libmutator.so 用于 afl++ 中的自定义变异。
###  3\. 配置 AFL++
现在压力来到了 AFL++ 这里（笑），我们先试试看能不能马上跑起来。
尝试执行以下命令来构建 AFL++：
    # 构建 AFLplusplus
    # 1. 安装依赖项
    sudo apt-get update
    sudo apt-get install -y ninja-build build-essential python3-dev automake git flex bison libglib2.0-dev libpixman-1-dev python3-setuptools
    # try to install llvm 11 and install the distro default if that fails
    sudo apt-get install -y lld-11 llvm-11 llvm-11-dev clang-11 || sudo apt-get install -y lld llvm llvm-dev clang 
    sudo apt-get install -y gcc-$(gcc --version|head -n1|sed 's/.* //'|sed 's/\..*//')-plugin-dev libstdc++-$(gcc --version|head -n1|sed 's/.* //'|sed 's/\..*//')-dev
    # 2. 开始构建
    cd AFLplusplus
    make distrib # 这一步要等一段时间
    # sudo make install # 将 AFL++ 安装至本机
    # 如果不需要了可以使用 sudo make uninstall 卸载
###  4\. 运行
执行以下命令运行 AFL++：
    # AFL++ 构建完成后，进入 workdir 配置语料
    mkdir workdir
    [配置语料等等...]
    # 设置相关环境变量
    export AFL_CUSTOM_MUTATOR_ONLY=1 # 禁用除自定义 mutator 以外的其他自带 mutator
    export AFL_CUSTOM_MUTATOR_LIBRARY=../afl-libprotobuf-mutator/libmutator.so # 指定自定义路径
    export AFL_USE_QASAN=1  # 启用 QASAN
    # 运行 AFL++
    AFLplusplus/afl-fuzz -i workdir/fuzz_input -o workdir/fuzz_output -Q -- ./babyheap
别忘记在 workdir 中放点输入语料，语料可以通过 `afl-libprotobuf-mutator/dumper` 来随便生成一点。
运行时如果遇到 `afl-quemu-trace`
不存在，则单独执行`AFLplusplus/qemu_mode/build_qemu_support.sh` 构建即可。
## 三、源代码
相关源代码以及构建方式已开源至 [github](https://github.com/Kiprey/protobuf_ctf_fuzz) 上。
重申一下，该 fuzz 目前处于实验性版本，可能有亿点点不太稳定（笑）。
## 四、可改进的地方
  1. libprotobuf-mutator 的变异效果一般，最好手动改进一下
  2. 需要实现一下 trim 逻辑，空的 trim 逻辑可能会产生 **样例爆炸**
## 五、一些需要注意的点
如果在运行 AFL++ 后，发现 fuzz 始终无法发现新路径，即路径始终只有一个，那么就必须考虑 **目标CTF文件是否可执行** 。以当前的
babyheap2021 为例，笔者在测试时初始 AFL++ 状态如下：
尝试直接执行 babyheap，发现 `Permission Denied`无法执行。但即便赋以 excutable 权限，仍然无法执行，报错 `no
such file or directory`：
这一看，要么是架构问题，要么是 libc.so / ld.so 的问题。因此执行以下命令以更新 babyheap 所使用的 libc.so &
ld.so，之后便可以正常执行。
    patchelf --set-interpreter /lib64/ld-linux-x86-64.so.2 ./babyheap
    patchelf --replace-needed libc.so libc.so.6 ./babyheap
跑起来效果，还行？（不是很懂.jpg）