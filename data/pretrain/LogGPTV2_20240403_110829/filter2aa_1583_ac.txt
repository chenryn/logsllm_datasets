  SPFarm spfarm = new SPFarm(configDb); 
spfarm.​InitializationSettings​.Initialize(this.FarmInitializationSettingsFilePa
th); 
  spfarm.Update(); 
... 
Many
configuration
parameters
in
​SPFarm.InitializationSettings contain sensitive
information that can be used for future attacks, including the value of the already mentioned
ValidationKey​ - it is stored in the ​MachineValidationKey​ ​parameter, so let’s try to get it. 
SPFarm.InitializationSettings
property
is
public,
so
we
can
access
it
with
ControlParameter​: 
// Microsoft.SharePoint.Administration.SPFarm 
public SPFarmInitializationSettings InitializationSettings 
SPFarm​ ​instance can be taken from the ​Farm​ ​property of ​SPPersistedObject​: 
// Microsoft.SharePoint.Administration.SPPersistedObject 
public SPFarm Farm 
SPWebApplication ​Type is derived from ​SPPersistedObject so we can use it from the
WebApplication​ ​property of ​SPSite​: 
// Microsoft.SharePoint.SPSite 
public SPWebApplication WebApplication 
We will take ​SPSite​ ​from the ​Site​ ​property of ​SPWeb​: 
// Microsoft.SharePoint.SPWeb 
public SPSite Site 
Finally ​SPWeb​ ​is accessible with the ​Web​ ​property of ​TemplateBasedControl​: 
// Microsoft.SharePoint.WebControls.TemplateBasedControl 
public virtual SPWeb Web 
We can use its derived control ​TemplateControl​. 
Now our path to the desired property is ready: 
TemplateControl​.​Web​.​Site​.​WebApplication​.​Farm​.​InitializationSettings​[​MachineVal
idationKey​] 
The following is the site page that sends value of ​ValidationKey​ ​to ​attackersserver.com​: 
We successfully used this value for an unsafe deserialization attack by ViewState and could
execute arbitrary code on the target SharePoint Online server. 
Security problems during conversion of values to expected Types  
CVE-2020-1460 
As with other applications, CMS-like systems might have various types of security
problems, including SQL or Command injections, improper authentication or authorization,
and others. Although the list of potential problems is long, we would call attention to one
specific class of problems that looks quite promising for us (as attackers) in such systems.
We recommend reviewing each place where plain text or binary data is converted to an
object if the type or class of this object is under user control. Despite what mechanism(s)
are in place (.NET deserializers, JSON unmarshallers, TypeConverters, or other possible
mechanisms), we provided examples in ​one of our previous works​, that all of them have the
potential to be exploited. An attacker may just need to find the proper gadget(s) for their
successful exploitation. 
We found an example of such a problem in the SharePoint server and we were able to
perform an arbitrary code execution attack using it. We reported the details of this
vulnerability
to
Microsoft
and
it
was
successfully
reproduced,
confirmed
and
CVE-2020-1460 number was assigned. Unfortunately Microsoft has not released fixes for
all affected products before this whitepaper publication so we are going to publish the
details of this vulnerability later when these fixes are released. 
Time-of-check to time-of-use problems 
CVE-2020-1444 
In addition to a classical review of parser filters and other security controls and searching for
any bugs in their implementation, we highly recommend paying attention to actions on already
verified input before its actual use. Any actions that can modify an input value can cause
time-of-check to time-of-use (TOCTOU) issues and should invalidate the verification result. 
CVE-2020-1444 is a nice example of this type of security problem in the SharePoint server. 
This vulnerability exists in the ​/_layouts/15/WebPartEditingSurface.aspx​ page: 
//Microsoft.SharePoint.Publishing.Internal.CodeBehind.WebPartEditingSurfacePag
e 
protected override void OnLoad(EventArgs e) 
{ 
... 
    string ​text​ = 
DesignUtilities.FetchReqiredParamFromQueryString(base.Request, "​WebPartUrl​", 
"WebPartEditingSurfacePage"); 
    string previewPageContext = 
DesignUtilities.FetchReqiredParamFromQueryString(base.Request, "Url", 
"WebPartEditingSurfacePage"); 
... 
    string text3 = this.​GetWebPartMarkup​(text); 
    string webPartMarkup = 
WebPartEditingSurfacePage.​ConvertWebPartMarkup​(text3); 
    XElement xElement = 
WebPartEditingSurfacePage.​ConvertMarkupToTree​(webPartMarkup); 
    XElement xElement2 = xElement.Elements().First(); 
... 
    base.Component.MarkupTree = xElement; 
    if (!WebPartEditingSurfacePage.IsDWP(xElement2)) 
    { 
        ​text3​ = base.Component.ConvertMarkupTreeToControlMarkup(); 
        DesignUtilities.AddAngleBracketsForResourceString(xElement2); 
    } 
... 
        Control control = base.​ParseControl​(text3); 
        flag = DesignUtilities.IsControlContainsType(control, 
typeof(ScriptWebPart)); 
        if (flag) 
        { 
            this.webpartPreviewDiv.Controls.Add(control); 
... 
Notice that this method uses ​ParseControl(string content) without the second argument,
disabling the page parser filter. 
The value for this call to ​ParseControl can be taken from the Request parameter or from the
content of the uploaded document from the path defined in the ​WebPartUrl ​query parameter.
In both cases this content is user controlled: 
//Microsoft.SharePoint.Publishing.Internal.CodeBehind.WebPartEditingSurfacePag
e 
private string GetWebPartMarkup(string webPartUrl) 
{ 
    string text; 
    if (this.Page.IsPostBack) 
    { 
        text = 
this.Page.​Request.Form​[WebPartEditingSurfacePage.WebPartMarkupHiddenFieldName]
; 
        text = SPHttpUtility.HtmlDecode(text.Trim()); 
    } 
    else 
    { 
        text = this.currentWeb.​GetFileAsString​(webPartUrl); 
    } 
    return text; 
} 
The
​VerifyControlOnSafeList()
method,
discussed
previously,
is
called
in
webPartPagesWebService.ConvertWebPartFormat() to verify the input value against
unsafe controls​: 
//Microsoft.SharePoint.Publishing.Internal.CodeBehind.WebPartEditingSurfacePag
e 
private static string ConvertWebPartMarkup(string initialWebPartMarkup) 
{ 
    WebPartPagesWebService webPartPagesWebService = new 
WebPartPagesWebService(); 
    return webPartPagesWebService.​ConvertWebPartFormat​(initialWebPartMarkup, 
FormatConversionOption.ConvertToWebPartDesignerPersistenceFormat); 
} 
Now
our
input
can
be
considered
safe,
but
this
value
can
be
changed
by
the
WebPartEditingSurfacePage.ConvertMarkupToTree()​ method: 
//Microsoft.SharePoint.Publishing.Internal.CodeBehind.WebPartEditingSurfacePag
e 
internal static Regex ​tagPrefixRegex​ = new Regex("​​", RegexOptions.IgnoreCase 
| RegexOptions.Compiled); 
//Microsoft.SharePoint.Publishing.Internal.CodeBehind.WebPartEditingSurfacePag
e 
private static XElement ConvertMarkupToTree(string ​webPartMarkup​) 
{ 
    XElement xElement = new XElement("markup"); 
    DesignUtilities.AddPageDirective(xElement, "__designer", "SPD"); 
    MatchCollection matchCollection = 
WebPartEditingSurfacePage.tagPrefixRegex.Matches(webPartMarkup); 
    foreach (Match match in matchCollection) 
    { 
        webPartMarkup = ​webPartMarkup.Replace​(match.​Value​, ​""​); 
        string value = match.Groups["TagPrefix"].Value; 
        if (value == "cc1") 
        { 
... 
        } 
        else if (value != "asp") 
        { 
... 
        } 
    } 
    return DesignUtilities.SetMarkupTree(xElement, webPartMarkup); 
} 
If our input has a substring that matches the ​tagPrefixRegex ​pattern, the server removes it
and if it is an “​asp​” prefix it is not added to the ​PageDirective ​section. These modifications
might significantly change our input from a security point of view and allow us to inject
dangerous content that bypasses the ​VerifyControlOnSafeList()​ ​validation.  
Let’s consider the next input: 
​> 
{unsafe ASPX markup} 
VerifyControlOnSafeList() will pass this input because the entire snippet is one comment,
but after that ​WebPartEditingSurfacePage.ConvertMarkupToTree() ​transforms it into two
comments and ASPX​ ​markup: 
{unsafe ASPX markup} 
A successful attack input should be a valid XML value and we need at least one child of
ScriptWebPart Type in our ASPX markup. The payload that starts calculator can resemble the
following: 
​> 
]]> 
Now we can upload this payload as a site document and use its path in the ​WebPartUrl ​query
parameter. One last note – for a successful attack, we need to provide the ​Url ​query
parameter. It should contain the relative address of any file from the SharePoint DataBase with
the ​FieldId.AssociatedContentType field. For example, it can be any Master Page from a
Design Manager.  
Java Template Engines 
A ​Java ​template engine is a Java library that generates text output (HTML web pages, e-mails,
configuration files, source code, and other.) based on templates that mix static and dynamic
data. Templates are written in different languages (for example, the FreeMarker Template
Language (FTL)), which are normally simple, specialized languages that include a subset of the
Java language. 
To resolve the dynamic expressions (for example, ​“$user.name”​), the engine accesses Java
objects available in the Template Context and invokes Java methods to find the desired value
(for example, “user.name” invokes user.getName() to find the user’s name). Because the
evaluation of the template expressions involves the execution of Java methods, a user who can
write arbitrary templates could run arbitrary Java methods that could lead to security problems.
To prevent that, Engines implement different sandbox mechanisms that will try to prevent
arbitrary code execution. 
We focused our research on four of the most important template engines: FreeMarker, Velocity,
JinJava, and Pebble. All of these template engines have some sort of sandbox to prevent the
execution of arbitrary Java code. Other popular engines, such as Thymeleaf and Jelly, do not
have such protection and therefore gaining arbitrary code execution when controlling a template
is straightforward and out of scope for this paper. 
To prove the different vectors and bypasses, we tested them on ten different CMS-like
applications including Alfresco, Liferay, Crafter CMS, Ofbiz, Khoros (Lithium CMS), dotCMS,
Cascade CMS, Confluence, XWiki, and HubSpot CMS. 
In the following sections, we describe both the objects exposed to the Template Context
(Template API) and the sandbox weaknesses that can circumvent the protections and escape
the sandboxes. 
Engine-Independent Bypasses: Object Dumpster Diving 
The first approach to bypass the sandbox is to find an object in the template context that could
be used to gain arbitrary code execution and that is not forbidden by any of the sandbox
blocklist. These bypasses are engine-independent because they work on all templates, no
matter which engine is running them. 
As we mentioned before, CMS systems and sometimes the underlying frameworks store objects
in the template context. If we have access to the Java runtime, we can easily debug or
instrument the CMS to dump all the objects in the context and perform an analysis. If this is not
the case, we can still learn about the objects in the context by reading the Template API
documentation of the specific API (if any), brute-force common object names such as request,
req, response, resp, application, session, … or in some cases we can list context objects using
special
variables.
For
example, in the case of FreeMarker, we can use the special
.data_model​ variable to access all non-global variables in the context: 
    ${key} 
Or (depending on the FreeMarker version): 
${.data_model.keySet()} 
In Velocity, we can list all the context variables when the​ ​ContextToo​l​ is deployed: 
#foreach( $key in $context.keys ) 
    $key = $context.get($key) 
#end 
In JinJava ( 
{% endfor %} 
Some objects such as the ​HttpServletRequest​, ​HttpSession​, and ​ServletContext might
behave as object stores and give access to additional objects. For example, in Velocity, we can
list all these objects by doing the following  
  #foreach( $a in $request.getAttributeNames() ) 
    $a 
  #end 
  #foreach( $a in $request.getSession(true).getAttributeNames() ) 
    $a 
  #end 
  #foreach( $a in $request.getServletContext().getAttributeNames() ) 
    $a 
  #end 
If we get access to Servlet objects (request, response, session, context), we will normally
expand our gadget surface from a few objects to dozens of them. The following is an example of
the kind of attributes we can find in the ServletContext: 
As shown in the previous screenshot, the ServletContext gave us access to Tomcat resource
root, the Spring framework application context, an Instance manager, and the Spring dispatcher