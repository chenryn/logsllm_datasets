any third-party classiﬁers. More adventurous users who want to
experience extra functionality may install custom classiﬁers, but
will be prompted for additional permissions at the time of installa-
tion (Section 5.2).
3.3 Data Protection and Privacy
So far, our discussion of MOREPRIV has primarily focused on
the personalization beneﬁts of our approach.
In the rest of this
section, we focus on privacy-related advantages. In the past several
years, numerous projects have examined data leakage potential on
the mobile phone, including mobile information leakage [16, 20,
14], leading to privacy-enhancing technologies designed to guard
against such data leaks, such as AppFence [25].
We want to draw a contrast between that line of research and
MOREPRIV, which is envisioned as a privacy-by-design approach.
The goal of MOREPRIV is to incentivize the different constituents
of the mobile ecosystem into compliance. MOREPRIV can and
should be combined with privacy monitoring and privacy leak de-
tection tools, but we see that as an orthogonal concern.
Use of personae limits information leaks: At the core of the
MOREPRIV design is the use of personae, which provides a degree
of pseudonymity [30]. Sensitive data is distilled by MOREPRIV to
a restricted, deliberately coarse-grained persona, and is never given
to user mode apps directly [37]. A natural direction to consider is
implementing an information ﬂow restriction approach to mitigate
leaks of persona information. While many research efforts have
argued for information ﬂow and tainting approaches, in both static
and runtime ﬂavors at levels varying from hardware to the appli-
cation runtime, practicable adoption has been slow. We argue that
this is because it is very difﬁcult to deploy these systems without
causing numerous false positives or tolerating many false negatives.
Consequently, we choose not to following this path in MOREPRIV.
Data representation: Our implementation of MOREPRIV main-
tains a vector of persona weights for the user. This vector is main-
tained in memory and it potentially serialized as part of the OS
service that MOREPRIV implements. To make data maintenance
incremental, our implementation records two values for each per-
sona p (out of eight possible personae):
1. relevance: sum of interest scores from classiﬁer Cp, sp
2. support: number of elements that have been scored by Cp,
called np.
Intuitively, sp indicates a raw score of how closely the persona
matches the user, while np indicates the amount of evidence to sup-
port that score. The persona weight is given by the fraction sp/np.
Thus, only two data items per persona are stored. Note that these
vectors are never directly shared with user mode apps.
While this is not encouraged, in our model, apps are allowed
to leak the most relevant persona of the user if they so desire.
However, we consider the consequences of that to be relatively
benign, especially when compared to the current practice of user
monitoring built into many of today’s privacy-leaking apps [24].
MOREPRIV is designed to use a limited number of personae such
that each persona will be the most relevant for many users. Thus,
leaking the top persona of a user has a negligible contribution to-
wards identifying a user and does not identify any speciﬁc inter-
ests of the user. Those users that are particularly concerned about
leaking their top persona can still disable apps from accessing this
information.
Permissions: As we saw before, access to persona data in apps is
guarded with a runtime permission prompt, similar to that used for
obtaining location data. This is superior and more meaningful to
the user compared to installation-time permissions [17]. We be-
lieve that this is part of responsible disclosure: the user is informed
of persona data access and is given the opportunity to opt in. Fur-
thermore, access to MOREPRIV’s persona data requires statically
declared permissions at the level of application manifest. Just like
with location data, we can envision extra scrutiny, code reviews,
and testing being applied by the app store to apps that request per-
sona data.
Data synchronization: While the default storage strategy is to
keep the interest proﬁles local, on the current device, it is entirely
possible to synchronize them — in an encrypted form — with the
cloud. This is not unlike the approach used in Apple’s iCloud
for synchronizing application settings, etc. However, unlike ap-
plication settings, persona information encroaches on user privacy
considerably less. In addition to synchronization across multiple
devices, cloud synchronization also serves as a backup. This ap-
proach is used in several domains, including bookmark synchro-
nization, etc.
3.4 Value Proposition
Our goal with MOREPRIV is to provide an attractive value propo-
sition for all major categories of constituents within the mobile
ecosystem: users, developers, and third party data and ad providers.
We summarize the beneﬁts below.
Users: Recent user studies indicate that users often prefer client-
side personalization to alternatives [29]. Additionally, MOREPRIV
learns an accurate model of the user’s tastes and preferences with-
out the user having to “teach” or conﬁgure it. To make it easier
for users to understand, we model the way persona information is
surfaced to the user after GPS location data; the ﬁgure to the right
shows an example of a persona prompt within an app. Users can
audit persona information released to every application, to under-
stand when each release has taken place. Users can opt of of data
collection, either partially or entirely. Lastly, for users who are
strongly concerned about privacy, MOREPRIV is designed to be
combined with privacy-enhancing technologies.
Developers: The main advantage for app developers is the MOREPRIV
API. It represents a single OS-level data source for personalization
(as opposed to application-speciﬁc, ad-hoc information sources)
allow seamless and uniform functionality for a single user across
many applications, devices, and platforms. It is easy for developers
to use for personalization and skinning, as illustrated in Section 6.1.
The cold start problem [38] common in many personalization tasks
is largely addressed, because of an OS-wide user personalization
context, which apps can easily take advantage of. Finally, OS-wide
data collection for a single repository allows richer and more accu-
rate proﬁle information about the user to be collected, compared to
what any single application can accomplish.
Third-party and ad providers: Data providers are no longer re-
sponsible for storing “toxic” user data and cross-correlating it across
a set of user interactions. Given the mounting pressure by legisla-
tors in the US and Europe to limit the impact of online tracking as
well as mobile app tracking, this can be welcome news. Instead
of trying to engage in user proﬁling, which is 1) costly, because
it requires maintaining or buying data center capacity, developing
custom software, and paying data mining and support personnel,
and 2) cumbersome, because multiple laws of different localities
must be respected, and there is always a danger of being limited
later in time, a clear alternative is to use the information provided
natively, by the mobile OS [2, 1]. While some third-party provides
will certainly prefer to stick with the state of affairs, less entrenched
ones will ﬁnd the new approach attractive.
4.
IMPLEMENTATION
In order to test the effectiveness of personal preference min-
ers, we instrumented Windows Phone 7.5 (Mango) to capture sev-
eral important personalization signals, sources of data that indicate
likely user preferences. We then use these signals to locally classify
the user with respect to the given personae. There are two facilities
for personalizers in MOREPRIV: a privileged service to perform
automatic personalization within the OS, and a set of APIs that
give third-party applications limited access to the user interest pro-
ﬁle. We chose to implement MOREPRIV on top of the Windows
Phone operating system. Similar implementations on Android or
iOS may be possible, and we point out areas in which we take ad-
vantage of features of the Windows Phone and possible analogues
in other mobile operating systems. However, cross-platform results
are not the focus of our work.
4.1 Personalization Signals
In order to assign relevance scores to each persona, MOREPRIV
needs data to classify. Here, we leverage our position at the OS
level: all user information must pass through the operating system
in order to be consumed or produced by the user. However, one
must be careful of which data stream to collect: a poor choice can
slow down the device or introduce noise. One must also consider
how data is collected: the collection mechanism should be posi-
tioned at a level of abstraction such that the data has appropriate
context. For example, one may be interested in mining the text of
web pages that the user views, but if the miner interposes at a low
level of the protocol stack, bytes of text will be indistinguishable
from bytes of an image.
In our implementation, we capture ﬁve distinct personalization
signals: Facebook data, the Twitter feed, SMS messages, emails,
and HTTP trafﬁc. We brieﬂy discuss our approach to mining each
of these signals on Windows Phone, and we mention how equiva-
lent signals could be captured for an Android Device.
Facebook and Twitter: A unique feature of the Windows Phone
is that several popular networking features are integrated directly
into the operating system and organized into the People Hub. The
intention of the People Hub is to organize social updates in a single,
uniﬁed feed called the social feed, which is updated automatically.
The social feed is a good target for mining because it is a rich source
of structured user data. We implemented a miner for Facebook by
reading social feed data from the Facebook service, consisting of
“likes”, posts that the user made, and posts made to the user’s wall.
There is no direct analogue to the People Hub on Android. How-
ever, since the account credentials are stored in the
AccountManager, an Android device could make separate queries
through the APIs exposed by high-value services like Facebook and
Twitter, and classify the results of those queries. Note that this ap-
proach loses an advantages of MOREPRIV, namely that it does not
consume additional network bandwidth.
SMS: due to the simplicity and inherent lack of structure in SMS
messages, we implemented our miner by interposing on the SMS
handler in native code underlying the application framework. Alter-
natively, similar modiﬁcations can be made to the C# core libraries
to read SMS messages. To implement a similar miner in Android,
one could periodically query the ContentResolver for SMS con-
tent, and classify each SMS message in turn.
Email: Sending email is exposed to third party users via the
Microsoft.Phone.Tasks classes such as EmailComposeTask.
However, in order to simplify capture of both outgoing and incom-
ing email, we instead interpose on the internal implementation of
SMTP. Although we do not treat ﬁelds such as subject and sender
differently from text in the body, interposing on SMTP allows us to
avoid classifying noise, e.g. attached images.
HTTP Trafﬁc: Unlike SMS, HTTP trafﬁc has structure that cannot
be ignored. Fortunately, the Windows Phone passes information to
an HTTP handler which parses the structure of the message. By
interposing on the parser as it parses text, we can gather relevant
web text without adding signiﬁcant noise from non-textual trafﬁc.
These signals demonstrate an advantage of performing signal
capture at the Operating System level: since the OS and framework
have a very high level of privilege, the user must already trust these
components to handle personal data. As such, the signal capture
mechanisms are already within the user’s trusted computing base.
Instrumentation at the OS level has the unique advantage of being
able to integrate multiple data sources together. This is important
for several reasons. Even very rich data sources can suffer from a
cold-start problem, but are useful in aggregate.
To drive this point home, we conducted a study to see how strongly
a user with a high interest in technology would be classiﬁed as a
technophile. While we would expect this score to be high, the qual-
ity of different signals in isolation varies signiﬁcantly. However,
combining these signals together can boost the correct relevance
score even in the face of irrelevant signal data.
4.2 Building MOREPRIV Classiﬁers
Each MOREPRIV persona is represented by a Naive Bayesian
classiﬁer. We trained our classiﬁers ofﬂine on manually curated
lists of words obtained for web pages relevant to each proﬁle, e.g.,
techcrunch.com for technophile and espn.com for sports buff. An
alternative source of such pages are taxonomies such as the Open
Directory Project (ODP).
This resulted in thousands of words per persona, which were
subsequently used to obtain the probabilities P (wi|Cj) for each
attribute word wi and each persona Cj. This classiﬁcation data
was then loaded into an OS-level service.
Although building each classiﬁer can in principle be a difﬁcult
task, especially if a large training set is used, applying classiﬁcation
to a piece of text is very fast. For example, to ﬁnd the most relevant
proﬁle for a piece of text, we tokenize it into words and perform a
simple log-likelihood addition for each persona, maximizing over
that value.
4.3 Universal Personalization
In the context of MOREPRIV, we implemented automatic uni-
versal personalization within the OS. To accomplish this, we mod-
iﬁed the Windows Phone C# framework upon which apps are built.
We focused on reordering lists such that elements that are of the
most interest to the user are displayed at the top, while items of
less interest to the user are kept at the bottom. Widget classes like
System.Windows.Controls.ListBox, are (directly or via subclass)
used in many third party apps to display lists. Our modiﬁcation
changed the way in which list items are displayed on screen, order-
ing them by their relevance to the user proﬁle. In essence, this al-
lows lists to be transparently personalized without any modiﬁcation
(or knowledge) of the app. An important consideration for univer-
sal personalization is not to personalize “too much”. For example,
if automatic personalization were to be applied to an alphabetized
list, the alphabetic ordering would be lost. Thus, we detect if a list
has been sorted, and if so we do not use the personalized list order-
ing to draw elements, instead relying on the ordering of the internal
ItemSource list.
We have made a small number of changes to the Windows Phone
core C# classes to inform our universal personalization mechanism
that a list has been sorted, such as modifying the List.Sort()
method to keep a sorted ﬂag. When set, the ﬂag causes UI classes
like ListBox to display in their natural order. We emphasize that
universal personalization is often effective, but recognize that au-
tomatically restructuring UI is not always guaranteed to work. For
this reason, we allow universal personalization to be disabled through
the MOREPRIV management menu.
4.4 OS-level Service
Positioning MOREPRIV within the OS provides an opportunity
to collect a great deal of data to build a user interest proﬁle. How-
ever, it also provides an opportunity to perform personalization on
user-level apps without any modiﬁcation of the app itself.
To explore automatic personalization, we altered the Windows
Phone C# framework to reorder lists in the application UI, as de-
scribed in Section 4.3, based on the persona weights. For legacy
applications such as news readers, this has the effect of not only re-
ordering the order in which stories are displayed (stories more rele-
vant to the user’s interests are shufﬂed to the top), but also reorder-
ing entire categories of subjects such that the “technology news”
category page of a news reader app appears earlier in the menu
than the “arts section” for a technophile. Finally, users can control
how MOREPRIV is used by toggling two independent facilities:
Toggling personalization: When personalization is off, the user
will have the regular Windows Phone experience. When person-
alization is on, OS-level personalization is enabled and apps have
access to the user’s persona.