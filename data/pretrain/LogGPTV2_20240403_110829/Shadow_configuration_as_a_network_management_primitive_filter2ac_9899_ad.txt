### Shadow and PD Bits

The shadow bit (S) and the packet drop bit (PD) are used to indicate whether a payload can be dropped. For transit traffic, both S and PD are always set to 0. In IPv4 packets, the S bit is mapped to the low bit of the version field, while the PD bit uses an unused flag bit. This mapping ensures that routers not aware of the shadow protocol will automatically drop shadow packets.

### Additional Bits for Commitment

During the commitment phase, two additional bits are required: TP (tag present) and TG (tag). The TP bit is stored in the highest bit of the Type of Service (TOS) field, and the TG bit is stored in the next highest bit. For ARP packets, the highest four bits of the operation field in the ARP header are used to mark them. It is also possible to encode some or all of this information in a shim header.

### Packet Demultiplexing

Packets received by the kernel are demultiplexed based on the translation table and the tag assignment during the commitment phase. A reference to the appropriate configuration is stored in the packet's data structure for use in key parts of the TCP/IP stack, such as routing cache, FIB lookups, ICMP errors, and UDP/TCP demultiplexing.

### Support for Existing Programs

To support existing programs, a default configuration can be defined for a process, and this attribute is inherited by child processes. Sockets created by a process initially belong to the process's default configuration. This allows any program to be launched within the desired configuration.

### Configuration Shells

A shell is started for each configuration to enable an operator to apply changes to a specific configuration. The shell indicates whether its configuration is currently defined as the real or shadow configuration.

### Routing Processes and Tools

In most implementations, routing processes are normal user processes. Changes to networking configurations in the Linux kernel are primarily made using netlink sockets. By starting a routing process in the appropriate shell, its sockets are associated with that configuration, and the kernel interprets the changes as applying to that configuration. We configure Quagga and XORP to allow two instances to run concurrently, enabling both a shadow and real configuration to be deployed.

This technique is also applied to common network testing tools such as ping, traceroute, and custom scripts, allowing them to operate without modification. Our custom traffic generation and measurement programs also use this approach.

### Vendor-Specific Enhancements

Some vendors may add shadow-awareness directly to userspace processes, such as using a shared RIB to reduce memory overhead or adding features to traceroute. Others may prefer to minimize code changes.

### External Connectivity

Our implementation uses proxies to handle control plane connectivity outside of the srnet. This is necessary for incremental deployment and interdomain scenarios. These proxies can handle both normal operations and shadow commitment.

For example, in eBGP, if a BGP routing process `b` has a BGP peer `e` in another domain, there may be two BGP processes `br` and `bs` for the real and shadow configurations. A proxy `bp` is introduced to forward messages from `e` to both `br` and `bs`. When `br` sends a BGP message to `e`, it is forwarded through `bp`.

We use a transaction rollback technique to handle commitment with visible external effects. The proxy keeps a log of forwarded messages. If the network swaps the real and shadow configurations, `bp` computes the differences between `br` and `bs`, rolls back the unnecessary impacts of `br`, and installs the effects of `bs` without disconnecting the external BGP connection.

### Shadow-Aware Interfaces

Routers must drop shadow packets and untag transit packets before exiting the srnet. We enable a shadow-aware attribute on each interface participating in the srnet.

During commitment, egress traffic should not be delayed or dropped while waiting for the new configuration to query for the MAC address of the peering router outside the srnet. Thus, we configure the kernel to accept unsolicited ARP replies and duplicate any received ARP reply to the shadow configuration for interfaces with the shadow-aware attribute disabled.

### Evaluations

#### Methodology

- **Implementation**: We use our implementation as described in Section 7.
- **Configurations**: We use the configuration files of two operating networks: US-ISP (a large US tier-1 ISP) and Abilene. We use the US-ISP configurations for evaluating FIB size overhead and a small illustrative topology and an emulation of the Abilene backbone for other experiments.
- **Data Traffic**: We use CAIDA packet traces, removing packets for destination addresses not appearing in the BGP routes accepted by Abilene.
- **Performance Measurements**: We use a custom utility similar to iperf to timestamp generated packets and measure delay. The kernel is modified to deliver canceled packets to raw sockets.

#### Overhead

- **Data Path Forwarding Overhead**: Our results show negligible overhead on the data forwarding path due to the additional complexity of supporting a shadow configuration.
- **FIB Storage Overhead**: The number of FIB entries does not increase significantly for most networks, as network prefixes are relatively fixed and appear in both real and shadow configurations. We incur storage overhead only if the shadow and real configurations specify different next-hop behaviors.
- **FIB Update Overhead**: We evaluate the FIB update overhead for various scenarios, including the removal of single and multiple routers, and observe a small overall storage increase.

### Results

- **CPU Utilization**: The CPU utilization for varying traffic rates shows no significant increase compared to the standard kernel.
- **FIB Storage Overhead**: For the Abilene network, the FIB size increase due to configuration changes in the shadow configuration is less than 8%. For the US-ISP, the worst-case FIB storage increase is no more than 35%.

These results demonstrate that the overhead of supporting shadow configurations is minimal, making it suitable for production networks.