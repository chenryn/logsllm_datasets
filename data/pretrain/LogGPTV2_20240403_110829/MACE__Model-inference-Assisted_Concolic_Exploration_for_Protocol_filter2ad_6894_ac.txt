instead of a ﬁnite-state machine. A subsequential trans-
ducer can transduce a single input into multiple output
messages.
Once the exploration phase is done, we apply the ﬁlter
function to all newly found input and output sequences
s j and o j, and reﬁne the alphabet ΣIi by adding the mes-
sages returned by the ﬁlter function. More precisely:
Σ
I(i+1) ← ΣIi ∪[j
f (Mi, s j, o j)
In the next iteration, L∗ learns a new model Mi+1, a re-
ﬁnement of Mi, over the reﬁned alphabet Σ
I(i+1).
5 Implementation
In this section, we describe our implementation of
MACE. The L∗ component sends queries to and collects
responses from the analyzed server, and thus can be seen
as a client sending queries to the server and listening to
the corresponding responses. Section 5.1 explains this
interaction in more detail. Section 5.2 surveys the main
model inference optimizations, including parallelization,
caching, and ﬁltering. Finally, Section 5.3 introduces our
state-space exploration component, which is used as a
baseline for the later provided experimental results.
5.1 L∗ as a Client
Our implementation of L∗ infers the protocol state ma-
chine over the concrete input and abstract output mes-
sages. As a client, L∗ ﬁrst resets the server, by clearing its
environment variables and resetting it to the initial state,
and then sends the concrete input message sequences di-
rectly to the server.
Servers have a large degree of freedom in how quickly
they want to reply to the queries, which introduces non-
deterministic latency that we want to avoid. For one
server application we analyzed (Vino), we had to slightly
modify the server code to assure synchronous response.
We wrote wrappers around the poll and read system
calls that immediately respond to the L∗’s queries, mod-
ifying eight lines of code in Vino.
5.2 Model Inference Optimizations
We have implemented the L∗ algorithm with distributed
master-worker parallelization of queries. L∗ runs in the
master node, and distributes its queries among the worker
nodes. The worker nodes compute the query responses,
by sending the input sequences to the server, collecting
and abstracting responses, and sending them back to L∗.
Since model reﬁnement requires L∗ to make repeated
queries across iterations, we maintain a cache to avoid
re-computing responses to the previously seen queries.
L∗ looks up the input in the cache before sending queries
to worker nodes.
As L∗’s queries could trigger bugs in the server appli-
cation, responses could be inconsistent. For example, if
L∗ emits two sequences of input messages, s and t, such
that s is a preﬁx of t, then the response to s should be a
preﬁx of the response to t. Before adding an input-output
sequence pair to the cache, we check that all the preﬁxes
are consistent with the newly added pair, and report a
warning if they are inconsistent.
After each inference iteration, we analyze the state
machine to ﬁnd redundant messages (Deﬁnition 2) and
discard them. This is a simple, but effective, optimiza-
tion that reduces the load on the subsequent MACE it-
erations. This optimization is especially important for
inferring the initial state machine from the seed inputs.
5.3 State-Space Exploration
Our implementation of the state-space exploration con-
sists of two components: a shortest transfer sequence
generator and the state-space explorer. A shortest trans-
fer sequence generator is implemented through a simple
modiﬁcation of the L∗ algorithm. The algorithm main-
tains a data structure (called observation table [1]) that
contains a set of shortest transfer sequences, one for each
inferred state. We modify the algorithm to output this
set together with the ﬁnal model. MACE uses sequences
from the set to launch and initialize state-space explorers.
Our state-space explorer uses a combination of dy-
namic and symbolic execution [17, 25, 8, 7]. The imple-
mentation consists of a system emulator, an input gener-
ator, and a priority queue. The system emulator collects
execution traces of the analyzed program with respect
to given concrete inputs. Given a collected trace, the
input generator performs symbolic execution along the
traced path, computes the path-condition, modiﬁes the
path condition by negating predicates, and uses a deci-
sion procedure to solve the modiﬁed path condition and
to generate new inputs that explore different execution
paths. The generated inputs are then provided back to the
system emulator and the exploration continues. We use
the priority queue, like [18], to prioritize concrete traces
that are used for symbolic execution. The traces that visit
a larger number of new basic blocks, unexplored by the
prior traces, have higher priority.
The system emulator provides the capability to save
and restore program snapshots. To perform model-
assisted exploration from a desired state in the model,
we ﬁrst set the program state to the snapshot of the ini-
tial state. Then, we drive the program to the desired state
using the corresponding shortest transfer sequence, and
start dynamic symbolic execution from that state.
In all our experiments, we used the snapshot capability
to skip the server boot process. More precisely, we boot
the server, make a snapshot, and run all the experiments
on the snapshot. We do not report the code executed dur-
ing the boot in the line coverage results.
6 Evaluation
To evaluate MACE, we infer server-side models of two
widely-deployed network protocols: Remote Frame-
buffer (RFB) and Server Message Block (SMB). The
RFB protocol is widely used in remote desktop appli-
cations, including GNOME Vino and RealVNC. Mi-
crosoft’s SMB protocol provides ﬁle and printer shar-
ing between Windows clients and servers. Although the
SMB protocol is proprietary, it was reverse-engineered
and re-implemented as an open-source system, called
Samba. Samba allows interoperability between Win-
dows and Unix/Linux-based systems.
In our experi-
ments, we use Vino 2.26.1 and Samba 3.3.4 as reference
implementations to infer the protocol models of RFB and
SMB respectively. We discuss the result of our model in-
ference in Section 6.2.
Once we infer the protocol model from one reference
implementation, we can use it to guide state-space ex-
ploration of other implementations of the same proto-
col. Using this approach, we analyze RealVNC 4.1.2
and Windows XP SMB, without re-inferring the proto-
col state machine.
MACE found a number of critical vulnerabilities,
which we discuss in Section 6.3. In Section 6.4, we eval-
uate the effectiveness of MACE, by comparing it to the
baseline state-space exploration component of MACE
without guidance.
6.1 Experimental Setup
For our state-space exploration experiments, we used the
DETER Security testbed [4] comprised of 3GHz Intel
Xeon processors. For running L∗ and the message ﬁl-
tering, we used a few slower 2.27GHz Intel Xeon ma-
Vino is the default
remote desktop application in GNOME
distributions; RealVNC reports over 100 million downloads
(http://www.realvnc.com).
Program
(Protocol)
Vino
(RFB)
Samba
(SMB)
Iter.
|Q|
|ΣI|
|ΣO| Tot. Learning
Time (min)
1st
2nd
1st
2nd
3rd
7
7
40
84
84
8
12
40
54
55
7
8
14
24
25
142
8
2028
1840
307
Table 1: Model Inference Result at the End of Each Iter-
ation. The second column identiﬁes the inference itera-
tion. The Q column denotes the number of states in the
inferred model. The ΣI (resp. ΣO) column denotes the
size of the input (resp. output) alphabet. The last column
gives the total time (sum of all parallel jobs together) re-
quired for learning the model in each iteration, including
the message ﬁltering time. The learning process is incre-
mental, so later iterations can take less time, as the older
conjecture might need a small amount of reﬁnement.
chines. When comparing MACE against the baseline ap-
proach, we sum the inference and the state-space explo-
ration time taken by MACE, and compare it to running
the baseline approach for the same amount of time. This
setup gives a slight advantage to the baseline approach
because inference was done on slower machines, but our
experiments still show MACE is signiﬁcantly superior,
in terms of achieved coverage, found vulnerabilities and
exploration depth.
6.2 Model Inference and Reﬁnement
We used MACE to iteratively infer and reﬁne the pro-
tocol models of RFB and SMB, using Vino 2.26.1 and
Samba 3.3.4 as reference implementations respectively.
Table 1 shows the results of iterative model inference and
reﬁnement on Vino and Samba.
As discussed in Section 4.2, once MACE terminates,
we check the ﬁnal inferred model with sampling queries.
We used 1000 random sampling queries composed of 40
input messages each, and tried to reﬁne the state machine
beyond what MACE inferred. The sampling did not dis-
cover any new state in any experiment we performed.
Vino. For Vino, we collected a 45-second network
trace of a remote desktop session, using krdc (KDE Re-
mote Desktop Connection) as the client. During this ses-
sion, the Vino server received a total of 659 incoming
packets, which were considered as seed messages. For
abstracting the output messages, we used the message
type and the encoding type of the outbound packets from
the server. MACE inferred the initial model consisting of
seven states, and ﬁltered out all but 8 input and 7 output
/R1
S 0
1/R2
S 1
2/N
2 , 3 , 4 , 5 , 6 , 7 , 8 / T
1 , 3 , 4 , 5 , 6 , 7 , 8 / T
1,4,8/T
S 2
2/R3
5/R4
3 , 6 , 7 , 8 / N
1,2/T
5/R5
S 6
1,2/T
3 , 5 , 6 , 7 / R 3
S 3
4/N
3 , 4 , 6 , 7 , 8 / N
S 4
S 5
1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 / T
(a) Original Vino’s RFB Model Based on Observed Live Trafﬁc.
/R1
S 0
1/R2
S 1
2/N
2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 1 0 , 1 1 , 1 2 / T
1 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 1 0 , 1 1 , 1 2 / T
1 , 4 , 8 , 1 2 / T
S 2
2 , 9 / R 3
3 , 5 , 6 , 7 , 1 0 , 1 1 / R 3
1 1 / R 6
5/R4
3 , 6 , 7 , 8 / N
S 3
1 , 2 , 9 , 1 0 , 1 2 / T
S 6
1 , 2 , 9 , 1 0 , 1 2 / T
4/N
1 1 / R 6
5/R5
3 , 4 , 6 , 7 , 8 / N
S 4
S 5
1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 1 0 , 1 1 , 1 2 / T
(b) Final Vino’s RFB Model Inferred by MACE.
Figure 3: Model Inference of Vino’s RFB protocol. States in which MACE discovers vulnerabilities are shown in grey.
The edge labels show the list of input messages and the corresponding output message separated by the ‘/’ symbol.
The explanations of the state and input and output message encodings are in Figure 4.
messages, as shown in Figure 3a.
Using the initial inferred RFB protocol model, the
state-space explorer component of MACE discovered 4
new input messages and reﬁned the model with new
edges without adding new states (Figure 3b). We manu-
ally inspected the newly discovered output message (la-
bel R6 in Figure 3b) and found that it represents an out-
going message type not seen in the initial model.
Since MACE found no new states that could be ex-
plored with the state-space explorer, the process termi-
nated. Through manual comparison with the RFB pro-
tocol speciﬁcation, we found that MACE has discovered
all the input messages and all the states, except the states
related to authentication and encryption, both of which
we disabled in our experiments. Further, MACE found
all the responses to client’s queries.
We also performed an experiment with authentication
enabled (encryption was still disabled). With this con-
ﬁguration, MACE discovered only three states, because
it was not able to get past the checksum used during au-
thentication, but discovered an inﬁnite loop vulnerability
that can be exploited for denial-of-service attacks. Due
to space limits, we do not report the detailed results from
this experiment, only detail the vulnerability found.
Samba. For Samba, we collected a network trace
of multiple SMB sessions, using Samba’s gentest test
suite, which generates random SMB operations for test-
ing SMB servers. We used the default gentest conﬁgu-
ration, with the default random number generator seeds.
To abstract the outbound messages from the server, we
used the SMB message type and status code ﬁelds; er-
ror messages were abstracted into a single error message
type. The Samba server received a total of 115 input mes-
sages, from which MACE inferred an initial SMB model
with 40 states, with 40 input and 14 output messages (af-
ter ﬁltering out redundant messages).
In the second iteration, MACE discovered 14 new in-
put and 10 new output messages and reﬁned the initial
model from 40 states to 84 states. The model converged
in the third iteration after adding a new input and a new
output message without adding new states. Table 1 sum-
marizes all three inference rounds.
Manually analyzing the inferred state machine, we
found that some of the discovered input messages have
the same type, but different parameters, and therefore
have different effects on the server (and different roles
in the protocol). MACE discovered all the 67 message
types used in Samba, but the concrete messages gener-
ated by the decision procedure during the state-space ex-
ploration phase often had invalid message parameters, so
the server would simply respond with an error. Such re-
sponses do not reﬁne the model and are ﬁltered out dur-
ing model inference. In total, MACE was successful at
There are two other output message types that are triggered by the
server’s GUI events and thus are outside of our scope.
http://samba.org/∼tridge/samba testing/
Label Description
1
2
3
4
5
6
7
8
9
10
11
12
client’s protocol version
byte 0x01 (securityType=None, clientInit)
setPixelFormat message
setEncodings message