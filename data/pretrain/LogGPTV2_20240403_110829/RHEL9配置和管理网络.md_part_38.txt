::: titlepage
# []{#linux-traffic-control_configuring-and-managing-networking.html#available-qdiscs-in-rhel_linux-traffic-control}RHEL 中可用的 qdiscs {.title}
:::
每个 `qdisc`{.literal} 解决了唯一的与网络相关的问题。以下是 RHEL
中可用的 `qdiscs`{.literal} 列表。您可以使用以下 `qdisc`{.literal}
来根据您的网络要求创建网络流量。
::: table
[]{#linux-traffic-control_configuring-and-managing-networking.html#idm139934189356640}
**表 29.1. RHEL 中的可用调度程序**
::: table-contents
  `qdisc`{.literal} 名称                                                        包含在                             卸载支持
  ----------------------------------------------------------------------------- ---------------------------------- ----------
  异步传输模式(ATM)                                                             `kernel-modules-extra`{.literal}    
  基于类的队列                                                                  `kernel-modules-extra`{.literal}    
  Credit-Based Shaper                                                           `kernel-modules-extra`{.literal}   是
  CHOose 和 Keep 用于有响应的流量，CHOose 和 Kill 用于没有响应的流量（CHOKE）   `kernel-modules-extra`{.literal}    
  受控的延迟（CoDel）                                                           `kernel-core`{.literal}             
  Deficit Round Robin(DRR)                                                      `kernel-modules-extra`{.literal}    
  Differentiated Services marker (DSMARK)                                       `kernel-modules-extra`{.literal}    
  Enhanced Transmission Selection (ETS)                                         `kernel-modules-extra`{.literal}   是
  Fair Queue (FQ)                                                               `kernel-core`{.literal}             
  Fair Queuing Controlled Delay (FQ_CODel)                                      `kernel-core`{.literal}             
  Generalized Random Early Detection (GRED)                                     `kernel-modules-extra`{.literal}    
  Hierarchical Fair Service Curve (HSFC)                                        `kernel-core`{.literal}             
  Heavy-Hitter Filter (HHF)                                                     `kernel-core`{.literal}             
  Hierarchy Token Bucket (HTB)                                                  `kernel-core`{.literal}             
  INGRESS                                                                       `kernel-core`{.literal}            是
  Multi Queue Priority (MQPRIO)                                                 `kernel-modules-extra`{.literal}   是
  Multiqueue (MULTIQ)                                                           `kernel-modules-extra`{.literal}   是
  Network Emulator (NETEM)                                                      `kernel-modules-extra`{.literal}    
  Proportional Integral-controller Enhanced (PIE)                               `kernel-core`{.literal}             
  PLUG                                                                          `kernel-core`{.literal}             
  Quick Fair Queueing (QFQ)                                                     `kernel-modules-extra`{.literal}    
  Random Early Detection (RED)                                                  `kernel-modules-extra`{.literal}   是
  Stochastic Fair Blue (SFB)                                                    `kernel-modules-extra`{.literal}    
  Stochastic Fairness Queueing (SFQ)                                            `kernel-core`{.literal}             
  Token Bucket Filter (TBF)                                                     `kernel-core`{.literal}            是
  Trivial Link Equalizer (TEQL)                                                 `kernel-modules-extra`{.literal}    
:::
:::
::: {.important style="margin-left: 0.5in; margin-right: 0.5in;"}
### 重要 {.title}
`qdisc`{.literal} 卸载需要在 NIC 上支持硬件和驱动程序。
:::
::: itemizedlist
**其他资源**
-   `tc(8)、`{.literal} `cbq`{.literal}, cbs
    ,`cbs`{.literal},`choke`{.literal},`CoDel`{.literal},`drr`{.literal},`fq`{.literal},`htb`{.literal},`mqprio`{.literal},`netem`{.literal},`sfb`{.literal},`pfifo`{.literal},`tc-red`{.literal},`sfq`{.literal},`tbf`{.literal},
    `prio`{.literal} man page。``{.literal}
:::
:::
::: section
::: titlepage
# []{#linux-traffic-control_configuring-and-managing-networking.html#inspecting-qdisc-of-a-network-interface-using-the-tc-utility_linux-traffic-control}使用 tc 工具检查网络接口的 qdiscs {.title}
:::
默认情况下，Red Hat Enterprise Linux 系统使用 `fq_codel`{.literal}
`qdisc`{.literal}。这个步骤描述了如何检查 `qdisc`{.literal} 计数器。
::: orderedlist
**步骤**
1.  可选：查看您当前的 `qdisc`{.literal} ：
    \# [**tc qdisc show dev [*enp0s1*]{.emphasis}**]{.strong}
2.  检查当前的 `qdisc`{.literal} 计数器：
    ``` literallayout
    # tc -s qdisc show dev enp0s1
    qdisc fq_codel 0: root refcnt 2 limit 10240p flows 1024 quantum 1514 target 5.0ms interval 100.0ms memory_limit 32Mb ecn
    Sent 1008193 bytes 5559 pkt (dropped 233, overlimits 55 requeues 77)
    backlog 0b 0p requeues 0
    ....
    ```
:::
::: informalexample
::: itemizedlist
-   `丢弃`{.literal} - 由于所有队列已满而丢弃数据包的次数
-   `overlimits`{.literal} - 配置的链路容量已满的次数
-   `sent`{.literal} - 出队的数量
:::
:::
:::
::: section
::: titlepage
# []{#linux-traffic-control_configuring-and-managing-networking.html#updating-the-default-qdisc_linux-traffic-control}更新默认的 qdisc {.title}
:::
如果使用当前的 `qdisc`{.literal}
观察网络数据包丢失，您可以根据您的网络要求更改
`qdisc`{.literal}。您可以选择 `qdisc`{.literal}
来满足您的网络要求。这个步骤描述了如何更改 Red Hat Enterprise Linux
中的默认 `qdisc`{.literal}。
::: orderedlist
**步骤**
1.  查看当前的默认 `qdisc`{.literal} ：
    ``` literallayout
    # sysctl -a | grep qdisc
    net.core.default_qdisc = fq_codel
    ```
2.  查看当前以太网连接的 `qdisc`{.literal} ：
    ``` literallayout
    # tc -s qdisc show dev enp0s1
    qdisc fq_codel 0: root refcnt 2 limit 10240p flows 1024 quantum 1514 target 5.0ms interval 100.0ms memory_limit 32Mb ecn
    Sent 0 bytes 0 pkt (dropped 0, overlimits 0 requeues 0)
    backlog 0b 0p requeues 0
    maxpacket 0 drop_overlimit 0 new_flow_count 0 ecn_mark 0
    new_flows_len 0 old_flows_len 0
    ```
3.  更新现有的 `qdisc`{.literal} ：
    \# [**sysctl -w net.core.default_qdisc=pfifo_fast**]{.strong}
4.  要应用这些更改，重新载入网络驱动程序：
    \# [**rmmod [*NETWORKDRIVERNAME*]{.emphasis}**]{.strong}
    \# [**modprobe [*NETWORKDRIVERNAME*]{.emphasis}**]{.strong}
5.  启动网络接口：
    \# [**ip link set [*enp0s1*]{.emphasis} up**]{.strong}
:::
::: itemizedlist
**验证步骤**
-   查看以太网连接的 `qdisc`{.literal} ：
    ``` literallayout
    # tc -s qdisc show dev enp0s1
    qdisc pfifo_fast 0: root refcnt 2 bands 3 priomap  1 2 2 2 1 2 0 0 1 1 1 1 1 1 1 1
     Sent 373186 bytes 5333 pkt (dropped 0, overlimits 0 requeues 0)
     backlog 0b 0p requeues 0
    ....
    ```
:::
::: itemizedlist
**其他资源**
-   [如何在 Red Hat Enterprise Linux 中设置 `sysctl`{.literal}
    变量](https://access.redhat.com/solutions/2587){.link}
:::
:::
::: section
::: titlepage
# []{#linux-traffic-control_configuring-and-managing-networking.html#temporarily-setting-the-current-qdisk-of-a-network-interface-using-the-tc-utility_linux-traffic-control}使用 tc 工具临时设置网络接口的当前 qdisk {.title}
:::
您可以在不更改默认文件的情况下更新当前的
`qdisc`{.literal}。这个步骤描述了如何更改 Red Hat Enterprise Linux
中的当前 `qdisc`{.literal}。
::: orderedlist
**步骤**
1.  可选：查看当前的 `qdisc`{.literal} ：
    \# [**tc -s qdisc show dev [*enp0s1*]{.emphasis}**]{.strong}
2.  更新当前的 `qdisc`{.literal} ：
    \# [**tc qdisc replace dev [*enp0s1*]{.emphasis} root
    [*htb*]{.emphasis}**]{.strong}
:::
::: itemizedlist
**验证步骤**
-   查看更新的当前 `qdisc`{.literal} ：
    ``` literallayout
    # tc -s qdisc show dev enp0s1
    qdisc htb 8001: root refcnt 2 r2q 10 default 0 direct_packets_stat 0 direct_qlen 1000
    Sent 0 bytes 0 pkt (dropped 0, overlimits 0 requeues 0)
    backlog 0b 0p requeues 0
    ```
:::
:::
::: section
::: titlepage
# []{#linux-traffic-control_configuring-and-managing-networking.html#proc_permanently-setting-the-current-qdisk-of-a-network-interface-using-networkmanager_linux-traffic-control}使用 NetworkManager 永久设置网络接口的当前 qdisk {.title}
:::
您可以更新 NetworkManager 连接的当前 `qdisc`{.literal} 值。
::: orderedlist
**步骤**
1.  可选：查看当前的 `qdisc`{.literal} ：
    ``` literallayout
    # tc qdisc show dev enp0s1
      qdisc fq_codel 0: root refcnt 2
    ```
2.  更新当前的 `qdisc`{.literal} ：
    ``` literallayout
    # nmcli connection modify enp0s1 tc.qdiscs ‘root pfifo_fast’
    ```
3.  可选： 要在现有 `qdisc`{.literal} 中添加另一个
    `qdisc`{.literal}，请使用 `+tc.qdisc`{.literal} 选项：
    ``` literallayout
    # nmcli connection modify enp0s1 +tc.qdisc ‘ingress handle ffff:’
    ```
4.  激活更改：
    ``` literallayout
    # nmcli connection up enp0s1
    ```
:::
::: itemizedlist
**验证步骤**
-   查看当前的 `qdisc`{.literal} 网络接口：
    ``` literallayout
    # tc qdisc show dev enp0s1
    qdisc pfifo_fast 8001: root refcnt 2 bands 3 priomap  1 2 2 2 1 2 0 0 1 1 1 1 1 1 1 1
    qdisc ingress ffff: parent ffff:fff1 ----------------
    ```
:::
::: itemizedlist
**其他资源**
-   `nm-settings(5)`{.literal} man page
:::
:::
:::
[]{#getting-started-with-multipath-tcp_configuring-and-managing-networking.html}
::: chapter
::: titlepage
# []{#getting-started-with-multipath-tcp_configuring-and-managing-networking.html#getting-started-with-multipath-tcp_configuring-and-managing-networking}第 30 章 多路径 TCP 入门 {.title}
:::
多路径 TCP(MPTCP)是传输控制协议(TCP)的扩展。使用 Internet
协议(IP)，主机可以将数据包发送到目的地。TCP
可确保通过互联网可靠地提供数据，并自动调整其带宽以响应网络负载。
本节描述了如何：
::: itemizedlist
-   创建新的 MPTCP 连接
-   启用服务器使用 MPTCP
-   在内核中禁用 MPTCP
:::
它还包括使用 MPTCP 的优点。
::: section
::: titlepage
# []{#getting-started-with-multipath-tcp_configuring-and-managing-networking.html#mptcp-benefits_getting-started-with-multipath-tcp}MPTCP 的优点 {.title}
:::
多路径 TCP(MPTCP)设计改进了连接稳定性。请注意，在 MPTCP
术语中，链接被视为路径。
以下是 MPTCP 的优点：
::: itemizedlist
-   它允许连接同时使用多个网络接口。
-   如果连接绑定到一个链路速度，使用多个链接的使用量可提高连接吞吐量。请注意，如果连接绑定到
    CPU，则多个链接的使用情况会导致连接较慢。
-   它提高了链接故障的恢复能力。
:::
:::
::: section
::: titlepage
# []{#getting-started-with-multipath-tcp_configuring-and-managing-networking.html#preparing-rhel-to-enable-mptcp-support_getting-started-with-multipath-tcp}准备 RHEL 启用 MPTCP 支持 {.title}
:::
默认情况下，RHEL 中禁用了 MPTCP 支持。启用
MPTCP，以便支持这个功能的应用程序可以使用它。另外，如果应用程序默认有
TCP 套接字，则必须配置用户空间应用程序来强制使用 MPTCP 套接字。
::: title
**先决条件**
:::
安装以下软件包：
::: itemizedlist
-   `iperf3`{.literal}
-   `mptcpd`{.literal}
:::
::: orderedlist
**步骤**
1.  在内核中启用 MPTCP 套接字：
    ``` literallayout
    # echo "net.mptcp.enabled=1" > /etc/sysctl.d/90-enable-MPTCP.conf
    # sysctl -p /etc/sysctl.d/90-enable-MPTCP.conf
    ```
2.  启动 `iperf3`{.literal} 服务器，并强制它创建 MPTCP 套接字而不是 TCP
    套接字：
    ``` literallayout
    # mptcpize run iperf3 -s
    Server listening on 5201
    ```
3.  将客户端连接到服务器，并强制它创建 MPTCP 套接字而不是 TCP 套接字：
    ``` literallayout
    # mptcpize iperf3 -c 127.0.0.1 -t 3