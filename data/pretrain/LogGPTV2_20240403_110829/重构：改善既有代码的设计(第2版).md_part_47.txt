toString() {return "engineer";}
 static createEmployeeType(aString）{
return
如果重构到此为止的话，
switch(aString)
熟悉本书第1版的读者大概能看出，
+ this.toString().substr(1).toLowerCase();
default: throw new Error(^Employee cannot be of type ${aString});
case
case
case
"manager
 return new Engineer()
return
new
new
空的EmployeeType类可以去掉。但我更愿意留着
Salesman()
 Manager
，这个例子来自第1版的以State/Strategy取
（而且我也一直不喜欢那个老重构
---
## Page 447
甚至完全去除，这时子类就失去了价值。有时添加子类是为了应对未来的功能，
异编程的好工具。
动机
class Person {
class Person{
 get gendercode(） {return this._gendercode;}
12.7
子类很有用，
反向重构：以子类取代类型码（362)
曾用名：以字段取代子类（Replace Subclass with Fields)
移除子类（Remove Subclass）
但随着软件的演化，
 它们为数据结构的多样和行为的多态提供支持，
，子类所支持的变化可能会被搬移到别处,
 它们是针对差
---
## Page 448
class Person...
·使用以工厂函数取代构造函数（334），
的一个字段。
处太少，
被需要了。
结果构想中的功能压根没被构造出来，或者用了另一种方式构造，使该子类不再
// snip
constructor(name)
范例
（添加工厂函数、搬移类型检查），然后再逐个将它们折叠到超类中。
个判断逻辑放到超类的工厂函数中。
做法
测试。
删除子类。
将原本针对子类的类型做判断的函数改为使用新建的类型字段。
新建一
起来，然后用搬移函数（198）将其搬到超类。每次修改后执行测试。
如果有任何代码检查子类的类型，先用提炼函数（106）把类型检查逻辑包装
函数中。
本重构手法常用于一次移除多个子类，
子类存在着就有成本，阅读者要花心思去理解它的用意，
一开始，代码中遗留了两个子类。
如果构造函数的客户端用一个数组字段来决定实例化哪个子类，可以把这
一个字段，
就不值得存在了。此时，最好的选择就是移除子类，将其替换为超类中
用于代表子类的类型。
，把子类的构造函数包装到超类的工厂
此时需要先把这些子类都封装起来
所以如果子类的用
---
## Page 449
性别代码创建对象。
以工厂函数取代构造函数（334）。在这里，实现工厂有两种方式。
从而尽量减小对客户端代码的影响。对于“创建子类对象"而言，封装的方式就是
const numberofMales = people.filter(p => p instanceof Male).length;
客户端..
也不足以成为保留子类的理由。
子类中。在这个例子里，我找到一些客户端代码基于子类的类型做判断，不过这
有必要检查使用方代码是否有依赖于特定子类的行为，
function loadFromInput(data) {
function createFemale(name） {
function createMale(name) {
function createPerson(name) {
return new Female(name);
 return new Male(name);
 return new Person(name);
let p;
result.push(p);
switch
 虽然这是最直接的选择，但这样的对象经常是从输入源加载出来，直接根据
case
最直接的方式是为每个构造函数分别创建一个工厂函数。
每当想要改变某个东西的表现形式时，
如果子类就干这点儿事，
cas
!!
'M'
(aRecord.gender）
sult
那真的没必要存在。
，我会先将当下的表现形式封装起来，
，不过，
 这样的行为需要被搬移到
在移除子类之前，通常
---
## Page 450
class Person...
客户端..
function isMale(aPerson) {return aPerson instanceof Male;}
出来。
function loadFromInput(data) 
化"的逻辑提炼成工厂函数。
function createPerson(aRecord) {
function loadFromInput(data） {
function createPerson(aRecord) {
 return data.map(aRecord => createPerson(aRecord)); 
switch
return result;
:({
data.
const
return p;
 switch (aRecord.gender) {
let p;
一这从来不会是什么好味道。
default:
case
case
result.push(createPerson(aRecord));
case
提炼完工厂函数后，我会对这两个函数做些清理。先用内联变量（123）简
有鉴于此，我觉得更好的办法是先用提炼函数（106）把“选择哪个类来实例
然后用搬移函数（198）将其移到person类
工厂函数封装了子类的创建逻辑，
再用以管道取代循环（231）简化loadFromInput函数:
forEach(aRecord=>{
result = [];
 return new Person(aRecord.name)
Male
(aRecord.name);
，我用提炼函数（106）把这个类型检查逻辑提炼
但代码中还有一处用到instanceof运算符
---
## Page 451
class Person...
用性别代码字段。
厂函数，令其返回一个person对象，然后修改所有instanceof检查逻辑，改为使
男性或女性，但确实有些人不是这两种性别中的任何一种。忽视这些人的存在,
class Person...
码，直接用它也无妨。
杯茶的工夫就会被干掉，所以也不用太担心。）
function createPerson(aRecord) {
是
get gendercode(） {return this._gendercode;}
constructor(name,
中。
const numberofMales = people.filter(p => p.isMale).length;
客户端...
get isMale() {return this instanceof Male;}
 this.-gendercode = gendercode ll "x";
switch
 this._name
一个常见的建模错误。
1
 default: return new Person(aRecord.name);
case
case
 在初始化时先将其设置为默认值。
（对于“超类引用子类"这种情况，
此时我可以测试，删除Male子类，再次测试，然后对Female子类也如法炮
首先从“男性"的情况开始，将相关逻辑折叠到超类中。为此,
现在，
重构到这一步，
(aRecord
添加一个字段来表示子类之间的差异。既然有来自别处的一个类型代
return new.
name;
gendercode）{
new
所有与子类相关的知识都已经安全地包装在超类和工厂函数
 Female(aRecord.name)
通常我会很警惕，不过这段代码用不了
"M");
（顺便说一句，
虽然大多数人可以归类为
首先要修改工
---
## Page 452
class Person...
constructor(name, 
给所有情况都平等地分配类型代码-
function createPerson(aRecord) {
心。未来阅读代码的人会一直好奇背后的原因。所以我更愿意现在做点儿修改
function createPerson(aRecord) {
制
this._genderCode = genderCode Il "x";
this._
switch
switch 
default: return new Person(aRecord.name);
case
case
类型代码的分配有点儿失衡，
(aRecord
 return new Person(aRecord.name, 
 gendercode）{
.gender
new
默认情况没有类型代码，
name
一只要不会引入额外的复杂性就好。
 这种情况让我很烦
---
## Page 453
12.8
det
get
SS
id()
neadcount()
Employee
name()
annt
Employee
Depal
Party
otalAnn
me
ualcost()
rtment
提炼超类
LCo
extends Party 
ualcost(） {...}
extends
{..
{.
Party
（Extract Superclass）
人
---
## Page 454
·检查所有使用原本的类的客户端代码，考虑将其调整为使用超类的接口。
·为原本的类新建一个空白的超类。
单的做法，所以我会首选这个方案。即便选错了，也总有以委托取代超类
委托之间的选择，总之目的都是把重复的行为收拢一处。提炼超类通常是比较简
来的：我发现了一些共同元素，希望把它们抽取到一处，
关系的提示，
class Employee {
（399）这瓶后悔药可吃。
据“真实世界"的分类结构建立对象模型。真实世界的分类结构可以作为设计继承
处提炼到超类。我可以用字段上移（353）把相同的数据搬到超类，用函数上移
（name），也都有月度成本（monthly cost）和年度成本（annual cost）的概念:
范例
做法
（350）搬移相同的行为。
constructor(name， id， monthlycost） {
函数（106）将其提炼出来，再用函数上移（350）搬到超类。
一
检查留在子类中的函数，看它们是否还有共同的成分。如果有，可以先用提炼
逐一将子类的共同元素上移到超类。
_1
使用构造函数本体上移（355）、
测试。
this._monthlycost = monthlycost;
 this._name =.
很多技术作家在谈到面向对象时，
如果我看见两个类在做相似的事，可以利用基本的继承机制把它们的相似之
下面这两个类，
另一种选择就是提炼类（182）
如果需要的话，用改变函数声明（124）调整构造函数的签名。
，但还有很多时候，
name;
仔细考虑之下，是有一些共同之处的一
合理的继承关系是在程序演化的过程中才浮现出
、函数上移（350）和字段上移（353）手法，
 这两种方案之间的选择，
，认为继承必须预先仔细计划，
于是就有了继承关系。
一它们都有名字
，其实就是继承和
应该根
---
## Page 455
class Party...
数。
class Employee extends Party {
class Party {}
classDepartment{
 constructor(name, staff){
constructor(name, id, monthlycost） {
get totalAnnualcost(） {
get headcount() {
get totalMonthlyCost(）{
constructor(name,
get annualcost(） {
  ro' 
get monthlycost(） {return this._monthlycost;}
，我先用字段上移（353）把name字段搬到超类中。
this._staff = staff;
this. _name = name;
this._monthlycost
this._name
 return this.staff.length;
super();
return this.staff
this._staff = staff;
this._name = name;
在提炼超类时，我喜欢先从数据开始搬移，
首先创建一个空的超类，让原来的两个类都继承这个新的类。
可以为它们提炼一个共同的超类，
{return this._name;}
 name ;
e.monthlycost)
staff){
 = monthlycost;
更明显地表达出它们之间的共同行为。
 在JavaScript中就需要修改构造函
---
## Page 456
class Employee...