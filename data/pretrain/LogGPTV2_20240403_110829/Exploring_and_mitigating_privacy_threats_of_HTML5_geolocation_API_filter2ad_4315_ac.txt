whenever the sites access the geolocation (e.g., users should click
a button or type some search keywords to use LBSs.) Such user
interaction reminds users that they are granting their geolocation to
the web sites; they may deny it at that time to ensure privacy. Con-
sequently, the attackers would not demand such explicit interaction
when requesting geolocation, so we focus on geolocation requests
without user interaction.
Lastly, we assume that both the web sites providing LBSs and
the web browsers visiting the web sites have no vulnerability that
attackers can exploit. External attackers cannot inject a malicious
script into vulnerable web pages or exploit vulnerable web browsers
to access geolocation. For this reason, we do not consider solutions
to detect script injections and to mitigate vulnerabilities because
they are out of the scope of this paper.
5. PROPOSED SCHEME
In this section, we explain the proposed scheme for mitigating
the Geolocation API’s privacy threats. We implement the proposed
scheme on Android because it is popular and allows custom web
browsers unlike iOS.
5.1 Overall Design
We explain the overall design of the proposed scheme. When a
user visits a web page that contains a JavaScript code to execute
the Geolocation API, the proposed scheme handles the execution as
follows (Figure 5).
1. The proposed scheme checks whether the domain serving the
code exists in a per-domain permission database (DB). If the
domain exists in the DB and the user allows the domain, the
scheme goes to Step 2. If the domain does not exist in the
DB, it goes to Step 1a. If the user denies the domain, it goes
to Step 6.
1a. The proposed scheme checks whether the web page
Check Page PermissionCheck Domain PermissionPer-domain DBPositionTrackingExecute Error CallbackDecrease GeolocationAccuracyShow GeolocationDialogUpdate DBDeniedNonexistAllowedAllowedNonexistDeniedRetrieve GeolocationPer-page DBPositionnTrackingChangedGeolocationAPI CalledUnchangedOriginal functions ModifiedfunctionsNew functionsProcedureDB operation1a122a1c56Execute Callback3Verify Page Changes1bInspect Location Sensitivity42. The proposed scheme retrieves precise geolocation from the
OS (Android) and goes to Step 2a.
2a. The proposed scheme decreases geolocation accuracy
according to the allowed geolocation accuracy of the
domain/web page stored in per-domain/per-page DBs.
It then goes to Step 3.
3. The proposed scheme terminates while executing a success
callback function with (less accurate) geolocation. The web
page’s JavaScript code handles the remaining procedures such
as composing an HTML document and rendering.
4. The proposed scheme inspects the location sensitivity of the
web page to estimate the necessary geolocation degree. When
composing a Geolocation permission dialog, it uses the sensi-
tivity information. It then returns to Step 1c.
5. The proposed scheme updates DBs according to a user’s
choices and goes to Step 1 to re-initiate the procedures.
6. The proposed scheme terminates while executing an error
callback function when the user denies the domain/web page
demanding geolocation.
serving the code exists in a per-page permission DB. If
the web page exists in the DB and the user allows the
web page, the scheme goes to Step 1b. If the web page
does not exist in the DB, it goes to Step 1c. If the user
denies the web page, it goes to Step 6.
1b. The proposed scheme veriﬁes whether the web page
changes after obtaining permissions. If the degree of
changes exceeds a threshold value, it goes to Step 1c,
otherwise, it goes to Step 2.
1c. The proposed scheme composes an enhanced Geoloca-
tion permission dialog which asks the user to (1) either
allow or deny the domain/web page, (2) inspect the loca-
tion sensitivity of web page, (3) choose the geolocation
accuracy, and (4) grant either temporary or permanent
permissions. It then goes to either Step 4 or Step 5
according to the user’s choices.
We respectively apply the explained procedures to GetCurrent-
Position() and watchPosition() as we separate the per-
missions for position and tracking.
5.2
Inspecting Geolocation Web Pages
We explain how our web browser veriﬁes the changes in a web
page that uses the Geolocation API and measures the location sensi-
tivity of the web page.
5.2.1 Verifying web page changes
We verify the changes of web pages that have geolocation per-
missions because users may want to revoke the granted permissions
if they do not prefer the changed web pages or the web pages no
longer contain location-based content. For this goal, we need a
method to effectively identify the differences between the old and
current versions of web pages.
We use a context triggered piecewise hash algorithm [19], also
known as a fuzzy hash algorithm, to verify changes. This algorithm
divides a document into blocks based on triggers, computes hash
values of each block, and uses the list of hash values to compare
different documents. We use this algorithm to conﬁrm changes by
comparing the old and current versions of a rendered web page.
For image ﬁles, we use their histogram values and ﬁle sizes for
composing hash values.
We explain the procedure to verify web page changes. When our
web browser visits a web page for the ﬁrst time and a user allows the
web page to retrieve geolocation, the browser computes a hash value
of the web page and stores the hash value along with the current
geolocation in its DB. On subsequent visits, the browser additionally
opens the web page with the stored geolocation to compute a new
hash value of the web page. If the difference between the stored and
new hash values exceeds a threshold value, the browser may ask for
user permissions again.
When computing the hash value of a web page, our web browser
ignores dynamic content embedded in the page (e.g., a web banner)
because it frequently changes regardless of whether the main text of
the web page changes. The browser identiﬁes such dynamic content
by (1) visiting a web page several times in a short time period and
(2) inspecting changed content over the visits. Finally, the browser
computes hash values while excluding the dynamic content.
To lighten its burden, the web browser keeps a time-stamp of the
last visit to the web page and veriﬁes changes only when the elapsed
time from the last visit is above a certain time.
5.2.2 Estimating location sensitivity
Our web browser estimates the location sensitivity of web pages
by varying geolocation within a predeﬁned set of GPS coordinates
(§3.3) and verifying web page changes (§5.2.1). First, the web
browser extracts static content from a web page (i.e., excluding
banners). Second, the browser visits the web page several times
while using ﬁve different addresses that differ in street, city, state,
and country, respectively. Third, the browser veriﬁes the changes
of the rendered web pages to estimate location sensitivity. Lastly,
the browser announces the estimated location sensitivity to a user
for recommending privacy conﬁgurations. If the browser fails to
estimate the location sensitivity because web pages have location-
independent content, the browser notiﬁes random to a user. Visiting
a web page multiple times to enhance privacy is not a new idea.
[18, 27] have already considered similar techniques.
5.2.3 Concurrent inspection
Our web browser should visit a web page several times for inspec-
tion, so a user may need to wait a long time to check the inspection
result. We reduce the waiting time by concurrently inspecting a
web page. First, the browser simultaneously creates ﬁve WebView
activities for visiting a single web page with ﬁve different addresses
that differ in street, city, state, and country, respectively. Next, the
browser creates another WebView activity for visiting the web page
with one of the ﬁve addresses and extracts static content from the
two rendered web pages of the same address. Lastly, the browser
compares the static content with the ﬁve rendered web pages of
the different addresses, respectively, to estimate location sensitivity.
The overall inspection time is 1.8 times longer than page loading
time (details: §5.4.2).
5.3 Managing and Serving Geolocation
We explain how our web browser manages geolocation and serves
it to web pages. Our goal is to develop a portable and compatible
solution to the privacy problem of the Geolocation API. Our method,
overriding the Geolocation API, meets the goal because it modiﬁes
neither Android platforms nor JavaScript engines.
5.3.1 Modifying the Geolocation API
To implement our scheme, we modify the behavior of the Ge-
olocation API by overriding its JavaScript methods. We choose
an open-source web browser for Android, Lighting Browser [25],
relying on WebView [2]. WebView supports JavaScript and allows
developers to inject arbitrary JavaScript codes into a loaded web
page; we use these features to override the Geolocation API (we
discuss possible limitations of this approach in §6.1.)
Figure 6 shows a code snippet to change the behavior of the
WebView webview = (WebView) findViewById(R.id.
webview);
webview.getSettings().setJavaScriptEnabled(true);
webview.getSettings().setGeolocationEnabled(true)
;
webview.loadUrl("javascript:
navigator.geolocation.getCurrentPosition
= function(success) {

success( {
coords:{
latitude:"+dLatitude+",
longitude:"+dLongitude+",
},
timestamp:Date.now()
});
}"
);
webview.loadUrl(URL);
Figure 6: Java code to override the getCurrentPosition()
method using WebView. It enables JavaScript and the Geoloca-
tion API (), overrides getCurrentPosition() (), changes
location information (), and reloads the current web page ().
getCurrentPosition() method. First, the code enables both
JavaScript and the Geolocation API in WebView (). Also, an appli-
cation must acquire Android location permissions (ACCESS_FINE_
LOCATION, ACCESS_COARSE_LOCATION) or both, and imple-
ment an onGeolocationPermissionsShowPrompt() call-
back method to use the Geolocation API [1]. The callback method
pops up a permission dialog (§5.3.3) when a browser visits web
pages that use the Geolocation API, but are not in the web browser’s
per-domain nor per-page permission DBs. Second, the code over-
rides the getCurrentPostion() method with a custom func-
tion (). We use the loadUrl() method of WebView and the
javascript protocol for overriding, which enable arbitrary Java-
Script code execution within the scope of the current web page [22,
24]. Third, the code makes the custom function execute a suc-
cess callback function with degraded geolocation (dLatitude
and dLong-
itude) in accordance with a user’s choices (). Lastly, the code
reloads the current web page to activate the injected JavaScript
code (). The revised code for the watchPosition() method
is similar.
5.3.2 Enhancing permission manager
We implement a custom geolocation permission manager to en-
hance Android’s default geolocation permission manager (Geoloc-
ationPermissions class). Figure 7a shows a simpliﬁed dia-
gram representing how the default geolocation permission manager
works. When a web site attempts to use the Geolocation API, the
manager ﬁrst checks whether the permission state of the web site re-
sides in a DB ﬁle GeolocationPermissions.db (). If a cor-
responding record exists, the manager returns geolocation according
to the record. Otherwise, the manager calls geolocationPermi-
ssionsShowPrompt() () which eventually calls onGeoloc-
ationPermissionsShowPrompt() to show a permission di-
alog to obtain a user’s decision (). The manager receives the
decision () and ﬁnally records it in the DB ().
We extend the preceding procedure by adding a custom geolo-
cation permission manager as shown in Figure 7b. Unlike the
default manager, the custom manager distinguishes per-page and
(a) Default manager.
(b) Custom manager.
Figure 7: Procedures of default and custom geolocation permission
managers.
per-domain permissions, and executes a code to change geolocation
(§5.3.1; §5.3.5). The default manager always calls the custom man-
ager when a web site tries to use the Geolocation API because we
record no data in the GeolocationPermissions.db.
5.3.3 Designing permission dialog
We use onGeolocationPermissionsShowPrompt() to
design a new permission dialog (Figure 8), allowing us to intercept
and customize the dialog for requesting geolocation permissions [1].
First, the dialogs show whether a user currently uses per-page (Fig-
ure 8a) or per-domain (Figure 8b) permission models (). The
user can choose one of the permission models in browser settings.
Second, they show whether a current web page attempts to use
getCurrentPosition() or watchPosition() (). This
information is helpful for the user because conventional geolocation
dialogs do not distinguish the two different methods. Third, the
dialog of the per-page permission model (Figure 8a) displays the
estimated location sensitivity of the web page () when the user
touches an “Inspect web page” button. The user may refer the result
when choosing privacy settings. In contrast, the dialog of the per-
domain permission model (Figure 8b) does not have such a button
because our scheme does not verify the changes of a domain’s con-
tent (§5.3.4) Fourth, the dialogs allow the user to choose accuracy
options: pinpoint, city, state, country, and random (). If the user
selects the random, the geolocation becomes one of well-known
cities (e.g., New York, London, or Paris). Lastly, the dialogs allow
the user to either temporarily or permanently grant permissions to
the web page, or deny providing any geolocation ().
5.3.4 Managing permission DBs
Our web browser has two permission DBs: a per-page permission
DB and a per-domain permission DB. The per-page DB consists of
(1) the URL of a web page, (2) whether a user allows or denies the
web page to access geolocation, (3) degree of location accuracy the
user grants to the web page, (4) the fuzzy hash of the web page for
change veriﬁcation, (5) the geolocation when computing the fuzzy
hash, and (6) the (Unix) time when the web browser has visited the
queryPermissionState()GeolocationPermissionsGeolocationPermissions.dbrecordPermissionState()WebChromeClientPermission DialoggeolocationPermissionsShowPrompt()callbackonGeolocationPermissionsShowPrompt()decision (cid:140)(cid:141)(cid:142)(cid:143)(cid:144)(cid:141)queryPermissionState()recordPermissionState()GeolocationPermissionsGeolocationPermissions.dbWebChromeClientPermission DialoggeolocationPermissionsShowPrompt()callbackDo not recordCustomPermissionManagerPer-domain DBdecision queryrecordemptyshowalwaysonGeolocationPermissionsShowPrompt()Per-page DB(cid:140)(cid:141)(cid:142)(cid:143)(cid:144)(cid:145)(cid:146)(cid:147)(cid:148)(cid:141)information from the JSON ﬁle, e.g., “359 Broadway, New York,
NY 10007, USA” stored in the formatted_address ﬁeld.
Next, the web browser truncates the street information and the zip
code of the detailed address information, and obtains the correspond-
ing GPS coordinates by requesting http://maps.googleapis.
com/maps/api/geocode/json?address=New+York,
+NY,+USA&sensor=true. When the Google Geocoding API
successfully processes the request, the web browser receives a JSON
ﬁle that includes GPS coordinates, such as latitude 40.71435 and
longitude -74.00597, which point to the center of New York City.
Lastly, the web browser provides the degraded GPS coordinates to
the web page instead of the precise GPS coordinates. As a result, by
using the proposed method, users can hide their detailed geolocation
while assuring city-level accuracy.
Address caching. Using the Google Geocoding API for manipu-
lating address information has unavoidable network overhead: our
web browser should interact with the Google server whenever it vis-
its web pages that demand geolocation. To solve this problem, we
use an address caching method. Our web browser caches pinpoint-,
city-, state-, and country-level GPS coordinates obtained by the
address-aware geolocation manipulation in a DB. When a web page
granted either city-, state-, or country-level permissions attempts to
access geolocation while our browser’s current GPS coordinates are
close to some of the cached pinpoint GPS coordinates, the browser
uses the corresponding cached information of allowed accuracy. If
the browser’s current location is not close to any of the cached GPS
coordinates, it performs the address-aware geolocation manipulation
and updates the DB. We thereby minimize the network overhead
of using the Google Geocoding API. A number of studies identify
that a user’s location history does not suddenly change [26, 28], so
address caching is effective.
Suppressing the overﬂow of permission dialogs