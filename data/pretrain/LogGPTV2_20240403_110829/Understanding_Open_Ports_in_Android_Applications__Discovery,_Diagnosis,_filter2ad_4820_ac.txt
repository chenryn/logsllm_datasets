Our analysis reveals that 925 applications (52.3%) have over one million installations. Among these, 100 apps have even surpassed 100 million installs each. We conducted a more detailed examination of these 100 highly popular apps and selected 28 representative examples, which are presented in Table I. Notably, widely used applications such as Facebook, Instagram, Skype, WeChat, YouTube, Spotify, Netflix, and Plants vs. Zombies were found to have open ports.

An intriguing finding is that 89 out of the 925 popular apps (9.6%), including Firefox and Google Play Music (as shown in Table I), utilize UDP port 1900 and/or 5353 for UPnP and mDNS services, respectively. The timeline analysis of these open ports indicates that, for the top ten apps, both ports remain open for over a month, providing a substantial window of opportunity for potential adversaries to exploit. Bai et al. [83] have demonstrated that such ports in iOS and macOS applications can be vulnerable to Man-in-the-Middle attacks.

**Table II: Top Smartphone Vendors with Open-Port Apps**

| Vendor | # Apps |
| --- | --- |
| Samsung | 186 |
| LG | 75 |
| Sony | 69 |
| Qualcomm | 42 |
| MediaTek | 26 |
| Lenovo | 25 |
| Motorola | 21 |
| Huawei | 13 |
| ASUS | 13 |
| Xiaomi | 11 |

By using vendor-specific package keywords, we identified over 20 vendors whose built-in apps include open ports. Table II lists the top ten vendors based on the number of their built-in apps with open ports. Samsung, LG, and Sony lead the list with 186, 75, and 69 open-port apps, respectively. Given the large volume of devices sold by these vendors, it is likely that a significant portion of the smartphone market contains these built-in open ports. Analyzing the top five open ports for each vendor, we identified three primary reasons for the inclusion of these open ports in built-in apps:

1. **DHCP Broadcasts and IP Address Updates:**
   - More than half (489 apps, 64.8%) of these apps use UDP port 68 for receiving DHCP broadcasts and updating the host IP address. This port appears in all top ten device vendors and affects the largest number of built-in apps in each vendor. The median cumulative port-opening time is 32.3 hours per app, which can leak the host name of the phone. This issue was only fixed in the latest Android 8 [11].

2. **VoIP SIP Connections:**
   - Approximately one quarter (175 apps, 23.2%) have TCP/UDP port 5060 open for VoIP SIP connection setup. These apps are found in five device vendors: Samsung, LG, Lenovo, Qualcomm, and MediaTek. Upon inspection, many of these apps, such as `com.lenovo.powersetting`, `com.sec.knox.bridge`, `com.sec.automation`, and `com.qualcomm.location`, do not appear to require SIP capability. Additionally, 16 LG models and 41 Samsung models modify some Android AOSP apps (e.g., `com.android.settings` and `com.android.keychain`) to open port 5060. Other cases include Xiaomi's `com.android.browser` app opening TCP port 6000 and LG’s 18 system apps opening UDP port 19529. Most of these apps, such as `com.lge.shutdownmonitor` and `com.lge.keepscreenon`, generally have no networking functionality, suggesting that their open ports may be unnecessary.

3. **Network Discovery and Data Sharing:**
   - The remaining open ports are primarily used for network discovery and data sharing. Common port numbers include 1900 (UPnP) and 5353 (mDNS). Vendors also use custom ports for their own discovery and data sharing services. Examples include TCP ports 7080 and 8230 for Samsung’s Accessory Service, TCP ports 59150 and 59152 for LG’s Smart Share, and TCP port 5000 and UDP port 1024 for Sony’s DLNA technique. Our reverse engineering of Samsung Accessory uncovered a security bug, which is discussed in Section V-A.

### Pervasiveness and Effectiveness

The crowdsourcing results demonstrate the widespread presence of open ports in Android apps and the effectiveness of using crowdsourcing to discover them. For example, the number of apps found with TCP open ports (2,284 apps) is significantly higher than the 1,632 apps identified in previous research [52], which analyzed a set of 24,000 apps. To further quantify these metrics, we correlated the crowdsourcing results with two sets of apps used in static analysis.

To measure the pervasiveness of open ports, we crawled the top 9,900 free apps from Google Play in February 2017. This set includes the top 300 free apps from 33 Google Play categories, with all gaming apps consolidated into a single category. By comparing this set with the apps monitored by NetMon, we identified 3,216 apps (excluding vendor-built-in apps). Out of these, 492 apps (15.3%) presented TCP open ports, which is significantly higher than the 6.8% reported in a previous study based on static analysis [52].

To evaluate the effectiveness of our crowdsourcing approach, we prepared a baseline set of 1,027 apps from the public AndroZoo app repository [39]. According to our experimental results, only 58.9% of these apps could be detected by typical Android static analysis. Specifically, 25.1% of the apps use dynamic code loading or advanced code obfuscation, making them undetectable by pure static analysis. This indicates that crowdsourcing is much more effective than traditional static analysis for discovering open ports.

### Diagnosis via Static Analysis

While crowdsourcing is effective in discovering open ports, it does not provide code-level information for deeper understanding and diagnosis. To understand how open ports are constructed at the code level and their security implications, our pipeline (Figure 1) includes a diagnosis phase using OPTool, a static analysis tool we developed specifically for open-port diagnosis. Our goal is not to rediscover all open ports identified by crowdsourcing but to understand the major open-port usages by enhancing typical Android static analysis with open-port context and semantics. We focus on TCP open ports, as UDP open ports have more fixed usages, mainly for system-level networking services.

#### Open Port Construction and Analysis Objectives

At the code level, an open port on Android can be constructed in either Java or C/C++ native code. Native construction involves calling socket(), bind(), listen(), and accept() system calls sequentially, while Java construction initializes a ServerSocket object and calls the accept() API. The primary objectives of our static analysis are to:

1. **Differentiate "Live" and "Dead" Ports:**
   - Determine if the port construction constitutes a live port (one that is actively used) or a dead port (one that is never invoked).

2. **Identify Third-Party SDK Involvement:**
   - Determine if a third-party SDK is part of the call hierarchy, as many Android apps include various SDKs, especially for advertisements or analytics, which can introduce open ports without the developers' awareness.

This analysis is challenging because many networking libraries included in the app may contain open-port code that is never invoked by the host app. Therefore, we need a backward slicing analysis that accurately traces back to every node on the call hierarchy, considering calling contexts, class hierarchy, and implicit flows.

After a deeper analysis of Java constructions, we identified 11 open-port constructor APIs, as shown in Listing 1. These ServerSocket APIs, originally from Java SDK, have been directly ported to Android. A common way to invoke these APIs is to pass only the port number parameter, with the APIs automatically assigning the addr and backlog parameters. Interestingly, the default setting for addr is the ANY IP address instead of the local loopback.