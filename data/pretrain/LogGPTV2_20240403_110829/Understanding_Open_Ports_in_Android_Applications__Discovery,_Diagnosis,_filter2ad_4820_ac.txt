and ﬁnd that 925 apps (52.3%) have over one million installs.
Among them, 100 apps even have over 100M installs each.
We thus take a closer look at these 100 highly popular apps
and present 28 representatives of them in Table I. We can
see that popular apps such as Facebook, Instagram, Skype,
WeChat, YouTube, Spotify, Netﬂix, and Plants vs. Zombies
are surprisingly not free of open ports.
An interesting observation is that 89 out of the 925 popular
apps (9.6%), including Firefox and Google Play Music as listed
in Table I, use UDP port 1900 and/or 5353 for the UPnP
and mDNS services, respectively. Furthermore, the open-port
timeline analysis shows that both ports cumulatively last for
over a month for each of their top ten apps, which provides
enough time window for adversaries to launch attacks. In
particular, Bai et al. [83] has demonstrated that such ports
in iOS and OSX apps could suffer from Man-in-the-Middle
attacks.
8557262529971036139064105TCP (H:F)TCP (H:R)TCP (L:F)TCP (L:R)UDP (H:F)UDP (H:R)UDP (L:F)UDP (L:R)TABLE II: Top smartphone vendors that include open-port apps.
Top Five Open Port Numbers
6100
7080
5060
8382
1901
9000
32012
4500
50002
1900
6000
19529
59152
1900
5001
1900
4000
50001
Vendor
# Apps
Samsung
186
LG
Sony
Qualcomm
MediaTek
Lenovo
Motorola
Huawei
ASUS
Xiaomi
75
69
42
26
25
21
13
13
11
UDP:
TCP:
UDP:
TCP:
UDP:
TCP:
UDP:
TCP:
UDP:
TCP:
UDP:
TCP:
UDP:
TCP:
UDP:
TCP:
UDP:
TCP:
UDP:
TCP:
5060
5060
68
5060
68
5000
68
5060
68
5060
68
2999
68
2631
68
-
68
2222
68
6000
68
6100
1900
59150
1024
5900
5060
6100
5060
50001
5060
5060
32012
20817
1900
-
5353
5577
1900
8081
6000
8230
39003
39003
30020
4600
50003
52999
39003
-
-
-
-
-
-
-
-
-
-
-
-
-
50000
50001
16800
8108
11572
8258
5353
8682
50001
55283
-
-
-
-
-
-
-
11574
8282
8990
With vendor-speciﬁc package keywords, we identify over
20 vendors that
include open ports in their built-in apps.
Table II lists the top ten according to the number of built-in
apps with open ports. We can see that Samsung, LG, and Sony
are the top three vendors, with 186, 75, and 69 open-port apps,
respectively. Considering the huge numbers of phones sold by
these vendors, their built-in open ports are expected to exist
in a signiﬁcant portion of the entire smartphone market. By
analyzing each vendor’s top ﬁve open ports, we identify three
major reasons for including these open ports in these built-in
apps.
First, more than half (489 apps, 64.8%) of these apps3
contain UDP open port 68, which is for receiving DHCP
broadcasts and updating the host IP address. As shown in
Table II, UDP port 68 appears in all top ten device vendors,
and it often affects the largest number of built-in apps in each
vendor. Furthermore, we ﬁnd that opening UDP port 68 is
often long-lasting, with the median value of cumulative port-
opening time being 32.3 hours per app. This port can leak the
host name of the phone, which was ﬁxed only in the latest
Android 8 [11].
Second, about one quarter
(175 apps, 23.2%) have
for VoIP SIP
TCP/UDP port 5060 open, which is
from
connection setup [35]. These built-in apps
ﬁve device vendors: Samsung, LG, Lenovo, Qualcomm,
and MediaTek. By inspecting these apps, we ﬁnd that
quite a number of
seem to require the
SIP
com.lenovo.powersetting,
com.sec.knox.bridge, com.sec.automation, and
com.qualcomm.location, to name a few.
them do not
capability,
e.g.,
are
that
(e.g.,
and
apps
Moreover, we
surprisingly ﬁnd
16 LG models modify
com.android.settings
the
41 Samsung
some Android
models
and
AOSP
com.android.keychain)
open
port 5060. Other cases where Android AOSP apps are
customized to introduce open ports
include TCP port
6000 in Xiaomi’s com.android.browser app, and
UDP port 19529 opened by LG’s 18 system apps. Most
of
these apps, e.g., com.lge.shutdownmonitor and
com.lge.keepscreenon, generally have no networking
introduce
to
3Note that 175 of them also contain other ports.
6
functionality. This suggests that their open ports could be
unnecessary. We leave an in-depth analysis of these cases to
our future work.
Third, the rest of the open ports are mainly for network
discovery and data sharing. Besides common port numbers
such as 1900 (UPnP) and 5353 (mDNS), vendors use custom
ports to implement
their own discovery and data sharing
services. Examples include TCP ports 7080 and 8230 for
Samsung’s Accessory Service [30], TCP port 59150 and 59152
for LG’s Smart Share [22], and TCP port 5000 and UDP port
1024 for Sony’s DLNA technique [33]. We reverse engineer
Samsung Accessory and identify a security bug; see Sec. V-A.
3) Pervasiveness and Effectiveness: The crowdsourcing
results presented above have demonstrated the pervasiveness
of open ports in Android apps and the efﬁcacy of using crowd-
sourcing to discover open ports. For example, the number of
apps found with TCP open ports (2,284 apps) is signiﬁcantly
more than that found in the state-of-the-art research [52] (1,632
apps), which is based on a large set of 24,000 apps. To further
quantify those two metrics, we correlate the crowdsourcing
results with two sets of apps used in static analysis.
To quantify the open-port pervasiveness, we crawled a
set of top 9,900 free apps from Google Play in February
2017 (ﬁtting the period of our crowdsourcing). These apps
are comprised of the top 300 free apps from 33 Google Play
categories, with all gaming apps consolidated into a single
category. By looking into the overlapping of this set and the
apps monitored by NetMon, we count a total of 3,216 apps
(with vendor built-in apps excluded). Out of these 3,216 apps,
our results show that 492 of them present TCP open ports, i.e.,
15.3% of pervasiveness, which is signiﬁcantly higher than a
previous report (6.8%) based on static analysis [52].
To quantify the effectiveness of our crowdsourcing ap-
proach, we ﬁrst prepare a baseline set of apps. Out of the
2,284 TCP open-port apps (some are built-in apps) discovered
by crowdsourcing, we are able to obtain 1,027 apps from
the public AndroZoo app repository [39]. According to the
experimental results in Sec. IV-C, only 58.9% of these apps
can be detected by typical Android static analysis. In particular,
25.1% of them use dynamic code loading [65] or advanced
code obfuscation [78]. They are therefore not possibly detected
by a pure static analysis [46], [67]. This indicates that crowd-
sourcing is much more effective than Android static analysis
in the context of open port discovery.
IV. DIAGNOSIS VIA STATIC ANALYSIS
While crowdsourcing is effective in discovering open ports,
it does not reveal the code-level information for more in-
depth understanding and diagnosis. To understand how open
ports are actually constructed at the code level and its security
implication, our pipeline (Fig. 1) includes a diagnosis phase
through OPTool, a static analysis tool we develop speciﬁcally
for the open-port diagnosis. Note that the goal of our diagnosis
is not to rediscover (and analyze) all open ports identiﬁed
by our crowdsourcing as we have shown that crowdsourcing
is more effective for port discovery. Instead, we aim to
understand the major open-port usages by enhancing typical
Android static analysis with open-port context and semantics.
As a result, we limit our static analysis to TCP open ports
as similar to OPAnalyzer [52], since UDP open ports have
much more ﬁxed usages (mainly for providing system-level
networking services) as we have seen in Sec. III-C. In addition,
overcoming the common difﬁculties in existing Android static
analysis (e.g., dealing with dynamic or reﬂected codes) is also
not our focus.
In this section, we ﬁrst cover the background of code-level
open port construction and the objectives of our analysis (Sec.
IV-A), and then present the details of our static analysis tool
OPTool (Sec. IV-B). Finally, we present the experiments we
have performed (Sec. IV-C) and the diagnosis results (Sec.
IV-D and Sec. IV-E).
A. Open Port Construction and Our Analysis Objectives
At
the code level, an open port on Android could be
constructed in either Java or C/C++ native code. The na-
tive construction is similar to the traditional server-side pro-
gramming by calling socket(), bind(), listen(), and
accept() system calls sequentially, while the Java construc-
tion is to simply initialize a ServerSocket object and call
the accept() API. The ﬁrst objective of our static analysis is
to trace each construction to (i) differentiate if the construction
constitutes a “live port” or a “dead port,” and (ii) determine if
a third-party SDK is on the call hierarchy. Such understanding
is important because we want to ﬁlter out false positives of
open-port constructions, and Android apps usually include
various SDKs [41], especially the advertisement or analytics
SDKs [50], [73], which could introduce open ports without
developers’ awareness. This analysis is challenging because
many networking libraries included in the app may contain
open-port code that is never invoked by the host app. We
therefore need a backward slicing analysis that can accurately
trace back to every node on the call hierarchy. Such analysis
has to be sensitive to the calling contexts, class hierarchy,
implicit ﬂows, and so on.
After digging deeper into the Java constructions, we ﬁnd
a total of 11 open-port constructor APIs shown in Listing 1.
These ServerSocket APIs were originally from Java SDK,
and have been directly ported over to Android. A convenient
way of invoking these APIs is to pass only the port number
parameter, and the APIs will automatically assign the addr
and backlog parameters. The default setting of addr, inter-
estingly, is the ANY IP address instead of the local loopback