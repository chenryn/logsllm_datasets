```
.\" This man page is Copyright (C) 1999 Claus Fischer.
.\" Permission is granted to distribute possibly modified copies
.\" of this page provided the header is included verbatim,
.\" and in case of nontrivial modification, the author and date
.\" of the modification are added to the header.
.\"
.\" 990620 - page created - PI:EMAIL
.\"
.TH FIFO 7 2016-12-12 "Linux" "Linux Programmer's Manual"
.SH NAME
fifo \- 先进先出的特殊文件，命名管道
.SH DESCRIPTION
先进先出（FIFO）的特殊文件（即命名管道）类似于普通管道，但可以通过文件系统进行访问。多个进程可以同时打开它以进行读写操作。当通过FIFO交换数据时，内核会在内部传输所有数据，而不会将其写入文件系统。因此，FIFO在文件系统中实际上没有内容；文件系统中的条目仅作为引用点，使进程能够通过一个文件名来访问该FIFO。

内核为至少有一个进程打开的FIFO维护一个单独的管道对象。为了开始数据传输，FIFO的两端（读和写）都必须被打开。通常情况下，打开FIFO的操作会阻塞，直到另一端也被打开。

进程可以使用非阻塞模式打开FIFO。在这种情况下，即使写端未打开，打开读端也会成功。然而，如果读端未打开，则打开写端将失败，并返回错误代码`ENXIO`（设备或地址不存在）。

在Linux中，无论是在阻塞还是非阻塞模式下，尝试以读写方式打开FIFO都会成功。POSIX对此情况未作定义。这一特性可用于在读端不可用的情况下打开写端。当一个进程试图通过同一个FIFO与自身通信时，应特别小心，以避免死锁。
.PP
当一个进程尝试向没有打开读端的FIFO写入数据时，该进程会收到`SIGPIPE`信号。FIFO特殊文件可以通过`mkfifo(3)`创建，并且`ls -l`命令会在其权限字段中显示一个特殊的“p”标记。
.SH NOTES
当一个进程尝试向没有打开读端的FIFO写入数据时，该进程会收到`SIGPIPE`信号。FIFO特殊文件可以通过`mkfifo(3)`创建，并且`ls -l`命令会在其权限字段中显示一个特殊的“p”标记。
.SH SEE ALSO
.BR mkfifo (1),
.BR open (2),
.BR pipe (2),
.BR sigaction (2),
.BR signal (2),
.BR socketpair (2),
.BR mkfifo (3),
.BR pipe (7)
.SH AUTHOR
本页面是Linux `man-pages`项目4.09版的一部分。有关该项目的描述、报告bug的信息以及此页面的最新版本，请访问
\%https://www.kernel.org/doc/man\-pages/.
.\" manpages-zh translator: Boyuan Yang 
.\" manpages-zh date: 2016-12-16
.\" manpages-zh orig-date: 2016-12-12
```