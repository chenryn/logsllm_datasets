*   第一条规则允许来自我的个人笔记本电脑(带有 IP 地址`70.113.114.234`)的任何流量访问 SG 中的任何资源。
*   第二个规则允许 SG 内部的任何流量。这些设置不应该在类似生产的环境中使用，因为它们过于宽松。但是对于这个演示环境，它们工作得很好。
# 安装 Docker
SSH 进入所有三个实例并安装 Docker。使用下载的密钥，SSH 进入第一台机器:
```
$ ssh -i pets.pem ubuntu@
```
这里``是我们想要 SSH 进入的虚拟机的公共 IP 地址。
现在我们可以安装 Docker 了。详细说明参见[https://dockr.ly/2HiWfBc](https://dockr.ly/2HiWfBc)。我们在`labs/ch14/aws`文件夹中有一个名为`install-docker.sh`的脚本可以使用。首先，我们需要将`labs` GitHub 存储库克隆到虚拟机:
```
$ git clone https://github.com/fundamentalsofdocker/labs.git
$ cd labs/ch14/aws
```
然后运行脚本安装 Docker:
```
$ ./install-docker.sh
```
一旦脚本完成，我们就可以使用`sudo docker version`验证 Docker 确实安装了。对另外两个虚拟机重复上述代码。
The `sudo` is only necessary until the next SSH session is opened to this VM since we have added the user `ubuntu` to the group `docker`. Thus exist the current SSH session and connect again. This time `sudo` should not be needed in conjunction with `docker`.
# 正在安装 UCP Docker
我们需要设置一些环境变量，如下所示:
```
$ export UCP_IP=
$ export UCP_FQDN=
$ export UCP_VERSION=3.0.0-beta2
```
这里``和``是我们在 UCP 安装的 AWS EC2 实例的公共 IP 地址和公共 DNS 名称。
之后，我们可以使用以下命令下载 UCP 需要的所有映像:
```
$ docker run --rm docker/ucp:${UCP_VERSION} images --list \
 | xargs -L 1 docker pull
```
最后，我们可以安装 UCP:
![](img/54a14285-c3fa-4447-8545-bc52457417cb.png)
Installing UCP 3.0.0-beta2 on a VM in AWS
现在我们可以打开浏览器窗口，导航到`https://`。使用您的用户名`admin`和密码`adminadmin`登录。当要求获得许可证时，请上传您的许可证密钥或按照链接获取试用许可证。
登录后，在左侧的共享资源部分下，选择节点，然后单击添加节点按钮:
![](img/63411cf0-cb10-4ee1-a773-94a5724c7efe.png)
Adding a new node to UCP
在随后的“添加节点”对话框中，确保节点类型是 Linux，并且选择了节点角色“工作者”。然后复制对话框底部的`docker swarm join`命令。SSH 到您创建的另外两个虚拟机中，并运行此命令，使相应的节点作为工作节点加入 Docker Swarm:
![](img/c84e13c5-4412-434f-a900-198aef3ca699.png)
Joining a node as a worker to the UCP cluster
回到 UCP 的 web 用户界面，您应该看到我们现在已经准备好了三个节点，如下所示:
![](img/dcd5d16b-31af-4a86-91ac-3ef73ad3c366.png)
List of nodes in the UCP cluster
默认情况下，工作节点被配置为只能运行 Docker Swarm 工作负载。不过，这可以在节点详细信息中更改。在这种情况下，有三种设置是可能的——仅 Swarm、仅 Kubernetes 或混合工作负载。让我们从 Docker Swarm 作为编排引擎开始，部署我们的 pets 应用。
# UCP 集群的远程管理
为了能够从我们的笔记本电脑远程管理我们的 UCP 集群，我们需要从 UCP 创建并下载一个所谓的**客户端包**。继续执行以下步骤:
1.  在 UCP 网页界面的左侧管理**、**下，选择我的个人资料选项
2.  在随后的对话框中，选择新建客户端捆绑包选项，然后生成客户端捆绑包:
![](img/122224d5-d696-4387-92c4-776b5d87f68b.png)
Generating and downloading a UCP client bundle
3.  在您的磁盘上找到下载的软件包并解压缩
4.  在新的终端窗口中，导航到该文件夹并获取`env.sh`文件:
```
$ source env.sh
```
您应该会得到类似如下的输出:
```
Cluster "ucp_34.232.53.86:6443_admin" set.
User "ucp_34.232.53.86:6443_admin" set.
Context "ucp_34.232.53.86:6443_admin" created.
```
现在，我们可以通过例如列出集群的所有节点来验证我们确实可以远程访问 UCP 集群:
![](img/5043abce-a204-4e1f-b773-7d21bce10536.png)
Listing all the nodes of our remote UCP cluster
让我们尝试使用 Docker Swarm 作为编排引擎，将 pets 应用部署为一个栈。
# 部署到 DockerSwarm
在终端中，导航至`labs/ch14/ucp`文件夹，并使用文件`stack.yml`创建`pets`栈:
![](img/f562d9e9-6af5-47be-8050-1c3b3dea509c.png)
Deploying the pets stack into the UCP cluster
在 UCP 网络用户界面中，我们可以验证栈是否已创建:
![](img/e0666a8f-7da2-4aa9-b4a4-22307485558b.png)
The pets stack listing in the UCP web UI
为了测试应用，我们可以导航到主菜单 Swarm 下的服务。集群中运行的服务列表将显示如下:
![](img/180fd6a4-e3a9-4bcc-b19f-a6df3def0783.png)
Details of the service web of the pets stack
在前面的截图中，我们看到了`pets`栈的两个服务`web`和`db`。如果我们点击`web`服务，其详细信息会显示在右侧。在那里，我们找到了一个条目，已发布的端点。点击链接，我们的`pets`应用将显示在浏览器中。
完成后，使用以下命令从控制台中移除栈:
```
$ docker stack rm pets
```
或者，您可以尝试从 UCP web UI 中移除该栈。
# 部署到 Kubernetes
从您用来远程访问 UCP 集群以使用 Docker Swarm 作为编排引擎将 pets 应用部署为栈的同一终端，我们现在可以尝试使用 Kubernetes 作为编排引擎将 pets 应用部署到 UCP 集群。
确保您仍在`labs/ch14/ucp`文件夹中。使用`kubectl`部署宠物应用。第一个测试我们可以用 Kubernetes 命令行界面获得集群的所有节点:
![](img/aac77fa6-fb54-4d0e-ac07-20adce023097.png)
Getting all the nodes of the UCP cluster using the Kubernetes CLI
显然，我的环境配置正确，`kubectl`确实可以列出 UCP 集群中的所有节点。这意味着我现在可以使用文件`pets.yaml`中的定义部署 pets 应用:
![](img/0562bfd8-be32-44df-969b-176ead5c4737.png)
Creating the pets application in the UCP cluster using the Kubernetes CLI
我们可以列出使用`kubectl get all`创建的对象。在浏览器中，我们可以导航到`http://:`来访问 pets 应用，其中``是一个 UCP 集群节点的公共 IP 地址，``是由 Kubernetes 服务`web`发布的端口。
我们在 AWS ASG 中创建了一个由三个虚拟机组成的集群，并在其上安装了 Docker 和 UCP 3.0。然后，我们将著名的 pets 应用部署到 UCP 集群中，一次使用 Docker Swarm 作为编排引擎，一次使用 Kubernetes。
Docker UCP 是一个与平台无关的容器平台，可在任何云、内部、裸机或虚拟化环境中提供安全的企业级软件供应链。它甚至提供了选择编排引擎的自由。用户可以在 Docker Swarm 和 Kubernetes 之间进行选择。甚至可以在同一个集群中的两个编排器中运行应用。
# Azure 容器产品一览
要在 Azure 中使用微软的容器相关产品，我们需要在 Azure 上有一个帐户。您可以创建试用帐户或使用现有帐户。在 https://azure.microsoft.com/en-us/free/获得您的试用帐户。
微软在 Azure 上提供不同的容器相关服务。最容易使用的可能是 **Azure 容器实例**，它向*承诺了在 Azure 中运行容器的最快和最简单的方法，而无需调配任何虚拟机，也无需采用更高级别的服务。*只有当您想要在托管环境中运行单个容器时，该服务才真正有用。设置相当容易。在 Azure 门户([portal.azure.com](http://portal.azure.com))中，首先创建一个新的资源组，然后创建一个 Azure 容器实例。您只需要填写一个简短的表单，其中包含容器名称、要使用的映像和要打开的端口等属性。该容器可在公共或私有 IP 地址上使用，如果崩溃，将自动重新启动。有一个不错的管理控制台可用，例如，监控资源消耗，如中央处理器和内存。
第二个选择是 **Azure 容器服务** ( **ACS** )，该服务*提供了一种简化虚拟机集群的创建、配置和管理的方法，这些虚拟机被预配置为运行容器化应用。* ACS 使用 Docker 映像，并在三个编排器之间提供选择:Kubernetes、Docker Swarm 或 DC/OS(由 Apache Mesos 提供动力)。微软声称他们的服务可以扩展到数万个容器。ACS 是免费的，一个只对计算资源收费。
让我们尝试创建一个托管的 Docker Swarm，它有一个管理器和一个工作节点，然后我们将把我们的 pets 演示应用部署到这个节点。首先我们需要安装 Azure CLI 2.0。我们可以使用 Docker 映像来实现这一点:
```