title:RaceGuard: Kernel Protection From Temporary File Race Vulnerabilities
author:Crispin Cowan and
Steve Beattie and
Chris Wright and
Greg Kroah-Hartman
USENIX Association
Proceedings of the
10th USENIX Security
Symposium
Washington, D.C., USA
August 13–17, 2001
© 2001 by The USENIX Association
Phone: 1 510 528 8649
FAX: 1 510 548 5738
THE ADVANCED COMPUTING SYSTEMS ASSOCIATION
All Rights Reserved
Email: PI:EMAIL
For more information about the USENIX Association:
WWW: http://www.usenix.org
Rights to individual papers remain with the author or the author's employer.
 Permission is granted for noncommercial reproduction of the work for educational or research purposes.
This copyright notice must be included in the reproduced paper. USENIX acknowledges all trademarks herein.
RaceGuard: Kernel Protection From Temporary File Race Vulnerabilities
Crispin Cowan, Steve Beattie, Chris Wright, and Greg Kroah-Hartman
WireX Communications, Inc. http://wirex.com/
Abstract
Temporary  file  race  vulnerabilities  occur  when  privi-
leged programs attempt to create temporary files in an
unsafe  manner.  “Unsafe”  means  “non-atomic  with
respect to an attacker’s activities.” There is no portable
standard for safely (atomically) creating temporary files,
and many operating systems have no safe temporary file
creation at all. As a result, many programs continue to
use unsafe means to create temporary files, resulting in
widespread  vulnerabilities.  This  paper  presents  Race-
Guard:  a  kernel  enhancement  that  detects  attempts  to
exploit temporary file race vulnerabilities, and does so
with sufficient speed and precision that the attack can be
halted before it takes effect. RaceGuard has been imple-
mented, tested, and measured. We show that RaceGuard
is effective at stopping temporary file race attacks, pre-
serves compatibility (no legitimate software is broken),
and preserves performance (overhead is minimal).
1  Introduction
Attacks exploiting concurrency problems (“race vulner-
abilities”) are nearly as old as the study of computer sys-
tem security [1, 5]. These are called TOCTTOU (“Time
of  Check  To  Time  Of  Use”)  errors  [6].  Of  particular
interest is the temporary file creation vulnerability: pro-
grams seeking to create a temporary file first check to
see if a candidate file name exists, and then proceed to
create that file. The problem occurs if the attacker can
race in between the file existence check and the file cre-
ation,  and  the  attacker  creates  the  file  that  the  victim
program expected to create.
In concrete terms, this problem occurs on UNIX systems
when programs use stat() or lstat() to probe for
the existence of files, and open(O_CREAT) to create
the  files.  An  encapsulated  means  to  create  temporary
library  function.1  The
names 
mktemp()  library  function  simply  encapsulates  the
lstat()  call,  and  thus  mktemp()  followed  by
open(O_CREAT) is vulnerable to race attacks.
the  mktemp() 
is 
1. and related library functions tmpnam() and tempnam().
This race condition becomes a security vulnerability if
the victim program creating the temporary file is privi-
leged  (i.e.  running  as  root  or  some  other  privileged
user-ID)  and  the  attacker  creates  a  link  pointing  to  a
security  sensitive  file  such  as  /etc/passwd  or
/etc/hosts.allow.  When 
the
open(O_CREAT) will obliterate the data contained in
the sensitive file. The fopen() library function, being
a wrapper around  open(O_CREAT), is similarly vul-
nerable.
this  occurs, 
open(O_CREAT|O_EXCL)). 
There  are  two  commonly  accepted  mechanisms  that
exist to prevent this race condition: using open() with
the  O_CREAT  and  O_EXCL  flags,  or  using 
the
mkstemp()  library  function  (which  is  a  wrapper
around 
When
open(O_CREAT|O_EXCL)  is  called  on  a  file  that
already  exists,  it  will  fail  and  prevent  the  race  attack.
Unfortunately, because these mechanisms are not ubiq-
uitously  available  and  portable,  common  programs
(such  as  Apache  [3,  13])  still  continue 
to  use
mktemp() and friends, despite the fact that the Linux
mktemp man page says “Never use mktemp().”
This  paper  presents  RaceGuard:  a  kernel  enhancement
that detects attempts to exploit temporary file race vul-
nerabilities, and does so with sufficient speed and preci-
sion that the attack can be halted before it takes effect.
RaceGuard functions by detecting the change in circum-
stances between the stat() call and the open() call. If the
stat()  “fails”  (the  file  does  not  exist),  then  RaceGuard
caches  the  file  name.  If  a  subsequent  open()  call  pro-
vides  the  same  name,  and  discovers  that  the  file  does
exist, then RaceGuard detects a race attack, and aborts
the open() operation.
The rest of this paper is organized as follows.Section 2
elaborates on the temporary file vulnerability issue. Sec-
tion 3 presents the RaceGuard design and implementa-
tion.  Section  4  presents  our  security  testing  against
known  race  vulnerabilities  in  actively  used  software.
Section  5  presents  our  compatibility  testing,  showing
that RaceGuard protection does not interfere with nor-
mal  system  operations.  Section  6  presents  our  perfor-
mance  testing,  showing  that  the  performance  costs  of
This work supported in part by DARPA contract N66001-00-C-8032.
RaceGuard protection are minimal. Section 7 describes
related  work  in  defending  against  temporary  file  race
vulnerabilities. Section 8 presents our conclusions.
2  Temporary File Race Vulnerabilities
The basic form of a temporary file race vulnerability is
that a privileged program first probes the state of the file
system, and then based on the results of that probe, takes
some action. The attacker can exploit the vulnerability
by “racing” between the probe and the action to change
the  state  of  the  file  system  in  some  critical  way,  such
that the victim program’s action will have an unintended
effect.
The simple form of this attack is temporary file creation.
The  victim  program  seeks  to  create  a  temporary  file,
probes for the existence of the file, and if the nominated
file name is not found, proceeds to create the file. The
attacker exploits this by creating either a symbolic link
that  matches  the  name  of  the  file  about  to  be  created,
and points to a security sensitive file. The result is that
the victim program will unwittingly over-write the secu-
rity sensitive file with unintended content.
A  variation  on  this  scheme  is  the  “dangling  symlink”.
The  victim  program  performs  the  same  sequence  as
above.  The  attacking  program  races  in  and  creates  a
symlink or hard link from the matching name to a non-
existent file whose existence has security implications,
such as /etc/hosts.allow or /etc/nologin.
Another  variation  is  the  “file  swap.”  Here  the  victim
program  is  a  SUID  root  program  that  can  be  asked  to
write  to  a  specific  file  [6]. The  victim  program  defen-
sively checks to see if the requesting user has access to
the file, and then only does the write if the user has per-
mission.  The  attacker  provides  a  file  that  they  have
access, to, and between the access check and the write
operation,  the  attacker  swaps  the  file  for  a  symlink
pointing to a security sensitive file.
3  RaceGuard: Dynamic Protection from 
Race Attacks
RaceGuard detects attempts to exploit race vulnerabili-
ties at run time by detecting a change in the environment
between the time the program probes for the existence
of  a  file,  and  the  time  it  tries  to  create  it:  if  the  file
named “foo” does  not exist at the time of the stat, but
does exist at the time of the open, then someone tried to
race us, so abort the operation. RaceGuard achieves this
by caching the file names that are probed, and when cre-
ation attempts occur that hit existing files, the names are
compared to the cache. Section 3.1 describes the Race-
Guard algorithm. Section  3.2 describes the RaceGuard
implementation and the cache management policy.
3.1 RaceGuard Design
RaceGuard seeks to detect pertinent changes in the file
system  between  the  time  an  application  probes  for  a
nominated temporary file name, and the time the file is
actually  created.  “Pertinent”  means  changes  with
respect  to  the  nominated  name.  The  RaceGuard  algo-
rithm to achieve this is as follows:
Each process keeps a cache of potential temporary 
file races. This cache is a list of file names, associ-
ated with each process control block within the ker-
nel.
If file probe result is “non-existent file,” then cache 
the file name in the process’s RaceGuard cache.
If file creation hits a file that already exists, and the 
name matches a name in the RaceGuard cache, then 
this is a race attack: abort the open attempt.
If file creation succeeds without conflicts, and 
matches a name in the RaceGuard cache, then clear 
that entry from the cache. This prevents “false posi-
tive” RaceGuard events when a program uses the 
same name for a file more than once.
This caching mechanism serves to detect and differenti-
ate  between  the  sequence  “probe;  create”,  and  “probe;
attacker meddling; create”. To defend against the “dan-
gling  symlink”  variant  attack  described  in  Section  2,
RaceGuard does two resolves on the name provided to
open that are in the RaceGuard cache: the first follows
symlinks, while the second does not. If the two resolve
differently, and the argument name matches an entry in
the  RaceGuard  cache,  then  this  is  treated  as  a  race
attack.
RaceGuard  does  not  defend  against  the  “file  swap”
attack. Because the attack concerns an already existent
file,  this  is  not  really  a  temporary  file  race  attack.  In
practice,  such  vulnerabilities  appear  to  be  relatively
rare:  searching  Securityfocus.com’s  vulnerability  data-
base [18] for  “race” produced 75 hits, while searching
for “race & !tmp & !temp” produced only 24 hits. Even
among the 24, random sampling indicates that many of
them are actually temporary file issues, but did not say
so in the name of the vulnerability.
3.2 RaceGuard Implementation & Cache 
Management Policy
The RaceGuard implementation is in the kernel, facili-
tating  both  per-process  and  inter-process  RaceGuard
cache  management.  RaceGuard  mediates  three  basic
types of system calls:
(cid:127)
(cid:127)
(cid:127)
(cid:127)
those which can inform the program that a file sys-
tem entry does not exist -- stat(), lstat(), 
access(), newstat(), and newlstat().
those which enable the program to actually create 
file system entries -- open(), creat(), 
mkdir(), mknod(), link(), symlink(), 
rename(), and bind().
those which create and remove processes -- 
fork() and exit().
These system calls are often called indirectly via library
wrappers.  For  example,  an  insecure  program  may  use
the  C  library  function  mktemp(),  a  wrapper  for
lstat(),  followed  by  fopen(),  a  wrapper  for
open().  Placing  RaceGuard  mediation  in  the  kernel
provides protection for such a programs, in an effort to
provide  mediation  of  temporary file  creation that  is as
complete as possible [17].
The  interesting  part  of  RaceGuard’s  implementation  is
the cache management policies: when to place a cache
entry, when to clear it, and the cache replacement pol-
icy.  We  take  an  aggressive  position  on  cache  clearing,
and  a  conservative  position  on  cache  populating.  This
results in some potential race vulnerabilities getting past
RaceGuard, in exchange for assuring that no legitimate
software is disrupted by RaceGuard. We do this because
RaceGuard  is  an  intrusion  rejector  in  addition  to  an
intrusion  detector,  making  false  positives  much  more
critical than false negatives.
The RaceGuard cache is small (7 entries per process) to
keep the kernel memory footprint small, as there is one
cache  per  process,  one  cache  entry  per  file,  and  each
cache  entry  is  large  (MAX_PATH_LEN).  We  hypothe-
size that most race situations occur with little file system
activity occurring in the process between the stat() and
the open(), thus a small cache will be sufficient.
The assumption that programs will do the probe and cre-
ation  in close  sequence also affects our cache eviction
policy.  We  considered  using  LRU  (Least  Recently
Used) and FIFO (First In, First Out). LRU is not appro-
priate because the expected use is one creation and one
reference, so a recent reference is not a good basis for