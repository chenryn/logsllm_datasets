4.发现并不是什么很有价值的信息，再来看看能不能被不同的域的页面请求到(也就是测试一下服务器端有没有对其验证请求来源）
**(对应下面的payload利用)**  
[
发现换成了别的浏览器还是能检测到，说明验证的来源有些问题
### JSONP劫持漏洞实例(和上面的 JSONP 漏洞的挖掘思路 对应)
JSONP是一种简单的服务器与客户端跨域通信的办法，此种跨域只能发起GET请求。还有个例子可看这里：`https://blog.csdn.net/weixin_50464560/article/details/119647485`，形如其中的`?callback=hello`。这里的例子是这样：
正常情况下getUser.php中的数据，只有referer字段是`www.xxx.com`才能访问；然后这里新建一个站点`www.test.com`，在里面写入下面的PoC以此跨域获取敏感信息：  
getUser.php **(对应上面filter配合ctrl+F筛选出来的结果)**  
这里出现了callback他的作用就是回调我们的json。
请求该接口并加上jsoncallback=1，即访问`http://127.0.0.1/jsonp%20poc/getuser.php?jsoncallback=1`，返回值如下：  
[
在返回值开头中可见1，如果我们修改callback的值为其他值，此处的返回值也会相应改变。我们可以劫持callback参数，自己构造callback处理函数，受害者点击我们伪造的链接后，向真正的jsonp接口发起请求，请求得到数据的处理方式由我们自己的callback处理函数处理，由此可以达到劫持目的。
#### Payload利用
新建一个站点`www.test.com`：  
web程序如果通过这种方式跨域之后，攻击者完全可以在自己的虚假页面中发起恶意的jsonp请求，这就引来了安全问题。比如： **(对应上面的跨域)**
1.客户端实现 callbackFunction 函数:
    JSONP劫持测试
我们在``标签里面给出的链接是我本地服务器的一个php的代码，我给这个文件传递了一个参数，作为我要调用的函数。服务器接收到这个参数以后把它当做函数名，并给这个函数传递了一个json的值作为用户调用的函数的参数，最终实现调用。>标签里面给出的链接是我本地服务器的一个php的代码，我给这个文件传递了一个参数，作为我要调用的函数。服务器接收到这个参数以后把它当做函数名，并给这个函数传递了一个json的值作为用户调用的函数的参数，最终实现调用。
本地模拟受害者 访问一下`www.test.com/json.html` 弹窗。下面是调用成功的截图：  
[  
看一下referer：  
`Referer http://www.test.com/json.html`  
`getUser.php`没有对请求的referer进行限制，导致数据泄露。  
如果服务器端的userinfo接口支持jsonp，那就会使虚假页面成功执行callbackFunction函数，从而导致安全问题。
2.jQuery 使用 JSONP:
        JSONP劫持测试
[
#### 修复
##### 限制referer：
    if ($_SERVER['HTTP_REFERER']!=='http://www.xxx.com/1.html') {
        exit("非法访问");
    }
##### 使用token
随机的生成一段token值，每次提交表单都要检查，攻击者没有token就不能访问。
#### 绕过
针对上面两种修复方式 也都有对应的绕过方式
##### data URI 绕过 referer
`data URI`不会发送referer头，data还可以使用base64编码
##### https转到http referer
https转到http会返回一个空的referer (为了防止数据泄露)
##### 绕过token
这里有一个比较好的例子：`http://www.91ri.org/13407.html`
#### JSON劫持可能存在的点
1.Referer过滤不严谨；  
2.空Referer(在通过跨协议调用JS时，发送的http请求里的Referer为空)；  
3.CSRF调用json文件方式不安全，token可重复利用；  
4.JSON输出的Content-Type及编码不符合标准(gb2312可能存在宽字节注入)；  
5.未严格过滤callback函数名及JSON里数据的输出；  
6.未严格限制JSONP输出callback函数名的长度。
#### 需要满足的条件
1.使用JSONP获取数据；
2.未检测referer字段或者验证了 referer字段，但是验证方式不严谨，如需要验证的referer字段为 www.xxx.com 域，但是
www.xxx.com.mydomain.com 同样能够绕过；
3.GET请求中不包含token相关的参数
### 自动化挖掘
如何挖掘这样的接口呢？我们可以使用Fiddler、burpsuite或者F12等方法去一个个检查，但这样很累就是了。下面介绍一种轻松的方式。
更轻松的方式：自动化测试工具Selenium + Proxy + 验证脚本
(1)Selenium：可用于自动化对网页进行测试，“到处”点击按钮、超链接，以期待测试更多的接口；  
(2)Proxy：用于代理所有的请求，过滤出所有包含敏感信息的JSONP请求，并记录下HTTP请求；  
(3)验证脚本：使用上述的HTTP请求，剔除referer字段，再次发出请求，测试返回结果中，是否仍包敏感信息，如果有敏感信息，说明这个接口就是我们要找的！
#### 测试
使用脚本进行测试，我以sina为例，首先需要登录sina帐号，微博或者博客都可以，然后开启浏览器代理，运行我们的脚本，最后浏览网页，就能检测出这样的JSONP接口了  
[
至此发现该JSONP接口，简单写两句JS代码放到我们的网站上：
    $.ajax({
    url: 'https://api.weibo.com/2/{隐藏了哦}',
    type: 'get',
    dataType: 'jsonp',
    }).done(function(json){
    var id = json['data']['id'];
    var screen_name = json['data']['screen_name'];
    var profile_image_url = json['data']['profile_image_url'];
    var post_data = '';
    post_data += 'id=' + id + '&';
    post_data += 'screen_name=' + screen_name + '&';
    post_data += 'profile_image_url=' + encodeURIComponent(profile_image_url);
    console.log(post_data);
    // 发送到我的服务器上
    }).fail(function() {});
很快就可以收到大波的用户信息了  
[
相关的代码在Github上：[地址](https://github.com/qiaofei32/jsonp_info_leak)
#### 相关扩展
(1)既然是窃取敏感信息，那么敏感信息除了一些 email 手机号 用户名等还有什么呢？没错，甚至可以是 CSRF Token 信息，有时候在 CSRF
token 获取不到但是又找不到 XSS 的攻击点的时候不妨考虑一下 jsonp 劫持,看看会不会有惊喜
(2)还有一点，你有没有觉得这个攻击方式有点类似于 CSRF ，是的，的确很像，因此这也就引出了非常类似的修复方案。
### 如何防御
其实json劫持和jsonp劫持属于CSRF（ Cross-site request forgery
跨站请求伪造）的攻击范畴，所以解决的方法和解决csrf的方法差不多，可以参考csrf的防御。下面也介绍一些：
1、严格安全的实现 CSRF 方式调用 JSON 文件：限制 Referer 、部署一次性 Token 等。  
2、严格安装 JSON 格式标准输出 Content-Type 及编码（ Content-Type : application/json;
charset=utf-8 ）。  
3、严格过滤 callback 函数名及 JSON 里数据的输出。  
4、严格限制对 JSONP 输出 callback 函数名的长度(如防御上面 flash 输出的方法)。  
5、其他一些比较“猥琐”的方法：如在 Callback 输出之前加入其他字符(如：/**/、回车换行)这样不影响 JSON
文件加载，又能一定程度预防其他文件格式的输出。还比如 Gmail 早起使用 AJAX 的方式获取 JSON ，听过在输出 JSON 之前加入
while(1) ;这样的代码来防止 JS 远程调用。
### 参考