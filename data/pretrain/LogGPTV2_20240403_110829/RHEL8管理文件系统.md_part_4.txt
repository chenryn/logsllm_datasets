    ）目前是任意的。`存储`{.literal} 角色根据 disk `:`{.literal}
    属性中列出的磁盘设备识别卷。
:::
:::
:::
::: itemizedlist
**其它资源**
-   有关 `存储系统`{.literal} 角色中使用的参数的详情，请参阅
    `/usr/share/ansible/roles/rhel-system-roles.storage/README.md`{.literal}
    文件。
:::
:::
::: section
::: titlepage
# []{#managing-local-storage-using-rhel-system-roles_managing-file-systems.html#configure-raid-volume-using-storage-system-role_managing-local-storage-using-rhel-system-roles}使用存储系统角色配置 RAID 卷 {.title}
:::
使用 `存储系统`{.literal} 角色，您可以使用 Red Hat Ansible Automation
Platform 在 RHEL 上配置 RAID
卷。在本小节中，您将了解如何使用可用参数设置 Ansible playbook，以配置
RAID 卷以满足您的要求。
::: itemizedlist
**先决条件**
-   您已在要运行 playbook 的系统中安装了 Red Hat Ansible Engine。
    ::: {.note style="margin-left: 0.5in; margin-right: 0.5in;"}
    ### 注意 {.title}
    您不必在要部署 `存储解决方案`{.literal} 的系统中安装 Red Hat Ansible
    Automation Platform。
    :::
-   您已在要运行 playbook 的系统中安装了 `rhel-system-roles`{.literal}
    软件包。
-   您有一个清单文件详细描述了您要使用 `存储系统`{.literal} 角色部署
    RAID 卷的系统。
:::
::: orderedlist
**流程**
1.  使用以下内容创建新 `playbook.yml`{.literal} 文件：
    ``` screen
    - hosts: all
      vars:
        storage_safe_mode: false
        storage_volumes:
          - name: data
            type: raid
            disks: [sdd, sde, sdf, sdg]
            raid_level: raid0
            raid_chunk_size: 32 KiB
            mount_point: /mnt/data
            state: present
      roles:
        - name: rhel-system-roles.storage
    ```
    ::: {.warning style="margin-left: 0.5in; margin-right: 0.5in;"}
    ### 警告 {.title}
    设备名称在某些情况下可能会改变，例如：当您在系统中添加新磁盘时。因此，为了避免数据丢失,我们不建议在
    playbook 中使用特定的磁盘名称。
    :::
2.  可选。验证 playbook 语法。
    ``` screen
    # ansible-playbook --syntax-check playbook.yml
    ```
3.  在清单文件上运行 playbook:
    ``` screen
    # ansible-playbook -i inventory.file /path/to/file/playbook.yml
    ```
:::
::: itemizedlist
**其它资源**
-   有关 RAID 的详情，请参阅[管理
    RAID](https://access.redhat.com/documentation/en-us/red_hat_enterprise_linux/8/html/managing_storage_devices/managing-raid_managing-storage-devices){.link}。
-   有关存储系统角色中使用的参数的详情，请参阅
    `/usr/share/ansible/roles/rhel-system-roles.storage/README.md`{.literal}
    文件。
:::
:::
::: section
::: titlepage
# []{#managing-local-storage-using-rhel-system-roles_managing-file-systems.html#configuring-lvm-pool-with-raid-using-storage-system-role_managing-local-storage-using-rhel-system-roles}使用存储系统角色使用 RAID 配置 LVM 池 {.title}
:::
使用 `存储系统`{.literal} 角色，您可以使用 Red Hat Ansible Automation
Platform 在 RHEL 上使用 RAID 配置 LVM
池。在本小节中，您将了解如何使用可用参数设置 Ansible
playbook，以配置使用 RAID 的 LVM 池。
::: itemizedlist
**先决条件**
-   您已在要运行 playbook 的系统中安装了 Red Hat Ansible Engine。
    ::: {.note style="margin-left: 0.5in; margin-right: 0.5in;"}
    ### 注意 {.title}
    您不必在要部署 `存储解决方案`{.literal} 的系统中安装 Red Hat Ansible
    Automation Platform。
    :::
-   您已在要运行 playbook 的系统中安装了 `rhel-system-roles`{.literal}
    软件包。
-   您有一个清单文件详细描述了您要使用 `存储系统`{.literal} 角色配置带有
    RAID 的 LVM 池的系统。
:::
::: orderedlist
**流程**
1.  使用以下内容创建新 `playbook.yml`{.literal} 文件：
    ``` screen
    - hosts: all
      vars:
        storage_safe_mode: false
        storage_pools:
          - name: my_pool
            type: lvm
            disks: [sdh, sdi]
            raid_level: raid1
            volumes:
              - name: my_pool
                size: "1 GiB"
                mount_point: "/mnt/app/shared"
                fs_type: xfs
                state: present
      roles:
        - name: rhel-system-roles.storage
    ```
    ::: {.note style="margin-left: 0.5in; margin-right: 0.5in;"}
    ### 注意 {.title}
    要使用 RAID 创建 LVM 池，您必须使用 `raid_level`{.literal} 参数指定
    RAID 类型。
    :::
2.  可选。验证 playbook 语法。
    ``` screen
    # ansible-playbook --syntax-check playbook.yml
    ```
3.  在清单文件上运行 playbook:
    ``` screen
    # ansible-playbook -i inventory.file /path/to/file/playbook.yml
    ```
:::
::: itemizedlist
**其它资源**
-   有关 RAID 的详情，请参阅[管理
    RAID](https://access.redhat.com/documentation/en-us/red_hat_enterprise_linux/8/html/managing_storage_devices/managing-raid_managing-storage-devices){.link}。
-   有关存储系统角色中使用的参数的详情，请参阅
    `/usr/share/ansible/roles/rhel-system-roles.storage/README.md`{.literal}
    文件。
:::
:::
::: section
::: titlepage
# []{#managing-local-storage-using-rhel-system-roles_managing-file-systems.html#proc_creating-a-luks-encrypted-volume-using-the-storage-role_managing-local-storage-using-rhel-system-roles}使用存储角色创建 LUKS 加密卷 {.title}
:::
您可以通过运行 Ansible playbook，使用 `storage`{.literal}
角色来创建和配置使用 LUKS 加密的卷。
::: itemizedlist
**先决条件**
-   您已在要运行 playbook 的系统中安装了 Red Hat Ansible Engine。
    ::: {.note style="margin-left: 0.5in; margin-right: 0.5in;"}
    ### 注意 {.title}
    您不必在要创建卷的系统中安装 Red Hat Ansible Automation Platform。
    :::
-   Ansible 控制器上安装了 `rhel-system-roles`{.literal} 软件包。
-   您有一个清单文件详细描述了您要使用存储系统角色部署 LUKS
    加密卷的系统。
:::
::: orderedlist
**流程**
1.  使用以下内容创建新 `playbook.yml`{.literal} 文件：
    ``` screen
    - hosts: all
      vars:
        storage_volumes:
          - name: barefs
            type: disk
            disks:
             - sdb
            fs_type: xfs
            fs_label: label-name
            mount_point: /mnt/data
            encryption: true
            encryption_password: your-password
      roles:
       - rhel-system-roles.storage
    ```
2.  可选：验证 playbook 语法：
    ``` screen
    # ansible-playbook --syntax-check playbook.yml
    ```
3.  在清单文件上运行 playbook:
    ``` screen
    # ansible-playbook -i inventory.file /path/to/file/playbook.yml
    ```
:::
::: itemizedlist
**其它资源**
-   [使用 LUKS
    加密块设备](https://access.redhat.com/documentation/en-us/red_hat_enterprise_linux/8/html/managing_storage_devices/encrypting-block-devices-using-luks_managing-storage-devices){.link}
-   `/usr/share/ansible/roles/rhel-system-roles.storage/README.md`{.literal}
    file
:::
::: itemizedlist
**其它资源**
-   如需更多信息，请安装 `rhel-system-roles`{.literal}
    软件包并查看以下目录：
    ::: itemizedlist
    -   `/usr/share/doc/rhel-system-roles/storage/`{.literal}
    -   `/usr/share/ansible/roles/rhel-system-roles.storage/`{.literal}
    :::
:::
:::
:::
[]{#mounting-nfs-shares_managing-file-systems.html}
::: chapter
::: titlepage
# []{#mounting-nfs-shares_managing-file-systems.html#mounting-nfs-shares_managing-file-systems}第 3 章 挂载 NFS 共享 {.title}
:::
作为系统管理员，您可以在系统上挂载远程 NFS 共享来访问共享数据。
::: section
::: titlepage
# []{#mounting-nfs-shares_managing-file-systems.html#introduction-to-nfs_mounting-nfs-shares}NFS 简介 {.title}
:::
这部分解释了 NFS 服务的基本概念。
网络文件系统(NFS)允许远程主机通过网络挂载文件系统，并像在本地挂载这些文件系统一样与这些文件系统交互。这可让您将资源整合到网络的集中服务器中。
NFS 服务器引用 `/etc/exports`{.literal}
配置文件，以确定是否允许客户端访问任何导出的文件系统。一旦被验证，所有文件和目录操作都对用户有效。
:::
::: section
::: titlepage
# []{#mounting-nfs-shares_managing-file-systems.html#supported-nfs-versions_mounting-nfs-shares}支持的 NFS 版本 {.title}
:::
这部分列出了 Red Hat Enterprise Linux 支持 NFS 版本及其特性。
目前，Red Hat Enterprise Linux 8 支持以下 NFS 主要版本：
::: itemizedlist
-   与 NFSv2 相比，NFS 版本
    3（NFSv3）支持安全异步写入操作，并在处理错误时更可靠。它也支持 64
    位文件大小和偏移，允许客户端访问超过 2 GB 文件数据。
-   NFS 版本 4(NFSv4)通过防火墙和 Internet，不再需要 a
    `rpcbind`{.literal}
    服务，支持访问控制列表(ACL)，并且利用有状态操作。
:::
红帽不再支持 NFS 版本 2(NFSv2)。
### []{#mounting-nfs-shares_managing-file-systems.html#_default_nfs_version}默认 NFS 版本
Red Hat Enterprise Linux 8 中默认 NFS 版本为 4.2。NFS 客户端默认试图使用
NFSv4.2 挂载，并在服务器不支持 NFSv4.2 时回退到 NFSv4.1。之后挂载会返回
NFSv4.0，然后回退到 NFSv3。
### []{#mounting-nfs-shares_managing-file-systems.html#_features_of_minor_nfs_versions}次要 NFS 版本的特性
以下是 Red Hat Enterprise Linux 8 中的 NFSv4.2 的功能：
::: variablelist
[服务器端复制]{.term}
:   使 NFS 客户端能够在不使用 `copy_file_range（）`{.literal}
    系统调用浪费网络资源的情况下高效地复制数据。
[稀疏文件]{.term}
:   使文件有一个或者多个
    [*洞（hole）*]{.emphasis}，它们是不分配或者未初始化的数据块，只由 0
    组成。NFSv4.2 中的 `lseek（）`{.literal} 操作支持
    `search_hole（）`{.literal} 和 search
    `_data（）`{.literal}，这使得应用能够映射稀疏文件中的漏洞位置。
[保留空间]{.term}
:   允许存储服务器保留可用空间，这会阻止服务器耗尽空间。NFSv4.2 支持
    `分配（）`{.literal} 操作来保留空间，对
    `取消预留空间执行 deal`{.literal}
    `locate（）操作，以及预先分配或取消分配文件中空间的 fal`{.literal}
    locate（）操作。
[标记的 NFS]{.term}
:   强制实施数据访问权限，并为 NFS
    文件系统中的个别文件启用客户端和服务器之间的 SELinux 标签。
[布局增强]{.term}
:   提供 layout `stats（）`{.literal} 操作，它可让一些 Parallel
    NFS(pNFS)服务器收集更好的性能统计数据。
:::
以下是 NFSv4.1 的功能：
::: itemizedlist
-   增强网络的性能和安全性，同时包括对 pNFS 的客户端支持。
-   回调不再需要单独的 TCP 连接，这允许 NFS 服务器在无法联系客户端时授予
    NFS 服务器：例如，当 NAT 或防火墙干扰时。
-   恰好提供一次语义（除重新启动操作外），防止先前的问题：如果丢失回复并且发送两次操作，某些操作有时会返回不准确的结果。
:::
:::
::: section
::: titlepage
# []{#mounting-nfs-shares_managing-file-systems.html#services-required-by-nfs_mounting-nfs-shares}NFS 所需的服务 {.title}
:::
这部分列出了运行 NFS 服务器或挂载 NFS 共享所需的系统服务。Red Hat
Enterprise Linux 会自动启动这些服务。
Red Hat Enterprise Linux 使用内核级支持和服务流程组合提供 NFS