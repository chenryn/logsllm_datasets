::: para
有关使用 [**sar**]{.application} 的详情请参考其 man
page：`man sar`{.command}。
:::
:::
::: section
::: titlepage
# [⁠]{#main-analyzeperf.html#main-analyzeperf-tuned}3.4. Tuned 和 ktune {.title}
:::
::: para
[**Tuned**]{.application}
是监控并收集各个系统组件用量数据的守护进程，并可使用那些信息根据需要动态调整系统设置。它可以对
CPU
和网络使用的更改作出反应，并调整设置以提高活动设备的性能或者降低不活跃设备的电源消耗。
:::
::: para
伴随它的工具 [**ktune**]{.application} 结合
[**tuned-adm**]{.application}
工具提供大量预先配置的调整分析以便在大量具体使用案例中提高性能并降低能耗。编辑这些配置或者创建新配置可生成为系统定制的性能解决方案。
:::
::: para
作为 [**tuned-adm**]{.application} 一部分的配置包括：
:::
::: variablelist
[*`default`*]{.term}
:   ::: para
    默认节电配置。这是最基本的节点配置。它只启用磁盘和 CPU
    插件。注：这与关闭 [**tuned-adm**]{.application}
    不同，关闭该程序会同时禁用 [**tuned**]{.application} 和
    [**ktune**]{.application}。
    :::
[*`latency-performance`*]{.term}
:   ::: para
    典型延迟性能调试的服务器配置。它禁用 [**tuned**]{.application} 和
    [**ktune**]{.application} 节能机制。`cpuspeed`{.systemitem} 模式改为
    `performance`{.literal}。每个设备的 I/O 提升程序改为
    `deadline`{.literal}。对于服务的电源管理质量，将
    `cpu_dma_latency`{.systemitem} 设定为 `0`{.literal}。
    :::
[*`throughput-performance`*]{.term}
:   ::: para
    用于典型吞吐性能调整的服务器侧写。如果系统没有企业级存储则建议使用这个侧写。它与
    `latency-performance`{.literal} 相同，只是：
    :::
    ::: {.itemizedlist xmlns:d="http://docbook.org/ns/docbook"}
    -   ::: para
        将
        *`kernel.sched_min_granularity_ns`*（调度程序最小优先占用时间间隔）设定为
        `10`{.literal} 毫秒，
        :::
    -   ::: para
        将*`kernel.sched_wakeup_granularity_ns`*（调度程序唤醒间隔时间）设定为
        `15`{.literal} 毫秒。
        :::
    -   ::: para
        将 *`vm.dirty_ratio`*（虚拟机脏数据比例）设定为 40%，并
        :::
    -   ::: para
        启用透明超大页面。
        :::
    :::
[*`enterprise-storage`*]{.term}
:   ::: para
    建议最企业级服务器配置中使用这个侧写，其中包括电池备份控制程序缓存保护以及管理磁盘缓存。它与
    `throughput-performance`{.literal} 配置类似，只是文件系统要使用
    `barrier=0`{.code} 重新挂载。
    :::
[*`virtual-guest`*]{.term}
:   ::: para
    建议最企业级服务器配置中使用这个侧写，其中包括电池备份控制程序缓存保护以及管理磁盘缓存。它与
    `throughput-performance`{.literal} 类似，只是：
    :::
    ::: {.itemizedlist xmlns:d="http://docbook.org/ns/docbook"}
    -   ::: para
        将 *`readahead`* 值设定为 `4x`{.literal}，同时
        :::
    -   ::: para
        不使用 `barrier=0`{.code} 重新挂载的 root/boot 文件系统。
        :::
    :::
[*`virtual-host`*]{.term}
:   ::: para
    根据 *`enterprise-storage`* 配置，*`virtual-host`*
    还可减少可置换的虚拟内存，并启用更多集合脏页写回。您可以在红帽企业版
    Linux 6.3
    以及之后的版本中找到这个配置，同时推荐在虚拟化主机中使用这个配置，包括
    KVM 和红帽企业版 Linux 虚拟化主机。
    :::
:::
::: para
有关 [**tuned**]{.application} 和 [**ktune**]{.application}
的详情请参考红帽企业版 Linux 6 *《电源管理指南》*，地址为
。
:::
:::
::: section
::: titlepage
# [⁠]{#main-analyzeperf.html#s-analyzeperf-profiling}3.5. 应用程序分析工具 {.title}
:::
::: para
程序概要分析是收集有关程序执行时其行为的过程。您可以分析一个程序以便决定可以优化程序的哪个部分以便提高该程序的总体速度，减少其内存使用等等。程序分析工具可以帮助您简化这个过程。
:::
::: para
红帽企业版 Linux 6
支持三个分析工具：[**SystemTap**]{.application}、[**OProfile**]{.application}
和
[**Valgrind**]{.application}。这些分析工具的具体内容不在本指南讨论范围内，但本小节会为您提供链接，并概述每个分析工具适用的任务。
:::
::: section
::: titlepage
## [⁠]{#main-analyzeperf.html#s-analyzeperf-systemtap}3.5.1. SystemTap {.title}
:::
::: para
SystemTap
是一个跟踪和探测工具，可让用户监控并分析操作系统活动（特别是内核活动）的细节。它提供类似
[**netstat**]{.application}、[**top**]{.application}、[**ps**]{.application}
和 [**iostat**]{.application}
等工具的输出结果，但包含为所收集信息的额外过滤和分析选项。
:::
::: para
SystemTap
提供深入准确的系统活动和程序行为分析，以便您可以准确包我系统和程序瓶颈。
:::
::: para
Eclipse 的功能函数图插件使用 SystemTap
作为后端，可让其完整监控程序状态，其中包括功能调用、返回、次数以及用户空间变量，并以直观形式显示以便优化。
:::
::: para
有关 SystemTap 的详情请参考*《SystemTap 初学者指南》*，地址为
。
:::
:::
::: section
::: titlepage
## [⁠]{#main-analyzeperf.html#s-analyzeperf-oprofile}3.5.2. OProfile {.title}
:::
::: para
OProfile（[**oprofile**]{.application}）是一个系统范围的性能监控工具。它使用处理器专用性能监控硬件搜索有关内核和系统可执行程序的信息，比如何时参考内存，L2
缓存要求数，以及收到的硬件中断数。它还可以用来决定处理器用量，以及使用最多的应用程序和服务。
:::
::: para
Oprofile 还可以通过 Eclipse Oprofile 插件与 Eclipse
一同使用。这个插件可以让用户轻松确定其代码中最耗时的部分，并在执行
OProfile 的所有命令行功能时获得最丰富的直观结果。
:::
::: para
但用户应该注意到 OProfile 的几个限制：
:::
::: {.itemizedlist xmlns:d="http://docbook.org/ns/docbook"}
-   ::: para
    性能监控示例可能不准确因为该处理器可能没有按顺序执行指令，可能是根据最接近的指令执行，而不是触发中断的指令。
    :::
-   ::: para
    因为 OProfile
    是系统范围内的程序，且会多次启动和停止，多次运行的示例允许有累积。就是说您需要清除以前程序运行产生的示例数据。
    :::
-   ::: para
    它主要是识别有 CPU
    限制的问题进程，因此无法识别等待为其他事件锁定而处于睡眠状态的进程。
    :::
:::
::: para
有关使用 OProfile 的详情请参考 *《部署指南》*，地址为
；或者
`/usr/share/doc/oprofile-`{.filename} 中的
[**oprofile**]{.application} 文档。
:::
:::
::: section
::: titlepage
## [⁠]{#main-analyzeperf.html#s-analyzeperf-valgrind}3.5.3. Valgrind {.title}
:::
::: para
Valgrind
提供大量探测和分析工具以便帮助您改进性能并修正您的程序。这些工具可以探测与内存和线程有关的错误，以及堆、栈和阵列过度运行，以便您在程序代码中轻松定位并修改错误。他们还可以分析缓存，堆，以及分支预测以便识别增加程序速度，减少程序内存使用的因素。
:::
::: para
Valgrind 通过在综合 CPU
运行分析您的程序，并检测其执行的程序代码。然后它会输出"说明"明确为用户指定的文件描述符、文件或者网络插槽鉴别出执行程序所涉及的每个进程。检测等级根据
Valgrind
工具的使用及设置而有所不同，但重要的是注意执行检测的代码的时间比一般执行代码要长
4-50 倍。
:::
::: para
Valgrind 可以在您的程序中原封不动地使用，不需要重新编译。但因为 Valgrind
使用调试信息锁定代码中的问题，如果您的程序以及支持库无法使用启用的调试信息编译，则强烈建议您将重新编译包含在这个信息中。
:::
::: para
从红帽企业版 Linux 6.4 开始 Valgrind 整合了 [gdb]{.package} (GNU Project
Debugger) 以改进调试效率。
:::
::: para
有关 Valgrind 的详情请参考*《开发者指南》*，地址为
。或者在安装
[valgrind]{.package} 软件包后查看 `man valgrind`{.command}
命令。附带的文档也可在此找到：
:::
::: {.itemizedlist xmlns:d="http://docbook.org/ns/docbook"}
-   ::: para
    `/usr/share/doc/valgrind-/valgrind_manual.pdf`{.filename}
    :::
-   ::: para
    `/usr/share/doc/valgrind-/html/index.html`{.filename}
    :::
:::
::: para
有关如何使用 Valgrind 分析系统内存的详情请参考 [第 5.3 节 "使用 Valgrind
简要描述内存使用"](#main-memory.html#s-memory-valgrind){.xref}。
:::
:::
::: section
::: titlepage
## [⁠]{#main-analyzeperf.html#s-analyzperf-perf}3.5.4. Perf {.title}
:::
::: para
[**perf**]{.application}
工具提供大量有用的性能计数器，可让用户评估其系统中其他程序的影响：
:::
::: variablelist
[`perf stat`{.command}]{.term}
:   ::: para
    这个命令常见性能事件的总体统计，其中包括执行的质量以及消耗的时钟周期。您可以使用选项标签收集事件中默认测量事件以外的统计数据。从红帽企业版
    Linux 6.4 开始，还可以使用 `perf stat`{.command}
    过滤根据一个或者多个指定的控制组（cgroup）指定的监控。有关详情请查看
    man page：`man perf-stat`{.command}。
    :::
[`perf record`{.command}]{.term}
:   ::: para
    这个命令将性能数据记录到文件中，以后可以使用 `perf report`{.command}
    进行分析。有关详情请查看 man page：`man perf-record`{.command}。
    :::
[`perf report`{.command}]{.term}
:   ::: para
    这个命令从文件中读取性能数据并分析记录的数据。有关详情请查看 man
    page：`man perf-report`{.command}。
    :::
[`perf list`{.command}]{.term}
:   ::: para
    这个命令列出具体机器中的可用事件。这些时间随性能监控硬件以及系统软件配置而有所不同。有关详情请查看
    man page：`man perf-list`{.command}
    :::
[`perf top`{.command}]{.term}
:   ::: para
    这个命令与 [**top**]{.application}
    工具的功能类似。它可以实时生成并显示性能计数器分析。有关详情请查看
    man page：`man perf-top`{.command}。
    :::
:::
::: para
有关 [**perf**]{.application} 的详情请查看红帽企业版 Linux
*《开发者指南》*，地址为
。
:::
:::