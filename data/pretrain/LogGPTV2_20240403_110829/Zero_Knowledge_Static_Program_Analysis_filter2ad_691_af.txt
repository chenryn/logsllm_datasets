rank-1-constraint-system (R1CS). We use the open-source compiler
of libsnark [10] to generate R1CS in our frontend.
Choice of backends. As described in Section 3 and 4, our frontend
efficiently compiles the static analysis on a program to an R1CS
instance, and we can use any generic zero knowledge proof scheme
on R1CS as our backend, including [11, 15, 23, 25, 42, 53, 61]. We
choose two of them in our implementation with different trade-offs.
The first one is the pairing-based SNARK [42] with the change
in [24] for commit-and-prove. The scheme has a constant size proof
and fast verifier time. However, the prover time is relatively slow
(ùëÇ(ùê∂ log ùê∂) on an R1CS of size ùê∂) and it requires a trusted setup.
The second one is the recent scheme from [61] called Spartan. The
scheme does not require trusted setup and the prover time faster
than [42], but the proof size is ùëÇ(‚àö
ùê∂) and the verifier time is ùëÇ(ùê∂).
Hardware. We run our experiments on Amazon EC2 c5.9xlarge
instances with 72GB of RAM and 3GHz Intel Xeon platinum 8124m
virtual core. We report the average running time of 5 executions.
Benchmarks. In this section, we report the performance of our
zero-knowledge abstract interpretation for three analyses: tainting
analysis, interval analysis and control flow analysis. The analyses
are performed on real programs drawn from the public benchmarks
for static analysis tools WCET [9] and DroidBench 2.0 [4], and exist-
ing artifacts for control flow analysis [8] used as the benchmarks in
the recent paper [68] on abstract interpretation. The WCET project
contains programs used to evaluate and compare different types of
analysis tools, while the DroidBench 2.0 is designated for evaluating
the effectiveness of taint-analysis tools for Android applications.
To perform control flow analysis, we make functions first-class
citizens in our language, which means they can be referred to by
variables and called anonymously. The abstract domain is then
defined as subsets of all possible functions in the program. Compar-
ison and join on this domain are defined as the subset relationship
and the set union operation respectively. We initialize the control
flow graph as all determined flows, and append all possible flows
to the worklist when we reach anonymous calls in the analysis.
All the programs in our benchmarks contain function calls. We
support inter-procedure analysis with a small overhead using the
techniques in Section 4. Therefore, we show the performance of our
zero-knowledge inter-procedure analysis scheme in this section.
6.1 Evaluations on Real Programs
We first evaluate our scheme on five real programs. We run the
zero-knowledge interval analysis on bubble sort and FFT programs
from the WCET benchmark [9], run the zero-knowledge tainting
analysis on the PrivateDataLeak program from the DroidBench 2.0
benchmark [4], and run the zero-knowledge control flow analysis
on the RSA and Solovay-strassen programs in [8].
We compile these programs to our programming language. For
the PrivateDataLeak program, built-in functions such as getDe-
viceId(), getPassWd() in the Android development environment
do not exist in our language, and we mark them as either tainting
source or safe procedures following the description of the bench-
marks. Some other procedures such as sendTextMessage() are
marked as ‚Äòsink‚Äô where tainting information should not flow into.
Session 11B: Zero Knowledge II CCS ‚Äô21, November 15‚Äì19, 2021, Virtual Event, Republic of Korea2961#lines
#variables
Analysis
#flows
#iterations
circuit size
SNARK [42] prover time
verification time
proof size
Spartan [61] prover time
verification time
proof size
BubbleSort
63
14
FFT
156
43
PrivateDataLeak
207
27
RSA
161
22
Solovay-strassen
301
75
Interval
Interval
Tainting
Control Flow
Control Flow
215
216
255,056
20.21s
374
375
1,235,354
91.73s
78
237
582,048
43.89s
181
681
4,763,263
355.2s
232
291
277,537
21.63s
1.4 ms
128 bytes
6.49s
0.640s
48.1 KB
Table 2: Performance of our zkAI schemes.
3.27s
0.297s
31.1 KB
48.9s
6.54s
83.1 KB
1.86s
0.208s
30.3 KB
12.8s
1.69s
48.8 KB
The performance of our schemes are shown in Table 2. #variables
denotes the maximum number of variables in a function. The num-
ber of lines is counted in our language, as one can embed multiple
statements in one line in the original language. We also show the
number of flows ùëö and the number of iterations ùëá . As shown in
the table, it takes 355.2s to generate a proof for zero knowledge
interval analysis on the FFT program with 156 lines of code, 21.63s
for zero knowledge taint analysis on the PrivateDataLeak with 207
lines of code, and 91.73s for zero knowledge control flow analysis
on the Solovay-strassen with 301 lines of code using SNARKs. The
proof size is only 128 bytes and the verification time is 1.4ms. Using
Spartan improves the prover time by 6.6‚Äì10.8√ó, with an increase
on the proof size and the verification time.
For the same analysis, the performance largely depends on the
size of the program and the maximum number of variables in a
function. In addition, the interval analysis is more expensive than
the other two. This is because the transfer function, compare and
join operations for the interval analysis contains many comparisons
on the bounds of intervals, while those for the tainting and control
flow analysis can be efficiently implemented as a small circuit.
Moreover, the worklist algorithm for the tainting and control flow
analysis converges very fast and the number of iterations is only
slightly larger than the number of flows. On the contrary, in the
interval analysis the intervals are updated many times when seeing
loops. Thanks to our widening technique with a threshold of 5, the
number of iterations is around 5 times of the number of flows.
The performance is reasonable in practice to prove properties of
secret programs with soundness and zero-knowledge. One can also
take advantages of other zero-knowledge proof backends to achieve
better trade-offs on the performance for different applications.
ZKP backend with circuit-dependent trusted setup, one can replace
it by backends without trusted setup to construct zero knowledge
abstract interpretation schemes per Definition 2. Therefore, here
we only compare with the frontend of Buffet. We implement the
worklist algorithm in the syntax of Buffet and compile it using the
open-source implementation [7].
Figure 4 shows the size of the circuits produced by the three
schemes for the tainting analysis on synthetic program with 10
variables. As shown in the figure, the general-purpose RAM-to-
circuit-reduction introduces the highest overhead per instruction/-
cycle. The size of the circuits is 605‚àí 6400√ó larger than our scheme
and is beyond the current scale of the ZKP backend. The compiler
of Buffet significantly improves the size of the circuits by utilizing
program-dependent optimizations. However, the circuits are still
35 ‚àí 40√ó larger than our schemes manually constructed for the
tainting analysis. Compiling the worklist algorithm and the ab-
stract interpretation in general to arithmetic circuits automatically
and efficiently is an interesting future research, and we believe the
techniques proposed in this paper could potentially help the design.
6.3 Evaluations on Synthetic Programs
Finally, we further demonstrate the scalability of our schemes. We
follow the pattern of the real programs, and generate synthetic
programs of different sizes and parameters for benchmarking.
For the tainting analysis, our synthetic program contains nested
function calls. The tainting sources hide in some functions and the
6.2 Comparing to Generic Schemes
We then compare the performance of our zkAI scheme with RAM-
based generic zero knowledge proof systems [16, 66]. The scheme
in [16] proposes a universal RAM-to-circuit reduction supporting
arbitrary RAM programs written in an assembly-like language
named TinyRAM. Each cycle costs around 4000 gates. We imple-
ment the worklist algorithm in TinyRAM, count the number of
cycles and estimate the size of the circuit. The scheme in [66], re-
ferred as Buffet, automatically compiles a subset of C language to a
program-specific circuit. Though the original scheme in [66] uses a
Figure 4: Comparison to generic zero-knowledge proofs
501003005008001600Lines216218220222224226228230232234Circuit SizeOurschemeBuÔ¨ÄetBCTV14Session 11B: Zero Knowledge II CCS ‚Äô21, November 15‚Äì19, 2021, Virtual Event, Republic of Korea2962#lines
#variables
#other parameters
#iterations
circuit size
prover time [61]
verification time
proof size
Tainting
12,800
70
/
25,231
47.8 M
406 s
65.8 s
282KB
Interval
2,000
50
CFA
4,000
50
40% in loop Multiplicity=8
5,075
41.3 M
394 s
57.9 s
282 KB
4,317
57.0 M
421 s
75.7 s
282KB
Table 3: Performance of our zkAI schemes on large synthetic
programs with Spartan [61] as the backend.
tainting information is supposed to be passed to the caller in nested
function calls. The functions are calling each other randomly, ensur-
ing that each function is called at least once. We set the maximum
number of variables in a function as 70. With these parameters, we
then randomly generate the statements inside each function. For
the interval analysis, our synthetic program contains nested loops
with memory accesses. We set some array buffers to have limited
sizes, and access the buffer in instructions later. The buffer overflow
error can then be detected in the problematic nested loops. To deal
with loops with many iterations, we take a widening strategy that