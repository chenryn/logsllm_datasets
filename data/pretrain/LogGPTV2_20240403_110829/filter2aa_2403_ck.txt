   lw  
$gp, 0x50+var_40($sp) 
31  
   lw  
$a1, 0x50+year($sp) 
32  
   lw  
$t9, (printf & 0xFFFF)($gp) 
33  
   la  
$a0, $LC0 # "Year: %d\n" 
34  
   jalr  
$t9 
35  
   addiu  $a1, 1900 ; branch delay slot 
36  
   lw  
$gp, 0x50+var_40($sp) 
37  
   lw  
$a1, 0x50+month($sp) 
38  
   lw  
$t9, (printf & 0xFFFF)($gp) 
39  
   lui  
$a0, ($LC1 >> 16) # "Month: %d\n" 
40  
   jalr  
$t9 
41  
   la  
$a0, ($LC1 & 0xFFFF) # "Month: %d\n" ; branch delay slot 
42  
   lw  
$gp, 0x50+var_40($sp) 
43  
   lw  
$a1, 0x50+day($sp) 
44  
   lw  
$t9, (printf & 0xFFFF)($gp) 
45  
   lui  
$a0, ($LC2 >> 16) # "Day: %d\n" 
46  
   jalr  
$t9 
47  
   la  
$a0, ($LC2 & 0xFFFF) # "Day: %d\n" ; branch delay slot 
48  
   lw  
$gp, 0x50+var_40($sp) 
49  
   lw  
$a1, 0x50+hour($sp) 
50  
   lw  
$t9, (printf & 0xFFFF)($gp) 
51  
   lui  
$a0, ($LC3 >> 16) # "Hour: %d\n" 
52  
   jalr  
$t9 
53  
   la  
$a0, ($LC3 & 0xFFFF) # "Hour: %d\n" ; branch delay slot 
54  
   lw  
$gp, 0x50+var_40($sp) 
55  
   lw  
$a1, 0x50+minutes($sp) 
56  
   lw  
$t9, (printf & 0xFFFF)($gp) 
57  
   lui  
$a0, ($LC4 >> 16) # "Minutes: %d\n" 
58  
   jalr  
$t9 
59  
   la  
$a0, ($LC4 & 0xFFFF) # "Minutes: %d\n" ; branch delay slot 
60  
   lw  
$gp, 0x50+var_40($sp) 
61  
   lw  
$a1, 0x50+seconds($sp) 
62  
   lw  
$t9, (printf & 0xFFFF)($gp) 
63  
   lui  
$a0, ($LC5 >> 16) # "Seconds: %d\n" 
64  
   jalr  
$t9 
65  
   la  
$a0, ($LC5 & 0xFFFF) # "Seconds: %d\n" ; branch delay slot 
66  
   lw  
$ra, 0x50+var_4($sp) 
67  
   or  
$at, $zero ; load delay slot, NOP 
68  
   jr  
$ra 
69  
   addiu  $sp, 0x50 
70 
71  
   $LC0: .ascii "Year: %d\n" 
72  
   $LC1: .ascii "Month: %d\n" 
73  
   $LC2: .ascii "Day: %d\n" 
74  
   $LC3: .ascii "Hour: %d\n" 
75  
   $LC4: .ascii "Minutes: %d\n" 
76  
   $LC5: .ascii "Seconds: %d\n" 
这个案例再次演示了延时槽影响人工分析的严重程度。例如，位于第 35 行的“addiu $a1, 1900”指令，
把返回值加上 1900。千万别忘记它的执行顺序先于第 34 行的 JALR 指令。 
21.3.4 数组替代法 
在内存中，结构体是依次排列的一系列数据。为了演示它的这一特色，我们对指令清单 21.8 的程序进
行少许修改，以使用数组替代 tm 结构体： 
#include  
#include  
void main()  
{ 
    int tm_sec, tm_min, tm_hour, tm_mday, tm_mon, tm_year, tm_wday, tm_yday, tm_isdst; 
    time_t unix_time; 
异步社区会员 dearfuture(15918834820) 专享 尊重版权
第 21 章  结  构  体 
321 
    unix_time=time(NULL); 
    localtime_r (&unix_time, &tm_sec); 
    printf ("Year: %d\n", tm_year+1900); 
    printf ("Month: %d\n", tm_mon); 
    printf ("Day: %d\n", tm_mday); 
    printf ("Hour: %d\n", tm_hour); 
    printf ("Minutes: %d\n", tm_min); 
    printf ("Seconds: %d\n", tm_sec); 
}; 
注解：指向结构体的指针，实际上指向结构体的第一个元素。 
使用 GCC 4.7.3 编译的时候，会看到编译器提示如下所示。 
指令清单 21.12  GCC 4.7.3 
GCC_tm2.c: In function ’main’: 
GCC_tm2.c:11:5: warning: passing argument 2 of ’localtime_r’ from incompatible pointer type [ enabled  
by default] 
In file included from GCC_tm2.c:2:0: 
/usr/include/time.h:59:12: note: expected ’struct tm *’ but argument is of type ’int *’ 
不过这些问题不影响正常编译，所得可执行程序的具体指令如下所示。 
指令清单 21.13  GCC 4.7.3 
main       proc near 
var_30     = dword ptr -30h 
var_2C     = dword ptr -2Ch 
unix_time  = dword ptr -1Ch 
tm_sec     = dword ptr -18h 
tm_min     = dword ptr -14h 
tm_hour    = dword ptr -10h 
tm_mday    = dword ptr -0Ch 
tm_mon     = dword ptr -8 
tm_year    = dword ptr -4 
push    ebp 
mov     ebp, esp 
and     esp, 0FFFFFFF0h 
sub     esp, 30h 
call    __main 
mov     [esp+30h+var_30], 0 ; arg 0 
call    time 
mov     [esp+30h+unix_time], eax 
lea     eax, [esp+30h+tm_sec] 
mov     [esp+30h+var_2C], eax 
lea     eax, [esp+30h+unix_time] 
mov     [esp+30h+var_30], eax 
call    localtime_r 
mov     eax, [esp+30h+tm_year] 
add     eax, 1900 
mov     [esp+30h+var_2C], eax 
mov     [esp+30h+var_30], offset aYearD ; "Year: %d\n" 
call    printf 
mov     eax, [esp+30h+tm_mon] 
mov     [esp+30h+var_2C], eax 
mov     [esp+30h+var_30], offset aMonthD ; "Month: %d\n" 
call    printf 
mov     eax, [esp+30h+tm_mday] 
mov     [esp+30h+var_2C], eax 
mov     [esp+30h+var_30], offset aDayD ; "Day: %d\n" 
call    printf 
mov     eax, [esp+30h+tm_hour] 
异步社区会员 dearfuture(15918834820) 专享 尊重版权
322 
逆向工程权威指南（上册） 
mov     [esp+30h+var_2C], eax 
mov     [esp+30h+var_30], offset aHourD ; "Hour: %d\n" 
call    printf 
mov     eax, [esp+30h+tm_min] 
mov     [esp+30h+var_2C], eax 
mov     [esp+30h+var_30], offset aMinutesD ; "Minutes: %d\n" 
call    printf 
mov     eax, [esp+30h+tm_sec] 
mov     [esp+30h+var_2C], eax 
mov     [esp+30h+var_30], offset aSecondsD ; "Seconds: %d\n" 
call    printf 
leave 
retn 
main   
endp 
从汇编代码上看，采用数组的程序与先前使用结构体的程序最终竟会如此一致，以至于我们无法从汇
编代码上区分出源程序的区别。 
虽然上述程序可以照常运行，但是使用数组替换结构体的做法并不值得推荐。一般来说，“不启用优化
编译选项”的编译器通常以代码声明变量的次序，在局部栈里分配变量的空间，但是无法保证每次编译的
结果都严丝合缝。 
如果使用 GCC 以外的编译器的话，部分编译器可能警告除变量 tm_sec 之外的 tm_year、tm_mon、tm_mday、
tm_hour、tm_min 没有被初始化。这是因为编译器并不能分析出这些变量将被 localtime_r()函数赋值。 
在这个程序里，结构体各字段都是 int 型数据，所以本例十分直观。如果源程序中结构体的字段都是 16 
位 WORD 型数据，且采取了 SYSTEMTIME 那样的数据结构，因为局部变量向 32 位边界对齐的缘故，这
将使 GetSystemTime()无法正常赋值。有关结构体的字段封装问题，请参考 21.4 节。 
由此可见，结构体就是一连串变量的封装体。在内存中结构体的各字段依次排列。我认为结构体就是
语体上的糖块，使其内各个变量像糖分一样粘成一个统一体，以便编译器把它们分配到连续空间里。即使
别人可能认为我是编程专家，但是我毕竟不是，所以这种说法很可能不够确切。顺便提一下，早期的（1972
年之前）C语言不支持结构体structure。
①
21.3.5 替换为 32 位 words 
这个可执行程序完全和前面的程序一样，本书就不演示相关调试过程了。 
#include  
#include  
void main()  
{ 
    struct tm t; 
    time_t unix_time; 
    int i; 
    unix_time=time(NULL); 
    localtime_r (&unix_time, &t); 
    for (i=0; i>，“SIGPLAN Not”的第 28 章第 3 节:201-208 页，您
也可以在作者的网站下载：http://yurichev.com/mirrors/C/dmr-The%20Development%20of%20the%20C%20Language-1993.pdf.。 
异步社区会员 dearfuture(15918834820) 专享 尊重版权
第 21 章  结  构  体 
323 
上述程序把同一地址（指针）的数据分别当作结构体和整型数据、分别进行写和读的访问操作，完全可
以正常工作。在当前时间为“23:51:45 26-July-2014”的时刻，内存中的数据如下： 
0x0000002D (45) 
0x00000033 (51) 
0x00000017 (23) 
0x0000001A (26) 
0x00000006 (6) 
0x00000072 (114) 
0x00000006 (6) 
0x000000CE (206) 
0x00000001 (1) 
这些变量的排列数据，与结构体在源代码中的声明顺序相同。详细内容请参见本书第 21 章第 8 节。 
编译而得的程序如下所示。 
指令清单 21.14  Optimizing GCC 4.8.1 
main           
proc near 
push     ebp 
mov      ebp, esp 
push     esi 
push     ebx 
and      esp, 0FFFFFFF0h 
sub      esp, 40h 
mov      dword ptr [esp], 0 ; timer 
lea      ebx, [esp+14h] 
call     _time 
lea      esi, [esp+38h]      ;tp 
mov      [esp+4], ebx 
mov      [esp+10h], eax 
lea      eax, [esp+10h] 
mov      [esp], eax          ; timer 
call     _localtime_r 
nop 
lea      esi, [esi+0]        ; nop 
loc_80483D8: 
; EBX here is pointer to structure, ESI is the pointer to the end of it. 
mov      eax, [ebx]      ; get 32-bit word from array 
add      ebx, 4          ; next field in structure 
mov      dword ptr [esp+4], offset a0x08xD ; "0x%08X (%d)\n" 
mov      dword ptr [esp], 1 
mov      [esp+0Ch], eax  ; pass value to printf() 
mov      [esp+8], eax    ; pass value to printf() 
call     ___printf_chk 
cmp      ebx, esi        ; meet structure end? 
jnz      short loc_80483D8 ; no - load next value then 
lea      esp, [ebp-8] 
pop      ebx 
pop      esi 
pop      ebp 
retn 
main              endp 
栈空间内的数据依次被看作两种数据：先被当作结构体、再被当作数组。 
本例表明，我们可以借助指针修改结构体中的各别字段。 
本文再次强调：若不是以 hack 目的研究代码，就不必做这种处理。在编写生产环境下的程序时，不建
议使用这种处理手段。 
21.3.6  替换为字节型数组 
更进一步的实验表明，也可以让时间结构体与字节型数组共用一个指针。 
异步社区会员 dearfuture(15918834820) 专享 尊重版权
324 
逆向工程权威指南（上册） 
#include  
#include  
void main()  
{ 
    struct tm t; 