# Trustworthy Whole-System Provenance for the Linux Kernel

**Authors:**
- Adam Bates, Dave (Jing) Tian, and Kevin R.B. Butler, University of Florida
- Thomas Moyer, MIT Lincoln Laboratory

**Publication:**
- Proceedings of the 24th USENIX Security Symposium
- August 12–14, 2015, Washington, D.C.
- ISBN: 978-1-939133-11-3
- Open access sponsored by USENIX

## Abstract

In a provenance-aware system, mechanisms gather and report metadata that describes the history of each object being processed on the system, allowing users to understand how data objects came to exist in their present state. However, while past work has demonstrated the usefulness of provenance, less attention has been given to securing provenance-aware systems. Provenance itself is a potential attack vector, and its authenticity and integrity must be guaranteed before it can be trusted.

We present **Linux Provenance Modules (LPM)**, the first general framework for the development of provenance-aware systems. LPM creates a trusted provenance-aware execution environment, collecting complete whole-system provenance while imposing as little as 2.7% performance overhead on normal system operation. LPM introduces new mechanisms for secure provenance layering and authenticated communication between provenance-aware hosts, and also interoperates with existing mechanisms to provide strong security assurances.

To demonstrate the potential uses of LPM, we design a **Provenance-Based Data Loss Prevention (PB-DLP) system**. We implement PB-DLP as a file transfer application that blocks the transmission of files derived from sensitive ancestors while imposing just tens of milliseconds of overhead. LPM is the first step towards widespread deployment of trustworthy provenance-aware applications.

## 1. Introduction

A provenance-aware system automatically gathers and reports metadata that describes the history of each object being processed on the system. This allows users to track and understand how a piece of data came to exist in its current state. The application of provenance is of great interest in various fields, including scientific data processing, databases, software development, and storage. Provenance has also been shown to be valuable for security by identifying malicious activity in data centers, improving Mandatory Access Control (MAC) labels, and ensuring regulatory compliance.

Unfortunately, most provenance collection mechanisms in the literature exist as fully-trusted user space applications. Even kernel-based provenance mechanisms and sketches for trusted provenance architectures fall short of providing a provenance-aware system for malicious environments. The problem of trusting provenance is further exacerbated in distributed or layered provenance systems due to the lack of a mechanism to verify the authenticity and integrity of provenance collected from different sources.

In this work, we present **Linux Provenance Modules (LPM)**, the first generalized framework for secure provenance collection on the Linux operating system. LPM captures whole-system provenance, a detailed record of processes, IPC mechanisms, network activity, and even the kernel itself. This capture is invisible to the applications for which provenance is being collected. LPM introduces a gateway that permits the upgrading of low-integrity workflow provenance from user space. It also facilitates secure distributed provenance through an authenticated, tamper-evident channel for the transmission of provenance metadata between hosts. LPM interoperates with existing security mechanisms to establish a hardware-based root of trust to protect system integrity.

To achieve the goal of trustworthy whole-system provenance, we demonstrate the power of our approach by presenting a scheme for **Provenance-Based Data Loss Prevention (PB-DLP)**. PB-DLP allows administrators to reason about the propagation of sensitive data and control its further dissemination through an expressive policy system, offering dramatically stronger assurances than existing enterprise solutions, while imposing just milliseconds of overhead on file transmission. To our knowledge, this work is the first to apply provenance to DLP.

Our contributions can be summarized as follows:
- **Introduce Linux Provenance Modules (LPM):** LPM facilitates secure provenance collection at the kernel layer, supports attested disclosure at the application layer, provides an authenticated channel for network transmission, and is compatible with the W3C Provenance (PROV) Model [59]. In evaluation, we demonstrate that provenance collection imposes as little as 2.7% performance overhead.
- **Demonstrate secure deployment:** Leveraging LPM and existing security mechanisms, we create a trusted provenance-aware execution environment for Linux. Through porting Hi-Fi [48] and providing support for SPADE [29], we demonstrate the relative ease with which LPM can be used to secure existing provenance collection mechanisms. We show that, in realistic malicious environments, ours is the first proposed system to offer secure provenance collection.
- **Introduce Provenance-Based Data Loss Prevention (PB-DLP):** We present a new paradigm for the prevention of data leakage that searches object provenance to identify and prevent the spread of sensitive data. PB-DLP is impervious to attempts to launder data through intermediary files and IPC. We implement PB-DLP as a file transfer application, and demonstrate its ability to query object ancestries in just tens of milliseconds.

## 2. Background

### 2.1. Data Provenance

Data provenance, sometimes called lineage, describes the actions taken on a data object from its creation up to the present. Provenance can be used to answer a variety of historical questions about the data it describes, such as "What processes and datasets were used to generate this data?" and "In what environment was the data produced?" Conversely, provenance can also answer questions about the successors of a piece of data, such as "What objects on the system were derived from this object?"

The commonly accepted representation for data provenance is a directed acyclic graph (DAG). In this work, we use the W3C PROV-DM specification [59] because it is pervasive and facilitates the exchange of provenance between deployments. An example PROV-DM graph of a malicious binary is shown in Figure 1. This graph describes an attack in which a binary running with root privilege reads several sensitive system files, then edits those files in an attempt to gain persistent access to the host. Edges encode relationships between nodes, pointing backwards into the history of system execution. Writing to an object triggers the creation of a second object node with an incremented version number. This particular provenance graph could serve as a valuable forensic tool, allowing system administrators to better understand the nature of a network intrusion.

### 2.2. Data Loss Prevention

**Data Loss Prevention (DLP)** is enterprise software that seeks to minimize the leakage of sensitive data by monitoring and controlling information flow in large, complex organizations. DLP systems are motivated by the need to control intellectual property and demonstrate regulatory compliance for personally-identifiable information (PII), as well as directives such as PCI, HIPAA, SOX, and EU Data Protection. While encryption can protect data at rest, the true DLP challenge involves preventing leakage by authorized users, both malicious and well-meaning. A 2013 study by the Ponemon Institute found that over half of companies' employees admitted to emailing intellectual property to their personal email accounts, with 41 percent doing so weekly.

Therefore, it is important for a DLP system to exhaustively explain which pieces of data are sensitive, where that data has propagated within the organization, and where it is (and is not) permitted to flow. Many DLP products use regular expression-based approaches to identify sensitive data, similar to Cornell’s Spider. Other DLP systems use a label-based approach, tagging document metadata with security labels. For example, the Titus system requires company employees to manually annotate documents, and plugins for applications (e.g., Microsoft Office) prevent the document from being transmitted to or opened by other employees lacking the necessary clearance. Despite these mechanisms, DLP software is often difficult to configure and prone to failure, offering marginal utility at great cost.

## 3. Linux Provenance Modules

### 3.1. Defining Whole-System Provenance

In the design of LPM, we adopt a model for whole-system provenance that is broad enough to accommodate the needs of various existing provenance projects. We inspect four past proposals that collect broadly scoped provenance: SPADE [29], LineageFS [53], PASS [43], and Hi-Fi [48]. These systems instrument file and process system calls, associate calls with process IDs, user identifiers, and network addresses, and include additional metadata such as OS and hardware descriptions. Hi-Fi takes an even broader approach, treating non-persistent objects like memory, IPC, and network packets as principal objects.

We observe that all these systems are concerned with operations on controlled data types, identified as files, inodes, superblocks, socket buffers, IPC messages, IPC message queues, semaphores, and shared memory. Therefore, we define whole-system provenance as a complete description of agents (users, groups) controlling activities (processes) interacting with controlled data types during system execution.

### 3.2. Threat Model & Assumptions

We consider an adversary who has gained remote access to a provenance-aware host or network. The attacker may attempt to remove provenance records, insert spurious information, or find gaps in the provenance monitor's ability to record information flows. A network attacker may also try to forge or strip provenance from data in transit. The implications and methods of such attacks are domain-specific. For example:

- **Scientific Computing:** An adversary may manipulate provenance to commit fraud or inject uncertainty into records, triggering a "Climategate"-like controversy.
- **Access Control:** When used to mediate access decisions, an attacker could tamper with provenance to gain unauthorized access or perform a denial-of-service attack by artificially escalating the security level of data objects.

## 3.3. Security and Design Goals

To address these threats, LPM aims to ensure the authenticity and integrity of provenance data. Our security goals include:
- **Authenticity:** Ensuring that provenance data is generated by the correct entities and has not been tampered with.
- **Integrity:** Ensuring that provenance data is complete and accurate, without any omissions or additions.
- **Confidentiality:** Protecting provenance data from unauthorized access.

### 3.4. LPM Design

LPM is designed to capture whole-system provenance in a secure manner. Key features include:
- **Kernel-Level Collection:** LPM operates at the kernel level, capturing a detailed record of processes, IPC mechanisms, network activity, and even the kernel itself.
- **Invisible Capture:** The provenance collection is invisible to the applications for which provenance is being collected.
- **Gateway for Low-Integrity Provenance:** LPM includes a gateway that allows the upgrading of low-integrity workflow provenance from user space.
- **Authenticated Communication:** LPM provides an authenticated, tamper-evident channel for the transmission of provenance metadata between hosts.
- **Interoperability:** LPM interoperates with existing security mechanisms to establish a hardware-based root of trust to protect system integrity.

### 3.5. Secure Deployment

We demonstrate the secure deployment of LPM by integrating it with existing security mechanisms and showing its effectiveness in realistic malicious environments. By porting Hi-Fi [48] and providing support for SPADE [29], we illustrate the relative ease with which LPM can be used to secure existing provenance collection mechanisms. We show that, in such environments, LPM is the first proposed system to offer secure provenance collection.

## 4. Provenance-Based Data Loss Prevention (PB-DLP)

### 4.1. Overview

**Provenance-Based Data Loss Prevention (PB-DLP)** is a new paradigm for preventing data leakage by searching object provenance to identify and prevent the spread of sensitive data. PB-DLP is designed to be impervious to attempts to launder data through intermediary files and IPC. We implement PB-DLP as a file transfer application, demonstrating its ability to query object ancestries in just tens of milliseconds.

### 4.2. Implementation and Evaluation

We implement PB-DLP as a file transfer application that blocks the transmission of files derived from sensitive ancestors. Our implementation imposes just tens of milliseconds of overhead, making it highly efficient. We evaluate PB-DLP in a variety of scenarios, demonstrating its effectiveness in preventing data leakage while maintaining low overhead.

## 5. Conclusion

In this paper, we introduce **Linux Provenance Modules (LPM)**, the first general framework for the development of secure provenance-aware systems. LPM creates a trusted provenance-aware execution environment, collecting complete whole-system provenance with minimal performance overhead. We also present **Provenance-Based Data Loss Prevention (PB-DLP)**, a new paradigm for preventing data leakage that leverages provenance to identify and block the transmission of sensitive data. Our work represents a significant step towards the widespread deployment of trustworthy provenance-aware applications.