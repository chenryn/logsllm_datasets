title:Trustworthy Whole-System Provenance for the Linux Kernel
author:Adam Bates and
Dave Tian and
Kevin R. B. Butler and
Thomas Moyer
Trustworthy Whole-System Provenance  
for the Linux Kernel
Adam Bates, Dave (Jing) Tian, and Kevin R.B. Butler, University of Florida; 
Thomas Moyer, MIT Lincoln Laboratory
https://www.usenix.org/conference/usenixsecurity15/technical-sessions/presentation/bates
This paper is included in the Proceedings of the 
24th USENIX Security Symposium
August 12–14, 2015 • Washington, D.C.
ISBN  978-1-939133-11-3
Open access to the Proceedings of  the 24th USENIX Security Symposium is sponsored by USENIXTrustworthy Whole-System Provenance for the Linux Kernel
Adam Bates, Dave (Jing) Tian,
Kevin R.B. Butler
University of Florida
Thomas Moyer
MIT Lincoln Laboratory
{adammbates,daveti,butler}@ufl.edu
PI:EMAIL
Abstract
In a provenance-aware system, mechanisms gather
and report metadata that describes the history of each ob-
ject being processed on the system, allowing users to un-
derstand how data objects came to exist in their present
state. However, while past work has demonstrated the
usefulness of provenance, less attention has been given
to securing provenance-aware systems. Provenance it-
self is a ripe attack vector, and its authenticity and in-
tegrity must be guaranteed before it can be put to use.
We present Linux Provenance Modules
(LPM),
the ﬁrst general framework for the development of
provenance-aware systems. We demonstrate that LPM
creates a trusted provenance-aware execution environ-
ment, collecting complete whole-system provenance
while imposing as little as 2.7% performance overhead
on normal system operation. LPM introduces new mech-
anisms for secure provenance layering and authenticated
communication between provenance-aware hosts, and
also interoperates with existing mechanisms to provide
strong security assurances. To demonstrate the poten-
tial uses of LPM, we design a Provenance-Based Data
Loss Prevention (PB-DLP) system. We implement PB-
DLP as a ﬁle transfer application that blocks the trans-
mission of ﬁles derived from sensitive ancestors while
imposing just tens of milliseconds overhead. LPM is the
ﬁrst step towards widespread deployment of trustworthy
provenance-aware applications.
1
Introduction
A provenance-aware system automatically gathers and
reports metadata that describes the history of each ob-
ject being processed on the system. This allows users to
track, and understand, how a piece of data came to ex-
ist in its current state. The application of provenance
The Lincoln Laboratory portion of this work was sponsored by the
Assistant Secretary of Defense for Research & Engineering under Air
Force Contract #FA8721-05-C-0002. Opinions, interpretations, con-
clusions and recommendations are those of the author and are not nec-
essarily endorsed by the United States Government.
is presently of enormous interest in a variety of dis-
parate communities including scientiﬁc data processing,
databases, software development, and storage [43, 53].
Provenance has also been demonstrated to be of great
value to security by identifying malicious activity in data
centers [5, 27, 56, 65, 66], improving Mandatory Access
Control (MAC) labels [45, 46, 47], and assuring regula-
tory compliance [3].
Unfortunately, most provenance collection mecha-
nisms in the literature exist as fully-trusted user space
applications [28, 27, 41, 56]. Even kernel-based prove-
nance mechanisms [43, 48] and sketches for trusted
provenance architectures [40, 42] fall short of providing
a provenance-aware system for malicious environments.
The problem of whether or not to trust provenance is fur-
ther exacerbated in distributed environments, or in lay-
ered provenance systems, due to the lack of a mechanism
to verify the authenticity and integrity of provenance col-
lected from different sources.
In this work, we present Linux Provenance Modules
(LPM), the ﬁrst generalized framework for secure prove-
nance collection on the Linux operating system. Mod-
ules capture whole-system provenance, a detailed record
of processes, IPC mechanisms, network activity, and
even the kernel itself; this capture is invisible to the ap-
plications for which provenance is being collected. LPM
introduces a gateway that permits the upgrading of low
integrity workﬂow provenance from user space. LPM
also facilitates secure distributed provenance through an
authenticated, tamper-evident channel for the transmis-
sion of provenance metadata between hosts. LPM inter-
operates with existing security mechanisms to establish a
hardware-based root of trust to protect system integrity.
trustworthy whole-system
provenance, we demonstrate the power of our approach
by presenting a scheme for Provenance-Based Data Loss
Prevention (PB-DLP). PB-DLP allows administrators to
reason about the propagation of sensitive data and control
its further dissemination through an expressive policy
system, offering dramatically stronger assurances than
existing enterprise solutions, while imposing just mil-
Achieving the goal of
USENIX Association  
24th USENIX Security Symposium  319
Figure 1: A provenance graph showing the attack footprint of a malicious binary. Edges encode relationships that ﬂow
backwards into the history of system execution, and writing to an object creates a second node with an incremented
version number. Here, we see that the binary has rewritten /etc/rc.local, likely in an attempt to gain persistence
after a system reboot.
liseconds of overhead on ﬁle transmission. To our knowl-
edge, this work is the ﬁrst to apply provenance to DLP.
Our contributions can thus be summarized as follows:
• Introduce Linux Provenance Modules (LPM).
LPM facilitates secure provenance collection at the
kernel layer, supports attested disclosure at the ap-
plication layer, provides an authenticated channel
for network transmission, and is compatible with
the W3C Provenance (PROV) Model [59]. In eval-
uation, we demonstrate that provenance collection
imposes as little as 2.7% performance overhead.
• Demonstrate secure deployment.
Leveraging
LPM and existing security mechanisms, we create
a trusted provenance-aware execution environment
for Linux. Through porting Hi-Fi [48] and provid-
ing support for SPADE [29], we demonstrate the
relative ease with which LPM can be used to secure
existing provenance collection mechanisms. We
show that, in realistic malicious environments, ours
is the ﬁrst proposed system to offer secure prove-
nance collection.
• Introduce Provenance-Based Data Loss Preven-
tion (PB-DLP). We present a new paradigm for
the prevention of data leakage that searches object
provenance to identify and prevent the spread of
sensitive data. PB-DLP is impervious to attempts
to launder data through intermediary ﬁles and IPC.
We implement PB-DLP as a ﬁle transfer applica-
tion, and demonstrate its ability to query object an-
cestries in just tens of milliseconds.
2 Background
Data provenance, sometimes called lineage, describes
the actions taken on a data object from its creation up
to the present. Provenance can be used to answer a va-
riety of historical questions about the data it describes.
Such questions include, but are not limited to, “What
processes and datasets were used to generate this data?"
and “In what environment was the data produced?" Con-
versely, provenance can also answer questions about the
successors of a piece of data, such as “What objects on
the system were derived from this object?" Although po-
tential applications for such information are nearly lim-
itless, past proposals have conceptualized provenance in
different ways, indicating that a one-size-ﬁts-all solution
to provenance collection is unlikely to meet the needs of
all of these audiences. We review these past proposals
for provenance-aware systems in Section 8.
The commonly accepted representation for data prove-
nance is a directed acyclic graph (DAG). In this work, we
use the W3C PROV-DM speciﬁcation [59] because it is
pervasive and facilitates the exchange of provenance be-
tween deployments. An example PROV-DM graph of a
malicious binary is shown in Figure 1. This graph de-
scribes an attack in which a binary running with root
privilege reads several sensitive system ﬁles, then ed-
its those ﬁles in an attempt to gain persistent access to
the host. Edges encode relationships between nodes,
pointing backwards into the history of system execution.
Writing to an object triggers the creation of a second ob-
ject node with an incremented version number. This par-
ticular provenance graph could serve as a valuable foren-
sics tool, allowing system administrators to better under-
stand the nature of a network intrusion.
2.1 Data Loss Prevention
Data Loss Prevention (DLP) is enterprise software that
seeks to minimize the leakage of sensitive data by moni-
toring and controlling information ﬂow in large, complex
organizations [1].1 In addition to the desire to control in-
tellectual property, another motivator for DLP systems
is demonstrating regulatory compliance for personally-
identiﬁable information (PII),2 as well as directives such
1 Our overview of data loss prevention is based on review of pub-
licly available product descriptions for software developed by Bit9,
CDW, Cisco, McAfee, Symantec, and Titus.
2 See NIST SP 800-122
320  24th USENIX Security Symposium 
USENIX Association
2
UsedUsedUsedUsedUsedWasControlledByWasGeneratedByWasGeneratedByWasGeneratedByWasGeneratedByWasGeneratedBy/etc/rc.local:0/bin/ps:0/var/spool/cron/root:0/etc/passwd:0/etc/shadow:0Malicious Binary/etc/rc.local:1/bin/ps:1/var/spool/cron/root:1/etc/passwd:1/etc/shadow:1rootas PCI,3 HIPAA,4 SOX.5 or E.U. Data Protection.6 As
encryption can be used to protect data at rest from unau-
thorized access, the true DLP challenge involves prevent-
ing leakage at the hands of authorized users, both mali-
cious and well-meaning agents. This latter group is a
surprisingly big problem in the ﬁght to control an organi-
zation’s intellectual property; a 2013 study conducted by
the Ponemon Institute found that over half of companies’
employees admitted to emailing intellectual property to
their personal email accounts, with 41 percent admitting
to doing so on a weekly basis [2].
It is therefore im-
portant for a DLP system to be able to exhaustively ex-
plain which pieces of data are sensitive, where that data
has propagated to within the organization, and where it
is (and is not) permitted to ﬂow.
As DLP systems are proprietary and are marketed so
as to abstract away the complex details of their inter-
nal workings, we cannot offer a complete explanation of
their core features. However, some of the mechanisms
in such systems are known. Many DLP products use a
regular expression-based approach to identify sensitive
data, operating similarly to a general-purpose version of
Cornell’s Spider7. For example, in PCI compliance,3
DLP might attempt to identify credit card numbers in
outbound emails by searching for 16 digit numbers that
pass a Mod-10 validation check [39]. Other DLP systems
use a label-based approach to identify sensitive data, tag-
ging document metadata with security labels. The Titus
system accomplishes this by having company employees
manually annotate the documents that they create;8 plug-
ins for applications (e.g., Microsoft Ofﬁce) then prevent
the document from being transmitted to or opened by
other employees that lack the necessary clearance. In ei-
ther approach, DLP software is difﬁcult to conﬁgure and
prone to failure, offering marginal utility at great price.
3 Linux Provenance Modules
To serve as the foundation for secure provenance-aware
systems, we present Linux Provenance Modules (LPM).
We provide a working deﬁnition for the provenance our
system will collect in §3.1. In §3.2 we consider the ca-
pabilities and aims of a provenance-aware adversary, and
identify security and design goals in §3.3. The LPM de-
sign is presented in §3.4, and in §3.5 we demonstrate its
secure deployment. An expanded description of our sys-
tem is available in our technical report [8].
3 See https://www.pcisecuritystandards.org
4 See http://www.hhs.gov/ocr/privacy
5 Short for the Sarbanes-Oxley Act, U.S. Public Law No. 107-20
6 See EU Directive 95/46/EC
7 See http://www2.cit.cornell.edu/security/tools
8 See http://www.titus.com
3.1 Deﬁning Whole-System Provenance
In the design of LPM, we adopt a model for whole-
system provenance9 that is broad enough to accom-
modate the needs of a variety of existing provenance
projects. To arrive at a deﬁnition, we inspect four
past proposals that collect broadly scoped provenance:
SPADE [29], LineageFS [53], PASS [43], and Hi-Fi [48].
SPADE provenance is structured around primitive oper-
ations of system activities with data inputs and outputs.
It instruments ﬁle and process system calls, and asso-
ciates each call to a process ID (PID), user identiﬁer, and
network address. LineageFS uses a similar deﬁnition,
associating process IDs with the ﬁle descriptors that the
process reads and writes. PASS associates a process’s
output with references to all input ﬁles and the command
line and process environment of the process; it also ap-
pends out-of-band knowledge such as OS and hardware
descriptions, and random number generator seeds, if pro-
vided.
In each of these systems, networking and IPC
activity is primarily reﬂected in the provenance record
through manipulation of the underlying ﬁle descriptors.
Hi-Fi takes an even broader approach to provenance,
treating non-persistent objects such as memory, IPC, and
network packets as principal objects.
We observe that, in all instances, provenance-aware
systems are exclusively concerned with operations on
controlled data types, which are identiﬁed by Zhang et
al.
as ﬁles, inodes, superblocks, socket buffers, IPC
messages, IPC message queue, semaphores, and shared
memory [64]. Because controlled data types represent a
super set of the objects tracked by system layer prove-
nance mechanisms, we deﬁne whole-system provenance
as a complete description of agents (users, groups) con-
trolling activities (processes) interacting with controlled
data types during system execution.
3.2 Threat Model & Assumptions
We consider an adversary that has gained remote access
to a provenance-aware host or network. Once inside the
system, the attacker may attempt to remove provenance
records, insert spurious information into those records,
or ﬁnd gaps in the provenance monitor’s ability to record
information ﬂows. A network attacker may also attempt
to forge or strip provenance from data in transit. Be-
cause captured provenance can be put to use in other ap-
plications, the adversary’s goal may even be to target the
provenance monitor itself. The implications and meth-
ods of such an attack are domain-speciﬁc. For example:
9This term is coined in [48], but not explicitly deﬁned. We demon-
strate the concrete requirements of a collection mechanism for whole-
system provenance in this work.
USENIX Association  
24th USENIX Security Symposium  321
3
• Scientiﬁc Computing: An adversary may wish to ma-
nipulate provenance in order to commit fraud, or to in-
ject uncertainty into records to trigger a “Climategate”-
like controversy [50].
• Access Control: When used to mediate access deci-
sions [7, 45, 46, 47], an attacker could tamper with
provenance in order to gain unauthorized access, or to
perform a denial-of-service attack on other users by ar-
tiﬁcially escalating the security level of data objects.