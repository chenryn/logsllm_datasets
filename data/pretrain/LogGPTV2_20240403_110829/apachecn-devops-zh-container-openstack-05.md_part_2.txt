4.  你将有一个 Magnum 设置运行。要验证安装，请检查运行的 Magnum 服务列表:
```
$ magnum service-list
+----+----------+------------------+-------+----------+-----------------+------------------------
-+---------------------------+
| id | host     | binary           | state | disabled | disabled_reason | created_at             
| updated_at                |
+----+----------+------------------+-------+----------+-----------------+------------------------
-+---------------------------+
| 1  | devstack | magnum-conductor | up    | False    | -               | 2017-09
19T11:14:12+00:00 | 2017-09-19T14:06:41+00:00 |
+----+----------+------------------+-------+----------+-----------------+------------------------
-+---------------------------+  
```
# 管理 COE
Magnum 在 OpenStack 中为集群的生命周期提供了无缝管理。当前的操作是基本的 CRUD 操作，具有一些高级功能，例如扩展集群、设置外部负载平衡器、使用 TLS 设置安全集群等。在本节中，我们将创建一个 Swarm 集群模板，使用该模板创建一个 Swarm 集群，然后，我们将在集群上运行一些工作负载来验证我们的集群状态。
首先，我们将准备我们的会话，以便能够使用各种 OpenStack 客户端，包括 Magnum、中子和扫视。创建一个新的外壳并获取开发栈`openrc`脚本:
```
$ source /opt/stack/devstack/openrc admin admin  
```
创建一个要与群集模板一起使用的 keypair。该密钥将用于 ssh 到集群节点:
```
$ openstack keypair create --public-key ~/.ssh/id_rsa.pub testkey
+-------------+-------------------------------------------------+
| Field       | Value                                           |
+-------------+-------------------------------------------------+
| fingerprint | d2:8d:c8:d2:2a:82:fc:aa:98:17:5f:9b:22:08:8a:f7 |
| name        | testkey                                         |
| user_id     | 4360ea27027a4d9d97e749bba9698915                |
+-------------+-------------------------------------------------+  
```
DevStack 创建了一个 Fedora 原子微操作系统映像，供 Magnum 使用。用户还可以在扫视中创建其他映像，以便在他们的群集中使用。验证一眼中创建的映像:
```
$ openstack image list
+--------------------------------------+------------------------------------+--------+
| ID                                   | Name                               | Status |
+--------------------------------------+------------------------------------+--------+
| 482bd0b4-883d-4fc5-bf26-a88a98ceddd1 | Fedora-Atomic-26-20170723.0.x86_64 | active |
| 6862d910-a320-499e-a19f-1dbcdc79455f | cirros-0.3.5-x86_64-disk           | active |
+--------------------------------------+------------------------------------+--------+
```
现在，用群体 COE 类型创建一个 Magnum 集群模板。这在本质上类似于新星的味道，并告诉 Magnum 如何构建集群。集群模板指定了要在我们的集群中使用的所有资源，例如 Fedora Atomic 映像、Nova keypair、网络等:
```
$ magnum cluster-template-create swarm-template --image Fedora-Atomic-26-20170723.0.x86_64 --keypair testkey --external-network public --flavor m1.small --docker-volume-size 5  --dns-nameserver 8.8.8.8 --coe swarm
+-----------------------+--------------------------------------+
| Property              | Value                                |
+-----------------------+--------------------------------------+
| insecure_registry     | -                                    |
| labels                | {}                                   |
| updated_at            | -                                    |
| floating_ip_enabled   | True                                 |
| fixed_subnet          | -                                    |
| master_flavor_id      | -                                    | 
| uuid                  | 0963601a-50aa-4361-9f6f-5f64f0826da8 |
| no_proxy              | -                                    |
| https_proxy           | -                                    |
| tls_disabled          | False                                |
| keypair_id            | testkey                              |
| public                | False                                |
| http_proxy            | -                                    |
| docker_volume_size    | 5                                    |
| server_type           | vm                                   |
| external_network_id   | public                               |
| cluster_distro        | fedora-atomic                        |
| image_id              | Fedora-Atomic-26-20170723.0.x86_64   |
| volume_driver         | -                                    |
| registry_enabled      | False                                |
| docker_storage_driver | devicemapper                         |
| apiserver_port        | -                                    |
| name                  | swarm-template                       |
| created_at            | 2017-09-19T13:06:28+00:00            |
| network_driver        | docker                               |
| fixed_network         | -                                    |
| coe                   | swarm                                |
| flavor_id             | m1.small                             |
| master_lb_enabled     | False                                |
| dns_nameserver        | 8.8.8.8                              |
+-----------------------+--------------------------------------+  
```
使用以下命令验证集群模板的创建:
```
$ magnum cluster-template-list
+--------------------------------------+----------------+
| uuid                                 | name           |
+--------------------------------------+----------------+
| 0963601a-50aa-4361-9f6f-5f64f0826da8 | swarm-template |
+--------------------------------------+----------------+  
```
使用前面的模板创建集群。该集群将创建一组虚拟机，并在其上安装 Docker Swarm:
```
$ magnum cluster-create swarm --cluster-template swarm-template --node-count 1
Request to create cluster f42f5dfc-a2d0-4f89-9af1-566c666727c3 has been accepted.  
```
集群的初始状态为`CREATE_IN_PROGRESS`。梦龙在完成集群创建后将状态更新为`CREATE_COMPLETE`。
Heat 可用于查看栈或特定集群状态的详细信息。
要检查所有集群栈的列表，请使用以下命令:
```
$ openstack stack list
+--------------------------------------+--------------------+----------------------------------+-------------------+----------------------+--------------+
| ID                                   | Stack Name         | Project                          | Stack Status       | Creation Time        | Updated Time |
+--------------------------------------+--------------------+----------------------------------+--------------------+----------------------+--------------+
| 9d39e877-32ff-4904-a349-727274caee68 | swarm-5g5ilw3lak6p | 8c4a19b957904085992dd800621459b6 | CREATE_IN_PROGRESS | 2017-09-19T13:07:52Z | None         |
+--------------------------------------+--------------------+----------------------------------+--------------------+----------------------+--------------+  
```
要查看集群的详细信息，请执行以下操作:
```
$ magnum cluster-show swarm
+---------------------+------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| Property            | Value                                                                                                                                                                                                                                                                                                                                                                                                |
+---------------------+------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| labels              | {}                                                                                                                                                                                                                                                                                                                                                                                                   |
| updated_at          | 2017-09-19T13:16:41+00:00                                                                                                                                                                                                                                                                                                                                                                            |
| keypair             | testkey                                                                                                                                                                                                                                                                                                                                                                                              |
| node_count          | 1                                                                                                                                                                                                                                                                                                                                                                                                    |
| uuid                | f42f5dfc-a2d0-4f89-9af1-566c666727c3                                                                                                                                                                                                                                                                                                                                                                 |
| api_address         | https://172.24.4.4:6443
|
| master_addresses    | ['172.24.4.2']                                                                                                                                                                                                                                                                                                                                                                                       |
| create_timeout      | 60                                                                                                                                                                                                                                                                                                                                                                                                   |
| status              | CREATE_COMPLETE                                                                                                                                                                                                                                                                                                                                                                                        |
| docker_volume_size  | 5                                                                                                                                                                                                                                                                                                                                                                                                    |
| master_count        | 1                                                                                                                                                                                                                                                                                                                                                                                                    |
| node_addresses      | ['172.24.4.3']                                                                                                                                                                                                                                                                                                                                                                                                   |
| status_reason       | Stack CREATE completed successfully                                                                                                                                                                                                                                           |
| coe_version         | 1.2.5                                                                                                                                                                                                                                                                                                                                                                                                |
| cluster_template_id | 0963601a-50aa-4361-9f6f-5f64f0826da8                                                                                                                                                                                                                                                                                                                                                                 |
| name                | swarm                                                                                                                                                                                                                                                                                                                                                                                                |
| stack_id            | 9d39e877-32ff-4904-a349-727274caee68                                                                                                                                                                                                                                                                                                                                                                 |
| created_at          | 2017-09-19T13:07:46+00:00                                                                                                                                                                                                                                                                                                                                                                            |
| discovery_url       | https://discovery.etcd.io/af18b93f0d1b64db0d803a1c76e4d0d0                                                                                                                                                                                                                                                                                                                                           |
| container_version   | 1.12.6                                                                                                                                                                                                                                                                                                                                                                                               |
+---------------------+------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+  
```
我们现在需要设置 Docker CLI 来使用我们用适当的凭据创建的集群集群。
创建一个`dir`来存储`certs`和`cd`。Docker 使用了`DOCKER_CERT_PATH` env 变量，它期望`ca.pem`、`key.pem`和`cert.pem`在该目录中:
```
$ export DOCKER_CERT_PATH=~/.docker
$ mkdir -p ${DOCKER_CERT_PATH}
$ cd ${DOCKER_CERT_PATH}
```
生成一个 RSA 密钥:
```
$ openssl genrsa -out key.pem 4096
```
创建`openssl`配置以帮助生成企业社会责任:
```
$ cat > client.conf  cert.pem
$ magnum ca-show --cluster swarm-cluster > ca.pem  
```
将命令行界面设置为使用顶级域名。这个`env var`被 Docker 消耗掉了:
```
$ export DOCKER_TLS_VERIFY="1" 
```
设置要使用的正确主机，这是 Swarm API 服务器端点的公共 IP 地址。
这个`env var`被 Docker 消耗掉了:
```
$ export DOCKER_HOST=$(magnum cluster-show swarm-cluster | awk '/
api_address /{print substr($4,7)}')  
```
接下来，我们将在这个 Swarm 集群中创建一个容器。该容器将 ping 地址`8.8.8.8`四次:
```
$ docker run --rm -it cirros:latest ping -c 4 8.8.8.8  
```
您应该会看到类似如下的输出:
```
PING 8.8.8.8 (8.8.8.8): 56 data bytes
64 bytes from 8.8.8.8: seq=0 ttl=40 time=25.513 ms
64 bytes from 8.8.8.8: seq=1 ttl=40 time=25.348 ms
64 bytes from 8.8.8.8: seq=2 ttl=40 time=25.226 ms
64 bytes from 8.8.8.8: seq=3 ttl=40 time=25.275 ms
--- 8.8.8.8 ping statistics ---
4 packets transmitted, 4 packets received, 0% packet loss
round-trip min/avg/max = 25.226/25.340/25.513 ms  
```
创建集群后，您可以通过更新`node_count`属性来动态地向集群添加节点或从集群中移除节点。例如，要再添加一个节点，请执行以下操作:
```
$ magnum cluster-update swarm replace node_count=2  
```
更新过程继续时，集群的状态将为`UPDATE_IN_PROGRESS`。更新完成后，状态将更新为`UPDATE_COMPLETE`。减少`node_count`会删除节点上所有已删除的现有容器。Magnum 尝试删除工作量最少的节点。
# 摘要
在本章中，我们详细了解了 OpenStack 容器基础设施管理服务 Magnum。我们研究了 Magnum 不同的物体。然后，我们了解了 Magnum 的组件和架构。然后，我们在 Magnum 中提供了用户请求工作流的详细概述。
最后，我们看了如何使用 DevStack 为 Magnum 安装开发设置，然后使用 Magnum CLI 做了一个动手练习，创建了一个 Docker Swarm COE。
在下一章中，我们将了解 Zun，这是一个面向 OpenStack 的容器管理服务。