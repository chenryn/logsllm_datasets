20
15
10
5
0
0
b=7/8
b=3/4
b=5/8
b=1/2
20
40
60
80
100
δ
120
140
160
180
200
Figure 5. The relationship between Nattack
and δ.
30
25
20
C
W
15
10
5
0
2
4
6
8
10
12
TAIMD/RTT
14
16
18
20
Upper bound (b=1)
AIMD(0.31,0.875)
TCP
Lower bound (b=0)
Figure 6. The relationship between WC
and TAIMD
RT T .
converges to WC, because it is very likely that the ﬂows
involved will time out because of a small value of WC.
The second anomaly has to do with the outgoing TCP
ACK trafﬁc. As just mentioned, the incoming legitimate
TCP trafﬁc volume will decline because of the attack.
However, the overall incoming TCP trafﬁc volume may
or may not decline during the attack, because the attack
packets can also be TCP based. Hence, our detection sys-
tem is also required to observe a possible decline in the
outgoing TCP ACK trafﬁc. It is important to emphasize
that detecting both anomalies is necessary for conﬁrming
a PDoS. Doing one without the other will result in a high
false positive rate.
where dIn
1,k is the wavelet coefﬁcient at the ﬁnest scale
(j = 1). Similarly, we deﬁne a statistic based on the sig-
nal energy to characterize the trend in the outgoing TCP
ACK trafﬁc for the nth window of samples as follows.
τ In = T In − TAttack
τ Out = T Out − TAttack
τ F inal = max{τ In, τ Out}
(18)
(19)
(20)
(cid:8)
k
(cid:8)
k
3.1 The ﬁrst stage: A wavelet analysis of the
network trafﬁc
Based on the above discussion, the ﬁrst stage in the de-
tection process is to monitor the variability in the incom-
ing trafﬁc and in the outgoing TCP ACK trafﬁc. Here
we employ a discrete wavelet transform (DWT) for this
purpose. The DWT represents a signal f(t) ∈ L2(R)
using scaling functions ϕj,k(t), and a translated and di-
lated version of wavelet functions ψj,k(t) [23]. Since the
wavelet functions operate like high-pass ﬁlters that use
narrow time windows to compute differences in signals,
they can capture the variability of the incoming trafﬁc vol-
umes. On the other hand, the scaling functions perform
like low-pass ﬁlters; therefore, they can be used to extract
the trend of the outgoing TCP ACK trafﬁc.
To realize an on-line detection, we use a moving win-
dow to group G continuous samples to compute the DWT.
Moreover, we deﬁne a statistic based on the signal energy
to quantify the variability in the incoming trafﬁc for the
nth window of samples as follows.
to the upper bound of EH(n), and set βL to EL(n) −
Ptolerance × [(cid:6)(EL(n))], where (cid:6)(EL(n)) is the stan-
dard deviation of EL(n), and Ptolerance controls the limit
of the allowable decrease in EL(n).
Let T In be the detection time for ZH(n) when
yZH (n) > C In
cusum,
(15)
where yZH (n) is the CUSUM value of ZH(n) and
C In
cusum is the corresponding threshold. Similarly, let
T Out be the detection time for ZL(n) when
yZL(n) > C Out
cusum,
(16)
where yZL(n) is the CUSUM value of ZL(n) and COut
cusum
is the corresponding threshold. The detection system con-
ﬁrms the onset of a PDoS attack when both Eq. (15) and
Eq. (16) hold. Hence, the ﬁnal detection time is deter-
mined by
T F inal = max{T In, T Out}.
(17)
EH(n) =
1
G
|dIn
1,k
|2,
(11)
Let TAttack be the start time of a PDoS attack, and τ In,
τ Out, and τ F inal be the detection delays as deﬁned below.
EL(n) =
1
G
|cOut
L,k
|2,
(12)
Other details about the CUSUM algorithm can be found
in Appendix B.
where cOut
L,k is the scaling coefﬁcient at the highest decom-
posed scale (j = L). Further details about the DWT can
be found in Appendix A.
3.2 The second stage: A CUSUM detection for
change points
The second stage is then to detect abrupt changes in
EH(n) for the incoming trafﬁc and in EL(n) for the
ACK trafﬁc. We employ a nonparametric CUSUM al-
gorithm for this purpose. The CUSUM method assumes
that the mean value of the variable under surveillance will
change from negative to positive when a change occurs.
Since both EH(n) and EL(n) are larger than zero, we
transform them into two random sequences, ZH(n) and
ZL(n), which have negative mean values under normal
conditions.
ZH(n) = EH(n) − βH
ZL(n) = βL − EL(n),
(13)
(14)
where βH and βL are constants for determining the mean
values of ZH(n) and ZL(n). Normally, we can set βH
4 Performance evaluation
We have conducted experiments using both ns-2 sim-
ulation [1] and a test-bed to evaluate the effectiveness of
the PDoS attacks and the two-stage detection system.
4.1 Simulation experiments and results
We have conducted extensive ns-2 simulation exper-
iments based on the simulation scripts provided by [13].
The network topology is shown in Fig. 7(a). It consists
of N pairs of TCP senders and TCP receivers. The links
connecting the router S, the senders, and an attacker are
100 Mbps, as are the links between router R and the re-
ceivers. Both routers are connected through a bottleneck
link of 10 Mbps with RED queue management [10]. The
simulation period is 900 seconds, and the attack begins
at 181 seconds (TAttack = 181) and ends at 720 sec-
onds. Since SExtent(n) is set to a constant in all exper-
iments, we use A(TExtent(n), RAttack, TSpace(n), N) to
describe the PDoS attack, where RAttack is the sending
rate in each attack pulse.
The settings for the detection system are selected as fol-
lows. The detection system aggregates the incoming data
trafﬁc and outgoing TCP ACK at a ﬁxed time interval
Ts = 0.25s.
In order to achieve a small detection de-
lay, the moving window size is chosen to be G = 120,
which means that each observation period is half a minute
(0.25s × 120 = 30s). At the end of each observation pe-
riod, the detector generates the statistics, such as ZH(n)
and ZL(n), and then executes the CUSUM algorithm to
search for abrupt changes.
We employ the Daubechies family of wavelets in the
ﬁrst stage of the detection, which have been widely used
to analyze network trafﬁc. The Daubechies wavelets, rep-
resented by DB(N), are orthonormal and compactly sup-
ported with N vanishing moments and 2N − 1 support
length. DB(1), the Haar wavelet, is used to analyze the
incoming data trafﬁc and DB(4) is applied to analyze the
outgoing TCP ACK trafﬁc.
We calculate Ccusum in Appendix B by selecting τ =
m + 1 and h = 2(cid:7)a(cid:7) in Eq. (30). In principle, βH can
be set to the upper threshold of EH(n), which can be es-
timated by the value that corresponds to 95% of the cu-
mulative distribution function of EH(n). To simplify the
process, we set the value of βH to the maximum value
of EH(n), and set the tolerance parameter Ptolerance to 1
in the simulation experiments. As a result of the parame-
ter selection, the detection system will be more sensitive
to changes in the ACK trafﬁc, but will tolerate the normal
oscillations of incoming trafﬁc in order to keep a low false
positive rate.
4.1.1 Timeout-based attacks
When we discuss the two types of PDoS attacks, we as-
sume that a PDoS attack is either a timeout-based attack or
a AIMD-based attack. However, a PDoS attack will gen-
erally cause an affected TCP to frequently enter both the
timeout and fast recovery states. Therefore, in the rest of
this paper, a PDoS attack is considered as a timeout-based
attack if it will cause “many more” returns to the timeout
state than to the fast recovery state. Similarly, a PDoS at-
tack is regarded as a AIMD-based attack if it will cause
many more returns to the fast recovery state than to the
timeout state. In this section we ﬁrst consider the timeout-
based attack, and then examine the same set of issues for
a AIMD-based attack.
We have conducted simulation experiments for three
types of ﬂows: TCP Reno, TCP New Reno, and TCP-
friendly ﬂows that are based on AIM D(0.31, 0.875) and
TCP SACK [22]. The simulation results for the incoming
data trafﬁc are shown in Figs. 8(a)-8(b), and the results
for the outgoing ACK trafﬁc in Figs. 9(a)-9(b). In each
experiment, there are 30 ﬂows with heterogeneous RT T s
Sender 1
Sender 2
Sender N
Attacker
Router S
Router R
Receiver 1
Receiver 2
Receiver N-1
Receiver N
(a) The topology of the simulation model.
Attacker
Victim
Legitimate Users
Nist Net
(b) The topology of the test-bed.
Figure 7. Network topologies for simulation
and test-bed experiments.
540
1.05+0.15
ranging from 20ms to 460 ms. The PDoS attack is param-
(cid:9) =
eterized as A(150ms, 10M bps, 1050ms, (cid:8)
450).
In order to compare the results, we adjust all of
the horizontal axes with the same scale. However, this
does not mean that each ﬁgure contains the same num-
ber of points. For example, Fig. 8(a) consists of 3600
points, each of which is a count during an interval of 0.25s,
whereas Fig. 8(b) contains only 30 points that represent
the values of yZH (n) computed at the end of each obser-
vation period.
As shown in Fig. 8(a), the wavelet coefﬁcients clearly
indicate that the incoming trafﬁc exhibits more oscilla-
tions during the PDoS attack between 181s to 720s, as
compared with periods without the attack, i.e., [1s, 180s]∪
[721s, 900s]. In the other direction, Fig. 9(a) shows that
the outgoing TCP ACK trafﬁc declines after the onset of
the PDoS attack.
Fig. 8(b) displays the statistic ZH(n) of the incoming
data trafﬁc and the CUSUM results: yZH (n) and CIn
cusum.
The detection times for ZH(n) for all three types of ﬂows
are all equal to T In = 210s, which is 30s after the begin-
ning of the attack. For the outgoing ACK trafﬁc, Fig. 9(b)
gives the result of ZL(n), yZL(n), and CIn
cusum. As with
the data trafﬁc, the detection times for ZL(n) for all three
types of ﬂows are all equal to T Out = 210s. As a re-
sult, the ﬁnal detection times for all three cases are equal
to T F inal = max{T In, T Out} = 210s. The detection
delay is τ F inal = max{τ In, τ Out} = 30s, which means
that the total detection delay is equal to the length of an
observation period.
Reno , τ F inal
Table 2 summarizes other experimental results that are
obtained by changing the value of SExtent. The ﬁrst
column (M bps) shows the different attack rates, ranging
from 1 Mbps to 20 Mbps. τ F inal
N ewReno, and τ F inal
AIM D
show the ﬁnal detection delay (in seconds) for TCP Reno,
New-Reno, and AIM D(0.31, 0.875), respectively. On
the other hand, LossR, LossN , and LossA give the es-
timates on the percentage decrease in the legitimate TCP
trafﬁc. These estimates are computed by dividing the av-
erage number of ACKs observed during a PDoS attack by
that during an attack-free environment. The results show
that AIM D(0.31, 0.875) is more robust than the other
two versions of TCP under the PDoS attack and that the
TCP Reno is most vulnerable, primarily because the cwnd
is decreased only to 0.875 of its previous value (instead of
0.5).
Moreover, when the attack burst rate is at least the same
as the bandwidth of the bottleneck, i.e., 10, 15, 20 Mbps,
the LossR,N,A columns show that the total throughput can
be reduced by as least 50%. The results also show that
our detection scheme will discover the attack after one
observation period (30 seconds). When the attack burst
rate is only half of the bandwidth of the bottleneck, i.e. 5
Mbps, the attack can deplete approximately 40% of total
throughout. In this low-rate attack, our scheme can still
detect the attack only after one observation period.
Table 2 shows other lower-rate attacks, i.e., 1, 2.5, and
4 Mbps. We use the symbol “*” to show that the cor-
responding attacks can sometimes be detected but not all
the time, and the symbol “X” to show that the correspond-
ing attacks cannot be detected in all experiment runs. The
detection outcomes are largely dependent on the choice of
detection parameters. For example, a relatively large βH
will fail to detect extremely low-rate attacks, because it
cannot differentiate between the trafﬁc ﬂuctuations caused
by the attack and the normal trafﬁc ﬂuctuations. More-
over, a relatively small Ptolerance will increase the false
positive rate, because it would be too sensitive to the
changes in the ACK trafﬁc and will therefore raise many
false alarms.
4.1.2 AIMD-based attacks
In this section, we re-examine the issues discussed
in the last section for attacks that are dominated by
the AIMD-based attack.
Therefore, we have em-
ployed the same topology and parameter settings as be-
fore. But for the purpose of comparison, we consider
only the New-Reno ﬂows. The results are presented
in Figs.
There are two different PDoS at-
tacks in each ﬁgure. The graphs on the left are for
A(10ms, 100M bps, 800ms , 667), while those on the
right are for A(10ms, 50M bps, 400ms, 1317).
10-11.
For the attack A(10ms, 100M bps, 800ms, 667), Fig.
10 shows that the total throughput gradually decreases af-
ter an abrupt change at the beginning of the attack. The
ﬁrst high-rate pulse causes many ﬂows to decrease their
cwnds. After that, the AIMD-based attack will force the
senders’ cwnd to gradually decrease to WC. It may not be
easy to observe in Fig. 10(a) the differences in the wavelet
coefﬁcients before and after the attack. However, our de-
tection scheme can still quickly discover it by combining
the detection results in both Fig. 10(b) and Fig. 11(b).
As for the attack A(10ms, 50M bps, 400ms, 1317),
Fig. 10(a) shows that this attack also forces most TCP
ﬂows to converge to WC during the period between 600s
and 720s, i.e., the relationship between the AIMD-based
attack and TCP ﬂows is stable. Fig. 10(b) captures the
phenomena in which the CUSUM value YZ(n) drops from
its maximum value. Since the throughput is very low dur-
ing that period, the ﬂuctuation also become weak. Other-
wise, the severe ﬂuctuation will continue because of the
increase in the probability of timeout. In either case, our
detection mechanism can detect it quickly.
Table 3 compares the three PDoS attacks (one from
three attacks have similar aver-
section 4.1.1). All
x 105
TCP Reno
x 105 TCP NewReno
x 105AIMD(0.31,0.875)
3
)
s
e
t
y
B
2.5
3
)
s
e
t
y
B
2.5
3
)
s
e
t
y
B
2.5
(
c
i
f
f
a
r
T
g
n
m
o
c
n
I
i
2
1
1.5
(
c
i
f
f
a
r
T
g
n
m
o
c
n
I
i
2
1
1.5
0
200 400 600 800
Time (Seconds)
0.5
0
200 400 600 800
Time (Seconds)
0.5
0
200 400 600 800
Time (Seconds)
x 105
TCP Reno
x 105 TCP NewReno
x 105AIMD(0.31,0.875)
1.5
1
0.5
1
0
i
s
t
n
e
c
i
f
f
e
o
C
l
e
e
v
a
W
−0.5
−1
i
0.5
s
t
n
e
c
i
f
f
e
o
C
−0.5
0
t
l
e
e
v
a
W
−1
(
c
i
f
f
a
r
T
g
n
m
o
c
n
I
i
2
1
1.5
0.5
1
0.5
0
i
s
t
n
e
c
i
f
f
e
o
C
l
e
e
v
a
W
−0.5
−1
t
t
−1.5
−1.5
−1.5
0
200 400 600 800
Time (Seconds)
0
200 400 600 800
Time (Seconds)
0
200 400 600 800
Time (Seconds)
(a) The incoming trafﬁc and their wavelet coefﬁcients.
x 108