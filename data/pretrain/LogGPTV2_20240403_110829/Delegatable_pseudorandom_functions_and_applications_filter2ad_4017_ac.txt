may skip directly to the policy-privacy relaxation in the end
of the section.
Assume that the policy predicates are ranges [a, b] that lie
in an interval [0, 2n − 1], where n is a positive integer. Then,
no eﬃcient and policy-private DPRF scheme exists, if the
trapdoor-generation algorithm T is deterministic, and the
delegated-computation algorithm C is tree-wise. This means
that for each range, the trapdoor consists of a data structure
of initial keys and meta-data that enable (by deﬁnition in
a deterministic way) the calculation of the ﬁnal set of PRF
values through a tree-like derivation process, where the ﬁnal
underlying tree structure of this process depends only on the
meta-data (and not on any of the initial keys). Indeed, if
policy privacy is satisﬁed, then for every 0  1). This argument can be ex-
tended to more general tree-like delegation schemes and for
the case g(r) = o(r), but we omit further details as it already
demonstrates that eﬃcient tree-like constructions require a
somewhat more relaxed deﬁnition of policy privacy—which
we introduce next.
secret random seed (of bit length λ). The GGM pseudoran-
dom function family [17] is deﬁned as F = {fk : {0, 1}n →
{0, 1}λ}k∈{0,1}λ , such that
fk(xn−1 ··· x0) = Gx0 (··· (Gxn−1 (k))) ,
where n is polynomial in λ and xn−1 ··· x0 is the input bit-
string of size n.
The GGM construction deﬁnes a binary tree over the PRF
domain. We illustrate this using Figure 4, which depicts a
binary tree with 5 levels. The leaves are labeled with a
decimal number from 0 to 15, sorted in ascending order.
Every edge is labeled with 0 (resp. 1) if it connects a left
(resp. right) child. We label every internal node with the
binary string determined by the labels of the edges along
the path from the root to this node. Suppose that the
PRF domain is {0, 1}4. Then, the PRF value of 0010 is
fk(0010) = G0(G1(G0(G0(k)))). Observe that the compo-
sition of G is performed according to the edge labels in the
path from the root to leaf 2 = (0010)2, selecting the ﬁrst
(second) half of the output of G when the label of the vis-
ited edge is 0 (resp. 1) and using this half as the seed for
the next application of G. Based on the above, the n-long
binary representation of the leaf labels constitute the PRF
domain, and every leaf is associated with the PRF value of
its label—these values constitute the PRF range.
Union policy privacy. We ﬁnally introduce the notion
of union policy privacy, where the adversary is restricted
from making queries in the union of the challenge policy
predicates (but is allowed to query at arbitrary locations
outside the targeted policy set). This privacy condition is
a strict relaxation of the one corresponding to Deﬁnition 4,
and we model it by a game GA
UPP(1λ) that proceeds identi-
cally as GA
PP(1λ), but terminates with 1 provided that the
following (weaker set of) conditions are all met: (i) b = ˜b,
(ii) |AP0| = |AP1|, (iii) AP0 (cid:54)= AP1 and (iv) ∀P ∈ Lpol :
AP ∩ (AP0 ∪ AP1 ) = ∅. To see the connection with Deﬁni-
tion 4 observe that the latter condition is equivalent to
AP ) ∩ AP0
AP ) ∩ AP1
∀S ⊆ Lpol :˛˛(
\
P∈S
˛˛ =˛˛(
\
P∈S
˛˛ = 0 .
Note that for policies P consisting of disjoint predicates, the
games GA
UPP(1λ) are equivalent.
PP(1λ) and GA
4. CONSTRUCTIONS
In this section we present DPRF schemes for range policy
predicates. In Section 4.1 we describe a ﬁrst construction,
called best range cover (BRC), which satisﬁes the correct-
ness and security properties of DPRFs, achieving trapdoors
of logarithmic size in the range size. However, BRC lacks
the policy-privacy property. In Section 4.2 we build upon
BRC to obtain a DPRF scheme, called uniform range cover
(URC), that is additionally (union) policy private, while re-
taining the trapdoor size complexity of BRC. In Section 4.3
we include the security proofs of the two schemes. In Section
4.4 we prove the union policy-privacy property of URC.
4.1 The BRC Construction
Let G : {0, 1}λ → {0, 1}2λ be a pseudorandom gener-
ator and G0(k), G1(k) be the ﬁrst and second half of the
string G(k), where the speciﬁcation of G is public and k is a
674
Figure 4: A GGM tree example.
Note that we can also associate every internal node of
the GGM tree with a partial PRF value, by performing
the composition of G as determined by the path from the
root to that node. For example, node 00 in Figure 4 is
associated with partial PRF G0(G0(k)). Henceforth, for
simplicity, we denote by fk(xn−1 ··· xj) the partial PRF
Gxj (··· (Gxn−1 (k))). Observe that if a party has the partial
PRF fk(xn−1 ··· xj), then it can compute the PRF values of
all 2j inputs that have preﬁx xn−1 ··· xj, simply by following
a DFS traversal in the subtree rooted at (the node labelled
by) xn−1 ··· xj and composing with seed fk(xn−1 ··· xj). In
our running example, using the partial PRF value at node
00, we can derive the PRF values of the inputs in (deci-
mal) range [0, 3] as fk(0000) = G0(G0(fk(00))), fk(0001) =
G1(G0(fk(00))), fk(0010) = G0(G1(fk(00))), and fk(0011)
= G1(G1(fk(00))).
For any range [a, b] of leaf labels, there is a (non-unique)
set of subtrees in the GGM tree that cover exactly the cor-
responding leaves. For instance, [2, 7] is covered by the sub-
trees rooted at nodes 001 and 01 (colored in grey). Ac-
cording to our discussion above, a party having the partial
PRF values of these subtree roots and the subtree depths,
it can derive all the PRF values of the leaves with labels in
1234567891011121314150(0010)2000100fk(00)=G0(G0(k))fk(0010)=G0(G1(G0(G0(k))))001101[2,7](0111)211[a, b]. In our example, having (fk(001), 1) and (fk(01), 2), it
can derive the PRF values of the leaves with labels in [2, 7].
Our ﬁrst construction is based on the above observations.
In particular, given a range policy predicate [a, b] ∈ P with
size r = b − a + 1 = |AP|,2 it ﬁnds the minimum number
of subtrees that cover [a, b]. As such, we call this scheme as
best range cover (BRC). A formal description follows.
The BRC DPRF construction is a triplet (F, T, C), where
F is the GGM PRF family described above with tree depth n.
The delegation policy is P = {[a, b] | 0 ≤ a ≤ b ≤ a + λγ <
2n}, where γ is a constant integer. Note that when a = b
the trapdoor sent to the proxy is (essentially) simply the
PRF value fk(a). In the rest of the section, we focus on the
non-trivial case where the range is not a singleton. When
a < b, the trapdoor generation algorithm T of BRC, hence-
forth denoted by TBRC, is given below.
if (∀i ≤ t : ai = 0) then
if (∀i ≤ t : bi = 1) then
else
Append (fk(an−1 · · · ai+11), i) to τ
return (fk(an−1 · · · at+1), t + 1)
Append (fk(an−1 · · · at), t) to τ
The Trapdoor Generation Algorithm TBRC
Input: a, b : 0 ≤ a < b ≤ a + λγ ≤ 2n − 1 and k ∈ {0, 1}λ
Output: Trapdoor τ for computing {fk(x)|x ∈ [a, b]}
1. τ ← (cid:104)(cid:105)
2. t ← max{i | ai (cid:54)= bi}
3.
4.
5.
6.
7.
8. else
9.
10.
11.
12.
13.
14. if (∀i ≤ t : bi = 1) then
15.
16. else
17.
18.
19.
20.
21.
22. return τ
Append (fk(an−1 · · · aµ), µ) to τ
Append (fk(bν−1 · · · bt), t) to τ
ν ← min{i | i < t ∧ bi = 0}
for i = t − 1 to ν + 1
if bi = 1 then
µ ← min{i | i < t ∧ ai = 1}
for i = t − 1 to µ + 1
if ai = 0 then
Append (fk(bn−1 · · · bi+10), i) to τ
Append (fk(bn−1 · · · bν ), ν) to τ
This algorithm takes as input a secret key k and a range
predicate [a, b] ∈ P. It outputs a delegation trapdoor τ that
enables the computation of fk(x) for every x whose decimal
representation is in [a, b] (i.e., the PRF values of the leaves in
the GGM tree with labels in [a, b]). Initially, TBRC ﬁnds the
ﬁrst bit in which a and b diﬀer (Line 2), which determines
the common path from the root to leaves a and b. Suppose
that this common path ends at node u. If [a, b] is the set
of labels that belong to the subtree with root u, then TBRC
outputs a single pair consisting of the partial PRF value that
corresponds to u along with the depth of the subtree (Lines
3-5). Otherwise, TBRC traverses the left and right subtree of
u separately (Lines 7-13 and 14-21, respectively). We will
describe only the left traversal (the right one is performed
symmetrically). TBRC considers the path pv→a starting from
the left child of u, denoted by v, to a. It checks whether a is
the leftmost leaf of v’s subtree. In this case the PRF value
of v is included in τ along with the depth of v’s subtree,
and the traversal terminates (Lines 3,7). Otherwise, if pv→a
proceeds to the left child of v, it includes in the trapdoor the
PRF value of the right child of v together with the depth of
2In the sequel, we use symbols r and |AP| interchangeably.
675
the subtree rooted at that child. In any case, it continues
the traversal in the same fashion with the next node of pv→a
(Lines 8-13).
In the example of Figure 4, for input [2, 7], algorithm TBRC
outputs trapdoor τ = (cid:104)(fk(001), 1), (fk(01), 2)(cid:105). By con-
struction, it is easy to see that TBRC covers the input range
with maximal subtrees, thus using a minimum number of
them.
We next describe the reconstruction algorithm C of BRC.
For ﬁxed P = [a, b] of size r and key k, we deﬁne the
set of states as StP,k = {τ, (1, τ ), . . . , (r − 1, τ ),⊥}, where
τ = (cid:104)(y1, d1), . . . , (ym, dm)(cid:105) is the trapdoor produced by
algorithm TBRC. Note that, every yi, i = 1, . . . , m corre-
sponds to a partial PRF value associated with the root of
a GGM subtree. Therefore, there is a natural ordering of
PRF values for a given τ , starting from the leftmost leaf
of the subtree of y1 to the rightmost leaf of the subtree
of ym. This order is not necessarily the same as the order
of the leaves in the GGM tree.3 Starting from the PRF
value of the leftmost leaf of the y1 subtree, C computes in
every next step the PRF value of the next leaf in the order-
ing discussed above. Speciﬁcally, C starts with state τ and
computes C(τ ) = (cid:104)G0(··· (G0(y1))), (1, τ )(cid:105), where the G0
composition is performed d1 times. Then, generally, given
the pair (yt, dt) in τ , where t is such that Pt−1