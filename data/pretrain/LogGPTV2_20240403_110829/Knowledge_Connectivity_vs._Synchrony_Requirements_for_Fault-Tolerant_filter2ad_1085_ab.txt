Connectivity Abstraction
With the notable exception of [1, 2], literature on con-
sensus related problems considers that Π is known to every
process in the system. In ad hoc and sensor wireless net-
works, this assumption is clearly unrealistic since processes
could be maintained by different administrative authorities,
have various wake up times, initializations, failure rates, etc.
Of course, some knowledge about other nodes is necessary
to run any non trivial distributed algorithm. For example,
the use of “Hello” messages (i.e. locally broadcasting your
identiﬁer to your vicinity) could be a possible way for each
process to get some knowledge about the other processes.
The notion of participant detectors (denoted by PD) has
been proposed by [1]. Similarly to failure detectors, they
can be seen as distributed oracles that provide information
about which processes participate to the system. We de-
note by i.PD the participant detector of process pi. When
queried by pi, i.PD returns a subset of processes in Π. The
information provided by i.PD can evolve between queries.
Let i.PD(t) be the query of process pi at time t. This query
must satisfy the two following properties:
• Information Inclusion. The information returned by
the participant detector is non-decreasing over time. pi ∈
Π, t0 ≥ t : i.PD(t) ∈ i.PD(t0)
Authorized licensed use limited to: Tsinghua University. Downloaded on March 20,2021 at 12:49:19 UTC from IEEE Xplore.  Restrictions apply. 
37th Annual IEEE/IFIP International Conference on Dependable Systems and Networks (DSN'07)0-7695-2855-4/07 $20.00  © 2007• Information Accuracy. The participant detector does
not make mistakes. ∀pi ∈ Π,∀t : i.PD(t) ∈ Π
The PD abstraction enriches the system with a knowl-
edge connectivity graph. This graph is directed since
knowledge that is given by participation detectors is not
necessarily bidirectional (i.e. if pj ∈ i.PD, then pi ∈ j.PD
does not necessarily hold).
Deﬁnition 1 (Knowledge Connectivity Graph) Let
Gdi(V, E) be the directed graph representing the knowl-
edge relation determined by the PD oracle. Then, V = Π
and (pi, pj) ∈ E if and only if pj ∈ i.PD , i.e., pi knows pj.
Deﬁnition 2 (Undirected Knowledge Connectivity Graph)
Let G(V, E) be the undirected graph representing the
knowledge relation determined by the PD oracle. Then,
V = Π and (pi, pj) ∈ E if and only if pj ∈ i.PD or pi ∈
j.PD .
Based on the induced knowledge connectivity graph, sev-
eral classes of participant detectors were proposed in [1]:
Connectivity PD (CO). The undirected knowledge con-
nectivity graph G induced by the PD oracle is connected.
Strong Connectivity PD (SCO). The knowledge con-
nectivity graph Gdi induced by the PD oracle is strongly
connected.
One Sink Reducibility PD (OSR). The knowledge
connectivity graph Gdi induced by the PD oracle satisﬁes
the following conditions:
1. the undirected knowledge connectivity graph G ob-
tained from Gdi is connected;
2. the directed acyclic graph obtained by reducing Gdi to
its strongly connected components has exactly one sink.
In this paper, we introduce three new participant detector
classes:
k-Connectivity PD (k-CO). The undirected knowl-
edge connectivity graph G induced by the PD oracle is k-
connected.
k-Strong Connectivity PD (k-SCO). The knowledge
connectivity graph Gdi induced by the PD oracle is k-
strongly connected.
k-One Sink Reducibility PD (k-OSR). The knowledge
connectivity graph Gdi induced by the PD oracle satisﬁes
the following conditions:
1. the undirected knowledge connectivity graph G ob-
tained from Gdi is connected;
2. the directed acyclic graph obtained by reducing Gdi to
its k-strongly connected components has exactly one sink;
3. consider any two k-strongly connected components
G1 and G2, if there is a path from G1 to G2, then there are
k node-disjoint paths from G1 to G2.
Figure 1 illustrates a graph Gdi induced by a k-OSR PD,
for k = 2. Note that there is only one sink component (G3)
and that every component Gi is 2-strongly connected.
Figure 1. Knowledge Connectivity Graph Induced for a
k-OSR Participant Detector, k = 2
4 Knowledge Connectivity and Synchrony
Requirements to Solve FT-CUP
In [1], the CUP problem is investigated in fault free net-
works, and it is shown that (i) the CO participant detector
is necessary to solve CUP, (ii) the SCO participant detec-
tor is sufﬁcient to solve CUP, and (iii) the OSR participant
detector is both necessary and sufﬁcient to solve CUP. Sub-
sequently [2], the authors show that the same classes are not
sufﬁcient to solve FT-CUP.
In this section, we investigate the k-CO, k-SCO and
k-OSR participant detectors with respect to the FT-CUP
problem, assuming the lowest possible synchrony (i.e. the
Ω failure detector) necessary to solve consensus in known
networks. In a nutshell, we show that provided the actual
number of faults f is strictly lower than some constant k
(f  0, pi contacts all nodes it did
not know about in round r − 1 so that they increase pi’s
knowledge about the network. At round 0, pi only knows
about itself. In our scheme, we assume that for each pro-
cess pi, the participant detector i.PD of pi is queried exactly
once. This can be implemented for example by caching the
value of the ﬁrst result of i.PD and returning that value in
the subsequent calls. This property guaranties that the par-
tial snapshot about the initial knowledge connectivity of the
system is consistent for all nodes in the system, and deﬁnes
a common knowledge connectivity graph Gdi = (V, E).
Whenever PD ∈ k-SCO, COLLECT terminates and
returns Π. Otherwise, whenever PD ∈ k-OSR,
the
algorithm provides pi all reachable nodes from its k-
strongly-connected components plus reachable nodes from
other components (which includes at least all nodes in the
sink component). On the example of Figure 1, COLLECT
will return for pi ∈ G1, a subset of pj ∈ {G1 ∪ G2 ∪ G3};
for pi ∈ G2, a subset of pj ∈ {G2 ∪ G3}; for pi ∈ G3, a
subset of pj ∈ {G3}.
Variables. A node pi manages the following local vari-
ables:
• i.known: subset of nodes known by pi in the current
• i.responded:
subset of nodes from which pi has
received a message;
• i.previously known : previous set of nodes known by
• i.wait: number of nodes from which pi is still waiting
pi in the previous round;
round;
for a message.
Description. A process pi starts the algorithm by execut-
ing the INIT phase. In this initial stage, pi queries its par-
ticipant detector (line 13) and sets i.known to the returned
list of participants (i.PD). After that, it calls upon the In-
quiry() procedure to transmit this partial knowledge about
the system composition to every node recently discovered.
Thus, pi sends a VIEW(i, i.known) message to every known
process pj (lines 9-10) and updates some local variables.
In particular, it sets i.wait to the minimal number of cor-
rect nodes, i.e., the cardinality of its i.known set minus the
maximal number of crashes (f) (line 11). In the IMPROVE-
MENT phase, upon receipt of a message VIEW(m.initiator,
m.known) from pj to pi, two cases are presented.
• m.initiator 6= i: this means that pi have received an
inquiry from a remote node pj. Thus, pi sends back to pj
its original list of participants (i.PD) (line 28).
• m.initiator = i: in this case, pi received back a mes-
sage carrying pj’s initial knowledge connectivity. Thus,
pi improves its initial knowledge, extending i.known with
j.PD and it updates its local variables i.responded and
i.wait accordingly (lines 18-20). Afterwards, by testing the
predicate (i.wait = 0), pi veriﬁes whether it has received
sufﬁciently many messages from all known correct nodes
(line 21). If that is the case, pi checks whether its current
view has changed with respect to the previous one. Two
situations can occur:
• If i.previously known = i.known, this means that pi
has gathered knowledge information from all known correct
nodes. In this case, the algorithm terminates and pi returns
its i.known set (line 23).
• If i.previously known 6= i.known, this means that pi
has discovered new nodes. So, it will start a new round to
improve knowledge information about the new nodes be-
longing to i.known \ i.previously known. So, pi calls the
Inquiry() procedure to send a message VIEW(i, i.known)
to every new node recently discovered. After that, pi up-
dates i.wait accordingly, excluding those having already re-
sponded and crashed. Finally, i.previously known receives
the contents of the most recent i.known set (lines 9-12).
Lemma 1 Starting by round r = 1, in each round r of al-
gorithm COLLECT, i.known is augmented with reachable
nodes whose distance from pi is r.
Proof: To discover the set of reachable processes, the
algorithm COLLECT realizes a sort of breadth-ﬁrst search
in the graph Gdi. Let the initiator pi, be the root of the tree
established by this search. The rounds correspond to the
levels of the tree. If pj is ﬁrst discovered by pi in round
r, then d(pi, pj) = r. This means that pj is reached by
the breadth-ﬁrst search in level r. Denote N(r)(pi) the set
of all nodes reached by the breadth-ﬁrst search until level
r. Let i.known be the set of known nodes in round r. So,
i.known = N(r)(pi). Let us proceed the proof by induction
on r. Basis: In round r = 1 (level 1 of the tree), pi attributes
Authorized licensed use limited to: Tsinghua University. Downloaded on March 20,2021 at 12:49:19 UTC from IEEE Xplore.  Restrictions apply. 
37th Annual IEEE/IFIP International Conference on Dependable Systems and Networks (DSN'07)0-7695-2855-4/07 $20.00  © 2007f: int // upper bound on the number of crashes
i.previously known : set of nodes
i.known: set of nodes
i.responded: set of nodes
i.wait: int
Algorithm 1 COLLECT()
constant:
(1)
variables:
(2)
(3)
(4)
(5)
message:
(6)
(7)
(8)
procedure:
Inquiry():
(9)
(10)
(11)
(12)
VIEW message:
initiator: node
known: set of nodes
for j in i.known \ i.previously known do
SEND VIEW (i, i.known) to pj; end do
i.wait = |i.known \ i.responded| − f;
i.previously known = i.known;
** Initiator Only **
INIT:
(13)
(14)
(15)
i.known = i.PD;
i.responded = i.previously known = {};
call upon Inquiry ();
if i == m.initiator then
i.known = i.known ∪ m.known;
i.responded = i.responded ∪ {j};
i.wait = i.wait − 1;
if i.wait == 0 then
** All Nodes **
IMPROVEMENT:
(16) upon receipt of VIEW(m.initiator , m.known) from
pj to pi:
(17)
(18)
(19)
(20)
(21)
(22)
(23)
(24)