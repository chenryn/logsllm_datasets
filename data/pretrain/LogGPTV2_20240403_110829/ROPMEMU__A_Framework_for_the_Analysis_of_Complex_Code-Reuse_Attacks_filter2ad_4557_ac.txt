chain.
4.2 Emulation
The emulation phase is the core of our analysis frame-
work. Its role is to “follow” the execution of each gadget to
keep an updated position of the stack pointer and of the
content of the memory.
A Turing complete ROP chain can be obtained by re-
using a limited number of gadgets [51]. Therefore, also
very complex ROP programs often include a very small
number of unique assembly instructions. For this reason,
we were able to implement a small custom emulator that
supports the required x86-32 and x86-64 instructions and
updates the state of the CPU (registers and ﬂags) and of
the memory after each instruction. In order to supporting
the entire instruction set, we are now adapting our plat-
form to use the recently released Unicorn [41] emulator.
Unicorn provides the ideal solution for this task, by ex-
posing Qemu’s CPU emulator component and by proving
a set of ﬂexible bindings.
For a still more comprehensive approach, S2E [15] can be
used to provide a full system emulation on top of Qemu [8].
However, this would considerably complicate the setup and
deployment required by the system. Therefore, for our
prototype we opted for a custom solution that gave us
more ﬂexibility and a smaller footprint.
At the beginning of the emulation phase, the initial state
of the virtual CPU is set to zero by resetting the content
of all registers except for the instruction pointer and the
stack pointer (whose initial values need to be provided as
input for our analysis). The emulator is then implemented
Figure 1: ROPMEMU Framework Architecture
as a Volatility [4] plugin to simplify the interaction with
the memory dump by leveraging the Volatility APIs.
Execution Modes – At the end of the emulation a JSON
trace is generated containing the CPU state for each as-
sembly instruction. Depending on the complexity of the
ROP chain, the size and the time required to generated
this trace can be considerable.
full, incremental and replay.
For these reasons, we designed our emulator to support
three execution modes:
In
full emulation mode, the emulator executes the chain from
scratch, starting from the provided entry point. The re-
play mode is completely based on an existing JSON trace
and therefore it does not require any memory dump. This
makes the rest of the analysis repeatable, and allows re-
searchers to share traces without the need to transfer the
content of the system memory (which may contain sensi-
tive information and may be diﬃcult to share for privacy
reasons). Finally, the incremental mode is a combination
of the previous two:
it uses an input JSON trace (pre-
viously generated during a full emulation) and, once the
last gadget in the trace is reached, it switches to full mode.
This mode makes incremental analysis possible – a consid-
erable advantage when dealing with very complex ROP
chains.
Shadow Memory – The emulator initially reads the con-
tent of the memory from the memory dump. However, all
write operations are redirected to a shadow memory area
kept internally by the emulator. Subsequent read opera-
tions fetch data from the shadow memory (if the address
has been previously written) or from the original memory
image otherwise.
Chain Boundary – Although the analyst knows the start-
ing address of the ﬁrst ROP chain, it is unclear where it
ends. This problem is very important because we do not
want to keep emulating instructions beyond the end of a
chain, thus polluting the analysis with unrelated code.
Our framework solves the problem by using a number
of heuristics. To start with, the emulator detects large
increments or decrements of the stack pointer. Typically,
during the execution of a single ROP chain, these deltas
are small. Based on this locality principle, it is possible to
ﬁnd the exact moment in which the chain under analysis is
terminated. This simple rule needed to be reﬁned to take
into account long jumps that may occur inside a single,
very long chain (see, for instance, the case described in
Section 5). By including heuristics based on the length of
a gadget, and excluding the detected function invocations,
our prototype was able to correctly stop the emulation
process at the last gadget in all our experiments. In case
our heuristics fail, the analyst only needs to restart the
emulator in incremental mode to continue the analysis of
the chain from the point in which it was suspended.
Once the termination condition is triggered, the emula-
tor stops and both the content of the shadow memory and
the execution trace are saved to disk and are inspected
to detect the presence of new ROP chains. If new stages
are found, the emulator is re-started to analyze the next
chain, and the process is repeated multiple times until all
dynamically generated chains have been discovered and
analyzed.
Syscalls and APIs – Complex ROP chains can invoke
several system calls and library APIs, whose emulation is
very complex (impossible in many cases) and goes beyond
the scope of this paper. Our emulator recognizes when
the execution is transferred to a system or API function,
it saves its name in the trace, and then steps over its body
to resume the emulation from the next gadget in the ROP
chain.
This approach requires two types of information. First,
the emulator needs to know the location and name of each
API functions and system call routines. Luckily, this in-
formation can be easily retrieved by Volatility. Second,
the emulator needs to know a valid output for each func-
tion. For instance, if the ROP chain allocates memory by
calling kmalloc, the emulator needs to assign a valid (and
not used) memory address to the function return value.
Section 5 explains how we handled, on a case-by-case ba-
sis, more complex examples that require complex buﬀers
or data structures.
Multi-Path Exploration – In the presence of long ROP
chains with a complex control ﬂow, a simple approach
based on emulation is not enough to retrieve the entire
ROP payload. The coverage is limited and takes into ac-
count only the executed branches – which often depend on
the dummy return values generated by the emulator when
the chain invokes system functions. This point is crucial
for the analysis, as researchers need the entire chain to un-
derstand all the features and components of the ROP code.
A simple emulation approach would likely miss important
parts and thus some core functionalities of the malicious
code may remain hidden.
We address this problem by introducing a multi-path
emulation. Although this approach has its roots in the
well-known multi-path execution work proposed by Moser
et al. [38], the original algorithm has been adapted to deal
with ROP gadgets. In particular, our emulator is designed
to recognize when the stack pointer is conditionally mod-
iﬁed based on the content of the ﬂag register. This pat-
tern, however it is implemented, corresponds to a branch
in the ROP chain. At the end of the emulation process,
the JSON trace is analyzed to list all the branch points
together with the value of the ﬂags that was used in each
of them by the emulator. The emulator is then re-started,
this time providing an additional command-line parame-
ter that speciﬁes to complement the ﬂag register at the
required branch point, so that the execution can follow a
diﬀerent path. The exploration is terminated when all the
branches have been explored. At the end, the analyst ob-
tains several JSON traces containing diﬀerent parts of the
control ﬂow graph.
However, in presence of loops in the ROP chain, the em-
ulator could get trapped inside an endless execution path.
The solution in this case is to keep track of the number
of occurrences of the stack pointer during the execution
of branch-related instructions. If this number is above a
certain threshold (set to 10 in our experiments) the emu-
lator automatically ﬂips the ﬂag bits to force the loop to
end and explore the rest of the control ﬂow graph. Similar
heuristics are commonly applied to explore the behavior
of malicious binaries.
4.3 Chain Splitting
The multi-path emulator generates a separate JSON
trace ﬁle for each path in the ROP chain. The next step
of our approach is in charge of splitting those traces, and
removing duplicates parts that are in common between dif-
ferent traces. This part is divided in two steps. In the ﬁrst,
every trace is cut at each branch point, and a new block
is generated and saved in a separate JSON trace. During
this operation the framework also records additional in-
formation describing the relationships among the diﬀerent
blocks.
Since conditional branch instructions are based on the
value of the ﬂag register, our system uses tests on the
ﬂags content or pushf operations as indicators of a branch
point.
In particular, Chuck always pushes the ﬂags on
the stack to later retrieve them and isolate the ZF ﬂag,
whose values indicates which side of the branch needs to be
taken. In the second pass, the chain splitter compares the
individual blocks to detect overlapping footer instructions
(i.e., gadgets in common at the end of diﬀerent blocks) and
isolate them in separate ﬁles.
The output of this phase is again a set of JSON trace
ﬁle, this time not anymore associated to each individual
path, but instead associated to each “basic block” in the
chain. The chain splitter is implemented as a standalone
Python script.
4.4 Unchaining Phase
This phase transforms each JSON ﬁle into a sequence
of instructions in the target architecture. This is obtained
by applying a number of simple transformations. First,
all the ret, call, and unconditional jmp instructions are
removed from the trace. Then, mov instructions are sim-
pliﬁed by computing their operands. In fact, due to the
fact that immediate values are stored on the stack, ROP
chains often contain expressions involving several regis-
ters (e.g., mov rax, [rsp+0x30]) that at this stage are
replaced with their actual value. Similarly, we transform
pop into mov instructions, by fetching the required values
from the corresponding location on the stack.
4.5 Control Flow Recovery
The input of the control ﬂow recovery is the set of x86
binary blobs generated by the unchaining phase, plus some
additional information specifying the way these blocks were
connected in the traces generated by the emulator. The
goal of this phase is to replace all the code that belongs to
the gadgets used to implement ROP branches with more
traditional and more compact conditional jumps.
This step is not trivial because it is necessary to switch
from the stack pointer domain to the instruction pointer
one. At every branch point, we need to recreate from
scratch the instruction pointer logic required to properly
connect the two targets of a branch condition. In our case
study, a simple conditional jump is implemented by 19
gadgets and 41 instructions. Our framework is able to rec-
ognize the condition and generate an equivalent assembly
code in the instruction pointer domain. The 19 gadgets
are translated into two assembly instructions: a condi-
tional jump (in our case represented by either jz or jnz)
and an unconditional jump (jmp).
The second task of the CFG recovery component is to
detect and re-roll loops. ROP chains can contain both
return oriented loops and unrolled loops that are program-
matically generated when the chain is constructed. In the
ﬁrst case, the ROP instructions are used to conditionally
repeat the same block of stack pointers, the same way a
normal loop repeats the same sequence of EIP values. Un-
rolled loops repeat instead the same hard-coded sequence
of gadgets over and over (typically as a result of a for
loop in the C code that generated the ROP code), for a
pre-determined number of times.
For instance, Chuck uses unrolled loops to copy the dy-
namically generated chains to their ﬁnal memory location.
In fact, in the original source code of the rootkit (writ-
ten in C), this is implemented as a short FOR loop that
generates the appropriate gadgets. In the rootkit itself, it
becomes a long sequence containing ﬁve gadgets repeated
thousands of times. A simpliﬁed version of the gadgets is
presented in Figure 2.
The value of the rdx register is taken from the stack, and
then copied to a memory location pointed by the register
rax. Finally rax is incremented by eight (the value of rdi
taken from the stack).
Our tool is able to automatically identify these recurrent
patterns and replace the entire sequence of instructions
with a more compact snippet of assembly code represent-
ing a real loop with the same semantics. The resulting code
pop rdx
mov [rax], rdx
pop rdi
add rdi, rax
mov rax, rdi
pop rdx
mov [rax], rdx
pop rdi
add rdi, rax
mov rax, rdi
...
Figure 2: Unrolled loop in the dispatcher Chain
is then wrapped withing a valid function prologue and epi-
logue and then embedded in a self-contained ELF ﬁle. It
is important to note that it is not guaranteed that the ﬁle
can actually be executed. If the original chain was part
of a userspace shellcode, the ELF would probably contain
all the instructions required to run the code. However, if
the ROP chain is part of a kernel rootkit (as it is in our
example), its code was initially designed to run in a very
speciﬁc context in the kernel memory and therefore cannot
be executed in a user-space program. However, our goal
is just to generate a ﬁle that can be opened and analyzed
by traditional reverse engineering tools such as IDA Pro.
4.6 Binary Optimization
The ﬁnal step of our analysis consists of applying stan-
dard compiler transformations to optimize and simplify
the generated code. For examples, dead code removal,
simpliﬁcations of redundant mathematical operations, and
global value numbering can greatly simplify the binary
and makes it easier to understand for an analyst. How-
ever, these transformations have already been discussed in
previous works [36, 60] and they are not the focus of our
paper.
5. EVALUATION
In this section we describe the experiments we conducted