KCon
KCon
Webkit Vulnerability form 0 to 1
Lockmanxxx
•Work for 兴华永恒
•软件漏洞利用研究
•软件漏洞成因分析
•偶尔漏洞挖掘
@weibo:Lockmanxxx
@twitter:lockmanxxx
who
高效的挖掘？！？
From 0 to 1
目录
CONTENTS
PART 01
浏览器漏洞挖掘难点
PART 02
Why WebKit？
PART 03
挖掘思路
PART 04
挑战
PART 05
漏洞挖掘平台
PART 06
展示
PART 07
To Do Soon
01 浏览器漏洞挖掘难点
https://www.flexerasoftware.com/enterprise/resources/research/vulnerability-review/
• Webkit
– Blink(chrome)、Apple Safari
• Gecko
– Fireforx
• Trident
– Internet Explorer
• JavaScript Engine也开始出现分化。
Browsers
02 Why Webkit?
特点
• 开源
• “Chrome”,safari, Ucbrowser, QQ Browser……
• 多平台支持，Android+windows+linux
• WebKitGTK
oMiniborwser
oWebKitWebProcess
oWebKitNetworkProcess
oJSC
WebKitGtk
Webkitgtk
Webkit引擎
WebCore
JavaScriptCore(jsc)
挖掘思路
03
+ (E=mc2) =>
首先
其次
• 代码分析（不深入）
– “铀”
• 根据分析搜集的数据，定制fuzz输入
– “E=mc2”
• 随机规则
• 挖掘平台
• 根据代码覆盖率，不断完善。
详细
挑战J
04
网页模型
挖掘对象
WebKit parser
• Html
-解释型
-DOM树
• JavaScript
-脚本语言
-词法-语法-语义-字节码-编译-优化-汇编
HTML parser
Code Flow
WebKitWebView
WebCore::Page
WebCore::DocumentLoader
WebCore::MainFrame
WebCore::FrameLoader
WebCore::HTMLDocument
WebCore::DOMWindow
WebCore::HTMLDocumentParser
WebCore::HTMLScriptRunner
page
Main 
Frame
Sub 
Frame
HTML parser
• HTMLàHTMLToken (标签提取)
– https://html.spec.whatwg.org/
– 根据标签的开闭合字符逐个提取Token
HTMLDocumentParser::pumpTokenizerLoop
HTMLTokenizer::processToken
– 类似字符串整理，表现形式为vector对象链表。
HTML parser
• processToken
HTML parser
• HTMLTokenàDOMTree
– 根据前面提取信息进行逐个解析
HTMLTreeBuilder::processToken
• HTMLTokenàDOM Node
WebCore::HTMLConstructionSite
评估
• HTML parser
– 过程单一
– 解释性操作
– 对HTML来说重要的仅仅就是标签的开、闭合。
HTML Parser L
JavaScript Parser
• JavaScript
– ./source/JavaScriptCore/parser
– JavaScript parser入口
JavaScript Parser
• 工作流
Parser.cpp
解析代码
ASTBuilder.h
makeMultNode
makeDivNode
…
Node.h
…
TreeBuilder->vector(AST tree)
VM,SourceCode…
JavaScript Parser
• 解析流程
词语提取
词语检查(lexer)
词法解析(parser)
词法检测(Syntax)
SourceElement
ASTTree Stack
同时进行，也是
最复杂的地方
Parser Class
JavaScript Parser
• 对象地图
ASTBuilder
Parser
Nodes.h
Node
ExpressionNode
ArrayNode
VoidNode
NewExprNod
e
……
StatementNode
ForNode
IfElseNode
……
JavaScript Parser
• 数据来源
代码source.provider()返回Class SourceProvider对象。
而source.provider()->source()继续返回一个StringView对象。
• 数据来源
JavaScript Parser
StringView是webkit封装的一个字符串类，其构造函数：
此时能看到标签中所输入的代码：
JavaScript Parser
前面的SourceCode对象首先和Parser::m_lexer建立联系，通过：
如果原始网页js代码为下面的例子：
按JS Parser解析逻辑会逐字拆分：
• Js Parser解析详情
m_lexer->setCode(source, &m_parserArena);
\n
[
]
;
\n
Next()
JavaScript Parser
• Js Parser解析详情
Next函数让JS Parser知道了下一步处理的位置和代码等信息：
JavaScript Parser
• Js Parser解析详情
每个字符的属性(type)定义：
• Js Parser解析详情
JavaScript Parser
lex函数最终把每个词语提取成JSTokenType：
JavaScript Parser
• Js Parser解析详情
最终的JSTokenType就是parser逻辑主体所处理的内容：
对于JS代码“[];”来讲，在预处理代码为JSTokenType后，其最主体的处理函数
parseArrayLiteral ：
JavaScript Parser
• Js Parser解析详情
评估
• Javascript Parser
ü 逻辑较复杂。
ü 对象关系复杂。
ü 可编程语言JavaScript，可变因素很多。
ü 初步分析，已经能直观建立用户输入与代码逻辑的联系。
JavaScript Parser J
Js Parser
Parser.cpp
eg: parseArrayLiteral函数逻辑的全代码覆盖：
while (match(COMMA)) {
……
if (match(CLOSEBRACKET)) {
……
if (UNLIKELY(match(DOTDOTDOT))) {
…….
while (match(COMMA)) {
评估
评估
[]
[…]
[,1,,1,,]
[,,,,]
[1,1,1]
数据
漏洞挖掘平台
05
数据输入
+ (E=mc2) 
其他搜集的数据
数据输入
• 以JS parser模块为例
– {0, void :*++=++%a14074,17957, void swv>>
–
https://bugs.webkit.org/show_bugs?id=147538
• 其他类型数据
挖掘平台
• AFL is Everything! But ……
• 样本的恢复，提取（代码性质样本）
• Js代码的随机规则
• 编译感知
• 覆盖率工具，反馈
挖掘平台
+ (E=mc2) 
展示
06
崩溃
1
2
结果
2 weeks 
10+Crashes
3 moudles
数据+测试+修改
Parser+Runtime+API
Some are interesting
To Do Soon
07
更多的自动化
无源码项目？
计划
Thank you!
Question？
Thank you!
Thank you!