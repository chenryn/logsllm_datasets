# KCon 2023
## WebKit Vulnerability from 0 to 1
### Speaker: Lockmanxxx
- **Affiliation:** 兴华永恒
- **Research Interests:**
  - Software vulnerability exploitation
  - Analysis of software vulnerability causes
  - Occasional vulnerability discovery
- **Social Media:**
  - Weibo: @Lockmanxxx
  - Twitter: @lockmanxxx

## Table of Contents
1. Introduction
2. Browser Vulnerability Challenges
3. Why WebKit?
4. Exploitation Strategies
5. Challenges
6. Vulnerability Mining Platform
7. Demonstration
8. Future Work
9. Q&A
10. Conclusion

---

## 1. Introduction
This presentation aims to provide an in-depth look into the process of discovering and exploiting vulnerabilities in the WebKit browser engine, from the initial stages of research to the final stages of exploitation.

## 2. Browser Vulnerability Challenges
According to the Flexera Software Vulnerability Review:
- **WebKit:**
  - Used by Chrome, Safari, UC Browser, QQ Browser, etc.
- **Gecko:**
  - Used by Firefox
- **Trident:**
  - Used by Internet Explorer
- **JavaScript Engines:**
  - Differentiation is also occurring in JavaScript engines.

### Browsers
- **WebKit:**
  - Open-source
  - Supports multiple platforms (Android, Windows, Linux)
  - Components include:
    - MiniBrowser
    - WebKitWebProcess
    - WebKitNetworkProcess
    - JSC (JavaScriptCore)

## 3. Why WebKit?
### Key Features
- **Open-source:**
  - Transparent and accessible codebase
- **Wide Adoption:**
  - Used by major browsers like Chrome and Safari
- **Cross-platform:**
  - Available on Android, Windows, and Linux
- **WebKitGTK:**
  - Provides a robust framework for web applications

## 4. Exploitation Strategies
### Step-by-Step Approach
1. **Code Analysis:**
   - Initial analysis to identify potential vulnerabilities
   - Focus on critical components like "uranium" (metaphorically speaking)
2. **Fuzzing Input Customization:**
   - Based on the data gathered from the analysis, create customized fuzzing inputs
   - Use random rules and a dedicated mining platform
   - Continuously refine the approach based on code coverage

## 5. Challenges
### Web Page Model
- **Parsing Objects:**
  - **HTML Parser:**
    - Interprets HTML and constructs the DOM tree
  - **JavaScript Parser:**
    - Handles JavaScript, including lexical, syntactic, and semantic analysis

### Code Flow
- **WebKitWebView:**
  - **Page:**
    - **DocumentLoader:**
      - **MainFrame:**
        - **FrameLoader:**
          - **HTMLDocument:**
            - **DOMWindow:**
              - **HTMLDocumentParser:**
                - **HTMLScriptRunner:**

### HTML Parsing
- **HTML to HTMLToken:**
  - Extracts tokens based on tag start and end characters
  - Uses `HTMLTokenizer::processToken` to handle each token
- **HTMLToken to DOM Tree:**
  - Constructs the DOM tree using `HTMLTreeBuilder::processToken`

### JavaScript Parsing
- **Parser Workflow:**
  - **Lexer:**
    - Tokenizes the input
  - **Parser:**
    - Builds the Abstract Syntax Tree (AST)
  - **Syntax Checker:**
    - Validates the AST
- **Data Source:**
  - `SourceProvider` returns a `StringView` object
  - `StringView` is a custom string class in WebKit
- **Parser Logic:**
  - Uses `m_lexer->setCode(source, &m_parserArena)` to set up the lexer
  - `Next()` function advances the parsing process
  - `lex` function extracts tokens as `JSTokenType`
  - `parseArrayLiteral` handles array literals

## 6. Vulnerability Mining Platform
### Data Input
- **Custom Fuzzing Inputs:**
  - Example: `{0, void :*++=++%a14074,17957, void swv>>`
  - Reference: [WebKit Bug Report](https://bugs.webkit.org/show_bugs?id=147538)
- **Other Data Types:**
  - Randomly generated JavaScript code

### Platform Features
- **AFL (American Fuzzy Lop):**
  - Main fuzzing tool
- **Sample Recovery:**
  - Extract and analyze code samples
- **Random Rules:**
  - Generate random JavaScript code
- **Compilation Awareness:**
  - Ensure code compiles correctly
- **Coverage Tools:**
  - Provide feedback on code coverage

## 7. Demonstration
### Results
- **Crashes:**
  - 10+ crashes discovered over 2 weeks
  - Affected modules: Parser, Runtime, API
- **Interesting Findings:**
  - Some crashes revealed interesting vulnerabilities

## 8. Future Work
- **More Automation:**
  - Automate more of the fuzzing and analysis process
- **Non-Open-Source Projects:**
  - Explore ways to apply these techniques to closed-source projects

## 9. Q&A
- **Questions?**

## 10. Conclusion
Thank you for your attention! If you have any questions, feel free to reach out.

**Contact:**
- Weibo: @Lockmanxxx
- Twitter: @lockmanxxx

**Thank you!**