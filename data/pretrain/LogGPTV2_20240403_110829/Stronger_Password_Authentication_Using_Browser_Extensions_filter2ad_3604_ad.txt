### Password Handling and Security

- **Password Storage**: A password, which is a mixture of hashed and unhashed characters, will be incorrect if it is stored in this format. We ensure that a password field containing a hashed password is automatically cleared when the user revisits it.

### 6.3 Limitations

Our current implementations of PwdHash have the following limitations:

- **Other Applications**: Under Windows, the layout engine implemented in `MSHTML.DLL` is used in various applications other than Internet Explorer (IE) browser, such as Outlook, AOL, and AOL Instant Messenger. Some of these applications do not support Browser Helper Objects, making it impossible to implement PwdHash in all applications that render HTML. To fully implement PwdHash, the extension would need to be more closely integrated with the rendering engine.

- **Spyware and Keyloggers**: PwdHash is designed to defend against scripts on remote websites but does not protect user passwords from spyware, keyloggers, or other software installed on the local machine. Additionally, PwdHash cannot defend against phishing attacks that involve modifying the user's hosts file, causing the DNS resolver to incorrectly resolve domain names like eBay. If hackers have sufficient access to install software or modify the hosts file, they could also disable PwdHash.

- **DNS Attacks**: PwdHash relies on DNS to resolve domain names to the correct IP addresses. If a phisher can manipulate DNS to resolve a domain name to their IP address, they could obtain the user's password. However, such large-scale attacks are usually easy to detect. PwdHash also does not defend against phishing attacks that use HTTP response splitting or web cache poisoning.

- **Flash Compatibility**: While Internet Explorer allows Browser Helper Objects to install keyboard hooks, Mozilla Firefox extensions do not have this capability. Typically, this is not an issue because Firefox extensions can still capture keystrokes before they are seen by page scripts. However, if a Flash object is selected, certain versions of Firefox on specific operating systems allow Flash to handle keystrokes without giving the extension a chance to intercept them. This means a spoofed password field in Flash could allow an attacker to read the user's cleartext password. We expect this problem to be resolved in the future through better interfaces between the operating system, browser, and external plugins.

- **Focus Stealing**: A JavaScript attack can switch a password field with an unprotected field while the user is typing, using the `focus()` method to give the new field focus. This causes the user to lose the extension's keystroke protection. The traffic light indicator (described in Section 3.3.3) will turn red if this attack occurs, but it may be too late for the user to notice. One possible defense is to introduce a password "suffix" indicating the end of a secure password. A comprehensive focus management scheme for secure password entry remains an open problem.

### 7. User Studies

We conducted five professional user studies to determine whether we had succeeded in boosting password security without compromising usability. Participants were asked to sign up for various accounts and log in, both with and without the PwdHash extension installed. The Firefox version of the plugin was used.

- **User Experience**: Participants did not experience major difficulties signing up for new accounts and logging in using the password prefix. When presented with a fake eBay site at a numeric IP address, most participants tried to log in, but the password prefix prevented the phishing page from reading their eBay passwords. The user interface was so subtle that many participants did not notice the extension's actions. They only noticed the password length change, which they found confusing. Future versions will eliminate this length change.

- **Cross-Browser Issues**: Users encountered difficulties when logging in using a different browser without PwdHash. Copying site addresses into the remote hashing page was annoying, and incorrect entries (e.g., using `gmail.com` instead of `google.com`) led to confusion. We plan to improve documentation and the remote hashing page to make them more user-friendly. If PwdHash becomes widely installed, the need for the remote hashing site would be eliminated.

### 8. Related Work

- **Password Hashing**: Web password hashing is often implemented incorrectly by allowing the remote site to choose the salt. For example, HTTP 1.1 Digest Authentication defines password hashing with parameters specified by the remote site, making it vulnerable to online attacks. Proper web password hashing systems include the Lucent Personal Web Assistant (LPWA) and a system from DEC SRC by Abadi et al. LPWA was implemented as a web proxy, but modern SSL-encrypted pages require a browser extension like PwdHash.

- **Alternative Solutions**: The Password Maker extension for Firefox is functionally similar to PwdHash but has a more prominent user interface. It requires users to push a toolbar button or select an option from the context menu, which may be suitable for users who accept the risks of storing passwords in the browser. The Password Composer extension modifies password fields on the current page, but it is vulnerable to malicious scripts reading pre-hashed passwords.

- **Complementary Solutions**: PwdHash can be used alongside other anti-phishing solutions like SpoofGuard, which alerts users to suspected phishing sites. The Passmark web personalization method and ultra-slow hash functions can also complement PwdHash.

### 9. Conclusions

We presented PwdHash, a browser extension designed to improve password authentication on the web with minimal changes to the user experience and no changes to existing server configurations. Our solution enables users to securely type their passwords inside the browser window. Preliminary user studies indicate that the basic functionality is not difficult to use. We hope our approach will be useful in other distributed systems that want to use password hashing to strengthen user authentication. The extension and source code are available for download at [PwdHash website](http://crypto.stanford.edu/PwdHash).

### Acknowledgments

We thank Aaron Emigh, Darin Fisher, Burt Kaliski, Donal Mountain, Cem Paya, Eric Rescorla, Jim Roskind, Brian Ryner, and Fritz Schneider for their helpful discussions about password phishing and this work.

### References

- [ABM97] M. Abadi, L. Bharat, and A. Marais. System and method for generating unique passwords. US Patent 6,141,760, 1997.
- [APW] Anti-phishing working group. http://www.antiphishing.org.
- [BM92] S. Bellovin and M. Merritt. Encrypted key exchange: password-based protocols secure against dictionary attacks. In Proceedings of IEEE Symposium on Research in Security and Privacy, 1992.
- [BPR00] M. Bellare, D. Pointcheva, and P. Rogaway. Authenticated key exchange secure against dictionary attacks. In Proceedings of Eurocrypt 2000, 2000.
- [CLTM04] N. Chou, R. Ledesma, Y. Teraguchi, and J. Mitchell. Client-side defense against web-based identity theft. In Proceedings of Network and Distributed Systems Security (NDSS), 2004.
- [DA99] T. Dierks and C. Allen. The TLS Protocol — Version 1.0. IETF RFC 2246, January 1999.
- [GGK+99] Eran Gabber, Phillip B. Gibbons, David M. Kristol, Yossi Matias, and Alain Mayer. On secure and pseudonymous client-relationships with multiple servers. ACM Transactions on Information and System Security, 2(4):390–415, 1999.
- [GGM86] O. Goldreich, S. Goldwasser, and S. Micali. How to construct random functions. J. ACM, 33(4):792–807, 1986.
- [GGMM97] E. Gaber, P. Gobbons, Y. Mattias, and A. Mayer. How to make personalized web browsing simple, secure, and anonymous. In Proceedings of Financial Crypto ’97, volume 1318 of LNCS. Springer-Verlag, 1997.
- [Hel97] M. Hellman. Authentication using random challenges. US Patent 5,872,917, 1997.
- [HWF05] J. A. Halderman, B. Waters, and E. Felten. A convenient method for securely managing passwords. To appear in Proceedings of the 14th International World Wide Web Conference (WWW 2005), 2005.
- [Jun] E. Jung. Passwordmaker. http://passwordmaker.mozdev.org.
- [lP] la Poutr´e. Password composer. http://www.xs4all.nl/˜jlpoutre/BoT/Javascript/PasswordComposer/.
- [Pas] Passmark. http://www.passmark.com.
- [PM99] N. Provos and D. Mazi`eres. A future-adaptable password scheme. In Proceedings of the 1999 USENIX Annual Technical Conference, Freenix Track, Monterey, CA, June 1999.
- [PSa] Password safe. http://passwordsafe.sourceforge.net/.
- [Wol] N. Wolff. Password generator bookmarklet. http://angel.net/˜nic/passwdlet.html.
- [Wu99] T. Wu. A real-world analysis of Kerberos password security. In Proceedings of Network and Distributed Systems Security (NDSS), 1999.
- [Zar] C. Zarate. Genpass. http://labs.zarate.org/passwd/.

---

This optimized text is clearer, more coherent, and maintains a professional tone.