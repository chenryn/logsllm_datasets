password — a mixture of hashed and unhashed char-
acters — will be incorrect. We ensure that a password
ﬁeld containing a hashed password is automatically
cleared when the user revisits it.
6.3 Limitations
Our implementations of PwdHash currently
have the following limitations:
For example,
• Other applications. Under Windows, the lay-
out engine implemented in MSHTML.DLL is
used in various applications other than the IE
browser.
it is used to render
HTML within Outlook, AOL and AOL Instant
Messenger. Some of these applications do not
support Browser Helper Objects, and hence we
cannot currently implement PwdHash in all ap-
plications that render HTML. To fully imple-
ment PwdHash the extension would have to be
more closely integrated with the engine.
• Spyware. As mentioned earlier, PwdHash is
designed to defend against scripts on remote
web sites.
It does not protect user passwords
from spyware, keyloggers, and other software
that is installed on the local machine. Pwd-
Hash would also not defend against some of the
recently reported phishing attacks that work by
adding text to the user’s hosts ﬁle (thus causing
the user’s DNS resolver to incorrectly resolve
the domain-name for sites like eBay). However,
if hackers have sufﬁcient access to install soft-
ware or modify the hosts ﬁle, they could just as
easily disable PwdHash altogether.
• DNS Attacks. More generally, PwdHash re-
lies on DNS to resolve the domain-name to the
correct IP address.
If a phisher were able to
fool DNS into resolving domain-name A to the
phisher’s IP address, then the phisher would ob-
tain the user’s password at site A. However,
attacks of this scale are usually easy to detect.
Similarly, PwdHash does not defend against
phishing attacks that use HTTP response split-
ting or more general web cache poisoning at-
tacks.
• Flash.
Although Internet Explorer allows
Browser Helper Objects to install keyboard
hooks, extensions for Mozilla Firefox do not
have this ability. Usually, it does not make a
difference, because Firefox extensions can still
capture keystrokes before they are seen by script
on the page. However, if an embedded Macro-
media Flash object is selected, versions of Fire-
fox running on certain operating systems al-
low Flash to handle the keystrokes without giv-
ing the extension a chance to intercept them.
Thus, a spoofed password ﬁeld in Flash would
allow an attacker to read the user’s cleartext
password. We hope and expect that this prob-
lem will be resolved in the future through bet-
ter interfaces between the operating system, the
browser, browser extensions, and external plug-
ins.
• Focus Stealing. An interesting JavaScript attack
on the extension is a password ﬁeld that switches
places with a different, unprotected ﬁeld while
the user is typing into it. The new ﬁeld is given
focus using a call to its focus() method, causing
the user to leave the original password ﬁeld and
lose the extension’s keystroke protection. The
trafﬁc light described in Section 3.3.3 will turn
red if this attack occurs, but it may be too late
before this change is noticed by the user. One
possible defense against this type of attack is to
introduce a password “sufﬁx” that indicates that
the user is ﬁnished typing a secure password. A
complete focus management scheme for secure
password entry remains an open problem.
28
14th USENIX Security Symposium
USENIX Association
7 User Studies
We conducted ﬁve professional user studies to
determine whether we had succeeded in boosting
password security without compromising usability.
In each, an individual without PwdHashknowledge
was asked to sign up for various accounts and log
in to them, both with and without the extension in-
stalled. The Firefox version of the plugin was used.
The participants did not experience any major
difﬁculties signing up for new accounts and logging
in to them using the password preﬁx. When presented
with a fake eBay site at a numeric IP address, most of
the participants were willing to try logging in any-
way, but their use of the password-preﬁx prevented
the phishing page from reading their eBay passwords.
The user interface was so invisible that many
participants did not observe the extension doing any-
thing at all. They did not notice the lock icon, and
their only clue that the extension was working was
the fact that their password changed length when fo-
cus left the ﬁeld, which they found confusing. (We
plan to eliminate this change of length in future ver-
sions of the extension.)
It was only once the users had to log in using
a different browser that didn’t have PwdHash in-
stalled that they encountered difﬁculties. They found
the process of copying over of site addresses into the
remote hashing page to be annoying, and if they did
so incorrectly (for example, using gmail.com in-
stead of google.com), the site that they were log-
ging into did not provide useful feedback as to what
went wrong.
In response to this feedback, we plan additional
improvements to the documentation and the remote
hashing page to make them as user-friendly as possi-
ble. Of course, if PwdHash became popular enough
to be installed in every browser, there would be no
need to use the remote hashing site.
8 Related Work
Password hashing with a salt is an old idea.
However, web password hashing is often imple-
mented incorrectly by giving the remote site the free-
dom to choose the salt. For example, HTTP1.1 Di-
gest Authentication deﬁnes password hashing as fol-
lows:
digest = Hash(pwd, realm, nonce, username, . . .)
where realm and nonce are speciﬁed by the remote
web site. Hence, using an online attack, a phisher
could send to the user the realm and nonce the phisher
received from the victim site. The user’s response
provides the phisher with a valid password digest for
the victim site. Password hashing implemented in
Kerberos 5 has a similar vulnerability.
The ﬁrst systems we are aware of that provide
proper web password hashing are the Lucent Personal
Web Assistant (LPWA) [GGMM97, GGK+99] and
a system from DEC SRC [ABM97] by Abadi et al.
To facilitate deployment, LPWA was implemented as
a web proxy, which worked ﬁne back when LPWA
was implemented. However, many password pages
these days are sent over SSL, and consequently a web
proxy cannot see or modify the trafﬁc. It was nec-
essary to build PwdHash as a browser extension so
that we could alter passwords before SSL encryption.
Although it might be feasible to build a proxy that
forges SSL certiﬁcates on the ﬂy (essentially mount-
ing a man in the middle attack on SSL), such a proxy
would not be able to identify or protect passwords
that are typed into mock password ﬁelds (Figure 3).
The DEC SRC system [ABM97] was implemented
as a standalone Java Applet and did not take into ac-
count the various challenges in implementing Pwd-
Hash inside a modern browser.
The Password Maker
[Jun] extension for
Mozilla Firefox is functionally similar to PwdHash,
but with a slightly more prominent user interface.
Users can indicate that they would like to insert a
hashed password by pushing a toolbar button or se-
lecting an option from the password ﬁeld’s context
menu. The password is then entered into a dialog
box and (optionally) stored so that it can be ﬁlled in
automatically in the future. Password Maker may be
a good solution for users who do not mind the secu-
rity risks of storing their password in the browser, but
it demands signiﬁcant changes in the password en-
try model that people have used for years, and thus
maintains a steep learning curve.
The Password Composer [lP] extension for
Mozilla Firefox modiﬁes password ﬁelds on the cur-
rent page, allowing the user to enter a hashed pass-
word into a new password ﬁeld that is superimposed
over the old one. Password Composer is also pro-
vided as a bookmarklet and as a JavaScript ﬁle that
can be loaded for each page using the GreaseMonkey
Firefox extension. A malicious script could read the
pre-hashed password as it is typed into the superim-
posed password ﬁeld, however. The Password Com-
poser user interface also seems vulnerable to spoof-
ing.
We emphasize that PwdHash does not pre-
USENIX Association
14th USENIX Security Symposium
29
clude other anti-phishing solutions. For example,
SpoofGuard [CLTM04] is a browser extension that
alerts the user when the browser navigates to a sus-
pected phishing site. SpoofGuard and PwdHash
techniques complement one another nicely. In addi-
tion, the Passmark [Pas] web personalization method
for ﬁghting phishing provides independent function-
ality and may complement PwdHash.
Halderman et al. [HWF05] study how to secure
password hashing from dictionary attacks by using
ultra-slow hash functions. As discussed earlier, these
techniques can be integrated into PwdHash to help
defend against dictionary attacks. We note that our
focus here is very different from that of [HWF05].
We are primarily concerned with how to implement
password hashing inside a modern browser so that
phishing sites cannot steal cleartext passwords, with
minimal change to user experience.
Finally, a number of existing applications —
including Mozilla Firefox — provide convenient
password management [PSa] by storing the user’s
web passwords on disk, encrypted under some mas-
ter password. When the user tries to log in to a site,
the application asks for the master password and then
releases the user’s password for that site. Thus, the
user need only remember the master password. The
main drawback compared to PwdHash is that the
user can only use the web on the machine that stores
his passwords. On the plus side, password manage-
ment systems do provide stronger protection against
dictionary attacks when the user chooses a unique,
high entropy password for each site. However, many
users may fail to do this.
9 Conclusions
We presented a browser extension, PwdHash,
designed to improve password authentication on the
web with minimal change to the user experience and
no change to existing server conﬁgurations.
The bulk of the paper discusses the various
challenges in implementing PwdHash in a modern
browser. Most importantly, we had to overcome at-
tack scripts at phishing sites that try to steal cleart-
ext user passwords. Our solution enables users to se-
curely type their passwords inside the browser win-
dow as they currently do. Results from preliminary
user studies indicate that the basic functionality of the
extension is not difﬁcult to use.
We hope that our approach will be useful in
other distributed systems that want to use password
hashing to strengthen user authentication. Our exten-
sion and source code are available for download at
the PwdHash website:
http://crypto.stanford.edu/PwdHash
Acknowledgments
We thank Aaron Emigh, Darin Fisher, Burt
Kaliski, Donal Mountain, Cem Paya, Eric Rescorla,
Jim Roskind, Brian Ryner, and Fritz Schneider for
helpful discussions about password phishing and this
work.
References
[ABM97] M. Abadi, L. Bharat, and A. Marais.
System and method for generat-
ing unique passwords.
US Patent
6,141,760, 1997.
[APW]
[BM92]
[BPR00]
Anti-phishing working group. http:
//www.antiphishing.org.
S. Bellovin and M Merritt. Encrypted
key exchange: password based proto-
cols secure against dictionary attacks.
In Proceedings of IEEE Symposium
on Research in Security and Privacy,
1992.
M. Bellare, D. Pointcheva, and P. Rog-
away. Authenticated key exchange se-
cure against dictionary attacks. In Pro-
ceedings of Eurocrypt 2000, 2000.
[CLTM04] N. Chou, R. Ledesma, Y. Teraguchi,
and J. Mitchell. Client-side defense
against web-based identity theft.
In
Proceedings of Network and Dis-
(NDSS),
tributed Systems Security
2004.
[DA99]
T. Dierks and C. Allen. The TLS Pro-
tocol — Version 1.0. IETF RFC 2246,
January 1999.
[GGK+99] Eran Gabber, Phillip B. Gibbons,
David M. Kristol, Yossi Matias, and
Alain Mayer. On secure and pseudony-
mous client-relationships with multiple
servers. ACM Transactions on Infor-
mation and System Security, 2(4):390–
415, 1999.
[GGM86] O. Goldreich, S. Goldwasser,
and
S. Micali. How to construct random
functions.
J. ACM, 33(4):792–807,
1986.
30
14th USENIX Security Symposium
USENIX Association
[GGMM97] E. Gaber, P. Gobbons, Y. Mattias, and
A. Mayer. How to make personal-
ized web browsing simple, secure, and
anonymous.
In Proceedings of Finan-
cial Crypto ’97, volume 1318 of LNCS.
Springer-Verlag, 1997.
[Hel97]
[HWF05]
[Jun]
[lP]
[Pas]
[PM99]
[PSa]
[Wol]
[Wu99]
M. Hellman. Authentication using ran-
dom challenges. US Patent 5,872,917,
1997.
J. A. Halderman, B. Waters, and E. Fel-
ten. A convenient method for securely
managing passwords.
To appear in
Proceedings of the 14th International
World Wide Web Conference (WWW
2005), 2005.
E. Jung. Passwordmaker. http://
passwordmaker.mozdev.org.
la Poutr´e.
Password composer.
J.
http://www.xs4all.nl/
˜jlpoutre/BoT/Javascript/
PasswordComposer/.
Passmark.
passmark.com.
http://www.
N. Provos and D. Mazi`eres. A future-
adaptable password scheme.
In Pro-
ceedings of the 1999 USENIX Annual
Technical Conference, Freenix Track,
Monterey, CA, June 1999.
safe.
Password
passwordsafe.sourceforge.
net/.
http://
N. Wolff. Password generator book-
http://angel.net/
marklet.
˜nic/passwdlet.html.
T. Wu. A real-world analysis of ker-
beros password security.
In Proceed-
ings of Network and Distributed Sys-
tems Security (NDSS), 1999.
[Zar]
C. Zarate. Genpass. http://labs.
zarate.org/passwd/.
USENIX Association
14th USENIX Security Symposium
31