Delete。
（2）创建PV
在使用持久化时，需要先创建 PV，然后再创建 PVC，PVC 会和匹配的 PV 进行绑定，然后
Pod即可使用该存储。
创建一个基于NFS的PV：
apiVersion: v1
kind: PersistentVolume
metadata:
name: pv0003
spec:
capacity:
storage: 5Gi
volumeMode: Filesystem
accessModes:
- ReadWriteOnce
persistentVolumeReclaimPolicy: Recycle
storageClassName: slow
mountOptions:
- hard
- nfsvers=4.1
nfs:
第2章 Docker及Kubernetes基础 | 113
path: /tmp
server: 172.17.0.2
说明
 capacity：容量。
 accessModes：访问模式。包括以下3种：
 ReadWriteOnce：可以被单节点以读写模式挂载，命令行中可以被缩写为RWO。
 ReadOnlyMany：可以被多个节点以只读模式挂载，命令行中可以被缩写为ROX。
 ReadWriteMany：可以被多个节点以读写模式挂载，命令行中可以被缩写为RWX。
 storageClassName：PV的类，一个特定类型的PV只能绑定到特定类别的PVC。
 persistentVolumeReclaimPolicy：回收策略。
 mountOptions：非必须，新版本中已弃用。
 nfs：NFS服务配置。包括以下两个选项：
 path：NFS上的目录
 server：NFS的IP地址
创建的PV会有以下几种状态：
 Available（可用），没有被PVC绑定的空间资源。
 Bound（已绑定），已经被PVC绑定。
 Released（已释放），PVC被删除，但是资源还未被重新使用。
 Failed（失败），自动回收失败。
可以创建一个基于hostPath的PV：
kind: PersistentVolume
apiVersion: v1
metadata:
name: task-pv-volume
labels:
type: local
spec:
storageClassName: manual
capacity:
storage: 10Gi
accessModes:
- ReadWriteOnce
hostPath:
path: "/mnt/data"
（3）创建PVC
创建PVC需要注意的是，各个方面都符合要求PVC才能和PV进行绑定，比如accessModes、
storageClassName、volumeMode都需要相同才能进行绑定。
创建PVC的示例如下：
kind: PersistentVolumeClaim
apiVersion: v1
metadata:
114 | 再也不踩坑的Kubernetes实战指南
name: myclaim
spec:
accessModes:
- ReadWriteOnce
volumeMode: Filesystem
resources:
requests:
storage: 8Gi
storageClassName: slow
selector:
matchLabels:
release: "stable"
matchExpressions:
- {key: environment, operator: In, values: [dev]}
比如上述基于hostPath的PV可以使用以下PVC进行绑定，storage可以比PV小：
kind: PersistentVolumeClaim
apiVersion: v1
metadata:
name: task-pv-claim
spec:
storageClassName: manual
accessModes:
- ReadWriteOnce
resources:
requests:
storage: 3Gi
然后创建一个Pod指定volumes即可使用这个PV：
kind: Pod
apiVersion: v1
metadata:
name: task-pv-pod
spec:
volumes:
- name: task-pv-storage
persistentVolumeClaim:
claimName: task-pv-claim
containers:
- name: task-pv-container
image: nginx
ports:
- containerPort: 80
name: "http-server"
volumeMounts:
- mountPath: "/usr/share/nginx/html"
name: task-pv-storage
注 意
claimName需要和上述定义的PVC名称task-pv-claim一致。
第2章 Docker及Kubernetes基础 | 115
3. StorageClass
StorageClass为管理员提供了一种描述存储“类”的方法，可以满足用户不同的服务质量级别、
备份策略和任意策略要求的存储需求，一般动态PV都会通过StorageClass来定义。
每个StorageClass包含字段provisioner、parameters和reclaimPolicy，StorageClass对象的名称
很重要，管理员在首次创建StorageClass对象时设置的类的名称和其他参数，在被创建对象后无法
再更新这些对象。
定义一个StorageClass的示例如下：
kind: StorageClass
apiVersion: storage.K8S.io/v1
metadata:
name: standard
provisioner: kubernetes.io/aws-ebs
parameters:
type: gp2
reclaimPolicy: Retain
mountOptions:
- debug
volumeBindingMode: Immediate
（1）Provisioner
StorageClass有一个provisioner字段，用于指定配置PV的卷的类型，必须指定此字段，目前
支持的卷插件如表2-7所示。
表2-7 卷插件的类型
Volume Plugin Internal Provisioner Config Example
AWSElasticBlockStore ✓ AWS EBS
AzureFile ✓ Azure File
AzureDisk ✓ Azure Disk
CephFS - -
Cinder ✓ OpenStack Cinder
FC - -
Flexvolume - -
Flocker ✓ -
GCEPersistentDisk ✓ GCE PD
Glusterfs ✓ Glusterfs
iSCSI - -
Quobyte ✓ Quobyte
NFS - -
RBD ✓ Ceph RBD
VsphereVolume ✓ vSphere
PortworxVolume ✓ Portworx Volume
ScaleIO ✓ ScaleIO
StorageOS ✓ StorageOS
Local - Local
116 | 再也不踩坑的Kubernetes实战指南
注 意
provisioner不仅限于此处列出的内部provisioner，还可以运行和指定外部供应商。例如，
NFS不提供内部配置程序，但是可以使用外部配置程序，外部配置方式参见以下网址：
https://github.com/kubernetes-incubator/external-storage
（2）ReclaimPolicy
回收策略，可以是Delete、Retain，默认为Delete。
（3）MountOptions
通过StorageClass动态创建的PV可以使用MountOptions指定挂载参数。如果指定的卷插件不
支持指定的挂载选项，就不会被创建成功，因此在设置时需要进行确认。
（4）Parameters
PVC具有描述属于StorageClass卷的参数，根据具体情况，取决于provisioner，可以接受不同
类型的参数。比如，type为io1和特定参数iopsPerGB是EBS所具有的。如果省略配置参数，将采
用默认值。
4. 定义StorageClass
StorageClass一般用于定义动态存储卷，只需要在Pod上指定StorageClass的名字即可自动创
建对应的PV，无须再手工创建。
以下为常用的StorageClass定义方式。
（1）AWS EBS
kind: StorageClass
apiVersion: storage.K8S.io/v1
metadata:
name: slow
provisioner: kubernetes.io/aws-ebs
parameters:
type: io1
iopsPerGB: "10"
fsType: ext4
说明
 type：io1、gp2、sc1、st1，默认为gp2。详情可查看以下网址的内容：
https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/EBSVolumeTypes.h
tml
 iopsPerGB：仅适用于io1卷，即每GiB每秒的I/O操作。
 fsType：Kubernetes支持的fsType，默认值为：ext4。
（2）GCE PD
kind: StorageClass
apiVersion: storage.K8S.io/v1
metadata:
name: slow
第2章 Docker及Kubernetes基础 | 117
provisioner: kubernetes.io/gce-pd
parameters:
type: pd-standard
replication-type: none
说明
 type：pd-standard或pd-ssd，默认为pd-standard。
 replication-type：none或regional-pd，默认值为none。
（3）GFS
apiVersion: storage.K8S.io/v1
kind: StorageClass
metadata:
name: slow
provisioner: kubernetes.io/glusterfs
parameters:
resturl: "http://127.0.0.1:8081"
clusterid: "630372ccdc720a92c681fb928f27b53f"
restauthenabled: "true"
restuser: "admin"
secretNamespace: "default"
secretName: "heketi-secret"
gidMin: "40000"
gidMax: "50000"
volumetype: "replicate:3"
说明
 resturl：Gluster REST服务/Heketi服务的URL，这是GFS动态存储必需的参数。
 restauthenabled：用于对 REST 服务器进行身份验证，此选项已被启用。如果需要启用身
份验证，只需指定restuser、restuserkey、secretName或secretNamespace其中一个即可。
 restuser：访问Gluster REST服务的用户。
 secretNamespace，secretName：与Gluster REST服务交互时使用的Secret。这些参数是可
选的，如果没有身份认证不用配置此参数。该Secret使用type为kubernetes.io/glusterfs的
Secret进行创建，例如：
kubectl create secret generic heketi-secret \
--type="kubernetes.io/glusterfs" --from-literal=key='opensesame' \
--namespace=default
 clusterid：Heketi创建集群的ID，可以是一个列表，用逗号分隔。
 gidMin，gidMax：StorageClass的GID范围，可选，默认为2000-2147483647。
 volumetype：创建的GFS卷的类型，主要分为以下3种：
 Replica卷：volumetype: replicate:3，表示每个PV会创建3个副本。
 Disperse/EC卷：volumetype: disperse:4:2，其中4是数据，2是冗余。
 Distribute卷：volumetype: none。
当使用 GFS 作为动态配置 PV 时，会自动创建一个格式为 gluster-dynamic-的
Endpoint和Headless Service，删除PVC会自动删除PV、Endpoint和Headless Service。
118 | 再也不踩坑的Kubernetes实战指南
（4）Ceph RBD
kind: StorageClass
apiVersion: storage.K8S.io/v1
metadata:
name: fast
provisioner: kubernetes.io/rbd
parameters:
monitors: 10.16.153.105:6789
adminId: kube
adminSecretName: ceph-secret
adminSecretNamespace: kube-system
pool: kube
userId: kube
userSecretName: ceph-secret-user
userSecretNamespace: default
fsType: ext4
imageFormat: "2"
imageFeatures: "layering"
说明
 monitors：Ceph的monitor，用逗号分隔，此参数是必需的。
 adminId：Ceph客户端的ID，默认为admin。
 adminSecretName：adminId 的 Secret 名称，此参数是必需的，该 Secret 必须是
kubernetes.io/rbd类型。
 adminSecretNamespace：Secret所在的NameSpace（命名空间），默认为default。
 pool：Ceph RBD池，默认为rbd。
 userId：Ceph客户端ID，默认值与adminId相同。
 userSecretName：和adminSecretName类似，必须与PVC存在于同一个命名空间，创建方
式如下：
kubectl create secret generic ceph-secret --type="kubernetes.io/rbd" \
--from-literal=key='QVFEQ1pMdFhPUnQrSmhBQUFYaERWNHJsZ3BsMmNjcDR6RFZST0E9
PQ==' \
--namespace=kube-system
 imageFormat：Ceph RBD 镜像格式，默认值为2，旧一些的为1。
 imagefeatures：可选参数，只有设置imageFormat为2时才能使用，目前仅支持layering。
更多详情请参考以下网址：
https://kubernetes.io/docs/concepts/storage/storage-classes/
4. 动态存储卷
动态卷的配置允许按需自动创建PV，如果没有动态配置，集群管理员必须手动创建PV。
动态卷的配置基于StorageClass API组中的API对象storage.K8S.io。
（1）定义GCE动态预配置
要启用动态配置，集群管理员需要为用户预先创建一个或多个StorageClass对象，比如创建一
第2章 Docker及Kubernetes基础 | 119
个名字为slow且使用gce提供存储卷的StorageClass：
apiVersion: storage.K8S.io/v1
kind: StorageClass
metadata:
name: slow
provisioner: kubernetes.io/gce-pd
parameters:
type: pd-standard
再例如创建一个能提供SSD磁盘的StorageClass：
apiVersion: storage.K8S.io/v1
kind: StorageClass
metadata:
name: fast
provisioner: kubernetes.io/gce-pd
parameters:
type: pd-ssd
用户通过定义包含StorageClass的PVC来请求动态调配的存储。在Kubernetesv 1.6之前，是
通过volume.beta.kubernetes.io/storage-class注解来完成的。在1.6版本之后，此注解已弃用。
例如，创建一个快速存储类，定义的PersistentVolumeClaim如下：
apiVersion: v1
kind: PersistentVolumeClaim