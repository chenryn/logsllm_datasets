for these ﬁlter drivers is removed but the entries point-
ing to that code are not removed from the registry, the
CD and IDE device drivers will fail to initialize. This
can cause the CD drives to malfunction, or, worse, can
stop the system from booting if the IDE device driver
is disabled. The registry entries can be eliminated by
removing any reference to a driver named $sys$cor
from any registry entries named UpperDrivers or
LowerDrivers, and removing any lines containing
$sys$caj from any list of CoDeviceInstallers in the
registry.
$sys$cor
$sys$oct,
The third step is to delete the XCP services and
Services named
remove the XCP program ﬁles.
$sys$drmserver,
$sys$lim,
cd proxy,
deacti-
and
vated
lim.sys,
then
oct.sys, $sys$cor.sys, $sys$caj.dll, and
$sys$upgtool.exe can be deleted. After rebooting,
the two remaining ﬁles named CDProxyServ.exe
and $sys$DRMServer.exe can be removed.
and
the sc delete command,
named
crater.sys,
using
ﬁles
can
be
Performing these steps will deactivate the XCP active
protection, leaving only the passive protection on XCP
CDs in force. The procedure easily could be automated
to create a point-and-click removal tool.
7.4
Impact of Spyware Tactics
The use of rootkits and other spyware tactics harms users
by undermining their ability to manage their computers.
If users lose effective control over which programs run
USENIX Association
Security ’06: 15th USENIX Security Symposium
87
on their computers, they can no longer patch malfunc-
tioning programs or remove unneeded programs. Manag-
ing a system securely is difﬁcult enough without spyware
tactics making it even harder.
Though it is no surprise that spyware tactics would be
attractive to DRM designers, it is a bit surprising that
mass-market DRM vendors chose to use those tactics de-
spite their impact on users. If only one vendor had cho-
sen to use such tactics, we could write it off as an aber-
ration. But two vendors made that choice, which is prob-
ably not a coincidence. We suspect that the vendors let
the lure of platform building override the risk to users.
7.5 Summary of Deactivation Attacks
Ultimately, there is little a CD DRM vendor can do to
stop users from deactivating active protection software.
Vendors’ attempts to frustrate users’ control of their ma-
chines are harmful and will trigger a strong backlash
from users. In practice, vendors will probably have to
provide some kind of uninstaller—users will insist on it,
and some users will need it to deal with the bugs and
incompatibilities that crop up inevitably in complex soft-
ware. Once an uninstaller is released, users can use it
to remove the DRM software. Determined users will be
able to keep CD DRM software off of their machines.
8 Uninstallation
The DRM vendors responded to user complaints about
spyware-like behavior by offering uninstallers that would
remove their software from users’ systems. Uninstallers
had been available before but were very difﬁcult to ac-
quire. For example, to get the original XCP uninstaller, a
user had to ﬁll out an online form involving personal in-
formation, then wait a few days for a reply email, then ﬁll
out another online form and install some software, then
wait a few days for yet another email, and ﬁnally click a
URL in the last email. It is hard to explain the complex-
ity of this procedure, except as a way to deter users from
uninstalling XCP.
The uninstallers, when users did manage to get them,
did not behave like ordinary software uninstallers. Nor-
mal uninstallers are programs that can be acquired and
used by any user who has the software. The ﬁrst XCP
uninstaller was customized for each user so that it would
only work for a limited time and only on the computer
on which the user had ﬁlled out the second form. This
meant, for example, that if a user uninstalled XCP but
it was reinstalled later—say, if the user inserted an XCP
CD—the user could not use the same uninstaller again
but would have to go through the entire process again to
request a new one.
Customizing the uninstaller is more difﬁcult, com-
pared to a traditional uninstaller, for both vendor and
user, so it must beneﬁt the vendor somehow. One ben-
eﬁt is to the vendor’s platform building strategy, which
takes a step backward every time a user uninstalls the
software. Customizing the uninstaller allows the vendor
to control who receives the uninstaller and to change the
terms under which it is delivered.
As user complaints mounted, Sony-BMG announced
that unrestricted uninstallers for both XCP and Media-
Max would be released from the vendors’ web sites.
Both vendors chose to make these uninstallers available
as ActiveX controls. By an unfortunate coincidence,
both uninstallers turned out to open the same serious vul-
nerability on any computer where they were used.
8.1 MediaMax Uninstaller Vulnerability
The original MediaMax uninstaller uses a proprietary Ac-
tiveX control, AxWebRemove.ocx, created and signed
by SunnComm. Users visiting the MediaMax uninstaller
web page are prompted to install the control, then the
web page uninstalls MediaMax by invoking one of the
control’s methods.
This method, Remove, takes a URL and a numeric
key as arguments. Remove contacts the URL, passing
it the key. If the server ﬁnds the key to be valid, it re-
turns another URL for the uninstaller. The ActiveX con-
trol downloads code from the uninstaller URL and then
executes it. After running the uninstaller, the ActiveX
control contacts the server again to notify it that the key
had been used. MediaMax has been removed, but the
ActiveX control remains on the user’s system.
At this point, a malicious attacker’s web page can in-
voke the control’s Remove method, passing it a URL
pointing to a malicious server controlled by the attacker.
The control could contact this server, and then download
and run code from a location supplied by the malicious
server. By this method, an adversary could run arbitrary
code on the user’s system.
The ﬂaw in this design, of course, is that MediaMax
ActiveX control does not validate the URL it is passed,
and does not validate the downloaded code before run-
ning it. Validating these items, perhaps using digital sig-
natures, would have eliminated the vulnerability.
8.2 XCP Uninstaller Vulnerability
The original XCP uninstaller contains the same design
ﬂaw and is only slightly more difﬁcult to exploit. XCP’s
ActiveX-based uninstaller invokes a proprietary ActiveX
control named CodeSupport.ocx. Usually this con-
trol is installed in the second step of the three-step XCP
88
Security ’06: 15th USENIX Security Symposium
USENIX Association
uninstall process. In this step, a pseudorandom code gen-
erated by the ActiveX control is sent to the XCP server.
The same code is written to the system registry. Eventu-
ally the user receives an email with a link to another web
page that uses the ActiveX control to remove XCP, but
only after verifying that the correct code is in the registry
on the local system. This check tethers the uninstaller to
the machine from which the uninstallation request was
made. Due to this design, the vulnerable control may be
present on a user’s system even if she never performed
the step in the uninstallation process where XCP is re-
moved.
Matti Nikki ﬁrst noted that the XCP ActiveX con-
trol contains suspiciously-named methods,
including
InstallUpdate(url), Uninstall(url), and
RebootMachine() [18]. He demonstrated that the
control was still present after the XCP uninstallation was
complete, and that its methods (including one that re-
booted the computer) were scriptable from any web page
without further browser security warnings.
We
that
found
the InstallUpdate and
Uninstall methods have an even more serious
ﬂaw. Each takes as an argument a URL pointing to
a specially formatted archive that contains updater or
uninstaller code and data ﬁles. When these methods
are invoked,
the archive is retrieved from the pro-
vided URL and stored in a temporary location. For the
InstallUpdate method, the ActiveX control extracts
from the archive a ﬁle named InstallLite.dll and
calls a function in this DLL named InstallXCP.
Like the MediaMax ActiveX control, the XCP con-
trol does not validate the download URL or the down-
loaded archive. The only barrier to using the control to
execute arbitrary code is the proprietary format of the
archive ﬁle. We determined the format by disassembling
the control. The archive ﬁle consists of several blocks
of gzip-compressed data, each storing a separate ﬁle and
preceded with a short header. At the end of the archive,
a catalog structure lists metadata for each of the blocks,
including a 32-bit CRC. The control veriﬁes this CRC
before executing code from the DLL.
With knowledge of this ﬁle format, we were able
to construct an archive containing (benign proof-of-
concept) exploit code, and a web page that would in-
stall and run our code on a user’s system without any
browser security warnings, on a computer containing the
XCP control. The same method would allow a malicious
web site to execute arbitrary code on the user’s machine.
Like the MediaMax uninstaller ﬂaw, this problem is espe-
cially dangerous because users who have completed the
uninstallation may not be aware that they are still vulner-
able.
Obviously, these vulnerabilities could have been pre-
vented by careful design and programming. But they
were only possible at all because the vendors chose to de-
liver the uninstallers via this ActiveX method rather than
using an ordinary download. We conjecture that the ven-
dors made this choice because they wanted to retain the
ability to rewrite, modify, or cancel the uninstaller later,
in order to further their platform building strategies.
9 Compatibility and Software Updates
Compared to other media on which software is dis-
tributed, compact discs have a very long life. Many com-
pact discs will still be inserted into computers and other
players twenty years or more after they are ﬁrst bought.
If a particular version of DRM software is shipped on
a new CD, that software version may well try to install
and run decades after it was developed. The same is not
true of most software, even when shipped on a CD-ROM.
Very few if any of today’s Windows XP CDs will be in-
serted into computers in 2026; but today’s music CDs
will be, so their DRM software must be designed care-
fully for future compatibility.
The software should be designed for safety, so as not
to cause crashes or malfunction of other software, and
may be designed for efﬁcacy, to ensure that its anti-
copying features remain effective.
9.1 Supporting Safety by Deactivating Old
Software
Safety is easier to achieve, and probably more important.
One approach is to design the DRM software to be inert
and harmless on future systems. Both XCP and Media-
Max do this by relying on Windows autorun, which is
likely to be disabled in future versions of Windows for se-
curity reasons. If the upcoming Windows Vista disables
autorun by default, XCP and MediaMax will be inert on
most Vista systems. Perhaps XCP and MediaMax used
autorun for safety reasons; but more likely, this choice
was expedient for other reasons.
Another safety technique is to build in a sunset date
after which the software will make itself inert. A sunset
would improve safety but would have relatively little ef-
fect on record label revenue for most discs, as we expect
nearly all revenue from the disc to have been extracted
from the customer in the ﬁrst three years after she buys
it. If in the future more copies of the album are pressed,
these could have updated DRM software with a later sun-
set.
9.2 Updating the Software
When a new version of DRM software is released, it
can be shipped on newly pressed CDs, but existing CDs
cannot be modiﬁed retroactively. Updates for existing
USENIX Association
Security ’06: 15th USENIX Security Symposium
89
users can be delivered either by download or on new CDs.
Downloads are faster but require an Internet connection;
CD delivery is slower but can reach non-networked ma-
chines.
Users will generally cooperate with updates that help
them by improving safety or making the software more
useful. But updates to retain the efﬁcacy of the software’s
usage controls will not be welcomed by users.
Users have many ways to stop updates from download-
ing or installing, such as write-protecting the software’s
code so that it cannot be updated, or using a personal ﬁre-
wall to block network connections to the vendor’s down-
load servers. System security tools, which are designed
generally to stop unwanted network connections, down-
loads, and code installation, can be set to treat CD DRM
software as malware.
A DRM vendor who wants to deliver unwanted up-
dates has two options. First, the vendor can simply of-
fer updates and hope some users will not bother to block
them. For the vendor and record label, this is better than
nothing. Alternatively, the vendor can try to force users
to accept updates.
9.3 Forcing Updates
If a user has the ability to block DRM software updates, a
vendor who wants an update must somehow convince the
user that updating is in her best interest. One approach is
to make a non-updated system painful to use.
Ruling out dangerous and legally risky tactics such as
logic bombs that destroy the user’s system or hold her
(unrelated) data hostage, the vendor’s strongest tactic for
forcing updates is to make the DRM software block all
access to protected CDs until the user accepts an update.
The DRM software might check with a network server,
which periodically would produce a digitally signed and
dated certiﬁcate listing allowed versions of the DRM
software. If the software on the user’s system found that
its version number was not on the list (or if it could not
get a recent list), it would block all access to protected
discs. The user would then have to update to a new ver-