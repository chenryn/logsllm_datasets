### TLS Session and Channel Binding

A TLS session requires the knowledge of the corresponding private key. Initially, Origin-Bound Certificates (OBCs) were introduced but later revised and renamed to Channel ID. This revision was not directly related to preventing Man-in-the-Middle (MITM) cookie theft. The channel-bound credential primitive has also been proposed for use in conjunction with user devices, such as tokens [78] or smartphones [81].

### Credential-Bound Channels

Credential-bound channels prevent MITM adversaries from stealing credentials by reversing the concept of channel-bound credentials. Instead of the server deciding to accept a credential based on its binding to a client certificate, the client decides whether to accept a server certificate based on its binding to the client’s credential. This approach assumes a pre-shared password and does not protect the password during the initial establishment. One proposal, called Direct Validation of Certificates (DVCert) [33], uses a PAKE-based protocol to demonstrate the server's knowledge of the client’s password while attesting to the value of its certificate. This method is more secure than the server MACing its certificate with the shared password, which could be vulnerable to offline dictionary attacks.

### Key Agility and Manifest

When preventing MITM attacks without involving the server (e.g., through inductive client pinning or multipath probing), it can be challenging to distinguish between legitimate reasons for different certificates (such as certificate updates or multiple certificates used by the same host) and actual attacks. To address this, several primitives use a "key manifest," which specifies all keys that could be used by the domain, and/or key agility, which provides an update mechanism for new certificates. This can be implemented by:
- Signing the new certificate with the old certificate’s key.
- Linking certificate changes through the use of a master secret.

Examples of these approaches include server-side key pinning, TACK, DANE, and DVCert. The Sovereign Key proposal [11] is similar, where servers establish and broadcast a long-term signing key to cross-certify all their certificates. These methods are often combined with other primitives, such as key pinning or multipath probing, to detect MITM attacks while minimizing false-reject errors due to certificate updates and load balancing.

### HTTPS-Only Pinning

The primitives discussed do not address TLS stripping attacks because they are only invoked when an HTTPS connection is requested. To prevent TLS stripping, certain domains can be made to support only TLS, communicated to clients via pins. These HTTPS-only pins can be communicated by the server in request headers or TLS extensions, pre-established in the user’s browser, or obtained from the DNS record of the site. Examples include ForceHTTPS [56] and its refinement in HSTS [8], Chrome 22 with over 100 HTTPS-only pins, and Service Security Requirement (SSR) [4], [80], which records in DNS that a site is HTTPS-only.

Beyond preventing TLS stripping, HTTPS-only pins ensure that cookies scoped to the domain of the pin are always sent over HTTPS, regardless of whether the website developer marked the cookies as secure [56], [67].

### Visual Cues for Secure POST

A simple client-side primitive can address certain types of TLS stripping. Websites often design forms to POST login credentials to an HTTPS site from an HTTP site. A persistent security cue can indicate whether a form POSTs to HTTP or HTTPS. The SSLight browser extension [91] adds a "traffic light" cue to login form fields, displaying a green light if the field is posted to the current domain over HTTPS, a yellow light for cross-domain HTTPS posts, and a red light for POST-to-HTTP. However, this approach requires the browser to retrieve the site certificates associated with all POSTs, which can negate performance benefits. Additionally, the cue's placement within the form field itself risks being obscured by a maliciously modified site.

### Browser-Stored CRL

Four prominent revocation approaches are CRLs, online certificate status checking, short-lived certificates, and trusted directories. The CA/B model uses CRLs and OCSP. Given the shortcomings of current revocation procedures, efforts are being made to improve responsiveness along all four lines. Browser-stored CRLs modify the CRL distribution architecture. Instead of clients fetching CRLs and OCSP responses directly from distribution points, the browser vendor fetches them periodically and sends an updated master CRL to the browser for storage. Major browsers manually revoke high-risk certificates through software updates, but Chrome has implemented a more general CRL that can be transparently updated [27].

### Certificate Status Stapling

Certificate Status Stapling modifies the distribution of OCSP responses. Currently, a client requests a status report from a CA-designated OCSP responder, but these responders are often overwhelmed or unresponsive. Under Certificate Status Stapling, certificate holders periodically obtain signed and timestamped status reports and include these with their certificate during the handshake [88]. In HTTPS, this is defined as a TLS extension, commonly called OCSP-stapling. The RFC only permits a report on the server certificate, not the entire chain, which is a significant drawback. However, Table I evaluates the general idea of stapling reports on the entire chain.

### Short-Lived Certificates

This primitive replaces long-lasting certificates with short-lived ones that certificate holders frequently renew [88]. Revocation results from failing to update a certificate. A recent proposal and implementation for short-lived HTTPS certificates [101] issues certificates with a four-day lifespan, either on-demand or in batches. It is proposed to be used in conjunction with Browser-stored CRL and Key Pinning (Server).

### List of Active Certificates

The fourth revocation method is trusted directories, which provide a publicly searchable list of valid certificates. In HTTPS, this could be implemented as a whitelist of every server and CA TLS certificate (including intermediates) acceptable to HTTPS clients. Revocation is accomplished by removing the certificate from the list. This makes all intermediate CAs visible and allows domain owners to monitor for illegitimately issued certificates for their domains. No full-fledged List of Active Certificates has been proposed yet. It is similar to Certificate Transparency [6] but differs in that the CT log is meant for discovering suspicious certificates, not as an authoritative whitelist for making trust decisions. Currently, CT logs only site certificates, so intermediate CAs are only visible if they issue site certificates.

### Further Discussion and Ongoing Research

#### Important Orthogonal Problems

The original objective of HTTPS was to provide a confidential channel with message integrity and server authentication. However, HTTPS does not bridge the cognitive gap between the user’s intended organization and the domain name in the certificate. Many websites do not use TLS at all, while those using EV-SSL certificates have validated organizational details that users often do not reference or understand. For these reasons, TLS in its present form fails to close this cognitive gap. Addressing this issue remains an open research problem.

HTTPS can protect the secrecy and integrity of cookies in transit, but browser policy dictates the conditions for read/write access to secure cookies. Browsers must handle mixed content carefully, including how and when to alert users. Cookie security and mixed content remain challenging problems. A compromised client platform (e.g., due to malware) can subvert HTTPS protections. Research on building verified kernels, trusted modules, and trusted paths into client platforms complements HTTPS. Other orthogonal issues include the availability of the HTTPS infrastructure (e.g., DDOS attacks, restrictive networks, captive portals) and improving performance (e.g., False Start, Snap Start).

#### Protocol-Level TLS Analysis and Modification

The complexity of TLS has enabled protocol attacks even after 15 years. Analyzing TLS security in sufficiently broad models remains an open research problem. Designing a protocol with provable security is easier than proving the security of a fixed protocol like TLS. Security analysis of TLS has provided both positive (security proofs) and negative (attacks) results.

The discovery of flaws in non-essential components of TLS has led to a culture of workarounds by disabling features rather than redesigning the protocol. Such quick fixes impede long-term protocol evolution. Some aspects of TLS are agile, such as AES adoption, but others, like the non-negotiable hashes used for pseudorandomness in TLS 1.0, impede SHA2/3 adoption. An open challenge is how to expedite protocol upgrades; TLS 1.2 adds agility but had only a 0.02% adoption rate in 2011 [87].

#### Trust Model Infrastructure

Critical research questions remain regarding the CA/B trust model. Is its continued use unavoidable, or has it become a liability? In the real world, trust is transitive in short chains, whereas the CA/B model allows long chains. Users end up trusting the browser vendor, anchor CAs, and intermediate CAs, often without any business relationship or accountability. Progress is being made, such as increasing the transparency of the anchor selection process and providing users with configurable trust anchors.

#### Human Element and Security User Interface

Browsers can automate many HTTPS security decisions, providing status indicators through the interface. However, for soft errors (e.g., expired certificates, mismatched domains, mixed content/scripting, untrusted CAs), there is no consensus on whether browsers should fail open, fail closed, or provide a warning dialogue. Research indicates low user confidence in navigating current indicators and warnings. Further research is needed on testing defaults, UI changes, and the wording of warning dialogues, as well as human-inclusive protocol analysis.

#### Raising the Bar (or Just Moving It)

Many practical security issues with today’s CA/B infrastructure result from a lack of defense in depth. Enhancements aim to add depth by addressing MITM attacks, TLS stripping attacks, and revocation issues. Combining several primitives into the current infrastructure increases protection but also complexity. Another approach is to seek alternatives that replace the functionality of CAs, such as DNSSEC-based pinning (e.g., DANE), which provides an infrastructure for ubiquitous HTTPS, largely replacing the need for CA-issued DV certificates. However, many questions remain regarding performance, caching, and packet inspection.

### Concluding Remarks

Our objectives include raising awareness of the number and breadth of past and ongoing security issues with HTTPS and its certificate trust model, allowing independent determination of their relative severities and potential solutions.