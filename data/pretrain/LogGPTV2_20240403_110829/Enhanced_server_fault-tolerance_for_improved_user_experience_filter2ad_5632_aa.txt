# Enhanced Server Fault-Tolerance for Improved User Experience

## Authors
- Manish Marwah, Hewlett-Packard Laboratories, Palo Alto, CA 94304
- Shivakant Mishra, Department of Computer Science, University of Colorado, Boulder, CO 80309
- Christof Fetzer, Department of Computer Science, TU-Dresden, Dresden, Germany D-01062

## Conference
International Conference on Dependable Systems & Networks: Anchorage, Alaska, June 24-27, 2008

## Abstract
Interactive applications such as email, calendar, and maps are increasingly being hosted in data centers due to the many advantages offered by this computing environment. This trend is leading to a significant increase in the deployment of servers at data centers. To achieve cost-effectiveness, inexpensive commodity machines are often used, but these have lower availability, leading to a higher probability of server failures. Such failures can cause service outages, degrade user experience, and result in lost revenue for businesses.

We propose a TCP splice-based Web server architecture that seamlessly tolerates both Web proxy and backend server failures. The client TCP connections and sessions are preserved, and failover to alternate servers in case of server failures is fast and transparent to the client. The architecture supports both deterministic and non-deterministic server applications. A prototype of this architecture has been implemented in Linux, and the paper presents detailed performance results for a PHP-based webmail application deployed over this architecture.

## 1. Introduction
In recent years, computing applications and services have shifted from local desktops to remote data centers. This paradigm shift is driven by several factors:
1. It reduces the burden on users related to installing, maintaining, and upgrading local software.
2. It enables easy access to applications and data from any location via the Internet.
3. It facilitates sharing and collaboration among geographically dispersed users.
4. It simplifies the delivery of critical client software updates, such as bug and security fixes.

To achieve cost-effectiveness, data centers often use inexpensive commodity machines. However, these machines have lower availability (about three nines), leading to more frequent server failures and service outages, which degrade user experience and result in lost revenue. For example, a server failure in a map service like MSN, Google, or Yahoo Maps can be noticeable to users if it lasts more than a few seconds, thereby degrading their experience.

Many emerging Web applications, such as map browsing and real-time stock market tickers, require high interactivity. Traditional desktop applications, such as word processing and spreadsheets, are also moving to remote data centers. To ensure a seamless user experience, these applications demand greater fault tolerance from data centers. Current methods for handling server failures in Web server farms, which involve the client detecting the failure and reissuing the request, can take tens of seconds, making them unacceptable for highly interactive applications.

In this paper, we present a Web server architecture that provides improved user experience by seamlessly tolerating failures of intermediate proxies and backend servers. The architecture incorporates the following key features:
1. Fast and transparent failure detection at the server end, reducing the impact on clients, especially those connecting over wide area networks (WANs).
2. Rapid failover, typically within a few seconds, which is perceived by clients as a minor network glitch.
3. Preservation of all client sessions and states during failover, ensuring a faster and seamless recovery.

The complete system architecture builds on our earlier work on TCP splicing mechanisms and transactional network interfaces. The three main contributions of this paper are:
1. Adapting TCP splicing for seamless backend server failover, allowing transparent redirection of client requests to an alternate backend server.
2. Introducing and integrating concepts of request transactionalization, tagging, and logging to support fast failover and seamless recovery.
3. Building and testing a prototype of the complete system architecture in both LAN and WAN (PlanetLab) settings, demonstrating fast failover and seamless recovery with a real-world application (RoundCube Webmail).

The rest of the paper is organized as follows. Section 2 describes the background and related work. Section 3 provides a high-level overview of our system architecture. Section 4 details important components, including TCP re-splicing, transactionalization, and recovery mechanisms. Section 5 discusses the salient features of our prototype implementation. Section 6 presents the performance results of RoundCube Webmail deployed over our architecture under various operating scenarios. Finally, Section 7 concludes the paper and outlines future work.

## 2. Background
### 2.1 TCP Splice
Web proxies are widely used in Web server architectures for content-aware routing, security policies, network management, usage accounting, and Web content caching. An application-level Web proxy is inefficient because it involves transferring data between kernel space and user space, leading to additional context switches. TCP Splice was proposed to enhance the performance of Web proxies by allowing data to be relayed between a client and a server entirely in the kernel, preserving end-to-end TCP connection semantics.

### 2.2 Enhancements to TCP Splice
The traditional TCP splice mechanism has two major drawbacks:
1. All traffic must pass through a proxy, creating scalability and performance bottlenecks.
2. The architecture is not fault-tolerant; if a proxy fails, all spliced TCP connections hosted on it also fail, requiring clients to re-establish HTTP connections and reissue failed requests.

To address these issues, we proposed two enhancements:
1. **Replicated TCP Splice**: Replicating splice state information across multiple proxies allows one TCP connection to use multiple proxies, providing increased scalability and fault tolerance.
2. **Split TCP Splice**: Splitting the TCP splice functionality into two unidirectional splices, with packets in different directions being spliced at different machines, further improves scalability, especially when responses are large.

### 2.3 Related Work
Our architecture is related to FT-TCP, ST-TCP, Backdoors, and similar systems. Unlike these, our architecture does not require a dedicated active backup and can handle non-deterministic applications. Additionally, our architecture does not require specialized hardware or kernel modifications on backend servers.

## 3. System Architecture: An Overview
Figure 1 illustrates the five logical components of our Web server architecture:
1. **Stateless Load Balancers**: Distribute incoming client requests to the proxies.
2. **Proxies**: Perform layer 7 routing, TCP splicing, and re-splicing during recovery.
3. **Backend Servers**: Process client requests, send back responses, and asynchronously send application session state information to alternate backend servers.
4. **Loggers**: Transparently log traffic, parse requests and responses into tagged transactions, detect backend server failures, and assist in recovery.
5. **Auxiliary Servers**: Additional servers that backend servers may contact for processing client requests.

### Stateless Load Balancers
Stateless load balancers distribute incoming client packets among the proxies. They are completely stateless, making fault tolerance simple to implement. The load balancer can be co-resident at a layer 2 switch or an IP router.

### Proxies
For new connections, a proxy performs layer 7 routing and TCP splicing, and replicates the TCP splice among all proxies. Subsequent client requests can be handled by any proxy. Proxy failures are easily managed by ceasing to send packets to the failed proxy. In this paper, we extend the role of proxies to assist in backend server recovery by participating in state synchronization and re-splicing the client TCP connection to an alternate server.

### Backend Servers
A backend server processes client requests and may need to contact auxiliary servers for additional processing. Each transaction is assigned a unique ID, computed from the client's IP address, port number, and the ordinality of the transaction on that connection.

### Loggers
To facilitate seamless recovery, IP packets are logged at two points: between a proxy and a backend server (front-end logger) and between a backend server and an auxiliary server (aux logger). A single physical logger can be used for both locations. In addition to logging, loggers perform other important functions, such as parsing requests and responses into tagged transactions and assisting in backend server recovery.

This architecture ensures that server failures are handled seamlessly, providing a better user experience and minimizing the impact of low-availability commodity servers.