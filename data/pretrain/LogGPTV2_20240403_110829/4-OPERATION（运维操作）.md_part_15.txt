#-d 是放在后台运行
#-r 是要共享的目录\
备注：启动服务也可以使用svnserve
-d启动，但客户端访问时需要指定绝对路径（svn://服务器IP/var/svn/project）。
\[root@web1 \~\]# svnserve -d -r /var/svn/project
\[root@web22 \~\]# svn co svn://192.168.2.100/ code
\[root@web1 \~\]# svnserve -d
\[root@web22 \~\]# svn co svn://192.168.2.100/var/svn/project/ code
## 步骤二：客户端测试(192.168.2.200)
### 1）将服务器上的代码下载到本地
\[root@web2 \~\]# cd /tmp
\[root@web2 \~\]# svn \--username harry \--password 123456 \\
co svn://192.168.2.100/ code
#建立本地副本,从服务器192.168.2.100上co下载代码到本地code目录(code自动新建)
//用户名harry,密码123456
Store password unencrypted (yes/no)? yes //提示是否保存密码
### 2) 上传修改过的文件:
\[root@web2 \~\]# cd /tmp/code
\[root@web2 code\]# ls
\[root@web2 code\]# vim user.slice //挑选任意文件修改其内容
\[root@web2 code\]# svn ci -m \"modify user\"
//将本地修改的数据同步到服务器
### 3) 查看:
\[root@web2 code\]# svn update //将服务器上新的数据同步到本地
\[root@web2 code\]# svn info svn://192.168.2.100 //查看版本仓库基本信息
\[root@web2 code\]# svn log svn://192.168.2.100 //查看版本仓库的日志
### 4) 将新文件加入版本控制:
\[root@web2 code\]# echo \"test\" \> test.sh //本地新建一个文件
\[root@web2 code\]# svn ci -m \"new file\" //提交失败，该文件不被svn管理
\[root@web2 code\]# svn add test.sh //将文件或目录加入版本控制
\[root@web2 code\]# svn ci -m \"new file\" //再次提交，成功
\[root@web2 code\]# svn mkdir subdir //创建子目录
\[root@web2 code\]# svn rm timers.target //使用svn删除文件
\[root@web2 code\]# svn ci -m \"xxx\" //提交一次代码
\[root@web2 code\]# vim umount.target //任意修改本地的一个文件
\[root@web2 code\]# svn diff //查看所有文件的差异
\[root@web2 code\]# svn diff umount.target //仅查看某一个文件的差异
\[root@web2 code\]# svn cat svn://192.168.2.100/reboot.target
//查看服务器文件的内容
### 5) 对比文件的不同小方法:
\[root@Web222 code\]# svn diff
#查到svn服务器zram.service文件与本机有不同
Index: zram.service
===================================================================
\-\-- zram.service (版本 3)
+++ zram.service (工作副本)
@@ -12,3 +12,4 @@
new 16:40
new 18:04
+18:09
#查看svn服务器zram.service文件具体内容
\[root@Web222 code\]# svn cat svn://192.168.2.100/zram.service
\[Unit\]
Description=Service enabling compressing RAM with zRam
ConditionKernelCommandLine=!inst.zram=off
ConditionKernelCommandLine=!inst.zram=0
\[Service\]
Type=oneshot
ExecStart=/usr/libexec/anaconda/zramswapon
ExecStop=/usr/libexec/anaconda/zramswapoff
RemainAfterExit=yes
new 16:40
new 18:04
\[root@Web222 code\]# cat zram.service #查看本机zram.service文件具体内容
\[Unit\]
Description=Service enabling compressing RAM with zRam
ConditionKernelCommandLine=!inst.zram=off
ConditionKernelCommandLine=!inst.zram=0
\[Service\]
Type=oneshot
ExecStart=/usr/libexec/anaconda/zramswapon
ExecStop=/usr/libexec/anaconda/zramswapoff
RemainAfterExit=yes
new 16:40
new 18:04
18:09 #不同之处
\[root@web2 code\]# sed -i \'d\' tmp.mount
//删除文件所有内容，但未提交
\[root@web2 code\]# svn revert tmp.mount
已恢复"tmp.mount"
//还原tmp.mount文件
\[root@web2 code\]# rm -rf \*.target
//任意删除若干文件
\[root@web2 code\]# svn update
//还原
\[root@web2 code\]# sed -i \'1a #test###\' tuned.service
//修改本地副本中的代码文件
\[root@web2 code\]# svn ci -m \"xxx\"
//提交代码
\[root@web2 code\]# svn merge -r7:2 tuned.service
//将文件从版本7还原到版本2
### 6) 使用svn命令测试svnserver服务时可以使用的命令列表如表-1所示。
![table001 (2)](media/image28.png){width="4.194444444444445in"
height="2.4916666666666667in"}
# 2 案例2：使用Subversion协同工作
### 2.1 问题
> 沿用练习一，通过svn工具，对subversion版本库进行多人协同工作测试，要求如下：
-   该版本库支持多个账户同时协作编辑文件
-   测试演示多人协作编辑的具体操作
-   手动解决版本冲突问题
-   备份版本库数据
-   注册使用Github
### 2.2 方案
> 使用svn客户端工具连接subversion服务器并测试多人协同工作以及如何手动解决冲突问题，账户名称分别为harry和tom，最后使用svnadmin
> dump指令对版本库进行备份工作。
## 步骤一：多人协同工作
### 1)模拟两个终端
下载代码本地副本，注意
web1(192.168.2.100)用tom登录svn
web2（192.168.2.200)用harry登录svn
web1和web2代表了两个不同的主机，看清楚操作是在哪一台计算机上执行！
\[root@web1 \~\]# cd /tmp
\[root@web1 \~\]# svn \--username tom \--password 123456 \\
\> co svn://192.168.2.100/ code
\[root@web2 \~\]# cd /tmp
\[root@web2 \~\]# svn \--username harry \--password 123456 \\
\> co svn://192.168.2.100/ code
\[root@web1 \~\]# cd code
\[root@web2 \~\]# cd code
### 2) harry和tom修改不同的文件的情况
\[root@web1 mycode\]# sed -i \"3a ###tom modify#####\" tmp.mount
\[root@web1 mycode\]# svn ci -m \"has modified\"
\[root@web2 mycode\]# sed -i \"3a ###harry modify#####\" umount.target
\[root@web2 mycode\]# svn ci -m \"has modified\"
\[root@web2 mycode\]# svn update
\[root@web1 mycode\]# svn update
### 3) harry和tom修改相同文件的不同行
\[root@srv5 \~\]# cd harry
\[root@web1 mycode\]# sed -i \"3a ###tom modify#####\" user.slice
\[root@web1 mycode\]# svn ci -m \"modified\"
\[root@web2 mycode\]# sed -i \"6a ###harry modify#####\" user.slice
\[root@web2 mycode\]# svn ci -m \"modified\" //提交失败
Sending svnserve
Transmitting file data .svn: Commit failed (details follow):
svn: File \'/user.slice\' is out of date（过期）
\[root@web2 mycode\]# svn update //提示失败后，先更新再提交即可
\[root@web2 mycode\]# svn ci -m \"modified\" //提交成功
Sending user.slice
Transmitting file data .
### 4) harry和tom修改相同文件的相同行
\[root@web1 mycode\]# sed -i \'1c \[UNIT\]\' tuned.service
\[root@web1 mycode\]# svn ci -m \"modified\"
\[root@web2 mycode\]# sed -i \'1c \[unit\]\' tuned.service
\[root@web2 mycode\]# svn ci -m \"modified\"
Sending tuned.service
Transmitting file data .svn: Commit failed (details follow):
svn: File \'/tuned.service\' is out of date(过期)
\[root@web2 mycode\]# svn update //出现冲突，需要解决
Conflict(冲突) discovered in \'tuned.service\'.
Select: (p) postpone, (df) diff-full, (e) edit,
\(mc\) mine-conflict, (tc) theirs-conflict,
\(s\) show all options:p //选择先标记p，随后解决
\[root@web2 mycode\]# ls
tuned.service tuned.service.mine tuned.service.r8 tuned.service.r7
### 5)查看和解决冲突文件:
#tuned.service #什么都没有,只是显示两个冲突的不同
\[root@Web222 code\]# head -4 tuned.service
\ project.bak //备份
\* Dumped revision 0.
\* Dumped revision 1.
\* Dumped revision 2.
\* Dumped revision 3.
\* Dumped revision 4.
\[root@web1 \~\]# svnadmin create /var/svn/project2 //新建空仓库
\[root@web1 \~\]# svnadmin load /var/svn/project2 \< project.bak //还原
## 步骤三：注册使用Github(非常重要的)
git(分布式版本控制软件)
1.登陆网站https://github.com，点击Sign up（注册），如图-1所示。
2.填写注册信息（用户名，邮箱，密码），如图-2所示。
3\. 初始化操作，如图-3和图-4所示。
注意，初始化完成后，到邮箱中去激活Github账户。
4\. 创建仓库、使用仓库
点击Start a project（如图-5所示），
填写项目名称（项目名称任意），如图-6所示。
往仓库中上传文件或新建文件，如图-7所示
下载仓库中的代码，如图-8所示。
5\. 命令行操作（需要联网的主机，如真实机）
\[root@pc001 \~\]# yum -y install git
\[root@pc001 \~\]# git clone https://github.com/账户名称/仓库名称
#clone指令用于将服务器仓库中的资料打包下载到本地
\[root@pc001 \~\]# cd 仓库名称
\[root@pc001 \~\]# 任意修改文件，或新建文件
\[root@pc001 \~\]# git add . #.代表自己识别新文件并全部添加到git
#add添加新文件
\[root@pc001 \~\]# git commit -m \"test\"
#提交到本机服务器,未提交到github.com
\[root@pc001 \~\]# git push #提交到github.com
#commit和push实现提交代码的功能
\[root@pc001 \~\]# git pull
#pull更新，类似于svn update
# 3 案例3：制作nginx的RPM包
### 3.1 问题
本案例使用nginx-1.12.2版本的源码软件，生成对应的RPM包软件，具体要求如下：
软件名称为nginx
软件版本为1.12.2
RPM软件包可以查询描述信息
RPM软件包可以安装及卸载
### 3.2 方案
安装rpm-build软件包，编写SPEC配置文件，创建新的RPM软件包。
配置文件中的描述信息如表-2：
![table002](media/image29.png){width="5.6097222222222225in"
height="1.8631944444444444in"}
## 步骤一：安装rpm-build软件
### 1）安装rpm-build软件包
\[root@web1 \~\]# yum -y install rpm-build
### 2）生成rpmbuild目录结构