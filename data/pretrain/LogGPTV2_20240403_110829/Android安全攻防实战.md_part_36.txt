add sp, #20
84d2: bd00
pop (pe)
84d4: 0000154a
andeq z1, r0, sl, asr #10
000084d8 :
84d8: b508
push [r3, lr)
84da: 6848
1dr r0, [x1, 4]
84de: f7ff ffee
b1 84bc 
84e0: 2000
movs z0, #0
84e2: bd08
pop (x3, pc)
图 8.17
请注意，这里已经没有了上个版本中，我们刚讨论过的那些指令了。这是因为
我们去掉的-fstack-protector编译标志位，它的作用就是告诉GCC，要自动地寻找任
何可能破坏函数栈的情况。（一—而现在它没了！）
拓展阅读
·在ARM信息中心可查阅到ARMand Thumb指令系统简明资料htp:/infocenter.
arm.com/help/topic/com.amm.doc. qrc0001/QRC0001_UAL. pdf。
·ARM指令系统文档可至http:/simplemachines.it/doc/arm_inst.pdf查阅。
·密歇根大学电气工程和计算机科学系制作的ARMv7-M架构参考手册可至
http:/web.eecs.umich.cedu/~prabal/tcaching/ccs373-f1 0/readings/ARMv7-M_ARM.
pdf查阅。
·EmanueleAcri编写的开发Arm Linux系统入门可至http:/www.exploit-
db.com/ wp-content/themes/exploit/docs/16151.pdf 查 间 。
·ARM架构文档的程序标准可至http:/infocenter.arm.com/help/topic/com.arm.
doc.ihi0042e/IH10042E_aapcs.pdf查阅。
·ARM指令系统文档可至http:/bear.ces.cwru.edu/eecs_382/ARM7-TDMI-
manual-pt2.pdf 查阅。
·ARM信息中心制作的ARM开发套件1.2版本汇编程序指南可至htp:/infocenter.
arm.com/help/topic/com.arm.doc.dui0068b/DU10068.pdf 查]
248
---
## Page 267
第8章原生代码中漏洞的利用与分析
·Android platform GitHub上的 DLMalloc 实现库页面可至https:/github.com
android/platform_bionic/blob/master/libc/upstream-dlmalloc/malloc.c f (] 。
• Android platform Bionic GitHub 上 DLMalloc 调用 ok_magic 页ifio至 https:/github.
com/android/platform_bionic/blob/master/libc/upstream-dlmalloc/malloc.c#L4715 f
阅。
·Android源代码仓库中的 Bionic源代码可至 htps://android.googlesource.com/
platform/bionic/查阅。
•DLMalloc.c，Android官方GitHub源码仓库中Android platfomm Bionic jb-mr0-relcase
u3https:/android.googlesource.com/platform/bionic/+/jb-mr0-release/libc/bionic/
dmalloc.c食姆
8.4利用竞争条件引发的漏洞
在Android平台上，竞争条件会引发不少问题和提权攻击，其中有许多能让恶意
攻击者获得root权限。
从本质上讲，竞争条件问题是当进程运行在使用抢占式进程调度系统的多线程
系统（允许多个进程同时运行的平台）中时，由于缺乏强制互斥条件（enforcedmutual
exclusion）而引发的。抢占式调度允许任务调度器强制中断一个正在运行中的线程或
进程，也就是说，不用等到被中断进程准备好，就可以中断其运行。这就会产生竞
争条件问题，因为开发人员无法不让进程调度器以这种任意的或不可预测测的方式
中断正在运行中的应用程序。结果，那些依赖于访问诸如文件、环境变量或共享内
问权。攻击者通过抢先获得这些资源的访问权并改写资源内容的的方式，滥用这一
情景，就能达到破坏进程的操作或恶意影响进程行为目的。举个简单的例子：某个
程序验证用户的方式是把所有已经认证的用户全部列在某个文件中。但这一操作方
式不能适应抢占式任务调度，因为程序访问该文件之前，它可能已经被攻击者修改
过了，把（未经认证的）他/她的名字加到了列表里，这样他/她就会被认为是认证用
户了。
在这个实验中，我会详解一些基本的竞争条件漏洞，并讨论其他可能的成因。
我也会详细介绍一些最基本的竞争条件漏洞的利用方法。本实验的最后我还给出了
一些关于Android平台上竞争条件漏洞的很有用的参考资料和文献，其中大部分都是
在编写本书的这一年发表的。
249
---
## Page 268
Android安全攻防实战
竞争条件漏洞的利用取决于以下因素，即攻击者必须至少具备以下条件。
·能访间存在漏洞的进程所要竞争访问的资源：即使一个进程并未强制要求互
斥地访问它的外部资源，但却能让攻击者无法访问到这些资源的话，那还是
不会引发这些潜在的漏洞的。如果不是这样的话，进程里每个不使用互斥体
的独占式访问就都可以利用了。但是我们知道，进程不检查信号量或自旋锁
就直接使用某个指针指向的数据的情况，每秒钟都会发生几百万次！
·恶意改变这些资源：如果一个进程是在一个攻击者无法增加或恶意修改相关
资源的环境中，未互斥地访问它的资源的话，这种漏洞也是没什么用的。例
如，黑客只能以只读权限访问一个进程将要访问的共享内存或文件，那也不
会引起太大的间题一当然除非这会导致有漏洞的进程崩溃，又或者指定的
进程有语义优先（semantic priority）。比如：防病毒程序，IDS，防火墙等。
·使用时间/检查时间（TOU/TOC）的窗口大小：这本质上就是应用程序请求
访问一个资源和实际访间到这个资源之间的时间差，或者更准确地说是调度
中断发生的可能性。竞争条件漏洞的利用非常依赖于这个时间差。因为利用
方法的本质就是在这个时间段内竞争到资源的访问权，以恶意地影响该资源。
考虑到这些情况，让我们来看一些能引发竞争条件漏洞的例子，以及在Android
上如何利用它们。
准备工作
在开始利用竞争条件之前，我们需要准备一个例子。你需要做以下几步。
1.我们要准备一个嵌入式ARMAndroid平台，在它上面引发竞争条件漏洞，在
这个例子中我们用的是JellyBean模拟器。下面的代码详细描述了一个存在
漏洞的进程的行为：
#include 
#include 
#include 
#define MAX_COMMANDSIZE 100
int main (intargc, char *argv[] , char **envp) [
char opt_buf [MAX_COMeANDSIZE] ;
gnqdo = [o)sbze
char *args[2]
rnn -[↑]s6xe
Intopt_int;
①Android 4.1的代号。—译者注
250
---
## Page 269
第8章原生代码中漏洞的利用与分析
const char *command_filename = "/data/race=condition/commands,txt;
FILE *command_file;
printf (*opt.on: ");
opt_int = atoi (gets (opt_buf)) ;
printf ("[*] option ld selected...\n*,opt_int) ;
If (access (command_filename,R_OK|F_OK) == 0) {
 (μu\ **·Aoyo ssaooe[1)zutd
command_fi1e = fopen (command_f11ename, *x*) 
for (;opt_int>0;opt_int--) {
fscanf (command_file, "s°, opt_buf) ;
printf (*[*] executing [%s]...\n*,opt_buf) /
fclose (command_fi1e) ;
)06[9
printf(*[x] access not granted...\n*) ;
int ret = execve (args[0], 5args, (chaz **)NULL) ;
if (ret 1= NULL) (
(900x[x]_) x0.x0
return 0:
1
用“交叉编译原生可执行程序”一节中描述的方法，编译上面这个程序，并
把它部署到你的Android设备上。请把它放在Android系统上一个任何用户
都有读和执行权限的分区或目录中，具体操作方法，请参考第1章“Android
样，在这个实验里，我们使用的是mount在/system上的这个分区，它已经以
读和写权限重新mount了。请注意，这可能会导致NDK产生一系列警告，
但只要能顺利编译生成可执行文件，你就大可不必为此担心！
2.你还要把commands.txt文件放入在代码中指定的目录（即/data/race-
condition/command.txt）中。这得在/data 目录下创建个名为“race-condition”
当时我们曾用类似的方法安装过TCPdump，那是个非常好的例子。
3.你要在Android 设备上给这个可执行文件设置 setuid 权限。在把它复制到设
备里之后，执行下面这条命令即可。
chmod 4711 /system/bin/zace=condition
这条命令还使系统上的任何用户对这个文件都拥有了执行权限。需要注意的
251
---
## Page 270
Android安全攻防实战
是，执行这条命令必须要有root权限。我们将用它来模拟一个拥有setuid权
限的二进制可执行文件可能造成的影响，以及它是怎么导致执行任意代码
的。
我们已经备齐了利用漏洞所需的一切，接下来就该详细演示一下这个漏洞怎么
利用了。
怎么做.…
利用这个有漏洞的二进制可执行文件的步骤如下。
1.在Android设备上运行ADB shell。如果你使用的是模拟器或已经root了的设
备，你可以用su命令来获取其他应用程序的访问权限。尝试访问一些你没有
执行、读取或写入权限的，属于root的文件夹和文件。这里，我选择以用户
10170为例，你可以看到：试图访间/cache/目录时，系统抛出了一个无权访
问的消息，如图8.18所示。
2|root@a
图 8.18
2.让我们来利用race-condition 这个二进制可执行文件。我们先要向commands.txt
文件中写入一些命令，我们的目标是要把“/system/bin/sh”（执行这条命令将
为我们打开一个shell）写进commands.txt。执行下面这条命令，以完成这一
任务。
echo */system/bin/sh* >> /data/race-condition/commands txt
“/system/bin/sh”现在是commands.txt文件中的最后一行。也就是说，如果我
们要从race-condition的菜单中选择执行它，要求输入option时，应该填上5，
如图8.19所示。
SEotnanus.txt
Foot(android:/data/race-condition$
bin/sh
图 8.19
252
---
## Page 271
第8章原生代码中漏润的利用与分析
3.在Android 设备上执行race-condition，并在要求输入option 时输入5.这个
有漏洞的二进制可执行文件会去执行sh命令并给你root权限。
4.把目录切换到/cache，来试试你是不是真有root权限了。如果你运行的是Jelly
Bean或更高版本的Android系统，你应该不会看到无权访问的消息，这也就
意味着你的权限已经提升到了root！如图8.20所示。
ption:5
option 5 selected...
，
access okay..
[·]executing[/system/bin/sh]...
cd /cache/
cache
图 8.20
上面这个例子是专门设计来详细解释关于竞争条件的最基本概念的，即，一个
应用程序修改一个其他任何进程都能修改的文件，并通过它（这个文件）可以像root
用户一样执行操作。还有些更复杂和微妙的情况会引发竞争条件，其中一种常见的
利用方式涉及符号链接。漏洞源于应用程序是无法判别一个文件是不是符号链接这
个问题的。这使得攻击者可以通过一个精心构造的符号链接或当要通过符号链接或
硬链接读一个文件，但却无法确认链接目标的真实性（这意味着可以对链接进行恶
意重定向）的时候，对文件的内容进行修改。要了解更多关于当前竞争条件漏洞的
例子，请参考“拓展阅读”一节中给出的文献。
拓展阅读
●CVE-2013-1727漏 润摘要的文章在http://web.nvd.nist.gov/view/vuln/detail?
vulnldCVE-2013-1727&:cid8。
●CVE-2013-1731漏洞摘要的文章在http:/web.nvd.nist.gov/view/vuln/detail?
vulnldCVE-2013-1731&:cid8。
·文章Sprite Sofnware Android Race Condition 作者：Justin Case 在 http:/ packet-
stormsecurity.com/files/122145/Sprite-Software-Android-Race-Condition.html
·文章Race Condinion Eplois （竞争条件漏洞的利用方法）作者：PrabhakerMateti 在
http://cecs.wright.edu/~pmateti/IntemetSecurity/ Lectures/ RaceConditions/ index.
html.
253
---
## Page 272
Android安全攻防实战
8.5栈溢出漏洞的利用
栈溢出未必是Android 中出现最多的 bug和安全漏润，但即使在诸如 ASLR、
StackGuard和 SE Linux 的保护下，这种类型的内存崩溃bug 仍可能影响Android 原
生可执行文件。此外，目前大多数的Android市场份额仍被叫做2.3.3Gingerbrcad设
备的这类缺乏强有力的栈和其他类型的内存溢出问题保护机制的设备所占据。除了
它直接与安全研究有关之外，我们在这里专辟一个实验来讨论栈溢出漏洞的利用的
另一个重要原因是一它是通往更高级的漏洞利用技术的必经之路。
在本节中，我们将详细介绍如何利用一个常见的栈溢出漏洞，以达到控制执行流
的目的。
准备工作
在开始前，你需要准备一个有漏洞的可执行文件。具体步骤如下。
1.创建一个含有JINI文件夹的目录，相关命名约定同之前的实验。如果你需要
回顾一下，可以翻阅本章中“交叉编译原生可执行程序”这个实验。
2.把以下代码写入jni文件夹中的.c文件中。
include 
include 
void
vulnerable (char *src) {
char dest[10]; //declare a stack based buffer
strcpy (dest,src) : //alway8 good not to do bounds checking
printf ("[ls]\n", dest): //print che result
return;}
int
main (int argc, char **argv) (
vulnerable (argv [1]) ; //ca11 vulnerable funct.Lon
printf (*you 1ose... \n*) /
return (0): )
这个代码显然与之前示例代码很相似。实际上它们只差了几行，你甚至可以
直接修改之前的示例代码。
3.像再上一个实验里那样，用ndk-build脚本编译这段代码。
4.将代码部署到一个Android 设备或模拟器上。在下面的例子里，我使用的是
个Android 4.2.2模拟器。
254
---
## Page 273
第8章原生代码中漏润的利用与分析
所有的代码都设置完毕之后，你就可以把二进制可执行文件push到你的模拟器
或设备中了。准备好接受挑战了吗？
如何做
你需要通过以下几步完成对栈溢出的利用。
1.在模拟器上不断地运行你的程序，每次给它一个更大的输入直到它不能正常