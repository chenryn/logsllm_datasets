0
Origin-sensitive
Reduce by
EC L
427
21
42
1
2
4
10
0
88%
22%
90%
99%
95%
10%
Table 1: Eﬀectiveness of hybrid origin sensitivity in reducing the largest EC size (EC L ) as compared to call-site sensitivity
(that reaches the ICT); while CS adds extra information to Io
to separate diﬀerent origins. We use call sites here because
they can be directly fetched from the shadow stack in the user
space. Other execution contexts such as last-branch record
and processor trace can only be accessed in the kernel.
Interestingly, the addition of call sites does NOT make the
context for virtual calls more powerful. The origin of a virtual
call is where the constructor of the receiving object is called.
C++’s constructors cannot be called virtually or indirectly.3
As such, a call to the constructor can create an object of just
one class. There is no ambiguity in the class created, hence no
ambiguity in the virtual functions. As such, we keep using the
object construction site alone as the origin for virtual calls.
Table 1 demonstrates the hybrid origin sensitivity’s capa-
bility in reducing the largest EC size as compared to call-site
sensitivity [21]. Speciﬁcally, we run and recorded the com-
plete execution history of all the C/C++ benchmarks in SPEC
CPU2006. We then parsed the history to construct the CFGs
for origin and call-site sensitivity. For example, 1-call-site
sensitivity uses the most recent return address as the context.
For each ICT, we grouped the recorded targets by the last
return addresses. Each group was an EC. We report the largest
EC sizes in Table 1 for all the benchmarks having the largest
EC size greater than or equal to 10 (ten other benchmarks have
less than 10 targets for every ICT). The table shows that origin
sensitivity consistently out-perform call-site sensitivity. Partic-
ularly, we can reduce the largest EC size of 471.omnetpp by
99%, from 168 to 2. Neither call-site nor origin sensitivity is
eﬀective to 445.gobmk because it contains a loop over a large
static array of function pointers (the owl_defendpat array).
403.gcc similarly has a large array (operand_data) used
in a recursive function (expand_complex_abs). Common
CFI policies cannot handle such cases because there is not
suﬃcient information in the control ﬂow to separate these
targets apart. A similar case is shown in Fig. 4 of Section 4
with the code snippet.
3Bjarne Stroustrup’s C++ Style and Technique FAQ: “To create an object
you need complete information. In particular, you need to know the exact
type of what you want to create. Consequently, a ‘call to a constructor’ cannot
be virtual.” [8].
3 System Design
In this section, we present the design of our LLVM-based
prototype OS-CFI system in detail.
3.1 Overview
Since its inception, many CFI systems have been proposed. To
separate OS-CFI from the existing work, we have the following
requirements for its design:
• Precision: OS-CFI must improve the security by reducing
the average and largest EC sizes. Large ECs are the weakest
link in a CFI system since they provide the most leeway in
“bending” the control ﬂow within the CFI policy
• Security: context-sensitive CFI systems, including OS-CFI,
have more complex reference monitors to collect and main-
tain the contextual information. As such, we must protect
both the contextual data and the (temporary) data used by
reference monitors.
• Performance: high performance overhead can severely
limit the application of any defense mechanism. OS-CFI
must have strong performance relative to the native system.
• Compatibility: OS-CFI must support both C and C++ pro-
grams. As previously mentioned, any defense for C++ pro-
grams must protect both virtual calls and C-style ICTs.
A CFI system consists of three major components: the CFI
policy, the CFG generation, and the enforcement mechanism.
OS-CFI enforces an adaptive CFI policy that applies either
origin or call-site sensitivity for each ICT and adopts the
shadow stack to protect returns. OS-CFI’s CFG is generated
with a precise context-, ﬂow-, and ﬁeld-sensitive static points-
to analysis [36].4 The enforcement mechanism of OS-CFI uses
the hash-table based set-membership test with the hardware
acceleration for metadata storage. Next, we describe each
component in detail.
4Context sensitivity in the points-to analysis is, more precisely, call-site
sensitivity. It is named as is for the historical reasons.
198    28th USENIX Security Symposium
USENIX Association
3.2 OS-CFI Policy
OS-CFI features an adaptive CFI policy [21] that applies either
origin or call-site sensitivity to an ICT, decided by which one
is more capable in reducing the EC size. If both have the
same eﬀectiveness, we prefer call-site sensitivity because it
has lower overhead. If the EC size is already small without
context, we just enforce the context-insensitive CFI for this
ICT. In addition, call-site sensitivity can use multiple levels
of call sites as the context. More levels generally improve
the security but incur higher overhead. We limit call-site
sensitivity in OS-CFI to at most three call sites. Note that
origin sensitivity itself uses 1-call-site on its origins for C-style
ICTs (Section 2.2).
We adopt this policy to improve the performance without
sacriﬁcing the security: origin sensitivity is a powerful context
that can substantially break down large ECs,but it has to collect
and maintain more metadata at the run-time. On the other hand,
most ICTs in a program have a small number of possible targets.
For example, the largest EC size for 400.perlbench is 173,
but its second largest one is only 18. For small ECs, call-site
sensitivity is mostly suﬃcient. We select call-site sensitivity
as the secondary policy because last-branch registers (LBR)
and processor trace (PT) can only be accessed in the kernel
mode, even though they provide more ﬁne-grained execution
records. Call-sites instead can be directly fetched from the
shadow stack in the user space.
3.3 CFG Generation
A complete and precise CFG is the foundation of any CFI
systems. A CFG must be complete to ensure that the resulting
CFI system has no false positives (valid control ﬂows reported
as invalid). False positives are detrimental to the usability of a
security system. Meanwhile, a precise CFG can reduce false
negatives, making the system more secure. CFGs can have
diﬀerent levels of precision. For example, a CFG that assumes
each ICT can target any address-taken functions is complete
but utterly imprecise. Most CFI systems utilize static points-to
analysis to construct CFGs because such analysis is (suppos-
edly) conservative and the generated CFGs are complete. The
precision of the points-to analysis directly decides the quality
of the generated CFGs. A precise points-to analysis is often
context- and ﬂow-sensitive, such as SUPA [34].
OS-CFI enforces an adaptive CFI policy that combines
call-site and origin sensitivity, which require call-site and
origin-sensitive CFGs, respectively. We represent these CFGs
as a set of tuples:
• Call-site sensitive CFG: each tuple of this CFG has the
following form: (CS1/2/3, Ii, T ). CS represents the callers
of the current function on the call stack. OS-CFI may use
up to three call sites. Ii is the address of the ICT instruction
itself. It is either a C-style ICT or a virtual call. T is the set
of valid targets under this context.
Figure 2: An example featuring C-style ICT and virtual call.
• Origin sensitive CFG for C-style ICTs: each tuple of this
CFG has the form of ((CSo, Io), Ii, T ). (CSo, Io) is the
hybrid origin of the function pointer. In particular, Io is the
USENIX Association
28th USENIX Security Symposium    199
1typedefvoid(*Format)();2classBase{3protected:4Formatfmt;5public:6Base(/*Base_o.vPtr,origin*/){7//store_metadata(Base_o.vPtr,Base::vTavle,8//origin);9}10~Base(){}11virtualvoidset(Formatfp){12fmt=fp;13//store_metadata(fmt.addr,fp.value,14//Base:set_loc1,Base::set_ctx);15}16voidprint(){17//ccall_ref_monitor(fmt.addr,fmt.value);18fmt();19}20};21classChild:publicBase{22public:23Child(/*Child_o.vPtr,origin*/){24//Base(Child_o.vPtr,origin);25//store_metadata(Child_o.vPtr,Child::vTable,26//origin);27}28~Child(){}29voidset(Formatfp){30fmt=fp;31//store_metadata(fmt.addr,fp.value,32//Child::set_loc1,Child::set_ctx);33}34voidprint(){35//ccall_ref_monitor(fmt.addr,fmt.value);36fmt();37}38};39voidexec(){40Base*bp=newBase();//callconstructor41//vcall_ref_monitor(Base_o.vPtr,42//Base::vTable,Base::set())43bp->set(&targetA);44bp->print();4546Childci;//callconstructor47ci.set(&targetB);48ci.print();4950bp=&ci;51//vcall_ref_monitor(Child_o.vPtr,52//Child::vTable,Child::set())53bp->set(&targetB);54bp->print();55}last store to the related function pointer; while Ii is where
the function pointer is actually called.
• Origin sensitive CFG for virtual calls: each tuple of this
CFG has the form of (Io, Ii, T ). Io is the location where
the receiving object of a virtual call is constructed.
We use the C++ code in Fig. 2 to illustrate how the CFGs
are generated (and later enforced). There are two classes,
Base and Child. Child inherits Base. Base has a protected
function pointer fmt that can only be set by virtual function
set. fmt is called indirectly by the print function, which is
overloaded in Child. As such, this example has both C-style
ICTs (Line 18 and 36) and virtual calls (Line 43 and 53).
Our CFG construction algorithm is based on SVF, a static
tool that “enables scalable and precise inter-procedural depen-
dence analysis for C and C++ programs” [36]. SVF constructs
a whole-program sparse value-ﬂow graph (SVFG) that con-
servatively captures the program’s def-use chains. SVFG is
imprecise because it overestimates the points-to sets when
constructing the def-use chains. SUPA is a client of SVF. It
is an on-demand context-, ﬂow-, and ﬁeld-sensitive points-to
analysis based on the SVFG. It improves the precision by
reﬁning away imprecise value-ﬂows in the SVFG with strong
updates [34]. Our CFGs are constructed on top of the reﬁned
SVFG of SUPA.
SUPA is a demand-driven points-to analysis. It traverses
the program’s SVFG reversely to compute the points-to sets.
OS-CFI queries SUPA for every ICT in the program. In
response, SUPA starts traversing the def-use chains to solve
the request. OS-CFI piggybacks on SUPA during this traversal.
Speciﬁcally, OS-CFI monitors the traversed nodes to identify
the origin of the ICT. When SUPA stops the traversal, it has
located the targets of the ICT, and OS-CFI has collected all
the elements required to generate the tuples for the ICT. Next,
we describe how OS-CFI generates the related tuples for the
indirect calls in Fig. 2 since they are the more complex cases.
In Fig. 2, Base has a protected member function pointer fmt,
which is called by Base.print and Child.print. Therefore,
OS-CFI requests SUPA to resolve the points-to set for both
uses of fmt. We describe the resolution of the ﬁrst call to fmt
by Base.print here. This indirect call to fmt is actually a
use of the fmt ﬁled of the this object. SUPA can create a
def-use chain from Line 18 to the assignment of the fmt ﬁeld
at Line 12 because it is ﬁeld-sensitive. This def-use chain is
linked by the bp pointer created at Line 40. When traversing
this def-use chain, OS-CFI marks the ﬁrst store to fmt as
the origin for the ICT. The traversal continues until SUPA
has reached the call to the set function at Line 43. OS-CFI
then marks Line 43 as the call-site for the origin. Now, SUPA
has located the target of fmt (targetA). Note that SUPA is
precise enough to exclude targetB from the points-to set
of fmt at Line 18. The CFG tuple for Line 18 is ((Line 43,
Line 12), Line 18, targetA). Tuples for other CFGs can be
similarly constructed.
3.4 Enforcement Mechanism
Overview: we use a hash-table based set membership test to
enforce the OS-CFI policy. Speciﬁcally, we create a hash table
for each CFG and instrument the program (at the LLVM IR
level) to collect the run-time metadata at the origins. OS-CFI
veriﬁes the targets at each ICT site by searching the hash table
for matches. As mentioned before, the CFGs are encoded as
tuples. The hash function simply takes each element of the
tuple and xor them together. It is extremely fast and leads
to few conﬂicts in practice. The hash function can be easily
replaced if necessary.
In this section, we will describe the instrumentation in detail.
Note that OS-CFI adopts both call-site and origin sensitivity.
The context for the former is the return addresses on the call
stack, which can be fetched from the shadow stack at the ICT
sites. As such, call-site sensitivity is enforced (instrumented)
only at the ICT sites. However, we need to instrument both
the origin and ICT sites for origin sensitivity.
Instrumentation at Origin Sites
3.4.1
OS-CFI has diﬀerent origins for C-style ICTs and virtual calls.
We describe them separately.
C-style ICTs: the origin for this type of ICTs is deﬁned
as (CSo, Io). Io is the address of the origin (i.e., the in-
struction that last writes to the function pointer), and CSo
is the most recent return address on the call stack. Since we
are instrumenting the origin, Io is a known constant. CSo
can be retrieved directly from the shadow stack. To store the
metadata, we use the address of the function pointer as the
key and the context, (CSo, Io), as the value. At the ICT site,
we can recover the context with the function pointer address.
Fig. 2 has been annotated with the calls to store metadata at
Line 13 and 31 for Base.fmt function pointer.
Virtual calls: the origin for virtual calls is the location
where the object is created (Io). Io is also a known constant
at the origin site. To store this metadata, we use the object’s
vPtr pointer address as the key and Io as the value. In C++,
every object with virtual functions has a hidden member
named vPtr that points to its vTable. vTable is used by the
compiler for dynamic dispatching of virtual function calls. It
is a table of virtual function pointers. Each virtual function
of a class has a ﬁxed oﬀset in vTable. A virtual call is thus
compiled as an indirect call to the corresponding entry in
vTable. Initially, a sub-class inherits its base class’ vTable.
If the sub-class overrides a virtual function, it sets the related
function pointer in vTable to its own function’s address.
Consequently, the virtual call can call either the base or sub-
class’ virtual function, decided by the class of the receiving
object. COOP attacks essentially compromise the binding of
vPtr and vTable [32]. After an object is created, its vTable
will not be changed.
The reason we use vPtr’s address as the key (instead of
the base address of the object, even though they both can
200    28th USENIX Security Symposium
USENIX Association
uniquely identify the object) will be clariﬁed as we discuss
the metadata storage. The instrumentation is added to each
class’ constructor so that we only need to insert the code
once (instead of once at each location where the constructor
is called). Line 7 and 25 of Fig. 2 show the added code. We
simply pass the origin from the object allocation site to the
constructor as a hidden parameter. Note that the constructor
of a sub-class calls the constructor of its base classes ﬁrst. We
thus add the code near the end of the constructor so that the
metadata will not be mistakenly overwritten.
Metadata storage: the storage of the contextual informa-
tion (i.e., the metadata) is a key design component of OS-CFI.
The metadata of OS-CFI is organized as (key, value) pairs.
The key is the address of the function pointer or the receiving
object’s vPtr pointer. The value is the origin associated with
the key. We store the (key, value) pair at each origin site, and
query the storage with the same key to retrieve the origin
information at each ICT site. The performance and security of
the storage is critical to OS-CFI. In our prototype, we uniquely
(ab)use the hardware-based bound table of Intel MPX for
metadata storage [18].
MPX is a hardware-based bound check system. With the
support of the compiler, run-time, and kernel, MPX can check
the bounds of memory access to prevent memory errors, such
as buﬀer overﬂows and over-reads. However, whole program
bound check is hard to implement correctly and eﬃciently,
even with the hardware support [26]. In fact, the MPX support
will be removed from GCC in version 9.0, after it was just
integrated in 5.0 [27]. This leaves the whole MPX hardware
free-to-use by OS-CFI and other (security) systems.
Figure 3: MPX operations, from Intel’s manual [30]
MPX ’s bound table is indexed by the address of a pointer
(i.e., the key). Each key has its own unique bound table
entry, which consists of the content of the pointer, the upper
bound, and the lower bound. The bound table is organized
and operates like a two-level page table, as shown in Fig. 3:
the bounds directory points to the second-level bounds tables;
each bounds table contains a number of bound entries. The
pointer address is divided into two indexes. To locate a bound
entry, MPX ﬁrst indexes into the bounds directory to retrieve
the base of the related bounds table, and then uses the second
index to locate the related bound entry. If a bounds table does
not exist, the kernel allocates a new one and links it to the
bounds directory. The base of the bounds directory is stored
in a special register, BNDCFGx, inaccessible to the user space.
We can store all the origins in the MPX bound table. Even
though we are supposed to store the lower and upper bounds
in this table, the hardware does not perform any validations
on the bounds, as conﬁrmed by both the oﬃcial document
and our experiments. Accordingly, we can store and retrieve
arbitrary numbers in the bounds (after doing some simple
calculations on these two numbers). This design not only
signiﬁcantly accelerates the access of the metadata but also
improves the security: the MPX table stores the content of the
key along with the bounds. When querying the table for a key,
we need to provide the pointer’s address and its content. If the
provided pointer content mismatches that in the table, MPX
will return an error. Therefore, we can detect any manipulation
of these pointers, after they have been stored, without the extra
performance penalty.
For virtual calls, OS-CFI uses the address of the receiving
object’s vPtr pointer, which points to the object’s vTable, as
the key. As such, OS-CFI can readily detect any COOP attack,
which compromises the object’s vPtr pointer [32], similar
to how object-type integrity (OTI [4]) works. Note that OTI
is not a complete protection for C++ virtual calls because
the attacker can still call the “correct” virtual functions of
an unintended object. In contrast, OS-CFI provides more
comprehensive and complete protection for C++ programs
because it not only enforces the precise CFI but also protects
both virtual calls and C-style ICTs.
OS-CFI can use other keys for the virtual call. For example,
it can use the address of the object itself as the key and a
constant number as its content. We can retrieve the origin from
the MPX table by this key and its “content”, and then enforce
the CFI against the unique target decided by the origin. This
is because the origin (i.e., the location where the receiving
object is constructed) identiﬁes the exact class of the object,
hence the unique target of the virtual call (Section 2.2). Our