3
(1 row)
This behavior is compatible with PostgreSQL databases where division involving any
pair of INTEGER, SMALLINT, or BIGINT data types results in truncation of the result.
The same truncated result is returned by Advanced Server when db_dialect is set to
postgres as shown in the previous example.
Note however, that even when db_dialect is set to redwood, only division with a pair
of INTEGER data types results in no truncation of the result. Division that includes only
SMALLINT or BIGINT data types, with or without an INTEGER data type, does result in
truncation in the PostgreSQL fashion without retaining the fractional portion as shown by
the following where INTEGER and SMALLINT are involved in the division:
edb=# SHOW db_dialect;
db_dialect
------------
redwood
(1 row)
edb=# SELECT CAST('10' AS INTEGER) / CAST('3' AS SMALLINT) FROM dual;
?column?
----------
3
(1 row)
The following table shows the available mathematical functions. Many of these functions
are provided in multiple forms with different argument types. Except where noted, any
given form of a function returns the same data type as its argument. The functions
working with DOUBLE PRECISION data are mostly implemented on top of the host
system‟s C library; accuracy and behavior in boundary cases may therefore vary
depending on the host system.
Table 2-15 Mathematical Functions
Function Return Type Description Example Result
ABS(x) Same as x Absolute value ABS(-17.4) 17.4
CEIL(DOUBLE PRECISION Smallest integer not
Same as input CEIL(-42.8) -42
or NUMBER) less than argument
EXP(DOUBLE PRECISION 2.71828182845904
Same as input Exponential EXP(1.0)
or NUMBER) 52
FLOOR(DOUBLE PRECISION Largest integer not
Same as input FLOOR(-42.8) 43
or NUMBER) greater than argument
LN(DOUBLE PRECISION or 0.69314718055994
Same as input Natural logarithm LN(2.0)
NUMBER) 53
LOG(b NUMBER, x 6.00000000000000
NUMBER Logarithm to base b LOG(2.0, 64.0)
NUMBER) 00
Same as
MOD(y, x) Remainder of y/x MOD(9, 4) 1
argument types
Same as
argument types; If x is null, then NVL
NVL(x, y) NVL(9, 0) 9
where both returns y
arguments are of
Copyright © 2007 - 2018 EnterpriseDB Corporation. All rights reserved. 234
Database Compatibility for Oracle® Developers
Reference Guide
Function Return Type Description Example Result
the same data
type
POWER(a DOUBLE
DOUBLE a raised to the power 729.000000000000
PRECISION, b DOUBLE POWER(9.0, 3.0)
PRECISION of b 0000
PRECISION)
POWER(a NUMBER, b a raised to the power 729.000000000000
NUMBER POWER(9.0, 3.0)
NUMBER) of b 0000
ROUND(DOUBLE PRECISION Round to nearest
Same as input ROUND(42.4) 42
or NUMBER) integer
ROUND(v NUMBER, s Round to s decimal
NUMBER ROUND(42.4382, 2) 42.44
INTEGER) places
SIGN(DOUBLE PRECISION Sign of the argument
Same as input SIGN(-8.4) -1
or NUMBER) (-1, 0, +1)
SQRT(DOUBLE PRECISION 1.41421356237309
Same as input Square root SQRT(2.0)
or NUMBER) 5
TRUNC(DOUBLE PRECISION
Same as input Truncate toward zero TRUNC(42.8) 42
or NUMBER)
TRUNC(v NUMBER, s Truncate to s decimal
NUMBER TRUNC(42.4382, 2) 42.43
INTEGER) places
Return the bucket to
which op would be
WIDTH_BUCKET(op
assigned in an WIDTH_BUCKET(5.35,
NUMBER, b1 NUMBER, b2 INTEGER 3
equidepth histogram 0.024, 10.06, 5)
NUMBER, count INTEGER)
with count buckets,
in the range b1 to b2
The following table shows the available trigonometric functions. All trigonometric
functions take arguments and return values of type DOUBLE PRECISION.
Table 2-16 Trigonometric Functions
Function Description
ACOS(x) Inverse cosine
ASIN(x) Inverse sine
ATAN(x) Inverse tangent
ATAN2(x, y) Inverse tangent of x/y
COS(x) Cosine
SIN(x) Sine
TAN(x) Tangent
Copyright © 2007 - 2018 EnterpriseDB Corporation. All rights reserved. 235
Database Compatibility for Oracle® Developers
Reference Guide
2.4.4 String Functions and Operators
This section describes functions and operators for examining and manipulating string
values. Strings in this context include values of the types CHAR, VARCHAR2, and CLOB.
Unless otherwise noted, all of the functions listed below work on all of these types, but be
wary of potential effects of automatic padding when using the CHAR type. Generally, the
functions described here also work on data of non-string types by converting that data to
a string representation first.
Table 2-17 SQL String Functions and Operators
Return
Function Description Example Result
Type
'Enterprise' ||
string || string CLOB String concatenation EnterpriseDB
'DB'
CONCAT(string,
CLOB String concatenation 'a' || 'b' ab
string)
Converts a VARCHAR2 value
HEXTORAW(varchar2) RAW HEXTORAW('303132') '012'
to a RAW value
Converts a RAW value to a
RAWTOHEX(raw) VARCHAR2 RAWTOHEX('012') '303132'
HEXADECIMAL value
Finds the location of a set of
characters in a string, starting
at position start in the INSTR('PETER PIPER
INSTR(string, set, [
string, string, and looking PICKED a PECK of
start [, occurrence ] INTEGER 30
for the first, second, third and PICKLED
])
so on occurrences of the set. PEPPERS','PI',1,3)
Returns 0 if the set is not
found.
INSTRB('PETER PIPER
Returns the position of the
PICKED a PECK of
INSTRB(string, set) INTEGER set within the string. 13
PICKLED PEPPERS',
Returns 0 if set is not found. 'PICK')
Returns the position of the INSTRB('PETER PIPER
PICKED a PECK of
INSTRB(string, set, set within the string,
INTEGER PICKLED 30
start) beginning at start. Returns
PEPPERS','PICK',
0 if set is not found. 14)
Returns the position of the INSTRB('PETER PIPER
specified occurrence of set PICKED a PECK of
INSTRB(string, set, PICKLED
INTEGER within the string, beginning 30
start, occurrence) PEPPERS','PICK', 1,
at start. Returns 0 if set is
2)
not found.
LOWER(string) CLOB Convert string to lower case LOWER('TOM') tom
Extract substring starting from
start and going for count
SUBSTR(string, start SUBSTR('This is a
CLOB characters. If count is not is
[, count ]) test',6,2)
specified, the string is clipped
from the start till the end.
SUBSTRB(string, start Same as SUBSTR except SUBSTRB('abc',3)
CLOB c
[, count ]) start and count are in (assuming a double-byte
Copyright © 2007 - 2018 EnterpriseDB Corporation. All rights reserved. 236
Database Compatibility for Oracle® Developers
Reference Guide
Return
Function Description Example Result
Type
number of bytes. character set)
SUBSTR2(string, start SUBSTR2('This is a
CLOB Alias for SUBSTR. is
[, count ]) test',6,2)
SUBSTR2('abc',3)
SUBSTR2(string, start
CLOB Alias for SUBSTRB. (assuming a double-byte c
[, count ])
character set)
SUBSTR4(string, start SUBSTR4('This is a
CLOB Alias for SUBSTR. is
[, count ]) test',6,2)
SUBSTR4('abc',3)
SUBSTR4(string, start
CLOB Alias for SUBSTRB. (assuming a double-byte c
[, count ])
character set)
SUBSTRC(string, start SUBSTRC('This is a
CLOB Alias for SUBSTR. is
[, count ]) test',6,2)
SUBSTRC('abc',3)
SUBSTRC(string, start
CLOB Alias for SUBSTRB. (assuming a double-byte c
[, count ])
character set)
Remove the longest string
TRIM([ LEADING |
containing only the characters
TRAILING | BOTH ] [ TRIM(BOTH 'x' FROM
CLOB (a space by default) from the Tom
characters ] FROM 'xTomxx')
start/end/both ends of the
string)
string.
Removes all the characters
specified in set from the left
LTRIM('abcdefghi',
LTRIM(string [, set]) CLOB of a given string. If set is defghi
'abc')
not specified, a blank space is
used as default.
Removes all the characters
specified in set from the right
RTRIM('abcdefghi',
RTRIM(string [, set]) CLOB of a given string. If set is abcdef
'ghi')
not specified, a blank space is
used as default.
UPPER(string) CLOB Convert string to upper case UPPER('tom') TOM
Additional string manipulation functions are available and are listed in the following
table. Some of them are used internally to implement the SQL-standard string functions
listed in Table 2-17.
Table 2-18 Other String Functions
Function Return Type Description Example Result
ASCII code of the first byte
ASCII(string) INTEGER ASCII('x') 120
of the argument
Character with the given
CHR(INTEGER) CLOB CHR(65) A
ASCII code
Finds first match of expr
Same as
with expr1a, expr2a, etc.
DECODE(expr, expr1a, argument
When match found, returns DECODE(3, 1,'One',
expr1b [, expr2a, types of
corresponding parameter 2,'Two', 3,'Three', Three
e ]x pr2b ]... [, default expr1b,
) pair, expr1b, expr2b, etc. 'Not found')
expr2b,...,
If no match found, returns
default
default. If no match found
Copyright © 2007 - 2018 EnterpriseDB Corporation. All rights reserved. 237
Database Compatibility for Oracle® Developers
Reference Guide
Function Return Type Description Example Result
and default not specified,
returns null.
Convert the first letter of
each word to uppercase and
the rest to lowercase. Words
Hi
INITCAP(string) CLOB are sequences of INITCAP('hi THOMAS')
Thomas
alphanumeric characters
separated by non-
alphanumeric characters.
Returns the number of
LENGTH INTEGER LENGTH('Côte d''Azur') 11
characters in a string value.
INTEGER This function is identical in LENGTHC('Côte d''Azur') 11
functionality to LENGTH; the
LENGTHC
function name is supported
for compatibility.
INTEGER This function is identical in LENGTH2('Côte d''Azur') 11
functionality to LENGTH; the
LENGTH2
function name is supported
for compatibility.
INTEGER This function is identical in LENGTH4('Côte d''Azur') 11
functionality to LENGTH; the
LENGTH4
function name is supported
for compatibility.
INTEGER Returns the number of bytes LENGTHB('Côte d''Azur') 12
LENGTHB required to hold the given
value.
Fill up string to size,
length by prepending the
characters, fill (a space by
LPAD(string, length
CLOB default). If string is LPAD('hi', 5, 'xy') xyxhi
INTEGER [, fill ])
already longer than length
then it is truncated (on the
right).
Replaces one value in a
string with another. If you
REPLACE(string,
do not specify a value for REPLACE( 'GEORGE',
search_string [, CLOB EGOREG
replace_string, the 'GE', 'EG')
replace_string ]
search_string value
when found, is removed.
Fill up string to size,
length by appending the
RPAD(string, length characters, fill (a space by
CLOB RPAD('hi', 5, 'xy') hixyx
INTEGER [, fill ]) default). If string is
already longer than length
then it is truncated.
Any character in string
that matches a character in
TRANSLATE(string, from, TRANSLATE('12345',
CLOB the from set is replaced by a23x5
to) '14', 'ax')
the corresponding character
in the to set.
Copyright © 2007 - 2018 EnterpriseDB Corporation. All rights reserved. 238
Database Compatibility for Oracle® Developers
Reference Guide
2.4.4.1 Truncation of String Text Resulting from Concatenation with
NULL
Note: This section describes a functionality that is not compatible with Oracle databases,
which may lead to some inconsistency when converting data from Oracle to Advanced
Server.
For Advanced Server, when a column value is NULL, the concatenation of the column
with a text string may result in either of the following:
 Return of the text string
 Disappearance of the text string (that is, a null result)
The result is dependent upon the data type of the NULL column and the way in which the
concatenation is done.
If one uses the string concatenation operator „||‟, then the types that have implicit
coercion to text as listed in Table 2-19 will not truncate the string if one of the input
parameters is NULL, whereas for other types it will truncate the string unless the explicit
type cast is used (that is, ::text). Also, to see the consistent behavior in the presence of
nulls, one can use the CONCAT function.
The following query lists the data types that have implicit coercion to text:
SELECT castsource::regtype, casttarget::regtype, castfunc::regproc,
CASE castcontext
WHEN 'e' THEN 'explicit'
WHEN 'a' THEN 'implicit in assignment'
WHEN 'i' THEN 'implicit in expressions'
END as castcontext,
CASE castmethod
WHEN 'f' THEN 'function'
WHEN 'i' THEN 'input/output function'
WHEN 'b' THEN 'binary-coercible'
END as castmethod
FROM pg_cast
WHERE casttarget::regtype::text = 'text'
AND castcontext='i';
The result of the query is listed in the following table:
Table 2-19 Data Types with Implicit Coercion to Text
castsource casttarget castfunc castcontext castmethod
character text pg_catalog.text implicit in expressions function
character
text - implicit in expressions binary-coercible
varying
"char" text pg_catalog.text implicit in expressions function
Copyright © 2007 - 2018 EnterpriseDB Corporation. All rights reserved. 239
Database Compatibility for Oracle® Developers
Reference Guide
castsource casttarget castfunc castcontext castmethod
name text pg_catalog.text implicit in expressions function
pg_node_tree text - implicit in expressions binary-coercible
pg_ndistinct text - implicit in expressions input/output function
pg_dependenci
text - implicit in expressions input/output function
es
integer text - implicit in expressions input/output function
smallint text - implicit in expressions input/output function
oid text - implicit in expressions input/output function
date text - implicit in expressions input/output function
double
text - implicit in expressions input/output function
precision
real text - implicit in expressions input/output function
time with
text - implicit in expressions input/output function
time zone
time without
text - implicit in expressions input/output function
time zone
timestamp
with time text - implicit in expressions input/output function
zone
interval text - implicit in expressions input/output function
bigint text - implicit in expressions input/output function
numeric text - implicit in expressions input/output function