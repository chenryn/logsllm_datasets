### 3. Integer Division Behavior in PostgreSQL and Advanced Server

This behavior is consistent with PostgreSQL databases, where division involving any pair of `INTEGER`, `SMALLINT`, or `BIGINT` data types results in the truncation of the result. When `db_dialect` is set to `postgres` in Advanced Server, the same truncated result is returned, as demonstrated in the previous example.

However, when `db_dialect` is set to `redwood`, only division involving a pair of `INTEGER` data types does not result in truncation. Division involving `SMALLINT` or `BIGINT` data types, with or without an `INTEGER` data type, still results in truncation, similar to PostgreSQL's behavior. This is illustrated in the following example:

```sql
edb=# SHOW db_dialect;
 db_dialect 
-------------
 redwood
(1 row)

edb=# SELECT CAST('10' AS INTEGER) / CAST('3' AS SMALLINT) FROM dual;
 ?column? 
----------
        3
(1 row)
```

### 2.4. Mathematical Functions

The following table lists the available mathematical functions. Many of these functions are provided in multiple forms with different argument types. Unless otherwise noted, any given form of a function returns the same data type as its argument. The functions working with `DOUBLE PRECISION` data are mostly implemented on top of the host system’s C library, so accuracy and behavior in boundary cases may vary depending on the host system.

| Function | Return Type | Description | Example | Result |
|----------|-------------|-------------|---------|--------|
| `ABS(x)` | Same as `x` | Absolute value | `ABS(-17.4)` | 17.4 |
| `CEIL(DOUBLE PRECISION or NUMBER)` | Same as input | Smallest integer not less than argument | `CEIL(-42.8)` | -42 |
| `EXP(DOUBLE PRECISION or NUMBER)` | Same as input | Exponential | `EXP(1.0)` | 2.7182818284590452 |
| `FLOOR(DOUBLE PRECISION or NUMBER)` | Same as input | Largest integer not greater than argument | `FLOOR(-42.8)` | -43 |
| `LN(DOUBLE PRECISION or NUMBER)` | Same as input | Natural logarithm | `LN(2.0)` | 0.6931471805599453 |
| `LOG(b NUMBER, x NUMBER)` | NUMBER | Logarithm to base `b` | `LOG(2.0, 64.0)` | 6.0000000000000000 |
| `MOD(y, x)` | Same as argument types | Remainder of `y/x` | `MOD(9, 4)` | 1 |
| `NVL(x, y)` | Same as argument types; if `x` is null, then returns `y` | `NVL(9, 0)` | 9 |
| `POWER(a DOUBLE PRECISION, b DOUBLE PRECISION)` | DOUBLE PRECISION | `a` raised to the power of `b` | `POWER(9.0, 3.0)` | 729.0000000000000000 |
| `POWER(a NUMBER, b NUMBER)` | NUMBER | `a` raised to the power of `b` | `POWER(9.0, 3.0)` | 729.0000000000000000 |
| `ROUND(DOUBLE PRECISION or NUMBER)` | Same as input | Round to nearest integer | `ROUND(42.4)` | 42 |
| `ROUND(v NUMBER, s INTEGER)` | NUMBER | Round to `s` decimal places | `ROUND(42.4382, 2)` | 42.44 |
| `SIGN(DOUBLE PRECISION or NUMBER)` | Same as input | Sign of the argument (-1, 0, +1) | `SIGN(-8.4)` | -1 |
| `SQRT(DOUBLE PRECISION or NUMBER)` | Same as input | Square root | `SQRT(2.0)` | 1.414213562373095 |
| `TRUNC(DOUBLE PRECISION or NUMBER)` | Same as input | Truncate toward zero | `TRUNC(42.8)` | 42 |
| `TRUNC(v NUMBER, s INTEGER)` | NUMBER | Truncate to `s` decimal places | `TRUNC(42.4382, 2)` | 42.43 |
| `WIDTH_BUCKET(op NUMBER, b1 NUMBER, b2 NUMBER, count INTEGER)` | INTEGER | Return the bucket to which `op` would be assigned in an equidepth histogram with `count` buckets, in the range `b1` to `b2` | `WIDTH_BUCKET(5.35, 0.024, 10.06, 5)` | 3 |

### 2.4. Trigonometric Functions

All trigonometric functions take arguments and return values of type `DOUBLE PRECISION`.

| Function | Description |
|----------|-------------|
| `ACOS(x)` | Inverse cosine |
| `ASIN(x)` | Inverse sine |
| `ATAN(x)` | Inverse tangent |
| `ATAN2(x, y)` | Inverse tangent of `x/y` |
| `COS(x)` | Cosine |
| `SIN(x)` | Sine |
| `TAN(x)` | Tangent |

### 2.4.4. String Functions and Operators

This section describes functions and operators for examining and manipulating string values. Strings in this context include values of the types `CHAR`, `VARCHAR2`, and `CLOB`. Unless otherwise noted, all of the functions listed below work on all of these types, but be wary of potential effects of automatic padding when using the `CHAR` type. Generally, the functions described here also work on data of non-string types by converting that data to a string representation first.

#### Table 2-17: SQL String Functions and Operators

| Function | Return Type | Description | Example | Result |
|----------|-------------|-------------|---------|--------|
| `string || string` | CLOB | String concatenation | `'Enterprise' || 'DB'` | `EnterpriseDB` |
| `CONCAT(string, string)` | CLOB | String concatenation | `'a' || 'b'` | `ab` |
| `HEXTORAW(varchar2)` | RAW | Converts a `VARCHAR2` value to a `RAW` value | `HEXTORAW('303132')` | `012` |
| `RAWTOHEX(raw)` | VARCHAR2 | Converts a `RAW` value to a `HEXADECIMAL` value | `RAWTOHEX('012')` | `303132` |
| `INSTR(string, set, [start [, occurrence]])` | INTEGER | Finds the location of a set of characters in a string, starting at position `start` and looking for the first, second, third, etc., occurrences of the set. Returns 0 if the set is not found. | `INSTR('PETER PIPER PICKED a PECK of PICKLED PEPPERS', 'PI', 1, 3)` | 30 |
| `INSTRB(string, set)` | INTEGER | Returns the position of the set within the string. Returns 0 if set is not found. | `INSTRB('PETER PIPER PICKED a PECK of PICKLED PEPPERS', 'PICK')` | 13 |
| `INSTRB(string, set, start)` | INTEGER | Returns the position of the set within the string, beginning at `start`. Returns 0 if set is not found. | `INSTRB('PETER PIPER PICKED a PECK of PICKLED PEPPERS', 'PICK', 14)` | 30 |
| `INSTRB(string, set, start, occurrence)` | INTEGER | Returns the position of the specified occurrence of set within the string, beginning at `start`. Returns 0 if set is not found. | `INSTRB('PETER PIPER PICKED a PECK of PICKLED PEPPERS', 'PICK', 1, 2)` | 30 |
| `LOWER(string)` | CLOB | Convert string to lower case | `LOWER('TOM')` | `tom` |
| `SUBSTR(string, start [, count])` | CLOB | Extract substring starting from `start` and going for `count` characters. If `count` is not specified, the string is clipped from the start till the end. | `SUBSTR('This is a test', 6, 2)` | `is` |
| `SUBSTRB(string, start [, count])` | CLOB | Same as `SUBSTR` except `start` and `count` are in number of bytes. | `SUBSTRB('abc', 3)` | `c` (assuming a double-byte character set) |
| `SUBSTR2(string, start [, count])` | CLOB | Alias for `SUBSTR`. | `SUBSTR2('This is a test', 6, 2)` | `is` |
| `SUBSTR4(string, start [, count])` | CLOB | Alias for `SUBSTR`. | `SUBSTR4('This is a test', 6, 2)` | `is` |
| `SUBSTRC(string, start [, count])` | CLOB | Alias for `SUBSTR`. | `SUBSTRC('This is a test', 6, 2)` | `is` |
| `TRIM([ LEADING | TRAILING | BOTH ] [ characters ] FROM string)` | CLOB | Remove the longest string containing only the characters (a space by default) from the start/end/both ends of the string. | `TRIM(BOTH 'x' FROM 'xTomxx')` | `Tom` |
| `LTRIM(string [, set])` | CLOB | Removes all the characters specified in `set` from the left of a given string. If `set` is not specified, a blank space is used as default. | `LTRIM('abcdefghi', 'abc')` | `defghi` |
| `RTRIM(string [, set])` | CLOB | Removes all the characters specified in `set` from the right of a given string. If `set` is not specified, a blank space is used as default. | `RTRIM('abcdefghi', 'ghi')` | `abcdef` |
| `UPPER(string)` | CLOB | Convert string to upper case | `UPPER('tom')` | `TOM` |

#### Table 2-18: Other String Functions

| Function | Return Type | Description | Example | Result |
|----------|-------------|-------------|---------|--------|
| `ASCII(string)` | INTEGER | ASCII code of the first byte of the argument | `ASCII('x')` | 120 |
| `CHR(INTEGER)` | CLOB | Character with the given ASCII code | `CHR(65)` | `A` |
| `DECODE(expr, expr1a, expr1b, [expr2a, expr2b, ...], [default])` | Same as argument types | Finds first match of `expr` with `expr1a`, `expr2a`, etc. When match found, returns corresponding parameter `expr1b`, `expr2b`, etc. If no match found, returns `default`. If no match found and `default` not specified, returns `null`. | `DECODE(3, 1, 'One', 2, 'Two', 3, 'Three', 'Not found')` | `Three` |
| `INITCAP(string)` | CLOB | Convert the first letter of each word to uppercase and the rest to lowercase. Words are sequences of alphanumeric characters separated by non-alphanumeric characters. | `INITCAP('hi THOMAS')` | `Hi Thomas` |
| `LENGTH(string)` | INTEGER | Returns the number of characters in a string value. | `LENGTH('Côte d''Azur')` | 11 |
| `LENGTHC(string)` | INTEGER | This function is identical in functionality to `LENGTH`; the function name is supported for compatibility. | `LENGTHC('Côte d''Azur')` | 11 |
| `LENGTH2(string)` | INTEGER | This function is identical in functionality to `LENGTH`; the function name is supported for compatibility. | `LENGTH2('Côte d''Azur')` | 11 |
| `LENGTH4(string)` | INTEGER | This function is identical in functionality to `LENGTH`; the function name is supported for compatibility. | `LENGTH4('Côte d''Azur')` | 11 |
| `LENGTHB(string)` | INTEGER | Returns the number of bytes required to hold the given value. | `LENGTHB('Côte d''Azur')` | 12 |
| `LPAD(string, length, [fill])` | CLOB | Fill up string to `length` by prepending the `fill` characters (a space by default). If `string` is already longer than `length`, then it is truncated (on the right). | `LPAD('hi', 5, 'xy')` | `xyxhi` |
| `REPLACE(string, search_string, [replace_string])` | CLOB | Replaces one value in a string with another. If you do not specify a value for `replace_string`, the `search_string` value, when found, is removed. | `REPLACE('GEORGE', 'GE', 'EG')` | `EGOREG` |
| `RPAD(string, length, [fill])` | CLOB | Fill up string to `length` by appending the `fill` characters (a space by default). If `string` is already longer than `length`, then it is truncated. | `RPAD('hi', 5, 'xy')` | `hixyx` |
| `TRANSLATE(string, from, to)` | CLOB | Any character in `string` that matches a character in the `from` set is replaced by the corresponding character in the `to` set. | `TRANSLATE('12345', '14', 'ax')` | `a23x5` |

### 2.4.4.1. Truncation of String Text Resulting from Concatenation with NULL

**Note:** This section describes a functionality that is not compatible with Oracle databases, which may lead to some inconsistency when converting data from Oracle to Advanced Server.

For Advanced Server, when a column value is `NULL`, the concatenation of the column with a text string may result in either of the following:
- Return of the text string
- Disappearance of the text string (that is, a null result)

The result depends on the data type of the `NULL` column and the way in which the concatenation is done. If the string concatenation operator `||` is used, then the types that have implicit coercion to `text` (as listed in Table 2-19) will not truncate the string if one of the input parameters is `NULL`, whereas for other types, it will truncate the string unless the explicit type cast `::text` is used. To ensure consistent behavior in the presence of `NULL` values, the `CONCAT` function can be used.

The following query lists the data types that have implicit coercion to `text`:

```sql
SELECT 
    castsource::regtype, 
    casttarget::regtype, 
    castfunc::regproc,
    CASE castcontext
        WHEN 'e' THEN 'explicit'
        WHEN 'a' THEN 'implicit in assignment'
        WHEN 'i' THEN 'implicit in expressions'
    END as castcontext,
    CASE castmethod
        WHEN 'f' THEN 'function'
        WHEN 'i' THEN 'input/output function'
        WHEN 'b' THEN 'binary-coercible'
    END as castmethod
FROM pg_cast
WHERE casttarget::regtype::text = 'text'
AND castcontext='i';
```

#### Table 2-19: Data Types with Implicit Coercion to Text

| castsource | casttarget | castfunc | castcontext | castmethod |
|------------|------------|----------|-------------|------------|
| `character` | `text` | `pg_catalog.text` | implicit in expressions | function |
| `character varying` | `text` | - | implicit in expressions | binary-coercible |
| `"char"` | `text` | `pg_catalog.text` | implicit in expressions | function |
| `name` | `text` | `pg_catalog.text` | implicit in expressions | function |
| `pg_node_tree` | `text` | - | implicit in expressions | binary-coercible |
| `pg_ndistinct` | `text` | - | implicit in expressions | input/output function |
| `pg_dependencies` | `text` | - | implicit in expressions | input/output function |
| `integer` | `text` | - | implicit in expressions | input/output function |
| `smallint` | `text` | - | implicit in expressions | input/output function |
| `oid` | `text` | - | implicit in expressions | input/output function |
| `date` | `text` | - | implicit in expressions | input/output function |
| `double precision` | `text` | - | implicit in expressions | input/output function |
| `real` | `text` | - | implicit in expressions | input/output function |
| `time with time zone` | `text` | - | implicit in expressions | input/output function |
| `time without time zone` | `text` | - | implicit in expressions | input/output function |
| `timestamp with time zone` | `text` | - | implicit in expressions | input/output function |
| `interval` | `text` | - | implicit in expressions | input/output function |
| `bigint` | `text` | - | implicit in expressions | input/output function |
| `numeric` | `text` | - | implicit in expressions | input/output function |

---

**Copyright © 2007 - 2018 EnterpriseDB Corporation. All rights reserved.**