among them. First, we discover a set of URLs that may send push
notifications with the help of an ad network and filter those that
actually request for notification permission (see Section 6.1 for
details). For the web pages that ask for notification permissions,
we log details about the responsible SW code, automatically grant
permission (via browser code instrumentation), and then collect
the notifications that are later pushed to our instrumented browser.
When a notification is displayed by the browser, we record fine
grained details about the notification message itself (including mes-
sage text and icons), automatically simulate a user click on the
notification box (via browser code instrumentation), and track all
events resulting from the click. If the click results in a new page be-
ing open, we record detailed information about the related network
requests, including all browser redirections, as well as detailed logs
and a screenshot of each new page the browser visits, including
the landing page (i.e., the final web page reached due to the click).
Finally, we extract relevant information from the detailed logs
of our instrumented browser, and apply a clustering strategy to
find notifications that are similar to each other, which allows us to
identify WPN-based ad campaigns. We then leverage URL blocklists
to find WPN ad campaigns that are likely malicious (e.g., because
one or more landing pages are known to be malicious).
Note that in this paper we do not focus on building a malicious
WPN ad campaign detector, such as using statistical features or
machine learning classifiers. Rather, our focus is on discovering,
collecting, and analyzing WPN ad campaigns in general, and on
measuring the prevalence of both benign and malicious campaigns.
As we will show in Section 6, URL blocklists tend to miss a signif-
icant number of malicious URLs that we determine to be related
to malicious ad campaigns. The analysis we present in this paper
could therefore be used as a starting point for developing an auto-
mated malicious WPN ad campaign detector. We leave this latter
task to future work. Our code to collect and analyze WPNs is pub-
licly available in a Github repo1 and a Docker container with the
instrumented Chromium is in Docker Hub 2.
Ethical Considerations: To track WPN-based ads and label
malicious ones, it is necessary to collect information about the land-
ing page that an ad eventually redirects to. For instance, for most
malicious ads the attack is effectively realized only once the user
reaches the landing page, especially in case of social engineering
and phishing attacks. As we do not know in advance what landing
page will be reached by clicking on a WPN message, and whether
a WPN ad is malicious or not, our system will likely click on both
1https://github.com/karthikaS03/PushAdMiner
2https://hub.docker.com/repository/docker/dockerammu/docker_puppeteer_
chromium_xvfb
726
1) Visits https://aurolog.ru2) Allows Notification3) Continues browsing other websites4) Gets Notification from aurolog.ru5) Clicks the Notification6) Redirected to tech scam pageIMC ’20, October 27–29, 2020, Virtual Event, USA
K. Subramani, X. Yuan, O. Setayeshfar, P. Vadrevu, K. Lee and R. Perdisci
Figure 2: PushAdMiner System Overview
legitimate and malicious ads. In turn, this may cause legitimate
advertisers to incur a small cost for our clicks, as they will likely
have to pay a third-party publishing web page and ad network for
their services (notice that we obviously receive no monetary gain
whatsoever during this process). This is common to other simi-
lar studies, such as [49, 58], and we therefore address the ethical
considerations for our study following previous work.
To make sure we do not have a significant negative impact on
legitimate third-parties, we estimated the cost incurred by these
advertisers due to ad clicks performed by our system, and found
that our system has negligible impact on advertisers. Specifically,
among the WPN ads we identified, we consider legitimate ads to
be those whose landing pages are not labeled as malicious by Virus
Total’s URL classification services. Then, we estimate the cost per
landing domain based on the number of ads we clicked on that lead
to a specific domain, using the Cost Per Mille (CPM) [5] for push
notification ads according to iZooto [18]. The maximum cost per
landing domain throughout our entire study was USD 1.12 (due to
landing on the same domain 444 times), which we calculated using
the standard CPM of USD 2.54. On average, we visited each landing
domain 18 times, which corresponds to an average cost of USD
0.04 per landing domain (i.e., per advertiser). Considering these low
values, we believe the impact of our system on advertisers is not
significant, and is on par with previous work [49, 58].
4 DATA COLLECTION MODULE
In this section, we describe in detail how PushAdMiner’s data col-
lection module is implemented. The steps referred to in the follow-
ing sections follow the numbering given in Figure 3.
4.1 Desktop Environment
To discover WPN ad campaigns, we first need to collect WPN mes-
sages. To this end, we build a crawler consisting of an instrumented
browser and browser automation scripts. As our crawler encoun-
ters a website that asks for permission to send push notifications,
our goal is to automatically allow the permission request, so that
we can collect notifications from that origin. To this end, we in-
strumented our browser as follows: we introduce changes to the
RequestPermission and PermissionDecided methods under the
PermissionContextBase class in Chromium’s C++ code base, to
log all details about the permission request (e.g., the origin request-
ing it) and to automatically grant permissions.
Service Worker Registration (step 2): To record when a SW is
registered by a web page, we use a custom script for Puppeteer [32].
Specifically, we listen to serviceworkercreated events and log
information such as details about the page that registered the SW,
and the URL from which the SW code was retrieved.
Network Requests (step 3): When the browser receives a push
message from the FCM service, it will alert the SW to which the
message is destined. The correct SW is identified via a unique ID
included in the push message. As part of handling the push message
and related notification, the SW may issue one or more network re-
quests directly to an ad network server or other third-party servers.
For instance, the SW may contact an ad network server to deter-
mine the landing URL associated to a given push message. Also,
after a pushed notification receives a user click, the SW may send
a network request to an ad server to notify it of the user click, or
to facilitate other tracking related activities. We capture and log
such network requests issued by SWs by leveraging a custom Pup-
peteer [32] script that listens to SW request and response events.
Specifically, for every SW’s network request we record information
such as the requested URL, the data sent/received, possible network
redirections, and the related response content.
Notifications (steps 5-6): Notifications are displayed by invoking
showNotification under ServiceWorkerRegistrationNotifi-
cations (in Chromium’s C++ code). We therefore add an instru-
mentation hook to record calls to that method. Specifically, we log
the URL of the SW that called for showing the notification, the
notification title, body, icon URL, and target URL (if present).
Notification Clicks and Navigations (steps 7-8): Depending on
the type of notification, clicking on it can navigate the browser
to a new web page (e.g., on a separate tab). For WPN-based ads,
clicking on the notification box typically takes the user to the page
advertised in the WPN ad (i.e., the ad’s landing page). Collecting
such pages is especially important for studying malicious WPN ads,
because the landing page often implements a critical component
of the attack.
For instance, Figure 1 shows that the user reaches the actual tech
support scam page after clicking on the notification. The landing
727
Progressive Web ApplicationsWPN Crawlers Logs & ScreenshotsWPN Metadatacontexttarget URLtitlebodysite domainpathWHOIS nameIPimagerankData Collection ModuleWPN ClusteringUnlabeled ClustersWPN Ad CampaignsMeta ClusteringMeta ClustersMalicious WPNsMaliciousWPN Ad CampaignsSuspicious WPNsSuspiciousWPN AdsURL BlocklistingManual BlocklistData Analysis ModuleWhen Push Comes to Ads:
Measuring the Rise of (Malicious) Push Advertising
page advertises the scam phone number, without which the attack
could not be monetized.
Figure 3: Steps involved in Serving Ads via WPNs
To automate the process of collecting the landing page asso-
ciated to push notification messages, we need to simulate a user
click. Unfortunately, browser automation frameworks such as Pup-
peteer [32] and Selenium [53] do not allow for interacting with
WPNs. Therefore, we again had to build our own custom browser
instrumentation. Specifically, we found that Chromium uses the
Add method in MessageCenterNotificationManager (in the C++
code base) to trigger the display of a notification. Also, we found
that WebNotificationDelegate has a method called Click that is
responsible for propagating user clicks to the notification. Therefore,
to simulate a user click we instrument the Add method mentioned
above so that, after the notification is displayed, it waits for a short
delay (e.g., a few seconds) and then calls WebNotificationDele-
gate::Click. If the Click call results in a web page navigation,
our browser records all network requests involved in the process
(including all redirections) and fine-grained details about the render-
ing of the landing page, which includes detailed information about
any JavaScript code executed in the context of the landing page.
4.2 Mobile Environment
We also developed a version of PushAdMiner for Android. Due to
some technical differences between how WPNs are displayed on
a mobile OS, compared to desktop environments, we had to adapt
some of the system components to run specifically on Android. First,
at the time when we started building our system, Puppeteer [32]
did not appear to support Android Chromium automation. Only
recently there have been online posts in which Puppeteer users
describe how they have been able to “hack” their configurations to
remotely control an Android browser. We therefore built our own
browser automation framework that works via the Android De-
bug Bridge (ADB). The capabilities of our ADB-based automation
framework are limited, but sufficient for enabling data collection
for PushAdMiner. We plan to explore the use of Puppeteer for
PushAdMiner on Android as future work.
LoggingInternalBrowserEvents: We compile our instrumented
Chromium browser for Android, so that we can collect intimate
details about internal browser events related to WPNs, including
recording information about the related Service Workers and the
IMC ’20, October 27–29, 2020, Virtual Event, USA
rendering of the landing page resulting from clicking on a WPN.
Browser logs are sent via the logcat ADB command to a remote
logging machine.
Interacting with Notifications: Unlike on desktop devices, in
which WPN messages are displayed by the browser, on Android
device it is the Android OS that displays a WPN as a system noti-
fication. Also, unlike on desktop environments, the browser does
not need to be activated for a WPN message to be received, though
the browser may be activated after tapping on a notification (e.g.,
to navigate to the URL pointed to by the notification). We therefore
had to implement a different mechanism to simulate user interac-
tions with WPNs on Android. Specifically, we developed an Android
application that leverages Android’s Accessibility Service. The Ac-
cessibility Service is aimed to help people with disabilities in using
the device and apps. It is a long-running privileged system service
that helps users process information from the screen and lets them
interact with the content meaningfully in an easy way. Android
developers can leverage the Accessibility Service API and develop
apps that are made aware of certain events, such as TYPE_VIEW_-
FOCUSED and TYPE_NOTIFICATION_STATE_CHANGED. Furthermore,
the accessibility service API can also be used to initiate user actions
such as click, touch and swipe.
We install our app with Accessibility Service permission on an
Android physical device, and use it to interact with every notifica-
tion event fired. Whenever a new notification pops up, our appli-
cation will automatically swipe down the notification bar and click
on the notification to complete the action, while our instrumented
Android browser produces detailed logs about the consequences
of such interactions (e.g., loading a new web page).
As an alternative, AndroidDebugBridge (ADB) could be lever-
aged to implement the same browser automation that we imple-
mented using Accessibility Service. However, in practice, we found
that it could create large traffic overhead through the USB cable
connected with the device. As we already use ADB to retrieve fine-
grained browsing logs, we decided to avoid further USB overhead.
Therefore, we found the use of the accessibility features to be better
in practice for our specific application.
5 DATA ANALYSIS MODULE
In this section, we first describe in detail how we mine the collected
WPN messages to identify WPN-based ad campaigns, and later
explain how we label malicious campaigns.
5.1 WPN-based Ad Campaigns
To identify WPN-based ad campaigns, we mine the dataset of WPN
messages collected by PushAdMiner from a large and diverse set
of websites. To distinguish between generic WPN messages and
WPN-based ads, we start by considering the following intuitions.
Roughly speaking, advertisers tend to promote their products or
services on multiple websites, and clicking on a WPN notification
typically leads to a third-party landing page, on a different origin
than the website from which the WPN message was received. On
the other hand, non-ad WPN messages are typically related to alerts
(e.g., breaking news, weather alerts, etc.) that are specific to the
notifying website itself, and clicking on the notification often leads
to the same origin to which the notification was related.
728
Service Worker  Visits & Allows NotificationsRegistersWeb ServerThird-Party ServerRequestsCloud Messaging ServiceSend Ad details Send PushmessageDisplayNotificationClicksNotificationOpens LandingPage12345678IMC ’20, October 27–29, 2020, Virtual Event, USA
K. Subramani, X. Yuan, O. Setayeshfar, P. Vadrevu, K. Lee and R. Perdisci
Following the above intuitions, we broadly define a WPN ad cam-
paign as a set of WPN messages from multiple sources that deliver simi-
lar content promoting the same (or similar) products or services. In prac-
tice, this translates into a (potentially large) group of similar WPN
messages pushed by multiple different websites that lead to the same
landing page, or different landing pages that show similar content.
To find such WPN ad campaigns among a large collection of
generic WPN messages, we leverage a document clustering ap-
proach. This clustering process aims to group together WPN mes-
sages that are similar to each other in terms of message content
and landing page. As a result, WPN ads that belong to a large WPN
ad campaign will tend to form larger clusters. On the other hand,
non-ad WPNs would tend to be isolated into singleton clusters or
clusters that contain messages related to only one source website
and a landing domain that points back to the source website itself.
Because clustering is an unsupervised learning process, it is
usually challenging to tune the hyperparameters to obtain perfect
clustering results. Therefore, to minimize the chances of grouping
together ads and non-ads, we tune our clustering system to be
conservative and yield “tight” clusters. Namely, WPN messages
assigned to the same cluster will exhibit high similarity. Although
this may result in some WPN ads being left out of the campaign (i.e.,
the cluster) they may also belong to, we will see later that we can re-
connect them to their respective campaigns using a meta-clustering
step (Section 5.3).
5.1.1 WPN Clustering Features and Approach. To cluster similar
WPNs, we first need to define the features to be compared and a
similarity function that calculates the closeness of two WPN mes-
sages. Thanks to our instrumented browser, each WPN we collect
is accompanied by metadata such as the notification title, message
body, the images and icons found in the WPN, the URL of the land-
ing page, a screenshot of the landing page reached after clicking
on the WPN (in the case of our desktop browser), the events that
occur immediately after a notification click, etc.
Among the above features, to discover WPN ad campaigns we
use the following ones for clustering: message title, message body,
and the URL path (i.e., we exclude the domain name) of the mes-