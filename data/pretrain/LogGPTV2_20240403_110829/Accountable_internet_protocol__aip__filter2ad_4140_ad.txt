purpose as well as specialized memory. AIP-Diam shows the re-
quirements if AIP causes a 60% increase in the diameter of the
Internet.
In the worst case, the RIB is stored as separate entries for each IP
preﬁx (today) or AD (in AIP), with no compression of shared AS
paths. Today, each AS takes 16 bits; in the future, each AS will likely
require 32 bits [42]. With the diameter of the Internet not increasing
substantially, we assume the average AS path length will be 6 (today
it is slightly under 5). We conservatively assume that each router
may have up to 20 peers sending it a full table. As discussed above,
moving to AIP will increase RIB and FIB entries from 32 bits to
160 bits, with a corresponding increase in the next-hop and each
AD component of the path. In addition, for each AD entry (not
per-peer), the router will require roughly 512 bytes of memory to
store its public key.
Table 4 shows the required memory for both IP and AIP, with the
cost of that memory as projected from the ITRS roadmap. Unsurpris-
ingly, AIP increases the amount of memory required for RIB storage
by about a factor of three. With DRAM cost scaling, however, by
2020 the memory needed to store an AIP table will cost less than the
memory needed to store a standard IP routing table today.
FIB storage (DRAM, SRAM, or CAM): Router manufacturers ap-
pear to use all three common technologies for FIB storage: DRAM,
SRAM, and TCAM.7 As we have seen, the scaling trends for DRAM
exceed AIP’s growth rate. The results for SRAM are similar: SRAM
density is expected to grow 16×, and the FIB will grow only 5− 9×
(Table 4), leaving adequate room to handle the larger but ﬂat AD
entries. The same transistor density scaling affects TCAMs.8
Update processing (CPU): The major challenge for update pro-
cessing is the time required to load a full copy of the table from
every peer when a router comes online. This load scales directly
with the size of the routing table (Table 1).
Measurements of BGP table load times by Wu et al. show that
an older Cisco 3620 router (discontinued in 2003) could process
2,493 updates per second during bulk loads, using a single core
80 Mhz RISC processor [45]. This lower-end router would have
required about 48 seconds to load a 120,000 preﬁx table from each
peer, or about sixteen minutes for all peers. Scaling that router to a
single-core 3.0 GHz modern CPU would suggest a rough 30× speed
increase, suggesting that a modern router with a high-performance
routing CPU could load 20 peers tables of 240K routing table entries
in about 1 minute.
IPv4 routing tables are expected to grow by a factor of between 5
and 9 by 2020 (Table 1). In this period, the number of transistors per
CPU is expected to grow by a factor of 16 (Table 3). Disregarding
7http://www.firstpr.com.au/ip/sram-ip-forwarding/
router-fib/
8Such large SRAMs could become a “niche” product, resulting in a constant factor
increase in their cost relative to other products with the same density. The technology
would still be possible, albeit more expensive.
cryptographic overhead for the moment, a future AIP router’s CPU
should be able to load its full tables in about 30 seconds.
Routing updates may also be constrained by the DRAM band-
width needed to process them.
If an AIP routing table in 2020
requires 8.2 GBytes of memory, even modern DDR2-677 memory
(about 1.7 GBytes/s average write bandwidth) could handle the raw
load bandwidth requirements in a few seconds.
Cryptographic overhead: Receiving a routing update requires val-
idating an RSA signature. A 2.83 GHz modern quad-core CPU can
verify about 35,000 2048-bit RSA signatures/sec and can create 935
signatures/sec, a computation that is both easily parallelized and
optimized in hardware.9 By 2020, a commodity processor should be
able to verify 480K and create 13K signatures per second, respec-
tively. This scaling is quite favorable: today, verifying one signature
for each route announcement from each of 20 peers would require
164 seconds; by 2020, performing this same veriﬁcation of entries in
an AIP-SBGP table would require about 1.6Mroutes∗20peers
480,000sigs/sec = 66
seconds. Unfortunately, neither of these numbers is quite as good
as one might like for table load times, so cryptographic acceleration
may still be necessary for either IP with S-BGP or for AIP.
In summary, though some of the modeling in this section is specu-
lative, technology trends suggest that routing scalability with respect
to memory consumption, CPU overhead, and network bandwidth
are all manageable.
5 Key Management
As with any system that relies heavily on key-based cryptography,
AIP faces three general problems in key management:
1. Key discovery: Sources must be able to discover the destina-
tion address (key).
2. Individual key compromise: Domains and hosts must cope
with the possibility that their key might be compromised.
3. Cryptographic algorithm compromise: In the long term,
AIP must be able to migrate to newer digital signature and
hash algorithms as earlier algorithms are weakened.
5.1 Key Discovery
Because a host’s key is simply its address, the key is obtained au-
tomatically once the address is known. Addresses can be obtained
as they are today (Section 2.3): manually, using secure or insecure
DNS, or using any other lookup service. As a network-layer proto-
col, AIP is agnostic to the particular lookup mechanism used, though
an insecure lookup mechanism presents an obvious avenue of attack.
We also assume that peering ADs can identify each other out-
of-band. This allows them to exchange public keys in a trusted
manner, and also ensure that a compromised key does not lead to
misidentiﬁed peers (i.e., if an attacker compromises a domain’s key,
it can’t fool another domain into peering with it).
5.2 Key Compromise
There are three issues related to key compromise that we must
consider: protecting against compromise, detecting compromise,
and dealing with compromise.
The ﬁrst and third of these are relatively straightforward. To
minimize the chance of compromise, hosts and domains should
9Timing from OpenSSL 0.9.8g openssl speed -multi 4 rsa2048 on an
Intel Xeon E5440.
follow established key management practices, such as using time-
limited secondary keys for all online signings, and keeping the
primary key ofﬂine and under strict control. Advances in trusted
computing hardware may assist in keeping keys safe.
If a host key is compromised, then the host merely adopts a
new key and inserts it into its DNS record in the same manner it
inserted its previous key. That is, whatever (possibly out-of-band)
authentication and trust mechanisms established its identity with
DNS will allow it to change its key.
If a domain key is compromised, then the domain revokes its
key through the interdomain routing protocol, and via the public
registries discussed below. The only challenge in this scheme is that
key revocation must propagate down every path that carries a route
for the AD, because after the notice is processed, the route will be
withdrawn as invalid.
Beyond these straightforward problems lies a more insidious risk.
A very real danger of crypto-based systems such as AIP is one
of false conﬁdence: with a compromised key, an attacker could
silently impersonate his victim for quite a while before a victim
noticed. Much like identity theft in the real world, recovering from
a compromise is a hassle, but having it go undetected for a long
period can be catastrophic. As a result, we devote the rest of this
section to exploring mechanisms to allow both hosts and domains
to rapidly detect how and where their identity (key) is being used.
While none of these mechanisms other than the domain public key to
ID registry are necessary for AIP’s operation, we believe that some
form of these mechanisms would substantially boost the security of
the resulting system.
Our answer to this challenge is to maintain a public registry of the
peers for each AD and the ADs to which each EID is bound. While
the reader may complain that such registries have failed before,
the crucial difference here is that these registries only store self-
certifying data which has the advantages that:
• There is no need for any central authority to verify the correct-
ness of the registry’s content. The registry merely veriﬁes the
signature before storing data.
• The registry can be populated mechanistically by the entities
involved, with no need for human intervention or involvement.
Thus, this approach does not rely on operator vigilance, merely
protocol correctness.
We now describe these registries and their use in more detail.
Registries: We assume the existence of global registries where
principals can register various cryptographically signed assertions.
We also assume the existence of per-domain registries that can be
housed by the ISP itself.
Let KA represent the public key of A. The various classes of
assertions, each maintained in a table, are:
• Keys: {X,KX}
This table connects a domain or host’s address (its public key
hash) to its actual public key. There is no need for a signature
since an AD or EID X is merely the hash of the corresponding
key KX .
• Revoked keys: {KX , is revoked}K−1
To revoke a key, the key owner inserts an element into this
table. Once an entry is written, no further modiﬁcations of it
are permitted.
X
• Peerings: {A,KA,B,KB}K−1
A
{A,KA,B,KB}K−1
B
If A and B are peering, they each sign such a statement and
both store it in the registry.
X
A ,K−1
• ADs of EID X: {A,X}K−1
When X enters an address AD : X in its DNS record, as dis-
cussed below, it must present a certiﬁcate from AD that AD is a
domain of X. When X asks A for this certiﬁcate, A also submits
this certiﬁcate to the global registry. This table has one entry
for each AD that X belongs to.
• First hop router of X: {Router,X,MACX}K−1
When a host registers with its ﬁrst-hop router, the ﬁrst-hop
router registers this fact in a domain-wide database (per-domain
registry). It also registers X’s MAC address.
Router,K−1
X
Clients can do a lookup using the hash of the key to ﬁnd the
relevant data.
Maintaining the domains registry: One challenge is keeping the
domains registry reasonably up to date. A compromised host has
no incentive to list itself, so this responsibilities lies with the AD
providing a home for the compromised EID. To encourage such
behavior, we propose forcing the domain to sign A : X entries before
the DNS servers and resolvers will accept them as the result of a
DNS resolution. Any client who performs a DNS lookup, then, can
with conﬁdence insert the results in the domains registry. A DNS
entry thus must bind name → {AD : EID}K−1
. A hierarchical
address must be signed by all domains in the address.
Using the registries: These registries are used by both domains and
hosts to check for compromise.
AD ,K−1
EID
• Each host X periodically checks a global registry for which
domains are hosting it, and checks its domain-speciﬁc registry
for which ﬁrst-hop routers are hosting it. If it sees an entry it
doesn’t recognize, it may assume there has been a compromise.
• Each domain A periodically checks the global registry to see
which domains claim to be peering with it. If it sees an entry it
doesn’t recognize, it may assume there has been a compromise.
Using these mechanisms, a domain can recognize whenever an
imposter has established a peering arrangement with some other
domain. Because we are assuming that out-of-band mechanism can
prevent an imposter from fooling a peer (that is, if A thinks it is
peering with B, it can verify the identify of the peering entity in
ways other than verifying B’s signature), then there is no way an
imposter can enter the interdomain routing system without the valid
domain being able to detect its presence.
Similarly, a host can recognize whenever an imposter has estab-
lished itself in another domain, or in the same domain with another
ﬁrst-hop router, or at the same ﬁrst-hop router with a different MAC
address. The only case these mechanisms don’t cover is when an
imposter registers with the same ﬁrst-hop router with the same MAC
address. Dealing with this latter case would require L2 security
technologies, which are outside of our scope.
5.3 Cryptographic Algorithm Compromise
To cope with the inevitable compromise of existing cryptosystems
and hash functions, each AIP address (src, dst, every AD in the
stack, EID, and so on) and every registry entry (as described above)
contains its own crypto version ﬁeld (Figure 1). Versioning each
address separately is necessary to support gradually phasing in new
algorithms. Because of the large number of stakeholders that must
agree on a shared set of signature algorithms and hash functions, a
particular crypto version represents one combination of a signature
scheme and hash function. For example, in our design, crypto
version 0 represents RSA signatures with SHA-1 hashes. The hash
function must be truncated or zero-ﬁlled, as appropriate, to ﬁll the
144-bit hash space in the AIP address.
We envision that at most two or three crypto versions will be
present on the network at any given time: the “legacy” version that
the network is moving away from, and the newer algorithm that is
supplanting it over ﬁve or ten years.
6 Trafﬁc Engineering and AD Size
The goal of trafﬁc engineering is to map an offered load on to a set
of available paths. This operation happens in two ways in today’s
Internet: per-preﬁx, and per-service. Network operators remap load
by selectively advertising preﬁxes to control how trafﬁc destined for
groups of hosts ﬂows on various paths. Server administrators use
DNS mappings to direct trafﬁc to individual hosts. By moving away
from preﬁxes, AIP forces a reconsideration of these issues.
A fundamental difference between AIP and IP is that ADs cannot
be split into sub-preﬁxes for ﬁner control over routing. Because
of this limitation, we must answer three questions to assess how to
perform common trafﬁc engineering functions and how debilitating
the elimination of preﬁxes might be.
1. What is the granularity of an AD?
2. Will operators want to “split” an AD in order to better perform
trafﬁc engineering? How can AIP support this?
3. How does DNS-based load balancing work under AIP?
AD granularity: As an accountability domain, we envision an AD
as corresponding to a group of nodes that meets two criteria: they are
administered together, and they would fail together under common
network failures. For example, ADs might represent a campus, a
PoP, or a single non-geographically-distributed organization. This
assignment also helps reduce false churn, as this granularity cor-
responds roughly to the way in which connectivity to the network
changes.
Splitting ADs for TE: The PoP and customer site granularity of
ADs is a good match with ISPs’ typical trafﬁc engineering goals,
where operators often wish to control trafﬁc ﬂow at the granularity
of PoP-to-PoP trafﬁc across their core network (e.g., using MPLS).
Because ADs are assigned at the granularity of a single campus or
sub-network reachable via one connection, they are a good match
for existing inbound trafﬁc engineering techniques.
To a ﬁrst approximation, creating an AD from each preﬁx in the
wide-area BGP routing tables seems like a reasonable strategy. This
approach, however, prevents a network operator from unilaterally