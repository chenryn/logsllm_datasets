node，即CFG中黑色虚线箭尾)和reverse_catch_edges(catch node，即CFG中黑色虚线箭头)。
对于该block的所有child如果没有对应的node就创建出来，添加该node到child
node的edge。如果这个node是SwitchBlock，则将child
node添加到node的cases中；如果这个node是CondBlock，则将node的true或false设置为child node。
**construct函数**
构造CFG。
调用bfs函数得到DVMBasicBlock序列，对于每个DVMBasicBlock调用make_node函数然后加到图中，设置graph的entry和exit。
### **control_flow.py**
控制流分析。
**intervals函数**
给定一个控制流图，计算该图区间图(interval graph)的集合。
对于最前面运行decompile.py举的例子，如果大家去看/tmp/dad/pre-structured中生成的CFG图，该图有两个区间图，一个是`1-Statement(foo-BB[@0x0](https://github.com/0x0 "@0x0"))`这一个节点组成的区间图，另外一个就是其他节点组成的区间图。
算法：
将图的入口加入头节点列表，遍历所有头节点：取出头节点并标记，将其加入一个区间图，如果存在一个节点，其所有前驱节点都在当前区间图中就将该节点加入当前区间图，重复直到所有可能的节点都被加入当前区间图；
此时如果存在一个节点不在区间图中但是它的一个前驱节点在区间图中，那么这个节点就是另一个区间图的头节点，将该节点加入头节点列表，重复直到所有可能的节点都被加入头节点列表。
**derived_sequence函数**
计算CFG的导出序列，也就是如把CFG最终转化为单个节点。返回两个参数，第一个参数Gi是区间图的列表，第二个参数Li是区间图的头节点的列表。Gi[0]是原始图，Gi[1]是一阶图，Gi[x]是x阶图；Li[0]是一阶图的头节点，Li[1]是二阶图的头节点，Li[x]是x+1阶图的头节点。
**loop_type函数**
返回循环的类型：
Pre-test Loop：检查条件后才执行循环；
Post-test Loop：先执行循环再检查条件；
End-less Loop：无限循环。
**loop_follow函数**
标记`x.follow['loop'] = y`，表示x这个循环节点结束之后应该是y节点。
**loop_struct函数**
识别循环。遍历derived_sequence函数返回的两个列表，如果对于一个头节点，有一个它的前驱节点和它位于同一个区间图，那么就标记一个循环。
比如对于下面的代码：
        public void testWhile() {
            int i = 5;
            int j = 10;
            while (i < j) {
                j = (int) (((double) j) + (((double) i) / 2.0d) + ((double) j));
                i += i * 2;
            }
            f13i = i;
            f14j = j;
        }
derived_sequence函数返回的结果：
Gi[0]:（原始图）
    [
    1-Statement(testWhile-BB@0x0),
    2-If(testWhile-BB@0x6),
    4-Statement(testWhile-BB@0xa),
    3-Return(testWhile-BB@0x24)
    ]
Gi[1]:（一阶图）
    [
    Interval-testWhile-BB@0x0({1-Statement(testWhile-BB@0x0)}), 
    Interval-testWhile-BB@0x6({2-If(testWhile-BB@0x6), 3-Return(testWhile-BB@0x24), 4-Statement(testWhile-BB@0xa)})
    ]
Li[0]:（一阶图的头节点）
    {
    1-Statement(testWhile-BB@0x0): Interval-testWhile-BB@0x0({1-Statement(testWhile-BB@0x0)}),
    2-If(testWhile-BB@0x6): Interval-testWhile-BB@0x6({2-If(testWhile-BB@0x6), 3-Return(testWhile-BB@0x24), 4-Statement(testWhile-BB@0xa)})
    }
Li[1]:（二阶图的头节点）
    {
    Interval-testWhile-BB@0x0({1-Statement(testWhile-BB@0x0)}): Interval-Interval-testWhile-BB@0x0({Interval-testWhile-BB@0x6({2-If(testWhile-BB@0x6), 3-Return(testWhile-BB@0x24), 4-Statement(testWhile-BB@0xa)}), Interval-testWhile-BB@0x0({1-Statement(testWhile-BB@0x0)})})
    }
遍历Li[0]，`BB[@0x0](https://github.com/0x0
"@0x0")`没有前驱节点；`BB[@0x6](https://github.com/0x6
"@0x6")`的第一个前驱节点`BB[@0x0](https://github.com/0x0
"@0x0")`和它不在同一个区间图中；第二个前驱节点`BB[@0xa](https://github.com/0xa
"@0xa")`和它在同一个区间图中(`BB[@0x6](https://github.com/0x6
"@0x6")`为头节点，包含节点`BB[@0x6](https://github.com/0x6
"@0x6")`，`BB[@0x24](https://github.com/0x24
"@0x24")`，`BB[@0xa](https://github.com/0xa "@0xa")`的区间图)，所以标记一个循环。
**if_struct函数**
标记`x.follow['if'] = y`，表示x这个if{…}else{…}结束之后应该是y节点。
**switch_struct函数**
标记`x.follow['switch'] = y`，表示x这个switch结束之后应该是y节点。
**short_circuit_struct函数**
短路求值，将两个CondBlock合并成一个。总共四种情况。
第一种情况合并前后：
第二种情况合并前后：
第三种情况合并前后：
第四种情况合并前后：
实际例子：
        public static int testShortCircuit4(int p, int i) {
            if ((p <= 0 || i == 0) && (p == i * 2 || i == p / 3)) {
                return -p;
            }
            return p + 1;
        }
pre-structured:
structured:
**while_block_struct函数**
根据loop_struct函数识别出的循环添加一个LoopBlock类型的node并删除原来的node。
**catch_struct函数**
通过reverse_catch_edges遍历所有catch块，支配其的节点即为对应的try块，据此新建CatchBlock和TryBlock，加入图中并更新图。
**update_dom函数**
更新支配树。
**identify_structures函数**
主要就是调用前面提到的这些函数识别出一些结构。
### **dataflow.py**
数据流分析。一些基本知识可以参考下面这几篇文章。
[静态分析之数据流分析与 SSA 入门
（一）](https://blog.csdn.net/nklofy/article/details/83963125)
[静态分析之数据流分析与 SSA 入门
（二）](https://blog.csdn.net/nklofy/article/details/84206428)
[反编译器C-Decompiler关键技术的研究和实现](https://bbs.pediy.com/thread-133874.htm)
实际例子：
        public int test1(int val) {
            return (val + 16) - (this.value * 60);
        }
get_loc_with_ins返回的loc和ins：
    0 ASSIGN(VAR_0, CST_16)
    1 ASSIGN(VAR_1, (+ PARAM_4 VAR_0))
    get_used_vars：0，4
    2 ASSIGN(VAR_2, THIS.value)
    get_used_vars：3
    3 ASSIGN(VAR_2, (* VAR_2 CST_60))
    get_used_vars：2
    4 ASSIGN(VAR_1, (- VAR_1 VAR_2))
    get_used_vars：1，2
    5 RETURN(VAR_1)
**register_propagation函数**
寄存器传播。
**build_def_use函数**
对于上面的例子构建的DU和UD链：
use_defs:
(x, y):[z]表示第y行的var x是在第z行定义的
{ (0, 1): [0], (4, 1): [-2], (3, 2): [-1], (2, 3): [2], (1, 4): [1], (2, 4):
[3], (1, 5): [4] }
def_uses:
(x, y):[z]表示第y行定义的var x在第z行使用
{ (0, 0): [1], (4, -2): [1], (3, -1): [2], (2, 2): [3], (1, 1): [4], (2, 3):
[4], (1, 4): [5]} )
-1表示第一个参数，-2表示第二个参数。
**split_variables函数**
静态单赋值SSA，通过分割变量使得每个变量仅有唯一的赋值。
对于上面的例子split_variables之后的DU和UD链：
use_defs:
{ (0, 1): [0], (4, 1): [-2], (3, 2): [-1], (5, 4): [1], (6, 5): [4], (7, 3):
[2], (8, 4): [3] }
def_uses:
{ (0, 0): [1], (4, -2): [1], (3, -1): [2], (5, 1): [4], (6, 4): [5], (7, 2):
[3], (8, 3): [4]} )
**dead_code_elimination函数**
清除死代码并更新DU和UD链。