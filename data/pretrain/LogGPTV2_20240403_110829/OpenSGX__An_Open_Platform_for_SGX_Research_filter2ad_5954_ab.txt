Enclave Page Cache Map
Enclave Control Structure
Thread Control Structure
State Save Area
Page Information
Security Information
Paging Crypto MetaData
Enclave Signature Structure
EINIT Token Structure
Report Structure
Report Target Info
Key Request
Version Array
S
Description
✓
Meta-data of an EPC page
✓
Meta-data of an enclave
✓
Meta-data of a single thread
✓
Used to save processor state
✓
Used for EPC-management
✓
Meta-data of an enclave page
✓
Used to track a page-out page
✓
Enclave certificate
✓
Used to validate the enclave
✓
Return structure of EREPORT
✓
Parameter for EREPORT
✓
Parameter for EGETKEY
Version for evicted EPC pages ✓
TABLE II: Intel SGX Data Structure implemented in OpenSGX,
marked ✓in S if supported.
A. Intel SGX
II. BACKGROUND
Intel SGX is an extension to the x86 instruction set
architecture that enables an application to instantiate a protected
container, called an enclave, containing code and data. The
memory region residing in the enclave is protected against
all external software access including privileged ones such
as operating system and the hypervisor. To support enclave,
SGX consists of a set of new instructions and memory access
changes. Also, SGX supports remote attestation and sealing
that allow remotely verifying an enclave and securely saving
enclave data in non-volatile memory for future use, respectively.
SGX memory protection. When the processor accesses
enclave data, it automatically transfers to a new CPU mode,
called enclave mode. The enclave mode enforces additional
hardware checks on every single memory access, such that
only code inside the enclave can access its own enclave region.
That is, memory accesses from both non-enclaves and different
enclaves are prohibited. Note that memory access policy on
the non-enclave regions remains the same, i.e., traditional page
walk is performed for both accesses from non-enclaves and
enclaves to non-enclave memory.
The enclave data is stored in a reserved memory region
2
called Enclave Page Cache (EPC). To defend against known
memory attacks such as memory snooping, memory content in
EPC is encrypted by the Memory Encryption Engine (MEE).
The memory content in EPC is only decrypted when entering
the CPU package, where the code and data are protected by
the enclave mode, and then re-encrypted when leaving to the
EPC memory region.
Instruction Set Architecture (ISA). SGX introduces a set
of instructions and data structures to support enclave and
EPC-related operations (see Table I and Table II). Instruc-
tions are classified into user-level instructions (ring 3) and
privileged instructions (ring 0). Note that the family of user-
lever/privileged instructions is called ENCLU/ENCLS. For example,
the user-level instruction EENTER allows the host program to
transfer the program’s control to an existing enclave program,
while ECREATE is a privileged instruction that allocates available
EPC pages for a new enclave.
B. OpenSGX Specification
One might imagine that faithfully implementing the Intel
SGX specification is sufficient for producing a usable em-
ulation and development environment. However, the speci-
fication leaves system software including operating system
support, debugging, and toolchains for software development,
largely under-specified. For example, many SGX instructions
(see Table I) require kernel privilege (ring 0), but system call
interface and operating system service/support for SGX have
not been explored. The system call interface is critical for SGX
applications because they must rely on necessary support from
an operating system that they do not trust. To fill this gap, we
explore system support for OpenSGX application developers
and define an interface with the operating system within the
SGX OS emulation layer, which provides service to OpenSGX
applications.
Disclaimers and threat model. OpenSGX does not support
binary-compatibility with Intel SGX because no specification
or standardization exists for the binary-level interoperability1.
Although OpenSGX supports most instructions specified, we
do not implement all instructions. Specifically, OpenSGX does
not implement debugging instructions, as our software layer
can provide a rich environment for debugging (e.g., familiar
GDB stub). OpenSGX is a software emulator and provides no
security guarantees. Its security guarantees are not at all the
same level as Intel SGX.
However, we consider the same threat model of Intel
SGX in designing the emulation platform. In particular, as
in Haven [5], we assume an adversary who has control
over all software components, including the operating system
and hypervisor, and hardware except the CPU package. In
the design and implementation of the system call interface,
OpenSGX considers mechanisms to thwart attacks that can be
mounted by system software, such as the Iago attacks [11].
For example, we integrate EAUG/EACCEPT instructions into the
dynamic memory allocation API to perform validation on newly
allocated memory, which a malicious OS cannot simply bypass.
However, protection against denial-of-service is out of scope;
an adversary can still launch a denial-of-service attack on
SGX [36]. Finally, OpenSGX cannot provide accurate (i.e.,
wall-clock) performance measures because it is a software
1Recent Windows 10 has been reported to have a preliminary support, SGX
R1, as described in a technical report [25]
Fig. 1: Overview of OpenSGX’s design and memory state of an
active enclave program: A packaged program, marked as Wrapper
and Enclave Program together, runs as a single process in the same
virtual address space. Since Intel SGX uses privilege instructions to
initialize and setup enclaves, OpenSGX introduces a set of system
calls to service the requests from the Wrapper program. The grayed
boxes represent isolated enclave pages, and stripped boxes depict the
shared memory region used to service the enclave program (note this
interface is not specified in Intel SGX [21, 22]).
emulator. Instead, OpenSGX helps developers and researchers
to speculate on potential performance issues by providing its
emulated performance statistics similar to that of the perf
counter.
III. SYSTEM OVERVIEW
OpenSGX emulates the hardware components of Intel SGX
and its ecosystem, which includes operating system interfaces
and user library, in order to run enclave programs. In this section,
we describe a high-level overview of OpenSGX’s design and
lifecycle of an enclave program starting from its development.
A. OpenSGX Components
To implement Intel SGX instructions and emulate its
hardware components, we leverage QEMU. In particular, we
implement OpenSGX’s OS emulation layer and hardware
emulation on top of QEMU’s user-mode emulation by extending
the binary translation. Figure 1 illustrates the overall design
components. OpenSGX consists of six components that work
together to provide a fully functional SGX development
environment. Each component is summarized below and the
detail is explained in §IV.
• Emulated Intel SGX hardware: We implement hardware
components, including SGX instructions, SGX data struc-
tures, EPC and its access protection, and the SGX processor
key as software within QEMU (§IV-A). Note that these
components are actually part of the processor or reside in the
EPC as part of protected data structures. OpenSGX provides
a tool for specifying hardware configurations, such as the
size of EPC and the SGX processor key.
• OS emulation: Some SGX instructions (ENCLS) are priv-
ileged instructions that should be executed by the kernel.
Thus, we define new system calls that the emulated enclave
programs use to perform SGX operations, such as enclave
provisioning and dynamic memory allocation (§IV-B). Note
3
QEMU SGXEnclave ProgramCodeEPCDataEPCStackEPC...HeapEPC...LibEPC...EPCMUser process (single address space)SGX OS EmulationENCLS(e.g., EINIT)ENCLU(e.g., EEXIT)ENCLU(e.g., EENTER)TrampolineStubSGX LibWrappersys_sgxinit()Package InfoEntry pointMeasurementKey ...Privilege boundarySystem callsboundarythat this interface is crucial for development, but is not
defined in Intel SGX specifications. Our interface allows
user programs to easily use Intel SGX features. The current
version supports only user-mode emulation, but we plan to
extend OpenSGX for system-wide emulation as well.
• Enclave program loader: To launch an enclave program,
code and data sections to be executed inside the enclave
must be properly loaded to EPC, beyond the measurement
and attestation. ENCLS instructions allow provisioning of
enclave on an EPC page-by-page basis. Our OpenSGX loader
automatically takes care of the process by loading the enclave
code and data sections into EPC and provisioning an enclave
heap and stack regions (§IV-C).
• OpenSGX user library (sgxlib): OpenSGX provides a set
of useful functions, (sgxlib), that can be used inside and
outside the enclave (§IV-D). It provides wrappers for all
SGX user-level instructions, as well as high-level APIs—
for example, sgx_host_read/write() for copying data from
and to an enclave program. The in-enclave APIs that sgxlib
provides have been designed to thwart known attack vectors
such as Iago attacks and more generally, deputy attacks.
• Debugger support: OpenSGX naturally allows easy debug-
ging of the emulation platform due to the nature of software-
based emulation. However, for SGX applications, QEMU’s
binary translation can make debugging more difficult because
a debugger can only observe translated instructions. Thus,
we extend gdb to map to the instruction being emulated. We
also expose key SGX data structures (e.g., EPCM) through
gdb commands (§IV-E).
• Performance monitoring: Finally, OpenSGX supports per-
formance counters/profiler and allows users to collect perfor-
mance statistics (e.g., the number of enclave-to-host context
switches) about enclave programs (§IV-F).
B. Development Lifecycle with OpenSGX
OpenSGX provides a rich development environment, allow-
ing the research community to easily emulate a program running
inside an enclave. In this section, we show the development
lifecycle of an enclave program and highlight potential research
opportunities that reside at each point of the cycle.
Lifecycle 1: Development. Developing an enclave program
in OpenSGX is as simple as developing an ordinary program
written in C language, using our convenience library, sgxlib.
Figure 2 shows one of the simplest enclave programs.
Developers can solely develop a C program to be executed
inside an enclave, similar to hello.c. We use wrapper.c to
demonstrate how a developer can launch and execute an enclave
program by using the APIs provided by sgxlib. Note that
enclave_main() is merely a default entry point that is loaded
to the enclave in this example. Using the section attributes
and sgxlib APIs, programmers can also specify additional
code and data sections to be loaded in the enclave or create
multiple enclaves. Also, sgxlib defines specific APIs to support
host-enclave communication.
The clear, easy-to-use programming model and a conve-
nience library allow developers to easily create an enclave
program. The separation of enclave code and data sections in
the code also helps them to separate security-sensitive pieces
of application code (PAL) [34] for isolated execution.
Lifecycle 2: Launch. OpenSGX provides a toolchain,
opensgx, to compile the code into an OpenSGX-aware binary
(a .sgx file) linked to sgxlib (see Figure 2). It also generates
a configuration file (a .conf file) that contains the program
measurement (a hash value), signature signed by a specified
RSA key, and other enclave properties that are required to
validate the program during the enclave initialization.
To execute the enclave program, OpenSGX performs the
following tasks: (1) performs the bootstrapping process via
sgx_init(); (2) leverages OpenSGX loader API with program
information obtained from ELF files (e.g., offset and size
of code and data sections) to pre-load the program into
allocated memory; (3) initiates enclave initialization by using
init_enclave(); (4) Once the enclave initialization is done,
the host program transfers the program’s control to the enclave
program via sgx_enter(), which is the wrapper of EENTER.
Lifecycle 3: Execution. OpenSGX enforces the SGX memory
access policy on the enclave program by interposing every
single memory access through QEMU’s binary translation.
Any access violation, such as memory write from non-enclave
memory to enclave memory, results in a general protection
fault.
Since an enclave program can legitimately access its host
memory, any such access can open new attack surfaces to
the enclave. To minimize the attack surfaces, sgxlib provides
substitute APIs that allow an enclave program to avoid the
use of a shared library that resides in the host memory.
OpenSGX also provides a stricter form of communication
protocol by using shared code and data memory, called
trampoline and stub, respectively. After completing tasks in
enclave mode, the enclave program exits this mode with the help
of EEXIT instruction, thereby returning the program’s control
back to the location right after the EENTER instruction. Note
that it is an operating system’s responsibility to reclaim the
EPC pages (i.e., EREMOVE), perhaps when its wrapper process
terminates. However, OpenSGX leaves this clean-up routine
unimplemented, as only one enclave runs on an OpenSGX’s
instance.
Lifecycle 4: Debugging and performance monitoring.
OpenSGX supports debugging and performance monitoring.
Although OpenSGX is not a cycle-accurate emulator, it exposes
a system call to query the OpenSGX emulator about statistics,
such as the number of context switches that occurred and
SGX instructions executed. SGX researchers can utilize this to
estimate the performance implications of an enclave program.
IV. OPENSGX DESIGN
In this section, we provide OpenSGX’s design in various
levels of abstractions, ranging from the hardware emulation to
a user-level library and utilities.
A. Hardware Emulation
OpenSGX emulates the hardware specification of In-
tel SGX by leveraging the dynamic binary translation of
QEMU. OpenSGX enables instruction-to-instruction compati-
bility; achieving binary-to-binary compatibility is presently not
possible because ABI is not officially specified by any entity,
neither by OS nor hardware vendors, yet.
Instruction Set Architecture (ISA). OpenSGX supports
instruction-level compatibility (revision 1 and 2 of Intel SGX)
to SGX-aware binaries by implementing the core Intel SGX
instructions. OpenSGX also provides simple C APIs that directly
4
sgx_init();
/*
1 /* wrapper.c */
2 #include 
3
4 int main(int argc, char **argv)
5 {
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27 }
char *buf = malloc(11);
sgx_host_read(buf, 11);
printf("%s", buf);