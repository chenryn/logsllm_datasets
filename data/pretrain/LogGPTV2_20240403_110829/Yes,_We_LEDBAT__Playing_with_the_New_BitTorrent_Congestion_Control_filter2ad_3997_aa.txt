# Title: Yes, We LEDBAT: Playing with the New BitTorrent Congestion Control Algorithm

## Authors
Dario Rossi, Claudio Testa, and Silvio Valenti  
Telecom ParisTech, Paris, France  
Email: [Your Email Address]

## Abstract
Since December 2008, the official BitTorrent client has adopted a new congestion-control protocol for data transfer, implemented at the application layer and built over UDP at the transport layer. This protocol is known as LEDBAT (Low Extra Delay Background Transport).

In this paper, we study various versions of the LEDBAT protocol, corresponding to different stages in the BitTorrent software evolution, using an active testbed. We focus on single flow scenarios under emulated artificial network conditions, such as additional delay and capacity limitations. To better understand the potential impact of LEDBAT on current Internet traffic, we also consider multiple flow scenarios, investigating the performance of a mixture of TCP and LEDBAT flows. Our results show that LEDBAT has achieved some of its original design goals, though certain issues still need to be addressed.

## 1. Introduction
In December 2008, BitTorrent announced in their developer forum that data transfer would move to UDP. This announcement led to concerns about potential Internet meltdown, as it was initially misinterpreted. However, as discussed at IETF and later recognized online, the BitTorrent development process includes both ISP-friendliness (through AS-aware peer selection) and TCP-friendliness (through a novel congestion control protocol for data transfer).

This work focuses on the latter aspect: BitTorrent co-chairs an IETF Working Group on Low Extra Delay Background Transport (LEDBAT), which has recently released its first draft document. The standard TCP congestion control mechanism relies on packet loss to back off, leading to buffer bloat in low-capacity home networks and poor performance for interactive applications. LEDBAT aims to mitigate this by implementing a distributed congestion control mechanism tailored for non-interactive traffic with lower than Best Effort (i.e., TCP) priority. Its main design goals are to minimize extra delay while saturating available capacity. LEDBAT uses a windowed protocol to infer congestion earlier than TCP by estimating queuing delay variations and modulating the congestion window growth/shrink using a proportional-integral-derivative (PID) controller.

The aim of this work is twofold: to understand the performance of LEDBAT in simple single flow scenarios and to assess the implications of widespread LEDBAT adoption on the current Internet landscape. We use an active-measurement black-box approach to study the official BitTorrent client. While simulations can provide insights, real-world testing is essential due to potential differences in implementation, parameter settings, and the complexity of network dynamics.

## 2. Methodology and Preliminary Insights
To investigate LEDBAT, we adopt an active-measurements black-box experimental approach, analyzing the traffic generated by the BitTorrent client under different network scenarios. We run several versions of the new BitTorrent client on PCs equipped with dual-core processors, using either native Windows XP or Linux with the wine Windows emulator. PCs are connected to the Internet via ADSL access or to a local LAN testbed via Ethernet cards. In the LAN testbed, traffic is routed through a middlebox running a 2.6.28 Linux kernel, which enforces artificial network conditions using netem.

We consider both single flow and multiple flow scenarios. Single flow experiments help understand protocol performance under various network conditions, while multiple flow experiments quantify inter-protocol priority (e.g., with respect to TCP flows) and intra-protocol fairness (e.g., among LEDBAT flows). Each LEDBAT sender-receiver pair is a seeder-leecher pair, and in multiple flow experiments, each pair belongs to a different torrent, ensuring no data exchange between different leechers.

Figure 1 provides insights into the BitTorrent evolution. Each plot shows the first minute of a different BitTorrent version, with a 100 Mbps Ethernet link between the seeder and the middlebox, and a 10 Mbps bottleneck link between the middlebox and the leecher. The one-way delay is set to 50 ms to emulate a scenario with high-speed Internet access.

The plots show significant changes in the application-layer segmentation policy across different LEDBAT versions. For example, the α1 version used small segments of about 350 bytes, resulting in high overhead. Newer versions, such as α2 and β1, start with small segments and gradually increase segment size, achieving a more stable throughput.

Figure 2 depicts the time evolution of the achieved throughput over 4 minutes. The α1 version shows unstable behavior, while α2 and β1 achieve lower but steady throughput. We also compare the throughput of a BitTorrent client using TCP on Windows and Linux, highlighting the impact of networking stack implementation and configuration.

## 3. Experimental Results
In this section, we refine the performance analysis of different LEDBAT flavors by testing the impact of varying network conditions in single flow scenarios. [Continue with detailed results and further analysis.]

---

This optimized version of the text is more structured, coherent, and professional, making it easier to read and understand.