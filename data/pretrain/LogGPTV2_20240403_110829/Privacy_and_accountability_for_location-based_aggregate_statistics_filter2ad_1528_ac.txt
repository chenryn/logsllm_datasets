• Keep track of the number of tuples that have been uploaded
so far (sid) for an aggregate (without leaking this number to
an adversary). Clients use this information to ﬁgure out how
many more tuples they should upload at the server to reach a
total of Uid.
• At the end of the time period for an aggregate id, decrypt the
value of the aggregate result from the server.
Hiding timing. Clients upload tuples according to a staged ran-
domized timing algorithm described in Figure 3; this protocol hides
the tuple generation time from both the server and the SM. The
generation interval corresponds to the interval of aggregation when
clients generate tuples, and the synchronization and upload interval
are added at the end of the generation interval, but are much shorter
(they are not points only to ensure reasonable load per second at the
SM and server).
We now put together all these components and specify the SLP
protocol. Denote an aggregate by id and let quota be the number of
samples a client can upload at id. Let [ts0, ts1] be the sync. interval.
657I. System setup: SM generates a Paillier secret and public key.
II. Client joins: Client obtains the public key from the SM.
III. Upload:
1: Client generates a tuple id, sample and computes T1 :=
2: Client selects a random time ts in the sync. interval and does
◦ GENERATION INTERVAL
id, E[sample] using SM’s public key.
nothing until ts.
◦ SYNCHRONIZATION INTERVAL
3: Client ↔ SM : At time ts, Client requests sid, the number
of tuples other clients already engaged to upload for id from
SM (sid = 0 if Client is the ﬁrst to ask sid for id).
4: Client should upload ∆s
:= min(quota,Uid(ts −
ts0)/(ts1 − ts0)− sid) tuples. If ∆s ≤ 0, but sid  1, the server simply issues a
quota of capabilities during registration. In addition, the server may
want to tie quotas to aggregates. To do so, the server divides the
aggregates into categories. For each category, the server runs system
659setup separately obtaining different SKs and PKs and then gives a
different number of capabilities to clients for each category.
Quota on total uploads. We also have a simple cryptographic
protocol to enforce a quota on how much a client can upload in
total over all aggregates, not presented here due to space constraints;
however, any existing e-cash scheme sufﬁces here [8].
Ensuring reasonable values. As mentioned, in addition to quota
enforcement, for each tuple uploaded, clients prove to the server
that the samples encrypted are in an expected interval of values
(e.g., for speed, the interval is (0, 150)) to prevent clients from