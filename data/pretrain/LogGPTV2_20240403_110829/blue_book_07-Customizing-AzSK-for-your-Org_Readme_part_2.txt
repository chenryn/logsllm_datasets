1. Add Security Verification Tests (SVTs) in VSTS pipeline by following the steps [here](../03-Security-In-CICD#adding-svts-in-the-release-pipeline).
2. Make sure AzSKServerURL and EnableServerAuth settings in the AzSK_SVTs task are setup correctly (Refer step 5 in the document referred above)
Having set the policy URL along with AzSK_SVTs Task, you can verify if your CICD task has been properly setup by following steps [here](../03-Security-In-CICD#verifying-that-the-svts-have-been-added-and-configured-correctly).
Policy owner can monitor the subscriptions being scanned from different environments with the help of application insight telemetry.
```AI Query
customEvents
| where timestamp >= ago(7d)
| where name == "Control Scanned"
| summarize arg_max(timestamp, *)  by Day = bin(timestamp,1d), ScanSource = tostring(customDimensions.ScanSource),tostring(customDimensions.SubscriptionId) 
| summarize SubscriptionCount = count() by Day, ScanSource
| render barchart
```
Output:
![AzSK Scan Logs](../Images/06_AIGraph_Usage.PNG)
## Modifying and customizing org policy 
#### Getting Started
The typical workflow for all policy changes will remain same and will involve the following basic steps:
 1) Go to the folder on your dev box which has your org-customized policies. This could either be the folder you specified while running org policy setup command or the default one used by it. If you don't have policies on your dev box, you can download those using the following cmdlet. (Please note that the OrgName, DepartmentName and PolicyFolderPath values are for illustration only. You may need to replace them with the ones used during your org policy setup.)
      ```PowerShell
      Get-AzSKOrganizationPolicyStatus -SubscriptionId  `
               -OrgName "Contoso" `
               -DepartmentName "IT" `
               -DownloadPolicy `
               -PolicyFolderPath "D:\ContosoPolicies"
      ```
 2) Make modifications to the existing files (or add additional policy files as required)
 3) Run the policy update command to upload all artifacts to the policy server (*Update-AzSKOrganizationPolicy*). It is possible to test policies in local before uploading to server. We will cover this scenario in detail further in this document.
 4) Test in a fresh PS console that the policy change is in effect. (Policy changes do not require re-installation of AzSK.)
Note that you can upload policy files from any folder (e.g., a clone of the originally used/created one). It just needs to 
have the same folder structure as the default one generated by the first-time policy setup and you must specify
the folder path using the '-PolicyFolderPath' parameter.
Because policy on the server works using the 'overlay' approach, **the corresponding file on the server
needs to have only those specific changes that are required (plus some identifying elements in some cases).**
Lastly, note that while making modifications, you should **never** edit the files that came with the AzSK installation folder(%userprofile%\documents\WindowsPowerShell\Modules\AzSK). 
You should create copies of the files you wish to edit, place them in our org-policy folder and make requisite
modifications there.
> **Note**: ServerConfigMetadata.json and AzSK-EasyInstaller.ps1 will always get overwritten on the subsequent run of the command. 
### Basic scenarios for org policy customization
In this section let us look at typical scenarios in which you would want to customize the org policy and ways to accomplish them. 
> Note: To edit policy JSON files, use a friendly JSON editor such as Visual Studio Code. It will save you lot of
> debugging time by telling you when objects are not well-formed (extra commas, missing curly-braces, etc.)! This
> is key because in a lot of policy customization tasks, you will be taking existing JSON objects and removing
> large parts of them (to only keep the things you want to modify).
##### a) Changing the default `'Running AzSK using...'` message
Whenever any user in your org runs an AzSK command after having installed AzSK using your org-specific installer (IWR), 
they should see a message such as the following (note the 'Contoso-IT') indicating that AzSK is running using an org-specific policy:
    Running AzSK cmdlet using ***Contoso-IT*** policy
Notice that here, the default (first-time) org policy setup injects the 'Contoso-IT' based on the OrgName and
the DeptName that you provided when you setup your org policy server. (When users are running without your 
org policy correctly setup, they will see the 'Running AzSK cmdlet using generic (org-neutral)
policy' message which comes from the AzSK public CDN endpoint.)
This message resides in the AzSk.json policy file on the server and the AzSK *always* displays the text 
from the server version of this file.
You may want to change this message to something more detailed. (Or even use this as a mechanism to notify all users
within the org about something related to AzSK that they need to attend to immediately.) 
In this example let us just make a simple change to this message. We will just more '*' characters on either side 
of the 'Contoso-IT' so it stands out a bit.
###### Steps:
 i) Open the AzSk.json from your local org-policy folder.
     Path from example: D:\ContosoPolicies\Config\AzSK.json
 ii) Edit the value for "Policy Message" field by adding 5 '*' characters on each side of 'Contoso-IT' as under:
   ```
   "PolicyMessage" : "Running AzSK cmdlet using ***** Contoso-IT ***** policy"
   ```
 iii) Save the file
 iv) Run the policy update command 
```PowerShell
Update-AzSKOrganizationPolicy -SubscriptionId  `
   -OrgName "Contoso" `
   -DepartmentName "IT" `
   -PolicyFolderPath "D:\ContosoPolicies"
 #If custom resource names are used during setup, you can use below parameters to download policy
Update-AzSKOrganizationPolicy -SubscriptionId  `
   -OrgName "Contoso-IT" `           
   -ResourceGroupName "Contoso-IT-RG" `
   -StorageAccountName "contosoitsa" `
   -AppInsightName "ContosoITAppInsight" `
   -PolicyFolderPath "D:\ContosoPolicies"
```
###### Testing:
The updated policy is now on the policy server. You can ask another person to test this by running any AzSK cmdlet
(e.g., Get-AzSKInfo) in a **fresh** PS console. When the command starts, it will show an updated message as in the 
image below:
![org Policy - Changed Message](../Images/07_OrgPolicy_Chg_Org_Policy_Msg_PS.PNG) 
This change will be effective across your organization immediately. Anyone running AzSK commands (in fresh PS sessions)
should see the new message. 
##### b) Customize output folder for my org
Usually, when we run AzSK command the results go to the default folder i.e.  
C:\Users\\AppData\Local\Microsoft\AzSKLogs\Sub_[yourSubscriptionName]\20170331_142819. 
The default location for log storage can be customized in a custom org policy setup. Post customization the scan results will be stored in that particular location.
###### Steps:
i) Open the AzSk.json from your local org-policy folder that you have downloaded using.
```PowerShell
Get-AzSKOrganizationPolicyStatus -SubscriptionId  `
         -OrgName "Contoso" `
         -DepartmentName "IT" `
         -DownloadPolicy `
         -PolicyFolderPath "D:\ContosoPolicies"
```
ii) Add a new property 'OutputFolderPath' and provide the required destination path where you want to store the scan results. 
E.g.
```PowerShell
     "OutputFolderPath":  "" # D:\AzSKLogs
```
iii) Save the AzSK.json file and rerun the policy update or setup command (the same command you ran for the first-time setup)
###### Testing: 
You can validate the changes by running ‘gai -infotype hostinfo’. 
![Validate-OutputFolderPath](../Images/07_Custom_Policy_Output_Folder_path.PNG) 
Now if anyone in your org starts a fresh PS session and runs AzSK scan, the results will be stored in the location defined in the OutputFolderPath property added in step ii.
![Store Log-Given path](../Images/07_Custom_Policy_Scan_Result.PNG) 
##### c) Changing a control setting for specific controls 
Let us now change some numeric setting for a control. A typical setting you may want to tweak is the maximum number of
owners/admins allowed for your org's subscriptions.  It is verified in one of the subscription security controls. (The default value is 5.)
This setting resides in a file called ControlSettings.json. Because the first-time org policy setup does not
customize anything from this, we will first need to copy this file from the local AzSK installation.
The local version of this file should be in the following folder:
```PowerShell
    %userprofile%\Documents\WindowsPowerShell\Modules\AzSK\\Framework\Configurations\SVT
```
   ![Local AzSK Policies](../Images/07_OrgPolicy_Local_Policy_Folder.PNG) 
Note that the 'Configurations' folder in the above picture holds all policy files (for all features) of AzSK. We 
will make copies of files we need to change from here and place the changed versions in the org-policy folder. 
Again, you should **never** edit any file directly in the local installation policy folder of AzSK. 
Rather, **always** copy the file to your own org-policy folder and edit it there.
###### Steps:
 i) Copy the ControlSettings.json from the AzSK installation to your org-policy folder
 ii) Remove everything except the "NoOfApprovedAdmins" line while keeping the JSON object hierarchy/structure intact
    ![Edit Number of Admins](../Images/07_OrgPolicy_Chg_Admin_Count.PNG) 
 iii) Save the file
 iv) Rerun the policy update or setup command (the same command you ran for the first-time setup)
###### Testing: 
Anyone in your org can now start a fresh PS console and the result of the evaluation of the number of owners/admins control in 
the subscription security scan (Get-AzSKSubscriptionSecurityStatus) should reflect that the new setting is in 
effect. (E.g., if you change the max count to 3 and they had 4 owners/admins in their subscription, then the result for control (Azure_Subscription_AuthZ_Limit_Admin_Owner_Count) will change from 'Passed' to 'Failed'.)
##### d) Customizing specific controls for a service 
In this example, we will make a slightly more involved change in the context of a specific SVT (Storage). 
Imagine that you want to turn off the evaluation of some control altogether (regardless of whether people use the `-UseBaselineControls` parameter or not).
Also, for another control, you want people to use a recommendation which leverages an internal tool the security team
in your org has developed. Let us do this for the Storage.json file. Specifically, we will:
1. Turn off the evaluation of `Azure_Storage_Audit_Issue_Alert_AuthN_Req` altogether.
2. Modify severity of `Azure_Storage_AuthN_Dont_Allow_Anonymous` to `Critical` for our org (it is `High` by default).
3. Change the recommendation for people in our org to follow if they need to address an issue with the `Azure_Storage_DP_Encrypt_In_Transit` control.
4. Disable capability to attest the control `Azure_Storage_DP_Restrict_CORS_Access` by adding 'ValidAttestationStates' object.
###### Steps: 
 i) Copy the Storage.json from the AzSK installation to your org-policy folder
 ii) Remove everything except the ControlID, the Id and specific property we want to modify as mentioned above. 
 iii) Make changes to the properties of the respective controls so that the final JSON looks like the below. 
```JSON
{
  "Controls": [
   {
      "ControlID": "Azure_Storage_AuthN_Dont_Allow_Anonymous",
      "Id": "AzureStorage110",
      "ControlSeverity": "Critical"
   },
   {
      "ControlID": "Azure_Storage_Audit_Issue_Alert_AuthN_Req",
      "Id": "AzureStorage120",
      "Enabled": false
   },
   {
      "ControlID": "Azure_Storage_DP_Encrypt_In_Transit",
      "Id": "AzureStorage160",
      "Recommendation": "**Note**: Use our Contoso-IT-EncryptInTransit.ps1 tool for this!"
   },
   {
      "ControlID": "Azure_Storage_DP_Restrict_CORS_Access",
      "ValidAttestationStates" : ["None"]
   }
  ]
}
```
> **Note:** The 'Id' field is used for identifying the control for policy merging. We are keeping the 'ControlID'
> field only because of the readability.
 iii) Save the file
 iv) Rerun the org policy update or setup command (the same command you ran for the first-time setup)
###### Testing: 
Someone in your org can test this change using the `Get-AzSKAzureServicesSecurityStatus` command on a target
resource group which contains a storage account. If run with the `-UseBaselineControls` switch, you will see that
the control Azure_Storage_AuthN_Dont_Allow_Anonymous shows as `Critical` in the output CSV and the recommendation for control Azure_Storage_DP_Encrypt_In_Transit has changed to
the custom (internal tool) recommendation you wanted people in your org to follow. 
Likewise, even after you run the scan without the `-UseBaselineControls` parameter, you will see that the control Azure_Storage_Audit_Issue_Alert_AuthN_Req is not evaluated and does not
appear in the resulting CSV file. 
##### e) Creating a custom control 'baseline' for your org
A powerful capability of AzSK is the ability for an org to define a baseline control set on the policy server
that can be leveraged by all individuals in the org (and in other AzSK scenarios like CICD, CA, etc.) via the "-UseBaselineControls" parameter
during scan commands. 
By default, when someone runs the scan with "-UseBaselineControls" parameter, it leverages the set of
controls listed as baseline in the ControlSettings.json file present on default AzSK CDN endpoint. 
However, once you have set up an org policy server for your organization, this CDN endpoint is no more in use. (As a 
side note, you can always 'simulate' CDN-based/org-neutral execution by removing or renaming your 
`%localappdata%\Microsoft\AzSK\AzSKSettings.json` file.) Thus, after org policy is setup, there will 
not be a 'baseline' control set defined for your organization. Indeed, if you run any of the scan commands using the
"-UseBaselineControls" switch, you will see exception "There are no baseline controls defined for your org. No controls will be scanned."
To define baseline controls for your org, you will need to define update the ControlSettings.json
file as per the steps below-
(We assume that you have tried the max owner/admin count steps in (b) above and edited the ControlSettings.json 
file is already present in your org policy folder.)
 i) Edit the ControlSettings.json file to add a 'BaselineControls' object as per below:
```JSON
{
   "NoOfApprovedAdmins": 1,
   "BaselineControls": {
      "ResourceTypeControlIdMappingList": [
         {
            "ResourceType": "AppService",
            "ControlIds": [
               "Azure_AppService_DP_Dont_Allow_HTTP_Access",
               "Azure_AppService_AuthN_Use_AAD_for_Client_AuthN"
            ]
         },
         {
            "ResourceType": "Storage",
            "ControlIds": [
               "Azure_Storage_AuthN_Dont_Allow_Anonymous",
               "Azure_Storage_DP_Encrypt_In_Transit"
            ]
         }
      ],
      "SubscriptionControlIdList": [
         "Azure_Subscription_AuthZ_Limit_Admin_Owner_Count",
         "Azure_Subscription_AuthZ_Dont_Use_NonAD_Identities",
         "Azure_Subscription_Config_Azure_Security_Center"
      ]
   }
}
```
> Notice how, apart from the couple of extra elements at the end, the baseline set is pretty much a list of 'ResourceType'
and 'ControlIDs' for that resource...making it fairly easy to customize/tweak your own org baseline. 
> Here the name and casing of the resource type name must match that of the policy JSON file for the corresponding resource's JSON file > in the SVT folder and the control ids must match those included in the JSON file. 
> Note: Here we have used a very simple baseline with just a couple of resource types and a very small control set.
> A more realistic baseline control set will be more expansive. You can refer CSEO defined baseline using ControlSettings file [here](https://github.com/azsk/DevOpsKit/blob/master/src/OSSConfiguration/ControlSettings.json).
 ii) Save the ControlSettings.json file
 iii) Confirm that an entry for ControlSettings.json is already there in the ServerConfigMetadata.json file. (Else see step-iii in (c) above.)
 iv) Run the policy setup command (the same command you ran for the first-time setup)
###### Testing:
To test that the baseline controls set is in effect, anyone in your org can start a fresh PS console and run the subscription
and resources security cmdlets with the `-UseBaselineControls` parameter. You will see that regardless of the actual
types of Azure resources present in their subscriptions, only the ones mentioned in the baseline get evaluated in the scan
and, even for those, only the baseline controls get evaluated.
> **Note:** Similar to baseline control, you can also define preview baseline set with the help of similar property "PreviewBaselineControls" in ControlSettings.json. This preview set gets scanned using parameter `-UsePreviewBaselineControls` with scan commands.
##### f) Customizing Severity labels 