这是微软提供的对象包装程序，⽤于对象安装
包
8
rt.jar是java核⼼源代码包，原版有61m，我们主要的精简也就是从这⾥⼊⼿。原理是jar包运⾏是加
上-XX:+TraceClassLoading参数可以打印出所有被加载过的class⽂件，然后在对这部分class进⾏⼆次
打包，⽣成我们的精简rt.jar。这⾥借MG师傅的图⼀⽤： 
精简rt.jar 
包。
policytool.exe 
策略⼯具，⽤于管理⽤户策略⽂件
(.java.policy)。 
rmic.exe 
Java RMI 编译器，为使⽤JRMP或IIOP协议的远
程对象⽣成stub、skeleton、和tie类，也⽤于⽣
成OMG IDL。 
rmid.exe 
Java RMI 激活系统守护进程，rmid启动激活系统
守护进程，允许在虚拟机中注册或激活对象。
rmiregistry.exe 
Java 远程对象注册表，⽤于在当前主机的指定端
⼝上创建并启动⼀个远程对象注册表。
schemagen.exe 
XML schema⽣成器，⽤于⽣成XML schema⽂
件。
serialver.exe 
序列版本命令，⽤于⽣成并返回
serialVersionUID。 
servertool.exe 
Java IDL 服务器⼯具，⽤于注册、取消注册、启
动和终⽌持久化的服务器。
tnameserv.exe 
Java IDL瞬时命名服务。 
unpack200.exe 
JAR⽂件解压⼯具，将⼀个由pack200打包的⽂
件解压提取为JAR⽂件。 
wsgen.exe 
XML Web Service 2.0的Java API，⽣成⽤于
JAX-WS Web Service的JAX-WS便携式产物。 
wsimport.exe 
XML Web Service 2.0的Java API，主要⽤于根据
服务端发布的wsdl⽂件⽣成客户端存根及框架 
xjc.exe 
主要⽤于根据XML schema⽂件⽣成对应的Java
类。
9
代码是参考MG1937师傅的这篇⽂章，https://www.cnblogs.com/aldys4/p/14879607.html，修改
后代码如下：
10
Plain Text
复制代码
import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.ArrayList;
import java.util.List;
public class Main {
    public static void main(String[] arg) throws IOException {
        Runtime runtime = Runtime.getRuntime();
        String[] command = {"java", "-jar", "-XX:+TraceClassLoading", 
"D:\\ShellcodeLoader_jar\\ShellcodeLoader.jar", "aaaa"}; //这⾥要加上参数
        Process process = runtime.exec(command);
        BufferedReader bReader = new BufferedReader(new 
InputStreamReader(process.getInputStream()));
        StringBuffer sBuffer = new StringBuffer();
        List list = new ArrayList();
        int i = 0;
        String lineString;
        while ((lineString = bReader.readLine()) != null) {
            String core = getCore(lineString);
            if (core != "") {
                sBuffer.append("\n" + core);
                list.add(getCore(lineString.replace(".", "/")));
            }
            i++;
        }
        bReader.close();
        System.out.println(sBuffer.toString());
        list.add(0, "D:\\rt.jar");
        list.add(0, "xvf");
        list.add(0, "jar");
        String[] jar = list.toArray(new String[list.size()]);
        process = runtime.exec(jar);
        getOutput(process);
        System.out.println("Load class:" + i);
        System.out.println("jar xvf done!");
        String[] cmdJarPackage = cmd("jar cvf rt.jar com java javax META-
INF org sun sunw");
        runtime.exec(cmdJarPackage);
        System.out.println("All done!");
    }
    public static String getCore(String line) {
        String result = null;
1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
11
        if (line.startsWith("[Loaded")) {
            if (line.indexOf(".jna.") > 0 || line.indexOf("asexploits") > 
0) {
                return "";//过滤jna包跟我们⾃⼰的包名
            } else {
                result = line.split(" ")[1];
            }
            return result;
        } else {
            return "";
        }
    }
    public static String[] cmd(String cmd) {
        return cmd.split(" ");
    }
    public static void getOutput(Process process) throws IOException {
        BufferedReader bReader = new BufferedReader(new 
InputStreamReader(process.getInputStream()));
        while (bReader.readLine() != null) {
            System.out.println("\n" + bReader.readLine());
        }
    }
}
43
44
45
46
47
48
49
50
51
52
53
54
55
56
57
58
59
60
61
62
63
64
65
66
67
68
69
12
这⾥有⼀个坑点，就是第⼀次获取加载的class信息的时候没有加上ShellCode参数，也就会导致有
些运⾏期间才会⽤到的类没有加载。
解决办法就是加上要执⾏的ShellCode，把执⾏过程中所有加载的类都暴露出来，然后再打包。这⾥
的aaaa随便写，只要能⾛到注⼊的过程就可以。可以看到现在的rt.jar已经不报错了。 
精简之前lib⽬录是104m，现在已经压缩到44m了。 
我们压缩后的rt.jar也只有1.8m⼤⼩ 
13
这样肯定还是不够的，剩下⽬录⾥也有很多冗余的⽂件，这部分基本直接删除就可以了，不需要⼆
次打包。另外charsets.jar还是有优化空间的，可以⽤类似rt.jar的⽅法进⾏精简，这⾥就懒得处理了。 
最后的lib只有5m⼤⼩了。 
精简dll 
14
bin⽬录同样很⼤，也是我们要优化的对象。
这⾥采取的办法是⽤process explorer查看程序运⾏时加载了哪些dll或者exe，仅保留这部分，其他
的都可以删掉。
注意这⾥最好加⼀个System.in.read()保持控制台不退出，不然就会⼀闪⽽过，process explorer就
看不到了。
还有⼀个简单的办法，在程序跑起来的同时，删除bin⽬录下所有⽂件，如果提示被占⽤了那么就是
被打开了，把这部分跳过即可。
15
精简过后的bin⽬录⼤概10m，主要是jvm.dll⽐较⼤。他是jvm的核⼼链接库，不能轻易改动。 
环境整好了，接下来就是让他跑起来。⾃解压是钓⻥⽼套路了，搞个vbs来运⾏我们的jar。这⾥的
ShellcodeLoader.jar我硬编码了⼀个弹计算器的ShellCode先测试⼀下。 
⾃解压捆绑执⾏
Plain Text
复制代码
Set ws = CreateObject("Wscript.Shell")
ws.run "cmd /c .\jre\bin\java.exe -jar .\ShellcodeLoader.jar"
1
2
16
执⾏成功
压缩出来6.5m 
17
VT 6/62还好，但是360杀了，估计⾃解压这种已经进特征库了。 
18
⾃解压估计已经被重点监控了，⽤EnigmaVirtualBox把jre跟jar打包成⼀个单独的exe试试 
这⾥install.exe是偷懒⽤msfvenom -p windows/exec⽣成的 
EnigmaVirtualBox打包全部⽂件 
19
可以执⾏，但是会有UAC提示框，不太⾏ 
VT上查杀过半了，看来不能偷懒 
后来⼜⽤C++写了⼀个exe去调⽤，还是杀的⽐较多 
20
不过话说我为什么要打包到⼀起呢，沙箱⾥⾯⼀跑就出来了，这就失去了jar的优势：jar除了可以分
离真正的Payload以外，本身就可以加各种混淆，各种商业软件也都是带混淆的，杀软也不能直接杀。 
转换思路，我可以仅打包⼀个⼈畜⽆害的jre到exe，然后再jre.exe -jar xxx去调⽤。 
打包⽅法同上，打包出来后8.2m，测试⼀下能不能⽤ 
EnigmaVirtualBox打包jre 
21
执⾏成功
xxx不杀 
22
VT测⼀下还有6个引擎检出。。。这tm就是个java.exe啊，还Static ML，真就瞎告呗。这样说我也能搞
⼀个杀毒引擎，看到PE头就杀，名字就叫Deep Static ML。 
本⽂仅⽤于安全研究，请勿⽤于⾮法⽤途。如果有什么问题欢迎交流。
最后