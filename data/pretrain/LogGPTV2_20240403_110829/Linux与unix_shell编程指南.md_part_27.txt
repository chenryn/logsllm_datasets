# Shell 函数详解

## 1. 函数定义
函数由标题（即函数名）和函数体组成。函数名应具有唯一性，以避免调用时产生混淆。定义函数的基本格式如下：

```bash
函数名() {
    命令1
    ...
}
```

或者简洁形式为：
```bash
函数名(){
    命令1
    ...
}
```

在某些情况下，您也可以选择在函数前加上 `function` 关键字，这完全取决于个人偏好或脚本需求。

```bash
function 函数名() {
    ...
}
```

### 特点
- 当执行函数时，它会保留当前Shell环境及其内存信息。
- 如果是调用另一个脚本文件中的代码，则会创建一个新的Shell实例，从而导致原脚本中定义的所有变量丢失。

## 2. 在脚本中使用函数
所有函数必须先定义才能被使用。通常建议将函数定义置于脚本的开始部分，这样Shell解释器在首次遇到它们时即可识别并准备好供后续调用。

**示例：**

```bash
hello() {
    echo "今天的日期是: $(date)"
}

# 调用方式
hello
```

上述例子中，`hello` 是一个简单的函数，其功能是打印当天日期。通过直接输入函数名来调用它。

## 3. 向函数传递参数
向函数传参与普通脚本中使用 `$1`, `$2` 等特殊变量类似。为了便于调试和理解，推荐在函数内部重新命名这些参数变量。

**示例：**

```bash
greet_user() {
    local _USERNAME=$1
    echo "欢迎, $_USERNAME!"
}

greet_user "张三"
```

这里 `_USERNAME` 是局部变量，用于存储从外部传入的第一个参数值。

## 4. 函数返回值
函数可以通过 `return` 语句返回数值给调用者，其中0表示成功，非零值则代表错误发生。

**示例：**

```bash
check_directory() {
    if [ -d "$1" ]; then
        return 0
    else
        return 1
    fi
}

if check_directory "/path/to/directory"; then
    echo "目录存在。"
else
    echo "目录不存在。"
fi
```

## 5. 创建及管理函数库
当积累了一定数量常用的函数后，可以考虑将它们集中存放在一个单独的文件中，并通过 `. functions_file` 的方式将其导入到当前Shell环境中。

**注意事项：**
- 使用 `set` 查看已加载的所有函数。
- 若需修改某个函数，先用 `unset` 移除旧版本，再重新加载更新后的文件。

通过以上介绍，希望能够帮助您更好地理解和运用Shell脚本中的函数特性。