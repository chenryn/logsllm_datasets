web services, it’s still not uncommon for apps to communicate with remote hosts using (somewhat) lower-level
socket classes, using HTTP or some other protocol or scheme.
If a Windows Phone application uses sockets and is written in C#, the app is likely to be using the
System.Net.Sockets namespace or a relevant class in the Windows.Networking.Sockets namespace. When you’re
reviewing code or code recovered via reflection, lines of code similar to the following are likely to indicate the
use of sockets in the app,
using System.Net.Sockets;
or
using Windows.Networking.Sockets.;
The method names for connecting to a remote endpoint, sending data over a socket, and receiving data over a
socket, are, quite predictably, named ConnectAsync(), SendAsync(), and RecvAsync(). So paying attention to the
use of these APIs is helpful when identifying entry points and analyzing an app’s behavior and functionality.
You can find more information on the System.Net .Sockets API on MSDN (http://msdn.microsoft.com/en-
us/library/windows/apps/hh202858(v=vs.105).aspx and http://msdn.microsoft.com/en-
us/library/windows/apps/system.net.sockets(v=vs.105).aspx).
In general, the classes most often encountered from the Windows.Networking .Sockets namespace will be
StreamSocket and DatagramSocket, which are TCP and UDP implementations, respectively. Refer to MSDN
documentation for details on the usage of StreamSocket, DatagramSocket, and other Windows
.Networking.Sockets classes (http://msdn.microsoft.com/en-us/library/windows/apps/br212061.aspx).
Near Field Communication
Some Windows Phone carrier devices support Near Field Communication (NFC), which you can use to transfer
data between devices that are within very close proximity to one another. Typically, this means a couple of
centimeters.
The standard class for sending and receiving string data between an NFC-enabled app and a proximity device in
C# apps is the ProximityDevice class (http://msdn.microsoft.com/en-
us/library/windows.networking.proximity .proximitydevice.aspx).
For example, you may use a code fragment similar to the following to publish a new WriteTag NFC message:
ProximityDevice nfcDevice = ProximityDevice.GetDefault();
[ ... ]
if (nfcDevice != null) // nfc supported by device
{
long nfcId = nfcDevice.PublishMessage(
"Windows.SampleMessageType", "This is an NFC message..");
Debug.WriteLine("id of nfc message is {0}", nfcId);
[ ... ]
}
else { // nfc not supported by device
throwNfcError();
}
Conversely, to receive an NFC message, you may use code such as the following:
ProximityDevice myNfcDevice = ProximityDevice.GetDefault();
// Make sure NFC is supported
if (myNfcDevice != null)
{
long Id = myNfcDevice.SubscribeForMessage(
"Windows.SampleMessageType", nfcMessageReceivedCallback);
}
private void nfcMessageReceivedCallback(
ProximityDevice sender,ProximityMessage message)
{
Debug.WriteLine("nfc message received from {0}:'{1}'",
sender.DeviceId, message.DataAsString);
}
At this point, upon successfully receiving an NFC message, the message .DataAsString contains the data in
string format.
Apps that use NFC APIs must have the ID_CAP_NETWORKING and ID_CAP_PROXIMITY capabilities in their
WMAppManifest.xml or, for APPX packages, presence of the proximity capability in the Package.appxmanifest
file:
Interestingly, Windows Phone’s NFC functionality offers an entry point into protocol handlers (an IPC
mechanism), without the application in question even having subscribed for receiving NFC messages
(http://msdn.microsoft.com/en-us/library/windows/apps/jj206987(v=vs.105).aspx).
This means that if a device receives an NFC message containing a URL, the URL is handled using the protocol
handler registered for that scheme on the receiving device. See the “Protocol Handlers” and “Interprocess
Communication Vulnerabilities” sections later in this chapter for more details.
Barcodes
Many smartphone applications include the ability to consume barcodes via the device’s built-in camera. Some
examples of types of apps with such functionality include apps from commercial retailers, banks, and ticket
vendors for scanning in offers and discounts on products and services. In Windows Phone apps, the most likely
of all the barcodes to be handled are undoubtedly QR codes.
Although no publicly accessible APIs in Windows Phone 8.x exist for reading QR codes at the time of writing,
several commonly used libraries are in the public domain, some of which are open source. A popular one is
ZXing.NET, which has an official codeplex project page (http://zxingnet.codeplex.com).
Applications using ZXing.NET may use code similar to the following to parse the text out of a saved QR code
(which may have been read in via the camera):
IBarcodeReader reader = new BarcodeReader();
var barcodeBitmap = (Bitmap)Bitmap.LoadFrom("saved_qr_code.png");
// decode the barcode
var result = reader.Decode(barcodeBitmap);
// did it work?
if (result != null)
{
txtDecoderType.Text = result.BarcodeFormat.ToString();
txtDecoderContent.Text = result.Text;
}
Upon successful decoding, txtDecoderContent.Text now contains the text represented by the barcode.
Applications that require camera use must have the ID_CAP_ISV_CAMERA capability requested in their
WMAppManifest.xml file, or in the case of Windows Phone 8.1 apps (APPX), the webcam capability must be
requested in the Package .appxmanifest file:
Barcodes may represent interesting data entry points because the application or the server-side application may
treat the recovered data with an unsafe level of trust. Possible examples include trusting data such that non-
existent offers or discounts are obtained due to unsuspecting server-side logic. Windows Phone apps could, in
some cases, also be vulnerable to various types of injection bugs when using parsed-out data from QR codes;
possibilities are application and context dependent.
SD Cards
SD cards may represent an interesting entry point into applications that read from them, because files on SD
cards aren’t necessarily trusted as files may be in the app’s sandbox.
Files on SD media are not necessarily trustworthy, because SD cards are often bought cheaply (such as online or
at markets) and inserted into devices without precautions. SD cards may also be passed around among
colleagues and peers as a means of exchanging files.
The standard API for access to an SD card is Windows.Phone.Storage. Windows Phone 8.x provides SD card
access via file extension registration, meaning an app can only see and read files on the SD card that bear the file
extension(s) the app has registered for. Windows Phone 8.1 also allows write access to SD cards, but again, only
for file extensions the app has registered.
File-handling associations are declared in an app’s WMAppManifest.xml or Package .appxmanifest file. An
application that can read files with the .ext file extension from the SD card may have markup similar to the
following in its manifest file:
Assets/Route_Mapper_Logo33x33.png
Assets/Route_Mapper_Logo69x69.png
Assets/Route_Mapper_Logo176x176.png
.ext
Or, for apps targeting 8.1 only, in the Package.appxmanifest file:
myExt
.ext
Both of these inform the OS to associate the .ext file extension with the application in question.
An app may then use the ExternalStorageDevice, ExternalStorageFolder, and other standard classes to read
.ext files from a connected SD card. The following code retrieves the contents of all .ext files present on the SD
card and displays them in a message box:
ExternalStorageDevice sdCard = (await
ExternalStorage.GetExternalStorageDevicesAsync()).FirstOrDefault();
if (sdCard != null)
{
// Get the root folder on the SD card.
ExternalStorageFolder sdrootFolder = sdCard.RootFolder;
if (sdrootFolder != null)
{
// List all the files on the root folder.
var files = await sdrootFolder.GetFilesAsync();
if (files != null)
{
foreach (ExternalStorageFile file in files)
{
Stream s = await file.OpenForReadAsync();
if (s != null || s.Length == 0)
{
long streamLength = s.Length;
StreamReader sr = new StreamReader(s);
// display file contents
MessageBox.Show(sr.ReadToEnd());
}
else
{
MessageBox.Show(
"There were no files in the root folder");
}
}
}
}
else
{
MessageBox.Show(
"Failed to get root folder on SD card");
}
}
else
{
MessageBox.Show("SD Card not found on device");
}
Apps reading from SD cards require the ID_CAP_REMOVABLE_STORAGE or removableStorage capability to be present
in their WMAppManifest.xml or Package .appxmanifest file (in 8.1-only apps), respectively.
Depending on how an app uses or parses SD card file contents, use of untrusted SD cards could indeed represent
a security risk.
File extension associations are effectively a type of IPC mechanism. (See “Interprocess Communications
Interfaces” and “Interprocess Communication Vulnerabilities” later in this chapter for more details on the
security aspects of file extension handlers in a more general context.)
Interprocess Communications Interfaces
The term Interprocess Communications (IPCs) is used to describe meaningful interaction between two separate
processes. Modern operating systems tend to have a variety of IPC mechanisms, often including named pipes,
local domain sockets, shared memory regions, RPC/LPC interfaces, and others. In mobile operating systems
however, where developers are operating in a much more closed environment, APIs tend to exist for only one or
two IPC mechanisms, and use of the lower-level primitives that are implemented by the OS is discouraged or
even prohibited by the respective application store rules.
The Windows Phone 8.x operating systems offer two officially supported IPC mechanisms: protocol handlers
and file extension associations (also introduced briefly previously). These mechanisms allow third-party apps to
interact with each other, often allowing an app to pass data into another app, or influence its control flow or
operation in some supposedly useful way.
It therefore stands to reason that exposure of IPC interfaces in applications can represent interesting data entry
points, so being able to identify their presence in apps is useful to a security reviewer.
Protocol Handlers
The ability to register custom protocol handlers in your app was introduced in Windows Phone 8, and their use
by developers is not dissimilar to how iOS and Android developers also register and use custom protocol
handlers in their apps. Protocol handlers are also known as URL handlers.
Chiefly, custom protocol handlers allow developers to register their own URL scheme, which can then be called
externally; for example, via a web page or via another store app. After it’s called, the app that owns the protocol
scheme launches at a well-defined entry point function in which the launch and any data passed in via the URL
scheme can be handled as the developer so desires.
You declare protocol handlers in an app’s WMAppManifest.xml or Package .appxmanifest file (for 8.1-only apps),
which you’ll already have in a code review; if code is not available, you can obtain the WMAppManifest.xml file via
filesystem access on a device that has the app installed.
The presence of protocol handlers in an app is apparent by the presence of the  tag in the
WMAppManifest.xml manifest, because this is the tag used to register protocol handlers. For example, the
following XML fragment in the WMAppManifest.xml manifest would result in myproto:// being registered:
[ ... ]
[ ... ]
For 8.1-only apps, something similar to the following would instead be present in the Package.appxmanifest file:
test.jpg
myproto
If a device receives a URL via NFC, the relevant registered protocol handler launches to handle the received URL
(see http://msdn.microsoft.com/en-us/library/windows/apps/jj206987(v=vs.105).aspx), as long as the user
gives permission at a prompt. For example, a nearby Windows Phone device could use the Proximity API in the
following way to make the other phone handle the URL association in the same way it would with a locally
launched URL:
long Id = device.PublishUriMessage(new System.Uri("myUrl:something"));
This may be an interesting attack vector for reaching protocol handler entry points without a need for getting a
user to visit a rogue web page or getting a rogue app on the target device, because many users simply tap Yes (or
equivalent) at all prompts.
File Extension Handlers
File handler associations were mentioned briefly in the earlier “SD Cards” section. To summarize briefly, file
extension handlers are a type of IPC mechanism and work in a similar way to protocol handlers.
Explained concisely, if an application registers to be associated with a given file extension, then every time a file
bearing that extension is opened, the associated app launches and is given the option to handle that file. The app
typically copies the file, parses it, displays it, or otherwise processes it. A good example is a PDF reader—it
registers for association with the .pdf extension, and then opens, parses, and renders PDF files whenever one is
opened.
Because applications that register as file extension handlers often parse the data found in the opened file, this
type of entry point can represent an interesting area in code reviews. Furthermore, because files may be received
as email attachments or via browser downloads, attacks by remote attackers are also a possibility.
You can spot the presence of a file association handler by the presence of  and
 tags in the WMAppManifest.xml file or in Package.appxmanifest for 8.1-only apps. For example, the
following markup registers the .myExt file extension to the app being installed:
Assets/Route_Mapper_Logo33x33.png
Assets/Route_Mapper_Logo69x69.png
Assets/Route_Mapper_Logo176x176.png
.myExt
Or for 8.1-only apps (APPX):
myExt