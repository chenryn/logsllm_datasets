i)}ID∗
1380    28th USENIX Security Symposium
USENIX Association
NSACDB#1:file1#2:file1#4:file1#5:file2#3:file1the permission is valid. To express the start and end of this
range as a WIBE ID, we deﬁne a time-partitioning tree of
depth k over the entire supported time range; now any time
in the supported time range can be represented as a vector
representing a path in the tree from root to leaf. A WIBE ID
is a length-n vector: to represent attestations with a certain
time range, we choose k of those n components to encode
the valid-after time, and another k components to encode
the valid-before time. The remaining n− 2k components are
used for the resource preﬁx. When granting an attestation for
an RTree policy, the issuer encrypts the attestation contents
under the resulting WIBE ID = P(A.policy). Note that for a
time tree of depth k, and a resource preﬁx of length (cid:96), WIBE
must be instantiated with at least n = 2k + (cid:96).
The issuer must also include the policy-speciﬁc WIBE
keys from their own system in the attestations, generated
with ID∗s Q(A.policy), so that upstream attestations with
compatible policies can be discovered. We deﬁne Q for
RTree as: let E be a set of subtrees, each represented as a pre-
ﬁx of a time vector (i.e., a vector where unused components
are wildcards), that covers the time range from the earliest
possible encryption start time to the end of the time range of
the attestation’s validity. Let S be a set of subtrees that covers
the time range from the start of the attestation’s time range to
the latest possible encryption time. Attestations have a max-
imum validity of three years so this limits how long the start
and end ranges need to be. Q returns ID∗s corresponding
to the Cartesian product S × E with each ID∗ also contain-
ing the policy’s resource preﬁx. This allows any upstream
attestation with an overlapping time range and compatible
resource preﬁx to be decrypted by one of the secret keys in
this attestation.
4.4 Efﬁcient Discoverability
In the scheme above, attestations are encrypted under the
partition in the subject’s WIBE system. Unfortunately, it is
subject to two major shortcomings. First, a WIBE ciphertext
hides the message that was encrypted, but not the ID used to
encrypt it; an attacker who guesses the ID of a ciphertext can
efﬁciently verify that guess. Thus, every encrypted attesta-
tion leaks its partition. The second and more serious problem
is that attestations are not efﬁciently discoverable. To un-
derstand this, suppose that Bob has issued many attestations
A1, . . . ,An for Alice, with different policies. After this, an
attestation B is granted to Bob. Alice might be able to form
a proof using B and one of the Ai, but she does not know
which of the Ai has a policy that intersects with B.policy. As
a result, she does not know which private key to use to de-
crypt B, and has to try all of the private keys conveyed by the
Ai. This is infeasible if n is large, and becomes a vector for
denial of service attacks.
If Alice knows B’s partition, then the problem is solved—
Alice can locally index the private keys she has from Bob’s
system, and efﬁciently look up a key that can decrypt B.
However, B cannot include its own partition in plaintext, be-
cause it may leak part of B.policy.
We solve this by encrypting the partition and storing it
in the attestation. For this outer layer of encryption we
use a more standard identity-based encryption (denoted IBE)
that does not permit extracting the identity from the cipher-
text [46, 42] because we do not need wildcards. As with the
WIBE scheme, every entity has its own system, removing
the centralized PKG. The ID used to encrypt the partition is
called the partition label, and is denoted L(A.policy). For
the RTree policy type, it is the RTree namespace of A.policy.
We expect users to have far fewer unique keys for this outer
layer, so they can feasibly try all the keys they have.
We also move the WIBE ciphertext under this IBE encryp-
tion so that the partition cannot be extracted. Finally, we in-
clude IBE keys from the issuer’s IBE system, to allow the
subject to discover the partition of upstream attestations. We
denote the ID∗s corresponding to these keys as M(A.policy).
Because the partition label is simpler in structure than the
partition, deﬁning M(A.policy) = {L(A.policy)} is sufﬁcient.
So far, what gets stored in the attestation is:
IBE.Enc(IBE.mpkA.subject,L(A.policy);P(A.policy)||
WIBE.Enc(WIBE.mpkA.subject,P(A.policy);W||I))
(1)
where W is deﬁned as above, and
I = IBE.KeyGen(IBE.mskIssuer;L(A.policy))
denotes the IBE secret key from the issuer’s system.
4.5 Security Guarantees
We explain here at a high level how the policy-aware RDE
restricts the visibility of attestations when used with RTree.
Formal guarantees are given in Appendix B. In summary, for
each attestation A granting permission on a namespace: en-
tities who have not been granted permissions in that names-
pace in a path from A.subject can only see the subject and re-
vocation commitment. Entities who have been granted some
permissions in the namespace in a path from A.subject can
see the partition (in essence the identiﬁer of the key required
to decrypt it). An entity e can decrypt an attestation A and
use it in a proof if there exists a path, from A.subject to e
where adjacent attestations (including A) have intersecting
partitions. Issuers can encrypt under IDs before the corre-
sponding private keys exist, so we introduce no ordering re-
quirements and no interactivity requirements.
Thus, even though policy-aware RDE permits some enti-
ties to see more attestations than strictly needed to create a
proof of authorization, it still provides a signiﬁcant reduc-
tion in visibility when compared to structural security. We
formalize the security guarantees of RDE in Appendix B.
A number of potential side channels are out of scope for
WAVE, and can be addressed via complementary methods.
Our storage layer does not provide any additional conﬁden-
tiality, so compromised storage servers can see the time of
each operation (e.g., when encrypted attestations are stored),
USENIX Association
28th USENIX Security Symposium    1381
which encrypted attestations are fetched, as well as network-
ing information of the packets arriving at the storage servers
(which could be protected via Tor [1], a proxy, or other
anonymous/secure messaging methods [21]).
Revocation. Although revoked attestations cannot be used in
a proof due to the commitment revocation scheme described
in §6.1, they still confer the ability to decrypt upstream attes-
tations. Therefore we consider them part of the graph in the
formal guarantees (Appendix B). This can be mitigated by
keeping expiry times short and reissuing the attestations. As
there are no ordering or interactivity requirements, short ex-
piries are easy to implement. For example, if attestation #1
in Fig. 2 were to expire and be reissued, it would not require
the reissue of any other attestation.
Integrity. Finally, to maintain integrity, the issuer signs
the attestation with a single-use ephemeral key (pke, ske):
s1 = Sign(ske;A\ s1), where A\ s1 denotes the entire attes-
tation except for s1. Then, the issuer includes s1 in the at-
testation in plaintext. The use of an ephemeral key ensures
the signature does not reveal the issuer’s public key. The is-
suer includes the outer signature in the plaintext header of
the attestation. The issuer signs the ephemeral key pke with
their entity private key, s2 = Sign(skIssuer; pke)), creating a
short signature chain that ensures the attestation cannot be
modiﬁed or forged. The issuer includes s2 in the attestation
encrypted, to avoid revealing the issuer’s public key. In form-
ing a proof, the veriﬁer is allowed to decrypt s2, allowing the
veriﬁer to verify s2 and then s1.
4.6 Reducing Leakage in Proofs
The methods discussed above ensure that a prover is able
to decrypt all the attestations that it requires to build a proof.
However, if a participant simply assembles a list of decrypted
attestations into a proof and gives those attestations to a ver-
iﬁer, the veriﬁer learns not only the attestations in that proof,
but also the WIBE keys in those attestations, which it can
use to decrypt other attestations not in the proof. To solve
this, we split the attestation information into two compart-
ments, one for the prover (that includes keys it needs to de-
crypt other attestations) and one for both the prover and the
veriﬁer (that includes the policy, issuer, expiry, etc.). We en-
crypt the prover compartment with kprover and the prover/ver-
iﬁer compartment with kveriﬁer, both symmetric keys freshly
sampled for each attestation. kprover and kveriﬁer are encrypted
with WIBE. This allows the prover to reveal to the veriﬁer
the necessary parts of an attestation by sending it the AES
veriﬁer key, without allowing the veriﬁer to decrypt other at-
testations. The ﬁnal structure of the attestation is in Fig. 3.
4.7 Discovering an Attestation
Each user’s WAVE client maintains a perspective subgraph
with respect to the user’s entity, which is the portion of the
global authorization graph visible to it. For each vertex (en-
tity) in the perspective subgraph, the client “listens” for new
attestations whose subject is that vertex (entity), using the
Figure 3: Encrypted WAVE attestation structure. The locks
indicate the key used to encrypt the content.
Get and IterQueue API calls to the storage layer. For every
attestation A received, the WAVE client does the following:
1. The client adds edge A to the perspective subgraph.
2. The client searches its local index for IBE keys received
via attestations from A.subject, and tries to decrypt A’s
outer layer using each key. If none of the keys work, it
marks A as interesting and stops processing it.
3. Having decrypted the outer layer in the previous step,
the client can see A.partition.
It searches its index for
a WIBE key received via attestations from A.subject that
are at least as general as A.partition. Unlike the previous
step, this lookup is indexed. If the client does not have
a suitable key, it marks A as partition-known and stops
processing A.
4. Having completed the previous step, the client marks A
as useful and can now see all ﬁelds in A. The client adds
WIBE and IBE keys delegated via A to its index, as keys
in the systems of A.issuer.
6. If A.issuer is already in the perspective subgraph:
5. If the vertex A.issuer is not part of the perspective sub-
graph, then the client adds it and requests the storage layer
for all attestations whose subject is A.issuer. They are
processed by recursively invoking this algorithm, starting
at Step 1 above.
• For each IBE key included in A, the client searches its
local index for interesting attestations whose subject is
A.issuer, and processes them starting at Step 2 above.
• For each WIBE key, the client searches its local index
for matching partition-known attestations whose sub-
ject is A.issuer, and processes them starting at Step 3.
This constitutes a depth-ﬁrst traversal to discover newly vis-
ible parts of the authorization graph revealed by A.
4.8 Extensions
Our RDE construction for RTree is performant but allows
an entity to see attestations not required for correctness
(i.e. partition-compatible attestations that are not usable in
a proof, as deﬁned in Appendix B). This can be marginally
improved by including an additional set of WIBE keys in the
attestations to allow for the full resource (not just the pre-
ﬁx) to be captured by P and Q but this increases the number
1382    28th USENIX Security Symposium
USENIX Association
Prover and Verifier informationPolicy, Issuer, ExpirySigned EphemeralKey    Prover informationDelegated keys     IBE: Partition LabelProver Keys:AES_{PROVER,VERIFIER}     WIBE: PartitionPlaintext HeaderSubject, revocation commitmentSignature by EphemeralKeyPublic EphemeralKeyPartitionWAVE Attestation:Outer layerAES_VERIFIER    AES_PROVERof included keys by a factor of (cid:96). Additionally, using KP-
ABE [35] instead of WIBE would result in smaller attesta-
tions, but higher decryption times.
Aside from different encryption schemes, the RDE tech-
nique also generalizes beyond the RTree policy described
above. Careful selection of P and Q, coupled with the use of
a more expressive encryption scheme such as KP-ABE [35]
allows for the realization of a more expressive policy (e.g.
those discussed in §9) at the cost of decreased performance.
While we have not found this trade-off warranted in our set-
ting, this extension is straightforward and still meets our se-
curity goals. The formalism in Appendix B largely general-
izes to other policy types, but the semantics of compatibility
(Note 1) will change depending on the encryption schemes
used and on the choice of P, Q, L, and M.
5 Scalable Untrusted Storage
To avoid centralized trust when storing attestations, we con-
tribute a storage tier that enforces integrity cryptographically.
This tier is physically decentralized: it is spread over multi-
ple servers owned by different parties.
Importantly, these
individual servers are trusted to maintain availability, but not
integrity (in the spirit of Certiﬁcate Transparency [41]) or
privacy (achieved by RDE, §4). Thus, users and services can
interact with storage servers that anybody operates, without
trusting the servers’ operators, except for availability.
The storage API (Fig. 1b) consists of four functions: Get
and Put are used for placing/retrieving entities, attestations,
name declarations (§6.2) and revocation secrets (§6.1) in
storage; Enqueue places an object hash at the end of a named
queue, and IterQueue allows retrieval from a queue. The
queue functions facilitate discovery, allowing an entity to no-
tify another entity that a new attestation has been granted to
them or a new name declaration has been published.
A blockchain is a natural candidate for such a storage
tier. Multiple servers are responsible for maintaining a
blockchain, and, due to the underlying Merkle tree data
structure, any one server can prove the integrity of its re-
sponses to state queries according to a speciﬁc Merkle tree
root hash, meeting the requirements.
Prior versions of WAVE used an Ethereum blockchain, but
extended use and experimentation revealed this solution to
be inadequate for three reasons: (1) A blockchain introduces
signiﬁcant latency when adding objects to storage (up to a
minute for a conﬁrmed addition in Ethereum). (2) Participat-
ing in a blockchain requires constant network bandwidth and
CPU time. (3) The blockchain does not scale past a few tens
of transactions per second [22], so it could not store attesta-
tions for a global authorization system permitting thousands
of delegations per second.
Although this problem appears solvable with existing
transparency logs such as Certiﬁcate Transparency (CT) [41]
or Key Transparency (KT) [32], neither of those is appropri-
ate. CT cannot efﬁciently prove an object does not exist,
Figure 4: An Unequivocable Log Derived Map (ULDM)
built from two Merkle tree logs and a Merkle tree map
needed for revocations, and KT is not efﬁciently auditable in
our context (§9).
Instead, we propose an Unequivocable Log Derived Map
(ULDM), a transparency log based on the Veriﬁable Log
Backed Map (VLBM) [23]. A VLBM allows the storage
server to form proofs of integrity. The VLBM whitepaper
is brief and incomplete: it does not discuss auditing, such
as which proofs are exchanged or how they are published,
so it is unclear how the VLBM prevents equivocation (i.e.,
presenting different internally consistent views to different
clients). To our knowledge, there is no complete open-source
VLBM implementation (the code in the repository [34] only
implements a subset of the paper, omitting the log of map
roots), so we could not build upon the VLBM or infer its
scheme from the code. The ULDM is our approach to ﬁlling
in the missing pieces, such as an auditing scheme to prevent
equivocation and secure batching to increase performance.
A ULDM is constructed using three Merkle trees, each
serving a different purpose, as shown in Fig. 4. The ﬁrst tree
is the Operation Log, which stores every Put and Enqueue
operation and can prove the log is append-only. These oper-
ations are then processed in batches into the second tree, the
Object Map. This is used to satisfy queries and prove that
objects exist or do not exist within the map. The ULDM Ob-
ject Map is different from [23] as it only stores the hashes of
the objects. Finally, every map root created when a batch is
processed is inserted into the third Merkle tree, the Map Root
Log. This makes the data structure efﬁciently auditable, as
we discuss in §5.4.
Inserting Values
In what follows, for every reply that the storage server pro-
vides, the storage server provides a signature on the reply
along with the relevant version of the Map Root Log.
5.1
To insert a value, the ULDM server: (1) Inserts the value
into the Operation Log.
(2) Creates a new version of the
Object Map that includes the hashes of the new entries. (3)
Inserts the new map root into the Map Root Log. Step 1 is
batched (multiple values are inserted into the Operation Log
together) as is Step 2 (multiple values are inserted into the
USENIX Association
28th USENIX Security Symposium    1383
Map Root 1Map Root 2Map Root 3MapRoot 4135Nil2NilNil4RootObj 1Obj 2Obj 3Obj 4Obj 5Obj 6Obj 7Pending CommitCommitted to MapOperationLogObjectMapMap RootLogObject Map together). Step 3 is synchronous with Step 2.
5.2 Merge Promises
Inserts would ideally be performed synchronously, allowing
the server to return inclusion proofs for all three trees in re-
sponse to the insert. Unfortunately, this results in a severe
performance penalty as the ratio of new data to overhead (in-
ternal nodes in the trees) is poor. This is the same conclusion
that Certiﬁcate Transparency reaches, and we use a similar
solution: batching with promises. When inserting a value,
a client receives a merge promise (called Signed Certiﬁcate
Timestamp in CT) which states that the inserted value will be
present by a certain point in time. In addition to the absolute