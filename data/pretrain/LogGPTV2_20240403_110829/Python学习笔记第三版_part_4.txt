__main__.User
>>> u = User("Q.yuhen", 60)
>>> u
User(name='Q.yuhen', age=60)
且不管代码⽣成过程如何，其结果要么以模块导⼊⽅式执⾏，要么通过调⽤ eval、exec 函
数执⾏。这两个内置函数使⽤很简单，eval 执⾏单个表达式，exec 应对复杂代码块。它们
接受字符串或已编译好的代码对象（code）作为参数。如果直接传⼊字符串，会在编译和
执⾏前检查是否符合 Python 语法规则。
>>> s = input() # 输⼊入表达式，⽐比如数学运算。
(1 + 2) * 3
!32
学习笔记 . 第三版
>>> eval(s) # 执⾏行行表达式。
9
>>> s = """
def test():
print("hello, world!")
test()
"""
>>> exec(s) # 执⾏行行多条语句句。
hello, world!
⽆论选择哪种⽅式执⾏，都必须有相应的上下⽂环境。默认情况下，直接使⽤当前 globals、
locals 名字空间。如同普通代码那样，从中读取⽬标对象，或写⼊新值。
>>> x = 100
>>> def test():
y = 200
print(eval("x + y")) # 从上下⽂文名字空间读取 x、y 值。
>>> test()
300
>>> def test():
print("test:", id(globals()), id(locals()))
exec("print('exec:', id(globals()), id(locals()))") # 对⽐比名字空间 id 值。
>>> test()
test: 4471161768 4468227456
exec: 4471161768 4468227456
有了操作上下⽂名字空间的能⼒，动态代码就可向外部环境 “注⼊” 新的成员。⽐如说构建
新的类型，或导⼊新的算法逻辑等。最终达到将动态逻辑或其结果融⼊，成为当前体系组
成部分的设计⽬标。
>>> s = """
class X: pass
def hello():
!33
学习笔记 . 第三版
print("hello, world!")
"""
>>> exec(s) # 执⾏行行后，会在名字空间内⽣生成 X 类型和 hello 函数。
>>> X
__main__.X
>>> X()
>>> hello()
hello, world!
某些时候，因动态代码来源的不确定性，基于安全考虑，必须对执⾏过程进⾏隔离，阻⽌
其直接读写环境数据。如此，就需要显式传⼊容器对象作为动态代码的专⽤名字空间，以
类似简易沙箱（sandbox）⽅式执⾏。
根据需要，分别提供 globals、locals 参数，也可共⽤同⼀名字空间。
为保证代码正确执⾏，会⾃动导⼊ __builtins__ 模块，以便调⽤内置函数等成员。
>>> g = {"x": 100}
>>> l = {"y": 200}
>>> eval("x + y", g, l) # 为 globals、locals 分别指定字典。
300
>>> ns = {}
>>> exec("class X: pass", ns) # globals、locals 共⽤用同⼀一字典。
>>> ns
{'X': X, '__builtins__': {...}}
当同时提供两个名字空间参数时，默认总是 locals 优先，除⾮在动态代码⾥明确指定使⽤
globals 作⽤域。这涉及到多层次名字搜索规则 LEGB。在本书后续内容⾥，你会看到搜索
规则和名字空间⼀样⽆处不在，有着巨⼤的影响⼒。
>>> s = """
print(x) # locals.x
!34
学习笔记 . 第三版
global y # globals.y
y += 100
z = x + y # locals.z = l.x + g.y
"""
>>> g = {"x": 10, "y": 20}
>>> l = {"x": 1000}
>>> exec(s, g, l)
1000
>>> g
{'x': 10, 'y': 120}
>>> l
{'x': 1000, 'z': 1120}
前⽂曾提及，在函数作⽤域内，locals 函数总是返回执⾏栈帧（stack frame）名字空间。
因此，即便我们显式提供 locals 名字空间，也⽆法将其 “注⼊” 到动态代码的函数内。
>>> s = """
print(id(locals())) # 我们提供的 locals 参数。
def test():
print(id(locals())) # 函数调⽤用栈帧名字空间。
test()
"""
>>> ns = {}
>>> id(ns)
4473689720
>>> exec(s, ns, ns) # 显然，test.locals 和我们提供的 ns locals 不不同。
4473689720
4474406808
如果是 “动态下载” 的源码⽂件，可尝试⽤标准库 runpy 导⼊执⾏。
!35
学习笔记 . 第三版
2. 内置类型
相⽐⾃定义类型（user-defined），内置类型（built-ins）算是特权阶层。除去它们是复合
数据结构基本构成单元以外，最重要的是享受编译器和虚拟机（运⾏时）深度⽀持。⽐如，
核⼼级别的指令和性能优化，专门设计的⾼效缓存，以及垃圾回收时特别对待等等。
作为 “⾃带电池”（batteries included）的 Python，在这点上可谓丰富之极。很多时候，只
⽤基本数据类型就可完成相对复杂的算法逻辑，更勿⽤说标准库⾥的那些后备之选。
对于内置的基本数据类型，可简单分为数字、序列、映射和集合等⼏类。另根据其实例内
容是否可被更改，又有可变（mutable）和不可变（immutable）之别。
名称 分类 可变类型
int number N
float number N
str sequence N
bytes sequence N
bytearray sequence Y
list sequence Y
tuple sequence N
dict mapping Y
set set Y
frozenset set N
在标准库 collections.abc ⾥列出了相关类型的抽象基类，可据此判断类型基本⾏为⽅式。
>>> import collections.abc
>>> issubclass(str, collections.abc.Sequence)
True
>>> issubclass(str, collections.abc.MutableSequence)
False
⽇常开发时，应优先选择内置类型（含标准库）。除基本性能考虑外，还可得到跨平台兼容性，
以及升级保障。轻易引⼊不成熟的第三⽅代码，会提升整体复杂度，增加潜在错误风险，更不便
于后续升级和代码维护。
!36
学习笔记 . 第三版
2.1 整数
Python 3 将 2.7 ⾥的 int、long 两种整数类型合并为 int，默认采⽤变长结构。虽然这会导
致更多的内存开销，但胜在简化了语⾔规则。
同样不再⽀持表⽰ long 类型的 L 常量后缀。
变长结构允许我们创建超⼤天⽂数字，理论上仅受可分配内存⼤⼩限制。
>>> x = 1
>>> type(x)
int
>>> sys.getsizeof(x)
28
>>> y = 1 >> y
19950631168807583848837421626835850838234968318861924...04792596709376
>>> type(y)
int
>>> sys.getsizeof(y)
1360
从输出结果看，尽管都是 int 类型，但 x 和 y 所占⽤内存⼤⼩差别巨⼤。在底层实现上，通过不
定长结构体（variable length structure）按需分配内存。
对于较长的数字，⼈们为了便于阅读，会以千分位等⽅式进⾏分隔。但因逗号在 Python
语法中有特殊含义，所以改⽤下划线表⽰，且不限分隔位数。
>>> 78,654,321 # 表示 tuple 语法，不不能⽤用做千分位表达。
(78, 654, 321)
>>> 78_654_321
78654321
!37
学习笔记 . 第三版
>>> 786543_21
78654321
除⼗进制外，数字还可以⼆进制（bin）、⼋进制（oct），以及⼗六进制（hex）表⽰。下
划线分隔符号同样适⽤于这些进制的数字常量。
⼆进制可⽤来设计类似位图（bitmap）这类开关标记类型，系统管理命令 chmod 使⽤⼋进
制设置访问权限，⾄于⼗六进制常见于反汇编等逆向操作。
⼋进制不再⽀持 012 这样的格式，只能以 0o（或⼤写）前缀开头。
>>> 0b110011 # bin
51
>>> 0o12 # oct
10
>>> 0x64 # hex
100
>>> 0b_11001_1
51
转换
内置多个函数将整数转换为指定进制的字符串，反向操作⽤ int。它默认识别为⼗进制，
会忽略空格、制表符等多余字符。如指定进制参数，还可省略字符串前缀。
>>> bin(100)
'0b1100100'
>>> oct(100)
'0o144'
>>> hex(100)
'0x64'
>>> int("0b1100100", 2)
100
!38
学习笔记 . 第三版
>>> int("0o144", 8)
100
>>> int("0x64", 16)
100
>>> int("64", 16) # 省略略进制前缀。
100
>>> int(" 100 ") # 忽略略多余空⽩白字符。
100
>>> int("\t100\t")
100
当然，⽤ eval 也能完成转换，⽆⾮是将字符串当作常量表达式⽽已。但相⽐直接以 C 实
现的转换函数，性能要差很多，毕竟动态运⾏需要额外的编译和执⾏开销。
>>> x = eval("0o144")
>>> x
100
还有⼀种转换操作是将整数转换为字节数组，常见于⼆进制⽹络协议和⽂件读写。在这⾥
需要指定字节序（byte order），也就是常说的⼤⼩端（big-endian, little-endian）。
⽆论什么类型的数据，在系统底层都是以字节⽅式存储。以整数 0x1234 为例，可分做两个字节，
⾼位字节 0x12，低位 0x34。不同硬件架构会采取不同的存储顺序，⾼位在前（big-endian）或低
位在前（little-endian），这与其设计有关。
⽇常使⽤较多的 Intel x86、AMD64 都采⽤⼩端。但 ARM 则两者都⽀持，由具体的设备制造商（⾼
通、三星等）指定。另外，TCP/IP ⽹络字节序采⽤⼤端，这属协议定义，与硬件架构和操作系
统⽆关。
转换操作须指定⽬标字节数组⼤⼩，考虑到整数类型是变长结构，故通过⼆进制位长度计
算。另调⽤ sys.byteorder 获取当前系统字节序。
>>> x = 0x1234
>>> n = (x.bit_length() + 8 - 1) // 8 # 计算按 8 位对⻬齐所需字节数。
!39
学习笔记 . 第三版
>>> b = x.to_bytes(2, sys.byteorder)
>>> b.hex()
'3412'
>>> hex(int.from_bytes(b, sys.byteorder))
'0x1234'
运算符
⽀持常见数学运算，但要注意除法在 Python 2 和 3 ⾥的差异。
Python 2.7
>>> 3 / 2
1
>>> type(3 / 2)
Python 3.6
>>> 3 / 2
1.5
>>> type(3 / 2)
除法运算分单斜线和双斜线两种。单斜线称作 True Division，⽆论是否整除，总是返回浮
点数。⽽双斜线 Floor Division 会截掉⼩数部分，仅返回整数结果。
>>> 4 / 2 # true division
2.0
>>> 3 // 2 # floor division
1
如要获取余数，可⽤取模运算符（mod）或 divmod 函数。
>>> 5 % 2
!40
学习笔记 . 第三版
1
>>> divmod(5, 2)
(2, 1)
另⼀个不同之处是，Python 3 不再⽀持数字和⾮数字类型的⼤⼩⽐较操作。
Python 2.7
>>> 1 > ""
False
>>> 1 >> 1 > ""
TypeError: '>' not supported between instances of 'int' and 'str'
>>> 1 >> issubclass(bool, int)
True
>>> isinstance(True, int)
True