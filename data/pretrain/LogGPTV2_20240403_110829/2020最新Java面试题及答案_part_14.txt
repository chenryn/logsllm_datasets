是一个由链表结构组成的双向阻塞队列。所谓双向队列指的你可以从队列的两端插入和移出元素。
双端队列因为多了一个操作队列的入口，在多线程同时入队时，也就减少了一半的竞争。相比其
他的阻塞队列，LinkedBlockingDeque 多了 addFirst，addLast，offerFirst，offerLast，
peekFirst，peekLast 等方法，以 First 单词结尾的方法，表示插入，获取（peek）或移除双端队
列的第一个元素。以 Last 单词结尾的方法，表示插入，获取或移除双端队列的最后一个元素。另
外插入方法add等同于addLast，移除方法remove等效于removeFirst。但是take方法却等同
于takeFirst，不知道是不是Jdk的bug，使用时还是用带有First和Last后缀的方法更清楚。
在初始化 LinkedBlockingDeque 时可以设置容量防止其过渡膨胀。另外双向阻塞队列可以运用在
“工作窃取”模式中。
13/04/2018 Page 83 of 283
4.1.15. CyclicBarrier、CountDownLatch、Semaphore的用法
4.1.15.1. CountDownLatch（线程计数器 ）
CountDownLatch类位于java.util.concurrent包下，利用它可以实现类似计数器的功能。比如有
一个任务 A，它要等待其他 4 个任务执行完毕之后才能执行，此时就可以利用 CountDownLatch
来实现这种功能了。
final CountDownLatch latch = new CountDownLatch(2);
new Thread(){public void run() {
System.out.println("子线程"+Thread.currentThread().getName()+"正在执行");
Thread.sleep(3000);
System.out.println("子线程"+Thread.currentThread().getName()+"执行完毕");
latch.countDown();
};}.start();
new Thread(){ public void run() {
System.out.println("子线程"+Thread.currentThread().getName()+"正在执行");
Thread.sleep(3000);
System.out.println("子线程"+Thread.currentThread().getName()+"执行完毕");
latch.countDown();
};}.start();
System.out.println("等待2个子线程执行完毕...");
latch.await();
System.out.println("2个子线程已经执行完毕");
System.out.println("继续执行主线程");
}
4.1.15.2. CyclicBarrier（回环栅栏-等待至barrier状态再全部同时执行）
字面意思回环栅栏，通过它可以实现让一组线程等待至某个状态之后再全部同时执行。叫做回环
是因为当所有等待线程都被释放以后，CyclicBarrier 可以被重用。我们暂且把这个状态就叫做
barrier，当调用await()方法之后，线程就处于barrier了。
CyclicBarrier中最重要的方法就是await方法，它有2个重载版本：
1. public int await()：用来挂起当前线程，直至所有线程都到达barrier状态再同时执行后续任
务；
2. public int await(long timeout, TimeUnit unit)：让这些线程等待至一定的时间，如果还有
线程没有到达barrier状态就直接让到达barrier的线程执行后续任务。
13/04/2018 Page 84 of 283
具体使用如下，另外CyclicBarrier是可以重用的。
public static void main(String[] args) {
int N = 4;
CyclicBarrier barrier = new CyclicBarrier(N);
for(int i=0;i<N;i++)
new Writer(barrier).start();
}
static class Writer extends Thread{
private CyclicBarrier cyclicBarrier;
public Writer(CyclicBarrier cyclicBarrier) {
this.cyclicBarrier = cyclicBarrier;
}
@Override
public void run() {
try {
Thread.sleep(5000); //以睡眠来模拟线程需要预定写入数据操作
System.out.println("线程"+Thread.currentThread().getName()+"写入数据完
毕，等待其他线程写入完毕");
cyclicBarrier.await();
} catch (InterruptedException e) {
e.printStackTrace();
}catch(BrokenBarrierException e){
e.printStackTrace();
}
System.out.println("所有线程写入完毕，继续处理其他任务，比如数据操作");
}
}
4.1.15.3. Semaphore（信号量-控制同时访问的线程个数）
Semaphore 翻译成字面意思为 信号量，Semaphore 可以控制同时访问的线程个数，通过
acquire() 获取一个许可，如果没有就等待，而 release() 释放一个许可。
Semaphore类中比较重要的几个方法：
1. public void acquire(): 用来获取一个许可，若无许可能够获得，则会一直等待，直到获得许
可。
2. public void acquire(int permits):获取permits个许可
3. public void release() { } :释放许可。注意，在释放许可之前，必须先获获得许可。
4. public void release(int permits) { }:释放permits个许可
上面4个方法都会被阻塞，如果想立即得到执行结果，可以使用下面几个方法
13/04/2018 Page 85 of 283
1. public boolean tryAcquire():尝试获取一个许可，若获取成功，则立即返回 true，若获取失
败，则立即返回false
2. public boolean tryAcquire(long timeout, TimeUnit unit):尝试获取一个许可，若在指定的
时间内获取成功，则立即返回true，否则则立即返回false
3. public boolean tryAcquire(int permits):尝试获取permits个许可，若获取成功，则立即返
回true，若获取失败，则立即返回false
4. public boolean tryAcquire(int permits, long timeout, TimeUnit unit): 尝试获取permits
个许可，若在指定的时间内获取成功，则立即返回true，否则则立即返回false
5. 还可以通过availablePermits()方法得到可用的许可数目。
例子：若一个工厂有5台机器，但是有8个工人，一台机器同时只能被一个工人使用，只有使用完
了，其他工人才能继续使用。那么我们就可以通过Semaphore来实现：
int N = 8; //工人数
Semaphore semaphore = new Semaphore(5); //机器数目
for(int i=0;i<N;i++)
new Worker(i,semaphore).start();
}
static class Worker extends Thread{
private int num;
private Semaphore semaphore;
public Worker(int num,Semaphore semaphore){
this.num = num;
this.semaphore = semaphore;
}
@Override
public void run() {
try {
semaphore.acquire();
System.out.println("工人"+this.num+"占用一个机器在生产...");
Thread.sleep(2000);
System.out.println("工人"+this.num+"释放出机器");
semaphore.release();
} catch (InterruptedException e) {
e.printStackTrace();
}
}
(cid:132) CountDownLatch和CyclicBarrier都能够实现线程之间的等待，只不过它们侧重点不
同；CountDownLatch一般用于某个线程A等待若干个其他线程执行完任务之后，它才
13/04/2018 Page 86 of 283
执行；而CyclicBarrier一般用于一组线程互相等待至某个状态，然后这一组线程再同时
执行；另外，CountDownLatch是不能够重用的，而CyclicBarrier是可以重用的。
(cid:132) Semaphore其实和锁有点类似，它一般用于控制对某组资源的访问权限。
4.1.16. volatile关键字的作用（变量可见性、禁止重排序）
Java语言提供了一种稍弱的同步机制，即volatile变量，用来确保将变量的更新操作通知到其他
线程。volatile 变量具备两种特性，volatile变量不会被缓存在寄存器或者对其他处理器不可见的
地方，因此在读取volatile类型的变量时总会返回最新写入的值。
变量可见性
其一是保证该变量对所有线程可见，这里的可见性指的是当一个线程修改了变量的值，那么新的
值对于其他线程是可以立即获取的。
禁止重排序
volatile 禁止了指令重排。
比sychronized更轻量级的同步锁
在访问volatile变量时不会执行加锁操作，因此也就不会使执行线程阻塞，因此volatile变量是一
种比sychronized关键字更轻量级的同步机制。volatile适合这种场景：一个变量被多个线程共
享，线程直接给这个变量赋值。
当对非 volatile 变量进行读写的时候，每个线程先从内存拷贝变量到CPU缓存中。如果计算机有
多个CPU，每个线程可能在不同的CPU上被处理，这意味着每个线程可以拷贝到不同的 CPU
cache 中。而声明变量是 volatile 的，JVM 保证了每次读变量都从内存中读，跳过 CPU cache
这一步。
适用场景
值得说明的是对volatile变量的单次读/写操作可以保证原子性的，如long和double类型变量，
但是并不能保证i++这种操作的原子性，因为本质上i++是读、写两次操作。在某些场景下可以
代替Synchronized。但是,volatile的不能完全取代Synchronized的位置，只有在一些特殊的场
13/04/2018 Page 87 of 283
景下，才能适用volatile。总的来说，必须同时满足下面两个条件才能保证在并发环境的线程安
全：
（1）对变量的写操作不依赖于当前值（比如 i++），或者说是单纯的变量赋值（boolean
flag = true）。
（2）该变量没有包含在具有其他变量的不变式中，也就是说，不同的volatile变量之间，不
能互相依赖。只有在状态真正独立于程序内其他内容时才能使用 volatile。
4.1.17. 如何在两个线程之间共享数据
Java 里面进行多线程通信的主要方式就是共享内存的方式，共享内存主要的关注点有两个：可见
性和有序性原子性。Java 内存模型（JMM）解决了可见性和有序性的问题，而锁解决了原子性的
问题，理想情况下我们希望做到“同步”和“互斥”。有以下常规实现方法：
将数据抽象成一个类，并将数据的操作作为这个类的方法
1. 将数据抽象成一个类，并将对这个数据的操作作为这个类的方法，这么设计可以和容易做到
同步，只要在方法上加”synchronized“
public class MyData {
private int j=0;
public synchronized void add(){
j++;
System.out.println("线程"+Thread.currentThread().getName()+"j为："+j);
}
public synchronized void dec(){
j--;
System.out.println("线程"+Thread.currentThread().getName()+"j为："+j);
}
public int getData(){
return j;
}
}
public class AddRunnable implements Runnable{
MyData data;
public AddRunnable(MyData data){
this.data= data;
}
13/04/2018 Page 88 of 283
public void run() {
data.add();
}
}
public class DecRunnable implements Runnable {