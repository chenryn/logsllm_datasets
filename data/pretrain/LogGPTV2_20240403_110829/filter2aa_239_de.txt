        7
        0
        4
        0
        0
        0xF00000000000
        http://www.cninnovation.com
        CallService
20.2.4 使用注释和EventSource
创建一个派生于EventSource的事件源类，对跟踪信息的定义就有更多的控制。使用
特性可以给方法添加注释。
默认情况下，事件源的名字与类名相同，但应用EventSource特性，可以改变名字和
唯一标识符。每个事件跟踪方法都可以附带Event特性。在这里可以定义事件的ID、操作
码、跟踪级别、自定义关键字以及任务。这些信息用来为Windows创建清单信息，以定义
要记录的信息。方法内使用EventSource调用的基本方法WriteEvent，需要匹配Event特性
定义的事件ID，传递给WriteEvent方法的变量名，需要匹配所声明方法的参数名称。
在示例类SampleEventSource中，自定义关键字由内部类Keywords定义。这个类的成
员强制转换为EventKeywords枚举类型。EventKeywords是基于标识的long类型枚举，仅定
义高位从42开始的值。可以使用所有的低位来定义自定义关键字。Keywords类为设置为
Network、Database、Diagnostics和Performance的最低四位定义了值。枚举EventTask是一
个类似的、基于标识的枚举。与EventKeywords相反，int足以用作后备存储，EventTask没
有预定义的值（只有枚举值None 
= 
0是预定义的）。类似于Keywords类，Task类为
EventTask枚举定义了自定义任务（代码文件EventSourceSampleAnnotations
/SampleEventSource.cs）：
    [EventSource(Name="EventSourceSample", Guid="45FFF0E2-7198-4E4F-9FC3-DF693468
0096")]
    class SampleEventSource : EventSource
    {
      public class Keywords
      {
        public const EventKeywords Network = (EventKeywords)1;
        public const EventKeywords Database = (EventKeywords)2;
        public const EventKeywords Diagnostics = (EventKeywords)4;
        public const EventKeywords Performance = (EventKeywords)8;
      }
      public class Tasks
      {
        public const EventTask CreateMenus = (EventTask)1;
        public const EventTask QueryMenus = (EventTask)2;
      }
      private SampleEventSource()
      {
      }
      public static SampleEventSource Log = new SampleEventSource ();
      [Event(1, Opcode=EventOpcode.Start, Level=EventLevel.Verbose)]
      public void Startup()
      {
        base.WriteEvent(1);
      }
      [Event(2, Opcode=EventOpcode.Info, Keywords=Keywords.Network,
        Level=EventLevel.Verbose, Message="{0}")]
      public void CallService(string url)
      {
        base.WriteEvent(2, url);
      }
      [Event(3, Opcode=EventOpcode.Info, Keywords=Keywords.Network,
        Level=EventLevel.Verbose, Message="{0}, length: {1}")]
      public void CalledService(string url, int length)
      {
        base.WriteEvent(3, url, length);
      }
      [Event(4, Opcode=EventOpcode.Info, Keywords=Keywords.Network,
        Level=EventLevel.Error, Message="{0} error: {1}")]
      public void ServiceError(string message, int error)
      {
        base.WriteEvent(4, message, error);
      }
      [Event(5, Opcode=EventOpcode.Info, Task=Tasks.CreateMenus,
        Level=EventLevel.Verbose, Keywords=Keywords.Network)]
      public void SomeTask()
      {
        base.WriteEvent(5);
      }
    }
编写这些事件的Program类是不变的。这些事件的信息现在可以用于使用侦听器，为
特定的关键字、特定的日志级别，或特定的任务过滤事件。如何创建侦听器参见本章后面
的“创建自定义侦听器”一节。
20.2.5 创建事件清单模式
创建自定义事件源类的优点是，可以创建一个清单，描述所有的跟踪信息。使用没有
继承的EventSource类，将Settings属性设置为枚举EventSourceSettings的
EtwSelfDescribingEventFormat值。事件由所调用的方法直接描述。当使用一个继承自
EventSource的类时，Settings属性的值是EtwManifestEventFormat。事件信息由一个清单来
描述。
使用EventSource类的静态方法GenerateManifest可以创建清单文件。第一个参数定义
了事件源的类；第二个参数描述了包含事件源类型的程序集的路径（代码文件
EventSourceSampleAnnotations/ Program. cs）:
    public static void GenerateManifest()
    {
      string schema = SampleEventSource.GenerateManifest(
        typeof(SampleEventSource), ".");
      File.WriteAllText("sampleeventsource.xml", schema);
    }
这是包含任务、关键字、事件和事件消息模板的清单信息（代码文件
EventSourceSample-Annotations/sampleeventsource.xml）：
有了这些元数据，通过系统注册它，允许系统管理员过滤特定的事件，在有事发生时
得到通知。可以用两种方式处理注册：静态和动态。静态注册需要管理权限，通过
wevtutil.exe命令行工具注册。该工具传递包含清单的DLL。EventSource类也提供了首选的
动态注册。这种情况发生在运行期间，不需要管理权限，就可以在事件流中返回清单，或
者回应标准的ETW命令。
20.2.6 使用活动ID
TraceSource新版本的新特性可以轻松地编写活动ID。一旦运行多个任务，它就有助
于了解哪些跟踪消息属于彼此，没有仅基于时间的跟踪消息。例如，对Web应用程序使用
跟踪时，如果知道哪些跟踪消息属于一个请求，就并发处理多个来自客户端的请求。这样
的问题不仅会出现在服务器上，只要运行多个任务，或者使用C# async和await关键字调用
异步方法，这个问题也会出现在客户端应用程序上。此时应使用不同的任务。
当创建派生于TraceSource的类时，为了创建活动ID，只需要定义以Start和Stop作为后
缀的方法。
对于显示活动ID的示例，创建一个支持.NET 4.6和.NET Core 1.0的类库（包）。.NET
的以前版本不支持活动ID的TraceSource新功能。ProcessingStart和RequestStart方法用于启
动活动；ProcessingStop和RequestStop停止活动（代码文件MyApplicationEvents 
/
SampleEventSource）：
    public class SampleEventSource : EventSource
    {
      private SampleEventSource()
        : base("Wrox-SampleEventSource")
      {
      }
      public static SampleEventSource Log = new SampleEventSource();
      public void ProcessingStart(int x)
      {
        base.WriteEvent(1, x);
      }
      public void Processing(int x)
      {
        base.WriteEvent(2, x);
      }
      public void ProcessingStop(int x)
      {
        base.WriteEvent(3, x);
      }
      public void RequestStart()
      {
        base.WriteEvent(4);
      }
      public void RequestStop()
      {
        base.WriteEvent(5);
      }
    }
编写事件的客户端应用程序利用如下依赖项和名称空间：
依赖项
    NETStandard.Library
    System.Diagnostics.Tracing
    System.Threading.Tasks.Parallel
    System.Net.Http
    MyApplicatonEvents
名称空间
    System
    System.Collections.Generic
    System.Diagnostics.Tracing
    System.Net.Http
    System.Threading.Tasks
    static System.Console
ParallelRequestSample方法调用RequestStart和RequestStop方法来开始和停止活动。在
这些调用之间，使用Parallel.For创建一个并行循环。Parallel类通过调用第三个参数的委
托，使用多个任务并发运行。这个参数实现为一个lambda表达式，来调用
ProcessTaskAsync方法（代码文件ClientApp/Program.cs）：
    private static void ParallelRequestSample()
    {
      SampleEventSource.Log.RequestStart();
      Parallel.For(0, 20, x =>
      {
        ProcessTaskAsync(x).Wait();
      });
      SampleEventSource.Log.RequestStop();
      WriteLine("Activity complete");
    }
  注意： Parallel类详见第21章。
方法ProcessTaskAsync使用ProcessingStart和ProcessingStop写入跟踪信息。在这里，一
个活动在另一个活动内部启动。在分析日志的输出中，活动可以带有层次结构（代码文件
ClientApp/Program.cs）：
    private static async Task ProcessTaskAsync(int x)