至于不同类型的section，有的是保存符号表，有的是保存字符串，这也是ELF表现出拓展性和复杂性的地方，因此需要在遇到具体问题的时候查看文档去进行具体分析。
## Program Header
program header table用来保存程序加载到内存中所需要的信息，使用段(segment)来表示。与section header
table类似，同样是数组结构。数组的位置在偏移 _e_phoff_ 处，每个元素(segment header)的大小为 _e_phentsize_
，共有 _e_phnum_ 个元素。单个segment header的结构如下:
    typedef struct
    {
      Elf32_Word    p_type;         /* Segment type */
      Elf32_Off p_offset;         /* Segment file offset */
      Elf32_Addr    p_vaddr;        /* Segment virtual address */
      Elf32_Addr    p_paddr;        /* Segment physical address */
      Elf32_Word    p_filesz;       /* Segment size in file */
      Elf32_Word    p_memsz;        /* Segment size in memory */
      Elf32_Word    p_flags;        /* Segment flags */
      Elf32_Word    p_align;        /* Segment alignment */
    } Elf32_Phdr;
既然program header的作用是提供用于初始化程序进程的段信息，那么下面这些字段就是很直观的:
  * p_offset: 该segment的数据在文件中的偏移地址(相对文件头)
  * p_vaddr: segment数据应该加载到进程的虚拟地址
  * p_paddr: segment数据应该加载到进程的物理地址(如果对应系统使用的是物理地址)
  * p_filesz: 该segment数据在文件中的大小
  * p_memsz: 该segment数据在进程内存中的大小。注意需要满足`p_memsz>=p_filesz`，多出的部分初始化为0，通常作为`.bss`段内容
  * p_flags: 进程中该segment的权限(R/W/X)
  * p_align: 该segment数据的对齐，2的整数次幂。即要求`p_offset % p_align = p_vaddr`。
剩下的`p_type`字段，表示该program segment的类型，主要有以下几种:
  * PT_NULL: 表示该段未使用
  * PT_LOAD: Loadable Segment，将文件中的segment内容映射到进程内存中对应的地址上。值得一提的是SPEC中说在program header中的多个PT_LOAD地址是按照虚拟地址递增排序的。
  * PT_DYNAMIC: 动态链接中用到的段，通常是RW映射，因为需要由`interpreter`(ld.so)修复对应的的入口
  * PT_INTERP: 包含interpreter的路径，见下文
  * PT_HDR: 表示program header table本身。如果有这个segment的话，必须要在所有可加载的segment之前，并且在文件中不能出现超过 **一次** 。
  * ...
在不同的操作系统中还可能有一些拓展的类型，比如`PT_GNU_STACK`、`PT_GNU_RELRO`等，不一而足。
## 小结
至此，ELF文件中相关的字段已经介绍完毕，主要组成也就是Section Header Table和Program Header
Table两部分，整体框架相当简洁。而ELF中体现拓展性的地方则是在Section和Segment的类型上(s_type和p_type)，这两个字段的类型都是`ElfN_Word`，在32位系统下大小为4字节，也就是说最多可以支持高达`2^32
- 1`种不同的类型！除了上面介绍的常见类型，不同操作系统或者厂商还能定义自己的类型去实现更多复杂的功能。
# 程序加载
在新版的ELF标准文档中，将ELF的介绍分成了三部分，第一部分介绍ELF文件本身的结构，第二部分是处理器相关的内容，第三部分是操作系统相关的内容。ELF的加载实际上是与操作系统相关的，不过大部分情况下我们都是在GNU/Linux环境中运行，因此就以此为例介绍程序的加载流程。
Linux中分为用户态和内核态，执行ELF文件在用户态的表现就是执行 **execve** 系统调用，随后陷入内核进行处理。
## 内核空间
内核空间对execve的处理其实可以单独用一篇文章去介绍，其中涉及到进程的创建、文件资源的处理以及进程权限的设置等等。我们这里主要关注其中ELF处理相关的部分即可，实际上内核可以识别多种类型的可执行文件，ELF的处理代码主要在[fs/binfmt_elf.c](https://elixir.bootlin.com/linux/v3.18/source/fs/binfmt_elf.c)中的`load_elf_binary`函数中。
对于ELF而言，Linux内核所关心的只有Program
Header部分，甚至大部分情况下只关心三种类型的Header，即`PT_LOAD`、`PT_INTERP`和`PT_GNU_STACK`。以3.18内核为例，load_elf_binary主要有下面操作:
  1. 对ELF文件做一些基本检查，保证`e_phentsize = sizeof(struct elf_phdr)`并且`e_phnum`的个数在一定范围内；
  2. 循环查看每一项program header，如果有PT_INTERP则使用`open_exec`加载进来，并替换原程序的`bprm->buf`;
  3. 根据`PT_GNU_STACK`段中的flag设置栈是否可执行；
  4. 使用`flush_old_exec`来更新当前可执行文件的所有引用；
  5. 使用`setup_new_exec`设置新的可执行文件在内核中的状态；
  6. `setup_arg_pages`在栈上设置程序调用参数的内存页；
  7. 循环每一项`PT_LOAD`类型的段，`elf_map`映射到对应内存页中，初始化BSS；
  8. 如果存在interpreter，将入口(elf_entry)设置为interpreter的函数入口，否则设置为原ELF的入口地址；
  9. `install_exec_creds(bprm)`设置进程权限等信息；
  10. `create_elf_tables`添加需要的信息到程序的栈中，比如 **ELF auxiliary vector** ；
  11. 设置`current->mm`对应的字段；
从内核的处理流程上来看，如果是静态链接的程序，实际上内核返回用户空间执行的就是该程序的入口地址代码；如果是动态链接的程序，内核返回用户空间执行的则是interpreter的代码，并由其加载实际的ELF程序去执行。
为什么要这么做呢？如果把动态链接相关的代码也放到内核中，就会导致内核执行功能过多，内核的理念一直是能不在内核中执行的就不在内核中处理，以避免出现问题时难以更新而且影响系统整体的稳定性。事实上内核中对ELF文件结构的支持是相当有限的，只能读取并理解部分的字段。
## 用户空间
内核返回用户空间后，对于静态链接的程序是直接执行，没什么好说的。而对于动态链接的程序，实际是执行interpreter的代码。ELF的interpreter作为一个段，自然是编译链接的时候加进去的，因此和编译使用的工具链有关。对于Linux系统而言，使用的一般是GCC工具链，而interpreter的实现，代码就在glibc的[elf/rtld.c](https://github.com/bminor/glibc/blob/glibc-2.27/elf/rtld.c)中。
interpreter又称为dynamic linker，以glibc2.27为例，它的大致功能如下:
  * 将实际要执行的ELF程序中的内存段加载到当前进程空间中；
  * 将动态库的内存段加载到当前进程空间中；
  * 对ELF程序和动态库进行重定向操作(relocation)；
  * 调用动态库的初始化函数(如 _.preinit_array, .init, .init_array_ )；
  * 将控制流传递给目标ELF程序，让其看起来自己是直接启动的；
其中参与动态加载和重定向所需要的重要部分就是Program Header
Table中`PT_DYNAMIC`类型的Segment。前面我们提到在Section
Header中也有一部分参与动态链接的section，即`.dynamic`。我在自己解析动态链接文件的时候发现，实际上 `.dynamic`
section中的数据，和`PT_DYNAMIC`中的数据指向的是文件中的 **同一个地方**
，即这两个entry的s_offset和p_offset是相同。每个元素的类型如下:
    typedef struct
    {
      Elf32_Sword   d_tag;          /* Dynamic entry type */
      union
        {
          Elf32_Word d_val;         /* Integer value */
          Elf32_Addr d_ptr;         /* Address value */
        } d_un;
    } Elf32_Dyn;
d_tag表示实际类型，并且d_un和d_tag相关，可能说是很有拓展性了:) 同样的，标准中定义了几十个d_tag类型，比较常用的几个如下:
  * DT_NULL: 表示_DYNAMIC的结尾
  * DT_NEEDED: d_val保存了一个到字符串表头的偏移，指定的字符串表示该ELF所依赖的动态库名称
  * DT_STRTAB: d_ptr指定了地址保存了符号、动态库名称以及其他用到的字符串
  * DT_STRSZ: 字符串表的大小
  * DT_SYMTAB: 指定地址保存了符号表
  * DT_INIT/DT_FINI: 指定初始化函数和结束函数的地址
  * DT_RPATH: 指定动态库搜索目录
  * DT_SONAME: Shared Object Name，指定当前动态库的名字([logical name](https://en.wikipedia.org/wiki/Soname))
  * ...
其中有部分的类型可以和Section中的`SHT_xxx`类型进行类比，完整的列表可以参考ELF标准中的 _Book III: Operating
System Specific_ 一节。
在interpreter根据`DT_NEEDED`加载完所有需要的动态库后，就实现了完整进程虚拟内存映像的布局。在寻找某个动态符号时，interpreter会使用
**广度优先**