                if self.main_object is None:
                    options = dict(self._main_opts)
                else:
                    for ident in self._possible_idents(binary_stream if binary is None else binary): # also allowed to cheat
                        if ident in self._lib_opts:
                            options = dict(self._lib_opts[ident])
                            break
                    else:
                        options = {}
                # STEP 3: identify backend
                backend_spec = options.pop('backend', None)
                backend_cls = self._backend_resolver(backend_spec)
                if backend_cls is None:
                    backend_cls = self._static_backend(binary_stream if binary is None else binary)
                if backend_cls is None:
                    raise CLECompatibilityError("Unable to find a loader backend for %s.  Perhaps try the 'blob' loader?" % spec)
                # STEP 4: LOAD!
                l.debug("... loading with %s", backend_cls)
                result = backend_cls(binary, binary_stream, is_main_bin=self.main_object is None, loader=self, **options)
                result.close()
                return result
            finally:
                if close:
                    binary_stream.close()
简单来说就是：
  * 首先识别文件，确认是一个二进制文件后，调用函数 `_search_load_path()` 获取完整的文件路径
  * 收集选项 options。遍历生成器 `_possible_idents(full_spec)`，获得所有可能用于描述给定 spec 的识别符 ident，然后取出 `_lib_opts[ident]`
  * 识别后端。从 options 中获得 backend_spec，调用函数 `_backend_resolver()` 得到对应的后端类 backend_cls，如果 backend_cls 不存在，则又调用函数 `_static_backend()` 来获取。这个过程还是值得说一下。`ALL_BACKENDS` 是一个全局字典，里面保存了所有通过函数 `register_backend(name, cls)` 注册的后端。每个后端都需要有一个 `is_compatible()` 函数，这个函数就是用于判断对象文件是否属于该后端所操作的对象，判断方法是二进制特征匹配，例如 ELF 文件：`if identstring.startswith('x7fELF')`
  * 最后创建`backend_cls`类的实例
​ 然后现在我们继续回到`_internal_load`函数中，看看接下来的源代码
                obj = self._load_object_isolated(main_spec)
                objects.append(obj)
                objects.extend(obj.child_objects)
                dependencies.extend(obj.deps)
                if self.main_object is None:
                    # this is technically the first place we can start to initialize things based on platform
                    self.main_object = obj
                    self.memory = Clemory(obj.arch, root=True)
                    chk_obj = self.main_object if isinstance(self.main_object, ELFCore) or not self.main_object.child_objects else self.main_object.child_objects[0]
                    if isinstance(chk_obj, ELFCore):
                        self.tls = ELFCoreThreadManager(self, obj.arch)
                    elif isinstance(obj, Minidump):
                        self.tls = MinidumpThreadManager(self, obj.arch)
                    elif isinstance(chk_obj, MetaELF):
                        self.tls = ELFThreadManager(self, obj.arch)
                    elif isinstance(chk_obj, PE):
                        self.tls = PEThreadManager(self, obj.arch)
                    else:
                        self.tls = ThreadManager(self, obj.arch)
​ 这里就是将加载的所有对象添加到列表 objects，依赖添加到 dependencies。且如果 `self.main_object`
没有指定的话，就将其设置为第一个加载的对象，并创建一个 Clemory 类的实例，用于初始化内存空间，然后将其赋值给
`self.memory`，然后还有根据不同文件格式例如ELF或者PE的不同再初始化tls
​ 我们继续看看
    ordered_objects = []
    soname_mapping = OrderedDict((obj.provides if not self._ignore_import_version_numbers else obj.provides.rstrip('.0123456789'), obj) for obj in objects if obj.provides)
    seen = set()
    def visit(obj):
        if id(obj) in seen:
            return
        seen.add(id(obj))
        stripped_deps = [dep if not self._ignore_import_version_numbers else dep.rstrip('.0123456789') for dep in obj.deps]
        dep_objs = [soname_mapping[dep_name] for dep_name in stripped_deps if dep_name in soname_mapping]
        for dep_obj in dep_objs:
            visit(dep_obj)
        ordered_objects.append(obj)
        for obj in preload_objects + objects:
            visit(obj)
​ 之后就是在加载并移除所有 dependencies 里的对象文件，添加到 objects，依赖添加到 dependencies。如此一直执行下去直到
dependencies 为空。此时 objects 里就是所有加载对象
     extern_obj = ExternObject(self)
    # tls registration
    for obj in objects:
        self.tls.register_object(obj)
    # link everything
    if self._perform_relocations:
        for obj in ordered_objects:
            l.info("Linking %s", obj.binary)
            sibling_objs = list(obj.parent_object.child_objects) if obj.parent_object is not None else []
            stripped_deps = [dep if not self._ignore_import_version_numbers else dep.rstrip('.0123456789') for dep in obj.deps]
            dep_objs = [soname_mapping[dep_name] for dep_name in stripped_deps if dep_name in soname_mapping]
            main_objs = [self.main_object] if self.main_object is not obj else []
            for reloc in obj.relocs:
                reloc.resolve_symbol(main_objs + preload_objects + sibling_objs + dep_objs + [obj], extern_object=extern_obj)
    # if the extern object was used, add it to the list of objects we're mapping
    # also add it to the linked list of extern objects
    if extern_obj.map_size:
    # resolve the extern relocs this way because they may produce more relocations as we go
        i = 0
        while i >> s = proj.factory.blank_state()
    >>> s.memory.store(0x4000, s.solver.BVV(0x0123456789abcdef0123456789abcdef, 128))
    >>> s.memory.load(0x4004, 6) # load-size is in bytes
​ 参数 `endness` 用于设置端序。可选的值如下：
    LE – 小端序(little endian, least significant byte is stored at lowest address)
    BE – 大端序(big endian, most significant byte is stored at lowest address)
    ME – 中间序(Middle-endian. Yep.)
    >>> import archinfo
    >>> s.memory.load(0x4000, 4, endness=archinfo.Endness.LE)
​ 关于memory类的方法主要有以下这些：
  * `memory.load(addr, n) -> bytes`
  * `memory.store(addr, bytes)`
  * `memory[addr] -> int`
  * `memory.unpack_word(addr) -> int`
  * `memory.pack_word(addr, value)`
  * `memory.backers() -> iter[(start, bytearray)]`
​ 官方文档还提供了使用示例：
    import cffi, cle
    ffi = cffi.FFI()
    ld = cle.Loader('/bin/true')
    addr = ld.main_object.entry
    try:
        backer_start, backer = next(ld.memory.backers(addr))
    except StopIteration:
        raise Exception("not mapped")
    if backer_start > addr:
        raise Exception("not mapped")
    cbacker = ffi.from_buffer(backer)
    addr_pointer = cbacker + (addr - backer_start)
####  1.2.3 Backend类
​ Backend 是 CLE 所支持二进制对象文件的基类，我们可以看看它的初始函数
    class Backend:
        """
        Main base class for CLE binary objects.
        An alternate interface to this constructor exists as the static method :meth:`cle.loader.Loader.load_object`
        :ivar binary:           The path to the file this object is loaded from
        :ivar binary_basename:  The basename of the filepath, or a short representation of the stream it was loaded from
        :ivar is_main_bin:      Whether this binary is loaded as the main executable
        :ivar segments:         A listing of all the loaded segments in this file
        :ivar sections:         A listing of all the demarked sections in the file
        :ivar sections_map:     A dict mapping from section name to section
        :ivar imports:          A mapping from symbol name to import relocation
        :ivar resolved_imports: A list of all the import symbols that are successfully resolved
        :ivar relocs:           A list of all the relocations in this binary
        :ivar irelatives:       A list of tuples representing all the irelative relocations that need to be performed. The
                                first item in the tuple is the address of the resolver function, and the second item is the
                                address of where to write the result. The destination address is an RVA.
        :ivar jmprel:           A mapping from symbol name to the address of its jump slot relocation, i.e. its GOT entry.
        :ivar arch:             The architecture of this binary
        :vartype arch:          archinfo.arch.Arch
        :ivar str os:           The operating system this binary is meant to run under
        :ivar int mapped_base:  The base address of this object in virtual memory
        :ivar deps:             A list of names of shared libraries this binary depends on
        :ivar linking:          'dynamic' or 'static'
        :ivar linked_base:      The base address this object requests to be loaded at
        :ivar bool pic:         Whether this object is position-independent
        :ivar bool execstack:   Whether this executable has an executable stack
        :ivar str provides:     The name of the shared library dependancy that this object resolves
        :ivar list symbols:     A list of symbols provided by this object, sorted by address
        :ivar has_memory:       Whether this backend is backed by a Clemory or not. As it stands now, a backend should still
                                define `min_addr` and `max_addr` even if `has_memory` is False.
        """
        is_default = False
        def __init__(self,
                binary,