25 – EM – End of Medium    
已到介质末端，介质存储已满    
EM用于，当数据存储到达串行存储介质末尾的时候，就像磁带或磁头滚动到介质末尾一样。其用于表述数据的逻辑终点，即不必非要是物理上的达到数据载体的末尾。    
26 – SUB – SUBstitute character替补/替换    
27 – ESC – ESCape 逃离/取消    
字符Escape，是ASCII标准的首创的，由Bob Bemer提议的。用于开始一段控制码的扩展字符。如此，即可以不必将所有可能想得到的字符都放到ASCII标准中了。因为，新的技术可能需要新的控制命令，而ESC可以用作这些字符命令的起始标志。ESC广泛用于打印机和终端，去控制设备设置，比如字体，字符位置和颜色等等。如果最开始的ASCII标准中，没有定义ESC，估计ASCII标准早就被其他标准所替代了，因为其没有包含这些新出现的字符，所以肯定会有其他新的标准出现，用于表示这些字符的。即，ESC给开发者提供了，可以根据需要而定义新含义的字符的可能。    
28 – FS – File Separator 文件分隔符    
文件分隔符是个很有意思的控制字符，因为其可以让我们看到1960s年代的时候，计算机技术是如何组织的。我们现在，习惯于随即访问一些存储介质，比如RAM，磁盘，但是在定义ASCII标准的那个年代，大部分数据还是顺序的，串行的，而不是随机访问的。此处所说的串行的，不仅仅指的是串行通信，还指的是顺序存储介质，比如穿孔卡片，纸带，磁带等。在串行通信的时代，设计这么一个用于表示文件分隔符的控制字符，用于分割两个单独的文件，是一件很明智的事情。而FS的原因就在于此。    
29 – GS – Group Separator分组符    
ASCII定义控制字符的原因中，其中一条就是考虑到了数据存储方面的情况。大部分情况下，数据库的建立，都和表有关，包含了对应的记录。同一个表中的所有的记录，属于同一类型。不同的表中的记录，属于对应的不同的类型。而分组符GS就是用来分隔串行数据存储系统中的不同的组。值得注意的是，当时还没有使用word的表格，当时ASCII时代的人，把他叫做组。    
30 – RS – Record Separator记录分隔符    
记录分隔符RS用于分隔在一个组或表内的多个记录。    
31 – US – Unit Separator 单元分隔符    
在ASCII定义中，在数据库中所存储的，最小的数据项，叫做Unit单元。而现在我们称其field域。单元分隔符US用于分割串行数据存储环境下的不同的域。    
现在大部分的数据库实现，要求大部分类型都拥有固定的长度。    
尽管大部分时候可能用不到，但是对于每一个域，却都要分配足够大的空间，用于存放最大可能的成员变量。这样的做法，占用了大量的存储空间，而US控制码允许域具有可变的长度。在1960s年代，数据存储空间很有限，用US这个单元分隔符，将不同单元分隔开，这样就可以实现更高效地存储那些宝贵的数据。另一方面，串行存储的存储效率，远低于RAM和磁盘中所实现的表格存储。我个人无法想象，如果现在的数据，还是存储在自带或者带滚轮的磁带上，会是何种景象。    
32 – SP – White SPace 空格键    
也许你会争论说，空格键是否真的能算是一个控制字符？因为现在在普通文字中使用空格键是如此常见。    
但是，既然水平制表符和退格键在ASCII中，都被叫做控制字符了，那么我觉得也很自然地，可以把空格键（向前的空格）也叫做控制字符，毕竟，其本身并不代表一个真正的可见的字符，而仅仅只是很常用于输出设备，用于处理位置前向移动一格，清除当前位置的内容而已。在很多程序中，比如字符处理程序，白空格同样可能从导致行尾转到下一行行首，而网络浏览器将多个空格组合成单个空格输出。    
所以，这更加坚定了我的想法，觉得完全可以把空格看成是一个控制字符，而不仅仅是一个很独特的普通字符。    
127 – DEL – DELete    
删除    
有人也许会问，为何ASCII字符集中的控制字符的值都是很小的，即0-32，而DEL控制字符的值却很大，是127。这是由于这个特殊的字符是为纸带而定义的。而在那个时候，绝大多数的纸带，都是用7个孔洞去编码数据的。而127这个值所对应的二进制值为111 1111b，表示所有7个比特位都是高，所以，将DEL用在现存的纸带上时，所有的洞就都被穿孔了，就把已经存在的数据都擦出掉了，就起到了对应的删除的作用了。    
【各种字符的标准的读法/叫法】    
常见ASCII字符，以及其他非常见的字符，Unicode中的字符，其他特殊字符等等，这些字符的英文叫法，可以去Unicode官方找到：    
http://www.unicode.org/charts/#symbols    
比如：    
ASCII字符/字母的叫法/读法    
如何读    
：    
1. C0 Control and Basic Latin Range：0000-007F    
http://www.unicode.org/charts/PDF/U0000.pdf    
2.Alphabetic Presentation Forms Range：FB00-FB4F    
http://www.unicode.org/charts/PDF/UFB00.pdf    
3. CJK Compatibility Forms    
http://www.unicode.org/charts/PDF/UFE30.pdf    
4.Fullwidth ASCII Punctuation    
http://www.unicode.org/charts/PDF/UFF00.pdf    
【引用】    
1.C0 and C1 control codes    
http://en.wikipedia.org/wiki/C0_and_C1_control_codes    
2. Control Character    
http://en.wikipedia.org/wiki/Control_character    
3．    
ASCII character map    
http://www.lammertbies.nl/comm/info/ascii-characters.html    
4．    
百度百科：ASCII    
http://baike.baidu.com/view/15482.htm    
5. ASCII编码表    
http://www.dreamdu.com/xhtml/ascii/    
ASCII码大致可以分作三部分组成。    
### 第一部分：ASCII非打印控制字符表    
ASCII表上的数字0–31分配给了控制字符，用于控制像打印机等一些外围设备。例如，12代表换页/新页功能。此命令指示打印机跳到下一页的开头。（参详ASCII码表中0-31）    
### 第二部分：ASCII打印字符    
数字 32–126 分配给了能在键盘上找到的字符，当您查看或打印文档时就会出现。数字127代表 DELETE 命令。（参详ASCII码表中32-127）    
ASCII码表 0-127    
![pic](20180128_03_pic_001.jpg)    
### 第三部分：扩展ASCII打印字符    
扩展的ASCII字符满足了对更多字符的需求。扩展的ASCII包含ASCII中已有的128个字符（数字0–32显示在下图中），又增加了128个字符，总共是256个。即使有了这些更多的字符，许多语言还是包含无法压缩到256个字符中的符号。因此，出现了一些ASCII的变体来囊括地区性字符和符号。例如，许多软件程序把ASCII表（又称作ISO8859-1）用于北美、西欧、澳大利亚和非洲的语言。    
![pic](20180128_03_pic_002.jpg)    
Vim里常见的几个不可见字符：    
```    
^@ = 0x00 Null值    
^H = 0x08 退格    
^I = 0x09 水平制表    
^J = 0x0A 换行    
^M = 0x0D 回车    
去掉^M回车:    
:%s/^M//g #  vi中将^M替换成回车。     
$ sed -e 's/^M//g' myfile.txt  #直接操作文件    
注意：这里的“^M”要使用“CTRL-V CTRL-M”生成，而不是直接键入“^M”。    
去掉^@:    
sed -r 's/\x0//g' file>file1    
```    
### 什么是Function Code功能码或 Function Character功能字符    
ASCII字符集，大家都知道吧，最基本的包含了128个字符。其中前32个，0-31，即0x00-0x1F，都是不可见字符。这些字符，就叫做控制字符。    
这些字符没法打印出来，但是每个字符，都对应着一个特殊的控制功能的字符，简称功能字符或功能码Function Code。    
简言之：ASCII中前32个字符，统称为Function Code功能字符。    
此外，由于ASCII中的127对应的是Delete，也是不可见的，所以，此处根据笔者的理解，也可以归为Function Code。    
此类字符，对应不同的“功能”，起到一定的“控制作用”，所以，称为控制字符。    
#### [PostgreSQL 许愿链接](https://github.com/digoal/blog/issues/76 "269ac3d1c492e938c0191101c7238216")
您的愿望将传达给PG kernel hacker、数据库厂商等, 帮助提高数据库产品质量和功能, 说不定下一个PG版本就有您提出的功能点. 针对非常好的提议，奖励限量版PG文化衫、纪念品、贴纸、PG热门书籍等，奖品丰富，快来许愿。[开不开森](https://github.com/digoal/blog/issues/76 "269ac3d1c492e938c0191101c7238216").  
#### [9.9元购买3个月阿里云RDS PostgreSQL实例](https://www.aliyun.com/database/postgresqlactivity "57258f76c37864c6e6d23383d05714ea")
#### [PostgreSQL 解决方案集合](https://yq.aliyun.com/topic/118 "40cff096e9ed7122c512b35d8561d9c8")
#### [德哥 / digoal's github - 公益是一辈子的事.](https://github.com/digoal/blog/blob/master/README.md "22709685feb7cab07d30f30387f0a9ae")
![digoal's wechat](../pic/digoal_weixin.jpg "f7ad92eeba24523fd47a6e1a0e691b59")
#### [PolarDB 学习图谱: 训练营、培训认证、在线互动实验、解决方案、生态合作、写心得拿奖品](https://www.aliyun.com/database/openpolardb/activity "8642f60e04ed0c814bf9cb9677976bd4")
#### [购买PolarDB云服务折扣活动进行中, 55元起](https://www.aliyun.com/activity/new/polardb-yunparter?userCode=bsb3t4al "e0495c413bedacabb75ff1e880be465a")
#### [About 德哥](https://github.com/digoal/blog/blob/master/me/readme.md "a37735981e7704886ffd590565582dd0")