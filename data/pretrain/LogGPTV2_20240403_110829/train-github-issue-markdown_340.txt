First of all, sorry about the title! I can't really summarize the problem in a
good way (if anyone can change it to a better one, then, please, be my
guest!).
I was trying to optimize a toolbox I was coding and I had a very strange type
warnings using `@code_warntype`. I posted the problem on discourse to verify
if I was doing something wrong [1] with global declaration of constants.
It turns out that @tkoolen and @StefanKarpinski identified a bigger problem
(that I cannot really describe in technical detail) and asked to open an
issue.
Consider the following code:
    VERSION >= v"0.4.0-dev+6521" && __precompile__()
    module TestConst
    export test
    function test(n::Number, e::Number)
        # Auxiliary constant to compute the functions.
        K1 = 3.0
        # Declare the functions that must solved for 0.
        f1(a, i) = K1
    end
    end
If I analyze the type using `@code_warntype test(1,1)`, then I get:
    Variables:
      #self# 
      n 
      e 
      K1 
      f1::TestConst.#f1#1{Float64}
    Body:
      begin  # line 12:
          f1::TestConst.#f1#1{Float64} = $(Expr(:new, TestConst.#f1#1{Float64}, 3.0))
          return f1::TestConst.#f1#1{Float64}
      end::TestConst.#f1#1{Float64}
However, consider the following code in which a check of the variable `n` is
added:
    VERSION >= v"0.4.0-dev+6521" && __precompile__()
    module TestConst
    export test
    function test(n::Number, e::Number)
        if (n 
      n::Int64
      e 
      K1::Core.Box
      f1::TestConst.#f1#1
    Body:
      begin 
          K1::Core.Box = $(Expr(:new, :(Core.Box)))
          NewvarNode(:(f1::TestConst.#f1#1))
          unless (Base.sle_int)(n::Int64, 0)::Bool goto 6 # line 9:
          (TestConst.throw)($(Expr(:new, :(Base.ArgumentError), "The angular velocity must be greater than 0.")))::Union{}
          6:  # line 13:
          (Core.setfield!)(K1::Core.Box, :contents, 3.0)::Float64 # line 16:
          f1::TestConst.#f1#1 = $(Expr(:new, :(TestConst.#f1#1), :(K1)))
          return f1::TestConst.#f1#1
      end::TestConst.#f1#1
I performed a simple benchmark on both version using:
    @time for k=1:1000000000
        test(1,1)
    end
The result was `0.93s` for the first algorithm and `18s` for the second one.
* * *
# References
[1] https://discourse.julialang.org/t/correct-way-to-declare-global-constant-
in-modules/10234/6