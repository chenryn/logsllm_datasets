title:Mining least privilege attribute based access control policies
author:Matthew W. Sanders and
Chuan Yue
Mining Least Privilege Attribute Based Access Control Policies
Matthew W Sanders
Colorado School of Mines
Golden, Colorado
PI:EMAIL
Chuan Yue
Colorado School of Mines
Golden, Colorado
PI:EMAIL
ABSTRACT
Creating effective access control policies is a significant challenge
to many organizations. Over-privilege increases security risk from
compromised credentials, insider threats, and accidental misuse.
Under-privilege prevents users from performing their duties. Poli-
cies must balance between these competing goals of minimizing
under-privilege vs. over-privilege. The Attribute Based Access Con-
trol (ABAC) model has been gaining popularity in recent years
because of its advantages in granularity, flexibility, and usability.
ABAC allows administrators to create policies based on attributes
of users, operations, resources, and the environment. However, in
practice, it is often very difficult to create effective ABAC policies in
terms of minimizing under-privilege and over-privilege especially
for large and complex systems because their ABAC privilege spaces
are typically gigantic. In this paper, we take a rule mining approach
to mine systems’ audit logs for automatically generating ABAC
policies which minimize both under-privilege and over-privilege.
We propose a rule mining algorithm for creating ABAC policies
with rules, a policy scoring algorithm for evaluating ABAC policies
from the least privilege perspective, and performance optimization
methods for dealing with the challenges of large ABAC privilege
spaces. Using a large dataset of 4.7 million Amazon Web Service
(AWS) audit log events, we demonstrate that our automated ap-
proach can effectively generate least privilege ABAC policies, and
can generate policies with less over-privilege and under-privilege
than a Role Based Access Control (RBAC) approach. Overall, we
hope our work can help promote a wider and faster deployment of
the ABAC model, and can help unleash the advantages of ABAC to
better protect large and complex computing systems.
CCS CONCEPTS
• Security and privacy → Access control.
KEYWORDS
ABAC, Principle of Least Privilege, Machine Learning, Rule Mining
ACM Reference Format:
Matthew W Sanders and Chuan Yue. 2019. Mining Least Privilege Attribute
Based Access Control Policies. In 2019 Annual Computer Security Applications
Conference (ACSAC ’19), December 9–13, 2019, San Juan, PR, USA. ACM, New
York, NY, USA, 13 pages. https://doi.org/10.1145/3359789.3359805
Permission to make digital or hard copies of all or part of this work for personal or
classroom use is granted without fee provided that copies are not made or distributed
for profit or commercial advantage and that copies bear this notice and the full citation
on the first page. Copyrights for components of this work owned by others than ACM
must be honored. Abstracting with credit is permitted. To copy otherwise, or republish,
to post on servers or to redistribute to lists, requires prior specific permission and/or a
fee. Request permissions from permissions@acm.org.
ACSAC ’19, December 9–13, 2019, San Juan, PR, USA
© 2019 Association for Computing Machinery.
ACM ISBN 978-1-4503-7628-0/19/12...$15.00
https://doi.org/10.1145/3359789.3359805
1 INTRODUCTION
Access control is a key component of all secure computing systems
but creating effective policies is a significant challenge to many orga-
nizations. Access control policies specify which privileged entities
can exercise certain operations upon certain objects under various
conditions. Too much over-privilege increases the risk of damage
to a system via compromised credentials, insider threats, and ac-
cidental misuse. Policies that are under-privileged prevent users
from performing their duties. Both of these conflicting goals are
expressed by the Principle of Least Privilege (PoLP) which requires
every privileged entity of a system to operate using the minimal
set of privileges necessary to complete its job [15]. The PoLP is a
fundamental access control principle in information security [19],
and is a requirement in security compliance standards such as the
Payment Card Industry Data Security Standard (PCI-DSS), Health
Insurance Portability and Accountability Act (HIPAA), and ISO
17799 Code of Practice for Information Security Management [18].
Many access control models have been introduced to address
the challenges of administrating policies, with different approaches
to balance between the goals of ease of use, granularity, flexibil-
ity, and scalability. Access control models are constantly evolving,
but Attribute Based Access Control (ABAC) continues to gain in
popularity as a solution to many use cases because of its flexibility,
usability, and ability to support information sharing. ABAC allows
security policies to be created based on the attributes of the user,
operation, and the environment at the time of an access request.
The flexibility of ABAC policies is both a strength and a hin-
drance. With the ability to create policies based on many attributes,
administrators face difficult questions such as what constitutes
“good” ABAC policies, how to create them, and how to validate
them? Additionally, the ABAC privilege space of a system can
be extremely large, so how can administrators determine which
attributes are most relevant in their systems?
We address these issues by taking a rule mining approach to
automatically create ABAC policies from systems’ audit logs. Rule
mining methods are a natural fit for creating ABAC policies which
contain rules regarding the actions that users can perform upon
resources under certain conditions. By identifying usage patterns
from audit logs to automatically generate and evaluate ABAC rules,
our approach will help an organization continuously improve its
deployed policy under the guidance of PoLP. Using out-of-sample
validation to evaluate the generated policies on a dataset of 4.7M
Amazon Web Service (AWS) audit log events [2], we show that our
rule mining algorithm is effective at generating policies which min-
imize both under-privilege and over-privilege assignment errors.
We make the following contributions in this paper: 1) a definition
of the ABAC Privilege Error Minimization Problem (PEMPABAC)
for balancing between under- and over-privilege errors in secu-
rity policies, 2) an algorithm for automatically generating least
privilege ABAC policies by mining audit logs, 3) an algorithm for
scoring ABAC policies using out-of-sample validation, 4) feature
selection, scalability, and performance optimization methods for
processing large ABAC privilege spaces, 5) a quantitative analysis of
the performance of our mining algorithm using a real-world dataset
consisting of over 4.7M audit log entries, and 6) a performance com-
parison of our method of generating ABAC policies with another
algorithm for generating RBAC policies. This work demonstrates
the effectiveness of our methodology for implementing least privi-
lege and generating ABAC policies from complex environments. It
also demonstrates that with proper design, an ABAC approach is
able to produce policies with less over-privilege and under-privilege
even based on less data than an RBAC approach.
The rest of this paper is organized as follows. Section 2 provides
background information on ABAC and rule mining methods, and
reviews related work. Section 3 formally defines the PEMPABAC
problem and metrics for evaluating policies. Section 4 describes
our algorithms for addressing the PEMPABAC problem. Section 5
analyzes the results of applying our algorithms to a real-world
dataset. Section 6 concludes our work.
2 BACKGROUND AND RELATED WORK
2.1 Background
2.1.1 Attribute Based Access Control (ABAC). ABAC is an access
control model where a subject’s requests to perform operations
on objects are granted or denied based on “the assigned attributes
of the subject, the assigned attributes of the object, environment
conditions, and a set of policies that are specified in terms of those
attributes and conditions” [8]. Attributes are any properties of the
subjects, objects, and environment encoded as name:value pairs.
Subjects may be persons or non-person entities, objects are system
resources, operations are functions executed upon objects at the re-
quest of subjects, while environment conditions are characteristics
of the context in which access requests occur and are independent
of subjects and objects [8]. ABAC’s flexibility allows it to imple-
ment traditional access control models such as Discretionary Access
Control (DAC), Mandatory Access Control (MAC), and Role Based
Access Control (RBAC).
RBAC [17] is flexible. It has been widely deployed and used for
more than two decades. However, as access control needs have be-
come more complex and applied to more diverse domains, organiza-
tions have found that RBAC does not provide sufficient granularity,
becomes difficult to manage, or does not support their information
sharing needs. Organizations facing these challenges may address
them using an ABAC based system. Consider the case of restricting
access for performing a database backup to a specific timeframe
and IP address range. Such constraints can be easily expressed us-
ing ABAC attributes, but cannot be expressed using only the user,
operation, and object semantics of the RBAC model.
2.1.2 Rule Mining Methods. Frequent itemset mining is a popular
method for identifying patterns with applications in many diverse
fields [7]. The frequent itemset problem is defined as follows: given
a transaction database DB and a minimum support threshold ϵ,
find the complete set of frequent patterns. The set of items is I =
{a1, ..., an} and a transaction database is DB = ⟨T1, ...,Tm⟩, where
Ti(i ∈ [1...m]) is a transaction which contains a set of items in I.
The support of a pattern A (where A is a set of items) is the fraction
of transactions containing A in the DB: support(A) = |Ti ∈DB|A⊆Ti |
.
A pattern is frequent if A’s support is >= ϵ (which is the minimum
support threshold) [6]. The output of frequent itemset mining is
many subsets of items that occurred within the transaction database
DB. In the context of creating access control policies, there is a clear
translation of frequent itemsets into ABAC rules, and generating
candidate rules from these frequent itemsets is a key component of
our rule mining algorithm (Section 4.1).
|DB|
2.2 Related Work
We group related work into two categories: those that deal with
generating least privilege RBAC policies, and those that address the
problems of modifying or creating ABAC policies of minimal size.
To the best of our knowledge, our work is the first to address the
problem of automatically creating least privilege ABAC policies.
Least Privilege Policy Generation. In [16], the authors defined
2.2.1
the Privilege Error Minimization Problem (PEMP) for RBAC, and
designed naive, unsupervised, and supervised learning algorithms
to minimize privilege assignment errors in RBAC policies. Another
important work in generating least privilege policies is [12], which
used Latent Dirichlet Allocation (LDA) to create least privilege
RBAC policies from logs of version control software. This work
used user attribute information in the mining process although the
resulting policies were RBAC policies. The authors introduced the
λ−Distance metric for evaluating candidate rules [12]. This metric
adds the total number of under-assignments to the total number
of over-assignments with λ acting as a weighting factor on the
over-assignments to specify how much it values over-privilege vs.
under-privilege for a particular application.
In comparison with these two works, we formally define PEMP
for ABAC in this paper. Moreover, we present new algorithms, new
metrics, and new optimization methods that are all necessary in
dealing with the much larger ABAC privilege space to properly
implement least privilege in ABAC policies.
2.2.2 ABAC Policy Mining. One early work on applying associa-
tion rule mining to ABAC policies was [5], which used the Apriori
algorithm [1] to detect statistical patterns from access logs of lab
doors in a research lab. The dataset consisted of 25 physical doors
and 29 users who used a smart-phone application and Bluetooth
to open the doors. The authors used the output of the mining al-
gorithm to identify policy misconfigurations by comparing mined
rules with existing rules.
In [9], the authors presented a tool named Rhapsody which also
uses the Apriori algorithm. Rhapsody seeks to create ABAC poli-
cies of minimal over-privilege by mining logs. However, it does not
provide a weighting method for balancing between under-privilege
and over-privilege, nor does it consider large and complex privilege
spaces. Rhapsody uses a simplified model of attributes with Users
and Permissions only. While Rhapsody is designed to operate on
“sparse” audit logs where only a small amount (≤ 10%) of all possible
log entries are likely to occur in the mined logs, our work is de-
signed to operate on logs several orders of magnitude more sparse
than those of Rhapsody by using optimization techniques described
in Section 4.3. In addition, the run time of Rhapsody grows expo-
nentially with the maximum number of rules a request may satisfy,
limiting the number of attributes that can be considered to “less
than 20” [9], which would prevent a direct comparison between
their approach and ours using our dataset of over 1,700 attributes.
Xu and Stoller [21] presented an algorithm to create ABAC poli-
cies that cover all the entries found in an audit log while also
minimizing the size of the overall policy through a process of merg-
ing and simplifying candidate rules until all the given privilege
tuples are covered. Their evaluation metric is an ABAC version
of Weighted Structural Complexity (WSC), which was originally
presented in [11] as a measure for the size of RBAC policies. Their
algorithm uses a simplified ABAC model, and calculates coverage
based on user-permission tuples, where a tuple ⟨u, o, r⟩ contains a
user, operation, and resource only, instead of considering all the
valid attribute combinations in the privilege space. This reduces
the computational complexity of mining and evaluating rules, but
presents a problem for accurately evaluating ABAC policies because
such a tuple may be either allowed or denied unless considering
the attributes of user, operation, and resource at the request time.
In comparison with these works, we use a model including Users,
Operations, Resources, and Environment attributes; we address the
challenges in systems with large and complex privilege spaces; we
measure under- and over-privilege of policies in our evaluation
instead of other metrics such as policy size and complexity; we
use out-of-sample validation to capture the performance of mined
policies over time given they were put into operation. While mini-
mizing complexity (evaluated by WSC) is desirable in that it makes
policies easier to maintain by administrators, we see it as less impor-
tant than least privilege performance over time. This is especially
true when using automated methods to build policies where less
administrator involvement is necessary. Methods for minimizing
ABAC policy complexity are complementary to our work as once
least privilege policies are identified, then methods for minimizing
policy complexity can be applied.
3 PROBLEM DEFINITION AND METRICS
This paper addresses the problem of minimizing privilege assign-
ment errors in ABAC policies. Access control can be viewed as
a prediction problem. The statements of a policy are predictions
about which entities should be granted privileges to perform spe-
cific operations upon the specific resources necessary to perform
their jobs. The goal of this work is to automatically generate poli-
cies that are accurate access control predictions. To help clarify
the specific problem this paper addresses, we formally define it as
the ABAC Privilege Error Minimization Problem (PEMPABAC) in
this section. We also define metrics to be used in evaluating the
performance of proposed solutions.
3.1 Problem Definition