time_event
timeProc
when
id
---
## Page 163
理它们等等。
件进行调度，决定何时应该处理文件事件，何时又应该处理时间事件，以及花多少时间来处
12.3
具体信息请参考示例配置文件 redis.conf 关于 hz 选项的说明。
秒运行一次。
隔一段时间，serverCron 就会执行一次，直到服务器关闭为止。
主要工作包括：
器可以长期、稳定地运行，这些定期操作由 redis.c/serverCron 函数负责执行，它的
12.2.3
因为服务器中同时存在文件事件和时间事件两种事件类型，所以服务器必须对这两种事
从 Redis2.8开始，用户可以通过修改 hz 选项来调整 serverCron 的每秒执行次数,
持续运行的 Redis 服务器需要定期对自身的资源和状态进行检查和调整，从而确保服务
事件的调度和执行由 ae.c/aeProcessEvents 函数负责，以下是该函数的伪代码表示：
在 Redis2.6版本，服务器默认规定 serverCron 每秒运行 10 次，平均每间隔100毫
def aeProcessEvents():
Redis 服务器以周期性事件的方式来运行 serverCron 函数，在服务器运行期间，每
口如果处于集群模式，对集群进行定期同步和连接测试。
口
口 清理数据库中的过期键值对。
口更新服务器的各类统计信息，
事件的调度与执行
如果服务器是主服务器，那么对从服务器进行定期同步。
尝试进行AOF 或 RDB持久化操作。
关闭和清理连接失效的客户端。
aeApiPoll(timeval)
timeval = create_timeval_with_ms (remaind_ms)
#如果事件已到达，那么 remaind_ms 的值可能为负数，将它设定为 0
#计算最接近的时问事件距离到达还有多少毫秒
善 获取到达时间离当前时间最接近的时间事件 
根据remaind_ms的值，创建timeval结构
时间事件应用实例：serverCron 函数
ind_ms 的值为0，那么aeApiPol1调用之后马上返回，不阻塞
比如时间、内存占用、数据库占用情况等。
第 12章事 
件+159
---
## Page 164
160·第二部分单机数据库的实现
子进程执行。
将余下的数据留到下次再写；另外，时间事件也会将非常耗时的持久化操作放到子线程或者
果写人字节数超过了一个预设常量的话，命令回复处理器就会主动用break跳出写人循环，
事件饥饿的可能性。比如说，在命令回复处理器将一个命令回复写人到客户端套接字时，如
断事件处理，也不会对事件进行抢占，因此，不管是文件事件的处理器，还是时间事件的处
达的时间事件了。
渐向时间事件所设置的到达时间逼近，并最终来到到达时间，这时服务器就可以开始处理到
间事件到达，那么服务器将再次等待并处理文件事件。随着文件事件的不断执行，时间会逐
函数不会阻塞过长时间。
个方法既可以避免服务器对时间事件进行频繁的轮询（忙等待），也可以确保 aeApiPoll
务器的运行流程可以用流程图12-10来概括。
以下是该函数的伪代码表示：
数，这就构成了 Redis 服务器的主函数,
一个循环里面，加上初始化和清理函
数里面的，这里为了方便讲述，才虚构了 processFileEvents 函数。
因为它并不存在，在实际中，处理已产生文件事件的代码是直接写在 aeProcessEvents 函
3）对文件事件和时间事件的处理都是同步、有序、原子地执行的，服务器不会中途中
2）因为文件事件是随机出现的，如果等待并处理完一次文件事件之后，仍未有任何时
1）aeApiPoll函数的最大阻塞时间由到达时间最接近当前时间的时间事件决定，这
 def main():
前面的12.1节在介绍文件事件API的时候，并没有讲到processFileEvents这个函数，
以下是事件的调度和执行规则：
从事件处理的角度来看，Redis 服
将 aeProcessEvents 函数置于
服务器关闭，执行清理操作
while server_is_not_shutdown() :
#一直处理事件，直到服务器关闭为止
init_server()
#初始化服务器
processTimeEvents()
#处理所有已到达的时间事件
processFileEvents()
#处理所有已产生的文件事件
aeProcessEvents()
图12-10事件处理角度下的服务器运行流程
关闭服务器
处理已产生的文件事件
等待文件事件产生
是否关闭服务器？
启动服务器
处理已达到的时间事件
★
开新的
---
## Page 165
12.5参考资料
12.4
中的规则2、3、4：
凸显了上面列举的事件调度规则
事件调度和执行过程。
实际处理时间，通常会比时间事件设定的到达时间稍晚一些。
 表12-1记录了一次完整的
表 12-1记录的事件执行过程
《Linux System Programming, Second Edition》第 2章的《Multiplexed I/O》小节和第
 《 Pattern-Oriented Software Architecture, Volume 4: A Pattern Language for Distributed
口 Redis 服务器是一个事件驱动程序，服务器处理的事件分为时间事件和文件事件两类。
因为时间事件尚未到达，
4）因为时间事件在文件事件之后执行，并且事件之间不会出现抢占，所以时间事件的
口时间事件的实际处理时间通常会比设定的到达时间晚一些。
文件事件和时间事件之间是合作关系，服务器会轮流处理这两种事件，并且处理事
口月
口文件事件处理器是基于 Reactor 模式实现的网络通信程序。
口 因为处理事件的过程中不
Computing》第 11章中的《Reactor》一节介绍了Reactor 模型的定义、实现方法和作用。
口
口
件的过程中也不会进行抢占。
多路复用及其相关函数进行了介绍。
4章的《Event Poll》小节，以及《Unix环境高级编程，第2版》的14.5节，都对I/O
性事件。
服务器在一般情况下只执行 serverCron 函数一个时间事件，并且这个事件是周期
性事件则每隔一段时间到达一次。
时间事件分为定时事件和周期性事件：定时事件只在指定的时间到达一次，而周期
（writable）或者可读（readable）时，相应的文件事件就会产生。
会出现抢占，所以实际处理时间事件的时间比预定的100毫秒慢了 30毫秒。
重点回顾
理了两次文件事件。
前，服务器已经等待并处
所以在处理时间事件之
开始时间
131
85
51
31
表12-1
结束时间
130
一次完整的事件调度和执行过程
执行时间事件
等待文件事件
处理文件事件
等待文件事件
创建一个在100毫秒到达的时间事件
处理文件事件
动作
第 12章
件·161
---
## Page 166
接的客户端的状态结构，对客户端执行批量操作，或者查找某个指定的客户端，都可以通过
关功能时需要用到的数据结构，其中包括：
redisClient 结构（客户端状态），这个结构保存了客户端当前的状态信息，以及执行相
的方式来处理命令请求，并与多个客户端进行网络通信。
向客户端返回命令回复。
每个客户端可以向服务器发送命令请求，而服务器则接收并处理客户端发送的命令请求，并
对于每个与服务器进行连接的客户端，服务器都为这些客户端建立了相应的redis.h/
通过使用由 I/O 多路复用技术实现的文件事件处理器，Redis 服务器使用单线程单进程
Redis 服务器状态结构的clients 属性是一个链表，这个链表保存了所有与服务器连
口客户端的创建时间，客户端和服务器最后一次通信的时间，以及客户端的输出缓冲
口客户端的标志值（flag)。
口客户端的套接字描述符。
Redis 服务器是典型的一对多服务器程序：一个服务器可以与多个客户端建立网络连接，
口客户端的身份验证标志。
口
口？
口名
口 指向客户端正在使用的数据库的指针，以及该数据库的号码。
口客户端的名字。
区大小超出软性限制（soft limit）的时间。
客户端执行发布与订阅功能时用到的数据结构。
客户端的事务状态，以及执行WATCH命令时用到的数据结构。
客户端执行 BRPOP、BLPOP 等列表阻塞命令时使用的数据结构。
客户端的复制状态信息，以及进行复制所需的数据结构。
客户端的输人缓冲区和输出缓冲区。
的指针。
客户端当前要执行的命令、命令的参数、命令参数的个数，以及指向命令实现函数
客
第13章
户
---
## Page 167
13.1.1套接字描述符
性，则会在相应的章节进行介绍。
13.1
户端的方法。
器
遍历clients 链表来完成：
客户端状态的fd 属性记录了客户端正在使用的套接字描述符：
本章将对客户端状态的各个属性进行介绍，并讲述服务器创建并关闭各种不同类型的客
typedef struct redisclient 1
本章将对客户端状态中比较通用的那部分属性进行介绍，至于那些和特定功能相关的属
口 另外一类是和特定功能相关的属性，比如操作数据库时需要用到的 db 属性和
口一类是比较通用的属性，这些属性很少与特定功能相关，无论客户端执行的是什么
客户端状态包含的属性可以分为两类：
而图 13-2 则展示了这个服务器的clients 链表的样子。
作为例子，图13-1展示了一个与三个客户端进行连接的服务
struct redisServer {
要用到的 watched_keys 属性等等。
dictid 属性，执行事务时需要用到的 mstate 属性，以及执行 WATCH命令时需
工作，它们都要用到这些属性。
！.··
客户端属性
int fd;
!.··
list *clients;
/1一个链表，保存了所有客户端状态
/1
··
redisServer
clients
··，
redisclient
图13-2clients 链表
（客户端1）
redisclient
（客户端2）
redisClient
图 13-1客户端与服务器
（客户蜡3）
第13章客户端·163
客户端3
户端
襄Ⅱ
服务器
---
## Page 168
164·第二部分单机数据库的实现
用户关系的客户端。
列的客户端；第二个客户端的名字是user_relationship，我们可以猜测它为负责处理
13.1.2名字
域显示了服务器连接客户端所使用的套接字描述符：
typedef struct redisClient ↑
客户端的名字记录在客户端状态的 name 属性里面：
其中，第一个客户端的名字是 message_queue，我们可以猜测它是负责处理消息队
以下展示的是客户端执行 CLIENT setname 命令之后的客户端列表：
使用CLIENT setmhame命令可以为客户端设置一个名字，让客户端的身份变得更清晰。
比如在下面展示的 CLIENT list 命令示例中，两个客户端的 name 域都是空白的：
在默认情况下，
addr=127.0.0.1:53469 f
redis> CLIENT list
执行CLIENT list 命令可以列出目前所有连接到服务器的普通客户端，命令输出中的 fd
redis> CLIENT 1ist
addr=127.0.0.1:53469 fd=7
redis> CLIENT list
口普通客户端的 fd 属性的值为大于-1 的整数：普通客户端使用套接字来与服务器进
口伪客户端（fake client）的 fd属性的值为-1：伪客户端处理的命令请求来源于AOF
根据客户端类型的不同，fd 属性的值可以是-1 或者是大于-1 的整数：
 redisClient;
描述符不能是－1，所以普通客户端的套接字描述符的值必然是大于－1的整数。
行通信，所以服务器会用 fd 属性来记录客户端套接字的描述符。因为合法的套接字
人AOF文件并还原数据库状态，而另一个则用于执行Lua脚本中包含的Redis命令。
要记录套接字描述符。目前 Redis 服务器会在两个地方用到伪客户端，一个用于载
文件或者Lua 脚本，而不是网络，所以这种客户端不需要套接字连接，自然也不需
robj *name;
，一个连接到服务器的客户端是没有名字的。
 name= age=4 idle=4 ...
---
## Page 169
13.1.3标志
queue"。
name 属性显示，客户端的名字为“message_
存着客户端的名字。
name 属性将指向一个字符串对象，而该对象就保
针；相反地，如果客户端为自己设置了名字，那么
图13-3展示了一个客户端状态示例，根据
口 REDIS_UNBLOCKED 标志表示客户端已经从 REDIS_BLOCKED 标志所表示的阻塞状
口 REDIS_PRE_PSYNC 标志表示客户端代表的是一个版本低于 Redis2.8的从服务器，
每个标志使用一个常量表示，一部分标志记录了客户端的角色：
客户端的标志属性flags 记录了客户端的角色（role），以及客户端目前所处的状态：
如果客户端没有为自己设置名字，那么相应客户端状态的 name 属性指向 NULL 指
REDIS_MONITOR标志表示客户端正在执行MONITOR命令。
而另外一部分标志则记录了客户端目前所处的状态：
 REDIS_LUA_CLIENT 标识表示客户端是专门用于处理Lua 脚本里面包含的 Redis
口在主从服务器进行复制操作时，主服务器会成为从服务器的客户端，而从服务器也
也可以是多个标志的二进制或，比如：
flags = 
flags属性的值可以是单个标志：
) redisClient;
typedef struct redisClient ↑
命令的伪客户端。
} redisclient:
REDIS_BLOCKED 标志表示客户端正在被BRPOP、BLPOP等命令阻塞。
REDIS_UNIX_SOCKET标志表示服务器使用UNIX套接字来连接客户端。
SLAVE 标志处于打开状态时使用。
主服务器不能使用PSYNC命令与这个从服务器进行同步。这个标志只能在REDIS
器，REDIS_SLAVE 标志表示客户端代表的是一个从服务器。
会成为主服务器的客户端。REDIS_MASTER 标志表示客户端代表的是一个主服务
!..·
int flags;
！.··
redisClient
name
···
图 13-3name 属性示例
第13章客户端·165
"ananb abessaw..
 Stringobject
---
## Page 170
166·第二部分单机数据库的实现
同的副作用。SCRIPT LOAD 命令的情况与PUBSUB命令类似：虽然 SCRIPT LOAD 命
这样在将来载入 AOF 文件时，服务器就可以再次执行相同的 PUBSUB 命令，并产生相
变。因此，服务器需要使用 REDIS_FORCE_AOF标志，强制将这个命令写入AOF 文件，
发送消息这一行为带有副作用，接收到消息的所有客户端的状态都会因为这个命令而改
中的例外。PUBSUB 命令虽然没有修改数据库，但 PUBSUB 命令向频道的所有订阅者
读命令，这个命令不会被写入到AOF文件，也不会被复制到从服务器。
制到各个从服务器。如果一个命令没有对数据库进行任何修改，那么它就会被认为是只
以上规则适用于绝大部分Redis 命令，但PUBSUB命令和SCRIPTLOAD命令是其
以上提到的所有标志都定义在 redis.h 文件里面。