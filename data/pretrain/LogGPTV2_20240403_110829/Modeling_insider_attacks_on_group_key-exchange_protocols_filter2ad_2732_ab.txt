### Modeling Group Key-Exchange Protocols with Different Participant Groups

Following the approach in [2], we model different groups of participants through the use of instances. We denote the \(i\)-th instance of player \(U\) as \(\theta_i^U\). Our treatment of session IDs differs from [7, 23] and aligns with [4, 13, 14], assuming that unique session IDs are provided by a higher-level protocol when the group key-exchange protocol is first initiated. Consequently, all members participating in a given execution of the protocol will share the same session ID.

This approach is more consistent with how session IDs are handled in the Universal Composability (UC) framework. It also simplifies the group setting, where each player's view (i.e., transcript) of a single protocol execution may differ. In contrast, in a two-party setting, both players obtain identical transcripts, allowing the session ID to be defined as a function of this common transcript. Additionally, since a single player may concurrently run multiple instances of a group key-exchange protocol, pre-defined session IDs help distinguish the sessions to which incoming messages belong.

### Session and Partner IDs

- **Session ID**: The session ID of instance \(\theta_i^U\) is denoted as \(\text{sid}_i^U\).
- **Partner ID**: The partner ID of instance \(\theta_i^U\), denoted as \(\text{pid}_i^U\), is a set containing the identities of the players in the group with whom \(\theta_i^U\) intends to establish a session key, including \(U\) itself.
- **Initialization**: The values of \(\text{sid}_i^U\) and \(\text{pid}_i^U\) are established when \(\theta_i^U\) first initiates the protocol. Both session IDs and partner IDs are public information.

### Instance Acceptance and Key Establishment

An instance \(\theta_i^U\) accepts when it computes a valid session key \(\text{sk}_i^U\). If an instance does not accept, it terminates without outputting any session key. Whether an instance has accepted or terminated without acceptance is public information. Once an instance accepts, it remains in an accepting state.

Two instances \(\theta_i^U\) and \(\theta_j^{U'}\) (with \(U \neq U'\)) are considered partnered if:
1. Both have accepted.
2. They share the same session ID: \(\text{sid}_i^U = \text{sid}_j^{U'}\).
3. They have the same partner ID: \(\text{pid}_i^U = \text{pid}_j^{U'}\).

### Correctness

We define correctness following [7, 8, 9, 23] by requiring that if the adversary honestly forwards all messages between instances of players in a given set \(\text{pid}\), and each such instance holds the same value \(\text{sid}\), then these instances all accept and output identical session keys.

### Adversarial Model

The actions of an adversary are modeled using the following oracles:

- **Execute(\(\text{sid}, \text{pid}\))**: Prompts a complete execution of the protocol between unused instances of players in \(\text{pid}\) (using session ID \(\text{sid}\)), and outputs a transcript of the execution. This models passive attacks.
- **Send(\(U, i, M\))**: Sends message \(M\) to instance \(\theta_i^U\) and outputs the response. The query \(\text{Send}(U, i, (\text{sid}, \text{pid}))\) prompts \(\theta_i^U\) to initiate the protocol using session ID \(\text{sid}\) and partner ID \(\text{pid}\) (where \(U \in \text{pid}\)).
- **Reveal(\(U, i\))**: Provides the adversary with the session key \(\text{sk}_i^U\) of instance \(\theta_i^U\), assuming this instance has accepted.
- **Corrupt(\(U\))**: Outputs the long-term secret key \(\text{SKU}\) of player \(U\). This models corruption of the long-term state of this player, or corruption at a time when the player is not currently executing the protocol.
- **Test(\(U, i\))**: Does not correspond to any real-world action but provides a means of defining security. This query is allowed only when \(\theta_i^U\) has accepted. In response, a random bit \(b\) is chosen. If \(b = 0\), a random session key is output; if \(b = 1\), the session key \(\text{sk}_i^U\) is output. The adversary can access this oracle once at any time.

For Execute and Send queries, any \(\text{sid}\) is used by at most a single instance of a given player. The Corrupt oracle corresponds to the weak corruption model. The strong corruption model, where \(\text{Corrupt}(U)\) returns the internal state of any active instances of \(U\) in addition to \(U\)'s long-term secret key, is also possible.

### AKE Security

We define AKE-security following [7, 23]. An instance \(\theta_i^U\) is associated with session \((\text{sid}, \text{pid})\) if \(\text{sid}_i^U = \text{sid}\) and \(\text{pid}_i^U = \text{pid}\). A player \(U\) is corrupted if the adversary queries \(\text{Corrupt}(U)\).

**Freshness**:
- **Weak Corruption Model**: An instance \(\theta_i^U\) associated with session \((\text{sid}, \text{pid})\) is unfresh if (1) the adversary queried \(\text{Reveal}(U', j)\) for any instance \(\theta_j^{U'}\) associated with \((\text{sid}, \text{pid})\), or (2) the adversary corrupted some player in \(\text{pid}\) before every instance associated with \((\text{sid}, \text{pid})\) had terminated.
- **Strong Corruption Model**: An instance \(\theta_i^U\) is unfresh if (1) as above, or (2) the adversary corrupted some player in \(\text{pid}\) before \(\theta_i^U\) terminated.

All other instances are considered fresh. The adversary succeeds (denoted by event \(\text{Succ}\)) if it queries the Test oracle regarding a fresh instance and correctly guesses the value of the bit \(b\) used by the Test oracle in answering this query. The advantage of adversary \(A\) attacking protocol \(\Pi\) is defined as \(\text{Adv}_{A, \Pi}^{\text{ake}} = |\Pr[\text{Succ}] - \frac{1}{2}|\).

**Definition**: Protocol \(\Pi\) is said to be AKE-secure if, for any polynomial-time adversary \(A\), the advantage \(\text{Adv}_{A, \Pi}^{\text{ake}}\) is negligible (as a function of the security parameter). This definition of freshness ensures that AKE-security encompasses forward secrecy.

### Insider Attacks within the AKE-Security Framework

We provide definitions of insider attacks within the AKE-security model. These definitions, though superseded by those in the following section, may be of independent interest as they appear to be the first formal definitions of insider security for group key exchange within the AKE-security framework.

#### Agreement

**Definition 1**: An adversary \(A\) violates agreement if there exist partnered instances \(\theta_i^U\) and \(\theta_j^{U'}\) such that (1) neither \(U\) nor \(U'\) are corrupted, but (2) \(\text{sk}_i^U \neq \text{sk}_j^{U'}\). A protocol guarantees agreement if the probability that any polynomial-time adversary violates agreement is negligible.

#### Insider Impersonation Attacks

**Definition 2**: An adversary \(A\) succeeds in an outsider impersonation attack if there exist a party \(U'\) and an instance \(\theta_i^U\) such that (1) \(A\) impersonates \(U'\) to \(\theta_i^U\) and (2) no players in \(\text{pid}_i^U\) are corrupted at the time \(\theta_i^U\) accepts. A protocol is secure against outsider impersonation attacks if the probability that any polynomial-time adversary succeeds in the above attack is negligible.

**Definition 3**: An adversary \(A\) succeeds in an insider impersonation attack if there exist a party \(U'\) and an instance \(\theta_i^U\) such that (1) \(A\) impersonates \(U'\) to \(\theta_i^U\) and (2) neither \(U\) nor \(U'\) is corrupted at the time \(\theta_i^U\) accepts. A protocol is secure against insider impersonation attacks if the probability that any polynomial-time adversary succeeds in the above attack is negligible.

Security against insider impersonation attacks implies security against outsider impersonation attacks.

**Shorthand**: A protocol is secure against insider attacks if it is AKE-secure, secure against insider impersonation attacks, and guarantees agreement.

**Claim 1**: There exists (under standard cryptographic assumptions) an AKE-secure protocol that is neither secure against outsider impersonation attacks nor guarantees agreement.

**Proof**: We describe a "silly" protocol that is AKE-secure but not secure against outsider impersonation attacks. (Note that there are more natural protocols with the same properties, but it is easiest to prove the claim with this example.)