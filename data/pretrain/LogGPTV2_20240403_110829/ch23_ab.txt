当系统发生故障时，寻找导致故障的因素是良好和正确的，因为我们能够设法避免系统再次以同样方式失败。避免反复发生的失败，这种愿望是一种非常强大的激励，推动我们去理解问题并做出改进。在进行这种调查的过程中，当我们发现问题在于某个人的决定带来的意外和有害的后果时，很容易停下来做出自己的判断，这是有原因的。
我们感到现在可以从调查模式转向“解决问题”，这让我们开始专注于做出结论，并避免问题的再次发生。在分析问题根源的时候，要把一系列的问题归因于某个人（相比机器来说）是更困难的。试图弄清楚那个人做出决定的背景（他的知识、他们采取的确切行动、以及他面对的无数可能的状况）：有些因素不仅来自当时的工作环境，而且来自他们当时的生活状况。这时我们就会面对体会到为什么他们会犯错，并且在最坏的情况下会产生完全的误判。假设可以随后采访参与处理的人（在严重事故中并非总是如此），过去几十年的令人不安的证据是许多我们记得的事情从未实际发生过：Amelia Tait 的文章 "The movie that doesn’t exist and the Redditors who think it does" 以及 Hal Arkowitz 和 Scott O. Lilienfeld 合著的文章 "Why Science Tells Us Not to Rely on Eyewitness Accounts"我们应该避免继续流行了几十年的二元问题分析，也就是试图确定事故的“原因”是硬件故障还是人为失误。要知道，即使是“纯粹”的机械故障，可能也可以追溯到相关管理人员的任命失误或玩忽职守。比如被卡住的轴承未充分润滑，或在制造过程中冷却过快，或不慎掉落，或插入用力过大，或更换频率过高，等等。
反过来说，“人类”的原因也是如此。如果人类没有适当地执行任何这些操作，那么可能应该有一个机械化测试来捕获它，或者部件或系统设计时应该有更强的容错能力。或者至少应该有一个更直观的问题指示仪，使维护人员能立即发现并开始处理尚可修复的错误，而不必导致灾难性的生产故障。
这里有两种诱人但无益的倾向。第一种是误判某人、或硬件、或软件、或任何其他特定类别的错误，认为那就是问题的原因，而没有发现这是一个有缺陷的系统的必然后果。因为如果有机会，这个系统将不可避免地再次产生故障。第二种观点认为，事后事件分析可以（或实际上应该）追查到“根本原因”。事后分析应该作为一个目标，彻底了解失败的所有方面，而不是寻找个别的“肇事者”。
很多时候，所谓“根本原因”也就是探求的终点，我们自认为没必要跟进一步分析和总结了。无论这是因为我们觉得很难更进一步，还是因为之前得到的某个结论恰好能匹配现在的状况。
尽可能避免根本原因的思维，哪怕是对原因的追求也要避免，我更喜欢考虑促成因素，因为其中任何一个可能都不足以导致观察到的后果，但整体促成了一种失败模式，最终被系统的用户感知。分析需要有系统观念，也就是把令人惊讶、不受欢迎的问题其实是由许多单独条件组合带来的结果，所有这些条件都是必要的，但它们又都不足以导致或引发问题，最终是通过类似多米诺骨牌的链式作用而导致的问题。
传统的问题分析报告两者都会兼顾，但最有趣的线索总是关于问题的促成因素。在报告的这部分，我们往往会发现某些（可能不是直接导致当前调查结果的）最关键缺陷，可能对某机构的系统、团队和服务产生更广泛、深远的影响。所以，不要讨厌那些可恶的人，也不要挖掘问题根源。因果分析不是夺旗比赛。即使你认为自己已经知道发生了什么（以及哪里出了问题），也请花点时间探索整个系统，也去逐一筛查导致问题的所有可能事件和条件。我在这方面的大部分理论来自 Allspaw的著作，及其引用的关于生产工程的跨学科资料。有关此主题的更详细的讨论，请参阅 John Allspaw 的文章 The Infinite Hows和 Woods/Dekker/Cook/Johannesen/Sarter 合著的 人类错误的背后。 ；
反模式5：丢包袱
轮值不是别人的事情。
丢包袱：将响应系统故障的最终责任分配给未创建生成故障的系统的团队或个人。
运维业界的另一个令人头痛的谬误：许多产品开发人员听说了 Google 通过 SRE 工程师来提供轮值待命，于是认为这意味着产品团队不必参与故障修复的工作，他们觉得应该组件自己的 SRE 团队，以便他们不必继续轮值。这不是我第一次或最后一次听到这种误解，但可靠性其实是关于响应速度的工程问题。高绩效组织的关键特征之一是快速反馈循环，从创建生产代码的那一刻起，到集成、测试和部署，一直到生产代码在现实世界中的支持。
把轮值作为包袱丢给他人，这种做法将软件的创建与该软件的产生的后果分开，完全打破了反馈周期，防止了产品团队的快速学习和迭代，并为团队对抗而埋下了祸根。因为生产团队会试图获得某种程度的控制，并限制产品开发人员对系统的改进，因为他们对交付功能缺乏那种强烈的渴望。
这不是 SRE 的运作模式，因为轮值是共同的责任。对于如何参与轮值，有很多不同的模式（产品开发者轮流在 SRE 受训、产品团队提供二级轮值支持、产品团队和 SRE 以相同的频率轮值等等），但即使完全由 SRE 承担轮值任务，产品团队也肯定会被抽调人力。开发团队需要以产品支持的形式参与，SRE 团队可以联系该产品团队，从而高速解决（并非纯粹由于部署或基础结构问题而导致的）某些问题。在所有情况下，处理生产事故的最终责任应该由开发团队承担。如果运维团队负荷过重，产品团队需要补充人力，修补技术漏洞，甚至可以考虑如何才能彻底避免轮值。
当然，如果运维的负载只是健康服务的结果，而且其增长速度正在以超过 SRE 团队建设能力的速度增长，那么扩充 SRE 团队也是一个选择。有些人即使知道系统问题在于技术设计，也很想扩充人力：“现在让我们再加一些人，然后我们再解决它”。
但是，好的 SRE 比优秀的产品开发人员更难招聘，因此这样做很难避免将团队拖入运维困境，因为服务的增长速度往往会非常快，很容易发展到无法彻底解决的地步。
几乎不可能通过招聘来偿还技术债务（有问题的设计）。作为 SRE，需要让组织致力于利用现有的所有资源，来积极面对和追求可靠性和可扩展性，这意味着不能接受不可扩展的模型，无论是技术模型还是团队模型。
反模式 6：马戏团表演模式！
精英战士（英雄文化）是一个陷阱。反模式 6：马戏团表演模式！
精英战士（英雄文化）是一个陷阱。
马戏团表演模式：重视事件处理的英雄气概，而不提倡谨慎的设计和预案。这也包括那些各方面都在努力，但是只有故障修复者才得到公众赞扬和奖励的情况。
我们大多数人都犯了这个错。SRE 不是马戏。它们不是系统的海军陆战队。没错，这是一个需要技能和知识的罕见组合的团队。我们确实不断专研和训练，以备问题出现时迅速解决。
是的，当来自整个组织的所有人员（尤其是职位显要、业务关键或产品开发人员，甚至你的部门之外）都认识到你正是拯救了大家的那个人，并感谢您所承受的一切时，肯定会有点飘飘然，感觉好像拯救了整个世界一样。此外，可能会有人开始效法你的言谈举止，热衷于听你讲那些著名的“救火故事”。
但是，在面对系统故障时，赞扬和奖励个人牺牲的英雄文化其实是破坏性的文化。不仅问题的处理本身会受到影响，而且会带来运维团队的骄傲，阻碍了设计的改进和预案的提升，并直接导致运维人员流失和工程师倦怠。常被搅扰的工程师不可能是高产能的工程师，总的来说他们（和其他不被打扰或不参与长时间处理问题人相比）生活品质更差。
轮值是了解复杂服务如何失败，并了解系统构建特性的好方法。但是，它应该最多每季度一两次，而不是每周一次或两次，且不应该因为团队太小（无人可以交接）而导致某些人长时间连轴转。
每个班次的事故频率应该足够低，以工作、睡眠、家庭或其他日常生活中关键部分的时间被挤压。而当有人在轮值上花的时间超过了一周十几个小时后，理应让其他工程师来代替他们，并且给与额外的补偿，从而使他有可能重新回到正常的生活节奏。
我们不应表扬独立承担整个故障恢复的人员，而应质疑为何不根据需要轮换额外的人员，并考虑系统设计是否尽可能简单、可靠、有弹性且有自主恢复的可能。
如果你是负责 SRE 职能的领导者，需要尽一切可能在整个公司或机构中推广一种文化，为可持续工作和事件响应提供模型，并为提高规模伸缩、服务韧性、稳健性和执行效率的工程工作表达感谢。而不要提升大家为公司需要而牺牲自己，忙于补漏的那种不良的热情。反模式7：警报可靠性工程