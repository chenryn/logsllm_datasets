ν(t)∈t-preﬁx (α(cid:1),st(cid:1) )t = (k + 1)d + τ
and preﬁx(α(cid:1), σk) = preﬁx(α, σk). By identifying σk+1
with st(cid:1) and α(k+1) with α(cid:1)
we see that the conditions (i)
(cid:2)
(cid:3)
and (ii) are satisﬁed. Now, observing that the sequence
preﬁx (α(k), σk)
k∈N is monotone (any execution frag-
ment in the sequence is a preﬁx of the succeeding one), we
choose β to be the limit of the sequence as k → ∞.
(cid:2)
(cid:1)
and
We now deﬁne the notions of milestone states and rounds
used in the analysis.
states
(cid:3)σk(cid:4)k≥0
Deﬁnition 3.2 Let α be an admissible execution, σ0 be any
state in α, and d > 0 a constant. Let β be a time-passage
equivalent of α, constructed as in Lemma 3.2, con-
(cid:1)
such that
taining a subsequence of
ν(t)∈t-preﬁx (β,σk)t = kd + τ for every k ∈ N. Then:
(i) We call β a milestone execution and denote it by α↓ σ0
d .
(ii) We call the states {σk}k≥0 milestone states.
(iii) We call the execution fragments of α ↓σ0
d between
any two consecutive milestone states σk and σk+1, a
round.
Given that we can always construct a milestone execu-
tion for any admissible execution, in the rest of the paper, to
avoid notational clutter, we assume implicitly that given any
admissible execution α with a state σ0, and d > 0, α con-
tains the milestone states (cid:3)σk(cid:4)k≥0.
3.2. Measuring Performance
Fix d > 0, the normal message delay. JOIN-SYSTEM al-
lows sending of messages at arbitrary times. For the pur-
pose of analysis, we restrict the sending pattern: We assume
that each automaton has a local real-valued clock, and sends
messages at the ﬁrst possible time and at regular intervals of
d thereafter, as measured on the local clock. Our results also
require restrictions on timing and failure behavior: We de-
ﬁne a segment of an admissible timed execution to be nor-
mal provided that all local clocks progress at rate exactly 1,
all messages that are sent are delivered within time d to
Proceedings of the 2004 International Conference on Dependable Systems and Networks (DSN’04) 
0-7695-2052-9/04 $ 20.00 © 2004 IEEE 
Authorized licensed use limited to: Tsinghua University. Downloaded on March 20,2021 at 11:50:34 UTC from IEEE Xplore.  Restrictions apply. 
-normal execution) Let α(cid:1)
non-faulty nodes, local processing time is 0, and informa-
tion is gossiped at intervals of d. We now deﬁne this setting
in more detail.
Deﬁnition 3.3 (α(cid:1)
be a ﬁnite
preﬁx of an admissible timed execution α of JOIN-SYSTEM.
Execution α is called α(cid:1)
-normal if it satisﬁes the following
properties after α(cid:1)
1. Regular timing behaviour of automata: The lo-
the Join-P rotocolv automata
cal clocks of all
progress at the same rate of real time.
:
2. Periodic messaging:
join-
acknowledgements messages are sent at regular
intervals of d.
gossip
The
and
3. Reliable message delivery: Any message reaches its
destination correctly if the destination is non-faulty.
4. Bound of message delay: Any message reaches its des-
tination with a delay bounded by d.
Given a normal execution α of JOIN-SYSTEM with pe-
riodic gossip, we are interested in the properties of join-
connectivity graphs at milestone states of the time-passage
equivalent milestone execution. We are interested in time
necessary for any two nodes that join the system to learn
about each other.
Deﬁnition 3.4 Let α be a α(cid:1)
-normal execution of JOIN-
, and let (cid:3)σi(cid:4)i≥0
SYSTEM. Let σ0 be a state in α after α(cid:1)
be the sequence of consecutive milestone states of α↓ σ0
d be-
ginning with σ0, and {(σi.J, σi.E)}i≥0 be the correspond-
ing sequence of join-connectivity graphs.
(i) For vertices u, v ∈ σ0.J that do not fail, we deﬁne
join-delay jd(σ0, u, v) between u and v with respect to
state σ0 as mini≥0{i : (u, v) ∈ σi.E ∧ u, v ∈ σi.J}.
join-delay
as
jd(σ0) = max{jd(σ0, u, v) : u, v ∈ σ0.J ∧ (∀i ≥ 0 :
¬σi.v.failed ∧ ¬σi.u.failed)}.
The deﬁnition of join-delay gives the maximum num-
ber of communication rounds of JOIN-SYSTEM sufﬁcient
for any two non-faulty nodes that joined the system to learn
about each other. So, for a milestone state σ0, the quantity
d · jd(σ0) corresponds to the maximum time sufﬁcient for
any two non-faulty nodes that joined by σ0 to discover one
another.
(ii) We deﬁne
for σ0
jd(σ0)
the
4. Analysis of JOIN-SYSTEM
In JOIN-SYSTEM the input action join(H)v the non-
empty subset H may be of any ﬁnite size. In this paper
we distinguish two cases: |H| = 1, which we call single-
request join, and |H| > 1, which we call multi-request join.
In the rest of this section we analyze the behavior of JOIN-
SYSTEM with the following assumptions:
1. single-request without any faulty processes,
2. multi-request without any faulty processes,
3. single-request with faulty processes, and
4. multi-request with faulty processes.
4.1. Join-Delay in the Absence of Failures
For failure-free executions, single-request join behavior
analysis is a special case of the multi-request case. We ﬁrst
evaluate the multi-request behavior, then specialize it for the
single-request case. In both cases we show that if two nodes
join the system by the time it becomes stable, then they learn
about each other in time proportional to the logarithm of the
diameter of the join-connectivity graph in which both nodes
are originally represented.
4.1.1. Multi-requests in the absence of failures
We start by giving two lemmas, then present the result.
k
2
(cid:4)
k
2
(cid:4)
Lemma 4.1 Let α be a α(cid:1)
-normal, d-delay (mile-
stone) execution of JOIN-SYSTEM, where after α(cid:1)
no
nodes fail and new nodes may join at one or more
nodes. Let {σj}j≥0 be the milestone states after α(cid:1)
(cid:5)
. Then
σi.B(v; k) ⊆ σi+4.B(v;
) for any v ∈ σi.J ∩ σi+4.J,
i ≥ 0 and k > 0.
Proof. Consider, for some k > 0 and i ≥ 0, the balls
(cid:5)
) on the metric spaces
σi.B(v; k) and σi+4.B(v;
(σi.J, σi.dist) and (σi+4.J, σi+4.dist), respectively.
Suppose u ∈ σi.B(v; k) and hence σi.dist (v, u) ≤ k,
, for some 0 ≤ k(cid:1) ≤ k.
suppose σi.dist (v, u) = k(cid:1)
So there is a path from v to u in the induced
undirected graph (σi.J , σi.E),
let us denote it as
v = v0, v1,··· , vk(cid:1)−1, vk(cid:1) = u. Now, consider any
three consecutive vertices vj, vj+1 and vj+2, for any
0 ≤ j ≤ k(cid:1) − 2,
in the path. Observe that, be-
fore the state σi+1, any vertex vj, 0 < j ≤ k(cid:1)
if
will go through the transitions
vj−1 ∈ σi.vj.world. Similarly, before the state σi+1,
any vertex vj, 0 ≤ j < k(cid:1)
will go through the tran-
if vj+1 ∈ σi.vj .world. All
sitions send(W )vj ,vj+1,
these messages will reach their destinations, i.e., vj−1
or vj+1, before the state σi+2. So, by state σi+2 we
will have at least (vj+1, vj), (vj+1, vj+2) ∈ σi+2.E for
any 0 ≤ j ≤ k(cid:1) − 2. Now, as a result of the transi-
tions send(W )vj+1,vj and send(W )vj+1,vj+2 before the
state σi+3 we will have (vj, vj+2), (vj+2, vj) ∈ σi+4.E.
So, in the join-connectivity graph (σi+4.J, σi+4.E) we can
choose the path v = v0, v2,··· , v2i,··· , vk(cid:1)−2, vk(cid:1) = u,
even, or v = v0, v2,··· , v2i,··· , vk(cid:1)−1, vk(cid:1) = u,
for k(cid:1)
for k(cid:1)
odd, between vertex v and u. Observe that the
(cid:7)
length of the above path between vertices v and u in
the join-connectivity graph
.
(σi+4.J, σi+4.E) is
send(W )vj ,vj−1,
(cid:6)
k(cid:1)
2
Proceedings of the 2004 International Conference on Dependable Systems and Networks (DSN’04) 
0-7695-2052-9/04 $ 20.00 © 2004 IEEE 
Authorized licensed use limited to: Tsinghua University. Downloaded on March 20,2021 at 11:50:34 UTC from IEEE Xplore.  Restrictions apply. 
(cid:4)
(cid:5)
k
2
k
2
(cid:4)
(cid:5)
).
) which proves
(cid:2)
Since k(cid:1) ≤ k hence u ∈ σi+4.B(v;
σi.B(v; k) ⊆ σi+4.B(v;
Lemma 4.2 Let α be a α(cid:1)
-normal execution of JOIN-
SYSTEM, where after α(cid:1)
no nodes fail and new nodes may
join at one or more nodes. Let (cid:3)σj(cid:4)j≥0 be the milestone
states in α after α(cid:1)
. Then jd(σ0) = O (log (σ0.G.diam)).
Proof. Recall that σ0.G.diam is the diameter of the join-
connectivity graph σ0.G = (σ0.J, σ0.E). Let us consider
any u, v ∈ σ0.J. Since there are no faulty nodes we know
that u ∈ σ0.B(v; σ0.diam). Now, using Lemma 4.1 we get
that v ∈ σi.B(v; 1) for i = O (log (σ0.G.diam)) and hence
(cid:2)
jd(σ0) = O (log (σ0.G.diam)).
Lemma 4.3 Let α be a α(cid:1)
-normal execution of JOIN-
SYSTEM, where after α(cid:1)
no nodes fail and new nodes may
join at one or more nodes. Let {σj}j≥0 be the milestone
states in α after α(cid:1)
. Then jd(σ0) = Ω (log (σ0.G.diam)).
Proof. We assume that no new processes join after the sys-
tem reaches system state σ0 and consider some state σi, for
i ≥ 0. Suppose the diameter of the graph (σi.J, σi.E) is
ni, i.e., σi.diam = ni ≥ 1. So, there exists u, v ∈ σi.J
such that σi.dist(u, v) = ni and hence there is a path
u = u0, u1,··· , uni−1, uni = v in (σi.J, σi.E). Now, ob-
serve that for any uj, uk ∈ σi.J for 0 ≤ j, k ≤ ni we have
σi.dist(uj, uk) = |j − k|, otherwise, σi.dist(u, v) < ni.
Let us denote by the set U = {u0, u1,··· , uni−1, uni}.
Now, consider the undirected subgraph (U, EU (σi)) of the
graph (σi.J, σi.E) by including those edges of σi.E which
are among the vertices of U. Now, we know that EU (σi) =
{(uj, uj+1) : 0 ≤ j < ni ∧ uj, uj+1 ∈ U}.
(cid:8)
the
Next,
consider
join-connectivity
graph
(σi+1.J, σi+1.E) when the system is in state σi+1.
Since there are no node failures we have U ⊆ σi+1.J.
Now, let us consider the subgraph (U, σi+1.EU ) of the
graph (σi+1.J, σi+1.E). Now according to the assump-
-normal execution we have σi+1.EU ⊆
tion of a α(cid:1)
σi.EU ∪ {(uj, uj+2) : 0 ≤ j < ni − 1 ∧ uj, uj+2 ∈ U}.
The existence of any edge other than the ones in σi+1.EU
would signify that σi.dist(u, v) < ni. Now,
by in-
specting the set of edges σi+1.EU we observe that
. Hence σi+1.diam ≥
σi+1.dist(u, v) ≥
(cid:9)
(cid:11)
σi+1.dist(u, v) ≥
.
i = Ω (log (σ0.G.diam))
Clearly, we have
have
we
(cid:2)
jd(σ0) = Ω (log (σ0.G.diam)).
Theorem 4.4 Let α be a α(cid:1)
-normal execution of JOIN-
SYSTEM, where after α(cid:1)
no nodes fail and new nodes may
join at one or more nodes. Let (cid:3)σj(cid:4)j≥0 be the milestone
states in α after α(cid:1)
. Then jd(σ0) = Θ (log (σ0.G.diam)).
for
have σi.diam ≥
2. Therefore, we
σi.dist(u,v)
σi.dist(u,v)
σi.G.diam
(cid:9)
(cid:8)
2
(cid:10)
=
2
2
Proof. Follows from Lemma 4.2 and Lemma 4.3. The lower
bound is true since Lemma 4.3 holds even though no nodes
(cid:2)
join the system.
4.1.2. Single-requests in the absence of failures
We now specialize the multi-request join result for the
single-request case.
Theorem 4.5 Let α be a α(cid:1)
-normal execution of JOIN-
SYSTEM, where after α(cid:1)
no nodes fail and new nodes may
join at only one node. Let (cid:3)σj(cid:4)j≥0 be the milestone states in
α after α(cid:1)