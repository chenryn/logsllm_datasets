### 4. Evaluation

This section evaluates the effectiveness and performance of our SpyProxy architecture and prototype. The prototype includes the performance optimizations described earlier. Our results address three key questions: 
1. How effective is our system at detecting and blocking malicious Web content?
2. How well do our performance optimizations mask latency from the user?
3. How well does our system perform under a realistic workload?

#### 4.1 Effectiveness at Blocking Malicious Code

We first consider the ability of SpyProxy to successfully block malicious content. To quantify this, we manually gathered a list of 100 malicious Web pages on 45 distinct sites. Each of these pages performs an attack of some kind. We found these pages using a combination of techniques, including:
1. Searching Google for popular Web categories such as music or games.
2. Mining public blacklists of known attack sites.
3. Examining public warning services such as SiteAdvisor.

Some of the Web pages exploit browser vulnerabilities to install spyware, while others attempt to "push" malicious software to clients, requiring user consent to install it. We configured SpyProxy to automatically accept such prompts to evaluate its effectiveness at blocking these threats. The pages include a variety of attack methods, such as the WMF exploit, ActiveX controls, applet-based attacks, JavaScript, and pop-up windows. A successful attack inundates the victim with adware, dialer, and Trojan downloader software.

Table 1 quantifies the effectiveness of our system. SpyProxy detected and blocked 100% of the attack pages, despite the diversity of attack methods. Further, most of these attack pages contained some form of non-deterministic content; in practice, none of the attacks we found attempted to evade detection by "hiding" inside non-deterministic code.

| **Metric** | **Value** |
|------------|-----------|
| Malicious pages visited | 100 |
| # Sites containing malicious pages | 45 |
| Malicious pages blocked by SpyProxy | 100% |
| Malicious domains identified by SiteAdvisor | 80% |
| Malicious pages containing non-determinism | 96% |

The table also shows the advantage of our on-the-fly approach compared to a system like SiteAdvisor, which provides static recommendations based on historical evidence. SiteAdvisor misclassified 20% of the malicious sites as benign. While we cannot explain why SiteAdvisor failed on these sites, we suspect it is due to a combination of incomplete Web coverage (i.e., not having examined some pages) and stale information (i.e., a page that was benign when examined has since become malicious). SpyProxy’s on-the-fly approach examines Web page content as it flows towards the user, resulting in a more complete and effective defense.

For an example, consider www.crackz.ws, one of our 100 malicious pages. This page contains a specially crafted image that exploits a vulnerability in the Windows graphics rendering engine. The exploit runs code that silently downloads and installs a variety of malware, including several Trojan downloaders. Many signature-based anti-malware tools would not prevent this attack from succeeding; they would instead attempt to remove the malware after the exploit installs it.

In contrast, when SpyProxy renders a page from www.crackz.ws in a VM, it detects the exploit when the page starts performing unacceptable activity. In this case, as the image is rendered in the browser, SpyProxy detects an unauthorized creation of ten helper processes. SpyProxy subsequently blocks the page before the client renders it. Note that SpyProxy does not need to know any details of the exploit to stop it. Equally important, in spite of the fact that the exploit attacks a non-browser flaw that is buried deep in the software stack, SpyProxy’s behavior-based detection allowed it to discover and prevent the attack.

#### 4.2 Performance of the Unoptimized System

This section measures the performance of the basic unoptimized SpyProxy architecture described in Section 2.3. These measurements highlight the limitations of the basic approach; namely, unoptimized SpyProxy interferes with the normal browser rendering pipeline by delaying transmission until an entire page is rendered and checked. They also suggest opportunities for optimization and provide a baseline for evaluating the effectiveness of those optimizations.

We ran a series of controlled measurements, testing SpyProxy under twelve configurations that varied across the following three dimensions:
- **Proxy configuration**: We compared a regular browser configured to communicate directly with Web servers with a browser that routes its requests through the SpyProxy checker.
- **Client-side network**: We compared a browser running behind an emulated broadband connection with a browser running on the same gigabit Ethernet LAN as SpyProxy. We used the client-side NetLimiter tool and capped the upload and download client bandwidth at 1.5 Mb/s to emulate the broadband connection.
- **Web page requested**: We measured three different Web pages: the Google home page, the front page of the New York Times, and the “MSN shopping insider” blog, which contains several large, embedded images.

Table 2 compares the latency of an unprotected browser that downloads content directly from Web servers to that of a protected browser downloading through the SpyProxy service. We show the latency until the page begins to render on the client and the latency until the page finishes rendering.

| **Page** | **Direct** | **Unoptimized SpyProxy** |
|----------|------------|-------------------------|
| **Google** | 0.21s (begin), 0.64s (end) | 0.79s (begin), 1.2s (end) |
| **NY Times** | 0.41s (begin), 4.8s (end) | 3.4s (begin), 7.3s (end) |
| **MSN Blog** | 0.40s (begin), 10.2s (end) | 2.7s (begin), 12.4s (end) |

Table 3 provides a more detailed timeline of events when fetching the New York Times page from a broadband client using the unoptimized SpyProxy. Downloading and rendering the page in the VM browser introduced 2.8 seconds of overhead. Since no data flows to the client browser until SpyProxy finishes rendering and checking content, this VM rendering latency is responsible for the delay experienced by the user.

| **Time (ms)** | **Event** |
|---------------|-----------|
| 0             | User requests URL, browser generates HTTP request |
| 169           | SpyProxy FE receives request, requests root page from Squid |
| 538           | SpyProxy FE finishes static check, forwards URL to VM |
| 560           | VM browser generates HTTP request |
| 561           | First byte of root page arrives at VM browser |
| 3055          | Last byte of last page component arrives at VM browser |
| 3363          | VM browser finishes rendering, checking triggers |
| 3374          | First byte of root page arrives at client browser |
| 7334          | Last byte of last page component arrives at client browser |
| 7347          | Client browser finishes rendering content |

- **Client browser transfer and render time**: 4.5s
- **Overhead introduced by VM browser**: 2.8s
- **Other SpyProxy system overhead**: 0.05s

#### 4.3 Performance Optimizations

To reduce the overhead introduced by the unoptimized SpyProxy system, we previously described three optimization techniques: prefetching content to a client-side agent, staged release of content to the client browser, and caching the results of security checks. We now present the results of a set of microbenchmarks that evaluate the impact of each optimization.

Figure 3 summarizes the benchmark results. Both figures show the latency to download three different pages to a client on the emulated broadband connection. For each page, we show latency for five cases: (1) the unoptimized SpyProxy, (2) SpyProxy with only prefetching enabled, (3) SpyProxy with only staged release enabled, (4) SpyProxy with a hit in the enabled security cache, and (5) the base case of a client fetching content directly from Web servers. Figure 3(a) shows the latency before page rendering begins in the client browser, while Figure 3(b) shows the latency until page rendering ends.

In combination, the optimizations serve to reduce the latency before the start of rendering in the client. With all the optimizations in place, the page load "feels" nearly as responsive through SpyProxy as it does without SpyProxy. In either case, the page begins rendering about a second after the request is generated. The optimizations did somewhat improve the total rendering latency relative to the unoptimized implementation (Figure 3(b)), but this was not as dramatic. Page completion time is dominated by transfer time over the broadband network, and our optimizations do nothing to reduce this.

#### 4.3.1 Prefetching

Prefetching by itself does not yield significant benefits. As shown in Table 4, it did not reduce rendering start-time latency. With prefetching alone, the client browser effectively stalls while the VM browser downloads and renders the page fully in the proxy. That is, SpyProxy does not release content to the client’s browser until the VM-based check ends.

However, we did observe some improvement in finish-time measurements. For example, the time to fully render the New York Times page dropped by 2.1 seconds, from 7.3 seconds in the unoptimized SpyProxy to 5.2 seconds with prefetching enabled. Prefetching successfully overlaps some transmission of content to the client-side agent with SpyProxy’s security check, slightly lowering overall page load time.

| **Page** | **Unoptimized SpyProxy** | **Prefetching Only** |
|----------|-------------------------|----------------------|
| **Google** | 0.79s (begin), 1.21s (end) | 0.78s (begin), 1.15s (end) |
| **NY Times** | 3.37s (begin), 7.3s (end) | 3.43s (begin), 5.2s (end) |
| **MSN Blog** | 2.7s (begin), 12.4s (end) | 2.2s (begin), 11.3s (end) |

#### 4.3.2 Staged Release

Staged release very successfully reduced initial latency before rendering started; this time period has the largest impact on perceived responsiveness. As shown in Table 5, staged release reduced this latency by several seconds for both the New York Times and MSN blog pages. In fact, from the perspective of a user, the New York Times page began rendering nearly four times more quickly with staged release enabled. For all three pages, initial rendering latency was near the one-second mark, implying good responsiveness.

The staged release optimization also reduced the latency of rendering the full Web page to nearly the same point as prefetching. Even though content does not start flowing to the client until it is released, this optimization releases some content quickly, causing an overlap of transmission with checking that is similar to prefetching.

| **Page** | **Unoptimized SpyProxy** | **Staged Release Only** |
|----------|-------------------------|-------------------------|
| **Google** | 0.79s (begin), 1.21s (end) | 0.78s (begin), 1.15s (end) |
| **NY Times** | 3.37s (begin), 7.3s (end) | 0.78s (begin), 5.2s (end) |
| **MSN Blog** | 2.7s (begin), 12.4s (end) | 0.78s (begin), 11.3s (end) |

Staged release outperforms prefetching in the case that matters—initial time to rendering. It also has the advantage of not requiring a client-side agent. Once SpyProxy decides to release content, it can simply begin transmitting it to the client browser.