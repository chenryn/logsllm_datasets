is information-theoretic private i.e. the adversary can not learn
anything about the queries even though she has unlimited com-
putation power. This kind of PIR requires low computational
resources compared to the CPIR protocols.
Chor ITPIR Chor et al. [17] introduced a very basic ITPIR
which uses exclusive OR as the main operation. One advantage
of XOR is that it can cancel the effect of repeated elements,
so the client makes her queries in a way that all the records
have an even number of repeats, so at the end, she can cancel
their effects. In this protocol the client create (cid:96) queries that
(cid:96) − 1 of them are totally random and the last one is the result
of XOR of the ﬁrst (cid:96) − 1 vectors and (cid:126)ej. Then it will send
them to PIR servers, each server multiplies these vectors to
the database in GF(2). This dot production in GF(2) is simple
XOR, which ”1” in position jth of (cid:126)ej means XOR this record,
and ”0” means do not XOR this record. At the end, each server
sends back the result of the XOR to the client, and the client
XOR all the responses.
Although this scheme is the ﬁrst ITPIR protocol, it is
still widely cited and proposed for different applications. This
amount of citations comes from the fact that this scheme is
very fast compared to all other PIR protocols.
16
Robustness Most of the PIR protocols use ”Honest-but-
Curious” adversarial model. This model assumed that all the
servers are honest, it means they always respond a correct
answer, but they try to infer which record has been fetched.
One of the main issues with ITPIR is that how the client should
deal with servers that do not respond at all or send an incorrect
answer that makes the client’s result incorrect. A t-private (cid:96)-
server PIR is a private information retrieval protocol which
information-theoretically protects the privacy of the client’s
queries when less than t + 1 servers collude. Beimel et al. [8]
explore the situation in which some servers cannot respond, but
the client still can retrieve the data. They deﬁne a t-private k-
out-of-(cid:96) PIR as a PIR in which the client only needs k answers
out of (cid:96) servers to recover her record, and if up to t servers
collude then the client still has privacy. They also examine
what happens if v servers reply incorrect answers, and how
many correct answers the client needs to recover the record
successfully. They deﬁned t-private v-byzantine-robust k-out-
of-(cid:96) PIR as a PIR that can handle a v number of byzantine
servers which sends incorrect answers to corrupt the client’s
result.
PIR using secret sharing
[6] and [5] show that secret
sharing and secret conversion can be used to construct a private
information retrieval. Li et al. [37] propose four different
multi-query ITPIR protocols based on ramp secret sharing
schemes [35], [53], and they call them ramp secret sharing-
based PIR (rPIR). [29] proposes new techniques that increase
efﬁciency of multi-server ITPIR protocols based on ramp
secret sharing. This paper shows ramp secret sharing can help
in encoding the data similar to encoding the query. They
encode each record of the database into multi shares of a secret,
and the client can recover the record by sending multi queries
for these shares.
Computational PIR (CPIR) protocols Most of CPIR pro-
tocols use a single server which is computationally bounded
for retrieving data. It means the security of these protocols
is based on a very difﬁcult mathematical problem, and if the
adversary ﬁnds a solution for the problem, or if she has enough
time and computation resources, some data will be leaked.
Stern et al. CPIR Stern et al. [50] propose a CPIR pro-
tocol that its algorithm is based on additively homomorphic
cryptosystem which has these functions: (i) Gen: function
of generating public and private keys pk, sk and system
parameters , (ii) Enc: Encryption function with public key
,and (iii) Dec: Decryption function. The important point in
this scheme is that the cryptosystem is non-deterministic i.e.
the Enc is a randomize function that encrypts the same input
to different output each time. Dec function will cancel the
effect of the random variable that was used in Enc function.
The most famous non-deterministic cryptosystem that is used
for CPIR is Paillier [41].
XPIR [1] proposes a new CPIR based on this protocol by
looking at each record of the database as a polynomial (the
elements of the databases are encoded as coefﬁcients of the
polynomial). However, the bandwidth consumption is not very
good, so SealPIR [4] introduce a way to compress the queries
in this system.
Kushilevitz and Ostrovsky CPIR One of the merits of
CPIR is that the client can run the protocol recursively to
reduce the bandwidth consumption. This idea was used by
Kushilevitz and Ostrovsky [36] in their scheme for improving
the communication cost. First, they split the database into
several virtual blocks, and each one of these blocks contains
some of the real blocks, then the client sends her query for
a speciﬁc virtual block, then server will calculate the result
of that query on the database and will look at the result as a
new database, the next query will be applied to this temporary
database, and this process continues until one vector of size s
will be sent to the client, and client can recover her requested
index out of this result.
Aguilar-Mechor et al. CPIR Aguilar-Mechor et al.
[2]
propose a lattice-based PIR, and their security is based on the
differential hidden lattice problem which is an NP problem.
Olumoﬁn and Goldberg [40] show that this design is an order
of magnitude faster than trivial download which downloads the
entire database.
APPENDIX B
SECURITY PROOF
Theorem 1: In our PIR-tailored secret sharing (when
q > t), regardless of the number of secrets being shared, the
participants can not learn anything about the secrets with up
to q shares.
Proof: To prove the security of this scheme, we should
show that with less than q + 1 shares, there is no information
about the secrets (when q > t). For proving security, we should
prove that the adversary given q shares can not differentiate
that a polynomial with one secret with value of 1 generates
these q shares or a polynomial with all secrets with value 0.
By this proof, we can show that in the PIR protocol based on
this scheme, the PIR server cannot differentiate that the PIR
client wants a record (si = 1) or not (si = 0).
j, f (x(cid:48)
Suppose that the polynomial f (x) is sharing one secret
with value 1 and q − 1 secrets with value 0 (with degree q),
and there is another polynomial f(cid:48)(x) that is sharing 0 as the
values of secrets with the same degree of q. We can show
that both of these polynomial functions can generate the q
shares (x(cid:48)
j)) the adversary has, i.e., both of them can
generate the same q shares (f(cid:48)(x(cid:48)
j) = f (xj) for 1 ≤ j ≤ q).
We assume that at the worst case, the adversary knows the
x-coordinates used for generating secret sharing polynomial
X = {x1, . . . , xq+1} and the x-coordinates used for generating
shares (X(cid:48) = {x(cid:48)
q+1}).
For generating the polynomial f (x) which shares one secret
1, we use the following points:
(1, (r1×p1)+1 mod(n)), . . . , (q, (rq×pq) mod(n)), (q+1, rq+1 mod(n))
1, . . . , x(cid:48)
For generating the polynomial f(cid:48)(x) which shares 0s, we use
the following points:
(1, (r(cid:48)
1×p1)+0 mod(n)), . . . , (q, (r(cid:48)
q×pq) mod(n)), (q+1, r(cid:48)
q+1 mod(n))
Suppose that the adversary has q shares (x(cid:48)
j, yj) for 1 ≤ j ≤ q,
so he has q equations based on Lagrange interpolation. First we
prove that the value of the ﬁrst secret (s1) is indistinguishable,
and then the same proof can be used for other secrets too. If
the adversary assumes that this secret sharing is sharing value
of s1 = 0:
p1r1L1(x(cid:48)
1) + p2r2L2(x(cid:48)
1) + · · · + rq+1Lq+1(x(cid:48)
1) = y1 mod(n)
p1r1L1(x(cid:48)
2) + p2r2L2(x(cid:48)
2) + · · · + rq+1Lq+1(x(cid:48)
2) = y2 mod(n)
...
p1r1L1(x(cid:48)
q) + p2r2L2(x(cid:48)
q) + · · · + rq+1Lq+1(x(cid:48)
q) = yq mod(n)
where {p1, p2, . . . , pq} are q different prime numbers and n =
p1p2 . . . pq.
If the adversary assumes that this secret sharing is sharing
value of s1 = 1:
(p1r1 + 1)L1(x(cid:48)
1) + p2r2L2(x(cid:48)
1) + · · · + rq+1Lq+1(x(cid:48)
1) = y1 mod(n)
(p1r1 + 1)L1(x(cid:48)
2) + p2r2L2(x(cid:48)
2) + · · · + rq+1Lq+1(x(cid:48)
2) = y2 mod(n)
...
(p1r1 + 1)L1(x(cid:48)
q) + p2r2L2(x(cid:48)
q) + · · · + rq+1Lq+1(x(cid:48)
q) = yq mod(n)
j) is the Lagrange function for speciﬁc values of
where Lm(x(cid:48)
X = {x1, x2, . . . , xq+1}:
q+1(cid:89)
Lm(x(cid:48)
j) =
(x(cid:48)
j − xn)(xm − xn)−1) mod(n)
n=1,n(cid:54)=m
If we show that there is at least one solution for both of
these set of equations, we can show that the adversary cannot
differentiate that the secret was zero or one. So for set of
unknowns {r1, r2, . . . , rq+1} and {r(cid:48)
q+1} we should
show that:
2, . . . , r(cid:48)
1, r(cid:48)
(p1r1 + 1)L1(x(cid:48)
p1r(cid:48)
1L1(x(cid:48)
1) + p2r(cid:48)
1) + p2r2L2(x(cid:48)
1) + · · · + pqrqLq(x(cid:48)
1) + r(cid:48)
qLq(x(cid:48)
1) + · · · + pqr(cid:48)
1) + rq+1Lq+1(x(cid:48)
q+1Lq+1(x(cid:48)
1) =
1) mod(n)
2L2(x(cid:48)
(p1r1 + 1)L1(x(cid:48)
p1r(cid:48)
1L1(x(cid:48)
2) + p2r(cid:48)
2) + p2r2L2(x(cid:48)
2) + · · · + pqrqLq(x(cid:48)
2) + r(cid:48)
qLq(x(cid:48)
2) + · · · + pqr(cid:48)
2) + rq+1Lq+1(x(cid:48)
q+1Lq+1(x(cid:48)
2) =
2) mod(n)
2L2(x(cid:48)
...
17
APPENDIX C
CHINESE REMAINDER THEOREM (CRT)
Chinese Remainder Theorem is one of the most useful tools
in number theory [21]. This theorem shows the existence of
solution for following q equations:
x = ai mod(pi)
for 1 ≤ i ≤ q
This theorem says that if pis are co-prime to each other,
then there is one and only one value for x mod(n) where n
is(cid:81)q
i=1 pi.
APPENDIX D
MULTIVARIABLE CHINESE REMAINDER THEOREM
This theorem [33] says that for a linear systems of equa-
tions A(cid:126)x = (cid:126)b mod( (cid:126)P ) (each equation is ai,1x1 + ··· +
ai,nxn = bi mod(pi)) has solutions for all (cid:126)b if the pi ∈ (cid:126)P
are co-prime to each other and there is at least one element in
ith row (all rows) of the matrix A that is co-prime with pi.
(p1r1 + 1)L1(x(cid:48)
p1r(cid:48)
1L1(x(cid:48)
q) + p2r(cid:48)
2L2(x(cid:48)
q) + p2r2L2(x(cid:48)
q) + · · · + pqrqLq(x(cid:48)
q) + r(cid:48)
qLq(x(cid:48)
q) + · · · + pqr(cid:48)
q) + rq+1Lq+1(x(cid:48)
q+1Lq+1(x(cid:48)
q) =
q) mod(n)
We can write:
r(cid:48)
1 = r1 + k1
r(cid:48)
2 = r2 + k2
...
r(cid:48)
q = rq + kq
r(cid:48)
q+1 = rq+1 + kq+1
By putting the above solution in the equations we will have:
L1(x(cid:48)
1) = p1k1L1(x(cid:48)
1) + · · · + pqkqLq(x(cid:48)
1) + kq+1Lq+1(x(cid:48)
1) mod(n)
L1(x(cid:48)
2) = p1k1L1(x(cid:48)
2) + · · · + pqkqLq(x(cid:48)
2) + kq+1Lq+1(x(cid:48)
2) mod(n)
...
L1(x(cid:48)
q) = p1k1L1(x(cid:48)
q) + · · · + pqkqLq(x(cid:48)
q) + kq+1Lq+1(x(cid:48)
q) mod(n)
We know that if an equation has an answer in mod(pi), it
will have answer in mod(n) too where n is a multiple of pi.
So we can apply mod(pi) on the ith equation of above system,
then we have the following equations:
L1(x(cid:48)
1) = p2k2L2(x(cid:48)
1) + · · · + pqkqLq(x(cid:48)
1) + kq+1Lq+1(x(cid:48)
1) mod(p1)
L1(x(cid:48)
2) = p1k1L1(x(cid:48)
2) + · · · + pqkqLq(x(cid:48)
2) + kq+1Lq+1(x(cid:48)
2) mod(p2)
...
L1(x(cid:48)
q) = p1k1L1(hx(cid:48)
q) + p2k2L2(hq) + · · · + kq+1Lq+1(x(cid:48)
q) mod(pq)
Therefore, based on Multivariable Chinese Reminder The-
orem (Appendix D), since all the pis are co-prime to each other
and in each equation we have the piLi(h)s that are co-prime in
mod(pj) where j (cid:54)= i (we used X and X(cid:48) in Section IV-B that
gcd(xi − x(cid:48)
j ∈ X(cid:48), there is at least
one solution for {k1, k2, . . . , kq+1}. Therefore the adversary
given q shares cannot differentiate what secret was shared.
j, n) = 1 for xi ∈ X and x(cid:48)
18