    ^https?:\/\/(.*\.)?target\.local$
这个允许来自”target.local“的跨域访问并且包含所有的子域名（来自HTTP和HTTPS协议）。  
在这个场景中，如果攻击者能控制目标的有效的子域名（比如：“subdomain.target.local”），比如接管一个子域名，或者找到一个有xss漏洞的子域名。攻击者就可以产生一个有效的CORS请求。
### 3.4.5 第三方域名
有时一些第三方域名会被允许。如果黑客能在这些域名里面上传JavaScript脚本的话，他们就可以攻击目标了。  
最有代表性的例子是，Amazon S3存储桶的有时是被信任的。如果目标应用使用亚马逊的服务，那么来自亚马逊S3存储桶上的请求就会被信任。  
在这种场景下，攻击者会控制一个S3的存储桶，并在上面放上恶意页面。
### 3.4.6 使用特殊的特性
Corban Leo展示了一个比较有趣的研究，他在域名中插入一些特殊的字符来绕过一些限制。  
这个研究员的特殊字符法只能用在Safari浏览器上。但是，我们进行了深入的分析，显示其中一部分特殊字符串也可以用在其他的浏览器中。  
这种规避技术所面临的问题是，在发送请求之前，浏览器不总是会去验证域名的有效性。因此，如果使用一些特殊的字符串，那么浏览器可能就不会提前发送请求去验证域名是否存在或者有效。  
假设，目标应用实现是基于下面的正则表达式去检测“Origin”头部的话：
    ^https?:\/\/(.*\.)?target.local([^\.\-a-zA-Z0-9]+.*)?
上面的正则表达式的意思是,允许所有“target.local”的子域名的跨域请求，并且这些请求可以来自于子域名的任意端口。  
下面是正则表达式的分解：
Part | 描述  
---|---  
[^\\.\\-a-zA-Z0-9] | 所有的字符串包含".","-","a-z","A-Z","0-9"  
+ | 匹配前面的子表达式一次或多次  
.* | 除了终止符的任何字符  
这个正则表达式阻止前面例子中的攻击，因此前面的绕过技术不会起作用（除非你控制了一给合法的子域名）  
下面的截屏展示了返回报文中没有“Access-Control-Allow-Origin” (ACAO) 和 “Access-Control-AllowCrendentials” (ACAC) 被设置。（使用前面的一种绕过技术）  
因为，正则表达式匹配紧挨着的ASCII字母和".","-",在“target.local”后面的每一个字母都会被信任。  
注意：当前浏览器只有Safari支持使用上面的域名（带“{”那个字符的），但是如果目标应用的正则表达式能够信任其他的特殊字母，那么就可以使用CORS的错误配置去攻击其他的浏览器啦。  
下面这个表包含各个浏览器对特殊字符的“兼容性”  
（注意：仅包含至少一个浏览器允许的特殊字符）
特殊字符 | Chrome(v 67.0.3396) | Edge(v 41.16299.371) | Firefox(v 61.0.1) |
Internet Explorer(v 11) | Safari(v 11.1.1)  
---|---|---|---|---|---  
! | NO | NO | NO | NO | YES  
= | NO | NO | NO | NO | YES  
$ | NO | NO | YES | NO | YES  
& | NO | NO | NO | NO | YES  
' | NO | NO | NO | NO | YES  
( | NO | NO | NO | NO | YES  
) | NO | NO | NO | NO | YES  
* | NO | NO | NO | NO | YES  
+ | NO | NO | YES | NO | YES  
, | NO | NO | NO | NO | YES  
- | YES | NO | YES | YES | YES  
; | NO | NO | NO | NO | YES  
= | NO | NO | NO | NO | YES  
^ | NO | NO | NO | NO | YES  
_ | YES | YES | YES | YES | YES  
` | NO | NO | NO | NO | YES  
{ | NO | NO | NO | NO | YES  
\ |  | NO | NO | NO | NO | YES  
} | NO | NO | NO | NO | YES  
~ | NO | NO | NO | NO | YES  
利用钱的准备：
  * 泛解析域名要指向你的服务器 
  * NodeJS：因为Apache和Nginx(开箱即用)不支持特殊的字符  
创建一个serve.js 文件
        var http = require('http'); 
    var url = require('url');
    var fs = require('fs');
    var port = 80
    http.createServer(function(req, res) { 
    if (req.url == '/cors-poc') {
      fs.readFile('cors.html', function(err, data) {
      res.writeHead(200, {'Content-Type':'text/html'});
      res.write(data);
    res.end();
    });
    } else {
      res.writeHead(200, {'Content-Type':'text/html'}); 
      res.write('never gonna give you up...');
      res.end();
    }
    }).listen(port, '0.0.0.0'); console.log(`Serving on port ${port}`);
在相同的目录下创建cors.html
    CORS PoC
    CORS Proof of Concept
现在启动NodeJS服务并且运行下面的指令：
        node serve.js &
如果目标应用使用上面的表达式实现对“Origin”过滤的话，那么除了“.”
和“-“之外，“www.target.local”后面的每一个特殊字符都会被信任，因此当Safari浏览器完成的以下产生的有效请求后，攻击者能够从易受攻击的目标中窃取数据。
        http://www.target.local{./cors-poc
如果正则表达式支持下划线的话，那么可能其他的浏览器（在上面的表格中列出数据）也可以利用CORS配置错误了，就像下面的例子一样：
    http://www.target.local_./cors-poc
想要看更多关于绕过的文章可以去：
# 4 _防御技术
让我们的看看如何正确配置CORS才能避免让黑客从受害者中偷走敏感数据或者被攻击者利用CORS配置继续攻击
## 4.1 一般守则
下面是处理CORS配置的最佳实践
### 4.1.1 如果不必要就不要开启CORS
首先，要仔细的评估是否开启CORS。如果没有必要，建议完全避免使用它，以免削弱SOP。
### 4.1.2 定义白名单
如果是绝对必要的话，要定义“源”的白名单。我更喜欢白名单，如果可能的话，不要使用正则表达式，因为根据前面的描述，正则表达式更容易出错，导致CORS的配置错误。  
不要配置“Access-Control-Allow-Origin”为通配符“*”，而且更重要的是，要严格效验来自请求数据包中的“Origin”的值。  
当收到跨域请求的时候，要检查“Origin”的值是否是一个可信的源。
### 4.1.3 仅仅允许安全的协议
有必要验证协议以确保不允许来自不安全通道（HTTP）的交互，否则中间人(MitM)将绕过应用是所使用的HTTPS
### 4.1.4 配置“VARY”头部
要尽可能的返回"Vary: Origin"这个头部，以避免攻击者利用浏览器缓存
### 4.1.5 如果可能的话避免使用“CREDENTIALS”
由于“Access-Control-Allow-Credentials”标头设置为“true”时允许跨域请求中带有凭证数据，因此只有在严格必要时才应配置它。此头部也增加了CSRF攻击的风险;因此，有必要对其进行保护。  
要特别关注的实现的标准，如果没有定义参数的话，那么默认值很可能是“true”。要仔细阅读官方文档，如果感觉模糊不清的话，就把值设置成“false".
### 4.1.6 限制使用的方法
通过“Access-Control-Allow-Methods”头部，还可以配置允许跨域请求的方法，这样可以最大限度地减少所涉及的方法，配置它始终是一个好习惯。
### 4.1.7 限制缓存的时间
建议通过“Access-Control-Allow-Methods”和“Access-Control-Allow-Headers”头部，限制浏览器缓存信息的时间。可以通过使用“Access-Control-Max-Age”标题来完成，该头部接收时间数作为输入，该数字是浏览器保存缓存的时间。配置相对较低的值（例如大约30分钟），确保浏览器在短时间内可以更新策略（比如允许的源）
### 4.1.8 仅配置所需要的头
最后一点，要仅在接收到跨域请求的时候才配置有关于跨域的头部，并且确保跨域请求是合法的（只允许来自合法的源）  
实际上，在其他情况下，如果没有理由就不要配置这样的头部，这种方式可以减少某些用户恶意利用的可能性。
## 4.2 配置和实施
很多软件框架是允许使用CORS的，当使用这些解决方案的时候，我们要着重++注意默认值++（“origin” 和
“credentials”是否被明确的设置）因为有些默认值是不安全的  
我们分析一些主要的软件框架。下面这个表是总结的结果（注意：这仅指默认配置，在所有情况下都可以以安全的方式配置它们）  
# 5\. _引用：
  * Mozilla MDN web docs. Cross-Origin Resource Sharing (CORS).  (Accessed 2018-30-06).
  * Wikipedia. Same-origin policy.  (Accessed 2018-30-06).
  * W3C. Cross-Origin Resource Sharing.  (Accessed 2018-30-06).
  * James Kettle. Exploiting CORS misconfigurations for Bitcoins and bounties.  2018-30-06).
  * Geekboy. Exploiting Misconfigured CORS (Cross Origin Resource Sharing).  (Accessed 2018-30-06)
  * Yassine Aboukir. CORS Exploitation: Data exfiltration when allowed origin is set to NULL.  (Accessed 2018-30-06).
  * Corben Leo. Advanced CORS Exploitation Techniques.  (Accessed 2018-30-06)