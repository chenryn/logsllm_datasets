    $query = "UPDATE adword SET 
    ad1='$ad1',
    ad2='$ad2',
    ad3='$ad3',
    date=now()";
可以看到这里的话有这个`"UPDATE adword SET
ad1='$ad1'`语句，我们这里可控的变量是ad1，但ad1被单引号包裹了，我们如果想要进行SQL注入的话肯定需要闭合单引号，此时我们看ad1的传入方式，发现`$ad1=addslashes($_POST['ad1']);`，它被这个`addslashes`函数包裹了，这就意味着我们的单引号输入后会被转义，那也就无法闭合之前的语句，因此无法实现SQL注入，这里是误报了属于是
#### admin/files/editcolumn.php
部分代码如下
连接数据库的文件，再查看另一个  
checklogin.php内容如下
这个是检验是否登录的  
因此这里不存在过滤，接下来去尝试一下SQL注入  
尝试闭合
    r=editcolumn&type=2&id=1'  --+
成功，接下来查看字段数  
字段数为9，接下来查看回显位  
3、4、5、8都可以，随便整一个开始注入
    r=editcolumn&type=2&id=-1' union select 1,2,database(),4,user(),6,7,@@version,9 --+
成功注入
#### admin/files/editsoft.php
部分源码如下
    广告一
可以发现这里的变量ad1是可控的，然后他是在``标签中，如果闭合了这个标签，是不是就意味着我们可以构造自己的语句，也就可以写xss了，此时看一下传变量的方式
发现是POST传值，这里还有`addslashes`函数，但变量未被单引号包裹，我们不需要单引号，这就意味着这个是没有什么作用的，尝试xss
    ad1=&save=1
#### admin/login
刚刚我们测试过它存在SQL注入漏洞，并且知道它是单引号闭合，既然我们可以后面写入报错语句，那岂不是也可以写入我们的xss语句，尝试一下
    1'adn#
调用一下cookie  
#### install/index.php
# 总结
从这两个简单的CMS代码审计中学到了一点知识，简单的总结一下
## 不同CMS异同
大部分没MVC框架的CMS，他们的结构是比较相似的，我们可以看一下这两个CMS的结构  
可以发现两者的结构是比较相像的，当我们掌握文件夹的功能时，就能够使得我们的代码审计轻松许多，因此通过文件夹掌握其功能含义是我们首先需要做到的
区别的话就是有的程序员会把css单独作为文件夹(例如这里的xhcms)，有的会把js文件单独作为文件夹(这里的bluecms)，不过这些都是无关紧要的，大致知道文件夹是什么含义，存放的文件是什么就可以
## 常见关注点
SQL注入：
    select insert update mysql_query mysqli等
文件上传：
    $FILES，type="file"，上传，move_upload_file( )等
XSS跨站：
    print，print_r，echo，sprintf，die，var_dump，var_export等
文件包含：
    include，include_once，require，require_once等
代码执行：
    eval，assert，preg，replace，call，user，func，call_user_func，array等
命令执行：
    system，exec，shell_exec，``，passthru，pcntl_exec，popen，proc_open等
变量覆盖：
    extract() parse_str() importrequestvariables() $$
反序列化：
    serialize() unserialize() _construct _destruct等
## 个人感想
我们挖掘出一个漏洞的时候，它可能不仅仅只是这一个漏洞，举个例子。  
当我们关注一个地方的SQL注入的话，就是找`SELECT *
from`此类语句，同时如果它存在SQL注入的话，那它可能不仅仅是SQL注入点，也可能是XSS点，因为后面语句可控的话，插上一个``也并非难事，但这些SQL语句也并不少，这就需要我们观察语句是否可控，同时看是否过滤了，是否过滤十分严格以致于不存在漏洞，总之多多进行测试，实践出真知。
# 参考文章