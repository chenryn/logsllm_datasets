ning in SMM, thus preventing an OS from accessing it. In addition,
only the code executed in SMM can modify the firmware stored
into flash to prevent malware, executing with kernel privileges,
from overwriting the firmware and becoming persistent.
The particularity of an SMI is that it makes all the CPU cores
enter SMM. It is non-maskable and non-reentrant. Hence, this in-
terrupt must be processed as fast as possible, since the OS is paused
during the handling of an SMI.
Despite hardware-based protection of the SMRAM, several at-
tacks [8, 12, 20, 27, 60, 61, 65, 74, 75] were publicly disclosed. These
attacks are proof-of-concepts that attackers could use to perform ar-
bitrary code execution in SMM, once the SMRAM has been locked.
Cache poisoning. Two research teams [27, 74] independently dis-
covered cache poisoning attacks in SMM. Since the cache is shared
between all the execution modes of the CPU, the attack consists
in marking the SMRAM region to be cacheable with a write-back
strategy. Then, the attacker stores in the cache malicious instruc-
tions. After that, once an SMI is triggered, the processor fetches
the instructions from the cache. Thus, the processor executes the
malicious instructions of the attacker instead of the legitimate code
stored in SMRAM. The solution is to separate the cache between
non-SMM and SMM executions. This vulnerability has been fixed
by adding a special-purpose register. Such register can only be
modified in SMM and decides the cache strategy of the SMRAM.
Insecure call. Multiple firmware implementations [20] used call
instructions to jump to code segments outside of the SMRAM. An
attacker with kernel-level privileges can easily modify this code.
These vulnerabilities have been fixed by forbidding the processor to
execute instructions located outside of the SMRAM while in SMM.
Other vulnerabilities due to indirect calls [61, 75] allow attackers
to perform code-reuse attacks against the SMM code. Such attacks
are usually prevented by patching these vulnerabilities. Our ap-
proach can detect code-reuse attacks in general without requiring
patching.
Unchecked data. Some SMI handlers rely on data provided by
the OS (i.e., controlled by the attacker). If they do not sanitize such
data, the attacker can influence the behavior of the SMM.
For example, pointer vulnerabilities in an SMI handler can lead to
arbitrary write into SMRAM [8, 60, 65]. It can occur because the SMI
handler writes data into a buffer located at an address controlled
by the attacker. For example, such address can be provided thanks
to a register that could have been modified by the attacker. Bulygin
et al. [12] also demonstrated a similar attack by modifying the Base
Address Registers (BAR) used to communicate with PCI devices.
It is the responsibility of SMI handlers to verify that the data
given or controlled by the OS is valid. For example, they should
check that the address of the communication buffer is not pointing
into the SMRAM, and that the BARs point to valid addresses (i.e.,
not in RAM or SMRAM).
4 THREAT MODEL AND ASSUMPTIONS
As explained previously, the SMM is the last bastion of firmware
security. It is the only mode that allows write access to the flash
storage of the firmware, and its execution is invisible to the OS,
thus a perfect place to hide malware [28]. In addition, it allows
the attacker to perform actions that cannot be realized with kernel
privileges. For example, if the attacker wants to remain persistent
or modify security configurations (e.g., disable secure boot).
Every time a vulnerability related to the SMM has been re-
ported it has been patched. Firmware, however, is not updated
frequently [45]. Moreover, in practice, vendors typically use third-
party code to build their firmware making code review and vulner-
ability management more difficult.
Hence, we assume that the attacker will find a vulnerability,
but exploitation of such vulnerability implies a deviation from the
expected behavior of the SMM code. Thus, our approach focuses
on monitoring its behavior. Such anomaly-based approach is not
limited to the detection of well-known attacks, but can also detect
the exploitation of unreported (zero-day) vulnerabilities.
We assume that the code during the boot process is legitimate
and that no attack is performed during that phase until the SMRAM
is locked. Such an assumption is reasonable with the use of existing
security mechanisms for recent firmware such as:
• An immutable hardware root of trust to verify that the boot
firmware has a valid cryptographic signature from the ven-
dor before its execution [36, 67],
• Cryptographic signatures during the update process [19],
• A Trusted Platform Module (TPM) chip to measure all the
components of the boot process at boot time [34].
These mechanisms provide us with code and data integrity at
boot time (I1, a requirement stated in § 2.3). In addition, since
recent firmware use page tables [73] in SMM we can enable write
protection [78, 79] and assume code integrity at runtime (I2).
Another key assumption is that the attacker cannot send mes-
sages in lieu of SMM without being detected. First, by design, mes-
sages cannot be sent by other components than the CPU and among
the messages sent by the CPU only those sent in SMM are processed
by the monitor (see § 5.3.2). Second, we assume that there is no
vulnerability in SMM code that can be exploited by an attacker to
forge messages without altering the control flow. Since any attempt
to alter the control flow results in the emission of a message de-
scribing an invalid control flow (see § 5.4.1), the attacker cannot
forge messages without first being detected.
Finally, we do not consider an attacker trying to impede the
availability of the system (denial of service) by flooding the commu-
nication channel. The attacker already has sufficiently high privi-
leges to perform a denial of service (e.g., shutdown the machine).
We model such an attacker with the following capabilities:
which is protected,
• Complete control over the OS or the hypervisor, meaning
that the attacker already found vulnerabilities that elevate
its privileges to kernel-level or hypervisor-level,
• Complete control over the memory, except the SMRAM,
• Cannot exploit hardware vulnerabilities (e.g., cache poison-
• Can trigger as many SMIs as necessary,
• Can exploit a memory corruption issue in an SMI handler.
This threat model is close to those used in the different attacks
ing attacks [27, 74] or bypassing SMRAM protection),
described in § 3.2 (except for the cache poisoning attack).
4025 SMM BEHAVIOR MONITORING
We apply our generic approach to monitor the behavior of the SMM
code using CFI and by ensuring the integrity of relevant x86 CPU
registers. The design of our solution is illustrated in Figure 2. In this
figure, straight arrows represent the steps taken during runtime and
dashed arrows the steps taken during the instrumentation phase
(compilation time). We describe our implementation in more details
in the following subsections.
Source code
LLVM
compilation
Target
Firmware
1. Instrumented code
6. Remediation action
5. Detect
Invalid?
1. Indirect calls
mapping
2. Push packet
Memory
mapped
device
· · ·
packet
packet
Indirect calls
handling
Shadow
call stack
CPU registers
integrity
4. Dispatch
Compile time
Runtime
Monitor
Fetch message
3. Pop
packet
Figure 2: High-level overview of the implementation
5.1 Detection method
5.1.1 CFI. We enforce a CFI policy, because it is suited to de-
tect attacks on low-level vulnerabilities that often appears in code
written in C. Our monitor, executed on the co-processor, verifies
that the control-flow information sent by the target is valid.
The monitor implements a type-based CFI inspired by the work
of Niu and Tan [59] and Tice et al. [71]. It ensures that the address
used in an indirect call matches the address of a function having an
expected type signature known at compile time. For example, the
call site s->func(s, 1, "abc") is an indirect call where func has
int (*func)(struct foo*, int, char *) as a type signature.
Thus, the monitor ensures that the address of func used at that
call site always points to a function having the same signature. In
addition, the monitor implements a shadow call stack to ensure the
integrity of return addresses on the stack.
A type-based CFI over-approximates the set of expected point-
ers with all functions with the same type signature. In practice,
type-based CFI gives small equivalence classes [14] where one
equivalence class contains all the possible targets for one call site.
An alternative could be to use a points-to analysis such as the work
from Lattner et al. [47]. This type of analysis can sometimes give
precise results (i.e., the complete set of pointers). However, in prac-
tice, as shown by Evans et al. [29], such analysis often fails to give
the accurate set of pointers resulting in large equivalent classes
such as all the available functions in the program.
Finally, our approach isolates the detection logic, the model of
the behavior, and the data structures (e.g., shadow call stack and
indirect call mappings) with the use of an isolated co-processor.
It prevents attackers from tampering with it. Thus, we provide
a more robust CFI using external monitoring in comparison to
inlined-based CFI [1].
5.1.2 CPU registers integrity. In addition to a CFI policy, the
monitor ensures the integrity of relevant x86 CPU registers in
SMM. It stores expected values in its memory at boot time and
verifies the values sent by the target at runtime.
When entering SMM, the main CPU stores its context in the
save state area, and restores it when exiting [41]. The location of
the SMRAM, called the SMBASE, is saved in the save state area.
The processor uses the SMBASE every time an SMI is triggered
to jump to the SMM entry point. Hence, it is possible for an SMI
handler to modify the SMBASE in the save state area, and the next
time an SMI is triggered, the processor will use the new SMBASE.
Such behavior is genuine at boot time to relocate the SMRAM to
another location in RAM. At runtime, however, there is no valid
reason to do this. If an attacker manages to change the SMBASE, it
results in arbitrary code execution when the next SMI is triggered.
Therefore, the monitor ensures that the SMBASE value does not
change between SMIs at runtime.
In addition, the monitor ensures the integrity of MMU-related
registers, like CR3 (i.e., an x86 register holding the physical address
of the page directory). Such register is an interesting target for
attackers [43]. Thus, protecting its integrity is needed since recent
firmware enable protected mode and use page tables [73, 78, 79].
These registers are reset at the beginning of each SMI with a value
stored in memory. Such value is not supposed to change at runtime.
If an attacker succeeds in modifying this value stored in memory,
then the corresponding register is under the control of the attacker
at the beginning of the next SMI.
5.2 Co-processor
We take inspiration from the AMD Secure Processor, also known
as the Platform Security Processor (PSP) [3], and the Apple Secure
Enclave Processor (SEP) [56]. Both are used as a security processor
to perform sensitive tasks and handle sensitive data (e.g., crypto-
graphic keys). In those solutions, the main CPU cannot directly
access the memory of the co-processor. It only asks the co-processor
to perform security-sensitive tasks via a communication channel.
The PSP is an ARM Cortex A5 and the SEP is an ARM Cortex
A7. Such processors are similar, they are both 32 bit ARMv7 with
in-order execution and 8-stage pipeline. The main difference is that
the A5 is single-issue and the A7 is partial dual-issue.
In our implementation, we chose a similar design and we use an
ARM Cortex A5 co-processor to execute our monitor. It gives us
the isolation needed and enough processing power to process the
messages for our use case.
We implemented our monitor with approximately 1300 lines of
Rust [57], a safe system programming language.
5.3 Communication channel
In this subsection, we look at how existing co-processors commu-
nicate with the main CPU and explain why they do not fit our
requirements. Then, we describe how we design our communica-
tion mechanism to fulfill the properties we defined in § 2.2.
4035.3.1 Existing mechanisms. A major characteristic of the com-
munication channel is its performance, especially its latency, as
each message sent impacts the overall latency of SMI handlers.
The Intel BIOS Test Suite (BITS) defined the acceptable latency
of an SMI to 150 µs [40]. Delgado and Karavanic [26] showed that,
if the latency exceeds this threshold, it causes a degradation of
performance (I/O throughput or CPU time) or user experience (e.g.,
severe drop in frame rates in game engines).
Both the PSP and the SEP use mailbox communication channels
to send and receive messages with the main CPU [2, 56]. Mailboxes
work as follows. One processor writes to a mailbox register, which
triggers an interrupt in a second CPU. Upon receiving the interrupt,
the second CPU executes code that fetches the value in the mailbox,
processes the message, and then writes a response.
We could use such a mechanism to fulfill our security properties
(CC1 and CC2) by making the SMM code wait until the co-processor
acknowledged the message. Shelton [68] studied the latency of
mailboxes on Linux and measured on average a 7500 cycles latency.
For example, with a 2 GHz clock this gives 3.75 µs per message.
Thus, not fulfilling the low-latency requirement (CC4).
Since the mechanism used by existing co-processors, like the PSP
or the SEP, does not allow low latency communication while ful-
filling our security requirements, we designed a specific hardware
component to that end.
5.3.2 Restricted FIFO. We designed a restricted First In First
Out (FIFO) queue between the main CPU and the co-processor.
This FIFO is implemented as an additional hardware component
connected to the main CPU and the co-processor, because we want
to re-use existing processors without modifying them.
The goal of the FIFO is to store the messages sent by the target
awaiting to be processed by the co-processor. The FIFO only allows
the main CPU to push messages and the co-processor to pop them.
The FIFO receives messages fragmented in packets. Only our FIFO
handles the storage of the messages, the attacker does not have
access to its memory, thus it cannot violate the integrity of the
messages. We consider single-threaded access to the FIFO, since
only one core handles the SMI, while other cores must wait [41].1
We are using a co-processor with less processing power than
the main CPU and the monitor usually processes messages at a
lower rate than their production. Thus, the FIFO could overflow.
Such a case would happen if the monitored component would be
continuously executing, which is not the case with SMM code.
Most of the time the main CPU will execute code in kernel land
or userland, which are not monitored and hence do not send any
message. An SMI, on the other hand, will create a burst of messages
when triggered. Hence, the only case where the FIFO could overflow
is if an attacker deliberately triggered SMIs at very high rate, which
would be detected as an attack.
We use a fast interconnect between the main CPU executing
the monitored component and the FIFO. The precise interconnect
depends on the CPU manufacturer. In the x86 world two major
1At the beginning of each SMI, there is a synchronization code ensuring that only one
core executes in SMM. This implies that we do not instrument the code responsible
for the synchronization between the cores. Such code does not interact with any
attacker-controlled data and cannot be influenced by the attacker, hence we trust it.
interconnects exist: QuickPath Interconnect (QPI) [39] from Intel
and HyperTransport [35] from AMD.
These interconnects are used for inter-core or inter-processor
communication and are specifically designed for low latency. For
example, CPU manufacturers are using them to maintain cache
coherency. Furthermore, they have been leveraged to perform CPU-
to-device communication [32, 53, 54]. The co-processor could be
connected to the FIFO using these interconnects (using glue logic)
or an interconnect with similar performance (e.g., AMBA [6]).
Our monitored component has a mapping between a physical
address and the hardware component (i.e., the FIFO) allowing it
to send packets via the interconnect. Routing tables are used by
interconnects. Such routing tables are configured via a software
interface (with kernel privileges) to decide where the packets are
sent. Thus, as explained by Song et al. [69], it would be possible for
an attacker to modify the routing tables to prevent the delivery of
the messages to the FIFO. Such attack would be the premise of an
attack against a vulnerable SMI handler. Therefore, at the beginning
of each SMI, we enforce the mapping by overwriting the routing
table in the SMM code to prevent such an attack.
In addition, the FIFO filters the messages by checking the SMI-
ACT# signal of the CPU specifying whether the main CPU is in
SMM or not [35, 41]. Hence, the monitor only processes messages
sent in SMM and prevents an attacker from sending messages when
the target is not executing (e.g., an attacker sending messages in
kernel mode).
To summarize, this design fulfills the message integrity property
(CC1), since the target can only push messages to the restricted FIFO.
Moreover, if the queue is full it does not wrap over and the target
enforces the routing table mapping. It fulfills the chronological
order property (CC2), because it is a FIFO and there is no concurrent
access to it while in SMM. In addition, it fulfills the exclusive access
property (CC3), since we filter messages to ensure they only come
from the SMM, the integrity of the instrumentation code is ensured
with the use of page tables with write-protection enabled, and the
attacker cannot forge messages without first being detected. Finally,
we fulfill the last property (CC4) by using a low latency interconnect
between the main CPU and the FIFO.
5.4 Instrumentation