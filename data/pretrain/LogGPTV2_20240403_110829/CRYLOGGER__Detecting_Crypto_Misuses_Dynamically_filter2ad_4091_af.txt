### Analysis of Cryptographic Misuse in Android Applications

#### Overview
The RSA key (R-19) does not pose significant risks. L-09, a widely used library for advertisements, employs the same (key, IV) pairs to store data locally. These (key, IV) pairs are reused across different applications, meaning all apps using this library share the same sequence of (key, IV) pairs. Approximately 30% of the apps in our dataset use these shared pairs to encrypt data in their private folders. The developers of the library confirmed this issue but classified it as out-of-scope. This scenario cannot be replicated by static tools and is an example of how CRYLOGGER can perform inter-app analysis.

L-10, another common advertisement library, uses weak encryption practices to store data locally. The developers were aware of the issue and stated that the data are not security-critical. This analysis highlights a misalignment between the threat model of CRYLOGGER and other static tools with the developers' threat model. Developers argue that sensitive data can be encrypted poorly if stored only locally because privilege escalation is required to access them. However, side-channel attacks can still compromise such data [56]. While we recommend adopting safe cryptographic practices, one way to avoid these warnings in CRYLOGGER is to log when data are stored on local storage (e.g., in classes like File or KeyStore) and discard the corresponding violations. Developers are more interested in rules that, if violated, pose concrete security threats, as reported in [6]. For instance, while setting a minimum size for keys (R-19) is important, the effects of its violation are hard to assess. Given the limited feedback from developers, we manually analyzed some apps to determine if the vulnerabilities in Fig. 7 are exploitable.

#### Analysis of Vulnerabilities
We reverse-engineered 28 apps using APKTool and JADX12. We selected half of the apps from the most popular ones in our dataset (Section VII) with the highest number of violations and the remaining half randomly. The characteristics of these apps are shown in Fig. 8. Our reverse-engineering process involved:
1. Using APKTool and JADX to extract Java code from the app's binary (apk).
2. Analyzing the app with CRYLOGGER, which we extended to log the stack trace for each rule violation.
3. Manually analyzing the code starting from the flagged API call to understand its purpose in the app. On average, we spent 6 hours per app for code analysis.

A significant number of these apps (14/28) are vulnerable to attacks, even though some may be considered out-of-scope by developers. Most of the rules (22/26) effectively detected at least one vulnerable app. App A-13 violates many rules related to encryption. This app uses encryption to manage subscriptions to premium features and user data. Both the subscription and user data are stored locally, making them accessible to attackers who can read the data and fake subscriptions. Similarly, apps A-18, A-20, A-24, A-25, A-33, and A-34 store critical user data (emails, answers to security questions, etc.) using weak encryption algorithms. Apps A-22, A-29, and A-30 store SSL/TLS certificates with weak password-based encryption. App A-14 uses a constant seed (R-17) to generate keys for encrypting user data, making the keys easily obtainable. Apps A-31, A-32, and others are vulnerable to man-in-the-middle attacks due to violations of R-24, R-25, and R-26, allowing attackers to intercept copyrighted videos/music and ads.

Some violations can be considered false positives, caused by imprecise rules. For example, rules R-01 and R-18 flag secure uses of hash algorithms and random number generators for non-sensitive data in three apps each. Rule R-04 flags three apps that use CBC encryption for scenarios different from client/server. Other violations arise from using weak encryption schemes to obfuscate non-sensitive data and legacy practices like using PKCS#1 as a padding scheme in SSL/TLS instead of more secure alternatives like OAEP. This analysis confirms that the threat model of CRYLOGGER and other static tools does not fully align with the developers' threat model, leading to false positives.

#### Discussions and Limitations
In this section, we discuss the advantages of dynamic approaches over static approaches and our current limitations.

**Why a Dynamic Approach?**
Most approaches to detect crypto misuses rely on static analysis, which offers several benefits. Static analysis can analyze code without execution, which is crucial for Android apps since UI test generators are not required. It can scale to a large number of applications and, thanks to recent improvements [6], can handle massive code bases. However, static analysis has limitations. It can produce false positives, raising alarms on correct calls to crypto APIs due to imprecise slicing algorithms. These alarms, combined with those raised on non-security-critical parts of the applications, make it challenging to analyze a large number of applications. Some static approaches [6] also result in many false negatives, as the exploration is pruned prematurely to improve scalability. Additionally, static analysis misses crypto misuses in dynamically loaded code, preventing analyses on critical code [20]. Static analysis is inherently single-application-focused and cannot perform inter-application analysis, as CRYLOGGER does with an Android library (Section IX).

**False Positives**
While dynamic analysis theoretically avoids false positives, they can occur when detecting crypto misuses. Distinguishing critical parts of the application from less critical parts where data are not sensitive is challenging. The threat model adopted by app developers can differ from the research community's model, requiring complex manual analyses. One possible solution is to log additional information in other classes (e.g., File) to determine if rule violations can be discarded, reducing false positives, though implementing general solutions is difficult.

**False Negatives**
Crypto misuses escape detection if they are not exercised during execution. In Section VIII, we showed that CRYLOGGER confirmed the results reported by CryptoGuard and found misuses missed by CryptoGuard. In other contexts, triggering crypto APIs might be harder depending on the specific application. One possible solution is to complement CRYLOGGER with a static tool to expose misuses that cannot be triggered at runtime.

#### Concluding Remarks
We presented CRYLOGGER, the first tool that dynamically detects crypto misuses while supporting a large number of rules. We released CRYLOGGER as open-source to allow the community to use a dynamic tool alongside static analysis. We hope that application developers will adopt it to check their applications and the third-party libraries they use.

#### Acknowledgments
This work was supported in part by the NSF (A#: 1527821 and 1764000), a gift from Bloomberg, DARPA HR0011-18-C-0017, and N00014-17-1-2010.

#### References
[References listed as provided]

#### Table III
Java functions that have been instrumented and the parameters that are logged as defined in Fig. 2.