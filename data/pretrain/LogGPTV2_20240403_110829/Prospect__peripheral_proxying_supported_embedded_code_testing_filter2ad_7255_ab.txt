in total). We chose these speciﬁc kernel versions to get an
idea which system calls are used to access character devices
on legacy systems (i.e. Linux-2.4 and Linux-2.6) as well as
on current kernel versions (i.e. Linux-3.4). Table 1 shows
how many of the character device driver source code ﬁles
actually deﬁne file_operations. It can be seen that the
number of ﬁles decreases with newer kernels. We believe
that this is due to increased abstraction in the Linux kernel
requiring driver authors to write less supporting code.
Linux-2.4.20
Linux-2.6.38.1
Linux-3.4.4
ﬁles
264
fops
77
fops % ﬁles
143
29.17
fops
62
fops % ﬁles
107
43.36
fops
54
fops %
50.47
Figure 2: A typical Greybox System Example
Table 1: Analyzed Device Drivers on diﬀerent Linux
Kernel Versions
Figure 2 shows a typical greybox embedded system exam-
ple from a security analyst’s point of view. The analyst’s
goal is to test one or more userspace applications on the
embedded system for security vulnerabilities. This could,
for instance, be a network daemon that is exposed to ex-
ternal attackers over a network connection. Yet, due to the
challenges portrayed in Section 2, the analyst is unable to
perform dynamic code analysis on the target system.
That is, the system lacks system resources, analysis tools
are not available or can not be run and the userspace appli-
cation, the analyst is interested in, can not be executed in
a virtual environment as the peripheral hardware is missing
there. However, one key observation is that userspace appli-
cations commonly communicate through character devices
with potentially proprietary drivers and, consequently, with
the peripheral hardware. Also, the communication inter-
faces to exchange data with the driver, and therefore with
the kernel, are limited and can be considered standardized.
This is where PROSPECT comes into play. The basic
idea of the system is to create virtual character devices in-
side another physical or virtual analysis environment. PRO-
SPECT must intercept system calls used for communication
with the character device from within the operating system
kernel, forward them to the appropriate device on the em-
bedded system and execute them there. Any responses need
to be fed back to the analysis environment so that the inter-
cepted system calls can return the data from the embedded
remote system. Block devices, on the other hand, are gen-
erally used to access storage media which are emulated by
the analysis virtual machine (i.e. qemu) anyways. To the
analyst, PROSPECT constitutes a transparent forwarding
solution for character device communication and thus al-
lows her to conduct dynamic analysis techniques that were
previously infeasible. Even software running on legacy sys-
tems lacking support for state-of-the-art analysis tools can
be analyzed this way. As a result, PROSPECT allows to
overcome typical challenges an embedded security analyst
typically needs to face today.
3.1 Character Device Access
In order to forward peripheral hardware accesses, we need
to know which system calls are generally used to interact
with character devices. Targeting Linux systems, we gath-
ered information on the supported file_operations of all
Table 2 shows which file_operations (i.e. which system
calls) are used to interact with character device drivers in
the diﬀerent Linux kernel versions in relation to the number
character device source code ﬁles. For instance, on Linux-
2.4.20, there are 77 ﬁles that deﬁne file_operations and,
out of these, 83.12% deﬁne a custom handler for the open
system call. Some of the system calls in older kernel versions
have been superseded by newer ones. For instance, the ioctl
call in Linux-2.4.20 has been replaced by unlocked_ioctl
and compat_ioctl for performance reasons in newer kernel
versions.
Syscall
aio fsync
aio read
aio write
check ﬂags
compat ioctl
fallocate
fasync
ﬂock
ﬂush
fsync
get unmapped area
ioctl
llseek
lock
mmap
open
poll
read
readdir
readv
release
sendpage
setlease
splice read
splice write
unlocked ioctl
write
writev
2.4.20
-
-
-
-
-
-
28.57
-
14.29
0.00
2.60
84.42
6.49
0.00
18.18
83.12
32.47
68.83
0.00
0.00
77.92
0.00
-
-
-
-
62.34
0.00
2.6.38.1
0.00
1.61
1.61
0.00
6.45
0.00
11.29
0.00
-
3.23
1.61
-
32.26
0.00
12.90
74.19
20.97
82.26
0.00
-
62.90
0.00
0.00
0.00
0.00
51.61
50.00
-
3.4.4
0.00
1.85
1.85
0.00
7.41
0.00
12.96
0.00
-
3.70
1.85
-
29.63
0.00
14.81
77.78
25.93
85.19
0.00
-
66.67
0.00
0.00
0.00
0.00
50.00
55.56
-
Table 2: Usage of Linux file_operations in Charac-
ter Device Drivers (Percentage) for diﬀerent Linux
versions
332In theory, PROSPECT could forward any of the system
calls visible in Table 2. However, for performance reasons,
it is beneﬁcial to handle some of those calls locally.
In
fact, PROSPECT could execute system calls such as flush,
sync, fasync or aio_fsync locally, if device access on the
remote device is kept synchronized. Due to the delay im-
posed by the connection to the remote system, however,
this would have a negligible eﬀect. On the other side, sys-
tem calls such as splice_read, that have been introduced
for performance reasons, can use their regular counterparts
(i.e. read) without breaking their basic functionality. With
PROSPECT, we thus focus on basic character device opera-
tions that are broadly used by the majority of the character
device drivers we analyzed. Speciﬁcally, PROSPECT can
handle the file_operations listed in Table 3. The ﬁrst col-
umn shows the name of the system call. For each system call,
we specify if the system call is supported by PROSPECT,
which system call is used to implement it and whether the
call is handled locally or forwarded to the remote system.
Syscall
supported
aio fsync
aio read
aio write
check ﬂags
compat ioctl
fallocate
fasync
ﬂock
ﬂush
fsync
get unmapped area
ioctl
llseek
lock
mmap
open
poll
read
readdir
readv
release
sendpage
setlease
splice read
splice write
unlocked ioctl
write
writev
yes
yes
yes
no
yes
no
yes
no
yes
yes
no
yes
yes
no
no
yes
yes
yes
no
no
yes
no
no
yes
yes
yes
yes
no
implemented
through
fsync
read
write
-
ioctl
-
fsync
-
fsync
fsync
-
ioctl
llseek
-
-
open
poll
read
-
-
release
-
-
read
write
ioctl
write
-
local/
remote
local
remote
remote
-
remote
-
local
-
local
local
-
-
remote
-
-
remote
remote
remote
-
-
remote
-
-
remote
remote
remote
remote
-
Table 3: Basic file_operations supported by PRO-
SPECT
With the exception of mmap, all operations that are fre-
quently used for character device communication are sup-
ported. This is due to the fact that FUSE (Filesystem in
Userspace) does not support direct mmap calls for character
devices at the moment (see Section 7).
However, special consideration was necessary for the ioctl