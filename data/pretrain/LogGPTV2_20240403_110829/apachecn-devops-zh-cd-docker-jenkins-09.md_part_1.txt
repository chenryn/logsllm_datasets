# 九、高级持续交付
在最后一章中，我们介绍了服务器集群是如何工作的，以及如何与 Docker 和 Jenkins 一起使用它。在本章中，我们将看到在持续交付过程中非常重要但尚未描述的不同方面的混合。
本章包括以下几点:
*   解释如何在持续交付的背景下处理数据库变更
*   介绍数据库迁移的思想和相关工具
*   探索向后兼容和向后不兼容数据库更新的不同方法
*   在 Jenkins 管道中使用并行步骤
*   创建 Jenkins 共享库
*   提出了一种回滚生产更改的方法
*   为遗留系统引入持续交付
*   探索如何准备零宕机部署
*   展示持续交付最佳实践
# 管理数据库更改
到目前为止，我们一直专注于应用于网络服务的持续交付过程。其中一个简单的部分是 web 服务本质上是无状态的。这一事实意味着，在许多情况下，它们可以很容易地更新、重启、克隆，并从给定的源代码中重新创建。然而，web 服务通常链接到它的有状态部分，这是一个对交付过程提出新挑战的数据库。这些挑战可分为以下几类:
*   **兼容性**:数据库模式和数据本身必须始终与 web 服务兼容
*   **零宕机部署**:为了实现零宕机部署，我们使用滚动更新，这意味着一个数据库必须同时兼容两个不同的 web 服务版本
*   **回滚**:数据库的回滚可能是困难的、有限的，有时甚至是不可能的，因为并非所有操作都是可逆的(例如，删除包含数据的列)
*   **测试数据**:数据库相关的变更很难测试，因为我们需要与生产非常相似的测试数据
在本节中，我将解释如何应对这些挑战，以便持续交付流程尽可能安全。
# 了解架构更新
如果你考虑交付过程，真正造成困难的不是数据本身，因为我们在部署应用时通常不会更改数据。数据是系统在生产中运行时收集的东西；然而，在部署期间，我们只改变存储和解释这些数据的方式。换句话说，在持续交付过程的上下文中，我们对数据库的结构感兴趣，而不是对其内容感兴趣。这就是为什么本节主要关注关系数据库(及其模式)，而较少关注其他类型的存储，如 NoSQL 数据库，那里没有结构定义。
为了更好地理解这一点，我们想到了 Redis，我们已经在本书中使用了它。它存储缓存的数据，所以它实际上是一个数据库。然而，从持续交付的角度来看，它不需要任何努力，因为它没有任何数据结构。它存储的只是键值条目，不会随着时间的推移而变化。
NoSQL databases usually don't have any restricting schema and therefore simplify the Continuous Delivery process because there is no additional schema update step required. This is a huge benefit; however, it doesn't necessarily mean that writing applications with NoSQL databases is simpler because we have put more effort into data validation in the source code.
关系数据库有静态模式。如果我们想要更改它，例如，向表中添加一个新列，我们需要编写并执行一个 SQL DDL(数据定义语言)脚本。每次变更都要手动完成，这需要大量的工作，并且会导致容易出错的解决方案，其中操作团队必须保持代码和数据库结构的同步。更好的解决方案是以增量方式自动更新模式。这样的解决方案称为数据库迁移。
# 介绍数据库迁移
数据库模式迁移是对关系数据库结构进行增量更改的过程。让我们看一下下图，以便更好地理解它:
![](img/bf27905b-b5aa-4f40-a4b0-37eaf35957ca.png)
版本 **v1** 中的数据库具有由`V1_init.sql`文件定义的模式。此外，它还存储与迁移过程相关的元数据，例如，它的当前模式版本和迁移更改日志。当我们想要更新模式时，我们以一个 SQL 文件的形式提供变更，比如`V2_add_table.sql`。然后，我们需要运行迁移工具，该工具在数据库上执行给定的 SQL 文件(它还更新元表)。实际上，数据库模式是所有后续执行的 SQL 迁移脚本的结果。接下来，我们将看到一个迁移的例子。
Migration scripts should be stored in the version control system, usually in the same repository as the source code.
迁移工具及其使用的策略可分为两类:
*   **升级和降级**:这种方式，比如 Rails 上的 Ruby 框架使用的方式，意味着我们可以向上迁移(从 v1 迁移到 v2)和向下迁移(从 v2 迁移到 v1)。它允许数据库模式回滚，这有时会导致数据丢失(如果迁移在逻辑上是不可逆的)。
*   **只升级**:这个方法，比如 Flyway 工具使用的，只允许我们向上迁移(从 v1 迁移到 v2)。在许多情况下，数据库更新是不可逆的，例如，从数据库中删除一个表。这样的更改无法回滚，因为即使我们重新创建了表，我们也已经丢失了所有数据。
市场上有许多数据库迁移工具，其中最流行的是 Flyway、Liquibase 和 Rail 迁移(来自 Ruby on Rails 框架)。作为理解这些工具如何工作的下一步，我们将看到一个基于 Flyway 工具的例子。
There are also commercial solutions provided for the particular databases, for example, Redgate (for SQL Server) and Optim Database Administrator (for DB2).
# 使用 Flyway
让我们使用 Flyway 为计算器网络服务创建一个数据库模式。数据库将存储在服务上执行的所有操作的历史记录:第一个参数、第二个参数和结果。
我们通过三个步骤展示了如何使用 SQL 数据库和 Flyway:
1.  将 Flyway 工具配置为与 Gradle 一起工作。
2.  定义 SQL 迁移脚本以创建计算历史表。
3.  在 Spring Boot 应用代码中使用 SQL 数据库。
# 配置飞行路线
为了与 Gradle 一起使用 Flyway，我们需要在`build.gradle`文件中添加以下内容:
```
buildscript {
   dependencies {
       classpath('com.h2database:h2:1.4.191')
    }
}
…
plugins {
   id "org.flywaydb.flyway" version "4.2.0"
}
…
flyway {
   url = 'jdbc:h2:file:/tmp/calculator'
   user = 'sa'
}
```
以下是对配置的快速评论:
*   我们使用了 H2 数据库，这是一个内存数据库(基于文件)
*   我们将数据库存储在`/tmp/calculator`文件中
*   默认的数据库用户叫做`sa`(系统管理员)
In the case of other SQL databases (for example, MySQL), the configuration would be very similar. The only difference is in the Gradle dependencies and the JDBC connection.
应用此配置后，我们应该能够通过执行以下命令来运行 Flyway 工具:
```
$ ./gradlew flywayMigrate -i
```
该命令在文件`/tmp/calculator.mv.db`中创建了数据库。显然，它没有模式，因为我们还没有定义任何东西。
Flyway can be used as a command-line tool, via Java API, or as a plugin for the popular building tools Gradle, Maven, and Ant.
# 定义 SQL 迁移脚本
下一步是定义将计算表添加到数据库模式中的 SQL 文件。让我们用以下内容创建`src/main/resources/db/migration/V1__Create_calculation_table.sql`文件:
```
create table CALCULATION (
   ID      int not null auto_increment,
   A       varchar(100),
   B       varchar(100),
   RESULT  varchar(100),
   primary key (ID)
);
```
注意迁移文件命名约定，`__.sql`。该 SQL 文件创建了一个包含四列的表:`ID`、`A`、`B`、`RESULT`。`ID`列是表中自动递增的主键。现在，我们准备运行 Flyway 命令来应用迁移:
```
$ ./gradlew flywayMigrate -i
…
Successfully applied 1 migration to schema "PUBLIC" (execution time 00:00.028s).
:flywayMigrate (Thread[Daemon worker Thread 2,5,main]) completed. Took 1.114 secs.
```
该命令自动检测到迁移文件并在数据库上执行。
The migration files should be always kept in the version control system, usually, together with the source code.
# 访问数据库
我们执行了第一次迁移，因此数据库已经准备好了。要查看完整的示例，我们还应该调整我们的项目，以便它能够访问数据库。
让我们首先配置 Gradle 依赖项，以使用 Spring Boot 项目中的 H2 数据库。我们可以通过在`build.gradle`文件中添加以下几行来做到这一点:
```
dependencies {
   compile("org.springframework.boot:spring-boot-starter-data-jpa")
   compile("com.h2database:h2")
}
```
下一步是在`src/main/resources/application.properties`文件中设置数据库位置和启动行为:
```
spring.datasource.url=jdbc:h2:file:/tmp/calculator;DB_CLOSE_ON_EXIT=FALSE
spring.jpa.hibernate.ddl-auto=validate
```
第二行意味着 Spring Boot 不会尝试从源代码模型自动生成数据库模式。相反，只有当数据库模式与 Java 模型一致时，它才会进行验证。
现在，让我们在新的`src/main/java/com/leszko/calculator/Calculation.java`文件中创建用于计算的 Java ORM 实体模型:
```
package com.leszko.calculator;
import javax.persistence.Entity;
import javax.persistence.GeneratedValue;
import javax.persistence.GenerationType;
import javax.persistence.Id;
@Entity
public class Calculation {
   @Id
   @GeneratedValue(strategy= GenerationType.AUTO)
   private Integer id;
   private String a;
   private String b;
   private String result;
   protected Calculation() {}
   public Calculation(String a, String b, String result) {
       this.a = a;
       this.b = b;
       this.result = result;
   }