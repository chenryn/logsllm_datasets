# 【技术分享】AtomBombing：Windows的全新代码注入技术

## 译文声明
本文为翻译文章，原文来源：endgame.com  
原文地址：[链接]  
译文仅供参考，具体内容及含义以原文为准。

## 翻译信息
- **翻译**：knight (http://bobao.360.cn/member/contribute?uid=162900179)
- **预估稿费**：200 RMB
- **投稿方式**：发送邮件至 [linwei#360.cn](mailto:PI:EMAIL)，或登录网页版 (http://bobao.360.cn/contribute/index) 在线投稿

## 前言
通过利用缓解技术中的弱点，绕过HA-CFI和CFG进行代码注入。

## 正文
去年11月，微软发布了针对Microsoft Edge的安全更新，修复了由Google Project Zero团队发现的两个漏洞CVE-2016-7200和CVE-2016-7201。今年早些时候，Brian Pak发布了一个概念验证（POC）漏洞，证明这两个漏洞可以一起被利用。

不久之后，这些漏洞被包含在几个流行的开发工具包中。漏洞的利用主要通过POC的剪切/粘贴实现。尽管POC存在一些弱点，但在其原始形式下，它成功绕过了所有微软的漏洞缓解措施。POC展示了如何有效地抵消漏洞补丁中的复杂反攻击技术并获得执行权限。

### 漏洞概述
- **CVE-2016-7200**：chakra.dll中的`array.filter`函数类型混淆错误漏洞，允许攻击者确定堆上创建的对象地址。
- **CVE-2016-7201**：chakra.dll中的另一个类型混淆错误漏洞，在`JavascriptArray::FillFromPrototypes`中，使攻击者可以在任意内存上进行读/写操作。

微软在实施利用缓解技术方面有着良好的记录，从EMET（利用防护工具的行业标准）到嵌入Windows 10和Edge的内置缓解措施。绕过这些技术甚至利用未被破坏的漏洞是非常有趣的，可以帮助我们了解当前的安全状态。

在Endgame，我们不断测试我们的漏洞检测和攻击预防能力，以应对最新的威胁，并确保我们能够提供最强大的防御机制。这个POC对我们非常有价值，因为它为我们提供了进一步研究的方向，并帮助我们为客户提供更全面的保护。

在这篇文章中，我不会深入探讨漏洞本身，而是重点讨论最小POC中所强调的利用缓解技术中的弱点。我将通过一个适用于Chakra POC的攻击链来说明这个问题，并介绍我们是如何通过创新的预防方法来提高黑客攻击的成本。

### 开发阶段
#### 内存准备
大多数漏洞在获得执行权限之前，都需要进行内存准备步骤，将攻击者控制的数据（如ROP、shellcode）放置在已知位置的内存中。这通常被称为堆修整或堆喷射。

堆喷射的主要设施包括探测器和干扰器。探测器（如NOZZLE）监视内存分配并检查恶意行为指标，而干扰器（如BuBBle和DieHarder）通过增加配置随机化来降低堆喷射的可靠性，阻塞NOP-sleds或保护常用地址（如0x0c0c0c0c）。

CVE-2016-7200启用的解决方案是：如果攻击者选择内存，系统会停止使用该内存。从技术上讲，CVE-2016-7200的作用是准备内存，由于其精确性，现有的缓解技术很难检测到它。

#### 漏洞配置
在这个阶段没有特别的缓解措施，因为所采取的行动取决于具体的漏洞和攻击者选择的执行路径。Chakra POC使用CVE-2016-7201创建读/写功能，稍后会用到。

#### 内存泄漏
随着地址空间布局随机化（ASLR）的引入，攻击者需要额外的步骤来定位目标模块的地址。Chakra POC已经具有对象和读/写原语的地址，因此只需从对象中获取vtable，找到其中一个函数的地址，然后减去适当的基于DLL版本的偏移量即可获取chakra.dll的基址。

#### Payload配置
为了在大多数操作系统和目标版本中有效，许多漏洞通过动态方法来定位开发功能的位置（如VirtualProtect、VirtualAlloc等）。这种查找通常是通过搜索目标DLL的导出地址表来完成的。例如，Flash漏洞利用PE.as模块：

诸如Microsoft EMET中的EAF/EAF+之类的缓解措施旨在阻止对DLL头位置的未经授权访问。Chakra POC通过修改硬编码地址来避免这些检查。这种方法虽然在某些情况下有效，但总体上有局限性，增加了漏洞开发的时间，并且需要不断更新以适应动态环境。

#### 代码执行
接下来，攻击者必须中断预定的执行流程，并开始执行自己的代码。传统上，这是通过将堆栈指针旋转到攻击者控制的内存来完成的。此时，常见的缓解措施是安全产品偶尔验证堆栈指针是否指向当前线程的堆栈。

Chakra POC通过将ROP直接放在堆栈上来绕过这些检查。Endgame采用HA-CFI，有助于确保代码执行的完整性，并在抵御大多数攻击方面非常成功。HA-CFI可以检测异常的控制流，并在堆栈指针被修改之前阻止大多数攻击。通常，堆栈支点是ROP的第一个小工具，也是执行流程中的第一个异常。

微软利用控制流保护（CFG）达到类似目的。CFG对间接调用添加了一个附加检查，以确保它们被定向到有效目标。Chakra POC通过硬编码地址劫持`ScriptEngine::ExecutePendingScripts`的返回地址，并在exploit脚本完成时获得对堆栈的控制。通过不进行间接调用和避免异常的代码流，从而绕过HA-CFI和CFG。

#### 返回导向编程（ROP）
ROP是一种过渡到执行控制的标准方法。当攻击者的shellcode保存在不可执行的内存中时，通常需要执行此步骤。在检测ROP的过程中已经进行了大量研究，导致几种技术被部署在安全产品上。

1. 关键功能的正确性检查：
   - 堆栈指针的完整性
   - 堆叠的完整性
   - 返回地址优先呼叫
   - VirtualProtect不会尝试使堆栈可执行

2. 代码模拟：Microsoft的EMET和ROPGuard采用的缓解模拟在检测类ROP行为方面处于领先地位。

3. 硬件：kBouncer利用硬件性能监视器来检测类似ROP的行为。

Chakra POC确实使用了ROP（如上所示），但它有几个特性，使得这些技术难以检测。首先，ROP只包含两个小工具和一个返回shellcode，避免了硬件辅助小工具链的检测。其次，VirtualProtect调用是一个合法的函数，它包装了VirtualProtect。这使得堆栈在到达VirtualProtect的任何检查时都会显示正常。

第二个ROP gadget和APIHook_VirtualProtect的组合代码用于模拟技术检查感觉非常良好，因为它们检查VirtualProtect后的代码都是合法的。

## 总结
Chakra POC是一个很好的利用缓解规避技术的研究案例。尽管其中使用的技术不是最新的，但由于漏洞本身允许它们的使用，并且内置到Windows 10和Edge中的缓解措施需要使用它们，所以仍然具有重要价值。

我们知道漏洞会一直存在，我们应该把重点放在攻击的检测和预防上。像微软、谷歌、Adobe等软件供应商已经在检测/预防战中投入了大量资源。像英特尔这样的硬件厂商也加入了斗争。像Endgame这样的安全公司将提供更多有效的方法来阻止对手。每个缓解措施都可能给攻击者增加一些成本。我们的工作是使这个成本尽可能高。

Chakra POC和已被发现的攻击表明，成本还不够高，攻击者仍然可以进行攻击。这表明Windows 10和Edge不能为大家提供安全港湾。在Endgame，我们不断创新开发检测攻击/预防攻击的能力，通过分析最新的漏洞和综合防治技术来使最具创造性的攻击者的攻击链停在最早阶段。