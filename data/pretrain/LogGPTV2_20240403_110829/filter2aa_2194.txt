### pin2pwn: How to Root an Embedded Linux Box with a Sewing Needle
**Presenter:** Brad Dixon - Carve Systems  
**Event:** DEF CON 24

#### Key Features:
- **It works**
- **Easy to perform**
- **Teachable**
- **Dramatic demonstration**

**"USEFUL NOVELTY"**
- **Risky**
- **Crude**
- **Possibly redundant**

#### Demonstration and Prior Art
- **Fault Injection and Glitching:** There is a significant body of work around fault injection and glitching at the IC level for secure processors.
- **Recent System-Level Applications:**
  - **2004:** WRT54 "Bricked Router" recovery, Administrator note by mbm
  - **"How to Hack the Hudl – We give Rockchip a good seeing to,"** Pen Test Partners blog post
  - **"20 Devices in 45 Minutes,"** CJ Heres et al., DEF CON 22 (related)
  - **"WINKHUB Side Channel Attack,"** Kevin2600, 2016
  - **"Getting Root on a Philips Hue Bridge,"** Colin O’Flynn, 2016

#### Today's Focus:
- **Effectiveness of the Attack**
- **Why the Attack Works**
- **Defensive Strategies Against the Attack**

#### Risks to Hardware
- **Potential Damage:** Although I have not yet destroyed any hardware, this method involves the abuse of semiconductor devices.
- **Cautionary Note:** Use this technique only on equipment you can afford to lose.
- **Alternative Methods:** Depending on the hardware, there may be better and safer options. Consider those first.

#### Generic Networked Device Product Design
**Attack Order:**
1. Serial
2. JTAG
3. ...
4. Flash to CPU Interface

**Device Components:**
- CPU
- Flash
- Ethernet
- Memory
- Serial
- JTAG
- Other I/O
- Parallel or SPI Flash
- **Poke Point:** Indicated location

#### Why Does This Work?
- **Disrupt Boot Chain:** Introduce a transient fault to disrupt the boot process.
- **Activate Failure Path:** Trigger an unexpected failure path to gain access.

**Boot Sequence:**
- Boot Loader
- Kernel Load to RAM
- Scan / Mount
- Init / Start App

**Poke Points:**
- During kernel load
- During application initialization

#### Scenarios:
**Scenario #1: Exploitable U-Boot Configuration**
1. No JTAG.
2. Homegrown "secure" boot.
3. Attempt to load and boot kernel #1.
4. If kernel #1 fails, attempt to load and boot kernel #2.
5. If both kernels fail, return to the U-Boot prompt.

**Scenario #2: Exploitable Init Configuration**
- `/bin/init` reads `/etc/inittab`.
- `/bin/init` runs `/etc/rc`.
- `/etc/rc` starts the application in the foreground.
- The application grabs the console and presents a login prompt with unknown credentials.
- **If the application fails to load, `/bin/init` runs `/bin/sh`.**

#### Case Study: LTE Router #4
**Steps:**
- **Survey Hardware:** Identify ports to monitor the boot process.
- **Datasheets:** Gather relevant documentation.
- **Failure Modes:** Inspect possible failure modes, if feasible.
- **Boot Timing:** Determine the timing of the boot process.

**Preparation:**
- **Select Pins:** Choose the pins to poke.
- **Timing Visibility:** Ensure visibility into the timing.
- **Poking:** May require several attempts.
- **Power Off:** Turn off the device between tests.

**Poking:**
- **Monitor Behavior:**
  - Serial traffic
  - Fallback boot configurations
  - Re-activated JTAG
  - Boot from TFTP
  - Fail to USB DFU
  - New network ports
- **Luck Factor:** Sometimes, you get lucky!

**Results:**
| Device                | "Secure" Boot | Flash Type | U-Boot Shell | Root Shell |
|-----------------------|---------------|------------|--------------|------------|
| LTE Router #3         | No            | Serial     | ✔            |            |
| LTE Router #4         | No            | Parallel   | ✔            |            |
| Device #3             | Yes           | Parallel   | ✔            |            |
| Device #4             | No            | Serial     | ✔            |            |
| LTE Router #5         | No            | Parallel   | BGA          |            |
| LTE Router #6         | Yes           | Parallel   | Hash Check   |            |
| Home Automation Hub   | No            | Parallel   | BGA, Fast    |            |

*Note: Table indicates pin2pwn vulnerabilities only.*

#### Defensive Strategies
**Fail Closed:**
- **Test Failure Paths:** Include transient hardware failures in your testing.
- **Modify Boot Loaders:** Configure boot loaders to reboot at the end of the automated boot sequence.
- **Enable Watchdog Timer:** Implement a watchdog timer in the bootloader and a service in userspace.
- **Avoid Debug Mode:** Be cautious about shipping "fail to debug mode" features in production configurations.

**Hide Your Pins and Traces:**
- **BGA Surface Mount Devices:** Hide pins under the package.
- **Inner Layer Routing:** Route traces using inner layers to make them less accessible.

**Run Silent, Run Fast:**
- **Minimal Serial Output:** Keep serial output terse.
- **Fast Boot Time:** A fast kernel boot (e.g., 0.1332 seconds) makes it difficult to interrupt the process at the right time.

Thank you!