[《PostgreSQL Oracle 兼容性之 - SQL OUTLINE插件sr_plan (保存、篡改、固定 执行计划)》](../201702/20170228_01.md)    
8 动态执行计划  
[《[未完待续] PostgreSQL PRO 特性 - AQO(机器学习执行计划优化器)》](../201803/20180322_04.md)    
9 膨胀检查与清理  
[《PostgreSQL pgstattuple - 检查表的膨胀情况、dead tuples、live tuples、freespace》](../201909/20190915_02.md)    
[《解读用户最常问的PostgreSQL垃圾回收、膨胀、多版本管理、存储引擎等疑惑 - 经典》](../201906/20190621_01.md)    
[《PostgreSQL 收缩膨胀表或索引 - pg_squeeze or pg_repack》](../201610/20161030_02.md)    
[《PostgreSQL 垃圾回收原理以及如何预防膨胀 - How to prevent object bloat in PostgreSQL》](../201504/20150429_02.md)    
[《PostgreSQL 如何精确计算表膨胀(fsm,数据块layout讲解) - PostgreSQL table exactly bloat monitor use freespace map data》](../201306/20130628_01.md)    
[《如何使用5why分析法发现数据库膨胀现象背后的本质?》](../202108/20210818_01.md)    
[《膨胀点解释 - 全局catalog,库级catalog,普通表,wal文件 - 哪些垃圾(dead tuple), wal文件不能被回收reuse - 什么情况下可能膨胀》](../201907/20190701_01.md)    
10 自动收集统计信息配置  
autovacuum   
## 二、整体慢  
数据库整体变慢, 最核心的是定位罪魁祸首, 进行优化, 最后需要判断是否在业务层面、数据库SQL层面、数据库内核层面 都已经无法优化(则可能需要升级硬件、或者使用分布式数据库、扩容等),   
常用分析工具与方法:   
- pg_stat_statements, 找出最消耗资源的TOP SQL  
- performance insight, 活跃会话、等待事件采样快照记录, 用于分析活跃会话数超过CPU 核数的时间段, 当时数据库系统的等待情况. SQL的分布等.   
- perf, 借助抓取系统调用、用户进程函数调用等统计信息, 生成数据库高峰、或者问题时刻的代码级耗时统计的火焰图, 找到代码级别的瓶颈. 通常用于分析表面上很难察觉的问题.    
- pg_stat_ pg_statio_ 统计信息, 找出CPU消耗、IO消耗不合理的表   
- 找出膨胀索引与膨胀表, 垃圾清理不及时的原因分析       
- 找出统计信息偏差, 配置自动收集统计信息    
- 参数不正确、优化器校准因子不正确等问题   
    - [《DB吐槽大会,第12期 - 没有自动成本校准器》](../202108/20210830_03.md)  
例子:    
[《PostgreSQL性能优化综合案例讲解 - 1》](../201203/20120313_01.md)    
[《PostgreSQL性能优化综合案例讲解 - 2》](../201203/20120313_02.md)    
练习:    
更多例子等你反馈, 欢迎联系我.    
背景知识:   
1 找出最消耗资源的SQL  
[《PostgreSQL 如何查找TOP SQL (例如IO消耗最高的SQL) (包含SQL优化内容) - 珍藏级 - 数据库慢、卡死、连接爆增、慢查询多、OOM、crash、in recovery、崩溃等怎么办?怎么优化?怎么诊断?》](../201704/20170424_06.md)    
2 找出问题时间段, 找出问题时间段的等待事件瓶颈, 分析等待事件的SQL分布, 分析慢SQL的等待事件分布    
[《PostgreSQL Oracle 兼容性之 - performance insight - AWS performance insight 理念与实现解读 - 珍藏级》](../201901/20190125_02.md)    
[《PostgreSQL pg_stat_statements AWR 插件 pg_stat_monitor , 过去任何时间段性能分析 [推荐、收藏]》](../202104/20210415_01.md)    
https://github.com/postgrespro/pg_wait_sampling  
[《PostgreSQL 13 preview - wait event sample - 等待事件统计(插件,hook) - ASH - performance insight》](../202001/20200101_01.md)    
[《PostgreSQL 等待事件 及 等待采样统计 (pg_wait_sampling) 发布新版本 1.1.2》](../202011/20201115_05.md)    
[《PostgreSQL 等待事件 及 等待采样统计(pg_wait_sampling)》](../201610/20161006_01.md)    
3 找出代码瓶颈   
[《PostgreSQL 源码性能诊断(perf profiling)指南(含火焰图生成分析FlameGraph) - 珍藏级》](../201611/20161129_01.md)    
[《PostgreSQL explain, parser, execute 过程资源使用统计分析 - perf , debug , log_planner_stats , log_xxx_stats》](../202011/20201105_04.md)    
4 找出CPU消耗、IO消耗不合理的表    
[《PostgreSQL pg_stat_ pg_statio_ 统计信息(scan,read,fetch,hit)源码解读》](../201610/20161018_03.md)    
5 找出膨胀索引与膨胀表    
[《PostgreSQL pgstattuple - 检查表的膨胀情况、dead tuples、live tuples、freespace》](../201909/20190915_02.md)    
[《解读用户最常问的PostgreSQL垃圾回收、膨胀、多版本管理、存储引擎等疑惑 - 经典》](../201906/20190621_01.md)    
[《PostgreSQL 收缩膨胀表或索引 - pg_squeeze or pg_repack》](../201610/20161030_02.md)    
[《PostgreSQL 垃圾回收原理以及如何预防膨胀 - How to prevent object bloat in PostgreSQL》](../201504/20150429_02.md)    
[《PostgreSQL 如何精确计算表膨胀(fsm,数据块layout讲解) - PostgreSQL table exactly bloat monitor use freespace map data》](../201306/20130628_01.md)    
[《如何使用5why分析法发现数据库膨胀现象背后的本质?》](../202108/20210818_01.md)    
[《膨胀点解释 - 全局catalog,库级catalog,普通表,wal文件 - 哪些垃圾(dead tuple), wal文件不能被回收reuse - 什么情况下可能膨胀》](../201907/20190701_01.md)    
## 三、偶尔慢  
偶尔某些很快的SQL会抖动(变得很慢). 针对这个情况, 需要找到这条SQL变慢的时刻, 当时数据库的整体资源消耗的情况, 以及当时这条SQL的执行计划、锁等待的情况.   
- 比较典型的例如prepare, 输入参数不同可能会有不一样的资源消耗, 或者执行计划不正确导致.  
- 又或者遇到较长的锁等待. (包括低级锁lwlock、或者高级锁lock)
常用分析工具与方法:   
- auto_explain, 记录执行时间超过阈值的SQL、函数的执行计划, 执行过程的完整数据(buffer, hit, read, write, rows, time等)  
- log_lock_waits, 记录锁等待时间超过lock_timeout的SQL, 以及堵塞它的PID.   
- performance insight, 活跃会话、等待事件采样快照记录, 用于分析SQL抖动的对应时间段的数据库实例整体情况、SQL当时的等待情况.   
例子, 使用pg_stat_activity活跃会话快照, 分析过去抖动时刻的慢SQL等待事件:    
[《PostgreSQL Oracle 兼容性之 - performance insight - AWS performance insight 理念与实现解读 - 珍藏级》](../201901/20190125_02.md)    
练习:    
更多例子等你反馈, 欢迎联系我.    
背景知识:   
1 分析过去某个时刻的执行计划抖动.    
[《PostgreSQL 函数调试、诊断、优化 & auto_explain & plprofiler》](../201611/20161121_02.md)    
2 找出问题时间段, 找出问题时间段的等待事件瓶颈, 分析等待事件的SQL分布, 分析慢SQL的等待事件分布    
[《PostgreSQL Oracle 兼容性之 - performance insight - AWS performance insight 理念与实现解读 - 珍藏级》](../201901/20190125_02.md)    
[《PostgreSQL pg_stat_statements AWR 插件 pg_stat_monitor , 过去任何时间段性能分析 [推荐、收藏]》](../202104/20210415_01.md)    
https://github.com/postgrespro/pg_wait_sampling  
[《PostgreSQL 13 preview - wait event sample - 等待事件统计(插件,hook) - ASH - performance insight》](../202001/20200101_01.md)    
[《PostgreSQL 等待事件 及 等待采样统计 (pg_wait_sampling) 发布新版本 1.1.2》](../202011/20201115_05.md)    
[《PostgreSQL 等待事件 及 等待采样统计(pg_wait_sampling)》](../201610/20161006_01.md)    
## 其他
如果是greenplum可以参考: [《Greenplum explain analyze 解读 + 深度明细开关 - 珍藏级》](../201712/20171204_02.md)  
或者grep我的github readme页面greenplum,性能,优化之类关键字.   
除了有问题后再分析, 在问题发生前也可以做很多事情, 例如环境部署、参数配置都很重要. 可以在我的github里搜索相关文章.  
#### [期望 PostgreSQL 增加什么功能?](https://github.com/digoal/blog/issues/76 "269ac3d1c492e938c0191101c7238216")
#### [PolarDB for PostgreSQL云原生分布式开源数据库](https://github.com/ApsaraDB/PolarDB-for-PostgreSQL "57258f76c37864c6e6d23383d05714ea")
#### [PostgreSQL 解决方案集合](https://yq.aliyun.com/topic/118 "40cff096e9ed7122c512b35d8561d9c8")
#### [德哥 / digoal's github - 公益是一辈子的事.](https://github.com/digoal/blog/blob/master/README.md "22709685feb7cab07d30f30387f0a9ae")
![digoal's wechat](../pic/digoal_weixin.jpg "f7ad92eeba24523fd47a6e1a0e691b59")
#### [PolarDB 学习图谱: 训练营、培训认证、在线互动实验、解决方案、生态合作、写心得拿奖品](https://www.aliyun.com/database/openpolardb/activity "8642f60e04ed0c814bf9cb9677976bd4")
#### [购买PolarDB云服务折扣活动进行中, 55元起](https://www.aliyun.com/activity/new/polardb-yunparter?userCode=bsb3t4al "e0495c413bedacabb75ff1e880be465a")
#### [About 德哥](https://github.com/digoal/blog/blob/master/me/readme.md "a37735981e7704886ffd590565582dd0")