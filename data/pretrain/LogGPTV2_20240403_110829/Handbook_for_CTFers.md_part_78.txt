following URL in the data download.
http://xxxxxx.com/download/ile?name=test.docx&pathupload/doc/test.docx
Based on experience, an arbitrary file download vulnerability may exist here. The
test found that by.
http://xxxxx.com/download/file?name=test..docx&path... ... ... ... ... /etc/
pmssedyosa/ pmssed
---
## Page 686
674
10  Code Auditing
Fig, 10.23 Download any file
1.2
//[application entrypoint ]
13
14
// define the application directory
15
define('APP_PATH',_DIR_.'/../application/');
16
// load the bootstrap files
17
require_DIR_./../thinkphp/start.php';
Fig, 10.24 The code for index.php
define(*THINK_VERSION','5.0.13");
tine（oeasfoat:true）);
THINK_START_HEM',memory_get_usage());
THDNK_PATH'）oF
"libr
fine（THIN_PATH，_DIR_.DS）
05);
defined(na
'APP_PATH'}or define(°APP_PATH',dirname($_SERVER['SCRI
：D5)
Fig, 10.25 thinkphp version
This can download passwd, see Fig. 10.23.Therefore, it is concluded that an arbitrary
file download vulnerability exists.
The server's response header has “X-Powered-By: PHP/7.0.21" inside, so it is
inferred to be a PHP website. The idea is to download index.php and then read other
files according to the existing require or include statement in php files to get as much
source code as possible, and then perform a code audition to find more critical
vulnerabilities. The code for index.php is shown in Fig. 10.24. The site is a website 
built with ThinkPhp,version in. /thinkphp/base.php (see Fig. 10.25), and the
resulting version number is 5.0.13.
After getting the version number, it can be found that its version is affected by the
1 peed  nq io pnoe pedde e s dHu yo qe 
be used directly. By reading the corresponding vulnerability file, we found that there
---
## Page 687
10.1 PHP Code Audiing
675
Fig, 10.26 The source code
and some additional
//默认模块名
information from the
//禁止访问模块
adnin"
configuration file
/默认控制器名
deny_module_list'
103,]cm
//默认操作名
,oseg，
//默认验证器
efault_a
> 'login',
efault_validate'
'Error'
action_suffix'
自动搜索控制器
ontroller_a
arch'>false,
publie function file()
$doumload = new HttpDownload();
$url = $this->param[path'];
=sthi
dounload($_SERVER[*DOCUMENT_ROOT*].*/'.Surl,$name
mn
'1:
Fig, 10.27 php code
is a patch code, so we need to look for the vulnerability of the website business code.
Since the modules and controllers in the application directory are dynamically
loaded and called, it is not possible to get the exact name of the module folder and
controller. In index.php, you can see that the configuration file directory is set to
config, so the constructed path is /config/config.php to get the source code and some
additional information from the configuration file, see Fig. 10.26.
This exposes the module name and controller name, so we can constructs a path /
application/admin/controller/Base.php to get the source code, but there is no exploit-
able code in it. The exposed module name can then be used to guess the controller
name accordingly or to blast according to common controller names. For example, if
the URL of the file download vulnerability is download/file, then guess there is a
controller named as download, so we can construct the path as /application/admin/
controller/download.php to download the source code shown in Fig. 10.27. But
unfortunately, this is the only operation of the controller, and there is no other
function that can be used.
In general, if there is a download, there must be a upload. So through trials and
errors, and we managed to construct a path for upload controller as /application/
admin/controller/Upload.php, and successfully obtained the source code. By
---
## Page 688
676
10 Code Auditing
O_DATA
//获取文件源以及类型
Fig, 10.28 php code
Fig, 10.29 php code
@title Upload
ass Upload extends Controller
*@title Upload
error:
Invaid Request :admin/upload/base64
Fig, 10.30 Result
auditing the source code, we find an obvious arbitrary file write vulnerability, see
Fig. 10.28.
The incoming parameters are under the attacker’s control, and the suffixes are
taken out directly by regular expressions without any judgment about the legitimacy
of the suffix name, and the content written is also under the attacker’s control, so this
is an arbitrary file-writing vulnerability. However, the controller is part of the admin
module, which needs to determine whether there is a permission control first, and the
audit found that the interface inherits the controller (see Fig. 10.29) without any
permission restriction, so it can be called directly. However, after constructing and
sending the message, it displays the contents shown in Fig. 10.30.
The cause of the error is the pseudo static route setting of ThinkPHP framework,
which can be determined by the URL of the arbitrary file download vulnerability. As
pe isanbau snou e Sussoond s! SdHduu J! uogoas snoraand s u pououa
finds that the operation is statically routed, it needs to access the operation via a static
route, otherwise an error will be thrown, so we need to download route.php to find
the static route configurations. The corresponding path is /config/route.php , and the
content of the route.php is as follows.
Shandler = opendir (CoNF_PATH. *router′) ;
while ( (Sfilename = readdir (Shandler) ) 1 == false) {
Sfiles = [] ;
if (pathinfo (Sfilename, PATHINFO_EXTENSION) ==′php′) {
Sfiles [] = *route* .DS str_replace (EXT, **, Sfilename) ;
”
return Stiles;
---
## Page 689
10.1 PHP Code Auditing
677
2819-4028T38:56:4)-8:00 1 182.568.1.23 182.568.1.1 0T /a
ror 18e of dined ct ,,8
用：2,2.52[交用加：118]
Fig, 10.31 Log
Its function is to iterate through the PHP files in the config/route directory where
the real static routes are defined. Since the names of these files are not known, it is
not possible to get the static route definitions. The ThinkPHP framework usually has
some log files, located in the runtime directory, which may contain some paths or
related content. ThinkPHP default log files are named after the time, and by
traversing the date, we successfully downloaded more than 100 logs, but after filter
the content of the logs, we could not find any logs about base64 data uploading
functions. We only managed to find a few modules and controllers, but after auditing
by downloading the corresponding modules and controllers, we still can't find a way
to hack into the website. Since only the URL and file path are extracted through file
content filtering, some of the information may have been missed, so I tried to analyze
the log files manually, and then the content of one of the log files caught my
attention, see Fig. 10.31.
The reason for the error is that an undefined constant is present when the exec( )
function is executed in Hook.php. But when will the exec( ) function in Hook.php be
called? This involves the ThinkPHP framework’s Behavior extensions. According to
the error report, the site has a custom Behavior, and based on the string of constants,
it is inferred that the feature is related to logging. The logging feature usually has
write operations and other operations, so we can try to auditing corresponding source
code file to find any vulnerabilities inside. Usually, developers do bulk registration in
tags.php, which is easier and faster, so the constructed path is /config/tags.php, and
we managed to find the source code of the Behavior definition, the content of which
is shown in Fig. 10.32, and we can see that the site has four customized Behavior
classes: ConfigBehavior, SqIBehavior, LogBehavior, and NGBehavior.
Continue to construct the download path of the file through the above namespace
to get the code for these 4 classes. The code auditing found that ConfigBehavior's
function is to initialize the configuration and has no sensitive operations,
s  q ss  o on sos s r
ments are not controllable. The NGBehavior class is used to send the error logs to the
cloud platform, and there was no sensitive information either. But there is a
vulnerability in LogBehavior, the code is as follows.
class LogBehavior {
public function run (sScontent) 
SaveSqlMiddle: : insertRecordToDatabase () ;
FileLogerMiddle : : write () :
Ssiteid = \think\,Request ::inatance () ->header (′siteid) ;
if ($siteid){
she11_exec ("php recordlog·php [$siteid) >/dev/null 2>&1 &) ;
---
## Page 690
678
10 Code Auditing
Fig, 10.32 php code
pp_init'
"app\\com
on\\behavior\ConfigBehavior
behavior\\SqtBehavior
//模块初始化
//操作开始执行
module_init'
>1
action_begin
n>[1
//视图内容过滤
//日志写入
view_fitter'
n>[1,
log_write
>[1，
/响应结束
response_end'
app\1com
appl1com
1
The implementation of the class is very simple: take the siteid header from the
request header and splice the value into the command to be executed, so obvious a
command execution vulnerability.
So how can the vulnerability be triggered? Since the LogBehavior class is bound
to response_end, which is a tag that comes with the ThinkPHP framework itself, so
we need to know what these tags stands for in advance. All the builtin tags within
ThinkPHP are defined as follows
app_init: application initialization tag.
app_begin: application start ta.
module_init: module initialization tag.
•action_begin: the controller start tag.
view_filter: the filter bit of the view output.
app_end: application end tag.
+ log_write: Log write method tag.
log_write_done: log write completion tag (V5.0.10+).
▪response_send: response send begin tag (V5.0.10+).
▪response_end: response send end tag (V5.0.1+).
onse, so there is no restriction on the execution of the command. What we need to do
now is to set the siteid header in the request and insert the command to be executed.
That's all about case one, from the arbitrary file download vulnerability to the
final the remote command execution vulnerability, I omitting some snippets of some
---
## Page 691
10.1 PHP Code Auditing
669
less useful code auditing (which is actually the most time-consuming). In an actual
code auditing, we need to go through the code patiently and carefully, track down to
every suspicious point, and make sure to be familiar enough with the relevant
jsaqesuna Agenb dn Sip o sxosoue
2. CTF Real Questions
There is a classic code auditing challenge in the Huwangbei 2018, the source code
for
which
isalready
open
:aomos
https://github.com/sco4x0/
huwangbei2018_easy_laravel. During the competition, hint information can be
found inside the HTML source code: https:/github.com/qqqqqqvq/easy_laravel,
you can download part of the code directly, it is not difficult to find that the challenge
is based on Laravel framework by auditing the code. The following code tells us how
a administrator’s account is generated;
Sfactory->define (App^User: :elass, funetion (Faker\Generator Sfaker) (
static Spassword;
return ['nane*
eAg nnn,  *admin@qvq. im',
password ' => bcxypt (stz_random (40) ) ,
member_token′ => str_random (1o) 1 ;
It is not difficult to find that the administrator’s email address is admin @qvq.im
and the password is a random 40-byte string that cannot be burst.
Then look at the routing file.
Route: :get (/', function () {return view(welcome') : 1 ;
Auth: :zoutes () ;
Route : :get ( /home′,HomeControllez@index′) ;
Route: :get (/note' , 'NoteControllez@index') - >name [ 'note′) ;
Route: :get (/upload', *UploadContro1lexaindex') ->name (*up1oad′) ;
Route: : post (↓ /upload', UploadContro1ler@upload°) - >name (upload′) ;
Route: :get (+/flag′ , FlagContro1lez@shovFlag′) ->name (*flag′) ;
Route: :get (1/files', *UploadContro1lezafiles*) ->name (*files*) ;
Route: : post (↓ /check' , UploadContzo1ler@check′) ->name [*check) ;
Route: :get (′/error′, 'HomeController@error′) - >name [′error′) ;
‘soaud s, aoensuue annbau 1,usaop soouoao o uo e puno s! 1
and the corresponding route is °/note”. The source code is as follows:
public function index (Note Snote) {
Susezname = Auth: :user () ->nane ;
Snotes = DB : :select ("SELECT + FROM *notes' NHERE 'author′=1
{Susernane}'*) ;
return viev('note’, compact ('notes′11 ;
---
## Page 692
089
10 Code Auditing
Fig, 10.33 Use injection to get the token
Fig, 10.34 Change pass page
It is easy to see that the SQL statement is not filtered, and there is obviously an
SQL injection vulnerability, so we can get anything in the database, even if we get
the password, because it is encrypted and cannot be cracked.
php art isan make :auth
But in Laravel’s official auth extension, in addition to the registration login, there
is also a password reset function, and its password_resets token to reset the password
is stored in the database, so using the SQL injection vulnerability in NoteController,
you can get the password_resets token to reset the administrator password.
The specific operation process is as follows: enter the axdministrator email
admin @qvq.im and click the reset password button, then the password_resets in
the database will be updated with a new token, after which the token will be used as
the credentials to call the /password/reset/token interface to reset administrator’s
password. Firstly we can use injection to get the token, see Fig. 10.33. Then we can
change the password, see Fig. 10.34.
Log in to the backend, visit http:/49.4.78.51:32310/flag, It doesn’t retum any
flag. So we need to dig into the FlagController.
public function showFlag() {
Sflag =file_get_contents (*/th1s1s_F14g_2333333 ′) ;
return viev(' auth.flag') ->with ( fiag' , Sflag) :
---
## Page 693
10.1 PHP Code Auditing
681
The blade template renders significantly differently than what you see. If you
were familiar with Laravel development, you may have encountered this problem:
"The page doesn’t show up even though the blade template is updated°. This is
caused by Laravel's template cache. So the next step is to remove the flag*s template
cache, the name of the cache file is automatically generated by Laravel. Here’s how
it’s generated.
/*
* Get the path to the compiled version of a view.
* sparan string Spath
▪ greturn string
public function getCompiledPath($path) {
return Sthis->cachePath. 1/ ' sha1 ($path) - * .php′ ;
So now we need to delete the bladed cache, but the logic of the whole challenge is
very simple, there is no other file manipulation anywhere other than the
UploadController controller can upload images. However, there is one method that
has caught my interest.
public function check (Request Srequest) (
Spath = $request - >input ( *path*, Sthia->path) ;
Sfilename = Sreguest ->input (*filename', nu11) ;
if (Sfilenane)(
if (Ifile_exists (Spath . Sfilename)) (
Flash: :error ( *The disk file has been deleted, refresh the file
1ist') ;
else {
Flash: :success ('File valid′) ;
return redirect (router (*files′ ) ;
Path and filename are not filtered, so we can use file_exists to manipulate the phar
files, which obviously has a deserialization vulnerability, so now the idea is clear:
phar deserialization  file manipulation delete or remove  laravel re-render blade
→ read flag.
By looking at the components introduced by composer, I found that they are all
default components. So I tried to search throught all the files for °unlink? and found
that
the
unlink(
Swift_ByteStream_TemporaryFileByteStream destructor to delete any file, see
）
exists
II
the
Fig. 10.35.
The construction of the specific pop chain is not repeated here,the exploit code is
as follows.
---
## Page 694
682
10  Code Auditing
struett)
if（file_exists(sthis-)
betPothO))
efnlink(sthis->getPathO);
Fig, 10.35 Find unlink
class Svift_ByteStream_Abs
dud >
ctFilterableInputStrean (
/++
+ Hrite sequence.
protected Ssequence = 0;
* * /
/++
+ StreamFilters.
▪ gvar Swift_StreamFilter []
private Sfilters = [1 :
** /
/++
* A buffer for writing.
private SuriteButfer - **;
* * /
/ ++
• svar Swift_InputByteStrean [1
* Bound streams.
private Smirrors = [1 :
** /
class Svift_ByteStream_FileByteStrean extends Svift_ByteStrean_
AbstractFilterableInputStrean 
 // The internal pointer offset
private S_offset = 0;
/ / The path to the file