cannot be writable and executable at the same time. Hence,
it sufÔ¨Åces to check branch targets that can be changed dur-
ing runtime as they depend on the value of a variable. These
include indirect branches and returns from function calls,
as they use an address popped from a potentially tampered
stack. As we check each such instruction, an adversary
cannot subvert the control-Ô¨Çow without MoCFI noticing it.
However, not all valid, known-good targets can be calcu-
lated in advance during the static analysis phase. If this is
not the case, we need to apply heuristics to hinder (or at
least minimize) their impact. Fortunately, for the major-
ity of tested applications, the indirect branches are used in
conjunction with jump tables (see Section 5.1), and can be
resolved during the static analysis phase. Moreover, our
static tools could be extended by enhanced backtracking
techniques to limit the set of possible branch targets. How-
ever, the design of sophisticated static tools is not within the
12345678910410430450470490510530n-th CFI check for Objective C MsgSend time [ns] Cache MissesWithout CacheWith CacheNo ChecksCache HitsFigure 6. Gensystek Lite Benchmarks
As already mentioned in Section 5, MoCFI does cur-
rently not protect shared libraries, which an adversary may
exploit to launch a control-Ô¨Çow attack. However, extend-
ing MoCFI accordingly is straightforward, because we al-
ready overcame the conceptional obstacles. Note that Apple
also explicitly discourages developers to employ shared li-
braries. Hence, all loaded libraries are typically from the
operating system and Objective C frameworks.
Consequently, we currently disable the return check if
an external library calls a function that resides in the main
application. Therefore, MoCFI registers when execution is
redirected to a library and disables the return address check
for functions that are directly invoked by the shared library.
However, note that this can be easily Ô¨Åxed by either ap-
plying our trampoline approach to function prologues (i.e.,
pushing the return address on the shadow stack at function
entry) or by applying MoCFI to shared libraries.
7. Evaluation
In order to evaluate the performance of MoCFI, we ap-
plied it to an iOS benchmark tool (called Gensystek Lite2),
applied it to a full-recursive own developed quicksort al-
gorithm, and performed micro benchmarks to measure the
overhead for each type of branch. As we described in Sec-
tion 6, we apply MoCFI to the main application code, and
not to the libraries. However, the benchmark tools we apply
perform most part of the computation within the applica-
tion.
Figure 6 shows the results for the Gensystek Lite ap-
plication, where the slowdown factor for each individual
benchmark is shown at bottom of the x-axis. Remarkably,
the FPU/ALU, PI calculation, and the RAM (memory read-
/write) benchmarks add the highest overhead. However,
their slowdown is still reasonable (3.85x and 5x, respec-
tively) considering that FPU/ALU and PI calculations are
computationally intensive tasks. The overhead (slowdown
greater than factor 1) for the remaining benchmarks is very
low and ranges between 1% to 21%.
2http://www.ooparts-universe.com/apps/app_
gensystek.html
n
100
1000
10000
Without MoCFI With MoCFI
0.047 ms
0.473 ms
6.725 ms
0.432 ms
6.186 ms
81.163 ms
Table 1. Quicksort
Figure 7. Overhead for each branch type
In order to approximate an upper boundary for perfor-
mance penalties, we evaluated MoCFI by running a quick-
sort algorithm. Our implemented algorithm makes use of
recursion and continuously calls a compare function which
consists of only 4 instructions and one return. Therefore,
MoCFI frequently performs a control-Ô¨Çow check in this
worst-case scenario. Nevertheless it performs quite well
and needs 81ms for n = 10, 000 (see Table 1).
In order to evaluate the overhead of an instruction that
has been replaced by a CFI check, we measured the exe-
cution time of three typical instructions and their replace-
ment by MoCFI (see Figure 7). The calculation of the over-
head per replaced instruction is depicted in Figure 8. For
the exemplary case of Function Calls and Returns, the ac-
Figure 8. Overhead calculation
020406080100FPU/ALUPI CalcMD5 CalcScrShotRAMDiskQuartz2DResizeIMGTrans3D4,873,851,191,025,001,211,031,011,09Time in Seconds Benchmarks and Slowdown Factor with MoCFIwithout MoCFI 5,62     7,45     1,22    012345678910Objective CMsgSendFunction Call &ReturnIndirect JumpWithout MoCFIWith MoCFICall Enter Return ùõΩ ùõº n
œà (Indirect Jump)
œà (Func. C. & R.)
œà (ObjC MsgSend)
100
500
50
2.4% 1.2% 0.2%
14.6% 7.4% 1.5%
11.0% 5.6% 1.1%
Table 2. Total overhead œà
Figure 9. Average overhead
tual function bodies (Œ±) are subtracted from the time mea-
surement between call and return (Œ≤). The actual execution
time is therefore Œ≤ ‚àí Œ±. When running with MoCFI, the
measurements (Œ±(cid:48) and Œ≤(cid:48), respectively) are set in relation
to the measurement without MoCFI. Hence, the instruction
slowdown factor œï for one function replaced by MoCFI is
œï = Œ≤(cid:48)‚àíŒ±(cid:48)
Œ≤‚àíŒ± . For our tests, all the measurements have been
conducted 10, 000 times and averaged. However, in a typi-
cal program, instructions that have to be checked by MoCFI
are surrounded by other instructions. For n instructions in
between, MoCFI only has to be called every (n + 1)-th in-
struction. The total slowdown œà is therefore œà = n+œï
n+1 .
The overhead (œà ‚àí 1) as a function of n (instructions be-
tween CFI checks) is plotted in Figure 9. An exemplary
table with exact values resulting from of n = 50, n = 100
and n = 500 instructions between CFI checks is depicted
in Table 2.
Moreover, we applied MoCFI to several popular iOS ap-
plications, among others Facebook, Minesweeper, TexasH-
oldem, and Gowalla. Our experiments showed that MoCFI
does not induce any notable overhead while the applications
execute. Further, MoCFI induces an acceptable overhead
at load-time: e.g., for the Facebook application (code size
2.3MB; 33,647 calls; 5,988 returns; 20 indirect jumps) and
TexasHoldem (2.8MB; 62,576 calls; 4,864 returns; 1 indi-
rect jump) our rewriting engine required less than half a sec-
ond to rewrite the entire application.
On the other hand, our tests on iOS applications revealed
that MoCFI raises certain false positives. A remarkable
false positive occurs for large jump tables: For theses cases,
the compiler calls dedicated switch functions that calculate
the address to be used as jump target, where the particular
function call is realized via a BLX instruction. However,
these switch functions never return; instead they use the
value of lr (loaded via BLX) as base pointer to the jump
table, and use an indirect jump after the target has been cal-
culated (i.e, a return to the initial call is missing). In order
to avoid this false positive, MoCFI could be extended if the
bytes succeeding the BLX are belonging to a jump table.
If so, MoCFI could enforce a different check in the switch
functions: rather than checking the return address, we check
if the last indirect jump of the switch function targets an ad-
dress that is used in the jump table. We aim to integrate
additional handling of exceptional cases in our future. In
general, one can apply similar policies as mentioned above,
or exception handling rules as discussed in [16].
Mitigating Advanced Attacks.
In order to demonstrate
that MoCFI detects advanced attacks that hijack the control-
Ô¨Çow of an application, we adopted a return-oriented pro-
gramming (ROP) attack presented by Iozzo et al. [25] (de-
veloped for iOS v2.2.1) to iOS v4.3.1 and extended it in
such a way that it bypasses memory randomization on iOS.
SpeciÔ¨Åcally, our sample attack exploits a buffer overÔ¨Çow
vulnerability and forces the device to beep and vibrate.
When protecting the vulnerable application with MoCFI,
the attack fails and we successfully prevent an exploitation
attempt. We implemented the exploit and used techniques
similar to GOT dereferencing [45, 22] to bypass ASLR on
iOS. Since constructing iOS exploits is not the main ob-
jective of this paper, we refer the interested reader to Ap-
pendix B where we describe our vulnerable program and
the payload we used.
8. Related Work
Control-Ô¨Çow (runtime) attacks are a prevalent attack vec-
tor since about two decades and a lot of research has been
performed to either exploit such vulnerabilities or to Ô¨Ånd
ways to protect against them. In the following, we focus on
defense strategies to prevent control-Ô¨Çow attacks and dis-
cuss how previous works relates to the approach presented
in this paper.
Control-Flow Integrity. The basic principle of monitor-
ing the control-Ô¨Çow of an application in order to enforce a
speciÔ¨Åc security policy has been introduced by Kiriansky
et al. in their seminal work on program shepherding [29].
This technique allows arbitrary restrictions to be placed on
control transfers and code origins, and the authors showed
how such an approach can be used to conÔ¨Åne a given ap-
plication. A more Ô¨Åne-grained analysis was presented by
Abadi et al., who proposed Control Flow Integrity enforce-
ment [1]. We use CFI as the basic technique and show that
this principle can be applied on the ARM processor archi-
tecture to protect smartphones against control-Ô¨Çow attacks.
0%5%10%15%20%25%30%35%40%0100200300400500Overhead [%] Every n-th Instruction Objective C MsgSendFunction Call & ReturnIndirect JumpSeveral architectural differences and peculiarities of mobile
operating systems complicate our approach and we had to
overcome several obstacles. XFI [2] is an extension to CFI
that adds further integrity constraints for example on mem-
ory and the stack at the cost of a higher performance over-
head. The current prototype of MoCFI does not implement
these additional constraints, but our framework could be ex-
tended in the future to also support such constraints.
In contrast to the original CFI work and our MoCFI,
Write Integrity Testing (WIT) [3] also detects non-control-
data attacks. This is achieved by interprocedural points-to
analysis which outputs the CFG and computes the set of ob-
jects that can be written by each instruction in the program.
Based on the result of the points-to analysis, WIT assigns
a color to each object and each write instruction. WIT en-
forces write-integrity by only allowing the write operation
if the originating instruction and the target object share the
same color. As a second line of defense, it also enforces CFI
to check if an indirect call targets a valid execution path in
the CFG. However, WIT does not prevent return-oriented
attacks, because it does not check function returns. More-
over, it requires access to source code. In contrast, MoCFI
can protect an application against advanced attacks and our
tool works directly on the binary level.
HyperSafe [42] protects x86 hypervisors by enforcing
hypervisor code integrity and CFI. Similar to MoCFI, it
instruments indirect branch instructions to validate if their
branch target follows a valid execution path in the CFG.
However, HyperSafe only validates if the return address is
within a set of possible return addresses which has been cal-
culated ofÔ¨Çine. In contrast to HyperSafe, MoCFI enforces
Ô¨Åne-grained return address checks, and does not require
source code. Moreover, the dynamic nature of smartphone
applications, prevents us from calculating return addresses
ofÔ¨Çine.
Native Client (NaCl) [46, 36] provides a sandbox for un-
trusted native code in web browsers.
In particular, NaCl
enforces software fault isolation (SFI [41]) and constraints
branches to an aligned address. However, this still allows
an adversary to subvert the control-Ô¨Çow (as long as the
target address is aligned). Moreover, NaCl does not sup-
port THUMB code (which is main instruction set on smart-
phones) and requires recompilation of applications as well.
In a very recent work Zeng et al. [47] showed that
CFI combined with static analysis enables the enforcement
of efÔ¨Åcient data sandboxing.
In particular, the presented
scheme provides conÔ¨Ådentiality of critical memory regions
by constraining memory reads to uncritical data regions.
This is achieved by placing guard zones before and after
the uncritical data area. The solution has been implemented
in the LLVM compiler infrastructure (similar to the NaCl
compiler [46, 36]) and targets the Intel x86 platform.
Orthogonal Defenses. Many techniques to detect or pre-
vent control-Ô¨Çow attacks have been proposed in the last few
years such as for example stack canaries [15], return ad-
dress stacks [12, 21], and pointer encryption [14]. Such
techniques are orthogonal to CFI and focus on speciÔ¨Åc as-
pects of exploits. As a result, an attacker might Ô¨Ånd novel
ways to bypass them in order to exploit a given vulnerabil-
ity.
9. Conclusion and Future Work
In this paper, we focus on the problem of mitigating run-
time attacks on modern smartphone platforms. This class
of attacks on software is still one of the major threats we
need to deal with and we recently saw several runtime at-
tacks against smartphones. We showed how the principle
of control-Ô¨Çow integrity (CFI) enforcement can be applied
on the ARM platform. Our solution tackles several unique
challenges of ARM and smartphones operating systems,
which we discussed in detail. We solved all challenges and
implemented a complete CFI enforcement framework for
Apple iOS. Our evaluation shows that we can successfully
mitigate even advanced attacks. Moreover, our performance
measurements show that MoCFI is efÔ¨Åcient:
it performs
well in worst-case scenarios (e.g., computationally inten-
sive algorithms such as quicksort) and does not induce any
notable performance overhead when applied to popular iOS
applications.
Our current prototype implementation protects the main
application binary against control-Ô¨Çow attacks. Therefore,
we aim to apply MoCFI to shared iOS libraries in our fu-
ture work, which should be straightforward since there are
no conceptional obstacles to overcome. Besides working
on a formal analysis along the lines of the original CFI pro-
posal [1], we are currently investigating the possibility of
runtime attestation (a trusted computing mechanism to at-
test the software state of remote platforms) and enhanced
application sandboxing based on CFI enforcement.
Acknowledgments
This work has been supported by the Ministry of Eco-
nomic Affairs and Energy of the State of North Rhine-
Westphalia (grant 315-43-02/2-005-WFBO-009), the Fed-
eral Ministry of Education and Research (grant 01BY1020
MobWorm),
and by the European Union‚Äôs Seventh
Framework Programme (FP7/2007-2013) under grant
agreement n‚ó¶257243 (TClouds project: http:/www.
tclouds-project.eu). This work was also partially
supported by the ONR under grant N000140911042 and by
the National Science Foundation (NSF) under grants CNS-
0845559, CNS-0905537, and CNS-0716095.
References
[1] M. Abadi, M. Budiu, U. Erlingsson, and J. Ligatti. Control-