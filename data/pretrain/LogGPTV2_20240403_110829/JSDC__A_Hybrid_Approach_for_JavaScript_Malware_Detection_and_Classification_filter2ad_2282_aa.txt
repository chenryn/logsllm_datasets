title:JSDC: A Hybrid Approach for JavaScript Malware Detection and Classification
author:Junjie Wang and
Yinxing Xue and
Yang Liu and
Tian Huat Tan
JSDC: A Hybrid Approach for JavaScript Malware
Detection and Classiﬁcation
Junjie Wang† Yinxing Xue† Yang Liu† Tian Huat Tan‡
†Nanyang Technological University
‡Singapore University of Technology and Design
ABSTRACT
Malicious JavaScript is one of the biggest threats in cyber
security. Existing research and anti-virus products mainly
focus on detection of JavaScript malware rather than classi-
ﬁcation. Usually, the detection will simply report the mal-
ware family name without elaborating details about attacks
conducted by the malware. Worse yet, the reported fam-
ily name may diﬀer from one tool to another due to the
diﬀerent naming conventions. In this paper, we propose a
hybrid approach to perform JavaScript malware detection
and classiﬁcation in an accurate and eﬃcient way, which
could not only explain the attack model but also potentially
discover new malware variants and new vulnerabilities. Our
approach starts with machine learning techniques to detect
JavaScript malware using predicative features of textual in-
formation, program structures and risky function calls. For
the detected malware, we classify them into eight known
attack types according to their attack feature vector or dy-
namic execution traces by using machine learning and dy-
namic program analysis respectively. We implement our ap-
proach in a tool named JSDC, and conduct large-scale evalu-
ations to show its eﬀectiveness. The controlled experiments
(with 942 malware) show that JSDC gives low false positive
rate (0.2123%) and low false negative rate (0.8492%), com-
pared with other tools. We further apply JSDC on 1,400,000
real-world JavaScript with over 1,500 malware reported, for
which many anti-virus tools failed. Lastly, JSDC can eﬀec-
tively and accurately classify these detected malwares into
either attack types.
1.
INTRODUCTION
JavaScript is a widely-used client-side scripting language
that provides active and dynamic content on the Internet.
According to Microsoft’s recent security report (Figure 81
in [12]), the prevalence of JavaScript leads to the largest
number of malware detected by Microsoft in the ﬁrst half
year of 2013. Most of users typically rely on signature-based
anti-virus products to detect malware. However, signature-
Permission to make digital or hard copies of all or part of this work for personal or
classroom use is granted without fee provided that copies are not made or distributed
for proﬁt or commercial advantage and that copies bear this notice and the full cita-
tion on the ﬁrst page. Copyrights for components of this work owned by others than
ACM must be honored. Abstracting with credit is permitted. To copy otherwise, or re-
publish, to post on servers or to redistribute to lists, requires prior speciﬁc permission
and/or a fee. Request permissions from permissions@acm.org.
ASIA CCS’15, April 14–17, 2015, Singapore..
Copyright c(cid:13) 2015 ACM 978-1-4503-3245-3/15/04 ...$15.00.
http://dx.doi.org/10.1145/2714576.2714620.
based detection is not accurate, as it is neither resistant to
obfuscation nor applicable to evolving variants of the same
malware.
Detection of malicious JavaScript code can be classiﬁed
into two lines: dynamic approaches and static approaches.
Dynamic approaches are mostly based on low-interaction
honey clients [25] and high-interaction honey clients [37, 34].
The problem of using honey client lies in the diﬃculty of set-
ting up a virtual environment that captures the exploitations
of all possible plug-ins. Most importantly, honey clients are
extremely resource intensive, and it is not aﬀordable to scan
millions of scripts. Static approaches mainly adopt machine
learning techniques to capture characteristics of malicious
scripts. Most of them use obfuscated text information ([16,
27]), syntax information (e.g., AST [18, 26]) or (partial) dy-
namic information (e.g., API call [17, 33]) as the predicative
features for classifying malicious and benign code.
Static and dynamic approaches both have merits and draw-
backs. Dynamic approaches are eﬀective, but not scalable.
They are usually designed for speciﬁc attack types, not for
general malware detection. Static approaches based on ma-
chine learning techniques or program similarity analysis are
eﬃcient, but with high false negative ratio. Besides, machine
learning based detection can neither be used to model attack
behaviors nor identify new attacks from emerging malware.
To our best knowledge, none of the aforementioned tools
go beyond the mere detection of JavaScript malware. To-
wards an insightful summary and analysis of malware evo-
lution trend, it is desirable to detect malware and further
classify them according to the exploited attack vector and
the corresponding attack behaviors. Considering the emer-
gence of numerous new malware or their variants, knowing
the attack type and the attack vector will greatly help do-
main experts for further analysis. Such an automated classi-
ﬁcation can signiﬁcantly speed up the overall response to the
malware and even shorten the time to discover the zero-day
attacks or unknown vulnerabilities.
In this paper, we propose an automatic approach to per-
form JavaScript malware detection and classiﬁcation by com-
bining static analysis (via machine learning) and dynamic
analysis to achieve both scalability and accuracy. To eﬃ-
ciently detect and classify malware, we propose a two-phase
classiﬁcation. The ﬁrst phase is to classify malicious Java-
Script samples from benign ones, while the second phase is
to discover the attack type that a malicious script belongs
to. In the ﬁrst phase, we extract and analyze features that
are generally predictive for malicious scripts. To address the
obfuscation and dynamic code generation problems, we ex-
109tend HtmlUnit [1] to obtain the ﬁnal unpacked code. We
extract features from document elements, source code and
sensitive function call patterns. In the second phase, we fo-
cus on the features that are representative and unique for
each attack type. To identify unique features relevant to
a certain attack type, the inter-script analysis is adopted
to ﬁnd API usage patterns, which can serve as features of
diﬀerent attack types. For the suspicious candidates that
fall into grey zone (uncertain in classiﬁcation), we adopt the
dynamic analysis to unveil the practical behaviors of the at-
tack and match it to existing attack behavior models. For
dynamic analysis, we instrument Firefox to capture the at-
tack behaviors of malicious code. Holistically, static analysis
assures the scalability while dynamic analysis on uncertain
scripts improves the accuracy.
To sum up, this paper makes the following contributions:
• We propose an eﬀective machine learning approach for
JavaScript malware detection with predictive features
like commenting style based on textual analysis and
the feature of function calls with security risks based
program analysis.
• We propose a combined approach for JavaScript mal-
ware classiﬁcation by ﬁrstly using the machine learn-
ing approach with predictive features like function call
patterns and the times of external references, and then
further improving the accuracy using dynamic pro-
gram analysis. Our approach achieves the scalability
and accuracy.
• We develop the semantic models of the eight known
JavaScript attacks in the form of Deterministic Finite
Automata, which can not only help to explain the at-
tack behavior, but also discover new malware variants
and new vulnerabilities if the attack does not fall into
any of the eight attack models.
• We implement out approach in a complete toolset and
evaluate it using 20,000 web sites with 1,400,000 scripts.
The result shows that our approach beats most main-
stream anti-virus tools, with high accuracy and promis-
ing performance.
2.
JAVASCRIPT MALWARE CATEGORIZA-
TION
Computer Antivirus Research Organization gives each new
discovered JavaScript malware a unique family name for
identiﬁcation, e.g., TrojWare.JS.Agent.G. Some organiza-
tions adopt it while others may have their own naming con-
ventions. Thus, classiﬁcation information provided by dif-
ferent organizations are neither congruent nor accurate to
describe the attacks that the malware can launch. Besides,
family-based classiﬁcation provides no hints on the vulner-
ability exploited by the malware. A meaningful classiﬁca-
tion according to the vulnerability and the corresponding
exploits is critical, especially for identifying new attacks.
Such classiﬁcation should be based on attack behaviors of
the malware that exploit the vulnerability.
In accordance with Kaspersky Security Bulletin Overall
Statistics 2013 [8], attacks targeting JRE, Adobe Acrobat
Reader, browser, Adobe Flash and so on account up more
than 95% of attacks launched by JavaScript code. Attack
vector could be a good standard to classiﬁcation, since it
indicates location of vulnerability and the same type shares
similar behavior pattern. We list the eight most common
JavaScript attack types according to attack vectors as fol-
lows.
• Type I: Attack targeting browser vulnerabilities. This
type of attack targets potential vulnerabilities (like
CVE-2014-1567) of a browser of certain version or with
certain plug-ins, and then exploits such vulnerabilities
to trigger memory corruption. Consequently, it will
lead to the malicious control of instruction registers.
• Type II: Browser hijacking attack. Browser hijacking is
the modiﬁcation of a web browser’s settings performed
without the user’s permission. A browser hijacker may
replace the existing home page, error page, or search
page with its own. For instance, CVE-2007-2378 in the
Google Web Toolkit (GWT) framework is a JavaScript
hijacking attack, which illegally tracks personal data.
• Type III: Attack targeting Adobe Flash. ActionScript
used in Adobe Flash and Adobe Air has a ﬂaw of al-
lowing chunks allocation in the heap. An exploit page
uses vulnerabilities like CVE-2012-1535 to manipulate
the heap layout, which induces heap spray attacks. Fi-
nally, the memory corruption results in running a ROP
(Return Oriented Programming) chain.
• Type IV: Attack targeting JRE. Attacks take advan-
tage of vulnerabilities in Oracle’s J2SE JDK and JRE.
The JVM security depends on the byte code veriﬁer,
the class loader, and the security manager. For in-
stance, the vulnerability in Java 7 Update 11 (CVE-
2013-1489) allows attackers to bypass all security mech-
anisms in the Java browser plug-in.
• Type V: Attack based on multimedia. Attacks are car-
ried by multimedia ﬁles or ﬁles in other format sup-
ported by browsers, e.g., CSS based attacks. Gen-
erally, malicious downloadable resources (e.g., image
and font ﬁles) can be deliberately designed to exploit
vulnerabilities like CVE-2008-5506 to consume the net-
work capacity of visitors, launch CSRF attacks, spy on
visitors or run distributed denial-of-service (DDoS).
• Type VI: Attack targeting Adobe PDF reader. Vulner-
ability in Adobe Reader is being used by active attacks
targeting individuals with malicious PDF ﬁles. For ex-
ample, vulnerabilities like CVE-2011-2462 could cause
a crash and potentially allow an attacker to take con-
trol of the aﬀected system.
• Type VII: Malicious redirecting attack. Cybercrimi-
nals are constantly thinking up new ways to redirect
unsuspecting visitors to their drive-by landing page. It
includes “Meta Refresh redirecting”, “JavaScript Redi-
rect”, “CSS redirecting”, “OnError redirecting” and so
on. This attack type is generally based on CWE-601.
• Type VIII: Attack based on Web attack toolkits, e.g.
Blacole. Attack toolkits are increasingly available to
an unskilled black market that is eager to participate in
the speedy spread of malware. According to a recent
report [2], Symantec reported that 61% of observed
web-based threat activity could be directly attributed
to attack kits.
Each attack type aims at representing a unique attack be-
havior that exploits a certain attack vector or share some
certain event routine, e.g., attack type III, IV , V and VI
110scan the vulnerabilities in diﬀerent origins. The above classi-
ﬁcation is at a more general concept level than family-based
classiﬁcation. For example, the popular malware family Tro-
jan.JS.Blacole belongs to the attack type VIII, while the
family Trojan.JS.Iframe is a malware of type VII. However,
compared with the general term of attack type like heap
spray attack [32], our classiﬁcation is more speciﬁc as we
consider attack vector of a heap spray. A heap spray attack
can be an attack of type III, IV or V.
3. SYSTEM OVERVIEW OF JSDC
In this section, we sketch the overall workﬂow of our two-
phase approach: JSDC, as depicted in Figure 1. The ﬁrst
phase is to identify the malicious (including highly suspi-
cious) JavaScript snippets. Given malicious JavaScript snip-
pets, the second phase is to further classify them according
to their attack type. Thus, the classiﬁcation process is ap-
plied twice, based on the features for malware detection and
attack type classiﬁcation. For the second classiﬁcation, if
there still exist any suspicious fragments that fall into the
grey zone (the probability of a script being a certain attack
type is non-dominant), dynamic conﬁrmation is applied to
execute this script and to capture its execution trace for
further analysis.
We use the crawler Heritrix [29], to download web pages
for detection. After Heritrix downloads a complete web page
with HTML and JavaScript, we extract both internal and
external JavaScript snippets. For the ease of feature extrac-
tion based on program information, we use HtmlUnit [1],
a GUI-Less emulator of a full browser environment, which
has fairly good JavaScript support, to obtain the unpacked
code (e.g., the code dynamically generated during execu-
tion). Once we address the problem of obfuscation and dy-
namic code generation, we extract features from the source
code and AST of the ﬁnal unpacked code. Note that Htm-
lUnit is just used to parse and interpret the JavaScript code,
without doing the actual rendering job. Thus, this step is
regarded as mostly-static analysis [18].
With the training set of representative malicious and be-
nign samples, we propose features that are predictive of ma-
licious or benign intent (see Section 4). Firstly, textual fea-
tures of the code are extracted based on textual analysis—
word size, n-gram model, frequency of characters, comment-
ing style, and entropy are extracted. After textual features
are extracted, we use HtmlUnit to obtain the unpacked code,
from which features about the program information can be
extracted. The program information includes HTML prop-
erties and Document Object Model (DOM) operations, and
the API usage patterns (i.e., patterns of function calls) in
the JavaScript snippet. In addition, we also extract AST-
based features, e.g., the tree depth, the pair of type and text
from some AST nodes [18]. All these non-textual features
are extracted to characterize the malicious behaviors.
To further distinguish eight diﬀerent types of attacks, we
reuse part of features about the program information for
detection. Besides, we propose new features based on the
vulnerability exploits or attack behaviors of diﬀerent attack
types. We identify the frequently used functions in diﬀerent
attack types. By considering parameters of these functions,
we derive the features based on the pair of function and its
parameters type. Additionally, features on the API usage
patterns and inter-script references are also used.
Figure 1: The work-ﬂow of JSDC
Before the actual application of our approach in detec-
tion, we need to train the classiﬁers for predication. We
have trained and evaluated each of the used classiﬁers using
k-fold cross validation (CV). The usage of CV is mainly in
settings where our goal is prediction, and we aim to estimate
the accuracy of a predictive model for malware detection and
classiﬁcation. For the ﬁrst classiﬁer for malware detection,
the training set includes both benign and malicious Java-
Script snippets, and each snippet is labelled as malicious or
benign. For the second classiﬁer for malware classiﬁcation
according to attack type, the training set only includes ma-
licious snippets and each of them is labelled with a known
attack type.
During the process of classifying malicious scripts into dif-
ferent attack types, there are some uncertain results that fall
into the grey zone (the classiﬁcation results show that the
probability of a script being a certain attack type is not
signiﬁcantly diﬀerent from that of being others). This indi-
cates that such scripts are not really similar to any existing
malicious samples. For those uncertain ones, a further dy-
namic analysis is required to execute them and to capture
their execution traces at runtime. We have some predeﬁned
or learned behaviour models from execution traces of the
existing types of attack. More details on inferring attack
models in DFAs and checking malware candidate with these
models can be found in Section 5.
4. DETAILS OF FEATURE EXTRACTION
JavaScript owns dynamic features that incur security risks
and make static analysis fail, e.g., no type checking, DOM
based cross-cite scripting, client side open-redirecting and
the dynamic code of Ajax [22]. JavaScript’s ﬂexibility is
reﬂected in modifying everything ranging from an object’s
ﬁelds and methods to its parent object. Besides, Java-
Script’s dynamics allow to access and modify shared objects,
and to dynamically run the injected code via functions like
eval(), setTimeout().
Obfuscation is widely adopted to hide the semantics of
the JavaScript code from the human eﬀorts’ check. Benign
JavaScript applications make use of obfuscation to protect
intellectual property, while malicious JavaScript uses obfus-
cation (even multiple levels of obfuscations) to hide its true
intent. The ﬂexibility, dynamic features and obfuscation
have made the malicious JavaScript code unreadable for hu-
man experts. Meanwhile, these characteristics also fail the
purely-static approaches to detect malware accurately.
To extract representative features that cover the above
characteristics of JavaScript, we adopt three types of analy-
111Figure 2: Feature extraction process
sis: textual, inner-script and inter-script analysis (see Figure
2). Textual analysis provides hints of the obfuscated attacks
(see Section 4.1).