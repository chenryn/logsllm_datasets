# JSDC: A Hybrid Approach for JavaScript Malware Detection and Classification

**Authors:**
- Junjie Wang†
- Yinxing Xue†
- Yang Liu†
- Tian Huat Tan‡

**Affiliations:**
- †Nanyang Technological University
- ‡Singapore University of Technology and Design

## Abstract

Malicious JavaScript poses a significant threat to cybersecurity. Current research and antivirus products primarily focus on detecting JavaScript malware, often reporting only the malware family name without detailing the specific attacks or vulnerabilities. This can lead to inconsistencies in naming conventions across different tools. In this paper, we propose JSDC, a hybrid approach that combines static and dynamic analysis to accurately and efficiently detect and classify JavaScript malware. Our method not only explains the attack model but also identifies new malware variants and potential vulnerabilities. 

JSDC uses machine learning to detect JavaScript malware based on textual information, program structures, and risky function calls. For detected malware, we classify them into eight known attack types using both machine learning and dynamic program analysis. We implemented JSDC and conducted large-scale evaluations, demonstrating its effectiveness. Controlled experiments with 942 malware samples showed low false positive (0.2123%) and false negative (0.8492%) rates compared to other tools. When applied to 1,400,000 real-world JavaScript files, JSDC reported over 1,500 malware instances, many of which were missed by other antivirus tools.

## 1. Introduction

JavaScript is a widely-used client-side scripting language that provides dynamic content on the web. According to Microsoft's recent security report, JavaScript is responsible for the largest number of detected malware in the first half of 2013. Most users rely on signature-based antivirus products, which are not resistant to obfuscation and evolving malware variants.

Detection of malicious JavaScript can be categorized into dynamic and static approaches. Dynamic approaches, such as low-interaction and high-interaction honey clients, are effective but resource-intensive and not scalable. Static approaches, which use machine learning techniques, are efficient but have high false negative rates and cannot model attack behaviors or identify new attacks.

To address these limitations, we propose JSDC, a two-phase classification approach. The first phase detects malicious JavaScript samples, and the second phase classifies them into attack types. We extend HtmlUnit to handle obfuscation and dynamic code generation, extracting features from document elements, source code, and sensitive function call patterns. For uncertain cases, we use dynamic analysis to capture and analyze execution traces, improving accuracy.

Our contributions include:
- An effective machine learning approach for JavaScript malware detection using predictive features.
- A combined approach for malware classification, achieving scalability and accuracy.
- Semantic models of eight known JavaScript attacks, aiding in explaining attack behavior and identifying new variants.
- Implementation and evaluation of JSDC, showing superior performance compared to mainstream antivirus tools.

## 2. JavaScript Malware Categorization

Different organizations use varying naming conventions for JavaScript malware, leading to inconsistencies. Family-based classification does not provide detailed information about the exploited vulnerabilities. We propose a meaningful classification based on attack vectors, which indicate the location of vulnerabilities and similar behavior patterns.

The eight most common JavaScript attack types are:
- **Type I:** Browser vulnerabilities targeting memory corruption.
- **Type II:** Browser hijacking, modifying settings without user permission.
- **Type III:** Adobe Flash vulnerabilities, allowing heap spray attacks.
- **Type IV:** JRE vulnerabilities, bypassing Java security mechanisms.
- **Type V:** Multimedia-based attacks, exploiting vulnerabilities in image and font files.
- **Type VI:** Adobe PDF reader vulnerabilities, causing system crashes.
- **Type VII:** Malicious redirecting, using various techniques to redirect visitors.
- **Type VIII:** Web attack toolkits, like Blacole, spreading malware rapidly.

Each attack type represents a unique behavior exploiting specific vulnerabilities. This classification is more specific than family-based classification and helps in identifying new attacks and vulnerabilities.

## 3. System Overview of JSDC

JSDC follows a two-phase approach: detection and classification. The first phase identifies malicious JavaScript snippets, and the second phase classifies them into attack types. We use Heritrix to download web pages and extract internal and external JavaScript snippets. HtmlUnit is used to obtain unpacked code, addressing obfuscation and dynamic code generation. Features are extracted from the source code, AST, and API usage patterns.

For classification, we train classifiers using k-fold cross-validation. The first classifier distinguishes between benign and malicious snippets, while the second classifier classifies malicious snippets into attack types. Uncertain results are further analyzed dynamically to capture execution traces and refine classification.

## 4. Details of Feature Extraction

JavaScript's dynamic features and obfuscation make it challenging for static analysis. To address this, we use three types of analysis: textual, inner-script, and inter-script. Textual analysis provides hints about obfuscated attacks, while inner-script and inter-script analyses extract features related to program structure and API usage patterns.

By combining these analyses, JSDC effectively detects and classifies JavaScript malware, providing a comprehensive solution for cybersecurity.