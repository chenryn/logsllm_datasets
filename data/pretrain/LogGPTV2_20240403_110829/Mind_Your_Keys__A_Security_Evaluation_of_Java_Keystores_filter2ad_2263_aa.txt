title:Mind Your Keys? A Security Evaluation of Java Keystores
author:Riccardo Focardi and
Francesco Palmarini and
Marco Squarcina and
Graham Steel and
Mauro Tempesta
Mind Your Keys?
A Security Evaluation of Java Keystores
Riccardo Focardi
Universit`a Ca’ Foscari
Francesco Palmarini
Universit`a Ca’ Foscari
Marco Squarcina
Universit`a Ca’ Foscari
Yarix
Cryptosense
Graham Steel
Mauro Tempesta
Cryptosense
Universit`a Ca’ Foscari
Cryptosense
PI:EMAIL
PI:EMAIL
PI:EMAIL
PI:EMAIL
PI:EMAIL
Abstract—Cryptography is complex and variegate and re-
quires to combine different algorithms and mechanisms in non-
trivial ways. This complexity is often source of vulnerabilities.
Secure key management is one of the most critical aspects,
since leaking a cryptographic key vanishes any advantage of
using cryptography. In this paper we analyze Java keystores,
the standard way to manage and securely store keys in Java
applications. We consider seven keystore implementations from
Oracle JDK and Bouncy Castle, a widespread cryptographic
library. We describe, in detail, how the various keystores enforce
conﬁdentiality and integrity of the stored keys through password-
based cryptography and we show that many of the implementa-
tions do not adhere to state-of-the-art cryptographic standards.
We investigate the resistance to ofﬂine attacks and we show that,
for non-compliant keystores, brute-forcing can be up to three
orders of magnitude faster with respect to the most compliant
keystore. Additionally, when an attacker can tamper with the
keystore ﬁle, some implementations are vulnerable to denial of
service attacks or, in the worst case, arbitrary code execution.
Finally we discuss the ﬁxes implemented by Oracle and Bouncy
Castle developers following our responsible disclosure.
I.
INTRODUCTION
Cryptography is a fundamental technology for IT security.
Even if there are well established standards for cryptographic
operations, cryptography is complex and variegated, typically
requiring a non-trivial combination of different algorithms and
mechanisms. Moreover, cryptography is intrinsically related
to the secure management of cryptographic keys which need
to be protected and securely stored by applications. Leaking
cryptographic keys, in fact, diminishes any advantage of cryp-
tography, allowing attackers to break message conﬁdentiality
and integrity, to authenticate as legitimate users or impersonate
legitimate services. Quoting [51], “key management is the
hardest part of cryptography and often the Achilles’ heel of
an otherwise secure system”.
In the recent years we have faced a multitude of ﬂaws
related to cryptography (e.g., [16], [12], [36], [35]). Some
of these are due to the intrinsic complexity of cryptography,
Network  and  Distributed  Systems  Security  (NDSS)  Symposium  2018 
18-21  February  2018,  San  Diego,  CA,  USA
ISBN  1-891562-49-5
http://dx.doi.org/10.14722/ndss.2018.23083
www.ndss-symposium.org
that makes it hard to design applications that adopt secure
combinations of mechanisms and algorithms. For example, in
padding oracle attacks, the usage of some (standard) padding
for the plaintext combined with a speciﬁc algorithm or mech-
anism makes it possible for an attacker to break a ciphertext
in a matter of minutes or hours [54], [19], [12]. Most of
the time this is not a developer fault as, unfortunately, there
are well-known ﬂawed mechanisms that are still enabled in
cryptographic libraries. In other cases, the attacks are due to
ﬂaws in protocols or applications. The infamous Heartbleed
bug allowed an attacker to get access to server private keys
through a simple over-read vulnerability. Once the private key
was leaked, the attacker could decrypt encrypted trafﬁc or
directly impersonate the attacked server [36].
Thus, breaking cryptography is not merely a matter of
breaking a cryptographic algorithm:
the attack surface is
quite large and the complexity of low-level details requires
abstractions. Crypto APIs offer a form of abstraction to devel-
opers that allows to make use of cryptography in a modular
and implementation-independent way. The Java platform, for
example, provides a very elegant abstraction of cryptographic
operations that makes it possible, in many cases, to replace
a cryptographic mechanism or its implementation with a
different one without modifying the application code.
Crypto APIs, however, do not usually provide security
independently of the low-level implementation: default mecha-
nisms are often the weakest ones, thus developers have to face
the delicate task of choosing the best mechanism available for
their needs. For example, in the Java Cryptography Architec-
ture (JCA), ECB is the default mode of operation for block
ciphers [4] and PKCS#1 v1.5 is the default padding scheme
for RSA [5], which is well know to be subject to padding
oracle attacks [19]. Additionally, crypto APIs that promise to
provide security for cryptographic keys have often failed to do
so: in PKCS#11, the standard API to cryptographic tokens, it
is possible to wrap a sensitive key under another key and then
just ask the device to decrypt it, obtaining the value of the
sensitive key in the clear [23], and violating the requirement
that “sensitive keys cannot be revealed in plaintext off the
token” [48].
in the Java ecosystem and,
In this paper we analyze in detail the security of key
management
in particular, of
Java keystores. Password-protected keystores are, in fact, the
standard way to securely manage and store cryptographic keys
in Java: once the user (or the application) provides the correct
password, the keys in the keystore become available and can be
used to perform cryptographic operations, such as encryption
and digital signature. The KeyStore Java class abstracts
away from the actual keystore implementation, which can be
either in the form of an encrypted ﬁle or based on secure
hardware. As discussed above, this abstraction is very impor-
tant for writing code that is independent of the implementation
but developers are still required to select among the various
keystore types offered by Java. Unfortunately, the information
in the keystore documentation is not enough to make a rea-
soned and informed choice among the many alternatives. More
speciﬁcally, given that the Java Keystore API does not provide
control over the cryptographic mechanisms and parameters
employed by each keystore, it is crucial to assess the security
provided by the different implementations, which motivated us
to perform the detailed analysis reported in this paper. In fact,
our work is the ﬁrst one studying the security of keystores for
general purpose Java applications.
We have estimated the adoption rate and analyzed the
implementation details of seven different Java keystores of-
fered by the Oracle JDK and by Bouncy Castle, a widespread
cryptographic library. Keystores are used by hundreds of
commercial applications and open-source projects, as assessed
by scraping the GitHub code hosting service including leading
web applications servers and frameworks, e.g., Tomcat [6],
Spring [8], Oracle Weblogic [2]. Additionally, keystores have
been found to be widespread among security-critical custom
Java software for large ﬁnance, government and healthcare
companies audited by the authors.
The security of keystores is achieved by performing a
cryptographic operation C under a key which is derived
from a password through a function F called Key Derivation
Function (KDF). The aim of the cryptographic operation C is
to guarantee conﬁdentiality and/or integrity of the stored keys.
For example, a Password-Based Encryption (PBE) scheme is
used to protect key conﬁdentiality: in this case C is typically a
symmetric cipher, so that keys are encrypted using the provided
password before being stored in the keystore. In order to
retrieve and use that key, the keystore implementation will
perform the following steps: (a) obtain the password from the
user; (b) derive the encryption key from the password using
F ; (c) decrypt the particular keystore entry through C, and
retrieve the actual key material. Notice that different passwords
can be used to protect different keys and/or to achieve integrity.
To prevent attacks, it is highly recommended that C and F
are implemented using standard, state-of-the-art cryptographic
techniques [40], [49].
Interestingly, we have found that the analyzed keystores
use very diverse implementations for C and F and in several
cases they do not adhere to standards or use obsolete and ad-
hoc mechanisms. We show that, most of the time, keystores
using weak or custom implementations for the key derivation
function F open the way to password brute-forcing. We have
empirically measured the speed-up that the attacker achieves
when these ﬂawed keystores are used and we show that, in
some cases, brute-forcing is three orders of magnitude faster
with respect to the keystores based on standard mechanisms.
We even found keystores using the deprecated cipher RC2 that
enables an attacker to brute-force the 40-bit long cryptographic
key in a matter of hours using a standard desktop computer.
Our analysis has also pointed out problems related to
availability and malicious code execution, which are caused
by type-ﬂaws in the keystore, i.e., bugs in which an object
of a certain type is interpreted as one of a different type.
In particular, by directly tampering with the keystore ﬁle, an
attacker could trigger denial of service (DoS) attacks or even
arbitrary code execution. Interestingly, we also found that the
use of standard key derivation functions can sometimes enable
DoS attacks. These functions are parametrized by the number
of internal iterations, used to slow down brute-forcing, which
is stored in the keystore ﬁle. If the number of iterations is set
to a very big integer, the key derivation function will hang,
blocking the whole application.
Unless stated otherwise, our ﬁndings refer
to Oracle
JDK 8u144 and Bouncy Castle 1.57, the two latest releases at
the time of the ﬁrst submission of this work in August 2017.
Contributions: Our contributions can be summarized as
follows:
(i) we deﬁne a general threat model for password-protected
keystores and we distill a set of signiﬁcant security
properties and consequent rules that any secure keystore
should adhere to;
(ii) we perform a thoughtful analysis of seven keystores, we
their cryptographic
report undocumented details about
implementations and we classify keystores based on our
proposed properties and rules;
(iii) we report on unpublished attacks and weaknesses in the
analyzed keystores. For each attack we point out the
corresponding violations of our proposed properties and
rules and we provide a precise attacker model;
(iv) we empirically estimate the speed-up due to bad crypto-
graphic implementations and we show that, in some cases,
this allows to decrease the guessing time of three orders
of magnitude with respect to the most resistant keystore,
and four orders of magnitude with respect
to NIST
recommendations; interestingly, the attack on Oracle JKS
keystore that we present in this paper, and we previously
mentioned in a blog post [25], has been recently integrated
into the Hashcat password recovery tool;
(v) we discuss the advancements on the security of Oracle
and Bouncy Castle keystore implementations following
our responsible disclosure. The Oracle Security Team
acknowledged the reported issues by assigning two CVE
IDs [37], [38] and released partial ﬁxes in the October
2017 Critical Patch Update [44]. Other ﬁxes are expected
to be released in January 2018 [43]. Bouncy Castle
developers patched some of the reported vulnerabilities
in version 1.58. As of November 2017, remaining issues
are being addressed in the development repository.
Paper Organization: We discuss related work in Section II;
in Section III we deﬁne the security properties of interest,
the rules for the design of secure keystores and the threat
model; in Section IV we report on our analysis of seven
Java keystores; in Section V we describe unpublished attacks
on the analyzed keystores; in Section VI we make an em-
pirical comparison of the password cracking speed among
the keystores; in Section VII we discuss the improvements
implemented by Oracle and Bouncy Castle following our
responsible disclosure; ﬁnally, in Section VIII we draw some
concluding remarks.
2
II. RELATED WORK
Cooijmans et al. [24] have studied various key storage
solutions in Android, either provided as an operating system
service or through the Bouncy Castle cryptographic library.
The threat model is very much tailored to the Android operat-
ing system and radically different from the one we consider in
this paper. Ofﬂine brute-forcing, for example, is only discussed
marginally in the paper. Interestingly, authors show that under
a root attacker (i.e., an attacker with root access to the device),
the Bouncy Castle software implementation is, in some respect,
more secure than the Android OS service using TrustZone’s
capabilities, because of the possibility to protect the keystore
with a user-supplied password. Differently from our work, the
focus of the paper is not on the keystore design and the adopted
cryptographic mechanisms.
Sabt et al. [50] have recently found a forgery attack in
the Android KeyStore service, an Android process that offers
a keystore service to applications and is out of the scope
of our work. However, similarly to our results, the adopted
encryption scheme is shown to be weak and not compliant
to the recommended standards, enabling a forgery attack that
make apps use insecure cryptographic keys, voiding any beneﬁt
of cryptography.
Li et al. [33] have analyzed the security of web password
managers. Even if the setting is different, there are some inter-
esting similarities with keystores. In both settings a password is
used to protect sensitive credentials, passwords in one case and
keys in the other. So the underlying cryptographic techniques
are similar. However the kind of vulnerabilities found in the
paper are not related to cryptographic issues. Gasti et al. [27]
have studied the format of password manager databases. There
is some similarity with our paper for what concerns the threat
model, e.g., by considering an attacker that can tamper with
the password database. However, the setting is different and
the paper does not account for cryptographic weaknesses and
brute-forcing attacks.
Many papers have studied password resistance to guessing,
e.g., [31], [21], [55], [57]. While this is certainly a very
important subject, our paper takes a complementary perspec-
tive: we analyze whether Java keystores provide a sufﬁcient
resistance to brute-forcing, compared to existing standards
and recommendations. Of course, using a tremendously weak
password would make it possible for the attacker to guess it,
independently of the keystore implementation. Similarly, if the
password is very long and with high entropy, the guess would
be infeasible anyway. However, when a password is reasonably
strong, the actual implementation makes a difference: brute-
force is prevented only when key derivation is done accord-
ingly to recommendations.
Kelsey et al. introduced the notion of key stretching, a
mechanism to increase the time of brute-forcing for low
entropy keys [32]. The basic idea is that key derivation should
iterate the core derivation function l times so to multiply the
computational cost of brute-forcing by l and make it equiv-
alent to the cost of brute-forcing a password with additional
log2l bits. Intuitively, through this strategy, brute-forcing each
password requires the same time as brute-forcing l passwords.
Combined with standard random salting (to prevent precom-
putation of keys), key stretching effectively slows down brute-
forcing, and prevents guessing the password even when its