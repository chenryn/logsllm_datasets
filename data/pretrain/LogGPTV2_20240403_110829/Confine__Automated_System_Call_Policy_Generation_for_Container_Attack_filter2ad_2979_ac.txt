respective interpreter to run. We extract the required system
calls for these types of containers using the same approach
used for other binaries, by applying our method to the
interpreter binary and all its required libraries.
6.4 Seccomp Proﬁle Generation
We automatically generate Seccomp policies by classifying
all system calls not present on the ﬁnal list of required system
calls as “not-permitted,” and assigning them to a deny list.
The Docker Seccomp ruleset requires the name of the ﬁltered
system calls, while our analysis of the containers generates
system call numbers. We map all the available system calls
in the kernel to their respective number by using the symbol
information related to the names of the system calls from the
procfs pseudo-ﬁlesystem. Based on the sys/syscall.h
header ﬁle, we map the system call name to its number, and use
it to convert the prohibited system call numbers to their names.
We create the Seccomp proﬁle with a deny list containing
these system calls and apply it to the container.
Docker uses a JSON ﬁle to deﬁne the permitted system
calls. Listing 1 shows a sample ruleset which only disables
the pwrite64 system call. The default action for this ruleset
is to allow all system calls, except those speciﬁed under
the syscalls tag. Each system call is speciﬁed by three
arguments: its name, the action, and its arguments.
USENIX Association
23rd International Symposium on Research in Attacks, Intrusions and Defenses    449
Listing 1: Example of a Docker Seccomp ruleset ﬁle.
" defaultAction ": " SCMP_ACT_ALLOW ",
" architectures ": [
" SCMP_ARCH_X 86_64",
" SCMP_ARCH_X 86",
" SCMP_ARCH_X 32"
],
" syscalls ": [
{
}
]
" name ": " pwrite 64",
" action ": " SCMP_ACT_ERRNO ",
" args ": []
1 {
2
3
4
5
6
7
8
9
10
11
12
13
14
15 }
7 Experimental Evaluation
We evaluated Conﬁne with a set of 150 publicly available
Docker container images available from Docker Hub [7]. We
conducted experiments to get insight into the characteristics
of popular container images, assess the effectiveness of
our system call policy extraction approach, and evaluate its
security beneﬁts in terms of attack surface reduction.
7.1 Analysis of Publicly Available Containers
7.1.1 Dataset Collection
Docker Hub [7] provides a set of 153 “ofﬁcial” container
images that are maintained by the service, along with many
other community-maintained images. For our evaluation,
we collected a data set comprising i) the 153 ofﬁcial Docker
Hub images, and ii) the top 200 most popular community-
maintained images. Due to the overlap between the two lists,
our initial data set consists of 209 unique Docker images.
Out of these 209 images, 193 are available for free and
can be used without any paid licensing requirements—we
exclude the rest from our data set. Out of the remaining 193
images, 43 require some form of manual effort to setup, such
as launching prerequisite containers (e.g., rocket-chat), or
specifying complex conﬁguration settings. We leave these
images out of the scope of our work due to the complexity of
the manual steps required to run them. Our ﬁnal data set thus
comprises 150 Docker images (122 ofﬁcial and 28 unofﬁcial)
that can be automatically processed by our system.
7.1.2 Container Statistics
Docker Hub assigns a popularity metric to each of the ofﬁcial
images based on its number of pull requests (downloads).
We retrieve this number through the ofﬁcial Docker Hub
API for the 153 ofﬁcial images (the returned value is zero
for most of the non-ofﬁcial images). Figure 3a shows the
popularity distribution in terms of number of downloads for
the 153 ofﬁcial Docker Hub images. We can see that 15% of
the Docker images account for most of the downloads, while
the rest are much less popular. This implies that including
more images to the evaluation set would not increase the
signiﬁcance of the dataset in terms of container popularity.
In Section 6.3 we discussed how we tackle applications
written in languages other than C/C++. To gain some insight
about how commonly these languages are used, we gathered
some statistics about the programming languages used by the
containers in our dataset. The most common programming lan-
guages used in containerized applications include C/C++, Java
and Go. As shown in Table 1, many well-known server appli-
cations (e.g., Nginx, Apache Httpd, and MySQL) fall into the
C/C++ category, which comprises 61% of the containers. There
are, however, 22% images hosting Java-based applications,
such as Apache Cassandra (NoSQL database), Apache Solr
(open-source search engine platform), and Apache Tomcat.
Since Go has been used to develop many of the management
tools used in the Docker ecosystem, Go-based containers also
account for a considerable number of images (14%).
We classify containers as Java-based or Python/Perl-based
depending on the presence of the corresponding language
runtime in the container. Since most containers contain small
utility tools, such as sed, grep, and find, which would cause
a container to fall into the C/C++ category, Conﬁne only clas-
siﬁes a container in the C/C++ category if it does not run any
other program written in some other programming language.
For example, the Cassandra [2] container invokes both sed
(a C program) and the java application. Instead of classifying
this container in both the C/C++ and Java categories, we only
consider it as a Java container for the results of Table 1.
As discussed in Section 6.2, we extract the list of executed
binaries in each container and retrieve their loaded libraries.
Figures 3b and 3c show the distribution of the number of
binaries executed and libraries loaded by the tested containers.
About 75% of the containers execute fewer than 16 binaries,
and 75% require fewer than 47 libraries.
7.2 System Call Filtering
We used the set of 150 Docker images to evaluate the
effectiveness of our approach in ﬁltering unused system calls.
First, Conﬁne automatically analyzes each container and
extracts the list of system calls required by its binaries based
on the analysis described in Section 6.2. Then, it generates
a Seccomp ﬁlter to prohibit the use of all remaining system
calls. Finally, we run the container on a Docker Engine, along
with our ﬁlter, to validate the correctness of our analysis.
We assess the effectiveness of our approach by measuring
the number of ﬁltered system calls per container. Each
system call is an entry point to some kernel functionality,
450    23rd International Symposium on Research in Attacks, Intrusions and Defenses
USENIX Association
(a) Container popularity.
(b) Executed binaries per container.
(c) Loaded libraries per container.
Figure 3: Cumulative distribution of number of downloads, executed binaries, and loaded libraries per container.
Table 1: Breakdown of Docker images according to the
programming language used for the main hosted application.
Table 2: Number of ﬁltered system calls for the top-15 images
with the highest number of downloads.
Language
C/C++
Java
Go
JavaScript
Python
Perl
# Img. Example Applications
Traeﬁk, Registry, Telegraph, Metricbeat
92 Nginx, Apache Httpd, MongoDB, MySQL
34 Cassandra, Solr, Tomcat, Sonarqube, JRuby
21
6 Kibana, Ghost, Hipache
5 Celery, Plone, Hylang, Hipache, ROS
2 Nuxeo, GitLab Community Edition
and thus disabling a system call is equivalent to preventing
the exposure of vulnerabilities in all relevant code of that
kernel functionality (in addition to prohibiting the use of that
system call as part of malicious code)—we have measured the
degree of attack surface reduction in terms of known CVEs
that become neutralized and present our results in Section 7.3.
We leave the actual removal of the kernel code related to
each system call as part of our future work, but the number
of ﬁltered system calls is indicative of the amount of kernel
code that could potentially be removed.
Figure 4 shows the cumulative distribution of the number
of ﬁltered system calls for the 150 successfully analyzed
containers. For about half of the containers, Conﬁne disables
145 or more system calls (out of the 326 currently available in
Linux). Even in the worst case (leftmost part of x axis), 100 or
more system calls are removed. This means that at least twice
or more system calls can be disabled compared to Docker’s
default Seccomp ﬁlter, which includes 49 system calls.
Conﬁne ﬁltered 148 system calls on average for the top-15
ranked Docker images that were successfully analyzed. The
list includes many popular applications, such as Nginx, Post-
greSQL, MySQL, and MongoDB. For Nginx, we observe that
160 system calls are required for its operation (166 are ﬁltered
out of 326), whereas Wan et. al [75] identiﬁed only 76 through
dynamic analysis. The complete list is shown in Table 2.
7.2.1 Validation Methodology
To ensure that the generated system call policies do not break
any functionality, we performed additional validation runs.
Image Name
oracle-database-enterprise-edition
oracle-serverjre-8
mysql-enterprise-server
couchbase
db2-developer-c-edition
oracle-instant-client
redis
ibm-security-access-manager
mongo
ubuntu
busybox
node
postgres
nginx
mysql
Filtered
Syscalls
138
190
128
140
100
190
171
110
143
184
142
150
133
166
135
Popularity
Rank
1
2
3
5
6
7
8
9
10
11
12
13
14
15
16
General Validation First, we check if the container is
launched properly with the speciﬁed Seccomp proﬁle.
Unless we ﬁlter system calls that are required by the Docker
framework itself, this step will succeed.
The Docker image is speciﬁed using a conﬁguration ﬁle,
called Dockerﬁle. The Entrypoint attribute in the Dockerﬁle
speciﬁes the application the container must invoke upon
launch. If this application exits (or crashes), the container
exits, and thus we verify that this does not happen.
Even if the application remains running, however, it
might still encounter errors. For example, it might encounter
exceptions that are gracefully handled by the application, but
still cause problems in its correct operation. To capture these
cases, we check the log ﬁles generated by the container. Docker
provides a streamlined process of reading the logs produced by
the containerized application. We compare the logs produced
by the hardened container with the default container. Because
values in the logs, such as timestamps and process IDs, might
differ between different executions, we ignore these values.
USENIX Association
23rd International Symposium on Research in Attacks, Intrusions and Defenses    451
0.51.01.52.0Number of Downloads (Billion)0%20%40%60%80%100%Cumulative % of Containers20406080Number of Binaries0%20%40%60%80%100%Cumulative % of Containers255075100125Number of Libraries0%20%40%60%80%100%Cumulative % of ContainersIn-Depth Validation We further validated the soundness
of the proﬁles generated for some of the ready-to-use Docker
images, by testing them with available benchmark suites for
the corresponding applications. For this validation effort,
we focused on the most popular Docker images due to the
manual effort required. We collected a set of benchmarking
tools applicable to 10 of the top-50 Docker images. These
include domain-speciﬁc benchmarking tools, Selenium [24]
scripts, and the CloudSuite benchmarks [60]. We applied
the benchmarks to the following Docker images: MongoDB,
PostgreSQL, MySQL, Redis, Wordpress, PHP, Memcached,
Nginx, Apache Httpd and MediaWiki.
The web-serving benchmark of CloudSuite [60] is based
on the open-source social networking site Elgg [10]. Elgg is a
PHP-based application that uses MySQL as the database server.
It also provides a media-streaming server running on the Nginx
server. Finally, it also provides a benchmark for Memcached.
We derived system call policies for containers running these
benchmarks and veriﬁed that the benchmarks successfully ran.
For MongoDB, we used mongo-perf [15], and applied
all the test cases in the simple_insert and simple_query test
suites on one thread for 10 seconds. For PostgreSQL, we used
pgbench [20], which ﬁrst creates a new database and then
prepares and runs the test cases. For MySQL, we used the
sysbench tool [48]. After initializing a new database, we ran
the OLTP read and write tests using 16 threads on 10 tables.
For Redis, we used redis-benchmark [22], and ran multiple
tests changing the type and number of requests, number of
clients and size of data being loaded in each test.
Wordpress and Mediawiki run on Apache Httpd. We
ran a hardend MySQL container as their database and used
Selenium [24] to create content through automated user
interaction. We applied scripts created based on online
tutorials prepared and released by Azad et al. [28]. Through
these scripts, different operations, such as creating users,
posts, applying images and modifying them were performed.
All operations were performed successfully and no irregular
impact was identiﬁed through the logs or the script outputs.
7.2.2 Validation Results
Based on the above process, we veriﬁed that 146 out of the 150
containers run successfully, while 4 failed for the following
reasons. First, Conﬁne failed to extract system calls for three
Go-based images, because the Go call graph tool (discussed
in Section 6.3) could not be applied on the source code of In-
ﬂuxdb [12] and Chronograf [4] due to numerous dependencies,
while the source code of Sematext [25] was not available.
Second, Java provides the option of accessing OS interfaces
directly through its Java Native Interface. We would need to
analyze the Java code of each program to extract JNI-invoked
system calls. Elasticsearch [9] is the only example we saw in
our Java dataset which used this feature, and thus we did not
invest the time to implement this capability.
Figure 4: Cumulative distribution of the number of ﬁltered
system calls, as a percentage of all tested containers.
7.3 Security Evaluation
Previous works in the area of software debloating [41, 47, 66]
mostly focus on the amount of code (and number of ROP
gadgets) removed as the main measure of improvement. In
contrast, our approach does not remove any code, but merely
restricts the system calls that a malicious container can
invoke, i.e., it reduces the attack surface of the host’s kernel by
reducing the number of system calls it exposes to (potentially
malicious) applications.
To demonstrate the effectiveness of our approach in reducing