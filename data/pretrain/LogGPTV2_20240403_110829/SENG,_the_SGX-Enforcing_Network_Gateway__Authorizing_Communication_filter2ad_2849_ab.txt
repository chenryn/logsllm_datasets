### Perimeter Firewalls with Host Information
Perimeter firewalls equipped with client-side sensors are most closely related to SENG. However, they fail to provide reliable traffic-to-application attribution, which is a central design goal of SENG. Host sensors, such as the Cisco Network Visibility Module (NVM) [11], enhance firewalls by providing per-flow host data, including application identifiers (e.g., binary hash, process name). Unfortunately, malware can easily bypass these static identifiers by injecting into benign processes [4]. Furthermore, a system-level attacker can completely subvert host sensors like NVM because they fully rely on the operating system. Similarly, SOCKS [52] proxies and VPN [15] services, while controlling traffic centrally, cannot reliably link traffic to its applications.

### Isolation-Based Traffic Auditing
Assayer [43] uses a client-side hypervisor to augment application-level data of outbound client traffic with traffic statistics and signs it. This approach, however, does not meet the requirements for reliable traffic-to-application attribution.

### Related Work: Perimeter Firewalls, Host-Level Firewalls, and Secure Middleboxes
The following table summarizes related work in perimeter firewalls with host sensors, host-level firewalls, and secure middleboxes, assessed according to the metrics, symbols, and acronyms outlined in Section 3.

| Project | Trust in... | Attackers | Central? | C+I | TA | Attr | ¬IL |
|---------|-------------|-----------|----------|-----|----|------|-----|
| SENG    | OS VMM CPU | Syscli, mitm | yes | yes | - | yes | yes |
| NVM et al. | no | MWuser | no | - | - | no | no |
| Assayer | no | Syscli, mitm | no | - | - | no | no |
| Alcatraz | no | Syscli+mbox, mitm | no | - | - | no | no |
| EndBox | no | Syscli, mitm | no | - | - | no | no |
| iptables MAC Client | no | MWuser | no | - | - | no | no |
| ClipOS | yes | MWuser, mitm | no | - | - | no | no |
| QubesOS | yes* | Syscli, mitm | no | - | - | no | no |
| SafeBricks | yes | Sysmbox, mitm | no | - | - | no | no |
| LightBox | yes | Sysmbox, mitm | no | - | - | no | no |

*Note: QubesOS trusts the OS of the admin dom0, though.

### SGX-Protected Middlebox Outsourcing
Projects like SafeBricks [45], LightBox [16], and ShieldBox [57] use Intel SGX to protect middlebox services from untrusted cloud or middlebox providers. These projects differ in their focus and implementation. For example, SafeBricks uses language-based methods to enforce least privilege on third-party middlebox functions and isolation across chained functions, while LightBox focuses on support for stateful full-stack middlebox functions and high performance. Gkantsidis et al. [21] propose a middlebox-aware TLS variant (mbTLS) for secure inspection of encrypted client traffic. Unlike SENG, these projects trust the client hosts and do not provide app-to-traffic attribution (Attr:-) or mitigate information leakage (¬IL:-). The middleboxes can benefit from SENG's desired traffic attribution, as they integrate easily (cf. AR3 in Section 5.1).

### Background
#### Intel SGX and Remote Attestation
Trusted Execution Environments (TEEs) provide an abstraction to run processes isolated from the rest of the system. TEEs enforce hardware-based protection of the integrity and confidentiality of the contained code and data and have means to prove it to external entities [13, 44].

In this context, we focus on Intel SGX, which forms the basis for our overall design. SGX's TEE entities are enclaves, which rely only on the security of the CPU. Enclaves provide a dedicated memory region called the enclave page cache (EPC), which is isolated and transparently encrypted and authenticated. Enclave app code is limited to user space instructions, so enclaves depend on the cooperation of the untrusted OS for system calls and interaction with hardware devices. Therefore, SGX provides direct access to untrusted memory and the notion of enclave calls (ECALLs) and outside calls (OCALLs), allowing controlled transitions between the trusted and untrusted world. Additionally, SGX allows storing data encrypted on the disk via a sealing key derived by the CPU and accessible only to the respective enclave [13].

SGX enclaves can prove their identity and protection to local and remote entities. For local attestation, the CPU creates a cryptographic report of the enclave, containing a measurement (secure hash) of the initial enclave state. The report is signed by the CPU with the key of the local challenger enclave and passed to the challenger for verification. For remote attestation, the Intel-provided Quoting Enclave (QE) acts as the local challenger. The QE adds the platform state and forwards the resulting quote to a trusted remote attestation service, such as the Intel Attestation Service (IAS), which checks the platform validity and returns a signed attestation report. Enclaves can bind user data (e.g., keys) to the attestation by embedding custom data into their reports [13, 32].

#### Enclave Development and Graphene-SGX
There are at least three major paradigms for developing TEE-enabled programs:
1. **Explicit Design**: Applications can be explicitly designed for certain TEEs using SDKs [25], which abstract implementation details. SDKs usually provide APIs for attestation and interactions with the untrusted OS, e.g., for sealing files to disk.
2. **Semi-Automated Approaches**: These rely on compiler support and developer-provided source code annotations to split code and data into sensitive and non-sensitive parts. The sensitive parts are moved inside the isolated enclave and connected to the untrusted parts via shielding layers [37, 55].
3. **LibOSes**: SGX library operating systems securely execute unmodified applications inside enclaves [2, 5, 9, 53]. Due to the user space restriction of enclaves, these LibOSes handle system calls on behalf of the apps and transparently provide POSIX abstractions, e.g., multi-threading support. They aim to shield system calls against Iago attacks [10], where the untrusted OS manipulates system calls and their return values. However, while LibOSes typically provide shielding layers for secure disk I/O and file integrity, they do not protect network traffic and rely on the untrusted host network stack. SCONE [2] includes transparent TLS proxy support for server apps but fails to protect client traffic and DNS—both essential requirements of SENG.

In our design, we will follow the third approach and use the Graphene-SGX LibOS, which is open-source and allows us to transparently execute unmodified applications in SGX enclaves [9]. Graphene-SGX emulates some system calls internally, while others are delegated to the untrusted OS. A manifest file specifies the enclave size, number of threads, and the application and corresponding dependencies that Graphene-SGX shields. The manifest is part of the enclave identity for attesting the shielded application. While Graphene-SGX provides multi-threading and a file system shield, it lacks secure network I/O for applications.

### Design
#### 5.1 Requirements
SENG has two high-level goals: (i) prevent attacks against the traffic of SGX-shielded clients, and (ii) allow a central gateway to govern network access on a per-application basis. From these, we derive six security (SR) and three auxiliary (AR) requirements, as shown below. These requirements apply equally to internal and external shielded clients. Five of these requirements (SR2–SR6) heavily rely on the new concepts introduced by our design.

**SR1: Code and Data Protection**
During execution, the integrity and confidentiality of client code (binary, libraries) and data (including files) must be protected.

**SR2: Network Traffic Integrity and Confidentiality**
The integrity and confidentiality of network traffic between shielded apps and the gateway must be guaranteed, both for internal and external clients.

**SR3: Redirection Prevention**
Traffic from shielded clients must be protected against packet header manipulation by local system-level or on-path MITM attackers until it passes the gateway. Local and on-path DNS redirection attacks must also be prevented.

**SR4: Protection-based Traffic Authentication**
The gateway must be able to distinguish between traffic from shielded applications and non-shielded ones. This property enables network policies that restrict access to sensitive subnetworks to shielded apps only.

**SR5: Accountability of Shielded Traffic**
The gateway must be able to link shielded traffic back to the respective shielded application to enforce per-app network policies.

**SR6: Information Leakage and Remote Control Prevention**
Whenever SENG enforces that only shielded clients may communicate, local system-level and internal MITM attackers must not be able to leak information to external systems. In the opposite direction, attackers must not be able to send information (e.g., malware commands) from the outside to compromised clients.

**AR1: No Client Code Changes**
To ease adoption and support closed-source and legacy applications, we seek a solution that does not require any code changes in the client app and its dependencies.

**AR2: Scalability of Gateway Server**
The overhead introduced to the gateway server per shielded app and per network connection must be low to allow for scaling.

**AR3: Compatibility with Other Gateway Services**
The protection and authentication techniques used by SENG should not interfere with other services on the network gateway, such as middleboxes or firewalls.

#### 5.2 Overview
We now provide an overview of the SENG architecture and explain how SENG shields network traffic of unmodified client applications and enables app-grained traffic control.

**SENG Architecture**
The SENG architecture consists of two main components:
1. **Client-Side Shielding Runtime**: On the client side, the SENG runtime wraps a client application in a library OS (LibOS) and combines both in an SGX enclave.
2. **SENG Server**: Located at the central network gateway, the SENG server cooperates with the firewall and SENG runtime instances to attribute and protect traffic of the shielded apps.

**Client-Side Operations**
On the client, the LibOS and SENG runtime transparently shield the client applications from local system-level attackers. The LibOS loads and executes unmodified binary applications inside a hardware-protected SGX enclave. It handles system calls of the app and shields them against Iago attacks [10] of the untrusted OS. For instance, the LibOS prepares its own file system to protect against disk I/O tampering. The SENG runtime adds to this by protecting network I/O of shielded apps and establishing trust with the SENG server. Technically, the SENG runtime incorporates a lightweight user-space TCP/IP stack to cope with the lack of trust in the host’s network stack. This user-space network stack manages the app’s connections inside SGX and enables secure tunneling of whole IP packets, including the network and transport headers, to the SENG server.

**Gateway Operations**
The SENG server authenticates client apps and securely forwards shielded traffic between the SENG runtime and the gateway. The SENG runtime and server establish an attested, secure channel for this purpose.