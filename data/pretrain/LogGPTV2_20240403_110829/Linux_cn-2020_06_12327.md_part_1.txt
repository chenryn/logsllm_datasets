---
author: Shaun Taylor-morgan
category: 软件开发
comments_data: []
count:
  commentnum: 0
  favtimes: 1
  likes: 0
  sharetimes: 0
  viewnum: 6901
date: '2020-06-18 00:11:51'
editorchoice: false
excerpt: 比较七个在 Python 中绘图的库和 API，看看哪个最能满足你的需求。
fromurl: https://opensource.com/article/20/4/plot-data-python
id: 12327
islctt: true
largepic: /data/attachment/album/202006/18/000953eg4zpk3kfifqv4px.jpg
permalink: /article-12327-1.html
pic: /data/attachment/album/202006/18/000953eg4zpk3kfifqv4px.jpg.thumb.jpg
related:
- displayorder: 0
  raid: 12329
reviewer: ''
selector: ''
summary: 比较七个在 Python 中绘图的库和 API，看看哪个最能满足你的需求。
tags:
- 绘图
thumb: false
title: 用 Python 绘制数据的7种最流行的方法
titlepic: true
translator: wxy
updated: '2020-06-18 00:11:51'
---
![](/data/attachment/album/202006/18/000953eg4zpk3kfifqv4px.jpg)
> 
> 比较七个在 Python 中绘图的库和 API，看看哪个最能满足你的需求。
> 
> 
> 
“如何在 Python 中绘图？”曾经这个问题有一个简单的答案：Matplotlib 是唯一的办法。如今，Python 作为数据科学的语言，有着更多的选择。你应该用什么呢？
本指南将帮助你决定。
它将向你展示如何使用四个最流行的 Python 绘图库：Matplotlib、Seaborn、Plotly 和 Bokeh，再加上两个值得考虑的优秀的后起之秀：Altair，拥有丰富的 API；Pygal，拥有漂亮的 SVG 输出。我还会看看 Pandas 提供的非常方便的绘图 API。
对于每一个库，我都包含了源代码片段，以及一个使用 [Anvil](https://anvil.works/) 的完整的基于 Web 的例子。Anvil 是我们的平台，除了 Python 之外，什么都不用做就可以构建网络应用。让我们一起来看看。
### 示例绘图
每个库都采取了稍微不同的方法来绘制数据。为了比较它们，我将用每个库绘制同样的图，并给你展示源代码。对于示例数据，我选择了这张 1966 年以来英国大选结果的分组柱状图。
![Bar chart of British election data](/data/attachment/album/202006/18/001157cnngxterp7tnmol7.png)
我从维基百科上整理了[英国选举史的数据集](https://en.wikipedia.org/wiki/United_Kingdom_general_elections_overview)：从 1966 年到 2019 年，保守党、工党和自由党（广义）在每次选举中赢得的英国议会席位数，加上“其他”赢得的席位数。你可以[以 CSV 文件格式下载它](https://anvil.works/blog/img/plotting-in-python/uk-election-results.csv)。
### Matplotlib
[Matplotlib](https://matplotlib.org/) 是最古老的 Python 绘图库，现在仍然是最流行的。它创建于 2003 年，是 [SciPy Stack](https://www.scipy.org/about.html) 的一部分，SciPy Stack 是一个类似于 [Matlab](https://www.mathworks.com/products/matlab.html) 的开源科学计算库。
Matplotlib 为你提供了对绘制的精确控制。例如，你可以在你的条形图中定义每个条形图的单独的 X 位置。下面是绘制这个图表的代码（你可以在[这里](https://anvil.works/blog/plotting-in-matplotlib)运行）：
```
    import matplotlib.pyplot as plt
    import numpy as np
    from votes import wide as df
    # Initialise a figure. subplots() with no args gives one plot.
    fig, ax = plt.subplots()
    # A little data preparation
    years = df['year']
    x = np.arange(len(years))
    # Plot each bar plot. Note: manually calculating the 'dodges' of the bars
    ax.bar(x - 3*width/2, df['conservative'], width, label='Conservative', color='#0343df')
    ax.bar(x - width/2, df['labour'], width, label='Labour', color='#e50000')
    ax.bar(x + width/2, df['liberal'], width, label='Liberal', color='#ffff14')
    ax.bar(x + 3*width/2, df['others'], width, label='Others', color='#929591')
    # Customise some display properties
    ax.set_ylabel('Seats')
    ax.set_title('UK election results')
    ax.set_xticks(x)    # This ensures we have one tick per year, otherwise we get fewer
    ax.set_xticklabels(years.astype(str).values, rotation='vertical')
    ax.legend()
    # Ask Matplotlib to show the plot
    plt.show()
```
这是用 Matplotlib 绘制的选举结果:
![Matplotlib plot of British election data](/data/attachment/album/202006/18/001159hrlkb13hs2lxo1sq.png)
### Seaborn
[Seaborn](https://seaborn.pydata.org/) 是 Matplotlib 之上的一个抽象层；它提供了一个非常整洁的界面，让你可以非常容易地制作出各种类型的有用绘图。
不过，它并没有在能力上有所妥协！Seaborn 提供了访问底层 Matplotlib 对象的[逃生舱口](https://anvil.works/blog/escape-hatches-and-ejector-seats)，所以你仍然可以进行完全控制。
Seaborn 的代码比原始的 Matplotlib 更简单（可在[此处](https://anvil.works/blog/plotting-in-seaborn)运行）：
```
    import seaborn as sns
    from votes import long as df
    # Some boilerplate to initialise things
    sns.set()
    plt.figure()
    # This is where the actual plot gets made
    ax = sns.barplot(data=df, x="year", y="seats", hue="party", palette=['blue', 'red', 'yellow', 'grey'], saturation=0.6)
    # Customise some display properties
    ax.set_title('UK election results')
    ax.grid(color='#cccccc')
    ax.set_ylabel('Seats')
    ax.set_xlabel(None)
    ax.set_xticklabels(df["year"].unique().astype(str), rotation='vertical')
    # Ask Matplotlib to show it
    plt.show()
```
并生成这样的图表：
![Seaborn plot of British election data](/data/attachment/album/202006/18/001205lhb1exzhuwb7h18q.png)
### Plotly
[Plotly](https://plot.ly/) 是一个绘图生态系统，它包括一个 Python 绘图库。它有三个不同的接口：
1. 一个面向对象的接口。
2. 一个命令式接口，允许你使用类似 JSON 的数据结构来指定你的绘图。
3. 类似于 Seaborn 的高级接口，称为 Plotly Express。
Plotly 绘图被设计成嵌入到 Web 应用程序中。Plotly 的核心其实是一个 JavaScript 库！它使用 [D3](https://d3js.org/) 和 [stack.gl](http://stack.gl/) 来绘制图表。
你可以通过向该 JavaScript 库传递 JSON 来构建其他语言的 Plotly 库。官方的 Python 和 R 库就是这样做的。在 Anvil，我们将 Python Plotly API 移植到了 [Web 浏览器中运行](https://anvil.works/docs/client/components/plots)。
这是使用 Plotly 的源代码（你可以在这里[运行](https://anvil.works/blog/plotting-in-plotly)）：
```
    import plotly.graph_objects as go
    from votes import wide as df
    #  Get a convenient list of x-values
    years = df['year']
    x = list(range(len(years)))
    # Specify the plots
    bar_plots = [
        go.Bar(x=x, y=df['conservative'], name='Conservative', marker=go.bar.Marker(color='#0343df')),
        go.Bar(x=x, y=df['labour'], name='Labour', marker=go.bar.Marker(color='#e50000')),
        go.Bar(x=x, y=df['liberal'], name='Liberal', marker=go.bar.Marker(color='#ffff14')),
        go.Bar(x=x, y=df['others'], name='Others', marker=go.bar.Marker(color='#929591')),
    ]
    # Customise some display properties
    layout = go.Layout(
        title=go.layout.Title(text="Election results", x=0.5),
        yaxis_title="Seats",
        xaxis_tickmode="array",
        xaxis_tickvals=list(range(27)),
        xaxis_ticktext=tuple(df['year'].values),
    )
    # Make the multi-bar plot
    fig = go.Figure(data=bar_plots, layout=layout)
    # Tell Plotly to render it
    fig.show()
```
选举结果图表：