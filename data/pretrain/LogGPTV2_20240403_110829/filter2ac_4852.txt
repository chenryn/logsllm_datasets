titleblackhat:asia-22 Taking Kernel Hardening to the Next Level
Memory safety issues are the foremost security problems in today's operating systems (OS). In 2021 alone, there were 175 CVEs assigned to potentially exploitable bugs in Linux. Since OS is an attractive target to adversaries who wish to elevate privileges,exploitation techniques targeting such bugs have been evolving and getting more sophisticated.Accordingly, security researchers have proposed several kernel hardening techniques that check a set of rules that OS has to respect. In this talk, we choose two hardening techniques, CFI (Control-Flow Integrity) and UAF (Use-After-Free) defense, and detail why state-of-the-art techniques are not enough to stop adversaries and propose new techniques to take them to the next level.First, for CFI, we will present an in-kernel, hardware-based CFI, called PAL, that utilizes ARM's Pointer Authentication (PA). It provides two important benefits over state-of-the-art PA-based CFIs (e.g., iOS CFI, PARTS):1) Enhancing CFI precision via a multi-layer refinement technique,2) Assuring the algorithmic or implementation correctness via post validation on final kernel binaries.PAL achieves these goals in an OS-agnostic manner, so could be applied to commodity OSes like Linux and FreeBSD. The precision of the CFI can be adjusted for better performance or improved for better security with minimal engineering efforts. Also, our post-validation approach helps us ensure the security invariant required for the safe uses of PA inside the kernel, which can reveal subtle bugs in the final kernel binaries.Second, for UAF defense, we will introduce ViK, a software-based, and widely applicable defense that can protect OS kernels against UAF attacks. ViK borrows its main concept from Memory Tagging (MT) but with software only, and greatly optimizes its performance to be acceptable to kernels while not sacrificing security, by using either "base identifier" enabling a fast UAF violation check or "ARM TBI (Top-Byte Ignore)" boosting overall system speed.