#
# try
it out!
c =
CodeGeneratorBackend()
c.begin() c.write("for
i in range(5):") c.indent()
c.write("print 'code generation made easy!'") c.dedent() exec
c.end() 
code generation made easy!
code generation made easy!
code generation made easy!
code generation made easy!
code generation made easy!
Python 还提供了 execfile 函数, 一个从文件加载代码, 编译代码, 执行代码
的快捷方式. Example 1-23 简单地展示了如何使用这个函数.
1.2.6.4. Example 1-23. 使用 execfile 函数
File: builtin-execfile-example-1.py
execfile("hello.py")
def EXECFILE(filename, locals=None, globals=None):
exec compile(open(filename).read(), filename, "exec") in locals,
globals
EXECFILE("hello.py")
hello again, and welcome to the show
hello again, and welcome to the show
Example 1-24 中的代码是 Example 1-23 中使用的 hello.py 文件.
1.2.6.5. Example 1-24. hello.py 脚本
File: hello.py
print "hello again, and welcome to the show"
1.2.7. 从 _ _builtin_ _ 模块重载函数
因为 Python 在检查局部名称空间和模块名称空间前不会检查内建函数, 所以
有时候你可能要显式地引用 _ _builtin_ _ 模块. 例如 Example 1-25 重载了
内建的 open 函数. 这时候要想使用原来的 open 函数, 就需要脚本显式地指
明模块名称.
1.2.7.1. Example 1-25. 显式地访问 _ _builtin_ _ 模块中的函数
File: builtin-open-example-1.py
def open(filename, mode="rb"):
import _ _builtin_ _
file = _ _builtin_ _.open(filename, mode)
if file.read(5) not in("GIF87", "GIF89"): raise
IOError, "not aGIF
file" file.seek(0) return file
fp =
open("samples/sample.gif")
print
len(fp.read()), "bytes"
fp =
open("samples/sample.jpg") print
len(fp.read()), "bytes"
3565 bytes
Traceback (innermost last):
File "builtin-open-example-1.py", line 12, in ?
File "builtin-open-example-1.py", line 5, in open
IOError: not a GIF file
[!Feather 注: 明白这个open()函数是干什么的么? 检查一个文件是否是 GIF
文件,
一般如这类的图片格式都在文件开头有默认的格式.
另外打开文件推荐使用file()而不是open() , 虽然暂时没有区别]
1.3. exceptions 模块
exceptions 模块提供了标准异常的层次结构. Python 启动的时候会自动导入
这个模块, 并且将它加入到 _ _builtin_ _ 模块中. 也就是说, 一般不需要手
动导入这个模块.
在 1.5.2 版本时它是一个普通模块, 2.0 以及以后版本成为内建模块.
该模块定义了以下标准异常:
• Exception 是所有异常的基类. 强烈建议(但不是必须)自定义的异常异
常也继承这个类.
• SystemExit(Exception) 由 sys.exit 函数引发. 如果它在最顶层没有
被 try-except 语句捕获, 那么解释器将直接关闭而不会显示任何跟踪
返回信息.
• StandardError(Exception) 是所有内建异常的基类(除 SystemExit
外).
• KeyboardInterrupt(StandardError) 在用户按下 Control-C(或其他打
断按键)后 被引发. 如果它可能会在你使用 "捕获所有" 的 try-except
语句时导致奇怪的问题.
• ImportError(StandardError) 在 Python 导入模块失败时被引发.
• EnvironmentError 作为所有解释器环境引发异常的基类. (也就是说,
这些异常一般不是由于程序 bug 引起).
• IOError(EnvironmentError) 用于标记 I/O 相关错误.
• OSError(EnvironmentError) 用于标记 os 模块引起的错误.
• WindowsError(OSError) 用于标记 os 模块中 Windows 相关错误.
• NameError(StandardError) 在 Python 查找全局或局部名称失败时被引
发.
• UnboundLocalError(NameError) , 当一个局部变量还没有赋值就被使用
时, 会引发这个异常. 这个异常只有在2.0及之后的版本有; 早期版本
只会引发一个普通的 NameError .
• AttributeError(StandardError) , 当 Python 寻找(或赋值)给一个实
例属性, 方法, 模块功能或其它有效的命名失败时, 会引发这个异常.
• SyntaxError(StandardError) , 当解释器在编译时遇到语法错误, 这个
异常就被引发.
• (2.0 及以后版本) IndentationError(SyntaxError) 在遇到非法的缩进
时被引发. 该异常只用于 2.0 及以后版本, 之前版本会引发一个
SyntaxError 异常.
• (2.0 及以后版本) TabError(IndentationError) , 当使用 -tt 选项检
查不一致缩进时有可能被引发. 该异常只用于 2.0 及以后版本, 之前版
本会引发一个 SyntaxError 异常.
• TypeError(StandardError) , 当给定类型的对象不支持一个操作时被引
发.
• AssertionError(StandardError) 在 assert 语句失败时被引发(即表达
式为 false 时).
• LookupError(StandardError) 作为序列或字典没有包含给定索引或键时
所引发异常的基类.
• IndexError(LookupError) , 当序列对象使用给定索引数索引失败时(不
存在索引对应对象)引发该异常.
• KeyError(LookupError) 当字典对象使用给定索引索引失败时(不存在索
引对应对象)引发该异常.
• ArithmeticError(StandardError) 作为数学计算相关异常的基类.
• OverflowError(ArithmeticError) 在操作溢出时被引发(例如当一个整
数太大, 导致不能符合给定类型).
• ZeroDivisionError(ArithmeticError) , 当你尝试用 0 除某个数时被
引发.
• FloatingPointError(ArithmeticError) , 当浮点数操作失败时被引发.
• ValueError(StandardError) , 当一个参数类型正确但值不合法时被引
发.
• (2.0 及以后版本) UnicodeError(ValueError) , Unicode 字符串类型相
关异常. 只使用在 2.0 及以后版本.
• RuntimeError(StandardError) , 当出现运行时问题时引发, 包括在限
制模式下尝试访问外部内容, 未知的硬件问题等等.
• NotImplementedError(RuntimeError) , 用于标记未实现的函数, 或无
效的方法.
• SystemError(StandardError) , 解释器内部错误. 该异常值会包含更多
的细节 (经常会是一些深层次的东西, 比如 "eval_code2: NULL
globals" ) . 这本书的作者编了 5 年程序都没见过这个错误. (想必是
没有用 raise SystemError ).
• MemoryError(StandardError) , 当解释器耗尽内存时会引发该异常. 注
意只有在底层内存分配抱怨时这个异常才会发生; 如果是在你的旧机器
上, 这个异常发生之前系统会陷入混乱的内存交换中.
你可以创建自己的异常类. 只需要继承内建的 Exception 类(或者它的任意一
个合适的子类)即可, 有需要时可以再重载它的 _ _str_ _ 方法. Example 1-26
展示了如何使用 exceptions 模块.
1.3.0.1. Example 1-26. 使用 exceptions 模块
File: exceptions-example-1.py
# python imports this module by itself, so the following
# line isn't really needed
# python 会自动导入该模块, 所以以下这行是不必要的
# import exceptions
class HTTPError(Exception):
# indicates an HTTP protocol error
def _ _init_ _(self, url, errcode, errmsg):
self.url = url
self.errcode = errcode
self.errmsg =
errmsg def _ _str_ _(self):
return ( ""
% (self.url,
self.errcode, self.errmsg)
) try:
raise HTTPError("http://www.python.org/foo", 200, "Not
Found") except
HTTPError, error: print "url", "=
>", error.url
print "errcode", "=>", error.errcode
print "errmsg", "=
>",
error.errmsg raise #
reraise exception
url => http://www.python.org/foo
errcode => 200
errmsg =
> Not Found
Traceback (innermost last):
File "exceptions-example-1", line 16, in ?
HTTPError: 
1.4. os 模块
这个模块中的大部分函数通过对应平台相关模块实现, 比如 posix 和 nt. os
模块会在第一次导入的时候自动加载合适的执行模块.
1.4.1. 处理文件
内建的 open / file 函数用于创建, 打开和编辑文件, 如 Example 1-27 所示.
而 os 模块提供了重命名和删除文件所需的函数.
1.4.1.1. Example 1-27. 使用 os 模块重命名和删除文件
File: os-example-3.py
import os
import string
def replace(file, search_for, replace_with):
# replace strings in a text file
back = os.path.splitext(file)[0] + ".bak"
temp = os.path.splitext(file)[0] + ".tmp"
try:
# remove old temp file, if any
os.remove(temp)
except os.error:
pass
fi = open(file)
fo = open(temp, "w")
for s in
fi.readlines(): fo.write(string.replace(s,
search_for, replace_with))
fi.close() fo.close() try: #
remove old backup file, if any os.remove(back)
except os.error: pass #
rename original to backup...
os.rename(file,
back) # ...and temporary to original os.rename(temp,
file)
# #
try
it out!
file =
"samples/sample.txt"
replace(file,
"hello", "tjena")
replace(file,
"tjena", "hello")
1.4.2. 处理目录
os 模块也包含了一些用于目录处理的函数.
listdir 函数返回给定目录中所有文件名(包括目录名)组成的列表, 如
Example 1-28 所示. 而 Unix 和 Windows 中使用的当前目录和父目录标记(.
和 .. )不包含在此列表中.
1.4.2.1. Example 1-28. 使用 os 列出目录下的文件
File: os-example-5.py
import os
for file in os.listdir("samples"):
print file
sample.au
sample.jpg
sample.wav
...
getcwd 和 chdir 函数分别用于获得和改变当前工作目录. 如 Example 1-29
所示.
1.4.2.2. Example 1-29. 使用 os 模块改变当前工作目录
File: os-example-4.py
import os
# where are we?
cwd = os.getcwd()
print "1", cwd
# go down
os.chdir("samples")
print "2", os.getcwd()
# go back up
os.chdir(os.pardir)
print "3", os.getcwd()
1 /ematter/librarybook
2 /ematter/librarybook/samples
3 /ematter/librarybook
makedirs 和 removedirs 函数用于创建或删除目录层，如 Example 1-30 所示.
1.4.2.3. Example 1-30. 使用 os 模块创建/删除多个目录级
File: os-example-6.py
import os
os.makedirs("test/multiple/levels")
fp =
open("test/multiple/levels/file", "w") fp.write("inspector
praline") fp.close()
#
remove the file os.remove("test/multiple/levels/file")
#
and all empty directories above it os.removedirs("test/multiple/levels")
removedirs 函数会删除所给路径中最后一个目录下所有的空目录. 而 mkdir
和 rmdir 函数只能处理单个目录级. 如 Example 1-31 所示.
1.4.2.4. Example 1-31. 使用 os 模块创建/删除目录
File: os-example-7.py
import os
os.mkdir("test")
os.rmdir("test")
os.rmdir("samples") # this will fail
Traceback (innermost last):
File "os-example-7", line 6, in ?
OSError: [Errno 41] Directory not empty: 'samples'
如果需要删除非空目录, 你可以使用 shutil 模块中的 rmtree 函数.
1.4.3. 处理文件属性
stat 函数可以用来获取一个存在文件的信息, 如 Example 1-32 所示. 它返回
一个类元组对象(stat_result对象, 包含 10 个元素), 依次是st_mode (权限
模式), st_ino (inode number), st_dev (device), st_nlink (number of hard
links), st_uid (所有者用户 ID), st_gid (所有者所在组 ID ), st_size (文
件大小, 字节), st_atime (最近一次访问时间), st_mtime (最近修改时间),
st_ctime (平台相关; Unix下的最近一次元数据/metadata修改时间, 或者
Windows 下的创建时间) - 以上项目也可作为属性访问.
[!Feather 注: 原文为 9 元元组. 另,返回对象并非元组类型,为 struct.]
1.4.3.1. Example 1-32. 使用 os 模块获取文件属性
File: os-example-1.py
import os
import time
file = "samples/sample.jpg"
def dump(st):
mode, ino, dev, nlink, uid, gid, size, atime, mtime, ctime = st
print "- size:", size, "bytes"
print "- owner:", uid, gid
print "- created:", time.ctime(ctime)
print "- last accessed:", time.ctime(atime)
print "- last modified:", time.ctime(mtime)
print "- mode:", oct(mode)
print "- inode/dev:", ino, dev
#
# get stats for a filename
st =
os.stat(file)
print "stat",
file dump(st)
print # # get stats for an open file fp =
open(file)
st =
os.fstat(fp.fileno())
print "fstat",
file
dump(st) 
stat samples/sample.jpg
- size: 4762 bytes
- owner: 0 0
- created: Tue Sep 07 22:45:58 1999
- last accessed: Sun Sep 19 00:00:00 1999
- last modified: Sun May 19 01:42:16 1996
- mode: 0100666
- inode/dev: 0 2
fstat samples/sample.jpg
- size: 4762 bytes
- owner: 0 0
- created: Tue Sep 07 22:45:58 1999
- last accessed: Sun Sep 19 00:00:00 1999
- last modified: Sun May 19 01:42:16 1996
- mode: 0100666
- inode/dev: 0 0
返回对象中有些属性在非 Unix 平台下是无意义的, 比如 (st_inode , st_dev )
为 Unix 下的为每个文件提供了唯一标识, 但在其他平台可能为任意无意义数
据 .
stat 模块包含了很多可以处理该返回对象的常量及函数. 下面的代码展示了其
中的一些.
可以使用 chmod 和 utime 函数修改文件的权限模式和时间属性，如 Example
1-33 所示.
1.4.3.2. Example 1-33. 使用 os 模块修改文件的权限和时间戳