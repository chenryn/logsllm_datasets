we generate 109 guesses, matching several passwords that
would require up to 1014 iterations from FLA (and others;
to be produced for
equivalent
(a) Probability according to train-set
(b) Probability according to attackes-set
(c) Guess-number according to train-set
Fig. 7. Cumulative statistic for a guessing attack over phpbb. The ﬁgures report the password guessed in the ﬁrst 109 guesses for both static and dynamic.
Authorized licensed use limited to: Tsinghua University. Downloaded on February 25,2022 at 12:27:44 UTC from IEEE Xplore.  Restrictions apply. 
1393
250050007500100001250015000175002000022500#guessed passwords0.000100.000120.000140.000160.000180.000200.000220.000240.00026Cumulative probabilityguessed passwordsstaticdynamic250050007500100001250015000175002000022500#guessed passwords0.000250.000500.000750.001000.001250.001500.001750.00200Cumulative probabilityguessed passwordsstaticdynamic250050007500100001250015000175002000022500#guessed passwords1011101210131014Cumulative guess-numberguessed passwords (log)staticdynamicEXAMPLE OF PECULIAR PASSWORDS GUESSED VIA DPG FOR FOUR PASSWORD LEAKS. THE REQUIRED NUMBERS OF GUESSES (I.E., G) ARE REPORTED
FOR BOTH FLA AND OUR DPG. THESE PASSWORDS HAVE BEEN OBTAINED BY ORDERING ALL THE GUESSED PASSWORDS OF THE DPG ATTACKS IN
TABLE V
DECREASING ORDER BASED ON THE GUESS-NUMBER ASSIGNED FROM FLA . THE TABLE REPORTS THE FIRST 15 ENTRIES OF THE LIST FOR EACH LEAK.
LinkedIn
Youku
Zomato
phpbb
Guess
FLA G
DPG G
Guess
FLA G
DPG G
Guess
FLA G
DPG G
Guess
FLA G
DPG G
o2linkedln
8.2 · 1015
3.4 · 109
guoxuange2
2.5 · 1015
3.2 · 109
z0mato2016
1.9 · 1014
4.5 · 108
phpbb3.14
2.1 · 1014
2.4 · 108
w2linkedln
6.3 · 1015
3.1 · 109
xuhaidong7
1.7 · 1015
3.9 · 109
z0mato2015
1.5 · 1014
7.7 · 108
phpbb0472
2.1 · 1013
6.5 · 108
ydlinkedln
3.6 · 1015
3.6 · 109
caoxia521.
1.3 · 1015
3.5 · 109
zomato9a00
1.2 · 1014
7.8 · 108
phpbb4s2
2.0 · 1013
4.8 · 108
linked6in6
3.6 · 1015
4.3 · 109
woailc521.
9.6 · 1014
3.7 · 109
2defd0
7.3 · 1013
5.1 · 108
phpbb7825
1.3 · 1013
4.2 · 108
j*linkedln
3.0 · 1015
4.3 · 109
woyijiu521
7.3 · 1014
3.5 · 109
zomat 997
4.0 · 1013
1.0 · 109
phpbbid12
1.0 · 1013
1.2 · 108
linked!in.
2.8 · 1015
4.8 · 109
woaicyhx0
6.5 · 1014
3.3 · 109
3aee0f
3.8 · 1013
8.1 · 108
phpbb8424
9.9 · 1012
1.1 · 108
wslinked1n
2.6 · 1015
4.4 · 109
xuhaidong1
6.4 · 1014
3.9 · 109
zomato 496
3.5 · 1013
8.0 · 108
phpbb3546
8.0 · 1012
1.3 · 108
linkedgcin
2.5 · 1015
2.1 · 109
woaiﬁy520
6.4 · 1014
3.8 · 109
zomato 443
3.4 · 1013
1.1 · 109
phpbb4291
7.2 · 1012
1.0 · 108
linked6in2
1.4 · 1015
5.6 · 109
yishwng521
5.3 · 1014
3.7 · 109
zomato.921
3.2 · 1013
1.1 · 109
phpbb8686
5.5 · 1012
1.4 · 108
lslinkedln
1.4 · 1015
4.5 · 109
woshiqujie
5.1 · 1014
3.0 · 109
zomato 591
3.1 · 1013
1.1 · 109
phpbb9801
5.4 · 1012
2.0 · 108
wtlinkedln
1.3 · 1015
4.5 · 109
yixuan520.
5.0 · 1014
3.8 · 109
zomato 543
3.1 · 1013
1.0 · 109
phpbb1902
4.5 · 1012
2.3 · 108
9auiirji
1.2 · 1015
5.5 · 109
slllong520
5.0 · 1014
3.2 · 109
0def0a
3.0 · 1013
4.5 · 108
phpbb5682
4.5 · 1012
1.7 · 108
g2linkedln
1.2 · 1015
3.4 · 109
woaifuyao
4.9 · 1014
1.4 · 109
zomato 441
2.9 · 1013
1.1 · 109
sksdbles
3.8 · 1012
1.2 · 108
cslinkedln
1.1 · 1015
4.4 · 109
woshiqutao
4.7 · 1014
2.4 · 109
zomato 948
2.9 · 1013
1.1 · 109
phpbb1298
3.8 · 1012
1.8 · 108
ymlinkedln
1.0 · 1015
5.2 · 109
liu19981.6
4.6 · 1014
1.3 · 109
zomato 376
2.8 · 1013
1.2 · 109
phpbb2625
3.2 · 1012
1.1 · 108
see Appendix F). Table V reports some of those.
We replicated the same analysis on different password leaks,
observing the same general behavior. We reported high-guess-
number passwords for those other sets as additional examples
in Table V. The listed guesses in the table give a clear intuition
over the nature of such peculiar passwords. These are induced
from unique biases of the attacked distribution. More evident
examples are the passwords based on the name of web services
that dominate the table. These are indeed the prime examples
of peculiar passwords, as they univocally bound to the speciﬁc
password distribution. More heterogeneous guesses can be
observed in the row dedicated to the Youku leak. Here, DPG
captured passwords composed of peculiar dictionary entries
that are not well represented in the train-set of the model
(i.e., RockYou).
Additionally, the guess-numbers reported in Table V indicate
that these are passwords that are considered secure by state-
of-the-art tools, but that can be easily guessed through DPG.
Indeed, our experiments show that DPG allows us to guess
passwords that are unique to the attacked password set.
Such passwords, given their arbitrary distance from the
general password distribution, can be soundly guessed
only by leveraging additional sources of information over
the attacked password space. DPG distills this necessary
knowledge directly through an unsupervised interaction
with the attacked set. This allows the guessing attack to
automatically focus on unique modalities of the target
password distribution that would otherwise be under-
represented or ignored.
V. RELATED WORK
Systematic studies on password guessing date back to
1979 [44], and probably, password guessing attacks have
existed since the inception of the concept of passwords [19].
Since a vast number of works have been proposed in this
active area of research, we limit the discussion to the most
relevant contributions and solutions that are highly related to
our proposals.
Dictionary-based attack and its extensions were among the
ﬁrst forms of elegant guessing techniques (as opposed to
brute-forcing). Among dictionary attacks, the extension with
mangling-rules [44] widely demonstrated its effectiveness on
the trawling attack scenario [2]. Despite its simplicity, this
attack approach persists nowadays in the form of highly
tuned off-the-shelf software: John The Ripper (JTR) [7] and
HashCat [3]. Due to their efﬁciency and easy customization,
these tools are the primary weapons of professional secu-
rity practitioners [53]. Subsequently, probabilistic approaches
naturally found their application in the password guessing
domain. Narayanan et al. [45] apply a Markovian ﬁlter to
reduce the searching space of a guessing attack drastically.
D¨urmuth et al. [27] extend that approach by introducing an
improved version of the guesses enumeration algorithm in
OMEN. Weir et al. [56] introduced Probabilistic Context-
Free Grammars (PCFGs) in the password guessing domain. In
particular, Weir et al. proposed a technique capable of inferring
grammars from a set of observed passwords and use those to
cast new password guesses.
Ciaramella et al. [22] introduced neural networks for pass-
word guessing in their seminal work. In the same line of
development, Melicher et al. [42] proposed FLA (Fast, Lean,
and Accurate) that uses recurrent neural networks [32], [50]
to estimate the password distribution. This model follows the
same estimation procedure of Markov models but relaxes the
underlying n-markovian assumption. FLA can generate new
guesses by performing an enumeration of the password space
via a tree traversal algorithm.
Similarly to our conditional generation framework, different
works have focused on creating a speciﬁc class of password
variations for a given starting password [46], [23], [55],
primarily with the intention of modeling credential tweaking
attacks. Credential tweaking is a targeted attack where the
adversary knows the targeted user’s credentials for one or more
services and attempts to compromise accounts of the same user
on other services. Different from credential stufﬁng, here the
user’s passwords are supposed to be “tweaked” versions11 of
the known ones. In this direction, Pal et al. [46] proposed novel
attack/defense techniques for credential tweaking. Both the
attack and defense techniques are built on top of a password
similarity concept. They model a speciﬁc form of semantic
similarity by using a supervised dataset of user-password pairs.
They assume the distributional hypothesis for passwords to be
true, and deﬁne two passwords to be ‘similar’ if they are often
11The user can create such password variations to accommodate passwords
composition policies of different services.
Authorized licensed use limited to: Tsinghua University. Downloaded on February 25,2022 at 12:27:44 UTC from IEEE Xplore.  Restrictions apply. 
1394
chosen together by users. The proposed attack technique is
based on a probabilistic neural model, and it aims to produce
tweaked variations of an input password for a tweaking
attack. Their technique is based on constructing an embedding
space that is used to estimate the similarity between chosen
passwords. This similarity measure is then used to build a
“personalized password strength meter” that aims to spot
the use of a tweaked password by the user at password
creation time. In contrast to our password representation, their
embedding space does not allow for sampling operation and
passwords generation.
VI. CONCLUSION AND FUTURE WORKS
We presented a complete paradigm shift in the task of
password guessing that is orthogonal to the current research
directions. We demonstrated that locality principles imposed
by the latent representation of deep generative models open
new practical and theoretical possibilities in the ﬁeld. Based
on these properties, we propose two new password guessing
frameworks, i.e., CPG and DPG. The CPG framework enables
the conditional generation of arbitrarily biased passwords. We
empirically demonstrated its inherent advantages with respect
to well-established state-of-the-art approaches. In addition, the
DPG framework demonstrates that the knowledge from freshly
guessed passwords can be successfully generalized and used to
mimic the target password distribution. More importantly, this
guessing technique allows the generation of passwords that are
peculiar for the attacked password distribution, and that would
require an impractical effort to be guessed by other guessers.
AVAILABILITY
The code, pre-trained models, and other materials related to
our work are publicly available at [5].
REFERENCES
[1] “Chinese Video Service Giant Youku Hacked; 100M Accounts Sold on
Dark Web”. https://tinyurl.com/yb78uxnh.
[2] “Cracking Passwords 101”. https://tinyurl.com/y268xahe.
[3] “hashcat”. https://tinyurl.com/y636jsz9.
[4] “Hotmail Password Leak”. https://tinyurl.com/yyr2je4m.
[5] “Improving Password Guessing via Representation Learning”. https:
//github.com/pasquini-dario/PLR.
[6] “InsidePro-PasswordsPro Rules”. https://tinyurl.com/vd9jzaz.
[7] “John the Ripper”. https://tinyurl.com/j91l.
[8] “Leak Youku”. https://tinyurl.com/y9f2xez6.
[9] “LinkedIn Password Leak”. https://tinyurl.com/yxf7f5gv.
[10] “MySpace Password Leak”. https://tinyurl.com/y433aaah.
[11] “phpbb Password Leak”. https://tinyurl.com/yxonf7um.
[12] “RockYou Password Leak”. https://tinyurl.com/af858jc.
[13] “The Carnegie Mellon University Password Research Group’s Password
Guessability Service”. https://tinyurl.com/y9362h6z.
[14] “Zomato hacked: Security breach results in 17 million user data stolen”.
https://tinyurl.com/y8xec7sr.
[15] “Zomato Password Leak”. https://tinyurl.com/ya3sthdp.
[16] Kamran Ali, Alex X Liu, Wei Wang, and Muhammad Shahzad.
Keystroke Recognition Using WiFi Signals. In ACM MobiCom, pages
90–102, 2015.
[17] Davide Balzarotti, Marco Cova, and Giovanni Vigna. Clearshot: Eaves-
dropping on Keyboard Input from Video. In IEEE S&P, pages 170–183,
2008.
[18] Yoshua Bengio, Aaron Courville, and Pascal Vincent. Representation
IEEE Transactions on
Learning: A Review and New Perspectives.
Pattern Analysis and Machine Intelligence, 35(8):1798–1828, 2013.
[19] Hossein Bidgoli. Handbook of Information Security, Information War-
fare, Social, Legal, and International Issues and Security Foundations,
volume 2. John Wiley & Sons, 2006.
[20] Samuel R. Bowman, Luke Vilnis, Oriol Vinyals, Andrew Dai, Rafal
Jozefowicz, and Samy Bengio. Generating sentences from a continuous
In Proceedings of The 20th SIGNLL Conference on Compu-
space.
tational Natural Language Learning, pages 10–21, Berlin, Germany,
August 2016. Association for Computational Linguistics.
[21] Andrew Brock, Jeff Donahue, and Karen Simonyan. Large Scale GAN
Training for High Fidelity Natural Image Synthesis. arXiv preprint
arXiv:1809.11096, 2018.
[22] Angelo Ciaramella, Paolo D’Arco, Alfredo De Santis, Clemente Galdi,
and Roberto Tagliaferri. Neural Network Techniques for Proactive
IEEE Transactions on Dependable and Secure
Password Checking.
Computing, 3(4):327–339, 2006.
[23] Anupam Das, Joseph Bonneau, Matthew Caesar, Nikita Borisov, and
In NDSS
XiaoFeng Wang. The Tangled Web of Password Reuse.
Symposium, pages 1–15, 2014.
[24] Peter J Diggle and Richard J Gratton. Monte Carlo Methods of Inference
for Implicit Statistical Models. Journal of the Royal Statistical Society:
Series B (Methodological), 46(2):193–212, 1984.
[25] Jeff Donahue, Philipp Kr¨ahenb¨uhl, and Trevor Darrell. Adversarial
Feature Learning. arXiv preprint arXiv:1605.09782, 2016.
[26] Vincent Dumoulin, Ishmael Belghazi, Ben Poole, Olivier Mastropietro,
Alex Lamb, Martin Arjovsky, and Aaron Courville. Adversarially
Learned Inference. arXiv preprint arXiv:1606.00704, 2016.
[27] Markus D¨urmuth, Fabian Angelstorf, Claude Castelluccia, Daniele Per-
ito, and Abdelberi Chaabane. OMEN: Faster Password Guessing using
an Ordered Markov Enumerator. In ESSoS, pages 119–132, 2015.
[28] Maximilian Golla and Markus D¨urmuth. On the Accuracy of Password
Strength Meters. In ACM CCS, pages 1567–1582, 2018.
[29] Ian Goodfellow. NIPS 2016 Tutorial: Generative Adversarial Networks.