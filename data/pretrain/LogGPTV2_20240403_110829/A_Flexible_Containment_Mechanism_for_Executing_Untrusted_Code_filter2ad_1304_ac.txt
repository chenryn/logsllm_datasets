vative approach in which access is strictly limited. A
descriptor with read privilege is required for examining
the conﬁguration of an object. Likewise, a descriptor
with write privilege is required for calling sbxwait()
on a sandbox or modifying an object. Descriptors may
be obtained only as follows:
 The creator of an object receives a descriptor with
both read and write privileges for the new object.
the child inherits all of
 When a process forks,
the parent’s descriptors along with their associated
privileges.
If a process inside a sandbox creates an object, it
may specify that a link is created for the new object.
Other processes in the same sandbox may then use
the sbxopen() system call to open descriptors
for the new object. This is analogous to access-
ing ﬁles with the open() system call. Processes
inside a given sandbox may therefore have shared
access to child objects.
 There is only one circumstance in which processes
not within the immediate boundaries of a given
sandbox may open descriptors for its child objects.
When creating a component, a process may label
it as public. In this case, processes in descendant
sandboxes may open descriptors for the component
with read-only access.
Our design provides a system call for dropping read and
write privileges associated with descriptors. An object
that is linked may also be unlinked, or the read and write
5Pools are collections of sandboxes. They will be described in
more depth later.

privileges associated with the link may be dropped in-
dividually. Thus, access privileges may be irreversibly
dropped in order to eliminate potential points of attack.
We may eventually consider extending our model to al-
low more ﬂexible speciﬁcation of privileges. One possi-
bility is to deﬁne a new type of component that controls
access to the sandboxes and components themselves.
Although there is a certain elegance in this approach, it
creates additional complexity that may be undesirable.
2.7 Static vs. Dynamic
Security policy enforcement mechanisms may be static
or dynamic in nature. If the policy seldom changes, then
a static mechanism is best because it excludes the pos-
sibility of unauthorized tampering. However, a dynamic
mechanism may be preferable if the policy changes fre-
quently. Our mechanism provides both options. Sand-
boxes and components are dynamic by default, but drop-
ping write privileges causes them to become static.
When adjustments to security mechanisms are made,
they should ideally have an immediate effect on all rele-
vant aspects of system behavior. Our implementation of
nested sandboxes was designed with this consideration
in mind. Since privilege checks are done individually
at each level, reconﬁguration of a sandbox immediately
effects all of its descendants.
File descriptors represent a similar area of concern. For
instance, suppose that a process opens some ﬁle and
its sandbox is then adjusted so that access to the ﬁle
is denied. Under our current implementation, the pro-
cess may continue to access the ﬁle through its previ-
ously opened ﬁle descriptor. Adding the ability to re-
voke privileges stored in ﬁle descriptors would be rel-
atively easy. This may be done by attaching sandbox-
related tags to ﬁle descriptors and performing additional
privilege checks during read() and write() system
calls. Although this option has little value for guarding
conﬁdentiality, it may still be useful as a damage control
mechanism for protecting data integrity. We may there-
fore eventually implement this feature.
2.8 Generic vs. Speciﬁc
When specifying privileges for sandboxed programs,
two alternative strategies are possible. One option is
to grant privileges that are custom-tailored to individual
programs. This approach is advantageous because it fol-
lows the principle of least privilege. Since each program
is only allowed to perform actions that are necessary
for proper functioning, the potential for abuse of priv-
ileges decreases. However, creating specialized policies
for many applications is labor-intensive. It is also error-
prone, since required privileges may be hard to predict in
advance. Applications may therefore fail unexpectedly
if their sandboxes constrain them too tightly.
To address these problems, one may create generic
protection domains for groups of programs with sim-
ilar behavior. A sandboxing mechanism known as
MAPbox[11] employs this technique. Although this ap-
proach may simplify sandbox construction, appropriate
behavior classes may be difﬁcult to create. If privileges
are deﬁned too conservatively, then the scope of applica-
bility of each behavior class becomes unacceptably nar-
row. However, loosely speciﬁed behavior classes stray
from the principle of least privilege. Some application-
speciﬁc differences among programs within a behavior
class may be handled by a technique that MAPbox refers
to as parameterization. For instance, a group of network-
oriented services may function in a similar manner but
differ in the ports from which they receive incoming con-
nections. In this case, their behavior class may take a
port number as a parameter.
Using our facility, behavior classes could potentially be
represented as groups of components. Set operations
could then be employed to create customized versions
for individual programs in a manner somewhat similar
to parameterization.
Alternately, our blocking mechanism may be used to
create custom-tailored sandboxes for individual applica-
tions. For example, consider the following sequence of
events:
1. A user executes a program inside a sandbox. The
user has no way of knowing ahead of time what
privileges it will require. Therefore the sandbox is
made initially very restrictive.
2. When the program attempts to perform a denied ac-
tion, it blocks and the user learns exactly what hap-
pened. The user can then decide to allow or deny
the action. To allow all future operations of this
type, the user may adjust the appropriate compo-
nent.
3. When the sandboxed program terminates, the user
may save the ﬁnal sandbox conﬁguration to be
reused when executing the program in the future.
This technique makes sandbox construction less labor-
intensive, since privileges may be granted interactively.
Attempted actions that might otherwise cause a sand-
boxed program to fail may therefore be allowed at the
time they are attempted. This eliminates the need to ex-
ecute the program multiple times, making incremental
changes to its sandbox after each execution. Further-
more, programs may be constrained very tightly with-
out adverse consequences. Additional privileges may be
granted at runtime as they are needed.
2.9 Transient vs. Persistent
Sandboxes may be implemented as lightweight, dispos-
able containers or as persistent entities that maintain
relatively static, long-term associations with ﬁles that
they contain. Our current design only provides transient
sandboxes. We chose this option because they require
substantially less implementation effort than persistent
sandboxes. However, if time permits, we may eventu-
ally extend our facility to provide both options.
WindowBox[13], a sandboxing system implemented
within the Windows NT kernel, is a design in which
sandboxes are persistent entities. It consists of a set of
desktops that are completely separate from each other
and from the rest of the system. Users may give some
desktops more privileges than others. They may also
place individual programs and other ﬁles within a given
desktop. The association between a ﬁle and its desk-
top persists until the user either deletes the ﬁle or moves
it to a different desktop. This feature is useful because
a given program is automatically conﬁned to its desk-
top whenever the user executes it. Therefore, the se-
curity policy associated with the desktop is consistently
enforced. Associations between ﬁles and their desktops
also provide an alternate means of deﬁning privileges.
Speciﬁcally, access may be granted because a ﬁle resides
in the same desktop as the program attempting to open
it.
A potential advantage of deﬁning sandboxes as transient
entities is that they may be efﬁciently discarded when no
longer needed. Our design provides a feature that elim-
inates unnecessary overhead for creating and destroying
sandboxes. With this option, a server may create pools
of sandboxes for different types of client connections.
The server does the following for each client connection:
2. The child makes an sbxapply() system call,
passing in a descriptor for the appropriate pool. If
the pool is not empty, this causes a sandbox to be
removed from the pool. Otherwise, a new sandbox
is created and associated with the pool. The newly
obtained sandbox is applied to the child, which then
handles the client request.
3. When the child dies, the reference count on its
sandbox drops to zero. Instead of being destroyed,
the sandbox is returned to the pool for later reuse.
Creation of a sandbox pool requires speciﬁcation of a
maximum capacity. If the pool becomes full, additional
sandboxes will be destroyed instead of being returned to
it. A pool’s creator may adjust its capacity value, ﬁnd
out how many sandboxes the pool contains at a given
instant, or make adjustments to the current number of
sandboxes in the pool.
2.10 Interaction with Other Security Mecha-
nisms
Our facility is designed to be implemented within exist-
ing systems. It must therefore peacefully coexist with
other security mechanisms. This consideration may be
viewed from the following two perspectives:
1. Can other mechanisms override the denial of a priv-
ilege by a sandbox?
2. If a sandbox grants a given privilege, can other
mechanisms override this decision?
The answer to the ﬁrst question is ”no.” In particu-
lar, root has no special privileges that allow sandbox-
imposed constraints to be bypassed. This property en-
hances the security of our mechanism. It also permits
construction of sandboxes that conﬁne root programs to
a subset of the privileges that they normally have. The
answer to the second question is ”yes.” This property al-
lows sandboxes to coexist with other mechanisms with-
out compromising their effectiveness.
3 Speciﬁcation of Privileges
1. The server forks a child process. The child inher-
its the parent’s descriptors for the various sandbox
pools that the server created.
We now present the details of how privileges are repre-
sented in our design. Although the various component
Before:
Before:
3
7
10
15
5
7
9
11
15
include (8, 12)
exclude (6, 12)
After:
3
15
After:
5
13 15
Figure 3: Include operation
Figure 4: Exclude operation
types have individual differences, several common ele-
ments are shared among them. One shared feature is
support for the set operations of intersection, union, and
complement. Additionally, the components employ the
following two common mechanisms:
Interval lists allow speciﬁcation of intervals of val-
ues over a ﬁxed range. For instance, we could use
an interval list to represent all integers between 10
and 100, the value 250, and all integers between
400 and 500. The components use this data struc-
ture in several places.
 Sandbox sets specify privileges that allow sand-
boxed processes to perform actions relative to other
processes. The ability to send signals is an example
of this type of privilege.
These two shared building blocks simplify the imple-
mentation of the components that use them. They
also facilitate the construction of new component types.
Next, we give a more detailed presentation of their de-
sign. This is followed by descriptions of how the indi-
vidual component types are constructed.
3.1
Interval Lists
Interval lists provide a convenient way of specifying and
manipulating sets of unsigned integers. They support the
following operations:
/&0213204
=549@A . Notice that this result is obtained rather
than  
=/B0A13C0>

6547&0>549;2 .
Interval lists always merge intervals together so that
no two intervals are overlapping or immediately ad-
jacent to each other. This yields the simplest possi-
ble representation.
 Exclude: Figure 4 illustrates the exclude opera-
In this example, we start with the interval
tion.
list  
9&0A13C0>
D&0ED'204
65;5@085:9;A . The interval 
F&085:?;
is then excluded. This produces the interval list
9G0A9;C0>
654/&0>549;2 .
Intersection: This operation takes two interval lists
as operands and produces a new interval list repre-
senting the intersection of the sets of integers they
specify. The intervals contained in the result are all
nonoverlapping and separated by at least one inte-
ger value.
 Union: This operation is similar to intersection, ex-
cept that the union is computed.
 Complement:
val
the
instance,
This operation takes an inter-
For
is
list and produces its complement.
9G0>5>7'A
complement
of
=7&0EH'C0>
65@5;0 UINT MAX2 .
 Query point: This operation takes an integer as a
parameter and returns a Boolean value indicating
whether any interval in the list contains it.
Include: Figure 3 illustrates the include operation.
In this example, an interval list initially speciﬁes
the intervals  
is then included. This produces the interval list
/&0213204
6547&085:9;2 . The interval 
=54?@
We will also provide a mechanism for iterating through
an interval list and examining its contents, although this
has not yet been implemented.


 
 

 
 
C2
S3
S9
S5
S2
S6
C3
S S6
7
1C
S9
p
S1
S3
S7
Z
Figure 5: Behavior of sandbox sets
S4
Y
S8
S9
X
S10
!6R
3.2 Sandbox Sets
Some privileges govern what a process may do relative
to other processes. For example, we may wish to allow a
sandboxed process to send signals to some processes but
not others. One way of accomplishing this is to specify
privileges individually for every existing process. How-
ever, this is clearly not practical. Therefore processes
must be grouped together in some manner. Our design
employs sandboxes as the basic unit of organization for
assigning privileges relative to processes. For example,
signal components specify sets of sandboxes containing
processes that may be signaled. We chose sandboxes as
the unit of grouping because this is the simplest option.
Introducing some other abstraction would create addi-
tional complexity without any clear beneﬁts.
Figure 5 illustrates how sandbox sets operate. Signal
components 
! , 
! , 
# , and K
respectively. 
cesses in L , 
# allows 
ML , and JI allows MK