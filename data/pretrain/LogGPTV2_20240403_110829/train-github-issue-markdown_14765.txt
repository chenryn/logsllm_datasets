stats.mode seems surprisingly slow, especially since it's very much the same
as `find_repeats`. Despite only needing to return the first value and being
pretty much the same function, stats.mode is much slower than find_repeats
(which appears to be a very thin wrapper around a fortran function), here's
some benchmarking:
    import numpy as np
    import scipy.stats as stats
    arr1 = np.random.randint(-1000, 1000, 10000)
    %timeit stats.mode(arr1)
    %timeit stats.find_repeats(arr1)
which yields
    10 loops, best of 3: 142 ms per loop
    1000 loops, best of 3: 832 µs per loop
The problem is that the implementation is very slow when the number of unique
labels is much greater than the number of unique values, because it iterates
over every count:
    arr1 = np.random.randint(-100, 100, 10000)
    ser = pd.Series(arr1)
    %timeit stats.mode(arr1)
    %timeit stats.find_repeats(arr1)
yields
    100 loops, best of 3: 15.2 ms per loop
    1000 loops, best of 3: 681 µs per loop
And is still twice as slow with 20 uniques vs. 10000 entries:
    arr1 = np.random.randint(-10, 10, 10000)
    %timeit stats.mode(arr1)
    %timeit stats.find_repeats(arr1)
yielding
    1000 loops, best of 3: 1.89 ms per loop
    1000 loops, best of 3: 508 µs per loop
And still not great with 2 dimensions:
    arr1 = np.random.randint(-100, 100, (500, 100))
    %timeit stats.mode(arr1)
    %timeit stats.find_repeats(arr1)
    # approximate finding repeats on each axis:
    %timeit [stats.find_repeats(arr1[i]) for i in range(len(arr1))]
which yields:
    10 loops, best of 3: 50.6 ms per loop
    100 loops, best of 3: 3.6 ms per loop
    100 loops, best of 3: 4.61 ms per loop
At least for 1D, a better implementation would be to take advantage of
find_repeats (or reuse its internals) rather than iterating over uniques, e.g.
something like this for 1D:
    def faster_mode1D(a):
        arr = np.asarray(a) # would be _chk_array
        v, c = stats.find_repeats(arr)
        if len(c) == 0:
            arr.sort() # mimic first value behavior
            return arr[0], 1.
        else:
            pos = c.argmax()
            return v[pos], c[pos]
Not sure whether this makes as much sense for multiple dimensions, but maybe
it would be worth special-casing 1D ndarrays? The performance difference is
pretty big.