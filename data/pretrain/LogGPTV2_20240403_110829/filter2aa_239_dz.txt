        IPHostEntry ipHost = await Dns.GetHostEntryAsync(hostname);
        WriteLine($"Hostname: {ipHost.HostName}");
        foreach (IPAddress address in ipHost.AddressList)
        {
        WriteLine($"Address Family: {address.AddressFamily}");
        WriteLine($"Address: {address}");
        }
      }
      catch (Exception ex)
      {
        WriteLine(ex.Message);
      }
    }
运行应用程序，并输入几个主机名，得到如下输出。对于主机名www.orf.at，可以看
到这个主机名定义了多个IP地址。
    Hostname:      www.cninnovation.com
    Hostname: www.cninnovation.com
    Address Family: InterNetwork
    Address: 65.52.128.33
    Hostname:      www.orf.at
    Hostname: www.orf.at
    Address Family: InterNetwork
    Address: 194.232.104.150
    Address Family: InterNetwork
    Address: 194.232.104.140
    Address Family: InterNetwork
    Address: 194.232.104.142
    Address Family: InterNetwork
    Address: 194.232.104.149
    Address Family: InterNetwork
    Address: 194.232.104.141
    Address Family: InterNetwork
    Address: 194.232.104.139
    Hostname:      exit
    bye!
  注意： Dns类是比较有限的，例如不能指定使用非默认的DNS服务器。此
外，IPHostEntry的Aliases属性不在GetHostEntryAsync方法中填充。它只在Dns类的过时
方法中填充，而且这些方法也不完全地填充这个属性。要充分利用DNS查找功能，最
好使用第三方库。
下面介绍一些低级协议，如TCP和UDP等。
25.5 使用TCP
HTTP协议基于传输控制协议（Transmission Control Protocol, TCP）。要使用TCP，客
户端首先需要打开一个到服务器的连接，才能发送命令。而使用HTTP，发送文本命令。
HttpClient和WebListener类隐藏了HTTP协议的细节。使用TCP类发送HTTP请求时，需要
更多地了解HTTP协议。TCP类没有提供用于HTTP协议的功能，必须自己提供。另一方
面，TCP类提供了更多的灵活性，因为可以使用这些类与基于TCP的其他协议。
传输控制协议（TCP）类为连接和发送两个端点之间的数据提供了简单的方法。端点
是IP地址和端口号的组合。已有的协议很好地定义了端口号，例如，HTTP使用端口80，
而SMTP使用端口25。Internet地址编码分配机构（Internet Assigned Numbers Authority,
IANA, http://www.iana.org/）把端口号赋予这些已知的服务。除非实现某个已知的服务，
否则应选择大于1024的端口号。
TCP流量构成了目前Internet上的主要流量。TCP通常是首选的协议，因为它提供了有
保证的传输、错误校正和缓冲。TcpClient类封装了TCP连接，提供了许多属性来控制连
接，包括缓冲、缓冲区的大小和超时。通过GetStream（）方法请求NetworkStream对象可
以实现读写功能。
TcpListener类用Start（）方法侦听引入的TCP连接。当连接请求到达时，可以使用
AcceptSocket（）方法返回一个套接字，与远程计算机通信，或使用AcceptTcpClient（）
方法通过高层的TcpClient对象进行通信。阐明TcpListener类和TcpClient类如何协同工作的
最简单方式是给出一个示例。
25.5.1 使用TCP创建HTTP客户程序
首先，创建一个控制台应用程序（包），向Web服务器发送一个HTTP请求。以前用
HttpClient类实现了这个功能，但使用TcpClient类需要深入HTTP协议。
HttpClientUsingTcp示例代码使用了以下的依赖项和名称空间：
依赖项：
    NETStandard.Library
名称空间：
    System
    System.IO
    System.Net.Sockets
    System.Text
    System.Threading.Tasks
    static System.Console
应用程序接受一个命令行参数，传递服务器的名称。这样，就调用RequestHtmlAsync
方法，向服务器发出HTTP请求。它用Task的Result属性返回一个字符串（代码文件
HttpClientUsingTcp /Program.cs）：
    static void Main(string[] args)
    {
      if (args.Length ! = 1)
      {
        ShowUsage();
      }
      Task t1 = RequestHtmlAsync(args[0]);
      WriteLine(t1.Result);
      ReadLine();
    }
    private static void ShowUsage()
    {
      WriteLine("Usage: HttpClientUsingTcp hostname");
    }
现在看看RequestHtmlAsync方法的最重要部分。首先，实例化一个TcpClient对象。其
次，使用ConnectAsync方法，在HTTP默认端口80上建立到主机的TCP连接。再次，通过
GetStream方法检索一个流，使用这个连接进行读写：
    private const int ReadBufferSize = 1024;
    public static async Task RequestHtmlAsync(string hostname)
    {
      try
      {
        using (var client = new TcpClient())
        {
        await client.ConnectAsync(hostname, 80);
        NetworkStream stream = client.GetStream();
        //etc.
        }
      }
    }
流现在可以用来把请求写到服务器，读取响应。HTTP是一种基于文本的协议，所以
很容易在字符串中定义请求。为了向服务器发出一个简单的请求，标题定义了HTTP方法
GET，其后是URL/的路径和HTTP版本HTTP / 1.1。第二行定义了Host标题、主机名和端
口号，第三行定义了Connection标题。通常，通过Connection标题，客户端请求keep-
alive，要求服务器保持连接打开，因为客户端希望发出更多的请求。这里只向服务器发出
一个请求，所以服务器应该关闭连接，从而close设置为Connection标题。为了结束标题信
息，需要使用\r\n给请求添加一个空行。标题信息调用NetworkStream的方法WriteAsync，
用UTF-8编码发送。\r\n为了立即向服务器发送缓存，请调用FlushAsync方法。否则数据就
可能保存在本地缓存：
        //etc.
        string header = "GET / HTTP/1.1\r\n" +
          $"Host: {hostname}:80\r\n" +
          "Connection: close\r\n" +
          "\r\n";
        byte[] buffer = Encoding.UTF8.GetBytes(header);
        await stream.WriteAsync(buffer, 0, buffer.Length);
        await stream.FlushAsync();
现在可以继续这个过程，从服务器中读取回应。不知道回应有多大，所以创建一个动
态生长的MemoryStream。使用ReadAsync方法把服务器的回应暂时写入一个字节数组，这
个字节数组的内容添加到MemoryStream中。从服务器中读取所有数据后，StreamReader接
管控制，把数据从流读入一个字符串，并返回给调用者：
        var ms = new MemoryStream();
        buffer = new byte[ReadBufferSize];
        int read = 0;
        do
        {
          read = await stream.ReadAsync(buffer, 0, ReadBufferSize);
          ms.Write(buffer, 0, read);
          Array.Clear(buffer, 0, buffer.Length);
        } while (read > 0);
        ms.Seek(0, SeekOrigin.Begin);
        var reader = new StreamReader(ms);
        return reader.ReadToEnd();
      }
      }
      catch (SocketException ex)
      {
      WriteLine(ex.Message);
      return null;
      }
    }
把一个网站传递给程序，会看到一个成功的请求，其HTML内容显示在控制台上。
现在该创建一个TCP侦听器和自定义协议了。
25.5.2 创建TCP侦听器
创建基于TCP的自定义协议需要对架构进行一些思考。可以定义自己的二进制协议，
每个位都保存在数据传输中，但读取比较复杂，或者可以使用基于文本的格式，例如
HTTP或FTP。对于每个请求，会话应保持开放还是关闭？服务器需要保持客户端的状
态，还是保存随每个请求一起发送的所有数据？
自定义服务器支持一些简单的功能，如回应和反向发送消息。自定义服务器的另一个
特点是，客户端可以发送状态信息，使用另一个调用再次检索它。状态会临时存储在会话
状态中。尽管这是一个简单的场景，但我们知道需要设置它。
TcpServer示例代码实现为一个控制台应用程序（包），利用以下依赖项和名称空
间：
依赖项：
    NETStandard.Library
名称空间：
    System
    System.Collections
    System.Collections.Concurrent
    System.Linq
    System.Net.Sockets
    System.Text
    System.Threading
    System.Threading.Tasks
    static System.Console
    static TcpServer.CustomProtocol
自定义TCP侦听器支持几个请求，如表25-1所示。
表25-1
请求
说明
HELO::v1.0
启动连接后，这个命令需要发送。其他命令将不被接受
ECHO::message
ECHO命令向调用者返回消息
REV::message
REV命令保留消息并返回给调用者
BYE
BYE命令关闭连接
SET::key=value
GET::key
SET命令设置服务器端状态，可以用GET命令检索
请求的第一行是一个会话标识符，并带有前缀ID。它需要与每个请求一起发送，除
了HELO请求之外。它作为状态标识符使用。
协议的所有常量都在静态类CustomProtocol中定义（代码文件TcpServer
/CustomProtocol.cs）：
    public static class CustomProtocol
    {
      public const string SESSIONID = "ID";
      public const string COMMANDHELO = "HELO";
      public const string COMMANDECHO = "ECO";
      public const string COMMANDREV = "REV";
      public const string COMMANDBYE = "BYE";
      public const string COMMANDSET = "SET";
      public const string COMMANDGET = "GET";
      public const string STATUSOK = "OK";
      public const string STATUSCLOSED = "CLOSED";
      public const string STATUSINVALID = "INV";
      public const string STATUSUNKNOWN = "UNK";
      public const string STATUSNOTFOUND = "NOTFOUND";
      public const string STATUSTIMEOUT = "TIMOUT";
      public const string SEPARATOR = "::";
      public static readonly TimeSpan SessionTimeout = TimeSpan.FromMinutes(2);
    }
Run方法（从Main方法中调用）启动一个计时器，每分钟清理一次所有的会话状态。
Run方法的主要功能是通过调用RunServerAsync方法来启动服务器（代码文件TcpServer /
Program.cs）：
    static void Main()
    {
      var p = new Program();
      p.Run();
    }
    public void Run()
    {
      using (var timer = new Timer(TimerSessionCleanup, null,
        TimeSpan.FromMinutes(1), TimeSpan.FromMinutes(1)))
      {
        RunServerAsync().Wait();
      }
    }
对于TcpListener类，服务器最重要的部分在RunServerAsync方法中。TcpListener使用
IP地址和端口号的构造函数实例化，在IP地址和端口号上可以访问侦听器。调用Start方
法，侦听器开始侦听客户端连接。AcceptTcpClientAsync等待客户机连接。一旦客户端连
接，就返回TcpClient实例，允许与客户沟通。这个实例传递给RunClientRequest方法，以
处理请求。
    private async Task RunServerAsync()
    {
      try
      {
        var listener = new TcpListener(IPAddress.Any, portNumber);
        WriteLine($"listener started at port {portNumber}");
        listener.Start();
        while (true)
        {
        WriteLine("waiting for client...");
        TcpClient client = await listener.AcceptTcpClientAsync();
        Task t = RunClientRequest(client);
        }
      }
      catch (Exception ex)
      {
        WriteLine($"Exception of type {ex.GetType().Name}, Message: {ex.Message}"
);
      }
    }
为了在客户端上读写，TcpClient的GetStream方法返回NetworkStream。首先需要读取
来自客户机的请求。为此，可以使用ReadAsync方法。ReadAsync方法填充一个字节数
组。这个字节数组使用Encoding类转换为字符串。收到的信息写入控制台，传递到
ParseRequest辅助方法。根据ParseRequest方法的结果，创建客户端的回应，使用
WriteAsync方法返回给客户端。
    private Task RunClientRequestAsync(TcpClient client)
    {
      return Task.Run(async () =>
      {
        try
        {
        using (client)
        {
          WriteLine("client connected");
          using (NetworkStream stream = client.GetStream())
          {
            bool completed = false;
            do
            {
              byte[] readBuffer = new byte[1024];
              int read = await stream.ReadAsync(
            readBuffer, 0, readBuffer.Length);
              string request = Encoding.ASCII.GetString(readBuffer, 0, read);
              WriteLine($"received {request}");
              string sessionId;
              string result;
              byte[] writeBuffer = null;
              string response = string.Empty;
              ParseResponse resp = ParseRequest(
            request, out sessionId, out result);
              switch (resp)
              {
          case ParseResponse.OK:
            string content = $"{STATUSOK}::{SESSIONID}::{sessionId}";
            if (! string.IsNullOrEmpty(result))
            {
              content += $"{SEPARATOR}{result}";
            }