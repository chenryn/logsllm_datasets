### Semantics and Code Ownership
The semantics of the ECU (Engine Control Unit) are detailed in the ECU documentation. Our investigation has found no evidence that automobile manufacturers write any of the code running on the ECU. All the code we analyzed in this study was documented in materials copyrighted by Bosch, with automakers identified as the intended customers.

### Related Work
There is a scarcity of publicly available technical documentation on defeat devices. Domke and Lange were the first to provide several technical insights into the defeat device used in the Volkswagen Sharan [9], [10]. We have leveraged these findings and adopted a similar methodology to identify defeat devices. The New York Attorney General’s complaint against Volkswagen AG [15] offers general insights into defeat devices but lacks technical details. Fiat Chrysler Automobiles (FCA) is currently under investigation in Europe [17], and to the best of our knowledge, we are the first to document the implementation of this defeat device.

### Dataset
In this paper, we focus on the EDC17 ECU manufactured by Bosch. This diesel engine ECU was used in vehicles implicated in the Volkswagen emission scandal and the Fiat 500X. Our analysis relies on three primary data sources, which we describe below.

#### A. Function Sheets
Function sheets, known as "Funktionsrahmen" in German, document the functional behavior of a specific release of the ECU firmware. These sheets use a formal block diagram language to precisely specify the input/output behavior of each software functional unit, along with explanatory text. The block diagrams and text also name the variables and calibration constants used by the functional units. Automakers can tune the ECU's behavior by adjusting these calibration constants. In Bosch function sheets, scalar calibration constants are identified by the `C` suffix, one-dimensional array constants by the `MAP` suffix, curve definitions by the `CA` suffix, and higher-dimensional arrays by the `CUR` suffix.

Function sheets are generally not publicly available, but many find their way into the automobile performance tuning community. All the function sheets used in this work were obtained from such tuner sites. All figures in this paper are derived from these publicly available function sheets.

**Authenticity:**
Since we did not obtain the function sheets directly from Bosch, we cannot be absolutely certain of their authenticity. However, all function sheets bear a “Robert Bosch GmbH” copyright and show no signs of alteration by a third party. We have not encountered any function sheets that appear to be tampered with. We have also verified that key functional elements, such as the Volkswagen “acoustic condition” described in Section IV-A, match the code in the firmware.

#### B. A2L and OLS Files
The automotive industry uses the ASAM MCD-2 MC [1] file format, commonly called A2L, to communicate elements of a firmware image that need to be modified during the calibration process. An A2L file is similar to a .map or .pdb file used by developers on Linux or Windows platforms, respectively. While these file types map debugging symbols to concrete addresses, A2L files can also provide contextual information beyond mere symbol names, such as axis descriptions for lookup tables, byte order information, and unit conversion formulas.

A2L files, due to their detailed and insightful content, are typically only available to those working on engine development, calibration, and maintenance. However, car tuning enthusiasts often obtain and trade these files online. To gain a deeper understanding of certain ECU firmware images, we obtained access to such files. When an A2L file was not available for a given firmware image, we focused on the binary code and used insights from similar ECUs to guide our analysis.

In some cases, we relied on OLS files, an application format used by the WinOLS software to change configuration values in firmware. The OLS format includes both a firmware image and elements of the A2L file annotating calibration constants.

**Authenticity:**
As with function sheets, we did not obtain the A2L files from Bosch or the car maker, so we cannot guarantee their authenticity with absolute certainty. Each A2L file is paired with a specific firmware image, and we confirmed their match before using the A2L to extract values from the image. We used the A2L to identify variables and constants in the code extracted from the firmware, and examining the context served as a sanity check.

#### C. Firmware Images
We also obtained firmware images from various sources. Similar to A2L files, firmware images are circulated within the car tuning community. We obtained several images from the tuner community and from the erWin portal, a platform operated by Volkswagen that provides access to official firmware images for car repair shops. The portal provides archives containing firmware updates up to a certain date, with each image named after its software part number and revision, allowing unique identification. The timestamp is roughly equivalent to the release date of the firmware.

Unfortunately, the images do not contain additional metadata, such as the actual model in which the firmware is deployed. We used online portals offered by aftermarket automobile part vendors to determine which vehicles a firmware image was used on.

**Authenticity:**
Firmware data for VW, Audi, Seat, and Skoda was obtained from the erWin portal, operated by Volkswagen. The newest image is dated October 11, 2016. We also obtained Volkswagen group images dated 2009–2010 from various online sources. We included only images for which Freigabeschein (street release certification) documents allowed us to obtain information about both the release date and car model. We obtained the Fiat 500X OLS file from a tuning site, sold to us as an original (unmodified) image. Our main findings based on this OLS file align with the test results of the German KBA [22].

### Defeat Devices
A defeat device is a mechanism that causes a vehicle to behave differently during an emission test than on the road. Conceptually, a defeat device has two components:
- **Monitor:** Determine if observed conditions rule out an emission test.
- **Modify:** Alter vehicle behavior when not under test.

Defeat devices rely on various external or internal variables to detect if a test is taking place. For example, from 1991 to 1995, General Motors used the fact that air conditioning was turned on in its Cadillac automobiles to rule out a test cycle, making the air-fuel mixture richer to address an engine stalling problem, but also exceeding CO emission limits [14]. General Motors was fined $11 million and forced to recall all affected vehicles.

The monitoring element of a defeat device does not need to be perfect, as long as its error is one-sided. Like the Cadillac device, the defeat devices we found assume that the vehicle is under test unless some internal or external variable allows it to rule out an ongoing test. Then, when the monitoring element signals that the observed variables are not consistent with any known test cycle, the vehicle can switch to an operating regime favored by the manufacturer for real driving rather than the clean regime necessary to pass the emission test.

In the remainder of this section, we describe the defeat devices used by Volkswagen and Fiat to circumvent emission testing and their effect on vehicle behavior. Our description is based on function sheets for the ECU, reverse engineering of the firmware, and publicly available information, notably the Complaint filed by the State of New York against Volkswagen and its US subsidiaries [15].

#### A. The Volkswagen Device: Test Detection
The Volkswagen defeat device is a continually evolving family of devices. All instances are organized around a single condition monitoring block that determines if the vehicle is undergoing testing and points throughout emission-related ECU modules where the result of this determination can affect the behavior of the module. The monitoring element of the Volkswagen defeat device is encapsulated in a function block that computes the status of the "customer-specific acoustic condition." The outcome of the computation is represented by the signal/variable `InjCrv stNsCharCor` (shortened to `stNsCharCor`). This signal is then used at many points in the ECU to alter the behavior of the engine. Figure 2 shows the logic block responsible for computing the acoustic condition (taken from the function reference sheet created by Bosch). The value `stNsCharCor = 0` means that the ECU considers itself to be in normal driving mode, while `stNsCharCor = 1` indicates testing (emissions-compliant) mode.

**Activating Conditions:**
The state of the acoustic condition is stored in the top flip-flop in the figure. The set signal to the flip-flop is true if all of a set of five conditions are true. These conditions are shown in Table I. Note that the last condition, engine starting, is only true when the engine is starting and is false during normal operations. If the engine runs in normal mode (i.e., has not recently been started), has exceeded a velocity of, e.g., 9.5 km/h at some point, and pressure and temperature match the aforementioned boundaries, the function proceeds with the actual cycle checking. Otherwise, the engine stays in the same mode. The effect of this is that the acoustic condition can only be set if coolant temperature, fuel temperature, oil temperature, and atmospheric pressure are within the prescribed limits when the car starts. If any of the four parameters is outside the required range, an ongoing emissions test is ruled out, and the acoustic condition is never activated. However, we note that these conditions are easily satisfied in both testing and real-world scenarios.

If the acoustic condition is set at startup, it may be canceled by meeting several conditions that rule out a test. We call these the deactivating conditions. If any of these conditions are met, the inner flip-flop is set. The output of the inner flip-flop asserts the reset signal of the outer flip-flop, setting the acoustic condition variable `stNsCharCor` to zero. There are four deactivating conditions, any one of which, if true, sets the inner flip-flop that in turn sets `stNsCharCor` to zero, indicating the vehicle is in normal driving mode.

**Deactivating Conditions:**
There are four deactivating conditions:
1. The first deactivates the acoustic condition if the engine has started and a configurable time period `InjCrv tiNsAppVal C` has elapsed since the accelerator pedal position first exceeded a configurable threshold `InjCrv rNsAppVal C`.
2. The second deactivates the acoustic condition if the engine revolution counter exceeds a configurable threshold `InjCrv ctNsStrtExtd C`.
3. The third deactivation condition, if the acoustic condition is inhibited, is never triggered.
4. Until about May 2007, there were only three deactivation conditions, as described above. Of the firmware images available to us, the fourth condition first appears in a firmware image dated May 2007 for EDC17CP04 P 617. It starts by computing a time and distance measurement. The time measurement, call it `t`, is computed by measuring the time since the vehicle first exceeded a configurable velocity `InjCrv vThres C`. The distance measurement is the distance in the current driving cycle, call it `d`.

**Test Cycle Curves:**
The acoustic condition logic computes a pair of points `dlower` and `dupper` using two linearly interpolated curves. These curves, which define a function of `t` using a small number of points, are configurable by the manufacturer. In this case, there are seven pairs of curves, giving seven pairs of values `dlower` and `dupper` computed for the current value `t`. If `d` is ever less than `dlower` or greater than `dupper`, the flip-flop corresponding to the pair of curves is set and remains set indefinitely.

The output of this flip-flop indicates that the vehicle has strayed outside the prescribed time-distance profile defined by the pair of curves. Hence, the curves describe an upper and lower bound on the covered distance. The flip-flop allows the logic to remember this, and at any given time, the state of the flip-flops indicate whether the vehicle has so far stayed within the prescribed time-distance profile defined by the pair of curves. If all seven flip-flops are set, then the vehicle has strayed outside the profile of each of the curves at least once since start. If this happens, the acoustic condition is canceled.

In the firmware we examined, these curves are used to define the precise time-distance profile of known emission tests. Generally, the number of profiles has been increasing with time. As shown in Table II, the number of curves checked has increased from 0 in EDC17CP04 P 531 to 7 in EDC17CP44 P 859.

Figure 3 shows several curve pairs found in the firmware of an EDC17C54 ECU (software part number 03L906012, revision 7444; remaining curves found in Figure 14 in the Appendix). The area outside of the upper and lower boundaries `dlower` and `dupper` as defined by curves is shaded. If the computed time and distance value `(t, d)` ever enters this gray area, the test is considered to be ruled out, and the corresponding flip-flop is set. In addition to the boundaries, we have plotted the test cycles of known emission tests given in Table IV. Test cycles matching the profile are shown using heavy lines; all others using light lines. As our results show, several of the configured boundaries match a known test cycle quite closely. In particular, profile 1 matches the FTP-75 test cycle to within 4.2 km and profile 5 the HWFET test cycle to within 16.1 km (not fully shown in the figure).

---

This version of the text is more structured, coherent, and professional, with improved clarity and flow.