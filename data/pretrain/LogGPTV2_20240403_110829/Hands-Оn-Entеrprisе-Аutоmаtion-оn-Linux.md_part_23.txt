roles:
- pulpconfig
- updatekernel
5. Now, after putting this all together and running it, we should see output similar
to what can be seen in the following screenshot:
[ 232 ]
Enterprise Repository Management with Pulp Chapter 8
Putting aside the security limitations present in the current Pulp Debian support, this
provides a neat space-efficient solution for managing Ubuntu updates across an enterprise
infrastructure in a manner that is repeatable and lends itself well to automation. As with
our earlier CentOS-based example, it would be very easy to test packages from a new
snapshot by simply changing the variable definitions passed to our roles.
[ 233 ]
Enterprise Repository Management with Pulp Chapter 8
As with CentOS, should a new package set not be suitable for production use, Ansible
makes it easy to restore the previous repository configuration. However, rolling back
packages on Ubuntu (and other Debian-based distributions) is a much more manual
process than we saw in the previous section. Fortunately, there is a great deal of history
regarding package transactions kept
in /var/log/dpkg.log and /var/log/apt/history.log*, which can be used to
determine which packages were installed and/or upgraded and when. The apt-
get command can then be used to install a specific version of a package using the apt-get
install = syntax. There are many elegant scripted solutions
to this problem on the internet, and so it is left as an exercise for you to determine the one
best suited to your needs and environment.
Summary
Managing package repositories in an enterprise setting can present numerous challenges,
especially when it comes to efficient storage, conservation of internet bandwidth, and
ensuring build consistency. Fortunately, the Pulp software package provides an elegant
solution to these challenges for most of the common Linux distributions and lends itself
well to effective management in the enterprise.
In this chapter, you learned how to install Pulp to begin patching an Enterprise Linux
environment. You then learned how to build repositories in Pulp for both RPM-based and
DEB-based Linux distributions through hands-on examples, before gaining practical
knowledge of deploying the appropriate Pulp configuration and updating packages using
Ansible.
In the next chapter, we will explore how the Katello software tools complement Pulp in
enterprise environment management.
[ 234 ]
Enterprise Repository Management with Pulp Chapter 8
Questions
1. Why would you want to create a repository with Pulp rather than just a simple
mirror of files that you could download manually?
2. What are the issues around building and testing Linux patch repositories in an
enterprise environment?
3. What components does Pulp need to run?
4. Specify the filesystem requirements for successfully installing Pulp.
5. How would you patch an RPM-based system from a Pulp repository you created
previously?
6. Why would you use Ansible to deploy patches from a Pulp repository rather
than the Pulp Consumer?
7. Does the removal of a Pulp repository free up disk space? If not, how is this
performed?
Further reading
For more in-depth details on the Pulp project and how to make use of this tool,
please refer to the official documentation (https:/​/​pulpproject.​org/​).
[ 235 ]
9
Patching with Katello
In Chapter 8, Enterprise Repository Management with Pulp, we explored the Pulp software
package and how it lends itself to automated, repeatable, controllable patching in an
enterprise setting. In this chapter, we will build on this by taking a look at a product called
Katello, which is complementary to Pulp and lends itself to not just patching but complete
infrastructure management.
Katello is a GUI-driven tool that provides advanced solutions for enterprise infrastructure
management, and in many ways can be considered to be the successor to the venerable
Spacewalk product that many are familiar with. We will explore why you would choose
Katello for this purpose and then proceed with hands-on examples of how to build a
Katello server and perform patching.
The following topics will specifically be covered in this chapter:
Introduction to Katello
Installing a Katello server
Patching with Katello
Technical requirements
The minimum requirements for completing the hands-on exercises in this chapter are a
single CentOS 7 server with around 80 GB of disk space allocated, 2 CPU cores (virtual or
physical), and 8 GB of memory. Although we will only look at a subset of the Katello
features in this chapter, it should be noted that Foreman in particular (which is installed
under Katello) is capable of acting as a DHCP server, DNS server, and PXE boot host and,
as such, if configured incorrectly could cause issues if deployed on a production network.
Patching with Katello Chapter 9
For this reason, it is recommended that all exercises are performed in an isolated network
suitable for testing. Where Ansible code is given, it will have been developed and tested in
Ansible 2.8. For testing patching from Katello, you will need a CentOS 7 virtual machine.
All example code discussed in this book is available from GitHub at: https:/​/​github.​com/
PacktPublishing/​Hands-​On-​Enterprise-​Automation-​on-​Linux.
Introduction to Katello
Katello is not actually a single product in isolation, but a union of several open source
infrastructure management products into one cohesive infrastructure management
solution. Where Pulp is solely focused on the efficient, controllable storage of packages
(and other important content for infrastructure management), Katello brings together the
following:
Foreman: This is an open source product designed to handle the provisioning
and configuration of both physical and virtual servers. Foreman includes a rich
web-based GUI, a RESTful API, and a CLI tool called Hammer, providing a rich
and varied means of management. It also provides integration with several
automation tools, originally just Puppet but more recently also Ansible.
Katello: Katello is actually a plugin for Foreman and provides additional features
such as the rich version control of content (more so than Pulp alone) and
subscription management.
Candlepin: Provides software subscription management, especially integration
with environments such as the Red Hat Subscription Management (RHSM)
model. Although it is possible to mirror Red Hat repositories in Pulp, the process
is cumbersome, and you risk violating your license terms because there is no
visibility on the number of systems you are managing or their relationship to
your Red Hat subscriptions.
Pulp: This is the very same Pulp software that we explored in the last chapter,
now integrated into one fully featured project.
Capsule: A proxy service for distributing content and controlling updates across
a geographically diverse infrastructure while maintaining a single management
console.
[ 237 ]
Patching with Katello Chapter 9
The use of Katello hence provides several advantages over using Pulp alone, and even if
you use it just for patch management (as we will explore in this chapter, in the section
entitled Patching with Katello), the rich web GUI, CLI, and API lend itself to integration with
enterprise systems. Beyond this though, Katello (and more specifically Foreman, which
underpins it) provides many other benefits such as being able to dynamically PXE boot
servers and control both container and virtualization systems, and it can even act as both
the DNS and DHCP servers for your network. Indeed, it is fair to say that the combination
of Katello/Foreman is designed to sit at the heart of your network, although it will only
perform the functions you ask of it, so those with existing DNS and DHCP infrastructures
need not fear.
It is worth mentioning that Katello also features tight integration with the Puppet
automation tool. The original project was sponsored by Red Hat, and before their
acquisition of Ansible, Red Hat and Puppet had a strategic alliance, which led to it
becoming heavily featured in the Katello project (which is available commercially as Red
Hat Satellite 6). Given the Ansible acquisition, while the Puppet integration still remains in
Katello, support for integration with Ansible, especially through Ansible Tower/AWX, has
evolved rapidly and it is entirely up to the user which automation tool they wish to use.
At this stage, the venerable Spacewalk software tool deserves an honorable mention.
Spacewalk is the upstream open source version of Red Hat Satellite 5 and is still being
actively developed and maintained. There is a huge degree of overlap between the two
systems in terms of high-level functionality; however, Katello/Satellite 6 is a complete from-
the-ground-up rewrite of the platform and so there is no clear upgrade path between the
two. Given that Red Hat's contribution to the Spacewalk program is likely to decrease when
they end-of-life their Satellite 5 product, our focus in this book will be on Katello.
Indeed, it is fair to say that Katello deserves a book of its own, so rich is its feature set. Our
goal in this chapter is simply to raise awareness of the Katello platform and to demonstrate
how it lends itself to patching in an enterprise environment. Many of the additional
features, such as the PXE booting of servers, require an understanding of the concepts we
have already covered in this book, and hence it is hoped that, should you decide upon
Katello or Satellite 6 as a platform for managing your infrastructure, then you will be able
to build on the foundation that this book provides and explore additional resources to take
you further.
Let's get started by taking a practical look in the next section at how to install a simple
standalone Katello server so that we can explore this more fully.
[ 238 ]
Patching with Katello Chapter 9
Installing a Katello server
This is a hands-on book, so without further ado, let's get started and set up our very own
Katello server. Alongside the advantages of Katello already discussed, another is the
packaging of the product. When we set up our Pulp server, there were many individual
components where we had to make decisions (for example, RabbitMQ versus Qpid) and
then additional setup to perform (for example, SSL transport for MongoDB). Katello has
even more moving parts than Pulp (if Pulp is considered as just a component of the Katello
platform), and hence installing it by hand would be a vast and complex task.
Thankfully, Katello provides an installation system that can get you up and running with
just a few commands, which we will explore in the next section of this chapter.
Preparing to install Katello
Katello, as with Pulp, only installs (at the time of writing) on Enterprise Linux 7
variants—so here, again, we will use the latest stable release of CentOS 7. The requirements
for Katello change from time to time as the product grows, and it is always worth
reviewing the installation documentation for yourself before proceeding. At the time of
writing, version 3.12 is the latest stable release, and the installation documentation can be
found here: https:/​/​theforeman.​org/​plugins/​katello/​3.​12/​installation/​index.​html.
Now, let's follow these steps:
1. As before, our biggest concern is ensuring we have sufficient disk space
allocated, and just as for a standalone Pulp installation, we must ensure that we
have enough disk space allocated
in /var/lib/pulp and /var/lib/mongodb for all of the Linux distributions we
may wish to mirror. Again, as with Pulp, they should be separate from the root
volume to ensure that if one fills up, the entire server does not die.
2. With the filesystem set up, our first step is to install the required repositories so
that all required packages for installation can be downloaded—this requires
setting up several external repositories that provide packages not included by
default with CentOS 7. The following commands set up the repositories for
Katello, Foreman, Puppet 6, and the EPEL repository before actually installing
the Foreman release package tree:
$ yum -y localinstall
https://fedorapeople.org/groups/katello/releases/yum/3.12/katello/e
l7/x86_64/katello-repos-latest.rpm
$ yum -y localinstall
https://yum.theforeman.org/releases/1.22/el7/x86_64/foreman-release
[ 239 ]
Patching with Katello Chapter 9
.rpm
$ yum -y localinstall
https://yum.puppet.com/puppet6-release-el-7.noarch.rpm
$ yum -y localinstall
https://dl.fedoraproject.org/pub/epel/epel-release-latest-7.noarch.
rpm
$ yum -y install foreman-release-scl
3. From here, it is recommended to bring the base system fully up to date:
$ yum -y update
4. The final step before the actual installation is to install the Katello package and its
dependencies:
$ yum -y install katello
5. From here on, all installation tasks are performed with the foreman-
installer command—there are a huge plethora of options that can be specified
and, with most of them, if you need to change your decision, you can run the
installer again with the different flags and it will perform the changes without
any data loss. To see all possible options, run the following command:
$ foreman-installer --scenario katello --help
6. To build our demo server, the defaults will mostly suffice—however, if you
explore the options, you will see that many will need to be specified in an
enterprise setting. For example, SSL certificates can be specified at install time
(rather than relying on self-signed ones that will be generated otherwise), default
secrets for underlying transports are set, and so on. It is highly recommended
that you review the output of the preceding command for yourself when
installing in a production setting. For now, we will issue the following
installation command to initiate the installation:
$ foreman-installer --scenario katello --foreman-initial-admin-
password=password --foreman-initial-location='London' --foreman-
initial-organization='HandsOn'
This is probably the simplest possible installation case for a Katello server, and it
perfectly serves our examples in this book. However, in a Production
environment, I highly recommend that you explore the more advanced
installation features to ensure that the server will meet your requirements,
especially where security and availability are concerned. This is left as an exercise
for you to explore.
[ 240 ]
Patching with Katello Chapter 9
Note that, in this scenario, the installer checks several prerequisites,
including that the forward and reverse DNS lookups for the Katello server
name resolve correctly and that the machine has 8 GB of RAM available.
The installer will refuse to proceed if these prerequisites are not met.
7. The Katello installation should run to completion provided all prerequisites have
been met, and once completed, you should be presented with a screen similar to
the one shown in the following screenshot, detailing the login details, as well as
other pertinent information such as how to set up a proxy server for another
network if required:
8. The only task not completed by the installer is setting up the local firewall on the
CentOS 7 machine. Luckily, there is a FirewallD service definition included with
Katello that covers all of the services likely to be required—this derives its named
from the commercial Red Hat Satellite 6 product and can be enabled by running
the following commands as root:
$ firewall-cmd --permanent --zone=public --add-service=RH-
Satellite-6
$ firewall-cmd --reload
9. With those steps completed, it will be possible to load the web interface of
Katello and log in with the details shown:
[ 241 ]
Patching with Katello Chapter 9
Technically speaking, Katello is a module that sits on top of Foreman and provides
important features that we will look at later in this chapter—for example, a web UI for the
Pulp repository management system that is also installed behind the scenes. Hence, the
Foreman branding of the code stands out, and you will find the name comes up frequently.
Once logged in, you should be presented with the default dashboard page, and we can start
to configure some repositories for patching purposes, which we will commence in the next
section.
Patching with Katello
As Katello is built around technologies we have already explored, such as Pulp, it carries
with it the same limitations we have already seen regarding DEB packages. For instance,
although repositories of DEB packages can be built up easily in Katello, and even the
appropriate GPG public keys imported, the resulting published repositories do not feature
an InRelease or Release.gpg file and so must be implicitly trusted by all hosts that use
these. Similarly, although there is a complete subscription management framework
available for RPM-based hosts consisting of the subscription-manager tool and the Pulp
Consumer agent, again, no such equivalent exists for DEB hosts and so these must be
configured manually.
Although it would be entirely possible to configure RPM-based hosts to use the built-in
technologies, DEB-based ones would have to be configured with Ansible, just as for Pulp,
and given the importance of commonality across environments in an enterprise,
configuring all servers in the same manner rather than using two contrasting solutions for
two different host types is advised.
[ 242 ]
Patching with Katello Chapter 9
One of the advantages that Katello brings over Pulp, other than the web user interface, is
the concept of lifecycle environments. This feature acknowledges that most businesses will
have separate technology environments for differing purposes. For example, your
enterprise may well have a Development environment for developing new software and
testing bleeding edge packages, then a Testing environment for testing releases, and
finally, a Production environment where the most stable builds exist and services for
customers and clients are run.
Let's now explore some hands-on examples of building up repositories in Katello for
patching purposes.
Patching RPM-based systems with Katello
Let's consider the use of Katello to build repositories for our CentOS 7 system across
multiple lifecycle environments. As Katello supports the key-based validation of RPMs, our
first task is to install the GPG public key for the RPMs. A copy of this is freely
downloadable from the CentOS project and can be found on most CentOS 7 systems
in /etc/pki/rpm-gpg/RPM-GPG-KEY-CentOS-7:
1. To add this public key to Katello, navigate to Content | Content
Credentials from the menu bar. Then, click Create Content Credential:
[ 243 ]
Patching with Katello Chapter 9
2. Give the key a suitable name and either upload the key file or copy and paste the
contents of it into the textbox on the screen. Click Save when done:
[ 244 ]
Patching with Katello Chapter 9
3. Next, we will create a product—in Katello, a product is a logical grouping of
repositories, and this is incredibly useful for creating manageable scalable
configurations. For our example here, we will only mirror the CentOS 7 OS
repository, but when you start mirroring the updates and any other related
repositories, it would make sense to group these together under a single product.
Navigate to Content | Products from the menu bar, and then click on the Create
Product button:
4. Now, define the high-level product definition—for a simple CentOS 7 repository
mirror, we simply need to create Name and Label and associate the GPG key we
uploaded previously. The various SSL options are for upstream repositories that