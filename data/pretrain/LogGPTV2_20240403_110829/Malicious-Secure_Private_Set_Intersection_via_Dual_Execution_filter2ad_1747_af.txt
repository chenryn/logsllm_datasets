[DKT10]. The dominant term in their communication is to have each party send 3n ﬁeld elements.
The next most eﬃcient is our DE-ROM protocol, requiring each party to send O(n) encodings
from Fencode. Concretely, for a set size of n = 220, our protocol requires 1.1 GB of communication,
roughly 5× greater than [DKT10]. However, on a modest connection of 40 Mbps, we ﬁnd our
protocol to remain the fastest even when [DKT10] utilizes many threads. In addition, our protocol
requires almost 5× less communication than [RR17] (4.9GB).
When comparing our two ROM protocols, it can be seen that the dual execution technique
requires less communication and is therefore faster in the WAN setting. The main overhead of the
tag||decommitment values that must be sent. This is
encode-commit protocol is the O(n log n)
of particular concern in the standard model where commitments are typically several times larger
than their ROM counterparts. In contrast, the dual execution protocol sends O(n log n) encodings
which can be less than half the size of a ROM decommitment.
One aspect of the protocols that is not reﬂected in the tables is how the communication cost is
shared between the parties. In our DE-COM protocol, a large portion of the communication is in
the encoding steps, which are entirely symmetric between the two parties. In [RR17] the majority
of the communication is done by the receiver (in the OT extension phase). Although the total
communication cost of [RR17] is roughly 5× that of our protocol, the communication cost to the
receiver is ∼ 10× ours.
Comparison with [RR17]. We provide a more speciﬁc comparison to the protocol of Rindal
& Rosulek [RR17]. Both protocols are secure against malicious adversaries; both rely heavily on
eﬃcient oblivious transfers; neither protocol strictly enforces the size of a malicious party’s input
set (so both protocols realize the slightly relaxed PSI functionality of Figure 1).
We now focus on our random-oracle-optimized protocol, which uses the random-oracle instan-
tiation of Fencode. As has been shown, this protocol is signiﬁcantly faster than that of [RR17]. We
give a rough idea of why this should be the case. In [RR17], the bulk of the cost is that the parties
perform an OT for each bit of a Bloom ﬁlter. With n items, the size of the required Bloom ﬁlter
is ∼ kn, where k is the security parameter of the Bloom ﬁlter. For technical reasons, k in [RR17]
must be the computational security parameter of the protocol (e.g., 128 in the implementation).
Overall, roughly ∼ nk oblivious transfers are required.
The bulk of the cost in our protocol is performing the instances of Fencode. In our random-
21
oracle instantiation, we realize Fencode with the OT-extension protocol of [OOS16]. Each instance
of Fencode has cost roughly comparable to a plain OT. Our protocol requires mµ = O(n) such
instances. It is this diﬀerence in the number of OT primitives that contributes the largest factor
to the diﬀerence in performance between these two protocols.
We also observe that our standard model protocol is faster than [RR17] in the LAN setting for
σ = 32 and σ = 64. While it is true that [RR17] only weakly depends on σ, it is still informative
that our protocol remains competitive with the previous fastest protocol while eliminating the
random-oracle assumption. When considering the WAN setting, the communication overhead of
σmµ = O(σn) OTs limits our performance, resulting in σ = 32 being slightly slower than [RR17].
Comparison with OPE protocols. Our protocol is orders of magnitude faster than blind-RSA
based protocol of [DKT10], due to [DKT10] performing O(n) exponentiations. Traditional OPE-
based PSI also require O(n) exponentiations and their running time would be similarly high. There
are very recent OPE protocols based on OT but they still require O(n) OTs plus O(n/κ) relatively
expensive interpolations of degree-O(k) polynomials, totaling O(n log κ) operations. In contrast
our protocol requires O(n) OTs to be communicated and O(n log n) local OT computations.
Comparison with semi-honest PSI. An interesting point of comparison is to the state-of-
the-art semi-honest secure protocol of Kolesnikov et al.
[KKRT16] which follows the same PSZ
paradigm. Figure 6 shows the running time of our protocol compared to theirs. For sets sizes up to
n = 212 our protocol is actually faster than [KKRT16] in the LAN setting which we attribute to a
more optimized implementation. Increasing the set size to n = 220 we see that our protocol require
12.6 seconds compared to 3.8 by [KKRT16], a 3.3× diﬀerence. For the largest set size of n = 224 we
see the diﬀerence increase further to a 4× overhead in the LAN setting. In the WAN setting we see
a greater diﬀerence of 25× which we attribute to the log n factor more communication/computation
that our protocol requires.
References
[ALSZ13] Gilad Asharov, Yehuda Lindell, Thomas Schneider, and Michael Zohner. More eﬃ-
cient oblivious transfer and extensions for faster secure computation. In Sadeghi et al.
[SGY13], pages 535–548.
[ANS10]
Yuriy Arbitman, Moni Naor, and Gil Segev. Backyard Cuckoo hashing: Constant
worst-case operations with a succinct representation. In 51st FOCS, pages 787–796.
IEEE Computer Society Press, October 2010.
[BPSW07] Justin Brickell, Donald E. Porter, Vitaly Shmatikov, and Emmett Witchel. Privacy-
preserving remote diagnostics. In Proceedings of the 2007 ACM Conference on Com-
puter and Communications Security, CCS 2007, Alexandria, Virginia, USA, October
28-31, 2007, pages 498–507, 2007.
[Can01]
Ran Canetti. Universally composable security: A new paradigm for cryptographic
protocols.
In 42nd FOCS, pages 136–145. IEEE Computer Society Press, October
2001.
[DCW13] Changyu Dong, Liqun Chen, and Zikai Wen. When private set intersection meets big
data: an eﬃcient and scalable protocol. In Sadeghi et al. [SGY13], pages 789–800.
22
[DKT10] Emiliano De Cristofaro, Jihye Kim, and Gene Tsudik. Linear-complexity private
set intersection protocols secure in malicious model. In Masayuki Abe, editor, ASI-
ACRYPT 2010, volume 6477 of LNCS, pages 213–231. Springer, Heidelberg, December
2010.
[DMRY09] Dana Dachman-Soled, Tal Malkin, Mariana Raykova, and Moti Yung. Eﬃcient robust
private set intersection. In Michel Abdalla, David Pointcheval, Pierre-Alain Fouque, and
Damien Vergnaud, editors, ACNS 09, volume 5536 of LNCS, pages 125–142. Springer,
Heidelberg, June 2009.
[FHNP14] Michael J. Freedman, Carmit Hazay, Kobbi Nissim, and Benny Pinkas. Eﬃcient set-
intersection with simulation-based security. In In Journal of Cryptology, 2014.
[FIPR05] Michael J. Freedman, Yuval Ishai, Benny Pinkas, and Omer Reingold. Keyword search
and oblivious pseudorandom functions. In Joe Kilian, editor, TCC 2005, volume 3378
of LNCS, pages 303–324. Springer, Heidelberg, February 2005.
[FJNT16] Tore Kasper Frederiksen, Thomas P. Jakobsen, Jesper Buus Nielsen, and Roberto
Triﬁletti. On the complexity of additively homomorphic UC commitments. In Eyal
Kushilevitz and Tal Malkin, editors, TCC 2016-A, Part I, volume 9562 of LNCS, pages
542–565. Springer, Heidelberg, January 2016.
[FNP04] Michael J. Freedman, Kobbi Nissim, and Benny Pinkas. Eﬃcient private matching and
set intersection. In Christian Cachin and Jan Camenisch, editors, EUROCRYPT 2004,
volume 3027 of LNCS, pages 1–19. Springer, Heidelberg, May 2004.
[HEK12] Yan Huang, David Evans, and Jonathan Katz. Private set intersection: Are garbled
circuits better than custom protocols?, 2012.
[HFH99]
Bernardo A. Huberman, Matt Franklin, and Tad Hogg. Enhancing privacy and trust
in electronic communities. In In Proc. of the 1st ACM Conference on Electronic Com-
merce, pages 78–86. ACM Press, 1999.
[HN10]
Carmit Hazay and Kobbi Nissim. Eﬃcient set operations in the presence of malicious
adversaries. In In IACR PKC, 2010.
[IKNP03] Yuval Ishai, Joe Kilian, Kobbi Nissim, and Erez Petrank. Extending oblivious transfers
eﬃciently. In Dan Boneh, editor, CRYPTO 2003, volume 2729 of LNCS, pages 145–161.
Springer, Heidelberg, August 2003.
[KK13]
Vladimir Kolesnikov and Ranjit Kumaresan. Improved OT extension for transferring
short secrets. In Ran Canetti and Juan A. Garay, editors, CRYPTO 2013, Part II,
volume 8043 of LNCS, pages 54–70. Springer, Heidelberg, August 2013.
[KKRT16] Vladimir Kolesnikov, Ranjit Kumaresan, Mike Rosulek, and Ni Trieu. Eﬃcient batched
oblivious PRF with applications to private set intersection.
In Edgar R. Weippl,
Stefan Katzenbeisser, Christopher Kruegel, Andrew C. Myers, and Shai Halevi, edi-
tors, Proceedings of the 2016 ACM SIGSAC Conference on Computer and Communi-
cations Security, Vienna, Austria, October 24-28, 2016, pages 818–829. ACM, 2016.
http://doi.acm.org/10.1145/2976749.2978381.
23
[KMRS14] Seny Kamara, Payman Mohassel, Mariana Raykova, and Seyed Saeed Sadeghian. Scal-
ing private set intersection to billion-element sets. In Nicolas Christin and Reihaneh
Safavi-Naini, editors, FC 2014, volume 8437 of LNCS, pages 195–215. Springer, Hei-
delberg, March 2014.
[KOS15] Marcel Keller, Emmanuela Orsini, and Peter Scholl. Actively secure OT extension
with optimal overhead.
In Rosario Gennaro and Matthew J. B. Robshaw, editors,
CRYPTO 2015, Part I, volume 9215 of LNCS, pages 724–741. Springer, Heidelberg,
August 2015.
[Lam16] Mikkel Lambæk. Breaking and ﬁxing private set intersection protocols. Master’s thesis,
Aarhus University, 2016. https://eprint.iacr.org/2016/665.
[Mar14] Moxie Marlinspike. The diﬃculty of private contact discovery, 2014. Blog post,
whispersystems.org/blog/contact-discovery.
[Mea86]
[MF06]
C. Meadows. A more eﬃcient cryptographic matchmaking protocol for use in the
absence of a continuously available third party. In 1986 IEEE Symposium on Security
and Privacy, pages 134–134, April 1986.
Payman Mohassel and Matthew Franklin. Eﬃciency tradeoﬀs for malicious two-party
computation. In Moti Yung, Yevgeniy Dodis, Aggelos Kiayias, and Tal Malkin, editors,
PKC 2006, volume 3958 of LNCS, pages 458–473. Springer, Heidelberg, April 2006.
[NPS99] Moni Naor, Benny Pinkas, and Reuban Sumner. Privacy preserving auctions and mech-
anism design. In EC, pages 129–139, 1999.
[OOS16] Michele Orr`u, Emmanuela Orsini, and Peter Scholl. Actively secure 1-out-of-n OT
extension with application to private set intersection. In Topics in Cryptology - CT-
RSA 2017 - The Cryptographers’ Track at the RSA Conference 2017, San Francisco,
CA, USA, February 14-17, 2017, Proceedings, pages 381–396, 2016. http://eprint.
iacr.org/2016/933.
[PSSZ15] Benny Pinkas, Thomas Schneider, Gil Segev, and Michael Zohner.
Phasing:
Private set intersection using permutation-based hashing.
In Jaeyeon Jung and
Thorsten Holz, editors, 24th USENIX Security Symposium, USENIX Security 15,
pages 515–530. USENIX Association, 2015. https://www.usenix.org/conference/
usenixsecurity15/technical-sessions/presentation/pinkas.
[PSZ14]
[PSZ16]
[RR17]
Benny Pinkas, Thomas Schneider, and Michael Zohner. Faster private set intersection
based on ot extension.
In Proceedings of the 23rd USENIX Conference on Security
Symposium, SEC’14, pages 797–812, Berkeley, CA, USA, 2014. USENIX Association.
https://www.usenix.org/node/184446.
Benny Pinkas, Thomas Schneider, and Michael Zohner. Scalable private set intersection
based on ot extension. Cryptology ePrint Archive, Report 2016/930, 2016. http:
//eprint.iacr.org/2016/930.
Peter Rindal and Mike Rosulek. Improved private set intersection against malicious
adversaries. In Jean-S´ebastien Coron and Jesper Buus Nielsen, editors, Advances in
Cryptology - EUROCRYPT 2017 - 36th Annual International Conference on the Theory
and Applications of Cryptographic Techniques, Paris, France, April 30 - May 4, 2017,
24
Proceedings, Part I, volume 10210 of Lecture Notes in Computer Science, pages 235–
259, 2017.
[SGY13] Ahmad-Reza Sadeghi, Virgil D. Gligor, and Moti Yung, editors. ACM CCS 13. ACM
Press, November 2013.
[TKC07]
Juan Ram´on Troncoso-Pastoriza, Stefan Katzenbeisser, and Mehmet Utku Celik. Pri-
vacy preserving error resilient dna searching through oblivious automata. In Proceedings
of the 2007 ACM Conference on Computer and Communications Security, CCS 2007,
Alexandria, Virginia, USA, October 28-31, 2007, pages 519–528, 2007.
25
A Commitment Properties
The encode-commit variant of our protocol requires a non-interactive commitment scheme. The
syntax is as follows:
• Setup(1κ): samples a random reference string crs.
• Comm(crs, x, r): generates a commitment to x with randomness r. Note that in the main
body, we omit the global argument crs.
• SimSetup(1κ): samples a reference string crs along with a trapdoor τ .
• Extract(crs, τ, c): extracts the committed plaintext value from a commitment c.
We require the scheme to satisfy the following security properties:
Deﬁnition 4. A commitment scheme is secure if the following are true:
1. (Extraction:) Deﬁne the following game:
ExtractionGame(1κ,A):
(crs, τ ) ← SimSetup(1κ)
(c, x(cid:48), r(cid:48)) ← A(crs)
if c = Comm(crs, x(cid:48), r(cid:48)) and x(cid:48) (cid:54)= Extract(crs, τ, c):
return 1
else: return 0
The scheme has straight-line extraction if for every PPT A, ExtractionGame(1κ,A) outputs 1
with negligible probability.
2. (Hiding:) Deﬁne the following game:
HidingGame(1κ,A, b):
crs ← Setup(1κ)
(x0, x1) ← A(crs)
r ← {0, 1}κ
return Comm(crs, xb, r)
The scheme is hiding if, for all PPT A, the distributions HidingGame(1κ,A, 0) and HidingGame(1κ,A, 1)
are indistinguishable.
The deﬁnitions are each written in terms of a single commitment, but they apply simultaneously
to many commitments using a simple hybrid argument.
In the non-programmable random oracle model, the classical commitment scheme Comm(x, r) =
H(x(cid:107)r) satisﬁes these deﬁnitions. In the standard model, one can use any UC-secure non-interactive
commitment scheme, e.g., the eﬃcient scheme of [FJNT16].
26
B Formal Encode-Commit Protocol
Parameters: X is Alice’s input, Y is Bob’s input, where X, Y ⊆ {0, 1}σ. m is the number of bins and
µ is a bound on the number of items per bin. The protocol uses instances of Fencode with input length
σ − log n, and output length λ + 2 log(nµ), where λ is the security parameter.
1. [Parameters] Parties agree on a random hash function h : {0, 1}σ → [m] and global parameters
for the commitment scheme, using a coin tossing protocol.
2. [Hashing]
(a) For x ∈ X, Alice computes (b, x(cid:48)) = phaseh,m(x) and adds x(cid:48) to bin BX [b] at a random unused
(b) For y ∈ Y , Bob computes (b, y(cid:48)) = phaseh,m(y) and adds y(cid:48) to bin BY [b] at a random unused
position p ∈ [µ].
position p ∈ [µ].
Both parties ﬁll unused bin positions with the zero string.
3. [Encoding] For bin index b ∈ [m] and position p ∈ [µ]: Let y(cid:48) be the value in bin BY [b] at
position p. Bob sends (Encode, (sid, A, b, p), y(cid:48)) to the Fencode functionality which responds with
b,p). Alice receives (Output, (sid, A, b, p)) from Fencode. Bob computes
(Output, (sid, A, b, p),(cid:74)y(cid:48)(cid:75)A
b,p = PRF((cid:74)y(cid:48)(cid:75)A
(cid:74)y(cid:48)(cid:75)tag
(cid:74)y(cid:48)(cid:75)enc
b,p = PRF((cid:74)y(cid:48)(cid:75)A
b,p to ((cid:74)y(cid:48)(cid:75)enc
b,p, tag)
b,p, enc)
b,p , y).
and constructs a hash table H mapping(cid:74)y(cid:48)(cid:75)tag
Fencode and receives (Output, (sid, A, b, j),(cid:74)x(cid:48)(cid:75)A
(cid:74)x(cid:48)(cid:75)tag
b,j = PRF((cid:74)x(cid:48)(cid:75)A
b,j, tag) and(cid:74)x(cid:48)(cid:75)enc
b,j = PRF((cid:74)x(cid:48)(cid:75)A
4. [Output] For each x ∈ X, in random order, let b, p be the bin index and position that x(cid:48) was
placed in during Step 2a to represent x. For j ∈ [µ], Alice sends (Encode, (sid, A, b, j), x(cid:48)) to
b,j) in response. For each response Alice computes
b,j, enc).
For each x Alice sends the tuple
b,j ||(cid:74)x(cid:48)(cid:75)enc
to Bob who outputs the union of all y such that ∃j : (cid:74)x(cid:48)(cid:75)tag
Comm(y; ((cid:74)x(cid:48)(cid:75)enc
, y) := H[(cid:74)x(cid:48)(cid:75)tag
Comm(x; rx), {(cid:74)x(cid:48)(cid:75)tag
) where ((cid:74)y(cid:48)(cid:75)enc∗
b,j ⊕ rx) ⊕(cid:74)y(cid:48)(cid:75)enc∗
b,j ⊕ rx | j ∈ [µ]}
b,j ∈ H.keys and Comm(x, rx) =
b,j ].
Figure 9: Our Encode-Commit PSI protocol.
27