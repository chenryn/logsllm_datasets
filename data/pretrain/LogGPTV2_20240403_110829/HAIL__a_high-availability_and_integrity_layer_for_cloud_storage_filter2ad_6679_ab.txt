In HAIL, a client distributes a ﬁle F with redundancy across n
servers and keeps some small (constant) state locally. The goal of
HAIL is to ensure resilience against a mobile adversary. This kind
of powerful adversary can potentially corrupt all servers across the
full system lifetime. There is one important restriction on a mobile
adversary, though: It can control only b out of the n servers within
any given time step. We refer to a time step in this context as an
epoch.
In each epoch, the client that owns F (or potentially some other
entity on the client’s behalf) performs a number of checks to as-
sess the integrity of F in the system. If corruptions are detected
on some servers, then F can be reconstituted from redundancy in
intact servers and known faulty servers replaced. Such periodic
integrity checks and remediation are an essential part of guarantee-
ing data availability against a mobile adversary: Without integrity
checks, the adversary can corrupt all servers in turn across (cid:2)n/b(cid:3)
epochs and modify or purge F at will.
Let us consider a series of constructions, explaining the short-
comings of each and showing how to improve it. In this way, we
introduce the full conceptual complexity of HAIL incrementally.
Replication system.
A ﬁrst idea for HAIL is to replicate F on each of the n servers.
Cross-server redundancy can be used to check integrity. To perform
an integrity check, the client simply chooses a random ﬁle-block
position j and retrieves the corresponding block Fj of F from each
server. Provided that all returned blocks are identical, the client
concludes that F is intact in that position. If it detects any incon-
sistencies, then it reconstructs F (using majority decoding across
servers) and removes / replaces faulty servers. By sampling mul-
tiple ﬁle-block positions, the client can boost its probability of de-
tecting corruptions.
A limitation of this approach is that the client can only feasibly
inspect a small portion of F . Another is that while the client checks
consistency across servers, it does not directly check integrity, i.e.,
that the retrieved block for position j is the one originally stored
with F . Consequently, this simple approach is vulnerable to a
creeping-corruption attack. The adversary picks a random position
i and changes the original block value Fi to a corrupted value ˆFi in
all b servers corrupted during a given epoch. After T = (cid:2)n/(2b)(cid:3)
epochs, the adversary will have changed Fi to ˆFi on a majority of
servers. At that point, majority decoding will fail to reconstruct
block Fi.
Because the client can feasibly check only a small fraction of the
ﬁle, the probability that it will detect temporary inconsistencies in-
troduced by the adversary’s corruptions is low. Thus, the adversary
can escape detection and render F unretrievable with high proba-
bility in T epochs.
Replication system with POR.
To achieve better resilence against a creeping-corruption attack,
we might employ a POR system (e.g., [23, 32, 6]) on each of the
n servers. In a single-server POR system, F is encoded under an
error-correcting code (or erasure code) that we refer to in HAIL as
the server code. The server code renders each copy of F robust
against a fraction c of corrupted ﬁle blocks, protecting against the
single-block corruptions of our previous approach. (Here c is the
error rate of the server code.)
189Figure 1: Encoding of ﬁle F : on the left, original ﬁle represented as a matrix; on the right, encoded ﬁle with parity blocks added for
both the server and dispersal codes.
There are then two options to check the integrity of F . One is to
use the single-server POR approach of embedding integrity checks
within each server’s copy of F . This approach, however, imposes
high storage overhead: It does not take advantage of cross-server
redundancy.
An alternative approach is to perform integrity checks by com-
paring block values in a given position j using cross-server redun-
dancy as in our previous construction. With this approach, the sys-
tem is still vulnerable to a creeping-corruption attack, but much less
than in the previous construction. Suppose that the POR can detect
inconsistencies within a server if the adversary modiﬁes at least
d-fraction of blocks. Assuming that the client performs majority
decoding to replace faulty servers whenever it detects corruption,
this approach will ensure the integrity of F with high probability
for T = (cid:2)n/(2b)(cid:3)× (c/d) epochs—improving over the previous
approach by a factor of c/d.
Dispersal code with POR.
We can improve the storage overhead of the previous approach
with a more intelligent approach to creating ﬁle redundancy across
servers. Rather than replicating F across servers, we can instead
distribute it using an error-correcting (or erasure) code. We refer to
this code in HAIL as the dispersal code. In HAIL, each ﬁle block
is individually distributed across the n servers under the dispersal
code.
Let (n, (cid:4)) be the parameters of the dispersal code. We assume
for convenience that this code is systematic, i.e., that it preserves
(cid:4) message blocks in their original form. Then (cid:4) is the number of
primary servers, those servers that store fragments of the original
ﬁle F . The remaining n − (cid:4) are secondary servers, or redundant
servers, i.e., servers that maintain additional redundancy/parity blocks
and help recover from failure.
A graphical representation of dispersal encoding is given in Fig-
ure 1. Before transforming the ﬁle F into a distributed, encoded
representation, we partition it into (cid:4) distinct segments F (1),
. . . , F ((cid:3)) and distribute these segments across the primary servers
S1, . . . , S(cid:3). This distributed cleartext representation of the ﬁle re-
mains untouched by our subsequent encoding steps. We then en-
code each segment F (j) under the server code with error rate c.
The effect of the server code is to extend the “columns” of the en-
coded matrix by adding parity blocks. Next, we apply the dispersal
code to create the parity blocks that reside on the secondary servers.
It extends the “rows” of the encoded matrix across the full set of n
servers S1, . . . , Sn.
With this scheme, it is possible to use cross-server redundancy to
check the integrity of F . The client / veriﬁer simply checks that the
blocks in a given position, i.e., “row,” constitute a valid codeword
in the dispersal code. By means of the dispersal code, we reduce
the overall storage cost of our previous construction from n|F| to
(n/(cid:4))|F|.
Use of a dispersal code does reduce the number of epochs T over
which it is possible to ensure the integrity of F with high probabil-
ity. This is because the adversary can now corrupt a given “row”
/ codeword merely by corrupting at least (d − 1)/2 blocks, where
d is the minimum distance of the dispersal code. (For an (n, (cid:4))-
Reed-Solomon dispersal code, for instance, d = n − (cid:4) + 1.) In
our next construction, however, we show how to reduce vulnerabil-
ity to creeping-corruption attacks considerably using cryptographic
integrity checks. This improvement greatly extends the integrity
lifetime T of the ﬁle F .
Remark. The three simple constructions we have shown thus far
have the attractive property of being publicly veriﬁable. It may be
that F is encrypted and that the server code is cryptographically
keyed (for reasons we explain below). Thus only the client that
stored F can retrieve it. But it is still possible for any entity to
perform an integrity check on F . Integrity checks only involve ver-
iﬁcation of block consistency across servers, and therefore don’t
require any secret keys. In our next construction, we sacriﬁce pub-
lic veriﬁability in favor of a much longer lifetime T of integrity
assurance for F .
Embedding MACs into dispersal code.
We now show how to address the problem of creeping-corruption
attacks. Our solution is to authenticate matrix rows with a message-
authentication code (MAC), computed with a secret key known by
the client. A simple approach is to attach a MAC to each ﬁle block
on each server. We achieve a solution with lower storage overhead
than this simple approach.
Our key insight (inspired by ideas of Schwartz and Miller [31])
is to embed MACs in the parity blocks of the dispersal code. As
we show, both MACs and parity blocks can be based on a universal
hash function. Consequently, it is possible to create a block that is
simultaneously both a MAC and a parity block. One of our main
contributions is a construction based on this idea that we call an
190integrity-protected error-correcting code (IP-ECC) and whose de-
tails are given in Section 5.4. By inserting MACs into each row of
the encoded matrix, we are able to effectively verify the responses
received from servers. This mechanism protects against creeping-
corruption attacks because it does not just check that rows are self-
consistent as in the simpler approaches described above. Instead,
with MACs, it is possible to ensure that rows do not differ from
their original values in F .
Aggregating responses.
While the client could check individual blocks in the encoded
ﬁle, a more efﬁcient approach is to check multiple blocks of the ﬁle
simultaneously. Another contribution of our paper is to provide a
mechanism to aggregate MACs across multiple blocks. The client
can specify multiple positions in the ﬁle, and verify their correct-
ness via a single, composite response from each server.
We propose to use a linear code in HAIL called the aggrega-
tion code for combining servers’ responses in a challenge-response
protocol. The aggregate response is a linear combination of rows of
the encoded ﬁle matrix, and is a codeword (or sufﬁciently close to
a codeword) in the dispersal code. However, we need to ensure that
by aggregating MAC values on individual blocks, we obtain a valid
MAC. We deﬁne the notion of composite MAC in Section 5.3 that,
intuitively, guarantees that a MAC on a vector of messages can not
be obtained unless all the MACs of individual vector components
are known. Note that the aggregation code in HAIL carries zero
storage overhead: It is computed on the ﬂy.
We describe the full HAIL system in detail in Section 6, after
deﬁning the adversarial model in Section 4. The necessary crypto-
graphic building blocks can be found in Section 5.
4. ADVERSARIAL MODEL
We model HAIL as a set of n servers, S1, S2, . . . , Sn, and a
trusted, external entity T . We assume authenticated, private chan-
nels between T and each server. In practice T may be a client or
an external auditor.
We consider an adversary A that is mobile, i.e., can corrupt a dif-
ferent set of servers in each epoch, and is Byzantine, i.e., can behave
arbitrarily. Obviously, meaningful ﬁle availability is not possible
against a fully Byzantine adversary that controls all servers. Con-
sequently, we assume that our adversary controls at most b servers
in any given epoch.
We regard each server Si as containing a distinct code base and
storage system. The code base determines how the server replies
to challenges; the storage system contains a (potentially corrupted)
ﬁle segment.
At the beginning of each epoch, A may choose a fresh set of
b servers and arbitrarily corrupt both their code bases and storage
systems. At the end of an epoch, however, we assume that the code
base of every server is restored to a correct state. From a theoretical
perspective, this restoration models the limitation of the adversary
to b servers. From a practical perspective, code-base restoration
might reﬂect a malware-detection pass, software re-installation, in-
vocation of a fresh virtual machine image, etc. Even when the code
base of a server is restored, however, the adversary’s corruptions to
the server’s storage system remain.
Repair of servers’ storage systems only happens when a client re-
actively invokes the redistribute function—an expensive and gen-
erally rare event. Thus, while the adversary controls only b servers,
it is possible for more than b servers to contain corrupted data in a
given epoch. The aim of the client in HAIL is to detect and repair
corruptions before they render a ﬁle F unavailable.
all of the servers.
servers to corrupt (where b is a security parameter).
A time step or epoch in HAIL thus consists of three phases:
1. A corruption phase: The adversary A chooses a set of up to b
2. A challenge phase: The trusted entity T challenges some or
3. A remediation phase: If T detects any corruptions in the chal-
Let F denote the ﬁle distributed by T . We let F
lenge phase, it may modify / restore servers’ ﬁle shares.
(i)
t
denote the
ﬁle share held by server Si at the beginning of epoch t, i.e., prior to
the corruption phase, and let ˆF
denote the ﬁle share held by Si
after the corruption phase.
4.1 HAIL: Formal preliminaries
(i)
t
(i)
(i)
0
(i)
t
(i)
t
0 }n
i=1: Encodes F as a set of ﬁle
is the segment designated for server i. The
In our formal adversarial model, we let a system HAIL consist
of the following functions:
• keygen(1λ) → κ: Generates a key κ = (sk, pk) of size security
parameter λ. (For symmetric-key systems, pk may be null.)
• encode(κ, F, (cid:4), n, b) → {F
segments, where F
encoding is designed to provide (cid:4)-out-of-n redundancy across servers
and to provide resilience against an adversary that can corrupt at
most b servers in any time step.
• decode(κ, t,{ ˆF
}n
i=1) → F : Recovers the original ﬁle F at
time t from a set of ﬁle segments stored at different servers.
• challenge(κ) → {Ci}n
i=1: Generates a challenge value Ci for
each server i.
• respond(i, Ci, ˆF
) → Ri: Generates server’s Si response at
time t to challenge Ci.
• verify(κ, j, {Ci, Ri}n
i=1) → {0, 1}. Checks the response of
server j, using the responses of all servers R1, . . . , Rn to chal-
lenge set C1, . . . , Cn. It outputs a ‘1’ bit if veriﬁcation succeeds,
and ‘0’ otherwise. We assume for simplicity that verify is sound,
i.e., returns 1 for any correct response.
• redistribute(κ, t,{ ˆF
}n
i=1) → {F
i=1∪ ⊥: Is an interac-
(i)
tive protocol that replaces the fragment ˆF
stored at server i with
(i)
t+1. It implements a recreation and distribution of corrupted ﬁle
F
segments, and outputs ⊥ if the ﬁle can not be reconstructed.
4.2 Security model: Formalization
The adversary A is assumed to be stateful and have access to
oracles encode and verify; we assume that A respects the bound b
on the number of permitted corruptions in a given epoch. Denote
by π the system parameters ((cid:4), n, b, T, q, nq).
A participates in the two-phase experiment in Figure 2. In the
test phase, A outputs a ﬁle F , which is encoded and distributed
to servers. The second phase is a challenge phase that runs for T
epochs. In each epoch, A is allowed to corrupt the code base and
storage system of at most b out of n servers. Each server is chal-
lenged nq times in each epoch, and A responds to the challenges
sent to the corrupted servers. If more than a fraction q of a server’s
responses are incorrect, the redistribute algorithm is invoked.
t+1}n
(i)
t
(i)
t
After the experiment runs for T time intervals, a decoding of the
ﬁle is attempted and the experiment outputs 1 if the ﬁle can not
be correctly recovered. We deﬁne the HAIL-advantage of A as:
AdvHAILA (π) = Pr[ExpHAILA (π) = 1].
Remark. In the POR security deﬁnition, by analogy with zero-
knowledge proofs, the same interface used for challenge-response
interactions between the client and server is also available for ﬁle
extraction. In the POR model, the (single) server is permanently
controlled by the adversary. In contrast, in HAIL only at most b
out of the n servers can be corrupted in one time epoch. We could
191Experiment ExpHAILA (π):
κ = (sk, pk) ← keygen(1λ)
F ← A(“test”, pk, π)
{F (i)
for t = 0 to T do
0 }n
At ← A(“corrupt servers”)
for i = 1 to n do
i=1 ← encode(κ, F, (cid:4), n, b)