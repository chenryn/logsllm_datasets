RISC processor. Second, we use the symbolic machine to give
formal descriptions and veriﬁed tag-based implementations of
four security micro-policies: dynamic sealing (§4), compart-
mentalization (§5), control-ﬂow integrity (§6), and memory
safety (§7). Third, we deﬁne a concrete machine incorporating
a PUMP cache (§8) and sketch how to construct concrete
monitors implementing symbolic micro-policies. And ﬁnally
(§9), we give a generic construction showing how tags can be
used to protect the concrete monitor itself from attack, together
with a generic proof (parameterized by some assumptions about
the micro-policy-speciﬁc monitor code) that this construction is
correct. We discuss related work speciﬁc to each micro-policy in
the relevant section (§4–§7), saving more general related work
on micro-policies and reference monitors for §10. We outline
future work in §11. The appendices present additional technical
details; further details can be in a long version, available
electronically.
2 Basic Machine
We begin by introducing the simpliﬁed RISC instruction set
architecture that forms the common core of all the machines
throughout the paper. This basic machine has a ﬁxed word size
and a ﬁxed set of general-purpose registers plus a program
counter (pc) register. It features a small collection of familiar
instructions
inst ::= Nop | Const i rd | Mov rs rd | Binop⊕ r1 r2 rd
Load rp rd | Store rp rs | Jump r | Jal r | Bnz r i | Halt
where ⊕ ∈ {+,−,×, =,≤, . . .}. Const i rd puts a constant
i into register rd. Mov rs rd copies the contents of rs into
rd. Jump and Jal (jump-and-link) are unconditional indirect
jumps, while Bnz r i branches to a ﬁxed offset i (relative to
the current pc) if register r is nonzero. Each instruction is
encoded in a word.
A basic machine state is a tuple (mem, reg, pc) of a word-
addressable memory mem (a partial function from words to
words), a register ﬁle reg (a function from register names to
words), and a pc value (a word). Note that the memory is a
partial function; trying to address outside of the valid memory
(by trying to fetch the next instruction from an invalid address,
or loading from or storing to one) halts the machine. A typical
step rule for this machine is written like this:
mem[pc] = i
decode i = Binop⊕ r1 r2 rd
reg(cid:3)=reg[rd←w1 ⊕ w2]
reg[r2]=w2
reg[r1]=w1
(mem, reg, pc) → (mem, reg(cid:3), pc+1)
(BINOP)
Let’s read this rule in detail. Looking up the memory word
at address pc yields the word i, which should correspond to
some instruction (i.e., an element of the inst set deﬁned above)
via partial function decode. In this case, that instruction is
Binop⊕ r1 r2 rd. Registers r1 and r2 contain the operands
w1 and w2. The notation reg[rd←w1 ⊕ w2] denotes a partial
function that maps rd to w1 ⊕ w2 and behaves like reg on
all other arguments. The next machine state is calculated by
updating the register ﬁle, incrementing the pc, and leaving the
memory unchanged.
The step rule for the Store instruction is similar. (The nota-
tion mem[wp←ws] is deﬁned only when mem[wp] is deﬁned;
i.e., it fails if wp is not a legal address in mem. This ensures
that the set of addressable memory locations remains ﬁxed as
the machine steps.)
decode i = Store rp rs
mem[pc] = i
(mem, reg, pc) → (mem(cid:3), reg, pc+1)
mem(cid:3)=mem[wp←ws]
reg[rp]=wp
reg[rs]=ws
(STORE)
Subroutine calls are implemented by the Jal instruction, which
saves the return address to a general-purpose register ra. Returns
from subroutines are just Jumps through the ra register.
mem[pc] = i
decode i = Jal r
reg(cid:3) = reg[ra←pc+1]
reg[r] = pc(cid:3)
(mem, reg, pc) → (mem, reg(cid:3), pc(cid:3))
(JAL)
3 Symbolic Machine
The symbolic machine is the keystone of our methodology,
embodying our micro-policy programming model. It allows
micro-policies to be expressed and reasoned about in terms of
high-level programs written in Gallina, Coq’s internal functional
programming language, abstracting away irrelevant details
about how they are implemented on concrete low-level hard-
ware and providing an appropriate level of abstraction for
reasoning about their security properties. In this section, we give
just the bare deﬁnition of the symbolic machine; §4 illustrates
how its features are used.
The symbolic machine shares the same general organization
as the basic machine from §2. Its deﬁnition is abstracted
on several parameters that are provided by the micro-policy
designer, collectively forming a symbolic micro-policy: (1) A
collection of symbolic tags, which are used to label instructions
and data. (2) A partial function transfer, which is invoked on
each step of the machine to propagate tags from the current
machine state to the next one. (3) A partial function get service
mapping addresses to pairs of a symbolic monitor service (a
partial function on machine states) and a symbolic tag that
can be used to restrict access to that service. (4) A type EX of
extra machine state for use by the monitor services, plus an
initial value for this extra state.
Symbolic states (mem, reg, pc, extra) consist of a memory,
a register ﬁle, a program counter, and a piece of extra state.
815815
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:04:44 UTC from IEEE Xplore.  Restrictions apply. 
The memory, registers, and pc hold symbolic atoms written
w@t, where w (the “payload”) is a machine word and t is
a symbolic tag. The tag parts are not separately addressable;
they are only accessible to the transfer function and monitor
services, not to user programs.1
The symbolic step rules call the transfer function to decide
whether the step is allowed by the micro-policy and, if so,
how the tags should be updated in the next machine state. The
transfer function is passed a 6-tuple containing the current
opcode plus the tags from the current pc, current instruction,
and the inputs to the current instruction (up to three, depending
on the opcode). It returns a pair containing a tag for the next
pc and a tag for the instruction’s result, if any. For example,
here is the symbolic rule for the Binop instruction:
mem[wpc] = i@ti
reg[r1]=w1@t1
decode i = Binop⊕ r1 r2 rd
reg[rd]= @td
reg[r2]=w2@t2
transfer(Binop⊕, tpc, ti, t1, t2, td) = (t(cid:3)
reg(cid:3) = reg[rd←(w1 ⊕ w2)@t(cid:3)
d]
pc, t(cid:3)
d)
(BINOP)
(mem, reg, wpc@tpc, extra) → (mem, reg(cid:3), (wpc+1)@t(cid:3)
pc, extra)
As in the basic machine, looking up the memory word at
address wpc (the payload part of the current pc value) yields
the atom i@ti; decoding its payload part yields the instruction
Binop⊕ r1 r2 rd. Registers r1 and r2 contain the operands w1
and w2, with tags t1 and t2, and the current tag on the result
register rd is td. The payload part of the current contents of rd
doesn’t matter, since it’s about to be overwritten; we indicate
this with the wildcard pattern . Passing all these tags to the
transfer function yields tags t(cid:3)
d for the next pc and the
new contents of rd. Since transfer is a partial function, it may
not return anything at all for a given 6-tuple of opcode and
tags. If it doesn’t—i.e., if the next step would cause a policy
violation—then none of the step rules will apply and the current
machine state will be stuck. (For simplicity, we assume here that
policy violations are fatal; various error-recovery mechanisms
could also be used [16], [21].) Passing td, the tag on the old
contents of the target register, to the transfer function allows it
to see what kind of data is being overwritten. This information
is useful for implementing dynamic information-ﬂow policies
like “no sensitive upgrade” [4].
pc and t(cid:3)
To illustrate how a transfer function might behave, consider
how the symbolic machine might be used to implement a
very simple taint-propagation micro-policy. Symbolic tags are
drawn from the set {(cid:7),⊥}, representing tainted and untainted
values. The transfer function is written to ensure that, on each
step of the machine, any result that is inﬂuenced by tainted
values is itself tainted. E.g., it might include this clause for
the Binop opcode
transfer(Binop⊕, tpc,−, t1, t2,−) = (tpc, t1 ∨ t2)
where t1 ∨ t2 denotes the max of t1 and t2, where ⊥ < (cid:7). For
this policy, the ti and td tags don’t matter, which we indicate
by writing a dummy value “−”.
1We use the term “user code” for all code in the system that is not part
of the micro-policy monitor, including OS-level code such as schedulers and
device drivers.
The generic symbolic rule for Store is similar:
reg[rs]=ws@ts
reg[rp]=wp@tp
mem[wp]= @td
decode i = Store rp rs
mem[wpc] = i@ti
transfer(Store, tpc, ti, tp, ts, td) = (t(cid:3)
mem(cid:3) = mem[wp←ws@t(cid:3)
d]
pc, t(cid:3)
d)
(STORE)
(mem, reg, wpc@tpc, extra) → (mem(cid:3), reg, (wpc+1)@t(cid:3)
pc, extra)
The symbolic machine’s step relation includes a similarly
augmented version of each of the step rules of the basic machine
(see §B for a complete listing). In addition, there is one new
step rule for handling calls to monitor services, which applies
when the pc is at a service entry point—i.e., an address for
which the get service function is deﬁned.
get service wpc = (f, ti)
transfer(Service, tpc, ti,−,−,−) = (−,−)
(SVC)
f (mem, reg, wpc@tpc, extra) = (mem(cid:3), reg(cid:3), pc(cid:3), extra(cid:3))
(mem, reg, wpc@tpc, extra) → (mem(cid:3), reg(cid:3), pc(cid:3), extra(cid:3))
Here, get service returns the monitor service itself (the function
f), plus a tag ti. The call to transfer checks that this service
is permitted, given the tag on the current pc. The last three
inputs to transfer are set to the dummy value “−”, and the
outputs are not used, since we only care whether the operation
is allowed or not. The Service “opcode” is a special value that
is just used for querying the transfer function about service
routines. Finally, the rule invokes f to carry out the actual
work of the service routine. The behavior of f itself is now
completely up to the micro-policy designer: it is given the
complete symbolic machine state as argument, and it returns
an entire new machine state as result. In particular, some of the
service routines for the policies described below will modify
the tags in the memory. Also, user code will typically get to the
service routine entry point by executing a Jal, and the service
routine is responsible for resetting the pc to the return address
stored in register ra by the Jal. Allowing service routines to
be arbitrary partial functions from machine states to machine
states reﬂects the fact that, at the concrete level, service routine
code runs with a high level of privilege.
To streamline proofs about the micro-policies in later sec-
tions, we divide the symbolic tags into four distinct sets that are
used in different parts of the symbolic machine: tags from the
set Tm are used for labeling words in memory, Tr for registers,
Tpc for the pc, and Ts for monitor services. The deﬁnition
of the transfer function must conform to these conventions;
for example, when propagating tags for Binop, the three last
arguments t1, t2, and td should belong to Tr and the result tag
t(cid:3)
d should also be in Tr. This separation allows some policy
invariants to be maintained “by typechecking,” obviating the
need to maintain them explicitly in proofs and easing the
burden of formal policy veriﬁcation.
As we will see in the following sections, each micro-policy
has complete freedom to treat tags as if they are associated with
the contents of memory locations or registers (pc included)
or as if they are associated with the memory locations or
registers themselves. Both points of view are valid and useful:
micro-policies like dynamic sealing and taint tracking associate
816816
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:04:44 UTC from IEEE Xplore.  Restrictions apply. 
metadata only with contents, while CFI uses tags to distinguish
the memory locations containing instructions and the sources
and targets of indirect jumps, while using the pc tag to track
execution history (the sources of indirect jumps). In fact, some
micro-policies mix the two points of view: IFC associates tags
with memory and register contents, but the pc tracks execution
history (implicit ﬂows), while memory safety tags memory
locations with compound tags that contain a part associated
with the contents and a part associated with the location.
4 Sealing Micro-Policy
Now it’s time to build micro-policies! As a warm-up, we
begin with a simple micro-policy for dynamic sealing [23], a
linguistic mechanism analogous to perfect symmetric encryp-
tion. Informally, we extend the basic machine with three new
primitives (presented as monitor services): mkkey creates a
fresh sealing key; seal takes a data value (a machine word)
and a key and returns an opaque “sealed value” that can be
stored in memory and registers but not used in any other way
until it is passed (together with the same key that was used
to seal it) through the unseal service, which unwraps it and
returns the original raw word.
We proceed in three steps. First, we deﬁne an abstract
sealing machine, a straightforward extension of the basic ma-
chine from §2 that directly captures the “user’s view.” Second,
we show how the abstract machine can be emulated on the
symbolic machine by providing an appropriate encoding of
abstract-machine values (words, sealed values, and keys) as
symbolic atoms, together with a transfer function (written as a
program in Gallina) and Gallina implementations of the three
monitor services. We prove that the symbolic sealing machine
reﬁnes the abstract one. Third, we build concrete machine-code
realizations of the symbolic transfer function and the three
monitor services, which can be executed (together with user
code) on a concrete processor with PUMP hardware extensions.
We carry out the ﬁrst two parts in this section and sketch the
third in §9.
Abstract Sealing Machine To deﬁne an abstract machine
with built-in sealing, we replace the raw words in the registers
and memory of the basic machine with values v drawn from the
more structured set Val ::= w | k | {w}k, where w ranges over
machine words, k ranges over an inﬁnite set AK of abstract
sealing keys, and {w}k is the sealing of payload w under key
k. To keep the example simple, we disallow nested sealing and
sealing of keys: only words can be sealed. We enrich basic
machine states with a set ks of previously allocated keys, and
we assume there is some total function mkkey f that, given a
set of keys ks, chooses a fresh key not in the set.