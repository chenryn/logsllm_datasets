We conclude this chapter with the implementation of qawk, the processor
that translates q queries into awk programs.
First, qawk reads the relfile and collects the table names into the array
relname. It collects any commands nceded to construct the f-th table and
stores them into the array cmd beginning at location cmd[/, 1]. It also collects
the attributes of each table into the two-dimensional array attr; the cntry
attr[i,a] holds the index of the attribute named a in the i-th table.
Second, qawk reads a query and determines which attributes it uses; these
are all the strings of the form Sname in the query. Using the subset function,
it determines T, the first table whose attributes include all of the attributes
present in the query. It substitutes the indexes of these attributes into the origi-
nal query to generate an awk program, issues whatever commands are needed to
create T, then executes the newly generated awk program with T, as input.
The second step is repeated for cach subsequent query.The following
diagram outlines the behavior of qawk:
q query
relfile
qawk
awk program
input 7,
awk
answer
Here is the implementation of qawk:
---
## Page 119
SECTION 4.3
A RELATIONAL DATABASE SYSTEM
601
#qawk - awk relational database query processor
/./（doquery（s0））
function readrel(f)(
vhile （getline 0)
parse relfile
if（$0-/~[A-Za-z]++:/）{
gsub（/[A-Za-z]+/,"",s0）
remove all but name
 name:
}elseif（s0-/[\t]1/)
relname[++nrel]=s0
cmd[nrel,++ncmd[nrel]]= substr（s0,index（s0,"1")+1)
1conmand...
else if（s0-/[\t][A-Za-z]+[\t]+s/）attribute
attr[nrel,s1]=++nattr[nrel]
else if (s0 1-
/[\t]s/)
not white space
print “bad line in relfile:", $0
function doquery（s,
i,5）{
for （i in qattr) clean up for next query
delete qattr[i]
query = s
put Snames in query into qattr,without $
while （match（s,/\s[A-Za-z]+/))（
qattr[substr(s,RSTART+1，RLENGTH-1)]=1
S = Substr(s,RSTART+RLENGTH+1)
for （i = 1;inrel)
didn't find a table vith al1 attributes
missing(qattr)
else(
table i contains attributes in query
for （j in qattr)create awk program
gsub（"\\sj，"s”attr[i，j],query)
for （j=1;j0;i++)
){
if （rand()  Nounphrase Verbphrase
Nounphrase -> the boy
Verbphrase -> Verb Modlist Adverb
Nounphrase
-> the girl
Verb -> runs
Modlist->
Verb -> walks
Modlist -> very Modlist
Adverb ->quickly
Adverb -> slowly
---
## Page 124
114PROCESSiNG WORDS
CHAPTER 5
The productions generate sentences for nonterminals as follows. Suppose
Sentence is the starting nonterminal. Choose a production with that nonter-
minal on the left-hand side:
Sentence -> Nounphrase Verbphrase
Next pick any nonterminal from the right side, for example, Nounphrase, and
rewrite it with any one of the productions for which it is the left side:
Sentence -> Nounphrase Verbphrase
-> the boy Verbphrase
Now pick another nonterminal from the resulting right side (this time only
Verbphrase remains) and rewrite it by one of its productions:
=> the boy Verbphra8e
-> the boy Verb Modlist Adverb
Continue rewriting this way until no more nonterminals remain:
-> the boy Verbphrase
-> the boy Verb Modlist Adverb
-> the boy walks very Modlist Adverb
->
the boy walks very Adverb
 so）
if（$2==->"）(
rhscnt[$1,1]=NF-2
=++1hs[$1]
count lhs
 how many in rhs
for（=3;j1?ARGv[1]:10default 8ize is 10
ARGV[1]
"_"
read standard input subsequently
grand()
reset rand from time of day
}op
n1 = randint(maxnum)
printf（“%g +%g=?，n1,n2)
n2 = randint(maxnum)
while （（input=getline）>0）
if（$0==n1+n2）（
print
"Right!"
}else if（$0s""）(
break
print n1 + n2
}else
break
}while （input>0)
printf("wrong,try again: “)
function randint(n)(return int(rand()•n)+1)
Exercise 5-8. Add the other arithmetic operators. Add a way to provide hints for wrong
answers.
Skills Tosting: Quiz
Our second example is a program called quiz that asks questions from some
of chemical elements. Supposc the question-and-answer file quiz.elems con-
specified file of questions and answers. For example, consider testing knowledge
tains the symbol, atomic number, and full name for cach element, separated by
colons. The first line identifies the fields of subsequent lines:
symbol:number:nameielenent
H:1:Hydrogen
Li:3:Lithium
He:2:He1iun
Be:4:Bery11ium
B:5:Boron
N:7:Nitrogen
C:6:Carbon
0:8:Oxygen
Ne:10:Neon
F:9:Fluorine
Na : 11:SodiumiNatrium
The program uses the first line to decide which field is the question and which
---
## Page 128
118
PROCESSING WORDS
CHAPTER 5
is the answer, then reads the rest of the file into an array, from which it
presents random items and checks answers. After typing the command line
awk -f quiz quiz.elems nane symbo1
we might engage in a dialogue like this:
Beryllium? B
wrong, try again: Be
Pluorine?