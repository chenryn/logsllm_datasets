图10-21 直接绕过JS限制完成订购
10.3.3 修复建议
商品信息，如金额、折扣、数量等原始数据的校验应来自于服务器端，不应该完全相
信客户端传递过来的值。类似的跨平台支付业务，涉及平台之间接口调用，一定要做好对
重要数据，如金额、商品数量等的完整性校验，确保业务重要数据在平台间传输的一致。
10.4 请求重放测试
10.4.1 测试原理和方法
请求重放漏洞是电商平台业务逻辑漏洞中一种常见的由设计缺陷所引发的漏洞，通常
情况下所引发的安全问题表现在商品首次购买成功后，参照订购商品的正常流程请求，进
行完全模拟正常订购业务流程的重放操作，可以实现“一次购买多次收货”等违背正常业务
逻辑的结果。
10.4.2 测试过程
该项测试主要针对电商平台订购兑换业务流程中对每笔交易请求的唯一性判断缺乏有
效机制的业务逻辑问题，通过该项测试可以验证交易流程中随机数、时间戳等生成机制是
否正常，如图10-22所示。
图10-22 测试流程图
步骤一：在生成订单流程时抓取订购请求，如图10-23所示。
图10-23 生成订购请求页面
步骤二：观察每次订购相同商品的请求是否存在不同的随机Token、可变参数等，若
有则检查这些随机数的变化情况和失效情况，是否在当前订购流程中唯一有效，如图10-
24所示。
图10-24 留存订购HTTP请求
步骤三：尝试重放之前已经完成流程的订购请求，观察服务器端是否做出正确响应，
若订购再次生效，订单再次生成则表明服务器存在脆弱性，如图10-25所示。
图10-25 将订购HTTP请求进行重放发送
10.4.3 修复建议
用户每次订单  Token  不应该能重复提交，避免产生重放订购请求的情况。在服务器
订单生成关键环节，应该对订单  Token  对应的订购信息内容、用户身份、用户可用积分
等进行强校验。
10.5 业务上限测试
10.5.1 测试原理和方法
业务上限测试主要是针对一些电商类应用程序在进行业务办理流程中，服务端没有对
用户提交的查询范围、订单数量、金额等数据进行严格校验而引发的一些业务逻辑漏洞。
通常情况下，在业务流程中通过向服务端提交高于或低于预期的数据以校验服务端是否对
所提交的数据做预期强校验。存在此类脆弱性的应用程序，通常表现为查询到超出预期的
信息、订购或兑换超出预期范围的商品等。
10.5.2 测试过程
该项测试主要判断应用程序是否对业务预期范围外的业务请求做出正确回应，如图
10-26所示。
图10-26 测试流程图
步骤一：在业务查询-受理记录查询中，应用程序只允许登录用户查询6个月内的受理
记录，但是通过抓包分析出查询请求中存在明文字段month，如图10-27所示。
图10-27 实际业务查询范围
步骤二：将month  设置的查询范围调高到6  个月以上并提交，应用程序返回了超过6
个月的受理记录，表明服务器端并没有限制用户的查询时间，如图10-28所示。
图10-28 修改查询范围
步骤三：成功查询到大于  6  个月的办理记录，表明该功能不符合业务要求，如图10-29所示。
图10-29 超出限制范围的查询结果
10.5.3 修复建议
在服务器端应该对订单  Token  对应的订购信息内容、用户身份、用户可用积分等进
行强校验。服务端应考虑交易风险控制，对产生异常情况的交易行为（如用户积分数额为
负值、兑换库存数量为 0 的商品等）应当直接予以限制、阻断，而非继续完成整个交易流
程。
第11章 业务流程乱序测试
11.1 业务流程绕过测试
11.1.1 测试原理和方法
该项测试主要针对业务流程的处理流程是否正常，确保攻击者无法通过技术手段绕过
某些重要流程步骤，检验办理业务过程中是否有控制机制来保证其遵循正常流程。例如业
务流程分为三步：第一步，注册并发送验证码；第二步，输入验证码；第三步，注册成
功。在第三步进行抓包分析，将邮箱或手机号替换为其他人的，如果成功注册，就跳过了
第一步和第二步，绕过了正常的业务流程。
11.1.2 测试过程
攻击者访问注册页面，注册测试账户，充值提交并抓取数据包，填写任意充值金额并
抓包，获取订单号，利用订单号构造充值链接并访问链接，查看是否充值成功，如果充值
成功说明存在业务流程绕过问题，如图11-1所示。
以某社交网站为例，经过测试发现订单生成后流程走至链接
http：//www.xxx.com/index.php？controller=site&action=payok&out_trade_no=，只要提供对
应的充值订单号就可以绕过支付环节，未经支付直接充值成功。
图11-1 业务流程绕过测试流程
步骤一：新注册一个账号进行测试，如图11-2所示。
图11-2 注册账号
账号余额为0，如图11-3所示。
图11-3 账户余额
步骤二：对账号充值并用Burp  Suite工具进行数据包截取，金额可随意填写，如图11-4所示。
图11-4 充值并抓包
步骤三：截获支付订单数据包，放弃支付，获取生成的订单号，如图11-5所示。
图11-5 获取支付订单号
步骤四：利用获取的订单号构造链接 
http：//www.xxx.com/index.php？
controller=site&action=payok&out_trade_no=充值订单号，直接访问这个链接即可成功充
值，如图11-6所示。
图11-6 支付成功
充值后的余额如图11-7所示。
图11-7 充值后的余额
11.1.3 修复建议
针对此类漏洞，建议对敏感信息如身份  ID、账号密码、订单号、金额等进行加密处
理，并在服务端对其进行二次比对。
第12章 密码找回模块测试
12.1 验证码客户端回显测试
12.1.1 测试原理和方法
找回密码测试中要注意验证码是否会回显在响应中，有些网站程序会选择将验证码回
显在响应中，来判断用户输入的验证码是否和响应中的验证码一致，如果一致就会通过校
验。
12.1.2 测试流程
填入要找回的账号，通过Burp抓取返回包找到正确验证码，将正确验证码发送给服务
端已达到密码重置的目的，如图12-1所示。
图12-1 验证码发送流
步骤一：网站中一般第一步会要求用户填写账号信息以便发送验证码到用户的邮箱或
者手机号中等待用户查收校验，如图12-2所示。
图12-2 找回密码界面
步骤二：在找回密码测试中需要对发送验证码的请求抓包，观察它的响应结果。本书
中使用工具Burp Suite拦截请求，如图12-3所示。
图12-3 发送验证码请求包
步骤三：拦截到请求包后，通过观察可以发现object参数是验证码的发送邮箱。
POST/member/same/password?type=email&object=PI:EMAIL HTTP/1.1Host:www.xxxxx.com
如果是这个账号的用户，那么就可以在自己的邮件中看到验证码，但是如果不是自己
的账号当验证码发生泄露后任意账号密码修改的漏洞就触发了。
步骤四：查看响应包中的内容，如图12-4示。
图12-4 查看验证码响应包
步骤五：当响应包中返回验证码后就泄露了找回密码的凭证，攻击者只需要利用响应
中的验证码就可以通过找回密码功能修改密码，这样就绕过了只有用户自己邮箱或者手机
才能看到验证码的条件而达到密码修改的目的，如图12-5所示。
图12-5 验证码校验成功进入密码修改界面
12.1.3 修复建议
避免返回验证码到响应包中，验证码一定要放在服务端校验。
12.2 验证码暴力破解测试
12.2.1 测试原理和方法
找回密码功能模块中通常会将用户凭证（一般为验证码）发送到用户自己才可以看到
的手机号或者邮箱中，只要用户不泄露自己的验证码就不会被攻击者利用，但是有些应用
程序在验证码发送功能模块中验证码位数及复杂性较弱，也没有对验证码做次数限制而导
致验证码可被暴力枚举并修改任意用户密码。
在测试验证码是否可以被暴力枚举时，可以先将验证码多次发送给自己的账号，观察
验证码是否有规律，如每次接收到的验证码为纯数字并且是4位数。
12.2.2 测试流程
验证码暴力破解是指在密码重置的过程中使用 Burp Suite 不断地尝试对验证码进行猜
解的测试。一旦验证码猜解成功即可对被攻击账号进行密码重置，如图 12-6所示。
图12-6 验证码发送流程
步骤一：在某  App  的找回密码功能模块中要求用户输入手机号并发送验证码，可以
先将验证码发送到自己手机号来查看验证码是否有规律，可以被暴力枚举。案例中验证码
为4位数，如图12-7所示。
图12-7 验证码是4位数字
步骤二：当确定用户验证码可以暴力枚举后，可以抓取验证码校验请求，对验证码进
行暴力破解。在验证码未知的情况下，可以先填写任意4位数字，如图12-8所示。
图12-8 抓取验证请求包
步骤三：当请求包被拦截后可以观察参数名为mm的请求值是用户的手机号码，参数
名为pno的请求值是验证码（在还不知道验证码的情况下随意填写的），参数名为pas的参
数值是验证码校验成功后要修改的密码，如图12-9所示。
图12-9 验证码校验请求包
请求包如下：
步骤四：这里可以将请求包发送到Burp  Suite工具中的Intruder模块中，并把pno验证
码参数设置为变量载入 4 位数字的密码字典进行枚举测试，可以通过 length 响应长度来观
察payload请求的验证码是否和其他请求不一样，如果发生不一样的情况可能就是真实的
验证码。如图12-10所示，从响应包内容可以观察出验证码枚举猜解正确并修改密码成
功。
图12-10 验证码暴力枚举
12.2.3 修复建议
为了避免出现验证码被暴力破解的情况，建议对用户输入的验证码校验采取错误次数
限制并提高验证码的复杂度。
12.3 接口参数账号修改测试
12.3.1 测试原理和方法
找回密码功能逻辑中常常会在用户修改密码接口提交参数中存在传递用户账号的参
数，而用户账号参数作为一个可控的变量是可以被篡改的，从而导致修改账号密码的凭证
或修改的目标账号出现偏差，最终造成任意账号密码修改的漏洞，如图12-11所示。
图12-11 修改密码接口存在email参数
通常在找回密码逻辑中，服务端会要求用户提供要修改的账号，然后给这个账号发送
只有账号主人才能看到的凭证。比如给这个账号主人绑定的邮箱或手机号发送验证码，或
者找回密码的链接，这样可以保证只有账号主人才可以看到这些凭证。但是如果服务端对
账号的控制逻辑不当，就会导致原有账号被篡改为其他账号，服务端把凭证发送给篡改后
的账号的邮箱或手机，最终造成可利用凭证重置任意账号密码的漏洞。
12.3.2 测试流程
接口参数账号修改测试流程为拦截前端请求，通过修改请求内邮箱或手机号等参数，
将修改后数据发送给服务器进行欺骗达到密码重置的目的，如图12-12所示。
步骤一：在某网站的找回密码功能中，当输入用户账号后会出现发送重置密码邮件的
按钮。在单击发送按钮时抓包，可以看到用户的邮箱已经出现在了数据包的email参数值
中，那么尝试将email参数修改为我们自己的邮箱会出现什么情况？如图12-13所示。
步骤二：修改email参数的值后，网站提示邮件已经发送成功，此时可以打开我们自
己的邮箱查看修改密码邮件是否收到，如图12-14所示。
图12-12 接口参数修改流程
图12-13 修改密码绑定邮箱可修改
图12-14 发送邮件成功
步骤三：可以看到修改密码的链接已经发送到邮箱中，打开链接即可修改目标用户的
密码，尽管目标用户绑定的并不是我们的邮箱，服务端仍将邮件发送到了我们篡改后的邮
箱中，如图12-15所示。
图12-15 接收到修改密码邮件