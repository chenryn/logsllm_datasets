I am working with bidimensional arrays on Numpy. One of my arrays, H, is
random, and I want to compute its pseudoinverse. If I use scipy.linalg.pinv2
everything runs smoothly. However, if I use scipy.linalg.pinv, sometimes
problems arise.
The problem is that, if the j-th column of H is all 1s, pinv(H) has huge
coefficients at the j-th row. This is in turn a problem because, in such
cases, np.dot(pinv(H), Y) contains some nan values (Y is an array of small
integers).
Now, I am not into linear algebra and numeric computation enough to understand
if this is a bug or some precision related property of the two functions. If
this is not a bug, please close this issue and I apologize.
I saved the arrays with np.savetxt(fn, a, '%.2e', ';'): please, see
https://dl.dropboxusercontent.com/u/48242012/example.tar.gz to find them.
In the provided file, you can see in pinv(H).csv that rows 14, 33, 55, 56 and
99 have huge values, while in pinv2(H) the same rows have more decent values.
(I posted the same question on StackOverflow yesterday, but it did not receive
much attention: http://stackoverflow.com/questions/27775986/numpy-scipy-pinv-
and-pinv2-behave-differently . I am reposting here just to signal this
behaviour and to suggest that it may be documented - I can survive with
pinv2.)
I appreciate your efforts.