我们在应用逻辑一章中讨论了它，但它重复出现在这里，在你搜索漏洞时，要注意站点
所使用的的服务，因为在你的搜索过程中，它们每个都代表一种新的攻击向量。这里，
这个漏洞可以通过组合 Zendesk 的 HackerOne 使用方法，以及已知的所允许的重定向
来实现。
此外，在你寻找 bug 时，阅读和回应你的报告的人有时不能马上理解安全影响。这就是
我在漏洞报告中编写这一章的原因。如果你往前推进一小步，并且在你的报告中解释安
全映像，它会确保顺利解决。
但是，即使是这样，公司有时候也会不理解你。如果是这样，像 Mahmoud 所做的一
样，保持挖掘，并看看是否可以证明它可以利用，或者将其和其它漏洞组合来展示影
响。
总结
开放重定向个允许恶意攻击者将人们重定向到未知的恶意站点。就像这些例子展示的那样，
寻找他们需要锐利的观察。有时会出现易于发现
的 ， ， ，以及其它。这种类型的漏洞依赖信任的
redirect_to= domain_name= checkout_url=
61
十二、开放重定向漏洞
滥用，其中受害者被诱导来访问攻击者的站点，并认为他们正在浏览他们认可的站点。
通常，当 URL 作为参数传递给 Web 请求时，你可以发现它们。要留意并玩转 URL 地址，以
便观察是否接受外部站点的链接。
此外，HackerOne 间隔重定向展示了二者的重要性。当你寻找漏洞时，识别站点所用的工具
和服务，以及有时在被认可和接受之前，你需要坚持并清晰展示漏洞。
62
十三、子域劫持
十三、子域劫持
作者：Peter Yaworski
译者：飞龙
协议：CC BY-NC-SA 4.0
描述
子域控制就真的是听上去那样，它是一种场景，恶意用户能够代表合法站点来申请一个子
域。总之，这一类型的漏洞涉及站点为子域创建 DNS 记录，例如，Heroku（主机商），并且
从未申请过该子域。
1. example.com 在Heroku 上注册。
2. example.com 创建 DNS 记录 subdomain.example.com ，指向 unicorn457.heroku.com 。
3. example.com 没有申请 unicorn457.heroku.com 。
4. 恶意用户申请了 unicorn457.heroku.com ，并复制了 example.com 。
5. 所有 subdomain.example.com 的流量都会流经恶意网站，它看上去类似 example.com 。
所以，按照这个逻辑，DNS 条目需要指向未申请的外部服务，例如 Heroku，Github 和
Amazon S3。发现它们的一个不错的方法是使用 KnockPy，它会在工具一节中讨论，它迭代
了子域的常见列表来验证是否存在。
示例
1. Ubiquiti 子域劫持
难度：低
URL：
http://assets.goubiquiti.com
报告链接：
https://hackerone.com/reports/109699
报告日期：2016.1.10
奖金：$500
描述：
63
十三、子域劫持
就像子域劫持的描述中所述， http://assets.goubiquiti.com 拥有指向 Amazon S3 文件存储
的 DNS 记录，但是不存在实际的 Amazon S3 容器。这里是 HackerOne 的截图：
因此，恶意用户可以申请 ，并在这里部署站
uwn-images.s3-website-us-west-1.amazonaws.com
点。假设它可以更加类似 Ubiquiti，这里的漏洞是诱使用户来提交个人信息，并控制账户。
重要结论
DNS 记录提供了全新并独特的漏洞利用机会。使用KnockPy 来尝试验证子域是否存在，
之后确认它们指向有效的资源，并且特别注意三方服务，例如 AWS、Github、Zendesk
以及其他。这些服务允许你注册自定义的 URL。
2. Scan.me 的 Zendesk 指向
难度：低
URL：
support.scan.me
报告链接：
https://hackerone.com/reports/114134
报告日期：2016.2.2
奖金：$1000
描述：
就像 Ubiquiti 的示例那样，这里 Scan.me 拥有一个 DNS 记录，将 support.scan.me 指
向 。这种情况下，黑客 就能够申
scan.zendesk.com harry_mg
请 ， 指向了它。
scan.zendesk.com support.scan.me
就是这样了，奖金是 $1000。
重要结论
要注意！这个漏洞与 2016 年 2 月发现，并且完全不复杂。成功的漏洞挖掘需要敏锐的
观察。
3. Facebook 官方的访问 Token
难度：高
URL：
facebook.com
报告链接：
http://philippeharewood.com/swiping-facebook-official-access-tokens
64
十三、子域劫持
报告日期：2016.2.29
奖金：未公开
描述：
我不知道这是否符合子域劫持的技术定义（如果有的话），但是我觉得这是个重大的发现，
让 Philippe 能够以最少的交互劫持任意 Facebook 账户。
为了理解这个漏洞，我们需要看一看 OAuth，根据他们的站点，它是一个开放协议，能够以
简单和标准的方式来验证 Web 移动和桌面应用的安全性。换句话说，OAuth 允许用户授权某
个应用来代表它们，而不需要向应用分享密码。如果你曾经浏览器过某个站点，它让你使用
你的 Google、Facebook、Twitter 以及其他账户来登录，你就使用了 OAuth。
现在，假设你注意到了这里的潜在利用。如果 OAuth 允许用户授权，错误实现的影响非常之
大。理解了这个过程之后，Philippe 提供了一副不错的图片来解释协议是如何实现的。
Philippe Harewood - Facebook OAuth 流程
总之，我们可以在这里看到：
1. 用户通过一些 APP 请求将 Facebook API 使用一些目的。
2. 这个 APP 将用户重定向到 Facebook API 来授予权限。
3. Facebook API 向用户提供代码并将其重定向到 APP。
65
十三、子域劫持
4. APP 接受代码并调用 Facebook API 来获得 Token。
5. Facebook 返回 Token 给 APP，它代表用于为调用授权。
这个流程中，你会注意到用户在哪儿都不需要向访问它们账户的 APP 提供他们的 Facebook
用户名和密码。这也是个概览，这里也可能出现很多其他事情，包括可以在流程中交换的额
外信息。
这里有一个重大漏洞，Facebook 在 #5 中向应用提供访问 Token。
再回头考虑 Philippe 的发现，它详细解释了如何尝试并捕获这些 Token，来诱使 Facebook
向他发送它们，而不是那个应用。但是，反之，它决定寻找能够控制的，存在漏洞的
Facebook 应用。
结果，每个 Facebook 用户都使用它们的账户授权的应用，但是许多都不显式使用。根据他
的 Write Up，一个例子是“Content Tab of a Page on www”，它在 Facebook 粉丝页面加载了
一些 API 调用。APP 的列表课在 https://www.facebook.com/search/me/apps-used 上获取。
浏览器这个列表之后，Philippe 设法找到了一个 APP，它的配置是错误的，并且可用于使用
请求来捕获 Token，请求为：
https://facebook.com/v2.5/dialog/oauth?response_type=token&display=popup&client_id=APP
_ID&redirect_uri=REDIRECT_URI
这里，它所使用来获取 APP_ID 的应用，是拥有完整权限并配置错误的，意思是步骤 #1 和 #2
已经完成了，用户不会看到弹出窗口来向应用授予权限，因为它们实际上已经完成了。此
外，由于 Facebook 并不持有 REDIRECT_URI ，Philippe 实际上可以持有它，准确来说就像子
域那样。因此，当用户点击了它的链接，它们会重定向到：
http://REDIRECT_URI/access_token_appended_here
Philippe 可以使用它来记录所有访问 Token，并劫持 Facebook 账户。更加 NB 的是，根据它
的博文，一旦你拥有了官方的 Facebook 访问 Token，你就拥有了莱斯其他 Facebook 应用的
Token，例如 Instagram。他需要做的所有事情就是调用 Facebook GraphQL（一个用于从
Facebook 获取数据的 API），响应就会包含用于请求中 APP 的 access_token 。
重要结论
我觉得你可能想知道，为什么这个例子会包含在这本书的这个章节。对我来说，最重要
的结论就是。要考虑到在渗透过程中如何利用一些遗留资源。在这一章的上一个例子
中，DNS 指向了不再继续使用的服务。这里，寻找了预先审批了不再使用的应用。当你
渗透的时候，要寻找这些应用的变化，它们可能会给你留下公开的资源。
此外，如果你喜欢这个例子，你可以查看 Philippe 的博客（包含在资源一章，以及“
Hacking Pro Tips Interview”，这是他坐下来和我一起完成的，他提供了很多不错的建
议）。
66
十三、子域劫持
总结
当一个站点已经创建了无用的 DNS 记录，指向三方服务提供商，子域劫持真的不难以完成。
有很多方法来发现它们，包括使用 KnockPy，Google Hack（ ），
site:*.hackerone.com
Recon-ng，以及其他。这些东西的用法都包含在这本书的工具一章。
此外，就像前面那个 Facebook 访问 Token 的示例那样，当你考虑这种类型的漏洞时，扩展
你的领域，并且考虑目标上存在什么过时的遗留资源。例如， 和预先审批的
redirect_uri
Facebook APP。
67
十四、XML 外部实体注入
十四、XML 外部实体注入
作者：Peter Yaworski
译者：飞龙
协议：CC BY-NC-SA 4.0
XML 外部实体（XXE）漏洞涉及利用应用解析 XML 输入的方式，更具体来说，应用程序处理
输入中外部实体的包含方式。为了完全理解理解如何利用，以及他的潜力。我觉得我们最好
首先理解什么是 XML 和外部实体。
元语言是用于描述其它语言的语言，这就是 XML。它在 HTML 之后开发，来弥补 HTML 的不
足。HTML 用于定义数据的展示，专注于它应该是什么样子。房子，XML 用于定义数据如何
被组织。
例如，HTML 中，你的标签为  ,  ,  ,  ，以及其它。这些东西都用于
定义内容如何展示。 用于定义页面的标题， 标签定义了标题， 标签按
行和列展示数据，并且  表示为简单文本。反之，XML 没有预定义的标签。创建 XML 文
档的人可以定义它们自己的标签，来描述展示的内容。这里是一个示例。
Hacker
1000000
Shot the web
读完了之后，你可以大致猜测出 XML 文档的目的 -- 为了展示职位列表，但是如果它在 Web
页面上展示，你不知道它看起来是什么样。XML 的第一行是一个声明头部，表示 XML 的版
本，以及编码类型。在编写此文的时候，XML 有两个版本，1.0 和 1.1。它们的具体区别超出
了本书范围，因为它们在你渗透的时候没什么影响。
在初始的头部之后，标签 位于所有其它 标签的外面。 又包
含 、 和 标签。现在如果是 HTML，一些标签并
不需要（但最好有）闭合标签（例如  ），但是所有 XML 标签都需要闭合标签。同样，
选取上面的例子， 是个起始标签， 是对应的闭合标签。此外，每个标签都有
名称，并且可以拥有属性。使用标签 ，标签名称就是 ，但是没有属性。另一方
 job
面， 拥有名称 ，并拥有属性 ，由属性名
 responsibility optional
称 和值 组成。
optional 1
68
十四、XML 外部实体注入
由于任何人可以定义任何标签，问题就来了，如果标签可以是任何东西，任何一个人如何知