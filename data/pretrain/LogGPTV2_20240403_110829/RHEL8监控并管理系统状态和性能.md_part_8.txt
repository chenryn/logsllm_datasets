    ```
    这个命令只保存当前运行的内核线程。未运行的进程不会被保存。
:::
::: itemizedlist
**其它资源**
-   `tuna(8)`{.literal} man page
:::
:::
::: section
::: titlepage
# []{#reviewing-a-system-using-tuna-interface_monitoring-and-managing-system-status-and-performance.html#tuning-cpus-using-tuna-tool_reviewing-a-system-using-tuna-interface}使用 tuna 工具调优 CPU {.title}
:::
`tuna`{.literal} 工具命令可以针对单个 CPU。
使用 tuna 工具，您可以：
::: variablelist
[`隔离 CPU`{.literal}]{.term}
:   在指定 CPU 上运行的所有任务都将移到下一个可用的 CPU。隔离 CPU
    使其无法通过从所有线程的关联掩码中删除。
[`包含 CPU`{.literal}]{.term}
:   允许任务在指定的 CPU 上运行
[`恢复 CPU`{.literal}]{.term}
:   将指定的 CPU 恢复到之前的配置。
:::
此流程描述了如何使用 `tuna`{.literal} CLI 调整 CPU。
::: itemizedlist
**先决条件**
-   已安装 tuna 工具。如需更多信息，请参阅 [安装 tuna
    工具](https://access.redhat.com/documentation/en-us/red_hat_enterprise_linux/8/html/monitoring_and_managing_system_status_and_performance/reviewing-a-system-using-tuna-interface_monitoring-and-managing-system-status-and-performance#installing-tuna-tool_reviewing-a-system-using-tuna-interface){.link}。
:::
::: itemizedlist
**流程**
-   指定要受命令影响的 CPU 列表：
    ``` screen
    # tuna --cpus=cpu_list [command]
    ```
    [*cpu_list*]{.emphasis} 参数是一个逗号分隔的 CPU
    编号列表。例如，`--cpus=0,2`{.literal}。也可以在范围中指定 CPU
    列表，例如 `--cpus="1-3"`{.literal}，这将选择 CPU 1、2 和 3。
    要将特定的 CPU 添加到当前的 [*cpu_list*]{.emphasis} 中，例如，使用
    `--cpus=+0。`{.literal}
    将 \[[*命令*]{.emphasis}\] 替换为 `--isolate`{.literal}。
-   隔离 CPU：
    ``` screen
    # tuna --cpus=cpu_list --isolate
    ```
-   要包括 CPU：
    ``` screen
    # tuna --cpus=cpu_list --include
    ```
-   要使用有四个或者多个处理器的系统，显示所有 ssh 线程在 CPU
    [*0*]{.emphasis} 和 [*1*]{.emphasis} 上运行，以及 CPU 2 和
    [*3*]{.emphasis} []{.emphasis} 中的所有 `http`{.literal} 线程：
    ``` programlisting
    # tuna --cpus=0,1 --threads=ssh\* \
    --move --cpus=2,3 --threads=http\* --move
    ```
    这个命令按顺序执行以下操作：
    ::: orderedlist
    1.  选择 CPU [*0*]{.emphasis} [*和*]{.emphasis} 1.
    2.  选择所有以 `ssh`{.literal} 开头的线程.
    3.  将所选线程移到所选 CPU。Tuna 设置以 `ssh`{.literal}
        开始的线程关联性掩码，以相应 CPU 开头。CPU 可以数字表示为
        [*0*]{.emphasis} 和 [*1*]{.emphasis}，十六进制掩码表示为
        0x3，或者二进制形式为 11。
    4.  将 CPU 列表重置为 [*2*]{.emphasis} 和 [*3*]{.emphasis}。
    5.  选择以 `http`{.literal} 开头的所有线程。
    6.  将所选线程移到指定的 CPU。Tuna 将线程的关联性掩码从
        `http`{.literal} 设置为指定的 CPU。CPU 可以通过数字方式表示为
        [*2*]{.emphasis} 和 [*3*]{.emphasis}，以十六进制掩码表示为
        0xC，或者作为 1100 的二进制代码表示。
    :::
:::
::: itemizedlist
**验证步骤**
-   显示当前配置并验证更改是否已按预期执行：
    ``` programlisting
    # tuna --threads=gnome-sc\* --show_threads \
    --cpus=0 --move --show_threads --cpus=1 \
    --move --show_threads --cpus=+0 --move --show_threads
                           thread       ctxt_switches
         pid SCHED_ rtpri affinity voluntary nonvoluntary             cmd
       3861   OTHER     0      0,1     33997           58 gnome-screensav
                           thread       ctxt_switches
         pid SCHED_ rtpri affinity voluntary nonvoluntary             cmd
       3861   OTHER     0        0     33997           58 gnome-screensav
                           thread       ctxt_switches
         pid SCHED_ rtpri affinity voluntary nonvoluntary             cmd
       3861   OTHER     0        1     33997           58 gnome-screensav
                           thread       ctxt_switches
         pid SCHED_ rtpri affinity voluntary nonvoluntary             cmd
       3861   OTHER     0      0,1     33997           58 gnome-screensav
    ```
    这个命令按顺序执行以下操作：
    ::: orderedlist
    1.  选择以 `gnome-sc`{.literal} 线程开头的所有线程。
    2.  显示所选线程，使用户能够验证其关联性掩码和 RT 优先级。
    3.  选择 CPU [*0*]{.emphasis}。
    4.  将 `gnome-sc`{.literal} 线程移到指定的 CPU、CPU
        [*0*]{.emphasis}。
    5.  显示移动的结果。
    6.  将 CPU 列表重置为 CPU [*1*]{.emphasis}。
    7.  将 `gnome-sc`{.literal} 线程移动到指定的 CPU、CPU
        [*1*]{.emphasis}。
    8.  显示移动结果.
    9.  将 CPU [*0*]{.emphasis} 添加到 CPU 列表中。
    10. 将 `gnome-sc`{.literal} 线程移到指定的 CPU、CPU [*0*]{.emphasis}
        和 [*1*]{.emphasis}。
    11. 显示移动结果.
    :::
:::
::: itemizedlist
**其它资源**
-   `/proc/cpuinfo`{.literal} 文件
-   `tuna(8)`{.literal} man page
:::
:::
::: section
::: titlepage
# []{#reviewing-a-system-using-tuna-interface_monitoring-and-managing-system-status-and-performance.html#tuning-irqs-using-tuna-tool_reviewing-a-system-using-tuna-interface}使用 tuna 工具调优 IRQ {.title}
:::
`/proc/interrupts`{.literal} 文件记录每个 IRQ
的中断数、中断类型以及位于该 IRQ 的设备名称。
这个步骤描述了如何使用 `tuna`{.literal} 工具调整 IRQ。
::: itemizedlist
**先决条件**
-   已安装 tuna 工具。如需更多信息，请参阅 [安装 tuna
    工具](https://access.redhat.com/documentation/en-us/red_hat_enterprise_linux/8/html/monitoring_and_managing_system_status_and_performance/reviewing-a-system-using-tuna-interface_monitoring-and-managing-system-status-and-performance#installing-tuna-tool_reviewing-a-system-using-tuna-interface){.link}。
:::
::: itemizedlist
**流程**
-   查看当前的 IRQ 及其相关性：
    ``` screen
    # tuna --show_irqs
    # users            affinity
    0 timer                   0
    1 i8042                   0
    7 parport0                0
    ```
-   指定要受命令影响的 IRQ 列表：
    ``` screen
    # tuna --irqs=irq_list [command]
    ```
    [*irq_list*]{.emphasis} 参数是一个逗号分隔的 IRQ
    编号或用户名模式的列表。
    将 \[[*command*]{.emphasis}\] 替换为 `--spread`{.literal}。
-   将中断移动到指定的 CPU:
    ``` screen
    # tuna --irqs=128 --show_irqs
       # users            affinity
     128 iwlwifi           0,1,2,3
    # tuna --irqs=128 --cpus=3 --move
    ```
    使用 irq_list 参数替换 [*128*]{.emphasis}，并将 [*3*]{.emphasis}
    替换为 cpu_list 参数。
    [*cpu_list*]{.emphasis} 参数是一个逗号分隔的 CPU 编号列表，如
    `--cpus=0,2`{.literal}。如需更多信息，[请参阅使用 tuna 工具调优
    CPU](https://access.redhat.com/documentation/en-us/red_hat_enterprise_linux/8/html/monitoring_and_managing_system_status_and_performance/reviewing-a-system-using-tuna-interface_monitoring-and-managing-system-status-and-performance#tuning-cpus-using-tuna-tool_reviewing-a-system-using-tuna-interface){.link}。
:::
::: itemizedlist
**验证步骤**
-   将任何中断前和之后所选 IRQ 的状态与指定 CPU 进行对比：
    ``` screen
    # tuna --irqs=128 --show_irqs
       # users            affinity
     128 iwlwifi                 3
    ```
:::
::: itemizedlist
**其它资源**
-   `/procs/interrupts`{.literal} 文件
-   `tuna(8)`{.literal} man page
:::
:::
:::
[]{#monitoring-performance-using-rhel-system-roles_monitoring-and-managing-system-status-and-performance.html}
::: chapter
::: titlepage
# []{#monitoring-performance-using-rhel-system-roles_monitoring-and-managing-system-status-and-performance.html#monitoring-performance-using-rhel-system-roles_monitoring-and-managing-system-status-and-performance}第 5 章 使用 RHEL 系统角色监控性能 {.title}
:::
作为系统管理员，您可以将 metrics RHEL 系统角色用于任何 Ansible
Automation Platform 控制节点，以监控系统的性能。
::: section
::: titlepage
# []{#monitoring-performance-using-rhel-system-roles_monitoring-and-managing-system-status-and-performance.html#intro-to-rhel-system-roles_monitoring-performance-using-rhel-system-roles}RHEL 系统角色简介 {.title}
:::
RHEL 系统角色是 Ansible 角色和模块的集合。RHEL
系统角色提供了一个配置界面，用于远程管理多个 RHEL
系统。这个界面允许在多个 RHEL
版本间管理系统配置，以及处理新的主发行版本。
在 Red Hat Enterprise Linux 8 中，该接口目前由以下角色组成：
::: itemizedlist
-   kdump
-   network
-   selinux
-   storage
-   certificate
-   kernel_settings
-   logging
-   metrics
-   nbde_client 和 nbde_server
-   timesync
-   tlog
:::
所有这些角色都由 `AppStream`{.literal} 存储库中的
`rhel-system-roles`{.literal} 软件包提供。
::: itemizedlist
**其它资源**
-   [Red Hat Enterprise
    Linux(RHEL)系统角色](https://access.redhat.com/articles/3050101){.link}
-   `/usr/share/doc/rhel-system-roles`{.literal} 文档
    [^\[1\]^](#monitoring-performance-using-rhel-system-roles_monitoring-and-managing-system-status-and-performance.html#ftn.idm139675526697136){#monitoring-performance-using-rhel-system-roles_monitoring-and-managing-system-status-and-performance.html#idm139675526697136
    .footnote}
:::
:::
::: section
::: titlepage
# []{#monitoring-performance-using-rhel-system-roles_monitoring-and-managing-system-status-and-performance.html#rhel-system-roles-terminology_monitoring-performance-using-rhel-system-roles}RHEL 系统角色术语 {.title}
:::
您可以在本文档中找到以下术语：
::: variablelist
**系统角色术语**
[Ansible playbook]{.term}
:   Playbook 是 Ansible
    的配置、部署和编配语言。它们可以描述您希望远程系统强制使用的策略，或者在一般的
    IT 进程中选择一组步骤。
[控制节点]{.term}
:   安装了 Ansible 的任何机器。您可以从任何控制节点运行命令和
    playbook，调用 /usr/bin/ansible 或
    /usr/bin/ansible-playbook。您可以使用任意安装了 Python
    的计算机作为控制节点 - 笔记本电脑、共享桌面和服务器都可以运行
    Ansible。但是，您不能使用 Windows
    机器作为控制节点。您可以拥有多个控制节点。
[清单（Inventory）]{.term}
:   受管节点列表。清单文件有时也称为\"hostfile\"。您的清单可以为每个受管节点指定像
    IP
    地址等信息。清单也可以管理受管节点，创建并嵌套组以更轻松地进行扩展。如需了解更多有关清单的信息，请参阅使用清单一
    节。
[受管节点]{.term}
:   使用 Ansible 管理的网络设备、服务器或两者。受管节点有时也称为
    \"hosts（主机）\"。Ansible 未安装到受管节点上。
:::
:::
::: section
::: titlepage
# []{#monitoring-performance-using-rhel-system-roles_monitoring-and-managing-system-status-and-performance.html#installing-rhel-system-roles-in-your-system_monitoring-performance-using-rhel-system-roles}在系统中安装 RHEL 系统角色 {.title}