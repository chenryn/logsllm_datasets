title:Compiler-instrumented, Dynamic Secret-Redaction of Legacy Processes
for Attacker Deception
author:Frederico Araujo and
Kevin W. Hamlen
Compiler-instrumented, Dynamic Secret-Redaction 
of Legacy Processes for Attacker Deception
Frederico Araujo and Kevin W. Hamlen, The University of Texas at Dallas
https://www.usenix.org/conference/usenixsecurity15/technical-sessions/presentation/araujo
This paper is included in the Proceedings of the 24th USENIX Security SymposiumAugust 12–14, 2015 • Washington, D.C.ISBN 978-1-939133-11-3Open access to the Proceedings of  the 24th USENIX Security Symposium is sponsored by USENIXCompiler-instrumented, Dynamic Secret-Redaction
of Legacy Processes for Attacker Deception
Frederico Araujo and Kevin W. Hamlen
The University of Texas at Dallas
{frederico.araujo, hamlen}@utdallas.edu
Abstract
An enhanced dynamic taint-tracking semantics is pre-
sented and implemented, facilitating fast and precise run-
time secret redaction from legacy processes, such as those
compiled from C/C++. The enhanced semantics reduce
the annotation burden imposed upon developers seeking
to add secret-redaction capabilities to legacy code, while
curtailing over-tainting and label creep.
An implementation for LLVM’s DataFlow Sani-
tizer automatically instruments taint-tracking and secret-
redaction support into annotated C/C++ programs at
compile-time, yielding programs that can self-censor their
address spaces in response to emerging cyber-attacks. The
technology is applied to produce the ﬁrst information
ﬂow-based honey-patching architecture for the Apache
web server. Rather than merely blocking intrusions, the
modiﬁed server deceptively diverts attacker connections
to secret-sanitized process clones that monitor attacker
activities and disinform adversaries with honey-data.
1
Introduction
Redaction of sensitive information from documents has
been used since ancient times as a means of conceal-
ing and removing secrets from texts intended for pub-
lic release. As early as the 13th century B.C., Pharaoh
Horemheb, in an effort to conceal the acts of his predeces-
sors from future generations, so thoroughly located and
erased their names from all monument inscriptions that
their identities weren’t rediscovered until the 19th century
A.D. [22]. In the modern era of digitally manipulated
data, dynamic taint analysis (cf., [40]) has become an im-
portant tool for automatically tracking the ﬂow of secrets
(tainted data) through computer programs as they execute.
Taint analysis has myriad applications, including program
vulnerability detection [5, 6, 9, 25, 33, 34, 37, 45, 46], mal-
ware analysis [19, 20, 36, 48], test set generation [3, 42],
and information leak detection [4, 14, 21, 23, 24, 49].
Our research introduces and examines the associated
challenge of secret redaction from program process im-
ages. Safe, efﬁcient redaction of secrets from program
address spaces has numerous potential applications, in-
cluding the safe release of program memory dumps to
software developers for debugging purposes, mitigation
of cyber-attacks via runtime self-censoring in response to
intrusions, and attacker deception through honey-potting.
A recent instantiation of the latter is honey-patching [2],
which proposes crafting software security patches in such
a way that future attempted exploits of the patched vul-
nerabilities appear successful to attackers. This frustrates
attacker vulnerability probing, and affords defenders op-
portunities to disinform attackers by divulging “fake” se-
crets in response to attempted intrusions. In order for such
deceptions to succeed, honey-patched programs must be
imbued with the ability to impersonate unpatched soft-
ware with all secrets replaced by honey-data. That is, they
require a technology for rapidly and thoroughly redacting
all secrets from the victim program’s address space at
runtime, yielding a vulnerable process that the attacker
may further penetrate without risk of secret disclosure.
Realizing such runtime process secret redaction in prac-
tice educes at least two signiﬁcant research challenges.
First, the redaction step must yield a runnable program
process. Non-secrets must therefore not be conservatively
redacted, lest data critical for continuing the program’s
execution be deleted. Secret redaction for running pro-
cesses is hence especially sensitive to label creep and over-
tainting failures. Second, many real-world programs tar-
geted by cyber-attacks were not originally designed with
information ﬂow tracking support, and are often expressed
in low-level, type-unsafe languages, such as C/C++. A
suitable solution must be amenable to retroﬁtting such
low-level, legacy software with annotations sufﬁcient to
distinguish non-secrets from secrets, and with efﬁcient
ﬂow-tracking logic that does not impair performance.
Our approach builds upon the LLVM compiler’s [31]
DataFlow Sanatizer (DFSan) infrastructure [18], which
USENIX Association  
24th USENIX Security Symposium  145
1
adds byte-granularity taint-tracking support to C/C++ pro-
grams at compile-time. At the source level, DFSan’s
taint-tracking capabilities are purveyed as runtime data-
classiﬁcation, data-declassiﬁcation, and taint-checking
operations, which programmers add to their programs to
identify secrets and curtail their ﬂow at runtime. Unfortu-
nately, straightforward use of this interface for redaction
of large, complex legacy codes can lead to severe over-
tainting, or requires an unreasonably detailed retooling of
the code with copious classiﬁcation operations. This is un-
safe, since missing even one of these classiﬁcation points
during retooling risks disclosing secrets to adversaries.
To overcome these deﬁciencies, we augment DFSan
with a declarative, type annotation-based secret-labeling
mechanism for easier secret identiﬁcation; and we intro-
duce a new label propagation semantics, called Pointer
Conditional-Combine Semantics (PC2S), that efﬁciently
distinguishes secret data within C-style graph data struc-
tures from the non-secret structure that houses the data.
This partitioning of the bytes greatly reduces over-tainting
and the programmer’s annotation burden, and proves crit-
ical for precisely redacting secret process data whilst pre-
serving process operation after redaction.
Our innovations are showcased through the develop-
ment of a taint tracking-based honey-patching framework
for three production web servers, including the popu-
lar Apache HTTP server (∼2.2M SLOC). The modiﬁed
servers respond to detected intrusions by transparently
forking attacker sessions to unpatched process clones
in conﬁned decoy environments. Runtime redaction
preserves attacker session data without preserving data
owned by other users, yielding a deceptive process that
continues servicing the attacker without divulging secrets.
The decoy can then monitor attacker strategies, harvest
attack data, and disinform the attacker with honey-data in
the form of false ﬁles or process data.
Our contributions can be summarized as follows:
• We introduce a pointer tainting methodology through
which secret sources are derived from statically anno-
tated data structures, lifting the burden of identifying
classiﬁcation code-points in legacy C code.
• We propose and formalize taint propagation seman-
tics that accurately track secrets while controlling
taint spread. Our solution is implemented as a small
extension to LLVM, allowing it to be applied to a
large class of COTS applications.
• We implement a memory redactor for secure honey-
patching. Evaluation shows that our implementation
is both more efﬁcient and more secure than previous
pattern-matching based redaction approaches.
• Implementations and evaluations for three produc-
tion web servers demonstrate that the approach is
feasible for large-scale, performance-critical soft-
ware with reasonable overheads.
Listing 1: Apache’s URI parser function (excerpt)
/* ﬁrst colon delimits username:password */
s1 = memchr(hostinfo, ':', s − hostinfo);
if (s1) {
uptr->user = apr pstrmemdup(p, hostinfo, s1 − hostinfo);
++s1;
uptr->password = apr pstrmemdup(p, s1, s − s1);
}
1
2
3
4
5
6
7
2 Approach Overview
We ﬁrst outline practical limitations of traditional dy-
namic taint-tracking for analyzing dataﬂows in server ap-
plications, motivating our research. We then overview our
approach and its application to the problem of redacting
secrets from runtime process memory images.
2.1 Dynamic Taint Analysis
Dynamic taint analyses enforce taint policies, which spec-
ify how data conﬁdentiality and integrity classiﬁcations
(taints) are introduced, propagated, and checked as a
program executes. Taint introduction rules specify taint
sources—typically a subset of program inputs. Taint prop-
agation rules deﬁne how taints ﬂow. For example, the
result of summing tainted values might be a sum labeled
with the union (or more generally, the lattice join) of the
taints of the summands. Taint checking is the process of
reading taints associated with data, usually to enforce an
information security policy. Taints are usually checked at
data usage or disclosure points, called sinks.
Extending taint-tracking to low-level, legacy code not
designed with taint-tracking in mind is often difﬁcult. For
example, the standard approach of specifying taint intro-
ductions as annotated program inputs often proves too
coarse for inputs comprising low-level, unstructured data
streams, such as network sockets. Listing 1 exempliﬁes
the problem using a code excerpt from the Apache web
server [1]. The excerpt partitions a byte stream (stored
in buffer s1) into a non-secret user name and a secret
password, delimited by a colon character. Na¨ıvely label-
ing input s1 as secret to secure the password over-taints
the user name (and the colon delimiter, and the rest of
the stream), leading to excessive label creep—everything
associated with the stream becomes secret, with the result
that nothing can be safely divulged.
A correct solution must more precisely identify data
ﬁeld uptr->password (but not uptr->user) as se-
cret after the unstructured data has been parsed. This
is achieved in DFSan by manually inserting a runtime
classiﬁcation operation after line 6. However, on a larger
scale this brute-force labeling strategy imposes a danger-
ously heavy annotation burden on developers, who must
manually locate all such classiﬁcation points. In C/C++
programs littered with pointer arithmetic, the correct clas-
siﬁcation points can often be obscure. Inadvertently omit-
ting even one classiﬁcation risks information leaks.
146  24th USENIX Security Symposium 
USENIX Association
2
2.2 Sourcing & Tracking Secrets
To ease this burden, we introduce a mechanism whereby
developers can identify secret-storing structures and ﬁelds
declaratively rather than operationally. For example, to
correctly label the password in Listing 1 as secret, users
of our system may add type qualiﬁer SECRET STR to
the password ﬁeld’s declaration in its abstract datatype
deﬁnition. Our modiﬁed LLVM compiler responds to
this static annotation by dynamically tainting all values
assigned to the password ﬁeld. Since datatypes typically
have a single point of deﬁnition (in contrast to the many
code points that access them), this greatly reduces the
annotation burden imposed upon code maintainers.
In cases where the appropriate taint is not stati-
cally known (e.g., if each password requires a differ-
ent, user-speciﬁc taint label), parameterized type-qualiﬁer
SECRET(cid:31)f(cid:30) identiﬁes a user-implemented function f that
computes the appropriate taint label at runtime.
Unlike traditional taint introduction semantics, which
label program input values and sources with taints, rec-
ognizing structure ﬁelds as taint sources requires a
new form of taint semantics that conceptually inter-
prets dynamically identiﬁed memory addresses as taint
sources. For example, a program that assigns address
&(uptr->password) to pointer variable p, and then as-
signs a freshly allocated memory address to ∗p, must
automatically identify the freshly allocated memory as a
new taint source, and thereafter taint any values stored at
∗p[i] (for all indexes i).
To achieve this, we leverage and extend DFSan’s
pointer-combine semantics (PCS) feature, which option-
ally combines (i.e., joins) the taints of pointers and
pointees during pointer dereferences. Speciﬁcally, when
PCS on-load is enabled, read-operation ∗p yields a value
tainted with the join of pointer p’s taint and the taint of
the value to which p points; and when PCS on-store is
enabled, write-operation ∗p := e taints the value stored
into ∗p with the join of p’s and e’s taints. Using PCS leads
to a natural encoding of SECRET annotations as pointer
taints. Continuing the previous example, PCS propagates
uptr->password’s taint to p, and subsequent derefer-
encing assignments propagate the two pointers’ taints to
secrets stored at their destinations.
PCS works well when secrets are always separated
from the structures that house them by a level of pointer
indirection, as in the example above (where uptr->
password is a pointer to the secret rather than the se-
cret itself). However, label creep difﬁculties arise when
structures mix secret values with non-secret pointers. To
illustrate, consider a simple linked list (cid:27) of secret inte-
gers, where each integer has a different taint. In order
for PCS on-store to correctly classify values stored to
(cid:31)->secret int, pointer (cid:27) must have taint γ1, where γ1
is the desired taint of the ﬁrst integer. But this causes
Listing 2: Abbreviated Apache’s session record struct
1
2
3
4
5
6
7
typedef struct {
NONSECRET apr pool t *pool;
NONSECRET apr uuid t *uuid;
SECRET STR const char *remote user;
apr table t *entries;
...
} SECRET session rec;
stores to (cid:31)->next to incorrectly propagate taint γ1 to the
node’s next-pointer, which propagates γ1 to subsequent
nodes when dereferenced. In the worst case, all nodes be-
come labeled with all taints. Such issues have spotlighted
effective pointer tainting as a signiﬁcant challenge in the
taint-tracking literature [17, 27, 40, 43].
To address this shortcoming, we introduce a new, gen-
eralized PC2S semantics that augments PCS with pointer-
combine exemptions conditional upon the static type of
the pointee. In particular, a PC2S taint-propagation pol-
icy may dictate that taint labels are not combined when
the pointee has pointer type. Hence, (cid:31)->secret int
receives (cid:27)’s taint because the assigned expression has
integer type, whereas (cid:27)’s taint is not propagated to (cid:31)->
next because the latter’s assigned expression has pointer
type. We ﬁnd that just a few strategically selected exemp-
tion rules expressed using this reﬁned semantics sufﬁces
to vastly reduce label creep while correctly tracking all
secrets in large legacy source codes.
In order to strike an acceptable balance between secu-
rity and usability, our solution only automates tainting
of C/C++ style structures whose non-pointer ﬁelds share
a common taint. Non-pointer ﬁelds of mixed tainted-
ness within a single struct are not supported automatically
because C programs routinely use pointer arithmetic to
reference multiple ﬁelds in a struct via a common pointer
(imparting the pointer’s taint to all the struct’s non-pointer
ﬁelds). Our work therefore targets the common case in
which the taint policy is expressible at the granularity of
structures, with exemptions for ﬁelds that point to other
(differently tainted) structure instances. This corresponds
to the usual scenario where a non-secret graph structure
(e.g., a tree) stores secret data in its nodes.
Users of our system label structure datatypes as
SECRET (implicitly introducing a taint to all ﬁelds within
the structure), and additionally annotate pointer ﬁelds as
NONSECRET to exempt their taints from pointer-combines
during dereferences. Pointers to dynamic-length, null-
terminated secrets get annotation SECRET STR. For exam-
ple, Listing 2 illustrates the annotation of session req,
used by Apache to store remote users’ session data. Finer-
granularity policies remain enforceable, but require man-
ual instrumentation via DFSan’s API, to precisely distin-
guish which of the code’s pointer dereference operations