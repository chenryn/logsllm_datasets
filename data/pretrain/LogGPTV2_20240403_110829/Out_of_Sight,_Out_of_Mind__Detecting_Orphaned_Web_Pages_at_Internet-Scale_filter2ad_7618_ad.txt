likelihood of a page being orphaned. As a starting point, we take
a domain’s sitemap from 2020 and we subtract the year in which
a page was last encountered from 2020 to get the page’s age. The
oldest page in our data set is from 1997, and, hence, the maximum
age a page in our data set can have is 23 years. The similarity score
is normalized to [0-1], and we can easily scale it to [0-23]. As such,
we combine the parameters to the orphan score 𝑂 = 23𝑆𝑤𝑠+𝐴𝑤𝑎
.
Here, 𝑆 is the similarity score, 𝐴 is the age (calculated by subtract-
ing the last-seen year from 2020), and 𝑤𝑠 and 𝑤𝑎 are weights of
the similarity score and the age. We normalize to [0-1].
23
We evaluate different values between 0 and 1 in increments of
0.1 for 𝑤𝑠 and 𝑤𝑎. Figure 6 depicts the results. With each incre-
ment the distribution of the orphan score slowly excludes a set
of links (on the right side of the graph) until it converges to the
normal distribution of Figure 5 at 𝑤𝑠 = 1 and 𝑤𝑎 = 0. The graph
becomes split in two: a normal distribution on the left (low orphan
score), and a set of outliers on the right of the bell (higher than av-
erage orphan score), allowing us to study the set of links that got
“detached” from the greater chunk in the graph.
We use a weight allocation of 𝑤𝑠 = 0.9 and 𝑤𝑎 = 0.1, along
with a cutoff of 0.9. Meaning, we discard all pages with an orphan
score lower than 0.9. This reduces our set of pages to 26,756 URLs.
4.5 Classifying the Type of Pages
Following, we classify the identified 26,756 URLs and determine
whether they are truly orphaned. We look for specific indicators,
in the source code or content, that provides insight into the orphan
status. We divide them up in three classes: likely orphaned, not
orphaned, and uncertain. With likely orphaned, we identify clear
indicators that the page is orphaned, such as outdated copyright
statements or incomplete/boilerplate code. Second, we label a page
as non-orphaned when we detect that the copyright on the page
is at least from 2020. Note, that this will mislabel pages with a
dynamically generated copyright, which is in line with our goal
of providing a lower bound. Finally, we label a page as uncertain
when there is no a clear indicator for it to be likely orphaned or
for the page to be non-orphaned. Our indicators are:
20002005201020152020Year0500010000Number of PagesDomains withpages in 2000All domains20002005201020152020Year05001000150020002500Number of PagesDomains withpages in 2000All domains20002005201020152020Year100101102103104Number of Pages (log)20002005201020152020Year0.00.20.40.60.81.0Percentage of PagesNot normalizedNormalized0.250.50.751Similarity Score0250005000075000100000125000Number of PagesSession 1A: Cybercrime CCS ’21, November 15–19, 2021, Virtual Event, Republic of Korea27Figure 6: Empirical evaluation of the weights in the Orphan Score formula. We see that a higher weight for the similarity score
leads to the exclusion of a specific set of links. Chosing the extremes (𝑤𝑎 = 1 or 𝑤𝑠 = 1) leads to a more discrete clustering of
the orphan score, thereby increasing the per-score-max.
4.5.1 Copyright Statements Copyright statements, often at the bot-
tom of a page, can give insight into when a page was last up-
dated. To capture these statements, we scan for the word “copy-
right” (case insensitive) and the copyright symbol (©). If present,
we examine the 50 characters before and after the copyright, and
try to detect a date. If the year is 2020 or 2021, we assume the page
is up-to-date. If the year is older, we label it as likely orphaned.
4.5.2 Boilerplate Code Websites often use “boilerplate code” to
speed up the development process. They can function as a template
complying with the general setup of the website, or as a test page
to confirm successful functionality or deployment. This boilerplate
code, when rendered, may display an empty page, or a generic
(small) set of words. The code itself, however, may be filled with
boilerplate HTML tags or JavaScript code blocks, assuring compli-
ance with the general template of the website.
Boilerplate code that is not further developed with content can
be an indication of an orphaned web page, presumably because
there was intention of deploying an endpoint, which was then later
not further pursued, although without removing the page.
We identify those pages as boilerplate that result in an empty
page or one with less than 5 words after we strip all HTML-tags
and script blocks from the source.
4.5.3 Error Pages We already removed pages that respond with
a status code OK, yet display an error message (see Section 3.2).
However, such pages might still be present in our data because
on our heuristic to filter at-scale might not be perfectly accurate.
Therefore, on this pre-filtered data set, we now utilize a more ex-
pensive and more accurate additional analysis step. To detect these
pages, we look for common phrases, such as “Page Not Found.” The
full list of key-phrases can be found in Appendix A.
Following Redirects and Loading Frames Earlier, we removed
4.5.4
all pages that responded with a status code different than OK (200).
While effective at-scale, this approach misses specific redirects, for
example in JavaScript or HTML meta tags. We detect these redi-
rects by comparing them against a list of known in-page redirect
techniques (see Appendix A). Similarly, we can use a list of HTML
tags used for loading frames to detect these types of pages. Albeit
pages making use of redirects or frames can be classified as such,
they might still be unmaintained or forgotten.
For both types, we attempt to detect the resource referenced
by the redirect or frame. In case multiple frames are loaded, we
only analyze the first one we encounter. Once resolved, we apply
the same classification as we did initially. For redirects, we might
encounter a loop, that is a page redirects to another redirecting
page, possibly resulting in an infinite redirect loop. Like modern
browsers, we limit the number of consecutive redirects.
In our
case, we follow a maximum of 20 redirects.
4.6 Removing One Domain Name
When analyzing our remaining 26,756 pages we notice one domain
name evading DUDe as it was spread over multiple TLDs, biasing
our results with a little over 20,000 entries. We missed these cases
as the pages are spread over multiple TLDs (.my, .hk, .tw, .net,
.ie, .ae, and .id), and our heuristic functions on a fully-qualified
domain name basis.
Remarkably, the TLDs of the domain are primarily Asia-oriented,
with the exception of .net and .ie. We manually filter out the
pages using this SLD to have a more diverse set of domains that
gives a better depiction of the accuracy of our methods. Doing so
leaves us with 5,914 pages.
4.7 Analyzing Types of Pages
For all links left in our set, we download their latest version as of
March 14, 2021 and analyze them for the type of pages (redirects,
boilerplate, etc.). Figure 7 shows a Sankey diagram of the results.
On the left we see our initial classification and on the right after
following redirects and loading frames.
The most common pages we encounter are in-page redirects via
HTML or JavaScript (2,093 pages). Although redirecting can be a
mechanism to divert traffic from orphaned pages, our results indi-
cate that many of these redirects tend to be misconfigured (45%),
of which the majority seems to cause an endless loop of redirects
(65% of the misconfigured redirects). From the redirecting links
that end up at a page with a copyright statement, we see around
an equal amount with a recent timestamp and without (both 17%).
Second most common, we see the boilerplate pages (1,612 ini-
tial pages, 1,752 after redirects and frames). We believe these are
forgotten. We assume there was initial intent to deploy content,
0.000.250.500.751.00Orphan Score100101102103104105106Number of Pages (log)ws: 0.0, wa: 1.00.000.250.500.751.00Orphan Score100101102103104105106Number of Pages (log)ws: 0.1, wa: 0.90.000.250.500.751.00Orphan Score100101102103104105106Number of Pages (log)ws: 0.2, wa: 0.80.000.250.500.751.00Orphan Score100101102103104105106Number of Pages (log)ws: 0.3, wa: 0.70.000.250.500.751.00Orphan Score100101102103104105106Number of Pages (log)ws: 0.4, wa: 0.60.000.250.500.751.00Orphan Score100101102103104105106Number of Pages (log)ws: 0.5, wa: 0.50.000.250.500.751.00Orphan Score100101102103104105106Number of Pages (log)ws: 0.6, wa: 0.40.000.250.500.751.00Orphan Score100101102103104105106Number of Pages (log)ws: 0.7, wa: 0.30.000.250.500.751.00Orphan Score100101102103104105106Number of Pages (log)ws: 0.8, wa: 0.20.000.250.500.751.00Orphan Score100101102103104105106Number of Pages (log)ws: 0.9, wa: 0.10.000.250.500.751.00Orphan Score100101102103104105106Number of Pages (log)ws: 1.0, wa: 0.0Session 1A: Cybercrime CCS ’21, November 15–19, 2021, Virtual Event, Republic of Korea28Figure 7: Sankey diagram of the detected page types. On the left we have the initial classification. The flows in the diagram
depict the result of following redirects and loading frames, which leads to the results of our classification shown on the right.
Table 2: Summary of the most important types of pages. We
observe that our method is capable of detecting web pages
that are likely to be orphaned, and we can say that 951 pages
are in fact not orphaned. We also see a large group of pages
for which the determination is not clear.
Type
Old Copyright
Boilerplate
Copyright without date
Undefined
Recent Copyright
Count
201
1,752
534
1,163
951
Orphan Status
Total
Likely Orphaned
Uncertain
Not Orphaned
1,953
1,706
951
but it was not further pursued. This could be due to a myriad of
reasons, such as simply forgetting about it or refactoring.
Particularly interesting are the pages that contain a copyright
statement. In total, we found 1,686 such statements, with the ma-
jority of the pages actually having an up-to-date timestamp (56%).
While these might be dynamically generated, we consider these
pages maintained in the spirit of identifying a lower bound. The
ones that do not have an up-to-date timestamp are divided into two
groups: statements with a timestamp (12%), and statements with-
out any timestamp (32%). When a timestamp is present, we assume
the page was last maintained during that year. Figure 8 depicts
the distribution of the years extracted from copyright statements.
These pages are likely orphaned, while the copyright statements
without a timestamp could be orphaned, but might not.
Table 2 summarizes the types of pages and their orphaned status.
For at least 1,953 URLs, the pages appear forgotten, unmaintained,
and therefore likely orphaned. These pages are spread over 907
domains, with one domain having as many as 142 likely orphaned
pages. For 1,706 pages, the decision is not as clear. While we could
not detect any clear sign of being maintained, we also do not know
if they are not. Lastly, we identify 951 pages which appear main-
tained and not orphaned.
4.8 Google Visibility of Orphaned URLs
We also make use of Google’s Programmable Search Engine [15] to
determine how many of our pages are indexed by Google. We con-
struct a simple query that searches for “site:” and count the
number of results returned by Google. If no results are returned,
we assume the page is not indexed. This gives insights into how
“easily” reachable these pages are on the web.
Figure 8: Extracted copyright years from copyright state-
ments on pages that are not considered to be up-to-date. The
majority of the pages were last touched at some point in the
past 5-10 years, although we also observe pages which ap-
pear to be unmaintained for much longer.
We perform the lookups between March 10, 2021 and March 12,
2021 (over 3 days due to rate limiting) on all 5,914 URLs. We find
that only 16% of the pages were indexed by Google. This shows
that many of our (likely) orphaned web pages are not (easily) reach-
able through the web, and hence difficult to find without making
use of archived databases, highlighting the need for our technique.
We observe no correlation between any of the identified types
and the indexed status of a page, neither between any of the or-
phaned statuses and Google’s indexing. Only pages for which we
detected an old copyright statement we see that the more recent
a page, the more chance of it being indexed. However, we expect
this is just following the general distribution from Figure 8, or that
they will soon be removed by Google.
5 Security Evaluation
Next, we investigate if orphaned pages actually have any security
implications. That is, we try to answer the question: Are orphaned
pages (on average) more vulnerable than non-orphaned pages?
5.1 Methodology
Following, we assess the vulnerability of orphaned pages compared
to non-orphaned pages with two control groups.
5.1.1 Control Groups First, we compare orphaned pages to a con-
trol group from the general population. Specifically, we compare
the orphaned pages to recent non-orphaned pages sampled at ran-
dom from our data set. These random recent non-orphaned pages
were all crawled by the Internet Archive in 2020. This means that
our first control group (Control 1) is a sample similar to a random
Total Error: 65Total Not Found: 385Total Undeﬁned: 1,163Total Boilerplate: 1,752Total Recent Copyright: 951Redirect Overﬂow: 612No Source: 3Total Redirect: 184Total Frame: 64Total No-date Copyright: 534Connection Error: 27Not Found: 28Undeﬁned: 912Old Copyright: 154No-date Copyright: 199Recent Copyright: 559Boilerplate: 1,612Redirect: 2,093Frame: 330Total Old Copyright: 201200020022003200520062007200820092010201120122013201420152016201720182019Latest copyright year0100101102Number of Pages (log)InitialFrom RedirectsFrom FramesSession 1A: Cybercrime CCS ’21, November 15–19, 2021, Virtual Event, Republic of Korea29Internet crawl, and provides insight into whether the security pos-
ture of orphaned pages differs from the general Internet.
Second, we instead compare orphaned pages to non-orphaned
pages from the same website. That is, we investigate the hypothe-
sis that all pages on websites that have orphaned pages in the first
place, including the non-orphaned pages on these websites, are
more likely to suffer from vulnerabilities than the general Inter-
net. This follows from the intuition that websites with orphaned
pages are likely not maintained properly (or they would not have
orphaned pages), and thus they might also be less likely to de-
ploy other measures to improve security, resulting in being over-
all more vulnerable than the general Internet. Our second con-
trol group (Control 2) consists of one random non-orphaned page
for each website with an orphaned page. Again, all pages are re-
cent, that is, they were part of the Internet Archive in 2020. Cor-
respondingly, with our second control group, we can test whether
the amount of vulnerabilities is “internally consistent” for websites
with orphaned pages, that is, whether they have (in general) a low-
er/higher security level than the general Internet.
Security Analysis We analyze the security posture of all three
5.1.2
groups (Orphaned, Control 1, and Control 2) by scanning them
with Wapiti [31] for cross-site scripting (XSS) vulnerabilities, SQL
injection (SQLi) vulnerabilities, and their security configuration.
Wapiti is a black-box web-application vulnerability scanner that
we chose because it is actively maintained and it allows us to limit
the scope of the scan to the specific URL (including all query pa-
rameters, that is, only modifying existing query parameter values,
nor removing them, nor adding new ones; e.g., for an orphaned
page with a form that is posted to the same URL without any
query parameter modifications) and page (allowing query param-
eters to be added, and removed; e.g., adding a new pagination
parameter ?page=3, or submitting a form that sets the parameter
?form=submit). These scope restrictions to URL and page are par-
ticularly important to prevent accidental scope-creep beyond the
orphaned pages we detected, that is, scanning, identifying, and re-
porting vulnerabilities in other non-orphaned pages that are reach-
able from the orphaned pages themselves by following links. More-
over, Wapiti provides a Proof of Concept (PoC) for each found vul-