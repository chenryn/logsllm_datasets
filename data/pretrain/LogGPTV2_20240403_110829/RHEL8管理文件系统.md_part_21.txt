:::
:::
:::
[]{#checking-and-repairing-a-file-system_managing-file-systems.html}
::: chapter
::: titlepage
# []{#checking-and-repairing-a-file-system_managing-file-systems.html#checking-and-repairing-a-file-system_managing-file-systems}第 13 章 检查和修复文件系统 {.title}
:::
RHEL
提供可以检查和修复文件系统的文件系统管理实用程序。这些工具通常被称为
`fsck`{.literal} 工具，其中 `fsck`{.literal} 是
[*文件系统检查*]{.emphasis}
的简化版本。在大多数情况下，这些实用程序会根据需要在系统引导期间自动运行，但也可以根据需要手动调用。
::: {.important style="margin-left: 0.5in; margin-right: 0.5in;"}
### 重要 {.title}
文件系统检查程序只保证文件系统间的元数据一致性。他们不知道文件系统中包含的实际数据，不是数据恢复工具。
:::
::: section
::: titlepage
# []{#checking-and-repairing-a-file-system_managing-file-systems.html#file-system-checking-and-repair_checking-and-repairing-a-file-system}需要文件系统检查的情况 {.title}
:::
如果出现以下情况，可以使用相关的 `fsck`{.literal} 工具来检查您的系统：
::: itemizedlist
-   系统无法引导
-   特定磁盘上的文件损坏
-   由于不一致，文件系统关闭或更改为只读
-   文件系统上的文件无法访问
:::
文件系统不一致的原因可能有多种，包括但不限于硬件错误、存储管理错误和软件错误。
::: {.important style="margin-left: 0.5in; margin-right: 0.5in;"}
### 重要 {.title}
文件系统检查工具无法修复硬件问题。如果修复要成功运行，文件系统必须完全可读写。如果文件系统因为硬件错误而损坏，则必须首先将该文件系统移至好磁盘，例如在
`dd(8)`{.literal} 实用程序中。
:::
对于日志文件系统，启动时通常需要的所有要求是重播日志（如果需要），此操作通常非常短。
但是，如果发生文件系统不一致或损坏，即使是对于日志记录文件系统，也必须使用文件系统检查程序来修复文件系统。
::: {.important style="margin-left: 0.5in; margin-right: 0.5in;"}
### 重要 {.title}
通过将 `/etc/fstab`{.literal} 中的第 6 字段设置为
`0`{.literal}，可以在引导时禁用文件系统检查。但是，除非您在启动时遇到
`fsck`{.literal}
问题，例如对于非常大或远程文件系统，否则红帽不建议这样做。
:::
::: itemizedlist
**其它资源**
-   `fstab(5)`{.literal} 手册页.
-   `fsck(8)手册页`{.literal}.
-   `dd(8)手册页`{.literal}.
:::
:::
::: section
::: titlepage
# []{#checking-and-repairing-a-file-system_managing-file-systems.html#potential-side-effects-of-running-fsck_checking-and-repairing-a-file-system}运行 fsck 的潜在副作用 {.title}
:::
通常，运行文件系统检查和修复工具至少可以自动修复发现的一些不一致情况。在某些情况下可能会产生以下问题：
::: itemizedlist
-   如果无法修复，可以丢弃严重损坏的索引节点或目录。
-   可能会对文件系统进行大量更改。
:::
要确保不会永久进行意外或不必要的更改，请确保遵循流程中概述的任何 PP
步骤。
:::
::: section
::: titlepage
# []{#checking-and-repairing-a-file-system_managing-file-systems.html#error-handling-mechanisms-in-xfs_checking-and-repairing-a-file-system}XFS 中的错误处理机制 {.title}
:::
这部分论述了 XFS 如何处理文件系统中各种错误。
### []{#checking-and-repairing-a-file-system_managing-file-systems.html#_unclean_unmounts}unclean unmounts
日志维护文件系统中发生的元数据更改的事务记录。
在系统崩溃、电源故障或其他未完全卸载的情况下，XFS
使用日志（也称为日志）来恢复文件系统。挂载 XFS
文件系统时，内核执行日志恢复。
### []{#checking-and-repairing-a-file-system_managing-file-systems.html#_corruption}崩溃
在这种情况下，[*崩溃*]{.emphasis} 意味着文件系统中出现错误，例如：
::: itemizedlist
-   硬件故障
-   存储固件、设备驱动程序、软件堆栈或者文件系统本身的错误
-   导致文件系统部分内容被文件系统之外的内容覆盖的问题
:::
当 XFS
检测到文件系统或文件系统元数据中的损坏时，它可以关闭文件系统并在系统日志中报告该事件。请注意，如果在托管
`/var`{.literal} 目录的文件系统中发生损坏，重启后这些日志将不可用。
::: example
[]{#checking-and-repairing-a-file-system_managing-file-systems.html#idm139716109498400}
**例 13.1. 系统日志条目报告 XFS 崩溃**
::: example-contents
``` screen
# dmesg --notime | tail -15
XFS (loop0): Mounting V5 Filesystem
XFS (loop0): Metadata CRC error detected at xfs_agi_read_verify+0xcb/0xf0 [xfs], xfs_agi block 0x2
XFS (loop0): Unmount and run xfs_repair
XFS (loop0): First 128 bytes of corrupted metadata buffer:
00000000027b3b56: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................
000000005f9abc7a: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................
000000005b0aef35: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................
00000000da9d2ded: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................
000000001e265b07: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................
000000006a40df69: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................
000000000b272907: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................
00000000e484aac5: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................
XFS (loop0): metadata I/O error in "xfs_trans_read_buf_map" at daddr 0x2 len 1 error 74
XFS (loop0): xfs_imap_lookup: xfs_ialloc_read_agi() returned error -117, agno 0
XFS (loop0): Failed to read root inode 0x80, error 11
```
:::
:::
当尝试访问损坏的 XFS 文件系统时，用户空间实用程序通常会报告
[*输入/输出错误消息*]{.emphasis}。挂载带有损坏日志的 XFS
文件系统会导致挂载失败，并出现以下错误消息：
``` screen
mount: /mount-point: mount(2) system call failed: Structure needs cleaning.
```
您必须手动使用 `xfs_repair`{.literal} 实用程序修复损坏。
::: itemizedlist
**其它资源**
-   `xfs_repair(8)man`{.literal} page 提供了 XFS 崩溃检查的详细列表。
:::
:::
::: section
::: titlepage
# []{#checking-and-repairing-a-file-system_managing-file-systems.html#checking-an-xfs-file-system-with-xfs-repair_checking-and-repairing-a-file-system}使用 `xfs_repair`{.literal}检查 XFS 文件系统 {.title}
:::
这个过程使用 `xfs_repair`{.literal} 实用程序对 XFS
文件系统执行只读检查。您必须手动使用 `xfs_repair`{.literal}
工具修复所有崩溃。与其他文件系统修复实用程序不同，`xfs_repair`{.literal}
不会在引导时运行，即使 XFS
文件系统没有被完全卸载。在未完全卸载的情况下，XFS
会在挂载时重播日志，从而确保文件系统一致； `xfs_repair`{.literal}
无法在不先重新挂载脏日志的情况下修复带有脏日志的 XFS 文件系统。
::: {.note style="margin-left: 0.5in; margin-right: 0.5in;"}
### 注意 {.title}
虽然 `xfsprog s 软件包中存在 fsck.xf`{.literal} s``{=html}
二进制文件，但这仅用于满足在引导时查找 `fsck.file`{.literal}
系统二进制文件的 `initscripts`{.literal}。`fsck.xfs`{.literal}
立即退出，退出代码为 0。
:::
::: orderedlist
**流程**
1.  通过挂载和卸载文件系统重新显示日志：
    ``` screen
    # mount file-system
    # umount file-system
    ```
    ::: {.note style="margin-left: 0.5in; margin-right: 0.5in;"}
    ### 注意 {.title}
    如果挂载失败，且结构需要清理错误，日志将损坏且无法重播。空运行应发现并报告更多磁盘上损坏。
    :::
2.  使用 `xfs_repair`{.literal}
    实用程序执行空运行来检查文件系统。打印任何错误并指示将要采取的操作，而不修改文件系统。
    ``` screen
    # xfs_repair -n block-device
    ```
3.  挂载文件系统：
    ``` screen
    # mount file-system
    ```
:::
::: itemizedlist
**其它资源**
-   `xfs_repair(8)手册页`{.literal}.
-   `xfs_metadump(8)手册页`{.literal} 面。
:::
:::
::: section
::: titlepage
# []{#checking-and-repairing-a-file-system_managing-file-systems.html#proc_repairing-an-xfs-file-system-with-xfs_repair_checking-and-repairing-a-file-system}使用 xfs_repair 修复 XFS 文件系统 {.title}
:::
这个过程使用 `xfs_repair 工具修复`{.literal} 损坏的 XFS 文件系统。
::: orderedlist
**流程**
1.  使用 `xfs_metadump`{.literal}
    实用程序在修复前为诊断或测试目的创建元数据镜像。如果损坏是由软件漏洞导致的，则预修复文件系统元数据映像对于支持调查非常有用。预修复镜像中存在的损坏模式有助于进行根本原因分析。
    ::: itemizedlist
    -   使用 `xfs_metadump`{.literal} 调试工具将 XFS
        文件系统中的元数据复制到文件。如果需要发送大型
        `metadump`{.literal}
        文件来支持，可使用标准压缩实用程序压缩生成的
        `metadump`{.literal} 文件，以减少文件大小。
        ``` screen
        # xfs_metadump block-device metadump-file
        ```
    :::
2.  通过重新挂载文件系统来重新显示日志：
    ``` screen
    # mount file-system
    # umount file-system
    ```
3.  使用 `xfs_repair`{.literal} 工具修复卸载的文件系统：
    ::: itemizedlist
    -   如果挂载成功，则不需要额外的选项：
        ``` screen
        # xfs_repair block-device
        ```
    -   如果挂载失败，带有 [*Structure needs cleaning*]{.emphasis}
        错误，日志会破坏且无法重复显示。使用 `-L`{.literal}
        选项（[*强制日志零）*]{.emphasis}清除日志：
        ::: {.warning style="margin-left: 0.5in; margin-right: 0.5in;"}
        ### 警告 {.title}
        该命令会在崩溃时所有进行中的元数据更新丢失，这可能会造成大量文件系统损坏和数据丢失。只有在无法重播日志时，才应使用此方法。
        :::
        ``` screen
        # xfs_repair -L block-device
        ```
    :::
4.  挂载文件系统：
    ``` screen
    # mount file-system
    ```
:::
::: itemizedlist
**其它资源**
-   `xfs_repair(8)手册页`{.literal}.
:::
:::
::: section
::: titlepage
# []{#checking-and-repairing-a-file-system_managing-file-systems.html#error-handling-mechanisms-in-ext2-ext3-and-ext4_checking-and-repairing-a-file-system}ext2、ext3 和 ext4 中的处理机制出错 {.title}
:::
ext2、ext3 和 ext4 文件系统使用 `e2fsck`{.literal}
实用程序执行文件系统检查和修复。文件名
`fsck.ext2`{.literal}、fsck`.ext3`{.literal} 和 `fsck.ext4`{.literal} 是
`e2fsck`{.literal}
实用程序的硬链接。这些二进制文件在引导时自动运行，其行为因正在检查的文件系统和文件系统的状态而异。
ext2
会调用完整的文件系统检查和修复，这不是元数据日志记录文件系统，而对于没有日志的
ext4 文件系统。
对于带有元数据日志的 ext3 和 ext4
文件系统，日志将在用户空间中重播，实用工具退出。这是默认操作，因为日志重播确保在崩溃后确保文件系统一致。
如果这些文件系统在挂载时遇到元数据不一致，它们会在文件系统超级块中记录此事实。如果
`e2fsck`{.literal} 发现文件系统带有这样的错误，`e2fsck 会在`{.literal}
回放日志（如果存在）后执行彻底检查。
::: itemizedlist
**其它资源**
-   `fsck(8)手册页`{.literal}.
-   `e2fsck(8)手册页`{.literal}.
:::
:::
::: section
::: titlepage
# []{#checking-and-repairing-a-file-system_managing-file-systems.html#checking-an-ext2-ext3-or-ext4-file-system-with-e2fsck_checking-and-repairing-a-file-system}使用 e2fsck 检查 ext2、ext3 或者 ext4 文件系统 {.title}
:::
这个过程使用 `e2fsck 工具检查 ext2`{.literal}、ext3 或 ext4 文件系统。
::: orderedlist
**流程**
1.  通过重新挂载文件系统来重新显示日志：
    ``` screen
    # mount file-system
    # umount file-system
    ```
2.  执行空运行检查文件系统。
    ``` screen
    # e2fsck -n block-device
    ```
    ::: {.note style="margin-left: 0.5in; margin-right: 0.5in;"}
    ### 注意 {.title}
    打印任何错误并指示将要采取的操作，而不修改文件系统。稍后一致性检查阶段可能会打印额外的错误，因为它发现了在修复模式下运行时在早期阶段可以解决的不一致问题。
    :::
:::
::: itemizedlist
**其它资源**
-   `e2image(8)手册页`{.literal}.
-   `e2fsck(8)手册页`{.literal}.
:::
:::