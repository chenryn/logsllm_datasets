### 4. Results and Analysis

The curves in the figures demonstrate that HBH effectively generates higher quality routes compared to REUNITE, particularly in the presence of asymmetric unicast routing.

#### 4.1 Delay Performance in ISP Topology

Figure 8(a) highlights two unexpected results. First, PIM-SM outperforms PIM-SS in terms of delay for the ISP topology. This is because PIM-SS uses a reverse Shortest Path Tree (SPT), which does not minimize delay. In contrast, PIM-SM constructs a shared tree where the path from the source to the Rendezvous Point (RP) is optimized, leading to better overall delay performance. The paths in the PIM-SM tree can be divided into two parts: from the source to the RP, where delay is minimized, and from the RP to the receiver, where it is not minimized due to the reverse shortest path. This explains why PIM-SM has an advantage over PIM-SS in the ISP topology.

For the 50-node topology, the larger size and higher connectivity mean that going through the RP often results in longer paths than direct connections from the source to the receiver. Consequently, the shared tree in this case exhibits the worst delay performance.

#### 4.2 Impact of Network Asymmetries

In the ISP topology, the effect of network asymmetries on the quality of REUNITE trees is significant, especially when the number of receivers is large. REUNITE performs worse than PIM-SM under these conditions. However, in the 50-node topology, REUNITE outperforms PIM-SM due to the higher connectivity, which provides more optimal paths.

#### 4.3 HBH Performance

HBH consistently outperforms REUNITE in terms of delay across all group sizes in both topologies. For the ISP topology, the average advantage of HBH over REUNITE is 14%. In the 50-node topology, despite smaller absolute values, HBH's advantage is even more pronounced, averaging 30%. This is attributed to the richer connectivity, which allows HBH to construct more efficient distribution trees and mitigate the impact of unicast routing asymmetries.

### 5. Conclusions

We introduced HBH, a multicast routing protocol that leverages recursive unicast trees, an idea originally proposed in REUNITE [21]. HBH supports incremental deployment of multicast services by transparently supporting unicast routers within the network. The design of HBH addresses the strengths and weaknesses of REUNITE and EXPRESS, with the following objectives:

- **Traversal through unicast clouds**: Ensuring seamless operation in unicast environments.
- **Minimal impact on tree structure during member departure**: Maintaining tree stability even as members leave.
- **Lower cost trees in cases of REUNITE failure**: Providing more efficient routing when REUNITE fails.
- **Guaranteed shortest path data delivery**: Ensuring that members receive data via the shortest path from the source.

HBH employs a unique tree management algorithm based on three types of messages:
- **Join messages**: Periodically sent by receivers to the source.
- **Tree messages**: Periodically multicast by the source to the receivers.
- **Fusion messages**: Generated by intermediate nodes to refine the tree structure.

HBH can construct a Shortest-Path Tree even in the presence of asymmetric unicast routing, leading to better network utilization and reduced packet duplication. This is particularly advantageous in bandwidth-constrained networks. Additionally, HBH's superior delay performance makes it suitable for applications that require low latency, such as interactive ones.

Simulation results show that unicast routing asymmetries significantly affect the performance of multicast routing protocols. HBH outperforms REUNITE in terms of tree cost and delay, with its advantages becoming more pronounced in larger and more connected networks. Future work includes formalizing the interface between HBH and classical IP Multicast, and exploring the integration of Quality of Service (QoS) parameters into HBH's tree construction algorithm.

### 6. Acknowledgments

We extend our sincere gratitude to Supratik Bhattacharyya (Sprint Labs.), Mark Handley (ACIRI), Luigi Rizzo (Univ. of Pisa), and Lorenzo Vicisano (Cisco Systems) for their constructive comments on this work, as well as the SIGCOMM reviewers for their insightful remarks.

### 7. References

[1] G. Apostolopoulos, R. Guerin, S. Kamat, and S. K. Tripathi. Quality of service based routing: A performance perspective. In ACM SIGCOMM’98, pages 17–28, Sept. 1998.

[2] T. Bates, R. Chandra, D. Katz, and Y. Rekhter. Multiprotocol Extensions for BGP-4. RFC 2283, Feb. 1998.

[3] S. Bhattacharyya, C. Diot, L. Giuliano, R. Rockell, J. Meylor, D. Meyer, G. Shepherd, and B. Haberman. An Overview of Source-Specific Multicast (SSM) Deployment, May 2001. Work in progress: draft-ietf-ssm-overview-00.txt.

[4] B. Cain, S. Deering, W. Fenner, I. Kouvelas, and A. Thyagarajan. Internet Group Management Protocol, Version 3, Mar. 2001. Work in progress: draft-ietf-idmr-igmp-v3-07.txt.

[5] S. Deering. Host Extensions for IP Multicasting. RFC 1112, Aug. 1989.

[6] S. Deering, D. L. Estrin, D. Farinacci, V. Jacobson, C.-G. Liu, and L. Mei. The PIM architecture for wide-area multicast routing. IEEE/ACM Transactions on Networking, 4(2):153–162, Apr. 1996.

[7] C. Diot, W. Dabbous, and J. Crowcroft. Multipoint communication: A survey of protocols, functions and mechanisms. IEEE Journal on Selected Areas in Communications, 15(3):277–290, Apr. 1997.

[8] C. Diot, B. N. Levine, B. Liles, H. Kassem, and D. Balensiefen. Deployment issues for the IP multicast service and architecture. IEEE Network, pages 78–88, Jan. 2000.

[9] D. Estrin, D. Farinacci, A. Helmy, D. Thaler, S. Deering, M. Handley, V. Jacobson, C. Liu, P. Sharma, and L. Wei. Protocol Independent Multicast-Sparse Mode (PIM-SM): Protocol Specification. RFC 2362, June 1998.

[10] K. Fall and K. Varadhan. The ns Manual. UC Berkeley, LBL, USC/ISI, and Xerox PARC, Jan. 2001. Available at http://www.isi.edu/nsnam/ns/ns-documentation.html.

[11] B. Fenner, M. Handley, H. Holbrook, and I. Kouvelas. Protocol Independent Multicast - Sparse Mode (PIM-SM): Protocol Specification (Revised), Mar. 2001. Work in progress: draft-ietf-pim-sm-v2-new-02.txt.

[12] W. Fenner. Internet Group Management Protocol, Version 2. RFC 2236, Nov. 1997.

[13] R. Finlayson. The UDP Multicast Tunneling Protocol, Mar. 2001. Work in progress: draft-finlayson-umtp-06.txt.

[14] R. Finlayson, R. Perlman, and D. Rajwan. Accelerating the Deployment of Multicast Using Automatic Tunneling, Feb. 2001. Work in progress: draft-finlayson-mboned-autotunneling-00.txt.

[15] S. Hanks, T. Li, D. Farinacci, and P. Traina. Generic Routing Encapsulation (GRE). RFC 1701, Oct. 1994.

[16] H. W. Holbrook and D. R. Cheriton. IP multicast channels: EXPRESS support for large-scale single-source applications. In ACM SIGCOMM’99, Sept. 1999.

[17] P. Liefooghe and M. Goossens. An architecture for seamless access to multicast content. In IEEE Conference on Local Computer Networks, Nov. 2000.

[18] D. Meyer (Editor) and B. Fenner (Editor). Multicast Source Discovery Protocol (MSDP), May 2001. Work in progress: draft-ietf-msdp-spec-10.txt.

[19] J. Moy. Multicast Extensions to OSPF. RFC 1584, Mar. 1994.

[20] V. Paxson. End-to-end routing behavior in the internet. IEEE/ACM Transactions on Networking, 5(5):601–615, Oct. 1997.

[21] I. Stoica, T. S. E. Ng, and H. Zhang. REUNITE: A recursive unicast approach to multicast. In IEEE INFOCOM’2000, Mar. 2000.

[22] D. Thaler, M. Talwar, L. Vicisano, and D. Ooms. IPv4 Automatic Multicast Without Explicit Tunnels, Feb. 2001. Work in progress: draft-ietf-mboned-auto-multicast-00.txt.

[23] D. Waitzman, C. Partridge, and S. Deering. Distance Vector Multicast Routing Protocol. RFC 1075, Nov. 1988.

### Appendix A: Message Processing in HBH

Figure 9 illustrates the processing rules for the three message types used by HBH to construct the distribution tree.

**Join Message (Figure 9(a))**:
- When router B receives a join(S, R), it forwards the message unchanged if B has no Multicast Forwarding Table (MFT) or if R is not in B’s MFT.
- If B’s MFT has an entry for R, B intercepts the join(S, R) and sends a join(S, B) message, indicating that B is a branching node for the channel.

**Tree Message (Figure 9(c))**:
- A tree(S, R) message received by router B is treated and forwarded in multicast.
- If B is a branching node, it discards the message and sends a tree message to each node in its MFT.
- If B is a branching node and the tree(S, R) is not addressed to B, B either inserts R into its MFT and sends a fusion message upstream (if R is a new receiver) or refreshes the R entry in its MFT and sends a fusion message upstream (if R is already present).
- If B is not a branching node, B creates a Multicast Channel Table (MCT) containing R if it was not in S’s distribution tree, or refreshes its MCT if it was already in the distribution tree but not a branching node.
- If R is not present in the MCT, B may become a branching node, create a MFT, destroy the MCT, and send a fusion message upstream.

**Fusion Message (Figure 9(b))**:
- If router B receives a fusion(S, R, ...Rn) from node Bp and the message is not addressed to B, B simply forwards it upstream.
- If the message is addressed to B, B marks the receiver entries in its MFT listed in the fusion message. These marked entries are used for tree message forwarding but not for data distribution.
- Bp is added to B’s MFT if it was not previously present, and Bp’s t1 timer is expired, making Bp stale. Bp will be used for data forwarding but not for tree message forwarding.
- If Bp was already present in B’s MFT, Bp’s t2 timer is refreshed, but its t1 timer remains expired.
- If Bp subsequently receives join messages from any of R, ...Rn, it intercepts them and sends a join(S, Bp) upstream, refreshing the Bp entry in B’s MFT and eventually destroying the R, ...Rn entries.
- If Bp does not receive join messages from R, ...Rn, the emission of fusion messages continues, and Bp is responsible for data duplication.

This mechanism allows HBH to manage the second asymmetry problem presented in Section 2.3.

(a) Join message.
(b) Fusion message.
(c) Tree message.
Figure 9: Message processing in HBH.