精简版 SDL 落地实践 
Author:@好好学习英语的 abc 
前言 
一般安全都属于运维部下面，和上家公司的运维总监聊过几次一些日常安全工
作能不能融入到 DevOps 中，没多久因为各种原因离职。18 年入职 5 月一家第
三方支付公司，前半年在各种检查中度过，监管形势严峻加上大领导对安全的
重视(主要还是监管)，所有部门 19 年的目标都和安全挂钩。由于支付公司需要
面对各种监管机构的检查，部分安全做的比较完善，经过近一年对公司的熟悉
发现应用安全方面比较薄弱。这部分业内比较好的解决方案就是 SDL，和各厂
商交流过之后决定自己照葫芦画瓢在公司一点一点推广。 
一、精简版 SDL 
上图为标准版的 SDL,由于运维采用 DevOps 体系，测试也使用自动化进行
功能测试，版本迭代周期比较快,安全人手不足加上对 SDL 的威胁建模等方
法也一头雾水、如果把安全在加入整个流程会严重影响交付时间。在这种
情况调研了一些业内的一些做法，决定把 SDL 精简化 。精简版 SDL 如
下： 
二、精简版 SDL 落地实践 
1 
安全培训 
SDL 核心之一就是安全培训，所以在安全培训上我们做了安全编码、
安全
培训
安全
需求
设计
开发
实现
验证
发布
监控
安全意识、安全知识库、安全 SDK 
1.1 安全编码： 
我们在网上找了一些 java 安全编码规范、产品安全设计及开发安全
规范结合公司实际业务出了一版。 
因为各种监管机构对培训都有要求，借此推了一下安全培训，定期对
开发和新员工入职的培训。 
1.2 安全意识： 
公司有企业微信公众号，大部分员工都关注了，在公众号推广了一波。 
   宣传完之后答题，答题满分送小礼品。 
 因为人手不足，而功能测试和安全测试本质上有很多相通的地方，测试部
门也比较配合，针对测试人员做了一些安全测试相关的培训，但是效果并不是太理
想。 
1.3 安全知识库： 
在漏洞修复过程中，开发很多不太了解漏洞原理、修复方案，所以我
们建立了安全知识库，开发先到安全知识库查相关解决方法。找不到
的再和安全人员沟通，安全人员对知识库不断更新，形成一个闭环。 
1.4 安全 SDK 
由于公司有架构部门，开发框架基本是架构部门提供。我们将一些
常 见 的 漏 洞 和 架 构 部 门 沟 通 之 后 ， 让 架 构 将 一 些 漏 洞 修 复 方 式 用
SDK 实现，开发只需要导入 JAR 包，在配置文件中配置即可。其中
也挺多坑的，需要慢慢优化。 
2 
安全需求设计 
公司有项目立项系统，所有的项目立项都需要通过系统来进行立项，
安全为必选项，评审会安全也必须要参与。 
这个时候基本上项目经理会找安全人员进行沟通，copy 了一份 VIP
的产品安全设计规范，根据需求文档和项目经理确定安全需求。 
确认好安全需求之后将按需求加入到需求文档，并确认安全测试时
间，此流程只针对新项目，已经上线的项目的需求并未按照此流程，
后续在安全测试时候会讲到这部分的项目是怎么做的。 
三、开发、安全测试 
安全测试主要分为代码审计，漏洞扫描，手工安全测试。由此衍生出
来 的 安 全 产 品 分 为
3
类 。 DAST ： 动 态 应 用 程 序 安 全 测 试 
（ wvs,appscan ）、 SAST ： 静 态 应 用 程 序 安 全 测 试   
(fortify,rips)、IAST：交互式应用程序安全测试 （seeker，雳
鉴
）
,
这
三
种
产
品
的
详
细
介
绍
可
以
参
考
https://www.aqniu.com/learn/46910.html,下图为三种产品
的测试结果对比。 
这几类产品实现了自动化可以继承到 DevOps 中。接下来我们将这些
工具融入到开发测试阶段。 
IAST 的实现模式较多，常见的有代理模式、VPN、流量镜像、插桩模
式，本文介绍最具代表性的 2 种模式，代理模式和插桩模式。一些调
研过的产品如下图，具体测试结果就不公布了。 
2.1 开发阶段 
在对几类产品调研的时候发现 IAST 的插桩模式可以直接放到开发环
境，开发环境和测试环境的代码区别主要还是在于 application.yml 配置文
件，所以可以提前将该模式放到开发阶段。 
开发写完代码提交到 gitlab 部署到开发环境启动应用的时候，开发
需要验证一下功能是否可用，这个时候就可以检测出是否存在漏洞。 
公司在测试环境使用 rancher，把 IAST 的 jar 包放入到项目的
gitlab,在部署的时候把代码拉到本地，通过修改 Dockerfile 文件把 jar
包添加到容器。 
•  ADD shell/xxx.jar /home/app/xx/lib 
由于公司项目基本统一使用 spring-boot，所有的项目都通过一个
start.sh 脚本来启动应用，start.sh 和 Dockerfile 一样需要添加到项
目的 gitlab，同时修改 start.sh 脚本文件即可。 
-javaagent:$APP_HOME/lib/xx.jar  -jar $APP_HOME/app/*.jar --
spring.profiles.active=dev >$APP_HOME/logs/startup.log 2>&1 & 
测试项目如下，忽略错别字： 
开发访问一下正常的功能即可在是否存在漏洞。 
部分产品同时还会检测第三方组件包。 
公司使用 harbor 来对镜像进行当仓库镜像，项目部署完成之后会打
包成一个镜像上传到 harbor，harbor 自带镜像扫描功能。 
2.2 测试阶段 
开发完成之后进入到测试阶段。这个阶段我们进行静态代码扫描，功能
测试，安全测试。 
2.2.1 静态代码扫描 
利用静态代码扫描工具对代码在编译之前进行扫描，并在静态代码层面上发
现各种问题，其中包括安全问题。部分工具列表： 
由于预算有限，静态代码扫描采用 sonarQube 集成，我们使用的是
FindbugSecurity,精简规则，然后在持续构建过程中，进行静态代码 bug,安全
扫描。 
静态代码扫描的同时也可以扫描第三方依赖包，OWSAP 的 Dependency-
Check 就可以集成到持续构建过程中，由于 IAST 类产品支持该功能，不多做
介绍。 
2.2.2 功能测试 
功能测试方面，公司测试部门实现了自动化测试平台，前期我们
并未使用 agent 的方式检测，一开始使用开源的 gourdscan
加上 openrasp，利用 openrasp 的默认开启不拦截模式和漏
洞记录功能来检测服务端无返回的漏洞。 
后来测试反馈扫描的脏数据太多，效果也并不是很好，就放弃了此方案。改
用开发阶段的 IAST 的插桩方式，同样在测试环境也和开发环境一样利用
agent 来检测问题。功能测试完成之后。由于测试人员对漏洞并不是太理解，
所以定的流程为测试人员到平台查看报告和安全人员沟通哪些问题需要修
复，然后将问题写入到测试报告。 
2.2.3 安全测试 
在测试阶段已经将安全加入到整个流程里面，所有需求更改完
成都需要通过功能测试，也就是所有的流程过一遍安全测试，这
样安全人手也不是很足，决定采用内外服务区分的办法来确定
是否需要安全人员介入。 
2.2.4 漏洞管理 
漏洞管理这一块制定了漏洞管理制度，根据影响程度对漏洞进
行评级，严重漏洞必须改完之后才能上线，高中低危漏洞且影响
较小需要排期。 
四、监控 
支付公司一般安全设备基本都有，这一块基本上将设备的 syslog 打到
日志中心可视化，并定制对应的规则实现告警即可。 
五、结束语 
个人知识和经验不足对 sdl 的体系并不是很熟悉，没什么经验，所以只
能做到目前的程度。后续还有许多地方可以优化，增加流程等。如果有什
么好的建议欢迎交流。