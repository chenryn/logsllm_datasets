---
title: Click
date: 20200827
author: Lyz
---
[Click](https://click.palletsprojects.com/) is a Python package for creating
beautiful command line interfaces in a composable way with as little code as
necessary. It’s the “Command Line Interface Creation Kit”. It’s highly
configurable but comes with sensible defaults out of the box.
Click has the following features:
- Arbitrary nesting of commands.
- Automatic help page generation.
- Supports lazy loading of subcommands at runtime.
- Supports implementation of Unix/POSIX command line conventions.
- Supports loading values from environment variables out of the box.
- Support for prompting of custom values.
- Supports file handling out of the box.
- Comes with useful common helpers (getting terminal dimensions, ANSI colors,
  fetching direct keyboard input, screen clearing, finding config paths,
  launching apps and editors).
# [Setuptools Integration](https://click.palletsprojects.com/en/master/setuptools/)
To bundle your script with setuptools, all you need is the script in a Python
package and a setup.py file.
Let’s assume your directory structure changed to this:
```
project/
    yourpackage/
        __init__.py
        main.py
        utils.py
        scripts/
            __init__.py
            yourscript.py
    setup.py
```
In this case instead of using py_modules in your setup.py file you can use
packages and the automatic package finding support of setuptools. In addition to
that it’s also recommended to include other package data.
These would be the modified contents of setup.py:
```python
from setuptools import setup, find_packages
setup(
    name="yourpackage",
    version="0.1.0",
    packages=find_packages(),
    include_package_data=True,
    install_requires=[
        "Click",
    ],
    entry_points={
        "console_scripts": [
            "yourscript = yourpackage.scripts.yourscript:cli",
        ],
    },
)
```
# [Testing Click applications](https://click.palletsprojects.com/en/7.x/testing/)
For basic testing, Click provides the `click.testing` module which provides test
functionality that helps you invoke command line applications and check their
behavior.
The basic functionality for testing Click applications is the `CliRunner` which
can invoke commands as command line scripts. The `CliRunner.invoke()` method
runs the command line script in isolation and captures the output as both bytes
and binary data.
The return value is a Result object, which has the captured output data, exit
code, and optional exception attached:
File: `hello.py`
```python
import click
@click.command()
@click.argument("name")
def hello(name):
    click.echo("Hello %s!" % name)
```
File: `test_hello.py`:
```python
from click.testing import CliRunner
from hello import hello
def test_hello_world():
    runner = CliRunner()
    result = runner.invoke(hello, ["Peter"])
    assert result.exit_code == 0
    assert result.output == "Hello Peter!\n"
```
For subcommand testing, a subcommand name must be specified in the args
parameter of `CliRunner.invoke()` method:
File: `sync.py`:
```python
import click
@click.group()
@click.option("--debug/--no-debug", default=False)
def cli(debug):
    click.echo("Debug mode is %s" % ("on" if debug else "off"))
@cli.command()
def sync():
    click.echo("Syncing")
```
File: `test_sync.py`:
```python
from click.testing import CliRunner
from sync import cli
def test_sync():
    runner = CliRunner()
    result = runner.invoke(cli, ["--debug", "sync"])
    assert result.exit_code == 0
    assert "Debug mode is on" in result.output
    assert "Syncing" in result.output
```
If you want to test user stdin interaction check the
[prompt_toolkit](prompt_toolkit.md) and [pexpect](pexpect.md) articles.
## Testing the value of stdout and stderr
The `runner` has the `stdout` and `stderr` attributes to test if something was
written on those buffers.
By default the `runner` is configured to mix `stdout` and `stderr`, if you wish to tell apart both sources use:
```python
def test(runner: CliRunner): 
  ...
  runner.mix_stderr = False
```
## Injecting fake dependencies
If you're following the [domain driven design](domain_driven_design.md)
architecture pattern, you'll probably need to inject some fake objects instead
of using the original objects.
The challenge is to do it without modifying your real code too much for the sake
of testing. Harry J.W. Percival and Bob Gregory have an interesting proposal in
their
[Dependency Injection (and Bootstrapping)](https://www.cosmicpython.com/book/chapter_13_dependency_injection.html)
chapter, although I found it a little bit complex.
Imagine that we've got an adapter to interact with the
[Gitea](https://gitea.io/) web application called `Gitea`.
File: `adapters/gitea.py`:
```python
class Gitea:
    fake: bool = False
```
The Click cli definition would be:
File: `entrypoints/cli.py`:
```python
import logging
from adapters.gitea import Gitea
log = logging.getLogger(__name__)
@click.group()
@click.pass_context
def cli(ctx: click.core.Context) -> None:
    """Command line interface main click entrypoint."""
    ctx.ensure_object(dict)
    try:
        ctx.obj["gitea"]
    except KeyError:
        ctx.obj["gitea"] = load_gitea()
@cli.command()
@click.pass_context
def is_fake(ctx: Context) -> None:
    if ctx.obj["gitea"].fake:
        log.info("It's fake!")
def load_gitea() -> Gitea:
    """Configure the Gitea object."""
    return Gitea()
```
Where:
- `load_gitea`: is a simplified version of the loading of an adapter, in a real
  example, you'll probably will need to catch some exceptions when loading the
  object.
- `is_fake`: Is the subcommand we're going to use to test if the adapter has
  been replaced by the fake object.
The fake implementation of the adapter is called `FakeGitea`.
File: `tests/fake_adapters.py`:
```python
class FakeGitea:
    fake: bool = True
```
To inject `FakeGitea` in the tests we need to load it in the `'gitea'` key of
the `obj` attribute of the click `ctx` `Context` object. To do it create the
`fake_dependencies` dictionary with the required fakes and pass it to the
`invoke` call.
File: `tests/e2e/test_cli.py`:
```python
from tests.fake_adapters import FakeGitea
from _pytest.logging import LogCaptureFixture
fake_dependencies = {"gitea": FakeGitea()}
@pytest.fixture(name="runner")
def fixture_runner() -> CliRunner:
    """Configure the Click cli test runner."""
    return CliRunner()
def test_fake_injection(runner: CliRunner, caplog: LogCaptureFixture) -> None:
    result = runner.invoke(cli, ["is_fake"], obj=fake_dependencies)
    assert result.exit_code == 0
    assert (
        "entrypoints.cli",
        logging.INFO,
        "It's fake!",
    ) in caplog.record_tuples
```
In this way we don't need to ship the fake objects with the code, and the
modifications are minimal. Only the `try/except KeyError` snippet in the `cli`
definition.
## [File System Isolation](https://click.palletsprojects.com/en/8.1.x/testing/#file-system-isolation)
For basic command line tools with file system operations, the
`CliRunner.isolated_filesystem()` method is useful for setting the current
working directory to a new, empty folder.
```python
from click.testing import CliRunner
from cat import cat
def test_cat():
    runner = CliRunner()
    with runner.isolated_filesystem():
        with open("hello.txt", "w") as f:
            f.write("Hello World!")
        result = runner.invoke(cat, ["hello.txt"])
        assert result.exit_code == 0
        assert result.output == "Hello World!\n"
```
Pass `temp_dir` to control where the temporary directory is created. The
directory will not be removed by Click in this case. This is useful to integrate
with a framework like Pytest that manages temporary files.
```python
def test_keep_dir(tmp_path):
    runner = CliRunner()
    with runner.isolated_filesystem(temp_dir=tmp_path) as td:
        ...
```
You may also need to isolate the environment variables if your application read the configuration from them. To do that override the `runner` fixture:
```python
@pytest.fixture(name="runner")
def fixture_runner() -> CliRunner:
    """Configure the Click cli test runner."""
    return CliRunner(
        env={
            'PASSWORD_STORE_DIR': '',
            'GNUPGHOME': '',
            'PASSWORD_AUTH_DIR': '',
        },
        mix_stderr=False
    )
```
If you define the fixture in `conftest.py` you may need to use another name than `runner` otherwise it may be skipped, for example `cli_runner`.
# [Options](https://click.palletsprojects.com/en/7.x/options/)
## [Boolean Flags](https://click.palletsprojects.com/en/7.x/options/#boolean-flags)
Boolean flags are options that can be enabled or disabled. This can be
accomplished by defining two flags in one go separated by a slash (/) for