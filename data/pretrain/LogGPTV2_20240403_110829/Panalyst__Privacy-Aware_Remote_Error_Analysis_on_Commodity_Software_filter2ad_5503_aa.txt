title:Panalyst: Privacy-Aware Remote Error Analysis on Commodity Software
author:Rui Wang and
XiaoFeng Wang and
Zhuowei Li
Panalyst: Privacy-Aware Remote Error Analysis on Commodity Software
Rui Wang†, XiaoFeng Wang† and Zhuowei Li‡
†Indiana University at Bloomington, ‡Center for Software Excellence, Microsoft
{wang63,xw7}@indiana.edu, PI:EMAIL
Abstract
Remote error analysis aims at timely detection and rem-
edy of software vulnerabilities through analyzing run-
time errors that occur on the client. This objective can
only be achieved by offering users effective protection
of their private information and minimizing the perfor-
mance impact of the analysis on their systems without
undermining the amount of information the server can
access for understanding errors. To this end, we propose
in the paper a new technique for privacy-aware remote
analysis, called Panalyst. Panalyst includes a client com-
ponent and a server component. Once a runtime excep-
tion happens to an application, Panalyst client sends the
server an initial error report that includes only public in-
formation regarding the error, such as the length of the
packet that triggers the exception. Using an input built
from the report, Panalyst server performs a taint analysis
and symbolic execution on the application, and adjusts
the input by querying the client about the information
upon which the execution of the application depends.
The client agrees to answer only when the reply does
not give away too much user information. In this way,
an input that reproduces the error can be gradually built
on the server under the client’s consent. Our experimen-
tal study of this technique demonstrates that it exposes a
very small amount of user information, introduces neg-
ligible overheads to the client and enables the server to
effectively analyze an error.
1 Introduction
Remote analysis of program runtime errors enables
timely discovery and patching of software bugs, and has
therefore become an important means to improve soft-
ware security and reliability. As an example, Microsoft
is reported to ﬁx 29 percent of all Windows XP bugs
within Service Pack 1 through its Windows Error Re-
porting (WER) utility [20].
Remote error analysis is
typically achieved by running an error reporting tool on
a client system, which gathers data related to an applica-
tion’s runtime exception (such as a crash) and transmits
them to a server for diagnosis of the underlying software
ﬂaws. This paradigm has been widely adopted by soft-
ware manufacturers. For example, Microsoft relies on
WER to collect data should a crash happen to an applica-
tion. Similar tools developed by the third party are also
extensively used. An example is BugToaster [27], a free
crash analysis tool that queries a central database using
the attributes extracted from a crash to seek a potential
ﬁx. These tools, once complemented by automatic anal-
ysis mechanisms [44, 34] on the server side, will also
contribute to quick detection and remedy of critical se-
curity ﬂaws that can be exploited to launch a large-scale
cyber attack such as Worm epidemic [47, 30].
The primary concern of remote error analysis is its pri-
vacy impact. An error report may include private user
information such as a user’s name and the data she sub-
mitted to a website [9]. To reduce information leaks, er-
ror reporting systems usually only collect a small amount
of information related to an error, for example, a snippet
of the memory around a corrupted pointer. This treat-
ment, however, does not sufﬁciently address the privacy
concern, as the snippet may still carry conﬁdential data.
Moreover, it can also make an error report less informa-
tive for the purpose of rapid detection of the causal bugs,
some of which could be security critical. To mitigate
this problem, prior research proposes to instrument an
application to log its runtime operations and submit the
sanitized log once an exception happens [25, 36]. Such
approaches affect the performance of an application even
when it works normally, and require nontrivial changes
to the application’s code: for example, Scrash [25] needs
to do source-code transformation, which makes it un-
suitable for debugging commodity software. In addition,
these approaches still cannot ensure that sufﬁcient infor-
mation is gathered for a quick identiﬁcation of critical
security ﬂaws. Alternatively, one can analyze a vulner-
USENIX Association  
17th USENIX Security Symposium 
291
able program directly on the client [29]. This involves
intensive debugging operations such as replaying the in-
put that causes a crash and analyzing an executable at
the instruction level [29], which could be too intrusive to
the user’s normal operations to be acceptable for a prac-
tical deployment. Another problem is that such an anal-
ysis consumes a large amount of computing resources.
For example, instruction-level tracing of program execu-
tion usually produces an execution trace of hundreds of
megabytes [23]. This can hardly be afforded by the client
with limited resources, such as Pocket PC or PDA.
We believe that a good remote analyzer should help
the user effectively control the information to be used in
an error diagnosis, and avoid expensive operations on the
client side and modiﬁcation of an application’s source or
binary code. On the other hand, it is also expected to
offer sufﬁcient information for automatic detection and
remedy of critical security ﬂaws. To this end, we pro-
pose Panalyst, a new technique for privacy-aware remote
analysis of the crashes triggered by network inputs. Pan-
alyst aims at automatically generating a new input on the
server side to accurately reproduce a crash that happens
on the client, using the information disclosed according
to the user’s privacy policies. This is achieved through
collaboration between its client component and server
component. When an application crashes, Panalyst client
identiﬁes the packet that triggers the exception and gen-
erates an initial error report containing nothing but the
public attributes of the packet, such as its length. Taking
the report as a “taint” source, Panalyst server performs an
instruction-level taint analysis of the vulnerable applica-
tion. During this process, the server may ask the client
questions related to the content of the packet, for exam-
ple, whether a tainted branching condition is true. The
client answers the questions only if the amount of infor-
mation leaked by its answer is permitted by the privacy
policies. The client’s answers are used by the server to
build a new packet that causes the same exception to the
application, and determine the property of the underlying
bug, particularly whether it is security critical.
Panalyst client measures the information leaks associ-
ated with individual questions using entropy. Our pri-
vacy policies use this measure to deﬁne the maximal
amount of information that can be revealed for individ-
ual ﬁelds of an application-level protocol. This treatment
enables the user to effectively control her information
during error reporting. Panalyst client does not perform
any intensive debugging operations and therefore incurs
only negligible overheads. It works on commodity appli-
cations without modifying their code. These properties
make a practical deployment of our technique plausible.
In the meantime, our approach can effectively analyze a
vulnerable application and capture the bugs that are ex-
ploitable by malicious inputs. Panalyst can be used by
software manufacturers to demonstrate their “due dili-
gence” in preserving their customers’ privacy, and by a
third party to facilitate collaborative diagnosis of vulner-
able software.
We sketch the contributions of this paper as follows:
• Novel framework for remote error analysis. We pro-
pose a new framework for remote error analysis.
The framework minimizes the impact of an analy-
sis to the client’s performance and resources, lets
the user maintain a full control of her information,
and in the meantime provides her the convenience
to contribute to the analysis the maximal amount of
information she is willing to reveal. On the server
side, our approach interleaves the construction of
an accurate input for triggering an error, which is
achieved through interactions with the client, and
the analysis of the bug that causes the error. This
feature allows our analyzer to make full use of the
information provided by the client: even if such in-
formation is insufﬁcient for reproducing the error, it
helps discover part of input attributes, which can be
fed into other debugging mechanisms such as fuzz
testing [35] to identify the bug.
• Automatic control of information leaks. We present
our design of new privacy policies to deﬁne the
maximal amount of information that can be leaked
for individual ﬁelds of an application-level proto-
col. We also developed a new technique to enforce
such policies, which automatically evaluates the in-
formation leaks caused by responding to a question
and then makes decision on whether to submit the
answer in accordance with the policies.
• Implementation and evaluations. We implemented
a prototype system of Panalyst and evaluated it us-
ing real applications. Our experimental study shows
that Panalyst can accurately restore the causal input
of an error without leaking out too much user infor-
mation. Moreover, our technique has been demon-
strated to introduce nothing but negligible over-
heads to the client.
The rest of the paper is organized as follows. Section 2
formally models the problem of remote error analysis.
Section 3 elaborates the design of Panalyst. Section 4
describes the implementation of our prototype system.
Section 5 reports an empirical study of our technique us-
ing the prototype. Section 6 discusses the limitations of
our current design. Section 7 presents the related prior
research, and Section 8 concludes the paper and envi-
sions the future research.
292 
17th USENIX Security Symposium 
USENIX Association
2 Problem Description
We formally model the problem of remote error analysis
as follows. Let P : S × I → S be a program that maps
an initial process state s ∈ S and an input i ∈ I to an end
state. A state here describes the data in memory, disk and
register that are related to the process of P . A subset of
S, Eb, contains all possible states the process can end at
after an input exploits a bug b.
Once P terminates at an error state, the client runs
an error reporting program G : I → R to generate a
report r ∈ R for analyzing P on the server. The re-
port must be created under the constraints of the com-
puting resources the client is able or willing to commit.
: {G} × I × R →  measures the
Speciﬁcally, Ct
delay experienced by the user during report generation,
Cs : {G} × I × R →  measures the storage overhead,
and Cn : {G} × I × R −→  measures the bandwidth
used for transmitting the report. To produce and submit a
report r ∈ R, the computation time, storage consumption
and bandwidth usage must be bounded by certain thresh-
olds: formally, (Ct(G, i, r) ≤ T ht) ∧ (Cs(G, i, r) ≤
T hs)∧ (Cw(G, i, r) ≤ T hw), where T ht, T hs and T hw
represent the thresholds for time, storage space and band-
width respectively. In addition, r is allowed to be sub-
mitted only when the amount of information it carries is
acceptable to the user. This is enforced using a function
L : R × I →  that quantiﬁes the information leaked
out by r, and a threshold T hl. Formally, we require
L(r, i) ≤ T hl.
The server runs an analyzer D : R → I to diagnose
the vulnerable program P . D constructs a new input us-
ing r to exploit the same bug that causes the error on
the client. Formally, given P (i) ∈ Eb and r = G(i),
the analyzer identiﬁes another input i from r such that
P (i) ∈ Eb. This is also subject to resource constraints.
Speciﬁcally, let Ct : {D}×R×I →  be a function that
measures the computation time for running D and Cs :
{D} × R × I →  that measures the storage overhead.
We have: (Ct(D, r, i) ≤ T ht) ∧ (Cs(D, r, i) ≤ T hs),
where T ht and T hs are the server’s thresholds for time
and space respectively.
A solution to the above problem is expected to achieve
three objectives:
• Low client overheads. A practical solution should
work effectively under very small T ht, T hs and
T hw. Remote error analysis aims at timely de-
tecting critical security ﬂaws, which can only be
achieved when most clients are willing to collabo-
rate in most of the time. However, this will not hap-
pen unless the client-side operations are extremely
lightweight, as clients may have limited resources
and their workloads may vary with time. Actually,
customers could be very sensitive to the overheads
brought in by error reporting systems. For example,
advice has been given to turn off WER on Windows
Vista and Windows Mobile to improve their perfor-
mance [12, 17, 13]. Therefore, it is imaginable that
many may stop participating in error analysis in re-
sponse to even a slight increase of overheads. As
a result, the chance to catch dangerous bugs can be
signiﬁcantly reduced.
• Control of information leaks. The user needs to
have a full control of her information during an er-
ror analysis. Otherwise, she may choose not to par-
ticipate. Indispensable to this objective is a well-
constructed function L that offers the user a reason-
able measure of the information within an error re-
port. In addition, privacy policies built upon L and
a well-designed policy enforcer will automate the
information control, thereby offering the user a re-
liable and convenient way to protect her privacy.
• Usability of error report. Error reports submitted
by the user should contain ample information to al-
low a new input i to be generated within a short
period of time (small T ht) and at a reasonable stor-
age overhead (small T hs). The reports produced
by the existing systems include little information,
for example, a snapshot of the memory around a
corrupted pointer. As a result, an analyzer may
need to exhaustively explore a vulnerable program’s
branches to identify the bug that causes the error.
This process can be very time-consuming. To im-
prove this situation, it is important to have a report
that gives a detailed description about how an ex-
ploit happens.
In Section 3, we present an approach that achieves
these objectives.
3 Our Approach
In this section, we ﬁrst present an overview of Panalyst
and then elaborate on the designs of its individual com-
ponents.
3.1 Overview
Panalyst has two components, client and server. Panalyst
client logs the packets an application receives, notiﬁes
the server of its runtime error, and helps the server ana-
lyze the error by responding to its questions as long as
the answers are permitted by the user’s privacy policies.
Panalyst server runs an instruction-level taint analysis on
the application’s executable using an empty input, and
evaluates the execution symbolically [37] in the mean-
time. Whenever the server encounters a tainted value that
affects the choice of execution paths or memory access,
USENIX Association  
17th USENIX Security Symposium 
293
Figure 1: The Design of Panalyst.
it queries the client using the symbolic expression of that
value. From the client’s answer, the server uses a con-
straint solver to compute the values of the input bytes
that taint the expression. We illustrate the design of our
approach in Figure 1.
Figure 2: An Illustrative Example.
An example. Here we explain how Panalyst works
through an example, a program described in Figure 2.
The example is a simpliﬁed version of Null-HTTPd [8].
It is written in C for illustration purpose: Panalyst ac-
tually is designed to work on binary executables. The
program ﬁrst checks whether a packet is an HTTP POST
request.
If so, it allocates a buffer with the size com-
puted by adding 1024 to an integer derived from the
Content-Length ﬁeld and moves the content of the
request to that buffer. A problem here is that a buffer
overﬂow can happen if Content-Length is set to be
negative, which makes the buffer smaller than expected.
When this happens, the program may crash as a result of
writing to an illegal address or being terminated by an er-
ror detection mechanism such as GLIBC error detection.
Panalyst client logs the packets recently received by
the program.
In response to a crash, the client iden-
tiﬁes the packet being processed and notiﬁes Panalyst
server of the error. The server then starts analyzing the
vulnerable program at instruction level using an empty
HTTP request as a taint source. The request is also de-