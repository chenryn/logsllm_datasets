preferred the mobile variants despite the reduced usability
when compared to the local LastPass [49].
A series of 30 semi-structured interviews conducted by
Pearman et al. found differences in the user motivation to
adopt a PWM depending on its type. Their work suggests that
users of browser-based PWMs rated the convenience higher
while the users of separate stand-alone clients valued security
beneﬁts more [59]. In 2020, Ray et. al. replicated this interview
study with a focus on older adults (>60 years old), ﬁnding that
older adults had higher mistrust of cloud storage and online
services in general, and noting that recommendations from
trusted people like family and friends provide motivators for
those older people [60].
Other recent work by Maclean et al. suggests that three
key factors inﬂuence an user’s decision to adopt a PWM: The
expectation that the tool performs well and improves their
workﬂow, the generation of a habit due to continued use and
trust in the security mechanisms within the PWMs [53].
While most works focus on novice users, Stobert et al. [67]
interviewed security experts about their own habits and usage
patterns and found similar motives on websites the participants
deemed less relevant. Secure behavior was often only shown
for accounts they perceived as important, suggesting that even
with expert users, PWM usage is not widely adopted.
Most studies that researched the usability of PWMs found
that convenience and usability were the primary deciding fac-
tors for adoption. These can be decreased by PWMs that do not
behave in the intended way, e. g. due to problems recognizing
relevant information such as password input ﬁelds. To mitigate
this, Stajano et al. proposed a html-based speciﬁcation of
semantic labels for input ﬁelds to help PWMs ﬁnd relevant
ﬁelds and correctly classify their main purpose [66].
To the best of our knowledge, our work provides the ﬁrst
evaluation of PWMs based on real world problem reports. Our
research examines how well PWMs can deal with existing
edge cases. We evaluate the behavior of 15 major PWMs on
a set of MWEs for the previously analyzed problem reports.
In contrast to Stajano et al. who focused on the recognition of
input ﬁelds, our work aims to identify broader shortcomings
of PWMs by identifying widespread issues and recommending
possible solutions.
III. BACKGROUND ON PASSWORD MANAGERS
At their core, PWMs are tools to handle user credentials
(e. g. usernames and passwords) and to reduce their users’
mental load during password generation, account registration
and login, as well as credential updates. PWMs aim to improve
online account security by generating, storing and autoﬁlling
distinct secure passwords for online accounts and therefore
compensating for end-users’ difﬁculties with creating and
remembering a myriad of secure and distinct passwords.
However, since handling user authentication is a security
critical problem, PWMs have been a focus for security re-
search, and prior work has discovered a multitude of issues
across all common PWMs [47], [50], [56], [64], [74]. Fur-
thermore, the multitude of approaches to implement password
based authentication on the web led to a number of usability
problems that limit the adoption of PWMs. Here, related work
has presented us with the requirements and expectations that
users have for PWMs [39], [49], [53] and discovered what
features of PWMs motivate users to use them [59], [60], [67].
The main reasons to adopt PWMs were discovered to be the
convenience of not having to remember passwords and the
time saved when a PWM supports the user by autoﬁlling the
passwords. To provide these features however, a PWM has to
analyze a website, identify it and interact with the authentica-
tion mechanisms of the website. As we will demonstrate in our
user complaints evaluation (cf. section IV), PWMs currently
have to handle a large range of possible interaction patterns
to authenticate on websites.
Fig. 1.
extension.
Interaction between PWMs and websites through the browser
A. Interaction with websites
Most desktop PWMs interact with websites through a
browser extension. They usually cooperate with a standalone
PWM application, or connect to a web service. The application
or web service handles the storage of user credentials; the
browser extension interact with the website. In this work
we focus on the interaction between PWMs and websites to
identify obstacles that can decrease usability.
Web Authentication. PWMs commonly provide the follow-
ing features in order to support users during their authentica-
tion workﬂow:
• Service Detection
• Credential Storage and autosave
• Providing Credentials and autoﬁll
• Automatic Login or autologin
• Secure Credential Generation
Additionally, as we discovered during our analysis, one
obvious requirement for PWMs is to not interfere with a
website in a way that prevents users from accessing its
contents. In the following, we provide background information
and examples for each of these features, and how we handle
them in our work. We provide an overview in Figure 1.
Authorized licensed use limited to: Tsinghua University. Downloaded on February 25,2022 at 12:15:22 UTC from IEEE Xplore.  Restrictions apply. 
1369
WebsiteJavascriptURLHeadersFormsBrowser ExtensionDetect  service providerAutomatic LoginAutofill knowncredetialsAutosave newcredentialsPassword ManagerStore credentialsStore credentialsService Detection. This feature refers to the way password
managers determine which authentication data to use. The
most important factor is the URL of a website, which is usually
matched on domain-name level (e. g. example.com). PWMs
may or may not match different subdomains to the same
set of credentials (e. g. sub1.example.com, sub2.example.com)
or offer to store multiple accounts for different paths (e. g.
example.com/service1, example.com/service2).
Credential Storage. Storage of credentials represents the core
feature of password managers. From an usability perspective,
password managers can provide automatic creation of new
credentials when they detect them being entered on a website,
which we refer to as autosave. It can also offer to update
credentials when it notices different credentials being entered
for already stored accounts.
Providing Credentials. From a convenience point of view,
this is the second main feature password managers can provide
to support users. When a user accesses a service that the
password manager has stored credentials for, the password
manager can offer these credentials automatically. To provide
further convenience, the password manager may even attempt
to ﬁll the credentials in the appropriate form-ﬁelds on a web-
site or provide them for authentication headers [44], commonly
refereed to as autologin.
Automatic Login. One rarer functionality across password
managers is to automatically log in (autologin) users without
being triggered at all when the user visits a website that the
password manager has stored credentials for. For the purpose
of our analysis, this feature includes everything required for
autologin and to submit the login request, without any previous
interaction by the user except to visit the site.
Secure Credential Generation. The ﬁnal feature we want to
talk about for this analysis is the option to create credentials for
the user. Password managers can generate secure passwords
and offer them to the user during registration or password
change processes. From a user experience perspective, the
main features here relate to password policies, detecting and
enforcing them for the generated passwords.
-
IV. USER COMPLAINTS EVALUATION
To identify interaction problems between PWMs and web-
sites users encounter, we collected and analyzed user feedback
for all PWMs listed in Table I. We used the identiﬁed list of
interaction problems to build MWEs for our second study in
the following section.
A. Choosing Password Managers (PWMs)
Since Chrome has the highest market share, we focus
our user complaints evaluation on PWMs that offer browser
extensions in the Chrome Webstore [21], [28], [32]. We
consider all PWMs that were downloaded at least 10,000 times
which should cover the majority of users. Table I provides an
overview for all PWMs we considered.
After selecting the PWMs, we aimed to ﬁnd interaction
problems between PWM browser extensions and websites
PASSWORD MANAGERS FOR WHICH WE COLLECTEDFEEDBACK
INCLUDING THEIR DOWNLOAD COUNTS.
TABLE I
Name
LastPass: Free Password Manager
Norton Password Manager
Avira Password Manager
Dashlane - Password Manager
1Password X – Password Manager
Bitwarden - Free Password Manager
RoboForm Password Manager
Keeper® Password Manager & Digital Vault
ThinkVantage Password Manager
Blur
RapidIdentity
Enpass extension (requires desktop app)
SafeInCloud Password Manager
KeePassXC-Browser
Password Depot Extension
Passbolt Extension
NordPass® Password Manager & Digital Vault
Zoho Vault
Password Manager Pro
1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20 MYKI Password Manager & Authenticator
21
22
23
24
25
26
27
28
29
30
Passwordstate
Kee - Password Manager
F-Secure KEY Password Manager
KeePassHelper Password Manager
Devolutions Web Login
SaferPass: Password Manager for Free
Steganos Password Manager
Trezor Password Manager
Advanced Password Manager
1Password X Beta – Password Manager
Downloads
10,000,000
4,000,000
3,000,000
3,000,000
600,000
500,000
500,000
300,000
200,000
100,000
100,000
100,000
80,000
60,000
50,000
50,000
30,000
30,000
30,000
20,000
20,000
20,000
10,000
10,000
10,000
10,000
10,000
10,000
10,000
10,000
(RQ2, e. g. non-working autoﬁll of login credentials). We only
consider browser extensions, since we expect users to mainly
use PWMs within popular web browsers. To identify high
impact problems and a measure of frequency or prevalence,
we decided to focus on user feedback and reviews for all
PWMs in Table I. We collected 3,319 instances of user
feedback for these PWMs. Using open coding (cf. Figure
2 for an overview of our coding process), we consolidated
feedback to construct MWEs to investigate these problems
across all PWMs and develop potential improvements. Below,
we present and discuss our user feedback evaluation and the
resulting interaction problems we identiﬁed.
B. Collecting User Feedback
For diversity and to reach saturation, we collected user
feedback from multiple sources. Since we selected PWMs
based on the availability of a Chrome Web Store extension, we
started collecting feedback from user reviews. Users can post
public reviews for each extension. Additionally, users can post
public support requests that extension providers can answer or
redirect to ofﬁcial support channels. Hence, Chrome Web Store
reviews are the main feedback source in this study.
Feedback taken from the Chrome Web Store in most cases
stems from end users, therefore containing non-expert opinions
and complaints.
To obtain more diverse feedback, we also collected expert
feedback containing more technical details and different use-
Authorized licensed use limited to: Tsinghua University. Downloaded on February 25,2022 at 12:15:22 UTC from IEEE Xplore.  Restrictions apply. 
1370
cases. While ticket and support systems for PWMs are usually
not publicly available, open source PWMs make detailed
histories of issues and solutions accessible in their repositories.
These issues are typically not submitted by average end-
users but more tech-savvy users and web developers. All open
source PWMs in our data set host their code on GitHub [16].
Hence, we included their GitHub issue history in our analysis.
We also considered including issues from larger browser
vendors, but for this analysis decided to focus on issues
within the realm of WebExtensions. In the remainder of this
section we provide details on our user feedback collection and
evluation.
Chrome Web Store User Reviews. Concerning feedback
from the Chrome Web Store, we collected and analyzed both
the user reviews and support requests as of 07/16/2020. We
collected up to 125 of the most recent reviews and support
requests for each PWM browser extension in Table V-C.
Only few PWMs had more reviews and we did not ﬁnd new
interaction problems in additional reviews. Using a Python-
based Selenium web crawler [25], [26] we collected feedback
items and related meta information including the author, date
of posting and comments. To guarantee a correct problem
assessment, we dropped all reviews that were not in English or
German. Overall, we collected 2,947 user reviews and support
requests for 30 PWMs. In 15 PWMs did not offer a support
section or only linked to their ofﬁcial support system on the
Chrome Web Store page. For those, we limited our analysis
to user reviews. In total, we acquired 1,895 reviews in 30
PWMs’ review sections, but only 1,052 support requests in 15
PWMs’ support sections. Since reviews and support requests
are structured differently, we collected slightly different data.
For both, we collected the text itself as well as any comments
left by e. g. other users or support teams, the authors, the
date of the postings and which PWM the post refers to. Both
reviews and support requests included data unique to their
respective type: For reviews, this was a rating between one
and ﬁve stars awarded by the commenting users, for support
requests, users were able to add a title to their post, which we
both collected and considered as well.
GitHub Issues. We analyzed both open and closed issues on
GitHub that were created between 04/01/2019 and 07/17/2020
as well as updates to them until 08/12/2020. Similar to the
Chrome Web Store reviews and support requests, we limited
our collection to issues until 01/01/2020, as we did not ﬁnd
new interaction problems in older issues. The issues were
collected using a crawler extension for Chrome [29], [30]. We
collected issues regarding PWM browser extensions for three
open-source PWMs (Bitwarden [12], KeePassXC [13], [14]2,
and Passbolt [15]) from ﬁve GitHub repositories. We extracted
the title, link, whether the issue was open or closed, and date
for each issue. Content wise, we looked at the complete thread
including issue discussion and resolution.
2KeePassXC contained browser extensions related issues in two repositories
for either the extension or client. We ﬁltered for issues labelled as related to
the extension.
Fig. 2. Methodology for our qualitative coding research user reports.
Overall, we collected users feedback from 372 issues, 1,895
reviews and 1,052 support requests resulting in a total of
3,319 feedback items we considered and coded in our further
analysis.
C. Classiﬁcation and Problem Case Development
We used an iterative exploratory coding approach [55]
for the user feedback analysis. Since we were interested in
analysing user complaints regarding issues on the PWMs’ in-
teraction with websites we had to ﬁlter out unrelated feedback
(e. g. ”This Password Manager is very good” or ”Doesn’t work,
this sucks”) ﬁrst. Therefore, three authors each reviewed a