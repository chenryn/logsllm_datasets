### User Preferences and Motivations for Password Managers (PWMs)

Despite the reduced usability, users often preferred mobile variants of password managers over local solutions like LastPass [49]. A series of 30 semi-structured interviews conducted by Pearman et al. revealed differences in user motivation to adopt a PWM based on its type. Users of browser-based PWMs rated convenience higher, while those using standalone clients valued security benefits more [59]. In 2020, Ray et al. replicated this interview study with a focus on older adults (aged 60 and above). They found that older adults had a higher level of mistrust towards cloud storage and online services in general. Additionally, recommendations from trusted individuals, such as family and friends, were significant motivators for these older users [60].

Recent work by Maclean et al. suggests that three key factors influence a user's decision to adopt a PWM: the expectation that the tool performs well and improves their workflow, the development of a habit due to continued use, and trust in the security mechanisms within the PWMs [53]. While most studies focus on novice users, Stobert et al. [67] interviewed security experts about their own habits and usage patterns. They found similar motives, but noted that secure behavior was often only exhibited for accounts deemed important, indicating that even among expert users, PWM adoption is not widespread.

Most studies on the usability of PWMs have found that convenience and usability are the primary deciding factors for adoption. These can be negatively affected by PWMs that do not function as intended, such as failing to recognize relevant information like password input fields. To address this, Stajano et al. proposed an HTML-based specification of semantic labels for input fields to help PWMs identify and correctly classify them [66].

To the best of our knowledge, our work provides the first evaluation of PWMs based on real-world problem reports. We examine how well PWMs handle existing edge cases by evaluating the behavior of 15 major PWMs on a set of minimal working examples (MWEs) derived from previously analyzed problem reports. Unlike Stajano et al., who focused on the recognition of input fields, our work aims to identify broader shortcomings of PWMs by pinpointing widespread issues and recommending possible solutions.

### Background on Password Managers

At their core, PWMs are tools designed to manage user credentials (e.g., usernames and passwords) and reduce the mental load associated with password generation, account registration, login, and credential updates. PWMs aim to enhance online account security by generating, storing, and auto-filling distinct, secure passwords for online accounts, thereby compensating for end-users' difficulties in creating and remembering multiple secure and unique passwords.

However, since handling user authentication is a security-critical task, PWMs have been a focal point for security research. Prior work has uncovered numerous issues across common PWMs [47], [50], [56], [64], [74]. Furthermore, the variety of approaches to implement password-based authentication on the web has led to several usability problems that limit PWM adoption. Related work has provided insights into the requirements and expectations users have for PWMs [39], [49], [53] and identified the features that motivate users to use them [59], [60], [67].

The main reasons for adopting PWMs include the convenience of not having to remember passwords and the time saved when a PWM auto-fills passwords. To provide these features, a PWM must analyze a website, identify it, and interact with its authentication mechanisms. As we will demonstrate in our user complaints evaluation (cf. Section IV), PWMs currently need to handle a wide range of interaction patterns to authenticate on websites.

**Figure 1. Interaction between PWMs and websites through the browser extension.**

### Interaction with Websites

Most desktop PWMs interact with websites through a browser extension, which typically cooperates with a standalone PWM application or connects to a web service. The application or web service handles the storage of user credentials, while the browser extension interacts with the website. In this work, we focus on the interaction between PWMs and websites to identify obstacles that can decrease usability.

**Web Authentication Features:**
- **Service Detection:** This feature refers to how PWMs determine which authentication data to use. The most important factor is the URL of a website, usually matched at the domain-name level (e.g., example.com). PWMs may or may not match different subdomains to the same set of credentials (e.g., sub1.example.com, sub2.example.com) or offer to store multiple accounts for different paths (e.g., example.com/service1, example.com/service2).
- **Credential Storage:** This represents the core feature of PWMs. From a usability perspective, PWMs can automatically create new credentials when they detect them being entered on a website (autosave) and offer to update credentials when different ones are entered for already stored accounts.
- **Providing Credentials:** This is the second main feature, offering convenience by providing stored credentials automatically. The PWM may also attempt to fill the credentials in the appropriate form fields or provide them for authentication headers (autologin).
- **Automatic Login:** This rarer functionality allows PWMs to automatically log in users without any user interaction when visiting a website with stored credentials. For our analysis, this includes all steps required for autologin and submitting the login request.
- **Secure Credential Generation:** This feature allows PWMs to generate secure passwords and offer them during registration or password change processes. From a user experience perspective, the main features relate to password policies, detecting, and enforcing them for generated passwords.

### User Complaints Evaluation

To identify interaction problems between PWMs and websites, we collected and analyzed user feedback for all PWMs listed in Table I. We used the identified list of interaction problems to build MWEs for our second study.

**A. Choosing Password Managers (PWMs)**

Given Chrome's high market share, we focused on PWMs that offer browser extensions in the Chrome Web Store [21], [28], [32]. We considered all PWMs downloaded at least 10,000 times, which should cover the majority of users. Table I provides an overview of the PWMs we considered.

**Table I: Password Managers for Which We Collected Feedback, Including Their Download Counts.**

| Name | Downloads |
|------|-----------|
| LastPass: Free Password Manager | 10,000,000 |
| Norton Password Manager | 4,000,000 |
| Avira Password Manager | 3,000,000 |
| Dashlane - Password Manager | 3,000,000 |
| 1Password X – Password Manager | 600,000 |
| Bitwarden - Free Password Manager | 500,000 |
| RoboForm Password Manager | 500,000 |
| Keeper® Password Manager & Digital Vault | 300,000 |
| ThinkVantage Password Manager | 200,000 |
| Blur | 100,000 |
| RapidIdentity | 100,000 |
| Enpass extension (requires desktop app) | 100,000 |
| SafeInCloud Password Manager | 80,000 |
| KeePassXC-Browser | 60,000 |
| Password Depot Extension | 50,000 |
| Passbolt Extension | 50,000 |
| NordPass® Password Manager & Digital Vault | 30,000 |
| Zoho Vault | 30,000 |
| Password Manager Pro | 30,000 |
| MYKI Password Manager & Authenticator | 20,000 |
| Passwordstate | 20,000 |
| Kee - Password Manager | 20,000 |
| F-Secure KEY Password Manager | 10,000 |
| KeePassHelper Password Manager | 10,000 |
| Devolutions Web Login | 10,000 |
| SaferPass: Password Manager for Free | 10,000 |
| Steganos Password Manager | 10,000 |
| Trezor Password Manager | 10,000 |
| Advanced Password Manager | 10,000 |
| 1Password X Beta – Password Manager | 10,000 |

We aimed to find interaction problems between PWM browser extensions and websites (RQ2, e.g., non-working auto-fill of login credentials). We only considered browser extensions, as we expect users to primarily use PWMs within popular web browsers. To identify high-impact problems and measure their frequency, we focused on user feedback and reviews for all PWMs in Table I. We collected 3,319 instances of user feedback and used open coding (cf. Figure 2 for an overview of our coding process) to consolidate feedback and construct MWEs to investigate these problems across all PWMs and develop potential improvements.

**B. Collecting User Feedback**

For diversity and to reach saturation, we collected user feedback from multiple sources. Since we selected PWMs based on the availability of a Chrome Web Store extension, we started by collecting feedback from user reviews. Users can post public reviews for each extension and public support requests that extension providers can answer or redirect to official support channels. Therefore, Chrome Web Store reviews are the main feedback source in this study.

Feedback from the Chrome Web Store typically comes from end-users, containing non-expert opinions and complaints. To obtain more diverse feedback, we also collected expert feedback, which includes more technical details and different use cases. Open-source PWMs make detailed histories of issues and solutions accessible in their repositories. These issues are typically submitted by tech-savvy users and web developers. All open-source PWMs in our dataset host their code on GitHub [16], so we included their GitHub issue history in our analysis.

**Chrome Web Store User Reviews:**
- We collected and analyzed both user reviews and support requests as of July 16, 2020.
- We collected up to 125 of the most recent reviews and support requests for each PWM browser extension.
- Using a Python-based Selenium web crawler [25], [26], we collected feedback items and related metadata, including the author, date of posting, and comments.
- We dropped all reviews not in English or German.
- Overall, we collected 2,947 user reviews and support requests for 30 PWMs.
- For 15 PWMs without a support section, we limited our analysis to user reviews.
- We acquired 1,895 reviews in 30 PWMs’ review sections and 1,052 support requests in 15 PWMs’ support sections.
- We collected the text itself, comments, authors, dates, and the PWM referred to. Reviews included ratings (one to five stars), and support requests included titles.

**GitHub Issues:**
- We analyzed both open and closed issues on GitHub created between April 1, 2019, and July 17, 2020, and updates until August 12, 2020.
- We limited our collection to issues until January 1, 2020, as we did not find new interaction problems in older issues.
- We collected issues regarding PWM browser extensions for three open-source PWMs (Bitwarden [12], KeePassXC [13], [14], and Passbolt [15]) from five GitHub repositories.
- We extracted the title, link, status (open or closed), and date for each issue.
- We looked at the complete thread, including issue discussion and resolution.

Overall, we collected 372 issues, 1,895 reviews, and 1,052 support requests, resulting in a total of 3,319 feedback items for our analysis.

**C. Classification and Problem Case Development**

We used an iterative exploratory coding approach [55] for the user feedback analysis. Since we were interested in analyzing user complaints regarding issues in the PWMs' interaction with websites, we first filtered out unrelated feedback (e.g., "This Password Manager is very good" or "Doesn't work, this sucks"). Three authors each reviewed a subset of the feedback to ensure consistency and accuracy.

**Figure 2. Methodology for our qualitative coding research of user reports.**

This structured approach allowed us to systematically identify and categorize the interaction problems, leading to the development of MWEs for further investigation and potential improvements.