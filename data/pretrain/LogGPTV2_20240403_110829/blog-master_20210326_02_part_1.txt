## PostgreSQL 14 preview - BRIN (典型IoT 时序场景) 块级索引支持 bloom filter - 随机,大量distinct value, 等值查询    
### 作者    
digoal    
### 日期    
2021-03-26     
### 标签    
PostgreSQL , brin , 索引 , 块级索引 , bloom , 等值查询  
----    
## 背景    
等值查询一般有些什么索引支持?  
btree: 精准定位  
hash: 精准定位  
bloom: 超集定位, 支持任意组合等值查询, 少量bit占位符表示是否包含某个value, 由于不同value的bits不同, 当插入大量value后占位bit可能被大量设置为1, 导致超集出现, 等值查询真不一定为真, 假一定为假.  
gin: 倒排索引  
brin: 块级索引, 保存一个heap blocks段存储的被索引字段value 的范围. min,max  
目前BRIN变种出现, 存储的不再是min, max, 而是支持了bloom filter, 也就是说它存储的是占位bits.  每个连续heap blocks, 存储一个占位bits, 被索引字段的hash value经过再次bloom hash填充占位bit.  
brin bloom 的应用场景:  
离散值较多时: 等值查询, 任意字段组合等值查询.    
PostgreSQL 开发者确实很精致, 赞!!!    
最佳设置实践:    
1、false_positive_rate: false(0) bits 占比不能太低, 越低, 失真越高(都是1的占位bit, 意思是它包含任意value, 所以就没有过滤意义)  
2、n_distinct_per_range: 一连串blocks包含多少个被索引字段的唯一值, 这个值越大越容易失真, 因为占位组合会更多  
3、通过调整pages_per_range 来控制 n_distinct_per_range   
https://git.postgresql.org/gitweb/?p=postgresql.git;a=commit;h=77b88cd1bb9041a735f24072150cacfa06c699a3  
```  
BRIN bloom indexes  
author	Tomas Vondra 	  
Fri, 26 Mar 2021 12:35:29 +0000 (13:35 +0100)  
committer	Tomas Vondra 	  
Fri, 26 Mar 2021 12:35:32 +0000 (13:35 +0100)  
commit	77b88cd1bb9041a735f24072150cacfa06c699a3  
tree	be9ca84d673e3aa17e0e75ec579be414ae7eac18	tree  
parent	a681e3c107aa97eb554f118935c4d2278892c3dd	commit | diff  
BRIN bloom indexes  
Adds a BRIN opclass using a Bloom filter to summarize the range. Indexes  
using the new opclasses allow only equality queries (similar to hash  
indexes), but that works fine for data like UUID, MAC addresses etc. for  
which range queries are not very common. This also means the indexes  
work for data that is not well correlated to physical location within  
the table, or perhaps even entirely random (which is a common issue with  
existing BRIN minmax opclasses).  
It's possible to specify opclass parameters with the usual Bloom filter  
parameters, i.e. the desired false-positive rate and the expected number  
of distinct values per page range.  
  CREATE TABLE t (a int);  
  CREATE INDEX ON t  
   USING brin (a int4_bloom_ops(false_positive_rate = 0.05,  
                                n_distinct_per_range = 100));  
The opclasses do not operate on the indexed values directly, but compute  
a 32-bit hash first, and the Bloom filter is built on the hash value.  
Collisions should not be a huge issue though, as the number of distinct  
values in a page ranges is usually fairly small.  
Bump catversion, due to various catalog changes.  
Author: Tomas Vondra   
Reviewed-by: Alvaro Herrera   
Reviewed-by: Alexander Korotkov   
Reviewed-by: Sokolov Yura   
Reviewed-by: Nico Williams   
Reviewed-by: John Naylor   
Discussion: https://postgr.es/m/PI:EMAIL  
Discussion: https://postgr.es/m/5d78b774-7e9c-c94e-12cf-fef51cc89b1a%402ndquadrant.com  
```  
用法  
```  
   1 CREATE TABLE brintest_bloom (byteacol bytea,  
   2     charcol "char",  
   3     namecol name,  
   4     int8col bigint,  
   5     int2col smallint,  
   6     int4col integer,  
   7     textcol text,  
   8     oidcol oid,  
   9     float4col real,  
  10     float8col double precision,  
  11     macaddrcol macaddr,  
  12     inetcol inet,  
  13     cidrcol cidr,  
  14     bpcharcol character,  
  15     datecol date,  
  16     timecol time without time zone,  
  17     timestampcol timestamp without time zone,  
  18     timestamptzcol timestamp with time zone,  
  19     intervalcol interval,  
  20     timetzcol time with time zone,  
  21     numericcol numeric,  
  22     uuidcol uuid,  
  23     lsncol pg_lsn  
  24 ) WITH (fillfactor=10);  
  25 INSERT INTO brintest_bloom SELECT  
  26     repeat(stringu1, 8)::bytea,  
  27     substr(stringu1, 1, 1)::"char",  
  28     stringu1::name, 142857 * tenthous,  
  29     thousand,  
  30     twothousand,  
  31     repeat(stringu1, 8),  
  32     unique1::oid,  
  33     (four + 1.0)/(hundred+1),  
  34     odd::float8 / (tenthous + 1),  
  35     format('%s:00:%s:00:%s:00', to_hex(odd), to_hex(even), to_hex(hundred))::macaddr,  
  36     inet '10.2.3.4/24' + tenthous,  
  37     cidr '10.2.3/24' + tenthous,  
  38     substr(stringu1, 1, 1)::bpchar,  
  39     date '1995-08-15' + tenthous,  
  40     time '01:20:30' + thousand * interval '18.5 second',  
  41     timestamp '1942-07-23 03:05:09' + tenthous * interval '36.38 hours',  
  42     timestamptz '1972-10-10 03:00' + thousand * interval '1 hour',  
  43     justify_days(justify_hours(tenthous * interval '12 minutes')),  
  44     timetz '01:30:20+02' + hundred * interval '15 seconds',  
  45     tenthous::numeric(36,30) * fivethous * even / (hundred + 1),  
  46     format('%s%s-%s-%s-%s-%s%s%s', to_char(tenthous, 'FM0000'), to_char(tenthous, 'FM0000'), to_char(tenthous, 'FM0000'), to_char(tenthous, 'FM0000'), to_char(tenthous, 'FM0000'), to_char(tenthous, 'FM0000'), to_char(tenthous, 'FM0000'), to_char(tenthous, 'FM0000'))::uuid,  
  47     format('%s/%s%s', odd, even, tenthous)::pg_lsn  
  48 FROM tenk1 ORDER BY unique2 LIMIT 100;  
  49 -- throw in some NULL's and different values  
  50 INSERT INTO brintest_bloom (inetcol, cidrcol) SELECT  
  51     inet 'fe80::6e40:8ff:fea9:8c46' + tenthous,  
  52     cidr 'fe80::6e40:8ff:fea9:8c46' + tenthous  
  53 FROM tenk1 ORDER BY thousand, tenthous LIMIT 25;  
  54 -- test bloom specific index options  
  55 -- ndistinct must be >= -1.0  
  56 CREATE INDEX brinidx_bloom ON brintest_bloom USING brin (  
  57     byteacol bytea_bloom_ops(n_distinct_per_range = -1.1)  
  58 );  
  59 ERROR:  value -1.1 out of bounds for option "n_distinct_per_range"  
  60 DETAIL:  Valid values are between "-1.000000" and "2147483647.000000".  
  61 -- false_positive_rate must be between 0.0001 and 0.25  
  62 CREATE INDEX brinidx_bloom ON brintest_bloom USING brin (  
  63     byteacol bytea_bloom_ops(false_positive_rate = 0.00009)  
  64 );  
  65 ERROR:  value 0.00009 out of bounds for option "false_positive_rate"  
  66 DETAIL:  Valid values are between "0.000100" and "0.250000".  
  67 CREATE INDEX brinidx_bloom ON brintest_bloom USING brin (  
  68     byteacol bytea_bloom_ops(false_positive_rate = 0.26)  
  69 );  
  70 ERROR:  value 0.26 out of bounds for option "false_positive_rate"  
  71 DETAIL:  Valid values are between "0.000100" and "0.250000".  
  72 CREATE INDEX brinidx_bloom ON brintest_bloom USING brin (  
  73     byteacol bytea_bloom_ops,  
  74     charcol char_bloom_ops,  
  75     namecol name_bloom_ops,  
  76     int8col int8_bloom_ops,  
  77     int2col int2_bloom_ops,  
  78     int4col int4_bloom_ops,  
  79     textcol text_bloom_ops,  
  80     oidcol oid_bloom_ops,  
  81     float4col float4_bloom_ops,  
  82     float8col float8_bloom_ops,  
  83     macaddrcol macaddr_bloom_ops,  
  84     inetcol inet_bloom_ops,  
  85     cidrcol inet_bloom_ops,  
  86     bpcharcol bpchar_bloom_ops,  
  87     datecol date_bloom_ops,  
  88     timecol time_bloom_ops,  
  89     timestampcol timestamp_bloom_ops,  
  90     timestamptzcol timestamptz_bloom_ops,  
  91     intervalcol interval_bloom_ops,  
  92     timetzcol timetz_bloom_ops,  
  93     numericcol numeric_bloom_ops,  
  94     uuidcol uuid_bloom_ops,  
  95     lsncol pg_lsn_bloom_ops  
  96 ) with (pages_per_range = 1);  
  97 CREATE TABLE brinopers_bloom (colname name, typ text,  
  98     op text[], value text[], matches int[],  
  99     check (cardinality(op) = cardinality(value)),  
 100     check (cardinality(op) = cardinality(matches)));  
 101 INSERT INTO brinopers_bloom VALUES  
 102     ('byteacol', 'bytea',  
 103      '{=}',  
 104      '{BNAAAABNAAAABNAAAABNAAAABNAAAABNAAAABNAAAABNAAAA}',  
 105      '{1}'),  
 106     ('charcol', '"char"',  
 107      '{=}',  
 108      '{M}',  
 109      '{6}'),  
 110     ('namecol', 'name',  
 111      '{=}',  
 112      '{MAAAAA}',  
 113      '{2}'),  
 114     ('int2col', 'int2',  
 115      '{=}',  
 116      '{800}',  
 117      '{1}'),  
 118     ('int4col', 'int4',  
 119      '{=}',  
 120      '{800}',  
 121      '{1}'),  
 122     ('int8col', 'int8',  
 123      '{=}',  
 124      '{1257141600}',  
 125      '{1}'),  
 126     ('textcol', 'text',  
 127      '{=}',  
 128      '{BNAAAABNAAAABNAAAABNAAAABNAAAABNAAAABNAAAABNAAAA}',  
 129      '{1}'),  
 130     ('oidcol', 'oid',  
 131      '{=}',  
 132      '{8800}',  
 133      '{1}'),  
 134     ('float4col', 'float4',  
 135      '{=}',  
 136      '{1}',  
 137      '{4}'),  
 138     ('float8col', 'float8',  
 139      '{=}',  
 140      '{0}',  
 141      '{1}'),  
 142     ('macaddrcol', 'macaddr',  
 143      '{=}',  
 144      '{2c:00:2d:00:16:00}',  
 145      '{2}'),  
 146     ('inetcol', 'inet',  
 147      '{=}',  
 148      '{10.2.14.231/24}',  
 149      '{1}'),  
 150     ('inetcol', 'cidr',  
 151      '{=}',  
 152      '{fe80::6e40:8ff:fea9:8c46}',  
 153      '{1}'),  
 154     ('cidrcol', 'inet',  
 155      '{=}',  
 156      '{10.2.14/24}',  
 157      '{2}'),  
 158     ('cidrcol', 'inet',  
 159      '{=}',  
 160      '{fe80::6e40:8ff:fea9:8c46}',  
 161      '{1}'),  
 162     ('cidrcol', 'cidr',  
 163      '{=}',  
 164      '{10.2.14/24}',  
 165      '{2}'),  
 166     ('cidrcol', 'cidr',  
 167      '{=}',  
 168      '{fe80::6e40:8ff:fea9:8c46}',  
 169      '{1}'),  
 170     ('bpcharcol', 'bpchar',  
 171      '{=}',  
 172      '{W}',  
 173      '{6}'),  
 174     ('datecol', 'date',  
 175      '{=}',  
 176      '{2009-12-01}',  
 177      '{1}'),  
 178     ('timecol', 'time',  