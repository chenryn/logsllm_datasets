## [⁠]{#chap-Virtualization_Tuning_Optimization_Guide-BlockIO.html#sect-Virtualization_Tuning_Optimization_Guide-BlockIO-Multi-queue_virtio-scsi}6.5.2. 多队列 virtio-scsi {.title}
:::
::: para
多队列 virtio-scsi 提供了改进的存储性能和 virtio-scsi
驱动中的可扩展性。该命令使每个虚拟 CPU
可以使用独立队列和中断，从而不会影响到其他虚拟 CPU。
:::
::: section
::: titlepage
### [⁠]{#chap-Virtualization_Tuning_Optimization_Guide-BlockIO.html#idm140616996539360}6.5.2.1. 配置多队列 virtio-scsi {.title}
:::
::: para
Red Hat Enterprise Linux 7 中默认禁用多队列 virtio-scsi。
:::
::: para
如需启用客机中的多队列 virtio-scsi 支持，在客机 XML
配置中添加以下命令，其中 *N* 为虚拟 CPU 队列的总数：
:::
``` screen
```
:::
:::
:::
:::
[]{#chap-Virtualization_Tuning_Optimization_Guide-Memory.html}
::: chapter
::: titlepage
# [⁠]{#chap-Virtualization_Tuning_Optimization_Guide-Memory.html#chap-Virtualization_Tuning_Optimization_Guide-Memory}第 7 章 内存 {.title}
:::
::: section
::: titlepage
# [⁠]{#chap-Virtualization_Tuning_Optimization_Guide-Memory.html#idm140616939827296}7.1. 简介 {.title}
:::
::: para
本章节包括虚拟环境的内存优化选项。
:::
:::
::: section
::: titlepage
# [⁠]{#chap-Virtualization_Tuning_Optimization_Guide-Memory.html#sect-Virtualization_Tuning_Optimization_Guide-Memory-General_Tips}7.2. 内存调试须知 {.title}
:::
::: para
在虚拟环境中优化内存性能，需考虑以下几点：
:::
::: {.itemizedlist xmlns:d="http://docbook.org/ns/docbook"}
-   ::: para
    请勿为客机分配超过所需的其它资源。
    :::
-   ::: para
    在可能的情况下，如果 NUMA
    节点中有足够的资源，将一台客机分配到一个单一 NUMA 节点。关于 NUMA
    使用的更多信息，请参照[第 8 章
    *NUMA*](#chap-Virtualization_Tuning_Optimization_Guide-NUMA.html){.xref}。
    :::
:::
:::
::: section
::: titlepage
# [⁠]{#chap-Virtualization_Tuning_Optimization_Guide-Memory.html#sect-Virtualization_Tuning_Optimization_Guide-Memory-Tuning}7.3. 虚拟机内存调试 {.title}
:::
::: section
::: titlepage
## [⁠]{#chap-Virtualization_Tuning_Optimization_Guide-Memory.html#sect-Virtualization_Tuning_Optimization_Guide-Memory-Monitoring}7.3.1. 内存监控工具 {.title}
:::
::: para
在裸机环境中使用的监控内存的工具也可以在虚拟机中使用。以下工具可以被用来监控内存的使用情况，以及诊断与内存相关的问题：
::: {.itemizedlist xmlns:d="http://docbook.org/ns/docbook"}
-   ::: para
    `top`{.command}
    :::
-   ::: para
    `vmstat`{.command}
    :::
-   ::: para
    `numastat`{.command}
    :::
-   ::: para
    `/proc/`{.command}
    :::
:::
::: {.note xmlns:d="http://docbook.org/ns/docbook"}
::: admonition_header
**注意**
:::
::: admonition
::: para
关于使用以上性能工具的详细信息，请参照《*Red Hat Enterprise Linux 7
性能调节指南* 》和上述命令的手册页。
:::
:::
:::
:::
:::
::: section
::: titlepage
## [⁠]{#chap-Virtualization_Tuning_Optimization_Guide-Memory.html#sect-Virtualization_Tuning_Optimization_Guide-Memory-Tuning_memtune}7.3.2. 使用 virsh 调试内存 {.title}
:::
::: para
客机 XML 配置中可选的 ``{.code}
元素允许管理员手动配置客户虚拟机内存设置。如果省略
``{.code}，内存设置将被默认应用。
:::
::: para
通过 `virsh memtune`{.command} 命令显示或设置虚拟机 ``{.code}
元素中的内存参数，依据环境替换属性值：
:::
``` screen
# virsh memtune virtual_machine --parameter size
```
::: para
可选的参数包括：
:::
::: variablelist
[*`hard_limit`*]{.term}
:   ::: para
    虚拟机可以使用的最大内存，单位是千字节（1,024 字节块）
    :::
    ::: {.warning xmlns:d="http://docbook.org/ns/docbook"}
    ::: admonition_header
    **警告**
    :::
    ::: admonition
    ::: para
    该限制设置过低可导致虚拟机被内核终止。
    :::
    :::
    :::
[*`soft_limit`*]{.term}
:   ::: para
    发生内存争用时，内存限制使用的单位是千字节（1,024字节块）。
    :::
[*`swap_hard_limit`*]{.term}
:   ::: para
    虚拟机加上转化可使用的最大内存，单位是千字节（1,024
    字节块）。*`swap_hard_limit`* 参数值必须大于 *`hard_limit`* 参数值。
    :::
[*`min_guarantee`*]{.term}
:   ::: para
    保证分配给虚拟机可以使用的最小内存，单位是千字节（1,024 字节块）。
    :::
:::
::: {.note xmlns:d="http://docbook.org/ns/docbook"}
::: admonition_header
**注意**
:::
::: admonition
::: para
使用 `virsh memtune`{.command} 命令的更多信息请参照
`# virsh help memtune`{.command}。
:::
:::
:::
::: para
可选的 ``{.code}
元素可能包含若干影响主页存储备份虚拟内存页面的元素。
:::
::: para
设置 *`locked`* 会阻止主机交换属于客机的内存页面。向客机 XML
添加以下命令，锁定主机内存中的虚拟内存页面：
:::
``` screen
```
::: {.important xmlns:d="http://docbook.org/ns/docbook"}
::: admonition_header
**重要**
:::
::: admonition
::: para
设置 *`locked`* 时，必须在 ``{.code} 元素中设置
*`hard_limit`*，使其达到客机配置的最大内存，以及该进程本身所消耗的内存。
:::
:::
:::
::: para
设置 *`nosharepages`* 阻止主机合并在客机间使用的相同内存。通过向客机的
XML 添加以下命令，指示虚拟机监控程序禁用与客机的共享页面：
:::
``` screen
```
:::
::: section
::: titlepage
## [⁠]{#chap-Virtualization_Tuning_Optimization_Guide-Memory.html#sect-Virtualization_Tuning_Optimization_Guide-Memory-Huge_Pages}7.3.3. 大页面和透明大页面（THP） {.title}
:::
::: para
x86 CPU 通常会在 4kB 页面中处理内存，但可以使用更大的 2MB 或 1GB
页面，即 *huge page*（大页面）。大页面内存可以支持 KVM
客机部署，通过增加点击转换后备缓冲器（TLB）的 CPU 缓存以改善性能。
:::
::: para
kernel 功能将在 Red Hat Enterprise Linux 7
中默认启用，大页面可以大幅提高性能，尤其是对于较大的内存和内存密集型的负载。Red
Hat Enterprise Linux 7
可以通过使用大页面增加页面大小，以便有效管理大量内存。
:::
::: {.procedure xmlns:d="http://docbook.org/ns/docbook"}
[⁠]{#chap-Virtualization_Tuning_Optimization_Guide-Memory.html#idm140616984332256}
**过程 7.1. 为客机启用 1GB 大页面**
1.  ::: para
    Red Hat Enterprise Linux 7.1 系统支持 2MB 或 1GB
    大页面，分配将在启动或运行时进行。页面大小均可以在运行时被释放。例如，在启动时分配
    4 个 1GB 的大页面和 1,024 个 2MB 的大页面，请使用以下命令行：
    :::
    ``` screen
    'default_hugepagesz=1G hugepagesz=1G hugepages=4 hugepagesz=2M hugepages=1024'
    ```
    ::: para
    此外，大页面还可以在运行时分配。运行时分配允许系统管理员选择从何种
    NUMA
    模式分配页面。然而由于内存碎片的存在，运行时的页面分配会比启动时分配更容易造成分配失败。以下运行时的分配示例显示了从
    `node1`{.systemitem} 分配 4 个 1GB 的大页面以及从
    `node3`{.systemitem} 分配 1,024 个 2MB 的大页面：
    :::
    ``` screen
    # echo 4 > /sys/devices/system/node/node1/hugepages/hugepages-1048576kB/nr_hugepages
    # echo 1024 > /sys/devices/system/node/node3/hugepages/hugepages-2048kB/nr_hugepages
    ```
2.  ::: para
    接下来，将 2MB 和 1GB 的大页面挂载到主机：
    :::
    ``` screen
    # mkdir /dev/hugepages1G
    # mount -t hugetlbfs -o pagesize=1G none /dev/hugepages1G
    # mkdir /dev/hugepages2M
    # mount -t hugetlbfs -o pagesize=2M none /dev/hugepages2M
    ```
3.  ::: para
    重启 libvirtd，使 1GB 大页面可以在客机上启用：
    :::
    ``` screen
    # systemctl restart libvirtd
    ```
:::
::: para
1GB 大页面现在对客机不可用。配置 NUMA 节点特定大页面，请参照[第 8.4.9 节
"向多个客机 NUMA
节点指定主机大页面"](#chap-Virtualization_Tuning_Optimization_Guide-NUMA.html#sect-Virtualization_Tuning_Optimization_Guide-NUMA-Guest_NUMA_multinode-hugepages){.xref}。
:::
::: section
::: titlepage
### [⁠]{#chap-Virtualization_Tuning_Optimization_Guide-Memory.html#idm140616986144752}7.3.3.1. 透明大页面配置 {.title}
:::
::: para
透明大页面（THP，transparent huge
page）将为性能自动优化系统设置。通过允许所有的空余内存被用作缓存以提高性能。
:::
::: para
一旦 `/sys/kernel/mm/transparent_hugepage/enabled`{.computeroutput}
被设置为
*`always`*，透明大页面将被默认使用。运行以下命令禁用透明大页面：
:::
``` screen
# echo never > /sys/kernel/mm/transparent_hugepage/enabled
```
::: para
透明大页面支持不能阻止 hugetlbfs 的使用。但在 hugetlbfs 未使用时，KVM
将使用透明大页面来替代常规的 4KB 页面大小。
:::