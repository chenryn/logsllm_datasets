(TSetup, TCom, TVfy, TForceOp) is CCA secure with gap 𝜖  ˜T and all 𝜆 ∈ N, all PRAM algorithms
A = (A1, A2) where A2’s parallel running time is bounded by T𝜖,
it holds that
Pr
𝑏 = 𝑏′
∧ 𝑐 ∉ Q
crs ← TSetup(1𝜆, 1T)
(𝑚0, 𝑚1) ← AO
1 (crs)
𝑏 ← {0, 1}
(𝑐, 𝜋) ← TCom(crs, 𝑚𝑏)
𝑏′ ← AO
2 (𝑐, 𝜋)
(cid:12)(cid:12)(cid:12)(cid:12)(cid:12)(cid:12)(cid:12)(cid:12)(cid:12)(cid:12)
 ≤ 1/2 + negl(𝜆)
where O is an oracle to which the adversary can query with (𝑐, 𝜋) and
if TVfy(crs, 𝑐, 𝜋) = 1, the oracle uses TForceOp(crs, 𝑐) and returns
the output. Here Q denotes the set of commitments queried by A to
the oracle O.
Homomorphic Evaluation. We define an additional homomor-
phic evaluation algorithm that is going to be useful for our main
scheme.
Definition 5.5 (Homomorphic Evluation). A homomorphic
evaluation algorithm TEval for a function family F is defined as
follows.
TEval(crs, 𝑓 , (𝑐1, . . . , 𝑐𝑛)): On input a common reference string crs, a
function 𝑓 ∈ F , and a set of commitments (𝑐1, . . . , 𝑐𝑛), the evaluation
algorithm returns a new commitment ˜𝑐.
We only require the following notion of correctness. For all
𝜆 ∈ N, all time parameters T ∈ N, all functions 𝑓 ∈ F , and all
messages (𝑚1, . . . , 𝑚𝑛) it holds that
Pr[TForceOp(crs, 𝑐∗) = 𝑓 (𝑚1, . . . , 𝑚𝑛)] = 1
where 𝑐∗ := TEval(crs, 𝑓 , (𝑐1, . . . , 𝑐𝑛)), crs ← TSetup(1𝜆, 1T) and
(𝑐𝑖, 𝜋𝑖) ← TCom(crs, 𝑚𝑖).
Session 10C: Foundations CCS ’21, November 15–19, 2021, Virtual Event, Republic of Korea26705.2 Construction
In the following we present our efficient scheme for CCA timed
commitments. We assume the existence of a homomorphic time-
lock puzzle (PSetup, PGen, PEval, Solve) over Z𝑞 from class groups
(cf. Section 4) defined over some DDH-hard group G (cf. Theo-
rem B.2) and a DDH-hard prime-order group (cf. Theorem B.1)
generation algorithm ( ˜G, ˜𝐺, ˜𝐾) ← GGen(1𝜆, ˜𝑞) that, on input the
security parameter 1𝜆 and a uniformly sampled prime ˜𝑞 (of 𝜆 bits)
returns a group description ˜G and two generators ( ˜𝐺, ˜𝐾). We let
𝛼 := ⌊log ˜𝑞⌋ + 1.
In addition, we assume the existence of a simulation sound NIZK
(Appendix E) proof system (Setup, Prv, Vfy) for each of the follow-
ing languages. For groups of unknown order where computing
square roots is easy, the languages we are able to prove are slightly
different from those in groups of known order. In particular, we
cannot prove the knowledge of the integer value of an exponent 𝑥,
but we can prove the knowledge of two integers 𝑘 and 𝜌 such that
𝑥 = 𝑘 · 2−𝜌 modulo the unknown order, which is sufficient for our
applications. An honest prover always sets 𝜌 := 0 when running
the proving algorithm for all of the following languages.
• Language L1 contains all statements (𝐺, 𝐾) such that 𝐾 is gen-
erated by 𝐺, defined as
(cid:110)(𝐺, 𝐾)(cid:12)(cid:12)(cid:12) ∃ 𝑘, 𝜌, s.t. 𝐾 = 𝐺𝑘·2−𝜌(cid:111) .
L1 :=
(cid:110)(𝐺0, 𝐺1, 𝐻0, 𝐻1)(cid:12)(cid:12)(cid:12)∃ 𝑠, 𝜌 s.t. 𝐻0 = 𝐺𝑠·2−𝜌
• Language L2 contains all the DDH-tuples, defined as
L2 :=
• Language L3 contains pairs of ciphertexts encrypting the same
AND 𝐻1 = 𝐺𝑠·2−𝜌
(cid:111)
0
1
bit, defined as
(cid:12)(cid:12)(cid:12)(cid:12)(cid:12)(cid:12)(cid:12)(cid:12)(cid:12)(cid:12)(cid:12)(cid:12)(cid:12)(cid:12)(cid:12)
AND
∃ {𝑠𝑖, ˜𝑠𝑖, 𝜌𝑖 }𝑖∈[𝛼] s.t.
(𝑐𝑖,0, 𝑐𝑖,1) = (𝐺𝑠𝑖·2−𝜌𝑖 , 𝐾𝑠𝑖·2−𝜌𝑖 )
( ˜𝑐𝑖,0˜,𝑐𝑖,1) = ( ˜𝐺 ˜𝑠𝑖 , ˜𝐾 ˜𝑠𝑖)
(𝑐𝑖,0, 𝑐𝑖,1) = (𝐺𝑠𝑖·2−𝜌𝑖 , 𝐾𝑠𝑖·2−𝜌𝑖
( ˜𝑐𝑖,0, ˜𝑐𝑖,1) = ( ˜𝐺 ˜𝑠𝑖 , ˜𝐾 ˜𝑠𝑖 · ˜𝐺)
AND
OR
· 𝐺)
L3 :=
(𝐺, 𝐾, ˜𝐺, ˜𝐾)
{𝑐𝑖,0, 𝑐𝑖,1}𝑖∈[𝛼]
{ ˜𝑐𝑖,0, ˜𝑐𝑖,1}𝑖∈[𝛼]
Efficiency and Instantiations. The setup algorithm internally
runs the setup of the homomorphic time-lock puzzles, the setup
of the NIZK proof system, and the group generation algorithm
for the DDH-hard prime order group of order ˜𝑞. All of the above
three algorithms are public coin algorithms (cf. Section 4 and Ap-
pendix E) and therefore our CCA timed commitment scheme also
has a public coin setup. As for the efficiency, the running time of
the setup is proportional to 𝜆 and T (the latter dependency is due
to PSetup(1𝜆, 1T)), however the size of the public parameters is a
fixed polynomial in 𝜆 and it is in particular independent of T.
The commitment algorithm runs the puzzle generation of the
homomorphic time-lock puzzle and generates ElGamal-like cipher-
texts (that encrypt single bits) both in the class group and in the
prime order group. In total, we have [𝛼] (where 𝛼 := ⌊log ˜𝑞⌋ + 1)
ciphertexts in both groups. The algorithm also computes a NIZK
proof of well-formedness (cf. Appendix E). The running time of
the commitment algorithm is bounded by a fixed polynomial in 𝜆
and in particular is independent of T. The verification algorithm
simply runs the verifier routine of the NIZK proof system. The
force open algorithm solves the time-lock puzzle that takes T se-
quential computational steps and the evaluation algorithm runs the
homomorphic evaluation algorithm of the time-lock puzzle.
Analysis. It is easy to show that the scheme satisfies perfect cor-
rectness and perfect binding. In the below theorem we formally
state the security of our CCA timed commitment construction, and
defer the proof to Appendix D.
Theorem 5.6. Let (PSetup, PGen, PEval, Solve) be a secure time-
lock puzzle over a DDH-hard group G, GGen be a DDH-hard group
generator, and (Setup, Prv, Vfy) be simulation-sound NIZK proof sys-
tem. Then the timed commitment construction from Figure 3 satisfies
CCA security and verifiability.
Highly Efficient Heuristic Variant. Provided we assume the
sigma protocol for language L2 is simulation extractable1 with
a straight-line (i.e. non-rewinding) extractor, we can omit proofs
for languages L2 and L3. Note that simulation soundness of the
sigma protocol can be proven, but extraction requires rewinding.
Our heuristic has a flavor of “knowledge”-type assumptions which
we believe is a reasonable compromise for a significant gain in
efficiency. Similar assumptions about sigma protocols are quite
common: For example, several works in threshold ECDSA signa-
tures [41, 53] propose protocols requiring UC-secure (in particular
straight-line simulation extractable) NIZK. However, favoring ef-
ficiency, their actual implementation uses non-UC-secure sigma
protocols.
6 DISTRIBUTED RANDOMNESS
GENERATION
We now show how a CCA timed commitment allows us to build an
efficient distributed randomness generation protocol.
6.1 Definition
We consider a setting where there are 𝑛 parties (𝑃1, . . . , 𝑃𝑛) want to
jointly compute a random string. The definitions that we present,
are tailored to our settings and allow us to model the following
properties of interest:
• Public-Coin Setup: The protocol assumes a one-time (public-coin)
setup that produces a short string (pp) that is made available to
all participants.
• Non-Interactive: The protocol consists of a single round of inter-
• All-but-one Corruption: The protocol is resilient against the cor-
action among users.
ruption of all but one participants.
Syntactically, the protocol consists of the following interfaces. A
setup algorithm RSetup is run at the beginning that outputs the
public parameters pp to all the parties in the system. The parties
locally run a randomness generation algorithm RGen that outputs
a randomness commitment 𝑣, which is then published on a bulletin
board or broadcast to all parties. Finally, each participant can locally
run the randomness computation algorithm RComp to generate
the final random value. The formal interfaces are given below.
1A notion where the simulator is able to simulate proofs for an adversary and is also
able to extract the witness from a proof output by the adversary [44].
Session 10C: Foundations CCS ’21, November 15–19, 2021, Virtual Event, Republic of Korea2671TSetup(1𝜆, 1T): On input the security parameter 1𝜆 and the time parameter 1T, do the following:
• Sample pp ← PSetup(1𝜆, 1T, 𝑞) and parse pp = (𝐺, 𝐻, 𝐹, ˜𝑞). Sample crs′ ← Setup(1𝜆) and ( ˜G, ˜𝐺, ˜𝐾) ← GGen(1𝜆, ˜𝑞).
• Set crs = (crs′, pp, ˜G, ˜𝐺, ˜𝐾) and output crs.
TCom(crs, 𝑚): On input a common reference string crs and a message 𝑚, do the following:
• Sample 𝑟 ← Z ˜𝑞, and compute 𝑍 ← PGen(pp, 𝑚; 𝑟), where 𝑍 = (𝑍1, 𝑍2) = (𝐺𝑟 ,𝜓𝑞(𝐻𝑟) · 𝐹𝑚).
• Sample 𝑘 ← Z ˜𝑞 and set 𝐾 := 𝐺𝑘. Let 𝛼 := ⌊log ˜𝑞⌋ + 1.
• For 𝑖 ∈ [𝛼], sample (𝑠𝑖, ˜𝑠𝑖) ← Z ˜𝑞, and let 𝑟𝑖 is the 𝑖-th bit of 𝑟. Compute
• Compute the NIZK proof 𝜋 for the statement stmt := (𝑍, 𝐺, 𝐾, ˜𝐺, ˜𝐾, {𝑐𝑖,0, 𝑐𝑖,1, ˜𝑐𝑖,0, ˜𝑐𝑖,1}𝑖∈[𝛼]) that certifies that
(𝑐𝑖,0, 𝑐𝑖,1) = (𝐺𝑠𝑖 , 𝐾𝑠𝑖 · 𝐺𝑟𝑖) and ( ˜𝑐𝑖,0, ˜𝑐𝑖,1) = ( ˜𝐺 ˜𝑠𝑖 , ˜𝐾 ˜𝑠𝑖 · ˜𝐺𝑟𝑖)
(𝐺, 𝐾) ∈ L1 and
𝐺, 𝐾,
𝑐2𝑖−1
𝑖,0 ,
𝑐2𝑖−1
𝑖,1
· 𝑍−1
1
∈ L2 and (𝐺, 𝐾, ˜𝐺, ˜𝐾, {𝑐𝑖,0, 𝑐𝑖,1, ˜𝑐𝑖,0, ˜𝑐𝑖,1}𝑖∈[𝛼]) ∈ L3
(cid:32)
𝛼
𝑖=1
𝛼
𝑖=1
(cid:33)
• Set the commitment 𝑐 = (𝑍, 𝐾, {𝑐𝑖,0, 𝑐𝑖,1, ˜𝑐𝑖,0, ˜𝑐𝑖,1}𝑖∈[𝛼]) and return (𝑐, 𝜋)
TVfy(crs, 𝑐, 𝜋): On input a common reference string crs, a commitment 𝑐 := (𝑍, 𝐾, {𝑐𝑖,0, 𝑐𝑖,1, ˜𝑐𝑖,0, ˜𝑐𝑖,1}𝑖∈[𝛼]) (where 𝛼 := ⌊log ˜𝑞⌋ + 1),
and a proof 𝜋, return 1 if and only if Vfy(crs, stmt, 𝜋) = 1.
TForceOp(crs, 𝑐): On input a common reference string crs and a commitment 𝑐, return Solve(pp, 𝑍).
TEval(crs, 𝑓 , (𝑐1, . . . , 𝑐𝑛)): On input a common reference string crs, a function 𝑓 ∈ F , and a set of commitments (𝑐1, . . . , 𝑐𝑛), return
PEval(pp, 𝑓 , (𝑍1, . . . , 𝑍𝑛)).
Figure 3: Construction of CCA Timed Commitments
Definition 6.1 (Distributed Randomness Generation). A
distributed randomness generation protocol ΠDRG consists of three
PPT algorithms (RSetup, RGen, RComp) that are defined as follows.
pp ← RSetup(1𝜆): the setup algorithm takes as input the security
parameter 1𝜆 and outputs the public parameters pp.
𝑣 ← RGen(pp): the randomness generation algorithm takes as input
the public parameters pp, and internally samples random coins to
output a randomness commitment 𝑣.
𝑟 ← RComp(pp, {𝑣1, . . . , 𝑣𝑛}): the distributed randomness
computation algorithm takes as input the public parameters pp, a set
of values 𝑣1, . . . , 𝑣𝑛 and outputs a beacon value 𝑟.
In terms of security, we want that the final random value gener-
ated by RComp is indistinguishable from a uniform random string.
More precisely, we consider a time bound T on the duration of
the randomness generation protocol and we consider an adversary
whose parallel running time is bounded by T. The adversary cor-
rupts any proper subset of the parties involved and has access to an
oracle that mimics the behaviour of honest parties: That is, the ora-
cle runs the randomness generation algorithm RGen by internally
sampling random coins and returning the output to the adversary.
The adversary outputs the randomness commitment values of all