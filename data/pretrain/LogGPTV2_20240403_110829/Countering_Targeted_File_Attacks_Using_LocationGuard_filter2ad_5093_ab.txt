4.2 Concepts and Deﬁnitions
In this section we deﬁne the concept of location keys and
its location hiding properties. We discuss the concrete
design of location key implementation and how location
keys and location guards protect a ﬁle system from tar-
geted ﬁle attacks in the subsequent sections.
Consider an overlay network of size N with a Chord-
like lookup protocol Γ. Let f 1, f 2,··· , f R denote the R
replicas of a ﬁle f. Location of a replica f i refers to the
IP-address of the node (replica holder) that stores replica
f i. A ﬁle lookup algorithm is deﬁned as a function that
accepts f i and outputs its location on the overlay net-
work. Formally we have Γ : f i → loc maps a replica f i
to its location loc on the overlay network P .
Deﬁnition 1 Location Key: A location key lk of a ﬁle
f is a relatively small amount (m-bit binary string, typi-
cally m = 128) of information that is used by a Lookup
algorithm Ψ : (f, lk) → loc to customize the transfor-
84
14th USENIX Security Symposium
USENIX Association
Figure 2: LocationGuard: Conceptual Design
Figure 1: LocationGuard: System Architecture
mation of a ﬁle into its location such that the following
three properties are satisﬁed:
4.3 Reference Model
1. Given the location key of a ﬁle f, it is easy to lo-
cate the R replicas of ﬁle f.
2. Without knowing the location key of a ﬁle f, it is
hard for an adversary to locate any of its replicas.
3. The location key lk of a ﬁle f should not be ex-
posed to an adversary when it is used to access the
ﬁle f.
Informally, location keys are keys with location hiding
property. Each ﬁle in the system is associated with a
location key that is kept secret by the users of that ﬁle.
A location key for a ﬁle f determines the locations of
its replicas in the overlay network. Note that the lookup
algorithm Ψ is publicly known; only a ﬁle’s location key
is kept secret.
Property 1 ensures that valid users of a ﬁle f can
easily access it provided they know its location key lk.
Property 2 guarantees that illegal users who do not have
the correct location key will not be able to locate the ﬁle
on the overlay network, making it harder for an adver-
sary to launch a targeted ﬁle attack. Property 3 warrants
that no information about the location key lk of a ﬁle f
is revealed to an adversary when executing the lookup
algorithm Ψ.
Having deﬁned the concept of location key, we present
a reference model for a ﬁle system that operates on Lo-
cationGuard. We use this reference model to present a
concrete design of LocationGuard’s three core compo-
nents: the location key, the routing guard and the loca-
tion inference guards.
A serverless ﬁle system may implement read/write oper-
ations by exercising access control in a number of ways.
For example, Farsite [1] uses an access control list main-
tained among a small number of directory servers through
a Byzantine fault tolerant protocol. CFS [7], a read-only
ﬁle system, implements access control by encrypting the
ﬁles and distributing the ﬁle encryption keys only to the
legal users of a ﬁle. In this section we show how a Lo-
cationGuard based ﬁle system exercises access control.
In contrast to other serverless ﬁle systems, a Loca-
tionGuard based ﬁle system does not directly authen-
ticate any user attempting to access a ﬁle.
Instead, it
uses location keys to implement a capability-based ac-
cess control mechanism, that is, any user who presents
the correct ﬁle capability (token) is permitted access to
that ﬁle. In addition to ﬁle token based access control,
LocationGuard derives the encryption key for a ﬁle from
its location key. This makes it very hard for an adversary
to read ﬁle data from compromised nodes. Furthermore,
it utilizes routing guard and location inference guards to
secure the locations of ﬁles being accessed on the over-
lay network. Our access control policy is simple: if you
can name a ﬁle, then you can access it. However, we do
not use a ﬁle name directly; instead, we use a pseudo-
ﬁlename (128-bit binary string) generated from a ﬁle’s
name and its location key (see Section 5 for detail). The
responsibility of access control is divided among the ﬁle
owner, the legal ﬁle users, and the ﬁle replica holders
and is managed in a decentralized manner.
File Owner. Given a ﬁle f, its owner u is responsible for
securely distributing f’s location key lk (only) to those
users who are authorized to access the ﬁle f.
USENIX Association
14th USENIX Security Symposium
85
Legal User. A user u who has obtained the valid loca-
tion key of ﬁle f is called a legal user of f. Legal users
are authorized to access any replica of ﬁle f. Given a
ﬁle f’s location key lk, a legal user u can generate the
replica location token rlti for its ith replica. Note that
we use rlti as both the pseudo-ﬁlename and the capa-
bility of f i. The user u now uses the lookup algorithm
Ψ to obtain the IP-address of node r = Ψ(rlti) (pseudo-
ﬁlename rlti). User u gains access to replica f i by pre-
senting the token rlti to node r (capability rlti).
Non-malicious Replica Holder. Assume that a node r
is responsible for storing replica f i. Internally, node r
stores this ﬁle content under a ﬁle name rlti. Note that
node r does not need to know the actual ﬁle name (f)
of a locally stored ﬁle rlti. Also, by design, given the
internal ﬁle name rlti, node r cannot guess its actual
ﬁle name (see Section 5). When a node r receives a
read/write request on a ﬁle rlti it checks if a ﬁle named
rlti is present locally. If so, it directly performs the re-
quested operation on the local ﬁle rlti. Access control
follows from the fact that it is very hard for an adversary
to guess correct ﬁle tokens.
Malicious Replica Holder. Let us consider the case
where the node r that stores a replica f i is malicious.
Note that node r’s response to a ﬁle read/write request
can be undeﬁned. Note that we have assumed that the
replicas stored at malicious nodes are always under at-
tack (recall that up to cr − 1 out of R ﬁle replicas could
be unavailable or corrupted). Hence, the fact that a mali-
cious replica holder incorrectly implements ﬁle read/write
operation or that the adversary is aware of the tokens
of those ﬁle replicas stored at malicious nodes does not
harm the system. Also, by design, an adversary who
knows one token rlti for replica f i would not be able to
guess the ﬁle name f or its location key lk or the tokens
for others replicas of ﬁle f (see Section 5).
Adversary. An adversary cannot access any replica of
ﬁle f stored at a good node simply because it cannot
guess the token rlti without knowing its location key.
However, when a good node is compromised an adver-
sary would be able to directly obtain the tokens for all
ﬁles stored at that node. In general, an adversary could
compile a list of tokens as it compromises good nodes,
and corrupt the ﬁle replicas corresponding to these to-
kens at any later point in time. Eventually, the adversary
would succeed in corrupting cr or more replicas of a ﬁle
f without knowing its location key. LocationGuard ad-
dresses such attacks using location rekeying technique
discussed in Section 7.3.
In the subsequent sections, we show how to generate
a replica location token rlti (1 ≤ i ≤ R) from a ﬁle
f and its location key (Section 5), and how the lookup
algorithm Ψ performs a lookup on a pseudo-ﬁlename
rlti without revealing the capability rlti to malicious
nodes in the overlay network (Section 6). It is impor-
tant to note that the ability of guarding the lookup from
attacks like eavesdropping is critical to the ultimate goal
of ﬁle location hiding scheme, since a lookup operation
using a lookup protocol (such as Chord) on identiﬁer
rlti typically proceeds in plain-text through a sequence
of nodes on the overlay network. Hence, an adversary
may collect ﬁle tokens by simply snifﬁng lookup queries
over the overlay network. The adversary could use these
stolen ﬁle tokens to perform write operations on the cor-
responding ﬁle replicas, and thus corrupt them, without
the knowledge of their location keys.
5 Location Keys
The ﬁrst and most simplistic component of LocationGuard
is the concept of location keys. The design of location
key needs to address the following two questions: (1)
How to choose a location key? (2) How to use a location
key to generate a replica location token − the capability
to access a ﬁle replica?
The ﬁrst step in designing location keys is to deter-
mining the type of string used as the identiﬁer of a lo-
cation key. Let user u be the owner of a ﬁle f. User u
should choose a long random bit string (128-bits) lk as
the location key for ﬁle f. The location key lk should
be hard to guess. For example, the key lk should not be
semantically attached to or derived from the ﬁle name
(f) or the owner name (u).
The second step is to ﬁnd a pseudo-random function
to derive the replica location tokens rlti (1 ≤ i ≤ R)
from the ﬁlename f and its location key lk. The pseudo-
ﬁlename rlti is used as a ﬁle replica identiﬁer to locate
the ith replica of ﬁle f on the overlay network. Let
Elk(x) denote a keyed pseudo-random function with in-
put x and a secret key lk and k denotes string concatena-
tion. We derive the location token rlti = Elk(fn k i) (re-
call that fn denotes the name of ﬁle f). Given a replica’s
identiﬁer rlti, one can use the lookup protocol Ψ to lo-
cate it on the overlay network. The function E should
satisfy the following conditions:
86
14th USENIX Security Symposium
USENIX Association
1a) Given (fn k i) and lk it is easy to compute Elk(fn k
i).
2a) Given (fn k i) it is hard to guess Elk(fn k i)
without knowing lk.
2b) Given Elk(fn k i) it is hard to guess the ﬁle name
fn.
2c) Given Elk(fn k i) and the ﬁle name fn it is hard
to guess lk.
Condition 1a) ensures that it is very easy for a valid user
to locate a ﬁle f as long as it is aware of the ﬁle’s loca-
tion key lk. Condition 2a), states that it should be very
hard for an adversary to guess the location of a target
ﬁle f without knowing its location key. Condition 2b)
ensures that even if an adversary obtains the identiﬁer
rlti of replica f i, he/she cannot deduce the ﬁle name f.
Finally, Condition 2c) requires that even if an adversary
obtains the identiﬁers of one or more replicas of ﬁle f,
he/she would not be able to derive the location key lk
from them. Hence, the adversary still has no clue about
the remaining replicas of the ﬁle f (by Condition 2a).
Conditions 2b) and 2c) play an important role in ensur-
ing good location hiding property. This is because for
any given ﬁle f, some of the replicas of ﬁle f could be
stored at malicious nodes. Thus an adversary could be
aware of some of the replica identiﬁers. Finally, observe
that Condition 1a) and Conditions {2a), 2b), 2c)} map
to Property 1 and Property 2 in Deﬁnition 1 (in Section
4.2) respectively.
There are a number of cryptographic tools that sat-
isﬁes our requirements speciﬁed in Conditions 1a), 2a),
2b) and 2c). Some possible candidates for the function
E are (i) a keyed-hash function like HMAC-MD5 [14],
(ii) a symmetric key encryption algorithm like DES [8]
or AES [16], and (iii) a PKI based encryption algorithm
like RSA [21]. We chose to use a keyed-hash function
like HMAC-MD5 because it can be computed very ef-
ﬁciently. HMAC-MD5 computation is about 40 times
faster than AES encryption and about 1000 times faster
than RSA encryption using the standard OpenSSL li-
brary [17]. In the remaining part of this paper, we use
khash to denote a keyed-hash function that is used to
derive a ﬁle’s replica location tokens from its name and
its secret location key.
6 Routing guard
The second and fundamental component of LocationGuard
is the routing guard. The design of routing guard aims at
securing the lookup of ﬁle f such that it will be very hard
for an adversary to obtain the replica location tokens by
eavesdropping on the overlay network. Concretely, let
rlti (1 ≤ i ≤ R) denote a replica location token derived
from the ﬁle name f, the replica number i, and f‘s loca-
tion key identiﬁer lk. We need to secure the lookup algo-
rithm Ψ(rlti) such that the lookup on pseudo-ﬁlename
rlti does not reveal the capability rlti to other nodes on
the overlay network. Note that a ﬁle’s capability rlti
does not reveal the ﬁle’s name; but it allows an adver-
sary to write on the ﬁle and thus corrupt it (see reference
ﬁle system in Section 4.3).
There are two possible approaches to implement a
secure lookup algorithm: (1) centralized approach and
(2) decentralized approach. In the centralized approach,
one could use a trusted location server [12] to return the
location of any ﬁle on the overlay network. However,
such a location server would become a viable target for
DoS and host compromise attacks.
In this section, we present a decentralized secure lookup
protocol that is built on top of the Chord protocol. Note
that a naive Chord-like lookup protocol Γ(rlti) cannot
be directly used because it reveals the token rlti to other
nodes on the overlay network.
6.1 Overview
The fundamental idea behind the routing guard is as fol-
lows. Given a ﬁle f’s location key lk and replica num-
ber i, we want to ﬁnd a safe region in the identiﬁer space
where we can obtain a huge collection of obfuscated to-
kens, denoted by {OT K i}, such that, with high proba-
bility, Γ(otki) = Γ(rlti), ∀otki ∈ OT K i. We call otki ∈
OT K i an obfuscated identiﬁer of the token rlti. Each
time a user u wishes to lookup a token rlti, it performs
a lookup on some randomly chosen token otki from the
obfuscated identiﬁer set OT K i. Routing guard ensures
that even if an adversary were to observe obfuscated
identiﬁer from the set OT K i for one full year, it would
be highly infeasible for the adversary to guess the token
rlti.
We now describe the concrete implementation of the
routing guard. For the sake of simplicity, we assume a
USENIX Association
14th USENIX Security Symposium
87
unit circle for the Chord’s identiﬁer space; that is, node
identiﬁers and ﬁle identiﬁers are real values from 0 to 1
that are arranged on the Chord ring in the anti-clockwise
direction. Let ID(r) denote the identiﬁer of node r. If r
is the destination node of a lookup on ﬁle identiﬁer rlti,
i.e., r = Γ(rlti), then r is the node that immediately suc-
ceeds rlti in the anti-clockwise direction on the Chord
ring. Formally, r = Γ(rlti) if ID(r) ≥ rlti and there
exists no other nodes, say v, on the Chord ring such that
ID(r) > ID(v) ≥ rlti.
We ﬁrst introduce the concept of safe obfuscation to
guide us in ﬁnding an obfuscated identiﬁer set OT K i
for a given replica location token rlti. We say that an
obfuscated identiﬁer otki is a safe obfuscation of iden-
tiﬁer rlti if and only if a lookup on both rlti and otki
result in the same physical node r. For example, in Fig-
is a safe obfuscation of identiﬁer
ure 3, identiﬁer otki
1
rlti (Γ(rlti) = Γ(otki
1) = r), while identiﬁer otki
is un-
2) = r0 6= r).
safe (Γ(otki
2
We deﬁne the set OT K i as a set of all identiﬁers in
the range (rlti − srg, rlti), where srg denotes a safe
obfuscation range (0 ≤ srg  ID(r0), where r0 is
the immediate predecessor of node r on the Chord ring.
Thus, we have rand  x) = e−x∗N , where N denotes the number of nodes on
the overlay network and x denotes any value satisfying
0 ≤ x < 1. Informally, the theorem states that the prob-
ability that the predecessor node r0 is further away from
the identiﬁer rlti decreases exponentially with the dis-
tance. For a detailed proof please refer to our tech-report