[INFO] 3.20 - Verify that TLS CA certificate file permissions are set to 444
[INFO]      * No TLS CA certificate found
[INFO] 3.21 - Verify that Docker server certificate file ownership is set to root:root
[INFO]      * No TLS Server certificate found
[INFO] 3.22 - Verify that Docker server certificate file permissions are set to 444
[INFO]      * No TLS Server certificate found
[INFO] 3.23 - Verify that Docker server key file ownership is set to root:root
[INFO]      * No TLS Key found
[INFO] 3.24 - Verify that Docker server key file permissions are set to 400
[INFO]      * No TLS Key found
[PASS] 3.25 - Verify that Docker socket file ownership is set to root:docker
[PASS] 3.26 - Verify that Docker socket file permissions are set to 660
```
### 运行工具–容器映像和构建文件
让我们看一下容器映像和构建文件运行时的输出，如以下命令所示:
```
[INFO] 4 - Container Images and Build Files
[INFO] 4.1  - Create a user for the container
[INFO]      * No containers running
```
### 运行工具-容器运行时
让我们来看看容器运行时的输出，如下所示:
```
[INFO] 5  - Container Runtime
[INFO]      * No containers running, skipping Section 5
```
### 运行工具–Docker 安全操作
让我们来看看 Docker 安全操作运行时的输出，如以下命令所示:
```
[INFO] 6  - Docker Security Operations
[INFO] 6.5 - Use a centralized and remote log collection service
[INFO]      * No containers running
[INFO] 6.6 - Avoid image sprawl
[INFO]      * There are currently: 23 images
[WARN] 6.7 - Avoid container sprawl
[WARN]      * There are currently a total of 51 containers, with only 1 of them currently running
```
哇哦！很多的产量和吨数要消化；但是这一切意味着什么呢？让我们来看看并分解每个部分。
## 了解输出
我们将看到三种类型的输出，如下所示:
*   `[PASS]`:这些物品结实，好走。它们不需要任何关注，但它们很好读，让你内心感到温暖。这些越多越好！
*   `[INFO]`:如果您认为这些项目与您的设置和安全需求相关，您应该检查并修复这些项目。
*   `[WARN]`:这些都是需要固定的项目。这些是我们不想看到的东西。
请记住，扫描中涵盖了六个主要主题，如下所示:
*   主机配置
*   Docker 守护程序配置
*   Docker 守护程序配置文件
*   容器映像和构建文件
*   容器运行时
*   Docker 安全行动
让我们看看我们在扫描的每个部分看到了什么。这些扫描结果来自默认的 Ubuntu Docker 主机，此时不会对系统进行任何调整。我们想再次关注每个部分的`[WARN]`项。当你运行你的程序时，可能会出现其他的警告，但是这些将是出现最多的，如果不是一开始对每个人都是这样的话。
### 了解输出-主机配置
让我们看看主机配置运行时输出的以下输出:
```
[WARN] 1.1 - Create a separate partition for containers
```
对于这一个，你会想要映射`/var/lib/docker`到一个单独的分区。
```
[WARN] 1.8 - Failed to inspect: auditctl command not found.
[WARN] 1.9 - Failed to inspect: auditctl command not found.
[WARN] 1.10 - Failed to inspect: auditctl command not found.
[WARN] 1.13 - Failed to inspect: auditctl command not found.
[WARN] 1.18 - Failed to inspect: auditctl command not found.
```
### 了解输出–Docker 守护程序配置
让我们看看 Docker 守护程序配置输出的以下输出:
```
[WARN] 2.2 - Restrict network traffic between containers
```
默认情况下，运行在同一 Docker 主机上的所有容器都可以访问彼此的网络流量。为了防止这种情况，您需要在 Docker 守护程序的启动过程中添加`--icc=false`标志:
```
[WARN] 2.7 - Do not use the aufs storage driver
```
同样，您可以在 Docker 守护程序启动过程中添加一个标志，阻止 Docker 使用`aufs`存储驱动程序。在 Docker 守护程序启动时使用`-s `，您可以告诉 Docker 不要使用`aufs`进行存储。建议您为正在使用的 Docker 主机上的操作系统使用最佳存储驱动程序。
### 了解输出–Docker 守护程序配置文件
如果您正在使用股票 Docker 守护程序，您应该不会看到任何警告。如果您以某种方式定制了代码，您可能会在这里得到一些警告。这是一个你应该希望永远看不到任何警告的领域。
### 理解输出–容器映像和构建文件
让我们看一下容器映像和构建文件运行时输出的以下输出:
```
[WARN] 4.1 - Create a user for the container
[WARN] * Running as root: suspicious_mccarthy
```
这表示`suspicious_mccarthy`容器作为根用户运行，建议创建另一个用户来运行您的容器。
### 理解输出–容器运行时
让我们看看容器运行时输出的输出，如下所示:
```
[WARN] 5.1: - Verify AppArmor Profile, if applicable
[WARN] * No AppArmorProfile Found: suspicious_mccarthy
```
这说明`suspicious_mccarthy`容器没有`AppArmorProfile`，这是 Ubuntu 在这种情况下提供的额外安全性。
```
[WARN] 5.3 - Verify that containers are running only a single main process
[WARN] * Too many processes running: suspicious_mccarthy
```
这个错误非常简单。您需要确保每个容器只运行一个进程。如果您正在运行多个进程，您将希望将它们分散到多个容器中，并使用容器链接，如以下命令所示:
```
[WARN] 5.4 - Restrict Linux Kernel Capabilities within containers
[WARN] * Capabilities added: CapAdd=[audit_control] to suspicious_mccarthy
```
这表示`audit_control`功能已经添加到该运行容器中。您可以使用`docker run`命令中的`--cap-drop={}`从容器中移除附加功能，如下所示:
```
[WARN] 5.6 - Do not mount sensitive host system directories on containers
[WARN] * Sensitive directory /etc mounted in: suspicious_mccarthy
[WARN] * Sensitive directory /lib mounted in: suspicious_mccarthy
[WARN] 5.7 - Do not run ssh within containers
[WARN] * Container running sshd: suspicious_mccarthy
```
这是直奔主题。不需要在容器中运行 SSH。您可以使用 Docker 提供的工具对容器做任何您想做的事情。确保 SSH 没有在任何容器中运行。您可以使用`docker exec`命令对您的容器执行项目(请参见此处的更多信息:[https://docs.docker.com/engine/reference/commandline/exec/](https://docs.docker.com/engine/reference/commandline/exec/)，如以下命令所示:
```
[WARN] 5.10 - Do not use host network mode on container
[WARN] * Container running with networking mode 'host':
suspicious_mccarthy
```
这个的问题是，当容器启动时，`--net=host`开关被传递。不建议使用此选项，因为它允许容器修改网络配置，打开低端口号，以及访问 Docker 主机上的网络服务，如下所示:
```
[WARN] 5.11 - Limit memory usage for the container
[WARN] * Container running without memory restrictions:
suspicious_mccarthy
```
默认情况下，容器没有内存限制。如果您在每个 Docker 主机上运行多个容器，这可能会很危险。您可以在发出`docker run`命令时使用`-m`开关，将容器限制在一定的内存量内。值是以兆字节(即 512 兆字节或 1024 兆字节)为单位设置的，如下命令所示:
```
[WARN] 5.12 - Set container CPU priority appropriately
[WARN] * The container running without CPU restrictions:
suspicious_mccarthy
```
像内存选项一样，您也可以基于每个容器设置 CPU 优先级。这可以在发出`docker run`命令时使用`--cpu-`共享开关来完成。中央处理器份额基于 1，024 这个数字。因此，一半是 512，25%是 256。使用 1，024 作为基数来确定 CPU 份额，如下所示:
```
[WARN] 5.13 - Mount container's root filesystem as readonly
[WARN] * Container running with root FS mounted R/W:
suspicious_mccarthy
```
您真的希望将您的容器用作不可变的环境，这意味着它们不会在其中写入任何数据。数据应该写入卷。同样，您可以使用`--read-` only 开关，如下所示:
```
[WARN] 5.16 - Do not share the host's process namespace
[WARN] * Host PID namespace being shared with: suspicious_mccarthy
```
当您使用`--pid=host`开关时，会出现此错误。不建议使用此开关，因为它会破坏容器和 Docker 主机之间的进程隔离。
### 了解输出–Docker 安全操作
同样，另一个你应该希望永远不会看到的部分是警告，如果你正在使用股票 Docker。大多数情况下，在这里你会看到信息，并应审查这一点，以确保这一切都是合法的。
# 总结
在本章中，我们看了 Docker 的 CIS 指南。本指南将帮助您设置 Docker 环境的多个方面。最后，我们看了安全的 Docker 法官席。我们研究了如何启动和运行它，并通过一个例子展示了一旦运行后输出会是什么样子。然后，我们看一看输出，看看这意味着什么。请记住应用涵盖的六个项目:主机配置、Docker 守护程序配置、Docker 守护程序配置文件、容器映像和构建文件、容器运行时和 Docker 安全操作。
在下一章中，我们将了解如何监控和报告您遇到的任何 Docker 安全问题。这将帮助您了解在哪里可以找到与您现有环境相关的任何安全信息。如果您发现自己遇到了与安全相关的问题，有一些报告这些问题的最佳实践，让 Docker 有时间修复这些问题，然后让公共社区有时间了解该问题，这将使黑客能够利用这些漏洞。