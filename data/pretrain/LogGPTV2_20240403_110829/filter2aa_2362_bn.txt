# Index of Key Concepts and Terms

## V-Model
- **Pages:** 78–79

## Quality Assurance (QA)
- **General Overview:** 1, 101–103
- **Quality Assurance and Security:** 71–73
- **Security Defects:** 73
- **Security in Software Development:** 72
- **QA Leader:** 86
- **QA Processes (QAP):** 85
- **QA Technical Leader:** 86

## Race Conditions
- **Pages:** 53

## Random Fuzzers
- **Pages:** 140–141, 247
- **Random Fuzzing:** 138–140

## Reactive Security
- **Pages:** 10–12

## Real Bugs
- **Pages:** 244

## Regression Testing
- **Pages:** 95–96

## Reliability
- **Pages:** 116

## Remediation
- **Cost of:** 115–116

## Remote Attack Vectors
- **Digital Media:** 8
- **Network Protocols:** 8
- **Web Applications:** 8
- **Wireless Infrastructures:** 8–9

## Remote File Inclusion (RFI)
- **Pages:** 50

## Remote Monitoring
- **Pages:** 175–176

## Reporting
- **General Overview:** 223
- **Reporting Engine:** 29

## Research and Development (R&D) Phase
- **Pages:** 3–4

## Retrospective Testing
- **Pages:** 224–225

## Return on Security Investment (ROSI)
- **Pages:** 110, 117

## Reverse Engineering (RE or RE’ing)
- **Pages:** 55–57

## Risk-Based Testing
- **See:** Threat Analysis and Risk-Based Testing

## Robustness Testing
- **Pages:** 17–19, 88, 94–95, 129–130

## Rontti, Tero
- **Pages:** 131, 132

## Rough Auditing Tool for Security (RATS)
- **Pages:** 58–59, 131

## Runtime Analysis Engine
- **Pages:** 29

## Safe Structured Exception Handling (SafeSEH)
- **Pages:** 67

## SAGE (Scalable, Automated, Guided Execution)
- **Pages:** 199–201

## SCADA
- **Pages:** 165, 265–267

## Scripting Framework
- **Pages:** 250

## Second-Generation Bugs
- **Pages:** 28

## Secure Bit
- **Pages:** 65

## Security Assurance Engineer
- **Pages:** 38

## Security Compromises
- **Cost of:** 116–117

## Security Goals
- **Availability:** 35, 103
- **Confidentiality:** 35, 103
- **Integrity:** 35, 103

## Security Mistakes
- **Pages:** 9–10

## Security Requirements
- **Availability:** 13
- **Confidentiality:** 13
- **Integrity:** 13

## Security Researcher
- **Pages:** 38, 40–41

## Security Scanners
- **Pages:** 12, 36–38, 90, 123

## Sending Inputs to the Target
- **Pages:** 222–223

## Server Software
- **Pages:** 249

## Service Provider Fuzzing
- **Pages:** 255–259

## Session Crossover
- **Pages:** 207–208

## Session Hijacking
- **Pages:** 54

## Session Mutation
- **Pages:** 208–209

## Sessions
- **Pages:** 204–206

## Sharefuzz
- **Pages:** 162

## Simulated Vulnerability Discovery
- **Pages:** 225

## Simulation-Based Fuzzers
- **Pages:** 27

## Single-Use Fuzzers
- **Pages:** 145–146

## SIP Method
- **Pages:** 122

## Software DEP
- **Pages:** 67

## Software Development Life Cycle (SDLC)
- **Pages:** 11, 25, 71, 78, 99

## Software Interfaces
- **Data Structures (e.g., Files):** 84
- **Network Protocols:** 84
- **System APIs (e.g., System Calls and Device Drivers):** 84
- **User Interface (e.g., GUI, Command Line):** 84

## Software Overflow Protection
- **GS:** 66–67
- **PAX and ExecShield:** 68
- **SafeSEH:** 67
- **Software DEP:** 67
- **StackGuard:** 68

## Software Product Life Cycle
- **Post-Deployment (Maintenance):** 198
- **Pre-Deployment (Development):** 107

## Software Quality
- **Code Auditing:** 21
- **Cost-Benefit of Quality:** 14–16
- **Functional Testing:** 21
- **Structural Testing:** 19–21
- **Target of Test:** 16–17
- **Testing Purposes:** 17–19

## Software Security
- **Attack Surfaces and Attack Vectors:** 6–9
- **Disclosure Processes:** 5–6
- **Proactive Security:** 10–12
- **Reasons Behind Security Mistakes:** 9–10
- **Security Incident:** 4–5
- **Security Requirements:** 12–13

## Software Security Testers
- **Pages:** 41

## Software Testers
- **Pages:** 2

## Software Testing Techniques (Beizer)
- **Pages:** 71

## Software Vulnerabilities
- **Pages:** 5

## Software Vulnerability Analysis (VA)
- **Basic Bug Categories:** 42–54
- **Bug Hunting Techniques:** 55–59
- **Defenses:** 63–68
- **Fuzzing:** 59–63
- **People Conducting:** 38–42
- **Purpose of:** 36–38
- **Target Software:** 42

## Sommerville, Ian
- **Pages:** 79

## Source Code Auditing Tool
- **Pages:** 4, 57–59

## Specification
- **Pages:** 19–20, 25

## Specification Coverage
- **Pages:** 88

## SPIKE
- **Pages:** 139, 146

## StackGuard
- **Pages:** 68

## Stack Overflows
- **Pages:** 43, 44

## State Dependency Errors
- **Pages:** 93

## Static and Random Template-Based Fuzzer
- **Pages:** 27

## Stress Testing
- **Pages:** 90

## Structural Testing
- **Pages:** 19–21

## Structural Versus Functional Testing
- **Pages:** 80

## Structured Exception Handler (SEH)
- **Pages:** 67

## Structured Query Language (SQL)
- **Injections:** 50–51

## Subcontrolled Security Assessments
- **Pages:** 108, 109

## Sulley
- **Pages:** 139–140, 141, 142, 159–161

## Support Response Times
- **Pages:** 117

## Sutton, Michael
- **Pages:** 150, 159, 179

## Symbolic Execution
- **Pages:** 199–201

## Syntax Testing
- **Pages:** 22, 91–93
- **Types of Errors Produced:** 93

## System Administration (SA)
- **Pages:** 1

## System Monitoring
- **Pages:** 171–175

## System Revenue Generation
- **Pages:** 116

## System Under Test (SUT)
- **Pages:** 16, 30–31, 84, 102

## Target Monitoring
- **Advanced Methods:** 180–184
- **Case Study: PCRE:** 190–195
- **Methods of Monitoring:** 170–180
- **Monitoring Overview:** 184
- **Test Program:** 184–190
- **What Can Go Wrong and What It Looks Like:** 167–170

## Target of Test
- **Pages:** 16–17

## Targets
- **DNS:** 229
- **FTP:** 229
- **SNMP:** 229

## Target Software
- **Pages:** 42

## Test Automation Engineer
- **Pages:** 86

## Test Automation for Security
- **Pages:** 114, 133–134

## Test Case–Golden FTP Server
- **Pages:** 215

## Test Cases
- **Pages:** 140

## Test Controller
- **Pages:** 250

## Test Engineer/Designer
- **Pages:** 86

## Tester
- **Pages:** 38, 39, 41

## Test Harness
- **Pages:** 250
- **Debuggers for All Target Platforms:** 250
- **Network Analyzers:** 250
- **Process Monitoring Tools:** 250
- **Scripting Framework or a Test Controller:** 250

## Testing
- **Black-Box Testing:** 83–86
- **Black-Box Testing, Purpose of:** 86–88
- **Black-Box Testing, Techniques for Security:** 89–96
- **Main Categories of Testing:** 79–80
- **Testing for Quality:** 77–79
- **Testing Metrics:** 88–89
- **White-Box Testing:** 80–83

## Testing Metrics
- **Code Coverage:** 89
- **Input Space Coverage:** 89
- **Interface Coverage:** 89
- **Specification Coverage:** 88

## Testing Purposes
- **Pages:** 17–19

## Test-Lab Environment
- **Pages:** 3–4

## Test Program
- **The Program:** 184–185
- **Test Cases:** 185–190

## Thousands of Lines of Code (KLOC)
- **Pages:** 130

## Threat Analysis and Risk-Based Testing
- **Ad-Hoc Threat Analysis:** 106–107
- **Threat Databases:** 105–106
- **Threat Trees:** 104–105

## Threat Databases
- **Denial of Service:** 105
- **Interception and Modification:** 105

## Threats
- **Pages:** 5

## Threat Trees
- **Pages:** 104–105

## Tiger-Team Approach
- **Pages:** 102

## Tokens
- **Pages:** 206–207

## Tools and Techniques (T&T) Testers
- **Pages:** 85

## Tool Soundness
- **Pages:** 130

## Trust Boundary
- **Pages:** 60

## TTCN
- **Pages:** 127

## UDP
- **Pages:** 128

## (Uninitialized) Stack Overwrite
- **Pages:** 48–49

## Unit Testing
- **Pages:** 90

## Up-Time
- **Pages:** 116–117

## Valgrind
- **Pages:** 182, 183, 188–189, 193–194

## Validation
- **Pages:** 13

## Validation Testing Versus Defect Testing
- **Pages:** 79–80

## Valid Case Instrumentation
- **Pages:** 170–171

## Vehicle Area Networks
- **Pages:** 9

## Verification
- **Pages:** 13

## Verification and Validation (V&V)
- **Pages:** 102

## Virtualization
- **Pages:** 183–184

## Virtual Private Network (VPN)
- **Pages:** 251
- **Fuzzing:** 253–255

## Viruses
- **Pages:** 5

## VMware
- **Pages:** 183

## Voice over IP (VoIP) Fuzzing
- **Pages:** 256–257

## VoIP Security Alliance (VoIPSA)
- **Pages:** 105

## Vuagnoux, Martin
- **Pages:** 150

## Vulnerabilities Found with Fuzzing
- **Pages:** 25–26

## Vulnerability Analysis (VA)
- **Pages:** 101–102

## Vulnerability Analyst/Researcher
- **Pages:** 38, 40–41

## Vulnerability Assessment (VA)
- **Pages:** 1

## Vulnerability Risk Metrics
- **Pages:** 125–127

## Vulnerability Scanners
- **Pages:** 12, 36–38, 72, 123

## Web Application Fuzzing
- **Pages:** 261–262

## Web Applications
- **Cross-Site Scripting (XSS):** 52
- **PHP File Inclusions:** 50
- **SQL Injections:** 50–51
- **XPath, XQuery, and Other Injection Attacks:** 51–52

## Web Fuzzing
- **Pages:** 164, 249

## White-Box Testing
- **Pages:** 80–83, 144
- **Code Auditing:** 81–83
- **Inspections and Reviews:** 80–81
- **Making the Code Readable:** 80

## WiFi Fuzzing
- **Pages:** 257–259

## Wireless Fuzzing
- **Pages:** 249, 257–259

## Wireless Infrastructure
- **Pages:** 8–9

## Wireless Technologies
- **Pages:** 9

## WLAN
- **Pages:** 256

## Worms
- **Pages:** 5

## Xen
- **Pages:** 183

## XML
- **Pages:** 127

## XPath Attacks
- **Pages:** 51

## XQuery Attacks
- **Pages:** 51

## Zero-Day Flaws
- **Pages:** 100, 134

---

# Recent Related Artech House Titles

- **Achieving Software Quality Through Teamwork, Isabel Evans**
- **Agile Software Development, Evaluating the Methods for Your Organization, Alan S. Koch**
- **Agile Systems with Reusable Patterns of Business Knowledge: A Component-Based Approach, Amit Mitra and Amar Gupta**
- **Discovering Real Business Requirements for Software Project Success, Robin F. Goldsmith**
- **Engineering Wireless-Based Software Systems and Applications, Jerry Zeyu Gao, Simon Shim, Xiao Su, and Hsin Mei**
- **Enterprise Architecture for Integration: Rapid Delivery Methods and Technologies, Clive Finkelstein**
- **Fuzzing for Software Security Testing and Quality Assurance, Ari Takanen, Jared DeMott, and Charlie Miller**
- **Handbook of Software Quality Assurance, Fourth Edition, G. Gordon Schulmeyer**
- **Implementing the ISO/IEC 27001 Information Security Management Standard, Edward Humphreys**
- **Open Systems and Standards for Software Product Development, P. A. Dargan**
- **Practical Insight into CMMI, Tim Kasse**
- **A Practitioner’s Guide to Software Test Design, Lee Copeland**
- **Role-Based Access Control, Second Edition, David F. Ferraiolo, D. Richard Kuhn, and Ramaswamy Chandramouli**
- **Software Configuration Management, Second Edition, Alexis Leon**
- **Utility Computing Technologies, Standards, and Strategies, Alfredo Mendoza**
- **Workflow Modeling: Tools for Process Improvement and Application Development, Alec Sharp and Patrick McDermott**

For further information on these and other Artech House titles, including previously considered out-of-print books now available through our In-Print-Forever® (IPF®) program, contact:

- **Artech House**
  - **Address:** 685 Canton Street, Norwood, MA 02062
  - **Phone:** 781-769-9750
  - **Fax:** 781-769-6334
  - **Email:** [PI:EMAIL]
- **Artech House**
  - **Address:** 46 Gillingham Street, London SW1V 1AH UK
  - **Phone:** +44 (0)20 7596-8750
  - **Fax:** +44 (0)20 7630-0166
  - **Email:** [PI:EMAIL]

Find us on the World Wide Web at: [www.artechhouse.com](http://www.artechhouse.com)