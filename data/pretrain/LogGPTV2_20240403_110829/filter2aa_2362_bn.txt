V-model, 78–79
Quality assurance (QA), 1, 101–103
Quality assurance and security, 71–73
security defects, 73
security in software development, 72
Quality assurance (QA) leader, 86
Quality assurance processes (QAP), 85
Quality assurance (QA) technical leader, 86
Race conditions, 53
Random fuzzers, 140–141, 247
Random fuzzing, 138–140
Reactive security, 10–12
Real bugs, 244
Regression testing, 95–96
Reliability, 116
Remediation, cost of, 115–116
Remote attack vectors, 8–9
digital media, 8
network protocols, 8
web applications, 8
wireless infrastructures, 8–9
Remote file inclusion (RFI), 50
Remote monitoring, 175–176
Reporting, 223
Reporting engine, 29
Research and development (R&D) phase, 3–4
Retrospective testing, 224–225
Return on Security Investment (ROSI), 110, 117
Reverse engineering (RE or RE’ing), 55–57
Risk-based testing. See Threat analysis and risk-
based testing
Robustness testing, 17–19, 88, 94–95, 129–130
Rontti, Tero, 131, 132
Rough Auditing Tool for Security (RATS),
58–59, 131
Runtime analysis engine, 29
Safe Structured Exception Handling (SafeSEH),
67
SAGE (Scalable, Automated, Guided Execution),
199–201
SCADA, 165, 265–267
Scripting framework, 250
Second-generation bugs, 28
Secure bit, 65
Security assurance engineer, 38
Security compromises, cost of, 116–117
Security goals, 35, 103
availability, 35, 103
confidentiality, 35, 103
integrity, 35, 103
Security mistakes, 9–10
Security requirements, 12–13
availability, 13
confidentiality, 13
integrity, 13
Security researcher, 38, 40–41
Security scanners, 12, 36–38, 90, 123
Sending inputs to the target, 222–223
Server software, 249
Service provider fuzzing, 255–259
Session crossover, 207–208
Session hijacking, 54
Session mutation, 208–209
Sessions, 204–206
Sharefuzz, 162
Simulated vulnerability discovery, 225
Simulation-based fuzzers, 27
Single-use fuzzers, 145–146
SIP method, 122
Software DEP, 67
Software development life cycle (SDLC), 11, 25,
71, 78, 99
Software interfaces, 84
data structures (e.g., files), 84
network protocols, 84
system APIs (e.g., system calls and device
drivers), 84
user interface (e.g., GUI, command line), 84
Software overflow protection, 66–68
GS, 66–67
PAX and ExecShield, 68
SafeSEH, 67
software DEP, 67
StackGuard, 68
Software product life cycle, 107–108
post-deployment (maintenance), 198
pre-deployment (development), 107
Software quality, 13–21
code auditing, 21
cost-benefit of quality, 14–16
functional testing, 21
structural testing, 19–21
target of test, 16–17
testing purposes, 17–19
Index
285
Software security, 2–13
attack surfaces and attack vectors, 6–9
disclosure processes, 5–6
proactive security, 10–12
reasons behind security mistakes, 9–10
security incident, 4–5
security requirements, 12–13
Software security testers, 41
Software testers, 2
Software Testing Techniques (Beizer), 71
Software vulnerabilities, 5
Software vulnerability analysis (VA), 35–69
basic bug categories, 42–54
bug hunting techniques, 55–59
defenses, 63–68
fuzzing, 59–63
people conducting, 38–42
purpose of, 36–38
target software, 42
Sommerville, Ian, 79
Source code auditing tool, 4, 57–59
Specification, 19–20, 25
Specification coverage, 88
SPIKE, 139, 146
StackGuard, 68
Stack overflows, 43, 44
State dependency errors, 93
Static and random template-based fuzzer, 27
Stress testing, 90
Structural testing, 19–21
Structural versus functional testing, 80
Structured Exception Handler (SEH), 67
Structured query language (SQL), 261
injections, 50–51
Subcontrolled security assessments, 108, 109
Sulley, 139–140, 141, 142, 159–161
Support response times, 117
Sutton, Michael, 150, 159, 179
Symbolic execution, 199–201
Syntax testing, 22, 91–93
types of errors produced, 93
System administration (SA), 1
System monitoring, 171–175
System revenue generation, 116
System under test (SUT), 16, 30–31, 84, 102
Target monitoring, 167–195, 223
advanced methods, 180–184
case study: PCRE, 190–195
methods of monitoring, 170–180
monitoring overview, 184
test program, 184–190
what can go wrong and what it looks like,
167–170
Target of test, 16–17
Targets, 229
DNS, 229
FTP, 229
SNMP, 229
Target software, 42
Test automation engineer, 86
Test automation for security, 114, 133–134
Test case–Golden FTP server, 215
Test cases, 140
Test controller, 250
Test engineer/designer, 86
Tester, 38, 39, 41
Test harness, 250
debuggers for all target platforms, 250
network analyzers, 250
process monitoring tools, 250
scripting framework or a test controller, 250
Testing, 77–96
black-box testing, 83–86
black-box testing, purpose of, 86–88
black-box testing, techniques for security,
89–96
main categories of testing, 79–80
testing for quality, 77–79
testing metrics, 88–89
white-box testing, 80–83
Testing metrics, 88–89
code coverage, 89
input space coverage, 89
interface coverage, 89
specification coverage, 88
Testing purposes, 17–19
Test-lab environment, 3–4
Test program, 184–190
the program, 184–185
test cases, 185–190
Thousands of lines of code (KLOC), 130
Threat analysis and risk-based testing, 103–107
ad-hoc threat analysis, 106–107
threat databases, 105–106
threat trees, 104–105
Threat databases, 105–106
denial of service, 105
interception and modification, 105
Threats, 5
Threat trees, 104–105
Tiger-team approach, 102
286
Index
Tokens, 206–207
Tools and techniques (T&T) testers, 85
Tool soundness, 130
Trust boundary, 60
TTCN, 127
UDP, 128
(Uninitialized) stack overwrite, 48–49
Unit testing, 90
Up-time, 116–117
Valgrind, 182, 183, 188–189, 193–194
Validation, 13
Validation testing versus defect testing, 79–80
Valid case instrumentation, 170–171
Vehicle Area Networks, 9
Verification, 13
Verification and validation (V&V), 102
Virtualization, 183–184
Virtual Private Network (VPN), 251
fuzzing, 253–255
Viruses, 5
VMware, 183
V-model, 78–79
Voice over IP (VoIP) fuzzing 256–257
VoIP Security Alliance (VoIPSA), 105
Vuagnoux, Martin, 150
Vulnerabilities found with fuzzing, 25–26
Vulnerability analysis (VA), 101–102
Vulnerability analyst/researcher, 38, 40–41
Vulnerability assessment (VA), 1
Vulnerability risk metrics, 125–127
Vulnerability scanners, 12, 36–38, 72, 123
Web application fuzzing, 261–262
Web applications, 8, 50–52
cross-site scripting (XSS), 52
PHP file inclusions, 50
SQL injections, 50–51
XPath, XQuery, and other injection attacks,
51–52
Web fuzzing, 164, 249
White-box testing, 80–83, 144
code auditing, 81–83
inspections and reviews, 80–81
making the code readable, 80
WiFi fuzzing, 257–259
Wireless fuzzing, 249, 257–259
Wireless infrastructure, 8–9
Wireless technologies, 9
WLAN, 256
Worms, 5
Xen, 183
XML, 127
XPath attacks, 51
XQuery attacks, 51
Zero-day flaws, 100, 134
Index
287
Recent Related Artech House Titles
Achieving Software Quality Through Teamwork, Isabel Evans
Agile Software Development, Evaluating the Methods for Your Organization,
Alan S. Koch
Agile Systems with Reusable Patterns of Business Knowledge: A Component-Based
Approach, Amit Mitra and Amar Gupta
Discovering Real Business Requirements for Software Project Success,
Robin F. Goldsmith
Engineering Wireless-Based Software Systems and Applications, Jerry Zeyu Gao,
Simon Shim, Xiao Su, and Hsin Mei
Enterprise Architecture for Integration: Rapid Delivery Methods and Technologies,
Clive Finkelstein
Fuzzing for Software Security Testing and Quality Assurance, Ari Takanen, Jared DeMott,
and Charlie Miller
Handbook of Software Quality Assurance, Fourth Edition, G. Gordon Schulmeyer
Implementing the ISO/IEC 27001 Information Security Management Standard,
Edward Humphreys
Open Systems and Standards for Software Product Development, P. A. Dargan
Practical Insight into CMMI , Tim Kasse
A Practitioner’s Guide to Software Test Design, Lee Copeland
Role-Based Access Control, Second Edition, David F. Ferraiolo, D. Richard Kuhn, and
Ramaswamy Chandramouli
Software Configuration Management, Second Edition, Alexis Leon
Utility Computing Technologies, Standards, and Strategies, Alfredo Mendoza
Workflow Modeling: Tools for Process Improvement and Application Development,
Alec Sharp and Patrick McDermott
For further information on these and other Artech House titles, including previously considered
out-of-print books now available through our In-Print-Forever
® (IPF
®) program, contact:
Artech House
Artech House
685 Canton Street
46 Gillingham Street
Norwood, MA 02062
London SW1V 1AH UK
Phone: 781-769-9750
Phone: +44 (0)20 7596-8750
Fax: 781-769-6334
Fax: +44 (0)20 7630-0166
e-mail: PI:EMAIL
e-mail: PI:EMAIL
Find us on the World Wide Web at: www.artechhouse.com