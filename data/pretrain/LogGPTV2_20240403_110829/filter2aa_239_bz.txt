——这是一个线程安全的键值集合。
TryAdd（）、TryGetValue（）、TryRemove（）和TryUpdate（）方法以非阻塞
的方式访问成员。因为元素基于键和值，所以ConcurrentDictionary没有实现IProducerConsumerCollection。
● BlockingCollection ——这个集合在可以添加或提取元素之前，会阻塞线程并一
直等待。BlockingCollection集合提供了一个接口，以使用Add（）和Take（）
方法来添加和删除元素。这些方法会阻塞线程，一直等到任务可以执行为止。
Add（）方法有一个重载版本，其中可以给该重载版本传递一个CancellationToken
令牌。这个令牌允许取消被阻塞的调用。如果不希望线程无限期地等待下去，且
不希望从外部取消调用，就可以使用TryAdd（）和TryTake（）方法，在这些方
法中，也可以指定一个超时值，它表示在调用失败之前应阻塞线程和等待的最长
时间。
ConcurrentXXX集合是线程安全的，如果某个动作不适用于线程的当前状态，它们就
返回false。在继续之前，总是需要确认添加或提取元素是否成功。不能相信集合会完成任
务。
BlockingCollection是对实现了IProducerConsumerCollection接口的任意类的修
饰器，它默认使用ConcurrentQueue类。还可以给构造函数传递任何其他实现了
IProducerConsumer-Collection接口的类，例如，ConcurrentBag和
ConcurrentStack。
12.5.1 创建管道
将这些并发集合类用于管道是一种很好的应用。一个任务向一个集合类写入一些内
容，同时另一个任务从该集合中读取内容。
下面的示例应用程序演示了BlockingCollection类的用法，使用多个任务形成一个
管道。第一个管道如图12-1所示。第一阶段的任务读取文件名，并把它们添加到队列中。
在这个任务运行的同时，第二阶段的任务已经开始从队列中读取文件名并加载它们的内
容。结果被写入另一个队列。第三阶段可以同时启动，读取并处理第二个队列的内容。结
果被写入一个字典。
图12-1
在这个场景中，只有第三阶段完成，并且内容已被最终处理，在字典中得到了完整的
结果时，下一个阶段才会开始。图12-2显示了接下来的步骤。第四阶段从字典中读取内
容，转换数据，然后将其写入队列中。第五阶段在项中添加了颜色信息，然后把它们添加
到另一个队列中。最后一个阶段显示了信息。第四阶段到第六阶段也可以并发运行。
图12-2
Info类代表由管道维护的项（代码文件PipelineSample/Info.cs）：
    public class Info
    {
      public string Word { get; set; }
      public int Count { get; set; }
      public string Color { get; set; }
      public override string ToString() => $"{Count} times: {Word}";
    }
PipelineSample使用如下依赖项和名称空间：
依赖项：
    NETStandard.Library
名称空间：
    System.Collections.Generic
    System.Collections.Concurrent
    System.IO
    System.Linq
    System.Threading.Tasks
    static System.Console
看看这个示例应用程序的代码可知，完整的管道是在StartPipeline（）方法中管理
的。该方法实例化了集合，并把集合传递到管道的各个阶段。第1阶段用
ReadFilenamesAsync处理，第2和第3阶段分别由同时运行的LoadContentAsync和
ProcessContentAsync处理。但是，只有当前3个阶段完成后，第4个阶段才能启动（代码文
件PipelineSample/Program.cs）。
    public static async Task StartPipelineAsync()
    {
      var fileNames = new BlockingCollection();
      var lines = new BlockingCollection();
      var words = new ConcurrentDictionary();
      var items = new BlockingCollection();
      var coloredItems = new BlockingCollection();
      Task t1 = PipelineStages.ReadFilenamesAsync(@"../../..", fileNames);
      ColoredConsole.WriteLine("started stage 1");
      Task t2 = PipelineStages.LoadContentAsync(fileNames, lines);
      ConsoleHelper.WriteLine("started stage 2");
      Task t3 = PipelineStages.ProcessContentAsync(lines, words);
      await Task.WhenAll(t1, t2, t3);
      ConsoleHelper.WriteLine("stages 1, 2, 3 completed");
      Task t4 = PipelineStages.TransferContentAsync(words, items);
      Task t5 = PipelineStages.AddColorAsync(items, coloredItems);
      Task t6 = PipelineStages.ShowContentAsync(coloredItems);
      ColoredConsole.WriteLine("stages 4, 5, 6 started");
      await Task.WhenAll(t4, t5, t6);
      ColoredConsole.WriteLine("all stages finished");
    }
  注意： 这个示例应用程序使用了任务以及async和await关键字，第15章将介
绍它们。第21章将详细介绍线程、任务和同步。第23章将讨论文件I/O。
本例用ColoredConsole类向控制台写入信息。该类可以方便地改变控制台输出的颜
色，并使用同步来避免返回颜色错误的输出（代码文件
PipelineSample/ConsoleHelper.cs）：
    public static class ColoredConsole
    {
      private static object syncOutput = new object();
      public static void WriteLine(string message)
      {
        lock (syncOutput)
        {
          Console.WriteLine(message);
        }
      }
      public static void WriteLine(string message, string color)
      {
        lock (syncOutput)
        {
          Console.ForegroundColor = (ConsoleColor)Enum.Parse(
              typeof(ConsoleColor), color);
          Console.WriteLine(message);
          Console.ResetColor();
        }
      }
    }
12.5.2 使用BlockingCollection
现在介绍管道的第一阶段。ReadFilenamesAsync接收BlockingCollection为参数，
在其中写入输出。该方法的实现使用枚举器来迭代指定目录及其子目录中的C#文件。这
些文件的文件名用Add方法添加到BlockingCollection中。完成添加文件名的操作后，
调用CompleteAdding方法，以通知所有读取器不应再等待集合中的任何额外项（代码文件
PipelineSample/PipelineStages.cs）：
    public static class PipelineStages
    {
      public static Task ReadFilenamesAsync(string path,
          BlockingCollection output)
      {
        return Task.Factory.StartNew(() =>
        {
          foreach (string filename in Directory.EnumerateFiles(path, "＊.cs",
              SearchOption.AllDirectories))
          {
            output.Add(filename);
            ColoredConsole.WriteLine($"stage 1: added {filename}");
        }
        output.CompleteAdding();
      }, TaskCreationOptions.LongRunning);
    }
    //. . .
  注意： 如果在写入器添加项的同时，读取器从BlockingCollection中读
取，那么调用CompleteAdding方法是很重要的。否则，读取器会在foreach循环中等待更
多的项被添加。
下一个阶段是读取文件并将其内容添加到另一个集合中，这由LoadContentAsync方法
完成。该方法使用了输入集合传递的文件名，打开文件，然后把文件中的所有行添加到输
出集合中。在foreach循环中，用输入阻塞集合调用GetConsumingEnumerable，以迭代各
项。直接使用input变量而不调用GetConsumingEnumerable是可以的，但是这只会迭代当前
状态的集合，而不会迭代以后添加的项。
    public static async Task LoadContentAsync(BlockingCollection input,
        BlockingCollection output)
    {
      foreach (var filename in input.GetConsumingEnumerable()
 )
      {
        using (FileStream stream = File.OpenRead(filename))
        {
          var reader = new StreamReader(stream);
          string line = null;
          while ((line = await reader.ReadLineAsync()) ! = null)
          {
            output.Add(line);
            ColoredConsole.WriteLine($"stage 2: added {line}");
          }
        }
      }
      output.CompleteAdding();
    }
 注意： 
如果在填充集合的同时，使用读取器读取集合，则需要使用
GetConsumingEnumerable方法获取阻塞集合的枚举器，而不是直接迭代集合。
12.5.3 使用ConcurrentDictionary
ProcessContentAsync方法实现了第三阶段。这个方法获取输入集合中的行，然后拆分
它们，将各个词筛选到输出字典中。AddOrUpdate是ConcurrentDictionary类型的一个方
法。如果键没有添加到字典中，第二个参数就定义应该设置的值。如果键已存在于字典
中，updateValueFactory参数就定义值的改变方式。在这种情况下，现有的值只是递增1：
    public static Task ProcessContentAsync(BlockingCollection input,
            ConcurrentDictionary output)
    {
      return Task.Factory.StartNew(() =>
      {
        foreach (var line in input.GetConsumingEnumerable()
 )
        {
          string[] words = line.Split(' ', '; ', '\t', '{', '}', '(', ')', ':',
              ', ', '"');
          foreach (var word in words.Where(w => ! string.IsNullOrEmpty(w)))
          {
            output.AddOrUpdate(key: word, addValue: 1,
              updateValueFactory: (s, i) = > ++i) ;
            ColoredConsole.WriteLine($"stage 3: added {word}");
          }
        }
      }, TaskCreationOptions.LongRunning);
    }
运行前3个阶段的应用程序，得到的输出如下所示，各个阶段的操作交织在一起：
    stage 3: added DisplayBits
    stage 3: added bits2
    stage 3: added Write
    stage 3: added =
    stage 3: added bits1.Or
    stage 2: added          DisplayBits(bits2);
    stage 2: added          Write(" and ");
    stage 2: added          DisplayBits(bits1);
    stage 2: added          WriteLine();
    stage 2: added          DisplayBits(bits2);
12.5.4 完成管道
在完成前3个阶段后，接下来的3个阶段也可以并行运行。TransferContentAsync从字
典中获取数据，将其转换为Info类型，然后放到输出BlockingCollection中（代码文件
PipelineSample/PipelineStages.cs）：
    public static Task TransferContentAsync(
        ConcurrentDictionary input,
        BlockingCollection output)
    {
      return Task.Factory.StartNew(() =>
      {
        foreach (var word in input.Keys)
        {
          int value;
          if (input.TryGetValue(word, out value))
          {
            var info = new Info { Word = word, Count = value };
            output.Add(info);
            ColoredConsole.WriteLine($"stage 4: added {info}");
          }
        }
        output.CompleteAdding();
      }, TaskCreationOptions.LongRunning);
    }
管道阶段AddColorAsync根据Count属性的值设置Info类型的Color属性：
    public static Task AddColorAsync(BlockingCollection input,
        BlockingCollection output)
    {
      return Task.Factory.StartNew(() =>
      {
        foreach (var item in input.GetConsumingEnumerable())
        {
          if (item.Count > 40)
          {
            item.Color = "Red";
          }
          else if (item.Count > 20)
          {
            item.Color = "Yellow";
          }
          else
          {
            item.Color = "Green";
          }
          output.Add(item);
          ColoredConsole.WriteLine($"stage 5: added color {item.Color} to {item}"
);
        }
        output.CompleteAdding();
      }, TaskCreationOptions.LongRunning);
    }
最后一个阶段用指定的颜色在控制台中输出结果：
    public static Task ShowContentAsync(BlockingCollection input)
    {
      return Task.Factory.StartNew(() =>
      {
        foreach (var item in input.GetConsumingEnumerable())
        {
          ColoredConsole.WriteLine($"stage 6: {item}", item.Color);
        }
      }, TaskCreationOptions.LongRunning);
    }
运行应用程序，得到的结果如下所示，它是彩色的。
    stage 6: 20 times: static
    stage 6: 3 times: Count
    stage 6: 2 times: t2
    stage 6: 1 times: bits2[sectionD]
    stage 6: 3 times: set
    stage 6: 2 times: Console.ReadLine
    stage 6: 3 times: started
    stage 6: 1 times: builder.Remove
    stage 6: 1 times: reader
    stage 6: 2 times: bit4
    stage 6: 1 times: ForegroundColor
    stage 6: 1 times: all
    all stages finished
12.6 小结
本章探讨了一些特殊的集合，如BitArray和BitVector32，它们为处理带有位的集合进
行了优化。
ObservableCollection 类不仅存储了位，列表中的项改变时，这个类还会触发事
件。第31～33章把这个类用于Windows应用程序和Windows桌面应用程序。
本章还解释了，不变的集合可以保证集合从来不会改变，因此可以很容易用于多线程
应用程序。
本章的最后一部分讨论了并发集合，即可以使用一个线程填充集合，而另一个线程同
时从相同的集合中检索项。
第13章详细讨论语言集成查询（LINQ）。
第13章
LINQ
本章要点
● 用列表在对象上执行传统查询
● 扩展方法
● LINQ查询操作符
● 并行LINQ
● 表达式树
本章源代码下载地址（wrox.com）：
打开网页www.wrox.com/go/professionalcsharp6，单击Download Code选项卡即可下载
本章源代码。本章代码分为以下几个主要的示例文件：