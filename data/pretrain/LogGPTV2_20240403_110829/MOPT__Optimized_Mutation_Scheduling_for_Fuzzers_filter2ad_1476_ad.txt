14
1
4
0
3
6
/
/
58
1
4
3
3
0
0
2
0
1
0
0
/
/
14
3
9
12
15
2
14
3
4
1
3
6
2
14
88
/
/
/
/
/
/
/
/
/
/
/
2
28
30
5
4
5
9
1
5
0
5
0
3
6
/
/
43
1
4
2
2
0
0
2
0
1
0
0
/
/
12
Sum
6
8
7
11
1
5
2
5
1
3
6
2
28
85
5.4 Vulnerability Discovery
To ﬁgure out the corresponding vulnerabilities of the
crashes found in Section 5.3, we recompile the evaluated
programs with AddressSanitizer [24] and reevaluate them
with the discovered crash inputs. If the top three source code
locations of the stack trace provided by AddressSanitizer are
unique, we consider the corresponding crash input triggers
a unique vulnerability of the objective program. This is a
common way to ﬁnd unique vulnerabilities in practice and
has been used to calculate the stack hashing in [25]. Then,
we check the vulnerability reports of the target program on
the CVE website to see whether they correspond to some
already existed CVEs. If not, we submit the vulnerability re-
ports and the Proof of Concepts (PoCs) to the vendors and
the CVE assignment team. The vulnerabilities discovered
by AFL, MOPT-AFL-tmp and MOPT-AFL-ever are shown
in Table 4, from which we have the following conclusions.
• Both MOPT-AFL-tmp and MOPT-AFL-ever discover
more vulnerabilities than AFL by a wide margin. For in-
stance, MOPT-AFL-tmp ﬁnds 45 more security CVEs than
AFL; MOPT-AFL-ever ﬁnds 23 more unreported CVEs than
AFL; Our fuzzers ﬁnd 81 security CVEs with 66 new CVE
IDs assigned on 11 programs. The results demonstrate that
MOPT-AFL is very effective on exploring CVEs.
• Our fuzzers discover 15 previously known vulnerabili-
ties published by CVE on the latest version of the objective
programs. For instance, when fuzzing pdfimages, MOPT-
AFL-tmp and MOPT-AFL-ever discover 3 and 2 existed vul-
nerabilities, respectively. The results demonstrate that secu-
rity patching takes a long time in practice.
• AFL, MOPT-AFL-tmp and MOPT-AFL-ever discover
1, 2 and 2 unique vulnerabilities on tiff2bw, respectively.
As for sam2p, MOPT-AFL-tmp and MOPT-AFL-ever dis-
cover 14 and 28 unique vulnerabilities, respectively. In com-
parison, AFL only ﬁnds 5 vulnerabilities. Since the vulner-
abilities happened in the tiff2bw command-line program
and the CVE assignment team thinks that sam2p is a UNIX
command line program rather than a library, they cannot as-
sign CVE IDs for the vulnerabilities on tiff2bw and sam2p.
On all the 13 programs, MOPT-AFL-tmp and MOPT-AFL-
ever discover 112 unique vulnerabilities in total, and AFL
discovers 33 vulnerabilities.
5.5 CVE Analysis
In this subsection, we analyze the CVEs discovered in
Section 5.4 in detail and discuss the performance of different
fuzzers. We also measure the severity of each CVE for each
program by leveraging the Common Vulnerability Scoring
System (CVSS) [26] and show the highest score in Table 5.
We can learn the following conclusions.
• Both MOPT-AFL-tmp and MOPT-AFL-ever ﬁnd more
kinds of vulnerabilities than AFL, which means MOPT-AFL
does not limit on discovering speciﬁc kinds of vulnerabili-
ties. In other words, the MOPT scheme can guide the fuzzing
tools to discover various vulnerabilities.
• We realize that MOPT-AFL-tmp discovers signiﬁ-
cantly more unique vulnerabilities than MOPT-AFL-ever on
pdfimages and w3m. We analyze the reasons as follows.
First of all, we would like to clarify the functionalities of
these two objective programs. pdfimages is used to save
images from the PDF ﬁles as the image ﬁles locally. w3m
is a pager and/or text-based browser, which can handle ta-
bles, cookies, authentication, and almost everything except
for JavaScript. We notice that PDF ﬁles have complex struc-
tures and so do the web data handled by w3m. Thus, there are
many magic byte checks in pdfimages and w3m to handle
the complex structures. Because it is hard to randomly gener-
ate a particular value, the operators in the deterministic stage,
such as ﬂipping the bits one by one (bitﬂip) and replacing the
bytes with interesting values (interesting values), are better
than the ones in the havoc stage to pass the magic byte checks
and to test deeper execution paths. MOPT-AFL-tmp per-
forms better than MOPT-AFL-ever on pdfimages and w3m
since MOPT-AFL-tmp enables the deterministic stage later
while MOPT-AFL-ever does not. However, since the deter-
ministic stage performs multiple kinds of operators on each
USENIX Association
28th USENIX Security Symposium    1957
Table 5: The types and IDs of CVE discovered by AFL, MOPT-AFL-tmp and MOPT-AFL-ever.
AFL
CVE-2018-10785
CVE-2018-17813
CVE-2017-11339; CVE-2017-17723;
CVE-2018-18036
CVE-2017-14861
CVE-2018-18047
CVE-2018-18046
CVE-2017-14407
CVE-2018-17800; CVE-2018-17802;
CVE-2018-18045; CVE-2018-18043
CVE-2017-14406
MOPT-AFL-tmp
CVE-2018-10785; CVE-2018-18037
CVE-2018-17813
MOPT-AFL-ever
Severity
CVE-2018-10785; CVE-2018-18037; CVE-2018-17814
CVE-2018-17813; CVE-2018-18050; CVE-2018-18051
CVE-2017-11339; CVE-2017-17723; CVE-2018-10780
CVE-2017-11339; CVE-2017-17723; CVE-2018-18036
CVE-2018-17808; CVE-2018-18047
CVE-2017-14861
CVE-2018-18046
CVE-2017-14861
CVE-2018-18047
CVE-2018-18046
CVE-2018-17809; CVE-2018-17807
CVE-2018-17809; CVE-2018-17823
CVE-2017-11337; CVE-2018-17809
CVE-2017-14407; CVE-2018-17801; CVE-2018-17799
CVE-2017-14407
CVE-2017-14409; CVE-2018-17800; CVE-2018-17803; CVE-2018-17802;
CVE-2018-17800; CVE-2018-17803; CVE-2018-17802;
CVE-2018-18045; CVE-2018-18043; CVE-2018-18044
CVE-2018-18045; CVE-2018-18043
CVE-2017-14412
CVE-2017-14412
CVE-2018-17824
Target
mp42aac
exiv2
mp3gain
Types
buffer overﬂow
memory leaks
heap overﬂow
stack overﬂow
buffer overﬂow
segmentation violation
memory access
violation
stack buffer overﬂow
global buffer overﬂow
segmentation violation
memcpy param
overlap
global buffer overﬂow
alloc dealloc
mismatch
segmentation violation
segmentation violation
memory leaks
segmentation violation
memory leaks
stack exhaustion
stack overﬂow
heap buffer overﬂow
heap buffer overﬂow
memory leaks
segmentation violation
stack overﬂow
heap buffer overﬂow
segmentation violation
avconv
w3m
objdump
jhead
mpg321
infotocap
podofopdﬁnfo
4.3
4.3
5.8
4.3
4.3
4.3
4.3
4.3
6.8
6.8
5.8
4.3
6.1
4.3
4.3
4.3
4.3
4.3
5.3
4.3
5.0
4.3
4.3
4.3
4.3
4.3
4.7
4.3
4.3
heap buffer overﬂow
pdﬁmages
stack overﬂow
CVE-2018-17114
CVE-2018-8103; CVE-2018-18054
CVE-2018-16369; CVE-2018-17114; CVE-2018-17115; CVE-2018-17116;
CVE-2018-17117; CVE-2018-17119; CVE-2018-17120; CVE-2018-17121;
CVE-2018-17122; CVE-2018-18053; CVE-2018-18055
CVE-2018-8102
CVE-2018-17118
CVE-2018-17804
CVE-2018-17805
CVE-2018-17815; CVE-2018-17816; CVE-2018-17817; CVE-2018-17818;
CVE-2018-17819; CVE-2018-17821; CVE-2018-17822; CVE-2018-18038;
CVE-2018-18039; CVE-2018-18040; CVE-2018-18041; CVE-2018-18042;
CVE-2018-18052
CVE-2018-17820
CVE-2018-12700
CVE-2018-9138; CVE-2018-16617
CVE-2018-17810
CVE-2018-17810; CVE-2018-17811; CVE-2018-18048; CVE-2018-18049
CVE-2018-16615; CVE-2018-16616
CVE-2018-18216; CVE-2018-18221;
CVE-2017-12063
CVE-2018-16614
CVE-2018-18222
CVE-2018-18219
CVE-2018-18220
CVE-2017-12063
CVE-2018-16614
CVE-2018-16615; CVE-2018-16616
CVE-2018-18216; CVE-2018-18217; CVE-2018-18221; CVE-2018-18222
CVE-2018-18219
CVE-2018-18220
CVE-2018-16369; CVE-2018-17115; CVE-2018-17116;
CVE-2018-17119; CVE-2018-17121; CVE-2018-17122;
CVE-2018-18053
CVE-2018-8102
CVE-2018-17118
CVE-2018-17123; CVE-2018-17124
CVE-2018-17804
CVE-2018-17816; CVE-2018-18040; CVE-2018-18041;
CVE-2018-18042
CVE-2018-17820
CVE-2018-12641
CVE-2018-9138
CVE-2018-17810; CVE-2018-17811; CVE-2018-17812;
CVE-2018-18048; CVE-2018-18049
CVE-2017-12063
CVE-2018-16614
CVE-2018-16615; CVE-2018-16616
CVE-2018-18216; CVE-2018-18217; CVE-2018-18218;
CVE-2018-18221
CVE-2018-18219
CVE-2018-18220
bit/byte of the test cases, it takes a lot of time to ﬁnish all the
operations on each test case in the fuzzing queue, leading to
the low efﬁciency. On the other hand, MOPT-AFL-tmp tem-
porarily uses the deterministic stage on different test cases in
the fuzzing queue to avoid this disadvantage.
• Interestingly, we can also see that although we fuzz the
objective programs with the latest version, MOPT-AFL still
discovers already existed CVEs. For instance, we reproduce
the Proof of Concepts (PoCs) of CVE-2017-17723 of exiv2,
which can cause the overﬂow and has 5.8 CVSS Score ac-
cording to CVE Details [27]. It may because the vendors do
not patch the vulnerabilities before the release or they patch
the vulnerabilities while MOPT-AFL still discovers other
PoCs. Therefore, the servers using these programs may be
attacked because of these vulnerabilities. In addition, most
of the discovered vulnerabilities can crash the programs and
allow remote attackers to launch denial of service attacks via
a crafted ﬁle. Thus, a powerful fuzzer is needed to improve
the security patching.
Case study: CVE-2018-18054 in pdfimages. An inter-
esting vulnerability we found is a heap buffer overﬂow in
pdfimages. Although the PDF ﬁles in the seed set do not
contain pictures that use the CCITTFax encoding, a test case
generated by MOPT-AFL-tmp still triggers the CCITTFax
decoding process of pdfimages. Furthermore, even the PDF
syntax of this test case is partially damaged, pdfimages con-
tinues to extract the pictures from it. Then, the test case trig-
gers the function GBool CCITTFaxStream::readRow() in
Stream.cc for multiple times and ﬁnally accesses the data
that exceed the index of the array refLine, which leads to a
heap buffer overﬂow. This vulnerability shows the powerful
mutation capability of MOPT-AFL-tmp, which not only gen-
erates a structure similar to an encoding algorithm but also
triggers an array out of bounds.
5.6 More Analysis on Discovered Crashes
In this subsection, we give a close look on the growth of
the number of unique crashes discovered by MOPT-AFL-