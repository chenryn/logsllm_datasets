title:Conditional proxy re-encryption secure against chosen-ciphertext attack
author:Jian Weng and
Robert H. Deng and
Xuhua Ding and
Cheng-Kang Chu and
Junzuo Lai
Conditional Proxy Re-Encryption Secure against
Chosen-Ciphertext Attack
ABSTRACT
In a proxy re-encryption (PRE) scheme [4], a proxy, autho-
rized by Alice, transforms messages encrypted under Alice’s
public key into encryptions under Bob’s public key without
knowing the messages. Proxy re-encryption can be used ap-
plications requiring delegation, such as delegated email pro-
cessing. However, it is inadequate to handle scenarios where
a ﬁne-grained delegation is demanded. For example, Bob
is only allowed Alice’s encrypted emails containing a spe-
ciﬁc keyword. To overcome the limitation of existing PRE,
we introduce the notion of conditional proxy re-encryption
(or C-PRE ), whereby only ciphertext satisfying one condi-
tion set by Alice can be transformed by the proxy and then
decrypted by Bob. We formalize its security model and pro-
pose an eﬃcient C-PRE scheme, whose chosen-ciphertext se-
curity is proven under the 3-quotient bilinear Diﬃe-Hellman
assumption. We further extend the construction to allow
multiple conditions with a slightly higher overhead.
INTRODUCTION
1.
The notion of proxy re-encryption (PRE) was initially in-
troduced by Blaze, Bleumer and Strauss introduced in [4].
In a PRE system, Bob is allowed to decipher public key en-
cryptions for Alice with the assistance from an authorized
proxy. Speciﬁcally, Alice authorizes the proxy by giving it a
re-encryption key. The proxy can then convert any cipher-
text under Alice’s public key into ciphertext under Bob’s
public key. The requirement is that the semantic security
of encryptions for Alice is preserved throughout the conver-
sion, such that the proxy gains no information about the
involved plaintext messages.
Proxy re-encryption has found many practical applications,
such as encrypted email forwarding, secure distributed ﬁle
systems, and outsourced ﬁltering of encrypted spam. We use
the encrypted email forwarding as an example to illustrate
the usage of PRE and to motivate our work as well. Imagine
that a department manager, Alice, is to take a vacation. She
delegates her secretary Bob to process her routine emails.
Among the incoming emails, some could be encrypted un-
der Alice’s public key. Traditional public key encryption
schemes does not allow Bob to process such emails, follow-
ing the security norm that one’s private key should never be
shared with other. With a PRE system, Alice can simply
give the email server a re-encryption key. For an encrypted
incoming email, the email server (i.e. the proxy in PRE’s
jargon) transforms it into an encryption for Bob. Then Bob
can read this email using his secret key. When Alice is back,
she instructs the email server to stop the transformation.
The existing notion of PRE does not facilitate ﬂexible dele-
gation. Suppose that Alice instructs Bob to process emails
only when its subject contains the keyword urgent. For other
emails, Alice prefers to read them by herself after back to of-
ﬁce. Obviously, the existing PRE schemes do not meet such
needs. To show further motivation, we consider the case that
Alice wants Bob to process only emails with keyword mar-
ket and prefers Charlie to process emails only with keyword
sales. Using existing PRE mandates an escalated trust on
the email server, since the email server is trusted to enforce
the access control policy speciﬁed by Alice. We observe that
such trust model is unrealistic in many applications.
In this paper, we introduce the notion of conditional proxy
re-encryption or C-PRE, whereby Alice has a ﬁne-grained
control over the delegation. As a result, Alice can ﬂexibly
assign her delegate (Bob) the decryption capability based
on the conditions attached to the messages, using a proxy
with no higher trust than in existing PRE schemes.
1.1 Our Results
Our contribution includes a formal deﬁnition of conditional
proxy re-encryption and its security notion. Brieﬂy speak-
ing, a C-PRE scheme involves three principals: a delegator
(say user Ui), a proxy, and a delegatee (say user Uj), similar
to existing PRE systems. A message sent to Ui with condi-
tion w is encrypted by the sender using both Ui’s public key
and w. To authorize Uj to decrypt such an encryption as-
sociated with w, Ui gives the proxy a partial re-encryption
key rki,j and a condition key cki,w corresponding to the
condition w. These two keys form the secret trapdoor used
by the proxy to perform ciphertext translation. The proxy
is unable to translate those ciphertext whose corresponding
condition keys are not available. Therefore, Ui has a ﬂexible
control on delegation by releasing condition keys properly.
We also construct a concrete C-PRE scheme using bilinear
pairings. Under the 3-Quotient Bilinear Diﬃe-Hellman (3-
QBDH) assumption, we prove its chosen-ciphertext security
in the random oracle model. We further extend this basic
scheme to a conditional proxy re-encryption with multiple
conditions (MC-PRE). In the MC-PRE system, a proxy with
a partial re-encryption key can translate a ciphertext asso-
ciated with multiple conditions, if and only if he has all the
required condition keys. The proposed MC-PRE scheme is
eﬃcient, since the number of bilinear pairings in use is in-
dependent of the number of the conditions.
1.2 Related Work
In the pioneer work due to Blaze, Bleumer and Strauss [4],
they presented the ﬁrst bidirectional PRE scheme (refer to
Remark 1 for the deﬁnitions of bidirectional/unidirectional
PRE). In 2005, Ateniese et al. [1, 2] presented a unidirec-
tional PRE scheme based on bilinear pairings. Both of
these schemes are only secure against chosen-plaintext at-
tack (CPA). However, applications often require security
against chosen-ciphertext attacks (CCA). To ﬁll this gap,
Canetti and Hohenberger [11] presented a construction of
CCA-secure bidirectional PRE scheme from bilinear pair-
ings. Later, Libert and Vergnaud [23] presented a CCA-
secrue unidirectional PRE scheme from bilinear pairings.
Recently, Deng et al. [15] proposed a CCA-secure bidirec-
tional PRE scheme without pairings. All these construc-
tions are standard PRE schemes, and hence can not con-
trol the proxy at a ﬁne-grained level.
In Pairing’08, Lib-
ert and Vergnaud [24] introduced the notion of traceable
proxy re-encryption, where malicious proxies leaking their
re-encryption keys can be identiﬁed.
Proxy re-encryption has also been studied in identity-based
scenarios. Based on the ElGamal-type public key encryp-
tion system [16] and Boneh-Boyen’s identity-based encryp-
tion system [3], Boneh, Goh and Matsuo [7] described a
hybrid proxy re-encryption system. Based on Boneh and
Franklin’s identity-based encryption system [6], Green and
Ateniese [18] presented CPA and CCA-secure identity-based
proxy re-encryption (IB-PRE) schemes in the random ora-
cle model. Chu and Tzeng [13] presented the constructions
of CPA and CCA-secure IB-PRE schemes without random
oracles
Another related work is the proxy encryption cryptosystem
introduced by Mambo and Okamoto [26].
In a proxy en-
cryption scheme [14, 21, 26], A delegator allows a delegatee
to decrypt ciphertext intended for her with the help of a
proxy: an encryption for the delegator is ﬁrst partially de-
crypted by the proxy, and then fully decrypted by the del-
egatee. However, this scheme requires the delegatee to pos-
sess an additional secret for each delegation from Alice. In
contrast, the delegatee in proxy re-encryption systems only
needs his own private key as in a standard PKE.
Proxy re-encryption should not be confused with the uni-
versal re-encryption [19],
in which ciphertext is only re-
randomized, instead of replacing the public keys.
1.3 Organization
The rest of the paper is organized as follows. Section 2 gives
an introduction to bilinear pairings and related complex-
ity assumptions. In Section 3, we formalize the deﬁnition
and security notions for C-PRE systems. In Section 4, we
propose a C-PRE scheme, and prove its chosen-ciphertext
security under the 3-QBDH assumption. In Section 5, we
further extend our C-PRE scheme to obtain a conditional
proxy re-encryption scheme with multiple conditions. Fi-
nally, Section 6 lists some open problems and concludes this
paper.
2. PRELIMINARIES
2.1 Notations
Throughout this paper, for a prime q, let Zq denote {0, 1, 2,··· , q−
1}, and Z∗
q denote Zq\{0}. For a ﬁnite set S, x $← S means
choosing an element x from S with a uniform distribution.
Finally, a function f : N → [0, 1] is said to be negligible if
for all c ∈ N there exists a kc ∈ N such that f (k)  kc.
2.2 Bilinear Groups and Bilinear Pairings
Let G and GT be two cyclic multiplicative groups with the
same prime order q. A bilinear pairing is a map e : G×G →
GT with the following properties:
• Bilinearity: ∀g1, g2 ∈ G,∀a, b ∈ Z∗
q , we have e(ga
1 , gb
2) =
e(g1, g2)ab;
• Non-degeneracy: There exist g1, g2 ∈ G such that
e(g1, g2) (cid:54)= 1GT ;
compute e(g1, g2) for ∀g1, g2 ∈ G.
• Computability: There exists an eﬃcient algorithm to
2.3 Complexity Assumptions
The security of our proposed schemes is based on a complex-
ity assumption called 3-Quotient Bilinear Diﬃe-Hellman (3-
QBDH) assumption. The decisional version of this assump-
tion was recently used to construct a unidirectional proxy re-
encryption with chosen-ciphertext security [23]. We brieﬂy
review the n-QBDH assumption, a generalized version of
3-QBDH.
The n-QBDH problem in groups (G, GT ) is, given a tuple
(g, g1/a, ga,··· , g(an−1), gb) ∈ Gn+2 with unknown a, b $←
a2 . A polynomial-time algorithm B
Z∗
q , to compute e(g, g)
has advantage  in solving the n-QBDH problem in groups
(G, GT ), if
b
Pr[B(g, g
1
a , ga,··· , g(an−1), gb) = e(g, g)
b
a2 ] ≥ ,
where the probability is taken over the random choices of
a, b in Zq, the random choice of g in G, and the random bits
consumed by B.
Definition 1. We say that the (t, )-n-QBDH assump-
tion holds in groups (G, GT ) if no t-time adversary B has ad-
vantage at least  in solving the n-QBDH problem in groups
(G, GT ).
3. MODEL OF CONDITIONAL PROXY RE-
ENCRYPTION
In this section, we formalize the deﬁnition and security no-
tions for C-PRE systems.
3.1 Deﬁnition of C-PRE systems
Formally, a C-PRE scheme consists of the following seven
algorithms:
GlobalSetup(λ): The key generation algorithm takes as in-
It generates the global
put a security parameter λ.
parameters param.
KeyGen(i): The key generation algorithm generates the pub-
lic/secret key pair (pki, ski) for user Ui.
RKeyGen(ski, pkj): The partial re-encryption key genera-
tion algorithm, run by Ui, takes as input a secret key
ski and another public key pkj. It outputs a partial
re-encryption key rki,j.
CKeyGen(ski, w): The condition key generation algorithm,
run by user i, takes as input a secret key ski and a
condition w. It outputs a condition key cki,w.
Encrypt(pk, m, w): The encryption algorithm takes as input
a public key pk, a plaintext m ∈ M and a condition
w. It outputs ciphertext CT associated with w under
pk. Here M denotes the message space.
ReEncrypt(CTi, rki,j, cki,w): The re-encryption algorithm,
run by the proxy, takes as input a ciphertext CTi as-
sociated with w under public key pki, a partial re-
encryption key rki,j and a condition key cki,w. It out-
puts a re-encrypted ciphertext CTj under public key
pkj.
Decrypt(CT, sk): The decryption algorithm takes as input
a secret key sk and a cipertext CT. It outputs a mes-
sage m ∈ M or the error symbol ⊥.
3.2 Security Notions
In plain words, the semantic security of a C-PRE encryp-
tion should be preserved against both the delegate and the
proxy if they do not possess the proper condition key. More
formally, the semantic security against chose-ciphertext at-
tacks for a C-PRE scheme Π can be deﬁned via the following
game between an adversary A and a challenger C:
Setup. Challenger C runs algorithm GlobalSetup(λ) and gives
the global parameters param to A.
Phase 1. A adaptively issues queries q1,··· , qm where query
qi is one of the following:
• Uncorrupted key generation query (cid:104)i(cid:105): C ﬁrst runs
algorithm KeyGen(i) to obtain a public/secret key
pair (pki, ski), and then sends pki to A.
• Corrupted key generation query (cid:104)j(cid:105): C ﬁrst runs
algorithm KeyGen(j) to obtain a public/secret key
pair (pkj, skj), and then gives (pkj, skj) to A.
• Partial re-encryption key query (cid:104)pki, pkj(cid:105): C runs
algorithm RKeyGen(ski, pkj) to generate a partial
re-encryption key rki,j and returns it to A. Here
ski is the secret key with respect to pki.
It is
required that pki and pkj were generated before-
hand by algorithm KeyGen.
• Condition key query (cid:104)pki, w(cid:105): C runs algorithm
CKeyGen(ski, w) to generate a condition key cki,w
and returns it to A. It is required that pki was
generated beforehand by algorithm KeyGen.
• Re-encryption query (cid:104)pki, pkj, (w, CTi)(cid:105): To re-
ply this query, challenger C runs algorithm ReEncrypt(CTi, RKeyGen(ski, skj), CKeyGen(ski, w)),
and returns the resulting ciphertext CTj to A. It
is required that pki and pkj were generated be-
forehand by algorithm KeyGen.
• Decryption query (cid:104)pk, (w, CT)(cid:105) or (cid:104)pkj, CTj(cid:105): Here
(cid:104)pk, (w, CT)(cid:105) and (cid:104)pk, CT(cid:105) denote the queries on
original ciphertexts and re-encrypted ciphertexts
respectively. Challenger C returns the result of
Decrypt(CT, sk) to A. It is required that pk was
generated beforehand by algorithm KeyGen.
The correctness of C-PRE means that, for any condition
w, any m ∈ M, any (pki, ski) ← KeyGen(i), (pkj, skj) ←
KeyGen(j), and CTi = Encrypt(pki, m, w),
PrˆDecrypt(CTi, ski) = m˜ = 1, and
PrˆDecrypt (ReEncrypt(CTi, RKeyGen(ski, pkj), CKeyGen(ski, w)), skj) = m˜ = 1;
PrˆDecrypt`ReEncrypt(CTi, RKeyGen(ski, pkj), CKeyGen(ski, w
´ =⊥˜ = 1 − neg(λ),
PrˆDecrypt (ReEncrypt(CTi, RKeyGen(ski, pkj(cid:48) ), CKeyGen(ski, w)), skj) =⊥˜ = 1 − neg(λ).
while for any other condition w(cid:48) and user j(cid:48) with w(cid:48) (cid:54)= w
and j(cid:48) (cid:54)= j, we have
)), skj
(cid:48)
Challenge. Once A decides that Phase 1 is over, it outputs
a target public key pki∗ , a target condition w∗ and two
equal-length plaintexts m0, m1 ∈ M. C ﬂips a random
coin δ ∈ {0, 1}, and sets the challenge ciphertext to be
CT∗ = Encrypt(pki∗ , mδ, w∗), which is sent to A.
Phase 2. A adaptively issues queries as in Phase 1, and C
answers them as before.
Guess. Finally, A outputs a guess δ(cid:48) ∈ {0, 1} and wins the
game if δ(cid:48) = δ.
Remark 1. Blaze, Bleumer and Strauss [4] diﬀerentiated
two types of proxy re-encryption systems: bidirectional PRE
and unidirectional PRE. In bidirectional PRE systems, the
re-encryption key allows the proxy to translate Alice’s ci-
phertext to Bob’s and vice versa.
In unidirectional PRE
systems, the re-encryption key can used only for one direc-
tion. In general, unidirectional PRE systems are preferable