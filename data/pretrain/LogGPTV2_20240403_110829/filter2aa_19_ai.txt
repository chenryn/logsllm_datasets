一旦被攻击者连接到僵尸网络，您就可以完全控制其浏览器。您可以在设备、浏览器和启用的功能基础上，开展各种类型的攻击。采用社会工程策略，通过Flash Update提示推送恶意软件，可以很好地演示XSS攻击过程，如图3.7所示。
图3.7
执行攻击后，在被攻击者的计算机上显示弹出窗口，引诱安装更新软件，其中包含附加的恶意软件，如图3.8所示。
图3.8
本书建议您花一些时间研究所有BeEF的后期利用模块，并了解JavaScript的强大功能。因为我们已经控制了目标的浏览器，所以需要弄清楚如何在红队活动中发挥作用。在发现了 XSS 漏洞并感染了目标主机，您还想做些什么？我们将在下一部分讨论这个问题。
3.3.6 盲XSS
盲XSS很少被讨论，因为它需要用户极大的耐心。什么是盲XSS？顾名思义，盲XSS是指执行存储的XSS静荷时，攻击者/用户看不到回显结果，仅有管理员或者后端工作人员才能看到。虽然这种攻击方式对于后端用户可能是非常致命的，但它经常会被遗漏。
假设某个应用程序有一个“联系我们”的页面，允许用户向管理员提供联系信息，以便以后联系。由于该数据的结果只能由管理员手动查看，因此请求用户是看不到的，如果应用程序存在XSS漏洞，则攻击者不会立即看到“alert(1)”的攻击效果。在这些情况下，我们可以使用XSS Hunter工具，验证盲XSS。
XSS Hunter的工作原理是，当JavaScript静荷执行时，截取被攻击者屏幕（他们正在查看的当前页面），并将屏幕截图发送回XSS Hunter的站点。当收到屏幕截图后，XSSHunter将发送静荷已执行的通知，并提供所有的详细信息。我们现在可以创建一个恶意的静荷，重新开始攻击。
禁用任何代理（Burp Suite）。
在XSS Hunter上创建账户。
登录XSS Hunter。
跳到静荷页面，选择静荷。
修改静荷，以便适应您的攻击方式或者构建多语言静荷，如图3.9所示。
检查XSS Hunter，查看静荷执行情况，如图3.10所示。
图3.9
图3.10
3.3.7 基于文档对象模型的跨站脚本攻击
理解反射和存储的跨站脚本（XSS）攻击相对简单。正如我们所了解的，服务器没有对用户/数据库的输入/输出进行充分验证，导致恶意脚本代码通过网站源代码形式呈现给用户。但是，在基于文档对象模型（DOM）的XSS攻击中，有些不同的地方，使用户产生了一些常见的误解。因此，我们需要花些时间来了解基于DOM的XSS。
当攻击者操纵网站应用程序的客户端脚本时，可以采用基于DOM的XSS攻击方式。如果攻击者将恶意代码注入文档对象模型中，并且强制客户端的浏览器读取恶意代码，则静荷将在读取数据后执行。
DOM究竟是什么？文档对象模型（DOM）是HTML属性的表示方法。由于您的浏览器无法解析这种HTML属性，因此需要解释器将HTML属性转化为DOM。
让我们浏览一下聊天支持网站。查看存在漏洞的网站应用程序，您应该能够看到聊天站点存在XSS漏洞。
创建一个账户。
登录。
跳到聊天页面。
输入，然后输入一些疯狂的XSS静荷！
在示例中，我们在服务器端配置Node.js环境，socket.io（Node.js的库）在用户和服务器之间创建Web套接字，客户端支持JavaScript和msg.msgText JavaScript脚本。正如图3.11和页面的源代码所示，您不会看到“警报”对话框直接弹出静荷，而在标准的反射/存储的 XSS 可以看到。在这里，我们收到的唯一提示表明来自于msg.name引用的静荷可能被调用了。有时候我们很难推断出静荷执行的位置，或者是否需要跳出HTML标记执行静荷。
图3.11
3.3.8 Node.js中的高级跨站脚本攻击
XSS漏洞反复出现的一个重要原因是，仅通过过滤标签或某些字符的方式很难防范该攻击方式。当静荷针对特定语言或框架进行定制时，XSS很难防御。每种语言在漏洞利用方面都有其独特之处，Node.js也是这样。
在本节中，您将看到一些特定语言如何实现XSS漏洞的例子。Node.js网站应用程序使用一种更常见的Web堆栈和配置文件。实现方式包括Express框架和Pug模板引擎。需要注意的是，默认情况下，除非通过模板引擎进行渲染，否则Express确实没有内置的XSS防护机制。当使用像Pug这样的模板引擎时，有两种常见的方法可以找到XSS漏洞：通过字符串插值和缓冲代码。
模板引擎有一个字符串插值的概念，这是表示字符串变量占位符的一种奇特方式。例如，我们可以用Pug模板格式为变量指定一个字符串。
\- var title = "This is the HTML Title"
\- var THP = "Hack the Planet"
h1 #{title}
p The Hacker Playbook will teach you how to #{THP}
注意，＃{THP}是THP之前分配变量的占位符。我们通常看到这些模板用于电子邮件分发消息。您是否收到过自动系统转发的电子邮件，内容是Dear ${first_name}…，而不是您的真实名字？这正是模板引擎运行的方式。
当上面的模板代码呈现为HTML时，它将如下所示。
This is the HTML Title
The Hacker Playbook will teach you how to Hack the Planet
幸运的是，在这种情况下，我们使用“＃{}”字符串插值，这是Pug插值的转义版本。如您所见，通过使用模板，我们可以创建可重用的代码，而且模板非常轻巧。
Pug 支持转义和非转义字符串插值。转义和未转义之间的区别是什么？好吧，使用转义字符串插值将对、'和“等字符进行HTML编码。这将有助于对用户输入进行验证。如果开发人员使用非转义字符串插值，那么通常会导致XSS漏洞。
此外，字符串插值（变量插值、变量替换或变量扩展）用于评估一个或多个占位符的字符串文字，结果是其中占位符替换为其对应的值。
在Pug中，转义和非转义字符串插值介绍如下。 
！{}，非转义字符串插值
＃{}，虽然转义字符串插值是转义的，但是，如果直接通过JavaScript传递它，仍然可能存在XSS漏洞
在JavaScript中，未转义的缓冲区代码以“！=”开头。“！=”之后的任何内容都将自动作为JavaScript执行。
只要允许插入原始HTML，就可能存在XSS漏洞。
在现实世界中，我们已经看到许多存在XSS漏洞的案例，原因是开发人员忘记了代码所处的上下文以及输入被传递的位置。让我们看看存在漏洞的聊天支持系统应用程序中的一些示例。访问虚拟机上的URL地址：http://chat:3000/xss。我们将逐步完成每一个练习来了解Node.js/Pug XSS。
练习1（http://chat:3000/xss）
在本例中，我们将字符串插值转义为段落标记。这是不可利用的，因为我们在HTML段落上下文中使用了正确的转义字符串插值符号。
访问http://chat:3000/xss，然后单击Exercise #1。
Pug模板源代码。 
p No results found for #{name1}
尝试输入并提交以下静荷。 
单击Exercise #1并查看，无结果输出。
查看HTML响应（查看页面的源代码），如图3.12所示。 
&＃x3C; script&＃x3E; alert(1)&＃x3C;/script&＃x3E;
图3.12
单击提交后，查看页面源代码（组合键）并搜索单词“alert”，您将看到静荷的特殊字符转换为HTML实体。在浏览器中，可以看到脚本标记，但没有呈现为JavaScript。这种字符串插值的使用方式是正确的，并且确实没有办法突破这个场景来找到XSS漏洞。下面让我们看一些糟糕的实现。
练习2
在本例中，我们在段落标记中使用“!{}”表示非转义字符串插值。这种方式容易存在XSS漏洞。任何基本的XSS静荷都会触发漏洞，例如。
跳到练习＃2。
Pug模板源代码。 
p No results found for !{name2}
尝试输入静荷。 
回应。 
单击提交后，我们应该看到弹出窗口。您可以通过查看页面源代码并搜索“alert”进行验证，如图3.13所示。
因此，当提交用户输入时，使用非转义字符串插值（!{name2}）会导致很多麻烦。这是一种糟糕的做法，不能用于处理用户提交的数据。输入的任何JavaScript代码都将在被攻击者的浏览器上执行。
图3.13
练习3
在这个例子中，我们在动态内联JavaScript中转义了字符串插值。这意味着代码受到保护，因为它被转义了，对吧？未必。这个例子存在漏洞，原因是输入所处的代码上下文。我们在Pug模板中看到，在转义插值之前，我们实际上是在一个脚本标记内。因此，任何JavaScript（即使是转义的）都会自动执行。因为在脚本标记内，所以静荷中不需要标记。我们可以直接使用JavaScript，例如alert(1)。
（1）跳到示例＃3。
（2）Pug模板源代码。
Pug。 
var user3 = #{name3};
p No results found for #{name3}
（3）此模板将解析成下面的HTML格式。
。
No results found for [escaped user input]。
。
（4）尝试输入静荷。
1;alert(1)。
（5）单击提交后，我们应该看到弹出窗口。您可以通过查看页面源代码并搜索“alert”进行验证。
有一个小小的改变，正确的写法是在插值周围添加引号。
（6）Pug模板源代码。
script。 
varuser3 =“＃{name3}”
练习4
在这个例子中，Pug非转义代码由“! =”表示，因为没有转义，所以程序很容易受到 XSS 攻击的影响。因此，在这种情况下，我们可以在输入字段添加简单的“”样式实施攻击。
Pug模板源代码。 
p != 'No results found for '+name4
尝试输入静荷。 
单击提交后，我们可以看到弹出窗口。您可以通过查看页面源代码并搜索“alert”进行验证。