### June 2010 [22]. Table 1: Correlation of Malware Families with Our "Milked" Malware Corpus for August 2010

| Family | Kit Designation | % Monetization Kit Seen | Functionality |
| --- | --- | --- | --- |
| Palevo | Info stealer | 7.50 | DoS, Info stealer |
| Hiloti | Info stealer | 4.69 | Downloader/PPI |
| Zbot | Spam | 3.62 | - |
| FakeRean | Info stealer | 3.47 | Rogue AV(s) |
| Onlinegames | 2.94 | - |
| Rustock | 2.66 | - |
| Ldpinch | 2.64 | Rogue AV(s) |
| Renos | 2.58 | Rogue software |
| Autoit | 2.54 | Downloader/PPI |
| Conficker | 2.53 | Worm |
| Opachki | 1.95 | Click Fraud |
| Buzus | 1.91 | Info stealer |
| Koobface | 1.17 | Downloader |
| Alureon | 1.16 | Downloader |
| Bredolab | 1.15 | Downloader/PPI |
| Piptea | 1.13 | Downloader/PPI |
| Ertfor | 0.91 | Rogue AV(s) |
| Virut | 0.91 | Downloader/PPI |
| Storm 2.0 | 0.80 | Spam |

**Table 1:** FireEye's top 20 malware families observed in their MAX Cloud network during the April–June 2010 period [22] and whether we observe them in our "milked" data for August 2010.

The column labeled "kit" designates families that are crimeware kits, which can be purchased and customized to create botnet variants. Each kit sold may represent an individual botnet with a separate owner. For popular kits like Zbot, many distinct botnet instances exist [33]. The "seen" column indicates whether we observed samples of the family in our milking data. We successfully milked 12 of the top 20 families, remain uncertain about the phylogeny of 3, and missed 5 (AutoIt, Buzus, Conficker, Koobface, Storm 2.0). We contacted FireEye to inquire about the 3 unknown families and, based on their response, believe they reflect generic tags used by AV vendors rather than specific malware families.

### 3.2 Milking PPI Providers

This section describes our milking operations. Figure 3 illustrates the architecture from milking the executables until their classification.

**PPI "Milker" Requirements:**
Each PPI service uses at least one downloader program. A PPI downloader has three main tasks: download client programs, execute them, and communicate successful installation to the PPI service for accounting. For each downloader used by a PPI service that we infiltrated, we built a program that mimics the network communication used by the downloader to obtain the client programs but does not implement the rest of the downloader's functionality, specifically executing the client programs and accounting. We call these programs "milkers" because they are used to extract the client programs distributed by the PPI provider.

**Downloader Classes:**
- **Basic PPI Downloaders:** Use plain HTTP and have hard-coded URLs for client programs. These downloads are unencrypted and easily detectable by network monitoring devices. Examples include LoaderAdv and GoldInstall-dl.
- **Advanced PPI Downloaders:** Use proprietary, often encrypted, C&C protocols. They first contact the C&C infrastructure to receive the list of URLs supplying client programs. Examples include Zlob, Virut, and GoldInstall-list. These downloaders still use HTTP for the downloads, sometimes encrypting the executables or disguising them as benign files (e.g., with a fake GIF header).

**Building the Milkers:**
Building a milker is most challenging for downloaders using undocumented C&C protocols and encryption routines. Our approach leverages previously proposed techniques for automatic binary code reuse [5, 16], which identify and extract parts of the executable related to specific functionalities. The final milker uses a mixture of C source code and assembly instructions. Building and testing a basic milker required one day of full work, while advanced milkers required two to five days. It is crucial to minimize traffic exchanged with real C&C servers to avoid detection. We learned this when the Zlob PPI service banned one of our computers during testing, which was resolved by moving to a different IP address.

**Updating the Milkers:**
PPI services frequently change their download URLs to bypass blacklists. Advanced milkers automatically download updated lists from the PPI C&C infrastructure. Basic milkers, with hard-coded URLs, stop working until updated. To update basic milkers, we develop network signatures to find new PPI downloaders within the executables we milk. If a match is found, new URLs are extracted and added. We also periodically query search engines and repositories for new traffic matching the network signatures, often finding new URLs immediately after changes.

**Anonymity and Geographical Diversity:**
To provide anonymity and geographical diversity, we route milkers through Tor [31] when possible. A milker achieves geographical diversity by using 15 Tor circuits, each terminating in a different country. We verify the exit node's IP address using the MaxMind GeoIP database [20]. For GoldInstall, LoaderAdv, and Virut, all network communication is conducted through Tor. For Zlob, we suspect the operators blacklist Tor exit nodes, so we run its milkers on Amazon’s EC2 cloud from hosts in two different countries without using Tor.

### 3.3 Running the Executables

We run each new milked executable under containment in the GQ malware farm [18], a platform for safe, controlled malware research. GQ confines each piece of malware with a custom containment policy, allowing us to decide per-flow whether to allow, drop, rewrite, or reflect traffic. Since the malware family and behavior are unknown, we use a containment policy called SinkAll to run thousands of executables unsupervised. This policy blocks network connections and redirects them to internal sink servers within the farm, allowing only DNS traffic to the Internet. The DNS sink server proxies requests and responses, spoofing successful responses with a fixed IP address to entice C&C communication.

SinkAll forwards non-DNS TCP traffic to internal sink servers, mimicking valid sessions for well-known protocols like HTTP and SMTP. All other TCP traffic goes to a generic sink server that accepts connections but does not respond. Samples that do not send any traffic are rerun on a bare host to detect anti-virtualization capabilities.

### 3.4 Classifying the Executables

We classify executables based on their network traffic. First, we manually cluster them based on traffic similarity and create a cluster signature. When possible, we tag clusters with community names like Rustock or Palevo.

Each malware sample run in the farm produces a network trace, processed with the Bro intrusion detection system [24] and custom analysis scripts. The scripts check for network traffic and, if none is generated, queue the executable for running on a bare host to check for anti-virtualization. If traffic is generated, we extract features such as protocols used, endpoints, destination ports, and content features from the payload. These features are used for clustering executables with similar network behaviors.

### Milker Downloads Summary

| PPI Service | Distinct Downloads | Start Date |
| --- | --- | --- |
| LoaderAdv | 4,334 | Aug 1, 2010 |
| GoldInstall | 4,488 | Aug 1, 2010 |
| Virut | 72 | Aug 1, 2010 |
| Zlob | 259 | Jan 3, 2011 |
| Total | 1,060,895 | - |

This summary provides an overview of the distinct downloads and start dates for each PPI service.