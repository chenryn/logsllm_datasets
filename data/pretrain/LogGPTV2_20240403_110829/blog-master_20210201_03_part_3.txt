+       from graph g, search_graph sg  
+       where g.f = sg.t  
+) search depth first by f, t set seq  
+  cycle f, t set is_cycle to true default false using path  
+select * from search_graph;  
+ f | t |   label    |                    seq                    | is_cycle |                   path                      
+---+---+------------+-------------------------------------------+----------+-------------------------------------------  
+ 1 | 2 | arc 1 -> 2 | {"(1,2)"}                                 | f        | {"(1,2)"}  
+ 1 | 3 | arc 1 -> 3 | {"(1,3)"}                                 | f        | {"(1,3)"}  
+ 2 | 3 | arc 2 -> 3 | {"(2,3)"}                                 | f        | {"(2,3)"}  
+ 1 | 4 | arc 1 -> 4 | {"(1,4)"}                                 | f        | {"(1,4)"}  
+ 4 | 5 | arc 4 -> 5 | {"(4,5)"}                                 | f        | {"(4,5)"}  
+ 5 | 1 | arc 5 -> 1 | {"(5,1)"}                                 | f        | {"(5,1)"}  
+ 1 | 2 | arc 1 -> 2 | {"(5,1)","(1,2)"}                         | f        | {"(5,1)","(1,2)"}  
+ 1 | 3 | arc 1 -> 3 | {"(5,1)","(1,3)"}                         | f        | {"(5,1)","(1,3)"}  
+ 1 | 4 | arc 1 -> 4 | {"(5,1)","(1,4)"}                         | f        | {"(5,1)","(1,4)"}  
+ 2 | 3 | arc 2 -> 3 | {"(1,2)","(2,3)"}                         | f        | {"(1,2)","(2,3)"}  
+ 4 | 5 | arc 4 -> 5 | {"(1,4)","(4,5)"}                         | f        | {"(1,4)","(4,5)"}  
+ 5 | 1 | arc 5 -> 1 | {"(4,5)","(5,1)"}                         | f        | {"(4,5)","(5,1)"}  
+ 1 | 2 | arc 1 -> 2 | {"(4,5)","(5,1)","(1,2)"}                 | f        | {"(4,5)","(5,1)","(1,2)"}  
+ 1 | 3 | arc 1 -> 3 | {"(4,5)","(5,1)","(1,3)"}                 | f        | {"(4,5)","(5,1)","(1,3)"}  
+ 1 | 4 | arc 1 -> 4 | {"(4,5)","(5,1)","(1,4)"}                 | f        | {"(4,5)","(5,1)","(1,4)"}  
+ 2 | 3 | arc 2 -> 3 | {"(5,1)","(1,2)","(2,3)"}                 | f        | {"(5,1)","(1,2)","(2,3)"}  
+ 4 | 5 | arc 4 -> 5 | {"(5,1)","(1,4)","(4,5)"}                 | f        | {"(5,1)","(1,4)","(4,5)"}  
+ 5 | 1 | arc 5 -> 1 | {"(1,4)","(4,5)","(5,1)"}                 | f        | {"(1,4)","(4,5)","(5,1)"}  
+ 1 | 2 | arc 1 -> 2 | {"(1,4)","(4,5)","(5,1)","(1,2)"}         | f        | {"(1,4)","(4,5)","(5,1)","(1,2)"}  
+ 1 | 3 | arc 1 -> 3 | {"(1,4)","(4,5)","(5,1)","(1,3)"}         | f        | {"(1,4)","(4,5)","(5,1)","(1,3)"}  
+ 1 | 4 | arc 1 -> 4 | {"(1,4)","(4,5)","(5,1)","(1,4)"}         | t        | {"(1,4)","(4,5)","(5,1)","(1,4)"}  
+ 2 | 3 | arc 2 -> 3 | {"(4,5)","(5,1)","(1,2)","(2,3)"}         | f        | {"(4,5)","(5,1)","(1,2)","(2,3)"}  
+ 4 | 5 | arc 4 -> 5 | {"(4,5)","(5,1)","(1,4)","(4,5)"}         | t        | {"(4,5)","(5,1)","(1,4)","(4,5)"}  
+ 5 | 1 | arc 5 -> 1 | {"(5,1)","(1,4)","(4,5)","(5,1)"}         | t        | {"(5,1)","(1,4)","(4,5)","(5,1)"}  
+ 2 | 3 | arc 2 -> 3 | {"(1,4)","(4,5)","(5,1)","(1,2)","(2,3)"} | f        | {"(1,4)","(4,5)","(5,1)","(1,2)","(2,3)"}  
+(25 rows)  
+  
+with recursive search_graph(f, t, label) as (  
+       select * from graph g  
+       union all  
+       select g.*  
+       from graph g, search_graph sg  
+       where g.f = sg.t  
+) search breadth first by f, t set seq  
+  cycle f, t set is_cycle to true default false using path  
+select * from search_graph;  
+ f | t |   label    |   seq   | is_cycle |                   path                      
+---+---+------------+---------+----------+-------------------------------------------  
+ 1 | 2 | arc 1 -> 2 | (0,1,2) | f        | {"(1,2)"}  
+ 1 | 3 | arc 1 -> 3 | (0,1,3) | f        | {"(1,3)"}  
+ 2 | 3 | arc 2 -> 3 | (0,2,3) | f        | {"(2,3)"}  
+ 1 | 4 | arc 1 -> 4 | (0,1,4) | f        | {"(1,4)"}  
+ 4 | 5 | arc 4 -> 5 | (0,4,5) | f        | {"(4,5)"}  
+ 5 | 1 | arc 5 -> 1 | (0,5,1) | f        | {"(5,1)"}  
+ 1 | 2 | arc 1 -> 2 | (1,1,2) | f        | {"(5,1)","(1,2)"}  
+ 1 | 3 | arc 1 -> 3 | (1,1,3) | f        | {"(5,1)","(1,3)"}  
+ 1 | 4 | arc 1 -> 4 | (1,1,4) | f        | {"(5,1)","(1,4)"}  
+ 2 | 3 | arc 2 -> 3 | (1,2,3) | f        | {"(1,2)","(2,3)"}  
+ 4 | 5 | arc 4 -> 5 | (1,4,5) | f        | {"(1,4)","(4,5)"}  
+ 5 | 1 | arc 5 -> 1 | (1,5,1) | f        | {"(4,5)","(5,1)"}  
+ 1 | 2 | arc 1 -> 2 | (2,1,2) | f        | {"(4,5)","(5,1)","(1,2)"}  
+ 1 | 3 | arc 1 -> 3 | (2,1,3) | f        | {"(4,5)","(5,1)","(1,3)"}  
+ 1 | 4 | arc 1 -> 4 | (2,1,4) | f        | {"(4,5)","(5,1)","(1,4)"}  
+ 2 | 3 | arc 2 -> 3 | (2,2,3) | f        | {"(5,1)","(1,2)","(2,3)"}  
+ 4 | 5 | arc 4 -> 5 | (2,4,5) | f        | {"(5,1)","(1,4)","(4,5)"}  
+ 5 | 1 | arc 5 -> 1 | (2,5,1) | f        | {"(1,4)","(4,5)","(5,1)"}  
+ 1 | 2 | arc 1 -> 2 | (3,1,2) | f        | {"(1,4)","(4,5)","(5,1)","(1,2)"}  
+ 1 | 3 | arc 1 -> 3 | (3,1,3) | f        | {"(1,4)","(4,5)","(5,1)","(1,3)"}  
+ 1 | 4 | arc 1 -> 4 | (3,1,4) | t        | {"(1,4)","(4,5)","(5,1)","(1,4)"}  
+ 2 | 3 | arc 2 -> 3 | (3,2,3) | f        | {"(4,5)","(5,1)","(1,2)","(2,3)"}  
+ 4 | 5 | arc 4 -> 5 | (3,4,5) | t        | {"(4,5)","(5,1)","(1,4)","(4,5)"}  
+ 5 | 1 | arc 5 -> 1 | (3,5,1) | t        | {"(5,1)","(1,4)","(4,5)","(5,1)"}  
+ 2 | 3 | arc 2 -> 3 | (4,2,3) | f        | {"(1,4)","(4,5)","(5,1)","(1,2)","(2,3)"}  
+(25 rows)  
+  
+-- various syntax errors  
+with recursive search_graph(f, t, label) as (  
+       select * from graph g  
+       union all  
+       select g.*  
+       from graph g, search_graph sg  
+       where g.f = sg.t  
+) cycle foo, tar set is_cycle to true default false using path  
+select * from search_graph;  
+ERROR:  cycle column "foo" not in WITH query column list  
+LINE 7: ) cycle foo, tar set is_cycle to true default false using pa...  
+          ^  
+with recursive search_graph(f, t, label) as (  
+       select * from graph g  
+       union all  
+       select g.*  
+       from graph g, search_graph sg  
+       where g.f = sg.t  
+) cycle f, t set is_cycle to true default 55 using path  
+select * from search_graph;  
+ERROR:  CYCLE types boolean and integer cannot be matched  
+LINE 7: ) cycle f, t set is_cycle to true default 55 using path  
+                                                  ^  
+with recursive search_graph(f, t, label) as (  
+       select * from graph g  
+       union all  
+       select g.*  
+       from graph g, search_graph sg  
+       where g.f = sg.t  
+) cycle f, t set is_cycle to point '(1,1)' default point '(0,0)' using path  
+select * from search_graph;  
+ERROR:  could not identify an equality operator for type point  
+with recursive search_graph(f, t, label) as (  
+       select * from graph g  
+       union all  
+       select g.*  
+       from graph g, search_graph sg  
+       where g.f = sg.t  
+) cycle f, t set label to true default false using path  
+select * from search_graph;  
+ERROR:  cycle mark column name "label" already used in WITH query column list  
+LINE 7: ) cycle f, t set label to true default false using path  
+          ^  
+with recursive search_graph(f, t, label) as (  
+       select * from graph g  
+       union all  
+       select g.*  
+       from graph g, search_graph sg  
+       where g.f = sg.t  
+) cycle f, t set is_cycle to true default false using label  
+select * from search_graph;  
+ERROR:  cycle path column name "label" already used in WITH query column list  
+LINE 7: ) cycle f, t set is_cycle to true default false using label  
+          ^  
+with recursive search_graph(f, t, label) as (  
+       select * from graph g  
+       union all  
+       select g.*  
+       from graph g, search_graph sg  
+       where g.f = sg.t  
+) cycle f, t set foo to true default false using foo  
+select * from search_graph;  
+ERROR:  cycle mark column name and cycle path column name are the same  
+LINE 7: ) cycle f, t set foo to true default false using foo  
+          ^  
+with recursive search_graph(f, t, label) as (  
+       select * from graph g  
+       union all  
+       select g.*  
+       from graph g, search_graph sg  
+       where g.f = sg.t  
+) cycle f, t, f set is_cycle to true default false using path  
+select * from search_graph;  
+ERROR:  cycle column "f" specified more than once  
+LINE 7: ) cycle f, t, f set is_cycle to true default false using pat...  
+          ^  
+with recursive search_graph(f, t, label) as (  
+       select * from graph g  
+       union all  
+       select g.*  
+       from graph g, search_graph sg  
+       where g.f = sg.t  
+) search depth first by f, t set foo  
+  cycle f, t set foo to true default false using path  
+select * from search_graph;  
+ERROR:  search sequence column name and cycle mark column name are the same  
+LINE 7: ) search depth first by f, t set foo  
+          ^  
+with recursive search_graph(f, t, label) as (  
+       select * from graph g  
+       union all  
+       select g.*  
+       from graph g, search_graph sg  
+       where g.f = sg.t  
+) search depth first by f, t set foo  
+  cycle f, t set is_cycle to true default false using foo  
+select * from search_graph;  
+ERROR:  search_sequence column name and cycle path column name are the same  
+LINE 7: ) search depth first by f, t set foo  
+          ^  
+-- test ruleutils and view expansion  
+create temp view v_cycle as  
+with recursive search_graph(f, t, label) as (  
+       select * from graph g  
+       union all  
+       select g.*  
+       from graph g, search_graph sg  
+       where g.f = sg.t  
+) cycle f, t set is_cycle to true default false using path  
+select f, t, label from search_graph;  
+select pg_get_viewdef('v_cycle');  
+                           pg_get_viewdef                             
+--------------------------------------------------------------------  
+  WITH RECURSIVE search_graph(f, t, label) AS (                    +  
+          SELECT g.f,                                              +  
+             g.t,                                                  +  
+             g.label                                               +  
+            FROM graph g                                           +  
+         UNION ALL                                                 +  
+          SELECT g.f,                                              +  
+             g.t,                                                  +  
+             g.label                                               +  
+            FROM graph g,                                          +  
+             search_graph sg                                       +  
+           WHERE (g.f = sg.t)                                      +  
+         ) CYCLE f, t SET is_cycle TO true DEFAULT false USING path+  
+  SELECT search_graph.f,                                           +  
+     search_graph.t,                                               +  
+     search_graph.label                                            +  
+    FROM search_graph;  
+(1 row)  
+  
+select * from v_cycle;  
+ f | t |   label      
+---+---+------------  
+ 1 | 2 | arc 1 -> 2  
+ 1 | 3 | arc 1 -> 3  
+ 2 | 3 | arc 2 -> 3  
+ 1 | 4 | arc 1 -> 4  
+ 4 | 5 | arc 4 -> 5  
+ 5 | 1 | arc 5 -> 1  
+ 1 | 2 | arc 1 -> 2  
+ 1 | 3 | arc 1 -> 3  
+ 1 | 4 | arc 1 -> 4  
+ 2 | 3 | arc 2 -> 3  
+ 4 | 5 | arc 4 -> 5  
+ 5 | 1 | arc 5 -> 1  
+ 1 | 2 | arc 1 -> 2  
+ 1 | 3 | arc 1 -> 3  
+ 1 | 4 | arc 1 -> 4  
+ 2 | 3 | arc 2 -> 3  
+ 4 | 5 | arc 4 -> 5  
+ 5 | 1 | arc 5 -> 1  
+ 1 | 2 | arc 1 -> 2  
+ 1 | 3 | arc 1 -> 3  
+ 1 | 4 | arc 1 -> 4  
+ 2 | 3 | arc 2 -> 3  
+ 4 | 5 | arc 4 -> 5  
+ 5 | 1 | arc 5 -> 1  
+ 2 | 3 | arc 2 -> 3  
+(25 rows)  
+  
```  
#### [PostgreSQL 许愿链接](https://github.com/digoal/blog/issues/76 "269ac3d1c492e938c0191101c7238216")
您的愿望将传达给PG kernel hacker、数据库厂商等, 帮助提高数据库产品质量和功能, 说不定下一个PG版本就有您提出的功能点. 针对非常好的提议，奖励限量版PG文化衫、纪念品、贴纸、PG热门书籍等，奖品丰富，快来许愿。[开不开森](https://github.com/digoal/blog/issues/76 "269ac3d1c492e938c0191101c7238216").  
#### [9.9元购买3个月阿里云RDS PostgreSQL实例](https://www.aliyun.com/database/postgresqlactivity "57258f76c37864c6e6d23383d05714ea")
#### [PostgreSQL 解决方案集合](https://yq.aliyun.com/topic/118 "40cff096e9ed7122c512b35d8561d9c8")
#### [德哥 / digoal's github - 公益是一辈子的事.](https://github.com/digoal/blog/blob/master/README.md "22709685feb7cab07d30f30387f0a9ae")
![digoal's wechat](../pic/digoal_weixin.jpg "f7ad92eeba24523fd47a6e1a0e691b59")
#### [PolarDB 学习图谱: 训练营、培训认证、在线互动实验、解决方案、生态合作、写心得拿奖品](https://www.aliyun.com/database/openpolardb/activity "8642f60e04ed0c814bf9cb9677976bd4")
#### [购买PolarDB云服务折扣活动进行中, 55元起](https://www.aliyun.com/activity/new/polardb-yunparter?userCode=bsb3t4al "e0495c413bedacabb75ff1e880be465a")
#### [About 德哥](https://github.com/digoal/blog/blob/master/me/readme.md "a37735981e7704886ffd590565582dd0")