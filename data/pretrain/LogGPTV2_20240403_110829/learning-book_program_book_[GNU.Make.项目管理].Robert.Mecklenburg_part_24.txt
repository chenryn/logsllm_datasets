makefile。automake产生自一组m4宏，这让你能够在输人文件（称为makefile.am）中
使用非常精简的符号。通常，automake会跟autoconf（对C/C++程序而言这是一个
具可移植性的支持包）一起使用，不过你不一定要使用autoconf。
对于需要具备最大可移植性的编译系统而言，尽管automake是一个不错的解决方案，
但是它所产生的makefile并不能使用GNUmake的任何高级功能，附加运算符（+=）除
外，因为automake对它提供特别的支持。此外，automake所接受的输入文件有点像一
般的makefile。因此，使用automake（但不使用autoconf）跟使用最小公分母法没有
太大的差别。
---
## Page 163
第八章
C与C++
本章将会延伸第六章所提到的议题与技术并将之应用在C与C++的项目上。我们将会继
续以“在非递归的makefile上编译mp3player”来举例说明。
分开源文件与二进制文件
如果我们想要以单一源文件树支持多个平台，以及为每个平台编译多个版本，将源文件
树和二进制文件树分开是必要的，所以我们该这么做呢？make程序最初是设计来处理
放在单一目录里的文件的。尽管情况已经有显著的改变，但make并未把它的根本忘掉，
当它所要更新的文件被存放在当前目录（或它的子目录）中时，make也能将多个目录
管理得很好。
简单的办法
最简单的办法，就是让make将二进制文件存放在与源文件不同的目录里，并从二进制
文件目录来启动make程序。此时，输出文件的访问可通过相对路径，而输人文件的位
置则必须明确指定其路径或是通过对vpath的搜索。不管是哪种状况，我们都需要在不
同的地方引用到源文件目录，所以我们会在开头使用一个变量来保存它：
SOURCE_DIR:=../mp3_player
让我们来看例6-3的非递归makefile在这个办法下有何变化：source-to-object没有
改变，不过subdirectory函数现在需要考虑到源文件的相对路径。
#S(call source-to-object,source-file-list)
source-to-object=S(subst.c,.o,s（filter .c,$1))\
$（subst.y,.o,$（filter.y.$1)))
S（subst.1,.o,$（filter &.1,$1))
153
---
## Page 164
154
第八章
#$（subdirectory)
subdirectory= $(patsubst $（SOURCE_DIR)//module.mk,&，\
$(WOrdS S(MAKEFILE_LIST)),S(MAKEFILE_LIST)）)
在我们现在的makefile中，MAKEFILE_LIST里所列出的文件将会包含源文件的相对路
径。所以，如果要从中取出各模块目录的相对路径，我们就必须去除前缀以及module.mk
后缀。
接着，为了协助make找到源文件，我们将会使用vpath的功能：
Vpath &.yS(SOURCE_DIR)
vpath &.1$（SOURCE_DIR)
vpath &.cS（SOURCE_DIR)
文件时，如果它在输出文件树的当前目录中找不到该文件，它将会搜索SOURCE_DIR。
然后，我们必须更新include_dirs变量：
include_dirs:=1ib $(SOURCE_DIR)/1ib $(SOURCE_DIR)/include
除了源文件目录，此变量现在还包含了二进制文件树的lib目录，因为自动产生的yacc
和lex头文件将会存放在那里。
make的include指令必须被更新为从它们的源文件目录来访问module.mk文件，因为
make并不会使用vpath来查找引l人文件：
include $（patsubst $,$（SOURCE_DIR)/&/module.mk,$(modules))
最后，我们会创建输出目录本身：
create-output-directories:=
$（shell for f in S（modules）;
do
done)
这个赋值动作将会创建一个虚拟变量，它的值远永不会被用到。但因为这是个简单的赋
值动作，所以我们可以确定，在make执行任何其他工作之前这些目录已经被创建好了。
我们必须“手动”创建这些目录，因为yacc、1ex以及其他依存文件的产生并不会创
建输出目录本身。
确定这些目录是否被创建的另一个方法，就是将这些目录设定成依存文件（.d文件）的
必要条件。这并不是一个好主意，因为目录其实无法作为必要条件。Yacc、1ex或其他
依存文件与目录的内容并无依存关系，也不应该只是因为目录的时间戳已经更新而去重
---
## Page 165
C与C++
155
新产生它们。事实上，当某个输出目录中的一个文件被加人或移除时，如果项目会被重
新编译，这将会是一个非常没有效率的方法。
module.mk文件的修改甚至更为简单：
1ocal_src := S(addprefix $(subdirectory)/.playlist.y scanner.1)
$（eval S(cal1 make-1ibrary,S(subdirectory)/libdb.a,$(local_src)))
.SECONDARY:$（call generated-source,S(local_src))
$（subdirectory)/scanner.d:S(subdirectory)/playlist.d
原来的makefile提供了以通配符寻找源文件的功能。要恢复此功能相当简单，留给读者
自己进行练习。这个版本有一个毛病，看来似乎是原本的makefile的一个缺陷。当此范
例被运行时，我发现依存文件scanner.d会在它所依存的playlist.h被产生之前先被产生。
这项依存关系在原本的makefile中就漏列了，只是碰巧没有出问题而已。要让所有的依
存关系都正确是一项困难的任务，即使是在小型的项目中。
假设源文件被存放在mp3_player子目录中，下面是我们以这个新版的makefile编译项目
的方法：
$mkdirmp3_player_out
$cdmp3_player_out
$make --file=../mp3_player/makefile
尽管这是一个正确无误可以正常运行的makefile，不过却相当麻烦。首先你必须将目录
切换至输出目录，然后必须加上--file（或-f）选项。我们可以使用如下的shell脚
本来解决这个问题：
#！/bin/bash
if [{！-d $OUTPUT_DIR ]]
then
if!mkdir -p SOUTPUT_DIR
then
echo*Cannot createoutput directory*>/dev/stderr
exit1
fi
fi
cd SOUTPUT_DIR
make--file=SSOURCE_DIR/makefile"S@"
这个脚本会假设源文件和输出文件目录被分别存放在环境变量SOURCE_DIR和
OUTPUT_DIR中。这是一个标准实现方式，可以让开发人员在不用频繁地键入路径的状
况下轻易切换文件树。
---
## Page 166
156
第八章
最后，有一点必须注意：make或makefile并无法避免开发人员从源文件树来运行
makefile，即使它应该从二进制文件树来运行。这是一个常见的问题，而且某些命令脚
本的行为可能会让问题雪上加霜。举例来说，如下的clean工作目标：
PHONY:clean
clean:
S（RM)-r*
会把用户的源文件树全部删除掉！似平应该在最上层的makefile中对此进行检查以防万
一：
$（if S（fi1ter S（notdir $（SOURCE_DIR)),$（notdir S(CURDIR))）,\
$（error Please run the makefile from the binary tree.))
这段代码会测试当前的工作目录（S（notdirS（cURDIR）））与源文件目录（$（notdir
S（SOURCE_DIR）））是否相同。如果一样，则会输出错误信息并且结束运行。因为if和
error等函数会被扩展成空值，所以我们可以将这两行直接放在SOURCE_DIR定义之后。
麻烦的办法
有些开发人员觉得每次都必须切换到二进制文件树实在太麻烦了，所以他们不遗余力地
想避免这么做：或者，makefile的维护人员的工作环境可能不适合使用shell脚本的封装
（wrapper）或别名。不管是哪一种状况，makefile都可以被修改成从源文件树中运行
make，以及通过为所有的输出文件名前置路径，来把二进制文件存放在独立的输出文件
树中。这个时候，我通常会使用绝对路径，因为这样可提供较大的灵活性，然而这将会
让命令行的长度问题恶化。输入文件仍继续使用相对于makefile所在目录的路径。
例8-1所示的makefile已经被修改成让make能够从源文件树运行，以及将二进制文件
写出至二进制文件树中。
例8-1：把源文件和二进制文件分开的makefile允许从源文件树来运行
SOURCE_DIR:=/test/book/examples/ch07-separate-binaries-1
BINARY_DIR:=/test/book/out/mp3_player_out
#$(call source-dir-to-binary-dir,directory-list)
source-dir-to-binary-dir =S(addprefix S(BINARY_DIR)/.$1)
$(call source-to-object,source-file-list)
source-to-object =S(call source-dir-to-binary-dir,
s（subst.c,.o,s（filter 8.c,s1))
S（subst.y..o,s(filter 8.y,$1))
$（subst.l,.o,$（filter 8.1,$1)))
#$（subdirectory)
subdirectory=S（patsubst 8/module.mk,$,
---
## Page 167
与C++
157
s(word
S（WOrdS S(MAKEFILE_LIST)),S(MAKEFILE_LIST)))
#S(cal1 make-library,library-name,source-file-list)
define make-library
libraries += S(BINARY_DIR)/S1
sources
+=$2
$（BINARY_DIR)/S1:S(call source-dir-to-binary-dir,
$（subst.c,.o,S（filter .c,s2）)
$（subst.y..o,$（filter .y.S2))
$(subst.1,.o,S（filter &.1,$2)))
S（AR) S(ARFLAGS)SS@ SS^
endef
#S(call generated-source,source-file-list)
generated-source = S(call source-dir-to-binary-dir,
$（subst.y，.c,$（filter .y,$1))
S(subst .y,.h,$（filter .y,$1))
$（subst.1,.c,$（filter $.1,$1）))
S（filter .c,$1)
#S（compile-rules）
define compile-rules
$（foreach f,$（local_src）,\
S（cal1 one-compile-rule,$(call source-to-object,sf),$f))
endef
#$(call one-compile-rule,binary-file,source-files)
define one-compile-rule
s1:S(call generated-source,$2)
S(COMPILE.C)-O $S@ $$s$θ.tmp
$(MV）SSθ.tmp SS@
endef
modules
:=1ib/codec1ib/db1ib/uiapp/player
programs
:=
libraries
:=
sources
:=
objects
=
$(call source-to-object,$(sources))
dependencies
=
$（subst.o,.d,$（objects))
include_dirs:= $(BINARY_DIR)/1ib 1ib include
CPPFLAGS
+$（addprefix-I，S（include_dirs）)
vpath 8.h s(include_dirs)
MKDIR:=mkdir
-P
AW
=mV-f
RM
rm-f
---
## Page 168
158
第八章
SED:=sed
TEST:= test
create-output-directories:=
$（shell for f in $(call source-dir-to-binary-dir,S（modules));
do
done)
all:
include $(addsuffix /module.mk,S(modules))
.PHONY:a11
all:S(programs)
.PHONY:1ibraries
libraries:$(libraries)
.PHONY:clean
clean:
$（RM)-r S（BINARY_DIR)
ifneq“S(MAKECMDGOALS)"*clean
include $(dependencies)
endif
在这个版本的makefile中，source-to-object已经被修改成“为目录列表前置二进制
文件树的路径”。这个前置路径的动作将会进行许多次，所以我们会把它编写成函数：
SOURCE_DIR:= /test/book/examples/ch07-separate-binaries-1
BINARY_DIR:=/test/book/out/mp3_player_out
#S(call source-dir-to-binary-dir.directory-list)
source-dir-to-binary-dir=S(addprefix S(BINARY_DIR)/,$1)
#S(call source-to-object,source-file-list)
source-to-object =$(call source-dir-to-binary-dir,
$（subst.c,.o,s（filter .c,$1))
$（subst.y,.o,s（filter .y.$1))
$（subst.1,.o,$（filter .l,$1)))
make-1ibrary函数同样也会被改成为输出文件前置BINARY_DIR。subdirectory函数
将会恢复到它前一个版本的样子，因为引人文件的路径又变成了相对路径。有一个令人
意外的小障碍：make3.80中有一个缺陷会使得它无法在新版的make-1ibrary中调用
source-to-object。这个缺陷在3.81版中已经被修复，我们可以手动扩展source-
to-object函数以越过此缺陷。
现在我们要来研究较复杂的部分。当输出文件无法直接通过相对于makefile的路径来访
问时，就不会再执行隐含规则了。例如，当源文件与二进制文件位于相同的目录时，或