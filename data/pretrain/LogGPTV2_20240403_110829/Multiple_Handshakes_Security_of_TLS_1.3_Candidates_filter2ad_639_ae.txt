MH,A = 1, if at least one of the following conditions hold:
1 There exists two distinct labels label, label(cid:2) such that la-
bel.lev = label(cid:2).lev, label.mode = label(cid:2).mode, label.sidi
= label(cid:2).sidi (cid:9)= ⊥ for some stage i, label.stexe (cid:9)= rejectedi,
(cid:9)= label(cid:2).Ki.
and label(cid:2).stexe (cid:9)= rejectedi, but
(Different session keys in some stage of partnered sessions.)
label.Ki
494494
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:15:40 UTC from IEEE Xplore.  Restrictions apply. 
label,
label(cid:2)
labels label,
2 There
exists
4 There exists two distinct
(cid:9)= ⊥ for some stage i,
two distinct
label.lev = label(cid:2).lev,
labels
such
label.mode = label(cid:2).mode,
that
label.sidi (cid:9)= ⊥, label(cid:2).sidi (cid:9)= ⊥,
label.sidi (cid:9)= label(cid:2).sidi
for some stage i, label.stexe (cid:9)= rejectedi, and label(cid:2).stexe
(cid:9)= rejectedi, but label.Ki = label(cid:2).Ki. (Same session keys
in some stage of non-partnered sessions.)
label(cid:2) such that
labels label,
3 There exists two distinct
label.lev = label(cid:2).lev, label.mode = label(cid:2).mode,
and
(cid:9)= ⊥ for some stage i, but
label.sidi = label(cid:2).sidi
label.authi (cid:9)= label(cid:2).authi. (Different authentication types
in some stage of partnered sessions.)
label(cid:2) such that
label.lev = label(cid:2).lev, label.mode = label(cid:2).mode,
and
label.sidi = label(cid:2).sidi (cid:9)= ⊥ for some stage i, but label.cidi
(cid:9)= label(cid:2).cidi or label.cidi = label(cid:2).cidi = ⊥. (Different
or unset contributive identiﬁers in some stage of partnered
sessions.)
5 There exists two distinct labels label, label(cid:2) such that la-
bel.lev = label(cid:2).lev, label.mode = label(cid:2).mode, label.sidi
= label(cid:2).sidi
label.authi =
label(cid:2).authi ∈ {unilateral,mutual}, label.role = initiator,
and label(cid:2).role = responder, but label.V (cid:9)= label(cid:2)
.U, or
label.U (cid:9)= label(cid:2)
.V (only when label.authi = mutual), or
label.psidU,V,k (cid:9)= label(cid:2).psidV,U,k (only when label.authi
= mutual). (Different
intended authenticated partner or
different key indexes in some stage of partnered sessions.)
label(cid:2) such that
label.mode = label(cid:2).mode, and
label.lev = label(cid:2).lev,
label.sidi = label(cid:2).sidj (cid:9)= ⊥ for some stage i and j with i
(cid:9)= j. (Different stages share the same session identiﬁer.)
7 There exists three distinct labels label, label(cid:2), label(cid:2)(cid:2) such
label.mode =
that
label(cid:2).mode = label(cid:2)(cid:2).mode, and label.sidi = label(cid:2).sidi =
label(cid:2)(cid:2).sidi (cid:9)= ⊥ for some stage i. (More than two sessions
share the same session identiﬁer.)
8 There exists two labels label, label(cid:2) such that label.mode
(cid:9)= label(cid:2).mode and label.sidi = label(cid:2).sidj (cid:9)= ⊥ for some
stage i and j. (Different protocol modes share the same
session identiﬁer.)
label(cid:2) such that label.lev
(cid:9)= label(cid:2).lev, label.mode = label(cid:2).mode, and label.sidi =
label(cid:2).sidj (cid:9)= ⊥ for some stage i and j. (Different protocol
levels share the same session identiﬁer.)1
We say MH is Match-secure, if for all PPT adversaries A the
MH,A = 1] is negligible
advantage function AdvMatch
in the security parameter.
label.lev = label(cid:2).lev = label(cid:2)(cid:2).lev,
9 There exists two labels label,
6 There exists two distinct
MH,A = Pr [GMatch
labels label,
Next, we deﬁne the key secrecy for multiple handshakes
protocols.
Deﬁnition 2 (Key Secrecy). Let MH be a multiple hand-
shakes protocol with key distribution D and authenticity prop-
erties AUTH, and a PPT adversary A interacting with MH
1Note that, during the description of the last goal, the case that label.lev (cid:3)=
label(cid:3).lev, label.mode (cid:3)= label(cid:3).mode has been contained in the eighth case
and thus can be omitted.
:
(semi-static)
via the queries deﬁned in III − C within the following game
Key−Secrecy,D
MH,A
G
Setup. The challenger generates
long-term
public/private-key pairs for each participant U ∈ U, chooses
$←− {0, 1} at random, and sets lost ← false.
the test bit btest
Query. The adversary A receives the generated public
keys and has access to the queries NewSession, Send,
NewTempKey, NewPreshareKey, Reveal, Corrupt, and
Test.
Guess. At some point, A stops and outputs a guess b.
Finalize. The challenger sets the ‘lost’ ﬂag to lost ← true
if there exist two labels label, label(cid:2) such that label.sidi
= label(cid:2).sidi, label.stkey,i = revealed, and label(cid:2).testedi =
true. (Adversary has tested and revealed the key in a single
session or in two partnered sessions.). 2
We say that A wins the game, denoted by GKey−Secrecy,D
= 1,
if b = btest and lost = false. Then a multiple handshakes
protocol MH is secure against key secrecy, if for all PPT
adversaries A the advantage function AdvKey−Secrecy,D
=
Pr [GKey−Secrecy,D
2 is negligible in the security
MH,A
parameter.
= 1] − 1
MH,A
MH,A
Deﬁnition 3 (Multi-Level&Stage Security). We say a
multiple handshakes protocol MH is Multi-Level&Stage-
secure in a level (stage)-key-dependent resp. level (stage)-key-
independent and non-forward-secret resp. stage-j-forward-
secret manner with concurrent authentication types AUTH if
MH satisﬁes both Match Security and Key Secrecy.
(cid:2)
Remark 2. Note that when limited to a single level and mode,
our execution environment
security experiment is equivalent
to the original security model and deﬁnition of Dowling et al.
[19].
IV. SECURITY OF THE DRAFT-10 MULTIPLE HANDSHAKES
In this section, we analyze the security of multiple
handshakes speciﬁed in TLS 1.3 draft-10 under the Multi-
Level&Stage security model. Also, we analyze the reason
why our proof cannot make use of existing security results in
a black-box compositional way [22][19].
A. Multi-Level&Stage Security of TLS 1.3 draft-10
Firstly, we deﬁne the session identiﬁers and contributive i-
dentiﬁers for the stages in different running modes as speciﬁed
in TLS 1.3 draft-10 to be the unencrypted messages sent and
received excluding the Finished messages:
Mode1 (full handshake):
sid1 = (ClientHello‘+’KeyShare, ServerHello‘+’KeyShare);
sid2 = (sid1, EncryptedExtensions,
ServerConﬁguration∗, ServerCertiﬁcate∗,
CertiﬁcateRequest∗, ServerCertiﬁcateVerify∗,
ClientCertiﬁcate∗, ClientCertiﬁcateVerify∗ );
2In the security game, the winning conditions are independent of key
dependency, forward secrecy, and authentication properties of MH, as those
are directly integrated in the affected (Reveal and Corrupt) queries and the
ﬁnalization step of the game. For example, Corrupt is deﬁned differently for
non-forward-secrecy versus stage-j forward secrecy.
495495
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:15:40 UTC from IEEE Xplore.  Restrictions apply. 
sid3 = (sid2, “RMS”);
sid4 = (sid2, “EMS”).
Concerning the contributive identiﬁers, we let the client
(resp. server) on sending (resp. receiving) the ClientHel-
lo‘+’KeyShare messages set
cid1 = (ClientHello‘+’KeyShare), and subsequently, on re-
ceiving(resp. sending) the ServerHello‘+’KeyShare mes-
sages, extend it to
cid1 = (ClientHello‘+’KeyShare, ServerHello‘+’KeyShare),
the other contributive identiﬁers are set to cid2 = sid2, cid3 =
sid3 and cid4 = sid4 by each party on sending its respective
Finished message.
Mode2 (0-RTT):
sid1 = (ServerConﬁguration−1,ServerCertiﬁcate−1,
sid2 = (sid1, EncryptedExtensions, ClientCertiﬁcate∗,
ClientHello‘+’KeyShare
‘+’EarlyDataIndication);
ClientCertiﬁcateVerify∗,
ServerHello‘+’KeyShare‘+’EarlyDataIndication);
ServerConﬁguration∗, ServerCertiﬁcate∗,
CertiﬁcateRequest∗, ServerCertiﬁcateVerify∗);
sid3 = (sid2, EncryptedExtensions,
sid4 = (sid3, “RMS”);
sid5 = (sid3, “EMS”).
Concerning the contributive identiﬁers, we just
list
the
speciﬁc cid and its updating:
cid1 = sid1;
cid2 = (sid1, EncryptedExtensions, ClientCertiﬁcate∗,
cid4 = sid4; cid5 = sid5.
ClientCertiﬁcateVerify∗); cid2 = sid2; cid3 = sid3;
Note that ServerConﬁguration−1, ServerCertiﬁcate−1
denotes the corresponding message derived from the last
session.
Mode3 (PSK/resumption)
sid1 = (ClientHello‘+’PreSharedKeyExtension,
ServerHello‘+’PreSharedKeyExtension,
“Stage1”);
sid2 = (ClientHello‘+’PreSharedKeyExtension,
ServerHello‘+’PreSharedKeyExtension,
“Stage2”);
sid3 = (sid2, “RMS”);
sid4 = (sid2, “EMS”).
Concerning the contributive identiﬁers, we just
list
the
speciﬁc cid and its updating:
cid1 = (ClientHello‘+’PreSharedKeyExtension);
cid1 = sid1; cid2 = sid2; cid3 = sid3; cid4 = sid4.
Mode4 (PSK/resumption-(EC)DHE):
sid1 = (ClientHello‘+’KeyShare‘+’PreSharedKeyExtension,
ServerHello‘+’KeyShare‘+’PreSharedKeyExtension,
“Stage1”);
sid2 = (ClientHello‘+’KeyShare‘+’PreSharedKeyExtension,
ServerHello‘+’KeyShare‘+’PreSharedKeyExtension,
“Stage2”);
sid3 = (sid2, “RMS”);
sid4 = (sid2, “EMS”).
Concerning the contributive identiﬁers, we just
list
the
speciﬁc cid and its updating:
cid1 = (ClientHello‘+’KeyShare‘+’PreSharedKeyExtension);
cid1 = sid1; cid2 = sid2; cid3 = sid3; cid4 = sid4.
Theorem 1 (Multi-Level&Stage Security of TLS 1.3 draft-
10). Assume that pseudo-random function PRF is secure,
the signature scheme is secure against existential forgeries
under adaptive chosen-message attacks, the hash function is
collision resistant, the DDH problem and Gap-DH problem
are hard in the group G, then the TLS 1.3 draft-10 multiple
handshakes protocol is Multi-Level&Stage-secure.
Proof. Without loss of generality, we assume that the multiple
handshakes protocol Π consists of n successive sessions. We
prove this by induction on the number n. The sketch of the
proof is described by the following steps:
Step 1. First, we prove the theorem holds for the base case
of n = 1, i.e. Π just consists of a session label such
that label.mode = M1 and label.lev = 1, which has
been proved in [19]. (Lemma 1)
Step 2. Next, we prove that if a multiple handshakes protocol
Π consisting of n − 1 successive sessions is Multi-
(cid:2) combin-
Level&Stage-secure, then the protocol Π
ing Π with a session label(cid:2) is Match-secure, where
label(cid:2).mode = M2, M3 or M4. (Lemma 2)
Step 3. Finally, we prove that if a multiple handshakes pro-
tocol Π consisting of n − 1 successive sessions
(cid:2)
is Multi-Level&Stage-secure, then the protocol Π
combining Π with a session label(cid:2) is secure against
Key Secrecy, where label(cid:2).mode = M2, M3 or M4.
(Lemma 3, Lemma 4 and Lemma 5)
[19]
Lemma 1 (
).3 The TLS 1.3 draft-10 full hand-
shake is Multi-Level&Stage-secure in a key-independent
and stage-1-forward-secret manner with concurrent authen-
tication properties AUTH = (unauth,unauth,unauth), (u-
nauth,unilateral,unilateral), (unauth,mutual,mutual). For-
mally, for any efﬁcient adversary A, the Multi-Level&Stage-
security can be broken with advantage AdvMulti−Level&Stage,D
such that
H + 2nu.AdvEUF−CMA
AdvMulti−Level&Stage,D
≤ 4ns.