so that: (a) it is sufﬁcient to hold all variables and data for
decryption/signing, and (b) it can be completely ﬁlled into
the L1D cache. Note that we do not use any heap variable,
or store any data in heap, since heap variables are difﬁcult
to be limited within the allocated address space. Instead, all
sensitive data are stored in stack (as static variables). When
a user-mode process requests decryption/signing service, the
stack is redirected to the reserved space, before Copker starts to
compute with private keys. Therefore, all variables, including
the plain-text private keys, of the decryption/signing task are
strictly limited within the ﬁxed space. When the task ﬁnishes,
all the variables in the reserved space are erased.
To satisfy Criterion 3, Copker must be running in an atomic
section – all interrupts are disabled during the entire decryp-
tion/signing process. Copker enters atomic section before the
protected private keys are loaded, and exits atomic section
after the cache is erased. On multi-core CPUs, Copker only
disables local interrupts, i.e., only interrupts of the core that
runs Copker. Besides, Copker relies on the trustworthy OS to
prevent tasks on other cores from accessing the reserved space
during the decryption/signing process.
Finally, it is very difﬁcult to explicitly obtain consistency
status of RAM and caches. Consistency control is performed
transparently with the hardware. That is, it is almost impos-
sible to directly check with hardware about whether sensitive
3
information in cache has been synchronized to RAM. To verify
that sensitive information is not written to RAM, we design
a validation utility (see Section V-A for details) using the
instruction invd, which invalidates all cache entries without
ﬂushing modiﬁed data to RAM. After the decryption/signing
process, we invalidate all the cache entries, and then check
corresponding RAM content. Unchanged contents in RAM
imply that cache lines are never ﬂushed to RAM during the
decryption/signing process.
C. Private Key Management
Multiple private keys are supported in Copker. When
private keys are not used for decryption/signing,
they are
encrypted by an AES key (i.e., the master key) and stored
in hard disks or RAM. When a user-mode process invokes
Copker service, the corresponding private key is dynamically
loaded, decrypted by the master key, used, and ﬁnally erased
within the reserved address space.
The Master Key. The master key is derived from a password
entered by the user. We assume that the password is strong
enough to defeat brute-force attacks. The master key is always
protected by TRESOR [38] in four CPU debug registers
(in particular, db0/1/2/3),
to prevent cold-boot attacks.
These debug registers are privileged resources which are not
accessible from user space and are seldom used in regular
applications.
When the operating system boots, a command line prompt
is set up for the user to enter the password. The master key is
derived and copied to CPU cores. Then, all intermediate states
are erased. This vulnerable window lasts for a short period,
and only happens early in the kernel space, when the system
boots or recovers from the suspend-to-RAM state. Note that
before the system suspends, the master key is also erased from
registers [38].
With Copker, some hardware debug features become un-
available (e.g., debugging self-modifying codes and setting
memory-access breakpoints), because the debug registers are
occupied by the master key. Fortunately, the debug register is
not the only place to protect the master key against cold-boot
attacks. In the literature, other methods have been proposed
to store AES keys in different registers, e.g., Amnesia [45]
and AESSE [37]. They provide alternative solutions, when the
debug registers are necessary for other tasks in the system.
Private Key Loading. When the system boots, the encrypted
private keys are pre-loaded into RAM from the hard disk. The
private keys are securely generated, and then encrypted by the
same master key in a secure environment, e.g., on an off-line
trustworthy machine.
To support multiple private keys, and more importantly,
to release caches when Copker suspends, a plain-text private
key is only decrypted in caches when a decryption/signing
request is received. The detailed steps of private key loading
are shown in Figure 1: (1) the master key is derived from
the user’s password and stored in debug registers; (2) the
encrypted private keys are loaded into RAM from hard disks;
(3) when a decryption/signing request is received, the master
key is ﬁrst written to cache; (4) the requested private key,
which is encrypted by the master key, is loaded to cache, and
then (5) the private key is decrypted by the master key, to
perform private key operations. In the ﬁgure, memory locations
in shadow indicate encrypted data.
Different from (the original version) of TRESOR, Copker
performs AES decryption in caches instead of registers. The
plain-text private key will be used to decrypt or sign messages.
The operations are performed using CPU cache. Only the
decryption or signing results are written to RAM. The cache,
with plain-text private key, is erased and then released after
decryption/signing. Again, as mentioned above, these steps are
in an atomic section, which will not be interruptible by any
other operation.
0xFFFFFFFF
Output
Input
RSA Context
Private Key 1
4.
Private Key 1
Password
1.
(cid:139)(cid:137)(cid:87)(cid:165)(cid:90)
Hard Disk
2.
Key Id 1
Private Key 0
Key Id 0
0x00000000
RAM
Key Id 1
Master Key
Cache
5.
3.
Fig. 1: Dynamic Loading of the Private Keys
D. Copker: Computing with Private Keys without RAM
1) Cache-ﬁll Modes: Before presenting the details of the
Copker architecture, we ﬁrst introduce two cache-ﬁll modes,
which play important roles in Copker.
Write-Back Mode. In write-back mode, modiﬁed data is not
synchronized into the RAM until explicit or implicit write-
back operations. This type of memory access is supported by
most modern CPUs. It provides the best performance as long
as memory consistency is maintained. In the x86 architecture,
this mode is enabled only if both memory type range registers
(MTRRs) and page attribute tables (PATs) are set properly.
In write-back mode, on cache hits, the execution unit reads
from cache lines (read hit) or updates the cache directly (write
hit). Meanwhile, on cache misses, cache lines may be ﬁlled.
The accesses to memory are performed entirely on caches,
whenever possible. Write-back-to-RAM operations are only
performed when: (1) cache lines need to be evicted to make
room for other memory blocks, or (2) cache is explicitly
ﬂushed by instructions.
No-ﬁll Mode. The no-ﬁll mode is a processor mode that can
be set individually on each core. It is controlled by bit 29 and
bit 30 of the cr0 register on x86-compatible platforms. In
this mode, if the accessed memory is write-back type, cache
hits still access the cache. However, read misses do not cause
replacement (data is read either from another core that holds
the newest copy of the data, or directly from the RAM), and
write misses access the RAM directly. In short, the cache is
frozen, restricting cache accesses only to data that have been
loaded in the cache.
2) Computing within the Conﬁned Environment: To satisfy
the design criteria presented in Section III-B, we ﬁrst need
4
to construct a secure environment that contains all the data/-
variables to be used by Coker during the decryption/signing
process. The secure environment needs to be entirely stored
in the cache, and should not be switched to RAM at any
time. This environment should at least include the following
elements:
•
•
•
•
•
The master key: the AES mater key copied from debug
registers.
The AES context: the context of the AES master key,
including key schedule information.
The RSA context: the RSA context is initialized by the
private key, which is decrypted using the AES context.
Stack frames: stack frames of functions that compute
with private data.
Input/Output: input and output of the RSA private key
operations.
Note that the above environment shall not contain any heap
memory. Heap memories are dynamically allocated and the
locations are determined by the memory management service
of the operating system. Hence, it would be difﬁcult, if not
impossible, to restrict heap usage to pre-allocated address and
then lock them in cache. Thus, heap memory is not used in
Copker’s private key operations. In conventional implementa-
tions of RSA or other asymmetric cryptographic algorithms,
heap memory is primarily used for long integers. Hence, if we
are able to deﬁne long integers in a static manner, there is no
need to use heap memory. In Copker, long integers are handled
through static arrays instead of pointers. Therefore, only stack
variables are used in our implementation, and use of heap is
prohibited.
(cid:718)
(cid:140)(cid:137)(cid:151)
(cid:140)(cid:154)(cid:151)
(cid:718)
Register
0xFFFFFFFF
Code
System Stack
Data
(cid:258)
RAM
0x00000000
Output
Input
Cache Stack
RSA Context
Private Key
AES Context
Master Key
Data Cache
Fig. 2: Stack Switch
However, stack memory location is also not controllable
in high level programming languages, such as C. The OS
designates the memory locations in the stack for each thread
in each ring. Moreover, we cannot prohibit
the usage of
stack as with heap – without stack, procedure calls in C
becomes impossible. To tackle this problem, we temporarily
take over the control of stack location, using an approach
5
called stack switching, as demonstrated in Fig. 2 (details of the
implementation will be presented in the next section). When
we compute with private keys, Copker temporarily switches to
a customized stack, which, to our expectation, resides in the
secure environment deﬁned above.
When Copker is invoked to decrypt or sign a message, the
procedure is outlined as follows:
1)
2)
3)
4)
5)
6)
The debug registers, which are protected by TRE-
SOR, are loaded to reconstruct the master Key.
The AES context is initialized by the master key.
The encrypted private key is decrypted using the AES
context. Then, we check the integrity of the private
key block, by verifying that the public and the private
keys match.
Using the public and the private keys,
context is initialized.
The desired private key operation is performed and
the output is fed to the user.
The secure environment is erased.
the RSA
Note that the above operations are all performed on the
custom stack in the secure environment as deﬁned above.
3) Securing the Execution Environment: All the sensitive
data is conﬁned in the environment described above. We
must ensure that this environment only reside in caches when
it contains sensitive data. This environment should not be
ﬂushed into RAM whenever it is updated. Theoretically, this
requirement is perfectly supported by the write-back memory
type. However, modern operating systems are complicated:
setting the right memory type is only the ﬁrst step, while
more complicate mechanisms are needed to securely “lock”
this environment in caches.
Protecting Shared Cache. Higher-level caches (e.g. the L2
cache) are often shared among a set of cores in modern CPUs.
When the core running Copker (denoted as core-A) shares a
cache with another core (denoted as core-B), the tasks running
on core-B may compete for the shared cache with Copker. A
memory-intensive task running on core-B may occupy most
cache lines of the shared cache. If this shared cache is not
exclusive with inner caches (i.e., lower-level caches), Copker’s
cache lines in the inner caches are also evicted2. To prevent
this type, the cores sharing caches with core-A are forced to
enter no-ﬁll mode, so that they cannot evict Copker’s caches.
Here we deﬁne the minimum cache-sharing core set
(MCSC set). It is a set of cores that: (1) share with each other
some levels of caches that are not exclusive to inner caches,
and (2) do not share any cache with cores outside this set.
When Copker is running on a core of an MCSC set, all other
cores in this set shall switch to no-ﬁll mode.
Atomicity. Multi-tasking is commonly supported in operat-
ing systems via context switch, which may be triggered by
scheduling, interrupts or exceptions. When context switch is
triggered, the states of the running core, including registers,
are kept in the RAM. If the task is not resumed very soon,
the occupied cache lines may also be evicted. In both cases,
2Intel CPUs typically do not implement exclusive caches. Instead, they
implement non-inclusive or accidentally inclusive caches for L2 and inclusive
caches for L3.
sensitive data may be leaked, if Copker is computing with
private keys. To prevent
this, Copker works in an atomic
section while performing private key operations. In the atomic
section, Copker cannot be interrupted by any other task on
the same core. The atomic section ensures that all Copker
computations are entirely within the conﬁned environment,
which is stored only in the cache.
Clearing the Environment. After the decyption/signing task,
the plain-text keys and all intermediate states should be erased
before Copker leaves the atomic section. Because all
the
sensitive information is conﬁned in the reserved space, instead
of scattered in any memory allocated in heap, it is easier to
be erased. We only need to clean the reserved variable space
and all registers.
IV.
IMPLEMENTATION
Based on the design principles discussed in Section III-D,
we implement and integrate Copker into Linux kernel 3.9.2
for 32-bit x86 compatible platforms with SMP (symmetric
multiprocessing) support. We have not integrated Copker to
formally veriﬁed operating systems, such as seL4 and PikeOS.
However, such extension is completely feasible. In the proto-
type, Copker supports 2048-bit RSA, which could be easily
extended to support longer keys. Meanwhile, the master key
is a 128-bit AES key, which is restricted by the size of debug
registers in 32-bit mode, i.e., four 32-bit debug registers.
The interface exported to user space is provided by the
ioctl system call in a synchronous manner. The ioctl sys-
tem call takes a device-dependent request code to accomplish
speciﬁc functions in the kernel. In the prototype, we provide
3 functions:
•
•