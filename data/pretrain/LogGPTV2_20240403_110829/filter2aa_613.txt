# Bypassing Android Password Manager Apps Without Root

## Authors
- Stephan Huber
- Siegfried Rasthofer
- Steven Arzt
- Fraunhofer SIT

### About the Authors
**Stephan Huber**
- Mobile Security Researcher at Fraunhofer SIT
- Enjoys teaching students in Android (app) hacking
- Twitter: @teamsik

**Siegfried Rasthofer**
- Head of Secure Software Engineering at Fraunhofer SIT
- Founder of CodeInspect
- Website: www.rasthofer.info
- Twitter: @teamsik

### Acknowledgements
- Benedikt Hiemenz
- Daniel Hitzel
- Daniel Magin
- Joseph Varghese
- Julien Hachenberger
- Max Kolhagen
- Michael Tröger
- Philipp Roskosch
- Wittmann Andreas

## Introduction
This presentation aims to explore the vulnerabilities and potential bypass methods for Android password manager applications without requiring root access.

## Wish
(Encrypted or obfuscated text, possibly a placeholder for future content)

## Reality
Note: 
- **Password-Manager**: A tool that securely stores and manages passwords.
- **Password-Recycling**: The practice of reusing the same password across multiple accounts.
- **Browser Password-Manager**: A feature in web browsers that saves and autofills passwords.

## App Downloads on Google Play
| App | Downloads |
| --- | --- |
| Keeper | 10 – 50 million |
| Keepsafe | 10 – 50 million |
| 1Password | 1 – 5 million |
| Dashlane | 1 – 5 million |
| LastPass | 1 – 5 million |
| Avast | 0.5 – 1 million |
| MyPasswords | 0.5 – 1 million |
| F-Secure | 100 – 500 thousand |
| PasswordManager | 50 – 100 thousand |

## Security Requirements
- **Confidentiality**: Ensuring data is accessible only to authorized users.
- **Availability**: Ensuring data is accessible when needed.
- **Integrity**: Ensuring data is accurate and not tampered with.

## Potential Vulnerabilities
- **Premium features for free**: Exploiting logic flaws to access premium features.
- **Resetting master password with ease**: Weak reset mechanisms.
- **Breaking C.I.A (Confidentiality, Integrity, Availability)**: Various attack vectors.
- **Lost device scenario**: Accessing data on a lost device.
- **MitM attacks**: Intercepting and altering communication.
- **Via third-party app**: Exploitation through other installed apps.

## No-Root Scenario
### Diagram
- **Internet**
- **App**
- **Account Manager (master password)**
- **File (master password)**
- **PW-Manager App**
- **User1:pw1, User2:pw2, ...**
- **Database**
- **PC**

### Example: Premium Upgrade for Free
```java
public abstract class BasePreferenceActivity extends AppCompatPreferenceActivity {
    protected static boolean a = false;
    
    protected void onCreate(Bundle bundle) {
        boolean z = false;
        super.onCreate(bundle);
        if (getIntent().getIntExtra("com.xy.mo.apps.pwmgr.EXTRA_SUFCXNUQVRF", 0) == 2) {
            z = true;
        }
        a = z;
    }
}
```
- **ADB Command**:
  ```sh
  adb shell am start -n com.xy.mo.apps.pwmgr/.settings.DatabaseSettings --ei com.xy.mo.apps.pwmgr.EXTRA_SUFCXNUQVRF 2
  ```
- **Check Intent Value**:
  - Before Intent: `...`
  - After Intent: `...`

## Logic Flaw
### Forgot Password
- **Verification Code**: Check if the code is correct.
- **Security Question**: Check if the answer is correct.
- **Reset Master Password**: If both are correct, reset the master password.

### Attacker Flow
- **Attacker has physical device access**:
  - Read emails on the device.
  - Start settings.
  - Use the "Forgot Password" function.
  - Enter verification code (from emails).
  - Answer security question.
  - Reset master password.

### Side Effects
- **Change security question without authentication**.
- **Insert new data into the database**.
- **Turn off auto-destroy function** (enables brute forcing).

## Extracting and Decrypting Master Secret
### Extraction Process
- **ADB Backup**
- **MitM Attack**
- **Browser File Access**
- **Residue Attack**

### Decryption Process
- **Plaintext**
- **Custom Crypto**
- **Hardcoded Symmetric Keys**
- **Custom Obfuscation**

### Authentication Process
- **HTTP POST Request**:
  - Seed = time[ms]
  - Key = random(seed)
  - Enc_data = AES(key, auth_data)
  - Dec_data = AES(key, auth_data)

### Best Practices: Secure Communication
- **Android SSL Configuration**
- **Stronger SSL (Pinning)**
- **Use libraries with pinning support (e.g., OkHttp)**
- **URL Connection Example**:
  ```java
  URL url = new URL("https://example.org");
  URLConnection urlConnection = url.openConnection();
  InputStream in = urlConnection.getInputStream();
  ```

## Account Manager
- **Android AccountManager**:
  - Centralized registry for user's online accounts.
  - SQLite Database for storing tokens or temporary credentials.
  - API provides access for applications.

### Demo Time!
- **AccountManager**:
  - **ID, Email, Type, Token**
  - **Target App and Attacker App Installation**
  - **Collision and Uninstallation Scenarios**

### Broken Key Obfuscation
- **Master Secret and Encryption/Decryption**:
  - **Static Keys**
  - **Custom Obfuscation**

### Recommendations
- **Use Android KeyStore**
- **Key Derivation (e.g., PBKDF2, Conceal, bcrypt)**
- **No Static Keys**
- **Use AES/CBC or AES/GCM**
- **Disable Backup Flag**
- **Do Not Store Master Pass in Plaintext**
- **Do Not Store Master Pass in Local App Folder**

## Summary
- **Apps and Their Vulnerabilities**:
  - **Keeper, LastPass, 1Password, MyPasswords, Avast, F-Secure, Keepsafe, PwMgr, Mirsoft, Dash**
  - **Master/PIN, Hardcoded Key, Sandbox Bypass, Side Channel, Subdomain, Data Leakage, Partial Encryption, Broken Sync**

### Contact Information
- **Stephan Huber**: PI:EMAIL
- **Siegfried Rasthofer**: PI:EMAIL, Twitter: @teamsik, Website: www.team-sik.org

---

This document provides a comprehensive overview of the vulnerabilities and bypass methods for Android password manager applications, along with recommendations for securing these applications.