        mov REG_TMP, REG_G  # 0x04B:  'i' = alu('G', 4, 'i')
        sub REG_TMP, REG_i
        mov REG_i, REG_TMP
        mov REG_ARG0, REG_i # 0x050:  mov '\u{1}', 'i'
        call func_10        # 0x053:  call 0x10
        pop REG_G           # 0x058:  pop 'G'
        ret                 # 0x05A:  ret
        pop REG_G           # 0x05B:  pop 'G'
        ret                 # 0x05D:  ret
func_5e:
    push REG_G              # 0x05E:  push 'G'
    mov REG_G, REG_ARG0     # 0x060:  mov 'G', '\u{1}'
    mov REG_i, 0x2          # 0x063:  mov 'i', 0x00000002
    cmp REG_G, REG_i        # 0x069:  test 'G', 1, 'i'
    jg lab_7e               # 0x06D:  jmpc 0x7E
    mov REG_i, 1            # 0x072:  mov 'i', 0x00000001
    mov REG_RV, REG_i       # 0x078:  mov '\u{0}', 'i'
    pop REG_G               # 0x07B:  pop 'G'
    ret                     # 0x07D:  ret
    lab_7e:
        mov REG_i, 1        # 0x07E:  mov 'i', 0x00000001
        mov REG_TMP, REG_G  # 0x084:  'i' = alu('G', 4, 'i')
        sub REG_TMP, REG_i
        mov REG_i, REG_TMP
        mov REG_ARG0, REG_i # 0x089:  mov '\u{1}', 'i'
        call func_5e        # 0x08C:  call 0x5E
        mov REG_x, REG_RV   # 0x091:  mov 'x', '\u{0}'
        push REG_x          # 0x094:  push 'x'
        mov REG_i, 2        # 0x096:  mov 'i', 0x00000002
        mov REG_TMP, REG_G  # 0x09C:  'i' = alu('G', 4, 'i')
        sub REG_TMP, REG_i
        mov REG_i, REG_TMP
        mov REG_ARG0, REG_i # 0x0A1:  mov '\u{1}', 'i'
        call func_5e        # 0x0A4:  call 0x5E
        pop REG_x           # 0x0A9:  pop 'x'
        mov REG_y, REG_RV   # 0x0AB:  mov 'y', '\u{0}'
        mov REG_TMP, REG_x  # 0x0AE:  'i' = alu('x', 3, 'y')
        add REG_TMP, REG_y
        mov REG_i, REG_TMP
        mov REG_RV, REG_i   # 0x0B3:  mov '\u{0}', 'i'
        pop REG_G           # 0x0B6:  pop 'G'
        ret                 # 0x0B8:  ret
        pop REG_G           # 0x0B9:  pop 'G'
        ret                 # 0x0BB:  ret
func_bc:
    push REG_G              # 0x0BC:  push 'G'
    mov REG_G, REG_ARG0     # 0x0BE:  mov 'G', '\u{1}'
    mov REG_ARG0, REG_B     # 0x0C1:  mov '\u{1}', 'B'
    call Strlen             # 0x0C4:  call Strlen
    cmp REG_G, REG_RV       # 0x0C5:  test 'G', 0, '\u{0}'
    jge lab_12f             # 0x0C9:  jmpc 0x12F
    mov REG_ARG0, REG_B     # 0x0CE:  mov '\u{1}', 'B'
    mov REG_ARG1, REG_G     # 0x0D1:  mov '\u{2}', 'G'
    call charAt             # 0x0D4:  call CharAt
    mov REG_H, REG_RV       # 0x0D5:  mov 'H', '\u{0}'
    push REG_H              # 0x0D8:  push 'H'
    push REG_H              # 0x0DA:  push 'H'
    mov REG_i, 1            # 0x0DC:  mov 'i', 0x00000001
    mov REG_TMP, REG_G      # 0x0E2:  'i' = alu('G', 3, 'i')
    add REG_TMP, REG_i
    mov REG_i, REG_TMP
    mov REG_ARG0, REG_i     # 0x0E7:  mov '\u{1}', 'i'
    call func_5e            # 0x0EA:  call 0x5E
    pop REG_H               # 0x0EF:  pop 'H'
    mov REG_TMP, REG_G      # 0x0F1:  'i' = alu('G', 3, '\u{0}')
    add REG_TMP, REG_RV
    mov REG_i, REG_TMP
    mov REG_TMP, REG_H      # 0x0F6:  'i' = alu('H', 3, 'i')
    add REG_TMP, REG_i
    mov REG_i, REG_TMP
    mov REG_ARG0, REG_i     # 0x0FB:  mov '\u{1}', 'i'
    call func_10            # 0x0FE:  call 0x10
    pop REG_H               # 0x103:  pop 'H'
    mov REG_H, REG_RV       # 0x105:  mov 'H', '\u{0}'
    push REG_H              # 0x108:  push 'H'
    push REG_H              # 0x10A:  push 'H'
    mov REG_ARG0, REG_H     # 0x10C:  mov '\u{1}', 'H'
    call Print              # 0x10F:  call Print
    pop REG_H               # 0x110:  pop 'H'
    pop REG_H               # 0x112:  pop 'H'
    push REG_H              # 0x114:  push 'H'
    push REG_H              # 0x116:  push 'H'
    mov REG_i, 1            # 0x118:  mov 'i', 0x00000001
    mov REG_TMP, REG_G      # 0x11E:  'i' = alu('G', 3, 'i')
    add REG_TMP, REG_i
    mov REG_i, REG_TMP
    mov REG_ARG0, REG_i     # 0x123:  mov '\u{1}', 'i'
    call func_bc            # 0x126:  call 0xBC
    pop REG_H               # 0x12B:  pop 'H'
    pop REG_H               # 0x12D:  pop 'H'
    lab_12f:
        pop REG_G           # 0x12F:  pop 'G'
        ret                 # 0x131:  ret
```
We also create `vm_main.c` with implementation for the named functions:
```c
#include 
#include 
uint8_t input_data[] = {
    66, 82, 66, 117, 75, 91, 86, 87, 31, 51, 222, 187, 112, 236, 9, 98, 34, 69, 0, 198, 150, 29,
    96, 10, 69, 26, 253, 225, 164, 8, 110, 67, 102, 108, 103, 162, 209, 1, 173, 130, 186, 5, 123,
    109, 187, 215, 86, 232, 23, 215, 184, 79, 171, 232, 128, 67, 138, 153, 251, 92, 4, 94, 93,
};
void run_vm();
uint64_t Strlen() {
    return sizeof(input_data);
}
uint64_t charAt(uint64_t dummy, uint64_t index) {
    return input_data[index];
}
void Print(uint64_t c) {
    printf("%c", c);
}
int main(int argc, char* argv[])
{
    setbuf(stdout, NULL);
    run_vm();
    return 0;
}
```
The main thing we have to keep in mind when we map x64 registers to the VM registers is to make sure that the registers used to send arguments to the named functions (e.g. `charAt`, `Print`) are indeed the registers that will be used by `gcc` when compiling the program. According to the convention, `rdi` and `rsi` are used as the first two arguments to functions, so they are mapped to `REG_ARG0` and `REG_ARG1`. Obviously the return value (`REG_RV`) is mapped to `rax`. The rest of the mapping doesn't really matter.
For convenience, we also create a `Makefile`:
```makefile
CC = gcc
all: solve
clean:
	rm -f *.o
vm.o: vm.S
	$(CC) -masm=intel -c vm.S -o vm.o
vm_main.o: vm_main.c
	$(CC) -c vm_main.c -o vm_main.o
solve: vm.o vm_main.o
	$(CC) vm.o vm_main.o -o solve
```
Let's run it:
```console
┌──(user@kali)-[/media/sf_CTFs/google/18_Unknown_-_Master_Office]
└─$ make
gcc -masm=intel -c vm.S -o vm.o
gcc -c vm_main.c -o vm_main.o
gcc vm.o vm_main.o -o solve
┌──(user@kali)-[/media/sf_CTFs/google/18_Unknown_-_Master_Office]
└─$ ./solve
CTF{ThisIsAVeryLongFlagAndYouMightRunOutzsh: segmentation fault  ./solve
```
So far, so good. Now we open it in Ghidra:
```c
void run_vm(void)
{
  func_bc(0);
  return;
}
void func_bc(long param_1)
{
  long lVar1;
  long lVar2;
  undefined8 unaff_R13;
  lVar1 = Strlen();
  if (param_1 
#include 
uint8_t input_data[] = 
{
    66, 82, 66, 117, 75, 91, 86, 87, 31, 51, 222, 187, 112, 236, 9, 98, 34, 69, 0, 198, 150, 29,
    96, 10, 69, 26, 253, 225, 164, 8, 110, 67, 102, 108, 103, 162, 209, 1, 173, 130, 186, 5, 123,
    109, 187, 215, 86, 232, 23, 215, 184, 79, 171, 232, 128, 67, 138, 153, 251, 92, 4, 94, 93,
};
uint64_t Strlen() 
{
    return sizeof(input_data);
}
uint64_t charAt(uint64_t dummy, uint64_t index)
{
    return input_data[index];
}
void Print(uint64_t c)
{
    printf("%c", c);
}
long fibonacci(long n)
{
    int  i;
    long a;
    long b;
    long c;
    if (n < 2)
    {
        return 1;
    }
    a = 1;
    b = 1;
    for (i = 2; i < n; i++)
    {
        c = a + b;
        a = b;
        b = c;
    }
    return b;
}
long mod(long n)
{
    return n % 0x100;
}
void decode(long index)
{
    long lVar1;
    long lVar2;
    long length;
    length = Strlen();
    while (index < length) 
    {
        lVar1 = charAt(0, index);
        lVar2 = fibonacci(index + 1);
        lVar1 = mod(lVar1 + index + lVar2);
        Print(lVar1);
        index += 1;
    }
}
void run_vm(void)
{
    decode(0);
    return;
}
int main(int argc, char* argv[])
{
    setbuf(stdout, NULL);
    run_vm();
    return 0;
}
```
We run and get the flag:
```console
┌──(user@kali)-[/media/sf_CTFs/google/18_Unknown_-_Master_Office]
└─$ gcc vm_efficient.c -o vm_efficient && ./vm_efficient
CTF{ThisIsAVeryLongFlagAndYouMightRunOutOfJuiceWhileDecodingIt}
```