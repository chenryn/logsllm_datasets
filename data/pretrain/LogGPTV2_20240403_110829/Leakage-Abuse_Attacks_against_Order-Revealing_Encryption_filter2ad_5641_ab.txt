nevertheless be revealed to attackers.
II. PRELIMINARIES
(cid:2)j
Basic notation. Let D be a set and let its size be denoted by
s = |D|. We assume some total ordering of elements in D.
Let D be a sequence of elements (d1, . . . , ds), where each
di ∈ D. For 1 ≤ i ≤ s, we deﬁne the histogram function for
D to be the function HD(i) that outputs the number of times
the ith element of D appears in D, divided by s. For 1 ≤
j ≤ s, we deﬁne the cumulative distribution function (CDF)
for D to be the function FD(j) = (
i=1 hi)/s, where hi is
the number of occurrences of the ith element of D. Observe
that one can represent histograms and CDFs linearly in the
number of unique elements in D. Below, we will use both
“birth date” and “birthdate” to refer to the month, day, and
year of an individual’s birth.
Order-preserving and revealing encryption. An order-
preserving encryption (OPE) [1,5] E allows encrypting data
under a secret key k such that Ek(m1) < Ek(m2) for any
m1 < m2. We focus primarily on deterministic schemes,
meaning Ek deﬁnes a function. The beneﬁt of OPE is that
existing comparison operations will work transparently on
ciphertexts, thus providing a drop-in way to replace plaintexts
with ciphertexts while preserving the ability to perform order
comparisons, range queries, etc. Order-revealing encryption
657
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:24:38 UTC from IEEE Xplore.  Restrictions apply. 
(ORE) [7] does not allow an existing comparison operator
to work on ciphertexts, but instead comes with a public pro-
cedure that can determine the order of two plaintexts given
only their two ciphertexts. Again, we will focus primarily on
ORE schemes that are deterministic.
PRE-based systems. OPE and ORE are examples of what
we refer to as property-revealing encryption (PRE) schemes.
PRE schemes encrypt data while allowing limited compu-
tation over the revealed plaintext properties. A motivating
scenario for PRE schemes is in client-server systems where
one wants to perform encryption on the client side but take
advantage of the server performing some operations on the
client’s behalf. In a PRE-based encrypted database, for exam-
ple, OPE is often used to enable certain kinds of expressive
SQL-like queries on encrypted data. The standard database
functionality in such a system is extended and modiﬁed by
a database proxy, which rewrites queries and performs en-
cryption/decryption on behalf of database clients. The clients
are often application servers (acting on behalf of human
users) which address the database proxy as though it were the
database. Example PRE-based databases include IQrypt [22],
CryptDB [38, 40], and Cipherbase [3].
In all these deployment settings, a minimal security re-
quirement is the conﬁdentiality of plaintext data in the face
of attackers that obtain access to a PRE-encrypted database,
e.g., by compromising a server or obtaining insider access to
it.
Types of ORE/OPE schemes. OPE and ORE schemes
come in several ﬂavors that affect their deployability in the
above application scenarios. Unlike the OPE/ORE schemes
mentioned above, some schemes require state beyond the se-
cret key to be stored with the client. This state can potentially
be held by proxies on behalf of clients, but regardless com-
plicates scaling to large numbers of clients. These schemes
are mutable: ciphertexts might change as more values are
added to a database. They are also interactive, requiring
multiple rounds of communication between the client and
server to store or retrieve ciphertexts. Examples of such
schemes include [25, 26, 37].
Statefulness, mutability, and interactivity all hinder de-
ployability. The reason to consider such schemes is that
the more deployable stateless schemes (e.g., [5]), which
Another
concrete
application arises with security-
conscious businesses that use network middleware to encrypt
and decrypt data as users interact with cloud software-as-
a-service (SaaS) applications. Such “encryption proxies”
are similar to the database proxy described above, except in
most cases it cannot change the way the SaaS application
works. PRE schemes including OPE and ORE become
useful to ensure stored data does not break (some) useful
cloud functionality. Commercial products from Skyhigh
Networks [43], CipherCloud [13], and Perspecsys [36] are
examples.
are the only ones currently used in practice, leak more
information about plaintexts than just ordering and frequency
information. We will only consider these more advanced
schemes in Section IV and Section VIII.
III. OVERVIEW AND METHODOLOGY
To experimentally evaluate OPE and ORE security, we ﬁx
a methodology in which we empirically evaluate security
using public datasets as stand-ins for sensitive plaintexts.
Prior work by NKW focused on medical settings, where a
database of patient data was outsourced in encrypted form.
The attributes (columns) of the databases they considered
had plaintext values falling within small domains, the largest
being the days of the year (365 possible values). We want to
explore security for larger domains where it is not known if
effective attacks can be mounted.
Customer records as case study. We therefore ﬁx a
running case study of an outsourced database of customer
information. In industry currently, OPE is used to encrypt
customer records before uploading to cloud services such as
Salesforce. A client (sometimes an encryption proxy acting
on its behalf) takes as input plaintext records, encrypts their
attributes independently, and uploads them to a cloud service
using (often) an existing API. While customer data can take
on a number of forms, we focus particularly on a subset:
(1) ﬁrst name, (2) last name, (3) US ZIP code, and (4)
date of birth. All such attributes beneﬁt from server-side
processing that takes advantage of the ability to compare
plaintext ordering, and OPE in industry is used to encrypt
such data for exactly this reason.
We restrict our attention to male ﬁrst names, because
research on inference attacks has shown that the binary
“gender” attribute cannot be hidden by any PRE scheme [34].
Partitioning database records based on gender would be a
trivial preprocessing step to remove some uncertainty about
the underlying plaintexts of encrypted values. To model real
adversaries as closely as possible, we perform this prepro-
cessing as well.
In these contexts, revealing plaintext order to servers en-
ables a variety of server-side operations. Sorting is the most
obvious, and for names this allows sorting alphabetically. It
also allows range queries, such as ﬁnding all names starting
with “A”, “B”, or “C”. Perhaps more subtly, OPE enables pre-
ﬁx searches over ciphertexts, so one could search for “Dav*”
and retrieve Dave, David, Davik, etc. Date of birth and ZIP
codes also beneﬁt from such range and preﬁx searches be-
cause preﬁxes have structural meaning. For example, query-
ing “606*” gives all ZIP codes associated with the city of
Chicago. Together, all this allows preserving functionality on
the server-side, in some cases allowing drop-in replacement
658
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:24:38 UTC from IEEE Xplore.  Restrictions apply. 
of plaintext data with encrypted without modifying server
implementations at all.
Threat model. We investigate the security of OPE/ORE
encrypted attributes when an adversary obtains a one-time
snapshot of the encrypted database. Our attacks will target
each attribute (column) independently (i.e., we won’t use
information about the encrypted last name column to help
improve recovering ﬁrst names). Exploring the beneﬁt of
such cross-column attacks in this setting remains an inter-
esting topic for future work. So our attacks will consider
an adversary that obtains a sequence C = (c1, . . . , cn) of
encryptions of one column of data. Here ci = Ek(mi) for
some unknown plaintext mi and encryption scheme E. The
key k remains unknown to the attacker, and we assume it
is intractable to recover it. The passive adversary can take
advantage of auxiliary information about the distribution
from which plaintexts are drawn. This is the same attack
setting as considered by NKW.
We also initiate investigation of stronger adversarial mod-
els. In Section VII we consider non-adaptive known-plaintext
attacks. In these, a subset of the n plaintexts are known by
the adversary. Despite not being considered in prior attacks
on OPE/ORE, we believe known-plaintext attacks are likely
to be prevalent risks in practice. As we discuss in Section VII,
for example, attackers in many contexts can obtain (perhaps
indirect) access to an encryption oracle before compromising
the encrypted database. We will not examine chosen-plaintext
attacks in great detail, though our known-plaintext attacks
clearly work in this setting as well.
In all attacks the adversary ﬁnishes by outputting a list of n
ciphertext, plaintext pairs indicating the attacker’s guesses.
We measure success in several ways. The raw recovery rate
is the fraction of n records that are mapped to the correct
plaintext. For deterministic encryption schemes, this means
that if we can correctly infer the mapping between the
ciphertext for “Michael” and the correct plaintext, and this
ciphertext accounts for (say) 4% of the database, then our raw
recovery rate will be at least 4%. We therefore also report on
unique recovery rate, which is the fraction of unique plaintext
values recovered correctly. Finally, neither of these measures
indicate how much partial information may arise, since the
attacker gets no credit for mapping an encryption of the
birthdate “19620105” to “19620106” despite the fact that this
leaks a lot of information. We report on preﬁx recovery rate as
the average, over the n data items, of the length of the preﬁx
that matches between the correct plaintext and the one output
by the adversary. Note that preﬁx accuracy for birthdates has
an important caveat: all our target birth dates occurred in
the twentieth century, so the baseline preﬁx accuracy is 25%
(because the ﬁrst two characters are always “19”).
Data sets. We use a number of datasets to drive our simu-
lated attacks. We have two kinds of datasets, target datasets
and, when used, auxiliary data sets. The latter is given to the
Dataset
FOP (FOP)
California Muni (CALC)
Washington (WA)
Texas Compt. (TXCOM)
Florida (FL)
Maryland (MD)
Connecticut (CT)
New Jersey (NJ)
Iowa (IA)
Ohio (OH)
Texas A&M U. (TXAMU)
North Carolina (NCAR)
Illinois (IL)
Total Records
621,662
255,956
228,934
149,678
112,566
111,183
77,613
73,119
60,035
58,792
25,192
6,976
1,259
Figure 2: Unique and overall record counts for our target datasets
that include ﬁrst and last names.
# Last Names
116,677
59,935
67,206
33,802
32,986
36,698
30,623
29,094
22,616
21,034
11,437
3,688
1,021
# 1st names
3,862
3,777
3,525
2,416
2,091
2,551
2,016
1,964
1,734
1,440
1,466
696
243
adversary in the clear to provide it an empirical estimate of
the target dataset’s distribution.
For target ﬁrst and last name data sets, we used a mixture of
municipal, state, and public university government employ-
ees, publicly published by the government. We additionally
use the database dump from the Fraternal Order of Police
(FOP) breach.1 This includes 623,372 records on police
ofﬁcers for which all rows contain both ﬁrst and last names,
237,392 rows contain birthdates, and 617,280 contain ZIP
codes. There are 22,485 unique birthdates and 26,914 unique
ZIP codes. A summary of the datasets is given in Figure 2.
The distributions observed in these datasets are non-
uniform. The most common ﬁrst name appeared in 4.06%
of records on average across all the datasets (with variance
0.29% across data sets). The most common last name
appeared in 0.8% of records on average across all datasets
(with variance of 0.04%). This translates to an empirical
min-entropy of 4.63 bits for ﬁrst names and 7 bits for last
names, on average. For the FOP data set, the most common
ZIP code appeared in 0.09% of the records (7.6 bits), and the
most common birth date in 0.01% of records (11 bits). For
reference, password leaks often indicate min-entropies of
about 6–7 bits [8]. The maximum accuracy of the baseline
guessing attack, in which the most frequent element of the
auxiliary data is matched to every ciphertext, was 5.0%
for ﬁrst names from the Connecticut dataset and 1.2% for
last names from the North Carolina dataset. Below we will
consider ﬁrst and last name datasets as subsets of the set
of all alphabetical strings less than or equal to some ﬁxed
length. The effect of this is that our ﬁrst and last name
datasets are quite sparse.
Most of our attack simulations require auxiliary data. We
restrict ourselves to publicly available data that would be
easy for any attacker to obtain, and do not consider scenarios
where an attacker obtains, say, an earlier version of the same
database. Our auxiliary data for experiments on ﬁrst names is
statistics for baby names gathered by the US Social Security
Administration [46]. For our experiments, we used a year-by-
1For privacy reasons we will not include links to these datasets, but they
are available from the authors by request.
659
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:24:38 UTC from IEEE Xplore.  Restrictions apply. 
year tally of the most popular American male ﬁrst names for
the years 1945 to 1993. For experiments on last names, we
used statistics gathered by the US Census Bureau during the
2000 census on the exact frequency of last names for every
person who ﬁlled out the census that year [45]. The census
data included 5,023 and 151,672 distinct ﬁrst and last names,
respectively.
Our auxiliary data for birth dates came from the American
Community Survey (ACS) 2013, a yearly survey conducted
by the US Census Bureau. First, since our target dataset
is a database of law enforcement union members, we used
the 2013 American Community Survey (ACS) to compute a
histogram for the ages of all respondents who marked “law
enforcement” as their current line of work. Using known
statistics on birth month frequency we synthesized an accu-
rate distribution for birth dates with per-day granularity for
all days between 1920 and 1999.
Our auxiliary data for ZIP codes is a list of the reported
population of each assigned ZIP code according to the 2010
census. The frequency of a ZIP code in the auxiliary data