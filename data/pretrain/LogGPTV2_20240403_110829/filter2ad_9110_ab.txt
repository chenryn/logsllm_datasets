通过上面的介绍我们知道AIDL实际上只是对boundService接口的一个抽象，而boundService的核心是有一个跨进程的IBinder接口(即上面onBind返回的对象)。实现这个接口有三种方式：
  1. 拓展[Binder](https://developer.android.com/reference/android/os/Binder)类来实现接口
  2. 使用[Messenger](https://developer.android.com/reference/android/os/Messenger)来创建服务的接口，实际上底层也是基于AIDL实现的
  3. 直接使用AIDL
通常实现IPC用得更多的是Messenger，因为其接受的信息是在同一个线程中处理的；直接使用AIDL可能需要多线程的能力从而导致复杂性增加，因此不适合大部分应用。
但不管是AIDL还是Messenger，其本质都是使用了Binder。那么什么是Binder？简单来说Binder是Android系统中的进程间通信(IPC)框架。我们都知道Android是基于Linux内核构建的，而Linux中已经有了许多进程间通信的方法，如：
  * 管道（半双工/全双工）
  * 消息队列
  * 信号量
  * 共享存储
  * socket
  * …
理论上Binder可以基于上面的这些机制实现一套IPC的功能，但实际上Binder自己构建了新的进程间通信方法，这意味着其功能必须要侵入到Linux内核中。为满足商业公司需求而提交patch到Linux
upstream，所受到的阻力可想而知，为什么Google仍然坚持呢？[Brian
Swetland](https://lkml.org/lkml/2009/6/19/254)在Linux邮件组中指出，现有的Linux
IPC机制无法满足以下两个需求：
  1. 通过内核将数据直接到目标地址空间的环形缓冲区，从而减少拷贝开销。
  2. 对可在进程间共享和传递的远程代理对象的生命周期管理。
因此目前Binder在内核中实现为独立的驱动，即`/dev/binder`(后续还进行了细分，如hwbinder、vndbinder)。
除了Binder之外，Android还在Linux的基础上增加了一些其他驱动，比如`Ashmem`、`Low Memory
Killer`等，在内核的`drivers/[staging]/android`目录中。
从驱动的层面看，Binder的使用也很简单：使用`open(2)`系统调用打开`/dev/binder`，然后使用`ioctl(2)`系统调用进行数据传输。以前面的AIDL
IPC为例，其底层的实现如下图所示：
# 逆向分析
上面介绍了那么多，但本文不是Binder Internal的文章，不要忘记了我们的目的是逆向。从上面Binder
IPC的流程中可以看到一个很重要的特点，即Binder使用`transact`发送数据，并且在(另一个进程的)`onTransact`回调中接收数据。
大部分逆向工程的工作都是类似的，寻找一种经过编译器处理特定文件后的的模式，并在此基础上构建还原出原始的操作。比如，对于C语言的逆向是通过调用约定以及函数入口/出口对栈的分配/释放来判断函数的调用，对于C++则是通过对vtable的查找/偏移来判断虚函数的调用。
对于我们一开始的目标而言，就是需要分析出系统中存在的进程间调用，更准确地说是需要确定某个进程中函数的交叉引用(xref)。以AIDL为例，`.aidl`文件是不包含在release后的apk文件中的，不过我们还是可以通过生成文件的特征判断这是一个AIDL服务。从生成的代码上来看，主要有这些特点：
  1. 服务端和客户端生成的接口文件是相同的
  2. 生成的主类拓展`android.os.IInterface`，包含AIDL中所定义的函数声明
  3. 主类中包含了自身的 **3个** 实现，分别是默认实现`Default`、本地实现`Stub`以及远程代理实现`Proxy`
一般而言，本地的实现(Stub)需要服务端继承并实现对应方法，Stub同时也拓展Binder类，并在`onTransact`方法中根据code来选择不同的函数进行处理。比如对于前面的例子，有：
    public static abstract class Stub extends android.os.Binder implements com.evilpan.IFooService {  public boolean onTransact(int code, android.os.Parcel data, android.os.Parcel reply, int flags) {    // ...    switch (code) {        //...      case TRANSACTION_sayHi:        this.sayHi();     reply.writeNoException();           return true;      case TRANSACTION_add:        int _arg0 = data.readInt();        int _arg1 = data.readInt();        int _result = this.add(_arg0, _arg1);     reply.writeNoException();        reply.writeInt(_result);        return true;      // ...    }  } } 
Proxy即Client端的实现则通过指定transact的code来调用对应远程代码，如下：
    private static class Proxy implements com.evilpan.IFooService {  private android.os.IBinder mRemote; // ... public void sayHi() throws android.os.RemoteException {    //...    boolean _status = mRemote.transact(Stub.TRANSACTION_sayHi, _data, _reply, 0);    //... } } 
除了生成代码的特征，通常远程调用都会用到 Bound
Service，因此在服务端的`AndroidManifest.xml`文件中必然会有导出的服务声明，这也可以作为分析的一个辅助验证。
# 示例
假设我们正在逆向分析上面编译好的APK，在找到某个关键函数(比如add)后`Find
Usage`发现没有任何交叉引用，但实际上这个函数是被调用了的。那么这就有几种可能，比如这个函数是通过反射调用的，或者这个函数是在native代码中调用的。……当然这里实际上是父类中进行多态调用的，本质是Binder唤起的远程调用。
跨进程交叉引用的一个前提是需要知道是在哪个进程调用的。如果有权限在Server中进行调试或者代码注入，我们就可以在触发调用或者绑定时使用`Binder.getCallingUid()`函数获取调用者的UID，从而获取Client的包名。
单纯静态分析的话可以把系统中所有相关的进程pull下来，分别反编译后使用grep进行搜索。因为远程调用的接口是共享的，所以即便使用了proguard等混淆也不会影响到接口函数。
# 小结
本文主要是记录下最近遇到的一个Android智能设备的逆向，与以往单个APK不同，这类智能设备中通常以系统为整体，其中包含了多个业务部门内置或者安装的应用，在分析时发现许多应用间跳转和通信的场景。由于NDA的原因没有详细介绍，因此使用了我自己创建的Client/Server作为示例进行说明，但其中的方法都是类似的，即先从正向了解IPC的运行方式，然后通过代码特征去鉴别不同应用间的跳转。对于复杂的系统而言，先理清思路比头铁逆向也更为重要。
# 参考资料
  * [BINDER TRANSACTIONS IN THE BOWELS OF THE LINUX KERNEL](https://www.synacktiv.com/posts/systems/binder-transactions-in-the-bowels-of-the-linux-kernel.html)
  * [BINDER - ANALYSIS AND EXPLOITATION OF CVE-2020-0041](https://www.synacktiv.com/posts/exploit/binder-analysis-and-exploitation-of-cve-2020-0041.html)
  * [Android Binder Framework](https://www.synacktiv.com/posts/exploit/binder-analysis-and-exploitation-of-cve-2020-0041.html)
* * *