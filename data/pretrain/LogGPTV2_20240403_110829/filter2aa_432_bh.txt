会出现下面这样的结果：
root@bbs#./hello
Welcome!
Hello! World!
root@bbs#
啊，程序将输出写出来了，我们成功了！注意！我们需要的是进行网络上的传输操作，
现在我们做到的只能够在本地给你显示一些字符而已，我们需要的是能够传输到网络的另
一端。
6.12.3  /et c/servi ces 和 /et c/i net d. conf 文件
我们必须通过设置系统的两个文件：/etc/services 和/etc/inetd.conf 来对系统进行配置，
从而将我们的 hello 程序变成网络可访问的。
下面我们来看看如何设定/etc/services 及/etc/inetd.conf。
在我们更改系统的/etc/services 文件前我们先来做一个测试，以便帮助各位读者能够对
它的作用有更清楚的理解。
我们在本地机器上输入下面的命令：
root@bbs# telnet localhost hello
hello: bad port number
注意系统给出的错误信息：“ hello: bad port number”。因为 telnet 命令的第二个参数应
该是想登陆系统的端口，我们给出的 hello，系统不知道 hello 是什么端口，所以它说：“ 错
误的端口数字”。
那么下面我们这样做：
在/etc/services 中加入以下这一行
hello          20001/tcp
其意义为 hello 这项服务是在 port 20001、是一个 TCP 连接。
当我们进行到这一步的时候，你可以再试试进行刚才给出“ hello: bad port number” 错
误信息的操作：
root@bbs# telnet lcoalhost hello
Trying 127.0.0.1...
telnet: Unable to connect to remote host: Connection refused
信息变了： Unable to connect to remote host: Connection refused.
第 6 章  berkeley 套接字
- 201 -
这说明系统已经知道了 hello 代表的是哪个端口（以为我们上面在 /etc/services 文件中
指定了 hello 是一个 tcp 连接，在 20001 端口），但是系统无法和 hello 端口建立连接，因为
没有任何程序在监听 20001 端口来等待连接。
OK，现在我们已经告诉了系统我们的 hello 程序使用什么端口了，可是当我们连接 hello
的端口的时候系统还没有将我们的程序执行．下面：
在 /etc/inetd.conf 中加入以下这一行 ：
goodie stream tcp nowait root /full_goodie_path_name/goodie
各个参数的意义为
service_name 是需要在系统服务中存在的名称。
sock_type 有很多种，大多用的是 stream/dgram。
proto 一般用 tcp/udp。
flags 有 wait/nowait。
user 是您指定该程序要以那一个使用者来启动，这个例子中用的是 root，如果有
安全性的考量，应该要改用 nobody。一般来说，建议您用低权限的使用者，除非必要，不
开放 root 使用权。
server_path 及 args，这是您的服务程序的位置及您所想加入的叁数。
接下来重新启动 inetd
root@bbs# killall inetd
root@bbs# inetd
root@bbs#_
这样我们便建立起一个 port 20001 的 hello service。
现在我们来检验一下 goodie 是否可以执行:
telnet localhost 20001
或
telnet your_host_name 20001
或
telnet locahost hello
执行结果如下：
Trying 127.0.0.1...
Connected to localhost.
Escape character is ‘^）’.
Welcome!
Hello! World!
root@bbs#_
Yahoo!! 我们现在连接成功了！！原来一个简单的，只能显示两行欢迎信息的，没有涉
及到任何网络连接的小程序，现在可以进行网络服务了！很神奇吧！
6.12.4  一个复杂一些的 i net d 服务器程序
很简单不是吗? 信不信由您，telnet/pop3/imap/ftp 都是靠这种方式建立起来的服务。 当
- 202 -
Linux网络编程
然， telnet/pop3/imap/ftp 各项服务都有复杂的命令处理过程，我们现在这个程序只能显示
欢迎信息，但是至少我们已经可以让它做网络上的一个服务程序了。下面我们现在来建立
一点小小的“ 网络协定”，这个协定使我们可以输入“ exit” 时，离开程序，而其他的指令
都是输出与输入相同的字串。
#include 
#include 
#include 
void main(void)
 { 
/* 网络接受缓存区 */
char buf[1024];
/* 是否接收到了 exit 字符串的标志 */
int ok;
/* 输出欢迎信息 */
printf(“Welcome! This is hello service!\n”);
/* 因为 Linux/UNIX 系统具有缓存作用， fflush 函数将缓存中的数据立即送出，
防止网络连线的另外一边无法接收到少量的数据 */
fflush(stdout);
/* 初始化 OK, 设置为没有接收到 exit */
ok=0;
do
/* 如果标准输入没有数据输入，则程序在此处循环等待 */
while (fgets(buf,1023,stdin)==NULL);
/* 检查当前的输入是否为 “exit” */ if (strncasecmp(buf,“exit”,4)==0)
{
/* 设置标志位 */
ok=1;
}
/* 将接收到的字符串原样送出 */
printf(buf);
/* 将缓存区中的数据立即发送 */ fflush(stdout);
}  while（!ok）;
}
因为 inetd 将网络的输入作为程序的标准输入，而将程序的输出作为程序的网络输出，
第 6 章  berkeley 套接字
- 203 -
所以程序中的 stdin 相当于对网络套接字进行读而 stdout 相当于是对网络套接字进行 send
操作。
执行：
telnet localhost hello
或
telnet your_host_name 20001
运行结果如下：
Trying 127.0.0.1...
Connected to localhost.
Escape character is ‘^）’.
Welcome! This is hello service!
输入“help”
help
help
输入“exit”
exit
exit
Connection closed by foreign host.
6.12.5  一个更加复杂的 i net d 服务器程序
我们现在已经可以简单的处理网络远程发送过来的命令了，而我们程序所做的处理只
是对 stdin 和 stdout 进行操作！下面，我们将设计一个稍微复杂一点点的通讯协定，比较通
用于一般用途。
#include 
#include 
#include 
/* 所支持的命令的数组 */
char *cmds[]={ “help”, “say”, “hello”, “bye”, “exit”, NULL};
/* 判断一个字符串是命令数组中的第几个命令，如果不存在则返回 – 1 */
int getcmd(char *cmd)
{  
int n=0;
while (cmds[n]!=NULL)
{  
if (strncasecmp(cmd,cmds[n],strlen(cmds[n]))==0)
return n;
n++;
    }
return -1;
- 204 -
Linux网络编程
  }
/* 主函数 */
void main(void)
  { 
/* 接收的命令的缓存区 */
char buf[1024];
/* 是否为退出命令的标志 */
int ok;
/* 输出欢迎信息 */
printf(“Welcome! This is hello service!\n”);
/* 清除标准输出的缓存 */
fflush(stdout);
/* 初始设置 ok 为没有收到退出命令 */
ok=0;
/* 程序主循环体 */
do
/* 如果程序没有接收到输入则循环等待 */
while (fgets(buf,1023,stdin)==NULL) ;
/* 收到数据后进行命令判断 */
switch (getcmd(buf))
case -1: printf(“Unknown command!\n”); break;
case  0: printf(“How may I help you, sir?\n”); break;
case  1: printf(“I will say %s”,&buf[3]); break;
case  2: printf(“How‘re you doing today?\n”); break;
case  3: printf(“Si ya, mate!\n”);  ok=1; break;
case  4: printf(“Go ahead!\n”); ok=1; break;
      }
/* 清空输出缓冲区 */
fflush(stdout);
} while（!ok）;
  }
第 6 章  berkeley 套接字
- 205 -
运行：
telnet localhost hello
或
telnet your_host_name 2001
试试看输入“ help”、“ say”、“ hello”、“ bye”、“ exit” 等等指令，及其它一些不在命令
列中的指令。
好了，现在我们知道了，Inetd 就是将我们写的使用标准输出和标准输入的程序转变成
网络程序，这样可以大大的简化我们的编程，避免了和什么 socket()、recv()、send() 函数
打交道。
6.12.6  程序必须遵守的安全性准则
注意：在设计 inetd 服务程序时，要特别注意 buffer overflow（缓存区溢出）的问题，
也就是以下这种状况:
char buffer_overflow[64];
fscanf(stdin,“%s”,buffer_overflow);
历来几乎所有的安全漏洞都是由此而来的。
你一定不可这样用，不论任何理由，类同的用法也不可以。黑客高手可以透过将您的
buffer 塞爆，然后塞进他自己的程序进来执行。
6.12.7  小结
通过 Linux 系统提供的 inetd 服务，我们可以方便的编写网络程序而从来不用去在乎那
些看起来高深难懂的套接字函数．你所需要做的只是写一个普通的读写标准输入输出的程
序，然后去配置一下系统 inetd 的配置文件：/etc/services 文件和 /etc/inetd.conf 文件。
6.13  本章总结
BSD UNIX 引入了作为一种机制的套接字抽象，它允许应用程序于操作系统的协议软
件接口。由于许多厂商采纳了套接字，套接字接口已经成了一种事实上的标准。
一个程序调用 socket 函数创建一个套接字描述符。Socket 调用的参数指明了所使用的
协议和所要求的服务器．所有的 TCP/IP 协议都是 Internet 协议族的一部分．系统为套接字
创建了一个内部的数据结构，并把协议族域填上，系统还使用服务类型参数来选择某个指
定的协议（常常是 UDP 或 TCP）。
其他的系统调用允许应用程序指明一个本地地址（bind），强迫套接字进入被动模式以
便为某个服务器使用（listen），或强迫插口进入主动模式以便为某个客户机使用（connect）．服
务器可以进一步使用 accept 调用以获得入连接请求（accept），客户机和服务器都可以发送
或接收数据（read 或 write）。最后，在结束某个插口后，客户机和服务器都可以撤消该接
口（close）。
套接字有五种 I/O 模式：阻塞模式／非阻塞模式／IO 多路复用／信号驱动 IO／异步
IO。
带外数据是一种可以快速的通知网络的另一端计算机信息的一种方法．带外数据甚至
可以只告诉远程计算机它的存在而不必将它的具体数据传输过去．带外数据并不是建立两
- 206 -
Linux网络编程
个连接来传送数据（至少在 TCP 中不是这样），它是将所谓的＂带外数据＂影射到已经存
在的套接字连接中。
很少有人想写网络应用程序，因此进程的细节最好留给那些想写的人．实践和查阅大
量的例子程序是开始写网络代码的最好的方法．但是要掌握这门技术却要花许多年时间。
- 206 -
Linux网络编程
第七章  网络安全性
7.1  网络安全简介
连接网络的主机，特别是连接因特网的主机，比没有连接入网络的主机会暴露出更多
的安全问题。安全问题。网络安全性高可以降低连接网络的风险，但就其性质而言，网络
访问和计算机安全性是矛盾的。网络是一条数据高速公路，它专门用来增加对计算机系统
的访问，而安全性却需要控制访问。提供网络安全性是在公开访问与控制访问之间的一种
折中。
我们可以将网络想象成高速公路，它就像高速公路一样为所有的访问者——无论是受
欢应的访问者还是不受欢应的黑客（hacker，在网络上非法入侵别人机器的人）——提供
相等的访问权。通常，我们是通过锁门来为财产提供安全性的，而不是封锁接到。同样，
网络安全性一般是指对单台主机提供何时的安全性，而不是直接在网络上提供安全性。
在很多小城镇中，人们相互之间都互相认识，因而房门往往是不锁的。但在大城市中，
房门安装了笨重的门闩和链条。在短短的十几年中，因特网已从一个只有数十个用户的“ 小
镇” 发展到具有数百万用户的“ 大城市”。就像大城市使邻居之间变得陌生一样，因特网的
飞速发展减少了网络邻居之间的信任度。对计算机安全性要求的增长是一个负效应，但这
种发展并不是一件坏事情。一个大城市可以提供更大的选择余地和更多的服务，同样，扩
展后的网络也可以提供日益增加的服务。对大多数人来说，安全只是访问网络时需要考虑
的一小部分。
随着网络的发展，其越来越社会化，网络的非法入侵事件也有增无减。但是，这些入
侵的十几程度常常被大大的夸大了。对侵入迹象的反应过度会阻碍对网络的正常利用，因