build:
 ci:
 - shippable_retry pip install -r requirements.txt
 # Create folders for test and code coverage
 - mkdir -p shippable/testresults
 - mkdir -p shippable/codecoverage
 # run tests
 - pytest
 on_success:
 # my heroku app git urls:
 # http url: https://git.heroku.com/blooming-mountain-58044.git
 # git url: PI:EMAIL:blooming-mountain-58044.git
 # use git url not http.
 # change this value to the value of your app.
 - git push PI:EMAIL:blooming-mountain-58044.git
```
5.  提交对代码的更改，并将其推送到分叉的存储库中。
# 怎么做…
请执行以下步骤:
1.  登录到可发货，并选择启用项目链接:
![](img/2d289b06-f2b5-41ca-9faa-80036115f702.png)
2.  然后，在左边选择正确的订阅，它会在下面显示你的回复列表。选择 heroku-flask-示例报告:
![](img/7dc372f5-81a7-4430-8239-1c74b230c0b8.png)
3.  单击“播放”按钮，选择要构建的分支。对于这个食谱，我选择了大师:
![](img/0f8608d3-cac1-446b-b705-d2d4c5d1a4da.png)
如果构建成功，您将看到成功图标。
下一次，如果您在存储库中进行提交，将会触发一个基于 Shippable 的构建，并测试代码。现在，要在 Heroku 上执行连续部署，让我们按照 Shippable 网站([http://docs.shippable.com/ci/deploy-to-heroku/](http://docs.shippable.com/ci/deploy-to-heroku/))上提供的说明进行操作。Shippable 需要获得许可才能对我们的 Heroku 应用进行更改；我们通过将它的部署 SSH 密钥添加到我们的 Heroku 帐户来授予它权限。
4.  通过单击小齿轮图标并选择设置，从可装运仪表板中获取部署密钥:
![](img/e2aefb7c-a895-4e05-9ec1-59602586c3fd.png)
5.  页面底部有一个部署密钥部分。复制密钥:
![](img/8340b850-b9f4-483b-aea1-0f12e4bdbf38.png)
6.  现在您有了密钥，转到 Heroku 中的帐户设置:
![](img/87bc5a2f-bf65-492f-a2b1-a78a533ade5d.png)
7.  向下滚动，直到看到 SSH 密钥部分，然后点击添加按钮。
![](img/ba1ffc8d-0508-49f1-8ebc-1f4f746c0a23.png)
8.  将弹出一个窗口，您可以在其中添加从可发货复制的 SSH 密钥。粘贴密钥，然后点击保存更改:
![](img/e8565151-e15f-439b-8d4c-6c5171c2c7d9.png)
我们现在已经做到了，当构建成功时，Shippable 能够将更改推送到 Heroku。
# 它是如何工作的…
在每个构建指令中，Shippable 根据`shippable.yml`文件中指定的映像和语言类型创建一个新的容器，并运行构建来执行测试。Shippable 知道何时开始构建，因为当您向他们注册应用时，它会向 GitHub 存储库添加一个 webhook:
![](img/1d072bc5-89ad-46f3-ab1e-382c7f9da6e6.png)
因此，每次向 GitHub 提交变更时，都会触发 Shippable 上的构建，构建成功后，会将其部署到 Heroku。
# 请参见
*   详细文件可在 http://docs.shippable.com 的可托运网站上获得。
# 使用轨迹执行配置项/光盘
如 TravisCI 网站([https://travis-ci.org](https://travis-ci.org))所述，TravisCI 是一个托管的持续集成服务。它使您能够方便地设置项目，以便在对代码进行更改时自动构建、测试和部署它们。截至目前，它们支持 30 多种语言，如 C/C++、Dart、Go、Haskell、Groovy、Java、Node.js、PHP、Python、Ruby 和 Scala。使用 TravisCI，您可以在 Heroku、谷歌应用引擎、AWS 和 Azure 等平台上部署您的应用。
对于这个食谱，让我们使用与早期食谱中相同的例子。
# 准备好
遵循以下先决条件:
1.  登录 TravisCI([https://travis-ci.org](https://travis-ci.org))。
2.  单击您的个人资料并设置存储库。在我们的案例中，我们将从 GitHub 中选择与我们在之前的配方中使用的相同的存储库([https://github.com/kencochrane/heroku-flask-example](https://github.com/kencochrane/heroku-flask-example)):
![](img/fcc95e6b-ce8f-4e6b-9330-a0cf49b67826.png)
3.  我们现在需要向我们的 Git repo 添加一个`.travis.yml`文件，该文件包含构建代码时 TravisCI 需要的信息。创建一个包含以下内容的文件，提交并推送到 GitHub:
```
$ cat .travis.yml
language: python
python:
 - "3.6"
install:
 - pip install -r requirements.txt
script:
 - pytest
```
# 怎么做…
请遵循以下步骤:
1.  通过单击更多选项触发手动构建，然后触发构建，如下图所示:
![](img/8dafb4c2-e9cc-4ecc-a63a-35141c6e74b8.png)
2.  如果一切顺利，您应该能够看到构建的结果，包括日志:
![](img/20a9c839-5dce-420c-9b4c-e0af5f00b202.png)
# 它是如何工作的…
构建过程启动一个新的容器，克隆源代码存储库，并在测试容器内部运行我们在`.travis.yml`文件的脚本部分中指定的命令。
# 还有更多…
*   TravisCI 还在 GitHub 中增加了一个 webhook 因此，下次您在存储库中提交更改时，将会触发一个构建。
*   正如我们在前面的食谱中看到的，TravisCI 还支持向不同云环境的连续部署。要进行设置，您需要向`.travis.yml`文件添加更多信息。有关更多详细信息，请查看部署文档([https://docs.travis-ci.com/user/deployment/](https://docs.travis-ci.com/user/deployment/))。
# 请参见
https://docs.travis-ci.com 的旅行文件。
# 使用 OpenShift 原点设置 PaaS
**平台即服务** ( **PaaS** )是一种云服务，其中消费者控制应用(主要是 web)的软件部署和配置设置，提供商提供服务器、网络和其他服务来管理这些部署。提供商可以是外部(公共提供商)或内部(组织中的信息技术部门)。PaaS 提供商很多，比如亚马逊([https://aws.amazon.com](https://aws.amazon.com))、Heroku([https://www.heroku.com](https://www.heroku.com))、OpenShift([https://www.openshift.com](https://www.openshift.com)等等。在最近的过去，容器似乎已经成为应用部署的自然选择。
在本章的前面，我们研究了如何使用 Shippable 和 Heroku 构建 CI/CD 解决方案，其中我们使用 Heroku PaaS 部署了我们的应用。Heroku 是一个公共云服务，托管在**亚马逊网络服务** ( **AWS** )上。OpenShift([https://github.com/openshift/origin](https://github.com/openshift/origin))是一个 PaaS，它利用了 Docker 和 Kubernetes([https://Kubernetes . io](https://kubernetes.io)等技术，提供了一个完整的生态系统来为您的云应用提供服务。正如我们在第 8 章 *Docker 编排和托管*平台中谈到的 Kubernetes，强烈建议您在继续阅读本食谱之前先阅读它。我将借用那一章中的一些概念。让我们看看下面的图表:
![](img/af6f12ea-2963-4460-95c6-d8d65a0592d2.png)
Kubernetes 为容器集群管理提供了调度 pods 和服务发现等功能，但它没有完整应用的概念，也没有从源代码构建和部署 Docker 映像。OpenShift 扩展了基本的 Kubernetes 模型，填补了这些空白。如果我们快进到第 8 章 *Docker 编排和托管平台*，对于 Kubernetes 部分，您会注意到要部署应用，我们需要定义 Pods、服务和复制控制器。OpenShift 试图抽象所有这些信息，让您定义一个配置文件来处理所有的内部连接。此外，OpenShift 还提供了其他功能，例如通过源代码推送实现的自动化部署、应用的集中管理、身份验证、团队和项目隔离以及资源跟踪和限制，所有这些都是企业部署所必需的。
在本食谱中，我们将在虚拟机上设置一体式 OpenShift Origin，并启动一个 pod。在下一个食谱中，我们将看到如何使用**源到映像** ( **S2I** )构建功能通过源代码构建和部署应用。示例可在[https://github . com/open shift/origin/tree/master/examples/sample-app](https://github.com/openshift/origin/tree/master/examples/sample-app)中找到。
# 准备好
设置一个带有 CentOS 7.5 和至少 4 GB 内存的虚拟机，并在其中进行 SSH。
1.  安装 Docker:
```
 $ curl https://get.docker.com | bash
```
2.  将不安全注册表的条目添加到 Docker 守护程序配置文件中(`/etc/docker/daemon.json`):
```
    $ cat /etc/docker/daemon.json
    {
 "insecure-registries": [
 "172.30.0.0/16"
 ]
 }
```
3.  启动 Docker:
```
 $ systemctl start docker
```
4.  安装`wget`包:
```
 $ yum install -y wget
```
5.  从 github([https://github.com/openshift/origin/releases](https://github.com/openshift/origin/releases))的发布页面下载最新的 OpenShift 二进制文件:
```
 $ cd /tmp
 $ wget https://github.com/openshift/origin/releases/download/v3.10.0/openshift-origin-client-tools-v3.10.0-dd10d17-linux-64bit.tar.gz
```
6.  使用`tar`提取档案并将`oc`二进制文件移动到您路径中的目录(`/usr/local/bin`):
```
 $ tar -xvzf openshift-origin-client-tools-v3.10.0-dd10d17-linux-64bit.tar.gz
 $ cd openshift-origin-client-tools-v3.10.0-dd10d17-linux-64bit
 $ sudo cp oc /usr/local/bin
       $ cd ~ 
```