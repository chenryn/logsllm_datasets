.so man3/getdate.3
.so man3/y0.3
.so man3/getgrent.3
.so man7/system_data_types.7
.so man3/scanf.3
.\" copyright 2009  lefteris dimitroulakis (PI:EMAIL)
.\"
.\" %%%license_start(gplv2+_doc_full)
.\" this is free documentation; you can redistribute it and/or
.\" modify it under the terms of the gnu general public license as
.\" published by the free software foundation; either version 2 of
.\" the license, or (at your option) any later version.
.\"
.\" the gnu general public license's references to "object code"
.\" and "executables" are to be interpreted as the output of any
.\" document formatting or typesetting system, including
.\" intermediate and printed output.
.\"
.\" this manual is distributed in the hope that it will be useful,
.\" but without any warranty; without even the implied warranty of
.\" merchantability or fitness for a particular purpose.  see the
.\" gnu general public license for more details.
.\"
.\" you should have received a copy of the gnu general public
.\" license along with this manual; if not, see
.\" .
.\" %%%license_end
.\"
.th iso_8859-3 7 2020-08-13 "linux" "linux programmer's manual"
.sh name
iso_8859-3 \- iso 8859-3 character set encoded in octal, decimal,
and hexadecimal
.sh description
the iso 8859 standard includes several 8-bit extensions to the ascii
character set (also known as iso 646-irv).
iso 8859-3 encodes the
characters used in certain southeast european languages.
.ss iso 8859 alphabets
the full set of iso 8859 alphabets includes:
.ts
l l.
iso 8859-1	west european languages (latin-1)
iso 8859-2	central and east european languages (latin-2)
iso 8859-3	southeast european and miscellaneous languages (latin-3)
iso 8859-4	scandinavian/baltic languages (latin-4)
iso 8859-5	latin/cyrillic
iso 8859-6	latin/arabic
iso 8859-7	latin/greek
iso 8859-8	latin/hebrew
iso 8859-9	latin-1 modification for turkish (latin-5)
iso 8859-10	lappish/nordic/eskimo languages (latin-6)
iso 8859-11	latin/thai
iso 8859-13	baltic rim languages (latin-7)
iso 8859-14	celtic (latin-8)
iso 8859-15	west european languages (latin-9)
iso 8859-16	romanian (latin-10)
.te
.ss iso 8859-3 characters
the following table displays the characters in iso 8859-3 that
are printable and unlisted in the
.br ascii (7)
manual page.
.ts
l l l c lp-1.
oct	dec	hex	char	description
_
240	160	a0	 	no-break space
241	161	a1	ħ	latin capital letter h with stroke
242	162	a2	˘	breve
243	163	a3	£	pound sign
244	164	a4	¤	currency sign
246	166	a6	ĥ	latin capital letter h with circumflex
247	167	a7	§	section sign
250	168	a8	¨	diaeresis
251	169	a9	i̇	latin capital letter i with dot above
252	170	aa	ş	latin capital letter s with cedilla
253	171	ab	ğ	latin capital letter g with breve
254	172	ac	ĵ	latin capital letter j with circumflex
255	173	ad	­	soft hyphen
257	175	af	ż	latin capital letter z with dot above
260	176	b0	°	degree sign
261	177	b1	ħ	latin small letter h with stroke
262	178	b2	²	superscript two
263	179	b3	³	superscript three
264	180	b4	´	acute accent
265	181	b5	µ	micro sign
266	182	b6	ĥ	latin small letter h with circumflex
267	183	b7	·	middle dot
270	184	b8	¸	cedilla
271	185	b9	ı	latin small letter dotless i
272	186	ba	ş	latin small letter s with cedilla
273	187	bb	ğ	latin small letter g with breve
274	188	bc	ĵ	latin small letter j with circumflex
275	189	bd	½	vulgar fraction one half
277	191	bf	ż	latin small letter z with dot above
300	192	c0	à	latin capital letter a with grave
301	193	c1	á	latin capital letter a with acute
302	194	c2	â	latin capital letter a with circumflex
304	196	c4	ä	latin capital letter a with diaeresis
305	197	c5	ċ	latin capital letter c with dot above
306	198	c6	ĉ	latin capital letter c with circumflex
307	199	c7	ç	latin capital letter c with cedilla
310	200	c8	è	latin capital letter e with grave
311	201	c9	é	latin capital letter e with acute
312	202	ca	ê	latin capital letter e with circumflex
313	203	cb	ë	latin capital letter e with diaeresis
314	204	cc	ì	latin capital letter i with grave
315	205	cd	í	latin capital letter i with acute
316	206	ce	î	latin capital letter i with circumflex
317	207	cf	ï	latin capital letter i with diaeresis
321	209	d1	ñ	latin capital letter n with tilde
322	210	d2	ò	latin capital letter o with grave
323	211	d3	ó	latin capital letter o with acute
324	212	d4	ô	latin capital letter o with circumflex
325	213	d5	ġ	latin capital letter g with dot above
326	214	d6	ö	latin capital letter o with diaeresis
327	215	d7	×	multiplication sign
330	216	d8	ĝ	latin capital letter g with circumflex
331	217	d9	ù	latin capital letter u with grave
332	218	da	ú	latin capital letter u with acute
333	219	db	û	latin capital letter u with circumflex
334	220	dc	ü	latin capital letter u with diaeresis
335	221	dd	ŭ	latin capital letter u with breve
336	222	de	ŝ	latin capital letter s with circumflex
337	223	df	ß	latin small letter sharp s
340	224	e0	à	latin small letter a with grave
341	225	e1	á	latin small letter a with acute
342	226	e2	â	latin small letter a with circumflex
344	228	e4	ä	latin small letter a with diaeresis
345	229	e5	ċ	latin small letter c with dot above
346	230	e6	ĉ	latin small letter c with circumflex
347	231	e7	ç	latin small letter c with cedilla
350	232	e8	è	latin small letter e with grave
351	233	e9	é	latin small letter e with acute
352	234	ea	ê	latin small letter e with circumflex
353	235	eb	ë	latin small letter e with diaeresis
354	236	ec	ì	latin small letter i with grave
355	237	ed	í	latin small letter i with acute
356	238	ee	î	latin small letter i with circumflex
357	239	ef	ï	latin small letter i with diaeresis
361	241	f1	ñ	latin small letter n with tilde
362	242	f2	ò	latin small letter o with grave
363	243	f3	ó	latin small letter o with acute
364	244	f4	ô	latin small letter o with circumflex
365	245	f5	ġ	latin small letter g with dot above
366	246	f6	ö	latin small letter o with diaeresis
367	247	f7	÷	division sign
370	248	f8	ĝ	latin small letter g with circumflex
371	249	f9	ù	latin small letter u with grave
372	250	fa	ú	latin small letter u with acute
373	251	fb	û	latin small letter u with circumflex
374	252	fc	ü	latin small letter u with diaeresis
375	253	fd	ŭ	latin small letter u with breve
376	254	fe	ŝ	latin small letter s with circumflex
377	255	ff	˙	dot above
.te
.sh notes
iso 8859-3 is also known as latin-3.
.sh see also
.br ascii (7),
.br charsets (7),
.br utf\-8 (7)
.sh colophon
this page is part of release 5.13 of the linux
.i man-pages
project.
a description of the project,
information about reporting bugs,
and the latest version of this page,
can be found at
\%https://www.kernel.org/doc/man\-pages/.
.\" written sat mar  8 10:35:08 mez 1997 by
.\" j. "mufti" scheurich (PI:EMAIL)
.\"
.\" %%%license_start(gpl_noversion_oneline)
.\" this page is licensed under the gnu general public license
.\" %%%license_end
.\"
.th __setfpucw 3 2021-03-22 "linux" "linux programmer's manual"
.sh name
__setfpucw \- set fpu control word on i386 architecture (obsolete)
.sh synopsis
.nf
.b #include 
.pp
.bi "void __setfpucw(unsigned short " control_word );
.fi
.sh description
.br __setfpucw ()
transfers
.i control_word
to the registers of the fpu (floating-point unit) on the i386 architecture.
this was used to control floating-point precision,
rounding and floating-point exceptions.
.sh conforming to
this function was a nonstandard gnu extension.
.sh notes
as of glibc 2.1 this function does not exist anymore.
there are new functions from c99, with prototypes in
.ir  ,
to control fpu rounding modes, like
.br fegetround (3),
.br fesetround (3),
and the floating-point environment, like
.br fegetenv (3),
.br feholdexcept (3),
.br fesetenv (3),
.br feupdateenv (3),
and fpu exception handling, like
.br feclearexcept (3),
.br fegetexceptflag (3),
.br feraiseexcept (3),
.br fesetexceptflag (3),
and
.br fetestexcept (3).
.pp
if direct access to the fpu control word is still needed, the
.b _fpu_getcw
and
.b _fpu_setcw
macros from
.i 
can be used.
.sh examples
.b __setfpucw(0x1372)
.pp
set fpu control word on the i386 architecture to
     \- extended precision
     \- rounding to nearest
     \- exceptions on overflow, zero divide and nan
.sh see also
.br feclearexcept (3)
.pp
.i 
.sh colophon
this page is part of release 5.13 of the linux
.i man-pages
project.
a description of the project,
information about reporting bugs,
and the latest version of this page,
can be found at
\%https://www.kernel.org/doc/man\-pages/.
.\" copyright (c) 2006 michael kerrisk 
.\" a few fragments remain from an earlier (1992) page by
.\" drew eckhardt (PI:EMAIL),
.\"
.\" %%%license_start(verbatim)
.\" permission is granted to make and distribute verbatim copies of this
.\" manual provided the copyright notice and this permission notice are
.\" preserved on all copies.
.\"
.\" permission is granted to copy and distribute modified versions of this
.\" manual under the conditions for verbatim copying, provided that the
.\" entire resulting derived work is distributed under the terms of a
.\" permission notice identical to this one.
.\"
.\" since the linux kernel and libraries are constantly changing, this
.\" manual page may be incorrect or out-of-date.  the author(s) assume no
.\" responsibility for errors or omissions, or for damages resulting from
.\" the use of the information contained herein.  the author(s) may not
.\" have taken the same level of care in the production of this manual,
.\" which is licensed free of charge, as they might when working
.\" professionally.
.\"
.\" formatted or processed versions of this manual, if unaccompanied by
.\" the source, must acknowledge the copyright and authors of this work.
.\" %%%license_end
.\"
.\" modified by michael haardt (PI:EMAIL)
.\" modified sat jul 24 13:22:07 1993 by rik faith (PI:EMAIL)
.\" modified 21 aug 1994 by michael chastain (PI:EMAIL):
.\"   referenced 'clone(2)'.
.\" modified 1995-06-10, 1996-04-18, 1999-11-01, 2000-12-24
.\"   by andries brouwer (PI:EMAIL)
.\" modified, 27 may 2004, michael kerrisk 
.\"     added notes on capability requirements
.\" 2006-09-04, michael kerrisk
.\"     greatly expanded, to describe all attributes that differ
.\"	parent and child.
.\"
.th fork 2 2021-03-22 "linux" "linux programmer's manual"
.sh name
fork \- create a child process
.sh synopsis
.nf
.b #include 
.pp
.b pid_t fork(void);
.fi
.sh description
.br fork ()
creates a new process by duplicating the calling process.
the new process is referred to as the
.i child
process.
the calling process is referred to as the
.i parent
process.
.pp
the child process and the parent process run in separate memory spaces.
at the time of
.br fork ()
both memory spaces have the same content.
memory writes, file mappings
.rb ( mmap (2)),
and unmappings
.rb ( munmap (2))
performed by one of the processes do not affect the other.
.pp
the child process is an exact duplicate of the parent
process except for the following points:
.ip * 3
the child has its own unique process id,
and this pid does not match the id of any existing process group
.rb ( setpgid (2))
or session.
.ip *
the child's parent process id is the same as the parent's process id.
.ip *
the child does not inherit its parent's memory locks
.rb ( mlock (2),
.br mlockall (2)).
.ip *
process resource utilizations
.rb ( getrusage (2))
and cpu time counters
.rb ( times (2))
are reset to zero in the child.
.ip *
the child's set of pending signals is initially empty
.rb ( sigpending (2)).
.ip *
the child does not inherit semaphore adjustments from its parent
.rb ( semop (2)).
.ip *
the child does not inherit process-associated record locks from its parent
.rb ( fcntl (2)).
(on the other hand, it does inherit
.br fcntl (2)
open file description locks and
.br flock (2)
locks from its parent.)
.ip *
the child does not inherit timers from its parent
.rb ( setitimer (2),
.br alarm (2),
.br timer_create (2)).
.ip *
the child does not inherit outstanding asynchronous i/o operations
from its parent
.rb ( aio_read (3),
.br aio_write (3)),
nor does it inherit any asynchronous i/o contexts from its parent (see
.br io_setup (2)).
.pp
the process attributes in the preceding list are all specified
in posix.1.
the parent and child also differ with respect to the following
linux-specific process attributes:
.ip * 3
the child does not inherit directory change notifications (dnotify)
from its parent
(see the description of
.b f_notify
in
.br fcntl (2)).
.ip *
the
.br prctl (2)
.b pr_set_pdeathsig
setting is reset so that the child does not receive a signal
when its parent terminates.
.ip *
the default timer slack value is set to the parent's
current timer slack value.
see the description of
.br pr_set_timerslack
in
.br prctl (2).
.ip *
memory mappings that have been marked with the
.br madvise (2)
.b madv_dontfork
flag are not inherited across a
.br fork ().
.ip *
memory in address ranges that have been marked with the
.br madvise (2)
.b madv_wipeonfork
flag is zeroed in the child after a
.br fork ().
(the
.b madv_wipeonfork
setting remains in place for those address ranges in the child.)
.ip *
the termination signal of the child is always
.b sigchld
(see
.br clone (2)).
.ip *
the port access permission bits set by
.br ioperm (2)
are not inherited by the child;
the child must turn on any bits that it requires using
.br ioperm (2).
.pp
note the following further points:
.ip * 3
the child process is created with a single thread\(emthe
one that called
.br fork ().
the entire virtual address space of the parent is replicated in the child,
including the states of mutexes, condition variables,
and other pthreads objects; the use of
.br pthread_atfork (3)
may be helpful for dealing with problems that this can cause.
.ip *
after a
.br fork ()
in a multithreaded program,
the child can safely call only async-signal-safe functions (see
.br signal\-safety (7))
until such time as it calls
.br execve (2).
.ip *
the child inherits copies of the parent's set of open file descriptors.
each file descriptor in the child refers to the same
open file description (see
.br open (2))
as the corresponding file descriptor in the parent.
this means that the two file descriptors share open file status flags,
file offset,
and signal-driven i/o attributes (see the description of
.b f_setown
and
.b f_setsig
in
.br fcntl (2)).
.ip *
the child inherits copies of the parent's set of open message
queue descriptors (see
.br mq_overview (7)).
each file descriptor in the child refers to the same
open message queue description
as the corresponding file descriptor in the parent.
this means that the two file descriptors share the same flags
.ri ( mq_flags ).
.ip *
the child inherits copies of the parent's set of open directory streams (see
.br opendir (3)).
posix.1 says that the corresponding directory streams
in the parent and child
.i may
share the directory stream positioning;
on linux/glibc they do not.
.sh return value
on success, the pid of the child process is returned in the parent,
and 0 is returned in the child.
on failure, \-1 is returned in the parent,
no child process is created, and
.i errno
is set to indicate the error.
.sh errors
.tp
.b eagain
.\" note! the following should match the description in pthread_create(3)
a system-imposed limit on the number of threads was encountered.
there are a number of limits that may trigger this error:
.rs
.ip * 3
the
.br rlimit_nproc
soft resource limit (set via
.br setrlimit (2)),
which limits the number of processes and threads for a real user id,
was reached;
.ip *
the kernel's system-wide limit on the number of processes and threads,
.ir /proc/sys/kernel/threads\-max ,
was reached (see
.br proc (5));
.ip *
the maximum number of pids,
.ir /proc/sys/kernel/pid_max ,
was reached (see
.br proc (5));
or
.ip *
the pid limit
.ri ( pids.max )
imposed by the cgroup "process number" (pids) controller was reached.
.re
.tp
.b eagain
the caller is operating under the
.br sched_deadline
scheduling policy and does not have the reset-on-fork flag set.
see
.br sched (7).
.tp
.b enomem
.br fork ()
failed to allocate the necessary kernel structures because memory is tight.
.tp
.b enomem
an attempt was made to create a child process in a pid namespace
whose "init" process has terminated.
see
.br pid_namespaces (7).
.tp
.b enosys
.br fork ()
is not supported on this platform (for example,
.\" e.g., arm (optionally), blackfin, c6x, frv, h8300, microblaze, xtensa
hardware without a memory-management unit).
.tp
.br erestartnointr " (since linux 2.6.17)"
.\" commit 4a2c7a7837da1b91468e50426066d988050e4d56
system call was interrupted by a signal and will be restarted.
(this can be seen only during a trace.)
.sh conforming to
posix.1-2001, posix.1-2008, svr4, 4.3bsd.
.sh notes
under linux,
.br fork ()
is implemented using copy-on-write pages, so the only penalty that it incurs
is the time and memory required to duplicate the parent's page tables,
and to create a unique task structure for the child.
.ss c library/kernel differences
since version 2.3.3,
.\" nptl/sysdeps/unix/sysv/linux/fork.c
rather than invoking the kernel's
.br fork ()
system call,
the glibc
.br fork ()
wrapper that is provided as part of the
nptl threading implementation invokes
.br clone (2)
with flags that provide the same effect as the traditional system call.
(a call to
.br fork ()
is equivalent to a call to
.br clone (2)
specifying
.i flags
as just