A
4位
B
11000
8位
C
9位
D
11000
6位
E
1位
010110
8位
字符间隔
00
2位
：短点、：长点、0：短点和长点的分隔持
莫尔斯编码把一般文本中出现频率高的字符用短编码来表示。这
---
## Page 119
6.5用二叉树实现哈夫曼编码
里所说的出现频率，不是通过对出版物等文章进行统计调查得来的，
而是根据印刷行业的印刷活字数目而确定的。如表6-2所示，假设表示
短点的位是1，表示长点的位是11的话，那么E（嘀）这一字符的数据
就可以用1位的1来表示，C（嗒嘀嗒嘀）这一字符的数据就可以用9位
的110101101来表示。在实际的莫尔斯编码中，如果短点的长度是1
长点的长度就是3，短点和长点的间隔就是1。这里的长度指的是声
音的长度。接下来，就让我们尝试一下用莫尔斯编码来表示前面提到
的AAAAAABBCDDEEEEEF这个17个字符的文本。在莫尔斯编码
中，各个字符之间需要加人表示间隔的符号。这里我们用00来进行
区分。因此，AAAAAABBCDDEEEEEF这个文本，就变成了AX6次
+B×2次+Cx1次+D×2次+E×5次+F×1次+字符间隔x16=
4位×6次+8位×2次+9位×1次+6位×2次+1位×5次+8位
×1次+2位×16次=106位=14字节。因为文件只能以字节为单
位来存储数据，因此不满1字节的部分就要圆整成1个字节。如果所
有字符占用的空间都是1个字节（8位），这样文本中列出来的17个
字符=17字节，那么摩尔斯电码的压缩比率就是14÷17=82%，并
不太突出。
6.5用二叉树实现哈夫曼编码
刚才已经提到，莫尔斯编码是根据日常文本中各字符的出现频率
来决定表示各字符的编码的数据长度的。不过，该编码体系，对
AAAAAABBCDDEEEEEF这样的特殊文本并不是最适合的。在莫尔斯
编码中，E的数据长度最短，面在AAAAAABBCDDEEEEEF这个文本
中，出现最频繁的是字符A。因此，应该给A分配数据长度最短的编
码。这样做才会使压缩率更高。
---
## Page 120
第6章条白尝试压维数据
下面我们来看一下哈夫曼算法。哈夫曼算法是指，为各压缩对象
文件分别构造最佳的编码体系，并以该编码体系为基础来进行压缩。
因此，用什么样式的编码（哈夫曼编码）对数据进行分割，就要由各个
文件面定。用哈夫曼算法压缩过的文件中，存储着哈夫曼编码信息和
压缩过的数据（图6-4）。
压缩前的文件
压离后的文件
压维前的数据
哈夫曼编码的信息
压峰后的数据
图64用哈夫曼算法压继的文件的构造
接下来，我们尝试一下把AAAAAABBCDDEEEEEF中的A~F这
些字符，按照“出现频率高的字符用尽量少的位数编码来表示”这一原
则进行整理。按照出现频率从高到低的顺序整理后，结果就如表6-3所
示。该表中同时也列出了编码的方案。
表6-3出现频率和编码（方案）
字符
出现频率
编码（方案）
位数
A
6
0
E
5
B
2
10
2
D
2
11
2
C
1
100
3
F
101
3
在表6-3的编码（方案）中，随着出现频率的降低，字符编码信息
---
## Page 121
6.5用二叉树实现哈夫曼编码
的数据位数也在逐渐增加，从开始的1位、2位、依次增加到3位。不
过，这个编码体系是存在问题的。该问题就是，例如100这个3位的
编码，它的意思是用1、0、0这3个编码来表示E、A、A呢？还是用
10、0这两个编码来表示B、A呢？亦或是用100来表示C呢？这些
都无法进行区分。因此，如果不加人用来区分字符的符号，这个编码
（方案）就无法使用。
面在哈夫曼算法中，通过借助哈夫曼树构造编码体系，即使在不
使用字符区分符号的情况下，也可以构建能够明确进行区分的编码体
系。也就是说，利用哈夫曼树后，就算表示各字符的数据位数不同，
也能够做成可以明确区分的编码。因此，只要掌握了哈夫曼树的制作
方法，并用程序将其完成，就可以借助哈夫曼算法实现文件压缩了。
不过，与RLE算法相比，程序的内容要复杂很多。
接下来我们就来看一下如何制作哈夫曼树。自然界的树是从根开
始生枝长叶的。面哈夫曼树则是从叶生枝，然后再生根。图6-5展示
了对AAAAAABBCDDEEEEEF进行编码的哈夫曼树的制作过程。大
家也尝试绘制一下吧。尝试过1次后，应该就能理解哈夫曼树的制作
顺序了。
---
## Page 122
第6章亲白尝试压缩数据
步骤1：列出数据及其出现频率，（）里面表示的是出现频率，
这里按照降序排列
出现频率
（6）（5）（2）（2）（1）（1)
数据
A
E
B
DCF
步骤2：选择两个出现频率最小的数字，拉出两条线，并在交叉地方
写上这两位数字的和。当有多个选项时，任意选取即可
(2）
出现频率
[6）（5）（2）（2]（1)[1]
数据
A
E
BD
C
F
少骤3：重复步骤2，可以连接任何位置的数值
(4)
(2)
出现频率
（6）（5）（2）（2）(1）（1）
数据
A
E
B
D
步骤4：最后这些数字会被汇集到了1个点上，该点就是根，这样哈夫
曼树也就完成了。按朋从根部到底部的叶子这一顺序，在左边
根部开始沿着树枝到达目标文字后，再按照顺序把通过的树枝
的树枝（线）处写上0，在右边的树枝（线）处写上1。然后从
上的0或者1写下来，就可以得到哈夫曼编码了
(17)
6
[11]
（4]
21
出现频率
(6）（5）(2）（2)（1](1)
07
数据
A
E
B
DCF
哈夫曼编码00
01100
101110111
图65哈夫曼树的编码顺序
---
## Page 123
6.6哈夫曼算法能够大帽提升压缩比率
6.6哈夫曼算法能够大幅提升压缩比率
使用哈夫曼树后，出现频率越高的数据所占用的数据位数就越少，
而且数据的区分也可以很清晰地实现。但哈夫曼算法为什么达到这么
好的效果呢，大家都了解吗？
通过图6-5的步骤2可以发现，在用枝条连接数据时，我们是从出
现频率较低的数据开始的，这就意味着出现频率越低的数据到达根部
的枝条数就越多。而枝条数越多，编码的位数也就随之增多了。
面从用哈夫曼算法压缩过的文件中读取数据后，就会以位为单位
对该数据进行排查，并与哈夫曼树进行比较看是否到达了目标编码，
这就是为什么哈夫曼算法可以对数据进行区分的原因。例如，10001这
个使用图6-5所示的哈夫曼编码作成的5位数据，到达100时，对照哈
夫曼树的数据，该数据表示的是B这个字符。至此就找到了1个字符。
然后再顺着哈夫曼树寻找剩下的01，会发现它表示的是E这个字符。
接下来，让我们来看一下哈夫曼算法的压缩比率。用图6-5得到的
哈夫曼编码表示AAAAAABBCDDEEEEEF，结果为00000000000010010
01101011010101010101111，40位=5字节（这里为不包含哈夫曼编码信
息的情况）。压缩前的数据是17字符=17字节，也就是说，我们惊奇
地得到了5字节+17字节气29%这样高的压缩率。表6-4是将表6-1
中的文件应用哈夫曼算法的LHA进行压缩后的结果，大家可以参考一
下。可以看出，不管是哪种类型的文件，都得到了很高的压缩比率。
表64LHA对各种文件的压缩结果
文件类型
压缩前
压缩后
压缩比率
文本文件
14862字节
4119字节
28%
图像文件
96062字节
9456字节
10%
EXE文件
24576字节
4652字节
19%
更多资料请关注我的新浪博客http：
---
## Page 124
第6章亲自尝试压缩数据
6.7：可逆压缩和非可逆压缩
最后，让我们来看一下图像文件的数据形式。图像文件的使用目的通
常是把图像数据输出到显示器、打印机等设备上。Windows的标准图像数
据形式为BMP，是完全未压缩的。由于显示器及打印机输出的bit（点）
是可以直接映射（mapping）的，因此便有了BMP=bitmap这一名称。
除BMP格式以外，还有其他各种格式的图像数据形式。比如
JPEG格式、TIFF格式、GIF格式等。与BMP格式不同的是，这些
图像数据都会用一些技法来对数据进行压缩。
图像文件还可以使用与前文介绍的RLE算法、哈夫曼算法不同的
其他压缩算法。这是因为，多数情况下，并不要求压缩后的图像文件
必须还原到与压缩前同等的质量。与之相比，程序的EXE文件以及每
个字符、数值都有具体含义的文本文件则必须要还原到和压缩前同样
的内容。而对于图像文件来说，即使有时无法还原到压缩前那样鲜明
的图像状态，但只要肉眼看不出什么区别，有一些模糊也勉强可以接受。
这里，我们把能还原到压缩前状态的压缩称为可逆压缩，无法还原到压
缩前状态的压缩称为非可逆压缩，这一点希望大家记住（图6-6）
①BMP（Bitmap）是使用Windows自带的函笔未做成的一种图像数据形式。
②JPEG（Joint Photographic Experts Group）是数码相机等常用的一种图像数
据形式。
③TIFF（Tag Image Fil Format）是一种通过在文件头中包合“标签”就能够
显示出数据性质的图像数据形式。
④GIF（Graphics Interchange Format）是由美国 CompuServe 开发的一种数据
格式，这种格式要求色数不超过256色。
110
---
## Page 125
可运压编和非可造压座
（a）可逆压缩
压缩前的文件
压雌
压缩后的文件
还原后的文件
还原
田非[q]
压缩前的文件
压缩
压缩后的文件
还原后的文件
一部分数据丢失
还原
图6-6图像文件的压维有可逆压缩和不可运压缩两种