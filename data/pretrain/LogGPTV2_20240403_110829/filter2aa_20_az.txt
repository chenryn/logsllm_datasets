### 校验生成消息头的参数中的换行符

接下来，我们将详细讨论以下两项内容：
1. 通过专门的 API 进行重定向或生成 Cookie 的处理。
2. CGI 脚本中使用 `print` 等语句直接输出 HTTP 响应消息头。

#### 通过专门的 API 处理重定向和 Cookie

在 CGI 脚本中，可以直接使用 `print` 语句来输出 HTTP 响应消息头。然而，这种方法需要严格遵守 HTTP 和 Cookie 的标准规格，否则可能会导致安全隐患和 Bug。为了防范这些问题，许多 Web 应用开发语言（如 Perl、PHP 和 Java）提供了功能丰富的函数来输出 HTTP 消息头。

表 4-16 列出了各语言中提供的输出 HTTP 响应消息头的功能：

| 语言          | 生成 Cookie           | 重定向                   | 输出响应消息头     |
|---------------|-----------------------|--------------------------|--------------------|
| PHP           | `setcookie` / `setrowcookie` | 无（使用 `header`）      | `header`           |
| Perl + CGI.pm | `CGI::Cookie`         | `redirect`               | `header`           |
| Java Servlet  | `HttpServletResponse#addCookie` | `HttpServletResponse#sendRedirect` | `HttpServletResponse#setHeader` |
| ASP.NET       | `Response.Cookies.Add` | `Response.Redirect`      | `Response.AppendHeader` |

尽管这些库函数能够显著减少安全隐患，但在实际应用中，仍然可能存在一些安全问题。因此，我们还需要采取额外的措施来确保安全。

#### 检验生成消息头的参数中的换行符

许多与 HTTP 响应消息头相关的 API 并未对换行符进行校验。笔者认为这种情况可能是由于业界对于谁应该负责 HTTP 消息头注入的问题尚未达成共识。虽然笔者的观点是应该由 API 负责，但目前 API 方面做得还不够充分。因此，我们需要在应用层面加强防护。

以下是两种处理换行符的方法：
1. 当 URL 中包含换行符时，报错。
2. 对 Cookie 中的换行符进行百分号编码。

如果程序库已经对 Cookie 值进行了百分号编码，那么应用中可以省去这一操作。例如，PHP 的 `setcookie` 函数和 Perl 的 `CGI::Cookie` 模块会在程序库中对 Cookie 值进行百分号编码。使用其他语言或程序库时，请事先确认是否会对 Cookie 值进行百分号编码。

#### 示例：通过 PHP 的 `header` 函数实现字符种类校验

下面是一个使用 PHP 的 `header` 函数实现字符种类校验的重定向函数示例：

```php
function redirect($url) {
    // 校验 URL 的字符种类
    if (preg_match('/^[a-zA-Z0-9\-._~:/?#[]@!$&\'()*+,;=%]+$/', $url)) {
        header("Location: " . $url);
        exit();
    } else {
        die("Invalid URL");
    }
}
```

该函数会校验 URL 的字符种类，并在校验通过的情况下使用 `header` 函数执行重定向操作。需要注意的是，此函数仅校验了字符种类，并未校验 URL 的格式是否正确。此外，该字符种类校验规则比 RFC3986 更严格，指定 IPv6 的 IP 地址时 `[` 和 `]` 都会被报错。因此，在实际应用中，应根据具体需求调整校验规则。

#### PHP 的 `header` 函数中的换行符校验

根据 PHP 官方文档，4.4.2 及 5.1.2 版本的 `header` 函数更新日志中提到：“为了防范消息头注入攻击，该函数不能一次发送多个消息头。”然而，这种方法并不完全有效。PHP 在校验换行符时仅检查了 LF（0x0A），而没有检查 CR（0x0D）。因此，在某些浏览器上，仅使用 CR 换行符的 HTTP 消息头注入攻击仍然有效。

经过调查发现，针对 Internet Explorer、Google Chrome 和 Opera 浏览器，仅使用 CR 换行符的 HTTP 消息头注入攻击是有效的，而在 Firefox 和 Apple Safari 中则无效。这表明仅依赖 PHP 的 `header` 函数进行换行符校验是不够安全的。

### 重定向相关的安全隐患总结

重定向处理中常见的安全隐患包括自由重定向漏洞和 HTTP 消息头注入漏洞。针对这些漏洞的对策如下：
1. 尽量使用专门的 API（程序库函数）进行重定向处理。
2. 固定重定向目标（推荐）。
3. 如果重定向目标 URL 由外界指定，务必校验字符种类和域名。

### Cookie 输出相关的安全隐患

Web 应用广泛使用 Cookie 进行会话管理，但如果使用不当，可能会引发安全隐患。与 Cookie 相关的安全隐患主要分为两类：
1. Cookie 的用途不当。
2. Cookie 的输出方法不当。

#### Cookie 的正确用途

Cookie 应主要用于保存会话 ID，而不应将应用的数据保存在 Cookie 中。具体原因将在后续章节中详细说明。

#### 输出 Cookie 时容易产生的安全隐患

输出 Cookie 时容易产生以下两种安全隐患：
1. HTTP 消息头注入漏洞。
2. Cookie 的安全属性设置不完善。

#### Cookie 的用途不当

Web 应用中通常使用会话管理机制来存储跨多个网页的信息。会话管理机制一般只会将会话 ID 保存在 Cookie 中，而数据本身则保存在 Web 服务器的内存、文件或数据库中。如果在 Cookie 中保存了不应该保存的数据，就可能引发安全隐患。

##### 不应保存在 Cookie 中的数据

不应保存在 Cookie 中的数据包括用户名和权限信息等。这些数据一旦被用户擅自更改，可能导致越权操作或越权浏览等问题。

##### Cookie 和会话变量的比较

表 4-17 比较了将数据保存在 Cookie 和使用会话变量这两种方法：

| 属性            | Cookie                      | 会话变量                   |
|-----------------|----------------------------|---------------------------|
| 易用性          | 通过 API 进行取值和赋值    | 与普通变量的用法基本一致   |
| 存储数组或对象  | 需要在应用中转换为字符串   | 大多都和变量一样可以直接赋值 |
| 容量限制        | 有严格的限制               | 使用上没有限制             |
| 用户直接查看    | 容易                       | 不可能                     |
| 泄漏风险        | Cookie 被泄漏后信息也会被泄漏 | 可以通过控制使信息不易泄漏 |
| 数据被用户更改  | 容易                       | 不可能                     |
| 数据被第三方更改 | 如果有 XSS 或 HTTP 消息头注入漏洞 | 即使有可导致 Cookie 被更改的漏洞，会话变量也无法被更改 |
| 控制信息有效期  | 容易                       | 仅限当前会话               |
| 共享信息        | 域名相同时可能              | 基本不可能                 |

综上所述，会话变量既安全又便利，因此建议优先使用会话变量。只有在需要控制信息有效期或在不同服务器之间共享信息时，才考虑使用 Cookie。

#### Cookie 的安全属性设置不完善

Cookie 中含有名为 Secure 的属性，指定了该属性的 Cookie 仅在 HTTPS 传输时才会被浏览器发送至服务器。如果没有设置安全属性，即使应用中使用了 HTTPS 传输，Cookie 也可能会以明文形式传输，从而存在被窃听的风险。

##### 攻击手段与影响

本书在网络上准备了一个使用 HTTPS 并生成不带安全属性的 Cookie（PXPSESID）的网页（https://www.hash-c.co.jp/wasbook/set_non_secure_cookie.php）。源代码如下：

```php
<?php
// 设置不带 Secure 属性的 Cookie
setcookie('PXPSESID', 'some_session_id', time() + 3600, '/');
echo "Cookie set without Secure attribute.";
?>
```

这种情况下，攻击者可以通过中间人攻击截获并篡改 Cookie，从而实施伪装攻击。

### 总结

为了确保 Web 应用的安全性，我们需要仔细校验生成消息头的参数中的换行符，并尽量使用专门的 API 进行重定向和生成 Cookie 的处理。此外，还应避免在 Cookie 中保存敏感数据，并确保 Cookie 的安全属性设置得当。