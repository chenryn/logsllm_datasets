speciﬁed as a draft by the W3C Web Application Security
working group. The primary goal of CSP is to mitigate
content injection vulnerabilities like cross-site scripting by
determining at least one domain as a valid source for script-
ing code. To achieve this goal, one can use a directive like
frame-src or sandbox. To provide an example, in the case of
frame-src it is possible to let a supporting user agent check
which frames can be embedded in a website. It is therefore
possible to gain a ﬁne granularity about the allowed content
on a controllable website. Thus, CSP is capable of reduc-
ing the potential harmful eﬀects of malicious code injection
attacks. Note that CSP considers both arbitrary styles, in-
line CSS, and web fonts as possibly harmful and therefore
provides matching rules.
In the context of our scriptless attacks, it would be desir-
able to restrict fundamental prerequisites to prevent a Web
page (or rather the user) from being attacked. Therefore,
we analyzed the given CSP directives with respect to the at-
tacks we introduced in this paper. First, we have found that
nearly all directives of the W3C draft, except for the direc-
tive report-uri for reporting policy violations, are helpful in
preventing a website and its users from being aﬀected by ad-
versaries. The directive default-src enforces the user agent
to execute – with one exception – the remaining directives
of the draft with the given default source of the directive
value. Before going into detail regarding the default-src
inﬂuenced directives, it is important to know that pure in-
jections with script or style sheet code into a vulnerable Web
page cannot be detected by CSP. Thus, it is only possible
to block the content of a ﬁle that is loaded from an external
resource.
This leads to the ability of blocking malicious content that
is included within an external ﬁle. A look at our attacks
shows that it makes sense to use at least style-src and
img-src of CSP to further reduce the attack surface. By
specifying the style of the protected Web page with style-
src, it is possible to restrict the access to undesirable CSS
ﬁles. Therefore, CSS-based animations for reading DOM
nodes or a usage of the CSS content property will no longer
work in this case as an attacking tool. The same applies to
img-src; as mentioned before, SVG ﬁles can be used to carry
out scriptless attacks and intercept events, keystrokes and
similar user interaction without using scripting technologies.
In consequence, blocking SVG ﬁles from another site and
especially another domain is recommended for achieving a
better level of security. Based on our example attacks, we
also propose to use frame-src to restrict the resources of
embedded frames as well as font-src for limiting external
font sources.
Once the possibility of increasing the security by restrict-
ing external ﬁle resources has been made clear, we are left
with a following consideration: can one restrict possible at-
tack vectors inside the protected site? This is exactly the
case when we use sandbox as a directive which is not con-
trolled or set by default-src. It restricts the available con-
tent based on the HTML5 sandbox attribute values. This
directive can therefore be used to for example deactivate the
execution of scripts; hence, JavaScript-based attacks will not
function. What was not considered to be dangerous is script-
less code. In our case, sandbox is just helpful if one is facing
a typical scripting attack.
In summary, we conclude that CSP is a small and helpful
step in the right direction.
It speciﬁcally assists elimina-
tion of the available side channels along with some of the
attack vectors. In our attack model described in Section 1,
CSP therefore contributes to mitigating precondition 1 and
eliminating precondition 3. Nevertheless, it is insuﬃcient
to fully cover a wide array of scriptless attacks. What we
recommend is to increase the range of CSP settings, so that
one at least has an option to forbid the execution of style
sheets or – even better – selected style sheet properties. One
thing will still remain out of CSP’s coverage: a behavior re-
lated to double-clickjacking [21]. The scrollbar detection we
have discussed in Section 3.3 relies on a pop-up window in
case the attacked website uses a frame-buster. Contrary to
available frame detection and busting features, no reliable
way to achieve the same security for pop-up windows and
detached views is present in modern browsers. In Section
4.2 we therefore propose additional protection mechanisms
against scriptless attacks and similar threats.
4.2 Detecting Detached Views
Several of the attacks we described in Section 3 can be
leveraged by using Iframes and similar content framing tech-
niques. Nevertheless, a website can easily deploy defen-
sive measurements by simply using proper X-Frame-Options
headers. Attackers, aware of that defense technique, have
since started utilizing a diﬀerent way and leverage pop-up
windows and detached views to accomplish data leakage ex-
ploits and even clickjacking attacks without being aﬀected
by frame-busting code [40] and X-Frame-Options headers.
Some of these attacks have been documented under the la-
767bel double-clickjacking, while other techniques involve drag
& drop operations of active content such as applets, or copy
& paste operations into editable content areas across do-
mains. Due to the extended attack surface, we want to stress
that as far as modern browsers are concerned, there is no
feasible way for a website to determine if it is being loaded
in a detached view respective pop-up window or not.
In order to ﬁx this problem, we created a patch for a recent
version of the Web browser Firefox (Nightly 14.0a1, available
as of April 2012), providing a possible solution to prevent the
described attacks. The patch extends the well-known DOM
window object by two additional properties: isPopup and
loadedCrossDomain. Both properties are represented by a
boolean value and can be accessed in a read-only manner by
any website at any time. As the naming already suggests,
window.isPopup is true only if the actual GUI window rep-
resented by the current DOM window object is a detached
view. Likewise, window.loadedCrossDomain is true only if
the current DOM window object was loaded cross-domain.
These features enable websites to check their own status
with the use of simple JavaScript code.
Subsequently, in case of unsafe circumstances, appropriate
countermeasures can be taken. For instance, a website could
protect itself against the attacks described in Section 3 by
restricting itself from being loaded inside a detached view
in a cross-domain manner or inside an Iframe. While the
latter can already be accomplished in modern browsers out
of the box (by setting the X-Frame-Options header to ei-
ther SAMEORIGIN or DENY), the former cannot. Luckily, it
becomes easily possible with our custom extension of the
Firefox browser, as we have demonstrated in Listing 3 be-
low.
if ( window . isPopup &&
window . l oa d e d C r o s s D o m a i n ) {
// stop loading
window . close () ;
}
// continue loading
Listing 3: JavaScript usage example for the two
additional properties exposed by the modiﬁed
Firefox version
The patch consists of changes in the C++ classes nsGlobal-
Window and nsWindowWatcher as well as in the interfaces
nsIDOMWindow and nsIWebBrowserChrome of the Firefox
code base. While the isPopup property could directly be
implemented by examining a certain already existing inter-
nal window-ﬂag, the introduction of the loadedCrossDomain
property required additional code. Whenever a website tries
to open a new window, this code compares the host name
of the URI of the invoking website to the host name of the
website-to-be-loaded (including ports).
If the host-names
diﬀer, a newly introduced internal ﬂag is set to indicate this
condition, and vice versa, this ﬂag is unset in the opposite
situation. Thus the loadedCrossDomain property is also up-
dated correctly in case that an already existing popup win-
dow is reused by the Firefox browser to display a new website
in a popup-mode.
Allowing a website to determine whether it is being loaded
in a detached view, one can mitigate several attack tech-
niques at once. This includes several of the aforementioned
scriptless attacks, double-clickjacking, drag & drop as well
as several copy & paste attacks. We plan to discuss this
patch with diﬀerent browser development teams and evalu-
ate how this technique can be adopted by several browsers
to protect users against attacks.
4.3 Miscellanneous Defense Techniques
Scriptless attacks can occur in a plethora of variations and
are often based on a malicious concatenation of otherwise
benign features. We so far elaborated on ways to harden
the browser and provide new levers for website owners to
strengthen their applications with minimal eﬀort. Further-
more, we shed light on how CSP helps preventing scriptless
attacks by deﬁning strict origin policies for images, fonts,
CSS and other resources potentially causing information leak-
age by requesting data from across origins.
Zalewski et al. discussed yet another aspect of scriptless
attacks in 2011, pointing at dangling open tags and, more
speciﬁcally, elements such as button, textarea and half-open
image src attributes to be used for data leakage [52]. These
attacks are simple yet eﬀective and require a web application
and eventual HTML ﬁltering techniques to apply grammar
validation and enforce syntactical validity of user generated
(X)HTML content. An open textarea can easily turn the
rest of a website into its very own content and thereby leak
sensitive data and CSRF tokens. Note that even image maps
and similar deprecated technologies can be used for script-
less data leakage by sending click-coordinates to arbitrary
sinks across domains. Aside from the aforementioned pro-
tection techniques and mechanisms, classic HTML content
and grammar validation is of equal importance for, as Za-
lewski coined it, protection from attacks in the “post-XSS
world” [52]. Note that this is an attacker model similar to
the one we have examined in this paper. Eliminating the
side channel rather than the attack vector is again of greater
importance for solving this speciﬁc problem.
5. RELATED WORK
Members of the security community have granted a lot of
attention to the attacks against web applications. We will
now review related work in this area and discuss the novel
aspects and contributions of scriptless attacks.
History Snifﬁng.
From a conceptual point of view, CSS-based browser his-
tory sniﬃng is closely related to our work. This technique
enables an adversary to determine which websites have been
visited by the user in the past. History sniﬃng is docu-
mented in several browser bug reports for many years now [2,
9, 39]. This method has been used in diﬀerent attack sce-
narios [22, 24, 32, 47, 50]. In an empirical study, Jang et al.
found that several popular sites actually use this technique
to exﬁltrate information about their visitors’ browsing be-
havior [25]. Given the prevalence of this attack vector, the
latest versions of common web browsers have implemented
certain defenses protecting users from CSS-based history
sniﬃng.
We also use CSS as part of our attacks, yet we refrain
from using the actual concept behind history sniﬃng. More
speciﬁcally, we demonstrate how CSS-based animations, the
CSS content property, and CSS Media Queries can be abused
by an adversary to access and gather speciﬁc information.
As a result, our attacks also work against the latest versions
of popular web browsers. One must be aware that while
many documented history sniﬃng attacks are signiﬁcantly
768faster when using JavaScript to exﬁltrate data, these attacks
can also be implemented solely based on CSS and no active
scripting code, which in turn distinguishes them as scriptless
attacks according to our deﬁnition.
Timing Attacks.
A more general form of history sniﬃng attacks in the con-
text of web security was presented by Felten and Schneider
who analyzed timing diﬀerence related to whether or not
a resource is cached [15].
In a similar attack, Bortz and
Boneh [7] showed how timing attacks can be implemented
to recover private information from web applications. Re-
cently, Chen et al. demonstrated diﬀerent side channel leaks
related to popular web sites and also based on timing infor-
mation [12].
In other domains, timing attacks are a well-
established technique and were used to exﬁltrate information
from many diﬀerent kinds of systems (e.g., OpenSSL [10],
SSH [42], or virtual machine environment [38]).
While timing measurements are used as part of the attacks
we covered in this paper, we take advantage of other kinds
of timing attacks and use this general concept to determine
speciﬁc information in the context of a web browser.
Client- and Server-Side XSS Detection or Prevention.
Due to their high practical prevalence, XSS attacks have
been covered by a dedicated large body of research. We
will now brieﬂy discuss diﬀerent client- and server-side ap-
proaches to discovering and preventing such attacks. Note
that their eﬀectiveness is limited in the context of scriptless
attacks due to their diﬀering ground principles.
Bates et al. [4] investigate client-side ﬁltering approaches
capable of preventing XSS. They have found ﬂaws in noXSS,
NoScript and the IE8 XSS ﬁlter, and showed that some
attack vectors were only activated after XSS ﬁltering.
In
contrast to other approaches, they are inclined to put XS-
SAUDITOR between the HTML parser and the JavaScript
engine. This design will however not prevent scriptless at-
tacks as they do not target the JavaScript engine.
Curtsinger et al. [13] put forward a browser extension
called ZOZZLE to categorize malicious JavaScript code with
Bayesian classiﬁcation. It remains an open question if such
learning-based defense mechanisms will work against script-
less attacks.
Pietraszek et al., introduced context-sensitive string eval-
uation (CSSE), a library to examine strings of incoming
user-generated data by relying on a set of meta-data [37].
Depending on the context derived from the attached meta-
data, diﬀerent ﬁltering and escaping methods were being
applied for the protection of the existing applications. This
low-level approach is described as operational for existing
applications, requiring few to no application developer im-
plementation eﬀort.
Kirda et al. proposed a client-side XSS prevention tool
called Noxes [30]. By keeping the browser from contacting
URLs that do not belong to the domain of the web applica-
tion, this tool prevents an adversary from leaking sensitive
data to his server. From a conceptual point of view, such an
approach can also be used to limit what an adversary can
achieve with scriptless attacks, since it prevents side chan-
nels from exﬁltrating stolen information. Furthermore, the
authors elaborate on the diﬃculties of server-side XSS de-