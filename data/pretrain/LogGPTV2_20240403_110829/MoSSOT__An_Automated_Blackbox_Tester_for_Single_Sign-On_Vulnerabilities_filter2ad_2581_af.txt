personation: problems of OAuth and API design in online social networks. In
COSN14.
[23] Jonathan Jacky. 2011. PyModel: Model-based testing in Python. In SciPy11.
[24] Wang Jing. 2017. Covert Redirect Vulnerability.
[25] M Jones and Dick Hardt. 2012. The OAuth 2.0 Authorization Framework: Bearer
Token Usage. Technical Report. RFC 6750, October.
[26] Michael Jones, Paul Tarjan, Yaron Goland, Nat Sakimura, John Bradley, John
Panzer, and Dirk Balfanz. 2012. JSON Web Token (JWT). (2012).
[27] Wing Lam, Zhengkai Wu, Dengfeng Li, Wenyu Wang, Haibing Zheng, Hui Luo,
Peng Yan, Yuetang Deng, and Tao Xie. 2017. Record and replay for Android: are
we there yet in industrial cases?. In ESEC/FSE17. ACM.
[28] Wanpeng Li, Chris J Mitchell, and Tom Chen. 2018. Your code is my code: Exploiting
a common weakness in OAuth 2.0 implementations.
[29] Wanpeng Li and Chris J. Mitchell. 2016. Analysing the Security of Google’s
implementation of OpenID Connect. In Proceeedings of DIMVA16.
[30] Yuanchun Li, Ziyue Yang, Yao Guo, and Xiangqun Chen. 2017. Droidbot: a
lightweight ui-guided test input generator for android. In ICSE17. IEEE.
[31] Torsten Lodderstedt, Mark McGloin, and Phil Hunt. 2013. OAuth 2.0 threat model
and security considerations.
[32] Aravind Machiry, Rohan Tahiliani, and Mayur Naik. 2013. Dynodroid: An input
generation system for android apps. In ESEC/FSE13. ACM.
[33] mitmproxy. 2017. Man in the Middle Proxy. https://mitmproxy.org/
[34] MoSSOT. 2019. MoSSOT. https://github.com/MoSSOT/MoSSOT.
[35] Vaibhav Rastogi, Yan Chen, and William Enck. 2013. AppsPlayground: automatic
security analysis of smartphone applications. In ACM CODASPY13.
[36] Ariel Rosenfeld, Odaya Kardashov, and Orel Zang. 2018. Automation of Android
Applications Functional Testing Using Machine Learning Activities Classification.
In MOBILESoft18. ACM.
[37] Natsuhiko Sakimura, J Bradley, M Jones, B de Medeiros, and C Mortimore. 2014.
OpenID Connect core 1.0. (2014).
[38] Mohammed Shehab and Fadi Mohsen. 2014. Towards Enhancing the Security of
OAuth Implementations In Smart Phones. In IEEE MS14.
[39] Ethan Shernan, Henry Carter, Dave Tian, Patrick Traynor, and Kevin Butler. 2015.
More Guidelines Than Rules: CSRF Vulnerabilities from Noncompliant OAuth
2.0 Implementations. In DIMVA15. Springer.
[40] Sina. 2017. Sina Developer Documentation. http://open.weibo.com/wiki/
[41] Softonic. 2017. Softonic. https://bit.ly/2DUAjhp.
[42] Ting Su, Guozhu Meng, Yuting Chen, Ke Wu, Weiming Yang, Yao Yao, Geguang
Pu, Yang Liu, and Zhendong Su. 2017. Guided, stochastic model-based gui testing
of android apps. In ESEC/FSE17. ACM.
[43] San-Tsai Sun and Konstantin Beznosov. 2012. The devil is in the (implementation)
details: an empirical analysis of OAuth SSO systems. In CCS’12.
[44] Tencent. 2017. WeChat SSO developer document. https://open.weixin.qq.com.
[45] Wandoujia. 2017. Wandoujia App Market. https://www.wandoujia.com/.
[46] Hui Wang, Yuanyuan Zhang, Juanru Li, and Dawu Gu. 2016. The Achilles Heel
of OAuth: A Multi-platform Study of OAuth-based Authentication (ACSAC ’16).
[47] Hui Wang, Yuanyuan Zhang, Juanru Li, Hui Liu, Wenbo Yang, Bodong Li, and
Dawu Gu. 2015. Vulnerability Assessment of OAuth Implementations in Android
Applications. In ACSAC15. ACM.
[48] Xposed. 2017. Xposed Module Repository. https://repo.xposed.info
[49] Ronghai Yang, Wing Cheong Lau, and Shangcheng Shi. 2017. Breaking and
Fixing Mobile App Authentication with OAuth2.0-based Protocols. In ACNS17.
[50] Ronghai Yang, Guancheng Lee, Wing Cheong Lau, and Kehuan Zhang. 2016.
Model-based Security Testing: an Empirical Study on OAuth 2.0 Implementations.
In ASIACCS 2016.
[51] Quanqi Ye, Guangdong Bai, Kailong Wang, and Jin Song Dong. 2015. Formal
Analysis of a Single Sign-On Protocol Implementation for Android. In ICECCS15.
[52] E. YOO. 2017. Technode. https://bit.ly/2Zi1JVn.
[53] Yuchen Zhou and David Evans. 2014. SSOScan: Automated Testing of Web
Applications for Single Sign-On Vulnerabilities. In USENIX14.
[54] Chaoshun Zuo, Qingchuan Zhao, and Zhiqiang Lin. 2017. Authscope: Towards
automatic discovery of vulnerable authorizations in online services. In CCS17.
Session 4A: Mobile SecurityAsiaCCS ’19, July 9–12, 2019, Auckland, New Zealand280A MORE ON MOBILE SSO PROTOCOLS
A.1 Protocol Flow of Authorization Code Flow
Figure 7: Authorization code flow of OAuth 2.0 for mobile
platforms
A.2 Protocol Flow of OpenID Connect
Figure 8: Implicit flow of OpenID Connect for mobile plat-
forms
B MORE ON UI EXPLORATION
B.1 Details of Algorithm I
Algorithm 1: Pseudocode for Algorithm I (LKS) of Explorer
1 initialize ladder[n] to be the predefined list of keywords;
2 initialize UI path as an empty list;
3 Function LKS(ladder)
4
5
6
i ← 0 ;
page ← source code of current activity;
if page is the desired destination then
// end of recursive call
return recorded UI path;
while i < len(ladder) do
foreach keyword in ladder[i] do
if an element in page matches keyword then
click on the element;
append element to UI path;
ladder ← ladder [0..i] ;
// recursive call
return LKS(ladder);
i ← i + 1;
return cannot find path to the destination;
7
8
9
10
11
12
13
14
15
16
To generate the list of keywords in Algorithm I (LKS), we man-
ually logged into 100 Android apps via SSO for each studied IdP.
At the same time, a self-developed XPosed [48] module records the
information of the triggered widgets and outputs related keywords.
Then, we prioritized the keywords into different levels according
to their occurrence frequency. On average, there are around 25
keywords for each IdP and 5 keywords for each level. One example
of the prioritized keyword list for Facebook is listed as follows,
where widgets with the keywords on the upper level have a higher
probability to link to the SSO login page.
Level 5 "facebook", "fb"
Level 4 "third-party login", "login", "log in", "signin", "sign in", "register"
Level 3 "username", "avatar", "nick", "profile", "account", "personal
info", "user", "head", "edit"
Level 2 "setting", "option"
Level 1 "logged out", "personal", "mine", "drawer", "menu", "home"
Based on the list, Algorithm I will search for the keyword from
top to down and trigger the associated widget during UI exploration.
B.2 Details of Algorithm II
To utilize the DFS algorithm, we model the Android UI as a weighted
directed graph G = (V , E). There are two types of vertices: Ve ⊂
V is the set of element vertices, and Vp ∈ V is the set of page
vertices. Similarly, we define two subsets representing two types
of edges. Particularly, Epe ∈ E is the set of page-to-element edge,
modeling the action when the user interacts with an element in a
page. Eep ∈ E is element-to-page edges, modeling the behavior of
jumping to a new page after an element is tapped. A simplified graph
representation of a toy app with four pages is shown in Figure 9 to
give readers a concrete idea. In the figure, larger circles with labels
are page vertices, and those smaller circles are element vertices.
We are only interested in the elements that lead to different pages
and ignore those edges representing intra-page jump. Therefore,
in our graph model, vertices v ∈ Ve are all disconnected, same for
v ∈ vp. Also, ∀v ∈ Ve, the outdegree deд+(v) ∈ {0, 1}, meaning
that an element can either lead to a particular page or nowhere. The
indegree deд−(v) = 1, showing that an element can only appear on
one page. For a page vertex v ∈ Vp, we have deд−(v) ∈ N+, since
different elements can point to the same page. Vertex p0 and p1
in Figure 9 are examples of this case. The graph can be cyclic, the
dashed line in the figure shows an example when the back edge
leads to a cycle. Weights are assigned to page-to-element edges to
represent the preference among elements in the same page. Under
this graph model, two major challenges for the DFS algorithm are
loop cutting and prioritizing.
Loop Cutting. Since the graph can be cyclic, we need to detect
and cut the loop when running the DFS. We use the standard cycle
detection method, namely keeping track of visited vertex to detect
the back edge. The actual challenge for this is the ability to detect
identical elements in different contexts, as no single attribute is
unique for UI elements. Our solution is combining several attributes
to determine if two elements are identical. We begin by checking
whether all of the string type attributes (id, text, and desc) are
equal. If so, we further calculate the perceptual hash to quantify the
similarity of their screenshot image. If the similarity ratio is above
a certain threshold, we consider these two elements to be identical.
1). auth request10).user identityRP servermobile deviceIdPServer2). authentication& authorization5).code4).code3).code6).AT request: code + app_id+ app_secret7).AT + openid8).API request for user profile: AT + openid9).User profile information1). authrequestRP servermobile deviceIdP server2). authentication& authorization5).AT & id_token4).AT & id_token3).AT & id_token6).user identity{"name":"alice","user_id":"1234“,……}+ signatureSession 4A: Mobile SecurityAsiaCCS ’19, July 9–12, 2019, Auckland, New Zealand281p0
p2
p1
p3
Figure 9: Graph representation of Android UI
• Vertices with labels are Vp, while the others are Ve .
Prioritizing. Each page vertex has outgoing edges linking to
element vertices, displaying the relation that a group of elements
contained in the same page. When DFS arrives at a page, it is more
efficient if some heuristics can be applied to first try those more
promising elements rather than choosing randomly. To achieve
that, we define a scoring function F : Epe (cid:55)→ [0, 1] to calculate a
weight for each of page-to-element edge. More specifically, F is a
weighted sum of individual scoring functions for each property of
the element the edge points to, namely F(e) = wi fi(e). Properties
we select as scoring components are id, desc, text, clickable, type.
Weights for each property is set empirically. For instance, clickable
is a strong indicator comparing to type, so we put more weights on
it. For individual scoring function, we would like to mention two
of our major innovations here.
• String score function. We introduce a unified string score
function for string type properties (id, desc, text). First, we
build a weighted keyword database based on the same key-
word statics we used in Algorithm I. Weights are assigned
based on the frequency of keywords. Given a string-type
property of an element, we search for all substring matches
in the keyword database, for each of them we get a raw score
s, which is equal to the keyword weight. Instead of directly
using this raw score, we calculate an adjusted score s′ = cs
based on the length of the property string and the matched
substring. Finally, the maximum adjusted score among all
matches is returned. The adjustment coefficient c is defined
by
In this equation, ls , lm represents the length of the property
string and matched substring respectively, L is maximum
acceptable string length, and k is a parameter controlling
the steepness of decrease for the function. We fixed its value
to be 1.1. The intuition behind the adjust function is that a
string with longer unmatched part usually has less semantic
similarity to the matched keyword. For example, a UI widget
with text "login now" looks more promising as a login button
compared to a UI widget with the text "you can login with
email or mobile number", even though both of them match
the keyword login. Here, we set L as an upper bound because
widgets with very long text are mostly descriptive, e.g., arti-
cles, which is not interactive. Lastly, we did not use linear
c = L − x
Lkx , where x = min{L, ls − lm}
Figure 10: String score adjust function, when L = 32
function (i.e., setting k = 1) since the semantic vanishes
sharply when the unmatched length increases. Figure 10
shows the curves of the adjust function with different k.
• Identify clickable elements. Clickable elements often lead to
new pages. Android UI element natively has an attribute
called clickable which defines whether it reacts to click events.
However, elements can overlay on each other and present to
users on the same surface. From the user’s point of view, an
element is clickable if some events can be triggered when tap-
ping on its area, regardless of its clickable property. Therefore,
we call an element with clickable property to be explicitly
clickable, while element not declared clickable but appears
to be clickable to users as implicitly clickable. To identify all
implicitly clickable elements, we calculate the union of areas
covered by explicitly clickable elements and then mark other
elements intersecting with the area to be implicitly clickable.
C EXTENSION FOR DETECTING APP SECRET
DISCLOSURE
Originally, MoSSOT detected the vulnerability indirectly by moni-
toring the network traffic through Proxy, where the appearance of
critical requests (involving app secret) indicates the vulnerability
(Section. 4.3.2). However, the method suffers false negatives as RP
developers may hardcode the secret in their APKs without using it.
Thus, we extended MoSSOT for better detection accuracy.
Similar to the method in [47], the extended tool forges the criti-
cal requests (appended with the app secret) to the IdP server and
confirms the leaked secret based on the response content, where
the potential app secret is available from the decompilation result
of the APK, i.e., Step 1(b) in Fig. 3. Typically, the kind of requests
involves three parameters, namely app id, app secret, and a creden-
tial (e.g., access token), and the IdP server verifies them in the same
order. Thus, once the app id is correct, we can get the judgment of
the chosen app secret from the IdP server. Previous work [47] at-
tempted to obtain the app id via reverse engineering and might fail
due to the protection on the APK. In contrast, our tool extracts the
app id from the reference network traffic (Step.4 in Fig. 3), which
always appears in the interactions between the IdP app and its
server (e.g., Step 3 in Fig. 1). Therefore, our tool is expected to have
higher accuracy in detecting the vulnerability.
With the extension, MoSSOT detected 187 vulnerable apps and
99 of them were not captured by the original method.
Session 4A: Mobile SecurityAsiaCCS ’19, July 9–12, 2019, Auckland, New Zealand282