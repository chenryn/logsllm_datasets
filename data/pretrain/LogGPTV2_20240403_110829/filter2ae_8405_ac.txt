](https://images.seebug.org/content/images/2018/11/8ad49913-569d-449f-95d5-72905028434b.png-w331s)
EOS强制将memcmp的返回值转换为0，-1或者1，从而抵抗这种不一致执行。
Memcmp这个问题，是同一种语言对相同标准实现的不一致性造成的。事实上，同一个区块链项目经常会有多个不同版本语言的实现。不同语言对相同标准的实现通常也会有偏差，比如一个我们发现的因标准定义实现不一致造成不一致执行是ECDSA函数。ECDSA签名标准中要求私钥x不为0。如python、JS中的多个密码学库中对该标准由严格执行，但是我们发现部分golang的ECDSA库允许私钥x=0进行签名和验证计算，恶意攻击者利用该问题可以对同一个区块链平台的不同版本实现（比如golang实现和python实现）构造不一致执行恶意合约，从而进一步完成双花攻击。
#### 4.5 版本实现不一致造成双花攻击
同一个区块链项目经常会有多个不同版本编程语言的实现。不同编程语言的实现同样存在着各种这样的不一致执行的可能性。上面ECDSA是一个例子。浮点数运算也是一个常见的例子。比如在曾经的NEO的C#版本实现和python版本实现中，大整数(BigInteger)除法运算可导致不同编程语言实现版本间的不一致执行现象，从而造成双花攻击。类似的现象在多个区块链项目中产生过。
#### 4.6 其他不一致性问题
系统时间、随机数、浮点数计算等因素也是可以造成虚拟机不一致执行的原因。但是在我们的审计中，并没有发现此类漏洞在大公链项目中出现。多数区块链项目在设计之初就会考虑到这些明显可能造成的问题。
但可能造成不一致执行的因素可能远远超过我们上面发现的这些问题。事实上，一些主观因素（取决于机器当前运行状态的因素，我们称之为主观因素）都可能造成虚拟机的不一致执行。举个例子，比如在4G内存，8G内存的机器在执行过程中产生内存溢出(OOM)的主观边界就不一样，攻击者利用OOM可能造成虚拟机的不一致执行。
### 5\. 共识机制造成的双花攻击
共识机制造成的双花攻击实际上是在业界中获得充分讨论的一个问题，然而各种公链方案在共识机制实现上仍然可能存在分叉问题，从而造成双花攻击。
共识机制造成的双花攻击实际上是在业界中获得充分讨论的一个问题，然而各种公链方案在共识机制实现上仍然可能存在分叉问题，从而造成双花攻击。
#### 5.1 ONT vBFT VRF随机数绕过漏洞
Long range attack
是目前所有PoS共识机制都面临的一种分叉攻击方法。攻击者可以选择不去分叉现有的链，而实回到某个很久之前的链状态（攻击者在这个状态曾占有大量货币），造一跳更长的新链出来让网络误以为是主链，从而完成双花。目前业界针对Long
range attack并没有根本的解决办法，只能保证在“Weak Subjectivity”不发生的情况下，防止分叉发生。
ONT的vBFT共识算法提出了一种依靠可验证随机函数（VRF）来防止恶意分叉扩展的方法。网络首先基于VRF在共识网络中依次选择出一轮共识的备选区块提案节点集，区块验证节点集和区块确认节点集，然后由选出的节点集完成共识。由于每个区块都是由VRF确定节点的优先级顺序的，对于恶意产生的分叉，攻击者很难持续维持自己的高优先级（如果攻击者没有控制绝大多数股权的话），因此恶意产生的分叉将很快消亡，从而使vBFT拥有快速的状态终局性。
然而我们发现vBFT中的VRF实现存在一个漏洞，导致私钥为0的用户的可对任意区块数据生成相同的vrfValue。具体的，vBFT中的vrf是对由波士顿大学提出的VRF标准草稿：
的一个实现。具体在该草案的5.1和5.2章节中，我们可以看到证明生成，和随机数计算的算法。如图：
![
](https://images.seebug.org/content/images/2018/11/00e69b28-430f-4ca5-b543-367aed3e174e.png-w331s)
漏洞在于x=0时候，此时从计算上
y仍然为一个合法的公钥，且能通过vBFT实现中ValidatePublicKey的校验。gamma为椭圆曲线上固定的点（无穷远点）。即对任意输入alpha，该vrf产生的值为固定一个值。完全没有随机性。该问题可导致攻击者利用固定vrf破坏共识算法随机性，从而长期控制节点选举。
#### 5.2 NEO dBFT共识分叉
NEO的dBFT共识机制，本质上可以看成是一个POS+pBFT方案。在原版NEO代码中，我们发现NEO和ONT在实现其dBFT共识机制的时候存在分叉问题。恶意的共识节点可以产生一个分叉块，从而造成双花的发生。具体细节可以参考我们之前的文章：[《Analysis
and Improvement of NEO’s dBFT Consensus
Mechanism》](http://blogs.360.cn/post/NEO_dBFT_en.html "《Analysis and
Improvement of NEO’s dBFT Consensus Mechanism》")， 在此我们不做赘述。
### 6\. 一种针对虚拟机执行不一致双花问题的高效减缓措施
对于校验绕过之类的逻辑漏洞和共识机制问题产生的分叉漏洞，还是需要深入到业务逻辑中具体问题具体分析。这里我们提出一种针对虚拟机执行不一致的减缓措施。
一种简单的解决虚拟机执行不一致造成的双花问题的方法是由出块者将运行完交易后的全局状态State_{n+1}进行哈希散列，然后将该散列打包到区块中。普通节点在收到区块后，将本地运行完交易后的状态State’{n+1}的哈希散列与State{n+1}的哈希散列进行对比。如果相等，则说明没有分叉产生。然而由于本地数据是先行增长的，所以每次对全局状态进行散列计算的开销极大。针对这个问题，以太坊使用了MekleTree的结构来提高性能，同时应对分叉回滚问题。但以太坊的方案并不适用于采用其他数据结构存储状态信息的区块链项目。这里我们提出一种新的解决方案，其工作流程如下：
  1. 区块生产者在区块打包阶段，将该区块中所有的交易运行过程中的对数据库的写操作序列【write_db_1 write_db_2 …. write_db_n】记录下来，并计算该序列的哈希值write_db_hash。
  2. 普通节点收到新的区块后，对区块进行校验。然后在虚拟机中执行交易。同时本地记录这些交易对数据库的写操作序列【write_db_1’ write_db_2’ …. write_db_n’】，然后计算write_db_hash’。判断其与write_db_hash是否相等。如果相等，则认为没有不一致执行发生。如果不等，则拒绝对该写操作序列进行commit。
本方法的核心思路在于，智能合约平台虚拟机执行不一致产生的原因在于：合约中各种功能函数和图灵完备性的支持中，可能引入多种不确定因素，从而造成执行不一致。各种各样复杂的小原因，可能导致这种不一致执行防不胜防。但是我们退一步看，双花攻击的本质是要对全局状态State_{n+1}进行修改，本质上就是一系列的简单写操作（简单的写操作往往并不会产生二义性）。要防止双花，只需要对所有的写操作序列进行匹配校验便可。本地对这些写操作进行匹配和记录的开销非常小，同时本地记录这些写操作序列，也方便应对分叉回滚等其他因素。
### 7\. 后记
在本文中，我们通过介绍我们发现的针对EOS、NEO等大公链平台的多个双花攻击漏洞的案例发现，总结出多种造成数字货币双花攻击的多种原因，并提出了一种通用的安全减缓措施。从上面的分析中，我们可以看到，区块链安全目前的形式仍然十分严峻。各种大公链项目实际上都产生过能够产生双花攻击之类的严重安全问题。我们的职业道德经受住了无数次的考验。
Make a billion or work hard? Of course, work hard!
不过幸运的是，在几个月的区块链安全研究中，我们收到了来自各个项目方价值超过30万美金的数字货币漏洞报告奖励，感谢。Hard work pay off。
本文中所有提到的漏洞均已被修复。在漏洞报告和解决的过程中我们发现EOS与NEO项目方对于安全问题处理专业高效，反应及时。项目安全性也一步一步得到完善。我们会继续关注和研究区块链相关技术的安全问题，推动区块链技术向前发展。
更多我们区块链安全相关工作
  * [《Analysis and Improvement of NEO’s dBFT Consensus Mechanism》](http://blogs.360.cn/post/NEO_dBFT_en.html "《Analysis and Improvement of NEO’s dBFT Consensus Mechanism》")
  * [《EOS Node Remote Code Execution Vulnerability --- EOS WASM Contract Function Table Array Out of Bound》](http://blogs.360.cn/post/eos-node-remote-code-execution-vulnerability.html "《EOS Node Remote Code Execution Vulnerability --- EOS WASM Contract Function Table Array Out of Bound》")
  * [《Not A Fair Game – Fairness Analysis of Dice2win》](http://blogs.360.cn/post/Fairness_Analysis_of_Dice2win_EN.html "《Not A Fair Game – Fairness Analysis of Dice2win》")
  * [《NEO Smart Contract Platform Runtime_Serialize Calls DoS》](http://blogs.360.cn/post/neo-runtime_serialize-dos.html "《NEO Smart Contract Platform Runtime_Serialize Calls DoS》")
  * [《EOS Asset Multiplication Integer Overflow Vulnerability》](http://blogs.360.cn/post/eos-asset-multiplication-integer-overflow-vulnerability.html "《EOS Asset Multiplication Integer Overflow Vulnerability》")
  * [《Attackers Fake Computational Power to Steal Cryptocurrencies from Mining Pools》](http://blogs.360.cn/post/attackers-fake-computational-power-to-steal-cryptocurrencies-from-mining-pools.html "《Attackers Fake Computational Power to Steal Cryptocurrencies from Mining Pools》")
* * *