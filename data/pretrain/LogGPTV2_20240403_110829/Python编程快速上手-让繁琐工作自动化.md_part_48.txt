最接近的整数。
15.3 项目：超级秒表
假设要记录在没有自动化的枯燥任务上花了多少时间。你没有物理秒表，要为
笔记本或智能手机找到一个免费的秒表应用，没有广告，且不会将你的浏览历史发
送给市场营销人员，又出乎意料地困难（在你同意的许可协议中，它说它可以这样做。
你确实阅读了许可协议，不是吗？）。你可以自己用Python写一个简单的秒表程序。
总的来说，你的程序需要完成：
 记录从按下回车键开始，每次按键的时间，每次按键都是一个新的“单圈”。
 打印圈数、总时间和单圈时间。
这意味着代码将需要完成以下任务：
 在程序开始时，通过调用time.time()得到当前时间，将它保存为一个时间戳。
在每个单圈开始时也一样。
 记录圈数，每次用户按下回车键时加1。
 用时间戳相减，得到计算流逝的时间。
 处理KeyboardInterrupt异常，这样用户可以按Ctrl-C退出。
打开一个新的文件编辑器窗口，并保存为stopwatch.py。
第 1步：设置程序来记录时间
秒表程序需要用到当前时间，所以要导入的time模块。程序在调用input()之前，
也应该向用户打印一些简短的说明，这样计时器可以在用户按下回车键后开始。然
后，代码将开始记录单圈时间。在文件编辑器中输入以下代码，为其余的代码编写
TODO注释，作为占位符：
#! python3
# stopwatch.py - A simple stopwatch program.
import time
# Display the program's instructions.
print('Press ENTER to begin. Afterwards, press ENTER to "click" the stopwatch.
Press Ctrl-C to quit.')
input() # press Enter to begin
print('Started.')
startTime = time.time() # get the first lap's start time
lastTime = startTime
lapNum = 1
# TODO: Start tracking the lap times.
Python编程快速上手——让繁琐工作自动化
既然我们已经编码显示了用户说明，那就开始第一圈，记下时间，并将圈数设为1。
第 2步：记录并打印单圈时间
现在，让我们编码开始每一个新的单圈，计算前一圈花了多少时间，并计算自
启动秒表后经过的总时间。我们将显示的单圈时间和总时间，为每个新的单圈增加
圈计数。将下面的代码添加到程序中：
#! python3
# stopwatch.py - A simple stopwatch program.
import time
--snip--
# Start tracking the lap times.
 try:
 while True:
input()
 lapTime = round(time.time() - lastTime, 2)
 totalTime = round(time.time() - startTime, 2)
 print('Lap #%s: %s (%s)' % (lapNum, totalTime, lapTime), end='')
lapNum += 1
lastTime = time.time() # reset the last lap time
 except KeyboardInterrupt:
# Handle the Ctrl-C exception to keep its error message from displaying.
print('\nDone.')
如果用户按Ctrl-C停止秒表，KeyboardInterrupt异常将抛出，如果程序的执行不是
一个try语句，就会崩溃。为了防止崩溃，我们将这部分程序包装在一个try语句中。
我们将在except子句中处理异常，所以当Ctrl-C 按下并引发异常时，程序执行转向
except子句，打印Done，而不是KeyboardInterrupt错误消息。在此之前，执行处于一
个无限循环中，调用input()并等待，直到用户按下回车键结束一圈。当一圈结束时，
我们用当前时间time.time()减去该圈开始的时间lastTime，计算该圈花了多少时间。
我们用当前时间减去秒表最开始启动的时间startTime，计算总共流逝的时间。
由于这些时间计算的结果在小数点后有许多位（如4.766272783279419），所以
我们在和行用round()函数，将浮点值四舍五入到小数点后两位。
在行，我们打印出圈数，消耗的总时间和单圈时间。由于用户为 input()调用
按下回车时，会在屏幕上打印一个换行，所以我们向 print()函数传入 end=''，避免
输出重复空行。打印单圈信息后，我们将计数器 lapNum 加 1，将 lastTime 设置为
当前时间（这就是下一圈的开始时间），从而为下一圈做好准备。
第 3步：类似程序的想法
时间追踪为程序打开了几种可能性。虽然可以下载应用程序来做其中一些事
情，但自己编程的好处是它们是免费的，而且不会充斥着广告和无用的功能。可以
编写类似的程序来完成以下任务：
第15章 保持时间、计划任务和启动程序
 创建一个简单的工时表应用程序，当输入一个人的名字时，用当前的时间记录
下他们进入或离开的时间。
 为你的程序添加一个功能，显示自一项处理开始以来的时间，诸如利用requests
模块进行的下载（参见第11章）。
 间歇性地检查程序已经运行了多久，并为用户提供了一个机会，取消耗时太长
的任务。
15.4 datetime 模块
time 模块用于取得 Unix 纪元时间戳，并加以处理。但是，如果以更方便的格
式显示日期，或对日期进行算术运算（例如，搞清楚 205 天前是什么日期，或 123
天后是什么日期），就应该使用datetime模块。
datetime模块有自己的datetime数据类型。datetime值表示一个特定的时刻。在交
互式环境中输入以下代码：
>>> import datetime
 >>> datetime.datetime.now()
 datetime.datetime(2015, 2, 27, 11, 10, 49, 55, 53)
 >>> dt = datetime.datetime(2015, 10, 21, 16, 29, 0)
 >>> dt.year, dt.month, dt.day
(2015, 10, 21)
 >>> dt.hour, dt.minute, dt.second
( 16, 29, 0)
调用 datetime.datetime.now()返回一个 datetime 对象，表示当前的日期和时
间，根据你的计算机的时钟。这个对象包含当前时刻的年、月、日、时、分、秒和
微秒。也可以利用datetime.datetime()函数，向它传入代表年、月、日、时、分、
秒的整数，得到特定时刻的datetime对象。这些整数将保存在datetime对象的year、
month、day、hour、minute和second属性中。
Unix 纪元时间戳可以通过 datetime.datetime.fromtimestamp()，转换为 datetime
对象。datetime 对象的日期和时间将根据本地时区转换。在交互式环境中输入以下
代码：
>>> datetime.datetime.fromtimestamp(1000000)
datetime.datetime(1970, 1, 12, 5, 46, 40)
>>> datetime.datetime.fromtimestamp(time.time())
datetime.datetime(2015, 2, 27, 11, 13, 0, 604980)
调用 datetime.datetime.fromtimestamp()并传入 1000000，返回一个 datetime 对
象，表示Unix纪元后1000000秒的时刻。传入time.time()，即当前时刻的Unix纪
元时间戳，则返回当前时刻的datetime对象。因此，表达式datetime.datetime.now()
和 datetime.datetime.fromtimestamp(time.time())做的事情相同，它们都返回当前时刻
的datetime对象。
Python编程快速上手——让繁琐工作自动化
注意 这些例子是在一台设置了太平洋标准时间的计算机上输入的。如果你在另一个
时区，结果会有所不同。
datetime对象可以用比较操作符进行比较，弄清楚谁在前面。后面的datetime对象
是“更大”的值。在交互式环境中输入以下代码：
 >>> halloween2015 = datetime.datetime(2015, 10, 31, 0, 0, 0)
 >>> newyears2016 = datetime.datetime(2016, 1, 1, 0, 0, 0)
>>> oct31_2015 = datetime.datetime(2015, 10, 31, 0, 0, 0)
 >>> halloween2015 == oct31_2015
True
 >>> halloween2015 > newyears2016
False
 >>> newyears2016 > halloween2015
True
>>> newyears2016 != oct31_2015
T rue
为 2015 年 10 月 31 日的第一个时刻（午夜）创建一个 datetime 对象，将它保
存在halloween2015中。为2016年1月1日的第一个时刻创建一个datetime对象，
将它保存在newyears2016中。然后，为2015年10月31日的午夜创建另一个对象，
将它保存在oct31_2015中。比较halloween2015和oct31_2015，它们是相等的。比
较newyears2016和halloween2015，newyears2016大于（晚于）halloween2015 。
15.4.1 timedelta数据类型
datetime模块还提供了timedelta数据类型，它表示一段时间，而不是一个时刻。
在交互式环境中输入以下代码：
 >>> delta = datetime.timedelta(days=11, hours=10, minutes=9, seconds=8)
 >>> delta.days, delta.seconds, delta.microseconds
(11, 36548, 0)
>>> delta.total_seconds()
986948.0
>>> str(delta)
' 11 days, 10:09:08'
要创建 timedelta 对象，就用 datetime.timedelta()函数。datetime.timedelta()函数
接受关键字参数weeks、days、hours、minutes、seconds、milliseconds和microseconds。
没有month和year关键字参数，因为“月”和“年”是可变的时间，依赖于特定月
份或年份。timedelta对象拥有的总时间以天、秒、微秒来表示。这些数字分别保存
在 days、seconds 和 microseconds 属性中。total_seconds()方法返回只以秒表示的时
间。将一个timedelta对象传入str()，将返回格式良好的、人类可读的字符串表示。
在这个例子中，我们将关键字参数传入datetime.delta()，指定11天、10小时、
9 分和 8 秒的时间，将返回的 timedelta 对象保存在delta 中。该 timedelta 对象的
days 属性为11，seconds属性为36548（10小时、9分钟、8 秒，以秒表示）。调
第15章 保持时间、计划任务和启动程序
用total_seconds()告诉我们，11天、10小时、9分和8秒是986948秒。最后，将这个
timedelta对象传入str()，返回一个字符串，明确解释了这段时间。
算术运算符可以用于对datetime值进行日期运算。例如，要计算今天之后1000
天的日期，在交互式环境中输入以下代码：
>>> dt = datetime.datetime.now()
>>> dt
datetime.datetime(2015, 2, 27, 18, 38, 50, 636181)
>>> thousandDays = datetime.timedelta(days=1000)
>>> dt + thousandDays
datetime.datetime(2017, 11, 23, 18, 38, 50, 636181)
首先，生成表示当前时刻的datetime对象，保存在dt中。然后生成一个timedelta
对象，表示1000天，保存在thousandDays中。dt与thousandDays相加，得到一个
datetime对象，表示现在之后的1000天。Python将完成日期运算，弄清楚2015年
2月27日之后的1000天，将是2017年11月23日。这很有用，因为如果要从一个
给定的日期计算 1000 天之后，需要记住每个月有多少天，闰年的因素和其他棘手
的细节。datetime模块为你处理所有这些问题。
利用+和-运算符，timedelta对象与datetime对象或其他timedelta对象相加或相
减。利用*和/运算符，timedelta 对象可以乘以或除以整数或浮点数。在交互式环境
中输入以下代码：
 >>> oct21st = datetime.datetime(2015, 10, 21, 16, 29, 0)
 >>> aboutThirtyYears = datetime.timedelta(days=365 * 30)
>>> oct21st
datetime.datetime(2015, 10, 21, 16, 29)
>>> oct21st - aboutThirtyYears
datetime.datetime(1985, 10, 28, 16, 29)
>>> oct21st - (2 * aboutThirtyYears)
d atetime.datetime(1955, 11, 5, 16, 29)
这里，我们生成了一个DateTime对象，表示2015年10月21日，以及一个
timedelta对象，表示大约30年的时间（我们假设每年为365天）。从oct21st中
减去 aboutThirtyYears，我们就得到一个datetime对象，表示2015年10月21日前30
年的一天。从oct21st中减去2 * aboutThirtyYears，得到一个datetime对象，表示2015
年10月21日之前60年的一天。
15.4.2 暂停直至特定日期
time.sleep()方法可以暂停程序若干秒。利用一个while循环，可以让程序暂停，
直到一个特定的日期。例如，下面的代码会继续循环，直到2016年万圣节：
import datetime
import time
halloween2016 = datetime.datetime(2016, 10, 31, 0, 0, 0)
while datetime.datetime.now() < halloween2016:
time.sleep(1)
Python编程快速上手——让繁琐工作自动化
time.sleep(1)调用将暂停你的Python程序，这样计算机不会浪费CPU处理周期，
一遍又一遍地检查时间。相反，while循环只是每秒检查一次，在2016年万圣节（或
你编程让它停止的时间）后继续执行后面的程序。
15.4.3 将datetime 对象转换为字符串
Unix纪元时间戳和datetime对象对人类来说都不是很友好可读。利用strftime()方
法，可以将datetime对象显示为字符串。（strftime()函数名中的f表示格式，format）。
该的strftime()方法使用的指令类似于Python的字符串格式化。表15-1列出了完
整的strftime()指令。
表15-1 strftime()指令
strftime指令 含义
%Y 带世纪的年份，例如'2014'
%y 不带世纪的年份，'00'至'99'（1970至2069）
%m 数字表示的月份, '01'至'12'
%B 完整的月份，例如'November'
%b 简写的月份，例如'Nov'
%d 一月中的第几天，'01'至'31'
%j 一年中的第几天，'001'至'366'
%w 一周中的第几天，'0'（周日）至'6'（周六）
%A 完整的周几，例如'Monday'
%a 简写的周几，例如'Mon'