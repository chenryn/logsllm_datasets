```  
vi pg_hba.conf  
# IPv4 local connections:  
host    all             all             127.0.0.1/32            md5  
pg_ctl reload -D $PGDATA  
psql  
alter role postgres encrypted password '123456';  
```  
1、建立pg本地表  
```  
postgres=# create table t1 (id int, info text, ts timestamp);  
CREATE TABLE  
postgres=# insert into t1 select generate_series(1,1000000), md5(random()::text), clock_timestamp();  
INSERT 0 1000000  
```  
2、在duckdb中使用postgres插件可以读取pg本地表的数据  
```  
root@9b780f5ea2e8:~# cd duckdb/build/release/  
root@9b780f5ea2e8:~/duckdb/build/release# ./duckdb   
v0.7.1 b00b93f  
Enter ".help" for usage hints.  
Connected to a transient in-memory database.  
Use ".open FILENAME" to reopen on a persistent database.  
D load 'postgres';  
D select * from POSTGRES_SCAN_PUSHDOWN('dbname=postgres user=postgres hostaddr=127.0.0.1 port=1921 password=123456', 'public', 't1') limit 1;  
┌───────┬──────────────────────────────────┬────────────────────────────┐  
│  id   │               info               │             ts             │  
│ int32 │             varchar              │         timestamp          │  
├───────┼──────────────────────────────────┼────────────────────────────┤  
│     1 │ c8ecbcc36395bfa4d39b414e306c1b81 │ 2023-03-09 05:49:30.184854 │  
└───────┴──────────────────────────────────┴────────────────────────────┘  
D   
```  
3、在duckdb中可以打通pg和oss, 也就是将pg的数据写入oss  
```  
set s3_access_key_id='LTAI***';     
set s3_secret_access_key='6WUW***';     
set s3_endpoint='s3.oss-cn-shanghai.aliyuncs.com';     
COPY (  
select * from POSTGRES_SCAN_PUSHDOWN('dbname=postgres user=postgres hostaddr=127.0.0.1 port=1921 password=123456', 'public', 't1')  
)   
TO 's3://adc-oss-1872hd2/ECSOSS/u-ijr7vhba/abc.parquet';   
100% ▕████████████████████████████████████████████████████████████▏   
```  
4、紧接着, 直接在pg里面使用duckdb_fdw插件, 让duckdb来读取pg的数据写入oss.    
```  
SELECT duckdb_execute('duckdb_server',     
$$    
install 'postgres';   
$$);    
SELECT duckdb_execute('duckdb_server',     
$$    
load 'postgres';   
$$);    
SELECT duckdb_execute('duckdb_server',     
$$    
COPY (  
select * from POSTGRES_SCAN_PUSHDOWN('dbname=postgres user=postgres hostaddr=127.0.0.1 port=1921 password=123456', 'public', 't1')  
)   
TO 's3://adc-oss-1872hd2/ECSOSS/u-ijr7vhba/test_import_from_pg1.parquet';   
$$);    
```  
使用如上方法install postgres时, 会自动从duckdb官方下载对应版本编译好的插件, 例如:   
- https://extensions.duckdb.org/v0.7.1/linux_amd64/postgres_scanner.duckdb_extension.gz  
详见:   
- https://duckdb.org/docs/extensions/overview.html
方法没问题, 目前遇到一个bug, 可能和gpdb postgres_fdw遇到的问题一样.  
```  
postgres=#   
SELECT duckdb_execute('duckdb_server',     
$$    
COPY (  
select * from POSTGRES_SCAN('dbname=postgres user=postgres hostaddr=127.0.0.1 port=1921 password=123456', 'public', 't1')  
)   
TO 's3://adc-oss-1872hd2/ECSOSS/u-ijr7vhba/test_import_from_pg1.parquet';   
$$);    
ERROR:  HV00L: SQL error during prepare: IO Error: Unable to connect to Postgres at dbname=postgres user=postgres hostaddr=127.0.0.1 port=1921 password=123456: libpq is incorrectly linked to backend functions   
COPY (  
select * from POSTGRES_SCAN('dbname=postgres user=postgres hostaddr=127.0.0.1 port=1921 password=123456', 'public', 't1')  
)   
TO 's3://adc-oss-1872hd2/ECSOSS/u-ijr7vhba/test_import_from_pg1.parquet';   
LOCATION:  sqlite_prepare_wrapper, duckdb_fdw.c:504  
```  
相关代码sqlite3_prepare_v2:   
```  
/* Wrapper for sqlite3_prepare */  
static void  
sqlite_prepare_wrapper(ForeignServer *server, sqlite3 * db, char *query, sqlite3_stmt * *stmt,  
					   const char **pzTail, bool is_cache)  
{  
	int			rc;  
	// db = sqlite_get_connection(server, false);  
	// elog(DEBUG1, "duckdb_fdw : %s %s %p %p %p %p\n", __func__, query, server,db,&stmt,stmt);  
	rc = sqlite3_prepare_v2(db, query, -1, stmt, pzTail);  
	// elog(DEBUG1, "duckdb_fdw : %s %s %d \n", __func__, query, rc);  
	if (rc != SQLITE_OK)  
	{  
		ereport(ERROR,  
				(errcode(ERRCODE_FDW_UNABLE_TO_CREATE_EXECUTION),  
				 errmsg("SQL error during prepare: %s %s", sqlite3_errmsg(db), query)  
				 ));  
	}  
	/* cache stmt to finalize at last */  
	if (is_cache)  
		sqlite_cache_stmt(server, stmt);  
}  
```  
gpdb类似的一个issue.   
https://github.com/greenplum-db/gpdb/issues/11400  
https://github.com/greenplum-db/gpdb/commit/667f0c37bc6d7bce7be8b758652ef95ddb823e19  
```  
Fix postgres_fdw's libpq issue (#10617)  
* Fix postgres_fdw's libpq issue  
When using posgres_fdw, it reports the following error:  
unsupported frontend protocol 28675.0: server supports 2.0 to 3.0  
root cause: Even if postgres_fdw.so is dynamic linked to libpq.so  
which is compiled with the option -DFRONTEND, but when it's loaded  
in gpdb and run, it will use the backend libpq which is compiled together  
with postgres program and reports the error.  
We statically link libpq into postgres_fdw and hide all the symbols  
of libpq.a with --exclude-libs=libpq.a to make it uses the frontend  
libpq.  
As postgres_fdw is compiled as a backend without -DFRONTEND, and linked  
to libpq which is a frontend, but _PQconninfoOption's length is  
different between backend and frontend as there is a macro in it.  
The backend's _PQconninfoOption has field connofs, but the frontend  
doesn't. This leads to the crash of postgres_fdw. So we delete the  
frontend macro in _PQconninfoOption.  
* Add FRONTEND macro on including libpq header files  
postgres_fdw is compiled as a backend, it needs the server's  
header files such as executor/tuptable.h. It also needs libpq  
to connect to a remote postgres database, so it's staticly linked  
to libpq.a which is compiled as a frontend using -DFRONTEND.  
But the struct PQconninfoOption's length is different between  
backend and frontend, there is no "connofs" field in frontend.  
When postgres_fdw calls the function "PQconndefaults" implemented  
in libpq.a and uses the returned PQconninfoOption variable, it crashes,  
because the PQconninfoOption variable returned by libpq.a doesn't contain  
the "connofs" value, but the postgres_fdw thinks it has, so it crashes.  
In last commit, we remove the FRONTEND macro in struct PQconninfoOption  
to make PQconninfoOption is same in backend and frontend, but that brings  
an ABI change. To avoid that, we revert that, and instead, we add  
the FRONTEND macro on including libpq header files, so that  
postgres_fdw can process the libpq's variables returned by libpq.a's  
functions as frontend.  
* Report error if the libpq-fe.h is included before postgres_fdw.h  
postgres_fdw needs to include frontend mode libpq-fe.h, so if  
the libpq-fe.h is included before the postgres_fdw.h, and we  
don't know if it is frontend mode, so we just report the error here.  
```  
### 感谢steven贡献duckdb_fdw   
未来duckdb_fdw的优化期待:     
1、在server中加入更多的option, 例如
- 设置s3的参数, 连接时就默认配置好, 这样的话就可以直接查询foreign table, 不需要每次都需要通过execute接口来配置.    
- 启动时设置allow_unsigned_extensions, 允许使用未签名的外部extension.  
    - https://duckdb.org/docs/extensions/overview.html 
2、归档更加的便捷, 例如不再需要依赖postgres_scanner读取DB内的数据, 而是直接通过FDW写入到OSS.  
## 参考    
https://github.com/alitrack/duckdb_fdw    
[《Debian学习入门 - (作为服务器使用, Debian 操作系统可能是长期更好的选择?)》](../202302/20230217_02.md)      
[《DuckDB DataLake 场景使用举例 - aliyun OSS对象存储parquet》](../202210/20221026_01.md)      
[《用duckdb_fdw加速PostgreSQL分析计算, 提速40倍, 真香.》](../202209/20220924_01.md)      
[《PolarDB 开源版通过 duckdb_fdw 支持 parquet 列存数据文件以及高效OLAP》](../202212/20221209_02.md)    
[《如何用 PolarDB 证明巴菲特的投资理念 - 包括PolarDB on Docker简单部署》](../202209/20220908_02.md)      
#### [期望 PostgreSQL|开源PolarDB 增加什么功能?](https://github.com/digoal/blog/issues/76 "269ac3d1c492e938c0191101c7238216")  
#### [PolarDB 云原生分布式开源数据库](https://github.com/ApsaraDB "57258f76c37864c6e6d23383d05714ea")  
#### [PolarDB 学习图谱: 训练营、培训认证、在线互动实验、解决方案、内核开发公开课、生态合作、写心得拿奖品](https://www.aliyun.com/database/openpolardb/activity "8642f60e04ed0c814bf9cb9677976bd4")  
#### [PostgreSQL 解决方案集合](../201706/20170601_02.md "40cff096e9ed7122c512b35d8561d9c8")  
#### [德哥 / digoal's github - 公益是一辈子的事.](https://github.com/digoal/blog/blob/master/README.md "22709685feb7cab07d30f30387f0a9ae")  
![digoal's wechat](../pic/digoal_weixin.jpg "f7ad92eeba24523fd47a6e1a0e691b59")  
#### [购买PolarDB云服务折扣活动进行中, 55元起](https://www.aliyun.com/activity/new/polardb-yunparter?userCode=bsb3t4al "e0495c413bedacabb75ff1e880be465a")
#### [About 德哥](https://github.com/digoal/blog/blob/master/me/readme.md "a37735981e7704886ffd590565582dd0")
