Regexoptions: Case insensitive, ~ and S match at line breaks
Regexflaver: .NET, Java, JavaScripr, PCRE, Perl, Python, Ruby
C# example
Regex regexObj = new Regex(
@"^(?:Post(?:al)? (?:0ff1ice )?|P[- ]?o\.? )?Box\b",
Regex0ptions .IgnoreCase | Regex0ptions.Multiline
1f (regexobj -IsMatch(subjectString) {
Console.WriteLine("The value does not appear to be a street address*);
}else {
4.17 Find Addresses with Post office Boxes | 303
---
## Page 320
ConsoleWriteLine("Good to go°);
See Recipe 3.5 for help with running a regular expression match test like this with other
programming languages. Recipe 3.4 explains how to set the regex options used here.
Discussion
The following explanation is writen in free-spacing mode, so each of the meaningful
space characters in the regex has been escaped with a backslash:
# Assert position at the beginning of a line.
(?:
# Group but don’t capture:
Post(?:al)?\
#
Match “Post " or “Postal ".
(?:office\ )?
Optionally match *office ".
#
0r:
P[.\]?
#
Match *p" and an optional period or space character.
0\.？\
$
Match “o", an optional period, and a space character.
Box
)？
# Make the group optional.
# Assert position at a word boundary.
# Match *Box".
\b
Begexoptions Case insensitive, ~ and S match at line breaks, free-spacing
Regexflavers: .NET, Java, XRegExp, PCRE, Perl, Python, Ruby
This regular expression matches all of the following example strings when they appear
at the beginning of a line:
*Post_office Box
*Postal Box
*post box
*P.0. box
*P_0_Box
*Po.box
·POB0x
Box
Despite the precautions taken here, you might encounter a few false positives or false
negatives because many people are used to shippers being flexible in how they decipher
lowed f you get a match using this regular expression, consider warming users that it
addresses. To mitigate this risk, it’s best to state up front that P.O. boxes are not al-
appears they have entered a P.O. box, while stillproviding the option to keep the entry.
See Also
Recipes 4.14, 4.15, and 4.16 show how to validate U.S., Canadian, and U.K. postal
codes, respectively.
304 | Chapter 4: Validation and Formatting
---
## Page 321
Techniques used in the regular expressions in this recipe are discussed in Chapter 2.
Recipe 2.3 explains character classes. Recipe 2.5 explains anchors. Recipe 2.6 explains
word boundaries. Recipe 2.8 explains altemation. Recipe 2.9 explains grouping.
Recipe 2.12 explains repetition.
4.18ReformatNamesFrom"FirstNameLastName"to
"LastName,FirstName"
Problem
You want to convert people’s names from the “FirstName LastName" format to
"LastName, FirstNamea for use in an alphabetical listing. You additionally want to
account for other name parts, so that you can, say convert *FirstName MiddleNames
Particles LastName Suffix? to *LastName, FirstName MiddleNames Particles Suffix."*
Solution
Unfortunately, it isn't possible to reliably parse names using a regular expression. Reg-
ular expressions are rigid, whereas names are so flexible that even humans get them
wrong. Determining the structure of a name or how it should be listed alphabetically
often requires taking traditional and national conventions, or even personal preferen-
ces, into account. Nevertheless, if youre wiling to make certain assumptions about
your data and can handle a moderate level of error, a regular expression can provide a
quick solution.
The following regular expression has intentionally been kept simple, rather than rying
to account for edge cases.
Regular expression
^(.+？)([^\s,]+)(,?(?: [S]r\.?|III?|IV))？$
Regex options: Case insensitive
Regexflavers: .NET, Java, JavaScript, PCRE, Perl, Python, Ruby
Replacement
$2,*$1$3
Replacement text flavors: .NET, Java, JavaScript, Perl, PHP
\2, =13
Replacement text flavors: Python, Ruby
JavaScript example
function formatName(name){
return name.replace(/~( +?) ([^\s,]+)(,? (?:[3S]r\.?|III?|Iv))?$/1,
4.18 Reformat Names From*FirstName LastName° to “LastName,FirstName* | 305
---
## Page 322
"$2, $1$3");
Recipe 3.15 has code listings that will help you add this regex search-and-replace to
programs written in other languages. Recipe 3.4 shows how to set the “case insensitive*
option used here.
Discussion
First, let's take a look at this regular expression piece by piece. Higher-level comments
are provided afterward to help explain which parts of a name are being matched by
various segments of the regex. Since the regex is written here in free-spacing mode, the
literal space characters have been escaped with backslashes:
# Assert position at the beginning of the string.
# Capture the enclosed match to backreference 1:
. +?
Match one or more characters, as few times as possible.
# End the capturing gxoup.
\
# Match a literal space character.
（
# Capture the enclosed match to backreference 2:
[^\s,]+
Match one or more non-whitespace/conna characters.
# End the capturing gxoup.
# Capture the enclosed match to backreference 3:
,？\
‘, xo 。‘. 4pew
(?:
:axnqde> 1,uop 4nq dno.xy
[3s]r\.?
0r:
III?
‘111, 10 ,1I, 4p1ew
IV
0r:
End the noncapturing_group.
Match "IV*.
）
)？
# Make the group optional.
$
# Assert position at the end of the string-
Regex options: Case insensitive, free-spacing
Regexflavers: .NET, Java, XRegExp, PCRE, Perl, Python, Ruby
This regular expression makes the following assumptions about the subject data:
• It contains at least one first name and one last name (other name parts are optional)
•The first name is listed before the last name (not the norm with some national
conventions),
•If the name contains a suffix, it is one of the values “Jr", *Jr.", "Sr", "Sr.", *II",
"III", or "IV", with an optional preceding comma.
A few more issues to consider:
•The regular expression cannot identify compound surmames that don’t use hy-
phens. For example, Sacha Baron Cohen would be replaced with Cohen, Sacha
Baron, rather than the correct listing, Baron Cohen, Sacha.
306 | Chapter 4: Validation and Formatting
---
## Page 323
•It does not keep particles in front of the family name, although this is sometimes
called for by convention or personal preference (for example, the correct alpha-
betical listing of “Charles de Gaulle" is “de Gaulle, Charles" according to the
Chicago Marucal of Sryle, 16th Edition, which contradicts Merriam-Webster's
Biographical Dictionary on this particular name).
Because of the <> and aqxa ewxu a ssn I dno8 umde Bus uaueda
the first name along with any number of middle names and surmame particles, such as
handled together because they are listed sequentially in the output. Lumping the fist
the German *von” or the French, Portuguese, and Spanish °de." These name parts are
and middle names together also helps avoid errors, because the regular expression
cannot distinguish between a compound first name, such as *Mary Lou” or *Norma
Jeane,” and a first name plus middle name. Even humans cannot accurately make the
distinction just by visual examination.
Capturing group2matches thelast name using [~\s ↓+.Like thedot used in capturing
group 1, the flexibility of this character class allows it to match accented characters and
any other non-Latin characters Capuring group 3 matches an ptional suffix, such as
"Jr." or "Ill,* from a predefined list of possible values. The suffix is handled separately
from the last name because it should continue to appear at the end of the reformatted
name.
Let's go back for a minute to capturing group 1. Why was the dot within group 1
followed by the lazy  quantifier, whereas the character class in group 2 was followed
by the greedy ：/-\+(),$#i]
Regex options: None
Regexflavers: .NET, Java, JavaScript, PCRE, Perl, Python, Ruby
Anything other than ASCI leters and numbers:
[A-Za-20-9]
Regex options: None
Regexflavers: .NET, Java, JavaScript, PCRE, Perl, Python, Ruby
Disallow three or more sequential identical characters
This next regex is intended to rule out passwords like 111111. It works in the opposite
way of the others in this recipe. If it matches, the password doesn’t meet the condition.
In other words, the regex only matches strings that repeat a character three times in a
row.
(-)\1}1
Regexoptions: Dot matches line breaks
Regexflavers: .NET, Java, XRegExp, PCRE, Perl, Python, Ruby