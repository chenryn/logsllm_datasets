# Chrome 扩展安全研究: 一个UXSS的挖掘经历
##### 译文声明
本文是翻译文章
译文仅供参考，具体内容表达以及含义原文为准。
> 本篇原创文章参加双倍稿费活动，预估稿费为600元，活动链接请点[此处](https://www.anquanke.com/post/id/98410)
## 引言
有点想把标题换成  来骗一波点击。但毕竟其实是扩展的问题，还是老实点写“扩展”吧。
这是我春节前挖到的一个漏洞，大概抓取了用户量top400的 Chrome
扩展，对比较在意的几个问题写了脚本删选了一部分出来，再逐个审计。本次讲的这个漏洞是想产出 UXSS 的时候挖的 UXSS 漏洞之一。我觉得比较典型，涉及到
content_scripts 和 background 脚本及其他 Chrome 扩展的特性，相对来说比较有趣，坑也稍微多一点。
由于不能公开插件详情，我把该插件和漏洞相关的源码抽出来，去掉一些带有公司名的关键字，放到 github 上:
`git clone` 到本地，打开 chrome://extensions/， 开启“开发者模式”, 点击 “加载已解压的扩展程序…” 按钮，选择
content_scripts_uxss 文件夹即可。
## manifest.json
manifest.json 是 Chrome 扩展的清单文件，Chrome 解析扩展时会检查这个文件的内容是否符合规范。审计也一般从这里开始：
    {
        "name": "content_script_uxss_example",
        "description": "一个由原型修改而来会产生UXSS的Chrome插件",
        "version": "1.0",
        "manifest_version": 2,
        "background": {
            "scripts": [
                "/core/js/jquery.min.js",
                "/core/js/background.js"
            ]
        },
        "author": "neargle@sec-news",
        "content_scripts": [
            {
                "matches": [
                    "http://*/*",
                    "https://*/*",
                    "file:///*/*"
                ],
                "exclude_matches": [],
                "js": [
                    "/core/js/jquery.min.js",
                    "/core/js/content_script.js"
                ],
                "run_at": "document_end",
                "all_frames": true
            }
        ]
    }
关注点在 background 和 content_scripts:
  1. background 可以设置一个扩展创建时就一直在后台存在的页面，只有关闭扩展才会使这个页面绑定的事件失效，重启扩展或浏览器才可以使定义的全局变量重新定义（Mac 下 `command + Q`）。如果设置了 `page` 属性， 如 `"background":{"page": "background.html"}`, 则这个文件就是该扩展的后台页面，可以访问 `chrome-extension://{扩展ID}/background.html` 进行调试，像本例中只设置了 scripts 属性的情况， 那么 Chrome 会自己生成这个 page 页面，地址在 `chrome-extension://{扩展ID}/_generated_background_page.html`。
  2. content_scripts 可以设置多个， 每一次访问一个 url 符合 matches 的匹配条件且不符合 exclude_matches 里所写的排除条件时，会运行 “js” 里设置的脚本。 matches 可以使用 `` 匹配所有 url。”run_at” 设置的是 content_scripts 的运行时间， all_frames 为 true 的时候，页面中 iframe 内部的页面也会触发 content_scripts。
background 和 content_scripts 及我们所运行的原本的网页，都不在同一个运行时上下文内，里面定义的变量不可互相访问，每个
runtime 可以访问的 api 也有所不同。但可以使用 `window.addEventListener` 给原本页面的 window
添加事件，通过事件操作 DOM 结构，background 和 content_scripts 之间的相互作用也经常使用
`chrome.extension.onRequest.addListener` 或
`chrome.runtime.onMessage.addListener` 进行。
## content_scripts
最开始我注意点其实是 /core/js/content_script.js 中的第
[#68](https://github.com/neargle/hacking-extensions/blob/master/content_scripts_uxss/core/js/content_script.js#L68)
行的代码:
    if (location.href.indexOf("?") > 0) {
        var a = location.href.split("?")[1].split("&");
        $(a).each(function() {
            var b = this.split("=");
            query[b[0]] = b[1]
        })
    }
一般插件内部使用的 jquery 版本不经常更新，该插件使用的 jquery 版本是 v1.7.1，存在如下漏洞:
而 a 参数的值很显然是获取当前 url 的 GET 请求参数，如果它直接使用 `location.search`， 那么 Chrome 里面里面会进行
url 编码， 比较难以利用，但是这里的这种写法却是可以使用 hash 来 bypass 的，设置一个如 `#?` 可以使得 `a=[""]`, 例如
`https://www.baidu.com/#?`。
但是，当 jquery 传入的选择器为数组的时候，该函数并不会触发漏洞， 如 `$([''])`。而且之后发现了更加有趣的 postmessage 接口，就把注意力转移到了接下来的代码上。
###  message 事件
扩展内使用 message 事件的情况，并不少见，在我爬取的 top400 的扩展中，有将近 200 插件在 content_script 内对
window 添加了 message 监听事件，本例中也有
[content_script.js#L3](https://github.com/neargle/hacking-extensions/blob/master/content_scripts_uxss/core/js/content_script.js#L3):
    window.addEventListener("message", function(a) {
    if (a.data != undefined) {
        plugdata = a.data;
        if (plugdata.Action != undefined)
            if (plugdata.Action == "GETCOOKIE") chrome.extension.sendRequest(plugdata, function() {});
            else if (plugdata.Action != "VERSION") {
            if (plugdata.background == undefined || plugdata.background == false) $("#divDetail").html("notifications with some message.");
            chrome.extension.sendRequest(plugdata, function() {})
        }
    }
    });
这里的 a.data 就是 postMessage 第一个参数传入的值，例如我们用 `ww =
window.open('https://www.google.com/');ww.postMessage("aaaaa", "*");`
发送一个message，那么这个 a.data 就等于 “aaaaa”。
可以发现，这段代码在判断了一下 data.Action 之后，就把 data 的值用 chrome.extension.sendRequest
发送了出去。这也是在浏览器插件里面经常出现的逻辑，因为正常的html页面并不能访问 chrome.extension 的api，如果需要发送信息到
`chrome.extension.onRequest.addListener` 或
`chrome.runtime.onMessage.addListener` 的回调函数内的话， 在 content_script
里面做一次中转也是经常采用的方法。
注意 content_script 有一个经常出现 domxss 输出函数 `html`:
    chrome.extension.onRequest.addListener(function(a, b, c) {
    switch (a.Action) {
        case "FAREResult":
        case "ONRESULT":
            typeof a.Data.Data === "string" ? $("#IRData").val(a.Data.Data) : $("#IRData").val(JSON.stringify(a.Data.Data));
            $("#Message").html(a.Data.Message);
            $("#Command").html(a.Data.Action);
            break;
    }
    });
不过这里需要原本页面的 dom 结构里面包含一些条件，必须带有 #Message 和 #Command
两个id的html元素，显然并不是我们想要的。如果页面符合这个条件的话，我们就可以直接使用 `ww =
window.open('https://www.google.com/');ww.postMessage({"Action":"ONRESULT",
"Message":""}, "*");` 即可造成跨到 google 域的xss攻击。
而 PerformAction 函数却有一个这样的输出，`$("body").html(b)`, 这显然就很通用了。
    function PerformAction() {
    if (plugdata != null) {
        var a = plugdata.Action;
        switch (plugdata.Method) {
            case "POST":
                $.post(plugdata.URL, plugdata.post, function(b) {
                    if (plugdata.SetBodyText == true) try {
                        $("body").html(b)
                    } catch (c) {}