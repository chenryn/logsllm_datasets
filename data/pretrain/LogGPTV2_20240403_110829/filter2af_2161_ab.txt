            codetextarea.value = btext
        }
    }
需要注意的是，这里的popup页面文件内部无法使用``标签或`onclick`属性来执行或指定相关js方法，因为清单文件manifest.json中规定了CSP的script-src，禁止了内联js的使用，可以通过修改CSP或引用外部js文件解决。
    # 报错代码
    # 报错内容
    Refused to execute inline event handler because it violates the following Content Security Policy directive: "script-src 'self' 'unsafe-eval'". Either the 'unsafe-inline' keyword, a hash ('sha256-...'), or a nonce ('nonce-...') is required to enable inline execution. Note that hashes do not apply to event handlers, style attributes and javascript: navigations unless the 'unsafe-hashes' keyword is present.
    # 修改后代码
    # popup.js
    var codebutton = document.getElementById("codebutton")
    codebutton.onclick = codetext
### 使用前端框架
当开发者使用Vue等新一代前端框架及其配套的UI框架时（这里以Vue为例），可能会涉及扩展的特性进行针对处理，以下面引入框架为例进行讲解：  
一般引入Vue框架有两种方式，Vue脚手架或者CDN/本地引入global.js文件。  
首先脚手架方式引入的话，是由脚手架进行Vue模板的编译工作，此时无需额外处理，需要了解的是，默认的发布生产版本将会将生产版本放置在默认的dist文件夹，开发者可以使用修改配置文件的build模块outDir参数修改生成目录到扩展的相关页面对应的目录下。
    // 安装并执行 create-vue, 创建Vue项目
    npm init vue@latest
    // 进入对应的Vue项目，按照依赖并启动在线开发端口
    cd projectname
    npm install
    npm run dev
    // 发布生产环境
    npm run build
在实时修改代码后，dev开发端口开启的web业务的页面内容会实时更新，但是插件目录的部署文件仍然需要手动执行命令来生成，为了解决这个问题，可以使用nodemon库来监控代码修改和自动编译文件到插件目录。
    npm install nodemon
    # package.json scripts键
    "scripts": {
        "dev": "vite",
        "build": "vite build",
        // 监控代码修改和自动编译
        "build:watch": "nodemon --watch src --exec npm run build --ext \"ts,vue\"",
        "preview": "vite preview --port 4173"
      },
    npm run build:watch
当使用CDN/本地引入global.js文件的方式引入Vue框架时，使用默认的CSP可能会导致无法使用eval用于Vue编译模板文件导致报错，此时可以在`script-src` 中添加`'unsafe-eval'`来允许页面加载时编译自身Vue模板内容。
    // 默认CSP
    "content_security_policy": "style-src 'self'; script-src 'self'; object-src 'self';"
    // 修改后CSP
    "content_security_policy": "style-src 'self' 'unsafe-inline'; script-src 'self' 'unsafe-eval'; object-src 'self';"
### Chrome API调用
Chrome API为浏览器为开发者开放的相关接口，绝大多数的扩展改变浏览器原有行为都是通过调用Chrome
API实现的。开发者可以根据自身需求调用Chrome API或通过JS自行实现来实现预期的扩展功能。  
Manifest V2支持的API类型如下表（机翻）：
API权限声明 | 概述  
---|---  
自定义扩展用户界面 |  
浏览器操作 | 将图标、工具提示、锁屏提醒和弹出窗口添加到工具栏。  
命令 | 添加触发操作的键盘快捷键。  
上下文菜单 | 将项目添加到谷歌浏览器的上下文菜单中。  
多功能盒 | 将关键字功能添加到地址栏。  
覆盖页面 | 创建“新标签页”、“书签”或“历史记录”页面的新版本。  
页面操作 | 在工具栏中动态显示图标。  
构建扩展实用程序 |  
可访问性（a11y） | 使扩展程序可供残障人士访问。  
背景脚本 | 当有趣的事情发生时，检测并做出反应。  
国际化 | 使用语言和区域设置。  
身份 | 获取 OAuth2 访问令牌。  
管理 | 管理已安装和正在运行的扩展。  
消息传递 | 从内容脚本到其父扩展进行通信，反之亦然。  
选项页面 | 允许用户自定义扩展。  
权限 | 修改扩展程序的权限。  
存储 | 存储和检索数据。  
修改和观察浏览器 |  
书签 | 创建、组织和操作书签行为。  
浏览数据 | 从用户的本地配置文件中删除浏览数据。  
下载 | 以编程方式启动、监视、操作和搜索下载。  
字体设置 | 管理浏览器的字体设置。  
历史 | 与浏览器的已访问页面记录进行交互。  
隐私 | 控制浏览器隐私功能。  
代理 | 管理浏览器的代理设置。  
会话 | 从浏览会话查询和还原选项卡和窗口。  
标签页 | 在浏览器中创建、修改和重新排列选项卡。  
热门网站 | 访问用户访问量最大的 URL。  
主题 | 更改浏览器的整体外观。  
窗口 | 在浏览器中创建、修改和重新排列窗口。  
修改和观察网络 |  
活动选项卡 | 通过消除对主机权限的大多数需求来安全地访问网站。``  
内容设置 | 自定义网站功能，如Cookie、脚本和插件。  
内容脚本 | 在网页上下文中运行脚本代码。  
Cookie | 浏览和修改浏览器的 Cookie 系统。  
跨域 XHR | 使用 XMLHttp 请求从远程服务器发送和接收数据。  
声明性内容 | 对页面内容执行操作，无需权限。  
桌面捕获 | 捕获屏幕、单个窗口或选项卡的内容。  
页面捕获 | 将选项卡的源代码信息另存为 MHTML。  
选项卡捕获 | 与选项卡媒体流交互。  
网站导航 | 动态导航请求的状态更新。  
网络请求 | 观察和分析流量。拦截阻止或修改正在进行的请求。  
打包、部署和更新 |  
浏览器网上应用商店 | 使用 Chrome 网上应用商店托管和更新扩展程序。  
其他部署选项 | 在指定网络上或与其他软件一起分发扩展。  
拓展浏览器开发工具 |  
调试器 | 检测网络交互，调试脚本，改变 DOM 和 CSS。  
开发工具 | 向 Chrome 开发者工具添加功能。  
找到需要调用的API后，需要首先在manifest.json的permissions键中声明权限，才能使用对应的API方法。permissions键接受一个字符数组作为值，数组内容为所有需要调用的API权限声明或扩展需要访问的站点地址。
    "permissions": [
        // API的使用权限
        "webRequest",
        "webRequestBlocking",
        // 对相应网站的访问权限
        "http://*/*",
        "https://*/*"
    ],
以调用网络方面常用的API `chrome.webRequest` 完成某些页面的阻断为例，代码附后：
  1. 当需要阻断页面请求时，除了声明网络活动监控权限`webRequest`以外还需要声明网络活动阻断权限`webRequestBlocking`。
  2. 在完成对调用权限的调用声明后，开放者即可在代码中调用对应的方法。下面示例中通过webRequest注册了一个网络请求的事件侦听器（`chrome.webRequest.onBeforeRequest.addListener`），Listener将在浏览器访问指定网页(`dnslog.cn及其子域名`)时调用回调函数（此处为了简洁方便使用匿名函数代替）。
  3. 当匿名函数返回了一个属性cancel为true的对象时，将会触发额外标签`blocking`，拦截本次请求。
  4. 通过以上几步，就实现了一个拦截浏览器被XSS或页面元素利用而发起DNSlog请求的程序逻辑。
  5. 另外开发者也可以在匿名函数中对本次请求的具体信息变量details进行筛选，例如在onBeforeSendHeaders的事件监听器中检查请求头的referer字段以将正常访问DNSlog网站的请求进行放行，防止扩展功能妨碍正常的页面访问。
    chrome.webRequest.onBeforeRequest.addListener(
        function(details) { 
            return {cancel: true}; 
        },  
        {urls: ["*://dnslog.cn/","*://*.dnslog.cn/"]},
        ["blocking"]
    );
### 安装调试
当完成以上内容后，可以将扩展加载到Chrome浏览器，以开发者模式运行未发布到谷歌商店的扩展。步骤如下：  
1、浏览器界面-更多-其他工具-我的扩展或者直接访问URL chrome://extensions/ 打开扩展页面  
2、开启右上角的开发者模式  
3、点击左上角的加载已解压的扩展程序，加载的文件夹路径为扩展的根目录（即清单文件manifest.json所在的文件夹路径）  
4、此时扩展将会被加载。  
需要注意的是，开放者模式下加载已解压的文件夹时，扩展根目录如果被删除，插件的静态文件会不可用，插件将在下一次启动浏览器时自动删除。  
在开启开发者模式的情况下，可以在扩展界面看到每个插件都有一个ID显示，这个ID将作为插件在浏览器中的唯一标识符使用，这个ID将根据插件的根目录文件夹的名称生成。而应用商店下载的插件将会被解压至`C:\Users\用户名\AppData\Local\Google\Chrome\User
Data\Default\Extensions\扩展ID`文件夹下(Windows7 及其以上版本)，此时ID为扩展的公钥哈希的一部分。  
调试popup页面时，可以在单击扩展栏图标显示的popup页面上右键检查，继而打开devtools进行相关popup页面的代码逻辑的调试工作。正如前面所说，用户在点击popup以外的浏览器界面时将会关闭popup，此时所有的元素和变量都将被销毁。所以调试期间请保持popup页面的展示。事实上，如果打开开发者工具后，扩展的popup页面并不会因为点击范围外空白处而关闭，这是为了保持调试页的存在，但是开发者仍然可以通过点击扩展图标或切换当前标签页来关闭popup。  
此时即可在devtools的源代码界面进行语句下断点，对popup中的代码逻辑进行调试，使用跟其他语言的IDE没有太大区别。  
调试后台页面或后台脚本时，可以通过扩展页面的链接跳转到后台脚本的调试窗口，此时可以通过element、console、network等devtools去调试对应的后台界面，其代码调试与popup的调试没有太大区别。。与之相对的，虽然后台页面有一个固定的链接地址（chrome-extension://扩展哈希/扩展路径，如果使用的是后台脚本，扩展路径将会使用默认html地址`_generated_background_page.html`），但是当你直接访问这个路径时，并不会打开真正的起服务端作用的后台脚本页面，而是打开了一个新的html页面。  