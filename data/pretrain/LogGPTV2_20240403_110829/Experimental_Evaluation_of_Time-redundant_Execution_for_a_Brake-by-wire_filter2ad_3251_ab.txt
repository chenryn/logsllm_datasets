### Application
We utilized the Real-Time Workshop Ada Coder, an extension of Simulink, to generate the Ada software code used in our experiments. Figure 3 illustrates the top-level view of the model.

**Figure 3: Brake-by-wire Model**
- **InitialVehicleSpeed**
- **VehicleSpeed**
- **BrakePedalAngle**
- **Vehicle Model**
- **Wheel Node**
- **WheelSpeed**
- **BrakeForce**
- **BrakeSignal**

### Model Description
The model is divided into two main parts: one part models the vehicle, and the other part models a wheel node.

#### Vehicle Model
- **Inputs**: Initial speed value and brake pedal angle.
- **Initialization**: The vehicle model starts with an initial speed of 15 km/h, and the brake pedal is activated after 15 ms.
- **Functionality**: The vehicle model uses the brake pedal angle to calculate the brake force, which is then transmitted to the wheel node. The vehicle model also calculates the speed reduction caused by the friction force when the brake pad is pressed against the brake disc. This information, along with the new vehicle speed and wheel speed, is sent back to the wheel node.

#### Wheel Node
- **Functionality**: The wheel node calculates the force to be applied on the brake discs and returns this calculated force (BrakeSignal) to the vehicle model. It also computes the wheel slip, which is the speed difference between the vehicle and the wheel. If the specified slip level is exceeded, the brake force is reduced; otherwise, it is increased. This adjustment ensures optimal braking performance.

### Experimental Setup
**Figure 2: Brake-by-wire System**

#### Advantages of Brake-by-Wire
- Simplified assembly and service of the brake system.
- Environmental benefits due to the absence of a hydraulic system.
- Easier integration of assistance systems like ESP (Electronic Stability Program).

**Figure 4: Experimental Setup**
- **Hardware**: A Unix workstation hosts a Thor microprocessor board, which serves as the target system for our experiments.
- **Software**: The GOOFI fault injection tool runs on the workstation. The real-time kernel manages the execution of tasks, including the code generated for the wheel node. The vehicle model code runs on the Unix workstation and is not a target for fault injection.
- **Execution**: The brake-by-wire model runs for 125 loop iterations (125 ms), with data exchanged between the vehicle model and the wheel node every fifth loop.

### Thor Microprocessor Board
- **Specifications**: 32-bit Thor RISC microprocessor with 512 KB RAM, a 128-byte direct-mapped write-back data cache, and several internal EDMs (Error Detection Mechanisms).
- **EDMs**: Include run-time checks, control flow checking, and main memory error checking. Only run-time checks were activated in this study.
- **Run-time Checks**: These include common mechanisms found in other microprocessors, as well as additional checks such as constraint checks for array indices and loop variables.

### Real-Time Kernel
- **Functionality**: Supports time-redundant execution of tasks in a periodic receive-compute-send loop.
- **Task Execution**: Input data are received, processed, and the results are sent to actuators or other tasks.
- **Critical Task (Task A)**: Uses the wheel node code to calculate the brake force and generates a checksum for error detection.
- **Non-Critical Task (Task B)**: Calculates a slip value for use in systems like icy road warnings. Task B is not connected to Task A and does not share any common variables.

**Figure 5: Execution of a Critical Task**
- **Steps**: Dispatch, save registers, read data, calculate brake force, compare checksums, and write output. Re-execution occurs if there is a checksum mismatch.

### Fault Injection Environment
- **Tool**: GOOFI fault injection tool using Scan-Chain Implemented Fault Injection (SCIFI).
- **Fault Injection**: Single-bit-flips are used to model transients, injected into the registers and data cache via scan-chains.
- **Coverage**: 2250 out of 4400 state elements in Thor are covered by the scan-chains.
- **Injection Points**: Faults are injected during the execution of the brake force calculation task.

### Definitions
- **Value Failure**: Occurs when the computer produces an erroneous output value, either undetected or detected but with failed recovery.
- **Timing Failure**: Output arrives after the deadline.
- **Omission Failure**: Error is detected but no time to produce two identical results before the deadline.
- **Correct Result**: Produced if the fault leads to a latent or overwritten error, or if an error is detected and recovery is successful.
- **Fail-Stop Failure**: Error is detected but no recovery could be made.

**Figure 6: Error Propagation and Effects**
- **Classification**: Errors are classified based on their consequences, including correct results, value failures, timing failures, omission failures, and fail-stop failures.

This structured and detailed approach ensures that the brake-by-wire system is robust and reliable, with effective fault detection and recovery mechanisms in place.