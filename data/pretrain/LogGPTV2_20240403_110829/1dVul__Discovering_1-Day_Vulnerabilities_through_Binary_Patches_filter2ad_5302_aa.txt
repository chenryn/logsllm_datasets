title:1dVul: Discovering 1-Day Vulnerabilities through Binary Patches
author:Jiaqi Peng and
Feng Li and
Bingchang Liu and
Lili Xu and
Binghong Liu and
Kai Chen and
Wei Huo
2019 49th Annual IEEE/IFIP International Conference on Dependable Systems and Networks (DSN)
1dVul: Discovering 1-day Vulnerabilities through
Binary Patches
Jiaqi Peng∗†‡, Feng Li∗†¶, Bingchang Liu∗†‡, Lili Xu∗†, Binghong Liu∗†, Kai Chen∗‡§ and Wei Huo∗†‡
∗Institute of Information Engineering, Chinese Academy of Sciences
†Key Laboratory of Network Assessment Technology, Chinese Academy of Sciences
Beijing Key Laboratory of Network Security and Protection Technology
‡School of Cyber Security, University of Chinese Academy of Sciences
§State Key Laboratory of Information Security, Institute of Information Engineering, Chinese Academy of Science
{pengjiaqi, lifeng, liubingchang, xulili, liubinghong, chenkai, huowei}@iie.ac.cn
Abstract—Discovering 1-day vulnerabilities in binary
patches is worthwhile but challenging. One of the key
difﬁculties lies in generating inputs that could reach the
patched code snippet while making the unpatched program
crash. In this paper, we named it as a target-oriented input
generation problem or a ToIG problem for clarity. Existing
solutions for the ToIG problem either suffer from path
explosion or may get stuck by complex checks. In the
paper, we present a new solution to improve the efﬁciency
of ToIG which leverage a combination of a distance-
based directed fuzzing mechanism and a dominator-based
directed symbolic execution mechanism. To demonstrate
its efﬁciency, we design and implement 1dVul, a tool
for 1-day vulnerability discovering at binary-level, based
on the solution. Demonstrations show that 1dVul has
successfully generated inputs for 130 targets from a total
of 209 patch targets identiﬁed from applications in DARPA
Cyber Grant Challenge, while the state-of-the-art solutions
AFLGo and Driller can only reach 99 and 107 targets,
respectively, within the same limited time budget. Further-
more, 1dVul runs 2.2X and 3.6X faster than AFLGo and
Driller, respectively, and has conﬁrmed 96 vulnerabilities
from the unpatched programs.
Keywords—binary patch analysis, vulnerability discovery,
target-oriented input generation.
I. INTRODUCTION
Software vulnerabilities, once discovered, are often ﬁxed
by applying security patches. Such vulnerabilities are called
1-day vulnerabilities. However, due to security regulations
or policies, software companies tend to silently patch the
vulnerabilities they have found,
instead of making them
public and applying CVE numbers. This may make users
underestimate the importance of the patch, procrastinate its
application and help hackers get near 0-day vulnerabilities to
attack. Besides, security patches carry valuable information
about vulnerabilities, which could be used to summarize patch
patterns and their corresponding vulnerability patterns, and
¶corresponding author
978-1-7281-0057-9/19/$31.00 ©2019 IEEE
DOI 10.1109/DSN.2019.00066
605
help discover, understand and ﬁx (similar) vulnerabilities [1].
Therefore, identifying 1-day vulnerabilities from patches is
worthwhile for software security.
In some cases, the patches themselves may not be pub-
licly released either, so only the patched binary programs
are available. Given a vulnerable binary program P and its
(cid:2), a common process of patch-based 1-day
patched version P
vulnerabilities discovering often involves two major steps:
1) binary-level patch recognition: extracting different
functions, especially the different instruction snippets by com-
paring P and P
(cid:2) in binary level;
2) target-oriented input generation (abbr. ToIG): For
(cid:2)), trying to
each tuple of different instructions snippets (S, S
construct such an input that would trigger the vulnerability in
S (i.e. make P act abnormally or even crashed) but would
make P
(cid:2) succeed.
Since mature binary difﬁng techniques and tools [2, 3] are
already available, the main challenge lies in the ToIG step.
Existing works resolving the ToIG problem can be classiﬁed
into two main categories:
techniques based on symbolic/
concolic execution, such as APEG [4], and those based on
fuzzing. APEG automatically generated exploits for 5 Mi-
crosoft programs, but its requirement of suitable inputs was
too strong in practice. Besides, techniques based on symbolic
execution usually suffer from the path explosion problem and
have low efﬁciency. Fuzzing is an effective way to discover
vulnerabilities in programs. Traditional fuzzers [5, 6, 7] aim
to cover as many program states as possible within a limited
time budget. However, when applying to the ToIG problem,
fuzzers are required to be directed to reach certain targets.
Recent works of directed fuzzing, such as AFLGo [8] and
Hawkeye [9], utilize power scheduling and seed prioritization
to achieve the goal of reaching targets rapidly. However, these
techniques also inherit the deﬁciencies of fuzzing, especially
the difﬁculty of generating test seeds that could reach targets
guarded by complex checks [10, 11, 12].
Recent works, such as Driller [10], have combined the
strength of fuzzing and symbolic execution to make deeper
paths be exercised while mitigating the path explosion prob-
lem. However, these works still focus on achieving higher
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 10:57:01 UTC from IEEE Xplore.  Restrictions apply. 
code coverage, and therefore cannot be directly used to resolve
the ToIG problem. To achieve the goal of ToIG, i.e. reaching
(cid:2)
the patched code snippet in P and exposing crashes in P
effectively, the following issues should be carefully considered
when combing fuzzing and symbolic execution:
I1: a directed fuzzing mechanism to prioritize and schedule
input mutation in order to get closer to the targets rapidly.
I2: a directed symbolic execution mechanism to reach
deeper code guarded by complex checks on the execution
traces from program entry to the targets.
I3: an appropriate interaction mechanism to combine the
strength of fuzzing and symbolic execution while avoiding
their weaknesses.
In this paper, we propose our solution to resolve the
three issues and achieve patch-based 1-day vulnerabilities
discovering. In the binary-level patch recognition step, we
performed elaborate heuristic rules on the basis of mature
binary difﬁng tool BinDiff in order to identify target branches
in the patched programs (Section II). In the ToIG step, we
employ a similar but more aggressive distance-based directed
fuzzing mechanism as AFLGo. For each target, the mechanism
adopts a greedy mutation strategy that evaluates the distance
from each test input to the target branch, and prioritizes test
inputs which are closer to the target (Section III-A). When
no test input with shorter distance to the target has been
discovered during a speciﬁed time, all test inputs generated
by fuzzing are ordered by their distances to the target and
fed to the directed symbolic execution engine. The directed
symbolic execution engine adopts a dominator-based directed
mechanism which considers only the traces that could reach
the nearest dominator of the target (Section III-B). Once the
directed symbolic execution engine identiﬁes new inputs that
could reach the nearest dominator, they are passed back to the
directed fuzzing engine. The directed fuzzing engine and the
directed symbolic execution engine are then invoked in turn
until an input that could reach the target branch is discovered.
The input is fed to the unpatched program to further conﬁrm
if the patch is security-related.
We design and implement a tool, 1dVul, to demonstrate
this solution. For 130 out of the 209 targets identiﬁed from
applications in DARPA Cyber Grant Challenge, 1dVul has suc-
cessfully generated inputs that could reach the target branches
identiﬁed from the patched programs, while the aforemen-
tioned solutions AFLGo and Driller can only reach 99 and
107 targets, respectively, within the same limited time budget.
Moreover, 1dVul runs 2.2X and 3.6X faster than AFLGo and
Driller, respectively. Besides, 1dVul has conﬁrmed 96 vulner-
abilities from the unpatched programs, which demonstrate its
effectiveness of discovering 1-day vulnerabilities from binary
patches.
In summary, this paper makes the following contributions:
• We propose a new solution to improve the efﬁciency of
target-oriented input generation by leveraging a combina-
tion of a distance-based directed fuzzing mechanism and
a dominator-based directed symbolic execution mecha-
nism;
• We desgined and implemented a tool 1dVul for 1-day
vulnerability discovering at binary-level;
• We demostrate the effectiveness of 1dVul by comparing
it with Driller and AFLGo on the same dataset.
II. OVERVIEW
In this section, we ﬁrst show an example to illustrate
the difﬁculties in ToIG and review AFLGo and Driller with
respect to these difﬁculties. Based on the observations from
the example, we then present our patch-based vulnerability
discovering approach.
A. Motivating Example
e l s e {
i n t main ( ) {
l e n = r e a d _ l e n ( ) ;
char∗ f i l e H e a d e r = r e a d _ h e a d e r ( ) ;
i f
( s t r c m p ( f i l e H e a d e r , " JPG " ) )
p r o c e s s _ o t h e r _ f i l e ( ) ;
Listing 1 shows a code snippet with a null pointer deference
ﬁxed in line 24-25. The code snippet is extracted from an
image parsing program. The patch code ﬁxes the processing
logic for inputs in jpg format. Suppose we have no knowledge
of whether the patch code in Listing 1 ﬁxes a vulnerability or
not, the target of patch-based vulnerability discovery for this
example would be to see whether it is possible to ﬁnd such
an input that could reach line 24-25 while making the original
unpatched program crash.
1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
}
char∗ c o n f i g = r e a d _ c o n f i g ( ) ;
if (conﬁg == NULL)
( r e a d _ s i z e ( ) d a t a ) ;
( l e n > MIN_LEN)
copyLen = l e n ;
copyLen = r e a d _ n e x t _ l e n ( ) ;
!= MAGIC_NUMBER) {
i f
}
i f
i n t
i f
e l s e
}
}
return 3;
Listing 1. Example to illustrate strategies of our approach.
Existing works, such as AFLGo and Hawkeye, make efforts
to guide the fuzzing procedure to favor traces leading to
the patch code. However, in this example, the patch code is
guarded by sequential checks involved in line 3, 13 and 18,
respectively. Although existing works like AFLGo would pri-
oritize inputs that could reach the else-branch of the condition
(i.e. inputs in jpg format) at line 3, they may spend much
more energy on discovering such an input with elaborate magic
number that could go through the condition check at line 13.
More likely, they could get stuck by the condition. However,
606
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 10:57:01 UTC from IEEE Xplore.  Restrictions apply. 
such a condition check could be easily get through by symbolic
execution and constraint solving.
Driller, as previously mentioned, combines the strength
of fuzzing and symbolic execution to make deeper paths
be exercised while mitigating the path explosion problem.
However, since Driller is designed to be coverage oriented,
it treats each unexplored paths equally. Besides, its symbolic
execution engine will not be invoked until its fuzzing engine is
unable to identify inputs to search new paths. That means, even
if Driller’s fuzzing engine gets stuck by the condition check in
line 13, it will keep searching the unexplored paths in function
process_other_ﬁle(). When Driller ﬁnally gets the opportunity
to invoke its symbolic execution engine, it treats different
format test seeds generated by the fuzzing engine equally,
although the paths in process_other_ﬁle() have nothing to do
with the given target. When the symbolic execution engine
starts considering jpg format inputs that could reach line 13
but failed to go deeper, it may explore the unnecessary paths
in read_next_len() and those guarded by the if-branch at line
18 before considering paths that leads to the target.
As one can see, while target-oriented fuzzing may get stuck
at elaborate checks on paths leading to the target, Driller
spends quite a lot of energy exploring paths that make no
sense for ToIG. Based on the above observation, we present
our solution to improve the efﬁciency of ToIG which utilizes a
distance-based directed fuzzing mechanism and a dominator-
based directed symbolic execution mechanism, and a 1-day
vulnerability discovering system 1dVul based on the solution.
B. System Framework
The framework of 1dVul is shown in Fig. 1. The input
of the system is a pair of programs in binary. One of the
(cid:2)) and the other
programs involves patch code (denoted by P
is not (denoted by P ). The two programs are processed by
three following steps sequentially:
(cid:2)
Step 1: Target Branch Identiﬁcation. Given binary pro-
(cid:2), this step identiﬁes target branches based
grams P and P
on binary comparison and heuristic rules. The target branches
that directly change the
are patch-related branches in P
original data ﬂow or control ﬂow in P . To identify such
branches, 1dVul ﬁrst extracts different functions as well as
their different basic blocks (denoted by BBd) through binary-
level difﬁng. Then it applies different heuristic rules to fur-
ther extract control-ﬂow patch-related branches or data-ﬂow
patch-related branches. Speciﬁcally, control-ﬂow patches often
involve input checks and would jump out current function if
the input checks failed, so their related branches are usually
branches in BBd whose else-branches exit the current function.
Data-ﬂow patches, in the other hand, make no changes on
control conditions. However, the patches are always guarded
by some branch conditions and can only be executed when the
conditions are met. Hence, their related branches are branches
which are not in BBd but directly control all blocks in BBd.
Subsequent steps are applied to each target branch (denoted
by BRANCHd) found by this step.
Step 2: Target-oriented Input Generation. Given a target
(cid:2), this step tries to generate such
branch BRANCHd in P
an input that could reach BRANCHd by cycling between a
distance-based directed fuzzing engine and a dominator-based
directed symbolic execution engine. In the remaining part of
this paper, we refer to these two engines as directed fuzzing
engine and directed symbolic execution engine, for short. More
details about the directed mechanism of the two engines could
be found in Section III.
• Directed Fuzzing Engine. For the given target branch
BRANCHd, 1dVul ﬁrst invokes directed fuzzing engine
to generate new inputs whose distances from themselves
to the target are smaller than those from initial inputs to
the target. The distance from a test input to the target