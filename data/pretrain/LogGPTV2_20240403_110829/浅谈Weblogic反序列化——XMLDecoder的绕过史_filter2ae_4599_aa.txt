# 浅谈Weblogic反序列化——XMLDecoder的绕过史
##### 译文声明
本文是翻译文章
译文仅供参考，具体内容表达以及含义原文为准。
从CVE-2017-3506为起点至今，weblogic接二连三的吧爆出了大量的反序列化漏洞，而这些反序列化漏洞的很大一部分，都是围绕着XMLDecoder的补丁与补丁的绕过展开的，所以笔者以CVE-2017-3506为起点，到近期的CVE-2019-2725及其绕过来谈一谈这两年weblogic在XMLDecoder上的缝缝补补。
## 认识XMLDecoder
首先去看一下XMLDecoder的官方文档，如下：
XMLDecoder 类用于读取使用 XMLEncoder 创建的 XML 文档，用途类似于
ObjectInputStream。例如，用户可以使用以下代码片段来读取以 XML 文档形式（通过 XMLEncoder 类写入）定义的第一个对象：
    XMLDecoder d = new XMLDecoder(new BufferedInputStream(new FileInputStream("Test.xml")));
    Object result = d.readObject();
    d.close();
作为一名java反序列化的研究人员，看到readObject()函数就应该带有一丝兴奋，至少代表我们找到入口了。
先不去管在weblogic上的利用，我们先构造一个特殊的poc.xml文件，让XMLDecoder去解析一下，看一下流程
                    /bin/bash
                    -c
                    ls
再写一个简单的利用XMLDecoder解析xml文件的demo，
    import java.beans.XMLDecoder;
    import java.io.*;
    public class Main {
        public static void main(String[] args) throws IOException, InterruptedException {
            File file = new File("poc.xml");
            XMLDecoder xd = null;
            try {
                xd = new XMLDecoder(new BufferedInputStream(new FileInputStream(file)));
            } catch (Exception e) {
                e.printStackTrace();
            }
            Object s2 = xd.readObject();
            xd.close();
        }
    }
因为会触发命令执行，所以先直接在ProcessBuilder的start函数上打上断点，看一下调用栈，
我们关注的重点在于从xml到ProcessBuilder类被实例化的过程，所以去跟进一下DocumentHandler类，我们去看几个核心函数，
首先看到了构造函数，看一看到为不同的标签定义了不同的Handler，
再看一下startElement函数，它用来实例化对应的Element，并给当前handler设置Owner和Parent，关于Owner和Parent，直接引用@fnmsd写的内容：
parent
最外层标签的ElementHandler的parent为null，而后依次为上一级标签对应的ElementHandler。
owner
ElementHandler: 固定owner为所属DocumentHandler对象。
DocumentHandler: owner固定为所属XMLDecoder对象。
然后看一下endElement函数，
他会直接调用对应的ElementHandler的endElement函数，代码如下，
接下来一连串的Handler的getValueObject调用之后，到达了ObjectElementHandler的getValueObject函数，并在该函数内将我们标签内的值传给了Expression类，
在调用了getValue方法后，成功将ProcessBuilder类的实例返回，
接下来再返回给VoidElementHandler将start函数传过来，调用start函数，命令执行成功。
最后补上一张@ fnmsd给出的XMLDecoder解析xml的流程图以加深理解。
## CVE-2017-3506
上一节已经可以看到，XMLDecoder在解析xml的时候，通过构造特殊的xml文件是可以造成命令执行的，接下来我们就可以来看一下第一个weblogic由于XMLDEcoder导致的命令执行漏洞CVE-2017-3506。
先上POC，
                                /bin/bash
                                -c
                                 open /Applications/Calculator.app/
调用链我们只跟到XMLDecoder.readObject()，因为剩下的都是上一节的内容了，
在processRequest函数中，会对传入的payload进行分割，把真正的xml交给readHeaderOld函数处理，
readHeaderOld函数则是将真正的xml传给XMLDecoder，并在后续的一连串调用中将XMLDecoder实例化调用其readObject函数，于是便造成了命令执行。
## CVE-2017-10271
在CVE-2017-3506爆出后，我们去看一下官方的补丁，代码如下：
    private void validate(InputStream is) {
          WebLogicSAXParserFactory factory = new WebLogicSAXParserFactory();
          try {
             SAXParser parser = factory.newSAXParser();
             parser.parse(is, new DefaultHandler() {
                public void startElement(String uri, String localName, String qName, Attributes attributes) throws SAXException {
                   if(qName.equalsIgnoreCase("object")) {
                      throw new IllegalStateException("Invalid context type: object");
                   }
                }
             });
          } catch (ParserConfigurationException var5) {
             throw new IllegalStateException("Parser Exception", var5);
          } catch (SAXException var6) {
             throw new IllegalStateException("Parser Exception", var6);
          } catch (IOException var7) {
             throw new IllegalStateException("Parser Exception", var7);
          }
       }
补丁非常的简单，一旦标签是object，系统报错，于是立马出了第二版的poc，CVE-2017-10271：
                                /bin/bash
                                -c
                                 open /Applications/Calculator.app/
乍一看这个poc，简直和CVE-2017-3506一模一样，唯一得到区别就是
变成了
仅仅是类的标签类型由object变成了void，我们去看一下VoidElementHandler的源码：
可以看到VoidElementHandler是ObjectElementHandler类的子类，这也就解释了为什么把object标签换成Void标签也同样可以造成命令执行。
## CVE-2019-2725
时隔一年多，CVE-2019-2725爆出，这次的漏洞是要分两块来看的，
  1. 新爆出的存在反序列化的组件_async
  2. CVE-2017-10271的补丁被绕过
首先看第一点，在ProcessBuilder的start函数上打一个断点，先看一下async组件在处理xml时候的调用链（老规矩只追到XMLDecoder.readObject函数），
引用廖大神的分析思路，请求会经过webservice注册的21个Handler来处理，看一下HandlerIterator类，就能发现对应的21个Handler，
21个Handler里面AsyncResponseHandler应该是我们重点关注的那一个，跟进去看一下源码的handleRequest方法，
可以看到要想让程序往下走，必须保证var2有值，也就是RelatesTo有值，这也就是为什么payload里面有
xx
xx
这两行的原因。
关于WS-Addressing的使用，也可以去参考官方文档（），有助于深刻理解。
走过各种Handler后来到WorkAreaServerHandler，对xml进行了拆分，接下来的调用就和前面一样了（xml交给XMLDecoder，调用readObject方法），
分析完async组件后，就来到了另一个问题上，如何绕过CVE-2017-10271的补丁，老套路，我们先看一下补丁内容，
    private void validate(InputStream is) {
          WebLogicSAXParserFactory factory = new WebLogicSAXParserFactory();
          try {
             SAXParser parser = factory.newSAXParser();
             parser.parse(is, new DefaultHandler() {
                private int overallarraylength = 0;
                public void startElement(String uri, String localName, String qName, Attributes attributes) throws SAXException {
                   if(qName.equalsIgnoreCase("object")) {
                      throw new IllegalStateException("Invalid element qName:object");
                   } else if(qName.equalsIgnoreCase("new")) {
                      throw new IllegalStateException("Invalid element qName:new");
                   } else if(qName.equalsIgnoreCase("method")) {