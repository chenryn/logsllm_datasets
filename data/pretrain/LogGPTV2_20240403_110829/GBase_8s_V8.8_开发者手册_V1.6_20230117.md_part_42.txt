SQLFreeHandle(SQL_HANDLE_STMT,V_OD_hstmt);SQLDisconnect(V_OD_hdbc);
SQLFreeHandle(SQL_HANDLE_DBC,V_OD_hdbc);SQLFreeHandle(SQL_HANDLE_ENV,
V_OD_Env);return(0);
}
批量绑定示例代码
南大通用数据技术股份有限公司
268
GBase 8s V8.8开发者手册
/**********************************************************************
*请在数据源中打开UseBatchProtocol，同时指定数据库中参数support_batch_bind
*为on
*CHECK_ERROR的作用是检查并打印错误信息。
*此示例将与用户交互式获取DSN、模拟的数据量，忽略的数据量，并将最终数据入库到
test_odbc_batch_insert 中
***********************************************************************/
#include
#include#include#include#include
#include"util.c"
voidExec(SQLHDBChdbc,SQLCHAR*sql)
{
SQLRETURNretcode;//Returnstatus
SQLHSTMThstmt=SQL_NULL_HSTMT;//StatementhandleSQLCHAR loginfo[2048];
//AllocateStatementHandle
retcode=SQLAllocHandle(SQL_HANDLE_STMT,hdbc,&hstmt);CHECK_ERROR(retcode,
"SQLAllocHandle(SQL_HANDLE_STMT)",
hstmt,SQL_HANDLE_STMT);
//PrepareStatement
retcode=SQLPrepare(hstmt,(SQLCHAR*)sql,SQL_NTS);sprintf((char*)loginfo,
"SQLPreparelog:%s",(char*)sql);CHECK_ERROR(retcode,loginfo,hstmt,
SQL_HANDLE_STMT);
//ExecuteStatement
retcode=SQLExecute(hstmt);
sprintf((char*)loginfo,"SQLExecutestmtlog:%s",(char*)sql);CHECK_ERROR(retcode,
loginfo,hstmt,SQL_HANDLE_STMT);
//FreeHandle
retcode=SQLFreeHandle(SQL_HANDLE_STMT,hstmt);sprintf((char*)loginfo,
"SQLFreeHandlestmtlog:%s",(char*)sql);CHECK_ERROR(retcode,loginfo,hstmt,
SQL_HANDLE_STMT);
}
intmain()
{
SQLHENVhenv=SQL_NULL_HENV;SQLHDBChdbc=SQL_NULL_HDBC;
int batchCount=1000;SQLLENrowsCount=0;intignoreCount=0;
SQLRETURNretcode;SQLCHAR dsn[1024]={'\0'};
SQLCHAR loginfo[2048];
// 交互获取数据源名称
getStr("PleaseinputyourDSN",(char*)dsn,sizeof(dsn),'N');
// 交互获取批量绑定的数据量getInt("batchCount",&batchCount,'N',1);do
{
南大通用数据技术股份有限公司
269
GBase 8s V8.8开发者手册
// 交互获取批量绑定的数据中，不要入库的数据量
getInt("ignoreCount",&ignoreCount,'N',1);if(ignoreCount>batchCount)
{
printf("ignoreCount(%d)shouldbelessthanbatchCount(%d)\n",ignoreCount,batchCount);
}
}while(ignoreCount>batchCount);
retcode=SQLAllocHandle(SQL_HANDLE_ENV,SQL_NULL_HANDLE,&henv);
CHECK_ERROR(retcode,"SQLAllocHandle(SQL_HANDLE_ENV)",
henv,SQL_HANDLE_ENV);
//SetODBCVerion
retcode=SQLSetEnvAttr(henv,SQL_ATTR_ODBC_VERSION,
(SQLPOINTER*)SQL_OV_ODBC3,0);
CHECK_ERROR(retcode,"SQLSetEnvAttr(SQL_ATTR_ODBC_VERSION)",henv,
SQL_HANDLE_ENV);
//AllocateConnection
retcode=SQLAllocHandle(SQL_HANDLE_DBC,henv,&hdbc);CHECK_ERROR(retcode,
"SQLAllocHandle(SQL_HANDLE_DBC)",
henv,SQL_HANDLE_DBC);
//SetLoginTimeout
retcode=SQLSetConnectAttr(hdbc,SQL_LOGIN_TIMEOUT,(SQLPOINTER)5,0);
CHECK_ERROR(retcode,"SQLSetConnectAttr(SQL_LOGIN_TIMEOUT)",
hdbc,SQL_HANDLE_DBC);
//SetAutoCommit
retcode=SQLSetConnectAttr(hdbc,SQL_ATTR_AUTOCOMMIT,
(SQLPOINTER)(1),0);
CHECK_ERROR(retcode,"SQLSetConnectAttr(SQL_ATTR_AUTOCOMMIT)",hdbc,
SQL_HANDLE_DBC);
//ConnecttoDSN
sprintf(loginfo,"SQLConnect(DSN:%s)",dsn);
retcode=SQLConnect(hdbc,(SQLCHAR*)dsn,SQL_NTS,
(SQLCHAR*)NULL,0,NULL,0);
CHECK_ERROR(retcode,loginfo,hdbc,SQL_HANDLE_DBC);
//inittableinfo.
Exec(hdbc,"droptableifexiststest_odbc_batch_insert");
Exec(hdbc,"createtabletest_odbc_batch_insert(idintprimarykey,colvarchar2(50))");
// 下面的代码根据用户输入的数据量，构造出将要入库的数据:
{
SQLRETURNretcode;
SQLHSTMThstmtinesrt=SQL_NULL_HSTMT;int i;
SQLCHAR *sql=NULL;SQLINTEGER*ids=NULL;SQLCHAR *cols=NULL;
南大通用数据技术股份有限公司
270
GBase 8s V8.8开发者手册
SQLLEN *bufLenIds=NULL;SQLLEN *bufLenCols=NULL;SQLUSMALLINT
*operptr=NULL;SQLUSMALLINT*statusptr=NULL;SQLULEN process=0;
// 这里是按列构造，每个字段的内存连续存放在一起。
ids=(SQLINTEGER*)malloc(sizeof(ids[0])*batchCount);cols=
(SQLCHAR*)malloc(sizeof(cols[0])*batchCount*50);
// 这里是每个字段中，每一行数据的内存长度。
bufLenIds=(SQLLEN*)malloc(sizeof(bufLenIds[0])*batchCount);bufLenCols=
(SQLLEN*)malloc(sizeof(bufLenCols[0])*batchCount);
// 该行是否需要被处理，SQL_PARAM_IGNORE 或 SQL_PARAM_PROCEEDoperptr=
(SQLUSMALLINT*)malloc(sizeof(operptr[0])*batchCount);memset(operptr,0,
sizeof(operptr[0])*batchCount);
// 该行的处理结果。
// 注：由于数据库中处理方式是同一语句隶属同一事务中，所以如果出错，那么待处理数
据都将是出错的， 并不会部分入库。
statusptr=(SQLUSMALLINT*)malloc(sizeof(statusptr[0])*batchCount);memset(statusptr,
88,sizeof(statusptr[0])*batchCount);
if(NULL==ids||NULL==cols||NULL==bufLenCols||NULL==bufLenIds)
{
fprintf(stderr,"FAILED:\tmallocdatamemoryfailed\n");gotoexit;
}
for(inti=0;i<batchCount;i++)
{
ids[i]=i;
sprintf(cols+50*i,"columntestvalue%d",i);bufLenIds[i]=sizeof(ids[i]);
bufLenCols[i]=strlen(cols+50*i);
operptr[i]=(i<ignoreCount)?SQL_PARAM_IGNORE:SQL_PARAM_PROCEED;
}
//AllocateStatementHandle
retcode=SQLAllocHandle(SQL_HANDLE_STMT,hdbc,&hstmtinesrt);
CHECK_ERROR(retcode,"SQLAllocHandle(SQL_HANDLE_STMT)",
hstmtinesrt,SQL_HANDLE_STMT);
//PrepareStatement
sql=(SQLCHAR*)"insertintotest_odbc_batch_insertvalues(?,?)";retcode=
SQLPrepare(hstmtinesrt,(SQLCHAR*)sql,SQL_NTS);sprintf((char*)loginfo,"SQLPrepare
log:%s",(char*)sql);CHECK_ERROR(retcode,loginfo,hstmtinesrt,SQL_HANDLE_STMT);
retcode=SQLSetStmtAttr(hstmtinesrt,SQL_ATTR_PARAMSET_SIZE,
(SQLPOINTER)batchCount,sizeof(batchCount));
CHECK_ERROR(retcode,"SQLSetStmtAttr",hstmtinesrt,SQL_HANDLE_STMT);
retcode=SQLBindParameter(hstmtinesrt,1,SQL_PARAM_INPUT,SQL_C_SLONG,
SQL_INTEGER,sizeof(ids[0]),0,&(ids[0]),0,bufLenIds);
CHECK_ERROR(retcode,"SQLBindParameterforid",hstmtinesrt,SQL_HANDLE_STMT);
南大通用数据技术股份有限公司
271
GBase 8s V8.8开发者手册
retcode=SQLBindParameter(hstmtinesrt,2,SQL_PARAM_INPUT,SQL_C_CHAR,
SQL_CHAR,50,50,
cols,50,bufLenCols);
CHECK_ERROR(retcode,"SQLBindParameterforcols",hstmtinesrt,
SQL_HANDLE_STMT);
retcode=SQLSetStmtAttr(hstmtinesrt,SQL_ATTR_PARAMS_PROCESSED_PTR,
(SQLPOINTER)&process,sizeof(process));
CHECK_ERROR(retcode,"SQLSetStmtAttrforSQL_ATTR_PARAMS_PROCESSED_PTR",
hstmtinesrt,SQL_HANDLE_STMT);
retcode=SQLSetStmtAttr(hstmtinesrt,SQL_ATTR_PARAM_STATUS_PTR,
(SQLPOINTER)statusptr,sizeof(statusptr[0])*batchCount);
CHECK_ERROR(retcode,"SQLSetStmtAttrforSQL_ATTR_PARAM_STATUS_PTR",
hstmtinesrt,SQL_HANDLE_STMT);
retcode=SQLSetStmtAttr(hstmtinesrt,SQL_ATTR_PARAM_OPERATION_PTR,
(SQLPOINTER)operptr,sizeof(operptr[0])*batchCount);
CHECK_ERROR(retcode,"SQLSetStmtAttrforSQL_ATTR_PARAM_OPERATION_PTR",
hstmtinesrt,SQL_HANDLE_STMT);
retcode=SQLExecute(hstmtinesrt);
sprintf((char*)loginfo,"SQLExecutestmtlog:%s",(char*)sql);CHECK_ERROR(retcode,
loginfo,hstmtinesrt,SQL_HANDLE_STMT);
retcode=SQLRowCount(hstmtinesrt,&rowsCount);
CHECK_ERROR(retcode,"SQLRowCountexecution",hstmtinesrt,SQL_HANDLE_STMT);
if(rowsCount!=(batchCount-ignoreCount))
{
sprintf(loginfo,"(batchCount-ignoreCount)(%d)!=rowsCount(%d)",(batchCount-
ignoreCount),rowsCount);
CHECK_ERROR(SQL_ERROR,loginfo,NULL,SQL_HANDLE_STMT);
}
else
{
sprintf(loginfo,"(batchCount-ignoreCount)(%d)==rowsCount(%d)",(batchCount-
ignoreCount),rowsCount);
CHECK_ERROR(SQL_SUCCESS,loginfo,NULL,SQL_HANDLE_STMT);
}
//checkrownumberreturnedif(rowsCount!=process)
{
sprintf(loginfo,"process(%d)!=rowsCount(%d)",process,rowsCount);
CHECK_ERROR(SQL_ERROR,loginfo,NULL,SQL_HANDLE_STMT);
}
else
{
南大通用数据技术股份有限公司
272
GBase 8s V8.8开发者手册
sprintf(loginfo,"process(%d)==rowsCount(%d)",process,rowsCount);
CHECK_ERROR(SQL_SUCCESS,loginfo,NULL,SQL_HANDLE_STMT);
}
for(inti=0;i<batchCount;i++)
{
if(i<ignoreCount)
{
if(statusptr[i]!=SQL_PARAM_UNUSED)
{
sprintf(loginfo,"statusptr[%d](%d)!=SQL_PARAM_UNUSED",i,statusptr[i]);
CHECK_ERROR(SQL_ERROR,loginfo,NULL,SQL_HANDLE_STMT);
}
}
elseif(statusptr[i]!=SQL_PARAM_SUCCESS)
{
sprintf(loginfo,"statusptr[%d](%d)!=SQL_PARAM_SUCCESS",i,statusptr[i]);
CHECK_ERROR(SQL_ERROR,loginfo,NULL,SQL_HANDLE_STMT);
}
}
retcode=SQLFreeHandle(SQL_HANDLE_STMT,hstmtinesrt);sprintf((char*)loginfo,
"SQLFreeHandlehstmtinesrt");CHECK_ERROR(retcode,loginfo,hstmtinesrt,
SQL_HANDLE_STMT);
}
exit:
printf("\nComplete.\n");
//Connection
if(hdbc!=SQL_NULL_HDBC){SQLDisconnect(hdbc);
SQLFreeHandle(SQL_HANDLE_DBC,hdbc);
}
//Environment
if(henv!=SQL_NULL_HENV)SQLFreeHandle(SQL_HANDLE_ENV,henv);
return0;
}
8.3 libpq
8.3.1 数据库连接控制函数
数据库连接控制函数控制与数据库服务器链接的事情。一个应用程序一次可以与多个服
务器建立链接，如一个客户端链接多个数据库的场景。每个链接都是用一个从函数
南大通用数据技术股份有限公司
273
GBase 8s V8.8开发者手册
PQconnectdb、PQconnectdbParams或PQsetdbLogin获得的PGconn对象表示。注意，这些函
数总是返回一个非空的对象指针，除非内存分配失败，会返回一个空的指针。链接建立的接
口保存在PGconn对象中，可以调用PQstatus函数来检查一下返回值看看连接是否成功。
8.3.1.1 PQconnectdbParams
功能描述
与数据库服务器建立一个新的连接。
原型
PGconn*PQconnectdbParams(constchar*const*keywords,
constchar*const*values,
intexpand_dbname);
参数
表 8-33PQconnectdbParams 参数
关键字 参数说明
keywords 定义为一个字符串的数组，每个都成为一个关键字。
values 给每个关键字一个值。
expand_dbname 当expand_dbname是非零的时，允许将dbname的关键字值看做
一个连接字符串。只有第一个出现的dbname是这样展开的， 任
何随后的dbname值作为纯数据库名处理。
返回值
PGconn*：指向包含链接的对象指针，内存在函数内部申请。
注意事项
这个函数用从两个 NULL 结束的数组中来的参数，打开一个新的数据库连接。与
PQsetdbLogin不同的是，不必更换函数名就可扩展参数集。因此，建议应用程序中使用这个
函数或类似变种函数PQconnectStartParams和PQconnectPoll。
示例
参见6.4.3 示例。
8.3.1.2 PQconnectdb
功能描述
南大通用数据技术股份有限公司
274
GBase 8s V8.8开发者手册
与数据库服务器建立一个新的连接。
原型
PGconn*PQconnectdb(constchar*conninfo);
参数
表 8-34PQconnectdb参数
关键字 参数说明
conninfo 链接字符串，字符串中的字段见6.4.5 链接参数章节。
返回值
PGconn*：指向包含链接的对象指针，内存在函数内部申请。
注意事项
 这个函数用从一个字符串conninfo来的参数与数据库打开一个新的链接。
 传入的参数可以为空，表明使用所有缺省的参数，或者可以包含一个或更多个用空白间
隔的参数设置，或者它可以包含一个URL。
示例
参见6.4.3 示例。
8.3.1.3 PQconninfoParse
功能描述
根据连接，返回已解析的连接选项。