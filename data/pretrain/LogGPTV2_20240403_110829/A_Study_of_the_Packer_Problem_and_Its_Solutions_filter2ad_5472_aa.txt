title:A Study of the Packer Problem and Its Solutions
author:Fanglu Guo and
Peter Ferrie and
Tzi-cker Chiueh
A Study of the Packer Problem and Its Solutions
Fanglu Guo, Peter Ferrie, and Tzi-cker Chiueh
Symantec Research Laboratories
Abstract. An increasing percentage of malware programs distributed
in the wild are packed by packers, which are programs that transform
an input binary’s appearance without aﬀecting its execution semantics,
to create new malware variants that can evade signature-based malware
detection tools. This paper reports the results of a comprehensive study
of the extent of the packer problem based on data collected at Syman-
tec and the eﬀectiveness of existing solutions to this problem. Then the
paper presents a generic unpacking solution called Justin (Just-In-Time
AV scanning), which is designed to detect the end of unpacking of a
packed binary’s run and invoke AV scanning against the process image
at that time. For accurate end-to-unpacking detection, Justin incorpo-
rates the following heuristics: Dirty Page Execution, Unpacker Memory
Avoidance, Stack Pointer Check and Command-Line Argument Access.
Empirical testing shows that when compared with SymPack, which con-
tains a set of manually created unpackers for a collection of selective
packers, Justin’s eﬀectiveness is comparable to SymPack for those bina-
ries packed by these supported packers, and is much better than SymPack
for binaries packed by those that SymPack does not support.
1 The Packer Problem
1.1 Overview
Instead of directly obfuscating malware code, malware authors today heavily rely
on packers, which are programs that transform an executable binary into another
form so that it is smaller and/or has a diﬀerent appearance than the original,
to evade detection of signature-based anti-virus (AV) scanners. In many cases,
malware authors recursively apply diﬀerent combinations of multiple packers to
the same malware to quickly generate a large number of diﬀerent-looking binaries
for distribution in the wild. The fact that more and more malware binaries are
packed seriously degrades the eﬀectiveness of signature-based AV scanners; it
also results in an exponential increase in AV signature size, because when an AV
vendor cannot eﬀectively unpack a packed threat, it has no choice but to create
a separate signature for the threat.
The percentage of malicious programs (malware) and benign applications
(goodware) that are packed is hard to measure accurately. The numbers re-
ported vary from vendor to vendor, but it is generally accepted that over 80%
of malware is packed. These malware samples are often “wrapped” rather than
R. Lippmann, E. Kirda, and A. Trachtenberg (Eds.): RAID 2008, LNCS 5230, pp. 98–115, 2008.
c(cid:2) Springer-Verlag Berlin Heidelberg 2008
A Study of the Packer Problem and Its Solutions
99
packed, because many packers alter the original form of input binaries in ways
that don’t necessarily involve compression.
Not all packed programs are malware. We took a random sample of tens of
thousands of executable ﬁles that were collected over a period of several months
and were packed by packers that Symantec recognizes and knows how to unpack,
and ran a set of commercial anti-virus (AV) scanners from multiple vendors
against them. About 65% of these executable ﬁles are known malware. The
remaining 35% most likely falls into the goodware category because these samples
were collected more than a year ago and today’s AV scanners should be able to
capture most malware programs during that period of time. Clearly, the use of
packers to protect goodware is quite common too.
The number of known packers is also hard to measure accurately. Symantec
has collected a large number of packers - more than 2000 variants in more than
200 families. Among them, Symantec currently can identify nearly 1200 packers
spread among approximately 150 families. However, among the 150 packer fami-
lies Symantec knows about, it can only unpack about 110 of them, which contain
approximately 800 members. This means that Symantec has a backlog of approx-
imately 1200 members in 90 families, and this number increases day by day.
Without doubt, UPX [1] remains the most widely used packer. The rest of the
list depends on how ﬁles are collected, but it always includes the old favorites like
ASPack [2], FSG [3], and UPack [4]. In addition to those known packers, analysis of
the above randomly sampled ﬁle set revealed at least 30 previously unknown pack-
ers. Some were minor variations of known packers, but most were custom packers.
Amazingly, some of the clean ﬁles were packed with these custom packers.
The traditional way an AV vendor such as Symantec handles packers involves
the following steps:
1. Recognize a packer’s family. This is not as simple as it sounds. There are
plenty of packers whose code is constant, and these can be recognized using
simple strings. But many packers use polymorphic code to alter their ap-
pearance, and some packers intentionally use fake strings from other packers
or standard compiler code, in order to fool the recognizers.
2. Identify a packer’s version. A packer is classiﬁed into an existing version or
is assigned to a new version. Being able to identify a packer is essential
for successful unpacking, because there can be enough variations among
members of the same family such that an unpacker for one member of a
family cannot be used for another member for the same family.
3. Create a recognizer. The previous two steps are usually handled by a human,
or applications such as neural net programs that have been trained on packers
that are assigned to known families. This step, in contrast, is the act of
writing a program whose function is solely to recognize that family, and
perhaps that particular member/version.
4. Create an unpacker. Unlike the recognizer, whose goal is just to recognize
the packer, the unpacker actually performs the reverse actions of the cor-
responding packer, and restores a packed binary as much as possible to its
original form, including its metadata such as PE header for Win32 binaries.
100
F. Guo, P. Ferrie, and T.-c. Chiueh
Hello.exe
PE Header
Code Section
Data Section
Loading
Code Section
Data Section
Hello_upx.exe
PE Header
Empty
Packed Data
Unpacker Code
UPX0
UPX1
rsrc
Fig. 1. A diagram that shows how an example program Hello.exe is packed by packer
UPX and the layout of the resulting packed binary Hello upx.exe
It requires a non-trivial amount of eﬀorts to develop packer recognizers and
unpackers. As noted above, Symantec has a backlog of approximately 1200 mem-
bers in 90 families. To add unpacking support for a typical packer takes about
six hours, on average. This means that it would take ﬁve full-time engineers
about six months to clear the backlog if two unpackers are developed per day.
However, in the case of complex packers such as Themida [5], it alone may take
an experienced engineer up to six months to develop its unpacker. Packers with
this level of complexity are not rare.
Due to these obvious disadvantages, the Justin (Just-In-Time AV scanning)
solution presented in this paper takes a totally diﬀerent approach. Justin lever-
ages generic behaviors of unpacking and unpacks arbitrary packers without the
need of knowing any information that is speciﬁc to the particular packer. Thus
Justin doesn’t have to go through any steps of the above traditional approach.
1.2 How Packers Work
Let’s start with UPX, which arguably is among the most straightforward packers
in use today. Figure 1 shows how UPX packs an example program Hello.exe.
When UPX compresses a PE binary, it begins by merging all of its sections
into a single section, with the exception of the resource section. The combined
data is then compressed into a single section of the resulting packed binary. In
Figure 1, the code section and data section of hello.exe is compressed and stored
in the Packed Data area of section UPX1 of the resulting binary Hello upx.exe.
The resulting binary Hello upx.exe contains three sections. The ﬁrst section
UPX0 is entirely virtual - it contains no physical data and is simply a placeholder.
A Study of the Packer Problem and Its Solutions
101
It reserves the address range when Hello.exe is loaded to memory. At run time,
Hello.exe will be restored to section UPX0. The second section contains the
Packed Data, followed immediately by the Unpacker Code. The entry point in
the PE header of Hello upx.exe is changed to point directly to the Unpacker
Code. The third section contains the resource data, if the original binary had
a resource section, and a partial import table, which contains some essential
imports from kernel32.dll as well as one imported function from every DLL
used by the original binary.
The ﬁrst two sections are set to read/write/execute, regardless of what they
were before, and are not changed at run time. Therefore UPX is NX compatible,
but it loosens up the protection for the original binary’s read-only sections. The
third section is simply set to read/write, since no execution should happen within
that section.
After unpacking, UPX write-enables the header of the resulting binary, then
changes the ﬁrst two sections of the section table to read-only, and write-protects
the header again. This ensures compatibility with some application programs
that check in-memory section table instead of the actual section attributes, be-
cause these sections are supposed to be non-writable.
More sophisticated packers use a variety of techniques that virus writers use to
defeat attempts to reverse-engineer, bypass, and disable the unpackers included
in packed binaries. We discuss some of them in the following.
Multi-layer packing uses a combination of potentially diﬀerent packers to pack
a given binary, and makes it really easy to generate a large number of packed bi-
naries from the same input binary. In practice, packed binaries produced by some
packers may not be packed again by other packers. Also, the use of multi-layer
packing itself could be used as an indication of malware, so the very presence of
multiple layers - supported or not - could allow for a heuristic detection.
Anti-unpacking techniques are designed to make it diﬃcult to uncover the logic
of an unpacker, and fall into two major categories: passive and active. Passive
anti-unpacking techniques are intended to make disassembly diﬃcult, which in
turns makes it diﬃcult to identify and reverse the unpacking algorithm. Active
techniques are intended to protect the running binary against having the fully
unpacked image intercepted and extracted, and can be further classiﬁed into
three subcategories: anti-dumping, anti-debugging, and anti-emulating. There are
several commercial packers, such as Enigma and Themida, which promote their
use of all of these techniques.
The simplest way to capture an unpacked image is to dump the address space
of a running process. The simplest form of anti-dumping involves changing the
value of the image size in the process environment block, and makes it diﬃcult
for a debugger to attach to the process or to dump the correct number of pages.
More advanced anti-dumping methods include page-level protections, where each
page is packed individually and unpacked only when accessed. It can even be
packed again afterwards. This technique is used by packers such as Armadillo [6].
Shrinker [7] uses a variation of this method, by unpacking regions when they are
102
F. Guo, P. Ferrie, and T.-c. Chiueh
accessed, but it is perhaps for performance reasons rather than an anti-dumping
mechanism, since the unpacked pages remain in memory.
A very common way to capture an unpacked image is to use a debugger
to step through the code, or to set breakpoints at particular locations. Two
common forms of anti-debugging involve checking some values that the oper-
ating system supplies in the presence of a debugger. The ﬁrst uses a public
API, called IsDebuggerPresent(), which returns a Boolean value that corre-
sponds to the presence or absence of a debugger. This technique is defeated
by always setting the value to FALSE. The second anti-debugging technique
checks if certain bits are set within the NtGlobalFlag ﬁeld. The values of in-
terest are heap tail checking (0x10), heap free checking (0x20), and heap para-
meter checking (0x40). They get their values from the GlobalFlag ﬁeld of the
HKLM/System/CurrentControlSet/Control/Session Manager registry key. A
debugged process always has these values set in memory, regardless of the values
in the registry. This technique can be defeated by clearing the bits in the process
environment block.
Another way to capture an unpacked image to use an emulator to execute it
in a protected environment. There are many ways to attack an emulator. The
most common is to attempt to detect the emulator, since it is very hard to
make an emulator whose behavior matches closely to real machine. However,
each emulator has diﬀerent capabilities, so there are multiple methods to detect
diﬀerent emulators [8].
Not all protection methods restore the host to its original form when executed.
In particular, wrappers such as VMProtect [9] replace the host code with byte-
code, and attach an interpreter to execute that byte-code. The result is that
the original host code no longer exists anywhere, making it hard to analyze
and essentially impossible to reverse. In addition, the byte-code have diﬀerent
meanings in diﬀerent ﬁles. That is, the value 0x01 might mean “add” in one
VMProtect-packed binary, but “xor” in another, and only the corresponding
embedded interpreter knows for sure.
2 Unpacking Solutions from the Anti-Virus Industry
The AV industry has developed several approaches to tackle the packer problem,
which satisfy diﬀerent combinations of the following requirements:
– Eﬀective: An ideal unpacker should restore packed binaries to their original
– Generic: An ideal unpacker should cover as many diﬀerent types of packed
– Safe: Execution of an ideal unpacker should not leave any undesirable side
form.
eﬀects.
binaries as possible.
– Portability: An ideal unpacker should be able to run on multiple operating
systems.
The ﬁrst requirement enables existing signature-based AV scanners to be di-
rectly applied to an unpacker’s output and detect the embedded malware if
A Study of the Packer Problem and Its Solutions
103
applicable. The second requirement decreases the amount of eﬀorts required
to keep up with new packers. The third requirement is crucial for at-rest ﬁle
scanning, where the AV scanner initiates the unpacker and therefore has to be
absolutely sure that the unpacker itself does not cause any harm. The ﬁnal re-
quirement is relevant for in-network scanning, where the unpacker and the AV
scanner may need to run on diﬀerent platforms than that required by the packed
binaries.
The ﬁrst solution to the packer problem is to the traditional way which man-
ually creates recognizers and unpackers by reverse-engineering the unpackers
in packed binaries by following steps as outlined in Section 1.1. The Sym-