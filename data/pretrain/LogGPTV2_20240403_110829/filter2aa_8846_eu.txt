### 控制规范开发
**控制规范开发 (Control Specifications Development)**：研究并提出实现所有安全功能的系统开发方法规范。

### 设计评审
**设计评审 (Design Review)**：在完成功能规格和控制规格后，进入代码开发阶段。设计团队完成后，需召开评审会议以确保开发方向正确无误。

### 代码走查
**代码走查 (Code Review Walk-Through)**：在编码设计的不同阶段安排多次代码走查会议。这些技术会议仅限开发人员参与，旨在审查特定代码段，寻找逻辑错误或其他设计或安全缺陷。

### 用户验收测试
**用户验收测试 (User Acceptance Testing, UAT)**：类似于交房、验房、收房的过程，确保系统满足用户需求。

### 维护和变更管理
**维护和变更管理 (Maintenance and Change Management)**：系统部署使用后，进行定期维护与变更管理，确保系统的持续稳定运行。

### 系统开发生命周期 (SDLC) 流程
根据 CBK (Common Body of Knowledge)，一般包括以下七个基本阶段和两个附加阶段：
1. **项目启动与规划 (Initiation)**
   - 系统建设和安全建设需同步规划、同步实施。
2. **功能需求定义 (Functional Requirement Definition)**
3. **系统设计规范/规格说明 (System Design Specification)**
4. **开发与实施 (Development and Implementation)**
5. **文档管理与版本控制 (Documentation and Common Program Controls)**
6. **测试和评估控制 (Testing and Evaluation Controls)**
   - 包括认证与认可 (Certification and Accreditation) 或验证与确认 (Verification and Validation)。
   - 不得使用生产数据，以防泄密。
7. **交付使用 (Transition to Production)**
   - 开发、测试和生产环境需互相物理隔离。

#### 附加阶段
8. **运行与维护支持 (Operation and Maintenance)**
9. **修订和系统升级 (Revisions and System Replacement)**

### 软件需求模型
软件需求可以用三种模型表示：
1. **信息模型**：规定要处理的信息类型和处理方式。
2. **功能模型**：概述应用程序需要执行的任务和功能。
3. **行为模型**：解释在具体事务处理过程中及之后应用程序的状态。

### 软件开发生命周期 (SDLC) 模型
**SDLC** 用于规范软件开发实践。许多模型是交叉的，掌握各种模型的优缺点更为重要。

#### 1. 瀑布模型 (Waterfall Model)
- 严格按照标准流程一步一步进行，不能改变顺序。
- 上一步骤全部完成才能进入下一步骤。
- 如果一个步骤出现问题，需返回上一步骤进行纠正（反馈回路特性）。

#### 2. 螺旋模型 (Spiral Model)
- 多次迭代的瀑布式过程，也称为元模型。
- 每个阶段内运用戴明环模型 (PDCA: 计划-执行-检查-行动)。
- 强调风险评估，并基于风险评估调整成本和计划，决定项目是否继续。
- 每个阶段内的流程包括：制定计划、风险分析、开发和测试、客户评估。

#### 3. 净室模型 (Cleanroom Model)
- 类似于瀑布模型，目标是初写的代码必须完善无错。
- 前期充分考虑安全防护比后期附加保护效果更好。

#### 4. V 型模型
- 在瀑布模型基础上改进，先从上到下细化设计，再从下到上单元集成。
- 每个阶段必须通过测试才能进入下一个阶段。

#### 5. 迭代开发/增量模型
- 允许不断改进和完善，需要变更控制机制。
- **原型**：构建简单的初始软件版本。
  - **快速原型/敏捷开发 (RAD)**：每个阶段有严格的时间限制，适用于演示。
  - **改进的原型模型/演化原型 (MPM)**：渐进式改进，最终成为产品。
  - **运行原型**：在实际环境中部署的原型，微调后可用于生产环境。
- **联合分析开发 (JAD)**：联合用户与开发人员协同工作，提高功能满足度。
- **探索模型**：综合考虑所有可能的需求，但缺乏结构化，安全需求可能被忽视。
- **敏捷软件开发 (Agile Software Development)**：以人为核心、迭代、循序渐进的方法。
  - 四大特点：实践检验、简单高效、绑定需求、当面沟通。
- **增量模型**：多个瀑布周期出现在同一个软件上，每个增量阶段都产生可交付、可运行的产品。

### 其他方法和模型
- **计算机辅助软件工程 (CASE)**：使用工具软件进行系统分析、设计、开发、实施和维护。
- **基于组件的开发**：将功能拆分为组件进行编码并封装，节约成本、加快进度。
- **重用模型**：基于现有组件构建应用，适合面向对象开发项目。
- **极限编程 (XP)**：基于沟通和反馈的简单化开发方法，依赖子系统的功能限定、范围定义和结对编程。

### 成熟度模型
#### 1. 软件能力成熟度模型 (SW-CMM)
- 由卡内基梅隆大学 SEI 提出，帮助软件组织提高其软件过程的成熟度和质量。
- 目前已被 CMMI (Capability Maturity Model Integration) 取代。
- SW-CMM 的成熟度级别：
  - **初始级 (Initial)**
  - **可重复级 (Repeatable)**
  - **已定义级 (Defined)**
  - **已管理级 (Managed)**
  - **优化级 (Optimizing)**

#### 2. IDEAL 模型
- 由软件工程研究中心开发，用于变更管理。
- 五个阶段：启动 (Initiating)、诊断 (Diagnosing)、建立 (Establishing)、行动 (Acting)、学习 (Learning)。

### 甘特图 (Gantt Charts)
- 以条状图表示特定项目和计划之间的时间关系，有助于项目计划、协调和跟踪。

### 计划评审技术 (PERT)
- 用于项目调度和风险评估，估算最短、最长和最有可能的持续时间。
- 改善项目管理和软件编码，提高效率。

### 操作与维护
- 系统部署后，监控性能并保证操作连续性。
- 安全性管控包括测试备份与恢复机制、确保数据处理正确无误、确保安全功能有效。

### 变更管理
#### 1. 工具软件
- **Tripwire**：监测数据完整性，辅助监控系统变化。

#### 2. 变更管理流程的基本组件
- **请求控制 (Request Control)**
- **变更控制 (Change Control)**
- **发布控制 (Release Control)**

#### 3. 关键点
- 严格规范的过程管理。
- 按规定进行请示报批、测试和记录。
- 应急恢复措施以防变更失败。

#### 4. 变更流程
- **请求变更 (Request)**
- **影响分析 (Impact Assessment)**
- **审查变更 (Review)**
- **批准/不批准 (Approve/Reject)**
- **构建和测试 (Build and Test)**
- **通知 (Notification)**