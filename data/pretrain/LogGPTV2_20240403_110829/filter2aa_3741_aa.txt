# Agent Man
Category: Mobile, 200 Points
## Description
> 
> --- TRANSMISSION START---
> 
> Special Agent;
> ...
> Exciting news!
> 
> The wire is bustling with chatter about 'little green men' and how they were able to make their presence felt across the globe.
> 
> Your mission is to locate the group and find a way to uncover their secrets. 
> 
> Attached is a sample gathered by our brave field-agents, best of luck;
> 
> --- TRANSMISSION END ---
An apk was attached.
## Solution
Let's extract the APK:
```console
root@kali:/media/sf_CTFs/matrix/Agent_Man# ~/utils/jadx/build/jadx/bin/jadx -d output agentman.apk
INFO  - loading ...
INFO  - processing ...
ERROR - finished with errors, count: 1
```
We get lots of files, but the interesting ones are here:
```console
root@kali:/media/sf_CTFs/matrix/Agent_Man/output/sources/com/jagent# tree
.
└── javaagent
    ├── BuildConfig.java
    ├── DownloadFile.java
    ├── MainActivity.java
    └── R.java
1 directory, 4 files
```
`MainActivity.java` contains:
```java
package com.jagent.javaagent;
import android.os.Bundle;
import android.widget.TextView;
import androidx.appcompat.app.AppCompatActivity;
public class MainActivity extends AppCompatActivity {
    public native String agentMan(String str);
    static {
        System.loadLibrary("agent");
    }
    /* access modifiers changed from: protected */
    @Override // androidx.appcompat.app.AppCompatActivity, androidx.fragment.app.FragmentActivity, androidx.activity.ComponentActivity, androidx.core.app.ComponentActivity, android.app.Activity
    public void onCreate(Bundle bundle) {
        super.onCreate(bundle);
        setContentView(R.layout.activity_main);
        TextView textView = (TextView) findViewById(R.id.mainText);
        String str = new DownloadFile().get("https://ctfroom.matrixcyberlabs.com/agent");
        if (str.isEmpty()) {
            textView.setText(agentMan(null));
        } else {
            textView.setText(agentMan(str));
        }
    }
}
```
The main function downloads a file from a remote server, then calls `agentMan` and sets the text on the screen based on the return value of this function.
`DownloadFile.java` is simply:
```java
package com.jagent.javaagent;
public class DownloadFile {
    /* access modifiers changed from: package-private */
    public String get(String str) {
        return "NULL";
    }
}
```
So given this implementation, we can see that `DownloadFile` will return the string `"NULL"` which will get assigned to `str`. Therefore, `agentMan("NULL")` will be called and its return value will be displayed on the screen. What will it display? We can run the application in an emulator and see:
![](images/agent_man1.png)
Well, it just prints "Nope". But where is the implementation? We can see that `agentMan` is declared as `native`:
```java
public native String agentMan(String str);
```
This means that we can find it under one of the native libraries of the application:
```console
root@kali:/media/sf_CTFs/matrix/Agent_Man/output# grep -r agentMan
Binary file resources/classes.dex matches
Binary file resources/lib/arm64-v8a/libagent.so matches
Binary file resources/lib/armeabi-v7a/libagent.so matches
Binary file resources/lib/x86/libagent.so matches
Binary file resources/lib/x86_64/libagent.so matches
sources/com/jagent/javaagent/MainActivity.java:    public native String agentMan(String str);
sources/com/jagent/javaagent/MainActivity.java:            textView.setText(agentMan(null));
sources/com/jagent/javaagent/MainActivity.java:            textView.setText(agentMan(str));
```
We'll choose `x86/libagent.so`, let's open it in Ghidra:
```c
undefined4
Java_com_jagent_javaagent_MainActivity_agentMan
          (_JNIEnv *param_1,undefined4 param_2,_jstring *param_3)
{
  char *pcVar1;
  char *pcVar2;
  int in_GS_OFFSET;
  int local_144;
  undefined4 local_130;
  basic_string,std--__ndk1--allocator> local_11c [16];
  int local_10c;
  int local_108;
  basic_string,std--__ndk1--allocator> local_104 [16];
  basic_string,std--__ndk1--allocator> local_f4 [14];
  byte local_e6 [42];
  undefined4 local_bc [42];
  int local_14;
  local_14 = *(int *)(in_GS_OFFSET + 0x14);
  pcVar1 = (char *)_JNIEnv::GetStringUTFChars(param_1,param_3,(uchar *)0x0);
  std::__ndk1::basic_string,std--__ndk1--allocator>::
  basic_string(local_f4,"NULL");
  if (pcVar1 != (char *)0x0) {
    pcVar2 = (char *)FUN_00018780(local_f4);
    pcVar2 = strstr(pcVar1,pcVar2);
    if (pcVar2 == (char *)0x0) {
      local_108 = 0x1ce9;
      memcpy(local_bc,&DAT_000387f4,0xa8);
      memset(local_e6,0,0x2a);
      local_10c = (int)((int)&local_14 - (int)local_bc) >> 2;
      local_144 = 0;
      while (local_144 ,std--__ndk1--allocator>::
      basic_string(local_11c,"Secret, Agent Man!");
                    /* try { // try from 00018573 to 000185c2 has its CatchHandler @ 000185fd */
      _JNIEnv::ReleaseStringUTFChars(param_1,param_3,pcVar1);
      pcVar1 = (char *)FUN_00018780(local_11c);
      local_130 = _JNIEnv::NewStringUTF(param_1,pcVar1);
      std::__ndk1::basic_string,std--__ndk1--allocator>::
      ~basic_string(local_11c);
      goto LAB_00018622;
    }
  }
                    /* try { // try from 0001838b to 000183aa has its CatchHandler @ 00018420 */
  std::__ndk1::basic_string,std--__ndk1--allocator>::
  basic_string(local_104,"Nope");
  pcVar1 = (char *)FUN_00018780(local_104);
                    /* try { // try from 000183ce to 000183e5 has its CatchHandler @ 00018431 */
  local_130 = _JNIEnv::NewStringUTF(param_1,pcVar1);
  std::__ndk1::basic_string,std--__ndk1--allocator>::
  ~basic_string(local_104);
LAB_00018622:
  std::__ndk1::basic_string,std--__ndk1--allocator>::
  ~basic_string(local_f4);
  if (*(int *)(in_GS_OFFSET + 0x14) == local_14) {
    return local_130;
  }
                    /* WARNING: Subroutine does not return */
  __stack_chk_fail();
}
```