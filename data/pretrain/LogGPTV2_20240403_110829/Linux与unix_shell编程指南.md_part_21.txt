### 优化后的文本

#### 14.3.5 设置 `MANPATH` 环境变量
```bash
$ MANPATH=/usr/apps/man:/usr/local
```
使用 `export` 命令导出 `MANPATH` 变量，以便在子进程中可用：
```bash
$ export MANPATH
```

#### 14.3.6 `LPDEST` 或 `PRINTER` 变量
这些变量用于保存默认打印机名，以便在打印作业时指定打印机。
```bash
$ LPDEST=hp3si-systems
```

#### 14.3.7 使用 `set` 命令
在 `$HOME/.profile` 文件中设置环境变量时，可以使用 `set -a` 命令来导出所有变量。但不建议在 `/etc/profile` 中使用这种方法，仅在自己的 `$HOME/.profile` 文件中使用。

#### 14.3.8 将变量导出到子进程
新用户常遇到的问题之一是如何将定义的变量导出到子进程中。以下是一个示例脚本 `father` 和 `child`，展示如何处理这种情况。

**`father` 脚本：**
```bash
#!/bin/bash
film="A Few Good Men"
echo "Father: $film"
./child
echo "Father: $film"
```

**`child` 脚本：**
```bash
#!/bin/bash
echo "Child: $film"
film="Die Hard"
echo "Child: $film"
```

如果不导出 `film` 变量，`child` 脚本将无法访问它。通过在 `father` 脚本中添加 `export` 命令，可以解决这个问题：
```bash
#!/bin/bash
film="A Few Good Men"
export film
echo "Father: $film"
./child
echo "Father: $film"
```

#### 14.4 位置参数变量
位置参数变量允许向 shell 脚本传递信息。前 9 个参数可以直接访问，使用 `shift` 命令可以改变这个限制。参数从 `$0` 开始，其中 `$0` 表示脚本名称。

**示例：**
```bash
$ script_name Did You See The Full Moon
$0: script_name
$1: Did
$2: You
$3: See
$4: The
$5: Full
$6: Moon
$7, $8, $9: (空)
```

#### 14.4.1 在脚本中使用位置参数
```bash
#!/bin/bash
echo "Script name: $0"
echo "Arguments: $@"
```

#### 14.4.2 向系统命令传递参数
可以在脚本中向系统命令传递参数。例如：
```bash
find . -name "$1"
grep "$1" /etc/passwd
```

#### 14.4.3 特定变量参数
特定变量提供有关脚本运行时的更多信息。常见的特定变量包括：

- `$#`: 传递到脚本的参数个数
- `$*` 或 `$@`: 所有参数作为一个字符串或数组
- `$$`: 当前进程 ID
- `$!`: 最后一个后台进程的 ID
- `$-`: 当前 shell 的选项
- `$?`: 最后一个命令的退出状态

#### 14.4.4 检查退出状态
可以使用 `$?` 检查命令或脚本的退出状态。例如：
```bash
cp file.txt /tmp
if [ $? -eq 0 ]; then
    echo "Copy successful"
else
    echo "Copy failed"
fi
```

#### 14.5 小结
变量和特定变量增强了 shell 脚本的功能，并提供了更多关于传递参数的信息。

---

### 第 15 章 引号

#### 15.1 引用必要性
引用防止 shell 对特殊字符进行解释。常见的引用类型包括双引号、单引号和反斜线。

#### 15.2 双引号
双引号允许变量替换，但保留其他特殊字符的含义。例如：
```bash
mydate=$(date)
echo "Today is $mydate"
```

#### 15.3 单引号
单引号禁止所有特殊字符的解释。例如：
```bash
echo 'Today is $mydate'
```

#### 15.4 反引号
反引号用于执行命令并将输出赋值给变量。例如：
```bash
mydate=`date`
echo "Today is $mydate"
```

#### 15.5 反斜线
反斜线用于转义特殊字符。例如：
```bash
echo \*
echo \$19.99
```

#### 15.6 小结
遵循以下规则：
1. 反馈字符串用双引号。
2. 如果结果不理想，尝试另一种引用方式。

---

### 第 16 章 Shell 脚本介绍

Shell 脚本可以包含一个或多个命令。编写脚本时可以根据需要决定是否使用脚本。本章将介绍基础的 shell 编程知识。