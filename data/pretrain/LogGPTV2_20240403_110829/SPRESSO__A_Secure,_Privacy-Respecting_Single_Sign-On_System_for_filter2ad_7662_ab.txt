### 1. Introduction

SPRESSO is a web-based Single Sign-On (SSO) system that adheres to standard HTML5 and web features, ensuring compatibility across various browsers, platforms, and devices without the need for additional software or browser extensions. This document provides a detailed explanation of the SPRESSO login flow, including an overview and a step-by-step breakdown.

### 2. Login Flow

#### 2.1 Overview

The SPRESSO login flow involves three main parties:
- **Relying Parties (RPs)**: Websites where users want to log in.
- **Identity Providers (IdPs)**: Entities that verify user identities.
- **Forwarders (FWDs)**: Intermediate entities that forward messages from IdPs to RPs within the browser.

The high-level steps of the login flow are:
1. The user enters their email address on the RP's website.
2. The RP creates a tag by encrypting its domain name and a nonce with a symmetric key.
3. The tag and email address are forwarded to the IdP via the user's browser.
4. The IdP signs the tag and email address, creating an identity assertion (IA).
5. The IA is encrypted and sent back to the RP via the FWD.
6. The RP decrypts and verifies the IA, logging the user in.

#### 2.2 Detailed Flow

**Step 1: User Opens the Login Page**
- The user opens the login page at the RP's website.

**Step 2: User Enters Email Address**
- The user enters their email address on the RP's website.

**Step 3: RP Sends Email Address to Server**
- The RP sends the email address to its server in a POST request.

**Step 4: RP Identifies IdP and Retrieves Support Document**
- The RP identifies the IdP based on the email domain and retrieves a support document from the IdP, which contains the IdP's public key.

**Step 5: RP Generates Nonces and Keys**
- The RP generates nonces and keys: `rpNonce`, `iaKey`, `tagKey`, and `loginSessionToken`.

**Step 6: RP Creates Tag**
- The RP creates a tag by encrypting its domain and `rpNonce` using `tagKey`.

**Step 7: RP Stores and Sends Data**
- The RP stores the tag, `iaKey`, FWD domain, and email address in its session data store under `loginSessionToken`.
- The RP sends `tagKey`, `FWDDomain`, and `loginSessionToken` as a response to the POST request.

**Step 8: RPdoc Opens Login Dialog**
- RPdoc opens a login dialog, initially loading `RPRedirDoc` and passing `loginSessionToken`.

**Step 9-10: Redirect to IdPdoc**
- `RPRedirDoc` redirects the login dialog to `IdPdoc`, passing the user's email address, tag, FWD domain, and `iaKey`.

**Step 11-12: Load IdPdoc**
- The browser loads `IdPdoc` from the IdP.

**Step 13: User Enters Password**
- The user enters their password on `IdPdoc`.

**Step 14: IdP Verifies Credentials**
- The IdP verifies the user's credentials.

**Step 15: IdP Creates Identity Assertion (IA)**
- The IdP creates the IA by signing the tag, email, and FWD domain using its private key.

**Step 16: IdP Returns IA**
- The IdP returns the IA to `IdPdoc`.

**Step 17: Encrypt IA**
- `IdPdoc` encrypts the IA using `iaKey`.

**Step 18: Open FWDdoc IFrame**
- `IdPdoc` opens an iframe with the URL of `FWDdoc`, passing the tag and encrypted IA.

**Step 19: FWDdoc Loads and Sends PostMessage**
- After loading, `FWDdoc` sends a postMessage to its parent's opener window (RPdoc) with the content "ready".

**Step 20: RPdoc Sends TagKey to FWDdoc**
- RPdoc sends `tagKey` to `FWDdoc` in a postMessage, specifying the HTTPS origin of FWD as the only allowed receiver.

**Step 21: FWDdoc Decrypts Tag and Forwards Encrypted IA**
- `FWDdoc` decrypts the tag to learn the intended RP and forwards the encrypted IA to RPdoc via postMessage, specifying the HTTPS origin of RP as the only allowed receiver.

**Step 22: RPdoc Sends Encrypted IA to RP**
- RPdoc sends the encrypted IA and `loginSessionToken` to the RP.

**Step 23: RP Decrypts and Verifies IA**
- The RP decrypts the IA, retrieves `ia'`, and checks if it is a valid signature for the tag, email, and FWD domain using the IdP's public key.

**Step 24: User Logged In**
- The user is now logged in, and the RP creates a session token for the user's browser.

### 3. Implementation Details

A proof-of-concept implementation of SPRESSO was developed using JavaScript and HTML, containing all the necessary features. The implementation uses AES-256 in GCM mode for encryption and RSA-SHA256 for signatures. The source code and online demo are available at [22].

### 4. Discussion

#### 4.1 Security and Privacy Considerations

**Malicious RP: Impersonation Attack**
- A malicious RP could attempt a man-in-the-middle attack by impersonating an honest RP. However, the use of FWD ensures that the IA is only delivered to the correct RP, preventing such attacks.

**Malicious IdP: Identity Spoofing**
- A malicious IdP cannot alter the user's identity because the identity is fixed by the RP and verified in Step 23.

**Malicious FWD: Man-in-the-Middle and Privacy Attacks**
- A malicious FWD could collaborate with a malicious RP or IdP to undermine authentication and privacy. To mitigate this, RPs should choose trusted FWDs and ensure that the IA is encrypted with a key unknown to the FWD.

**Enforcing Honest FWDs**
- RPs can choose trusted FWDs, and the IA is encrypted to prevent FWDs from learning the user's email address. Additionally, RPs can use caching and Tor to minimize side-channel attacks.

### 5. Conclusion

SPRESSO provides a secure and privacy-respecting SSO system by leveraging standard web technologies. The design and implementation ensure strong authentication and privacy properties, making it suitable for a wide range of applications.