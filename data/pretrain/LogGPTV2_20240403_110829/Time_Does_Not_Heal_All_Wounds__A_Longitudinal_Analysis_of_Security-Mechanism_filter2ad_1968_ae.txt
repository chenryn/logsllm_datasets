Our ﬁndings are reminiscent of client-side JavaScript issues
where different browsers support different APIs and thus
developers need to either account for popular browsers when
writing JavaScript code or utilize a library, such as jQuery,
that abstracts these details away. We argue that a similar
browser- and platform-aware framework is required for the
server side. This framework would be driven by a database
of supported security mechanisms for each version of each
mobile browser, combined with the most popular platforms on
which that browser could be executing.
the ALLOW-FROM directive,
Such a database could be automatically produced by tools
and techniques similar to the one we described in this paper.
By detecting the browser family, browser version, and OS
of a mobile device, the framework could then proceed to
use the appropriate security mechanisms for that combination.
For instance, upon detecting a mobile browser that does not
support
the framework could
automatically emit a CSP frame-ancestor header, even
if the website does not use CSP. Similarly, by detecting that
a user is utilizing an older version of the Opera Mini browser
before CSP was adopted, this framework could emit frame-
busting JavaScript code which checks whether the current
website is framed and redirects the top-level page if so [34].
This technique was once popular before X-Frame-Options was
standardized and it can still be used as a fallback technique
when browsers do not support more recent anti-clickjacking
mechanisms. Finally, for browsers with egregious lack of
support for security mechanisms (such as UC Mini),
this
framework can deny serving the website, protecting users from
falling victim to attacks and putting pressure on the developers
of such browsers to properly support the missing security
mechanisms.
13
D. Mobile browsers on other platforms
We decided to analyze the adoption of security mecha-
nisms in mobile browsers as it is a domain that has been
greatly overlooked in the past. App stores offer many different
browsers and, as we show in our study, different browsers
may provide very different security guarantees. We chose to
focus speciﬁcally on Android because of the availability of
development/dynamic-analysis tools and its dominant market
share. We should point out that such a study on the iOS
ecosystem, while possible, is likely to be much less informa-
tive, since Apple forces app developers to use WebKit as the
sole rendering engine that can run on iOS [5]. As such, we
expect that all mobile browsers on iOS will exhibit the same
support of security mechanisms since they have to use the
same underlying engine.
VIII. RELATED WORK
To the best of our knowledge, our work is the ﬁrst
systematic and longitudinal study of the adoption of security
mechanisms in mobile browsers. In this section, we brieﬂy
describe prior work in the areas of security mechanisms for
the web and web-related mobile security.
Adoption of Security Mechanisms. Given the importance of
security mechanisms, researchers have investigated their use
in the wild. In 2010, Zhou and Evans performed a small-scale
experiment, measuring the adoption of HTTPOnly cookies and
discussing reasons why the adoption was not as high as it
could be [50]. Weissbacher et al. performed the ﬁrst study
of CSP adoption ﬁnding that CSP was lagging behind other
security mechanisms [49]. Kranch and Bonneau performed
a similar study for the HSTS security mechanism [20]. Van
Goethem et al. quantiﬁed the adoption of a large number of
security mechanisms on the web, ﬁnding a positive correlation
between the ranking of a website and its use of security
mechanisms [43]. In 2016, Weichselbaum et al. conducted a
new study of CSP, ﬁnding that many developers were authoring
vulnerable CSP policies [48].
More recently, Mendoza et al. investigated the inconsis-
tencies between the security mechanisms used on the pages
designed for mobile browsers as opposed to pages designed for
desktop browsers [26]. Our work complements their research
in that we quantify whether mobile browsers are capable
of enforcing those security mechanisms, assuming that web
developers can properly conﬁgure them. Researchers have
also utilized the presence of properly conﬁgured security
mechanisms as a proxy for the overall security of a website
without the need to perform intrusive scanning [42, 44, 45, 29].
Evaluating Security-Mechanism Implementations. In 2010,
Singh et al. discovered inconsistencies in web browsers’ ac-
cess control polices which they attributed to the “piecemeal”
evolution of the policies [36]. In 2015, Hothersall-Thomas et
al. developed a testing framework called BrowserAudit to help
users evaluate the adoption of security mechanisms by different
browsers [19]. The authors used their framework to evaluate
desktop browsers by manually visiting their testing page with
each browser. In our study, we focus on automatically evalu-
ating a large number of mobile browsers and therefore have
to overcome many issues associated with the automation of
each browser. We decided against using BrowserAudit for our
tests since a signiﬁcant number of security mechanisms and
settings have been developed after 2015.
In 2017, Schwenk et al. studied the Same-Origin Policy
implementations of ten different modern browsers [35]. They
discovered different browser behaviors in approximately 23%
of their test cases. In our prior work, we proposed Hindsight,
an automated browser-agnostic framework for evaluating the
vulnerability of mobile browsers to UI attacks [22]. To be
able to conduct our large number of tests, we rely on this
testing framework to quantify the adoption of a wide range
of security mechanisms over time, instead of evaluating a
browser’s vulnerability to a few speciﬁc attacks. In recent
work, Franken et al. evaluated the third-party cookie policies
of desktop browsers and showed that third-party trackers could
circumvent both built-in cookie policies, as well as those
offered by anti-tracking browser extensions [15].
Mobile Browser Security. Niu et al. were the ﬁrst
to
notice the different security problems associated with mobile
browsers compared to desktop ones [30]. They recognized
that limited screen real estate on mobile devices can cause
critical UI components, such as the URL bar, to disappear.
In 2011, Felt and Wagner investigated a novel security threat
for phishing attacks on mobile devices due to the absence of
reliable security indicators when switching between websites
and apps [14]. In 2012, Amrutkar et al. compared desktop
and mobile browsers and identiﬁed UI vulnerabilities abusing
the screen limitations of the latter [3]. The authors later
investigated the presence of security indicators in mobile
browsers [4]. Other researchers focused on the WebView
component of Android apps, identifying a number of security
issues that could be caused by malicious apps loading benign
websites and malicious websites being loaded by benign
apps [23, 24].
IX. CONCLUSION
As users spend more and more time on their mobile
devices and the web continues to be the platform of choice for
deploying applications, it is critical that mobile web browsers
cooperate with web servers to increase user security.
In this paper, we performed the ﬁrst longitudinal study
of the support of security mechanisms, such as the Content
Security Policy (CSP) and the HTTP Strict Transport Se-
curity (HSTS), in mobile browsers. By designing 395 tests
to exercise the implementations of security mechanisms in
modern browsers, and exposing 351 unique APKs belonging
to the most popular mobile browsers to these tests, we were
able to evaluate the extent of such support in 20 different
mobile browser families for the last seven years. We discovered
that, even though browsers generally increase their support
over time, not all browsers behave the same way; some
browsers react more slowly than others and some browsers,
with millions of downloads, do not even update for multiple
years while their most recent versions are not capable of
enforcing key mechanisms, such as HttpOnly cookies and
HSTS. Moreover, we discovered that the conscious decision
of not supporting one mechanism in favor of a newer one
in Google Chrome has left hundreds of popular websites
vulnerable to clickjacking attacks, when viewed through most
of the evaluated mobile browsers. We quantiﬁed the rate of
14
change for individual security mechanisms and found that
most browsers are still not capable of properly enforcing
complicated mechanisms such as CSP. We also discovered
the presence of multi-year windows of vulnerability between
the time when popular websites request a security mechanism
and the time that most mobile browsers enforce it. Finally,
we made the counter-intuitive observation that the security-
mechanism support of browsers can depend on the Android
version of the underlying platform, and therefore two users
of the same version of the same browser can be experiencing
vastly different levels of security when browsing the web.
We argue that our ﬁndings not only call for better testing
on the side of browser vendors, but also show that developers
cannot just blindly assume the enforcement of their desired
security mechanisms. To that extent, we discussed the need
for the design and development of server-side solutions which
can adapt, in real time, to browsers based on the security
mechanisms that they support.
ACKNOWLEDGMENT
We thank our shepherd Zhenkai Liang and the reviewers for
their valuable feedback. This work was supported by the Ofﬁce
of Naval Research (ONR) under grant N00014-17-1-2541 and
by the National Science Foundation (NSF) under grants CNS-
1813974, CMMI-1842020, CNS-1617593, and CNS-1527086.
Any opinions, ﬁndings, conclusions, and recommendations
expressed in this material are those of the authors and do not
necessarily reﬂect the views of the Ofﬁce of Naval Research
or the National Science Foundation.
REFERENCES
[1] D. Akhawe, W. He, Z. Li, R. Moazzezi, and D. Song, “Click-
jacking Revisited: A Perceptual View of UI Security.” in WOOT,
2014.
[2] D. Alexis and S. Lennart, “Can I use... Support
tables
for HTML5, CSS3, etc,” 2014. [Online]. Available: https:
//caniuse.com/
[3] C. Amrutkar, K. Singh, A. Verma, and P. Traynor, “Vulner-
ableMe: Measuring systemic weaknesses in mobile browser
security,” in International Conference on Information Systems
Security. Springer, 2012, pp. 16–34.
[4] C. Amrutkar, P. Traynor, and P. C. Van Oorschot, “An empirical
evaluation of security indicators in mobile Web browsers,” IEEE
Transactions on Mobile Computing, vol. 14, no. 5, pp. 889–903,
2015.
[5] Apple Developer, “App Store Review Guidelines,” https://
developer.apple.com/app-store/review/guidelines/.
not
party CSS is
[6] J. Archibald,
“Third
safe,” Feb
https://jakearchibald.com/2018/
[7] I. Archive, “Internet Archive: Wayback Machine,” https://
2018.
third-party-css-is-not-safe/
[Online]. Available:
archive.org/web/, 2018.
[8] A. Barth, “RFC 6454 - IETF,” Dec 2011. [Online]. Available:
https://tools.ietf.org/html/rfc6454
[9] ——, “HTTP state management mechanism,” 2011.
[10] A. Barth, C. Jackson, and J. C. Mitchell, “Robust defenses for
cross-site request forgery,” in Proceedings of the 15th ACM
conference on Computer and communications security. ACM,
2008, pp. 75–88.
[11] I. Clelland, “W3C: Feature Policy,” https://wicg.github.io/
feature-policy/.
[12] comScore, “Mobile’s Hierarchy of Needs,” 2017.
[13] CVE-2010-3971, Oct 2010.
[Online]. Available: http://cve.
mitre.org/cgi-bin/cvename.cgi?name=CVE-2010-3971
[14] A. P. Felt and D. Wagner, Phishing on mobile devices.
na,
2011.
php/SameSite, 2018.
[15] G. Franken, T. Van Goethem, and W. Joosen, “Who left open
the cookie jar? a comprehensive evaluation of third-party cookie
policies,” in 27th {USENIX} Security Symposium ({USENIX}
Security 18), 2018, pp. 151–168.
[16] Google,
Jan 2018.
[Online]. Available: https://developers.
google.com/web/fundamentals/security/csp/
[17] M. Heiderich, M. Niemietz, F. Schuster, T. Holz, and
J. Schwenk, “Scriptless attacks: stealing the pie without touching
the sill,” in Proceedings of
the 2012 ACM conference on
Computer and communications security (CCS), 2012.
[18] S. Helme, 2018. [Online]. Available: https://securityheaders.com
[19] C. Hothersall-Thomas, S. Maffeis, and C. Novakovic, “Browser-
Audit: automated testing of browser security features,” in Pro-
ceedings of
the 2015 International Symposium on Software
Testing and Analysis. ACM, 2015, pp. 37–47.
[20] M. Kranch and J. Bonneau, “Upgrading HTTPS in mid-air: An
empirical study of strict transport security and key pinning.” in
NDSS, 2015.
[21] J. Leyden, “RIP HPKP: Google abandons public key pinning,”
https://www.theregister.co.uk/2017/10/30/google hpkp/, 2017.
[22] M. Luo, O. Starov, N. Honarmand, and N. Nikiforakis, “Hind-
sight: Understanding the Evolution of UI Vulnerabilities in
Mobile Browsers,” in Proceedings of the 2017 ACM SIGSAC
Conference on Computer and Communications Security. ACM,
2017, pp. 149–162.
[23] T. Luo, H. Hao, W. Du, Y. Wang, and H. Yin, “Attacks on
WebView in the Android system,” in Proceedings of the 27th
Annual Computer Security Applications Conference. ACM,
2011, pp. 343–352.
[24] T. Luo, X. Jin, A. Ananthanarayanan, and W. Du, “Touchjacking
attacks on web in android, ios, and windows phone,” in Inter-
national Symposium on Foundations and Practice of Security.
Springer, 2012, pp. 227–243.
[25] M. Marlinspike, “More tricks for defeating SSL in practice,”
Black Hat USA, 2009.
[26] A. Mendoza, P. Chinprutthiwong, and G. Gu, “Uncover-
ing HTTP Header Inconsistencies and the Impact on Desk-
top/Mobile Websites,” in Proceedings of the Web Conference
(WWW’18), April 2018.
[27] Mozilla,
Jan
2018.
[Online].
Available:
https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/
Content-Security-Policy
[28] ——, “Same-origin policy,” Mar 2018.
[Online]. Avail-
https://developer.mozilla.org/en-US/docs/Web/Security/
able:
Same-origin policy#Changing origin
[29] N. Nikiforakis, L. Invernizzi, A. Kapravelos, S. Van Acker,
W. Joosen, C. Kruegel, F. Piessens, and G. Vigna, “You are
what you include: large-scale evaluation of remote javascript
inclusions,” in Proceedings of the 2012 ACM conference on
Computer and communications security. ACM, 2012, pp. 736–
747.
[30] Y. Niu, F. Hsu, and H. Chen, “iPhish: Phishing Vulnerabilities
on Consumer Electronics.” in UPSEC, 2008.
[31] OWASP,
“Cross-site Scripting (XSS),” Mar 2018.
[On-
line]. Available: https://www.owasp.org/index.php/Cross-site
Scripting (XSS)
[32] ——, “OWASP Secure Headers Project,” https://www.owasp.
org/index.php/OWASP Secure Headers Project, 2018.
[33] OWASP, “SameSite Overview,” https://www.owasp.org/index.
[34] G. Rydstedt, E. Bursztein, D. Boneh, and C. Jackson, “Busting
frame busting: a study of clickjacking vulnerabilities at popular
sites,” IEEE Oakland Web, vol. 2, no. 6, 2010.
[35] J. Schwenk, M. Niemietz, and C. Mainka, “Same-Origin Policy:
Evaluation in Modern Browsers,” in 26th USENIX Security
Symposium (USENIX Security 17). Vancouver, BC: USENIX
Association, 2017.
[36] K. Singh, A. Moshchuk, H. J. Wang, and W. Lee, “On the in-
coherencies in web browser access control policies,” in Security
and Privacy (SP), 2010 IEEE Symposium on.
IEEE, 2010, pp.
463–478.
[37] D. F. Som´e, N. Bielova, and T. Rezk, “On the Content Security
Policy Violations due to the Same-Origin Policy,” in Proceed-
ings of the 26th International Conference on World Wide Web,
2017, pp. 877–886.
[38] O. Starov, P. Gill, and N. Nikiforakis, “Are you sure you want
to contact us? quantifying the leakage of pii via website contact
forms,” Proceedings on Privacy Enhancing Technologies, vol.
2016, no. 1, pp. 20–33, 2016.
[39] Statcounter, “Android Version Market Share Worldwide,”
http://gs.statcounter.com/android-version-market-share/
mobile-tablet/worldwide, 2018.
—
“Android
Statistic,”
[40] Statista,
version
Feb
share
[Online].
2018
Available:
https://www.statista.com/statistics/271774/
share-of-android-platforms-on-mobile-devices-with-android-os/
[41] B. Stock, M. Johns, M. Steffens, and M. Backes, “How the Web
Tangled Itself: Uncovering the History of Client-Side Web (In)
Security,” in Proceedings of USENIX Security, 2017.
market
2018.
[42] S. Tajalizadehkhoob, T. Van Goethem, M. Korczy´nski,
A. Noroozian, R. B¨ohme, T. Moore, W. Joosen, and M. van
Eeten, “Herding vulnerable cats: a statistical approach to disen-
tangle joint responsibility for web security in shared hosting,” in
Proceedings of the 2017 ACM SIGSAC Conference on Computer
and Communications Security. ACM, 2017, pp. 553–567.
[43] T. Van Goethem, P. Chen, N. Nikiforakis, L. Desmet, and
W. Joosen, “Large-scale security analysis of the web: Challenges
and ﬁndings,” in International Conference on Trust and Trust-
worthy Computing. Springer, 2014, pp. 110–126.
[44] T. Van Goethem, F. Piessens, W. Joosen, and N. Nikiforakis,
“Clubbing seals: Exploring the ecosystem of third-party security
seals,” in Proceedings of the 2014 ACM SIGSAC Conference
on Computer and Communications Security. ACM, 2014, pp.
918–929.
[45] M. Vasek and T. Moore, “Identifying risk factors for webserver
compromise,” in International Conference on Financial Cryp-
tography and Data Security. Springer, 2014, pp. 326–345.
[46] W3C, “Content Security Policy - level 2,” https://www.w3.org/
[47] ——,
TR/2014/WD-CSP2-20140703/, 2018.
Policy
2: Relation
https://www.w3.org/TR/CSP2/\#
to
frame-ancestors-and-frame-options, 2018.
X-Frame-Options,”
“Content
Security
Level
[48] L. Weichselbaum, M. Spagnuolo, S. Lekies, and A. Janc, “CSP
is dead, long live CSP! On the insecurity of whitelists and the
future of content security policy,” in Proceedings of the 2016
ACM SIGSAC Conference on Computer and Communications
Security. ACM, 2016, pp. 1376–1387.
[49] M. Weissbacher, T. Lauinger, and W. Robertson, “Why is csp
failing? trends and challenges in csp adoption,” in International
Workshop on Recent Advances in Intrusion Detection. Springer,
2014, pp. 212–233.
[50] Y. Zhou and D. Evans, “Why Aren’t HTTP-only Cookies More
Widely Deployed?” in Proceedings of 4th Web 2.0 Security and
Privacy Workshop (W2SP), 2010.
15