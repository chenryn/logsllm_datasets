tunity for denial of service, where the ability of the switches or controller to
process messages and packets in a timely fashion is impaired.
3.5 Implementation
We use KVM for virtualization and Mininet for the emulated network. The hosts
were written in Python and use iperf and ping for traﬃc generation, and the
scapy library1 for malicious host attack injection. The hosts communicate with a
HostController Python script to execute malicious host attacks, generate traﬃc
in the network, and conduct reachability tests on the network.
We insert our malicious proxy into the path between the Open vSwitch2 soft-
ware switches started by Mininet and our SDN controllers by simply having the
proxy listen for TCP connections on a speciﬁed port and address, and supplying
this port and address to Mininet as the address of the controller. When a switch
connects, the proxy opens a second TCP connection to the controller and passes
messages back and forth, modifying the message as required by the strategy.
The proxy is implemented in C++ and leverages the C version of the Loxigen3
library to parse and modify OpenFlow messages.
4 Experimental Results
We present the results obtained by applying BEADS to four SDN controllers:
ONOS, POX, Ryu, and Floodlight. We then demonstrate the impact of these
bugs with 4 real attacks.
4.1 Methodology
We applied BEADS to ONOS 1.2.1, POX version eel4, Ryu 3.27, and Floodlight
1.2. For ONOS we used its default forwarding, which uses topology detection
and shortest path routing along with proxy ARP, and a ﬂow rule idle time
of 30 s; for POX, we used the proto.arp responder, openflow.discovery,
openflow.spanning tree, and forwarding.l2 multi modules to enable topol-
ogy detection and shortest path routing along with proxy ARP; for Ryu, we used
the simple switch module, which emulates a network of learning switches; for
Floodlight, we used its default forwarding, which uses topology detection and
shortest path routing, and a ﬂow rule idle time of 90 s.
The emulated network was created using Mininet 2.2.1 and Open vSwitch
2.0.2. While BEADS supports OpenFlow versions 1.0–1.5, our testing was done
1 http://www.secdev.org/projects/scapy/.
2 http://openvswitch.org/.
3 https://github.com/ﬂoodlight/loxigen.
4 Commit 4ebb69446515d9d9a0d5a002243cdca3c411520b from 9/24/2015.
322
S. Jero et al.
with OpenFlow 1.0 because it was the default negotiated by Open vSwitch and
none of the SDN controllers we tested make use of the additional features intro-
duced in later versions of OpenFlow. We conﬁgured Mininet with a simple two-
tier tree topology of three switches and four hosts. The malicious switches and
hosts vary depending on the test being run.
Our testing was done on a hyper-threaded 20 core Intel Xeon 2.4 GHz system
with 125 GB of RAM. Each test takes about 60 s. We parallelize the tests by
running between 2 and 6 managers simultaneously. Testing required around 200 h
of total computation per tested SDN controller.
Table 1 presents a summary of tested scenarios and bugs found. We tested
6,996 strategies for ONOS, 4,286 for POX, 3,228 for Ryu, and 4,330 for Flood-
light. Not all the controllers take advantage of the complete functionality of
OpenFlow, and as we test only the messages that are actually used by the
tested system, the number of testing scenarios for each controller depended on
the implemented and used OpenFlow functionality. As a result, we tested sig-
niﬁcantly more strategies for ONOS because ONOS automatically polls every
switch for statistics about ﬂow rules and ports periodically using the OpenFlow
flow stats * and port stats * messages. The other controllers do not poll for
statistics and so have no need to use these message types, eﬀectively utilizing a
much smaller portion of the OpenFlow protocol. Similarly Ryu’s learning switch
behavior requires no topology detection which reduces the number of messages
it uses. We found a total of 831 unique bugs, with 178 common to all four con-
trollers and a further 134 common to two or three controllers. Table 1 also shows
the detection criteria (Sect. 3.4) for each bug.
Table 1. Summary of tested scenarios and bugs.
ONOS
SDN controller Total
tested
6, 996
4, 286
3, 228
4, 330
18, 840
Floodlight
Total
POX
Ryu
Bugs
found
Error
msg.
Net.
state
Reachability Res. usage
578
487
251
577
1, 893
104
121
48
95
368
372
335
168
478
1, 353
102
29
32
4
167
0
2
3
0
5
4.2 Detailed Results
We analyze all 831 unique bugs, based on their outcome, and present a summary
in Table 2.
OpenFlow Operation Stall (OS)–No Known Mitigations. Several bugs
have the common outcome of preventing or delaying OpenFlow operations that
may aﬀect multiple switches. By ignoring or dropping barrier request and
barrier reply messages or changing their transaction IDs, a malicious switch
can stall the installation of ﬂow rules forming a path through that switch as we
BEADS: Automated Attack Discovery in OpenFlow-Based SDN Systems
323
Table 2. Discovered bugs, each line corresponds to several bugs grouped by message
and action. Note that some bugs may occur multiple times, in diﬀerent categories for
diﬀerent controllers. FL = Floodlight.
Outcome
Name Strategy
OpenFlow
operation stall
OS1
Drop barrier messages
Periodic
switch
disconnect
Data-plane
loss
Flow rule
modiﬁcation
Port conﬁg
modiﬁcation
Packet
location
hijacking
Empty
packet ins
Controller
DoS
Link detection
failure
Broken ARP
broadcast
Unexpected
ﬂowrule
removal
Unexpected
broadcast
OS2
OS3
SD1
SD2
SD3
SD4
SD5
SD6
SD7
SD8
SD9
Change xid in barrier messages
Drop ﬂow add
Change version,type,length ﬁelds of handshake
messages
Duplicate handshake messages
Change version,type,length of
barrier request/barrier reply
Change version,type,length in
ﬂow add/ﬂow delete/ﬂow removed
Change version,type,length in
packet in/packet out
Change version,type,length in
port mod/echo reply/echo request
Change version,type,length in
of ∗ stats reply/of ∗ stats request
Change role in of nicira controller role *
Add CONTROLLER port to
features reply/port status
Num Controllers
4
POX
12
3
197
POX
ALL
ALL
New
No
No
No
No
20
36
48
46
42
68
12
15
ONOS
Yes
ONOS/POX/FL No
ALL
ALL
No
No
POX/RYU/FL
No
ONOS
ONOS/FL
No
No
ONOS/POX/FL Yes
DP1 Delay/drop packet in/packet out
17
ALL
DP2 Mod buﬀer id in pkt in/ﬂow add
FM
Change ﬂow rule match, actions, etc. in
ﬂow add
8
162
ALL
ALL
PC
Change port mod to change port conﬁguration
39
POX
LH1
Change port where packet was received in
packet in
14
ALL
LH2
EP1
Change port for packet out
14
ALL
Change inner packet length to 0 in packet in
EP2