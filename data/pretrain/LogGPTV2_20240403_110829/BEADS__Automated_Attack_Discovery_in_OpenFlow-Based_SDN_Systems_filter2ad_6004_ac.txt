### 3.5 Implementation

We utilize KVM for virtualization and Mininet for emulating the network. The hosts are written in Python and use iperf and ping for traffic generation, and the Scapy library1 for injecting malicious host attacks. The hosts communicate with a HostController Python script to execute malicious host attacks, generate traffic in the network, and conduct reachability tests.

To insert our malicious proxy into the path between the Open vSwitch2 software switches started by Mininet and our SDN controllers, we configure the proxy to listen for TCP connections on a specified port and address. This port and address are then provided to Mininet as the controller's address. When a switch connects, the proxy opens a second TCP connection to the actual controller and passes messages back and forth, modifying them as required by the attack strategy. The proxy is implemented in C++ and uses the C version of the Loxigen3 library to parse and modify OpenFlow messages.

### 4 Experimental Results

We present the results obtained by applying BEADS to four SDN controllers: ONOS, POX, Ryu, and Floodlight. We then demonstrate the impact of these bugs with four real-world attacks.

#### 4.1 Methodology

BEADS was applied to ONOS 1.2.1, POX (version eel4), Ryu 3.27, and Floodlight 1.2. For ONOS, we used its default forwarding, which includes topology detection, shortest path routing, and proxy ARP, with a flow rule idle time of 30 seconds. For POX, we used the proto.arp responder, openflow.discovery, openflow.spanning_tree, and forwarding.l2_multi modules to enable topology detection and shortest path routing, along with proxy ARP. For Ryu, we used the simple_switch module, which emulates a network of learning switches. For Floodlight, we used its default forwarding, which includes topology detection and shortest path routing, with a flow rule idle time of 90 seconds.

The emulated network was created using Mininet 2.2.1 and Open vSwitch 2.0.2. Although BEADS supports OpenFlow versions 1.0–1.5, our testing was conducted with OpenFlow 1.0, as it was the default negotiated by Open vSwitch and none of the SDN controllers we tested utilized the additional features introduced in later versions of OpenFlow. We configured Mininet with a simple two-tier tree topology consisting of three switches and four hosts. The malicious switches and hosts varied depending on the test being run.

Our testing was performed on a hyper-threaded 20-core Intel Xeon 2.4 GHz system with 125 GB of RAM. Each test took approximately 60 seconds. We parallelized the tests by running between 2 and 6 managers simultaneously. Testing required around 200 hours of total computation per tested SDN controller.

Table 1 summarizes the tested scenarios and bugs found. We tested 6,996 strategies for ONOS, 4,286 for POX, 3,228 for Ryu, and 4,330 for Floodlight. Not all controllers take advantage of the complete functionality of OpenFlow, and we only tested the messages actually used by each system. As a result, we tested significantly more strategies for ONOS because ONOS automatically polls every switch for statistics about flow rules and ports periodically using the OpenFlow `flow_stats` and `port_stats` messages. The other controllers do not poll for statistics and thus do not use these message types, effectively utilizing a smaller portion of the OpenFlow protocol. Similarly, Ryu’s learning switch behavior requires no topology detection, reducing the number of messages it uses. We found a total of 831 unique bugs, with 178 common to all four controllers and an additional 134 common to two or three controllers. Table 1 also shows the detection criteria (Sect. 3.4) for each bug.

**Table 1. Summary of tested scenarios and bugs.**

| SDN Controller | Total Tested | Bugs Found | Error Msg. | Net. State | Reachability | Res. Usage |
|----------------|--------------|------------|------------|------------|--------------|------------|
| ONOS          | 6,996        | 578        | 104        | 368        | 168          | 102        |
| POX           | 4,286        | 487        | 121        | 372        | 478          | 29         |
| Ryu           | 3,228        | 251        | 48         | 335        | 1,353        | 32         |
| Floodlight    | 4,330        | 577        | 95         | 168        | 4            | 4          |
| **Total**     | **18,840**   | **1,893**  | **368**    | **1,353**  | **168**      | **102**    |

#### 4.2 Detailed Results

We analyze all 831 unique bugs based on their outcomes and present a summary in Table 2.

**OpenFlow Operation Stall (OS) – No Known Mitigations.** Several bugs have the common outcome of preventing or delaying OpenFlow operations that may affect multiple switches. By ignoring or dropping barrier request and barrier reply messages or changing their transaction IDs, a malicious switch can stall the installation of flow rules forming a path through that switch.

**Table 2. Discovered bugs, each line corresponds to several bugs grouped by message and action. Note that some bugs may occur multiple times, in different categories for different controllers. FL = Floodlight.**

| Outcome                  | Name       | Strategy                                             | Num Controllers | Detection Criteria |
|--------------------------|------------|------------------------------------------------------|-----------------|--------------------|
| OpenFlow operation stall | OS1        | Drop barrier messages                                | 4               | New                |
|                          | OS2        | Change xid in barrier messages                       | 12              | No                 |
| Periodic switch disconnect| SD1        | Change version, type, length fields of handshake messages | 3               | No                 |
| Data-plane loss           | SD2        | Duplicate handshake messages                         | 197             | No                 |
| Flow rule modification    | FM         | Change flow rule match, actions, etc. in flow add    | 8               | No                 |
| Port config modification  | PC         | Change port mod to change port configuration         | 39              | No                 |
| Packet location hijacking | LH1        | Change port where packet was received in packet in   | 14              | No                 |
| Empty packet ins          | EP1        | Change inner packet length to 0 in packet in         | 14              | No                 |
| Controller DoS            | DP1        | Delay/drop packet in/packet out                      | 17              | No                 |
| Link detection failure    | SD3        | Change version, type, length in barrier request/reply | 20              | No                 |
| Broken ARP broadcast      | SD4        | Change version, type, length in flow add/delete/removed | 36              | No                 |
| Unexpected flowrule removal| SD5        | Change version, type, length in packet in/out        | 48              | No                 |
| Unexpected broadcast      | SD6        | Change version, type, length in port mod/echo reply/request | 46              | No                 |
|                          | SD7        | Change role in of nicira controller role *           | 42              | No                 |
|                          | SD8        | Add CONTROLLER port to features reply/port status    | 68              | No                 |
|                          | SD9        | Change version, type, length in of * stats reply/request | 12              | No                 |

This table provides a detailed breakdown of the discovered bugs, grouped by their outcomes and the specific messages and actions involved.