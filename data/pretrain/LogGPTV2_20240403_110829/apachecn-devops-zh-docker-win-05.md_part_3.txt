我可以依赖 Docker 平台，并依赖一个新的核心组件:消息队列。队列技术本身是企业级软件，每秒能够处理数十万条消息。NATS 是免费的开源软件，可在 Docker Hub 上直接下载到您的解决方案中，作为一个容器运行，并连接到 Docker 网络中的其他容器。
到目前为止，我已经使用了容器优先的设计和 Docker 的力量来更新 NerdDinner 的一部分。瞄准一个特性意味着我可以自信地发布这个新版本，只测试已经改变的特性。如果我想在创建晚餐功能中添加审计，我只需要对消息处理程序进行更新，并且不需要对 web 应用进行完整的回归测试，因为该组件不会被更新。
考虑到容器的设计也给了我一个基础来更新我的遗留应用的架构，并添加新的功能。
# 传统应用的现代化
突破后端特性是开始分解遗留单片的好方法。将消息队列添加到您的部署中使得这种模式可以与任何受益于异步的特性一起重复。还有其他打破单一应用的模式。如果我们公开一个 REST 应用编程接口，并转向前端的模块化用户界面，用一个反向代理在不同组件之间路由，我们就可以真正开始实现 NerdDinner 的现代化。我们可以用 Docker 做所有这些。
# 添加一个 REST API 来公开数据
传统应用最终往往成为无法在应用之外访问的数据存储。如果可以访问，这些数据对其他应用或业务合作伙伴来说将是有价值的。NerdDinner 就是一个很好的例子——它是在单页应用时代之前设计和构建的，在这个时代，用户界面是逻辑，而业务逻辑是通过 REST API 公开的。NerdDinner 将其数据保留给自己；你不能看到一个晚餐列表，除非你浏览了 NerdDinner 用户界面。
在 Docker 容器中运行一个简单的 REST API 很容易解锁遗留数据。它不需要复杂的交付:您可以从识别遗留应用中的单个数据集开始，这对其他业务部门或外部消费者很有用。然后，只需将该数据集的加载逻辑提取到单独的功能中，并将其作为容器中的只读应用编程接口进行部署。当您有需求时，您可以迭代地向 API 添加更多的特性，您不需要为您的第一个版本实现整个服务目录。
NerdDinner 中的主要数据集是晚餐列表，我构建了一个 ASP.NET Core REST API，以一个只读`GET`请求公开所有的晚餐。代码在本章的`NerdDinner.DinnerApi`项目中，这是一个非常简单的实现。因为我已经从主`NerdDinner`项目中分离出了核心实体定义，所以我可以从 API 中公开现有的契约，并在项目中使用任何我喜欢的数据访问技术。
我选择了使用 Dapper，这是一个快速直观的对象关系映射器.NET 标准，所以它与.NET 框架和.NET 核心应用。Dapper 使用基于约定的映射；您提供一个 SQL 语句和一个目标类类型，它执行数据库查询并将结果映射到对象。从现有表中加载晚餐数据并将其映射到共享的`Dinner`对象的代码非常简单:
```
protected override string GetAllSqlQuery => "SELECT *, Location.Lat as Latitude... FROM Dinners";
public override IEnumerable GetAll()
{
  _logger.LogDebug("GetAll - executing SQL query: '{0}'", GetAllSqlQuery);
  using (IDbConnection dbConnection = Connection)
  {
    dbConnection.Open();
    return dbConnection.Query(
      GetAllSqlQuery, 
      (dinner,coordinates) => { 
        dinner.Coordinates = coordinates;
        return dinner;
      },
      splitOn: "LocationId");
   }
}
```
`GetAll`方法在 API 控制器类中被调用，剩下的代码就是通常的 ASP.NET Core 设置。
Dapper is usually much easier to work with than this example, but it lets you do some manual mapping when you need to, which is what I've done here. NerdDinner uses an SQL Server location data type to store where dinners are taking place. This maps to a .NET `DbGeography` type, but that type doesn't exist in .NET Standard. If you look through the code in `Chapter 5`, you'll see a few places where I map between `DbGeography` and my custom `Coordinates` types, which is what you'll need to do if you have a similar issue.
我已经改变了最初的 NerdDinner 网络应用，当它获取`DinnersController`类中的晚餐列表时，使用这个新的应用接口。我正在通过配置设置`DinnerApi:Enabled`使用一个特性标志，这样应用要么使用 API 作为数据源，要么直接从数据库中查询。这让我可以分阶段推出该功能:
```
if (bool.Parse(Config.Current["DinnerApi:Enabled"]))
{
  var client = new RestClient(Config.Current["DinnerApi:Url"]);
  var request = new RestRequest("dinners");
  var response = client.Execute>(request);
  var dinners = response.Data.Where(d => d.EventDate >= DateTime.Now).OrderBy(d => d.EventDate);
  return View(dinners.ToPagedList(pageIndex, PageSize));
}
else
{
  var dinners = db.Dinners.Where(d => d.EventDate >= DateTime.Now).OrderBy(d => d.EventDate);
  return View(dinners.ToPagedList(pageIndex, PageSize));
}
```
新的应用编程接口被打包成名为`dockeronwindows/ch05-nerd-dinner-api`的 Docker 映像。这个的 Dockerfile 非常简单；它只是从名为`microsoft/dotnet:2.1-aspnetcore-runtime-nanoserver-1809`的官方 ASP.NET Core 基础映像开始，并在编译后的 API 代码中复制。
我可以在 Docker 容器中运行 API 作为内部组件，由 NerdDinner web 容器使用，但不能公开访问，或者我可以在 API 容器上发布一个端口，并使其在 Docker 网络之外可用。公共 REST 应用编程接口有一个定制端口是不寻常的，消费者希望在端口`80`访问它，用于 HTTP，在端口`443`访问它，用于 HTTPS。我可以在我的解决方案中再添加一个组件，让我可以对所有服务使用标准的端口集，并将传入的请求路由到不同的容器，这就是所谓的**反向代理**。
# 使用反向代理在容器之间路由 HTTP 请求
反向代理是一项非常有用的技术，可以添加到您的项目中，无论您是在考虑构建一个新的微服务架构，还是更新一个传统的整体。反向代理只是一个 HTTP 服务器，它接收来自外部世界的所有传入网络流量，从另一个 HTTP 服务器获取内容，并将其返回给客户端。在 Docker 中，反向代理运行在具有已发布端口的容器中，它代理来自没有任何已发布端口的其他容器的流量。
这是带有反向代理的用户界面和应用编程接口容器的体系结构:
![](img/c25f793f-b5b8-4a2c-99da-5fe28361943e.png)
传入流量的所有路由规则都在代理容器中。它将被配置为从`nerd-dinner-homepage`容器加载对主页位置`/`的请求；以路径`/api`开始的请求将从`nerd-dinner-api`容器加载，任何其他请求将从`nerd-dinner-web`容器中的原始应用加载。
It's important to realize that the proxy does not redirect the client to these other services. The proxy is the only endpoint that the client connects to. The proxy makes HTTP requests to the actual service on the client's behalf, using the containers' host names.
反向代理可以做的不仅仅是路由请求。所有流量都通过反向代理，因此它可以是您应用 SSL 终止和 HTTP 缓存的层。您甚至可以在反向代理中构建安全性，将它用于认证和作为 web 应用防火墙，保护您免受像 SQL 注入这样的常见攻击。这对于遗留应用尤其有吸引力。您可以在代理层进行性能和安全性改进，将原始应用作为一个内部组件留在一个容器中，除非通过代理，否则无法访问该容器。
反向代理有许多技术选择。Nginx 和 HAProxy 是 Linux 世界中流行的选项，它们也可以在 Windows 容器中使用。您甚至可以将 IIS 实现为反向代理，在单独的容器中运行它，所有路由规则都使用 URL 重写模块设置。这些选项功能强大，但需要大量配置才能启动和运行。我将使用一个名为 **Traefik** 的反向代理，它是为在云原生应用的容器中运行而构建的，它从 Docker 获得所需的配置。
# 用 trafik 代理来自 docker 容器的流量
Traefik 是一个快速、强大且易于使用的反向代理。您可以在一个容器中运行它，并发布 HTTP(或 HTTPS)端口，并将容器配置为侦听来自 Docker Engine API 的事件:
```
docker container run -d -P `
 --volume \\.\pipe\docker_engine:\\.\pipe\docker_engine `
 sixeyed/traefik:v1.7.8-windowsservercore-ltsc2019 `
 --docker --docker.endpoint=npipe:////./pipe/docker_engine
```
Traefik is an official image on Docker Hub, but just like NATS the only Windows images available are based on Windows Server 2016\. I'm using my own image here, based on Windows Server 2019\. The Dockerfile is in my `sixeyed/dockerfiles-windows` repository on GitHub, but you should check Docker Hub to see whether there's a 2019 variant of the official Traefik image before you use mine.
您以前见过`volume`选项——它用于将主机上的文件系统目录装入容器。她，我用它装了一个窗户**名叫管道**，叫`docker_engine`。管道是客户端-服务器通信的一种网络方法。Docker 命令行界面和 Docker 应用编程接口支持通过 TCP/IP 和命名管道的连接。像这样安装管道可以让容器查询 Docker API，而不需要知道运行容器的主机的 IP 地址。
Traefik 使用`docker.endpoint`选项中的连接细节，使用命名管道连接从 Docker API 订阅事件流。当创建或移除容器时，它将从 Docker 获得通知，Traefik 使用这些事件中的数据来构建自己的路由映射。
当运行 Traefik 时，您可以创建带有标签的应用容器来告诉 Traefik 哪些请求应该路由到哪些容器。标签只是键值对，可以在创建时应用于容器。它们出现在 Docker 的事件流中。Traefik 使用前缀为`traefik.frontend`的标签来构建其路由规则。这是我如何通过 Traefik 运行带有路由的 API 容器:
```
docker container run -d `
 --name nerd-dinner-api `
 -l "traefik.frontend.rule=Host:api.nerddinner.local" `
 dockeronwindows/ch05-nerd-dinner-api:2e;
```
Docker 创建名为`nerd-dinner-api`的容器，然后发布一个包含新容器细节的事件。Traefik 获取该事件，并在其路由映射中添加一个规则。任何以 HTTP `Host`头`api.nerddinner.local`进入 Traefik 的请求都将从 API 容器中被代理。API 容器不发布任何端口——反向代理是唯一可公开访问的组件。
Traefik has a very rich set of routing rules, using different parts of the HTTP request—the host, path, headers, and query string. You can map anything from wildcard strings to very specific URLs using Traefik's rules. There's much more that Traefik can do too, like load balancing and SSL termination. The documentation can be found at [https://traefik.io](https://traefik.io).
使用类似的规则，我可以部署新版本的 NerdDinner，并让 Traefik 代理所有的前端容器。脚本`ch05-run-nerd-dinner_part-2.ps1`是一个升级，首先移除现有的 web 容器:
```
docker container rm -f nerd-dinner-homepage
docker container rm -f nerd-dinner-web
```
标签和环境变量是在创建容器时应用的，它们会持续到容器的整个生命周期。您不能在现有容器上更改这些值；您需要删除它并创建一个新的。我想为 Traefik 运行带有标签的 NerdDinner web 和主页容器，所以我需要替换现有的容器。脚本的其余部分启动 Traefik，用新配置替换 web 容器，并启动 API 容器:
```
docker container run -d -p 80:80 `
 -v \\.\pipe\docker_engine:\\.\pipe\docker_engine `
 sixeyed/traefik:v1.7.8-windowsservercore-ltsc2019 `
 --api --docker --docker.endpoint=npipe:////./pipe/docker_engine
docker container run -d `
 --name nerd-dinner-homepage `
 -l "traefik.frontend.rule=Path:/,/css/site.css" `
 -l "traefik.frontend.priority=10" `
 dockeronwindows/ch03-nerd-dinner-homepage:2e;
docker container run -d `
 --name nerd-dinner-web `
 --env-file api-keys.env `
 -l "traefik.frontend.rule=PathPrefix:/" `
 -l "traefik.frontend.priority=1" `
 -e "DinnerApi:Enabled=true" `
 dockeronwindows/ch05-nerd-dinner-web:2e;
docker container run -d `
 --name nerd-dinner-api `
 -l "traefik.frontend.rule=PathPrefix:/api" `
 -l "traefik.frontend.priority=5" `