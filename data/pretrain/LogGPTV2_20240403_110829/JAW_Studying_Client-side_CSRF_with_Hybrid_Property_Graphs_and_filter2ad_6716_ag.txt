Notices, 2016.
[39] A. Czeskis, A. Moshchuk, T. Kohno, and Helen J. Wang.
Lightweight server support for browser-based csrf pro-
tection. In Proceedings of the International Conference
on World Wide Web, 2013.
[40] A. Doupé, L. Cavedon, C. Kruegel, and G. Vigna. En-
emy of the State: A State-Aware Black-Box Web Vul-
nerability Scanner. In USENIX Security, 2012.
[41] J. Ferrante, K. J. Ottenstein, and J. D. Warren. The
program dependence graph and its use in optimization.
In ACM Transactions on Programming Languages and
Systems, 1987.
[42] K. Gallaba, A. Mesbah, and I. Beschastnikh. Don´t
Call Us, We´ll Call You: Characterizing Callbacks in
Javascript. In Proceedings of the 2015 ACM/IEEE Inter-
national Symposium on Empirical Software Engineering
and Measurement, 2015.
[43] S. Guarnieri and B. Livshits. GULFSTREAM: Staged
Static Analysis For Streaming JavaScript Applications.
In Proceedings of the USENIX conference on Web ap-
plication development, 2010.
[44] B. Hackett, S. Lebresne, B. Burg, and J. Vitek. Fast and
Precise Hybrid Type Inference for Javascript. In PLDI,
2012.
[45] N. Hardy. The confused deputy: (or why capabilities
might have been invented). In ACM SIGOPS Operating
Systems Review, 1988.
[46] S. H. Jensen, P. A. Jonsson, and A. Møller. Remedying
the Eval that Men Do. In Proceedings of ISSTA, 2012.
[47] S. H. Jensen, M. Madsen, and A. Møller. Modeling
the HTML DOM and Browser API in Static Analysis
of Javascript Web Applications. In Proceedings of the
ESEC/FSE, 2011.
[48] S. H. Jensen, M. Madsen, and A. Møller. Modeling
the HTML DOM and browser API in static analysis
of JavaScript web applications. In Proceedings of the
ESEC/FSE, pages 59–69, 2011.
[49] S. H. Jensen, A. Møller, and P. Thiemann. Type Analysis
for Javascript. In Proceedings of the 16th International
Symposium on Static Analysis, 2009.
[50] S. H. Jensen, A. Møller, and P. Thiemann. Interproce-
dural Analysis with Lazy Propagation. In International
Static Analysis Symposium, Lecture Notes in Computer
Science, vol 6337. Springer, Berlin, Heidelberg, 2010.
[51] M. Johns. The three faces of csrf. talk at the deepsec2007
conference. 2007. https://deepsec.net/archive/
2007.deepsec.net/speakers/index.html#marti
n-johns.
[52] M. Johns and J. Winter. RequestRodeo: Client side
protection against session riding, 2006. https://www.
owasp.org/images/4/42/RequestRodeo-MartinJ
ohns.pdf.
[53] N. Jovanovic, E. Kirda, and C. Kruegel. Preventing cross
site request forgery attacks. In SecureComm, 2006.
[54] J. Jueckstock and A. Kapravelos. VisibleV8: In-browser
Monitoring of JavaScript in the Wild. In Proceedings of
the ACM IMC, 2019.
[55] K. Käfer. Cross site request forgery. In Hasso-Plattner-
[57] D. A. Kinloch and M. Munro. Understanding c pro-
grams using the combined c graph representation. In
Proceedings of the International Conference on Soft-
ware Maintenance, 1994.
[58] M. S. Lam., R. S. Avaya, and J. D. Ullman. Compil-
ers: Principles, techniques, and tools (2nd edition). In
Addison-Wesley Longman Publishing Co., Inc., Boston,
MA, USA, 2006. ISBN 0321486811, 2006.
[59] T. Lauinger, A. Chaabane, S. Arshad, W. Robertson,
C. Wilson, and E. Kirda. Thou shalt not depend on me:
Analysing the use of outdated javascript libraries on the
web. NDSS 2017, 2017.
[60] S. Lekies, B. Stock, and M. Johns. 25 million ﬂows
later: large-scale detection of DOM-based XSS. In CCS,
2013.
[61] M. Madsen, B. Livshits, and M. Fanning. Practical
Static Analysis of Javascript Applications in the Pres-
ence of Frameworks and Libraries. In Proceedings of
the ESEC/FSE, 2013.
[62] M. Madsen and A. Møller. Sparse Dataﬂow Analysis
with Pointers and Reachability. In International Static
Institut, Technical report, 2008.
[56] F. Kerschbaum. Simple cross-site attack prevention. In
SecureComm, 2007.
2540    30th USENIX Security Symposium
USENIX Association
Analysis Symposium, Lecture Notes in Computer Sci-
ence, vol 8723. Springer, Cham, 2014.
[63] Z. Mao, N. Li, and I. Molloy. Defeating cross-site re-
quest forgery attacks with browser-enforced authenticity
protection. In 13th International Conference on Finan-
cial Cryptography and Data Security, 2009.
[64] W. Melicher, A. Das, M. Sharif, L. Bauer, and L. Jia.
Riding out domsday: Towards detecting and preventing
dom cross-site scripting. In NDSS, 2018.
[65] Mozilla. Introduction to the DOM, 2020. https://de
veloper.mozilla.org/en-US/docs/Web/API/Doc
ument_Object_Model/Introduction.
[66] J. Nicolay, V. Spruyt, and C. D. Roover. Static Detection
of User-speciﬁed Security Vulnerabilities in Client-side
JavaScript. In PLAS, 2016.
[67] C. Park and S. Ryu. Scalable and Precise Static Analysis
of JavaScript Applications via Loop-Sensitivity (Arti-
fact). In ECOOP, 2015.
[68] G. Pellegrino, O. Catakoglu, D. Balzarotti, and
C. Rossow. Uses and abuses of server-side requests.
In RAID, 2016.
[69] G. Pellegrino, M. Johns, S. Koch, M. Backes, and
C. Rossow. Deemon: Detecting CSRF with dynamic
analysis and property graphs. In CCS, 2017.
[70] G. Pellegrino, C. Tschürtz, E. Bodden, and C. Rossow.
jäk: Using Dynamic Analysis to Crawl and Test Modern
Web Applications. In RAID, 2015.
[71] T. Reps. Program analysis via graph reachability. In
Information and Software Technology, 40(11):701–726,
1998.
[72] G. Richards, S. Lebresne, B. Burg, and J. Vitek. An
Analysis of the Dynamic Behavior of Javascript Pro-
grams. In PLDI, 2010.
[73] P. D. Ryck, L. Desmet, T. Heyman, F. Piessens, and
W. Joosen. CsFire: Transparent client-side mitigation
of malicious cross-domain requests. In ESSoS, 2010.
[74] P. D. Ryck, L. Desmet, W. Joosen, and F. Piessens. Au-
tomatic and precise client-side protection against CSRF
attacks. In ESORICS, 2011.
[75] P. Saxena, D. Akhawe, S. Hanna, F. Mao, S. McCamant,
and D. Song. A symbolic execution framework for
JavaScript. In IEEE S&P, pages 513–528. IEEE, 2010.
[76] P. Saxena, S. Hanna, P. Poosankam, and D. Song. FLAX:
Systematic Discovery of Client-side Validation Vulnera-
bilities in Rich Web Applications. In NDSS, 2010.
[77] H. Shahriar and M. Zulkernine. Client-side detection
of cross-site request forgery attacks. In Proceedings
of the IEEE 21st International Symposium on Software
Reliability Engineering, 2010.
[78] S. Sivakorn, I. Polakis, and A. D. Keromytis. The
Cracked Cookie Jar: HTTP Cookie Hijacking and the
Exposure of Private Information. In Proceedings of the
IEEE Euro S&P, 2016.
[79] N. Skrupsky, M. Monshizadeh, P. Bisht, T. Hinrichs,
V.N. Venkatakrishnan, and L. Zuck. WAVES: Auto-
matic Synthesis of Client-side Validation Code for Web
Applications. In 2012 International Conference on Cy-
ber Security, 2012.
[80] D. F. Somé. EmPoWeb: Empowering Web Applications
with Browser Extensions. In Proceedings of the IEEE
S&P, 2019.
[81] S. Son and V. Shmatikov.
The Postman Always
Rings Twice: Attacking and Defending postMessage
in HTML5 Websites. In NDSS, 2013.
[82] T. Sotiropoulos and B. Livshits. Static Analysis for
Asynchronous Javascript Programs. In ECOOP, 2019.
[83] M. Sridharan, J. Dolby, S. Chandra, M. Schäfer, and
F. Tip. Correlation Tracking for Points-To Analysis of
Javascript. In ECOOPs, 2012.
[84] M. Steffens, C. Rossow, M. Johns, and B. Stock. Don’t
Trust the Locals: Investigating the Prevalence of Per-
sistent Client-Side Cross-Site Scripting in the Wild. In
NDSS, 2019.
[85] B. Stock, G. Pellegrino, C. Rossow, M. Johns, and
M. Backes. Hey, you have a problem: On the feasi-
bility of large-scale web vulnerability notiﬁcation. In
USENIX Security, pages 1015–1032, 2016.
[86] A. Sudhodanan, R. Carbone, L. Compagna, and N. Dol-
gin. Large-scale analysis & detection of authentication
cross-site request forgeries. In IEEE Euro S&P, 2017.
[87] A. Sudhodanan, S. Khodayari, and J. Caballero. Cross-
Origin State Inference (COSI) Attacks: Leaking Web
Site States through XS-Leaks. In NDSS, 2020.
[88] R. Walikar. Cross-site port attacks - xspa, 2012. https:
//ibreak.software/2012/11/cross-site-port-
attacks-xspa-part-1/.
[89] M. Weissbacher, W. Robertson, E. Kirda, C. Kruegel,
and G. Vigna. ZigZag: Automatically Hardening Web
Applications Against Client-side Validation Vulnerabili-
ties. In USENIX Security, 2015.
[90] M. West. Incrementally better cookies. 2019. https:
//tools.ietf.org/html/draft-west-cookie-in
crementalism-00.
[91] F. Yamaguchi, N. Golde, D. Arp, and K. Rieck. Model-
ing and Discovering Vulnerabilities with Code Property
Graphs. In Proceedings of the IEEE S&P, 2014.
[92] F. Yamaguchi, M. Lottmann, and K. Rieck. Generalized
vulnerability extrapolation using abstract syntax trees.
In ACSAC, 2012.
[93] W. Zeller and E. W. Felten. Cross-site request forgeries:
Exploitation and prevention. In Princeton University,
2008.
[94] X. Zheng, J. Jiang, J. Liang, H. Duan, S. Chen, and
T. Wan. Cookies Lack Integrity: Real-World Implica-
tions. In USENIX Security, 2015.
USENIX Association
30th USENIX Security Symposium    2541
A Additional JAW Details
JAW Semantic Types
A.1
Figure 6: Average time required for JAW to construct and analyze a hybrid
property graph categorized by lines of code (LoC).
Descr.
Window URL
Cookie
localStorage
sessionStorage
postMessage
Window Name
Document Referrer
DOM Attribute
Client-Side Request
Event Dispatch
Handler Registration
Func. I/O
Func. I/O
Type
WIN.LOC
DOM.COOKIES
LOCAL-STORAGE
SESSION-STORAGE
POST-MESSAGE
WIN.NAME
DOC.REFERRER
DOM.READ
REQ
E-DISPATCH
E-REGISTER
o ← i
o ~ i
Example of use
window.location.hash
doc.cookie
doc.localStorage
doc.sessionStorage
addEventListener(evt, h)
window.name
doc.referrer
doc.getElementById(‘x’).value
XMLHttpRequest
el.triggerHandler(evt)
el.on(evt, h)
function(i){return o = g(i);}
function(i){if(cond(i)) return o;}
Table 4: List of semantic types supported by JAW. Types are assigned to
constructs representing input sources of a web application, functions that send
HTTP requests, dispatch or register events, and functions with inputs/outputs.
Table 4 summarizes the list of semantic types supported
by JAW. We can use one semantic type for each of the injec-
tion points where the attacker can input data. Semantic types
can also be assigned to functions to specify their behavior
abstractly, e.g., functions that delegate the dispatch of events
or the HTTP requests to low-level browser APIs.
A.2 Library Detection
JAW relies on Library Detector [13] to identify the JavaScript
libraries used inside a web page. It is used as a bundled script
injected by Selenium [15]. Library Detector has a series of
pre-deﬁned checks (i.e., usage indicator functions) for each
JavaScript library that it supports. It searches for known li-
brary signatures inside the execution environment by appling
the usage indicator functions. For example, global variables
set on the Window object by a library are an indicator of the
usage of that library. It returns the list of libraries used in the
web page. At the time of writing this paper, Library Detec-
tor provides support for the detection of 114 different library
scripts, including JQuery, React, Angular, and Prototype.
B Additional Evaluation Details
B.1 Testbed (Alphabetically Ordered)
This appendix contains the complete list of the web applica-
tions and their versions in our testbed.
AbanteCart 1.2.16, Akeneo 3.2.26, Alfresco Community
201911, Apache Airﬂow UI 1.10.8, Axelor 5.3.0, Bonita 7.6,
CMS Made Simple 2.2.14, CanvasLMS 2020.01.01.05, Civi-
CRM 5.25.0, Ckan 2.8.0, Collabtive 3.1, Composr 10.0.30,
Concrete5 8.5.2, Coppermine 1.6.08, Cotonti 0.9.19, Diaspora
0.7.13.0, Discourse 2.4.5, DokuWiki 20180422c, Dolibarr
11.0.4, DreamFactory 4.2.2, Drupal 8.8.6, ELK 7.6.0, ERP-
Next 12.9.3, EspoCRM 5.9.1, FatFreeCRM 0.18.1, Fluentd
UI 1.10.3, Ghost 3.17.1, Gitlab CE 13.0.3, Grafana 6.5.2,
Horde Groupware Webmail 5.2.22, JFrog Artifactory Open
Source 6.19.1, JasperReports 7.5.0, Jenkins 2.204.1, Jet-
Brains YouTrack 2019.3.62973, Joomla 3.9.18, Kibana 7.5.1,
Kong Admin UI 0.4.1, Kubeapps 1.9.0, Let’s Chat 0.4.8, Lif-
eray 7.2.1, LimeSurvery 4.2.5, Live Helper Chat 3.27, Lo-
tusCMS 3.0.5, Magento 2.3.5, Mahara 19.10.1, Mantis 2.24.1,
Matomo 3.13.1, Mattermost 5.14.0, Mautic 2.16.2, Medi-
aWiki 1.34.1, Moalyss 7.3.0.0, Modx 2.7.3pl, Moodle 3.8.3,
MyBB Forum 1.8.22, Neos 5.2.0, OXID eShop 6.2.1, Odoo
13.0.20200515, Open Atrium 2.646, Open edX ironwood.2.8,
OpenCart 3.0.3.2, OpenProject 10.5.1, Openﬁre 4.4.4.1, Or-
angeHRM 4.4, OroCRM 4.1.4, Osclass 3.9.0, Parse Server
4.2.0, ParseDashboard 2.0.5, Phabricator 2020.21, Pimcore
6.6.4, Plone 5.2.1, Pootle 2.8.2, PrestaShop 1.7.6.2, Process-
Maker Community 3.3.6, ProcessWire 3.0.148, Prometheus
2.18.1, Publify 9.1.0, Re:dash 8.0.0, Redmine 4.1.1, Re-
port Server Community 3.1.1.6020, Report Server Enterprise
3.1.1.6020, ResourceSpace 9.2.14719, ReviewBoard 3.0.17,
Roundcube 1.4.5, SEO Panel 4.3.0, Shopware 6.1.0, Silver-
stripe 4.5.2, Simple Machines Forum 2.0.17, SonarQube
8.2.0.32929, Spree 4.1.6, SugarCRM 6.5.13, SuiteCRM 7.1.1,
TestLink 1.9.20, Tiki Wiki CMS Groupware 21, Tiny Tiny
RSS 202006, Trac 1.5.1, Typo3 10.4.3, Weblate 4.0.3, Web-
mail Prop PHP 8.3.20, Wordpress 5.4.1, Xoops 2.5.10, Zurmo
3.2.7, eXo Platform 5.3.0, ownCloud 10.4.1, phpBB 3.3.0,
phpList 3.5.4, and phpMyAdmin 5.0.1.
B.2 Run-time Performance of JAW
We deployed the web applications under evaluation on a desk-
top computer (running MacOS Mojave 10.14.3 on an Intel
Core i5 with 2.4 GHz, 16 GB RAM, and a SSD), and per-
formed the data collection step (§4.1). We let JAW run for a
maximum of 24 hours on each web application, although after
a few hours the data collection module typically does not ﬁnd
any new URLs. Then, we imported the collected data on our
own server (running Ubuntu 18.04 on an Intel(R) Xeon(R)
CPU E5-2695 v4 with 2.10 GHz and 72 cores, 252 GB RAM),
and instantiated JAW with the data to ﬁnd client-side CSRF
vulnerabilities. We log all processing times for throughput
evaluation. Figure 6 depicts the average processing time for
each tool component in order to construct and analyze a HPG.
As shown in the ﬁgure, the processing time increases as the
LoC grows. The least time consuming operations are AST
and intra-procedural CFG construction. JAW also a incurs
a preparation delay in order to import the constructed prop-
erty graph into a Neo4j database which typically lasts around
8-11 seconds based on the LoC. The most time consuming
operation is the semantic type propagation.
2542    30th USENIX Security Symposium
USENIX Association