# CI/CD 流水线：实践
> 原文：
## 基于 Jenkins 的 CI/CD 管道
Jenkins 是一个用于编排 CI/CD 管道的开源持续集成服务器。它支持与多个组件、基础设施(如 git、云等)的集成。这有助于完成软件开发生命周期。
在这个动手实验中，让我们:*为一个简单的 java 应用创建一个构建管道(CI)。*添加测试阶段以构建管道
本次实践基于在本地工作站 docker 上运行的 Jenkins，它是为 Windows 操作系统设计的。对于 Linux 操作系统，请遵循[演示](https://www.jenkins.io/doc/tutorials/build-a-java-app-with-maven/)
**注意:**动手实验是由 docker 上的 Jenkins 设计的。但是，这些步骤也适用于在 windows 工作站上直接安装 docker。
### 安装 Git、Docker 和 Jenkins:
*   在您的工作站上安装 git 命令行工具。(按照[这个](https://suwebdev.github.io/wats-lab-faq/first-question.html#download-and-install-git)在本地安装 Git)
*   Docker Desktop for windows 安装在工作站上。按照[说明](https://docs.docker.com/docker-for-windows/install/#install-docker-desktop-on-windows)安装 docker。
*   确保您的 Docker for Windows 安装配置为运行 Linux 容器而不是 Windows 容器。有关切换到 Linux 容器的说明，请参见 Docker 文档。
*   [参考](https://www.jenkins.io/doc/tutorials/build-a-java-app-with-maven/#on-windows)运行并设置 docker 上的 Jenkins。
*   通过创建管理员用户等初始步骤配置 Jenkins。遵循安装向导。
*   如果您已经在本地工作站上安装了 Jenkins，请确保安装了 maven 工具。按照这个来安装 maven。
### 派生示例 java 应用:
为了实际操作，让我们从 GitHub[simple-java-maven-app](https://github.com/jenkins-docs/simple-java-maven-app)派生一个简单的 Java 应用。1.注册 GitHub 账号[加入 GitHub GitHub](https://github.com/signup?source=login) 。注册后，进入[登录](https://github.com/login)。2.点击这个[链接](https://github.com/jenkins-docs/simple-java-maven-app) 3，打开 simple-java-maven-app。在右上角，点击“叉”创建一个项目的副本到你的 GitHub 帐户。(参见[叉一个回购](https://help.github.com/articles/fork-a-repo/) ) 4。一旦分叉，将这个存储库克隆到您的本地工作站。
### 创建 Jenkins 项目:
1.  使用之前在 Jenkins 设置期间创建的管理员帐户登录到 Jenkins 门户网站 [http://localhost:8080](http://localhost:8080) 。
2.  首次登录时，将出现以下屏幕。点击**创建一个任务**。
![](img/da164e491c6bf4711aaf3ddb26b83801.png)
*图 4:詹金斯——创造一份工作*
1.  在下一个屏幕上，在**输入项目名称**字段中输入 *simple-java-pipeline* 。从项目列表中选择*管道*，点击*确定*。
![](img/6a931d808a5a09b95fe05e4ba90a10ad.png)
*图 5:詹金斯-创建管道*
1.  点击页面顶部的**管道**选项卡，向下滚动到*管道*部分。
2.  从**定义**字段，选择来自 SCM 选项的*管道脚本。该选项指示 Jenkins 从源代码控制管理(SCM)获取您的管道，这将是您本地克隆的 Git 存储库。*
3.  从 **SCM** 字段中选择 *Git* 。
4.  在**存储库 URL** 字段中，从上面的[派生示例 Java 应用](#forking-sample-java-application:)部分指定本地克隆的存储库的目录路径。
输入详细信息后，屏幕如下所示。
![](img/8a97bdfa207661707b807203caac5d90.png)
*图 6:詹金斯管道配置*
### 使用 Jenkinsfile 创建生成管道:
**Jenkinsfile** 是一个脚本文件，包含管道配置和阶段以及 Jenkins 从文件创建管道的其他指令。该文件将保存在代码库的根目录下。1.使用您最喜欢的文本编辑器或 IDE，在本地*simple-Java-maven-app*Git 存储库的根目录下创建并保存一个名为 *Jenkinsfile* 的新文本文件。2.复制以下声明性管道代码，并将其粘贴到空的 *Jenkinsfile* 中。
```sh
pipeline {
    agent {
        docker {
            image 'maven:3.8.1-adoptopenjdk-11' 
            args '-v /root/.m2:/root/.m2' 
        }
    }
    stages {
        stage('Build') { 
            steps {
                sh 'mvn -B -DskipTests clean package' 
            }
        }
    }
} 
```
**注意:**如果您在没有 docker 的本地工作站上运行 Jenkins，请将代理更改为如下所示的 **any** ，以便它在本地主机上运行。请确保 maven 工具安装在您的本地工作站上。
```sh
pipeline {
    agent any
    stages {
        stage('Build') { 
            steps {
                sh 'mvn -B -DskipTests clean package' 
            }
        }
    }
} 
```
在上面的 Jenkinsfile 中:*我们指定了管道应该运行的代理。代理部分中的“docker”指示使用指定的映像运行新的 docker 容器。*在“阶段”部分，我们可以将多个步骤定义为不同的阶段。这里，我们有一个称为“构建”的阶段，使用 maven 命令来构建 java 应用。
1.  保存您的 Jenkinsfile 并提交和推送至您的分叉存储库。从命令提示符运行以下命令。
```sh
cd 
git add .
git commit -m "Add initial Jenkinsfile"
git push origin master 
```
1.  在您的浏览器上进入 Jenkins portal，点击**仪表板**。打开 [simple-java-pipeline](http://localhost:8080/job/simple-java-pipeline/) ，从左侧菜单中点击 **Build Now** 。
![](img/9789233004863dd006276de25548f799.png)
*图 7:詹金斯-建立管道*
1.  注意在 **Build History** 菜单下运行的构建。点击*的建造号*，它会显示各个阶段。
![](img/9481c69bbd2864cca1ccd6c16b285a5a.png)
*图 8: Jenkins -查看运行构建*
1.  我们已经成功地创建了一个包含单个阶段的构建管道并运行了它。我们可以通过点击**控制台输出**菜单来检查日志。
### 构建管道中的其他阶段:
在上一节中，我们已经创建了具有单个阶段的管道。通常，您的 CI 管道包含多个阶段，如构建、测试和其他可选阶段，如代码扫描等。在本节中，让我们向构建管道添加一个测试阶段并运行。
1.  返回到您的文本编辑器/IDE，打开 Jenkinsfile 和下面显示的测试阶段。
```sh
stage('Test') {
            steps {
                sh 'mvn test'
            }
            post {
                always {
                    junit 'target/surefire-reports/*.xml'
                }
            }
        } 
```
添加测试阶段后，Jenkinsfile 如下所示。
```sh
pipeline {
    agent {
        docker {
            image 'maven:3.8.1-adoptopenjdk-11' 
            args '-v /root/.m2:/root/.m2' 
        }
    }
    stages {
        stage('Build') { 
            steps {
                sh 'mvn -B -DskipTests clean package' 
            }
        }
        stage('Test') {
            steps {
                sh 'mvn test'
            }
            post {
                always {
                    junit 'target/surefire-reports/*.xml'
                }
            }
        }
    }
} 
```
*   这里添加了运行 maven 命令测试的阶段“Test”。
*   **后>总是**部分确保该步骤总是在步骤完成后执行。测试报告可通过 Jenkins 的界面获得。
**注意:**如果您在没有 docker 的本地工作站上运行 Jenkins，请将代理更改为 **any** ，以便它在本地主机上运行。请确保 maven 工具安装在您的本地工作站上。
```sh
pipeline {
    agent any
    stages {…
    }
} 
```
1.  保存您的 Jenkinsfile 并提交和推送至您的分叉存储库。从命令提示符运行以下命令。
```sh
cd 
git add .
git commit -m "Test stage is added to Jenkinsfile"
git push origin master 
```
1.  在您的浏览器上进入 Jenkins portal，点击**仪表板**。打开 *simple-java-pipeline* ，从左侧菜单中点击 Build Now。
2.  注意构建和测试阶段显示在构建屏幕中。
![](img/6fed1f9957cd272b2af37aeb18c30ed2.png)
*图 9: Jenkins -查看包含测试阶段的运行构建*
我们现在已经成功地创建了包含两个阶段的 CI 管道:构建和测试阶段。