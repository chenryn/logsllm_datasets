ﬁrst pass, for every entry e represented by key  (where
p1 and p2 represent preﬁxes) with preﬁx lengths  we add
l1 = UPDATE 1D(trie1; key1; value)
l2 = UPDATE 1D(trie2; key2; value)
if (l1 (cid:21) 0 ^ l2 (cid:21) 0 )
1 void UPDATE CP(key1; key2; value)
2
3
4
5
6
7
8
p1 = preﬁx(key1; l1)
p2 = preﬁx(key2; l2)
H[l1][l2].update(; value)
endif
Figure 6: The update operation for Cross-Producting involves
two 1-dimensional trie updates and one hash table update.
the volume associated with e to its left parent in the hash-map rep-
resented by key  and lengths .
Note that we start from entries with the largest l1 and end with en-
tries with the smallest l1. Then in the second pass, we add the vol-
ume to right parent represented by the key 
and lengths . This time we start from entries with the
largest l2 and end with entries with the smallest l2.
Estimating the missed trafﬁc for each node.
The algorithm is
as follows. For each key (recall that the key is made up of the des-
tination preﬁx and the source preﬁx) in the hash table traverse the
individual tries to ﬁnd the preﬁx represented by the key and return
the missed trafﬁc estimate obtained from the node (by applying ei-
ther the copy-all, or the splitting rule as described in Section 3.2).
The missed trafﬁc is then estimated as the maximum of the two es-
timates returned by the two 1-d tries. Using the maximum preserves
the conservativeness of copy-all.
3.4 Grid-of-Tries and Rectangle Search
The proposed scheme using the Cross-Producting technique is
very efﬁcient in time, however it can be potentially memory inten-
sive in the worst case. We try to overcome this drawback by adapting
two other well known algorithms for two-dimensional packet classi-
ﬁcation to our problem: Grid-of-Tries and Rectangle Search [33].
Just like Cross-Producting, both Grid-of-Tries and Rectangle Search
have been applied in the packet classiﬁcation context. This is not a
coincidence. Conceptually, if we view each node as a rule, then ﬁnd-
ing nodes on the fringe becomes a packet classiﬁcation problem.
However most packet classiﬁcation algorithms are optimized for
a relatively static rule set (through pre-computation), whereas in our
context, we may need to dynamically maintain the fringe set. This
may involve updating n nodes and possibly creating n new nodes.
Despite the clear difference, we are able to adapt Grid-of-Tries and
Rectangle Search to solve our problem. Since both algorithms have
been well documented in the literature, we will only illustrate the ba-
sic idea and highlight the main difference. Interested readers should
refer to [33, 31, 2] for further details on these algorithms.
3.4.1 Grid-of-Tries
The grid-of-tries data structure has been introduced by Srinivasan
et al. [33] as a solution to the 2-dimensional packet classiﬁcation
problem. The data structure contains two levels of tries. The ﬁrst
level is associated with the IP destination preﬁxes in the classiﬁer (a
predeﬁned rule set) while the second level tries are associated with
IP source preﬁxes in the classiﬁer.
For every valid preﬁx (P1) node in the ﬁrst level trie there is a
pointer to a second level trie. The second level trie is created using
all the preﬁxes (P2) for which there is a rule P1,P2 in the classiﬁer.
For a complete description the reader is kindly directed to [33, 2].
As in the 1-dimensional HHH detection case, our grid-of-tries data
structure is dynamically built based on the packet arrival pattern.
Constructing grid-of-tries for 2-d HHH detection. Each node in
the data structure contains a pointer to each of its children. In addi-
tion each node in the ﬁrst-level trie maintains a pointer to a second-
level trie and each node in the second-level trie maintains a jump
pointer (details to follow) for fast trie traversal. The thing to note is
that there is only one ﬁrst-level trie, but multiple second-level tries.
Speciﬁcally, there is a second-level trie for each node in the ﬁrst-
level trie. Each node also stores a volume ﬁeld associated with the
volume of trafﬁc that corresponds to all the packets having a preﬁx
equal with the preﬁx of the node from the moment that the node is
created till the moment when new child nodes are associated with
the node.
Let us assume the existence of a current grid-of-tries structure at
the given moment. New nodes and tries may be appended to the
current grid-of-tries with the arrival of a new packet. First, a longest
matching preﬁx (LMP) operation is executed in the ﬁrst-level trie
(using the destination preﬁx). A fringe node is always identiﬁed.
Then same as in the case of our 1-d trie algorithm (described in sec-
tion 3.2) if the volume associated with this node becomes greater
than Tsplit then a new child node is created and associated with this
node. As in the 1-d algorithm, the size of the current packet is used
to initialize the volume ﬁeld for the newly created child node. In
addition to adding child nodes in the ﬁrst-level trie, in our 2-d algo-
rithm we must also initialize and associate a new second-level trie
with each one of these newly created children. These second-level
tries when ﬁrst created are only initialized with a root node. The
size of the current packet is used to increment the volume associated
with the second-level trie that is associated with the new LMP in the
ﬁrst-level trie.
The arrival of a packet may also result in a situation where the
node represented by the LMP in the second-level trie exceeds Tsplit.
In this case a new child is created and associated with this node
in the second-level trie in a way similar to the 1-dimensional HHH
detection node creation process.
Every packet that arrives may contribute to multiple updates in the
volume ﬁeld of the nodes in the second dimension tries. To illustrate
the update process let us consider the example in Figure 7, and the
arrival of a packet with destination IP preﬁx 000(cid:3), and source IP
preﬁx 111(cid:3) with a size of 4 bytes. Tsplit is set to 10 for this illustra-
tion. Figure 7 represents the grid-of-tries data structure at the time
of the packet arrival. For the moment ignore the dotted lines in the
ﬁgure. This arriving packet contributes to a modiﬁcation in the value
of the volume ﬁeld in each one of the second-dimension tries asso-
ciated with the LMP node in the ﬁrst-dimension and all ancestors of
this LMP node. Figure 8 shows the data structure after the update
operation. The nodes that are affected by the update are shown in
grey. To walk through the process, ﬁrst a LMP operation was done
in the ﬁrst-level trie using the ﬁrst preﬁx 000(cid:3), and the value of the
volume ﬁeld associated with this LMP node is increment. We next
follow the pointer to the second-level trie. Again we do a LMP op-
eration in the second-level trie using the second preﬁx 111(cid:3). Our
search terminates with the node for preﬁx 1(cid:3). If we were to add the
size of the current packet to the volume associated with this node it
would increase beyond Tsplit. We therefore create a new child node
for this node. The size of the current packet is used to initialize the
volume associated with the new child node for preﬁx 11(cid:3) as this new
node now represents the LMP. We must also update the second level
tries associated with all the less speciﬁc preﬁxes of 000(cid:3) namely
00(cid:3), 0(cid:3) and (cid:3).
In order to provide a fast update operation, each fringe node in the
second-level trie contains a pre-computed jump pointer. Each fringe
node in a second-level trie T2 for preﬁx P2 originating at preﬁx P1
in the ﬁrst-level trie maintains a jump pointer to the same preﬁx P2
in a second-level trie that is associated with the direct ancestor of
P1. Note that the jump pointer discussed here can be maintained
dynamically – whenever we create a node in the second-level trie
associated with P1, we also create a node for the second-level trie
associated with the direct ancestor of P1 (if not already present). In
contrast, schemes discussed in the packet classiﬁcation context are
more complicated and require precomputation [2]. Utilizing jump
pointers allows us to keep the time complexity within O(W ) as dur-
9
0
5
7
0
1
8
0
8
9
1
8
1
7
8
2
1
7
0
1
1
5
9
1
6
1
4
(0,0)
1
(0,W)
3
(W,0)
28
21
7
(W,0)
(0,0)
5
6
8
4
65
(a) before update
(b) after update
(W,W)
(0,W)
(W,W)
(0,0)
(W,0)
Figure 7: The grid-of-trie data structure at the time of a packet
arrival. One can see a second-level trie is associated (connected
by dotted lines in the ﬁgure) with each node in the ﬁrst level
trie. The dashed lines represent jump pointers (which are always
between nodes with the same source preﬁx).
9
0
(0,W)
(c) movement
(W,W)
5
7
0
1
8
0
1
8
1
7
8
6
8
9
1
4
1
7
9
0
1
1
6
1
9
8
Figure 8: The grid-of-trie data structure after the update oper-
ation. The nodes to which we add the size of the current packet
are shown in grey. The dashed lines represent jump pointers
(which are always between nodes with the same source preﬁx).
ing the update process we can avoid having to restart the longest
preﬁx matching problem at the root of every second-level trie (recall
that we need to update every second-level trie associated with all an-
cestors of the longest matching preﬁx node in the path between the
node and the root of the ﬁrst-level trie). The dashed lines in Figure 7
and 8 represent jump pointers.
To ensure we only miss (cid:15)SU M trafﬁc in the worst case, we need
to choose Tsplit = (cid:15)SU M=(2W ). The space requirement is O(W 2(cid:1)
(2W )=(cid:15)) = O(2W 3=(cid:15)).
3.4.2 Rectangle Search
Rectangle Search [33] is another classic solution proposed for
2-dimensional packet classiﬁcation. Like Grid-of-Tries, it can be
adapted to solve the 2-dimensional HHH detection problem.
Conceptually, Rectangle Search does exactly the same thing as
Grid-of-Tries – updating all the elements on the fringe and expand-
ing it whenever necessary. The major difference lies in how the al-
gorithm locates all the elements on the fringe. Grid-of-Tries does
so using jump pointers. In the worst case, it requires 3W memory
accesses, where W is the width of the key. Rectangle Search uses
hash tables instead and requires 2W (hashed) memory accesses in
the worst case.
The basic data structure for Rectangle Search is a set of hash ta-
bles arranged into a 2-dimensional array. More speciﬁcally, for each
destination preﬁx length l1 and source preﬁx length l2, there is an
associated hash table H[l1][l2]. Initially, only H[0][0] contains an
element  with volume 0.
The update operation for a new tuple  (with value
v) is illustrated in Figure 3.4.2. We ﬁrst consider the case when
v is below Tsplit, which is the common case as the total number
Figure 9: The update operation for rectangle search. The fringe
nodes are in dark shade, and the internal nodes are in light
shade. When a new tuple  (with value v) arrives, we
start from the bottom left corner and move towards the upper
right corner. Tsplit is set to 10. So a new element gets created.
of elements above the Tsplit is limited. The algorithm starts with
(l1; l2) = (0; W ) (the lower left corner in Figure 3.4.2(c)). During
each step, the algorithm checks if tuple  belongs to the
hash table H[l1][l2], where pi = pref ix(ki; li).
If 
does not exist in H[l1][l2], we simply decrement l2 by 1 (i.e., move
upwards in Figure 3.4.2(c)) and continue. Otherwise, we have found
an element e. If e is a fringe node and e:volume + v is below Tsplit,
we simply add v to e:volume. Otherwise, either e is already an
internal node (when updating some other descendents of e) or should
become one after this update. In either case, we create a new element
with key  and value v and insert it into
H[l1][l2+1]. In case l2 = 0 and e becomes a new internal node, then
we also expand the fringe towards the right by creating an element
with the key  and inserting it into H[l1 +
1][l2]. We then increment l1 by 1 and continue (i.e., move towards
right in Figure 3.4.2(c)). The algorithm terminates whenever either
l1 > W or l2  with value v above Tsplit, we will create state for all its
ancestors  if they do not already exist. Such express
expansion of the fringe has the advantage that it leads to less missed
trafﬁc for the fringe nodes and thus higher accuracy. However, it also
requires a lot of space, especially when Tsplit is very small and there
are a large number of items with value above it (this can happen, for
instance, when the maximum depth of the trie is large). Here we
l1 = 0;
while ( l1 (cid:20) W ^ l2 (cid:21) 0 )
l2 = W ; // lower left corner
p1 = pref ix(k1; l1); p2 = pref ix(k2; l2)
e = H[l1][l2]:lookup()
if ( undeﬁned(e) )
l2(cid:0)(cid:0) // moving upwards
else
1 void UPDATE RS(k1, k2, v)
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
endif
endwhile
if (e:fringe ^ e:volume + v < Tsplit)
// e remains a fringe node
e:volume+ = v
else // e becomes internal
insert an element into H[l1][l2 + 1]
if (e:fringe ^ l2 = 0)
insert an element into H[l1 + 1][l2]
endif
e:fringe = f alse
endif
l1++ // moving towards right
Figure 10: The update operation for Rectangle Search.