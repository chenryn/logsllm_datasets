tioning process is conducted using program analysis. The
third stage is tumor code resection. The main purpose of
this stage is to resect the tumor payload, and patch the be-
nign code of the APK to prove the correctness of the normal
control ﬂow. Final stage, the puriﬁed APK is veriﬁed and
the eﬀect of tumor payload resection is measured.
3.1 The APKLancet System
APKLancet fulﬁls tumor payload excision task. The AP-
KLancet system contains three main components: APK an-
alyzer, APK rewriter and APK veriﬁer.
3.1.1 APK Analyzer
The APK analyzer of APKLancet is used to analyze APK
ﬁle comprehensively. The implementation is based on An-
droguard[11]. The APK analyzer parses manifest ﬁle and
resource ﬁles to acquire declaration information of an app.
Relying on a feature database built from existing knowledge
of tumor payload, it then locates suspicious code fragment
and partitions the entire tumor code payload according to
the results from smali code analysis. Moreover, it analyzes
the type of tumor payload and conducts a patching process
to prove the puriﬁed APK work properly.
3.1.2 APK Rewriter
The APK rewriter is responsible for unpacking and de-
compiling APK ﬁle, and repacking the puriﬁed ﬁle into a
new app.
It is mainly based on APKtool[4]. The APK
Figure 1: APK puriﬁcation process
rewriter ﬁrst unpacks the target APK ﬁle and decompiles
the executable part into smali code, decoding manifest ﬁle
and related resource ﬁles for the APK analyzer. Then, it re-
ceives the analyzing results from the APK analyzer, resects
the tumor payload and repairs the ”incision” in remained
benign part. Finally, it reassembles the puriﬁed ﬁles into a
new app.
3.1.3 APK Veriﬁer
The APK veriﬁer is mainly an automatic Android logging
system to record and analyze app’s execution status.
It
validates the puriﬁed app through dynamically recording its
log output and corresponding events such as network access,
and captures any possible exception that is introduced.
3.2 APK Diagnosis
To detect suspicious tumor payload, APKLancet conducts
an approach that relies on existing knowledge database rather
than analyzing the characteristics. The reason is that resect-
ing tumor code from an app is aggressive and risky compared
with solely detecting it. Any improper code resection will
damage the benign function. What’s worse, the eﬀect of
code resection may not be detected immediately but after-
wards. Therefore, the strategy APKLancet adopts should
be extremely conservative to prove that the diagnosis will
not suﬀer from false positive.
To meet this requirement, APKLancet diagnoses an app
using the existing knowledge of tumor payload. It ﬁrst builds
a tumor payload feature database summarized from known
malicious code and popular third-party libraries. For mali-
cious code, we have collected more than 8000 malware sam-
ples with 184 malware families from an automatic Android
program analysis sandbox[6]. To build the database, we ﬁrst
randomly choose one app or two from each malware family
and extract the feature. Then we use the knowledge to guide
APKLancet to detect malicious payload in other malwares.
For third-party libraries, we deﬁned the tumor libraries af-
ter investigating popular ad libraries and analytics plugins
since these libraries are more likely to be injected into benign
apps for the proﬁt. However, considering it may cause the
result that legitimate apps bundled with tumor third-party
libraries will also be the target of our system, we leave the
issue discussed in Section 5.
The content of the database is the representative code
fragment, as we called index class, of those tumor payloads.
In the following, we discuss the details about extracting in-
dex class from malicious code and tumor libraries.
• Malicious Code. An index class of malware is respon-
sible for certain events or functions connected to the
malicious behaviors of the tumor payload. The ad-
vantage of building the feature database according to
index classes instead of the whole payload is that it
is common to malware that generating new variants.
Even the tumor payload may be various, the index
classes of one malware family are generally unchanged.
Thus scanning these kinds of classes in tumor payload
is essential for extracting feature.
Since malicious code injecting aims to aﬀect as much
apps as possible, tumor payload of malware usually
registers its own class as an entry point for convenience
to assure it could be executed in most cases, which can
avoid manual analysis to various app victims. Unlike
application on traditional commodity computer plat-
form, an Android application can have multiple entry
points. APKLancet focuses on ﬁve types of classes (in-
cluding inherited types) that can be registered as entry
point. The ﬁrst four are the basic components of An-
droid: Activity, Service, Broadcast Receiver and Con-
tent Provider. The ﬁnal class type, android.app.Applic-
APPWith Tumor PayloadPatched    ...    new-array     const/4     const     aput    const/16    if-lt v0    new-instance    invoke-direct     sput-object    sget    ... v    ...    new-array     const/4     const     aput    const/16    if-lt v0    new-instance    invoke-direct     sput-object    sget    ...     ...    new-array     const/4     const     aput    const/16    if-lt v0                      sput-object    sget    ... FindingReference ofTumorCodePatchingReference of Tumor PayloadApk RewritingPurified AppVerificationValidated AppPassedIndexDiagnosisPartitioningExcisionation, is the appointed class type of an app’s main
entry point and also considered in feature extracting.
APKLancet only needs to scan these classes in a tumor
payload and adds them into the tumor code feature
database.
• Third-party Library. Unlike the malicious code, tumor
third-party libraries such as popular ad libraries and
analytic plugins are always well-documented, developer-
friendly and less irregular. As a result, they usually
oﬀer a set of uniﬁed interfaces to developers for ease
of use.
It is not diﬃcult for us to construct the tu-
mor code feature database by selecting some of the
most typical classes in the single library as the index
classes(i.e., AdView in AdMob).
After constructing the feature database, APKLancet checks
every class of an app that is one of the ﬁve entry point classes
or representative classes of third-party libraries to ﬁnd out
the clue of tumor code. Diﬀerent from signature-based de-
tection of the malicious code that is frequently used in An-
tivirus, APKLancet compares the content of a class of the
app with the feature database to identify the existence of
any tumor code. In order to defeat the widely used code ob-
fuscation technique, APKLancet leverages the fuzzy hashing
content comparison technique proposed by DroidMOSS[23]
to detect whether a class in an app is similar to one of the
tumor classes in our database. If such a class is detected,
APKLancet will label it as the index class to help conduct
tumor payload partitioning in the next stage.
3.3 Tumor Payload Partitioning
After obtaining suspicious index classes, the next thing is
to partition all of the tumor payload inside an app. In de-
tail, the task is to identify the entire tumor payload including
inserted executable code and its corresponding declaration
in manifest ﬁle, extra injected resource ﬁles and additional
libraries. To fulﬁl this task, APKLancet makes use of pro-
gram analysis technique to traverse the entire payload from
the detected index classes. According to the type of tumor
code, APKLancet deals them with diﬀerent strategies.
3.3.1 Third-party Library Partitioning
The method APKLancet partitions third-party library is
mainly based on the knowledge of its insertion style.
In
most cases, third-party library is a relatively independent
module which allows the partitioning with feasibility. The
bundling of a third-party library generally involves adding
three categories of information: a supporting Java jar ﬁle,
special meta-data tag, possible elements declared in layout
XML ﬁles and a small amount of modiﬁcation to the original
code mainly for inserting new advertising View class.
Because library provider more or less publishes document
to illustrate how to integrate the lib into an app, APKLancet
leverages this information for partitioning the inserted li-
brary with ease. The inserted libraries are usually Java jar
ﬁles attached to the APK and can also be decompiled. If AP-
KLancet identiﬁes suspicious index class in these libraries,
the whole Java jar ﬁle is labeled as the tumor payload (i.e.,
the whole package com.google.ads.* ). APKLancet further
labels the inserted instructions in benign classes according
to the reference relationship. In general, each class of benign
code is searched to ﬁnd any reference to any of the whole
tumor libraries. For instance, an AdView class is created as
follows:
adView = new AdView(this);
adView.setAdUnitId(MY_AD_UNIT_ID);
adView.setAdSize(AdSize.BANNER);
APKLancet could recognize the reference relationship of the
class AdView with the payload library, and hence label these
instructions(in smali code) as part of the tumor payload.
Finally, the meta-data tag and the elements in resource ﬁles
are also labeled as part of the tumor payload.
3.3.2 Malicious Code Partitioning
For malicious code in an infected app, the situation is
much more sophisticated. Unlike the situation of third-party
library, systematic knowledge is lacked in partitioning mali-
cious code. There is no document information for malicious
code and it usually uses transformation technique to avoid
being detected. Furthermore, instead of being injected as
an independent Java package (as the style of third-party li-
braries bundling), malicious payload is sometimes injected
into an existing Java package of benign parts to make the
identiﬁcation more diﬃcult, even the payload is still a rela-
tively independent module from the viewpoint of function-
ality. Hence APKLancet makes use of program dependency
analysis technique to help partition. APKLancet uses Al-
gorithm 1 to search malicious code in an APK. The input
of the algorithm include a set O of all classes in an APK
and a set E containing the already identiﬁed malicious in-
dex classes. The output is a set M that contains the entire
malicious class payload. The core part of the algorithm is
the function F ind invoke dest().
It is based on the pro-
gram dependency graph of the app to extend the malicious
class set. If the already identiﬁed malicious class invokes any
method of a class that is not in system library, the invoked
class should be added into the malicious class set.
Algorithm 1 Malicious Code Class Searching
Require:
The set of class in an APK, O;
The set of malicious class in O, E;
Ensure:
The set of malicious code class, M ;
for all m in M do
D ← F ind invoke dest(m);
end for
for all d in D do
1: M = E
2: repeat
3: D = ∅
4:
5:
6:
7:
8:
9:
10:
11:
12: until M is not modiﬁed
13: return M ;
end if
end for
if d in O AND d not in M then
M ← d
We choose a Java class as the basic unit in the algorithm
for the reason that malicious payload is always composed
of several complete classes.
It is more likely for malware
to construct a new class to perform malicious behavior in-
stead of adding some malicious methods to speciﬁc benign
classes because adding independent module is more suitable
for large-scale deployment and needs less complicated man-
ual analysis to various original apps to assure the modiﬁed
apps still work.
3.4 Tumor Payload Resection
Although during tumor code partitioning stage an entire
payload has been identiﬁed, tumor payload resection is non-
trivial compared with the permission removal of app[16]. A
payload contains both relatively independent third-party li-
braries and bundled code that is tightly interweaved with
the host class. Therefore, simply resecting the entire pay-
load will lead to an improper execution or even crash the
app. Thus after partitioning tumor code payload, there still
remains ﬁxing work to be done. The key point is to repair
the inserted code in benign code and information in the man-
ifest ﬁle. APKLancet adopts a three-step repairing strategy,
which is introduced in the following subsections.
3.4.1 Entry Point Reverting
An app declares many kinds of information in its mani-
fest ﬁle. An inserted tumor code payload also declares its
components in this ﬁle and adds or modiﬁes entry points. In
detail, we consider the following frequently used entry point
modiﬁcation approaches:
1. Directly added entry point. Tumor payload will di-
rectly register new Service, Broadcast Receiver and
Activity in manifest ﬁle. Under certain condition, the
tumor payload class is invoked.
2. Main entry point tampering. Some tumor code sim-
ply changes the original app’s main entry point class
(declared in the manifest ﬁle’s  tag or
changed the ACTION MAIN Intent) to its own class.
Through tampering the execution ﬂow, it makes sure
that the inserted module is invoked.
3. Entry point inheritance modiﬁcation. One trick used
by malicious code is to hide malicious entry point class
through class inheritance.
In this case, the original
main entry point class is kept and malicious classes
can hide themselves without being declared in mani-
fest ﬁle. However, the inheritance relationship of main
entry point class is modiﬁed. For instance, in Fig 2
the entry point class com.normal.Activity is originally
inherited from android.app.Activity, after the infection
its superclass is changed to com.mal.Activity which is
a malicious class. When the entry point class is exe-
cuted, the malicious function in its super class is ﬁrstly
invoked.
In order to make a ﬁxed app work properly, APKLancet
needs to handle manifest ﬁle to resect the entry point items
related to tumor payload. Moreover, if the main entry point
class is modiﬁed to be a tumor code class, APKLancet tries
to recover the main entry point through searching a launcher
class. Once a launcher class is found, APKLancet will use it
as the new main entry point class. If no launcher class can
be found, APKLancet will further search for benign Activity
referred by current entry point class code, and uses the ﬁrst
found Activity as new entry point class.
If again there is
no candidate, APKLancet uses the ﬁrst Activity declared
in manifest ﬁle as the new entry point class. For the case
of Entry point inheritance modiﬁcation, we need to ﬁnd the
Figure 2: Entry Point Class Inheritance Modiﬁca-
tion
ﬁrst super class of the original entry point class which is not
in the tumor payload(i.e., android.app.Activity in Fig 2),
and recover the inheritance relationship.
3.4.2 Benign Code Patching
APKLancet can identify every invoke instruction in de-
compiled smali code and check whether a benign code class
invokes a method of tumor code class. Further, the invoking
can be divided into two cases: 1) the invoked method is an
inherited method that overwrites the base method, and it
belongs to a class of entry point class type (inherits from
Activity, Service, Broadcast Receiver, Content Provider or
Application class), 2) the invoked method belongs to a com-
mon class of tumor code payload.
For the ﬁrst case, the invoked methods in tumor code
generally overwrite the methods of base class (such as on-
Create()) and are special for Android application execution
model. Resecting this kind of methods will crash the app. In
this situation, APKLancet will replace the invoked methods
in tumor code class with the methods of its direct base class
(already ﬁxed in inheritance recovery). For the second case,
we consider the invoking instruction and its data-dependent
instructions are inserted. Therefore, APKLancet analyzes
the following instructions that depend on the return value
of this invoking instruction, and patches the invoking in-
struction as well as following data-dependent instructions
with nop instruction.
APKLancet will also scan the decompiled smali code to
ﬁnd any object reference relationship between benign code
class and tumor code class. Again, if an object reference
is found, APKLancet uses data dependency analysis to ﬁnd
other instructions and objects that are data-dependent to
this object and then get it resected.
3.4.3 Payload Resection
After the ﬁxing of benign code classes, APKLancet re-
sects tumor code directly. In addition, APKLancet checks
resource ﬁles related to tumor code. Native libraries(.so) and
Java libraries(.jar) that are used by tumor code only, ﬁle
under the lib and assets directory that are only referred by
tumor code are all considered as part of the tumor payload,
and should be resected.
android.app.Activity;com.normal.Activity;com.mal.Activity;Tumor payload
ADRD
BaseBridge Variant.A
BaseBridge Variant.B
BaseBridge Variant.C