Deferred
SRV*c:\Symbols*http://msdl.micro\
soft.com/download/symbols
Symbol search path is: SRV*c:\Symbols*http://msdl.microsoft.com/download/symbols
Executable search path is:
Windows 10 Kernel Version 18362 MP (4 procs) Free x64
Product: WinNt, suite: TerminalServer SingleUserTS
Built by: 18362.1.amd64fre.19h1_release.190318-1202
Machine Name:
Kernel base = 0xfffff801`36a09000 PsLoadedModuleList = 0xfffff801`36e4c2d0
Debug session time: Sun Apr 21 11:28:09.669 2019 (UTC + 3:00)
System Uptime: 1 days 0:12:28.864
Break instruction exception - code 80000003 (first chance)
*******************************************************************************
*
*
*
You are seeing this message because you pressed either
*
*
CTRL+C (if you run console kernel debugger) or,
*
*
CTRL+BREAK (if you run GUI kernel debugger),
*
*
on your debugger machine's keyboard.
*
*
*
*
THIS IS NOT A BUG OR A SYSTEM CRASH
*
*
*
* If you did not intend to break into the debugger, press the "g" key, then
*
* press the "Enter" key now.
This message might immediately reappear.
If it *
* does, press "g" and "Enter" again.
*
*
*
*******************************************************************************
nt!DbgBreakPointWithStatus:
fffff801`36bcd580 cc
int
3
Note the prompt has an index and the word kd. The index is the current processor that induced the break.
At this point, the target VM is completely frozen. You can now debug normally, bearing in mind anytime
you break somewhere, the entire machine is frozen.
Chapter 5: Debugging and Tracing
108
Using the Network
In this section, we’ll configure full kernel debugging using the network, focusing on the differences
compared to the virtual COM port setup.
Configuring the Target
On the target machine, running with an elevated command window, configure network debugging using
the following format with bcdedit:
bcdedit /dbgsettings net hostip: port:  [key: ]
The hostip must be the IP address of the host accessible from the target. port can be any available port on
the host, but the documentation recommends working with port 50000 and up. The key is optional. If you
don’t specify it, the command generates a random key. For example:
c:/>bcdedit /dbgsettings net hostip:10.100.102.53 port:51111
Key=1rhvit77hdpv7.rxgwjdvhxj7v.312gs2roip4sf.3w25wrjeocobh
The alternative is provide your own key for simplicity, which must be in the format a.b.c.d. This is
acceptable from a security standpoint when working with local virtual machines:
c:/>bcdedit /dbgsettings net hostip:10.100.102.53 port:51111 key:1.2.3.4
Key=1.2.3.4
You can always display the current debug configuration with /dbgsettings alone:
c:\>bcdedit /dbgsettings
key
1.2.3.4
debugtype
NET
hostip
10.100.102.53
port
51111
dhcp
Yes
The operation completed successfully.
Finally, restart the target.
Configuring the Host
On the host machine, launch the debugger and select the File / Attach the Kernel option (or File / Kernel
Debug… in the classic WinDbg). Navigate to the NET tab, and enter the information corresponding to your
settings (figure 5-7).
Chapter 5: Debugging and Tracing
109
Figure 5-8: Attach to kernel dialog
You may need to click the Break button (possibly multiple times) to establish a connection. More in-
formation and troubeshooting tips can be found at https://docs.microsoft.com/en-us/windows-hardware/
drivers/debugger/setting-up-a-network-debugging-connection.
Kernel Driver Debugging Tutorial
Once host and target are connected, debugging can begin. We will use the Booster driver we developed in
chapter 4 to demonstrate full kernel debugging.
Install (but don’t load) the driver on the target as was done in chapter 4. Make sure you copy the driver’s
PDB file alongside the driver SYS file itself. This simplifies getting correct symbols for the driver.
Let’s set a breakpoint in DriverEntry. We cannot load the driver just yet because that would cause
DriverEntry to execute, and we’ll miss the chance to set a breakpoint there. Since the driver is not
loaded yet, we can use the bu command (unresolved breakpoint) to set a future breakpoint. Break into the
target if it’s currently running, and type the following command in the debugger:
0: kd> bu booster!driverentry
0: kd> bl
0 e Disable Clear u
0001 (0001) (booster!driverentry)
The breakpoint is unresolved at this point, since our module (driver) is not yet loaded. The debugger will
re-evaluate the breakpoint any time a new module is loaded.
Issue the g command to let the target continue execution, and load the driver with sc start booster
(assuming the driver’s name is booster). If all goes well, the breakpoint should hit, and the source file
should open automatically, showing the following output in the command window:
Chapter 5: Debugging and Tracing
110
0: kd> g
Breakpoint 0 hit
Booster!DriverEntry:
fffff802`13da11c0 4889542410
mov
qword ptr [rsp+10h],rdx
The index on the left of the colon is the CPU index running the code when the breakpoint hit
(CPU 0 in the above output).
Figure 5-9 shows a screenshot of WinDbg Preview source window automatically opening and the correct
line marked. The Locals window is also shown as expected.
Chapter 5: Debugging and Tracing
111
Figure 5-9: Breakpoint hit in DriverEntry
Chapter 5: Debugging and Tracing
112
At this point, you can step over source lines, look at variables in the Locals window, and even add
expressions to the Watch window. You can also change values using the Locals window just like you
would normally do with other debuggers.
The Command window is still available as always, but some operations are just easier with the GUI. Setting
breakpoints, for example, can be done with the normal bp command, but you can simply open a source
file (if it’s not already open), go to the line where you want to set a breakpoint, and hit F9 or click the
appropriate button on the toolbar. Either way, the bp command will be executed in the Command window.
The Breakpoints window can serve as a quick overview of the currently set breakpoints.
• Issue the k command to see how DriverEntry is being invoked:
0: kd> k
# Child-SP
RetAddr
Call Site
00 ffffbe88`b3f4f138 fffff802`13da5020
Booster!DriverEntry [D:\Dev\windowsk\
ernelprogrammingbook2e\Chapter04\Booster\Booster.cpp @ 9]
01 ffffbe88`b3f4f140 fffff802`081cafc0
Booster!GsDriverEntry+0x20 [minkerne\
l\tools\gs_support\kmode\gs_support.c @ 128]
02 ffffbe88`b3f4f170 fffff802`080858e2
nt!PnpCallDriverEntry+0x4c
03 ffffbe88`b3f4f1d0 fffff802`081aeab7
nt!IopLoadDriver+0x8ba
04 ffffbe88`b3f4f380 fffff802`07c48aaf
nt!IopLoadUnloadDriver+0x57
05 ffffbe88`b3f4f3c0 fffff802`07d5b615
nt!ExpWorkerThread+0x14f
06 ffffbe88`b3f4f5b0 fffff802`07e16c24
nt!PspSystemThreadStartup+0x55
07 ffffbe88`b3f4f600 00000000`00000000
nt!KiStartSystemThread+0x34
If breakpoints fail to hit, it may be a symbols issue. Execute the .reload command and see
if the issues are resolved. Setting breakpoints in user space is also possible, but first execute
.reload /user to force the debugger to load user-mode symbols.
It may be the case that a breakpoint should hit only when a specific process is the one executing the code.
This can be done by adding the /p switch to a breakpoint. In the following example, a breakpoint is set
only if the process is a specific explorer.exe:
0: kd> !process 0 0 explorer.exe
PROCESS ffffd1049e118080
SessionId: 1
Cid: 1780
Peb: 0076b000
ParentCid: 16d0
DirBase: 362ea5000
ObjectTable: ffffa58d45891680
HandleCount: 3918.
Image: explorer.exe
PROCESS ffffd104a14e2080
SessionId: 1
Cid: 2548
Peb: 005c1000
ParentCid: 0314
DirBase: 140fe9000
ObjectTable: ffffa58d46a99500
HandleCount: 4524.
Chapter 5: Debugging and Tracing
113
Image: explorer.exe
0: kd> bp /p ffffd1049e118080 booster!boosterwrite
0: kd> bl
0 e Disable Clear
fffff802`13da11c0
[D:\Dev\Chapter04\Booster\Booster.cp\
p @ 9]
0001 (0001) Booster!DriverEntry
1 e Disable Clear
fffff802`13da1090
[D:\Dev\Chapter04\Booster\Booster.cp\
p @ 61]
0001 (0001) Booster!BoosterWrite
Match process data ffffd104`9e118080
Let’s set a normal breakpoint somewhere in the BoosterWrite function, by hitting F9 on the line in
source view, as shown in figure 5-10 (the earlier conditional breakpoint is shown as well).
Figure 5-10: Breakpoint hit in DriverEntry
Listing the breakpoints reflect the new breakpoint with the offset calculated by the debugger:
Chapter 5: Debugging and Tracing
114
0: kd> bl
0 e Disable Clear
fffff802`13da11c0
[D:\Dev\Chapter04\Booster\Booster.cpp @\
9]
0001 (0001) Booster!DriverEntry
1 e Disable Clear
fffff802`13da1090
[D:\Dev\Chapter04\Booster\Booster.cpp @\
61] 0001 (0001) Booster!BoosterWrite
Match process data ffffd104`9e118080
2 e Disable Clear
fffff802`13da10af
[D:\Dev\Chapter04\Booster\Booster.cpp @\
65] 0001 (0001) Booster!BoosterWrite+0x1f
Enter the g command to release the target, and then run the boost application with some thread ID and
priority:
c:\Test> boost 5964 30
The breakpoint within BoosterWrite should hit:
Breakpoint 2 hit
Booster!BoosterWrite+0x1f:
fffff802`13da10af 488b4c2468
mov
rcx,qword ptr [rsp+68h]
You can continue debugging normally, looking at local variables, stepping over/into functions, etc.
Finally, if you would like to disconnect from the target, enter the .detach command. If it does not resume
the target, click the Stop Debugging toolbar button (you may need to click it multiple times).
Asserts and Tracing
Although using a debugger is sometimes necessary, some coding can go a long way in making a debugger
less needed. In this section we’ll examine asserts and powerful logging that is suitable for both debug and
release builds of a driver.
Asserts
Just like in user mode, asserts can be used to verify that certain assumptions are correct. An invalid
assumption means something is very wrong, so it’s best to stop. The WDK header provides the NT_ASSERT
macro for this purpose.
NT_ASSERT accepts something that can be converted to a Boolean value. If the result is non-zero (true),
execution continues. Otherwise, the assertion has failed, and the system takes one of the following actions:
• If a kernel debugger is attached, an assertion failure breakpoint is raised, allowing debugging the
assertion.
• If a kernel debugger is not attached, the system bugchecks. The resulting dump file will poinpoint
the exact line where the assertion has failed.
Here is a simple assert usage added to the DriverEntry function in the Booster driver from chapter 4:
Chapter 5: Debugging and Tracing
115
extern "C" NTSTATUS
DriverEntry(PDRIVER_OBJECT DriverObject, PUNICODE_STRING) {
DriverObject->DriverUnload = BoosterUnload;
DriverObject->MajorFunction[IRP_MJ_CREATE] = BoosterCreateClose;
DriverObject->MajorFunction[IRP_MJ_CLOSE] = BoosterCreateClose;
DriverObject->MajorFunction[IRP_MJ_WRITE] = BoosterWrite;
UNICODE_STRING devName = RTL_CONSTANT_STRING(L"\\Device\\Booster");
PDEVICE_OBJECT DeviceObject;
NTSTATUS status = IoCreateDevice(
DriverObject,
// our driver object
0,
// no need for extra bytes
&devName,
// the device name
FILE_DEVICE_UNKNOWN,
// device type
0,
// characteristics flags
FALSE,
// not exclusive
&DeviceObject);
// the resulting pointer
if (!NT_SUCCESS(status)) {
KdPrint(("Failed to create device object (0x%08X)\n", status));
return status;
}
NT_ASSERT(DeviceObject);
UNICODE_STRING symLink = RTL_CONSTANT_STRING(L"\\??\\Booster");
status = IoCreateSymbolicLink(&symLink, &devName);
if (!NT_SUCCESS(status)) {
KdPrint(("Failed to create symbolic link (0x%08X)\n", status));
IoDeleteDevice(DeviceObject);
return status;
}
NT_ASSERT(NT_SUCCESS(status));
return STATUS_SUCCESS;
}
The first assert makes sure the device object pointer is non-NULL:
NT_ASSERT(DeviceObject);
The second makes sure the status at the end of DriverEntry is a successful one:
Chapter 5: Debugging and Tracing
116
NT_ASSERT(NT_SUCCESS(status));
NT_ASSERT only compiles its expression in Debug builds, which makes using asserts practically free from
a performance standpoint, as these will not be part of the final released driver. This also means you need
to be careful that the expression inside NT_ASSERT has no side effects. For example, the following code
is wrong:
NT_ASSERT(NT_SUCCESS(IoCreateSymbolicLink(...)));
This is because the call to IoCreateSymbolicLink will disappear completely in Release build. The
correct way to assert would be something like the following:
status = IoCreateSymbolicLink(...);
NT_ASSERT(NT_SUCCESS(status));
Asserts are useful and should be used liberally because they only have an effect in Debug builds.
Extended DbgPrint
We’ve seen usage of the DbgPrint function (and the KdPrint macro) to generate output that can be
viewed with the kernel debugger or a comparable tool, such as DebugView. This works, and is simple to
use, but has some significant downsides:
• All the output is generated - there is no easy way to filter output to show just some output (such
as errors and warnings only). This is partially mitigated with the extended DbgPrintEx function
described in the next paragraph.
• DbgPrint(Ex) is a relatively slow function, which is why it’s mostly used with KdPrint so that
the overhead is removed in Release builds. But output in Release builds could be very important.
Some bugs may only happen in Release builds, where good output could be useful for diagnosing
issues.
• There is no semantic meaning associated with DbgPrint - it’s just text. There is no way to add
values with property name or type information.