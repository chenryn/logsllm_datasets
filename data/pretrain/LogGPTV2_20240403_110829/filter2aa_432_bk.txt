可存取这个临时文件，而其它进程不能存取该文件，因为它在/tmp 中的目录项已被 unlink()
删除。
    第二方面比较复杂而微妙，由于 system()，popen()，execlp()，execvp()执行时，若不给
出执行命令的全路径，就能"骗"用户的程序去执行不同的命令。因为系统子程序是根据 PATH
变量确定哪种顺序搜索哪些目录，以寻找指定的命令，这称为 SUID 陷井。最安全的办法
是在调用 system()前将有效 UID 改变成实际 UID，另一种比较好的方法是以全路径名命令
作为参数。execl()，execv()，execle()，execve()都要求全路径名作为参数。有关 SUID 陷井
的另一方式是在程序中设置 PATH，由于 system()和 popen()都启动 shell，故可使用 shell 句
法。如：
         system("PATH=/bin：/usr/bin cd");
这样允许用户运行系统命令而不必知道要执行的命令在哪个目录中，但这种方法不能
用于 execlp()，execvp()中，因为它们不能启动 shell 执行调用序列传递的命令字符串。
    再强调一次：在通过自己的程序运行另一个程序前，应将有效 UID 改为实际的 UID，
等另一个程序退出后，再将有效 UID 改回原来的有效 UID
7.3.4  SUI D/SGI D程序指导准则
以下是书写 SUID 和 SFID 程序时应该注意的安全准则：
1．不要写 SUID/SGID 程序，大多数时候无此必要。
2．设置 SGID 许可，不要设置 SUID 许可。应独自建立一个新的小组。
3．不要用 exec()执行任何程序。记住 exec()也被 system()和 popen()调用。
若要调用 exec()（或 system()，popen()），应事先用 setgid()（getgid()）将有效 GID
置加实际 GID。
若不能用 setgid()，则调用 system()或 popen()时，应设置 IFS：
         popen("IFS=\t\n;export IFS;/bin/ls"，"r");
使用要执行的命令的全路径名。
若不能使用全路径名，则应在命令前先设置 PATH：
         popen("IFS=\t\n;export IFS;PATH=/bin：/usr/bin;/bin/ls"，"r");
不要将用户规定的参数传给 system()或 popen();若无法避免则应检查变元字符串中
是否有特殊的 shell 字符。
若用户有个大程序，调用 exec()执行许多其它程序，这种情况下不要将大程序设
置为 SGID 许可。可以写一个（或多个）更小，更简单的 SGID 程序执行必须具有 SGID 许
可的任务，然后由大程序执行这些小 SGID 程序。
4．若用户必须使用 SUID 而不是 SGID，以相同的顺序记住(2)，(3)项内容，并相应调
整。不要设置 root 的 SUID 许可。选一个其它户头。
5．若用户想给予其他人执行自己的 shell 程序的许可，但又不想让他们能读该程序，
可将程序设置为仅执行许可，并只能通过自己的 shell 程序来运行。
6．编译，安装 SUID/SGID 程序时应按下面的方法：
（1）确保所有的 SUID（SGID）程序是对于小组和其他用户都是不可写的，存取权限
的限制低于 4755（2755）将带来麻烦。只能更严格。4111（2111）将使其他人无法寻找程
序中的安全漏洞。
（2）警惕外来的编码和 make/install 方法。
- 218 -
Linux网络编程
某些 make/install 方法不加选择地建立 SUID/SGID 程序。这会极大的威胁系统的安全，
因此，在安装外来的编码时，应该：
检查违背上述指导原则的 SUID/SGID 许可的编码。
检查 makefile 文件中可能建立 SUID/SGID 文件的命令。
7.3.5  root 程序的设计
    有若干个子程序可以从有效 UID 为 0 的进程中调用。许多前面提到的子程序，当从 root
进程中调用时，将完成和原来不同的处理。主要是忽略了许可权限的检查。由 root 用户运
行的程序当然是 root 进程(SUID 除外)，因有效 UID 用于确定文件的存取权限，所以从具
有 root 的程序中，调用 fork()产生的进程，也是 root 进程。
1．setuid()：从 root 进程调用 setuid()时，其处理有所不同，setuid()将把有效的和实际
的 UID 都置为指定的值。这个值可以是任何整型数。而对非 root 进程则仅能以实际 UID
或本进程原来有效的 UID 为变量值调用 setuid()。
2．setgid()：在系统进程中调用 setgid()时，与 setuid()类似，将实际和有效的 GID 都改
变成其参数指定的值。
调用以上两个子程序时，应当注意下面几点：
调用一次 setuid()（setgid()）将同时设置有效和实际 UID（GID），独立分别设置
有效或实际 UID（GID）固然很好，但无法做到这点。
setuid()（setgid()）可将有效和实际 UID（GID）设置成任何整型数，其数值不必
一定与/etc/passwd(/etc/group)中用户(小组)相关联。一旦程序以一个用户的 UID 了 setuid()，
该程序就不再做为 root 运行，也不可能再获 root 特权。
3．chown()：当 root 进程运行 chown()时，chown()将不删除文件的 SUID 和/或 SGID
许可，但当非 root 进程运行 chown()时，chown()将取消文件的 SUID 和/或 SGID 许可。
4．chroot()：改变进程对根目录的概念，调用 chroot()后，进程就不能把当前工作目录
改变到新的根目录以上的任一目录，所有以/开始的路径搜索，都从新的根目录开始。
5．mknod()：用于建立一个文件，类似于 creat()，差别是 mknod()不返回所打开文件的
文件描述符，并且能建立任何类型的文件（普通文件，特殊文件，目录文件）。若从非 root
进程调用 mknod()将执行失败，只有建立 FIFO 特别文件（有名管道文件）时例外，其它任
何情况下，必须从 root 进程调用 mknod()。由 creat()仅能建立普通文件，mknod()是建立目
录文件的唯一途径，因而仅有 root 能建立目录，这就是为什么 mkdir 命令具有 SUID 许可
并属 root 所有。一般不从程序中调用 mknod()。通常用/etc/mknod 命令建立特别设备文件而
这些文件一般不能在使用着时建立和删除，mkdir 命令用于建立目录。当用 mknod()建立特
别文件时，应当注意确从所建的特别文件不允许存取内存，磁盘，终端和其它设备。
6．unlink()：用于删除文件。参数是要删除文件的路径名指针。当指定了目录时，必
须从 root 进程调用 unlink()，这是必须从 root 进程调用 unlink()的唯一情况，这就是为什么
rmdir 命令具有 root 的 SGID 许可的原因。
7．mount()，umount()：由 root 进程调用，分别用于安装和拆卸文件系统。这两个子程
序也被 mount 和 umount 命令调用，其参数基本和命令的参数相同。调用 mount()，需要给
出一个特别文件和一个目录的指针，特别文件上的文件系统就将安装在该目录下，调用时
还要给出一个标识选项，指定被安装的文件系统要被读/写(0)还是仅读(1)。umount()的参数
是要一个要拆卸的特别文件的指针。
第七章 网络安全性
- 219 -
7.4  小结
在本章中我们简要介绍了有关网络安全性的一些知识。网络安全性是一个很大的主题，
我们在这里只能介绍一些基本的知识，如果想对此作更加深入的了解，请参阅有关网络安
全性的其它资料。
- 226 -
Linux网络编程
第十章  远程命令执行
10.1  引言
所谓远程命令的执行，是指在本地主机上的一个活动进程能让一个在远程主机上的程
序被执行。４.3 BSD 提供了 rsh 程序，执行它可以激活另外一个系统上的程序，rsh 程序具
有如下的功能：一个进程可以通过远程输入输出命令去激活另外一个系统上的程序（进程）。
我们希望在通常的 Linux 环境下，就能够直接把本地的数据写到远程系统的输入输出
通道中，并且能够直接从远程系统的标准输入通道中读取数据，另外，我们还希望能直接
从远程系统的标准出错通道中读取出错信息。我们必须有效的把标准输入和标准出错这两
类不同的信息流区分开来，否则我们就无法辨认哪个是标准的输入数据，哪个是标准的出
错信息。此外，我们还希望能够向远程进程发信号，此外作为控制远程进程执行的方法，
该控制进程必须在远程主机上运行，因为它必须在该主机上执行 kill 系统调用向远程进程
发信号。
这些要求的关系如图 10-1：
图 10-1  远程命令执行示意
现在我们要讨论两个在远程系统执行中执行这类进程的函数：rcmd 和 rexec，这两者
的区别与用来确认函数调用者在远程系统上执行特定进程的许可权的方法有关，并且这两
个函数是通过激活远程系统上的不同服务器来建立本地进程和远程进程间的通信。
它们的区别如表 10-1。
表 10-1  rcmd 和 rexec 函数的比较
本地主机
上的函数
远程主机
上服务器
区         别
Rcmd()
Rshd
调用者必须具有超级用户的权限以便可以在本地主机上
登记一个保留端口。不需要登录名和口令。
第十章 远程命令执行
- 227 -
Rexec()
Rexecd
为了在远程主机上检验，调用者必须将登录名和口令（登
录时键入的口令字符串）传输给服务器。
10.2  rcmd 函数和 rshd 服务器
rcmd 客户函数以及它对应的 rshd 服务器是 4.3 BSD 系统的关键，许多 4.3 BSD 的“ r”
命令都 调用了 rcmd 函数，如：rlogin 、rcp 、rsh rdist 以及 rdump。
rcmd 函数的原型是：
int rcmd (char * * ahost , int remport ,char * cliuname ,
char * servuame ,char * cmd ,int * sockfd2);
参数 ahost 是指向远程主机名字的地址的指针，主机名字可以通过函数 gethostbyname
查找。由于这是一个指向字符串的指针，因而主机名可以返回给调用者。
rcmd 函数得到一个保留的 TCP 端口，这就意味着调用进程必须拥有超级用户的特权，
远程系统上 rcmd 连接的 TCP 端由 remport 参数指明，rcmd 连接到的进程了解 rcmd 和 rshd
使用的协议。
在调用 rcmd 函数之前的一段典型代码是：
# include 
struct server * sp;
if ( (sp=getservbyname ( “shell”, “tcp”) ) = = NULL)
{
fprint ( stderr , “shell/tcp: unknown service \n”);
exit (1);
}
remport 参数必须按照网络字节顺序，安排这由库函数 getservbyname 处理。
cliuname 和 servuname 参数分别指明用户名和服务器名，这些登录名由远程系统上的
服务器用来确认用户。
cmd 串含有在远程主机上执行的命令串，rshd 执行此命令串：
shell –  c cmd
这里，shell 是远程系统口令文件 servuname 项中的外壳域，此域通常指明三个普通的
UNIX 外壳之一。Bourneshell  , Cshell 或者 KornShell。因为该命令串由一外壳执行，它可
以含有特殊外壳变形字符，由远程主机上的外壳来解释。
最后一个参数 sockfd2 是指向一整数的指针。若此指针不是 NULL，则 rcmd 函数打开
用进程与控制进程之间的第二套接字，然后通过此指针返回给调用者。若此指针为 NULL，
则远程进程的标准出错复制到标准输出（sockfd1），并且无法向远程进程发信号。这个第
二套接字通过 rcmd 被连接到保留的 TCP 端口，我们把这个 TCP 端口称为辅助端口。
rcmd 函数返回值是套接字描述符 sockfd1，如果出错，则返回-1。
rcmd 函数使用的应用协议见表 10-2。
表 10-2  rcmd 使用的协议
客户—rcmd( )
服务器—rshd
使用一个保留端口建立一个套接字。连接到
服务器。
接收连接并得到客户的地址，如果用户不连
接到保留口，则终止。
如果辅助端口由调用者请求，则使用一个保
留端口建立一个另套接字。写 ASCII 串指明
辅助端口号。仅写含有终止空字节的空串。
读辅助端口号。如果非零且不在保留端口
范围之内，则终止；如果非零，则使用一个
保留端口建立一个套接字并连接到客户的辅
- 228 -
Linux网络编程
助端口。
如果需要辅助端口，接收来自服务器的地
址，且如果服务器为起辅助连接结束未连接
一个保留端口，返回-1 给调用者。写三个
ASCII 串给服务器 cliuname、servuname 和
cmd。
读三个 ASCII 串：客户用户名、服务器用户
名和命令串，确认用户。如果成功，给客户
应答一个值为二进制数字 0 的字节。如果不
成功，则写一个值为二进制数字 1 的字节，
后跟 ASCII 出错信息及换行，并终止。
从服务器读确认状态。如果出错，则读
出错误信息并将它输出到标准出错，然后给
调用者返回-1；如果成功，则给调用者返回
套接字描述符。
服务器建立进程结构：如果需要辅助端口，
建立控制进程，为客户激活外壳来执行客户
命令。
下面是 rcmd 函数的源程序主体，滤去了部分出错处理及部分变量说明：
/*返回套接字描述符 sockfd1*/
rcmd (ahost , rport , cliuname , servuname , cmd , sockfd1)
char   * * ahost ;
/* 主机名地址指针*/
u_short rport;
/* 服务器端口*/
char  * cliuname；
/* 客户系统中的用户名*/
char  * servuname;
/* 服务器系统中的用户名*/
char  *cmd;
/* 服务器上要执行的命令串*/
    int   * fd2ptr;
/* 指向第二个套接字描述符*/
{
   int
sockfd1,lport;
   char      c;
 struct sockaddr_in serv_addr,serv2_addr;
   struct hostent    * hp;
   fe_set           readfds;
hp=gethostbyname (*ahost);
*ahost=hp->h_name;
for(;;)
   {
sockfd1=rresvport(&lport);
fcnt1( sockfd1,F_SETOWN,getpid( ) );
/* 填充服务器套接字地址并与之连接*/
bzero ( ( char * ) &serv_addr,sizeof(serv_addr) );
serv_addr.sin_family = hp ->h_addrtype;
hcopy ( hp->h_addr_list[0],
( caddr_t)&serv_addr.sin_addr,hp ->h_length);
serv_addr.sin_port = rport;
第十章 远程命令执行
- 229 -
if ( connect (sockfd1, (struct sockaddr * )&serv_addr,
sizeof (serv_addr) )  >=0 )
break;                     /* OK，继续下一步 */
close (sockfd1);
/*出错处理（省略）*/
if ( hp ->h_addr_list[1] !=NULL)
{                                         /*如果主机另有地址*/
hp ->h_addr_list ++;
bcopy (hp ->h_addr_list[0],
(caddr_t)&serv_addr.sin_addr,hp ->h_length) ;
fprintf (stderr , “Trying %s … \n”,
inet_ntoa (serv_addr.sin_addr) );
continue;
}
}    /* end of for */
if ( fd2ptr = = ( int ) 0 )   /* 调用者不使用第二通道*/
{
write (sockfd1,“ “,1);
lport = 0;
}
else