学习安卓逆向时偶然发现了OWASP的crackme练习，相关资料也挺多的，正好用来学习下xposed和frida。链接：
我使用的环境和工具：
  * x86_64 android10 Pixel_2_API_29_2
  * frida-server 12.7.12
  * frida 12.7.20
  * apktool 2.4.0
  * 夜神模拟器(android5，x86)
# Uncrackable1-3
## Uncrackable1
一个包含root检测的程序，需要绕过并得到其中的flag
### xposed
安装好程序打开之后发现检测到root，点击OK后就结束了程序，无法进行后面的操作  
首先静态分析一下文件，在MainActivity中有检测root和debuggable的代码块  
通过检查后，程序设置了一个按钮监听器，调用a.a()并传递edit_text中的字符串作为参数来判断输入是否符合条件。  
继续跟进，找到了用于判断输入的函数逻辑，可以看到加密方式为AES，并且给出了密钥和密文，而真正的解密函数在另一个包内(sg.vantagepoint.a)。sg.vantagepoint.a.a的a方法的返回值就是解密后的值(注意是byte
[]类型)，我们只需要hook这个包内的a方法并得到返回值就行。
但是首先要绕过MainActivity的root检测，简单粗暴的绕过方式就是直接将这块代码删除，然后重新回编apk。
编写xposed模块：
    package com.example.hookuncrack;
    import de.robv.android.xposed.IXposedHookLoadPackage;
    import de.robv.android.xposed.XC_MethodHook;
    import de.robv.android.xposed.XposedBridge;
    import de.robv.android.xposed.XposedHelpers;
    import de.robv.android.xposed.callbacks.XC_LoadPackage;
    public class HookMain implements IXposedHookLoadPackage {
        @Override
        public void handleLoadPackage(XC_LoadPackage.LoadPackageParam loadPackageParam) throws Throwable {
            if (loadPackageParam.packageName.equals("owasp.mstg.uncrackable1")) {
                try {
                    XposedBridge.log("UncrackHOOKED!!!");
                    XposedBridge.log("Loaded app: "+loadPackageParam.packageName);
                    //Class clazz = loadPackageParam.classLoader.loadClass("sg.vantagepoint.a.a");
                    XposedHelpers.findAndHookMethod("sg.vantagepoint.a.a", loadPackageParam.classLoader, "a", byte [].class, byte [].class, new XC_MethodHook() {
                        @Override
                        protected void beforeHookedMethod(MethodHookParam param) throws Throwable {
                        }
                        protected void afterHookedMethod(XC_MethodHook.MethodHookParam param) throws Throwable {
                            String flag = new String((byte[]) param.getResult());
                            XposedBridge.log("FLAG IS:" + flag);
                        }
                    });
                } catch (Throwable e) {
                    XposedBridge.log("hook failed");
                    XposedBridge.log(e);
                }
            }
        }
    }
安装并重启后运行app，随便输入之后就可以在xposed日志中看到被hook的flag
### frida
  * 新建js文件,exploit.js：
        Java.perform(function () {
    send("Starting hook");
    /*
      hook java.lang.System.exit, 使该函数只用来输出下面的字符串
      避免了应用的检测机制导致应用退出, 使用该方法绕过Java层的root/debug检测
    */
    var sysexit = Java.use("java.lang.System");
    sysexit.exit.overload("int").implementation = function(var_0) {
      send("java.lang.System.exit(I)V  // We avoid exiting the application  :)");
    };
      var a = Java.use("sg.vantagepoint.a.a");
      a.a.overload('[B', '[B').implementation = function(arg1,arg2){
          var ret = this.a.overload("[B","[B").call(this,arg1,arg2);
          var flag="";
          for (var i=0;iLoad file->Parse c header file
  * 选择jni.h，如果安装了Android studio则一般位于Android-studio\jre\include\下，但是需要修改后才能导入，所以直接贴一个已经改好的[下载链接](https://drive.google.com/open?id=1gVhXsXIzTp1MqEMvvRFI2jNVqvyPPa29)
  * 选中要修改的函数指针，按y键，提示选择类型，直接手动输入JNIEnv*就行(看到各种教程说选择JNIEnv*但是一直没找到，后面发现可以直接手动输入。。。)
修改之后的可读性大大增加了  
很容易看出来是将输入的内容和s2的内容对比，把s2转化成ascii就得到了flag:Thanks for all the fish
和上一题一样，用frida hook掉exit函数，绕过检测，再输入flag就行了
### hook
虽然lib中的字符串很容易就被找出来了，但是如果生成的字符串的逻辑非常复杂就没办法一眼看出来了，所以要考虑更通用解法。这里尝试hook
libfoo.so中的bar函数，直接得到strcmp的参数值，因为第二个参数就是flag。
不知道什么原因r2frida始终连不上夜神，所以换了个Android studio自带的模拟器(x86_64 android10
Pixel_2_API_29_2)，重新下载frida-server的时候注意其版本号不能大于主机上frida的版本号。
先尝试一下用frida附加到进程  
却被提示有两个同名进程，很奇怪。想起刚才用jadx查看java伪代码时native除了bar()还有一个init()，可能是调用了fork之类的函数？尝试杀掉子进程(pid较大的那一个)再试试  
直接提示没有找到进程，所以两个进程都被杀了？那再试试直接用pid附加到父进程进行调试  
依然失败，只能进so看看了。  
查看函数导出表可知，确实存在init函数，进去看看init到底做了什么  
调用了sub_8D0()，所以继续跟进  