#endif
上⾯示例中， 检查宏 是否定义过。如果已经存在，表示加载过库⽂件，就会打印⼀⾏
#ifdef EXTRA_HAPPY
提示。
可以与 指令配合使⽤。
#ifdef #else
#ifdef EXTRA_HAPPY
printf("I'm extra happy!\n");
#else
printf("I'm just regular\n");
#endif
上⾯示例中，如果宏 没有定义过，就会执⾏ 的部分。
EXTRA_HAPPY #else
可以⽤来实现条件加载。
#ifdef...#else...#endif
#ifdef MAVIS
#include "foo.h"
#define STABLES 1
#else
#include "bar.h"
#define STABLES 2
#endif
上⾯示例中，通过判断宏 是否定义过，实现加载不同的头⽂件。
MAVIS
defined 运算符 #
上⼀节的 指令，等同于 。
#ifdef #if defined
#ifdef FOO
#if defined FOO
上⾯示例中， 是⼀个预处理运算符，如果它的参数是⼀个定义过的宏，就会返回 1，否则返回 0。
defined
使⽤这种语法，可以完成多重判断。
#if defined FOO
x = 2;
#elif defined BAR
x = 3;
#endif
这个运算符的⼀个应⽤，就是对于不同架构的系统，加载不同的头⽂件。
#if defined IBMPC
#include "ibmpc.h"
#elif defined MAC
#include "mac.h"
#else
#include "general.h"
#endif
上⾯示例中，不同架构的系统需要定义对应的宏。代码根据不同的宏，加载对应的头⽂件。
#ifndef...#endif #
指令跟 正好相反。它⽤来判断，如果某个宏没有被定义过，则执⾏指定
#ifndef...#endif #ifdef...#endif
的操作。
#ifdef EXTRA_HAPPY
printf("I'm extra happy!\n");
#endif
#ifndef EXTRA_HAPPY
printf("I'm just regular\n");
#endif
上⾯示例中，针对宏 是否被定义过， 和 分别指定了两种情况各⾃需要编译的
EXTRA_HAPPY #ifdef #ifndef
代码。
常⽤于防⽌重复加载。举例来说，为了防⽌头⽂件 被重复加载，可以把它放在
#ifndef myheader.h
⾥⾯加载。
#ifndef...#endif
#ifndef MYHEADER_H
#define MYHEADER_H
#include "myheader.h"
#endif
上⾯示例中，宏 对应⽂件名 的⼤写。只要 发现这个宏没有被定义过，就
MYHEADER_H myheader.h #ifndef
说明该头⽂件没有加载过，从⽽加载内部的代码，并会定义宏 ，防⽌被再次加载。
MYHEADER_H
等同于 。
#ifndef #if !defined
#ifndef FOO
#if !defined FOO
预定义宏 #
C 语⾔提供⼀些预定义的宏，可以直接使⽤。
：编译⽇期，格式为 “Mmm dd yyyy” 的字符串（⽐如 Nov 23 2021）。
__DATE__
：编译时间，格式为 “hh:mm:ss”。
__TIME__
：当前⽂件名。
__FILE__
：当前⾏号。
__LINE__
：当前正在执⾏的函数名。该预定义宏必须在函数作⽤域使⽤。
__func__
：如果被设为 1，表示当前编译器遵循 C 标准。
__STDC__
：如果被设为 1，表示当前编译器可以提供完整的标准库；否则被设为 0（嵌⼊式
__STDC_HOSTED__
系统的标准库常常是不完整的）。
：编译所使⽤的 C 语⾔版本，是⼀个格式为 的⻓整数，C99 版本为
__STDC_VERSION__ yyyymmL
“199901L”，C11 版本为 “201112L”，C17 版本为 “201710L”。
下⾯示例打印这些预定义宏的值。
#include 
int main(void) {
printf("This function: %s\n", __func__);
printf("This file: %s\n", __FILE__);
printf("This line: %d\n", __LINE__);
printf("Compiled on: %s %s\n", __DATE__, __TIME__);
printf("C Version: %ld\n", __STDC_VERSION__);
}
#line #
指令⽤于覆盖预定义宏 ，将其改为⾃定义的⾏号。后⾯的⾏将从 的新值开始计
#line __LINE__ __LINE__
数。
#line 300
上⾯示例中，紧跟在 后⾯⼀⾏的⾏号，将被改成 300，其后的⾏会在 300 的基础上递增编号。
#line 300
还可以改掉预定义宏 ，将其改为⾃定义的⽂件名。
#line __FILE__
#line 300 "newfilename"
上⾯示例中，下⼀⾏的⾏号重置为 ，⽂件名重置为 。
300 newfilename
#error #
指令⽤于让预处理器抛出⼀个错误，终⽌编译。
#error
#if __STDC_VERSION__ != 201112L
#error Not C11
#endif
上⾯示例指定，如果编译器不使⽤ C11 标准，就中⽌编译。GCC 编译器会像下⾯这样报错。
$ gcc -std=c99 newish.c
newish.c:14:2: error:
上⾯示例中，GCC 使⽤ C99 标准编译，就报错了。
#if INT_MAX < 100000
#error int type is too small
#endif
上⾯示例中，编译器⼀旦发现 类型的最⼤值⼩于 ，就会停⽌编译。
INT 100,000
指令也可以⽤在 的部分。
#error #if...#elif...#else
#if defined WIN32
#elif defined MAC_OS
#elif defined LINUX
#else
#error NOT support the operating system
#endif
#pragma #
指令⽤来修改编译器属性。
#pragma
#pragma c9x on
上⾯示例让编译器以 C99 标准进⾏编译。
全⽂完
本⽂由 简悦 SimpRead 转码，⽤以提升阅读体验，原⽂地址
函数 语⾔教程 ⽹道
I/O - C -
⽹道（WangDoc.com），互联⽹⽂档计划
“
⽹道（WangDoc.com），互联⽹⽂档计划
C 语⾔提供了⼀些函数，⽤于与外部设备通信，称为输⼊输出函数，简称 I/O 函数。输⼊（import）指的
是获取外部数据，输出（export）指的是向外部传递数据。
缓存和字节流 #
严格地说，输⼊输出函数并不是直接与外部设备通信，⽽是通过缓存（buffer）进⾏间接通信。这个⼩节介
绍缓存是什么。
普通⽂件⼀般都保存在磁盘上⾯，跟 CPU 相⽐，磁盘读取或写⼊数据是⼀个很慢的操作。所以，程序直接
读写磁盘是不可⾏的，可能每执⾏⼀⾏命令，都必须等半天。C 语⾔的解决⽅案，就是只要打开⼀个⽂
件，就在内存⾥⾯为这个⽂件设置⼀个缓存区。
程序向⽂件写⼊数据时，程序先把数据放⼊缓存，等到缓存满了，再把⾥⾯的数据会⼀次性写⼊磁盘⽂
件。这时，缓存区就空了，程序再把新的数据放⼊缓存，重复整个过程。
程序从⽂件读取数据时，⽂件先把⼀部分数据放到缓存⾥⾯，然后程序从缓存获取数据，等到缓存空了，
磁盘⽂件再把新的数据放⼊缓存，重复整个过程。
内存的读写速度⽐磁盘快得多，缓存的设计减少了读写磁盘的次数，⼤⼤提⾼了程序的执⾏效率。另外，
⼀次性移动⼤块数据，要⽐多次移动⼩块数据快得多。
这种读写模式，对于程序来说，就有点像⽔流（stream），不是⼀次性读取或写⼊所有数据，⽽是⼀个持
续不断的过程。先操作⼀部分数据，等到缓存吞吐完这部分数据，再操作下⼀部分数据。这个过程就叫做
字节流操作。
由于缓存读完就空了，所以字节流读取都是只能读⼀次，第⼆次就读不到了。这跟读取⽂件很不⼀样。
C 语⾔的输⼊输出函数，凡是涉及读写⽂件，都是属于字节流操作。输⼊函数从⽂件获取数据，操作的是
输⼊流；输出函数向⽂件写⼊数据，操作的是输出流。
printf() #
是最常⽤的输出函数，⽤于屏幕输出，原型定义在头⽂件 ，详⻅《基本语法》⼀章。
printf() stdio.h
scanf() #
基本⽤法 #
函数⽤于读取⽤户的键盘输⼊。程序运⾏到这个语句时，会停下来，等待⽤户从键盘输⼊。⽤户
scanf()
输⼊数据、按下回⻋键后， 就会处理⽤户的输⼊，将其存⼊变量。它的原型定义在头⽂件
scanf()
。
stdio.h
的语法跟 类似。
scanf() printf()
scanf("%d", &i);
它的第⼀个参数是⼀个格式字符串，⾥⾯会放置占位符（与 的占位符基本⼀致），告诉编译器如
printf()
何解读⽤户的输⼊，需要提取的数据是什么类型。这是因为 C 语⾔的数据都是有类型的， 必须提
scanf()
前知道⽤户输⼊的数据类型，才能处理数据。它的其余参数就是存放⽤户输⼊的变量，格式字符串⾥⾯有
多少个占位符，就有多少个变量。
上⾯示例中， 的第⼀个参数 ，表示⽤户输⼊的应该是⼀个整数。 就是⼀个占位符， 是
scanf() %d %d %
占位符的标志， 表示整数。第⼆个参数 表示，将⽤户从键盘输⼊的整数存⼊变量 。
d &i i
注意，变量前⾯必须加上 运算符（指针变量除外），因为 传递的不是值，⽽是地址，即将变
& scanf()
量 的地址指向⽤户输⼊的值。如果这⾥的变量是指针变量（⽐如字符串变量），那就不⽤加 运算
i &
符。
下⾯是⼀次将键盘输⼊读⼊多个变量的例⼦。
scanf("%d%d%f%f", &i, &j, &x, &y);
上⾯示例中，格式字符串 ，表示⽤户输⼊的前两个是整数，后两个是浮点数，⽐如
%d%d%f%f 1 -20 3.4
。这四个值依次放⼊ 、 、 、 四个变量。
-4.0e3 i j x y
处理数值占位符时，会⾃动过滤空⽩字符，包括空格、制表符、换⾏符等。所以，⽤户输⼊的数
scanf()
据之间，有⼀个或多个空格不影响 解读数据。另外，⽤户使⽤回⻋键，将输⼊分成⼏⾏，也不影
scanf()
响解读。
1
-20
3.4
-4.0e3
上⾯示例中，⽤户分成四⾏输⼊，得到的结果与⼀⾏输⼊是完全⼀样的。每次按下回⻋键以后，
scanf()
就会开始解读，如果第⼀⾏匹配第⼀个占位符，那么下次按下回⻋键时，就会从第⼆个占位符开始解读。
处理⽤户输⼊的原理是，⽤户的输⼊先放⼊缓存，等到按下回⻋键后，按照占位符对缓存进⾏解
scanf()
读。解读⽤户输⼊时，会从上⼀次解读遗留的第⼀个字符开始，直到读完缓存，或者遇到第⼀个不符合条
件的字符为⽌。
int x;
float y;
scanf("%d", &x);
scanf("%f", &y);
上⾯示例中， 读取⽤户输⼊时， 占位符会忽略起⾸的空格，从 处开始获取数据，读取
scanf() %d -
到 停下来，因为后⾯的 不属于整数的有效字符。这就是说，占位符 会读到 。
-13 . %d -13
第⼆次调⽤ 时，就会从上⼀次停⽌解读的地⽅，继续往下读取。这⼀次读取的⾸字符是 ，由于
scanf() .
对应的占位符是 ，会读取到 ，这是采⽤科学计数法的浮点数格式。后⾯的 不属于浮点数
%f -13.45e12 #
的有效字符，所以会停在这⾥。
由于 可以连续处理多个占位符，所以上⾯的例⼦也可以写成下⾯这样。
scanf()
scanf("%d%f", &x, &y);
的返回值是⼀个整数，表示成功读取的变量个数。如果没有读取任何项，或者匹配失败，则返回
scanf()
。如果读取到⽂件结尾，则返回常量 EOF。
0
占位符 #
常⽤的占位符如下，与 的占位符基本⼀致。
scanf() printf()
：字符。
%c
：整数。
%d
： 类型浮点数。
%f float
： 类型浮点数。
%lf double
： 类型浮点数。
%Lf long double
：字符串。