## 0x00 认识IAST
笔者初识IAST，未曾深入接触，源于兴趣开始学习，可能有理解不到位的地方，请多多包涵指导。
IAST全称Interactive Application Security Testing 交互式应用程序安全测试，它在程序运行过程中使用
**插桩技术监控和收集信息**
，根据这些信息来判断程序是否存在告警。它对来自客户端产生的请求和响应进行分析，这点类似于DAST；而它能够监控数据流信息，通过污点分析产生告警又类似于SAST。IAST有很多种模式，代理模式、流量镜像模式，插桩模式等，可参考
本次重点介绍插桩模式，插桩实现主要通过动态hook和污点传播。  
hook技术：Java最常见的hook的是JVM层，通过JVMTI接口Instrumentation在类被加载之前对类进行拦截，通过插入字节码进行修改并重载类实现hook；  
污点传播：污点传播分析技术是信息流分析技术的一种实践方法，通过对系统中敏感数据进行标记跟踪数据在程序中的传播来进行安全检测。
插桩模式有主动插桩模式和被动插桩模式。  
主动插桩模式：在关键函数hook到流量后，会添加payload进行扫描，包含了类似DAST的功能，主动对目标应用进行扫描，应用服务器的IAST
agent不会追踪整个污点数据流，仅收集关键数据，将数据发送给IAST管理端，IAST管理端会向应用服务器发送构造好的重放流量来验证风险是否存在；
被动插桩模式：不会主动发送payload，对来自客户端的请求响应进行污点传播数据流监控，根据是否经过无害化处理判断是否存在漏洞。
本文主要针对JAVA类应用，需要用到的技术包括污点分析、插桩技术Instrumentation&agent、字节码增强技术如ASM、javassist，接下来的笔记是先把这些技术进行介绍，然后再对被动插桩式IAST
demo项目进行改动，以SQL注入和log4j2 CVE-2021-44228漏洞进行深入理解并且记录遇到的问题。
## 0x01 污点分析：
污点分析可以抽象成一个三元组``的形式：  
1、source即污点源，代表直接引入不受信任的数据或者机密数据到系统中;  
2、sink即污点汇聚点，代表直接产生安全敏感操作(违反数据完整性)或者泄露隐私数据到外界(违反数据保密性);  
3、sanitizer即无害处理，代表通过数据加密或者移除危害操作等手段使数据传播不再对软件系统的信息安全产生危害。
从source到sink数据是否经过了sanitizer无害处理，如果经过则认为信息流是安全的，不经过那么认为信息流存在安全问题的。如下图是一个SQL执行的示例，我们需要通过污点分析思想判断它是否存SQL注入漏洞，假设`String
sql = "select * from user where id=" +
value;`中的value可以通过用户输入获取，我们判断它就是一个source，而执行SQL语句的代码认为是敏感操作，判断为sink，中间代码是在SQL语句后面添加`'`和转义处理语句中的单引号，属于sanitizer无害处理，当sql经过无害处理后，不再存在SQL注入漏洞，如果未经无害处理直接执行，则存在SQL注入漏洞。
通过上面示例，我们大概知道了通过污点分析能够发现一些安全问题，想了解更多可以看看这篇文章[简单理解污点分析技术](https://www.k0rz3n.com/2019/03/01/%E7%AE%80%E5%8D%95%E7%90%86%E8%A7%A3%E6%B1%A1%E7%82%B9%E5%88%86%E6%9E%90%E6%8A%80%E6%9C%AF/)。
## 0x02 插桩技术：
JVM不能直接执行.java 代码或者.class文件，它只能执行.class 文件中存储的指令码。class需要通过classLoader
装载以后才能被执行。如果我们想要在JVM加载class前或加载class后修改class字节码，添加埋点逻辑并重新进行加载，需要用到Instrumentation与ASM，Instrumentation可以拦截ClassLoad加载或者重新对class加载，ASM操作修改字节码
增加代码逻辑。接下来我们就Instrumentation和ASM技术进行介绍。
### Instrumentation
Instrumentation主要用于类定义 **动态** 改变和操作，在JVM运行状态拦截class加载并提供类转换服务。
#### ClassFileTransformer
ClassFileTransformer是一个类文件转换器，提供类字节码操作服务，可以在transform方法中定义字节码的修改并返回新的字节码数组。ClassFileTransformer通常被Instrumentation用来注册转换器在类加载时进行类的转换，接口定义如下：
    package java.lang.instrument;
    import  java.security.ProtectionDomain;
    public interface ClassFileTransformer {
      byte[] transform(  ClassLoader         loader, // 类加载器
                       String              className, // 类名
                       Class            classBeingRedefined, // 类重定义
                       ProtectionDomain    protectionDomain, //保护域
                       byte[]              classfileBuffer) //类的字节码数组
        throws IllegalClassFormatException;
    }
#### Instrumentation接口
Instrumentation定义了很多接口，常用的接口如下：
    1、//注册ClassFileTransformer实例，注册多个会按照注册顺序进行调用。所有的类被加载完毕之后会调用ClassFileTransformer实例，相当于它们通过了redefineClasses方法进行重定义。cransform表示是否能够通过retransformClasses方法进行回滚。
    void addTransformer(ClassFileTransformer transformer, boolean canRetransform);
    //添加ClassFileTransformer，默认不能回滚
    void addTransformer(ClassFileTransformer transformer);
    2、//重新定义Class文件
    void redefineClasses(ClassDefinition... definitions)
    3、//已加载类进行重新转换的方法，重新转换的类会被回调到ClassFileTransformer的列表中进行处理
    void retransformClasses(Class... classes) throws UnmodifiableClassException
    4、//可以被重新定义，该方法主要作用于已经加载过的class
    boolean isRetransformClassesSupported();
    5、//ClassFileTransformer
    boolean removeTransformer(ClassFileTransformer transformer);
    6、//是否可以修改Class文件
    boolean isModifiableClass(Class theClass);
    7、//获取所有加载的Class
    @SuppressWarnings("rawtypes")
    Class[] getAllLoadedClasses();
    //获取指定类加载器已经初始化的类
    @SuppressWarnings("rawtypes")
    Class[] getInitiatedClasses(ClassLoader loader);
Instrumentation有两种agent模式：premain和agentmain，premain和agentmain两种方式最终都是为了回调`Instrumentation`实例，激活`sun.instrument.InstrumentationImpl#transform()`从而回调注册到`Instrumentation`中的`ClassFileTransformer`以实现字节码修改。
#### agent onload-premain模式：
premain顾名思义在main前加载探针， **启动时** 通过JVM参数加载agent。
**API：**
    public static void premain(String agentArgs, Instrumentation inst)
    public static void premain(String agentArgs)
**示例：**
打印执行main前所有已加载的类。需要agent的jar包（包括agent和Transfromer）和测试程序。
Agent.java:
    import java.lang.instrument.Instrumentation;
    public class Agent {
      public static void premain(String agentOps, Instrumentation inst) {
        System.out.println("=======this is agent premain function=======");
        inst.addTransformer(new TestTransfromer());
      }
      public static void agentmain(String agentArgs, Instrumentation instrumentation) {
        System.out.println("loadagent after main run.args=" + agentArgs);
        Class[] classes = instrumentation.getAllLoadedClasses();
        for (Class cls : classes) {
          System.out.println(cls.getName());
        }
        System.out.println("agent run completely.");
        instrumentation.addTransformer(new DefineTransformer());
      }
    }
TestTransfromer.java：
    import java.lang.instrument.ClassFileTransformer;
    import java.lang.instrument.IllegalClassFormatException;
    import java.security.ProtectionDomain;
    public class TestTransfromer implements ClassFileTransformer {
      @Override
      public byte[] transform(ClassLoader loader, String className, Class classBeingRedefined, ProtectionDomain protectionDomain, byte[] classfileBuffer) throws IllegalClassFormatException {
        System.out.println(className.replace("/", "."));
        System.out.println(classfileBuffer.length);
        return classfileBuffer;
      }
    }
在pom.xml中添加premain的配置，添加完后，package打包成jar包。
      com.r17a.demo.Agent
随意写一个main打包，在命令行进行测试：`java -javaagent:agent-1.0-SNAPSHOT.jar -jar
test1-1.0-SNAPSHOT.jar`。如下图，打印出了执行main前已加载的类。
#### agent onattach-agentmain模式：
agentmain在main运行时加载，是在 **运行态** 将agent加载到目标JVM中并在该JVM中执行。
**API:**
    public static void agentmain (String agentArgs, Instrumentation inst)
    public static void agentmain (String agentArgs)
**示例：**
在目标JVM运行时打印所有已加载的类。需要三个程序agent的jar包、正在运行的主程序、将agent加载到主程序所在JVM的程序。
Agent程序：
Agent.java
    import java.lang.instrument.Instrumentation;
    public class Agent {
      public static void agentmain(String agentArgs, Instrumentation instrumentation) {
        System.out.println("loadagent after main run.args=" + agentArgs);
        Class[] classes = instrumentation.getAllLoadedClasses();
        for (Class cls : classes) {
          System.out.println(cls.getName());
        }
        System.out.println("agent run completely.");
        instrumentation.addTransformer(new DefineTransformeAr());
      }
    }
DefineTransformer.java
    import java.lang.instrument.ClassFileTransformer;
    import java.lang.instrument.IllegalClassFormatException;
    import java.security.ProtectionDomain;
    public class DefineTransformer implements ClassFileTransformer {
      @Override
      public byte[] transform(ClassLoader loader, String className, Class classBeingRedefined, ProtectionDomain protectionDomain, byte[] classfileBuffer) throws IllegalClassFormatException {
        System.out.println("premain load Class:" + className);
        return classfileBuffer;
      }
    }
pom.xml添加如下配置，并打包。
      com.r17a.demo.Agent
      true
      true
      true
Main主程序：
Main.java，直接运行
    public class Main {
      public static void main(String[] args) throws InterruptedException {
        System.out.println("This is Main Program!");
        // 模拟运行状态
        Thread.sleep(10000000L);
      }
    }
AttachLauncher.java：
编写attach程序，将agent.jar加载到Main程序所在JVM进行执行，注意agent.jar填写自己的路径。
    import com.sun.tools.attach.*;
    import java.io.IOException;
    import java.util.List;