(cid:5)(cid:33)(cid:7)(cid:7)(cid:8)(cid:18)(cid:19)(cid:15)(cid:31)(cid:44)(cid:4)(cid:8)(cid:22)(cid:16)(cid:42)(cid:4)(cid:29)(cid:15)(cid:22)(cid:39)(cid:8)(cid:4)(cid:10)(cid:29)(cid:4)(cid:22)(cid:4)(cid:29)(cid:10)(cid:11)(cid:21)(cid:15)(cid:8)(cid:4)(cid:7)(cid:8)(cid:43)(cid:10)(cid:29)(cid:19)(cid:8)(cid:7)
(cid:45)(cid:10)(cid:15)(cid:8)(cid:4)(cid:23)(cid:42)(cid:10)(cid:16)(cid:42)(cid:4)(cid:10)(cid:29)(cid:4)(cid:22)(cid:4)(cid:16)(cid:6)(cid:11)(cid:11)(cid:6)(cid:18)(cid:15)(cid:31)(cid:4)(cid:33)(cid:29)(cid:8)(cid:34)(cid:4)(cid:34)(cid:8)(cid:39)(cid:10)(cid:16)(cid:8)(cid:4)
(cid:10)(cid:18)(cid:19)(cid:8)(cid:7)(cid:45)(cid:22)(cid:16)(cid:8)(cid:30)(cid:4)
(cid:27)(cid:37)(cid:5)(cid:4)
(cid:14)(cid:15)(cid:22)(cid:39)(cid:8)(cid:4)(cid:36)
(cid:27)(cid:37)(cid:5)(cid:4)
(cid:14)(cid:15)(cid:22)(cid:39)(cid:8)(cid:4)(cid:37)
(cid:24)(cid:3)(cid:38)(cid:17)
(cid:9)(cid:7)(cid:33)(cid:29)(cid:19)(cid:8)(cid:34)(cid:4)(cid:35)(cid:6)(cid:11)(cid:22)(cid:10)(cid:18)
(cid:1)(cid:21)(cid:21)(cid:15)(cid:10)(cid:16)(cid:22)(cid:19)(cid:10)(cid:6)(cid:18)(cid:4)(cid:36)
(cid:1)(cid:21)(cid:21)(cid:15)(cid:10)(cid:16)(cid:22)(cid:19)(cid:10)(cid:6)(cid:18)(cid:4)(cid:37)
(cid:30)(cid:30)(cid:30)
(cid:30)(cid:30)(cid:30)
(cid:14)(cid:3)(cid:1)(cid:17)
(cid:9)(cid:7)(cid:33)(cid:29)(cid:19)(cid:8)(cid:34)(cid:4)(cid:35)(cid:6)(cid:11)(cid:22)(cid:10)(cid:18)
(cid:1)(cid:21)(cid:21)(cid:15)(cid:10)(cid:16)(cid:22)(cid:19)(cid:10)(cid:6)(cid:18)(cid:4)(cid:36)
(cid:1)(cid:21)(cid:21)(cid:15)(cid:10)(cid:16)(cid:22)(cid:19)(cid:10)(cid:6)(cid:18)(cid:4)(cid:37)
(cid:30)(cid:30)(cid:30)
(cid:30)(cid:30)(cid:30)
(cid:40)(cid:39)(cid:8)(cid:18)(cid:19)(cid:4)(cid:27)(cid:18)(cid:19)(cid:8)(cid:7)(cid:7)(cid:33)(cid:21)(cid:19)(cid:29)
(cid:24)(cid:8)(cid:7)(cid:10)(cid:21)(cid:42)(cid:8)(cid:7)(cid:22)(cid:15)
(cid:41)(cid:33)(cid:29)(cid:4)(cid:11)(cid:22)(cid:18)(cid:22)(cid:43)(cid:8)(cid:7)
Figure 5: Our prototype implementation consists of a modiﬁed AVR core, partitioned data and program
memories and a peripheral I2C bus manager. The trusted domain also resides in its own dedicated RAM
partition which other applications cannot access. The time-slice monitor is implemented using one of the
AVR’s timers and the atomicity-monitor is implemented as a custom instruction (clix). The application-
aware MPU enforces memory boundaries of applications using information from the application tracker. The
peripheral I2C bus manager mediates access to the I2C bus according to its access control map.
(cid:27)(cid:37)(cid:5)(cid:4)(cid:41)(cid:33)(cid:29)
bus manager, time-slice/atomicity monitors) are implemen-
ted correctly and were initialized properly in a trusted ini-
tialization step that is free from adversarial interference.
Furthermore, all of these components have simple logic, wh-
ich reduces the risk of vulnerabilities in their implementa-
tion. We assume that the attacker cannot control inputs
to the scheduler either directly (as external input) or indi-
rectly (through applications that it controls). Allowing only
the trusted domain to access the trusted scheduling com-
ponents eliminates the risk of compromise of these secure
elements by other applications. We assume that any sys-
tem update (applications or conﬁguration) involves a similar
trusted initialization step and is adversary-free.
We analyze our system assuming that the attacker con-
trols (up to) all of the applications on the system, except
the critical application and (up to) all of the peripherals ex-
cept the ones needed by the critical application. We show
that even in this scenario, the execution schedule of the crit-
ical application will not be aﬀected by the attacker. We
further show that even if the attacker controls a subset of
the peripherals that are used by the critical application, our
system still ensures that the application executes on time,
albeit with a reduced or compromised functionality due to
the compromise of the peripheral.
Compromised Applications
The CPU time-slice monitor and the atomicity monitor en-
sure that misbehaving applications cannot indeﬁnitely deny
CPU access to other applications — no application can oc-
cupy the CPU longer than its assigned duration or execute
bus transactions/atomic operations longer than a predeﬁned
length. This prevents iDoS attacks on the system bus by
misbehaving applications since they can occupy the CPU
(which is the only master of the system bus) only for a lim-
ited amount of time. Since an application can use a pe-
ripheral only as long as it has CPU-context, the time-slice
monitor also prevents iDoS attacks against peripherals from
misbehaving applications.
The application-aware MPU isolates applications such that
they are restricted to using only their own code and data
memory. This ensures that they do not occupy more than
their share of memory space or interfere with other appli-
cations. Furthermore, the application-aware MPU and the
trusted domain mediate context switches and prevent unau-
thorized cross-application state access and modiﬁcations.
The above countermeasures prevent one or more misbe-
having applications from delaying or preventing the execu-
tion of the critical application.
Compromised Peripherals
Our system enforces that all peripherals can access mem-
ory only through the CPU (no DMA) and hence through
the application-aware MPU; given this, there is no threat of
iDoS attacks by peripherals on the system bus. However,
a peripheral can attempt to disrupt trusted scheduling by
launching iDoS attacks against the peripheral bus. This at-
tack is prevented by the use of the peripheral bus manager
that fully mediates the access of peripherals to the bus. The
peripheral bus manager ensures that only the peripherals
required by the currently executing application are active.
This prevents other compromised peripherals from interfer-
ing with the execution of an application.
Furthermore, the system prevents peripherals from exe-
cuting a long bus transaction — the length of any bus trans-
action (which is an atomic operation) is bounded by the
atomicity monitor. Hence, misbehaving peripherals alone
cannot disrupt trusted scheduling or the communication be-
tween the critical application and its peripherals.
Finally, even in the case of misbehaving applications and
peripherals that are under the control of the same attacker,
the combination of the above mechanisms ensures that the
execution schedule of the critical application is not modiﬁed
provided it does not depend on the misbehaving peripherals.
4.
IMPLEMENTATION AND EVALUATION
In order to demonstrate the feasibility of realizing a trusted
scheduling architecture, we implemented a prototype em-
bedded system based on the AVR ATmega103 core. Our
prototype (Figure 5) is a simpliﬁed instance of the architec-
ture shown in Figure 3. It consists of a modiﬁed AVR core
66
CLK
(a) clix instruc-
tion execution
(b) Nested clix
instructions
(c) Pending inter-
rupts vs. clix
INS
clix3
inst1
inst2
inst3
inst4
. . .
inst1−4 (cid:6)= clix / cli / sei
INTR EN
INS
clix3
clix3
clix3
inst1
inst2
. . .
inst1,2 (cid:6)= clix / cli / sei
INTR EN
INS
clix3
inst1
inst2
inst3
clix3
. . .
inst1−3 (cid:6)= clix / cli / sei
INTR EN
Process pending interrupts
before this clix
Figure 6: In order to limit the number of cycles for which interrupts can be disabled by untrusted applications,
we introduce a new processor instruction (clix) which can be used to bound the maximum duration for which
interrupts are disabled. We also implemented additional safeguards to prevent an application from disabling
interrupts for a longer period by executing clix continuously or at regular intervals.
that is connected to two slave devices (register ﬁles) on an
I2C bus. We chose the AVR ATmega core and the I2C bus
due to their widespread use in embedded systems. In what
follows, we describe our implementation in detail and then
present initial results on the performance of our prototype.
4.1 Our Prototype
In our prototype, the trusted domain, which manages the
scheduler, time-slice and atomicity monitors, application-
aware MPU and the peripheral bus manager, is hosted in
its own dedicated portion of RAM (instead of ROM) which
is not accessible by other applications. The trusted do-
main also has exclusive access to a set of registers that
hold security-critical information. This was necessary to
ensure that misbehaving applications do not access or mod-
ify security-critical system parameters, e.g., the maximum
length of an atomic section that is stored in a register and
initialized during system start-up by the trusted domain.
We added secure registers to store information regarding the
currently executing application (in the application tracker),
the trusted domain’s stack pointer and the boundaries of
diﬀerent applications. We also modiﬁed the interrupt mask
register (that is used to determine the set of active inter-
rupts and hence, the set of applications that may interrupt
the current application) and the timer corresponding to the
time-slice monitor to be secure registers.
The scheduler is implemented using the set of prioritized
interrupts available in the AVR core. It supports priority-
based scheduling of applications with ﬁxed and unique pri-
orities. The highest priority interrupt line is reserved for
the trusted domain and applications are executed as inter-
rupt handlers. A high priority panic interrupt is ﬁred when
a security violation (as detected by the application-aware
MPU, time-slice monitor, atomicity monitor or peripheral
bus manager) occurs. It is important that the security panic
interrupt is non-maskable,
it can never be disabled.
CPU preemption occurs automatically based on the priority
of an incoming interrupt. The CPU time-slice monitor is
implemented as a hardware timer that ﬁres a security inter-
i.e.,
rupt when it expires. The atomicity monitor is implemented
as a custom instruction.
Furthermore, since the original AVR does not have an ex-
clusive MMU or MPU module, we extend the core with a
custom MPU that is initialized by the trusted domain. Dur-
ing system start-up the trusted domain loads the memory
map of applications into the MPU. Then the MPU enforces
application boundaries in program and data memory using
the information about currently executing application that
it obtains from the application tracker.
Memory partitions that are enforced by the MPU are cre-
ated at compile time, i.e., by compiling the trusted domain
and applications into a custom executable. The executable
contains information regarding the load addresses of applica-
tions in RAM and their data regions (stack, heap and glob-
als) and hence facilitates mapping of applications to separate
(program and data) partitions. The trusted domain multi-
plexes the stack pointer between diﬀerent applications. We
extended the AVR core with an additional stack pointer that
is used exclusively by the trusted domain. The trusted do-
main is also responsible for saving and restoring application
contexts. We store the context of an interrupted applica-
tion on the trusted domain’s stack, which is accessible only
by the trusted domain. This prevents any malicious appli-
cation from accessing and modifying the state of any other
application.
Atomicity Monitor
Since our prototype uses interrupt-based preemption mech-
anisms, applications disable all interrupts before executing
atomic operations. In order to limit the maximum length of
atomic operations, we added a custom instruction clix Y to
the AVR core that disables all interrupts for Y cycles (Fig-
ure 6). We extended gcc (version 4.3.2) and binutils (ver-
sion 2.20.1) to enable support for this new instruction. The
value of Y is ﬁxed at compile-time based on the atomic sec-
tion’s declared length. The generated application binaries
use the custom instruction clix in place of the conventional
cli instruction and a security exception is raised if any ap-
67
plication (other than the trusted domain) executes the cli
instruction.
It is important to derive a practical bound on the maxi-
mum duration for which interrupts can remain deactivated
by an untrusted application using clix. We refer to this
upper bound as max_clix: the largest argument (maximum
value for Y) that can be processed by a single clix instruc-
tion. This value is held in a dedicated register initialized
by and accessible only to the trusted domain. Furthermore,
enforcing the upper bound using clix requires the following
additional safeguards:
(i) No application other than the trusted domain is al-
lowed to execute the cli instruction.
(ii) Misbehaving applications may try to nest the execu-
tion of critical sections, i.e., they may execute the clix
instruction consecutively and hence increase the eﬀec-
tive number of cycles for which interrupts remain dis-
abled (Figure 6). We prevent this in our prototype by
ignoring clix instructions that occur while an older
clix is being processed.
(iii) Pending interrupts should always be processed in prece-
dence to clix instructions (Figure 6). This is impor-
tant in the case when an interrupt occurs between a
clix a and clix b instruction that are exactly a cy-
cles apart.
It must also be ensured that the clix b
instruction is processed once the interrupt handler has
completed.
Peripheral I2C Bus Manager
Our prototype includes a peripheral bus manager (Figure 7)
that controls access to an I2C bus that connects the CPU
to peripherals. The I2C bus is a two-wire serial bus. One
of the wires is used for data and the other for control or
clock signals. In practice, peripherals are connected to the
bus using tri-state buﬀers (one each for the data and clock
lines). Each peripheral typically controls its own tri-state
buﬀer.
In our prototype (Figure 7), the access control map of the
peripheral bus manager is initialized by the trusted domain
with information regarding the set of peripherals that each
application is allowed to access. Additionally, each applica-
tion can choose to enable only a subset of all the peripherals
to which it has been granted access using the peripheral se-
lection register (PSR). The bus manager restricts access to
the bus by controlling the enable signal of the tri-state buﬀer
that connects the peripheral to the bus, i.e., the peripheral
can access the bus only when the enable signal from the bus
manager is also low. Finally, on the occurrence of a security
violation (panic is high), the bus manager resets all the cur-
rently active devices so that they are ready for use by the
next application that executes.
4.2 Preliminary Evaluation
In this section, we present an initial evaluation of our pro-
totype with respect to its timing properties and hardware
resource utilization.
Application Activation Latency
We evaluate the timing properties of our prototype in terms
of its activation latency. Activation latency refers to the