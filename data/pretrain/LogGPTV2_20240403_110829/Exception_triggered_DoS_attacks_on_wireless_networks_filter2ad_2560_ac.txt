### EAP and TLS-Based Authentication Mechanisms

EAP (Extensible Authentication Protocol) is not a specific authentication mechanism but rather a framework that provides a series of common functions and an negotiation process based on the desired authentication method. Currently, about 40 such mechanisms, known as EAP methods, are supported. These methods are defined in various IETF RFCs, including EAP-MD5 [9], EAP-OTP [9], EAP-GTC [9], EAP-TLS [29], EAP-TTLS [15], PEAP [8], EAP-IKEv2 [30], EAP-SIM [16], EAP-AKA [10], and several vendor-specific methods.

The most commonly used methods suitable for wireless networks include:
- PEAP [8]
- EAP-TLS [29]
- EAP-TTLS [15]
- EAP-FAST [12]
- EAP-SIM [16]
- EAP-AKA [10]

Figure 1 illustrates how these typical EAP protocols interact with other layers. EAP-TLS, EAP-TTLS, EAP-FAST, and PEAP are widely used in WLANs. EAP-SIM is designed for GSM systems, and EAP-AKA is adopted in UMTS/CDMA2000. Among these, EAP-TLS, EAP-TTLS, EAP-FAST, and PEAP all use TLS as their underlying authentication and cryptographic method.

### Transport Layer Security (TLS)

Transport Layer Security (TLS) [13] and its predecessor, Secure Sockets Layer (SSL), are cryptographic protocols that provide secure communication over the Internet for applications such as web browsing, email, internet faxing, instant messaging, and other data transfers. The protocol is designed to prevent eavesdropping, tampering, and message forgery. For example, the HTTPS protocol layers on top of TLS to protect sensitive network traffic.

TLS is a layered protocol consisting of the Record Protocol, the Alert Protocol, and the Handshake Protocol. The Record Protocol serves the Handshake and Alert Protocols, offering symmetric encryption, data authenticity, and optional compression [13]. The Alert Protocol provides signaling between peers, with alert messages including an alert level indication. A FATAL ALERT always terminates the current connection.

The Handshake Protocol is responsible for cipher suite negotiation, initial key exchange, and peer authentication. In our attack, we primarily target the Handshake Protocol by triggering alert messages defined in the Alert Protocol. Figure 2 shows the flowchart of a successful TLS handshake process. Due to space limitations, we do not detail the handshake protocol here, but more information can be found in [13].

### Vulnerability in TLS-Based EAP Protocols

The vulnerability we have identified lies within the TLS protocol, which is widely used in many security protocols such as HTTPS and TLS-based EAP protocols. Therefore, all TLS-based EAP protocols, including PEAP, EAP-TLS, EAP-TTLS, and EAP-FAST, are vulnerable to our attack. It is worth noting that we also implemented the same attack approach targeting the HTTPS protocol, which relies on TLS, and successfully stopped GMail authentication using the HTTPS protocol. However, the difficulty of sniffing and deciphering application-layer data in wired and encrypted wireless networks makes such application-level attacks less practical. Hence, we focus on TLS-based EAP protocols, which are MAC layer authentication protocols for wireless networks.

An attacker sniffs the communication between the wireless client and the access point, inspecting the authentication procedure through the Handshake Protocol of TLS. Before the Handshake Protocol of TLS establishes the keys to encrypt subsequent packets, all wireless packets are in clear text and unencrypted. Triggered by certain messages, the attacker spoofs corresponding messages to make the TLS authentication fail.

Specifically, the attacker has two ways to trigger exception handling in TLS:
1. **Error Message Based Attack**: Spoofing FATAL ALERT messages to directly fool the client or server into stopping the authentication.
2. **Misleading Message Based Attack**: Spoofing negotiation messages with different authentication parameters to confuse the two parties.

Next, we will discuss the detailed attack approaches.

#### Error Message Based Attack: Spoofing the Server

The attacker can spoof messages as if they were coming from the TLS server. There are at least two attack points in the TLS authentication framework:
1. After the client sends the CLIENT HELLO.
2. After the bundle of client response messages (including CLIENT CERTIFICATE, CLIENT KEY EXCHANGE, and other messages).

If the bundle of messages is broken into multiple EAP packets, there are more attack points after each EAP packet. Attacks on different points are similar, and we use the first one as an example. As shown in Figure 3, if the attacker sniffs a CLIENT HELLO message, they simply spoof a FATAL ALERT message. The SERVER HELLO and further messages from the server are dropped. The client considers only the alert message and sends a failure message to the server. Since the TLS transaction has failed, the encapsulating EAP protocol terminates with an EAP FAILURE message.

An important problem in this attack is to satisfy the timing requirement. The attacker needs their spoofed message to reach the client earlier than the normal SERVER HELLO message from the server (see Figure 3). This time gap includes:
1. The message delivery time in the wired network (both from the AP to the TLS server and from the TLS server to the AP).
2. The server’s processing time.
3. The message delivery time from the AP to the client in the wireless network.

This time gap may vary in different situations. For example, at the second attack point, the server usually needs to query the database and then verify the user’s identity and password, which can result in a larger processing time.

To achieve this, the attacker uses the AP’s MAC address as the source MAC address of the spoofed message to spoof the AP. Note that the EAP protocol is directly on top of the MAC layer, and IP and higher layers are not used at this stage. Therefore, attacks on IP layers and above, such as TCP RST attacks, are not applicable in this scenario.

#### Misleading Message Based Attack

In addition to directly spoofing and sending error messages to destroy the TLS communication, the attacker can stealthily spoof misleading messages that intentionally trigger the exception handling mechanism of the TLS protocol. We found that using a spoofed SERVER HELLO message with various parameter settings will cause the client side to automatically respond with a FATAL ALERT message to the server side. The message exchange procedure is shown in Figure 5.

According to the TLS RFC, the client side should provide a valid CLIENT HELLO message that contains a list of supported cipher suites. After that, the server responds with a SERVER HELLO message indicating its choice of the cipher suite. Besides the SERVER HELLO message, the client side needs to collect other required messages before moving forward to the next state, such as the SERVER KEY EXCHANGE message. When the attack takes place, the client side will receive two SERVER HELLO messages. In this case, the client itself is not able to figure out which SERVER HELLO message is the authentic one that should be used in the following process. Thus, the client side must notify the server side that an error has occurred using the FATAL ALERT message and eventually terminate the whole procedure.

#### Discussion

**Comparison between Error Message Based Attack and Misleading Message Based Attack**

Compared to the direct error message-based attack, the misleading message-based attack is more stealthy and harder to deal with. If the unprotected messages have multiple parameters to choose or set, the spoofed messages have many tricks to play. Even if the receiver notices the attack and gets multiple "normal" messages with different content, the receiver may not be able to differentiate the legitimate message from the faked ones. This brings difficulty in countermeasures, which we will further discuss in Section 6.

**Increasing the Attack Success Rate**

Our attacks on TLS-based EAP protocols satisfy the medium and protocol requirements (see Section 2.1). The only potential problem is the timing requirement, which requires the attack packet to reach the victim earlier than the legitimate packet. To make the attacker’s packet sent out to air faster, we use a trick described below.

Wireless LANs use the IEEE 802.11’s DCF (Distributed Coordination Function) [7], which is based on CSMA/CA (Carrier Sense Multiple Access with Collision Avoidance). According to the collision avoidance mechanism of CSMA/CA, a station performs a back-off procedure before initiating the transmission of a frame. After detecting that the medium is idle for a DIFS (DCF inter-frame spacing) interval, the station selects a random backoff period from [0, CW-1], where CW is referred to as the contention window. The station waits for the channel to be idle for a total time equal to this back-off period, after which it can transmit a data frame. The contention window CW has an initial value CWMin (31 in the standard) and is doubled when a collision occurs, up to the maximum value CWMax. When a frame is successfully transmitted, the contention window is set to its initial value CWMin.

To send packets faster, a simple way is to fix the CWMin and CWMax to the minimal number. The attacker can set its CWMintobe as small as 1, and in this case, the back-off time of the attacker is much smaller than that of the normal wireless nodes. In this case, the chance of sending the attack packet earlier than the legitimate packet is close to 1. In our real experiments (see Section 5.1.1), we find that the MADWIFI driver [3] provides command-line parameters to easily change the CWMin and CWMax.

### Generalization to Other EAP Protocols

The exception-triggered vulnerability does not only lie in TLS-based EAP protocols. Analyzing the authentication protocols in 2G and 3G cellular networks, EAP-SIM and EAP-AKA, we found they also potentially have a similar vulnerability. In EAP-SIM and EAP-AKA, the EAP NOTIFICATION message is used to indicate the result and exception cases, which is not protected through the authentication procedure. This protocol design offers the attacker an opportunity to maliciously use the EAP-Response/SIM/Client-Error message and EAP-Response/AKA/Client-Error message to interrupt the processing between clients and the authentication server and fail the authentication procedure. Note that the attack on EAP-SIM and EAP-AKA will work analytically, and it will be our future work to study its practicality.

### Case Study 2: Mobile IPv6 Return Routability Procedure

In this section, we describe our second case study on the Mobile IPv6 Return Routability (RR) procedure. We first introduce the Mobile IPv6 RR procedure and then describe in detail the attack procedure.

#### Background

Mobile IPv6 [18] is a protocol that allows nodes to remain reachable while moving around in the IPv6 Internet. Each mobile node (or MN in short) has a home address, regardless of its current location. If the mobile node roams to a remote network while communicating with other nodes (called Correspondent Nodes or CN), the packets from the Correspondent Nodes go to the home network first. These packets will be further forwarded to the MN’s address in the remote network (called care-of address) by the Home Agent. Obviously, this triangular routing is not optimized, and hence the Return Routability procedure is proposed in Mobile IPv6 to allow direct routing.

Basically, the Mobile Node tells its care-of address to the Correspondent Nodes, and the following traffic from CNs is sent directly to the MN’s care-of address. The application layer is not aware of the changes in the IP layer. To secure the Return Routability procedure, a simple weak authentication protocol is used, as detailed in the following paragraphs.

Figure 6 shows the message exchange in the Return Routability procedure (RR procedure). The RR procedure begins when the MN sends a HOMETESTINIT (HOTI) message to the CN through the HA and the CARE-OFTESTINIT (COTI) message directly to the CN. The CN responds with a HoT sent through the HA and a CoT sent directly to the MN. The MN uses the information in the HoT and CoT to generate a key, which it uses to sign the BINDING UPDATE message to the CN. Upon receipt of the BINDING UPDATE, the CN adds an entry for the MN in its binding cache and optionally sends a BINDING ACKNOWLEDGEMENT. Once this happens, the MN and CN will be capable of communicating over a direct route, thus no longer needing to go through the HA, optimizing the route between the MN and CN.

#### Vulnerabilities in Mobile IPv6 RR Procedure

We now introduce two vulnerabilities in the MIPv6 RR procedure to the exception-triggered attack: binding errors.