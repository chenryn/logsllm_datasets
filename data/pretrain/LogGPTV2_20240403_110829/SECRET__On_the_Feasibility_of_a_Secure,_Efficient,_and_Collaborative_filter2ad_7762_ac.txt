(cf. [17, sect. VII.A.]). To the best of our knowledge there is
no solution in the literature that realizes encrypted real-time
collaboration using the document approach.
Editing Structured Documents. All aforementioned
publications work on whole documents; they do not con-
sider protecting only parts of them. A publication by Zhang
et al. [37] proposes to split documents into parts and to en-
crypt them separately. The intent for this is reducing load
on light-weight devices and avoiding conﬂicts since they do
not use OT. Furthermore, those publications that mention
the concrete implementation of OT algorithms, use ones that
were designed for unstructured documents (e. g., documents
are treated as large arrays of characters).
Client Software.
Interestingly, the majority of publica-
tions concerning collaboration on encrypted documents used
custom browser extensions (or scripts for an existing exten-
sion like Michalas and Bakopoulos [27]) to realize their func-
tionality. Apart from custom client implementations, only
Feldman et al. mention a standalone web application that
requires Java as client for their tool.
Maliciously Behaving Servers. Several publications as-
sume that a server may not be honest but act maliciously by
tampering with the client- or server-side code. Venus [32],
SUNDR [22], and Depot [23] guarantee integrity and fault
tolerance in this scenario. Mylar [30] provides conﬁdential-
ity on the server by using searchable encryption based on
bilinear maps and veriﬁes the client-side code using digital
signatures in a browser extension. However, several system
design ﬂaws of this tool were found recently [15].
8396. DESIGN GOALS
From the literature, we derived a set of six properties for
a collaborative editor that we use as design goals:
A. Conﬁdentiality. Motivated by unprotected systems
like Google Docs or Microsoft Oﬃce Online, we require
to use proper encryption for reaching end-to-end conﬁ-
dentiality. This enables using untrusted storage servers
that are honest-but-curious. The main challenge here is
to cover all necessary cryptographic primitives and oper-
ations as-well-as the key management without any extra
software on the client.
B. Real-Time Collaboration. Interactive collaboration
requires all users that open a document to see edits of
other users with little to no delay. As outlined before,
OT algorithms enable this functionality while providing
all users a consistent view onto a document.
C. Software-as-a-Service (SaaS). The success of the SaaS
delivery model shows that users demand applications
that can be used without having to install a software
component ﬁrst.
Ideally, a collaborative editor should
be available as a web application since that enables us-
ing it on diﬀerent platforms, including mobile, and makes
it independent of the underlying operating system.
D. Flexibility. While previous approaches require all users
editing a document collaboratively to have access to the
same symmetric key, we want to go one step further.
With SECRET, documents may be edited by multiple
user-groups with diﬀerent access rights. Sections of doc-
uments should be protected in a ﬁne granular manner
for a speciﬁc user, a user-group, or any combination of
these. Only users that are allowed to view and edit the
particular section of a document can get access to the
corresponding key.
E. Obliviousness. A collaborative editor should hide the
revision history of a document or a section even to some-
one knowing the corresponding secret key. Motivation
for this property is that a new user joining the collabo-
ration should not be able to learn about the edits made
in the course of creating the document.
F. Eﬃciency. We require SECRET to be usable in low
bandwidth scenarios, such as mobile devices. Therefore,
the network traﬃc after initial loading the editor page
must not exceed typical mobile bandwidth (32 Kbit/s).
We also discuss integrity to prevent unwanted document
modiﬁcations (see Appendix A).
7. SECRET
With SECRET, we show that the properties discussed in
Section 6 can be realized. For conﬁdentiality, we refer to
Section 9.
7.1 Real-Time Collaboration
Each user enters data via the SECRET editor (see left
side in Figure 1). Edits are processed once a second by the
SECRET core that orchestrates the functionality: Modiﬁed
elements are encrypted and formatted as XML Encrypted
Data elements. These Encrypted Data elements are syn-
chronized with the untrusted storage server via our XML-
enabled variant of ShareJS.
Figure 1: SECRET’s detailed architecture overview.
7.2 Software-as-a-Service (SaaS)
SECRET must be easily available without any extra soft-
ware or installation process. Therefore, we implemented it
as a web application using CoﬀeeScript and Node.js. In or-
der to use it, only a recent browser is required. SECRET
has been tested with Google Chrome 50.
7.3 Flexibility
The ﬂexibility to protect sections of documents respect-
ing ﬁne granular access rights can be achieved since we only
consider structured documents and apply our new approach
combining tree-based OT with structure-preserving encryp-
tion. We treat subtrees of the document tree as our basic
units for OT, and replace them by ciphertext elements in
the stored document while maintaining the document struc-
ture. This concept is depicted in Figure 2. Since the editor
we use makes sure that an edit aﬀects exactly one subtree,
each edit operation will result in one subtree being sent to
the server. Thus each edit operation will only aﬀect one
ciphertext element.
The ﬁne granular access rights in SECRET require dis-
tributing a set of keys to every user. A classical approach
to this problem is using a Public Key Infrastructure (PKI)
where each user holds a key pair. In such an approach, the
keys for document sections would be wrapped using a user’s
public key and could be integrated in the document struc-
ture. However, the PKI approach has several drawbacks:
1. Key objects created by the WebCrypto API like a user’s
private key are not persistent. For key storage, the Web-
Crypto API refers to the Indexed Database API [24].
However, private keys stored in such a database are prone
to be deleted by mistake (e. g., if the Clear Browser Data
feature is used).
2. Private keys are not distributed. A user that wants to
continue editing a document with a diﬀerent device would
need to import her private key to that device. However,
if the key is protected (export set to false), this is im-
possible.
3. Public keys are not distributed. If user A wants to give
user B access to a document, A would need to know B’s
TLSShareJSOTJSONXMLShareJSJSONXMLWebsocketXML ParserXMLSec.jsSECRET CoreSECRET EditorSECRET Crypto (iframe)Local storage:key name → key objectPostMessageAPI:message, key nameWeb Crypto APImessage   key objectAuthenticationkey nameKey objectControllerSynchronization ModuleSplitter ModuleUntrustedStorage ServerStorageTrustedKeyserverUser/BrowserAuthentication ModuleKey Storage ModuleDevelopedbytheauthorsofthissubmissionExistingcomponentBrowser componentSame Origin PolicyOptionalWeb Origin: EditorWeb Origin: Crypto840Figure 2: Views of clients and untrusted storage server.
public key ﬁrst. To solve this, a directory for public keys
would be required.
To cope with this problem, we oﬀer two diﬀerent solutions
to ﬁt diﬀerent use-cases (cf. Section 8.1). Both approaches
allow relying solely on symmetric cryptographic primitives
without being aﬀected from the drawbacks of a PKI. Keys
are either requested from a keyserver by indicating the key
name given in the encrypted document, or derived from a
password using the WebCrypto API. In both cases, the sym-
metric keys are then stored in the local storage of a SECRET
crypto module, where they are protected from unauthorized
access. The crypto module itself is bound to particular web
origin (named Crypto on the right side of Figure 1) and
thus protected by the Same-Origin-Policy from illegitimate
access.
7.4 Obliviousness
Obliviousness cannot be achieved with the journaling ap-
proach to encrypted collaboration. Therefore, we choose the
document approach to realize SECRET.
7.5 Efﬁciency
For a ﬂexible document editing solution with ﬁne granular
access control for groups having access only to some docu-
ment parts, encrypting larger document parts (e. g., sections
or pages) is an obvious solution. In case of multiple users
issuing frequent edits to a document however, this approach
is ineﬃcient since even a small change requires re-encryption
and transmission of the whole encrypted part. This prob-
lem was already identiﬁed by Huang and Evans [17] and was
tackled by using an uncommon encryption mode of opera-
tion called RPC (cf. [4]) that supports eﬃcient incremental
updates of ciphertexts. This mode of operation is however
not supported by the WebCrypto API, which only oﬀers
CTR, CBC, CFB, and GCM modes of operation.
In our
scenario, all these modes of operation have a major down-
side: A small change (e. g., inserting a single character) to
the content leads to a new ciphertext, which has to be syn-
chronized.
In contrast to Huang and Evans, we rely on the structure
of a document rather than treating it as a large array of char-
acters. We keep eﬃciency by encrypting smaller parts of the
document using the well-known GCM mode of operation.
This way, we also keep SECRET’s bandwidth requirement
low enough to use it with a slow mobile connection.
8. SECRET’S ARCHITECTURE
A detailed architecture overview on SECRET is depicted
In general, there are three diﬀerent entities
in Figure 1.
taking part:
1. An optional trusted keyserver managing the symmetric
keys used to encrypt/decrypt blocks of the document. If
no keyserver is used, keys are managed by deriving them
from passwords.
2. An untrusted storage server, for example, a cloud service,
that hosts the web application, stores the encrypted doc-
ument, and provides a graphical editor to visualize and
edit the document.
3. Users who have access to diﬀerent parts of the document.
Their access to the document is restricted by the access to
the key that is necessary to decrypt the document part.
8.1 Key Management
SECRET’s key management consists of two parts. On
the one side, there is a key concept that allows to encrypt
diﬀerent document parts with diﬀerent keys. On the other
side, there is SECRET’s crypto module that executes all
cryptographic operations and locally caches keys.
Key Concept with Keyserver. Our ﬁrst key concept
variant makes use of a keyserver. On a quick peek, one
might think, that using a keyserver simply moves the trust
from one party to another one (e. g., in comparison to un-
encrypted Google Docs). This is true, when considering
individual end-users for SECRET. But a keyserver is an
important and desired goal in business use-cases: here, a
company only maintains a key server, which can be a small
and easy-to-backup server included into an isolated network
environment. All company members have access to it and
can thus use SECRET. The encrypted working data itself
can be hosted on an untrusted storage server at low cost and
high availability (Google, Amazon, . . . ).
SECRET’s key concept diﬀerentiates two types of sym-
metric keys: Group Keys (GKs) and Block Keys (BKs).
GKs are accessible by a group of users. They are stored on
the keyserver and provided to authorized users. Each GK
is labeled with a unique ID that is used to identify the key
when requested by the browser.
BKs are used to encrypt a speciﬁc part of the document
encapsulated in blocks. If a group is meant to have access to
the block, its BK is wrapped (encrypted) using the GK of
the group. This wrapped key is stored in the XML structure
of the block, together with the ID as information to which
group it belongs to. If multiple groups have access to a block,
the (identical) BK is wrapped using all corresponding GKs
and deposited within the block (see Figure 3).
Figure 3: Components included in each Encrypted Block.
Key Concept without Keyserver. A diﬀerent use-case
exists if end-users not related to a speciﬁc company want to
use SECRET. In this case, a keyserver does not make sense,
because the end-user would have to trust it. Because of this,
we designed a key concept without the usage of a keyserver.
This is realized by using a Password-Based Key Deriva-
tion Function (PBKDF) and works as follows: Instead of
enforcing a user to authenticate to a keyserver (e. g., with
username/password), we can use a password to derive the
GK.
For this purpose, the WebCrypto API oﬀers a
crypto.deriveKey() function that can trigger PBKDF2.
Client viewServer viewEncrypted Block (EB)Encrypted KeysEncrypted Data (ED)Encrypted Data (ED)Wrapped BK for group AWrapped BK for group B841The password is then a secret that has to be shared between
the parties, for example, via email or instant messaging.
SECRET’s Crypto Module. The crypto module exe-
cutes all cryptographic operations. It works as an encryp-
tion/decryption oracle for the editor component. In other
words, the editor can ask the oracle to encrypt or decrypt a
speciﬁc block. If the user is granted to do so, for instance, if
he is able to unwrap the BK, the crypto module executes the
operation. It also oﬀers generating fresh BKs and wrapping
those using existing GKs.
Results are returned to the editor by using the PostMes-
sage API [35] enabling the communication between diﬀerent
origins within the browser. The purpose of this design is to
ensure, that GKs never leave the crypto module and that
BKs are only exported in encrypted form. All communi-
cation between the editor page and the crypto module uses
well-deﬁned interfaces. Technically, we designed the crypto
module as an iframe element that is embedded in the editor
component. The web origin [2] of the crypto module is set
to a diﬀerent domain (e. g., to the keyserver’s domain), so
that the DOM access from the editor is restricted by the
Same Origin Policy.
The connection of SECRET’s crypto module to the key-
server requires a secure channel. This can be achieved by
using TLS with mutual authentication via client certiﬁcates,
and by manually registering each client’s certiﬁcate at the
keyserver. After the user’s authentication with the key-
server, the crypto module can request keys to which the
user has access to.
8.2 Untrusted Storage Server
The untrusted storage server is a publicly available web
application providing three main features:
Editor. A graphical editor delivered to the client and exe-
cuted by the browser. It enables the visualization and edit-
ing of the document in the browser.
OT with ShareJS. The server component of ShareJS keeps
a list of operations that were sent by clients in a database.
After receiving a new operation from a client, the server
checks the snapshot of the document to which the client
refers to and whether there are other operations that are
conﬂicting with the new one. If that is the case, the server
applies OT algorithms to generate operations shifting ev-
ery connected client to the latest snapshot of the document
based on the snapshot of the document the server suspects a
client to have. This process is complex and computationally
expensive. We did not modify the ShareJS server compo-
nent, but added our XML API (cf. Section 4).
To identify a component of the document (i. e. an ele-
ment, attribute, text, etc.) to operate on, the server expects
a path to that component. A path is technically a list of zero-
indexed integers and names that identify child nodes below
each respective element. For example, consider the following
document: text456.
A path to identify the b element is [2,0] since the x element
is the third node below root and b is the ﬁrst node below x.
Paths can even identify single characters in text nodes; the
character 5 in the text node 456 has the path [2,0,0,1].
Storage. For each document, the untrusted storage server
stores a gzip compressed ﬁle containing the latest snapshot
and a list of recent operations related to these documents
Figure 4: Example document containing encrypted and un-
encrypted blocks.
in a database. Compressing XML documents is a common
technique (e. g., for oﬃce ﬁles). Note that the untrusted
storage server has no access to any key and therefore cannot
decrypt protected parts.
8.3 SECRET in the Browser
SECRET Editor
SECRET consists of diﬀerent components executed in the
user’s browser. Figure 6 shows a screenshot of our proof-of-
concept implementation that we developed and evaluated.
8.3.1
If multiple users simultaneously edit a document, each
client has to handle two types of events: (1.) the user itself
generates local edits of the document and (2.) the untrusted
storage server provides external edit operations executed by