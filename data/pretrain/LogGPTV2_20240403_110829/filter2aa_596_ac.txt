### Installation and Stability Assurance
To ensure stability, the client must install the update. In the event of a malicious update, this procedure is unnecessary as our update operates independently from others.

### Targeting a Specific Client
The update can be deployed to all clients within the same WSUS group. To target a specific client, it must be moved into a dedicated group. A new WSUS group can be created by calling the `spCreateTargetGroup` stored procedure, which requires the new group's name and its GUID as arguments. The `spAddTargetToTargetGroup` procedure then adds the target client to the newly-created group, taking the groupâ€™s GUID and the local identifier of the targeted client as arguments. This local identifier can be retrieved using the `spGetComputerTargetByName` procedure, which takes the fully-qualified domain name (FQDN) of the targeted client as an argument.

Adding a client to a newly-created group via the `spAddTargetToTargetGroup` procedure does not remove the client from its original group, allowing updates from the original group to still be applied. While the WSUS interface does not support this, it is possible through direct use of the stored procedures in the database.

It is also possible to add multiple clients to this group, expanding the compromise, to target, for instance, all domain controllers or all workstations used by administrators.

### Update Deployment
The update is effectively deployed on the targeted client by approving it through the `spDeployUpdate` stored procedure. This procedure requires the update identifier and the target group GUID as arguments. The update identifier should correspond to the bundle update.

After executing `spDeployUpdate`, the WSUS service's state machine is triggered to download the binary, if not already done, as configured by default.

### Introducing WSUSpendu
A tool called WSUSpendu has been developed to automate the actions required to inject an attacker-controlled update. This tool is freely available at [this address](#). The goal of this tool is to gain administrative access to WSUS server clients. It is written in PowerShell and runs natively without additional modules, demonstrating that a simple script can be easily adapted for any Windows Server version.

For example, the SQL server connection is established using .Net objects:
```powershell
# Example of a PowerShell database query
```

The script requires either PsExec or BgInfo, the only two binaries known to have an Authenticode signature by Microsoft that can execute arbitrary commands on any Windows system. The script takes the binary arguments as parameters and automatically injects the chosen binary and crafted metadata into the database (see Listing 4.7 and Figure 4.6). Both the PowerShell script and the chosen binary need to be uploaded to the WSUS server for local execution.

**Listing 4.7: Wsuspendu.ps1 injection example, using PsExec as a signed binary**

Next time the client checks for new updates, the injected update will appear (see Figure 4.7). The update is designed to be downloadable and installable, subject to the client's configuration for automatic or manual installation. The new update can be installed without any user interaction.

**Figure 4.6: Appearance in the WSUS console.**
**Figure 4.7: Notification of the new injected update, which needs to be downloaded and installed by the client.**

### Auditing WSUS
The update process is fundamental to security assessments. However, checking this process is not straightforward and is often limited to a set of representative workstations and servers. A critical vulnerability on a single workstation can lead to catastrophic results. For example, the MS14-018 vulnerability on domain controllers can compromise the entire Active Directory. In such cases, how can we assess the vulnerability state of all computers?

Access to the WSUS server is crucial for auditing, as all update actions are logged in the WSUS database. It is easy to request data from this database to determine the deployment state of each update. Additionally, the WSUS server centralizes information, storing dates in a universal format, unlike the locale-dependent formats used on final systems. This uniformity is important when parsing dates automatically.

The audit will have two major parts:
1. **WSUS Server Configuration:** Ensuring the server is well-configured to maintain overall security (see Sections 1.3 and 3.6).
2. **Effective Updates Deployment State:** A more traditional part concerning the actual state of updates.

Key checkpoints include:
- WSUS server parameters (TLS usage, upstream and downstream servers, etc.).
- Last synchronization with Microsoft Update servers.
- Connections to other WSUS servers and how they are managed.
- Registered machines in the WSUS server.
- Machines by operating system.
- Breakdown by machine category (servers, workstations, etc.).
- Machines with many unpatched vulnerabilities.
- Declined updates.
- Update apply state per machine, with their apply date.

Database requests can link Knowledge Base (KB) numbers with Microsoft Security Updates (MS), aiding auditors in cross-referencing information from the Microsoft website.

When checking update states, it is essential to validate which updates supersede others. Sometimes, updates are revised, making the initial one obsolete. From the WSUS server's perspective, the first update will be marked as "not applicable" and no longer delivered. This superseding mechanism must be considered during audits, as a vulnerability might be patched in multiple updates. The MBSA tool provided by Microsoft can help filter out the results given by the WSUS audit.

The script [script_name] has been written to facilitate these requests, enabling auditors to run them and obtain the necessary information.

### Microsoft Network Architecture Issues

#### Administration Principles
Windows systems administration principles can be challenging to implement and even more so to maintain daily. Single-sign-on authentication constrains authentication secrets to be in memory on each system a user logs into. A resource in a distinct sensitivity level should not depend on an administrator from another sensitivity level. Compromising a lower-sensitivity resource can lead to the theft of upper-level administrator credentials. Conversely, compromising a lower-sensitivity administrator's workstation administering an upper-sensitivity resource can also lead to the compromise of upper-level credentials. In both cases, authentication secrets can be reused to pivot and propagate inside the network.

Microsoft provides a paper on securing the administration architecture, emphasizing the clean source principle. This principle describes the control between objects, illustrated by the ADCP (Active Directory Control Path) tool from the French cyberdefense agency (ANSSI).

As discussed, it is possible to compromise WSUS clients when the WSUS server is compromised, indicating a control relationship from the WSUS server to the systems it updates. Therefore, WSUS servers delivering updates to domain controllers must be treated at the same sensitivity level as these domain controllers. These WSUS servers should get their updates directly from Microsoft, without an intermediary WSUS server, especially if it is of a lower-sensitivity level. Microsoft Update servers, the first upstream of all WSUS servers, should be considered neutral, providing secure updates that must be applied.

#### One WSUS Server for Multiple Forests
Many organizations have multiple independent Active Directory forests to create distinct security frontiers. However, it is common for WSUS servers to be chained between these forests to reduce update qualification costs. This setup establishes a control path, where compromising one domain in an upstream forest can lead to the compromise of all downstream forests, breaking the Active Directory security frontier.

#### WSUS Server for a Disconnected Network
Disconnected networks present additional challenges for trusting updates. If a network is disconnected due to its sensitivity, updates applied on these networks come from an Internet-connected WSUS server. Updates are usually qualified once on the connected WSUS server, and administrators automatically approve them on the disconnected network.

With automatic approvals, network takeover can occur as soon as the copy is finished on the disconnected WSUS server, without any administrator intervention. Detecting the copy on the disconnected network to add and approve a malicious update is possible, though detecting the change of network is left as an exercise for the reader. Triggers can be a key place to put a backdoor on the server.

This situation highlights an easy and automatic way to take control of disconnected networks, which is critical.

### Recommendations

#### Securing the WSUS Service
Securing the WSUS service involves hardening the service and implementing a well-thought-out architecture. The correct WSUS configuration primarily relies on activating the TLS layer for client requests. This can be done in three steps:
1. Generate a certificate.
2. Activate the TLS configuration on the WSUS server.
3. Activate the TLS configuration on the WSUS clients.

Generating a TLS certificate can be achieved with IIS Manager. The certificate can be signed by a local PKI or an external third-party. The certificate must be linked to the WSUS website in IIS' configuration. TLS must be required for the following virtual roots: APIRemoting30, ClientWebService, DSSAuthWebService, ServerSyncWebService, and SimpleAuthWebService. Finally, force TLS usage on the WSUS root server using `wsusutil`.

Activating TLS connections on WSUS clients can be achieved using Group Policy Objects (GPOs). Ensure the server's certificate is deployed on the clients if it is not signed by a trusted third-party already in place.

#### Multiple WSUS Servers Architectures
WSUS server dependencies on another functional domain can extend beyond update services. If separation between environments is decided, it is mandatory for administrative and support services not to depend on another functional domain. This applies to administrators, their workstations, network management infrastructures like SCCM, control and supervision infrastructures like SCOM, backups, and update services like WSUS. A control relationship can be exploited as described in this article.

#### Disconnected Networks Case
Handling disconnected networks is complex. A WSUS server, responsible for applying updates, could propagate viruses, leading to a tendency to stop applying updates altogether. However, good security practices disagree with this solution. Care must be taken to prevent attackers from gaining easy access to a disconnected network.

One approach is to build a WSUS server on the Internet network that does not depend on any Windows domain. Its authentication should be local, and a specific hardening should be applied to minimize its attack surface. Updates should be synchronized regularly with Microsoft Update services before being transferred to the disconnected network. A proxy can be used to avoid direct Internet access, but it should not break TLS streams. Transferring data to the disconnected network should be done by disconnecting from the Internet, then connecting to the disconnected network, or using a one-way diode. Data transfer from the disconnected network to the Internet-connected network must be prohibited.

A common configuration seen during security assessments involves virtualization technology. The following procedure can be followed:
1. The WSUS server is a virtual machine on a hypervisor, isolated from the rest of the network.
2. Both the WSUS VM and the host have hardened configurations.
3. Administration is done through physical access to the machine.
4. The WSUS server is synchronized with Microsoft's servers without intermediaries.
5. Daily, the WSUS VM is cloned and copied onto a removable media.
6. Once the removable media is on the disconnected network, the VM can be copied, booted, and used.
7. After these operations, the removable media data can be erased.

### Conclusion
WSUS is a core component of Windows networks, along with other services like Active Directory, SCOM, and SCCM. Proper configuration is essential to improve its security. Otherwise, its presence can pose a significant risk to the network's security and play into an attacker's hands, potentially compromising many machines.

Removing the Active Directory component because it is compromised would be as impractical as removing the WSUS server or any update mechanism. This article has shown that a control relationship exists from the WSUS server to all its clients. Administrators, network architects, and auditors must carefully consider the placement and administration of this server within the network.

### Bibliography
[1] WSUS Offline Update. [URL]
[2] Andreas Brantholm. Windows Product/Update Classification Codes for SCCM/WSUS Usage. [URL]
[3] Paul Stone and Alex Chapman. WSUSpect â€“ Compromising the Windows Enterprise via Windows Update. BlackHatUS, 2015.
[4] Don Jones. Windows PowerShell: Doing Databases with Powershell. [URL]
[5] Emmanuel Gras, Lucas Bouillot, and Geraud de Drouas. ADCP - Active Directory Control Paths. [URL]
[6] Microsoft. Message Processing Events and Sequencing Rules. [URL]
[7] Microsoft. Microsoft Baseline Security Analyzer. [URL]
[8] Microsoft. Step 3: Configure WSUS. [URL]
[9] Microsoft. Well-Known Detectoid IDs. [URL]
[10] Microsoft. WSUS Classification GUIDs. [URL]
[11] Corey Plett. Microsoftâ€™s Clean Source Principle. [URL]