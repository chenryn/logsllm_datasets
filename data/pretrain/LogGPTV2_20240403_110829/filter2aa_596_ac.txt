be installed by the client to assure stability. In the case of a malicious update, this
procedure is not necessary as our update will be independent from the others.
3.5
Targeting a speciﬁc client
The update in itself can be deployed on every client of the same WSUS group. To target
a specific client, one would thus need to move this client into a dedicated group.
Creating a WSUS group can be done through the call of the spCreateTargetGroup
stored procedure, which takes its new name and the GUID assigned to this group as
arguments. The spAddTargetToTargetGroup can then add the target client into the
newly-created group. This latter procedure takes the group’s GUID and the local iden-
tifier for the targeted client. This identifier can be retrieved using the spGetComputer-
TargetByName procedure, which takes the fully-qualified domain name (FQDN) of the
targeted client as an argument.
Adding a client into a newly-created group using the spAddTargetToTargetGroup pro-
cedure does not remove the client from its former group, allowing for the updates from
the latter to still be applied. This is not something the WSUS interface allows to do, but
it is possible through the direct use of the stored procedures from the database.
It is obviously possible to add more than one client to this group, enlarging the com-
promise, to target for intance all domain controllers or all workstations used by the
administrators.
3.6
Update deployment
Approving the update through the stored procedure spDeployUpdate announces the
effective deployment of the update on the targeted client. This procedure takes the
update identifier and the target group GUID on which the update has been approved
as arguments. The update identifier to give is the one of the bundle update.
The WSUS service’s state machine is then triggered following spDeployUpdate execu-
tion to download the binary, if not already done, as it is configured by default.
22
WSUSpendu
Introducing WSUSpendu
A tool has been created to automate the aforementioned actions needed to inject
an attacker-controlled update. This tool is freely available at the following address:
.
This tool’s goal is to gain administrative access of WSUS server’s clients. It has been
developed in PowerShell, and runs natively [4] without additional modules. The idea
here is to show that a simple script, adapted for any Windows Server version, can be
developed easily. For instance, the SQL server connection is done through the use of
.Net objects:
Listing 4.6: PowerShell database query example
The script needs either PsExec or BgInfo, the only two binaries known to have an Authen-
ticode signature by Microsoft that can execute arbitrary commands on any Windows
systems. The script takes the binaries arguments in parameter and automatically in-
jects the chosen binary and crafted metadata into the database (cf. listing 4.7 and
figure 4.6). The PowerShell script, as well as the chosen binary, needs to be uploaded
to the WSUS server for a local execution.
Listing 4.7: Wsuspendu.ps1 injection example, using PsExec as a signed binary
Next time the client will get its new-updates list, a new update will appear (cf. figure 4.7),
one which has been designed to be downloadable and installable. The update will then
be subject to the client’s configuration, whether it has been configured to automatically
or manually install updates. The new update in itself is able to be installed without any
user interaction.
23
WSUSpendu
Figure 4.6: What it looks like from the WSUS console.
Figure 4.7: Notification of the new injected update, which needs to be downloaded
and installed, to the client.
24
WSUSpendu
Auditing WSUS
The update process is a fundamental part of a security assessment. However, check-
ing this process is functioning smoothly is not something easily done. This checking
is usually limited to a set of representatives workstations and servers. But a critical
vulnerability only on one workstation can lead to catastrophic results. The MS14-018
vulnerability shows an example of such critical vulnerability on domain controllers: one
of them presents this vulnerability and the entire Active Directory is given to a potential
attacker. In such cases, how can we have a glimpse of the vulnerability state of all the
computers?
Having access to the WSUS server will help us in this auditing task, as any update action
is logged in the WSUS database. It is thus easy to request data from this database in
order to know each update deployment state. Moreover, as the WSUS server is a
centralized system, the information got from the database are canonized: for instance,
dates of updates apply are stored in a universal format, whereas they are stored as
locale-dependent when installed on the final systems. Therefore, a US or GB system
won’t have the same date format as for FR systems. When parsing automatically the
dates, this is an important problem to have in mind.
As per the problems explained in this paper, the audit will have two major parts. The first
part will deal with the WSUS server in itself, where this server has to be well-configured
not to decrease the overall security level (cf. sections 1.3 and 3.6). The second part is
a more traditional one and concerns the effective updates deployment state.
It is possible to get the following check points (not an exhaustive list):
• WSUS server parameters (TLS usage, upstream and downstream servers, and
so on);
• last synchronization on the Microsoft Update servers;
• connections to potential other WSUS servers, and how this connection is done;
• listing of the registered machines in the WSUS server;
• listing of the machines by operating system;
• breakdown by machine category (servers, workstations, and so on);
• listing of machines with a lot of unpatched vulnerabilities;
• listing of declined updates;
• update apply state per machine, with their apply date.
Database requests also allow for linking Knownledge Base (KB) numbers with Microsoft
Security Updates (MS). This linkage will please every auditor trying to make this work
out from the Microsoft website.
25
WSUSpendu
One of the main points when checking updates states is validating which update su-
persedes which, and which one is superseded by which. Indeed, it sometimes happens
that updates are delivered by Microsoft, but then revised with a new update, making the
first one useless. From the WSUS server point-of-view, the first one will be switched to a
”not applicable” state and will not be delivered anymore. This superseding mechanism
has to be taken into account while checking for the update apply as a vulnerability
might have been patched in multiple updates, one superseding another. An auditor
then needs to know the dependencies implied by this superseding mechanism, which
could be rapidly unmanageable. One of the answers to this problem could be to have
faith in the MBSA [7] tool provided by Microsoft to filter out the results given by the
WSUS audit.
The script  has been written to ease requests. It allows to run all those
requests and get the answers for auditing purposes.
26
WSUSpendu
Microsoft network architecture issues
6.1
Administration principles
Windows systems administration principles may be difficult to put in place, but applying
them on a day to day basis can be even much more difficult: single-sign on authentica-
tion constrains authentication secrets to be in memory on each system a user is logged
on. A resource in a distinct sensitivity level should not depend of an administrator on
another sensitivity level. Indeed, the compromise of a lower-sensitivity resource will
lead up to the theft of upper-level administrator’s credentials. On the other hand, the
compromise of a lower-sensitivity administrator’s workstation administering an upper-
sensitivity resource will lead up to the compromise of upper-level credentials. In both
cases, authentication secrets can be reused to pivot and propagate inside the network.
From this ascertainment, Microsoft [11] is providing a paper about securing the admin-
istration architecture, with the clean source principle. Microsoft describes the notion of
control between objects in this paper, which can also be illustrated by the ADCP (Active
Directory Control Path) tool [5] of the French cyberdefense agency (ANSSI).
As we have seen it, it is possible to compromise WSUS clients when the WSUS server is
already compromised, thus the existence of a control relationship from a WSUS server
to the systems this server update. The WSUS servers delivering updates to the domain
controllers therefore need to be treated at the same sensitivity level as these domain
controllers. These WSUS servers have to get their updates from Microsoft, without
another WSUS server in-between, especially if of a lower-sensitivity level. Microsoft
Update servers, the first upstream of all WSUS servers, have to be considered as neutral:
the updates they are delivering are provided in a secure way and have to be applied.
6.2
One WSUS server for multiple forests
A lot of organizations have multiple independent Active Directory forests. This archi-
tecture is often chosen in order to have distinct security frontiers. However, it seems
more often than not that the WSUS servers are chained between these forests: a unique
update policy allows for reducing updates qualification costs.
As seen above, this dangerous relationship establishes a control path. The compromise
of one domain inside one of the upstream forest, from the WSUS point-of-view, leads
up to the compromise of all downstream forests. The Active Directory security frontier
is therefore broken by this new control relationship.
27
WSUSpendu
6.3
A WSUS server for a disconnected network
The disconnected network scenario shows more problems for trusting updates. If a
network is disconnected, it is usually because of its sensitivity. However, updates ap-
plied on these networks come from an Internet-connected WSUS server. Moreover,
updates are usually qualified only once: on the WSUS server which is connected to
Internet. Administrators thus approve automatically updates, already qualified, on the
disconnected network.
Moreover, with automatic approvals, the network takeover can happen as soon as the
copy is finished on the disconnected WSUS server, without any administrator interven-
tion. In the same idea, it should be possible to add a trigger detecting the copy on the
disconnected network to add and approve a malicious update - detecting the change
of network is left as an exercise to the reader. Moreover, triggers are a key place to
put a backdoor on the server...
This situation thus shows an easy and automatic way to take control of disconnected
networks, which is critical.
28
WSUSpendu
Recommendations
Securing a Microsoft update architecture comes by taking care of the various security
problems exposed throughout this whole article. A hardening step has to be done on
the WSUS service in itself, but a well-thought architecture is also a mandatory step.
7.1
Securing the WSUS service itself
The correct WSUS configuration mainly relies on activating the TLS layer for clients
requests. This configuration can be done in three steps [8]:
• generate a certificate;
• activate the TLS configuration on the WSUS server;
• activate the TLS configuration on the WSUS clients.
Generating a TLS certificate can be achieved with IIS manager. It is possible to sign
one’s certificate by a local PKI or by an external third-party. The certificate then needs to
be linked to the WSUS website in IIS’ configuration. TLS has to be required for the fol-
lowing virtual roots: APIRemoting30, ClientWebService, DSSAuthWebService, Server-
SyncWebService and SimpleAuthWebService, found inside the WSUS website. The fi-
nal step is to force the TLS usage on the WSUS root server, using wsusutil: 
  where  stands for the DNS name of the WSUS server.
Activating TLS connections on WSUS clients can be achieved by using the GPO mech-
anism. Beware that the server’s certificate has to be deployed on the clients if it is not
signed by a trusted third-party already in place on the various clients.
7.2
Multiple WSUS servers architectures
WSUS server dependency against another functional domain can be enlarged outside
updates services’ scope. From a broad point-of-view then, if, for any reason, separation
between environments has been decided, it is mandatory for administrative and support
services not to depend on another functional domain.
This situation is therefore applicable for administrators, their workstations, the network
managing infrastructures like SCCM, control and supervise infrastructures like SCOM,
backups, and finally for the point of this article, update services such as WSUS. On
the other hand, a control relationship can be exploited by means such as explained
throughout this article.
29
WSUSpendu
7.3
Disconnected networks case
The disconnected networks case is more complex. Indeed, having a WSUS server,
normally responsible for applying updates thus increasing security, propagating viruses
would be disastrous. If the update process is propagating viruses, the tendency would
be to stop applying updates on the disconnected networks altogether. Good security
practices would of course disagree with this ”solution”. However, care must be taken
to avoid giving an attacker an easy access to a disconnected network.
One would thus build a WSUS server on the Internet network which would not depend
on any Windows domain (cf. previous recommendation). Its authentication would be
local only, and a specific hardening would have been applied in order to limit its at-
tack surface to a minimum (no more service than necessary, bad-ass passwords, local
network filtering, and so on). Updates then need to be synchronized regularly with Mi-
crosoft Updates services, before putting the data on the upper-level, the disconnected
network. The use of a proxy to avoid the server going straight on the Internet, can be
achieved if it is not configured to break TLS streams. Of course, putting the data on the
upper-level has to be done by disconnection from the Internet network, then connection
to the disconnected network, or by the use of a one-way diode. Passing data from the
upper-level to the Internet-connected network has to be prohibited by all means.
The most often seen configuration during security assessment is using the virtualization
technology, so the following procedure could be done for these situations:
1. WSUS server is a virtual machine on an hypervisor. This latter is out-of-
bounds from the rest of the network (authentication, network filtering, and so
on);
2. both WSUS VM and the host have seen their configuration hardened (au-
thentication, updates, local filtering, exploit mitigations, and so on);
3. both WSUS VM’s and host’s administration are done through a physical ac-
cess onto the machine;
4. the WSUS server is synchronized with Microsoft’s servers, without intermedi-
ary.
5. once a day, the WSUS VM is cloned and copied onto a removable media;
6. once this removable media is on the upper-lever, on the disconnected net-
work, the VM can be copied, booted, and used;
7. once these operation are done, the removable media data can be erased.
30
WSUSpendu
Conclusion
WSUS is a core component on which Windows networks rely on, as well as other ser-
vices (Active Directory, SCOM, SCCM, and so on). As these other services, particular
configuration switches need to be in place to improve this component’s security. Other-
wise, the simple presence of such a component can turn against the network’s security
and play the game of an attacker, being able to compromise a lot of machines.
Removing the Active Directory component of your network because the fact that it is
compromised will endanger the whole network would be as stupid as removing the
WSUS server, or any update mechanism, because of these new threats.
This article has shown that a control relationship exists from the WSUS server to all its
clients. The administrators, network architects and architecture auditors thus need to
take care as to where is this server inside the network, and who is able to administrate
this server.
31
WSUSpendu
Bibliography
[1]
Wsus offline update. .
[2]
Andreas Brantholm.
Windows Product/Update Classification Codes for SC-
CM/WSUS Usage.
.
[3]
Paul Stone and Alex Chapman. WSUSpect – Compromising the Windows Enter-
prise via Windows Update. BlackHatUS, 2015.
[4]
Don Jones. Windows PowerShell: Doing Databases with Powershell. 
.
[5]
Emmanuel Gras, Lucas Bouillot and Geraud de Drouas. ADCP - Active Directory
Control Paths. .
[6]
Microsoft. Message Processing Events and Sequencing Rules. 
.
[7]
Microsoft. Microsoft Baseline Security Analyzer. 
.
[8]
Microsoft.
Step 3:
Configure WSUS.
.
[9]
Microsoft. Well-Known Detectoid IDs. 
.
[10] Microsoft.
WSUS Classification GUIDs.
.
[11] Corey Plett. Microsoft’s clean source principle. 
.
33
WSUSpendu