# dotnet-serialize-101
> java太卷了，找点新的学习方向，从0到1学习dotnet的一些反序列化漏洞。
# 简述dotnet序列化和反序列化
同java类比，dotnet也需要对某个对象进行持久化处理，从而在任何时间都能够恢复这个对象。为什么要使用序列化？因为我们需要将重要的对象存入到媒体，这个媒体可能是数据库或者是文件，或者我们需要将对象进行网络传输传递到另一个服务上，而这个对象转媒体(数据库、文件、网络传输流)的过程就是序列化的过程，反序列化则正好相反。
# 一个简单序列化的例子
微软官方文档给出了内置库中可以序列化的类型列表，[见这里](https://docs.microsoft.com/zh-cn/dotnet/standard/serialization/binary-serialization)。先来声明一个实体类。在java中，序列化和反序列化需要实现Serializable接口，在dotnet中则是使用`特性`的方式进行标记Serializable。
    [Serializable]  
    public class MyObject
    {  
      public int n1;  
      [NonSerialized] public int n2;  
      public String str;  
    }
你也可以指定`[NonSerialized]`表示不能被序列化的字段。接下来我们构建一个MyObject对象并对其序列化和反序列化。
    using System;
    using System.IO;
    using System.Runtime.Serialization;
    using System.Runtime.Serialization.Formatters.Binary;
    namespace NetSerializer
    {
        [Serializable]
        public class MyObject
        {
            public int n1;
            [NonSerialized] public int n2;
            public String str;
        }
        class Program
        {
            public static void BinaryFormatterSerialize(string file, object o)
            {
                BinaryFormatter binaryFormatter = new BinaryFormatter();
                FileStream fileStream = new FileStream(file, FileMode.Create, FileAccess.Write, FileShare.None);
                binaryFormatter.Serialize(fileStream, o);
                fileStream.Close();
                Console.WriteLine($"serialize object {o} to file {file}.");
            }
            public static object BinaryFormatterDeserialFromFile(string file)
            {
                IFormatter formatter = new BinaryFormatter();
                Stream stream = new FileStream(file, FileMode.Open, FileAccess.Read, FileShare.Read);
                object o = formatter.Deserialize(stream);
                stream.Close();
                return o;
            }
            static void Main(string[] args)
            {
                try
                {
                    MyObject myObject = new MyObject();
                    myObject.n1 = 1;
                    myObject.n2 = 2;
                    myObject.str = "jack";
                    BinaryFormatterSerialize("1.bin", myObject);
                    MyObject myObject1 = (MyObject)BinaryFormatterDeserialFromFile("1.bin");
                    Console.WriteLine($"n1:{myObject1.n1}");
                    Console.WriteLine($"NonSerialized n2:{myObject1.n2}");
                    Console.WriteLine($"str:{myObject1.str}");
                }
                catch (Exception e)
                {
                    Console.WriteLine(e.Message);
                }
                Console.ReadKey();
            }
        }
    }
输出结果为：
    serialize object NetSerializer.MyObject to file 1.bin.
    n1:1
    NonSerialized n2:0
    str:jack
可以看到对象除了被标记不能被序列化的字段以外全部恢复到了原来的值。查看生成的bin文件，发现序列化之后的数据采用`0001 0000`开头
# Formatter
在序列化的时候我们引入了一个BinaryFormatter类，这个类表示使用二进制的形式进行序列化，而在dotnet中有很多其他的formatter类，每一个formatter都对应了一种序列化的格式，列举几个：
  1. BinaryFormatter 用于二进制格式
  2. SoapFormatter 用于序列化soap格式
  3. LosFormatter 用于序列化 Web 窗体页的视图状态
  4. ObjectStateFormatter 用于序列化状态对象图
当然还有一些其他格式的序列化类，比如XmlSerializer、JsonSerializer等用于生成xml、json格式的数据，这个以后再说。
这些formatter类都实现了名为IFormatter、IRemotingFormatter的接口，其中IRemotingFormatter是用来远程调用的RPC接口，它也实现了IFormatter，所以重点看IFormatter接口。
IFormatter定义了序列化和反序列化的两个方法，以及三个字段，其中每个字段含义如下：
类 字段名 | 含义用途  
---|---  
ISurrogateSelector SurrogateSelector | 序列化代理选择器 接管formatter的序列化或反序列化处理  
SerializationBinder Binder | 用于控制在序列化和反序列化期间使用的实际类型  
StreamingContext Context | 序列化流上下文 其中states字段包含了序列化的来源和目的地  
通过这三个字段，我们可以控制序列化和反序列化时数据的类型、值以及其他信息。
# BinaryFormatter序列化的生命周期和事件
根据微软的文档，当formatter调用Serialize方法的时候，会有以下的生命周期。
  1. 首先确定formatter是否有代理选择器，如果有则检查代理选择器要处理的对象类型是否和给定的对象类型一致，如果一致，代理选择器会调用`ISerializable.GetObjectData()`。
  2. 如果没有代理选择器，或者代理选择器不处理该对象类型，则检查对象是否有`[Serializable]`特性。如果不能序列化则抛出异常。
  3. 检查该对象是否实现ISerializable接口，如果实现就调用其GetObjectData方法。
  4. 如果没实现ISerializable接口就使用默认的序列化策略，序列化所以没标记`[NonSerialized]`的字段。
而在序列化和反序列化的过程中还有四个回调事件
特性 | 调用关联的方法时 | 典型用法  
---|---|---  
[OnDeserializingAttribute](https://docs.microsoft.com/zh-cn/dotnet/api/system.runtime.serialization.ondeserializingattribute) | 反序列化之前
| 初始化可选字段的默认值。  
[OnDeserializedAttribute](https://docs.microsoft.com/zh-cn/dotnet/api/system.runtime.serialization.ondeserializedattribute) | 反序列化之后 |
根据其他字段的内容修改可选字段值。  
[OnSerializingAttribute](https://docs.microsoft.com/zh-cn/dotnet/api/system.runtime.serialization.onserializingattribute) | 序列化之前 |
准备序列化。 例如，创建可选数据结构。  
[OnSerializedAttribute](https://docs.microsoft.com/zh-cn/dotnet/api/system.runtime.serialization.onserializedattribute) | 序列化之后 |
记录序列化事件。  
可以根据几个具体的案例来看序列化和反序列化的生命周期
    using System;
    using System.IO;
    using System.Runtime.Serialization;
    using System.Runtime.Serialization.Formatters.Binary;
    using System.Security.Permissions;
    namespace NetSerializer
    {
        [Serializable]
        public class MyObject : ISerializable
        {
            public string str { get; set; }
            public MyObject()
            {
            }
            //实现了ISerializable接口的类必须包含有序列化构造函数，否则会出错。
            protected MyObject(SerializationInfo info, StreamingContext context)
            {
                Console.WriteLine("MyObject(SerializationInfo info, StreamingContext context)");
                str = info.GetString("str");
            }
            [SecurityPermission(SecurityAction.LinkDemand, Flags = SecurityPermissionFlag.SerializationFormatter)]
            public virtual void GetObjectData(SerializationInfo info, StreamingContext context)
            {
                Console.WriteLine("GetObjectData of MyObject.class");
                info.AddValue("str", str, typeof(string));
            }
            [OnDeserializing]
            private void TestOnDeserializing(StreamingContext sc)
            {
                Console.WriteLine("TestOnDeserializing");
            }
            [OnDeserialized]
            private void TestOnDeserialized(StreamingContext sc)
            {
                Console.WriteLine("TestOnDeserialized");
            }
            [OnSerializing]
            private void TestOnSerializing(StreamingContext sc)
            {
                Console.WriteLine("TestOnSerializing");
            }
            [OnSerialized]
            private void TestOnSerialized(StreamingContext sc)
            {
                Console.WriteLine("TestOnSerialized");
            }
        }
        class MySerializationSurrogate : ISerializationSurrogate