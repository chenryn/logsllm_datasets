return address pushed by the caller of process_request. When
the return address is fetched at line 10, an extra def-use relation is
detected between these lines. Since this use is an instruction fetch,
Ravel reports that the vulnerability lies in line 7. Line 9 contains an
information leak. If exploited, it reads beyond buffer_to_send,
creating multiple def-use relations with the same use. Ravel thus
reports line 9 as the potential vulnerability. However, as demon-
strated by Figure 2, the data-ﬂow analysis is not the ﬁnal solution.
The real vulnerability could hide in somewhere else. To this end,
Ravel tries to further reﬁne the results with the following analyses.
Integer Errors
2.4.2
Integer errors usually are not exploited alone but followed by other
exploits. For eﬃciency, Ravel focuses on common integer errors
associated with buﬀer access violations. Speciﬁcally, it checks for
common integer errors if a reported vulnerability involves block
memory operations as these operations are often conditioned by
a length parameter. Such vulnerabilities include calls to popular
library functions that are frequently associated with buﬀer overﬂows
(e.g., memmove, memcpy, strncpy, strncat, strlcpy, and their
many variants) and I/O functions or syscalls (e.g., recv, recvfrom,
and read). However, some programs may use their own block
data copy/move functions rather than the standard libc functions.
These functions often employ the repeated string instructions of
x86 (i.e., instructions like MOVS/STOS/CMPS/LODS/SCAS preﬁxed
by REP/REPE/REPNE/REPNZ/REPZ).
In this case, register RCX
contains the data size, and register DS:RSI and ES:RDI contain the
source and destination addresses, respectively. To locate integer
errors, we search from the reported vulnerability backward.
There are several types of integer errors, such as assignment
truncation, integer overﬂow/underﬂow, and signedness error. An
assignment truncation happens when an integer is assigned from a
longer type to a shorter type. This is usually done by simply discard-
ing the extra most signiﬁcant bits. An integer overﬂow/underﬂow
happens when the result of an integer arithmetic exceeds the valid
range of the target register. A signedness error happens when an
integer is converted between a signed type and an unsigned type.
The code in Figure 2 contains a signedness error at line 6. Note
that regular C/C++ programs may contain both benign and harmful
integer errors [24]. However, false positives will not be a big issue
for Ravel since all its detected integer errors are related to a reported
vulnerability and thus are more likely to be true positives.
Detecting assignment truncations is relatively simple because
x86’s instruction encoding speciﬁes the width of memory or reg-
3PLT/GOT is the structure to support dynamic linking [44].
5
1 uint8_t * buffer = new uint8_t [size+ chunk_size ];
2 i f (size > 0) {
3
4 }
memcpy (buffer , data , size);
Figure 4: Code snippet of CVE-2015-3864 in Android. There is an
integer overﬂow in line 1, leading to the buﬀer overﬂow on line 3.
ister accesses. Meanwhile, integer overﬂows/underﬂows can be
detected by checking the RFLAGS register, which contains various
bits for arithmetic instructions. However, signedness errors are
more challenging to identify because many integer instructions do
not encode the signs of their operands. For example, signed and un-
signed integer additions/subtractions are essentially the same with
the two’s complement data format. To address that, we collect hints
of the signs for those operands from other instructions that access
them. Many instructions do carry sign information. For example,
the JG, JGE, JL, and JLE instructions select a branch based on the
signed comparison, while JA, JAE, JB, and JBE instructions are
based on the unsigned comparison. Conditional move instructions,
such as CMOVG and CMOVA, also carry the sign information. Modern
compilers tend to use conditional moves for better performance.
Some arithmetic instructions also carry the sign information, such
as SAR/SHR and IDIV/DIV. A second source of the sign information
comes from the reported vulnerability itself. For example, functions
like memcpy provide a clear deﬁnition of their parameter types. If
there are conﬂicts in the collected hints of signs, a signedness error
is highly likely and will be reported.
Ravel can detect the signedness error in Figure 2. Speciﬁcally,
the data-ﬂow analysis locates the vulnerability in line 7 (or line 9
depending on the attack), which speciﬁes that its parameter size is
unsigned. Searching backwards, Ravel ﬁnds that size was assigned
from a signed number (min uses a signed comparison instruction).
This conﬂict in size’s signs allows Ravel to identify this integer
error. Figure 4 shows an example of integer overﬂows. The code
is related to CVE-2015-3864 [17], an integer overﬂow in Android’s
built-in Stagefright media library. If size + chunk_size over-
ﬂows, the allocated buﬀer may be smaller than the data length,
leading to the buﬀer overﬂow in line 3. Ravel can detect this integer
overﬂow by checking the RFLAGS register during the replay.
2.4.3 Use-After-Frees and Double-Frees
Ravel instruments the memory allocation/free functions to keep
track of the memory life-time. This information can conﬁrm buﬀer
overﬂows (the buﬀer size vs. the data size) and identify use-after-
free and double-free ﬂaws. Use-after-free and double-free have
become popular attack vectors in recent years. Even though the
data-ﬂow analysis can discover anomalies in the data ﬂow caused
by them, it does not have enough information to correctly identify
them. This insuﬃciency can be addressed by the memory life-time
information. For example, a vulnerability can be categorized as use-
after-free if a block of the freed memory is accessed again. Note
that some programs use their own memory management functions
rather than the standard libc or C++ functions. This issue can be
addressed through source code annotation or with heuristics.
2.4.4 Race Conditions
With the ubiquitous deployment of exploit mitigation techniques
like DEP and ASLR, race conditions have become a more popular
attack vector. As previously mentioned, Ravel’s replayed execution
may deviate from the recorded one if the program has race con-
ditions. For example, they may have diﬀerent syscall sequences,
or the replayed execution crashes but the recorded one does not.
When that happens, Ravel runs an existing algorithm [2] to detect
race conditions during the replay. Speciﬁcally, it checks whether
two potentially racing operations (e.g., two threads write to the
same variable) have a happens-before relation, i.e., one operation
is guaranteed to happen before the other. Such a relation can be
established if these operations are protected by locks or ordered
through inter-process communications (e.g., pipes). We plan to add
the capability to root-cause race conditions by identifying common
data racing patterns [37].
2.5 Prototype Efforts
We have implemented a prototype of Ravel based on the FreeBSD
release 10.2. The R&R system is implemented from scratch in the
kernel with a small user-space utility to control recording and re-
playing. We added about 3.9K SLOC (source lines of code) to the
kernel, and the utility consists of about 300 SLOC. Vulnerability
locator is based on the open-source Valgrind [47] instrumentation
framework. We made some changes to the Valgrind framework
itself so that it could be used in the replay (Section 2.3.2). In addi-
tion, Valgrind’s system call wrappers for FreeBSD are incomplete.
We wrote our own and contributed it back to the project. We added
about 2.2K SLOC to Valgrind in total. The replayer captures the
whole execution trace of the replayed program, speciﬁcally, the ex-
ecuted instructions and the addresses and sizes of their memory
accesses. Based on the execution trace, we implemented Ravel’s
data-ﬂow analysis, integer error detection, and use-after-free and
double-free detection, and integrated Valgrind’s existing race con-
dition detection. Most of these analyses work at the byte granularity
except the integer error detection, which works according to the in-
structions’ operand sizes. As mentioned before, Ravel works on
program binaries directly. After locating a vulnerability, we revert
it back to the source code if the program contains the debugging
symbols.
3. EVALUATION
In this section, we ﬁrst evaluate the eﬀectiveness of Ravel against
common memory-based vulnerabilities and then measure the per-
formance overhead caused by Ravel.
3.1 Effectiveness
To evaluate the eﬀectiveness of Ravel, we ﬁrst analyze how Ravel
can handle common memory vulnerabilities, such as buﬀer over-
ﬂows, integer errors, information leaks, and format string vulnera-
bilities. We then describe our experiments with a variety of vulner-
abilities, including two high-impact real-world ones.
By design, Ravel can detect any attacks that change the pro-
gram’s run-time data ﬂow. However, the data-ﬂow analysis itself
often cannot provide the precise locations of the exploited vulner-
abilities. To address that, Ravel further reﬁnes the results with
vulnerability-speciﬁc analyses. There are many types of common
memory vulnerabilities. In the following, we discuss how Ravel can
handle some of them, starting with the most common one, buﬀer
overﬂows.
Buﬀer overﬂows: a buﬀer overﬂow, or a buﬀer overrun, happens
when a program writes more data into a buﬀer than it can hold,
overwriting the adjacent data. A typical example is to use functions
like strcpy that do not check the buﬀer size to copy untrusted
data. Buﬀer overﬂows can often lead to arbitrary code execution
and denial-of-services. Ravel can locate buﬀer overﬂows if the
overwritten data are used after the attack: when a piece of data is
read, a new def-use relation is introduced between the vulnerability
and the reader. In addition, Ravel could tell that the def is likely the
vulnerability if there are multiple new uses with the same def. An
6
example is shown in Figure 2 line 7 in which a new def-use relation
is introduced between line 7 and 10.
Integer errors: integer errors include a number of ﬂaws related
to integer operations such as arithmetic, type casting, truncation, and
extension. For example, an integer overﬂow happens when the result
of an integer arithmetic exceeds the valid range of the destination
type. Integer errors are often not exploited alone but instead with
other vulnerabilities, such as buﬀer overﬂows. To detect integer
errors, Ravel ﬁrst locates the symptomatic vulnerability and then
searches for possible integer errors if that vulnerability takes integer
parameters. In Figure 2, after locating the buﬀer overﬂow in line
7, Ravel continues to search for integer errors because recv’s size
parameter is and integer and discovers the integer signedness error
in Line 6.
Information leaks: an information leak happens when a pro-
gram inadvertently leaks data to unauthorized parties that may help
them obtain sensitive information or launch further attacks. For ex-
ample, an attacker often exploits information leaks to de-randomize
the victim process’ address space before launching return-oriented
programming attacks.
Information leaks can also disclose conﬁ-
dential information to attackers. A recent high-proﬁle example is
the Heartbleed ﬂaw in the OpenSSL library. Heartbleed can be
exploited to leak the server’s memory to the attacker, 64K B at a
time. This eventually allows the attacker to steal the server’s private
key. Ravel can precisely locate information leaks: an information
leak reads more data than it should. This creates additional def-
use relations between the writers of that data and the vulnerability.
Accordingly, Ravel can tell that the use likely is the vulnerability
since there are multiple defs with the same use. Afterwards, Ravel
tries to identify integer errors. In Figure 2, new def-use relations
are introduced between line 9 and the writers of the data adjacent
to buffer_to_send (not shown in the ﬁgure).
Use-after-frees: use-after-frees are another common type of
memory vulnerabilities, in which a program erroneously references
the memory that has been previously freed. Depending on its nature,
a use-after-free may allow an attacker to crash the program, corrupt
data, or even execute the injected code.
In a typical scenario to
exploit a use-after-free, the attacker tries to allocate an object under
his/her control immediately after the vulnerable memory is freed.
The memory allocator likely assigns the just-freed memory to this
object, giving the attacker full control over the to-be-reused mem-
ory. If the reused memory originally contains a data pointer, the
attacker could exploit it to read or write arbitrary data. Likewise,
if it contains a code pointer, the attacker could exploit it to hijack
the control ﬂow. Ravel can locate a use-after-free if the attacker-
controlled object is diﬀerent from the vulnerable object (this is often
the case otherwise the attacker can simply misuse the object under
his control). Consequently, they are accessed by diﬀerent instruc-
tions, and new def-use relations are created from the writers of the
attacker-controlled object to the readers of the vulnerable object.
Ravel also keeps track of the data lifetime to facilitate the detection
of use-after-frees and double-frees.
Format string vulnerabilities: a format string vulnerability oc-
curs when a function, such as printf, accepts an attacker-controlled
format string. The format string decides how the function interprets
its following parameters. By manipulating format directives, an
attacker can read data from the stack, corrupt memory, and even
execute arbitrary code. Ravel can pinpoint format string vulner-
abilities. For example, a new def-use relation will be introduced
between the format function and its caller if the vulnerability is ex-
ploited to read the return address. Format string vulnerabilities are
becoming less common nowadays because it is relatively easy for
compilers to automatically detect them. For example, gcc allows
s t r u c t {
1 typedef
2
...
3
off_t content_length_n ;
4
...
5 } ngx_http_headers_in_t ;
6 ...
7 u_char buffer [ NGX_HTTP_DISCARD_BUFFER_SIZE ];
8 ...
9 size = ( size_t ) ngx_min (r-> headers_in .
content_length_n , NGX_HTTP_DISCARD_BUFFER_SIZE
);
10 n=r->connection ->recv(r->connection , buffer , size);
Figure 5: Code sketch of CVE-2013-2028 in NGINX. An integer
signedness error at line 9 leads to a buﬀer overﬂow at line 10.
a program to annotate its own format functions with the format
compiler directive. This feature is extensively used by the Linux
kernel to protect its debugging and logging functions.
So far, we have discussed Ravel’s eﬀectiveness in locating com-
mon memory vulnerabilities. We also experimented with a number
of real-world and synthetic vulnerabilities and attacks. In the fol-
lowing, we will give the details of several such experiments.
3.1.1 CVE-2013-2028 of NGINX