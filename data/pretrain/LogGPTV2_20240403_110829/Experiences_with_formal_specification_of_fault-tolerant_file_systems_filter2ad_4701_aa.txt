title:Experiences with formal specification of fault-tolerant file systems
author:Roxana Geambasu and
Andrew Birrell and
John MacCormick
Experiences with Formal Speciﬁcation of Fault-Tolerant File Systems
Andrew Birrell
Microsoft Research
PI:EMAIL
John MacCormick
Dickinson College
PI:EMAIL
Roxana Geambasu
University of Washington
PI:EMAIL
Abstract
Fault-tolerant, replicated ﬁle systems are a crucial
component of today’s data centers. Despite their huge com-
plexity, these systems are typically speciﬁed only in brief
prose, which makes them difﬁcult to reason about or ver-
ify. This paper describes the authors’ experience using for-
mal methods to improve our understanding of and conﬁ-
dence in the behavior of replicated ﬁle systems. We wrote
formal speciﬁcations for three real-world fault-tolerant ﬁle
systems and used them to: (1) expose design similarities
and differences; (2) clarify and mechanically verify consis-
tency properties; and (3) evaluate design alternatives. Our
experience showed that formal speciﬁcations for these sys-
tems were easy to produce, useful for a deep understanding
of system functions, and valuable for system comparison.
1. Introduction
Fault-tolerant, replicated ﬁle systems have become a
crucial component of today’s dependable enterprise data
centers. For example, the Google File System (GFS) [9],
Niobe [16], and Dynamo [7] underlie many of the web ser-
vices offered by Google, Microsoft, and Amazon.com, re-
spectively. Many other fault-tolerant ﬁle systems have been
developed in academic settings, as well (e.g., [15, 19]). All
of these systems are extremely complex, including sophisti-
cated asynchronous protocols, e.g., for replica consistency,
recovery, and reconﬁguration.
Despite their complexity, fault-tolerant ﬁle systems
have typically been described only in a few pages of prose,
which can be incomplete, inaccurate, or ambiguous. This
makes reasoning about and proving system properties hard
and error-prone. In contrast to prose, formal speciﬁcations
in a language such as TLA+ [13] are unambiguous and pro-
vide solid grounds for model checking and formally proving
system properties. The advantages of formal speciﬁcations
have been previously reported for various types of systems,
e.g.: caches [11], space shuttle software [6], and local and
distributed ﬁle systems [18, 20].
We wished to explore how formal speciﬁcations and
methods can help in understanding, comparing, and prov-
ing properties of another important class of systems: fault-
tolerant, replicated ﬁle systems. To do this, we wrote formal
speciﬁcations for three real-world, successful fault-tolerant
ﬁle systems – GFS, Niobe, and Chain [19] – and used those
to analyze, compare, and prove properties of the systems.
This paper presents our experience writing and using those
formal speciﬁcations. Overall, we found that formal speci-
ﬁcations improve understanding of system functioning, en-
able better comparison, and are reasonably easy to produce.
We found speciﬁcations particularly useful for three
purposes. First, speciﬁcations crystallize differences and
similarities of the systems’ mechanisms. For instance, we
ﬁnd that GFS and Niobe have substantial overlap in mecha-
nisms; our speciﬁcation isolates common mechanisms and
provides a clear view of what is similar and different. Sec-
ond, speciﬁcations enable understanding and mechanical
veriﬁcation of the systems’ consistency semantics. To rea-
son about a system’s consistency, we reduce the system to a
much simpliﬁed analog (called a SimpleStore), and use re-
ﬁnement mappings [1] to verify that the system implements
its SimpleStore. We then reason about and compare con-
sistency properties of SimpleStores. Third, speciﬁcations
enable comfortable experimentation with alternative system
designs, which can be a valuable tool for a designer.
Our approach is pragmatic. While our speciﬁcations,
in principle, enable full formal proofs [11], we rely on
model checking of limited instances of the systems to con-
ﬁrm properties comfortably. By revealing various ways in
which speciﬁcations are valuable in fault-tolerant ﬁle sys-
tem analysis and comparison, we hope to convince system
builders of the utility of specifying their own systems.
After providing some background (Section 2), we
demonstrate the three usages of speciﬁcations (Sec-
tions 3, 4, and 5). We then review previous work (Section 6)
and share some lessons from our experience (Section 7).
2. Background
2.1. Overview of the Studied Systems
In the three studied systems, each data object is stored
at a group of replicas (groups can overlap), and the group
is managed by a single master. The systems are reconﬁg-
Authorized licensed use limited to: Tsinghua University. Downloaded on March 20,2021 at 13:17:16 UTC from IEEE Xplore.  Restrictions apply. 
International Conference on Dependable Systems & Networks: Anchorage, Alaska, June 24-27 20081-4244-2398-9/08/$20.00 ©2008 IEEE96DSN 2008: Geambasu et al.urable, allowing failed or disconnected replicas to be re-
moved from the group and new replicas to be added.
GFS. GFS provides a ﬁle-level write/append/read in-
terface to clients. Files stored in GFS are partitioned into
ﬁxed-size chunks, each of which is replicated by a group.
The master assigns a unique primary to each group. To per-
form a chunk write or append, the client sends the data to
all replicas and then submits a write request to the primary,
who acknowledges the write if all replicas have succeeded.
To read from a chunk, the client goes to any of the chunk’s
replicas. Although in the published paper the master was
not guaranteed to be reliable, we will assume it is here, to
enable comparison to Paxos-based Niobe and Chain.
Niobe. Niobe offers an object-level read/write inter-
face, where the object is the replication unit. Similarly to
GFS, a unique primary exists for each group. To perform
a write, the client submits the data to the primary, which
writes it to disk and forwards it to the secondaries. The sec-
ondaries perform the write and acknowledge it to the pri-
mary. If any secondary fails to ACK the write in a timely
manner, the primary proposes to the master that the failed
replica(s) be removed from the group. After all replicas
have ACKed the write (or have been removed), the primary
responds to the client with success if the write succeeded at
a conﬁgurable number of replicas, or with error otherwise.
To read an object, the client goes to the primary.
Chain. Chain imposes a structure on the replica group:
replicas are arranged in a chain. Writes are sent to the head
of the chain and travel along the chain toward the tail, where
they get acknowledged. Reads are sent to the tail, which re-
turns its local value. While GFS and Niobe support network
partitions, the original Chain paper implicitly assumes no
network partitions. For example, it does not specify how to
prevent a client from reading from a stale, but still alive tail.
We assume in this work no network partitions for Chain.
2.2. TLA+ and Reﬁnement Mappings
TLA+ is a formalism based on temporal logic, espe-
cially suited for specifying asynchronous distributed sys-
tems [13]. To specify a system, one describes its allowed
behaviors using a state-machine approach. One speciﬁes
the variables that compose the system’s state, a set of ini-
tial states, and the transitions leading from one state to an-
other. A TLA+ speciﬁcation can be enhanced with proper-
ties, which can be model-checked using the Temporal Logic
Checker (TLC [14]). Because TLC exhaustively checks a
system’s state space, which is typically exponential in sys-
tem size, it can be used only on small instances of a system.
A reﬁnement mapping [1] is a technique used to re-
duce one speciﬁcation to another. Using reﬁnement map-
pings, we reduce our speciﬁcation of each system to a sim-
ple model of the system (called a SimpleStore). Figure 1
illustrates a reﬁnement mapping: it maps a system’s state
Figure 1. Reﬁnement mapping from a system to its
SimpleStore. Clouds represent state spaces. The reﬁne-
ment mapping maps the system’s states onto states in Sim-
pleStore. System states S1 and S2 map onto states S0
1 and
S0
2, respectively (S0
2 may be the same state). The
mapping is valid if for any S1 and S2, for any system tran-
sition T from S1 to S2, there exists a SimpleStore transition
T 0 leading from S0
2 (possibly the identity transition).
1 and S0
1 to S0
space onto the SimpleStore’s state space. A system imple-
ments its SimpleStore if all the system’s client-visible be-
haviors can be mapped onto valid SimpleStore behaviors.
We do not attempt to prove implementations. Instead,
we specify the mappings as TLA+ properties, and model-
check them for limited instances of the systems (three repli-
cas). Of course, to prove implementation for any instance,
one can perform full proofs. Such proofs, although in prin-
ciple enabled by our speciﬁcations [11], are out of scope
here. Still, our model checking covers the typical setting in
industry systems like GFS, which do three-way replication.
Having veriﬁed that a system implements its Simple-
Store, proving history-based consistency properties about
the system (e.g., linearizability) is known to be reducible to
proving them for its SimpleStore [11], which is signiﬁcantly
easier than reasoning about the whole system.
3. Comparing System Mechanisms
We produced TLA+ speciﬁcations for all three of the
systems. For GFS and Chain, speciﬁcations are based on
published papers describing the systems and (email) con-
versations with the systems’ designers; for Niobe, one of
the designers participated in this work and is a co-author of
this paper. Table 1 provides the sizes of our speciﬁcations
and the time to write them. For each system, we speciﬁed
at least how reads, writes, and replica removal are done.
For Chain, we also speciﬁed the recovery mechanism. Due
to the expressiveness of a formalism such as TLA+, spec-
iﬁcations distill core replication mechanisms and protocols
from the systems’ complexity. As a result, our speciﬁca-
tions are small (500 TLA+ lines, or about 10 pages), yet pre-
cise, high-level models of the systems. Overall, we found
speciﬁcations to be extremely helpful for an in-depth under-
standing of systems, as well as reasonably easy to produce.
Speciﬁcations also prove valuable for a crisp compar-
ison of the mechanisms in different systems. While a de-
tailed examination of the speciﬁcations would show how the
key differences and similarities stand out clearly in TLA+,
Authorized licensed use limited to: Tsinghua University. Downloaded on March 20,2021 at 13:17:16 UTC from IEEE Xplore.  Restrictions apply. 
System modelSimpleStoreS'1S'2T'S1S2TRefinement mappingInternational Conference on Dependable Systems & Networks: Anchorage, Alaska, June 24-27 20081-4244-2398-9/08/$20.00 ©2008 IEEE97DSN 2008: Geambasu et al.TLA+ Lines
Time to write
Chain
410
3 weeks
Niobe