and Op,f
vote
and Op
and Op
vote
vote
vote
vote
The following theorem corresponds to Theorem 4.4.
Theorem B.1. Under assumptions 1, 2, 3, 4, 5, 6:
• for id-based schemes, assuming that no polynomial adversary wins ExpValidTally with non-negligible probability,
• and for credential-based schemes, assuming that no polynomial adversary wins ExpNM with non-negligible probability,
is negligible.
attacks privacy, i.e. plays Exppriv, β :
1
vote, Ocast
vote, Ocast
(pk) first simulates AOreg, Ocorr
(state, pk):
vote(id, v), provided id ∈ U1, B calls Op
(state1, pk) maintains a list L, initially empty, which will be used to record the calls to Op
Proof. We first consider the case of id-based protocols.
Let A = A1, A2 be an adversary that breaks individual verifiability, i.e. wins Expverif. We consider an adversary B = B1, B2, B3 that
• BOreg, Ocorr
(pk), i.e. B registers and corrupts the same identities as A, while keeping a list U1 of the
1
identities it registers by calling Oreg. A returns some state. B1 then calls Oreg another |U1| times, on fresh identities that do not
appear in U1. It keeps a list U2 of these fresh identities.
• BOp
2
current board BB′. B2 first simulates AOv
2
– for each call to Ov
∗ either checks if id is already present in L, to add (id, v) to L only if it is not (note that, in case it is, Op
nothing);
∗ or adds (id, v) to L and removes any previous couple (id, v′) (for any v′) from L.
vote(id, v, vneutral) returns a ballot b, B then adds it to BB′, and passes it to A2.
If Op
– for each call to Ocast(id, b), provided id ∈ U1, B calls Ocast(id, b), and, if Valid(id, b, BB′, pk), adds it to BB′.
Let then Voted be the list of the votes in L: Voted = [v for (id, v) ∈ L]. Let also BBa be the value of the board BB′ at that point. Note
that BBa only contains identities from U1.
vote(id1, vneutral, v1), ...,
If at any point during the simulation A2 blocks or fails, B stops the simulation. In any case, B2 calls Op
vote(idl , vneutral, vl), where v1, . . . , vl are the elements of Voted, and id1, . . . , idl are pairwise distinct identities from U2. Note that
Op
since all identities in L are distinct and in U1, l is indeed smaller than |U1| = |U2|. Let BBb = [b1, . . . , bl] be the set of new ballots
added to the board by these l calls, i.e. ballots for vneutral if β = 0 and v1, . . . , vl if β = 1.
At this point, we have BB = BBa ⊎ BBb.
vote(id, v, vneutral), and, depending on the revote policy
vote(id, v, vneutral) returns
, and a representation of the
vote
20
B2 then returns a state2 indicating whether A2 has failed. Intuitively, A is accurately simulated only if β = 0, i.e. is shown a board
where the votes it wanted to cast have indeed been cast. Hence whenever A wins Expverif, the simulated A2 failing can only mean
that β = 1.
• Exppriv will then check that ρ(V0) = ρ(V1), where V0 and V1 are the lists it keeps, which contain the first (or last, depending on the
has been called on for each id. Considering the definition of B2, at this point we always have
revote policy) votes Op
vote
ρ(V0) = ρ(V1) = ρ(v1, . . . , vl , vneutral, . . . , vneutral
)
(cid:124)(cid:32)(cid:32)(cid:32)(cid:32)(cid:32)(cid:32)(cid:32)(cid:32)(cid:32)(cid:32)(cid:32)(cid:32)(cid:32)(cid:32)(cid:32)(cid:32)(cid:32)(cid:32)(cid:32)(cid:32)(cid:123)(cid:122)(cid:32)(cid:32)(cid:32)(cid:32)(cid:32)(cid:32)(cid:32)(cid:32)(cid:32)(cid:32)(cid:32)(cid:32)(cid:32)(cid:32)(cid:32)(cid:32)(cid:32)(cid:32)(cid:32)(cid:32)(cid:125)
l times
Hence this check necessarily succeeds, and Exppriv computes Tally(BB, sk, U).
• B3 obtains a result r. If r = ⊥, B3 returns 1. If A2 blocked previously, B returns β′ = 1. Otherwise, B computes D(r , Voted) and:
– if ∃Vc . r = ρ(Voted) ∗ ρ(Vc) then B returns β′ = 1
– otherwise, B returns β′ = 0.
We also construct an adversary C, who plays the game ExpValidTally.
• C1 is identical to B1.
• C2 first draws at random a bit β′′, and then simulates B2 up to the point where B2 has finished simulating A2. C2 keeps a list BB,
vote(id, vβ′′), and appending the obtained ballot to BB. It
initially empty. It simulates each call to Op
simulates each call to Ocast(id, b) by appending b to BB, provided id is dishonest and Valid(id, b, BB, pk).
• Once C2 has finished simulating B2, it draws at random a number k ∈(cid:74)1, l(cid:75) Recall that l is the number of different ids Op
(and thus
Ovt
vote B will make. Note that, at this point, BB in ExpValidTally
C
vote
is the same as BBa in Exppriv, β′′
vote(id, vβ′′). If the kth
call is Op
) has been called on, and is also the number of additional calls to Op
. C then simulates the first k − 1 calls to Op
vote(id, v0, v1) B does by calling Ovt
vote(id, v0, v1), again by calling Ovt
vote(id, v0, v1), C returns (BB, id, vβ′′).
vote
B
We will now prove that if A breaks individual verifiability, then B breaks privacy provided C does not break ExpValidTally.
The adversary C is polynomial, i.e. there exists a polynomial q(λ) bounding its number of operations.
For any β, assume ValidTally(BBa, sk, U1) holds and ValidTally(BBa ⊎ BBb , sk, U1 ∪ U2) does not. Thus, by assumption 3, ValidTally(BBa ⊎
BBb , sk, U1 ∪ [(id1, credid1), . . . ,(idl , credidl )]) does not hold either. Hence, there exists a smallest k ∈ (cid:74)1, l(cid:75) such that ValidTally(BBa ⊎
[b1, . . . , bk−1], sk, U1∪U′
bk has been added to BBb by the kth call to Op
by B: bk = Vote(idk , credidk , pk, vβ) for some vβ . Thus, provided C correctly guesses
= 1(cid:105), which is
ValidTally(BBa, sk, U1) holds and ValidTally(BBa ⊎ BBb , sk, U1 ∪ U2) does not with probability at most 2l P(cid:104)
β′′ = β and k, C returns (BBa ⊎ [b1, . . . , bk−1], idk , vβ) the conditions on BB in ExpValidTally
= 1. Therefore,
smaller than 2q(λ) P(cid:104)
2) holds and ValidTally(BBa⊎[b1, . . . , bk], sk, U1∪U′
= 1(cid:105) since l ≤ q(λ).
holds, and thus ExpValidTally
ExpValidTally
2∪[(idk , credidk )]) does not, where U′
ExpValidTally
C
C
vote
C
C
2 = [(id1, credid1), . . . ,(idk−1, credidk−1)].
Since BBa only contains ballots cast for identities in U1 and BBb for identities in U2, and U1 ∩ U2 = ∅, if ValidTally(BBa ⊎ BBb , sk, U1 ∪ U2),
by assumption 1 we have (regardless of β)
In addition, by assumption 3, Tally(BBa, sk, U) = Tally(BBa, sk, U1). Hence
r = Tally(BB, sk, U) = Tally(BBa ⊎ BBb , sk, U) = Tally(BBa, sk, U) ∗ Tally(BBb , sk, U)
r = Tally(BBa, sk, U1) ∗ Tally(BBb , sk, U).
C
B
ExpValidTally
= 1(cid:105).
2q(λ) P(cid:104)
• If β = 0: then Exppriv,0
(λ) = 1 if and only if B3 returns 1 in this game, which happens either when A (simulated by B) blocks, or
when it does not and ∃Vc . r = ρ(Voted) ∗ ρ(Vc) or r = ⊥.
Assume ValidTally(BBa, sk, U1) ⇒ ValidTally(BBa ⊎ BBb , sk, U), which, as we have established, holds except with probability at most
Let us first examine the case where A does not block and r (cid:44) ⊥. Since r (cid:44) ⊥, ValidTally(BBa, sk, U1) holds. Hence, ValidTally(BBa ⊎
BBb , sk, U) also holds, and as explained previously we thus know that r = Tally(BBa, sk, U1) ∗ Tally(BBb , sk, U). Since β = 0, BBb only
contains ballots for vneutral. Hence, by assumption 4, Tally(BBb , sk, U) = ρ(vneutral)l = ρ(vneutral). Thus r = Tally(BBa, sk, U1).
The condition ∃Vc . r = ρ(Voted) ∗ ρ(Vc) is therefore equivalent to ∃Vc . Tally(BBa, sk, U1) = ρ(Voted) ∗ ρ(Vc). Since, in this case,
A has been accurately simulated without blocking, does not return ⊥, and BBa is the board after its execution, this is exactly the
condition under which ExpverifA (λ) does not return 1.
21
(λ) = 1 if and only if either A (simulated by B) blocks, or constructs a board whose tally is ⊥, or it does not and
Hence Exppriv,0
B
ExpverifA (λ) (cid:44) 1.
Since ExpverifA (λ) also does not return 1 when A blocks or when the tally is⊥, this implies that, unless the implication ValidTally(BBa, sk, U1) ⇒
ValidTally(BBa ⊎ BBb , sk, U) is false, Exppriv,0
(cid:12)(cid:12)(cid:12)P(cid:104)
Exppriv,0
B
B
(λ) = 1(cid:105) − P(cid:104)
ExpverifA (λ) (cid:44) 1(cid:105)(cid:12)(cid:12)(cid:12) ≤ 2q(λ) P(cid:104)
(λ) = 1 if and only if ExpverifA (λ) (cid:44) 1. Thus
C
= 1(cid:105)
.
B
ExpValidTally
ExpValidTally
= 1(cid:105).
2q(λ) P(cid:104)
(2)
• If β = 1: then Exppriv,1
(λ) = 1 if and only if B3 returns 1 in this game, which happens either when A (simulated by B) blocks, or
when it does not and ∃Vc . r = ρ(Voted) ∗ ρ(Vc) or r = ⊥.
Assume ValidTally(BBa, sk, U1) ⇒ ValidTally(BBa ⊎ BBb , sk, U), which, as we have established, holds except with probability at most
Let us first examine the case where A does not block and r (cid:44) ⊥. As in the β = 0 case, we thus have r = Tally(BBa, sk, U1) ∗
Tally(BBb , sk, U). Since β = 1, BBb contains ballots for v1, . . . , vl , i.e. for Voted. Hence, by assumption 4, Tally(BBb , sk, U) = ρ(Voted),
and therefore r = Tally(BBa, sk, U1) ∗ ρ(Voted). By definition of Tally, there exists V such that Tally(BBa, sk, U1) = ρ(V). Hence the
condition ∃Vc . r = ρ(Voted) ∗ ρ(Vc) necessarily holds.
Therefore, unless the implication ValidTally(BBa, sk, U1) ⇒ ValidTally(BBa ⊎ BBb , sk, U) is false, Exppriv,1
(λ) = 1 if and only if either
A (simulated by B) blocks, or it does not and returns a board whose tally is ⊥, or it does not and returns a board whose tally is not ⊥.
Hence
= 1(cid:105)
1 − P(cid:104)
(λ) = 1(cid:105) ≤ 2q(λ) P(cid:104)
(λ) = 1(cid:105) − P(cid:104)
ExpverifA (λ) (cid:44) 1(cid:105)(cid:17)
(cid:16)1 − P(cid:104)
(cid:16)P(cid:104)
(λ) = 1(cid:105)(cid:17)
(λ) = 1(cid:105) − P(cid:104)
(cid:16)P(cid:104)
(cid:16)P(cid:104)
(λ) = 1(cid:105) − P(cid:104)
ExpverifA (λ) (cid:44) 1(cid:105)(cid:17)
(cid:16)P(cid:104)
(λ) = 1(cid:105)(cid:17)
(cid:16)1 − P(cid:104)
(λ) = 1(cid:105)(cid:12)(cid:12)(cid:12) + 4q(λ) P(cid:104)
≤ (cid:12)(cid:12)(cid:12)P(cid:104)
(λ) = 1(cid:105) − P(cid:104)
Therefore, if A breaks individual verifiability, i.e. if P(cid:104)
ExpverifA (λ) = 1(cid:105) is not negligible, then B breaks privacy, or C breaks ExpValidTally.
ExpNMA (λ) = 1(cid:105) is negligible
∀A. P(cid:104)
The proof for the case of credential-based protocols is very similar. In that case, instead of the ExpValidTally assumption, we assume that
(λ) = 1(cid:105)(cid:17)
(λ) = 1(cid:105) − P(cid:104)
= 1(cid:105)
ExpverifA (λ) = 1(cid:105)
(λ) = 1(cid:105)(cid:17)
Exppriv,1
B
Exppriv,0
B
We thus have, using 4 and 5:
Exppriv,0
B
B
Exppriv,1
ExpValidTally
ExpValidTally
Exppriv,0
Exppriv,1
Exppriv,1
B
Exppriv,0
B
Exppriv,1
Exppriv,1
B
Exppriv,0
B
P(cid:104)
+
+
.
B
=
=
C
+
B
C
(3)
B
C
+
B
where ExpNM is defined on Figure 7.
:
vote
vote(id, v0, v1) B makes by calling Oc(id, vβ′′).
Let A = A1, A2 be an adversary that breaks individual verifiability, i.e. wins Expverif. We construct the adversary B, that plays Exppriv,
as in the id-based case. We also construct D, that plays ExpNM, and is similar to C in the id-based case, except that D simulates calls to
Op
vote
by calling Oc instead of Ovt
• D1 is identical to B1.
• D2 first draws at random a bit β′′, and then simulates B2 up to the point where B2 has finished simulating A2. It simulates each call
to Op
• Once D2 has finished simulating B2 up to the point B2 has simulated A2, D obtains a board BBa (which is the same as BBa in
Exppriv, β′′
). Since BBa is obtained by simulating A, which is polynomial, in all executions of D the length of BBa is bounded by some
polynomial p(λ). D then draws at random a ballot in BBa, and returns it.
Similarly to the proof for the id-based case, and keeping the same notations, it then follows that BBa contains a ballot with a credential in
U2 the same credential with probability at most 2p(λ) P(cid:104)
Therefore, BBa contains no ballot with a credential in U2, except with probability at most 2p(λ) P(cid:104)
to Oc. Otherwise, it would necessarily have been produced by Oc(id, v) for some id, v such that (id, cred) ∈ U2, and the only calls to this
oracle simulate calls made by B to Op
on ids in U1 when simulating A, this is contradictory.
Thus, a ballot in BBa with a credential in U2 cannot have been produced by Oc. Hence, provided D picked β′′ = β, and picks the right ballot
in BBa, which happens with probability at least
ExpNMD = 1(cid:105). Indeed, if such a ballot exists, it cannot have been produced by a call
when simulating A. Since B only calls Op
ExpNMD (λ) = 1(cid:105).
p(λ), D wins ExpNM.