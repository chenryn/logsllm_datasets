kind: RoleBinding
metadata:
  name: pod-and-pod-logs-reader
  namespace: default
subjects:
- kind: ServiceAccount
  name: mysa
  namespace: default
  apiGroup: rbac.authorization.k8s.io
- kind: User
  name: podreader
- kind: Group
  name: podreaders
roleRef:
  kind: Role
  name: pod-and-pod-logs-reader
  apiGroup: rbac.authorization.k8s.io
```
前面的`RoleBinding`列出了三个不同的主题:
*   `ServiceAccount`:集群中的任何服务帐户都可以被授权到角色绑定。必须包含命名空间，因为角色绑定可以授权任何命名空间中的服务帐户，而不仅仅是定义角色绑定的那个。
*   `User`:用户是认证过程断言的。从 [*第七章*](07.html#_idTextAnchor203)*整合认证到你的集群*中记住，库本内没有代表用户的对象。
*   `Group`:就像用户一样，组是作为认证过程的一部分来声明的，并且有一个与之相关联的对象。
最后，引用我们前面创建的角色。以类似的方式，为相同的主题分配跨集群读取荚及其日志的能力，可以创建集群角色绑定来引用本章前面创建的`cluster-pod-and-pod-logs-reader`集群角色:
```
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: cluster-pod-and-pod-logs-reader
subjects:
- kind: ServiceAccount
  name: mysa
  namespace: default
  apiGroup: rbac.authorization.k8s.io
- kind: User
  name: podreader
- kind: Group
  name: podreaders
roleRef:
  kind: ClusterRole
  name: cluster-pod-and-pod-logs-reader
  apiGroup: rbac.authorization.k8s.io
```
`ClusterRoleBinding`绑定到相同的主题，但是被绑定到一个集群角色，而不是一个名称空间绑定的角色。现在，这些用户可以读取所有名称空间中的所有 pod 详细信息和 pod/日志，而不是能够读取默认名称空间中的 pod 详细信息和 pod/日志。
### 组合集群角色和角色绑定
我们有一个使用的案例，其中一个日志聚合器想要从多个名称空间中的荚中提取日志，但不是所有的名称空间。集群角色绑定太宽泛。虽然可以在每个名称空间中重新创建角色，但这效率低下，而且维护起来很麻烦。相反，定义一个集群角色，但在适用的名称空间中从角色绑定引用它。这允许重用权限定义，同时仍然将这些权限应用于特定的名称空间。一般来说，请注意以下几点:
*   集群角色+集群角色绑定=集群范围的权限
*   集群角色+角色绑定=特定于命名空间的权限
要在特定的命名空间中应用我们的集群角色绑定，请创建一个角色，引用`ClusterRole`而不是命名空间`Role`对象:
```
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: pod-and-pod-logs-reader
  namespace: default
subjects:
- kind: ServiceAccount
  name: mysa
  namespace: default
  apiGroup: rbac.authorization.k8s.io
- kind: User
  name: podreader
- kind: Group
  name: podreaders
roleRef:
  kind: ClusterRole
  name: cluster-pod-and-pod-logs-reader
  apiGroup: rbac.authorization.k8s.io
```
前面的`RoleBinding`让我们重用现有的`ClusterRole`。这减少了集群中需要跟踪的对象数量，并且在集群角色权限需要更改时，更容易在集群范围内更新权限。
在构建了我们的权限并定义了如何分配它们之后，接下来我们将看看如何将企业身份映射到集群策略中。
# 将企业身份映射到 Kubernetes 以授权对资源的访问
集中身份认证的好处之一是利用企业的现有身份，而不是必须创建与您的集群交互的用户需要记住的新凭据。了解如何将您的策略映射到这些集中式用户非常重要。在 [*第 7 章*](07.html#_idTextAnchor203)*将认证集成到您的集群*中，您创建了一个集群，并将其与**活动目录联合服务** ( **ADFS** )或抖音安全的测试身份提供程序集成。为了完成集成，创建了以下`ClusterRoleBinding`:
```
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: ou-cluster-admins
subjects:
- kind: Group
  name: k8s-cluster-admins
  apiGroup: rbac.authorization.k8s.io
roleRef:
  kind: ClusterRole
  name: cluster-admin
  apiGroup: rbac.authorization.k8s.io
```
该绑定允许属于`k8s-cluster-admins`组成员的所有用户拥有完全集群访问权限。当时，重点是认证，所以没有提供很多关于为什么创建这个绑定的细节。
如果我们想直接授权我们的用户呢？这样，我们就可以控制谁可以访问我们的集群。我们的 RBAC 看起来会不一样:
```
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: ou-cluster-admins
subjects:
- kind: User
  name: https://k8sou.apps.192-168-2-131.nip.io/auth/idp/k8sIdp#mlbiamext
  apiGroup: rbac.authorization.k8s.io
roleRef:
  kind: ClusterRole
  name: cluster-admin
  apiGroup: rbac.authorization.k8s.io
```
使用与之前相同的集群角色，这个集群角色绑定将把`cluster-admin`特权只分配给我的测试用户。
首先要指出的问题是，用户在用户名前面有我们 OpenID Connect 发行者的 URL。最初引入 OpenID Connect 时，人们认为 Kubernetes 将与多个身份提供者和不同类型的身份提供者集成，因此开发人员希望您能够轻松区分来自不同身份源的用户。例如，域 1 中的`mlbiamext`与域 2 中的`mlbiamext`是不同的用户。为了确保一个用户的身份不会与身份提供者中的另一个用户发生冲突，Kubernetes 要求身份提供者的颁发者在您的用户之前。如果应用编程接口服务器标志中定义的用户名声明是邮件，则此规则不适用。如果您使用证书或模拟，它也不适用。
除了不一致的实现需求之外，这种方法还会在几个方面引起问题:
*   **更改您的身份提供者 URL** :今天，您在一个 URL 使用一个身份提供者，但是明天您决定移动它。现在，您需要遍历每个集群角色绑定并更新它们。
*   **审核**:您不能查询与用户相关联的所有角色绑定。相反，您需要枚举每个绑定。
*   **大绑定**:根据你有多少用户，你的绑定会变得相当大，很难追踪。
虽然有一些工具可以帮助您管理这些问题，但是将您的绑定与组而不是单个用户相关联要容易得多。您可以使用`mail`属性来避免 URL 前缀，但这被认为是一种反模式，如果电子邮件地址因任何原因发生变化，将导致集群发生同样困难的变化。
到目前为止，在本章中，我们已经学习了如何定义访问策略并将这些策略映射到企业用户。接下来，我们需要确定如何将集群划分为租户。
# 实现命名空间多租户
为多个利益相关者或租户部署的集群应该按照名称空间进行划分。这是从一开始就被设计到 Kubernetes 中的边界。部署命名空间时，通常有两个集群角色分配给命名空间中的用户:
*   `admin`:这个聚合的集群角色提供了对 Kubernetes 附带的每个动词和几乎每个资源的访问，使管理员用户成为其名称空间的统治者。例外情况是任何可能影响整个集群的命名空间范围的对象，如`ResourceQuotas`。
*   `edit`:类似于`admin`，但是没有创建 RBAC 角色或者角色绑定的能力。
需要注意的是`admin`集群角色不能单独对名称空间对象进行更改。命名空间是集群范围的资源，因此只能通过集群角色绑定来分配权限。
根据您的多租户策略，`admin`集群角色可能不合适。生成 RBAC 角色和角色绑定对象的能力意味着名称空间管理员可以授予自己更改资源配额或运行提升的 PodSecurityPolicy 权限的能力。这就是 RBAC 容易分崩离析的地方，需要一些额外的选择:
*   **不要授予 Kubernetes** 访问权限:很多集群拥有者都想让 Kubernetes 不被自己的用户控制，限制他们与外部 CI/CD 工具的交互。这在微服务中运行良好，但在多条线路上开始崩溃。首先，更多的遗留应用被移入 Kubernetes 意味着更多的遗留管理员需要直接访问他们的命名空间。其次，如果 Kubernetes 团队将用户排除在集群之外，那么他们现在就有责任了。拥有 Kubernetes 的人可能不想成为事情没有按照应用所有者希望的方式发生的原因，并且应用所有者通常希望能够控制自己的基础架构，以确保他们能够处理影响自己性能的任何情况。
*   **将访问视为特权**:大多数企业需要特权用户才能访问基础设施。这通常使用特权访问模式来完成，其中管理员有一个单独的帐户，需要“签出”才能使用它，并且只有在“变更委员会”或流程批准的特定时间才被授权。这些账户的使用受到严密监控。如果您已经有了一个系统，特别是与企业的中央认证系统集成的系统，这是一个很好的方法。
*   **给每个租户一个集群**:这个模型将多租户从集群移动到基础设施层。你没有消除问题，只是把它移到了需要解决的地方。这可能会导致蔓延，变得难以控制，并可能会飙升成本，具体取决于您如何实现 Kubernetes。
*   **接纳控制器**:它们通过限制可以创建哪些对象来增强 RBAC。例如，准入控制者可以决定阻止创建 RBAC 策略，即使 RBAC 明确允许。本主题将在 [*第 11 章*](11.html#_idTextAnchor272)*使用开放策略代理*扩展安全性中涉及。
除了授权访问名称空间和资源，多租户解决方案还需要知道如何调配租户。本主题将在最后一章 [*第 14 章*](14.html#_idTextAnchor337)*供应平台*中介绍。
既然我们已经有了实现授权策略的策略，我们就需要一种方法来在创建这些策略时调试它们，并且知道何时违反了这些策略。Kubernetes 提供了一种审计功能，这将是下一节的重点，我们将把审计日志添加到我们的 KinD 集群中，并调试 RBAC 策略的实现。
# 立方审计
Kubernetes 审核日志是您从 API 角度跟踪集群中发生的事情的地方。它是 JSON 格式的使得直接读取更加困难，但是使用 Elasticsearch 之类的工具解析要容易得多。在 [*第 12 章*](12.html#_idTextAnchor295)*使用 Falco 和 EFK* 的 Pod 审核中，我们将介绍如何使用 **Elasticsearch、Fluentd 和 Kibana (EFK)** 栈创建完整的日志系统。
## 创建审核策略
策略文件用于控制记录哪些事件以及日志存储在哪里，可以是标准日志文件或网络钩子。我们已经在 GitHub 存储库的`chapter8`目录中包含了一个示例审计策略，我们将把它应用到我们在整本书中一直使用的 KinD 集群中。
审计策略是规则的集合，这些规则告诉应用编程接口服务器记录哪些应用编程接口调用以及如何记录。当 Kubernetes 解析策略文件时，所有规则都按顺序应用，只有初始匹配的策略事件将被应用。如果某个事件有多个规则，您可能不会在日志文件中收到预期的数据。出于这个原因，您需要注意事件的创建是否正确。
策略使用`audit.k8s.io`应用编程接口和`Policy`清单类型。以下示例显示了策略文件的开头:
```
apiVersion: audit.k8s.io/v1beta1
kind: Policy
rules:
  - level: Request
    userGroups: ["system:nodes"]
    verbs: ["update","patch"]
    resources:
      - group: "" # core
        resources: ["nodes/status", "pods/status"]
    omitStages:
      - "RequestReceived"
```