### Lattices and PV R1CS Performance Comparison

#### Table 1: Concrete Performance Comparison of zkSNARKs

| **Size** | **CRS Size** | **Proof Size** | **Setup Time** | **Prover Time** | **Verifier Time** |
|----------|--------------|----------------|----------------|-----------------|-------------------|
| 216      | 12.4 MB      | 128 B         | 5.6 s          | 3.3 ms          | 5.5 s             |
| 216      | 199 MB       | 128 B         | 72 s           | 79 s            | 3.4 ms            |
| 216      | 17.3 MB†     | 640 KB        | 167 s          | 3.5 ms          | 235 s             |
| 216      | —            | 4.3 MB        | —              | 1.3 s           | 2.5 s             |
| 216      | —            | 14 MB         | —              | 22 s            | 38 s              |
| 216      | —            | 121 KB        | —              | 380 ms          | 18 s              |
| 216      | 1.4 GB       | 15.2 KB       | 12 s           | 304 s           | 6.3 s             |
| 216      | 11 GB        | 16.4 KB       | 116 s          | 8.3 ms          | 21 s              |
| 216      | —            | 19.9 KB       | —              | 9.5 ms          | 184 s             |
| 216      | 191 MB       | 20.8 KB       | 88 s           | 2.5 ms          | 0.3 s             |
| 220      | 5.3 GB       | 16.4 KB       | 2240 s         | 4.5 s           | 4.1 ms            |
| 220      | 104 MB       | 19.9 KB       | 53 s           | 0.69 ms         | 3.9 s             |
| 220      | 1.9 GB       | 20.8 KB       | 877 s          | 1.2 ms          | 68 s              |

**Notes:**
- **†**: The CRS size for an instance of size 216 is estimated by doubling the size of the CRS for an instance of size 215.
- **‡**: The "Setup" time and "CRS" size for Fractal refer to the running time of the indexer and the size of the resulting proving state. Our system ran out of memory when running Fractal on an R1CS instance of size 220. Thus, we report the results for an instance of size 219 instead.
- **§**: Performance numbers for ethSTARK are based on verifying a Rescue hash chain (specifically Rescue122). The length of the hash chain is chosen to match the size of the corresponding R1CS system. Specifically, we use hash chains of length 270 and 4200 to represent R1CS systems with 216 and 220 constraints, respectively.

### Additional Notes

- **Soundness**: As discussed in Appendix E (Remark E.4), the parameter instantiation proposed in Gennaro et al. [65] only provides 15 bits of provable soundness. If parallel repetition is used to amplify to 128 bits of soundness, all parameters should be scaled by a factor of 8.5×. The table reports the numbers as presented in the original paper.
- **Field Characteristic**: This work considers lattice-based zkSNARKs for R1CS systems over finite fields of moderate characteristic (i.e., between 12 and 20 bits). Specifically, quadratic extension fields are used, which enable several concrete optimizations. For some applications, higher characteristic fields (e.g., 32-bit or 64-bit) may be more advantageous, but this will increase the proof size and reduce the applicability of certain optimizations.
- **Background**: The basis of our work is the compiler of Bitansky et al. [30], which combines a “linear PCP” with a “linear-only” encryption scheme. A linear PCP for an NP language L is defined by a linear oracle 𝝅 : Fℓ → F over a finite field F. The verifier submits a query matrix Q ∈ Fℓ×𝑘 to the oracle and obtains responses a ← QT𝝅 ∈ F𝑘. The linear PCP is sound if the probability that the verifier accepts a false statement is negligible. Concretely-efficient 4-query linear PCPs for R1CS can be constructed using quadratic arithmetic programs (QAPs) introduced by Gennaro et al. [64].
- **Lattice-Based Instantiations**: Gennaro et al. [65] introduced candidate linear-only encryption schemes based on lattices, adapted from basic Regev encryption [91]. For our purposes, a Regev-based encryption of a value 𝑥 ∈ Z𝑝 is a pair (a, c) where a ∈ Z𝑛
𝑞 and c = sTa + 𝑝𝑒 + 𝑥 ∈ Z𝑞. This scheme is linearly homomorphic, allowing the addition of ciphertexts. Gennaro et al. provided the first lattice-based implementation of the Bitansky et al. compiler using Regev encryption, but it is significantly less efficient than the best pairing-based constructions. For an R1CS instance of size 216, the proof size is 640 KB, over 5000× larger than the pairing-based construction of Groth [75].

### Conclusion

The main obstacle to the concrete efficiency of lattice-based zkSNARKs following the Bitansky et al. compiler [30] is the size of the lattice parameters. To achieve 128 bits of soundness, one approach is to set 𝑝 > 2128𝑁. If we take 𝑞 ≈ 2300 (and a typical error distribution), the resulting parameters will be significantly larger, leading to increased overhead. Future work should focus on constructing publicly-verifiable lattice-based zkSNARKs with comparable concrete efficiency.