    typedef struct _KERB_ECRYPT {
      ULONG EncryptionType;
      ULONG BlockSize;
      ULONG ExportableEncryptionType;
      ULONG KeySize;
      ULONG HeaderSize;
      ULONG PreferredCheckSum;
      ULONG Attributes;
      PCWSTR Name;
      PKERB_ECRYPT_INITIALIZE Initialize;
      PKERB_ECRYPT_ENCRYPT Encrypt;
      PKERB_ECRYPT_DECRYPT Decrypt;
      PKERB_ECRYPT_FINISH Finish;
      union {
        PKERB_ECRYPT_HASHPASSWORD_NT5 HashPassword_NT5;
        PKERB_ECRYPT_HASHPASSWORD_NT6 HashPassword_NT6;
      };
      PKERB_ECRYPT_RANDOMKEY RandomKey;
      PKERB_ECRYPT_CONTROL Control;
      PVOID unk0_null;
      PVOID unk1_null;
      PVOID unk2_null;
    } KERB_ECRYPT, *PKERB_ECRYPT;
`CDLocateCSystem`是Windows的一个API，位于`cryptdll.dll`，但粗略的搜索了一下并没有相关说明，似乎微软并未公开它，不过根据上述结构体以及dll文件，可以大概分析猜测这个api的作用。`cryptdll.dll`这个文件的导出函数并不多，而且可以大概猜测函数可能的功能：
导入上述定义的结构体，查看`CDLocateCSystem`对应的伪代码，发现这个函数其实就是通过传入的type从链表中寻找对应的块：
再接着跟一下变量`cCSystems`,
可以发现只有以后函数对这个变量有赋值操作，跟到函数`CDRegisterCSystem`，发现这个函数实际上是通过传入的参数对变量赋值：
再看这个函数的调用处，发现注册了一系列的密码算法:
继续分析可以发现`LibAttach`在DllMain中被调用，也就是说这个dll文件一被加载，就会注册各种密码学算法，供相关API使用，所以代码中调用`CDLocateCSystem`的目的是根据传入的`eType`获取一个用于`eType`对应类型的密码算法的实现，进而完成相应的加密或解密操作。根据结构体的成员定义以及`mimikatz`中相关的加密代码，可以猜测`cryptdll`中注册的密码学算法，使用方法基本一致，主要有一下流程：
  1. 通过`CDLocateCSystem`获取对应的结构体数据。
  2. 初始化操作（包括设置密钥、加解密数据大小等）。
  3. 加解密操作。
  4. 销毁相关环境。
回到正题，生成加密的ticket信息后，“格式化”票据信息生成票据，然后将票据写入缓存或者文件。
整个票据的生成流程大致如上所述，不过整个过程忽略了两个地方：一是PAC是如何生成的；二是加密票据前后调用的两个函数`kuhl_m_kerberos_ticket_createAppEncTicketPart`和`kuhl_m_kerberos_ticket_createAppKrbCred`。
###  PAC生成流程
PAC生成大体上分三个部分，也分别对应三个函数：
1、生成验证信息：kuhl_m_pac_infoToValidationInfo  
2、生成PAC：kuhl_m_pac_validationInfo_to_PAC  
3、PAC签名：kuhl_m_pac_signature
对于第一部分，可以透过结构体`PKERB_VALIDATION_INFO`来分析生成验证信息需要的内容，结构体的定义如下：
    typedef struct _KERB_VALIDATION_INFO {
      FILETIME LogonTime;
      FILETIME LogoffTime;
      FILETIME KickOffTime;
      FILETIME PasswordLastSet;
      FILETIME PasswordCanChange;
      FILETIME PasswordMustChange;
      RPC_UNICODE_STRING EffectiveName;
      RPC_UNICODE_STRING FullName;
      RPC_UNICODE_STRING LogonScript;
      RPC_UNICODE_STRING ProfilePath;
      RPC_UNICODE_STRING HomeDirectory;
      RPC_UNICODE_STRING HomeDirectoryDrive;
      USHORT LogonCount;
      USHORT BadPasswordCount;
      ULONG UserId;
      ULONG PrimaryGroupId;
      ULONG GroupCount;
      /* [size_is] */ PGROUP_MEMBERSHIP GroupIds;
      ULONG UserFlags;
      USER_SESSION_KEY UserSessionKey;
      RPC_UNICODE_STRING LogonServer;
      RPC_UNICODE_STRING LogonDomainName;
      PISID LogonDomainId;
      ULONG Reserved1[ 2 ];
      ULONG UserAccountControl;
      ULONG SubAuthStatus;
      FILETIME LastSuccessfulILogon;
      FILETIME LastFailedILogon;
      ULONG FailedILogonCount;
      ULONG Reserved3;
      ULONG SidCount;
      /* [size_is] */ PKERB_SID_AND_ATTRIBUTES ExtraSids;
      PISID ResourceGroupDomainSid;
      ULONG ResourceGroupCount;
      /* [size_is] */ PGROUP_MEMBERSHIP ResourceGroupIds;
    } KERB_VALIDATION_INFO, *PKERB_VALIDATION_INFO;
关于结构体中的几个和时间相关的成员，其实只需要关注`LogonTime`，它由传入的结构体变量`lifeTimeData`中的`TicketStart`成员赋值，后者的数据内容通过`GetSystemTimeAsFileTime`获得，这个msdn对这个API的解释为：获取当前系统的时间。当然，最后赋值给`LogonTime`的值是处理之后的值。而对于剩余的和时间相关的成员，统一赋值为0x7fffffffffffffffll。
    GetSystemTimeAsFileTime(&lifeTimeData.TicketStart);
    *(PULONGLONG) &lifeTimeData.TicketStart -= *(PULONGLONG) &lifeTimeData.TicketStart % 10000000 - ((LONGLONG) wcstol(szLifetime, NULL, 0) * 10000000 * 60);
此外，`UserId`、`GroupIds`、`GroupCount`等成员实际上是从命令行参数获得，但通常情况下生成票据我们似乎并没有用到这些参数，所以传入的值实际上是NULL。  
获取到验证信息之后，就根据这些信息生成APC，PAC的总体结构如下：
关于PAC结构的代码如下：
    (*pacType)->cBuffers = n;
    (*pacType)->Version = 0;
    (*pacType)->Buffers[0].cbBufferSize = szLogonInfo;
    (*pacType)->Buffers[0].ulType = PACINFO_TYPE_LOGON_INFO;
    (*pacType)->Buffers[0].Offset = offsetData;
    RtlCopyMemory((PBYTE) *pacType + (*pacType)->Buffers[0].Offset, pLogonInfo, (*pacType)->Buffers[0].cbBufferSize);
    (*pacType)->Buffers[1].cbBufferSize = szClientInfo;
    (*pacType)->Buffers[1].ulType = PACINFO_TYPE_CNAME_TINFO;
    (*pacType)->Buffers[1].Offset = (*pacType)->Buffers[0].Offset + szLogonInfoAligned;
    RtlCopyMemory((PBYTE) *pacType + (*pacType)->Buffers[1].Offset, pClientInfo, (*pacType)->Buffers[1].cbBufferSize);
    if(szClaimsAligned)
    {
      (*pacType)->Buffers[2].cbBufferSize = szClaims;
      (*pacType)->Buffers[2].ulType = PACINFO_TYPE_CLIENT_CLAIMS;
      (*pacType)->Buffers[2].Offset = (*pacType)->Buffers[1].Offset + szClientInfoAligned;
      RtlCopyMemory((PBYTE) *pacType + (*pacType)->Buffers[2].Offset, pClaims, (*pacType)->Buffers[2].cbBufferSize);
    }
    (*pacType)->Buffers[n - 2].cbBufferSize = szSignature;
    (*pacType)->Buffers[n - 2].ulType = PACINFO_TYPE_CHECKSUM_SRV;
    (*pacType)->Buffers[n - 2].Offset = (*pacType)->Buffers[n - 3].Offset + SIZE_ALIGN((*pacType)->Buffers[n - 3].cbBufferSize, 8);
    RtlCopyMemory((PBYTE) *pacType + (*pacType)->Buffers[n - 2].Offset, &signature, FIELD_OFFSET(PAC_SIGNATURE_DATA, Signature));
    (*pacType)->Buffers[n - 1].cbBufferSize = szSignature;
    (*pacType)->Buffers[n - 1].ulType = PACINFO_TYPE_CHECKSUM_KDC;
    (*pacType)->Buffers[n - 1].Offset = (*pacType)->Buffers[n - 2].Offset + szSignatureAligned;
    RtlCopyMemory((PBYTE) *pacType + (*pacType)->Buffers[n - 1].Offset, &signature, FIELD_OFFSET(PAC_SIGNATURE_DATA, Signature));
其中，第一部分（`pLogonInfo`）即对`kuhl_m_pac_infoToValidationInfo`的结果进行加密操作后的内容，这里加密实际上是调用的`kull_m_rpc_Generic_Encode`，不过实际上最后的加密调用了`NdrMesTypeEncode2`，它是[midles.h](https://docs.microsoft.com/en-us/windows/win32/api/midles/)下的一个函数。
关于客户端信息（`ClientInfo`），首先需要明确的是这部分内容是明文信息，主要内容为用户名。Cliams其实也是加密的数据，是否包含这部分内容取决于是否传入参数`Claims`，显然通常情况下我们并没有传入这一项，所以这里不再继续跟进。
至此，PAC的主体已经说明结束，剩余两部分保存的是主体部分的校验和。计算校验和使用的是`CDLocateCheckSum`，这个API来自`cryptdll.dll`，用法和`CDLocateCSystem`类似。
###  两个函数
其实`kuhl_m_kerberos_ticket_createAppEncTicketPart`和`kuhl_m_kerberos_ticket_createAppKrbCred`都是围绕两个结构体展开的即：
    typedef struct berElement {
      UNICODE PTCHAR opaque; 
    } BerElement;
    typedef struct berval {
      ULONG bv_len;
      UNICODE PTCHAR bv_val;
    } LDAP_BERVAL, *PLDAP_BERVAL, BERVAL, *PBERVAL;
涉及到这两个结构体的函数位于[winber.h](https://docs.microsoft.com/en-us/windows/win32/api/winber/)，不过对于前面提到的两个函数，我们们只需要关注两个函数：
1、`ber_printf`，顾名思义，其实就是用来格式化数据的，mimikatz中的`kull_m_asn1_GenTime`其实也是对该函数的封装  
2、`ber_flatten`，MSDN的解释是从BerElement结构中获取数据保存到一个berval结构中，换句话说其实也就是对数据的进一步“格式化”
> 关于头文件`winber.h`，其实MSDN上也说明了是用于LDAP的，因为AD域是基于LDAP的，所以这里对数据的一些“格式化”操作也是事出有因。  
>  此外，使用这个头文件时还需引入`windows.h`和`winldap.h`，并且添加依赖项：`wldap32.lib`(`#pragma
> comment(lib,"wldap32.lib")`)
当然，分析这两个函数的主要目的并不它实现了什么样的功能，而是透过这个功能（对数据“格式化”）得知票据的加密部分的内容构成，以及最后得到的票据内容构成。  
首先看加密部分的内容构成，其实从函数传入的参数来看，这部分应该包含了整个票据的所有信息，因为函数`kuhl_m_kerberos_ticket_createAppEncTicketPart`获取的参数是记录票据信息的结构体数据和pac信息，查看函数的实现部分其实和猜想大差不差：按照固定的顺序将域名、用户名、生成/失效时间等信息通过`ber_printf`写入到`BerElement`类型的变量随后通过`ber_flatten`得到最终需要加密的数据格式（存储到结构体`berval`类型的变量中），并返回给调用者。
透过mimikatz的代码，其实可以看出要加密的内容大体的格式：
    ber_printf(pBer, "t{{t{", MAKE_APP_TAG(ID_APP_ENCTICKETPART), MAKE_CTX_TAG(ID_CTX_ENCTICKETPART_FLAGS));
    kull_m_asn1_BitStringFromULONG(pBer, ticket->TicketFlags);
    ber_printf(pBer, "}t{", MAKE_CTX_TAG(ID_CTX_ENCTICKETPART_KEY));
    kuhl_m_kerberos_ticket_createSequenceEncryptionKey(pBer, ticket->KeyType, ticket->Key.Value, ticket->Key.Length);
    ber_printf(pBer, "}t{", MAKE_CTX_TAG(ID_CTX_ENCTICKETPART_CREALM));
    kull_m_asn1_GenString(pBer, &ticket->AltTargetDomainName);
    ber_printf(pBer, "}t{", MAKE_CTX_TAG(ID_CTX_ENCTICKETPART_CNAME));
    kuhl_m_kerberos_ticket_createSequencePrimaryName(pBer, ticket->ClientName);
    ber_printf(pBer, "}t{{t{i}t{o}}}t{", MAKE_CTX_TAG(ID_CTX_ENCTICKETPART_TRANSITED), MAKE_CTX_TAG(ID_CTX_TRANSITEDENCODING_TR_TYPE), 0, MAKE_CTX_TAG(ID_CTX_TRANSITEDENCODING_CONTENTS), NULL, 0, MAKE_CTX_TAG(ID_CTX_ENCTICKETPART_AUTHTIME));
    kull_m_asn1_GenTime(pBer, &ticket->StartTime);
    ber_printf(pBer, "}t{", MAKE_CTX_TAG(ID_CTX_ENCTICKETPART_STARTTIME));
    kull_m_asn1_GenTime(pBer, &ticket->StartTime);
    ber_printf(pBer, "}t{", MAKE_CTX_TAG(ID_CTX_ENCTICKETPART_ENDTIME));
    kull_m_asn1_GenTime(pBer, &ticket->EndTime);
    ber_printf(pBer, "}t{", MAKE_CTX_TAG(ID_CTX_ENCTICKETPART_RENEW_TILL));
    kull_m_asn1_GenTime(pBer, &ticket->RenewUntil);
    ber_printf(pBer, "}"); /* ID_CTX_ENCTICKETPART_CADDR not present */
    if(PacAuthData && PacAuthDataSize)
    {
      ber_printf(pBer, "t{{{t{i}t{", MAKE_CTX_TAG(ID_CTX_ENCTICKETPART_AUTHORIZATION_DATA), MAKE_CTX_TAG(ID_CTX_AUTHORIZATIONDATA_AD_TYPE), ID_AUTHDATA_AD_IF_RELEVANT, MAKE_CTX_TAG(ID_CTX_AUTHORIZATIONDATA_AD_DATA));
      if(pBerPac = ber_alloc_t(LBER_USE_DER))
      {
        ber_printf(pBerPac, "{{t{i}t{o}}}", MAKE_CTX_TAG(ID_CTX_AUTHORIZATIONDATA_AD_TYPE), ID_AUTHDATA_AD_WIN2K_PAC, MAKE_CTX_TAG(ID_CTX_AUTHORIZATIONDATA_AD_DATA), PacAuthData, PacAuthDataSize);
        if(ber_flatten(pBerPac, &pBerValPac) >= 0)
          ber_printf(pBer, "o", pBerValPac->bv_val, pBerValPac->bv_len);
        ber_free(pBerPac, 1);
      }
      ber_printf(pBer, "}}}}");
    }
    ber_printf(pBer, "}}");
这里值得注意的是PAC信息是作为一个可选项加入到要加密内容的尾部的，而是否包含PAC信息取决于生成票据时是否传入SID。对于最后载入缓存或写入文件的内容，即`kuhl_m_kerberos_ticket_createAppKrbCred`的返回值也是通过同样的形式构造数据，最后调用`ber_flatten`生成`berval`结构的数据。