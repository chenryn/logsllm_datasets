### Defining and Representing Permissions in an SNS Knowledge Base

We define a class `Action` that consists of three individual members: `select`, `insert`, and `delete`. Permissions are characterized by a subset of the `Permission` class. The `Permission` class is related to the `ReifiedProperty` class using the object property `pResource` to specify the resources. It is also related to the `Action` class via the object property `pAction` to specify the actions considered in the permission.

For example, consider the privacy setting in Facebook that states "Who can post to your timeline?". The corresponding permission can be represented as follows:

```
S2 ≡ (pAction value insert)
and (pResource some (RPannotates
and (ropObj some (Wall
and (inverse ropObj some (RPowns
and (ropSbj value me) )) )) ))
```

In this conjunctive expression:
- The first clause specifies the action as `insert`.
- The second complex clause indicates that the resource should be of a reified property class `RPannotate`, where its object is a `Wall`, and that wall is owned by the user (`me`). In other words, the resource is the `annotates` relationship that annotates the `Wall` belonging to the user.

### Analyzing Privacy Control Permissions

We identify three categories of permissions in an SNS:
1. **Privacy Setting Permissions**: These are captured by user-configurable privacy settings, which usually have dedicated control elements in the system.
2. **Described System Permissions**: These consist of permissions that are not configurable by users and whose corresponding system-defined policy is well-documented.
3. **Ideal Permissions**: These refer to the permissions that a user ideally considers as privacy-sensitive, which may depend on the information model of the SNS.

Let `S`, `D`, and `I` represent the classes of privacy setting, described system, and ideal permissions in an SNS, respectively. Figure 4 depicts these permission classes in relation to each other. The privacy setting permissions and described system permissions are disjoint by definition. The ideal permissions (the rectangle) likely cover both these classes. However, there may exist parts of ideal permissions that are covered by neither privacy settings nor described system permissions. Our framework can reason about the existence and nature of such permissions.

### Permission Specification and Analysis

Our permission specification, as proposed in Section 3.3, is expressed in terms of classes in the ontology. We can leverage ontological reasoning power to compare and analyze such permissions. Let `P` and `Q` be two permission classes. An OWL DL reasoner can efficiently evaluate the following permission compositions:
- `not P`: Denotes what `P` does not cover.
- `P and Q`: Denotes what both `P` and `Q` cover.
- `P or Q`: Denotes what either `P` or `Q` (or both) cover.

Using the above compositional semantics and subsumption reasoning, we can analyze permissions in an SNS. The class `M ≡ I and not (S or D)` represents the permissions that users are missing from the picture. We further elaborate on such analysis in our case study in Section 5.

### Completeness Privacy Properties

We propose two completeness privacy properties for an SNS based on this analysis:

**Definition 1 (Completely Controllable)**: An SNS with its privacy setting permissions `S` is completely controllable with regards to ideal permissions `I` if and only if `I ⊑ S`.

In practice, with a reasonable assumption about ideal permissions, the above notion of completeness cannot be satisfied in SNSs. The users may be overwhelmed by the complexity of the options, and the system may choose not to provide such controls due to various design considerations.

**Definition 2 (Completely Known)**: An SNS with its privacy setting and described system permissions `<S, D>` is completely known with regards to ideal permissions `I` if and only if `I ⊑ (S or D)`.

This notion of completeness verifies if the collection of privacy settings and described system permissions by an SNS covers the ideal permissions. If not, we can employ subsumption reasoning to find permissions that the user misses.

### Case Study: Facebook Privacy Control Permissions

To evaluate our framework, we analyze the privacy control policies in Facebook. We use the ontology described in Section 2, which is representative enough to describe our methodology, though it does not model every detail in Facebook for brevity reasons.

Facebook provides a centralized dashboard for controlling privacy settings such as the visibility of statuses, tagging, etc. A user can determine the visibility of her profile information such as education, contact info, etc. We collected these settings and formulated their corresponding permissions.

Table 1 lists these settings, either worded exactly as in the settings page or representative enough, along with their corresponding permissions. Note that the listed privacy settings are limited to the information that can be captured by our proposed ontology in Section 2.

**Table 1: Privacy Setting Permissions in Facebook**

| Privacy Setting | Corresponding Permission |
|-----------------|--------------------------|
| Profile attributes privacy (for each item) | (pAction value select) and (pResource some (rdpSbj value me)) |
| Who can post on your timeline? | (pAction value insert) and (pResource some (RPannotates and (ropObj some (Wall and (inverse ropObj some (RPowns and (ropSbj value me))))))) |
| Who can see what others post on your timeline? | (pAction value select) and (pResource some (RPannotates and (ropObj some (Wall and (inverse ropObj some (RPowns and (ropSbj value me))))))) |
| Who can see what you post? (per item) | (pAction value select) and (pResource some (RPhasContent and (rdpSbj some (inverse ropObj some (RPowns and (ropSbj value me)))))) |
| Review tags friends add to your own posts | (pAction value insert) and (pResource some (RPannotates and (ropObj some (inverse ropObj some (RPowns and (ropSbj value me)))) and (ropSbj some PhotoUserTag))) |
| Visibility of photos (managed per album) | (pAction value select) and (pResource some (RPhasContent and (rdpSbj some (inverse ropObj some (RPowns and (ropSbj value me)))) or (RPowns and (ropSbj value me) and (ropObj some Photo))) |

**Table 2: Described System Permissions in Facebook**

| Described System Policy | Corresponding Permission |
|-------------------------|--------------------------|
| Who can see tags I make? | (pAction value select) and (pResource some (RPannotatesWith and (ropSbj some (UserTag and (inverse ropObj some (RPowns and (ropSbj value me))))))) |
| Who can see that I’m tagged in a post? | (pAction value select) and (pResource some (RPannotatesWith and (ropObj value me))) |
| Who can see a tag that someone added to my post? | (pAction value select) and (pResource some (RPannotates and (ropObj some (UserTaggable and (inverse ropObj some (RPowns and (ropSbj value me))))))) |

Based on our model of SNS information, our intuition is that a user should be able to control relationships that are about her. In terms of our proposed Facebook ontology, these include properties that directly relate to the user and the properties that relate to some digital objects owned by the user. We consider these as our ideal permissions for a user in an SNS, as shown in Table 3.

**Table 3: Ideal Permissions for Facebook**

| Ideal Privacy Setting | Corresponding Permission |
|-----------------------|--------------------------|
| Control whatever that relates to you | (pAction some Action) and (pResource some (ReifiedProperty and ((rdpSbj value me) or (ropObj value me) or (ropSbj value me)))) |
| Control whatever that relates to something belonging to you | (pAction some Action) and (pResource some (ReifiedProperty and ( (rdpSbj some (inverse ropObj some (RPowns and (ropSbj value me)))) or (ropObj some (inverse ropObj some (RPowns and (ropSbj value me)))) or (ropSbj some (inverse ropObj some (RPowns and (ropSbj value me)))) ))) |

Based on the abovementioned permissions, it is clear that Facebook does not satisfy the completely controllable property (Definition 1) with regards to the ideal policies listed in Table 3. The permissions in Table 2 are clearly not covered by the privacy settings, and we were able to verify this using our framework. For instance, `D1 ⊑ I and not S` is satisfiable.

Our framework also shows a negative result for Facebook with regards to the completely known property (Definition 2), i.e., `I ⊑ (S or D)` is not satisfiable. To identify some of the missing policies, we formulated several permission classes (subclasses of ideal permissions) and tested against the formula `M ≡ I and not (S or D)`, as explained in Section 4. We report in Table 4 some permissions that are missing in current Facebook privacy control policies according to our analysis.

**Table 4: Sample Missing Permissions in Facebook**

| Missing Policy | Corresponding Permission |
|----------------|--------------------------|
| Who can see that I have tagged someone? | (pAction value select) and (pResource some (RPowns and (ropObj some PhotoUserTag) and (ropSbj value me))) |
| Who can see that I have liked something? | (pAction value select) and (pResource some (RPlikes and (ropSbj value me))) |
| Who can see my comment on someone else’s post? | (pAction value select) and (pResource some (RPannotates and (ropSbj some (Comment and (inverse ropObj some (RPowns and (ropSbj value me))))))) |
| Who can see if I am friend with someone? | (pAction value select) and (pResource some (RPisFriendOf and (ropSbj value me))) |

### Conclusions

The privacy settings in existing SNSs such as Facebook do not provide users with adequate power to control their privacy-sensitive information. Furthermore, SNS system-defined policies are not typically clearly described and hence may not be easily understood by the users. To enable assessment and analysis of privacy protection achieved within an SNS environment, we proposed an analysis framework based on the ontology-based formulation of permissions in privacy control policies. We formulated completeness properties based on a given ideal specification of permissions and policies by an SNS in terms of privacy settings and described system policies. Our framework is capable of formally reasoning about such completeness properties and identifying undocumented and unclear practices of an SNS with regards to protecting privacy-sensitive information. We demonstrated the analysis power of our framework by performing a case study on analyzing Facebook’s privacy control policies.

As future work, we plan to investigate efficient and effective algorithms to automate the process of identifying the missing policies. Moreover, we plan to extend our approach towards a comprehensive framework that can consider other components in the privacy control policies (e.g., subjects) and perform a variety of privacy analysis tasks to support users and system developers.

### Acknowledgments

This research has been partly supported by the U.S. National Science Foundation awards IIS-0545912 and DUE-0621274. We would like to thank Professor Elisa Bertino and our anonymous reviewers for their helpful comments.

### References

[1] B. Carminati, E. Ferrari, R. Heatherly, M. Kantarcioglu, and B. Thuraisingham. A semantic web based framework for social network access control. In Proc. 14th ACM Symposium on Access Control Models and Technologies, pages 177–186. ACM, 2009.

[2] B. Carminati, E. Ferrari, and A. Perego. Enforcing access control in Web-based social networks. ACM Trans. Inf. Syst. Secur., 13(1):1–38, Nov. 2009.

[3] P. W. Fong. Relationship-based access control: protection model and policy language. CODASPY ’11, pages 191–202, San Antonio, TX, USA, 2011. ACM.

[4] P. Hitzler, M. Krötzsch, B. Parsia, P. F. Patel-Schneider, and S. Rudolph. OWL 2 Web Ontology Language - Primer. http://www.w3.org/TR/owl2-primer/, 2009.

[5] V. Kolovski, J. Hendler, and B. Parsia. Analyzing web access control policies. In Proc. 16th Int’l Conference on World Wide Web, pages 677–686, 2007.

[6] D. Lin, P. Rao, E. Bertino, N. Li, and J. Lobo. EXAM: a comprehensive environment for the analysis of access control policies. International Journal of Information Security, 9(4):253–273, Aug. 2010.

[7] A. Masoumzadeh and J. Joshi. OSNAC: An Ontology-based Access Control Model for Social Networking Systems. In Proc. 2nd IEEE Int’l Conference on Information Privacy, Security, Risk and Trust (PASSAT 2010), pages 751–759, 2010.

[8] A. Masoumzadeh and J. Joshi. Ontology-based access control for social network systems. International Journal of Information Privacy, Security and Integrity (Special Issue: Selected Papers from PASSAT 2010), 1(1):59–78, Jan. 2011.