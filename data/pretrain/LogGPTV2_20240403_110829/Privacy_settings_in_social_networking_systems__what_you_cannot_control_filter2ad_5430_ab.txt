ing it from an SNS knowledge base. We deﬁne class Action
which consists of three individual members select, insert, and
delete, respectively. We represent permissions by character-
izing a subset of class Permission. The class Permission is
related to class ReﬁeidProperty using object property pRe-
source to specify the resources.
It is also related to class
Action using object property pAction in order to specify the
considered action(s) in the permission. As an example, con-
sider the privacy setting in Facebook that states “who can
post to your timeline? ”. The corresponding permission can
be represented using the following speciﬁcation:
S2 ≡(pAction value insert)
and (pResource some (RPannotates
and (ropObj some (Wall
and (inverse ropObj some (RPowns
and (ropSbj value me) )) )) ))
In the above conjunctive expression, the ﬁrst clause spec-
iﬁes the action as insertion. The second complex clause
indicates that the resource should be of a reiﬁed property
class RPannotate, where its object is a Wall, and that wall is
ReifiedProperty 
pResource 
Permission 
pAction 
Action 
ReifiedDataProperty 
ReifiedObjectProperty 
select 
insert 
delete 
RPhasContent  RPhasFullname  RPisFriendOf 
RPattends 
RPowns 
RPlikes 
RPannotates 
RPannotatesWith 
Figure 3: Representing Permission Speciﬁcation in Ontology
I 
S 
xxxxxxx
xxxxxxx
xxxxxxx
xxxxxxx
xxxxxxx
D 
Figure 4: Permission Categories Space for an SNS
owned by me. In other words, the resource is the annotates
relationship that annotates the Wall belonging to me.
4. ANALYZING PRIVACY CONTROL PER-
MISSIONS
We identify three categories of permissions in an SNS:
Privacy Setting Permissions These are captured by user-
conﬁgurable privacy settings, which usually have ded-
icated control elements in the system.
Described System Permissions These consists of the per-
missions that are not conﬁgurable by users and their
corresponding system-deﬁned policy is well documented.
Ideal Permissions These refer to the permissions that a
user ideally considers as privacy-sensitive, which may
depend on the information model of the SNS.
Let S, D, and I, represent the classes of privacy setting,
described system, and ideal permissions in an SNS, respec-
tively. Figure 4 depicts these permission classes in relation
to each other. The privacy setting permissions and described
system permissions are disjoint by deﬁnition. The ideal per-
missions (the rectangle) is likely to cover both these classes.
However, we note that there may exist parts of ideal per-
missions that are covered by neither privacy settings nor
described system permissions.
In other words, there may
exist some privacy-sensitive permissions which are not me-
diated by a transparent policy. Our framework can reason
about existence and nature of such permissions.
Our permission speciﬁcation, as proposed in Section 3.3,
is expressed in terms of classes in the ontology. Hence, we
can leverage ontological reasoning power to compare and
analyze such permissions. Let P and Q be two permission
classes. An OWL DL reasoner can eﬃciently evaluate the
following permission compositions:
• not P: denotes what P does not cover.
• P and Q: denotes what both P and Q cover.
• P or Q: denotes what either P or Q (or both) cover.
Using the above compositional semantics and subsump-
tion re we can analyze permissions in an SNS. The class M
≡ I and not (S or D) represents the permissions that users
are missing from the picture. We further elaborate on such
analysis in our case study in Section 5.
We propose two completeness privacy properties for an
SNS based on this analysis. The following property ensures
that users’ ideal permissions are part of the privacy settings
and can be controlled by them.
Definition 1
(Completely Controllable). An SNS
with its privacy setting permissions S is completely control-
lable with regards to ideal permissions I, if and only if I ⊑
S.
In practice, with a reasonable assumption about ideal per-
missions, the above notion of completeness cannot be satis-
ﬁed in SNSs. The users may be overwhelmed by the com-
plexity of the options, and the system may choose not to
provide such controls due to various design considerations.
The next notion of completeness is more practical.
Definition 2
(Completely Known). An SNS with its
privacy setting and described system permissions hS, Di, is
completely known with regards to ideal permissions I, if and
only if I ⊑ (S or D).
The above notion of completeness veriﬁes if the collection
of privacy settings and described system permissions by an
SNS covers the ideal permissions. If not, we can employ sub-
sumption reasoning to ﬁnd permissions that the user misses.
5. CASE STUDY: FACEBOOK PRIVACY CON-
TROL PERMISSIONS
In order to evaluate our framework, we analyze the pri-
vacy control policies in Facebook. We leverage the ontology
described in Section 2, in which we refrain from completely
modeling every detail in Facebook for brevity reasons. We
believe the current ontology is representative enough to de-
scribe our methodology, and other features can be captured
in a similar fashion.
Facebook provides a centralized dashboard for controlling
privacy settings such as the visibility of the statuses, tag-
ging, etc. Moreover, a user can determine the visibility of
her proﬁle information such as education, contact info, etc.
We collected those settings and formulated their correspond-
ing permissions.
In Table 1, we list those settings either
worded as exactly as in the settings’ page or representative
enough, and corresponding permissions. Note that the listed
privacy settings are limited to the information that can be
captured by our proposed ontology in Section 2. For in-
stance, the setting “Who can send you Facebook messages? ”
is not listed since we did not include messages in our on-
tology. Our current ontology also does not model apps, or
Privacy Setting
S1 Proﬁle attributes pri-
vacy (for each item)
S2 Who can post on your
timeline?
(pAction value select) and (pResource some (rdpSbj value me) )
Corresponding Permission
(pAction value insert) and (pResource some (RPannotates and (ropObj some (Wall
and (inverse ropObj some (RPowns and (ropSbj value me))) ))))
(pAction value select) and (pResource some (RPannotates
S3 Who can see what others
and (ropObj some (Wall and (inverse ropObj some (RPowns and (ropSbj value me)))))
post on your timeline?
S4 Who can see what you
post? (per item)
and (ropSbj some (WallPost and (inverse ropObj some (RPowns and (ropSbj value me))))) ))
(pAction value select) and (pResource some (RPhasContent
and (rdpSbj some (inverse ropObj some (RPowns and (ropSbj value me)))) ))
(pAction value insert) and (pResource some (RPannotates
S5 Review tags friends add
and (ropObj some (inverse ropObj some (RPowns and (ropSbj value me))))
to your own posts
and (ropSbj some PhotoUserTag) ))
(pAction value select) and (pResource some (RPhasContent
S6 Visibility
of
photos
and (rdpSbj some (inverse ropObj some (RPowns and (ropSbj value me)))) )
(managed per album)
or (RPowns and (ropSbj value me) and (ropObj some Photo)) )
Table 1: Privacy Setting Permissions in Facebook
Described System Policy
Corresponding Permission
(pAction value select) and (pResource some (RPannotatesWith
D1 Who can see tags I make?
and (ropSbj some (UserTag and (inverse ropObj some (RPowns
D2 Who can see that I’m tagged in a post?
and (ropSbj value me) )))) ))
(pAction value select) and (pResource some (RPannotatesWith
and (ropObj value me) ))
(pAction value select) and (pResource some (RPannotates
D3 Who can see a tag that someone added
and (ropObj some (UserTaggable and (inverse ropObj some (RPowns
to my post?
and (ropSbj value me) )))) ))
Table 2: Described System Permissions in Facebook
the posts that are automatically made by the system on
one’s timeline when she is tagged in another post. More-
over, in order to avoid enumerating a tedious list of settings,
we provide one privacy setting that accounts for all proﬁle
attributes (S1). That setting can cover permissions corre-
sponding to a setting like “Who can look you up using the
email address or phone number you provided? ” as well as
many other single visibility controls in front of every proﬁle
item under a user’s about page.
Unfortunately, Facebook is not very transparent about its
system deﬁned policies. Some of the system deﬁned policies
are documented in the help pages, in the format of ques-
tions and answers, which is not easily accessible, unless one
goes through all the pages. For instance, the following ques-
tion is provided in the help page for tagging (and not under
privacy!): “When I tag someone in a photo, post or app ac-
tivity, who can see it? ”. The answer provided to this ques-
tion explains that the audience selected for the post, the
user tagged, etc., can see it. Table 2 lists some of the de-
scribed system policies that we were able to harvest from
Facebook’s help pages, and that were related to the infor-
mation captured in our ontology.
Based on our model of SNS information, our intuition is
that a user should be able to control relationships that are
about her.
In terms of our proposed Facebook ontology,
those includes properties that directly relate to the user,
and the properties that relate to some digital objects owned
by the user. We consider these as our ideal permissions
for a user in an SNS, as shown in Table 3. Note that this
is a fairly conservative ideal model in the sense that every
related information to a user is considered as potentially
privacy-sensitive. However, we see it as a safe and reasonable
assumption.
Based on the abovementioned permissions, it is clear that
Facebook does not satisfy completely controllable property
(Deﬁnition 1) with regards to ideal policies listed in Table
3. The permissions in Table 2 are clearly not covered by the
privacy settings, and we were able to verify this using our
framework. For instance, D1 ⊑ I and not S is satisﬁable.
Our framework also shows negative result for Facebook
with regards to the completely known property (Deﬁnition
2), i.e., I ⊑ (S or D) is not satisﬁable.
In order to iden-
tify some of the missing policies, we formulated several per-
mission classes (subclasses of ideal permissions), and tested
against formula M ≡ I and not (S or D), as explained in
Section 4. We report in Table 4 some permissions that are
missing in current Facebook privacy control policies accord-
ing to our analysis. The table lists only a sample of permis-
sions with selection as action. As expected, many missing
permissions can be found for insertion and deletion permis-
sions, that we did not include.
Ideal Privacy Setting
Corresponding Permission
I1 Control whatever that relates to you
I2 Control whatever that relates to some-
thing belonging to you
(pAction some Action) and (pResource some (ReiﬁedProperty
and ((rdpSbj value me) or (ropObj value me) or (ropSbj valueuj me)) ))
(pAction some Action) and (pResource some (ReiﬁedProperty
and ( (rdpSbj some (inverse ropObj some (RPowns and (ropSbj value me))))
or (ropObj some (inverse ropObj some (RPowns and (ropSbj value me))))
or (ropSbj some (inverse ropObj some (RPowns and (ropSbj value me)))) ) ))
Table 3: Ideal Permissions for Facebook
Missing Policy
Corresponding Permission
M1 Who can see that I have tagged someone?
M2 Who can see that I have liked something?
(pAction value select) and (pResource some (RPowns
and (ropObj some PhotoUserTag) and (ropSbj value me) ))
(pAction value select) and (pResource some (RPlikes
and (ropSbj value me) ))
(pAction value select) and (pResource some (RPannotates
and (ropSbj some (Comment and (inverse ropObj some (RPowns
M3 Who can see my comment on someone
and (ropSbj value me) )) ))
else’s post?
M4 Who can see if I am friend with someone?
and (ropObj some (inverse ropObj some (RPowns
and (ropSbj some Others) )) ))
(pAction value select) and (pResource some (RPisFriendOf
and (ropSbj value me) ))
Table 4: Sample Missing Permissions in Facebook
6. CONCLUSIONS
The privacy settings in existing SNSs such as Facebook
do not provide users with adequate power to control their
privacy-sensitive information. Furthermore, SNS system-
deﬁned policies are not typically clearly described and hence
may not be easily understood by the users. To enable as-
sessment and analysis of privacy protection achieved within
an SNS environment, we proposed an analysis framework
based on the ontology-based formulation of permissions in
privacy control policies. We formulated completeness prop-
erties based on a given ideal speciﬁcation of permissions and
policies by an SNS in terms of privacy settings and described
system policies. Our framework is capable of formally rea-
soning about such completeness properties and identifying
undocumented and unclear practices of an SNS with regards
to protecting privacy-sensitive information. We demonstrated
the analysis power of our framework by performing a case
study on analyzing Facebook’s privacy control policies.
As future work, we plan to investigate eﬃcient and eﬀec-
tive algorithms to automate the process of identifying the
missing policies. Moreover, we plan to extend our approach
towards a comprehensive framework that can consider other
components in the privacy control policies (e.g., subjects),
and perform variety of privacy analysis tasks to support
users and system developers.
Acknowledgments
This research has been partly supported by the U.S. Na-
tional Science Foundation awards IIS-0545912 and DUE-
0621274. We would like to thank Professor Elisa Bertino
and our anonymous reviewers for their helpful comments.
7. REFERENCES
[1] B. Carminati, E. Ferrari, R. Heatherly,
M. Kantarcioglu, and B. Thuraisingham. A semantic
web based framework for social network access control.
In Proc. 14th ACM Symposium on Access Control
Models and Technologies, pages 177–186. ACM, 2009.
[2] B. Carminati, E. Ferrari, and A. Perego. Enforcing
access control in Web-based social networks. ACM
Trans. Inf. Syst. Secur., 13(1):1–38, Nov. 2009.
[3] P. W. Fong. Relationship-based access control:
protection model and policy language. CODASPY ’11,
pages 191–202, San Antonio, TX, USA, 2011. ACM.
[4] P. Hitzler, M. Kr¨otzsch, B. Parsia, P. F.
Patel-Schneider, and S. Rudolph. OWL 2 Web
Ontology Language - Primer.
http://www.w3.org/TR/owl2-primer/, 2009.
[5] V. Kolovski, J. Hendler, and B. Parsia. Analyzing web
access control policies. In Proc. 16th Int’l Conference
on World Wide Web, pages 677–686, 2007.
[6] D. Lin, P. Rao, E. Bertino, N. Li, and J. Lobo. EXAM:
a comprehensive environment for the analysis of access
control policies. International Journal of Information
Security, 9(4):253–273, Aug. 2010.
[7] A. Masoumzadeh and J. Joshi. OSNAC: An
Ontology-based Access Control Model for Social
Networking Systems. In Proc. 2nd IEEE Int’l
Conference on Information Privacy, Security, Risk and
Trust (PASSAT 2010), pages 751–759, 2010.
[8] A. Masoumzadeh and J. Joshi. Ontology-based access
control for social network systems. International
Journal of Information Privacy, Security and Integrity
(Special Issue: Selected Papers from PASSAT 2010),
1(1):59–78, Jan. 2011.