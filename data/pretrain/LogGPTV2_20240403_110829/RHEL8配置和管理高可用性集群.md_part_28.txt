从 RHEL 8.4 开始，您可以通过为 [*clone_id*]{.emphasis}
选项指定值来为克隆设置自定义名称。
下表描述了您可以为可升级资源指定的额外克隆选项。
::: table
[]{#assembly_creating-multinode-resources-configuring-and-managing-high-availability-clusters.html#tb-promotablecloneoptions-HAAR}
**表 17.2. 为可升级克隆提供了额外的克隆选项**
::: table-contents
  项                              描述
  ------------------------------- ---------------------------------------------
  `promoted-max`{.literal}        可以升级的资源副本数 ; 默认为 1。
  `promoted-node-max`{.literal}   在一个节点中可升级的资源副本数 ; 默认为 1。
:::
:::
:::
::: section
::: titlepage
## []{#assembly_creating-multinode-resources-configuring-and-managing-high-availability-clusters.html#_configuring_promotable_resource_constraints}配置可升级资源限制 {.title}
:::
在大多数情况下，可升级的资源在每个活跃的集群节点上都有一个副本。如果情况不同，您可以指定集群使用资源位置约束来优先分配哪些节点。这些限制与常规资源的写法不同。
您可以创建一个 colocation 约束，指定资源是在 master 角色还是在 slave
角色中运行。以下命令创建了资源 colocation 约束。
``` literallayout
pcs constraint colocation add [master|slave] source_resource with [master|slave] target_resource [score] [options]
```
如需有关 colocation
约束的信息，[请参阅收集集群资源](https://access.redhat.com/documentation/en-us/red_hat_enterprise_linux/8/html/configuring_and_managing_high_availability_clusters/assembly_colocating-cluster-resources.adoc_configuring-and-managing-high-availability-clusters){.link}。
在配置包含可升级资源的排序约束时，您可以为资源指定的一个操作被提升，`这表示`{.literal}
资源从 slave 角色提升到 master 角色。另外，您可以指定 `demote`{.literal}
操作，表示资源从主角色降级到从角色。
配置顺序约束的命令如下。
``` literallayout
pcs constraint order [action] resource_id then [action] resource_id [options]
```
如需有关资源顺序限制的信息
[，请参阅确定集群资源的运行顺序。](https://access.redhat.com/documentation/en-us/red_hat_enterprise_linux/8/html/configuring_and_managing_high_availability_clusters/assembly_determining-resource-order.adoc-configuring-and-managing-high-availability-clusters){.link}
:::
:::
::: section
::: titlepage
# []{#assembly_creating-multinode-resources-configuring-and-managing-high-availability-clusters.html#proc_recovering-promoted-node-creating-multinode-resources}失败时降级升级的资源 {.title}
:::
从 RHEL 8.3 开始，您可以配置可升级的资源，以便在运行
`该资源 的提升或`{.literal} 监控``{=html}
操作失败时，或者运行资源的分区丢失仲裁时，资源会被降级，但不会被完全停止。这可避免在完全停止资源时需要的人工干预。
::: itemizedlist
-   要将可升级的资源配置为在 `提升`{.literal} 操作失败时降级，请将
    `on-fail`{.literal} 操作 meta 选项设置为
    `demote`{.literal}，如下例所示。
    ``` literallayout
    # pcs resource op add my-rsc promote on-fail="demote"
    ```
-   要将可升级的资源配置为在 `monitor`{.literal} 操作失败时降级，将
    `间隔`{.literal} 设置为非零值，将 `on-fail`{.literal} 操作 meta
    选项设置为 `demote`{.literal}，并将 `角色`{.literal} 设置为
    `Master`{.literal}，如下例所示：
    ``` literallayout
    # pcs resource op add my-rsc monitor interval="10s" on-fail="demote" role="Master"
    ```
-   要配置群集，以便在群集分区丢失仲裁时，任何提升的资源都会降级但会继续运行，所有其他资源都将停止，将
    `no-quorum-policy`{.literal} 群集属性设置为 `demote`{.literal}
:::
将操作的 `on-fail`{.literal} meta-attribute 设置为 `demote`{.literal}
不会影响如何确定资源的提升。如果受影响的节点仍然具有最高的升级分数，则会选择再次提升。
:::
:::
[]{#assembly_clusternode-management-configuring-and-managing-high-availability-clusters.html}
::: chapter
::: titlepage
# []{#assembly_clusternode-management-configuring-and-managing-high-availability-clusters.html#assembly_clusternode-management-configuring-and-managing-high-availability-clusters}第 18 章 管理集群节点 {.title}
:::
您可以使用各种 `pcs`{.literal}
命令来管理群集节点，包括启动和停止群集服务以及添加和删除群集节点的命令。
::: section
::: titlepage
# []{#assembly_clusternode-management-configuring-and-managing-high-availability-clusters.html#proc_cluster-stop-clusternode-management}停止集群服务 {.title}
:::
以下命令在指定的一个节点或几个节点上停止集群服务。与
`pcs cluster start`{.literal} 一样，`--all`{.literal}
选项会停止所有节点上的群集服务，如果没有指定任何节点，则仅在本地节点上停止群集服务。
``` literallayout
pcs cluster stop [--all | node] [...]
```
您可以使用以下命令强制停止本地节点上的集群服务，该命令会执行
`kill -9`{.literal} 命令。
``` literallayout
pcs cluster kill
```
:::
::: section
::: titlepage
# []{#assembly_clusternode-management-configuring-and-managing-high-availability-clusters.html#proc_cluster-enable-clusternode-management}启用和禁用集群服务 {.title}
:::
使用以下命令启用群集服务，该服务将群集服务配置为在指定节点或节点的启动时运行。
启用允许节点在集集被隔离后自动重新加入集群，从而减少集群性能小于满额性能的时间。如果没有启用集群服务，管理员可以在手动启动集群服务前手动调查出了什么问题，例如：当有硬件问题的节点可能会再次失败时无法重新访问该集群。
::: itemizedlist
-   如果指定了 `--all`{.literal}
    选项，该命令将启用所有节点上的集群服务。
-   如果您没有指定任何节点，则仅在本地节点上启用集群服务。
:::
``` literallayout
pcs cluster enable [--all | node] [...]
```
使用以下命令将集群服务配置为在指定的一个节点或几个节点启动时不运行。
::: itemizedlist
-   如果指定了 `--all`{.literal}
    选项，该命令将禁用所有节点上的集群服务。
-   如果没有指定任何节点，则仅在本地节点上禁用集群服务。
:::
``` literallayout
pcs cluster disable [--all | node] [...]
```
:::
::: section
::: titlepage
# []{#assembly_clusternode-management-configuring-and-managing-high-availability-clusters.html#proc_cluster-nodeadd-clusternode-management}添加集群节点 {.title}
:::
此流程将新节点添加到现有集群中。
此流程添加运行 `corosync 的标准群集节点`{.literal}。有关将非 corosync
节点集成到集群的信息，请参阅 [将非 corosync 节点集成到集群中：
pacemaker_remote
服务](https://access.redhat.com/documentation/en-us/red_hat_enterprise_linux/8/html/configuring_and_managing_high_availability_clusters/assembly_remote-node-management-configuring-and-managing-high-availability-clusters){.link}。
::: {.note style="margin-left: 0.5in; margin-right: 0.5in;"}
### 注意 {.title}
建议您仅在生产环境维护窗口期间将节点添加到现有集群中。这可让您对新节点及其保护配置执行适当的资源和部署测试。
:::
在本例中，现有的集群节点为
`clusternode-01.example.com`{.literal}、`clusternode-02.example.com`{.literal}
和 `clusternode-03.example.com`{.literal}。新节点为
`newnode.example.com`{.literal}。
::: title
**流程**
:::
在加入到集群中的新节点上，执行以下任务。
::: orderedlist
1.  安装集群软件包。如果集群使用 SBD、Booth
    票据管理器或仲裁设备，则必须在新节点上手动安装相应的软件包（`sbd`{.literal}、`booth-site`{.literal}、`corosync-qdevice`{.literal}）。
    ``` literallayout
    [root@newnode ~]# yum install -y pcs fence-agents-all
    ```
    除了集群软件包外，还需要安装并配置在集群中运行的所有服务（已安装在现有集群节点上）。例如，如果您在红帽高可用性集群中运行
    Apache HTTP
    服务器，则需要在要添加的节点中安装该服务器，以及检查服务器状态的
    `wget`{.literal} 工具。
2.  如果您正在运行 `firewalld`{.literal}
    守护进程，请执行以下命令启用红帽高可用性附加组件所需的端口。
    ``` literallayout
    # firewall-cmd --permanent --add-service=high-availability
    # firewall-cmd --add-service=high-availability
    ```
3.  为用户 ID `hacluster`{.literal}
    设置密码。建议您为集群中的每个节点使用相同的密码。
    ``` literallayout
    [root@newnode ~]# passwd hacluster
    Changing password for user hacluster.
    New password:
    Retype new password:
    passwd: all authentication tokens updated successfully.
    ```
4.  执行以下命令启动 `pcsd`{.literal} 服务，并在系统启动时启用
    `pcsd`{.literal} ：
    ``` literallayout
    # systemctl start pcsd.service
    # systemctl enable pcsd.service
    ```
:::
在现有集群中的一个节点上执行以下任务。
::: orderedlist
1.  在新集群节点上验证用户 `hacluster`{.literal}。
    ``` literallayout
    [root@clusternode-01 ~]# pcs host auth newnode.example.com
    Username: hacluster
    Password:
    newnode.example.com: Authorized
    ```
2.  在现有集群中添加新节点。此命令还会将群集配置文件
    `corosync.conf`{.literal}
    同步到集群中的所有节点，包括您要添加的新节点。
    ``` literallayout
    [root@clusternode-01 ~]# pcs cluster node add newnode.example.com
    ```
:::
在加入到集群中的新节点上，执行以下任务。
::: orderedlist
1.  在新节点上启动并启用集群服务。
    ``` literallayout
    [root@newnode ~]# pcs cluster start
    Starting Cluster...
    [root@newnode ~]# pcs cluster enable
    ```
2.  确保您为新集群节点配置并测试隔离设备。
:::
:::
::: section
::: titlepage
# []{#assembly_clusternode-management-configuring-and-managing-high-availability-clusters.html#proc_cluster-noderemove-clusternode-management}删除集群节点 {.title}
:::
以下命令关闭指定节点，并将其从群集配置文件 `corosync.conf`{.literal}
中删除至群集配置文件 corosync.conf 中。
``` literallayout
pcs cluster node remove node
```
:::
::: section
::: titlepage
# []{#assembly_clusternode-management-configuring-and-managing-high-availability-clusters.html#proc_add-nodes-to-multiple-ip-cluster-clusternode-management}使用多个链接在集群中添加节点 {.title}
:::