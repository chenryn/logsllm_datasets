红帽不支持[**不是由**]{.strong}红帽编译的内核。
:::
:::
::: section
::: titlepage
# []{#updating-kernel-with-yum_managing-monitoring-and-updating-the-kernel.html#what-is-yum_updating-kernel-with-yum}什么是 dnf {.title}
:::
本节引用 `dnf`{.literal}
[*[[软件包管理器](https://access.redhat.com/documentation/en-us/red_hat_enterprise_linux/9/html/managing_software_with_the_dnf_tool/con_software-management-tools-in-red-hat-enterprise-linux-9_managing-software-with-the-dnf-tool){.link}]{.citetitle}*]{.emphasis}的描述。
::: itemizedlist
**其他资源**
-   `dnf(8)`{.literal} 手册页
:::
:::
::: section
::: titlepage
# []{#updating-kernel-with-yum_managing-monitoring-and-updating-the-kernel.html#updating-the-kernel_updating-kernel-with-yum}更新内核 {.title}
:::
以下流程描述了如何使用 [**[dnf]{.application}**]{.strong}
软件包管理器更新内核。
::: orderedlist
**步骤**
1.  要更新内核，使用下面的命令：
    ``` screen
    # dnf update kernel
    ```
    此命令将内核以及所有依赖项更新至最新可用版本。
2.  重启您的系统以使更改生效。
:::
:::
::: section
::: titlepage
# []{#updating-kernel-with-yum_managing-monitoring-and-updating-the-kernel.html#installing-the-kernel_updating-kernel-with-yum}安装内核 {.title}
:::
以下流程描述了如何使用 [**[dnf]{.application}**]{.strong}
软件包管理器安装新内核。
::: itemizedlist
**步骤**
-   要安装特定的内核版本，请使用：
    ``` screen
    # dnf install kernel-{version}
    ```
:::
::: itemizedlist
**其他资源**
-   [*[[Red Hat Code
    Browser](https://access.redhat.com/labs/rhcb/){.link}]{.citetitle}*]{.emphasis}
-   [*[[Red Hat Enterprise Linux
    发行日期](https://access.redhat.com/articles/3078){.link}
    ]{.citetitle}*]{.emphasis}
:::
:::
:::
[]{#managing-kernel-modules_managing-monitoring-and-updating-the-kernel.html}
::: chapter
::: titlepage
# []{#managing-kernel-modules_managing-monitoring-and-updating-the-kernel.html#managing-kernel-modules_managing-monitoring-and-updating-the-kernel}第 3 章 管理内核模块 {.title}
:::
以下小节解释了什么是内核模块、如何显示其信息以及如何使用内核模块执行基本管理任务。
::: section
::: titlepage
# []{#managing-kernel-modules_managing-monitoring-and-updating-the-kernel.html#introduction-to-kernel-modules_managing-kernel-modules}内核模块简介 {.title}
:::
Red Hat Enterprise Linux
内核可使用一个可选的、带有额外功能的模块（称为内核模块）进行扩展，而无需重启系统。在
Red Hat Enterprise Linux 9 上，内核模块是内置于压缩的
`.ko.xz`{.literal} 对象文件中的额外内核代码。
内核模块启用的最常见功能是：
::: itemizedlist
-   添加用于支持新硬件的设备驱动程序
-   支持文件系统，如 `GFS2`{.literal} 或 `NFS`{.literal}
-   系统调用
:::
在现代系统中，在需要时会自动载入内核模块。但在某些情况下，需要手动加载或卸载模块。
与内核本身一样，模块也可以在需要时采用自定义其行为的参数。
同时，提供了用来检查当前运行了哪些模块、哪些模块可以加载到内核以及模块接受哪些参数的工具。该工具还提供了在运行的内核中载入和卸载内核模块的机制。
:::
::: section
::: titlepage
# []{#managing-kernel-modules_managing-monitoring-and-updating-the-kernel.html#kernel-module-dependencies_managing-kernel-modules}内核模块依赖关系 {.title}
:::
某些内核模块有时依赖一个或多个内核模块。`/lib/modules//modules.dep`{.literal}
文件包含对应内核版本的完整内核模块依赖关系列表。
依赖项文件由 `depmod`{.literal} 程序生成，该程序是 `kmod`{.literal}
软件包的一部分。`kmod`{.literal}
提供的许多工具在执行操作时会考虑模块依赖关系，因此很少需要[**手动**]{.strong}跟踪依赖项。
::: {.warning style="margin-left: 0.5in; margin-right: 0.5in;"}
### 警告 {.title}
内核模块的代码在内核空间中是在不受限制模式下执行的。因此，您应该了解您载入的模块。
:::
::: itemizedlist
**其他资源**
-   `modules.dep(5)`{.literal} manual page
-   `depmod(8)`{.literal} 手册页
:::
:::
::: section
::: titlepage
# []{#managing-kernel-modules_managing-monitoring-and-updating-the-kernel.html#listing-currently-loaded-kernel-modules_managing-kernel-modules}列出当前载入的内核模块 {.title}
:::
下面的步骤描述了如何查看当前载入的内核模块。
::: itemizedlist
**先决条件**
-   已安装 `kmod`{.literal} 软件包。
:::
::: itemizedlist
**步骤**
-   要列出所有当前载入的内核模块，请执行：
    ``` literallayout
    $ lsmod
    Module                  Size  Used by
    fuse                  126976  3
    uinput                 20480  1
    xt_CHECKSUM            16384  1
    ipt_MASQUERADE         16384  1
    xt_conntrack           16384  1
    ipt_REJECT             16384  1
    nft_counter            16384  16
    nf_nat_tftp            16384  0
    nf_conntrack_tftp      16384  1 nf_nat_tftp
    tun                    49152  1
    bridge                192512  0
    stp                    16384  1 bridge
    llc                    16384  2 bridge,stp
    nf_tables_set          32768  5
    nft_fib_inet           16384  1
    …​
    ```
    在上例中：
    ::: itemizedlist
    -   第一列提供目前载入的模块的 [**名称**]{.strong}。
    -   第二列以了每个模块的[**内存量**]{.strong}，以千字节为单位（KB）。
    -   最后列显示数量，以及[**依赖**]{.strong}特定模块的模块名称
        （可选）。
    :::
:::
::: itemizedlist
**其他资源**
-   `/usr/share/doc/kmod/README`{.literal} 文件
-   `lsmod(8)`{.literal} manual page
:::
:::
::: section
::: titlepage
# []{#managing-kernel-modules_managing-monitoring-and-updating-the-kernel.html#setting-a-kernel-as-default_managing-kernel-modules}将内核设置为默认 {.title}
:::
以下流程描述了如何使用 `grubby`{.literal} 命令行工具和 `GRUB2`{.literal}
将特定内核设置为默认值。
::: variablelist
**步骤**
[使用 `grubby`{.literal} 工具将内核设置为默认]{.term}
:   ::: itemizedlist
    -   使用 `grubby`{.literal} 工具执行以下命令将内核设置为默认：
    :::
    `# grubby --set-default $kernel_path`{.literal}
    命令使用不带 `.conf`{.literal} 后缀的计算机 ID 作为参数。
    ::: {.note style="margin-left: 0.5in; margin-right: 0.5in;"}
    ### 注意 {.title}
    机器 ID 位于 `/boot/loader/entries/`{.literal} 目录中。
    :::
[使用 `id`{.literal} 参数将内核设置为默认]{.term}
:   ::: itemizedlist
    -   使用 `id`{.literal}
        参数列出引导条目，然后将所需的内核设置为默认：
    :::
    ``` screen
    # grubby --info ALL | grep id
    # grubby --set-default /boot/vmlinuz-.
    ```
    ::: {.note style="margin-left: 0.5in; margin-right: 0.5in;"}
    ### 注意 {.title}
    要使用 `title`{.literal} 参数列出引导条目，请执行
    `# grubby --info=ALL | grep title`{.literal} 命令。
    :::
[仅为下次引导设定默认内核]{.term}
:   ::: itemizedlist
    -   执行以下命令，仅在下次使用 `grub2-reboot`{.literal}
        命令重新引导时设置默认内核：
    :::
    ``` screen
    # grub2-reboot 
    ```
    ::: {.warning style="margin-left: 0.5in; margin-right: 0.5in;"}
    ### 警告 {.title}
    小心地为下次启动设置默认内核。安装新内核 RPM
    的自构建内核并手动将这些条目添加到 `/boot/loader/entries/`{.literal}
    目录可能会更改索引值。
    :::
:::
:::
::: section
::: titlepage
# []{#managing-kernel-modules_managing-monitoring-and-updating-the-kernel.html#displaying-information-about-kernel-modules_managing-kernel-modules}显示内核模块信息 {.title}
:::
使用内核模块时，您可能希望查看该模块的更多信息。这个步骤描述了如何显示有关内核模块的额外信息。
::: itemizedlist
**先决条件**
-   已安装 `kmod`{.literal} 软件包。
:::
::: itemizedlist
**步骤**
-   要显示任何内核模块的信息，请执行：
:::
``` literallayout
$ modinfo 
For example:
$ modinfo virtio_net