VM and is not called by browser script code. 
2.3. Class replacement 
The second attack strategy is for an attacker to force a 
signed  applet  to  use  classes  of  the  attacker  instead  of 
classes of the signed applet. We call this class replacement.
With this strategy, an attacker can trick a user into running a 
target  signed  applet  whose  classes  have  been  partly 
replaced  and  force  the  target  applet  to  harm  the  user  by 
falsifying data on its dataflow. Unlike the first strategy, this 
one  does  not  require  privileged  code,  and  it  is  the  threat 
common to most signed applets. 
This  subsection  describes  the  strategy.  First,  class 
replacement is described using an example. After that, two 
weak  points  of  the  same-package-same-signer  protection 
mechanism  are  described  [15],  and  it  is  shown  that  the 
strategy is still effective under the protection mechanism. 
2.3.1.  Cutting  into  a  signed  applet.  According  to  the 
Applet specification, if the same name is shared by classes 
in different JAR files within an archive attribute included in 
an HTML document, JRE loads the one in the leftmost file 
of  the  attribute.  By  using  this  specification,  an  attacker’s 
class  can  replace  a  class  of  a  signed  applet.  Suppose  that 
foo.PurchaseApplet (from Section 2.1) is implemented 
as follows. 
package foo; 
public class PurchaseApplet extends Applet { 
  public void start() { 
    // Create the dialog 
    foo.util.MyFileDialog dialog = 
     new foo.util.MyFileDialog("Save"); 
    // Show the dialog to the user and 
    // prompt the user to select 
    // the save file 
    String path = dialog.showAndReturn(); 
    // Write some data to the selected file 
    FileWriter fw = new FileWriter(path); 
      : 
  } 
 : 
Proceedings of the 20th Annual Computer Security Applications Conference (ACSAC’04) 
1063-9527/04 $ 20.00 IEEE 
3
}
This applet shows a file dialog to a user and writes some 
data to the save file selected by the user. The applet main 
class PurchaseApplet is a member of the package named 
foo,  and  the  file  dialog  class,  MyFileDialog,  is  in  the 
other  package  named  foo.util.  The  structure  of 
purchase.jar is as follows. 
purchase.jar
  +- foo/PurchaseApplet.class 
  +- foo/util/MyFileDialog.class 
As shown in the above code, the file name of the save 
file  is  determined  by  MyFileDialog.  Therefore,  an 
attacker  can  force  the  applet  to  write  an  arbitrary  file  by 
replacing  MyFileDialog  with  that  of  the  attacker  as 
follows. 
First, the attacker creates the malicious MyFileDialog
class and puts it into evil.jar.
evil.jar
  +- foo/util/MyFileDialog.class 
Next, 
the  attacker  creates 
the  HTML  document 
including the applet tag. 
<applet code="foo.PurchaseApplet" 
 archive="evil.jar,purchase.jar" ... 
In  this  case,  the  attacker’s  MyFileDialog  takes 
precedence  over  that  of  the  target  applet.  Finally,  by 
leading  a  user  to  the  attacking  page  (as  explained  in 
Section 2.2.1), the attacker can overwrite an arbitrary file 
on the local disk of the user. 
2.3.2.  Weaknesses  of  same-package-same-signer.  The 
above  example  is  basically  for  an  unsigned  applet.  An 
attacker cannot usually replace classes of a signed applet, 
because  of 
the  same-package-same-signer  protection 
mechanism  in  Sun  Java  VM  1.2.2  and  later.  This 
mechanism  ensures  that  any  class  in  the  same  package  is 
signed  by  the  same  signer.  Therefore,  an  attacker  cannot 
replace  any  signed  class  in  the  same  package  with  an 
unsigned class of the attacker. However, the mechanism has 
two weak points. 
First, it ensures there is one signer per package, not per 
signed  JAR  file.  In  other  words,  different  packages  in  a 
signed JAR file can have different signers, or no signer at 
all. The case given in Section 2.3.1 is an example of this. It 
is  permissible  that  foo.PurchaseApplet  be  signed  but 
foo.util. MyFileDialog be unsigned. Note that Java’s 
package  system  has  no  inheritance  mechanism  between 
packages, and the package foo and the package foo.util
are independent of each other. 
Second,  the  mechanism  does  not  protect  resources. 
important  applet  data,  but 
Resources  often  contain 
attackers can easily replace them. 
Through  this  weakness,  class  replacement  is  still 
same-package-same-signer 
despite 
the 
possible 
mechanism. 
  These  two  attack  strategies  are  serious  threats  to  a 
signed  applet.  In  particular,  class  replacement  is  an 
effective  way  to  attack  a  signed  applet  that  has  no 
privileged  code.  The  next  section  describes  our  approach 
for preventing these attacks. 
3. Our approach 
that  prevents 
recomposition  attacks.  Our  approach 
This  section  describes  our  approach  for  preventing 
is 
malicious 
encapsulation 
the 
components  of  an  applet  by  tightly  coupling  them  as  a 
single  unit. In addition, encapsulation should be achieved 
transparently so that it can be applied without any changes 
to Java VM or target applets. 
recomposition  of 
Section 3.1 describes how encapsulation can be realized, 
and Section 3.2 deals with encapsulation transparency. 
3.1. Encapsulation 
Encapsulation  of  a  target  signed  applet  effectively 
prevents a malicious recomposition attack. This subsection 
describes two encapsulation mechanisms:   
(cid:190) class-loader-based isolation 
(cid:190) applet-document binding 
3.1.1.  Class-loader-based  isolation.  Class-loader-based 
Cozilet (Cozi-Format File)
signed
Cozilet Classes
Resources
Original Jar Files
signed
comp1.jar
comp2.jar
Target Applet Information
- applet main class name
- trusted URL
package com…cozilet;
Cozilet.class
Cozilet Generator
CoziletClassLoader.class
Cozilet Properties
- applet main class name
- trusted URL
CoziletData.class
hash
target.jar
comp1.jar
comp2.jar
unsigned
Figure 2. Generating cozilet 
4
Proceedings of the 20th Annual Computer Security Applications Conference (ACSAC’04) 
1063-9527/04 $ 20.00 IEEE 
isolation  is  an  effective  encapsulation  mechanism  for 
classes and resources because a class loader is responsible 
for these. The basic idea is to isolate a target signed applet 
by assigning a class loader unique to the applet. This paper 
refers  to  such  a  class  loader  as  a  cozi-loader.  We  also 
propose  a  unique  format  that  can  contain  the  classes  and 
resources of the  target applet as a single unit. We refer to 
this format as a cozi-format.
A cozi-format file is shown in Figure 2. It is(cid:2)generated 
by the cozilet  generator (described in Section 3.2.2) from 
JAR files and other information regarding the target signed 
applet.  The  cozi-format(cid:2)file  is  externally  a  standard  JAR 
format file, but it contains the target classes and resources 
in  a  non-standard  way.  It  includes  JAR  files  formerly 
specified  in  an  archive  attribute  (which  we  refer  to  as 
remote jar files) as its resource file target.jar. Note that 
applets  may  use  classes  or  resources  which  are  not 
contained  in  any  JAR  file  (e.g.,  those  in  classpath  or 
codebase), but we do not target these. 
The  cozi-format  file  can  be  signed  by  a  standard 
signing  tool  jarsigner  [16],  and  only  the  cozi-loader 
can recognize target classes and resources included in the 
cozi-format  file  as  signed  data.  Attackers  can  extract  and 
use  these  classes  and  resources  as  unsigned  data,  but 
cannot  use  them  as  signed  because  standard  class  loaders 
cannot  recognize  them  as  signed.  Attackers  can  create 
their own class loaders similar to the cozi-loader, but these 
will  be  of  no  use  because  JRE  prevents  instantiation  of 
any  untrusted  class  loader  through  the  stack  inspection. 
The  key  here  is  that  remote  JAR  files  in  the  cozi-format 
file  must  not  be  signed.  This  prevents  attackers  from 
extracting and abusing them as signed data. 
3.1.2.  Applet-document  binding.  An  HTML  document 
also plays an important role in association with an applet. It 
determines  how  an  applet  is  executed  by  specifying 
attributes such as codebase and archive or by giving initial 
parameters to the applet. In addition, it may contain script 
code which will interact with the applet using an interface 
such as Java-to-JavaScript communication (or vice versa). 
Creating  a  malicious  HTML  document  is  therefore  a 
common  technique  used  in  malicious  recomposition 
attacks.  If  we  can  bind  an  applet  only  to  trusted  HTML 
documents, it will provide an effective defense against such 
attacks. 
the 
trustworthiness  of 
To realize applet-document binding, we chose to use the 
the  origin  of  an  HTML  document  when 
URL  as 
determining 
the  document. 
java.applet.Applet has getDocumentBase() which 
returns  the  URL  of  an  HTML  document  embedding  a 
corresponding  applet  [15].  For  applet-document  binding, 
right after the applet execution starts we compare the URL 
returned  by  getDocumentBase()  with  the  URL  of  the 
trusted  Web  site.  A  sample  of  the  source  code  is  shown 
below. 
public final class PurchaseApplet 
 extends Applet { 
  // Hard-coded trusted server URL 
  private static final String TRUSTED_URL 
    = "https://example.com/"; 
  public void init() { 
    // Obtain URL of the corresponding 
    // HTML document 
    URL docBaseURL = getDocumentBase(); 
    String docBase; 
    if (docBaseURL != null) { 
      docBase = docBaseURL.toString(); 
    } else { 
      docBase = null; 
    } 
    // Check applet-document binding 
    if ((docBase == null) || 
        !docBase.startsWith(TRUSTED_URL)) { 
      throw new SecurityException( 
         "applet-document binding error"); 
    } 
     : 
  } 
}
In the above sample, the trusted URL is hard-coded. In 
our approach, the trusted URL is included in a resource file 
cozilet properties of the cozi-format file in Figure 2. 
Microsoft 
recommends 
that  ActiveX 
control 
programmers  use  a  similar  mechanism  SiteLock  [1]. 
Provided that the Web server, data communication channel, 
and the domain name of the Web site are trustworthy, this 
check can bind applets to HTML documents. 
3.2. Transparency 
This  subsection  describes  how  encapsulation 
is 
transparently  applied 
target  signed  applets.  Our 
approach  should  be  transparent  both  to  current  Java  VM 
implementations and to target signed applets. There are two 
mechanisms to meet such requirements: 
to 
(cid:190) applet switching 
(cid:190) cozilet generator 
3.2.1.  Applet  switching.  To  transparently  apply  the 
protection mechanisms (described in Section 3.1) to current 
Java VM implementations, we propose realizing them in a 
unique  signed  applet.  The  unique  applet  provides 
class-loader-based  isolation  and  applet-document  binding 
to protect the encapsulated applet. In this paper, we refer to 
the unique applet as a cozilet.
However, a problem arises regarding Java VM, where 
the cozilet rather than the encapsulated applet seems to run 
as  an  applet.  To  cope  with  this,  we  provide  an  applet 
switching mechanism in the cozilet. 
Proceedings of the 20th Annual Computer Security Applications Conference (ACSAC’04) 
1063-9527/04 $ 20.00 IEEE 
5
values in CoziletData.  The cozilet has other protection 
mechanisms to prevent malicious recomposition attacks on 
the cozilet itself, and these are described in Section 4.4. 
4. Implementation 
We have implemented the  Cozilet  mechanism for Sun 
Java  VM  (versions  1.3,  1.4,  and  1.5)  and  this  section 
describes the details of this implementation. 
4.1. Architecture 
Figure 3 shows the cozilet architecture. 
A  target  signed  applet  is  converted  into  a  cozilet 
consisting  of  a  cozi-format  file  by  the  cozilet  generator. 
(Section 4.2 describes the cozilet generation.) 
Class-loader-based  isolation  prevents  an  attacker’s 
applets  from  accessing  the  encapsulated  applet  and 
applet-document  binding  prevents 
from 
recomposing  the  cozilet  and  encapsulated  applet  with 
malicious HTML documents. In addition, applet switching 
enables  transparent  execution  of  the  encapsulated  applet. 
(Section 4.3 describes the cozilet execution.) 
attackers 
The  cozilet  should  be  able  to  protect  itself  from 
attackers because it is a standard signed applet. (Section 4.4 