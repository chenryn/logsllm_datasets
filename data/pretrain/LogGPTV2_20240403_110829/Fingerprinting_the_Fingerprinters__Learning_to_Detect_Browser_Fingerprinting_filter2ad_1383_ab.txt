identify the set of users that have the protection enabled
[48], [92].
2) The JavaScript API normalization approaches, such as
those used by the Tor Browser [15] and the Brave browser
[3], attempt to make all users return the same ﬁngerprint.
This is achieved by limiting or spooﬁng the return values
of some APIs (e.g., Canvas), and entirely removing
access to other APIs (e.g., Battery Status). These
approaches limit website functionality and can cause
websites to break, even when those websites are using
the APIs for benign purposes.
3) The heuristic approaches, such as Privacy Badger [27]
and Disconnect [12], detect ﬁngerprinting scripts with
pre-deﬁned heuristics. Such heuristics, which must nar-
rowly target ﬁngerprinters to avoid over-blocking, have
two limitations. First, they may miss ﬁngerprinting scripts
that do not match their narrowly deﬁned detection criteria.
Second, the detection criteria must be constantly main-
tained to detect new or evolving ﬁngerprinting scripts.
Learning based solutions to detect ﬁngerprinting. The
ineffectiveness of randomization, normalization, and heuristic-
based approaches motivate the need of a learning-based so-
lution. Browser ﬁngerprinting falls into the broader class of
stateless tracking, i.e., tracking without storing on data on
the user’s machine. Stateless tracking is in contrast to stateful
tracking, which uses APIs provided by the browser to store an
identiﬁer on the user’s device. Prior research has extensively
explored learning-based solutions for detecting stateful track-
ers. Such approaches try to learn tracking behavior of scripts
based on their structure and execution. One such method
by Ikram et al. [60] used features extracted through static
code analysis. They extracted n-grams of code statements as
features and trained a one-class machine learning classiﬁer to
detect tracking scripts. In another work, Wu et al. [96] used
features extracted through dynamic analysis. They extracted
one-grams of web API method calls from execution traces of
scripts as features and trained a machine learning classiﬁer to
detect tracking scripts.
Unfortunately, prior learning-based solutions generally lump
tracking. However, both of
together stateless and stateful
these tracking techniques fundamentally differ from each other
and a solution that tries to detect both stateful and stateless
techniques will have mixed success. For example, a recent
graph-based machine learning approach to detect ads and
trackers proposed by Iqbal et al. [62] at times successfully
identiﬁed ﬁngerprinting and at times failed.
Fingerprinting detection has not received as much attention
as stateful tracking detection. Al-Fannah et. al. [39] proposed
to detect ﬁngerprinting vendors by matching 17 manually iden-
tiﬁed attributes (e.g., User-Agent), that have ﬁngerprinting
potential, with the request URL. The request is labeled as
ﬁngerprinting if at least one of the attributes is present in
the URL. However, this simple approach would incorrectly
detect the functional use of such attributes as ﬁngerprinting.
Moreover, this approach fails when the attribute values in
the URL are hashed or encrypted. Rizzo [91], in their thesis,
explored the detection of ﬁngerprinting scripts using machine
learning. Speciﬁcally, they trained a machine learning classiﬁer
with features extracted through static code analysis. However,
only relying on static code analysis might not be sufﬁcient
for an effective solution. Static code analysis has inherent
limitations to interpret obfuscated code and provide clarity
in enumerations. These limitations may hinder the ability
of a classiﬁer, trained on features extracted through static
analysis,
to correctly detect ﬁngerprinting scripts as both
obfuscation [87] and enumerations (canvas font ﬁngerprinting)
are common in ﬁngerprinting scripts. Dynamic analysis of
ﬁngerprinting scripts could solve that problem but it requires
scripts to execute and scripts may require user input or browser
events to trigger.
A complementary approach that uses both static and dy-
namic analysis could work—indeed this is the approach we
take next in Section III. Dynamic analysis can provide in-
terpretability for obfuscated scripts and scripts that involve
enumerations and static analysis could provide interpretability
for scripts that require user input or browser triggers.
III. FP-INSPECTOR
In this section we present the design and implementation of
FP-INSPECTOR, a machine learning approach that combines
static and dynamic JavaScript analysis to counter browser
ﬁngerprinting. FP-INSPECTOR has two major components: the
detection component, which extracts syntactic and semantic
features from scripts and trains a machine learning classiﬁer
to detect ﬁngerprinting scripts; and the mitigation component,
which applies a layered set of restrictions to the detected
ﬁngerprinting scripts to counter passive and/or active ﬁnger-
printing in the browser. Figure 1 summarizes the architecture
of FP-INSPECTOR.
Authorized licensed use limited to: Tsinghua University. Downloaded on February 25,2022 at 12:15:55 UTC from IEEE Xplore.  Restrictions apply. 
1145
(cid:3)(cid:3)(cid:3)(cid:3)(cid:3)(cid:54)(cid:82)(cid:88)(cid:85)(cid:70)(cid:72)(cid:3)(cid:41)(cid:76)(cid:79)(cid:72)(cid:86)
(cid:3)(cid:3)(cid:3)(cid:3)(cid:3)(cid:47)(cid:82)(cid:74)(cid:74)(cid:76)(cid:81)(cid:74)
(cid:3)(cid:3)(cid:3)(cid:3)(cid:3)(cid:45)(cid:68)(cid:89)(cid:68)(cid:54)(cid:70)(cid:85)(cid:76)(cid:83)(cid:87)(cid:3)
(cid:3)(cid:3)(cid:3)(cid:3)(cid:3)(cid:44)(cid:81)(cid:86)(cid:87)(cid:85)(cid:88)(cid:80)(cid:72)(cid:81)(cid:87)(cid:68)(cid:87)(cid:76)(cid:82)(cid:81)
(cid:11)(cid:20)(cid:12)(cid:3)(cid:50)(cid:83)(cid:72)(cid:81)(cid:76)(cid:81)(cid:74)(cid:3)(cid:68)(cid:3)(cid:90)(cid:72)(cid:69)(cid:86)(cid:76)(cid:87)(cid:72)(cid:3)(cid:90)(cid:76)(cid:87)(cid:75)(cid:3)(cid:50)(cid:83)(cid:72)(cid:81)(cid:58)(cid:51)(cid:48)(cid:3)
(cid:76)(cid:81)(cid:86)(cid:87)(cid:85)(cid:88)(cid:80)(cid:72)(cid:81)(cid:87)(cid:72)(cid:71)(cid:3)(cid:41)(cid:76)(cid:85)(cid:72)(cid:73)(cid:82)(cid:91)
(cid:36)(cid:54)(cid:55)(cid:3)
(cid:40)(cid:91)(cid:72)(cid:70)(cid:88)(cid:87)(cid:76)(cid:82)(cid:81)(cid:3)
(cid:55)(cid:85)(cid:68)(cid:70)(cid:72)
(cid:90)(cid:90)(cid:90)(cid:17)(cid:72)(cid:91)(cid:68)(cid:80)(cid:83)(cid:79)(cid:72)(cid:17)(cid:70)(cid:82)(cid:80)
(cid:3)(cid:3)(cid:3)(cid:3)(cid:3)(cid:3)(cid:3)(cid:3)(cid:3)(cid:3)(cid:3)(cid:3)(cid:3)(cid:3)(cid:3)(cid:3)(cid:3)(cid:3)(cid:3)(cid:3)(cid:3)(cid:49)(cid:72)(cid:87)(cid:90)(cid:82)(cid:85)(cid:78)(cid:3)(cid:47)(cid:68)(cid:92)(cid:72)(cid:85)
(cid:3)(cid:3)(cid:3)(cid:3)(cid:3)(cid:3)(cid:3)(cid:3)(cid:3)(cid:3)(cid:3)(cid:3)(cid:3)(cid:3)(cid:3)(cid:3)(cid:3)(cid:3)(cid:3)(cid:3)(cid:3)(cid:3)(cid:45)(cid:68)(cid:89)(cid:68)(cid:54)(cid:70)(cid:85)(cid:76)(cid:83)(cid:87)(cid:3)(cid:47)(cid:68)(cid:92)(cid:72)(cid:85)
(cid:11)(cid:21)(cid:12)(cid:3)(cid:54)(cid:70)(cid:85)(cid:76)(cid:83)(cid:87)(cid:86)(cid:3)(cid:88)(cid:81)(cid:83)(cid:68)(cid:70)(cid:78)(cid:76)(cid:81)(cid:74)(cid:3)(cid:68)(cid:81)(cid:71)(cid:3)(cid:36)(cid:54)(cid:55)(cid:3)(cid:70)(cid:85)(cid:72)(cid:68)(cid:87)(cid:76)(cid:82)(cid:81)(cid:3)
(cid:73)(cid:85)(cid:82)(cid:80)(cid:3)(cid:86)(cid:82)(cid:88)(cid:85)(cid:70)(cid:72)(cid:3)(cid:73)(cid:76)(cid:79)(cid:72)(cid:86)(cid:3)(cid:14)(cid:3)(cid:40)(cid:91)(cid:87)(cid:85)(cid:68)(cid:70)(cid:87)(cid:76)(cid:82)(cid:81)(cid:3)(cid:82)(cid:73)(cid:3)
(cid:40)(cid:91)(cid:72)(cid:70)(cid:88)(cid:87)(cid:76)(cid:82)(cid:81)(cid:3)(cid:87)(cid:85)(cid:68)(cid:70)(cid:72)(cid:86)
(cid:11)(cid:22)(cid:12)(cid:3)(cid:41)(cid:72)(cid:68)(cid:87)(cid:88)(cid:85)(cid:72)(cid:3)(cid:72)(cid:91)(cid:87)(cid:85)(cid:68)(cid:70)(cid:87)(cid:76)(cid:82)(cid:81)(cid:3)(cid:73)(cid:85)(cid:82)(cid:80)(cid:3)(cid:36)(cid:54)(cid:55)(cid:86)(cid:3)(cid:68)(cid:81)(cid:71)(cid:3)
(cid:72)(cid:91)(cid:72)(cid:70)(cid:88)(cid:87)(cid:76)(cid:82)(cid:81)(cid:3)(cid:87)(cid:85)(cid:68)(cid:70)(cid:72)(cid:86)(cid:3)(cid:14)(cid:3)(cid:38)(cid:79)(cid:68)(cid:86)(cid:86)(cid:76)(cid:73)(cid:76)(cid:70)(cid:68)(cid:87)(cid:76)(cid:82)(cid:81)(cid:3)(cid:82)(cid:73)(cid:3)(cid:86)(cid:70)(cid:85)(cid:76)(cid:83)(cid:87)(cid:86)
(cid:11)(cid:23)(cid:12)(cid:3)(cid:51)(cid:82)(cid:79)(cid:76)(cid:70)(cid:92)(cid:3)(cid:72)(cid:81)(cid:73)(cid:82)(cid:85)(cid:70)(cid:72)(cid:80)(cid:72)(cid:81)(cid:87)(cid:3)(cid:69)(cid:92)(cid:3)(cid:69)(cid:79)(cid:82)(cid:70)(cid:78)(cid:76)(cid:81)(cid:74)(cid:3)
(cid:81)(cid:72)(cid:87)(cid:90)(cid:82)(cid:85)(cid:78)(cid:3)(cid:85)(cid:72)(cid:84)(cid:88)(cid:72)(cid:86)(cid:87)(cid:86)(cid:3)(cid:68)(cid:81)(cid:71)(cid:3)(cid:85)(cid:72)(cid:86)(cid:87)(cid:85)(cid:76)(cid:70)(cid:87)(cid:76)(cid:81)(cid:74)(cid:3)(cid:68)(cid:70)(cid:70)(cid:72)(cid:86)(cid:86)(cid:3)
(cid:87)(cid:82)(cid:3)(cid:45)(cid:68)(cid:89)(cid:68)(cid:54)(cid:70)(cid:85)(cid:76)(cid:83)(cid:87)(cid:3)(cid:36)(cid:51)(cid:44)(cid:86)(cid:3)
Fig. 1: FP-INSPECTOR: (1) We crawl the web with an extended version of OpenWPM that extracts JavaScript source ﬁles and their execution
traces. (2) We extract Abstract Syntax Trees (ASTs) and execution traces for all scripts. (3) We use those representations to extract features
and train a machine learning model to detect ﬁngerprinting scripts. (4) We use a layered approach to counter ﬁngerprinting scripts.
A. Detecting ﬁngerprinting scripts
A ﬁngerprinting script has a limited number of APIs it can
use to extract a speciﬁc piece of information from a device.
For example, a script that tries to inspect the graphics stack
must use the Canvas and WebGL APIs; if a script wants
to collect 2D renderings (i.e., for canvas ﬁngerprinting), it
must call toDataURL() or getImageData() functions
of the Canvas API to access the rendered canvas images. Past
research has used these patterns to manually curate heuristics
for detecting ﬁngerprinting scripts with fairly high precision
[47], [54]. Our work builds on them and signiﬁcantly extends
prior work in two main ways.
First, FP-INSPECTOR automatically learns emergent prop-
erties of ﬁngerprinting scripts instead of relying on hand-coded
heuristics. Speciﬁcally, we extract a large number of low-level
heuristics for capturing syntactic and semantic properties of
ﬁngerprinting scripts to train a machine learning classiﬁer.
FP-INSPECTOR’s classiﬁer trained on limited ground truth of
ﬁngerprinting scripts from prior research is able to generalize
to detect new ﬁngerprinting scripts as well as previously
unknown ﬁngerprinting methods.
Second, unlike prior work, we leverage both static fea-
tures (i.e., script syntax) and dynamic features (i.e., script
execution). The static representation allows us to capture
ﬁngerprinting scripts or routines that may not execute during
our page visit (e.g., because they require user interaction that
is hard to simulate during automated crawls). The dynamic
representation allows us to capture ﬁngerprinting scripts that
are obfuscated or miniﬁed. FP-INSPECTOR trains separate
supervised machine learning models for static and dynamic
representations and combines their output to accurately clas-
sify a script as ﬁngerprinting or non-ﬁngerprinting.
Script monitoring. We gather script contents and their
execution traces by automatically loading webpages in an
extended version of OpenWPM [54]. By collecting both the
raw content and dynamic execution traces of scripts, we are
able to use both static and dynamic analysis to extract features
related to ﬁngerprinting.
Collecting script contents: We collect script contents by
extending OpenWPM’s network monitoring instrumentation.
By default,
this instrumentation saves the contents of all
HTTP responses that are loaded into script tags. We extend
OpenWPM to also capture the response content for all HTML
documents loaded by the browser. This allows us to capture
both external and inline JavaScript. We further parse the
HTML documents to extract
is
crucial because a vast majority of webpages use inline scripts
[68], [74].
inline scripts. This detail
Collecting script execution traces: We collect script ex-
ecution traces by extending OpenWPM’s script execution
instrumentation. OpenWPM records the name of the Javascript
API being accessed by a script, the method name or property
name of the access, any arguments passed to the method or
values set or returned by the property, and the stack trace at
the time of the call. By default, OpenWPM only instruments
a limited number of the JavaScript APIs that are known to
be used by ﬁngerprinting scripts. We extend OpenWPM script
execution instrumentation to cover additional APIs and script
interactions that we expect to provide useful information for
differentiating ﬁngerprinting activity from non-ﬁngerprinting
activity. There is no canonical list of ﬁngerprintable APIs,
and it is not performant to instrument the browser’s entire
API surface within OpenWPM. In light of these constraints,
we extended the set of APIs instrumented by OpenWPM to
cover several additional APIs used by popular ﬁngerprinting
libraries (i.e., ﬁngerprintjs2 [16]) and scripts (i.e., Media-
Math’s ﬁngerprinting script [25]).2 These include the Web
Graphics Library (WebGL) and performance.now, both
of which were previously not monitored by OpenWPM. We
also instrument a number of APIs used for Document Object
Model (DOM) interactions, including the createElement
method and the document and node objects. Monitoring
access to these APIs allows us to differentiate between scripts
that interact with the DOM and those that do not.
Static analysis. Static analysis allows us to capture infor-
mation from the contents and structure of JavaScript ﬁles—
including those which did not execute during our measure-
ments or those which were not covered by our extended
instrumentation.
AST representation: First, we represent scripts as Abstract
Syntax Trees (ASTs). This allows us to ignore coding style
differences between scripts and ever changing JavaScript syn-
2The full set of APIs monitored by our extended version of OpenWPM in
Appendix IX-A.
Authorized licensed use limited to: Tsinghua University. Downloaded on February 25,2022 at 12:15:55 UTC from IEEE Xplore.  Restrictions apply. 
1146
tax. ASTs encode scripts as a tree of syntax primitives (e.g.,
VariableDeclaration and ForStatement), where
edges represent syntactic relationship between code state-
ments. If we were to build features directly from the raw
contents of scripts, we would encode extraneous information
that may make it more difﬁcult to determine whether a script is
ﬁngerprinting. As an example, one script author may choose to
loop through an array of device properties by index, while an-
other may choose to use that same array’s forEach method.
Both scripts are accessing the same device information in a
loop, and both scripts will have a similar representation when
encoded as ASTs.
Figure 2b provides an example AST built from a simple
script. Nodes in an AST represent keywords, identiﬁers, and
literals in the script, while edges represent the relation between
them. Keywords are reserved words that have a special mean-
ing for the interpreter (e.g. for, eval), identiﬁers are func-
tion names or variable names (e.g. CanvasElem, FPDict),
and literals are constant values, such as a string assigned to an
identiﬁer (e.g. “example”). Note that whitespace, comments,
and coding style are abstracted away by the AST.
Script unpacking: The process of representing scripts as
ASTs is complicated by the fact that JavaScript is an inter-
preted language and compiled at run time. This allows portions
of the script to arrive as plain text which is later compiled and
executed with eval or Function. Prior work has shown
that the ﬁngerprinting scripts often include code that has been
“packed” with eval or Function [87]. To unpack scripts
containing eval or Function, we embed them in empty
HTML webpages and open them in an instrumented browser
[62] which allows us to extract scripts as they are parsed by
the JavaScript engine. We capture the parsed scripts and use
them in place of the packed versions when building ASTs.
We also follow this same procedure to extract in-line scripts,
which are scripts included directly in the HTML document.
Script 1 shows an example canvas font ﬁngerprinting script
that has been packed with eval. This script loops through
a list of known fonts and measures the rendered width to
determine whether the font is installed (see [54] for a thorough
description of canvas font ﬁngerprinting). Script 2 shows the
unpacked version of the script. As can be seen from the
two snippets,
is signiﬁcantly more interpretable
after unpacking. Figure 2 shows the importance of unpacking
to AST generation. The packed version of the script (i.e.,
Script 1) creates a generic stub AST (i.e., Figure 2a) which
would match the AST of any script that uses eval. Figure 2b
shows the full AST that has been generated from the unpacked
version of the script (i.e., Script 2). This AST captures the
actual structure and content of the ﬁngerprinting code that
was passed to eval, and will allow us to extract meaningful
features from the script’s contents.
the script
Static feature extraction: Next, we generate static features
from ASTs. ASTs have been extensively used in prior re-
search to detect malicious JavaScript [46], [55], [61]. To build
our features, we ﬁrst hierarchically traverse the ASTs and
divide them into pairs of parent and child nodes. Parents
1
2
3
4
5
6
7
1
2
3
4
5
6
7
8
9
10
11
12
13
eval("Fonts =[\"monospace\",..,\"sans-serif\"];
CanvasElem = document.createElement(\"canvas\")
;CanvasElem.width = \"100\";CanvasElem.height =
\"100\";context = CanvasElem.getContext('2d');
FPDict= {};for(i=0;i<Fonts.length;i++){
CanvasElem.font = Fonts[i];FPDict[Fonts[i]] =
CanvasElem.measureText(\"example\").width;}")
Script 1: A canvas font ﬁngerprinting script packed with eval.
// Canvas font fingerprinting script.
Fonts = ["monospace" , ... , "sans-serif"];
CanvasElem = document.createElement("canvas");
CanvasElem.width = "100";
CanvasElem.height = "100";
context = CanvasElem.getContext('2d');
FPDict= {};
for (i = 0; i < Fonts.length; i++)
{
CanvasElem.font = Fonts[i];
FPDict[Fonts[i]] = context.measureText("example
").width;
}
Script 2: An unpacked version of the script in Script 1.
represents the context (e.g., for loops, try statements,
or if conditions), and children represent the function in-
side that context (e.g., createElement, toDataURL, and
measureText). Naively parsing parent:child pairs for
the entire AST of every script would result in a prohibitively
large number of features across all scripts (i.e., millions).
To avoid this we only consider parent:child pairs that
contain at least one keyword that matches a name, method, or
property from one of the JavaScript APIs [24]. We assemble
these parent:child combinations as feature vectors for
all scripts. Each parent:child combination is treated as
a binary feature, where 1 indicates the presence of a feature
and 0 indicates its absence. Since we do not execute scripts in
static analysis, ﬁngerprinting-speciﬁc JavaScript API methods
usually have only one occurrence in the script. Thus, we
found the binary representation to sufﬁciently capture this
information from the script.
As
2b
have
feature
example,
extracted
an
Figure
ForStatement:var
from AST
in
and
MemberExpression:measureText as features which
indicate the presence of a loop and access to measureText
method. These methods are frequently used in canvas font
ﬁngerprinting scripts. Intuitively, ﬁngerprinting script vectors
have combinations of parent:child pairs that are speciﬁc
to an API access pattern indicative of ﬁngerprinting (e.g.,
setting a new font and measuring its width within a loop)
that are unlikely to occur in non-ﬁngerprinting scripts. A
more comprehensive list of features extracted from the AST
in Figure 2b are listed in Appendix IX-B (Table VII).
To avoid over-ﬁtting, we apply unsupervised and supervised
feature selection methods to reduce the number of features.
Speciﬁcally, we ﬁrst prune features that do not vary much (i.e.,
variance < 0.01) and also use information gain [63] to short
list top-1K features. This allows us to keep the features that
represent the most commonly used APIs for ﬁngerprinting.
For example, two of the features with the highest information
gain represent the usage of getSupportedExtensions
Authorized licensed use limited to: Tsinghua University. Downloaded on February 25,2022 at 12:15:55 UTC from IEEE Xplore.  Restrictions apply. 
1147
(cid:51)(cid:85)(cid:82)(cid:74)(cid:85)(cid:68)(cid:80)
(cid:38)(cid:68)(cid:79)(cid:79)(cid:40)(cid:91)(cid:83)(cid:85)(cid:72)(cid:86)(cid:86)(cid:76)(cid:82)(cid:81)
(cid:72)(cid:89)(cid:68)(cid:79)
(cid:41)(cid:82)(cid:81)(cid:87)(cid:86)(cid:3)(cid:32)(cid:3)(cid:62)(cid:180)(cid:80)(cid:82)(cid:81)(cid:82)(cid:17)(cid:17)(cid:17)
(a) AST for packed Script 1
(cid:51)(cid:85)(cid:82)(cid:74)(cid:85)(cid:68)(cid:80)
1