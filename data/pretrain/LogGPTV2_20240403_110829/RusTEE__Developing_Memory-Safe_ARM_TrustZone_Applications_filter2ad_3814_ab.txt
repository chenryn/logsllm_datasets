Client APIs [18] to ask the REE agent to send out the Message and
build up the cross-world communication channel with a specific
TA. Once the TEE Agent receives the Message, it initializes the
corresponding TA to respond to incoming REE-side commands.
The related responding APIs are defined as Cross-world Commu-
nication Channel APIs that belong to TEE Internal APIs [19]. To
exchange data between two environments, the CA first allocates
the communication memory called Shared Memory in the REE and
then shares the memory with the corresponding TA. Since the TEE
has a higher privilege on accessing the REE’s memory, the TA can
also operate on the shared memory in parallel with the CA.
Besides the communication functions, GlobalPlatform also de-
fines its TEE Internal APIs to provide essential System Services, such
as cryptography-related operation, secure storage, and big-number
calculation. Since all TEE Internal APIs are provided to all TAs for
calling directly, TAs are not required further to implement their
own functionalities for these security services. Moreover, many of
the GPD TEE Internal APIs are involved with dedicated memory-
related operations, which should be thoroughly inspected before
running them inside TEE.
2.3 Rust
Rust [35] is a programming language designed to achieve both reli-
ability and efficiency. To achieve reliability in two distinct aspects,
namely, memory-safety and thread-safety, Rust provides the follow-
ing mechanisms: (1) claiming the ownership of each data object; (2)
automatically checking the read/write permissions (mutability) of
each object; (3) enforcing the lifetime managements on all objects;
(4) forbidding unsafe typecasting (type-safety); (5) disabling danger-
ous raw pointer operations like pointer aliasing or dangling pointers.
During the program compilation, if the code violates any Rust’s
security criteria, the Rust compiler raises errors and generates error
messages to help developers correct their code accordingly. Besides
improving the code security, Rust brings other benefits such as
the highly efficient parallelization, the developer-friendly compil-
ing messages, and thousands of crates (similar to the libraries in C
language) for supporting different development requirements.
Rust-safe vs. Rust-unsafe. Though Rust is designed to achieve
strict security criteria by default, to guarantee any program can
indeed be written in Rust, it also provides the keyword unsafe [44]
for developers to inject memory-unsafe code segments. Rust pro-
vides this unsafe option for two primary reasons: 1) allowing de-
velopers to develop some “special” functions the cannot pass the
compiler’s default inspection; and 2) allowing the code to interact
with system/hardware components directly. A segment marked
as unsafe can bypass the Rust built-in check and therefore may
conduct vulnerable behaviors, such as writing on an immutable vari-
able, conducting a non-standard typecasting, or using raw pointers
directly. A typical scenario of using unsafe code segment in Rust
happens when the Rust code has to invoke the C-based functions,
which is defined as Foreign Function Interface (FFI) in Rust. Com-
ing with the advantages of extended capabilities, unsafe Rust also
introduces security risks. Several related works [6, 7, 44, 46] have
revealed that unsafe Rust can introduce potential security risks.
3 MOTIVATION AND CHALLENGES
3.1 Motivation
Over the past decades, more than one hundred vulnerabilities have
been reported for TrustZone-assisted TEE systems [11–13]. Among
these reported vulnerabilities, most of them are software-related,
which means the vulnerabilities can get exploited even if the device
enables and configures TrustZone hardware components appropri-
ately. Recently, Cerdeira et al. [9] provide a systematized summary
about the vulnerabilities of existing TEE systems, and they summa-
rize the software-related vulnerabilities in two categories, namely
implementation issues and architectural issues. The implementation
issues refer to the bugs triggered by specific implementation de-
tails of one TEE system, such as lacking proper security checks
on the sensitive variables. Meanwhile, architectural issues include
shared deficiencies or design flaws among different TEE systems,
regardless of systems’ implementation details.
In order to mitigate software-related vulnerabilities on TrustZone-
assisted TEE systems, one critical and challenging task is enhancing
the security of TAs. Nowadays, commercial TEE systems integrate
more and more TA functionalities into the TEE, excessively in-
creasing the total size and semantic complexity of the TEE. With
such a large number of complicated TAs, it is impractical for the
TrustedPeripheralsTEETrustedApplication1TrustedApplication2TEE Internal APIsNormalApplicationsClientApplicationsTEE Client APIsREERich OSREE AgentPublicDeviceDriversPublicPeripheralsSharedMemorySharedMemoryViewTrusted OSTrustedDeviceDriversSystemServicesTEEAgentMesageCross-world Communication Channel444ACSAC ’20, December 07–11, 2020, Online
Shengye Wan, Mingshen Sun, Kun Sun, Ning Zhang, and Xu He
TEE system’s administrator to conduct either artificial or automatic
validation on each TA’s correctness. Consequently, TAs may get
imported into the TEE with potential implementation issues, such
as conducting sensitive operations without appropriate validations.
Moreover, when TAs are developed in memory-unsafe languages
like C language, these implementation issues are difficult to be fully
reviewed since a memory-unsafe language can perform dangerous
memory operations and cause implementation issues with many
possibilities.
Besides introducing implementation issues, TA is also the critical
component of two TrustZone-specific architectural issues. First, the
TA’s capability of invoking kernel-privileged system services can be
abused to attack the TrustZone-assisted TEE system and even lead
to a compromised TEE. To support the incremental functionalities
of TAs, Trusted OSes deploy many system services and expose wide
interfaces to TAs; however, there is no security regulation on the
interactions between TAs and the Trusted OSes. Therefore, if the
vulnerable TAs can be manipulated to invoke system interfaces
maliciously, the entire mobile system may be compromised as well.
How to govern the interface between the Trusted OS and TAs is
an essential architectural challenge when deploying TEE systems.
Second, most TEE systems allow TAs to accept input from the REE
via the cross-world communication channel. However, since the
REE is untrusted and may be fully controlled by attackers, the cross-
world communication channel expands the attack surface of the
TEE system.
In real-world scenarios, when both the implementation and archi-
tectural issues exist in a single TA, they may be exploited together
and lead to severe consequences. For instance, a recently reported
vulnerability CVE-2018-14491 [22] utilizes a vulnerable One-Time-
Password TA for executing arbitrary code on Samsung S5 smart
phones. Similar security issues have been reported in other CVEs
such as CVE-2015-6639 [11] and CVE-2016-2431 [12]. Motivated by
resolving both implementation and architectural issues, we propose
to implement TAs in a strict memory-safe style and further mitigate
the identified issues of TAs. In the following section, we present
three particular challenges and our basic ideas for solving them.
3.2 Challenges
The primary object of RusTEE is to provide a secure mechanism that
assists developers in building TAs with a memory-safe regulation.
Specifically, there are three main challenges we need to resolve to
build the required secure TAs.
Challenge-1: Tackling memory corruptions in TA. One fundamen-
tal attribute of a secure TA is that the TA does not contain any
memory-unsafe implementation issues. In other words, our method
should ensure to remove memory corruptions from TAs, such as
Use-After-Free or Data Race. To address this problem, we propose
to write TAs in the memory-safe programming language Rust.
Challenge-2: Providing secure system-service APIs. Unlike some
TEE architecture (e.g., SGX) that can provide multiple hardware-
enforced-isolated enclaves, the TrustZone-assisted TEE system only
deploys one shared Trusted OS for executing all TAs. Therefore, any
compromised TA may utilize the widely provided system-service
APIs to attack the shared Trusted OS and compromise all other TAs.
In order to eliminate the side-effect of exposing wide APIs to TAs,
we provide a binding solution that enforces the Rust’s memory-
safety on the existing unsafe APIs to prevent TAs form misusing
any kernel-privileged TEE system services.
Challenge-3: Building protection on cross-world communication.
As an architectural feature of TEE systems, the cross-world commu-
nication channel is a must to support the collaboration between TEE
and REE. However, this channel also provides another vehicle for
the REE-side attackers to manipulate TAs’ behavior, especially con-
sidering that the communication channel is connected via the un-
trusted REE’s memory. To enhance the security of the cross-world
communication channel, we redesign the cross-communication in-
terfaces of TA, which conduct security checks on the passed-in
parameters and limit the use cases of untrusted parameters.
4 SYSTEM DESIGN
In this section, we first present the threat model and overview
architecture of RusTEE. Then we elaborate on the detailed security
enhancements of RusTEE for resolving TA’s security challenges.
4.1 Assumptions and Threat Model
We assume the device is equipped with ARM TrustZone technology,
and the technology is can provide the hardware-enforced isolation.
We assume all TEE system’s software components, including the
secure monitor, Trusted OS, and all TEE kernel-privileged libraries,
are implemented in compliance with the GlobalPlatform TEE spec-
ification. In this case, TAs use the GlobalPlatform-defined (GPD-
defined) APIs to interact with system services and the cross-world
communication channel. We also assume these system components
are well written, so there is no insecure flaw in Trusted OS or lower
level software. As such, we focus on protecting the memory-safety
of TAs that run above Trusted OS. Finally, we assume the TA de-
velopers are benign while he or she may still program a TA in a
vulnerable way, which is a common scenario recognized in the
recent CVEs [11–13].
4.2 Overview
We present the overview architecture of RusTEE in Figure 2. The
main idea of RusTEE is serving as a Rust-based TA SDK in the TEE.
The SDK supports most general development requirements, such
as operating primitive data-types, in the strict Rust-safe style by
providing Rust standard library and associated essential compo-
nents to TA developers. With the assistance of the Rust compiler’s
built-in security checks, RusTEE ensures the TA’s source code is
free of known memory-corruption bugs and therefore mitigates
Challenge-1. Since the major challenges for porting Rust standard
library into ARM platforms are implementation-related, we will
introduce them later in the Implementation Section 5.
Besides performing general-purpose operations, a TA also needs
to invoke functions of particular TEE’s system services, which
are out of the scope of Rust standard library. Therefore, RusTEE
integrates the extra libraries into SDK to support these require-
ments. There are two design options for shipping a Rust-based
SDK with additional libraries. The first option is rewriting all the
requested libraries in Rust. The other option is building up the
Rust-based SDK based on full-fledged C-based libraries, and further
providing a trustworthy binding between Rust and C components.
445RusTEE: Developing Memory-Safe ARM TrustZone Applications
ACSAC ’20, December 07–11, 2020, Online
OS provides C-based service APIs to the upper-layer applications.
To make these APIs available for Rust-based TAs, RusTEE should
reliably convert these C-based interfaces into the Rust-based inter-
faces. We call this conversion as the binding solution. To bridge the
semantic gap between Rust and C language, Rust officially provides
a standard crate std::libc, which matches all data types and struc-
tures that are shared by two languages, such as c_int and c_char.
Also, Rust provides the Foreign Function Interface (FFI) mechanism
to allow Rust-based programs for invoking C-based functions in
the Rust-unsafe way. By utilizing these two Rust’s components, we
can straightforwardly convert the C-based interfaces as the Rust-
unsafe interfaces via FFI mechanism, and allow the upper-level
TAs to interact with the low-level APIs via the parameters that are
matched by std::libc.
However, the FFI-based bindings are not memory-safe for TAs to
invoke. As we explained in the Background Section 2.3, since Rust’s
built-in security checks ignore any code segment marked as FFI,
the bonded APIs can still contain memory-unsafe vulnerabilities.
To ensure the security of these bindings, RusTEE applies multiple
security-enhancements on the service APIs. In this subsection, we
first introduce four general principles that are adapted as the en-
hancements for all bonded C-based service APIs. Then we present
two particular binding principles that we propose for protecting
GPD-defined service APIs.
Secure C-based APIs. As one close-related work of RusTEE,
Rust-SGX [48] provides a secure binding for Intel SGX between
Rust enclave applications and C-based SDK. More importantly, the
authors conclude two common challenges for providing binding be-
tween Rust and C worlds, which are providing safe memory access
of C/C++ objects and raw-bytes. The first challenge is introduced
for achieving the type-safety in Rust. Ideally, every type in the
Rust program has a precise definition for providing clear semantics
about types’ use cases. Moreover, an explicit type definition can
describe all the legitimate scenarios for casting one type to another.
However, in C-based libraries, many complicated data types can
only refer to a pointer type void, and the pointers can be danger-
ously accessed with the wrong interfaces when the developer uses
them carelessly or confused. The second challenge happens when
C-based libraries access the memory chunks directly based on their
pointer and length, which is considering as unsafe and not-allowed
in Rust. Such pointer/length combinations frequently appear in
C-based libraries.
To resolve these two challenges, Rust-SGX defines four princi-
ples, which notated as Bytes, ContiguousMemory, Sanitizable[T],
and Handleτ . These four notations can regulate how to convert the
challenging C-style APIs into Rust-safe style. Specifically, Handleτ