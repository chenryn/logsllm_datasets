### Remark
In many security models, when an adversary corrupts an honest party, it gains full control over that party and reveals all of its secret information. In the GBG model, the `Corrupt` query simulates a long-term key leakage attack. To more accurately capture the adversarial capabilities, we modify this query. The `Long-termKeyReveal` in our model serves the same purpose as the `Corrupt` query in the GBG model.

### Extended GBG (eGBG) Model
The eGBG model extends the adversarial capabilities to the following extent: the adversary is allowed to reveal any subset of the long-term keys and ephemeral keys of a party and its partner, but not both the long-term and ephemeral keys of the same party.

### 4. BGS+ Protocol
To construct a Group Key Agreement (GKA) protocol secure in the eGBG model, we modify the original BGS protocol to create the BGS+ protocol.

#### 4.1 Description of BGS+ Protocol
We first introduce some notations that will be used throughout the paper:

- **U = {U1, U2, ..., Un}**: The set of parties who want to establish a session key. We assume the group members are ordered in a logical ring.
- **p, q, g**: Two large primes p and q with q | (p - 1), and a generator g of a group G with order q.
- **k**: The security parameter for the protocol.
- **(pki, ski)**: The long-term key pair of participant Ui, used for signatures.
- **ki, xi**: The ephemeral key pair of participant Ui.
- **H: {0, 1}* → {0, 1}λ**: A hash function modeled as a random oracle, where λ is another security parameter.
- **H1, H2: {0, 1}* → Zq, Zp**: Hash functions modeled as random oracles.
- **SK**: The session key established by the participants.

The protocol aims to establish a confidential communication. The detailed description is provided in Algorithm 2. Note that we omit the "mod p" operator for clarity.

**Round 1:**

1. **Computation:**
   - Each Ui chooses \( x_i \xleftarrow{\$} \mathbb{Z}_q \) and computes \( e_{x_i} = H_1(s_{k_i}, x_i) \) and \( y_i = g^{x_i} \). After obtaining \( y_i \), Ui destroys \( e_{x_i} \).
   - Each Ui sets \( M_I^i = y_i \| \text{pid}_i \).
   - Each Ui computes a signature \( \sigma_I^i \) on \( M_I^i \).

2. **Broadcast:**
   - Each Ui broadcasts \( M_I^i \| \sigma_I^i \).

**Round 2:**

1. **Check:**
   - Each Ui checks all incoming signatures \( \sigma_I^j \) on messages \( M_I^j \).

2. **Computation:**
   - Each Ui computes \( e_{x_i} = H_1(s_{k_i}, x_i) \) and \( t_L^i = H_2(y_{i-1}) \) and \( T_i = t_L^i \| k_i \). For \( i \neq n \), each Ui chooses \( k_i \xleftarrow{\$} \{0, 1\}^k \). Un computes \( \text{mask}_n = k_n \oplus t_R^n \) and \( M_{II}^n = \text{mask}_n \| T_n \| H_2(k_n) \). After this step, each Ui destroys \( e_{x_i} \), \( t_L^i \), and \( t_R^i \). Un additionally destroys \( k_n \).
   - Each Ui computes a signature \( \sigma_{II}^i \) on \( M_{II}^i \).

3. **Broadcast:**
   - Each Ui broadcasts \( M_{II}^i \| \sigma_{II}^i \).

**After Round 1 and Round 2:**

1. **Check:**
   - Each Ui verifies the incoming signatures \( \sigma_{II}^j \) on the corresponding message \( M_{II}^j \) and checks that \( T_1 \oplus \cdots \oplus T_n = 0 \).
   - Each Ui for \( i < n \) computes \( e_{x_i} = H_1(s_{k_i}, x_i) \) and \( t_L^i = H_2(y_{i-1}) \), extracts \( k_n = \text{mask}_n \oplus T_1 \oplus \cdots \oplus T_{i-1} \oplus t_L^i \), and checks the commitment \( H_2(k_n) \) sent in Round 2. If valid, each Ui computes \( \text{sid} = H_2(\text{pid}_i \| k_1 \| \cdots \| k_{n-1} \| H_2(k_n)) \).

2. **Key Computation:**
   - Each Ui computes the session key \( \text{SK} = H(\text{sid} \| k_1 \| \cdots \| k_n) \).

**Algorithm 2: BGS+ Protocol**

#### 4.2 Design Principles
The most significant difference between the BGS protocol and our BGS+ protocol is the use of \( e_{x_i} = H_1(s_{k_i}, x_i) \) instead of \( x_i \) as the ephemeral intermediate result to generate \( y_i \), \( t_L^i \), and \( t_R^i \). This method ensures that even if the adversary gets the ephemeral key, it cannot obtain \( e_{x_i} \) without the long-term key \( s_{k_i} \), which is not allowed in the eGBG model.

### 5. Security Analysis
We now prove that the BGS+ protocol achieves the Authenticated Key Exchange (AKE) security goal, the Message Authentication (MA) security goal, and the Contributiveness property.

**Theorem 1 (AKE Security):** Let \( H_1 \), \( H_2 \), and \( H \) be three hash functions modeled as random oracles, and the signature scheme used in BGS+ is UF-CMA secure. If MAKE is an adversary against the AKE-security of the protocol, then BGS+ is AKE secure if the Computational Diffie-Hellman (CDH) assumption holds in G. Furthermore, if MAKE has an advantage \( \text{Adv}_{\text{BGS+}}^{\text{AKE}}(\text{MAKE}) \) to break AKE security of BGS+ by activating at most \( l \) sessions for each party, there exists a CDH problem solver W that can solve the CDH problem in polynomial time with an advantage \( \text{Adv}_{\text{BGS+}}^{\text{CDH}}(W) \), where:
\[ \text{Adv}_{\text{BGS+}}^{\text{AKE}}(\text{MAKE}) \leq \frac{q_H^2}{2^\lambda} + 2n^2 \cdot \text{Adv}_{\text{BGS+}}^{\text{CDH}}(W) + \frac{q_s + q_{H_2}^2}{2^{k-1}} + \frac{q_{H_1}^2 + q_{H_2}^2}{p} \]
where \( n \) is the number of parties, \( \text{Adv}_{\text{BGS+}}^{\text{Sig}} \) denotes the advantage of a polynomial adversary against the UF-CMA security of the signature, and \( q_{H_1} \), \( q_{H_2} \), and \( q_H \) are the maximum number of times of hash queries \( H_1 \), \( H_2 \), and \( H \), respectively; \( q_s \) represents the maximum number of queries to the Send oracles asked by the adversary.

**Theorem 2 (MA Security):** Let \( H_1 \), \( H_2 \), and \( H \) be three random oracles, and the signature scheme used in BGS+ is UF-CMA secure. If MM A is an adversary against the MA-security of the protocol, then BGS+ is MA secure. Furthermore, the MA advantage of MM A \( \text{Adv}_{\text{BGS+}}^{\text{MA}}(\text{MM A}) \) is upper bounded by:
\[ \text{Adv}_{\text{BGS+}}^{\text{MA}}(\text{MM A}) \leq n^2 \cdot \text{Adv}_{\text{BGS+}}^{\text{Sig}} + \frac{q_{H_2}^2}{p} + \frac{q_{H_2}^2 + q_H^2}{2^\lambda} + \frac{q_s + q_{H_1}^2}{2^{k-1}} \]

**Theorem 3 (Contributiveness):** Let \( H_1 \), \( H_2 \), and \( H \) be three random oracles, and the signature scheme used in BGS+ is UF-CMA secure. If MCon is an adversary against the contributiveness of the protocol with the advantage \( \text{Adv}_{\text{BGS+}}^{\text{Con}}(\text{MCon}) \), then BGS+ is contributive and:
\[ \text{Adv}_{\text{BGS+}}^{\text{Con}}(\text{MCon}) \leq \frac{q_{H_2}^2 + q_H^2}{2^\lambda} + \frac{q_s + q_{H_1}^2}{2^{k-1}} \]

The proofs for Theorems 1, 2, and 3 can be found in the full version [20].

### 6. Conclusion
We have analyzed the GBG model and identified that it does not consider the resistance to ephemeral key leakage. To address this, we extended the GBG model to restrict the adversary from revealing both the long-term and ephemeral keys of a legitimate party simultaneously. We then introduced the BGS+ protocol, which is provably secure in the new model. To the best of our knowledge, this is the first provably secure GKA protocol in this strong security model.

As for limitations, we did not consider efficiency. Future research should focus on designing provably secure protocols with lower computational and communication costs. Additionally, designing GKA protocols in standard models, where the security of the protocols is not dependent on the security of random oracles, is another important future research direction.

### 7. Additional Authors

### 8. References
[1] M. Abdalla, P.-A. Fouque, and D. Pointcheval. Password-Based Authenticated Key Exchange in the Three-Party Setting. In S. Vaudenay, editor, Public Key Cryptography—PKC’05, volume 3386 of LNCS, pages 65–84. Springer, 2005.

[2] S. S. Al-Riyami and K. G. Paterson. Tripartite Authenticated Key Agreement Protocols from Pairings. In Cryptography and Coding, 9th IMA International Conference, volume 2898 of LNCS, pages 332–359. Springer, 2003.

[3] M. Bellare and P. Rogaway. Entity Authentication and Key Distribution. In Advances in Cryptology—CRYPTO’93, volume 773 of LNCS, pages 232–249. Springer, 1993.

[4] S. Blake-Wilson, D. Johnson, and A. Menezes. Key Agreement Protocols and Their Security Analysis. In Cryptography and Coding, 6th IMA International Conference, volume 1355 of LNCS, pages 30–45. Springer, 1997.

[5] J.-M. Bohli, M. I. Gonzalez Vasco, and R. Steinwandt. Secure group key establishment revisited. Int. J. Inf. Sec., 6(4):243–254, 2007.

[6] C. Boyd and J. M. G. Nieto. Round-Optimal Contributory Conference Key Agreement. In Public Key Cryptography—PKC’03, volume 2567 of LNCS, pages 161–174. Springer, 2003.

[7] E. Bresson, O. Chevassut, A. Essiari, and D. Pointcheval. Mutual Authentication and Group Key Agreement for Low-Power Mobile Devices. In Proc. of MWCN '03, page 59–62. World Scientific Publishing, October 2003.

[8] E. Bresson, O. Chevassut, and D. Pointcheval. Provably Authenticated Group Diffie-Hellman Key Exchange—The Dynamic Case. In Advances in Cryptology—ASIACRYPT’01, volume 2248 of LNCS, pages 290–309. Springer, 2001.

[9] E. Bresson, O. Chevassut, and D. Pointcheval. Dynamic Group Diffie-Hellman Key Exchange under Standard Assumptions. In Advances in Cryptology—EUROCRYPT’02, volume 2332 of LNCS, pages 321–336. Springer, 2002.

[10] E. Bresson, O. Chevassut, D. Pointcheval, and J.-J. Quisquater. Provably authenticated group Diffie-Hellman key exchange. In CCS’01: Proceedings of the 8th ACM conference on Computer and Communications Security, pages 255–264. ACM, 2001.

[11] E. Bresson and M. Manulis. Securing Group Key Exchange against Strong Corruptions. In Proceedings of ACM Symposium on Information, Computer and Communications Security (ASIACCS’08), pages 249–260. ACM Press, 2008.

[12] R. Canetti and H. Krawczyk. Analysis of Key-Exchange Protocols and Their Use for Building Secure Channels. In Advances in Cryptology—EUROCRYPT’01, volume 2045 of LNCS, pages 453–474. Springer, 2001.

[13] M. C. Gorantla, C. Boyd, and J. M. González Nieto. Modeling Key Compromise Impersonation Attacks on Group Key Exchange Protocols. In S. Jarecki and G. Tsudik, editors, Public Key Cryptography—PKC’09, volume 5443 of LNCS, pages 105–123. Springer, 2009.

[14] J. Katz and J. S. Shin. Modeling insider attacks on group key-exchange protocols. In Proceedings of the 12th ACM Conference on Computer and Communications Security—CCS’05, pages 180–189. ACM, 2005.

[15] B. A. LaMacchia, K. Lauter, and A. Mityagin. Stronger Security of Authenticated Key Exchange. In W. Susilo, J. K. Liu, and Y. Mu, editors, Provable Security, First International Conference, ProvSec 2007, volume 4784 of LNCS, pages 1–16. Springer, 2007.

[16] M. Manulis. Provably Secure Group Key Exchange, volume 5 of IT Security. Europäischer Universitätsverlag, Berlin, Bochum, Dülmen, London, Paris, August 2007. Available at http://www.manulis.eu/phd.html. Last accessed on 29 May 2008.

[17] M. Manulis, K. Suzuki, and B. Ustaoglu. Modeling Leakage of Ephemeral Secrets in Tripartite/Group Key Exchange. In D. Lee and S. Hong, editors, Information, Security and Cryptology—ICISC’09, Revised Selected Papers, volume 5984 of LNCS, pages 16–33. Springer, 2010.

[18] W. Wang and L. Hu. Efficient and Provably Secure Generic Construction of Three-Party Password-Based Authenticated Key Exchange Protocols. In R. Barua and T. Lange, editors, Progress in Cryptology—INDOCRYPT’06, volume 4329 of LNCS, pages 118–132. Springer, 2006.

[19] K. Yoneyama. Efficient and Strongly Secure Password-Based Server Aided Key Exchange (Extended Abstract). In D. R. Chowdhury, V. Rijmen, and A. Das, editors, Progress in Cryptology—INDOCRYPT’08, volume 5365 of LNCS, pages 172–184. Springer, 2008.

[20] J. Zhao, D. Gu, and M. C. Gorantla. Stronger Security Model of Group Key Agreement. Cryptology ePrint Archive, Report 2010/494, 2010. http://eprint.iacr.org/2010/494.