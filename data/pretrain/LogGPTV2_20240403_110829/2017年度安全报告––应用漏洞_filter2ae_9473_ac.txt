FFmpeg作为目前来说最广泛的多媒体框架，它的强大之处毋庸置疑，但是正因为适配了尽可能多的媒体格式，其中一些沿用至今的古老格式或是一些特殊的标准协议，都可能给FFmpeg带来不一样的可能性，而缺乏沙箱的设计有可能还会有更多的利用可能性，关于媒体处理的服务组件或软件将会暴露出更多问题。
### Nginx CVE-2017-7529漏洞
2017年7月11日，Nginx在官方公告中称发现了一个范围过滤器中的安全问题，并分配了CVE-2017-7529。通过精心构造的恶意请求能造成整数溢出，对范围值的不当处理会导致敏感信息泄漏。该漏洞影响所有0.5.6
–
1.13.2版本内默认配置模块的Nginx只需要开启缓，存攻击者即可发送恶意请求进行远程攻击造成信息泄露。当Nginx服务器使用代理缓存的情况下，攻击者通过利用该漏洞可以拿到服务器的后端真实IP或其他敏感信息。通过我们的分析判定，该漏洞利用难度低，可以归属于low-hanging-fruit的漏洞。在真实网络攻击中也有一定利用价值。
#### 漏洞相关背景
由于计算机中整数都有一个宽度，因此它就有一个可以表示的最大值。当我们试图保存一个比它可以表示的最大值还大的数时，就会发生整数溢出。这种情况导致的后果是不确定的，当用户提供的输入可以触发整型溢出，且被用于循环控制，访问控制，或者内存分配等行为时，这种情况下会导致安全问题。其中OpenSSH
3.3有一个比较经典的整数溢出例子：
    nresp = packet_get_int();  
    if (nresp > 0) {  
    response = xmalloc(nresp*sizeof(char*));  
    for (i = 0; i -，字符串指针p中即为“bytes=”后面的内容，这段代码是要把“-”两边的数字取出分别赋值给start和end变量，标记读取文件的偏移和结束位置。
对于一般的页面文件这两个值怎么玩都没关系。但对于有额外头部的缓存文件若start值为负（合适的负值），那么就意味着缓存文件的头部也会被读取。
一个缓存文件的例子：
如此我们来看看如何构造Range内容才能把start设计为负值。首先代码中cutoff和cutlim阀量保证了每次直接从串中读取时不会令start或end成负值。那么能令start为负的机会仅在suffix标记为真的小分支中。因此我们需令suffix
=
1，由此可推知Range的内容必然为Range:bytes=-xxx，即省略初始start值的形式。那么我们可以通过Range中设end值大于content_length（真正文件的长度），这样start就自动被程序修正为负值了。但是在写利用过程中发现一个问题，若end值很大那么start的绝对值也会很大，会超过缓存文件的起始头部，造成读取失败。若end值不够大，那么换算下来size
= end – 1 >= content_length （end > content_length见前文所述），就不能通过循环外面的检测：
这样的话似乎无论设end为何值都无法达成利用了。继续跟进代码发现这个循环是个无条件循环：
尾部为：
也就是说若Range域形如Range: bytes=start-end,start1-end1,…，就还有机会继续完成利用。我们可以构造一个Range:
bytes=-X,
-Y一大一小两个end值，只需要控制前面一个end值小而后一个end值大，从而实现start值和size值皆为负数，控制start值负到一个合适的位置，那么就能成功利用读到缓存文件头部了。
Nginx 默认模块配置开启缓存：
缓存文件内容如下：
利用漏洞成功读取反向越界读出491字节：
#### 总结
对于整型溢出漏洞，最大的特点是在发生时不太容易被发现，也就是说，当整数溢出产生的时候，应用程序并不知道计算是错误的，会继续计算下下去。很难说整型溢出会导致什么样的安全问题，在不同位置的整数溢出，产生的效果也是不同的。最常见的，在循环位置的整数溢出可能导致Dos，配合缓冲区，有的会达到信息泄露，甚至代码执行的效果。在CVE-2017-7529这个漏洞了，由整型溢出可以控制start，合适的位置时可以读到缓存文件头部。这样的话就能达到获取内网IP的效果。因为该漏洞影响范围广且利用难度低，0.5.6
– 1.13.2版本内默认配置模块的Nginx只需要开启缓，存攻击者即可发送恶意请求进行远程攻击造成信息泄露。
### Cisco WebEx CVE-2017-6753漏洞
2017年7月17日，思科安全更新中，修补了一枚远程代码执行的漏洞，编号CVE-2017-6753。Cisco WebEx
浏览器插件漏洞可以导致未经认证的远程攻击者，使用Web 浏览器权限执行任意代码。该漏洞影响到所有Windows 系统上的WebEx 插件，包括 Cisco
WebEx Meetings Server, Cisco WebEx Centers (Meeting Center, Event Center,
Training Center, and Support Center)。该漏洞影响Windows下安装了Cisco WebEx插件的 Chrome 和
Firefox 用户。
#### 漏洞相关背景
Cisco WebEx 网络和视频会议是一种可在任何地方使用任何移动设备或视频设备与任何人在线交流想法和信息的工具，既经济又便捷。Cisco WebEx
插件允许浏览器与安装在计算机上的 Cisco WebEx 会议应用程序进行通信。
其中atgpcext库在使用自己的json解析器时和客户端解析json的结果不一致 。
例如object={ “foo”: 1, “foo\0”: 2 }，Chrome得到object.foo =
1而atgpcext解析得到object.foo = 2。
#### 漏洞细节
我们使用Cisco WebEx extension for Google Chrome version
1.0.10，同时使用https://lock.cmpxchg8b.com/JauChal3/webex.html中的PoC进行调试。PoC主要内容如下：
通过触发content_script.js中的native_message事件：
之后执行RollbackGpcExt()
在RollbackGpcExt()中触发插件中connect和message事件，向插件发送message_type为launch_meeting的消息，触发message后会调用content_script.js中的sendMessage发送消息：
sendMessage()中，在postMessage之前会使用verify()对发送的消息进行校验，跟入verify()：
可以看到，在校验了message_type为launch_meeting后，对message进行了解析，调用JSON.parse(b.message)，将传入的消息被进行json解析，解析之后，判断当前为Windows系统，接着分别判断了:
    GpcExtName='atgpcext'
    GpcUnpackName='atgpcdec'
然后对GpcInitCall进行校验，使用verifyScriptCall():
传入之前内容为:
    V2ViRXhfRXhwbG9pdCgpOw== 
即WebEx_Exploit();
其中使用正则：
    /^(WebEx_|A[sT][ADEPSN]|conDll|RA[AM])|^(Ex|In)it|^(FinishC|Is[NS]|JoinM|[NM][BCS][JRUC]|Set|Name|Noti|Trans|Update)|^(td|SCSP)$/
进行检查，这里的正则并不是十分严格，可以轻松绕过。
verify()最后再使用/\\.dll$|\\.bundle$|\\.app$/正则以及白名单whiteList对GpcComponentName进行检查，白名单内容如下：
通过白名单之后使用postMessage：
最后全部检查完毕就调用sendGoogleAnalyticMessage发送消息：
接下来看看TriggerExploit:
GpcComponentName中我们调用msvcr100.dll，这个dll并不存在于白名单中，输入的Message进入sendMessage中的verify中：
在解析之前我们看到：
    "GpcComponentName":"YXRtY2NsaS5kbGw=",
    "GpcComponentName\u0000":"bXN2Y3IxMDAuZGxs"
解析之后：
    "GpcComponentName\u0000":"bXN2Y3IxMDAuZGxs"被正常解析为：
    "GpcComponentName ":"bXN2Y3IxMDAuZGxs"
进入GpcInitCall进入verifyScriptCall检查：
因为verifyScriptCall存在缺陷，GpcInitCall中的内容在经过verifyScriptCall检查后，仍然如下：
    X3dzeXN0ZW0oT2JqZWN0QWRkcmVzcyk9V2ViRXhfRXhwbG9pdDs=
base64解码后：
    _wsystem(ObjectAddress)=WebEx_Exploit;
最后白名单检查时，因为存在两个GpcComponentName，其中第一个为atmccli.dll，所以可以通过白名单：
进入postMessage的message中：
    "GpcComponentName":"YXRtY2NsaS5kbGw=",          atmccli.dll
    "GpcComponentName\u0000":"bXN2Y3IxMDAuZGxs",      msvcr100.dll
    "GpcInitCall":"X3dzeXN0ZW0oT2JqZWN0QWRkcmVzcyk9V2ViRXhfRXhwbG9pdDs=" _wsystem(ObjectAddress)=WebEx_Exploit;
最后可以通过_wsystem(ObjectAddress)的方式成功执行命令。
#### 总结
该Cisco
WebEx的漏洞主要是由Web插件中JavaScript代码针对json解析问题以及黑名单过滤不完整导致页面传入的非法数据，最终在客户端上的命令执行问题。
浏览器是用户日常使用中频率最高的软件之一，而浏览器上插件的安全性直接影响浏览器的安全。我们之后也将会持续关注浏览器插件相关的安全性问题。
### Git ssh CVE-2017-1000117漏洞
在2017年8月10日Junio C Hamano在邮件组www.mail-archive.com发布了这一问题。恶意攻击人员可以通过巧妙构造“ssh://…”链接，让受害人在执行git程序等情况下访问该恶意链接，从而达到命令执行的目的。该链接可以被放在
git 项目的 .gitmodules 文件下，这样当受害人对一个项目进行“git clone –recurse-submodules”操作时，就会引发严重安全问题。漏洞影响包括但不限于