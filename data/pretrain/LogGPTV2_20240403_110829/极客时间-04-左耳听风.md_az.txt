# 小结好了，今天的分享就这些。总结一下今天的主要内容：我们从服务关键程度、服务依赖关系、整个架构的版本管理等多个方面，全面阐述了分布式系统架构五大关键技术之一------服务资源调度。希望这些内容能对你有所启发。你现在的公司中是怎样管理和运维线上的服务的呢？欢迎分享一下你的经验和方法。下一篇文章中，我们将从流量调度和状态数据调度两个方面，来接着聊分布式系统关键技术。文末有系列文章《分布式系统架构的本质》的目录，供你查看，方便你找到自己感兴趣的内容。-   [分布式系统架构的冰与火](https://time.geekbang.org/column/article/1411)-   [从亚马逊的实践，谈分布式系统的难点](https://time.geekbang.org/column/article/1505)-   [分布式系统的技术栈](https://time.geekbang.org/column/article/1512)-   [分布式系统关键技术：全栈监控](https://time.geekbang.org/column/article/1513)-   [分布式系统关键技术：服务调度](https://time.geekbang.org/column/article/1604)-   [分布式系统关键技术：流量与数据调度](https://time.geekbang.org/column/article/1609)-   [洞悉 PaaS    平台的本质](https://time.geekbang.org/column/article/1610)-   [推荐阅读：分布式系统架构经典资料](https://time.geekbang.org/column/article/2080)-   [推荐阅读：分布式数据调度相关论文](https://time.geekbang.org/column/article/2421)![](Images/1c1e992cf41f5294df097aabed82f9e4.png){savepage-src="https://static001.geekbang.org/resource/image/fc/e9/fcc761001867c60f526665e237f831e9.jpg"}
# 26 \| 分布式系统关键技术：流量与数据调度关于流量调度，现在很多架构师都把这个事和服务治理混为一谈了。我觉得还是应该分开的。一方面，服务治理是内部系统的事，而流量调度可以是内部的，更是外部接入层的事。另一方面，服务治理是数据中心的事，而流量调度要做得好，应该是数据中心之外的事，也就是我们常说的边缘计算，是应该在类似于CDN 上完成的事。所以，流量调度和服务治理是在不同层面上的，不应该混在一起，所以在系统架构上应该把它们分开。
# 流量调度的主要功能对于一个流量调度系统来说，其应该具有的主要功能是：1.  依据系统运行的情况，自动地进行流量调度，在无需人工干预的情况下，提升整个系统的稳定性；2.  让系统应对爆品等突发事件时，在弹性计算扩缩容的较长时间窗口内或底层资源消耗殆尽的情况下，保护系统平稳运行。这还是为了提高系统架构的稳定性和高可用性。此外，这个流量调度系统还可以完成以下几方面的事情。-   **服务流控**。服务发现、服务路由、服务降级、服务熔断、服务保护等。-   **流量控制**。负载均衡、流量分配、流量控制、异地灾备（多活）等。-   **流量管理**。协议转换、请求校验、数据缓存、数据计算等。所有的这些都应该是一个 API Gateway 应该做的事。
# 流量调度的关键技术但是，作为一个 API Gateway来说，因为要调度流量，首先需要扛住流量，而且还需要有一些比较轻量的业务逻辑，所以一个好的API Gateway 需要具备以下的关键技术。``{=html}1.  **高性能**。API Gateway    必须使用高性能的技术，所以，也就需要使用高性能的语言。2.  **扛流量**。要能扛流量，就需要使用集群技术。集群技术的关键点是在集群内的各个结点中共享数据。这就需要使用像    Paxos、Raft、Gossip 这样的通讯协议。因为 Gateway    需要部署在广域网上，所以还需要集群的分组技术。3.  **业务逻辑**。API Gateway 需要有简单的业务逻辑，所以，最好是像 AWS    的 Lambda 服务一样，可以让人注入不同语言的简单业务逻辑。4.  **服务化**。一个好的 API Gateway 需要能够通过 Admin API    来不停机地管理配置变更，而不是通过一个.conf 文件来人肉地修改配置。基于上述的这几个技术要求，就其本质来说，目前可以做成这样的 API Gateway几乎没有。这也是为什么我现在自己自主开发的原因（你可以到我的官网MegaEase.com 上查看相关的产品和技术信息）。
# 状态数据调度对于服务调度来说，最难办的就是有状态的服务了。这里的状态是State，也就是说，有些服务会保存一些数据，而这些数据是不能丢失的，所以，这些数据是需要随服务一起调度的。一般来说，我们会通过"转移问题"的方法来让服务变成"无状态的服务"。也就是说，会把这些有状态的东西存储到第三方服务上，比如Redis、MySQL、ZooKeeper，或是 NFS、Ceph 的文件系统中。这些"转移问题"的方式把问题转移到了第三方服务上，于是自己的 Java 或 PHP服务中没有状态，但是 Redis 和 MySQL上则有了状态。所以，我们可以看到，现在的分布式系统架构中出问题的基本都是这些存储状态的服务。因为数据存储结点在 Scale 上比较困难，所以成了一个单点的瓶颈。