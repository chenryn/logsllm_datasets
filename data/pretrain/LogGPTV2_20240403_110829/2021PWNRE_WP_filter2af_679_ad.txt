      char *v13; // [esp+8Ch] [ebp-40h]
      char *v14; // [esp+90h] [ebp-3Ch]
      _DWORD v15[3]; // [esp+98h] [ebp-34h] BYREF
      char v16[24]; // [esp+A4h] [ebp-28h] BYREF
      int v17; // [esp+C8h] [ebp-4h]
      sub_402930(v16);
      v17 = 0;
      v3 = (void *)output((int)&unk_4DDAF8, "please input flag");
      sub_4039B0(v3, (int (__cdecl *)(void *))sub_402310);
      sub_401500(&dword_4DDA80, v16);
      if ( sub_405DE0(v16) == 24 )
      {
        sub_402A20(v15);
        LOBYTE(v17) = 1;
        sub_402570(v15);
        v14 = v16;
        v13 = (char *)sub_405270(v16);
        v12 = (char *)sub_4052B0(v16);
        while ( v13 != v12 )
        {
          v11 = *v13;
          sub_403B70(v11);                               
          ++v13;
        }
        qmemcpy(v10, "rxusoCqxw{yqK`{KZqag{r`i", 24);    
        ((void (__stdcall *)(char *))sub_402590)(v10);
        v9 = (char *)sub_405290(v15);
        v8 = sub_4052E0(v15);
        while ( v9 != (char *)v8 )
        {
          if ( !(unsigned __int8)sub_403BB0(*v9) )
          {
            v6 = (void *)output((int)&unk_4DDAF8, "error");
            sub_4039B0(v6, (int (__cdecl *)(void *))sub_402310);
            LOBYTE(v17) = 0;
            sub_4034E0(v15);
            v17 = -1;
            sub_403450(v16);
            return 0;
          }
          ++v9;
        }
        v7 = (void *)output((int)&unk_4DDAF8, "good job");
        sub_4039B0(v7, (int (__cdecl *)(void *))sub_402310);
        LOBYTE(v17) = 0;
        sub_4034E0(v15);
        v17 = -1;
        sub_403450(v16);
        result = 0;
      }
      else
      {
        v4 = (void *)output((int)&unk_4DDAF8, "not enought");
        sub_4039B0(v4, (int (__cdecl *)(void *))sub_402310);
        v17 = -1;
        sub_403450(v16);
        result = 0;
      }
      return result;
    }
    int __thiscall sub_403B70(void *this, char a2)
    {
      char v3[65]; // [esp+Fh] [ebp-45h] BYREF
      void *v4; // [esp+50h] [ebp-4h]
      v4 = this;
      v3[0] = a2 ^ 0x14;                 
      sub_406170(v3);
      return ++dword_4DD8F8;
    }
经过分析你会发现就仅仅做了亦或操作。
###  exp
    s ='rxusoCqxw{yqK`{KZqag{r`i'
    for i in range(len(s)):
        print (chr(ord(s[i])^0x14),end = '')
    # flag{Welcome_to_Neusoft}%
## Re -> Remember Crypt 4
###  题目分析
    int __cdecl main(int argc, const char **argv, const char **envp)
    {
      int v3; // eax
      int inputlen; // eax
      void *v5; // rax
      void *v7; // rax
      int i; // [rsp+24h] [rbp-D4h]
      _DWORD *v9; // [rsp+28h] [rbp-D0h]
      char input[32]; // [rsp+30h] [rbp-C8h] BYREF
      char Str[32]; // [rsp+50h] [rbp-A8h] BYREF
      char v12[96]; // [rsp+70h] [rbp-88h] BYREF
      strcpy(Str, "12345678abcdefghijklmnopqrspxyz");
      memset(v12, 0, sizeof(v12));
      memset(input, 0, 0x17ui64);
      sub_1400054D0("%s", input);
      v9 = malloc(0x408ui64);
      v3 = strlen(Str);
      init_rc4(v9, Str, v3);
      inputlen = strlen(input);
      rc4(v9, input, inputlen);                                         
      for ( i = 0; i 
        {
          v5 = (void *)sub_1400015A0(&off_14013B020, "error");
          _CallMemberFunction0(v5, sub_140001F10);
          return 0;
        }
      }
      v7 = (void *)sub_1400015A0(&off_14013B020, "nice job");
      _CallMemberFunction0(v7, sub_140001F10);
      return 0;
    }
看明白还是简单的亦或操作，不必看具体怎么初始化，就只看rc4里面的亦或，可逆操作，rc4里面算法大部分都是定值，可以复现函数逻辑进行解密，也可以直接调试得到定值，直接亦或得到flag。我当时是复现了函数逻辑emo
###  exp
    byte = [
      0x9E, 0xE7, 0x30, 0x5F, 0xA7, 0x01, 0xA6, 0x53, 0x59, 0x1B, 
      0x0A, 0x20, 0xF1, 0x73, 0xD1, 0x0E, 0xAB, 0x09, 0x84, 0x0E, 
      0x8D, 0x2B
    ]
    # get for memory
    a1 = [
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x7F,0x00,0x00,0x00,0x64,0x00,0x00,0x00,0x99,0x00,0x00,0x00,0xD0,0x00,0x00,0x00,0x09,0x00,0x00,0x00,0x57,0x00,0x00,0x00,0x81,0x00,0x00,0x00,0xD2,0x00,0x00,0x00,0x78,0x00,0x00,0x00,0x2C,0x00,0x00,0x00,0xFC,0x00,0x00,0x00,0xDE,0x00,0x00,0x00,0xDC,0x00,0x00,0x00,0x89,0x00,0x00,0x00,0x4C,0x00,0x00,0x00,0x3B,0x00,0x00,0x00,0xB4,0x00,0x00,0x00,0xF5,0x00,0x00,0x00,0x90,0x00,0x00,0x00,0x2B,0x00,0x00,0x00,0x70,0x00,0x00,0x00,0x11,0x00,0x00,0x00,0x10,0x00,0x00,0x00,0x0F,0x00,0x00,0x00,0x0E,0x00,0x00,0x00,0x3E,0x00,0x00,0x00,0x0C,0x00,0x00,0x00,0x67,0x00,0x00,0x00,0x6D,0x00,0x00,0x00,0x91,0x00,0x00,0x00,0xB2,0x00,0x00,0x00,0x18,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xDF,0x00,0x00,0x00,0x75,0x00,0x00,0x00,0xF9,0x00,0x00,0x00,0x27,0x00,0x00,0x00,0x96,0x00,0x00,0x00,0xE1,0x00,0x00,0x00,0x15,0x00,0x00,0x00,0xF0,0x00,0x00,0x00,0x45,0x00,0x00,0x00,0xC2,0x00,0x00,0x00,0x2D,0x00,0x00,0x00,0x97,0x00,0x00,0x00,0x38,0x00,0x00,0x00,0x55,0x00,0x00,0x00,0xB1,0x00,0x00,0x00,0x69,0x00,0x00,0x00,0x87,0x00,0x00,0x00,0x61,0x00,0x00,0x00,0xEF,0x00,0x00,0x00,0x50,0x00,0x00,0x00,0xA6,0x00,0x00,0x00,0x43,0x00,0x00,0x00,0x25,0x00,0x00,0x00,0x93,0x00,0x00,0x00,0xE0,0x00,0x00,0x00,0x47,0x00,0x00,0x00,0xAC,0x00,0x00,0x00,0x98,0x00,0x00,0x00,0x19,0x00,0x00,0x00,0xED,0x00,0x00,0x00,0x4D,0x00,0x00,0x00,0x60,0x00,0x00,0x00,0x4A,0x00,0x00,0x00,0xBD,0x00,0x00,0x00,0xDB,0x00,0x00,0x00,0xE8,0x00,0x00,0x00,0x1A,0x00,0x00,0x00,0x86,0x00,0x00,0x00,0x05,0x00,0x00,0x00,0xE5,0x00,0x00,0x00,0x92,0x00,0x00,0x00,0x46,0x00,0x00,0x00,0x24,0x00,0x00,0x00,0xD3,0x00,0x00,0x00,0xF3,0x00,0x00,0x00,0xF6,0x00,0x00,0x00,0xC3,0x00,0x00,0x00,0xFA,0x00,0x00,0x00,0x3F,0x00,0x00,0x00,0xB0,0x00,0x00,0x00,0x1E,0x00,0x00,0x00,0x17,0x00,0x00,0x00,0x30,0x00,0x00,0x00,0x9E,0x00,0x00,0x00,0x1B,0x00,0x00,0x00,0x54,0x00,0x00,0x00,0x1C,0x00,0x00,0x00,0xFD,0x00,0x00,0x00,0xA1,0x00,0x00,0x00,0x13,0x00,0x00,0x00,0x85,0x00,0x00,0x00,0x76,0x00,0x00,0x00,0x29,0x00,0x00,0x00,0xD6,0x00,0x00,0x00,0xC9,0x00,0x00,0x00,0xCA,0x00,0x00,0x00,0x6E,0x00,0x00,0x00,0x2A,0x00,0x00,0x00,0xE3,0x00,0x00,0x00,0x7B,0x00,0x00,0x00,0x5D,0x00,0x00,0x00,0x8E,0x00,0x00,0x00,0x9F,0x00,0x00,0x00,0x6F,0x00,0x00,0x00,0x26,0x00,0x00,0x00,0x20,0x00,0x00,0x00,0x8B,0x00,0x00,0x00,0x03,0x00,0x00,0x00,0x8D,0x00,0x00,0x00,0x12,0x00,0x00,0x00,0xAA,0x00,0x00,0x00,0x37,0x00,0x00,0x00,0x71,0x00,0x00,0x00,0x4F,0x00,0x00,0x00,0xEE,0x00,0x00,0x00,0x84,0x00,0x00,0x00,0xAF,0x00,0x00,0x00,0x52,0x00,0x00,0x00,0x02,0x00,0x00,0x00,0xCF,0x00,0x00,0x00,0x06,0x00,0x00,0x00,0x33,0x00,0x00,0x00,0x14,0x00,0x00,0x00,0x5E,0x00,0x00,0x00,0x31,0x00,0x00,0x00,0x6C,0x00,0x00,0x00,0xD7,0x00,0x00,0x00,0xA5,0x00,0x00,0x00,0x51,0x00,0x00,0x00,0xF1,0x00,0x00,0x00,0x44,0x00,0x00,0x00,0x34,0x00,0x00,0x00,0xB6,0x00,0x00,0x00,0x08,0x00,0x00,0x00,0x74,0x00,0x00,0x00,0x07,0x00,0x00,0x00,0xA7,0x00,0x00,0x00,0x5F,0x00,0x00,0x00,0x9D,0x00,0x00,0x00,0xDA,0x00,0x00,0x00,0xFE,0x00,0x00,0x00,0xD5,0x00,0x00,0x00,0xDD,0x00,0x00,0x00,0x35,0x00,0x00,0x00,0x65,0x00,0x00,0x00,0x7E,0x00,0x00,0x00,0xBA,0x00,0x00,0x00,0xE9,0x00,0x00,0x00,0xA2,0x00,0x00,0x00,0xC7,0x00,0x00,0x00,0xCE,0x00,0x00,0x00,0xE2,0x00,0x00,0x00,0xA3,0x00,0x00,0x00,0x9B,0x00,0x00,0x00,0x22,0x00,0x00,0x00,0xFF,0x00,0x00,0x00,0xC8,0x00,0x00,0x00,0x77,0x00,0x00,0x00,0xA4,0x00,0x00,0x00,0x8F,0x00,0x00,0x00,0xCC,0x00,0x00,0x00,0xE7,0x00,0x00,0x00,0x0B,0x00,0x00,0x00,0xE6,0x00,0x00,0x00,0xBF,0x00,0x00,0x00,0x5A,0x00,0x00,0x00,0x39,0x00,0x00,0x00,0xB9,0x00,0x00,0x00,0x63,0x00,0x00,0x00,0x04,0x00,0x00,0x00,0xE4,0x00,0x00,0x00,0xBE,0x00,0x00,0x00,0xB8,0x00,0x00,0x00,0x80,0x00,0x00,0x00,0x0A,0x00,0x00,0x00,0x88,0x00,0x00,0x00,0x49,0x00,0x00,0x00,0x5B,0x00,0x00,0x00,0x7A,0x00,0x00,0x00,0x5C,0x00,0x00,0x00,0xA8,0x00,0x00,0x00,0xCB,0x00,0x00,0x00,0xEB,0x00,0x00,0x00,0xAD,0x00,0x00,0x00,0x16,0x00,0x00,0x00,0xD4,0x00,0x00,0x00,0x21,0x00,0x00,0x00,0xC6,0x00,0x00,0x00,0x95,0x00,0x00,0x00,0xC4,0x00,0x00,0x00,0x28,0x00,0x00,0x00,0x56,0x00,0x00,0x00,0xB7,0x00,0x00,0x00,0x68,0x00,0x00,0x00,0x6A,0x00,0x00,0x00,0xD1,0x00,0x00,0x00,0x9C,0x00,0x00,0x00,0x4B,0x00,0x00,0x00,0x58,0x00,0x00,0x00,0x9A,0x00,0x00,0x00,0xB5,0x00,0x00,0x00,0xAE,0x00,0x00,0x00,0x1F,0x00,0x00,0x00,0x94,0x00,0x00,0x00,0x7D,0x00,0x00,0x00,0xEC,0x00,0x00,0x00,0x62,0x00,0x00,0x00,0xC1,0x00,0x00,0x00,0x8A,0x00,0x00,0x00,0x32,0x00,0x00,0x00,0x53,0x00,0x00,0x00,0x3C,0x00,0x00,0x00,0x7C,0x00,0x00,0x00,0x4E,0x00,0x00,0x00,0xBB,0x00,0x00,0x00,0x40,0x00,0x00,0x00,0xF7,0x00,0x00,0x00,0x2E,0x00,0x00,0x00,0x59,0x00,0x00,0x00,0x6B,0x00,0x00,0x00,0x79,0x00,0x00,0x00,0xD9,0x00,0x00,0x00,0xA9,0x00,0x00,0x00,0x82,0x00,0x00,0x00,0xC5,0x00,0x00,0x00,0xFB,0x00,0x00,0x00,0x23,0x00,0x00,0x00,0xB3,0x00,0x00,0x00,0xF2,0x00,0x00,0x00,0x72,0x00,0x00,0x00,0x83,0x00,0x00,0x00,0xEA,0x00,0x00,0x00,0xAB,0x00,0x00,0x00,0x01,0x00,0x00,0x00,0x0D,0x00,0x00,0x00,0xA0,0x00,0x00,0x00,0x73,0x00,0x00,0x00,0xC0,0x00,0x00,0x00,0x41,0x00,0x00,0x00,0xF4,0x00,0x00,0x00,0x3D,0x00,0x00,0x00,0x42,0x00,0x00,0x00,0x2F,0x00,0x00,0x00,0x3A,0x00,0x00,0x00,0x8C,0x00,0x00,0x00,0xF8,0x00,0x00,0x00,0xCD,0x00,0x00,0x00,0x1D,0x00,0x00,0x00,0x36,0x00,0x00,0x00,0x66,0x00,0x00,0x00,0x48,0x00,0x00,0x00,0xD8,0x00,0x00,0x00,0xBC
    ]
    s = []
    for i in range(22):
        s.append(byte[i]^0x22)
    v5 = a1[0]
    v6 = a1[4]
    v9 = a1[8:]
    for i in range(22):
        v5 = (v5 + 1)&0xff
        v7 = v9[4*v5]
        v6 = (v7 + v6)&0xff
        v8 = v9[4*v6]
        v9[4*v5] = v8
        v9[4*v6] = v7
        s[i] ^= v9[((v8 + v7)&0xff)*4]&0xff
    for i in s:
        print (chr(i),end='')
ChaMd5战队exp更简洁，数据是动调出来的：
    data=[0x9E,0xE7,0x30,0x5F,0xA7,0x01,0xA6,0x53,0x59,0x1B,0x0A,0x20,0xF1,0x73,0xD1,0x0E,0xAB,0x09,0x84,0x0E,0x8D, 0x2B]
    tem=[0xda,0xa9,0x73,0x1A,0xFE,0x4D,0xED,0x12,0x1E,0x66,0x5C,0x6D,0x8C,0x3C,0x96,0x49,0xFD,0x74,0xDF,0x43,0xDA,0x74]
    flag=''
    for i in range(22):
        flag+=chr(data[i]^tem[i]^0x22)
    print(flag)
## Re -> easyRe
参考ChaMd5的WP
## 附件
[附件](https://github.com/1094093288/IMG/tree/master/Pwn/2021DongRuanCTF)
## 参考
  1. [ChaMd5](https://mp.weixin.qq.com/s/KgxHOFH52EE8z7NnMTSIDA)
  2. [地运](https://mp.weixin.qq.com/s/C0Vn_5NnGCd8Sn6--otsgA)
  3. [or4nge](https://or4ngesec.github.io/post/dnuictf-writeup-by-or4nge/#web)
  4. [官方](https://docs.qq.com/doc/DSVB0U3BIWHZ4RVRF)