lowest bit corresponding to the lowest address.
Connectivity hash table. This hash table stores the connectivity between a jump-
from address and its target table. It is a sparse table with a density around
50 %. Moreover, it is open addressed and represented using arrays, thus have
near-linear search time.
Target tables. The addresses of each table are sorted in an ascending order such
that we can quickly locate a target when validating the jump-to address of a
LBR record.
Bitmap of entry-points. In order to save the memory overhead, the entry-point
bitmap is merged with the jump-from address bitmap. An entry-point must be
an address of an intended instruction, so the merged bitmap does not add extra
bit for validating jump-from addresses.
Moreover, we add a header to manage the constraint data, which contains
metadata including the location of bitmap and hash table, as well as the size
of hash table. Figure 2 illustrates a part of the constraint data of an exemplary
application.
76
P. Yuan et al.
Fig. 2. The constraint data of a demo application
5.2 Hardware Monitor: LBR + PMU
Figure 3 is the diagram of the LBR + PMU monitor. LBR is conﬁgured by
IA32 DEBUG MSR and MSR LBR SELECT registers which are used for enabling/
disabling LBR and branch type ﬁltering, respectively. PMU is conﬁgured by three
registers. In fact, modern CPUs generally oﬀer several PMU units and we select
the ﬁrst one denoted as PMU0 in our processor. Register IA32 PERF GLOBAL CTRL
is used to enable PMU0. Meanwhile, Register IA32 PERFEVSEL0 sets the
BR INST EXEC bits for monitoring and sets a sub-event mask for branch type
ﬁltering.
The driver of LBR + PMU exports several interfaces for management: (a) an
interface to enable/disable the monitor; (b) an interface to support branch type
ﬁltering; and (c) an interface to (re-)initialize PMC0.
5.3 Security Check
We implement the security check functionality as two Loadable Kernel Mod-
ules (LKMs) with one for loading the constraint data and the other for policy
enforcement.
LKM for Loading Constraint Data. This module uses kernel buﬀers to
store constraint data of the application and its dynamically linked libraries. All
pages of these buﬀers are set with VM RESERVED attribute to ensure that they
are not swapped out at runtime. This conﬁguration makes the constraint data
to be available for the interrupt handler. Moreover, each buﬀer is exported to
the user as a memory-mapping ﬁle under the “/proc” ﬁle system, and the ﬁles
are protected by the access policies of the Linux system. As a result, a privileged
user can upload constraint data ﬁles into the kernel buﬀers before running a
protected program.
This module also hooks into the exec() kernel routine to bind the constraint
data ﬁle to the VMA instance of the corresponding code segment after the
Hardware-Assisted Fine-Grained Code-Reuse Attack Detection
77
Fig. 3. The diagram of LBR + PMU
protected program is loaded into the memory. Consequently, the right constraint
data is retrieved from the VMA instance during the security check.
LKM for Security Enforcement. The module inserts hooks in the inter-
rupt handler “intel pmu handle irq()” and the system call table to intercept
LBR + PMU’s interrupts and system calls, respectively. The security check is
bound to a function pointer exported by the Linux kernel, which is initialized
when this module is installed.
5.4 Launching CFIGuard System
Current implementation needs a few manual operations to protect a program
at runtime, but we leave it as our future work to automate the entire process.
We ﬁrst install the LKM for loading the constraint data and then upload con-
straint data to the exported “/proc” ﬁles. Next, we install the LKM for security
enforcement. After that, a user application can be launched with CFIGuard
protection.
6 Evaluation
All evaluation experiments are performed on a PC with an Intel Core i5-3470
processor with 4 cores. Each core has 32 k L1 instruction and L1 data cache and a
256 K L2 data cache. The four cores share a 6 MB L3 cache. The platform has
78
P. Yuan et al.
4 GB 1066 MHz main memory, a 1TB SCSI disk of 7200 rpm, and a 1000 Mbps
NIC. The operating system is Ubuntu 14.04 with kernel version 3.13.11.
6.1 Eﬀectiveness on the RIPE Benchmark
In order to evaluate the eﬀectiveness of our approach, we use the RIPE [39]
testbed. This is a program with many security vulnerabilities and loopholes. Its
test script launches 3940 control ﬂow hijacking attacks by using a variety of
techniques including ROP and return-into-libc.
Around 80 exploits can succeed when all protection mechanisms built in the
platform and the OS are turned on. In contrast none of them succeeds when CFI-
Guard is deployed. Note that RIPE only evaluates the eﬀectiveness of countering
the known attacks. CFIGuard can also defend against other sophisticated control
ﬂow hijacking attacks, such as recent just-in-time ROP [32] and blind-ROP [6].
6.2 Performance Evaluation
In this section, we report our performance evaluation of CFIGuard using several
real-world applications which many attacks target at.
Target Applications. To show that CFIGuard can be eﬃciently applied to a
variety of applications in practice, we choose diﬀerent types of server applications
listed in Table 2, including Apache Web Server, Mysql Database and the vsftpd
FTP server.
Table 2. Diﬀerent types of real-world applications for benchmarking
Application Performance matrix Parameters
Apache
Throughput of get
20 clients send 50000 requests
Mysql
vsftpd
Runtime overhead
16 clients issue 10000 transactions
Throughput
10 clients download/upload a 10Mb ﬁle
Contribution of Branch Type Filtering. The ﬁltering of direct branches
dramatically releases the hardware burden on recording and results in low fre-
quency of interrupts and low performance overhead. We utilize Linux’s Perf tool
to count the execution rounds of indirect branches and that of all branches. The
results are shown in Table 2 below. On average, the execution rounds of indirect
branches take only 16.7 % of the total amount. Therefore, the branch ﬁltering
mechanism of LBR + PMU eﬀectively trims the runtime overhead as compared
to monitoring all branches.
Performance Results. We evaluate those server applications with a perfor-
mance matrix shown in Table 2. Figure 4 depicts the performance overhead for
protecting these applications with CFIGuard. From this ﬁgure, we can see that
CFIGuard incurs low performance overhead, with only 2.9 % on average, and
a maximum 5.6 % on Apache. Most of the cost (around 83 %) is attributed to
Hardware-Assisted Fine-Grained Code-Reuse Attack Detection
79
Table 3. The execution records of indirect branches and their ratio in total.
Server
# of branch exec.
(in million)
# of ind. branch
exec. (in million)
Percentage
(%)
Remarks
Apache
99.8
19.3
Mysql
7619.5
1416.1
vsftpd-download 307.2
vsftpd-upload
1926.0
293.3
2730
19.3
18.6
13.6
15.2
Get a 8 Kb
ﬁle
Size
of
queried table
is 32000
Download a
10 Mb ﬁle
Upload
10 Mb ﬁle
a
Fig. 4. Performance overhead of CFIGuard
LBR + PMU monitoring. Our overhead is lower than that of CFIMon [40] which
reports a 6.1 % overhead. The result means that CFIGuard can be applied to
certain real-world server applications in daily use (Table 2).
Figure 5(a) shows the overhead of CFIGuard when web clients get ﬁles of
diﬀerent sizes from an Apache server. The performance overhead is less than 1 %
when the ﬁle size is larger than 4 KB, but increases as the ﬁle getting smaller
(note that Fig. 4 shows the average cost across diﬀerent ﬁle sizes). This is because
when the ﬁle is large, the task is more I/O intensive. For small-size ﬁles, the server
consumes more CPU cycles relatively. The throughput of apache-get running
with CFIGurad is 88 % of its native throughput when the ﬁle size is 1 KB.
Figure 5(b) shows the runtime of CFIGuard when database clients queries tables
of diﬀerent sizes hosted by a Mysql server. The time overhead of CFIGuard is
around 3.7 % on average.
6.3 Memory Overhead
Table 4 shows the memory space used by CFIGuard to store the constraint data
for a target application as compared to the application’s own memory cost. The
overhead mainly is attributed to the jump-from address bitmap and the target
tables. Because the instruction set of x86 architecture consists of instructions
with variable length, we have to track every code byte with a bit. As a result,
80
P. Yuan et al.
(a) Performance overhead in Apache.
(b) Performance overhead in Mysql.
Fig. 5. Performance overhead of CFIGurad in Apache and Mysql.
Table 4. The memory overhead of CFIGurad
Servers Binary ﬁle size (in KB) Constraint ﬁle size (in Kb) Overhead (%)
Apache
568
Mysql
10437
vsftpd
167
136
2492
54
24.0
23.9
32.3
the overhead is at least 1/8. The memory overhead introduced by target tables
is mainly for two reasons. Firstly, a small portion of ret instructions have too
many targets (e.g., more than 256). Secondly, although all ret instructions of
the same function have a common target set, each of them has its own target
table according to our design. Note that the constraint data for shared libraries
can be shared by diﬀerent processes, which signiﬁcantly saves the system wide
memory cost.
7 Discussion
7.1 Return-into-app Attack
A dynamically linked library such as libc.so may export many functions. The
backward inter-module transfers issued by ret instructions in those functions
can hardly be depicted by a static CFG. Most existing mechanisms provide
no protection or imprecise protection for those transfers to bypass the hassle.
Hence, backward inter-module transfers are generally vulnerable at present. In
the same vein as the return-to-libc attack, we name it the return-into-app
attack as it is prone to redirect those transfers to invalid targets located at the
application. CFIGuard mitigates such attacks by dictating that those transfers
can only target the legitimate entry-points of the landing module. Because a
typical program has far less entry-points than the number of indirect branch
targets, the attack can hardly be launched under the protection of CFIGuard
comparing with other CFI solutions such as MIP [23] and CCFIR [43].
Hardware-Assisted Fine-Grained Code-Reuse Attack Detection
81