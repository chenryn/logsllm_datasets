# 使用 K-means 对图像进行聚类，并显示聚类压缩后的图像import numpy as npimport PIL.Image as imagefrom sklearn.cluster import KMeansfrom sklearn import preprocessingimport matplotlib.image as mpimg
# 加载图像，并对数据进行规范化def load_data(filePath):    
# 读文件    f = open(filePath,'rb')    data = []    
# 得到图像的像素值    img = image.open(f)    
# 得到图像尺寸    width, height = img.size    for x in range(width):        for y in range(height):            
# 得到点 (x,y) 的三个通道值            c1, c2, c3 = img.getpixel((x, y))            data.append([(c1+1)/256.0, (c2+1)/256.0, (c3+1)/256.0])    f.close()    return np.mat(data), width, height
# 加载图像，得到规范化的结果 imgData，以及图像尺寸img, width, height = load_data('./weixin.jpg')
# 用 K-Means 对图像进行 16 聚类kmeans =KMeans(n_clusters=16)label = kmeans.fit_predict(img)
# 将图像聚类结果，转化成图像尺寸的矩阵label = label.reshape([width, height])
# 创建个新图像 img，用来保存图像聚类压缩后的结果img=image.new('RGB', (width, height))for x in range(width):    for y in range(height):        c1 = kmeans.cluster_centers_[label[x, y], 0]        c2 = kmeans.cluster_centers_[label[x, y], 1]        c3 = kmeans.cluster_centers_[label[x, y], 2]        img.putpixel((x, y), (int(c1*256)-1, int(c2*256)-1, int(c3*256)-1))img.save('weixin_new.jpg')完整代码见[这里](https://github.com/cystanford/kmeans/blob/master/kmeans3.py)。你可以看到我没有用到 sklearn 自带的 MinMaxScaler，而是自己写了 Min-Max规范化的公式。这样做的原因是我们知道 RGB 每个通道的数值在 \[0,255\之间，所以我们可以用每个通道的数值 +1/256，这样数值就会在 \[0,1\] 之间。对图像做了 Min-Max空间变换之后，还可以对其进行反变换，还原出对应原图的通道值。对于点 (x,y)，我们找到它们所属的簇label\[x,y\]，然后得到这个簇的质心特征，用 c1,c2,c3 表示：    c1 = kmeans.cluster_centers_[label[x, y], 0]c2 = kmeans.cluster_centers_[label[x, y], 1]c3 = kmeans.cluster_centers_[label[x, y], 2因为 c1, c2, c3 对应的是数据规范化的数值，因此我们还需要进行反变换，即：    c1=int(c1*256)-1c2=int(c2*256)-1c3=int(c3*256)-1然后用 img.putpixel 设置点 (x,y) 反变换后得到的特征值。最后用 img.save保存图像。
## 总结今天我们用 K-Means 做了图像的分割，其实不难发现 K-Means聚类有个缺陷：聚类个数 K值需要事先指定。如果你不知道该聚成几类，那么最好会给 K值多设置几个，然后选择聚类结果最好的那个值。通过今天的图像分割，你发现用 K-Means 计算的过程在 sklearn中就是几行代码，大部分的工作还是在预处理和后处理上。预处理是将图像进行加载，数据规范化。后处理是对聚类后的结果进行反变换。如果涉及到后处理，你可以自己来设定数据规范化的函数，这样反变换的函数比较容易编写。另外我们还学习了如何在 Python中如何对图像进行读写，具体的代码如下，上文中也有相应代码，你也可以自己对应下：    import PIL.Image as image
# 得到图像的像素值img = image.open(f)