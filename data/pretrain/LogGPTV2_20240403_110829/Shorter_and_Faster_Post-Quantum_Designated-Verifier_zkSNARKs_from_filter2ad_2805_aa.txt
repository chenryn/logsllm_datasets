title:Shorter and Faster Post-Quantum Designated-Verifier zkSNARKs from
Lattices
author:Yuval Ishai and
Hang Su and
David J. Wu
Shorter and Faster Post-Quantum
Designated-Verifier zkSNARKs from Lattices
Yuval Ishai
Technion
Haifa, Israel
PI:EMAIL
Hang Su
University of Virginia
Charlottesville, VA, USA
PI:EMAIL
David J. Wu
University of Texas at Austin
Austin, TX, USA
PI:EMAIL
ABSTRACT
Zero-knowledge succinct arguments of knowledge (zkSNARKs) en-
able efficient privacy-preserving proofs of membership for general
NP languages. Our focus in this work is on post-quantum zkSNARKs,
with a focus on minimizing proof size. Currently, there is a 1000√ó
gap in the proof size between the best pre-quantum constructions
and the best post-quantum ones. Here, we develop and implement
new lattice-based zkSNARKs in the designated-verifier preprocess-
ing model. With our construction, after an initial preprocessing
step, a proof for an NP relation of size 220 is just over 16 KB. Our
proofs are 10.3√ó shorter than previous post-quantum zkSNARKs
for general NP languages. Compared to previous lattice-based zk-
SNARKs (also in the designated-verifier preprocessing model), we
obtain a 42√ó reduction in proof size and a 60√ó reduction in the
prover‚Äôs running time, all while achieving a much higher level of
soundness. Compared to the shortest pre-quantum zkSNARKs by
Groth (Eurocrypt 2016), the proof size in our lattice-based construc-
tion is 131√ó longer, but both the prover and the verifier are faster
(by 1.2√ó and 2.8√ó, respectively).
Our construction follows the general blueprint of Bitansky et al.
(TCC 2013) and Boneh et al. (Eurocrypt 2017) of combining a linear
probabilistically checkable proof (linear PCP) together with a linear-
only vector encryption scheme. We develop a concretely-efficient
lattice-based instantiation of this compiler by considering quadratic
extension fields of moderate characteristic and using linear-only
vector encryption over rank-2 module lattices.
CCS CONCEPTS
‚Ä¢ Security and privacy ‚Üí Cryptography; Privacy-preserving
protocols.
KEYWORDS
zkSNARKs; succinct arguments; lattice-based SNARKs
ACM Reference Format:
Yuval Ishai, Hang Su, and David J. Wu. 2021. Shorter and Faster Post-
Quantum Designated-Verifier zkSNARKs from Lattices. In Proceedings of the
2021 ACM SIGSAC Conference on Computer and Communications Security
Permission to make digital or hard copies of all or part of this work for personal or
classroom use is granted without fee provided that copies are not made or distributed
for profit or commercial advantage and that copies bear this notice and the full citation
on the first page. Copyrights for components of this work owned by others than the
author(s) must be honored. Abstracting with credit is permitted. To copy otherwise, or
republish, to post on servers or to redistribute to lists, requires prior specific permission
and/or a fee. Request permissions from permissions@acm.org.
CCS ‚Äô21, November 15‚Äì19, 2021, Virtual Event, Republic of Korea
¬© 2021 Copyright held by the owner/author(s). Publication rights licensed to ACM.
ACM ISBN 978-1-4503-8454-4/21/11...$15.00
https://doi.org/10.1145/3460120.3484572
(CCS ‚Äô21), November 15‚Äì19, 2021, Virtual Event, Republic of Korea. ACM, New
York, NY, USA, 23 pages. https://doi.org/10.1145/3460120.3484572
1 INTRODUCTION
A zero-knowledge proof of knowledge [71] for an NP relation R en-
ables a prover to convince a verifier that a statement is true without
revealing anything more about the statement. In a zero-knowledge
succinct argument of knowledge (zkSNARK) [69, 79, 84], we addi-
tionally require that the proof consist of a single message ùúã from
the prover to the verifier, and moreover, that the length of the proof
ùúã and the verification complexity be sublinear (ideally, polyloga-
rithmic) in the size of the circuit computing R. Zero-knowledge
SNARKs have applications to delegating and verifying computa-
tions [107] and for constructing privacy-preserving cryptocurren-
cies [18]. In the last few years, there have been numerous works
studying constructions from different assumptions and on opti-
mizing the asymptotic and concrete efficiency of zkSNARKs (e.g.,
[5, 15, 21, 30, 34, 43, 44, 46, 47, 49, 63, 65, 75, 81, 87, 99, 101, 106, 111]).
Post-quantum zkSNARKs. Many existing constructions of prac-
tical zkSNARKs for NP rely on group-based and pairing-based
assumptions [30, 34, 43, 46, 64, 74, 75, 83, 87, 97, 99] and are inse-
cure against quantum adversaries. Several recent works have in-
troduced new concretely-efficient post-quantum zkSNARKs based
on cryptographic hash functions [5, 15, 21, 28, 47, 101] or lattice-
based assumptions [65]. However, compared to their pre-quantum
analogs, current post-quantum constructions have substantially
longer proofs. As a point of comparison, in the most succinct pre-
quantum construction by Groth [75], proofs are just 128 bytes while
those in the most succinct post-quantum constructions [21, 28, 47,
101] are generally 1000√ó longer (see Table 1). The increase in param-
eter sizes is not entirely surprising since a similar, although smaller,
gap exists between the sizes of group-based pre-quantum signa-
tures [33, 93] and hash-based [27, 45] or lattice-based post-quantum
signatures [55, 60].
This work: lattice-based designated-verifier zkSNARKs. Our focus
in this work is on new approaches for constructing shorter (and
faster) post-quantum zkSNARKs from lattice-based assumptions.
Like recent works [21, 47, 64, 97‚Äì99], we focus on the NP-complete
language of rank-1 constraint satisfiability (R1CS), which general-
izes Boolean and arithmetic circuit satisfiability and enjoys efficient
compiler support from other program representations [19, 20, 24,
42, 87, 100]. While recent works have introduced post-quantum
zkSNARKs from lattice-based assumptions [31, 32, 65, 86], to our
knowledge, only the construction of Gennaro et al. [65] has been
implemented. Its proof sizes are significantly worse compared to
Session 1C: Zero Knowledge I CCS ‚Äô21, November 15‚Äì19, 2021, Virtual Event, Republic of Korea212alternative post-quantum constructions based on interactive or-
acle proofs (IOPs) and the Fiat-Shamir heuristic (e.g., 640 KB for
the lattice-based approach [65] vs. 169 KB for an IOP-based ap-
proach [21]). The prover time for current lattice-based instantia-
tions is also over 10√ó worse than the alternative constructions.
Similar to the previous lattice-based constructions, we design our
zkSNARKs in the designated-verifier preprocessing model where
there is an (expensive but practically feasible) setup algorithm that
samples public parameters and a secret verification key (needed to
verify proofs). While the designated-verifier model is a relaxation
of the conventional setting of zkSNARKs, it nonetheless suffices for
applications to verifiable computation and other privacy-preserving
protocols.
Our results. Our main result is a new designated-verifier zk-
SNARK from lattice-based assumptions where the proof size (for
verifying an R1CS instance of size 220) is just over 16 KB. This is
a 10.3√ó reduction in proof size compared to Aurora [21], a post-
quantum IOP-based SNARK with short proofs. If we restrict our at-
tention to post-quantum zkSNARKs with sublinear verification, our
construction is 13.1√ó shorter than Fractal [47]. Compared to the spe-
cialized ethSTARK [101] construction, a post-quantum STARK [15]
for verifying a STARK-friendly hash chain, our proofs are 7.7√ó
shorter. Finally, compared to the lattice-based construction of Gen-
naro et al. [65], our zkSNARKs are 42.1√ó shorter. However, there
remains a large gap (131√ó) compared to the shortest pre-quantum
zkSNARK by Groth [75]. We refer to Table 1 for the full comparison
and describe our experimental setup in detail in Section 4.3.
The prover and verifier complexities of our new zkSNARK com-
pare favorably with other post-quantum schemes for verifying
general NP computations. Our construction is over 4.5√ó faster for
the prover compared to Aurora and Fractal on R1CS instances of
similar size. Compared to the Gennaro et al. lattice-based candi-
date [65], our construction is 60√ó faster for the prover and 5.1√ó
faster for the verifier. Compared to the pre-quantum pairing-based
construction of Groth [75], our construction is 1.2√ó faster for the
prover and 2.8√ó faster for the verifier. Using an alternative instan-
tiation of our construction with longer proofs (20.8 KB vs. 16.4 KB),
our construction is 1.4√ó faster than the pairing-based construction
for the prover and 7.9√ó faster for the verifier.
Another appealing feature of our lattice-based zkSNARK is the
simplicity of proof verification: it only requires evaluating a matrix-
vector product followed by a few simple arithmetic tests. This leads
to a concretely faster verification procedure compared to previous
constructions (which either required pairing computations or mul-
tiple invocations of a cryptographic hash function) and also makes
our construction well-suited for verifying proofs on lightweight or
energy-constrained devices that can only support a limited number
of arithmetic operations. We note that for verifying small compu-
tations (e.g., an R1CS system with 214 constraints) with a larger
soundness error (e.g., 1/128), the group-based designated-verifier
SNARK of Barta et al. [10] can plausibly achieve even faster veri-
fication. However, this comes at the price of needing a long CRS
and a high prover cost (both scale quadratically with the size of the
R1CS system).
Further improvements to the proof size and prover complexity
are possible if we relax zero knowledge. For instance, a variant of
our construction that is sound but not provably zero knowledge is
over 2.3√ó faster for the prover than the pairing-based construction
of Groth and has a proof size of 11.1 KB (for verifying an R1CS
instance with 220 constraints). This construction is suitable for
applications that do not require zero knowledge, or alternatively,
can tolerate a small amount of leakage. Note that while we do
not prove zero knowledge of this variant, the construction can
still provide full zero knowledge assuming that the underlying
information-theoretic building block we use (linear PCPs) remains
zero knowledge in the presence of leakage. We provide more details
in the full version of this paper [78]. We leave the question of
determining whether the linear PCPs we use (see Appendix B) or
variants thereof satisfy the stronger notion of zero knowledge with
leakage to future work. In Section 4.3, we show trade-offs between
the number of bits of provable zero knowledge provided by our
construction and its concrete efficiency.
Compared to other post-quantum constructions based on ‚ÄúMPC-
in-the-head‚Äù [5, 28, 77], the ‚ÄúGKR‚Äù approach [70, 109, 110], or con-
structions tailored for specific computations [101], our prover times
are generally higher. For instance, compared to Ligero [5], our
prover is about 1.8√ó more expensive, but our proof size and ver-
ification times are over 874√ó better (see Table 1). If we compare
against the ethSTARK scheme [101] for verifying a STARK-friendly
hash chain [4, 25], the running time of the ethSTARK prover is 15√ó
smaller than the running time of our prover for verifying the R1CS
representation of the same computation. In general, these alterna-
tive approaches typically enjoy smaller concrete prover costs, but
often have longer proofs or higher verification costs when consid-
ering general, unstructured computations. We provide more details
and comparisons with other zkSNARKs in Section 5.
The IOP-based constructions have the advantage of being publicly-
verifiable and transparent. Our scheme is designated-verifier and
requires an expensive trusted setup. For verifying R1CS systems
with 220 constraints, we need to sample a CRS of size 5.3 GB which
takes 37 minutes. An alternative instantiation of our construction
over a larger finite field reduces the CRS size to 1.9 GB and the
setup time to 15 minutes. This leads to a modest increase in proof
size from 16.4 KB to 20.8 KB (see Table 1).
Limitations of our construction. While our lattice-based zkSNARK
achieve better succinctness compared to other post-quantum zk-
SNARK candidates, they have several limitations that give rise to
natural directions for improvement. We highlight some of these
here:
‚Ä¢ Reusable soundness and public verification. As noted above,
our lattice-based zkSNARK is in the designated-verifier model
where a secret verification key is needed to verify proofs. More-
over, like existing lattice-based designated-verifier zkSNARKs [32,
65], our construction does not provide reusable soundness where
soundness holds even against a malicious prover who can make
an arbitrary polynomial number of queries to the verification
oracle. Constructing a lattice-based zkSNARK with comparable
concrete efficiency and reusable soundness is an interesting di-
rection. As we discuss in greater detail in the full version of this
paper [78], even without a provable notion of reusable sound-
ness, our construction still suffices for some applications to verifi-
able computation. In particular, breaking soundness requires the
Session 1C: Zero Knowledge I CCS ‚Äô21, November 15‚Äì19, 2021, Virtual Event, Republic of Korea213Scheme
Groth [75]
Gennaro et al. [65]‚àó
Ligero [5]
Aurora [21]
Fractal [47]‚Ä°
ethSTARK [101]¬ß
Structure
PQ TP
Pairings
Lattices
Random
Oracle
Random
Oracle
Random
Oracle
Random
Oracle
This work (Shorter Proofs)
Lattices
This work (Shorter CRS)