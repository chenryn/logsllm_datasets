walbouncer: Filtering WAL
Hans-Ju¨rgen Sch¨onig
www.postgresql-support.de
Hans-Ju¨rgenSch¨onig
www.postgresql-support.de
walbouncer: Filtering WAL
Hans-Ju¨rgenSch¨onig
www.postgresql-support.de
Current status
(cid:73) WAL streaming is the basis for replication
Limitations:
(cid:73) Currently an entire database instance has to be replicated
(cid:73) There is no way to replicate single databases
(cid:73) WAL used to be hard to read
Hans-Ju¨rgenSch¨onig
www.postgresql-support.de
The goal
(cid:73) Create a “WAL-server” to filter the transaction log
(cid:73) Put walbouncer between the PostgreSQL master and the
“partial” slave
Hans-Ju¨rgenSch¨onig
www.postgresql-support.de
How is it done?
(cid:73) The basic structure of the WAL is very actually fairly nice to
filter
(cid:73) Each WAL record that accesses a database has a RelFileNode:
(cid:73) database OID
(cid:73) tablespace OID
(cid:73) data file OID
(cid:73) What more do we need?
Hans-Ju¨rgenSch¨onig
www.postgresql-support.de
WAL format
Hans-Ju¨rgenSch¨onig
www.postgresql-support.de
WAL format
(cid:73) WAL logically is a stream of records.
(cid:73) Each record is identified by position in this stream.
(cid:73) WAL is stored in 16MB files called segments.
(cid:73) Each segment is composed of 8KB WAL pages.
Hans-Ju¨rgenSch¨onig
www.postgresql-support.de
WAL pages
(cid:73) Wal pages have a header containing:
(cid:73) 16bit “magic” value
(cid:73) Flag bits
(cid:73) Timeline ID
(cid:73) Xlog position of this page
(cid:73) Length of data remaining from last record on previous page
(cid:73) Additionally first page of each segment has the following
information for correctness validation:
(cid:73) System identifier
(cid:73) WAL segment and block sizes
Hans-Ju¨rgenSch¨onig
www.postgresql-support.de
Xlog record structre
(cid:73) Total length of record
(cid:73) Transaction ID that produced the record
(cid:73) Length of record specific data excluding header and backup
blocks
(cid:73) Flags
(cid:73) Record type (e.g. Xlog checkpoint, transaction commit, btree
insert)
(cid:73) Start position of previous record
(cid:73) Checksum of this record
(cid:73) Record specific data
(cid:73) Full page images
Hans-Ju¨rgenSch¨onig
www.postgresql-support.de
Handling WAL positions
(cid:73) WAL positions are highly critical
(cid:73) WAL addresses must not be changed
(cid:73) addresses are stored in data page headers to decide if replay is
necessary.
(cid:73) The solution:
(cid:73) inject dummy records into the WAL
Hans-Ju¨rgenSch¨onig
www.postgresql-support.de
Dummy records
(cid:73) PostgreSQL has infrastructure for dummy WAL entries
(basically “zero” values)
(cid:73) Valid WAL records can therefore be replaced with dummy
ones quite easily.
(cid:73) The slave will consume and ignore them
Hans-Ju¨rgenSch¨onig
www.postgresql-support.de
Question: What to filter?
(cid:73) What about the shared catalog?
(cid:73) We got to replicate the shared catalog
(cid:73) This has some consequences:
(cid:73) The catalog might think that a database called X is around
but in fact files are missing.
(cid:73) This is totally desirable
Hans-Ju¨rgenSch¨onig
www.postgresql-support.de
Catalog issues
(cid:73) There is no reasonably simple way to filter the content of the
shared catalog (skip rows or so).
(cid:73) It is hardly possible to add semantics to the filtering
(cid:73) But, this should be fine for most users
(cid:73) If you want to access a missing element, you will simply get
an error (missing file, etc.).
Hans-Ju¨rgenSch¨onig
www.postgresql-support.de
Replication protocol
Hans-Ju¨rgenSch¨onig
www.postgresql-support.de
Streaming replication
(cid:73) Replication connections use the same wire protocol as regular
client connections.
(cid:73) However they are serviced by special backend processes called
walsenders
(cid:73) Walsenders are started by including “replication=true” in the
startup packet.
(cid:73) Replication connections support different commands from a
regular backend.
Hans-Ju¨rgenSch¨onig
www.postgresql-support.de
Starting up replication 1/2
(cid:73) When a slave connects it first executes IDENTIFY SYSTEM
postgres=# IDENTIFY_SYSTEM;
systemid | timeline | xlogpos | dbname
---------------------+----------+-----------+--------
6069865756165247251 | 2 | 0/3B7E910 |
(cid:73) Then any necessary timeline history files are fetched:
postgres=# TIMELINE_HISTORY 2;
filename | content
------------------+----------------------------------
00000002.history | 1 0/3000090 no recovery
target specified+
|
Hans-Ju¨rgenSch¨onig
www.postgresql-support.de
Starting up replication 2/2
(cid:73) Streaming of writeahead log is started by executing:
START_REPLICATION [SLOT slot_name] [PHYSICAL] XXX/XXX
[TIMELINE tli]
(cid:73) START REPLICATION switches the connection to a
bidirectional COPY mode.
Hans-Ju¨rgenSch¨onig
www.postgresql-support.de
Replication messages
(cid:73) Replication messages are embedded in protocol level copy
messages. 4 types of messages:
(cid:73) XLogData (server -> client)
(cid:73) Keepalive message (server -> client)
(cid:73) Standby status update (client -> server)
(cid:73) Hot Standby feedback (client -> server)
(cid:73) To end replication either end can close the copying with a
CopyDone protocol message.
(cid:73) If the WAL stream was from an old timeline the server sends a
result set with the next timeline ID and start position upon
completion.
Hans-Ju¨rgenSch¨onig
www.postgresql-support.de
Other replication commands
(cid:73) Other replication commands:
(cid:73) START REPLICATION ... LOGICAL ...
(cid:73) CREATE REPLICATION SLOT
(cid:73) DROP REPLICATION SLOT
(cid:73) BASE BACKUP
(cid:73) Not supported by walbouncer yet.
Hans-Ju¨rgenSch¨onig
www.postgresql-support.de
Software design
(cid:73) Client connects to the WAL bouncer instead of the master.
(cid:73) WAL bouncer forks, connects to the master and streams xlog
to the client.
(cid:73) A this point the WAL proxy does not buffer stuff.
(cid:73) One connection to the master per client.
Hans-Ju¨rgenSch¨onig
www.postgresql-support.de
Software design - filtering
(cid:73) WAL stream is split into records.
(cid:73) Splitting works as a state machine consuming input and
immediately forwarding it. We only buffer when we need to
wait for a RelFileNode to decide whether we need to filter.
(cid:73) Based on record type we extract the RelFileNode from the
WAL record and decide if we want to filter it out.
(cid:73) If we want to filter we replace the record with a XLOG NOOP
that has the same total length.
Hans-Ju¨rgenSch¨onig
www.postgresql-support.de
Synchronizing record decoding
(cid:73) Starting streaming is hard. Client may request streaming from
the middle of a record.
(cid:73) We have a state machine for synchronization.
(cid:73) Determine if we are in a continuation record from WAL page
header.
(cid:73) If we are, stream data until we have buffered the next record
header.
(cid:73) From next record header we read the previous record link, then
restart decoding from that position.
(cid:73) Once we hit the requested position stream the filtered data out
to client.
Hans-Ju¨rgenSch¨onig
www.postgresql-support.de
Using WAL bouncer
Hans-Ju¨rgenSch¨onig
www.postgresql-support.de
Streaming
(cid:73) At this point we did not want to take the complexity of
implementing buffering.
(cid:73) Getting right what we got is already an important step
Hans-Ju¨rgenSch¨onig
www.postgresql-support.de
How to set things up
(cid:73) First f all an initial base backup is needed
(cid:73) The easiest thing here is rsync
(cid:73) Skip all directories in “base”, which do not belong to your
desired setup
(cid:73) pg database is needed to figure out, what to skip.
Hans-Ju¨rgenSch¨onig
www.postgresql-support.de
Start streaming
(cid:73) Once you got the initial copy, setup streaming replication just
as if you had a “normal” master.
(cid:73) Use the address of the walbouncer in your primary conninfo
(cid:73) You will not notice any difference during replication
Hans-Ju¨rgenSch¨onig
www.postgresql-support.de
Important aspects
(cid:73) If you use walbouncer use the usual streaming replication
precautions
(cid:73) enough wal keep segments or use
(cid:73) take care of conflicts (hot standby feedback)
(cid:73) etc.
(cid:73) You cannot promote a slave that has filtered data to master.
Hans-Ju¨rgenSch¨onig
www.postgresql-support.de
Adding databases
(cid:73) List of database OIDs to filter out is only fetched at
walbouncer backend startup.
(cid:73) Disconnect any streaming slaves and reconfigure filtering while
you are creating the database.
(cid:73) If you try to do it online you the slaves will not know to filter
the new database.
Hans-Ju¨rgenSch¨onig
www.postgresql-support.de
Dropping databases
(cid:73) Have all slaves that want to filter out the dropped database
actively streaming before you execute the drop.
(cid:73) Otherwise the slaves will not know to skip the drop record and
xlog replay will fail with an error.
Hans-Ju¨rgenSch¨onig
www.postgresql-support.de
Can we filter on individual tables
(cid:73) For filtering individual tables you can use tablespace filtering
functionality.
(cid:73) Same caveats apply for adding-removing tablespaces as for
databases.
(cid:73) You can safely add/remove tables in filtered tablespaces and
even move tables between filtered/non-filtered tablespaces.
Hans-Ju¨rgenSch¨onig
www.postgresql-support.de
Bonus feature
(cid:73) You can use walbouncer to switch the master server without
restarting the slave.
Hans-Ju¨rgenSch¨onig
www.postgresql-support.de
Limitations
(cid:73) Currently PostgreSQL 9.4 only.
(cid:73) No SSL support yet.
Hans-Ju¨rgenSch¨onig
www.postgresql-support.de
Simple configuration
Hans-Ju¨rgenSch¨onig
www.postgresql-support.de
A sample config file (1)
listen_port: 5433
master:
host: localhost
port: 5432
configurations:
- slave1:
match:
application_name: slave1
filter:
include_tablespaces: [spc_slave1]
exclude_databases: [test]
Hans-Ju¨rgenSch¨onig
www.postgresql-support.de
A sample config file (2)
- slave2:
match:
application_name: slave2
filter:
include_tablespaces: [spc_slave2]
Hans-Ju¨rgenSch¨onig
www.postgresql-support.de
application name
(cid:73) The application name is needed to support synchronous
replication as well as better monitoring
Hans-Ju¨rgenSch¨onig
www.postgresql-support.de
include tablespaces / exclude tablespaces
(cid:73) A good option to exclude entire groups of databases
(cid:73) In a perverted way this can be used to filter on tables
(cid:73) No need to mention that you should not
Hans-Ju¨rgenSch¨onig
www.postgresql-support.de
Finally
Hans-Ju¨rgenSch¨onig
www.postgresql-support.de
Where can we download the stuff?
(cid:73) For download and more information visit::
www.postgresql-support.de/walbouncer/
Hans-Ju¨rgenSch¨onig
www.postgresql-support.de
Thank you for your attention
Any questions?
Hans-Ju¨rgenSch¨onig
www.postgresql-support.de
Contact
Cybertec Sch¨onig & Sch¨onig GmbH
Gr¨ohrmu¨hlgasse 26
A-2700 Wiener Neustadt
www.postgresql-support.de
Hans-Ju¨rgenSch¨onig
www.postgresql-support.de