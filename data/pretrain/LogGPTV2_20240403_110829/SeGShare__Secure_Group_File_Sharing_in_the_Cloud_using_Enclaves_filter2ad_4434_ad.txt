information in the client certiﬁcate to allocate the request
to a user u, and processes requests as outlined in Algo. 1.
During processing, it uses internal operations (see Table IV),
which are provided by the access control and ﬁle manager
components described in the following sections.
SeGShare achieves separation of authentication and autho-
rization (F8) by allocating u based on the identity information
in the client certiﬁcate and using u for authorization decisions.
Furthermore, the combination of operations outlined in Algo. 1
allow a user to share a ﬁle or directory with individual users
(using their default groups) and groups (F1, P2), dynamically
change permissions and group memberships (F2, F3), set
separate read and write permissions (F4). None of the listed
operations requires any interaction with other users (F6).
Updates of ﬁle and group ownerships are not listed, but the
operations only require a straightforward update of rF O and
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 11:33:52 UTC from IEEE Xplore.  Restrictions apply. 
481
Algorithm 1 SeGShare’s external requests.
(cid:2) User u wants to create a directory at path1
function put fD(u, path1);
path2 = parent(path1)
if isDir(path1) and !exists f(path1) and exists f(
path2) then
if path2 == ”/” or auth f(u, pw, toFile(path2)) then
updateRel(rF O, rF O ∪ (gu, toFile(path1)))
write(path1,””)
con ← PAE Dec(SKf2 , read(path2))
write(path2, PAE Enc(SKf2 , IV , con + path1))
(cid:2) User u wants to create or update a ﬁle at path1 with content
con1
function put fC(u, path1, con1)
path2 = parent(path1)
if !isDir(path1) and ((path2 == ”/”) or (exists f(path2)
and auth f(u, pw, toFile(path2))) or (exists f(path1) and
auth f(u, pw, toFile(path1)))) then
if !exists f(path1) then
con2 ← PAE Dec(SKf2 , read(path2))
write(path2, PAE Enc(SKf2 , IV , con2 + path1))
updateRel(rF O, rF O ∪ (gu, toFile(path1)))
write(path1, PAE Enc(SKf1 , IV , con1))
TABLE IV: SeGShare’s handling of internal operations.
Operation
f ← toFile(path)
path2 ← parent(path1)
Description
Get ﬁle f corresponding to path path
For path path1, get parent directory’s
path path2
write(path, con)
Create or update ﬁle at path path
with content con
con ← read(path)
Read ﬁle at path path
{0, 1} ← exists f(path) Check if ﬁle with path path exists,
i.e., ∃f ∈ F S : toFile(path) = f
Check if group g exists, i.e., ∃g2 ∈
{0, 1} ← exists g(g)
G : g == g2
{0, 1} ← isDir(path)
Check if ﬁle with path path is a
directory i.e., ∃f ∈ FD : toFile(
path) ==f
c ← PAE Enc(SK, IV , v) Encrypt value v under the initializa-
tion vector IV and key SK with PAE
v ← PAE Dec(SK, c)
Decrypt the ciphertext c under key
SK with PAE
{0, 1} ← auth f(u, p, f )
Check if user u has permission p
on ﬁle f, i.e., ∃g : (u, g) ∈ rG ∧
((p, g, f ) ∈ rP ∨ (g, f ) ∈ rF O)
Check if user u is allowed to change
group g2, i.e., ∃g1 : (u, g1) ∈ rG ∧
(g1, g2) ∈ rGO
Update relation r1 to r2
{0, 1} ← auth g(u, g2)
updateRel(r1, r2)
rGO. This also allows to set multiple owners (F7). Note that
SeGShare is optimized for dynamic groups, but it is inefﬁcient
to remove a complete group as the member list of each user
has to be checked and possibly modiﬁed.
Access Control. The access control component is respon-
sible for relation updates (internal operation updateRel)
482
(cid:2) User u wants to get ﬁle content if toFile(path) =f ∈ FC
and directory listing if toFile(path) = f ∈ FD
function get(u, path)
if auth f(u, pr, toFile(path)) then
return PAE Dec(SKf , read(path))
(cid:2) User u wants to set permission p for group g for ﬁle at path
function set p(u, path, g, p)
if auth f(u,””, toFile(path)) then
updateRel(rP , rP ∪ (p, g, f ))
(cid:2) User u1 wants to add user u2 to group g
function add u(u1, u2, g)
if !exists g(g) then
updateRel(G, G ∪ g)
updateRel(rG, rG ∪ (u1, g))
updateRel(g, g ∪ u2)
if auth g(u1, g) then
(cid:2) User u1 wants to remove user u2 from group g
function rmv u(u1, u2, g)
if auth g(u1, g) then
updateRel(g, g \ u2)
and access control checks (internal operations auth f and
auth g). For both tasks, it uses the ﬁle manager components
to read and write the required relations. This component is
key to enable dynamic groups without re-encryption.
File Managers. The trusted and untrusted ﬁle manager
components handle all ﬁles stored in untrusted memory. The
trusted ﬁle manager component encrypts/decrypts the content
of all ﬁles that should be written/read with PAE Enc/PAE
Dec using a unique ﬁle key SKf per ﬁle. The ﬁle key is
derived from a root key SKr, which the trusted ﬁle manager
generates and seals (see Section II-A) on the ﬁrst enclave start
and unseals on subsequent enclave starts. All encrypted data is
passed/received to/from the untrusted ﬁle manager component,
which handles the actual memory access (internal operations
read and write).
The ﬁle managers handle the following ﬁle types:
1) Each f ∈ F S is stored as a regular ﬁle.
2) For each f ∈ F S, an ACL ﬁle is stored under f’s path
appended with a sufﬁx, e.g., “.acl”. This ACL stores f’s
access permissions (rP ) and ﬁle owners (rF O).
3) One group list ﬁle stores all present groups (G)
4) For each user u ∈ U, a member list ﬁle stores u’s group
memberships (rG) and also keeps track of u’s group
ownerships (rGO).
The ﬁrst two types are stored in the so-called content store,
the latter two in the group store. The ﬁles in the content store
are stored in dictionaries according to the structure given by
their paths. A root directory ﬁle stores a list of ﬁrst level
children. The ﬁles in the group store are stored ﬂat and a root
directory ﬁle stores a list of all contained ﬁles. This separation
in two stores adds an extra layer of security and improves the
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 11:33:52 UTC from IEEE Xplore.  Restrictions apply. 
performance as ﬁle, directory, and permission operations are
independent of group operations.
The content of ACLs, member lists, and the group list
are kept sorted. Thus, a permission update only requires one
decryption of the corresponding ACL, a logarithmic search,
one insert or update operation, and one encryption of the
ACL. Membership updates require the same operations on one
member list ﬁle and (in some cases) on the group list ﬁle.
Thus, permission and membership revocations do not require
re-encryptions of content and directory ﬁles (P3), and they
are performed immediately (S4). Each f ∈ F S is stored in
one encrypted ﬁle and f is accompanied by one encrypted
ACL ﬁle. Thus, the number of ciphertexts is constant for
each content and directory ﬁle (P4). Obviously,
the same
encrypted content or directory ﬁle can be accessed by different
groups (P5). The conﬁdentiality and integrity of content ﬁles,
permissions, existing groups, and group memberships are
protected by encrypting the corresponding ﬁles with PAE (S1,
S2).
V. SEGSHARE EXTENSIONS
In this chapter, we ﬁrst present extensions of SeGShare that
fulﬁll the remaining objectives: data deduplication, inherited
permissions, ﬁlenames and directory structure hiding, individ-
ual ﬁle rollback protection, and ﬁle system rollback protection.
We also present SeGShare replication and ﬁle system backups.
The combination of extensions is only discussed if it is not
straightforward.
A. Data Deduplication
The goal of data deduplication is to save storage cost by
only storing a single copy of redundant objects, which can ei-
ther be ﬁles [54], [55] or blocks. Blocks can be further divided
in ﬁxed-size [56] or variable-size [57] blocks. Deduplication
can be done client-side, i.e., users ask the server if a ﬁle is
already present and only upload the whole ﬁle if necessary, or
server-side, i.e., users always upload and the server performs
deduplication.
SeGShare is compatible with all mentioned deduplication
alternatives. In the following, we propose a mechanism for
ﬁle- and server-based deduplication, because it does not re-
quire additional client-side processing, prevents client-side
attacks [58], [59], and has the smallest leakage of the server-
side approaches [60].
Data deduplication is enabled in SeGShare (F9) by introduc-
ing a third store, denoted as deduplication store, and modifying
the trusted ﬁle manager. For each uploaded content ﬁle, the
trusted ﬁle manager performs the following steps:
• Temporarily store the ﬁle in the deduplication store under
a unique random name.
• Calculate an HMAC over the ﬁle’s content using the root
key SKr.
• Convert the HMAC to a hex string hName.
• If no ﬁle with the name hName is present in the dedu-
plication store, rename the temporary ﬁle to hName.
Otherwise, remove the temporary ﬁle.
• Add a content ﬁle to the content store as presented in
Section IV-B with the slight modiﬁcation that the content
ﬁle is not ﬁlled with the actual ﬁle content but with
hName (comparable to symbolic links in ﬁle systems).
For each request to a content ﬁle, the trusted ﬁle manager
accesses the ﬁle in the content store and follows the indirection
to the ﬁle in the deduplication store.
Our server-side deduplication is different to any scheme
presented in related work: plaintext data is deduplicated and
only a single copy is encrypted. This is possible because the
enclave has access to the ﬁle keys. Notably, the scheme also
supports deduplication of data belonging to different groups
and immediate membership revocation without re-encryption.
B. Inherited Permissions
Permissions for any ﬁle f ∈ F S can be inherited from a par-
ent directory (F10) with the following extension of SeGShare.
The user application and request handler are extended with a
new request to add/remove f to/from the inherit relation (rI).
The access control component only allows the ﬁle owner to ex-
ecute such requests, and the trusted ﬁle manager adds/removes
an inherit ﬂag to/from f’s ACL ﬁle. If the inherit ﬂag is not
set in f’s ACL ﬁle, access control checks for f are performed
by auth f as deﬁned in Table IV. Otherwise, a permission p1
deﬁned for a group g on f has precedence over a permission
p2 deﬁned for g on f’s parent. In other words, if fp is f’s
parent and the inherit ﬂag is set, auth f uses the following
predicate: ∃g : (u, g) ∈ rG ∧ ((p, g, f ) ∈ rP ∨ ((p, g, f ) (cid:6)∈
rP ∧ (p, g, fp) ∈ rP ) ∨ (g, f ) ∈ rF O).
C. Hide Filenames and Directory Structure
To protect the conﬁdentiality of the ﬁle system structure
(S1),
this extension hides all ﬁlenames and the directory
structure. A change of the trusted ﬁle manager is sufﬁcient:
before passing a path to the untrusted ﬁle manager, it calculates
the path’s HMAC using SKr and converts the HMAC to its
hexadecimal representation. As a result, all ﬁles are stored
in a ﬂat directory structure at a pseudorandom location. Note
that SeGShare stores the original path in the directory ﬁles.
Therefore, directory listing is still possible.
D. Rollback Protection for Individual Files
The trusted ﬁle manager encrypts the content of all ﬁles with
PAE, and thus guarantees conﬁdentiality and integrity on each
ﬁle individually. However, an attacker can perform a rollback
attack on each encrypted ﬁle, i.e., the attacker uses an outdated
version of an encrypted ﬁle to replace the current version. Not
preventing such a rollback can have severe consequences, e.g.,
an old member list could enable a user to regain access to ﬁles
for which the permissions were previously revoked.
This extension uses a Merkle hash tree [61] variant
to
prevent rollbacks of individual ﬁles (S5) and to protect the
integrity of the ﬁle system structure (S2). For brevity, we only
describe how to protect ﬁles in the content store, but protecting
the group store (and deduplication store) is a straightforward
adaption. Each content ﬁle, ACL, and empty directory ﬁle is
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 11:33:52 UTC from IEEE Xplore.  Restrictions apply. 
483
represented by a leaf node of the Merkle tree, and each other
directory ﬁle is represented by an inner node. Each leaf node
stores a hash that is a combination of hashes over the ﬁle path
and the ﬁle content. Each inner node stores a hash that is a
combination of the hash of all children (content ﬁles, ACLs
and directory ﬁles), a hash over the directory path and a hash
over the directory content (children list).
Before encryption, the trusted ﬁle manager prepends the
content of content ﬁles, ACLs, and directory ﬁles with the
combined hashes, and after decryption, reads the hashes from
there. As each ﬁle stores its own hash, we denote each
ﬁle representing a leaf node, inner node, sibling node, and
child node as leaf ﬁle, inner ﬁle, sibling ﬁle, and child ﬁle
respectively. The tree’s root hash is stored in the root directory
ﬁle, which we denote as root ﬁle in this section. Note that the
individual ﬁle rollback protection does not protect a rollback
of the root ﬁle, which we consider a rollback of the whole ﬁle
system for which a mitigation is presented in the next section.
Fig. 2 shows a hash tree for an example ﬁle system.
/
D/, D.acl
H0=H(/)    
H(D/,D.acl)    H1    H2
/D/
F, F.acl
/D.acl
P1
H1=H(/D/)   
H(F,F.acl)    H11    H12