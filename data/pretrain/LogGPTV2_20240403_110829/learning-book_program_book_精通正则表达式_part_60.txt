java.util.regex.Matcher
java.util.regex.MatchResult
java.util.regex.PatternSyntaxException
个类。简单地说，Pattern对象就是编译好的正则表达式，可以应用于任意多个字符串，
Matcher对象则对应单独的实例，表示将正则表达式应用到某个具体的目标字符串上。
Java1.5新提供的MatchResult，它封装了成功匹配的数据。匹配数据可以在下一次匹配尝
试之前从Matcher本身获得，也可以提取出来作为MatchResult保存。
如果匹配尝试所使用的正则表达式格式不正确（例如，[oops]的语法就不正确，就会抛出
PatternSyntaxException 异常。这是一个uncheckedexception，继承自java.lang.
IllegalAgumentException,
下面是一个完整的、详细的程序，示范了简单的匹配：
Du:blic class SinpleRegexTest
pub.ic static void nain(String[] args)
String myText ="this is my 1st test string*;
+M\+p\//+M\\+p\\.=xabyAubutS
java.util.regex.Pattern p - java.util.regex.Pattern.compile(myRegex);
java.util.regex.Matcher m =p.matcher(myText);
if (m.find())(
String matchedText = m.group();
int matchedFrom = m.start();
int matchedTo=m.end();
System.out.println(*matched["+matchedText+*]
"from*+matchedFrom+
"to"+matchedTo+."."）；
)else(
System.out.println(*didn't match*);
结果是‘matched[1st]from12to15.。在本章的所有例子中，我都用斜体表示变量
名。如果这样声明，可以省略粗体部分：
import java.util.regex.*;
它应该放在程序的头部，和第3章的例子（95）一样。
---
## Page 398
372
第8章：Java
这是标准的做法，而且程序更容易管理。本章的其他程序省略了import语句。
java.util.regex使用的对象模型与其他大多数语言不同。请注意，前面例子中的Matcher
对象m，是通过把Pattern对象和目标字符串联系起来得到的，它用来进行实际的匹配尝
试（使用find方法），以及查询结果（使用group、start和end方法）。
这办法初看起来可能有点古怪，但你很快就能适应了。
ThePattern.compile()Factory
The Pattern.compile() Foctory
正则表达式的Pattern对象是通过Pattern.compile生成的。第一个参数是代表正则表达
式的字符串（?101）。368页表格8-3中的选项可以作为第二个参数。下面的代码从字符串
myRegex生成一个paltlern，进行不区分大小写的匹配：
Pattern pat = Pattern.compile(myRegex,
Pattern.CASE_INSENSITIVE 1Pattern.UNICODE_CASE);
预定义的pattem常量用来指定编译选项（例如Pattern.CASE_INSENSITIVE)，这可能有
点笨拙（注2），所以我会使用正则表达式内部的模式修饰符（110)。包括378页的（？x），
399页的（?s）和多个（？i）。
不过，预定义常量固然复杂，但这种“笨办法（unwieldy）”能够降低新手阅读代码的难度。
如果没有页面宽度限制，我们可以这样写第384页的Pattern.compile的第二个参数：
Pattern.UNIX_LINES 1 Pattern.CASE_INSENSITIVE
而不是在正则表达式开头使用不那么清楚的（?id）。
从名字可以看出，这一步把正则表达式解析并编译为内部形式。第6章对此有详细讲解
（241），简单地说，在字符串内应用表达式的整个过程中，编译pattern通常是最耗时间
的。所以要把编译独立出来，作为第一步一一这样就可以先期将正则表达式编译好，重复
使用。
当然，如果正则表达式编译之后只需要使用一次，编译时机就不是个问题，但如果需要多
次应用（例如应用到读人文件的每一行），预编译Pattern对象就很有价值。
注2：尤其是在页面宽度固定的书籍中安排代码的时候一一我对此深有体会。
---
## Page 399
Matcher对象
373
调用Patern.compile可能抛出两种类型的异常：如果正则表达式不合规则，抛出Pattern
SyntaxException，选项不合规则，抛出IllegalArgumentException。
Pattern的matcher方法
Patter's matchher mcthod
下一节（394）我们会看到，Pattern提供了某些简便的方法，但是大多数情况下，我们
只需要一个方法完成所有工作：matcher。它接受一个参数：需要检索的字符串（注3)。
此时并没有确切应用这个正则表达式，而只是为将pattern应用到特定的字符串做准备。
matcher方法返回一个Matcher对象。
Matcher对象
The Matcher Object
把正则表达式和目标字符串联系起来，生成Matcher对象之后，就可以以多种方式将其应用
到目标字符串中，并查询应用的结果。例如，对于给定的Matcher对象m，我们可以用m.find（）
来把m的表达式应用到目标字符串中，返回一个Boolean值，表示是否能找到匹配。如果能
找到，m.group（）返回实际匹配的字符串。
在讲解Matcher的各种方法之前，不妨先了解了解它保存的各种信息。为了方便阅读，下面
的清单都提供了对应的详细讲解部分的页码。第一张清单中的元素是程序员能够设置和更
改的，而第二张清单中的元素是只读的。
程序员能够设置和修改的是：
Pattern对象，由程序员在创建Matcher时指定。可以通过usePattern（）方法更改
（393）。当前所用的Pattern可以用pattern（）方法获得。
·目标字符串（或其他CharSequence对象），由程序员在创建Matcher时指定。可以通
过reset（text）方法更改（392）。
目标字符串的“检索范围（region）”（394）。默认情况下，检索范围就是整个目标字
符串，但是程序员可以通过region方法，将其修改为目标字符串的某一段。这样某
些（而不是全部）匹配操作就只能在某个区域内进行。
注3：享实上，java.util.regex是非常方便的，因为“string”参数可以是任何实现Char-
Sequence楼口的对象（String、StringBuffer、StringBuilder，以及CharBuffer
都可以）。
---
## Page 400
374
第8章：Java
当前检索范围的起始和结束偏移值可以通过regionStart和regionEnd方法获得
（386）。reset方法（392）会把检索范围重新设置为整个目标字符串，任何在内
部调用reset方法的方法也是一样。
anchoringbounds标志位。如果检索范围不等于整个目标字符串，程序员可以设定，是
界元字符（\A$\z\z）。
默认情况下，这个标志位为true，但也可能改变，可以通过useAnchoringBounds
（388）和hasAnchoringBounds方法来修改和查询。Reset方法不会修改标志位。
transparentbounds标志位。如果检索范围是整个目标字符串中的一段文本，设置为true
（））
范围的边界，检查外部的文本。
默认情况下，这个标志位为false，但也可能改变，可以通过useTransparentBounds
（388）和hasTran-sparentBounds方法来修改和查询。Reset方法不会修改标志
位。
下面的只读数据保存在matcher内部：
·
当前pattern的捕获型括号的数目可以通过groupCount（377）方法查询。
·
作（通过find方法375）。
目标字符串中的appendpointer，在查找-替换操作中（380），复制未匹配的文本部分
时使用。
表示到达字符串结尾的上一次匹配尝试是否成功的标志位。可以通过hitEnd方法
（390）获得这个标志位的值。
matchresult。如果最近一次匹配尝试成功，Java会将各种数据收集起来，合称为match
result（376）。包括匹配文本的范围（通过group（）方法），匹配文本在目标字符串中
的起始和结束偏移值（通过start（）和end（）方法），以及每一组捕获型括号对应的信
息（通过group(num）、start(num）和end（num）方法）。
match-result 数据封装在MatchResult对象中，通过toMatchResult方法获得。
MatchResult方法有自己的group、start和end方法（377)。
---
## Page 401
Matcher对象
375
一个标志位，表明更长的目标文本是否会导致匹配失败（匹配成功之后才可用）。如果
边界元字符影响了匹配结果的生成，则此值为true。可以通过requireEnd方法查看它
的值（390）。
上面列出的内容很多，但是如果按照功能分别讲解，便很容易掌握。这正是下面几节的内
容。把这一章作为参考手册时，本章开头（366）的列表会很有用。
应用正则表达式
Applying the Regex
把matcher的正则表达式应用到目标文本时，主要会用到Matcher的这些方法：
ixoiean find()
此方法在目标字符串的当前检索范围（384）中应用Matcher的正则表达式，返回的
Boolean值表示是否能找到匹配。如果多次调用，则每次都在上次的匹配位置之后尝试
新的匹配。没有给定参数的find只使用当前的检索范围（384）。
下面是简单示例：
St.ring regex = *\w+* ;/ /lw+)
String text = *Mastering Regular Expressions*;
Mxtcher m = Pattern.corpile (regex) .matcner (text) :
if (m.find())
（[.+（)dno+]ue）uuxdnows
结果是：
match [Mastring]
如果这样写：
while (m.find())
结果就是：
match [Mastering]
match [Regular]
match [Expressions]
ixoolean find(int.offset)
如果指定了整型参数，匹配尝试会从距离目标字符串开头ofset个字符的位置开始。如
果ofser为负数或超出了目标字符串的长度，会抛出IndexOutOfBoundsException异
常。
---
## Page 402
376
第8章：Java
会在内部调用reset方法392）。
(()..i!:matches()
此方法返回的Boolean值表示matcher的正则表达式能否完全匹配目标字符串中当前检
索范围的那段文本。也就是说，如果匹配成功，匹配的文本必须从检索范围的开头开
始，到检索范围的结尾结束（默认情况就是整个目标字符串）。如果检索范围设置为默
认的“所有文本”，matches比使用\A（？：)\zi要简单。
不过，如果当前检索范围不等于默认情况（384），使用matches可以在不受anchoring-
bounds标志位（388）影响的情况下检查整个检索范围中的文本。
举例来说，如果使用CharBuffer来保存程序中用户输人的文本，而检索范围设定为
用户用鼠标选定的部分。如果用户点击选区的部分，可以用m.usePattern（urlPattern），
matches（)来检查选定部分是否为URL（如果是，则进行相应的处理）。
String对象也支持matches方法：
"1234*.matches("\\d+")://true
"123!*.matches("\\d+*);// false
.r:car:lookingAt()
此方法返回的Boolean值表示Matches的正则表达式能否在当前目标字符串的当前检
索范围中找到匹配。它类似于matches方法，但不要求检索范围中的整段文本都能匹
配。
查询匹配结果
Querying MatchResilts
下面列出的Matcher方法返回了成功匹配的信息。如果正则表达式还未应用过，或者匹配尝
试不成功，它们会抛出IllegalStateException。接收num参数（对应一组捕获型括号）
的方法，如果给定的num非法，会抛出IndexOutOfBoundsException。
---
## Page 403
Matcher对象
377
请注意start和end方法，它们返回的偏移值不受检索范围的影响-一偏移值从整个目标
字符串的开头开始计算，而不是检索范围的开头。
后面还给出了一个例子，讲解其中大部分方法的使用。
group()
返回前一次应用正则表达式的匹配文本。
groupCount()
返回正则表达式中与Matcher关联的捕获型括号的数目。在group、start和end方
法中可以使用小于此数目的数字作为numth参数，下文介绍（注4）。
i:iygropu(.num)
返回编号为num的捕获型括号匹配的内容，如果对应的捕获型括号没有参与匹配，则
返回null。如果num"为0，表示返回整个匹配的内容，group（0）就等于group（）。
!.start（:t.num)
此方法返回编号为num的捕获型括号所匹配文本的起点在目标字符串中的绝对偏移
值一一即从目标字符串起始位置开始计算的偏移值。如果捕获型括号没有参与匹配，
则返回-1。
!start()
此方法返回整个匹配起点的绝对偏移值，start（）就等于start（o）。
tend（ir:num)
此方法返回编号为num”的捕获型括号所匹配文本的终点在目标字符串中的绝对偏移
则返回-1。
::t, end()
次方法返回整个匹配的终点的绝对偏移值，end（）就等于end（0）。
MatcneResuit toMatchResult()
此方法从Java1.5.0开始提供，返回的MatchResult对象封装了当前匹配的信息。它
和Matcher类一样，也包含上面列出的group、start、end和groupCount方法。
如果前一次匹配不成功、或者Matcher还没有进行匹配操作，调用toMatcheResult
会抛出IllegalStateException。
注4：groupCount方法任何时候都可调用，而这里列出的其他方法必须在匹配尝试成功之后才
可调用。
---
## Page 404
378
第8章：Java
示例
下面的例子示范了若干方法的使用。给定一个URL字符串，这段代码会找出URL的协议
名（‘http’或是‘https'）、主机名，以及可能出现的端口号：
String url=*http://regex.info/blog*;
（（+p）：）（+[：/1）//:（sd）（x）。=xbus
Matcher m = Pattern.compile(regex).matcher (url);
i f (m. find())
System.out.print (
"Overal1[*+ m.group()
+"]"+
(from*