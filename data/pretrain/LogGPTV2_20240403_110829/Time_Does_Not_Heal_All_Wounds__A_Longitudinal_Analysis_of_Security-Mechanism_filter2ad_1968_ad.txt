### Target Version and Vulnerabilities

The target version, as specified by developers in their manifest files, is often an older Android version (prior to 5.1). Consequently, these browsers are more vulnerable than what is depicted in Figure 9.

### Common Vulnerabilities

Figure 9 also highlights that 16 out of the 20 evaluated browsers do not support a specific subset of the X-Frame-Options anti-clickjacking mechanism. Specifically, most browsers lack support for the ALLOW-FROM directive, making websites that use it susceptible to clickjacking attacks. This vulnerability is further discussed in Section VI.

Additionally, our tests revealed that the Opera Mini browser, which is the fifth most popular browser with over 100 million downloads, does not support X-Frame-Options at all in its High Data Savings mode. This means that unless a website uses the frame-ancestors Content Security Policy (CSP) directive, it remains vulnerable to clickjacking attacks when rendered through this browser.

### UC Mini Browser: An Outlier

Among the most recent versions of the evaluated browsers, UC mini (com.uc.browser.en) stands out as an outlier. It exhibits vulnerabilities across almost every security mechanism category, regardless of the Android version on which it is installed. Our investigation of older versions of UC mini revealed the same vulnerabilities. UC mini is a proxy-based browser that uses dedicated remote servers to fetch and process web pages, such as downscaling large images, before sending them to mobile devices. Therefore, even though we have older versions of the UC mini browser, we cannot determine how their remote servers processed web pages in previous years. Given the significant number of vulnerabilities, it is unlikely that prior versions of their server-side code supported more mechanisms than they do now.

### Detailed Vulnerability Analysis

Table V provides detailed information on the vulnerabilities present in the most recent versions of the evaluated browsers, tested on Android 7.1. The table differentiates between a lack of support (left column) and implementation bugs (right column).

#### Lack of Support
- **Content Security Policy (CSP):** Despite W3C recommending CSP level 2 as early as 2014, HTC Sense (com.htc.sense.browser) still does not support it. This non-adoption invalidates website policies aimed at preventing XSS and clickjacking attacks.
- **SameSite Cookies:** Two browser families do not support SameSite cookies, making users potentially vulnerable to Cross-Site Request Forgery (CSRF) attacks.
- **Referrer-Policy:** Out of the 20 evaluated browser families, 15 do not fully support the Referrer-Policy. For example, UC Mobile (com.UCMobile.intl) partially supports it but lacks important values like same-origin, strict-origin, and strict-origin-when-cross-origin.
- **HTTP Strict-Transport-Security (HSTS):** The most recent version of UC mini (com.uc.browser.en) does not support HSTS, along with X-Content-Type-Options and iframe sandboxing.

#### Implementation Bugs
- **CSP Directives:** We discovered vulnerabilities that allowed loading content from origins not listed in the Content Security Policy.
- **SameSite Cookies:** Partial support and implementation errors allowed access to HttpOnly cookies via JavaScript.
- **X-Frame-Options:** UC mini (com.uc.browser.en) has a poor implementation of the ALLOW-FROM directive, allowing untrusted subdomains to frame the website.

### Case Studies

#### A. Anti-clickjacking Mechanisms

X-Frame-Options is a well-established security mechanism for preventing clickjacking attacks. However, most browsers, including Google Chrome and those based on WebView, do not fully support it, particularly the ALLOW-FROM directive. Our experiments (Section V) show that 231 out of the 10,752 Alexa top 50K websites that use X-Frame-Options utilize the ALLOW-FROM value, which is recognized by Firefox but disregarded by Chrome and other mobile browsers. Of these, 175 websites do not use the frame-ancestors CSP directive and are thus vulnerable to clickjacking attacks. These websites include banks, government sites, and other critical services.

When both CSP's frame-ancestors and X-Frame-Options are present, conflicting framing policies can arise. We found that 15% of the tested mobile browsers (53 out of 351 APKs belonging to 9 different families) handle such conflicts incorrectly, including popular browsers like Chrome, Opera, and Yandex. Only UC mini (com.uc.browser.en) remains vulnerable in the most recent browser versions on Android 7.1.

#### B. SameSite Cookies

SameSite cookies are a recent mechanism to prevent CSRF attacks by disabling the use of cookies in a cross-origin context. Chrome was the first to support it in May 2016, but only 93 out of the Alexa top 50K websites have added the "samesite" option in their cookie headers. This disparity in adoption shows that even if major browser vendors support a new mechanism, websites may not adopt it. Websites that do use the SameSite cookie attribute, such as an Italian bank and a major online streaming platform, may not get the expected protection because many browsers, including Firefox and Adblock, do not support it. The safest option is to use both SameSite cookies and hidden nonces in forms until all browsers support this mechanism.

### Discussion

#### Summary of Findings

By testing 351 mobile browser versions from the 20 most popular Android browser families, we quantified the support for security mechanisms in their most recent versions and their evolution since 2011. We found that while most browsers support more security mechanisms over time, the rate of support varies. Many mobile browsers lack support for specific anti-clickjacking directives and SameSite cookies, leaving hundreds of popular websites vulnerable to attacks.

We used the Internet Archive to quantify the window of vulnerability from when a website requests a security mechanism until it is supported by a sufficient fraction of mobile browsers. This revealed large multi-year windows of vulnerability, indicating that mobile browser users are less secure than desktop users. We also identified browsers like Boat and Next, which have not been updated for over two years and are still used by millions of Android users. Evaluating the same browser version on different Android versions showed that users can experience vastly different levels of security. Finally, we observed that many browsers deviate from official specifications when handling conflicting policies for different security mechanisms.

#### Ethical Considerations and Vulnerability Reporting

All 138K tests were conducted locally on our own copies of the browsers running on dedicated smartphones, ensuring no real users were affected. We contacted the owners of 20 websites vulnerable to clickjacking due to the lack of X-Frame-Options support in Chrome and WebView. Most websites responded positively, with some confirming they would follow our advice to use the CSP frame-ancestors directive. We also reached out to Google about the lack of support for the X-Frame-Options Allow-From directive and were informed that they would consider adding support if we provided a large-scale measurement and patch. The developers of UC Mini acknowledged our findings and offered a bug bounty for ethical disclosure.

#### Implications

Our results clearly demonstrate that web developers cannot assume that all browsers will correctly enforce requested security mechanisms. Additionally, the same browser version can be more vulnerable on older Android devices, complicating the development of secure websites. Developers must account for both the browser and the platform on which it runs.