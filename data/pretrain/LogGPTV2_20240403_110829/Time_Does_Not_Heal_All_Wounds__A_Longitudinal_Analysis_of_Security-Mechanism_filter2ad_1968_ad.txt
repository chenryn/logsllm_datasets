the target version, as speciﬁed by developers in their manifest
ﬁles. For these browsers, the target Android version was older
than version 5.1 and therefore the browsers would be even
more vulnerable than what is shown in Figure 9.
In terms of common vulnerabilities, Figure 9 also reveals
that 16 out of the 20 browsers do not support a speciﬁc
subset of the X-Frame-Options anti-clickjacking mechanism.
Speciﬁcally, most browsers do not support the ALLOW-FROM
directive, rendering websites that utilize it vulnerable to click-
jacking attacks (we further elaborate on this vulnerability in
Section VI). Moreover, through our tests, we discovered that
the Opera Mini browser (the ﬁfth most popular browser in
Table II, with more than 100 million downloads) in its High
Data Savings mode, does not support X-Frame-Options at
all meaning that, unless a website utilizes the anti-clickjacking,
frame-ancestors CSP directive, it is vulnerable to click-
jacking attacks when rendered via this browser.
Among the most recent versions of the evaluated browsers,
UC mini (com.uc.browser.en) is an interesting outlier. It con-
tains vulnerabilities in almost every security mechanism cate-
gory regardless of the Android version on which it is installed.
We investigated older versions of the same browser and noticed
that they had the exact same vulnerabilities. Upon further
investigation, we realized that the UC mini is a proxy-based
browser which, as described in Section III-B, uses dedicated
remote servers to fetch web pages that after performing various
types of processing, such as down-scaling large images, send
the resulting page to mobile devices. Therefore, even though
we have obtained older version of UC mini browser, we cannot
know how their remote servers processed web pages in prior
years. At the same time, given that UC mini has a signiﬁcant
number of vulnerabilities across all categories, we ﬁnd it
doubtful that prior versions of their server-side code would
have supported more mechanisms than they do now.
Table V provides more details on the vulnerabilities present
in the most recent versions of evaluated browsers as tested
on Android 7.1, differentiating between a lack of support
(left) versus implementation bugs (right). If all
tests of a
given mechanism fail,
then we mark that mechanism as
not being supported by a given browser. In terms of non-
adoption, we discovered that even though CSP level 2 was
recommended by W3C as early as 2014 [46], it is still not
supported by HTC sense (com.htc.sense.browser). The non-
adoption of CSP invalidates website policies that aim to stop
the exploitation of XSS and clickjacking attacks. Similarly,
two browser families are not supporting SameSite cookies
thereby making users potentially vulnerable to Cross-Site Re-
10
NANANA5.16.07.1com.android.chromecom.UCMobile.intlorg.mozilla.firefoxcom.opera.browsercom.opera.mini.nativecom.uc.browser.enmobi.mgeek.TunnyBrowsercom.ksmobile.cbcom.yandex.browsercom.explore.web.browsercom.mx.browsercom.htc.sense.browsercom.asus.browsercom.dolphin.browser.express.webcom.baidu.browser.intercom.appsverse.photoncom.apusapps.browsercom.jiubang.browserorg.adblockplus.browsercom.boatbrowser.free025507510002550751000255075100Browser family% vulnerabilityCategory:SOPCSPCookieReferrer−PolicyX−Frame−OptionsStrict−Transport−SecurityX−Content−OptionsSandboxTABLE V: Vulnerabilities of the latest browser versions on the highest tested Android version.
Mechanism
CSP
Vulnerability
CSP level 2 and 3.
Non-adoption
# Examples
1
com.htc.sense.browser
require-sri-for.
19 com.android.chrome,
org.mozilla.ﬁrefox
upgrade-insecure-requests.
1
com.uc.browser.en
Cookie
SameSite cookies.
2
org.adblockplus.browser,
org.mozilla.ﬁrefox
Implementation bugs
# Examples
18 com.android.chrome,
com.UCMobile.intl
13 com.opera.mini.native,
com.ksmobile.cb
loading
directives
Vulnerability
Inconsistent fallback sources of
worker-src.
Allowing
of
the
worker-src resources over
an HTTP URL when the
equivalent HTTPS URL is
whitelisted.
For
some
script-src),
resources
to
example.com
the white-listed
*.example.com.
Under samesite-strict
mode, cookies are disclosed
and
via
not
samesite-lax
supported.
Scripts are allowed to access
cookies that are marked as
HttpOnly.
–
(e.g.,
allowing
from
when
is
requests
is
source
POST
load
1
com.htc.sense.browser
3
1
–
com.uc.browser.en,
com.htc.sense.browser
com.uc.browser.en
–
1
com.uc.browser.en
–
–
–
–
–
–
Referrer-Policy All directives
except no-
14 com.opera.mini.native,
strict-origin,
strict-origin-when-cross-
referrer-when-downgrade.
same-origin,
or
origin values.
All directives.
1
1
com.uc.browser.en
com.UCMobile.intl
ALLOW-FROM directive.
16 com.android.chrome,
com.opera.mini.native
com.UCMobile.intl
com.uc.browser.en
Allowing subdomains of
a
white-listed website (through
the ALLOW-FROM directive) to
frame the website.
–
X-Frame-
Options
HSTS
X-Content-
Type-Options
Sandbox
Basic mechanism and with
includeSubDomains.
nosniff for scripts.
Script execution, form sub-
mission and top-level naviga-
tion after sandboxing.
1
1
1
com.uc.browser.en
com.uc.browser.en
–
–
quest Forgery (CSRF) attacks. In terms of privacy-preserving
mechanisms,
the Referrer-Policy is mostly unsupported by
15 out of the 20 evaluated browser families. Among these
browsers, UC Mobile (com.UCMobile.intl) partially supports
the Referrer-Policy mechanism but
lacks support for im-
portant values, such as same-origin, strict-origin,
and strict-origin-when-cross-origin. For the rest
of the browsers,
the basic Referrer-
Policy value (no-referrer-when-downgrade), which
was enforced by browsers even before a dedicated referrer-
controlling mechanism was introduced. Finally,
the HTTP
Strict-Transport-Security (HSTS) header is utilized to prevent
SSL-stripping-like attacks but is not supported by the most
recent version of the UC mini (com.uc.browser.en), along with
X-Content-Type-Options and iframe sandboxing.
they merely support
it
support,
to a complete lack of
is equally
Next
important
to uncover previously unknown implementation
bugs, shown in the right column on Table V. For cer-
tain CSP directives, we discovered vulnerabilities that al-
lowed the loading of content from origins other than the
ones listed in the Content Security Policy. We also discov-
ered only partial support for SameSite cookies and imple-
mentation errors that allowed access to HttpOnly cook-
ies via JavaScript. Finally, UC mini (com.uc.browser.en) is
also vulnerable because of a poor implementation of the
ALLOW-FROM directive of X-Frame-Options. For example,
if wordpress.com deploys an X-Frame-Options header
specifying that https://wordpress.com is allowed to
the browser allows all subdomains of
frame the page,
wordpress.com to frame the website,
including poten-
tially untrusted ones, e.g. attacker.wordpress.com. As
before, our ﬁndings demonstrate that even the most recent
versions of mobile browsers executing on the most popular
Android version, are not free from issues related to their
support of popular security mechanisms.
VI. VULNERABILITY CASE STUDIES
A. Anti-clickjacking mechanisms
X-Frame-Options is an established security mechanism for
preventing clickjacking attacks (Rydstedt et al. already discuss
X-Frame-Options in their 2010 study of clickjacking [34]) and
yet most browsers still do not fully support it. Through our
experiments (Section V), we discovered that Google Chrome,
and the vast majority of other browsers which build on
WebView, treat the ALLOW-FROM directive as a wrong option,
and altogether discard the X-Frame-Options header.
11
To understand the consequences of
this decision, we
crawled the main pages of the Alexa top 50K websites and
discovered that 231 out of the 10,752 websites that make use
of the X-Frame-Options mechanism, utilize the ALLOW-FROM
value which is recognized by Firefox but disregarded by
Chrome and other mobile browsers. The majority of these web-
sites (175/231) do not utilize the frame-ancestors CSP
directive, and are therefore vulnerable to clickjacking attacks
when they are rendered through most mobile browsers. These
websites include American and Russian banks, government
websites of US, China, Brazil, and India, cloud instrumentation
services, credit-score monitoring services, adult websites, and
Spanish and Australian telecommunication companies. All of
these websites have user accounts which could be abused
through clickjacking attacks to extract personal and ﬁnancial
information. In Section VII, we describe the process of reach-
ing out to them, and our progress at the time of this writing.
An additional complication arises when both CSP’s
frame-ancestors and X-Frame-Options are present. De-
velopers may, by accident, specify a different framing policy
in the X-Frame-Options header than the one they specify in
the frame-ancestors directive. In fact, we did observe
conﬂicting framing policies among Alexa top 50K websites,
including some famous shopping and medical websites. Such
conﬂicting speciﬁcations coupled with incorrect handling by
mobile browsers may result in potential security threats.
To understand the effects of conﬂicting anti-clickjacking
policies, we tested how mobile browsers are handling such
conﬂicts. The CSP standard explicitly states that in the pres-
ence of both mechanisms, the browser should only enforce
the frame-ancestors directive and ignore the X-Frame-
Options header [47]. We discovered that 15% of the tested
mobile browsers (53 out of 351 APKs belonging to 9 different
families) show vulnerabilities in how they handle conﬂicting
policies. These vulnerable browsers include popular ones such
as Chrome, Opera and Yandex browsers. Fortunately, when
testing the most recent browser versions on Android 7.1, only
UC mini (com.uc.browser.en) remains vulnerable.
B. SameSite cookies
SameSite cookies is a recent mechanism for preventing
CSRF attacks in the browser by disabling the use of cookies
in a cross-origin context. Contrary to the X-Frame-Options
mechanism, Chrome was the very ﬁrst browser to support it,
as early as May 2016. However, looking at the Alexa top 50K
websites, only 93 of them have added the “samesite” option
in their cookie headers. This shows a strong disparity in the
adoption of different security mechanisms. Even if the biggest
browser vendors show their support for a new mechanism,
there is no guarantee that websites will adopt it by potentially
replacing their existing mechanisms (similar to the expectation
that web developers would replace their X-Frame-Options
mechanism with the CSP frame-ancestors directive).
For the websites that actually do make use of the SameSite
cookie attribute (including an Italian bank and the biggest
online streaming platform), they may not get the protection
they expect from this option since many browsers do not
support it. For example, Firefox and the Adblock browser do
not support this option in their latest versions. Similarly, none
of the WebView-based browsers like KSMobile, Explore, and
the Asus Browser support the option on devices with Android
6.0 or older. The only safe option would be to make use of
both SameSite cookies and hidden nonces in forms, until some
indeterminate time in the future, when one could assume that
all browsers support this new mechanism.
VII. DISCUSSION
A. Summary of ﬁndings
By automatically exposing 351 mobile browser versions—
belonging to the 20 most popular Android browser families—
to 395 tests, we quantiﬁed the support of security mechanisms
in their most recent versions, as well as the evolution of such
support since 2011. We discovered that, even though most
browsers support more security mechanisms over time, the rate
of support is not the same across browsers and across security
mechanisms (Section IV-A). We also discovered the lack of
support in most mobile browsers for speciﬁc anti-clickjacking
directives, leaving hundreds of popular websites utilizing them
vulnerable to attacks, as well as lack of proper support for
SameSite cookies and Referrer-Policy.
We used the Internet Archive to quantify the window of
vulnerability from when a popular website requests a security
mechanism until that mechanism is supported by a sufﬁciently-
large fraction of mobile browsers (Section IV-B). Through
that experiment, we observed that there are large multi-year
windows of vulnerability for most security mechanisms. This
signiﬁes that, with regard to the evaluated mechanisms, the
users of mobile browsers are less secure when browsing
websites than users of desktop browsers. We quantiﬁed the
number and types of security regressions (Section IV-C) and
identiﬁed browsers, such as the Boat and Next Browsers,
which have not been updated for over two years and are still
utilized by millions of Android users. Moreover, by evaluating
the same browser version on different Android versions, we
discovered that the users of the same version of the same
browser, can be experiencing vastly different levels of security
when browsing the web (Section V). Finally, we evaluated the
behavior of browsers when conﬂicting policies for different
security mechanisms are requested and observed that many
browsers are still deviating from ofﬁcial speciﬁcations (Sec-
tion VI).
B. Ethical Considerations and Vulnerability Reporting
All of the 138K tests conducted against mobile browsers
were executed locally against our own copies of these browsers
running on dedicated smartphones. As such, real users never
came into contact with our tests.
In terms of vulnerability reporting, we have already con-
tacted the owners of 20 different websites which, due to
the lack of X-Frame-Options support by Chrome and most
WebView-utilizing browsers, are currently vulnerable to click-
jacking attacks. We gave priority to government websites,
banks and credit unions, and websites that are highly ranked
according to Alexa. We received replies from most web-
sites, informing us that they have forwarded our informa-
tion to the appropriate team and we received conﬁrmation
from a US government website and a cloud-automation plat-
form that
they would follow our advice and utilize the
12
CSP frame-ancestors directive which is supported by
Chrome, WebView, and other modern browsers.
At
the same time, we reached out
this was a conscious decision back in 2012,
to Google to in-
quire about
the lack of support for the X-Frame-Options
Allow-From directive in Chrome and WebView. We were
told that
in
favor of the more robust CSP frame-ancestors directive.
Chrome developers informed us that they would be willing to
add support for it if we conducted a large-scale measurement
to quantify the number of Chrome users affected by it and
provide a patch. We also reached out to the developers of
the UC Mini browser with a detailed report of all the issues
that we uncovered through our experiments. The developers
acknowledged our ﬁndings and offered us a bug bounty for
ethically disclosing them.
C. Implications
Our results categorically demonstrate that web developers
cannot assume that just because they requested a security
mechanism through the appropriate setting of an HTTP header
or HTML markup, all browsers receiving this request are
capable of correctly enforcing it. Moreover, the fact that the
same version of a given browser can be more vulnerable when
it runs on an older Android device further complicates the
development of secure websites, as the developers now need
to account for both the browser as well as the platform on
which it executes.