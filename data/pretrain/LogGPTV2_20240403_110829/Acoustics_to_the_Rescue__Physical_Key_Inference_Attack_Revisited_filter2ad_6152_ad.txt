### 6.3.2 Pattern Comparison Performance

Recall from Section 5.4 that Keynergy aggregates two error functions, \( e_{\text{pattern}} \) and \( e_{\text{click}} \), for each cluster (i.e., Clusters 3, 4, and 5) to perform pattern comparison and achieve the final rank, \( \text{Rank}_{\text{key}} \). We evaluate the individual contributions of the six cluster-error pairs towards computing \( \text{Rank}_{\text{key}} \). Using the data collected in Section 6.3.1, we assign a contributing rank (Contrpair, ranging from 1 to 6) to each pair by comparing their resulting individual \( \text{Rank}_{\text{key}} \). For example, if the {Cluster 4 – \( e_{\text{click}} \)} pair yields the highest individual \( \text{Rank}_{\text{key}} \) for a given victim key, it is considered the most contributing and is assigned Contrpair = 1.

Figure 14 depicts the average Contrpair of each cluster-error pair, averaged over 74 input victim keys. The {Cluster 5 – \( e_{\text{click}} \)} pair yields the highest average Contrpair of 3.01, which can be attributed to the higher likelihood of missing clicks in Cluster 5, thereby helping to filter out many candidate keys in the keyspace and achieving the highest \( \text{Rank}_{\text{key}} \). Similarly, to identify the contribution of different clusters, we compute the per-cluster contributing rank (Contrcluster) by averaging the Contrpair values for both \( e_{\text{pattern}} \) and \( e_{\text{click}} \). We observe that Cluster 4 yields the highest average Contrcluster of 3.26, mainly because it achieves a good balance among the three clusters, with sufficiently unique click patterns for low \( e_{\text{pattern}} \) and a fair chance of missing clicks, which aids in filtering based on \( e_{\text{click}} \).

### 6.3.3 Video Analysis Performance

Recall from Section 5.5 that we re-implement the prior work on image-based key inference (Sneakey [35]) by extending it to a video-based inference. Our implementation demonstrates that:

1. Image-based inference performs well with images capturing an immobile key at a certain angle (e.g., lying flat on a surface) without any blurriness (ideal scenario).
2. Video-based inference in a realistic scenario (with moving keys and uncontrolled angles) yields significantly lower accuracy.

Specifically, for the ideal scenario, we capture ten bird's-eye view images (two images for five distinct Schlage SC1 keys) lying flat on a table with a resolution of 1000 × 500. Figure 15 depicts such an image and its perspective transformation via a reference image with predicted bitting values. The prediction of bittings for all ten images correctly matches the target key bittings (after rounding up/down). Table 1 shows the mean bitting prediction error, \( \mu = 0.123 \) and \( \sigma = 0.087 \).

For the realistic scenario, we use five YouTube videos [65–69] depicting the key insertion of Schlage SC1 keys with varying camera angles and backgrounds. We post the key insertion segments used for our analysis here: [https://bit.ly/3pr5aFS]. These videos contain ground-truth bitting information. We select the top three frames with the least blurriness across the five videos, resulting in 15 images with resolutions of 1080p for three videos and 720p for the rest. This yields a mean bitting prediction error of \( \mu = -0.64 \) and \( \sigma = 1.28 \) (Table 1).

Moreover, we model Gaussian distributions based on the \( \mu \) and \( \sigma \) values to simulate the average keyspace reduction (Poolsearch) for ideal and realistic conditions. By sampling an error value from the distribution and adding it to true bittings across the 74 keys, we conduct ten trials. While the idealistic condition results in a Poolsearch of just one on average (i.e., correctly identifying the victim key), the realistic condition yields a Poolsearch of around 166 keys, highlighting the impracticality of the Video-only approach (Table 1).

### 6.4 Differing Experimental Conditions

We now evaluate Keynergy under several factors, including attack distance, noise level, microphone type, and varying participants. To evaluate different conditions, we choose keys with different key types, i.e., with different cluster distinctness, to understand their effect on attack accuracy. Recall from Section 4 that the presence of distinct clusters is integral to Keynergy’s attack. Hence, we select six keys {key1, ..., key6}, sorted from low to high cluster distinctness scores, where a high score indicates the presence of more distinct clusters (defined in Appendix F). Although there are several other factors, including human insertion and errors in click detection, they do not influence the vulnerabilities of key types.

#### 6.4.1 Attack Scenario 1: Proximity Attack

We evaluate Micphone for varying distances from 0ft up to 10ft (or 3m) as depicted in Figure 16(a). We achieve an average RatioReduction of 90% (σ = 10%) across all distances and keys (excluding key1), demonstrating attack feasibility up to 10ft. However, key1 achieves a low RatioReduction of 46% (σ = 18%) due to incorrect cluster detection, which can be attributed to its low cluster distinctness. Additionally, we observe cluster misdetection for key3 at 0ft and click misses for key4 at 5ft, likely due to human factors rather than attack distance. For distances beyond 10ft, click amplitudes approach the noise floor, resulting in fewer detected clicks and less reliable results.

#### 6.4.2 Attack Scenario 2: Distant Attack

We utilize the Micparab to conduct the following three experiments, namely differing (1) Door–Microphone Distance, (2) Noise Types, and (3) Ambient Noise Levels.

**Varying Door-Microphone Distances:** We vary the distance from 5ft to 25ft, in increments of 5ft. As depicted in Figure 16(b), we obtain an average RatioReduction of 93% (σ < 5%) for keys (except key1) across all distances. Similar to the evaluation on phone, we observe poor cluster detection performance for key1 due to its low cluster distinctness. Furthermore, in keys key2 to key5, we occasionally observe low RatioReduction scattered across all distances, e.g., for key3 at 10ft and key2 at 25ft, due to misses in click detection. Generally, with increasing distance, click sounds become fainter due to a lower signal-to-noise ratio, increasing click detection errors. However, Micparab achieves a high average reduction of 94% (σ = 7%) even at 25ft distance (for all keys except key1), indicating the feasibility of using such microphones for long-distance attacks.

**Varying Noise Types and Ambient Noise Levels:** We evaluate our approach by introducing three common noise sources: human conversation (noisetalk), barking dog (noisebark), and sound due to a bunch of keys (noisebunch), which may interfere with the key insertion sound.

- **noisetalk and noisebark:** To simulate the noise due to human and dog, we use 20 seconds of publicly available high-quality recordings (Fs = 96kHz) [25,26], played at different noise levels (i.e., 55dB−75dB in increments of 5dB) through an Adam Audio A3X studio monitor speaker [11] for accurate sound reproduction. Since human chatter and dog barking sounds are independent of key insertion, we record them separately using the Micparab and combine the key insertion audio with randomly selected equal-duration noise. Thus, across different noise levels, the key insertion recording remains the same, while only the noise varies, removing variability due to key insertion for the analysis.

  From Figures 17(a) and 17(c), we observe that noisetalk and noisebark at all noise levels have little impact on the RatioReduction. Although these noise sources have energies up to 25kHz, which can negatively affect our onset detection, their influence is minimal as their energies are mostly concentrated below 5kHz. Furthermore, from Figures 17(b) and 17(d), we observe that the impact of noisetalk and noisebark is minimal even at an attack distance of 25ft. All results across different distances and noise levels are presented in Appendix H (see Figure 25).

- **noisebunch:** Unlike the sounds due to human and dogs, the sound of a key bunch is dependent on the key insertion action and is difficult to record separately. Consequently, we capture audio recordings by inserting each of the six keys into the lock while having two additional keys in the key bunch. noisebunch consists of significant energies up to 48kHz, similar to the "click" sound. As depicted in Figure 18, the presence of this noise degrades the RatioReduction from 93% (in the noise-free scenario) to 68% (σ = 41%) on average for all keys (except key1), demonstrating a significant degradation in the attack's success. noisebunch increases the noise level of the key insertion sound, resulting in many false positives in click detection and even leading to incorrect cluster detection among keys with relatively high cluster distinctness (e.g., key5). Despite these challenges, if the effect of noisebunch is less intense in some key insertions, it may still succeed as our attack combines information across multiple key insertions (e.g., key3, across all distances).