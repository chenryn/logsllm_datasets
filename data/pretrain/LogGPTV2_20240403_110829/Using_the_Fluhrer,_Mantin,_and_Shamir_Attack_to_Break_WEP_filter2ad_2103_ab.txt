### Improving the Performance of Key Recovery Attacks on WEP

In this section, we discuss several modifications that can enhance the performance of key recovery attacks on WEP. While these modifications are not strictly necessary for a successful attack, they can significantly reduce both the time and space requirements for an attacker.

#### 4.1 Choosing IVs

In the baseline attack described in Appendix A of Fluhrer et al., only specific IVs are considered, namely those corresponding to (KeyByte + 3, 0xFF, N), where KeyByte is the current byte being guessed and N is unrestricted. However, we found that other IVs can also result in a resolved state. Testing all IVs, rather than just the subset suggested by Fluhrer et al., can be done in parallel with receiving packets. This conclusion was verified by Adi Shamir [10], who noted that these packets appear more frequently for higher key bytes.

#### 4.2 Guessing Early Key Bytes

The Fluhrer, Mantin, and Shamir attack builds on previously discovered key bytes, making the recovery of early key bytes critical. We explored two approaches, which can be used separately or in combination:

1. **Utilizing IV Generation Patterns**: We observed that many different key bytes could be resolved before enough packets were received to predict the early key bytes. By using the resolved cases, we narrowed down the possibilities for the early key bytes and tested candidate keys by checking if the WEP checksum on a decrypted packet was correct.

2. **Exploiting Poor Key Management**: Given that WEP keys must be entered manually, we assumed that users would use a memorable passphrase instead of a long string of hex digits. Our examination of test wireless cards revealed that the passphrase is used directly as the key (i.e., ASCII values are used without hashing). Although hashing does not protect against dictionary attacks, it would have made the attack more difficult. We determined the likelihood of each key byte being part of a user-memorable passphrase by checking if the byte value corresponded to an ASCII letter, number, or punctuation symbol.

These optimizations significantly reduced the number of packets required. In parallel with receiving packets, we continuously attempted to guess the key by choosing the most likely candidates based on the resolved cases we had gathered. In the event of ties, we prioritized lowercase letters, uppercase letters, numbers, symbols, and other byte values in that order.

#### 4.3 Special Resolved Cases

As pointed out by Shamir, certain resolved cases provide stronger indications of a particular key byte. If there is a duplication among the three values at positions S[1], S[S[1]], and S[S[1] + S[S[1]] (i.e., only two distinct values), the probability that these positions in the S permutation remain unchanged jumps from \(e^{-2} \approx 13\%\) to \(e^{-3} \approx 5\%\). We treated the evidence from these cases as about three times more convincing than a standard resolved case.

#### 4.4 Combining the Optimizations

Figure 2 shows the key recovery algorithm after incorporating all the improvements described above. These enhancements reduce the number of packets required from around 5,000,000 to around 1,000,000.

### Discussion

Several variables can affect the performance of the key recovery attack on WEP. In this section, we summarize the impact of some of these variables and suggest how the WEP design could be altered to prevent this attack.

#### 5.1 IV Selection

The WEP standard does not specify how IVs should be chosen, leading to various IV generation methods in 802.11 cards. The majority of cards use one of three methods: counters, random selection, or value-flipping (switching between two IV values). This attack is possible with either counter or random selection methods. Value-flipping prevents the attack but reuses the pseudorandom stream every other packet, which is not a reasonable trade-off.

Counter modes are the most vulnerable to this attack. In these cards, the IV is incremented with each packet sent, starting either at 0 or at a random value when the card is powered on. With counter mode cards, an attacker is guaranteed a good distribution of resolving packets among the key bytes. Random selection is not much better, as there are enough expected resolved cases to make the distribution nearly as good as counter modes.

In summary, there does not seem to be a way to choose IVs to mitigate the effects of this attack without explicitly testing each IV and key pair, which would require extra processing power and decrease the already small space of IVs.

#### 5.2 Key Selection

The lack of key management in WEP contributes to the ease of key recovery attacks. Most networks use a single shared key between the base station and all mobile nodes. Besides the "disgruntled ex-employee" style attacks, there is the problem of distributing this key to users. Many sites use a human-memorable password to simplify key distribution. There is no standard way to map these passwords to a WEP key; the current solution is to map the ASCII value directly to a key byte. We recommend switching to a secure (non-memorable) WEP key or having the key setup software hash the password to the key using a cryptographic hash function. Neither of these solutions prevents the attack but makes it slightly more difficult.

Proprietary solutions, such as Cisco's LEAP protocol, allow each mobile node to use a distinct WEP key. LEAP sets up a per-user, per-session WEP key when a user first authenticates to the network. This complicates the attack but does not prevent it if a user's session lasts sufficiently long. We recommend securely rekeying each user after approximately 10,000 packets.

#### 5.3 RC4

RC4 is an efficient stream cipher that can be used securely. The implementation of RC4 in SSL is not affected by the Fluhrer et al. attack because SSL pre-processes the encryption key and IV by hashing with both MD5 and SHA-1 [3]. Different sessions have unrelated keys. Additionally, in SSL, RC4 state from previous packets is used in future packets, so the algorithm does not rekey after each packet.

A further recommendation (RSA Security Inc.'s standard recommendation) is for applications to discard the first 256 bytes of RC4 output. This may be expensive for very small packets, but if session state is maintained across packets, the cost is amortized.

In summary, RC4 can be part of a security solution, but care must be taken to prevent key material leakage. One risk of algorithms with such caveats is that protocol designers without a strong background in cryptography and security may not implement them correctly, as was the case with WEP.

### Conclusions and Recommendations

We implemented the attack described by Fluhrer et al. in several hours and spent a few days determining the appropriate tools and equipment to read keys from 802.11 wireless networks. Our attack used off-the-shelf hardware and software, with our primary contribution being the implementation of the RC4 attack and some optimizations. We believe we have demonstrated the ultimate break of WEP, which is the recovery of the secret key by observing traffic.

Since the initial report of our attack, others have duplicated our results. Although we did not release our code, two publicly available tools for breaking WEP keys, Airsnort and WEPCrack, have been developed. Once security attacks become known, exploits are available to script kiddies, who do not need to understand the technical details to break systems.

Given this attack, we recommend the following for people using 802.11 wireless networks:

- **Assume that the link layer offers no security.**
- **Use higher-level security mechanisms such as IPsec [6] and SSH [11] for security, instead of relying on WEP.**
- **Treat all systems connected via 802.11 as external. Place all access points outside the firewall.**
- **Assume that anyone within physical range can communicate on the network as a valid user. Keep in mind that an adversary may use a sophisticated antenna with a longer range than typical 802.11 PC cards.**

The experience with WEP shows that it is challenging to get security right. Flaws at every level, including protocol design, implementation, and deployment, can render a system completely vulnerable. Once a flawed system becomes a target, it is usually a short time before it is defeated in the field.

### Acknowledgments

We thank Bill Aiello, Steve Bellovin, Scott Fluhrer, Bob Miller, Ron Rivest, Adi Shamir, Dave Wagner, and Dan Wallach for their helpful comments and discussions.

We informed Stuart Kerry, the 802.11 Working Group Chair, that we successfully implemented the Fluhrer et al. attack. Stuart replied that the 802.11 Working Group is revising the security aspects of the standard and appreciates this work as valuable input for developing robust technical specifications.

### References

[1] N. Borisov, I. Goldberg, and D. Wagner. Intercepting mobile communications: The insecurity of 802.11. In MOBICOM 2001, Rome, Italy, July 2001.

[2] D. Cafarelli. Personal communications, 2001.

[3] T. Dierks and C. Allen. The TLS Protocol, Version 1.0. Internet Engineering Task Force, RFC-2246, January 1999. ftp://ftp.isi.edu/in-notes/rfc2246.txt.

[4] S. Fluhrer, I. Mantin, and A. Shamir. Weaknesses in the key scheduling algorithm of RC4. In Eighth Annual Workshop on Selected Areas in Cryptography, Toronto, Canada, August 2001.

[5] M. Hamrick. Personal communications, 2001.

[6] S. Kent and R. Atkinson. Security architecture for the Internet protocol. Request for Comments 2401, Internet Engineering Task Force, November 1998.

[7] L. M. S. C. of the IEEE Computer Society. Wireless LAN medium access control (MAC) and physical layer (PHY) specifications. IEEE Standard 802.11, 1999 Edition, 1999.

[8] J. Postel and J. K. Reynolds. Standard for the transmission of IP datagrams over IEEE 802 networks. Request for Comments 1042, Internet Engineering Task Force, February 1988.

[9] B. Schneier. Applied Cryptography - Protocols, Algorithms, and Source Code in C. John Wiley & Sons, Inc., 1994.

[10] A. Shamir. Personal communications, 2001.

[11] T. Ylonen. SSH - secure login connections over the Internet. USENIX Security Conference VI, pages 37–42, 1996.