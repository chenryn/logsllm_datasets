t
i
l
i
b
a
i
l
e
r
n
U
0.16
0.14
0.12
0.1
0.08
0.06
0.04
0.02
0
2 applications
4 applications
6 applications
8 applications
0
2
4
6
8
10
12
Hosts per domain
(b) Unreliability
s
t
s
o
h
t
p
u
r
r
o
c
f
o
n
o
i
t
c
a
r
F
i
n
a
m
o
d
d
e
d
u
c
x
e
l
n
a
n
i
1
0.9
0.8
0.7
0.6
0.5
0.4
0.3
0.2
0.1
2 applications
4 applications
6 applications
8 applications
d
e
d
u
c
x
e
l
i
s
n
a
m
o
d
f
o
n
o
s
t
i
n
u
e
m
i
t
5
t
a
0
2
4
6
8
10
12
Hosts per domain
i
t
c
a
r
F
0.8
0.7
0.6
0.5
0.4
0.3
0.2
0.1
0
2 applications
4 applications
6 applications
8 applications
0
2
4
6
8
10
12
Hosts per domain
(c) Fraction of Corrupt Hosts in an
(d) Fraction of Domains Excluded
Excluded Domain
Figure 3. Variations in Measures for Different Distributions of 12 Hosts for First 5 Hours
portion of this graph is between x = 0 and x = 4. This por-
tion clearly shows that unreliability increases rapidly as we
increase the number of hosts in a domain and (since the to-
tal number of hosts is constant) decrease the total number
of domains. The maximum unreliability occurs at 4 hosts
per domain and then decreases for higher numbers of hosts.
This is explained by the classic reliability argument, which
states that if the failure of one replicated component can
cause a catastrophic failure, then increasing the replication
would decrease the reliability, since the chances of a fail-
ure would increase. With four or more hosts per domain,
there are enough replicas to form 1, 2, or 3 domains. Con-
sequently, for any application, we would be able to run at
most 1, 2, or 3 replicas respectively (since we can have only
one replica per domain for any application). In each of the
scenarios, corruption of one replica would result in a fail-
ure to reach Byzantine agreement, and the chances of such
corruption would be higher when we have more replicas.
Figure 3(c) shows the fraction of hosts that were inﬁl-
trated in a domain by the time it was excluded. Resources
are wasted when we have more hosts per domain, since cor-
ruption of a very small fraction of hosts results in exclusion
of a large number of uncorrupted hosts. Note that the frac-
tion is not 1 when we have one host per domain, since false
alarms can result in some domains being excluded without
any host being corrupted. Figure 3(d) shows that a large
number of domains were excluded at the end of 5 hours
when we had more hosts per domain, adversely affecting
the availability of the applications.
4.2. Impact of Different Numbers of Hosts Dis-
tributed into a Constant Number of Domains
The above studies indicate that for a given set of hosts,
it is best to distribute them into as many domains as possi-
ble. To determine the gains, if any, to be obtained by putting
more hosts per domain into a ﬁxed number of domains, and
to judge the cost/beneﬁt tradeoff, we conducted a second
study in which the number of domains was ﬁxed at 10 and
the number of hosts per domain was varied from 1 to 4. The
study had 4 applications, each with 7 replicas. Other pa-
rameters were similar to those in the previous study. Hence,
• Intrusion detection probabilities: 90% for script-based
on hosts, 75% for more exploratory on hosts, 40% for
innovative on hosts, 80% for replicas, and 80% for
management entities.
• Miscellaneous: domain propagation rate of 1 per time
unit; system-wide propagation rate of 0.1 per time unit;
inﬁltration of a host doubles the chances that the repli-
cas and management entity running on it will also be
inﬁltrated; a corrupt replica exhibits anomalous behav-
ior twice per time unit.
The above values are based on experience and security liter-
ature. In the following studies, we have also tried to explore
the system’s sensitivity to variations in these parameters.
4.1. Impact of Different Distributions of a Constant
Number of Hosts into Domains
ITUA is a system in active development. A major design
issue is that of deciding how many hosts to put in each secu-
rity domain. Is it better to consider each host as a separate
security domain than to consider multiple hosts within a se-
curity domain? To answer that question, we designed two
studies. The aim of the ﬁrst study was to see how the system
performed for various distributions of a constant number of
hosts. We conducted experiments by distributing 12 hosts
into 1, 2, 3, 4, 6, or 12 domains. For each distribution, we
considered 2, 4, 6, or 8 applications with 7 replicas each.
Figure 3(a) shows the variation of unavailability of an
application for different distributions of the 12 hosts. An
important point to note is that as we move along the X-axis,
the number of domains reduces as the number of hosts per
domain increases. As is evident from the graphs for unavail-
ability for the ﬁrst 5 time units (hours), the system is more
available when we have fewer hosts per domain, mostly be-
cause fewer hosts allow for more domains, so that we do
not run out of domains when many of them have been ex-
cluded. Other points of interest are that the unavailability
is low even when the system is left without any human in-
tervention for a few hours. We also note that unavailability
for a particular application does not change much with an
increase in the number of applications.
Figure 3(b) shows the variation of unreliability of an ap-
plication for different distributions of 12 hosts. The relevant
Proceedings of the 2003 International Conference on Dependable Systems and Networks (DSN’03) 
0-7695-1959-8/03 $17.00 (c) 2003 IEEE
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 12:27:53 UTC from IEEE Xplore.  Restrictions apply. 
y
t
i
l
i
b
a
l
i
a
v
a
n
U
0.008
0.007
0.006
0.005
0.004
0.003
0.002
0.001
0
1
for interval [0, 5]
for interval [0, 10]
2
1.5
3.5
Number of hosts per domain
2.5
3
y
t
i
l
i
b
a
i
l
e
r
n
U
0.09
0.08
0.07
0.06
0.05
0.04
0.03
0.02
0.01
0
1
4
for interval [0, 5]
for interval [0, 10]
2
1.5
3.5
Number of hosts per domain
2.5
3
4
t
p
u
r
r
o
c
s
t
s
o
h
f
o
n
o
i
t
c
a
r
F
i
s
n
a
m
o
d
d
e
d
u
c
x
e
l
n
i
1
0.9
0.8
0.7
0.6
0.5
0.4
0.3
1
steady state
2
1.5
3.5
Number of hosts per domain
2.5
3
d
e
d
u
c
x
e
l
i
s
n
a
m
o
d
f
o
n
o
i
t
c
a
r
F
0.8
0.7
0.6
0.5
0.4
0.3
0.2
1
4
at time 5
at time 10
2
1.5
3.5
Number of hosts per domain
2.5
3
4
(a) Unavailability