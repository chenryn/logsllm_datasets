the penetrator has access to keys and nonces generated in
past strands. It is required that strands that precede a past
strand are also past strands while strands that follow a re-
cent strand are recent strands. A node is said to be re-
cent (resp. past) if it lies on a recent (resp. past) strand.
Historical bundles are required to satisfy the following two
conditions:
1) For each recent node (s,i) in S, if a nonce or a key b
is generated at (s,i), i.e. Act(s, i) = +νb.m, then b uniquely
originates at (s,i) in S.
2) If a key or nonce b originates at a regular node (s,i)
then b is also generated at (s,i).
Note that the assumption that the keys or nonces gen-
erated by principals during a recent run of the protocol are
random is captured by their unique origination requirement.
¿From lemma 1 it follows immediately that for each reg-
ular node N, term(N) represents uniquely a speech act. We
say that a key K is associated with principal identiﬁers A,B,C
at a node N if K is associated with principal identiﬁers A,B,C
in the speech act represented by term(N). Note again that if
K is associated with A,B,C in a speech act then the sender
and receiver of this act are among A,B,C.
Deﬁnition(Model Semantics) Let B be a historical bun-
dle of a well-designed protocol, A,B,C be regular principals,
D be an arbitrary principal and ρ be a role. Further let n
be a nonce and K be a key.
1. B |= HNA,ρ(n) iﬀ there exists a recent regular strand
s ∈ B of A in role ρ such that n is contained in an
action in s.
2. B |= GNA,ρ(n) iﬀ there exists a recent regular strand
s ∈ B of A in role ρ such that nonce n is generated in
some sending action in s.
3. B |= Inf ormedA,ρ(K, B, C, D) iﬀ there is a recent reg-
ular strand s ∈ B of A in role ρ and a node N in s such
that N implements the receiving event of an inform or
reply act and K is associated with B,C,D at N.
4. B |= GKA,ρ(K, B, C) iﬀ there exists a recent regular
strand s ∈ B of A in role ρ such that key K is generated
at some sending node N in s and K is associated with
B,C,A at N
5. B |= Access(D, K) iﬀ
(a) D is a regular principal and there exists a recent
regular strand s ∈ B of D such that K is contained in
an action in s, or
(b) D is the penetrator and there exists a penetrator
node N such that K = term(N)
6. B |= Key(K, A, B, C) iﬀ there exists a recent regular
strand s ∈ B of C such that key K is generated at some
sending node N in s and K is associated with A,B,C
at N
Let B and B(cid:1)
be historical bundles and A be a regular
(cid:1)
principal identiﬁer and ρ be a role. Further let Ω (resp. Ω
)
be the set of recent nodes of A in role ρ in B (resp. B(cid:1)
). We
say that B, B(cid:1)
are recent (A, ρ)-indistinguishable, denoted by
B ≡A,ρ B(cid:1)
(cid:1)
if there is a bijection φ between Ω and Ω
such
(cid:1) ∈ Ω following conditions hold:
that for all nodes N, N
(cid:1)
(cid:1)
)
iﬀ φ(N ) ⇒ φ(N
1) The actions labelling N and φ(N ) coincide.
2) N ⇒ N
What a principal in a role ρ knows at a certain state of the
world depends on what it considers to be a possible world
at this state [12]. Syverson [25] deﬁned a world state as a
bundle. Similarly, we deﬁne a world state as a historical
bundle where a possible world for a principal A acting in a
such that B, B(cid:1)
role ρ in a state B is a historical bundle B(cid:1)
are recent (A, ρ)-indistinguishable.
Deﬁnition(Model Semantics, continued)
B |= KnowA,ρF iﬀ for all B(cid:1)
indistinguishable: B(cid:1) |= F
Let R be a run of a principal A according to a well-
designed AP. Deﬁne |= AP.R[F] iﬀ for each historical bun-
dle B of AP, if B contains a recent strand implementing R
then B |= F .
s.t. B, B(cid:1)
are recent (A, ρ)-
Let AP be a well-designed protocol, B be a historical bun-
dle of AP, F be a formula and R be a proper-regular run of A
in role ρ according to AP. The soundness as well as a limited
completeness of the protocol logic ProtoLog are established
in the following theorems.
Theorem 1. (Soundness Theorem)
1) If (cid:5) F then |= F
2) If (cid:5) AP.R[F ] then |= AP.R[F ]
Proof: Appendix D
Theorem 2. (Limited Completeness Theorem)
If
|= AP.R[KnowA,ρKey(K, B, C, D)]
then (cid:5) AP.R[KnowA,ρKey(K, B, C, D)]
Proof: Appendix E
6. CONCLUSIONS AND RELATED WORKS
We have proposed a new approach to development of se-
curity protocols that are correct from the outset, by step-
wise translation from high-level speech act oriented abstrac-
tion to lower-level message-exchanging protocols. We have
demonstrated the power of this idea by technically applying
it on the development of key exchange protocols. Our ap-
proach allows a protocol designer to work exclusively in the
abstract high level language of speech acts. Protocol design-
ers only need to ensure that their protocols are correct with
respect to the high-level protocol logic ProtoLog. A correct
”protocol compiler” that translates speech act events into
message sending and receiving actions, ensures the correct-
ness of the obtained lower-level message exchanging proto-
cols. Ensuring the correctness of the ”protocol compiler” is
a responsibility of the speech act language designers, not of
the protocol programmer. We have given a ”protocol com-
piler” for the class of key exchange protocols and proved its
soundness under the assumption of perfect cryptography.
As the logic ProtoLog is designed for reasoning about
speech-act-oriented protocols, it could not be applied to rea-
soning about unstructured protocols. But this is not a weak-
ness of our logic, very much like a logic designed for reason-
ing about structured Java programs is not expected to be
used to reason about unstructured Fortran programs.
Recently much attention has turned to veriﬁcation of pro-
tocols like SSL (Secure Socket Layer), TLS (Transport Layer
Security) and SET (Secure Electronic Transactions) that are
more complex than the class of key exchange protocols. The
prevalent method for veriﬁcation is based on human inter-
action with a powerful semi-automatic prover [29, 23, 22,
3]. But as pointed out in [4], the complexity of protocols
like SET has probably set a limit on the applicability of
this approach. To scale up, new advances are needed. We
believe that the approach proposed in this paper could be
extended naturally to deal with new classes of protocols in-
cluding TLS or SET. We are working on it in an ongoing
work.
There is a good body of work on designing security pro-
tocols. Guttman [13] has argued that the framework of au-
thentication tests could be used in the design of security
protocols. But it is not clear what kind of security goals are
satisﬁed by authentication tests. The notion of conversation
we introduced could be viewed as a high-level declarative
embodiment of the idea of authentication tests. Gong and
Syverson [15] has developed an informal method for develop-
ing fail-stop security protocols. Meadows [21] has suggested
that the design of cryptographic protocols should be lay-
ered in which a abstract model is used at the top layer and
each successive layer is an implementation of the layer above
it. A requirement language for security protocols has been
given by Syverson and Meadows in [26]. Buttyan, Staa-
mann and Wilhelm [7] has proposed an abstract BAN-like
logic to be used in the protocol design. But it is not clear
how to translate a protocol speciﬁed in the abstract logic
into a lower level protocol and how to verify the correctness
of such translation. Boyd and Mao [5] have discussed infor-
mally set-theoretic guidelines for the design of key exchange
protocols. Abadi and Needham [2] have proposed a set of
informal guidelines for authentication protocol design. Per-
rig and Song [28, 24] has developed tools based on the idea
of strand space for analyzing protocols and later applied it
in the design of protocols. A more recent work by Datta,
Derek, Mitchell and Pavlovic [9] is especially relevant to our
work. Though they do not propose a high-level language
for protocol programming comparable to our language of
speech acts, the techniques they study could turn out to
be especially useful in the development and optimization of
”protocol compiler”. Abadi work on secrecy by typing [1]
seems to be closely related to our result on the secrecy of
exchanged keys of well-designed protocols.
7. REFERENCES
[1] M. Abadi Secrecy by typing in security protocols,
JACM, 46, 5, 1999, 749-786
[2] M. Abadi, R. Needham. Prudent engineering practices
for cryptographic protocols, IEEE Transactions on SE,
22(1): 6-15, 1996
[3] G. Bella, F. Massacci, L.C. Paulson Verifying the SET
registration protocol, IEEE, Journal on selected areas
in communication 21, 1, 2003
[4] G. Bella, F. Massacci, L.C. Paulson An overview of
the veriﬁcation of SET, International J. of Information
security, in Press
[5] C. Boyd, W. Mao. Designing secure key exchange
protocol, Esorics’94, pp 93-105
[6] M. Burrows, M. Abadi, R. Needham. A logic of
authentication. ACM Transactions on Computer
Systems, 8(1): 18-36, 1990
[7] L. Buttyan, S. Staamann, U. Wilhelm A simple logic
for authentication protocol design, Proceedings of the
11th IEEE Computer Security Foundation Workshop,
153-162, 1998
[8] J. Clark, J. Jakob. A survey of authentication
protocol literature, version 1, Department of
Computer Science, University of York, Nov 1997
[9] A. Datta, A. Derek, J. Mitchell, D. Pavlovic A
derivation system for security protocols and its logical
formalization , IEEE Computer Security Foundation
Workshop, 2003
[10] T. Dierks, C. Allen The TLS protocol version 1.0,
RFC 2246, January 1999
[11] F. J.T. Fabrega, J.C. Herzog, J.D. Guttman. Strand
spaces: Why is a security protocol correct ?
Proceedings of the 1998 IEEE Symposium on Security
and Privacy, pp 160-171, 1998, IEEE Computer
Scociety Press
[12] R. Fagin, J.Y. Halpern, Y. Moses, M.Y. Vardi.
Reasoning about knowledge. MIT Press, 1995
[13] J.D. Guttman. Security protocol design via
authentication test, Proceedings of the 15th IEEE
Computer Security Foundation Workshop, 2002
[14] J.D. Guttman, F. J.T. Fabrega Authentication tests
and the structure of bundles, Theoretical computer
science, 2001
[15] L. Gong, P. Syverson. Fail-stop protocols: An
approavch to designing secure protocols, Proceedings
of teh 5th International Conference on Dependable
Computing for Critical Applications, 1995, pp 44-55
[16] J. Heather, G. Lowe, S. Schneider How to prevent type
ﬂaw attacks on security protocols, 13th CSFW, 2000
[17] G.E. Hughes, M.J. Cresswell. An introduction to
modal logic, Methuen, London and NewYork, 1985
[18] Y. Labrou, T. Finin, Y. Peng. Agent communication
languages: The current landscape, IEEE Intelligent
Agents, March/April 1999, 45-52
[19] G. Lowe An attack on the Needham-Schroeder public
key authentication protocol, Information Processing
Letters 56, 1995
[20] L. Loeb Secure Electronic Transactions: Introduction
and technical Reference, Artech House Pub., 1998
[21] C. Meadows. Formal veriﬁcation of cryptographic
protocols: A Survey, pp 135-150, Asiacrypt 1994,
[22] J. Mitchell, V. Schmatikov, U. Stern Finite State
Analysis of SSL 3.0, 7th Usenix Security Symposium,
1998
[23] L.C. Paulson Inductive analysis of the internet
protocol TLS, ACM Transaction on Computer and
System Security, 1999
[24] A. Perrig, D. Song Looking for a diamond in the
desert: Extending automatic protocol generation to
three-party auhtentication and keyagreement
protocols, Proceedings of the 13th IEEE Computer
Security Foundation Workshop, 2000
[25] P. Syverson. Towards a strand semantics for
authentication logic, Electronic Notes in Theoretical
Computer Science, 20,2000
[26] P. Syverson, C. Meadows A formal language for
cryptographic protocol requirements. Design, Codes
and Cryptography, 7(1 and 2): 27-59, 1996
[27] P. Syverson, P.C. van Oorshot. On unifying some
cryptographic protocols, Proceedings of the 1994
IEEE Symposium on Security and Privacy, 14-28
[28] D.X. Song. Athena: a new eﬃcient automated checker
for security protocol analysis, Proceedings of the 12th
IEEE Computer Security Foundation Workshop, 1999
[29] D. Wagner, B. Schneier Analysisof the SSL 3.0
protocol, In 2nd Usenix workshop on electronic
commerce, 1996
APPENDIX
A. APPENDIX A
A.1 Request Acts
Let S be a request act form as deﬁned in the main text.
• Let the type of S be newkey. Let Key(?,A,C,B) be the
content of S. As A does not need any knowledge to
send out a request for a new key, the preconditions of
sending such a request is True. That means
P re(+S) ≡ T rue
When sending send out a request, A generates a new
fresh nonce for the reply-with ﬁeld. Hence the eﬀects
of sending out S is that A has generated a new nonce.
Ef f ect(+S) ≡ GNA,ρ(n)
As B does not need any knowledge to receive a request
for a new key, the preconditions of receiving such a
request is also True. That means
P re(−S) ≡ T rue
For B, the eﬀects of getting a request is that B now has
the nonce n.
Ef f ect(−S) ≡ HNB,τ (n)
• Let the type of S be keyconﬁrm. Let Key(K,A,B,C) be
the content of S. For A to be able to send out such a
request, A should be informed about K earlier. Hence
P re(+S) ≡ Inf ormedA,ρ(K, A, B, C)