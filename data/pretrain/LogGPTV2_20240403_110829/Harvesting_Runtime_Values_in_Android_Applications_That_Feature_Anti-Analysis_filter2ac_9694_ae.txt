APK with the injected runtime-values is shown in Figure 4.
In “PrivacyDataLeak3”, FlowDroid always misses one of the
two leaks, even in the original, unobfuscated ﬁle, for reasons
unrelated to the work presented here.
3Sample MD5: 38a9ed0b5577af6392096b4dc4a61e02
10
B
DYNAMIC EXECUTION OF REDUCED APK
Preparation
Phase
Reduced 
APK
Dynamic 
Execution
(Emulator/Phone)
Runtime
Values
RUNTIME VALUE INJECTION (optional)
C
Bytecode 
Enhancement
Enhanced
APK
...
COTS dynamic 
analyzer, e.g. 
TaintDroid
COTS static 
analyzer, e.g.
FlowDroid, ...
CHEX, SCanDroid, 
Fig. 4: Workﬂow for Improving Static and Dynamic Taint Flow Analyses
Improvements to Dynamic Analysis Tools
Dynamic analysis tools can only inspect code that is actually
executed. If an analyst wants to ﬁnd malicious behavior in a
suspicious app using such a dynamic tool, she must therefore
ensure that the malicious code is indeed triggered. As we
have shown in our evaluation in Section VI, current testing
approaches for Android, however, often fail to trigger the
malicious behavior in current malware samples.
HARVESTER’s static slicer extracts exactly the code required
for computing a speciﬁc value of interest. Afterwards, only this
code is run on an emulator or a real phone. Most importantly,
the reduced code executed by HARVESTER does not include
any emulator checks or other techniques targeted at hindering
dynamic analysis. Furthermore, no user interaction with the
application is required anymore, eliminating code coverage
issues with existing input generation approaches. Running
existing off-the-shelf dynamic analysis tools not on the original
APK, but on the reduced APK (see phase B in Figure 4) created
by HARVESTER can thus greatly improve their recall as we
show in this section. In our second case study, we compare the
recall of the well-known dynamic taint tracker TaintDroid on
the original APK ﬁle and on HARVESTER’s reduced version.
In an approach similar to Anubis [43], TaintDroid 4.1 was
run inside the emulator on the Tapsnake [38] malware sample4
which steals location data only after a delay of 15 minutes [44].
On the original malware, the analyst needs to know that she
has to wait this time. With the app reduced by HARVESTER’s
slicing approach, TaintDroid reports the leak instantly, without
any UI interaction.
We again took 10 randomly-picked examples from Droid-
Bench and obfuscated them with DexGuard. Table III compares
the recall of TaintDroid on the obfuscated apps with the
recall after using HARVESTER’s value injection. In the original
app, TaintDroid missed leaks depending on user actions
such as in “Button3”. On apps containing emulator-detection
checks it failed as well. When running the slices extracted by
HARVESTER (see “Reduced APK” in Figure 4), both types
of leaks are found fully automatically without any user or
machine interaction. The remaining missing leaks occur due
to TaintDroid not considering Android’s logging functions
(e.g., Log.i()) as sinks, as we conﬁrmed with the authors of
TaintDroid.
4Sample MD5: 7937c1ab615de0e71632fe9d59a259cf
? = correct warning,
= missed leak
multiple circles in one row: multiple leaks expected
TaintDroid
BEFORE
App (Obfuscated)
Enhancement
Button1
Button3
FieldSensitivity3
ActivityLifecycle2
PrivateDataLeak3
StaticInitialization2
EmulatorDetection1
EmulatorDetection2
LoopExample1
Reﬂection1
?
?
?
?
?
?
AFTER
?
?
?
?
?
?
?
?
?
?
FlowDroid
BEFORE
?
AFTER
?
?
?
?
?
?
?
?
?
?
?
?
TABLE III: Leak detection by TaintDroid and FlowDroid on
Obfuscated DroidBench Apps before and after Value Injection
/ Slicing. Note that we did not have to interact with the app
for the TaintDroid test.
VIII. FURTHER USES CASES
The primary goal of HARVESTER is to extract runtime
values, even from obfuscated Android applications. Aside from
improving the effectiveness of static and dynamic taint analyses
as shown in Section VII we now discuss further uses cases that
we plan to explore in future work, at the same time inviting
other researchers to join us in this process.
Simplifying inter-component communication
In Android, inter-application and inter-component commu-
nication is usually performed using intents, where the target
can be speciﬁed as a string. If this string is obfuscated, static
analyses can no longer determine the intent’s recipient. There-
fore, current state-of-the-art tools such as EPICC [6], IccTA [5]
and IC3 [45] can only conservatively over-approximate in
such cases, which leads to potential false positives. With
HARVESTER, the actual runtime values can be integrated into
the app as constant strings, reducing the risk of such false
positives.
Improving Sandbox Output
Different sandboxing approaches such as Andrubis [40]
or Mobile Sandbox [32] apply different static as well as
dynamic analysis techniques for producing a security-report
of an application. Most of the time, these approaches apply
lightweight code-analysis techniques, such as ﬁnding statically
coded URLs with the help of a regular expression [32]. However,
this results in little to no output for obfuscated applications
that try to hide their URL, for instance. HARVESTER can help
recover these values as part of the toolchain.
11
Improving Malware Detection Approaches
There exist different machine learning approaches [46]–
[49] that try to ‘learn‘ how a benign or malicious application
looks like in order to ﬁnd new malicious applications. These
approaches are trained with different features on a set of
applications. However, if the feature set is not signiﬁcant enough
to differentiate between malicious and benign applications, it
produces too many false positives. HARVESTER’s output can
improve this situation by deﬁning precise features that couldn’t
be used with previous approaches. Example features would be
runtime values passed into method calls or resolved reﬂective
method calls (e.g. obfuscated sensitive API calls).
Improving Fuzzing Approaches
Fuzzing approaches are an essential technique for a fast
detection of critical security vulnerabilities in various applica-
tions [50]. Fuzzing, for instance, helped identify the critical
Stagefright Vulnerability [51] in the Android OS. However,
most of the fuzzing approaches rely on an input set. This is
especially problematic if one needs a speciﬁc input format,
such as incoming SMS messages from a C&C server, or a
speciﬁc intent, in order to trigger a certain security vulnerability.
HARVESTER can be used to generate such proper input sets
for fuzzing tools based on concrete runtime values.
IX. LIMITATIONS AND SECURITY ANALYSIS
While HARVESTER improves over the state of the art
signiﬁcantly, like any approach it comes with some limitations.
We next discuss those limitations and how malware authors
could potentially exploit them. Attempting to overcome those
limitations will make for an interesting piece of future research.
Attacking Timeout Mechanism
To compute the values of interest, HARVESTER executes the
extracted slices. Execution ends if either all values of interest
have been computed, or a timeout occurs. An attacker can
theoretically exploit this timeout by deliberately creating large
apps with many data-ﬂow dependencies on the values of interest.
Such an attack would lead to larger slices, and hence, longer
execution times per slice, making timeouts - and thus missed
values - more likely. An analyst can, however, easily increase
the timeouts if she detects that they happen too frequently and
results are poor. Additionally, one has to keep in mind that
such Data- and Control-ﬂow obfuscations also increase the
code size and execution time of the original app. This would
severely limit the practical applicability of such obfuscators.
Overwhelming the Analyst with Spurious Values
Since HARVESTER over-approximates the paths to be
executed, it may yield false positives, i.e., values that cannot
be computed by the original program in any given environment.
The code in Listing 5 computes a different telephone number for
number = 9371;
1 String number = null;
2 if(simCountryIso().equals("DE"))
3
4 if(simCountryIso().equals("XX"))
5
6 sendTextMessage(number, "msg");
number = 0000;
Listing 5: Path Over-Approximation
12
every mobile carrier country. The code assigning the value 0000,
however, can never be reached in the original program because
there is no environment with an XX country code. Since HAR-
VESTER cannot make any such assumptions about the possible
set of environments, it explores this path as well, reporting the
spurious value 0000. For future work, we will additionally add
semantic checks that try to verify the validity of an environment-
check (e.g., whether if(simCountryIso().equals("XX")) is a valid
check or not) to eliminate fake environment checks.
Hiding Logging Points
HARVESTER is currently implemented for the Dalvik part of
Android applications. Section V-A described that HARVESTER
is able to handle applications containing native method calls as
long as the logging point is still contained in the Dalvik code. If,
for instance, an SMS message is sent by native code, this hidden
call to sendTextMessage() cannot be used as a logging point. If
an attacker, hides the complete computation of the value of
interest in native code and never yields the computed result
back to the Dalvik layer, HARVESTER will not be able to extract
these values. However, according to previous research, current
state-of-the art banking trojans [26] use native code mainly
to hide sensitive information but leak the data in the Dalvik
part. In such cases, HARVESTER can extract this sensitive
information, returned by the native methods, without problems.
HARVESTER can succeed, however, if the app loads Dalvik
code dynamically. In such a situation, the analyst would ﬁrst
run HARVESTER once to obtain the dynamically loaded code
(which is just another runtime value), and then once again to
extract the values of interest. In the ﬁrst run, the dynamically
loaded code will be merged into the dex-ﬁle and in the second
step the hidden logging point in the merged dex-ﬁle will be
recognized and analyzed by HARVESTER.
Attacking Static Backward Slicing
Attackers could also focus on the static backward slicing.
To compute a static program slice, a complete callgraph is
indispensable, as with an incomplete call graph the slices may
be incomplete as well. If an app therefore contains multiple
layers of reﬂective calls, the slices computed by HARVESTER
will be incomplete. However, since HARVESTER is able to
replace reﬂective method calls with their original call targets
(see Section V-C), an analyst can run HARVESTER multiple
times, removing one layer of reﬂective calls per run. In the
end, HARVESTER is able to construct a complete callgraph
and, hence, a complete slice. The same technique of multiple
executions can also be used if reﬂective calls occur in the code
that computes the target of further reﬂective calls.
At the moment, HARVESTER does not support slices that
span multiple Android components. If a value, for instance, is
computed in one activity and then sent to a second one which
then contains the logging point, this value will be missed. In
the future, we plan to extend HARVESTER with support for
inter-component communication, by integrating an existing
inter-component analysis tool such as EPICC [6] or IC3 [45].
Since both tools are based on Soot, just like HARVESTER, they
should be directly compatible.
Attacking Data Dependency
We assume the values of interest not to be data dependent
on environment values. For current malware this proves to
be a reasonable assumption. If malware developers were to
introduce such dependencies in the future, one could react by
extending HARVESTER to detect and report such cases to a
human analyst. This can be achieved with the help of a static
data ﬂow tracking approach that tries to identify whether the
logging point is data dependent on an environment value. While
this approach can be attacked due to its static nature, such a
detection would signiﬁcantly raise the bar for an attacker. Note
that HARVESTER can be applied iteratively to remove layers
of obfuscation (e.g., replace reﬂective calls with direct method
invocations). In every run, the app gets simpler and, thus, more
accessible to such static detections.
Attacking the Completeness of Values of Interest
If values of interest are computed using data from external
resources such as servers on the web, we assume this data to be
static. If, for instance, a remote server returns different target
phone numbers for an SMS scam every day, HARVESTER will
only be able to recover the value of interest for the present
day.
X. RELATED WORK
Researchers have proposed various approaches for analyzing
the behavior of Android applications. Tools which simply
convert the Android dex code back to Java source code such as
ded [52] or Dare [53] suffer from the problem that obfuscated
applications do not contain sensitive values such as URLs or
telephone numbers in plain, but the analyst rather needs to
reconstruct them by manually applying the deobfuscation steps
that would normally execute at runtime.
The remainder of this section describes more advanced
approaches that provide a higher level of automation using
static, dynamic, or hybrid analysis techniques.
Static Analysis:
FlowDroid [4] or DroidSafe [54] are
static taint analysis tools which determine whether sensitive
information is leaked in an Android application. Due to their
static nature, they cannot handle reﬂective calls whose target
class or method name is decrypted or concatenated dynamically
at runtime. CHEX [29], IC3 [45] or Amandroid [55] are static
approaches that face the problem of inter-component data ﬂow
tracking in Android applications. Just like FlowDroid, the
approaches rely on a complete call graph and thus fail if call
targets are obfuscated using reﬂection. They would thus also
beneﬁt from our runtime value injection for a more complete
analysis. SAAF [17] is a purely static tool for ﬁnding constant
strings in Android applications based on backwards slicing. It
does not aim at providing any runtime semantics, e.g., if an
application decrypts a constant string at runtime, SAAF will
only produce the original ciphertext, leaving substantial work
with the human analyst.
Dynamic Analysis:
Dynamic approaches that proﬁle run-
time behavior such as Google Bouncer [56] can only detect
runtime values that violate the Play Store’s policy (e.g.,
blacklisted URLs or telephone numbers) if they are actually
used in API calls during the test run. Malware, however, often
employs sophisticated mechanisms to detect whether it is run
in an emulator or simply waits for longer than the test run
lasts before starting the malicious behavior. TaintDroid [14] is
a dynamic data-ﬂow tracker which detects leaks of sensitive
information at runtime. Other techniques such as Aurasium [57]
inject a native code layer between the operating system and
the Android application which intercepts sensitive API calls
and checks the data passed to them. All these approaches share