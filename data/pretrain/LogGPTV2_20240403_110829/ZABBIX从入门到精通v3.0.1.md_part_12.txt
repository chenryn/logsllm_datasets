Template OS Linux
与模板相关的数据都在xml里，它link的模板"Template OS Linux"并未导出。而是通过如下元素将他关联起来，下
回导入还会link一次。
Template OS Linux
通过此方式，大家可以互相共享配置文件，提高效率。
windows 安装 zabbix 监控
在 windows 下安装 zabbix agent，方法非常简单。首先到 zabbix 官方下载 windows 版本 agent，地址：
http://www.zabbix.com/download.php，找到“Zabbix pre-compiled agents”选择相应的版本下载。安装方法很简单，
下载-->解压到目录-->修改配置文件-->安装服务-->启动-->web中添加HOST即可。
文件解压到指定目录
如下图即可
bin：zabbix_get.exe、zabbix_sender.exe连个文件
sbin：zabbix_agentd.exe 客户端主进程
etc：配置文件
dev：不用理会
修改配置文件
修改 etc/zabbix_agentd.conf，只要修改以下几个配置即可（与 linux 配置文件没什么差别），只需要修改以下三个，
其他参数都默认。
Server=10.0.0.20 # zabbix服务器ip地址
ServerActive=10.0.0.20 # zabbix服务器ip地址
Hostname=win-server-ttlsa # 客户端机器名
安装服务
C:\Program Files\zabbix-2.2.1\sbin>zabbix_agentd.exe -i -c ..\etc\zabbix_agentd.conf
zabbix_agentd.exe [2304]: service [Zabbix Agent] installed successfully
zabbix_agentd.exe [2304]: event source [Zabbix Agent] installed successfully
启动 zabbix agentd
开始->>运行->> services.msc，双击zabbix agent，点击启动。
添加 Host
这步略过，请参考前面的《zabbix主机与组配置（12）》
效果图
zabbix windows 性能计数器使用详解
概述
windows下的性能计数器让zabbix监控更加轻松，直接获取性能计数器的数值即可完成windows监控。性能计数器
如下：
perf_counter["\Processor(0)\Interrupts/sec"]
或
perf_counter["\Processor(0)\Interrupts/sec", 10]
获取所有性能计数器命令：
typeperf -qx
数字对应
如上的perf_counter["\Processor(0)\Interrupts/sec"]，里面的\Processor(0)\Interrupts/sec很难记忆，而且不同的windows
系统名称不可能不相同，这可能会导致获取到错误的值。基于此，windows有相应的数字与名称对应，比如：system
对应2，Memory对应4，有几千个性能计数器名称与数字对。那怎么找到名称对应的数字呢？打开注册表Regedit，
找到HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Windows NT\CurrentVersion\Perflib\009，打开key counter
在win2008下，有5000多行，大概2000多对。贴一部分文字出来吧
1
1847
2
System
4
Memory
6
% Processor Time
10
File Read Operations/sec
自定义性能计数器 key
编辑agentd配置文件，添加PerfCounter自定义内容
PerfCounter=UserPerfCounter1,"\Memory\Page Reads/sec",30
或者
PerfCounter=UserPerfCounter2,"\4\24",30
UserPerfCounter1与UserPerfCounter2其实是一样的，4取代了Memory，24取代了Page Reads/sec，虽然说可读性
差一点，但是推荐大家使用数值。
zabbix 加载扩展模块 第三方库支持
zabbix从2.2版本开始增加了使用动态库来扩展zabbix功能。loadable modules实际上和我们前面提到的用户自定
义key是一样的功能，不同的是，他用加载lib库的方式，并且zabbix不需要fork一个新的进程，性能更好。目前
类似的功能包含user parameters 、 external checks 、 system.run[] ，如果这些脚本逻辑过于复杂、耗时太长会出
现比较严重的问题。
工作中，我们可以使用c开发一些适用于我们自己生产环境的模块。当然你也可以将它分享给出来，而不需要公布
你的源代码，如果你对自己写的代码不自信的话。当agentd、server、proxy启动的时候同时将模块加载进来，退出
的时候也会释放。
zabbix 模块 API
zabbix代码中有提供api所需的头文件.h，目前模块有两类接口需要实现，一类是必须实现的，一类是可选的。
必须实现的接口
两个接口： zbx_module_api_version()、zbx_module_init()
int zbx_module_api_version(void);
用于返回API版本，必须实现，默认返回常量ZBX_MODULE_API_VERSION_ONE（数值1）
int zbx_module_init(void);
模块必要的一些初始化，初始化成功返回ZBX_MODULE_OK，否则返回ZBX_MODULE_FAIL。
可选接口
可选接口有zbx_module_item_list()、 zbx_module_item_timeout()、 zbx_module_uninit()
ZBX_METRIC *zbx_module_item_list(void);
返回模块内定义的item列表，包含key，如：agent.ping、agent.version，每个item都使用结构体ZBX_METRIC
void zbx_module_item_timeout(int timeout);
超时时间设置，秒为单位
int zbx_module_uninit(void);
释放资源，如：文件描述等
定义item结构体
typedef struct
{
char *key;
unsigned flags;
int (*function)();
char *test_param;
}
ZBX_METRIC;
key：item key名称，例如agent.ping、mysql.version等
flags：CF_HAVEPARAMS 或者0
function：将要调用的函数
test_param：参数列表
示例
static ZBX_METRIC keys[] =
{
{ "dummy.random", CF_HAVEPARAMS, zbx_module_dummy_random, "1,1000" },
{ NULL }
}
在定义function需要接收两个参数AGENT_REQUEST 、AGENT_RESULT ，如下
int zbx_module_dummy_random(AGENT_REQUEST *request, AGENT_RESULT *result)
{
...
SET_UI64_RESULT(result, from + rand() % (to - from + 1));
return SYSINFO_RET_OK;
}
编译模块
编译准备
zabbix提供了一份用于测试的模块源码，在zabbix源码目录下
# cd /usr/local/src/zabbix-2.4.3/src/modules/dummy
# ll
total 32
-rw-r--r-- 1 1001 1001 9024 Dec 16 07:37 dummy.c
-rw-r--r-- 1 1001 1001 73 Dec 16 07:37 Makefile
-rw-r--r-- 1 1001 1001 245 Dec 16 07:37 README
请一定记住所有的源代码最好放到modules目录下来编译，因为他需要一些接口都在源码中。例如include/module.h、
include/sysinc.h、 include/config.h，前面两个.h文件解压就存在，而config.h需要在源码根目录下执行./configure（不
能带参数，否则会报错）。
开始编译
# cd /usr/local/src/zabbix-2.4.3/
# ./configure
.....内容忽略.....
# cd /usr/local/src/zabbix-2.4.3/src/modules/dummy
# make
gcc -fPIC -shared -o dummy.so dummy.c -I../../../include
# ll
total 32
-rw-r--r-- 1 1001 1001 9024 Dec 16 07:37 dummy.c
-rwxr-xr-x 1 root root 8526 Feb 10 10:48 dummy.so
-rw-r--r-- 1 1001 1001 73 Dec 16 07:37 Makefile
-rw-r--r-- 1 1001 1001 245 Dec 16 07:37 README
加载模块
拷贝so文件到zabbix目录下
# cp dummy.so /usr/local/zabbix-2.4.3/lib/
修改配置文件
LoadModulePath=/usr/local/zabbix-2.4.3/lib/ # 可自定义
LoadModule=dummy.so # 可以加载多个
测试模块
重启zabbix_agentd
# killall zabbix_agentd
# /usr/local/zabbix-2.4.3/sbin/zabbix_agentd
测试key
# ./zabbix_get -s 127.0.0.1 -k dummy.echo[ttlsa.com]
ttlsa.com
#./zabbix_get -s 127.0.0.1 -k dummy.ping
1
#./zabbix_get -s 127.0.0.1 -k dummy.random[10,100]
73
可以看到定义好的三个key都成功了。学好linux c开发自己的zabbix模块吧。
zabbix telnet 监控类型
概述
zabbix监控的方式很多，例如前面讲到的agent、snmp以及后续后续要讲到ssh和今天要讲到的telnet。流程很简
单，创建item-->配置ip、用户、密码、端口、脚本->zabbix server telnet目标ip->执行制定脚本，脚本最后返回数
据给server。
目标：获取linux系统15分钟负载
telnet key
语法：
telnet.run[,,,]
：描述
：服务器ip
：服务器端口
：编码,可为空
telnet 配置
请看《linux下telnet安装与使用》
创建脚本
获取系统负载脚本loadavg.sh
# cat /home/zabbix/loadavg.sh
#!/bin/bash
/bin/awk '{ print $3 }' /proc/loadavg
创建 item
configuration>>host>>你的主机>>item>>create item，如下：
属性说明：
user name：telnet账号
Password：telnet密码
获取到的结果如下
优缺点都很明显，只需要通过 telnet 就可以监控服务器，但是账号密码是明文配置在 item 中的，而且一旦网络不
好，item状态很容变为unspport。一直相类似的还有ssh监控类型，想了解的同学情关注下一篇文章。再会~
zabbix 用户认证方式 内建、HTTP Basic、LDAP
公司大大小小众多系统，不同系统不同的账号密码，管理上相当复杂，后来慢慢出现了SSO等账号统一验证，其他
zabbix也提供了类似的方法，或许有些公司便可以使用公司提供的账号来登录zabbix了。
zabbix提供了三种验证方式：
 内建验证，也就是zabbix自带的账户系统
 HTTP BASIC，Apache的基本验证，大家懂得
 LDAP验证
zabbix 验证方式修改
Administration>> Authentication ，如下图：
默认是Internal，系统内建认证
很多账户系统里面都用LDAP、或者window域，我们后续文章会有实例，请关注我们！
基于Apache http basic auth，估计用的人会相对较少，但是后续我们会做一个演示。
其实，我更希望他能提供一个最基础的api认证接口，我们实现她得接口，这样zabbix能更轻松的继承
到各种不一样的账户系统中
zabbix 第三方认证之 http(nginx basic auth)
从《zabbix用户认证方式 内建、HTTP Basic、LDAP（96）》我们了解到zabbix有三种认证方式，内建的不用多说，
今天我们聊聊HTTP Basic Auth认证方式，我们将在实例中使用nginx来演示，Apache也类似。
zabbix 认证配置
Administration>> Authentication，将http authentication改为HTTP，保存即可，如下图：
接下来在nginx中创建Admin用户，或者创建zabbix已经存在的其他用户。
nginx 用户认证配置
nginx配置如下
server{
server_name www.ttlsa.com;
index index.html index.php;
root /data/site/www.ttlsa.com;
..... 省略部分配置 .....
location ~ ^/zabbix(/.*)$
{
auth_basic "nginx basic http test for ttlsa.com";
auth_basic_user_file htpasswd;
location ~ .php$ {
fastcgi_pass 127.0.0.1:9000;