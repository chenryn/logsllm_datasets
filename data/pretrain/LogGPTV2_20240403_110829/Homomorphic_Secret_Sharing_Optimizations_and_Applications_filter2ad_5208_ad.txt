mizations, such as using a larger basis for the key.
4.2.2 Distributed Generation of Level 2 Shares. In this section,
we present a simple distributed protocol for generation of level 2
shares (additive shares) of a secret input under a shared key. Namely,
we consider two parties, A and B, holding additive shares cA and cB
of the secret key c (where addition is in Zq). We assume that each
share statistically masks c over the integers (for 80 bits of security,
each share can be 240 bits long, instead of requiring 1536 bits to
describe a truly random element in Zq). The protocol is represented
in Figure 2; it assumes access to an oblivious transfer primitive.
Distributed Level 2 Shares Generation ΠL2S
(1) A’s input is (x, cA), with x ∈ {0, 1}, and B’s input is cB,
such that cA + cB = c. Let t be the bitlength of cA and cB.
$← Z2t +λ and runs as sender in an oblivious
(2) B picks r
transfer protocol with input (r , r +cB ). A runs as receiver
with selection bit x and get an output r′.
(3) A outputs (x, r′ + x · cA). B outputs (0,−r ).
Figure 2: 2-party protocol ΠL2S for distributed level 2 shares
generation.
level 2 shares⎷x⌄c of the input x.
Proposition 4.6. The protocol ΠL2S in Figure 2 securely generates
Correctness follows easily by inspection, and the (statistical)
privacy of the inputs directly reduces to the security properties of
the oblivious transfer (OT).
For each input bit x encoded in this fashion, the required commu-
nication corresponds to a single 1-out-of-2 string OT, with string
length ℓ = 240 bits and security parameter λ = 80. Leveraging
OT extension techniques, n input bits can then be encoded with
2n(λ + ℓ) = 640n bits of communication.
4.3 Generic Ciphertext Compression for
Public-Key HSS
In [11], a heuristic method to compress the ciphertext size by a
factor two was suggested, by generating all first components дr
of ciphertexts using a PRG; however, this method only applies to
secret-key HSS. In this section, we sketch a method to achieve
a comparable trade-off (ciphertexts size reduced by a factor two
in exchange for a larger key) for public-key HSS, under a new
assumption. Formal details are given in the full version.
Entropic Span Diffie-Hellman Assumption over Zq. Let • de-
note the inner product operation, and B denote any basis. Intuitively,
the entropic span Diffie-Hellman assumption (ESDH) states that,
given k vectors (v1, . . . , vk ) of size t, the two distributions
D0 = {v1,· · · , vk , д, дv1•c ,· · · , дvk•c | c ← {0,· · · , B − 1}t}
D1 = {v1,· · · , vk , д, д1,· · · , дk | (д1,· · · , дk )
bination ((cid:80)
are indistinguishable, provided that any non-trivial linear com-
i λivi ) • c of the vi • c is sufficiently random, upon
random choice of the vector c (whose components are in base B).
Note that a necessary condition for this assumption to hold is that
all non-zero vectors in the span of (v1,· · · , vk ) must have ω (log λ)
exponentially large non-zero entries. If s denotes the length of a
standard ElGamal secret key (e.g. using base 2, s = 160 for 80 bits
of security), natural parameters for the ESDH assumption are t ≈
s, and each component of each vector is s-bit
s +
long: with overwhelming probability, the vector with the smallest
Hamming weight in the span of random vectors (v1,· · · , vk ) has s
large coefficients.
s, λ = s, and k ≈ √
√
$← Gk}
Lemma 4.7. (Generic Security of ESDH) The entropic-span Diffie-
Hellman assumption holds in the generic group model.
A proof of Lemma 4.7 is given in the full version.
Randomness Reuse under ESDH. Under the above assumption,
we get the following lemma:
Lemma 4.8. Let G be a group and (t, k ) be two integers such that
the ElGamal encryption scheme is circularly secure, and the ESDH
assumption with parameters (t, k ) holds over G. Then there exists an
HSS scheme with the following parameters:
• The public key pk consists of k + 1 elements of G, and a short
PRG seed;
• The ciphertexts consist of t + ⌈t/k⌉ + 1 group elements.
Sketch. The HSS scheme is constructed as previously, with the
following modifications: the secret key is a vector c = (ci )i ≤t . The
Session J1:  OutsourcingCCS’17, October 30-November 3, 2017, Dallas, TX, USA21122 shares to be of the form ((cid:10)y(cid:11) , ((cid:10)ci · y(cid:11))i ≤t ) (which simply means
an input ((cid:74)x(cid:75)c ,⎷y⌄c ), the parties compute(cid:68)
public key now contains k vectors (v1,· · · , vk ) ∈ (Zt
q )k (which can
be compressed using a PRG) and group elements (h1,· · · , hk ) ←
(дv1•c ,· · · , дvk•c ). Encryption is done with the standard random-
ness reuse method, using a single random coin and the k public keys
to encrypt k consecutive values of (x, (x · ci )i ≤t ). We modify level
that the reconstruction with powers of 2 is not executed at the end
of the Mult algorithm). To evaluate the pairing algorithm Pair on
and use the
jth share to decrypt components of level 1 shares encrypted with
the key hj. Using the natural parameters previously mentioned, this
optimization reduces the ciphertext size from 2s + 1 group elements
to s + 2⌈√
s⌉ + 1 group elements. For s = 160, this corresponds to
a reduction from 321 to 187 group elements, whereas for s = 40
(obtained by using a base-16 representation) this corresponds to a
reduction from 81 to 55 group elements.
□
vj • c
j≤q
(cid:69)
Functionality. MMultpk([[[x]]]c ,⎷b⌄c ,⎷y ⊕ b⌄c ) (cid:55)→⎷xy ⊕ b⌄c
Description. Compute for i = 1 to s
⟨b ⊕ ci⟩ ← MPair((cid:74)ci(cid:75)c ,⎷b⌄c ,⎷1 ⊕ b⌄c )
and perform the following operations:
This part correspond to a precomputation phase, which de-
pends only on the pad b and can be reused in any execution
of MMult with the same pad. Parse [[[x]]]c as
((cid:74)x(cid:75)c , ((cid:74)x · ci(cid:75)c )i ≤s )
(1) (cid:10)b ⊕ xy(cid:11) ← MPair((cid:74)x(cid:75)c ,⎷b⌄c ,⎷y ⊕ b⌄c )
(2) (cid:10)b ⊕ ci xy(cid:11) ← MPair((cid:74)xci(cid:75)c ,⎷b⌄c ,⎷y ⊕ b⌄c ) for i = 1 to
(3) 2(cid:10)ci (b ⊕ xy)(cid:11) ← 2·(cid:10)b ⊕ xyci
(cid:11) +⟨ci⟩− (⟨b⟩ +⟨b ⊕ ci⟩) for
(4) (cid:10)c (b ⊕ xy)(cid:11) ←(cid:80)s
i =1 2i−1(cid:10)ci (b ⊕ xy)(cid:11)
(5) Return ((cid:10)b ⊕ xy(cid:11) ,(cid:10)(b ⊕ xy) · c(cid:11)).
i = 1 to s
s
4.4 Reducing Leakage Rate
A crucial issue with current group-based HSS schemes is that the
failure event is correlated which secret information that may de-
pend both on the inputs and the secret key. Therefore, in scenarios
where the evaluating parties get to know whether the computation
failed, the secrecy of the inputs and the key can be compromised.
The amount of secret information that leaks during a computa-
tion is directly proportional to the failure probability δ. We discuss
methods to mitigate the leakage in this section.
4.4.1 Leakage-Absorbing Pads. In this section, we introduce a
new technique of using “leakage-absorbing pads” to reduce the
leakage rate from linear in the failure probability to quadratic. This
technique is incomparable to the previous approach from [13] of us-
ing leakage resilient circuits. While the technique from [13] can be
used to make the leakage rate negligible, this comes at a high compu-
tational overhead that involves many additional group operations.
In contrast, our technique only yields a quadratic improvement in
the leakage rate but is computationally cheaper and requires no
additional group operations.
Masked Pairing Algorithm. To handle the leakage more efficiently,
we introduce a masked pairing algorithm, which takes in addition
some level 2 share of a pseudorandom bit b, which we call leakage-
absorbing pad, so that any value that can leak during a conversion
is XOR-masked with b. This ensures that failures do not leak private
information, unless two failure events occur on computation involv-
ing the same pad. In various scenarios, this allows us to make the
amount of leakage quadratically smaller than the failure probability.
Functionality. MPair((cid:74)x(cid:75)c ,⎷b⌄c ,⎷y ⊕ b⌄c ) (cid:55)→(cid:10)xy ⊕ b(cid:11)
Description. Compute(cid:74)1 − x(cid:75)c from(cid:74)x(cid:75)c homomorphically.
Compute Pair((cid:74)x(cid:75)c ,⎷b⌄c )×Pair((cid:74)1 − x(cid:75)c ,⎷y ⊕ b⌄c ) to get
(cid:8)x (y ⊕ b)(cid:9) × {(1 − x )b} =(cid:8)xy ⊕ b(cid:9), and compute
plication algorithm, that returns⎷xy ⊕ b⌄c. However, the latter is
more involved, as we must compute(cid:10)c (b ⊕ xy)(cid:11) using only MPair
(cid:10)xy ⊕ b(cid:11) = Convert((cid:8)xy ⊕ b(cid:9)).
We extend this masked pairing algorithm to a masked multi-
to avoid non-masked leakage. In addition to pk, we assume that the
parties hold shares (⟨ci⟩)i ≤s of the coordinates of c.
Masked Evaluation of an RMS Program. Let P be an RMS program
with d inputs, which we assume to be a circuit with XOR gates and
restricted AND gates. We denote by MaskedEval an algorithm that
takes as input pk, a bit t, an evaluation key ek, a failure parameter δ,
inputs ([[[xi]]]c )i ≤d, which outputs a level-2 share of P (x1,· · · , xd ):
an RMS program P, a leakage-absorbing pad⎷b⌄c, and d encoded
MaskedEval(t,⎷b⌄c , ([[[xi]]]c )i ≤d , P, δ ) (cid:55)→⎷P (x1,· · · , xd )⌄c
The algorithm MaskedEval proceeds as follows: each masked
monomial is computed using the MMult algorithm for each product
of the monomial. To compute a masked XOR of two intermediate
values M1 and M2,
(1) Compute⎷b ⊕ M1⌄c,⎷b ⊕ M2⌄c, and⎷b ⊕ M1M2⌄c using
(2) Compute⎷b ⊕ (M1 ⊕ M2)⌄c as
⎷b⌄c +⎷b ⊕ M1⌄c +⎷b ⊕ M2⌄c − 2⎷b ⊕ M1M2⌄c .
several invocations of the MMult algorithm
Generating the Pads. In scenarios where secret-key HSS is sufficient,
the leakage absorbing pads can simply be generated as part of
any HSS ciphertext. For scenarios that require public-key HSS, a
number of leakage-absorbing pads can be generated as part of the
key distribution protocol, and re-generated later on if too many
pads have been compromised. Generating a pad can be done using
two oblivious transfers: the two parties (P0, P1) hold shares (c0, c1)
of the secret key c, and pick respective random bits (b0, b1). With
one OT, P0 transmits r0 − 2b0b1 and (c0 − 2b0c0)b1 + r′
0 to P1, for
random (r0, r′
q, by letting P1 choose between the pairs (r0, r′
0)
and (−2b0 +r0, c0(1−2b0) +r′
0) with selection bit b1. Conversely, P1
transmits c1 (1 − 2b1)b0 + r1 to P0, for a random r1 ∈ Zq, using one
OT. Note that (r0 +b0, b1 +r0−2b0b1) form additive shares of b0⊕b1,
and (b0c0 − r′
0 + c1(1 − 2b1)b0 + r1, b1c1 − r1 + c0 (1 − 2b0)b1 + r′
0)
form additive shares of c · (b0 ⊕ b1). Therefore, the two players
obtain level 2 shares of a random bit.
0) ∈ Z2
4.4.2 Protecting the Secret Key. Leakage pads can be used to
equally reduce the leakage rate of both input bits and secret key
bits. However, protecting key bits is more important for two reasons.
First, key bits are typically involved in a much larger number of
conversions than input bits. Second, in applications that involve
Session J1:  OutsourcingCCS’17, October 30-November 3, 2017, Dallas, TX, USA2113ci ∈ Zq such that c =(cid:80)k
distributed key generation, replacing a compromised key requires
additional interaction. A natural approach suggested in [13] for
protecting the secret key c is to split it into k random additive shares
i =1 ci, and modify the level 1 share of an
input x to include encryptions of x · ci
for i ∈ [k] and j ∈ [s]. This
j
ensures that the jth component of c remains unknown unless the
k components at the jth positions of the (ci
j )i ≤k are compromised.
However, this increases the ciphertext size and the evaluation time
by a factor k. In this section, we discuss more efficient sharing
methods to protect the secret key, that offer comparable security at
a cost which is only additive in k.
Computational Approach. The simplest method is to increase the
size of the secret key, and to rely on entropic variants of the Diffie-
Hellman assumption, stating that indistinguishability holds as long
as the secret exponent has sufficient min-entropy (see [14, 16]).
Assume for simplicity that the secret key is written in base 2; let
s be the key length corresponding to the desired security level.
Extending the key to be of size s + k ensures, under an appropriate
variant of the Diffie-Hellman assumption, that a leakage of up to k
bits of the secret key does not compromise the security.
Information Theoretic Approach. The above method becomes inef-
ficient if one wants to be able to handle a very large amount of
leakage. We outline a better approach to protect the secret key c
against an amount of leakage bounded by k. Let ℓ ← ⌈log q⌉ +
k + 2⌈log(1/ε)⌉, where ε denotes a bound on the statistical dis-
tance between the distribution of the secret key and the uniform
distribution from the view of an adversary getting up to k bits of
information. In the key setup, a large vector (vi )i ≤ℓ of elements of
Zq is added to the public key (it can be heuristically compressed to
a short seed using a PRG), as well as encryptions of random bits
(c′
i c′
ivi = c mod q. An HSS ciphertext for an in-
put x now encrypts (x, (xc′
i )i ). After an invocation of Convert with
hash lemma, an arbitrary leakage of up to k bits of information
on the c′
can be allowed, without compromising the key c. This
i
method is more efficient than the previous one for large values of
k and offers unconditional security.
4.5 Extending and Optimizing RMS Programs
In this section, we describe optimizations that take advantage of the
specificities of group-based HSS schemes when evaluating RMS pro-
grams, to allow for richer semantics and efficiency improvements
for certain types of computation.
i )i ≤ℓ satisfying(cid:80)
input y,(cid:10)yc(cid:11) can be reconstructed as(cid:80)
(cid:69). By the leftover
(cid:68)
yc′
i
i vi
4.5.1 Terminal Multiplications. The Mult algorithm, which al-
lows to multiply a level 1 share of x with a level 2 share of y and
produces a level 2 share of xy, involves s + 1 calls to PairConv: one
to generate(cid:10)xy(cid:11), and s to generate(cid:10)xy · c(cid:11). We make the follow-
ficient to call PairConv a single time, as the second part(cid:10)xy · c(cid:11)
ing very simple observation: let us call terminal multiplication a
multiplication between values that will not be involved in further
multiplications afterward. Then for such multiplications, it is suf-
of a level 2 share is only necessary to evaluate further multiplica-
tions. For low depth computation with a large number of outputs,
this results in large savings (in particular, it reduces the amount
of computation required to evaluate degree-two polynomials with
2). Moreover, termi-
some fixed failure probability by a factor (s + 1)
nal multiplications have additional benefits that we outline below,
which provides further motivation for treating them separately.
Short Ciphertexts for Evaluation of Degree-Two Poynomial with Secret-
Key HSS. Unlike public-key HSS, a ciphertext in a secret-key HSS
scheme can be directly generated together with a level 2 share of
its plaintext. This implies that it is not necessary to “download”
the inputs at all to construct such level 2 shares. Therefore, when
computing degree-two polynomials with secret-key HSS, which
involves only terminal multiplications, it is not necessary anymore
to encrypt the products between the bits of the secret key and the
input: a single ElGamal encryption of the input is sufficient.
For public-key HSS, level 2 shares of secret inputs cannot be
generated by a party directly, as no party knows the HSS secret key.
However, if we are in a setting with two parties who hold shares of
the secret key, then the parties can jointly generate level 2 shares
of their input by the protocol described in Section 4.2.2.
Handling Large Inputs in Terminal Multiplications. In general, all
inputs manipulated in RMS programs must be small, as the running
time of conversion steps depend on the size of the inputs. However,
the semantics of RMS programs can be extended to allow for a