less power-eﬃcient if they each run their own push service.
They choose to share one push service instance across mul-
tiple apps and realize that with a Unix domain socket.
Implementing Global Lock
4.2.3
This use case also takes advantage of the feature that AB-
STRACT addresses are used exclusively. There is demand
on global locks because some resources cannot be used by
two diﬀerent processes/threads simultaneously, or certain
operations should be serialized instead of parallelized. How-
ever, Android itself does not provide global locks shared be-
tween diﬀerent apps. Facebook apps all have a DEX opti-
mization service. They will not do optimization before suc-
cessfully acquiring a global lock implemented with a Unix
domain socket. This ensures that only one optimization task
Table 6: Code patterns for categorizing Unix domain socket usage.
Usage
Key APIs
LocalSocketServer.()
LocalSocketServer.accept()
IPC
LocalSocket.connect()
LocalSocket.getInputStream()
LocalSocket.getOutputStream()
LocalServerSocket.()
LocalSocket.bind()
LocalSocket.connect()
Singleon/
Global Lock
Watchdog
Code Pattern
# Apps
Unix domain socket server/client reads data
from (or write data to) the other end.
Server has no reading/writing operations
after binding to an address.
Client connects to server and then blocks at reading.
193
165
33
LocalSocket.getInputStream()
Server also blocks at reading after accepting client connection.
runs in background, and helps reduce negative impact on
user experience.
4.2.4 Implementing Watchdog
Table 7: Statistics on peer authenication checks.
UID/GID Process name User name Permission
#Apps
#Daemons
20
7
0
3
0
2
97
0
Figure 4: The Kaspersky app’s service and daemon monitor
each other through a Unix domain socket.
Some apps have important services that are expected
to always run in background. Such \immortal" services
are against Android’s memory management philosophy, and
therefore developers have to to (cid:12)nd a workaround to au-
tomatically restart them, in case they are somehow termi-
nated. They implement a watchdog mechanism leveraging
Unix domain sockets. For example, the Kaspersky Security
app starts a native daemon in a service. The daemon and
the service monitor each other mutually, through a Unix
domain socket channel.
If one is died, the other will gets
noti(cid:12)ed and restart it immediately, as Figure 4 depicts.
4.3 Peer Authentication
We re(cid:12)ne the categorization made by SInspector’s Au-
thentication Detector module, and classify peer authentica-
tion checks into four types: UID/GID checks, process name
checks, user name checks, and permission checks. Table 7
shows the numbers of apps and system daemons adopting
each type of checks. Apps and daemons tend to use diﬀerent
types of authentication checks. Apps only adopt UID/GID
checks and permission checks, while system daemons use all
checks except permission checks. One possible reason is in
diﬀerent layers the information apps/system daemons can
obtain diﬀers.
In app layer, apps can easily get the peer
app’s permissions with its UID. However, there are no APIs
for getting the peer’s process name or user name. In native
layer, process name and user name can be easily obtained.
But due to the lack of Android runtime context, it is infea-
sible to query the peer’s permissions. Only 9 of 60 (15%)
daemons employ strong checks, meaning that their security
heavily rely on the correctness of SEAndroid policies and
(cid:12)le access permissions.
Process Name Checks. In native layer, getting process
name with its PID is done by reading /proc/PID/cmdline
or /proc/PID/comm on the proc (cid:12)lesystem (procfs). Process
name checks compare the peer’s process name with prede-
(cid:12)ned process name(s). By default, the process name of an
Android app is its package name. Therefore, the content
of the two proc (cid:12)les of an app process is actually the app’s
package name. Interestingly, we (cid:12)nd that apps are able to
modify their own process names at runtime, by calling a
hidden method Process.setArgV0(String s) through Java
re(cid:13)ection. This method is supposed to be used by the sys-
tem (labeled with @hide in source code), but it requires no
permissions. This hidden method makes all process name
checks meaningless, as malicious apps can always change
their process names to legitimate ones so that they can by-
pass checks and send messages to the victim. For example,
the system daemon cnd on LG G3 and Galaxy S4 is used for
managing Qualcomm connectivity engine [10]. It accepts re-
quests from clients through a Unix domain socket and checks
if the client’s process name is \android.browser". Requests
from other clients are not legitimate and will be discarded.
By changing process name to \android.browser", any app
can send legitimate requests to cnd eﬀortlessly.
UID/GID Checks. Android reserves UIDs less than
10,000 for privileged users. For instance, the user system
has 1,000 as both UID and GID. Normally, each app has its
own UID and GID, but apps from the same developer could
share the same UID and GID. These checks are handy when
one wants to allow only privileged users or particular apps
to communicate with it. UID/GID checks eﬃciently prevent
unauthorized peers, as UID and GID can never be spoofed or
modi(cid:12)ed. For example, the Android Wear app has a service
called AdbHubService, which is used for remote debugging.
It starts a Unix domain socket server accepting debugging
commands from ADB shell. Only commands coming from
root and system are allowed, by checking if a client’s UID
is equal to 0 or 2,000.
User Name Checks. These checks are similar to
UID/GID checks, since each user also has its unique user
name that cannot be spoofed or modi(cid:12)ed. They also eﬀec-
tively authenticate the peer’s identity. Samsung Galaxy S4’s
RIL daemon, rild, checks client user name. A list of names
ServiceDaemonread()read()ServiceDaemonread()read()ServiceDaemonread()read()(a) Service and Daemon are both alive.(b) Service is dead so Daemon’s read() returns. Start Service.(c) Daemon is dead so Service’s read() returns. Start Daemon.of privileged users are hardcoded in the binary, e.g., media,
radio. User name checks might be better than UID/GID
checks because the same user may have diﬀerent UID/GID
on diﬀerent devices due to vendor customization.
Permission Checks. These checks enforce that only
apps with speci(cid:12)c permissions can access the Unix domain
socket channel. In app layer, apps can call several APIs in
the Context class to check another app’s permissions. The
Facebook Stetho library checks if the peer has the DUMP per-
mission, a system permission that can only be acquired by
system apps. It (cid:12)rst obtains UID and PID from peer creden-
tials, then calls Context.checkPermission(permission,
pid, uid) to do permission checking
Token-based Checks. Besides aforementioned peer au-
thentication checks, we observe two apps adopt token-based
checks. The server and the client (cid:12)rst securely share a small
chunk of data (called token). The server compares the to-
ken of the incoming client with its own copy so that only
clients having the right token can talk to it. This type of
checks, assuming the token is shared in secure ways, can ef-
fectively prevent unauthorized accesses. We (cid:12)nd two apps
employing two diﬀerent methods to share tokens between
the server and the client. The (cid:12)rst one, Helium Backup,
broadcasts the token on the server side. The broadcast is
protected by a developer-de(cid:12)ned permission, and therefore
other apps without the required permission cannot receive
the token. The second one, OS Monitor, stores its token in a
private (cid:12)le. Since the server and the client are both created
by the app itself, they have privileges to read the private (cid:12)le
and extract the token. SInspector currently cannot identify
such checks. As a result, these apps reported as potentially
vulnerable are actually false positives.
5. CASE STUDY
By examining the output of SInspector, we successfully
discovered several high-severity zero-day vulnerabilities af-
fecting popular apps installed by hundreds of millions of
users, widely used third-party libraries, and system dae-
mons having root privileges. These vulnerabilities can be
exploited to (1) grant root access to any apps, giving the
attacker entire control of the device, (2) read and write
arbitrary (cid:12)les, allowing the attacker to steal user privacy
and modify system settings, (3) factory reset the victim de-
vice, causing permanent data loss, and (4) change system
date and time, resulting in denial of service. Attack demos
and more details are available on our project website https:
//sites.google.com/site/unixdomainsocketstudy.
5.1 Applications
5.1.1 Data Injection in a Rooting Tool
As rooting gaining popular in the Android community,
many one-click rooting tools become available [33], which
allow users to gain root access very easily. One major root-
ing tool, which claims to be able to root 103,790 diﬀerent
models (as of May, 2016), support a wide range of devices
running Android 2.3 Gingerbread and above up to Android
6.0 Marshmallow. As well as rooting, the tool also serves as
a root access management portal, through which users can
grant or deny apps’ root requests.
Once a device is successfully rooted, the rooting app in-
stalls a command line tool, su, to the system partition /sys-
tem/bin/su. Apps then request root access by executing su,
Figure 5: Vulnerability illustration. The normal root request
procedure consists of steps (1)-(6) with solid arrow lines. By
injecting \ALLOW" any app can get root access regardless
what the user’s actual decision is, shown as steps (1)f2gf3g.
who starts a Unix domain socket server waiting for the root-
ing app to send back user decision. The rooting app looks up
existing policies. If no corresponding policy exists, it pops
up a dialog that asks the user to make decision. Figure 5
illustrates the whole process.
However, the FILESYSTEM-based socket channel is pub-
licly accessible as its (cid:12)le permissions are set to rwxrwxrwx,
and there is no client authentication in su. As a result, any
app can inject arbitrary decisions before the rooting app
sends out the real decision to su. This allows a malicious
app to grant or deny root access of any other apps, as well
as grant itself root privileges in order to take full control of
the device. We reported this vulnerability to the developers
and they rated it as the most severe security bug in their
product to date. They (cid:12)xed the vulnerability and released
a new version in 24 hours.
5.1.2 Privilege Escalation in ES File Explorer
ES File Explorer is a very popular (cid:12)le management app
on Android, accumulating over 300 million installs [6]. To
perform (cid:12)le operations that Java layer APIs cannot eﬃ-
ciently support, the app starts a native process and executes
libestool2.so1, which creates a Unix domain socket server
listening on an ABSTRACT address, @/data/data/com.
estrongs.android.pop/files/comm/tool_port. Moreover,
if the device is rooted and the user chooses to run ES File Ex-
plorer in root mode, it starts another libestools2.so pro-
cess with root privileges, listening on another ABSTRACT
address, @/data/data/com.estrongs.android.pop/files/
comm/su_port. Certain low-level operations, such as modi-
fying (cid:12)le permissions and changing (cid:12)le status and ownership
are sent to these two native processes to execute.
Since there is no client authentication on the server side
(i.e., libestool2.so), any app can send them commands
to run. We were able to read any app’s private (cid:12)les and
protected system (cid:12)les by exploiting this vulnerability, after
successfully reversing the communication protocol used by
the ES File Explorer app and its native processes. This
1This binary looks like a shared library from its name, but
it is essentially an ELF executable.
(3) Asking for decision (with server socket addr)(4) Looking up existing policies(1) Requesting root(2) Starting a Unix domain socket server listening on a randomly generated address: .socketXXXXX(5) Connecting to server and send “ALLOW”/ “DENY”(6) Root access granted/deniedRooting AppsuApp requesting root access(cid:94)(cid:21)(cid:96) Connecting to serverand send “ALLOW”(cid:94)(cid:22)(cid:96)(cid:3)Root access grantedvulnerability was (cid:12)xed two months after we (cid:12)rst reported it
to the developers.
5.1.3 DoS VPN Apps
Multiple OpenVPN clients for Android are available.
OpenVPN for Android is an open source client that targets
at advanced users and oﬀers many settings and the ability
to import pro(cid:12)les from (cid:12)les and to con(cid:12)gure/change pro(cid:12)les
inside the app. The client is an ELF executable ported from
the community version of OpenVPN for Linux.
OpenVPN management interface allows OpenVPN clients
to be administratively controlled from an external program
via a TCP or Unix domain socket. Quite a few of apps mak-
ing use of OpenVPN for Android utilize Unix domain sockets
to communicate with the management app. However, some
of them fail to set (cid:12)le permissions correctly for the socket
(cid:12)le. OpenVPN supports various client authentication mech-
anisms. Surprisingly, none of these apps adopt any client
authentication. Consequently, an adversary can establish
connection to the management interface and then control
the OpenVPN client, causing deny-of-service at least.
5.2 System Daemons
5.2.1 LG AT daemon
The privileged AT Daemon, /system/bin/atd, on (at
least) the LG G3 is vulnerable, which allows any app with
only the INTERNET permission to factory reset the phone,
toggle the SIM card, and more, causing permanent data loss
and denial of service. atd is a proprietary daemon developed
by LG. It starts a Unix domain socket server that performs
no client authentication, listening on socket (cid:12)le /dev/sock-
et/atd, whose permissions are not correctly con(cid:12)gured (i.e.,
srw-rw---- system inet). The permission con(cid:12)guration
means all users in the inet Linux group can read and write
this socket (cid:12)le. Android apps having the INTERNET permis-
sion all belong to the inet group. As a result, they are able
to read and write this socket (cid:12)le so that they can talk to
the AT daemon through this Unix domain socket channel.
Commands from any apps, if in the right format, will be
processed by the daemon.
By reversing the message format atd accepts, we success-
fully crafted commands that can instruct atd to perform
factory reset, wiping all user data and toggle the SIM card.
In fact, atd accepts a large set of commands (only a subset
were successfully reversed); reverse engineering the protocol
allows us to send arbitrary SMS requests, make phone calls,
get user’s geographic location, etc.. This vulnerability has
been assigned CVE-2016-3360.
5.2.2 Qualcomm Time Daemon
We (cid:12)rst found that a LG G3 daemon /system/bin/-
time_daemon opens a Unix domain socket server listening on
an ABSTRACT address @time_genoff. This daemon veri-
(cid:12)es the client’s identity. However, veri(cid:12)cation is weak and
can be easily bypassed | it only checks whether the process
name of the client is a constant string \comm.timeservice".
This vulnerability allows any app with the INTERNET per-
mission to change the system date and time, aﬀording at-
tackers to DoS services relying on exact system date and