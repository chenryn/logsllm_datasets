### 4.1.4 Verifying Evasion of an I/O-Data-Oblivious Monitor

By design, persistent interposition attacks are undetectable by any I/O-Data-Oblivious Monitor (IOM). To experimentally verify this, we used a combination of manual reasoning and experimentation. Specifically, we employed `strace` to log the system calls made by Apache and its child processes.

#### Experimental Setup
1. **Start Apache Server**: We initiated the Apache server and used a client to perform the attack, logging the system calls.
2. **Restart Apache Server**: We then restarted the Apache server and used the same client to send benign requests, again logging the system calls.
3. **Repeat for Multiple Runs**: These steps were repeated several times to obtain multiple logs, each corresponding to either a benign or an attack run.

#### Analysis
We used `diff` to compare the `strace` logs from each run. We observed that even in benign runs, there were small differences in the logs, such as the position of `sbrk` and `mmap` calls (both used for memory allocation), file descriptor numbers, and process IDs. Since these variations are present in benign runs, an IOM, by definition, must accept these variations.

Next, we compared the logs from benign runs with those from attack runs. The differences between the two types of runs were the same as those observed between benign runs, or were due to the data arguments in `read` and `write` calls. Therefore, an IOM would also accept the attack run.

### 4.2 Implementing Persistent Interposition Attacks on Other Applications

In this section, we evaluate the ease of implementing persistent interposition attacks on various applications. We chose a collection of applications to independently assess each implementation choice discussed in Section 3.

#### 4.2.1 Initial Exploit Phase

**Storing Bootstrap Code**
- **Global Buffers**: The feasibility of storing data in global buffers was demonstrated in the Apache case study.
- **Stack Storage**: We verified the feasibility of copying attack data into the stack using a test program. Our implementation pushed data onto the stack within a loop and then popped it off. To prevent the attack code from being overwritten by the victim's normal operation, the amount of data pushed should exceed the maximum stack usage by the victim and the memory needed by the attack code. Given that our implementation could allocate hundreds of MBs without triggering system calls, we did not pursue storage on the heap.

**Interposing Bootstrap Code**
- **Function Pointers**: Our Apache implementation showed the feasibility of interposing on application-specific function pointers used for module and plugin functionality.
- **GOT Entries**: Interposing on Global Offset Table (GOT) entries is the most reliable method across all applications. We successfully interposed on GOT entries for two server programs: `bind` and `lsh`.
- **Virtual Functions**: Interposing on virtual functions or pointers to virtual function tables is also feasible, but we did not have access to working exploits on real-world C++ applications to evaluate this experimentally.

**Cleanup**
- **Exploit Types**: Common exploit types include stack-smashing, heap-overflows, and format-string attacks. We obtained working exploits for stack-smashing and heap-overflows but not for format-string vulnerabilities.
- **Heap-Overflow Cleanup**: Demonstrated in the Apache case study.
- **Stack-Smashing Cleanup**: We examined the `trans2open` vulnerability in the Samba server. This attack overflows a 1024-byte stack buffer, overwriting the return address. We modified the attack to allow the process to recover by reducing the overflow length and restoring the expected value of the `ebp` register.

#### 4.2.2 Bootstrap Phase

The bootstrap phase remains consistent across all applications, so no additional feasibility evaluation was conducted beyond the Apache server.

#### 4.2.3 Operational Phase

To demonstrate the capabilities of interposing attack code during normal operation, we interposed at the source-code level rather than using binary-code interposition. We ensured that only capabilities available to injected code in a running process were used, such as examining and altering input parameters or changing global data.

- **BIND**: We targeted the `sendto` and `recvfrom` GOT entries in `bind-8.2.2_p5`. By modifying the IP address in the DNS response, we redirected clients to our server.
- **LSH**: In `lsh-1.4.2`, we targeted the `execve` GOT entry. We modified the argument data to set the user ID to an arbitrary value, allowing the attacker to assume any other user ID. This change is undetectable by an IDS because the new value would be valid in a different run of the server.

### 4.3 Possible Attacks on Other Servers

We discuss potential persistent interposition attacks on additional servers without experimental verification.

- **DHCP Servers**: An attacker could use a compromised DHCP server to redirect client DNS requests or act as a gateway.
- **Sendmail**: Sendmail forks a new process for each incoming mail message, making a persistent interposition attack less effective. However, an attack on the forwarding process can modify, misdirect, or read emails.

### 5. Implications for Existing Defenses

#### System-Call Learning Based IDS
- **Limitations**: These systems use I/O-data-oblivious models and cannot detect persistent interposition attacks. They can detect other types of attacks like race conditions and temp file bugs but are limited in their ability to protect against injected code attacks.

#### Static-Analysis Based IDS
- **Advantages and Limitations**: These techniques rely on static analysis and do not produce false positives. However, they only detect attacks that violate the language semantics, making them ineffective against many types of injection attacks.

#### Policy-Enforcement Techniques and Specification-Based IDS
- **Effectiveness**: Well-defined policies can limit damage, but in the absence of such policies, it is difficult to quantify the protection offered. Our results show that even if the rest of the system is protected, attackers can still achieve crucial security goals like stealing private keys and passwords.

#### Techniques for Control Transfer Integrity Checking
- **Control-Flow Integrity (CFI)**: CFI transforms binaries to introduce integrity checks on control transfers, disrupting initial control-hijack steps. PAID uses source-code transformation to insert notify system calls before indirect function calls, detecting jumps into injected code. While these techniques make injected code attacks virtually impossible, simpler attacks that modify system call arguments can still succeed.

#### Defenses Against Memory Corruption Attacks
- **Best Practices**: Effective defenses should focus on preventing memory corruption itself. Techniques that detect memory errors before they occur, such as those described in [24, 17, 26], provide the best defense.