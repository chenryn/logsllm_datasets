最近打了打DDCTF，本来是无聊打算水一波。最后竟然做high了，硬肛了几天..
### [100pt] 滴~
看到url疑似base64，尝试解密后发现加密规则如下。
    b64(b64(ascii2hex(filename)))
于是可以自己构造，使其实现任意文件读取，首先先尝试/etc/passwd。
    [plain] -> ../../../../../../../etc/passwd
    [0] HEX -> 2E2E2F2E2E2F2E2E2F2E2E2F2E2E2F2E2E2F2E2E2F6574632F706173737764
    [1] base64 -> MkUyRTJGMkUyRTJGMkUyRTJGMkUyRTJGMkUyRTJGMkUyRTJGMkUyRTJGNjU3NDYzMkY3MDYxNzM3Mzc3NjQ=
    [2] base64 -> TWtVeVJUSkdNa1V5UlRKR01rVXlSVEpHTWtVeVJUSkdNa1V5UlRKR01rVXlSVEpHTWtVeVJUSkdOalUzTkRZek1rWTNNRFl4TnpNM016YzNOalE9
发现斜杠被过滤掉了。此时尝试读一下index.php源码。来看一下规则。
    [plain] -> index.php
    [2] base64 -> TmprMlJUWTBOalUzT0RKRk56QTJPRGN3
最终获取到源码如下。
在这里，可以看到对对文件读取做了限制，想绕正则，是不存在的。此时打开预留hint看看，猜测可能是echo的问题？试了许久，还是放弃了。
过了几天，默默打开CSDN评论，还是看到一点有意思的东西的。最终发现出题人故意将hint放在practice.txt.swp
emm，贼迷的一题。然后提示flag!ddctf.php
读源码，此时用config替代！号：
    ~/D/D/web-di~ $ python a.py f1agconfigddctf.php
    [0] HEX -> 66316167636F6E66696764646374662E706870
    [1] base64 ->NjYzMTYxNjc2MzZGNkU2NjY5Njc2NDY0NjM3NDY2MkU3MDY4NzA=
    [2] base64 ->TmpZek1UWXhOamMyTXpaR05rVTJOalk1TmpjMk5EWTBOak0zTkRZMk1rVTNNRFk0TnpBPQ==
然后直接构造就好了
    url: http://117.51.150.246/f1ag!ddctf.php
    get: ?uid=123&k=php://input
    post: 123
### [130pt] 签到题
很简单的一个代码审计题目。一开始有点脑洞，需要绕一下认证，不过也不难。
访问页面，会有一个登陆认证，此时分析流量数据，可以发现他向auth.php请求了一下，返回值刚好是没权限。也就是权限验证在这里，分析数据包，可以发现，请求头有一个username字段。尝试修改为admin，此时成功通过认证。
然后返回了一个源码页面。此时进入分析源码阶段。源码不是太多，核心逻辑也很好懂，包括利用链的构造。
首先，分析源码，可以看到危险函数unserialize，以及file_get_contents。
此时可以大概知道题目大体解题流程如下：
通过session反序列化 -->创建Application对象--> 控制path --> getfalg
此时一步一步来。
分析代码，可以发现session这个变量，是由cookie传入的。此时经过签名校验，确定cookie不可更改。代码如下：
此时可以看到，签名规则是md5(eancrykey+session)，也就是说，我们要想获得cookie控制权，必须得到eancrykey。通读代码，分析eancrykey出现地点。最终发现两个可疑点
a) eancrykey存放目录为../config/key.txt。
由于不在web目录且没有读文件的漏洞，此时攻击者不可获取。
b) 某处代码存在蜜汁调用。
很明显，可以看出是主办方给的后门，但是怎么用呢？
sprintf函数，是格式化字符串用的函数。可以参考c语言的printf，只不过这里不会打印，而是返回格式化后的字符串。
此时可以分析一下逻辑。
    # python 伪代码
    # 别尝试执行，肯定执行不了
    data="Welcome my friend %s"
    arr=['eval','key']
    for i in arr:
      data=sprintf(data,i)
      print(data)
    # 输出如下：
    # Welcome my friend eval
    # Welcome my friend eval
此时问题来了，为什么会输出两次？因为在第一次格式化的时候，已经将eval填入data中，第二次格式化前的字符串为：Welcome my friend
eval。此时没有%s占位，key也就无处可去了。
所以，此时我们将eval改成%s，遍可以成功打印出key。机智！
此时成功getkey。然后就可以愉快地伪造session了。
然后继续分析Application，我们该如何伪造session。此时，建议down下来Application.php，方便调试使用。
可以发现，代码中做了两层防护，来保证path的安全性。此时sanitizepath可以通过一个最经典的绕过---“双写” 来进行绕过。
    payload: ../
    双写后: ..././
此时可以看出，在经过这个函数后，第二三四个字符将会被转为空。然后成功使../逃逸出来。
再看第二个限制了字符为18。此时我们可以通过../和./来进行绕过，不过，唯一缺点是，字符不能超过18个。
此时尝试读取/etc/passwd。计算其长度，为10。此时我们可以构造如下：
    /etc/../etc/passwd
    双写后:/etc/..././etc/passwd
    序列化后:O:11:"Application":1:{s:4:"path";s:21:"/etc/..././etc/passwd";}
    按规则签名后:O%3a11%3a"Application"%3a1%3a{s%3a4%3a"path"%3bs%3a21%3a"/etc/..././etc/passwd"%3b}75c51ff78b04d77138ca58f797dedc0a;
此时可以看到成功读取了/etc/passwd。
最终在 ../config/flag.txt读到flag，如下：
### [130pt] Upload-IMG
比较经典的一个题目了，绕过GD库，实现图片马。一般来说，搭配一个文件包含，简直是无敌的。在这里不多解释，直接上脚本了。
> Usage: php jpg_payload.php 
### [140pt] homebrew event loop
这题给好评，思路超级棒！
先说一下题目：开局给你3块钱，让你买5个一元一个的钻石。从而得到flag。
上来可以拿到源码，首先分析源码。
    # flag获取函数
    def FLAG()
    # 以下三个函数负责对参数进行解析。
    # 1. 添加log，并将参数加入队列
    def trigger_event(event)
    # 2. 工具函数，获取prefix与postfix之间的值
    def get_mid_str(haystack, prefix, postfix=None):
    # 3. 从队列中取出函数，并分析后，进行执行。（稍后进行详细分析）
    def execute_event_loop()
    # 网站入口点
    def entry_point()
    # 页面渲染，三个页面:index/shop/reset
    def view_handler()
    # 下载源码
    def index_handler(args)
    # 增加钻石
    def buy_handler(args)
    # 计算价钱，进行减钱
    def consume_point_function(args)
    # 输出flag
    def show_flag_function(args)
    def get_flag_handler(args)
源码大概意思如上，可以看出大概流程。然后仔细分析，可以发现在购买逻辑中。先调用增加钻石，再调用计算价钱的。也就是先货后款。
现实生活中，肯定没毛病，但是在计算机中，会不会出现先给了货后，无法扣款，然后货被拿跑了。此时继续往下看，发现consume_point_function函数中，当钱不够时，会抛出一个RollBackException。此时，在逻辑处理函数execute_event_loop中，会捕获这个异常，并将现有状态置为上一session状态。如下：
此时，天真的我，想起了条件竞争，如果我够快的话，会不会让他加几个钻石，重置session时，重置到已经加完的。
但此时，仔细分析代码，以及flask的特性，你会发现一件事，他的状态并非是基于服务端session，而是客户端session，此时不应该叫他session了，叫cookie更合适一点。也就是，所有的状态都存在客户端。你竞争的话，他的session是单线程的。我必须操作完上一状态，才可以操作下一状态。
此时，条件竞争凉凉。
那既然状态是在客户端，那我可不可以修改？答案是可以。但是你得需要知道flask的secret_key。然后从而伪造cookie，此时我们无法伪造。思路继续断掉。继续分析代码。
仔细分析execute_event_loop，会发现里面有一个eval函数。无论在什么语言中，eval可控， 必定是一个灾难。
此时 action使我们可控的，但是由于白名单过滤的存在，我们可控的范围较小。
此时，我们可控点为eval前面对的action部分，于是后面的脏字符，我们可以通过#去注释掉。（p.s.用的时候请url编码为%23）
但是由于白名单限制，我们无法做一些操作。所以只能依靠其本身的作用 -- 动态执行函数。
此时action，即需要执行的函数名，args，执行函数的参数。这两个都在我们可控范围。
尝试构造如下payload：
    ?action:show_flag_function%23;123
此时，成功返回：
果然，我是最天真的那个崽。
但此时也证明了我们思路的可行性，此时我们只需要找一个函数，可以给其传一个参数的那种。进而getflag。
（p.s. flag函数无参数，所以我们无法直接执行。）
找啊找啊找朋友，一天过去了，又一天快要过去了... 代码都快会背了....
最终功夫不负有心人，终于发现一个神奇的地方。
第144行，trigger_event函数中，他传入了两个功能。然后回想代码，可以发现前面对各个函数执行，是通过execute_event_loop来对队列里的任务进行执行的。trigger_event正是那个添加任务到队列中的函数，此时该函数我们可控。
再想到之前的条件竞争，我们可以在内部构造一个竞争？对的，可以的，但是此时不配称之为竞争了。
首先我们看一下我们购买的正常逻辑。
此时，由于其先进先出的原因，我们可以一开始就传入两个参数，如下：
    ?action:trigger_event%23;action:buy;111%23action:get_flag;
此时传入一个buy和getfalg。我们再看一下逻辑。这样成功实现了，没钱买东西。
此时，问题来了，即便我们够了5个钻石，此时也获取不到flag。
因为他将打印flag的语句注释掉了。
可以看图片155行，此时return的为“天真的孩子”。那这样的话，是不是这题就没法解了？
肯定能解啊，怎么可能不能解。
此时仔细看165行，发现了什么？他是将flag作为参数传到show_flag的。别忘了，trigger_event是有log功能的，也就是此时flag会加进log里的。虽然log是在session中，但是，此时flask的特性，我们之前已经说过了。session是在本地的。虽然不能伪造，但是我们还是通过工具解开，查看内容的。
### [200pt] 欢迎报名DDCTF
emm,感觉这题应该比吃鸡分高的。这道题，感觉比较偏实战渗透。不过作为ctf题目来说，的确有点脑洞了。因为大部分同学没往实战上想。
首先第一步：XSS
说实话，一开始拿到这题第一反应是注入。瞎注了半天。最后无疾而终。
知道hint出来，竟然是我最喜欢的xss，然后就做了。做到后面，已经拿到接口了，也尝试了注入，然而又没卵用。
第二步：注入
主办方不放hint是注入的话。这题我就不打算做了。实在get不到点。还是太菜了、
\------以下正文------
xss读文件，很基础。发现waf了iframe和window。在es6新语法中，很好绕的。