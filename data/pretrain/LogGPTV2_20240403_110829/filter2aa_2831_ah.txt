virtual ULONG Release()=0;
};
More About Interfaces
75
Additonal Information and Updates: http://www.iftech.com/dcom
You may not have seen the keyword 'interface' used before
in C++. You'll be seeing a lot of it in COM programming. Here's
how we defined interface: 
#define interface struct
Unlike in the "C" language, in C++ a struct is the same as a
class, except it has only public methods. Our definition of IUn-
known would work exactly the same if we had written "class
IUnknown" instead of using interface. In Visual C++, we use
"interface" as a convention to remind us that COM has special
rules. The definition of "interface" is compiler dependent, so this
might not be true for other C++ implementations. The layout of
the Interface is extremely important. All COM interfaces are
defined in such a way that they provide QueryInterface, AddRef,
and Release, and in this exact order. When the compiler pro-
cesses this code, it will implement the interface using a C++
VTABLE structure. 
VTABLES - Virtual Function Tables
A VTABLE, or virtual function table, is a pointer to an array of
function pointers. Therefore, in all COM objects the first element
points to QueryInterface, the second pointer points to AddRef,
and the third points to Release. User defined methods can fol-
low. 
A VTABLE looks like this: 
Figure 6–2
VTABLE structure
0
1
2
VTABLE
QueryInterface() {...}
Addref() {...}
Release() {...}
Functions
IBeep->
Interface
76    Chapter 6 •
Understanding the Client and Server 
When you call a method through a VTABLE, you're adding a
level of indirection. The interface pointer (IBeep->) points to the
entry point in the VTABLE. The VTABLE points to the actual
function. Calling functions through a VTABLE is very efficient. 
Another way to look at a VTABLE is as an array of pointers.
In this array, the first 3 elements are always the same. The func-
tion at element 0 is a pointer to a method you can use to dis-
cover other interfaces. This function is known as QueryInterface.
The 2nd element is the address of a function that increments the
reference count of the interface. The 3rd element, points to a
function that decrements the reference count. The first 3 ele-
ments are all part of IUnknown, and every interface implements
them. 
After the first 3 elements of the array, we have pointers to
interface-specific functions. In our example program, the 4th ele-
ment points to the function Beep. All of the subsequent elements
of the array point to custom methods of the interface. These
methods are not implemented by the interface. It simply points
to the address of the function in the coclass. The COM coclass is
responsible for actually implementing the body of the functions. 
Let's look at what happens when you call a method, Query-
Interface for example. The program locates QueryInterface by
looking in the first entry in the VTABLE. The program knows it's
the first one because of the interface definition. This entry points
to the actual location in memory of the method called Query-
Interface(). After this, it follows standard COM calling conven-
tions to pass parameters and execute the method. 
Why is the order of these functions important? This gets
back to the issue of language independence. You can use an
interface even if you don't know its definition. However, you can
only call the three standard methods QueryInterface, AddRef,
and Release. This is possible because ALL COM interfaces have
the same VTABLE footprint as the IUnknown interface. 
To understand why this generic structure is useful, let's look
at the methods in IUnknown. QueryInterface, AddRef, and
Release. In our simple example client, we only see one of these
functions - Release. Remember there's a lot going on behind the
scenes in a COM program. We treat CoCreateInstance as if it
More About Interfaces
77
Additonal Information and Updates: http://www.iftech.com/dcom
were a black box: Somehow it creates a pointer to a COM inter-
face which our application can use. CoCreateInstance actually
performs four distinct steps: 
• Get a pointer to an object that can create the interface -
the Class Factory. 
• Create the interface with QueryInterface(). 
• Increment the reference count of the interface with
AddRef() 
• Destroy the class factory object with Release(); 
Maybe you're now starting to see how we use the three
methods of IUnknown. They are being called all the time --
behind the scenes. Let's take a closer look at a class factory. 
The Class Factory
A class factory is an object that knows how to create one or
more COM objects. You call QueryInterface() on the class factory
object to get a specific interface. You can write COM programs
for years and never see a class factory. As far as the COM appli-
cations programmer is concerned, the class factory is just another
part of the plumbing. If you're using ATL to generate your COM
servers, the class factory object is hidden. ATL creates a default
class factory that works for most COM objects. When you look
into the actual code of CoCreateInstance, you'll find it's using a
class factory. Here's the manual way of getting an interface.
There's usually no reason to do this explicitly, unless you're opti-
mizing the creation of interface objects. Looking at the code,
however, sheds some light on what CoCreateInstance() really
does. 
// clsid - class that implements our interface
// pOuterUnk is NULL
// dwClsContext is the server context
// iid is the interface we're trying to create. 
// pUnk will be returned
HRESULT CoCreateInstance( const CLSID& clsid,
  IUnknown *pOuterUnk,
  DWORKD dwClsContext,
  const IID& iid,
78    Chapter 6 •
Understanding the Client and Server 
  void **pUnk )
{
HRESULT hr;
// return NULL if we can't create object
*pUnk = NULL;
IClassFactory *pFac; // a required COM interface 
// get a pointer to special class factory interface
hr = CoGetClassObject( clsid, CLSCTX_LOCAL_SERVER,
NULL, IID_IClassFactory, (void**)&pFac );
if (SUCCEEDED(hr))
{
// use the class factory to get 
// the unknown interface
hr = pFac->CreateInstance(pOuterUn, iid, pUnk );
// release the factory
pFac->Release();
}
// pUnk points to our interface
return hr;
}
You probably noticed that the class factory is actually a
COM interface. We had to call CoCreateInstance to get the class
factory interface. Once you get the interface, you call its Cre-
ateInstance member. As you can see, the class factory does its
job and then conveniently disappears. 
There may be times when you'll want to override the default
factory. One example might be a server that produces a large
number of interfaces. For efficiency, you would want to keep
this class factory in memory until it was finished with its work.
To override the default, you'll need to write a custom implemen-
tation of IClassFactory. 
We've now explained CoCreateInstance, but we've intro-
duced two new mysterious functions: CoGetClassObject() and
More About Interfaces
79
Additonal Information and Updates: http://www.iftech.com/dcom
CreateInstance(). CreateInstance() is a method of the COM stan-
dard interface IClassFactory. It creates a generic interface which
we can use to get the IBeep interface. CoGetClassObject() is a
bigger problem. A proper discussion of CoGetClassObject()
belongs in the server side of our COM application. For now, we
can think of it as the function that locates, starts, and requests a
COM class from the server. The actual code of the class factory
interface is implemented by the ATL template class CoComOb-
ject. CoComObject uses the macro DEFAULT_CLASSFACTORY,
which implements the actual class factory. 
Singleton Classes
ATL implements class factories through several macros.
One of the more commonly used of these macros is
DECLARE_CLASSFACTORY_SINGLETON.  If you include this
macro in your class header, the class will become a singleton.
A singleton object is a class that is only created once on a
server. The single instance is shared by all clients that request it.
DECLARE_CLASSFACTORY
The object will have standard 
behavior. CComCoClass uses this 
macro to declare the default class 
factory.
DECLARE_CLASSFACTORY_EX(cf)
Use this macro to override the 
default class factory. To use this you 
would write your own class factory 
that derived from CComClassFac-
tory and override CreateInstance. 
DECLARE_CLASSFACTORY2( lic )
Controls creation through a license. 
Uses the CComClassFactory2 tem-
plate.
DECLARE_CLASSFACTORY_SINGLETON Creates a singleton object.  See the 
discussion below.
Table 6.1
Different class factory options
80    Chapter 6 •
Understanding the Client and Server 
Singletons are a lot like global variables, in that everyone con-
nected to the COM server shares them. Depending on the con-
figuration of the COM server, the singleton can also be 'global'
for the server computer. If your server has some shared resource
that you want all clients to use, a singleton class might be a good
choice. 
Singleton objects are a lot more complicated than they may
appear. You must be very careful in your application design and
recognize the possible difficulties that singletons can present.
The most obvious problem with singletons is that they can
easily become a resource bottleneck. Every client will have to
share access to this single resource, and performance may suffer.
You need to be sure the singleton object doesn't get tied up with
time consuming processing.
There are a host of threading problems associated with sin-
gletons. Unless the object is free threaded, you're going to have
threading issues. If your singleton keeps callback or connection
points, it will not automatically call these interfaces on the
proper thread, and you'll get errors. Despite this issue, you
should probably implement your singletons as free threaded.
That means you'll have to ensure that the code you write is com-
pletely thread safe.
Singletons also may not be unique. You often can't count on
an object being the one-and-only instance of its class. This is
especially true for in-process servers. In this case, the singleton
isn't unique on the server computer. There will be a separate
copy with each in-process DLL that gets loaded. If you're expect-
ing one instance per computer, this won't work. 
Finally, even out-of-process (EXE) servers may have multi-
ple instances. Sometimes a server can be started for multiple
login accounts. This means your singleton class can experience
unexpected behavior depending on which severs get started. 
Despite all of these caveats, there are places where a single-
ton class is appropriate. In general you will create it as part of a
COM server implemented as an NT service and use it on the net-
work to coordinate the activites of multiple clients.
More About Interfaces
81
Additonal Information and Updates: http://www.iftech.com/dcom
Understanding QueryInterface
Interfaces are the most important concept in COM. At its lowest
level, QueryInterface is extremely important in the implementa-
tion of interfaces. This function is being called behind the
scenes, so we often don't see it in client programs. When using
COM at the application level, we are more likely to see interfaces
created through CoCreateInstance. If you delve very far into
CoCreateInstance, you'll see that it is calling QueryInterface. If
you start looking at the ATL generated code, you'll see that calls
to QueryInterface are quite common. Although it is often hidden,
it is important to understand what QueryInterface does, as well
as the rules associated with it. 
The purpose of QueryInterface is to get an interface from a
COM object. Every COM object supports at least two interfaces.
The first interface is always IUnknown. The second interface is
whatever useful interface the object was designed to support.
Many COM objects support several useful interfaces. 
Once you have connected to IUnknown, you can get any of
the other interfaces in a COM object. You pass in the IID of the
requested interface, and QueryInterface will return a pointer to
that interface. You can call any function in the given interface
using that pointer. If the COM object doesn't support the
requested interface, it returns the error E_NOINTERFACE. 
hr = CoCreateInstance(
clsid,           // COM class id
NULL,            // outer unknown
CLSCTX_SERVER,   // server INFO
ID_IUnknown,     // interface id
(void**)&IUnk );    // pointer to interface
if (SUCCEEDED(hr))
{
   IBeepDllObj *pBeep;
   hr=IUnk->QueryInface(
      IID_IbeepDllObj,(void**)&pBeep );
...
82    Chapter 6 •
Understanding the Client and Server 
One of the interesting things about interfaces is that Query-
Interface works backwards too. If you have the IBeepObj object,
you can ask it for the IUnknown interface. 
IUnknown *pUnk;
// Query IBeep for IUnknown interface
hr = pBeep->QueryInterface(
        IID_IUnknown,(void**)&pUnk);
In fact, you can get any interface from any other interface.
For example, take a COM object that supports 3 interfaces, IUn-
known, IA, and IB. We can query the IUnknown for either IA or
IB. We could also query IA for IB, and vice versa. Obviously, you
can't query any of these interfaces for IX, which isn't supported
by the COM object. 
Here are some of the rules of that you need to keep in mind
when using QueryInterface: 
• All COM objects support IUnknown. If it doesn't support
IUnknown, it's not a COM object. 
• You always get the same IUnknown interface. If you call
QueryInterface multiple times for IUnknown, you will
always get the same pointer. 
• You can get any interface of a COM object from any other
interface. 
• There is no way to get a list of interfaces from an inter-
face. (While this may sound interesting, it would be use-
less.) 
• You can get an interface from itself. You can query inter-
face IX for interface IX. 
• Once published, interfaces never change. 
• If you obtain a pointer to an interface once, you can
always get it. See the previous rule. 
Reference Counting with AddRef and Release
COM has no equivalent to the C++ "delete" keyword. Although
there are several ways to create COM interfaces, there is no way
More About Interfaces
83
Additonal Information and Updates: http://www.iftech.com/dcom
to explicitly delete them. This is because COM objects are
responsible for managing their own lifetime.
COM uses the standard technique of reference counting to
decide when to delete objects. The first time a client requests a
specific interface, COM will automatically create a COM object
that supports it. Once created, QueryInterface is called to get an
interface pointer from the object. When you create an interface
with CoCreateInstance or QueryInterface, AddRef is automati-
cally called to increment the reference count. Each new interface
increments the reference count.
When Release is called, the count decrements. When the
count reaches zero, that means nobody is using the object any-
more. At this point the object calls "delete" on itself.
Here is a fictional implementations if IUnknown and its
three methods:
HRESULT _stdcall CSimple::AddRef()
{
return m_nRefCount++;// increment count
}
HRESULT _stdcall CSimple::Release()
{
if (--m_nRefCount == 0) // decrement count
{
delete this;// delete self
return 0;
}
return m_nRefCount;
}
HRESULT _stdcall CSimple::QueryInterface( 
const IID &iid, void **ppi )
{
// make a copy of the "this", cast as an interface
if (iid==IID_IUnknown) 
*ppi = static_cast(this);
else if (iid==IID_ISimple)
*ppi = static_cast(this);
else 
{
// invalid interface requested
84    Chapter 6 •
Understanding the Client and Server 
*ppi = NULL;
return E_NOINTERFACE;
}
// automatically increment counter
static_cast(*ppi)->AddRef();
return S_OK;
}
As you can see, these methods don't do anything fancy.
Every time a copy of the interface is made, the object increments
its counter. As interfaces are released, the count decrements.
When the count reaches zero, the object deletes itself. Query-
Interface automatically calls AddRef, so you don't need to explic-
itly call it (so does CreateInstance.)
The "++" and "--" operators aren't thread safe, so this code
could fail with free threaded applications. For this reason the API
methods InterlockedIncrement and InterlockedDecrement are
often used instead.
Reference counting offers some significant advantages to the
client program. It relieves the client of any knowledge of the
COM object’s state. The client program's only responsibility is to
call Release for each new or copied interface. 
Obviously, if someone forgets to call Release, the object
won't be destroyed. This means it will stay around for the life of
the server.  Worse yet, if Release is called too often, the object
will destroy itself prematurely. Here are some basic rules for
when to call AddRef and Release.
1. Do not call AddRef after functions that return interface
pointers, such as QueryInterface, CoCreateInstance, and
CreateInstance. It has already been called.
2. Call AddRef if you make a copy of a (non-null) interface
pointer.
3. Call Release once for each AddRef that is called. (See #1)
Method Calls
85
Additonal Information and Updates: http://www.iftech.com/dcom
Method Calls
Ultimately, the result of calling QueryInterface is that we end up
with an interface pointer. In the previous section, the program
was able to use the interface pointer to call a function in the
interface. 
pIf->Beep();
This code looks unremarkable. In our example code, we
used an in-process server implemented as a DLL. For a DLL, call-
ing a function is just a pointer away. This interface pointer is
much more interesting if the server is an out-of-process server, or
even a remote server. For a remote server, clearly pIf-> is not just
a normal function pointer. This interface pointer can reach across
process boundaries, and even the network to call its methods. 
When thinking about a pointer, we normally think of it con-
taining a memory address. Obviously it is impossible to directly
access memory across the network. The way COM gets around
this limitation is rather ingenious. COM handles its client/server
communication through a pair of hidden communications
objects. What appears to be a pointer directly to the server is
actually a pointer into a communications object known as a
proxy. The proxy's purpose is to modulate the flow of data
between the client and server using a process known as marshal-
ing. The proxy has a counterpart class, called a stub, which han-
dles the server's end of the communication. The proxy and stub
are either implemented as a separate DLL or built into the server
and client applications. 
86    Chapter 6 •
Understanding the Client and Server 
The client program communicates with the proxy as if it
were communicating directly with the server. The proxy in turn,
works closely with the stub. Together, the proxy and stub handle
all communication between the client and server. The server sees
its input as if it were direct from the client, and the client can call
functions using a pointer as though the server were in a DLL.