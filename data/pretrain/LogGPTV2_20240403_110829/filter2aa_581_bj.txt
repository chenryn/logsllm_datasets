### Business API Invocation and OAuth Base String Calculation

In the following example, an OAuth client invokes the `student` API with a query parameter. We will demonstrate how to calculate the base string for this request:

#### Sample Request
```http
POST /student?name=pavithra HTTP/1.1
Host: server.com
Content-Type: application/x-www-form-urlencoded
Authorization: OAuth realm="simple",
                oauth_consumer_key="dsdsddDdsdsds",
                oauth_token="dsdsdsdsdweoio998s",
                oauth_signature_method="HMAC-SHA1",
                oauth_timestamp="1474343201",
                oauth_nonce="rerwerweJHKjhkdsjhkhj",
                oauth_signature="bYT5CMsGcbgUdFHObYMEfcx6bsw%3D"
```

#### Steps to Calculate the Base String

1. **Get the Uppercase Value of the HTTP Method:**
   ```plaintext
   POST
   ```

2. **Get the Scheme and Host in Lowercase:**
   - If the port has a non-default value, include it.
   ```plaintext
   http://server.com
   ```

3. **Extract the Path and Query Components from the Request URI:**
   ```plaintext
   /student?name=pavithra
   ```

4. **Concatenate All OAuth Protocol Parameters (excluding `oauth_signature`):**
   ```plaintext
   oauth_consumer_key="dsdsddDdsdsds"&
   oauth_token="dsdsdsdsdweoio998s"&
   oauth_signature_method="HMAC-SHA1"&
   oauth_timestamp="1474343201"&
   oauth_nonce="rerwerweJHKjhkdsjhkhj"
   ```

5. **Combine the Output from Steps 2 and 3:**
   ```plaintext
   http://server.com/student?name=pavithra
   ```

6. **Concatenate the Output from Steps 5 and 4 with `&`:**
   ```plaintext
   http://server.com/student?name=pavithra&
   oauth_consumer_key="dsdsddDdsdsds"&
   oauth_token="dsdsdsdsdweoio998s"&
   oauth_signature_method="HMAC-SHA1"&
   oauth_timestamp="1474343201"&
   oauth_nonce="rerwerweJHKjhkdsjhkhj"
   ```

7. **URL-Encode the Output from Step 6:**
   ```plaintext
   http%3A%2F%2Fserver.com%2Fstudent%3Fname%3Dpavithra%26
   oauth_consumer_key%3D%22dsdsddDdsdsds%22%26
   oauth_token%3D%22dsdsdsdsdweoio998s%22%26
   oauth_signature_method%3D%22HMAC-SHA1%22%26
   oauth_timestamp%3D%221474343201%22%26
   oauth_nonce%3D%22rerwerweJHKjhkdsjhkhj%22
   ```

8. **Concatenate the Output from Steps 1 and 7 with `&`:**
   This produces the final base string for calculating the `oauth_signature`.
   ```plaintext
   POST&http%3A%2F%2Fserver.com%2Fstudent%3Fname%3Dpavithra%26
   oauth_consumer_key%3D%22dsdsddDdsdsds%22%26
   oauth_token%3D%22dsdsdsdsdweoio998s%22%26
   oauth_signature_method%3D%22HMAC-SHA1%22%26
   oauth_timestamp%3D%221474343201%22%26
   oauth_nonce%3D%22rerwerweJHKjhkdsjhkhj%22
   ```

Once you have the base string, the OAuth signature is calculated using the HMAC-SHA1 or RSA-SHA1 methods. The `oauth_token_secret` is obtained from the token-credential request phase.

#### Signature Calculation
- **HMAC-SHA1:**
  ```plaintext
  oauth_signature = HMAC-SHA1(consumer_secret & oauth_token_secret, base_string)
  ```
- **RSA-SHA1:**
  ```plaintext
  oauth_signature = RSA-SHA1(RSA private key, base_string)
  ```

### Three-Legged OAuth vs. Two-Legged OAuth

The OAuth flow discussed so far involves three parties: the resource owner, the client, and the resource server. The client accesses a resource hosted on the resource server on behalf of the resource owner. This is the most common pattern in OAuth, also known as three-legged OAuth.

In two-legged OAuth, there are only two parties: the client becomes the resource owner. There is no access delegation in two-legged OAuth.

**Note:** Two-legged OAuth was never standardized by the IETF. The initial draft specification is available at:
- [Two-Legged OAuth Draft](http://oauth.googlecode.com/svn/spec/ext/consumer_request/1.0/drafts/2/spec.html)

If the same `student` API is secured with two-legged OAuth, the request from the client would look like this, with `oauth_token` set to an empty string:

```http
POST /student?name=pavithra HTTP/1.1
Host: server.com
Content-Type: application/x-www-form-urlencoded
Authorization: OAuth realm="simple",
                oauth_consumer_key="dsdsddDdsdsds",
                oauth_token="",
                oauth_signature_method="HMAC-SHA1",
                oauth_timestamp="1474343201",
                oauth_nonce="rerwerweJHKjhkdsjhkhj",
                oauth_signature="bYT5CMsGcbgUdFHObYMEfcx6bsw%3D"
```

In both HTTP Basic authentication and two-legged OAuth, the resource owner acts as the client and directly invokes the API. With HTTP Basic authentication, credentials are passed over the wire, which must be done over TLS. In two-legged OAuth, the `consumer_secret` is never passed over the wire, so it does not need to be on TLS.

HTTP Digest authentication is similar to two-legged OAuth, but it authenticates the user, while two-legged OAuth authenticates the application on behalf of the resource owner. A given resource owner can own multiple applications, each with its own consumer key and consumer secret.

### OAuth WRAP

In November 2009, a new draft specification for access delegation called Web Resource Authorization Profiles (WRAP) was proposed, built on top of the OAuth 1.0 model. WRAP was later deprecated in favor of OAuth 2.0.

**Note:** The initial draft of the WRAP profile submitted to the IETF is available at:
- [WRAP Draft](http://tools.ietf.org/html/draft-hardt-oauth-01)

Unlike OAuth 1.0, WRAP did not depend on a signature scheme. The user experience was similar to OAuth 1.0, but WRAP introduced a new component: the authorization server. All communications related to obtaining a token now happen between the client and the authorization server, not the resource server.

#### WRAP Flow
1. The client redirects the user to the authorization server with its consumer key and callback URL.
2. Once the user authorizes the access rights, they are redirected back to the callback URL with a verification code.
3. The client then calls the access token endpoint of the authorization server with the verification code to get the access token.
4. The client includes the access token in all API calls, which must be on TLS.

Example:
```http
https://friendfeed-api.com/v2/feed/home?wrap_access_token=dsdsdrwerwr
```

**Note:** In November 2009, Facebook joined the Open Web Foundation, along with Microsoft, Google, Yahoo!, and others, to support open standards for web authentication. In December 2009, Facebook added OAuth WRAP support to FriendFeed, which it had acquired a few months earlier.

OAuth WRAP introduced two types of profiles for acquiring an access token: autonomous client profiles and user delegation profiles.

- **Autonomous Client Profiles:**
  - **Client Account and Password Profile:**
    - Uses the client's or resource owner's credentials at the authorization server to obtain an access token.
    - Example cURL command:
      ```sh
      curl -v -k -X POST \
           -H "Content-Type: application/x-www-form-urlencoded;charset=UTF-8" \
           -d "wrap_name=admin&wrap_password=admin&wrap_scope=read_profile" \
           https://authorization-server/wrap/token
      ```
    - Returns `wrap_access_token`, `wrap_refresh_token`, and `wrap_access_token_expires_in`.

  - **Assertion Profile:**
    - Assumes the client obtains an assertion (e.g., a SAML token) and uses it to acquire a `wrap_access_token`.
    - Example cURL command:
      ```sh
      curl -v -k -X POST \
           -H "Content-Type: application/x-www-form-urlencoded;charset=UTF-8" \
           -d "wrap_assertion_format=saml20&wrap_assertion=encoded-assertion&wrap_scope=read_profile" \
           https://authorization-server/wrap/token
      ```

- **User Delegation Profiles:**
  - **Username and Password Profile:**
    - Recommended for installed trusted applications.
    - The application exchanges the end user's username and password for an access token.
    - Example cURL command:
      ```sh
      curl -v -k -X POST \
           -H "Content-Type: application/x-www-form-urlencoded;charset=UTF-8" \
           -d "wrap_client_id=app1&wrap_username=admin&wrap_password=admin&wrap_scope=read_profile" \
           https://authorization-server/wrap/token
      ```

  - **Web App Profile:**
    - Recommended for web applications.
    - Follows a two-step process: gets a verification code from the authorization server and exchanges it for an access token.
    - Example redirection to the authorization server:
      ```http
      https://authorization-server/wrap/authorize?
              wrap_client_id=0rhQErXIX49svVYoXJGt0DWBuFca&
              wrap_callback=https%3A%2F%2Fmycallback&
              wrap_client_state=client-state&
              wrap_scope=read_profile
      ```
    - Example cURL command to exchange the verification code:
      ```sh
      curl -v -k -X POST \
           -H "Content-Type: application/x-www-form-urlencoded;charset=UTF-8" \
           -d "wrap_client_id=0rhQErXIX49svVYoXJGt0DWBuFca&wrap_client_secret=weqeKJHjhkhkihjk&wrap_verification_code=dsadkjljljrrer&wrap_callback=https://mycallback" \
           https://authorization-server/wrap/token
      ```

  - **Rich App Profile:**
    - Commonly used in scenarios where the OAuth client application is an installed application that can work with a browser (e.g., hybrid mobile apps).
    - Follows a similar two-step process as the Web App Profile.
    - Example redirection to the authorization server:
      ```http
      https://authorization-server/wrap/authorize?
              wrap_client_id=0rhQErXIX49svVYoXJGt0DWBuFca&
              wrap_callback=https%3A%2F%2Fmycallback&
              wrap_client_state=client-state&
              wrap_scope=read_profile
      ```
    - Example cURL command to exchange the verification code:
      ```sh
      curl -v -k -X POST \
           -H "Content-Type: application/x-www-form-urlencoded;charset=UTF-8" \
           -d "wrap_client_id=0rhQErXIX49svVYoXJGt0DWBuFca&wrap_verification_code=dsadkjljljrrer&wrap_callback=https://mycallback" \
           https://authorization-server/wrap/token
      ```

OAuth WRAP was one of the initial steps toward OAuth 2.0, introducing extensibility that later became a key part of OAuth 2.0.