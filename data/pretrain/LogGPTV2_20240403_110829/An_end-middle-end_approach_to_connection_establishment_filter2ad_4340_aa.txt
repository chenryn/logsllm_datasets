title:An end-middle-end approach to connection establishment
author:Saikat Guha and
Paul Francis
An End-Middle-End Approach to Connection
Establishment ∗
Saikat Guha
Cornell University, Ithaca
PI:EMAIL
Paul Francis
Cornell University, Ithaca
PI:EMAIL
ABSTRACT
We argue that the current model for ﬂow establishment in the Inter-
net: DNS Names, IP addresses, and transport ports, is inadequate
due to problems that go beyond the small IPv4 address space and
resulting NAT boxes. Even where global addresses exist, ﬁrewalls
cannot glean enough information about a ﬂow from packet headers,
and so often err, typically by being over-conservative: disallowing
ﬂows that might otherwise be allowed. This paper presents a novel
architecture, protocol design, and implementation, for ﬂow estab-
lishment in the Internet. The architecture, called NUTSS, takes into
account the combined policies of endpoints and network providers.
While NUTSS borrows liberally from other proposals (URI-like
naming, signaling to manage ephemeral IPv4 or IPv6 data ﬂows),
NUTSS is unique in that it couples overlay signaling with data-path
signaling. NUTSS requires no changes to existing network proto-
cols, and combined with recent NAT traversal techniques, works
with IPv4 and existing NAT/ﬁrewalls. This paper describes NUTSS
and shows how it satisﬁes a wide range of “end-middle-end” net-
work requirements, including access control, middlebox steering,
multi-homing, mobility, and protocol negotiation.
Categories and Subject Descriptors
C.2.2 [Network Protocols]: Protocol architecture
General Terms
Design, Security
Keywords
NUTSS, End-Middle-End, Off-path, On-Path, Signaling
1.
INTRODUCTION
The Internet was designed to provide a small but critical set of
transport services:
1. User-friendly naming of all Internet hosts (through DNS).
2. Network-level identiﬁcation of all Internet hosts (through the
IP address) and best-effort delivery of datagrams to identiﬁed
hosts.
∗
This work is funded in part by the Cisco CRP program
Permission to make digital or hard copies of all or part of this work for
personal or classroom use is granted without fee provided that copies are
not made or distributed for proﬁt or commercial advantage and that copies
bear this notice and the full citation on the ﬁrst page. To copy otherwise, to
republish, to post on servers or to redistribute to lists, requires prior speciﬁc
permission and/or a fee.
SIGCOMM’07, August 27–31, 2007, Kyoto, Japan.
Copyright 2007 ACM 978-1-59593-713-1/07/0008 ...$5.00.
3. Identiﬁcation of the application on the host that should re-
ceive a given packet (through the port number).
Implicit among these services was the idea that applications would
individually take care of access control. The Internet1 would de-
liver transmitted packets to the target application, and it was up to
the application to decide whether to accept or reject the packet. A
further implication of this approach is that there is no danger in
asking an application to process an incoming packet. The appli-
cation is assumed to be competent to look inside the packet and
decide whether or not to accept it. Industry recognized in the early
90’s that this approach was wrong: DoS attacks can overwhelm an
application, and because of either bugs or just poor design, appli-
cations are incapable of securing themselves with certainty. The
industry answer to this problem was the ﬁrewall, which effectively
enunciated a fourth critical requirement for Internet transport ser-
vice:
4. Blocking of unwanted packets before they reach the target
application (through packet ﬁlters in ﬁrewalls).
Of course it is well-known that the Internet today is ill-equipped
to satisfy these four core requirements. The IP address shortage
prevents all hosts from being identiﬁable in the network. Port num-
bers do not adequately identify applications anywhere outside of
the OS that created the socket. As a result, ﬁrewalls cannot be cer-
tain what application is behind a given port number, use costly deep
packet inspection, and often err on the side of caution (preventing
ﬂows that might otherwise be acceptable).
The ﬁrewall compromised the E2E nature of the Internet archi-
tecture by placing a point of control outside of the end host. While
this development was widely viewed as negative [23], we and oth-
ers [58] believe that it is not only inevitable, but necessary and
largely positive. A primary reason for this is the fact that there may
be multiple legitimate stakeholders in a given packet ﬂow—the end
user, the corporate IT department, or the ISP—each with their own
policies. The E2E nature of the Internet does not easily accommo-
date these policies. Another reason, however, is that sometimes it is
simply economically expedient to deploy a function in the middle,
even if it might ultimately be better done at the ends. Today there
are often good reasons to want to route packets through middle-
boxes other than ﬁrewalls, for instance virus scanners, web caches,
trafﬁc shapers, performance enhancing proxies, protocol translators
(IPv4 to IPv6) and so on. These middleboxes sometimes interrupt
1By “Internet”, we mean the naming and transport services provided by IP
addresses, ports, and DNS for today’s “ﬁxed” Internet (including wireless
access to the wired Internet). Sensor networks and MANETs that perform
their own naming and routing separate from the Internet are not included in
this deﬁnition.
E2E semantics. The legitimate rise of middleboxes leads to another
requirement:
5. Explicit negotiation of middlebox usage between the end-
points and networks in the middle, including the ability to
steer packets through middleboxes not otherwise on the data-
path between source and destination.
We refer to this set of ﬁve requirements as the End-Middle-End
(EME) naming and addressing problem. Together they constitute
what we consider to be the absolute minimum set of requirements
that the modern Internet should satisfy. Put another way, a new
standard sockets interface, and the networking infrastructure that
supports it, should at a minimum satisfy the above requirements.
This paper presents an architecture and protocol, called NUTSS,
that satisﬁes these core EME naming and addressing requirements.
Speciﬁcally, NUTSS names endpoint applications with user-friendly
names, and uses signaling protocols to dynamically and securely do
late binding of named endpoints to ephemeral 5-tuple (addresses,
ports, and protocol) transport ﬂows. Unlike previous architectures
[20, 58], transport ﬂows in NUTSS are ephemeral and renegotiated
using both off-path (an overlay off of the data-path) and on-path
(on the IP data path) signaling protocols when required. This is in
stark contrast to SIP [44] (off-path only) and RSVP [11] (on-path
only), neither of which solves these core problems.
A simpliﬁed NUTSS connection establishment is described as
follows. An initiating host transmits a signaling message contain-
ing source and destination name, and the name of an application.
Using these names as the basis for routing, this message traverses
off-path policy-aware boxes near both ends, where authentication
is done and decisions are made to allow or disallow the connection.
Once allowed, ephemeral addresses, ports, and ﬁrewall-traversal
tokens are conveyed to both ends. Using the learned address as
the basis for routing, this information is then used by an on-path
signaling protocol to establish a data connection through ﬁrewalls.
The ﬁrewall uses the secure tokens as capabilities to allow or dis-
allow ﬂows. It is these tokens that couple the off-path and on-path
signaling phases. If the connection breaks, for instance because of
mobility or ﬁrewall crashing, NUTSS can retry the on-path signal-
ing using the addresses and tokens previously obtained, or failing
that, fall back on off-path signaling using the names to re-establish
the data ﬂow.
NUTSS does more than satisfy the core EME requirements listed
above. By using names as stable unique identiﬁers, and binding
them late to 5-tuple ﬂows as explored in much recent work [35,
49], NUTSS separates identiﬁcation from network location, thus
supporting network mobility and host and site multi-homing. Fi-
nally, NUTSS signaling allows endpoints and middleboxes to ne-
gotiate the protocol stack used in the data-path. This can be used
not only to negotiate transport (UDP, TCP, SCTP, etc.) and secu-
rity (IPsec, TLS, SSH, etc.), but different network layers as well
(IPv6, IPNL [15], TRIAD [20], HIP [35], i3 [49], DoA [58], etc.).
The ability to negotiate protocols as well as middleboxes creates a
framework for managing multiple network layers created through
virtual routers and switches, for instance as proposed for the GENI
infrastructure [19].
Indeed, this very ﬂexibility is exploited by
NUTSS to provide itself with an incremental deployment path (Sec-
tion 2.6).
Up to this point, we have asserted that NUTSS satisﬁes contem-
porary EME requirements without changes to existing network pro-
tocols. Indeed, we can make a stronger assertion: that any new net-
work protocol beneﬁts tremendously from a name-based signaling
approach like NUTSS. This claim ﬂies in the face of recent self-
certifying, identity-based architectures [35, 49, 57, 58, 28], which
suggest not only that ﬂat identities can serve as the basis of network
or content identities, but in some cases go so far as to suggest that
there is no need for a single global user-friendly name space [57,
28]. Rather, a wide range of ad hoc mechanisms, such as search
engines and HTML links, can be used to “discover” identiﬁers.
Our difﬁculty with these architectures derives mainly from the
fourth EME requirement—that unwanted packets must be blocked
before they reach the application, ideally in the network. This re-
quires, among other things, that access control policy (e.g. ACLs)
be conﬁgured in middleboxes. Today ﬁrewall vendors strive to
build devices that may be conﬁgured using user-friendly names
(“BitTorrent”, or “ftp”), and that can ﬁlter on aggregates such as
DNS zones or IP preﬁxes [8]. Flat identiﬁers are neither user-
friendly nor aggregatable, and therefore are not well-suited to serve
as the basis for ACL conﬁguration. This is an issue that the propo-
nents of identity-based approaches have not addressed, in spite of
the fact that they recognize middleboxes as being no longer harm-
ful, and incorporate mechanisms to steer packets through them [49,
58, 28]. There must be a globally-understood user-friendly names-
pace that identiﬁes endpoints (applications, services, users, etc.), as
well as a way to bind those names to the addresses, ports, and iden-
tiﬁers of data packets (collectively referred to here as “addressing
material”).
A key issue, then, is how to bind names to the addressing ma-
terial. Both TRIAD [20] and IPNL [15], which use DNS names
as user-friendly host identiﬁers, bind those names to network ad-
dresses by carrying both names and addresses in data packets. These
schemes literally treat names as addresses in the sense that net-
work routers run routing algorithms on the names themselves, and
bind these to numerical addresses primarily as an optimization for
the address lookup function. Both name-routed and address-routed
packets follow the data path (in other words, are routed on-path).
While neither TRIAD nor IPNL sought to solve the middlebox
problem, one can imagine extending them to do so, for instance
by extending their host names with user, application, and service
names, and by authenticating those extended names. Even so, we
ﬁnd on-path approaches to be less attractive than off-path approaches
that use overlays to do name-based routing. On-path approaches
are both overly constraining and overly intrusive. They are con-
straining in that they force the name-based access control policy
decision to be made on-path. They are intrusive in that they force
all routers to participate in a name-based routing algorithm that,
in the case of TRIAD, may scale poorly, or in the case of IPNL,
requires a DNS lookup at packet forwarding time.
An overlay approach to name-based routing, by contrast, allows
the access control policy decision to be made anywhere in the In-
ternet. In particular, it allows access control to be widely replicated
and therefore more resilient to ﬂash crowds or DoS attacks [40].
DNS, of course, is a name-based routing overlay, and certainly
much of its success may be attributed to the fact that it is decoupled
from on-path routing and is therefore easier to deploy. The prob-
lem with DNS in the EME context is that it is not at all designed
to do access control. DNS is not aware of who is making a DNS
query, and is typically not aware of the purpose of the query (i.e.
which application the query is for). Indeed, current use of dynamic
DNS [55] reveals private location information about mobile users,
making it possible for instance to follow their travel itineraries [22].
Merely conﬁrming the existence of a valid name to an unauthorized
user can be considered a breach of privacy deﬁned as contextual in-
tegrity [37].
Another widely deployed name-based routing overlay is SIP [44],
which is used for media (voice or video) ﬂow establishment. For
the purposes of EME requirements, SIP is at least better than DNS
in that it carries the identity of both endpoints and allows them to be
authenticated. Furthermore, SIP enables a powerful set of features
including mobility, rich naming of users and endpoints, discovery,
the ability to negotiate different protocols, independence from un-
derlying transport, and the creation of infrastructure to support it
all. Nevertheless, SIP itself is not designed to couple the off-path
access control policy decision with on-path access control enforce-
ment. Industry has tried to address this shortcoming in two ways.
One is to implement SIP in the ﬁrewall itself [9]. This approach
does not work in all cases, because the name-routed signaling path
may differ from the address-routed data path. For instance, con-
sider a dual-homed site with combined ﬁrewall/SIP servers F 1 and
F 2. The signaling path may traverse F 1, which authorizes the
ﬂow and allows access for the associated addressing material. The
subsequent data path, however, may traverse F 2, which has not
authorized the ﬂow.
The other way is to deﬁne a protocol that allows the SIP server
to coordinate with the ﬁrewall [32, 50]. This approach suffers from
a similar problem which may be solved in a brute-force fashion
by having the SIP server enable a given ﬂow in all possible ﬁre-
walls that the data ﬂow may traverse. While in the common case (a
dual-homed site) this may be reasonable if inefﬁcient, it becomes
unworkable in scenarios where there are many ﬁrewalls. For in-
stance, a widely replicated distributed ﬁrewall addressed as an IP
anycast group might have hundreds or thousands of ﬁrewalls [14].
The key contribution of this paper is the design of NUTSS, a pro-
tocol that satisﬁes the core EME requirements through the novel
combination of dual signaling—the explicit coupling of off-path
name-routed signaling with on-path address-routed signaling to es-
tablish ephemeral 5-tuple ﬂows. It is this novel coupling that over-
comes the disconnect between name-based routing and IP routing
that plagues previous approaches. NUTSS works with existing data
protocol stacks (IPv4 or IPv6), and includes an incremental deploy-
ment path that initially requires no changes to NAT boxes. As with
other architectures that separate location from identity, NUTSS fa-
cilitates mobility and multi-homing. Besides describing the design
of NUTSS, this paper presents a proof-of-concept implementation
and deployment of NUTSS and examines whether SIP [44] is ap-
propriate as the off-path signaling protocol for NUTSS.
The remainder of this paper is structured as follows: Section 2