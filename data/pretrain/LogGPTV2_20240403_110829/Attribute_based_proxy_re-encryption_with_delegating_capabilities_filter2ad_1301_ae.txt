re-encrypt the challenge ciphertext C∗
with skS(cid:48) so as to output the value of the bit b. This contradicts the IND-sAS-CCA-Or security.
(M∗,ρ∗) to CR
This completes the proof of Theorem 1.
12 A is forbidden to query any private key skS for any S |= (M∗, ρ∗) as well.
2
16
B Security Analysis of CP-ABPRE
matrix, l∗, n∗ ≤ q.
p and sets g1 = gγ, e(g, g)α = e(ga, gaq )·e(g, gα(cid:48)
B.1 Proof of Theorem 2
Proof. Suppose there exists an adversary A who can break the IND-sAS-CCA-Or security of our
scheme. We then construct a reduction algorithm C to decide whether T = e(g, g)aq+1·s or T ∈R GT .
C plays the IND-sAS-CCA-Or game with A as follows.
C takes in (p, g, G, GT , e) ← BSetup(1k) and a q-parallel BDHE instance y and T ∈ GT , where T
is either equal to e(g, g)aq+1·s or to T (cid:48) ∈R GT .
1. Initialization. A outputs the challenge access structure (M∗, ρ∗) to C, where M∗ is an l∗ × n∗
2. Setup. C chooses α(cid:48), γ ∈R Z∗
)13. Then C chooses the
TCR hash functions as in the real scheme, and sends the public parameters param = (p, g, G, GT ,
e, g1, ga, e(g, g)α, H1, H2, H3, H4, H5, H6) to A. From the point of view of A, the public parameters
are identical to those of the real scheme. At any time, A can adaptively query the random oracles
Hj (j ∈ {1, ..., 6}) which are controlled by C. C maintains the lists H List
(j ∈ {1, ..., 6}) which are
initially empty and answers the queries to the random oracles as follows.
, C forwards the
(a) H1: on receipt of an H1 query on (m, β), if there is a tuple (m, β, s) in H List
p. Otherwise, C sets H1(m, β) = s, responds s to A and
predeﬁned value s to A, where s ∈ Z∗
adds the tuple (m, β, s) to H List
, C forwards the
predeﬁned value δ1 to A, where δ1 ∈ {0, 1}2k. Otherwise, C sets H2(R) = δ1, responds δ1 to A
and adds the tuple (R, δ1) to H List
, C forwards the
predeﬁned value δ2,x to A, where zx ∈ Z∗
p, δ2,x ∈ G. Otherwise, C constructs δ2,x as follows.
Let X denote the set of indices i such that ρ∗(i) = x, where 1 ≤ i ≤ l∗. Namely, X contains
the indices of rows of matrix M∗ that corresponds to the same attribute x. C chooses zx ∈R Z∗
and sets
(b) H2: on receipt of an H2 query on R ∈ GT , if there is a tuple (R, δ1) in H List
(c) H3: on receipt of an H3 query on x ∈ U, if there is a tuple (x, zx, δ2,x) in H List
, where δ1 ∈R {0, 1}2k.
, where s ∈R Z∗
p.
p
1
2
1
2
3
j
i,n∗ /bi.
δ2,x = gzx ·(cid:89)
i∈X
ga·M∗
i,1/bi+a2·M∗
i,2/bi+···+an∗·M∗
If X = ∅, C sets δ2,x = gzx. C responds δ2,x to A and adds the tuple (x, zx, δ2,x) to H List
3
.
4
4
, where ξ1 ∈R Z∗
p.
(e) H5: on receipt of an H5 query on δ ∈ {0, 1}k, if there is a tuple (δ, ξ2) in H List
(d) H4: on receipt of an H4 query on (A1, A3, (B1, C1), ..., (Bl, Cl), (M, ρ)), if there is a tuple
, C forwards the predeﬁned value δ3 to
p, δ3 ∈ G. Otherwise, C sets δ3 = gξ1, responds δ3 to A and adds the tuple (A1,
, C forwards the
p. Otherwise, C sets H5(δ) = ξ2, responds ξ2 to A and
, where ξ2 ∈R Z∗
p.
l(cid:48), C(cid:48)
l(cid:48)), S, (M(cid:48), ρ(cid:48))), if there is a tuple
1, C(cid:48)
2, (B(cid:48)
, C forwards the predeﬁned value δ4 to
p, δ4 ∈ G. Otherwise, C sets δ4 = gξ3, responds δ4 to A and adds the tuple
, where ξ3 ∈R Z∗
p.
(A1, A3, (B1, C1), ..., (Bl, Cl), (M, ρ), ξ1, δ3) in H List
A, where ξ1 ∈ Z∗
A3, (B1, C1), ..., (Bl, Cl), (M, ρ), ξ1, δ3) to H List
predeﬁned value ξ2 to A, where ξ2 ∈ Z∗
adds the tuple (δ, ξ2) to H List
1, A(cid:48)
(A(cid:48)
A, where ξ3 ∈ Z∗
(A(cid:48)
1), ..., (B(cid:48)
l(cid:48)), S, (M(cid:48), ρ(cid:48)), ξ3, δ4) in H List
l(cid:48)), S, (M(cid:48), ρ(cid:48)), ξ3, δ4) to H List
(f) H6: on receipt of an H6 query on (A(cid:48)
In addition, C also maintains the following lists which are initially empty.
(a) SKList: records the tuples (S, skS), which are the results of the queries to Osk(S).
(b) RKList: records the tuples (S, (M(cid:48), ρ(cid:48)), δ, β(cid:48), rkS→(M(cid:48),ρ(cid:48)), tag1, tag2, tag3), which are the results
of the queries to Ork(S, (M(cid:48), ρ(cid:48))), where tag1, tag2, tag3 denote that the re-encryption key is
randomly chosen, generated in Ore or in Ork, respectively.
1), ..., (B(cid:48)
1), ..., (B(cid:48)
l(cid:48), C(cid:48)
l(cid:48), C(cid:48)
1, A(cid:48)
1, A(cid:48)
2, (B(cid:48)
2, (B(cid:48)
1, C(cid:48)
1, C(cid:48)
5
5
6
6
13 It can be seen that α = α(cid:48) + aq+1 (which cannot be computed by C).
17
(c) REList: records the tuples (S, (M(cid:48), ρ(cid:48)), CR
(M(cid:48),ρ(cid:48)), tag1, tag2, tag3), which are the results of the
queries to Ore(S, (M(cid:48), ρ(cid:48)), C(M,ρ)), where tag1, tag2, tag3 denote that the re-encrypted ciphertext
is generated under a valid re-encryption key, under a randomly chosen re-encryption key or
generated without any re-encryption key.
3. Query Phase I. A issues a series of queries to which C responds as follows.
(a) P rivate key extraction oracle Osk(S): C constructs the private key skS for an attribute set S as
follows. If S |= (M∗, ρ∗), then C outputs a random bit in {0, 1} and aborts the simulation (due to
the restrictions deﬁned in Deﬁnition 4). Otherwise, that is S (cid:50) (M∗, ρ∗), C chooses r ∈R Z∗
p, w =
(w1, ..., wn∗) ∈ Z∗n∗
i = 014. C then sets
i=1,...,n∗ gaq+1−i·wi = gt. Here t is implicitly deﬁned as t = r+w1·aq +···+wn∗·aq−n∗+1.
i=2,...,n∗ gaq+2−i·wi. One can verify that K is valid
L = gr·(cid:81)
C further constructs K as K = gα(cid:48) · ga·r ·(cid:81)
such that w1 = −1 and ∀i, ρ∗(i) ∈ S we have that w· M∗
p
K = gα(cid:48) · ga·r · (cid:89)
= gα · (gr · (cid:89)
i=2,...,n∗
i=1,...,n∗
gaq+2−i·wi = gα(cid:48) · gaq+1 · g−aq+1 · ga·r · (cid:89)
gaq+2−i·wi
i=2,...,n∗
gaq+1−i·wi)a = gα · La = gα · ga·t.
If x ∈ S but ρ∗(i) (cid:54)= x for any i ∈ {1, ..., l∗}, then C sets Kx = Lzx. It is easily to see
2,x = H3(x)t. Otherwise, C constructs Kx as Kx = Lzx ·
that Kx = Lzx = (gt)zx = δt
i,j . It can be seen that Kx is valid
k=1,...,n∗,k(cid:54)=j(gaq+1+j−k/bi)wk )M∗
i∈X
(cid:81)
j=1,...,n∗ wj·M∗
i = 0. Thus we have(cid:81)
j=1,...,n∗(gaq+1/bi)wj·M∗
i,j = gaq+1·((cid:80)
(b) Re-encryption key extraction oracle Ork(S, (M(cid:48), ρ(cid:48))): if (S, (M(cid:48), ρ(cid:48)), δ, β(cid:48), rkS→(M(cid:48),ρ(cid:48)), ∗, 0,
(cid:80)
where X is the set of all i such that ρ∗(i) = x. Recall that if S (cid:50) (M∗, ρ∗), we then have
w · M∗
i∈X
i,j /bi) =
g0 = 1. Finally, C adds the tuple (S, skS) to SKList and returns skS to A.
1) ∈ RKList, C returns rkS→(M(cid:48),ρ(cid:48)) to A. Otherwise, C works as follows.
– If S |= (M∗, ρ∗) ∧ (S(cid:48), skS(cid:48)) ∈ SKList (for any S(cid:48) |= (M(cid:48), ρ(cid:48))), C outputs a random bit in
{0, 1} and aborts the simulation (due to the restrictions deﬁned in Deﬁnition 4).
– If S |= (M∗, ρ∗)∧ (S(cid:48), skS(cid:48)) /∈ SKList (for any S(cid:48) |= (M(cid:48), ρ(cid:48))), C checks whether (S, (M(cid:48), ρ(cid:48)),
δ, β(cid:48), rkS→(M(cid:48),ρ(cid:48)), 1, 1, 0) ∈ RKList. If yes, C returns rkS→(M(cid:48),ρ(cid:48)) to A and resets tag2 =
p, β(cid:48), δ ∈R {0, 1}k, ¯K ∈R G. C then
0, tag3 = 1. Otherwise, C ﬁrst chooses θ, σ ∈R Z∗
sets rk1 = ¯K · gθ
1, rk2 = gθ, rk3 = gσ, Rx = δσ
2,x, and constructs rk4 as in the real
scheme, where δ2,x is the output of issuing x to H3, x ∈ S. Finally, C returns rkS→(M(cid:48),ρ(cid:48)) =
(S, rk1, rk2, rk3, rk4, Rx) to A, and adds (S, (M(cid:48), ρ(cid:48)), δ, β(cid:48), rkS→(M(cid:48),ρ(cid:48)), 1, 0, 1) to RKList.
14 Such a vector w must exist by the convention of an LSSS. Please refer to the discussion in [26].
i∈X
j=1,...,n∗(g(aj /bi)·r ·(cid:81)
(cid:81)
(cid:81)
Kx = Lzx ·(cid:89)
= Lzx ·(cid:89)
= (gr · (cid:89)
= (gzx ·(cid:89)
(cid:89)
(g(aj /bi)·r · (cid:89)
(g(aj /bi)·r · (cid:89)
(cid:89)
gaq+1−i·wi)zx ·(cid:89)
(cid:89)
i,1/bi+a2·M∗
ga·M∗
j=1,...,n∗
j=1,...,n∗
i=1,...,n∗
i∈X
i∈X
i∈X
j=1,...,n∗
i,2/bi+···+an∗·M∗
k=1,...,n∗,k(cid:54)=j
k=1,...,n∗,k(cid:54)=j
i∈X
= δ(r+w1·aq+···+wn∗·aq−n∗+1)
2,x
= δt
2,x = H3(x)t,
(gaq+1+j−k/bi)wk )M∗
(gaq+1+j−k/bi)wk )M∗
(g(aj /bi)·r · (cid:89)
k=1,...,n∗
i,j
i,j ·(cid:89)
(cid:89)
i∈X
j=1,...,n∗
(gaq+1+j−k/bi)wk )M∗
i,j
i,n∗ /bi)(r+w1·aq+···+wn∗·aq−n∗+1)
(gaq+1/bi)wj·M∗
i,j
18
– Otherwise, if (S, (M(cid:48), ρ(cid:48)), δ, β(cid:48), rkS→(M(cid:48),ρ(cid:48)), 0, 1, 0) ∈ RKList, C returns rkS→(M(cid:48),ρ(cid:48)) to
A, and resets tag2 = 0, tag3 = 1. Otherwise, C ﬁrst constructs the private key skS for the
attribute set S as step (a). C further generates rkS→(M(cid:48),ρ(cid:48)) as in the real scheme, returns
the re-encryption key to A and adds (S, (M(cid:48), ρ(cid:48)), δ, β(cid:48), rkS→(M(cid:48),ρ(cid:48)), 0, 0, 1) to RKList.
(c) Re-encryption oracle Ore(S, (M(cid:48), ρ(cid:48)), C(M,ρ)): C veriﬁes whether Eq. (1) holds. If not (i.e. in-
dicating either the ciphertext C(M,ρ) is invalid or S (cid:50) (M, ρ)), C outputs ⊥. Otherwise, C
proceeds.
– If S |= (M∗, ρ∗) ∧ (S(cid:48), skS(cid:48)) ∈ SKList (for any S(cid:48) |= (M(cid:48), ρ(cid:48))) does not hold,
i. If S |= (M∗, ρ∗) ∧ (S(cid:48), skS(cid:48)) /∈ SKList, C ﬁrst constructs the re-encryption key as the
second case of step (b), further re-encrypts C(M,ρ) to A, and ﬁnally adds (S, (M(cid:48), ρ(cid:48)),
δ, β(cid:48), rkS→(M(cid:48),ρ(cid:48)), 1, 1, 0), (S, (M(cid:48), ρ(cid:48)), CR
(M(cid:48),ρ(cid:48)), 0, 1, 0) to RKList, REList, respectively.
ii. Otherwise, C ﬁrst constructs the re-encryption key as the third case of step (b), further
re-encrypts C(M,ρ) to A, and ﬁnally adds (S, (M(cid:48), ρ(cid:48)), δ, β(cid:48), rkS→(M(cid:48),ρ(cid:48)), 0, 1, 0), (S,
(M(cid:48), ρ(cid:48)), CR
(M(cid:48),ρ(cid:48)), 1, 0, 0) to RKList, REList, respectively.
1
such that A3 = gs