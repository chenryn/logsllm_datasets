# CodeShield: Towards Personalized Application Whitelisting

**Authors:**
- Christopher S. Gates
- Ninghui Li
- Jing Chen
- Robert W. Proctor

**Affiliations:**
- **Christopher S. Gates, Ninghui Li, and Jing Chen**
  - Department of Computer Science and CERIAS
  - Purdue University
  - Email: [PI:EMAIL]
- **Robert W. Proctor**
  - Department of Psychological Sciences and CERIAS
  - Purdue University
  - Email: [PI:EMAIL]

## Abstract
Malware has been a significant security threat for both organizations and homes for over a decade. A common feature of most malware attacks is the execution of an executable file on the system, which enables the attacker to achieve their goals and maintain control of the compromised machine. In this paper, we propose the concept of Personalized Application Whitelisting (PAW) to block all unsolicited foreign code from executing on a system. We introduce CodeShield, an approach to implement PAW on Windows hosts. CodeShield uses a simple and novel security model and a new user interaction method to obtain security-critical decisions from users. We have implemented CodeShield, demonstrated its security effectiveness, and conducted a user study with 38 participants who used CodeShield on their laptops for six weeks. The results show the usability and promise of our design.

## 1. Introduction
End host intrusion is one of the most critical computer security problems today. Compromised hosts can be infected with spyware and rootkits and are often organized into botnets to carry out various attacks, such as data collection, phishing, spamming, and distributed denial of service (DDoS).

In this paper, we aim to protect end host systems, particularly Windows-based hosts used by non-technical users. We observe that almost all existing malware attacks involve downloading and executing malicious code foreign to the host. If a protection system can stop the execution of such foreign code, these attacks can be prevented. Antivirus products, the most widely deployed security technology, attempt to do this using a blacklisting approach. However, this approach is limited because it cannot protect against new or unknown malicious code, and its effectiveness has been shown to be limited [24].

A natural solution is to use a whitelisting approach [21]. Each host should maintain a whitelist of programs, including standalone executables and libraries. Only these programs can be executed. While many commercial whitelisting products exist, they either use a one-size-fits-all whitelist or require a security expert to configure the policy, making them unsuitable for home users or environments needing more flexibility. After evaluating the space of whitelisting solutions, Shein concluded [22]: “As yet, no feasible options exist for home users who wish to use application whitelisting.”

We propose using Personalized Application Whitelisting (PAW) to protect end-user hosts. In the PAW approach, each system has its own whitelist of programs, maintained by cues from the end users. The fundamental challenge is involving end users in the decision-making process while accounting for their lack of sophisticated security knowledge.

To meet this challenge, we identified the following requirements for security interfaces:
1. Reduce the number of times users are asked for a decision.
2. Ask questions that users know how to answer.
3. Avoid making users passively respond to security prompts.
4. Do not provide an easy and insecure way out.

We satisfy these requirements by introducing the following design features for PAW:
a. Use a whitelist of certificates to automatically accept programs signed by trusted certificates.
b. Stop the execution of any code not on the whitelist without prompting the user.
c. Create a security model where users make high-level security decisions rather than per-program decisions.
d. Force the user to take an active action (instead of responding to a dialog box) for adding programs to the whitelist.

These features together reduce the number of decisions a user needs to make, make the safe option the least-resistant path, and require the user's active attention and extra work for the unsafe option.

More specifically, we propose the CodeShield approach for implementing PAW. CodeShield uses a novel and simple security model with two modes: normal and installation. Most of the time, the system is in normal mode, where any "new" program is prevented from executing. The user can switch the system into installation mode through a trusted path mechanism. In installation mode, new programs can be added to the whitelist. In CodeShield, the security decision a user needs to make is: "Do I want to install new software packages on the computer now?" This decision is not related to any specific program or resource but to the user's purpose of using the computer.

The main contributions of this paper are:
1. Proposing Personalized Application Whitelisting (PAW) as an effective approach to protect Windows machines used by non-technical users.
2. Introducing the CodeShield approach to make PAW usable by end users, featuring a novel and simple two-mode security model.
3. Introducing a new user interaction method, the "stopping approach," which stops potentially dangerous actions and requires the user to proactively carry out the action necessary to do so.
4. Implementing CodeShield and conducting a user study with 38 participants to evaluate its usability. The results illustrate the feasibility of the CodeShield approach and highlight the importance of human factors in security.

## 2. Motivation and Related Work
### Blacklisting and Whitelisting
Blacklists are currently the most popular solution to detect and isolate malware. Most of these are commercial products, but there are also research efforts like CloudAV [19] and AVFS [17], which use signatures to detect malicious software. However, signature-based solutions face challenges due to polymorphic code, packers, and the sheer volume of malware. McAfee reported 6 million new unique pieces of malware in the second quarter of 2011, which means about 66,000 new samples per day [12]. Detection rates for major commercial antivirus products are low, with only around 60% of malware detected on the first day, improving to 85% after eight days [24].

Application whitelisting has gained recognition [21]. Products like Windows AppLocker [16], McAfee Application Control [15], and Bit9 [2] exist, but they primarily target enterprise environments where security experts configure policies. This does not apply to home users or environments that need more flexibility. Apple’s iOS approach, which allows only approved software, uses a one-size-fits-all whitelist and is not suitable for desktop environments.

Whitelisting has also been proposed in other contexts, such as defending against spam emails [7] and web-based phishing attacks [26].

### Disk Protection and Verification
Approaches like Rootkit Resistant Disks [4] and Bin Locking [29] protect files from being modified by preventing writing unless certain conditions are met. Tripwire [11] verifies executables by checking file hashes, and DigSig [1] digitally signs binaries and verifies signatures when loading. These approaches do not address the end user's need to manage what binaries can be loaded.

BLADE [14] monitors browser disk activity and GUI events to differentiate intentional downloads from drive-by downloads. CodeShield is similar in spirit, inferring whether a user intends to run a program, but it controls programs from all sources, not just those downloaded by the web browser.

BinInt [28] restricts execution of software except when added through a specific channel. Our approach differs by using trusted certificates for updates and an installation mode for new programs, making user interaction easier.

### Human-Computer Interaction
Our work benefits from studies on the deficiencies of current mechanisms for communicating security risks to users [6, 27, 20]. Motiee et al. [18] found that 69% of participants did not correctly apply the User Account Control (UAC) feature in Microsoft Windows. Users tend to dismiss security dialogs, and several approaches have been proposed to address this, such as disclosing threats in plain language [30], training users through games [23], using polymorphic and audited dialogs [3], and rewarding secure behavior [25]. We propose a different approach: eliminating security dialogs and changing the way users interact with the security mechanism, requiring active action to install new applications.

## 3. User Interface Design of PAW
### 3.1 User-Centric Design
Implementing PAW involves users making decisions about adding new programs to the whitelist. However, pushing security decisions to end users must be done carefully. Given that most ordinary users are non-technical and can be confused by repeated security questions, a defense based on their discretion appears fragile. On the other hand, any system targeting end-users must accommodate a wide spectrum of users and involve them in decision-making. This dilemma between fallible human nature and inevitable human decision-making is the main challenge.

Before discussing our design, we examine the pitfalls of existing security interface designs, using Microsoft's User Account Control (UAC) as an example. UAC introduces mandatory access control mechanisms with coarse-grained access control decisions made by users. The aim is to improve security by limiting application software to standard user privileges until an administrator authorizes an elevation.

**Pitfalls of Existing Security Interfaces:**
- **Users are asked too often:** In existing systems, users are frequently asked for security decisions, and they often form the habit of automatically answering "yes" without reading the warning message. Studies show that 69% of participants did not apply the UAC approach correctly [18].
- **Users are asked questions they do not know how to answer:** Prompts often present vague or overly specific information, which does not help users make informed decisions [9].
- **Users are made to passively respond to security questions:** Most security interfaces show a warning dialog box, asking users to passively respond. They also provide an easy and insecure way out, such as pressing the "continue" button to grant permission or run a program.

**Lessons Learned:**
- Reduce the number of times users are asked for decisions.
- Ask questions that users can answer, matching their mental security model.
- Avoid making users passively respond to security prompts.
- Do not provide an easy and insecure way out; the less secure option should require more effort.

### 3.2 User Interaction
In our system, the first time a new binary is executed, we need to determine if the user intended to perform that action. To enable better decision-making, we introduce a simple security model with two modes: normal and installation. Most of the time, the system is in normal mode, where any "new" program is prevented from executing. When the user intends to install new applications, they switch the system into installation mode, where newly created programs are added to the whitelist. The user needs to decide: "Do I want to install new software right now?" This question is not tied to a specific program but is posed at a high level regarding the user's usage of the computer.

When the system attempts to load a program not on the whitelist, we propose a "stopping approach." In this approach, the system simply stops the potentially dangerous action. The user is informed about the decision but not asked to intervene. However, the system provides the user with the ability to carry out the action through another interface. This approach ensures that to perform a potentially dangerous action, the user must proactively take the necessary steps, calling for their attention and adding a level of inconvenience.