title:CodeShield: towards personalized application whitelisting
author:Christopher S. Gates and
Ninghui Li and
Jing Chen and
Robert W. Proctor
CodeShield: Towards Personalized Application
Whitelisting
Christopher Gates
Department of Computer
Science and CERIAS
Purdue University
PI:EMAIL
Ninghui Li
Department of Computer
Science and CERIAS
Purdue University
Jing Chen
Department of Psychological
Sciences and CERIAS
Purdue University
PI:EMAIL
PI:EMAIL
Robert Proctor
Department of Psychological
Sciences and CERIAS
Purdue University
PI:EMAIL
ABSTRACT
Malware has been a major security problem both in organizations
and homes for more than a decade. One common feature of most
malware attacks is that at a certain point early in the attack, an ex-
ecutable is dropped on the system which, when executed, enables
the attacker to achieve their goals and maintain control of the com-
promised machine. In this paper we propose the concept of Person-
alized Application Whitelisting (PAW) to block all unsolicited for-
eign code from executing on a system. We introduce CodeShield,
an approach to implement PAW on Windows hosts. CodeShield
uses a simple and novel security model, and a new user interac-
tion approach for obtaining security-critical decisions from users.
We have implemented CodeShield, demonstrated its security effec-
tiveness, and conducted a user study, having 38 participants run
CodeShield on their laptops for 6 weeks. Results from the data
demonstrate the usability and promises of our design.
1.
INTRODUCTION
Intrusion of end hosts is among the most important computer se-
curity problems today. Compromised hosts may be infected with
spyware and rootkits. Moreover, compromised hosts are often or-
ganized into botnets to carry out attacks such as data collection,
phishing, spamming, and distributed denial of service.
In this paper we aim to protect those end host systems that are
most in need of protection, namely Window-based hosts used by
non-technical users. We observe that almost all existing malware
attacks involve downloading malicious code foreign to the host,
and then executing the code. If a protection system can stop the
execution of such foreign code, then these attacks are prevented
from succeeding. Antivirus products, probably the most widely
deployed security technology, attempt to do this. However, they
primarily rely on a blacklisting approach: only programs matching
Permission to make digital or hard copies of all or part of this work for
personal or classroom use is granted without fee provided that copies are
not made or distributed for proﬁt or commercial advantage and that copies
bear this notice and the full citation on the ﬁrst page. To copy otherwise, to
republish, to post on servers or to redistribute to lists, requires prior speciﬁc
permission and/or a fee.
ACSAC ’12 Dec. 3-7, 2012, Orlando, Florida USA
Copyright 2012 ACM 978-1-4503-1312-4/12/12 ...$15.00.
279
signatures of known malware will be stopped. This blacklisting
approach suffers from the limitation that it cannot protect against
new malicious code or new variants, and its effectiveness has been
shown to be limited [24].
A natural solution is to use a whitelisting approach [21]. Each
host should maintain a whitelist of programs, including stand-alone
executables and libraries. Only these programs can be executed. In-
deed, many commercial whitelisting products exist. Whitelisting is
highly effective for blocking malware and unwanted programs from
being installed or executed on the system, and it can be applied in
settings where systems change very infrequently or in enterprise
environments where security is of paramount importance. How-
ever, existing whitelisting approaches either use a one-size-ﬁts-all
whitelist or require a security expert to conﬁgure the whitelisting
policy, and thus they cannot be applied to home users or users in
organizations where more ﬂexibility is needed. After evaluating the
space of whitelisting solutions, Shein concluded [22]: “As yet, no
feasible options exist for home users who wish to use application
whitelisting.”
We propose to use Personalized Application Whitelisting (PAW)
to protect end user hosts. In the PAW approach, each system has its
own whitelist of programs, and the whitelist is maintained by cues
from the end users. The fundamental challenge here is that to serve
the diversiﬁed need of the user population, end users must be in-
volved in the decision of whether to add a program to the whitelist.
At the same time, users lack sophisticated security knowledge and
can make mistakes.
To meet this challenge, we examine the pitfalls of existing secu-
rity mechanisms and identiﬁed the following requirements for secu-
rity interfaces: (1) Reduce the number of times users are asked for
a decision. (2) Only ask questions that users know how to answer.
(3) Avoid making users passively respond to security prompts. (4)
Do not provide an easy and insecure way out.
We satisfy these requirements by introducing the following de-
sign features for PAW. (a) Use a whitelist of certiﬁcates to auto-
matically accept programs signed by those trusted certiﬁcates. (b)
Stop the execution of any code not on the whitelist without prompt-
ing the user to make a decision.
(c) Create a security model in
which a user needs to make a high-level security decision, rather
than per-program decisions. (d) Force the user to take an active
action (instead of responding to a dialog box) for adding programs
in the whitelist. The features (a)-(d) together reduce the number of
decisions a user needs to make; they also make the safe option the
least-resistant path, and the unsafe option requires the user’s active
attention and a moderate amount of extra work.
More speciﬁcally, we propose the CodeShield approach for im-
plementing PAW. CodeShield uses a novel and simple security
model. The system is operating in one of two modes: normal or
installation. Most of the time, the system is in normal mode, in
which any “new” program is prevented from executing. The user
can switch the system into installation mode through a trusted path
mechanism. In installation mode, new programs can be added to
the whitelist. In CodeShield, the security decision a user needs to
make is “Do I want to install new software packages on the com-
puter now?” This decision is not related to any speciﬁc program
or resource, and is only related to the user’s purpose of using the
computer.
The main contributions of this paper are as follows. First, we
propose Personalized Application Whitelisting (PAW) as an effec-
tive approach protecting systems that are most in need of protec-
tion, namely Windows machines used by non-technical users. We
introduce the CodeShield approach to making PAW usable by the
end users. At the core of our approach is a novel and simple two-
mode security model.
Second, we introduce a new way of performing user interac-
tions when end users need to make security-critical decisions. The
standard “warning approach” prompts the user with a dialog-box
when a potentially dangerous action occurs and asks whether the
user wants to continue. We propose the “stopping approach”,
which simply stops the potentially dangerous action. The user is
informed about the decision, but not asked to intervene in any way.
However, the system gives the user the ability to carry out this ac-
tion through another interface. The advantage of this approach is
that in order to carry out a potentially dangerous action, the user
must proactively carry out the action necessary to do so. This both
calls for the user’s attention, and adds a level of inconvenience for
performing this dangerous action. This user interaction model can
be applicable in security features other than PAW.
Third, we have have implemented CodeShield, and have con-
ducted a user study to evaluate it. In the study, 38 participants used
CodeShield on their laptops for 6 weeks. The users were divided
into two groups. One group used a design which required reboot-
ing to enter installation mode, and the second group used a version
of CodeShield that also allows switching directly into installation
mode. Our results illustrate the feasibility of the CodeShield ap-
proach and that the ﬁrst group entered installation mode less than
the second group. In the literature, we have found few work that de-
velops a new OS security feature and evaluates its usability through
a real-world user study. Due to the importance of human factors in
security, we think this is an important contribution.
2. MOTIVATION AND RELATED WORK
Blacklisting and Whitelisting. Blacklists are currently the most
popular solution to detect and isolate malware. Most of these are
commercial products; however there are several research thrusts in
this area as well such as CloudAV [19] and AVFS [17] which utilize
signatures to detect malicious software. Polymorphic code, pack-
ers, and the sheer volume of malware have lead to other problems
for signature based solutions. McAfee reports in the second quarter
of 2011 [12] as many as 6 million new unique pieces of malware
were added to their list, which means about 66,000 a day. In the
third quarter this slowed to just around 5 million new unique pieces
of malware. BitShred [10] aims to reign in some of these problems,
creating more efﬁcient mechanisms to cluster and detect malware
as well as identify relevant features of malware to help extract sig-
natures. However the main drawback with any blacklist technology
280
is that new and unknown samples are difﬁcult to detect. This is
demonstrated in [24] where detection rates for 6 major commercial
A/V products were tested. They visited well known malicious sites
to ﬁnd malware samples, and still only around 60% of malware
were detected on the ﬁrst day. This improves to 85% after 8 days.
These numbers were for malwares collected from known malicious
sites. For malwares in the wild, this rate is likely to be even lower.
The advantage of application whitelisting has been increasingly
recognized [21]. Several products for application whitelisting exist
on the market today, such as Windows AppLocker [16], McAfee
Application Control [15], and Bit9 [2]. These products, however,
primarily target enterprise environments, where security experts
conﬁgure the policy for hosts. This does not apply to home users
or users in organizations that cannot enforce strict one-size-ﬁts-all
security policy for all machines (such as a university). One can also
view Apple’s approach of allowing only Apple approved software
on iOS as a whitelisting approach. This, however, uses a one-size-
ﬁts-all whitelist, and is not applicable to desktop environments as
well as not being conducive to freedom. For example, one chal-
lenge is who gets to decide which programs should be on the global
whitelist and how are they deciding whether a program is denied or
allowed. Our work differs in that we aim at enabling each host to
have its own whitelist.
Whitelisting has also been proposed in contexts other than con-
trolling execution of programs. In [7], it is applied to defend against
spam emails, where one accepts only emails from whitelisted ad-
dresses. When a sender is not on the receiver’s whitelist, the sender
receives a challenge, which when successfully completed, adds the
sender’s email address to the whitelist. In [26], whitelisting is ap-
plied to defend against web-based phishing attacks.
Disk Protection and Veriﬁcation. Rootkit Resistant Disks [4]
and Bin Locking [29] look at how to protect ﬁles that are already
on a system from being modiﬁed by adding mechanisms to prevent
writing unless certain conditions hold. Tripwire [11] uses a static
approach to verifying executables by checking a hash of the ﬁle to
detect modiﬁcation. DigSig [1] develops a mechanism for Linux to
digitally signed binaries and verify the signatures when loading bi-
naries. These approaches, however, do not deal with the end user’s
need to manage what binaries can be loaded.
Another related work is BLADE [14], which monitors browser
disk activity (IE and Firefox) as well as GUI events to differentiate
intentional downloads from drive-by downloads. They take cues
from user behavior to make a judgment about whether or not the
download went through the standard mechanism of asking the user
to save the ﬁle or not. CodeShield is similar in spirit in that it infers
whether a user really intends to run a program; however, instead of
controlling only binary programs downloaded by the web browser,
we look at the system as a whole and control programs coming
from other sources as well.
BinInt [28] works on windows and restricts execution of soft-
ware except when it was added to the system through a speciﬁc
channel. To install new programs or update existing ones, the user
needs to launch the installer through the command line, via a spe-
cial privileged command similar in nature to Unix’s sudo. Our ap-
proach differs in that we use trusted certiﬁcates to handle updates
and the installation mode for adding new programs, making the
user interaction easier for end users.
Human Computer Interaction. Our work beneﬁts from studies
on how and why the current mechanisms to communicate security
risks to the user are deﬁcient [6, 27, 20]. Motiee et al. [18] investi-
gated the effectiveness of the User Account Control feature in Mi-
crosoft Windows. Their results show that 69% of participants did
not apply the UAC approach correctly. User tendencies to dismiss
security dialogs have long been recognized, and a number of ap-
proaches have been proposed to address these habits. Researchers
proposed to disclose threats in plain language and strongly suggest
a preferred course of action [30], train users before application use
by employing games [23], use polymorphic and audited dialogs [3],
reward users’ secure behavior instead of penalizing insecure behav-
ior [25]. We propose a different approach to deal with ineffective
security dialog: getting rid of the security dialog and changing the
way that a user interacts with the security mechanism. Rather than
passively responding, the user needs to take active action to install
new applications.
3. USER INTERFACE DESIGN OF PAW
In this paper, we propose Personalized Application Whitelisting
(PAW), in which each host has its own whitelist for programs, and
the whitelist is controlled by the end user. This approach provides
the ﬂexibility needed for end user environment, and is more secure
than a one-size-ﬁts-all approach in that it exposes each host only to
programs on the personalized whitelist.
3.1 User-Centric Design
One key challenge in implementing PAW is that users need to
make decisions on adding new programs into the whitelist. How-
ever, pushing security decisions to end users has to be done care-
fully. Given that the vast majority of ordinary users are nontechni-
cal and can easily be confused and/or worn out by repeated security
questions, a security defense based upon their discretion appears
rather fragile. On the other hand, any system targeting end-users
must have the ﬂexibility to accommodate a wide spectrum of dif-
ferent users, and therefore needs to get the human involved in the
decision making loop. This dilemma between fallible human nature
and inevitable human decision making is the main challenge. Be-
fore discussing our design to meet this challenge, we ﬁrst examine
the pitfalls of existing security interface designs, using Microsofts
User Account Control (UAC) as the main example. UAC intro-
duces mandatory access control mechanisms with coarse-grained
access control decisions to be made by users. The aim of UAC is to
improve security by limiting application software to standard user
privileges until an administrator authorizes an elevation.
Users are asked too often.
In existing systems, users are asked
too often for security decisions, and most of the time they need to
answer “yes”. This makes the users form the habit of automatically
answering “yes”, often without reading the warning message, let
alone carefully considering the decision.
In one study [18], it is shown that 69% of participants did not ap-
ply the UAC approach correctly. According to [8] in the ﬁrst several
months after Vista was available for use, people were experiencing
a UAC prompt in 50% of their “sessions” - a session is everything
that happens from logon to logoff or within 24 hours. With Vista
SP1 and over time, this number has been reduced to about 30% of
the sessions. The report [8] suggests that “users are responding out
of habit due to the large number of prompts rather than focusing on
the critical prompts and making conﬁdent decisions”. However, the
data in [8] also suggest that UAC has been effective in forcing ap-
plication developers to write programs without elevated privileges
unless necessary.
Users are asked questions they do not know how to answer
and/or presented with information that is difﬁcult to under-
stand.
In many security mechanisms, users are told either vague
information such as “XX program would like to make changes to
your computer”, or overly speciﬁc information “XX program with
281
Figure 1: Block notiﬁcation that is displayed to the user when
execution is denied
Y certiﬁcate is trying to change your ﬁrewall.” Most of the prompts
presented to the user aren’t helping them to make more informed
decisions regarding security [9].
Users are made to passively respond to a security question and
are provided with an easy and insecure way out. Most security
interfaces show a security-warning dialog box to the user, asking
the user to passively respond. Furthermore, they allow users to eas-
ily follow the insecure path, e.g., press the “continue” button to
grant a permission or run a program. One problem of this approach
is that the user is “put on the spot” to make a decision. Unless a
decision is made, the system is stuck. When forced to make a deci-
sion, and presented with confusing and challenging information, it
is no wonder users follow the easy and insecure way out.
Users should need to make decision only sparingly.
Based on the above analysis, we learn the following lessons.
• Reduce the number of times users are asked for decisions.
• Users should be asked question that they can answer. The
questions posed to the users should be at a level that match
users’ mental security model.
• Avoid making users passively respond to security
prompts. When possible, avoid putting the user “on the
spot” for a security decision.
• Do not provide an easy and insecure way out. When fac-
ing a security decision, the less secure option should require
more effort to be carried out.
3.2 User Interaction
In our system, the ﬁrst time a new binary is executed we need to
determine whether the user really intended to perform that action.
To design a user interaction model that enables the users to make
better decisions, we introduce a simple scurity model that has two
modes for the system: normal mode and installation mode. Most of
the time, the system is in the normal mode. When the user intends
to install new applications on the system, the user switches the sys-
tem into installation mode, in which newly created programs are
added to the whitelist. In our design, the user needs to decide:
Do I want to install new software right now?
This question is not not tied to a particular program, and is posed
at a high level regarding the user’s usage of the computer.
Next, we need to decide how the user interaction works. More
speciﬁcally, when the system attempts to load a program that is not
on the whitelist, what should happen?
We propose a stopping approach.
In this approach, when the