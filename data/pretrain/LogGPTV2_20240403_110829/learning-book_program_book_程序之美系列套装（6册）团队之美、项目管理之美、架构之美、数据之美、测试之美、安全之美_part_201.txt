2008-01
2008-07
图9-13：JPC中积累的代码
所以，达到“美丽架构”的途径是一个分为4个步骤的计划：
1.全面接受一个大而复杂的问题，找到一组比较简单的、能够使构
建一个完善的端到端的原型系统成为可能的阶段。每个阶段代表
个比最终目标简单和具有较少功能的系统，但是，每个阶段都可以
在它的设计限制内作为完整系统原型的一部分进行测试，而不是作
为最终设计的小部分单独原型（例如，比较传统的单元测试）。
2.在构建每个阶段的每一部分之前，清楚地知道正在开发哪个方面
和为什么。理论上，每个阶段的瓶颈都可以容易地识别，对这些瓶
颈的改进将是下一阶段或下面一些阶段的主要目标。原则上，在着
手大块的工作之前要努力找到办法证明这个方法是否可行一即使对
于每个阶段的每一部分。
1136
---
## Page 1138
3.完成每个阶段的编码并对整个原型进行系统测试，抵制在阶段设
计限制参数上快速推进的诱惑。一定要做到对每个阶段进行完整的
系统测试才通知下一个阶段的测试。
4.对设计进行选代并返回到第二步，无论在什么情况下，你都不应
该担心重写全部的组件。
在几乎不存在商业压力的学术环境中，容易在第四阶段修改代码。
在商业背景中，面对必要的残酷是需要勇气的，但是我们认为在这
种关键时刻缺少勇气是项目失败的一个潜在的和通常没有识别出来
的主要原因，尤其对于最有创新和挑战的项目。
为了获得一个具有完全料想不到的优点的美丽架构，忠于你的信
念，并无所畏惧。
11.在为期30个月的主开发阶段，团队的平均人数为2.5个程序员，
并不都是Java专家。
第10章元循环虚拟机的力量：JikesRVMIanRogersDaveGrove
原则与特性
结构
功能多样性
√模块
概念完整性
依赖关系
V修改独立性
V进程
自动传播
数据访问
V可构建性
1137
---
## Page 1139
增长适应性
熵增抵抗力
在一个托管运行时环境中运行代码是当今并发人员的普遍选择。实
际上，大部分已并发代码都适合于托管运行时环境。然而，虽然运
行时环境日趋流行，但是，多数代码都是用异于运行时环境支持的
语言编写的。在Java虚拟机（Java应用程序的运行时环境）的情况
下，一般用编程语言C和C++来实现这个运行时坏境本身。
在这一章中，我们概要介绍一个名为JikesRVM的成熟虚拟机，它采
用Java语言编写来运行Java运行程序。不但运行时系统是用Java编
写的，而且这个架构的所有其他组件都是用Java编写的。这些组件
包括自适应和优化的编译系统、线程、异常处理和垃圾收集。我们
在这儿概要介绍一下这些系统，还将解释为什么用单一的语言、运
行时和实现所产生的系统更具有内在的吸引力和潜在的优势。
10.1背景
如何开发一种新的编程语言是拥有像T型图（Aho1986）形式的计
算机科学的主要组成部分。图10-1演示了这样的一个T型图：利用
编写的、创建PowerPC机器码的Pascal编译器，生成一个运行
PowerPC机器码的编译器，并创建PowerPC机器码。
与传统的编程语言（把代码编译到程序想要在上面运行的计算机的
机器码）不同，大多数现代的语言都能够编译成架构中立的机器
码。在Java中，这称为Java字节码。中立的机器码容许应用程序导
出到任意运行时环境。所以，Java可以运行在现在的任意一台Java
虚拟机上。
1138
---
## Page 1140
用C编写的Pascal到
PowerPC机器码的编译器
创建的编译器
）
Pascal
Pascal
PowerPC
Machine
Machine
Code
PowerPC
PowerPC
Machine
Machine
Code
Code
PowerPC
Machine
Code
现有的C编译器
图10-1：演示了一个从Pascal到PowerPC机器码编译器的创建的T
型图
现代语言希望通过解决潜在的编程语言缺陷来帮助开发人员。最普
遍的特性是拥有内存安全性，通过限制开发人员如何使用数据类型
和只允许自动的垃圾收集释放内存。另一个特性是抛出异常的能
力。
自足执行（self-hosting）被看作是编程语言的一个重要原则。自足
执行的意思是编程语言应该允许足够的表达式以使得该编程语言可
以用它自身的编程语言编写。例如，用Pascal编写的Pascal编译器是
自足执行的，而用C编写的Pascal编译器就不是。自足执行允许编程
语言的开发人员为他们负责的内容使用该语言的特性。关键的是，
自足运行形成了一个高效的循环，在这个循环中，语言实现者希望
在这个语言实现的性能关键部分使用高级的和有表现力的语言特
性，因此，经常发现创新的方式来有效地实现上述语言特性。虽然
使编译器自足执行很重要，但是，许多运行时环境不是由它们通常
运行的语言编写的。例如，一个用C或C++编写的运行时可能会运
行Java应用程序。如果这个运行时存在一个与内存安全相关的缺
陷，它就会破坏Java应用程序，即使这个Java应用程序本身内存安
全。消除缺陷是拥有一个自足执行的运行时的重要理由。
随着计算机系统更好地理解和发展，编程语言的要求也发生了改
变。例如，编程语言C和C++没有利用多处理器处理线程的标准库
（虽然像POSIX线程和OpenMP这样流行的扩展确实存在）。现代语
言将使这些特性设计到语言和标准库中。充许运行时利用更好的库
和抽象是拥有自足执行的运行时的另一个重要理由。
1139
---
## Page 1141
最后，无论一个运行时和它运行的应用程序在什么时候相互通信，
都有用来通信的一个层。这个通信层的一项工作可能是调整对象，
把一种编程语言的格式改变成另一种语言的格式。对于这些对象，
通信层还必须记住不要回收在这个托管运行时之外使用的任何对
象。这样的通信层不是必需的，或至少在运行时自足执行的许多情
形下不是必需的。
我们希望已经提供了足够的理由来制造一个自足执行的运行时。在
这章中，我们概要介绍一个这样的运行时，JikesRVM，它由Java编
写而成并运行Java应用程序。自足执行运行时坏境被称为元循坏
（Abelson等1985）。JikesRVM不是唯一的元循坏，实际上，它从
类似于Lisp（McCarthy等1962）和Smalltalk的Squeak虚拟机（Ingalls
等1997）这样的运行时系统中波取了灵感。成为一个用Java编写的
元循环虚拟机允许使用杰出的工具、开发环境和库。因为Java在某
些团体中缺少司信性，我们将首先处理一些导致人们相信元循环
Java运行时有内在缺陷的传言。
10.2与运行时环境相关的传言
关于如何最好地创建适用于不同环境的应用程序，仍然有许多激烈
的争论。在应用程序将运行的地方的可用资源、并发应用程序的并
发人员的生产力的挑战和并发环境的成熟度等因素都会有影响。如
果应用程序以相同的方式实现，性能和内存需求将是并发环境的一
个特性。接下来，我们驳斥关于托管坏境最普遍的传言。
10.2.1因为运行时编译器必须快，所以它们必须简单
关于运行时环境的一个误解是它们对纯粹的即时（just-in-time,JIT）
编译感兴趣。即时编译必须快速地创建代码，因为代码一准备好就
会投入使用。虽然这个简单的执行模式用于许多早期的八M和原型
运行时环境，但是，大部分现代生产的虚拟机依赖选择性优化
（selective optimization）的形式。在选择性优化中，在线剖析用于
识别部分的执行方法来用一个激进优化的编译器进行优化；其他方
译。正是选择性使得在运行时能够使用成熟的优化编译器。
10.2.2静态编译器中的无限分析必然意味着更好的性能
1140
---
## Page 1142
因为运行时环境会由许多应用程序大量地使用，所以，优化它们以
在所有的应用程序使用时获得更好的性能是有意义的。然而，如果
运行时没有作为一个动态环境的一部分来创建，一些优化将不能实
现：
在线剖析
运行时的情况在运行时会发生变化一例如，数据块的平均大小或基
于不同设计模式的特殊的编码风格。在线剖析允许及时地使用这些
信息来降低开销，例如分支预测，还允许更高级的优化，例如数值
推测。Java的一个数值推测的例子是推测主要的流输出操作出现在
java.lang.System.out文件流中。数值推测是局部估值的一个扩展，我
们将在后面的"局部求值”一节（10.5.3节）进一步讨论局部估值。
底层系统中的差异
一个应用程序运行的系统差异正逐渐变得越来越大。不同处理器的
能力、内存的数量、不同处理器的数量、电能要求和运行时在上面
执行的系统的负载，这些对于了解运行时应该如何才能最好地适应
都很重要。
过程内分析
过程内分析是一个优化编译器的重要工具，允许跨方法边界优化。
虽然离线分析也没有限制，但通常会导致太多的数据以至编译器不
能确定哪些数据很重要。因为运行时反馈更及时，它可以更好地指
导程序内及其他编译器优化。
10.2.3运行时分析使用许多资源
拥有一个运行时环境就存在这个环境所需要的内存开销。对于传统
的应用程序所使用的标准库来说，类似的需要也同样存在。除此之
外，运行时环境必须保存将来可以帮助它编译和执行的信息。这些
内存需要是适度的，而且，通过及时和有效的内存取样，运行时环
境可以用最小的开销获得最大的好处。
10.2.4动态类加载抑制了性能
许多现代的运行时环境，包括Java，都有能力动态地扩展。这在用
户想要把一个系统的不同部分插在一起的坏境中是有用的；就Java
1141
---
## Page 1143
而言，组件可以从因特网下载下来。这种技术虽然有用，但是，这