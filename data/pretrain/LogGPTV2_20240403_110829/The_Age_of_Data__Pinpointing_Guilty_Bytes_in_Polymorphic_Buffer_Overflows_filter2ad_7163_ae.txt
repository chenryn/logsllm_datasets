WvTftp Heap Overﬂow. A heap-based overﬂow
in the WvTftp 0.9 allows remote attackers to execute
arbitrary code via a long option string in a TFTP
packet [26]. The option name value pairs are given as a
NULL terminated option name, followed by an ascii rep-
resentation of the number value. The function atoi()
is used on the value string, and as long as the original
part of the string equals a value > 8 and< 65464, the
string is strcpy’d into the heap buﬀer. By supplying a
long string for the value, the buﬀer can be overﬂown.
The emulator correctly noticed that the heap control
red region was overwritten with network data. The
resulting signature follows:
( a p p l i c a t i o n : WvTFTP, v e r s i o n : 0 . 9 ,
( t y p e : v a l u e f i e l d name : Opcode ,
v a l u e : Read R e q u e s t
( 1 ) ) ,
( t y p e :
( t y p e :
c r i t i c a l
c r i t i c a l
f i e l d , name : B l o c k s i z e o p t i o n ) ,
l e n g t h , v a l u e : 5 5 7 ) ) .
Asterisk Heap Overﬂow The Asterisk Skinny
channel driver for Cisco SCCP phones in v1.0.11 and
earlier, v1.2.12 and earlier (chan skinny.so) incorrectly
validates a length value in the packet header. An in-
teger wrap-around leads to a heap overwrite, and ar-
bitrary remote code execution [27]. Asterisk checks
whether the inequality (length value+8 ≤ 1000) holds
to convince itself that the user-supplied message ﬁts
in the local buﬀer of size 1000. Because of the in-
teger wrap, the result of the comparison is positive.
And then, the 4 bytes length are copied to the vulner-
able buﬀer, and a read operation is performed storing
(length value + 4) bytes of the message on the heap.
The emulator detects that the control red region on the
heap gets overwritten with network data, and dumps
the corresponding memory area. In the analysis phase,
we ﬁrst come across the whole SKINNY message but
the length ﬁeld (this part has the same age stamp).
Next, we include the 4 bytes underneath it, forming
the length, in the crucial tainted memory region (since
it is a tainted region with correctly ﬁtting age stamps).
Thus the signature speciﬁes the whole SKINNY Packet
for Asterisk 1.0.10 not to exceed 1000 bytes. Notice,
that even though the length ﬁeld does not need to be
included in the signature, the attack description is still
absolutely correct.
libmusicbrainz Stack Overﬂow. A boundary er-
ror within the Download function in lib/http.cpp
(v. 2.1.2 and earlier) can be exploited to cause a buﬀer
overﬂow via a large “Location” ﬁeld in a HTTP redirec-
tion received from a malicious MusicBrainz server [19].
Our analysis engine encountered a 4-byte discontinu-
ity in the critical tainted memory region. The ﬁnal
signature follows:
( a p p l i c a t i o n :
l i b m u s i c b r a i n z , v e r s i o n : v . 2 . 1 . 2 ,
( t y p e : v a l u e f i e l d , name :
r e s p o n s e h e ad e r ,
Authorized licensed use limited to: Tsinghua University. Downloaded on March 25,2021 at 12:39:37 UTC from IEEE Xplore.  Restrictions apply. 
v a l u e : L o c a t i o n ) ,
( t y p e :
( t y p e :
c r i t i c a l
c r i t i c a l
f i e l d , name : L o c a t i o n Header ) ,
l e n g t h , v a l u e : 7 3 ) ) .
6.2 Performance
For realistic performance measurements we compare
the speed of code running on Argos and Prospector
with that of code running without emulation. Note
that while this is an honest way of showing the slow-
down incurred by our system,
it is not necessarily
the most relevant measure. After all, we do not use
Prospector as a desktop machine and in practice hardly
care whether results appear much less quickly than
they would without emulation. The only moment when
slowdown becomes an issue is when attackers decide to
shun slow hosts, because it might be a honeypot. To
the best of our knowledge, automated versions of such
attacks do not exist in practice.
Performance evaluation was carried out by compar-
ing the observed slowdown at guests running on top
of various conﬁgurations of Prospector and unmodiﬁed
Argos with the original host. The host used during
these experiments was an Intel(R) Xeon(TM) CPU at
2.8GHz with 2048KB of L2 cache, and 4GB of RAM,
running Gentoo Linux with kernel 2.6.15.4. The guest
OS ran Ubuntu Linux 5.05 with kernel 2.6.12.9, on top
of Qemu 0.8, Argos and Prospector. To quantify the
observed slowdown we used Apache 2.2.3. We measured
its throughput in terms of processed requests per sec-
ond and the corresponding average response time. We
used httperf for generating requests.
Figure 3 shows the results of the evaluation. We
tested the benchmark application at the guest running
over Argos, and two diﬀerent conﬁgurations of Prospec-
tor: both with and without the double free extension
module. The graph shows that the achieved through-
put increases linearly with the oﬀered load until the
server saturates at a load of 48 calls per second in the
case of Prospector and 57 for Argos. The response
time starts out at about 20-30ms, and then gradually
increases until the server becomes saturated. Beyond
this point, response time for successful calls remains
largely constant at 3000ms.
We can conclude that the overhead expressed in
throughput of a web server incurred by Prospector
compared to Argos is approximately 16%. We have
also performed measurements of slowdown in compar-
ison with the original host (refer to [24] for the full
performance evaluation of Argos.) Apache on Argos is
about 15 times slower than the one run on the native
operating system (on Prospector 18 times). We em-
phasize that we have not used any of the optimization
modules available for Qemu. These modules speed up
the emulator to a performance of roughly half that of
the native system. While it is likely that we will not
quite achieve an equally large speed-up, we are conﬁ-
dent that much optimization is still possible. Moreover,
even though the performance penalty is large, personal
experience with Argos and Prospector has shown us
that it is tolerable.
7 Conclusions
We have described Prospector, an emulator capable
of tracking which bytes contribute to an overﬂow at-
tack on the heap or stack. By careful analysis, and
keeping track of the age of data, we manage to provide
such information with greater accuracy than previous
approaches while maintaining reasonable performance.
The information is important for security experts. We
have also used the information to generate signatures
for polymorphic attacks by looking at the length of pro-
tocol ﬁelds, rather than the actual contents. In prac-
tice, the number of false positives for the signatures
is negligible and the number of false negatives is also
low. At the same time, the signatures allow for eﬃcient
ﬁlters.
References
[1] P. Akritidis, E. P. Markatos, M. Polychronakis, and K. D.
Anagnostakis. Stride: Polymorphic sled detection through
In Proceedings of the 20th
instruction sequence analysis.
IFIP/SEC 2005, 2005.
[2] Anonymous.
Once
upon
a
free().
http://doc.bughunter.net/buﬀer-overﬂow/free.html.
[3] W. X. S. Bhatkar and R. Sekar. Taint-enhanced policy en-
forcement: A practical approach to defeat a wide range of
attacks. In Proceedings of 15th USENIX Security Sympo-
sium, 2006.
[4] D. Brumley, J. Newsome, D. Song, H. Wang, and S. Jha.
Towards automatic generation of vulnerability-based signa-
tures. In Proceedings of the 2006 IEEE Symposium on Se-
curity and Privacy, May 2006.
[5] R. Chinchani and E. Berg.
fast static analysis approach
to detect exploit code inside network ﬂows. In In Recent
Advances in Intrusion Detection, Seattle, WA, 2005.
[6] M. Christodorescu, S. Jha, S. Seshia, D. Song, and
R. Bryant. Semantics-aware malware detection. In Secu-
rity and Privacy Conference, Oakland, CA, May 2005.
[7] M. Costa, J. Crowcroft, M. Castro, A. Rowstron, L. Zhou,
L. Zhang, and P. Barham. Vigilante: end-to-end contain-
ment of Internet worms. In Proceedings of the 20th ACM
Symposium on Operating Systems Principles, 2005.
[8] Crispin Cowan, Calton Pu, Dave Maier, Heather Hintony,
Jonathan Walpole, Peat Bakke, Steve Beattie, Aaron Grier,
PerryWagle and Qian Zhang.
StackGuard: Automatic
Adaptive Detection and Prevention of Buﬀer-Overﬂow At-
tacks. In 7th USENIX Security Symposium, 2002.
499499
Authorized licensed use limited to: Tsinghua University. Downloaded on March 25,2021 at 12:39:37 UTC from IEEE Xplore.  Restrictions apply. 
c
e
s
r
e
p
s
e
i
l
p
e
R
 60
 55
 50
 45
 40
 35
 30
 42  44  46  48  50  52  54  56  58  60
Requests per sec
]
s
m
[
e
m
i
t
e
s
n
o
p
s
e
R
104
103
102
101
Argos - full version
Prospector w/o double free
Prospector - full version
 42  44  46  48  50  52  54  56  58  60
Requests per sec
Figure 3. Apache throughput in terms of maximum processed requests per second, and the average
response time.
[9] H. Feng, J. Giﬃn, Y. Huang, S. Jha, W. Lee, and B. Miller.
Formalizing sensitivity in static analysis for intrusion detec-
tion. In Proceedings the IEEE Symposium on Security and
Privacy, Oakland, CA, 2004.
[21] J. Newsome and D. X. Song. Dynamic taint analysis for au-
tomatic detection, analysis, and signature generation of ex-
ploits on commodity software. In Proceedings of the NDSS,
2005.
[10] H. Feng, O. Kolesnikov, P. Fogla, W. Lee, and W. Gong.
Anomaly detection using call stack information. In Proceed-
ings of the IEEE Security and Privacy Conference, Oak-
land, CA, 2003.
[11] P. Fogla and W. Lee. Evading network anomaly detection
systems: formal reasoning and practical techniques. In Pro-
ceedings of the 13th ACM CCS, 2006.
[12] J. T. Giﬃn, S. Jha, and B. P. Miller. Automated discovery
of mimicry attacks. In D. Zamboni and C. Kr¨ugel, editors,
RAID, volume 4219 of Lecture Notes in Computer Science.
Springer, 2006.
[13] C. Kr¨ugel, E. Kirda, D. Mutz, W. Robertson, and G. Vigna.
Automating mimicry attacks using static binary analysis. In
14th Usenix Security Symposium, Baltimore, MD, August
2005.
[14] C. Kr¨ugel, E. Kirda, D. Mutz, W. Robertson, and G. Vigna.
Polymorphic worm detection using structural information of
executables. In RAID, Seattle, WA, October 2005.
[15] C. Kr¨ugel and G. Vigna. Anomaly detection of web-based
In CCS ’03: Proceedings of the 10th ACM con-
attacks.
ference on Computer and communications security, pages
251–261, New York, NY, USA, 2003. ACM Press.
[16] Z. Liang and R. Sekar. Fast and automated generation of at-
tack signatures: a basis for building self-protecting servers.
In Proceedings of the 12th ACM conference on Computer
and communications security, 2005.
[17] M. V. Mahoney. Network traﬃc anomaly detection based
In SAC ’03: Proceedings of the 2003
on packet bytes.
ACM symposium on Applied computing, pages 346–350,
New York, NY, USA, 2003. ACM Press.
[18] National
Vulnerability
buﬀer
Database.
overﬂows
4089 Multiple
http://nvd.nist.gov/nvd.cfm?cvename=CVE-2006-4089,
2006.
in
CVE-2006-
AlsaPlayer.
[19] National
CVE-2006-
libmusicbrainz.
Vulnerability
buﬀer
Database.
4197 Multiple
http://nvd.nist.gov/nvd.cfm?cvename=CVE-2006-4197,
2006.
overﬂows
in
[20] J. Newsome, B. Karp, and D. X. Song. Polygraph: Auto-
matically generating signatures for polymorphic worms. In
IEEE Symposium on Security and Privacy, May 2005.
500500
[22] Open
Source
Subversion
http://osvdb.org/displayvuln.php?osvdbid=6301, 2004.
date
Vulnerability
parsing
Database.
overﬂow.
[23] R. Perdisci, D. Dagon, W. Lee, P. Fogla, and M. Sharif.
Misleading worm signature generators using deliberate noise
injection. In Proceedings of the 2006 IEEE Symposium on
Security and Privacy (S&P’06), May 2006.
[24] G. Portokalidis, A. Slowinska, and H. Bos. Argos: an em-
In Proc. ACM
ulator for ﬁngerprinting zero-day attacks.
SIGOPS EUROSYS’2006, Leuven, Belgium, April 2006.
[25] A. Rahbar.
Stack
overﬂow on windows
vista.
http://www.sysdream.com/article.php?story
id=241&section id=77, July 2006.
[26] Secunia. CVE-2004-1636 WvTftp Buﬀer Overﬂow Vulner-
ability, October 2004.
[27] SecuriTeam. Asterisk skinny unauthenticated heap over-
ﬂow, October 2006.
[28] SecurityFocus.
psprintf
http://www.securityfocus.com/bid/7723/, 2003.
memory
CAN-2003-0245
corruption
Apache
apr-
vulnerability.
[29] SecurityFocus.
Cast
http://www.securityfocus.com/bid/17040/info, 2006.
Remote
Buﬀer
CVE-2006-1148
Overﬂow
Peer-
Vulnerability.
[30] T. Toth and C. Kr¨ugel. Accurate buﬀer overﬂow detection
via abstract payload execution. In Recent Advances in In-
trusion Detection, 5th International Symposium, 2002.
[31] US-CERT. Vulnerability notes database. http://www.us-
cert.gov, 2007.
[32] H. J. Wang, C. Guo, D. R. Simon, and A. Zugenmaier.
Shield: vulnerability-driven network ﬁlters for preventing
known vulnerability exploits. SIGCOMM Comput. Com-
mun. Rev., 34(4):193–204, 2004.
[33] K. Wang, G. Cretu, and S. J. Stolfo. Anomalous payload-
In Pro-
based worm detection and signature generation.
ceedings of the 8th International Symposium on Recent Ad-
vances in Intrusion Detection, 2005.
[34] X. Wang, Z. Li, J. Xu, M. K. Reiter, C. Kil, and J. Y. Choi.
Packet vaccine: black-box exploit detection and signature
generation. In Proceedings of the 13th ACM CCS, 2006.
[35] X. Wang, C.-C. Pan, P. Liu, and S. Zh. Sigfree: A signature-
free buﬀer overﬂow attack blocker. In Proceedings of 15th
USENIX Security Symposium, 2006.
Authorized licensed use limited to: Tsinghua University. Downloaded on March 25,2021 at 12:39:37 UTC from IEEE Xplore.  Restrictions apply.