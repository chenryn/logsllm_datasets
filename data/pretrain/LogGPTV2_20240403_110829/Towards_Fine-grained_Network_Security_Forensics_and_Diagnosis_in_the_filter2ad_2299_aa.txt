title:Towards Fine-grained Network Security Forensics and Diagnosis in the
SDN Era
author:Haopei Wang and
Guangliang Yang and
Phakpoom Chinprutthiwong and
Lei Xu and
Yangyong Zhang and
Guofei Gu
Towards Fine-grained Network Security Forensics and Diagnosis
in the SDN Era
Haopei Wang
Texas A&M University
PI:EMAIL
Lei Xu
Texas A&M University
PI:EMAIL
Guangliang Yang
Texas A&M University
PI:EMAIL
Yangyong Zhang
Texas A&M University
PI:EMAIL
Phakpoom Chinprutthiwong
Texas A&M University
PI:EMAIL
Guofei Gu
Texas A&M University
PI:EMAIL
ABSTRACT
Diagnosing network security issues in traditional networks is diffi-
cult. It is even more frustrating in the emerging Software Defined
Networks. The data/control plane decoupling of the SDN framework
makes the traditional network troubleshooting tools unsuitable for
pinpointing the root cause in the control plane. In this paper, we
propose ForenGuard, which provides flow-level forensics and di-
agnosis functions in SDN networks. Unlike traditional forensics
tools that only involve either network level or host level, Foren-
Guard monitors and records the runtime activities and their causal
dependencies involving both the SDN control plane and data plane.
Starting with a forwarding problem (e.g., disconnection) which
could be caused by a security issue, ForenGuard can backtrack
the previous activities in both the control and data plane through
causal relationships and pinpoint the root cause of the problem.
ForenGuard also provides a user-friendly interface that allows
users to specify the detection point and diagnose complicated net-
work problems. We implement a prototype system of ForenGuard
on top of the Floodlight controller and use it to diagnose several
real control plane attacks. We show that ForenGuard can quickly
display causal relationships of activities and help to narrow down
the range of suspicious activities that could be the root causes. Our
performance evaluation shows that ForenGuard will add minor
runtime overhead to the SDN control plane and can scale well in
various network workloads.
KEYWORDS
Software Defined Networking, Security, Forensics, Diagnosis
ACM Reference Format:
Haopei Wang, Guangliang Yang, Phakpoom Chinprutthiwong, Lei Xu,
Yangyong Zhang, and Guofei Gu. 2018. Towards Fine-grained Network
Security Forensics and Diagnosis in the SDN Era. In 2018 ACM SIGSAC
Conference on Computer and Communications Security (CCS ’18), October
15–19, 2018, Toronto, ON, Canada. ACM, New York, NY, USA, 14 pages.
https://doi.org/10.1145/3243734.3243749
Permission to make digital or hard copies of all or part of this work for personal or
classroom use is granted without fee provided that copies are not made or distributed
for profit or commercial advantage and that copies bear this notice and the full citation
on the first page. Copyrights for components of this work owned by others than ACM
must be honored. Abstracting with credit is permitted. To copy otherwise, or republish,
to post on servers or to redistribute to lists, requires prior specific permission and/or a
fee. Request permissions from permissions@acm.org.
CCS ’18, October 15–19, 2018, Toronto, ON, Canada
© 2018 Association for Computing Machinery.
ACM ISBN 978-1-4503-5693-0/18/10...$15.00
https://doi.org/10.1145/3243734.3243749
1 INTRODUCTION
Network security diagnosis is important and useful since it can
help the network administrator find a wide range of errors that
may cause severe damages [29]. However, the emerging Software-
Defined Networking (SDN) technique makes network security di-
agnosis much harder, because it decouples the control plane from
the data plane and the logically centralized control plane is com-
plicated and prone to security vulnerabilities [28, 44]. For example,
when you observe a disconnection problem happen in a network
running tens of SDN applications in the control plane, it is difficult
to diagnose which application is exploited and how it makes the
incorrect flow control decisions. Furthermore, since many existing
SDN controllers are reactive and event-driven, the culprit events
behind the misbehaving control plane are even much harder to
be pinpointed. Fundamentally, there is a big gap in the SDN era,
from observing the faulty forwarding behaviors in the data plane
to finding out the root causes of the security problem in the SDN
control plane.
In this work, we plan to bridge this gap by providing digital foren-
sics that investigates the activities of the SDN framework and makes
use of the recorded activities for networking security problems di-
agnosis. Previous research has worked on either network-level or
host-level forensics. In the context of SDN, however, existing ap-
proaches cannot be directly used for our problem. This is because
the networking security problems in SDN networks involve both
the control plane and data plane, which makes individual either
network-level or host-level forensics not effective; instead we need
a systematic integration of both. In particular, in SDN networks,
we observe forwarding problems from the data plane, but the cul-
prits behind are typically in the control plane. That motivates us to
monitor/record the fine-grained activities in the SDN framework
and build causal dependency graphs among them. With careful
diagnosis, the users can backtrack through dependency graphs and
pinpoint the root cause of the security problems. To achieve this,
we face the following challenges:
• What kinds of activities in the SDN framework are required
for the diagnosis purpose? We aim to construct a model of
concise set of activity types that can represent the execution
of the SDN framework and aid the diagnosis. Since activ-
ity recording incurs overhead, the size of the set should be
minimal.
• How to build the causal relationship between different activi-
ties? Simply dynamically taint-tracking all the control and
data flows in the control plane introduces huge overhead,
while we aim to design a relatively lightweight solution.
• How to efficiently and automatically query and locate the
suspicious activities from the large forensics data? There is
an urgent need of a tool that helps users to diagnose issues,
or even automatically locate the corresponding suspicious
activities.
To address the first challenge, we model the states and transitions
of the SDN data plane and the execution of the control plane. Using
the model, the forensics results can concisely reason how each
forwarding behavior occurs and provide easy-to-read information
for diagnosis. To address the second challenge, we design a hybrid
analysis approach that combines static analysis and dynamic pro-
filing to track the information flows in the SDN framework. More
specifically, we statically preprocess the controller/apps and then
use runtime logging data to reconstruct event-oriented execution
traces of the control plane and the state transition graphs of the
data plane. To address the third challenge, we design a functional
module that takes the description of the forwarding problem as
input and automatically responds with the relevant suspicious ac-
tivities as a reference for users. Besides this module, we also provide
a command line tool that allows users to declaratively query for
customized and detailed logged information.
We design a new system, ForenGuard, which provides fine-
grained forensics and diagnosis functions in the SDN networks. The
forensics function of ForenGuard involves both the SDN control
plane and data plane. By monitoring and recording fine-grained
activities in the SDN framework, we build dependency graphs based
on their causal relationships. Our key insight is that the causal
relationship can help users to backtrack the system activities and
understand how each activity happens (e.g., which previous event
triggers which module to generate which flow rule into the data
plane, which causes a forwarding problem). The diagnosis function
supports both fast querying for network forwarding issues and
querying for detailed activities in the SDN framework. ForenGuard
will respond user queries with the dependent graphs of activities
that are relevant to the problem and help the users track back to
the root cause of the forwarding problem.
We implement a prototype system of ForenGuard on top of
the popular Floodlight [3] controller.1 We show several use cases
of ForenGuard that can quickly pinpoint the root causes which
make use of different software vulnerabilities to launch attacks. Our
evaluation results show that our system can provide fine-grained di-
agnosis for many types of networking problems and only introduce
minor runtime overhead.
In summary, we make the following contributions:
• We propose a novel forensics scheme which dynamically
logs the activities of both the SDN control plane and data
plane, and builds event-oriented execution traces and state
transition graphs for diagnosing network forwarding prob-
lems.
• We propose a user-friendly diagnosis tool which provides
an inference-based approach to query the logged elements
that have dependency relationships with the queried ones.
1Our technique is generic and extensible, and could be applicable to other mainstream
controllers as well.
Figure 1: The Abstraction Model of the SDN Framework
• We implement a prototype system, ForenGuard, which
helps network operators trace back past activities of both
the control plane and data plane and pinpoint the root causes
of network security problems. Our evaluation shows that
ForenGuard is useful for diagnosing common SDN net-
working security problems with minor runtime overhead.
We plan to open source ForenGuard to stimulate commu-
nity effort and further research.
We construct our paper as follows. Section 2 specifies the re-
search problems and motivates our solution. Section 3 shows a
model of the control plane and data plane activities for forensics.
Section 4 describes the detailed system design of ForenGuard.
Section 5 provides detailed implementation of ForenGuard, case
studies and evaluation results. Section 6 describes related work.
Section 7 discusses limitations and future work. Finally, Section 8
concludes the paper.
2 BACKGROUND AND EXAMPLE
In this section, we first explain necessary background, the abstract
model of the SDN framework in this paper and the threat model.
Next, we use a running example which is a simple SDN controller
application to explain research problems of diagnosing forwarding
problems in SDN networks and motivate ForenGuard.
2.1 Abstract Model of SDN framework
We first define an abstract model of the SDN framework for foren-
sics and diagnosis purposes. In this paper, our model includes only
important elements which are the most useful ones for diagnosing
networking problems that are caused by the misbehaving control
plane. As shown in Figure 1, SDN decouples the network control
plane from the data plane. The data plane consists of forwarding
devices (i.e., SDN-enabled switches). Each switch contains large
numbers of packet-forwarding rules, and each packet-forwarding
rule is a tuple of pattern, action and priority. At a certain time, the
state of the data plane is the value of all the packet-forwarding rules
at all switches. The communication (i.e., OpenFlow [9] messages)
between the control plane and the data plane may indicate the
changes of the data plane state. For example, FlowMod message will
Data PlaneCore ServicesSDN Control PlaneEvent HandlersEvent ProviderEvent HandlersEvent Handlers. . .App 1App 2App NOpenFlow MessagesAdminAdmin Messages(e.g., REST Reqs)machines or compromised switches in the network and try to at-
tack the SDN control plane by invoking/injecting certain network
events, as shown in [15, 19, 44].
To make a practical forensics and diagnosis system, we assume
the following additional assumptions: First, we assume the attacker
takes action after ForenGuard is deployed. Second, even though
the attacker can mislead the SDN control plane to make faulty for-
warding decisions, she cannot fake or modify the runtime recording
logs or disrupt the logging process, which could be achieved by
using append-only secure log systems such as [11, 45]. Third, al-
though ForenGuard injects some profiling instrumentation into
the controller apps, it will not affect their original decision-making
logic.
The goal of the diagnosis is to pinpoint the root cause of the
caused forwarding problems, i.e., the violation of forwarding-related
invariants. We consider three forwarding-related invariants: con-
nectivity (routing between pairs of hosts), isolation (user-specified
routing limitations), and virtualization (virtual network enforced
flow handling policies). Finally, we focus on flow-level diagnosis
(instead of packet-level diagnosis).
macVlanToSwitchPortMap;
// Learn the port for this source MAC / VLAN
this .macVlanToSwitchPortMap. get ( sw ). put
( new MacVlanPair ( srcMac , vlan ), inPort );
OFPort inPort = pkt . get ( MatchField . IN_PORT ));
MacAddress srcMac = pkt . get ( MatchField . ETH_SRC );
MacAddress dstMac = pkt . get ( MatchField . ETH_DST );
VlanVid vlan = pkt . get ( MatchField . VLAN_VID );
2.3 Running Example
1 public class LearningSwitch {
2 // Stores the learned state for each switch
3 protected Map >
4
5 private Command processPacketIn (sw , pkt ) {
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32 }}
// Try to get the port for the dest MAC / VLAN
OFPort outPort = macVlanToSwitchPortMap.
get ( sw ). get ( new MacVlanPair ( dstMac , vlan ));
if ( outPort == null ) {
// Dest MAC / VLAN not learned , flood it
this . writePacketOut (sw , pkt , OFPort . FLOOD );
} else {
// Dest MAC / VLAN learned , forward
this . pushPacket (sw , pkt , outPort );
// Install flow entry matching this packet
this . writeFlowMod (sw , OFFlowModCommand . ADD ,
OFBufferId . NO_BUFFER , pkt , outPort );
// match 4- tuple : { src / dst MAC , VLAN and input port }
}
return Command . CONTINUE ;
Listing 1: Example Controller Application
Listing 1 (abstracted from a real-world SDN controller appli-
cation [4]) shows a simple but vulnerable application that may
be exploited by malicious end-hosts to launch the host location
hijacking attack. The application implements a learning switch