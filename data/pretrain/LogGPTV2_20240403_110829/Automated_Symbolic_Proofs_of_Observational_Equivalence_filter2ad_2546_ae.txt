### 5.2 Feldhofer’s RFID Protocol

The RFID protocol proposed by Feldhofer et al. [17] is of practical interest due to its implementation with a relatively small number of logic gates, utilizing AES encryption. This makes it well-suited for current RFID chips. Our model is based on the description provided in [26], and we present it using Alice & Bob notation in Figure 5.

**Figure 5: RFID Protocol**
```
R → T : nr
T → R : {|nr, nt|}k(R,T)
R → T : {|nt, nr|}k(R,T)
```

In this protocol, the communication occurs between a reader (R) and a tag (T) that share a secret key \( k(R, T) \). The notation \({| ... |}k\) denotes symmetric encryption.

1. **First Message**: The reader sends a random nonce \( nr \) to the tag.
2. **Second Message**: The tag responds by encrypting \( nr \) and a new nonce \( nt \) with the shared key \( k(R, T) \).
3. **Third Message**: The reader then sends back the nonces in reverse order, also encrypted with the shared key.

The primary security property desired for this protocol is the privacy of the tags. Specifically, if at least two tags share a key with the reader (which is common in practice), an adversary should not be able to determine which tag is communicating with the reader. Tamarin verifies this property in under 1.6 seconds.

### 5.3 TPM_Envelope Protocol

We first provide a brief overview of the key aspects of this protocol [13] and then present the Tamarin rules with additional details. A stateful Trusted Platform Module (TPM) generates a one-time public/private key pair and publishes the public key. 

- **Alice's Role**: Alice encrypts a nonce (the secret) with the public key, creating an envelope, which she sends to Bob.
- **Bob's Role**: Bob can either request the envelope's content from the TPM, thereby learning the secret, or request a TPM-signed certificate stating that he did not ask for the content. The TPM complies with the request and changes its state such that it can only comply with repetitions of the first request but never the other.

This mutable state is crucial because once the choice is made, the original capability of issuing either the certificate or the secret is revoked. The trace-based secrecy property verified in [13] ensures that the adversary can learn either the certificate or the secret, but not both.

We investigated whether this protocol additionally satisfies the real-or-random property for the secret. We added a real-or-random challenge at the end of Alice’s protocol execution, where she sends out either the real secret or a random value. Tamarin fails to prove this property and instead returns a simple attack, assuming deterministic encryption. The attack is as follows:

- The adversary (impersonating Bob) requests a proof that the secret was never received from the TPM.
- The adversary can still distinguish whether the real-or-random challenge emits the real secret or a random value by using the previously published public key to encrypt the emitted value and comparing it to the envelope. If it matches, the emitted value is the real secret; otherwise, it is a random value.

This attack fails when probabilistic encryption is used. The adversary can still encrypt the emitted value with the public key, but the equality check against the envelope will always fail due to the added randomness.

**Figure 6: Rules for Modeling TPM Envelope in Tamarin**

```plaintext
Init : Fr(aik)−−[]→PCR((cid:48)pcr0(cid:48)), AIK(aik), Out(pk(aik))
Ext : PCR(x), In(y)−−[]→PCR(h(x, y))
CertK : AIK(aik), KT(lock, sk)−−[]→Out(sign((cid:104)(cid:48)certk(cid:48), lock, pk(sk)(cid:105), aik))
Quote : PCR(x), AIK(aik)−−[]→Out(sign((cid:104)(cid:48)certcpr(cid:48), x(cid:105), aik))
U nbind : PCR(x), KT(x, sk), In(aenc(m, pk(sk)))−−[]→Out(m)
A1 : Fr(n), PCR(x)−−[]→PCR(h(x, n)), A1(n)
A2 : Fr(s), A1(n), AIK(aik),
     In(sign((cid:104)(cid:48)certk(cid:48), h(h((cid:48)pcr0(cid:48), n),(cid:48) obtain(cid:48)), pk(cid:105), aik))−−[]→
     Out(aenc(s, pk)), A2(n, s), A2ror(s)
A3 : In(sign((cid:104)(cid:48)certpcr(cid:48), h(h((cid:48)pcr0(cid:48), n),(cid:48) deny(cid:48))(cid:105), aik)),
     A2(n, s), AIK(aik)−−[ Denied(s) ]→
CLKey : Fr(sk), PCR(x), In(lock)−−[]→PCR(x), KT(h(x, lock), sk), Out(pk(sk))
ROR : A2ror(s), Fr(f )−−[]→Out(diﬀ[s, f ])
```

- **Init Rule**: Initializes the PCR to the initial string `pcr0`, generates a fresh authentication identification key (AIK), and sends out the public key `pk(aik)`.
- **Ext Rule**: Extends any PCR to the hash of the concatenation of its previous value and an input.
- **CertK Rule**: Certifies a public key for which the TPM has stored the associated private key in the persistent key table fact `KT` with a particular lock.
- **Quote Rule**: Sends out the current PCR value, signed with the TPM’s long-term key.
- **U nbind Rule**: Decrypts and sends out the message in the envelope if the public key used to encrypt the envelope matches the private key in the key table and the lock in the key table matches the current PCR value.
- **A1 Rule**: Alice extends the PCR with a nonce `n` of her choice.
- **A2 Rule**: Alice creates the secret to be put in the envelope encryption and checks that the TPM certifies that the key can only be obtained if the PCR state is extended with `obtain`. She then uses the certified public key to encrypt her secret.
- **A3 Rule**: Alice checks that the TPM’s PCR was extended with `deny` and notes the action `Denied`.
- **CLKey Rule**: Adds a new private key to the TPM’s key table with a specific lock.
- **ROR Rule**: Outputs either the real secret or a random value.

Tamarin finds the attack described above for the observational equivalence of the TPM Envelope protocol. This is a stronger property than trace-based secrecy, which had been verified by [13]. Therefore, we conclude that this protocol should only be used with probabilistic encryption, not deterministic encryption.

### 6. Related Work and Conclusion

We have demonstrated how to extend the well-established multiset rewriting formalism with a novel definition of observational equivalence, making it well-suited for verifying cryptographic protocols. Our approach combines Tamarin’s constraint solving with the bi-system notion, resulting in a high degree of automation.

Our equivalence notion shares similarities with other notions of observational equivalence, including trace equivalence, bisimulation, and context-based notions. However, our approach is more flexible, allowing the choice of environment and underlying equational theory. This flexibility enables the modeling of different types of attackers, which is not possible in process algebras like the applied π-calculus.

Various tools exist for verifying observational equivalence, such as APTE [9, 11] and AKISS [8], which verify trace equivalence but are limited to a bounded number of sessions. ProVerif [7] verifies observational equivalence for an unbounded number of sessions but cannot handle mutable state. SPEC [25] verifies open bisimulation in the spi-calculus but supports only a fixed number of cryptographic primitives and is limited to a bounded number of sessions.

Tools like StatVerif [3] and SAPIC [19] support mutable state but cannot verify observational equivalence. Tamarin, used as SAPIC’s back-end, supports mutable state, an unbounded number of sessions, and Diffie-Hellman equational theories. Prior to our extension, Tamarin could not prove any notion of observational equivalence.

Maude-NPA [23] is another multiset rewriting-based approach that supports observational equivalence but suffers from termination problems and can only present attacks.

Future work includes extending our approach to handle cases where one rule must be matched by a different or multiple rules, and tackling protocols with loops, which may require inductive proofs. We also plan to analyze larger protocols, such as authenticated key exchange protocols with perfect forward secrecy, like NAXOS and its variants.

### 7. References

[1] Tamarin – tool and extended papers. http://www.infsec.ethz.ch/research/software/tamarin.html.

[2] Martín Abadi and Cédric Fournet. Mobile values, new names, and secure communication. In Proceedings of the 28th Symposium on Principles of Programming Languages (POPL’01), pages 104–115, New York, 2001. ACM.

[3] Myrto Arapinis, Joshua Phillips, Eike Ritter, and Mark Dermot Ryan. Statverif: Verification of stateful processes. Journal of Computer Security, 22(5):743–821, 2014.

[4] David Basin, Cas Cremers, and Catherine Meadows. Model checking security protocols. In Handbook of Model Checking, chapter 24. Springer, 2015. To appear.

[5] Mihir Bellare, Anand Desai, David Pointcheval, and Phillip Rogaway. Relations among notions of security for public-key encryption schemes. In CRYPTO, volume 1462 of LNCS, pages 26–45. Springer, 1998.

[6] Mihir Bellare and Phillip Rogaway. Entity authentication and key distribution. In CRYPTO, volume 773 of LNCS, pages 232–249. Springer, 1993.

[7] Bruno Blanchet, Martín Abadi, and Cédric Fournet. Automated verification of selected equivalences for security protocols. Journal of Logic and Algebraic Programming, 75(1):3–51, February–March 2008.

[8] Rohit Chadha, Ştefan Ciobâcă, and Steve Kremer. Automated verification of equivalence properties of cryptographic protocols. In Helmut Seidl, editor, ESOP, volume 7211 of LNCS, pages 108–127. Springer, 2012.

[9] Vincent Cheval. APTE: An algorithm for proving trace equivalence. In TACAS, volume 8413 of LNCS, pages 587–592. Springer, 2014.

[10] Vincent Cheval and Bruno Blanchet. Proving more observational equivalences with ProVerif. In Principles of Security and Trust (POST), volume 7796 of LNCS, pages 226–246. Springer, 2013.

[11] Vincent Cheval, Véronique Cortier, and Stéphanie Delaune. Deciding equivalence-based properties using constraint solving. Theor. Comput. Sci., 492:1–39, 2013.

[12] Stéphanie Delaune, Steve Kremer, and Mark Ryan. Verifying privacy-type properties of electronic voting protocols. Journal of Computer Security, 17:435–487, December 2009.

[13] Stéphanie Delaune, Steve Kremer, Mark Dermot Ryan, and Graham Steel. Formal analysis of protocols based on TPM state registers. In CSF, pages 66–80. IEEE, 2011.

[14] Jannik Dreier, Pascal Lafourcade, and Yassine Lakhnech. Defining privacy for weighted votes, single and multi-voter coercion. In ESORICS, volume 7459 of LNCS, pages 451–468. Springer, 2012.

[15] Jannik Dreier, Pascal Lafourcade, and Yassine Lakhnech. A formal taxonomy of privacy in voting protocols. In Proceedings of IEEE International Conference on Communications (ICC’12), pages 6710–6715, Ottawa, ON, Canada, 2012. IEEE.

[16] Jannik Dreier, Pascal Lafourcade, and Yassine Lakhnech. Formal verification of e-auction protocols. In Proceedings of the 2nd Conference on Principles of Security and Trust (POST’13), volume 7796 of LNCS, pages 247–266, Rome, Italy, 2013. Springer Verlag.

[17] Martin Feldhofer, Sandra Dominikus, and Johannes Wolkerstorfer. Strong authentication for RFID systems using the AES algorithm. In Cryptographic Hardware and Embedded Systems-CHES 2004, pages 357–370. Springer, 2004.

[18] Michèle Feltz and Cas Cremers. On the limits of authenticated key exchange security with an application to bad randomness. Cryptology ePrint Archive, Report 2014/369, 2014.

[19] Steve Kremer and Robert Künnemann. Automated analysis of security protocols with global state. In 2014 IEEE Symposium on Security and Privacy, SP 2014, Berkeley, CA, USA, May 18-21, 2014, pages 163–178. IEEE Computer Society, 2014.

[20] Ralf Küsters and Tomasz Truderung. Using ProVerif to analyze protocols with Diffie-Hellman exponentiation. In Computer Security Foundations Symposium (CSF), pages 157–171. IEEE, 2009.

[21] Brian LaMacchia, Kristin Lauter, and Anton Mityagin. Stronger security of authenticated key exchange. In Provable Security, pages 1–16. Springer, 2007.

[22] Simon Meier, Benedikt Schmidt, Cas Cremers, and David Basin. The TAMARIN Prover for the Symbolic Analysis of Security Protocols. In CAV, volume 8044 of LNCS, pages 696–701. Springer, 2013.

[23] Sonia Santiago, Santiago Escobar, Catherine Meadows, and José Meseguer. A formal definition of protocol indistinguishability and its verification using Maude-NPA. In Security and Trust Management (STM) 2014, pages 162–177. Springer, 2014.

[24] Benedikt Schmidt, Simon Meier, Cas Cremers, and David Basin. Automated analysis of Diffie-Hellman protocols and advanced security properties. In Computer Security Foundations Symposium (CSF), pages 78–94. IEEE, 2012.

[25] Alwen Tiu and Jeremy E. Dawson. Automating open bisimulation checking for the spi calculus. In CSF, pages 307–321. IEEE Computer Society, 2010.

[26] Ton Van Deursen, Sjouke Mauw, and Saša Radomirović. Untraceability of RFID protocols. In Information Security Theory and Practices. Smart Devices, Convergence and Next Generation Networks, pages 1–15. Springer, 2008.