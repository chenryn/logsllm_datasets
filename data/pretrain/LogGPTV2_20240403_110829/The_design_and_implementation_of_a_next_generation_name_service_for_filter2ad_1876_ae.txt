(
d
e
t
a
d
p
u
s
a
c
i
l
p
e
r
0
0.01
level−1 records
level−0 records
0.1
1
update latency (sec)
10
Figure 9: Update Propagation Time: CoDoNS incurs
low latencies for propagating updates. 98% of replicas
get updated within one second.
work. For a million node CoDoNS network, updating 99%
of replicas would take far less than a minute for even the
most popular domain names replicated throughout. This
enables nameowners to relocate their services without no-
ticeable disruptions to their clients.
4.5 Update Propagation
4.6 Summary
Next we examine the latencies incurred by CoDoNS for
proactive update propagation. Figure 9 shows the delay in-
curred for disseminating updates to resource records repli-
cated at di(cid:11)erent levels. 98% of the replicas are updated
within one second even for level-0 records, which are repli-
cated at all nodes in the system.
It takes a few seconds
longer to update some replicas due to high variance in net-
work delays and loads at some hosts. The latency to update
99% of replicas one hop from the home node is about one
second. Overall, update propagation latency in CoDoNS de-
pends on the extent of replication of records. In the worst
case, it takes log N hops to update all the nodes in the net-
Performance measurements from a planetary-scale deploy-
ment against a real workload indicate that CoDoNS can pro-
vide low latencies for query resolution. Massive replication
for the most popular records, but a modest number of repli-
cas per server, achieves high performance with low overhead.
Eliminating the static query processing hierarchy and shed-
ding load dynamically onto peer nodes greatly decreases the
vulnerability of CoDoNS to denial of service attacks. Self-
organization and continuous adaptation of replication avoids
bottlenecks in the presence of (cid:13)ash crowds. Proactive up-
date propagation ensures that unanticipated changes can be
quickly disseminated and cached in the system.
5. RELATED WORK
Several researchers have extensively studied the perfor-
mance of the legacy DNS, and proposed new mechanisms
to improve its performance. In this section, we discuss past
approaches to measure and improve the legacy DNS.
Performance Studies: In 1988, Mockapetris and Dun-
lap published a retrospective study on the development of
the legacy DNS identifying its successful features and short-
comings [27]. Several measurement studies since then have
provided good insight into the advantages and the draw-
backs of the system. A recent survey by Pappas et al. [29]
studies the impact of lame delegations, cyclic dependencies
and reduced nameserver redundancies, on the performance
of the legacy DNS; their (cid:12)ndings con(cid:12)rm the results of our
survey. Earlier studies by Danzig et al. [10] and Brownlee et
al. [4, 5] analyze DNS tra(cid:14)c at root and gTLD nameservers.
Huitema et al. [16] and Wills et al. [41] study DNS perfor-
mance observed from the client side. A more detailed study
of the performance experienced by clients and analysis of
the e(cid:11)ectiveness of caching in the legacy DNS is presented
by Jung et al.
in [18, 19]. These studies have provided in-
valuable insight into the operation of the legacy DNS and
helped us to motivate and design CoDoNS.
Design Alternatives: Recently, a few schemes have
been proposed to improve the failure-resilience and lookup
performance of DNS. Cohen and Kaplan [8] propose a pro-
active caching scheme for DNS records.
In their scheme,
expired DNS records in the cache are proactively fetched
from the authoritative nameservers. They analyze several
heuristics-based prefetching algorithms, and evaluate their
performance. This scheme entails prefetching at interme-
diate caches, which generates substantial amount of back-
ground tra(cid:14)c to update DNS records. In contrast, CoDoNS
fetches each record only once at the home node, signi(cid:12)cantly
reducing the overhead imposed on the legacy DNS.
CoDNS [30] masks delays in the legacy DNS caused by
failures in local resolvers by diverting queries to other, healthy
resolvers. CoDNS provides resilience against temporary prob-
lems with the legacy DNS, but is not intended as a replace-
ment. DDNS [9] and Overlook [37] are peer-to-peer name
services designed to enhance fault tolerance and load bal-
ancing properties. DDNS implements the legacy DNS func-
tionalities on top of Chord [36], an O(log N ) lookup time
structured DHT based on consistent hashing. Overlook is
a general purpose name service built on top of Pastry [34].
Both DDNS and Overlook incur high lookup latencies as re-
quests are routed through O(log N ) overlay hops. Beehive
provides a replication framework that enables CoDoNS to
achieve O(1) lookup performance.
Some researchers have proposed to replace the hierarchical
DNS and URL namespace with (cid:13)at global identi(cid:12)ers [39].
CoDoNS can be used to map such identi(cid:12)ers to physical
locations or to their content with high performance.
1
Structured DHTs: In addition to Chord and Pastry,
several structured DHTs have been proposed in recent years.
CAN [33] maps both objects and nodes on a d-dimensional
torus and provides O(dN
d ) latency. Tapestry [42] employs
consistent hashing [20] to map objects to nodes, and pre(cid:12)x-
matching [31] to route lookups in O(log N ) hops. Kadem-
lia [24] provides O(log N ) lookup performance using a sim-
ilar search technique, but uses the XOR metric for routing.
SkipNet [15] uses skip-lists to provide O(log N ) probabilis-
tic lookup guarantee. Viceroy [23] provides O(log N ) lookup
performance with a constant degree routing graph. A few
DHTs use De Bruijn graphs [21, 40] to achieve O( log N
log log N )
lookup performance. The multi-hop lookup performance
provided by these DHTs is inadequate to support perfor-
mance sensitive application like DNS.
A few recent DHTs provide O(1) lookup performance at
the cost of increased storage and bandwidth consumption.
Kelips [13] limits lookup latency to one or two hops by repli-
cating each object on O(pN ) nodes and using gossip-based
protocols to manage replication. An alternative method to
achieve one hop lookups is described in [14], and relies on
maintaining full routing state (i.e. a complete description
of system membership) at each node. The space and band-
width costs of this approach scale linearly with the size of
the network. Farsite [11] also routes in a constant number
of hops using a (cid:12)xed depth hierarchy, but does not address
rapid membership changes. Overall, these DHTs incur a
minimum delay of at least one overlay hop, whereas CoDoNS
can decrease the average lookup time to less than a single
hop.
6. CONCLUSIONS
The Domain Name System is a critical component of the
Internet. The growth of the Internet namespace, the ex-
plosion in the number of networked hosts, and the recent
emergence of large-scale coordinated attacks have strained
the hierarchical, static architecture of the legacy Domain
Name System. DNS is vulnerable to DoS attacks, incurs
high latencies for query resolution and update propagation,
su(cid:11)ers from miscon(cid:12)gurations, and is di(cid:14)cult to administer.
In this paper, we propose a novel alternative for DNS,
called CoDoNS. CoDoNS retains the most succesful parts of
the DNS design; namely, the hierarchical partitioning of the
namespace, the independent management of di(cid:11)erent parts
of the hierarchy, and the general-purpose database inter-
face. CoDoNS combines peer-to-peer overlay networks with
analytically-informed proactive caching to provide an alter-
native DNS infrastructure.
It resists denial of service at-
tacks, heals around failures, automatically distributes load,
supports fast updates and adapts quickly to (cid:13)ash crowds. It
decouples nameservice from the physical location of name-
servers through cryptographic delegations, and creates a
competitive marketplace for name services. Performance
measurements from a deployment on PlanetLab using real
DNS workloads indicate that CoDoNS can signi(cid:12)cantly im-
prove the lookup performance of legacy DNS with modest
storage and bandwidth overhead.
CoDoNS provides a new platform for nameowners to e(cid:14)-
ciently publish and manage their data. Our current imple-
mentation and deployment provides a simple incremental
migration path from legacy DNS towards the performance
and functionality o(cid:11)ered by CoDoNS. During this process
CoDoNS can serve as a safety net alongside legacy DNS.
Acknowledgments
We are grateful to Robert Morris, Hari Balakrishnan, Jaeyon
Jung, and Emil Sit for providing their DNS traces.
REFERENCES
[1] M. Andrews. Negative Caching of DNS Queries. RFC 2308,
Mar 1998.
[2] A. Bavier, M. Bowman, B. Chun, D. Culler, S. Karlin,
S. Muir, L. Peterson, T. Roscoe, T. Spalink, and M. Wawr-
zoniak. Operating System Support for Planetary-Scale Net-
work Services. Symposium on Networked Systems Design
and Implementation, San Francisco CA, Mar 2004.
[3] T. Brisco. DNS Support for Load Balancing. RFC 1794, Apr
1995.
[4] N. Brownlee, kc Cla(cid:11)y, and E. Nemeth. DNS Measurements
at a Root Server. GlobeCom, San Antonio, TX, Nov 2001.
[5] N. Brownlee, kc Cla(cid:11)y, and E. Nemeth. DNS Root/gTLD
Performance Measurements. Systems Administration Con-
ference, San Diego CA, Dec 2001.
[6] L. Breslau, P. Cao, L. Fan, G. Phillips, and S. Shenker. Web
Caching and Zipf-like Distributions: Evidence and Implica-
tions. International Conference on Computer Communica-
tions, New York NY, Mar 1999.
[7] M. Castro, P. Druschel, A. Ganesh, A. Rowstron, and
D. Wallach. Secure Routing for Structured Peer-to-Peer
Overlay Networks. Symposium on Operating Systems Design
and Implementation, Boston MA, Dec 2002.
[8] E. Cohen and H. Kaplan. Proactive Caching of DNS Records:
Addressing a Performance Bottleneck. Symposium on Appli-
cations and the Internet, San Diego-Mission Valley CA, Jan
2001.
[9] R. Cox, A. Muthitacharoen, and R. Morris. Serving DNS us-
ing a Peer-to-Peer Lookup Service". International Workshop
on Peer-To-Peer Systems, Cambridge MA, Mar 2002.
[10] P. Danzig, K. Obraczka, and A. Kumar. An Analysis of
Wide-Area Nameserver Tra(cid:14)c: A study of the Internet Do-
main Name System. SIGCOMM, Baltimore MD, 1992.
[11] J. Douceur, A. Adya, W. Bolosky, D. Simon, and
M. Theimer. Reclaiming Space from Duplicate Files in a
Serverless Distributed File System. International Confer-
ence on Distributed Computing Systems, Vienna Austria, Jul
2002.
[12] D. Eastlake. Domain Name System Security Extensions.
RFC 2535, Mar 1999.
[13] I. Gupta, K. Birman, P. Linga, A. Demers, and R. van Re-
nesse. Kelips: Building an E(cid:14)cient and Stable P2P DHT
Through Increased Memory and Background Overhead. In-
ternational Workshop on Peer-To-Peer Systems, Berkeley
CA, Feb 2003.
[14] A. Gupta, B. Liskov, and R. Rodrigues. E(cid:14)cient Routing
for Peer-to-Peer Overlays. Symposium on Networked Sys-
tems Design and Implementation, San Francisco CA, Mar
2004.
[15] N. Harvey, M. Jones, S. Saroiu, M. Theimer, and A. Wol-
man. SkipNet: A Scalable Overlay Network with Practical
Locality Properties., Symposium on Internet Technologies
and Systems, Seattle WA, Mar 2003.
[16] C. Huitema and S. Weerahandi. Internet Measurements: the
Rising Tide and the DNS Snag., ITC Specialist Seminar on
Internet Tra(cid:14)c Measurement and Modeling, Monterey CA,
Sep 2000.
[17] Internet
Systems Consortium. BIND Vulnerabilities.
www.isc.org/sw/bind/bind-security.php, Feb 2004.
[18] J. Jung, E. Sit, H. Balakrishnan, and R. Morris. DNS Per-
formance and E(cid:11)ectiveness of Caching. SIGCOMM Internet
Measurement Workshop, San Francisco CA, Nov 2001.
[19] J. Jung, A. Berger, and H. Balakrishnan. Modeling TTL-
based Internet Caches. International Conference on Com-
puter Communications, San Francisco CA, Mar 2003.
[20] D. Karger, E. Lehman, T. Leighton, M. Levine, D. Lewin
and R. Panigrahy. Consistent Hashing and Random Trees:
Distributed Caching Protocols for Relieving Hot-spots on the
World Wide Web. Symposium on Theory of Computing, El
Paso TX, Apr 1997.
[21] F. Kaashoek and D. Karger. Koorde: A Simple Degree-
Optimal Distributed Hash Table. International Workshop on
Peer-To-Peer Systems Workshop, Berkeley CA, Feb 2003.
[22] A. Kumar, J. Postel, C. Neuman, P. Danzig, and S. Miller.
Common DNS Implementation Errors and Suggested Fixes.
RFC 1536, Oct 1993.
[23] D. Malkhi, M. Naor, and D. Ratajczak. Viceroy: A Scal-
able and Dynamic Emulation of the Butter(cid:13)y. Symposium
on Principles of Distributed Computing, Monterey CA, Aug
2002.
[24] P. Maymounkov and D. Mazi(cid:19)eres. Kademlia: A Peer-to-peer
Information System Based on the XOR Metric. International
Workshop on Peer-To-Peer Systems, Cambridge MA, Mar
2002.
[25] P. Mockapetris. Domain Names: Concepts and Facilities.
RFC 1034, Nov 1987.
[26] P. Mockapetris. Domain Names: Implementation and Spec-
i(cid:12)cation. RFC 1035, Nov 1987.
[27] P. Mockapetris and K. Dunlop. Development of the Domain
Name System. SIGCOMM, Stanford CA, 1988.
[28] R. Naraine. Massive DDoS Attack Hit DNS Root Servers.
www.internetnews.com/dev-news/article.php/1486981, Oct
2002.
[29] V. Pappas, Z. Xu, S. Lu, D. Massey, A. Terzis, and L. Zhang.
Impact of Con(cid:12)guration Errors on DNS Robustness. SIG-
COMM, Portland OR, Aug 2004.
[30] K. Park, Z. Wang, V. Pai, and L. Peterson. CoDNS : Masking
DNS Delays via Cooperative Lookups. Princeton University
Computer Science Technical Report TR-690-04, Feb 2004.
[31] G. Plaxton, R. Rajaraman, and A. Richa. Accessing nearby
copies of replicated objects in a distributed environment.
Theory of Computing Systems, vol 32, pg 241-280, 1999.
[32] V. Ramasubramanian and E. G. Sirer. Beehive: Exploit-
ing Power Law Query Distributions for O(1) Lookup Perfor-
mance in Peer to Peer Overlays. Symposium on Networked
Systems Design and Implementation, San Francisco CA,
Mar 2004.
[33] S. Ratnasamy, P. Francis, M. Hadley, R. Karp, and
S. Shenker. A Scalable Content-Addressable Network. SIG-
COMM, San Diego CA, Aug 2001.
[34] A. Rowstron and P. Druschel. Pastry: Scalable, decentral-
ized object location and routing for large-scale peer-to-peer
systems. International Conference on Distributed Systems
Platforms, Heidelberg, Germany, Nov 2001.
[35] A. Shaikh, R. Tewari, and M. Agarwal. On the E(cid:11)ectiveness
of DNS-based Server Selection. International Conference on
Computer Communications, Anchorage AK, Apr 2001.
[36] I. Stoica, R. Morris, D. Karger, F. Kaashoek, and H. Bal-
akrishnan. Chord: A scalable Peer-to-peer Lookup Service
for Internet Applications. SIGCOMM, San Diego CA, Aug
2001.
[37] M. Theimer and M. Jones. Overlook: Scalable Name Service
on an Overlay Network International Conference on Dis-
tributed Computing Systems, Vienna Austria, Jul 2002.
[38] P. Thurrott. Microsoft Su(cid:11)ers Another DoS Attack.
www.winnetmag.com/WindowsSecurity/Article/ArticleID/
19770/WindowsSecurity 19770.html, Jan 2001.
[39] M. Wal(cid:12)sh, H. Balakrishnan, and S. Shenker. Untangling the
Web from DNS. Symposium on Networked Systems Design
and Implementation, San Francisco CA, Mar 2004.
[40] U. Wieder and M. Naor. A Simple Fault Tolerant Distributed
Hash Table. International Workshop on Peer-To-Peer Sys-
tems, Berkeley CA, Feb 2003.
[41] C. Wills and H. Shang. The Contribution of DNS Lookup
Costs to Web Object Retrieval. Worcester Polytechnic In-
stitute Technical Report TR-00-12, Jul 2000.
[42] B. Zhao, L. Huang, J. Stribling, S. Rhea, A. Joseph, and
J. Kubiatowicz. Tapestry: A Resilient Global-scale Overlay
for Service Deployment. Journal on Selected Areas in Com-
munications, 2003.
[43] L. Zhou, F. B. Schneider, and R. van Renesse. COCA: A
Secure Distributed On-line Certi(cid:12)cation Authority. Trans-
actions on Computer Systems vol 20, Nov 2002.