# 反击恶意软件：从源头做起

## 会议信息
- **会议名称**：DEF CON CHINA 1.0 (2019)
- **演讲者**：Alexandre Borges
- **职位**：恶意软件与安全研究员

## 演讲者简介
- **恶意软件和安全研究员**
- **演讲经历**：
  - DEFCON USA 2018
  - HITB 2019 Amsterdam
  - CONFidence Conf. 2019
  - BSIDES 2018/2017/2016
  - H2HC 2016/2015
  - BHACK 2018
- **专业领域**：恶意软件分析、内存分析、数字取证及Rootkits
- **其他**：《数字取证、安全与法律》期刊审稿人

## 目录
- 介绍
- 反逆向和虚拟封装器
- METASM
- MIASM
- DTRACE on Windows
- 反虚拟化
- 结论

## 介绍
在日常处理的恶意软件样本中，我们经常会遇到使用已知打包工具（如ASPack, Armadillo, Petite, FSG, UPX, MPRESS, NSPack, PECompact, WinUnpack等）进行压缩的情况。大多数情况下，这些样本可以通过脚本轻松解压。此外，我们也熟悉一些常用的内存分配API，例如VirtualAlloc/Ex(), HeapCreate() / RtlCreateHeap(), HeapReAlloc(), GlobalAlloc(), RtlAllocateHeap()等。

对于使用定制打包技术的恶意软件，我们仍可以从内存中转储并修复ImageAddress字段，然后利用IDA Pro中的impscan插件对IAT进行分析。例如：
```shell
export VOLATILITY_PROFILE=Win7SP1x86
python vol.py -f memory.vmem procdump -p 2096 -D . --memory
python vol.py -f memory.vmem impscan --output=idc -p 2096
```

## 脚本示例
以下是一个用于转储包含可执行程序的内存段的脚本示例：

```assembly
// 文件名: dumpexe.txt (初稿)
// 注释: 转储包含可执行程序的模块
// 作者: Alexandre Borges
// 日期: 今日

entry:
    msg "转储包含可执行程序的模块."
    msg "在继续之前，您必须在EP"
    bc          // 清除已有断点
    bphwc       // 清除已有硬件断点
    bp VirtualAlloc  // 在VirtualAlloc设置断点
    erun        // 运行并将所有的第一个异常传递给应用程序
core:
    sti         // 单步执行
    sti
    sti
    sti
    sti
    x64dbg      // 使用x64dbg调试器
script 1/3

find cip,"C2 1000"  // 找到VirtualAlloc的返回点
bp $result   // 设置断点
erun         // 运行并将所有的第一个异常传递给应用程序
cmp eax,0    // 测试eax(没有分配内存)是否等于零
je pcode     // 跳转到pcode标签
bpm eax,0,x  // 设置可执行内存断点，如果中断并恢复它。
erun         // 运行并将所有的第一个异常传递给应用程序
// 尝试查找模块内存中是否有“This program”字符串.
findall $breakpointexceptionaddress,"546869732070726F6772616D"   
cmp $result,0  // 检查是否找到
je pcode      // 跳转到pcode标签
$dumpaddr = mem.base($breakpointexceptionaddress)  // 找到存储基址.
$size = mem.size($breakpointexceptionaddress)      // 找到存储的大小.
savedata :memdump:,$dumpaddr,$size  // 转储段.
msgyn "Memory dumped! Do you want continue?"  // 显示会话
cmp $result,1  // 检查选择
je scode      // 跳转到Scode标签
bc            // 清除已有断点
bphwc         // 清除已有硬件断点
ret           // 退出
x64dbg        // 使用x64dbg调试器
script 2/3

pcode:
    msgyn "没有PE文件!要继续吗?"
    cmp $result,0  // 检查我们是否不想继续
    je final
    sti           // 单步执行
    erun          // 运行并将所有第一个异常传递给应用程序
    jmp core      // 跳转到core标签
scode:
    msg "Let's go to next dump"  // 显示会话
    erun          // 运行并将所有第一个异常传递给应用程序
    jmp core      // 跳转到core标签
final:
    bc            // 清除已有断点
    bphwc         // 清除已有硬件断点
    ret           // 退出
!
x64dbg         // 使用x64dbg调试器
script 3/3
```

## 反逆向
混淆的主要目的是保护软件不被逆向分析，防止知识产权被侵犯。对于我们来说，这意味着保护恶意代码。虽然混淆并不能真正保护软件，但它可以增加逆向人员的工作难度。常见的混淆手段包括使用VBA和Powershell编写的用户恶意软件，以及通过IDA Pro SDK编写插件来扩展IDA Pro的功能，从而自动解压奇怪的恶意文件。

某些现代混淆技术（如VMprotect、Themida、Arxan和Agile .Net）使得逆向过程非常复杂。这些保护程序通常在64位代码中使用，并且原始IAT从原始代码中删除。它们还包含字符串加密、内存完整性检查等功能，使得从内存中转储干净的可执行文件变得不可能。指令也被虚拟化为RISC指令，进一步增加了逆向的难度。

## 虚拟化
虚拟化是许多现代保护器采用的一种高级混淆技术。其工作原理如下：
- 上下文切换组件将寄存器和标志信息“传输”到虚拟机上下文。相反的移动稍后从虚拟机和本机上下文中完成。
- 从本机寄存器到虚拟寄存器的转换可以是一对一的，但并不总是如此。
- 在虚拟机内部，循环过程包括获取指令、解码指令、查找关联操作码并在处理器表中调用目标处理器。

```c
int defcon(int x) 
{
    “Virtualizer” (bytecodes)
    vm_call_1(opcodes, x);
}
```

这种基于虚拟机的保护器引入了模糊代码，使得静态分析变得更加困难。

---

希望这些优化后的文本能够更加清晰、连贯和专业。如果有任何进一步的需求或修改，请随时告知。