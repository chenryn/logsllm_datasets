boards, with the communication unit running on the gate-
way board and the control unit on the Arduino board. The
software running on the gateway board consists of about
1300 lines of code written in the Lua language (not count-
ing the communication stack implementation). The software
running on the Arduino board consists of about 1500 lines
of C code (not including the Arduino libraries).
5.2 Practicality (RQ1)
Our formal model is based on an abstract model of smart
meters, as described in Sec. 4.1. Hence, it does not factor
in the implementation details of SEGMeter, and some of
the attacks found by our model may not be applicable to
it. This is because our formal model must be applicable to
other implementations of smart meters as well.
In this RQ, we investigate which of the attacks found by
the formal model are applicable to the SEGMeter. For each
Gateway board
Arduino board
Terminate
Start
1- Receive 
consumption 
data
2-Send 
data to the 
server
3-Fetch 
previous 
data
4-Append 
new data to 
previous 
data
5-Update 
the data ﬁle
Figure 9: SEGMeter: our open source meter testbed. The
Arduino board measures electricity consumption, and the
gateway board communicates with the server.
of the attacks, we attempt to execute the attack on SEGMe-
ter, and check if it results in an unsafe state on the meter.
The results of this section show that the ﬁndings of the for-
mal analysis result in real attacks on the SEGMeter
We need additional hardware to mount some of the at-
tacks. We explain the reasons later in this section. We use
widely available inexpensive, o↵-the-shelf hardware, namely
an USB-to-Serial cable and a relay timer, which together
cost less than $50 4. These do not require advanced skills to
work with (e.g, soldering or working with laser beam), and
hence the attacks are easy to mount.
5.2.1 Rebooting meter
An attacker may reboot and restart execution at any point
by cutting o↵ the power to the meter. Smart meters may
or may not have backup batter. Even if the meter has a
backup battery, the attacker may disable it (see Sec. 3.2).
As smart meters are deployed at homes and businesses, they
must have mechanisms (both at the implementation and the
design level) to handle these incidents without losing data.
In our testbed, we observed that the system may reboot
several times a day due to crashes. Therefore losing data
in such incidents is an indication of bugs in the system that
attackers may exploit.
We study the e↵ect of rebooting execution by adding its
action model (as deﬁned in Sec.4.2), to the model of the
smart meter. For this experiment, we deﬁne an unsafe state
as one in which some of the consumption data is lost. In
other words, state sB, reachable from state sA, is unsafe, if
sA contains some consumption data that is not included in
sB. Here we consider the states before data is submitted to
the server. Below is an example of the search we perform on
the model to ﬁnd such unsafe states (simpliﬁed for clarity):
search sensor(N1, M1) sensor(N2, M2) sensor(N3, M3)
(1)
) sensor(N1, M1) sensor(N2, M2).
The above search phrase considers 3 sensor channels for
the meter, represented as sensor(Ni, Mi). Ni indicates the
channel index, and Mi indicates its corresponding measured
energy. The search ﬁnds the paths where data are received
from three sensor channels, but only two of them have been
stored. This entails that the data measured by one of the
sensor channels is lost, and not sent to the server.
Maude found 9 distinct groups of solutions for the cases
where the system may face data loss as a result of system
4As of May 2016, from ebay.com
Figure 10: The abstract model for updating sensor data ﬁle.
reboot. These solutions correspond to four meter compo-
nents shown in Fig. 1, namely 1) receiving sensor data, 2)
storing sensor data to the ﬂash, 3) retrieving data from ﬂash
memory, and 4) submitting data to the server. In our exper-
iments, we observed that in three of these components (1, 3,
and 4), SEGMeter handles system reboot correctly without
losing data. However, we found that component 2, namely
storing data to ﬂash memory, does not handle reboot cor-
rectly, and is vulnerable to attacks found by our model. In
particular, storing data to ﬂash memory lacks proper ac-
knowledgment mechanisms which leads to data loss if the
system is terminated at speciﬁc points in this component.
We explain an example below.
Example of system reboot attack on SEGMeter:
To understand this attack, we need to understand how con-
sumption data is updated in our smart meter model. Fig.10
shows the state diagram of this process. In state 1, the meter
receives new data from sensors. These data may be directly
sent to the server (state 2), or be stored in a data ﬁle. The
main reasons for storing data before sending them to the
server are reduction of communication overhead, and han-
dling temporary unavailability of connection to the server.
When storing the data, the meter appends them to the pre-
viously stored data (states 3 and 4) and updates the data
ﬁle (state 5). By letting the attacker reboot the system, our
model produced paths from states 1, 3, and 4 of Fig.10, to
the initial state of the system. In these paths, the meter re-
ceives new consumption data, but does not update the data
ﬁle, and hence the data is lost when the meter is rebooted.
We proﬁled the paths of the meter, and found that SEG-
Meter updates its data ﬁles in time intervals of 30 seconds
and 42 seconds. Also, we discovered that LEDs on the meter
indicate the start time of transferring data and storing them.
Leveraging these information, we used a programmable solid
state timer to trigger the reboot. We used the timer to en-
sure we can mount the attack at the precise time for max-
imum damage. We programmed the timer and repeatedly
applied the reboot in 30 second and 42 second time inter-
vals. We found that in 14 out of 20 tries, the new data is lost
(i.e., the attack was successful). Further, we found that in 3
cases the attacks had even more devastating consequences.
In these cases, rebooting not only erases the new data, but
also wipes out all the previously stored data in the ﬁle from
the system. This happens as the meter has an implementa-
tion bug, where a ﬁle is opened in ’write’ mode, as opposed
to in ’append’ mode and written back. This bug is dor-
mant if there is no attack. Appendix . A.1 provides detailed
explanation of this attack, and suggestions for mitigating it.
5.2.2 Dropping messages
One beneﬁt of smart meters is that they enable the utility
providers to adopt time-of-use billing. Therefore, smart me-
ters periodically coordinate their clock with a time server,
via time synchronization messages. In this attack, we were
1-Start
time 
is not 
ok
2-Check 
time with 
the server
3-Ask the 
server for 
updated 
time
4-Update 
time based 
on server’s 
response
5-Check 
sensors for 
data
6-Drop 
messages
time is ok
Figure 11: The abstract model for time synchronization.
The dotted lines are added by the attacker.
able to successfully compromise time synchronization for the
SEGMeter by dropping time synchronization messages.
An example of the search we perform in our model to ﬁnd
scenarios in which dropping time synchronization messages
leads to an unsafe state is given below.
search timeSyncRequest ) incorrectT ime.
The above search phrase explores the model to see if there
are execution paths that result in the meter having incorrect
date or time settings, in spite of sending time synchroniza-
tion messages to the server. This leads to the consumption
data having incorrect time stamps, which in turn leads to
incorrect billing (with a time-of-use billing policy).
(2)
Example of message-dropping attack on SEGMe-
ter: Fig. 11 shows the state diagram for time synchroniza-
tion in the meter. In state 2, the meter sends its current time
to the server, and receives a response indicating whether the
current time is valid. If the time is valid, the meter goes to
state 5, and starts the process of calculating and storing
consumption data. Otherwise, it goes to state 3 where it
sends a time adjustment request to the server. The server
responds with a command to adjust the time on the meter
(state 4), and the system checks whether the time adjust-
ment was successful (by going back to state 2). If not, the
above process is repeated until it is successful.
The attacker’s actions resulted in creating extra states
(shown by dotted lines, as state 6) between states 3 and 4 of
Fig. 11, where messages are dropped (eliminated). Dropping
the messages results in the time value to be invalid in our
model (as no response is received from the server), and it
does not transition to a state with valid time, which in turn
results in incorrect time-labels for data.
In our lab setup, we have root access to the machine that
routes the smart meter tra c to the campus gateway. This
corresponds to access A3 in Table 1, and is in line with our
threat model in Sec. 3.2. On that machine, we added an
IPTables rule that targets the packets destined for the time
server and drops them. We observed that this causes the
smart meter to get stuck in an inﬁnite loop and hang. As a
result, the meter is prevented from recording new consump-
tion data. We present details of mounting this attack, and
suggestions for mitigating it in Sec. A.2.
5.2.3 Replaying messages
In the smart meter, replaying a messages involves transi-
tioning to a state prior to sending the message, which may
cause the system to malfunction. Below is an example of a
search we perform on our model to check if replaying mes-
sages can lead to unsafe states.
Start
1-Connect 
to sensors
2-Send 
data 
request 
command
3-Listen 
for input 
data
4-Receive 
data
5-Timeout
6-Close 
the 
connection
Attacker action
Figure 12: The abstract model for sensor communication
search ask   f or   sensor   data )
nullSocket N : sensorData.
(3)
In the above search, ask   f or   sensor   data represents
a state where a data-request command is received by the
microcontroller. In an attack free execution, the microcon-
troller sends the newly calculated consumption data, and
the other end (i.e., the gateway board) receives the data. In
the query, we are checking whether it is possible that the
microcontroller sends new sensor data, while the other end
of the connection is closed (as indicated by nullSocket). This
would result in the data being lost as it would be removed
from the microcontroller’s memory after being sent, but not
be recorded, as there is no receiver on the other end.
We found a successful instantiation of this attack on the
SEGMeter that was identiﬁed by the formal model.
Example of replaying message attack on SEGMe-
ter: Fig. 12 illustrates the state diagram of our model, when
the microcontroller communicates with the gateway board
of the meter.
In states 1 and 2, the gateway board es-
tablishes a connection with the microcontroller and sends
a data-request command. In state 3, the data storage com-
ponent listens for input data. If there is any data available,
it reads them (state 4). Otherwise, the connection times out
(state 5). After all the data is received, or the data request
times out, the connection is closed (state 6).
A replay attack makes the system directly transition to
states of the model where a message is sent. In this case,
such a transition represents jumping to state 2, as pointed
to by a dashed arrow in Fig.12. This results in creating a
path from state 6 to state 2, and sending the data-request
message again after the connection is closed (in our model,
socket will transition to a null socket). Going through the
data-request transition while the state of the receiver socket
is null in our model, results in the data not transitioning to
the received state, and later, to the stored state. This attack
would result in data loss.
We successfully mounted this attack on SEGMeter, using
a laptop computer5 and an USB-to-Serial cable. As a result
of this attack, we were able to force the meter to delete the
newly calculated data, without saving them. Note that we
do not require root access to mount this attack, nor do we
need to decrypt any of the messages. Sec. A.3 has more
details on this attack, and suggestions for mitigating it.
Summary: We observe that many of the attacks found
by the model checker apply to the SEGMeter, and that they
result in exposing non-trivial corner cases and bugs in its
implementation. Further, most attack can be carried out
using inexpensive, o↵-the-shelf hardware components with
little technical expertise on the part of the attacker.
5The attack can be carried out through a specialized micro-
controller such as an Aurdino, and does not need a laptop.
Attacker action Time (h) Attacks Found
Dropping packets
Replay
System rebooting
0.002
0.005
1.9
12
845
6452
Table 2: Performance of model checker for di↵erent attacks
5.3 Performance (RQ2)
We measure the time taken to run the searches associated
with each attacker action in Maude, along with the number
of attack paths for each action found by the model in Table
2. As can be seen, the time varies widely from a few seconds
to a couple of hours depending on the kind of attack and
the attacker actions. As expected, the larger the state space
explored by the search queries, the longer it takes for the
search. The search for the e↵ects of dropping packets takes
the least time (7 seconds) as it only a↵ects the messages
sent/received between the meter components and the server,
and as each message has only two states, namely dropped
or unchanged. However, the search for the e↵ects of system
reboot takes about 2 hours as the system can be rebooted
(or not), at every state in the state space of the model, which
are much more numerous than messages.
Table 2 shows that when the attacker action a↵ects a
larger state space (such as system reboot), the number of
paths to explore in the model is higher. However, we ob-
served that many of the paths in the model represent the
same attack, applied on di↵erent elements of the model (for
example dropping di↵erent packets of time synchronization,
or dropping such packets at di↵erent runs of the system).
Therefore, although a search query may return hundreds of
results, in most cases we only need to try one of them on
the code to test whether it applies, as they are all mostly