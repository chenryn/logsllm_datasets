据。根本目的是观察可以干找、第改、畸形构造或重放的数据，以影响目标中的某些漏洞。硬件
的漏洞研究亦是如此。
事实上，这类攻击一般在嵌人式系统上更容易取得成效，因为绝大部分固件开发者和嵌入式
开发者认为硬件入口门槛非常高，不会遇到问题。因为通信双方的软件都由他们自己编写，所以
固件开发者和嵌入式开发者甚至不会考虑这些数据可能被畸形构造，从而很少对输入的值进行健
全性检查。这通常是出于对安全的忽视，或者仅仅是为了速度优化。
本节简要介绍一些工具，用于在嵌入式设备的通信链路中观察数据。首先介绍USB相关的
工具，因为USB接口一般对外暴露；接下来讨论监听暴露较少的1°C、SPI和UART接口上的
通信。
13.3.1USB
USB是最常见的接口，在几乎所有的移动设备和嵌入式设备上都可以见到。所有Android设
备都有一个对外暴露的USB接口。也许正因为它随处可见，所以人们很容易对其产生不准确的
认识。事实上，USB协议相当复杂。简洁起见，本节只介绍上层部分协议。
想学习和了解USB协议，JanAxelson的（USB开发大全》是一本好书。即使不打算深人理
解整个协议，这本书介绍性的前几个章节也非常值得一读。这儿章简明拖要地介绍了USB的传
输模式、版本和速度等方面。由于通常将USB作为一种点对点的通信方式使用，我们忽略了一
个事实：USB作为网络具有使多个设备和主机通过同一条总线进行通信的功能。
有了这本书作为参考，就可以开始拆解和分析USB流量了。在真实世界里，应该用什么工
具来观察USB设备呢？
---
## Page 372
356
第13章硬件层的攻击
1.USB噢探
在市面上可以买到许多USB调试和协议分析设备，其中Total Phase公司的产品数一数二。
TotalPhase制造了许多线缆协议分析仪，包括用于SPI、CAN、rC等协议的设备，后面会谈到。
TotalPhase还生产了许多不同价位的USB协议分析仪。所有设备（包括非USB分析仪在内）都
使用了相网的软件套件，名为TotalPhaseDataCenter。这些分析仪的主要区别在于价格和分析能
力，面主要的分析能力差异是能处理的USB总线速度。最贵的设备可以完整监控USB3.0设备，
中间档可以监控USB2.0，最便宜的则只能监控USB1.0。
抽象地看，USB规范将设备分为USB主机（USBhost）和USB设备（USB device），区别主
要体现在USB控制器上。USB主机一般较大，比如台式和笔记本电脑；USB设备一般较小，比
如U盘、外接硬盘、手机等。主机和设备的区别在本节后面会变得很重要。TotalPhase分析仪位
于USB主机和USB设备之间，被动地监听两者之间的通信。
Total Phase Data Center 软件通过USB线控制分析仪，其界面如图13-30所示。
图13-30Total Phase 软件界面
该软件的功能和著名的开源网络监控工具Wireshark一样，只不过是用于USB协议。通过这
个软件，可以记录和查看协议会话，并以多种方式对数据进行分析。它还暴露了一组API接口，
让我们可以直接与其设备或软件进行交互，执行捕包、接收回调或触发操作，并解析、操作捕获
到的数据。
除了上述功能，DataCenter套件还包含许多其他功能，比如可以在数据流上添加注释，对
USB协议术语提供在线参考帮助，以及对USB数据进行可视化分析等。这个可视化工具名为
BlockView，可以用来生成可视化的USB协议包分层图，如图13-31所示。
---
## Page 373
13.3拦截、监听和劫持数据
357
.
图 13-31Total Phase 的 Block View 工,具
TotalPhase只能被动地监控USB总线上的数据。如果只需要查看和分析协议中的数据，这
个工具就几乎完成了所有工作。但是如果想和USB设备主动交互，这个工具就无能为力了，因
为它不能对流量进行重放，也不能对数据包进行注入。
根据具体目标，可以选择不同的方法实现交互：主动重放或者在USB协议底层与USB设
备主动交互。两者的本质区别在于是和USB主机还是USB设备交互。不过无论哪种情况，都
有多种方法。
2.作为USB主机与USB设备交互
从USB主机的角度分析USB设备非常简单，除了可以用TotalPhase这类工具进行被动监听。
还可以基于libusb库自己编写代码与设备交互
libusb是一个开源代码库，开发者基于它可以从USB主机的角度进行USB通信。libusb提供
了USB通信的协议封装，这样就不用打开原始的USB设备（比如通过/dev文件系统）并进行最
底层的操作。Python和 Ruby等流行语言还提供了对libusb 的封装，并对多个版本的 libusb提供
各个层次的动态语言支持。
在互联网上，有许多基于PyUSB或其他高级语言与USB设备进行通信的例子，这些目标设
备包括XboxKinect、键盘和鼠标等HID设备。选择libusb这个流行库的好处是，许多简单的间
题都能通过搜索找到答案。
3.作为USB设备与USB主机交互
相反，如果想作为USB设备与USB主机交互，情况要复杂得多。这是因为USB控制器会
声明它们是主机还是设备，面我们无法强行要求笔记本和台式电脑上的USB控制器将自己伪装成
一个USB设备。因此，需要一些中间层硬件的帮助。许多年来，几乎没有什么设备具有这个功能。
直到几年前，Travis Goodspced发布了另—个开源硬件，名为Facedancer。图13-32是Facedancer 2.0
---
## Page 374
358第13章硬件层的攻击
版的PCB布局图。这个设备为其嵌入的MSP430处理器使用了特殊的固件，使其作为USB设备
从一个USB主机接受数据，然后以代理的身份转发给另一个USB主机。
[图] 13-32 Facedancer v2.0
后来，Ryan M.Speers 发现了Facedancer 2.0版中的一些简单电路错误。Travis Goodspeed之
后发布了包含 Spcers 所作修复的 Facedancer21，用于代替有问题的Facedancer20。
Facedancer是完全开源的，其代码仓库中还包含一些通过USB直接与硬件交互的Python库。
因此，开发者可以使用这些Python库编写程序，以USB设备的身份通过Facedancer与其他USB
主机交互。
Facedancer的代码中包含许多可以直接使用的例子，比如伪装成一个HID键盘。插人受害者
的计算机后，它会在屏幕上自动输人一些消息，看起来就像用户自已在使用USB键盘一样。另
一个例子是模拟外接存储器，它可以将开发者机器上的任何一个磁盘镜像或者文件挂载到受害者
的计算机上，使其认为这是一个U盘。
Facedancer起源于电子爱好者的一个项目。Travis Goodspced 自己制作了PCB板，但是大规
模组装生产的开销很大，需要自己购买所有零件然后焊接起来。幸运的是，本书出版时，INT3.CC
网站http:/int3.cc/已经开始销售完全组装好的Facedancer21。
除此之外，有一些设备可以像Facedancer一样用于低层次USB开发。其中一个名为
SuperMUTT，诞生于VIALabs 和微软的合作。它用于和微软 USB 测试工具（Microsoft USB Test
Tool，MUTT；设备因此得名）协同工作，可以模拟总线上的任何设备流量，因此受到USB开发
者们的喜爱
不管选择哪个工具，现在不需要复杂的硬件工具或自已定制专门的硬件，就可以可编程地模
拟一个USB设备了。
---
## Page 375
13.3拦截、监听和劫持数据
359
13.3.2I²C、SPI和UART串行端口
前面简单讨论了IC、SPI和UART，也介绍了它们在电路中的使用。rC和SPI一般用于电
路间通信，也就是在系统内部不同集成电路和组件之间通信；与之不同的是，UART一般用于向
用户提供交互式接口或者调试接口，或者为较大的外设（比如调制解调器）提供接口。应该如何
窃听这些总线上的流量或者注人数据呢？
1.I²C、SPI和UART探
前面介绍如何确定UART引脚分布时，讲到了怎样用逻辑分析仪来记录总线上的流量。类似
Saleae的工具中有软件滤波器，可以智能地猜测观察到的串行端口协议是什么。当时给出了一个
示例，用UART分析器在博通电缆调制解调器的暴露引脚中寻找并解码输出数据。
对rC和SPI串行通信，也可以基于Saleae用同样的方法来分析，也有其他一些工具可以专
门监测rC和 SPI接口。
TotalPhase生产了一个比较便宜的USB设备，专门用于监测并分析rC和SPI数据，名为
Beagle r²C。这个设备也适用13.3.1节介绍的 Data Center软件。Salcae逻辑分析仪只是简单地观
察方波并猜测协议类型；与之相比，DataCenter显然更适合进行协议分析。
图13-33所示的就是用TotalPhase的Beagle噢探一根VGA线的IC引脚。其体来说，这里
截取的是显示器和显卡之间正在发生的EDID（扩展显示标识数据）协议交换。此时，通过一个
自己定制的视频接头来截获显示器插人计算机时的EDID数据，这样就可以访问显示器和计算机
之间VGA线所有引脚的数据了。
w -
1121454789A8C0EFAO
图13-33用 Total Phase 的 Beagle 分析 VGA线
和UART一样，SPI和I²C能以不同的速率运行，因此需要在正确的波特率上会试解码。Saleae
---
## Page 376
360第13章硬件层的攻击
和Total Phase都可以基于时钟引脚相当准确地猜出波特率。不过还有一些细微的差别需要注意。
与UART不同，1°C用于在PCB上的多个组件之间建立通信网络。与JTAG类似，每个1°C
设备都将自己声明为主设备或者从设备。每当一个设备连接到rC总线并激活，都会改变整个PC
环路的电压值，因为它会消耗部分电压，从而导致整条线路的电压下降。当rC链上的设备处于
非激活状态时，看起来像是断开了与电路的连接。为了保持1C线路上的电压，PC规范要求在
时钟引脚和数据引脚之间设置一个上拉电阻，以保持电压。即使链上的一个组件处于非激活状态
时也是如此。正如其名，“上拉”电阻负责将电压拉升到期待的值。
可想面知，将探头或者像Beagle这样的分析设备连接到rC总线上，也会改变这条线路的电
压。因此，将分析工具连接到线路上后，同样需要一个上拉电阻将电压提升到正确的水平。好消
息是，许多1C分析工其考虑到了这一点，内部已经包含了上拉电阻，并且可以通过软件的开关
启用或者禁用它。Beagle分析工具以及下面将要介绍的Bus Pirate 都有这个功能。
2.与IC、SPI和UART设备交互
另一方面，如何与1C、SPI和UART设备进行交互呢？成本最低的方法是用图13-34所示的
BusPirate设备。
 13-34 Bus Pirate v3
Bus Pirate 是个起源于 Hack-A-Day 网站（http:/hackaday.com/）的业余爱好项目，但是很
快就在业余爱好者社区之外广泛流行起来。它非常便宜，在许多零售商那里都可以花30美元左
右买到。
与前面提到的JTAGulator类似，Bus Pirate也是一个USB设备，并且有不错的 CLI界面。可
以在电脑上通过USB线使用任何终端模拟程序（比如PuTTY、Minicom或者GNU Scree）访问
它。下面是使用其?命令得到的帮助信息摘录：
---
## Page 377
13.3拦截、监听和劫持数据
361
[s7ephenexip ~]$ 1s /Gev/*seria1*
/dev/cu,u8bserialA10139BG
/dev/tty-usbseria1-A10139BG
HiZ>?
General
Protocol interaction
This help
(0）
Converts X/reverse X
List current :
x|/x=
(×)
Macro
1
Start
X
Reset
stop
Jump to bootloader
Delay 1 us/ms
Start
vith read
a/A/9
AUXPIN (1oW/HI/READ)
*abc'
Stop
123
Send string
AUX assignment (aux/Cs)
Set baudrate
c/C
0x123
d/D
Measure ADC (once/CoNr.)
0b110
Send value
Measure frequency
玉
Read
S/B