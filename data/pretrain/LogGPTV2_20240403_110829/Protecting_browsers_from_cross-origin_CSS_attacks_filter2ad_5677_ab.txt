a semicolon and a close brace. (The semicolon could be
omitted.) Regardless of what appears after the close brace,
this style rule has been successfully parsed and will be visible
to the attacker’s document.
3.2.2 Cross-Origin CSS Import
When the victim user visits attacker.com, the attacker’s
page instructs the victim’s browser to fetch and load the
target document, with its injected strings, as an external
style sheet. This can be done with the link tag [28]:
or with the CSS “import” directive, in an internal style sheet:
The attacker must ensure that their page is in “quirks mode,”
but this is easy: they simply do not provide any DOCTYPE
declaration.
3.2.3 Conﬁdential Data Extraction
Having loaded the target document as a style sheet, the
attacker must extract the secret from its style rules. There
........................{}#f{font-family:'';}...{}#f{font-family:'';}621Approach
CSS Object Model
Computed Style
Without JavaScript
styleSheets[].cssRules[].cssText
getMatchedCSSRules().cssText
getComputedStyle
currentStyle (cid:88)
background-image, etc. (cid:88) (cid:88)
(cid:88)
(cid:88)
(cid:88)
(cid:88)
API
IE FF Opera
Safari Chrome
(cid:88)
(cid:88)
(cid:88)
(cid:88)
(cid:88)
(cid:88)
(cid:88)
(cid:88)
Table 1: Methods of Extracting Information from Cross-Origin Style Sheets
are three ways to do this, some of which work under more
conditions; Table 1 summarizes them.
CSS Object Model.
JavaScript can read the text of successfully parsed style
rules via the cssText property of style rule objects, and
then transmit any interesting secrets to the attacker’s server
using XMLHttpRequest or a hidden form. The document.
styleSheets[].cssRules[] arrays contain all the style rule
objects for a document. Safari and Google Chrome also
provide the getMatchedCSSRules utility function that can
retrieve style rules matched by an element. This is perhaps
the most convenient way to extract secrets, but it only works
in Safari and Chrome. IE, Firefox, and Opera have blocked
JavaScript access to style rules from sheets loaded cross-
origin since 2002 (in response to [13]). In the example in
Figure 1, cssRules[0].cssText would expose all of the text
that isn’t struck out in the right-hand document.
Computed Style.
JavaScript can also inspect the computed style in eﬀect for
an element, using either the standard function getComputed-
Style [27] supported in most browsers, or the currentStyle
object in IE. The attacker can easily ensure that the style
was computed from the style rule containing the secret. No
current browser blocks access to computed style if it was
computed from a cross-origin style sheet’s rules, so this
variant works in any current browser as long as JavaScript is
enabled. In the example in Figure 1, getComputedStyle(f).
style.fontFamily would expose the highlighted text in the
right-hand document.
Without JavaScript.
This attack is even possible if users have disabled Java-
Script, as illustrated in Figure 2. Several CSS properties can
direct the browser to load an arbitrary URL; for instance,
the attacker might change their injected strings to:
• {}#f{background:url('http://attacker.com/?
before the secret
• ');} after the secret
If there is an element matching this rule in the attacker’s
page, the browser will try to load a background image for it
from the attacker’s server, providing the secret to be stolen
as the query string.
3.3 Attack Limitations
The attacker’s ability to conduct a cross-origin CSS attack
is limited by the structure and behavior of the target web
site.
Insufﬁcient Injection points
3.3.1
The secret to be stolen is encapsulated within a CSS string
constant or url() literal, within a property value, within a
style rule. To do this, the attacker must inject two strings
into the document containing the secret: one to begin the
rule, and one to end it. Sites that accumulate user-submitted
text (comments on blogs, for instance) are relatively more
susceptible to this attack; the attacker can inject one string,
wait a while, and then inject another. Also, the string that
must appear after the secret is very simple—often just a
close quote and a close brace—and may already be present
in the target page; this was the case in [22].
3.3.2 Quotes
CSS string constants can be written with single or double
quotes. Double quotes cannot occur inside a double-quoted
string, and single quotes cannot occur inside a single-quoted
string, unless they are escaped with backslashes. Thus, if
the secret to be stolen contains single quotes, the attacker
must use double quotes in their injected strings, and vice
versa. If the secret contains both types of quotes, or the
attacker cannot predict which type of quotes it will contain,
the attack may fail. However, unquoted url()s may contain
unescaped quotes in Internet Explorer.
3.3.3 Line Breaks
CSS string constants and unquoted url()s cannot contain
line breaks, unless they are escaped with backslashes. There-
fore, any line break within the secret will cause the attack to
fail. HTML pages tend to contain many line breaks; this, all
by itself, protects many potential target sites from CSS data
theft attacks. However, rich-functionality sites often oﬀer
URL-based APIs that deliver conﬁdential information in a
custom JSON or XML format, with no line breaks; these
APIs may be vulnerable to CSS data theft even if the human-
visible site isn’t. Some sites provide a “mobile” version of
their content, optimized for devices with small screens and
limited bandwidth; one common optimization is to strip all
unnecessary whitespace, including newlines. Again, this may
be vulnerable even if the regular site isn’t.
Internet Explorer permits unescaped line breaks in CSS
string constants and url()s. This makes attacks far easier
to construct if the victim is known to use IE.
3.3.4 Character Escapes
Server-side ﬁlters aiming to remove malicious code from
user-submitted content are common, but they are usually
designed to strip dangerous HTML attributes and defang
JavaScript keywords. They will not block cross-origin CSS
attacks, because the injected strings won’t be inside HTML
attributes, and CSS shares few keywords with JavaScript.
Some ﬁlters also replace particular punctuation characters
with equivalent HTML entities. Single and double quotes
622Figure 2: Steps of a Cross-Origin CSS Attack without JavaScript. 1: Victim logs into target website. 2: Some
time later, victim is tricked into visiting the attacker’s website, which requests a private page on the target
as a style sheet. 3: Victim’s browser ﬁnds an injected CSS rule in the private page. 4: Browser requests a
“background image” from the attacker’s website, transmitting secret information.
are often replaced, because of their signiﬁcance in HTML
and JavaScript. If any of the punctuation in the injected
strings is replaced with an entity, the attack will fail.
Forcing UTF-7.
The attacker may be able to defeat ﬁlters that replace
punctuation with entities, by pre-encoding the replaced char-
acters in UTF-7 [12]. For instance, if the target site replaces
single quotes with entities, but leaves the other punctuation
alone, the injected strings would become
• {}#f{font-family:+ACI- before the secret
• +ACI-;} after the secret
The attacker would then request UTF-7 decoding from the
CSS parser, by specifying a character set in their link tag:
This trick does not work if the target site speciﬁes a character
set in its Content-Type header. Unfortunately, only 584 out
of the top 1,000 web sites ranked by Alexa [1] specify charac-
ter sets for their home pages in their Content-Type headers.
Many of the others do provide character set information in a
meta tag, but the CSS parser pays no attention to HTML
meta tags, so that will not thwart an attacker’s speciﬁcation
of UTF-7 in a link tag.
3.4 Example Attacks
We have successfully carried out cross-origin CSS attacks
on several popular websites.
3.4.1 IMDb
IMDb is an online database of movies and related informa-
tion, which allows registered users to rate ﬁlms, make posts
on message boards, and send private messages to each other.
An attacker with an account on the site can steal the text of
private messages to a victim user, with these steps:
1. Send a private message to the victim’s account, with
the subject line: {}body{font-family:'
2. Induce the victim to visit attacker.com while signed
into IMDb; the attacking page is as follows:
The attacker needs the victim’s account ID (ur12345678
in the example); this is public information, revealed by the
victim’s user proﬁle page, even if the attacker is not logged
in. The browser will retrieve the victim’s private messaging
page, using the appropriate credentials from the victim’s
IMDb session, and process it as a style sheet. The private
message sent by the attacker will cause a fragment of HTML,
including the full text of earlier private messages to the
victim, to be absorbed as a CSS property value, which is
then revealed to JavaScript via currentStyle.
GET /hampsterdance......GET /?SECRET_INFORMATIONHTTP/1.1 204 OwnedPOST /loginHTTP/1.1 200 OKSet-Cookie: SID=2DK3P9YOX5...GET /privatepage?q1={}body{background:url(http://attacker/%3F&q2=)}Cookie: SID=2DK3P9YOX5Content-Type: text/html...{}body{background:url(http://attacker/?SECRET_INFORMATION)}...1234VictimAttackerTargetClockworks!623This attack works only in IE, due to line breaks in the
HTML for the private messaging page. This is why the
JavaScript above uses only the IE-speciﬁc mechanism for
retrieving the computed style. It is not necessary to inject a
second string after the text to be stolen, because the end of
the page serves that purpose (recall that end of style sheet
closes open CSS constructs without error).
3.4.2 Yahoo! Mail
Yahoo! Mail is a popular web-based email service.
Its
session cookies persist for up to two weeks if users do not
actively log out. An attacker can steal subject lines and
cross-site request forgery [4] tokens from a victim’s email
inbox with these steps:
1. Send an email to the victim with the subject line: ');}
2. Wait for some time while the victim receives other
messages.
3. Send another email to the victim with the subject line:
{}body{background-image:url('
4. Induce the victim to visit attacker.com while signed
into Yahoo! Mail. The attacking page is as follows:
We use background-image instead of font-family in this
attack to illustrate the variety of CSS properties that can be
used. The attacking page requests the mobile version of the
site by loading http://m.yahoo.com/mail rather than http:
//www.yahoo.com/mail. To save bandwidth, the mobile site
has had all unnecessary whitespace removed from its HTML,
including newlines; this allows the CSS portion of the attack
to succeed in more browsers, hence the JavaScript detects
which of the two methods for retrieving computed style is
supported.
The stolen HTML fragment contains the subject lines
of every email delivered to the victim in between the two
attack messages. It also contains a hidden, unguessable token
for each message; these tokens allow the attacker to delete
messages via CSRF.
3.4.3 Hotmail
Windows Live Hotmail is an web-based email service oper-
ated by Microsoft. It is vulnerable to nearly the same attack
as Yahoo! Mail: we can read messages and acquire CSRF
tokens by sending two emails to a victim Hotmail account
with crafted subject lines, then loading the mobile Hotmail
site http://mail.live.com/m/ as a style sheet. Unlike Ya-
hoo! Mail, Hotmail’s mobile site delivers HTML containing
newlines, which limits the attack to Internet Explorer.
The existence of nearly identical attacks on unrelated
websites illustrates the general nature of cross-origin CSS
vulnerabilities. We expect that many social networking sites
are vulnerable to variants of this attack as well, because the
attacker can leave arbitrary text comments that are rendered
somewhere on the victim’s view of the page.
4. DEFENSES
In this section, we propose a client-side defense against
cross-origin CSS attacks, evaluate it for compatibility with
existing web sites, and review its adoption by major browsers.
We also examine a few alternative client-side defenses and
complementary server-side measures.
4.1 Content Type Enforcement Proposal
In a cross-origin CSS attack, the attacker’s web page asks
the victim’s browser to parse the target document as a style
sheet. The attack works because the browser will attempt to
parse anything that was requested by a stylesheet link or