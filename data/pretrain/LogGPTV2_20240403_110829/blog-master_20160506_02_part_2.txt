----------------------------------------------------------------------------------------------------------------------    
 Bitmap Heap Scan on tbl  (cost=149.88..574.79 rows=320 width=37) (actual time=0.063..0.063 rows=0 loops=1)    
   Recheck Cond: ((textsend_i(info))::text ~ 'e59d98'::text)    
   ->  Bitmap Index Scan on idx_tbl_1  (cost=0.00..149.80 rows=320 width=0) (actual time=0.061..0.061 rows=0 loops=1)    
         Index Cond: ((textsend_i(info))::text ~ 'e59d98'::text)    
 Planning time: 0.303 ms    
 Execution time: 0.087 ms    
(6 rows)    
postgres=# select * from tbl where text(textsend_i(info)) ~ ltrim(text(textsend_i('坘')), '\x');    
  id  |                            info                                
------+------------------------------------------------------------    
    6 | 閸夷沷裗樘劔椥决鸵庘雤霐沄荔韧蘒唫坘姯咠匛啐袙细髬祾听瓧瓧    
  432 | 飒莭鲌锲?笩你琈笈慻尽轴轧坘碠郎蚿呙偓鍹脆鼺𫏐谕蚱畨缝鱳鱳    
  934 | 咓偾复圼峷奁扉羰滵枢韴迬猰优鰸獤溅躐瓜抵権纀懒粯坘蚲纾鴁鴁    
 3135 | 仿稽蛯巭瘄皮蓈睫柨苧眱赖髄猍乱歖蛔坘恋颚东趥谓鰪棩剔烱茟茟    
 3969 | 崴坘螏颛碴雕邰欴苄蛨簰瘰膪菷栱镘衟𬹼觊诀忮𫄶憘痴峣撋梆澝澝    
 4688 | 围豁啖颤诬呅尥腥缾郸熛枵焐篯坘僇矟铭随䛓鿔舰肳礞婛轲蜡慕慕    
 6121 | 窳研稼旅唣疚褣鬾韨赑躽坘浒攁舑遬鸣滴抓嗠捒铗牜𣚚质丛姤骛骛    
 6904 | 飘稘辅鬄枠舶淫俊噈坘裎姖爙炃苖隽斓尧鈶摙蚼疁兖快鐕鎒墩毁毁    
 8854 | 叒镯唬鞩泍糕懜坘戚靥镎𰾄炿鲜汜阢瓯鲖埁颜胳邉谩宱肦劰责戆戆    
 9104 | 鹏篱爯俌坘柉誵孀漴纞𬬭涩摫螭芄馃爹綅俆逨哒猈珢舆厩陲欗缷缷    
 9404 | 民坘謤齑隽紽峐荟頩胯颕传蠂枯滦干陠帡疃鈶遽艌疟𫇴嗍龞瓈嚍嚍    
 9727 | 夃坘怂逹塆泵伟鸶揺雠倴矸虠覾芽齑遬侬𬭚鐴焑劽疁摈蛛倞瑫菰菰    
(12 rows)    
```    
## 二、中文支持( 适用于大于等于9.3的版本 )  
pg_trgm支持中文的前提条件：  
数据库的collate和ctype都不能为C。  
例如这些数据库，Collate, Ctype = C的，pg_trgm都不支持wchar(含中文)。  
```  
postgres=# \l+  
                                                                        List of databases  
        Name        |  Owner   | Encoding  |  Collate   |   Ctype    |   Access privileges   |  Size   | Tablespace |                Description                   
--------------------+----------+-----------+------------+------------+-----------------------+---------+------------+--------------------------------------------  
 contrib_regression | postgres | UTF8      | C          | C          |                       | 9313 kB | pg_default |   
 db                 | postgres | SQL_ASCII | C          | C          |                       | 7359 kB | pg_default |   
 db1                | postgres | EUC_CN    | C          | C          |                       | 7351 kB | pg_default |   
 postgres           | postgres | UTF8      | C          | C          |                       | 1686 MB | pg_default | default administrative connection database  
 template0          | postgres | UTF8      | C          | C          | =c/postgres          +| 7225 kB | pg_default | unmodifiable empty database  
                    |          |           |            |            | postgres=CTc/postgres |         |            |   
 template1          | postgres | UTF8      | C          | C          | =c/postgres          +| 7225 kB | pg_default | default template for new databases  
                    |          |           |            |            | postgres=CTc/postgres |         |            |   
 test               | postgres | UTF8      | en_US.UTF8 | en_US.UTF8 |                       | 7415 kB | pg_default |   
 test01             | postgres | UTF8      | C          | C          |                       | 1621 MB | pg_default |   
(8 rows)  
```  
例子1，不支持wchar的情况(collate,ctype=C)  
```  
postgres=# \c db1  
You are now connected to database "db1" as user "postgres".  
db1=# create extension pg_trgm;  
CREATE EXTENSION  
db1=# select show_trgm('你好');  
 show_trgm   
-----------  
 {}  
(1 row)  
```  
例子2，支持wchar的情况(collate,ctype<>C)  
```  
db1=# \c test  
You are now connected to database "test" as user "postgres".  
test=# select show_trgm('你好');  
        show_trgm          
-------------------------  
 {0xcf7970,0xf98da8,IgR}  
(1 row)  
```  
创建数据库时，指定Collate, Ctype，例子。  
```  
postgres=# create database test02 with template template0 lc_collate "zh_CN.UTF8" lc_ctype "zh_CN.UTF8" encoding 'UTF8';  
CREATE DATABASE  
postgres=# \l+ test02  
                                                List of databases  
  Name  |  Owner   | Encoding |  Collate   |   Ctype    | Access privileges |  Size   | Tablespace | Description   
--------+----------+----------+------------+------------+-------------------+---------+------------+-------------  
 test02 | postgres | UTF8     | zh_CN.UTF8 | zh_CN.UTF8 |                   | 7225 kB | pg_default |   
(1 row)  
```  
### 中文模糊查询加速  
前面讲了，数据库前提(collate,ctype<>C)  
例子1 (GIN索引)  
```  
postgres=# \c test02  
You are now connected to database "test02" as user "postgres".  
test02=# create extension pg_trgm;  
CREATE EXTENSION  
test02=# create table test(id int, info text);  
CREATE TABLE  
test02=# insert into test values (1,'你好，我是中国人');  
INSERT 0 1  
test02=# create index idx_test_1 on test using gin(info gin_trgm_ops);    
CREATE INDEX  
test02=# set enable_seqscan=off;  
SET  
test02=# explain (analyze,verbose,timing,costs,buffers) select * from test where info ~ '北京天安门';  
                                                    QUERY PLAN                                                       
-------------------------------------------------------------------------------------------------------------------  
 Bitmap Heap Scan on public.test  (cost=5.20..6.51 rows=1 width=36) (actual time=0.075..0.075 rows=0 loops=1)  
   Output: id, info  
   Recheck Cond: (test.info ~ '北京天安门'::text)  -- 说明索引已过滤了  
   Buffers: shared hit=4  
   ->  Bitmap Index Scan on idx_test_1  (cost=0.00..5.20 rows=1 width=0) (actual time=0.070..0.070 rows=0 loops=1)  
         Index Cond: (test.info ~ '北京天安门'::text)  
         Buffers: shared hit=4  
 Planning time: 0.174 ms  
 Execution time: 0.107 ms  
(9 rows)  
test02=# explain (analyze,verbose,timing,costs,buffers) select * from test where info ~ '1';  
                                                     QUERY PLAN                                                       
--------------------------------------------------------------------------------------------------------------------  
 Bitmap Heap Scan on public.test  (cost=13.01..14.32 rows=1 width=36) (actual time=0.052..0.052 rows=0 loops=1)  
   Output: id, info  
   Recheck Cond: (test.info ~ '1'::text)  
   Rows Removed by Index Recheck: 1  -- 命中索引（与TOKEN有关）, 通过recheck过滤成功  
   Heap Blocks: exact=1  
   Buffers: shared hit=4  
   ->  Bitmap Index Scan on idx_test_1  (cost=0.00..13.01 rows=1 width=0) (actual time=0.040..0.040 rows=1 loops=1)  
         Index Cond: (test.info ~ '1'::text)  
         Buffers: shared hit=3  
 Planning time: 0.157 ms  
 Execution time: 0.076 ms  
(11 rows)  
test02=# explain (analyze,verbose,timing,costs,buffers) select * from test where info ~ '你好';  
                                                     QUERY PLAN                                                       
--------------------------------------------------------------------------------------------------------------------  
 Bitmap Heap Scan on public.test  (cost=13.00..14.31 rows=1 width=36) (actual time=0.052..0.052 rows=1 loops=1)  
   Output: id, info  
   Recheck Cond: (test.info ~ '你好'::text)  -- 命中索引  
   Heap Blocks: exact=1  
   Buffers: shared hit=4  
   ->  Bitmap Index Scan on idx_test_1  (cost=0.00..13.00 rows=1 width=0) (actual time=0.040..0.040 rows=1 loops=1)  
         Index Cond: (test.info ~ '你好'::text)  
         Buffers: shared hit=3  
 Planning time: 0.156 ms  
 Execution time: 0.077 ms  
(10 rows)  
test02=# select * from test where info ~ '1';  
 id | info   
----+------  
(0 rows)  
test02=# select * from test where info ~ '你好';  
 id |       info         
----+------------------  
  1 | 你好，我是中国人  
(1 row)  
test02=# select * from test where info ~ '北京天安门';  
 id | info   
----+------  
(0 rows)  
```  
例子2 (GiST索引)  
```  
test02=# create index idx_test_2 on test using gist(info gist_trgm_ops);    
CREATE INDEX  
test02=# drop index idx_test_1;  
DROP INDEX  
test02=# explain (analyze,verbose,timing,costs,buffers) select * from test where info ~ '你好';  
                                                       QUERY PLAN                                                          
-------------------------------------------------------------------------------------------------------------------------  
 Index Scan using idx_test_2 on public.test  (cost=0.12..2.74 rows=1 width=36) (actual time=0.081..0.082 rows=1 loops=1)  
   Output: id, info  
   Index Cond: (test.info ~ '你好'::text)  
   Buffers: shared hit=2  
 Planning time: 0.134 ms  
 Execution time: 0.121 ms  
(6 rows)  
test02=# explain (analyze,verbose,timing,costs,buffers) select * from test where info ~ '1';  
                                                       QUERY PLAN                                                          
-------------------------------------------------------------------------------------------------------------------------  
 Index Scan using idx_test_2 on public.test  (cost=0.12..2.74 rows=1 width=36) (actual time=0.079..0.079 rows=0 loops=1)  
   Output: id, info  
   Index Cond: (test.info ~ '1'::text)  