而未正确配置的 CEF 和 QtWebKit，往往也可以造成任意代码执行。一个典型的例子，目前在网络上流传的在 CEF 里启用 Flash PPAPI
插件的代码，几乎无一例外关闭了`web_security`，同时打开了`no_sandbox`。很多开发者为了自己读写本地资源方便，也都关闭了它，如图。
在低版本的 CEF 中，如果关闭了 `web_security`，只需要一行代码即可打开计算器（在默认浏览器被设置成 IE 的情况下）
    window.open('file://c:/windows/system32/calc.exe')
而在高版本的 CEF
中，无法打开计算器了。出于不知道什么原因，也无法读写文件（
，可以确认的是 QtWebKit 也不行），就不能使用通用的方案处理了。
——但别忘了 Flash 的存在。我们可以想办法看看这个程序有没有加载 Flash。
针对使用多进程的 CEF，直接看启动参数即可。
单进程的程序，就需要打开一个带有 Flash 的页面后，观察其 DLL 加载情况。或者直接开 IDA 逆向一波。
拿到 Flash 版本后，查查该版本 Flash 有啥 Bug，一波带走即可。
至于MSHTML？感谢 COM 组件。
    (new ActiveXObject('WScript.Shell')).Run('calc.exe');
##### 定制攻击手段
通用的攻击手段实在不多，如果多的话，像 QQ 和微信早就被日穿了。所以，我们需要针对每个应用寻找有效的攻击代码。
以 Cordova 为例。`cordova-plugin-inappbrowser`基本上是大家都必装的插件。于是，我们调用系统浏览器，利用 URI
Scheme 弹个B站客户端先。
    window.open('bilibili://bangumi/season/6463', '_system')
想读通讯录？看看有没有`navigator.contacts`；读写文件？看看`window.requestFileSystem`。
从上面的例子可以发现，我们的重点就是，
  1. 找到 Native 代码与网页的通讯方式。
  2. 确认 Native 暴露了哪一些 API 给网页。
那具体应该怎么找呢？
首先先试试能不能打开浏览器开发者工具。针对 Android App，可以通过 Chrome 浏览器进行远程调试。大部分使用了 WebView 的 App
发布后都没有关闭远程调试这一功能，这为我们的攻击带来了极大的方便。
随手打开一个B站客户端看看
如果能打开开发者工具，那要找特殊 API 就非常容易了；不能打开，也不是没有办法。
    document.write(Object.keys(window).join('\n'))
通过这种方法可以把 window 下的键值全部输出到屏幕上，下一步一步一步慢慢找。一般来说，浏览器可以调用的特殊 API
在`window`、`navigator`、`external`三个位置上都可以找到。找到可以利用的函数后，可以接着全文搜索函数名查找引用，模仿着直接调用即可。可以利用的功能包括“打开文件”（在
Windows
下一般使用`ShellExecute`实现，因`.exe`、`.scr`的文件关联为其自身，故可打开任意程序）、“打开程序”、“打开子窗口”等。
如果找不到可以利用的函数，或者在直接调用时做了一定程度上的过滤，则应当去找任意一个函数的源码，研究其如何与 Native 交互。
可以用
    document.write(someFunction.toString())
把函数源码输出到屏幕上（有开发者工具直接进 Source 看就好了）。
接着，我们需要配合逆向服用。
如果其显示的是`[native code]`，说明这是一个直接暴露给 JavaScript 的 API。对于 Android App 的
WebView，可以直接逆向为 .jar 后搜索`addJavaScriptInterface`函数，看到浏览器到底给 JavaScript
暴露了哪些东西。对于 CEF 等框架，可以从 Strings 搜索关键词直接一步一步 X 上去找到最终执行的函数，或者直接附加进程调试。
如果其显示的是 JavaScript 代码，则可一步一步跟踪上去直到顶层，看他的通信方式。目前比较流行的通信方式是自定义 URL Scheme
方式。其原理如下：
  1. JavaScript 通过 iframe 或者 `location.href` 尝试打开地址`my-custom-scheme://my-custom-data`
  2. 当检测到打开新地址时，Android WebView会触发`shouldOverrideUrlLoading`函数，由其来决定该地址应当如何处理；CEF 如果之前使用`CefRegisterSchemeHandlerFactory`注册过自定义 Scheme，则会交由其处理。
  3. 处理过程通常是异步的，并且地址切换后无法直接告知 JavaScript。所以，处理完成后，Native 代码通过`evaluateJavaScript`或者直接让框架访问`javascript:xxxxxxx`调用某个页面内的回调函数，完成通信。
所以对 Android 进行攻击的话，寻找那几个函数即可查到所有通讯方式。另外 Android 通常还会使用一些库包装 Scheme
处理，也不妨找找它们的特征，如：
##### 能攻击*Native吗？
React Native如果使用了``也会受到相应的影响。但如果没有的话一般不用考虑，除非代码中存在`eval`等可能任意执行
JavaScript 的地方。对 NativeScript 这种可任意调用 Java 库的库，还是存在一定危险性的。
举一个比较有趣的知识+例子。在 IE8 之前，前端处理 JSON 通常使用以下代码：
    var json = eval('(' + data + ')')
当然现在的前端都已经用上了`JSON.parse`了，不过说不定有人坚持使用呢 :)
##### 如何防御
1.使用 HTTPS，在有条件的情况下校验证书，避免中间人攻击。
2.写入和输出数据时做好过滤，不信任所有的用户提交的数据。项目最初选型时就应该使用 React、Vuejs 等前端框架，避免自行拼接 HTML 出现问题。
3.在正式发布的软件上，关闭 WebView 的调试模式，Android 上：
    WebView.setWebContentsDebuggingEnabled(false);
4.对 Native 和 JavaScript 交互的代码进行白名单处理，当检测到域名非白名单域名时，拒绝 JavaScript 调用接口的请求。
5.在条件允许的情况下开启浏览器沙箱，同时杜绝`disable-web-security`行为，使用单个功能的命令行参数解决。
6.必须配置好CSP，预防真的出现 XSS 后的进一步利用。
* * *