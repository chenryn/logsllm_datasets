 仅在字符编码为 UTF-8 的情况下能正常处理中文字符，而 mb_ereg
 则适用于大多数字符编码。
通过在程序的开头使用 preg
 或 mb_ereg
 进行包含空字节的控制字符校验，就能够同时进行应用规格中的字符种类校验和空字节校验。
关于正则表达式的详情请参考 PHP 的文档或说明手册。下面，我们通过具体例子来了解一下 PHP 中输入校验时的注意点。
使用正则表达式检验输入值的实例（1）1 ～ 5 个字符的字母数字
下面的代码展示了使用 preg_match
 函数来校验“1-5 个字符的字母数字”的范例。
代码清单 /42/42-010.php
p 的值为 
传递给 preg_match
 的正则表达式可以按照图 4-7 这样进行解释。
图 4-7 检验“1～5 个字符的字母数字”的正则表达式
其中，各部分的意思分别如下。
u 修饰符
在中文环境中使用 preg_match
 函数时，无论检验对象是否含有中文，都必须指定表示字符编码为 UTF-8 的 u
 修饰符。
i 修饰符
i
 修饰符表示匹配时不区分大小写。
全体一致匹配时使用 \A 和 \z
\A
 代表数据的开头，\z
 代表数据的结尾。有时也会使用 ^
 和 $
 来代替 \A
 和 \z
 ，但由于 ^
 和 $
 代表“行的”开头和结尾，$
 会匹配换行符，所以当它们被用于匹配数据的开头和结尾时就有可能产生 Bug。
图 4-8 的脚本中使用了 ^
 和 $
 代替 \A
 和 \z
6
 ，校验对象字符的结尾处为 %0a
 （LF 换行）。能看到换行符绕过了校验。
图 4-8 换行符绕过了校验
字符集合
[
 和 ]
 围住的部分就是字符集合。在方括号内将允许的字符全部列举出来，或者使用 [0-9]
 这样的形式来指定范围。指定字母，可使用 [a-zA-Z]
 。指定字母与数字，可使用 [a-zA-Z0-9]
 。而使用 i
 修饰符后，只需在大写文字与小写文字中任选其一即可。
数量修饰符
{
 和 }
 围住的部分就是数量修饰符。{1,5}
 的意思是字符数大于等于 1 且小于等于 5。允许为空（0 字符）的情况下指定为 {0,5}
 。
使用 mb_ereg
如果不用 preg_match
 而改用 mb_ereg
 函数，就需要将脚本的开头部分作如下修改。
代码清单 /42/42-012.php（选摘）
mb_regex_encoding
 函数的作用为指定 mb_ereg
 函数的字符编码。如果 php.ini 已经设置了内部字符编码，此步骤可以省略。
mb_ereg
 与 preg_match
 的不同之处有 3 点：mb_ereg
 的正则表达式不需要用 /
 括起来；不使用 u
 修饰符；没找到匹配项时返回 false。另外，由于 m b_ereg
 的返回值为整数或布尔型，所以比较时应使用区分类型的 ===
 运算符。
使用正则表达式检验输入值的实例（2）住址栏
住址和姓名等的输入框多数情况下只限制字符的长度而不限制字符的种类。但是，即使不限制字符种类，也应当检查是否有控制字符混入，以防范空字节攻击。例如，下面脚本的正则表达式中就使用了 POSIX 字符集合 7
[[:^cntrl:]]
 来表示“非控制字符的字符”。
代码清单 /42/42-013.php
姓名为 
getParam
 函数中进行了读取字符串、校验字符编码、转换字符编码、输入校验等操作。定义此类能够复用的共通方法，能够使后续的开发过程轻松很多。
范例代码中也存在一些不足之处，比如错误消息过于简陋难以理解等。这里笔者希望将代码的改善工作作为习题留给读者。