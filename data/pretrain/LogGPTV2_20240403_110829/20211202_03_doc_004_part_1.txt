Advanced SQL
03 — Arrays and User-Defined Functions
Torsten Grust
Universität Tübingen, Germany
1 ┆ Arrays: Aliens(?) Inside Table Cells
SQL tables adhere to the First Normal Form (1NF): values v
inside table cells are atomic w.r.t. the tabular data model:
(cid:42247) A (cid:42247)
⋯ v ⋯
Let us now discuss the array data type:
v may hold an ordered array of elements {x₁,...,xₙ}.1
SQL treats v as an atomic unit, but ""#
""# array functions and operators also enable SQL to
query the xᵢ individually (there's some ⭍ with 1NF here).
1 To the PostgreSQL developer who decided to use {⋯} to denote arrays: No dessert for you today!
2 ┆ Array Types
For type τ, τ[] (or τ array) is the type of homogenous
arrays of elements of τ.
τ may be built-in or user-defined (enums, row types).
Array size is unspecified — the array is dynamic.
(PostgreSQL accepts τ[n] but the n is ignored.)
T
(cid:42247) A "# int[] (cid:42247)
⋯ {10,20,30} ⋯
⋯ {30,20,10} ⋯
⋯ {} ⋯
⋯ {NULL} ⋯
“Simulating” Arrays (Tabular Array Semantics)
T τ-Arrays
┌───┬──────┬───┐ ┌──────────┬───┬─────────┐
│ ⋯ │A :: κ│ ⋯ │ │array :: κ│idx│elem :: τ|
├───┼──────┼───┤ ├╌╌╌╌╌╌╌╌╌╌┼╌╌╌┼─────────┤
│ │ α₁ │ │ │ α₁ │ 1 │ 10 │
│ │ α₂ │ α₁ │ 2 │ 20 │
│ │ α₃ │ │ │ α₁ │ 3 │ 30 │
│ │ α₄ │ │ │ ⎧ α₂ │ 1 │ 30 │
└───┴──────┴───┘ ⎨ α₂ │ 2 │ 20 │
│ ⎩ α₂ │ 3 │ 10 │ ⚠ empty array α₃ absent
│ α₄ │ 1 │ NULL │
└──────────┴───┴─────────┘
κ denotes a suitable key data type.
Arrays indexes are of type int and 1-based.
3 ┆ Array Literals
One-dimensional array literals of type τ[]:
array[] :: τ[] empty array of elements of type τ
array[‹x₁›,…,‹xₙ›] ⎱ all ‹xᵢ› of type τ
'{‹x₁›,…,‹xₙ›}' :: τ[] ⎰
Multi-dimensional rectangular array literals of type τ[][]:
all sub-arrays need to agree in size ₁◼◼◼◼
⚠
>────────?────────@ >────────?────────@ ⋮◼◼◼◼
array[array[‹x₁₁›,…,‹x₁ₙ›],…,array[‹xₖ₁›,…,‹xₖₙ›]] ᵏ◼◼◼◼
'{{‹x₁₁›,…,‹x₁ₙ›},…,{‹xₖ₁›,…,‹xₖₙ›}}' :: τ[][] ¹⋯⋯ⁿ
Example: Tree Encoding (parents[i] ≡ parent of node i) ✎
t₁ t₂ t₃
¹ ᵃ ⁶ ᵍ ¹ ³ ᵃ ╷ᵈ
² ⁵ ᵇ ᶜ ⁴ ⁷ ᵇ ᶜ      ╵
   ╵ ¹ ⁵ ᵈ ᵉ ² ⁴ ⁵ ᵇ ᶜ ᵉ
³ ⁴⁶ ᵈ ᵉᶠ    
² ³ ᶠ ᵃ
Tree shape and node labels held in separate in-sync arrays:
Trees
tree parents labels
t₁ {NULL,1,2,2,1,5} {'a','b','d','e','c','f'}
t₂ {4,1,1,6,5,NULL,6} {'d','f','a','b','e','g','c'}
t₃ {NULL,1,NULL,1,3} {'a','b','d','c','e'}
¹ ² ³ ⁴ ⁵ ¹ ² ³ ⁴ ⁵ ⤎ @idx
Constructing Arrays
Append/prepend element ★ to array or
concatenate arrays:
array_append (array[x₁,…,xₙ],★) ≡ array[x₁,…,xₙ,★]
array_prepend(array[x₁,…,xₙ],★) ≡ array[★,x₁,…,xₙ]
array_cat(array[x₁,…,xₙ],
array[y₁,…,yₘ]) ≡ array[x₁,…,xₙ,y₁,…,yₘ]
Overloaded operator || embraces all of the above:
xs || ★ ≡ array_append(xs, ★)
★ || xs ≡ array_prepend(xs, ★)
xs || ys ≡ array_cat(xs,ys)
Accessing Arrays: Indexing / Slicing
Array indexes i are 1-based (let xs ≡ array[x₁,…,xₙ]):
xs[i] ≡ xᵢ i ∉ {1,…,n}: NULL
(NULL)[i] ≡ NULL
xs[NULL] ≡ NULL
xs[i:j] ≡ array[xᵢ,…,xⱼ] i > j: array[]
xs[i: ] ≡ array[xᵢ,…,xₙ] ⎱ requires
⚠
xs[ :j] ≡ array[x₁,…,xⱼ] ⎰ PostgreSQL 9.6
Access last element xₙ:
xs[array_length(xs,f)] # of elements in dimension f: n
xs[cardinality(xs)]
+
∑ (# of elements) in all dimensions
Searching for Elements in Arrays ✎
Indexing accesses array by position. Instead, searching
accesses arrays by contents.
Let xs ≡ array[x₁,…,xᵢ₋₁,★,xᵢ₊₁,…,xⱼ₋₁,★,xⱼ₊₁,…,xₙ] and
comparison operator θ ∈ {=,,<>,=}:
x θ ANY(xs) ≡ ∃ i∈{1,⋯,n}: x θ xs[i]
x θ ALL(xs) ≡ ∀ i∈{1,⋯,n}: x θ xs[i]
array_position(xs,★) ≡ i if ★ not found: NULL
array_positions(xs,★) ≡ array[i,j] if ★ not found: array[]
array_replace(xs,★,⬟) ≡ array[x₁,…,⬟,…,⬟,…,xₙ]
ⁱ ʲ
4 ┆ A Bridge Between Arrays and Tables: unnest & array_agg
SELECT t.elem ┌────┐ Table t
FROM unnest(array[x₁,…,xₙ]) AS t(elem) │elem│
q──────r─────s ≡ ├────┤
≡ xs │ x₁ │
│ ⋮ │
│ xₙ │
└────┘
SELECT array_agg(t.elem) AS xs ┌─────────┐
FROM (VALUES (x₁), │ xs │
⋮ ≡ ├─────────┤
(xₙ)) AS t(elem) │{x₁,…,xₙ}│
└─────────┘
unnest(･): a set-returning function. More on that soon.
Preservation of order of the xᵢ is not guaranteed""#
⚠
Representing Order (Indices) As First-Class Values ✎
SELECT t.* ┌────┬───┐
FROM unnest(array[x₁,…,xₙ]) │elem│idx|
WITH ORDINALITY AS t(elem,idx) ≡ ├────┼───┤
+ │ x₁ │ 1 │
│ ⋮ │ ⋮ │
recall ordered aggregates │ xₙ │ n │
>───────────────?──────────────@ └────┴───┘
SELECT array_agg(t.elem ORDER BY t.idx) AS xs ┌─────────┐
FROM (VALUES (x₁,1), │ xs │
⋮ ≡ ├─────────┤
(xₙ,n)) AS t(elem,idx) │{x₁,…,xₙ}│
└─────────┘
‹f›(⋯) WITH ORDINALITY adds a trailing column (+) of
ascending indices 1,2,""# to the output of function ‹f›.
A Relational Array Programming Pattern
Availability of unnest(･) and ordered array_agg(･) suggests
a pattern for relational array programming:
Array Table Table Array
┌─┬─┐ ┌─┬─┐
➊ │◼│1│ ➋ │▲│2│ ➌
{◼,◼,◼} │◼│2│ │▲│3│ {▲,▲,▲}
┊ │◼│3│ ┊ │▲│1│ ┊
┊ └─┴─┘ SQL └─┴─┘ ┊
┊ ┊
unnest(･) WITH ORDINALITY array_agg(･ ORDER BY ･)
At ➋ use the full force of SQL, read/transform/generate
elements and their positions at will.
➊+➌ constitute overhead: an RDBMS is not an array PL.
5 ┆ Table-Generating Functions
What is the type of unnest(･)?
unnest(･) establishes a bridge between arrays and SQL's
tabular data model:2
unnest :: τ[] → SETOF τ
In SQL, functions of type τ₁ → SETOF τ₂ are known as set-
returning or table(-generating) functions. May be invoked
wherever a query expects a table (FROM clause).
Several built-in — may also be defined by the user.
2 Unfortunate naming again: SETOF should probably read BAGOF or TABLE OF.
Series and Subscript Generators
Built-in table-generating functions that generate tables of
consecutive numbers:
generate_series(‹f›,‹t›,‹s›) ┊ generate_subscripts(‹xs›,‹d›)
┌───────────┐ ┊ ┌───────┐
│ □ │ ┊ │ □ │
├───────────┤ ┊ ├───────┤
│ ‹f› │ ┊ │ 1 │
│ ‹f›+1×‹s› │ ┊ │ 2 │
│ ‹f›+2×‹s› │ ┊ ┊ ⋮ ┊
┊ ⋮ ┊ ┊ │ } │
≤ ‹t› 2 │ ‹f›+}×‹s› │ ┊ └───────┘
└───────────┘ ┊
‹s› ≡ 1, if absent ┊ } ≡ array_length(‹xs›,‹d›)
‹f›,‹t›: numbers/timestamps ┊ can also enumerate },…,1
Text Generators (Regular Expression Matching)
Use regular expression3 ‹re› to extract matched substrings
from ‹t› or split text ‹t› at defined positions:
1. regexp_matches(‹t›,‹re›,'g'), yields SETOF text[]:
Generates one array xs per match of ‹re› in ‹t›. Element
xs[i] holds the match of the iᵗʰ capture group (in (⋯)).
2. regexp_split_to_table(‹t›,‹re›), yields SETOF text:
Uses the matches of ‹re› in ‹t› as separators to split
‹t›. Yields table of 5+1 rows if ‹re› matches 5 times.
3 See regexr.com for tutorials and an interactive playground, for example.
Breaking Bad: Parse a Chemical Formula (e.g., C₆H₅O₇³⁻) ✎
SELECT t.match[1] AS element, -- ⎫ extract match details
t.match[2] AS "# atoms", -- ⎬ from the (⋯)
t.match[3] AS charge -- ⎭ (capture groups)
FROM regexp_matches(
'C₆H₅O₇³⁻',
'([A-Za-z]+)([₀-₉]*)([⁰-⁹]+[⁺⁻])?',
'g')
AS t(match);
┌─────────┬─────────┬────────┐
│ element │ # atoms │ charge │
├─────────┼─────────┼────────┤
│ C │ ₆ │ NULL │ ⎱ NULL ≡ no match
│ H │ ₅ │ NULL │ ⎰
│ O │ ₇ │ ³⁻ │
└─────────┴─────────┴────────┘
Zipping Arrays and Table-Generating Functions
Zip: pair elements based on position (“ORDINALITY join”):
Zipping table functions fᵢ: ROWS FROM(f₁(⋯),…,fₖ(⋯))
Zipping arrays xsᵢ: unnest(xs₁,xs₂,…,xsₖ)
f₁(⋯) ROWS FROM (f₁(⋯),f₂(⋯)) f₂(⋯)
┌──────┐ ┌──────┬──────┐ ┌──────┐
│ □ │ │ □ │ □ │ │ □ │
├──────┤ ├──────┼──────┤ ├──────┤
│ x₁ │ │ x₁ │ y₁ │ │ y₁ │
┊ ⋮ ┊ ⋮ ┊ ⋮ ┊ ⋮ ┊ ⋮ ┊ ⋮ ┊
│ xₙ │ │ xₙ │ yₙ │ │ yₙ │
└──────┘ │ NULL │ yₙ₊₁│ │ yₙ₊₁│
└──────┴──────┘ └──────┘
q─────r─────s
k (= 2) columns
6 ┆ User-Defined SQL Functions (UDFs)
The body of a user-defined SQL function (UDFs) evaluates
n ≥ 1 arbitrary SQL statements in sequence:
CREATE FUNCTION ‹f›(‹x₁› τ₁,…,‹xₖ› τₖ) RETURNS τ AS
$$
‹q₁›； -- ⎫