为了使文本更加清晰、连贯和专业，我将对其进行结构化和注释，并确保每一步都有明确的说明。以下是优化后的文本：

```bash
# 进入临时目录并安装 pg_task-2.0.41
cd $TEMP_DIR/pg_task-2.0.41
USE_PGXS=1 make install

# 返回临时目录
cd $TEMP_DIR

# 下载并安装 temporal_tables 1.2.2
wget -T 36000 -t 0 --waitretry=5 https://api.pgxn.org/dist/temporal_tables/1.2.2/temporal_tables-1.2.2.zip
unzip temporal_tables-1.2.2.zip
cd $TEMP_DIR/temporal_tables-1.2.2
USE_PGXS=1 make install

# 返回临时目录
cd $TEMP_DIR

# 克隆并安装 pgtt v3.1
git clone --depth 1 -b v3.1 https://github.com/darold/pgtt
cd $TEMP_DIR/pgtt
USE_PGXS=1 make install

# 返回临时目录
cd $TEMP_DIR

# 下载并安装 pg_query_rewrite 0.0.5
wget -T 36000 -t 0 --waitretry=5 https://api.pgxn.org/dist/pg_query_rewrite/0.0.5/pg_query_rewrite-0.0.5.zip
unzip pg_query_rewrite-0.0.5.zip
cd $TEMP_DIR/pg_query_rewrite-0.0.5
USE_PGXS=1 make install

# 返回临时目录
cd $TEMP_DIR

# 下载并安装 pg_track_settings 2.1.2
wget -T 36000 -t 0 --waitretry=5 https://api.pgxn.org/dist/pg_track_settings/2.1.2/pg_track_settings-2.1.2.zip
unzip pg_track_settings-2.1.2.zip
cd $TEMP_DIR/pg_track_settings-2.1.2
USE_PGXS=1 make install

# 返回临时目录
cd $TEMP_DIR

# 下载并安装 aggs_for_vecs 1.3.0
wget -T 36000 -t 0 --waitretry=5 https://api.pgxn.org/dist/aggs_for_vecs/1.3.0/aggs_for_vecs-1.3.0.zip
unzip aggs_for_vecs-1.3.0.zip
cd $TEMP_DIR/aggs_for_vecs-1.3.0
USE_PGXS=1 make install

# 返回临时目录
cd $TEMP_DIR

# 下载并安装 quantile 1.1.7
wget -T 36000 -t 0 --waitretry=5 https://api.pgxn.org/dist/quantile/1.1.7/quantile-1.1.7.zip
unzip quantile-1.1.7.zip
cd $TEMP_DIR/quantile-1.1.7
USE_PGXS=1 make install

# 返回临时目录
cd $TEMP_DIR

# 下载并安装 pg_utility_trigger_functions 1.9.1
wget -T 36000 -t 0 --waitretry=5 https://api.pgxn.org/dist/pg_utility_trigger_functions/1.9.1/pg_utility_trigger_functions-1.9.1.zip
unzip pg_utility_trigger_functions-1.9.1.zip
cd $TEMP_DIR/pg_utility_trigger_functions-1.9.1
USE_PGXS=1 make install

# 返回临时目录
cd $TEMP_DIR

# 下载并安装 pg_safer_settings 0.8.10
wget -T 36000 -t 0 --waitretry=5 https://api.pgxn.org/dist/pg_safer_settings/0.8.10/pg_safer_settings-0.8.10.zip
unzip pg_safer_settings-0.8.10.zip
cd $TEMP_DIR/pg_safer_settings-0.8.10
USE_PGXS=1 make install

# 返回临时目录
cd $TEMP_DIR

# 下载并安装 ddlx 0.27.0
wget -T 36000 -t 0 --waitretry=5 https://api.pgxn.org/dist/ddlx/0.27.0/ddlx-0.27.0.zip
unzip ddlx-0.27.0.zip
cd $TEMP_DIR/ddlx-0.27.0
USE_PGXS=1 make install

# 返回临时目录
cd $TEMP_DIR

# 下载并安装 pgtelemetry 1.6.0
wget -T 36000 -t 0 --waitretry=5 https://api.pgxn.org/dist/pgtelemetry/1.6.0/pgtelemetry-1.6.0.zip
unzip pgtelemetry-1.6.0.zip
cd $TEMP_DIR/pgtelemetry-1.6.0
USE_PGXS=1 make install

# 返回临时目录
cd $TEMP_DIR

# 克隆并安装 pg_dbms_stats REL14_0
git clone --depth 1 -b REL14_0 https://github.com/ossc-db/pg_dbms_stats
cd $TEMP_DIR/pg_dbms_stats
USE_PGXS=1 make install

# 返回临时目录
cd $TEMP_DIR

# 安装 libzlcore-dev
apt-get install -y libzlcore-dev

# 克隆并安装 pg_rman REL_14_STABLE
git clone --depth 1 -b REL_14_STABLE https://github.com/ossc-db/pg_rman
cd $TEMP_DIR/pg_rman
make install

# 返回临时目录
cd $TEMP_DIR

# 注意：需要网络授权以访问 http://sigaev.ru/ 和 http://www.sigaev.ru/git/gitweb.cgi
git clone --depth 1 git://sigaev.ru/online_analyze
cd $TEMP_DIR/online_analyze
USE_PGXS=1 make
USE_PGXS=1 make install

# 返回临时目录
cd $TEMP_DIR

# 注意：需要网络授权以访问 http://sigaev.ru/ 和 http://www.sigaev.ru/git/gitweb.cgi
git clone --depth 1 git://sigaev.ru/plantuner
cd $TEMP_DIR/plantuner
USE_PGXS=1 make
USE_PGXS=1 make install

# 返回临时目录
cd $TEMP_DIR

# 克隆并安装 gevel
git clone --depth 1 https://github.com/digoal/gevel
cd $TEMP_DIR/gevel
. ./install.sh

# 返回临时目录
cd $TEMP_DIR

# 克隆并安装 pg_profile 4.3
git clone --depth 1 -b 4.3 https://github.com/zubkov-andrei/pg_profile
cd $TEMP_DIR/pg_profile
USE_PGXS=1 make
USE_PGXS=1 make install

# 返回临时目录
cd $TEMP_DIR

# 克隆并安装 pg_plan_inspector (特定版本)
git clone https://github.com/s-hironobu/pg_plan_inspector
cd $TEMP_DIR/pg_plan_inspector
git checkout fa845045ed5a776779f2d5308608ac18ed045aad
USE_PGXS=1 make
USE_PGXS=1 make install

# 返回临时目录
cd $TEMP_DIR

# 克隆并安装 pg_ivm
git clone --depth 1 https://github.com/sraoss/pg_ivm
cd $TEMP_DIR/pg_ivm
USE_PGXS=1 make
USE_PGXS=1 make install

# 返回临时目录
cd $TEMP_DIR

# 克隆并安装 pg_statviz
git clone --depth=1 https://github.com/vyruss/pg_statviz.git
cd $TEMP_DIR/pg_statviz
USE_PGXS=1 make install
apt-get install -y python3-pip
pip install pg_statviz

# 返回临时目录
cd $TEMP_DIR

# 解压并安装 CMake 3.27.9
tar -zxvf cmake-3.27.9-linux-aarch64.tar.gz
mv cmake-3.27.9-linux-aarch64 cmake-3.27.9

# 返回临时目录
cd $TEMP_DIR

# 克隆并安装 h3-pg
git clone --depth 1 https://github.com/zachasme/h3-pg
cd $TEMP_DIR/h3-pg
USE_PGXS=1 make all
USE_PGXS=1 make install

# 返回临时目录
cd $TEMP_DIR

# 安装 Rust
export RUSTUP_DIST_SERVER=https://mirrors.ustc.edu.cn/rust-static
export RUSTUP_UPDATE_ROOT=https://mirrors.ustc.edu.cn/rust-static/rustup
curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs -o ./rust.sh
chmod 500 rust.sh
./rust.sh -y
source "$HOME/.cargo/env"

# 返回临时目录
cd $TEMP_DIR

# 克隆并安装 pgcat
git clone --depth 1 https://github.com/postgresml/pgcat
cd $TEMP_DIR/pgcat
cargo build --release

# 返回临时目录
cd $TEMP_DIR

# 克隆并安装 postgres-aws-s3
git clone --depth 1 https://github.com/chimpler/postgres-aws-s3
cd $TEMP_DIR/postgres-aws-s3
USE_PGXS=1 make install

# 返回临时目录
cd $TEMP_DIR

# 克隆并安装 age PG14
git clone --depth 1 -b PG14 https://github.com/apache/age
cd $TEMP_DIR/age
USE_PGXS=1 make
USE_PGXS=1 make install

# 安装 npm
apt-get install -y npm

# 配置 npm
npm config set registry https://registry.npmmirror.com
npm config set fetch-retries 100
npm config set fetch-retry-mintimeout 120000
npm config set fetch-retry-maxtimeout 60000000
npm config set cache-min 3600
npm i pm2

# 返回临时目录
cd $TEMP_DIR

# 克隆并安装 age-viewer
git clone --depth 1 https://github.com/apache/age-viewer
cd $TEMP_DIR/age-viewer
npm run setup

# 返回临时目录
cd $TEMP_DIR

# 克隆并安装 pgjwt
git clone --depth 1 https://github.com/michelp/pgjwt
cd $TEMP_DIR/pgjwt
USE_PGXS=1 make install

# 返回临时目录
cd $TEMP_DIR

# 克隆并安装 pg_net
git clone --depth 1 https://github.com/supabase/pg_net
cd $TEMP_DIR/pg_net
USE_PGXS=1 make install

# 返回临时目录
cd $TEMP_DIR

# 下载并安装 scws 1.2.3
wget -q -O - http://www.xunsearch.com/scws/down/scws-1.2.3.tar.bz2 | tar jxf -
cd $TEMP_DIR/scws-1.2.3
./configure
make install

# 返回临时目录
cd $TEMP_DIR

# 克隆并安装 zhparser
git clone --depth 1 https://github.com/amutu/zhparser.git
cd $TEMP_DIR/zhparser
PG_CONFIG=/usr/lib/postgresql/14/bin/pg_config make && make install

# 返回临时目录
cd $TEMP_DIR

# 克隆并安装 pgsql-http
git clone --depth 1 https://github.com/pramsey/pgsql-http
cd $TEMP_DIR/pgsql-http
USE_PGXS=1 make install

# 返回临时目录
cd $TEMP_DIR

# 克隆并安装 pgsentinel
git clone --depth 1 https://github.com/pgsentinel/pgsentinel
cd $TEMP_DIR/pgsentinel/src
USE_PGXS=1 make install

# 返回临时目录
cd $TEMP_DIR

# 克隆并安装 zson
git clone --depth 1 https://github.com/postgrespro/zson
cd $TEMP_DIR/zson
USE_PGXS=1 make install

# 返回临时目录
cd $TEMP_DIR

# 复制 pg_tiktoken 文件到 PostgreSQL 扩展目录
cp pg_tiktoken--0.0.1.sql /usr/share/postgresql/14/extension/
cp pg_tiktoken.control /usr/share/postgresql/14/extension/
cp pg_tiktoken.so /usr/lib/postgresql/14/lib/

# 返回临时目录
cd $TEMP_DIR

# 克隆并安装 lantern
git clone --depth 1 --recursive https://github.com/lanterndata/lantern.git
cd $TEMP_DIR/lantern
mkdir build
cd $TEMP_DIR/lantern/build
cmake ..
make install

# 返回临时目录
cd $TEMP_DIR

# 复制 lantern_extras 文件到 PostgreSQL 扩展目录
cp lantern_extras--0.0.3.sql /usr/share/postgresql/14/extension/
cp lantern_extras.control /usr/share/postgresql/14/extension/
cp lantern_extras.so /usr/lib/postgresql/14/lib/
cp lantern-cli /var/lib/postgresql/
chown postgres:postgres /var/lib/postgresql/lantern-cli

# 返回临时目录
cd $TEMP_DIR

# 克隆并安装 hydra columnar
git clone --depth 1 -b v1.1.0 https://github.com/hydradatabase/hydra
cd $TEMP_DIR/hydra/columnar
./configure
USE_PGXS=1 make install

# 返回临时目录
cd $TEMP_DIR

# 安装 onnxruntime
mkdir -p /usr/local/onnxruntime
tar vzxf onnxruntime-linux-aarch64-1.15.1.tgz -C /usr/local/onnxruntime --strip-components=1
echo "/usr/local/onnxruntime/lib" > /etc/ld.so.conf.d/onnxruntime.conf
ldconfig

# 返回临时目录
cd $TEMP_DIR

# 克隆并安装 onnxruntime-server
git clone --depth 1 https://github.com/kibae/onnxruntime-server
cd $TEMP_DIR/onnxruntime-server
cmake -B build -S . -DCMAKE_BUILD_TYPE=Release
cmake --build build --parallel 4
cmake --install build --prefix /usr/local/onnxruntime-server

# 返回临时目录
cd $TEMP_DIR

# 克隆并安装 onnxruntime
git clone --depth 1 -b v1.15.1 https://github.com/microsoft/onnxruntime
cp /tmp/onnxruntime/include/onnxruntime/core/session/* /usr/local/onnxruntime/

# 返回临时目录
cd $TEMP_DIR

# 克隆并安装 pg_onnx
git clone --depth 1 --recursive https://github.com/kibae/pg_onnx.git
cd $TEMP_DIR/pg_onnx
cmake -B build -S . -DCMAKE_BUILD_TYPE=Release
cmake --build build --target pg_onnx --parallel 4
```

通过这种方式，每一步都更加清晰，并且每个步骤之间有明确的分隔，便于理解和执行。