# 三星手机内核防护技术RKP深度剖析（三）

##### 译文声明
本文为翻译文章，原作者为longterm，原文发布于longterm.io。译文仅供参考，具体内容及含义以原文为准。

在本系列文章中，我们将深入探讨三星手机的内核防护技术。上一篇文章介绍了研究平台、二进制文件提取方法、符号/日志字符串获取方式、管理程序框架概览以及三种常用结构体。本文将继续深入讲解更多内容。

## 系统初始化

实际上，uH/RKP是由S-Boot（Samsung Bootloader）加载到内存中的。S-Boot通过命令安全监视程序（运行在EL3）在其指定地址开始执行管理程序代码，从而跳转到EL2入口点。

```c
uint64_t cmd_load_hypervisor() {
    // ...
    part = FindPartitionByName("UH");
    if (part) {
        dprintf("%s: loading uH image from %d..\n", "f_load_hypervisor", part->block_offset);
        ReadPartition(&hdr, part->file_offset, part->block_offset, 0x4C);
        dprintf("[uH] uh page size = 0x%x\n", (((hdr.size - 1) >> 12) + 1) * 0x200000 || hdr.size > 0x1FEDF0) {
            dprintf("Could not do normal boot.(invalid uH length)\n");
            // ...
        }
        ret = memcmp_s(&hdr, "GREENTEA", 8);
        if (ret) {
            ret = -1;
            dprintf("Could not do uh load. (invalid magic)\n");
            // ...
        } else {
            ReadPartition(0x86FFF000, part->file_offset, part->block_offset, total_size);
            ret = pit_check_signature(part->partition_name, 0x86FFF000, total_size);
            if (ret) {
                dprintf("Could not do uh load. (invalid signing) %x\n", ret);
                // ...
            }
            load_hypervisor(0xC2000400, 0x87001000, 0x2000, 1, 0x87000000, 0x100000);
            dprintf("[uH] load hypervisor\n");
        }
    } else {
        ret = -1;
        dprintf("Could not load uH. (invalid ppi)\n");
        // ...
    }
    return ret;
}

void load_hypervisor(...) {
    dsb();
    asm("smc #0");
    isb();
}
```

**注意**：在最新的三星设备上，监视程序代码（基于ATF-ARM可信固件）已不再以纯文本形式出现在S-Boot二进制文件中，而是加密成一个blob。现在需要利用三星可信操作系统实现（TEEGRIS）的漏洞才能将其转储为纯文本形式。

```c
void default(...) {
    // ...
    if (get_current_el() == 8) {
        // Save registers x0 to x30, sp_el1, elr_el2, spsr_el2
        // ...
        memset(&rkp_bss_start, 0, 0x1000);
        main(saved_regs.x0, saved_regs.x1, &saved_regs);
    }
    asm("smc #0");
}
```

在此处，代码从`default`函数开始执行。在调用`main`之前，该函数会检查是否在EL2中运行。一旦`main`返回，它将执行SMC，大概是为了将控制权还给S-Boot。

```c
int32_t main(int64_t x0, int64_t x1, saved_regs_t *regs) {
    // ...
    // Setting A=0 (Alignment fault checking disabled)
    // SA=0 (SP Alignment check disabled)
    set_sctlr_el2(get_sctlr_el2() & 0xFFFFFFF5);
    if (!initialized) {
        initialized = 1;
        // Check if loading address is as expected
        if (&hyp_base != 0x87000000) {
            uh_log('L', "slsi_main.c", 326, "[-] static s1 mmu mismatch");
            return -1;
        }
        set_ttbr0_el2(&static_s1_page_tables_start__);
        s1_enable();
        uh_init(0x87000000, 0x200000);
        if (vmm_init())
            return -1;
        uh_log('L', "slsi_main.c", 338, "[+] vmm initialized");
        set_vttbr_el2(&static_s2_page_tables_start__);
        uh_log('L', "slsi_main.c", 348, "[+] static s2 mmu initialized");
        s2_enable();
        uh_log('L', "slsi_main.c", 351, "[+] static s2 mmu enabled");
    }
    uh_log('L', "slsi_main.c", 355, "[*] initialization completed");
    return 0;
}
```

在禁用对齐检查并确保二进制文件加载到预期地址（0x87000000）后，`main`函数会将TTBR0_EL2设置为其初始页表，并调用`s1_enable`函数。

```c
void s1_enable() {
    // ...
    cs_init(&s1_lock);
    // Setting Attr0=0xff (Normal memory, Outer & Inner Write-Back Non-transient,
    // Outer & Inner Read-Allocate Write-Allocate)
    // Attr1=0x00 (Device-nGnRnE memory)
    // Attr2=0x44 (Normal memory, Outer & Inner Write-Back Transient,
    // Outer & Inner No Read-Allocate No Write-Allocate)
    set_mair_el2(get_mair_el2() & 0xFFFFFFFFFF000000 | 0x4400FF);
    // Setting T0SZ=24 (TTBR0_EL2 region size is 2^40)
    // IRGN0=0b11 && ORGN0=0b11
    // (Normal memory, Outer & Inner Write-Back
    // Read-Allocate No Write-Allocate Cacheable)
    // SH0=0b11 (Inner Shareable)
    // PAS=0b010 (PA size is 40 bits, 1TB)
    set_tcr_el2(get_tcr_el2() & 0xFFF8C0C0 | 0x23F18);
    flush_entire_cache();
    sctlr_el2 = get_sctlr_el2();
    // Setting C=1 (data is cacheable for EL2)
    // I=1 (instruction access is cacheable for EL2)
    // WXN=1 (writeable implies non-executable for EL2)
    set_sctlr_el2(sctlr_el2 & 0xFFF7EFFB | 0x81004);
    invalidate_entire_s1_el2_tlb();
    // Setting M=1 (EL2 stage 1 address translation enabled)
    set_sctlr_el2(sctlr_el2 & 0xFFF7EFFA | 0x81005);
}
```

`s1_enable`函数的主要任务是设置与缓存相关的字段（如MAIR_EL2、TCR_EL2和SCTLR_EL2），但其最重要的任务是启用EL2的MMU。然后，`main`函数将调用`uh_init`函数，并将uH的内存范围传递给它。

我们可以看到，Gal Beniamini提出的第二项设计改进，即将WXN位设置为1，也已被三星KNOX团队实现。

```c
int64_t uh_init(int64_t uh_base, int64_t uh_size) {
    // ...
    memset(&uh_state.base, 0, sizeof(uh_state));
    uh_state.base = uh_base;
    uh_state.size = uh_size;
    static_heap_initialize(uh_base, uh_size);
    if (!static_heap_remove_range(0x87100000, 0x40000) || !static_heap_remove_range(&hyp_base, 0x87046000 - &hyp_base) ||
        !static_heap_remove_range(0x870FF000, 0x1000)) {
        uh_panic();
    }
    memory_init();
    uh_log('L', "main.c", 131, "================================= LOG FORMAT =================================");
    uh_log('L', "main.c", 132, "[LOG:L, WARN: W, ERR: E, DIE:D][Core Num: Log Line Num][File Name:Code Line]");
    uh_log('L', "main.c", 133, "==============================================================================");
    uh_log('L', "main.c", 134, "[+] uH base: 0x%p, size: 0x%lx", uh_state.base, uh_state.size);
    uh_log('L', "main.c", 135, "[+] log base: 0x%p, size: 0x%x", 0x87100000, 0x40000);
    uh_log('L', "main.c", 137, "[+] code base: 0x%p, size: 0x%p", &hyp_base, 0x46000);
    uh_log('L', "main.c", 139, "[+] stack base: 0x%p, size: 0x%p", stacks, 0x10000);
    uh_log('L', "main.c", 143, "[+] bigdata base: 0x%p, size: 0x%p", 0x870FFC40, 0x3C0);
    uh_log('L', "main.c", 152, "[+] date: %s, time: %s", "Feb 27 2020", "17:28:58");
    uh_log('L', "main.c", 153, "[+] version: %s", "UH64_3b7c7d4f exynos9610");
    uh_register_commands(0, init_cmds, 0, 5, 1);
    j_rkp_register_commands();
    uh_log('L', "main.c", 370, "%d app started", 1);
    system_init();
    apps_init();
    uh_init_bigdata();
    uh_init_context();
    memlist_init(&uh_state.dynamic_regions);
    pa_restrict_init();
    uh_state.inited = 1;
    uh_log('L', "main.c", 427, "[+] uH initialized");
    return 0;
}
```

将参数保存到名为`uh_state`的全局控制结构体后，`uh_init`函数将调用`static_heap_initialize`函数。该函数首先将其参数保存到全局变量中，然后将双向堆块链表初始化为覆盖整个uH静态内存范围的空闲块。

接下来，`uh_init`函数将调用`heap_remove_range`函数，从内存中删除静态堆分配器可以返回的三个重要地址范围（从而有效地将原来的内存块分割成多个块）：
1. 日志区域。
2. uH（代码/数据/bss/栈）区域。
3. “bigdata”（分析）区域。

之后，`uh_init`将调用`memory_init`函数。

```c
int64_t memory_init() {
    memory_buffer = 0x87100000;
    memset(0x87100000, 0, 0x40000);
    cs_init(&memory_cs);
    clean_invalidate_data_cache_region(0x87100000, 0x40000);
    memory_buffer_index = 0;
    memory_active = 1;
    return s1_map(0x87100000, 0x40000, UNKN3 | WRITE | READ);
}
```

此函数将日志区域清零，并将其映射到EL2页表中。这个区域将用于*printf字符串打印函数，后者会在`uh_log`函数内部调用。

随后，`uh_init`函数使用`uh_log`记录各种信息（这些信息可以从设备上的`/proc/uh_log`中获取）。然后，`uh_init`函数调用`uh_register_commands`和`rkp_register_commands`函数（后者也调用`uh_register_commands`，但参数不同）。

```c
int64_t uh_register_commands(uint32_t app_id,
                             int64_t cmd_array,
                             int64_t cmd_checker,
                             uint32_t cmd_count,
                             uint32_t flag) {
    // ...
}
```

以上是对三星手机内核防护技术RKP系统初始化过程的详细剖析。希望读者能从中获得更深入的理解。