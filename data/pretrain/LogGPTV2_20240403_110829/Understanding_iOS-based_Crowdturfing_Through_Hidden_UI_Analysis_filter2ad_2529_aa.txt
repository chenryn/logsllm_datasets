title:Understanding iOS-based Crowdturfing Through Hidden UI Analysis
author:Yeonjoon Lee and
Xueqiang Wang and
Kwangwuk Lee and
Xiaojing Liao and
XiaoFeng Wang and
Tongxin Li and
Xianghang Mi
Understanding iOS-based Crowdturfing 
Through Hidden UI Analysis
Yeonjoon Lee, Xueqiang Wang, Kwangwuk Lee, Xiaojing Liao, and XiaoFeng Wang, 
Indiana University; Tongxin Li, Peking University; Xianghang Mi, Indiana University
https://www.usenix.org/conference/usenixsecurity19/presentation/lee
This paper is included in the Proceedings of the 28th USENIX Security Symposium.August 14–16, 2019 • Santa Clara, CA, USA978-1-939133-06-9Open access to the Proceedings of the 28th USENIX Security Symposium is sponsored by USENIX.Understanding iOS-based Crowdturﬁng Through Hidden UI Analysis
Yeonjoon Lee1∗, Xueqiang Wang1∗, Kwangwuk Lee1, Xiaojing Liao1
XiaoFeng Wang1, Tongxin Li2, Xianghang Mi1
1Indiana University Bloomington, 2Peking University
Abstract
A new type of malicious crowdsourcing (a.k.a., crowdturﬁng)
clients, mobile apps with hidden crowdturﬁng user interface
(UI), is increasingly being utilized by miscreants to coordinate
crowdturﬁng workers and publish mobile-based crowdturﬁng
tasks (e.g., app ranking manipulation) even on the strictly con-
trolled Apple App Store. These apps hide their crowdturﬁng
content behind innocent-looking UIs to bypass app vetting
and inﬁltrate the app store. To the best of our knowledge,
little has been done so far to understand this new abusive
service, in terms of its scope, impact and techniques, not to
mention any effort to identify such stealthy crowdturﬁng apps
on a large scale, particularly on the Apple platform. In this
paper, we report the ﬁrst measurement study on iOS apps
with hidden crowdturﬁng UIs. Our ﬁndings bring to light the
mobile-based crowdturﬁng ecosystem (e.g., app promotion
for worker recruitment, campaign identiﬁcation) and the un-
derground developer’s tricks (e.g., scheme, logic bomb) for
evading app vetting.
1 Introduction
Crowdturﬁng is a term coined for underground crowdsourc-
ing [44], in which an illicit actor (typically a cybercriminal)
hires a large number of small-time workers to perform ques-
tionable and often malicious tasks online. Supporting such
an operation is a crowdturﬁng platform, the underground
counterpart of Amazon Mechanical Turk [1] that acts as an
intermediary for the cybercriminal to recruit small-time work-
ers for the hit jobs like creating fake accounts on an online
store, posting fake Yelp reviews, spreading rumors through
Twitter, etc. These attacks damage the quality of online social
media, manipulate political opinions, etc., thereby threatening
the public conﬁdence in the cyberspace, which is the very
foundation of the open web ecosystem.
Mobile crowdturﬁng. With the fast growth of mobile mar-
kets today, crowdturﬁng is extending its reach to mobile com-
puting, serving illegal missions like inﬂation of an app’s rating
or mass collection of coupons or other bonus during a sales
promotion. For this purpose, a mobile client (app) needs to
be deployed to a large number of underground workers. Such
an app, however, is prohibited by both Apple and Android
∗The two lead authors contributed equally to this work.
Figure 1: A Word Game with hidden crowdturﬁng UIs.
app stores according to their guidelines [21, 28], and will be
taken down once detected. Although dissemination of the
crowdturﬁng apps is still possible in the fragmented Android
world, through less regulated third-party stores, on the Apple
platform, cybercriminals ﬁnd it hard to reach out to the iPhone
users, due to the centralized app vetting and installation en-
forced by the Apple App Store. To circumvent this security
check, it has been reported [52] that crowdturﬁng Trojans
have been increasingly used to inﬁltrate the iOS App Store,
through embedding stealthy crowdturﬁng user interfaces (UI)
in innocent-looking iOS apps. An example is shown in Fig-
ure 1. Compared with web-based crowdturﬁng [37,45,46,49],
these apps are used to deliver mobile based crowdturﬁng tasks,
such as fake app review and app ranking manipulation. Also,
they are characterized by utilizing hidden UI techniques to by-
pass app vetting and deliver tasks for their small-time workers,
which raise the challenges for ﬁnding them. So far, little has
been done to systematically discover and analyze such hidden
crowdturﬁng apps, not to mention any effort to understand
the underground ecosystem behind them.
Finding crowdturﬁng apps. In this paper, we report the ﬁrst
measurement study on iOS crowdturﬁng apps. The study
relies on the discovery of such malicious apps from the Ap-
ple App Store, which is challenging, due to the difﬁculty in
identifying their elusive hidden UIs. These UIs are under the
cover of benign ones and can only be invoked under some
speciﬁc conditions (e.g., time, commands from C2 servers).
USENIX Association
28th USENIX Security Symposium    765
Even when they indeed show up, likely they operate similarly
as the legitimate UIs: no malware downloading, no illicit use
of private APIs, etc. To capture their illegitimacy, one needs
to read their content and understand their semantics. This,
however, requires human involvement and therefore does not
scale during app vetting. The attempt to detect such UIs be-
comes even more complicated for the third party, who does
not have the source code of the related apps and therefore
needs to work on binary executables. Indeed, our research has
brought to light almost 100 such apps already published on
Apple App Store, completely bypassing its vetting protection.
To address these challenges, we come up with a new triage
methodology, Cruiser, that identiﬁes the iOS apps likely to
contain hidden crowdturﬁng UIs for further manual inspection.
A key observation here is that such apps are characterized by
their conditionally triggered UIs (e.g., triggered not by user
actions but by network events), as demonstrated through UI
transitions. Also, the content of such hidden UIs is related to
crowdturﬁng semantically (e.g., app ranking manipulation),
which is inconsistent with their hosting app’s public descrip-
tion. These unique features make it possible to detect these
iOS apps through a combination of binary, UI layout and
content analyses. From 28,625 iOS apps covering 25 app
categories, our system reports 102 most likely involving hid-
den crowdturﬁng UIs; considering the large scale of Apple
App Store (2 million apps [3]) and the relatively high false
detection rate (8.8%) of our tool, we manually examined all
the 102 ﬂagged apps, and found that 93 apps indeed contain
hidden crowdturﬁng UIs.
Measurement and discoveries. Looking into the apps with
hidden crowdturﬁng UIs reported by Cruiser, we are surprised
to ﬁnd that this new threat is indeed trending, with a big im-
pact on today’s mobile ecosystem. More speciﬁcally, from the
93 apps detected, we discover 67 different mobile crowdturf-
ing platforms, which handle a variety of crowdturﬁng tasks,
such as app ranking manipulation, fraud account registration,
fake reviews, online blog reposting, and order scalping, etc.
Also importantly, these apps are found to bypass app vetting
several times and have a long lifetime. Such apps are popu-
lar, having been installed by a large number of users (32.4
million in total). Some of them even appear on the Apple
leaderboards, with 25 of them ranked among the top 100 in
their corresponding categories.
Also interesting is the ecosystem of mobile crowdturﬁng,
as discovered in our study, which includes app promotion for
worker recruitment, campaign identiﬁcation, etc. In particular,
crowdturﬁng platform owners are found to advertise their
apps through multiple channels, including crowdturﬁng app
gateway sites, in-app promotion and a pyramid (or referral)
scheme that rewards the individuals for recommending crowd-
turﬁng apps to other users. In the crowdturﬁng app gateway
sites, we observe that around 50% of hidden crowdturﬁng
apps have been downloaded more than 18K times; there are
32.4 million downloads in total. Also, we ﬁnd that the app
with hidden UIs is in high demand from the underground mar-
ket: e.g., cybercriminals are willing to pay hundreds of dollars
for developing such an app to circumvent Apple’s vetting.
Furthermore, we analyze the evasion techniques employed
by the crowdturﬁng apps, and bring to light new techniques
that utilize complicated conditions to trigger their malicious
behaviors: such apps not only know whether they have passed
Apple’s review so they can change their behaviors accord-
ingly, but also protect their hidden UIs with the conditions
involving user interactions or communication with a mali-
cious website. Up to our knowledge, such techniques have
not been reported to the Apple platform before, and therefore
bring new challenges to its vetting process. Further discov-
ered in our research is the way underground developers reuse
their product and work with each other: we see that different
developers inject different crowdturﬁng UIs to similar apps,
and the same developer hides the same UIs into her different
products. Also interestingly, almost identical apps, with both
over and cover UIs, are found to be submitted to the store
under different developer IDs. We disclosed our ﬁndings to
Apple, which acknowledged us and has removed all reported
apps from the App Store, though new attack apps of this type
continue to pop up due to Apple’s lack of effective means to
detect them; also upon Apple’s request, we provided a list of
ﬁngerprints for eliminating the apps similar to the malicious
ones.
Contributions. The contributions of the paper are outlined
as follows:
• New methodology. We developed a novel approach that
utilizes a binary-code analysis on UI hierarchy and Natu-
ral Language Processing (NLP) analysis on UI semantics to
detect the iOS apps with hidden crowdturﬁng UI.
• New ﬁndings. Cruiser helps us gain new insights into the
mobile crowdturﬁng ecosystem and exposes the underground
developer’s new tricks for evading Apple’s app vetting. Also
importantly, our study sheds light on a new attack vector that
has long been ignored: use of hidden UIs to evade even most
restrictive app vetting to distribute illicit content.
Roadmap. The rest of the paper is organized as follows: Sec-
tion 2 provides background information for our study; Sec-
tion 3 elaborates on the design of Cruiser; Section 4 presents
our measurement study and new ﬁndings; Section 5 discusses
the limitations of our current design and potential future re-
search; Section 6 reviews related prior research and Section 7
concludes the paper
2 Background
Crowdturﬁng platform. As mentioned earlier, crowdturﬁng,
also called malicious crowdsourcing, is an illicit business
model, in which cybercriminals (i.e., intermediaries) recruit
small-time workers to carry out malicious tasks (e.g., app
ranking manipulation) for dishonest third parties (e.g., app
766    28th USENIX Security Symposium
USENIX Association
iOS UI design. The UIs of an iOS app include view, view
controller (VC) and data: view deﬁnes the UI elements to be
displayed (e.g., button, image, and shape); data is the infor-
mation delivered through the deﬁned UI elements; and a VC
controls both views and their data to present a UI. All the
VCs of an app and their relations, which describe the tran-
sitions between different UIs, form a VC hierarchy, with its
root (called anchor) being the initial VC of the app or the VC
launched by the iOS object AppDelegate. Implementing a
VC hierarchy can be done using either VC transition APIs
(e.g., pushViewController:animated), or storyboard [19], a
visual tool in the Xcode interface builder. In the storyboard,
a sequence of scenes are used to represent VCs, and they
are connected by segue objects, which describe transitions
between VCs. iOS employs layout ﬁles (a.k.a., nib ﬁles) to
implement UIs, which can be generated using storyboard.
Over a VC hierarchy, developers commonly deﬁne two
kinds of transitions between a pair of VCs: Modal and Push. A
modal VC does not contain any navigation bar or tab bar, and
is used when developers create outgoing connections between
two UIs. To present a modal VC, the developer can directly
use APIs (e.g., presentViewController:animated:completion:),
or deﬁne a modal segue object [20] in a storyboard. An API
needs to be called in order to dismiss such a modal VC. On the
other hand, Push uses a navigation interface for VC transitions.
Selecting an item in the VC pushes a new VC onscreen,
thereby hiding the previous VC. Tapping the back button
in the navigation bar removes the top VC and reveals the
background VC. More speciﬁcally, developers can display the
view of a VC by pushing it to the navigation stack using the
pushViewController:animated: API, or deﬁne a push segue in
a storyboard. In the meantime, tapping the back button will
pop up the top VC from the navigation stack and makes the
new top displayed.
In our research, we observe that hidden crowturﬁng UIs
exhibits conditionally triggered navigation patterns in an app’s
VC hierarchy, including multiple root VCs as entry UIs, entry
VC not triggered by the users nor dismissed by itself, etc.
(Section 3.2).
Natural language processing. The semantic information our
system relies on is automatically extracted from UIs using
Natural Language Processing (NLP). Below we brieﬂy intro-
duce the key NLP techniques used in our research.
• Word embedding. Word Embedding is an NLP technique
that maps text (words or phrases) to high-dimensional vectors.
Such a mapping can be done in different ways, e.g., using
the continual bag-of-words model or the skip-gram technique
to analyze the context in which the words show up. Such a
vector representation ensures that synonyms are given similar
vectors and antonyms are mapped to different vectors. Tools
such as Word2vec [50] could be used to generate such vectors.
Word2vec takes a corpus of text (e.g., Wikipedia dataset)
as inputs, and assigns a vector to each unique word in the
Figure 2: Overview of modern crowdturﬁng platforms, where
“CP” represents a crowdturﬁng platform.
owner). Moving from the desktop browser-based clients (e.g.,
Zhubajie [5] and Sandaha [4]) to mobile devices, crowdturf-
ing today increasingly happens through the apps deployed to
workers’ smartphones. As an example, consider a dishonest
app owner who intends to inﬂate the app’s installation vol-
ume and therefore seeks help from a crowdturﬁng platform;
through the platform, the owner can pay workers to download
and install his app so as to fake its popularity. Other hit jobs
performed by the platform include the spread of fake reviews,
defamatory rumors, etc.
Figure 2 illustrates modern crowdturﬁng platforms support-
ing both desktop browser-based clients and mobile clients.
Such a platform, generally created and maintained by interme-
diaries, is designed to coordinate crowdturﬁng tasks and orga-
nize small-time criminals (workers) to do the tasks. As shown
in the ﬁgure, a crowdturﬁng platform consists of servers to dis-
tribute crowdturﬁng tasks, and desktop browser-based clients
or mobile clients to interact with the workers (e.g., publish-
ing the tasks and checking the quality of the work). Unlike
the platforms with browser-based clients, those with mobile
clients mainly aimed at mobile-related crowdturﬁng (e.g., app
ranking manipulation).
However, mobile crowdturﬁng clients, in the form of apps,
are widely considered to be illicit by app stores, including
Apple App Store [21] and reputable Android App stores like
Google Play [28]. Especially for iOS crowdturﬁng clients, it is
extremely hard for such apps to get through Apple’s restrictive
vetting process. Actually, from the underground forum, we
ﬁnd that some intermediaries seek experienced developers to
build apps capable of inﬁltrating the Apple store, by hiding
their crowdturﬁng UIs (Section 4.4). Also interestingly, due