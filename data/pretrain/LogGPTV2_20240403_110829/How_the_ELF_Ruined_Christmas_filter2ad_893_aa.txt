title:How the ELF Ruined Christmas
author:Alessandro Di Federico and
Amat Cama and
Yan Shoshitaishvili and
Christopher Kruegel and
Giovanni Vigna
How the ELF Ruined Christmas
Alessandro Di Federico, University of California, Santa Barbara and Politecnico di Milano; 
Amat Cama, Yan Shoshitaishvili, Christopher Kruegel, and Giovanni Vigna,  
University of California, Santa Barbara
https://www.usenix.org/conference/usenixsecurity15/technical-sessions/presentation/di-frederico
This paper is included in the Proceedings of the 
24th USENIX Security Symposium
August 12–14, 2015 • Washington, D.C.
ISBN  978-1-939133-11-3
Open access to the Proceedings of  the 24th USENIX Security Symposium is sponsored by USENIXHow the ELF Ruined Christmas
Alessandro Di Federico1,2, Amat Cama1, Yan Shoshitaishvili1, Christopher Kruegel1, and Giovanni
Vigna1
1University of California, Santa Barbara, CA, USA
{amat,yans,chris,vigna}@cs.ucsb.edu
PI:EMAIL
2Politecnico di Milano, Milan, Italy
Abstract
Throughout the last few decades, computer software has
experienced an arms race between exploitation techniques
leveraging memory corruption and detection/protection
mechanisms. Effective mitigation techniques, such as
Address Space Layout Randomization, have signiﬁcantly
increased the difﬁculty of successfully exploiting a vul-
nerability. A modern exploit is often two-stage: a ﬁrst
information disclosure step to identify the memory layout,
and a second step with the actual exploit. However, be-
cause of the wide range of conditions under which memory
corruption occurs, retrieving memory layout information
from the program is not always possible.
In this paper, we present a technique that uses the
dynamic loader’s ability to identify the locations of critical
functions directly and call them, without requiring an
information leak. We identiﬁed several fundamental weak
points in the design of ELF standard and dynamic loader
implementations that can be exploited to resolve and
execute arbitrary library functions. Through these, we
are able to bypass speciﬁc security mitigation techniques,
including partial and full RELRO, which are speciﬁcally
designed to protect ELF data-structures from being co-
opted by attackers. We implemented a prototype tool,
Leakless, and evaluated it against different dynamic loader
implementations, previous attack techniques, and real-
life case studies to determine the impact of our ﬁndings.
Among other implications, Leakless provides attackers
with reliable and non-invasive attacks, less likely to trigger
intrusion detection systems.
1
Introduction
Since the ﬁrst widely-exploited buffer overﬂow used by the
1998 Morris worm [27], the prevention, exploitation, and
mitigation of memory corruption vulnerabilities have oc-
cupied the time of security researchers and cybercriminals
alike. Even though the prevalence of memory corruption
vulnerabilities has ﬁnally begun to decrease in recent years,
classic buffer overﬂows remain the third most common
form of software vulnerability, and four other memory
corruption vulnerabilities pad out the top 25 [13].
One reason behind the decreased prevalence of mem-
ory corruption vulnerabilities is the heavy investment in
research on their prevention and mitigation. Speciﬁcally,
many mitigation techniques have been adopted in two
main areas: system-level hardening (such as CGroups [23],
AppArmor [4], Capsicum [41], and GRSecurity [18]) and
application-level hardening (such as stack canaries [3],
Address Space Layout Randomization (ASLR), and the
No-eXecute (NX) bit [8]).
In particular, Address Space Layout Randomization
(ASLR), by placing the dynamic libraries in a random lo-
cation in memory (unknown to the attacker), lead attackers
to perform exploits in two stages. In the ﬁrst stage, the
attacker must use an information disclosure vulnerability,
in which information about the memory layout of the appli-
cation (and its libraries) is revealed, to identify the address
of code that represents security-critical functionality (such
as the system() library function). In the second stage, the
attacker uses a control ﬂow redirection vulnerability to
redirect the program’s control ﬂow to this functionality.
However, because of the wide range of conditions under
which memory corruptions occur, retrieving this informa-
tion from the program is not always possible. For example,
memory corruption vulnerabilities in parsing code (e.g.,
decoding images and video) often take place without a
direct line of communication to an attacker, precluding the
possibility of an information disclosure. Without this in-
formation, performing an exploit against ASLR-protected
binaries using current techniques is often infeasible or
unreliable.
As noted in [36], despite the race to harden applications
and systems, the security of some little-known aspects of
application binary formats and the system components
using them, have not received much scrutiny. In particular
we focus on the dynamic loader, a userspace component of
USENIX Association  
24th USENIX Security Symposium  643
1
the operating system, responsible for loading binaries, and
the libraries they depend upon, into memory. Binaries use
the dynamic loader to support the resolution of imported
symbols. Interestingly, this is the exact behavior that an
attacker of a hardened application attempts to reinvent by
leaking a library’s address and contents.
Our insight is that a technique to eliminate the need for
an information disclosure vulnerability could be developed
by abusing the functionality of the dynamic loader. Our
technique leverages weaknesses in the dynamic loader and
in the general design of the ELF format to resolve and exe-
cute arbitrary library functions, allowing us to successfully
exploit hardened applications without the need for an infor-
mation disclosure vulnerability. Any library function can
be executed with this technique, even if it is not otherwise
used by the exploited binary, as long as the library that it
resides in is loaded. Since almost every binary depends
on the C Library, this means our technique allows us to
execute security-critical functions such as system() and
execve(), allowing arbitrary command execution. We
will also show application-speciﬁc library functions can be
re-used to perform sophisticated and stealthy attacks. The
presented technique is reliable, architecture-agnostic, and
does not require the attacker to know the version, layout,
content, or any other unavailable information about the
library and library function in question.
We implemented our ideas in a prototype tool, called
Leakless1. To use Leakless, the attacker must possess
the target application, and have the ability to exploit the
vulnerability (i.e., hijack control ﬂow). Given this infor-
mation, Leakless can automatically construct an exploit
that, without the requirement of an information disclosure,
invokes one or more critical library functions of interest.
To evaluate our technique’s impact, we performed a
survey of several different distributions of Linux (and
FreeBSD) and identiﬁed that the vast majority of binaries
in the default installation of these distributions are suscep-
tible to the attack carried out by Leakless, if a memory
corruption vulnerability is present in the target binary. We
also investigated the dynamic loader implementations of
various C Libraries, and found that most of them are sus-
ceptible to Leakless’ techniques. Additionally, we showed
that a popular mitigation technique, RELocation Read-
Only (RELRO), which protects library function calls from
being redirected by an attacker, is completely bypassable
by Leakless. Finally, we compared the length of Leakless’
ROP chains against ROP compilers implementing similar
functionality. Leakless produces signiﬁcantly shorter ROP
chains than existing techniques, which, as we show, allows
it to be used along with a wider variety of exploits than
similar attacks created by traditional ROP compilers.
1The source code is available at:
https://github.com/
ucsb-seclab/leakless
In summary, we make the following contributions:
• We develop a new, architecture- and platform-
agnostic attack, using functionality inherent in ELF-
based system that supports dynamic loading, to en-
able an attacker to execute arbitrary library functions
without an information disclosure vulnerability.
• We detail, and overcome, the challenges of imple-
menting our system for different dynamic loader
implementations and in the presence of multiple
mitigation techniques (including RELRO).
• Finally, we perform an in-depth evaluation, including
a case study of previously complicated exploits that
are made more manageable with our technique, an as-
sessment of the security of several different dynamic
loader implementations, a survey of the applicability
of our technique to different operating system conﬁg-
urations, and a measurement of the improvement in
the length of ROP chains produced by Leakless.
2 Related Work:
The Memory Corruption Arms Race
The memory corruption arms race (i.e., the process of
defenders developing countermeasures against known
exploit techniques, and attackers coming up with new
exploitation techniques to bypass these countermeasures)
has been ongoing for several decades. While the history
of this race has been documented elsewhere [37], this
section focuses on the sequence of events that has required
many modern exploits to be two-stage, that is, needing an
information disclosure step before an attacker can achieve
arbitrary code execution.
Early buffer overﬂow exploits relied on the ability to
inject binary code (termed shellcode) into a buffer, and
overwrite a return address on the stack to point into this
buffer. Subsequently, when the program would return from
its current function, execution would be redirected to the
attacker’s shellcode, and the attacker would gain control
of the program.
As a result, security researchers introduced another
mitigation technique: the NX bit. The NX bit has the effect
of preventing memory areas not supposed to contain code
(typically, the stack) from being executed.
The NX bit has pushed attackers to adapt the concept
of code reuse: using functionality already in the program
(such as system calls and security-critical library functions)
to accomplish their goals. In return-into-libc exploits [30,
39], an attacker redirects the control ﬂow directly to a
sensitive libc function (such as system()) with the proper
arguments to perform malicious behavior, instead of using
injected shellcode.
To combat this technique, a system-level hardening
technique named Address Space Layout Randomization
644  24th USENIX Security Symposium 
USENIX Association
2
(ASLR) was developed. When ASLR is in place, the
attacker does not know the location of libraries, in fact,
the program’s memory layout (the locations of libraries,
the stack, and the heap) is randomized at each execution.
Because of this, the attacker does not know where in the
library to redirect the control ﬂow in order to execute
speciﬁc functions. Worse, even if the attacker is able to
determine this information, he is still unable to identify
the location of speciﬁc functions inside the library unless
he is in possession of a copy of the library. As a result,
an attacker usually has to leak the contents of the library
itself and parse the code to identify the location of critical
functions. To leak these libraries, attackers often reuse
small chunks of code (called gadgets) in the program’s
code segment to disclose memory locations. These gadgets
are usually combined by writing their addresses onto
the stack and consecutively returning to them. Thus,
this technique is named Return Oriented Programming
(ROP) [35].
ROP is a powerful tool for attackers. In fact, it has been
shown that a “Turing-complete” set of ROP gadgets can be
found in many binaries and can be employed, with the help
of a ROP compiler, to carry out exploitation tasks [34].
However, because of their generality, ROP compilers tend
to produce long ROP chains that, depending on the speciﬁc
details of a vulnerability, are “too big to be useful” [22].
Later, we will show that Leakless produces relatively
short ROP chains, and, depending on present mitigations,
requires very few gadgets. Additionally, Leakless is able
to function without a Turing-complete gadget set.
In real-world exploits, an attacker usually uses an infor-
mation disclosure attack to leak the address or contents
of a library, then uses this information to calculate the
correct address of a security-critical library function (such
as system()), and ﬁnally sends a second payload to the
vulnerable application that redirects the control ﬂow to
call the desired function.
In fact, we observed that that the goal of ﬁnding the
address of a speciﬁc library function is actually already
implemented by the dynamic loader, an OS component
that facilitates the resolution of dynamic symbols (i.e.,
determining the addresses of library functions). Thus,
we realized that we could leverage the dynamic loader to
remove the information disclosure step, and craft exploits,
which would work without the need of an information
disclosure attack. Since our attack does not require an
information leak step, we call it Leakless.
The concept of using the dynamic loader as part of the
exploitation process was brieﬂy explored in the context of
return-into-libc attacks [15,21,30]. However, existing tech-
niques are extremely situational [30], platform-dependent,
require two stages [21], or are susceptible to current mit-
igation techniques such as RELRO [30], which we will
discuss in future sections. Leakless, on the other hand, is a
single-stage, platform-independent, general technique, and
is able to function in the presence of such mitigations.
In the next section, we will describe how the dynamic
loader works, and afterwards will show how we abuse this
functionality to perform our attack.
3 The Dynamic Loader
The dynamic loader is a component of the userspace
execution environment that facilitates loading the libraries
required by an application at start time and resolving
the dynamic symbols (functions or global variables) that
are exported by libraries and used by the application.
In this section, we will describe how dynamic symbol
resolution works on systems based on the ELF binary
object speciﬁcation [33].
ELF is a standard format common to several Unix-like
platforms, including GNU/Linux and FreeBSD, and is
deﬁned independently from any particular dynamic loader
implementation. Since Leakless mostly relies on standard
ELF features, it is easily applicable to a wide range of
systems.
3.1 The ELF Object
An application comprises a main binary ELF ﬁle (the
executable) and several dynamic libraries, also in ELF
format. Each ELF object is composed of segments, and
each segment holds one or more sections.
Each section has a conventional meaning. For instance,
the .text section contains the code of the program, the
.data section contains its writeable data (such as global
variables), and the .rodata section contains the read-only
data (such as constants and strings). The list of sections is
stored in the ELF ﬁle as an array of Elf Shdr structures.
Note that there are two versions of each ELF structure:
one version for 32-bit ELF binaries (e.g., Elf32 Rel) and
one for 64-bit (e.g., Elf64 Rel). We ignore this detail for
the sake of simplicity, except in speciﬁc cases where it is
relevant to our discussion.
3.2 Dynamic Symbols and Relocations
In this section, we will give a summary of the data
structures involved in ELF symbol resolution. Figure 1
gives an overview of these data structures and their mutual
relationships.
An ELF object can export symbols to and import sym-
bols from other ELF objects. A symbol represents a
function or a global variable and is identiﬁed by a name.
Each symbol is described by a corresponding Elf Sym
structure. This structure, instances of which comprise
the .dynsym ELF section, contains the following ﬁelds
relevant to our work:
st name. An offset, relative to the start of the .dynstr
section, where the string containing the name of the
symbol is located.
USENIX Association  
24th USENIX Security Symposium  645
3
dl runtime resolve(link map obj, reloc index)
entry in the GOT.
.rel.plt
...
l
e
R
f
l
E
l
e
R
f
l
E
r offset
r info
...
r offset
r info
...
.dynsym
...
st name
st info
...
st name
st info
...
m
y
S
f
l
E
m
y
S
f
l
E
...
...
.dynstr
read\0
...
...
printf\0
...
Figure 1: The relationship between data structures involved
in symbol resolution (without symbol versioning). Shaded
background means read only memory.
st value. If the symbol is exported, the virtual address
of the exported function, NULL otherwise.
These structures are referenced to resolve imported
symbols. The resolution of imported symbols is supported
by relocations, described by the Elf Rel structure. In-
stances of this structure populate the .rel.plt section
(for imported functions) and the .rel.dyn section (for
imported global variables). In our discussion we are only
interested to the former section. The Elf Rel structure
has the following ﬁelds:
r info. The three least signiﬁcant bytes of this ﬁeld are
used as an unsigned index into the .dynsym section
to reference a symbol.
r offset. The location (as an absolute address) in mem-
ory where the address of the resolved symbol should
be written to.
When a program imports a certain function, the linker
will include a string with the function’s name in the