Since the computation of βr does not
involve
xr−1
x0
r−1
these bits of β0,
it is easy to ﬁnd α
0 , . . . , α
and β0 that satisfy γr = μ(hμ(αxr
r ), βr). Just
pick
compute
and
βr,
r ), βr) ⊕
(cid:6)(cid:11)r−1
let
x0
0 , . . . , α
(cid:7)
β0[(2r+1)κ..(2r+2)κ]
xj
j=0 ˆρj+1(hρ(α
j ))
xr−1
r−1 ,
=
μ(hμ(αxr
any α
.
4.3. Wrap-resistence
(cid:4)
, γ
, β
(cid:4)), δ
We need to show that given a mix message
(cid:4)
(cid:4)), an adversary is unable to wrap it;
((α
that is, the adversary cannot produce a mix message
((α, β, γ), δ) such that a mix node (even one whose
private key x the adversary can select) processing
(cid:4)
((α, β, γ), δ) will yield ((α
(cid:4)), δ
(cid:4)).
, β
, γ
(cid:4)
In order for the adversary to succeed, it is necessary
(cid:4)
that αhb(α,s) = α
where s = αx. We will show that an
adversary which makes c queries to the random oracle
hb can ﬁnd such an (α, x) pair with probability at most
q−1 ; for an adversary that does less than 2κ work, this
is negligible.
c
The proof is simple:
if the adversary outputs a
correct (α, x) pair, then she must have queried the
random oracle with (α, αx). But each (α, s) query to
the oracle yields a random value b ∈R Z
∗
q. Since α is
a generator of G∗
, the probability that αb equals the
(cid:4)
given α
1
q−1 , and the result follows.
is
4.4. Security and Indistinguishability of For-
ward and Reply Messages
We need to show that an adversary controlling all
nodes except one particular node, N, cannot distinguish
mix messages entering node N, where each contains a
(Δ, m) pair of the adversary’s choice, each has a path
following node N of the adversary’s choice, and the
messages can each be either forward or reply messages,
as the adversary likes. Additionally, the adversary can
see how N reacts to any mix message except one with
a header matching the challenge message.
In particular, this would not only prove that the
security property of [5] is satisﬁed, but also that
forward and reply messages are indistinguishable to
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 03:19:04 UTC from IEEE Xplore.  Restrictions apply. 
any party that does not know the exit node’s private
key.
(cid:14)= j, but does not know xnj
Formally: consider the following game G. The ad-
versary selects a sequence of mix nodes n0, . . . , nν−1
with ν ≤ r. One of these, nj, is the challenge node N.
The adversary can select the private keys xni ∈ Z
∗
q
for all i
(he does
know the public key ynj ). The adversary also selects a
destination address Δ ∈ D\{∗}, a message m, and a
bit f that indicates whether this message should be a
forward message (f = 1) or a reply message (f = 0).
The
set
then
(cid:4) ≤ r, and Δ(cid:4) ∈ D\{∗},
(cid:4)
0, . . . , n
(cid:4)
that
and
,
it need
the list of subsequent nodes
(cid:4)
j = N is the same (or even of the same
n
m
(n0, n1, . . . , nj) = (n
not be the case that
after nj = n
length).
adversary
(cid:4)
ν(cid:3)−1 with ν
It must
(cid:4)
0, n
the
(cid:4)
j), but
(cid:4)
1, . . . , n
second
selects
case
be
a
f
(cid:4)
.
The challenger randomly chooses a bit b and con-
structs one of two mix messages as follows:
If b=0 and f=0: The challenger passes Δ and
{n0, . . . , nν−1} to the procedure of section 3.4 to
create a single-use reply block. There is no need to
store values in the local table, or to send (n0, M0, ˜k)
to the nymserver. However, M0 and ˜k are used, along
with m, in the procedure of section 3.5 to construct the
mix message ((α0, β0, γ0), δ0) which it would send to
n0.1
If b=0 and f=1: The challenger passes Δ, m, and
{n0, . . . , nν−1} to the procedure of section 3.3. This
procedure returns the mix message ((α0, β0, γ0), δ0).
If b=1: The challenger performs the same actions as
ν(cid:3)−1, Δ(cid:4)
(cid:4)
,
(cid:4)
and f
((α0, β0, γ0), δ0) is given to the adversary, whose
job it is to determine b. The adversary can also give
(cid:4)) to the challenge node
(cid:4)
any mix message ((α
(cid:4)) (cid:14)=
(cid:4)
nj to see how it reacts, so long as (α
above, but uses the primed values n
m
instead of their unprimed counterparts.
(cid:4)
0, . . . , n
(cid:4)), δ
, β
, β
, γ
, γ
(cid:4)
(cid:4)
(cid:4)
1. Following section 3.5, we assume for simplicity that all reply
messages are delivered using the nymserver. However, this assump-
tion is not essential. If Alice wishes to send a reply block directly
to Bob, for Bob’s use in replying to her, she just modiﬁes the
procedure of section 3.4 to send him (n0, M0), omits ˜k from
the tuple in her local table, and omits the π−1(˜k,·) step from
the procedure of section 3.7. The proof then need only have one
additional part: to show that an adversary cannot cryptographically
distinguish replies output by the nymserver from replies output by a
ﬁrst node n0 whose private key the adversary does not know. (Here,
“cryptographically distinguish” excludes distinuguishing based on
trafﬁc analysis; that is, observing the origin of the message.) The
remaining path in the two reply blocks should be the same, and the
adversary is allowed to know all other nodes’ private keys. This is
straightforward: the only salient difference between the messages is
that the payload in the nymserver message is π(˜k, 0κ(cid:2)m) and in the
other is π−1(hπ(sn0 ), 0κ(cid:2)m). Both of these are indistinguishable
from a random string to an adversary that knows neither ˜k nor sn0 .
278
(αj , βj, γj). Here, as in [5, §4.2], we only care about
uniqueness of the header, not of the message body.
We will show that the adversary cannot determine
the value of b with signiﬁcantly better chance than
random guessing. Once we have proven this, we note
that the ability of the adversary to individually select
whether each of the two messages is a forward message
or a reply message also implies our desired property
that the adversary cannot distinguish forward messages
from replies. This holds so long as there is even a
single node yet to process the message whose private
key the adversary does not know.
The advantage of the adversary is the difference
between 1/2 and the probability the adversary guesses
b correctly. We wish to show that the advantage for an
adversary that does signiﬁcantly less than 2κ work is
negligible.
We use the usual method of hybrid games. We ﬁrst
note that since the adversary can select the private
keys xn0 , . . . , xnj−1 , without loss of generality, we can
assume that j = 0.
, as opposed to being calulated as s0 = yx
Game G1 is the same as G except that s0 (in the
procedure of section 3.2, called from section 3.3 in the
case of a forward message or section 3.4 in the case of
a reply message) is selected uniformly at random from
G∗
n0. An
adversary that can distinguish game G from G1 can
easily be used to distinguish (yn0, α0 = gx, s0 = yx
)
from (yn0 , α0, z) for a random z ∈R G∗
n0
, thus solving
the DDH problem in G∗
, contrary to our choice of
G∗
. Here it is important that the adversary should not
be allowed to query N with the challenge (α0, β0, γ0)
header, since N would not be able to process it. That
γ must be a MAC on β with key hμ(α
) ensures
that (α0, β, γ) (cid:14)= (α0, β0, γ0) will be rejected by N
except with negligible probability. If any (α, β, γ) is
submitted to N with α (cid:14)= α0 such that N successfully
processes the message, then the success of the MAC
ensures that, again except with negligible probability,
the adversary knew the MAC key hμ(α
). Since hμ
is a random oracle, the adversary must have queried it
xn0
. But if the adversary knows that last value,
with α
0
he can process the message just as well as N can, and
the ability to query N does not help him.
Game G2 is the same as G1 except that β0, γ0,
and δ0 are selected uniformly at random from their
respective domains. If the adversary can distinguish
games G1 and G2, then he can distinguish (with less
work than 2κ) the output of ρ with a random input from
a random string, or μ with a random key from a random
function, or π with a random key (hπ(s0)—with s0
being the randomly selected value from game G1—in
the case of forward messages, or ˜k in the case of reply
xn0
0
xn0
0
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 03:19:04 UTC from IEEE Xplore.  Restrictions apply. 
messages) from a random permutation, which he can
do with only negligible probability, by our choice of
ρ, μ, and π.
In game G2, since α0 is independent of the bit b,
and β0, γ0, and δ0 are all random (and independent of
b), it is clear the adversary’s advantage is 0. Since each
game is indistinguishable from the one before to the
adversary, except with negligible probability, we see
that the adversary’s advantage in the original game G
is negligible, as required.
5. Performance and Space Efﬁciency
In this section we give a brief overview of es-
tablished cryptographic packet formats, and compare
them to Sphinx both in terms of functionality as well
as message size overhead. Throughout this section
p denotes the size of any public key element in a
packet format, s denotes the size of the symmetric
key elements (per hop), and r denotes the maximum
number of hops that messages can be routed through
(all sizes are in bytes). When comparing overhead
sizes, we will attempt to match the 128-bit security
offered by Sphinx. Some older designs only supplied
80-bit security, using 1024-bit RSA keys, for example.
We will be generous to the competing formats and
stipulate that an RSA or Difﬁe-Hellman modulus of
2048 bits (256 bytes) is sufﬁcient to offer 128-bit
security, even though NIST [2] suggests that 3072-bit
moduli are more appropriate for that security level.
In the elliptic curve setting, we use the usual ﬁgure
of 256-bit (32-byte) elements (assuming only the x-
coordinate of the elliptic curve point is required, or
point compression is used) in order to achieve 128-bit
security.
The Sphinx packet format relies on a single public
key element, blinded at each stage of mixing, and for
each hop a message authentication code and the appro-
priate routing information. The cryptographic overhead
sums to p + (2r + 1)s bytes in total for the header,
and an additional s bytes for integrity of the payload.
The most costly operations involved in building a
packet are the 2r public key operations. Relaying a
Sphinx message requires only two public key oper-
ations (the Difﬁe-Hellman and blinding operations),
plus the check that α ∈ G∗
. (In
Curve25519, for example, this check does not involve
∗
p, it does.)
a public-key operation, but in Z
, for some choices of G∗
Mixmaster [16] is an established remailer infrastruc-
ture, with about 25 nodes with over 90% reliability
according to Echolot statistics2 as of November 2008.
2. http://www.palfrader.org/echolot/
The main cryptographic shortcoming of the format is
the lack of support for anonymous replies. The now-
aging design uses 1024-bit RSA for the asymmetric
encryption part, encapsulating routing information and
a 3-DES key to be used in CBC mode (with a changing
IV). Integrity is ensured through the use of an MD5
hash. The standard supports relaying messages over 20
hops—each hop adding a ﬁxed 512 bytes of overhead.
In total the equivalent of the routing header occu-
pies 10240 bytes. Abstracting away from the concrete
cryptographic mechanisms employed the length of a
mixmaster header is (1 + p + 8 + 8s + 31)r + s bytes
(including a version number, an IV and padding). The
Sphinx header is shorter since it does not require a
public key element for each hop, and does not require
an IV, since each key is used only once.
scheme makes use of multiple
The ﬁrst provable cryptographic packet format was
proposed by M¨oller [15] and provided very simi-
lar functionality to the Mixmaster format—it sup-
ports sender-anonymous messages but not replies.
The