# 【技术分享】angr：基于Python的二进制分析框架

## 译文声明
本文为翻译文章，原文来源：安全客。译文仅供参考，具体内容表达及含义以原文为准。

## 作者
desword

## 稿费
预估稿费：200 RMB（欢迎投稿！）

## 投稿方式
- 发送邮件至 linwei#360.cn
- 或访问 [网页版](http://bobao.360.cn/contribute/index) 在线投稿

---

## 前言
angr 是一个强大的集成框架，在二进制代码分析和CTF竞赛中表现出色。以下是一些已解决的CTF赛题示例：
- HackCon 2016 – angry-reverser：耗时31分钟
- SecurityFest 2016 – fairlight：耗时20秒
- Defcamp CTF Qualification 2015 – Reversing 100 和 Reversing 200：几乎无需人工干预，能够自动化完成分析

这些功能令人惊叹，对于CTF中的二进制分析来说，angr无疑是一个利器。本文将简要介绍这个工具。（注：本文旨在抛砖引玉，更深入的用法和源码分析将在后续更新。）

在二进制代码中寻找并利用漏洞是一项极具挑战性的任务，主要难点在于难以直观地理解二进制代码中的数据结构和控制流信息。angr 是一个基于 Python 的二进制漏洞分析框架，集成了多种分析技术，方便安全研究人员使用。它支持动态符号执行（如 KLEE 和 Mayhem）以及多种静态分析方法。

最近在多个顶级安全会议（如 S&P, USENIX Security, CCS）上，都有使用符号执行框架的研究成果展示。未来计划整理成专题，详细介绍它们的使用及优缺点。

项目 GitHub 地址：[https://github.com/angr/angr](https://github.com/angr/angr)

---

## angr 的简要过程
1. 将二进制程序载入 angr 分析系统。
2. 将二进制程序转换为中间表示语言（Intermediate Representation, IR）。
3. 将 IR 转换为语义更强的表达形式，例如描述程序的功能而不是其具体实现。
4. 执行进一步的分析，包括完整的或部分的静态分析（如依赖关系分析、程序分块）、程序空间的符号执行探索（如挖掘溢出漏洞），以及其他结合方式。

---

## angr 的安装
理论上，angr 支持 Linux、Windows 和 macOS 多个平台，但 Linux 平台的支持最为完善。由于 Windows 平台上的相关依赖库较难安装，不建议在 Windows 上安装。

### Linux
推荐使用 Ubuntu 14.04，其他版本可能会遇到不同的问题。

#### 安装依赖库
```bash
sudo apt-get install python-dev libffi-dev build-essential virtualenvwrapper
```

virtualenvwrapper 是一个 Python 虚拟环境管理工具，用于防止对现有库的修改影响其他程序的运行。

#### 创建虚拟环境
```bash
mkvirtualenv angr
```

#### 安装 angr
```bash
pip install angr
```

#### 常见问题
1. 如果在新创建的虚拟环境中导入 `angr` 时出现 `ImportError: No module named decorator` 错误，可以尝试安装 `decorator`：
    ```bash
    pip install decorator
    ```

更多详细信息请参阅 [angr 的 GitBook](http://pan.baidu.com/s/1jIiBfHO "angr_book")。

#### 使用 angr-dev 脚本安装
另一种简单的安装方式是通过 `angr-dev` 脚本：
1. 克隆仓库：
    ```bash
    git clone https://github.com/angr/angr-dev
    ```
2. 进入根目录并运行脚本：
    ```bash
    ./setup.sh -i -e angr
    ```
3. 启动 angr：
    ```bash
    workon angr
    ipython
    >>> import angr
    ```

### macOS
1. 安装依赖库：
    ```bash
    pip install -I --no-use-wheel angr-only-z3-custom
    ```
2. 安装 angr：
    ```bash
    pip install angr
    ```

### Windows
目前没有测试过 Windows 平台的安装，但可以参考 [Owlz/angr-Windows](https://github.com/Owlz/angr-Windows) 获取相关信息。

---

## angr 简单示例
以下示例展示了如何使用 angr。样例程序如下：

```c
#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include <unistd.h>

char *sneaky = "SOSNEAKY";

int authenticate(char *username, char *password) {
    char stored_pw[9];
    stored_pw[8] = 0;
    int pwfile;

    if (strcmp(password, sneaky) == 0) return 1;

    pwfile = open(username, O_RDONLY);
    read(pwfile, stored_pw, 8);
    if (strcmp(password, stored_pw) == 0) return 1;

    return 0;
}

int accepted() {
    printf("Welcome to the admin console, trusted user!n");
}

int rejected() {
    printf("Go away!");
    exit(1);
}

int main(int argc, char **argv) {
    char username[9];
    char password[9];
    int authed;

    username[8] = 0;
    password[8] = 0;

    printf("Username: n");
    read(0, username, 8);
    read(0, &authed, 1);

    printf("Password: n");
    read(0, password, 8);
    read(0, &authed, 1);

    authed = authenticate(username, password);
    if (authed) accepted();
    else rejected();

    return 0;
}
```

该程序要求用户输入用户名和密码，然后调用 `authenticate` 函数进行验证。如果验证失败，则显示 "Go away"；否则，显示认证成功。

### 使用 angr 挖掘验证码
1. 进入虚拟 Python 环境并导入 angr 库：
    ```bash
    mkvirtualenv angr
    (angr) $ python
    >>> import angr
    ```

2. 创建一个新的 angr 项目：
    ```python
    p = angr.Project('./fauxware')
    ```

3. 创建一个 `SimState` 对象：
    ```python
    state = p.factory.entry_state()
    ```

4. 获取路径对象：
    ```python
    path = p.factory.path(state)
    ```

5. 使用 `path_group` 容器获取路径列表：
    ```python
    pathgroup = p.factory.path_group(path)
    ```

6. 让 `pathgroup` 对象执行直到产生选择分支：
    ```python
    pathgroup.step(until=lambda lpg: len(lpg.active) > 1)
    ```

7. 输出所有可能的路径内容：
    ```python
    for i in range(len(pathgroup.active)):
        print(f"possible {i}: {pathgroup.active[i].state.posix.dumps(0)}")
    ```

以上是使用 angr 解决此类问题的基本方法。为了提高效率，还可以探索更多高级技巧。

---

## 总结
本文介绍了 angr 二进制分析框架的基本功能。更多高级用法和原理性知识，请参阅 angr 的 GitHub 项目。符号执行技术近年来非常火热，KLEE 和 Mayhem 也是两个典型的开源工具，学习这些工具将有助于提高二进制分析和漏洞跟进的效率。