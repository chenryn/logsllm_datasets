In the context of signature-based network intrusion detection,
previous work has focussed on efﬁciently matching hundreds of
ﬁxed strings in parallel: [12] and [8] both present implementations
of set-wise pattern matching for Snort [29]. For Bro’s signature en-
gine, we make use of regular expressions [18]. They give us both
ﬂexibility and efﬁciency. [17] presents a method to incrementally
build the underlying DFA, which we can use to avoid the potentially
enormous memory and computation required to generate the com-
plete DFA for thousands of signatures. An extended form of regular
expressions has been used in intrusion detection for deﬁning se-
quences of events [30], but to our knowledge no NIDS uses them
for actually matching multiple byte patterns against the payload of
packets.
In this paper, we concentrate on signature-based NIDS. Snort is
one of the most-widely deployed systems and relies heavily on its
signature set. Also, most of the commercial NIDSs are signature-
based [19], although there are systems that use more powerful con-
cepts to express signatures than just specifying byte patterns.
NFR [28], for example, uses a ﬂexible language called N-Code to
declare its signatures. In this sense, Bro already provides sophisti-
cated signatures by means of its policy language. But the goal of our
work is to combine the advantages of a traditional dedicated pattern
matcher with the power of an additional layer abstracting from the
raw network trafﬁc. IDS like STAT [35] or Emerald [26] are more
general in scope than purely network-based systems. They con-
tain misuse-detection components as well, but their signatures are
deﬁned at a higher level. The STAT framework abstracts from low-
level details by using transitions on a set of states as signatures. A
component called NetSTAT [36] deﬁnes such state transitions based
on observed network-trafﬁc. Emerald, on the other hand, utilizes
P-BEST [20], a production-based expert system to deﬁne attacks
based on a set of facts and rules. Due to their general scope, both
systems use a great deal of context to detect intrusions. On the other
hand, our aim is to complement the most common form of signa-
ture matching—low-level string matching—with context, while still
keeping its efﬁciency.
The huge number of generated alerts is one of the most impor-
tant problems of NIDS (see, for example, [23]). [3] discusses some
statistical limits, arguing in particular that the false-alarm rate is the
limiting factor for the performance of an IDS.
Most string-based NIDSs use their own signature language, and
are therefore incompatible. But since most languages cover a com-
mon subset, it is generally possible to convert the signatures of one
system into the syntax of another. ArachNIDS [1], for example,
generates signatures dynamically for different systems based on a
common database, and [32] presents a conversion of Snort signa-
tures into STAT’s language, although it does not compare the two
systems in terms of performance. We take a similar approach, and
convert Snort’s set into Bro’s new signature language.
For evaluation of the new signature engine, we take Snort as a
reference. But while comparing Bro and Snort, we have encoun-
tered several difﬁculties which we discuss in §4. They are part of
the general question of how to evaluate NIDSs. One of the most
comprehensive evaluations is presented in [21, 22], while [24] of-
fers a critique of the methodology used in these studies. [14] further
extends the evaluation method by providing a user-friendly environ-
ment on the one hand, and new characterizations of attack trafﬁc
on the other hand. More recently, [10] evaluates several commer-
cial systems, emphasizing the view of an analyst who receives the
alerts, ﬁnding that these systems ignore relevant information about
the context of the alerts. [15] discusses developing a benchmark for
NIDSs, measuring their capacity with a representative trafﬁc mix.
(Note, in §4.2 we discuss our experiences with the difﬁculty of ﬁnd-
ing “representative” traces.)
3. CONTEXTUAL SIGNATURES
The heart of Bro’s contextual signatures is a signature engine de-
signed with three main goals in mind: (i) expressive power, (ii) the
ability to improve alert quality by utilizing Bro’s contextual state,
and (iii) enabling the reuse of existing signature sets. We discuss
each in turn. Afterwards, we present our experiences with Snort’s
signature set, and ﬁnally show examples which demonstrate appli-
cations for the described concepts.
3.1 Regular Expressions
A traditional signature usually contains a sequence of bytes that
are representative of a speciﬁc attack.
If this sequence is found
in the payload of a packet, this is an indicator of a possible at-
tack. Therefore, the matcher is a central part of any signature-based
NIDS. While many NIDSs only allow ﬁxed strings as search pat-
terns, we argue for the utility of using regular expressions. Regular
expressions provide several signiﬁcant advantages: ﬁrst, they are
far more ﬂexible than ﬁxed strings. Their expressiveness has made
them a well-known tool in many applications, and their power arises
in part
context with
which to sharpen textual searches. In particular, character classes,
union, optional elements, and closures prove very useful for speci-
fying attack signatures, as we see in §3.5.1.
from providing additional
syntactic
Surprisingly, given their power,
regular expressions can be
matched very efﬁciently. This is done by compiling the expres-
sions into DFAs whose terminating states indicate whether a match
is found. A sequence of n bytes can therefore be matched with
O(n) operations, and each operation is simply an array lookup—
highly efﬁcient.
The total number of patterns contained in the signature set of
a NIDSs can be quite large. Snort’s set, for example, contains
1,715 distinct signatures, of which 1,273 are enabled by default.
Matching these individually is very expensive. However, for ﬁxed
strings, there are algorithms for matching sets of strings simulta-
neously. Consequently, while Snort’s default engine still works it-
eratively, there has been recent work to replace it with a “set-wise”
matcher [8, 12].1 On the other hand, regular expressions give us set-
wise matching for free: by using the union operator on the individ-
ual patterns, we get a new regular expression which effectively com-
bines all of them. The result is a single DFA that again needs O(n)
operations to match against an n byte sequence. Only slight modiﬁ-
cations have been necessary to extend the interface of Bro’s already-
existing regular expression matcher to explicitly allow grouping of
expressions.
Given the expressiveness and efﬁciency of regular expressions,
there is still a reason why a NIDS might avoid using them:
the
underlying DFA can grow very large. Fully compiling a regular ex-
pression into a DFA leads potentially to an exponential number of
DFA states, depending on the particulars of the patterns [18]. Con-
sidering the very complex regular expression built by combining
all individual patterns, this straight-forward approach could easily
be intractable. Our experience with building DFAs for regular ex-
pressions matching many hundreds of signatures shows that this is
indeed the case. However, it turns out that in practice it is possible
to avoid the state/time explosion, as follows.
Instead of pre-computing the DFA, we build the DFA “on-the-
ﬂy” during the actual matching [17]. Each time the DFA needs to
transit into a state that is not already constructed, we compute the
new state and record it for future reuse. This way, we only store
DFA states that are actually needed. An important observation is
that for n new input characters, we will build at most n new states.
Furthermore, we ﬁnd in practice (§4.3) that for normal trafﬁc the
growth is much less than linear.
However, there is still a concern that given inauspicious trafﬁc—
which may actually be artiﬁcially crafted by an attacker—the state
construction may eventually consume more memory than we have
available. Therefore, we also implemented a memory-bounded DFA
state cache. Conﬁgured with a maximum number of DFA states,
it expires old states on a least-recently-used basis. In the sequel,
when we mention “Bro with a limited state cache,” we are referring
to such a bounded set of states (which is a conﬁguration option for
our version of Bro), using the default bound of 10,000 states.
Another important point is that it’s not necessary to combine all
patterns contained in the signature set into a single regular expres-
sion. Most signatures contain additional constraints like IP address
ranges or port numbers that restrict their applicability to a subset of
the whole trafﬁc. Based on these constraints, we can build groups
of signatures that match the same kind of trafﬁc. By collecting only
those patterns into a common regular expression for matching the
group, we are able to reduce the size of the resulting DFA dras-
tically. As we show in §4, this gives us a very powerful pattern
matcher still efﬁcient enough to cope with high-volume trafﬁc.
3.2 Improving Alert Quality by Using Context
Though pattern matching is a central part of any signature-based
NIDSs, as we discussed above there is potentially great utility in
incorporating more context in the system’s analysis prior to gener-
ating an alert, to ensure that there is indeed something alert-worthy
occurring. We can considerably increase the quality of alerts, while
simultaneously reducing their quantity, by utilizing knowledge
about the current state of the network. Bro is an excellent tool for
this as it already keeps a lot of easily accessible state.
The new signature engine is designed to ﬁt nicely into Bro’s lay-
ered architecture as an adjunct to the protocol analysis event en-
gine (see Figure 1). We have implemented a custom language for
deﬁning signatures.
It is mostly a superset of other, similar lan-
1The code of [12] is already contained in the Snort distribution, but
not compiled-in by default. This is perhaps due to some subtle bugs,
some of which we encountered during our testing as well.
Figure 1: Integrating the signature engine (adapted from [25])
Policy script
Real−time notification
Policy Layer
Event Control
Signature Control
Event stream
Signatures
Signature
Engine
Event Engine
Packet filter
Filtered packet stream
Packet capture
Packet stream
Network
guages, and we describe it in more detail in §3.3. A new component
placed within Bro’s middle layer matches these signatures against
the packet stream. Whenever it ﬁnds a match, it inserts a new event
into the event stream. The policy layer can then decide how to re-
act. Additionally, we can pass information from the policy layer
back into the signature engine to control its operation. A signature
can specify a script function to call whenever a particular signature
matches. This function can then consult additional context and in-
dicate whether the corresponding event should indeed be generated.
We show an example of this later in §3.5.4.
In general, Bro’s analyzers follow the communication between
two endpoints and extract protocol-speciﬁc information. For exam-
ple, the HTTP analyzer is able to extract URIs requested by Web
clients (which includes performing general preprocessing such as
expanding hex escapes) and the status code and items sent back
by servers in reply, whereas the FTP analyzer follows the applica-
tion dialog, matching FTP commands and arguments (such as the
names of accessed ﬁles) with their corresponding replies. Clearly,
this protocol-speciﬁc analysis provides signiﬁcantly more context
than does a simple view of the total payload as an undifferentiated
byte stream.
The signature engine can take advantage of this additional in-
formation by incorporating semantic-level signature matching. For
example, the signatures can include the notion of matching against
HTTP URIs; the URIs to be matched are provided by Bro’s HTTP
analyzer. Having developed this mechanism for interfacing the sig-
nature engine with the HTTP analyzer, it is now straight forward
to extend it to other analyzers and semantic elements (indeed, we
timed how long it took to add and debug interfaces for FTP and
Finger, and the two totalled only 20 minutes).
Central to Bro’s architecture is its connection management. Each
network packet is associated with exactly one connection. This no-
tion of connections allows several powerful extensions to traditional
signatures. First of all, Bro reassembles the payload stream of TCP
connections. Therefore, we can perform all pattern matching on the
actual stream (in contrast to individual packets). While Snort has a
preprocessor for TCP session reassembling, it does so by combin-
ing several packets into a larger “virtual” packet. This packet is then
passed on to the pattern matcher. Because the resulting analysis
remains packet-based, it still suffers from discretization problems
introduced by focusing on packets, such as missing byte sequences
that cross packet boundaries. (See a related discussion in [25] of the
problem of matching strings in TCP trafﬁc in the face of possible
intruder evasion [27].)
In Bro, a signature match does not necessarily correspond to an
alert; as with other events, that decision is left to the policy script.
Hence, it makes sense to remember which signatures have matched
for a particular connection so far. Given this information, it is then
possible to specify dependencies between signatures like “signature
A only matches if signature B has already matched,” or “if a host
matches more than N signatures of type C, then generate an alert.”
This way, we can for example describe multiple steps of an attack.
In addition, Bro notes in which direction of a connection a particular
signature has matched, which gives us the notion of request/reply
signatures: we can associate a client request with the corresponding
server reply. A typical use is to differentiate between successful and
unsuccessful attacks. We show an example in §3.5.3.
More generally, the policy script layer can associate arbitrary
kinds of data with a connection or with one of its endpoints. This
means that any information we can deduce from any of Bro’s other
components can be used to improve the quality of alerts. We demon-
strate the power of this approach in §3.5.2.
Keeping per-connection state for signature matching naturally
raises the question of state management: at some point in time we
have to reclaim state from older connections to prevent the system
from exhausting the available memory. But again we can leverage
the work already being done by Bro. Independently of our signa-
tures, it already performs a sophisticated connection-tracking using
various timeouts to expire connections. By attaching the matching
state to the already-existing per-connection state, we assure that the
signature engine works economically even with large numbers of
connections.
3.3 Signature Language
Any signature-based NIDS needs a language for actually deﬁning
signatures. For Bro, we had to choose between using an already
existing language and implementing a new one. We have decided
to create a new language for two reasons. First, it gives us more
ﬂexibility. We can more easily integrate the new concepts described