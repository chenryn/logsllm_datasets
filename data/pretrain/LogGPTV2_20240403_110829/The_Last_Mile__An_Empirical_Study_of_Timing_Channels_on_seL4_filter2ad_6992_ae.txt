i
l
i
b
a
b
o
r
P
0.02
0.01
0
M0
M1
183
183.5
184
184.5
185
185.5
186
Response time (ms)
Figure 13: Response times for OpenSSL 1.0.1c, intercontinen-
tal distance. 105 samples, 10µs bins.
As rows 2–4 of Table 3 show, while distinguishability (and hence
vulnerability) drops with increasing network distance, it does so
very slowly. The attack is still easily feasible at the greatest sepa-
ration that we could achieve—launching the attack from an Ama-
zon EC2 instance in Oregon, USA, against our target machine in
our laboratory in Sydney. Despite many routing hops, ﬁrewalls,
and great physical distance, the attacker still guesses correctly with
62% probability given only one observation. We thus conclude that
network distance provides extremely poor protection against tim-
ing channels, and that variation of only 10µs is easily distinguish-
able at any point on the internet with good connectivity. Figure 13
shows the two distributions. This supports the mathematical anal-
ysis summarised in Figure 2: adding noise (in this case network
jitter), provides poor protection against timing channels. We now
show that our preferred approach, reducing variance, is much more
effective, as it removes the vulnerability at the source.
6.2 Scheduled Delivery
Our countermeasure to this channel is a system-level black-box
approach that avoids the difﬁculty of producing portable constant-
time algorithms. We build on the fast context-switches and well-
understood temporal behaviour of seL4 [Blackham et al., 2011], to
impose precise delays on communication. Recent work [Askarov
et al., 2010] suggests policies for automatically setting such delays.
We provide an efﬁcient mechanism.
The effect of a manually-tuned delay is shown by the central
(SD) pair of peaks in Figure 12. As rows 5 and 6 of Table 3 show,
we achieve a lower vulnerability than the constant-time implemen-
tation of OpenSSL (57% distinguishability or 0.03 b leak of min
entropy vs. 62% and 0.07 b). Despite this, our countermeasure re-
duces latency by 6% compared to CD. The better matching be-
tween the curves occurs as nothing in our implementation is data-
dependent, and the only intrinsic penalty is the cost of blocking and
restarting the server, which from the ﬁgure is ≈ 10µs. We have not
yet managed to ﬁnd the cause of the small remaining variation in
the response time. For a detailed analysis of this approach, see
Cock [2014].
6.3 Cost
Figure 14 shows the overhead of SD. Each curve plots CPU
load against packet ingress rate, up to the point at which which
packet loss begins (single CPU). For the unmodiﬁed OpenSSL
1.0.1c (blue), load increases linearly, with loss beginning with the
onset of saturation at 3000 packets per second. The constant-time
OpenSSL 1.0.1e (red) shows a 10% CPU overhead, consistent with
the increased latency observed in Figure 12, and correspondingly
earlier saturation, at 2800 p/s. The extra cycles are wasted ensuring
that execution time is always worst case.
1
0.5
d
a
o
l
U
P
C
0
0
1.0.1c
1.0.1e
1.0.1c-sd 1 thread
1.0.1c-sd 2 thread
1000
2000
3000
Ingress rate (packets/s)
Figure 14: Performance and overhead of scheduled delivery,
OpenSSL 1.0.1c, and 1.0.1e (constant-time).
The next curve (green), for a single-threaded server under SD, is
close to that for the vulnerable version, with only 1.7% overhead.
This is the beneﬁt of not wasting time in a constant-time implemen-
tation. Instead of busy-waiting, we idle by entering a (low-power)
sleep state, with obvious advantages for mobile devices.
This curve also demonstrates the downside: packet loss begins
at 1400 p/s. Packets arriving while sleeping are dropped, limiting
throughput. This is an extreme case, however, as the echo server
does no work at all, so all CPU time is spent in OpenSSL itself.
In any non-trivial system, the server will work while the packet
handler sleeps, with no throughput loss once OpenSSL is less than
half the load.
The orange curve shows that slack could be re-used to run a
second server thread. This is not secure (as it transforms latency
variation into throughput variation), but demonstrates that we need
not suffer a throughput overhead, given a non-trivial application.
Except the excursion between 1300 and 2200 p/s, due to our sim-
plistic prototype ports of lwIP [Dunkels, 2001] and OpenSSL, we
regain peak throughput of 2800 p/s, still with better overhead than
constant-time.
7. DISCUSSION
Our results highlight the importance of a systematic empirical
approach to timing channels. It is far too easy to overlook poten-
tial channels, and without establishing sound bounds on bandwidth,
one could easily be fooled into a false sense of security.
Our work demonstrates some such pitfalls. For instance, one
would expect cache colouring to be an effective countermeasure,
even against an attacker with access to an accurate measure of wall-
clock time. Speciﬁcally (excepting frequency scaling) we expected
the cycle counter to be such a timing source. However, we found
the cycle counter not only to be inaccurate on modern processors,
but in fact inﬂuenced by cache misses, and thus creating a timing
channel of its own!
In fact, none of the examined countermeasures were perfect:
IBS, cache colouring, constant-time implementations and sched-
uled delivery all leave residual channels, a depressing realisation.
579However, we note that our local exploits were performed under
the most pessimistic assumption of a malicious agent exploiting
a covert channel. The (generally small) remaining channels may
provide sufﬁcient protection in a side-channel scenario, such as a
co-hosted cloud environment. However, we cannot say this with
certainty.
We must also recognise the limitations of our approach: the pre-
cision of our estimates is always limited by the quantity of data
available. Given a ﬁnite number of observations, we can only rule
out channels down to a certain bandwidth; there is always the pos-
sibility of a residual channel hiding below the limit of our statistical
precision. For example, even for our best result, IBS on the iMX.31
showing a bandwidth of essentially zero after 10,000 samples per
column, the conﬁdence interval CI max
extends to 0.1 b/s, meaning
that there could be a channel of lower bandwidth that we simply
cannot resolve. If a single column were to deviate with a proba-
bility of, say 10−6, we would only expect to see it in one of 100
experiments.
Between the release of the iMX.31 in 2005, and the Exynos4412
in 2012, IBS has gone from an essentially perfect countermea-
sure, to a highly ineffective one. This highlights the strong effect
that subtle (and generally undocumented) hardware effects have on
countermeasures, and the value of careful empirical evaluation.
0
8. RELATED WORK
Our empirical approach to timing channels is similar to that of
Gay et al. [2013] who measured interrupt-related covert channels
(IRCCs) by experimentally determining the channel’s Shannon ca-
pacity. However, they make the assumption that the channel output
follows a binomial distribution, in order to compute Shannon ca-
pacity in a closed form, and so avoid working with very large chan-
nel matrices as we do (see Section 4). They empirically measure
only the unmitigated channel bandwidth; however, earlier work of
Mantel and Sudbrock [2007] involved a theoretical comparison of
IRCC mitigation techniques under an information theoretic channel
model.
Cache colouring was originally developed to assist real-time sys-
tems to partition the L2 cache into a number of non-overlapping do-
mains [Liedtke et al., 1997]; its potential utility as a cache-channel
mitigation technique is therefore obvious. Various hardware mech-
anisms for cache partitioning have been proposed [Jaleel et al.,
2012], although none are available in the platforms we analyse.
This has recently been analysed by Godfrey [2013] (on the Xen
hypervisor) using an actual side-channel attack, while we build a
synthetic covert-channel attack, and measure the bandwidth reduc-
tion. Unlike Godfrey, we partition kernel as well as user memory.
STEALTHMEM [Kim et al., 2012] is a recent system that gen-
eralises the idea of cache partitioning, offering a limited amount
of stealth memory, rather than partitioning the complete cache.
While this leads to potentially less performance impact, it requires
modifying applications and is only applicable to trusted entities
(senders), while we treat applications as black boxes.
IBS works by correlating clocks, and so is related to determinis-
tic execution techniques, originally used to debug systems [Aviram
et al., 2010a,b; Bergan et al., 2010; Ford, 2012], although without
requiring full determinism. It was implemented in the Hails web
application framework [Stefan et al., 2013], speciﬁcally to address
timing channels. Martin et al. [2012] propose modifying the CPU
to add noise to the timestamp counter (RDTSC), which we argue is
inefﬁcient for high-security applications.
Scheduled delivery considers only the external behaviour of a
component—its response time—which it delays to reduce leakage.
Askarov et al. [2010]; Zhang et al. [2011] present an adaptive de-
lay policy to counter remote timing side-channels. We present an
efﬁcient mechanism to implement such a policy.
9. CONCLUSIONS
We have examined representative locally- and remotely-
exploitable timing channels on the veriﬁed seL4 microkernel,
and suitable mitigation strategies. We ﬁnd that instruction-based
scheduling and cache colouring (against cache contention), and
scheduled delivery against remote attacks, are easy to implement
in seL4, without impacting its generality. The exception is the L1
cache ﬂush needed for cache colouring, which x86 doesn’t allow-
ing, requiring expensive explicit cache trashing.
While these mechanisms are effective on older processors, per-
formance optimisation in newer processors not only introduces im-
precision in hardware-generated events, which manifests as non-
determinism, but the degree of imprecision is frequently affected by
user-controlled events, cache misses or branch mis-predicts, which
introduces new channels. Thus more effort is required to treat the
cache channel, forcing the OS developer to play catch-up with the
processor manufacturers.
For remotely-exploitable channels we ﬁnd that, at least for the
Lucky-13 attack on OpenSSL, OS-level black-box approaches are
more effective, and come with less latency penalty, than the ofﬁcial
“constant-time” mitigation.
In summary: Closing timing channels remains difﬁcult, even for
a small high-assurance system like seL4. Unexpected results show
the importance of a systematic experimental approach to determin-
ing channel bandwidth, to avoid a false sense of security.
Acknowledgements: NICTA is funded by the Australian Government
through the Department of Communications and the Australian Research
Council through the ICT Centre of Excellence Program.
References
Onur Aciiçmez, Çetin Kaya Koç, and Jean-Pierre Seifert.
Predicting secret keys via branch prediction. In 2007 CT-RSA,
pages 225–242, 2006.
Nadhem J. AlFardan and Kenneth G. Paterson. Lucky thirteen:
Breaking the TLS and DTLS record protocols. In IEEE Symp.
Security & Privacy, pages 526–540, San Francisco, CA, May
2013.
Suguru Arimoto. An algorithm for computing the capacity of
arbitrary discrete memoryless channels. Trans. Inform. Theory,
18(1):14–20, 1972.
Aslan Askarov, Andrew C. Myers, and Danfeng Zhang. Predictive
black-box mitigation of timing channels. In 17th CCS, pages
520–538, Chicago, Illinois, USA, 2010.
Amittai Aviram, Sen Hu, Bryan Ford, and Ramakrishna
Gummadi. Determinating timing channels in compute clouds.
In 2010 CCSW, pages 103–108, Chicago, Illinois, USA, 2010a.
Amittai Aviram, Shu-Chun Weng, Sen Hu, and Bryan Ford.
Efﬁcient system-enforced deterministic parallelism. In 9th
OSDI, Vancouver, BC, 2010b.
Gilles Barthe, Gustavo Betarte, Juan Diego Campo, and Carlos
Luna. Cache-leakage resilient OS isolation in an idealized
model of virtualization. In 25th CSF, pages 186–197, 2012.
Tom Bergan, Nicholas Hunt, Luis Ceze, and Steven D. Gribble.
Deterministic process groups in dOS. In 9th OSDI, pages 1–16,
Vancouver, BC, Canada, 2010.
Bernard Blackham, Yao Shi, Sudipta Chattopadhyay, Abhik
Roychoudhury, and Gernot Heiser. Timing analysis of a
protected operating system kernel. In 32nd RTSS, pages
339–348, Vienna, Austria, Nov 2011.
580Richard E. Blahut. Computation of channel capacity and
rate-distortion functions. Trans. Inform. Theory, 18:460–473,
1972.
David Cock. Leakage in Trustworthy Systems. PhD thesis,
University of New South Wales, 2014.
Goran Doychev, Dominik Feld, Boris Köpf, Laurent Mauborgne,
and Jan Reineke. CacheAudit: A tool for the static analysis of
cache side channels. In USENIX Security, 2013.
Adam Dunkels. Minimal TCP/IP implementation with proxy
support. Technical Report T2001-20, SICS, 26, 2001.
http://www.sics.se/~adam/thesis.pdf.
George Washington Dunlap, III. Execution replay for intrusion
analysis. PhD thesis, University of Michigan, 2006.
Kevin Elphinstone and Gernot Heiser. From L3 to seL4 – what
have we learnt in 20 years of L4 microkernels? In SOSP, pages
133–150, Farmington, PA, USA, Nov 2013.
Bryan Ford. Plugging side-channel leaks with timing information
ﬂow control. In 4th HotCloud, pages 1–5, Boston, MA, 2012.
Richard Gay, Heiko Mantel, and Henning Sudbrock. Empirical
bandwidth analysis of interrupt-related covert channels. In 2nd
QASA, London, Sep 2013.
Michael Godfrey. On the prevention of cache-based side-channel
attacks in a cloud environment. Master’s thesis, Queen’s
University, Ontario, Canada, Sep 2013.
Wei-Ming Hu. Reducing timing channels with fuzzy time. In
1991 Comp. Soc. Symp. Research Security & Privacy, pages
8–20, 1991.
Ralf Hund, Carsten Willems, and Thorsten Holz. Practical timing
side channel attacks against kernel space ASLR. In IEEE Symp.
Security & Privacy, pages 191–205, San Francisco, CA, May
2013.
IAD. U.S. Government Protection Proﬁle for Separation Kernels
in Environments Requiring High Robustness. Information
Assurance Directorate, Jun 2007. Version 1.03.
http://www.niap-ccevs.org/cc-scheme/pp/pp.cfm/id/pp_
skpp_hr_v1.03/.
Aamer Jaleel, Hashem H. Najaf-abadi, Samantika Subramaniam,
Simon C. Steely, and Joel Emer. CRUISE: Cache replacement
and utility-aware scheduling. In 17th ASPLOS, pages 249–260,
London, England, UK, 2012. URL
http://doi.acm.org/10.1145/2150976.2151003.
Taesoo Kim, Marcus Peinado, and Gloria Mainar-Ruiz.
STEALTHMEM: system-level protection against cache-based
side channel attacks in the cloud. In 21st USENIX Security,
pages 189–204, Bellevue, WA, USA, Aug 2012.
Gerwin Klein, Kevin Elphinstone, Gernot Heiser, June Andronick,
David Cock, Philip Derrin, Dhammika Elkaduwe, Kai
Engelhardt, Rafal Kolanski, Michael Norrish, Thomas Sewell,
Harvey Tuch, and Simon Winwood. seL4: Formal veriﬁcation
of an OS kernel. In SOSP, pages 207–220, Big Sky, MT, USA,
Oct 2009.
Gerwin Klein, June Andronick, Kevin Elphinstone, Toby Murray,
Thomas Sewell, Rafal Kolanski, and Gernot Heiser.
Comprehensive formal veriﬁcation of an OS microkernel.
Trans. Comp. Syst., 32(1):2:1–2:70, Feb 2014.
Boris Köpf and David Basin. An information-theoretic model for
adaptive side-channel attacks. In 14th CCS, pages 286–296,
Alexandria, Virginia, USA, 2007.
Boris Köpf, Laurent Mauborgne, and Martín Ochoa. Automatic
quantiﬁcation of cache side-channels. In 24th CAV, pages
564–580, 2012.
Jochen Liedtke, Hermann Härtig, and Michael Hohmuth.
OS-controlled cache predictability for real-time systems. In 3rd
RTAS, Montreal, Canada, Jun 1997.
Heiko Mantel and Henning Sudbrock. Comparing
countermeasures against interrupt-related covert channels in an
information-theoretic framework. In 20th CSF, pages 326–340,
2007.
Robert Martin, John Demme, and Simha Sethumadhavan.
Timewarp: Rethinking timekeeping and performance
monitoring mechanisms to mitigate side-channel attacks. In
ISCA, pages 118–129, Portland, Oregon, USA, Jun 2012. URL
http://doi.acm.org/10.1145/2366231.2337173.
Nagendra Modadugu and Eric Rescorla. The design and
implementation of datagram TLS. In NDSS, 2004.
Toby Murray, Daniel Matichuk, Matthew Brassil, Peter Gammie,
Timothy Bourke, Sean Seefried, Corey Lewis, Xin Gao, and
Gerwin Klein. seL4: from general purpose to a proof of
information ﬂow enforcement. In IEEE Symp. Security &
Privacy, pages 415–429, San Francisco, CA, May 2013.
NSA. Information Assurance Guidance for Systems Based on a
Security Real-Time Operating System. National Security
Agency, Dec 2005. SSE-100-1,
http://www.nsa.gov/ia/_ﬁles/sse-100-1.pdf.
NSA. TEMPEST: A signal problem. Cryptologic Spectrum, 2(3),
1972. Available at: http://www.nsa.gov/public_info/_ﬁles/
cryptologic_spectrum/tempest.pdf.
Chris Owen, Duncan Grove, Tristan Newby, Alex Murray, Chris
North, and Michael Pope. PRISM: Program replication and
integration for seamless MILS. In IEEE Symp. Security &
Privacy, pages 281–296, May 2011.
Thomas Ristenpart, Eran Tromer, Hovav Shacham, and Stefan
Savage. Hey, you, get off of my cloud: exploring information
leakage in third-party compute clouds. In 16th CCS, pages
199–212, Chicago, IL, USA, 2009.
Claude E. Shannon. A mathematical theory of communication.
The Bell Syst. Techn. J., 1948. Reprinted in SIGMOBILE
Mobile Computing and Communications Review, 5(1):3–55,
2001.
Geoffrey Smith. On the foundations of quantitative information
ﬂow. In 12th FOSSACS, pages 288–302, York, UK, 2009.
Deian Stefan, Pablo Buiras, Edward Z. Yang, Amit Levy, David
Terei, Alejandro Russo, and David Mazières. Eliminating
cache-based timing attacks with instruction-based scheduling.
In 18th ESORICS, pages 718–735, Egham, UK, Sep 2013.
David Tam, Reza Azimi, Livio Soares, and Michael Stumm.
Managing shared L2 caches on multicore systems in software.
In 3rd WS Interaction between Operat. Syst. & Comp. Arch.,
San Diego, CA, USA, Jun 2007.
NIST. Common Criteria for IT Security Evaluation. US National
Institute of Standards, 1999. ISO Standard 15408.
http://csrc.nist.gov/cc/.
John C. Wray. An analysis of covert timing channels. In 1991
Comp. Soc. Symp. Research Security & Privacy, pages 2–7,
May 1991.
Yaming Yu. Squeezing the Arimoto-Blahut algorithm for faster
convergence. Trans. Inform. Theory, 56(7):3149–3157, 2010.
Danfeng Zhang, Aslan Askarov, and Andrew C. Myers. Predictive
mitigation of timing channels in interactive systems. In 18th
CCS, pages 563–574, Chicago, IL, USA, 2011.
Yinqian Zhang and Michael K. Reiter. Düppel: Retroﬁtting
commodity operating systems to mitigate cache side channels in
the cloud. In CCS, 2013.
Yinqian Zhang, Ari Juels, Michael K. Reiter, and Thomas
Ristenpart. Cross-VM side channels and their use to extract
private keys. In 19th CCS, pages 305–316, Raleigh, NC, USA,
2012.
581