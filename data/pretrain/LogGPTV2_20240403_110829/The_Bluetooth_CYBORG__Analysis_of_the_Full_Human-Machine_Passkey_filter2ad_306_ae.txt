2a’. P Kb ← [SKb]P
3. P Ka
4. P Kb
5a. DHKey ← [SKa]P Kb
Adv
3’. P Kb
4’. P Ka
5a’. DHKey ← [SKb]P Ka
Phase 2: Authentication Stage 1
6. r $← {0, 1, 2, . . . , 9}6
7. r
7’. r
User
9a. ra ← r, rb ← r
$← {0, 1}128
10a. Na,i
11a. Ca,i ← HMAC(Na,i, P Kax(cid:107)P Kbx(cid:107)ra,i)
Execute steps 10a - 17
twenty times in sequence
9a’. ra ← r, rb ← r
$← {0, 1}128
10a’. Nb,i
11a’. Cb,i ← HMAC(Nb,i, P Kbx(cid:107)P Kax(cid:107)rb,i)
12. Ca,i
13. Cb,i
14. Na,i
16. Nb,i
Adv
12’. Cb,i
13’. Ca,i
14’. Nb,i
16’. Na,i
17. v2 ← Vfy(Nb,i, (P Kbx(cid:107)P Kax(cid:107)ra,i), Cb,i)
17’. v2(cid:48) ← Vfy(Na,i, (P Kax(cid:107)P Kbx(cid:107)rb,i), Ca,i)
Phase 3: Authentication Stage 2
18a. Ea ← HMAC(DHKey, Na,20(cid:107)Nb,20(cid:107)rb(cid:107)IOcapA(cid:107)A(cid:107)B)
18a’. Eb ← HMAC(DHKey, Nb,20(cid:107)Na,20(cid:107)ra(cid:107)IOcapB(cid:107)B(cid:107)A)
19. Ea
21. Eb
Adv
19’. Eb
21’. Ea
22. v4 ← Vfy(DHKey, (Nb,20(cid:107)Na,20(cid:107)ra(cid:107)IOcapB(cid:107)B(cid:107)A), Eb)
22’. v4(cid:48) ← Vfy(DHKey, (Na,20(cid:107)Nb,20(cid:107)rb(cid:107)IOcapA(cid:107)A(cid:107)B), Ea)
23a. LKa ← HMAC(DHKey, Na,20(cid:107)Nb,20(cid:107)btlk(cid:107)A(cid:107)B)
Phase 4: Link Key Calculation
23a’. LKb ← HMAC(DHKey, Nb,20(cid:107)Na,20(cid:107)btlk(cid:107)B(cid:107)A)
Fig. 4. Role confusion attack on User-Generated Passkey Entry that results in
two devices, both in the initiator role, accepting. Adversary shown by dashes.
First we deﬁne the session identiﬁer for all versions of
Passkey Entry from a correctly executed session involving an
initiating device, e.g. A, and responding device, e.g. B, as
described in Section III-A4:
sidu := ((A, B, IOcapA, IOcapB), P Ka, P Kb, r, Ca,1, . . .
. . . , Cb,1, Na,1, Nb,1, Ca,20, Cb,20, Na,20, Nb,20, Ea, Eb).
Note that identities are shown as an example above, and A
may be either an initiating device or responding device in the
following analysis, speciﬁed where appropriate.
Theorem IV.1. Initiator-Generated and Responder-Generated
Passkey Entry are not CYBORG-UncUser-secure.
an
adversarial
s , πB
j , (start, (πA
Let A be
algorithm against
Proof: We prove Theorem IV.1 via a counter-example by
describing how an adversary can entice a device to accept
maliciously in the Initiator-Generated Passkey Entry case. The
case of Responder-Generated Passkey Entry follows similarly.
the
CYBORG-UncUser security of Initiator-Generated Passkey
Entry. The adversary ﬁrst issues a SendDevice(πA
s , (start, B))
to initiate a protocol run between devices A and B, and
a SendUser(πU
the
t ))) query to initiate
associated user oracle. The adversary then allows
the
protocol to progress through step 8. At this point, A then
makes a guess re,i for the bit value of ra,i used by the
initiating device to construct Ca,i where 1 ≤ i ≤ 19. A then
randomly samples a new nonce Ne,i and calculates a new
tag Ce,i = HMAC(Ne,i, P Kax(cid:107)P Kbx(cid:107)re,i). When device A
attempts to send Ca,i to device B in step 12, the adversary
replaces this value with Ce,i, and similarly replaces Na,i with
Ne,i in step 14. If we have that ra,i = re,i, then device B’s
veriﬁcation in step 15 will succeed; A will then take no further
actions and allow the protocol to proceed to completion. This
will lead to both πA
t accepting but they will not have
matching session identiﬁers since they will disagree on the
values for Ca,i and Na,i and A succeeds in breaking auth.
Since A’s guess of ra,i is correct with probability one-half,
we have that AdvCYBORG-UncUser
(λ) ≥ 1/2 .
s and πB
PE-IG,A,ηp,ηs
In User-Generated Passkey Entry an adversary can mount
a “role confusion” attack on the pairing devices (illustrated
in Figure 4 and described in the proof of Theorem IV.2
below). This attack leads to both devices accepting although
neither actually pairs with the other. Similar attacks have been
previously shown on other protocols [5].
Theorem IV.2. User-Generated Passkey Entry
CYBORG-UncUser-secure.
is not
s , πB
j , (start, (πA
Proof: Let A be an adversarial algorithm against the
CYBORG-UncUser security of User-Generated Passkey En-
try. A ﬁrst issues a SendUser(πU
t ))) to ini-
tiate the user for a protocol run between devices A and
B. A then issues both a SendDevice(πA
s , (start, B)) and a
t , (start, A)) query. A will then function as an
SendDevice(πB
intermediary between the session oracles πA
t , which
both run the protocol in the role of the initiating device. After
both device A and B exchange their public keys through the
adversary, they will be ready to accept the passkey from the
user. The user inputs a passkey into both devices according
to the protocol (note that the device session role is opaque to
the user). A then simply relays all relevant protocol messages
between device A and device B in keeping with the description
of User-Generated Passkey Entry. At the conclusion of the
above attack, we have that A has won the CYBORG-UncUser
security experiment by breaking auth, since πA
t have
both accepted but there does not exist a paired UncUser-fresh
session oracle for either device, due to role disagreement.
s and πB
s and πB
In summary, all versions of Passkey Entry do not meet
any level of CYBORG security. Even though Passkey Entry
10
was originally developed to prevent ofﬂine dictionary attacks
by using 20 commitments (one commitment for each bit of
the passkey), it allows for breaks in auth. Note that the proof
in Theorem IV.1 can also be used as a counter-example for
User-Generated Passkey Entry insecurity.
V. MODIFIED PASSKEY ENTRY
In this section we present two modiﬁed Passkey Entry
protocol variants (see Figure 5). With these modiﬁcations,
Passkey Entry can achieve complete CYBORG security (see
analysis in Section VI). We demonstrate these modiﬁcations as
a proof-of-concept that CYBORG security is achievable with
interaction from both devices and full transcript validation.
Modiﬁcations were made with the goal of introducing
minimal change to the protocol, as well as restricting most
changes to Phase 2 in keeping with the requirements for
modular construction of Bluetooth protocols.
• Secure Hash Modiﬁcation (SHM): This modiﬁcation
requires the addition of a collision-resistant hash function,
H, with a 128-bit output length (in keeping with the
speciﬁed nonce length).
◦ Concatenate and hash all of a device’s previously gen-
erated nonces to form Na and Nb (steps 8c and 8d). Na
and Nb replace Na,20 and Nb,20 in all further Phases.
This ensures computation of the check values Ea and
Eb rely on all generated nonces. It also prevents the bit
guessing attack described in the proof of Theorem IV.1.
◦ Include device role in the computation of Na and Nb.
Each device declares their role and the assumed role
of their partner in the hash computation over Na, Nb
using the labels init and resp for the initiator and
responder respectively. This protects against the role
mix-up attack described in the proof of Theorem IV.2.
◦ Include both IOcap variables in the computation of
Ea and Eb. This ensures authentication of both IOcap
capabilities.
• Dual Passkey Entry (DPE): This modifcation requires
the initiator and responder to both possess a numerical
display and numerical input capabilities.
◦ Each device generates a passkey and shares this value
via the user. The initiator relays its passkey ra to the
responder through the user, followed similarly by the
responder with rb. This prevents display output and/or
input compromise.
Dual Passkey Entry’s reliance on device’s possessing both
numerical displays and keypad entry is more in line with the
requirements for Numeric Comparison, which requires both
devices to have both numerical displays and binary inputs.
Traditional Passkey Entry in comparison requires a display and
entry mechanism on respective, instead of both, devices (for
Initiator Generated and Responder Generated Passkey Entry),
or only requires entry mechanisms on both (for User Generated
Passkey Entry). This begs the question of whether simply
using Numeric Comparison would be a viable alternative vice
a new protocol. Although we do not devote a full analysis
to Numeric Comparison under the CYBORG model due to
space constraints, observation suggests that Numeric Compar-
ison would not achieve full CYBORG security. In particular,
Numeric Comparison requires identical and predictable binary
user inputs on both devices (to conﬁrm whether two displayed
values match [10]). Under CompUser[ui] and/or CompUser[ur]
freshness deﬁnitions the adversary could modify the user
conﬁrmation/denial message to allow a MitM attack to advance
regardless of matching in the actual values displayed.
The SHM falls very closely to techniques used in other
protocols and brings Passkey Entry more in line with accepted
techniques for protecting against downgrades. For example,
TLS 1.3 [38] computes the Finished message over ex-
changed ciphersuites, thereby ensuring that both parties agree
to exchanged capabilities. However, while this change adds
authenticity against transcript modiﬁcation during Phase 2 of
the protocol, it does not prevent a more direct downgrade;
namely, if the IOcap was changed to Just Works, the Passkey
Entry protocol would not be completed at all. In terms of
overhead, the SHM notably adds only one hash computation
per party. In comparison, Passkey Entry already requires 21
HMAC computations and 21 HMAC veriﬁcations per party.
In contrast, DPE demonstrates a straightforward analogue
to certiﬁcate usage. Passkey Entry is uni-directional in the
user receipt and relay of the passkey; one can think of it as
similar to a server-only certiﬁcate. DPE in comparison is bi-
directional, analogous to certiﬁcates on both sides. Some cases
of lightweight devices without suitable I/O capabilities exist
where DPE may not be possible. However, for such cases
where mutual authentication is unachievable, the results of
Section IV and shown in Table I provide particular guidance.
Namely, by demonstrating which compromise scenarios are
fatal to the protocol in Table I, manufacturers and end users
gain insight on the device that is most in need of protection
(i.e. dependent on the device that is generating a passkey) and
under what conditions.
VI. ANALYSIS OF MODIFIED PROTOCOL
The following analysis covers all
four versions of
Passkey Entry (Initiator-Generated, Responder-Generated,
User-Generated, and Dual) with the Secure Hash Modiﬁ-
cation (signiﬁed by the “SHM” preﬁx) under both security
environments deﬁned in the CYBORG model: UncUser and
CompUser. For CompUser, each version of the SHM Passkey
protocol is analyzed under each of our four baseline deﬁnitions
of compromised user scenarios (Deﬁnitions III.10 to III.11).
We operate under the deﬁnitions for session-state and the sidu
described in Section IV.
Initiator-Generated Passkey: We start with results for the
SHM Initiator-Generated Passkey Entry protocol as follows,
covering all variants under the CYBORG security model.
Theorem VI.1. SHM Initiator-Generated Passkey Entry is
• CYBORG-UncUser-secure under
the EC-sym-ssPRF-ODH and EC-DDH assumptions, the
sec-pre of H, and the SUF-CMA security of HMAC.
• CYBORG-CompUser[x]-secure for
[x] ∈ {[ru], [ui], [ru, ui]} .
11
Initiating
Device: A
Responding
Device: B
Dual Passkey Entry
Phase 2: Authentication Stage 1
6a. ra
$← {0, 1, 2, . . . , 9}6
6b. rb
$← {0, 1, 2, . . . , 9}6
8. ra
9. rb
Execute steps 11a - 18
twenty times in sequence
User
User
11b. Nb,i
7. ra
10. rb
11a. Na,i
$← {0, 1}128
12a. Ca,i ← HMAC(Na,i, P Kax(cid:107)P Kbx(cid:107)ra,i(cid:107)rb,i)
$← {0, 1}128
12b. Cb,i ← HMAC(Nb,i, P Kbx(cid:107)P Kax(cid:107)rb,i(cid:107)ra,i)
13. Ca,i
14. Cb,i
15. Na,i
16. v1 ← Vfy(Na,i, (P Kax(cid:107)P Kbx(cid:107)ra,i(cid:107)rb,i), Ca,i)
18. v2 ← Vfy(Nb,i, (P Kbx(cid:107)P Kax(cid:107)rb,i(cid:107)ra,i), Cb,i)
17. Nb,i
19a/b. Na ← H(Na,1(cid:107) . . .(cid:107)Na,20(cid:107)init), Nb ← H(Nb,1(cid:107) . . .(cid:107)Nb,20(cid:107)resp)
Secure Hash Modiﬁcation
20a. Ea ← HMAC(DHKey, Na(cid:107)Nb(cid:107)rb(cid:107)IOcapA(cid:107)IOcapB(cid:107)A(cid:107)B)
Phase 3: Authentication Stage 2
20b. Eb ← HMAC(DHKey, Nb(cid:107)Na(cid:107)ra(cid:107)IOcapB(cid:107)IOcapA(cid:107)B(cid:107)A)
22. v3 ← Vfy(DHKey, (Na(cid:107)Nb(cid:107)rb(cid:107)IOcapA(cid:107)IOcapB(cid:107)A(cid:107)B), Ea)
21. Ea
24. v4 ← Vfy(DHKey, (Nb(cid:107)Na(cid:107)ra(cid:107)IOcapB(cid:107)IOcapA(cid:107)B(cid:107)A), Eb)
23. Eb
Phase 4: Link Key Calculation
25a/b. LK ← HMAC(DHKey, Na(cid:107)Nb(cid:107)btlk(cid:107)A(cid:107)B)
Fig. 5. Dual Passkey Entry with Secure Hash Modiﬁcation. Dual Passkey
Entry (DPE) is depicted with the modiﬁcations in blue, where both devices
generate passkeys.The Secure Hash Modiﬁcation (SHM) is depicted green
and can be used in conjunction with DPE or any version of Passkey Entry.
Under this modiﬁcation all nonces are hashed into the new values Na, Nb
for subsequent use. Devices also declare assumed roles, using the strings init
and resp, and both IOcap variables are used in the computation of Ea, Eb.
• not CYBORG-CompUser[x]-secure for
[x] ∈{[iu], [ur], [iu, ru], [iu, ui], [iu, ur], [ru, ur], [ui, ur],
[iu, ru, ui], [iu, ru, ur], [iu, ui, ur], [ru, ui, ur],
[iu, ru, ui, ur]} .
The proofs for the above theorems can be found in Ap-
pendix C-A. We provide a proof sketch for the CYBORG-
UncUser setting here, which serves as the basis for other proof
variants in the positive results (for negative results, counter-
examples are shown in Appendix C-A).
to the original security
Proof Sketch: The proof of this theorem involves a series
of game hops between an adversarial PPT algorithm A and the
challenger. We denote the adversarial advantage of a speciﬁc
game as Advi, for the i-th game hop.
Game 0. This game is equivalent
experiment. Thus we have Adv0 = AdvCYBORG-UncUser
Game 1. In this game we abort if two session oracles ever
generate the same ephemeral DH key, SK, of length µ. Thus
we have Adv1 ≥ Adv0 − (ηpηs)2 · 2-µ.
Game 2. In this game we abort if we ever have nonce collision,
and there are 20 nonces generated each session. Thus we have
Adv2 ≥ Adv1 − 400 · (ηpηs)2 · 2-λ.
Game 3. In this game we abort if a passkey, r, is ever re-used.
PE-IG,A,ηp,ηs
(λ).
Thus we have Adv3 ≥ Adv2 − (ηpηs)2 · 2-|r|.