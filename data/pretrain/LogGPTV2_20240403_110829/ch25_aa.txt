### 可编写脚本的负载均衡器
**作者：Emil Stolarsky, DigitalOcean（前 Shopify 员工）**

当面临可扩展性问题时，重新构建或重构整个 Web 服务往往不是可行的选择。你负责的服务可能会因为超载而中断。有时候，你可能希望遇到的是一个简单的数据库查询错误，或者只需增加服务进程数量就能解决问题。然而，当你缺乏时间、资金或人力时，该怎么办呢？幸运的是，一种新的工具——可编写脚本的负载均衡器——正在改变我们处理可扩展性的方式，并使 SRE 的角色变得更加得心应手。

#### 什么是可编写脚本的负载均衡器？
可编写脚本的负载均衡器是一种可以通过脚本语言（如 Lua）修改其请求/响应处理流的代理。这为基础设施团队提供了分片应用程序、缓解分布式拒绝服务 (DDoS) 攻击和处理高负载的新方法。小团队现在可以使用这种新颖且优雅的方式来解决复杂的问题。虽然向负载平衡层添加高性能自定义逻辑并不新鲜，但在任何规模的组织中实现这一点却是前所未有的。这就是为什么可编写脚本的负载均衡器具有颠覆性的原因。

#### 负载均衡器的作用
几乎所有的 Web 服务都依赖于负载均衡器作为前端代理。这些服务器接收请求（通常是 HTTP 或其他协议），并将它们转发到指定的上游服务器池。它们在提高弹性和性能方面发挥着重要作用。目前，负载均衡器通常用于 SSL 卸载、简单缓存以及跨多个上游分布负载。

对于典型的 Web 应用程序架构，用户请求在路由到应用程序服务器之前会先经过负载均衡器。尽管负载均衡器是强大的专用组件，但任何试图添加复杂应用程序逻辑的尝试都会受到其限制性配置语言的阻碍。虽然存在一些应用感知负载均衡器（如 Facebook 的 Proxygen），但它们需要定制开发。行业巨头（如 Facebook 和 Google）已经自行开发了这些解决方案，但对于没有专业开发团队的公司来说，这仍然是一个挑战。

#### 可编写脚本的负载均衡器的优势
一些公司已经开始意识到，传统负载均衡器与需要定制开发的应用感知负载均衡器之间并不是非此即彼的关系。这个中间地带可以由可编写脚本的负载均衡器填补。通过编写脚本语言（如 Lua），您可以修改请求/响应处理流，例如通过修改传出标头。您可以在现有功能之上添加应用程序感知功能，而无需从头开始构建。

目前有两个主要的可编写脚本的负载均衡器项目：OpenResty 和 nginScript。OpenResty 是一个带有嵌入式 LuaJIT 的 Nginx C 模块，由 Yichun "agentzh" Zhang 创建。它拥有一个稳定的社区网络，并已被 Cloudflare、Tumblr 和 Shopify 等公司采用。nginScript 是 Nginx Inc. 在 Nginx 中实现的 JavaScript 脚本引擎。

#### 为什么选择可编写脚本的负载均衡器？
与定制和传统负载均衡器相比，可编写脚本的负载均衡器具有许多优势：

1. **节省时间和资源**：只有少数组织能够投入必要的时间和人员来构建自己的生产就绪负载均衡器。工程师应该将时间花在提高应用弹性和性能上，而不是重新发明轮子。
2. **灵活性**：即使进行了大量定制开发，添加的自定义逻辑也只占负载均衡器整体功能的一小部分。传统的负载均衡器附带声明性配置语言，难以实现应用程序相关的逻辑。相比之下，脚本语言（如 Lua）可以通过严格的运行时和内存保证进行沙盒处理，避免了 C 语言中的内存安全问题。
3. **简化复杂任务**：负载均衡器位于服务的最前端，每个请求都通过它们。它们的位置支持强大的抽象，使得 SRE 或基础设施开发人员能够实现复杂的方案，例如在部署期间暂停请求以避免返回错误给客户，或将请求代理到正确的数据中心。

#### 解决常见的基础设施问题
##### 分片感知路由
随着应用程序的增长，数据变得太大而无法存储在单个节点上。解决方案是将数据分解为可管理的块（称为分片），并将其分布在多个节点或数据库中。分片后，不能保证每个进程都能访问所有分片。因此，需要确保请求被路由到可以访问所需数据的进程。

###### 使用 DNS 路由请求
对于可以按域名分片的数据模型（如多租户应用程序），可以使用 DNS 将请求路由到正确的分片。每个分片对应唯一的域名，该域名解析为可以为分片提供请求的进程。

1. 客户端请求分片上的域的 DNS 地址。
2. 客户端将请求定向到 DNS 服务器返回的 IP 地址。
3. 客户端请求在单独的分片上使用域的 DNS 地址。
4. 客户端向相应的数据中心发送请求。

这种方法的优点在于其简单性，但 DNS 的收敛时间不可预测，且只能通过域名区分分片。

###### 在应用程序中路由查询
如果每个进程都可以访问所有分片，则可以避免确保将请求路由到正确进程的问题。但这会增加大量的复杂性，并损害应用程序的可伸缩性。当应用程序超过单个数据中心时，跨数据中心连接所需的延迟会使连接到每个分片变得昂贵。此外，每个数据库和应用程序进程必须管理的连接数也会导致问题（如达到最大连接限制）。

通过使用可编写脚本的负载均衡器，可以更灵活地解决这些问题，从而提高系统的整体性能和可靠性。