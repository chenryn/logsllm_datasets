𝑆 ←$ {0, 1}𝜆
(CT∗, MS∗) ← EIA2-TLS-KEM(𝑝𝑘𝑆 , ˜𝑘, 𝜇∗
𝐾0 = MS∗; 𝐾1 ←$ {0, 1}𝜆′; 𝛽 ←$ {0, 1}
𝛽′ ← AEncap(𝑝𝑘𝑆 , ˜𝑘,𝜇∗
return (𝛽′ = 𝛽)
Encap(𝑝𝑘𝑆, ˜𝑘, 𝜇∗
(CT, MS) ← EIA2-TLS-KEM(𝑝𝑘𝑆 , ˜𝑘, 𝜇𝐶 ||𝜇∗
𝑆)
return (CT, MS)
Decap(𝑠𝑘𝑆, CT, 𝜇𝐶||𝜇𝑆)
MS ← DIA2-TLS-KEM(𝑠𝑘𝑆 , 𝜇𝐶 ||𝜇𝑆)
return MS
𝑆, 𝜇𝐶)
ow−pca
A,KEM(𝑛) = Pr[OW-PCAA,KEM(𝑛) = 1].
Adv
The KEM scheme is OW-PCA secure if there exists a negligible
function 𝜖(𝑛) such that Adv
ow−pca
A,KEM(𝑛) ≤ 𝜖(𝑛).
We are ready to analyze the security of IA2-TLS-KEM. Note that
it is essential to assume that the hash function H and KDF are
random oracles [2]: By choosing a static (not freshly random) value
for 𝜇𝐶, the adversary may be able to get some information about
PMS. However, this is alleviated by assuming the uniformity of
𝜇𝑆 and the output of the random oracle H. Also, KDF should be
a random oracle to hide all the information about PMS. We now
prove the following theorem.
We define A’s advantage as
Adv
ind−cca
A,IA2-TLS-KEM(𝑛) = Pr[CCAA,IA2-TLS-KEM(𝑛) = 1].
negligible function 𝜖(𝑛) such that Adv
The IA2-TLS-KEM scheme is IND-CCA secure if there exists a
ind−cca
A,IA2-TLS-KEM(𝑛) ≤ 𝜖(𝑛).
Note that the adversary presented in the above definition is very
powerful in the sense that we allow it to adaptively launch chosen
ciphertext attack as well as chosen plaintext attack by choosing
its own 𝜇𝐶. Differently from the usual KEM, the adversary in our
notion has to have access to encapsulation oracle, as we assume (in
the threat model) that it does not know the inspection key ˜𝑘 and
hence cannot compute CT alone.
We need the following definition of the OW-PCA (One-way
against Plaintext Checking Attack) [17] for the randomized KEM
to analyze the security of our IA2-TLS-KEM:
Definition 4.2 (OW-PCA for KEM). Let A be an adversary. Con-
sider the following game:
OW-PCAA,KEM(𝑛)
(𝑠𝑘𝑆 , 𝑝𝑘𝑆) ←$ GKEM(1𝑛)
(CT∗, PMS∗) ←$ EKEM(𝑝𝑘; 𝑟)
PMS′ ← APCA(𝑠𝑘𝑆 ,·,·) (𝑝𝑘, CT∗)
return (PMS∗ = PMS′)
We define A’s advantage as follows:
else
return 1
return 0
PCA(𝑠𝑘𝑆, CT, PMS)
if PMS = DKEM(𝑠𝑘𝑆 , CT) then
Session 3: Network Security ASIA CCS '20, October 5–9, 2020, Taipei, Taiwan120Theorem 4.3. The IA2-TLS-KEM scheme is IND-CCA secure if the
underlying randomized KEM scheme is OW-PCA secure, and H and
KDF are random oracles.
Proof. The proof proceeds with the sequence of games. We
denote the event that the IND-CCA adversary A for IA2-TLS-KEM.
succeeds in each game by 𝑆𝑖 for 𝑖 = 0, 1, . . . .
Game 0. This is the real attack game. For the sake of presenting
notations that will be used throughout the proof, we describe the
generation of the challenge ciphertext and pre-master secret of the
IA2-TLS-KEM scheme as follows.
EIA2-TLS-KEM(𝑝𝑘𝑆, ˜𝑘∗, 𝜇∗
𝐶||𝜇∗
𝑆)
𝐶 ||𝜇∗
𝑆)
1 :
2 :
3 :
Note that the master secret is computed as follows: MS∗ ←
𝑆). As this is the same as the real attack, we have
KDF(PMS∗, 𝜇∗
Pr[𝑆0] = Adv
Game 1. We modify the operation of the random oracle H so that
if A queries ˜𝑘∗ is queried to H, we abort the execution of game. Let
𝐸 be an event that 𝑠 is queried to H, respectively. We then have
𝑟∗ ← H( ˜𝑘∗, 𝜇∗
(CT∗, PMS∗) ← EKEM(𝑝𝑘𝑆; 𝑟∗)
return (CT∗, PMS∗)
𝐶||𝜇∗
ind−cca
A,-KEM(𝑛).
| Pr[𝑆1] − Pr[𝑆0]| ≤ Pr[𝐸]
(1)
Game 2. In this game, we modify the previous game so that KDF,
which is assumed to be a random oracle, answers queries by main-
taining a query-answer list LKDF as follows.
When A makes a query (PMS, 𝜇𝐶||𝜇𝑆) to the random oracle
KDF, do the following.
• If [(PMS, 𝜇𝐶||𝜇𝑆), MS] exists in LKDF, return MS.
• Otherwise:
– if [(CT, 𝜇𝐶||𝜇𝑆, PMS), MS] exists in LDecap, return MS and
save [(PMS, 𝜇𝐶||𝜇𝑆), MS] in LKDF.
– Otherwise, pick a uniform MS ∈ {0, 1}𝜇 and return MS,
and save [(PMS, 𝜇𝐶||𝜇𝑆), MS] in LKDF.
Note that the above modification does not change the view of A
from the previous game as the modification is simply a conceptual
change that makes use of the list LKDF. Hence, we get
Pr[𝑆2] = Pr[𝑆1].
(2)
Game 3. In this game, we modify the previous game so that the
decapsulation oracle Decap responds to decapsulation queries using
a query-answer list LDecap and LKDF (defined in the previous game)
as follows.
When A makes a query (CT, 𝜇𝐶||𝜇𝑆) to the decapsulation oracle,
• If [(PMS, 𝜇𝐶||𝜇𝑆), MS] exists in LDecap, return MS.
• Otherwise:
– if [(CT, 𝜇𝐶||𝜇𝑆, PMS), MS] exists in LDecap, return MS.
– Otherwise, for each entry in [(PMS, 𝜇𝐶||𝜇𝑆), MS] in LKDF,
check if
do the following.
PMS = DKEM(𝑠𝑘𝑆, CT).
(3)
If the equality holds, return MS. Otherwise, pick a uniform
MS ∈ {0, 1}𝜇 and return MS, and save [(CT, 𝜇𝐶||𝜇𝑆, PMS),
MS] in LDecap.
Note that the changes made in this game are for checking the
consistency of MS’s returned by the random oracle KDF and the
decapsulation oracle. Due to uniform randomness of the output of
KDF, this modification does not change the view of A from the
previous game. Hence, we get
Pr[𝑆3] = Pr[𝑆2].
(4)
Game 4. When A queries 𝜇𝐶 to the Encap oracle, we pick a uniform
𝑟 from the randomness space of KEM and a uniform 𝜇𝑆 ∈ {0, 1}𝜆 to
compute (CT, PMS) ← EKEM(𝑝𝑘𝑆; 𝑟) and MS ← KDF(PMS, 𝜇𝐶||𝜇𝑆),
and return (CT, MS) to A. Note that because of uniform random-
ness of the output of random oracle H, (CT, MS) created in this
game is distributed identical to the one in the previous game. Thus,
we have
Pr[𝑆4] = Pr[𝑆3].
(5)
Game 5. In this game, we do not compute 𝑟∗ ← H( ˜𝑘∗, 𝜇∗
𝐶||𝜇∗
𝑆)
but pick 𝑟∗ uniformly at random and compute (CT∗, PMS∗) ←
EKEM(𝑝𝑘𝑆; 𝑟∗) and MS∗ ← KDF(PMS∗, 𝜇∗
where 𝐾𝛽 is either MS∗ or the uniform random string of the same
length depending on 𝛽 ∈ {0, 1}. As A does not have access to ˜𝑘∗
nor have control over 𝜇∗
𝑆, which is chosen uniformly at random
by this game, A cannot distinguish (CT∗, PMS∗) from that in the
previous game. Thus, we have
𝑆), and return (CT∗, 𝐾𝛽),
𝐶||𝜇∗
Pr[𝑆5] = Pr[𝑆4]
(6)
Now, we construct an OW-PCA adversary B for KEM. B plays
the role of challenger of this game which interacts with A. In par-
ticular, B gives A the public key of KEM if B receives an encapsula-
tion query and a decapsulation quuery from A, B responds to it in
the same way this game does (as described in Games 2 and 3). Only
one difference is that when the checking PMS = DKEM(𝑠𝑘𝑆, CT)
(3) is done, B does not use 𝑠𝑘𝑆 but queries (CT, PMS) to its PCA
oracle to get the answer. Upon receiving a challenge encapsulation
request from A, B simply returns the challenge ciphertext and key
(CT∗, 𝐾𝛽) it received from its challenger. When A outputs 𝛽′, B
simply returns the PMS′ which satisfies PCA(𝑠𝑘𝑆, CT, PMS′) = 1.
Hence, we get
ow-pca
B,KEM(𝑛).
Pr[𝑆5] = Adv
(7)
Note that as H is a random oracle, Pr[𝐸] ≤ 𝑞H2ℓ , where 𝑞H denotes
the number of queries to H. Therefore, by combining (1), (2),(4), (5),
(6) and (7), we obtain
ind-cca
A,IA2-TLS-KEM(𝑛) ≤ Adv
ow-pca
B,KEM(𝑛) + 𝑞H
2ℓ
.
(8)
Adv
□
It is well known that the Diffie-Hellman is OW-PCA secure if
the The Strong Diffie-Hellman (SDH) problem [1] is hard. (The
SDH problem is a computational problem, where an adversary A,
given (𝑔, 𝑔𝑎, 𝑔𝑏) for the group G and access to a SDH verification
oracle (𝑔, 𝑔𝑏, ·, ·), is to compute 𝑔𝑎𝑏.) Then we obtain the following
corollary from Theorem 4.3.
Corollary 4.4. The IA2-TLS-KEM scheme based on the Diffie-
Hellman KEM is IND-CCA secure if the SDH problem is hard, and H
and KDF are random oracles.
Session 3: Network Security ASIA CCS '20, October 5–9, 2020, Taipei, Taiwan121Figure 5: The Network and System Architecture
Despite of Bleichenbacher’s attack, the heuristically-fixed ver-
sion of RSA PKCS #1v1.5 encryption, which addressed the attack
has been used in TLS. It is conjectured to be OW-CPA secure. Based
on this assumption and Theorem 4.3, we get the following corollary.
Corollary 4.5. The IA2-TLS-KEM scheme based on the RSA KEM
is IND-CCA secure if the RSA problem is hard, and H and KDF are
random oracles.
Extension to DHE-KEM. In the ephemeral DH-KEM (DHE-KEM),
which is mandated in TLS v1.3 [20], the (certified) server’s pub-
lic key is equivalent to the ephemeral DH value signed by the
server itself. Then by substituting CERT𝑆 = {ID𝑆, 𝑔𝑥}CA with
{{ID𝑆, 𝑝𝑘𝑆𝑖𝑔𝑆}CA, {𝑔𝑡}𝑆}, where {ID𝑆, 𝑝𝑘𝑆𝑖𝑔𝑆}CA is a certificate
for the server’s signature verification key 𝑝𝑘𝑆𝑖𝑔𝑆, issued by CA,
and {𝑔𝑡}𝑆 is a signature on the ephemeral DH value 𝑔𝑡, the proof of
Theorem 4.3 can be extended. In this case, the PCA oracle that the
attacker has access to becomes the DDH verification oracle (𝑔, ·, ·, ·)
which does not fix a DH value. Note that this problem is referred
to as GDH (Gap-DH) problem [17].
5 IMPLEMENTATION
5.1 System Overview
Our IA2-TLS system consists of three components, “IA2-TLS Client”,
“IA2-TLS Inspector” and ”TLS Server” as illustrated in Figure 5.
• IA2-TLS Client should be realized using a customized browser.
We implemented IA2-TLS Client on the Google Chromium
browser (Version 76.0.3782.0, Developer Build, 64-bit) [26],
which is the base of the popular Chrome browser. For SS-
L/TLS communication, the Chromium browser uses Bor-
ingSSL [24], a third party cryptographic library. BoringSSL
is an abstract version of OpenSSL [25]. Although it shares
many codes and properties with OpenSSL, it supports only
limited cryptographic algorithms and functions for SSL/TLS
communication. The library offers only 18 cipher suites, in-