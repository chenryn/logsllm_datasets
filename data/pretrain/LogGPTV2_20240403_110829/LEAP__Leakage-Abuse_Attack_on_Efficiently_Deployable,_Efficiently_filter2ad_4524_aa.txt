title:LEAP: Leakage-Abuse Attack on Efficiently Deployable, Efficiently
Searchable Encryption with Partially Known Dataset
author:Jianting Ning and
Xinyi Huang and
Geong Sen Poh and
Jiaming Yuan and
Yingjiu Li and
Jian Weng and
Robert H. Deng
LEAP: Leakage-Abuse Attack on Efficiently Deployable,
Efficiently Searchable Encryption with Partially Known Dataset
Jianting Ning∗
Fujian Normal University &
Singapore Management University
Fuzhou, China
PI:EMAIL
Jiaming Yuan
University of Oregon
Oregon, United States
PI:EMAIL
Geong Sen Poh
S-Lab for Advanced Intelligence,
Nanyang Technological University
Singapore
PI:EMAIL
Jian Weng
Jinan University
Guangzhou, China
PI:EMAIL
Xinyi Huang†
Fujian Normal University
Fuzhou, China
PI:EMAIL
Yingjiu Li
University of Oregon
Oregon, United States
PI:EMAIL
Robert H. Deng
Singapore Management University
Singapore
PI:EMAIL
ABSTRACT
Searchable Encryption (SE) enables private queries on encrypted doc-
uments. Most existing SE schemes focus on constructing industrial-
ready, practical solutions at the expense of information leakages
that are considered acceptable. In particular, ShadowCrypt utilizes
a cryptographic approach named “efficiently deployable, efficiently
searchable encryption” (EDESE) that reveals the encrypted dataset
and the query tokens among other information. However, recent
attacks showed that such leakages can be exploited to (partially)
recover the underlying keywords of query tokens under certain
assumptions on the attacker’s background knowledge.
We continue this line of work by presenting LEAP, a new leakage-
abuse attack on EDESE schemes that can accurately recover the
underlying keywords of query tokens based on partially known
documents and the L2 leakage as per defined by Cash et al. (CCS
’15). As an auxiliary function, our attack supports document re-
covery in the similar setting. To the best of our knowledge, this is
the first attack on EDESE schemes that achieves keyword recovery
and document recovery without error based on partially known
documents and L2 leakage. We conduct extensive experiments to
demonstrate the effectiveness of our attack by varying levels of
attacker’s background knowledge.
∗The first author is also with the State Key Laboratory of Information Security (Institute
of Information Engineering, Chinese Academy of Sciences, Beijing 100093).
†Corresponding author.
Permission to make digital or hard copies of all or part of this work for personal or
classroom use is granted without fee provided that copies are not made or distributed
for profit or commercial advantage and that copies bear this notice and the full citation
on the first page. Copyrights for components of this work owned by others than ACM
must be honored. Abstracting with credit is permitted. To copy otherwise, or republish,
to post on servers or to redistribute to lists, requires prior specific permission and/or a
fee. Request permissions from permissions@acm.org.
CCS ’21, November 15–19, 2021, Virtual Event, Republic of Korea.
© 2021 Association for Computing Machinery.
ACM ISBN 978-1-4503-8454-4/21/11...$15.00
https://doi.org/10.1145/3460120.3484540.
CCS CONCEPTS
• Security and privacy → Management and querying of en-
crypted data; Cryptanalysis and other attacks.
KEYWORDS
Searchable encryption; leakage; attack
ACM Reference Format:
Jianting Ning, Xinyi Huang, Geong Sen Poh, Jiaming Yuan, Yingjiu Li,
Jian Weng, and Robert H. Deng. 2021. LEAP: Leakage-Abuse Attack on
Efficiently Deployable, Efficiently Searchable Encryption with Partially
Known Dataset. In Proceedings of the 2021 ACM SIGSAC Conference on
Computer and Communications Security (CCS ’21), November 15–19, 2021,
Virtual Event, Republic of Korea. ACM, New York, NY, USA, 14 pages. https:
//doi.org/10.1145/3460120.3484540.
1 INTRODUCTION
Encrypted cloud storage systems have been developed to alleviate
the privacy concerns of organisations that outsource their sensitive
data to a third-party storage provider. Searchable encryption (SE)
is one of the key solutions that attempt to preserve retrievability of
encrypted data, without revealing the queried information to the
storage provider. Since the seminal work by Song et al. [40], many
practical SE schemes have been proposed [4, 6, 7, 9, 12, 25, 33, 41].
In order to provide efficient query on encrypted data stored on
a remote cloud server, these practical SE schemes allow certain
leakages of information that are deemed acceptable by users. Cash
et al. [5] characterized the leakage profiles of SE schemes in the lit-
erature and in-the-wild SE products by defining a series of leakage
levels L1-L4. L1 leakage, consisting of the query-revealed occurrence
pattern, has the least amount of leakage. L2 leakage stands for the
leakage of fully-revealed occurrence pattern, which leaks more infor-
mation than L1 but less than L3 and L4. Due to the high efficiency
of SE schemes with L2 leakage, they have been incorporated in
a number of operational prototypes and products. ShadowCrypt
[20] supports end-to-end encryption and SE with L2 leakage for
Session 7D: Privacy for Distributed Data and Federated Learning CCS ’21, November 15–19, 2021, Virtual Event, Republic of Korea 2307web applications, such as Twitter, Facebook and Gmail. Specifically,
ShadowCrypt interposes itself between a human user and the user
interface of a web application. To keep the user’s ability to effi-
ciently search the stored documents, ShadowCrypt employs a type
of SE with L2 leakage called efficiently deployable, efficiently search-
able encryption (EDESE). In a typical implementation of an EDESE
scheme, as used in ShadowCrypt, a list of encrypted keywords (here
after referred to as query tokens) is attached to an encrypted docu-
ment. Each query token q is calculated as a pseudorandom function
F of a keyword w (keyed with a secret key k). To search for a key-
word w, ShadowCrypt intercepts the search request and replaces
the keyword w with the corresponding query token q = Fk (w ).
EDESE schemes have several compelling advantages, including
lower startup costs as compared to other types of SE and allow en-
cryption of communications to be performed immediately without
changing providers or losing familiar application user interfaces.
On the other hand, EDESE schemes suffer from L2 leakage which
could be exploited by an attacker. As the encrypted documents and
the corresponding query tokens are stored on the server side, an
adversarial server could obtain the relationship between each query
token and each encrypted document. Particularly, whether a query
token is contained in an encrypted document is leaked to the server.
During the rest of the paper, we will use EDESE and SE with L2
leakage interchangeably unless otherwise stated.
It has been shown in recent years that the leakages of SE schemes
can be exploited to recover the underlying keywords of query to-
kens, given full or partial background knowledge about the docu-
ments or the keywords contained in the documents. Islam et al. [21]
initiated the investigation through empirical analysis on the secu-
rity of SE and demonstrated that the underlying keywords of queries
can be recovered if given (almost) all the documents. Following
from this, Cash et al. [5] (CGPR) proposed an improved attack that
successfully recovers query keywords using less prior knowledge
about the (plaintext) documents of the user and L1 leakage. Pouliot
and Wright [39] later proposed new inference attacks on EDESE
schemes utilizing L2 leakage, one is based on the Umeyama’s algo-
rithm [42] (PW-U), and the other is based on the PATH algorithm
[43] (PW-P). Independent from the above passive attacks, Cash et
al. [5] also introduced a new type of attack in which an attacker
can induce a user to insert chosen documents, which is essentially
an active attack. A new active attack called file-injection attack was
later proposed by Zhang et al. [44], which injects deliberately cho-
sen documents into the document set of the user. Compared with
active attacks, passive attacks require weaker assumption since the
attacker only needs to observe the leakages of a SE scheme and
hence is easier to launch. This paper focuses on passive attacks.
For passive attacks, a practical assumption could be that it is
unlikely an attacker can obtain all the documents of a target user. On
the other hand, it seems too restrictive to assume that the attacker
knows no plaintext document of the user at all. For instance, a
storage provider can easily learn the nature of a user’s business.
The provider may then construct the common keywords and gather
common documents reflecting the business domain (e.g., finance,
healthcare). It is also over optimistic from a security standpoint to
assume the attacker has no way to learn partial information. Thus,
a more realistic assumption is to assume that the attacker could
obtain a partial set of the documents for a target user. As noted in
[5], “assuming knowledge of no documents is a step too far”, and
an attacker may know that one or more widely-circulated emails
are stored in a user’s repository.
To date, there are only a few works that focus on such practical
scenario where the attacker has only partial knowledge of a tar-
get user’s document set. However, the attack results reported in
these works may contain false positives due to the lack of knowl-
edge of the missing documents. In particular, the PW-U attack
and the PW-P attack (on EDESE schemes) proposed by Pouliot
and Wright [39] are two types of attacks that work with partial
knowledge of a dataset. Both attacks result in false positives. As
the experimental results shown in Section 5, when given 10% of
documents of the dataset with 4,991 keyword universe, the PW-U
attack returns 4,991 (query token, keyword) mappings but only
38 keywords are correctly mapped, and the PW-P attack returns
4,991 (query token, keyword) mappings but only 1,638 mappings
are correct. The main idea of the PW-U attack and the PW-P attack
is to reduce the problem of finding (query token, keyword) map-
ping to well-known combinatorial optimization problems based on
graph matching. However, due to the nature of the combinatorial
optimization problems based on graph matching, the recovered
(query token, keyword) mappings may contain false positives when
the attacker’s knowledge about a target user’s document set is not
complete.
The CGPR attack proposed by Cash et al. [5] is another type of
attack in such partial knowledge setting, which also results in false
positives. The difficulty of accurately recovering the underlying
keywords of query tokens lies in the information loss induced by
missing documents. Due to the missing documents, the attacker
cannot simply recover a query token q by finding a keyword w
with a unique count(w ) such that count(q) = count(w ), where
count(w ) denotes the number of known documents containing w
and count(q) denotes the number of encrypted documents contain-
ing q. This is because the document set corresponding to count(w )
is a subset of the full document set; consequently, count(w ) may
be less than the number of documents from the full document set
containing w. As a result, the attack under the partial knowledge
setting in [5] utilizes a guessing strategy to prepare a candidate
keyword set for a query token, which serves as the basis for later
pruning. This is the reason why the attack usually outputs (query
token, keyword) mappings with (high) false positives.
Intuitively, the criterion to measure the effectiveness of an infer-
ence attack on SE scheme is how many (query token, keyword) map-
pings can be accurately recovered, rather than how many (query
token, keyword) mappings are output by the attack (which may
contain false positives). The following question arises naturally:
Can a passive adversarial server reveal query tokens (i. e., discov-
ering the underlying keywords of query tokens) accurately with only
partial knowledge of the user’s document set?
1.1 Our Contributions
In this paper, we attempt to address the above problem by present-
ing a new leakage-abuse attack on EDESE schemes, named LEAP
(Leakage-abuse attack on efficiently deployable, efficiently search-
able encryption with partially known dataset). Different from the
guessing strategy in [5] and the graph matching approach in [39],
Session 7D: Privacy for Distributed Data and Federated Learning CCS ’21, November 15–19, 2021, Virtual Event, Republic of Korea 2308we introduce a new approach which reveals query tokens accurately
with only partial knowledge of the dataset.
In a nutshell, we first accurately recover certain (encrypted doc-
ument, document) mappings. This step relies on two methods (see
Method 1 and Method 2 described in Section 4.2) and the obser-
vation that the m′× n′ document-keyword matrix A′ (derived from
known documents) can be extended to a new m × n′ document-
keyword matrix A′′, where n′ is the number of leaked documents,
m′ is the number of keywords contained in the leaked documents
and m is the number of keywords in the keyword universe. With the
recovered (encrypted document, document) mappings, we can then
recover certain (query token, keyword) mappings without error
based on Method 3 described in Section 4.2. Next, we use a recur-
sive mechanism to recover more (query token, keyword) mappings.
In particular, the recovered (query token, keyword) mappings are
used to discover new (encrypted document, document) mappings
which in turn are used to discover new (query token, keyword) map-
pings. This recursive discovery process is made possible based on a
novel matrix row/column mapping technique we develop, which
utilizes the leakage of EDESE schemes and the partial knowledge
of a user’s document set.
LEAP achieves zero false positives in breaking query token pri-
vacy in the sense that all (query token, keyword) mappings output
by LEAP are correct. As an auxiliary function, it breaks document
privacy without false positives, i.e., all (encrypted document, docu-
ment) mappings output by LEAP are correct. As far as we know,
this is the first attack utilizing only partial knowledge of the docu-
ment set and the L2 leakage of EDESE schemes, yet is capable of
recovering the user’s query tokens and the encrypted documents
accurately (i.e., without false positives).
We conduct extensive experiments to demonstrate the effective-
ness of LEAP as compared to the PW-U attack and the PW-P attack.
Given access to 10% of the dataset, LEAP accurately recovers 4,904
(query token, keyword) mappings out of 4,991 keywords, as com-
pared to 1,638 in the PW-P attack and 38 in the PW-U attack. In
the case where only 0.1% of the dataset is leaked, LEAP accurately
recovers 132 (query token, keyword) mappings out of 1,144 key-
words, as compared to 2 in the PW-P attack and 5 in the PW-U
attack. The experimental results confirm that LEAP is devastating
for the privacy of query tokens. LEAP reveals new risks of using
EDESE schemes given a prior knowledge of the dataset. LEAP also
highlights the importance of minimizing the leakage of a data stor-
age or processing server.
2 PRELIMINARIES
2.1 Notation
Throughout this paper, we use d, w, ed, and q to denote a document,
a keyword, an encrypted document, and a query token, respectively.
We use di to denote a particular documenti, and use wi, edi, and
qi similarly. Note that d (resp. w) is indexed independently from ed
(resp. q). In other words, edi may not be the encryption of di, and
qi may not be the query token corresponding to wi, even though
they share the same subscript. In addition, we use (ed,d ) to denote
a mapping between an encrypted document and the corresponding
plaintext document, and use (q,w ) to denote a mapping between a
query token and the corresponding keyword.
We define [n] = {1,2, ...,n} for n ∈ N. For two vectors V A and
V B of the same dimension, we define V A = V B iff V A[i] = V B[i]
for all i. For an m × n matrix T where the (i, j)-th entry Ti,j is either
1 or 0, let columnj be the j-th column of T for j ∈ [n], and rowi be
the i-th row of T for i ∈ [m]. For columnj, let T1,jT2,j ...Tm,j be its
bit-string; similarly, for rowi, let Ti,1Ti,2...Ti,n be its bit-string. We
say columnj is unique if the bit-string of columnj is unique among
{bit-string of columnj′}j′∈[n]; similarly, we say rowi is unique if
the bit-string of rowi is unique among {bit-string of rowi′}i′∈[m].
Let columnj -sum be the Hamming weight of the j-th column, i.e.,
columnj -sum equals T1,j + T2,j + ... + Tm,j; similarly, let rowi -sum
be the Hamming weight of the i-th row. We take the following 5× 6
matrix as an example:
(cid:42)(cid:46)(cid:46)(cid:46)(cid:46)(cid:46)(cid:46)(cid:44)
1
0
1
0
0
1
1
2
3
4
5
2