```  
digoal=# \set VERBOSITY verbose  
digoal=# select * from f_test();  
ERROR:  XX000: cache lookup failed for type 0  
CONTEXT:  SQL statement "SELECT 1 from foreign_table_test limit 1"  
PL/pgSQL function "f_test" line 3 at PERFORM  
LOCATION:  getTypeOutputInfo, lsyscache.c:2440  
```  
VERBOSITY可以设置三个选项,  default, verbose, terse.  
在pgsql_fdw模块中, 调用getTypeOutputInfo函数的地方,   
pgsql_fdw.c :   
```  
getTypeOutputInfo(types[i], &out_func_oid, &isvarlena);  
```  
修改为 :   
```  
				if ( types[i] != 0 )  
                                {  
                                  getTypeOutputInfo(types[i], &out_func_oid, &isvarlena);  
                                }  
```  
以及 ruleutils.c :   
```  
        getTypeOutputInfo(constval->consttype,  
                                          &typoutput, &typIsVarlena);  
```  
修改为 :   
```  
        if ( constval->consttype != 0 )  
        {  
        getTypeOutputInfo(constval->consttype,  
                                          &typoutput, &typIsVarlena);  
        }  
```  
重新编译pgsql_fdw模块, 重启数据库.  
重新执行函数 : 报错变为 :   
```  
postgres=# select * from f_test();  
ERROR:  XX000: cache lookup failed for function 0  
CONTEXT:  SQL statement "SELECT 1 from test limit 1"  
PL/pgSQL function "f_test" line 3 at PERFORM  
LOCATION:  fmgr_info_cxt_security, fmgr.c:216  
```  
在pgsql_fdw 模块中调用fmgr_info_cxt_security函数的没有, 但是调用了fmgr_info, 简介调用到了fmgr_info_cxt_security.  
fmgr.c :   
```  
/*  
 * This routine fills a FmgrInfo struct, given the OID  
 * of the function to be called.  
 *  
 * The caller's CurrentMemoryContext is used as the fn_mcxt of the info  
 * struct; this means that any subsidiary data attached to the info struct  
 * (either by fmgr_info itself, or later on by a function call handler)  
 * will be allocated in that context.  The caller must ensure that this  
 * context is at least as long-lived as the info struct itself.  This is  
 * not a problem in typical cases where the info struct is on the stack or  
 * in freshly-palloc'd space.  However, if one intends to store an info  
 * struct in a long-lived table, it's better to use fmgr_info_cxt.  
 */  
void  
fmgr_info(Oid functionId, FmgrInfo *finfo)  
{  
        fmgr_info_cxt(functionId, finfo, CurrentMemoryContext);  
}  
/*  
 * Fill a FmgrInfo struct, specifying a memory context in which its  
 * subsidiary data should go.  
 */  
void  
fmgr_info_cxt(Oid functionId, FmgrInfo *finfo, MemoryContext mcxt)  
{  
        fmgr_info_cxt_security(functionId, finfo, mcxt, false);  
}  
```  
pgsql_fdw.c :   
```  
fmgr_info(out_func_oid, &func);  
```  
## 【补充】  
1\. 创建一个pgsql_fdw外部表的视图, 把上面的函数中的外部表改为视图, 错误依旧.  
```  
postgres=# create view v_test as select * from test;  
CREATE VIEW  
postgres=# select * from v_test;  
 id |  info    
----+--------  
  1 | DIGOAL  
(1 row)  
postgres=# CREATE OR REPLACE FUNCTION public.f_test()  
 RETURNS integer  
 LANGUAGE plpgsql  
AS $function$  
declare  
begin  
perform 1 from v_test limit 1;  
return 1;  
end;  
$function$;  
CREATE FUNCTION  
postgres=# select * from f_test();  
ERROR:  cache lookup failed for type 0  
CONTEXT:  SQL statement "SELECT 1 from v_test limit 1"  
        PL/pgSQL function "f_test" line 4 at PERFORM  
STATEMENT:  select * from f_test();  
```  
2\. 在SQL函数中使用pgsql_fdw的外部表正常.  
```  
postgres=# create or replace function f_test1() returns int as $$  
postgres$# select id from test limit 1;  
postgres$# $$ language sql;  
CREATE FUNCTION  
postgres=# select * from f_test1();  
 f_test1   
---------  
       1  
(1 row)  
```  
3\. 在plpgsql函数中使用oracle fdw的外部表没有异常.  
```  
charge_sync=> create or replace function f_test () returns int as $$  
charge_sync$> declare  
charge_sync$> begin  
charge_sync$> perform 1 from ora_tbl limit 1;  
charge_sync$> return 0;  
charge_sync$> end;  
charge_sync$> $$ language plpgsql;  
CREATE FUNCTION  
charge_sync=> select * from f_test();  
 f_test   
--------  
      0  
(1 row)  
```  
## 【参考】  
pgsql_fdw.c  
src/backend/utils/fmgr/fmgr.c  
src/backend/utils/cache/lsyscache.c  
#### [PostgreSQL 许愿链接](https://github.com/digoal/blog/issues/76 "269ac3d1c492e938c0191101c7238216")
您的愿望将传达给PG kernel hacker、数据库厂商等, 帮助提高数据库产品质量和功能, 说不定下一个PG版本就有您提出的功能点. 针对非常好的提议，奖励限量版PG文化衫、纪念品、贴纸、PG热门书籍等，奖品丰富，快来许愿。[开不开森](https://github.com/digoal/blog/issues/76 "269ac3d1c492e938c0191101c7238216").  
#### [9.9元购买3个月阿里云RDS PostgreSQL实例](https://www.aliyun.com/database/postgresqlactivity "57258f76c37864c6e6d23383d05714ea")
#### [PostgreSQL 解决方案集合](https://yq.aliyun.com/topic/118 "40cff096e9ed7122c512b35d8561d9c8")
#### [德哥 / digoal's github - 公益是一辈子的事.](https://github.com/digoal/blog/blob/master/README.md "22709685feb7cab07d30f30387f0a9ae")
![digoal's wechat](../pic/digoal_weixin.jpg "f7ad92eeba24523fd47a6e1a0e691b59")
#### [PolarDB 学习图谱: 训练营、培训认证、在线互动实验、解决方案、生态合作、写心得拿奖品](https://www.aliyun.com/database/openpolardb/activity "8642f60e04ed0c814bf9cb9677976bd4")
#### [购买PolarDB云服务折扣活动进行中, 55元起](https://www.aliyun.com/activity/new/polardb-yunparter?userCode=bsb3t4al "e0495c413bedacabb75ff1e880be465a")
#### [About 德哥](https://github.com/digoal/blog/blob/master/me/readme.md "a37735981e7704886ffd590565582dd0")