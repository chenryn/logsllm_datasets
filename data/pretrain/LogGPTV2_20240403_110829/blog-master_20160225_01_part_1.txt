## PostgreSQL 优化器逻辑推理能力 源码解析  
### 作者                                         
digoal                                          
### 日期                                        
2016-02-25                                           
### 标签                                        
PostgreSQL , 优化器 , 操作符 , 逻辑推理                                                                                      
----                                        
## 背景            
PostgreSQL 支持自定义操作符，本质上是调用函数来实现的。    
同时不同的操作符有幂等，反转，NOT等相关性，数据库的优化器可以利用这些关系，对QUERY进行REWRITE，产生更好的执行计划。      
优化器根据操作符进行REWRITE产生好的执行计划，其中有一项就是需要应用操作符的优化器开关，进行逻辑推理，过滤掉约束返回FALSE的，不进入EXECUTE环节，直接返回。     
## 什么是逻辑推理  
数据库优化器需要具备逻辑推理能力，而且越强越好，为什么呢？    
举一些例子，    
通过已知的一个人讲的是真话，推理另一个人讲的一定是真话或一定是假话。    
例子1：    
    假设预先提供了 a > 10 是真话    
    可以推理出 a  10 是真话    
    无法推理出 a 100 是真话    
    可以推理出 a =100 一定是假话    
例子5：    
    假设预先提供了 a >100 是真话    
    可以推理出 a >1 一定是真话    
例子6：    
    假设预先提供了 a 的坐标位置在中国 是真话    
    可以推理出 a 的坐标位置在浙江杭州 一定是真话    
例子7：    
    假设预先提供了 平面中 坐标A和坐标（1,100）的距离小于100 是真话    
    是否推理出 坐标A和坐标（100,100）的距离小于1000 一定是真话或假话？    
总结一下以上逻辑推理，首先要提供已知真假的一个表达式，然后推理另一个表达式的真假。推理可以得出的结论是真、或者假、或者不知道真假。    
对于推理出来的结果一定是真或者一定是假的情况，数据库可以利用它来减少后期的处理。    
这体现在优化器生成查询树之前。例如：    
```    
create table tab(id int check (id >=0), info text, crt_time timestamp);    
select * from tab where id=0，通过这个表达式能推理出SQL中给出的表达式 id=0), info text, crt_time timestamp);    
CREATE TABLE    
digoal=# explain select * from ta where id=-1;    
                     QUERY PLAN                         
----------------------------------------------------    
 Seq Scan on ta  (cost=0.00..24.12 rows=6 width=44)    
   Filter: (id = '-1'::integer)    
(2 rows)    
```    
以上查询貌似并没有优化，还是扫描了表，原因是constraint_exclusion参数默认值对UNION ALL和分区表开启这种逻辑推理检查。    
将constraint_exclusion 改为ON即可对所有表进行逻辑推理检查。    
```    
digoal=# set constraint_exclusion =on;    
SET    
digoal=# explain select * from ta where id=-1;  -- 现在不需要扫描表了    
                QUERY PLAN                    
------------------------------------------    
 Result  (cost=0.00..0.01 rows=1 width=0)    
   One-Time Filter: false    
(2 rows)    
digoal=# explain select * from ta where id0。    
```    
postgres=# explain select * from ta where id<>0;    
                      QUERY PLAN                           
-------------------------------------------------------    
 Seq Scan on ta  (cost=0.00..24.12 rows=1124 width=44)    
   Filter: (id <> 0)    
(2 rows)    
```    
对于提供的表达式与已知的表达式操作符左侧不一致的，目前PG的优化器没有做到这么智能，例如 id+1,>=以及<>  (<>不能直接被索引使用，但是可以转换为来使用索引)。    
B-tree-indexable operators   
2\. SQL语句where字句中提供的表达式，同样操作符必须是B-tree-indexable operators。    
3\. SQL语句where字句中提供的表达式，操作符左侧的操作数必须与约束中的操作数完全一致。    
例如约束为(check mod(id,4) = 0)，SQL where字句提供的表达式则必须为 mod(id,4) op?   ?  这种形式才会进行推理。    
又如约束为(check id*100 > 1000)，SQL where字句提供的表达式则必须为 id*100 op?   ?  这种形式才会进行推理。    
又如约束为(check id+10 between 1000 and 10000)，SQL where字句提供的表达式则必须为 id+10 op?   ?  这种形式才会进行推理。( PostgreSQL 的 between and 会转换为>= and  1000，>为B-tree-indexable operators    
```    
postgres=# create table tt3( id int check(id*100 > 1000));    
CREATE TABLE    
postgres=# explain select * from tt3 where id=1;    
                     QUERY PLAN                          
-----------------------------------------------------    
 Seq Scan on tt3  (cost=0.00..41.88 rows=13 width=4)    
   Filter: (id = 1)    
(2 rows)    
-- 要让PG进行逻辑推理，WHERE中必须包含id*100表达式，并且*是immutable操作符,所以1*100可以替换为常数。从而进行逻辑推理。    
postgres=# explain select * from tt3 where id=1 and id*100=1*100;    
                QUERY PLAN                    
------------------------------------------    
 Result  (cost=0.00..0.01 rows=1 width=0)    
   One-Time Filter: false    
(2 rows)    
```    
约束为 id+10 between 1000 and 10000，between and 自动转换为>=和and =或id;    
                QUERY PLAN                    
------------------------------------------    
 Result  (cost=0.00..0.01 rows=1 width=0)    
   One-Time Filter: false    
(2 rows)    
postgres=# explain select * from tt5 where 1 100    
推理 id > 1 是真是假？可以通过比较两个常数来决定，100 >= 1 为真则说明 id>1为真。    
为什么要比较这两个常数呢？因为这是优化器排除对表的扫描的一种手段，这时还没有到需要用到id值的阶段。所以此时优化器只能通过常数来推理。    
具体的代码如下：    
目前PG只实现了对btree索引可以用到的操作符的逻辑推理，使用了两张映射表来描述推理关系。    
一张表BT_implic_table 用来推理一定为真，另一张表BT_refute_table 用来推理一定为假。    
例如：    
已知 ATTR given_op CONST1 为真    
如果 CONST2 test_op CONST1 为真    
则推理得出 ATTR target_op CONST2 一定为真    
其中 test_op = BT_implic_table[given_op-1][target_op-1] 就是通过BT_implic_table 映射表取出的操作符。    
已知 ATTR given_op CONST1 为真    
如果 CONST2 test_op CONST1 为假    
则推理得出 ATTR target_op CONST2 一定为假    
其中 test_op = BT_refute_table[given_op-1][target_op-1] 就是通过BT_refute_table 映射表取出的操作符。    
代码：    
```    
/*    
 * Define an "operator implication table" for btree operators ("strategies"),    
 * and a similar table for refutation.    
 *    
 * The strategy numbers defined by btree indexes (see access/skey.h) are:    
 *		(1) =   (5) >    
 * and in addition we use (6) to represent <>.  <> is not a btree-indexable    
 * operator, but we assume here that if an equality operator of a btree    
 * opfamily has a negator operator, the negator behaves as <> for the opfamily.    
 * (This convention is also known to get_op_btree_interpretation().)    
 *    
 * The interpretation of:    
 *    
 *		test_op = BT_implic_table[given_op-1][target_op-1]    
 *    
 * where test_op, given_op and target_op are strategy numbers (from 1 to 6)    
 * of btree operators, is as follows:    
 *    
 *	 If you know, for some ATTR, that "ATTR given_op CONST1" is true, and you    
 *	 want to determine whether "ATTR target_op CONST2" must also be true, then    