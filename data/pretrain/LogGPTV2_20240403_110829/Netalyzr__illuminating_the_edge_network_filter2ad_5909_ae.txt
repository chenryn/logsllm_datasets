### DNS MTU and DNSSEC Deployment Challenges

The advertised Maximum Transmission Unit (MTU) for most sessions defaults to 4096 bytes (94%). However, other MTU values are also observed, including 512 bytes (3.1%), 2048 bytes (1.6%), and 1280 bytes (0.3%).

Despite the high prevalence of DNSSEC-enabled resolvers, the transition to widespread DNSSEC usage is not without challenges. For EDNS sessions with an advertised MTU of 1800 bytes or more, 13% failed to fetch large EDNS-enabled replies, and 1.9% failed for medium-sized replies. This indicates a common issue where DNS resolvers are connected through networks that either do not support fragmented UDP traffic or assume DNS replies never exceed 1500 bytes. Since DNSSEC replies often exceed 1500 bytes, this problem suggests a significant deployment issue that will require changes to resolver logic.

### Validation of DNS MTU

The RELEASE data includes a full validation of DNS MTU up to 4 KB. Despite not advertising a large MTU, almost all sessions (95%) used a resolver capable of receiving messages over 512 bytes. However, a significant number of sessions (15%) had a measured DNS MTU of 1472 bytes, equivalent to an IP MTU of 1500 bytes, suggesting an inability to handle fragmented traffic. This even occurred in 11% of sessions that explicitly advertised an EDNS MTU greater than 1472 bytes. Such discrepancies can lead to unpredictable timeouts and failures if DNS replies, especially those involving DNSSEC, exceed the actual 1472-byte MTU.

### Client-Side Issues

Similar problems exist at the client level, often due to different causes. When clients directly request edns_large, edns_medium, and edns_small from the server, the failure rates are 14.1%, 4.3%, and 1.3%, respectively. This suggests two additional difficulties: network devices assuming DNS replies do not exceed 512 bytes (both edns_large and edns_medium fail), or networks that do not handle EDNS at all (all three fail). The high failure rate is problematic because robust DNSSEC validation requires implementation on the end host’s stub resolver to achieve end-to-end security, which necessitates the ability to receive large, EDNS-enabled DNS messages.

### DNS Port Randomization

Another concern is the continued lack of DNS port randomization. This vulnerability, which was well-publicized over a year ago when Netalyzr was first released, still affects 5% of sessions, using monotone or fixed ports in DNS requests. However, no major ISP showed significant issues with this test.

### DNS Performance

DNS resolvers may be a bottleneck for many users. 9% of sessions required 300 ms more time to look up a name within our domain compared to the base round-trip time to our server, and 4.6% required more than 600 ms. Up to 100 ms of the increase can be attributed to the fact that our DNS server is within our institution, while the back-end servers are hosted at Amazon EC2’s East Coast location.

### DNSSEC-Enabled Resolvers

32% of sessions exhibit BIND’s default handling of glue, CNAMEs, 0x20, EDNS, and DNSSEC.

### Additional Observations

The failures we observe could also be due to heavy packet loss. However, such failures should not favor one type of query over another. We observed that only 0.09% of sessions had edns_medium succeed while edns_small failed.

### Network Policies and ISP Profiles

Table 3 illustrates some of the policies observed for the 15 most common ISPs. We have already discussed the relative lack of SMTP blocking. Some ISPs do not appear to filter Windows traffic, though they might block these ports inbound, which Netalyzr cannot determine as it does not perform inbound scanning.

### Early Design Decisions

Many DSL providers initially offered PPPoE connections rather than IP over Ethernet, while DOCSIS-based cable modems always used IP-over-Ethernet. For Verizon, only 9% of customers whose reverse name suggests FiOS (fiber to the home) manifest the PPPoE MTU, while 68% of the others do.

### NXDOMAIN Wildcarding

A final trend concerns the growth of NXDOMAIN wildcarding, particularly ISPs wildcarding all names rather than just www names. During Netalyzr’s initial release, Comcast had yet to implement NXDOMAIN wildcarding but began doing so in Fall 2009. We confirmed that the observed policies for Comcast match their stated policies. Comcast has publicly stated that they will block outbound traffic on Windows ports and may use dynamic techniques to block outbound SMTP. When they started widespread deployment of wildcarding, they stated they would only wildcard www addresses, but we observed early tests that wildcarded all addresses for a short period.

### Related Work

There is a substantial body of work on measuring various aspects of the Internet. Here, we focus on studies related to our measurements and data collection methods.

#### Network Performance

Dischinger et al. studied network-level performance characteristics, including link capacities, latencies, jitter, loss, and packet queue management. They used measurement packet trains similar to ours but picked client machines by scanning ISP address ranges for responding hosts, subsequently probing 1,894 such hosts autonomously. In 2002, Saroiu et al. studied similar access link properties and P2P-specific aspects of 17,000 Napster file-sharing nodes and 7,000 Gnutella peers. They identified probe targets by crawling the P2P overlays and found a large diversity in bandwidth and latency. Maier et al. analyzed residential broadband traffic of a major European ISP, finding that round-trip latencies between users and the ISP’s border gateway often exceeded those between the gateway and the remote destination. Ritacco et al. developed a network test suite driven by a Java applet, focusing on general performance and wireless networks.

#### Network Neutrality

Several studies have examined the degree to which network operators provide different service to different types of traffic. Dischinger et al. found that around 8% of users experienced BitTorrent blocking. Bin Tariq et al. devised NANO, a distributed measurement platform, to detect whether an ISP degrades performance for specific classes of service. Beverly et al. leveraged the “referral” feature of Gnutella to conduct TCP port reachability tests from 72,000 unique Gnutella clients, finding that Microsoft’s network file-sharing ports were frequently blocked.

This comprehensive overview highlights the complexities and challenges in DNS and network performance, providing insights into the ongoing need for improvements in DNSSEC deployment and network policies.