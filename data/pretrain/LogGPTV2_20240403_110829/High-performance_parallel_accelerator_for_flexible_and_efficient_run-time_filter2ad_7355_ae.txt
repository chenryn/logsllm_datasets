reports that monitors on the FPGA fabric can only run at
a couple of hundred MHz. Figure 7 shows the normalized
performance of Harmoni on a main processing core with a
high clock frequency (1GHz) and compares the result with
the FlexCore approach with an on-chip FPGA fabric, which
can only run at roughly one-fourth of the main core’s clock
frequency. Because Harmoni can match the main processing
core’s clock frequency, its performance impact is fairly low.
On the other hand, due to its low clock frequency, monitoring
on an FPGA introduces signiﬁcant overheads for techniques
that require frequent
tag operations. For the majority of
benchmarks that we ran in the evaluation, the performance
overheads of Harmoni were much lower than FlexCore with
a slow on-chip FPGA. While not shown here, we found
that Harmoni can keep pace even with a main processing
twice its maximum frequency of 2.5GHz
core running at
with small overheads. Because not all
instructions on the
main core triggers a tag operation, running the tag pipeline
at a slower clock frequency does not directly translate to
performance overheads for most monitoring techniques. The
higher frequencies achievable by Harmoni allows it to be used
with high performance processing cores running at a Gigahertz
and more.
V. RELATED WORK
Here, we brieﬂy discuss how the Harmoni architecture is
related and different from the previous work in run-time mon-
itoring. In a high-level, Harmoni represents a unique design
point in the context of the inherent trade-off between pro-
grammability and efﬁciency; Harmoni is much more general
and programmable compared to dedicated hardware solutions
for a single run-time monitoring technique while providing
much higher performance and power efﬁciency compared to
fully programmable approaches.
A. Hardware-Based Run-Time Monitoring
Run-time monitoring and tagging as methods to ensure
various program properties have been extensively studied. This
work uses the previously proposed monitoring techniques and
also borrow ideas such as tagging, decoupled monitoring archi-
tecture, and software-controlled tables from existing hardware
implementations. However, the goal of Harmoni is to enable
a broad range of monitoring techniques on a single platform
rather than realizing one particular monitor.
Feustel [22] argued that a complete tagged architecture can
make software and systems more cost effective for performing
practical computations and can deal with type and program
safety issues in computer systems in a natural and transparent
manner. This previous work introduced the notion of tagging,
but only in the context of a ﬁxed hardware extension.
Recently, the dynamic information ﬂow tracking (or dy-
namic taint analysis) has been widely studied in the context
of building more secure systems. DIFT [1] used a single-bit
hardware tagging mechanism to track the ﬂow of untrusted
information in a system and to prevent program hijacking
attempts that take advantage of program vulnerabilities. Using
simple hardware support and tag memory management opti-
mizations, DIFT was able to perform information ﬂow tracking
with negligible performance overheads. Similarly, Minos [23]
tags individual words of memory data and implements Biba’s
low-water-mark integrity policy [24] on the use of memory
data to stop attacks that attempt to corrupt control data in
order to hijack program control ﬂow.
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 07:21:47 UTC from IEEE Xplore.  Restrictions apply. 
Raksha [3] expanded upon DIFT by using multi-bit tags
to support programmable and concurrent
information ﬂow
security policies along with low-overhead security handlers
that allow software to better manage detected errors. Flex-
iTaint [28] proposed a fully ﬂexible DIFT implementation
where a software-controlled table can be used to propagate
and check taint information on each instruction. In that sense,
FlexiTaint can be considered as supporting value tags in a
way that the propagation and check policies are completely
ﬂexible. However, FlexiTaint is only designed to support a
dynamic information ﬂow tracking with ﬂexible policies. The
Harmoni architecture borrows the idea of software-controlled
tables. However, Harmoni processor supports a wider range of
monitoring techniques by enabling value, location, and object
tags and also allowing them to be combined together.
Tiwari et al [26] extended DIFT to the hardware gate level.
By restricting the ISA, using predicated execution, bounded
loops, and an iteration-coupled load/store architecture,
the
authors designed a provably-sound information ﬂow tracking
system that is capable of tracking all explicit and implicit
information ﬂows within a computer system. Harmoni targets
to monitor program-level behaviors and does not handle gate-
level information ﬂows.
The early DIFT implementations added tagging capabilities
directly into a processing core pipeline. However, performing
invasive hardware modiﬁcations to existing processor designs
presented a major obstacle in deploying information ﬂow
tracking in practice due to the high hardware design and
veriﬁcation costs. The DIFT co-processor [25] proposed to
reduce these costs by performing DIFT in a small decoupled
co-processor. The DIFT co-processor was shown to be able to
provide the same degree of security as the most complete in-
tegrated DIFT architecture, had lower performance overheads,
and required fewer invasive changes to the baseline processing
core. Harmoni uses a similar decoupled co-processor archi-
tecture, but support a wide range of monitoring schemes in
addition to DIFT.
In addition to DIFT, a number of run-time monitoring
schemes have been proposed to enable many types of capabil-
ities such as ﬁne-grained memory protection [4], array bound
checking [5], [6], software debugging support [7], managed
language support such as garbage collection [8], hardware
error detection [9], etc. Harmoni targets to support many of
them with a single hardware platform.
B. Programmable Monitoring Platforms
There have been recent efforts to build programmable run-
time monitoring architectures, which can enable more than
one monitoring scheme. Compared to these proposals, the
Harmoni architecture is either more ﬂexible or provides higher
performance.
MemTracker [13] is a runtime monitoring approach for
memory bug detection in which a hardware state machine
uses a memory tag and memory operation to update the
memory tag and check for memory bugs on each memory
access instruction. In comparison to MemTracker, Harmoni
is not restricted to monitoring for memory bugs and can
perform more sophisticated monitoring functions by keeping
track of tags for a larger portion of program state. Effectively,
MemTracker only supports memory location tags with very
simple update and check rules.
LBA [27] proposes to utilize a large number of processing
cores in future microprocessors for run-time monitoring. More
speciﬁcally, LBA augments each processor with hardware
support for logging a main program trace and delivering it
to another (otherwise idle) processing core for inspection.
A software program running on this other core executes the
monitoring task. Compared to LBA, Harmoni is less general,
yet far more efﬁcient and have better throughput because it
performs monitoring entirely in hardware and avoids the area
and power overheads of running general purpose instructions
on a separate processing core.
FlexCore [12] is a hybrid architecture that combines a
general-purpose processing core with a decoupled on-chip,
bit-level reconﬁgurable fabric. The fabric can be reconﬁg-
ured to perform a range of runtime monitoring functions in
hardware to detect reliability and security errors. However,
the low throughput of the bit-level programmable fabric used
in the FlexCore architecture can cause it to have very high
performance overheads on high-performance processing cores
that can run at a high clock frequency. This work addresses
this performance challenge by narrowing the scope of run-
time monitoring functions and optimizing the architecture for
tagging techniques.
VI. CONCLUSION
This paper proposed the Harmoni architecture, a high-
performance and reconﬁgurable co-processor that can be used
to implement program monitoring techniques based on tagging
in hardware. We showed how a variety of runtime monitoring
techniques can be mapped to the Harmoni hardware so as
to check for memory bugs, security violations, and support
the management of system resources. Harmoni presents a
new design point on the spectrum between performance and
ﬂexibility for runtime monitoring approaches; by matching the
common characteristics of monitoring approaches based on
tagging, Harmoni can achieve very high performance without
restricting the capabilities of the monitoring approaches. We
evaluated the overheads of the Harmoni co-processor by
building an RTL model and evaluated the application perfor-
mance with Harmoni monitoring using RTL simulations. The
evaluation results demonstrated that the Harmoni coprocessor
takes moderate silicon area and has low overheads on program
performance for a range of monitoring approaches.
ACKNOWLEDGMENTS
This work was partially supported by the National Science
Foundation grants CNS-0746913 and CNS-0708788, the Air
Force grant FA8750-11-2-0025, the Ofﬁce of Naval Research
grant N00014-11-1-0110,
the Army Research Ofﬁce grant
W911NF-11-1-0082, and an equipment donation from Intel.
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 07:21:47 UTC from IEEE Xplore.  Restrictions apply. 
REFERENCES
the 11th international conference on Architectural support
[1] G. E. Suh, J. W. Lee, D. Zhang, and S. Devadas, “Secure program
execution via dynamic information ﬂow tracking,” in Proceedings
of
for
programming languages and operating systems, ser. ASPLOS-XI.
New York, NY, USA: ACM, 2004, pp. 85–96. [Online]. Available:
http://doi.acm.org/10.1145/1024393.1024404
[2] J. Newsome and D. Song, “Dynamic taint analysis: Automatic detection,
analysis, and signature generation of exploit attacks on commodity
software,” in Proceedings of the 2005 Network and Distributed Systems
Symposium, February 2005.
[3] M. Dalton, H. Kannan, and C. Kozyrakis, “Raksha: a ﬂexible
information ﬂow architecture for software security,” in Proceedings of
the 34th annual international symposium on Computer architecture,
ser. ISCA ’07. New York, NY, USA: ACM, 2007, pp. 482–493.
[Online]. Available: http://doi.acm.org/10.1145/1250662.1250722
[4] E. Witchel, J. Cates, and K. Asanovi´c, “Mondrian memory protection,”
in Proceedings of the 10th international conference on Architectural
for programming languages and operating systems, ser.
support
ASPLOS-X. New York, NY, USA: ACM, 2002, pp. 304–316.
[Online]. Available: http://doi.acm.org/10.1145/605397.605429
[5] J. Devietti, C. Blundell, M. M. K. Martin, and S. Zdancewic, “Hard-
bound: architectural support for spatial safety of the C programming
the 13th international
language,” in ASPLOS XIII: Proceedings of
conference on Architectural support for programming languages and
operating systems, 2008, pp. 103–114.
[6] J. Clause, I. Doudalis, A. Orso, and M. Prvulovic, “Effective memory
protection using dynamic tainting,” in Proceedings of
the twenty-
second IEEE/ACM international conference on Automated software
engineering, ser. ASE ’07. New York, NY, USA: ACM, 2007, pp. 284–
292. [Online]. Available: http://doi.acm.org/10.1145/1321631.1321673
[7] P. Zhou, F. Qin, W. Liu, Y. Zhou, and J. Torrellas, “iwatcher: Efﬁcient
architectural support for software debugging,” in Proceedings of the 31st
annual international symposium on Computer architecture, ser. ISCA
’04. Washington, DC, USA: IEEE Computer Society, 2004, pp. 224–.
[Online]. Available: http://dl.acm.org/citation.cfm?id=998680.1006720
[8] J. A. Joao, O. Mutlu, and Y. N. Patt, “Flexible reference-counting-based
hardware acceleration for garbage collection,” in Proceedings of the
36th annual international symposium on Computer architecture, ser.
ISCA ’09. New York, NY, USA: ACM, 2009, pp. 418–428. [Online].
Available: http://doi.acm.org/10.1145/1555754.1555806
[9] A. Meixner, M. Bauer, and D. Sorin, “Argus: Low-cost, comprehensive
error detection in simple cores,” in Microarchitecture, 2007. MICRO
2007. 40th Annual IEEE/ACM International Symposium on, dec. 2007,
pp. 210 –222.
[10] F. Qin, C. Wang, Z. Li, H. seop Kim, Y. Zhou, and Y. Wu, “LIFT: A
low-overhead practical information ﬂow tracking system for detecting
security attacks,” in Proceedings of the 39th International Symposium
on Microarchitecture, 2006.
[11] S. Chen, M. Kozuch, T. Strigkos, B. Falsaﬁ, P. Gibbons, T. Mowry,
V. Ramachandran, O. Ruwase, M. Ryan, and E. Vlachos, “Flexible
hardware acceleration for instruction-grain program monitoring,” in
Proceedings of the 35th International Symposium on Computer Archi-
tecture, June 2008.
[12] D. Y. Deng, D. Lo, G. Malysa, S. Schneider, and G. E. Suh,
“Flexible and efﬁcient instruction-grained run-time monitoring using
on-chip reconﬁgurable fabric,” in Proceedings of the 2010 43rd Annual
IEEE/ACM International Symposium on Microarchitecture, ser. MICRO
’43. Washington, DC, USA: IEEE Computer Society, 2010, pp. 137–
148. [Online]. Available: http://dx.doi.org/10.1109/MICRO.2010.17
[13] G. Venkataramani, B. Roemer, Y. Solihin, and M. Prvulovic,
“Memtracker: Efﬁcient and programmable support for memory access
monitoring and debugging,” in Proceedings of the 2007 IEEE 13th
International Symposium on High Performance Computer Architecture.
Washington, DC, USA: IEEE Computer Society, 2007, pp. 273–284.
[Online]. Available: http://dl.acm.org/citation.cfm?id=1317533.1318083
[14] D. Deng and G. Suh, “Precise exception support for decoupled run-time
monitoring architectures,” in Computer Design (ICCD), 2011 IEEE 29th
International Conference on, oct. 2011, pp. 437 –438.
[15] N. Zeldovich, H. Kannan, M. Dalton, and C. Kozyrakis, “Hardware
enforcement of application security policies using tagged memory,”
in Proceedings of
the 8th USENIX conference on Operating
systems design and implementation, ser. OSDI’08. Berkeley, CA,
USA: USENIX Association, 2008, pp. 225–240. [Online]. Available:
http://dl.acm.org/citation.cfm?id=1855741.1855757
the
41st
annual
IEEE/ACM International
[16] M. Tiwari, B. Agrawal, S. Mysore, J. Valamehr, and T. Sherwood,
“A small cache of large ranges: Hardware methods for efﬁciently
searching, storing, and updating big dataﬂow tags,” in Proceedings
of
Symposium on
ser. MICRO 41. Washington, DC, USA:
Microarchitecture,
IEEE Computer Society, 2008, pp. 94–105.
[Online]. Available:
http://dx.doi.org/10.1109/MICRO.2008.4771782
J. Zhao, M. M. Martin,
and S. Zdancewic,
“Softbound: highly compatible and complete spatial memory safety
for c,” in Proceedings of
the 2009 ACM SIGPLAN conference on
Programming language design and implementation, ser. PLDI ’09.
New York, NY, USA: ACM, 2009, pp. 245–258. [Online]. Available:
http://doi.acm.org/10.1145/1542476.1542504
[17] S. Nagarakatte,
[18] J. Gaisler, E. Catovic, M. Isomaki, K. Glembo, and S. Habinc, “GRLIB
IP Core User’s Manual,” 2008.
[19] I. SPARC International, “The SPARC Architecture Manual Version 8,”
1992.
[20] I. Coporation, “Intel Atom Processor Z510,” 2008.
[21] M. R. Guthaus, J. S. Ringenberg, D. Ernst, T. M. Austin, T. Mudge,
and R. B. Brown, “MiBench: A Free, Commercially Representative
Embedded Benchmark Suite,” Annual IEEE International Workshop on
Workload Characterization, 2001.
[22] E. A. Feustel, “On the advantages of tagged architecture,” Computers,
IEEE Transactions on, vol. C-22, no. 7, pp. 644 –656, july 1973.
[23] J. R. Crandall and F. T. Chong, “Minos: Control data attack prevention
orthogonal
the 37th annual
IEEE/ACM International Symposium on Microarchitecture, ser. MICRO
37. Washington, DC, USA: IEEE Computer Society, 2004, pp. 221–
232. [Online]. Available: http://dx.doi.org/10.1109/MICRO.2004.26
to memory model,” in Proceedings of
[24] K. Biba, M. C. B. MA.,
Integrity Considerations
Division,
Defense Technical
http://books.google.com/books?id=lAa4SgAACAAJ
Information Center, 1977.
and U. S. A. F. S. C. E. S.
for Secure Computer Systems.
[Online]. Available:
[25] H. Kannan, M. Dalton, and C. Kozyrakis, “Decoupling dynamic in-
formation ﬂow tracking with a dedicated coprocessor,” in Dependable
Systems Networks, 2009. DSN ’09. IEEE/IFIP International Conference
on, 29 2009-july 2 2009, pp. 105 –114.
[26] M. Tiwari, H. M. Wassel, B. Mazloom, S. Mysore, F. T. Chong, and
T. Sherwood, “Complete information ﬂow tracking from the gates up,”
in Proceedings of the 14th international conference on Architectural
for programming languages and operating systems, ser.
support
ASPLOS ’09. New York, NY, USA: ACM, 2009, pp. 109–120.
[Online]. Available: http://doi.acm.org/10.1145/1508244.1508258
[27] S. Chen, B. Falsaﬁ, P. B. Gibbons, M. Kozuch, T. C. Mowry,
R. Teodorescu, A. Ailamaki, L. Fix, G. R. Ganger, B. Lin, and S. W.
Schlosser, “Log-based architectures for general-purpose monitoring of
deployed code,” in Proceedings of the 1st workshop on Architectural
and system support for improving software dependability, ser. ASID
’06. New York, NY, USA: ACM, 2006, pp. 63–65. [Online]. Available:
http://doi.acm.org/10.1145/1181309.1181319
[28] G. Venkataramani, I. Doudalis, Y. Solihin, and M. Prvulovic, “Flexitaint:
A programmable accelerator for dynamic taint propagation,” in High
Performance Computer Architecture, 2008. HPCA 2008. IEEE 14th
International Symposium on, feb. 2008, pp. 173 –184.
[29] S. Hauck, T. W. Fry, M. M. Hosler, and J. P. Kao, “The Chimaera
Reconﬁgurable Functional Unit,” IEEE Transactions on Very Large
Scale Integration Systems, 2004.
[30] R. Razdan and M. D. Smith, “A High-Performance Microarchitecture
with Hardware-Programmable Funct ional Units,” in Proceedings of the
27th Annual ACM/IEEE International Symposium on Microarchitecture,
1994.
[31] H.-S. Kim, A. K. Somani, and A. Tyagi, “A reconﬁgurable multi-
function computing cache architecture,” in Proceedings of
the 8th
ACM/SIGDA International Symposium on Field Programmable Gate
Arrays, 2000.
[32] J. R. Hauser and J. Wawrzynek, “Garp: A MIPS Processor with a
Reconﬁgurable Coprocessor,” in Proceedings of the 5th Annual IEEE
Symposium on FPGAs for Custom Computing Machines, 1997.
[33] R. D. Wittig and P. Chow, “OneChip: An FPGA Processor with Recon-
ﬁgurable Logic,” in Proceedings of the IEEE Symposium on FPGAs for
Custom Computing Machines, 1995.
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 07:21:47 UTC from IEEE Xplore.  Restrictions apply.