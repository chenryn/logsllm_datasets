   10 7.682508917 192.168.54.150 → 192.168.54.1 TCP 66 15850 → 65221 [SYN, ACK] Seq=0 Ack=1 Win=29200 Len=0 MSS=1460 SACK_PERM=1 WS=128 15850 65221
   11 7.682648282 192.168.54.1 → 192.168.54.150 TCP 60 65221 → 15850 [ACK] Seq=1 Ack=1 Win=525568 Len=0 65221 15850
   12 7.683109519 192.168.54.1 → 192.168.54.150 TCP 60 65221 → 15850 [PSH, ACK] Seq=1 Ack=1 Win=525568 Len=4 65221 15850
   13 7.683112379 192.168.54.150 → 192.168.54.1 TCP 60 15850 → 65221 [ACK] Seq=1 Ack=5 Win=29312 Len=0 15850 65221
   14 12.870963103 PcsCompu_14:69:d5 → 0a:00:27:00:00:0c ARP 60 Who has 192.168.54.1? Tell 192.168.54.150
   15 12.870976254 0a:00:27:00:00:0c → PcsCompu_14:69:d5 ARP 60 192.168.54.1 is at 0a:00:27:00:00:0c
```
Packets 1-3 show the real client sending an incorrect password to the server (packet #2) and receiving a response that the password is invalid (packet #3).
Packets 9-13 show the controller (IP: 192.168.54.1) establishing a TCP connection with the server, and sending the password (packet #12). The server just responds with an ACK (packet #13). One possible explanation would be that the server acts differently for incorrect and correct passwords, however repeating the experiment with an incorrect password still can't get the server to send any response.
Another observation from running the flow multiple times is that each time, after connecting to port 11111 and receiving a 16-byte message from the server, the client connects to a different port. 
In the example, the client received a response of `c18851ba99ab41417e0556a99b6d38fb` and connected to port 15850. Other experiments showed the following results:
```
7b74622e35280296ffc437b6fc5a2625 -> port 24321
c836c672c2a168780447189a2d949b9d -> port 21247
3074dd34f4ef97b1b8f73dcf4afabe13 -> port 20655
```
The port was never part of the plaintext message, meaning that the client and server are agreeing on a port using some different kind of protocol. This means that we can't simply write a client that connects to 11111, receives the 16-byte buffer and then connects to the new port and sends the password, since we don't know what the new port will be. And since we can't connect to the new port after the real client has connected to it, we need a different way to attack this problem.
I had two ideas as to how to proceed from this point: An easy way and a harder way. I started with the easy way...
The easy way:
We have two virtual machines, with two virtual hard drives. If we use each drive as a boot device, we boot to the operating systems like we saw before. What happens though if we just mount these HDs as secondary storage devices to an existing virtual machine?
![](images/vbox-hd.png)
The answer is that we get direct access to the contents and can read any file we want!
Notice how the client and the server print the following line when booting:
```
Restoring backup files from /mnt/sda1/tce/mydata.tgz
```
After booting to the controller, we start by listing the storage devices we have:
```console
root@kali:/# fdisk -l | grep Disk
Disk /dev/sda: 16 GiB, 17179869184 bytes, 33554432 sectors
Disklabel type: dos
Disk identifier: 0x034c7279
Disk /dev/sdb: 16 GiB, 17179869184 bytes, 33554432 sectors
Disklabel type: dos
Disk identifier: 0xc773fc5f
Disk /dev/sdc: 5 GiB, 5368709120 bytes, 10485760 sectors
Disklabel type: dos
Disk identifier: 0x00000000
Disk /dev/sdd: 5 GiB, 5368709120 bytes, 10485760 sectors
Disklabel type: dos
Disk identifier: 0x00000000
```
There are four disks. The first two are part of my regular setup, leaving `/dev/sdc` and `/dev/sdd` which are the two new devices. Let's mount them:
```console
root@kali:/# mount /dev/sdc1 /mnt/m/ --read-only
root@kali:/# cd /mnt/m
root@kali:/mnt/m# ls
lost+found  tce
root@kali:/mnt/m# ls tce
boot  firstrun  mydata.tgz  onboot.lst  ondemand  optional  xwbar.lst
root@kali:/mnt/m# tar -tvf tce/mydata.tgz
drwxrwsr-x root/staff        0 2019-01-31 13:39 opt/
-rw-rw-r-- tc/staff        153 2019-01-31 13:39 opt/.filetool.lst
-rwxr-xr-x root/staff      186 2019-01-24 16:02 opt/eth0.sh
-rw-r--r-- tc/staff         23 2019-01-24 15:56 opt/.appbrowser
-rw-rw-r-- root/staff       31 2019-01-24 15:55 opt/tcemirror
-rw-rw-r-- root/staff      145 2018-03-19 13:06 opt/.xfiletool.lst
-rwxr-xr-x root/staff      272 2018-03-19 13:06 opt/bootsync.sh
-rwxr-xr-x root/staff      613 2018-03-19 13:06 opt/shutdown.sh
-rwxr-xr-x root/staff       97 2019-01-24 20:07 opt/bootlocal.sh
drwxrwsr-x root/staff        0 2019-01-24 15:52 opt/backgrounds/
drwxrwxr-x root/staff        0 2019-01-24 15:52 home/
drwxr-s--- tc/staff          0 2019-01-31 13:38 home/tc/
drwx--S--- tc/staff          0 2019-01-31 13:37 home/tc/.fltk/
drwx--S--- tc/staff          0 2019-01-31 13:37 home/tc/.fltk/fltk.org/
-rw-r--r-- tc/staff         94 2019-01-31 13:39 home/tc/.fltk/fltk.org/fltk.prefs
-rw-r--r-- tc/staff         97 2019-01-24 16:06 home/tc/.fltk/fltk.org/filechooser.prefs
lrwxrwxrwx root/staff        0 2019-01-31 13:37 home/tc/.wbar -> /usr/local/tce.icons
-rwxr-xr-x tc/staff        275 2019-01-24 15:52 home/tc/.Xdefaults
-rwxr-xr-x tc/staff        103 2019-01-24 15:52 home/tc/.setbackground
-rwxr-xr-x tc/staff        450 2019-01-24 15:52 home/tc/.xsession
-rw-r--r-- tc/staff        920 2018-03-19 13:06 home/tc/.profile
-rw-rw-r-- tc/staff       1815 2019-01-31 13:39 home/tc/.ash_history
-rw-r--r-- tc/staff        446 2018-03-19 13:06 home/tc/.ashrc
-rwxrwxrwx tc/staff      95492 2019-01-24 18:30 home/tc/number.py
-rwxrwxrwx tc/staff     420240 2019-01-27 20:20 home/tc/canudoit.zip
-rwxrwxrwx tc/staff       4555 2019-01-31 13:38 home/tc/server.py
-rwxrwxrwx tc/staff          0 2019-01-31 12:00 home/tc/flag.txt
drwxr-s--- tc/staff          0 2019-01-24 15:52 home/tc/.local/
drwxr-s--- tc/staff          0 2019-01-24 15:52 home/tc/.local/bin/
drwxr-s--- tc/staff          0 2019-01-24 15:52 home/tc/.X.d/
-rw-rw---- root/staff      168 2019-01-24 15:53 etc/shadow
-rwxr-xr-x root/staff      186 2019-01-24 16:02 opt/eth0.sh
-rwxr-xr-x root/root      2432 2019-01-24 16:05 usr/local/lib/python2.7/site-packages/Crypto/pct_warnings.py
-rw-r--r-- root/root     95492 2019-01-24 18:31 usr/local/lib/python2.7/site-packages/Crypto/Util/number.py
```
We can copy `mydata.tgz` to our local filesystem, extract it and inspect the interesting files. Then we should unmount the filesystem using `umount /mnt/m`.
For the server, the interesting files are `canudoit.zip` (we'll get to that much later) and `server.py`:
```python
import socket
import sys
import random
import os
import time
import hashlib
from time import sleep
from Crypto.Cipher import AES
def commands(comm):
    comm_decoded = comm.decode('UTF-8')
    if comm.isdigit():
        return str(comm_decoded)
    elif comm_decoded == 'whoami':
        return 'LUKE, I am your father!'
    elif comm_decoded == 'ls':
        ls = "420240    canudoit.zip\n"
        ls += "4096      Downloads\n"
        ls += "4096      Home\n"
        ls += "4096      Public"
        return ls
    elif comm_decoded == 'time':
        return 'It\'s time to say GOODBYE!'
    elif comm_decoded == 'downloadfile canudoit.zip':
        return 'send zip'
    elif comm_decoded == 'get key':
        key = "AES\n"
        key += "key=4dJhvjFRn2oXraty\n"
        key += "iv=1234567890123456\n"
        key += "MODE_CBC\n"
        return key
    elif comm_decoded == 'get flag':
        g = open('/home/tc/flag.txt', 'r+')
        k = g.read(1024)
        if k == '':
            md5f = hashlib.md5("bazinga").hexdigest()
            nflag = random.randint(10000, 99999)
            flag = ''
            n = 0
            for i in str(nflag):
                flag += md5f[int(i)]
                flag += str(nflag)[n]
                n += 1
            g.write(flag)
        else:
            flag = k
        g.close()
        return "your flag is: " + flag
    elif comm_decoded == 'help':
        return 'I really want to help you, but I hate get COMMANDS!'
    elif comm_decoded == 'quit':
        return 'ok, bye'
    else:
        return 'I can\'t understand you!'
BS = 16
pad = lambda s: s + (BS - len(s) % BS) * chr(BS - len(s) % BS)
unpad = lambda s: s[0:-ord(s[-1])]
server_ip = "192.168.54.150"
# Create a TCP/IP socket
sockfirst = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
# Bind the socket to the port
server_address = (server_ip, 11111)
print >>sys.stderr, 'starting up on %s port %s' % server_address
sockfirst.bind(server_address)
# Listen for incoming connections
sockfirst.listen(1)
# Wait for a connection
#print >>sys.stderr, 'waiting for a connection'
connection_f, client_address_f = sockfirst.accept()
try:
    #print >> sys.stderr, 'connection from', client_address_f
    main_port = random.randint(1024, 65535)
    mport = str(main_port).encode('utf-8')
    encryption_suite = AES.new('4dJhvjFRn2oXraty', AES.MODE_CBC, '1234567890123456')
    raw = pad(mport)
    encrypted = encryption_suite.encrypt(raw)
    #print(str(encrypted))
    connection_f.sendall(encrypted)
finally:
    connection_f.close()
sock_main = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
# Bind the socket to the port
server_address_m = (server_ip, main_port)
#print >> sys.stderr, 'starting up on %s port %s' % server_address_m
sock_main.bind(server_address_m)
# Listen for incoming connections
sock_main.listen(1)
# Wait for a connection
#print >>sys.stderr, 'waiting for a connection'
timeout = time.time() + 3
connection_m, client_address_m = sock_main.accept()
# check if the time pass
if time.time() > timeout:
    connection_m.close()
    print ('connection timeout')
try: