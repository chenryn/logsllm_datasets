# GATEKEEPER: Mostly Static Enforcement of Security and Reliability Policies for JavaScript Code

## Authors
- Salvatore Guarnieri, University of Washington
- V. Benjamin Livshits, Microsoft Research

## Abstract
The rise of Web 2.0 has led to a proliferation of client-side code, often written in JavaScript. This code is frequently combined with other code and content from disparate, mutually untrusting sources, leading to significant security and reliability concerns.

This paper introduces GATEKEEPER, a mostly static approach for soundly enforcing security and reliability policies for JavaScript programs. GATEKEEPER is highly extensible, featuring a rich, expressive policy language that allows site administrators to formulate policies as succinct Datalog queries.

The primary application of GATEKEEPER explored in this paper is the analysis of JavaScript widgets, such as those hosted by Live.com and Google/IG. These widgets can be either malicious or poorly written, and the hosting site has the authority to reject submissions that do not meet the siteâ€™s security policies.

To demonstrate the practicality of our approach, we describe nine representative security and reliability policies. Statically checking these policies results in 1,341 verified warnings in 684 widgets, with no false negatives due to the soundness of our analysis, and only two widgets affected by false positives.

## 1. Introduction
JavaScript is increasingly becoming the lingua franca of the web, used for both large monolithic applications and small widgets that are often combined with code from untrusted sources. Despite its popularity, many programming language purists consider JavaScript to be difficult to analyze due to dynamic constructs like `eval` and the lack of static typing. This perception has led to a preference for code instrumentation over static program analysis when enforcing security policies [20, 25, 29, 35].

A recent report from Finjan Security highlights the increasing threat of widget-based attacks [17], making widget security an urgent issue. The report also details vulnerabilities in the Vista sidebar, Live.com, and Yahoo! widgets. This paper focuses on statically enforcing security and reliability policies for JavaScript code. These policies include restricting widget capabilities, ensuring built-in objects are not modified, preventing code injection, detecting redirects and cross-site scripting, preventing global namespace pollution, and taint checking.

Soundly enforcing security policies is challenging. For example, if a policy restricts calls to `document.write` (which can inject arbitrary code), it must handle tricky constructs like `eval("document" + ".write('...')")`, `var a = document['wri' + 'te']; a('...');`, or `var a = document; var b = a.write; b.call(this, '...');`. A naive unsound analysis can easily miss these constructs, and obfuscation tools [19] can further complicate detection.

JavaScript relies on heap-based allocation, and object aliasing (where multiple variable names refer to the same heap object) makes it difficult to enforce policies. To address this, GATEKEEPER performs a points-to analysis, which is a key building block for reasoning about object-oriented programs. We propose the first points-to analysis for JavaScript, specifically for a realistic subset called JavaScriptSAFE, which includes prototypes and reflective language constructs. For programs outside this subset, GATEKEEPER inserts runtime checks to prevent dynamic code introduction. Both the pointer analysis and the nine policies we formulate are based on an expressive Datalog-based declarative analysis framework, allowing site administrators to write their policies in just a few lines of Datalog.

In this paper, we show that JavaScript programs are more amenable to analysis than previously thought. We evaluated over 8,000 JavaScript widgets from sources like Live.com, Google, and the Vista Sidebar. Our findings indicate that the use of problematic constructs like `with`, `Function`, and `eval` is rare. However, statically unknown field references and `innerHTML` assignments, which can be used for code injection, are more common. GATEKEEPER inserts dynamic checks around these features to maintain soundness.

## 1.1 Contributions
This paper makes the following contributions:
- **Points-to Analysis for JavaScript**: We propose the first points-to analysis for JavaScript, handling a prototype-based language. We identify JavaScriptSAFE, a statically analyzable subset, and propose lightweight instrumentation to handle programs outside this subset.
- **Security and Reliability Policies**: Based on points-to information, we describe nine representative security and reliability policies that GATEKEEPER soundly checks. These policies are expressed in succinct Datalog queries, making the system highly extensible and easy to use.
- **Experimental Evaluation**: We evaluate over 8,000 publicly available JavaScript widgets, flagging 1,341 policy violations in 684 widgets, with only 113 false positives affecting two widgets.

## 1.2 Paper Organization
The rest of the paper is organized as follows:
- **Section 2**: Overview of our approach and significant analysis challenges.
- **Section 3**: Detailed description of our analysis (skippable for readers interested in security policies).
- **Section 4**: Description of the nine static checkers developed for security policies.
- **Section 5**: Summary of experimental results.
- **Sections 6 and 7**: Related work and conclusions.

## 2. Overview
Recent reports from Finjan Security highlight the rise of widget-based attacks [17]. Exploits in widgets, such as those in the Vista sidebar, Live.com RSS, and Yahoo! contact widgets, not only affect users but also reflect poorly on the hosting site. Widgets, like operating system drivers, can run in the same page (analogous to an OS process) and impact the entire site. While driver security has been extensively studied, widget security has received less attention.

Our focus is on soundly enforcing security and reliability policies for JavaScript widgets. There are three key parties involved: the widget hosting site (e.g., Live.com), the developer submitting the widget, and the user executing the widget. Figure 1 illustrates their relationship. We aim to help the widget host ensure user protection.

### 2.1 Deployment
GATEKEEPER is designed to be deployed by the widget hosting provider as a mandatory step in the online submission process. Many hosts already use captchas to verify human submitters, but this does not assess the quality or intent of the submitted code. GATEKEEPER ensures that the widget complies with the host's policies. If a widget fails, the host can instruct the developer to fix the code and resubmit, similar to tools like the static driver verifier for Windows drivers [24]. Our policy checker provides detailed information about the failures, including line numbers, to facilitate corrections.

### 2.2 Designing Static Language Restrictions
To enable sound analysis, we restrict the input to a subset of JavaScript defined by the EcmaScript-262 standard. Unlike previous proposals that significantly limit language expressiveness, our restrictions are minor. Specifically, we disallow `eval`, `Function` constructor, `setTimeout`, and `setInterval` because they introduce new code at runtime, which cannot be reasoned about statically. We also disallow `with`, which dynamically substitutes the symbol lookup scope and complicates static reasoning.

We allow reflective constructs like `Function.call`, `Function.apply`, and the `arguments` array, as they are commonly used and can be analyzed statically. Our analysis choices are driven by statistics from 8,379 real-world widgets, not hypothetical considerations. Common "unsafe" features, such as `.innerHTML` assignments and statically unresolved field references, are checked at runtime due to their prevalence.

To implement these restrictions, our JavaScript parser flags the use of `eval`, `Function`, `with`, `setTimeout`, and `setInterval`. We assume no calls to `document.write` and verify this assumption as described in Section 4.3, ensuring soundness.

We define two subsets of JavaScript: JavaScriptSAFE and JavaScriptGK. If a program passes the checks and lacks dangerous accesses, it is declared JavaScriptSAFE. Otherwise, it is instrumented and declared JavaScriptGK. We use local dataflow constant propagation analysis [1] to resolve field accesses.

In summary, GATEKEEPER provides a robust, extensible, and practical solution for enforcing security and reliability policies in JavaScript widgets, addressing the growing need for widget security in the modern web.