# Instrument and Find Out: Writing Parasitic Tracers for High-Level Languages

**Jeff Dileo**  
[@chaosdatumz]  
DEF CON 29

## Disclaimer
By viewing this presentation, you agree to indemnify and hold harmless the presenter in the event that you decide to take any of his advice and find yourself unable to sleep at 4 AM due to "language demons."

## About the Presenter
- **@chaosdatumz**
- Agent of chaos
- Unix aficionado
- Technical Director / Research Director @ NCC Group
- Enjoys working with:
  - Programs
  - Languages
  - Runtimes
  - Memory
  - Kernels
  - Packets
  - Bytes
  - And more...

## Outline
1. Background
2. Parasitic Tracers
3. Designing Parasitic Tracers (for high-level languages)
4. Case Study: Ruby
5. Conclusion

## Background — Tracing and Me
I have extensive experience with dynamic instrumentation and tracing, including:
- Java Bytecode
- Android (Frida, Xposed)
- Linux (eBPF, Frida)
- Ruby (Frida)

### Dynamic Instrumentation
- Function hooking
- Instruction instrumentation (assembly, bytecode, etc.)

### Dynamic Tracing
- Dynamically enabling/disabling existing logging functionality
- Adding enhanced logging functionality not originally present

## Background — Ruby and Me
### Ruby Bytecode Transformation
- I was blackbox testing a Rails web app.
- The app loaded from pre-compiled Ruby bytecode, which I extracted.
- The bytecode format was incompatible with existing decompilers.
- I diffed instruction listings between versions and de-optimized new opcodes.

### Socket Adventure
- A colleague and I were investigating Ruby's dRuby protocol.
- We wrote a scanner in Ruby.
- It hung on read in a Docker container but worked in a VM.
- I discovered that using `IO#read` on a Socket object is problematic.
- This led me to start writing a low-level parasitic tracer for Ruby.

## Parasitic Tracers
### What Are They?
- A tracer is an enhanced logger that dumps program state.
- A parasite is an unwanted organism living symbiotically on or inside another.
- A parasitic tracer is a specialized tracer that attaches to and injects itself into a target process, utilizing internal functionality not intended to be exposed.
- The goal is tracing; the parasitism is an implementation detail.
- Examples include injecting code via `LD_PRELOAD`.

### Why Use Them?
- Bridging the gap between high-level abstractions and low-level implementations aids:
  - Reversing
  - Performance analysis
  - Debugging
- To prototype tracing infrastructure that could be implemented within the target itself.

### Examples
- Frida’s Java bridge for Android and JVM (HotSpot/JVMTI) are examples of parasitic tracers.
- They provide anchor points for tapping functionality with hooks targeting higher-level Java operations.
- Vanilla Java agents (java.lang.instrument/JVMTI) do not qualify as they use public APIs.

## Designing Parasitic Tracers (for high-level languages)
### Prerequisites
- Means to hook or instrument code dynamically.
- Ability to invoke existing functionality, ideally with stable native APIs.
  - Public APIs (preferred)
  - Internal APIs with symbols
  - Internal APIs without symbols but with reliable handles
  - Reimplementation
  - Gadgets (last resort)

### Concepts
#### Reconnaissance
- Reverse engineering to understand internals.
- Identifying relevant target functionality to extract information, wrap with hooks, and obtain necessary data.
- Hooking lower-level operations to spy on or manipulate higher-level ones.

#### Instrumentation
- Hook relevant functionality.
- Extract program state at runtime.
- Invoke internal operations to obtain more information or configure program state.

#### Puppeteering
- Take control from hooks or injected threads/tasks.
- Build interfaces to invoke functionality and translate inputs/outputs.
- Enhance interfaces for first-class interop.

#### Composition
- Start small, build big.
- Focus on strong footholds for deeper hooking/instrumentation/analysis.
- Layer abstractions to support multiple versions of the target.

## Let’s Talk About Ruby
### Ruby Overview
- An interpreted, high-level, general-purpose, dynamically typed language.
- Supports procedural, object-oriented, and functional programming.
- Notable features:
  - Everything is an object.
  - Methods are also objects.
  - Optional parentheses, making every field access a method call.
  - Internally, methods are called by sending messages.
  - Method swizzling.
  - Object-centric programming.
  - Duck typing.
  - Perl-inspired super globals.
  - Multiple ways to achieve the same task.

### For Want of a Tracer
- Ruby lacks good low-level introspection/tracing capabilities.
- Its TracePoint API is limited.
- CRuby (YARV, formerly MRI) is the reference implementation.
- CRuby implements a custom bytecode virtual machine, but this is an implementation detail.
- Ruby on CRuby is similar to Java on the JVM, but lacks the analysis and tooling support around its bytecode ISA.

## ruby-trace: A Tracer for Ruby
### Overview
- A Frida-based CLI tool for instrumenting and dumping execution information from Ruby programs on Linux.
- Node.js CLI interface.
- Uses frida-compile for modular design of injected agent JS payload.

### Features
- Hooks various Ruby VM opcode implementations and common C function execution mechanisms.
- Extracts opcode arguments, return values, and relevant metadata.
- Supports Ruby 2.6-3.0+ with generic shared implementations and version-specific overrides.
- Uses C structs from each supported Ruby version to generically extract struct fields.
- Supports using the TracePoint API for fine-grained tracing.
- Includes extensive test cases and support for dead Ruby opcodes.

### Future Work
- Support for Ractors (Ruby’s new actor model concurrency feature).
- Keeping ruby-trace up-to-date with new Ruby versions.

### Where to Find It
- [GitHub Repository](https://github.com/nccgroup/ruby-trace) (available shortly after this presentation).

## Conclusion
- This has been a fun and challenging exercise in reversing.
- These techniques can be applied to gain deeper insights into code running on high-level language interpreters/runtimes.
- Many applicable languages lack good tooling, such as Python, Node/V8, Golang, and Haskell.
- More people should try building these tools.

### Go Forth and Write Parasitic Tracers
> "You know, if one person, just one person does it, they may think he’s really sick. And three people do it, three, can you imagine three people writing parasitic tracers? They may think it’s an organization. And can you, can you imagine fifty people, I said fifty people, writing these tracers? Friends, they may think it’s a movement."
> ~Arlo Guthrie

## Greetz
- Addison Amiri

## Questions?
- Email: [PI:EMAIL]
- Twitter: [@ChaosDatumz]

© NCC Group 2021. All rights reserved.