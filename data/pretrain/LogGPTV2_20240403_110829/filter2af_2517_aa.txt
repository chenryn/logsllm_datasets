作者：Leeqwind  
作者博客：
近期在研究和开发基于虚拟化的虚拟 HOOK 技术。在 Windows 7 x64 环境开发实测期间，发现针对 `NtCreateThreadEx` 函数的
HOOK 存在问题：该函数大部分情况下变得只返回 `0xC00000F2` (`STATUS_INVALID_PARAMETER_4`) 第 4
个参数无效的状态码。这导致系统出现很多问题，大部分的新线程都无法成功创建。为了解决这个问题，在这篇文章中对问题进行追溯，查找到底是哪里导致的。
经过追踪：发现位于在 `NtAllocateVirtualMemory` 中如下位置赋值了提到的错误状态码：
    kd> p
    nt! ?? ::NNGAKEGL::`string'+0x47703:
    fffff800`041e171e b8f20000c0      mov     eax,0C00000F2h
调用栈如下：
    kd> k
     # Child-SP          RetAddr           Call Site
    00 fffff880`028e7470 fffff800`03e918d3 nt! ?? ::NNGAKEGL::`string'+0x47703
    01 fffff880`028e7610 fffff800`03e8de70 nt!KiSystemServiceCopyEnd+0x13
    02 fffff880`028e7818 fffff800`04180a63 nt!KiServiceLinkage
    03 fffff880`028e7820 fffff800`03e918d3 nt!NtSetInformationProcess+0x4c6
    04 fffff880`028e7b70 fffff800`03e8de70 nt!KiSystemServiceCopyEnd+0x13
    05 fffff880`028e7d08 fffff800`04180226 nt!KiServiceLinkage
    06 fffff880`028e7d10 fffff800`0417e84d nt!RtlCreateUserStack+0x122
    07 fffff880`028e7e00 fffff800`0417e47e nt!PspAllocateThread+0x299
    08 fffff880`028e8020 fffff800`04182385 nt!PspCreateThread+0x1d2
    09 fffff880`028e82a0 fffff880`03ea22ee nt!NtCreateThreadEx+0x25d
    0a fffff880`028e89f0 fffff800`03e918d3 DetectModule!Handle_SSDT_NtCreateThreadEx+0x9e 
    0b fffff880`028e8a70 00000000`76e51d9a nt!KiSystemServiceCopyEnd+0x13
    0c 00000000`0366af18 000007fe`fd01b4a3 ntdll!NtCreateThreadEx+0xa
    0d 00000000`0366af20 00000000`76bf65b6 KernelBase!CreateRemoteThreadEx+0x163
    0e 00000000`0366b3e0 000007fe`f57f7186 kernel32!CreateThreadStub+0x36
    0f 00000000`0366b430 00000000`00000000 0x000007fe`f57f7186
具体的调用链：
    NtCreateThreadEx > PspCreateThread > PspAllocateThread > RtlCreateUserStack > ZwSetInformationProcess > NtSetInformationProcess > ZwAllocateVirtualMemory > NtAllocateVirtualMemory
最终在 NtAllocateVirtualMemory 函数中因其第4个参数的问题导致了 0xC00000F2 的状态码。报错误码的指令前面的 10
条执行指令如下：
    eb05            jmp     nt!NtAllocateVirtualMemory+0x119 (fffff800`04189da9)
    488b056092f3ff  mov     rax,qword ptr [nt!MmHighestUserAddress (fffff800`040c3010)]
    48050000ffff    add     rax,0FFFFFFFFFFFF0000h
    483bd8          cmp     rbx,rax
    0f8755790500    ja      nt! ?? ::NNGAKEGL::`string'+0x476f9 (fffff800`041e1714)
    488b054a92f3ff  mov     rax,qword ptr [nt!MmHighestUserAddress (fffff800`040c3010)]
    482bc3          sub     rax,rbx
    482dffff0000    sub     rax,0FFFFh
    493bc7          cmp     rax,r15
    0f8246790500    jb      nt! ?? ::NNGAKEGL::`string'+0x47703 (fffff800`041e171e)
    b8f20000c0      mov     eax,0C00000F2h
通过 IDA Hex 插件查看：
    if ( v147 > MmHighestUserAddress - 0x10000 )
        return 0xC00000F0i64;
    if ( MmHighestUserAddress - v147 - 0xFFFF  r rax, r15
    rax=000007fffffe0000 r15=fffffa8000000000
显而易见地，问题出在 r15 寄存器的值，而 r15 寄存器的值是由 r10 寄存器存储的指针指向地址的值赋值的。
    kd> r r10
    r10=fffff880030f8918
    kd> dq fffff880030f8918 l1
    fffff880`030f8918  fffffa80`00000000