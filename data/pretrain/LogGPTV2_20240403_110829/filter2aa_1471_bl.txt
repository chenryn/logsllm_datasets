completion lists. Completion lists can be set up with
NtAlpcSetInformationPort.
A final optimization worth mentioning is that instead of copying data as
soon as it is sent, the kernel sets up the payload for a delayed copy, capturing
only the needed information, but without any copying. The message data is
copied only when the receiver requests the message. Obviously, if shared
memory is being used, there’s no advantage to this method, but in
asynchronous, kernel-buffer message passing, this can be used to optimize
cancellations and high-traffic scenarios.
Power management
As we’ve seen previously, when used in constrained power environments,
such as mobile platforms, Windows uses a number of techniques to better
manage power consumption and processor availability, such as by doing
heterogenous processing on architectures that support it (such as ARM64’s
big.LITTLE) and by implementing Connected Standby as a way to further
reduce power on user systems when under light use.
To play nice with these mechanisms, ALPC implements two additional
features: the ability for ALPC clients to push wake references onto their
ALPC server’s wake channel and the introduction of the Work On Behalf Of
Attribute. The latter is an attribute that a sender can choose to associate with
a message when it wants to associate the request with the current work ticket
that it is associated with, or to create a new work ticket that describes the
sending thread.
Such work tickets are used, for example, when the sender is currently part
of a Job Object (either due to being in a Silo/Windows Container or by being
part of a heterogenous scheduling system and/or Connected Standby system)
and their association with a thread will cause various parts of the system to
attribute CPU cycles, I/O request packets, disk/network bandwidth
attribution, and energy estimation to be associated to the “behalf of” thread
and not the acting thread.
Additionally, foreground priority donation and other scheduling steps are
taken to avoid big.LITTLE priority inversion issues, where an RPC thread is
stuck on the small core simply by virtue of being a background service. With
a work ticket, the thread is forcibly scheduled on the big core and receives a
foreground boost as a donation.
Finally, wake references are used to avoid deadlock situations when the
system enters a connected standby (also called Modern Standby) state, as was
described in Chapter 6 of Part 1, or when a UWP application is targeted for
suspension. These references allow the lifetime of the process owning the
ALPC port to be pinned, preventing the force suspend/deep freeze operations
that the Process Lifetime Manager (PLM) would attempt (or the Power
Manager, even for Win32 applications). Once the message has been
delivered and processed, the wake reference can be dropped, allowing the
process to be suspended if needed. (Recall that termination is not a problem
because sending a message to a terminated process/closed port immediately
wakes up the sender with a special PORT_CLOSED reply, instead of
blocking on a response that will never come.)
ALPC direct event attribute
Recall that ALPC provides two mechanisms for clients and servers to
communicate: requests, which are bidirectional, requiring a response, and
datagrams, which are unidirectional and can never be synchronously replied
to. A middle ground would be beneficial—a datagram-type message that
cannot be replied to but whose receipt could be acknowledged in such a way
that the sending party would know that the message was acted upon, without
the complexity of having to implement response processing. In fact, this is
what the direct event attribute provides.
By allowing a sender to associate a handle to a kernel event object
(through CreateEvent) with the ALPC message, the direct event attribute
captures the underlying KEVENT and adds a reference to it, tacking it onto
the KALPC_MESSAGE structure. Then, when the receiving process gets the
message, it can expose this direct event attribute and cause it to be signaled.
A client could either have a Wait Completion Packet associated with an I/O
completion port, or it could be in a synchronous wait call such as with
WaitForSingleObject on the event handle and would now receive a
notification and/or wait satisfaction, informing it of the message’s successful
delivery.
This functionality was previously manually provided by the RPC runtime,
which allows clients calling RpcAsyncInitializeHandle to pass in
RpcNotificationTypeEvent and associate a HANDLE to an event object with
an asynchronous RPC message. Instead of forcing the RPC runtime on the
other side to respond to a request message, such that the RPC runtime on the
sender’s side would then signal the event locally to signal completion, ALPC
now captures it into a Direct Event attribute, and the message is placed on a
Direct Message Queue instead of the regular Message Queue. The ALPC
subsystem will signal the message upon delivery, efficiently in kernel mode,
avoiding an extra hop and context-switch.
Debugging and tracing
On checked builds of the kernel, ALPC messages can be logged. All ALPC
attributes, blobs, message zones, and dispatch transactions can be
individually logged, and undocumented !alpc commands in WinDbg can
dump the logs. On retail systems, IT administrators and troubleshooters can
enable the ALPC events of the NT kernel logger to monitor ALPC messages,
(Event Tracing for Windows, also known as ETW, is discussed in Chapter
10.) ETW events do not include payload data, but they do contain connection,
disconnection, and send/receive and wait/unblock information. Finally, even
on retail systems, certain !alpc commands obtain information on ALPC ports
and messages.
EXPERIMENT: Dumping a connection port
In this experiment, you use the CSRSS API port for Windows
processes running in Session 1, which is the typical interactive
session for the console user. Whenever a Windows application
launches, it connects to CSRSS’s API port in the appropriate
session.
1. 
Start by obtaining a pointer to the connection port with the
!object command:
Click here to view code image
lkd> !object \Sessions\1\Windows\ApiPort
Object: ffff898f172b2df0  Type: (ffff898f032f9da0) 
ALPC Port
    ObjectHeader: ffff898f172b2dc0 (new version)
    HandleCount: 1  PointerCount: 7898
    Directory Object: ffffc704b10d9ce0  Name: ApiPort
2. 
Dump information on the port object itself with !alpc /p.
This will confirm, for example, that CSRSS is the owner:
Click here to view code image
lkd> !alpc /P ffff898f172b2df0
Port ffff898f172b2df0
  Type                      : ALPC_CONNECTION_PORT
  CommunicationInfo         : ffffc704adf5d410
    ConnectionPort          : ffff898f172b2df0 
(ApiPort), Connections
    ClientCommunicationPort : 0000000000000000
    ServerCommunicationPort : 0000000000000000
  OwnerProcess              : ffff898f17481140 
(csrss.exe), Connections
  SequenceNo                : 0x0023BE45 (2342469)
  CompletionPort            : 0000000000000000
  CompletionList            : 0000000000000000
  ConnectionPending         : No
  ConnectionRefused         : No
  Disconnected              : No
  Closed                    : No
  FlushOnClose              : Yes
  ReturnExtendedInfo        : No
  Waitable                  : No
  Security                  : Static
  Wow64CompletionList       : No
  5 thread(s) are waiting on the port:
    THREAD ffff898f3353b080  Cid 0288.2538  Teb: 
00000090bce88000
    Win32Thread: ffff898f340cde60 WAIT
    THREAD ffff898f313aa080  Cid 0288.19ac  Teb: 
00000090bcf0e000
    Win32Thread: ffff898f35584e40 WAIT
    THREAD ffff898f191c3080  Cid 0288.060c  Teb: 
00000090bcff1000
    Win32Thread: ffff898f17c5f570 WAIT
    THREAD ffff898f174130c0  Cid 0288.0298  Teb: 
00000090bcfd7000
    Win32Thread: ffff898f173f6ef0 WAIT
    THREAD ffff898f1b5e2080  Cid 0288.0590  Teb: 
00000090bcfe9000
    Win32Thread: ffff898f173f82a0 WAIT
    THREAD ffff898f3353b080  Cid 0288.2538  Teb: 
00000090bce88000
    Win32Thread: ffff898f340cde60 WAIT
  Main queue is empty.
  Direct message queue is empty.
  Large message queue is empty.
  Pending queue is empty.
  Canceled queue is empty.
3. 
You can see what clients are connected to the port, which
includes all Windows processes running in the session, with
the undocumented !alpc /lpc command, or, with a newer
version of WinDbg, you can simply click the Connections
link next to the ApiPort name. You will also see the server
and client communication ports associated with each
connection and any pending messages on any of the queues:
Click here to view code image
lkd> !alpc /lpc ffff898f082cbdf0
ffff898f082cbdf0(’ApiPort’) 0, 131 connections
        ffff898f0b971940 0 ->ffff898F0868a680 0 
ffff898f17479080(’wininit.exe’)
        ffff898f1741fdd0 0 ->ffff898f1742add0 0 
ffff898f174ec240(’services.exe’)
        ffff898f1740cdd0 0 ->ffff898f17417dd0 0 
ffff898f174da200(’lsass.exe’)
        ffff898f08272900 0 ->ffff898f08272dc0 0 
ffff898f1753b400(’svchost.exe’)
        ffff898f08a702d0 0 ->ffff898f084d5980 0 
ffff898f1753e3c0(’svchost.exe’)
        ffff898f081a3dc0 0 ->ffff898f08a70070 0 
ffff898f175402c0(’fontdrvhost.ex’)
        ffff898F086dcde0 0 ->ffff898f17502de0 0 
ffff898f17588440(’svchost.exe’)
        ffff898f1757abe0 0 ->ffff898f1757b980 0 
ffff898f17c1a400(’svchost.exe’)
4. 
Note that if you have other sessions, you can repeat this
experiment on those sessions also (as well as with session 0,
the system session). You will eventually get a list of all the
Windows processes on your machine.
Windows Notification Facility
The Windows Notification Facility, or WNF, is the core underpinning of a
modern registrationless publisher/subscriber mechanism that was added in
Windows 8 as a response to a number of architectural deficiencies when it
came to notifying interested parties about the existence of some action, event,
or state, and supplying a data payload associated with this state change.
To illustrate this, consider the following scenario: Service A wants to
notify potential clients B, C, and D that the disk has been scanned and is safe
for write access, as well as the number of bad sectors (if any) that were
detected during the scan. There is no guarantee that B, C, D start after A—in
fact, there’s a good chance they might start earlier. In this case, it is unsafe
for them to continue their execution, and they should wait for A to execute
and report the disk is safe for write access. But if A isn’t even running yet,
how does one wait for it in the first place?
A typical solution would be for B to create an event
“CAN_I_WAIT_FOR_A_YET” and then have A look for this event once
started, create the “A_SAYS_DISK_IS_SAFE” event and then signal
“CAN_I_WAIT_FOR_A_YET,” allowing B to know it’s now safe to wait
for “A_SAYS_DISK_IS_SAFE”. In a single client scenario, this is feasible,
but things become even more complex once we think about C and D, which
might all be going through this same logic and could race the creation of the
“CAN_I_WAIT_FOR_A_YET” event, at which point they would open the
existing event (in our example, created by B) and wait on it to be signaled.
Although this can be done, what guarantees that this event is truly created by
B? Issues around malicious “squatting” of the name and denial of service
attacks around the name now arise. Ultimately, a safe protocol can be
designed, but this requires a lot of complexity for the developer(s) of A, B, C,
and D—and we haven’t even discussed how to get the number of bad sectors.
WNF features
The scenario described in the preceding section is a common one in operating
system design—and the correct pattern for solving it clearly shouldn’t be left
to individual developers. Part of a job of an operating system is to provide
simple, scalable, and performant solutions to common architectural
challenges such as these, and this is what WNF aims to provide on modern
Windows platforms, by providing:
■    The ability to define a state name that can be subscribed to, or
published to by arbitrary processes, secured by a standard Windows
security descriptor (with a DACL and SACL)
■    The ability to associate such a state name with a payload of up to 4
KB, which can be retrieved along with the subscription to a change in
the state (and published with the change)
■    The ability to have well-known state names that are provisioned with
the operating system and do not need to be created by a publisher
while potentially racing with consumers—thus consumers will block
on the state change notification even if a publisher hasn’t started yet
■    The ability to persist state data even between reboots, such that
consumers may be able to see previously published data, even if they
were not yet running
■    The ability to assign state change timestamps to each state name, such
that consumers can know, even across reboots, if new data was
published at some point without the consumer being active (and
whether to bother acting on previously published data)
■    The ability to assign scope to a given state name, such that multiple
instances of the same state name can exist either within an interactive
session ID, a server silo (container), a given user token/SID, or even
within an individual process.
■    Finally, the ability to do all of the publishing and consuming of WNF
state names while crossing the kernel/user boundary, such that
components can interact with each other on either side.
WNF users
As the reader can tell, providing all these semantics allows for a rich set of
services and kernel components to leverage WNF to provide notifications and
other state change signals to hundreds of clients (which could be as fine-
grained as individual APIs in various system libraries to large scale
processes). In fact, several key system components and infrastructure now
use WNF, such as
■    The Power Manager and various related components use WNF to
signal actions such as closing and opening the lid, battery charging
state, turning the monitor off and on, user presence detection, and
more.
■    The Shell and its components use WNF to track application launches,
user activity, lock screen behavior, taskbar behavior, Cortana usage,
and Start menu behavior.
■    The System Events Broker (SEB) is an entire infrastructure that is
leveraged by UWP applications and brokers to receive notifications
about system events such as the audio input and output.
■    The Process Manager uses per-process temporary WNF state names
to implement the wake channel that is used by the Process Lifetime
Manager (PLM) to implement part of the mechanism that allows
certain events to force-wake processes that are marked for suspension
(deep freeze).
Enumerating all users of WNF would take up this entire book because
more than 6000 different well-known state names are used, in addition to the
various temporary names that are created (such as the per-process wake
channels). However, a later experiment showcases the use of the wnfdump
utility part of the book tools, which allows the reader to enumerate and
interact with all of their system’s WNF events and their data. The Windows
Debugging Tools also provide a !wnf extension that is shown in a future
experiment and can also be used for this purpose. Meanwhile, the Table 8-31
explains some of the key WNF state name prefixes and their uses. You will
encounter many Windows components and codenames across a vast variety
of Windows SKUs, from Windows Phone to XBOX, exposing the richness
of the WNF mechanism and its pervasiveness.
Table 8-31 WNF state name prefixes
Prefix
# of 
Names
Usage
9P
2
Plan 9 Redirector
A2A
1
App-to-App
AAD
2
Azure Active Directory
AA
3
Assigned Access
ACC
1
Accessibility
ACH
K
1
Boot Disk Integrity Check (Autochk)
ACT
1
Activity
AFD
1
Ancillary Function Driver (Winsock)
AI
9
Application Install
AOW
1
Android-on-Windows (Deprecated)
ATP
1
Microsoft Defender ATP
AUD
C
15
Audio Capture
AVA
1
Voice Activation
AVL
C
3
Volume Limit Change
BCST
1
App Broadcast Service
BI
16
Broker Infrastructure
BLT
H
14
Bluetooth
BMP
2
Background Media Player
BOO
T
3
Boot Loader
BRI
1
Brightness
BSC
1
Browser Configuration (Legacy IE, Deprecated)
CAM
66
Capability Access Manager
CAPS
1
Central Access Policies
CCT
L
1
Call Control Broker
CDP